[{"code": "(fn rec [ls]\r\n  (lazy-seq\r\n    (if (empty? ls) ()\r\n      (concat\r\n        (repeat 2 (first ls))\r\n        (rec (rest ls))))))", "problem": 32, "user": "4dd62278535d2dad7130b5c7"}, {"code": "#(interleave % %)", "problem": 32, "user": "4dd61f98535d2dad7130b5c6"}, {"code": "(fn[x](mapcat #(list%%)x))", "problem": 32, "user": "4dd66da7535d2dad7130b5c8"}, {"code": "(fn dup [s]\r\n  (if-let [[x & xs] (seq s)]\r\n    (cons x (cons x (dup xs)))))", "problem": 32, "user": "4dd6d6a0535d2dad7130b5ca"}, {"code": "#(reduce concat (map (partial repeat 2) %))", "problem": 32, "user": "4dd6fa35535d2dad7130b5cd"}, {"code": "#(reverse (reduce (fn [acc elm] (conj acc elm elm)) '() %))", "problem": 32, "user": "4dd6d7ee535d2dad7130b5cb"}, {"code": "(fn dup [xs]\r\n  (if (empty? xs)\r\n    xs\r\n    (conj (dup (rest xs)) (first xs) (first xs))))", "problem": 32, "user": "4dd023dd535d5973398f92ad"}, {"code": "(fn dupl ([s] \r\n (reduce #( concat %1 [%2 %2]) []  s)))", "problem": 32, "user": "4db135081254ad5b4805fa67"}, {"code": "(fn [coll]\r\n  (mapcat #(repeat 2 %) coll))", "problem": 32, "user": "4dd4f0a8535dae65d5c462e4"}, {"code": "reduce (fn [a n] (concat a `(~n ~n))) ()", "problem": 32, "user": "4dd52e29535dae65d5c462e5"}, {"code": "#(interleave % %)", "problem": 32, "user": "4dae0510c9a9d6ed4b99dc57"}, {"code": "(fn [xs] (reduce (fn [acc l] (concat acc l)) '() (map #(list % %) xs)))", "problem": 32, "user": "4ddbd934535d02782fcbe9fc"}, {"code": "#(mapcat (fn [x] [x x]) %)", "problem": 32, "user": "4ddbfb8a535d02782fcbea00"}, {"code": "(fn [x] \r\n  (reverse (reduce \r\n\t\t(fn [r l] \r\n\t\t\t(conj r l l)\r\n\t\t)\r\n\t\t'() \r\n\t\tx\r\n\t))\r\n)", "problem": 32, "user": "4dd579b5535dae65d5c462ea"}, {"code": "(fn [s]\r\n  (letfn [(dd [in lst]\r\n            (if (empty? in)\r\n              lst\r\n              (recur (rest in) (concat lst (concat (list (first in)) (list (first in)))))))]\r\n    (dd s '())))", "problem": 32, "user": "4dd1de4d535dae65d5c462d7"}, {"code": "(fn [lst]\r\n  (loop [ns lst xs '()]\r\n    (if (= (first ns) nil)\r\n      (reverse xs)\r\n      (recur (rest ns) (conj xs (first ns) (first ns))))))", "problem": 32, "user": "4ddc620d535d02782fcbea06"}, {"code": "(fn [x]\r\n  (loop [[a & b] x, r []]\r\n\t   (if (seq b)\r\n\t       (recur b (conj (conj r a) a))\r\n\t       (seq (conj (conj r a) a)))))", "problem": 32, "user": "4db342d7535df7e46ed9b6cd"}, {"code": "(fn [input] (interleave input input))", "problem": 32, "user": "4dddf817535d08e6dec9fdd3"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "4ddbdc1b535d02782fcbe9fd"}, {"code": "(fn dupe[coll](\r\n    if (empty? coll) ()  \r\n  (concat (list (first coll) (first coll))\r\n  (dupe (rest coll)))))", "problem": 32, "user": "4dbed096535d020aff1edf6b"}, {"code": "(fn [coll]\r\n (reverse\r\n  (reduce\r\n   (fn [col val]\r\n    (cons val (cons val col)))\r\n  []\r\n  coll)))", "problem": 32, "user": "4ddee37c535d08e6dec9fddc"}, {"code": "(fn [items]\r\n  (apply concat (map (fn [x] (list x x)) items)))", "problem": 32, "user": "4ddc1c89535d02782fcbea01"}, {"code": "(fn [s] (reverse (reduce #(conj %1 %2 %2) '() s)))", "problem": 32, "user": "4de2f44f535d08e6dec9fdec"}, {"code": "(fn [c] (reduce (fn [acc e] (concat acc [e e])) '() c))", "problem": 32, "user": "4daed74dedd6309eace4d163"}, {"code": "(fn dup [lst]\r\n  (if (seq lst)\r\n    (lazy-seq (concat (repeatedly 2 (constantly (first lst))) (dup (rest lst))))))", "problem": 32, "user": "4dda5d07535d02782fcbe9f2"}, {"code": "(fn [l]\r\n  (loop [collected [] r l]\r\n    (if (= r []) collected\r\n        (recur (conj collected\r\n                     (first r)\r\n                     (first r))\r\n               (rest r))\r\n)))", "problem": 32, "user": "4db883e1535d1e037afb2198"}, {"code": "(fn [coll] (interleave coll coll))", "problem": 32, "user": "4ddeb916535d08e6dec9fdd9"}, {"code": "#(interleave % %)", "problem": 32, "user": "4de18de7535d08e6dec9fde8"}, {"code": "(fn [xs]\r\n  (seq \r\n    (reduce (fn [acc x] \r\n             (conj acc x x))\r\n            []\r\n            xs)))", "problem": 32, "user": "4dea9406535d08e6dec9fe01"}, {"code": "(fn double [s]\r\n     (if (seq s)\r\n\t       (conj (double (rest s)) (first s) (first s))))", "problem": 32, "user": "4de623ef535d08e6dec9fdf4"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "4de77a0a535d08e6dec9fdfa"}, {"code": "(fn [x] \n  (loop [x (reverse x) result ()]\n    (if (empty? x) result\n      (recur \n        (rest x) \n        (conj result (first x) (first x))))))", "problem": 32, "user": "4dadc6f2c9a9d6ed4099dc57"}, {"code": "(fn dup [[x & xs]]\r\n  (cond\r\n    (empty? xs) (cons x (cons x '()))\r\n    :else (cons x (cons x (dup xs)))))", "problem": 32, "user": "4dc7e7a5535d8a4b2fd74290"}, {"code": "#(loop [s (reverse %) e '() c false]\r\n  (if (empty? s) e \r\n    (recur \r\n      (if c (rest s) s)\r\n      (conj e (first s)) \r\n      (not c))))", "problem": 32, "user": "4dee4a9c535d08e6dec9fe11"}, {"code": "#(interleave % %)", "problem": 32, "user": "4de85c5d535d08e6dec9fdfc"}, {"code": "(fn dup [s]\r\n  (if (empty? s)\r\n    s\r\n    (conj (dup (rest s)) (first s) (first s))))", "problem": 32, "user": "4df1ce44535d08e6dec9fe1f"}, {"code": "(fn [x]\n  (apply concat\n    (map #(list % %) x)))", "problem": 32, "user": "4df1e213535d08e6dec9fe20"}, {"code": "(fn [coll] (interleave coll coll))", "problem": 32, "user": "4df168bd535d08e6dec9fe1d"}, {"code": "(fn [x] \r\n       (reduce #(conj %1 %2 %2) [] x))", "problem": 32, "user": "4deb529a535d08e6dec9fe04"}, {"code": "#(interleave % %)", "problem": 32, "user": "4dbbe3b9535d3f4042261ecf"}, {"code": "#(mapcat (fn [x] [x x]) %)", "problem": 32, "user": "4df3d4f4535d08e6dec9fe2c"}, {"code": "(fn [s] (apply concat (map #(list % %) s)))", "problem": 32, "user": "4df20dda535d08e6dec9fe23"}, {"code": "(fn [coll]\r\n  (apply concat (map #(list % %) coll)))", "problem": 32, "user": "4df407c3535d08e6dec9fe2e"}, {"code": "(fn [x] (mapcat #(seq [% %]) x))", "problem": 32, "user": "4df3df8a535d08e6dec9fe2d"}, {"code": "(fn [coll] (interleave coll coll))", "problem": 32, "user": "4daef21cedd6309eace4d169"}, {"code": "(partial mapcat #(vector % %))", "problem": 32, "user": "4df669d4535d08e6dec9fe35"}, {"code": "#(loop [col % c ()]\r\n  (if (empty? col)\r\n    (reverse c)\r\n  (recur (rest col) \r\n  (cons (first col) (cons (first col) c)))))", "problem": 32, "user": "4db6ce85535d1e037afb217f"}, {"code": "(fn [xs] (apply concat (map #(vec [% %]) xs)))", "problem": 32, "user": "4dfd4ba8535d04ed9115e781"}, {"code": "mapcat (fn [x](repeat 2 x))", "problem": 32, "user": "4de6f806535d08e6dec9fdf7"}, {"code": "#(mapcat (fn [v ] (repeat 2 v)) %)", "problem": 32, "user": "4def301c535d08e6dec9fe12"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "4e02bee8535d04ed9115e791"}, {"code": "#(interleave % %)", "problem": 32, "user": "4e03c616535d04ed9115e796"}, {"code": "(fn duplicate\r\n        ([coll] (duplicate coll []))\r\n        ([coll coll2] \r\n          (if (empty? coll)\r\n            coll2\r\n            (duplicate (rest coll) (conj (conj coll2 (first coll)) (first coll))))))", "problem": 32, "user": "4dddff47535d08e6dec9fdd4"}, {"code": "#(loop [acc []\r\n        s %]\r\n        (if (empty? s)\r\n           acc\r\n           (recur (conj (conj acc (first s)) \r\n                        (first s))\r\n                  (rest s))))", "problem": 32, "user": "4e07eac0535d04ed9115e7a9"}, {"code": "#(interleave % %)", "problem": 32, "user": "4e09392a535d04ed9115e7ae"}, {"code": "(fn dup[x] (if (empty? x)  x (conj (dup (rest x)) (first x) (first x)  )))", "problem": 32, "user": "4e080562535d04ed9115e7aa"}, {"code": "#(interleave % %)", "problem": 32, "user": "4e09125f535d04ed9115e7ad"}, {"code": "(fn [x] (reduce concat (map #(list % %) x)))", "problem": 32, "user": "4e059278535d04ed9115e7a5"}, {"code": "(fn [x] (reverse (reduce #(conj %1 %2 %2) () x)))", "problem": 32, "user": "4e0d8c27535d04ed9115e7b7"}, {"code": "reduce (fn [l r] (concat l [r r])) ()", "problem": 32, "user": "4e0e0529535d04ed9115e7b9"}, {"code": "(fn ([coll] \r\n(loop [coll coll newcoll ()]\r\n  (if (empty? coll)\r\n    (reverse newcoll)\r\n    (recur (rest coll) (conj newcoll (first coll)(first coll)))))))", "problem": 32, "user": "4de8fb73535d08e6dec9fdff"}, {"code": "#(interleave % %)", "problem": 32, "user": "4dd7d040535d2dad7130b5d6"}, {"code": "(fn [c] (mapcat #(list % %) c))", "problem": 32, "user": "4e111538535d04ed9115e7c3"}, {"code": "mapcat #(vector % %)", "problem": 32, "user": "4daa374930acd6ed13482a68"}, {"code": "(fn dupseq [init-xs]\r\n  (loop [ys [], xs init-xs]\r\n  (if (empty? xs)\r\n    ys\r\n    (recur (conj ys (first xs) (first xs)) (rest xs)))))", "problem": 32, "user": "4e123905535d04ed9115e7ce"}, {"code": "#(interleave % %)", "problem": 32, "user": "4e14108c535d04ed9115e7dd"}, {"code": "mapcat #(repeat 2 %)", "problem": 32, "user": "4e1158aa535d04ed9115e7c6"}, {"code": "(fn [x]\r\n  (loop [sequ x acc []]\r\n    (if (empty? sequ)\r\n      (seq acc)\r\n      (recur (rest sequ) (conj acc (first sequ) (first sequ))))  ))", "problem": 32, "user": "4e14090d535d04ed9115e7dc"}, {"code": "mapcat #(list%%)", "problem": 32, "user": "4e14b925535d04ed9115e7df"}, {"code": "(fn [x]\r\n  (loop [s x r []]\r\n    (if (empty? s) r\r\n    (recur (rest s) (conj r (first s) (first s))))))", "problem": 32, "user": "4deff9f9535d08e6dec9fe15"}, {"code": "(fn mydup [lt]\r\n    (apply concat (map #(list % %) lt)))", "problem": 32, "user": "4e1b2cd9535d04ed9115e7fd"}, {"code": "#(interleave % %)", "problem": 32, "user": "4e16bdef535d04ed9115e7e9"}, {"code": "(fn [lat]\r\n  (reduce concat (map #(take 2 (repeat %)) lat)))\r\n\r\n;(fn dupseq [n]\r\n;  (if (empty? n) '()\r\n;    (cons (first n) (cons (first n) (dupseq (rest n))))))", "problem": 32, "user": "4ddb339c535d02782fcbe9f9"}, {"code": "(fn [x] (reduce concat (map (fn [y] (list y y)) x)))", "problem": 32, "user": "4e1e7f88535d04ed9115e808"}, {"code": "(fn [list]\r\n  \t(list* (reduce #(conj %1 %2 %2) [] list)))", "problem": 32, "user": "4dfd7ecf535d04ed9115e783"}, {"code": "#(interleave % %)", "problem": 32, "user": "4e0cdc6f535d04ed9115e7b4"}, {"code": "#(interleave % %)", "problem": 32, "user": "4dc25124535d020aff1edf94"}, {"code": "(fn f\r\n  ([s]\r\n    (f s []))\r\n  ([s acc]\r\n    (if (next s)\r\n      (recur (next s) (conj (conj acc (first s)) (first s)))\r\n      (conj (conj acc (first s)) (first s)))))", "problem": 32, "user": "4e21c139535d04ed9115e819"}, {"code": "(fn [coll]\r\n  (loop [acc []\r\n         coll coll]\r\n    (if (empty? coll)\r\n      acc\r\n      (recur (conj acc (first coll) (first coll))\r\n             (rest coll)))))", "problem": 32, "user": "4e22b78b535d04ed9115e81e"}, {"code": "#(interleave % %)", "problem": 32, "user": "4e1f9bb5535d04ed9115e80d"}, {"code": "(fn [sek] (loop [lista nil i 0]\r\n    (cond\r\n      (= (count sek) i) (reverse lista)\r\n      :else (recur (conj lista (nth sek i) (nth sek i)) (inc i))\r\n)))", "problem": 32, "user": "4e218470535d04ed9115e817"}, {"code": "(fn [s] (mapcat #(repeat 2 %) s))", "problem": 32, "user": "4e218464535d04ed9115e816"}, {"code": "(fn [coll]\r\n  (apply concat (map #(list % %) coll))\r\n)", "problem": 32, "user": "4e1ec17a535d04ed9115e80a"}, {"code": "reduce (fn [acc e] (conj (conj acc e) e)) []", "problem": 32, "user": "4de165f3535d08e6dec9fde6"}, {"code": "(fn f [[x & more]]\r\n  (if (not x)\r\n    []\r\n    (cons x (cons x (f more)))))", "problem": 32, "user": "4e113a81535d04ed9115e7c5"}, {"code": "#(interleave % %)", "problem": 32, "user": "4e232f34535d04ed9115e81f"}, {"code": "; ist mapcat lazy ? -> kl\u00e4ren\n(fn myduplicate [x] \n  (if (sequential? x)\n    (mapcat #(list % %) x) \n    (list x x)))", "problem": 32, "user": "4e131443535d04ed9115e7d3"}, {"code": "(fn [s]\r\n   (loop [r (seq s) acc '()]\r\n     (if (nil? (seq r))\r\n       (reverse acc)\r\n       (let [f (first r)]\r\n         (recur (rest r) (conj (conj acc f) f))))))", "problem": 32, "user": "4e26e8b4535deb9a81d77ef6"}, {"code": "#(interleave % %)", "problem": 32, "user": "4e28120f535deb9a81d77efa"}, {"code": "(fn duplicate [coll]\r\n  (mapcat #(list % %) coll))", "problem": 32, "user": "4dc54eb2535d8a4b2fd74284"}, {"code": "(fn [xs] (mapcat #(list % %) xs))", "problem": 32, "user": "4e21c0c7535d04ed9115e818"}, {"code": "#(letfn [(dup [xs]\r\n          (if (= xs [])\r\n              []\r\n\t            (let [x (first xs)]\r\n\t\t          (concat (list x x) (dup (rest xs))))))]\r\n  (dup %))", "problem": 32, "user": "4e273301535deb9a81d77ef7"}, {"code": "#(interleave % %)", "problem": 32, "user": "4de760a3535d08e6dec9fdf9"}, {"code": "(fn dupli [sq]\n (reverse\n  (reduce #(cons %2 (cons %2 %1)) '() sq)))", "problem": 32, "user": "4e2d562c535deb9a81d77f07"}, {"code": "#(reduce concat (map (fn [x] [x x]) %))", "problem": 32, "user": "4e2edb0e535deb9a81d77f0d"}, {"code": "(fn hoge [x]\n  (if (= (count x) 1) (list (first x) (first x))\n      (cons (first x) (cons (first x) (hoge (rest x))))))", "problem": 32, "user": "4e2e6460535deb9a81d77f0b"}, {"code": "(fn dup [l]\n  (if (empty? l) '()\n      (cons (first l)\n            (cons (first l) (dup (rest l))))))", "problem": 32, "user": "4e2d84bf535deb9a81d77f09"}, {"code": "#(interleave % %)", "problem": 32, "user": "4e307313535deb9a81d77f14"}, {"code": "(fn [seq] \n  (reverse (reduce #(cons %2 (cons %2 %1)) '() seq)))", "problem": 32, "user": "4e2f9e71535deb9a81d77f11"}, {"code": "(fn [l]\n  (reverse (reduce (fn [a b] (cons b (cons  b a ))) '() l)))", "problem": 32, "user": "4df9c598535d04ed9115e77a"}, {"code": "(fn [coll] (mapcat #(vector % %) coll))", "problem": 32, "user": "4e31a15c535deb9a81d77f1e"}, {"code": "(fn my-dup [seq]\n  (if (empty? seq) seq\n      (conj (my-dup (rest seq)) (first seq) (first seq))))", "problem": 32, "user": "4e342671535deb9a81d77f29"}, {"code": "(fn [coll]\n  (reverse\n    (reduce (fn [acc x] (cons x (cons x acc))) [] coll)))", "problem": 32, "user": "4e36425c535deb9a81d77f33"}, {"code": "#(interleave % %)", "problem": 32, "user": "4e360757535deb9a81d77f32"}, {"code": "(fn [x] \r\n    (interleave x x))", "problem": 32, "user": "4e370a04535deb9a81d77f37"}, {"code": "(fn [seeq]\n  (reverse\n    (loop [curr-seeq seeq,\n           ret-seeq '()]\n      (if (empty? curr-seeq) ret-seeq\n          (let [el (first curr-seeq)]\n            (recur (rest curr-seeq)\n                   (cons el (cons el ret-seeq))))))))", "problem": 32, "user": "4e0febe6535d04ed9115e7be"}, {"code": "reduce #(concat % [%2 %2]) []", "problem": 32, "user": "4e2b1d48535deb9a81d77f03"}, {"code": "#(interleave % %)", "problem": 32, "user": "4ded27db535d08e6dec9fe0a"}, {"code": "(fn [x] (mapcat (fn [y] (repeat 2 y)) x))", "problem": 32, "user": "4e3000c8535deb9a81d77f13"}, {"code": "(fn dup [ lst ]\n  (if (empty? lst) '()\n    (let [ fst (first lst)]\n      (cons fst (cons fst (dup (rest lst)))))))", "problem": 32, "user": "4e356d2b535deb9a81d77f2d"}, {"code": "(fn [x]\n  (interleave x x) )", "problem": 32, "user": "4e333091535deb9a81d77f25"}, {"code": "(fn [l] (for [val l index [0 1]] val))", "problem": 32, "user": "4e351b47535deb9a81d77f2b"}, {"code": "(fn \n  ([s] (interleave s s)))", "problem": 32, "user": "4e30da02535deb9a81d77f17"}, {"code": "(fn d [x]\n  (if (= (count x) 1) \n      (conj x (first x))\n      (conj (d (rest x)) (first x) (first x))\n  )\n)", "problem": 32, "user": "4e39c710535deb9a81d77f45"}, {"code": "#(mapcat (fn [x] (list x x)) %)", "problem": 32, "user": "4e39fb68535deb9a81d77f47"}, {"code": "mapcat (partial repeat 2)", "problem": 32, "user": "4e3996b0535deb9a81d77f41"}, {"code": "(fn [s] (loop [s s, r nil]\n  (if\n    (empty? s)\n    r\n    (recur (rest s) (concat r (list (first s) (first s)))))))", "problem": 32, "user": "4e3ac1b2535deb9a81d77f4c"}, {"code": "#(interleave % %)", "problem": 32, "user": "4e3f480c535dc968683fc497"}, {"code": "#(interleave % %)", "problem": 32, "user": "4e39d763535deb9a81d77f46"}, {"code": "#(interleave % %)", "problem": 32, "user": "4e3456f9535deb9a81d77f2a"}, {"code": "(fn [sequence]\n  (let [dupe (fn dupe [so-far to-go]\n              (if (empty? to-go)\n                so-far\n                (dupe (conj so-far (first to-go) (first to-go))\n                      (rest to-go))))]\n  (dupe [] sequence)))", "problem": 32, "user": "4e42f930535dc968683fc49f"}, {"code": "(fn duplicate [orig]\n  (loop [orig orig rs '()]\n    (if (nil? (first orig))\n      (reverse rs)\n      (recur (rest orig) (conj (conj rs (first orig)) (first orig))))))", "problem": 32, "user": "4dde4e95535d08e6dec9fdd7"}, {"code": "(fn [x]\n  (apply concat (map #(repeat 2 %) x)))", "problem": 32, "user": "4e2ef93d535deb9a81d77f0f"}, {"code": "(fn duplica [xs]\n  (mapcat #(list % %) xs))", "problem": 32, "user": "4db51ce0535d87e67b28fe06"}, {"code": "(fn dup [s]\n  (if (nil? s) \n      '()\n      (conj (dup (next s))\n            (first s) (first s))))", "problem": 32, "user": "4e444c11535dc968683fc4a9"}, {"code": "#((fn duplicate [result remainder] \n    (if (empty? remainder)\n        result\n        (recur (conj result \n          (first remainder) (first remainder))\n                (rest remainder)))) [] %)", "problem": 32, "user": "4e4870d1535dc968683fc4bc"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "4e43b0d9535dc968683fc4a3"}, {"code": "(fn dup\r\n  ([lst res]\r\n    (if (= [] lst)\r\n      res\r\n      (let [x (first lst)]\r\n        (dup (rest lst) (conj res x x)))))\r\n  ([lst]\r\n    (dup lst [])))", "problem": 32, "user": "4e49fc29535dc968683fc4cb"}, {"code": "(fn [arg]\n  (reverse (reduce #(conj %1 %2 %2) '() arg)))", "problem": 32, "user": "4e08fb7a535d04ed9115e7ac"}, {"code": "mapcat (fn [a] `(~a ~a))", "problem": 32, "user": "4e49badd535dc968683fc4c9"}, {"code": "#(interleave % %)", "problem": 32, "user": "4e4a94a9535dc968683fc4cd"}, {"code": "(fn [seq]\n  (apply concat\n    (map #(list % %) seq)))", "problem": 32, "user": "4e4ae5aa535dc968683fc4d2"}, {"code": "(fn [xs]\n  (apply concat (map (fn [x] [x x]) xs)))", "problem": 32, "user": "4e4c238f535dc968683fc4dc"}, {"code": "(fn [coll]\n  (interleave coll coll))", "problem": 32, "user": "4e4b4564535dc968683fc4d3"}, {"code": "(fn [s]\n  (loop [s s result []]\n    (if (seq s)\n      (recur (next s) (conj result (first s) (first s)))\n    result)))", "problem": 32, "user": "4e410033535dc968683fc49c"}, {"code": "(fn [seq]\n  (loop [result '()\n         cur seq]\n    (if (empty? cur) (reverse result)\n     (recur (cons (first cur) \n       (cons (first cur) result))\n         (rest cur)))))", "problem": 32, "user": "4e4bf20e535dc968683fc4d9"}, {"code": "(fn [coll]\n  (mapcat #(repeat 2 %) coll))", "problem": 32, "user": "4de27757535d08e6dec9fdea"}, {"code": "(fn [x]\n  (loop [y x, tmp (first y), res ()]\n    (cond (= y ()) (reverse res)\n          :else (recur (rest y) (first (rest y)) (conj res tmp tmp)))))", "problem": 32, "user": "4e49a7bb535dc968683fc4c6"}, {"code": "(fn dup-seq [coll]\n  (reduce (fn [l x]\n      (conj l x x))\n\t  []\n          coll))", "problem": 32, "user": "4e4bd94b535dc968683fc4d7"}, {"code": "#(interleave % %)", "problem": 32, "user": "4e463703535dc968683fc4b2"}, {"code": "#(interleave %1 %1)", "problem": 32, "user": "4e4ad154535dc968683fc4d1"}, {"code": "(fn hop [xs] \n  (if (empty? xs)\n    xs\n    (lazy-seq \n      (concat (list (first xs) (first xs) )\n              (hop (rest xs))))))", "problem": 32, "user": "4e4fbd0c535dc968683fc4e9"}, {"code": "#(apply concat (map (partial repeat 2) %))", "problem": 32, "user": "4e50b67b535dc968683fc4ed"}, {"code": "(fn [col] (apply concat (map vector col col)))", "problem": 32, "user": "4e513ecf535dc968683fc4f6"}, {"code": "reduce #(conj % %2 %2) []", "problem": 32, "user": "4e50e2a0535dc968683fc4ef"}, {"code": "#(interleave % %)", "problem": 32, "user": "4e5229dc535d302ef430da6f"}, {"code": "#(apply concat (map (fn[a] [a a]) %))", "problem": 32, "user": "4e12cc9d535d04ed9115e7d2"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "4e52d815535d302ef430da77"}, {"code": "#(reduce (fn [ys x] (conj ys x x)) [] %)", "problem": 32, "user": "4e513758535dc968683fc4f3"}, {"code": "#(interleave % %)", "problem": 32, "user": "4e399685535deb9a81d77f40"}, {"code": "(fn dup[s]\n  (if (nil? s)\n    '()\n    (cons (first s) (cons (first s) (dup (next s))))))", "problem": 32, "user": "4e50c894535dc968683fc4ee"}, {"code": "#(mapcat (fn [e] [e e]) %)", "problem": 32, "user": "4e5411e8535d8a8b8723a279"}, {"code": "(fn [l] (reduce #(conj %1 %2 %2) [] l))", "problem": 32, "user": "4dbf0cd2535d020aff1edf72"}, {"code": "(fn [x] (interleave x x))", "problem": 32, "user": "4e47f4f3535dc968683fc4bb"}, {"code": "(fn dupe [s]\n     (let [x  (first s)\n           xs (rest s)]\n       (if (empty? s)\n         []\n         (concat [x x] (dupe xs)))))", "problem": 32, "user": "4e5676b2535d8a8b8723a282"}, {"code": "(fn [coll]\n  (apply concat (map #(vector % %) coll)))", "problem": 32, "user": "4e521cef535d302ef430da6d"}, {"code": "(fn[a-seq]\n  (mapcat (fn[a](repeat 2 a)) a-seq))", "problem": 32, "user": "4e58bcd4535d8a8b8723a296"}, {"code": "#(reduce concat (map (partial repeat 2) %))", "problem": 32, "user": "4e58dd23535d8a8b8723a298"}, {"code": "#(mapcat vector % %)", "problem": 32, "user": "4e5914e0535d8a8b8723a29b"}, {"code": "(fn [x] (apply concat (map #(list % %) x)))", "problem": 32, "user": "4e593dac535d8a8b8723a29c"}, {"code": "(fn [xs] \n  (loop [cur-seq xs new-seq []] \n    (if (empty? cur-seq) \n      new-seq \n      (recur \n        (rest cur-seq) \n        (conj new-seq (first cur-seq) (first cur-seq))))))", "problem": 32, "user": "4ddabc33535d02782fcbe9f5"}, {"code": "(fn dup\n    ([n]\n        (dup n '()))\n    ([n acc]\n        (if  (empty? n)   acc\n             (recur (butlast n) (conj acc (last n) (last n))))))", "problem": 32, "user": "4e51fccf535d302ef430da6b"}, {"code": "(fn duplicate-members [s]\n  (let [this (first s)\n        remaining (next s)]\n    (if (not (seq remaining))\n      [this this]\n      (lazy-seq \n        (concat\n          [this this]\n          (duplicate-members remaining))))))", "problem": 32, "user": "4e584256535d8a8b8723a28e"}, {"code": "#(interleave % %)", "problem": 32, "user": "4e498df9535dc968683fc4c4"}, {"code": "#(for [x % y [1 2]] x)", "problem": 32, "user": "4e588e84535d8a8b8723a294"}, {"code": "#(interleave % %)", "problem": 32, "user": "4e570f47535d8a8b8723a287"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "4e599577535d8a8b8723a29f"}, {"code": "mapcat #(repeat 2 %)", "problem": 32, "user": "4e597b2c535d8a8b8723a29d"}, {"code": "#(interleave % %)", "problem": 32, "user": "4e589bdc535d8a8b8723a295"}, {"code": "(fn [seq]\n    (loop [s seq r []]\n      (if (empty? s)\n        r\n        (recur (rest s) (concat r [(first s) (first s)])))))", "problem": 32, "user": "4e360072535deb9a81d77f30"}, {"code": "(fn [coll] (reduce concat (map #(vector % %) coll)))", "problem": 32, "user": "4e5bff2b535d8a8b8723a2bd"}, {"code": "mapcat #(vector % %)", "problem": 32, "user": "4e5c801e535d8a8b8723a2c1"}, {"code": "(partial mapcat (partial repeat 2))", "problem": 32, "user": "4e5b192e535d8a8b8723a2b3"}, {"code": "#(loop [acc '() l %]\n       (if (empty? l)\n           acc\n         (recur (reverse (cons (first l) (cons (first l) (reverse acc))))\n                (rest l))))", "problem": 32, "user": "4e43c91f535dc968683fc4a5"}, {"code": "(fn [n] (interleave n n))", "problem": 32, "user": "4e5d2dc5535d8a8b8723a2ca"}, {"code": "(partial mapcat #(vector % %))", "problem": 32, "user": "4dad938fc9a9d6ed1b99dc57"}, {"code": "#(interleave % %)", "problem": 32, "user": "4e5a2403535d8a8b8723a2a7"}, {"code": "(fn [coll]\n           (reduce #(conj %1 %2 %2)\n                   []\n                   coll))", "problem": 32, "user": "4e3bccb1535deb9a81d77f55"}, {"code": "(fn [s] (apply concat (map #(list % %) s)))", "problem": 32, "user": "4e5f08c7535d8a8b8723a2da"}, {"code": "(fn [s] (interleave s s))", "problem": 32, "user": "4e5ecd65535d8a8b8723a2d6"}, {"code": "#(interleave % %)", "problem": 32, "user": "4e5a3891535d8a8b8723a2aa"}, {"code": "(fn [x] (reduce concat (map (fn [y] (list y y)) x)))", "problem": 32, "user": "4e4b911f535dc968683fc4d6"}, {"code": "(fn [s] (loop [r [] l s]\n                 (if (= (count l) 1) (conj r (first l) (first l)) (recur (conj r (first l) (first l)) (rest l)))))", "problem": 32, "user": "4e5e9f6b535d8a8b8723a2d2"}, {"code": "(fn [s]\n  (interleave s s))", "problem": 32, "user": "4e55ea0c535d8a8b8723a281"}, {"code": "(fn [xs] (reduce concat [] (map #(vector % %) xs)))", "problem": 32, "user": "4e615cd2535d8ccf87e9fe58"}, {"code": "(fn [coll]\n  \"32. Write a function which duplicates each element of a sequence.\"\n  (mapcat (fn [x] [x x]) coll))", "problem": 32, "user": "4e5eb843535d8a8b8723a2d4"}, {"code": "mapcat #(vector % %)", "problem": 32, "user": "4e5867d1535d8a8b8723a291"}, {"code": "(fn [x]\n  (reduce #(conj %1 %2 %2) [] x))", "problem": 32, "user": "4e52777f535d302ef430da76"}, {"code": "(fn duplicate\n  [coll]\n    (mapcat list coll coll))", "problem": 32, "user": "4e3bcccd535deb9a81d77f56"}, {"code": "(fn [x] (mapcat #(repeat 2 %) x))", "problem": 32, "user": "4e634eb9535d8ccf87e9fe63"}, {"code": "(fn dup\n  ([s] (dup s [])) \n  ([s r] (let[f (first s) n (next s) r (conj r f f)]\n      (if n (recur n r) r)\n    ))\n)", "problem": 32, "user": "4e44358f535dc968683fc4a8"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "4e46ac46535dc968683fc4b5"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "4e6472b7535d8ccf87e9fe6c"}, {"code": "(fn dup [x]\n  (cond   (empty? x) '()\n\t\t\ttrue (cons (first x) (cons (first x) (dup (rest x))))))", "problem": 32, "user": "4e5fda32535d8ccf87e9fe4e"}, {"code": "(fn [coll] (mapcat #(vector (identity %) (identity %)) coll))", "problem": 32, "user": "4e3bcca9535deb9a81d77f54"}, {"code": "(fn [sq] (mapcat #(repeat 2 %1) sq))", "problem": 32, "user": "4dcc3281535d5973398f9291"}, {"code": "#(reduce (fn [r e] (conj r e e)) [] %)", "problem": 32, "user": "4e65f9d4535d8ccf87e9fe73"}, {"code": "#(loop [curList %1\r\n       retList '()]\r\n      (if (empty? curList)\r\n        retList\r\n        (recur (rest curList) (concat (concat retList (list (first curList))) (list (first curList))))))", "problem": 32, "user": "4e5bdc2b535d8a8b8723a2bb"}, {"code": "(fn [s] (loop [doubled (map (fn [x] [x x]) s)\n               acc []]\n                 (if (empty? doubled)\n                    acc\n                    (recur (rest doubled) (concat acc (first doubled))))))", "problem": 32, "user": "4e68b46c535d8ccf87e9fe87"}, {"code": "(fn f [xs]\n  (when (not-empty xs)\n    (cons (first xs)\n          (cons (first xs)\n                (f (rest xs))))))", "problem": 32, "user": "4e68dbd5535d8ccf87e9fe8f"}, {"code": "(fn [xs]\n  (letfn [(dup [l]\n            (if (empty? l)\n              '()\n              (conj (dup (rest l)) (first l) (first l))))]\n    (dup xs)))", "problem": 32, "user": "4e667f67535d8ccf87e9fe77"}, {"code": "(fn [coll]\n  (mapcat #(vector % %) coll))", "problem": 32, "user": "4e68c434535d8ccf87e9fe89"}, {"code": "(fn f [v] (when-let [[h & t] v] (cons h (cons h (f t)))))", "problem": 32, "user": "4e6a4038535d8ccf87e9feb5"}, {"code": "(fn dup[x]\n  (loop [stuff x\n        retval '()]\n      (if (empty? stuff)\n        (reverse retval)\n        (recur\n          (rest stuff)\n          (cons (first stuff) (cons (first stuff) retval))))))", "problem": 32, "user": "4e6a60cd535d8ccf87e9fed7"}, {"code": "#(mapcat (fn [x] [x x]) %)", "problem": 32, "user": "4e6a48d5535d8ccf87e9febd"}, {"code": "mapcat (fn [x] (list x x))", "problem": 32, "user": "4e6ab9cb535d8ccf87e9fefe"}, {"code": "#(mapcat vector % %)", "problem": 32, "user": "4e6b3fc8535d8ccf87e9ff0f"}, {"code": "(fn [xs & dups]\r\n  (let [dups (if (nil? dups) () (first dups))]\r\n    (if (nil? (first xs))\r\n      (reverse dups)\r\n      (recur (next xs) (list (concat (repeat 2 (first xs)) dups))))))", "problem": 32, "user": "4e6a97a9535d8ccf87e9fef8"}, {"code": "(fn [parts] (mapcat #(repeat 2 %) parts))", "problem": 32, "user": "4df0524e535d08e6dec9fe17"}, {"code": "(fn [x] (interleave x x))", "problem": 32, "user": "4e6def42535d5021c1a895f7"}, {"code": "#(interleave % %)", "problem": 32, "user": "4e31a101535deb9a81d77f1d"}, {"code": "mapcat #(vec [% %])", "problem": 32, "user": "4e6a412e535d8ccf87e9feb6"}, {"code": "(fn [a-seq] (mapcat #(list % %) a-seq))", "problem": 32, "user": "4e6dc95a535d5021c1a895f1"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "4e5fe31a535d8ccf87e9fe50"}, {"code": "(fn dup [coll] \r\n  (lazy-seq \r\n    (when-let [s (seq coll)] \r\n      (cons (first s) (cons (first s) (dup (rest s)))))))", "problem": 32, "user": "4de8a7d7535d08e6dec9fdfe"}, {"code": "#(mapcat list % %)", "problem": 32, "user": "4e6dd51b535d5021c1a895f6"}, {"code": "#(interleave % %)", "problem": 32, "user": "4e223bd6535d04ed9115e81c"}, {"code": "#(apply concat (map (fn [x] (list x x)) %))", "problem": 32, "user": "4e6e3a1e535d5021c1a89602"}, {"code": "(fn [x] (mapcat #(vector % %) x))", "problem": 32, "user": "4e6a5f5c535d8ccf87e9fed6"}, {"code": "(partial (fn [n s]\n           (reduce #(concat %1\n                            (vector %2 %2)) n s))\n         [])", "problem": 32, "user": "4e6ebd4a535d5021c1a89610"}, {"code": "#(interleave % %)", "problem": 32, "user": "4e6dd0f5535d5021c1a895f3"}, {"code": "(fn [coll] (mapcat #(repeat 2 %) coll))", "problem": 32, "user": "4e6daa22535d5021c1a895ef"}, {"code": "#(interleave % %)", "problem": 32, "user": "4e6e6630535d5021c1a89609"}, {"code": "(fn [l] (interleave l l))", "problem": 32, "user": "4e6e10d8535d5021c1a895fd"}, {"code": "(fn [l] (apply concat (map #(list % %) l)))", "problem": 32, "user": "4e6a2f51535d8ccf87e9fea9"}, {"code": "#(loop [col % c ()]\n  (if (empty? col)\n    (reverse c)\n  (recur (rest col)\n  (cons (first col) (cons (first col) c)))))", "problem": 32, "user": "4e2f377a535deb9a81d77f10"}, {"code": "(fn dup ([x] (when (>= (count x) 1)\n   (cons (first x) (cons (first x) (dup (rest x)))) \n   )))", "problem": 32, "user": "4e6cf521535de274dd8d818b"}, {"code": "#(sort (into % %))", "problem": 32, "user": "4e1248b1535d04ed9115e7cf"}, {"code": "#(interleave % %)", "problem": 32, "user": "4e6dc5f5535d5021c1a895f0"}, {"code": "(fn duplicate [xs]\n  (if (empty? xs)\n    '()\n    (cons (first xs) (cons (first xs) (duplicate (rest xs))))))", "problem": 32, "user": "4e691c79535d8ccf87e9fe97"}, {"code": "reduce #(conj % %2 %2) []", "problem": 32, "user": "4e704293535d5021c1a89634"}, {"code": "(fn [x]\n  ((fn dupelts [coll]\n    (if-let [[f & r] (seq coll)]\n(cons f (cons f (dupelts r)))\n())) x))", "problem": 32, "user": "4e6a4950535d8ccf87e9febf"}, {"code": "(fn [coll]\r\n  (loop [x (first coll) tail (next coll) acc '()]\r\n    (if (nil? x)\r\n      acc\r\n      (recur (first tail) (next tail) (concat acc (repeat 2 x))))))", "problem": 32, "user": "4e6a6b83535d8ccf87e9fee0"}, {"code": "#(mapcat (fn [a] (repeat 2 a)) %)", "problem": 32, "user": "4e68be01535d8ccf87e9fe88"}, {"code": "#(loop [acc [], remaining %]\n  (if (empty? remaining)\n    acc\n    (recur (conj acc (first remaining) (first remaining))\n           (rest remaining))))", "problem": 32, "user": "4e6a2f93535d8ccf87e9feaa"}, {"code": "(fn [s] (mapcat #(list %1 %2) s s))", "problem": 32, "user": "4e6a11ee535d8ccf87e9fe9f"}, {"code": "(fn f [x]\n  (lazy-seq\n    (when (seq x)\n      (cons (first x) (cons (first x) (f (next x)))))))", "problem": 32, "user": "4e71cc2e535d5021c1a89652"}, {"code": "#(interleave % %)", "problem": 32, "user": "4e7115b3535d5021c1a89647"}, {"code": "(fn [coll] (reduce concat (map #(conj [%] %) coll)))", "problem": 32, "user": "4e5d0e96535d8a8b8723a2c8"}, {"code": "(fn dup [alist]\n  (reverse (reduce #(cons %2 (cons %2 %1)) '() alist))\n)", "problem": 32, "user": "4e6a79ca535d8ccf87e9feeb"}, {"code": "(fn dup\n  ([acc rem] \n    (let [front (first rem) \n          back (rest rem)]\n        (if front\n          (recur (conj acc front front) back)\n          (reverse acc))\n    ))\n  ([coll] (dup '() coll)))", "problem": 32, "user": "4e6defcc535d5021c1a895f8"}, {"code": "(fn [xs] (mapcat (fn [x] [x x]) xs))", "problem": 32, "user": "4e6a3985535d8ccf87e9feb1"}, {"code": "(fn [coll] (reduce (fn [x y] (concat x [y y])) '() coll))", "problem": 32, "user": "4e6e97ca535d5021c1a8960c"}, {"code": "(partial reduce #(conj %1 %2 %2) [])", "problem": 32, "user": "4e6fa38b535d5021c1a89622"}, {"code": "(fn [col] (reduce #(conj %1 %2 %2) [] col))", "problem": 32, "user": "4daedd1eedd6309eace4d164"}, {"code": "(fn [s] (mapcat #(list % %) s))", "problem": 32, "user": "4daf907aedd6309eace4d17b"}, {"code": "(fn [coll]\n  (loop [xs coll lst '()]\n    (if (seq xs)\n      (let [end (last xs)]\n        (recur (pop xs) (conj (conj lst end) end)))\n      lst\n    )\n  )  \n)", "problem": 32, "user": "4e6a4edd535d8ccf87e9fec4"}, {"code": "#(reduce (fn [coll x]\n  (conj (conj coll x) x)) [] %)", "problem": 32, "user": "4e6f1b7a535d5021c1a89618"}, {"code": "(fn[x] (mapcat (fn[y] (list y y)) x))", "problem": 32, "user": "4e70ef6f535d5021c1a89644"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "4e71da4d535d5021c1a89653"}, {"code": "(fn [l] (reduce concat [] (map #(list % %) l)))", "problem": 32, "user": "4e720985535d5021c1a89655"}, {"code": "(fn f [xs] \n  (if (nil? (first xs))\n    '()\n    (conj (f (rest xs)) (first xs) (first xs))))", "problem": 32, "user": "4e71920f535d5021c1a8964e"}, {"code": "(fn dupseq [[x & xs :as l]]\n                  (if-not (empty? l)\n                    (cons x (cons x (dupseq xs)))))", "problem": 32, "user": "4e71705e535d5021c1a89649"}, {"code": "(fn [c] (mapcat #(repeat 2 %) c))", "problem": 32, "user": "4e6e3aac535d5021c1a89603"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "4e6f8d36535d5021c1a89621"}, {"code": "#(interleave % %)", "problem": 32, "user": "4e6e7018535d5021c1a8960b"}, {"code": "#(interleave % %)", "problem": 32, "user": "4e6df3c9535d5021c1a895fa"}, {"code": "(fn [s]\n  (mapcat #(take 2 (repeat %)) s))", "problem": 32, "user": "4e70c0b1535d5021c1a89640"}, {"code": "#(interleave % %)", "problem": 32, "user": "4db858d1535d1e037afb218c"}, {"code": "#(interleave % %)", "problem": 32, "user": "4e6eff83535d5021c1a89615"}, {"code": "(fn [coll]\n  (mapcat (fn [elem] [elem elem]) coll))", "problem": 32, "user": "4e68fad4535d8ccf87e9fe93"}, {"code": "#(sort (concat % %))", "problem": 32, "user": "4e6b07dd535d8ccf87e9ff0a"}, {"code": "(fn [coll](mapcat #(repeat 2 %) coll))", "problem": 32, "user": "4e739e13535dff18050a9c76"}, {"code": "(fn [in](reverse (reduce (fn [a b] (cons b (cons b a))) '() in)))", "problem": 32, "user": "4e773be8535d324fb2983d6e"}, {"code": "#(loop [c % a []]\n  (if (empty? c) a \n                (recur (next c) (conj (conj a (first c)) (first c)))))", "problem": 32, "user": "4e6acc33535d8ccf87e9ff05"}, {"code": "(fn [col]\n  (loop [c col v []]\n    (if (empty? c)\n      v\n      (recur (rest c) (conj v (first c)(first c)))\n      )\n    )\n  )", "problem": 32, "user": "4db7da66535d1e037afb2187"}, {"code": "(fn [x] \n  (loop [result [], c x] (if (first c) (recur (conj result (first c) (first c)) (rest c)) result))\n)", "problem": 32, "user": "4e794004535db169f9c796a1"}, {"code": "#(mapcat (fn [x] (list x x)) %)", "problem": 32, "user": "4e781a2e535d324fb2983d74"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "4e79a143535db169f9c796a2"}, {"code": "(fn [li] (apply concat (map (fn [x] (list x x)) li)))", "problem": 32, "user": "4e78dc98535db95036265724"}, {"code": "mapcat #(repeat 2 %)", "problem": 32, "user": "4da3e51330acd6ed10482a68"}, {"code": "(fn [input] (mapcat #(list % %) input))", "problem": 32, "user": "4e5d1912535d8a8b8723a2c9"}, {"code": "#(interleave % %)", "problem": 32, "user": "4e707db6535d5021c1a8963a"}, {"code": "#(sort (concat % %))", "problem": 32, "user": "4e6a4641535d8ccf87e9feb9"}, {"code": "reduce (fn [acc x] (conj (conj acc x) x)) []", "problem": 32, "user": "4e7a5395535db169f9c796ab"}, {"code": "(fn [xs]\n  (mapcat #(identity [%1 %1]) xs))", "problem": 32, "user": "4e6a2e83535d8ccf87e9fea7"}, {"code": "(fn [x] (apply concat (map #(vec [% %]) x)))", "problem": 32, "user": "4e6ed7e4535d5021c1a89613"}, {"code": "(fn [coll]\n  (loop [res () sc coll]\n    (if (nil? (seq sc))\n      (reverse res)\n      (recur (conj res (first sc) (first sc)) (rest sc)))))", "problem": 32, "user": "4e7bc07c535db169f9c796b9"}, {"code": "(fn mydouble\n  [col]\n  (loop [col col\n         r '()]\n    (let [elem (first col)]\n      (if elem\n        (recur (rest col) (conj (conj r elem) elem))\n        (reverse r)))))\n\n;; ;-(\n;; mapcat #(list % %)", "problem": 32, "user": "4e5a460f535d8a8b8723a2ab"}, {"code": "(partial mapcat (juxt identity identity))", "problem": 32, "user": "4e6a0667535d8ccf87e9fe9e"}, {"code": "#(mapcat (fn [elt] [elt elt]) %)", "problem": 32, "user": "4e7c8fd1535db169f9c796be"}, {"code": "#(interleave % %)", "problem": 32, "user": "4e7c4290535db169f9c796bc"}, {"code": "(fn dupseq\n  ([col] (dupseq col []))\n  ([col newcol]\n    (if (empty? col)\n        (seq newcol)\n        (let [e (first col) rcol (conj (conj newcol e) e)]\n            (recur (rest col) rcol)))))", "problem": 32, "user": "4e7ada51535db169f9c796ae"}, {"code": "#(interleave % %)", "problem": 32, "user": "4e7db3b4535db169f9c796e1"}, {"code": "mapcat (fn [e] [e e])", "problem": 32, "user": "4e7dd982535db169f9c796ee"}, {"code": "(fn [coll]\n  (mapcat #(repeat 2 %1) coll))", "problem": 32, "user": "4e40529b535dc968683fc49a"}, {"code": "(fn cpy [l] \n  (if (empty? l)\n    l\n  (cons (first l) (cons (first l) (cpy (rest l))))\n  )\n  )", "problem": 32, "user": "4e78c208535db95036265722"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "4e7dfab0535db169f9c796f9"}, {"code": "#(interleave % %)", "problem": 32, "user": "4e7e032b535db169f9c796fc"}, {"code": "(fn dup [s] \n (loop [s s a []]\n   (if (empty? s) a \n   (recur (rest s) (conj a (first s) (first s))))))", "problem": 32, "user": "4e7e55ab535db169f9c79711"}, {"code": "#(interleave%%)", "problem": 32, "user": "4e7eff9e535db966e863cc38"}, {"code": "#(reduce (fn [l e] (conj l e e)) [] %)", "problem": 32, "user": "4e7e93f5535db169f9c7971a"}, {"code": "#(mapcat (fn [el] (repeat 2 el)) %)", "problem": 32, "user": "4e7e33a3535db169f9c79708"}, {"code": "#(mapcat (fn [x] [x x]) %)", "problem": 32, "user": "4e765170535d324fb2983d69"}, {"code": "(fn [s] (apply concat (map #(list % %) s)))", "problem": 32, "user": "4e7f4147535db966e863cc3d"}, {"code": "(fn my-duplicate [coll]\n  (reverse (reduce (fn [a b] (cons b (cons b a)))\n                   nil coll)))", "problem": 32, "user": "4e7f51eb535db966e863cc3f"}, {"code": "(fn [s]\n  (loop [[part & parts] s acc []]\n    (if (nil? part) acc (recur parts (concat acc [part part])))))", "problem": 32, "user": "4e7f7e48535db966e863cc42"}, {"code": "#(interleave % %)", "problem": 32, "user": "4e6ea1f5535d5021c1a8960e"}, {"code": "#(interleave % %)", "problem": 32, "user": "4e76ba46535d324fb2983d6d"}, {"code": "#(let [u %] (sort (reduce conj u %)))", "problem": 32, "user": "4e1fe800535d04ed9115e811"}, {"code": "(fn [seq]\n  (reverse (reduce #(conj %1 %2 %2) () seq))\n)", "problem": 32, "user": "4e7e05a6535db169f9c796fe"}, {"code": "mapcat #(concat [%] [%])", "problem": 32, "user": "4e70ed07535d5021c1a89643"}, {"code": "(fn [x] (interleave x x))", "problem": 32, "user": "4e7e241a535db169f9c79705"}, {"code": "#(interleave % %)", "problem": 32, "user": "4e726914535d5021c1a89661"}, {"code": "#(apply concat (for [a %] [a a]))", "problem": 32, "user": "4e80d71b535db62dc21a62b7"}, {"code": "(fn dbl [c]\n  (when (not (empty? c))\n    (let [x (first c)]\n      (concat [x x] (dbl (rest c))))))", "problem": 32, "user": "4e80aa10535db62dc21a62b1"}, {"code": "(fn [s]\n  (reduce into (map (fn [el] [el el]) s)))", "problem": 32, "user": "4e6a73d0535d8ccf87e9fee7"}, {"code": "(fn [s]\n  (loop [r [] c s]\n    (if (seq c)\n      (recur (conj r (first c) (first c)) (rest c))\n      r)))", "problem": 32, "user": "4e7e4d5c535db169f9c7970f"}, {"code": "(fn [lst]\n  (loop [org lst acc '()]\n           (if (empty? org) (reverse acc)\n (recur (rest org) (conj (conj acc (first org)) (first org))))))", "problem": 32, "user": "4e7dbe0c535db169f9c796e3"}, {"code": "#(interleave % %)", "problem": 32, "user": "4db85282535d1e037afb218a"}, {"code": "#(interleave % %)", "problem": 32, "user": "4e7dcdb5535db169f9c796e9"}, {"code": "(fn foo [coll] \n  (if (empty? coll) '()\n  (concat (list (first coll) (first coll)) (foo (rest coll))))\n)", "problem": 32, "user": "4e7f3891535db966e863cc3b"}, {"code": "#(sort (into % %))", "problem": 32, "user": "4e823f41535db62dc21a62c8"}, {"code": "(fn myduplicate [l]\n  (apply concat (map (fn [x] (list x x)) l)\n  )\n)", "problem": 32, "user": "4e6cf2be535de274dd8d818a"}, {"code": "#(interleave % %)", "problem": 32, "user": "4e823ed7535db62dc21a62c7"}, {"code": "(fn [x]\n  ((fn [y result]\n    (if (empty? y)\n        result\n        (recur (butlast y) (conj (conj result (last y)) \n(last y)))))\n  x '()))", "problem": 32, "user": "4e73a9dc535dff18050a9c77"}, {"code": "#(interleave % %)", "problem": 32, "user": "4e837808535db62dc21a62d9"}, {"code": "#(reduce concat (map list % %))", "problem": 32, "user": "4e46e48b535dc968683fc4b7"}, {"code": "(fn [s] \n  (loop \n    [accu '()\n     r s] \n    (if (empty? r) \n      (reverse accu) \n      (recur (cons (first r) (cons (first r) accu)) (rest r)))))", "problem": 32, "user": "4e82c062535db62dc21a62cc"}, {"code": "(fn [c] (interleave c c))", "problem": 32, "user": "4e7f32ee535db966e863cc3a"}, {"code": "#(for [x %, y [x x]] y)", "problem": 32, "user": "4db1f7d223724b71670a9c07"}, {"code": "(fn [a] (apply concat (map #(list % %) a)))", "problem": 32, "user": "4e662d58535d8ccf87e9fe75"}, {"code": "(fn [coll] (mapcat #(identity [% %]) coll))", "problem": 32, "user": "4e79ff2a535db169f9c796a9"}, {"code": "(fn [coll]\r\n    (loop [c coll r '()]\r\n\t   (if (empty? c)\r\n\t       r\r\n\t       (recur (drop-last c)\r\n\t\t      (conj r (last c) (last c))))))", "problem": 32, "user": "4e821ca5535db62dc21a62c2"}, {"code": "(fn [xs] (mapcat #(list % %) xs))", "problem": 32, "user": "4e8612f8535db62dc21a62f2"}, {"code": "(partial mapcat (partial replicate 2))", "problem": 32, "user": "4e8681b7535dae1a5effa438"}, {"code": "(fn [s] (mapcat #(list % %) s))", "problem": 32, "user": "4db8ec47535d1e037afb219d"}, {"code": "(fn [y]\n  (reduce \n    (fn [val x]\n      (conj val x x))\n      []\n      y))", "problem": 32, "user": "4e80e0f2535db62dc21a62b8"}, {"code": "#(interleave % %)", "problem": 32, "user": "4db92654535d1e037afb21a0"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "4e8510e7535db62dc21a62e7"}, {"code": "#(interleave % %)", "problem": 32, "user": "4e860e85535db62dc21a62f1"}, {"code": "(fn d[s]\n  (if (= 1 (count s))\n     (list (first s) (first s))\n     (concat (list (first s) (first s)) \n          (d (rest s)))))", "problem": 32, "user": "4e842ebb535db62dc21a62df"}, {"code": "mapcat (fn [x] [x x])", "problem": 32, "user": "4dfe65a1535d04ed9115e787"}, {"code": "#(reduce concat (map (fn [x] [x x]) %))", "problem": 32, "user": "4e894068535d4ef0aa30db97"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "4e89f46c535d3e98b8023288"}, {"code": "#(loop [res '() a % b %]\n  (if (empty? a)\n    (reverse res)\n    (recur (cons (first b) (cons (first a) res)) (drop 1 a) (drop 1 b))))", "problem": 32, "user": "4e71a12c535d5021c1a8964f"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "4e897fc5535de4250bdfe493"}, {"code": "(fn [s]\n  (mapcat #(vector % %) s))", "problem": 32, "user": "4e6a4954535d8ccf87e9fec0"}, {"code": "(fn [ls] (reduce (fn [acc y] (concat acc [y y])) [] ls))", "problem": 32, "user": "4e89de60535d3e98b8023285"}, {"code": "(fn [xs] (interleave xs xs))", "problem": 32, "user": "4daf36c2edd6309eace4d175"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "4e8b57c5535d65386fec211a"}, {"code": "reduce (fn [memo, c] (concat memo (list c c))) '()", "problem": 32, "user": "4e89ddf9535d3e98b8023284"}, {"code": "(fn [coll] (reverse (reduce (fn [result item] (cons item (cons item result))) '() coll)))", "problem": 32, "user": "4e8aef69535d65386fec2114"}, {"code": "(fn dup [coll]\n  (if-let [f (first coll)]\n    (cons f (cons f (dup (rest coll))))))", "problem": 32, "user": "4e8c1d97535d65386fec2127"}, {"code": "(fn [col]\n  (reduce #(conj %1 %2 %2) [] col))", "problem": 32, "user": "4e89f9e5535d3e98b8023289"}, {"code": "(fn [coll]\n  (loop [coll coll tmp []]\n    (if (empty? coll)\n      (seq tmp)\n      (recur (rest coll) (conj tmp (first coll) (first coll))))))", "problem": 32, "user": "4e88feef535d8b9bb0147ca8"}, {"code": "#(interleave % %)", "problem": 32, "user": "4dcfbc44535d5973398f92a7"}, {"code": "(fn dup\r\n  [l]\r\n  (apply concat (map #(list % %) l)))", "problem": 32, "user": "4e8a0c82535d3e98b802328d"}, {"code": "(fn [seqn]\n  (loop [seqn seqn acc []]\n    (if-let [x (first seqn)]\n      (recur (rest seqn) (conj acc x x))\n      acc)))", "problem": 32, "user": "4e8944b6535d4ef0aa30db98"}, {"code": "(fn [coll] (reduce #(conj %1 %2 %2) [] coll))", "problem": 32, "user": "4e8dc25f535d65386fec213a"}, {"code": "#(reverse \n    (reduce \n      (fn [l i]\n        (conj l i i))\n      '() %))", "problem": 32, "user": "4e83b1af535db62dc21a62dc"}, {"code": "reduce #(into %1 [%2 %2]) []", "problem": 32, "user": "4e8a460e535d65386fec2109"}, {"code": "(fn dup [x] (interleave x x))", "problem": 32, "user": "4ded582d535d08e6dec9fe0c"}, {"code": "#(interleave % %)", "problem": 32, "user": "4e814706535db62dc21a62bb"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "4e8b557c535d65386fec2119"}, {"code": "#(mapcat (partial repeat 2) %)", "problem": 32, "user": "4e8e8c24535d65386fec2143"}, {"code": "#(interleave % %)", "problem": 32, "user": "4e6a61d8535d8ccf87e9fed8"}, {"code": "(fn dupl-seq\n    [s]\n    (reduce #(conj %1 %2 %2) [] s))", "problem": 32, "user": "4e7263a1535d5021c1a8965f"}, {"code": "(fn [xs] (apply concat (map  #(repeat 2 %) xs)))", "problem": 32, "user": "4e641bfd535d8ccf87e9fe67"}, {"code": "(fn dpl [sq]\n  (if (empty? sq)\n    nil\n    (let [f (first sq)]\n      (cons f (cons f (dpl (rest sq)))))))", "problem": 32, "user": "4e8f5eba535d65386fec214c"}, {"code": "reduce #(conj % %2 %2) []", "problem": 32, "user": "4dfd018c535d04ed9115e77f"}, {"code": "#(mapcat vector % %)", "problem": 32, "user": "4dc0ff08535d020aff1edf84"}, {"code": "#(apply concat (map (fn [x] (list x x)) %))", "problem": 32, "user": "4db016af838c48654951d9b9"}, {"code": "#( reduce (fn [acc v] (conj (conj acc v) v) ) [] %)", "problem": 32, "user": "4e6f8431535d5021c1a8961e"}, {"code": "#(interleave % %)", "problem": 32, "user": "4e8d86d5535d65386fec2136"}, {"code": "#(interleave % %)", "problem": 32, "user": "4e8df08f535d65386fec213e"}, {"code": "(fn [c] (reverse (reduce #(cons %2 (cons %2 %1)) '() c)))", "problem": 32, "user": "4e84a7dd535db62dc21a62e2"}, {"code": "#(interleave (seq %) (seq %))", "problem": 32, "user": "4e8dbab3535d65386fec2139"}, {"code": "#(interleave % %)", "problem": 32, "user": "4db13ff51254ad5b4805fa68"}, {"code": "#(mapcat (fn [x] [x x]) %)", "problem": 32, "user": "4e8f4f64535d65386fec2149"}, {"code": "(fn [coll] (reduce concat (map #(list % %) coll)))", "problem": 32, "user": "4e7d2448535db169f9c796c8"}, {"code": "(fn duplicate [x] \n  (if (seq x) \n  (into \n    (duplicate (rest x)) \n    (conj (conj '() (first x)) (first x)))\n  () )\n)", "problem": 32, "user": "4e8d5edd535d65386fec2134"}, {"code": "(fn [lst]\n  (loop [ovec lst nvec '() counter 0]\n    (if (= counter (count ovec))\n       nvec\n       (recur ovec (concat (concat nvec (list (ovec counter))) (list (ovec counter))) (inc counter))\n     )\n  )\n)", "problem": 32, "user": "4e8b73e4535d65386fec2120"}, {"code": "(fn dup\n  ([x] (dup x '()))\n  ([x sofar]\n    (if (empty? x)\n      sofar\n      (dup (drop-last x) (cons (last x) (cons (last x) sofar))))))", "problem": 32, "user": "4e84f77c535db62dc21a62e5"}, {"code": "#(interleave % %)", "problem": 32, "user": "4e7e0bdc535db169f9c796ff"}, {"code": "(let [dup #(repeat 2 %)]\n(fn [x] (reverse (reduce into () (map dup x)))))", "problem": 32, "user": "4e697e41535d8ccf87e9fe9c"}, {"code": "(fn [x] \n  (loop [l x nl '()]\n    (cond\n      (empty? l) nl\n      :else (recur (rest l) (concat nl [(first l)] [(first l)])))))", "problem": 32, "user": "4e920f44535dbda64a6f6afd"}, {"code": "mapcat #(repeat 2 %)", "problem": 32, "user": "4e9361c9535dbda64a6f6b0f"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "4e8b6f4d535d65386fec211e"}, {"code": "#(interleave % %)", "problem": 32, "user": "4e72ac47535d5021c1a89666"}, {"code": "#(interleave % %)", "problem": 32, "user": "4dcc024e535d5973398f928f"}, {"code": "#(apply concat (map (partial repeat 2) %))", "problem": 32, "user": "4e951ce5535dbda64a6f6b2e"}, {"code": "#(interleave % %)", "problem": 32, "user": "4e721857535d5021c1a8965a"}, {"code": "(fn duplicate[s]\r\n  (reverse (\r\n    (fn [s c]\r\n    (if (empty? s)\r\n\t\tc\r\n\t\t(recur \r\n      (drop-last s) \r\n      (conj (conj c (last s)) (last s)))\r\n      )\r\n    ) (reverse s) ()\r\n  ))\r\n)", "problem": 32, "user": "4e7650c5535d324fb2983d68"}, {"code": "#(mapcat (fn [x] [x x]) %)", "problem": 32, "user": "4db85bdd535d1e037afb218d"}, {"code": "(fn [x]\n  (loop [i 0 out []]\n    (if (== i (count x))\n      out\n      (recur (inc i) (conj out (nth x i) (nth x i))))))", "problem": 32, "user": "4e955b95535dbda64a6f6b33"}, {"code": "(partial mapcat (partial repeat 2))", "problem": 32, "user": "4e9660ec535dbda64a6f6b44"}, {"code": "mapcat (partial repeat 2)", "problem": 32, "user": "4e96557d535dbda64a6f6b43"}, {"code": "(fn [sq]\n  (reduce \n    (fn [acc vl]\n      (conj acc vl vl)) '() (reverse sq)))", "problem": 32, "user": "4e9528ef535dbda64a6f6b32"}, {"code": "reduce #(conj % %2 %2) []", "problem": 32, "user": "4e94a8b5535dbda64a6f6b16"}, {"code": "(fn [coll] (mapcat #(repeat 2 %) coll))", "problem": 32, "user": "4e976f79535dbda64a6f6b55"}, {"code": "#(for [x % y [x x]] y)", "problem": 32, "user": "4e8f1ac6535d65386fec2146"}, {"code": "(fn [c] (mapcat #(vector % %) c))", "problem": 32, "user": "4e8a0d5d535d3e98b802328e"}, {"code": "(fn [c] (mapcat #(list % %) c))", "problem": 32, "user": "4e9609ad535dbda64a6f6b3e"}, {"code": "#(interleave % %)", "problem": 32, "user": "4dbd2aa3535d020aff1edf40"}, {"code": "reduce #(conj % %2 %2) []", "problem": 32, "user": "4e9b230c535dbda64a6f6b75"}, {"code": "(fn [x] (reduce concat (map #(list % % ) x)))", "problem": 32, "user": "4e8da0bf535d65386fec2138"}, {"code": "#(interleave % %)", "problem": 32, "user": "4e98a6d0535dbda64a6f6b5e"}, {"code": "(fn [xs] (mapcat #(seq [%1 %1]) xs))", "problem": 32, "user": "4e9c66e2535dbda64a6f6b7f"}, {"code": "(fn [x] (reverse (reduce #(conj %1 %2 %2) () x)))", "problem": 32, "user": "4e975bce535dbda64a6f6b53"}, {"code": "(fn [x] (mapcat #(repeat 2 %) x))", "problem": 32, "user": "4e951f44535dbda64a6f6b30"}, {"code": "reduce #(into %1 [%2 %2]) []", "problem": 32, "user": "4e9b22e2535dbda64a6f6b74"}, {"code": "(fn [s] (interleave s s))", "problem": 32, "user": "4e967c4a535dbda64a6f6b47"}, {"code": "(fn [s]\n  (loop [ms s mx '()]\n    (if (= ms '()) \n        (reverse mx)\n        (recur (rest ms) (conj (conj mx (first ms)) (first ms))))))", "problem": 32, "user": "4e9629c2535dbda64a6f6b3f"}, {"code": "mapcat #(repeat 2 %)", "problem": 32, "user": "4e8d5911535d65386fec2133"}, {"code": "#(mapcat (fn [n] (repeat 2 n)) %)", "problem": 32, "user": "4e99819a535dbda64a6f6b66"}, {"code": "#(mapcat (partial repeat 2) %)", "problem": 32, "user": "4e9e0640535dbda64a6f6b91"}, {"code": "#(mapcat (partial repeat 2) %)", "problem": 32, "user": "4e81e29b535db62dc21a62bd"}, {"code": "#(interleave % %)", "problem": 32, "user": "4e9dafe1535dbda64a6f6b89"}, {"code": "(fn dodup [st] \n     (reverse (reduce #(conj (conj %1 %2) %2)  \n           '() \n         st)))", "problem": 32, "user": "4e9de526535dbda64a6f6b8e"}, {"code": "(fn duplicate [l]\n  (if (empty? l)\n    '()\n    (concat (list (first l) (first l)) (duplicate (rest l)))))", "problem": 32, "user": "4e9e12b2535dbda64a6f6b92"}, {"code": "#(loop [f (first %)\n        r (rest %)\n        l %]\n      (if (not (= f nil))\n        (do (recur (first r) (rest r) (conj l f)))\n        (sort l)))", "problem": 32, "user": "4e9e7ce3535dbda64a6f6b98"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "4e9e6bd6535dbda64a6f6b96"}, {"code": "(fn [s] (mapcat #(list % %) s))", "problem": 32, "user": "4dd0e8f7535da60f04a96e57"}, {"code": "#(interleave % %)", "problem": 32, "user": "4e9ff8d0535d7eef3080729c"}, {"code": "(fn dupl [col]\n  (if (empty? col)\n    '()\n    (let [current (first col)]\n      (conj (conj (dupl (rest col)) current) current))))", "problem": 32, "user": "4ea01955535d7eef3080729f"}, {"code": "(fn [xs]\n    (loop [[x & xs] xs acc []]\n      (if (empty? xs)\n        (conj acc x x)\n        (recur xs (conj acc x x)))))", "problem": 32, "user": "4e9fd521535d7eef3080729a"}, {"code": "#(interleave % %)", "problem": 32, "user": "4e8516d0535db62dc21a62e8"}, {"code": "(fn [s] (reduce (fn [acc x] (concat acc [x x])) [] s))", "problem": 32, "user": "4ea092f4535d7eef308072a6"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "4e9a8c0e535dbda64a6f6b72"}, {"code": "(fn [c] (mapcat vector c c))", "problem": 32, "user": "4ea09fa4535d7eef308072aa"}, {"code": "#(interleave % %)", "problem": 32, "user": "4daee8e9edd6309eace4d166"}, {"code": "(fn [seq]\n  (loop [s seq r []]\n    (if (empty? s) r\n        (recur (rest s) (conj r (first s) (first s))))))", "problem": 32, "user": "4ea1bc93535d7eef308072b9"}, {"code": "mapcat #(identity [% %])", "problem": 32, "user": "4ea1b9e4535d7eef308072b8"}, {"code": "(fn [s]\n  (mapcat (fn [x] [x x]) s))", "problem": 32, "user": "4e59b02c535d8a8b8723a2a2"}, {"code": "(fn dup [l]\n  (if (empty? l)\n  '()\n  (conj (dup (rest l)) (first l) (first l))))", "problem": 32, "user": "4e9c81e8535dbda64a6f6b80"}, {"code": "(fn [s]\n  (mapcat (fn [x] [x x]) s))", "problem": 32, "user": "4ea348ad535d7eef308072c4"}, {"code": "(fn [x]\r\n(loop [[y & more] x\r\n        z []]\r\n(if (nil? y) z\r\n (recur more (concat z [y y]))\r\n )))", "problem": 32, "user": "4ea09441535d7eef308072a7"}, {"code": "(fn [x]\n  (mapcat (fn [x] [x x]) x))", "problem": 32, "user": "4e9e4515535dbda64a6f6b95"}, {"code": "#(mapcat list % %)", "problem": 32, "user": "4ea0cfb0535d7eef308072ae"}, {"code": "reduce #(concat % [%2 %2]) []", "problem": 32, "user": "4ea2ddf1535d7eef308072bf"}, {"code": "(fn [x] (reduce (fn [acc x] (cons x (cons x acc))) '() (reverse x)))", "problem": 32, "user": "4e9d6a65535dbda64a6f6b87"}, {"code": "(fn [s]\n  (loop [items s acc []]\n    (if (empty? items)\n      acc\n      (let [[hd & tl] items]\n        (recur tl (conj (conj acc hd) hd))))))", "problem": 32, "user": "4ea4fe1f535d7eef308072cf"}, {"code": "(fn [xs]  (reduce (fn [x1 x2] (cons x2 (cons x2 x1))) '() (reverse xs)))", "problem": 32, "user": "4e86d3cf535dceadca46984c"}, {"code": "(fn [x] (mapcat #(vec [%1 %1]) x))", "problem": 32, "user": "4ea41fc2535d7eef308072cb"}, {"code": "(fn [s]\n  (reduce\n    #(apply conj %1 %2)\n    (map (fn [i] [i i]) s)))", "problem": 32, "user": "4ea67906535d7eef308072e4"}, {"code": "(fn dup-seq [lat]\r\n  (reduce concat (map #(take 2 (repeat %)) lat)))", "problem": 32, "user": "4e8ddf32535d65386fec213c"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "4ea5e794535d7eef308072df"}, {"code": "#(apply concat (for [x %] [x x]))", "problem": 32, "user": "4ea57300535d7eef308072d5"}, {"code": "#(mapcat (fn [a] (list a a)) %)", "problem": 32, "user": "4dad76588e77d6ed63f12a44"}, {"code": "(fn duplicate[c]\r\n  (mapcat (fn[x] [x x] )c)\r\n  )", "problem": 32, "user": "4e9def6b535dbda64a6f6b8f"}, {"code": "#(loop [input % result ()]\n    (if (empty? input)\n      (reverse result)\n      (recur (rest input) (cons (first input) (cons (first input) result)))))", "problem": 32, "user": "4e6a368e535d8ccf87e9feae"}, {"code": "(fn [coll]\r\n  (mapcat #(repeat 2 %) coll))", "problem": 32, "user": "4e944706535dbda64a6f6b11"}, {"code": "#(interleave % %)", "problem": 32, "user": "4e58c019535d8a8b8723a297"}, {"code": "mapcat #( list % %)", "problem": 32, "user": "4e9fde3c535d7eef3080729b"}, {"code": "#(loop [i (reverse %) result '()]\n      (if(empty? i)\n        result\n        (recur (rest i) (concat (repeat 2 (first i)) result)))\n    )", "problem": 32, "user": "4ea85846535d7eef308072f9"}, {"code": "#(mapcat (fn [x] [x x]) %)", "problem": 32, "user": "4dbb0f2d535d1e037afb21b1"}, {"code": "#(interleave % %)", "problem": 32, "user": "4eaa96e1535d7eef3080730d"}, {"code": "#(interleave % %)", "problem": 32, "user": "4e8a0741535d3e98b802328b"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "4eab612d535d7eef30807316"}, {"code": "#(interleave % %)", "problem": 32, "user": "4ea1ecfa535d7eef308072bb"}, {"code": "#(interleave % %)", "problem": 32, "user": "4e243bcb535d04ed9115e825"}, {"code": "#(apply concat (map (fn [x] [x x]) %))", "problem": 32, "user": "4ead6418535d7eef3080731f"}, {"code": "(fn dup[x]\n  (if (= (count x) 1) (conj x (first x))\n  (conj (dup (rest x)) (first x) (first x)))\n)", "problem": 32, "user": "4ea365e2535d7eef308072c5"}, {"code": "(partial mapcat #(list % %))", "problem": 32, "user": "4eae5fe4535d7eef30807325"}, {"code": "reduce #(into % [%2 %2]) []", "problem": 32, "user": "4e994541535dbda64a6f6b64"}, {"code": "#(mapcat list % %)", "problem": 32, "user": "4eaec592535d7eef30807327"}, {"code": "(fn [c]\n  (reduce #(concat % (list %2 %2)) '() c))", "problem": 32, "user": "4eac5bc1535d7eef3080731b"}, {"code": "#(let [f (fn [xs self]\n  (if(empty? xs) '()\n    (conj (self(rest xs)self) (first xs) (first xs))))]\n  (f % f))", "problem": 32, "user": "4eaf08ce535d7eef3080732d"}, {"code": "(fn [lst]\n          (loop [l lst\n                 acc '()]\n            (if (empty? l) (reverse acc)\n                (recur (rest l) (conj acc (first l) (first l))))))", "problem": 32, "user": "4eaa47bc535d7eef30807309"}, {"code": "(fn [x] (reverse (reduce #(cons %2 (cons %2 %1)) '() x)))", "problem": 32, "user": "4ea9b80c535d7eef30807306"}, {"code": "#(interleave % %)", "problem": 32, "user": "4e949d18535dbda64a6f6b15"}, {"code": "#(reduce (fn [a b] (concat a [b b])) '() %)", "problem": 32, "user": "4ea7999e535d7eef308072ee"}, {"code": "mapcat #(repeat 2%)", "problem": 32, "user": "4eb07be3535d7eef3080733b"}, {"code": "(fn [lat]\n  (reduce concat (map #(take 2 (repeat %)) lat)))", "problem": 32, "user": "4ea68edb535d7eef308072e6"}, {"code": "(fn f [x]\r\n  (mapcat #(list % %) x))", "problem": 32, "user": "4eaed3a7535d7eef30807328"}, {"code": "reduce #(conj (conj %1 %2) %2) []", "problem": 32, "user": "4eb0a757535d7eef3080733d"}, {"code": "#(interleave % %)", "problem": 32, "user": "4eaede1f535d7eef30807329"}, {"code": "(fn dup-coll [xs]\r\n  (mapcat (fn [x] (seq (list x x)))\r\n          xs))", "problem": 32, "user": "4e7dfd48535db169f9c796fa"}, {"code": "(fn pn [x]\n  (if (first x)\n  (cons (first x) (cons (first x) (pn (rest x))))\n  '()))", "problem": 32, "user": "4eb0afed535d7eef3080733e"}, {"code": "(fn [x] \n  (loop [s x ret '()]\n(if (next s)\n(recur (next s) (conj ret (first s) (first s)))\n(reverse(conj ret (first s) (first s))))))", "problem": 32, "user": "4eb27fad535d7eef3080734a"}, {"code": "(fn [data]\n  (mapcat #(list % %) data))", "problem": 32, "user": "4eb1dd39535d7eef30807345"}, {"code": ";(fn [s] (reduce #(conj %1 %2 %2) [] s))\n#(interleave % %)", "problem": 32, "user": "4eb2e6ca535d7eef3080734f"}, {"code": "(fn dbl [r s] \n  (if (> (.size s) 1)\n    (cons (first s) (cons (first s) (dbl r (rest s))))\n    (cons (first s) (cons (first s) r))))\n'()", "problem": 32, "user": "4e8b98fc535d65386fec2124"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "4eb2eae5535d7eef30807351"}, {"code": "#(sort (into % %))", "problem": 32, "user": "4eb3fcba535d7eef30807359"}, {"code": "(fn [xs]\r\n  (reverse (reduce #(cons %2 (cons %2 %1)) '() xs)))", "problem": 32, "user": "4e8b73f1535d65386fec2121"}, {"code": "(fn x [coll]  \n  (interleave coll coll))", "problem": 32, "user": "4e80d1c8535db62dc21a62b6"}, {"code": "(fn [coll]\n    (mapcat #(list % %) coll))", "problem": 32, "user": "4e89e939535d3e98b8023287"}, {"code": "#(loop [[h & t] %, res '()]\n  (if h \n(recur t (conj res h h)) (reverse res)))", "problem": 32, "user": "4eabb245535d7eef30807319"}, {"code": "(fn \n  [x]\n  (interleave x x))", "problem": 32, "user": "4ea95e56535d7eef30807302"}, {"code": "(fn [l] (sort (concat l l)))", "problem": 32, "user": "4eb59464535d7eef30807369"}, {"code": "(fn foo [x]\n  (if (empty? x)\n    '()\n    (conj (foo (rest x)) (first x) (first x))))", "problem": 32, "user": "4eb66737535d7eef3080736b"}, {"code": "#(interleave % %)", "problem": 32, "user": "4e8dd6cb535d65386fec213b"}, {"code": "reduce #(-> % (conj %2) (conj %2)) []", "problem": 32, "user": "4eb5750a535d7eef30807366"}, {"code": "(fn [x] \n  (loop [s x, r []]\n    (if (= s [])\n      r\n      (recur (rest s) (into r (repeat 2 (first s)))))))", "problem": 32, "user": "4eb6d3ab535d7eef30807370"}, {"code": "(fn cpy [x]\r\n  (loop [falta x sol []]\r\n    (if-not (empty? falta)\r\n      (recur (rest falta) (conj sol (first falta) (first falta)))\r\n      (seq sol)\r\n    )\r\n  )\r\n)", "problem": 32, "user": "4e94a900535dbda64a6f6b18"}, {"code": "(fn [seq]\n  (letfn [(inter [seq acc]\n            (if (= seq '()) (reverse acc) (inter (rest seq) (conj acc (first seq) (first seq)))))]\n    (inter seq '())))", "problem": 32, "user": "4eb404ba535d7eef3080735a"}, {"code": "(fn dup [s] (sort (concat s s)))", "problem": 32, "user": "4eb80264535d7eef3080737a"}, {"code": "#(interleave % %)", "problem": 32, "user": "4eb01df4535d7eef30807337"}, {"code": "(fn [f] (#(interleave f f)))", "problem": 32, "user": "4eb80ce6535d7eef3080737d"}, {"code": "#(interleave % %)", "problem": 32, "user": "4ea76541535d7eef308072eb"}, {"code": "(fn [x]\n  (reduce into\n    (map #(vector % %) x)))", "problem": 32, "user": "4e9be708535dbda64a6f6b79"}, {"code": "(fn [x] (mapcat #(list % %) x))", "problem": 32, "user": "4df7278a535d04ed9115e774"}, {"code": "(fn [x] (sort (apply conj x  x)))", "problem": 32, "user": "4eb8979b535dfed6da9c6d4a"}, {"code": "#(interleave % %)", "problem": 32, "user": "4ea55757535d7eef308072d3"}, {"code": "(partial mapcat #(list % %))", "problem": 32, "user": "4eb97b2e535dfed6da9c6d54"}, {"code": "(fn [x]\n  (loop [nova [] ant x]\n    (if(empty? ant)\n    nova\n    (recur (conj nova (first ant) (first ant)) (rest ant))\n    )\n  )\n)", "problem": 32, "user": "4e94a9e7535dbda64a6f6b1d"}, {"code": "(fn [seq] (mapcat #(vec [% %]) seq))", "problem": 32, "user": "4eb97234535dfed6da9c6d53"}, {"code": "(fn [v] (interleave v v))", "problem": 32, "user": "4e9519b4535dbda64a6f6b2d"}, {"code": "(fn dup [x]\n  (loop [aux x lista []]\n     (if(empty? aux)\n        lista\n        (recur (rest aux) (conj lista (first aux) (first aux) ))\n     )\n  )\n)", "problem": 32, "user": "4e94aab8535dbda64a6f6b1f"}, {"code": "(fn duplica[x]\r\n  (reduce concat\r\n    (map \r\n      #(take 2 (repeat %)\r\n    ) x)\r\n  )\r\n)", "problem": 32, "user": "4eb7ff08535d7eef30807379"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "4eb9c82d535dfed6da9c6d5c"}, {"code": "(fn [x] (interleave x x))", "problem": 32, "user": "4e570b60535d8a8b8723a286"}, {"code": "#(interleave % %)", "problem": 32, "user": "4ebc08a8535dfed6da9c6d7c"}, {"code": "(fn [s]\n  (loop [s s r []]\n    (if (not (seq s))\n      r\n      (recur (rest s) (conj r (first s) (first s))))))", "problem": 32, "user": "4dbdc9da535d020aff1edf4c"}, {"code": "mapcat (juxt identity identity)", "problem": 32, "user": "4e82f85d535db62dc21a62ce"}, {"code": "#(interleave % %)", "problem": 32, "user": "4e6e2ac4535d5021c1a895ff"}, {"code": "(fn [elements]\n  (mapcat #(repeat 2 %) elements)\n)", "problem": 32, "user": "4e8e5cc8535d65386fec2142"}, {"code": "#(interleave %1 %1)", "problem": 32, "user": "4ebb20c0535dfed6da9c6d6f"}, {"code": "#(interleave % %)", "problem": 32, "user": "4e1350af535d04ed9115e7d8"}, {"code": "(fn [seq]\n    (reduce concat\n            (map (fn [x]\n                   (list x x))\n                 seq)))", "problem": 32, "user": "4ea3c875535d7eef308072c9"}, {"code": "(fn [coll]\n  (mapcat #(list % %) coll))", "problem": 32, "user": "4eb25069535d7eef30807348"}, {"code": "(fn [coll] (mapcat #(vector %1 %2) coll coll))", "problem": 32, "user": "4eb955da535dfed6da9c6d50"}, {"code": "(fn [x]\n  (interleave x x))", "problem": 32, "user": "4dadb891c9a9d6ed3699dc57"}, {"code": "mapcat #(vector % %)", "problem": 32, "user": "4ebf45c3535dfed6da9c6d9d"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "4ea0c284535d7eef308072ad"}, {"code": "(fn [x] (interleave x x))", "problem": 32, "user": "4ebc0717535dfed6da9c6d7b"}, {"code": "#(interleave % %)", "problem": 32, "user": "4eb2d0ae535d7eef3080734e"}, {"code": "#(interleave % %)", "problem": 32, "user": "4eb44d78535d7eef30807360"}, {"code": "#(interleave % %)", "problem": 32, "user": "4ebe766d535dfed6da9c6d94"}, {"code": "#(interleave % %)", "problem": 32, "user": "4ec132a0535dfed6da9c6da9"}, {"code": "mapcat #(repeat 2 %)", "problem": 32, "user": "4ec0c7ba535dfed6da9c6da4"}, {"code": "#(interleave % %)", "problem": 32, "user": "4ebd4448535dfed6da9c6d8f"}, {"code": "(fn [col] (apply concat (map #(list % %) col)))", "problem": 32, "user": "4ec16c21535dfed6da9c6dac"}, {"code": "(fn duplicate [x] (reduce (fn [b c] (concat b c)) '() (map (fn [a] (list a a)) x)))", "problem": 32, "user": "4ec12516535dfed6da9c6da7"}, {"code": "(fn [c] (mapcat #(list % %) c))", "problem": 32, "user": "4ec12577535dfed6da9c6da8"}, {"code": "(fn [s]\n  (mapcat (fn [x] [x x]) s))", "problem": 32, "user": "4ec2fe3f535dcc7ae8597d4f"}, {"code": "#(interleave % %)", "problem": 32, "user": "4ec21058535dfed6da9c6dba"}, {"code": "(fn dupes [s]\n  (interleave s s))", "problem": 32, "user": "4ec34578535dcc7ae8597d51"}, {"code": "(fn dupem [s] (reverse (\n      (fn dupem2 [i o] \n         (if (= (first i) nil)\n             o\n             (let [\n                    fi (first i)\n                  ]\n                  (dupem2 (rest i) (cons fi (cons fi o)))\n             )\n         )\n      )\n      s []\n   ))\n)", "problem": 32, "user": "4ec17677535dfed6da9c6dad"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "4dbf7a31535d020aff1edf75"}, {"code": "#(apply concat (map (fn [b] (list b b)) %))", "problem": 32, "user": "4ec42c11535dcc7ae8597d5f"}, {"code": "(fn [v] (reduce (fn [acc x] (conj (conj acc x) x)) [] v))", "problem": 32, "user": "4e951f2c535dbda64a6f6b2f"}, {"code": "#(loop [head (first %), tail (rest %), out []]\n    (if (empty? tail)\n      (conj out head head)\n      (recur (first tail) (rest tail) (conj out head head)) ))", "problem": 32, "user": "4ec5c81f535d6d7199dd36b6"}, {"code": "mapcat #(repeat 2 %)", "problem": 32, "user": "4ebb78a2535dfed6da9c6d70"}, {"code": "#(mapcat (partial repeat 2) %)", "problem": 32, "user": "4ec5d40d535d6d7199dd36b9"}, {"code": "(fn [lst] (interleave lst lst))", "problem": 32, "user": "4ec6559a535d6d7199dd36c9"}, {"code": "(partial reduce #(conj %1 %2 %2) [])", "problem": 32, "user": "4ec4ac86535dcc7ae8597d64"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "4ec65213535d6d7199dd36c8"}, {"code": "#(reverse (reduce (fn [r i] (cons i (cons i r))) [] %))", "problem": 32, "user": "4dbecb06535d020aff1edf6a"}, {"code": "#(interleave % %)", "problem": 32, "user": "4ec6157b535d6d7199dd36c2"}, {"code": "(fn [x]\n        ((fn [x y]\n           (if (empty? x)\n             y\n             (recur (next x) (concat y (list (first x)) (list (first x)))))) x '()))", "problem": 32, "user": "4ec6688d535d6d7199dd36cc"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "4eb51942535d7eef30807365"}, {"code": "(fn [a-list]\n       (sort (concat a-list a-list)))", "problem": 32, "user": "4eae2f9e535d7eef30807324"}, {"code": "#(interleave %1 %1)", "problem": 32, "user": "4ebede00535dfed6da9c6d9a"}, {"code": "(fn [s]\n  (loop [ls s result []]\n    (let [element (first ls)]\n      (if (= [] ls)\n        result\n        (recur (rest ls) (conj (conj result element) element))))))", "problem": 32, "user": "4e117dea535d04ed9115e7c9"}, {"code": "(fn [lst]\n  (loop [lst lst acc []]\n    (if (empty? lst)\n      acc\n      (recur (rest lst) (apply conj acc (repeat 2 (first lst))))\n      )\n    )\n  )", "problem": 32, "user": "4ec6c878535d6d7199dd36d5"}, {"code": "mapcat #(vec [% %])", "problem": 32, "user": "4ec812d9535d6d7199dd36f0"}, {"code": "(fn thing [xs]\n  (if (empty? xs) '() (cons (first xs) (cons (first xs) (thing (rest xs))))))", "problem": 32, "user": "4ec07699535dfed6da9c6da2"}, {"code": "(fn d [l]\n  (if (empty? l) \n    []\n    (cons (first l) (cons (first l) (d (rest l))))\n  )\n)", "problem": 32, "user": "4ebbffbd535dfed6da9c6d79"}, {"code": "(fn [coll] (mapcat #(repeat 2 %1) coll))", "problem": 32, "user": "4e0d5a5a535d04ed9115e7b5"}, {"code": "(fn [col]\n  (loop [col1 col fcol []]\n    (if (empty? col1)\n        fcol\n        (recur (rest col1) (conj fcol (first col1) (first col1))\n  ))))", "problem": 32, "user": "4ec5bec6535d6d7199dd36b3"}, {"code": "(fn [x] (mapcat #(list %1 %2) x x))", "problem": 32, "user": "4ec2f1d9535dcc7ae8597d4d"}, {"code": "#(interleave % %)", "problem": 32, "user": "4ec28d86535dfed6da9c6dbc"}, {"code": "#(interleave % %)", "problem": 32, "user": "4ec70f26535d6d7199dd36dd"}, {"code": "(fn [s]\n  (loop\n    [result '()\n     [h & rest :as remaining] s]\n    (if (empty? remaining)\n      result\n      (recur (concat result [h h]) rest))))", "problem": 32, "user": "4e6f578c535d5021c1a8961b"}, {"code": "#(mapcat list % %)", "problem": 32, "user": "4ec74de3535d6d7199dd36df"}, {"code": "(fn mydup [s] \n  (if (empty? s)\n    '()\n    (cons (first s) (cons (first s) (mydup (rest s))))))", "problem": 32, "user": "4ecaf637535d6d7199dd370c"}, {"code": "(fn [s]\n (loop [l s a '()]\n  (if (empty? l)\n       a\n       (recur (butlast l) (conj a (last l) (last l) )))))", "problem": 32, "user": "4ec92a04535d6d7199dd36fa"}, {"code": "mapcat (fn [x] [x x])", "problem": 32, "user": "4ecab3b7535d6d7199dd3709"}, {"code": "reduce (fn[acc,e](conj acc e e)) []", "problem": 32, "user": "4ec75829535d6d7199dd36e1"}, {"code": "#(reduce (partial apply conj) (for [x %] [x x]))", "problem": 32, "user": "4e25176e535d04ed9115e829"}, {"code": "(fn[x] (sort (concat x x)))", "problem": 32, "user": "4e3ae7cd535deb9a81d77f4e"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "4ec51590535d6d7199dd3683"}, {"code": "mapcat #(list %1 %1)", "problem": 32, "user": "4eb9ce75535dfed6da9c6d5e"}, {"code": "(fn dup [coll]\n  (loop [res '(), curr coll]\n    (if (empty? curr)\n      res\n      (recur (concat res [(first curr) (first curr)]), (rest curr)))))", "problem": 32, "user": "4ecbff2f535df97575fdabe4"}, {"code": "(fn [col]\n  (reduce\n\t (fn [cur val]\n\t     (conj cur val val))\n\t ()\n\t (reverse col)))", "problem": 32, "user": "4ecb1641535d6d7199dd370e"}, {"code": "(fn dup-coll [coll]\n  (loop [single coll double '()]\n    (if (empty? single)\n      (reverse double)\n      (recur (rest single)\n             (cons\n              (first single)\n              (cons (first single) double)))\n      )\n    )\n  )", "problem": 32, "user": "4ebc64db535dfed6da9c6d82"}, {"code": "#(reduce (fn [x y] (into x [y y])) [] %)", "problem": 32, "user": "4ec6297b535d6d7199dd36c4"}, {"code": "(fn [x] (loop [s (map #(repeat 2 %) x) r '()]\n             (if (empty? s)\n               r\n               (recur (rest s) (concat r (first s))))))", "problem": 32, "user": "4ebef65e535dfed6da9c6d9b"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "4ecaaa25535d6d7199dd3708"}, {"code": "(fn [arg]\r\n    (loop [res [] coll arg]\r\n        (if (not (empty? coll))\r\n            (recur\r\n                (conj (conj res (first coll)) (first coll))\r\n                (next coll))\r\n            res)))", "problem": 32, "user": "4eccb190535d23f0362276fe"}, {"code": "reduce (fn [res x] (conj res x x)) []", "problem": 32, "user": "4ecf42b4535d1f5ad70dba3c"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "4eb13d60535d7eef3080733f"}, {"code": "mapcat #(conj [] % %)", "problem": 32, "user": "4ecbb249535df97575fdabdf"}, {"code": "#(interleave % %)", "problem": 32, "user": "4ece9ca9535d23f03622770f"}, {"code": "#(interleave % %)", "problem": 32, "user": "4ecfb458535d44c135fd68bb"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "4ed06ea6535d44c135fd68c4"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "4ed00953535d44c135fd68c2"}, {"code": "(fn dupl [s]\n    (mapcat #(vector % %) s))", "problem": 32, "user": "4ed15f60535d44c135fd68cd"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "4ecc147b535d23f0362276f7"}, {"code": "(fn [s] (mapcat (fn [x] [x x]) s))", "problem": 32, "user": "4ed188c8535d44c135fd68cf"}, {"code": "#(interleave % %)", "problem": 32, "user": "4ecf1f51535d1f5ad70dba3a"}, {"code": "mapcat #(repeat 2 %)", "problem": 32, "user": "4ebc829e535dfed6da9c6d86"}, {"code": "(fn [col] (mapcat #(list % %) col))", "problem": 32, "user": "4ec79f99535d6d7199dd36e4"}, {"code": "(fn [coll] (reduce concat (map list coll coll)))", "problem": 32, "user": "4ec60dc4535d6d7199dd36c0"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "4ea322fe535d7eef308072c2"}, {"code": "(fn dup [lst] \r\n  (let [a (first lst)] \r\n    (when a (cons a (cons a (dup (rest lst)))))))", "problem": 32, "user": "4ec18451535dfed6da9c6db0"}, {"code": "(fn [l] (interleave l l))", "problem": 32, "user": "4ed292ac535d44c135fd68d9"}, {"code": "(fn [in-coll]                                                                                                                                                \n  ((fn d [coll s]                                                                                                                                                      \n     (if (seq coll)                                                                                                                                                    \n       (lazy-seq                                                                                                                                                       \n         (if s                                                                                                                                                         \n           (cons (first coll) (d coll false))                                                                                                                          \n           (cons (first coll) (d (rest coll) true))))))                                                                                                                \n     in-coll true))", "problem": 32, "user": "4ec75077535d6d7199dd36e0"}, {"code": "reduce (fn [a e] (conj a e e)) []", "problem": 32, "user": "4ed2b168535d44c135fd68dd"}, {"code": "#(interleave % %)", "problem": 32, "user": "4e5af45e535d8a8b8723a2b1"}, {"code": "(fn [x] (loop [m x  r []] \n  \t\t       (if (empty? m) r\n\t\t\t\t   (recur (rest m) (conj r (first m) (first m))))))", "problem": 32, "user": "4ea4e98a535d7eef308072ce"}, {"code": "#(interleave % %)", "problem": 32, "user": "4ebbf772535dfed6da9c6d76"}, {"code": "#(sort (concat % %))", "problem": 32, "user": "4e75500f535d7a570dd295c1"}, {"code": "(fn [x]\n  (loop [curr_x x, result []]\n    (if (empty? curr_x)\n      result\n      (let [fc (first curr_x)]\n        (recur (next curr_x) (conj result fc fc))))))", "problem": 32, "user": "4ec5cdb0535d6d7199dd36b8"}, {"code": "#(interleave % %)", "problem": 32, "user": "4ecc8dea535d23f0362276fd"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "4ec49231535dcc7ae8597d63"}, {"code": "#(loop [newlist '(), oldlist %1]\n    (if (= (count oldlist) 0)\n      (vec newlist)\n      (recur (concat newlist (take 1 oldlist) (take 1 oldlist)) (rest oldlist))))", "problem": 32, "user": "4ec5b713535d6d7199dd36b2"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "4e65027c535d8ccf87e9fe6e"}, {"code": "(fn [xs]\n  (reverse \n  (reduce #(cons %2 (cons %2 %1))\n          '()\n          xs\n)))", "problem": 32, "user": "4ed500bb535d10e5ff6f52d3"}, {"code": "#(interleave % %)", "problem": 32, "user": "4ed0e139535d44c135fd68c7"}, {"code": "(fn [seq]\n(loop [s seq\n       result []]\n       (if (empty? s)\n         result\n        (recur (rest s) (conj result (first s) (first s))))))", "problem": 32, "user": "4ed0d65f535d44c135fd68c6"}, {"code": "mapcat #(list (identity %) (identity %))", "problem": 32, "user": "4ec7def0535d6d7199dd36e9"}, {"code": "#(reduce concat (for [x %] [x x]))", "problem": 32, "user": "4e6b04ae535d8ccf87e9ff09"}, {"code": "(fn dupvals [x]\n  (if (= 1 (count x)) (cons (first x) x)\n  (conj (dupvals (rest x)) (first x) (first x))))", "problem": 32, "user": "4ed4798f535d10e5ff6f52cc"}, {"code": "(fn [s]\n    (loop [duplicated '() l s]\n      (if (empty? l)\n        (reverse duplicated)\n        (recur (conj duplicated (first l) (first l)) (rest l))\n          )))", "problem": 32, "user": "4e7e8684535db169f9c79717"}, {"code": "(fn [x] (interleave x x))", "problem": 32, "user": "4ed55b5d535d10e5ff6f52d8"}, {"code": "#(interleave % %)", "problem": 32, "user": "4ec601ff535d6d7199dd36be"}, {"code": "reduce #(conj % %2 %2) []", "problem": 32, "user": "4eca40cd535d6d7199dd3703"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "4e89ff3d535d3e98b802328a"}, {"code": "#(interleave % %)", "problem": 32, "user": "4ec5aa1f535d6d7199dd36b0"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "4eca5391535d6d7199dd3704"}, {"code": "#(mapcat vector % %)", "problem": 32, "user": "4ed69ea4535d10e5ff6f52e3"}, {"code": "mapcat #(identity [% %])", "problem": 32, "user": "4ec5c948535d6d7199dd36b7"}, {"code": "(fn [coll] (reverse (reduce #(conj %1 %2 %2) '() coll)))", "problem": 32, "user": "4ea11921535d7eef308072af"}, {"code": "#(interleave % %)", "problem": 32, "user": "4db85c8e535d1e037afb218f"}, {"code": "(fn dup [xs]\n  (let [my-dup \n         (fn adup [xs acc]\n           (cond (= xs []) acc\n                 :else (adup (rest xs) \n                             (cons (first xs)\n                                   (cons (first xs) acc))))\n           )]\n    (reverse (my-dup xs []))))", "problem": 32, "user": "4dad8d4bc9a9d6ed1799dc57"}, {"code": "(fn [x] (interleave x x))", "problem": 32, "user": "4ed6b05c535d10e5ff6f52e5"}, {"code": "(fn [x] (reduce concat (map #(repeat 2 %) x)))", "problem": 32, "user": "4ed72e51535d10e5ff6f52ee"}, {"code": "mapcat #(vector % %)", "problem": 32, "user": "4ece7617535d23f03622770c"}, {"code": "(fn [xs]\n  (mapcat #(repeat 2 %) xs))", "problem": 32, "user": "4ed6238d535d10e5ff6f52de"}, {"code": "#(letfn [(f [x acc] (if (empty? x) acc (f (rest x) (conj acc (first x) (first x)))))]\n  (f % []))", "problem": 32, "user": "4ed94d69535d10e5ff6f5303"}, {"code": "mapcat (fn [a] [a a])", "problem": 32, "user": "4ed97da1535d10e5ff6f5306"}, {"code": "(fn dubl [lst]\n  (mapcat #(list % %) lst)\n  )", "problem": 32, "user": "4ecfa05c535d44c135fd68b9"}, {"code": "#(interleave % %)", "problem": 32, "user": "4ed27f9f535d44c135fd68d5"}, {"code": "(fn duplicate [coll]\n  (if (seq coll)\n    (let [head (first coll)]\n      (conj (duplicate (rest coll)) head head))\n    ()))", "problem": 32, "user": "4eda7cc3535d10e5ff6f530e"}, {"code": "(fn [coll]\n  (loop [result [], coll coll]\n    (if (empty? coll)\n      result\n      (recur (conj (conj result (first coll)) (first coll)) (rest coll)))))", "problem": 32, "user": "4edab806535d10e5ff6f5311"}, {"code": "mapcat (fn [x] (repeat 2 x))", "problem": 32, "user": "4ed8b598535d10e5ff6f52fc"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "4ed6ac40535d10e5ff6f52e4"}, {"code": "(fn dup [coll]\n  (reduce (fn [a b] (concat a b)) (map (fn [x] (list x x)) coll)))", "problem": 32, "user": "4ecdb0bb535d23f036227709"}, {"code": "(fn [s] (mapcat #(do [% %]) s))", "problem": 32, "user": "4ed7e37a535d10e5ff6f52f4"}, {"code": "#(interleave % %)", "problem": 32, "user": "4e5be681535d8a8b8723a2bc"}, {"code": "#(interleave % %)", "problem": 32, "user": "4ec6357a535d6d7199dd36c5"}, {"code": "mapcat #(repeat 2 %)", "problem": 32, "user": "4ec3650f535dcc7ae8597d56"}, {"code": "mapcat #(repeat 2 %)", "problem": 32, "user": "4ede8789535d10e5ff6f5337"}, {"code": "(fn [coll]\n  (mapcat #(repeat 2 %) coll))", "problem": 32, "user": "4e7d4544535db169f9c796d0"}, {"code": "(fn dup [l]\n  (if (empty? l) '()\n      (cons (first l) (cons (first l) (dup (rest l))))))", "problem": 32, "user": "4ede8e1d535d10e5ff6f5339"}, {"code": "mapcat #(do [% %])", "problem": 32, "user": "4db4c93f535dc0f10411755c"}, {"code": "#(interleave % %)", "problem": 32, "user": "4edeac6b535d10e5ff6f533a"}, {"code": "mapcat #(list %%)", "problem": 32, "user": "4e931ebb535dbda64a6f6b08"}, {"code": "(fn duplicate [x]\r\n (loop [lista x resultado []]\r\n (if (empty? lista)\r\n   resultado\r\n   (recur (rest lista) (conj resultado (first lista) (first lista)))\r\n )  \r\n)\r\n)", "problem": 32, "user": "4edf92f0535d10e5ff6f5341"}, {"code": "(fn [x] \r\n   (loop [lista [] vec x]\r\n     (if (empty? vec)\r\n       lista\r\n       (recur (conj lista (first vec) (first vec) ) (rest vec) )\r\n     )\r\n   )\r\n)", "problem": 32, "user": "4e94aa18535dbda64a6f6b1e"}, {"code": "mapcat #(identity [% %])", "problem": 32, "user": "4edd038c535d10e5ff6f5327"}, {"code": "(fn [col] (mapcat #(list % %) col))", "problem": 32, "user": "4e7f8f85535db966e863cc44"}, {"code": "(fn cp\r\n  [coll]\r\n\t(reduce (fn [x y](conj x y y)) [] coll))", "problem": 32, "user": "4edbae0d535d10e5ff6f531c"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "4e982877535dbda64a6f6b5b"}, {"code": "(fn [xs]\n  (apply concat\n         (map #(list % %) xs)))", "problem": 32, "user": "4ee2da14535d10e5ff6f536c"}, {"code": "(fn [a] (interleave a a))", "problem": 32, "user": "4ee26f01535d10e5ff6f5368"}, {"code": "(fn dup [coll]\n  (if (nil? coll)\n    ()\n    (cons (first coll)\n      (cons (first coll)\n        (dup (next coll))))))", "problem": 32, "user": "4ed9fe5f535d10e5ff6f5308"}, {"code": "#(interleave % %)", "problem": 32, "user": "4e95f5a5535dbda64a6f6b3b"}, {"code": "#(sort (concat % %))", "problem": 32, "user": "4ecff781535d44c135fd68c1"}, {"code": "(fn [c] (reduce #(conj %1 %2 %2) [] c))", "problem": 32, "user": "4ee3c9c5535d10e5ff6f5372"}, {"code": "(fn [list] (interleave list list))", "problem": 32, "user": "4edd9d79535d10e5ff6f532b"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "4ee3b586535d10e5ff6f5371"}, {"code": "(fn [c] (mapcat #(list % %) c))", "problem": 32, "user": "4edee6a2535d10e5ff6f533e"}, {"code": "(fn [seq]\n   (reduce concat (map #(repeat 2 %) seq)))", "problem": 32, "user": "4eb7b049535d7eef30807377"}, {"code": "#(reduce concat [] (map (fn [x] (repeat 2 x)) %))", "problem": 32, "user": "4ee40938535d10e5ff6f5375"}, {"code": "(fn duplicate-list ([lst] (duplicate-list lst '()))\n  ([lst acc]\n    (let [fst (first lst) tmp (rest lst)]\n      (if (= lst '()) (reverse acc)\n        (recur tmp (conj (conj acc fst) fst))))))", "problem": 32, "user": "4edfb618535d10e5ff6f5343"}, {"code": "(fn [x] (mapcat #(conj (conj [] %) %) x))", "problem": 32, "user": "4edf5dc6535d10e5ff6f5340"}, {"code": "(fn [s]\n  (interleave s s))", "problem": 32, "user": "4ee4f4a9535d1385b2869d85"}, {"code": "#(interleave % %)", "problem": 32, "user": "4eddcbbf535d10e5ff6f532d"}, {"code": "(fn [coll]\n  (reduce #(conj %1 %2 %2) [] coll))", "problem": 32, "user": "4ed7b617535d10e5ff6f52f3"}, {"code": "mapcat (partial repeat 2)", "problem": 32, "user": "4ee75ec2535d93acb0a66867"}, {"code": "(fn dup [s]\n  (when-let [[f & r] (seq s)]\n    (cons f (cons f (dup r)))))", "problem": 32, "user": "4edfd846535d10e5ff6f5345"}, {"code": "#(interleave % %)", "problem": 32, "user": "4ee7ef87535d93acb0a66872"}, {"code": "#(interleave % %)", "problem": 32, "user": "4ee6400c535d93acb0a6685b"}, {"code": "(fn [f]\n  (loop [s f ret []]\n    (if (empty? s)\n      (reverse ret)\n      (recur (rest s) (cons (first s) (cons (first s) ret))))))", "problem": 32, "user": "4ee251e9535d10e5ff6f5365"}, {"code": "(fn [xs]\n  (loop [xs xs out []]\n    (if (empty? xs)\n      out\n      (recur (rest xs) (conj out (first xs) (first xs))))))", "problem": 32, "user": "4ee88269535d93acb0a6687f"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "4ee63d8d535d93acb0a66859"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "4eb30868535d7eef30807355"}, {"code": "#(for [x % i [0 1]] x)", "problem": 32, "user": "4ee82539535d93acb0a66878"}, {"code": "mapcat #(vector %1 %1)", "problem": 32, "user": "4ee7d177535d93acb0a6686f"}, {"code": "(fn r [x] \n  (let [h (first x) t (rest x)]\n    (if (not (empty? t)) \n      (concat (list h h) (r t))\n      (list h h)\n    )\n  )\n)", "problem": 32, "user": "4ee67364535d93acb0a6685f"}, {"code": "#(mapcat (partial repeat 2) %)", "problem": 32, "user": "4ee82223535d93acb0a66877"}, {"code": "#((fn dup [coll]\n  (when-let [[h & t] (seq coll)]\n\t\t(concat (list h h) (dup t)))) %)", "problem": 32, "user": "4ee91d00535d93acb0a6688b"}, {"code": "(fn [x]\n  (loop [aggr [] coll x]\n    (if (empty? coll)\n      aggr\n      (recur (conj aggr \n                   (first coll) \n                   (first coll)) \n             (rest coll)))))", "problem": 32, "user": "4daeabf6edd6309eace4d15c"}, {"code": "#(interleave % %)", "problem": 32, "user": "4ed19f00535d44c135fd68d1"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "4ed2a92b535d44c135fd68dc"}, {"code": "mapcat (fn [x] [x x])", "problem": 32, "user": "4ec5a6ee535d6d7199dd36ae"}, {"code": "(fn [x] (interleave x x))", "problem": 32, "user": "4ee9d697535d93acb0a66895"}, {"code": "(fn f32 [x] (loop [ret '() a x]                                                                                                                             \n                (cond                                                                                                                                         \n                 (empty? a) (sort ret)                                                                                                                        \n                 :e (recur (conj ret (first a) (first a)) (rest a))                                                                                           \n                 )                                                                                                                                            \n                ))", "problem": 32, "user": "4eea1a41535d93acb0a66899"}, {"code": "#(interleave % %)", "problem": 32, "user": "4eebfd03535d93acb0a668ab"}, {"code": "#(apply concat (for [x %] [x x]))", "problem": 32, "user": "4ee9ddb8535d93acb0a66896"}, {"code": "(partial mapcat #(list % %))", "problem": 32, "user": "4eebc5da535d93acb0a668aa"}, {"code": "#(mapcat (fn [v] (take 2 (repeat v))) %)", "problem": 32, "user": "4ee868be535d93acb0a6687d"}, {"code": "(fn foo [x] \n   (interleave x x)\n)", "problem": 32, "user": "4ec3072a535dcc7ae8597d50"}, {"code": "#(interleave % %)", "problem": 32, "user": "4ec3b393535dcc7ae8597d59"}, {"code": "#(mapcat (fn [x] [x x]) %)", "problem": 32, "user": "4ee88bfb535d93acb0a66881"}, {"code": "(fn [xs]\n  (loop [res [] lst (seq xs)]\n    (if lst\n      (recur \n        (conj (conj res (first lst)) (first lst))\n        (next lst))\n      res\n      )))", "problem": 32, "user": "4ee8092f535d93acb0a66875"}, {"code": "reduce #(conj % %2 %2) []", "problem": 32, "user": "4eeae8f0535d93acb0a668a2"}, {"code": "(fn [xs] (interleave xs xs))", "problem": 32, "user": "4eecdd66535d93acb0a668b9"}, {"code": "(fn dup \n  ([someseq] (dup someseq []))\n  ([someseq result] \n    (if (empty? someseq)\n      result\n      (dup (rest someseq) (into result (repeat 2 (first someseq)))))))", "problem": 32, "user": "4daea889edd6309eace4d15b"}, {"code": "mapcat (fn [x] [x x])", "problem": 32, "user": "4dac61e18cc9d6edb9beb0b3"}, {"code": "(fn [s] (mapcat #(list % %) s))", "problem": 32, "user": "4ef0a38e535dced4c769f20b"}, {"code": "(comp reverse (partial reduce #(cons %2 (cons %2 %)) []))", "problem": 32, "user": "4ef0a39b535dced4c769f20c"}, {"code": "(fn [coll] (reduce #(concat %1 [%2 %2]) [] coll))", "problem": 32, "user": "4ef0a39b535dced4c769f20d"}, {"code": "#(interleave % %)", "problem": 32, "user": "4ec6cd4f535d6d7199dd36d7"}, {"code": "(fn [s]\n  (loop [xs s acc []]\n    (if (seq xs)\n      (recur (rest xs) (conj acc (first xs) (first xs)))\n      acc)))", "problem": 32, "user": "4ef1ee67535dced4c769f219"}, {"code": "(fn [x]\n  (reduce #(conj %1 %2 %2) [] x))", "problem": 32, "user": "4ee259a1535d10e5ff6f5366"}, {"code": "mapcat #(vector % %)", "problem": 32, "user": "4edecdae535d10e5ff6f533c"}, {"code": "(fn [S] (reduce concat (map #(repeat 2 %1) S )))", "problem": 32, "user": "4eef1164535d305ff5cb7f19"}, {"code": "#(interleave % %)", "problem": 32, "user": "4ef2d243535dced4c769f221"}, {"code": "#(interleave % %)", "problem": 32, "user": "4eda77c0535d10e5ff6f530d"}, {"code": "(fn [s] (apply concat (for [x s] [x x])))", "problem": 32, "user": "4ef2a142535dced4c769f21e"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "4ef49c2c535dced4c769f238"}, {"code": "#(interleave % %)", "problem": 32, "user": "4ef4e5fa535dced4c769f242"}, {"code": "(fn dup-seq [[f & r :as S]]\n  (if (seq S)\n    (cons f (cons f (dup-seq r)))\n    '()))", "problem": 32, "user": "4ef4c1ff535dced4c769f23e"}, {"code": "#(mapcat (fn [x] (list x x)) %)", "problem": 32, "user": "4ef41f26535dced4c769f230"}, {"code": "(fn [xs]\n  (apply concat (map #(list % %) xs)))", "problem": 32, "user": "4ee67d74535d93acb0a66861"}, {"code": "#(interleave % %)", "problem": 32, "user": "4ef5c7ce535dced4c769f248"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "4ef667c4535dced4c769f24c"}, {"code": "#(reverse (reduce (fn [a x] (conj (conj a x) x)) () %))", "problem": 32, "user": "4eee5c7f535d93acb0a668c6"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "4ef5c847535dced4c769f249"}, {"code": "(fn [col] (reduce #(conj %1 %2 %2) [] col))", "problem": 32, "user": "4ef4acf8535dced4c769f23c"}, {"code": "#(interleave % %)", "problem": 32, "user": "4ef355e3535dced4c769f228"}, {"code": "(fn [x] (reduce #(conj %1 %2 %2) [] x))", "problem": 32, "user": "4daea587edd6309eace4d15a"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "4ef6e689535dced4c769f24f"}, {"code": "#(interleave % %)", "problem": 32, "user": "4ef77c82535dced4c769f253"}, {"code": "#(for [x % _ (range 2)]  x)", "problem": 32, "user": "4ee3afde535d10e5ff6f5370"}, {"code": "#(interleave % %)", "problem": 32, "user": "4dd88803535d2dad7130b5d9"}, {"code": "(fn dbl [coll] (reduce #(conj (conj %1 %2) %2) [] coll))", "problem": 32, "user": "4ef57a7f535dced4c769f246"}, {"code": "mapcat #(repeat 2 %)", "problem": 32, "user": "4ef992c8535dced4c769f268"}, {"code": "mapcat (fn [x](repeat 2 x))", "problem": 32, "user": "4ed2dd98535d44c135fd68e2"}, {"code": "(fn [xs] (reduce concat (map #(repeat 2 %) xs)))", "problem": 32, "user": "4ef8d47c535dced4c769f261"}, {"code": "(fn [s]\n  (loop [results '()\n        more s]\n    (if (empty? more)\n      (reverse results)\n      (recur (conj (conj results (first more)) (first more)) (next more)))))", "problem": 32, "user": "4efb92ce535dced4c769f27a"}, {"code": "mapcat #(repeat 2 %)", "problem": 32, "user": "4ec5d62c535d6d7199dd36ba"}, {"code": "(fn my-dup \n    ([icoll] (my-dup icoll '()))\n    ([icoll ocoll] \n            (cond \n             (empty? icoll) (reverse ocoll)\n             :else (recur (rest icoll) (conj ocoll (first icoll) (first icoll))))))", "problem": 32, "user": "4eee3e6a535d93acb0a668c3"}, {"code": "(fn duplicate-seq [xs]\n  (cond (empty? xs) '()\n        true (conj (duplicate-seq (rest xs)) (first xs) (first xs))))", "problem": 32, "user": "4ef6f5ea535dced4c769f250"}, {"code": "mapcat #(replicate 2 %)", "problem": 32, "user": "4efb0ae1535dced4c769f273"}, {"code": "reduce #(conj % %2 %2) []", "problem": 32, "user": "4efb2fd7535dced4c769f274"}, {"code": "#(interleave % %)", "problem": 32, "user": "4eecc9ad535d93acb0a668b4"}, {"code": "(fn [l] (sort (into l l)) )", "problem": 32, "user": "4efccd24535de96065cf5080"}, {"code": "#(interleave % %)", "problem": 32, "user": "4ed9354f535d10e5ff6f5301"}, {"code": "(fn dupeseq [x]\n  (cond\n   (nil? x) '()\n   :else (cons (first x)\n               (cons  (first x)\n               (dupeseq (next x))))))", "problem": 32, "user": "4eb2c45e535d7eef3080734d"}, {"code": "(fn [xs](mapcat vector xs xs))", "problem": 32, "user": "4efcac3a535de96065cf507e"}, {"code": "#(apply interleave ((fn [x] [x x]) %))", "problem": 32, "user": "4e8768f6535dceadca469850"}, {"code": "(fn [sq] (loop [e sq result []] (if (seq e) (recur (rest e) (conj result (first e) (first e))) result )))", "problem": 32, "user": "4efd98fa535de96065cf5086"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "4e6ac593535d8ccf87e9ff02"}, {"code": "(fn [s] (mapcat identity (map #(list % %) s)))", "problem": 32, "user": "4eff81ca535dcb61093f6a2d"}, {"code": "mapcat #(list %1 %1)", "problem": 32, "user": "4effb663535dcb61093f6a2e"}, {"code": "reduce #(conj % %2 %2) []", "problem": 32, "user": "4efb87f7535dced4c769f279"}, {"code": "(fn [coll] (reverse (reduce #(cons %2 (cons %2 %1)) [] coll)))", "problem": 32, "user": "4ed3c783535d44c135fd68f6"}, {"code": "#(interleave % %)", "problem": 32, "user": "4f017593535dcb61093f6a36"}, {"code": "(fn [s]\n    (loop [s s\n           cur []]\n      (if (empty? s)\n        cur\n        (recur (rest s) (conj cur (first s) (first s))))))", "problem": 32, "user": "4ef9b021535dced4c769f269"}, {"code": "#(loop [input % output [] ]\r\n  \t(if (= (count input) 0) \r\n\t\t\toutput\r\n\t\t\t(recur (rest input) ( conj ( conj output (first input)) (first input))) ))", "problem": 32, "user": "4f00c74f535dcb61093f6a31"}, {"code": "(fn [ls] (reduce (fn [xs x] (cons x (cons x xs))) '() (reverse ls)))", "problem": 32, "user": "4f00d948535dcb61093f6a32"}, {"code": "#(interleave % %)", "problem": 32, "user": "4ee2baa8535d10e5ff6f536b"}, {"code": "#(interleave % %)", "problem": 32, "user": "4f01ff83535dcb61093f6a3a"}, {"code": "(fn [input-sequence]\n    ((fn [remaining output]\n       (if (empty? remaining)\n         output\n         (recur (rest remaining) (conj output (first remaining) (first remaining)))))\n       (reverse input-sequence) '()))", "problem": 32, "user": "4ee9c8d0535d93acb0a66892"}, {"code": "(fn [coll] (reverse (reduce #(conj %1 %2 %2) () coll)))", "problem": 32, "user": "4f031eac535dcb61093f6a67"}, {"code": "(fn [s] (reverse (reduce #(cons %2 (cons %2 %1)) '() s)))", "problem": 32, "user": "4ef89fb0535dced4c769f260"}, {"code": "reduce #(conj % %2 %2) []", "problem": 32, "user": "4f01c938535dcb61093f6a39"}, {"code": "(fn [x]\n  (loop [l x r []]\n    (if (empty? l)\n      r\n      (recur (rest l) (conj r (first l) (first l)))\n    )\n  )\n)", "problem": 32, "user": "4e5cac7c535d8a8b8723a2c3"}, {"code": "#(interleave % %)", "problem": 32, "user": "4db8f6c4535d1e037afb219e"}, {"code": "(fn [coll]\n  (loop [old-lst coll\n         dup-lst '()]\n    (if (empty? old-lst)\n        (reverse dup-lst)\n        (recur (rest old-lst)\n                (conj dup-lst\n                  (first old-lst)\n                  (first old-lst))))))", "problem": 32, "user": "4f035bfd535dcb61093f6a8f"}, {"code": "#(interleave % %)", "problem": 32, "user": "4f036d9b535dcb61093f6ac1"}, {"code": "#(reduce (fn [a b] (conj a b b)) [] %)", "problem": 32, "user": "4f038017535dcb61093f6afa"}, {"code": "(fn f [seq]\n  (if (= (first seq) nil)\n    nil\n    (cons (first seq) (cons (first seq) (f (rest seq))))\n  )\n)", "problem": 32, "user": "4f039a8b535dcb61093f6b36"}, {"code": "(fn [seq] (mapcat (fn [x] (list x x)) seq))", "problem": 32, "user": "4f03818e535dcb61093f6b00"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "4ef0eaef535dced4c769f211"}, {"code": "(fn [s]\n  (loop [s s a ()]\n    (if (empty? s) (reverse a) (recur (rest s) (cons (first s) (cons (first s) a))))))", "problem": 32, "user": "4f03d0fe535dcb61093f6b6d"}, {"code": "#(reduce concat (map (fn [x] (list x x)) %))", "problem": 32, "user": "4f04165d535dcb61093f6b9c"}, {"code": "#(interleave % %)", "problem": 32, "user": "4f043ed1535dcb61093f6bb4"}, {"code": "(fn [s] (mapcat #(repeat 2 %) s))", "problem": 32, "user": "4f0397ee535dcb61093f6b30"}, {"code": "(fn [x]\n  (loop [a x res [] n (count x)]\n    (if (zero? n)\n      (seq res)\n      (recur (rest a) (conj res (first a) (first a)) (dec n)))))", "problem": 32, "user": "4f040bbf535dcb61093f6b95"}, {"code": "(fn [s]\n  (reduce #(conj %1 %2 %2) '() (reverse s)))", "problem": 32, "user": "4f036894535dcb61093f6aad"}, {"code": "(fn [x] (interleave x x))", "problem": 32, "user": "4f03193e535dcb61093f6a61"}, {"code": "#(sort (concat % %))", "problem": 32, "user": "4f036fad535dcb61093f6ac7"}, {"code": "#(interleave % %)", "problem": 32, "user": "4f03857e535dcb61093f6b0d"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "4f047c07535dcb61093f6bcd"}, {"code": "#(interleave % %)", "problem": 32, "user": "4f0348b4535dcb61093f6a84"}, {"code": "(fn dobla [x]\n  (if (= (count x) 1)\n     (list (first x) (first x))    \n     (cons (first x) (cons (first x) \n          (dobla (next x))))))", "problem": 32, "user": "4f04a06d535dcb61093f6bd9"}, {"code": "(fn[coll] (interleave coll coll))", "problem": 32, "user": "4e95a440535dbda64a6f6b37"}, {"code": "(fn [l] (reduce concat (map #(list % %) l)))", "problem": 32, "user": "4dbdc898535d020aff1edf4a"}, {"code": "#(interleave % %)", "problem": 32, "user": "4ef0f1a1535dced4c769f212"}, {"code": "#(reduce (fn [a b] (concat a (list b b))) () %)", "problem": 32, "user": "4f039f14535dcb61093f6b3e"}, {"code": "(fn [x]\n  ((fn hlp [in out]\n    (if (empty? in)\n      out\n      (let [fx (first in)]\n        (hlp (rest in) (conj out fx fx)))))\n    (reverse x) ()))", "problem": 32, "user": "4f047902535dcb61093f6bcc"}, {"code": "#(interleave % %)", "problem": 32, "user": "4f031639535dcb61093f6a59"}, {"code": "(fn [x]\n (interleave x (not-empty x)) \n)", "problem": 32, "user": "4f00f997535dcb61093f6a34"}, {"code": "(fn [X]\n  (loop [collec X result []]\n    (if (> (count collec) 0)\n      (recur (rest collec) (conj (conj result (first collec)) (first collec)))\n      (seq result)\n    )\n  )\n)", "problem": 32, "user": "4f031883535dcb61093f6a5e"}, {"code": "(fn [x] (reduce concat (map #(list % %) x)))", "problem": 32, "user": "4f038bcd535dcb61093f6b1d"}, {"code": "(fn [x] (apply interleave (take 2 (repeat x))))", "problem": 32, "user": "4f0514b4535dcb61093f6bf0"}, {"code": "(fn [col] (interleave col col))", "problem": 32, "user": "4f032977535dcb61093f6a6c"}, {"code": "(fn dupseq [s]\n  (if (empty? s)\n    s\n    (cons (first s) \n      (cons (first s)\n        (dupseq (rest s))))))", "problem": 32, "user": "4f03d4dc535dcb61093f6b6e"}, {"code": "(fn dupl [coll]                                                                                                                              \n                     (when (seq coll)                                                                                                                           \n                       (cons (first coll)                                                                                                                       \n                             (cons (first coll)                                                                                                                 \n                                   (dupl (rest coll))))))", "problem": 32, "user": "4e4be570535dc968683fc4d8"}, {"code": "(fn [l] (mapcat #(repeat 2 %) l))", "problem": 32, "user": "4f04f847535dcb61093f6beb"}, {"code": "#(reduce\n    (fn [val x] (concat val (list x x)))\n    '() %)", "problem": 32, "user": "4f0381db535dcb61093f6b02"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "4ec5a5f9535d6d7199dd36ad"}, {"code": "reduce #(conj (conj % %2) %2) []", "problem": 32, "user": "4f062d4a535dcb61093f6c08"}, {"code": "(fn dupe [x] \n  (if (empty? x) '()\n  (concat (list (first x) (first x)) (dupe (rest x)))))", "problem": 32, "user": "4f036d6e535dcb61093f6ac0"}, {"code": "#(interleave % %)", "problem": 32, "user": "4eaa66eb535d7eef3080730b"}, {"code": "(fn [xs]\n  (reverse\n  (loop [remain xs result ()]\n    (if (empty? remain)\n      result\n      (recur\n        (rest remain)\n        (conj result (first remain) (first remain)))))))", "problem": 32, "user": "4f0388e8535dcb61093f6b17"}, {"code": "#(mapcat list % %)", "problem": 32, "user": "4e6a6be7535d8ccf87e9fee1"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "4f047542535dcb61093f6bc7"}, {"code": "(fn [c] (mapcat #(vector %1 %1) c))", "problem": 32, "user": "4f038355535dcb61093f6b04"}, {"code": "(partial mapcat (juxt identity identity))", "problem": 32, "user": "4f052eaf535dcb61093f6bf3"}, {"code": "#(loop [n 0 acc '()]\n    (if (= (count %) n)\n      acc\n      (recur (inc n) (concat acc (list (nth % n) (nth % n))))))", "problem": 32, "user": "4f038567535dcb61093f6b0c"}, {"code": "#(reduce concat (map (partial repeat 2) %))", "problem": 32, "user": "4f067029535dcb61093f6c12"}, {"code": "(fn dup-seq [mylist]\r\n    (seq (loop [l mylist final '[]]\r\n           (if (empty? l) final\r\n               (recur (rest l) (conj (conj final (first l)) (first l)))))))", "problem": 32, "user": "4f039524535dcb61093f6b2c"}, {"code": "(fn [x] (mapcat #(repeat 2 %) x))", "problem": 32, "user": "4f07056c535dcb61093f6c1d"}, {"code": "#(interleave % %)", "problem": 32, "user": "4f083048535dcb61093f6c33"}, {"code": "mapcat (partial repeat 2)", "problem": 32, "user": "4f0664bd535dcb61093f6c0f"}, {"code": "(fn [in-seq] \n  (loop [local-seq in-seq result []]\n    (if (empty? local-seq) result\n      (recur (rest local-seq) \n        (conj result (first local-seq) (first local-seq))))))", "problem": 32, "user": "4ef4ab95535dced4c769f23b"}, {"code": "(fn dup-sequence [xs]\n    (when-first [x xs]\n        (conj (dup-sequence (rest xs)) x x)))", "problem": 32, "user": "4f0660ee535dcb61093f6c0d"}, {"code": "(partial mapcat (partial repeat 2))", "problem": 32, "user": "4f03154a535dcb61093f6a58"}, {"code": "#(interleave % %)", "problem": 32, "user": "4f08b15b535dcb61093f6c40"}, {"code": "(fn [x] (interleave x x))", "problem": 32, "user": "4dc1e1e4535d020aff1edf90"}, {"code": "(fn [s]\n  (loop [s_ s ret '()]\n    (if s_\n      (let [a (first s_)]\n        (recur (next s_) (conj ret a a)))\n      (into '() ret))))", "problem": 32, "user": "4f050dec535dcb61093f6bef"}, {"code": "(fn [coll]\n  (reduce\n    #(into %1 (apply list (repeat 2 %2)))\n    ()\n    (reverse coll)))", "problem": 32, "user": "4f036c4b535dcb61093f6ab9"}, {"code": "mapcat (partial repeat 2)", "problem": 32, "user": "4f04b66b535dcb61093f6bdd"}, {"code": "(fn [x] (reduce concat (map (fn [y] (list y y)) x)))", "problem": 32, "user": "4f0365fc535dcb61093f6aa4"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "4f0891a2535dcb61093f6c3b"}, {"code": "#(interleave % %)", "problem": 32, "user": "4f06dcad535dcb61093f6c16"}, {"code": "(fn [x] (interleave x x))", "problem": 32, "user": "4ef0b523535dced4c769f20e"}, {"code": "#(interleave % %)", "problem": 32, "user": "4f039bbe535dcb61093f6b39"}, {"code": "#(reduce (fn [acc x] (conj acc x x)) () (reverse %))", "problem": 32, "user": "4f038499535dcb61093f6b09"}, {"code": "#(apply concat (for [x %] [x x]))", "problem": 32, "user": "4f0a4e7e535d0136e6c222f4"}, {"code": "#(interleave % %)", "problem": 32, "user": "4f045946535dcb61093f6bba"}, {"code": "mapcat #(conj [%] %)", "problem": 32, "user": "4e55b3dc535d8a8b8723a27f"}, {"code": "(fn [xs] (mapcat  #(list  %1 %1) xs))", "problem": 32, "user": "4f037bb5535dcb61093f6aec"}, {"code": "reduce #(conj % %2 %2) []", "problem": 32, "user": "4f032f30535dcb61093f6a73"}, {"code": "(fn [a] (mapcat #(list % %) (seq a) ))", "problem": 32, "user": "4f00e9c7535dcb61093f6a33"}, {"code": "#(mapcat (fn [a] (list a a)) %)", "problem": 32, "user": "4f0b2028535d0136e6c222ff"}, {"code": "mapcat (partial repeat 2)", "problem": 32, "user": "4e7e3cc4535db169f9c7970a"}, {"code": "(fn [y] (reduce concat (map #(repeat 2 %) y)))", "problem": 32, "user": "4f089f1a535dcb61093f6c3c"}, {"code": "reduce #(concat %1 [%2 %2]) '()", "problem": 32, "user": "4f03822f535dcb61093f6b03"}, {"code": "(fn [seq]\n  (loop [seq seq result []]\n    (if (empty? seq)\n        result\n        (recur (rest seq) (conj result (first seq) (first seq))))))", "problem": 32, "user": "4f017b4e535dcb61093f6a37"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "4eaa5c51535d7eef3080730a"}, {"code": "#(reduce (fn [x y] (conj x y y)) [] %)", "problem": 32, "user": "4efec33f535dcb61093f6a2a"}, {"code": "reduce (fn [r e] (conj (conj r e) e)) []", "problem": 32, "user": "4f070ce6535dcb61093f6c1e"}, {"code": "(fn dupe [coll]\n  (->> coll\n    (map (fn [x] [x x]))\n    (mapcat identity)))", "problem": 32, "user": "4f07bc41535dcb61093f6c2c"}, {"code": "(fn myDup \n    ([x y]\n        (if\n            (empty? x)\n                y\n            (myDup (rest x) (concat y [(first x) (first x)]))))\n    ([x] (myDup x [])))", "problem": 32, "user": "4f03b3fb535dcb61093f6b52"}, {"code": "mapcat (fn [a] [a a])", "problem": 32, "user": "4eeaf88f535d93acb0a668a3"}, {"code": "(fn [x] (apply concat (map #(list % %) x)))", "problem": 32, "user": "4f0ce26c535d0136e6c22312"}, {"code": "#(interleave % %)", "problem": 32, "user": "4f0333f6535dcb61093f6a77"}, {"code": "mapcat (fn [a] (list a a))", "problem": 32, "user": "4f03ac2d535dcb61093f6b4a"}, {"code": "#(mapcat (fn [x] (list x x)) %)", "problem": 32, "user": "4ee7d113535d93acb0a6686e"}, {"code": "#(interleave % %)", "problem": 32, "user": "4ec1b80c535dfed6da9c6db6"}, {"code": "(fn [seq]\n  (interleave seq seq))", "problem": 32, "user": "4e7d1c22535db169f9c796c5"}, {"code": "#(mapcat (fn [x] [x x]) %)", "problem": 32, "user": "4f0ef874535d0136e6c22328"}, {"code": "(fn duplicator [seq1]\n  (apply concat (for [x seq1] [x x])))", "problem": 32, "user": "4e9a3a03535dbda64a6f6b70"}, {"code": "(fn f [x]\n  (if (seq x)\n    (conj (f (seq (rest x))) (first x) (first x))\n    '()))", "problem": 32, "user": "4f0f9df7535d0136e6c22342"}, {"code": "#(loop [x % result []]\n     (if (nil? (first x))\n\t       result\n\t       (recur (rest x) (conj (conj result (first x)) (first x)))))", "problem": 32, "user": "4f066916535dcb61093f6c10"}, {"code": "(fn[x](mapcat #(seq [% %])x) )", "problem": 32, "user": "4f0446f9535dcb61093f6bb8"}, {"code": "#(interleave % %)", "problem": 32, "user": "4f0f174c535d0136e6c22330"}, {"code": "(fn dup [x] (if (= (next x) nil)\n  \t(list (first x) (first x))\n\t\t(concat (list (first x) (first x)) (dup (next x)))))", "problem": 32, "user": "4f048f67535dcb61093f6bd3"}, {"code": "#(mapcat list % %)", "problem": 32, "user": "4ed845a8535d10e5ff6f52f8"}, {"code": "#(interleave % %)", "problem": 32, "user": "4ebcb8ff535dfed6da9c6d8a"}, {"code": "(fn [ls] (reduce #(conj (conj %1 %2) %2) [] ls))", "problem": 32, "user": "4ef60a02535dced4c769f24b"}, {"code": "reduce #(conj % %2 %2) []", "problem": 32, "user": "4f1052b9535d64f603146418"}, {"code": "(fn duplicate [seq]\n  (if (empty? seq)\n    '()\n    (cons (first seq) (cons (first seq) (duplicate (rest seq))))))", "problem": 32, "user": "4f0a2ed1535d0136e6c222f3"}, {"code": "(fn [list]\n  (loop [acc '() x list]\n    (if (nil? (first x))\n      (reverse acc)\n      (recur (conj acc (first x) (first x)) (rest x)))))", "problem": 32, "user": "4f08a8a2535dcb61093f6c3d"}, {"code": "reduce #(conj % %2 %2) []", "problem": 32, "user": "4f0f36a7535d0136e6c22336"}, {"code": "#(loop [col % c ()]\n(if (empty? col)\n(reverse c)\n(recur (rest col)\n(cons (first col) (cons (first col) c)))))", "problem": 32, "user": "4f10175e535d64f603146411"}, {"code": "#(interleave % %)", "problem": 32, "user": "4f0e995e535d0136e6c22326"}, {"code": "(fn [x]\n  (reduce  concat ()\n    (map #(repeat 2 %) x)\n  ) \n)", "problem": 32, "user": "4f0df199535d0136e6c2231e"}, {"code": "(fn [v] (reduce #(conj %1 %2 %2) [] v))", "problem": 32, "user": "4f030af7535dcb61093f6a49"}, {"code": "#(sort (concat %1 %1))", "problem": 32, "user": "4f0cd1c9535d0136e6c22311"}, {"code": "(fn dup [xs]\n    (loop [s xs, r []]\n        (if (empty? s)\n            r\n            (recur (rest s) (conj r (first s) (first s))))))", "problem": 32, "user": "4f128865535d64f603146428"}, {"code": "(fn dup [seq] (reduce (fn [acc e] (conj (conj acc e) e)) [] seq))", "problem": 32, "user": "4f13047d535d64f60314642c"}, {"code": "reduce #(concat %1 (list %2 %2)) '()", "problem": 32, "user": "4dd5e2cc535dae65d5c462ec"}, {"code": "reduce #(conj (conj %1 %2) %2) []", "problem": 32, "user": "4f03bf5e535dcb61093f6b5d"}, {"code": "#(interleave % %)", "problem": 32, "user": "4ede361a535d10e5ff6f5332"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "4f1473eb535d64f603146439"}, {"code": "(fn [coll]\r\n    (reverse (reduce (fn [t e] (conj t e e)) nil coll)))", "problem": 32, "user": "4f149e0f535d64f60314643d"}, {"code": "(fn [x] (reverse (reduce #(cons %2 (cons %2 %1)) '() x)))", "problem": 32, "user": "4f0f03ce535d0136e6c2232a"}, {"code": "reduce #(apply conj %1 [%2 %2]) []", "problem": 32, "user": "4f12ab23535d64f603146429"}, {"code": "mapcat (fn [i] (list i i))", "problem": 32, "user": "4f0e4ebd535d0136e6c22322"}, {"code": "(fn [s] (for [x s y [x x]] y))", "problem": 32, "user": "4f0cc259535d0136e6c22310"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "4f0f40d3535d0136e6c2233b"}, {"code": "(fn [x](interleave x x))", "problem": 32, "user": "4eeb8f68535d93acb0a668a9"}, {"code": "(fn [seq] (reduce (fn [l [a b]] (conj l a b)) (map (fn [x] [x x]) seq)))", "problem": 32, "user": "4f16ef8a535d64f603146451"}, {"code": "#(interleave %1 %1)", "problem": 32, "user": "4f1595da535d64f603146444"}, {"code": "(fn duplicate [coll]\n  (loop [coll coll, acc []]\n    (if (empty? coll)\n      acc\n      (recur (rest coll) (conj acc (first coll) (first coll))))))", "problem": 32, "user": "4f159ea6535d64f603146445"}, {"code": "(fn [seq]\n  (interleave seq seq))", "problem": 32, "user": "4f03396d535dcb61093f6a7b"}, {"code": "reduce #(conj % %2 %2) []", "problem": 32, "user": "4f0c84ce535d0136e6c2230e"}, {"code": "reduce #( conj (conj %1 %2) %2 ) []", "problem": 32, "user": "4f030775535dcb61093f6a43"}, {"code": "(fn [xs] (reduce #(concat %1 (list %2 %2)) '() xs))", "problem": 32, "user": "4e6b6294535d8ccf87e9ff11"}, {"code": "#(interleave % %)", "problem": 32, "user": "4f04d312535dcb61093f6be7"}, {"code": "(fn [c] (\n  (fn myDup [data result]\n    (if (= (count data) 0)\n      result\n      (myDup\n        (rest data)\n        (conj result (first data) (first data))\n      )\n    )\n  ) c []\n))", "problem": 32, "user": "4f16d6ed535d64f60314644f"}, {"code": "(fn [v]\n  (reverse \n    (reduce (fn [acc, t]\n              (conj acc t t)) () v)))", "problem": 32, "user": "4edffe54535d10e5ff6f5347"}, {"code": "(fn [l] (reduce #(conj %1 %2 %2) [] l))", "problem": 32, "user": "4f1b0ab3535d64f603146474"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "4f1b92d1535d64f60314647b"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "4e8ccd16535d65386fec212e"}, {"code": "#(interleave % %)", "problem": 32, "user": "4f1d1d95535d64f603146488"}, {"code": "#(reverse (loop [i (dec (count %)) result []]\n  (if (= i -1)\n    result\n    (recur (dec i) \n           (conj (conj result (nth % i)) (nth % i) ) \n    )\n  )\n) )", "problem": 32, "user": "4ea31da2535d7eef308072c1"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "4f1c9652535d64f603146483"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "4f16d3fd535d64f60314644e"}, {"code": "(fn [x]\n    (loop [s (reverse x) acc '()]\n      (if (empty? s) acc\n          (recur (rest s)\n                 (conj acc (first s) (first s)))))\n    )", "problem": 32, "user": "4f16213f535d64f603146449"}, {"code": "(fn dupl [items]\n  (if (empty? items)\n    ()\n    (let [f (first items) r (rest items)]\n      (concat [f f] (dupl r)))))", "problem": 32, "user": "4f0d093b535d0136e6c22313"}, {"code": "#(loop [f % e '()] (if (empty? f) (reverse e) (recur (rest f) (conj e (first f) (first f)))))", "problem": 32, "user": "4dadaa5cc9a9d6ed2f99dc57"}, {"code": "#(mapcat vector % %)", "problem": 32, "user": "4f0c4518535d0136e6c2230b"}, {"code": "(fn [x]\n  (reduce concat \n    (map (fn [a b] [a b] ) x x ) ) )", "problem": 32, "user": "4ea0a7c7535d7eef308072ab"}, {"code": "#(interleave % %)", "problem": 32, "user": "4f1900b0535d64f603146463"}, {"code": "(fn [s] (apply concat (for [e s] [e e])))", "problem": 32, "user": "4f03ebf7535dcb61093f6b7f"}, {"code": "(fn d \n  ([y] (d y [])) \n  ([y a] \n    (if y \n      (let [[x & xs] y] \n        (d xs (conj a x x))) \n      a)))", "problem": 32, "user": "4f1fd734535d64f6031464a5"}, {"code": "#(interleave % %)", "problem": 32, "user": "4f2004a1535d64f6031464a7"}, {"code": "#(interleave % %)", "problem": 32, "user": "4e6f4cbc535d5021c1a8961a"}, {"code": "(fn [coll]\n  (mapcat (fn [x] [x x]) coll))", "problem": 32, "user": "4f1c2a3a535d64f603146480"}, {"code": "#(interleave % %)", "problem": 32, "user": "4f17ab99535d64f603146457"}, {"code": "#(interleave %1 %1)", "problem": 32, "user": "4f215350e4b0d66497709fd0"}, {"code": "(fn [s] (reverse (reduce #(conj %1 %2 %2) '() s)))", "problem": 32, "user": "4f165655535d64f60314644a"}, {"code": "#(interleave % %)", "problem": 32, "user": "4eea4d84535d93acb0a6689c"}, {"code": "(fn [theSeq] \n  (reverse ((fn compress [theSeq newSeq]\n\t\t(if (empty? theSeq)\n\t\t\tnewSeq\n\t\t\t(compress (rest theSeq) (cons (first theSeq) (cons (first theSeq) newSeq))))) theSeq '())))", "problem": 32, "user": "4f1c2336535d64f60314647f"}, {"code": "(fn f[s]\r\n  ((fn [s, r]\r\n    (if (nil? s) \r\n      r\r\n      (recur (next s) (conj r (first s) (first s)))\r\n    )\r\n  ) s [])\r\n)", "problem": 32, "user": "4f245d77e4b0d66497709feb"}, {"code": "#(reduce (fn [x r] (conj x r r)) [] %)", "problem": 32, "user": "4eb02674535d7eef30807338"}, {"code": "(fn [coll]\n  (apply concat (map #(repeat 2 %) coll)))", "problem": 32, "user": "4f1abbfb535d64f60314646e"}, {"code": "#(interleave % %)", "problem": 32, "user": "4f251302e4b0d66497709ff0"}, {"code": "(fn [xs] (apply concat (map #(take 2 (repeat %)) xs)))", "problem": 32, "user": "4e4ea0f6535dc968683fc4e6"}, {"code": "(fn [x] (apply concat (map (fn [x] (repeat 2 x)) x)))", "problem": 32, "user": "4ee88f29535d93acb0a66882"}, {"code": "#(interleave % %)", "problem": 32, "user": "4f1684c7535d64f60314644b"}, {"code": "(fn [lst]\n  (mapcat (fn [x] [x x]) lst))", "problem": 32, "user": "4f032cb1535dcb61093f6a70"}, {"code": "#(interleave % %)", "problem": 32, "user": "4efd8b67535de96065cf5085"}, {"code": ";#(reduce (fn [coll1 x] (conj coll1 x x)) [] %)\n#(interleave % %)", "problem": 32, "user": "4f18677d535d64f603146459"}, {"code": ";#(sort (concat % %)) ;full\u00f6sning\r\n\r\n;(fn [xs]\r\n;  (loop [xs xs\r\n;         nyxs '()]\r\n;    (if (empty? xs)\r\n;      (reverse nyxs)\r\n;      (recur (rest xs) (conj nyxs (first xs) (first xs))))))\r\n\r\n#(interleave % %)", "problem": 32, "user": "4f07c8c3535dcb61093f6c2d"}, {"code": "mapcat #(conj [] % %)", "problem": 32, "user": "4e8ad247535d65386fec2111"}, {"code": "(fn[l] (apply concat (map (fn[n] [n n]) l)))", "problem": 32, "user": "4f28d266e4b0d6649770a01c"}, {"code": "(fn [s] (mapcat #(vector % %) s))", "problem": 32, "user": "4eb9d8f8535dfed6da9c6d61"}, {"code": "(fn [s] \n  (loop [s s acc []]\n    (if (empty? s)\n      acc\n      (recur (rest s) (conj acc (first s) (first s))))))", "problem": 32, "user": "4f26d6d9e4b0d6649770a007"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "4f294c48e4b0d6649770a023"}, {"code": "(fn ! [coll]\n(when-let [s (seq coll)]\n  (concat (cons (first s) (list (first s)))  (! (rest s)))))", "problem": 32, "user": "4f1d1299535d64f603146487"}, {"code": "(fn [s] (reverse (reduce #(conj (conj %1 %2) %2) '() s)))", "problem": 32, "user": "4f280840e4b0d6649770a010"}, {"code": "reduce (fn [ret arg] (conj ret arg arg)) []", "problem": 32, "user": "4f2965ffe4b0d6649770a029"}, {"code": "reduce (fn [item acc] (conj item acc acc)) []", "problem": 32, "user": "4f29cdc8e4b0d6649770a033"}, {"code": "(fn [sq] (mapcat #(list % %) sq))", "problem": 32, "user": "4f21838fe4b0d66497709fd2"}, {"code": "(fn dupl [l]\n  (if (empty? l) l \n    (reduce conj (dupl (rest l)) (take 2 (repeat (first l)\n)))))", "problem": 32, "user": "4f2a6169e4b0d6649770a03d"}, {"code": "#(interleave % %)", "problem": 32, "user": "4f2a35ace4b0d6649770a03a"}, {"code": "(fn [x] (reduce #(conj (conj %1 %2) %2) [] x))", "problem": 32, "user": "4f2c593ee4b0d6649770a053"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "4f230dfbe4b0d66497709fe0"}, {"code": "#(interleave % %)", "problem": 32, "user": "4f03688d535dcb61093f6aac"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "4f0478b0535dcb61093f6bcb"}, {"code": "(fn [l] (reverse (reduce #(cons %2 (cons %2 %1)) '() l)))", "problem": 32, "user": "4f0b0834535d0136e6c222fe"}, {"code": "mapcat (fn [x] [x x])", "problem": 32, "user": "4ea63794535d7eef308072e3"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "4e48b61d535dc968683fc4be"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "4f0f01c0535d0136e6c22329"}, {"code": "#(list* (reduce (fn [res x] (conj (conj res x) x)) [] %))", "problem": 32, "user": "4f2ef48be4b0d6649770a06c"}, {"code": "#(interleave % %)", "problem": 32, "user": "4edb314d535d10e5ff6f5317"}, {"code": "#(mapcat (fn [i] [i i]) %)", "problem": 32, "user": "4f301d02e4b0d6649770a072"}, {"code": "mapcat (fn [x] [x x])", "problem": 32, "user": "4f2893d0e4b0d6649770a019"}, {"code": "#(interleave % %)", "problem": 32, "user": "4e6a5a32535d8ccf87e9fed0"}, {"code": "(fn dup [s]\n  (lazy-seq\n    (when (seq s)\n      (cons (first s) (cons (first s) (dup (rest s)))))))", "problem": 32, "user": "4f28c979e4b0d6649770a01a"}, {"code": "(fn [x] (apply concat (map (fn [y] [y y]) x)))", "problem": 32, "user": "4f2de7e9e4b0d6649770a061"}, {"code": "(fn [l]\n  (apply concat (map #(list % %) l)))", "problem": 32, "user": "4f0364d5535dcb61093f6a9e"}, {"code": "#(interleave % %)", "problem": 32, "user": "4f2e0369e4b0d6649770a064"}, {"code": "(fn [s] \n    (reduce \n      (fn [a b] (conj (conj a b) b)) [] s\n))", "problem": 32, "user": "4f31519ae4b0d6649770a086"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "4ee1f2ba535d10e5ff6f535f"}, {"code": "mapcat (fn [x] [x x])", "problem": 32, "user": "4f2f6678e4b0d6649770a06e"}, {"code": "(fn dup [s]\n  (apply concat (map #(list % %) s)))", "problem": 32, "user": "4f2b0951e4b0d6649770a045"}, {"code": "#(interleave % %)", "problem": 32, "user": "4e8fb386535d65386fec2150"}, {"code": "#(mapcat (fn [x] [x x]) %)", "problem": 32, "user": "4f32a7f1e4b0d6649770a095"}, {"code": "(fn dup [s]\n  (if (seq s)\n    (cons (first s) (cons (first s) (dup (rest s))))))", "problem": 32, "user": "4f036d18535dcb61093f6abe"}, {"code": "#(interleave % %)", "problem": 32, "user": "4dc1bd76535d020aff1edf8d"}, {"code": "#(interleave % %)", "problem": 32, "user": "4eb9353f535dfed6da9c6d4e"}, {"code": "#(mapcat list % %)", "problem": 32, "user": "4ea84250535d7eef308072f5"}, {"code": "reduce #(conj % %2 %2) []", "problem": 32, "user": "4e36e647535deb9a81d77f36"}, {"code": "(fn [x] \n   (mapcat #(seq [% %]) x)\n)", "problem": 32, "user": "4f2582bae4b0d66497709ff6"}, {"code": "#(interleave % %)", "problem": 32, "user": "4f341320e4b0e243712b1eb4"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "4ef47f0f535dced4c769f235"}, {"code": "#(apply concat (for [x %1] [x x]))", "problem": 32, "user": "4f31ad57e4b0d6649770a089"}, {"code": "#(interleave % %)", "problem": 32, "user": "4f312c35e4b0d6649770a084"}, {"code": "#(interleave % %)", "problem": 32, "user": "4ef48422535dced4c769f236"}, {"code": "(fn [x] (reduce (fn [y z] (conj (conj y z) z)) [] x))", "problem": 32, "user": "4f34eb87e4b0e243712b1eba"}, {"code": "mapcat (partial repeat 2)", "problem": 32, "user": "4f378631e4b0e243712b1ed3"}, {"code": "mapcat #(repeat 2 %)", "problem": 32, "user": "4f3444b7e4b0e243712b1eb6"}, {"code": "#(interleave % %)", "problem": 32, "user": "4e526cc4535d302ef430da74"}, {"code": "(fn [s]\r\n  (reverse (reduce #(cons %2 (cons %2 %1)) nil s)))", "problem": 32, "user": "4f359c7ee4b0e243712b1ec4"}, {"code": "#(interleave % %)", "problem": 32, "user": "4f35e662e4b0e243712b1ec6"}, {"code": "(fn dup [coll]\n  (if (= coll '()) '()\n      (lazy-cat (list (first coll) (first coll)) (dup (rest coll)))))", "problem": 32, "user": "4f38d6bbe4b0e243712b1ee2"}, {"code": "(fn [x] (seq (reduce #(conj (conj %1 %2) %2) '[] (vec x))))", "problem": 32, "user": "4f2aff4de4b0d6649770a044"}, {"code": "#(interleave % %)", "problem": 32, "user": "4f2c2ccbe4b0d6649770a050"}, {"code": "#(loop [acc [] l (seq %)]\n  (if (empty? l)\n    acc\n    (let [x  (first l) y (rest l)]\n      (recur (conj (conj acc x) x) y))))", "problem": 32, "user": "4f141dee535d64f603146434"}, {"code": "mapcat #(repeat 2 %)", "problem": 32, "user": "4f39f902e4b0e243712b1efe"}, {"code": "(fn [coll]\n  (loop [c coll r []]\n    (if (= [] c) \n      r\n      (recur (rest c) \n        (conj (conj r (first c)) (first c))))))", "problem": 32, "user": "4f043bbd535dcb61093f6bb2"}, {"code": "#(reduce concat (map (fn [e] (list e e)) %))", "problem": 32, "user": "4f1bee08535d64f60314647e"}, {"code": "(fn [s]\n  (reduce into (map #(vec (list %1 %1)) s )))", "problem": 32, "user": "4f29eb2ae4b0d6649770a037"}, {"code": "(fn [lst] (apply concat [] (for [x lst] [x x])))", "problem": 32, "user": "4f36f5f2e4b0e243712b1ece"}, {"code": "(fn [z] (reverse (concat (reduce (fn [x y] (conj x y y)) '() z))))", "problem": 32, "user": "4f15de56535d64f603146448"}, {"code": "mapcat (partial repeat 2)", "problem": 32, "user": "4f329974e4b0d6649770a093"}, {"code": "#(reduce (fn [x y] (conj x y y)) [] % )", "problem": 32, "user": "4f3c0c0fe4b0e243712b1f3d"}, {"code": "#(interleave % %)", "problem": 32, "user": "4f3ca5a6e4b0e243712b1f53"}, {"code": "(partial mapcat (partial repeat 2))", "problem": 32, "user": "4ddbf54e535d02782fcbe9ff"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "4ec6f4ee535d6d7199dd36dc"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "4f06f953535dcb61093f6c1c"}, {"code": "(fn dup [xs] \n  (if (empty? xs)\n    '()\n    (list* (first xs) (first xs) (dup (rest xs)))))", "problem": 32, "user": "4f3cc2fbe4b0e243712b1f55"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "4e372223535deb9a81d77f39"}, {"code": "(fn [sq] \n   (mapcat list sq sq))", "problem": 32, "user": "4f17df72535d64f603146458"}, {"code": "(fn [x & acc]\n  (if (empty? x) acc\n      (recur (rest x) (concat acc [(first x) (first x)]))))", "problem": 32, "user": "4f343e60e4b0e243712b1eb5"}, {"code": "#(interleave % %)", "problem": 32, "user": "4f3fdf11e4b0e243712b1fa1"}, {"code": "#(interleave % %)", "problem": 32, "user": "4f3e5e87e4b0e243712b1f83"}, {"code": "#(mapcat (partial repeat 2) %)", "problem": 32, "user": "4e1b8106535d04ed9115e801"}, {"code": "(fn [s]\n  (apply concat (map vector s s)))", "problem": 32, "user": "4f107e0e535d64f60314641c"}, {"code": "(fn dup [s]\n  (if (empty? s)\n    ()\n    (cons (first s) (cons (first s) (dup (rest s))))))", "problem": 32, "user": "4f418eaee4b0d7d3c9f3fce9"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "4ef77edb535dced4c769f254"}, {"code": "(fn [s] (reverse (reduce #(conj %1 %2 %2) '() s)))", "problem": 32, "user": "4f3d83b5e4b0e243712b1f69"}, {"code": "(fn [x] (interleave x x))", "problem": 32, "user": "4f4003d9e4b0e243712b1fa5"}, {"code": "#(interleave % %)", "problem": 32, "user": "4f4274f2e4b0d7d3c9f3fd00"}, {"code": "mapcat (fn [x] [x x])", "problem": 32, "user": "4f426a7ae4b0d7d3c9f3fcff"}, {"code": "#(interleave % %)", "problem": 32, "user": "4f0da4e4535d0136e6c22319"}, {"code": "(fn f [s]\n    (if\n      (empty? s)\n      s\n      (let [x (first s)]\n          (cons x (cons x\n                  (f (rest s)))))))", "problem": 32, "user": "4f404dcee4b0e243712b1fb0"}, {"code": "mapcat #( cons % [%])", "problem": 32, "user": "4f065217535dcb61093f6c0c"}, {"code": "(fn [x]\n  (reduce concat (map (fn [item] (list item item)) x))\n  )", "problem": 32, "user": "4f3e05a8e4b0e243712b1f79"}, {"code": "(fn[col] (mapcat #(vector % %) col))", "problem": 32, "user": "4f3e2fbbe4b0e243712b1f7e"}, {"code": "reduce #(conj % %2 %2) []", "problem": 32, "user": "4f3976aee4b0e243712b1eea"}, {"code": "(fn [l] \n  (reduce \n    (fn [val next] (conj val next next))\n    []\n    l))", "problem": 32, "user": "4f4175ffe4b0d7d3c9f3fce8"}, {"code": "(fn [s] (mapcat #(repeat 2 (identity %)) s))", "problem": 32, "user": "4f282da7e4b0d6649770a013"}, {"code": "(fn [l] (sort (concat l l)))", "problem": 32, "user": "4f3c772de4b0e243712b1f4c"}, {"code": "mapcat (partial repeat 2)", "problem": 32, "user": "4f38b7d9e4b0e243712b1ee0"}, {"code": "(fn [x] (reverse (reduce (fn [a y] (conj a y y)) () x)))", "problem": 32, "user": "4f40f055e4b0e243712b1fc2"}, {"code": "#(apply concat (for [x %1] (list x x)))", "problem": 32, "user": "4f4544e1e4b0d56e7bb92b7a"}, {"code": "(partial mapcat (partial repeat 2))", "problem": 32, "user": "4f46bc41e4b0d56e7bb92ba5"}, {"code": "#(interleave % %)", "problem": 32, "user": "4f382eb7e4b0e243712b1ed9"}, {"code": "#(letfn [(worker [x n]\r\n           (if (empty? x)\r\n             n\r\n             (recur (rest x) (conj (conj n (first x)) (first x)))))]\r\n   (worker % []))", "problem": 32, "user": "4f474f43e4b0d56e7bb92bb7"}, {"code": "#(mapcat (fn [x] (list x x)) %)", "problem": 32, "user": "4f2baf1ae4b0d6649770a04c"}, {"code": "reduce (fn [acc i] (concat acc `(~i ~i))) []", "problem": 32, "user": "4f4319ebe4b0d7d3c9f3fd13"}, {"code": "(fn [lst]\n     (letfn [(double-it [lst1 lst2]\n               (if (empty? lst1)\n                 lst2\n                 (double-it (rest lst1)\n                            (list* (first lst1) (first lst1) lst2))))]\n       (reverse (double-it lst []))))", "problem": 32, "user": "4eb6f065535d7eef30807372"}, {"code": "(fn [x] (sort (concat x x)))", "problem": 32, "user": "4f2f7e87e4b0d6649770a06f"}, {"code": "#(reduce into (reverse (map (fn [x] (list x x))%)))", "problem": 32, "user": "4f4a34b2e4b0d56e7bb92c09"}, {"code": "(fn [seq]\n  (apply concat (map #(repeat 2 %) seq)))", "problem": 32, "user": "4f4ac35ae4b0d56e7bb92c18"}, {"code": "(fn [xs]\n  (apply concat\n    (for [x xs]\n      [x x])))", "problem": 32, "user": "4f49e869e4b0d56e7bb92c02"}, {"code": "reduce (fn [x y] (concat x (repeat 2 y))) '()", "problem": 32, "user": "4f2acb29e4b0d6649770a040"}, {"code": "#(interleave % %)", "problem": 32, "user": "4f4ba29ae4b03ad3f0c10c7a"}, {"code": "(fn [xs] (reduce (fn [x y] (conj x y y)) [] xs))", "problem": 32, "user": "4f3ec266e4b0e243712b1f8c"}, {"code": "#(interleave % %)", "problem": 32, "user": "4f46df00e4b0d56e7bb92bac"}, {"code": "(fn [ls] (->> ls (reduce #(conj %1 %2 %2) ()) (reverse)))", "problem": 32, "user": "4f03ba9c535dcb61093f6b58"}, {"code": "(fn dup\r\n      ([s] (if (empty? s)\r\n               nil\r\n               (cons (first s) (dup (rest s) (first s)))))\r\n      ([s n] (cons n (dup s)))\r\n      )", "problem": 32, "user": "4f3543eee4b0e243712b1ebd"}, {"code": "reduce #(conj (conj %1 %2) %2) []", "problem": 32, "user": "4ed2918f535d44c135fd68d8"}, {"code": "#(interleave % %)", "problem": 32, "user": "4f0404df535dcb61093f6b91"}, {"code": "(fn [x]\n  (sort (into (map identity x) x)))", "problem": 32, "user": "4f4c8faae4b03ad3f0c10c93"}, {"code": "(fn [s] \n  (reduce #(concat %1 (repeat 2 %2)) [] s))", "problem": 32, "user": "4f4a5ca6e4b0d56e7bb92c0f"}, {"code": "(fn [coll] (apply concat (map list coll coll)))", "problem": 32, "user": "4f4e7c01e4b03ad3f0c10cc9"}, {"code": "(fn [s]\n  (reduce concat\n          []\n          (map #(vector % %) s)))", "problem": 32, "user": "4f39c08ae4b0e243712b1efb"}, {"code": "#(interleave % %)", "problem": 32, "user": "4f482e3be4b0d56e7bb92bd4"}, {"code": "reduce #(concat %1 [%2 %2]) []", "problem": 32, "user": "4f4f0287e4b03ad3f0c10cd7"}, {"code": "(fn [lst] (reduce concat (map #(list %1 %1) lst)))", "problem": 32, "user": "4f4a8707e4b0d56e7bb92c12"}, {"code": "(fn dup-seq\n  ([chain] (dup-seq chain []))\n  ([chain result]\n    (if (empty? chain)\n        result\n        (dup-seq (rest chain)\n                 (concat result\n                   (replicate 2 (first chain)))))))", "problem": 32, "user": "4f4e4ecbe4b03ad3f0c10cbf"}, {"code": "#(reduce (fn [v i] (conj (conj v i) i)) [] %)", "problem": 32, "user": "4f3e6244e4b0e243712b1f85"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "4f4e91a9e4b03ad3f0c10cca"}, {"code": "(fn dupe[sequence]\n  (mapcat #(list % %) sequence))", "problem": 32, "user": "4f4c6b21e4b03ad3f0c10c8f"}, {"code": "#(interleave % %)", "problem": 32, "user": "4f4fac2ae4b03ad3f0c10ce5"}, {"code": "mapcat (fn [x] (list x x))", "problem": 32, "user": "4f047177535dcb61093f6bc6"}, {"code": "#(loop [x % y []]\n  (if (zero? (count x))\n      y\n      (recur (rest x) (conj y (first x) (first x)))))", "problem": 32, "user": "4f4bbda0e4b03ad3f0c10c7b"}, {"code": "#(interleave % %)", "problem": 32, "user": "4f50c414e4b03ad3f0c10d0d"}, {"code": "(fn [s] (mapcat (fn [a] [a a]) s))", "problem": 32, "user": "4f4fbed7e4b03ad3f0c10ce8"}, {"code": "(fn [x] (interleave x x))", "problem": 32, "user": "4f4ff5a8e4b03ad3f0c10cf3"}, {"code": "(partial reduce (fn [a e] (conj a e e)) [])", "problem": 32, "user": "4f4afb1fe4b0d56e7bb92c21"}, {"code": "(fn foo\n  ([list] (foo list []))\n  ([list nlist]\n    (if (empty? list)\n      nlist\n      (foo \n        (rest list) \n        (conj (conj nlist (first list)) (first list))))))", "problem": 32, "user": "4f4f08c8e4b03ad3f0c10cd8"}, {"code": "#(interleave % %)", "problem": 32, "user": "4db2f208535df7e46ed9b6c9"}, {"code": "(fn dup-seq [seq]\n  (mapcat (fn [x] [x x]) seq))", "problem": 32, "user": "4db8d37d535d1e037afb219c"}, {"code": "#(interleave % %)", "problem": 32, "user": "4f25c4c4e4b0d66497709ffc"}, {"code": "(fn [xs] (apply concat (map #(list % %) xs)))", "problem": 32, "user": "4f5030a9e4b03ad3f0c10cfd"}, {"code": "#(reduce concat [] (map (fn [x] [x x]) %))", "problem": 32, "user": "4f51e8a4e4b03ad3f0c10d2d"}, {"code": "(fn [l] (for [x (range 0 (* 2 (count l)))] (l (quot x 2)) ))", "problem": 32, "user": "4ed1f84f535d44c135fd68d3"}, {"code": "(fn [array](\n  mapcat #( repeat 2 %) array\n))", "problem": 32, "user": "4f542fd9e4b0a7574ea717db"}, {"code": "#(interleave % %)", "problem": 32, "user": "4f4ec77ae4b03ad3f0c10cd0"}, {"code": "#(interleave % %)", "problem": 32, "user": "4eb298c1535d7eef3080734b"}, {"code": "(fn [xs] (reverse (reduce #(cons %2 (cons %2 %1)) '() xs)))", "problem": 32, "user": "4ed60c9c535d10e5ff6f52dd"}, {"code": "(let [lift-singleton first]\n  (fn double-everything [coll]\n    (mapcat #(conj % (lift-singleton %))\n            (partition 1 coll))))", "problem": 32, "user": "4efa3d4b535dced4c769f270"}, {"code": "(fn f [x]\r\n   (if (nil? (next x))\r\n      (cons (first x) x)\r\n      (cons (first x)(cons (first x) (f (rest x))))\r\n   )\r\n)", "problem": 32, "user": "4f4aa932e4b0d56e7bb92c14"}, {"code": "(fn philm [x] (if (empty? x) ()\n                     (conj (philm (rest x)) (first x) (first x))))", "problem": 32, "user": "4f524d11e4b03ad3f0c10d34"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "4f554416e4b0a7574ea717f9"}, {"code": "(fn a [[x & s :as all]] (if (empty? all) all (cons x (cons x (a s)))))", "problem": 32, "user": "4f569218e4b0a7574ea71826"}, {"code": "(fn dup [x]\n  (if (not(empty? x))\n    (conj\n      (conj (dup (rest x)) (first x))\n      (first x)\n        )))", "problem": 32, "user": "4f566178e4b0a7574ea71820"}, {"code": "(partial \n  (fn [out coll]\n    (if (= '() coll)\n      (reverse out)\n      (recur (conj out (first coll) (first coll))\n             (rest coll))))\n  '())", "problem": 32, "user": "4eec82fe535d93acb0a668ae"}, {"code": "(fn [s] (apply concat (map (fn [i] [i i]) s)))", "problem": 32, "user": "4f5694cae4b0a7574ea71827"}, {"code": "#(interleave % %)", "problem": 32, "user": "4f567cdbe4b0a7574ea71824"}, {"code": "#(interleave % %)", "problem": 32, "user": "4f4e6d21e4b03ad3f0c10cc5"}, {"code": "#(mapcat vector % %)", "problem": 32, "user": "4f3c0734e4b0e243712b1f3c"}, {"code": "(fn [s]\n  (apply concat (map #(conj '() % %) s)))", "problem": 32, "user": "4f45c72be4b0d56e7bb92b8a"}, {"code": "#(interleave % %)", "problem": 32, "user": "4e8b1fa2535d65386fec2118"}, {"code": "#(mapcat vector % %)", "problem": 32, "user": "4f50d933e4b03ad3f0c10d11"}, {"code": "(fn [s] (mapcat #(repeat 2 %) s))", "problem": 32, "user": "4f29afc7e4b0d6649770a02e"}, {"code": "#(interleave % %)", "problem": 32, "user": "4f580a9fe4b0a7574ea71844"}, {"code": "(fn [x] (mapcat #(list % %) x))", "problem": 32, "user": "4f528bcde4b03ad3f0c10d3e"}, {"code": "#(for [x % y [x x]] y)", "problem": 32, "user": "4e1fe7f1535d04ed9115e810"}, {"code": "#(loop [out [] in %]\n  (if (empty? in) (reverse out)\n    (recur (cons (first in) (cons (first in) out)) (rest in))))", "problem": 32, "user": "4ea00469535d7eef3080729d"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "4f569a3ce4b0a7574ea71828"}, {"code": "#(mapcat (fn [x] [x x]) %)", "problem": 32, "user": "4f50be5de4b03ad3f0c10d0c"}, {"code": "(fn dup-seq [lat]\r\n  (reduce concat (map #(take 2 (repeat %)) lat)))", "problem": 32, "user": "4f500769e4b03ad3f0c10cf8"}, {"code": "(fn dup-seq [lat]\r\n  (reduce concat (map #(take 2 (repeat %)) lat)))", "problem": 32, "user": "4f4feb95e4b03ad3f0c10cf0"}, {"code": "#(interleave % %)", "problem": 32, "user": "4f4be1cae4b03ad3f0c10c81"}, {"code": "#(mapcat (fn [x] [x x]) %)", "problem": 32, "user": "4f58de86e4b0a7574ea7185b"}, {"code": "(fn [s]\n  (reduce\n    (fn [t s]\n      (conj t s s))\n    []\n    s))", "problem": 32, "user": "4f5c0549e4b0030a34fb2b1a"}, {"code": "#(mapcat (fn [x] [x x]) %)", "problem": 32, "user": "4f4a17ffe4b0d56e7bb92c05"}, {"code": "(fn dup [in]\n  (mapcat #(vector %1 %2) in in)\n)", "problem": 32, "user": "4e5fdd68535d8ccf87e9fe4f"}, {"code": "(fn dup [x] (reduce concat (map #(list % %) x)))", "problem": 32, "user": "4f461e57e4b0d56e7bb92b92"}, {"code": "#(interleave % %)", "problem": 32, "user": "4f5cc3b8e4b0030a34fb2b2b"}, {"code": "(fn [x] ( sort( concat x x)))", "problem": 32, "user": "4f57a153e4b0a7574ea7183a"}, {"code": "(fn d [s]\n  (when (seq s)\n    (let [f (first s)\n          r (rest s)]\n      (conj (conj (d r) f) f))))", "problem": 32, "user": "4f036fb3535dcb61093f6ac8"}, {"code": "#(interleave % %)", "problem": 32, "user": "4f54ecf1e4b0a7574ea717f0"}, {"code": "#(reduce (fn [a b] (concat a (list b b))) nil %)", "problem": 32, "user": "4e53bf5e535d8a8b8723a275"}, {"code": "#(loop [coll % rs []]\n  (if (seq coll)\n    (recur (rest coll) (conj rs (first coll) (first coll)))\n    rs))", "problem": 32, "user": "4f504739e4b03ad3f0c10d00"}, {"code": "(fn [x] (apply concat (map #(vector % %) x)))", "problem": 32, "user": "4dd9d299535d2dad7130b5dd"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "4f6010e7e4b0defedf855fa1"}, {"code": "(fn [s]\n  (interleave s s))", "problem": 32, "user": "4f604bdee4b0defedf855fa7"}, {"code": "#(interleave % %)", "problem": 32, "user": "4f614976e4b0defedf855fbb"}, {"code": "#(apply concat (map (partial repeat 2) %))", "problem": 32, "user": "4e85cda3535db62dc21a62f0"}, {"code": "(fn f [x] (reduce #(conj % %2 %2) [] x))", "problem": 32, "user": "4f547d2ce4b0a7574ea717e3"}, {"code": "reduce (fn [acc x] (conj acc x x)) []", "problem": 32, "user": "4e7f5a0b535db966e863cc41"}, {"code": "#(interleave % %)", "problem": 32, "user": "4f6160a7e4b0defedf855fbe"}, {"code": "#(interleave % %)", "problem": 32, "user": "4f565bebe4b0a7574ea7181e"}, {"code": "(fn [coll] (mapcat #(repeat 2 %) coll))", "problem": 32, "user": "4f5155a3e4b03ad3f0c10d1b"}, {"code": "(fn dup [s]\n  (interleave s s))", "problem": 32, "user": "4f611127e4b0defedf855fb4"}, {"code": "(fn dupl [x]\n(apply concat (map #(list % %) x)))", "problem": 32, "user": "4f04256d535dcb61093f6ba7"}, {"code": "(fn [s]\n  (interleave s s)\n)", "problem": 32, "user": "4f63777be4b0defedf855fe4"}, {"code": "(fn da [seq]\n  (if (empty? seq)\n    '()\n    (cons (first seq) (cons (first seq) (da (rest seq))))))", "problem": 32, "user": "4f559d2ce4b0a7574ea71808"}, {"code": "(fn a [s]\n  (apply concat (for [x s] [x x])))", "problem": 32, "user": "4f03fb59535dcb61093f6b89"}, {"code": "(partial mapcat #(list % %))", "problem": 32, "user": "4f651f66e4b07046d9f4ef3c"}, {"code": "#(interleave % %)", "problem": 32, "user": "4f58fe71e4b0a7574ea7185f"}, {"code": "(fn duplicate [lst]\r\n  (loop [inp (reverse lst) acc ()]\r\n    (if (empty? inp)\r\n      acc\r\n      (recur (rest inp) (apply conj acc (list (first inp) (first inp)))))))", "problem": 32, "user": "4f629697e4b0defedf855fd6"}, {"code": "#(interleave % %)", "problem": 32, "user": "4f65eec7e4b07046d9f4ef48"}, {"code": "reduce (fn [accum val] (sort (conj accum val val))) ()", "problem": 32, "user": "4f51697ae4b03ad3f0c10d22"}, {"code": "(fn [ls] (apply concat (map #(list % %) ls)))", "problem": 32, "user": "4f62b29ce4b0defedf855fd9"}, {"code": "(fn dcons [col]\n  (lazy-seq\n    (if-let [fel (first col)]\n      (into [fel fel] (dcons (rest col))))))", "problem": 32, "user": "4f61be97e4b0defedf855fc5"}, {"code": "#(interleave % %)", "problem": 32, "user": "4ed6c738535d10e5ff6f52e9"}, {"code": "#(interleave % %)", "problem": 32, "user": "4f442cdfe4b0d7d3c9f3fd34"}, {"code": "#(sort (take (* 2 (count %)) (cycle %)))", "problem": 32, "user": "4f4bd422e4b03ad3f0c10c7e"}, {"code": "(fn [x]\n  (interleave x x))", "problem": 32, "user": "4eb8ec4a535dfed6da9c6d4b"}, {"code": "#(interleave % %)", "problem": 32, "user": "4f6a36eee4b07046d9f4ef99"}, {"code": "#(interleave % %)", "problem": 32, "user": "4f6688d6e4b07046d9f4ef5d"}, {"code": "(fn rep [l]\n  (if (empty? (rest l))\n  (cons (first l) (cons (first l) '()))\n  (cons (first l) (cons (first l) (rep (rest l))))))", "problem": 32, "user": "4e568873535d8a8b8723a283"}, {"code": "#(interleave %1 %1)", "problem": 32, "user": "4ddc56e1535d02782fcbea04"}, {"code": "#(interleave % %)", "problem": 32, "user": "4df8644f535d04ed9115e778"}, {"code": "#(interleave % %)", "problem": 32, "user": "4ec53cef535d6d7199dd3686"}, {"code": "(fn [wo] (apply concat (map #(list % %) wo)))", "problem": 32, "user": "4f62ef0ce4b0defedf855fdc"}, {"code": "mapcat (partial repeat 2)", "problem": 32, "user": "4f4e147ae4b03ad3f0c10cb9"}, {"code": "#(mapcat list % %)", "problem": 32, "user": "4f6b4237e4b07046d9f4efa9"}, {"code": "(fn dup\n  [[head & more]]\n    (if head\n      (concat [head head] (dup more))\n      '()))", "problem": 32, "user": "4e6ac7a8535d8ccf87e9ff03"}, {"code": "#(apply mapcat list (repeat 2 %))", "problem": 32, "user": "4f608f0ee4b0defedf855faa"}, {"code": "(fn [s]\n  (loop [sx s, res ()]\n    (if (seq sx)\n        (recur (rest sx) (cons (first sx) (cons (first sx) res)))\n        (reverse res))))", "problem": 32, "user": "4ed2a31c535d44c135fd68db"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "4f4daa4ae4b03ad3f0c10cac"}, {"code": "(fn dup [x] (cond \n  ( = x ()) () \n  :else (conj (  conj(  dup(rest x)) (first x) )    (first x))\n  ))", "problem": 32, "user": "4f6e1c40e4b07046d9f4efd4"}, {"code": "(fn [col]\r\n  (reverse\r\n  (reduce \r\n    #(cons %2 (cons %2  %1))\r\n    '()\r\n    col\r\n  )\r\n)\r\n)", "problem": 32, "user": "4f6d9d7ee4b07046d9f4efcd"}, {"code": "#(reverse \r\n  (reduce \r\n    (fn [a b] \r\n      (cons b (cons b a)))\r\n  () %))", "problem": 32, "user": "4ef2da4f535dced4c769f224"}, {"code": "#(interleave % %)", "problem": 32, "user": "4f1bb9d8535d64f60314647d"}, {"code": "#(interleave % %)", "problem": 32, "user": "4f6a2ff2e4b07046d9f4ef98"}, {"code": "#(interleave % %)", "problem": 32, "user": "4f6fbb68e4b07046d9f4efeb"}, {"code": "(fn poo [[x & xs]] \n  (if (= xs nil)\n    [x x]\n    (cons x (cons x (poo xs)))))", "problem": 32, "user": "4f70183ee4b07046d9f4eff3"}, {"code": "(fn [xs] (mapcat #(list % %) xs))", "problem": 32, "user": "4f6845d2e4b07046d9f4ef74"}, {"code": "(fn [v] (reduce #(cons %2 (cons %2 %)) '() (reverse v)))", "problem": 32, "user": "4f69f34fe4b07046d9f4ef90"}, {"code": "#(interleave % %)", "problem": 32, "user": "4f68c485e4b07046d9f4ef7c"}, {"code": "(fn [s] (mapcat #(list %1 %1) s))", "problem": 32, "user": "4f4e978ae4b03ad3f0c10ccb"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "4f706cc3e4b07046d9f4eff7"}, {"code": "(fn [args] \n  (reduce #(conj %1 %2 %2) [] args))", "problem": 32, "user": "4f71f782e4b07046d9f4f018"}, {"code": "(fn duplicate [sq]\r\n  (reverse\r\n    (reduce (fn [coll x]\r\n              (if (empty? coll)\r\n                (list x x)\r\n                (cons x (cons x coll))))\r\n            []\r\n            sq)))", "problem": 32, "user": "4f71db68e4b07046d9f4f015"}, {"code": "#(interleave % %)", "problem": 32, "user": "4f724e56e4b07046d9f4f027"}, {"code": "(fn dup [coll]\n  (apply concat (map #(repeat 2 %) coll)))", "problem": 32, "user": "4f726dd2e4b07046d9f4f034"}, {"code": "(fn dup [seq]\n  (if (empty? seq) '()\n      (let [item (first seq)\n            subsoln (dup (rest seq))]\n        (cons item (cons item subsoln)))))", "problem": 32, "user": "4f70afb8e4b07046d9f4effb"}, {"code": "#(mapcat list % %)", "problem": 32, "user": "4f734e93e4b07046d9f4f043"}, {"code": "#(interleave % %)", "problem": 32, "user": "4f71ba6ee4b07046d9f4f012"}, {"code": "#(interleave % %)", "problem": 32, "user": "4f725201e4b07046d9f4f02f"}, {"code": "reduce #(concat %1 [%2 %2]) []", "problem": 32, "user": "4f713878e4b07046d9f4f00a"}, {"code": "mapcat (fn [o] (list o o))", "problem": 32, "user": "4f7207d3e4b07046d9f4f019"}, {"code": "#(interleave % %)", "problem": 32, "user": "4f6f777de4b07046d9f4efe5"}, {"code": "#(reduce concat (map (partial repeat 2) %))", "problem": 32, "user": "4dafba62838c986e7473b5f7"}, {"code": "(fn [sequence]\n  (sort (concat sequence sequence)))", "problem": 32, "user": "4f74fe77e4b0fbe0118ec552"}, {"code": "#(interleave % %)", "problem": 32, "user": "4e6961f0535d8ccf87e9fe9b"}, {"code": "(fn[squ]\n  (loop [sq squ\n         repeated []]\n    (if (empty? sq)\n      repeated\n      (recur (rest sq) (conj repeated (first sq) (first sq))))))", "problem": 32, "user": "4f6236abe4b0defedf855fcd"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "4f725466e4b07046d9f4f030"}, {"code": "(fn [x] (interleave x x))", "problem": 32, "user": "4f7b2cb5e4b06e829148e19f"}, {"code": "(fn [c] (mapcat #(repeat 2 %) c))", "problem": 32, "user": "4e89dbce535d3e98b8023283"}, {"code": "#(interleave % %)", "problem": 32, "user": "4f7b6f12e4b06e829148e1a5"}, {"code": "(fn [coll] (reduce concat (map #(repeat 2 %) coll)))", "problem": 32, "user": "4f2a7174e4b0d6649770a03e"}, {"code": "#(sort (concat % %))", "problem": 32, "user": "4f7d5328e4b06e829148e1bf"}, {"code": "(fn [l] \n  (reduce (fn [x y] (concat x y)) (map (fn [x] \n       (list x x) \n  ) l))\n)", "problem": 32, "user": "4f7b6b90e4b06e829148e1a4"}, {"code": "(fn [l]\n  (apply concat (map #(repeat 2 %) l)))", "problem": 32, "user": "4f7e29dde4b06e829148e1ca"}, {"code": "#(reduce\n  (fn [coll el] (conj coll el el))\n  (vector)\n  %)", "problem": 32, "user": "4f7e33a6e4b06e829148e1cb"}, {"code": "(fn f [datas]\n  ((fn [data rs]\n    (if (empty? data) rs\n      (recur (rest data) \n        (conj (conj rs (first data)) (first data) \n          )))) (reverse datas) '()))", "problem": 32, "user": "4f3242bae4b0d6649770a08f"}, {"code": "(fn [c]\n  (apply concat (map #(list % %) c)))", "problem": 32, "user": "4f7f0827e4b06e829148e1d5"}, {"code": "#(interleave % %)", "problem": 32, "user": "4f7869c2e4b0fbe0118ec589"}, {"code": "mapcat (fn [j] (take 2 (cycle [j])))", "problem": 32, "user": "4f7fc9a1e4b033992c121bee"}, {"code": "(fn inter \n  ([lst]\n    (inter\n      (rest lst)\n      (cons (first lst) lst)))\n  ([orig lst]\n    (if (empty? orig) (sort lst)\n    (inter\n      (rest orig)\n      (cons (first orig) lst)))))", "problem": 32, "user": "4f7d91e6e4b06e829148e1c3"}, {"code": "(fn [xs] (interleave xs xs))", "problem": 32, "user": "4f1ae082535d64f603146470"}, {"code": "(fn [x] \n  (mapcat #(list % %) x))", "problem": 32, "user": "4f82e14be4b033992c121c0c"}, {"code": "#(apply concat (for [x %] [x x]))", "problem": 32, "user": "4f8345c6e4b033992c121c1b"}, {"code": "(fn [coll]\n  (mapcat #(repeat 2 %) coll))", "problem": 32, "user": "4f83e712e4b033992c121c25"}, {"code": "mapcat #(list % % )", "problem": 32, "user": "4f83ee95e4b033992c121c26"}, {"code": "(fn [x] (interleave x x))", "problem": 32, "user": "4dca56b6535d5973398f9287"}, {"code": ";; Used some internet searches to figure this one\n;; out.  Worth it.  Learned a lot about sequence\n;; operators.\n(fn duplicate-sequence-items[seq]\n  \"Duplicate each item of a sequence\"\n  (reduce concat (map #(take 2 (repeat %)) seq)))", "problem": 32, "user": "4f831fd3e4b033992c121c17"}, {"code": "(fn [coll]\r\n   (loop [f (first coll)\r\n          r (rest coll)\r\n  \t  result []]\r\n      (if (nil? f)\r\n\t    result\r\n\t\t(recur (first r) (rest r) (conj result f f)))))", "problem": 32, "user": "4f60ed88e4b0defedf855fb2"}, {"code": "(fn [coll] (mapcat #(repeat 2 %1) coll))", "problem": 32, "user": "4ec5569f535d6d7199dd3695"}, {"code": "(fn dup [v] \n  (if (empty? v)\n    '()\n    (conj (conj (dup (rest v)) (first v)) (first v))\n  )\n)", "problem": 32, "user": "4f84400de4b033992c121c2e"}, {"code": "#(interleave % %)", "problem": 32, "user": "4ea5727f535d7eef308072d4"}, {"code": "(fn doubleCons [seq]\n  (let [one (first seq)]\n  (if (empty? seq)\n    nil\n    (cons one (cons one (doubleCons (rest seq)))))))", "problem": 32, "user": "4f761a78e4b0fbe0118ec56c"}, {"code": "#(reverse (reduce \n  (fn [list elem]\n    (cons elem (cons elem list)))\n  '()\n  %))", "problem": 32, "user": "4f28eb85e4b0d6649770a01d"}, {"code": "#(interleave % %)", "problem": 32, "user": "4f8592e6e4b033992c121c47"}, {"code": "#(apply concat (map (fn [x] [x x]) %))", "problem": 32, "user": "4f85b7b5e4b033992c121c49"}, {"code": "(fn [x] (apply concat (map #(list % %) x)))", "problem": 32, "user": "4dc78527535d8a4b2fd7428f"}, {"code": "#(interleave % %)", "problem": 32, "user": "4f7c2ac4e4b06e829148e1ad"}, {"code": "(fn [ xs ]\r\n  (reduce concat (map #(repeat 2 %) xs ) )\r\n)", "problem": 32, "user": "4e81e93d535db62dc21a62bf"}, {"code": "(fn [x]\n    (apply concat \n        (map \n            (fn [e] (take 2 (repeat e)))\n            x)))", "problem": 32, "user": "4f85ef29e4b033992c121c4d"}, {"code": "#(interleave % %)", "problem": 32, "user": "4f7f9665e4b033992c121bea"}, {"code": "(fn dup [coll]\n  (when-let [[f & r] (seq coll)]\n    ;;if r is nil return f\n    ;;else add double f to dup(r)\n    (concat (list f f) (dup r))\n    ))", "problem": 32, "user": "4f82f1b9e4b033992c121c0f"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "4f83665ee4b033992c121c1c"}, {"code": "(fn dupse [coll]\n  (lazy-seq\n    (when-let [s (seq coll)]\n      (let[fs (first s)]\n        (cons fs\n              (cons fs (dupse (rest s))))))))", "problem": 32, "user": "4f7b3d53e4b06e829148e1a0"}, {"code": "(fn [x]\n  (interleave x x))", "problem": 32, "user": "4f7ab8c7e4b06e829148e19c"}, {"code": "#(interleave % %)", "problem": 32, "user": "4f7d25b4e4b06e829148e1ba"}, {"code": "(fn [s] (apply concat (map #(repeat 2 %) s)))", "problem": 32, "user": "4ed2b337535d44c135fd68de"}, {"code": "(fn [x] (reverse (reduce #(cons %2 (cons %2 %1)) '() x)))", "problem": 32, "user": "4f88942be4b033992c121c6a"}, {"code": "#(interleave % %)", "problem": 32, "user": "4f88ae35e4b033992c121c6d"}, {"code": "#(interleave % %)", "problem": 32, "user": "4f8939ace4b033992c121c79"}, {"code": "#(interleave % %)", "problem": 32, "user": "4f7c4eb7e4b06e829148e1af"}, {"code": "(comp\n #(reverse\n   (reduce (fn [a b]\n             (conj a b b))\n           '() %)))", "problem": 32, "user": "4f6c6d69e4b07046d9f4efba"}, {"code": "(fn [s] (interleave s s))", "problem": 32, "user": "4f8b56dae4b02e764a0a517e"}, {"code": "(fn [x]\n  (reduce #(concat %1 (repeat 2 %2)) '() x))", "problem": 32, "user": "4f8aa2f9e4b02e764a0a516f"}, {"code": "#(interleave % %)", "problem": 32, "user": "4ecdf94a535d23f03622770b"}, {"code": "(fn dup [x] (if (empty? x) '() (cons (first x) (cons (first x) (dup (rest x))))))", "problem": 32, "user": "4f8b20fce4b02e764a0a5178"}, {"code": "mapcat #(repeat 2 %)", "problem": 32, "user": "4f8aa1c1e4b02e764a0a516e"}, {"code": "(fn [l] (reduce #(into %1 [%2 %2]) '[] l))", "problem": 32, "user": "4f8ab084e4b02e764a0a5171"}, {"code": "(fn b[x]\n  (loop [xx x\n         se ()]\n     (do (println xx se)\n     (if (empty? xx)\n         (reverse se)\n     (recur (rest xx) (conj (conj se (first xx)) (first xx)))))))", "problem": 32, "user": "4f891abde4b033992c121c77"}, {"code": "(fn [x] (apply concat (map #(repeat 2 %) x)))", "problem": 32, "user": "4f8bbb27e4b02e764a0a5182"}, {"code": "reduce (fn [x y] (conj x y y)) '[]", "problem": 32, "user": "4f748b54e4b044e54cd9a8fa"}, {"code": "(fn [x] (interleave x x))", "problem": 32, "user": "4f410b63e4b0e243712b1fc5"}, {"code": "#(interleave % %)", "problem": 32, "user": "4f882b4be4b033992c121c60"}, {"code": "#(reverse\n  (reduce \n    (fn [n m] (conj (conj n m) m))\n    '()\n    %1\n  )\n)", "problem": 32, "user": "4f8ea1f7e4b0d4e659cdde69"}, {"code": "(fn [x]\n  (mapcat #(list % %) x))", "problem": 32, "user": "4f90e238e4b0dcca54ed6c94"}, {"code": "(fn [l] (reduce concat (map #(list % %) l)))", "problem": 32, "user": "4f8c5f4fe4b02e764a0a5198"}, {"code": "(comp reverse (partial reduce #(conj (conj %1 %2) %2) '()))", "problem": 32, "user": "4f91a38ae4b0dcca54ed6c9f"}, {"code": "mapcat #(repeat 2 %)", "problem": 32, "user": "4f9120d8e4b0dcca54ed6c96"}, {"code": "mapcat #(vector % %)", "problem": 32, "user": "4f92709de4b0dcca54ed6cad"}, {"code": "#(reverse (reduce (fn [acc x] (conj acc x x)) '() %))", "problem": 32, "user": "4f73536ee4b07046d9f4f044"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "4f6511eee4b07046d9f4ef3a"}, {"code": "(fn [s]\n  (apply concat \n         (map #(list % %) s)))", "problem": 32, "user": "4f91fd31e4b0dcca54ed6ca8"}, {"code": "(fn d [xs]\n  (if (empty? (rest xs))\n        [(first xs) (first xs)]\n        (lazy-cat [(first xs) (first xs)]\n                  (d (rest xs)))))", "problem": 32, "user": "4f7250cce4b07046d9f4f02a"}, {"code": "#(interleave % %)", "problem": 32, "user": "4e778d36535d324fb2983d71"}, {"code": "(fn [n] (loop [x n y (apply vector nil)] (if (empty? x) (reverse y) (recur (pop x) \n(conj (conj y (last x)) (last x))))))", "problem": 32, "user": "4f9336ece4b0dcca54ed6cb7"}, {"code": "reduce (fn [x y] (conj (conj x y) y)) []", "problem": 32, "user": "4f8ac2bde4b02e764a0a5172"}, {"code": "#(interleave % %)", "problem": 32, "user": "4f9597e0e4b0dcca54ed6cd4"}, {"code": "#(interleave % %)", "problem": 32, "user": "4f727023e4b07046d9f4f035"}, {"code": "(fn dupe [x] (if (empty? x) '()\n  (conj (dupe (rest x)) (first x) (first x))))", "problem": 32, "user": "4f42ae16e4b0d7d3c9f3fd09"}, {"code": ";(fn f [[x & y]] \n;  (if (nil? y) \n;    [x x] \n;    (into [x x] (f y))))\n\n#(interleave % %)", "problem": 32, "user": "4f9510b5e4b0dcca54ed6cc7"}, {"code": "(fn [s] (reduce concat () (map #(list % %) s)))", "problem": 32, "user": "4f951375e4b0dcca54ed6cc8"}, {"code": "reduce #(conj (conj %1 %2) %2) []", "problem": 32, "user": "4f73f78de4b044e54cd9a8f3"}, {"code": "(fn double-seq [x]\n  (if (empty? x)\n    []\n    (concat \n      [(first x) (first x)]\n      (double-seq (rest x)))))", "problem": 32, "user": "4f20c040e4b0d66497709fcb"}, {"code": "(comp (partial reduce #(into %1 [%2 %2]) []))", "problem": 32, "user": "4f3fb586e4b0e243712b1f9c"}, {"code": "#(interleave % %)", "problem": 32, "user": "4f890488e4b033992c121c76"}, {"code": "mapcat #(vector % %)", "problem": 32, "user": "4dc21233535d020aff1edf92"}, {"code": "#(interleave % %)", "problem": 32, "user": "4f954dbce4b0dcca54ed6ccd"}, {"code": "(fn [coll] (mapcat #(list % %) coll))", "problem": 32, "user": "4f969214e4b0dcca54ed6cdd"}, {"code": "#(interleave % %)", "problem": 32, "user": "4f9754d4e4b0dcca54ed6ce9"}, {"code": "#(mapcat (fn [x] (list x x)) %)", "problem": 32, "user": "4f17aa97535d64f603146456"}, {"code": "(fn [arg]\n  (loop [coll arg result ()]\n    (if (empty? coll) result\n        (recur (rest coll) (concat result (list (first coll) (first coll)))))))", "problem": 32, "user": "4f98ead0e4b0dcca54ed6cf8"}, {"code": "#(interleave % %)", "problem": 32, "user": "4f991ec1e4b0dcca54ed6cfb"}, {"code": "apply (fn m [one & more]\n  (if (nil? more) \n         (list one one)\n         (cons one (cons one (apply m more)))))", "problem": 32, "user": "4f9174d0e4b0dcca54ed6c9b"}, {"code": "mapcat (juxt identity identity)", "problem": 32, "user": "4f9920a3e4b0dcca54ed6cfc"}, {"code": "#(loop [acc '() left %]\n    (if (empty? left)\n      acc\n      (let [n (first left)]\n        (recur (concat acc (list n n)) (rest left)))))", "problem": 32, "user": "4f9b3532e4b0dcca54ed6d13"}, {"code": "#(reduce (fn [s x] (conj s x x)) [] %)", "problem": 32, "user": "4f97d8f3e4b0dcca54ed6ced"}, {"code": "#(interleave % %)", "problem": 32, "user": "4f91f5b1e4b0dcca54ed6ca7"}, {"code": "#(interleave % %)", "problem": 32, "user": "4f9d53f3e4b0dcca54ed6d21"}, {"code": "(fn [xs]\n    (reduce concat\n      (map #(list % %) xs)))", "problem": 32, "user": "4f9c7b0fe4b0dcca54ed6d1c"}, {"code": "#(mapcat\n  (fn lol [x] [x x])\n  %)", "problem": 32, "user": "4f8db862e4b02e764a0a51b2"}, {"code": "#(interleave %1 %1)", "problem": 32, "user": "4f99ae4ae4b0dcca54ed6d00"}, {"code": "#(interleave % %)", "problem": 32, "user": "4ee77f15535d93acb0a66868"}, {"code": "#(interleave % %)", "problem": 32, "user": "4f2b1893e4b0d6649770a047"}, {"code": "(fn [coll]\n           (apply concat (map #(repeat 2 %) coll)))", "problem": 32, "user": "4f3cd535e4b0e243712b1f56"}, {"code": "(fn [li] (interleave li li))", "problem": 32, "user": "4f9aa2a6e4b0dcca54ed6d0c"}, {"code": "#(interleave % %)", "problem": 32, "user": "4f9d87fce4b0dcca54ed6d24"}, {"code": "(fn [seq]\n  (reduce into (map #(vector % %) seq)))", "problem": 32, "user": "4f71347ae4b07046d9f4f009"}, {"code": "#(interleave % %)", "problem": 32, "user": "4f9fe2b9e4b0dcca54ed6d40"}, {"code": "#(interleave % %)", "problem": 32, "user": "4f9c4080e4b0dcca54ed6d1a"}, {"code": "(fn [s]\n((fn [r acc]\n  (if (not (seq r)) acc (recur (rest r) (conj acc (first r) (first r))))) s []))", "problem": 32, "user": "4fa1183fe4b0dcca54ed6d57"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "4f9d8083e4b0dcca54ed6d23"}, {"code": "#(interleave % %)", "problem": 32, "user": "4fa03445e4b0dcca54ed6d45"}, {"code": "(partial mapcat #(repeat 2 %))", "problem": 32, "user": "4f969a66e4b0dcca54ed6cde"}, {"code": "#(mapcat list % %)", "problem": 32, "user": "4db3393e535df7e46ed9b6cc"}, {"code": "(fn [v] (reduce #(conj %1 %2 %2) [] v))", "problem": 32, "user": "4f465096e4b0d56e7bb92b9a"}, {"code": "(fn [x] (reverse (reduce #(cons %2 (cons %2 %1)) '() x)))", "problem": 32, "user": "4f5595d4e4b0a7574ea71805"}, {"code": "(fn [coll] (interleave coll coll))", "problem": 32, "user": "4fa2fa5ee4b081705acca186"}, {"code": "(fn [coll] (interleave coll coll))", "problem": 32, "user": "4fa2b650e4b0dcca54ed6d6a"}, {"code": "(fn [x] (reduce #(concat %1 (repeat 2 %2)) '() x))", "problem": 32, "user": "4fa0b333e4b0dcca54ed6d50"}, {"code": "(fn [coll] (reduce concat [] (map #(list % %) coll)))", "problem": 32, "user": "4fa39b3ee4b081705acca191"}, {"code": "(fn [coll]\n  (mapcat #(vector % %) coll))", "problem": 32, "user": "4f9f7daae4b0dcca54ed6d37"}, {"code": "reduce #(conj (conj %1 %2) %2) []", "problem": 32, "user": "4fa30027e4b081705acca187"}, {"code": "(partial mapcat (fn [x] [x x]))", "problem": 32, "user": "4fa4ef2ee4b081705acca1a9"}, {"code": "(partial mapcat #(repeat 2 %))", "problem": 32, "user": "4fa17b00e4b0dcca54ed6d5f"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "4fa5406fe4b081705acca1ac"}, {"code": "(fn [s] (apply concat (map #(list % %) s)))", "problem": 32, "user": "4fa3f91fe4b081705acca196"}, {"code": "#(interleave % %)", "problem": 32, "user": "4fa0a4b1e4b0dcca54ed6d4f"}, {"code": "(fn my-duplicate\n  ([[x & xrest]]\n     (my-duplicate [x x] xrest))\n  ([coll [x & xrest]]\n     (if (nil? xrest)\n       (conj coll x x)\n       (recur (conj coll x x) xrest))))", "problem": 32, "user": "4fa27e18e4b0dcca54ed6d68"}, {"code": "#(interleave %  %)", "problem": 32, "user": "4f9ff06ce4b0dcca54ed6d41"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "4f40ccd9e4b0e243712b1fc0"}, {"code": "#(concat (interleave % %))", "problem": 32, "user": "4fa5ddfde4b081705acca1b1"}, {"code": "reduce #(conj (conj %1 %2) %2) []", "problem": 32, "user": "4f96a5e8e4b0dcca54ed6cdf"}, {"code": "#(interleave % %)", "problem": 32, "user": "4fa58500e4b081705acca1ae"}, {"code": "(fn [coll] (interleave coll coll) )", "problem": 32, "user": "4e5fb634535d8ccf87e9fe4a"}, {"code": "#(reverse\n  (loop [todo % acc ()]\n        (if (empty? todo) acc\n            (let [[head & tail] todo]\n                 (recur tail\n                       (cons head (cons head acc)))))))", "problem": 32, "user": "4fa6d532e4b081705acca1be"}, {"code": "(partial reduce #(conj % %2 %2) [])", "problem": 32, "user": "4f9acea6e4b0dcca54ed6d10"}, {"code": "#(interleave % %)", "problem": 32, "user": "4fa11204e4b0dcca54ed6d56"}, {"code": "(fn [x] (interleave x x))", "problem": 32, "user": "4fa820fde4b081705acca1ce"}, {"code": "(fn double [x]\n  (if (= x '())\n    '()\n    (conj (double (rest x)) (first x) (first x))\n  )\n)", "problem": 32, "user": "4fa7ef54e4b081705acca1ca"}, {"code": "#(interleave % %)", "problem": 32, "user": "4fa96e80e4b081705acca1df"}, {"code": "#(mapcat(partial take 2) (map repeat %))", "problem": 32, "user": "4f9970b3e4b0dcca54ed6cfd"}, {"code": "(fn [x] (apply concat (map #(list % %) x)))", "problem": 32, "user": "4fa069c3e4b0dcca54ed6d4a"}, {"code": "(fn [lst]\n  (apply concat (map (fn [i] (list i i)) lst)))", "problem": 32, "user": "4faa9593e4b081705acca1f9"}, {"code": "#(interleave % %)", "problem": 32, "user": "4f68a9bbe4b07046d9f4ef79"}, {"code": "(fn [x] (mapcat #(repeat 2 %) x))", "problem": 32, "user": "4fa99ee1e4b081705acca1e4"}, {"code": "(fn [x]\n  (let [dupx (map #(conj [] % %) x)]\n    (reduce #(conj % (first %2) (second %2)) []  dupx)))", "problem": 32, "user": "4fab943ee4b081705acca219"}, {"code": "(fn [xs] (mapcat #(replicate 2 %) xs))", "problem": 32, "user": "4ebbb6bc535dfed6da9c6d71"}, {"code": "mapcat (fn [element] (repeat 2 element))", "problem": 32, "user": "4f4662f9e4b0d56e7bb92b9d"}, {"code": "#(apply concat (map (fn [x] [x x]) %1))", "problem": 32, "user": "4fabb1dce4b081705acca21a"}, {"code": "(fn foo [s] (interleave s s))", "problem": 32, "user": "4facd2fae4b081705acca22f"}, {"code": "(fn dup [s]\n  (if (= () s)\n\t ()\n     (cons (first s) (cons (first s) (dup (rest s))))\n\t)\n)", "problem": 32, "user": "4faacc04e4b081705acca201"}, {"code": "#(interleave % %)", "problem": 32, "user": "4e6a4541535d8ccf87e9feb8"}, {"code": "#(interleave % %)", "problem": 32, "user": "4fad20cfe4b081705acca235"}, {"code": "(fn [c] (interleave c c))", "problem": 32, "user": "4fab31a8e4b081705acca215"}, {"code": "#(interleave % %)\n;(fn [x]\n;  (reduce #(concat %1 (list %2 %2)) '() x))", "problem": 32, "user": "4f82ed48e4b033992c121c0e"}, {"code": "(partial mapcat #(list % %))", "problem": 32, "user": "4fac1d77e4b081705acca223"}, {"code": "#(mapcat (fn [n] [n n]) %)", "problem": 32, "user": "4f8dc9dce4b02e764a0a51b6"}, {"code": "(fn dup [coll]\r\n  (if (empty? coll)\r\n    (list)\r\n    (conj (dup (rest coll)) (first coll) (first coll))))", "problem": 32, "user": "4facff22e4b081705acca230"}, {"code": "(fn [xs] (reverse (loop [xxs xs acc nil]\n  (if (empty? xxs) acc\n      (recur (rest xxs) (conj acc (first xxs) (first xxs)))))))", "problem": 32, "user": "4fadbc3fe4b081705acca23f"}, {"code": "reduce #(into %1 [%2 %2]) []", "problem": 32, "user": "4faccddae4b081705acca22e"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "4fae258de4b081705acca246"}, {"code": "#(mapcat (partial repeat 2) %1)", "problem": 32, "user": "4fad33e8e4b081705acca236"}, {"code": "#(interleave %1 %1)", "problem": 32, "user": "4fa67030e4b081705acca1b7"}, {"code": "#(interleave % %)", "problem": 32, "user": "4f6fd91ae4b07046d9f4efed"}, {"code": "#(loop [in % seq []]\n  (if (= in '())\n  seq\n  (recur (rest in)\n    (conj (conj seq (first in)) (first in)))))", "problem": 32, "user": "4faec810e4b081705acca24e"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "4fad77a6e4b081705acca23a"}, {"code": "#(interleave % %)", "problem": 32, "user": "4fab259ae4b081705acca212"}, {"code": "#(interleave % %)", "problem": 32, "user": "4f85a75ce4b033992c121c48"}, {"code": "(fn [coll]\n  (reduce #(concat %1 (vector %2 %2))\n          [] coll))", "problem": 32, "user": "4f9a7dc0e4b0dcca54ed6d0b"}, {"code": "#(interleave % %)", "problem": 32, "user": "4f8386c5e4b033992c121c1d"}, {"code": "(partial mapcat (fn [x] [x x]))", "problem": 32, "user": "4e8338d6535db62dc21a62d3"}, {"code": "(fn [s] (interleave s s))", "problem": 32, "user": "4fb2101ce4b081705acca284"}, {"code": "#(reverse (reduce (fn [memo a] (cons a (cons a memo))) '() %))", "problem": 32, "user": "4f9a0064e4b0dcca54ed6d03"}, {"code": "(fn [s] (mapcat #(list % %) s))", "problem": 32, "user": "4fa982fae4b081705acca1e0"}, {"code": "#(apply concat (map (partial repeat 2) %1))", "problem": 32, "user": "4fb4099be4b081705acca2a9"}, {"code": "#(interleave % %)", "problem": 32, "user": "4fb069b1e4b081705acca266"}, {"code": "#(reduce (fn [x y] (concat x (repeat 2 y) )) [] %)", "problem": 32, "user": "4faf2f4ce4b081705acca251"}, {"code": "(fn [s] (apply concat (map #(replicate 2 %) s)))", "problem": 32, "user": "4f4d0a52e4b03ad3f0c10c9d"}, {"code": "mapcat #(repeat 2 %)", "problem": 32, "user": "4fb3b865e4b081705acca2a2"}, {"code": "(fn [xs] (mapcat #(list %1 %1) xs))", "problem": 32, "user": "4fa6a491e4b081705acca1bc"}, {"code": "#(interleave % %)", "problem": 32, "user": "4fa9da14e4b081705acca1e7"}, {"code": "(fn blah [lst]\n  (if (empty? lst)\n    '()\n    (conj (blah (rest lst)) (first lst) (first lst))))", "problem": 32, "user": "4fab0c0ae4b081705acca20d"}, {"code": "(fn [coll] (interleave coll coll))", "problem": 32, "user": "4faa7f87e4b081705acca1f6"}, {"code": "(fn dup2\n  [coll]\n  (if-let [x (first coll)]\n    (concat [x x] (dup2 (rest coll)))\n    nil))", "problem": 32, "user": "4f6bab49e4b07046d9f4efb1"}, {"code": "(fn [xs] (interleave xs xs))", "problem": 32, "user": "4fb510b5e4b081705acca2b8"}, {"code": "#(interleave % %)", "problem": 32, "user": "4fb3fec7e4b081705acca2a7"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "4e83bb61535db62dc21a62dd"}, {"code": "reduce #(conj % %2 %2) []", "problem": 32, "user": "4fb54e50e4b081705acca2bb"}, {"code": "#(interleave % %)", "problem": 32, "user": "4fabbb97e4b081705acca21d"}, {"code": "(fn dup [lst] (if (empty? lst) '() (let [h (first lst) t (dup (rest lst))] (concat (list h h) t))))", "problem": 32, "user": "4fbbb6ede4b081705acca2ed"}, {"code": "(fn [xs] (reduce #(conj %1 %2 %2) [] xs))", "problem": 32, "user": "4fb65f2fe4b081705acca2c7"}, {"code": "(fn [list](reduce (fn [x elem]\n                    (conj (conj x elem) elem)) [] list))", "problem": 32, "user": "4fb86dc9e4b081705acca2d8"}, {"code": "(fn [n] (  reverse (loop [cnt 0 acc []] (if (= cnt (count n))             acc\n          (recur (inc cnt) (cons (nth n cnt) (cons (nth n cnt) acc)))))))", "problem": 32, "user": "4f32135ae4b0d6649770a08e"}, {"code": "(fn [y] (mapcat (fn [x] [x x]) y))", "problem": 32, "user": "4f7e07f4e4b06e829148e1c9"}, {"code": "(fn [l] (reverse (reduce #(conj %1 %2 %2) nil l)))", "problem": 32, "user": "4faac363e4b081705acca200"}, {"code": "(fn dup-seq [coll] \n  (mapcat #(list % %) coll))", "problem": 32, "user": "4faafccde4b081705acca209"}, {"code": "mapcat #(vector % %)", "problem": 32, "user": "4f05ea25535dcb61093f6c02"}, {"code": "#(interleave % %)", "problem": 32, "user": "4fbd24d2e4b081705acca2ff"}, {"code": "reduce (fn[x,y](conj (conj x y) y)) []", "problem": 32, "user": "4fb3dd1ee4b081705acca2a5"}, {"code": "#(interleave % %)", "problem": 32, "user": "4ee85476535d93acb0a6687c"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "4fb37882e4b081705acca2a0"}, {"code": "(fn [y] (apply concat (map (fn[x] [x x]) y)))", "problem": 32, "user": "4fbd12a5e4b081705acca2fd"}, {"code": "#(interleave % %)", "problem": 32, "user": "4fbfbd4fe4b081705acca31c"}, {"code": "(fn [s] (mapcat #(list % %) s))", "problem": 32, "user": "4fc13433e4b081705acca32b"}, {"code": "#(mapcat (fn [e] (list e e)) %)", "problem": 32, "user": "4fbfe9a4e4b081705acca31f"}, {"code": "(fn [elems]\n  (loop [input elems results []]\n    (if (empty? input)\n      results\n      (recur (rest input) (conj (conj results (first input)) (first input))))))", "problem": 32, "user": "4ee52c44535d1385b2869d88"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "4fc0853ae4b081705acca327"}, {"code": "#(interleave % %)", "problem": 32, "user": "4faa6184e4b081705acca1f1"}, {"code": "(fn [x]\n  ((fn rdu [se res]\n    (if (not (empty? se))\n        (let [fe (first se)]\n             (recur (rest se)\n                    (concat res\n                            (list fe)\n                            (list fe))))\n        res))\n   x '()))", "problem": 32, "user": "4fbe42b7e4b081705acca30f"}, {"code": "(fn [s]\n  (loop [ret [] s s]\n    (if (empty? s)\n      ret\n      (recur (conj (conj ret (first s)) (first s)) (rest s)))))", "problem": 32, "user": "4fb4f42ae4b081705acca2b4"}, {"code": "(fn dup [[x & ll]]\n    (cond\n        (empty? ll) (list x x)\n        :else (cons x (cons x (dup ll)))\n    ))", "problem": 32, "user": "4fbdcb87e4b081705acca30a"}, {"code": "#((fn [x] (mapcat list x x)) %)", "problem": 32, "user": "4fbef9a6e4b081705acca316"}, {"code": "mapcat #(vector % %)", "problem": 32, "user": "4fc4eadee4b081705acca353"}, {"code": "#(interleave % %)", "problem": 32, "user": "4e6cf61a535de274dd8d818c"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "4fb79872e4b081705acca2d2"}, {"code": "#(interleave % %)", "problem": 32, "user": "4db1b5841254ad5b4805fa70"}, {"code": "(fn dup-mapcat [coll]\n  (mapcat (partial repeat 2) coll))", "problem": 32, "user": "4fc6305de4b0ee37620e180b"}, {"code": "#(sort (concat % %))", "problem": 32, "user": "4fc4dca8e4b081705acca350"}, {"code": "#(interleave % %)", "problem": 32, "user": "4fb1d907e4b081705acca282"}, {"code": "#(interleave % %)", "problem": 32, "user": "4fc50bcbe4b081705acca375"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "4ec53831535d6d7199dd3684"}, {"code": "#(interleave % %)", "problem": 32, "user": "4fc0221ce4b081705acca322"}, {"code": "(fn duplicate [lst]\n  (mapcat #(list % %) lst))", "problem": 32, "user": "4fc52278e4b081705acca37c"}, {"code": "(fn [xs] (mapcat #(list % %) xs))", "problem": 32, "user": "4fba0877e4b081705acca2dd"}, {"code": "#(loop [c %1 acc () ] (if (empty? c) (reverse acc) (recur (rest c) (cons (first c) (cons (first c) acc)))))", "problem": 32, "user": "4f515bd3e4b03ad3f0c10d1f"}, {"code": "(fn dup [coll]\r\n  (if (empty? coll)\r\n    ()\r\n    (cons (first coll) (cons (first coll) (dup (rest coll))))))", "problem": 32, "user": "4fbb9d80e4b081705acca2ea"}, {"code": "(fn duplicate [s]\n  (if (empty? s)\n    s\n    (let [car (first s)]\n      (concat (list car car) (duplicate (rest s))))))", "problem": 32, "user": "4fc50441e4b081705acca36f"}, {"code": "(fn [l] (interleave l l))", "problem": 32, "user": "4fc8c8d8e4b0ee37620e183b"}, {"code": "(fn [col] (mapcat (fn [a] [a a]) col))", "problem": 32, "user": "4fc7db47e4b0ee37620e182a"}, {"code": "(fn [x] (reduce #(conj %1 %2 %2) [] x))", "problem": 32, "user": "4fca1cd6e4b0ee37620e184c"}, {"code": "(fn [x] (mapcat #(list % %) x))", "problem": 32, "user": "4fc18846e4b081705acca331"}, {"code": "#(reduce (fn [x,y] (conj x y y) ) [] %)", "problem": 32, "user": "4fbd292fe4b081705acca300"}, {"code": "#(interleave % %)", "problem": 32, "user": "4fcad14ce4b0ee37620e1856"}, {"code": "#(reduce concat (for [x %] [x x]))", "problem": 32, "user": "4f7431d2e4b044e54cd9a8f7"}, {"code": "(fn dup [s]\n  (if-let [[x & xs] (seq s)]\n    (conj (dup xs) x x)\n    '()))", "problem": 32, "user": "4fcaf7a4e4b0ee37620e1857"}, {"code": "#(apply concat (for [x %] [x x]))", "problem": 32, "user": "4fc8f1fee4b0ee37620e183f"}, {"code": "(fn [col] (reduce concat (map #(list % %) col)))", "problem": 32, "user": "4fb2f9b2e4b081705acca294"}, {"code": "(fn [ys]\n  (loop [xs [], ys ys]\n    (if (empty? ys) xs\n      (recur (conj xs (first ys) (first ys)) (rest ys)))))", "problem": 32, "user": "4fcbc18ae4b0ee37620e185c"}, {"code": "(fn doublearg [col]\n    ((fn doublearg* [i out col]\n    (if (== i (count col))\n        out\n        (doublearg*\n            (inc i)\n            (concat out (take 2 (repeat (col i))))\n            col))) 0 () col))", "problem": 32, "user": "4fc2e302e4b081705acca33a"}, {"code": "( fn [l] (reduce concat (map #(list % %) l) ) )", "problem": 32, "user": "4fc43a8ee4b081705acca346"}, {"code": "(fn [x] (interleave x x))", "problem": 32, "user": "4fccdc75e4b0ee37620e186d"}, {"code": "#(interleave % %)", "problem": 32, "user": "4f826548e4b033992c121c08"}, {"code": "#(interleave % %)", "problem": 32, "user": "4fbacdbae4b081705acca2e5"}, {"code": "#(interleave % %)", "problem": 32, "user": "4fcc103fe4b0ee37620e185f"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "4fc67081e4b0ee37620e1813"}, {"code": "(fn duplo [l]\n  (if (empty? l)()\n    (conj (duplo (rest l)) (first l) (first l))))", "problem": 32, "user": "4eca7a87535d6d7199dd3705"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "4fce5474e4b0d4b2a7a9d451"}, {"code": "(fn [x]\n  (loop [in x out '()]\n    (if (seq in)\n      (recur (rest in) (conj out (first in)(first in)))\n      (reverse out))))", "problem": 32, "user": "4fc34787e4b081705acca33e"}, {"code": "(fn [x] (reverse (\n  (fn ap [x res] (\n    if (= x '())\n       res\n        (ap (rest x) (conj res (first x) (first x)))\n    )) x '()\n  )))", "problem": 32, "user": "4fcf5292e4b03432b189f40e"}, {"code": "(fn interc[s] (if (= (count s) 1) (cons (first s) s) (cons (first s) (cons (first s) (interc (rest s))))))", "problem": 32, "user": "4f148418535d64f60314643a"}, {"code": ";;(fn[y] (flatten (map (fn[x] (list x x)) y)))\n\n(fn F [x]\n(if (empty? x)                                    \n'()                                               \n(cons (first x) (cons (first x) (F (rest x))))\n))", "problem": 32, "user": "4fc7b079e4b0ee37620e1827"}, {"code": "(fn dup [s]\n  (if (empty? s)\ns\n(conj (dup (rest s)) (first s) (first s))\n))", "problem": 32, "user": "4fcebce4e4b03432b189f404"}, {"code": "(fn [coll] (reverse (reduce #(cons %2 (cons %2 %1)) '() coll)))", "problem": 32, "user": "4fbcbd50e4b081705acca2f9"}, {"code": "(fn duphead [s] \n  (if-not (= s ())\n    (concat (list (first s) (first s)) (duphead (rest s)))\n    ()\n  ))", "problem": 32, "user": "4ec56b5b535d6d7199dd369f"}, {"code": "(fn [lst]\n  (mapcat #(list % %) lst))", "problem": 32, "user": "4fba7d1ee4b081705acca2e0"}, {"code": "(fn[x](apply concat (map #(vector % %2) x x)))", "problem": 32, "user": "4fb23582e4b081705acca28a"}, {"code": "(fn dup [l]\n   (reverse (reduce (fn [acc e]\n                      (cons e (cons e acc)))\n                    '()\n                    l)))", "problem": 32, "user": "4fc8ce6ce4b0ee37620e183c"}, {"code": "(fn [x]\r\n   (letfn [(dup [acc e]\r\n                (cons e (cons e acc)))]\r\n          (reverse (reduce dup () x))))", "problem": 32, "user": "4fc8b012e4b0ee37620e1838"}, {"code": "#(mapcat (partial repeat 2) %)", "problem": 32, "user": "4fd22e70e4b04c3a95aa041c"}, {"code": "(fn dup-seq [seq]\n  (cond\n    (empty? seq) '()\n    :else\n      (cons (first seq) \n        (cons (first seq) \n          (dup-seq (rest seq))))))", "problem": 32, "user": "4fd16778e4b04c3a95aa040f"}, {"code": "mapcat #(conj [%] %)", "problem": 32, "user": "4daf4d2fedd6309eace4d178"}, {"code": "#(interleave % %)", "problem": 32, "user": "4fc52d79e4b081705acca386"}, {"code": "#(interleave % %)", "problem": 32, "user": "4fb12b35e4b081705acca275"}, {"code": "(fn dup [lst] (\r\n  if (nil? lst)\r\n  []\r\n  (cons (first lst) (cons (first lst) (dup (next lst))))\r\n))", "problem": 32, "user": "4fd459cfe4b0d4de60cee36b"}, {"code": "mapcat #(repeat 2 %)", "problem": 32, "user": "4fccb31be4b0ee37620e1868"}, {"code": "#(interleave % %)", "problem": 32, "user": "4e929dd0535dbda64a6f6b05"}, {"code": "#(interleave % %)", "problem": 32, "user": "4fd2789ee4b04c3a95aa0422"}, {"code": "(fn [s] (loop [xs s a []]\n  (if (empty? xs)\n    a\n    (let [r (rest xs) x (first xs)]\n      (recur\n        r\n        (into a [x x]))))))", "problem": 32, "user": "4fd2e5d8e4b04c3a95aa0427"}, {"code": "#(mapcat list % %)", "problem": 32, "user": "4fd0d058e4b04c3a95aa0408"}, {"code": "mapcat (fn [x] [x x])", "problem": 32, "user": "4fd7962ee4b0dab7d829f385"}, {"code": "#(interleave % %)", "problem": 32, "user": "4fd2529ae4b04c3a95aa041f"}, {"code": "(fn [x] (mapcat #(repeat 2 %) x))", "problem": 32, "user": "4fadbb17e4b081705acca23e"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "4fd29d7ce4b04c3a95aa0424"}, {"code": "#(interleave % %)", "problem": 32, "user": "4da8dd6e30acd6ed12482a68"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "4fd96694e4b05e33b9224f37"}, {"code": "#(interleave % %)", "problem": 32, "user": "4fd1fa71e4b04c3a95aa0418"}, {"code": "(fn [S]\n  (apply concat (for [i S] \n    (repeat 2 i))))", "problem": 32, "user": "4fda016ae4b05e33b9224f42"}, {"code": "#(interleave % %)", "problem": 32, "user": "4fce75cfe4b03432b189f400"}, {"code": "#(interleave % %)", "problem": 32, "user": "4fd0af0ee4b04c3a95aa0405"}, {"code": "(fn [x]\r\n  (reduce #(into % (list %2 %2)) [] x))", "problem": 32, "user": "4fd9f5dbe4b05e33b9224f41"}, {"code": "#(interleave % %)", "problem": 32, "user": "4fc6d2c1e4b0ee37620e181b"}, {"code": "(fn [x] (mapcat #(repeat 2 %) x))", "problem": 32, "user": "4fd6028ce4b0d4de60cee37b"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "4fb591aee4b081705acca2c0"}, {"code": "(fn [x]\n  (loop [l x\n        s []\n        y (first l)]\n      (if (seq l)\n        (recur (rest l) (conj s y y) (first (rest l)))\n        s)))", "problem": 32, "user": "4fc93728e4b0ee37620e1844"}, {"code": "(fn rpt2 [s]\r\n  (loop [e s\r\n\t       r '()]\r\n\t   (if (empty? e)\r\n\t       r\r\n\t       (recur (rest e) (concat r (repeat 2 (first e)))))))", "problem": 32, "user": "4eb99b3d535dfed6da9c6d57"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "4ead2841535d7eef3080731e"}, {"code": "(fn [coll] (mapcat #(repeat 2 %) coll))", "problem": 32, "user": "4f9fb08ae4b0dcca54ed6d3c"}, {"code": "#(for [x % n (range 2)] x)", "problem": 32, "user": "4fcd155de4b065de69964ca3"}, {"code": "(fn [xs] (apply concat (map #(list % %) xs)))", "problem": 32, "user": "4fc66c43e4b0ee37620e1812"}, {"code": "#(reverse (reduce (fn [val a](conj val a a)) (list) %1))", "problem": 32, "user": "4fd15334e4b04c3a95aa040d"}, {"code": "#(reduce (fn [accum x] (conj (conj accum x) x)) [] %)", "problem": 32, "user": "4fb57e06e4b081705acca2bf"}, {"code": "(fn x [l]\n  (cond\n    (nil? l) ()\n    (= l ()) ()\n    :else \n      (conj \n        (conj\n          (x (rest l))\n          (first l))\n        (first l))\n  )\n)", "problem": 32, "user": "4fd153cee4b04c3a95aa040e"}, {"code": "#(interleave % %)", "problem": 32, "user": "4fca2ef0e4b0ee37620e184e"}, {"code": "#(interleave % %)", "problem": 32, "user": "4ee6166e535d93acb0a66854"}, {"code": "#(apply concat (map (fn [x] (list x x)) %))", "problem": 32, "user": "4fdd27f3e4b05e33b9224f78"}, {"code": "mapcat #(repeat 2 %)", "problem": 32, "user": "4fd6f4d8e4b0dab7d829f37b"}, {"code": "#(mapcat (fn [x] [x x]) %)", "problem": 32, "user": "4dad8c92c9a9d6ed1699dc57"}, {"code": "(fn [l] (mapcat #(list % %) l))", "problem": 32, "user": "4fde492be4b05e33b9224f8a"}, {"code": "#(mapcat (fn [x] [x x]) %)", "problem": 32, "user": "4e5a5ecb535d8a8b8723a2ac"}, {"code": "#(apply concat (for [x %] [x x]))", "problem": 32, "user": "4f463dfde4b0d56e7bb92b99"}, {"code": "(fn [x] (sort (concat x x)))", "problem": 32, "user": "4fdf2b50e4b05e33b9224f93"}, {"code": "mapcat (fn [arg] [arg arg])", "problem": 32, "user": "4e70a7c1535d5021c1a8963c"}, {"code": "mapcat #(vector % %)", "problem": 32, "user": "4fa05b99e4b0dcca54ed6d47"}, {"code": "(fn [x] (reduce #(conj %1 %2 %2) [] x))", "problem": 32, "user": "4fdfe6a5e4b05e33b9224fa6"}, {"code": "(fn [x] (reduce #(concat %1 (list %2 %2)) (cons '() x)))", "problem": 32, "user": "4fdc3065e4b05e33b9224f6b"}, {"code": "(fn [ s ]   (interleave s s) )", "problem": 32, "user": "4fdf750be4b05e33b9224f9c"}, {"code": "(fn dup [seq]\r\n  (if (empty? seq)\r\n      '()\r\n      (cons (first seq)\r\n            (cons (first seq)\r\n                  (dup (rest seq))))))", "problem": 32, "user": "4fcc6cb3e4b0ee37620e1861"}, {"code": "(fn [xs] (apply concat (for [x xs] [x x])))", "problem": 32, "user": "4fe2501ae4b0dd6cd5ce3644"}, {"code": "(fn [lst]\n  (loop [l lst result []]\n    (if (empty? l)\n      result\n      (recur (next l) (conj result (first l) (first l))))))", "problem": 32, "user": "4fd7f892e4b0dab7d829f38d"}, {"code": "#(interleave % %)", "problem": 32, "user": "4f56d6f3e4b0a7574ea7182c"}, {"code": "(fn dup-seq [coll]\r\n  (loop [coll coll\r\n         result []]\r\n    (if (empty? coll)\r\n      result\r\n      (recur (rest coll) (conj result (first coll) (first coll))))))", "problem": 32, "user": "4fe54ee8e4b0e8f79898fec3"}, {"code": "(fn [x] \r\n  (loop [A '() x x]\r\n      (if (empty? x) (reverse A)\r\n         (let [c (first x)]\r\n  \t(recur (cons c (cons c A))  (rest x) )\r\n\t))))", "problem": 32, "user": "4f8b27b3e4b02e764a0a5179"}, {"code": "#(loop [orig-list % res-list '()]\n  (if \n    (empty? orig-list) \n     res-list\n    (recur (next orig-list) (concat res-list (repeat 2 (first orig-list))))\n  )\n )", "problem": 32, "user": "4fe588b6e4b0e8f79898fec5"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "4f030cff535dcb61093f6a4d"}, {"code": "#(interleave % %)", "problem": 32, "user": "4fe21889e4b0dd6cd5ce3641"}, {"code": "#(interleave % %)", "problem": 32, "user": "4fd785e6e4b0dab7d829f383"}, {"code": "#(interleave % %)", "problem": 32, "user": "4fdec88fe4b05e33b9224f8e"}, {"code": "#(interleave % %)", "problem": 32, "user": "4fe13ad7e4b0dd6cd5ce3632"}, {"code": "(fn [x]\n  (loop [x x\n         acc []]\n   (if (empty? x)\n        acc\n  (recur (rest x) \n  (conj (conj acc (first x)) (first x))))))", "problem": 32, "user": "4fe72924e4b0e8f79898fedb"}, {"code": "#(interleave % %)", "problem": 32, "user": "4fe868d1e4b07c9f6fd12c3f"}, {"code": "#(interleave % %)", "problem": 32, "user": "4fe84c74e4b07c9f6fd12c3c"}, {"code": "(fn [coll] (interleave coll coll))", "problem": 32, "user": "4f92884de4b0dcca54ed6caf"}, {"code": "#(interleave % %)", "problem": 32, "user": "4fd11a93e4b04c3a95aa040a"}, {"code": "(fn [l]\n  (apply concat (map (fn [x] [x x]) l)))", "problem": 32, "user": "4fe8aef4e4b07c9f6fd12c6c"}, {"code": "(fn [x] (interleave x x))", "problem": 32, "user": "4fe1597fe4b0dd6cd5ce3633"}, {"code": "(fn duplicate-seq [items]\n  (when-let [[f & r] (seq items)]\n    (conj (duplicate-seq r) f f)))", "problem": 32, "user": "4f81fcbfe4b033992c121c03"}, {"code": "(fn [x]\n  (loop [lst x ret []]\n    (if (empty? lst) ret\n(recur (rest lst) (conj ret (first lst) (first lst) )))))", "problem": 32, "user": "4fdf5403e4b05e33b9224f98"}, {"code": "(fn [s]\n  ((fn iter [s-in s-out]\n    (if (empty? s-in)\n      s-out\n      (iter (rest s-in) (conj s-out (first s-in) (first s-in)))))\n  s []))", "problem": 32, "user": "4fe8e771e4b0547ebccb2431"}, {"code": "(fn dup [[x & xs]]\n   (if (nil? x) []\n   `(~x ~x ~@(dup xs))))", "problem": 32, "user": "4fe8d862e4b0547ebccb2428"}, {"code": "mapcat #(identity [% %])", "problem": 32, "user": "4fe88f78e4b07c9f6fd12c45"}, {"code": "(fn duplicate [coll]\r\n  (reverse\r\n   (reduce (fn [acc nxt]\r\n             (cons nxt (cons nxt acc)))\r\n           '()\r\n           coll)))", "problem": 32, "user": "4e7e4a1f535db169f9c7970c"}, {"code": "(fn [coll] (mapcat #(list % %) coll))", "problem": 32, "user": "4fe9d647e4b0547ebccb2472"}, {"code": "#(interleave % %)", "problem": 32, "user": "4fe4c09ee4b0e8f79898febb"}, {"code": "(fn dup [[x & y]] (if (nil? y) [x x] (concat [x x] (dup y))))", "problem": 32, "user": "4fea08a9e4b0547ebccb2484"}, {"code": "#(interleave % %)", "problem": 32, "user": "4fea2de5e4b0140c20fb9bfe"}, {"code": "#(interleave % %)", "problem": 32, "user": "4fe89db2e4b07c9f6fd12c59"}, {"code": "(fn [xs]\r\n          (reduce (fn [a b] (conj (conj a b) b))\r\n                  []\r\n                  xs))", "problem": 32, "user": "4f07ad89535dcb61093f6c2a"}, {"code": "#(interleave % %)", "problem": 32, "user": "4fe8b6afe4b07c9f6fd12c76"}, {"code": "mapcat #(repeat 2 %)", "problem": 32, "user": "4fe87e56e4b07c9f6fd12c40"}, {"code": "(fn [coll]\n  (mapcat identity\n    (map #(list % %) coll)))", "problem": 32, "user": "4fdb881ee4b05e33b9224f5e"}, {"code": "mapcat (fn [x] [x x])", "problem": 32, "user": "4feada56e4b0140c20fb9c11"}, {"code": "mapcat (fn [el] (repeat 2 el))", "problem": 32, "user": "4fc5eb7fe4b0ee37620e1803"}, {"code": "#(interleave % %)", "problem": 32, "user": "4fe9de74e4b0547ebccb2475"}, {"code": "#(reduce (fn [a b] (concat a (list b b))) () %)", "problem": 32, "user": "4f30896ce4b0d6649770a07b"}, {"code": "(fn dup [items] (reduce #(conj %1 %2 %2) [] items))", "problem": 32, "user": "4fd9d162e4b05e33b9224f3c"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "4fe9231ce4b0547ebccb2445"}, {"code": "(fn [seq] (loop [ll seq, result nil]\r\n           (if (empty? ll)\r\n                result\r\n                (recur (rest ll) (concat result (list (first ll) (first ll)))))))", "problem": 32, "user": "4fd0cb0ee4b04c3a95aa0407"}, {"code": "#(seq (reduce (fn [acc x] (conj acc x x)) [] %))", "problem": 32, "user": "4fe8da4de4b0547ebccb2429"}, {"code": "(fn duplicate-members [coll]\n  (loop [coll coll, result []]\n    (if (empty? coll)\n      result\n      (recur (rest coll)\n             (apply conj result (repeat 2 (first coll)))))))", "problem": 32, "user": "4fae4c11e4b081705acca248"}, {"code": "#(interleave % %)", "problem": 32, "user": "4febb4dae4b0681fd128dc98"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "4fcd5958e4b065de69964ca7"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "4fcc70b3e4b0ee37620e1862"}, {"code": "#(interleave % %)", "problem": 32, "user": "4e95c771535dbda64a6f6b39"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "4ed90014535d10e5ff6f52fe"}, {"code": "(fn [xs]\n  (mapcat (fn [x] [x x]) xs))", "problem": 32, "user": "4feff3b6e4b0678c553fc31e"}, {"code": "(fn duplicate [coll]\r\n  (reduce #(concat %1 %2)\r\n    (map\r\n      #(repeat 2 %1)\r\n      coll )))", "problem": 32, "user": "4fd170fce4b04c3a95aa0411"}, {"code": "(partial reduce #(concat %1 (repeat 2 %2)) ())", "problem": 32, "user": "4fef4379e4b0678c553fc312"}, {"code": "(fn [x]\r\n   (loop [s x \r\n          r ()]\r\n     (if (empty? s)\r\n       (reverse r)\r\n       (recur (rest s) \r\n              (conj r (first s) (first s))))))", "problem": 32, "user": "4ff07688e4b0678c553fc324"}, {"code": "#(interleave % %)", "problem": 32, "user": "4fe83efbe4b07c9f6fd12c3b"}, {"code": "#(interleave % %)", "problem": 32, "user": "4fd65b2be4b0d4de60cee37e"}, {"code": "(fn [x] (apply concat (map #(list % %) x)))", "problem": 32, "user": "4ff07229e4b0678c553fc323"}, {"code": "(fn [s] (interleave s s))", "problem": 32, "user": "4fe8aba5e4b07c9f6fd12c68"}, {"code": "#(interleave %1 %1)", "problem": 32, "user": "4fe15ffee4b0dd6cd5ce3634"}, {"code": "#(reduce (fn [v item] (concat v (list item item))) '() %)", "problem": 32, "user": "4fe1a734e4b0dd6cd5ce3637"}, {"code": "#(apply concat (map (fn [x] [x x]) %))", "problem": 32, "user": "4ff201d7e4b0678c553fc330"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "4fedd2cae4b0198f34b063ba"}, {"code": "(fn [coll]\n  \t(apply concat (map #(list % %) coll)))", "problem": 32, "user": "4e6a63fd535d8ccf87e9feda"}, {"code": "(fn [a] \n  (reverse \n    (reduce into \n      (map #(list % %) a))))", "problem": 32, "user": "4fea1f9ee4b0547ebccb248b"}, {"code": "(fn [s]\n  (apply concat (map #(list % %) s)))", "problem": 32, "user": "4ff304f4e4b0678c553fc343"}, {"code": "#(-> % (concat %) sort)", "problem": 32, "user": "4f1427f8535d64f603146435"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "4ff3df0fe4b0678c553fc355"}, {"code": "(fn [coll] (interleave coll coll))", "problem": 32, "user": "4f03bbf2535dcb61093f6b59"}, {"code": "#(for [a % b [a a]] b)", "problem": 32, "user": "4f244f26e4b0d66497709fea"}, {"code": "(fn dupe [xs]\n   (reduce #(concat %1 (list %2 %2))\n      (list) xs))", "problem": 32, "user": "4ff2430ae4b0678c553fc336"}, {"code": "#(interleave % %)", "problem": 32, "user": "4f230adde4b0d66497709fdf"}, {"code": "(fn [coll]\r\n  (apply concat\r\n    (map (fn [x] (list x x)) coll)))", "problem": 32, "user": "4ff2ee54e4b0678c553fc340"}, {"code": "reduce #(conj %1 %2 %2) `[]", "problem": 32, "user": "4ff50604e4b0678c553fc365"}, {"code": "#(interleave % %)", "problem": 32, "user": "4ff4f5c4e4b0678c553fc362"}, {"code": "(fn dup [c]\n    (if (empty? c) c\n        (concat (list (first c) (first c))\n            (dup (rest c)))))", "problem": 32, "user": "4ff4c9dae4b0678c553fc360"}, {"code": "(fn [l] \n  (mapcat #(repeat 2 %) l))", "problem": 32, "user": "4ff5744ae4b0678c553fc36a"}, {"code": "(fn [coll] \n   (reverse (reduce #(conj (conj % %2) %2) '() coll)))", "problem": 32, "user": "4feddf2ee4b0198f34b063be"}, {"code": "(fn \n  [coll]\n    (reduce #(conj % %2 %2) [] coll))", "problem": 32, "user": "4fee04a0e4b0678c553fc308"}, {"code": "(fn\n   [coll]\n   (apply concat (map #(repeat 2 %) coll))\n   \n   )", "problem": 32, "user": "4ff58b05e4b0678c553fc36b"}, {"code": "#(interleave % %)", "problem": 32, "user": "4ff31e13e4b0678c553fc346"}, {"code": "(fn double [s]\n  (if (empty? s)\n    '()\n    (cons (first s) (cons (first s) (double (rest s))))))", "problem": 32, "user": "4ff3e771e4b0678c553fc356"}, {"code": "#(apply concat (map vector % %))", "problem": 32, "user": "4fe8e719e4b0547ebccb2430"}, {"code": "(fn [x] (mapcat #(repeat 2 %) x))", "problem": 32, "user": "4fba77fae4b081705acca2df"}, {"code": "#(sort (into % %))", "problem": 32, "user": "4ff35d46e4b0678c553fc34f"}, {"code": "mapcat #(repeat 2 %)", "problem": 32, "user": "4ff6aea8e4b0678c553fc381"}, {"code": "(fn [x] \n  (loop [out () a (first x) b (next x)]\n    (if (nil? b)\n      (concat out (list a a))\n      (recur (concat out (list a a)) (first b) (next b) )\n)))", "problem": 32, "user": "4ff743fde4b0678c553fc38d"}, {"code": "#(interleave % %)", "problem": 32, "user": "4ff673b3e4b0678c553fc37d"}, {"code": "(fn ! [x]\n  (if (empty? x)\n    (empty x)\n    (let [f (first x)]\n      (cons f (cons f (! (rest x)))))))", "problem": 32, "user": "4f0324d2535dcb61093f6a69"}, {"code": "mapcat #(vector % %)", "problem": 32, "user": "4ff83003e4b0678c553fc396"}, {"code": "#((fn dup [s acc]\n     (if (empty? s)\n       (reverse acc)\n       (dup (rest s) (list* (first s) (first s) acc)))) % nil)", "problem": 32, "user": "4ff355a1e4b0678c553fc34d"}, {"code": "(fn [s]\n  (mapcat #(repeat 2 %) s))", "problem": 32, "user": "4ff9d4e5e4b0678c553fc3b0"}, {"code": "(fn [s] (reduce concat (map #(list % %) s)))", "problem": 32, "user": "4ff889f2e4b0678c553fc399"}, {"code": "reduce (fn [a b] (conj a b b)) []", "problem": 32, "user": "4fefd624e4b0678c553fc31b"}, {"code": "(fn [x] (reduce #(conj %1 %2 %2) [] x))", "problem": 32, "user": "4ebbc2dd535dfed6da9c6d73"}, {"code": "(fn f [x] (if (empty? x) [] (concat (list (first x)(first x)) (f (rest x))) )  )", "problem": 32, "user": "4fe9cea4e4b0547ebccb2471"}, {"code": "(fn dup [coll]\n   (reduce concat [] \n    (map #(list % %) coll)))", "problem": 32, "user": "4fe8a3bde4b07c9f6fd12c61"}, {"code": "mapcat #(vec [% %])", "problem": 32, "user": "4fe89297e4b07c9f6fd12c4c"}, {"code": "#(interleave % %)", "problem": 32, "user": "4ff67852e4b0678c553fc37e"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "4ff82b00e4b0678c553fc395"}, {"code": "(fn duplicate [lst]\n  (if (empty? lst)\n    lst\n    (conj (duplicate (rest lst)) (first lst) (first lst))))", "problem": 32, "user": "4ff9cfd6e4b0678c553fc3af"}, {"code": "(fn bla2\n  ([x] (bla2 x [] 0))\n  ([x y z]\n       (if (< z (count x))\n         (bla2 x (conj (conj y (nth x z)) (nth x z)) (+ z 1))\n         y))\n\n)", "problem": 32, "user": "4ff6ed6ae4b0678c553fc384"}, {"code": "#(interleave % %)", "problem": 32, "user": "4e9c3648535dbda64a6f6b7d"}, {"code": "#(interleave % %)", "problem": 32, "user": "4db2cd84535df7e46ed9b6c6"}, {"code": "(fn [x]\n  (reduce #(conj %1 %2 %2) [] x))", "problem": 32, "user": "4ec9549d535d6d7199dd36fe"}, {"code": "; (fn [xs] (reduce #(concat %1 (list %2 %2)) '() xs))\n(fn [xs] (reduce #(concat %1 (take 2 (repeat %2))) '() xs))", "problem": 32, "user": "4ffb38e8e4b0678c553fc3c6"}, {"code": "(fn [c] (apply concat (map #(list % %) c)))", "problem": 32, "user": "4ff8a89de4b0678c553fc39d"}, {"code": "(fn [s] (remove seq? (tree-seq seq? seq (map #(list % %) s))))", "problem": 32, "user": "4e57d1e2535d8a8b8723a289"}, {"code": "(fn [s]\n  (apply concat (map (fn [e] [e e]) s))\n)", "problem": 32, "user": "4ffb3c50e4b0678c553fc3c8"}, {"code": "(fn dupli [x]\n  (let [f (first x) nxt (next x)]\n    (concat\n      [f][f]\n      (when (coll? nxt)\n        (dupli nxt)))))", "problem": 32, "user": "4ff5a525e4b0678c553fc36d"}, {"code": "#(interleave % % )", "problem": 32, "user": "4ec7c32c535d6d7199dd36e6"}, {"code": "(fn [coll] (mapcat (fn [x] [x x]) coll))", "problem": 32, "user": "4fa09916e4b0dcca54ed6d4e"}, {"code": "(partial mapcat #(vector % %))", "problem": 32, "user": "4fdb02aae4b05e33b9224f56"}, {"code": "(fn[s]\n  (apply interleave (repeat 2 s)))", "problem": 32, "user": "4ec64981535d6d7199dd36c7"}, {"code": "(fn [list](reverse (reduce (fn[elist, duplist](cons duplist (cons duplist elist))) '() list)))", "problem": 32, "user": "4fd0b0bde4b04c3a95aa0406"}, {"code": "(fn   [col]\n  (loop [retval [] c col]\n    (if (empty? c)\n      retval\n      (recur (conj retval (first c) (first c)) (rest c)))))", "problem": 32, "user": "4e539f7e535d8a8b8723a272"}, {"code": "(fn [x] (reduce concat (map #(repeat 2 %) x)))", "problem": 32, "user": "4ffa213ee4b0678c553fc3b7"}, {"code": "(fn [lst]\n  (reduce #(concat %1 (repeat 2 %2)) () lst))", "problem": 32, "user": "4ffe4d43e4b0678c553fc3f1"}, {"code": "#(loop [v '()\n         b %]\n    (if (empty? b)\n      (reverse v)\n      (recur (conj (conj v (first b)) (first b))\n             (rest b))))", "problem": 32, "user": "4fecd35fe4b0681fd128dcab"}, {"code": "#(interleave %  %)", "problem": 32, "user": "4eda05c1535d10e5ff6f5309"}, {"code": "(fn d [s]\n  (cond\n    (empty? s) '()\n    true (->> s (rest) (d) (cons (first s)) (cons (first s)))))", "problem": 32, "user": "4fff72b6e4b0678c553fc400"}, {"code": "(fn [x] (mapcat #(repeat 2 %) x))", "problem": 32, "user": "4ff76effe4b0678c553fc390"}, {"code": "#(interleave %1 %1)", "problem": 32, "user": "4ffe8193e4b0678c553fc3f4"}, {"code": "(fn dup [[x & rest]] (when x (cons x (cons x (dup rest)))))", "problem": 32, "user": "500159b3e4b0678c553fc419"}, {"code": "#(interleave % %)", "problem": 32, "user": "50015be1e4b0678c553fc41a"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "4fff57f1e4b0678c553fc3fe"}, {"code": "(fn [lst] (reduce (fn [a b] (concat a b)) \n    (apply vector (map #(vector % %) lst))))", "problem": 32, "user": "4eed6b32535d93acb0a668bc"}, {"code": "(fn [seq] (interleave seq seq))", "problem": 32, "user": "5003bb77e4b0678c553fc442"}, {"code": "#(interleave % %)", "problem": 32, "user": "5003ee7de4b0678c553fc446"}, {"code": "(fn [s]\n  (reduce #(conj %1 %2 %2) [] s))", "problem": 32, "user": "5003deb9e4b0678c553fc445"}, {"code": "#(interleave % %)", "problem": 32, "user": "4ffa8affe4b0678c553fc3bd"}, {"code": "#(interleave % %)", "problem": 32, "user": "4e260220535deb9a81d77ef0"}, {"code": "#(interleave % %)", "problem": 32, "user": "50045388e4b0678c553fc44e"}, {"code": "(fn n [l]\n  (if (empty? l) nil\n    (cons (first l) (cons (first l) (n (rest l))))))", "problem": 32, "user": "4ffb59f6e4b0678c553fc3cf"}, {"code": "(fn dup\n  ([s] (dup s []))\n  ([s acc]\n    (if (empty? s)\n      acc\n      (dup (rest s) (conj (conj acc (first s)) (first s)))\n    )\n  )\n)", "problem": 32, "user": "4fff00ede4b0678c553fc3fc"}, {"code": "(fn [coll] (mapcat #(vector % %) coll))", "problem": 32, "user": "5002b6e5e4b0678c553fc42c"}, {"code": "(fn dup-list [coll]                                                           \n  (when-let [[f & r] (seq coll)]                                                \n    (cons f (cons f (dup-list r)))))", "problem": 32, "user": "4f625f68e4b0defedf855fd2"}, {"code": "reduce #(concat %1 [%2 %2]) []", "problem": 32, "user": "50052d38e4b0678c553fc45c"}, {"code": "reduce (fn[acc, x] (concat acc (list x x)  ))[]", "problem": 32, "user": "4ffd92e7e4b0678c553fc3e3"}, {"code": "#(interleave %1 %1)", "problem": 32, "user": "4ffb529be4b0678c553fc3cd"}, {"code": "(fn dupeseq [sequ]\n    (apply concat (for [a sequ] [a a])))", "problem": 32, "user": "50057f23e4b0678c553fc466"}, {"code": "(fn [xs] (mapcat (fn [x] [x x]) xs))", "problem": 32, "user": "4e4ca885535dc968683fc4df"}, {"code": "reduce #(conj % %2 %2) []", "problem": 32, "user": "5007e90be4b0b17c647f5228"}, {"code": "(fn[x] (loop[in x ans '()]\n(if (empty? in) (reverse ans)\n(recur (rest in) (conj (conj ans (first in))  (first in)))\n))\n)", "problem": 32, "user": "4fe1279fe4b0dd6cd5ce3630"}, {"code": "#(reduce (fn[x, y] (conj x y y)) [] %1)", "problem": 32, "user": "50054b5ce4b0678c553fc45f"}, {"code": "(fn [lst] (mapcat #(list % %) lst))", "problem": 32, "user": "4ee528fb535d1385b2869d87"}, {"code": "#(interleave % %)", "problem": 32, "user": "4ffb43b9e4b0678c553fc3ca"}, {"code": "#(apply concat (map (fn [x] (list x x)) %))", "problem": 32, "user": "500933a6e4b046cdb195e074"}, {"code": "(fn _ [s]\r\n  (if (empty? s)\r\n    '()\r\n  (conj (_ (rest s)) (first s) (first s))\r\n  )\r\n)", "problem": 32, "user": "4fa719c0e4b081705acca1bf"}, {"code": "#(interleave % %)", "problem": 32, "user": "500aa15ee4b03d00572d2d76"}, {"code": "(fn [x] (apply concat\n          (map (fn [y] [y y]) x)))", "problem": 32, "user": "500cb910e4b05f7c30cfa698"}, {"code": "(fn [s] (mapcat (fn [x] [x x]) s))", "problem": 32, "user": "500d8c49e4b07ccb9a7ddb00"}, {"code": "(fn [xs] (reduce concat (map #(repeat 2 %) xs)))", "problem": 32, "user": "500854c4e4b028e089d3518c"}, {"code": "(partial reduce #(conj %1 %2 %2) [])", "problem": 32, "user": "4fe900a6e4b0547ebccb243a"}, {"code": "(fn dupelem [s]\n  (reduce (fn [res x]\n    (conj res x x)) [] s))", "problem": 32, "user": "4f50cadce4b03ad3f0c10d0f"}, {"code": "#(interleave % %)", "problem": 32, "user": "5009fd0ae4b03d00572d2d70"}, {"code": "#(reduce (fn[coll x] (conj coll x x)) [] %)", "problem": 32, "user": "4ff2f0a9e4b0678c553fc341"}, {"code": "#(interleave % %)", "problem": 32, "user": "500d1db4e4b05f7c30cfa69f"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "500900dee4b0144d4f561e42"}, {"code": "(fn [xs] (reduce #(conj % %2 %2) [] xs))", "problem": 32, "user": "500ff421e4b0ae202717946f"}, {"code": "(fn prod [args] (if\n                  (empty? args) []\n                  (cons (first args) (cons (first args) (prod (rest args))))))", "problem": 32, "user": "4fd8544be4b0dab7d829f390"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "500e6c4ee4b04a05d36fcc05"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "4ff9f5c5e4b0678c553fc3b4"}, {"code": "mapcat #(vector % %)", "problem": 32, "user": "4fae0b85e4b081705acca245"}, {"code": "(fn [x]\n  (let [y '()]\n    (apply concat y (map #(list % %) x))))", "problem": 32, "user": "5012aefce4b0c8732600222a"}, {"code": "#(mapcat list % %)", "problem": 32, "user": "500ee13be4b00fff93030fa1"}, {"code": "(fn [xs]\n  (loop [my-vec [] x xs]\n    (if x\n      (recur \n        (conj (conj my-vec (first x)) (first x))\n        (next x))\n      my-vec)))", "problem": 32, "user": "4f98da04e4b0dcca54ed6cf7"}, {"code": "(fn [x] (sort (into (into '() x) x)))", "problem": 32, "user": "50052fd0e4b0678c553fc45d"}, {"code": "(fn [x] (apply concat (map #(list % %) x)))", "problem": 32, "user": "4f8320e9e4b033992c121c18"}, {"code": "#(interleave % %)", "problem": 32, "user": "5007f751e4b0b17c647f522b"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "5014718fe4b094324338f8e3"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "500e91aae4b00fff93030f99"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "5013141de4b0f26a0e3320a9"}, {"code": "(partial mapcat #(list % %))", "problem": 32, "user": "50142490e4b07d18bdaaf70a"}, {"code": "(fn [s]\n  (reduce #(concat %1 [%2 %2]) '() s))", "problem": 32, "user": "501284d9e4b030d97e4db710"}, {"code": "(fn [a-seq] (reduce #(concat %1 %2) (map #(list % %) a-seq)))", "problem": 32, "user": "4fda8f57e4b05e33b9224f4e"}, {"code": "#(interleave % %)", "problem": 32, "user": "5012614ee4b02a085b99dc79"}, {"code": "(fn [initial-coll]\n  (reverse\n    (reduce \n      (fn [coll val]\n        (conj coll val val))\n      '()\n      initial-coll)))", "problem": 32, "user": "5014754de4b094324338f8e5"}, {"code": "#(interleave % %)", "problem": 32, "user": "50127fbfe4b030d97e4db70f"}, {"code": "(fn [coll]\n  (mapcat #(repeat 2 %) coll))", "problem": 32, "user": "4fe97adde4b0547ebccb245e"}, {"code": "#(apply concat (for [x %] [x x]))", "problem": 32, "user": "50166470e4b052339a490e76"}, {"code": "(fn [a] (reduce #(concat %1 [%2 %2]) [] a))", "problem": 32, "user": "4f0eeff3535d0136e6c22327"}, {"code": "(fn[x]\n  (mapcat (partial repeat 2) x))", "problem": 32, "user": "500b61b1e4b03d00572d2d81"}, {"code": "(fn [coll] (interleave coll coll))", "problem": 32, "user": "4ff10dd2e4b0678c553fc32a"}, {"code": "mapcat #(repeat 2 %)", "problem": 32, "user": "4fea9154e4b0140c20fb9c0a"}, {"code": "(fn[s](reverse(reduce #(cons%2(cons%2%1))'()s)))", "problem": 32, "user": "5017eface4b02f523d7cc5e7"}, {"code": "#(interleave % %)", "problem": 32, "user": "5018ed15e4b011a2e0bf6412"}, {"code": "#(interleave % %)", "problem": 32, "user": "501688f7e4b052339a490e7a"}, {"code": "#((fn [x] (reduce concat x)) (for [x % :let [y [x x]]] y))", "problem": 32, "user": "5017f840e4b02f523d7cc5e8"}, {"code": "(fn [p] (mapcat #(list % %) p))", "problem": 32, "user": "4f5d0f25e4b0030a34fb2b33"}, {"code": "#(apply concat (map (fn [x] (repeat 2 x)) %))", "problem": 32, "user": "50182f53e4b02f523d7cc5ec"}, {"code": "#(interleave % %)", "problem": 32, "user": "4fb5033ce4b081705acca2b5"}, {"code": "mapcat (fn [x] (cons x (cons x nil)))", "problem": 32, "user": "4fb7b80ae4b081705acca2d4"}, {"code": "(fn [x] (loop [to []\r\n               from x] \r\n  (if (= 0 (count from)) (into '() (reverse to)) \r\n  (recur (conj (conj to (first from)) (first from)) (rest from)))))", "problem": 32, "user": "4ff78679e4b0678c553fc392"}, {"code": "(fn [s] (mapcat vector s s))", "problem": 32, "user": "500ea957e4b00fff93030f9b"}, {"code": "(fn this [w]\n;    (println w)\n;(let [ret\n     (\n       (fn clr [li]\n         (println \"li: \" li)\n;         (println \"li: \" li \", prev: \" prev)\n;         (println \"    \" 7 \", \" (list 7))\n;         (println \"    \" (list (first li)))\n;         (println \"    \" (rest li))\n;         (println \"        \" (not-empty li))\n         (if\n           (not-empty li)\n           (cons (first li) (cons (first li) (clr (rest li))))\n           '()\n         )\n       )\n       w\n     )\n;] (println \"ret: \" ret) ret)\n  )", "problem": 32, "user": "501819efe4b02f523d7cc5eb"}, {"code": "#(mapcat (fn [x] [x x]) %)", "problem": 32, "user": "4ff76222e4b0678c553fc38e"}, {"code": "#(interleave % %)", "problem": 32, "user": "4ee624f8535d93acb0a66855"}, {"code": "(fn [s]\n  ((fn [lst acc]\n     (if (empty? lst)\n       (reverse acc)\n       (recur (rest lst) (conj (conj acc (first lst)) (first lst)))))\n   s nil))", "problem": 32, "user": "50119c07e4b028e9d38b393f"}, {"code": "#(apply concat (map (partial repeat 2) %))", "problem": 32, "user": "501c2dfce4b0539218e73b39"}, {"code": "#(concat (interleave %1 %1))", "problem": 32, "user": "501d34f6e4b066e56b9d0b1e"}, {"code": "#(apply concat (map (fn [x] [x x]) %))", "problem": 32, "user": "501c76eae4b01d3bc87c0201"}, {"code": "#(reduce (fn [a b] (conj a b b)) [] %)", "problem": 32, "user": "500f336be4b03ec779321687"}, {"code": "#(apply interleave (take 2 (repeat %)))", "problem": 32, "user": "500ec491e4b00fff93030f9e"}, {"code": "#(loop [x % y %]\r\n  (if (empty? y)\r\n\t(sort x)\r\n\t(recur (conj x (first y)) (rest y))))", "problem": 32, "user": "5018eb4ee4b011a2e0bf6411"}, {"code": "(fn [x] (interleave x x))", "problem": 32, "user": "4e61bb60535d8ccf87e9fe5c"}, {"code": "#(for [x %1 y [1 2]] x)", "problem": 32, "user": "5012036ce4b0a040369c12f4"}, {"code": "(fn [x] (apply concat (map #(list % %) x)))", "problem": 32, "user": "5020d033e4b0cb6ebc0a42fa"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "501c1492e4b086d93747d180"}, {"code": "#(mapcat (fn [x] [x x]) %)", "problem": 32, "user": "4e6a5158535d8ccf87e9fec5"}, {"code": "(fn [s] (mapcat #(take 2 (repeat %)) s))", "problem": 32, "user": "4fcf642ee4b03432b189f410"}, {"code": "(fn [s] \n  (interleave s s))", "problem": 32, "user": "4f1e4ab5535d64f603146496"}, {"code": "#(reduce (fn [r v] (conj r v v)) '() (reverse %))", "problem": 32, "user": "500cc693e4b05f7c30cfa69a"}, {"code": "(fn [coll] \n  (reduce #(conj %1 %2 %2) [] coll))", "problem": 32, "user": "5025b93ce4b0c969f0b056df"}, {"code": "#(interleave % %)", "problem": 32, "user": "50223ee2e4b0846bc458ae48"}, {"code": "(fn [x]\n  (apply concat (map (fn [y] [y y]) x))\n)", "problem": 32, "user": "4fe610fde4b0e8f79898fece"}, {"code": "( fn   [seq] (apply concat ( map (fn [x]  ( take 2 ( cycle ( list x )  ) )  ) seq ) ) )", "problem": 32, "user": "5026916fe4b0c969f0b056e1"}, {"code": "mapcat #(repeat 2 (identity %))", "problem": 32, "user": "4f1af7e4535d64f603146471"}, {"code": "#(interleave % %)", "problem": 32, "user": "5020692be4b0cb6ebc0a42f6"}, {"code": "(fn [s]\n  (interleave s s))", "problem": 32, "user": "501dfd54e4b051153f3b5b80"}, {"code": "#(sort (apply list (apply conj % %)))", "problem": 32, "user": "50270618e4b01614d1633feb"}, {"code": "(fn [s] (mapcat (fn [x] [x x]) s))", "problem": 32, "user": "5027fc0ce4b01614d1633ff2"}, {"code": "reduce (fn [v x] (conj v x x)) []", "problem": 32, "user": "5028cd0fe4b01614d1633ffc"}, {"code": "(fn [xs]\n  (reverse (reduce #(conj (conj % %2) %2) '() xs)))", "problem": 32, "user": "4fb1325de4b081705acca276"}, {"code": "(fn [x]\n  (sort (concat x x)))", "problem": 32, "user": "5028bce0e4b01614d1633ffb"}, {"code": "#(apply concat (map (fn [x] (list x x)) %))", "problem": 32, "user": "502ac96de4b0614b5299611b"}, {"code": "(fn f [l]\n  (let [a (first l) b (next l)]\n    (concat [a] [a] (when b (f b)))))", "problem": 32, "user": "4e8a880b535d65386fec210d"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "502873a8e4b01614d1633ff8"}, {"code": "(fn [c]\n  (interleave c c))", "problem": 32, "user": "502a5fa4e4b09e8f859a9fbd"}, {"code": "mapcat #(repeat 2 %)", "problem": 32, "user": "502ad2cae4b0614b5299611f"}, {"code": "(fn dup-seq [s]\n  (if (empty? s)\n    '()\n    (let [h (first s)]\n      (cons h (cons h (dup-seq (rest s)))))))", "problem": 32, "user": "5027f37be4b01614d1633ff1"}, {"code": "(fn [x] (apply concat (map #(repeat 2 %) x)))", "problem": 32, "user": "4f2942ace4b0d6649770a01e"}, {"code": "(fn [c] \n  (reverse (reduce #(conj (conj %1 %2) %2) \n                   '() c)))", "problem": 32, "user": "501fa1aee4b0cb6ebc0a42eb"}, {"code": "(fn [x] (reduce concat (map #(take 2 (repeat %1)) x )))", "problem": 32, "user": "502952c9e4b0b33e9bf6fdf1"}, {"code": "(fn[x ](reduce concat (map #(repeat 2 %1) x)))", "problem": 32, "user": "4dfb7b81535d04ed9115e77d"}, {"code": "(fn [xs] (reduce #(concat %1 [%2 %2]) [] xs))", "problem": 32, "user": "502d387fe4b0d96a44ab202f"}, {"code": "reduce (fn [col val] (conj col val val)) []", "problem": 32, "user": "4fb01e53e4b081705acca260"}, {"code": "(fn [coll]\r\n  (apply concat (map #(vector %1 %2) coll coll)))", "problem": 32, "user": "4fdc067fe4b05e33b9224f69"}, {"code": "(fn [x]\n  (loop [i x retval '()]\n    (if (seq i)\n      (recur (rest i)\n             (conj (conj retval (first i)) (first i)))\n      (reverse retval)\n      )))", "problem": 32, "user": "5020a3fbe4b0cb6ebc0a42f8"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "4ff66816e4b0678c553fc37a"}, {"code": "(fn [x] (mapcat #(repeat 2 %) x))", "problem": 32, "user": "4dea9fae535d08e6dec9fe02"}, {"code": "#(let\n     [set-coll %1]\n   (let\n       [^:dynamic ret (atom ())]\n     (doseq [k set-coll]\n       (dotimes [n 2]\n         (swap! ret conj k)))\n     (reverse @ret)))", "problem": 32, "user": "4f601623e4b0defedf855fa3"}, {"code": "#(reduce concat (map (partial repeat 2) %))", "problem": 32, "user": "502a4fdfe4b09dd42f6f3644"}, {"code": "#(loop [col % c ()]\n  (if (empty? col)\n    (reverse c)\n  (recur (rest col)\n  (cons (first col) (cons (first col) c)))))", "problem": 32, "user": "502b04bee4b063e52107afac"}, {"code": "#(mapcat (partial repeat 2) %)", "problem": 32, "user": "502b0804e4b063e52107afad"}, {"code": "#(interleave % %)", "problem": 32, "user": "502904e0e4b0feaf66e22fad"}, {"code": "#(mapcat (fn [x] (list x x)) %)", "problem": 32, "user": "5030f16fe4b05b7df5a0b84b"}, {"code": "#(mapcat (fn [x] (list x x)) %)", "problem": 32, "user": "502bb7c0e4b0194ad32ea1a3"}, {"code": "#(interleave % %)", "problem": 32, "user": "502d39f8e4b0d96a44ab2032"}, {"code": "(fn [s]\n        (loop [f (first s) r (rest s) x '()]\n          (if (empty? r) (reverse (cons f (cons f x)))\n            (recur (first r) (rest r) (cons f (cons f x)))))\n      )", "problem": 32, "user": "5029fccee4b023940c84aa47"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "5032b066e4b00c0952a257ea"}, {"code": "#(interleave % %)", "problem": 32, "user": "503255d0e4b0e78df07b092b"}, {"code": "#(interleave % %)", "problem": 32, "user": "5032a96ae4b0e78df07b0932"}, {"code": "#(interleave % %)", "problem": 32, "user": "502cd12fe4b0532a782a5e39"}, {"code": "#(interleave % %)", "problem": 32, "user": "50336c6be4b0c6c1199c710f"}, {"code": "#(reduce into (map (fn [x] [x x]) %))", "problem": 32, "user": "5032b398e4b00c0952a257eb"}, {"code": "(fn [l] (reverse (reduce #(conj % %2 %2) '() l)))", "problem": 32, "user": "502cff22e4b0b2ab8d5c7e72"}, {"code": "(fn [coll] (reduce #(conj %1 %2 %2) [] coll))", "problem": 32, "user": "5033a1fbe4b062bc5d7ae155"}, {"code": "#(interleave % %)", "problem": 32, "user": "502a9fdee4b095a7adb898b4"}, {"code": "#(interleave % %)", "problem": 32, "user": "4e68d816535d8ccf87e9fe8e"}, {"code": "reduce #(-> %1 (conj %2) (conj %2) ) []", "problem": 32, "user": "4e952463535dbda64a6f6b31"}, {"code": "#(sort (apply conj % %))", "problem": 32, "user": "5034a14de4b062bc5d7ae165"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "50361b6be4b0fbe0a74d26be"}, {"code": "(fn duplicate[s]\n (loop [res()\n  \tlst (seq s)\n        indice 0\n        ]\n\t(if (< indice (count  s))\n\t\t(let [dato (first lst)\n              ]\n    \t  (recur (conj (conj res dato) dato) (next lst) (inc indice))\n         )\n      (sort res)\n     )\n\n  )\n\n  )", "problem": 32, "user": "50255bafe4b0b0b8afb15aa8"}, {"code": "#(interleave % %)", "problem": 32, "user": "5029131ae4b0b6c928ad61ff"}, {"code": "(fn [x] (mapcat #(list % %) x))", "problem": 32, "user": "5034b0e1e4b062bc5d7ae167"}, {"code": "#(sort(apply concat(repeat 2 %)))", "problem": 32, "user": "50291679e4b0b6c928ad6200"}, {"code": "(fn [s] (reverse (reduce #(conj % %2 %2) () s)))", "problem": 32, "user": "4f4f1b84e4b03ad3f0c10cda"}, {"code": "#(interleave  % %)", "problem": 32, "user": "4fc45c07e4b081705acca349"}, {"code": "#(reduce concat (map (fn [x] [x,x]) %))", "problem": 32, "user": "50352431e4b0a84c1d88f620"}, {"code": "#(reduce (fn [a b] (conj (conj a b) b)) [] %)", "problem": 32, "user": "4f3ae998e4b0e243712b1f1f"}, {"code": "(fn double [list]\n     (reduce concat (map (fn [x] (concat [x] [x])) list)))", "problem": 32, "user": "5038f8d2e4b088a6a14ca75f"}, {"code": "(fn [x] (reduce into (map #(vector % %) x)))", "problem": 32, "user": "4f2d5f5de4b0d6649770a05a"}, {"code": "(fn [x] (apply concat (map #(list % %) x)))", "problem": 32, "user": "503917a0e4b088a6a14ca763"}, {"code": "#(loop [coll % rst []]\n  (if (empty? coll)\n    rst\n    (recur (rest coll) (concat rst (repeat 2 (first coll))))))", "problem": 32, "user": "50399468e4b088a6a14ca768"}, {"code": "(fn [s] (reduce #(conj % %2 %2) [] s))", "problem": 32, "user": "503a234de4b088a6a14ca76d"}, {"code": "#(interleave % %)", "problem": 32, "user": "502d4ea0e4b02fc10c6c6e46"}, {"code": "#(mapcat (fn [c] (list c c)) %)", "problem": 32, "user": "5035503de4b0ed9c821488f8"}, {"code": "(fn [lst]\n  (apply concat (map (partial repeat 2) lst)))", "problem": 32, "user": "4f58d92fe4b0a7574ea71858"}, {"code": "#(interleave % %)", "problem": 32, "user": "503354c3e4b0c6c1199c710c"}, {"code": "#(mapcat (fn [x] [x x]) %)", "problem": 32, "user": "503b6995e4b07a1917cc34dd"}, {"code": "#(interleave % %)", "problem": 32, "user": "5036dea0e4b0af0658af77a4"}, {"code": "(fn [xs] ((fn [n] (apply interleave (take n (repeat xs)))) 2))", "problem": 32, "user": "503be1f0e4b0fc0f99c2e549"}, {"code": "(fn dupl [x]\n  (if (= x [])\n    []\n    (conj (dupl (reverse (rest (reverse x)))) (last x) (last x))))", "problem": 32, "user": "50013694e4b0678c553fc417"}, {"code": "(fn [e] (mapcat #(take 2 (repeat %)) e))", "problem": 32, "user": "502940a9e4b061fd216be4b8"}, {"code": "(fn anon [x]\n  (cond\n    (empty? x) []\n    true (into [(first x)] (into [(first x)] (anon (rest x))))))", "problem": 32, "user": "503cc8cae4b06c4e0e1fa251"}, {"code": "; interleave solution based on immo's solution\n#(interleave % %)\n\n; original solution\n;(fn dup\n;  [s]\n;    (reverse\n;      (reduce \n;        #(cons %2 (cons %2 %1))\n;        '() s)))", "problem": 32, "user": "4fea7594e4b0140c20fb9c06"}, {"code": "(fn [coll] (interleave coll coll))", "problem": 32, "user": "4f030a38535dcb61093f6a47"}, {"code": "(fn [x] (interleave x x))", "problem": 32, "user": "500a214de4b03d00572d2d74"}, {"code": "(fn [xs] (reverse (reduce (fn [a x] (cons x (cons x a))) [] xs)))", "problem": 32, "user": "503d129fe4b06c4e0e1fa254"}, {"code": "(fn [s]\n  ((fn _dup [s a]\n     (let [[h & r] s]\n       (if (nil? h) a\n           (_dup r (concat a [h h]))\n           ))) s []))", "problem": 32, "user": "503ca47fe4b06c4e0e1fa24f"}, {"code": "(fn [x](reduce concat (map #(list % %) x)))", "problem": 32, "user": "503c02e5e4b0fc0f99c2e54e"}, {"code": "#(apply concat (map (fn [a] (vector a a)) %))", "problem": 32, "user": "503f923fe4b00d1a725ff2ad"}, {"code": "#(mapcat identity (for [x %] [x x]))", "problem": 32, "user": "4f038ed6535dcb61093f6b24"}, {"code": "reduce #(conj % %2 %2) []", "problem": 32, "user": "5036eba7e4b0af0658af77a5"}, {"code": "(fn [x] (interleave x x))", "problem": 32, "user": "4db5708d535d87e67b28fe0c"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "4f74a4fbe4b044e54cd9a901"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "50293245e4b08353e5d459cf"}, {"code": "(fn [s] (mapcat (fn [x] [x x]) s))", "problem": 32, "user": "503de5aae4b06c4e0e1fa259"}, {"code": "(fn [coll] (interleave coll coll))", "problem": 32, "user": "5012ec0ae4b0c87326002230"}, {"code": "#(interleave % %)", "problem": 32, "user": "502d39c5e4b0d96a44ab2031"}, {"code": "#(interleave % %)", "problem": 32, "user": "4e8708e3535dceadca46984e"}, {"code": "(fn [s]\n  (mapcat\n    (fn [x] [x x])\n    s))", "problem": 32, "user": "50427899e4b0add3005c0fc2"}, {"code": "(partial mapcat (partial repeat 2))", "problem": 32, "user": "4fcf763de4b03432b189f413"}, {"code": "#(interleave % %)", "problem": 32, "user": "503ea917e4b06c4e0e1fa26b"}, {"code": "#(mapcat (fn [a] [a a]) %)", "problem": 32, "user": "4fd81472e4b0dab7d829f38e"}, {"code": "(fn [input] (reduce #(conj (conj % %2) %2) [] input))", "problem": 32, "user": "4fb266a5e4b081705acca28c"}, {"code": "#(interleave % %)", "problem": 32, "user": "5008d149e4b0144d4f561e41"}, {"code": "#(interleave % %)", "problem": 32, "user": "4db0114d838c48654951d9b8"}, {"code": "(fn [l]\n  (apply concat\n    (map (fn [e] [e e]) l)))", "problem": 32, "user": "50435852e4b034ff00315d22"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "50431cbce4b034ff00315d1c"}, {"code": "(fn dup\n  [xs]\n  (if (not-empty xs)\n    (cons (first xs)\n      (cons (first xs)\n        (dup (rest xs))))))", "problem": 32, "user": "4fab1ea1e4b081705acca210"}, {"code": "#(mapcat (partial repeat 2) %)", "problem": 32, "user": "4e7d9257535db169f9c796dd"}, {"code": "#(interleave % %)", "problem": 32, "user": "50378996e4b0af0658af77ae"}, {"code": "#(interleave % %)", "problem": 32, "user": "503be880e4b0fc0f99c2e54a"}, {"code": "(fn [coll]\n  (loop [res [] s coll]\n    (let [a (first s)]\n      (if (nil? a)\n       res\n      (recur (conj (conj res a) a) (rest s))))))", "problem": 32, "user": "5031eb3be4b000fc67a99a84"}, {"code": "reduce #(conj % %2 %2) []", "problem": 32, "user": "5046b003e4b011c5dfee7727"}, {"code": "reduce #(conj % %2 %2) []", "problem": 32, "user": "50464831e4b011c5dfee771f"}, {"code": "#(interleave % %)", "problem": 32, "user": "50479524e4b0371827a27bc4"}, {"code": "(fn [s]\n (reduce #(conj %1 %2 %2)  [] s)\n)", "problem": 32, "user": "5048202fe4b0ec70b3ef8d9a"}, {"code": "#(apply concat (map (fn [x] (list x x)) %))", "problem": 32, "user": "4f902831e4b0dcca54ed6c8b"}, {"code": "#(interleave % %)", "problem": 32, "user": "50432da5e4b034ff00315d1e"}, {"code": "(fn [xs] (reduce #(conj %1 %2 %2) [] xs))", "problem": 32, "user": "50254dace4b0b0b8afb15aa6"}, {"code": "(fn [coll] (apply concat (map #(take 2 (cycle (list %))) coll)))", "problem": 32, "user": "50481532e4b0ec70b3ef8d96"}, {"code": "#(loop [col % ret []]  (if (empty? col) ret (recur (rest col) (conj ret (first col) (first col)  ))))", "problem": 32, "user": "50463347e4b011c5dfee771e"}, {"code": "(fn [x] \n  (reduce #(concat %1 %2) \n      (map (partial repeat 2 ) x)))", "problem": 32, "user": "5047bbd1e4b0ec70b3ef8d90"}, {"code": "(fn [s] (loop [ss s r []] (if (empty? ss) r (recur (next ss) (conj (conj r (first ss)) (first ss))))))", "problem": 32, "user": "503e7f06e4b06c4e0e1fa268"}, {"code": "(fn [x]\n   (mapcat #(vector % % ) x))", "problem": 32, "user": "4f616892e4b0defedf855fbf"}, {"code": "#(interleave % %)", "problem": 32, "user": "5045ac21e4b01f6c9a8b2371"}, {"code": "#(interleave % %)", "problem": 32, "user": "4f702dcae4b07046d9f4eff4"}, {"code": "#(interleave % %)", "problem": 32, "user": "504457c0e4b01f6c9a8b2360"}, {"code": "(fn [coll] (reduce concat (map #(list % %) coll)))", "problem": 32, "user": "504d0116e4b022602c20b089"}, {"code": "mapcat #(repeat 2 %)", "problem": 32, "user": "5041b3c0e4b06d8231e4facf"}, {"code": "(fn f [s]\n  (let [[kar & remainder] s]\n    (if (empty? s)\n      s\n      (cons kar (cons kar (f remainder)))\n    )\n  )\n)", "problem": 32, "user": "5043a536e4b034ff00315d24"}, {"code": "(fn d [s] (when-let [f (first s)] (lazy-cat [f f] (d (rest s)))))", "problem": 32, "user": "4faa8de0e4b081705acca1f8"}, {"code": "(fn [col]\n  (mapcat #(vec [% %]) col))", "problem": 32, "user": "4db2cc55535df7e46ed9b6c5"}, {"code": "(partial mapcat #(list % %))", "problem": 32, "user": "504e14c2e4b078edc5f593bf"}, {"code": "(fn dup [s]\n  (if\n    (empty? s) '()\n    (conj \n      (dup (rest s)) (first s) (first s))))", "problem": 32, "user": "504e48ace4b0f6ff3350c498"}, {"code": "(fn [s] (mapcat identity\n    (map (fn [x] (cons x (cons x '()))) s)))", "problem": 32, "user": "504e685fe4b0f6ff3350c4ae"}, {"code": "#(seq (reduce (fn [xs x] (conj xs x x)) [] %))", "problem": 32, "user": "504e2600e4b0f6ff3350c46f"}, {"code": "(fn [xs] (mapcat #(repeat 2 %) xs))", "problem": 32, "user": "504e13fce4b078edc5f593bc"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "504ed350e4b069badc5a33d1"}, {"code": "#(mapcat (fn [x] (repeat 2 x )) %)", "problem": 32, "user": "504eff22e4b0e7ad84dbc4a9"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "504e397ee4b0f6ff3350c485"}, {"code": "(fn dup [l]\n  (if (empty? l)\n      nil\n      (cons (first l) (cons (first l) (dup (rest l))))))", "problem": 32, "user": "504e3afae4b0f6ff3350c488"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "504dff92e4b078edc5f5938a"}, {"code": "(fn [x]\n  (loop [x x r []]\n    (if (empty? x) r (recur (rest x) \n      (concat r [(first x) (first x)])))))", "problem": 32, "user": "4dd29ede535dae65d5c462da"}, {"code": "(fn duper [sequ]\n  (let [s (seq sequ)]\n    (lazy-seq\n      (loop [f (first s)\n             r (rest s)\n             result (list)]\n        (println \"f: \"f\" r: \"r\" result: \"result)\n        (if (empty? r)\n          (reverse (concat (repeat 2 f) result))\n          (recur\n            (first r)\n            (rest r)\n            (concat (repeat 2 f) result)))))))", "problem": 32, "user": "5020d2aee4b0cb6ebc0a42fb"}, {"code": "#(interleave % %)", "problem": 32, "user": "504e9011e4b069badc5a33b7"}, {"code": "(fn [s] (reduce concat (map (partial repeat 2) s)))", "problem": 32, "user": "504e108ce4b078edc5f593b3"}, {"code": "#(seq (sort (apply conj % (map identity %))))", "problem": 32, "user": "504e2333e4b0f6ff3350c46c"}, {"code": "(fn [s] (mapcat (partial repeat 2) s))", "problem": 32, "user": "504e9f5ce4b069badc5a33bd"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "504f2071e4b0e7ad84dbc4be"}, {"code": "(fn [s] (mapcat #(vector % %) s))", "problem": 32, "user": "4fc5a693e4b0ee37620e17fc"}, {"code": "(fn [xs]\n  (reverse\n    (reduce #(cons %2 (cons %2 %1)) \n'()\nxs)))", "problem": 32, "user": "504f5804e4b0a02f9cffde72"}, {"code": "(fn [xs] (reduce #(conj %1 %2 %2) (cons [] xs)))", "problem": 32, "user": "5050b107e4b063148f524126"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "50456731e4b01f6c9a8b236b"}, {"code": "#(interleave % %)", "problem": 32, "user": "50436470e4b034ff00315d23"}, {"code": "#(sort (into % %))", "problem": 32, "user": "4e68c465535d8ccf87e9fe8a"}, {"code": "#(reverse\n  (reduce (fn [lst elt] (cons elt (cons elt lst)))\n          '()\n          %))", "problem": 32, "user": "504e1fdde4b0f6ff3350c468"}, {"code": "(fn [l] (reduce (fn [x y] (conj x y y)) [] l))", "problem": 32, "user": "504e7b88e4b069badc5a33ad"}, {"code": "(fn f [xs]\n  (if (empty? xs)\n    '()\n    (cons (first xs) (cons (first xs) (lazy-seq (f (rest xs)))))))", "problem": 32, "user": "504f865ee4b0a02f9cffde90"}, {"code": "(fn [xs] (reduce (fn [coll x] (cons x (cons x coll))) '() (reverse xs)))", "problem": 32, "user": "4dd59d8b535dae65d5c462eb"}, {"code": "(fn [n] (interleave n n))", "problem": 32, "user": "50435689e4b034ff00315d21"}, {"code": "(fn [s]\n  (mapcat #(list % %) s))", "problem": 32, "user": "4e75edfe535d7a570dd295c7"}, {"code": "mapcat (fn [x] [x x])", "problem": 32, "user": "504e1abee4b0f6ff3350c45d"}, {"code": "mapcat #(repeat 2 %)", "problem": 32, "user": "5051e2c0e4b0a561d07d8f0b"}, {"code": "#(interleave % %)", "problem": 32, "user": "5048f98ee4b06e644c63f1af"}, {"code": "(fn dupl [seq]\n  (if (empty? seq)\n    ()\n    (cons (first seq) \n          (cons (first seq) (dupl (rest seq))))))", "problem": 32, "user": "503e6047e4b06c4e0e1fa266"}, {"code": "#(interleave % %)", "problem": 32, "user": "4ebbc1f6535dfed6da9c6d72"}, {"code": "(fn [xs]\n  (reverse (reduce #(cons %2 (cons %2 %1)) '() xs)))", "problem": 32, "user": "5054c853e4b0b1b9d1860eb3"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "504e04a4e4b078edc5f59397"}, {"code": "mapcat #(do [% %])", "problem": 32, "user": "50548ce8e4b0b1b9d1860ead"}, {"code": "#(mapcat (fn [x] (list x x)) %1)", "problem": 32, "user": "50555c06e4b0ce54f56f03fa"}, {"code": "(fn [s]         (reduce #(conj % %2 %2) [] s))", "problem": 32, "user": "5055899de4b0ce54f56f03fd"}, {"code": "#(reduce concat (map (fn [x] [x x]) %1))", "problem": 32, "user": "504f2efae4b0e7ad84dbc4c9"}, {"code": "#(interleave % %)", "problem": 32, "user": "5053de37e4b0b1b9d1860ea8"}, {"code": "mapcat (partial repeat 2)", "problem": 32, "user": "4ff769bce4b0678c553fc38f"}, {"code": "#(apply concat (map (partial replicate 2) %))", "problem": 32, "user": "504f57c7e4b0a02f9cffde71"}, {"code": "(fn [xs]\r\n  (reduce concat (map (fn [x] (list x x)) xs)))", "problem": 32, "user": "5052ab7ee4b0a561d07d8f20"}, {"code": "(fn [xs] (mapcat (fn [x] [x x]) xs))", "problem": 32, "user": "5042de0de4b034ff00315d1b"}, {"code": "(fn [s] (mapcat #(list % %) s))", "problem": 32, "user": "504ec4d3e4b069badc5a33c9"}, {"code": "#(interleave % %)", "problem": 32, "user": "5048bcf8e4b06e644c63f1ae"}, {"code": "#(interleave % %)", "problem": 32, "user": "504c8165e4b09724c857af31"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "5040edf4e4b0ff5d2cc40db5"}, {"code": "#(apply concat (for [x %1] [x x]))", "problem": 32, "user": "5057242fe4b0012181721986"}, {"code": "(fn [l] (reverse (reduce #(conj %1 %2 %2) '() l)))", "problem": 32, "user": "502ade49e4b0614b52996120"}, {"code": "(fn [l] (reduce concat (map (partial repeat 2) l)))", "problem": 32, "user": "50481b70e4b0ec70b3ef8d98"}, {"code": "(fn [x] (reduce (fn [a x] (concat a (list x x))) '() x))", "problem": 32, "user": "504f3f13e4b0a02f9cffde60"}, {"code": "#(interleave % %)", "problem": 32, "user": "504f8334e4b0a02f9cffde8e"}, {"code": "(fn [x] (interleave x x))", "problem": 32, "user": "504f3fa3e4b0a02f9cffde62"}, {"code": "(fn [c] (into (empty c) (interleave c c)))", "problem": 32, "user": "4fca2a13e4b0ee37620e184d"}, {"code": "#(interleave % %)", "problem": 32, "user": "50586354e4b06522596eba78"}, {"code": "(fn [ls]\r\n  (loop [x ls\r\n       y []]\r\n  (if (empty? x)\r\n  y\r\n  (recur (rest x) (conj y (first x)(first x))))))", "problem": 32, "user": "4f9aa97ae4b0dcca54ed6d0e"}, {"code": "#(apply interleave (repeat 2 %))", "problem": 32, "user": "4fc6e1a8e4b0ee37620e181d"}, {"code": "(fn [x] (reverse (reduce into (map #(list %1 %2) x x))))", "problem": 32, "user": "50517ebfe4b0a561d07d8f06"}, {"code": "(fn [y] (reduce concat (map (fn [x] (list x x)) y)))", "problem": 32, "user": "504e8e48e4b069badc5a33b3"}, {"code": "#(interleave % %)", "problem": 32, "user": "5005b57de4b0678c553fc46a"}, {"code": "(fn [coll]\n  (mapcat #(repeat 2 %) coll))", "problem": 32, "user": "505bd09fe4b032b709c81373"}, {"code": "#(loop [CONSUME '() PRODUCE %]\n  (if (empty? PRODUCE)\n    CONSUME\n    (recur (concat CONSUME (list (first PRODUCE) (first PRODUCE))) (rest PRODUCE))))", "problem": 32, "user": "505a2f3be4b03d2efce48c5b"}, {"code": "(fn [coll]\n  (apply concat (map #(do [%1 %1]) coll)))", "problem": 32, "user": "5041bdf3e4b06d8231e4fad0"}, {"code": "(fn [lst] (reduce #(concat %1 (list %2 %2)) () lst))", "problem": 32, "user": "50563ae2e4b0ce54f56f0405"}, {"code": "(fn [y] (mapcat (fn [x] [x x]) y))", "problem": 32, "user": "4ed98b40535d10e5ff6f5307"}, {"code": "#(apply concat (map (fn [e] (repeat 2 e)) %))", "problem": 32, "user": "505b9084e4b032b709c81371"}, {"code": "(fn dup [x]\n  (if (empty? x) x\n      (cons (first x) (cons (first x) (dup (rest x))))))", "problem": 32, "user": "50588af1e4b06522596eba7d"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "505d26aee4b0e6aca564be05"}, {"code": "#(reduce (fn [t e] (conj (conj t e) e)) [] %)", "problem": 32, "user": "50588ff1e4b06522596eba7e"}, {"code": "(fn [coll]\n  (loop [x coll\n         out []\n         c 0]\n    (if (= (count x) c) out\n      (let [z (get x c)]\n         (recur x (conj (conj out z) z) (inc c))))))", "problem": 32, "user": "505aa653e4b021387fb89857"}, {"code": "#(interleave % %)", "problem": 32, "user": "4f046d70535dcb61093f6bc5"}, {"code": "(fn d [xs] \n  (if (empty? xs) ()\n    (let [x (first xs)]\n      (cons x (cons x (d (rest xs)))))))", "problem": 32, "user": "5055e7f4e4b0ce54f56f0401"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "50602bc6e4b08f2a82ad10ba"}, {"code": "(fn [lista]\n    (letfn [\n            (duplicar [lista1 contador lista2]\n                     (\n                      cond\n                          (= '() lista1) (reverse lista2)\n                          (= 0 contador) (duplicar (rest lista1) 2 lista2)\n                          :default (duplicar lista1 (- contador 1) (cons (first lista1) lista2 ))\n                       )\n              )\n           ]\n           (duplicar lista 2 '())\n      )\n\n  )", "problem": 32, "user": "5058afbbe4b06522596eba81"}, {"code": "(fn [x] (interleave x x))", "problem": 32, "user": "504f65bae4b0a02f9cffde7e"}, {"code": "(fn [y] (reduce concat (map (fn [x] [x x]) y)))", "problem": 32, "user": "505caadfe4b0bcb5664c3d3e"}, {"code": "#(interleave % %)", "problem": 32, "user": "5054bc87e4b0b1b9d1860eb0"}, {"code": "(fn [lst]\n  (loop [inlist lst outlist []]\n    (if (empty? inlist)\n      outlist\n      (recur \n        (rest inlist) \n        (concat outlist [(first inlist) (first inlist)])))))", "problem": 32, "user": "5060d137e4b0dc10a69545a0"}, {"code": "(fn [s]\n  (reduce #(concat %1 (list %2 %2)) '() s))", "problem": 32, "user": "504ec46de4b069badc5a33c8"}, {"code": "#(let [my-flatten (fn my-flatten [v] \n                    (if (empty? v)\n                        []\n                        (cons (first (first v)) \n                              (cons (second (first v)) \n                                    (my-flatten (rest v))))))] \n  (my-flatten (for [x %] [x x])))", "problem": 32, "user": "50310b8be4b05b7df5a0b84d"}, {"code": "mapcat (fn [x] [x x])", "problem": 32, "user": "4e5cff93535d8a8b8723a2c7"}, {"code": "(partial mapcat #(list % %))", "problem": 32, "user": "505f55d3e4b08f2a82ad10b0"}, {"code": "(fn dup [[h & t]]\n  (cons h\n    (cons h\n      (when (seq t)\n        (dup t)))))", "problem": 32, "user": "504e72cee4b0f6ff3350c4b4"}, {"code": "#(interleave % %)", "problem": 32, "user": "50090fc7e4b0144d4f561e44"}, {"code": "#(interleave % %)", "problem": 32, "user": "505d4b21e4b0e6aca564be07"}, {"code": "#(interleave % %)", "problem": 32, "user": "50630247e4b05ac47bc68d6b"}, {"code": "(fn [s] (interleave s s))", "problem": 32, "user": "50366589e4b0fbe0a74d26c3"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "5063b9a0e4b075d771da6f9d"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "505fc8e3e4b08f2a82ad10b6"}, {"code": "#(interleave % %)", "problem": 32, "user": "5063fe48e4b075d771da6f9e"}, {"code": "reduce\n#(conj (conj % %2) %2)\n[]", "problem": 32, "user": "5054c7e1e4b0b1b9d1860eb2"}, {"code": "mapcat #(seq [% %])", "problem": 32, "user": "504e3aaae4b0f6ff3350c487"}, {"code": "(fn [l] (apply concat \n  (map (fn[i] (list i i)) l)))", "problem": 32, "user": "4f8b05d2e4b02e764a0a5176"}, {"code": "#(interleave % %)", "problem": 32, "user": "50645e12e4b007509339a58a"}, {"code": "reduce #(conj % %2 %2) []", "problem": 32, "user": "50668a06e4b03d366d7cb2b2"}, {"code": "reduce #(concat %1 [%2 %2]) '()", "problem": 32, "user": "505dcfc8e4b0e6aca564be0d"}, {"code": "reduce #(conj (conj % %2) %2) []", "problem": 32, "user": "505e3b57e4b011187b721f39"}, {"code": "#(interleave % %)", "problem": 32, "user": "506617c3e4b03d366d7cb2ab"}, {"code": "(fn [x] (mapcat (fn [y] [y y]) x))", "problem": 32, "user": "50678be5e4b03d366d7cb2c0"}, {"code": "#(interleave % %)", "problem": 32, "user": "4f72147ae4b07046d9f4f01b"}, {"code": "(fn [s]\n  (loop [src s result []]\n    (if (empty? src)\n      result\n      (recur (rest src) (conj result (first src) (first src))))))", "problem": 32, "user": "504db141e4b021508a333965"}, {"code": "reduce (fn [s el] (conj s el el)) []", "problem": 32, "user": "5060c117e4b024449d699b5d"}, {"code": "#(interleave % %)", "problem": 32, "user": "5065faf9e4b0313a384e5645"}, {"code": "(fn [s]\n  (interleave s s))", "problem": 32, "user": "5057852ce4b0012181721992"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "50657775e4b0deb876850599"}, {"code": "(fn [x](reduce #(conj (conj % %2) %2) [] x))", "problem": 32, "user": "50646c01e4b007509339a58b"}, {"code": "(fn [x] \n    (apply concat\n      (map #(vector % %) x)\n    )\n)", "problem": 32, "user": "504f191ae4b0e7ad84dbc4ba"}, {"code": "#(interleave % %)", "problem": 32, "user": "50573ed8e4b0012181721987"}, {"code": "(fn [xs]\n  (loop [i (count xs) re xs ne []]\n    (if (> i 0)\n      (recur (dec i) (drop 1 re) (conj ne\n        (first re) (first re)))\n      ne)))", "problem": 32, "user": "50611456e4b0dc10a69545a5"}, {"code": "(fn [values] (sort(into values values)))", "problem": 32, "user": "50621cbde4b0341461c88951"}, {"code": "#(interleave % %)", "problem": 32, "user": "4fd769a1e4b0dab7d829f382"}, {"code": "#(apply concat (map (fn [x] [x x]) %))", "problem": 32, "user": "506a1985e4b01dc6af13f83e"}, {"code": "(fn dup-els [s]\n  (when (seq s) (let [[f & r] s] (cons f (cons f (dup-els r)))))\n  )", "problem": 32, "user": "506ab9bae4b05d3b7762c74c"}, {"code": "(fn f [[v & r]] (cons v (cons v (if r (f r)))))", "problem": 32, "user": "4edb4c7c535d10e5ff6f5318"}, {"code": "(fn [x] (reverse (reduce #(cons %2 (cons %2 %1)) '() x)))", "problem": 32, "user": "505c6432e4b032b709c81378"}, {"code": "reduce #(concat % [%2 %2]) []", "problem": 32, "user": "5061cc17e4b0a30dc9a35d34"}, {"code": "(fn [xs]\n    (mapcat (fn [x] [x x]) xs))", "problem": 32, "user": "506b0a9ce4b0a2a5463de380"}, {"code": "(fn [v] (reduce #(conj %1 %2 %2) [] v))", "problem": 32, "user": "506717e2e4b03d366d7cb2ba"}, {"code": "(fn dup[s]\n  (if (empty? s)\n    s\n    (let [x (first s)]\n      (cons x (cons x (dup (rest s)))))))", "problem": 32, "user": "504e24e2e4b0f6ff3350c46d"}, {"code": "(fn [s]\n  (apply concat (for [x s] (list x x))))", "problem": 32, "user": "506b18c8e4b0a2a5463de383"}, {"code": "(fn [coll] (mapcat (partial repeat 2) coll))", "problem": 32, "user": "506b8242e4b0eda3100c090a"}, {"code": "(fn dupl[v]\n  (reduce  #(conj (conj %1 %2) %2) [] v\n))", "problem": 32, "user": "5065bd94e4b0148eb3925aed"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "506e0e5ae4b09350ab4199eb"}, {"code": "(fn [coll]\n  (reverse (reduce #(conj %1 %2 %2) '() coll)))", "problem": 32, "user": "506755b3e4b03d366d7cb2bc"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "506ef8c3e4b09350ab4199f4"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "506fd0afe4b07bd6ad9b9f23"}, {"code": "(fn dup [x]\n     (if (empty? x)\n       nil\n       (concat\n         [(first x) (first x)]\n         (dup (next x)))))", "problem": 32, "user": "503efe01e4b06c4e0e1fa26f"}, {"code": "#(interleave % %)", "problem": 32, "user": "507056b8e4b07bd6ad9b9f29"}, {"code": "mapcat #(vector % %)", "problem": 32, "user": "50705072e4b07bd6ad9b9f27"}, {"code": "(partial reduce #(conj (conj %1 %2) %2) [])", "problem": 32, "user": "4f3b5219e4b0e243712b1f2a"}, {"code": "#(interleave % %)", "problem": 32, "user": "503f872ee4b00d1a725ff2ac"}, {"code": "#(interleave % %)", "problem": 32, "user": "4e77c1db535d324fb2983d72"}, {"code": "#(interleave % %)", "problem": 32, "user": "5071b614e4b0e3170b5a867d"}, {"code": "(fn [s] (mapcat #(list % %) s ))", "problem": 32, "user": "5071e520e4b0e3170b5a8683"}, {"code": "#(interleave % %)", "problem": 32, "user": "506b016de4b0a2a5463de37f"}, {"code": "(fn [l]\n  ((fn [res todo]\n      (if (= (count todo) 0)\n        res\n        (recur \n          (concat res [(first todo) (first todo)])\n          (rest todo)\n        )\n      )\n  ) [] l)\n)", "problem": 32, "user": "506ec408e4b09350ab4199f1"}, {"code": "(partial mapcat (partial repeat 2))", "problem": 32, "user": "50729f67e4b0e3170b5a868e"}, {"code": "#(interleave % %)", "problem": 32, "user": "50618c62e4b0a30dc9a35d33"}, {"code": "(fn dupli\n  [coll]\n  (loop [s coll result []]\n    (if (empty? s)\n      result\n      (recur (rest s) (concat result (repeat 2 (first s)))))))", "problem": 32, "user": "5046f909e4b03b02161376b5"}, {"code": "reduce #(concat %1 [%2 %2]) []", "problem": 32, "user": "5062bc46e4b05ac47bc68d68"}, {"code": "#(sort (concat % %))", "problem": 32, "user": "505dd5c4e4b0e6aca564be0e"}, {"code": "#(interleave % %)", "problem": 32, "user": "50576483e4b001218172198b"}, {"code": "#(interleave % %)", "problem": 32, "user": "505f5e2fe4b08f2a82ad10b2"}, {"code": "#(interleave % %)", "problem": 32, "user": "507437c2e4b054001656acd0"}, {"code": "(fn dup-seq [lst]\n  (apply concat (map #(vec [% %]) lst)))", "problem": 32, "user": "50763574e4b0a894bb95bf3d"}, {"code": "(fn [lst]\n (mapcat (fn [x] [x x]) lst))", "problem": 32, "user": "4fc7ddffe4b0ee37620e182b"}, {"code": "reduce #(conj (conj %1 %2) %2) []", "problem": 32, "user": "5075d655e4b09049dea827a3"}, {"code": "#(interleave % %)", "problem": 32, "user": "50783762e4b0fc74642bff67"}, {"code": "mapcat #(vector % %)", "problem": 32, "user": "4f32ef71e4b0d6649770a098"}, {"code": "(fn [col] flatten (mapcat #(list % %) col))", "problem": 32, "user": "507a08e4e4b08327cd804a67"}, {"code": "#(interleave % %)", "problem": 32, "user": "5073de20e4b054001656acca"}, {"code": "(fn dup1p[a] \n  (\n    (fn inn [a1 seqq] \n      (if (= (count a1) 0) \n        seqq \n        (let [g (take (- (count a1) 1) a1)] \n          (inn g (conj (conj seqq (last a1)) (last a1))))\n)\n) a (list) ))", "problem": 32, "user": "506f5d68e4b082ae7d1032c7"}, {"code": "#(interleave % %)", "problem": 32, "user": "5074b3ece4b054001656acd5"}, {"code": "#(mapcat list % %)", "problem": 32, "user": "507b7dbee4b09034bfeeb71e"}, {"code": "#(apply concat (map (fn [a] [a a]) %))", "problem": 32, "user": "4fb1d7ace4b081705acca281"}, {"code": "(fn [coll] \n   (mapcat #(repeat 2 %) coll))", "problem": 32, "user": "507a9b29e4b08327cd804a6e"}, {"code": "#(interleave % % )", "problem": 32, "user": "50799992e4b08327cd804a62"}, {"code": "(fn [n]\n  (reduce \n   (fn [xs, x] (concat xs [x,x])) [] n))", "problem": 32, "user": "507c4829e4b0a19f8e876e57"}, {"code": "#(interleave %1 %1)", "problem": 32, "user": "5034b623e4b062bc5d7ae168"}, {"code": "(fn dup* [s]\n  (if (or (nil? s) (= () s)) s\n      (cons (first s) (cons (first s) (dup* (rest s))))))", "problem": 32, "user": "507db411e4b03c76e5499e06"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "507eed82e4b06ce648bcdbfe"}, {"code": "(fn [v]\n  (loop [doubled (list) r v]\n    (if-not (seq r)\n      (reverse doubled)\n      (recur (cons (first r) (cons (first r) doubled)) (rest r)))))", "problem": 32, "user": "507bb3ece4b09034bfeeb720"}, {"code": "mapcat #(repeat 2 %)", "problem": 32, "user": "5060ae00e4b07251188e4459"}, {"code": "(fn ds [s] (mapcat #(list % %) s))", "problem": 32, "user": "507eddf4e4b06ce648bcdbfa"}, {"code": "#(interleave % %)", "problem": 32, "user": "4e72dd5d535d5021c1a89667"}, {"code": "#(interleave % %)", "problem": 32, "user": "5007cdb9e4b0b17c647f5227"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "5065b810e4b0148eb3925aec"}, {"code": "(fn dupe [[s & rest]]\n  (lazy-seq (concat [s s] (when rest (dupe rest)))))", "problem": 32, "user": "50812debe4b01a93d3f38e4c"}, {"code": "#(loop [r '() coll %] \n  (if (empty? coll) r \n    (recur (concat  r (take 1 coll) (take 1 coll)) \n(drop 1 coll))))", "problem": 32, "user": "507c7c8be4b0b083f3ff82ef"}, {"code": "#(interleave % %)", "problem": 32, "user": "4fda108ee4b05e33b9224f46"}, {"code": "(fn [x]\n  (loop [v x acc []]\n  (if (empty? v) \n      (reverse acc)\n      (recur (rest v) (concat (list (first v) (first v)) acc)))))", "problem": 32, "user": "5080d6e3e4b01a93d3f38e4b"}, {"code": "#(interleave % %)", "problem": 32, "user": "50807940e4b01a93d3f38e44"}, {"code": "#(mapcat (fn [y] [y y]) %)", "problem": 32, "user": "507ef25ce4b0f753b6f9788e"}, {"code": "(fn dup [xs]\n  (apply concat\n    (for [x xs]\n         [x x])))", "problem": 32, "user": "508157b2e4b0946d0443855c"}, {"code": "#(sort (concat % %))", "problem": 32, "user": "501668b4e4b052339a490e77"}, {"code": "(fn [coll]\r\n   (sort (clojure.set/union coll coll)))", "problem": 32, "user": "4e028764535d04ed9115e790"}, {"code": "(fn derp [sequence]\n  (loop [my-col '()\n         their-seq sequence]\n    (if (empty? their-seq)\n      (reverse my-col)\n      (recur\n        (conj my-col (first their-seq) (first their-seq))\n        (rest their-seq)))))", "problem": 32, "user": "4f5576c2e4b0a7574ea71801"}, {"code": "(fn [s]\n   (reverse\n   (reduce (fn [l x] (conj (conj l x) x))\n           '()\n           s)))", "problem": 32, "user": "5084cb7de4b0fb8f40674bfb"}, {"code": "#(interleave % %)", "problem": 32, "user": "4f7beb36e4b06e829148e1ab"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "507e68abe4b085af06e3afd2"}, {"code": "#(interleave % %)", "problem": 32, "user": "504e0136e4b078edc5f5938e"}, {"code": "(fn [xs] (->> xs\n  (map #(list % %))\n  (apply concat)))", "problem": 32, "user": "507a396be4b08327cd804a69"}, {"code": "(fn myf [x] \n  (if (= 0 (count x))\n  '()\n  (conj (myf (rest x)) (first x) (first x))\n  )\n)", "problem": 32, "user": "506b437de4b0eda3100c0906"}, {"code": "#(interleave % %)", "problem": 32, "user": "5088082ae4b0198722bd9854"}, {"code": "(fn duplicate [coll]\r\n  (reduce concat (map #(repeat 2 %) coll) ))", "problem": 32, "user": "502ac868e4b0614b5299611a"}, {"code": "#(mapcat vec (map vector % %))", "problem": 32, "user": "5013193ae4b0f26a0e3320ab"}, {"code": "(fn [s]\n  (loop [s s ds []]\n    (if (empty? s)\n      ds\n      (recur (rest s) (conj (conj ds (first s)) (first s))))))", "problem": 32, "user": "50843a4ae4b0c98812d0788b"}, {"code": "#(interleave % %)", "problem": 32, "user": "5089fc3ae4b016a21070049f"}, {"code": "#(interleave %1 %1)", "problem": 32, "user": "5069874de4b01dc6af13f832"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "508b95a0e4b0be79e5b189c6"}, {"code": "#(apply concat (map vector % %))", "problem": 32, "user": "508c64bee4b0f17d83ea26b5"}, {"code": "(fn [lst] (reduce #(conj (conj % %2) %2) [] lst))", "problem": 32, "user": "508bed64e4b0be79e5b189cf"}, {"code": "#(mapcat (fn [x] [x x]) %)", "problem": 32, "user": "4db86aee535d1e037afb2193"}, {"code": "(fn [x] (sort (concat x x)))", "problem": 32, "user": "50838c06e4b0902986d69e0f"}, {"code": "#(interleave % %)", "problem": 32, "user": "4f49108ae4b0d56e7bb92be5"}, {"code": "(fn [x]\n  (reverse (reduce\n    (fn [x y]\n      (cons y (cons y x))\n    )\n    '()\n    x\n  ))\n)", "problem": 32, "user": "4fc8f671e4b0ee37620e1840"}, {"code": "(fn [s]\n  (for [v s i [1 2]]\n    v))", "problem": 32, "user": "50901b2ee4b0ea685a20f774"}, {"code": "(fn [coll] (reduce #(conj (conj %1 %2) %2) '() (reverse coll)))", "problem": 32, "user": "508bf05ae4b0f17d83ea26aa"}, {"code": "(fn [x]\n (reverse (reduce into (map #(take 2(repeat %))x))))", "problem": 32, "user": "507e5cf8e4b085af06e3afd1"}, {"code": "#(interleave % %)", "problem": 32, "user": "5084c43be4b0fb8f40674bfa"}, {"code": "#(interleave % %)", "problem": 32, "user": "509160dae4b0742c82730aef"}, {"code": "(fn [x]\r\n  (reduce into []\r\n    (for [i x]\r\n      (list i i))))", "problem": 32, "user": "508453abe4b0c98812d07891"}, {"code": "#(interleave % %)", "problem": 32, "user": "4e5f034b535d8a8b8723a2d9"}, {"code": "#(sort (concat % %))", "problem": 32, "user": "500ec210e4b00fff93030f9d"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "507fbd77e4b089ade05efbd3"}, {"code": "#(interleave % %)", "problem": 32, "user": "5086ca15e4b004985b776e62"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "50928084e4b097f48cc3856c"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "508ee17ae4b0706b2ed3ef8d"}, {"code": "(fn [x] (interleave x x))", "problem": 32, "user": "5089d52ce4b03217b26a539d"}, {"code": "#(interleave % %)", "problem": 32, "user": "500a0a11e4b03d00572d2d73"}, {"code": "(fn [c] (mapcat #(repeat 2 %) c))", "problem": 32, "user": "4dda44f2535d02782fcbe9f1"}, {"code": "(fn [s]\n  (loop\n    [s s, r []]\n    (if (empty? s)\n      (seq r)\n      (recur (rest s) (conj r (first s) (first s))))))", "problem": 32, "user": "4f856adfe4b033992c121c44"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "50053d6ce4b0678c553fc45e"}, {"code": "(fn [x] (reduce concat (map #(list % %) x)))", "problem": 32, "user": "50813b88e4b09292fd669443"}, {"code": "#(interleave % %)", "problem": 32, "user": "5097b556e4b00ad8bab4e970"}, {"code": "(fn [seq] \r\n  (reduce #(conj %1 %2 %2) [] seq))", "problem": 32, "user": "5097a95fe4b00ad8bab4e96e"}, {"code": "(fn foo [coll] \n  (if (empty? coll) '()\n    ( concat (list (first coll)) (list (first coll)) (foo (rest coll)) ) ))", "problem": 32, "user": "5078300de4b0fc74642bff66"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "50970f51e4b00ad8bab4e950"}, {"code": "#(interleave % %)", "problem": 32, "user": "5098f5d6e4b0cae2931060a4"}, {"code": "(fn [ coll ]\n  (reduce (fn [l r] (-> l (conj r) (conj r))) [] coll)\n)", "problem": 32, "user": "50959df3e4b087f34d351ab4"}, {"code": "(fn [x] (mapcat #(identity %&) x x))", "problem": 32, "user": "5089ebfee4b03217b26a539f"}, {"code": "(fn f [xs]\n  (if (empty? xs)\n       nil\n       (conj (conj (f (rest xs)) (first xs)) (first xs))))", "problem": 32, "user": "5097ea89e4b087ccf61a7af4"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "509b152be4b0412cdea6eb1e"}, {"code": "#(sort (apply conj % %))", "problem": 32, "user": "4fa313bbe4b081705acca188"}, {"code": "#(apply concat (map (fn dup [x] (list x x)) %))", "problem": 32, "user": "50982769e4b04e098a4c726a"}, {"code": "(fn [s] (mapcat #(list % %) s))", "problem": 32, "user": "509b89b3e4b03049c49bd678"}, {"code": "(fn [seq0] (loop [acc '() seq seq0]\n(if (empty? seq) (reverse acc) (recur (conj acc (first seq) (first seq)) (rest seq)))))", "problem": 32, "user": "508e9ed8e4b0996e1a8a53bf"}, {"code": "#(apply concat (for [k %] (list k k)))", "problem": 32, "user": "508d8ab2e4b0f17d83ea26be"}, {"code": "(fn [lst] (reduce #(concat %1 (repeat 2 %2)) '() lst))", "problem": 32, "user": "50868795e4b004985b776e5e"}, {"code": "#(interleave % %)", "problem": 32, "user": "509dc716e4b08df8156e9e27"}, {"code": "(fn dup-elements [s]\n  (let [[fst & rst] s]\n    (if (empty? s)\n      s\n      (cons fst (cons fst (dup-elements rst))))))", "problem": 32, "user": "509e8da7e4b08df8156e9e2f"}, {"code": "mapcat (fn [x] (list x x))", "problem": 32, "user": "50217818e4b00bba4502f7a7"}, {"code": "(fn [s] (mapcat #(repeat 2 %) s))", "problem": 32, "user": "5093bc30e4b097f48cc38584"}, {"code": "(fn [x] (reverse (reduce #(conj %1 %2 %2) '() x)))", "problem": 32, "user": "508c33ece4b0f17d83ea26b1"}, {"code": "(fn [x] (apply concat (map #(list % %) x)))", "problem": 32, "user": "509f3bc9e4b08df8156e9e39"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "50949602e4b04e5742806c4e"}, {"code": "#(interleave % %)", "problem": 32, "user": "4ff8aa3fe4b0678c553fc39e"}, {"code": "#(interleave % %)", "problem": 32, "user": "5038381ce4b0803468ea2c6b"}, {"code": "(fn [coll]\n  (->> coll (mapcat (fn [v] [v v]))))", "problem": 32, "user": "4f2cdd42e4b0d6649770a055"}, {"code": "#(interleave % %)", "problem": 32, "user": "5098f803e4b0cae2931060a5"}, {"code": "(partial reduce (fn [a b] (conj a b b)) [] )", "problem": 32, "user": "5054e37fe4b0b1b9d1860eb6"}, {"code": "#(mapcat (fn [x] [x x]) %)", "problem": 32, "user": "4ecd1143535d23f036227702"}, {"code": "#(interleave % %)", "problem": 32, "user": "4f956072e4b0dcca54ed6ccf"}, {"code": "(fn [s]\n(reduce concat (map (fn [x] [x x]) s)) )", "problem": 32, "user": "50a173e4e4b08df8156e9e68"}, {"code": "#(interleave % %)", "problem": 32, "user": "50a2f901e4b029e8bace362a"}, {"code": "#(interleave % %)", "problem": 32, "user": "501b1a8ee4b0b12d9c5f4d81"}, {"code": "(fn [xs] (mapcat #(take 2 (repeat %)) xs))", "problem": 32, "user": "509eeb3be4b08df8156e9e37"}, {"code": "(fn [coll] (reduce #(conj (conj %1 %2) %2) [] coll))", "problem": 32, "user": "509c7949e4b085ae113522b0"}, {"code": "mapcat #(conj nil % %)", "problem": 32, "user": "5098bcfee4b0cae2931060a1"}, {"code": "#(mapcat (fn [x] [x x]) %)", "problem": 32, "user": "50996a38e4b0cae2931060b3"}, {"code": "(fn [x] (reverse (reduce (fn [mem v] (cons v (cons v mem))) (cons '() x))))", "problem": 32, "user": "50a4b6a7e4b0344e360f3bb8"}, {"code": "(fn [list] (mapcat #(repeat 2 %) list))", "problem": 32, "user": "5080a697e4b01a93d3f38e49"}, {"code": "(fn [coll]\n  (loop [acc [] c coll]\n        (let [p (first c)]\n            (if (nil? p)\n                acc\n                (recur (conj acc p p) (rest c))))))", "problem": 32, "user": "508c3d42e4b0f17d83ea26b2"}, {"code": "(fn [x] (reduce #(conj (conj %1 %2) %2) (empty x) x))", "problem": 32, "user": "50981062e4b04e098a4c7268"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "50989786e4b04e098a4c7274"}, {"code": "(fn fart [s]\n  (cond\n   (empty? (rest s))\n   (list (first s) (first s))\n   :else\n   (concat (list (first s) (first s)) (fart (rest s)))))", "problem": 32, "user": "508dbd56e4b0f17d83ea26c2"}, {"code": "#(mapcat (partial replicate 2) %)", "problem": 32, "user": "509c03f3e4b085ae113522a8"}, {"code": "mapcat #(vector % %)", "problem": 32, "user": "50a7b76de4b090657f4a5cdc"}, {"code": "(fn [coll]\n  (loop [c coll, acc []]\n    (if (empty? c)\n      acc\n      (let [h (first c), t (rest c)]\n        (recur t (conj acc h h))))))", "problem": 32, "user": "50a83794e4b054305ba5a831"}, {"code": "(fn [col]\n  (loop [c (seq col) acc ()]\n\t\t\t  (if (nil? c)\n\t\t\t      (reverse acc)\n            (recur (next c) \n\t\t\t\t      (concat (repeat 2 (first c)) acc)))))", "problem": 32, "user": "50a6b5e8e4b0aa96157e262a"}, {"code": "#(interleave % %)", "problem": 32, "user": "5027b41ee4b01614d1633fee"}, {"code": "#(interleave % %)", "problem": 32, "user": "5092fe10e4b097f48cc3857e"}, {"code": "#(interleave % %)", "problem": 32, "user": "4dbe5390535d020aff1edf5c"}, {"code": "(fn [col] (reduce (fn [acc cur] (conj acc cur cur)) [] col))", "problem": 32, "user": "50a935b9e4b0a9a42786e8de"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "50982cc7e4b04e098a4c726c"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "4fff289ae4b0678c553fc3fd"}, {"code": "#(apply concat (map (fn [x] (list x x)) %))", "problem": 32, "user": "50a83315e4b054305ba5a830"}, {"code": "#(interleave % %)", "problem": 32, "user": "4ed152d5535d44c135fd68cc"}, {"code": "#(reduce (fn [a b] (conj a b b)) [] %)", "problem": 32, "user": "50a9504de4b07e35d68b27ae"}, {"code": "(fn [coll] (mapcat (fn[w] (vector w w)) coll))", "problem": 32, "user": "50a4cbbee4b0344e360f3bc2"}, {"code": "mapcat (fn [x] [x x])", "problem": 32, "user": "509c2c55e4b085ae113522ab"}, {"code": "#(interleave % %)", "problem": 32, "user": "506406c8e4b075d771da6f9f"}, {"code": "(fn [col] (interleave col col))", "problem": 32, "user": "50493b52e4b06e84b772a23e"}, {"code": "(fn [c] (mapcat #(repeat 2 %) c))", "problem": 32, "user": "50608ea0e4b07251188e4456"}, {"code": "#(interleave % %)", "problem": 32, "user": "50a4f36be4b0344e360f3bc9"}, {"code": "reduce #(conj % %2 %2) []", "problem": 32, "user": "50ab8ae3e4b01d6eb43ce9a0"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "4f327844e4b0d6649770a092"}, {"code": "#(interleave %1 %1)", "problem": 32, "user": "50ac81b9e4b071b89ef2622f"}, {"code": "(fn [coll] \n  (mapcat #(repeat 2 %) coll))", "problem": 32, "user": "4f137034535d64f603146430"}, {"code": "(fn [coll] (mapcat #(list % %) coll))", "problem": 32, "user": "5099aea3e4b0efbae1fbc0a0"}, {"code": "#(interleave % %)", "problem": 32, "user": "50ae22c3e4b0a40c9cfb08d0"}, {"code": "(fn [coll]\n  (reduce #(conj %1 %2 %2) [] coll))", "problem": 32, "user": "50ab38a8e4b0f65d68208507"}, {"code": "(fn [s]\n  (reduce #(conj %1 %2 %2) [] s))", "problem": 32, "user": "50aab057e4b056ee0193586b"}, {"code": "(fn [x] (reduce #(into %1 (take 2 (repeat %2))) [] x))", "problem": 32, "user": "50a5f72fe4b0aa96157e2611"}, {"code": "(partial mapcat #(when-not (nil? %) [% %]))", "problem": 32, "user": "50afdf00e4b0c3f5ed5c29a5"}, {"code": "#(interleave % %)", "problem": 32, "user": "50ad7888e4b0a40c9cfb08c7"}, {"code": "(fn dup [x]\r\n  (reduce (fn [accum y]\r\n              (conj accum y y)\r\n              )\r\n            []\r\n            x)\r\n  )", "problem": 32, "user": "50a85af1e4b054305ba5a833"}, {"code": "#(interleave % %)", "problem": 32, "user": "5078d366e4b08327cd804a5b"}, {"code": "#(interleave % %)", "problem": 32, "user": "50b11fbce4b009df37c708cb"}, {"code": "mapcat (fn [x] [x x])", "problem": 32, "user": "508a2c2fe4b016a2107004a1"}, {"code": "#(reduce (fn [x y] (conj x y y)) [] %)", "problem": 32, "user": "50a482c1e4b0344e360f3bb7"}, {"code": "(fn [x]\n  (interleave x x))", "problem": 32, "user": "50af3393e4b0a40c9cfb08d7"}, {"code": "(fn [L] (reduce concat \n  (map (fn [x] (list x x)) L)))", "problem": 32, "user": "50afa883e4b0c3f5ed5c29a2"}, {"code": "#(interleave % %)", "problem": 32, "user": "5097cfcbe4b00ad8bab4e977"}, {"code": "(fn [s] (reduce #(conj %1 %2 %2) [] s))", "problem": 32, "user": "50b4383fe4b001349b2f4abf"}, {"code": "(fn [x] (reduce concat () (map #(list % %) x)))", "problem": 32, "user": "4dad86e0c9a9d6ed0f99dc57"}, {"code": "reduce #(conj % %2 %2) []", "problem": 32, "user": "508e13abe4b0f17d83ea26c7"}, {"code": "(fn [s]\n  (apply concat\n    (map #(concat % %) (partition-by identity s))))", "problem": 32, "user": "50b4b70de4b0c464d223d1bc"}, {"code": "(fn [coll]\r\n  (mapcat #(repeat 2 %) coll))", "problem": 32, "user": "50b47c46e4b0c464d223d1b8"}, {"code": "(fn [x] (reverse (reduce #(apply conj %1 %2 ) (map #(list  % % ) x ))))", "problem": 32, "user": "50956c2be4b087f34d351ab2"}, {"code": "(fn dup [x]\n       (if (empty? x)\n         x\n         (let [head (first x)] (conj (dup (rest x)) head head))))", "problem": 32, "user": "50b61e7ae4b0e3a8b79a9a68"}, {"code": "(fn [s]\n  (reduce (fn [result e]\n            (conj result e e))\n          []\n          s))", "problem": 32, "user": "50b67515e4b08fb537db98f3"}, {"code": "(fn [a]\n  (reduce\n    into [] (map #(list % %) a)))", "problem": 32, "user": "4f253a49e4b0d66497709ff3"}, {"code": "#(sort (apply conj % %))", "problem": 32, "user": "50b65966e4b0a86f8358ca6c"}, {"code": "#(letfn [(dbl [r] (if (= '() r) '()\n    (cons (first r) (cons (first r) (dbl (rest r))))))]\n  (dbl %))", "problem": 32, "user": "50b668dde4b08fb537db98f2"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "50948042e4b04e5742806c4c"}, {"code": "(fn [s] (interleave s s))", "problem": 32, "user": "50b8de6ce4b0cba0e598b652"}, {"code": "(fn f [nl ol]\r\n  (if (empty? ol)\r\n    nl\r\n    (let [x (first ol)]\r\n      (recur (conj nl x x) (rest ol)))\r\n    )) []", "problem": 32, "user": "50b8e9a4e4b0cba0e598b656"}, {"code": "#(mapcat list % %)", "problem": 32, "user": "50112acee4b0d82cfac69f4c"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "50ba3acae4b03e68e4411c78"}, {"code": "reduce #(into %1 [%2 %2]) []", "problem": 32, "user": "4f03e7b3535dcb61093f6b7c"}, {"code": "(fn [coll]\n  (reverse\n    (reduce #(conj %1 %2 %2) () coll)))", "problem": 32, "user": "50b0cffae4b009df37c708c5"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "50ba4b9ee4b03e68e4411c7b"}, {"code": "(fn [x] (apply concat (map #(list % %) x)))", "problem": 32, "user": "50b53b6ae4b0c464d223d1c4"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "50acbd15e4b071b89ef26234"}, {"code": "mapcat #(vector % %)", "problem": 32, "user": "4f6fe5e4e4b07046d9f4efef"}, {"code": "(fn [vs] (reverse (reduce #(cons %2 (cons %2 %1)) [] vs)))", "problem": 32, "user": "4fdf566fe4b05e33b9224f99"}, {"code": "#(mapcat (fn f [n] [n n]) %)", "problem": 32, "user": "5007c7c7e4b0b17c647f5226"}, {"code": "(fn [i] (apply concat (map (fn [x] [x x]) i)))", "problem": 32, "user": "50b64b55e4b0a86f8358ca6b"}, {"code": "(fn [xs]\n  (mapcat (fn [el] [el el]) xs))", "problem": 32, "user": "50bd6033e4b0594b91591c66"}, {"code": "#(interleave % %)", "problem": 32, "user": "50aca31fe4b071b89ef26230"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "50bb646de4b03e68e4411ca3"}, {"code": "(fn [x] (reduce #(conj %1 %2 %2) [] x))", "problem": 32, "user": "50ae0d24e4b0a40c9cfb08ce"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "50b51c06e4b0c464d223d1c1"}, {"code": "(fn [v] (mapcat #(conj [%] %) v))", "problem": 32, "user": "5093ca51e4b097f48cc38585"}, {"code": "#(reduce (fn[x y] (concat x [y] [y])) (concat [[]] %1))", "problem": 32, "user": "50b25f2ce4b03ea88043355f"}, {"code": "#(interleave % %)", "problem": 32, "user": "4f89d489e4b033992c121c7e"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "509251f3e4b09a7d0b586de5"}, {"code": "(fn [a] (reduce #(concat %1 (list %2 %2)) () a))", "problem": 32, "user": "50921f9ae4b09a7d0b586de1"}, {"code": "(fn \n  ([ret col]\n  (if \n    (= '() col) ret\n    (recur (conj ret (first col) (first col))\n(rest col))))\n  ) []", "problem": 32, "user": "50bfe725e4b080409b860f26"}, {"code": "(fn [x] (reduce #(conj % %2 %2) [] x))", "problem": 32, "user": "50baa66be4b03e68e4411c94"}, {"code": "(\n  fn doub[ s ](\n     \n    reverse(  reduce #( cons %2 ( cons %2 %1 ) ) '() s)  \n  )\t\n)", "problem": 32, "user": "50bf7b72e4b0ffd967a66cc1"}, {"code": "(fn foo [lst] (if (= lst '()) '() (cons (first lst) (cons (first lst) (foo (rest lst))))))", "problem": 32, "user": "50ae5659e4b0a40c9cfb08d2"}, {"code": "#(interleave % %)", "problem": 32, "user": "50afc0f9e4b0c3f5ed5c29a3"}, {"code": "(fn [x]\n  (loop [coll x answer []]\n    (if (empty? coll) answer\n      (recur\n        (rest coll)\n        (conj answer (first coll) (first coll))\n      )\n    )\n  )\n)", "problem": 32, "user": "50bfbf25e4b05ae8c1cbbd9b"}, {"code": "reduce #(conj %1 %2 %2) '[]", "problem": 32, "user": "50ba5113e4b03e68e4411c7d"}, {"code": "#(interleave % %)", "problem": 32, "user": "50bc23e4e4b0594b91591c3c"}, {"code": "(fn [coll]\n  (loop [coll coll\n    new-col '()]\n    (if (empty? coll)\n      new-col\n      (recur (rest coll) \n        (concat new-col (list (first coll) (first coll)))))))", "problem": 32, "user": "50c32086e4b00e537d00253d"}, {"code": "(fn [xs] (interleave xs xs))", "problem": 32, "user": "50478418e4b0371827a27bc3"}, {"code": "#(interleave % %)", "problem": 32, "user": "50c4baa6e4b0210b849018b0"}, {"code": "#(mapcat (fn [a] (list a a)) %)", "problem": 32, "user": "4ffc10aae4b0678c553fc3d6"}, {"code": "#(interleave % %)", "problem": 32, "user": "50bf74c7e4b0ffd967a66cc0"}, {"code": "(fn duplicate-items [li]\n  (mapcat #(list % %) li))", "problem": 32, "user": "50c84ba2e4b00bb60fe0c53e"}, {"code": "#(apply concat (map (fn [x] [x x]) %))", "problem": 32, "user": "4ec79cac535d6d7199dd36e3"}, {"code": "reduce (fn [cl x] (into cl (repeat 2 x))) []", "problem": 32, "user": "50c7431ae4b00bb60fe0c531"}, {"code": "#(interleave % %)", "problem": 32, "user": "50503117e4b0a02f9cffdeb5"}, {"code": "reduce (fn [acc v] (conj acc v v)) []", "problem": 32, "user": "50c9ece0e4b0a409464667d8"}, {"code": "#(interleave % %)", "problem": 32, "user": "50c9e5e3e4b0a409464667d7"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "50cb4cf6e4b0f78a8e1645b4"}, {"code": "#(interleave % %)", "problem": 32, "user": "50ca2faee4b0a409464667dc"}, {"code": "(fn [x]\n  (reverse \n    (reduce \n      #(apply conj %1 %2) '() (map #(repeat 2 %) x))))", "problem": 32, "user": "50c8697ce4b00bb60fe0c53f"}, {"code": "#(interleave % %)", "problem": 32, "user": "50c75d38e4b00bb60fe0c532"}, {"code": "(fn [s]\n  (loop [original s, result []]\n    (if (seq original)\n      (recur\n        (rest original)\n        (concat result (repeat 2 (first original))))\n    result)))", "problem": 32, "user": "50b29029e4b03ea880433563"}, {"code": "#(interleave % %)", "problem": 32, "user": "50c6fad1e4b00bb60fe0c52d"}, {"code": "#(interleave %1 %1)", "problem": 32, "user": "4f8beb2fe4b02e764a0a5185"}, {"code": "(fn [x] (apply concat (map (fn [y] (list y y)) x)))", "problem": 32, "user": "50ce09e6e4b0ffc302be4bc6"}, {"code": "#(interleave % %)", "problem": 32, "user": "50cf66ffe4b0e61f11ddcd92"}, {"code": "(fn [args] (apply concat (map #(repeat 2 %) args)))", "problem": 32, "user": "4f072644535dcb61093f6c20"}, {"code": "#(interleave % %)", "problem": 32, "user": "4fd7a223e4b0dab7d829f387"}, {"code": "(fn [x]\n  (apply concat (map #(list % %) x)))", "problem": 32, "user": "50d04a92e4b00b15ecee975a"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "50bc4e73e4b0594b91591c3d"}, {"code": "#(interleave % %)", "problem": 32, "user": "50b8914ce4b0cba0e598b64d"}, {"code": "(fn dupe-seq [seqn]\n  (cond\n    (empty? seqn) '()\n    :else (cons (first seqn) (cons (first seqn) (dupe-seq (rest seqn))))))", "problem": 32, "user": "50d2f044e4b03c62ef244483"}, {"code": "(fn [cc] (reduce (fn [c e] (-> c (conj e) (conj e))) () (reverse cc)))", "problem": 32, "user": "50d242c0e4b06ad58337ed0f"}, {"code": "(fn [x] (for [y (range 0 (* 2 (count x))) :let [z (nth x (quot y 2))]] z))", "problem": 32, "user": "4eb0175b535d7eef30807336"}, {"code": "#(sort (into (into () %) %))", "problem": 32, "user": "50733b31e4b0e3170b5a869a"}, {"code": "#(interleave % %)", "problem": 32, "user": "50d0b466e4b00b15ecee9764"}, {"code": "(fn [c] (reduce into (map #(identity [%1 %1]) c)))", "problem": 32, "user": "50b24a2fe4b03ea88043355c"}, {"code": "(fn duplicate [l]\n   (if\n     (empty? l)\n     l\n     (cons\n      (first l)\n      (cons\n       (first l)\n       (duplicate\n        (rest l))))))", "problem": 32, "user": "50d2fa5ce4b049d4ed5650cf"}, {"code": "(fn [col] \n \t(reduce concat '() (map #(vector % %2) col col)))", "problem": 32, "user": "50ccf729e4b0f7a459302aac"}, {"code": "reduce #(conj % %2 %2) []", "problem": 32, "user": "50a8cc97e4b0a9a42786e8db"}, {"code": "#(interleave % %)", "problem": 32, "user": "50cae881e4b0f75dcc9a6e51"}, {"code": "(fn [coll] (interleave coll coll))", "problem": 32, "user": "4f0412f8535dcb61093f6b99"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "4dad51418e77d6ed55f12a44"}, {"code": "(fn [s] (reduce #(conj (conj %1 %2) %2) [] s))", "problem": 32, "user": "4f03f197535dcb61093f6b84"}, {"code": "#(apply concat (map (fn [x] [x x]) %))", "problem": 32, "user": "50c4a354e4b0210b849018af"}, {"code": "#(mapcat list % %)", "problem": 32, "user": "50d4c626e4b09cc622d65a70"}, {"code": "(fn [x] (apply concat (map #(list % %) x)))", "problem": 32, "user": "50d324dde4b049d4ed5650d7"}, {"code": "(fn [s]\n  (mapcat #(repeat 2 %) s))", "problem": 32, "user": "50d4909ce4b09cc622d65a6c"}, {"code": "(fn [x] (interleave x x))", "problem": 32, "user": "50cf94bde4b0abc485cb9bb2"}, {"code": "#(interleave % %)", "problem": 32, "user": "50d882d4e4b01f0871336e69"}, {"code": "(fn [x]\n  (loop [newlist []\n         x x]\n    (if (empty? x)\n      newlist\n      (recur (into newlist (take 2 (repeat (first x)))) (rest x)))))", "problem": 32, "user": "50bd13dee4b0594b91591c65"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "504eb604e4b069badc5a33c4"}, {"code": "(partial mapcat #(list % %))", "problem": 32, "user": "50d8f4b6e4b01f0871336e74"}, {"code": "#(interleave % %)", "problem": 32, "user": "50d916eae4b0fd36a4b89221"}, {"code": "#(interleave % %)", "problem": 32, "user": "50d179c7e4b05a71a896ef56"}, {"code": "#(loop [x %, rlt (seq %)]\n   (if (empty? x)\n     (sort rlt)\n     (recur (rest x) (conj rlt (first x)))))\n\n;;interleave\n\n;;mapcat", "problem": 32, "user": "4fa7de4ce4b081705acca1c9"}, {"code": "#(loop [i %, z []] (if (empty? i) z (recur (rest i) (conj (conj z (first i)) (first i)))))", "problem": 32, "user": "50d4c940e4b09cc622d65a71"}, {"code": "#(interleave % %)", "problem": 32, "user": "50bfb5fbe4b05ae8c1cbbd9a"}, {"code": "(fn dupl [tomb]\n  (if (empty? tomb)\n    '()\n    (conj (dupl (rest tomb)) (first tomb) (first tomb))\n   )\n)", "problem": 32, "user": "50d3317ee4b049d4ed5650da"}, {"code": "(fn [coll] (interleave coll coll))", "problem": 32, "user": "4fc9a977e4b0ee37620e1847"}, {"code": "#(interleave % %)", "problem": 32, "user": "50cf2267e4b0e61f11ddcd8c"}, {"code": "#(sort (concat % %))", "problem": 32, "user": "50d8de3fe4b01f0871336e72"}, {"code": "(fn [coll] \n  (reduce (fn [r x] (concat r \n                            (list x) \n                            (list x)))\n          '() coll)\n  )", "problem": 32, "user": "5092f940e4b097f48cc3857b"}, {"code": "(fn [x] (apply concat (map #(conj [] % %) x)))", "problem": 32, "user": "503539dee4b0ed9c821488f6"}, {"code": "mapcat #(repeat 2 %)\n\n; #(mapcat (juxt identity identity) %)\n\n; (partial reduce #(conj % %2 %2) [])\n\n; #(interleave % %)", "problem": 32, "user": "503f4759e4b00d1a725ff2a9"}, {"code": "#(mapcat (fn [x] [x x]) %)", "problem": 32, "user": "5095f761e4b0ba05ca7aebfd"}, {"code": "#(interleave % %)", "problem": 32, "user": "50dc2cd7e4b02e6ac9592c86"}, {"code": "(fn [x]\n\t(apply concat (map #(repeat 2 %) x)))", "problem": 32, "user": "50b63309e4b0a86f8358ca68"}, {"code": "#(interleave % %)", "problem": 32, "user": "4fd93c42e4b05e33b9224f35"}, {"code": "reduce #(concat %1 [%2 %2]) []", "problem": 32, "user": "50de11b2e4b061dbdced7217"}, {"code": "#(reduce (fn [c x] (conj c x x)) [] %)", "problem": 32, "user": "50d86fe2e4b01f0871336e67"}, {"code": "#(interleave % %)", "problem": 32, "user": "4e6a5694535d8ccf87e9fece"}, {"code": "(fn dble ([s] (dble s ()))\n  ([s f]              \n  (let [i (first s) m (rest s)]\n    (cond\n    (empty? m) (conj f i i)\n    :else (conj (dble m f) i i)))))", "problem": 32, "user": "4f05a9cf535dcb61093f6bfc"}, {"code": "(fn dup-seq [s]\n   (if (seq s)\n     (let [first (first s)]\n       (cons first (cons first (dup-seq (rest s)))))\n     ()))", "problem": 32, "user": "50a7ef7fe4b090657f4a5ce0"}, {"code": "#(loop [result [] data %1]\n    (if(empty? data)\n    \t(reverse result)\n    (recur \n     (cons (first data)(cons (first data) result))\n     (rest data))\n    ))", "problem": 32, "user": "4ef87ea7535dced4c769f25f"}, {"code": "(fn this [v]\n  (if (= (count v) 0)\n    '()\n    (conj (conj (this (rest v))\n                (first v)\n           )\n     (first v))))", "problem": 32, "user": "5021f0b3e4b00bba4502f7ac"}, {"code": "(fn [x] (reduce #(conj (conj %1 %2) %2) (empty x) x))", "problem": 32, "user": "50e0d5a3e4b061dbdced723d"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "50e3ec87e4b0463d32072486"}, {"code": "#(interleave % %)", "problem": 32, "user": "50e3f311e4b0463d32072487"}, {"code": "(fn [coll]\n  (loop [remain coll acc []]\n    (if (empty? remain)\n      acc\n      (recur (rest remain) (conj acc (first remain) (first remain))))))", "problem": 32, "user": "50e3cf55e4b01912b3285c45"}, {"code": "(fn [c] (interleave c c))", "problem": 32, "user": "4f98b69ae4b0dcca54ed6cf4"}, {"code": "(fn [s] (apply concat (map #(list % %) s)))", "problem": 32, "user": "50dfb660e4b061dbdced7228"}, {"code": "#(interleave % %)", "problem": 32, "user": "4fedd993e4b0198f34b063bc"}, {"code": "(fn [a] (reduce #(conj (conj %1 %2) %2) [] a))", "problem": 32, "user": "50e3ddd4e4b01912b3285c47"}, {"code": "#(interleave % %)", "problem": 32, "user": "5099a280e4b0cae2931060bb"}, {"code": "(fn dup [lst]\n  (if (empty? lst)\n    []\n    (let [e (first lst)]\n      (concat [e e] (dup (rest lst))))))", "problem": 32, "user": "50e5bca5e4b09ae9427b0e75"}, {"code": "(fn duplicate [seq]\n  (interleave seq seq)\n)", "problem": 32, "user": "50e496e8e4b0cb9ec68fbca0"}, {"code": "mapcat #(seq [% %])", "problem": 32, "user": "50e09f60e4b061dbdced7237"}, {"code": "mapcat #(repeat 2 %1)", "problem": 32, "user": "50dade7be4b02e6ac9592c70"}, {"code": "#(seq (reduce (fn [v f] (do (conj (conj v f) f))) [] %))", "problem": 32, "user": "50e008d1e4b061dbdced722a"}, {"code": "(fn [x] (reduce #(concat %1 [%2 %2]) '() x))", "problem": 32, "user": "50df6dd0e4b061dbdced7225"}, {"code": "#(reduce (fn [coll val] (reverse (conj (reverse coll) val val))) '() %)", "problem": 32, "user": "4fc5273ce4b081705acca37f"}, {"code": "(fn [xs]\n  (reduce #(concat %1 [%2 %2]) [] xs ))", "problem": 32, "user": "50e4ff72e4b049a987753897"}, {"code": "#(interleave % %)", "problem": 32, "user": "50d46d53e4b09cc622d65a69"}, {"code": "(fn [sq] \n  (mapcat #(repeat 2 %) sq))", "problem": 32, "user": "50e35b2de4b094329ae7f4bb"}, {"code": "(fn [xs] (mapcat (fn [x] [x x]) xs))", "problem": 32, "user": "50e8422de4b0ebbe794eb7de"}, {"code": "#(interleave % %)", "problem": 32, "user": "4db29f98535df7e46ed9b6c1"}, {"code": "(fn [a] (apply concat (map (fn [x] (list x x)) a)))", "problem": 32, "user": "4e2164ff535d04ed9115e815"}, {"code": "#(interleave % %)", "problem": 32, "user": "4e79f28b535db169f9c796a8"}, {"code": "(fn [xs]\n  (reduce concat (map #(repeat 2 %) xs)))", "problem": 32, "user": "50e19748e4b0ec0e353386e5"}, {"code": "#(interleave % %)", "problem": 32, "user": "50e8a340e4b0ebbe794eb7ed"}, {"code": "(fn [x] (reduce #(conj %1 %2 %2) [] x))", "problem": 32, "user": "500b6685e4b03d00572d2d82"}, {"code": "mapcat #(list %1 %1)", "problem": 32, "user": "50e8ff6be4b0ebbe794eb7f3"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "50e87427e4b0ebbe794eb7e8"}, {"code": "(fn dbl[s] \n  (loop [source s target []]\n    (if (< (count target) (* 2 (count s)))\n      (recur (rest source) (conj target (first source) (first source)))\n      target)\n   ))", "problem": 32, "user": "50e448bae4b0463d3207248d"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "50e7dd5de4b077ad597af36b"}, {"code": "(fn [col]\n  (mapcat #(repeat 2 %) col))", "problem": 32, "user": "4e7e8485535db169f9c79716"}, {"code": "(fn [x] (interleave x x))", "problem": 32, "user": "508d5ce9e4b0f17d83ea26bc"}, {"code": "(fn [ xs ]\n  (loop [in xs\n         out [] ]\n    (if (empty? in)\n      out\n      (recur \n       \t(rest in)\n       \t(concat out [ (first in) (first in) ] ) ))))", "problem": 32, "user": "4f03653f535dcb61093f6aa1"}, {"code": "(fn duplicate-sequence [xs]\n\t(reverse (reduce (fn [acc x] (conj acc x x)) '() xs)))", "problem": 32, "user": "50ed8a5fe4b06330c1f87c3d"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "50d0d4c8e4b00b15ecee976a"}, {"code": "(fn [s] (reduce #(conj %1 %2 %2) [] s))", "problem": 32, "user": "50ed4626e4b01236b1d4983c"}, {"code": "(fn [x] (apply concat (map #(list % %) x)))", "problem": 32, "user": "5047782ce4b0371827a27bc2"}, {"code": "#(apply concat (map (fn [x] (vector x x)) %))", "problem": 32, "user": "50ed5d1be4b06330c1f87c37"}, {"code": "#(interleave % %)", "problem": 32, "user": "50ef9a7ae4b0bdaecbb47d9e"}, {"code": "#(interleave % %)", "problem": 32, "user": "50ef4e2be4b0a78662fa2653"}, {"code": "(fn f [x] (interleave x x))", "problem": 32, "user": "50ef3e5de4b0a78662fa2652"}, {"code": "(fn [coll]\n  (loop [result []\n         [f & fs] coll]\n    (if (nil? f)\n      result\n      (recur (conj result f f) fs))))", "problem": 32, "user": "50ed3c6be4b01236b1d4983b"}, {"code": "(partial mapcat #(repeat 2 %))", "problem": 32, "user": "4f94d3a5e4b0dcca54ed6cc5"}, {"code": "(fn duseq [lst]\n  (loop [lst,lst res,[]]\n    (if (empty? lst)\n      res\n      (recur (rest lst) (conj res (first lst) (first lst))))))", "problem": 32, "user": "50f0d000e4b0c5f4fa5ddb6f"}, {"code": "reduce #(conj (conj %1 %2) %2) []", "problem": 32, "user": "50eafeaae4b0346a3e988cbb"}, {"code": "#( mapcat list %% )", "problem": 32, "user": "4fbb7010e4b081705acca2e7"}, {"code": "(partial mapcat #(list % %))", "problem": 32, "user": "50e4b066e4b0cb9ec68fbca6"}, {"code": "#(loop [coll %1\n           res []]\n      (if (empty? coll)\n        res\n        (recur\n          (rest coll)\n          (conj res (first coll) (first coll)))))", "problem": 32, "user": "50e8cac5e4b0ebbe794eb7ef"}, {"code": "reduce #(concat %1 [%2] [%2]) []", "problem": 32, "user": "50e4a5a9e4b0cb9ec68fbca3"}, {"code": "#(interleave % %)", "problem": 32, "user": "50f0ec9ce4b0d527ce5b30df"}, {"code": "(fn [collection] (reduce #(conj (conj %1 %2) %2) [] collection))", "problem": 32, "user": "50ee145de4b06330c1f87c53"}, {"code": "#(into '() (reduce (fn [acc v] (cons v (cons v acc))) '() %))", "problem": 32, "user": "50eebf46e4b06330c1f87c61"}, {"code": "(fn [coll] (reverse (reduce #(cons %2 (cons %2 %1)) '() coll)))", "problem": 32, "user": "50ed9e8de4b06330c1f87c44"}, {"code": "(fn [s] (mapcat vector s s))", "problem": 32, "user": "4ec1b090535dfed6da9c6db5"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "4f43b992e4b0d7d3c9f3fd2c"}, {"code": "(fn [x]\n  (apply concat \n   (map #(vector % %) x)\n   )\n )", "problem": 32, "user": "4edf95a8535d10e5ff6f5342"}, {"code": "#(interleave % %)", "problem": 32, "user": "50ec8d93e4b04edc3377704c"}, {"code": "(fn [x] (reduce #(conj (conj %1 %2) %2) [] x))", "problem": 32, "user": "50ef56dfe4b0bdaecbb47d94"}, {"code": "#(interleave % %)", "problem": 32, "user": "4fbf2818e4b081705acca317"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "4ebaf790535dfed6da9c6d6e"}, {"code": "(partial mapcat #(list % %))", "problem": 32, "user": "50d8739ae4b01f0871336e68"}, {"code": "(fn [ls]\n  (reverse\n    (reduce\n      (fn [acc obj]\n        (conj acc obj obj))\n      '()\n      ls)))", "problem": 32, "user": "50f1dedbe4b0897c4366dcd8"}, {"code": "#(interleave % %)", "problem": 32, "user": "50f07b21e4b0bdaecbb47dc2"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "50f01f44e4b0bdaecbb47daf"}, {"code": "#(interleave % %)", "problem": 32, "user": "50f17c0de4b06d9538fe2123"}, {"code": "reduce #(conj (conj % %2) %2) []", "problem": 32, "user": "50ebd63ce4b04edc3377703c"}, {"code": "(fn [x] (reverse (reduce #(conj (conj % %2) %2) () x)))", "problem": 32, "user": "50e111f7e4b084616e11c663"}, {"code": "#(interleave % %)", "problem": 32, "user": "50742549e4b054001656accf"}, {"code": "(fn dup [x] (\n                if (empty? x) x (conj (dup (rest x)) (first x) (first x))\n))", "problem": 32, "user": "50ef311fe4b0a78662fa2651"}, {"code": "(fn duplicate [[v & vs :as d]]\n  (when (not (empty? d))\n    (cons v (cons v (duplicate vs)))))", "problem": 32, "user": "50e47fa5e4b0cb9ec68fbc9c"}, {"code": "mapcat #(vec [% %])", "problem": 32, "user": "50eddbc4e4b06330c1f87c4b"}, {"code": "(fn [x]\n  (interleave x x)\n  )", "problem": 32, "user": "50f4894be4b004d364930528"}, {"code": "#(interleave % %)", "problem": 32, "user": "50fb46e6e4b0d10d794c19e5"}, {"code": "(fn doublre[x]\n  (loop [work x\n         result ()\n         cur (last x)\n         ]\n    (if (not= work [])\n      (recur (pop work) \n             (conj result cur cur)\n             (last (pop work)) ;;i dislike this\n       )\n      ;else\n      result\n      )\n    )\n  )", "problem": 32, "user": "50fb084ee4b0d10d794c19dd"}, {"code": "#(reduce (fn [s v] (conj s v v)) [] %)", "problem": 32, "user": "50fbf811e4b0d10d794c19f1"}, {"code": "#(interleave % %)", "problem": 32, "user": "50ec4ed7e4b04edc33777046"}, {"code": "#(mapcat (fn [x] [x x]) %)", "problem": 32, "user": "50e82c31e4b0ebbe794eb7da"}, {"code": "#(interleave % %)", "problem": 32, "user": "50f3bd98e4b041536e2eca3a"}, {"code": "#(apply concat (map (fn [x] (repeat 2 x)) %))", "problem": 32, "user": "4f55ab5ee4b0a7574ea71809"}, {"code": "(fn [a] (apply concat (map (fn [x] (cons x (cons x []))) a)))", "problem": 32, "user": "50f9776be4b0e7c80cb15a4e"}, {"code": "(fn [coll] (apply concat (map #(list % %) coll)))", "problem": 32, "user": "50fe2b87e4b03cd852b4e84b"}, {"code": "(fn [sq] (apply concat (map (fn [x] (list x x)) sq)))", "problem": 32, "user": "50fbdacfe4b0d10d794c19f0"}, {"code": "(fn dup [xs] (if (empty? xs) nil (conj (dup (rest xs)) (first xs) (first xs))))", "problem": 32, "user": "50ef5703e4b0bdaecbb47d95"}, {"code": "(fn mult [xs]\n;if it's empty, we're at the end of the list\n  (if (empty? xs)\n    nil\n  ;otherwise add the first element to the list\n    (conj (mult (rest xs)) (first xs) (first xs))))", "problem": 32, "user": "50ed1ce7e4b01236b1d49839"}, {"code": "(fn foo [s] (if (not (empty? (rest s))) (cons (first s) (cons (first s) (foo (rest s)))) (cons (first s) s)))", "problem": 32, "user": "50f9c7fde4b0e7c80cb15a52"}, {"code": "(fn [coll] (reduce into (map #(vector % %) coll)))", "problem": 32, "user": "50fac9e3e4b07934dda8b0d1"}, {"code": "mapcat (fn [x] [x x])", "problem": 32, "user": "50f3ce2ee4b041536e2eca3d"}, {"code": "(fn [s]\n\t(reduce\n\t\t(fn [r e]\n\t\t\t(cons e (cons e r))) [] (reverse s)))", "problem": 32, "user": "50f84d85e4b0aafb827eb1f7"}, {"code": "mapcat #(repeat 2 %)", "problem": 32, "user": "50feab26e4b03cd852b4e850"}, {"code": "#(mapcat (fn [x] [x x]) %)", "problem": 32, "user": "51008b6fe4b0700a7a02d6e4"}, {"code": "#(interleave % %)", "problem": 32, "user": "50928ecfe4b097f48cc38570"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "5006b7d2e4b0678c553fc48c"}, {"code": "(fn [x] (reverse (reduce #(cons %2 (cons %2 %1)) '() x)))", "problem": 32, "user": "4ecbbe96535df97575fdabe0"}, {"code": "#(interleave % %)", "problem": 32, "user": "5102489de4b00c483ae176f6"}, {"code": "(fn [s] (reduce #(conj % %2 %2) [] s))", "problem": 32, "user": "50d93c53e4b0fd36a4b89223"}, {"code": "(fn [sqn] (mapcat (fn [x] [x x]) sqn))", "problem": 32, "user": "50f2e5cee4b0ec8ee6fa8643"}, {"code": "#(apply concat (for [n %] [n n]))", "problem": 32, "user": "51040eb2e4b0432126ba9bb4"}, {"code": "reduce #(concat %1 [%2 %2]) []", "problem": 32, "user": "51059d33e4b0380e797c7d5c"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "5103807fe4b00c483ae17703"}, {"code": "(fn dup [s]\n  (reduce (fn [c e]  (conj c e e) ) [] s))", "problem": 32, "user": "5101192ae4b0bef64c30e266"}, {"code": "#(apply concat (map list % %))", "problem": 32, "user": "5106bc8ae4b01150e115ebec"}, {"code": "(fn  [x] (reduce (fn [a b] (conj a b b)) [] x))", "problem": 32, "user": "5106c803e4b01150e115ebee"}, {"code": "mapcat #(vector % %)", "problem": 32, "user": "50471d36e4b03b02161376b6"}, {"code": "#(sort (concat % %))", "problem": 32, "user": "50bce014e4b0594b91591c63"}, {"code": "#(->> % (mapcat (fn [x] [x x])))", "problem": 32, "user": "51095588e4b0e34872b3efa5"}, {"code": "(fn dup [s]\n  (reduce #(cons %2 (cons %2 %1)) '() (reverse s)))", "problem": 32, "user": "51085be5e4b00aa5c85a1024"}, {"code": "(fn v [l] (if (= (count l) 1) (cons (first l) l) (cons (first l)(cons (first l) (v (rest l))))))", "problem": 32, "user": "510931ede4b0c71f76895663"}, {"code": "(fn dup-seq [coll]\n  (mapcat #(repeat 2 %) coll)\n  )", "problem": 32, "user": "510a3cd4e4b06956752d35ad"}, {"code": "(fn [x] \n  (apply concat \n    (map #(repeat 2 %) x)\n  )\n)", "problem": 32, "user": "510cda21e4b078ea71921126"}, {"code": "(fn [coll] (loop [s coll result '()] \n             (if (empty? s) (reverse result) \n               (recur (rest s) \n                      (conj (conj result (first s)) (first s) ) ) ) ) )", "problem": 32, "user": "50fec710e4b0219f3bc8bd97"}, {"code": "(fn [x] (mapcat #(list %1 %1) x))", "problem": 32, "user": "510d530de4b078ea71921133"}, {"code": "(fn dup [items]\n  (if (empty? items)\n    '()\n\t(conj (dup (rest items)) (first items) (first items))))", "problem": 32, "user": "510cd1dde4b078ea71921124"}, {"code": "#(interleave % %)", "problem": 32, "user": "50f9739ce4b0e7c80cb15a4d"}, {"code": "#(interleave % %)", "problem": 32, "user": "5107b86de4b05b2b4eee7495"}, {"code": "mapcat #(vector % %)", "problem": 32, "user": "510db6cde4b078ea71921145"}, {"code": "#(interleave % %)", "problem": 32, "user": "50fe91c1e4b03cd852b4e84e"}, {"code": "#(interleave % %)", "problem": 32, "user": "510d9d61e4b078ea71921141"}, {"code": "(fn [coll] (loop [final []\n                  remain coll]\n             (if (empty? remain)\n               (seq final)\n               (recur (conj (conj final (first remain)) (first remain)) (next remain)))))", "problem": 32, "user": "507a33dee4b08327cd804a68"}, {"code": "(fn [lst]\n  (interleave lst lst))", "problem": 32, "user": "4e964f4a535dbda64a6f6b42"}, {"code": "#(interleave % %)", "problem": 32, "user": "5102ac9de4b00c483ae176fa"}, {"code": "#(interleave % %)", "problem": 32, "user": "4f23e1cde4b0d66497709fe4"}, {"code": "#(interleave % %)", "problem": 32, "user": "510d3dc6e4b078ea71921132"}, {"code": "(comp (partial apply concat) (partial map #(list % %)))", "problem": 32, "user": "51105c7fe4b04c71fce993ef"}, {"code": "(fn [x] (interleave x x))", "problem": 32, "user": "510c123be4b078ea7192110e"}, {"code": "mapcat (fn [x] [x x])", "problem": 32, "user": "510e3640e4b07438aa32145a"}, {"code": "#(interleave % %)", "problem": 32, "user": "511026b1e4b04c71fce993ec"}, {"code": "(fn [a] (reverse (reduce #(cons %2 (cons %2 %1)) () a)))", "problem": 32, "user": "510b704ee4b078ea71921100"}, {"code": "#(interleave % %)", "problem": 32, "user": "50b35486e4b03ea88043356a"}, {"code": "#(loop [i % res []]\n   (if (empty? i)\n     res\n     (recur (rest i) (conj res (first i) (first i)))\n     )\n   )", "problem": 32, "user": "51064b76e4b01150e115ebe4"}, {"code": "#(interleave % %)", "problem": 32, "user": "511278bbe4b0350614f07a75"}, {"code": "(partial reduce \n (fn [acc el]\n   (conj acc el el))\n [])", "problem": 32, "user": "50cd0fd5e4b0f7a459302aad"}, {"code": "(fn [l] (apply concat (map #(list % %) l)))", "problem": 32, "user": "50e54fe4e4b049a9877538a0"}, {"code": "(fn dup [l] \n\t\t(if (> (count l) 1)\n\t  \t\t(concat [(first l) (first l)] (dup (rest l)))\n\t\t\t[(first l) (first l)]\n\t\t))", "problem": 32, "user": "50d3b03fe4b030b634c368b9"}, {"code": "(fn [x] \n  (apply concat (map #(vector % %) x)) )", "problem": 32, "user": "4e74e119535d7a570dd295bc"}, {"code": "(fn [xs]\n  (reduce (fn [ys y] (conj ys y y))\n          []\n          xs))", "problem": 32, "user": "511442d0e4b0e9c109bb74d5"}, {"code": "#(interleave %1 %1)", "problem": 32, "user": "5116009ee4b0d4f670fd2fde"}, {"code": "(fn [m] (let [m (sort (reduce conj m m))] (for [i m] i)))", "problem": 32, "user": "50a69e8ce4b0aa96157e2626"}, {"code": "#(mapcat (partial repeat 2) %)", "problem": 32, "user": "5081566ce4b0946d0443855b"}, {"code": "(fn [simple]\n   (loop [result [] elements simple]\n     (if (empty? elements)\n       result\n       (recur (conj (conj result (first elements)) (first elements)) (rest elements))\n       )\n   ) \n   )", "problem": 32, "user": "5106dc1be4b01150e115ebf0"}, {"code": "(fn [coll]\n  (reverse (reduce \n   (fn [out in]\n     (cons in (cons in out))) '() coll)))", "problem": 32, "user": "4f74271ae4b044e54cd9a8f6"}, {"code": "#(interleave % %)", "problem": 32, "user": "50f48298e4b004d364930527"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "5114ab7be4b0ce5098ee73b5"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "50e4f4e9e4b049a987753896"}, {"code": "mapcat (fn [a] [a a])", "problem": 32, "user": "50e3e108e4b01912b3285c48"}, {"code": "#(interleave % %)", "problem": 32, "user": "4fe8fda4e4b0547ebccb2438"}, {"code": "reduce (fn [l v] (concat l (list v v))) '()", "problem": 32, "user": "50589113e4b06522596eba7f"}, {"code": "(fn dup [coll]\n  (apply concat\n    (for [item coll]\n      (list item item))))", "problem": 32, "user": "51195e77e4b055cfb310d499"}, {"code": "#(interleave % %)", "problem": 32, "user": "5115cf87e4b0ce5098ee73c3"}, {"code": "#(interleave % %)", "problem": 32, "user": "4ecc1d85535d23f0362276f8"}, {"code": "(fn [s] (interleave s s))", "problem": 32, "user": "510cba32e4b078ea71921121"}, {"code": "(fn duplicate\n  ([items]\n     (duplicate items (list)))\n  ([items output]\n  (if (empty? items)\n    (reverse output)\n    (recur (rest items) (conj output (first items) (first items))))))", "problem": 32, "user": "511720eae4b0063b4e3e16da"}, {"code": "#(reduce concat (map (partial repeat 2) %))", "problem": 32, "user": "51181009e4b0e0897831a60f"}, {"code": "(fn [x] (mapcat #(repeat 2 %) x))", "problem": 32, "user": "511a98d7e4b0c87c59c96707"}, {"code": "(fn dup [s]\n  (if (empty? s) s\n    (let [head (first s)]\n      (concat [head head] (dup (rest s))))))", "problem": 32, "user": "5119f3d5e4b06c8af0111818"}, {"code": "(fn [x] (apply concat (map #(list % %) x)))", "problem": 32, "user": "511b810ce4b07ab9ec456182"}, {"code": "#(interleave % %)", "problem": 32, "user": "4e3a2761535deb9a81d77f48"}, {"code": "#(mapcat (fn[x] [x x]) %)", "problem": 32, "user": "511c91ace4b00c2a1fa7ff7a"}, {"code": "#(interleave % %)", "problem": 32, "user": "511618b1e4b0d4f670fd2fdf"}, {"code": "(fn [x]\r\n   (mapcat #(list % %) x)\r\n   )", "problem": 32, "user": "510a6bece4b06956752d35af"}, {"code": "#(interleave %1 %1)", "problem": 32, "user": "511cca27e4b00c2a1fa7ff7d"}, {"code": "#(mapcat (fn rep [a] (repeat 2 a)) %)", "problem": 32, "user": "5119ef37e4b06c8af0111817"}, {"code": "#(interleave % %)", "problem": 32, "user": "511623cbe4b0d4f670fd2fe1"}, {"code": "#(apply concat (for [x %] [x x]))", "problem": 32, "user": "4e50ad74535dc968683fc4ec"}, {"code": "(fn f [x] (cond (empty? x) x :default (cons (first x) (cons (first x) (f (rest x))))))", "problem": 32, "user": "4ff2ff7ce4b0678c553fc342"}, {"code": "(fn [s]\n  (reverse (reduce #(conj %1 %2 %2) '() s)))", "problem": 32, "user": "511c44fde4b00c2a1fa7ff77"}, {"code": "#(interleave % %)", "problem": 32, "user": "505fd903e4b08f2a82ad10b7"}, {"code": "(fn [xs] (seq (reduce #(conj % %2 %2) [] xs)))", "problem": 32, "user": "4fca4c37e4b0ee37620e184f"}, {"code": "(fn dup [s]\n  (if (= s [])\n    []\n    (concat [(first s) (first s)] (dup (rest s)))))", "problem": 32, "user": "5100d7dbe4b04f1d96d946df"}, {"code": "mapcat #(list %1 %1)", "problem": 32, "user": "511e17a9e4b0c5b849dd36b0"}, {"code": "(fn [coll] (mapcat #(repeat 2 %) coll))", "problem": 32, "user": "511f88eee4b085952a83535f"}, {"code": "#(interleave % %)", "problem": 32, "user": "511ac026e4b0c87c59c9670e"}, {"code": "reduce (fn [cur next] (conj cur next next)) []", "problem": 32, "user": "50c4ff23e4b0210b849018b8"}, {"code": "reduce #(conj % %2 %2) []", "problem": 32, "user": "510dc185e4b078ea71921146"}, {"code": "(fn [coll]\n  (reduce #(conj % %2 %2) [] coll))", "problem": 32, "user": "4fc8769be4b0ee37620e1833"}, {"code": "(fn [x]\n  (loop [x x\n         v '()]\n    (if (nil? (first x))\n      v\n      (recur (rest x)\n             (concat v (repeat 2 (first x)))))))", "problem": 32, "user": "5123ac8ee4b061b4c6f0e0b1"}, {"code": "#(interleave % %)", "problem": 32, "user": "512474ede4b02c3f2a072cce"}, {"code": "mapcat #(repeat 2 %)", "problem": 32, "user": "511ac2ede4b0c87c59c9670f"}, {"code": "#(interleave %1 %1)", "problem": 32, "user": "5125834ae4b05d10e3e395fa"}, {"code": "#(for [x %1 y [1 2]] x)", "problem": 32, "user": "511a0374e4b06c8af011181a"}, {"code": "#(interleave %1 %1)", "problem": 32, "user": "5125745ae4b05d10e3e395f9"}, {"code": "mapcat #(repeat 2 %)", "problem": 32, "user": "510acd6ee4b078ea719210f4"}, {"code": "#(apply concat (map list % %))", "problem": 32, "user": "51256b40e4b05d10e3e395f8"}, {"code": "(fn [x] (apply concat (map #(list % %) x)))", "problem": 32, "user": "4f7e7cbde4b06e829148e1cf"}, {"code": "(fn [s] (mapcat vector s s))", "problem": 32, "user": "4dada426c9a9d6ed2a99dc57"}, {"code": "#(interleave % %)", "problem": 32, "user": "5125d963e4b05d10e3e395fe"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "510967aae4b07c05fdf6dc0f"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "4fbbcf0ce4b081705acca2ee"}, {"code": "(fn baf [c] (if (= (count c) 0) '() (conj (conj (baf (drop 1 c)) (first c)) (first c))))", "problem": 32, "user": "5127ca90e4b03a34742b42ff"}, {"code": "#(interleave % %)", "problem": 32, "user": "5127e504e4b03a34742b4302"}, {"code": "#(interleave % %)", "problem": 32, "user": "51284226e4b03a34742b4308"}, {"code": "#(interleave % %)", "problem": 32, "user": "51281b25e4b03a34742b4304"}, {"code": "#(interleave % %)", "problem": 32, "user": "51170b49e4b0063b4e3e16d9"}, {"code": "#(loop [x % y []] (if-not (empty? x)\n             (recur (rest x) (conj y (first x) (first x)))\n                    y))", "problem": 32, "user": "5105ed16e4b01150e115ebe2"}, {"code": "#(loop [nl [] l %] \n   (if-not l \n     nl \n     (recur (conj nl (first l) (first l)) (next l))))", "problem": 32, "user": "5117c31ee4b0e0897831a60c"}, {"code": "(fn dup-each [lst]\n  (if (empty? lst)\n    '()\n    (cons (first lst) (cons (first lst) (dup-each (rest lst))))))", "problem": 32, "user": "4e9a1512535dbda64a6f6b6e"}, {"code": "(fn [xs] (reduce #(into % [%2 %2]) [] xs))", "problem": 32, "user": "511aa2a4e4b0c87c59c9670a"}, {"code": "(fn duplicate\n  ([target] (duplicate target []))\n  ([target acc]\n   (if (empty? target)\n     acc\n     (duplicate (rest target) (conj acc (first target)\n                                    (first target))))))", "problem": 32, "user": "512a7c70e4b0ff5c4bc1f99d"}, {"code": "#(mapcat (fn [x] (repeat 2 x)) %)", "problem": 32, "user": "5121cccee4b05ae5a5823c12"}, {"code": "(fn dupdup\n    ([single_list]\n      (cond\n        (empty? single_list) '()\n        :else\n        (\n          (fn duponce [item target]\n            (cons item (cons item target))          \n          )\n          (first single_list) (dupdup (rest single_list))\n        )\n      )\n    )\n  )", "problem": 32, "user": "502be4fae4b08f5602f232eb"}, {"code": "(fn [coll] (interleave coll coll))", "problem": 32, "user": "5126dbabe4b083bb8f88cf0e"}, {"code": "mapcat (fn [x] [x,x])", "problem": 32, "user": "511d11d7e4b022853b0e079f"}, {"code": "#(interleave % %)", "problem": 32, "user": "512b9e59e4b04d059cf1fd17"}, {"code": "#(sort (reduce conj % %))", "problem": 32, "user": "4fe8d1b5e4b0547ebccb2425"}, {"code": "(fn [array] (reduce #(conj %1 %2 %2) [] array))", "problem": 32, "user": "50feb0e1e4b03cd852b4e851"}, {"code": "(fn [x] (interleave x x))", "problem": 32, "user": "510fd798e4b04c71fce993dc"}, {"code": "mapcat (fn [x] [x x])", "problem": 32, "user": "512d3304e4b040332b905b2d"}, {"code": "#(interleave % %)", "problem": 32, "user": "50c011c6e4b080409b860f29"}, {"code": "#(mapcat (partial repeat 2) %)", "problem": 32, "user": "51057b2be4b06d28cacc92e8"}, {"code": "(fn [s]\n  (reduce \n   (fn [x y]\n     (conj x y y)) [] s))", "problem": 32, "user": "512eb723e4b0b740abc5982b"}, {"code": "mapcat #(repeat 2 %)", "problem": 32, "user": "4f525fdce4b03ad3f0c10d37"}, {"code": "(fn prob32 [solved remaining]\n  (if (= (count remaining) 0)\n    solved\n    ( prob32 (conj solved (first remaining) ( first remaining)) (rest remaining)))) []", "problem": 32, "user": "512f06c5e4b0762be4c7aad7"}, {"code": "(fn [coll]\n  (mapcat list coll coll))", "problem": 32, "user": "511b9017e4b00c2a1fa7ff6b"}, {"code": "#(interleave % %)", "problem": 32, "user": "51307b84e4b08c712d3fae39"}, {"code": "#(interleave % %)", "problem": 32, "user": "50fa01bce4b07934dda8b0ba"}, {"code": "(fn [lll] (reduce (fn [lst x] (conj (conj lst x) x)) [] lll))", "problem": 32, "user": "5131c922e4b06942423563c9"}, {"code": "#(interleave % %)", "problem": 32, "user": "512ddd0ee4b040332b905b39"}, {"code": "mapcat #(lazy-seq [% %])", "problem": 32, "user": "50d3ec8be4b030b634c368bb"}, {"code": "(fn [coll]\n  (mapcat #(repeat 2 %) coll))", "problem": 32, "user": "5132c6f0e4b021281ec7b6d3"}, {"code": "reduce (fn [s x] (conj s x x)) []", "problem": 32, "user": "512f2d17e4b0762be4c7aad8"}, {"code": "(fn [col] (apply concat (map #(repeat 2 %1) col)))", "problem": 32, "user": "512b7a05e4b04d059cf1fd14"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "5128554ee4b03a34742b430a"}, {"code": "#(interleave % %)", "problem": 32, "user": "50ed8fd1e4b06330c1f87c3f"}, {"code": "#(interleave % %)", "problem": 32, "user": "512eb1e7e4b0b740abc5982a"}, {"code": "#(loop [lst % ret '[]]\n   (if (empty? lst)\n     ret\n     (recur (rest lst) (conj ret (first lst) (first lst)))))", "problem": 32, "user": "51000111e4b00d7ad4cab15e"}, {"code": "(fn replic\n  [sq]\n  (apply concat (map #(repeat 2 %) sq)))", "problem": 32, "user": "504e12ade4b078edc5f593b7"}, {"code": "#(sort (concat % %))", "problem": 32, "user": "4de52c87535d08e6dec9fdf0"}, {"code": "mapcat (juxt identity identity)", "problem": 32, "user": "510528a0e4b0730a5f55ad85"}, {"code": "(partial mapcat  #(list % %))", "problem": 32, "user": "51364acfe4b04ac1f358dd51"}, {"code": "(fn [x] (interleave x x))", "problem": 32, "user": "5133e51ae4b0d7a043de8cf6"}, {"code": "(comp #(reduce concat %1) #(map (fn [x] [x x]) %))", "problem": 32, "user": "504ffa26e4b0a02f9cffdead"}, {"code": "(fn f [s]\n  (if-let [[x & xs] (seq s)]\n    (conj (f xs) x x)\n    '()))", "problem": 32, "user": "504ffb8fe4b0a02f9cffdeae"}, {"code": "(fn [coll]\n  (apply concat (map #(repeat 2 %) coll)))", "problem": 32, "user": "51367626e4b04ac1f358dd53"}, {"code": "#(apply concat (map (fn [a] [a a]) %))", "problem": 32, "user": "4f55f4b1e4b0a7574ea7180d"}, {"code": "(fn fobar [s]\n  (if (= s '()) '() (let [f (first s)\n        \t \t\t      r (rest s)]\n                      (conj (conj (fobar r) f) f))))", "problem": 32, "user": "5102ef6be4b00c483ae176fc"}, {"code": "#(sort (concat % %))", "problem": 32, "user": "51352899e4b082aeb3a3f03b"}, {"code": "#(mapcat list % %)", "problem": 32, "user": "5137c3b0e4b0509a8b470482"}, {"code": "(fn [xs] (reduce concat\n                 (map (fn [x]\n                        (list x x)\n                      )\n                      xs\n                 )\n         )\n)", "problem": 32, "user": "51365524e4b04ac1f358dd52"}, {"code": "(fn [s]\n  (apply concat (map (partial repeat 2) s)))", "problem": 32, "user": "5139ff96e4b067e25a345ec1"}, {"code": "#(for [e %, n (range 2)] e)", "problem": 32, "user": "5133af1de4b0d7a043de8cf2"}, {"code": "reduce #(concat %  (list %2 %2)) ()", "problem": 32, "user": "5124619ae4b02c3f2a072ccd"}, {"code": ";(fn dou [x]\n;  (if (= (count x) 0) '() (conj (dou (rest x)) (first x) (first x) )\n;  )\n;)\n(fn [x] (mapcat #(list % %) x))", "problem": 32, "user": "513b77f3e4b00f740c76c403"}, {"code": "#(interleave % %)", "problem": 32, "user": "50e3fe8fe4b0463d32072488"}, {"code": "(fn [s] (interleave s s))", "problem": 32, "user": "5138d08be4b0a5db03d727db"}, {"code": "#(interleave % %)", "problem": 32, "user": "513a4babe4b067e25a345eca"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "513d121fe4b0e544971636a2"}, {"code": "(fn ! [x] (if(= x '()) '() (cons (first x) (cons (first x) (!(rest x))))))", "problem": 32, "user": "5139c00ee4b067e25a345ebc"}, {"code": "(fn [col](apply concat (map #(list % %) col)))", "problem": 32, "user": "513de0e6e4b0825f97f7f965"}, {"code": "(fn [coll] (loop [result coll i (count coll) j 0] \n                 (if (= (* 2 (count coll)) (count result)) \n                   (sort (into () result)) \n                   (recur (assoc result i (get coll j)) (inc i) (inc j)))))", "problem": 32, "user": "513ca934e4b0b86ece9f3228"}, {"code": "(fn dbl [c]\n    (if (empty? c)\n        c\n        (concat (repeat 2 (first c)) (dbl(rest c)))))", "problem": 32, "user": "513a2f23e4b067e25a345ec6"}, {"code": "#(reduce (fn [col _] (conj col _ _)) [] %)", "problem": 32, "user": "50f53694e4b057d4c52de881"}, {"code": "(fn [coll] (apply concat (map #(list % %) coll)))", "problem": 32, "user": "513f0565e4b051389b345b3b"}, {"code": "(fn [input]\n\t\t(interleave input input))", "problem": 32, "user": "51205867e4b0e88f5a20c40f"}, {"code": "(fn make [x] \n  (if (empty? x)\n    '()\n    (concat (cons (first x) '()) (cons (first x) '()) (make (rest x)) )\n  )\n)", "problem": 32, "user": "50edcc53e4b06330c1f87c49"}, {"code": "(fn [x] (interleave x x))", "problem": 32, "user": "512fba16e4b0a88bb1e00aae"}, {"code": "reduce #(conj (conj %1 %2) %2) []", "problem": 32, "user": "511b9e81e4b00c2a1fa7ff6e"}, {"code": "(fn [s] (apply concat (map (fn [x] [x x]) s)))", "problem": 32, "user": "513bb7a6e4b04402f587b77d"}, {"code": "(fn [xs] (apply concat (map (fn [x] (list x x)) xs)))", "problem": 32, "user": "4fb804f7e4b081705acca2d6"}, {"code": "reduce #(conj % %2 %2) []", "problem": 32, "user": "513dcc1ce4b0825f97f7f964"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "50706287e4b07bd6ad9b9f2b"}, {"code": "mapcat (fn [x] [x x])", "problem": 32, "user": "513edd13e4b051389b345b39"}, {"code": "(fn [l] (reduce (fn [dl x] (conj dl x x)) [] l))", "problem": 32, "user": "51411e3be4b05ca1a0b379f3"}, {"code": "(fn [aseq] \n  (reverse \n  (reduce \n     (fn [coll value] (conj coll value value ) )\n       '() aseq )\n   )\n)", "problem": 32, "user": "5135a74ae4b04ac1f358dd46"}, {"code": "(fn [coll]\n  (reverse (reduce #(cons %2 (cons %2 %1)) '() (seq coll))))", "problem": 32, "user": "513fb358e4b00f13ea1bd893"}, {"code": "#(mapcat (partial conj ()) %1 %1)", "problem": 32, "user": "513fbe89e4b00f13ea1bd894"}, {"code": "#(interleave % %)", "problem": 32, "user": "51424cc8e4b0b50abeb46b34"}, {"code": "(fn [l]\n  (loop [[hd & body] l ret []]\n    (if (nil? hd)\n      ret\n      (recur body (conj ret hd hd)))))", "problem": 32, "user": "513cb853e4b0b86ece9f322b"}, {"code": "mapcat (fn [x] [x x])", "problem": 32, "user": "51416934e4b03d51af0d04f0"}, {"code": "#(apply concat (map (fn [x] [x x]) %))", "problem": 32, "user": "513f400ae4b051389b345b3f"}, {"code": "(fn[s] (reverse (reduce (fn[acc,t]( conj acc t t ) )  '() s) ))", "problem": 32, "user": "513f53c6e4b051389b345b40"}, {"code": "reduce #(conj % %2 %2) []", "problem": 32, "user": "5140b7bae4b076604f1aa55b"}, {"code": "#(reverse (reduce into () (map (partial repeat 2) %)))", "problem": 32, "user": "5142ea50e4b0c172af7558ca"}, {"code": "#(interleave % %)", "problem": 32, "user": "4ff01fa9e4b0678c553fc321"}, {"code": "reduce #(conj % %2 %2) []", "problem": 32, "user": "5145832be4b0e8879607340a"}, {"code": "(fn [x] (mapcat (partial repeat 2) x))", "problem": 32, "user": "4f47eab2e4b0d56e7bb92bc6"}, {"code": "#(interleave % %)", "problem": 32, "user": "513dca07e4b0825f97f7f962"}, {"code": "#(interleave % %)", "problem": 32, "user": "512a8ef7e4b0ff5c4bc1f99e"}, {"code": "#(interleave % %)", "problem": 32, "user": "50ef96a1e4b0bdaecbb47d9d"}, {"code": "(fn [a] (interleave a a))", "problem": 32, "user": "50e135f4e4b084616e11c667"}, {"code": "#(loop [xs %, r []]\n   (if (empty? xs)\n     r\n     (recur (rest xs) (conj r (first xs) (first xs)))\n    )\n  )", "problem": 32, "user": "5136f659e4b04059df19f2fd"}, {"code": "(fn [xs] \n  (mapcat (fn [x] [x x]) xs))", "problem": 32, "user": "514677dce4b04ef915e3731a"}, {"code": "(fn [coll] \n  (cond \n   (= 2 (count coll)) (let [[x y] coll] (list x x y y)) \n   (= 3 (count coll)) (let [[x y z] coll] (list x x y y z z)) \n   (= 4 (count coll)) (let [[x y z a] coll] (list x x y y z z a a))))", "problem": 32, "user": "51430fb2e4b0c172af7558ce"}, {"code": "#(interleave % %)", "problem": 32, "user": "5141fafbe4b0b50abeb46b28"}, {"code": "(fn [c]\n  (loop [xe c, result []]\n    (if (seq xe)\n      (recur (rest xe) (conj (conj result (first xe)) (first xe)))\n      result)))", "problem": 32, "user": "4dcc2435535d5973398f9290"}, {"code": "(fn dup [x]\n  (if (empty? x)\n    '()\n    (let [y (first x)]\n      (cons y (cons y (dup (rest x)))))))", "problem": 32, "user": "5110b8bae4b04c71fce993f4"}, {"code": "#(reduce concat (for [item %] [item item]))", "problem": 32, "user": "514721c6e4b0d520409ed392"}, {"code": "(fn [x]\n  (loop \n    [coll () orig x]\n    (if (empty? orig)\n      (reverse coll)\n      (recur (cons (first orig) (cons (first orig) coll)) (rest orig))\n      )\n    )\n  )", "problem": 32, "user": "51377188e4b04059df19f303"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "5140c505e4b049dea086df40"}, {"code": "(fn [s] (mapcat #(list %1 %1) s) )", "problem": 32, "user": "5142e808e4b0c172af7558c9"}, {"code": "#(mapcat vector % %)", "problem": 32, "user": "4fb4303fe4b081705acca2ac"}, {"code": "(fn [s]\n    (let [pairs (for [a s]\n                  [a a])]\n      (reduce concat pairs)))", "problem": 32, "user": "50bf6f93e4b0ffd967a66cbf"}, {"code": "#(apply interleave (replicate 2 %))", "problem": 32, "user": "514b66f4e4b0bd81940b86cb"}, {"code": "(fn dupe [[x & xs :as all]] (if (empty? all) [] (concat [x x] (dupe xs))))", "problem": 32, "user": "50723bbae4b0e3170b5a868b"}, {"code": "#(interleave % %)", "problem": 32, "user": "514d8084e4b019235f6c0588"}, {"code": "mapcat (partial repeat 2)", "problem": 32, "user": "514457fbe4b0b4fb4ace5f43"}, {"code": "mapcat #(replicate 2 %1)", "problem": 32, "user": "514d398ee4b019235f6c0583"}, {"code": ";(fn [col1] (reduce concat (map #(take 2 (repeat %)) col1)))\n#(interleave % %)", "problem": 32, "user": "514d2c7ee4b019235f6c0582"}, {"code": "(fn [a]\n  (interleave a a) \n)", "problem": 32, "user": "4e352362535deb9a81d77f2c"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "5148bcbee4b05514c84b7cc6"}, {"code": "(fn [x] (apply concat (map #(conj [] % %) x)))\n; note: (apply concat) converts each list item in concat to an argument to concat)\n; e.g > (apply concat [[1][2]])\n;(1 2)\n;> (concat [1] [2])\n; (1 2)", "problem": 32, "user": "514cfa27e4b019235f6c057d"}, {"code": "(fn [s]\n  (reverse\n   (reduce #(cons %2 (cons %2 %1)) '() s)))", "problem": 32, "user": "51502056e4b098b221effc25"}, {"code": "(fn [my-seq]\n  (reduce concat (map (fn [x] [x x]) my-seq)))", "problem": 32, "user": "51508efce4b0c51f0585bbb4"}, {"code": "#(interleave % %)", "problem": 32, "user": "51037468e4b00c483ae17702"}, {"code": "mapcat #(conj [] % %)", "problem": 32, "user": "5073e7fde4b054001656accb"}, {"code": "(fn myFunc [col]\n  (reduce\n  (fn conjo [x y] (conj (conj x y ) y))  [] col  ))", "problem": 32, "user": "51427a8be4b0b50abeb46b37"}, {"code": "#(interleave % %)", "problem": 32, "user": "5146df5ae4b04ef915e3731d"}, {"code": "#(mapcat vector % %)", "problem": 32, "user": "5150600de4b098b221effc29"}, {"code": "#(interleave % %)", "problem": 32, "user": "5151a6bee4b03e678e393ad3"}, {"code": "(fn [x] (apply concat (map #(repeat 2 %) x)))", "problem": 32, "user": "5151aa14e4b03e678e393ad4"}, {"code": "(fn [s]\n  (loop [s s\n         ds []]\n    (if s\n      (recur (next s) (conj ds (first s) (first s)))\n      ds)))", "problem": 32, "user": "51460e4ce4b04ef915e37314"}, {"code": "reduce #(concat % [%2 %2]) []", "problem": 32, "user": "514def61e4b019235f6c0591"}, {"code": "(fn [coll] (mapcat #(repeat 2 %) coll))", "problem": 32, "user": "5150f87ae4b03e678e393ac7"}, {"code": "#(reduce (fn [col item] (conj col item item )) [] %)", "problem": 32, "user": "5016ac54e4b052339a490e7b"}, {"code": "#(sort (take (* (count %) 2) (cycle  %)))", "problem": 32, "user": "4ef2eb4d535dced4c769f226"}, {"code": "(fn [x] (mapcat #(into % %) (partition 1 x)))", "problem": 32, "user": "510ec1bce4b07438aa321461"}, {"code": "#(interleave % %)", "problem": 32, "user": "4f296a80e4b0d6649770a02a"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "514afd1be4b0bd81940b86c6"}, {"code": "#(reduce (fn[c x](conj c x x)) '() (reverse %))", "problem": 32, "user": "5153b1bce4b0252ac4b16639"}, {"code": "#(interleave % %)", "problem": 32, "user": "514f0723e4b019235f6c0599"}, {"code": "#(interleave % %)", "problem": 32, "user": "4e58ef07535d8a8b8723a299"}, {"code": "(fn [lst] (apply concat (map #(repeat 2 %) lst)))", "problem": 32, "user": "51558136e4b06c5f6a1490a8"}, {"code": "#(reduce (fn [x y] (conj x y y)) '() (reverse %))", "problem": 32, "user": "5150a7d7e4b03e678e393abb"}, {"code": "#(interleave % %)", "problem": 32, "user": "51383346e4b0a5db03d727d4"}, {"code": "#(interleave % %)", "problem": 32, "user": "5154c361e4b0179c5115f4e3"}, {"code": "(fn [xs] (reduce (fn [acc x] (cons x (cons x acc))) '() (reverse xs)))", "problem": 32, "user": "51553ea7e4b06c5f6a1490a2"}, {"code": "mapcat (fn [x] [x x])", "problem": 32, "user": "51533ecde4b0252ac4b16619"}, {"code": "(fn dupeeach [sq]\n  (reduce #(conj (conj %1 %2) %2) [] sq))", "problem": 32, "user": "515737f0e4b0b0b4b87062d0"}, {"code": "#(apply concat (map (fn [x] [x x]) %))", "problem": 32, "user": "51473a70e4b0d520409ed394"}, {"code": "(fn [x] (seq (reduce\n (fn [col y]\n   (conj col y y))\n '[]\n x)))", "problem": 32, "user": "51547920e4b084ca81ee2e1c"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "51584459e4b0a069fd272c74"}, {"code": "#(reverse (reduce (fn [l a] (conj (conj l a) a)) '() %))", "problem": 32, "user": "515828b8e4b0a069fd272c71"}, {"code": "(fn [col] (mapcat vector col col))", "problem": 32, "user": "504e71cbe4b0f6ff3350c4b3"}, {"code": "(fn [s]\n  (reverse \n   (reduce \n    (fn [acc b] (into acc (list b b))) \n    '() \n    s)))", "problem": 32, "user": "50ff5887e4b017584cb41ccd"}, {"code": "(fn [l] (reduce #(conj %1 %2 %2) [] l))", "problem": 32, "user": "4eeccfc0535d93acb0a668b5"}, {"code": "#(interleave % %)", "problem": 32, "user": "50e1bdd8e4b019fc399ce17f"}, {"code": "(fn [coll]\n  (reduce #(conj % %2 %2) [] coll))", "problem": 32, "user": "515a6151e4b0394f658fe241"}, {"code": "(fn [coll] (apply concat (map #(vector % %) coll)))", "problem": 32, "user": "4fa85ae4e4b081705acca1d3"}, {"code": "(fn [coll]\n  (loop [c coll acc '()]\n    (cond (empty? c) (reverse acc)\n          :else (recur (rest c) (cons (first c) (cons (first c) acc))))))", "problem": 32, "user": "515c6132e4b069911535cf0d"}, {"code": "#(interleave % %)", "problem": 32, "user": "514e4ae4e4b019235f6c0594"}, {"code": "(fn duplicate-seq [seq]\n  (letfn [(duplicate [target]\n  (conj () target target))]\n\n    (if (= (count seq) 1)\n      (duplicate (first seq))\n      (reverse (into (duplicate (first seq)) (duplicate-seq (rest seq)))))))", "problem": 32, "user": "51177fbce4b0e0897831a60b"}, {"code": "(comp reverse (fn [l] (reduce #(cons %2 (cons %2 %1)) '() l)))", "problem": 32, "user": "515ba2c2e4b0a102a3e52639"}, {"code": "mapcat (fn [x] (seq [x x]))", "problem": 32, "user": "512339fce4b03b44edbed434"}, {"code": "#(interleave % %)", "problem": 32, "user": "514d7e29e4b019235f6c0587"}, {"code": "(fn [x] (reduce concat (map #(repeat 2 %) x)))", "problem": 32, "user": "515c9f14e4b069911535cf16"}, {"code": "#(interleave % %)", "problem": 32, "user": "510c8a00e4b078ea7192111f"}, {"code": "(fn [x]\n   (apply concat (map #(list % %) x))\n  )", "problem": 32, "user": "513b43ede4b067e25a345ed3"}, {"code": "reduce #(conj % %2 %2) []", "problem": 32, "user": "515f0a39e4b02c55805ea23a"}, {"code": "#(apply concat (map list % %))", "problem": 32, "user": "515efd01e4b02c55805ea238"}, {"code": "#(\n(fn dup [x acc]\n  (if\n    (empty? x) \n    (reverse acc)\n    (dup (rest x) (cons (first x) (cons (first x) acc)))\n    )\n  )\n  % '())", "problem": 32, "user": "515f8a0de4b0e2be8aa20bce"}, {"code": "(fn dupseq [sq]\n  (apply concat (map #(repeat 2 %) sq)))", "problem": 32, "user": "515f2a85e4b0595cf3d1da44"}, {"code": "(fn [x] (apply concat (map #(list % %) x)))", "problem": 32, "user": "515ead6be4b049add99a053e"}, {"code": "#(mapcat list % %)", "problem": 32, "user": "50fe9d60e4b03cd852b4e84f"}, {"code": "mapcat (fn [x] [x x])", "problem": 32, "user": "515cf9b5e4b00901442db1d4"}, {"code": "#(interleave % %)", "problem": 32, "user": "515bed3be4b0388ca8ca1525"}, {"code": "#(interleave % %)", "problem": 32, "user": "5134973ce4b0230e9f713b42"}, {"code": "#(mapcat (fn [x] [x x]) %)", "problem": 32, "user": "515ef58be4b02c55805ea237"}, {"code": "(fn [s] (reduce (fn [a b] (conj (conj a b) b)) [] s))", "problem": 32, "user": "515e38ace4b049add99a0538"}, {"code": "mapcat #(repeat 2 %)", "problem": 32, "user": "5153316ce4b0252ac4b16611"}, {"code": "(fn [items]\n  (reduce concat (map #(take 2 (repeat %)) items)))", "problem": 32, "user": "504ee511e4b0e7ad84dbc4a4"}, {"code": "#(apply concat (map vector % %))", "problem": 32, "user": "515ffbfbe4b0e2be8aa20bdd"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "5156e767e4b04360f2428e6b"}, {"code": "#(interleave % %)", "problem": 32, "user": "50705886e4b07bd6ad9b9f2a"}, {"code": "#(interleave % %)", "problem": 32, "user": "511937eee4b055cfb310d495"}, {"code": "(fn [d] (reverse (reduce #(conj %1 %2 %2) '() d)))", "problem": 32, "user": "515d6281e4b00901442db1dc"}, {"code": "#(reverse (reduce (fn [a b] (cons b (cons b a))) () %))", "problem": 32, "user": "51592b81e4b0394f658fe22c"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "515e8ce2e4b049add99a053d"}, {"code": "(fn [coll] (reduce into [] (for [i coll] [i i])))", "problem": 32, "user": "4fdbc075e4b05e33b9224f61"}, {"code": "#(interleave % %)", "problem": 32, "user": "4f437751e4b0d7d3c9f3fd20"}, {"code": "#(for [x %\n       y (repeat 2 x)]\n   y)", "problem": 32, "user": "5160195ae4b0e2be8aa20be3"}, {"code": "(fn [t] (->> t (reduce (fn [x y] (conj x y y)) '()) reverse))", "problem": 32, "user": "5162757ee4b03cfa3774b3fe"}, {"code": "#(mapcat (fn [x] (list x x)) %)", "problem": 32, "user": "5141bc82e4b02fd87f5064c5"}, {"code": "#(interleave % %)", "problem": 32, "user": "50b19a91e4b03ea880433552"}, {"code": "(fn [x] (apply interleave (repeat 2 x)))", "problem": 32, "user": "513e9aa0e4b02b2a3d8235c4"}, {"code": "(fn [s]\n\t(interleave s s))", "problem": 32, "user": "51662183e4b05e5ef6a5e807"}, {"code": "(fn [s]\n  (loop [l s\n         result '()]\n    (cond\n     (empty? l) (reverse result)\n     :else (recur (rest l)\n                  (into result (list (first l) (first l)))))))", "problem": 32, "user": "5154fa3fe4b0179c5115f4e6"}, {"code": "#(interleave % %)", "problem": 32, "user": "5166e80de4b060c690c1f4c5"}, {"code": "mapcat (partial repeat 2)", "problem": 32, "user": "51670895e4b013fc800656c1"}, {"code": "(fn [col]\n  (loop [c col acc '()]\n    (if (= (last c) nil)\n      acc\n      (recur (rest c) (concat acc [(first c) (first c)])))))", "problem": 32, "user": "5163a7bbe4b055933a9ca02f"}, {"code": "(fn [x]\n    (loop [todo x\n           res []]\n      (if (empty? todo)\n        res\n        (let [f (first todo)\n              r (next todo)]\n          (recur r (conj res f f))))))", "problem": 32, "user": "5165a235e4b079ad97ec44ac"}, {"code": "mapcat #(cons %1 [%1])", "problem": 32, "user": "4e399d94535deb9a81d77f42"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "4ec4d723535dcc7ae8597d65"}, {"code": "#(interleave % %)", "problem": 32, "user": "516199bbe4b009fba0926e36"}, {"code": "(fn dupSeq [x]\n  \t(mapcat #(conj '() %1 %1) x)\n)", "problem": 32, "user": "5113e492e4b0029845b11c58"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "5070e31ee4b0e3170b5a8678"}, {"code": "#(interleave % %)", "problem": 32, "user": "5168d4ebe4b03f62cda68cdf"}, {"code": "(fn dd[s] (cond \n           (nil? (first s)) s\n           :default (concat (list (first s) (first s)) (dd (rest s)))\n           )\n  )", "problem": 32, "user": "4fb03cf4e4b081705acca262"}, {"code": "(fn [coll]\n  (apply concat (map #(repeat 2 %) coll)))", "problem": 32, "user": "51696bcde4b03f62cda68ce7"}, {"code": "#(interleave % %)", "problem": 32, "user": "51631002e4b017b283c712c1"}, {"code": "#(for[x % y [1 2]] x)", "problem": 32, "user": "51623490e4b009fba0926e42"}, {"code": "(fn [coll] (interleave coll coll))", "problem": 32, "user": "51696ee7e4b03f62cda68ce8"}, {"code": "#(interleave % %)", "problem": 32, "user": "51652141e4b003cf19fdde48"}, {"code": "#(sort (concat % %))", "problem": 32, "user": "516e9d9be4b06aac486e5b2b"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "5079fd71e4b08327cd804a66"}, {"code": "#(mapcat (partial repeat 2) %)", "problem": 32, "user": "5164867fe4b003cf19fdde3e"}, {"code": "(fn [lst]\n  (apply concat (map (partial repeat 2) lst)))", "problem": 32, "user": "516f06dce4b06aac486e5b39"}, {"code": "(fn f [x]\n  (reduce \n    (fn [a e] (conj a e e))\n    []\n    x\n  )\n)", "problem": 32, "user": "516ed04ee4b06aac486e5b30"}, {"code": "#(interleave % %)", "problem": 32, "user": "5115e112e4b0ce5098ee73c4"}, {"code": "#(reduce\n     (fn [ss s]\n       (conj ss s s))\n     [] %)", "problem": 32, "user": "516e2246e4b092a6408c5bc5"}, {"code": "#(interleave % %)", "problem": 32, "user": "5143952fe4b0b4fb4ace5f38"}, {"code": "#(interleave % %)", "problem": 32, "user": "511d6a01e4b022853b0e07a5"}, {"code": "#(apply concat (for [x %] [x x]))", "problem": 32, "user": "50b1d166e4b03ea880433554"}, {"code": "(fn [seq]\n  (apply concat\n   (map #(vector % %)\n        seq)))", "problem": 32, "user": "516ff477e4b034fe8eaf70f3"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "516ea313e4b06aac486e5b2c"}, {"code": "(fn dup [the-list]\n\t(if (= 0 (count the-list))\n\t\t'()\n\t\t(cons (first the-list) (cons (first the-list) (dup (rest the-list))))\n\t)\n)", "problem": 32, "user": "51701a9ce4b034fe8eaf70f5"}, {"code": "(fn [x] (reduce into (map #(vec (repeat 2 %) ) x)))", "problem": 32, "user": "516c3472e4b06f078fab251c"}, {"code": "(fn [x] (reduce #(conj %1 %2 %2) [] x))", "problem": 32, "user": "4f189b42535d64f60314645d"}, {"code": "(fn [x] (reduce (fn [y [x1 x2]] (cons x1 (cons x2 y))) (map #(repeat 2 %) (reverse x))))", "problem": 32, "user": "50a2e3fbe4b029e8bace3629"}, {"code": "(partial mapcat (fn [x] [x x]))", "problem": 32, "user": "51721aefe4b0d70c8bbbf24a"}, {"code": "(fn [x] (reduce concat (map #(repeat 2 %) x)))", "problem": 32, "user": "516dc88ae4b046df6fbb76a1"}, {"code": "(fn dupl [in]\n   (if (empty? in)\n     '()\n     (conj (dupl (rest in)) (first in) (first in))))", "problem": 32, "user": "51684318e4b03f62cda68cd6"}, {"code": "#(interleave % %)", "problem": 32, "user": "516933ece4b03f62cda68ce4"}, {"code": "#(reduce concat (map (partial repeat 2) %))", "problem": 32, "user": "51740b65e4b0d277d717bc67"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "516bc02ce4b005fd0cdf85c5"}, {"code": "(fn [coll]\n  (reverse\n   (reduce #(cons %2 (cons %2 %1)) '() coll)))", "problem": 32, "user": "51227a00e4b068a9582e656b"}, {"code": "(fn dup [coll]\n  (reduce (fn [a b]\n            (conj a b b)) nil (reverse coll)))", "problem": 32, "user": "51736d4de4b00f4b6b0490d7"}, {"code": "(fn [x]\n\t(loop [out '() x (seq x)]\n\t\t(if (= (count x) 0)\n\t\t\t(reverse out)\n\t\t\t(recur (conj (conj out (first x)) (first x)) (rest x)))))", "problem": 32, "user": "51757af0e4b085adf681d873"}, {"code": "(fn [s] (reduce #(concat % (list %2 %2)) () s))", "problem": 32, "user": "5175616ae4b0dea9bbfba576"}, {"code": "(fn [s]\n  (reduce #(conj %1 %2 %2)\n    [] s)\n)", "problem": 32, "user": "51750fc5e4b07031762f2ee6"}, {"code": "#(interleave % %)", "problem": 32, "user": "5173726be4b098276e74652c"}, {"code": "#(interleave %1 %1)", "problem": 32, "user": "516db4f6e4b046df6fbb76a0"}, {"code": "#(interleave % %)", "problem": 32, "user": "5170ea06e4b0d70c8bbbf235"}, {"code": "#(mapcat (partial repeat 2) %)", "problem": 32, "user": "51778122e4b085adf681d89d"}, {"code": "#(interleave % %)", "problem": 32, "user": "51780f88e4b03d69594194c9"}, {"code": "(letfn [(dup [coll] \n             (when-let [s (seq coll)]\n             (lazy-seq (let [fst (first s)] \n                        (cons fst (cons fst (dup (next s)) )) ))))] dup)", "problem": 32, "user": "51729002e4b044b2ef48a850"}, {"code": "(fn  [a] (reverse (reduce #(conj %1 %2 %2) '() a)))", "problem": 32, "user": "515ff4b9e4b0e2be8aa20bd9"}, {"code": "(fn [m]\n  ((fn iter [l m]\n    (if (= (count m) 0)\n      l\n      (iter (conj l (first m) (first m)) (rest m)))) [] m))", "problem": 32, "user": "517531c6e4b07031762f2eea"}, {"code": "#(interleave % %)", "problem": 32, "user": "51789599e4b03d69594194d6"}, {"code": "(fn duplicate-seq-elem [xs]\n  (mapcat #(repeat 2 %) xs))", "problem": 32, "user": "517a025ce4b01aacecbecbe6"}, {"code": "mapcat (fn [x] (list x x))", "problem": 32, "user": "517adc6ce4b0925c997201c4"}, {"code": "reduce #(concat %1 [%2 %2]) []", "problem": 32, "user": "5163b06be4b055933a9ca030"}, {"code": "(fn duplicate [xs]\n  (reduce #(conj (conj %1 %2) %2) [] xs))", "problem": 32, "user": "517bf28de4b07ef0e56148d5"}, {"code": "#(interleave % %)", "problem": 32, "user": "50cfcad6e4b00b15ecee9752"}, {"code": "(partial \n   (fn [result l]\n     (if (nil? (first l))\n       result\n       (let [newresult (concat result (list (first l) (first l)))]\n         (recur newresult (rest l))))\n     ) '())", "problem": 32, "user": "4f934325e4b0dcca54ed6cb8"}, {"code": "(fn [s] (reduce (fn [d, x] (concat d [x x])) [] s))", "problem": 32, "user": "50fc9c08e4b0d10d794c19f9"}, {"code": "(fn dup [xs] (if (empty? xs) xs (let [x (first xs)] (concat [x x] (dup (rest xs))))))", "problem": 32, "user": "515fb48fe4b0e2be8aa20bd5"}, {"code": "#(interleave % %)", "problem": 32, "user": "517bbbfce4b07ef0e56148cf"}, {"code": "mapcat (fn [x] [x x])", "problem": 32, "user": "51780bfce4b0f89a8f53839c"}, {"code": "#(mapcat (fn [x] [x x]) %)", "problem": 32, "user": "517b59b8e4b0925c997201d0"}, {"code": "#(mapcat list % %)", "problem": 32, "user": "516eb196e4b06aac486e5b2e"}, {"code": "mapcat #(repeat 2 %)", "problem": 32, "user": "5093a80be4b097f48cc38583"}, {"code": "(fn [col] (apply concat (map #(repeat 2 %) col)))", "problem": 32, "user": "517e5a91e4b0329b27fa9f55"}, {"code": "#(interleave % %)", "problem": 32, "user": "4ed286d4535d44c135fd68d7"}, {"code": "(fn dup [s]\n  (if (= s '())\n    '()\n    (cons (first s) (cons (first s) (dup (rest s))))))", "problem": 32, "user": "51803613e4b04f45bde7d8fd"}, {"code": "(fn [coll]\n  (mapcat #(repeat 2 %) coll))", "problem": 32, "user": "51804bcbe4b04f45bde7d901"}, {"code": "#(interleave % %)", "problem": 32, "user": "5166b491e4b060c690c1f4be"}, {"code": "(fn [xs] (apply concat (for [x xs] (repeat 2 x))))", "problem": 32, "user": "50b9d991e4b04934c218a4a9"}, {"code": "#(loop [ coll []  int %]\n       (if (empty? int) coll\n           (recur (conj coll (first int) (first int))  (rest int)\n)))", "problem": 32, "user": "517945dce4b0684c1c981a43"}, {"code": "#(interleave % %)", "problem": 32, "user": "5162d424e4b004547eb5eaaa"}, {"code": "(fn dupe [[x & xs]]\n  (if (empty? xs)\n    (list x x)\n    (concat (list x x) (dupe xs))))", "problem": 32, "user": "50fe2420e4b03cd852b4e84a"}, {"code": "#(interleave % %)", "problem": 32, "user": "516733fce4b079759a74a5e9"}, {"code": "#(interleave % %)", "problem": 32, "user": "517ecab1e4b09104ecebe7e8"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "5180af54e4b0e3fc13e244e9"}, {"code": "#(interleave % %)", "problem": 32, "user": "4f6cf933e4b07046d9f4efc2"}, {"code": "#(interleave % %)", "problem": 32, "user": "4e6a3b79535d8ccf87e9feb3"}, {"code": "#(apply concat (map (fn [x] [x x]) %))", "problem": 32, "user": "4faa5735e4b081705acca1ee"}, {"code": "(fn f [lst]\n  (reduce concat \n       (map (partial repeat 2) lst)))", "problem": 32, "user": "51750cd4e4b07031762f2ee5"}, {"code": "#(for [x % y [x x]] y)", "problem": 32, "user": "517e6671e4b0329b27fa9f56"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "4fecebe1e4b0681fd128dcac"}, {"code": "#(interleave % %)", "problem": 32, "user": "5183abf6e4b028ec5fd2f2a6"}, {"code": "#(reduce (fn [m a] (concat m (list a a))) '() %)", "problem": 32, "user": "5185e17ee4b0da5a5be3bac5"}, {"code": "#(reduce concat (map (fn [x] (list x x)) %))", "problem": 32, "user": "5186571de4b0da5a5be3bad1"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "5140771ae4b076604f1aa555"}, {"code": "#(mapcat (fn [x] [x x]) %)", "problem": 32, "user": "518696c1e4b0c40be512d708"}, {"code": "mapcat (fn [x] [x x])", "problem": 32, "user": "5186134ce4b0da5a5be3bac7"}, {"code": "reduce #(concat %1 (repeat 2 %2)) ()", "problem": 32, "user": "517dc49be4b0fcc7c5d37d38"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "51870799e4b057e3860ab7dc"}, {"code": "(fn [x] (mapcat #(vector % %) x))", "problem": 32, "user": "5179fd22e4b01aacecbecbe5"}, {"code": "#(interleave % %)", "problem": 32, "user": "517bc969e4b07ef0e56148d0"}, {"code": "#(reduce concat (map (fn [x] [x x]) %))", "problem": 32, "user": "50955676e4b087f34d351ab1"}, {"code": "#(interleave % %)", "problem": 32, "user": "5152bc4ee4b001f44f99bfef"}, {"code": "(fn [z] (reduce concat [] (for [x z] [x x])))", "problem": 32, "user": "5099283ce4b0cae2931060af"}, {"code": "(fn [s]\n  (apply concat (for [i s]\n    [i i])))", "problem": 32, "user": "4f942227e4b0dcca54ed6cbe"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "51805d22e4b0e3fc13e244df"}, {"code": "(fn [x] (reduce concat (map #(take 2 (repeat %)) x)))", "problem": 32, "user": "518a59b3e4b02bf06f6bbb4b"}, {"code": "#(reduce (fn [a b] (conj a b b)) [] %)", "problem": 32, "user": "51899891e4b0288ada3dbdab"}, {"code": "reduce #(conj (conj % %2) %2) []", "problem": 32, "user": "51823a97e4b0f2adb733651e"}, {"code": "reduce #(conj (conj %1 %2) %2) []", "problem": 32, "user": "5180c69ae4b06b8caf33fa00"}, {"code": "mapcat #( vector % %)", "problem": 32, "user": "518c26e6e4b0f028e99addfa"}, {"code": "(fn [x]\n  (reduce concat (map (fn [y]\n                        (take 2 (repeat y)))\n                        x)))", "problem": 32, "user": "5188c487e4b0bdff0e072d55"}, {"code": "#(loop [col %1 result ()]\n         (if (empty? col)\n           result\n           (recur (rest col) (concat  result (list (first col)(first col))))))", "problem": 32, "user": "518ccf6be4b05e6c8537e386"}, {"code": "(fn [s] (reduce #(conj %1 %2 %2) [] s))", "problem": 32, "user": "517e25c6e4b0329b27fa9f51"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "5161c6a7e4b009fba0926e38"}, {"code": "#(interleave % %)", "problem": 32, "user": "518b761ae4b0f028e99addee"}, {"code": "(fn [xs] (reverse (reduce #(cons %2 (cons %2 %)) () xs )))", "problem": 32, "user": "51897709e4b0288ada3dbdaa"}, {"code": "(fn [coll]\n  (mapcat #(repeat 2 %) coll))", "problem": 32, "user": "516c0a7de4b005fd0cdf85cb"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "5159849ce4b0394f658fe236"}, {"code": "(fn [s]\n  (reverse (loop [result () cnt (count s) i 0]\n     (if (= i  cnt) result\n         (recur (merge (merge result (nth s i)) (nth s i)) cnt (inc i))\n     )\n  ) )\n)", "problem": 32, "user": "518aec06e4b06da86c1973c2"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "518ec633e4b0cd6ff516769e"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "51771cb1e4b085adf681d895"}, {"code": "#(interleave % %)", "problem": 32, "user": "4dcd327b535d5973398f929b"}, {"code": "(fn [x] (loop[myNL '() myL x](if(not= (first myL) nil)\n                               (recur\n                                (concat myNL (repeat 2 (first myL)))\n                                (rest myL)\n                                )\n                               myNL\n                               )\n          )\n  )", "problem": 32, "user": "5177cacde4b0261ae665b877"}, {"code": "#(for [x % i '(1 2)] x)", "problem": 32, "user": "5177f89ae4b0f89a8f53839a"}, {"code": "(fn [col]\n  (loop [inputcol (reverse col) outputcol ()]\n    (if (empty? inputcol)\n      outputcol\n      (recur (rest inputcol) (conj (conj outputcol (first inputcol)) (first inputcol))))))", "problem": 32, "user": "51026750e4b00c483ae176f7"}, {"code": "(fn [x] (apply concat (map #(vector % %) x)))", "problem": 32, "user": "519136e9e4b0f8ef0be96c01"}, {"code": "(fn [x] (mapcat #(repeat 2 %) x))", "problem": 32, "user": "5154b16be4b0179c5115f4e2"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "5192dd39e4b0c663c5d86c9e"}, {"code": "#(apply concat (for [x %] [x x]))", "problem": 32, "user": "51933b41e4b0c663c5d86ca2"}, {"code": "#(sort (into [] (concat %1 %1)))", "problem": 32, "user": "5143824ae4b0b4fb4ace5f36"}, {"code": "#(interleave % %)", "problem": 32, "user": "5194675fe4b0142f60b4aedf"}, {"code": "mapcat #(repeat 2 %)", "problem": 32, "user": "518e6966e4b051adb72789ec"}, {"code": "(fn [s]\n  (reduce concat (map #(take 2 (repeat %)) s)))", "problem": 32, "user": "518a8c4be4b0df82f5685903"}, {"code": "#(apply concat (for [x %] [x x]))", "problem": 32, "user": "50992197e4b0cae2931060ae"}, {"code": "(fn [x] (mapcat #(vector % %) x))", "problem": 32, "user": "51980f7ce4b068aa333628f7"}, {"code": "#(mapcat (fn [x] [x x]) %)", "problem": 32, "user": "5197f674e4b068aa333628f6"}, {"code": "#(interleave % %)", "problem": 32, "user": "5196568fe4b04c0af7ff3c1c"}, {"code": "(fn [x] (apply concat (map #(repeat 2 %) x)))", "problem": 32, "user": "5195b8cce4b04c0af7ff3c08"}, {"code": "(fn d [c]\n  (when (seq c)\n    (concat (take 2 (repeat (first c)))\n            (lazy-seq (d (rest c))))))", "problem": 32, "user": "50377d53e4b0af0658af77ad"}, {"code": "mapcat #(-> [% %])", "problem": 32, "user": "4dada913c9a9d6ed2d99dc57"}, {"code": "#(mapcat (fn [x] [x x]) %)", "problem": 32, "user": "51131da8e4b0350614f07a83"}, {"code": "#(mapcat (partial repeat 2) %)", "problem": 32, "user": "4f409e29e4b0e243712b1fb6"}, {"code": "(fn dup [v] (interleave v v))", "problem": 32, "user": "51990df9e4b068aa333628fc"}, {"code": "(fn [xs]\n  (apply concat\n   (map (fn [x] (list x x)) xs)))", "problem": 32, "user": "519b231ee4b0ac1b7dced6a2"}, {"code": "(fn [s] (loop [s s r '()]\n          (if (seq s)\n            (recur (rest s) (concat r [(first s) \n                                       (first s)]))\n                                    \n            r)\n          )\n  )", "problem": 32, "user": "4fa340b4e4b081705acca18c"}, {"code": "#(interleave % %)", "problem": 32, "user": "519b2570e4b0ac1b7dced6a3"}, {"code": "#(interleave % %)", "problem": 32, "user": "519126d5e4b0f8ef0be96bff"}, {"code": "(partial mapcat (partial repeat 2))", "problem": 32, "user": "5199ca05e4b022efe2b3ba88"}, {"code": "(fn [xs] (reduce #(conj % %2 %2) [] xs))", "problem": 32, "user": "519b7d76e4b02a926d9a436e"}, {"code": "(fn foo \n  ([x] (foo x []))\n  ([x y] \n   (if (=(count x) 0)\n    y\n   (foo (rest x) (conj y (first x) (first x)))\n    )\n  )\n)", "problem": 32, "user": "5191045ee4b0f8ef0be96bf3"}, {"code": "(fn[xs]\n  (reverse (reduce #(cons %2 (cons %2 %1)) '() xs)))", "problem": 32, "user": "5196749be4b04c0af7ff3c20"}, {"code": "reduce (fn[x y] (conj (conj x y ) y)) []", "problem": 32, "user": "518c5236e4b087e178201de0"}, {"code": "(fn [x]\n\t(reduce (fn [a b](conj (conj a b) b)) (cons [(first x) (first x)] (rest x))))", "problem": 32, "user": "51794ec2e4b0684c1c981a45"}, {"code": "(fn [x] (interleave x x))", "problem": 32, "user": "5194f482e4b05be8c43d2385"}, {"code": "#(apply concat (for [x %1] [x x]))", "problem": 32, "user": "4dade9e9c9a9d6ed4799dc57"}, {"code": "(fn dupp [ls]  \n  \n(letfn [(dup [l,acc]\n  (if (empty? l)\n      acc\n      (dup (rest l) (conj acc (first l) (first l)) )\n   )\n  )]   \n\n (dup ls []))\n)", "problem": 32, "user": "5180dc04e4b06b8caf33fa01"}, {"code": "#(interleave (seq %) (seq %))", "problem": 32, "user": "5192ce1de4b0024e2d75f7d2"}, {"code": "(fn [xs] (mapcat (fn [x] (list x x)) xs))", "problem": 32, "user": "516385cee4b055933a9ca02d"}, {"code": "(fn [s]\n  (interleave s s))", "problem": 32, "user": "519db0ede4b037b32803f9b9"}, {"code": "#(loop [x % acc []]\n    (if (nil? (seq x))\n      (seq acc)\n      (recur (rest x) (conj (conj acc (first x)) (first x)))))", "problem": 32, "user": "519dbf26e4b037b32803f9bd"}, {"code": "(fn[x](mapcat #(repeat 2 %)x))", "problem": 32, "user": "4daf29b1edd6309eace4d172"}, {"code": "(fn [coll]\n  (loop [my-seq '() s coll]\n    (if (empty? s)\n      (reverse my-seq)\n      (recur (cons (first s) (cons (first s) my-seq)) (rest s)))))", "problem": 32, "user": "51991a89e4b068aa333628fd"}, {"code": "#(loop [xs % ret '()]\n   (if-not (first xs)\n     (reverse ret)\n     (let [x (first xs)]\n       (recur (rest xs) (cons x (cons x ret))))))", "problem": 32, "user": "508e2584e4b0f17d83ea26c9"}, {"code": "#(interleave % %)", "problem": 32, "user": "51a05bede4b0b292b01ee3f4"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "51a4d53ae4b0def3c5c58699"}, {"code": "#(interleave % %)", "problem": 32, "user": "506ba58be4b0eda3100c090b"}, {"code": "#(->> % (concat %) sort)", "problem": 32, "user": "4e5e391c535d8a8b8723a2d0"}, {"code": "#(interleave % %)", "problem": 32, "user": "51a477eee4b0def3c5c58692"}, {"code": "(fn [xs] (reduce (fn [c n] (conj c n n)) [] xs))", "problem": 32, "user": "4fe9f0f6e4b0547ebccb247b"}, {"code": "reduce #(conj % %2 %2) []", "problem": 32, "user": "51a768e0e4b0da5f497bde84"}, {"code": "(fn [x] (interleave x x))", "problem": 32, "user": "5137fb22e4b0a5db03d727d3"}, {"code": "#(reduce \n   (fn [acc x] \n     (concat acc (list x x)))\n   () %)", "problem": 32, "user": "5141abf1e4b02fd87f5064c3"}, {"code": "(fn [s]\n  (apply concat (map #(vector % %) s)))", "problem": 32, "user": "51197750e4b057cba170bc99"}, {"code": "#(reverse (reduce (fn [x y] (conj (conj x y) y)) nil %))", "problem": 32, "user": "519964cbe4b0aa09cbc0b849"}, {"code": "(fn [coll]\n\t(reduce (fn[value coll](conj (conj value coll) coll)) [] coll))", "problem": 32, "user": "4e723bcb535d5021c1a8965c"}, {"code": "(fn [xs] (reduce #(concat %1 [%2 %2]) [] xs))", "problem": 32, "user": "51a8f0c6e4b08d8ec191b821"}, {"code": "(fn [coll]\n  (apply concat (map #(repeat 2 %) coll)))", "problem": 32, "user": "51a9dbc9e4b04e3dc0c27b1e"}, {"code": "#(interleave % %)", "problem": 32, "user": "51aab611e4b04e3dc0c27b2d"}, {"code": "#(reduce concat (for [n %] [n n]))", "problem": 32, "user": "5065dd94e4b0313a384e5643"}, {"code": "(fn [s] (reverse (reduce #(cons %2 (cons %2 %1)) '() s)))", "problem": 32, "user": "506cad7de4b0a302964c548e"}, {"code": "(partial\n\t(fn bar [res s]\n\t\t\t(if (= s '()) \n\t\t\t\t(reverse res)\n\t\t\t\t(bar (conj res (first s) (first s)) (rest s))\n\t\t\t)\n\t)\n\t'()\n)", "problem": 32, "user": "51a0e0b7e4b0b292b01ee3fb"}, {"code": "(fn [coll] (apply concat (map #(repeat 2%) coll)))", "problem": 32, "user": "518f9e14e4b08646f171ca07"}, {"code": "reduce #(conj %1 %2 %2) '[]", "problem": 32, "user": "5183f5d7e4b02826a645f393"}, {"code": "(fn [coll] (mapcat #(vector % %) coll))", "problem": 32, "user": "51a54fb4e4b0def3c5c586a3"}, {"code": "reduce #(conj(conj %1 %2), %2) []", "problem": 32, "user": "51a7b4fee4b0da5f497bde8b"}, {"code": "reduce #( conj % %2 %2 ) [ ]", "problem": 32, "user": "51aa4eede4b04e3dc0c27b25"}, {"code": "#(interleave % %)", "problem": 32, "user": "51ab1718e4b04e3dc0c27b2f"}, {"code": "#(apply concat\n        (for [x %1]\n           (list x x)))", "problem": 32, "user": "4db6d993535d1e037afb2180"}, {"code": "(fn [col] (apply concat (map #(conj '() % %) col)))", "problem": 32, "user": "51a3c9cde4b0e77c4ca60bf9"}, {"code": "(fn dbl [xs]\n  (mapcat (fn [x] [x x]) xs))", "problem": 32, "user": "51ac6360e4b09397d510976c"}, {"code": "(fn [x] (loop [se x res []] (if (= () se) (list* res) (recur (rest se)(conj (conj res (first se)) (first se))))))", "problem": 32, "user": "51a7f74be4b08d8ec191b802"}, {"code": "#(reduce concat (map (partial repeat 2) %))", "problem": 32, "user": "51a417dde4b0def3c5c58688"}, {"code": "(fn [s] (mapcat (fn [x] (list x x)) s))", "problem": 32, "user": "51a8b576e4b08d8ec191b81a"}, {"code": "(fn [s] (reduce concat (map #(seq [% %]) s)))", "problem": 32, "user": "51aa5434e4b04e3dc0c27b26"}, {"code": "mapcat #(do [% %])", "problem": 32, "user": "510b0480e4b078ea719210fa"}, {"code": "#(apply list (reduce (fn [l x] (conj l x x)) [] %))", "problem": 32, "user": "4e68ed35535d8ccf87e9fe92"}, {"code": "mapcat #(repeat 2 %)", "problem": 32, "user": "4fd11132e4b04c3a95aa0409"}, {"code": "#(interleave % %)", "problem": 32, "user": "51af978fe4b0c53cf2e68a50"}, {"code": "#(interleave % %)", "problem": 32, "user": "504f0036e4b0e7ad84dbc4aa"}, {"code": "#(interleave % %)", "problem": 32, "user": "518cdbd6e4b05e6c8537e387"}, {"code": "#(interleave % %)", "problem": 32, "user": "51a10b2ce4b0b292b01ee3fe"}, {"code": "#(sort (reduce conj % %))", "problem": 32, "user": "51afa3d9e4b0c53cf2e68a51"}, {"code": "(fn [xs]\n  (mapcat (fn [x] [x x]) xs))", "problem": 32, "user": "51aa2b4fe4b04e3dc0c27b21"}, {"code": "#(interleave % %)", "problem": 32, "user": "51ad0ab8e4b09397d510977b"}, {"code": "(fn duplicate\n  [some-seq]\n  (reverse \n   (reduce \n    (fn [acc e]\n     (cons e (cons e acc)))   \n    [] some-seq)))", "problem": 32, "user": "51af4cf6e4b0c53cf2e68a4c"}, {"code": "(fn double [x] (reduce #(conj %1 %2 %2) [] x))", "problem": 32, "user": "51b0fc95e4b0c53cf2e68a72"}, {"code": "(fn [s]\n  (reduce (fn [xs x]\n            (cons x (cons x xs)))\n          '()\n          (reverse s)))", "problem": 32, "user": "4f4e78fee4b03ad3f0c10cc8"}, {"code": "(fn [x]\n  (loop [dupes [] x x]\n    (if (not (empty? x))\n      (recur (conj dupes (first x) (first x)) (rest x))\n      dupes)))", "problem": 32, "user": "51a2569ee4b00957e520db7d"}, {"code": "(fn dup [sq]\n  (reverse \n   ((fn dupr [sq acc]\n     (if (not (empty? sq))\n     \t(recur (rest sq) (cons (first sq) (cons (first sq) acc)))\n     \tacc))\n   (seq sq) nil)))", "problem": 32, "user": "51b24defe4b02f8f128bb963"}, {"code": "(fn [coll] (reduce #(conj (conj %1 %2) %2) '[] coll))", "problem": 32, "user": "51b213c2e4b02f8f128bb962"}, {"code": "(fn [x]\n(reverse (reduce #(conj %1 %2 %2) '() x)))", "problem": 32, "user": "50d4593ee4b09cc622d65a68"}, {"code": "reduce #(conj % %2 %2) []", "problem": 32, "user": "51b2e850e4b026427ecf067b"}, {"code": "#(sort (into % %))", "problem": 32, "user": "50a5b7e9e4b0aa96157e2610"}, {"code": "#(interleave % %)", "problem": 32, "user": "51af872ae4b0c53cf2e68a4e"}, {"code": "#(interleave % %)", "problem": 32, "user": "518ad8fce4b06da86c1973c1"}, {"code": "#(interleave % %)", "problem": 32, "user": "5190772de4b09156e89b2a0a"}, {"code": "(fn [coll] (reduce #(conj (conj %1 %2) %2) '[] coll))", "problem": 32, "user": "4f9f9ff5e4b0dcca54ed6d3a"}, {"code": "mapcat (fn [a] [a a])", "problem": 32, "user": "51b793d3e4b0d906fcd71d38"}, {"code": "(partial mapcat (fn [x] [x x]))", "problem": 32, "user": "51672d15e4b079759a74a5e7"}, {"code": "#(interleave % %)", "problem": 32, "user": "51b3f109e4b0f094dd986fa9"}, {"code": "(fn [x] (interleave x x))", "problem": 32, "user": "51b7b521e4b0d906fcd71d3a"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "50f69a3ce4b0035e89151844"}, {"code": "#(reduce concat (map (fn [e] (list e e)) %))", "problem": 32, "user": "51b76227e4b0d906fcd71d35"}, {"code": "#(interleave %1 %1)", "problem": 32, "user": "51ae350fe4b09397d5109790"}, {"code": "#(reverse (reduce (fn [coll elem] (conj (conj coll elem) elem)) '() %))", "problem": 32, "user": "51b8e0dce4b050a1176cd69f"}, {"code": "reduce #(concat %1 [%2 %2]) []", "problem": 32, "user": "51aeb1f4e4b09397d5109794"}, {"code": "(fn [s] (mapcat #(list % %) s))", "problem": 32, "user": "51bc2f6ae4b0fe3ecfb46452"}, {"code": "(fn [in-sequence] (for [s in-sequence i (range 2)] s))", "problem": 32, "user": "51a3b135e4b0e77c4ca60bf6"}, {"code": "#(mapcat (fn [x] (list x x)) %)", "problem": 32, "user": "51bb970be4b0fe3ecfb4644e"}, {"code": "(fn dup [s]\n  (if(empty? s) '()\n    (concat (list (first s) (first s)) (dup (rest s)))))", "problem": 32, "user": "51b73a91e4b0d906fcd71d33"}, {"code": "(fn duplist [l]\n  (interleave l l))", "problem": 32, "user": "51baff1be4b0fe3ecfb46443"}, {"code": "mapcat (partial repeat 2)", "problem": 32, "user": "4ebf11bc535dfed6da9c6d9c"}, {"code": "#(loop [c % d []] (if (empty? c) d (recur (rest c) (conj d (first c) (first c)))))", "problem": 32, "user": "4f99bf3ee4b0dcca54ed6d01"}, {"code": "(fn f [i]\n   (if (empty? i)\n     `()\n     (into (vector (first i) (first i))\n           (f (rest i)))\n     )\n   )", "problem": 32, "user": "505d70e8e4b0e6aca564be09"}, {"code": "#(interleave % %)", "problem": 32, "user": "51b90b88e4b050a1176cd6a2"}, {"code": "reduce #(concat %1 (list %2 %2)) '()", "problem": 32, "user": "51bf4560e4b013aa0d74b817"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "509ecefde4b08df8156e9e35"}, {"code": "(fn [x]\n  (apply concat (map #(repeat 2 %) x))\n  )", "problem": 32, "user": "51bec919e4b013aa0d74b800"}, {"code": "#(interleave % %)", "problem": 32, "user": "51bd1a0de4b0df1216cefd93"}, {"code": "#(sort (into % %))", "problem": 32, "user": "51beb32ae4b013aa0d74b7fd"}, {"code": "(fn [x] (loop [result [], x x]\n\t(if (empty? x)\n\t\tresult\n\t\t(recur (conj result (first x) (first x)) (rest x))\n\t)))", "problem": 32, "user": "51ba4482e4b0fe3ecfb4642b"}, {"code": "(fn [s]\n  (loop [out [] s s]\n    (if (empty? s) out\n      (recur (conj out (first s) (first s)) (rest s)))))", "problem": 32, "user": "51c342e9e4b0851ac09658f3"}, {"code": "#(reverse (loop [coll % r ()] (if (seq coll) (recur (rest coll) (cons (first coll) (cons (first coll) r))) r)))", "problem": 32, "user": "51ab1da1e4b04e3dc0c27b30"}, {"code": "#(apply concat (for [x %] [x x]))", "problem": 32, "user": "51c330a9e4b0851ac09658f2"}, {"code": "#(mapcat (fn [x] [x x]) %)", "problem": 32, "user": "51789dfae4b03d69594194d7"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "51b9d1f0e4b0e871ca49590b"}, {"code": "(fn [coll]\n  (reverse\n   (reduce #(conj % %2 %2) '() coll)))", "problem": 32, "user": "51b86a0fe4b09e0e347b2e78"}, {"code": "(fn dup-seq [lat]\n  (reduce concat (map #(take 2 (repeat %)) lat)))", "problem": 32, "user": "51ba59e4e4b0fe3ecfb4642d"}, {"code": "(fn [x] (reduce #(apply conj %1 %2) (map #(vector % %) x)))", "problem": 32, "user": "519291c1e4b08962174cf74b"}, {"code": "#(mapcat (fn [a] [a a]) %)", "problem": 32, "user": "51a1659de4b00957e520db72"}, {"code": "( fn [noo](reverse (reduce #(cons %2 (cons %2 %1)) '() noo)))", "problem": 32, "user": "51bcf091e4b0df1216cefd91"}, {"code": "(fn [x] (mapcat #(vector % %) x))", "problem": 32, "user": "51c09719e4b0c9c82288293c"}, {"code": "(fn dup [sq] (let [[fst & rst] sq]\n           (when fst\n             (cons fst (cons fst (dup rst))))))", "problem": 32, "user": "51c3c6a6e4b0851ac09658f8"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "4fa3c137e4b081705acca193"}, {"code": "(fn ! [lst]\n     (into \n      [(first lst) (first lst)]\n      (if (> (count lst) 1) (! (rest lst)) [])\n      ))", "problem": 32, "user": "50d6d7eee4b0159555a1fc76"}, {"code": "#(interleave % %)", "problem": 32, "user": "51793056e4b0684c1c981a41"}, {"code": "#(interleave %1 %1)", "problem": 32, "user": "4f72f71be4b07046d9f4f03d"}, {"code": "mapcat (partial repeat 2)", "problem": 32, "user": "51c1d159e4b0d204dbe2ca18"}, {"code": "(fn [lst]\n  (reverse\n   (reduce (fn [memo aval]\n             (cons aval (cons aval memo))) '() lst)))", "problem": 32, "user": "51c76864e4b07ef393169e3f"}, {"code": "#(interleave % %)", "problem": 32, "user": "4f52ae00e4b03ad3f0c10d42"}, {"code": "(fn d\n  [l]\n  (cond\n   (empty? l) '()\n   :else (cons (first l) (cons (first l) (d (rest l))))))", "problem": 32, "user": "518c0f4ee4b0f028e99addf7"}, {"code": "#(interleave % %)", "problem": 32, "user": "51c9c6cde4b09ce160bef5b1"}, {"code": "reduce #(conj % %2 %2) []", "problem": 32, "user": "51c8301ee4b07ef393169e4d"}, {"code": "(partial reduce (fn [c e] (conj c e e)) [])", "problem": 32, "user": "51c73959e4b07ef393169e3e"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "51cc5f20e4b02254fc794870"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "51cbdee1e4b08d8387cbede1"}, {"code": "#(mapcat (partial repeat 2)%)", "problem": 32, "user": "51a34135e4b0ab315a23ba63"}, {"code": "#(interleave % %)", "problem": 32, "user": "51cacda3e4b068dadb8f2227"}, {"code": "#(interleave % %)", "problem": 32, "user": "4f5dae33e4b0030a34fb2b41"}, {"code": "reduce #(concat %1 [%2 %2]) '()", "problem": 32, "user": "51ccc179e4b02254fc794879"}, {"code": "reduce (fn [res y] ( concat res [y] [y] )) []", "problem": 32, "user": "51cec7b1e4b0e42293a2255b"}, {"code": "(fn [coll] (mapcat #(list % %) coll))", "problem": 32, "user": "51cdd3f0e4b0e42293a2254b"}, {"code": "(fn [s] (reduce (fn [a b] (concat a [b b])) [] s))", "problem": 32, "user": "51c9a705e4b09ce160bef5ab"}, {"code": "#(mapcat vector % %)", "problem": 32, "user": "51d08d67e4b067c365486351"}, {"code": "#(interleave % %)", "problem": 32, "user": "51cb073ce4b068dadb8f2233"}, {"code": "(fn [s] (reduce #(conj %1 %2 %2) '[] s))", "problem": 32, "user": "51caca2ae4b068dadb8f2226"}, {"code": "(partial mapcat (fn [x] [x x]))", "problem": 32, "user": "51d19c24e4b0cfcf579466c3"}, {"code": "(fn [x] (mapcat (fn [y] [y y]) x))", "problem": 32, "user": "51d18c47e4b0cfcf579466c1"}, {"code": "#(interleave % %)", "problem": 32, "user": "51b9b5ace4b0e871ca495908"}, {"code": "#(apply concat (map (fn [x] (list x x)) %))", "problem": 32, "user": "51ca7906e4b08b1cbd0d9487"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "51cc5cb3e4b02254fc79486f"}, {"code": "#(interleave % %)", "problem": 32, "user": "51cf126ae4b0e42293a2256b"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "51bdc609e4b0ff155d51d2b3"}, {"code": "#(interleave % %)", "problem": 32, "user": "51c19873e4b0d204dbe2ca0d"}, {"code": "(fn dup [arg]\n  (loop [col arg\n    \t res '()]\n    (if (empty? col) (reverse res)\n      (recur (rest col)\n             (conj res (first col) (first col))))))", "problem": 32, "user": "51cbaf14e4b08d8387cbedda"}, {"code": "(fn dup [input]\n    (if(empty? input) \n        '()\n        (conj (dup (rest input)) (first input) (first input)))\n)", "problem": 32, "user": "51d1111ce4b067c36548635f"}, {"code": "(fn dupe [xs]\n   (if (empty? xs)\n     '()\n   (cons (first xs) (cons (first xs) (dupe (rest xs))))))", "problem": 32, "user": "51d1db6ce4b0d13b04db0d90"}, {"code": "#(interleave % %)", "problem": 32, "user": "517cc671e4b0bbbf1f12af0a"}, {"code": "#( loop [x 0,y %,z (count %)]\n      (if (== x z)\n           (subvec y z)\n           (recur (inc x)\n                       (conj y (nth y x) (nth y x))\n                         z)))", "problem": 32, "user": "51c4690fe4b06b70b3e207e1"}, {"code": "(fn dup-seq [seq]\n  (reduce concat (map #(take 2 (repeat %)) seq)))", "problem": 32, "user": "51d1875be4b0cfcf579466c0"}, {"code": "#(interleave % %)", "problem": 32, "user": "5082ccb3e4b06a522e8c7af3"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "50bfd849e4b042992946c649"}, {"code": "#(sort (concat % %))", "problem": 32, "user": "51d360d1e4b099f3b6acddff"}, {"code": "(fn[x] (loop [xs x result []]\n    (if (not (empty? xs))\n      (recur (rest xs) (conj result (first xs) (first xs)))\n      result)))", "problem": 32, "user": "51d10b1fe4b067c36548635e"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "51d4ed02e4b013d740b70dec"}, {"code": "(fn f [s]\n  (let [f*\n        (fn [acc s*]\n          (conj acc s* s*))]\n    (reduce f* [] s)))", "problem": 32, "user": "51d662fce4b0154f82ab92ef"}, {"code": "#(interleave % %)", "problem": 32, "user": "516d2a46e4b06f078fab252f"}, {"code": "#(loop [newcol '() cur 0] (if (< cur (count %)) (recur (concat (concat newcol [(nth % cur)]) [(nth % cur)]) (inc cur) ) newcol))", "problem": 32, "user": "51c9fe91e4b09ce160bef5b6"}, {"code": "#(loop [toProcess %\n        acc []]\n   (let [current (first toProcess)\n         nextToProcess (next toProcess)]\n     (cond\n      (empty? toProcess) (seq acc)\n      :else (recur nextToProcess (conj acc current current))\n      )\n    )\n   )", "problem": 32, "user": "51d67516e4b0154f82ab92f0"}, {"code": "(fn dup [s] (reverse (reduce (fn [sq x] (conj (conj sq x) x)) '() s)))", "problem": 32, "user": "51d381b5e4b099f3b6acde01"}, {"code": "(fn [se]\n    (loop [lst '()\n           cur (first se)\n           rst (rest se)]\n      (cond\n       (nil? cur) (reverse lst)\n       :else (recur (conj lst cur cur) (first rst) (rest rst)))))", "problem": 32, "user": "4f038b62535dcb61093f6b1c"}, {"code": "(fn [s]\n  (loop [s s\n         result '()]\n    (if (empty? s)\n      result\n      (recur (rest s) (concat result (take 2 (repeat (first s))))))))", "problem": 32, "user": "504dffe2e4b078edc5f5938b"}, {"code": "#(sort (concat % %))", "problem": 32, "user": "51d96ad0e4b02ceefd94774f"}, {"code": "(fn  ! [s]\n  (if (empty? s)\n    nil\n    (cons (first s)(cons (first s) (! (rest s))))\n  )\n)", "problem": 32, "user": "51db8244e4b0e067a9bbadc7"}, {"code": "(fn [coll]\n (reduce concat (map (partial repeat 2) coll)))", "problem": 32, "user": "51da7e49e4b02ceefd947768"}, {"code": "(fn [coll]\n  (reduce into []\n         (for [x coll]\n           (repeat 2 x))))", "problem": 32, "user": "51ab734ee4b04e3dc0c27b34"}, {"code": "(fn [s]\n  (mapcat #(identity [% %]) s))", "problem": 32, "user": "5175533fe4b0dea9bbfba575"}, {"code": "(fn [my-seq]\n   (reverse (reduce #(conj %1 %2 %2) '() my-seq)))", "problem": 32, "user": "4ede0511535d10e5ff6f5330"}, {"code": "(fn duplicate-seq [seq]\n  (reduce concat (map #(take 2 (repeat %)) seq)))", "problem": 32, "user": "51ac7e9be4b09397d510976f"}, {"code": "reduce (fn [acc i] (conj acc i i)) []", "problem": 32, "user": "51b6f4f9e4b04fc00976d479"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "51d49b75e4b013d740b70de6"}, {"code": "#(interleave % %)", "problem": 32, "user": "51d46133e4b013d740b70de2"}, {"code": "(fn ! [l]\n  (cond\n   (empty? l) []\n   :else (cons (first l) (cons (first l) (! (rest l))))))", "problem": 32, "user": "5164d97ee4b003cf19fdde43"}, {"code": "reduce   (fn [x y] (conj x  y y)) []", "problem": 32, "user": "518644bce4b0da5a5be3baca"}, {"code": "mapcat #(vector % %)", "problem": 32, "user": "51db9e1ee4b0e067a9bbadc9"}, {"code": "(fn [coll] (sort (into [] (concat coll coll))))", "problem": 32, "user": "51dd55dae4b0c33a4e1da404"}, {"code": "(fn dup-seq [seq]\n  (reduce concat (map #(take 2 (repeat %)) seq)))", "problem": 32, "user": "51daa721e4b02ceefd94776f"}, {"code": "#(interleave % %)", "problem": 32, "user": "51d11f5de4b067c365486360"}, {"code": "#(interleave % %)", "problem": 32, "user": "51da565ae4b02ceefd947765"}, {"code": "#(interleave % %)", "problem": 32, "user": "51e00020e4b01188f0627534"}, {"code": "(fn [x] (sort (concat x x)))", "problem": 32, "user": "4ec6a616535d6d7199dd36d2"}, {"code": "(partial reduce #(conj % %2 %2) [])", "problem": 32, "user": "51df505be4b01188f062752a"}, {"code": "(fn [coll]\n    ( apply concat ( map (fn [i] (vector i i)) coll))\n    )", "problem": 32, "user": "51d9eb05e4b02ceefd947755"}, {"code": "(fn [coll]\n  (reduce concat (map #(take 2 (repeat %)) coll)))", "problem": 32, "user": "51ce1320e4b0e42293a22551"}, {"code": "#(interleave % %)", "problem": 32, "user": "51da52dbe4b02ceefd947763"}, {"code": "(fn [coll]\n  (reverse (reduce into (map #(list % %) coll))))", "problem": 32, "user": "50e90813e4b033b0e80d11e7"}, {"code": "#(interleave % %)", "problem": 32, "user": "51d5ff4ce4b01da06753aa98"}, {"code": "(fn [data] (loop [d data\n                  x []]\n             (if (empty? d)\n               x\n               (recur (rest d) (apply conj x [(first d) (first d)])))))", "problem": 32, "user": "50214ffae4b0ef1d2d4433bc"}, {"code": "#(interleave % %)", "problem": 32, "user": "51b3d998e4b0f094dd986fa8"}, {"code": "(fn [x] \n     (reverse\n     \t(reduce\n         (fn [ a i ] (cons i (cons i a))) (empty list) x\n         )\n      )\n     )", "problem": 32, "user": "51e1c176e4b06a68e693eafb"}, {"code": "(fn [x] (reduce #(concat %1 (repeat 2 %2)) '() x))", "problem": 32, "user": "51b66b31e4b02e5820733406"}, {"code": "(fn [xs] (reduce #(conj %1 %2 %2) [] xs))", "problem": 32, "user": "51e24a04e4b01e5198146430"}, {"code": "#(for [x % y (range 2)] x)", "problem": 32, "user": "51e3cf8ee4b0efabf93c02a3"}, {"code": "(fn [coll] (reduce concat (map #(repeat 2 %) coll)))", "problem": 32, "user": "51e41f4be4b0efabf93c02ac"}, {"code": "#(interleave % %)", "problem": 32, "user": "51e58e02e4b0efabf93c02d0"}, {"code": "mapcat #(vector % %)", "problem": 32, "user": "5167cf82e4b0c5a4140a3095"}, {"code": "(fn double-coll [coll]\n  (if (empty? coll)\n    ()\n    (into (double-coll (rest coll)) (list (first coll) (first coll)))))", "problem": 32, "user": "51e595a6e4b0efabf93c02d8"}, {"code": "(fn dup [c & dc]\n  (if (empty? c)\n    '()\n    (conj (dup (rest c) dc) (first c) (first c))\n   )\n)", "problem": 32, "user": "51e1a1fae4b06a68e693eaf6"}, {"code": "reduce #(conj % %2 %2) []", "problem": 32, "user": "50cf21dee4b0e61f11ddcd8b"}, {"code": "mapcat #(seq [%1 %1])", "problem": 32, "user": "51d59859e4b01da06753aa92"}, {"code": ";; yikebocai's solution to Duplicate a Sequence\n;; https://4clojure.com/problem/32\n\n(fn [s] \n  (let [sq (map #(take 2 (repeat %)) s)]\n    (reduce concat sq)))", "problem": 32, "user": "5022292ee4b0846bc458ae46"}, {"code": "#(apply concat (for [x %] [x x]))", "problem": 32, "user": "51e23b80e4b01e519814642b"}, {"code": "(fn [lst]\n  (letfn [(rec [lst acc]\n               (if (empty? lst)\n                 acc\n                 (rec (rest lst) (cons (first lst)\n                                       (cons (first lst) acc)))))]\n    (reverse (rec lst '()))))", "problem": 32, "user": "51e0198ee4b01188f0627539"}, {"code": "#(interleave % %)", "problem": 32, "user": "51df825de4b01188f062752b"}, {"code": "#(mapcat (fn [x] [x x]) %)", "problem": 32, "user": "51e89428e4b006d205356a51"}, {"code": "#(reduce (fn [a b] (concat a (list b b))) '() %)", "problem": 32, "user": "4fea24e0e4b0547ebccb248d"}, {"code": "#(sort (concat % %))", "problem": 32, "user": "51dc5033e4b09c47a74ce109"}, {"code": "(fn [x] (mapcat #(list % %) x))", "problem": 32, "user": "4f75469ee4b0fbe0118ec55a"}, {"code": "(fn [x] (reduce concat (map list x x)))", "problem": 32, "user": "50856bd1e4b004985b776e4c"}, {"code": "#(interleave % %)", "problem": 32, "user": "51ba8f82e4b0fe3ecfb46434"}, {"code": "(fn [s]\n  (interleave s s))", "problem": 32, "user": "51eb3aace4b0f1f103a0d159"}, {"code": "(fn [s]\n  (reduce\n   (fn [os a]\n     (conj os a a)\n     )\n   []\n   s\n   )\n  )", "problem": 32, "user": "504e90bae4b069badc5a33b8"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "51eca2ace4b069f463c22cd0"}, {"code": "#(apply concat (for [x %] [x x]))", "problem": 32, "user": "51dd6a7ce4b0c33a4e1da409"}, {"code": "(fn f ([x] (f x []))\n      ([x v]\n        (if-not (empty? x) (recur (rest x) (conj v (first x) (first x)))\n                           (reverse (reduce conj '() v)))))", "problem": 32, "user": "51eadb98e4b0f1f103a0d153"}, {"code": "mapcat #(vector % %)", "problem": 32, "user": "51eb0374e4b0f1f103a0d156"}, {"code": "(fn [s]\n  (mapcat #(repeat 2 %) s)\n  )", "problem": 32, "user": "5029f263e4b023940c84aa45"}, {"code": "(fn me [xs]\n  (if (= (next xs) nil)\n    (list (first xs) (first xs))\n    (concat (list (first xs) (first xs)) (me (rest xs)))))", "problem": 32, "user": "51ef66a7e4b0871fa145d9a5"}, {"code": "(fn [coll] (mapcat #(list % %) coll))", "problem": 32, "user": "51efd397e4b0249c592fbdeb"}, {"code": "#(interleave % %)", "problem": 32, "user": "51e780dae4b0730ab87cf353"}, {"code": "reduce #(concat %1 (list %2 %2)) '()", "problem": 32, "user": "51efa6a6e4b0249c592fbde8"}, {"code": "(fn[x] (reverse (reduce into () (map #(list % %) x))))", "problem": 32, "user": "51f2851fe4b0210f90e7454b"}, {"code": "(fn foo[acc lst]\n  (if\n    (empty? lst)\n    acc\n    (foo (concat acc (list (first lst) (first lst))) (rest lst))\n    )\n  ) ()", "problem": 32, "user": "51eec1a6e4b0871fa145d98d"}, {"code": "#(reduce (fn [l n] (conj l n n)) [] %)", "problem": 32, "user": "51ec9114e4b069f463c22ccd"}, {"code": "#(reverse (reduce (fn [a b]\n           (conj a b b)) () %))", "problem": 32, "user": "51f2ab8be4b0210f90e74554"}, {"code": "reduce #(conj % %2 %2) []", "problem": 32, "user": "51f04e89e4b0274c496158cd"}, {"code": "#(interleave % %)", "problem": 32, "user": "511b233ae4b07ab9ec456180"}, {"code": "#(reduce (fn [k s] (conj k s s)) [] %)", "problem": 32, "user": "51f55bdae4b0abb92f97f9d0"}, {"code": "(fn mydouble [x]\n   (if (empty? x)\n     nil\n     (cons (first x) (cons (first x) (mydouble (rest x))))))", "problem": 32, "user": "51f13b80e4b06a20a2523f38"}, {"code": "#(loop [in %\n        out []]\n   (if (empty? in)\n     out\n     (recur (rest in) (conj (conj out (first in)) (first in)))))", "problem": 32, "user": "51f28a64e4b0210f90e7454e"}, {"code": "reduce (fn [l x] (concat l (list x x))) ()", "problem": 32, "user": "51f59607e4b0abb92f97f9d5"}, {"code": "(fn __ [l]\n  (if (empty? l)\n    (list)\n    (conj (conj (__ (rest l))\n                       (first l))\n                 (first l))))", "problem": 32, "user": "51e6a2bce4b0ab43cc26c21d"}, {"code": "(fn dup\n  ([x] (dup [] x))\n  ([x y] (if (empty? y)\n           x\n           (dup (conj x (first y) (first y) ) (rest y)))))", "problem": 32, "user": "51dd9370e4b0c33a4e1da40c"}, {"code": "(fn [s](reduce concat (map (fn [x] [x x]) s)))", "problem": 32, "user": "51ed09b6e4b0bb507043158b"}, {"code": "(fn[s]\n  (reduce\n    (fn [result, ix]\n      (conj result ix ix)\n      ) [] s\n    )\n  )", "problem": 32, "user": "51b5a6e0e4b0f094dd986fce"}, {"code": "(fn [coll]\n  (apply concat (map #(list % %) coll)))", "problem": 32, "user": "51f40975e4b0fca5e8b4822e"}, {"code": "#(mapcat (partial repeat 2) %)", "problem": 32, "user": "50aedb8ce4b0a40c9cfb08d4"}, {"code": "(fn [coll] (reduce #(conj %1 %2 %2) [] coll))", "problem": 32, "user": "518279abe4b0353c468deb65"}, {"code": "reduce (fn [xs x] (conj xs x x)) []", "problem": 32, "user": "51db1abae4b094966a2cd685"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "5046ee3ee4b03b02161376b4"}, {"code": "#(interleave % %)", "problem": 32, "user": "512c0f84e4b03a42b6300232"}, {"code": "#(interleave % %)", "problem": 32, "user": "51f7dd27e4b06ff1c25c52dc"}, {"code": "#(interleave %1 %1)", "problem": 32, "user": "51fa1375e4b0f1313d4689c9"}, {"code": "(fn [x] (apply concat (map #(repeat 2 %) x)))", "problem": 32, "user": "4f592f83e4b0030a34fb2ad2"}, {"code": "(fn [coll] (mapcat #(repeat 2 %) coll))", "problem": 32, "user": "51fa852ee4b0f1313d4689dd"}, {"code": "(fn [v] (->> v (concat v) sort))", "problem": 32, "user": "51f98843e4b09be9c177e54e"}, {"code": "(fn [x]\n  (mapcat #(list %1 %1) x))", "problem": 32, "user": "51f82769e4b09be9c177e527"}, {"code": "#(interleave % %)", "problem": 32, "user": "51facf22e4b0f1313d4689f0"}, {"code": "#(interleave % %)", "problem": 32, "user": "51f9b1d0e4b09be9c177e550"}, {"code": "#(interleave % %)", "problem": 32, "user": "51f8277be4b09be9c177e528"}, {"code": "mapcat #(vector % %)", "problem": 32, "user": "515ebde3e4b01e5d11ccd0a8"}, {"code": "#(apply concat (map (partial repeat 2) %))", "problem": 32, "user": "51a2a376e4b00957e520db7f"}, {"code": "(fn [s]\n    (seq (reduce (fn [accum v]\n                   (conj (conj accum v) v))\n           []\n           s)))", "problem": 32, "user": "501f36dde4b0cb6ebc0a42e4"}, {"code": "(fn [sec]\n  (loop [sec sec\n         result '()]\n    (if (empty? sec)\n      (reverse result)\n      (recur (rest sec)\n             (concat (list (first sec) (first sec)) result)))))", "problem": 32, "user": "51f297a3e4b0210f90e74552"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "51fb4a9be4b0f1313d4689ff"}, {"code": "mapcat #(vec [% %])", "problem": 32, "user": "51a584c7e4b051b01d55f44e"}, {"code": "(fn [x] (apply concat (map #(vector % %) x)))", "problem": 32, "user": "51891c96e4b04c2714a2670e"}, {"code": "#(interleave %1 %1)", "problem": 32, "user": "51db0d99e4b06aa4d4669a9d"}, {"code": "#(reduce \n   into\n   (for [x %]\n     [x x]))", "problem": 32, "user": "51944aaae4b0142f60b4aedc"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "50c781bbe4b00bb60fe0c535"}, {"code": "(fn [seq] (mapcat #(list % %) seq))", "problem": 32, "user": "51fe9d7ce4b0f1313d468a70"}, {"code": "mapcat (partial repeat 2)", "problem": 32, "user": "5201572be4b0d7096e99ddbb"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "5201d2f3e4b0b2e020a18f22"}, {"code": "(fn [coll] (reduce concat (map #(list % %) coll)))", "problem": 32, "user": "5201cf92e4b0b2e020a18f21"}, {"code": "#(sort (concat %1 %1))", "problem": 32, "user": "516ab8c2e4b081287f204e9e"}, {"code": "#(interleave % %)", "problem": 32, "user": "515919fbe4b0394f658fe229"}, {"code": "#(letfn [(dup [x] (list x x))] (mapcat dup %))", "problem": 32, "user": "5202cfe7e4b030ee0c5b2702"}, {"code": "(partial mapcat #(list % %))", "problem": 32, "user": "52039e12e4b0fb7e47ea51ff"}, {"code": "(fn [coll] (mapcat #(repeat 2 %) coll))", "problem": 32, "user": "5203621ee4b0fb7e47ea51f5"}, {"code": "#(interleave % %)", "problem": 32, "user": "518e7d3be4b051adb72789f0"}, {"code": "(fn [s] (interleave s s))", "problem": 32, "user": "5201ff99e4b0b2e020a18f26"}, {"code": "#(for [x % y [0 1]] x)", "problem": 32, "user": "52016fd3e4b0b2e020a18f10"}, {"code": "#(reduce (fn [a b] (conj a b b)) [] %)", "problem": 32, "user": "52069fade4b0bf4f1882c82c"}, {"code": "#(interleave % %)", "problem": 32, "user": "504e0517e4b078edc5f5939a"}, {"code": "#(mapcat (fn [elem] (list elem elem)) %)", "problem": 32, "user": "4e580746535d8a8b8723a28c"}, {"code": "(fn [xs] (apply concat (map #(repeat 2 %) xs)))", "problem": 32, "user": "5208495ce4b0c1501ba9e6da"}, {"code": "#(interleave % %)", "problem": 32, "user": "520612a7e4b0bf4f1882c81c"}, {"code": "mapcat #(vector % %)", "problem": 32, "user": "51fa7154e4b0f1313d4689da"}, {"code": "#(apply concat (map (fn [e] (repeat 2 e)) %))", "problem": 32, "user": "52000564e4b023d2eb508ca8"}, {"code": "(fn [xs] (reduce #(into % [%2 %2]) [] xs))", "problem": 32, "user": "5203bc27e4b0fb7e47ea5204"}, {"code": "#(interleave % %)", "problem": 32, "user": "52015698e4b0d7096e99ddba"}, {"code": "#(interleave % %)", "problem": 32, "user": "4f4ff836e4b03ad3f0c10cf4"}, {"code": "#(interleave % %)", "problem": 32, "user": "52084f75e4b01ce6bbf31dde"}, {"code": "(fn [x] (mapcat #(repeat 2 %) x))", "problem": 32, "user": "52029e5de4b030ee0c5b26fc"}, {"code": "(fn dup [lst]\n  (cond\n   (empty? lst) nil\n   true (cons (first lst) (cons (first lst) (dup (rest lst))))))", "problem": 32, "user": "52091d57e4b0e152394d76f0"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "520797ebe4b03bd50ef5466d"}, {"code": "#(mapcat list % %)", "problem": 32, "user": "52002fc6e4b0b679c4e0e3fe"}, {"code": "(fn dup [coll] (mapcat #(list % %) coll))", "problem": 32, "user": "5209cb44e4b0e152394d7702"}, {"code": "(fn ! [c] (if (empty? c) '() (conj (! (rest c)) (first c) (first c))))", "problem": 32, "user": "4f88f57ae4b033992c121c73"}, {"code": "(fn [x] (reduce #(conj % %2 %2) () (reverse x)))", "problem": 32, "user": "51f66e0ee4b06ff1c25c52c3"}, {"code": "#(interleave % %)", "problem": 32, "user": "514c2d05e4b02b8cbb2a9278"}, {"code": "(fn [x] (interleave x x))", "problem": 32, "user": "52016690e4b0b2e020a18f0f"}, {"code": "#(reduce (fn[p x] (conj (conj p x) x)) [] %)", "problem": 32, "user": "520aaac2e4b01da9d47a99e6"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "52090654e4b0e152394d76ee"}, {"code": "(fn [coll]\n  (reverse\n   (reduce #(cons %2 (cons %2 %1)) '() coll)))", "problem": 32, "user": "520a576be4b0e152394d7714"}, {"code": "(fn [x] (reduce concat (map #(take 2 (repeat %)) x)))", "problem": 32, "user": "4fa176c7e4b0dcca54ed6d5e"}, {"code": "(fn [s] (interleave s s))", "problem": 32, "user": "5078dedae4b08327cd804a5d"}, {"code": "#(interleave % %)", "problem": 32, "user": "520e32a2e4b066f3ea161c93"}, {"code": "#(interleave % %)", "problem": 32, "user": "5208a3a2e4b0301979a6c235"}, {"code": "(fn [x] (interleave x x))", "problem": 32, "user": "519c4111e4b0a1d87b003458"}, {"code": "(fn [x] (interleave x x))", "problem": 32, "user": "520ed237e4b0101e4be6fcd9"}, {"code": "(fn [coll]\n  (apply concat (map #(repeat 2 %) coll)))", "problem": 32, "user": "51a3738ce4b0e77c4ca60bf0"}, {"code": "#(loop [in  %\n        out '()]\n   (if (empty? in)\n     (reverse out)\n     (recur (rest in) (conj (conj out (first in)) (first in)))))", "problem": 32, "user": "51b965dde4b0e871ca495905"}, {"code": "#(sort (into % %))", "problem": 32, "user": "5186448fe4b0da5a5be3bac9"}, {"code": "(fn [s] (mapcat identity (map #(repeat 2 %) s)))", "problem": 32, "user": "520c9489e4b0b022ef140c98"}, {"code": "(fn [coll]\n  (loop [[x & xs] coll acc []]\n    (if (empty? xs)\n      (conj acc x x)\n      (recur xs (conj acc x x)))))", "problem": 32, "user": "52129363e4b0d32679a50640"}, {"code": "(fn [coll] (apply concat (map #(list % %) coll)))", "problem": 32, "user": "51f805b0e4b06ff1c25c52e2"}, {"code": "mapcat #(replicate 2 %)", "problem": 32, "user": "520332f7e4b030ee0c5b2714"}, {"code": "#(mapcat (partial repeat 2) %)", "problem": 32, "user": "51e61772e4b0efabf93c02e2"}, {"code": "(fn foo [s]\n  (if (empty? s)\n    ()\n    (conj (foo (rest s)) (first s) (first s)))\n  )", "problem": 32, "user": "5213ffd3e4b0961f15ac4d7d"}, {"code": "(fn [xs]\n  ((fn impl [xs rs]\n    (if (empty? xs)\n      (reverse rs)\n      (impl (next xs) (cons (first xs) (cons (first xs) rs)))))\n   xs []))", "problem": 32, "user": "521392bce4b0d32679a5065e"}, {"code": "#(interleave % %)", "problem": 32, "user": "5151c184e4b03e678e393add"}, {"code": "#(mapcat (fn [x] [x x]) %)", "problem": 32, "user": "513fab65e4b00f13ea1bd891"}, {"code": "#(mapcat list % %)", "problem": 32, "user": "51f687c2e4b06ff1c25c52cb"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "5211d195e4b07aea8afc4f76"}, {"code": "(fn [input] (reduce #(concat %1 [%2 %2]) [] input))", "problem": 32, "user": "52154514e4b02f6d8ea676c0"}, {"code": "(fn [s]\n  (apply concat (map #(list % %) s)))", "problem": 32, "user": "5191ac45e4b0d428d29dc1b6"}, {"code": "#(interleave % %)", "problem": 32, "user": "5131d817e4b06942423563ca"}, {"code": "(fn [sq] (reduce #(conj % %2 %2) [] sq))", "problem": 32, "user": "51f9527fe4b09be9c177e549"}, {"code": "(fn [xs] (mapcat (fn [e] [e e]) xs))", "problem": 32, "user": "50e09313e4b061dbdced7233"}, {"code": "reduce #(conj % %2 %2) []", "problem": 32, "user": "520242bae4b030ee0c5b26e3"}, {"code": "(fn zp [x] (cond (empty? x) [] :else (concat [(first x)(first x)] (zp (rest x)))))", "problem": 32, "user": "52153bdde4b0961f15ac4daa"}, {"code": "#(interleave % %)", "problem": 32, "user": "52173464e4b082aa80a88c75"}, {"code": "#(sort(apply conj %1 %1))", "problem": 32, "user": "52117ea7e4b07aea8afc4f70"}, {"code": "reduce #(concat %1 (concat [%2] [%2])) ()", "problem": 32, "user": "51fc44c5e4b0f1313d468a1b"}, {"code": "reduce (fn [acc x] (concat acc [x x])) []", "problem": 32, "user": "5216933be4b000d124d989cf"}, {"code": "(fn [x] (interleave x x))", "problem": 32, "user": "5174ade2e4b07031762f2edf"}, {"code": "(fn [col]\n  (reduce\n    (fn [all new]\n      (conj all new new))\n    []\n    col))", "problem": 32, "user": "51aee76ce4b09397d5109796"}, {"code": "#(interleave % %)", "problem": 32, "user": "52160dbee4b0bf4bffd29cb3"}, {"code": "(fn [x] (reduce concat [] (map #(vec [% %]) x)))", "problem": 32, "user": "521249f5e4b06aa6d1666ba2"}, {"code": "(fn [s]\n  (loop [acc [] xs s]\n    (if (empty? xs) acc\n      (recur (concat acc (repeat 2 (first xs))) (rest xs)))))", "problem": 32, "user": "52199105e4b0c4ef0be82ff9"}, {"code": "(fn[v]\n  (loop [ans [] w v]\n    (if (empty? w)\n      ans \n      (recur \n        (conj (conj ans (first w))\n              (first w))\n        (next w)))))", "problem": 32, "user": "52196842e4b0890f2f822bfa"}, {"code": "mapcat #(vec [% %])", "problem": 32, "user": "51ca15bfe4b09ce160bef5b8"}, {"code": "(fn [xs]\n  (apply concat (map list xs xs)))", "problem": 32, "user": "521679e9e4b0bf4bffd29cca"}, {"code": "(fn [aseq]\n  (loop [lista (seq aseq)\n         lista-dup '()]\n    (if (not (not-empty lista))\n      (reverse lista-dup)\n      (recur (rest lista) (cons (first lista) (cons (first lista) lista-dup)  )))))", "problem": 32, "user": "5213348ae4b0d32679a50652"}, {"code": "mapcat (fn [x] [x x])", "problem": 32, "user": "5219e575e4b0c4ef0be82ffd"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "5213dbc3e4b0961f15ac4d74"}, {"code": "reduce #(conj % %2 %2) []", "problem": 32, "user": "521672bde4b0bf4bffd29cc8"}, {"code": "#(mapcat (juxt identity identity) %)", "problem": 32, "user": "521c6a1ae4b0c4ef0be83083"}, {"code": "(fn [x]  (reduce #(into % (repeat 2 %2)) [] x))", "problem": 32, "user": "52105865e4b080a8d9b9d639"}, {"code": "(fn [coll]\n  (reverse\n   (loop [xs coll\n          newcoll '()]\n     (cond\n      (empty? xs) newcoll\n      :else (recur (rest xs) (cons (first xs)\n                                   (cons (first xs)\n                                         newcoll)))))))", "problem": 32, "user": "520693e1e4b0bf4f1882c829"}, {"code": "#(apply concat (map (fn [i] (list i i)) %))", "problem": 32, "user": "510ee996e4b07438aa321462"}, {"code": "#(interleave % %)", "problem": 32, "user": "520cb8c4e4b0b022ef140c9a"}, {"code": "(fn [x] (let [vec1 x\n              vec2 x]\n          (seq (interleave vec1 vec2))))", "problem": 32, "user": "51bf0ccee4b013aa0d74b811"}, {"code": "#(map (fn [a] a) (loop [x (first %) xs (next %) res []]\n   (if (empty? xs) (conj (conj res x) x) (recur (first xs) (next xs) (conj (conj res x) x)))))", "problem": 32, "user": "52161db6e4b0bf4bffd29cb8"}, {"code": "#(interleave % %)", "problem": 32, "user": "521dceeae4b050d5da042802"}, {"code": "(fn chuj [xs] (reduce #(concat %1 (list %2 %2)) [] xs )\n  )", "problem": 32, "user": "5210e5c5e4b080a8d9b9d63f"}, {"code": "(fn [xs]\n  (reduce (fn [acc x] (conj acc x x)) [] xs))", "problem": 32, "user": "521e4f22e4b0dd19981ad079"}, {"code": "(fn [s]\n  (interleave s s))", "problem": 32, "user": "521bf7cfe4b0c4ef0be83066"}, {"code": "(fn dup [s]\n  (loop [a s\n         b ()]\n    (if (empty? a)\n      (reverse b)\n      (recur (rest a) (conj b (first a) (first a))))))", "problem": 32, "user": "521b9f92e4b0c4ef0be8304c"}, {"code": "#(interleave % %)", "problem": 32, "user": "51a91ac2e4b08d8ec191b822"}, {"code": "#(reverse (reduce (fn[r x] (cons x (cons x r)) ) '() %))", "problem": 32, "user": "51f79238e4b06ff1c25c52d7"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "5213d7aae4b0961f15ac4d72"}, {"code": "#(mapcat vector % %)", "problem": 32, "user": "521e8227e4b0dd19981ad082"}, {"code": "(fn [seq] (loop [input seq output []]\n            (if (= (count input) 0) \n              output \n              (recur (rest input) (conj output (first input) (first input))))))", "problem": 32, "user": "520f46f9e4b0101e4be6fcee"}, {"code": "(fn dup [s]\n  (if (empty? s) \n    s\n   (cons (first s) (cons (first s) (dup (rest s))))))", "problem": 32, "user": "5220bc0fe4b0e6a83c8925a7"}, {"code": "(fn thing [lst]\n  (if (empty? lst)\n    '()\n  (let [a (first lst)]\n    (concat (list a a) (thing (rest lst))))))", "problem": 32, "user": "5220a770e4b0e6a83c8925a3"}, {"code": "(fn dup [n]\n  (if (empty? n)\n    n\n  (let [x (first n) tl (rest n)]\n    (conj (dup tl) x x))))", "problem": 32, "user": "51c20b14e4b0d204dbe2ca1b"}, {"code": "(fn [l] \n  (reverse\n   (reduce\n    (fn [xs x] (conj xs x x))\n    '()\n    l)))", "problem": 32, "user": "52218b29e4b0e6a83c8925da"}, {"code": "mapcat #(repeat 2 %)", "problem": 32, "user": "5222000ce4b0e6a83c8925ea"}, {"code": "#(interleave % %)", "problem": 32, "user": "52213426e4b0e6a83c8925c4"}, {"code": "#(mapcat (fn [x] [x x]) %)", "problem": 32, "user": "5224a46ce4b01819a2de42e5"}, {"code": "#(interleave % %)", "problem": 32, "user": "521b339fe4b0c4ef0be83031"}, {"code": "(fn dup-seq [xs]\n  (reduce concat () (map #(list %1 %1) xs))\n)", "problem": 32, "user": "4fb710f4e4b081705acca2cd"}, {"code": "mapcat #(vector % %)", "problem": 32, "user": "4daec4a0edd6309eace4d15e"}, {"code": "(fn dup [s]\n  (reduce concat (map #(list %1 %1) s)))", "problem": 32, "user": "522048b3e4b0e6c71e0c0c16"}, {"code": "(fn [s] (mapcat #(vector % %) s))", "problem": 32, "user": "51508905e4b098b221effc2d"}, {"code": "(fn [x] (reduce #(conj %1 %2 %2) [] x))", "problem": 32, "user": "52244a77e4b01819a2de42d1"}, {"code": "(fn [l]\n  (reduce (fn [ll elem]\n            (conj ll elem elem)) [] l))", "problem": 32, "user": "52277ab9e4b0186687e23a4f"}, {"code": "(fn [coll](apply concat (map #(repeat 2 %) coll)))", "problem": 32, "user": "52161028e4b0bf4bffd29cb4"}, {"code": "(fn [singles] \n  (let [x1 singles x2 singles]\n    (interleave x1 x2)\n   )\n  )", "problem": 32, "user": "5167e4a2e4b0c5a4140a3099"}, {"code": "#(reverse (reduce (fn [accum x] (conj accum x x)) '() %))", "problem": 32, "user": "522600cfe4b0f4c7e20d29c8"}, {"code": "#(apply concat (map (partial repeat 2) %))", "problem": 32, "user": "52253004e4b01819a2de42fa"}, {"code": "#(mapcat (fn[x] (list x x)) %)", "problem": 32, "user": "522454f4e4b01819a2de42d3"}, {"code": "#(reduce into (for [x %] [x x]))", "problem": 32, "user": "51843616e4b02826a645f398"}, {"code": "#(interleave % %)", "problem": 32, "user": "5225666be4b01819a2de4300"}, {"code": "#(reduce (fn [ lst new ] (cons (second new) (cons (first new) lst))) (reverse (map (fn [ x ] (list x x)) %)))", "problem": 32, "user": "52286b19e4b0186687e23a7e"}, {"code": "(fn dupl [c]\n  (let [[x & xs] c]\n    (if (empty? c)\n      x\n      (conj (dupl xs) x x))))", "problem": 32, "user": "5225a0f5e4b01819a2de430e"}, {"code": "reduce (fn [result new-el] (conj result new-el new-el)) []", "problem": 32, "user": "5221c0cae4b0e6a83c8925e1"}, {"code": "(fn [xs] (reduce #(conj %1 %2 %2) [] xs))", "problem": 32, "user": "4f9aa75ee4b0dcca54ed6d0d"}, {"code": "(fn [coll] (sort(concat coll coll)))", "problem": 32, "user": "5227dc28e4b0186687e23a5b"}, {"code": "(fn [x] (sort ( concat x x ) ) )", "problem": 32, "user": "521257c5e4b06aa6d1666ba3"}, {"code": "#(mapcat (fn [a] [a a]) %)", "problem": 32, "user": "522a01ade4b0590a43906ced"}, {"code": "(fn [xs]\n  (mapcat #(concat % %) (partition-all 1 xs)))", "problem": 32, "user": "51ef31dfe4b0871fa145d9a0"}, {"code": "(fn [s] (reduce (fn [mem e] (conj mem e e)) [] s))", "problem": 32, "user": "5207d70ae4b03bd50ef54675"}, {"code": "reduce #(conj % %2 %2) []", "problem": 32, "user": "4ff9a200e4b0678c553fc3ab"}, {"code": "reduce \n#(conj (conj %1 %2) %2)\n[]\n#_(fn [xs]\n  (loop [[x & y] xs\n         acc []]\n    (if-not x\n      acc\n      (recur y\n             (conj (conj acc\n                         x)\n                   x)))))", "problem": 32, "user": "51e5a627e4b0efabf93c02db"}, {"code": "#(reverse (reduce (fn [acc x] (conj acc x x)) () %))", "problem": 32, "user": "522b922ee4b0d34ee08e71c3"}, {"code": "(fn [x] (reduce (fn [y z] (conj y z z)) [] x))", "problem": 32, "user": "51e28063e4b08e53a149f0f2"}, {"code": "#(interleave % %)", "problem": 32, "user": "510d59cce4b078ea71921134"}, {"code": "mapcat #(conj [%] %)", "problem": 32, "user": "522404d8e4b01819a2de42c0"}, {"code": "#(for [x % y (range 2)] x)", "problem": 32, "user": "51a058dae4b0b292b01ee3f3"}, {"code": "(fn dupe [coll]\n  (if (empty? coll)\n  '()\n  (let [[x & xs] coll]\n    (concat (list x x) (dupe xs))\n    )\n  ))", "problem": 32, "user": "52127ee4e4b0d32679a5063c"}, {"code": "(fn [x] (reduce #(conj %1 %2 %2) [] x))", "problem": 32, "user": "522eb5cce4b01cdb292c5f0c"}, {"code": "(fn my-dup [coll] (mapcat (fn [x] (if (sequential? x) x [x])) (map #(list % %) coll)))", "problem": 32, "user": "522d0360e4b0806774ddfef7"}, {"code": "(fn [lat]\n  (reduce concat (map #(take 2 (repeat %)) lat)))", "problem": 32, "user": "5144e4c1e4b021a5ff8301f8"}, {"code": "(fn [l]\n\t(mapcat #(list %, %) l))", "problem": 32, "user": "522a1248e4b0590a43906cf3"}, {"code": "(fn [x] (reverse (reduce #(conj % %2 %2) '() x)))", "problem": 32, "user": "5125029de4b0ce9225d2ed3e"}, {"code": "(fn [xs]\n  (loop [result nil  l xs]\n    (if (not (seq l))\n      result\n      (recur (cons (last l) (cons (last l) result)) (butlast l) ))))", "problem": 32, "user": "51857e64e4b0da5a5be3babe"}, {"code": "mapcat (fn [x] [x x])", "problem": 32, "user": "5230d9bde4b0035e815da397"}, {"code": "#(loop [ result [] coll %]\n   (if (nil? coll) result\n     (recur (apply conj result (repeat 2 (first coll))) (next coll))))", "problem": 32, "user": "522eba30e4b01cdb292c5f0e"}, {"code": "(fn [list]\n  (loop [res [] list list]\n    (if (empty? list)\n      res\n      (recur (conj res (first list) (first list)) (rest list)))))", "problem": 32, "user": "522f988be4b032bbe3424168"}, {"code": "#(interleave % %)", "problem": 32, "user": "522fdff7e4b032bbe342416c"}, {"code": "#(interleave % %)", "problem": 32, "user": "51c611c4e4b03a28d42333bf"}, {"code": "(fn dupl\n  [coll]\n  (mapcat (fn [a] (list a a)) coll)\n  )", "problem": 32, "user": "5228f870e4b0186687e23a98"}, {"code": "(fn [s] (reverse (reduce #(cons %2 (cons %2 %)) [] s)))", "problem": 32, "user": "522e6c01e4b01cdb292c5f01"}, {"code": "(fn [x] (apply concat (map #(list % %) x)))", "problem": 32, "user": "506c0a02e4b0eda3100c090d"}, {"code": "#(interleave % %)", "problem": 32, "user": "514fd753e4b0b449e54b8e00"}, {"code": "(fn dup\n  [a]\n  (apply concat (map vector a a)))", "problem": 32, "user": "510591dde4b06d28cacc92eb"}, {"code": "mapcat #(take 2 (repeat %))", "problem": 32, "user": "5229211be4b04c906c9c6a63"}, {"code": "reduce #(conj % %2 %2) []", "problem": 32, "user": "52318843e4b0e2e8de81d1e8"}, {"code": "(fn [v] (interleave v v))", "problem": 32, "user": "4ddbd600535d02782fcbe9fb"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "51aefceee4b09397d5109797"}, {"code": "(fn [x] (reduce (fn [coll e] (conj coll e e)) '() (reverse x)))", "problem": 32, "user": "522bf20ee4b0d34ee08e71c7"}, {"code": "#(interleave % %)", "problem": 32, "user": "5233ad08e4b07e3ee2be83ac"}, {"code": "(fn ! [s]\n  (if (empty? s)\n    (list )\n    (concat (list (first s) (first s)) (! (rest s)))))", "problem": 32, "user": "523361d8e4b0f0b72fabf405"}, {"code": "#(mapcat (fn [x] [x x]) %)", "problem": 32, "user": "5231d8fae4b0e2e8de81d1fb"}, {"code": "#(mapcat (fn [e] [e e]) %)", "problem": 32, "user": "508fd6bae4b0ea685a20f76b"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "523089f8e4b0035e815da388"}, {"code": "(fn dup [x]                                                                 \n   (if (empty? x)                                                            \n     []                                                                      \n     (cons (first x) (cons (first x) (dup (rest x))))))", "problem": 32, "user": "516282c3e4b0e6d3c4734711"}, {"code": "(partial mapcat (partial repeat 2))", "problem": 32, "user": "516abecae4b081287f204e9f"}, {"code": "mapcat #(vector % %)", "problem": 32, "user": "523353a7e4b0f0b72fabf402"}, {"code": "#(interleave % %)", "problem": 32, "user": "52373f36e4b0477af6280328"}, {"code": "#(loop [initial-sequ %\n         final-sequ '()]\n    (if (empty? initial-sequ)\n      final-sequ\n      (let [cur-sequ (first initial-sequ)]\n        (recur (rest initial-sequ) (concat final-sequ [cur-sequ cur-sequ])))))", "problem": 32, "user": "523288fee4b035af41902a88"}, {"code": "(fn [c] (reverse (reduce #(cons %2 (cons %2 %1)) '() c)))", "problem": 32, "user": "51cd75d6e4b02254fc79488c"}, {"code": "#(apply concat (map (fn [x] [x x]) %))", "problem": 32, "user": "5235a902e4b0a643f2dcb750"}, {"code": "#(interleave % %)", "problem": 32, "user": "52381b2ae4b0fae3832e99ef"}, {"code": "(fn [n] (\n         mapcat #(list % %) n))", "problem": 32, "user": "52394c03e4b0d705d026ef09"}, {"code": "#(mapcat list % %)", "problem": 32, "user": "52271ffee4b04e78ff2e19a9"}, {"code": "(fn [x]\n  (mapcat #(repeat 2 %) x))", "problem": 32, "user": "52393e16e4b0d705d026ef06"}, {"code": "(fn [s] (reduce (fn [s a] (concat s [a a])) [] s))", "problem": 32, "user": "4f43894ee4b0d7d3c9f3fd21"}, {"code": "mapcat #(repeat 2 %)", "problem": 32, "user": "52382d91e4b0fae3832e99f0"}, {"code": "#(apply concat (map list % %))", "problem": 32, "user": "523a657be4b081681ca7adc1"}, {"code": "(fn [sq]\n   (mapcat #(list % %) sq))", "problem": 32, "user": "523bd9c0e4b07becd5be2201"}, {"code": "reduce #(into % [%2 %2]) []", "problem": 32, "user": "523b1a65e4b02f719975bdbd"}, {"code": "mapcat (fn [x] [x x])", "problem": 32, "user": "508923d5e4b06d8254e936e8"}, {"code": "#(interleave % %)", "problem": 32, "user": "5213d81de4b0961f15ac4d73"}, {"code": "(fn dub [xs] (reduce #(conj %1 %2 %2) '[] xs))", "problem": 32, "user": "523b82efe4b07becd5be21f0"}, {"code": "(fn [s] (reverse (reduce #(conj %1 %2 %2) '() s)))", "problem": 32, "user": "523b4e91e4b07becd5be21ef"}, {"code": "(fn dupl [sequ] \n  (let [f (first sequ) r (rest sequ)]\n  (if (= sequ '()) '()\n  (cons f (cons f (dupl r))))))", "problem": 32, "user": "5239caa6e4b0d705d026ef27"}, {"code": "reduce #(conj %1 %2 %2) '[]", "problem": 32, "user": "5220ef05e4b0e6a83c8925b8"}, {"code": "(fn foo[x] (when (> (count x) 0) (conj (foo (rest x)) (first x) (first x))))", "problem": 32, "user": "522f39a8e4b032bbe3424159"}, {"code": "#(reduce (fn [acc elem] (conj (conj  acc elem) elem)) [] %)", "problem": 32, "user": "523a9fc9e4b081681ca7adca"}, {"code": "#(loop [l % ans []]\n  (if (empty? l)\n    ans\n    (recur (rest l) (into ans (list (first l) (first l))))\n  )\n)", "problem": 32, "user": "51f09f3de4b0274c496158d7"}, {"code": "(fn [ll]\n  (let [pl (map #(lazy-seq [% %]) ll)]\n    (reduce #(concat %1 %2) (first pl) (rest pl))))", "problem": 32, "user": "4fec550de4b0681fd128dca6"}, {"code": "(fn [l]\r\n    (loop [curr l acc []]\r\n        (if (empty? curr) acc\r\n                        (recur (rest curr) (conj acc (first curr) (first curr))) )))", "problem": 32, "user": "523dd963e4b06956f8342ca1"}, {"code": "reduce #(conj % %2 %2) []", "problem": 32, "user": "523d02b0e4b0dbf0c3017289"}, {"code": "(fn [x] (apply concat (map #(list % %) x)))", "problem": 32, "user": "52166e50e4b0bf4bffd29cc6"}, {"code": "(fn [x] (seq (reduce #(conj %1 %2 %2) [] x)))", "problem": 32, "user": "52319066e4b0e2e8de81d1e9"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "5236b6bce4b05f3be1c7c8fe"}, {"code": "#(mapcat list % %)", "problem": 32, "user": "523b1988e4b02f719975bdbc"}, {"code": "(fn [x]\n  (loop [s x r '()]\n    (if (empty? s) r\n      (recur (rest s) (concat r (list (first s) (first s)))))))", "problem": 32, "user": "523bc0e6e4b07becd5be21f9"}, {"code": "(fn [l] (reduce concat ( map #(repeat 2 %) l )))", "problem": 32, "user": "523f0bbfe4b01c266ffa7f91"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "5201ada5e4b0b2e020a18f14"}, {"code": "#(mapcat (partial repeat 2) %)", "problem": 32, "user": "523ed743e4b057c4b7cd0a79"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "5220909fe4b0e6a83c89259f"}, {"code": "(fn [s] (reverse (reduce (fn [x y] (conj x y y)) '() s)))", "problem": 32, "user": "50aa60bee4b056ee01935865"}, {"code": "(fn [xs] (apply concat (map vector xs xs)))", "problem": 32, "user": "4f03641a535dcb61093f6a9b"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "5230793be4b0035e815da383"}, {"code": "(fn [seq]\n    (reverse (reduce (fn [col ele]\n                       (conj col ele ele))\n                     '() seq)))", "problem": 32, "user": "511e763ce4b03e81d390ac29"}, {"code": "(fn [x] (reduce #(conj (conj %1 %2) %2) [] x))", "problem": 32, "user": "52379c46e4b0fae3832e99db"}, {"code": "#(apply concat (map (fn[x] [x x]) %))", "problem": 32, "user": "5240e8ebe4b0ad64fa010349"}, {"code": "(fn dupl [s]\n  (when (seq s)\n    (let [s0 (first s)]\n      (->> (rest s)\n           (dupl)\n           (cons s0)\n           (cons s0)))))", "problem": 32, "user": "523b10dfe4b02f719975bdb8"}, {"code": "#(interleave % %)", "problem": 32, "user": "523c6451e4b07becd5be2222"}, {"code": "(fn f [x] (let [x (seq x)](when x (cons (first x) (cons (first x) (f (rest x)))))))", "problem": 32, "user": "523ed522e4b057c4b7cd0a78"}, {"code": "#(mapcat seq (for [x % :let [y (list x x)]] y))", "problem": 32, "user": "5241fe85e4b076e5d3121f42"}, {"code": "(fn [col]\n  \n  (reduce (fn [array elm]\n          \t(conj (conj array elm) elm)) \n          [] col))", "problem": 32, "user": "518d1b5be4b070277754617b"}, {"code": "reduce (fn [x y] (conj x y y)) []", "problem": 32, "user": "52433e0fe4b076204b44fab3"}, {"code": "(fn [lst]\n  (apply concat\n         (for [x lst]\n           (list x x))))", "problem": 32, "user": "50d5c19ce4b0159555a1fc61"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "52437703e4b076204b44fabf"}, {"code": "(fn [lst] (reduce #(conj (vec %) %2 %2) [] lst))", "problem": 32, "user": "506929ffe4b01dc6af13f82b"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "522d3a16e4b0e26240291d50"}, {"code": "reduce #(conj % %2 %2) []", "problem": 32, "user": "524025bce4b0ad64fa01030f"}, {"code": "#(mapcat (juxt identity identity) %)", "problem": 32, "user": "51cfc616e4b0e42293a22578"}, {"code": "#(reduce (fn [acc item] (into acc (repeat 2 item))) [] %)", "problem": 32, "user": "5245fbbbe4b09dbe66b56183"}, {"code": "mapcat #(identity [% %])", "problem": 32, "user": "5245af03e4b08ba239308124"}, {"code": "#(interleave % %)", "problem": 32, "user": "523605d1e4b05f3be1c7c8e2"}, {"code": "reduce #(conj % %2 %2) []", "problem": 32, "user": "52479487e4b05ef8e38e6373"}, {"code": "#(interleave % %)", "problem": 32, "user": "51b0e7b3e4b0c53cf2e68a6e"}, {"code": "#(reduce (fn [acc, x] (conj acc x x)) [] %)", "problem": 32, "user": "524717a9e4b05ef8e38e6352"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "522f483ce4b032bbe342415a"}, {"code": "#(mapcat (fn [x] [x x]) %)", "problem": 32, "user": "52487654e4b05ef8e38e63dc"}, {"code": "#(interleave % %)", "problem": 32, "user": "52471ac0e4b05ef8e38e6354"}, {"code": "#(interleave % %)", "problem": 32, "user": "5246e945e4b0644eb7b0783b"}, {"code": "(fn [x] (reverse (reduce #(cons %2 (cons %2 %1)) '() x)) )", "problem": 32, "user": "5242d5c3e4b076204b44fa95"}, {"code": "#(apply concat (map (fn [x] [x x])  %))", "problem": 32, "user": "52485723e4b05ef8e38e63d2"}, {"code": "#(loop [accum []\n         xs %1]\n         (if (empty? xs)\n           accum\n           (recur (conj accum (first xs) (first xs))\n                  (rest xs))))", "problem": 32, "user": "5248c4c7e4b05ef8e38e63e8"}, {"code": "(fn [the-seq]\n\n(reverse (reduce (fn [contenedor item]\n           (conj (conj contenedor item) item)\n           ) '() the-seq))\n   )", "problem": 32, "user": "50550f43e4b0b1b9d1860eb7"}, {"code": "(fn [s] (reduce #(cons %2 (cons %2 %1)) () (reverse s)))", "problem": 32, "user": "52474de3e4b05ef8e38e6360"}, {"code": "(fn dup [in]\n  (loop [in-seq in, out-seq []]\n    (if (= (first in-seq) nil)\n        out-seq\n      (recur (rest in-seq) (conj out-seq (first in-seq) (first in-seq) ))\n      )\n    )\n  )", "problem": 32, "user": "52463059e4b09dbe66b56198"}, {"code": "(fn [x] (apply concat (map #(vector % %) x)))", "problem": 32, "user": "520a9897e4b01da9d47a99e1"}, {"code": "(fn [s] (apply concat (map #(list % %) s)))", "problem": 32, "user": "524be8e0e4b09eba1c0223f1"}, {"code": "(fn [xs] (mapcat #(repeat 2 %) xs))", "problem": 32, "user": "51f66891e4b06ff1c25c52c1"}, {"code": "(fn [seq] (apply concat (map #(list % %) seq)))", "problem": 32, "user": "524cdd51e4b0752c4cb68ccc"}, {"code": "(fn [coll]\n  (interleave coll coll))", "problem": 32, "user": "5047eadde4b0ec70b3ef8d94"}, {"code": "#(loop [in % out []] \n   (if (empty? in) \n     (reverse out)\n     (recur (rest in) (cons (first in) (cons (first in) out)))))", "problem": 32, "user": "524469dee4b0d8acf9ed6a9d"}, {"code": "(fn dup [seq]\n   (mapcat (fn [val] (conj '() val val)) seq)\n  )", "problem": 32, "user": "511d4a52e4b022853b0e07a1"}, {"code": "#(interleave % %)", "problem": 32, "user": "5243d9a2e4b076204b44fadf"}, {"code": "(fn fun9 [x]\n  (letfn [(concat2 [x y]\n  (if-not (empty? y) (let [t (concat x (first y))] (concat2 t (rest y))) x)\n)]\n  (let [t (for [i x] [i i])]\n        (concat2 (first t) (rest t))\n        )   \n))", "problem": 32, "user": "52132f8de4b0d32679a50651"}, {"code": "#(interleave % %)", "problem": 32, "user": "51618519e4b009fba0926e35"}, {"code": "(fn add_duplicates [x]\n                 (loop [o_list x n_list [] count (.length x)]\n                       (if (= count 0) n_list\n                           (recur (rest o_list) (conj (conj n_list (first o_list)) (first o_list)) (dec count)))))", "problem": 32, "user": "524a74b3e4b05ef8e38e64a7"}, {"code": "mapcat #(vector % %)", "problem": 32, "user": "524dd1c3e4b0f245900d275c"}, {"code": "#(interleave % %)", "problem": 32, "user": "524ae8e6e4b09eba1c0223b5"}, {"code": "mapcat #(repeat 2 %)", "problem": 32, "user": "524feb3fe4b0541d1855b81f"}, {"code": "(fn [xs]\n  (reverse\n   (reduce #(conj % %2 %2) () xs)))", "problem": 32, "user": "524f61bee4b0541d1855b80f"}, {"code": "#(interleave % %)", "problem": 32, "user": "4fdf4e2be4b05e33b9224f96"}, {"code": "(fn [x] (reduce into [] (map #(list % %) x)))", "problem": 32, "user": "523eb110e4b057c4b7cd0a67"}, {"code": "#(reduce (fn [acc x] (concat acc [x] [x])) [] %)", "problem": 32, "user": "52452225e4b0d8acf9ed6ae6"}, {"code": "#(interleave % %)", "problem": 32, "user": "525078b6e4b0541d1855b832"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "524b90fae4b09eba1c0223df"}, {"code": "(fn dupe  [l]\n  (if (not (empty? l))\n    (concat (take 2 (repeat (first l)))  (dupe (rest l)))\n    ))", "problem": 32, "user": "5245d29ae4b09dbe66b56174"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "52525a0ee4b0541d1855b8a2"}, {"code": "(fn [l] (apply concat (for [x l] [x x])))", "problem": 32, "user": "524e79c1e4b0541d1855b7e0"}, {"code": "#(interleave % %)", "problem": 32, "user": "524d91eae4b0a16e35cf6dee"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "4fb0bd28e4b081705acca26b"}, {"code": "(fn [coll] (reduce concat (map #(repeat 2 %) coll)))", "problem": 32, "user": "52527192e4b0541d1855b8af"}, {"code": "#(interleave % %)", "problem": 32, "user": "5224060de4b01819a2de42c3"}, {"code": "(fn dup [x] (if (empty? x) '() (concat (list (first x)) (list (first\nx)) (dup (rest x)))))", "problem": 32, "user": "52474ec2e4b05ef8e38e6361"}, {"code": "(fn[x](reduce (fn[a n] (conj a n n)) [] x))", "problem": 32, "user": "525493bbe4b0541d1855b991"}, {"code": "(fn [x] (reverse (reduce into (map list x (seq x)))) )", "problem": 32, "user": "5254f908e4b0541d1855b9ba"}, {"code": "(fn [xs] (interleave xs xs))", "problem": 32, "user": "524740e7e4b05ef8e38e635d"}, {"code": "#(interleave % %)", "problem": 32, "user": "51d872dde4b0154f82ab930e"}, {"code": "#(mapcat (fn [x] [x x]) %)", "problem": 32, "user": "51269362e4b083bb8f88cf09"}, {"code": "#(interleave % %)", "problem": 32, "user": "524fafdfe4b0541d1855b818"}, {"code": "(fn [s]\n  (loop [s s\n         new-s '()]\n    (if (first s)\n      (recur (rest s) (concat new-s [(first s) (first s)]))\n      new-s)))", "problem": 32, "user": "5256cd77e4b0541d1855ba39"}, {"code": "(fn [x]\n  (apply concat (map (fn [r] (list r r)) x)))", "problem": 32, "user": "51effd77e4b0249c592fbdf3"}, {"code": "mapcat #(conj () % %)", "problem": 32, "user": "5250a9abe4b0541d1855b83b"}, {"code": "(fn dupe\n  [coll]\n  (when-let [s (seq coll)]\n    (cons (first s) (cons (first s) (dupe (rest coll))))))", "problem": 32, "user": "50fc48dde4b0d10d794c19f6"}, {"code": "(fn [& xs] (apply mapcat #(list % %) xs))", "problem": 32, "user": "5217c26fe4b0a4bccb16cab8"}, {"code": "(fn dup [x]\n  (if (= x '())\n    '()\n    (cons (first x) (cons (first x) (dup (rest x))))\n    )\n  )", "problem": 32, "user": "52586d24e4b0cb4875a45cb0"}, {"code": "(fn du\n   ([coll]\n      (loop [s '() col coll]\n        (if (empty? col)\n            (reverse s)\n           (recur (cons (first col) (cons (first col) s)) (rest col))\n        )\n      )\n   )\n)", "problem": 32, "user": "51d28e15e4b0d13b04db0d9b"}, {"code": "mapcat #(repeat 2 %)", "problem": 32, "user": "5252b59de4b0541d1855b8cf"}, {"code": "(fn fn29 [coll]\n  (apply concat (for [a coll] (repeat 2 a))))", "problem": 32, "user": "5042bb9ae4b034ff00315d16"}, {"code": "(fn [x] (reverse  (reduce #(conj (conj %1 %2) %2) '() x)))", "problem": 32, "user": "4e3a9dae535deb9a81d77f4a"}, {"code": "#(apply concat (map (fn [n] (list n n)) %))", "problem": 32, "user": "50aca92ee4b071b89ef26232"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "4f80db02e4b033992c121bf9"}, {"code": "mapcat #(vector % %)", "problem": 32, "user": "5250a13ee4b0541d1855b839"}, {"code": "(fn ! [x]\n  (if (empty? x)\n    x\n    (cons (first x)\n      (cons (first x)\n        (! (rest x))))))", "problem": 32, "user": "504ece87e4b069badc5a33ce"}, {"code": "(fn [s]\n  (sort (concat s s)))", "problem": 32, "user": "524ab5f2e4b09eba1c02239d"}, {"code": "(fn [s] (reduce #(conj %1 %2 %2) [] s))", "problem": 32, "user": "5256627ce4b0541d1855ba1a"}, {"code": "#(interleave % %)", "problem": 32, "user": "525a7b9fe4b0cb4875a45cf5"}, {"code": "(fn [s]\n  (reduce concat (map #(repeat 2 %) s)))", "problem": 32, "user": "50a3f23ae4b08bbd0eb4ed2f"}, {"code": "#(mapcat vector % %)", "problem": 32, "user": "525431dfe4b0541d1855b970"}, {"code": "#(reduce concat (map (partial repeat 2) %))", "problem": 32, "user": "5259a16ee4b0cb4875a45ce1"}, {"code": "(fn dupe[xs] (reduce concat (map (partial repeat 2) xs)))", "problem": 32, "user": "525b12b1e4b0cb4875a45d04"}, {"code": "(fn [coll] (mapcat #(list % %) coll))", "problem": 32, "user": "5244fa73e4b0d8acf9ed6acb"}, {"code": "#(interleave % %)", "problem": 32, "user": "5234870ee4b05e80434a505c"}, {"code": "#(mapcat (fn [x] [x x]) %)", "problem": 32, "user": "5236cd89e4b0e010857b4e45"}, {"code": "(fn [x] \n  (apply concat (map (fn [a] [a a]) x))\n  )", "problem": 32, "user": "52420e2fe4b076e5d3121f48"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "52430d3ce4b076204b44faa5"}, {"code": "(fn [coll] \n  (reverse \n    (reduce #(conj % %2 %2) () coll)))", "problem": 32, "user": "524e6b68e4b0541d1855b7db"}, {"code": "#(interleave % %)", "problem": 32, "user": "525b0b51e4b0cb4875a45d01"}, {"code": "(fn [x] (interleave x x))", "problem": 32, "user": "525b4e8de4b0cb4875a45d0f"}, {"code": "(fn myfn [s1]\n\t(reduce\n    \t(fn [x y]\n        \t(conj (conj x y) y)\n        )\n    \t[] s1\n    )\n)", "problem": 32, "user": "525ba7bbe4b0cb4875a45d28"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "5210ac52e4b080a8d9b9d63e"}, {"code": "(fn [x] (sort (concat x x)))", "problem": 32, "user": "5244380fe4b076204b44fb12"}, {"code": "#(mapcat (fn [n] [n n]) %)", "problem": 32, "user": "525a8875e4b0cb4875a45cf6"}, {"code": "(fn [coll] (reduce #(conj %1 %2 %2) [] coll))", "problem": 32, "user": "509a25b7e4b0efbae1fbc0a8"}, {"code": "#(interleave % %)", "problem": 32, "user": "51899ad2e4b0288ada3dbdac"}, {"code": "(fn dup [s]\n  (reduce (fn [x1 x2] (concat x1 x2)) [] (map (fn [x1] (concat [x1 x1])) s)))", "problem": 32, "user": "525cc6c4e4b0cb4875a45d47"}, {"code": "(fn [lst] (interleave lst lst))", "problem": 32, "user": "4ef7a483535dced4c769f258"}, {"code": "#(interleave %1 %1)", "problem": 32, "user": "4f944f60e4b0dcca54ed6cc2"}, {"code": "(fn duplicate [s]\n  (let [head (first s) tail (rest s)]\n    (cond \n     (empty? tail) (list head head)\n     :else (concat (list head head) (duplicate tail)))))", "problem": 32, "user": "525aa499e4b0cb4875a45cf7"}, {"code": "#(interleave % %)", "problem": 32, "user": "505345d9e4b0517ede0d0a06"}, {"code": "(fn [x] (apply concat (map #(list %1 %1) x)))", "problem": 32, "user": "51622fb8e4b009fba0926e3f"}, {"code": "(fn [coll] (interleave coll coll))", "problem": 32, "user": "50007353e4b0678c553fc40a"}, {"code": "(fn dupit [x] (if (empty? x) () (lazy-cat (list (first x) (first x)) (dupit (rest x)))))", "problem": 32, "user": "525f51bde4b0cb4875a45dc8"}, {"code": "(fn\n  [c]\n  (mapcat #(repeat 2 %) c))", "problem": 32, "user": "525fffb8e4b03e8d9a4a702b"}, {"code": "(fn rep [x] (if (empty? x) '() (concat (list (first x) (first x)) (rep (rest x)))))", "problem": 32, "user": "525cc137e4b0cb4875a45d46"}, {"code": "(fn [coll]\n  \"Duplicates each element of a sequence\"\n  (loop [acc [] c coll]\n    (let [p (first c)]\n      (if (nil? p)\n    acc\n    (recur (conj acc p p) (rest c))))))", "problem": 32, "user": "52342722e4b07e3ee2be83c0"}, {"code": "(fn [lst] (reduce (fn [result n] (conj result n n)) [] (vec lst)))", "problem": 32, "user": "5256a1d4e4b0541d1855ba29"}, {"code": "(fn [v] (interleave v v))", "problem": 32, "user": "524c7fcfe4b0752c4cb68cbd"}, {"code": "(fn [xs] (apply concat (map #(list %1 %1) xs)))", "problem": 32, "user": "52618ea3e4b03e8d9a4a7064"}, {"code": "(fn dup [l]\n  (cond\n   (empty? l) '()\n   :else (cons (first l) (cons (first l) (dup (rest l)) ))\n   )\n  )", "problem": 32, "user": "5252cbe7e4b0541d1855b8d2"}, {"code": "(fn dup [x]\n  (if (nil? x)\n    '()\n    (concat (cons (first x) (cons (first x) '())) (dup (next x)))))", "problem": 32, "user": "522ff396e4b032bbe3424172"}, {"code": "#(sort (concat % %))", "problem": 32, "user": "517e12e3e4b0fcc7c5d37d3c"}, {"code": "(partial reduce #(conj % %2 %2) [])", "problem": 32, "user": "524f213be4b0541d1855b7ff"}, {"code": "reduce #(concat % (repeat 2 %2)) []", "problem": 32, "user": "525a643be4b0cb4875a45cf1"}, {"code": "(fn [coll] (apply concat (map #(list % %) coll)))", "problem": 32, "user": "521d2564e4b01d5d410d8da8"}, {"code": "#(interleave % %)", "problem": 32, "user": "525bcae9e4b0cb4875a45d30"}, {"code": "reduce #(conj (conj % %2) %2) []", "problem": 32, "user": "525efc76e4b0cb4875a45dbd"}, {"code": "(fn dup[seq]\n  (mapcat #(list % %) seq))", "problem": 32, "user": "525d490ae4b0cb4875a45d70"}, {"code": "(fn [x] (reduce concat (map #(repeat 2 %) x)))", "problem": 32, "user": "5264301fe4b03e8d9a4a70ca"}, {"code": "(fn [coll]\n      (reduce (fn [r i] (conj r i i)) [] coll))", "problem": 32, "user": "52090567e4b0e152394d76ed"}, {"code": "(fn [ x ] (mapcat #(list % %) x))", "problem": 32, "user": "52655949e4b03e8d9a4a710b"}, {"code": "#(sort (into %1 %1))", "problem": 32, "user": "512318b6e4b03b44edbed433"}, {"code": "mapcat #(vector % %)", "problem": 32, "user": "525d416fe4b0cb4875a45d67"}, {"code": "mapcat #(vector % %)", "problem": 32, "user": "525d417ee4b0cb4875a45d68"}, {"code": "(fn [coll]\n  (mapcat list coll coll))", "problem": 32, "user": "5264b4a9e4b03e8d9a4a70e0"}, {"code": "mapcat #(vector % %)", "problem": 32, "user": "525d5302e4b0cb4875a45d73"}, {"code": "#(interleave % %)", "problem": 32, "user": "5012da69e4b0c8732600222d"}, {"code": "(fn [coll]\n  (reduce concat (map #(take 2 (repeat %)) coll)))", "problem": 32, "user": "52112be7e4b07aea8afc4f68"}, {"code": "(fn [x] (reverse ( reduce (fn [y z] (concat [z z] y)) '() x ) ) )", "problem": 32, "user": "52628bb0e4b03e8d9a4a7089"}, {"code": "#(apply concat (for [x %] [x x]))", "problem": 32, "user": "52664945e4b03e8d9a4a712f"}, {"code": "(fn [coll]\n  (reduce #(concat % [%2 %2]) [] coll))", "problem": 32, "user": "51ca82e9e4b08b1cbd0d9488"}, {"code": "(fn [x] (interleave x x))", "problem": 32, "user": "525d5327e4b0cb4875a45d74"}, {"code": "mapcat #(vector % %)", "problem": 32, "user": "5250779ee4b0541d1855b82f"}, {"code": "#(interleave % %)", "problem": 32, "user": "52667ecfe4b03e8d9a4a713e"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "5264383be4b03e8d9a4a70cb"}, {"code": "(fn [collection] \n  (reverse (reduce (fn [x y] (cons y (cons y x))) '() collection)))", "problem": 32, "user": "52616198e4b03e8d9a4a705e"}, {"code": "reduce #(conj (conj % %2) %2) []", "problem": 32, "user": "5268f5b4e4b03e8d9a4a71cf"}, {"code": "(fn [xs]\n    (mapcat #(list % %) xs))", "problem": 32, "user": "526302eee4b03e8d9a4a70a2"}, {"code": "(fn [l] (reduce #(conj %1 %2 %2) [] l))", "problem": 32, "user": "52593207e4b0cb4875a45cd3"}, {"code": "(fn [x]\n  (interleave x x))", "problem": 32, "user": "5250b7a5e4b0541d1855b83e"}, {"code": "(fn [x] (apply concat (map #(list % %) x)))", "problem": 32, "user": "526952b8e4b03e8d9a4a71e4"}, {"code": "mapcat (fn [x] [x x])", "problem": 32, "user": "525ee103e4b0cb4875a45dbb"}, {"code": "#(interleave % %)", "problem": 32, "user": "51dc1202e4b09c47a74ce107"}, {"code": "(fn[c] (apply concat (map #(list % %) c)))", "problem": 32, "user": "525ed5f4e4b0cb4875a45db8"}, {"code": "mapcat (fn [x] (vector x x))", "problem": 32, "user": "525873e8e4b0cb4875a45cb2"}, {"code": "mapcat #(repeat 2 %)", "problem": 32, "user": "4ec11b79535dfed6da9c6da6"}, {"code": "(fn dup [seq]\n  (reduce (fn [vec e] (apply conj vec (repeat 2 e))) [] seq))", "problem": 32, "user": "5268eb68e4b03e8d9a4a71c6"}, {"code": "(fn [s] (reduce #(into% [%2 %2]) [] s))", "problem": 32, "user": "5261aebbe4b03e8d9a4a7066"}, {"code": "(fn x [s]\n  (if (empty? s)\n    '()\n    (cons\n     (first s)\n     (cons\n      (first s)\n      (lazy-seq (x (rest s)))))))", "problem": 32, "user": "526439a4e4b03e8d9a4a70cc"}, {"code": "(fn [coll] (reduce #(conj (conj %1 %2) %2) [] coll))", "problem": 32, "user": "5116e176e4b0063b4e3e16d7"}, {"code": "#(reduce (fn [coll i] (conj coll i i)) [] %)", "problem": 32, "user": "526c2340e4b03e8d9a4a7281"}, {"code": "#(interleave % %)", "problem": 32, "user": "526a7025e4b03e8d9a4a722a"}, {"code": "#(loop [s %\n\t      ret []]\n\t (if-let [f (first s)]\n\t   (recur (rest s) (conj (conj ret f) f ))\n\t   ret))", "problem": 32, "user": "4f05872b535dcb61093f6bf8"}, {"code": "#(interleave % %)", "problem": 32, "user": "5267d9bde4b03e8d9a4a7188"}, {"code": "(fn [coll] (apply concat (map #(repeat 2 %) coll)))", "problem": 32, "user": "509e62a8e4b08df8156e9e2e"}, {"code": "(fn dupl [coll] (if (empty? coll) [] (into (vec (repeat 2 (first coll))) (dupl (rest coll)))))", "problem": 32, "user": "525947f1e4b0cb4875a45cd8"}, {"code": "(partial \n (fn [acc coll]\n   (if (nil? coll)\n     (reverse acc)\n     (recur (conj acc (first coll) (first coll)) (next coll))\n   )\n ) '()\n)", "problem": 32, "user": "526dd90de4b03e8d9a4a72fe"}, {"code": "(fn [s] (reverse (reduce (fn [s e] (conj (conj s e) e)) '() s)))", "problem": 32, "user": "526f9715e4b03e8d9a4a7372"}, {"code": "(fn [xs]\n  (reduce #(conj % %2 %2) [] xs))", "problem": 32, "user": "526e5be8e4b03e8d9a4a731c"}, {"code": "(fn duplicate [col]  ;Duplicate a Sequence\n  (reduce \n    #(conj %1 %2 %2)\n    []\n    col))", "problem": 32, "user": "526ee63de4b03e8d9a4a733f"}, {"code": "(fn [x]\n  (seq\n    (reduce #(conj (conj %1 %2) %2) [] x)))", "problem": 32, "user": "526143b7e4b03e8d9a4a705a"}, {"code": "#(mapcat list % %)", "problem": 32, "user": "525de512e4b0cb4875a45d8a"}, {"code": "reduce (fn [x y] (concat x [y y])) []", "problem": 32, "user": "51f4d46ee4b0fca5e8b48243"}, {"code": "#(interleave % %)", "problem": 32, "user": "523bde95e4b07becd5be2202"}, {"code": "(fn [x] (interleave x x))", "problem": 32, "user": "5262efade4b03e8d9a4a709f"}, {"code": "#(interleave % %)", "problem": 32, "user": "5260341ee4b03e8d9a4a7034"}, {"code": "#(interleave % %)", "problem": 32, "user": "5269c150e4b03e8d9a4a71f8"}, {"code": "(fn replicate-sequence\n  [x]\n  (apply concat (map (fn [y] [y y]) x))\n  )", "problem": 32, "user": "51f549c4e4b0abb92f97f9cb"}, {"code": "(fn [lista] (loop [temp lista acc '()] (if (empty? temp) (reverse acc) (recur (rest temp) (let [element (first temp)] (conj (conj acc element) element))))))", "problem": 32, "user": "524b1a95e4b09eba1c0223c2"}, {"code": "#(reverse (reduce (fn fx[acc x] (conj acc x x) ) '() %))", "problem": 32, "user": "5271b940e4b03e8d9a4a73fb"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "52727d52e4b03e8d9a4a7439"}, {"code": "(fn dup\n  ([lst] (dup [] lst))\n  ([l lst] (if (empty? lst) l (dup (conj l (first lst) (first lst)) (next lst)))))", "problem": 32, "user": "5272669de4b03e8d9a4a742e"}, {"code": "#(interleave % %)", "problem": 32, "user": "5273562ae4b03e8d9a4a7479"}, {"code": "(fn [x]\n  (apply concat (map #(list % %) x)))", "problem": 32, "user": "52736ca1e4b03e8d9a4a747e"}, {"code": "(fn [s] (sort (take (* 2 (count s)) (cycle s))))", "problem": 32, "user": "525c575be4b0cb4875a45d38"}, {"code": "(fn [x] (reduce concat (map #(take 2 (repeat %)) x)))", "problem": 32, "user": "5272d4b7e4b03e8d9a4a7453"}, {"code": "(fn [xs] (interleave xs xs))", "problem": 32, "user": "5255bf1ee4b0541d1855b9f1"}, {"code": "#(reverse (reduce (fn [s x] (conj s x x)) '() %))", "problem": 32, "user": "527513d8e4b03e8d9a4a74bd"}, {"code": "(fn dubl [inseq] (apply concat (map #(repeat 2 %) inseq)))", "problem": 32, "user": "526397f1e4b03e8d9a4a70b6"}, {"code": "(fn [s] (apply concat (map (fn [a] [a a]) s)))", "problem": 32, "user": "526d6968e4b03e8d9a4a72d9"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "527268a5e4b03e8d9a4a7431"}, {"code": "(fn [coll] (reverse (reduce #(cons %2 (cons %2 %1)) '() coll)))", "problem": 32, "user": "51ecb0fee4b0bb5070431583"}, {"code": "#(interleave % %)", "problem": 32, "user": "4f90dc2ae4b0dcca54ed6c92"}, {"code": "#(interleave % %)", "problem": 32, "user": "526bc746e4b03e8d9a4a7271"}, {"code": "reduce (fn [a b] (conj a b b)) []", "problem": 32, "user": "50be9b4ae4b00fb48fed2ef6"}, {"code": "mapcat #(vector % %)", "problem": 32, "user": "517c1a3be4b07ef0e56148d6"}, {"code": "(fn [lat]\n  (reduce concat (map #(take 2 (repeat %)) lat)))", "problem": 32, "user": "5276aa0de4b03e8d9a4a74ea"}, {"code": "(fn [x] (reverse (reduce #(cons %2 (cons %2 %1)) [] x)))", "problem": 32, "user": "514f6679e4b0b449e54b8df5"}, {"code": "#(reduce into (map vector % %))", "problem": 32, "user": "51422945e4b0b50abeb46b2e"}, {"code": "#(mapcat (fn [x] (vector x x)) %)", "problem": 32, "user": "5274eb56e4b03e8d9a4a74bb"}, {"code": "(fn [xs] (apply concat (mapv (partial repeat 2) xs)))", "problem": 32, "user": "52713288e4b03e8d9a4a73e7"}, {"code": "#(for [x % y \"ab\"] x)", "problem": 32, "user": "527818f7e4b03e8d9a4a7519"}, {"code": "(fn [v] (apply concat (for [e v] [e e])))", "problem": 32, "user": "521d709ae4b050d5da0427ef"}, {"code": "mapcat #(vector % %)", "problem": 32, "user": "52295917e4b04c906c9c6a6f"}, {"code": "(fn [x] (mapcat #(repeat 2 %) x))", "problem": 32, "user": "52795656e4b03e8d9a4a7534"}, {"code": "(fn duplicate [seq]\n  (reverse (reduce #(cons %2 (cons %2 %1)) (sequence nil) seq)))", "problem": 32, "user": "50651de3e4b0b1b6c8b1d85f"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "5272ccf1e4b03e8d9a4a7450"}, {"code": "(fn a [coll] (mapcat #(list % %) coll))", "problem": 32, "user": "527a8eb7e4b03e8d9a4a755f"}, {"code": "(fn [input-seq] (apply concat (map (fn [x] [x x]) input-seq)))", "problem": 32, "user": "52711255e4b03e8d9a4a73d7"}, {"code": "(fn dup-seq [lat]\n  (reduce concat (map #(take 2 (repeat %)) lat)))", "problem": 32, "user": "527ac231e4b03e8d9a4a7567"}, {"code": "mapcat #(repeat 2 %)", "problem": 32, "user": "51e38568e4b0c611d6113e43"}, {"code": "(fn [xs]\n  (loop [xs xs ys []]\n    (if (empty? xs) ys\n      (recur (rest xs) (conj ys (first xs) (first xs))))))", "problem": 32, "user": "526f2e16e4b03e8d9a4a7353"}, {"code": "(fn [xs] (interleave xs xs))", "problem": 32, "user": "527236d4e4b03e8d9a4a741f"}, {"code": "(fn [s] (mapcat identity\n            (map (fn [x] (cons x (cons x '()))) s)))", "problem": 32, "user": "527b856fe4b03e8d9a4a758d"}, {"code": "#(interleave % %)", "problem": 32, "user": "5152f82ee4b03f948212e718"}, {"code": "(fn duplica [x]\n  (loop [vec (reverse x), saida []]\n    (if (empty? vec)\n     saida \n     (recur (rest vec) (cons (first vec) (cons  (first vec) saida))))))", "problem": 32, "user": "4eb2f89a535d7eef30807353"}, {"code": "#(apply concat (map (fn [x] [x x]) %))", "problem": 32, "user": "52741177e4b03e8d9a4a749b"}, {"code": "#(interleave % %)", "problem": 32, "user": "4db03885838c48654951d9bd"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "526f79aee4b03e8d9a4a736a"}, {"code": "(fn [l] (reduce concat (map (fn [x] (list x x)) l)))", "problem": 32, "user": "527675cbe4b03e8d9a4a74e2"}, {"code": "#(interleave % %)", "problem": 32, "user": "52561be5e4b0541d1855ba08"}, {"code": "#(interleave % %)", "problem": 32, "user": "52747090e4b03e8d9a4a74a5"}, {"code": "reduce #(concat % (repeat 2 %2)) '()", "problem": 32, "user": "527dc2aee4b0757a1b17138d"}, {"code": "reduce #(conj % %2 %2) []", "problem": 32, "user": "5262c73fe4b03e8d9a4a7098"}, {"code": "mapcat (partial repeat 2)", "problem": 32, "user": "527b9beee4b03e8d9a4a7590"}, {"code": "(fn [x] (reduce concat (map (fn [x] [x x]) x)))", "problem": 32, "user": "526bd542e4b03e8d9a4a7274"}, {"code": "(fn [lst] (reduce (fn [xs x] (conj xs x x)) [] lst))", "problem": 32, "user": "527ccaf4e4b0757a1b17136d"}, {"code": "mapcat (fn[x][x x])", "problem": 32, "user": "526a3412e4b03e8d9a4a721e"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "51bfc1f0e4b0e49ef9037dd4"}, {"code": "(fn [x]\n  (apply concat (map (fn [y] (list y y)) x))\n)", "problem": 32, "user": "52624348e4b03e8d9a4a707e"}, {"code": "#(reduce (fn [r i] (conj r i i)) [] %)", "problem": 32, "user": "527b8881e4b03e8d9a4a758e"}, {"code": "(fn[x] (interleave x x))", "problem": 32, "user": "52810225e4b0757a1b171418"}, {"code": "mapcat #(vector % %)", "problem": 32, "user": "50f07f6ae4b0bdaecbb47dc4"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "5277da8ee4b03e8d9a4a7514"}, {"code": "(let [double-cons (fn [tail head] (cons head (cons head tail)))]\n  (fn [l] (reverse (reduce double-cons (empty l) l))))", "problem": 32, "user": "52692e3be4b03e8d9a4a71d6"}, {"code": "#(loop [result []\n\t\tremaining %]\n\t\t(let [[current & rest] remaining]\n\t\t\t(if (nil? current)\n\t\t\t\tresult\n\t\t\t\t(recur (conj result current current) rest))))", "problem": 32, "user": "528147b6e4b0757a1b171425"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "502f6c56e4b0842eb223d8bb"}, {"code": "#(interleave % %)", "problem": 32, "user": "519ef784e4b087743fad2198"}, {"code": "#(interleave % %)", "problem": 32, "user": "511dada0e4b0a5c68a34840c"}, {"code": "(fn [a] (mapcat #(list % %) a))", "problem": 32, "user": "4e0359e8535d04ed9115e792"}, {"code": "#(interleave % %)", "problem": 32, "user": "5284de3de4b0239c8a67ade3"}, {"code": "(fn [coll]\n  (reverse\n   (reduce #(cons %2 (cons %2 %1)) '() coll)))", "problem": 32, "user": "527ba29de4b03e8d9a4a7594"}, {"code": "#(mapcat vector % %)", "problem": 32, "user": "525d95b1e4b0cb4875a45d81"}, {"code": "mapcat #(repeat 2 %)", "problem": 32, "user": "51d8f711e4b02ceefd947748"}, {"code": "(fn t[l] (\n    if (= 1 (count l)) \n    (list (first l) (first l))\n    (concat\n        (list (first l) (first l))\n        (t (rest l))\n    )\n))", "problem": 32, "user": "4f03c039535dcb61093f6b5e"}, {"code": "#(interleave % %)", "problem": 32, "user": "52865f41e4b0239c8a67ae15"}, {"code": "mapcat (fn [x] [x x])", "problem": 32, "user": "5287f66be4b0239c8a67ae45"}, {"code": "#(apply concat (map (fn [x] (vector x x)) %))", "problem": 32, "user": "527fd663e4b0757a1b1713de"}, {"code": "(fn [x]\n  (apply concat (map #(list % %)\n                     x)))", "problem": 32, "user": "52890634e4b0239c8a67ae5e"}, {"code": "#(reduce concat (map (fn [x] [x x]) %))", "problem": 32, "user": "5285920be4b0239c8a67adfb"}, {"code": "#(mapcat (partial repeat 2) %)", "problem": 32, "user": "509331d9e4b097f48cc38580"}, {"code": "(fn [s]\n  (apply concat (map #(vector %%) s)))", "problem": 32, "user": "52745629e4b03e8d9a4a74a0"}, {"code": "#(interleave % %)", "problem": 32, "user": "527094f0e4b03e8d9a4a73b3"}, {"code": "#(interleave % %)", "problem": 32, "user": "5289bba9e4b0239c8a67ae69"}, {"code": "mapcat (fn [e] [e e])", "problem": 32, "user": "528b08efe4b0239c8a67ae8a"}, {"code": "(fn rep [l] (cond (= l []) [] :else (concat (replicate 2 (first l)) (rep (rest l)))))", "problem": 32, "user": "528b9efee4b0239c8a67aea0"}, {"code": "(fn [thing] \n   (reduce (fn [blah hah] (concat blah (list hah hah))) '() thing))", "problem": 32, "user": "4fbd6210e4b081705acca303"}, {"code": "(fn [a] (interleave a a))", "problem": 32, "user": "528bba38e4b0239c8a67aea9"}, {"code": "#(interleave % %)", "problem": 32, "user": "528d1094e4b0239c8a67aebe"}, {"code": "#(interleave % %)", "problem": 32, "user": "528652fbe4b0239c8a67ae14"}, {"code": "(fn dup [coll]\n  (loop [[x & xs] coll\n         res []]\n    (if (nil? x)\n      res\n      (recur xs\n             (conj res x x)))))", "problem": 32, "user": "4f35b2ace4b0e243712b1ec5"}, {"code": "(fn [x] (reduce (fn [r a] (conj r a a)) [] x))", "problem": 32, "user": "52808897e4b0757a1b171404"}, {"code": "(fn [x] (interleave x\n                   x))", "problem": 32, "user": "51e7c1f1e4b0a3e081b8cbef"}, {"code": "#(interleave % %)", "problem": 32, "user": "528a791ae4b0239c8a67ae77"}, {"code": "(fn [args] (interleave args args))", "problem": 32, "user": "4ea5ba92535d7eef308072d9"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "528e95efe4b0239c8a67aee2"}, {"code": "#(interleave % %)", "problem": 32, "user": "52753740e4b03e8d9a4a74c1"}, {"code": "reduce (fn [a b] (conj a b b)) []", "problem": 32, "user": "5290257ae4b0239c8a67af03"}, {"code": "(fn [x]\n    (apply list (reduce (fn [a b] (conj a b b)) [] x))\n    )", "problem": 32, "user": "528ce039e4b0239c8a67aebc"}, {"code": "(fn [x] (apply concat (map #(list % %) x)))", "problem": 32, "user": "528e64b7e4b0239c8a67aedd"}, {"code": "(fn duplicate [nums]\n  (loop [li '()\n         x nums\n         dup_num 0]\n    (if (= x nil)\n      (reverse li)\n      (if (< 1 dup_num)\n        (recur li (next x) 0)\n        (recur (conj li (first x)) x (inc dup_num))))))", "problem": 32, "user": "526f0a68e4b03e8d9a4a7348"}, {"code": "#(apply concat (map (fn [x] (list x x)) %))", "problem": 32, "user": "5294e44de4b02ebb4ef75016"}, {"code": "mapcat #(vector % %)", "problem": 32, "user": "52951156e4b02ebb4ef7501b"}, {"code": "#(interleave % %)", "problem": 32, "user": "52950ab6e4b02ebb4ef7501a"}, {"code": "(fn [s]\n  (reduce\n   (fn [l a]\n     (conj (conj l a) a))\n   [] s))", "problem": 32, "user": "4f3656d1e4b0e243712b1ec9"}, {"code": "(fn [x] ((fn [coll] (mapcat  #(if (sequential? %) % [%]) coll)) (map (fn[y] [y y ]) x)))", "problem": 32, "user": "52737333e4b03e8d9a4a747f"}, {"code": "#(reduce (fn [l r] (apply conj l [r r])) [] %)", "problem": 32, "user": "5287f34ee4b0239c8a67ae43"}, {"code": "(fn [x] (reduce concat (map #(take 2 (repeat %)) x )))", "problem": 32, "user": "52614bc1e4b03e8d9a4a705c"}, {"code": "#(interleave % %)", "problem": 32, "user": "52963cc7e4b02ebb4ef7502d"}, {"code": "#(interleave % %)", "problem": 32, "user": "528c51a5e4b0239c8a67aeb4"}, {"code": "#(interleave % %)", "problem": 32, "user": "52974f66e4b02ebb4ef75040"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "529670c1e4b02ebb4ef75030"}, {"code": "#(interleave % %)", "problem": 32, "user": "5296008fe4b02ebb4ef7502a"}, {"code": "(fn duplicate2 [x] (if (< 0 (count x))\n                       (conj (duplicate2 (rest x)) (first x) (first x))\n                          '()))", "problem": 32, "user": "5296aa9be4b02ebb4ef75034"}, {"code": "(fn [col] \n  (mapcat #(vector %1 %1) col))", "problem": 32, "user": "4f6e7073e4b07046d9f4efd8"}, {"code": "(fn[x](let[y x](sort(into x y))))", "problem": 32, "user": "52840004e4b0239c8a67adc1"}, {"code": "(fn [s] (letfn [(dup-recur \n           ([values result]\n              (if (nil? values) \n                result \n                (let [current (first values)]\n                  #(dup-recur values (conj result current) current))))\n           ([values result current]\n              #(dup-recur (next values) (conj result current))))]\n    (seq (trampoline dup-recur s []))))", "problem": 32, "user": "52990271e4b02ebb4ef7506d"}, {"code": "#(interleave % %)", "problem": 32, "user": "51ad244fe4b09397d510977f"}, {"code": ";(fn [coll]\n;  (loop [c coll\n;         acc '()]\n;    (if (empty? c)\n;      (reverse acc)\n;      (recur (rest c) (conj acc (first c) (first c))))))\n\n#(interleave % %)", "problem": 32, "user": "528b01a0e4b0239c8a67ae89"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "51ac36c1e4b09397d5109765"}, {"code": "(fn [x] (interleave x x))", "problem": 32, "user": "50294c28e4b0b33e9bf6fdef"}, {"code": "(fn [s]\n  (reduce concat (map (partial repeat 2) s)))", "problem": 32, "user": "52140b53e4b0961f15ac4d7e"}, {"code": "(fn [lst] (interleave lst lst))", "problem": 32, "user": "51c214bce4b0d204dbe2ca1c"}, {"code": "#(apply concat (map (fn [x] (list x x)) %))", "problem": 32, "user": "5298d3f4e4b02ebb4ef75068"}, {"code": "(fn [s] (mapcat #(vector % %) s))", "problem": 32, "user": "529a73bde4b02ebb4ef75096"}, {"code": "#(reduce\n     (\n       fn[acc val] (conj (conj acc val) val)\n       )\n     [] %\n     )", "problem": 32, "user": "528f82d8e4b0239c8a67aef4"}, {"code": "(fn doubler [x] \n  (if (empty? x)\n    '()\n    (cons (first x) \n          (cons (first x)\n                (doubler (rest x))))))", "problem": 32, "user": "5294c95fe4b02ebb4ef75013"}, {"code": "(fn [coll] (let [dcoll coll] (interleave coll dcoll)))", "problem": 32, "user": "529d292fe4b04e0c58e87b74"}, {"code": "(fn [nums] (mapcat #(repeat 2 %) nums))", "problem": 32, "user": "51e05dfae4b01188f0627543"}, {"code": "#(interleave % %)", "problem": 32, "user": "5294b190e4b02ebb4ef75011"}, {"code": "(fn [x] (interleave x x))", "problem": 32, "user": "528e510ee4b0239c8a67aeda"}, {"code": "(fn [x] (reduce #(conj %1 %2 %2) [] x))", "problem": 32, "user": "4e72187b535d5021c1a8965b"}, {"code": "(fn [ls]\n  (->>\n   ls \n   (reduce (fn [acc i] (conj acc i i)) '())\n   (reverse)))", "problem": 32, "user": "529e2383e4b04e0c58e87b8b"}, {"code": "#(interleave %1 %1)", "problem": 32, "user": "5290ffaee4b0239c8a67af10"}, {"code": "(fn [coll] (seq (reduce #(concat %1 (repeat 2 %2)) [] coll)))", "problem": 32, "user": "4fe91fa2e4b0547ebccb2440"}, {"code": "#(reduce (fn [acc cur] (concat acc (list cur cur))) '() %)", "problem": 32, "user": "529e8ba9e4b04e0c58e87b99"}, {"code": "#(interleave % %)", "problem": 32, "user": "52774dd2e4b03e8d9a4a74ff"}, {"code": "(fn [data] (mapcat #(vector % %) data))", "problem": 32, "user": "509fe759e4b08df8156e9e43"}, {"code": "(fn [coll]\n  (reverse\n   (reduce #(cons %2 (cons %2 %1)) '() coll)))", "problem": 32, "user": "528e1c88e4b0239c8a67aed1"}, {"code": "(fn dupl [s]\n  (if (empty? s)\n    '()\n    (conj (dupl (rest s)) (first s) (first s))))", "problem": 32, "user": "529ce629e4b04e0c58e87b6e"}, {"code": "#(interleave % %)", "problem": 32, "user": "5273b883e4b03e8d9a4a748f"}, {"code": "#(interleave % %)", "problem": 32, "user": "526934d6e4b03e8d9a4a71dd"}, {"code": "reduce #(concat %1 (list %2) (list %2)) '()", "problem": 32, "user": "52a04f0ee4b04e0c58e87bc1"}, {"code": "(fn [xs] (interleave xs xs))", "problem": 32, "user": "5298cc88e4b02ebb4ef75065"}, {"code": "(fn dup [[x & xs]]\n  (if x (concat [x x] (dup xs))\n         []))", "problem": 32, "user": "52a1acb2e4b04e0c58e87bdb"}, {"code": "mapcat (fn [x] [x x])", "problem": 32, "user": "529d2abce4b04e0c58e87b75"}, {"code": "#(interleave % %)", "problem": 32, "user": "52a32876e4b04e0c58e87bfb"}, {"code": "(fn [s] (reduce  (fn [x y] (conj x y y)) '[] s))", "problem": 32, "user": "5226f8e9e4b04e78ff2e199a"}, {"code": "#(interleave % %)", "problem": 32, "user": "4ec1619b535dfed6da9c6dab"}, {"code": "#(mapcat list % %)", "problem": 32, "user": "52a503e4e4b0c58976d9abe1"}, {"code": "(fn[x] (interleave x x))", "problem": 32, "user": "52a1edd6e4b04e0c58e87be4"}, {"code": "(fn [x] (reduce interleave (replicate 2 (seq x))))", "problem": 32, "user": "52a0fa82e4b04e0c58e87bd1"}, {"code": "(fn [l] \n  (reduce \n     (fn [newList elem] (concat newList (list elem elem)))\n     []\n     l))", "problem": 32, "user": "51f6af4fe4b06ff1c25c52ce"}, {"code": "(fn hey [a-list] \n  (reduce  \n   #(conj (conj % %2) %2)\n   ()\n   (reverse a-list)\n   )\n)", "problem": 32, "user": "528cf6f7e4b0239c8a67aebd"}, {"code": "(partial \n (fn [acc l] \n   (if (empty? l) (reverse acc) \n     (recur (conj (conj acc (first l)) (first l)) (rest l)))) '())", "problem": 32, "user": "5273e006e4b03e8d9a4a7495"}, {"code": "(fn duplicate [coll]\n  (mapcat (fn [x] (repeat 2 x)) coll))", "problem": 32, "user": "52a6ed15e4b0c58976d9ac0a"}, {"code": "#(interleave % %)", "problem": 32, "user": "5289f1f4e4b0239c8a67ae6d"}, {"code": "#(interleave % %)", "problem": 32, "user": "528a3e14e4b0239c8a67ae72"}, {"code": "(fn [arr] (sort (concat arr arr)))", "problem": 32, "user": "52a5d1f3e4b0c58976d9abf1"}, {"code": "#(interleave % %)", "problem": 32, "user": "5298c83de4b02ebb4ef75064"}, {"code": "(fn [xs]\n  (reduce #(concat %1 (list %2 %2))\n          '()\n          xs))", "problem": 32, "user": "529e3a4fe4b04e0c58e87b92"}, {"code": "#(interleave % %)", "problem": 32, "user": "52a5e784e4b0c58976d9abf3"}, {"code": "#(interleave %1 %1)", "problem": 32, "user": "515896f2e4b059418b97f0a8"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "52a5f1e6e4b0c58976d9abf4"}, {"code": "#(interleave % %)", "problem": 32, "user": "51929214e4b08962174cf74c"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "5254ef3de4b0541d1855b9b8"}, {"code": "#(reduce (fn [coll x]\n          (concat coll (repeat 2 x)))\n        (empty %)\n        %)", "problem": 32, "user": "52ab6de1e4b0c58976d9ac78"}, {"code": "(fn [col] (reduce #(conj (conj %1 %2) %2) [] col))", "problem": 32, "user": "4f77b68de4b0fbe0118ec581"}, {"code": "(fn [sequens] (reverse (reduce #(cons %2 (cons %2 %1)) '() sequens)))", "problem": 32, "user": "52a28e1ce4b04e0c58e87bf0"}, {"code": "(fn dup [xs]\n  (if (nil? xs)\n    '()\n    (concat (dup (butlast xs)) (list (last xs) (last xs)))))", "problem": 32, "user": "52a779fce4b0c58976d9ac1a"}, {"code": "#(mapcat (fn [x] [x x]) %)", "problem": 32, "user": "52a62e16e4b0c58976d9abf9"}, {"code": "#(interleave % %)", "problem": 32, "user": "52a88c4de4b0c58976d9ac30"}, {"code": "(fn [coll] (reduce \n             #(cons %2 (cons %2 %1))\n             nil\n             (reverse coll)))", "problem": 32, "user": "529d4f4be4b04e0c58e87b79"}, {"code": "(fn replicate-seq\n  [coll]\n  (mapcat #(repeat 2 %) coll))", "problem": 32, "user": "51937eb3e4b04df54c098022"}, {"code": "#(apply mapcat list (repeat 2 %))", "problem": 32, "user": "52ac41fee4b0c58976d9ac85"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "52ae1634e4b0c58976d9ac9f"}, {"code": "#(interleave % %)", "problem": 32, "user": "51eab308e4b0f1f103a0d150"}, {"code": "#(interleave % %)", "problem": 32, "user": "52a8ca0fe4b0c58976d9ac36"}, {"code": "#(mapcat (fn [i] [i i]) %)", "problem": 32, "user": "52afbc69e4b0c58976d9acc0"}, {"code": "#(interleave % %)", "problem": 32, "user": "5291ede5e4b0239c8a67af1e"}, {"code": "(fn [coll]\n  (mapcat #(repeat 2 %) coll))", "problem": 32, "user": "527c036ee4b03e8d9a4a75a5"}, {"code": "#(interleave % %)", "problem": 32, "user": "527c040be4b03e8d9a4a75a7"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "52b11742e4b0c58976d9acd5"}, {"code": "#(reduce concat (for [x %] [x x]))", "problem": 32, "user": "4fa38e3fe4b081705acca190"}, {"code": "(fn f [x]\n  (reverse  (reduce #(cons %2 (cons %2 %1)) '() x)))", "problem": 32, "user": "52b0323ee4b0c58976d9acc6"}, {"code": "(fn dup [coll]\n  (if-not (seq coll)\n    nil\n    (concat (repeat 2 (first coll)) (dup (rest coll)))))", "problem": 32, "user": "4ee8b9c9535d93acb0a66884"}, {"code": "#(loop [result [] in % f (first %)]\n   (if (empty? in)\n     result\n     (recur (concat result (list f f)) (rest in) (first (rest in)))\n     )\n   )", "problem": 32, "user": "528f4462e4b0239c8a67aef0"}, {"code": "(fn dupl [xs]\n  (if (empty? xs)\n    '()\n    (conj (dupl (rest xs)) (first xs) (first xs))))", "problem": 32, "user": "52aa4a67e4b0c58976d9ac62"}, {"code": "(fn [coll]\n  (mapcat #(repeat 2 %) coll))", "problem": 32, "user": "52b1d41ce4b0c58976d9ace6"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "52ab61f5e4b0c58976d9ac75"}, {"code": "#(interleave % %)", "problem": 32, "user": "52aad30ce4b0c58976d9ac6d"}, {"code": "(fn [l] (reduce #(conj %1 %2 %2) [] l))", "problem": 32, "user": "527ba695e4b03e8d9a4a7596"}, {"code": "mapcat #(vector % %)", "problem": 32, "user": "51fdbf73e4b0f1313d468a51"}, {"code": "(fn[l] \n  (reduce #(conj %1 %2 %2) '[] l))", "problem": 32, "user": "52b405e1e4b0c58976d9ad15"}, {"code": "(fn [c] (mapcat #(list % %) c))", "problem": 32, "user": "524f4256e4b0541d1855b808"}, {"code": "#(interleave % %)", "problem": 32, "user": "52a1c6cee4b04e0c58e87be1"}, {"code": "(fn [x] (interleave x x))", "problem": 32, "user": "52a08afce4b04e0c58e87bc7"}, {"code": "(fn [coll] (loop [c coll a []] (if (empty? c) a (recur (rest c) (conj (conj a (first c)) (first c))))))", "problem": 32, "user": "52b43468e4b0c58976d9ad1b"}, {"code": "#(reduce (fn [a e] (conj a e e)) [] %)", "problem": 32, "user": "4fc3a72ae4b081705acca342"}, {"code": "(partial mapcat #(list % %))", "problem": 32, "user": "52b453b0e4b0c58976d9ad21"}, {"code": "(fn doubleach [xs]\n  (cond\n   (empty? xs) '()\n   :else (conj (conj (doubleach (rest xs)) (first xs)) (first xs))))", "problem": 32, "user": "52b5edd1e4b0c58976d9ad3c"}, {"code": "(fn [x] (interleave x x))", "problem": 32, "user": "52b60e94e4b0c58976d9ad3e"}, {"code": "(fn [coll] (mapcat #(repeat 2 %) coll))", "problem": 32, "user": "52a9154ee4b0c58976d9ac3b"}, {"code": "#(interleave % %)", "problem": 32, "user": "527cd633e4b0757a1b17136f"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "52b02329e4b0c58976d9acc5"}, {"code": "mapcat (partial repeat 2)", "problem": 32, "user": "52b65f26e4b0c58976d9ad43"}, {"code": "mapcat #(vector % %)", "problem": 32, "user": "525fea5ae4b03e8d9a4a7026"}, {"code": "(fn [l] (interleave l l))", "problem": 32, "user": "52b80827e4b0c58976d9ad56"}, {"code": "#(interleave % %)", "problem": 32, "user": "52b42d7ee4b0c58976d9ad19"}, {"code": "(fn [coll]\n  (apply concat (map #(vector % %) coll)))", "problem": 32, "user": "52a55adee4b0c58976d9abe7"}, {"code": "(partial reduce #(conj %1 %2 %2) [])", "problem": 32, "user": "52b8af15e4b07a9af57922b5"}, {"code": "(fn [lst] (apply concat (map #(repeat 2 %) lst)))", "problem": 32, "user": "52aa16d1e4b0c58976d9ac5a"}, {"code": "#(interleave % %)", "problem": 32, "user": "505b0431e4b021387fb8985e"}, {"code": "reduce #(into % [%2 %2]) []", "problem": 32, "user": "51852961e4b0da5a5be3babb"}, {"code": "(fn double-element [coll]\n   (when-let [[x & xs] (not-empty coll)]\n     (conj (double-element xs) x x )))", "problem": 32, "user": "52b2d16ae4b0c58976d9acf8"}, {"code": "(fn [x] (mapcat #(repeat 2 %) x))", "problem": 32, "user": "512b85a7e4b04d059cf1fd15"}, {"code": "(fn [s] \n  (loop [r s acc []]\n \t(if (empty? r)\n      (reverse acc)\n      (recur (rest r) (cons (first r) (cons (first r) acc)))\n      )\n  )\n)", "problem": 32, "user": "52ba43d0e4b07a9af57922cd"}, {"code": "#(mapcat (fn [x] [x x]) %)", "problem": 32, "user": "52ba6d0be4b07a9af57922d2"}, {"code": "(fn [seq]\n  (loop [current seq doubled '()]\n    (if (= 0 (count current))\n      (reverse doubled)\n      (recur (drop 1 current) (conj (conj doubled (first current)) (first current))))))", "problem": 32, "user": "52b94f15e4b07a9af57922ba"}, {"code": "#(mapcat list % %)", "problem": 32, "user": "52ba2af3e4b07a9af57922cc"}, {"code": "(fn [x] (interleave x x))", "problem": 32, "user": "526fce6fe4b03e8d9a4a7383"}, {"code": "#(apply interleave (into [] (repeat 2 %)))", "problem": 32, "user": "52baf490e4b07a9af57922db"}, {"code": "(fn [xs]\n  (loop [l xs r []]\n    (if (empty? l)\n      r\n      (recur (rest l) (concat r [(first l) (first l)])))))", "problem": 32, "user": "52b9c62ce4b07a9af57922c3"}, {"code": "mapcat #(repeat 2 %)", "problem": 32, "user": "52bb123ae4b07a9af57922de"}, {"code": "(fn [coll] (mapcat #(list %1 %1) coll))", "problem": 32, "user": "52976262e4b02ebb4ef75041"}, {"code": "(fn [coll] \n  (mapcat (fn [x] (list x x)) coll))", "problem": 32, "user": "527c166de4b03e8d9a4a75b3"}, {"code": "(fn [x] (interleave x x))", "problem": 32, "user": "52a00651e4b04e0c58e87bbb"}, {"code": "(fn [xs] (reduce (fn [accum, x] (conj accum x x)) [] xs))", "problem": 32, "user": "52ab51c4e4b0c58976d9ac73"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "4fc50525e4b081705acca370"}, {"code": "(fn [arg] (reduce concat (map #(identity [% %]) arg)))", "problem": 32, "user": "4f7683dae4b0fbe0118ec56f"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "52470d42e4b05ef8e38e6350"}, {"code": "mapcat #(vector % %)", "problem": 32, "user": "4f5d5202e4b0030a34fb2b38"}, {"code": "#(interleave % %)", "problem": 32, "user": "52a7c82ae4b0c58976d9ac21"}, {"code": "(fn [s] (interleave s s))", "problem": 32, "user": "52bb81d7e4b07a9af57922e8"}, {"code": "(fn [arg]\n  (reverse (reduce #(conj (conj %1 %2) %2) '() arg)))", "problem": 32, "user": "52bc7ea6e4b07a9af57922f7"}, {"code": "(fn [dat]\n  (reduce #(conj %1 %2 %2)\n          []\n          dat))", "problem": 32, "user": "52bbe6e1e4b07a9af57922ef"}, {"code": "(fn dup [x] (apply concat (map (fn d [y] [y y]) x)))", "problem": 32, "user": "52b7a904e4b0c58976d9ad51"}, {"code": "#(interleave % %)", "problem": 32, "user": "52bb27fee4b07a9af57922df"}, {"code": "(fn [x]\n  (mapcat #(vector % %) x))", "problem": 32, "user": "4f541874e4b0a7574ea717d8"}, {"code": "(fn [data]  (apply concat (map #(take 2 (repeat %)) data)))", "problem": 32, "user": "50dcb2f4e4b02e6ac9592c91"}, {"code": "(fn dup-seq [a-seq]\n   (reverse (reduce #(conj %1 (first %2) (second %2))  () (map #(list % %) a-seq)))     \n)", "problem": 32, "user": "52763696e4b03e8d9a4a74d7"}, {"code": "mapcat #(repeat 2 %)", "problem": 32, "user": "52bdb689e4b07a9af5792306"}, {"code": "(fn [xs] (apply concat (map (fn [x] [x x]) xs)))", "problem": 32, "user": "52baea85e4b07a9af57922d9"}, {"code": "(fn dbl-seq [s] (if (empty? s) nil (lazy-seq (cons (first s) (cons (first s) (dbl-seq (next s)))))))", "problem": 32, "user": "52bc6f5ee4b07a9af57922f6"}, {"code": "(fn [coll] (reduce #(conj %1 %2 %2) [] coll))", "problem": 32, "user": "52be0c48e4b07a9af5792311"}, {"code": "(fn [x] (apply concat (map #(list % %) x)))", "problem": 32, "user": "52bdf6bde4b07a9af579230d"}, {"code": "(fn dup [xs] (mapcat #(vec [%1 %1]) xs))", "problem": 32, "user": "52bf8e35e4b07a9af579233a"}, {"code": "(fn [s] (mapcat #(list % %) s))", "problem": 32, "user": "52be5d55e4b07a9af579231e"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "52bf29fde4b07a9af579232e"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "52b577c9e4b0c58976d9ad39"}, {"code": "#(interleave % %)", "problem": 32, "user": "4eda8d7c535d10e5ff6f530f"}, {"code": "#(loop [x % y []]\n\t(if (empty? x) y\n\t(let [z (first x)]\n\t(recur (rest x) (conj y z z)))))", "problem": 32, "user": "52b79d8ee4b0c58976d9ad50"}, {"code": "mapcat (partial repeat 2)", "problem": 32, "user": "4f3a979de4b0e243712b1f10"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "50772e6ae4b0fc74642bff5d"}, {"code": "#(interleave % %)", "problem": 32, "user": "52baefbae4b07a9af57922da"}, {"code": "#(vec (sort (concat % %)))", "problem": 32, "user": "52be23dbe4b07a9af5792316"}, {"code": "reduce #(conj (conj %1 %2) %2) []", "problem": 32, "user": "52bb4be0e4b07a9af57922e2"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "52be58d7e4b07a9af579231d"}, {"code": "(fn [L] (mapcat (fn [x] [x x]) L))", "problem": 32, "user": "52bf936ee4b07a9af579233b"}, {"code": "reduce #(concat %1 (list %2 %2)) nil", "problem": 32, "user": "523f1245e4b01c266ffa7f95"}, {"code": "mapcat #(vector % %)", "problem": 32, "user": "5167d60de4b0c5a4140a3098"}, {"code": "(fn [coll]\n  (reverse\n   (reduce #(cons %2 (cons %2 %1)) '() coll)))", "problem": 32, "user": "529952a4e4b02ebb4ef75081"}, {"code": "(fn [lst] (apply concat (map #(list % %) lst)))", "problem": 32, "user": "52c25645e4b07a9af579237d"}, {"code": "#(sort (into % %))", "problem": 32, "user": "52c00263e4b07a9af579233f"}, {"code": "(fn solution [s]\n  (reduce #(concat %1 [%2 %2]) [] s)\n)", "problem": 32, "user": "52b49aebe4b0c58976d9ad2b"}, {"code": "#(interleave % %)", "problem": 32, "user": "52c1cc8be4b07a9af579236b"}, {"code": "#(apply concat (for [x %] (repeat 2 x)))", "problem": 32, "user": "4fc559eae4b0ee37620e17f3"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "52c4af71e4b0c2d177d620e1"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "52c4fe42e4b0c2d177d620e9"}, {"code": "mapcat (fn [x] (list x x))", "problem": 32, "user": "52c52ef2e4b0c2d177d620ef"}, {"code": "(fn [coll] (reverse (reduce ( fn [a b] (conj a b b) ) '() coll)))", "problem": 32, "user": "4f659386e4b07046d9f4ef44"}, {"code": "#(interleave % %)", "problem": 32, "user": "52a23af1e4b04e0c58e87beb"}, {"code": "#(interleave % %)", "problem": 32, "user": "52bf0116e4b07a9af5792328"}, {"code": "(fn [coll] (reduce #(conj % %2 %2) [] coll))", "problem": 32, "user": "52c61564e4b0c2d177d62109"}, {"code": "(fn [vctr] (loop [cnt 0 nwvct nil]\n  (if (= cnt (count vctr)) (reverse nwvct)\n  (do (recur (inc cnt) (conj (conj nwvct (get vctr cnt)) (get vctr cnt))))\n  )))", "problem": 32, "user": "52c3a0f4e4b0c2d177d620c6"}, {"code": "(fn dob-seq [x]\n  (if (not (empty? x))\n    (let [fx (first x), rx (rest x)]\n      (cons fx (cons fx (dob-seq rx))))\n      '()))", "problem": 32, "user": "515bbcd9e4b0388ca8ca1521"}, {"code": "mapcat #(vector % %)", "problem": 32, "user": "52c580c2e4b0c2d177d620f5"}, {"code": "mapcat #(repeat 2 %)", "problem": 32, "user": "52c69672e4b0c2d177d62110"}, {"code": "#(interleave % %)", "problem": 32, "user": "4f03e486535dcb61093f6b78"}, {"code": "(fn dup\n        ([vs] (dup vs []))\n        ([vs acc]\n           (if (empty? vs)\n             (apply list acc)\n             (let [fst (first vs)]\n               (dup (rest vs) (conj acc fst fst))))))", "problem": 32, "user": "52c58561e4b0c2d177d620f8"}, {"code": "#(interleave % %)", "problem": 32, "user": "52c6a0abe4b0c2d177d62111"}, {"code": "(fn [s]\n          (mapcat (fn [x] (list x x)) s))", "problem": 32, "user": "52c6f6dee4b0c2d177d62118"}, {"code": "#(mapcat (partial repeat 2) %)", "problem": 32, "user": "5215661be4b02f6d8ea676c7"}, {"code": "(fn [xs] (interleave xs xs))", "problem": 32, "user": "52c804dee4b0c2d177d6212b"}, {"code": "(fn [coll]\n  (reverse\n   (reduce #(cons %2 (cons %2 %1)) '() coll)))", "problem": 32, "user": "528ba1d9e4b0239c8a67aea2"}, {"code": "(fn [x] (sort (concat x x)))", "problem": 32, "user": "52bd9cb7e4b07a9af5792304"}, {"code": "(fn duplicate [lst]\n    (reduce \n        (fn [acc ele] \n            (conj acc ele ele)\n        ) [] lst\n    )\n)", "problem": 32, "user": "52c17e42e4b07a9af5792367"}, {"code": "#(interleave % %)", "problem": 32, "user": "52c1f404e4b07a9af5792370"}, {"code": "(partial (fn [count list]\n  (let [lambda (fn [el count] \n            (loop [e el c count r []]\n              (if (= 0 c)\n                (seq r)\n                (recur e (dec c) (conj r e)))))]\n    (loop [l list r[]]\n      (if (empty? l)\n        (seq r)\n        (recur (rest l) (concat r (lambda (first l) count))))))) 2)", "problem": 32, "user": "52c81954e4b0c2d177d6212e"}, {"code": "(fn [sq]\n  (reduce (fn [m l] (conj (conj m l) l)) (empty sq) sq))", "problem": 32, "user": "52c2ff59e4b07a9af5792389"}, {"code": "#(interleave % %)", "problem": 32, "user": "52c884a2e4b0c2d177d62136"}, {"code": "#(interleave % %)", "problem": 32, "user": "508f97c0e4b0ea685a20f768"}, {"code": "(fn [col] (mapcat #(identity [% %]) col))", "problem": 32, "user": "52c1bd29e4b07a9af579236a"}, {"code": "(fn duplica [s]\n  (cond\n   (empty? s) nil\n   :else (cons (first s) (cons (first s) (duplica (next s))))))", "problem": 32, "user": "52c8758be4b0c2d177d62135"}, {"code": "(fn\n    [s]\n    (interleave s s))", "problem": 32, "user": "52a7634ae4b0c58976d9ac16"}, {"code": "#(interleave % %)", "problem": 32, "user": "52c5c1c8e4b0c2d177d620fc"}, {"code": "#(->> % (interleave %))", "problem": 32, "user": "52c60945e4b0c2d177d62108"}, {"code": "(fn [coll] (reduce #(cons %2 (cons %2 %1)) () (reverse coll)))", "problem": 32, "user": "52cc85abe4b07d0d72b27367"}, {"code": "mapcat #(vector % %)", "problem": 32, "user": "52cb6bb0e4b07d0d72b2734c"}, {"code": "#( loop [acc [] list %] \n    ( if (empty? list) acc\n       (recur (conj acc (first list) (first list)) (rest list))\n    )\n  )", "problem": 32, "user": "52cbe910e4b07d0d72b27353"}, {"code": "(fn dupseq [coll]\n   (if (= (count coll) 1)\n     (lazy-seq [(first coll) (first coll)])\n     (lazy-seq\n      (cons\n       (first coll)\n       (cons (first coll)\n             (lazy-seq (dupseq (rest coll))))))))", "problem": 32, "user": "52cc582ae4b07d0d72b27362"}, {"code": "mapcat #(repeat 2 %)", "problem": 32, "user": "52cc09c1e4b07d0d72b27356"}, {"code": "(fn foo [x] (apply concat (map #(list % % ) x)))", "problem": 32, "user": "52cc92e9e4b07d0d72b27368"}, {"code": "#(mapcat (partial repeat 2) %)", "problem": 32, "user": "52cca65be4b07d0d72b2736b"}, {"code": "mapcat #(vector % %)", "problem": 32, "user": "52ce2aace4b07d0d72b2738b"}, {"code": "mapcat #(repeat 2 %)", "problem": 32, "user": "52c1ede2e4b07a9af579236d"}, {"code": "#(interleave % %)", "problem": 32, "user": "52bbd09ee4b07a9af57922ee"}, {"code": "#(interleave % %)", "problem": 32, "user": "52caeb25e4b071a8d36bd3e7"}, {"code": "(fn m [coll]\n  (mapcat #(list % %) coll))", "problem": 32, "user": "52828298e4b0757a1b17145b"}, {"code": "(let\n    [f (fn f [a, b] (conj a b b))]\n    (fn [x]\n      (reduce f [] x))\n    )", "problem": 32, "user": "52cdc676e4b07d0d72b2737f"}, {"code": "(fn [i] (reduce concat (map (fn [j] [j j]) i)))", "problem": 32, "user": "5238ca2de4b0d705d026eef6"}, {"code": "#(interleave % %)", "problem": 32, "user": "52bc6cb2e4b07a9af57922f5"}, {"code": "(fn [c] (mapcat #(list % %) c))", "problem": 32, "user": "52b5137de4b0c58976d9ad36"}, {"code": "(fn\n      [coll]\n      (reduce concat (map #(take 2 (repeat %)) coll)))", "problem": 32, "user": "51ea4e35e4b0f1f103a0d148"}, {"code": "mapcat #(repeat 2 %)", "problem": 32, "user": "52ced458e4b07d0d72b27394"}, {"code": "(fn [x] (mapcat #(list % %) x))", "problem": 32, "user": "5094057fe4b097f48cc38593"}, {"code": "reduce #(into % [%2 %2]) []", "problem": 32, "user": "52cf5450e4b07d0d72b273a4"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "52d0902ee4b07d0d72b273bd"}, {"code": "(fn [l] (mapcat  #(if (sequential? %) % [%]) (map #(conj [] % %) l)))", "problem": 32, "user": "52c49401e4b0c2d177d620de"}, {"code": "mapcat #(repeat 2 %)", "problem": 32, "user": "52ce8648e4b07d0d72b27390"}, {"code": "(fn ! [s]\n  (if (empty? s) '() (cons (first s) (cons (first s) (! (rest s))))))", "problem": 32, "user": "52c3b3e5e4b0c2d177d620c8"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "51b091e9e4b0c53cf2e68a68"}, {"code": "reduce (fn [result x] (concat (concat result [x]) [x]))  '()", "problem": 32, "user": "52cdb7efe4b07d0d72b2737c"}, {"code": ";(fn [s] (reduce #(conj %1 %2 %2) [] s))\n#(interleave % %)", "problem": 32, "user": "52d00832e4b07d0d72b273b4"}, {"code": "mapcat #(take 2 (repeat %))", "problem": 32, "user": "52ce4cafe4b07d0d72b2738e"}, {"code": "(fn [x]\n  (loop [doublelist [] restoflist x]\n    (if (empty? restoflist)\n      doublelist\n      (recur (conj doublelist (first restoflist) (first restoflist)) (rest restoflist))\n      )\n    )\n  )", "problem": 32, "user": "52cc7c40e4b07d0d72b27364"}, {"code": "#(mapcat (fn [a] [a a]) %)", "problem": 32, "user": "52d2ca1ce4b099d49816f0b4"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "523e12bde4b09833704079a2"}, {"code": "#(interleave % %)", "problem": 32, "user": "52b35a6ee4b0c58976d9ad07"}, {"code": "reduce (fn [xs x] (concat xs (list x x))) ()", "problem": 32, "user": "52b2a819e4b0c58976d9acf1"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "52d39acce4b099d49816f0c7"}, {"code": "#(interleave % %)", "problem": 32, "user": "52cd1ed0e4b07d0d72b27377"}, {"code": "(fn [coll]\n  (loop [v coll newlist '()]\n    (if (empty? v)\n      (sort newlist)\n      (recur (rest v) (cons (first v) (cons (first v) newlist))))))", "problem": 32, "user": "52c672e2e4b0c2d177d6210e"}, {"code": "#(apply concat (for [x %] (conj () x x)))", "problem": 32, "user": "52cf084ce4b07d0d72b27399"}, {"code": "#(interleave % %)", "problem": 32, "user": "4ed45563535d10e5ff6f52c9"}, {"code": "#(mapcat (fn [x] [x x]) %)", "problem": 32, "user": "4fe98ddae4b0547ebccb2463"}, {"code": "#(interleave % %)", "problem": 32, "user": "52d340ebe4b099d49816f0c1"}, {"code": "#(loop [el (first %)\n        rst (rest %)\n        res []]\n   (if (nil? el)\n     res\n     (recur (first rst) (rest rst) (conj res el el))))", "problem": 32, "user": "51b41150e4b0f094dd986fac"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "52d10680e4b07d0d72b273c3"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "52d2e54ae4b099d49816f0b9"}, {"code": "#(interleave % %)", "problem": 32, "user": "52d3f666e4b09f7907dd1327"}, {"code": "#(interleave % %)", "problem": 32, "user": "52cdec6ce4b07d0d72b27383"}, {"code": "#(interleave % %)", "problem": 32, "user": "52cdec62e4b07d0d72b27382"}, {"code": ";mapcat #(do [% %])\n\n#(interleave % %)", "problem": 32, "user": "52d469c8e4b09f7907dd1330"}, {"code": "(fn [coll] (interleave coll coll))", "problem": 32, "user": "51a97f7ae4b08d8ec191b827"}, {"code": "#(reduce (fn [x y] (conj x y y)) [] %)", "problem": 32, "user": "52d6120ee4b09f7907dd134c"}, {"code": "#(reduce (fn [x y] (conj x y y)) [] %)", "problem": 32, "user": "52d4acc8e4b09f7907dd1333"}, {"code": "reduce #(conj % %2 %2) []", "problem": 32, "user": "52cd093fe4b07d0d72b27376"}, {"code": "(fn [xs] (interleave xs xs))", "problem": 32, "user": "4f8c6bf6e4b02e764a0a519b"}, {"code": "mapcat #(vector % %)", "problem": 32, "user": "52ca9513e4b071a8d36bd3e4"}, {"code": "(fn f [x]\n  (cond\n   (= (count x) 0) '()\n   (= (count x) 1) (list (first x) (first x))\n   true (conj (conj (f (rest x)) (first x)) (first x))))", "problem": 32, "user": "52d7b0ade4b09f7907dd137c"}, {"code": "(fn [l] (reduce #(conj %1 %2 %2) (cons [] l)))", "problem": 32, "user": "52d66152e4b09f7907dd1357"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "52ce4c32e4b07d0d72b2738d"}, {"code": "mapcat #(vector % %)", "problem": 32, "user": "52d02380e4b07d0d72b273b7"}, {"code": "reduce (fn [state x] (conj state x x)) []", "problem": 32, "user": "52cc4fd6e4b07d0d72b27360"}, {"code": "mapcat #(vector % %)", "problem": 32, "user": "52d7f7efe4b09f7907dd1380"}, {"code": "(fn dupes [x]\n  (if (= 0 (count x))\n    '()\n    (cons (first x) (cons (first x) (dupes (rest x))))\n  )\n)", "problem": 32, "user": "52af7a5ce4b0c58976d9acbd"}, {"code": "(fn [coll]\n  (reduce (fn [a x]\n            (conj a x x)\n            )\n          []\n          coll))", "problem": 32, "user": "52b94e26e4b07a9af57922b9"}, {"code": "(fn [x]\n  (seq (reduce #(conj %1 %2 %2) [] x)))", "problem": 32, "user": "52c1566fe4b07a9af5792364"}, {"code": "(fn dups [x]\n  (if (empty? x) '()\n   (let [h (first x)\n         t (rest x)]\n     (conj (dups t) h h))))", "problem": 32, "user": "52d6889ae4b09f7907dd1361"}, {"code": "(fn [col]\n  (reduce concat (map (fn [a] (list a a)) col)))", "problem": 32, "user": "51f8e057e4b09be9c177e53d"}, {"code": "(fn dup [l]\n  (if (= 0 (count l))\n    '()\n    (conj (dup (rest l)) (first l) (first l))))", "problem": 32, "user": "52d92f13e4b09f7907dd13a2"}, {"code": "(fn [s]\n  (reduce\n   (fn [acc e] (conj acc e e))\n   []\n   s))", "problem": 32, "user": "521ed5b4e4b0e6c71e0c0bc0"}, {"code": "#(sort (concat %1 %1))", "problem": 32, "user": "50c2fbebe4b00e537d00253c"}, {"code": "(fn duplicateseq [x]\n  (reduce\n    (fn [y z]\n      (conj y z z))\n    '()\n    (reverse x)))", "problem": 32, "user": "52dad8bde4b09f7907dd13be"}, {"code": "#(reduce concat '() (map list %1 %1))", "problem": 32, "user": "52ca720fe4b071a8d36bd3e2"}, {"code": "#(mapcat (fn [x] [x x]) %)", "problem": 32, "user": "52d809bde4b09f7907dd1384"}, {"code": "#(interleave % %)", "problem": 32, "user": "52cca96ae4b07d0d72b2736e"}, {"code": "#(mapcat vector % %)", "problem": 32, "user": "52daf558e4b09f7907dd13c1"}, {"code": "mapcat #( list % %)", "problem": 32, "user": "52d66ca0e4b09f7907dd135c"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "52d00a05e4b07d0d72b273b5"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "52dd4fb4e4b09f7907dd13df"}, {"code": "#(interleave % %)", "problem": 32, "user": "5224cf82e4b01819a2de42ef"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "4e6e1756535d5021c1a895fe"}, {"code": "(fn [s]\n  (apply concat (map #(vector % %) s)))", "problem": 32, "user": "52dd6cc8e4b09f7907dd13e2"}, {"code": "#(sort (concat % %))", "problem": 32, "user": "52dde81fe4b09f7907dd13eb"}, {"code": "#(loop [ input %1 counter (count %1) accum [] ]\n   (if (= counter 0) accum \n     (recur (rest input) (dec counter) (concat accum (repeat 2 (first input)  ) ) ) ) )", "problem": 32, "user": "52da7ae5e4b09f7907dd13b8"}, {"code": "(fn dup [xs] \n  (if (empty? xs)\n    xs\n    (let [x (first xs)]\n      (concat (list x x) (dup (rest xs))))))", "problem": 32, "user": "52deb735e4b09f7907dd13f7"}, {"code": "#(interleave % %)", "problem": 32, "user": "52537b67e4b0541d1855b8f9"}, {"code": "#(interleave %1 %1)", "problem": 32, "user": "5204f2b1e4b0bf4f1882c7f5"}, {"code": "(fn [coll]\n  (reduce concat\n          (map #(list % %) coll)))", "problem": 32, "user": "52d51535e4b09f7907dd133a"}, {"code": "(fn [x] (interleave x x))", "problem": 32, "user": "4e1e1576535d04ed9115e806"}, {"code": "(fn [sequence] (apply concat (map #(list % %) sequence)))", "problem": 32, "user": "52d9aaa1e4b09f7907dd13ae"}, {"code": "(fn [col] (mapcat #(identity [% %]) col))", "problem": 32, "user": "510fe537e4b04c71fce993dd"}, {"code": "(fn [coll] (mapcat #(vector % %) coll))", "problem": 32, "user": "5271605ae4b03e8d9a4a73ed"}, {"code": "#(sort (reduce conj % %))", "problem": 32, "user": "52d49445e4b09f7907dd1332"}, {"code": "#(sort (into % %))", "problem": 32, "user": "51e3a549e4b0c611d6113e47"}, {"code": ";(fn [l] (mapcat #(take 2 (repeat (first %))) (partition-by (fn [x] (rand)) l)))\n;mapcat #(list % %)\n#(interleave % %)", "problem": 32, "user": "52df232fe4b09f7907dd13fc"}, {"code": "#(apply concat (map (fn [a] [a a]) %))", "problem": 32, "user": "52d7a930e4b09f7907dd1379"}, {"code": "(fn [x] (mapcat (fn [x] [x x]) x))", "problem": 32, "user": "5112bbdde4b0350614f07a7c"}, {"code": "(fn [arr]\n  (reduce (fn [x y] (concat x [y y])) '() arr))", "problem": 32, "user": "52c8a8b9e4b0c2d177d62139"}, {"code": "#(let [x %] (mapcat list x x))", "problem": 32, "user": "52a3c66ce4b04e0c58e87c04"}, {"code": "mapcat #(concat [%] [%])", "problem": 32, "user": "52cb19abe4b07d0d72b27348"}, {"code": "(fn [val] \n  (reverse (loop [val val result '()]\n    (if (empty? val)\n      result\n      (recur (rest val) (let [x (first val)] (conj (conj result x) x))))))\n  )", "problem": 32, "user": "521b481de4b0c4ef0be83037"}, {"code": "#(loop [x % z []] (if (empty? x) z (recur (rest x) (conj z (first x) (first x)))))", "problem": 32, "user": "52e48632e4b09f7907dd1450"}, {"code": "#(reverse (reduce (fn [s x] (\n      cons x (cons x s)\n   )) '() %))", "problem": 32, "user": "52e295fae4b09f7907dd1437"}, {"code": "(fn [x] (reduce #(conj % %2 %2) [] x))", "problem": 32, "user": "52c7f036e4b0c2d177d62126"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "52e4cc2ee4b09f7907dd1455"}, {"code": "#(interleave % %)", "problem": 32, "user": "52e4361fe4b09f7907dd144d"}, {"code": "#(interleave % %)", "problem": 32, "user": "52d6a9c2e4b09f7907dd1365"}, {"code": "(fn [x]\n  (reverse (reduce (fn [a b] (conj a b b)) '() x)))", "problem": 32, "user": "52a32b52e4b04e0c58e87bfc"}, {"code": "(fn doop [xs]\n  (if (empty? xs)\n    nil\n    (let [y (first xs)]\n      (conj (conj (doop (rest xs)) y) y))))", "problem": 32, "user": "52e41c22e4b09f7907dd144b"}, {"code": "#(mapcat (fn [x] (list x x)) %)", "problem": 32, "user": "52e59ca5e4b09f7907dd1464"}, {"code": "(fn [li]\r\n\r\n  (loop [li li ret []] \r\n    (if (= 0 (count li))\r\n        ret   \r\n        (recur (rest li) (conj (conj ret (first li)) (first li)))     \r\n    )\r\n  )\r\n)", "problem": 32, "user": "513caa36e4b0b86ece9f3229"}, {"code": "(fn [xs] \n  (interleave xs xs))", "problem": 32, "user": "52e276d9e4b09f7907dd1436"}, {"code": "reduce #(conj %1 %2 %2) '[]", "problem": 32, "user": "52e0e646e4b09f7907dd1416"}, {"code": "(partial reduce (fn[x y] (conj x y y)) [] )", "problem": 32, "user": "52d36f60e4b099d49816f0c2"}, {"code": "x", "problem": 32, "user": "52e635b3e4b09f7907dd146f"}, {"code": "#(interleave % %)", "problem": 32, "user": "50ee68fce4b06330c1f87c59"}, {"code": "#(interleave % %)", "problem": 32, "user": "51f2a491e4b0210f90e74553"}, {"code": "(fn [s] (mapcat #(list % %) s))", "problem": 32, "user": "52dfc89be4b09f7907dd1405"}, {"code": "#(interleave % %)", "problem": 32, "user": "52ad68f5e4b0c58976d9ac94"}, {"code": "#(apply concat (map (fn [x] [x x]) %))", "problem": 32, "user": "4fb99483e4b081705acca2da"}, {"code": "#(\n  (fn dupl [source dest] \n    (if-let [f (first source)] (dupl (next source) (conj dest f f) ) dest)\n  ) % [])", "problem": 32, "user": "52b9c5e8e4b07a9af57922c2"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "50a3bf08e4b0ceace084d495"}, {"code": "#(interleave % %)", "problem": 32, "user": "529b44afe4b02ebb4ef7509d"}, {"code": "#(sort (into (into () %) %))", "problem": 32, "user": "52e3912ee4b09f7907dd1446"}, {"code": "(fn [a] (interleave a a))", "problem": 32, "user": "51910da7e4b0f8ef0be96bf9"}, {"code": "#(interleave % %)", "problem": 32, "user": "52dfe1d2e4b09f7907dd1406"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "52dc2bc8e4b09f7907dd13ca"}, {"code": "(fn [inList] (reduce #(conj %1 %2 %2) '() (reverse inList)) )", "problem": 32, "user": "52bf6946e4b07a9af5792334"}, {"code": "#(interleave % %)", "problem": 32, "user": "52e54040e4b09f7907dd145c"}, {"code": "(fn [l] (mapcat #(repeat  2 %) l))", "problem": 32, "user": "52d83c2ce4b09f7907dd138d"}, {"code": "(fn [x] (mapcat list x x))", "problem": 32, "user": "510b5596e4b078ea719210fd"}, {"code": "#(apply concat (map vector % %))", "problem": 32, "user": "52e32d55e4b09f7907dd143e"}, {"code": "(fn [coll] (mapcat #(repeat 2 %) coll))", "problem": 32, "user": "52d8eb78e4b09f7907dd139d"}, {"code": "#(interleave % %)", "problem": 32, "user": "52e3e6a8e4b09f7907dd1448"}, {"code": "#(mapcat list % %)", "problem": 32, "user": "52b0ec23e4b0c58976d9acd1"}, {"code": "(fn [s] (mapcat #(list % %) s))", "problem": 32, "user": "52cee992e4b07d0d72b27395"}, {"code": "#(mapcat (fn [x] (list x x)) %)", "problem": 32, "user": "529223cbe4b0239c8a67af26"}, {"code": "(partial mapcat (fn [i] [i i]))", "problem": 32, "user": "50232eeae4b0b5d8b1bd2397"}, {"code": "(fn [c]\n  (reduce concat (map (fn [x] [x x]) c))\n)", "problem": 32, "user": "52ecb1efe4b0705949c44454"}, {"code": "(fn [a]\n  (loop [resultado []\n         lista a]\n    (if (empty? lista)\n      resultado\n      (let [v (first lista)]\n        (recur (conj resultado v v) (rest lista))))))", "problem": 32, "user": "52bdd135e4b07a9af579230a"}, {"code": "#(mapcat list % %)", "problem": 32, "user": "52e75667e4b09f7907dd1485"}, {"code": "#(interleave % %)", "problem": 32, "user": "50b79c5fe4b0cf3e51c3046c"}, {"code": "#(reduce (fn [x y] (concat x [y y])) [] %)", "problem": 32, "user": "52606318e4b03e8d9a4a7036"}, {"code": "#(interleave % %)", "problem": 32, "user": "51f81925e4b09be9c177e526"}, {"code": "(fn [x] (reverse (reduce #(cons %2 (cons %2 %1)) '() x)))", "problem": 32, "user": "52d1e364e4b0d9f9285948e7"}, {"code": "#(mapcat (fn [x] (vector x x)) %)", "problem": 32, "user": "52efd3d9e4b05e3f0be25ed4"}, {"code": "#(interleave % %)", "problem": 32, "user": "51f2b8f1e4b0210f90e74556"}, {"code": "#(loop [in % out []]\n   (if (empty? in)\n     out\n     (recur (rest in) (concat out [(first in) (first in)]))))", "problem": 32, "user": "52f07ccee4b05e3f0be25edf"}, {"code": "(fn [xs]\n  (reduce concat (for [x xs] [x x])))", "problem": 32, "user": "52d660eae4b09f7907dd1356"}, {"code": "mapcat (fn [x]\n        (repeat 2 x))", "problem": 32, "user": "52f01bfbe4b05e3f0be25ed9"}, {"code": "#(interleave % %)", "problem": 32, "user": "52d7f9a8e4b09f7907dd1381"}, {"code": "(fn duplicate [s]\n  (if (empty? s)\n    s\n    (cons (first s) (cons (first s) (duplicate (rest s))))))", "problem": 32, "user": "52ec1dfbe4b0705949c4444b"}, {"code": "(fn dup[[x & xs]] (if (empty? xs) [x x] (cons x (cons x (dup xs)))))", "problem": 32, "user": "52f10094e4b05e3f0be25ee8"}, {"code": "#(apply concat (for [x %] (list x x)))", "problem": 32, "user": "52570aeae4b0541d1855ba42"}, {"code": "(fn [x] (loop [args x result []] (if (seq args) (recur (rest args) (conj (conj result (first args)) (first args))) result)))", "problem": 32, "user": "52d6590ee4b09f7907dd1352"}, {"code": "(fn [lst] (reverse (reduce #(cons %2 (cons %2 %1)) '() lst)))", "problem": 32, "user": "51bd255ce4b0df1216cefd94"}, {"code": "(fn duplicate-a-sequence3 [coll] (if (empty? coll) \n                                     '() \n                                    (let [f (first coll)] (conj (duplicate-a-sequence3 (rest coll)) f f))))", "problem": 32, "user": "52c00e4fe4b07a9af5792342"}, {"code": "#(mapcat (fn [a b] [a b]) % %)", "problem": 32, "user": "52f3ee17e4b05e3f0be25f19"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "52f1bc81e4b05e3f0be25eef"}, {"code": "(fn [x] (interleave x x))", "problem": 32, "user": "52a5a8ebe4b0c58976d9abed"}, {"code": "#(interleave % %)", "problem": 32, "user": "52f3f536e4b05e3f0be25f1a"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "52bacfa8e4b07a9af57922d6"}, {"code": "(fn [coll] (mapcat #(conj (empty coll) %1 %1) coll))", "problem": 32, "user": "52f69565e4b047fd55836fb9"}, {"code": "(fn [coll]\n  (mapcat (fn [x] [x x]) coll))", "problem": 32, "user": "51ab4082e4b04e3dc0c27b31"}, {"code": "#(loop [data %1, res []] (cond (not (seq data)) res\n\t\t\t\t     :else (recur (rest data) (into res [(first data) (first data)]))))", "problem": 32, "user": "52f5eefbe4b09b582c12c9cb"}, {"code": "(fn [xs]\n    (reduce #(concat %1 [%2 %2]) [] xs))", "problem": 32, "user": "4feaa579e4b0140c20fb9c0b"}, {"code": "reduce #(conj %1 %2 %2)  []", "problem": 32, "user": "52f4fae4e4b05e3f0be25f27"}, {"code": "(fn [l] (mapcat (fn [elem] [elem elem]) l))", "problem": 32, "user": "4fe49706e4b0e8f79898feb7"}, {"code": "#(apply concat (map list % %))", "problem": 32, "user": "4ef9c8f9535dced4c769f26b"}, {"code": "(fn [xs]\n  (reduce concat (map #(list % %) xs)))", "problem": 32, "user": "51834acde4b028ec5fd2f29a"}, {"code": "(fn [c] (reduce #(conj %1 %2 %2) [] c))", "problem": 32, "user": "529dfc6de4b04e0c58e87b8a"}, {"code": "#(sort (apply conj % %))", "problem": 32, "user": "52e161e8e4b09f7907dd1420"}, {"code": "(fn [x] (reduce concat (map #(list % %) x)))", "problem": 32, "user": "52f5f8b4e4b09b582c12c9cc"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "52f882c4e4b047fd55836fd1"}, {"code": "mapcat #(vector %1 %1)", "problem": 32, "user": "52f8f4d1e4b047fd55836fde"}, {"code": "(fn f32 [a]\n  (apply concat (map #(list % %) a)))", "problem": 32, "user": "52c08c59e4b07a9af5792351"}, {"code": "#(reduce concat (map (partial repeat 2) %))", "problem": 32, "user": "52f89125e4b047fd55836fd4"}, {"code": "(fn [xs]\n  (mapcat #(cons % (cons % '())) xs))", "problem": 32, "user": "52ce5056e4b07d0d72b2738f"}, {"code": "reduce (fn dup [current-list item] (conj current-list item item)) []", "problem": 32, "user": "52e980b3e4b09f7907dd14af"}, {"code": "(fn [y] (apply concat (map (fn [x] (list x x)) y)))", "problem": 32, "user": "52eee533e4b05e3f0be25ecb"}, {"code": "#(loop [x %\n        y ()]\n   (if (empty? x)\n     (reverse y)\n     (recur (rest x) (conj y (first x) (first x)))))", "problem": 32, "user": "52f685eae4b047fd55836fb8"}, {"code": "(fn [items] (mapcat #(vector % %) items))", "problem": 32, "user": "52efc98de4b05e3f0be25ed2"}, {"code": "#(interleave % %)", "problem": 32, "user": "52d838bee4b09f7907dd138b"}, {"code": "(fn [lista] (reduce concat (map #(repeat 2 %) lista)))", "problem": 32, "user": "52facaeae4b047fd55837000"}, {"code": "(fn [l] (loop [result ()\n               now l]\n          (if (empty? now)\n            (reverse result)\n            (recur (cons (first now) (cons (first now) result))\n                   (rest now)))))", "problem": 32, "user": "52f304b4e4b05e3f0be25f07"}, {"code": "#(interleave % %)", "problem": 32, "user": "52e68e61e4b09f7907dd1479"}, {"code": "#(interleave % %)", "problem": 32, "user": "5176afd2e4b085adf681d889"}, {"code": "(fn [n]\n   (apply concat (map (fn [elem] [elem elem]) n)))", "problem": 32, "user": "529c6995e4b04e0c58e87b61"}, {"code": "(fn wtf [ar]\n  #_=>   #_=> (loop [remaining ar\n  #_=>   #_=> final []]\n  #_=>   #_=> (if (empty? remaining)\n  #_=>   #_=> final\n  #_=>   #_=> (let [[part & watev] remaining\n  #_=> final (conj final part part)]\n  #_=> (recur watev final)))))", "problem": 32, "user": "5279cb1ae4b03e8d9a4a753f"}, {"code": "#(loop [col %1\n        acc []]\n   (cond\n    (empty? col) acc\n    :else (recur (rest col) (conj acc (first col) (first col)))))", "problem": 32, "user": "52fc89b2e4b047fd55837019"}, {"code": "(fn dup [listy]\n  (if (empty? listy)\n    []\n  \t(cons (first listy) (cons (first listy) (dup (rest listy)) ))))", "problem": 32, "user": "51b89503e4b050a1176cd69a"}, {"code": "(fn[a](sort(concat a a)))", "problem": 32, "user": "52fd8de1e4b047fd5583702e"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "52fb64b7e4b047fd55837009"}, {"code": "(fn double [x] (->> x(reduce #(conj %1 %2 %2) [])))", "problem": 32, "user": "52d96f7ce4b09f7907dd13a8"}, {"code": "(fn [x] (for [i x j '(1 2)] i))", "problem": 32, "user": "52f9ce6de4b047fd55836ff0"}, {"code": "#(interleave % %)", "problem": 32, "user": "52fb903ee4b047fd5583700b"}, {"code": "(fn ! [x]\n  (if (empty? x)\n    '()\n    (let [y (first x) z (! (rest x))]\n      (concat [y y] z))))", "problem": 32, "user": "52faec2ee4b047fd55837004"}, {"code": "mapcat #(vector % %)", "problem": 32, "user": "5300158ae4b0d8b024fd370f"}, {"code": "#(mapcat (fn [x] (list x x)) % )", "problem": 32, "user": "52d24f60e4b099d49816f0a8"}, {"code": "(fn [seq] (reduce #(conj %1 %2 %2) [] seq))", "problem": 32, "user": "5234f716e4b05e80434a505f"}, {"code": "#(reduce (fn [a b] (conj a b b)) [] %)", "problem": 32, "user": "52f381f3e4b05e3f0be25f10"}, {"code": "#(apply concat (map (fn [x] [x x]) %))", "problem": 32, "user": "52fcfeeee4b047fd55837027"}, {"code": "#(reduce concat (map list %  %))", "problem": 32, "user": "5300aa1de4b0d8b024fd3710"}, {"code": "(fn [x] (interleave x x))", "problem": 32, "user": "5300f68de4b0d8b024fd3714"}, {"code": "(fn dup-seq [s]\n  (#(reverse (reduce (fn [a x] (conj (conj a x) x)) () s))))", "problem": 32, "user": "5300c383e4b0d8b024fd3712"}, {"code": "mapcat #(repeat 2 %)", "problem": 32, "user": "517a9cbae4b01aacecbecbf0"}, {"code": "(fn my-duplicate\n  [input]\n  (mapcat #(vector % %) input))", "problem": 32, "user": "5300b750e4b0d8b024fd3711"}, {"code": "#(reduce (fn [lst x] (concat lst [x x])) [] %)", "problem": 32, "user": "52fa4f48e4b047fd55836ff7"}, {"code": "#(interleave % %)", "problem": 32, "user": "52eb400ee4b0705949c4443b"}, {"code": "(fn dupps [lst]\n   (cond (empty? lst) ()\n         :else (cons (first lst)\n                     (cons (first lst)\n                           (dupps (rest lst))))))", "problem": 32, "user": "52fe3a9de4b047fd55837039"}, {"code": "(fn [s] (reduce #(conj %1 %2 %2) [] s))", "problem": 32, "user": "5302bb37e4b0d8b024fd3734"}, {"code": "reduce #(concat % (repeat 2 %2)) '()", "problem": 32, "user": "512587ade4b05d10e3e395fb"}, {"code": "(fn [xs]\n  (apply concat (map #(list % %) xs))\n  )", "problem": 32, "user": "4faf897be4b081705acca257"}, {"code": "#(sort (clojure.set/union % %))", "problem": 32, "user": "52dbfe84e4b09f7907dd13c9"}, {"code": "(fn[coll] (reverse (reduce #(cons %2 (cons %2 %1)) '() coll)))", "problem": 32, "user": "518c1079e4b0f028e99addf8"}, {"code": "#(reduce (fn [accum x]\n          (conj (conj accum x) x))\n        [] %)", "problem": 32, "user": "52fbc44be4b047fd55837010"}, {"code": "mapcat (fn [x] [x x])", "problem": 32, "user": "52fff1a8e4b0d8b024fd370d"}, {"code": "(fn duper [i]\n  (if (seq i) \n    (concat [(first i) (first i)] (duper (rest i)))\n    i))", "problem": 32, "user": "52ffb7f2e4b0d8b024fd370b"}, {"code": "reduce (fn [acc, i] \n         (concat acc [i i])) '()", "problem": 32, "user": "52d2e2a9e4b099d49816f0b8"}, {"code": "mapcat #(cons % (list %))", "problem": 32, "user": "5301157ae4b0d8b024fd3717"}, {"code": "#(apply concat (for [x %] [x x]))", "problem": 32, "user": "4f48f587e4b0d56e7bb92be2"}, {"code": "(fn[x](reverse (reduce #(cons %2 (cons %2 %)) '() x)))", "problem": 32, "user": "52f818a6e4b047fd55836fcc"}, {"code": "#(reduce (fn [s i] (conj (conj s i) i)) [] %1)", "problem": 32, "user": "53029281e4b0d8b024fd372e"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "530578ede4b0d8b024fd3760"}, {"code": "(fn[x](apply concat ((fn[x]( for[some x] [some some])) x) ))", "problem": 32, "user": "5302d79ce4b0d8b024fd3736"}, {"code": "mapcat #(repeat 2 %)", "problem": 32, "user": "52f53589e4b05e3f0be25f2c"}, {"code": "#(interleave % %)", "problem": 32, "user": "5307e4ece4b02e82168697a9"}, {"code": "(fn [x] (interleave x x))", "problem": 32, "user": "530733b7e4b02e82168697a0"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "52fafd5ce4b047fd55837006"}, {"code": "(fn [x & duped]\n  (if (empty? x) (reverse duped)\n    (recur (rest x) (cons (first x) (cons (first x) duped)))))", "problem": 32, "user": "5306e4b4e4b02e821686979d"}, {"code": "(fn [s]\n  (reduce #(conj %1 %2 %2) [] s))", "problem": 32, "user": "53070615e4b02e821686979e"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "510c01bae4b078ea7192110a"}, {"code": ";(fn cnt[ sss ]\n;   (mapcat #(cons %1 [%1]) sss))\n#(apply interleave (repeat 2 %))", "problem": 32, "user": "52f426fce4b05e3f0be25f1e"}, {"code": "(fn [x]\n  (reverse (reduce #(conj (conj % %2) %2) \n           () x)))", "problem": 32, "user": "4ff505c8e4b0678c553fc364"}, {"code": "(fn [seq] \n  (letfn [(dc [tseq acc] (if (empty? tseq) \n                                  acc\n                                  (dc (rest tseq) (conj (conj acc (first tseq)) (first tseq))))          \n            )]\n    (dc seq [])\n    ))", "problem": 32, "user": "5226f9b8e4b04e78ff2e199b"}, {"code": "(fn [x]\n  ((fn dup [acc x]\n    (if (empty? x)\n      acc\n      (recur (concat acc (list (first x) (first x))) (rest x))\n    )\n  ) [] x)\n)", "problem": 32, "user": "5303a027e4b0d8b024fd3745"}, {"code": "#(mapcat (partial repeat 2) %)", "problem": 32, "user": "530caf86e4b02e82168697df"}, {"code": "#(interleave % %)", "problem": 32, "user": "524ad140e4b09eba1c0223a9"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "52c45ac8e4b0c2d177d620d9"}, {"code": "mapcat #(vector % %)", "problem": 32, "user": "505d1b01e4b0e6aca564be04"}, {"code": "(fn [sq]\n  (loop\n    [t []\n     s sq]\n    (let [f (first s)]\n      (if (= nil f)\n        t\n        (recur\n         (conj (conj t f) f)\n         (rest s))))))", "problem": 32, "user": "530d85dee4b08068f379eca8"}, {"code": "#(mapcat (fn [k] (take 2 (cycle [k]))) %)", "problem": 32, "user": "51583ee4e4b0a069fd272c72"}, {"code": "#(interleave % %)", "problem": 32, "user": "530e9729e4b08068f379ecbc"}, {"code": "(fn [lst] (mapcat #(into [] [% %]) lst))", "problem": 32, "user": "52f7ac81e4b047fd55836fc6"}, {"code": "(fn [n] (apply concat (map #(repeat 2 %1) n)))", "problem": 32, "user": "52ecd34ee4b0705949c44457"}, {"code": "(fn f [l]\n  (if (empty? l)\n    '()\n    (let [x (first l)]\n      (cons x (cons x (f (rest l)))))))", "problem": 32, "user": "521b73f5e4b0c4ef0be83043"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "530e74c9e4b08068f379ecb9"}, {"code": "mapcat #(vector % %)", "problem": 32, "user": "52f3af46e4b05e3f0be25f14"}, {"code": "(fn [l] (reduce #(conj % %2 %2) [] l))", "problem": 32, "user": "53034738e4b0d8b024fd373e"}, {"code": "(fn\n[lst]\n  (reverse (reduce\n    (fn\n      [l element]\n      (conj (conj l element) element)\n    )\n    '()\n    lst\n  ))\n)", "problem": 32, "user": "530c462ae4b02e82168697d9"}, {"code": "(fn[s](->> s(map #(conj [%]%))(mapcat identity)))", "problem": 32, "user": "530cb5b8e4b02e82168697e0"}, {"code": "#(interleave % %)", "problem": 32, "user": "5302b580e4b0d8b024fd3733"}, {"code": "(fn [coll]\n  (apply concat (map #(repeat 2 %) coll)))", "problem": 32, "user": "51e7abeae4b0a3e081b8cbee"}, {"code": "#(interleave % %)", "problem": 32, "user": "530e5469e4b08068f379ecb7"}, {"code": "(fn [x] (reduce concat (map (partial repeat 2) x)))", "problem": 32, "user": "530ccb1de4b08068f379ec99"}, {"code": "#(reduce (fn [x y] (concat x [y y])) '() %)", "problem": 32, "user": "52ee0de4e4b05e3f0be25ec1"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "5301a13ae4b0d8b024fd371e"}, {"code": "(fn dup [x]\n  (if (empty? x)\n    x\n    (concat [(first x) (first x)] (dup (rest x)))))", "problem": 32, "user": "53110f32e4b08068f379ece4"}, {"code": "(fn duplicate [x] (if (empty? x) [] (concat (list (first x)) (list (first x)) (duplicate (rest x)))))", "problem": 32, "user": "52e17e66e4b09f7907dd1423"}, {"code": "(fn duplicate-items [s]\n  (when (seq s)\n    (concat (list (first s) (first s)) (duplicate-items (rest s)))))", "problem": 32, "user": "5310e7aee4b08068f379ecdc"}, {"code": "#(mapcat (fn [x] (list x x)) %)", "problem": 32, "user": "4eed26af535d93acb0a668bb"}, {"code": "#(interleave % %)", "problem": 32, "user": "53153466e4b08068f379ed23"}, {"code": "(fn [x] (mapcat identity (map (fn [x] `(~x ~x)) x)))", "problem": 32, "user": "531490bde4b08068f379ed17"}, {"code": "(fn [s] \n  (loop [s1 (vec s) s2 []]\n    (if (empty? s1)\n      (apply list s2)\n      (recur (rest s1) (conj s2 (first s1) (first s1)))\n    )))", "problem": 32, "user": "53069e16e4b02e8216869798"}, {"code": "#(interleave % %)", "problem": 32, "user": "5313a2bfe4b08068f379ed0b"}, {"code": "(fn [l] (loop [ist l result []] (if (empty? ist) result (recur (rest ist) (conj result (first ist) (first ist))))))", "problem": 32, "user": "5314318ee4b08068f379ed13"}, {"code": "#(mapcat (fn [x] (list x x)) %)", "problem": 32, "user": "5315a4f0e4b08068f379ed2e"}, {"code": "reduce (fn [x y] (concat x [y y])) []", "problem": 32, "user": "4f320253e4b0d6649770a08d"}, {"code": "#(interleave % %)", "problem": 32, "user": "511b900ae4b00c2a1fa7ff6a"}, {"code": "(fn [a] (interleave a a))", "problem": 32, "user": "5149c2f1e4b0829bd132edb0"}, {"code": "#(interleave % %)", "problem": 32, "user": "531488f3e4b08068f379ed16"}, {"code": "(fn [xs] (interleave xs xs))", "problem": 32, "user": "53162640e4b08068f379ed40"}, {"code": "mapcat #(vector % %)", "problem": 32, "user": "523acf7be4b0aa37f082ed90"}, {"code": "(fn dupl [coll]\n    (interleave (seq coll) (seq coll))\n  )", "problem": 32, "user": "531843c1e4b08068f379ed6c"}, {"code": "mapcat (fn [x] (list x x))", "problem": 32, "user": "507330e6e4b0e3170b5a8698"}, {"code": "(fn [s] (mapcat #(do [% %]) s))", "problem": 32, "user": "512700c4e4b083bb8f88cf14"}, {"code": "(fn dup [[a & b]]\n  (if (nil? a)\n    '()\n    (conj (dup b) a  a) ))", "problem": 32, "user": "53120cb5e4b08068f379ecf0"}, {"code": "(fn [s]\n  (apply concat (map #(list % %) s)))", "problem": 32, "user": "53134005e4b08068f379ed07"}, {"code": "(fn [l]\n  (reduce\n   (fn [l i]\n       (conj (conj l i) i) ) [] l ) )", "problem": 32, "user": "530c15f7e4b02e82168697d6"}, {"code": "(fn duplicate [sq]\n  (if (empty? sq)\n  \tsq\n  \t(let [fst (first sq)\n    \t  tail (next sq)]\n      (cons fst\n            (cons fst (duplicate tail)))\n      )\n    ))", "problem": 32, "user": "5315ec83e4b08068f379ed39"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "530394b4e4b0d8b024fd3743"}, {"code": "(fn [l] \n  (reduce into [] (map  #(repeat 2 %) l)))", "problem": 32, "user": "531c7f0de4b08068f379eda4"}, {"code": "(fn [lst]\n  (reduce #(cons %2 (cons %2 %1))\n          nil\n          (reverse lst)))", "problem": 32, "user": "531bad96e4b08068f379ed93"}, {"code": "#(interleave % %)", "problem": 32, "user": "52be0263e4b07a9af579230e"}, {"code": "(fn [l] (interleave l l))", "problem": 32, "user": "52265e41e4b04e78ff2e1981"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "53023bf3e4b0d8b024fd3726"}, {"code": "#(interleave % %)", "problem": 32, "user": "531a3914e4b08068f379ed88"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "4ff4bed0e4b0678c553fc35f"}, {"code": "#(reduce (fn[acc x] (conj acc x x)) [] %)", "problem": 32, "user": "531bfb69e4b08068f379ed97"}, {"code": "reduce (fn [l,i] (conj l i i)) []", "problem": 32, "user": "531d53dbe4b08068f379edae"}, {"code": "(fn [coll] (reduce #(conj (conj %1 %2) %2) [] coll))", "problem": 32, "user": "5311b367e4b08068f379eced"}, {"code": "(fn [coll]\n  (reverse\n   (reduce #(cons %2 (cons %2 %1)) '() coll)))", "problem": 32, "user": "52d2f457e4b099d49816f0ba"}, {"code": "(fn [s] (reduce (fn [acc x] (conj acc x x)) [] s))", "problem": 32, "user": "531ba143e4b08068f379ed91"}, {"code": "#(mapcat list % %)", "problem": 32, "user": "52e25beee4b09f7907dd1433"}, {"code": "(fn [x]\n  (mapcat (fn [y] \n     (list y y) ) \n  x )\n)", "problem": 32, "user": "52fba50ce4b047fd5583700d"}, {"code": "#(interleave % %)", "problem": 32, "user": "531dfaf5e4b08068f379edb3"}, {"code": "#(interleave % %)", "problem": 32, "user": "531c0619e4b08068f379ed98"}, {"code": "#(mapcat (partial repeat 2) %)", "problem": 32, "user": "53121863e4b08068f379ecf3"}, {"code": "#(apply concat (for [x %]  [x x]))", "problem": 32, "user": "52e683c0e4b09f7907dd1477"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "531308c1e4b08068f379ed04"}, {"code": "(fn [x]\n  (loop [path (seq x)\n         result []]\n    (if-let [p (first path)]\n      (recur (next path) (concat result [(first path) (first path)]))\n      result)))", "problem": 32, "user": "531e5c81e4b08068f379edba"}, {"code": "#(interleave  % %)", "problem": 32, "user": "531f1e63e4b08068f379edc2"}, {"code": "(fn [x] (apply concat (map #(vector % %) x)))", "problem": 32, "user": "531f7a2de4b08068f379edc6"}, {"code": "(fn [coll] (interleave coll coll))", "problem": 32, "user": "532347dde4b09d4e7a9b54cc"}, {"code": "(fn dup [x]\n  (loop [x x ret '()]\n    (if (empty? x) ret\n      (recur (take (dec (count x)) x) (cons (last x) (cons (last x) ret))))))", "problem": 32, "user": "531c57ace4b08068f379ed9b"}, {"code": "#(mapcat (fn [x] [x x]) %)", "problem": 32, "user": "5323a414e4b09d4e7a9b54d1"}, {"code": "(fn [xs] (apply concat (map #(repeat 2 %) xs)))", "problem": 32, "user": "4fd5418ee4b0d4de60cee372"}, {"code": "(fn [data] (mapcat #(list % %) data))", "problem": 32, "user": "532418f3e4b09d4e7a9b54d8"}, {"code": "(fn [s] (interleave s s))", "problem": 32, "user": "52ccc2bde4b07d0d72b27371"}, {"code": "(fn\n  [coll]\n  (apply concat (map #(take 2 (repeat %)) coll)))", "problem": 32, "user": "52f32c24e4b05e3f0be25f0d"}, {"code": "reduce (fn [acc val]\n         (conj (conj acc val) val))\n       []", "problem": 32, "user": "518ee4f9e4b0cd6ff51676a5"}, {"code": "(fn ft\n  ([x] (ft '() (reverse x)))\n  ([col x]\n     (if (empty? x) col\n         (recur (conj col (first x) (first x)) (rest x)) )\n     )\n  )", "problem": 32, "user": "5302ac7fe4b0d8b024fd3731"}, {"code": "(fn [coll] (reduce #(conj %1 %2 %2) [] coll))", "problem": 32, "user": "5326c5f7e4b09d4e7a9b54f2"}, {"code": "(fn duplicate\n  [xs]\n  (lazy-seq (when (seq xs) (cons (first xs) (cons (first xs) (duplicate (rest xs)))))))", "problem": 32, "user": "53028354e4b0d8b024fd372b"}, {"code": "(fn [v] (reduce #(conj %1 %2 %2) [] v) )", "problem": 32, "user": "531f0a26e4b08068f379edbf"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "51bdebece4b0ff155d51d2b7"}, {"code": "#(apply concat (for [n %] [n n]))", "problem": 32, "user": "53244c9de4b09d4e7a9b54db"}, {"code": "(fn dupseq [sofar x]\n  (if (empty? x)\n    sofar\n    (recur\n     (conj (conj sofar (first x)) (first x))\n     (rest x)\n    )\n   )\n) []", "problem": 32, "user": "531cd41ee4b08068f379eda9"}, {"code": "#(interleave % %1)", "problem": 32, "user": "532631e1e4b09d4e7a9b54ea"}, {"code": "(fn [coll] (mapcat #(repeat 2 %) coll))", "problem": 32, "user": "5328febee4b09d4e7a9b550d"}, {"code": "#(interleave % %)", "problem": 32, "user": "532ab0bde4b09d4e7a9b5527"}, {"code": "#(interleave % %)", "problem": 32, "user": "52761edae4b03e8d9a4a74d4"}, {"code": "#(interleave % %)", "problem": 32, "user": "532afdc5e4b09d4e7a9b552e"}, {"code": "(fn [x] (apply concat (map #(repeat 2 %) x)))", "problem": 32, "user": "53224d45e4b09d4e7a9b54c0"}, {"code": "(fn dup [xs]\n  (if (empty? xs)\n    xs\n    (let [f (first xs)]\n      (cons f (cons f (dup (rest xs)))))))", "problem": 32, "user": "532b9075e4b09d4e7a9b5533"}, {"code": "(fn [s] (apply concat (map #(repeat 2 %) s)))", "problem": 32, "user": "52d42021e4b09f7907dd132a"}, {"code": "(fn [xs]\n  (loop [xs xs ys '()]\n    (if (empty? xs)\n      ys\n      (recur (butlast xs) (list* (last xs) (last xs) ys)))))", "problem": 32, "user": "4dbe04b2535d020aff1edf56"}, {"code": "(fn\n  [coll]\n  (reduce #(conj %1 %2 %2) [] coll))", "problem": 32, "user": "52ba447ee4b07a9af57922ce"}, {"code": "#(interleave % %)", "problem": 32, "user": "5004034ce4b0678c553fc447"}, {"code": "(fn [coll]\n  (reduce concat (map #(take 2 (repeat %)) coll)))", "problem": 32, "user": "532b930be4b09d4e7a9b5534"}, {"code": "(fn [x]\n  (let [[k & m] x]\n    (if (coll? k)\n      (sort (into (into [] (vec (repeat 2 k))) (vec (repeat 2 (into [] (flatten m))))))\n      (sort (flatten (vector (repeat 2 k) (repeat 2 m)))))))", "problem": 32, "user": "531016d0e4b08068f379ecd1"}, {"code": "#(apply concat (map (partial repeat 2) %))", "problem": 32, "user": "532ecd44e4b019098a6f8b49"}, {"code": "(fn myfun [v]\n  (cond (empty? v) '()\n     :else (conj (conj (myfun (rest v)) (first v)) (first v))\n  )\n)", "problem": 32, "user": "531902b1e4b08068f379ed77"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "52facb9de4b047fd55837002"}, {"code": "(fn [q] (interleave q q))", "problem": 32, "user": "532e0b20e4b019098a6f8b45"}, {"code": "#(reduce into '() (map (fn [x] [x x]) (reverse %)))", "problem": 32, "user": "532686e6e4b09d4e7a9b54ef"}, {"code": "(fn dup [x] (if (seq x) (concat [(first x) (first x)] (dup (rest x))) '()))", "problem": 32, "user": "532c0507e4b09d4e7a9b553c"}, {"code": "#(interleave % %)", "problem": 32, "user": "533056a4e4b019098a6f8b5b"}, {"code": "(fn dup [seq]\n        (if (empty? seq)\n            ()\n          (let [f (list (first seq))]\n            (concat f f (dup (rest seq))))))", "problem": 32, "user": "52aa524fe4b0c58976d9ac64"}, {"code": "(fn duplicate [x]\n     \"Adds a copy of each element of the sequence.\"\n     (interleave x x))", "problem": 32, "user": "532727bae4b09d4e7a9b54fa"}, {"code": "(fn [col] (interleave col col))", "problem": 32, "user": "52fc34cee4b047fd55837015"}, {"code": "#(interleave % %)", "problem": 32, "user": "53315c78e4b019098a6f8b67"}, {"code": "(fn dupl [[f & r]]\n    (if (nil? f) '()\n        (cons f (cons f (dupl r)))))", "problem": 32, "user": "53300924e4b019098a6f8b55"}, {"code": "(fn [coll]\n  (mapcat\n   #(list % %)\n   coll))", "problem": 32, "user": "52d5bee0e4b09f7907dd1344"}, {"code": "mapcat (fn [x] (list x x))", "problem": 32, "user": "532bce35e4b09d4e7a9b5536"}, {"code": "(fn [xs]\n  (reduce #(conj %1 %2 %2) [] xs))", "problem": 32, "user": "533018b2e4b019098a6f8b56"}, {"code": "(fn [seq]\n     (reverse (reduce (fn [su y] (conj (conj su y) y )) nil seq)))", "problem": 32, "user": "51f5539fe4b0abb92f97f9cd"}, {"code": "#(reverse (reduce (fn [xs x] (conj xs x x)) () %))", "problem": 32, "user": "525ab6cfe4b0cb4875a45cf9"}, {"code": "(fn replicate-seq [coll]\n  (mapcat #(repeat 2 %) coll))", "problem": 32, "user": "5322d364e4b09d4e7a9b54c6"}, {"code": "(fn [col](reduce #(-> (conj %1 %2)(conj %2))[]col))", "problem": 32, "user": "5318f85ae4b08068f379ed76"}, {"code": "(fn [x]\n  (interleave x x))", "problem": 32, "user": "53322cece4b019098a6f8b73"}, {"code": "mapcat #(vector % %)", "problem": 32, "user": "53333e7be4b019098a6f8b7e"}, {"code": "reduce (fn [acc el] (conj acc el el)) []", "problem": 32, "user": "531792d9e4b08068f379ed5e"}, {"code": "(fn [x] (mapcat (fn [y] [y y]) x))", "problem": 32, "user": "532db3e7e4b019098a6f8b3d"}, {"code": "(fn\n  [seq]\n  (apply concat (map (fn [a] [a a]) seq)))", "problem": 32, "user": "53334cb2e4b019098a6f8b81"}, {"code": "(fn [sq]\n  (loop [r [] s sq]\n    (if (first s)\n      (recur (cons (first s) (cons (first s) r)) (next s))\n      (reverse r))))", "problem": 32, "user": "53219cece4b09d4e7a9b54b7"}, {"code": "#(interleave % %)", "problem": 32, "user": "532cb6bbe4b019098a6f8b33"}, {"code": "(fn [coll]\n  (apply concat (map #(repeat 2 %) coll))\n  )", "problem": 32, "user": "526698c9e4b03e8d9a4a7144"}, {"code": "(fn [col]\n  (loop [c col\n         r '()]\n    (if (empty? c)\n      r\n      (recur (pop c) (conj r (peek c) (peek c))))))", "problem": 32, "user": "5336a339e4b0e30313ee6c7d"}, {"code": ";; #(reverse (reduce (fn [m x] (conj m x x)) () %))\n;; #(mapcat (fn [x] (list x x)) %)\nmapcat (fn [x] (list x x))", "problem": 32, "user": "533696b9e4b0e30313ee6c7c"}, {"code": "#(loop [myseq %\n        result []]\n   (if (empty? myseq)\n     result\n     (recur (rest myseq) (conj result (first myseq) (first myseq)))\n   ))", "problem": 32, "user": "531d34cfe4b08068f379edac"}, {"code": "(fn [coll]\n  (apply concat\n    (map (partial repeat 2) coll)))", "problem": 32, "user": "5336ca32e4b0e30313ee6c80"}, {"code": "mapcat #(vector % %)", "problem": 32, "user": "52474133e4b05ef8e38e635e"}, {"code": "(fn [sq] (apply concat (map (fn [i] [i i]) sq)))", "problem": 32, "user": "4eadc217535d7eef30807321"}, {"code": "(fn [coll](mapcat #(repeat 2 %) coll))", "problem": 32, "user": "527c4071e4b0757a1b17135a"}, {"code": "(fn doubler [sq] (mapcat #(seq [% %]) sq))", "problem": 32, "user": "4fc4f347e4b081705acca35d"}, {"code": "(fn dup [x] (if (seq x) (concat (take 1 x) (take 1 x) (dup (rest x)))))", "problem": 32, "user": "53388e2de4b0e30313ee6c9c"}, {"code": "(fn [xs] (mapcat (fn [x] [x x]) xs))", "problem": 32, "user": "532b43c3e4b09d4e7a9b5531"}, {"code": "(fn ! [a-seq]\n  (if (empty? a-seq)\n    '()\n    (conj (! (rest a-seq)) (first a-seq) (first a-seq))))", "problem": 32, "user": "5235493ee4b05e80434a5064"}, {"code": "#(interleave % %)", "problem": 32, "user": "520fff3ce4b080a8d9b9d633"}, {"code": "(fn [sequens] (reverse (reduce #(cons %2 (cons %2 %1)) '() sequens)))", "problem": 32, "user": "53340d3ce4b019098a6f8b89"}, {"code": "#(reduce concat (map (fn [x] (list x x)) %))", "problem": 32, "user": "53350264e4b0656e627bfd73"}, {"code": "#(interleave % %)", "problem": 32, "user": "53377725e4b0e30313ee6c89"}, {"code": "#(interleave % %)", "problem": 32, "user": "5334d4f2e4b0656e627bfd71"}, {"code": "(fn [x] (reduce #(concat %1 %2) (map #(repeat 2 %) x)))", "problem": 32, "user": "514a13cee4b0829bd132edb4"}, {"code": "#(interleave % %)", "problem": 32, "user": "506d5e4ce4b0a302964c5493"}, {"code": "(partial mapcat #(take 2 (repeat %)))", "problem": 32, "user": "533ab9abe4b0e30313ee6cbf"}, {"code": "(fn [x] (reduce #(conj % %2 %2) [] x))", "problem": 32, "user": "530262c8e4b0d8b024fd3728"}, {"code": "(fn [col] (reduce concat ((fn [col] (map #(repeat 2 %) col)) col)))", "problem": 32, "user": "5339af7de4b0e30313ee6cab"}, {"code": "#(mapcat list % %)", "problem": 32, "user": "4fceda40e4b03432b189f407"}, {"code": "#(interleave % %)", "problem": 32, "user": "5339c08ee4b0e30313ee6cad"}, {"code": "reduce #(concat % [%2 %2]) '()", "problem": 32, "user": "53396c03e4b0e30313ee6ca7"}, {"code": "(fn dup [x]\n  (if (empty? x)\n    '()\n    (conj (dup (rest x)) (first x) (first x))))", "problem": 32, "user": "533431e4e4b019098a6f8b8d"}, {"code": "#(mapcat (fn [e] [e e]) %)", "problem": 32, "user": "5318594ee4b08068f379ed6d"}, {"code": "#(interleave % %)", "problem": 32, "user": "5281a445e4b0757a1b17143a"}, {"code": "#(apply concat (for [x %] [x x]))", "problem": 32, "user": "533a7d56e4b0e30313ee6cbc"}, {"code": "#(reduce (fn [x y] (conj x y y)) [] % )", "problem": 32, "user": "52fe869be4b047fd5583703f"}, {"code": "(fn [l] \n  (loop [l1 l\n         res '()]\n    (if (nil? (first l1)) res\n      (recur (rest l1) (concat res [(first l1) (first l1)])))))", "problem": 32, "user": "533ee560e4b085b17e897d98"}, {"code": "#(interleave % %)", "problem": 32, "user": "523ea111e4b057c4b7cd0a65"}, {"code": "(fn [coll] (reduce #(conj %1 %2 %2) [] coll))", "problem": 32, "user": "533b1dc4e4b0e30313ee6cc7"}, {"code": "#(reduce concat (for [l %] (repeat 2 l)))", "problem": 32, "user": "531619c1e4b08068f379ed3d"}, {"code": "#(interleave % %)", "problem": 32, "user": "5339cb07e4b0e30313ee6caf"}, {"code": "(fn [l] (apply concat (map #(list % %) l)))", "problem": 32, "user": "51da631be4b02ceefd947766"}, {"code": "#(mapcat list % %)", "problem": 32, "user": "53409368e4b085b17e897daf"}, {"code": "(fn [input]\n  (loop [s input a '()]\n    (if (empty? s)\n      (reverse a)\n      (recur (rest s) (cons (first s) (cons (first s) a))))))", "problem": 32, "user": "5341b141e4b00652c8746ecf"}, {"code": "(fn [x] (mapcat #(repeat 2 %) x))", "problem": 32, "user": "533f09e1e4b085b17e897d9a"}, {"code": "#(interleave % %)", "problem": 32, "user": "53307da1e4b019098a6f8b5e"}, {"code": "(fn [x] (reduce concat (map (fn [y] (list y y)) x)))", "problem": 32, "user": "53410c24e4b00652c8746eca"}, {"code": "#(loop [seq %\n         acc '()]\n    (if (empty? seq)\n      (reverse acc)\n      (let [next (first seq)]\n        (recur (rest seq) (cons next (cons next acc))))))", "problem": 32, "user": "533d2ea5e4b085b17e897d7a"}, {"code": "(fn [x]\n  (mapcat #(repeat 2 %) x))", "problem": 32, "user": "4eddc5f4535d10e5ff6f532c"}, {"code": "#(interleave % %)", "problem": 32, "user": "532a111ee4b09d4e7a9b5520"}, {"code": "(fn [colls] (mapcat #(list % %) colls)  )", "problem": 32, "user": "52a9406de4b0c58976d9ac43"}, {"code": "(fn [s]\n  (loop [r []\n         x s]\n    (if (empty? x)\n      (seq r)\n      (recur (conj r (first x) (first x)) (rest x)))))", "problem": 32, "user": "532df9c5e4b019098a6f8b42"}, {"code": "(\n fn dup [col]\n  (reduce #(conj %1 %2 %2) [] col))", "problem": 32, "user": "5322d370e4b09d4e7a9b54c7"}, {"code": "#(interleave % %)", "problem": 32, "user": "524d90c0e4b0a16e35cf6ded"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "53460d02e4b084c2834f4a39"}, {"code": "(fn [x]\n  (reduce #(conj %1 %2 %2) [] x))", "problem": 32, "user": "53468f6ce4b084c2834f4a3f"}, {"code": "reduce #(conj (conj %1 %2) %2) []", "problem": 32, "user": "5340ee60e4b00652c8746ec9"}, {"code": "(fn [col] (sort (concat col col)))", "problem": 32, "user": "53286389e4b09d4e7a9b5504"}, {"code": "(fn [coll]\n  (interleave coll coll))", "problem": 32, "user": "5346f409e4b084c2834f4a46"}, {"code": "(fn [seq]\n  (mapcat (partial repeat 2) seq))", "problem": 32, "user": "53415755e4b00652c8746ecd"}, {"code": "#(interleave % %)", "problem": 32, "user": "53487737e4b084c2834f4a59"}, {"code": "#(interleave % %)", "problem": 32, "user": "4e705861535d5021c1a89635"}, {"code": "(fn [se]\n  (apply concat (map (fn [x] [x x]) se)))", "problem": 32, "user": "534941d1e4b084c2834f4a60"}, {"code": "(fn f [x] (if (empty? x) x (conj (f (rest x)) (first x) (first x)    ) ))", "problem": 32, "user": "5349ac2be4b084c2834f4a67"}, {"code": "(fn dup [[first & rest]]\n  (if (nil? rest)\n    (cons first (cons first ()))\n    (concat (cons first (cons first ())) (dup rest))\n    )\n  \n  )", "problem": 32, "user": "5349a39de4b084c2834f4a65"}, {"code": "(fn [x]\n  (reduce (fn [acc e]\n            (conj acc e e))\n          [] x))", "problem": 32, "user": "52d6664be4b09f7907dd1359"}, {"code": "#(interleave % %)", "problem": 32, "user": "52a144b0e4b04e0c58e87bd6"}, {"code": "(fn [s] (apply concat (map #(vector % %) s)))", "problem": 32, "user": "53498f88e4b084c2834f4a64"}, {"code": "(fn  [s]\n  (reverse (reduce (fn [res i]\n            (conj  res i i)\n            ) '() (seq s)))\n  )", "problem": 32, "user": "5348236ee4b084c2834f4a54"}, {"code": "(fn [a] (interleave a a))", "problem": 32, "user": "51ab70c3e4b04e3dc0c27b33"}, {"code": "mapcat (fn[x] [x x])", "problem": 32, "user": "52ac2db3e4b0c58976d9ac82"}, {"code": "(fn [a]\n  (reverse\n   (reduce #(cons %2 (cons %2 %1)) '() a)\n   ))", "problem": 32, "user": "4ddb696b535d02782fcbe9fa"}, {"code": "(partial reduce #(concat %1 [%2 %2]) [])", "problem": 32, "user": "534bde26e4b084c2834f4a81"}, {"code": "(fn [seq] (mapcat (partial repeat 2) seq))", "problem": 32, "user": "50fc299ee4b0d10d794c19f2"}, {"code": "#(interleave % %)", "problem": 32, "user": "534bd9c1e4b084c2834f4a80"}, {"code": "(fn  [seq]\n  (loop [s seq\n         res []]\n    (let [res (conj res (first s) (first s))\n          tail (next s)]\n      (if-not tail\n      res\n      (recur tail res)))))", "problem": 32, "user": "516081e7e4b009fba0926e28"}, {"code": "(fn [x]\n  (apply concat (map #(cons %(cons % nil)) x)))", "problem": 32, "user": "5338387de4b0e30313ee6c91"}, {"code": "(fn fun [xs]\n(reduce #(conj %1 %2 %2) [] xs))", "problem": 32, "user": "5349da55e4b084c2834f4a68"}, {"code": "(fn [xs]\n  (mapcat (fn [x] (list x x)) xs))", "problem": 32, "user": "5344fe13e4b084c2834f4a32"}, {"code": "#(reduce (fn [i e] (conj i e e)) [] %)", "problem": 32, "user": "52de249ae4b09f7907dd13ed"}, {"code": "#(reduce concat (for [z %] [z z]))", "problem": 32, "user": "534e9ed4e4b084c2834f4ab8"}, {"code": "(fn [x] (interleave x x)\n  )", "problem": 32, "user": "534c734de4b084c2834f4a93"}, {"code": "(fn [xs] (interleave xs xs))", "problem": 32, "user": "5339c105e4b0e30313ee6cae"}, {"code": "(fn [s] (reverse (reduce #(conj %1 %2 %2) '() s)))", "problem": 32, "user": "534bfc71e4b084c2834f4a88"}, {"code": "#(mapcat (fn [x] (repeat 2 x)) %)", "problem": 32, "user": "534815bde4b084c2834f4a53"}, {"code": "(fn [xs] \n  (mapcat #(repeat 2 %) xs))", "problem": 32, "user": "53504436e4b084c2834f4ad7"}, {"code": "#(interleave % %)", "problem": 32, "user": "534e118ee4b084c2834f4aad"}, {"code": "(fn blah\n  [li]\n  (interleave li li))", "problem": 32, "user": "53383c74e4b0e30313ee6c92"}, {"code": "(fn dupp [x] \n  \t(loop [n (- (count x) 1) y []]\n      (if (>= n 0) \n        (recur (dec n) (cons (nth x n) (cons (nth x n) y)))\n      y)))", "problem": 32, "user": "53504a7de4b084c2834f4ad9"}, {"code": ";reduce #(conj %1 %2 %2) []\n\n#(interleave % %)", "problem": 32, "user": "534ab3f5e4b084c2834f4a6e"}, {"code": "(fn [s] (interleave s s))", "problem": 32, "user": "53512bc6e4b084c2834f4ae1"}, {"code": "#(interleave % %)", "problem": 32, "user": "53500869e4b084c2834f4ad3"}, {"code": "(fn [xx] (let [yy xx] (interleave xx yy)))", "problem": 32, "user": "5325cf91e4b09d4e7a9b54e8"}, {"code": "(fn [x] (interleave x x))", "problem": 32, "user": "5351fbf5e4b084c2834f4aeb"}, {"code": "#(interleave % %)", "problem": 32, "user": "534efe66e4b084c2834f4ac1"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "53513d28e4b084c2834f4ae3"}, {"code": "(fn [l ]\n  (loop [res '() l (reverse l)]\n    (if (empty? l)\n      res\n      (let [n (first l)]\n        (recur (conj res n n) (rest l))))))", "problem": 32, "user": "53527ce8e4b084c2834f4af1"}, {"code": "#(interleave % %)", "problem": 32, "user": "5348cab4e4b084c2834f4a5e"}, {"code": "#(interleave % %)", "problem": 32, "user": "50f10f7be4b06d9538fe211a"}, {"code": "(fn [s] (mapcat #(repeat 2 %) s))", "problem": 32, "user": "4e57afc5535d8a8b8723a288"}, {"code": "#(interleave % %)", "problem": 32, "user": "533a399de4b0e30313ee6cb9"}, {"code": "#(interleave % %)", "problem": 32, "user": "5225271fe4b01819a2de42f9"}, {"code": "#(reduce concat (map (fn [x] (list x x)) %))\n;reduce #(conj %1 %2 %2) []", "problem": 32, "user": "533b9cace4b0e30313ee6cd1"}, {"code": "(fn [col] (interleave col col))", "problem": 32, "user": "5325cef5e4b09d4e7a9b54e7"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "5256c4c1e4b0541d1855ba36"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "5353afa0e4b084c2834f4b03"}, {"code": "(fn [x]\n  (reduce #(into % %2) []\n          (map (fn [j k] (vector j k)) x x)))", "problem": 32, "user": "534e4a29e4b084c2834f4ab0"}, {"code": "#(interleave % %)", "problem": 32, "user": "5338645ee4b0e30313ee6c99"}, {"code": "(fn duplicate [coll]\n  (if (empty? coll)\n    coll\n      (concat [(first coll) (first coll)] (duplicate (rest coll)))\n            ))", "problem": 32, "user": "534bfa81e4b084c2834f4a87"}, {"code": "#(interleave % %)", "problem": 32, "user": "535526a2e4b04ce2eb3ed259"}, {"code": "; (fn [xs] (reduce concat (map #(list % %) xs)))\n\n(fn [xs] (mapcat #(list % %) xs))", "problem": 32, "user": "5312cdaae4b08068f379ed03"}, {"code": "(fn dup [coll]\n  (if (empty? coll)\n    '()\n    (let [f (first coll)]\n      (conj (dup (rest coll)) f f))))", "problem": 32, "user": "5356e04fe4b04ce2eb3ed271"}, {"code": "#(interleave % %)", "problem": 32, "user": "52046600e4b0c283853240c5"}, {"code": "#(mapcat identity (map vector %1 %1))", "problem": 32, "user": "535778dee4b04ce2eb3ed27d"}, {"code": "(fn [xs]\n   (reduce (fn [a b] (conj (conj a b) b)) [] xs)\n  )", "problem": 32, "user": "534d1173e4b084c2834f4a98"}, {"code": "#(interleave % %)", "problem": 32, "user": "5357b241e4b04ce2eb3ed282"}, {"code": "(fn [c] (reverse (reduce #(conj % %2 %2) '() c)))", "problem": 32, "user": "533b36c0e4b0e30313ee6ccb"}, {"code": "#(interleave % %)", "problem": 32, "user": "530b8580e4b02e82168697cc"}, {"code": "(fn [coll] (reduce concat (map #(repeat 2 %) coll)))", "problem": 32, "user": "52dc3bc8e4b09f7907dd13cb"}, {"code": "(fn  [seq]\n    (loop [coll seq\n           accum [] ]\n      (if (empty? coll)\n        accum\n        ( recur (rest coll)(concat accum (vector (first coll)(first coll))) )\n      )\n    )\n  )", "problem": 32, "user": "52dced9de4b09f7907dd13d7"}, {"code": "(fn duplicate [xs]\n  (loop [xs' xs acc '()]\n    (if (empty? xs') (reverse acc)\n        (recur (rest xs') (cons (first xs') (cons (first xs') acc))))))", "problem": 32, "user": "53287dace4b09d4e7a9b5507"}, {"code": "(fn [s] (apply concat (map #(list % %) s)))", "problem": 32, "user": "53597288e4b04ce2eb3ed29c"}, {"code": "#(interleave % %)", "problem": 32, "user": "534dd600e4b084c2834f4aaa"}, {"code": "(fn [c] (sort (concat c c)))", "problem": 32, "user": "51071f2ee4b05b2b4eee748e"}, {"code": "mapcat #(repeat 2 %)", "problem": 32, "user": "50c95c4fe4b0bed41a12298f"}, {"code": "(fn foo [xxs]\n\n    (if (empty? xxs)\n      nil\n\n      (let [x (first xxs)\n            xs (rest xxs)]\n\n      (cons x (cons x (foo (rest xxs))))\n        )\n\n      )\n\n    )", "problem": 32, "user": "535aba96e4b04ce2eb3ed2a8"}, {"code": "#(interleave % %)", "problem": 32, "user": "52271a85e4b04e78ff2e19a7"}, {"code": "(fn [arg] (loop [x arg r []] (if-not x r (recur (next x) (concat r (repeat 2 (first x)))))))", "problem": 32, "user": "53512b55e4b084c2834f4ae0"}, {"code": "mapcat #(vector % %)", "problem": 32, "user": "53566247e4b04ce2eb3ed266"}, {"code": "#(loop [x % n []]\n   (if (empty? x)\n   n\n   (recur (rest x) (conj n (first x) (first x)))))", "problem": 32, "user": "5356dcbee4b04ce2eb3ed270"}, {"code": "#(interleave % %)", "problem": 32, "user": "53523ae0e4b084c2834f4aee"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "535c53c5e4b04ce2eb3ed2b3"}, {"code": "#(sort (concat % %))", "problem": 32, "user": "535afd76e4b04ce2eb3ed2ab"}, {"code": "#(reduce (fn [acc x] (concat acc [x] [x])) [] %)", "problem": 32, "user": "535bd464e4b04ce2eb3ed2ad"}, {"code": "#(apply concat (map list % %))", "problem": 32, "user": "534f1c94e4b084c2834f4ac5"}, {"code": "#(interleave % %)", "problem": 32, "user": "535d4b0ae4b04ce2eb3ed2be"}, {"code": "#(interleave %1 %1)", "problem": 32, "user": "5351fca5e4b084c2834f4aec"}, {"code": "(fn [x] (reduce (fn [l y] (conj (conj l y) y)) [] x))", "problem": 32, "user": "535920b2e4b04ce2eb3ed294"}, {"code": "#(loop [ l1 % l2 '() ] \n   (if (empty? l1) \n     (reverse l2) \n     (recur (rest l1) (conj (conj l2 (first l1)) (first l1)))))", "problem": 32, "user": "535a18e3e4b04ce2eb3ed2a4"}, {"code": "mapcat (fn [a] [a a])", "problem": 32, "user": "535d2533e4b04ce2eb3ed2bc"}, {"code": "(fn [sq]\n  ((fn [sq r]\n    (if (empty? sq)\n      r\n      (recur (rest sq) (concat r [(first sq) (first sq)]))))\n   sq []))", "problem": 32, "user": "535d910ae4b04ce2eb3ed2c5"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "536102efe4b0243289761e3e"}, {"code": "(fn f [x] (mapcat (fn [y] [y y]) x))", "problem": 32, "user": "500e7063e4b04a05d36fcc07"}, {"code": "(fn [s] \n  (mapcat #(repeat 2 %) s))", "problem": 32, "user": "5244a10de4b0d8acf9ed6ab3"}, {"code": "(fn [s] (reduce (fn [acc val] (conj (conj acc val) val)) [] s))", "problem": 32, "user": "53480973e4b084c2834f4a52"}, {"code": "(fn [s]\n    (reduce #(conj %1 %2 %2) [] s))", "problem": 32, "user": "53489329e4b084c2834f4a5b"}, {"code": "(fn dup [[x & xs]]\n  (if (nil? x)\n    []\n    (concat [x x] (dup xs))))", "problem": 32, "user": "536254a5e4b0243289761e50"}, {"code": "(fn f [l] (if (not (seq l)) '() (cons (first l) (cons (first l) (f (rest l))))))", "problem": 32, "user": "53638ed2e4b0243289761e5b"}, {"code": "#(mapcat (fn[a] (conj nil a  a) ) %)", "problem": 32, "user": "5360e12ce4b0243289761e3a"}, {"code": "(fn [coll]\n  (apply concat (map #(repeat 2 %) coll)))", "problem": 32, "user": "5361a4f2e4b0243289761e47"}, {"code": "(fn dup [s] (sort-by identity( mapcat identity (take 2(repeat s)))))", "problem": 32, "user": "5363f11be4b0243289761e5f"}, {"code": "(partial mapcat #(list % %))", "problem": 32, "user": "53527551e4b084c2834f4af0"}, {"code": "#(interleave % %)", "problem": 32, "user": "53629381e4b0243289761e54"}, {"code": "mapcat #(repeat 2 %)", "problem": 32, "user": "53528cd3e4b084c2834f4af2"}, {"code": "#(sort(concat % %))", "problem": 32, "user": "535944d6e4b04ce2eb3ed296"}, {"code": "#(apply concat (map list % %))", "problem": 32, "user": "52c42bc2e4b0c2d177d620d0"}, {"code": "#(reduce concat (for [x %] [x x]))", "problem": 32, "user": "514b83b4e4b0bd81940b86ce"}, {"code": "#(sort (concat % %))", "problem": 32, "user": "5354bb38e4b084c2834f4b0a"}, {"code": "(fn duplicate [s]\n  (apply concat\n   (map #(list % %) s)))", "problem": 32, "user": "5364697ce4b0243289761e62"}, {"code": "(fn  [seqz] \n  ((fn [seqz acc]\n     (let [head (first seqz)\n           tail (rest seqz)]\n       (if (nil? head)\n         (reverse acc)\n         (recur tail (conj acc head head))\n         )\n       )\n     ) seqz '())\n  )", "problem": 32, "user": "4fafd067e4b081705acca259"}, {"code": "(fn rp [coll]\n        (reduce (fn [a b]\n                  (conj a b b)\n                  ) [] coll))", "problem": 32, "user": "536581e4e4b0243289761e6d"}, {"code": "#(interleave % %)", "problem": 32, "user": "533e45a7e4b085b17e897d8c"}, {"code": "#(interleave % %)", "problem": 32, "user": "535eaa73e4b04ce2eb3ed2d4"}, {"code": "(fn dup [xs]\n  ((fn impl [xs out-xs]\n     (if (empty? xs)\n       out-xs\n       (recur (drop-last xs) (conj out-xs (last xs) (last xs)))))\n   xs '()))", "problem": 32, "user": "4f085a31535dcb61093f6c35"}, {"code": "(fn [x] (interleave x x))", "problem": 32, "user": "535943b3e4b04ce2eb3ed295"}, {"code": "(fn [coll]\n  (mapcat #(vector % %) coll))", "problem": 32, "user": "5338e33fe4b0e30313ee6ca1"}, {"code": "(fn dup [l]\n  (if (empty? l)\n    l\n    (concat (list (first l) (first l)) (dup (rest l)))))", "problem": 32, "user": "5368a275e4b0243289761e8f"}, {"code": "(fn dbl[lst]\n  (if-let [[x & xs] (seq lst)]\n    (concat [x x] (dbl xs))\n    ()\n  )\n)", "problem": 32, "user": "536234a5e4b0243289761e4d"}, {"code": "reduce #(concat %1 (list %2 %2)) ()", "problem": 32, "user": "536973e5e4b0243289761e9e"}, {"code": "#(interleave % %)", "problem": 32, "user": "5369d072e4b0243289761ea1"}, {"code": "#(interleave % %)", "problem": 32, "user": "53658ce7e4b0243289761e6e"}, {"code": "#(reduce concat\n  (for [x %]\n    [x x]))", "problem": 32, "user": "51642237e4b003cf19fdde31"}, {"code": "mapcat #(vector %1 %1)", "problem": 32, "user": "536aa86de4b0243289761eb1"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "524f3e6de4b0541d1855b805"}, {"code": "(fn [coll]\n  (reduce (fn [acc curr]\n            (conj acc curr curr))\n          []\n          coll))", "problem": 32, "user": "53695439e4b0243289761e9a"}, {"code": "(fn [xs]\n  (apply concat (map #(list % %) xs)))", "problem": 32, "user": "53664e3be4b0243289761e74"}, {"code": "(fn [col]\n        (interleave col col)\n      )", "problem": 32, "user": "536827f1e4b0243289761e8a"}, {"code": "(fn [col] (apply concat (map #(cons % (cons % [])) col)))", "problem": 32, "user": "53347274e4b0656e627bfd6b"}, {"code": "(fn\n  [sq]\n  (interleave sq sq))", "problem": 32, "user": "52e44a22e4b09f7907dd144e"}, {"code": "#(reduce into [] (map (fn [x] [x x]) %))", "problem": 32, "user": "536d83cee4b0fc7073fd6e5e"}, {"code": "#(apply concat (map (fn [x] [x x]) %))", "problem": 32, "user": "536e0930e4b0fc7073fd6e66"}, {"code": "(fn [xs]\n  (mapcat #(vec [% %]) xs))", "problem": 32, "user": "536ca4bde4b0fc7073fd6e49"}, {"code": "#(mapcat (partial repeat 2) %1)", "problem": 32, "user": "4fe9ea87e4b0547ebccb2476"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "53691dc7e4b0243289761e97"}, {"code": "#(interleave % %)", "problem": 32, "user": "524b0645e4b09eba1c0223bf"}, {"code": "(fn [coll]\n  (loop [coll coll dup ()]\n    (if (empty? coll)\n      (reverse dup)\n      (recur (rest coll)\n             (cons (first coll) (cons (first coll) dup))))))", "problem": 32, "user": "5369a4b1e4b0243289761e9f"}, {"code": "mapcat (partial repeat 2)", "problem": 32, "user": "52eb2ec9e4b0705949c44439"}, {"code": "(fn [s] (apply concat (map (fn [x] (list x x)) s)))", "problem": 32, "user": "535197f2e4b084c2834f4ae4"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "52e087dde4b09f7907dd1412"}, {"code": "#(interleave % %)", "problem": 32, "user": "536f5900e4b0fc7073fd6e7b"}, {"code": "mapcat #(vector % %)", "problem": 32, "user": "536ecd9fe4b0fc7073fd6e76"}, {"code": "#(mapcat list % %)", "problem": 32, "user": "4ec53f8c535d6d7199dd368b"}, {"code": "mapcat #(vector % %)", "problem": 32, "user": "53578543e4b04ce2eb3ed280"}, {"code": "(fn [s] (interleave s s))", "problem": 32, "user": "536f2faee4b0fc7073fd6e79"}, {"code": "#(apply concat (map (fn [x] [x x]) (seq %)))", "problem": 32, "user": "536bc59fe4b0243289761ec3"}, {"code": "(fn dupe [coll]\n    (cond\n      (= (count coll) 1)\n      (concat coll coll)\n      :else\n      (let [[h & more] coll]\n        (concat [h h] (dupe more)))))", "problem": 32, "user": "5370ef22e4b0fc7073fd6ea0"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "52caee42e4b071a8d36bd3e8"}, {"code": "#(mapcat vector % %)", "problem": 32, "user": "5228b015e4b0186687e23a8a"}, {"code": "(fn [coll] (mapcat #(repeat 2 %) coll))", "problem": 32, "user": "536a37efe4b0243289761eaa"}, {"code": "#(interleave % %)", "problem": 32, "user": "534f13b2e4b084c2834f4ac4"}, {"code": "(fn [in]\n  (loop [out () qu in]\n    (if (empty? qu)\n      (reverse out)\n      (recur (cons (first qu) (cons (first qu) out)) (rest qu)))))", "problem": 32, "user": "536eb396e4b0fc7073fd6e74"}, {"code": "(fn [s] (interleave s s))", "problem": 32, "user": "536d52b8e4b0fc7073fd6e58"}, {"code": "(fn dup [coll]\n  (#(reverse (reduce (fn [x y] (conj (conj x y) y)) '() coll))))\n; make an anonymous function that reduces on an empty list and the first item in the collection. The f provided in the reduce\n; duplicates the y (in the initial case, the first element of the collection), and then puts the first item behind it. It then continues\n; to do that to the items in the collection, going with the result (the duplicated elements), and the second element in the\n; collection, making the final result (y2 y2 y1 y1), and so on and so forth. At the end, it reverses the entire list.", "problem": 32, "user": "53713ebee4b0fc7073fd6ead"}, {"code": "#(apply concat (map (fn [x] (conj () x x)) %))", "problem": 32, "user": "536c7470e4b0fc7073fd6e3e"}, {"code": "#(interleave % %)", "problem": 32, "user": "53730973e4b06d7f452d9e05"}, {"code": "(fn [q]\n  (into [] (for [x q y [0 1]] x)))", "problem": 32, "user": "517d1018e4b0f5e87c18f25e"}, {"code": "#(loop[lst % nst nil]\n   (if (nil? lst) nst\n     (recur (next lst) (concat (concat nst (list (first lst))) (list (first lst))))))", "problem": 32, "user": "4e8849c5535d8b9bb0147ca4"}, {"code": "#(apply concat (map vector % %))", "problem": 32, "user": "529f5a23e4b04e0c58e87baa"}, {"code": "(fn [s] (mapcat (fn [x] [x x]) s))", "problem": 32, "user": "536f62aee4b0fc7073fd6e7c"}, {"code": "(fn [coll]\n  (mapcat #(take 2 (repeat %)) coll))", "problem": 32, "user": "532c9dc9e4b019098a6f8b30"}, {"code": "(fn jdup\n  [lst]\n  (if (empty? lst)\n    '()\n    (conj (jdup (rest lst)) (first lst) (first lst))))", "problem": 32, "user": "534ff8a6e4b084c2834f4ad1"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "53736ffce4b06d7f452d9e11"}, {"code": "#(interleave % %)", "problem": 32, "user": "53705e2de4b0fc7073fd6e96"}, {"code": "#(interleave % %)", "problem": 32, "user": "52e8ee9ae4b09f7907dd14a1"}, {"code": "#(sort (into % %))", "problem": 32, "user": "534c1c64e4b084c2834f4a8a"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "53572767e4b04ce2eb3ed277"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "535056a7e4b084c2834f4adb"}, {"code": "#(interleave % %)", "problem": 32, "user": "536b2048e4b0243289761eb7"}, {"code": "#(interleave % %)", "problem": 32, "user": "536be48ee4b0fc7073fd6e31"}, {"code": "(fn [l] (reduce concat (map (fn [e] [e e]) l)))", "problem": 32, "user": "53712c03e4b0fc7073fd6ea9"}, {"code": "mapcat #(vector % %)", "problem": 32, "user": "53720c5ce4b0493c815db704"}, {"code": "(fn duplicate [coll]\n  (reduce #(conj %1 %2 %2) \n          [] \n          coll))", "problem": 32, "user": "53713ed9e4b0fc7073fd6eaf"}, {"code": "(fn [l] (interleave l l))", "problem": 32, "user": "536673a8e4b0243289761e76"}, {"code": "#(interleave % %)", "problem": 32, "user": "536b9d8ae4b0243289761ebe"}, {"code": "#(interleave %1 %1)", "problem": 32, "user": "5356d00ee4b04ce2eb3ed26f"}, {"code": "#(interleave % %)", "problem": 32, "user": "5376966ae4b06839e8705e27"}, {"code": "(fn [coll]\n    (reverse (reduce #(conj %1 %2 %2) '() coll)))", "problem": 32, "user": "5317d78ee4b08068f379ed63"}, {"code": "(fn [l] (reduce into [] (map #(do [%1 %2]) l l)))", "problem": 32, "user": "535e518ee4b04ce2eb3ed2cf"}, {"code": "(fn [x](interleave x x))", "problem": 32, "user": "534d639ae4b084c2834f4a9e"}, {"code": "(fn [s]\n  (apply concat (map #(repeat 2 %) s)))", "problem": 32, "user": "5379306fe4b06839e8705e50"}, {"code": "mapcat (partial repeat 2)", "problem": 32, "user": "53779a26e4b06839e8705e38"}, {"code": "(fn [col] (loop \n             [\n              mcol col, \n              newv []] \n             (if (seq mcol)\n               (recur \n                 (rest mcol) \n                 (conj newv (first mcol) (first mcol)))\n               newv)))", "problem": 32, "user": "4f7cbf4ae4b06e829148e1b7"}, {"code": "(fn [s] (reduce #(conj %1 %2 %2) [] s))", "problem": 32, "user": "536d260be4b0fc7073fd6e55"}, {"code": "(fn [coll] (apply concat (map #(repeat 2 %) coll)))", "problem": 32, "user": "5370b386e4b0fc7073fd6e9b"}, {"code": "(fn [xs]\n  (sort (take (* 2 (count xs)) (cycle xs))))", "problem": 32, "user": "5371167fe4b0fc7073fd6ea7"}, {"code": "#(reduce into (map (fn[x] [x x]) %))", "problem": 32, "user": "536c77f1e4b0fc7073fd6e3f"}, {"code": "#(interleave % %)", "problem": 32, "user": "4f92de49e4b0dcca54ed6cb2"}, {"code": "#(interleave %1 %1)", "problem": 32, "user": "5370f8ede4b0fc7073fd6ea2"}, {"code": "#(reduce (fn [x y] (into x [y y])) [] %)", "problem": 32, "user": "5339edfbe4b0e30313ee6cb3"}, {"code": "(fn dup [input] (reduce concat (map (fn [x] [x x]) input)))", "problem": 32, "user": "536db108e4b0fc7073fd6e61"}, {"code": "(fn [x] (mapcat #(list % %) x))", "problem": 32, "user": "53791ab7e4b06839e8705e4d"}, {"code": "#(reduce (fn [acc x] (conj (conj acc x) x)) [] %)", "problem": 32, "user": "53736f65e4b06d7f452d9e0f"}, {"code": "(fn [s](reduce #(conj % %2 %2)  [] s))", "problem": 32, "user": "536046a9e4b063bf7a5f8fe1"}, {"code": "#(sort (into % %))", "problem": 32, "user": "52eaba10e4b09f7907dd14c2"}, {"code": "(comp (partial reduce (fn [acc i] (conj acc i i)) []))", "problem": 32, "user": "4fc588bee4b0ee37620e17fa"}, {"code": "#(interleave % %)", "problem": 32, "user": "4f849f76e4b033992c121c36"}, {"code": "reduce #(concat % [%2 %2]) []", "problem": 32, "user": "53767991e4b06839e8705e25"}, {"code": "#(interleave % %)", "problem": 32, "user": "4e749e84535d7a570dd295b9"}, {"code": "reduce #(conj % %2 %2 ) []", "problem": 32, "user": "52ae886de4b0c58976d9acab"}, {"code": "#(mapcat (fn [x] [x x]) %)", "problem": 32, "user": "537bde5de4b06839e8705e73"}, {"code": "(fn [lst]\n\t(apply concat (map #(repeat 2 %) lst)))", "problem": 32, "user": "537d4a69e4b06839e8705e8a"}, {"code": "#(interleave % %)", "problem": 32, "user": "537e59ffe4b06839e8705ea3"}, {"code": "#(apply concat (map (fn [a] (list a a)) %))", "problem": 32, "user": "537e745ae4b06839e8705ea6"}, {"code": "#(mapcat identity (map (fn [x] [x x]) % ))", "problem": 32, "user": "531541a0e4b08068f379ed25"}, {"code": "(fn [x] (mapcat (fn [y] [y y]) x))", "problem": 32, "user": "525cc912e4b0cb4875a45d48"}, {"code": "(fn [coll] (interleave coll coll))", "problem": 32, "user": "537f6df1e4b06839e8705eb5"}, {"code": "#(mapcat (partial repeat 2) %)", "problem": 32, "user": "537f4652e4b06839e8705eb1"}, {"code": "(fn [x] (apply concat (#(map vector % %) x)))", "problem": 32, "user": "53733312e4b06d7f452d9e0a"}, {"code": "(fn [xs] (interleave xs xs))", "problem": 32, "user": "53800d99e4b06839e8705ebd"}, {"code": "#(reduce (fn [coll elem] \n            (concat coll [elem elem])) () %)", "problem": 32, "user": "53778b90e4b06839e8705e36"}, {"code": "(fn[x] (apply concat (map #(list %1 %1) x)))", "problem": 32, "user": "53806e5be4b06839e8705ec1"}, {"code": "(fn [xs] (reduce (fn [acc x] (into acc [x x])) [] xs))", "problem": 32, "user": "52e55e16e4b09f7907dd1460"}, {"code": "#(reduce (fn [s t] (conj (conj s t) t)) [] %)", "problem": 32, "user": "53820087e4b06839e8705ecf"}, {"code": "(fn [l] (apply concat (#(for [x %] [x x]) l)))", "problem": 32, "user": "538243f3e4b06839e8705ed1"}, {"code": "mapcat #(repeat 2 %1)", "problem": 32, "user": "511688d5e4b0b3e208dba05a"}, {"code": "(partial reduce (fn [a b] (conj a b b)) [])", "problem": 32, "user": "519e70d5e4b0acf32bc6a42c"}, {"code": "#(interleave % %)", "problem": 32, "user": "537d6d44e4b06839e8705e8c"}, {"code": "#(interleave % %)", "problem": 32, "user": "537e860ae4b06839e8705ea7"}, {"code": "(fn duplicate [s] \n  (apply concat (map #(list %1 %1) s)))", "problem": 32, "user": "52b71bd2e4b0c58976d9ad4d"}, {"code": "#(interleave % %)", "problem": 32, "user": "536c99c5e4b0fc7073fd6e46"}, {"code": "#(interleave % %)", "problem": 32, "user": "53834ed3e4b06839e8705edb"}, {"code": "(fn duplicate [x]\n  (loop [orig x\n         new []]\n    (cond (empty? orig) (into '() new)\n          :else (recur (rest orig) (cons (first orig) (cons (first orig) new))))))", "problem": 32, "user": "5383ee9ee4b06839e8705eeb"}, {"code": "(fn [coll] (mapcat #(list %  %) coll))", "problem": 32, "user": "508147cde4b0a20aab17b93a"}, {"code": "#(interleave % %)", "problem": 32, "user": "5368fedee4b0243289761e93"}, {"code": "(fn [coll] \n  (reduce concat \n          (map #(repeat 2 %1) coll)))", "problem": 32, "user": "5372eaf2e4b06d7f452d9e03"}, {"code": "#(interleave % %)", "problem": 32, "user": "513b10e3e4b067e25a345ed0"}, {"code": "#(interleave % %)", "problem": 32, "user": "537a1012e4b06839e8705e5c"}, {"code": "#(interleave % %)", "problem": 32, "user": "538538b2e4b06839e8705efe"}, {"code": "(fn [a]\n  (reduce #(conj (conj %1 %2) %2) '[] a))", "problem": 32, "user": "5374adc3e4b06d7f452d9e27"}, {"code": "mapcat #(vector % %)", "problem": 32, "user": "538505d1e4b06839e8705efa"}, {"code": "#(interleave % %)", "problem": 32, "user": "538754b1e4b06839e8705f1c"}, {"code": "(fn [s]\n  (mapcat list s s))", "problem": 32, "user": "538557aee4b06839e8705f02"}, {"code": "(fn [coll]\n  (reverse\n   (reduce #(cons %2 (cons %2 %1)) '() coll)))", "problem": 32, "user": "53864493e4b06839e8705f10"}, {"code": "#(mapcat (fn [x] (repeat 2 x)) %)", "problem": 32, "user": "53871d06e4b06839e8705f19"}, {"code": "mapcat #(vector % %)", "problem": 32, "user": "5360f043e4b0243289761e3c"}, {"code": "(fn [elems]\n  (mapcat #(repeat 2 %) elems))", "problem": 32, "user": "536f871de4b0fc7073fd6e7f"}, {"code": "(fn\n  [x]\n  (apply concat (map #(take 2 (repeat %)) x)))", "problem": 32, "user": "4ea8570f535d7eef308072f8"}, {"code": "#(reduce concat (map (fn [x] (repeat 2 x)) %))", "problem": 32, "user": "537881a4e4b06839e8705e46"}, {"code": "(fn [coll] (reduce into (for [x coll] [x x])))", "problem": 32, "user": "534e1f56e4b084c2834f4aae"}, {"code": "(fn [seqn]\n  (reduce concat (map #(vector % %) seqn)))", "problem": 32, "user": "53889587e4b0640c7a9a589e"}, {"code": "#(interleave % %)", "problem": 32, "user": "5388e62ce4b0640c7a9a58a9"}, {"code": "#(mapcat (fn [a] (list a a)) %)", "problem": 32, "user": "520b67b5e4b0b022ef140c83"}, {"code": "#(interleave % %)", "problem": 32, "user": "534eecaee4b084c2834f4abf"}, {"code": "(fn f [x] \n  (if (first x)       \n    (cons (first x) (cons (first x) (f (rest x)))))\n  )", "problem": 32, "user": "503c90aae4b06c4e0e1fa24b"}, {"code": "#(loop [list % new-list []]\n    (if (empty? list)\n      new-list\n      (recur (rest list) (conj new-list (first list) (first list)))))", "problem": 32, "user": "53838742e4b06839e8705ee0"}, {"code": "#(interleave % %)", "problem": 32, "user": "537943c0e4b06839e8705e52"}, {"code": "#(mapcat list % %)", "problem": 32, "user": "4f7426fde4b044e54cd9a8f5"}, {"code": "(fn [coll] (mapcat #(vector % %) coll))", "problem": 32, "user": "538b1644e4b0640c7a9a58c0"}, {"code": "#(interleave % %)", "problem": 32, "user": "5382704be4b06839e8705ed4"}, {"code": "(comp (partial apply concat) (partial map #(list % %)))", "problem": 32, "user": "538be6afe4b0640c7a9a58c9"}, {"code": "(fn [xs] (reduce #(concat %1 (list %2 %2)) () xs))", "problem": 32, "user": "53403110e4b085b17e897da6"}, {"code": "#(interleave % %)", "problem": 32, "user": "51dd5d6fe4b0c33a4e1da406"}, {"code": "#(sort (concat % %))", "problem": 32, "user": "538a8d28e4b0640c7a9a58ba"}, {"code": "(fn [coll] (mapcat #(repeat 2 %) coll))", "problem": 32, "user": "538b6326e4b0640c7a9a58c2"}, {"code": "(fn [x] (mapcat #(list % %) x))", "problem": 32, "user": "534d5ab7e4b084c2834f4a9c"}, {"code": "(fn [s] (apply concat (map vector s s) ) )", "problem": 32, "user": "53852e84e4b06839e8705efd"}, {"code": "(fn [l] \n  (apply concat (map #(list % %) l)))", "problem": 32, "user": "51a4416ae4b0def3c5c5868c"}, {"code": "(fn f32 [x]\n  (interleave x x))", "problem": 32, "user": "535aee3be4b04ce2eb3ed2aa"}, {"code": "(fn [x]\n  (loop [x x\n         result []]\n    (if (empty? x)\n      result\n      (recur (rest x) (conj (conj result (first x)) (first x))))))", "problem": 32, "user": "538d464ee4b0b51d73faae69"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "538d8bb8e4b0b51d73faae71"}, {"code": "(fn [s]\n  (interleave s s)\n  )", "problem": 32, "user": "53863845e4b06839e8705f0f"}, {"code": "(fn [a] (apply concat (for [c (range (count a))] (for [d (range 2)] (nth a c)))))", "problem": 32, "user": "53874820e4b06839e8705f1b"}, {"code": "#(interleave % %)", "problem": 32, "user": "5327c591e4b09d4e7a9b54ff"}, {"code": "#(reduce \n  (fn [sequ number]\n    (conj sequ number number)) \n  \t[] %)", "problem": 32, "user": "53847a4ce4b06839e8705ef3"}, {"code": "#(interleave % %)", "problem": 32, "user": "528e7433e4b0239c8a67aedf"}, {"code": "mapcat #(repeat 2 %)", "problem": 32, "user": "4fe8a1f8e4b07c9f6fd12c5f"}, {"code": "(fn [li] \n  (reduce concat \n   (map \n    (fn duplicate [e] (list e e))\n    li)))", "problem": 32, "user": "538c3424e4b0b51d73faae58"}, {"code": "(fn g [coll] (mapcat #(list % %2) coll coll))", "problem": 32, "user": "538c9144e4b0b51d73faae5d"}, {"code": "#(reduce concat\n  (map repeat (repeat 2) %))", "problem": 32, "user": "528410bbe4b0239c8a67adc2"}, {"code": "(fn [col] (reverse (reduce #(cons %2 (cons %2 %1)) '() col)))", "problem": 32, "user": "5390110de4b0b51d73faae94"}, {"code": "(fn [s]\n  (loop [s s acc []]\n    (if (empty? s)\n      \tacc\n      \t(recur (rest s) (conj acc (first s) (first s)))\n      )))", "problem": 32, "user": "53886d2fe4b0640c7a9a589d"}, {"code": "(fn dup[x] (mapcat #(repeat 2 %) x))", "problem": 32, "user": "538de891e4b0b51d73faae78"}, {"code": "mapcat (fn [x] [x x])", "problem": 32, "user": "530bf87ee4b02e82168697d5"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "538e07fce4b0b51d73faae7d"}, {"code": "#(reduce (fn [ls el]\n           (into ls [el el]))\n         [] %)", "problem": 32, "user": "5390952be4b0b51d73faae9c"}, {"code": "(fn duplicate-ns [coll]\n  (interleave coll coll))", "problem": 32, "user": "5383668ee4b06839e8705edd"}, {"code": "(partial reduce (fn [a e] (conj (conj a e) e)) [])", "problem": 32, "user": "5392b849e4b0b51d73faaeb1"}, {"code": "(fn duplicate [coll]\n    (reduce\n      into\n      (map\n      (fn [x] [x x])\n      coll)))", "problem": 32, "user": "5379ed48e4b06839e8705e5a"}, {"code": "#(interleave % %)", "problem": 32, "user": "5394aa77e4b0b51d73faaecd"}, {"code": "#(reduce (fn [coll x] (conj coll x x)) [] %)", "problem": 32, "user": "531ccb1fe4b08068f379eda7"}, {"code": "(fn [x] (mapcat #(repeat 2 %) x))", "problem": 32, "user": "539378fbe4b0b51d73faaebd"}, {"code": "#(interleave % %)", "problem": 32, "user": "538d49e1e4b0b51d73faae6b"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "53940789e4b0b51d73faaec3"}, {"code": "(fn [foo] (reverse (reduce into (map #(repeat 2 %) foo))))", "problem": 32, "user": "4f47d84fe4b0d56e7bb92bc3"}, {"code": "(fn [coll] (reverse (reduce #(concat (repeat 2 %2) %1) '() coll)))", "problem": 32, "user": "52a3a7ebe4b04e0c58e87c02"}, {"code": "#(sort(concat % %))", "problem": 32, "user": "53906b89e4b0b51d73faae99"}, {"code": "#(reduce \n  (fn [e1 e2] \n    ( conj e1 e2 e2)) '[] %)", "problem": 32, "user": "5364ab34e4b0243289761e64"}, {"code": "(fn [input]\n    (loop [i input dst []]\n        (if (empty? i) dst\n            (recur (rest i) (conj dst (first i) (first i)))\n            )\n        )\n    )", "problem": 32, "user": "539755d9e4b0b51d73faaee8"}, {"code": "(fn dup-seq [lat]\n  (reduce concat (map #(take 2 (repeat %)) lat)))", "problem": 32, "user": "52bc0dade4b07a9af57922f1"}, {"code": "(comp \n  (partial apply concat)\n  (partial map #(list % %))\n)", "problem": 32, "user": "53979a87e4b0b51d73faaef0"}, {"code": "#(interleave % %)", "problem": 32, "user": "53973e7be4b0b51d73faaee6"}, {"code": "(fn  [lst]\n  (loop [rm (seq lst), acc (vector)]\n    (cond (empty? rm) (seq acc)\n          :else (recur (rest rm) (conj acc (first rm) (first rm))))))", "problem": 32, "user": "538e36c7e4b0b51d73faae81"}, {"code": "mapcat #(list % %)", "problem": 32, "user": "53976599e4b0b51d73faaeea"}, {"code": "#(mapcat (fn [x] [x x]) %)", "problem": 32, "user": "5394265ee4b0b51d73faaec6"}, {"code": "(fn dup [coll]\n  (when-let [s (seq coll)]\n    (let [x (first s)]\n      (cons x (cons x (dup (rest s)))))))", "problem": 32, "user": "539a2901e4b0b51d73faaf0f"}, {"code": "(fn [l]\n  (reduce (fn [result element]\n             (concat (take 2 (repeat element)) result))\n             '()\n             (reverse l)))", "problem": 32, "user": "538c6db7e4b0b51d73faae5a"}, {"code": "(fn [coll]\n  (reverse\n   (reduce #(cons %2 (cons %2 %1)) '() coll)))", "problem": 32, "user": "539ad6b7e4b0b51d73faaf18"}, {"code": "#(interleave % %)", "problem": 32, "user": "5384bbf8e4b06839e8705ef5"}, {"code": "(fn dbl [[f & n]]\n  (if (empty? n)\n    [f f]\n  \t(concat [f f] (dbl n))))", "problem": 32, "user": "53908e6be4b0b51d73faae9a"}, {"code": "(fn [x] (apply concat (map #(repeat 2 %) x)))", "problem": 32, "user": "5398305fe4b0b51d73faaef6"}, {"code": "(fn [s] (reverse (reduce #(conj %1 %2 %2) () s)))", "problem": 32, "user": "539b5fcee4b0b51d73faaf1e"}, {"code": "(fn [coll]\n  (reverse\n   (reduce #(cons %2 (cons %2 %1)) '() coll)))", "problem": 32, "user": "539cacbde4b0b51d73faaf2f"}, {"code": "#(interleave % %)", "problem": 32, "user": "5397ecf6e4b0b51d73faaef2"}, {"code": "(fn \n  [s]\n  (sort (concat s s)))", "problem": 32, "user": "53951c75e4b0b51d73faaed4"}, {"code": "#(mapcat (fn [x] [x x]) %)", "problem": 32, "user": "538fe131e4b0b51d73faae91"}, {"code": "#(interleave % %)", "problem": 32, "user": "537e104ce4b06839e8705e9a"}, {"code": "#(apply concat (for [x %] [x x]))", "problem": 32, "user": "50b63c5ee4b0a86f8358ca69"}, {"code": "(fn dup [s]\n  (loop [source s\n         dest []]\n    (if (empty? source)\n      dest\n      (recur (rest source) (conj dest (first source) (first source))))))", "problem": 32, "user": "53710c09e4b0fc7073fd6ea5"}, {"code": "(fn [c] (mapcat #(list % %) c))", "problem": 32, "user": "539c64cde4b0b51d73faaf2a"}, {"code": "#(interleave % %)", "problem": 32, "user": "5376f0d0e4b06839e8705e2c"}, {"code": "mapcat #(vector % %)", "problem": 32, "user": "539ddf25e4b0b51d73faaf3e"}, {"code": "(partial mapcat (partial repeat 2))", "problem": 32, "user": "536c1531e4b0fc7073fd6e36"}, {"code": "#(for [x % y [1 2]] x)", "problem": 32, "user": "539ec9f9e4b0ca733b974491"}, {"code": "#(interleave % %)", "problem": 32, "user": "536e5055e4b0fc7073fd6e6b"}, {"code": "reduce (fn [acc ele]\n         (conj acc ele ele)) []", "problem": 32, "user": "53862316e4b06839e8705f0e"}, {"code": "#(interleave % %)\n;#(mapcat list % %)", "problem": 32, "user": "53a074a4e4b0ca733b9744af"}, {"code": "(fn d [col]\n    (cond (empty? col) col\n          :elth (concat (list (first col) (first col)) (d (rest col)))))", "problem": 32, "user": "53858594e4b06839e8705f05"}, {"code": "(fn [s] (mapcat #(repeat 2 %) s))", "problem": 32, "user": "53a0ce51e4b0ca733b9744b6"}, {"code": "mapcat #(vector % %)", "problem": 32, "user": "531f26d0e4b08068f379edc3"}, {"code": "(fn [x] (interleave x x))", "problem": 32, "user": "539b4268e4b0b51d73faaf1c"}, {"code": "(fn [list] (apply concat (for [x list] [x x])))", "problem": 32, "user": "5394162be4b0b51d73faaec5"}, {"code": "(fn [lst] (reverse ( #( if (empty? %1) %2 (recur (rest %1) (conj (conj %2 (first %1)) (first %1)))) lst '())))", "problem": 32, "user": "539c9e26e4b0b51d73faaf2e"}, {"code": "#(loop [b '() r %] (if (empty? r) b (recur (concat b [(first r) (first r)]) (rest r))))", "problem": 32, "user": "539cb777e4b0b51d73faaf30"}, {"code": "(fn [coll]\n  (apply concat (map #(vector % %) coll)))", "problem": 32, "user": "538e864ee4b0b51d73faae87"}, {"code": "#(interleave %1 %1)", "problem": 32, "user": "53a068cbe4b0ca733b9744ae"}, {"code": "(fn duplicate\n  ([x] (duplicate '() x))\n  ([aux x] (if (empty? x) aux\n             (recur (concat aux [(first x) (first x)]) (rest x)))))", "problem": 32, "user": "53a2ec2be4b0f1fc74538830"}, {"code": "mapcat #(vector % %)", "problem": 32, "user": "53a3edfce4b0f1fc7453883b"}, {"code": "reduce #(conj %1 %2 %2) []", "problem": 32, "user": "53a065c2e4b0ca733b9744ad"}, {"code": "(fn [a-seq] (apply concat (map (partial repeat 2) a-seq)))", "problem": 32, "user": "52d885afe4b09f7907dd1398"}, {"code": "(fn dup [l]\n  (reduce\n   (fn [res el] (conj res el el))\n   []\n   l))", "problem": 32, "user": "50c13f77e4b096f585049c3b"}, {"code": "(fn [l]\n  (apply concat (map #(list % %) l)\n  )\n)", "problem": 32, "user": "53a36fd7e4b0f1fc74538834"}, {"code": "reduce #(concat %1 (list %2 %2)) '()", "problem": 32, "user": "52fac708e4b047fd55836fff"}, {"code": "#(loop [coll %\n        ncoll []] (if (empty? coll)\n                    ncoll\n                    (let [elem (first coll)\n                        tail (rest coll)] (recur tail (concat ncoll [elem elem])))))", "problem": 32, "user": "539f3397e4b0ca733b974496"}, {"code": "(fn[x] (reduce concat (map #(list %1 %1) x)))", "problem": 32, "user": "52ff6ea0e4b0d8b024fd3707"}, {"code": "(fn repeat-first [nums] \n         (if (first nums)\n                   (concat (repeat 2 (first nums))\n                         (repeat-first (rest nums)))\n                   (list)))", "problem": 32, "user": "53a26cede4b0f1fc7453882a"}, {"code": "mapcat #(-> [% %])", "problem": 32, "user": "53a5737ee4b0b62ce300573a"}, {"code": "mapcat #(vector % %)", "problem": 32, "user": "52e657e4e4b09f7907dd1472"}, {"code": "mapcat #(vector % %)", "problem": 32, "user": "539c9d7ee4b0b51d73faaf2d"}, {"problem": 32, "code": "(fn [s] (mapcat #(list %1 %1) s))", "user": "53a07aa7e4b0ca733b9744b0"}, {"problem": 32, "code": "mapcat #(replicate 2 %)", "user": "538d73c1e4b0b51d73faae6f"}, {"problem": 32, "code": "#(apply concat (map (fn [x] [x x]) %))", "user": "52ee9ac7e4b05e3f0be25ec9"}, {"problem": 32, "code": "reduce #(conj % %2 %2) []", "user": "53a739b0e4b0ef122a8689d0"}, {"problem": 32, "code": "(fn dupseq [[x & xs :as l]]\n  (if (empty? l) nil\n  \t(conj (dupseq xs) x x)))", "user": "5396c94be4b0b51d73faaee3"}, {"problem": 32, "code": "#(interleave % %)", "user": "53a2be95e4b0f1fc7453882d"}, {"problem": 32, "code": "#(mapcat (fn [x] (list x x)) %)", "user": "53a5c7ffe4b0ef122a8689c4"}, {"problem": 32, "code": "(fn [x] (apply concat (map #(vector %1 %1) x)))", "user": "4f041de1535dcb61093f6ba5"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "53a8d9efe4b047364c04442d"}, {"problem": 32, "code": "#(loop [dup (first %)\n        theRest (rest %)\n        ret []]\n   (if (not (nil? dup))\n     (recur (first theRest)\n            (rest theRest)\n            (conj (conj ret dup) dup))\n     ret))", "user": "539f4e9ee4b0ca733b974498"}, {"problem": 32, "code": "mapcat #(vector % %)", "user": "538e29d1e4b0b51d73faae80"}, {"problem": 32, "code": "(fn [coll] (reduce #(concat %1 (list %2 %2)) () coll))", "user": "53a1b5c8e4b0ca733b9744c1"}, {"problem": 32, "code": "#(interleave % %)", "user": "53a19dece4b0ca733b9744c0"}, {"problem": 32, "code": "mapcat (fn [s] (list s s))", "user": "53aa1528e4b047364c04443f"}, {"problem": 32, "code": "(fn [xs]\n  (loop [xs xs\n         acc []]\n    (cond\n     (empty? xs) acc\n     :else (recur (rest xs) (conj (conj acc (first xs)) (first xs))))))", "user": "51c116d4e4b0c9c822882942"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "53a94b63e4b047364c044434"}, {"problem": 32, "code": "#(interleave % %)", "user": "53ac4719e4b047364c04445c"}, {"problem": 32, "code": "(fn [coll] \n  (loop [[head & tail]  coll\n         result  \t\t[]]\n   \t(if (not (nil? head))\n      (recur tail (conj result head head))\n      result)))", "user": "53ac0e52e4b047364c044457"}, {"problem": 32, "code": "#(interleave % %)", "user": "53a7e3b9e4b047364c044423"}, {"problem": 32, "code": "(fn blah [x] (when (not (= x '())) (conj (blah (rest x)) (first x) (first x))))", "user": "53aaaf7ae4b047364c044444"}, {"problem": 32, "code": "#(mapcat list % %)", "user": "526e5159e4b03e8d9a4a7316"}, {"problem": 32, "code": "(fn [n]\n  (sort (into n n)))", "user": "5391bc62e4b0b51d73faaea7"}, {"problem": 32, "code": "#(interleave % %)", "user": "538f4c1de4b0b51d73faae8c"}, {"problem": 32, "code": "(fn [x] (interleave x x))", "user": "521af66be4b0c4ef0be8301b"}, {"problem": 32, "code": "#(interleave % %)", "user": "52a229e0e4b04e0c58e87be9"}, {"problem": 32, "code": "#(interleave % %)", "user": "53ae16e2e4b047364c044472"}, {"problem": 32, "code": "reduce #(concat % (list %2 %2)) []", "user": "53abf519e4b047364c044456"}, {"problem": 32, "code": "(fn [l] (apply concat (map #(seq (list % %)) l)))", "user": "53a0ab8ce4b0ca733b9744b3"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "53acaf1fe4b047364c04445f"}, {"problem": 32, "code": "#(interleave % %)", "user": "53b15e6ee4b047364c04448f"}, {"problem": 32, "code": "(fn [s] (interleave s s))", "user": "50784ae5e4b0fc74642bff68"}, {"problem": 32, "code": "(partial mapcat #(list % %))", "user": "52f0ea04e4b05e3f0be25ee6"}, {"problem": 32, "code": "#(interleave % %)", "user": "53a7771ee4b047364c04441b"}, {"problem": 32, "code": "(fn [x]\n  (->> x\n       (repeat)\n       (take 2)\n       (#(interleave (first %)(second %)))))", "user": "4feded14e4b0d2a5fc2962ec"}, {"problem": 32, "code": "(fn duplicate [x] (apply concat (map #(cons % (list %)) x)))", "user": "53b12c76e4b047364c04448a"}, {"problem": 32, "code": "(fn duplicate [others]\n   (reduce concat (map #(take 2 (repeat %)) others)))", "user": "53ac1992e4b047364c04445a"}, {"problem": 32, "code": "(fn [coll]\n  (reduce concat (map (fn [x] [x x]) coll)))", "user": "53ae0c50e4b047364c044471"}, {"problem": 32, "code": "(fn [coll]\n  (loop\n    [i 0\n     s '()]\n    (if (= i (count coll))\n      (reverse s)\n      (recur (inc i) (conj (conj s (nth coll i)) (nth coll i))))))", "user": "51a4d802e4b0def3c5c5869a"}, {"problem": 32, "code": "(fn [coll]\n \t (loop \n       [i 0\n         s '()]\n    \t(if (= i (count coll))\n           (reverse s)\n           (recur (inc i) (conj (conj s (nth coll i)) (nth coll i))))))", "user": "53b182a5e4b047364c044491"}, {"problem": 32, "code": "#(loop [acc '()\n        coll %]\n   (if-let [f (first coll)]\n     (recur (concat acc (list f f)) (rest coll))\n     acc\n     )\n   )", "user": "5245e320e4b09dbe66b56177"}, {"problem": 32, "code": "#(interleave % %)", "user": "509fda73e4b08df8156e9e41"}, {"problem": 32, "code": "reduce #(conj (conj %1 %2) %2) []", "user": "53acca34e4b047364c044460"}, {"problem": 32, "code": "#(mapcat list % %)", "user": "52d07cc5e4b07d0d72b273bb"}, {"problem": 32, "code": "#(interleave % %)", "user": "5189a51ae4b0288ada3dbdad"}, {"problem": 32, "code": "(partial reduce #(conj %1 %2 %2) [])", "user": "5360578ee4b0243289761e35"}, {"problem": 32, "code": "(fn [x] (reduce concat (map (fn[y] (vector y y)) x)))", "user": "53ad28ede4b047364c044462"}, {"problem": 32, "code": "reduce (fn [a x] (conj a x x)) []", "user": "5329b493e4b09d4e7a9b5515"}, {"problem": 32, "code": "(fn du [l]\n  (if-let [h (first l)]\n    (into [h h] (du (rest l)))\n    []))", "user": "53b42b9ce4b047364c0444b3"}, {"problem": 32, "code": "reduce (fn [coll x] (conj (conj coll x) x) ) []", "user": "53ac4c6fe4b047364c04445d"}, {"problem": 32, "code": "(fn [s] (loop[h (first s) t (rest s) r ()] \n          (if (= h nil) (reverse r) (recur (first t) (rest t) (cons h (cons h r)) )) ))", "user": "53b3ea79e4b047364c0444ab"}, {"problem": 32, "code": "(fn dup [s] (mapcat #(vector % %) s))", "user": "53b39d82e4b047364c0444a6"}, {"problem": 32, "code": "(fn [x] (interleave x x))", "user": "53b780b8e4b047364c0444cf"}, {"problem": 32, "code": "(partial reduce #(conj %1 %2 %2) [])", "user": "53b71b94e4b047364c0444cd"}, {"problem": 32, "code": "#(loop [ l %1 l2 []] (let [f (first l)] (if (= (count l) 0) l2 (recur (rest l) (concat l2 (list f f))))))", "user": "53b2a7f8e4b047364c04449c"}, {"problem": 32, "code": "(fn [coll]\n  (interleave coll coll))", "user": "5391ab43e4b0b51d73faaea6"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "539fa040e4b0ca733b97449f"}, {"problem": 32, "code": "(fn [ls] (reduce concat (map #(list % %) ls)))", "user": "53b8b37be4b047364c0444e1"}, {"problem": 32, "code": "(fn duplicate ([l] (if (= (count l) 0) () (concat [(first l) (first l)] (duplicate (rest l))))))", "user": "534aa5d3e4b084c2834f4a6b"}, {"problem": 32, "code": "(fn [l]\n  (loop [l l, ret []]\n    (if (empty? l)\n      ret\n      (recur (rest l) (conj ret (first l) (first l))))))", "user": "539c88e1e4b0b51d73faaf2c"}, {"problem": 32, "code": "mapcat #(vector % %)", "user": "53b41d17e4b047364c0444b1"}, {"problem": 32, "code": "#(interleave % %)", "user": "53b4bddae4b047364c0444b9"}, {"problem": 32, "code": "#(sort (concat % %))", "user": "53940b5ee4b0b51d73faaec4"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "4f867b25e4b033992c121c51"}, {"problem": 32, "code": "(fn [col]\n (reduce #(conj %1 %2 %2) [] col))", "user": "53b7c21ae4b047364c0444d4"}, {"problem": 32, "code": "#(loop [acc '() [x & xs] %]\n   (if (nil? x) acc\n     (recur (concat acc (list x x)) xs)))", "user": "5310e968e4b08068f379ecdd"}, {"problem": 32, "code": "mapcat #(vector % %)", "user": "53bb512ce4b047364c044503"}, {"problem": 32, "code": "#(sort (concat % %))", "user": "53bc5ab5e4b047364c044510"}, {"problem": 32, "code": "#(interleave % %)", "user": "53ba41c2e4b047364c0444f3"}, {"problem": 32, "code": "(fn [s]\n  (reverse (reduce into (map #(repeat 2 %) s)))\n )", "user": "53bd6fcfe4b0d9a98559a6d0"}, {"problem": 32, "code": "(fn [x] (interleave x x))", "user": "53bd6ad0e4b0d9a98559a6cf"}, {"problem": 32, "code": "#(interleave % %)", "user": "53bd8d27e4b0d9a98559a6d6"}, {"problem": 32, "code": "#(interleave % %)", "user": "53b22df6e4b047364c044497"}, {"problem": 32, "code": "(fn dup [sq]\n  (let [twice (fn [n] [n n])]\n    (apply concat (map twice sq))))", "user": "53b4344de4b047364c0444b4"}, {"problem": 32, "code": "#(reduce (fn [x y]\n           (concat x [y y]))\n         []\n         %)", "user": "53aef31ce4b047364c04447b"}, {"problem": 32, "code": "(fn duped [coll]\n  (mapcat (fn [x] (list x x)) coll))", "user": "53bf0913e4b0c98a41f5cc99"}, {"problem": 32, "code": "#(interleave % %)", "user": "53be3ee7e4b0d9a98559a6df"}, {"problem": 32, "code": "(fn [x]\n  (loop [y x result []]\n    (if (empty? y) result\n      (recur (rest y) (conj (conj result (first y)) (first y))))))", "user": "52cf1e25e4b07d0d72b2739c"}, {"problem": 32, "code": "(fn [l] (apply concat (map (fn dbl [x] (list x x)) l)))", "user": "537a620be4b06839e8705e5f"}, {"problem": 32, "code": "(fn DuplicateSequence [seq]\n  (loop [out nil\n         in seq]\n    (if (empty? in)\n      out\n      (recur (concat out \n                     (repeat 2 (first in)))\n             (rest in)))))", "user": "53b88e6ee4b047364c0444de"}, {"problem": 32, "code": "(fn [col]\n  (loop [source col output []]\n    (if (empty? source)\n      output\n      (recur (rest source) (conj (conj output (first source)) (first source)))\n    )\n  )\n)", "user": "53beacf9e4b0d9a98559a6e3"}, {"problem": 32, "code": "#(interleave % %)", "user": "53bf0587e4b0c98a41f5cc98"}, {"problem": 32, "code": "(fn dup [xs] (if (empty? xs)\n               ()\n               (cons (first xs) (cons (first xs) (dup (rest xs))))))", "user": "53c051a5e4b0c98a41f5ccae"}, {"problem": 32, "code": "reduce #(concat % (list %2 %2)) '()", "user": "52b434c9e4b0c58976d9ad1c"}, {"problem": 32, "code": "(fn dup-seq [xs] (apply concat (map #(list % %) xs)) )", "user": "53c126fce4b00fb29b22125b"}, {"problem": 32, "code": "(fn [s]\n  (loop [s1 s acc '()]\n    (if (empty? s1)\n      acc\n      (recur (rest s1) (concat acc (list (first s1) (first s1)))))))", "user": "53bab6fae4b047364c0444fb"}, {"problem": 32, "code": "(fn [s]\n  (reduce \n   #(concat %1 (list %2 %2))\n   []\n   s))", "user": "53c1ce3ee4b00fb29b221268"}, {"problem": 32, "code": "(fn double-vision [x]\n  (if (empty? x)\n    '()\n    (let [val (first x)]\n    \t(cons val (cons val (double-vision (rest x)))))))", "user": "537f8e7be4b06839e8705eb8"}, {"problem": 32, "code": "(fn [l] (reduce #(concat %1 [%2 %2]) [] l))", "user": "5367bc60e4b0243289761e81"}, {"problem": 32, "code": "#(loop [col % result []]\n     (if(empty? col)\n     result\n     (let [colFirst (first col)]\n       (recur (rest col) (conj result colFirst colFirst)))))", "user": "53c38b8ce4b00fb29b22127b"}, {"problem": 32, "code": "(fn dup-seq [u]\n  (loop [i (- (count u) 1)\n         x '()]\n    (if (= i -1)\n      x\n      (recur (- i 1)\n             (conj x (nth u i) (nth u i))))))", "user": "5018878ce4b029375d2a5056"}, {"problem": 32, "code": "#(mapcat (partial repeat 2) %)", "user": "53c545ede4b00fb29b22128c"}, {"problem": 32, "code": "(fn [x] (reverse (reduce clojure.set/union (map #(list % %) x))))", "user": "5312807fe4b08068f379ecfc"}, {"problem": 32, "code": "(fn [s] (interleave (seq s) s))", "user": "53b952eee4b047364c0444e6"}, {"problem": 32, "code": "(fn [xs]\n    (reduce (partial apply conj) [] (map #(list % %) xs)))", "user": "53c3397be4b00fb29b221279"}, {"problem": 32, "code": "(fn doubleseq [sq] \n  (if \n    (empty? sq)\n    '()\n    (if\n      (empty? (rest sq)) \n      (repeat 2 (first sq))\n      (concat (repeat 2 (first sq)) (doubleseq (rest sq))))\n    ) \n  )", "user": "53342a1ce4b019098a6f8b8b"}, {"problem": 32, "code": "(fn [x] (interleave x x))", "user": "4fec08e8e4b0681fd128dc9d"}, {"problem": 32, "code": "(fn [x] (reduce #(conj % %2 %2) [] x))", "user": "53c74cfce4b00fb29b2212a7"}, {"problem": 32, "code": "(fn [s]\n  (reduce (fn [result [a b]] (conj result a b)) [] (map #(vector %1 %2) s s)))", "user": "53c649d3e4b00fb29b221297"}, {"problem": 32, "code": "#(for [x % y (range 2)] x)", "user": "53c349f5e4b00fb29b22127a"}, {"problem": 32, "code": "#(interleave % %)", "user": "538db083e4b0b51d73faae74"}, {"problem": 32, "code": "(fn dupSeq [s]\n  (\n   let [\n        foldF (fn [acc elem] (\n        \tcons elem (cons elem acc)\n        ))\n       ]\n   \t(\n       reverse (reduce foldF [] s)\n    )\n  )\n)", "user": "5183bccae4b028ec5fd2f2aa"}, {"problem": 32, "code": "(fn [coll] (reduce (fn [list val] (conj list val val)) [] coll ))", "user": "537bca8be4b06839e8705e71"}, {"problem": 32, "code": "(fn [l] (interleave l l))", "user": "524f4162e4b0541d1855b806"}, {"problem": 32, "code": "(fn [s]\n  (reverse (reduce #(cons %2 (cons %2 %1)) '() s)))", "user": "53b85932e4b047364c0444db"}, {"problem": 32, "code": "#(reduce (fn [c n] (conj c n n)) [] %)", "user": "53cb321fe4b00fb29b2212d1"}, {"problem": 32, "code": "#(interleave % %)", "user": "53cacdb5e4b00fb29b2212cb"}, {"problem": 32, "code": "(fn [inarray ] (reduce (fn [assoc row] (conj (conj assoc row) row) )  [] inarray))", "user": "53c6c9dfe4b00fb29b2212a1"}, {"problem": 32, "code": "#(interleave % %)", "user": "53cd4920e4b00fb29b2212de"}, {"problem": 32, "code": "(fn [coll]\n \t (loop \n       [i 0\n         s '()]\n    \t(if (= i (count coll))\n           (reverse s)\n           (recur (inc i) (conj (conj s (nth coll i)) (nth coll i))))))", "user": "53ce1daee4b00fb29b2212ec"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "4e587e78535d8a8b8723a293"}, {"problem": 32, "code": "(fn [x] (reduce concat (map #(list % % ) x)))", "user": "53cdb2c4e4b00fb29b2212e5"}, {"problem": 32, "code": "#(interleave % %)", "user": "534fa9dae4b084c2834f4acf"}, {"problem": 32, "code": "(fn [coll] (interleave coll coll))", "user": "5227eacee4b0186687e23a5e"}, {"problem": 32, "code": "(fn [s] (mapcat #(list % %) s))", "user": "53ced9fee4b00fb29b2212f8"}, {"problem": 32, "code": "(fn [input-seq]\n  (loop [full-seq input-seq\n         new-seq input-seq]\n    (let [current-elem (first full-seq)]\n      (if (empty? full-seq)\n        (sort new-seq)\n        (recur (rest full-seq) (conj new-seq current-elem))))))", "user": "53b05a36e4b047364c044481"}, {"problem": 32, "code": "reduce #(conj (conj % %2) %2) (vec [])", "user": "4f05c087535dcb61093f6c00"}, {"problem": 32, "code": "(fn [s] (reduce #(conj %1 %2 %2) [] s))", "user": "537e4432e4b06839e8705e9f"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "51b8d3d5e4b050a1176cd69d"}, {"problem": 32, "code": "#(interleave % %)", "user": "53ce8cb5e4b00fb29b2212f2"}, {"problem": 32, "code": "reduce (fn [xs x] (conj (conj xs x) x) ) []", "user": "53ca23e3e4b00fb29b2212c6"}, {"problem": 32, "code": "#(reduce concat(map vector % %))", "user": "53c0bc5fe4b00fb29b221257"}, {"problem": 32, "code": "(fn [coll]\n  (reduce\n    (fn [r x]\n      (conj r x x))\n    []\n    coll\n  ))", "user": "53ca41dae4b00fb29b2212c8"}, {"problem": 32, "code": "(fn [x] (reverse (reduce (fn [a b] (conj (conj a b) b)) nil x)))", "user": "53d00195e4b00fb29b221305"}, {"problem": 32, "code": "#(interleave % %)", "user": "53ce4cd4e4b00fb29b2212ef"}, {"problem": 32, "code": "reduce #(concat % (list %2 %2)) '()", "user": "51c8f1d8e4b07ef393169e5d"}, {"problem": 32, "code": "#(interleave % %)", "user": "53c9d29ae4b00fb29b2212c2"}, {"problem": 32, "code": "reduce #(concat %1 [%2 %2]) []", "user": "53cff414e4b00fb29b221304"}, {"problem": 32, "code": "(fn [c] (reduce concat (map #(take 2 (repeat %)) c)))", "user": "51e8736ae4b006d205356a4f"}, {"problem": 32, "code": "(fn [x] (sort(into x x)))", "user": "53d3856fe4b00fb29b22132b"}, {"problem": 32, "code": "mapcat (fn [e] [e e])", "user": "53d6cf90e4b0e771c302545c"}, {"problem": 32, "code": "#(mapcat identity (map (fn [x] [x x]) %))", "user": "523630eee4b05f3be1c7c8e8"}, {"problem": 32, "code": "(fn [l] \n  (apply concat \n   (map \n    (fn [e] [e e]) l)))", "user": "53ad2bbbe4b047364c044464"}, {"problem": 32, "code": "(partial reduce #(conj %1 %2 %2) [])", "user": "53d78b64e4b0e771c3025466"}, {"problem": 32, "code": "#(apply concat (map (fn [x] (list x x)) %))", "user": "53d5d24de4b0e771c302544a"}, {"problem": 32, "code": "reduce (fn [c, i] (conj c i i)) []", "user": "53d5e45ae4b0e771c302544e"}, {"problem": 32, "code": "(fn dup [coll]\n  (reduce concat (map #(repeat 2 %) coll)))", "user": "53d70f3be4b0e771c302545f"}, {"problem": 32, "code": "#(mapcat (fn [x] (concat [x] [x])) %)", "user": "51ad808ee4b09397d5109784"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "53d91412e4b0e771c3025474"}, {"problem": 32, "code": "#(reduce (fn [r x](conj r x x)) [] %)", "user": "53d5a63be4b0e771c3025449"}, {"problem": 32, "code": "(fn duplicate [ls]\n  (if (empty? ls)\n    '()\n    (conj (duplicate (rest ls)) (first ls) (first ls))))", "user": "53d87449e4b0e771c302546d"}, {"problem": 32, "code": "(fn [x](apply concat (map #(conj '() % %) x)))", "user": "53d0d7a9e4b00fb29b22130c"}, {"problem": 32, "code": "(fn [x] (reverse (loop [acc '()\n               h (first x)\n               r (rest x)]\n          (if (nil? h)\n            acc\n            (recur (into acc (list h h)) (first r) (rest r))))))", "user": "53663e82e4b0243289761e73"}, {"problem": 32, "code": "#(interleave % %)", "user": "53cdbad1e4b00fb29b2212e6"}, {"problem": 32, "code": "(fn\n   [LIST]\n   (apply concat (into [] (map (fn [x] [x x]) LIST))))", "user": "53d6b266e4b0e771c3025459"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "53d6024ae4b0e771c3025450"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "53da19fde4b0e771c3025484"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "53db43aae4b0e771c30254b1"}, {"problem": 32, "code": "(fn [c] (mapcat #(->[% %]) c))", "user": "4e6b8ac8535d8ccf87e9ff19"}, {"problem": 32, "code": "#(apply concat (map (fn [x] [x x]) %))", "user": "539dcb24e4b0b51d73faaf3d"}, {"problem": 32, "code": "(fn [list] (reduce #( -> (conj %1 %2 %2)) [] list))", "user": "53c73e8ae4b00fb29b2212a5"}, {"problem": 32, "code": "#(interleave % %)", "user": "53d920d9e4b0e771c3025475"}, {"problem": 32, "code": "(fn [l] (apply concat (map #(vector % %) l)))", "user": "53dcf474e4b0d874e779ae25"}, {"problem": 32, "code": "(fn [sq]\n  (apply concat (map (fn [x] (take 2 (repeat x))) sq)))", "user": "53d2afede4b00fb29b221321"}, {"problem": 32, "code": "mapcat (partial repeat 2)", "user": "53da8fede4b0e771c30254a3"}, {"problem": 32, "code": "(fn duplicate [coll] (reduce #(conj %1 %2 %2) [] coll))", "user": "53dc94c8e4b094d41abdfefc"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "53dd37aee4b0d874e779ae28"}, {"problem": 32, "code": "#(mapcat vector % %)", "user": "53dcdde4e4b0d874e779ae24"}, {"problem": 32, "code": "(fn dupe\n  ([lst] (dupe lst '()))\n  ([lst dupes] (if (= '() lst)\n                 dupes\n                 (dupe (rest lst) (concat dupes (list (first lst) (first lst)))))))", "user": "53ddd44be4b0d874e779ae2e"}, {"problem": 32, "code": "(fn dupli [s] (if (empty? s) '() (let [fs (first s)] (cons fs (cons fs (dupli (rest s)))))))", "user": "53de622ce4b0d874e779ae34"}, {"problem": 32, "code": "#(interleave % %)", "user": "52cda980e4b07d0d72b2737b"}, {"problem": 32, "code": "#(interleave % %)", "user": "53a83c74e4b047364c044426"}, {"problem": 32, "code": "(fn [x] (apply concat (map #(take 2(repeat %)) x)))", "user": "53968a70e4b0b51d73faaee0"}, {"problem": 32, "code": "(fn [c] (mapcat #(list % %) c))", "user": "51febd40e4b0f1313d468a76"}, {"problem": 32, "code": "#(mapcat (fn [a] (list a a)) %)", "user": "53da70a4e4b0e771c302549d"}, {"problem": 32, "code": "(fn dup [x]\n  (apply concat (map \n            (fn [s] \n              [s s])\n            x)))", "user": "53dfb864e4b0d874e779ae43"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "53d4dadde4b00fb29b221337"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "53dfdf01e4b0d874e779ae46"}, {"problem": 32, "code": "mapcat #(vector % %)", "user": "53e020c3e4b0d874e779ae49"}, {"problem": 32, "code": "(fn [x] (loop [accum () a-seq x]\n           (if (empty? a-seq)  (reverse accum)\n             (let [y (first a-seq) ] \n               (recur (conj accum y y) (rest a-seq))))))", "user": "52fdbf3ae4b047fd55837032"}, {"problem": 32, "code": "(fn [x] (mapcat #(repeat 2 %) x))", "user": "53d0c837e4b00fb29b22130b"}, {"problem": 32, "code": "#(interleave % %)", "user": "5377a23ce4b06839e8705e39"}, {"problem": 32, "code": "(fn my-dublicate \n\t\t([s] (my-dublicate (list) (seq s)))\n\t\t([new-list rest-seq]\n\t\t\t(if (empty? rest-seq)\n\t\t\t\tnew-list\n\n\t\t\t\t(let [curr-el (last new-list) next-el (first rest-seq) rest-seq (next rest-seq)]\n\t\t\t\t\t(my-dublicate (concat new-list [next-el next-el]) rest-seq)\n\t\t\t\t)\n\t\t\t)\n\t\t)\n\t)", "user": "53d382d8e4b00fb29b22132a"}, {"problem": 32, "code": "#(interleave % %)", "user": "53dc05d4e4b094d41abdfefa"}, {"problem": 32, "code": "#(interleave % %)", "user": "53ded676e4b0d874e779ae3b"}, {"problem": 32, "code": "#(mapcat list % %)", "user": "53e19461e4b0d874e779ae59"}, {"problem": 32, "code": "#(apply concat (map (fn [x] (list x x)) %))", "user": "53e23ab7e4b036ad0777e3ef"}, {"problem": 32, "code": "#(reduce (fn [x y] (concat x [y y])) [] %)", "user": "53e2b212e4b036ad0777e3f4"}, {"problem": 32, "code": "#(apply concat (for [x %] [x x]))", "user": "53dadf1de4b0e771c30254ad"}, {"problem": 32, "code": "(fn [coll] (mapcat #(repeat 2 %) coll))", "user": "53e241a6e4b036ad0777e3f0"}, {"problem": 32, "code": "(fn  f1 [x] ( if (not (empty? x)) (cons (first x) (cons (first x) (f1 (rest x))))))", "user": "53b293d3e4b047364c04449b"}, {"problem": 32, "code": "#(interleave % %)", "user": "538ca203e4b0b51d73faae5f"}, {"problem": 32, "code": "(fn [sqn] (reduce concat (map #(list %1 %1) sqn) ) )", "user": "53e2ac1ae4b036ad0777e3f3"}, {"problem": 32, "code": "( fn \n  [col]\n  (sort (reduce conj (reverse col) col ))\n  \n)", "user": "516d227fe4b06f078fab252d"}, {"problem": 32, "code": "(fn [xs] (reverse (reduce #(cons %2 (cons %2 %1)) [] xs)))", "user": "53dfbc75e4b0d874e779ae44"}, {"problem": 32, "code": "#(mapcat list % %)", "user": "53e4fa2ce4b036ad0777e454"}, {"problem": 32, "code": "(fn doubleup [[first & rest]] (when first (cons first (cons first (lazy-seq (doubleup rest))))))", "user": "53d28800e4b00fb29b22131e"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "53e27bf1e4b036ad0777e3f2"}, {"problem": 32, "code": "mapcat #(vector % %)", "user": "530bae80e4b02e82168697d0"}, {"problem": 32, "code": "#(interleave % %)", "user": "53e3e852e4b036ad0777e407"}, {"problem": 32, "code": "(fn func [xs]\n  (if (= 1 (count xs))\n    (seq (list (first xs) (first xs)))\n    (concat (seq (list (first xs) (first xs))) (func (rest xs)))))", "user": "525890f7e4b0cb4875a45cb5"}, {"problem": 32, "code": "#(sort (take (* 2 (count %)) (cycle %)))", "user": "53844970e4b06839e8705eef"}, {"problem": 32, "code": "#(reduce (fn [res, this] (conj res this this)) [] %1)", "user": "53e15371e4b0d874e779ae54"}, {"problem": 32, "code": "mapcat #(concat [%] [%])", "user": "53e92821e4b036ad0777e499"}, {"problem": 32, "code": "#(mapcat (partial repeat 2) %)", "user": "53e3f7a8e4b036ad0777e408"}, {"problem": 32, "code": "(fn [li] (apply concat (map #(list % %) li)))", "user": "53e76bb2e4b036ad0777e47d"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "53e150e5e4b0d874e779ae53"}, {"problem": 32, "code": "mapcat (fn [x] (repeat 2 x))", "user": "53d88bd5e4b0e771c302546e"}, {"problem": 32, "code": "(fn [x] (mapcat (fn [i] (list i i)) x))", "user": "53e91473e4b036ad0777e495"}, {"problem": 32, "code": "(fn [seq] (mapcat #(repeat 2 %) seq))", "user": "4ed3b4a7535d44c135fd68f5"}, {"problem": 32, "code": "#(concat (interleave % %))", "user": "4f1ff504535d64f6031464a6"}, {"problem": 32, "code": "(fn [coll] (interleave coll coll))", "user": "53dfd77fe4b0d874e779ae45"}, {"problem": 32, "code": "(fn [x] (apply concat (map #(repeat 2 %) x)))", "user": "53d2fb7ae4b00fb29b221326"}, {"problem": 32, "code": "(fn [seq] \n  (mapcat (fn [x] (list x x)) seq))", "user": "53e30fcae4b036ad0777e3fc"}, {"problem": 32, "code": "(fn [s] (mapcat identity\n    \t(map (fn [x] (cons x (cons x '()))) s)))", "user": "52ba2639e4b07a9af57922cb"}, {"problem": 32, "code": "#(interleave % %)", "user": "528d6b10e4b0239c8a67aec3"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "53e9a15be4b036ad0777e4ae"}, {"problem": 32, "code": "(fn [c] (apply concat (map #(list % %) c)))", "user": "53e4b5a3e4b036ad0777e44b"}, {"problem": 32, "code": "#(mapcat list % %)", "user": "53eb8ceae4b036ad0777e4fb"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "53ecac57e4b0d648e757f4b3"}, {"problem": 32, "code": "#(interleave % %)", "user": "5343753ae4b084c2834f4a1b"}, {"problem": 32, "code": "(fn dup [x]\n  (cond\n    (empty? x) x\n    true       (concat [(first x)] [(first x)] (dup (rest x)))\n  )\n)", "user": "53edb628e4b0d648e757f4c8"}, {"problem": 32, "code": "#(interleave % %)", "user": "53e0001be4b0d874e779ae48"}, {"problem": 32, "code": "#(interleave % %)", "user": "53ede8e3e4b0d648e757f4cc"}, {"problem": 32, "code": "#(interleave % %)", "user": "5360b327e4b0243289761e38"}, {"problem": 32, "code": "(fn [sq] (mapcat #(list % %) sq))", "user": "53ea72b6e4b036ad0777e4e5"}, {"problem": 32, "code": "#(interleave % %)", "user": "53ea5307e4b036ad0777e4e2"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "53bf9cfbe4b0c98a41f5cca4"}, {"problem": 32, "code": "(fn [col] (mapcat #(conj (conj '() %1) %1) col))", "user": "53c06438e4b0c98a41f5ccb0"}, {"problem": 32, "code": "(fn [col] (reduce #(conj %1 %2 %2) [] col))", "user": "53dcb9b2e4b0d874e779ae23"}, {"problem": 32, "code": "(fn duplicate\n  ([coll] (duplicate coll []))\n  ([coll result] (if (empty? coll)\n                        result\n                        (recur (rest coll) (conj result (first coll) (first coll))))))", "user": "53ecd01fe4b0d648e757f4b9"}, {"problem": 32, "code": "#(reduce concat(map (fn[e](repeat 2 e)) %))", "user": "538d70abe4b0b51d73faae6e"}, {"problem": 32, "code": "(fn [x] (reduce concat (map #(repeat 2 %) x)))", "user": "53e92aafe4b036ad0777e49a"}, {"problem": 32, "code": "#(interleave % %)", "user": "53ee7f2ee4b0d648e757f4cf"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "53217912e4b09d4e7a9b54b3"}, {"problem": 32, "code": "(fn [coll] \n  (reverse (reduce (fn [accum elem] (conj accum elem elem)) '() coll))\n  )", "user": "53ed6976e4b0d648e757f4c4"}, {"problem": 32, "code": "mapcat #(take 2 (repeat %))", "user": "53edb464e4b0d648e757f4c7"}, {"problem": 32, "code": "#(interleave % %)", "user": "53e8cefde4b036ad0777e48d"}, {"problem": 32, "code": "mapcat #(conj '() % %)", "user": "53f1c05ee4b0742d9025b0e1"}, {"problem": 32, "code": "mapcat (fn [a] (list a a))", "user": "537b1083e4b06839e8705e64"}, {"problem": 32, "code": "(fn [coll]\n   (mapcat #(conj [] % %) coll)\n)", "user": "53ef3adfe4b0742d9025b0c9"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "523578efe4b0a643f2dcb74c"}, {"problem": 32, "code": "#(for [x % y [1 2]] x)", "user": "53e9681de4b036ad0777e4a4"}, {"problem": 32, "code": "reduce #(concat %1 (list %2 %2)) []", "user": "53f035c2e4b0742d9025b0d2"}, {"problem": 32, "code": "reduce (fn[x y] (conj x y y)) []", "user": "53ed2fafe4b0d648e757f4c1"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "53ef78bee4b0742d9025b0cd"}, {"problem": 32, "code": "(fn [sequenceA]\n  (loop [rem_seq sequenceA result '()]\n    (if (empty? rem_seq)\n      (reverse result)\n      (recur\n        (rest rem_seq)\n        (cons (first rem_seq) (cons (first rem_seq) result))\n      )\n    )\n  )\n)", "user": "53f17931e4b0742d9025b0dd"}, {"problem": 32, "code": "(fn [a]\n  (loop [res [] i 0]\n    (if (< i (count a))\n      (recur (conj res (nth a i) (nth a i)) (inc i) )\n      res\n      )\n    )\n  )", "user": "53f152bce4b0742d9025b0dc"}, {"problem": 32, "code": "(fn [s]\n   (loop [new  []\n          remaining s]\n     (if (empty? remaining)\n       new\n       (recur\n         (conj new (first remaining) (first remaining) )\n         (rest remaining)))))", "user": "53d10553e4b00fb29b22130f"}, {"problem": 32, "code": "#(interleave % %)", "user": "53f49dfae4b0db01ade6f9c2"}, {"problem": 32, "code": "(fn [coll]\n  (reverse (loop [acc '()\n                  from coll]\n             (if (empty? from) acc\n               (let [x (first from)]\n                 (recur (into acc (list x x)) (rest from)))))))", "user": "53ea3a63e4b036ad0777e4dc"}, {"problem": 32, "code": "(fn [coll] (mapcat #(list % %) coll))", "user": "53f35c34e4b0742d9025b0f4"}, {"problem": 32, "code": "(fn [x] \n\n(reduce concat (map #(repeat 2 %) x))\n        \n)", "user": "53f4c3d6e4b0db01ade6f9c5"}, {"problem": 32, "code": "(partial reduce (fn [x y] (conj x y y)) [])", "user": "53f592b7e4b0db01ade6f9d0"}, {"problem": 32, "code": "reduce (fn [final_seq element]\n         (concat final_seq (list element element))) []", "user": "53f50c03e4b0db01ade6f9ca"}, {"problem": 32, "code": "reduce (fn [acc item]\n             (concat acc (cons item (list item)))) '()", "user": "53214efbe4b09d4e7a9b54b2"}, {"problem": 32, "code": "(fn dup\n  [coll]\n  (when (seq coll)\n    (concat [(first coll) (first coll)] (dup (rest coll)))))", "user": "53e57ba2e4b036ad0777e45c"}, {"problem": 32, "code": "reduce #(conj % %2 %2) []", "user": "53cd421ce4b00fb29b2212dd"}, {"problem": 32, "code": "mapcat #(conj [%] %)", "user": "53f7008be4b0de5c41848557"}, {"problem": 32, "code": "(fn [x] (apply concat (map #(list % %) x)))", "user": "53f733f4e4b0de5c4184855a"}, {"problem": 32, "code": "(fn caps [entry] \n  (when (first entry)\n    \n    (concat (list (first entry) (first entry)) (caps (rest entry)) )\n    )\n)", "user": "53f12b77e4b0742d9025b0da"}, {"problem": 32, "code": "(fn\n  [coll]\n  (loop [coll coll \n         acc '()]\n    (if (= 0 (count coll)) acc\n      (recur (drop-last coll) (conj (conj acc (last coll)) (last coll))))))", "user": "53cbe808e4b00fb29b2212d4"}, {"problem": 32, "code": "(fn [l]\n  (reduce \n    (fn [x y] \n      (conj x y y)\n    )\n    []\n   \tl\n  )\n)", "user": "53f6d555e4b0db01ade6f9e5"}, {"problem": 32, "code": "#(mapcat (fn [x] [x x]) %)", "user": "513e8141e4b02b2a3d8235c1"}, {"problem": 32, "code": "#(loop [[head & tail] %\n        acc []]\n   (if (nil? head)\n     acc\n     (recur tail (conj acc head head))\n   )\n)", "user": "53f7820be4b0de5c41848560"}, {"problem": 32, "code": "#(sort (concat % %))", "user": "53f5f740e4b0db01ade6f9d8"}, {"problem": 32, "code": "#(interleave % %)", "user": "53c99f60e4b00fb29b2212c1"}, {"problem": 32, "code": "(fn [x] (interleave x x))", "user": "53f6566ee4b0db01ade6f9de"}, {"problem": 32, "code": "(fn [xs] (apply concat (map (fn [x] [x x]) xs)))", "user": "53f74528e4b0de5c4184855c"}, {"problem": 32, "code": "(fn [xs] (mapcat (fn [x] [x x]) xs))", "user": "53ef7f77e4b0742d9025b0ce"}, {"problem": 32, "code": "(fn [coll]\n  (reduce concat\n   (map (fn [x] (cons x (list x))) coll)))", "user": "53bd7080e4b0d9a98559a6d1"}, {"problem": 32, "code": "#(reduce into [] (for [x %1] [x x]))", "user": "5398123ee4b0b51d73faaef3"}, {"problem": 32, "code": "#(interleave % %)", "user": "53fa3524e4b0de5c41848578"}, {"problem": 32, "code": "mapcat #(list %1 %1)", "user": "53607c32e4b0243289761e37"}, {"problem": 32, "code": "(fn [xs] (mapcat #(repeat 2 %) xs))", "user": "53f77b6ae4b0de5c4184855f"}, {"problem": 32, "code": "#(interleave % %)", "user": "53f75957e4b0de5c4184855d"}, {"problem": 32, "code": "reduce #(concat %1 (repeat 2 %2)) []", "user": "53ce0a29e4b00fb29b2212eb"}, {"problem": 32, "code": "#(apply concat (map (fn [x] [x x]) %))", "user": "53fb5256e4b0de5c4184857f"}, {"problem": 32, "code": "#(interleave % %)", "user": "53edb840e4b0d648e757f4c9"}, {"problem": 32, "code": "mapcat #(vector % %)", "user": "53e67e69e4b036ad0777e473"}, {"problem": 32, "code": "(fn peu [x] (if (empty? x) x (conj (peu (rest x)) (first x) (first x))))", "user": "53fc8424e4b0de5c418485b3"}, {"problem": 32, "code": "(fn [x]\n  (apply concat (map #(repeat 2 %) x)))", "user": "53e40b17e4b036ad0777e40c"}, {"problem": 32, "code": "#(interleave % %)", "user": "53d86564e4b0e771c302546b"}, {"problem": 32, "code": "#(interleave % %)", "user": "53cfa79ce4b00fb29b2212ff"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "52d2cb0fe4b099d49816f0b5"}, {"problem": 32, "code": "(fn [x] (reduce #(conj %1 %2 %2) [] x))", "user": "53fcb8f7e4b0de5c418485d4"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "53fe1c3be4b0de5c418485f2"}, {"problem": 32, "code": "(fn [x] (apply concat (map (fn [z] (list z z)) x) ) )", "user": "53fdc4b8e4b0de5c418485ea"}, {"problem": 32, "code": "#(interleave % %)", "user": "53fddd71e4b0de5c418485eb"}, {"problem": 32, "code": "#(apply concat (map (fn [n] (repeat 2 n)) %))", "user": "53fe1b42e4b0de5c418485f1"}, {"problem": 32, "code": "(fn [items]\n   (reduce (fn [duplicated item] (concat duplicated [item item])) () items ))", "user": "53ff602fe4b0de5c418485ff"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "4f392fc8e4b0e243712b1ee7"}, {"problem": 32, "code": "reduce #(into % [%2 %2]) []", "user": "53e1e1f1e4b0d874e779ae5e"}, {"problem": 32, "code": "(fn rep [x] (mapcat #(repeat 2 %) x))", "user": "53f3a4ace4b0742d9025b0f7"}, {"problem": 32, "code": "(fn [x] (mapcat #(list % %) x))", "user": "4f963487e4b0dcca54ed6cd9"}, {"problem": 32, "code": "(fn [s] (reverse (reduce #(conj %1 %2 %2) '() s)))", "user": "54008b88e4b0de5c4184860d"}, {"problem": 32, "code": "(fn [in] (mapcat identity (map #(list % %) in)))", "user": "53fcdd1ae4b0de5c418485dd"}, {"problem": 32, "code": "mapcat (fn [x] [x x])", "user": "5400fc30e4b0de5c4184861b"}, {"problem": 32, "code": "#(apply concat (for [i %] [i i]))", "user": "53fb4843e4b0de5c4184857d"}, {"problem": 32, "code": "#(interleave % %)", "user": "524b827ce4b09eba1c0223d7"}, {"problem": 32, "code": "(fn dup\n  [x]\n  (mapcat #(identity [% %]) x))", "user": "5401aefbe4b0df28a13c62c7"}, {"problem": 32, "code": "(fn\n  [input]\n  (loop [coll input\n         result []]\n    (if (empty? coll)\n      result\n      (recur (rest coll) (conj result (first coll) (first coll))))\n   ))", "user": "54021f13e4b0df28a13c62cc"}, {"problem": 32, "code": "(fn duplicateseq\n [myseq]\n  (apply concat (map (fn duplicateseq\n         [element]\n         [element element]) myseq)\n  )\n)", "user": "53fe459ae4b0de5c418485f4"}, {"problem": 32, "code": "#(interleave % %)", "user": "53f5666ee4b0db01ade6f9cf"}, {"problem": 32, "code": "#(interleave % %)", "user": "53fc713be4b0de5c418485a0"}, {"problem": 32, "code": "(fn [coll] (interleave coll coll))", "user": "53ed6befe4b0d648e757f4c5"}, {"problem": 32, "code": "#(apply concat (map (fn [x] (repeat 2 x)) %))", "user": "53ed03f0e4b0d648e757f4bb"}, {"problem": 32, "code": "#(interleave % %)", "user": "5405ae2be4b0addc1aec6671"}, {"problem": 32, "code": "(fn [seqs] \n  (let [out ()]\n  \t(apply concat (map #(conj out % %) seqs))))", "user": "53fdbe0fe4b0de5c418485e9"}, {"problem": 32, "code": "#(reverse (reduce (fn [s i] (conj s i i)) '() %))", "user": "5251b11be4b0541d1855b87b"}, {"problem": 32, "code": "#(interleave % %)", "user": "52ed7458e4b0a18b0f5dd9ed"}, {"problem": 32, "code": "#(mapcat (fn [x] [x x]) %)", "user": "53fc4561e4b0de5c4184859a"}, {"problem": 32, "code": "#(interleave % %)", "user": "5373451fe4b06d7f452d9e0b"}, {"problem": 32, "code": "(fn duplicate\n      [lista] (apply concat (map #(list % %) lista)))", "user": "540271aee4b0df28a13c62d0"}, {"problem": 32, "code": "#(apply concat (map (fn [x] `(~x ~x)) %))", "user": "53b9bb15e4b047364c0444ed"}, {"problem": 32, "code": "(fn [lst]\n  (loop [lst lst\n         acc '()]\n    (if (empty? lst)\n      (reverse acc)\n      (recur (rest lst)\n             (concat (list (first lst) (first lst)) acc)))))", "user": "54084784e4b0addc1aec66c9"}, {"problem": 32, "code": "#(mapcat (fn [x] (conj [] x x)) %)", "user": "53a442a6e4b0b62ce300572d"}, {"problem": 32, "code": "#(interleave % %)", "user": "540479e7e4b0addc1aec665a"}, {"problem": 32, "code": "(fn foo [xs] (apply concat (map (fn [y] [y y]) xs)))", "user": "53e8c684e4b036ad0777e48b"}, {"problem": 32, "code": "#(reduce (fn [prev,cur] (concat prev (list cur cur))) '() %)", "user": "53f9fe41e4b0de5c41848575"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "540b2dcbe4b0addc1aec66f4"}, {"problem": 32, "code": "reduce #(concat %1 (repeat 2 %2)) []", "user": "54023bbfe4b0df28a13c62cd"}, {"problem": 32, "code": "(fn sk-duplicate [l]\n  (interleave l l))", "user": "51d42f44e4b013d740b70ddb"}, {"problem": 32, "code": "(fn [a-seq]\n  (let [r (fn [acc e]\n              (concat acc (repeat 2 e)))]\n    (reduce r [] a-seq)))", "user": "53fd0a22e4b0de5c418485e1"}, {"problem": 32, "code": "mapcat #(into [] [% %])", "user": "540d7dd1e4b0addc1aec6713"}, {"problem": 32, "code": "(fn duplicate \n  [x]\n  (loop [y x new_seq '()]\n    (if (empty? y)\n      (reverse new_seq)\n      (recur (rest y) (conj new_seq (first y) (first y))))))", "user": "54091b82e4b0addc1aec66d5"}, {"problem": 32, "code": "(fn [coll] (reduce #(conj %1 %2 %2) [] coll))", "user": "54094824e4b0addc1aec66da"}, {"problem": 32, "code": "(fn [x] (reduce concat (map #(vector % %) x)))", "user": "53fc4abae4b0de5c4184859b"}, {"problem": 32, "code": "#(loop [coll %\n        res []]\n   (let [elem (first coll)]\n     (if (nil? elem)\n       res\n       (recur (rest coll) (conj res elem elem)))))", "user": "540e97f9e4b0addc1aec671f"}, {"problem": 32, "code": "mapcat #(vector % %)", "user": "540f2c48e4b0addc1aec6727"}, {"problem": 32, "code": "#(reduce concat (map (fn [x] [x x]) %))", "user": "540e17c3e4b0addc1aec6719"}, {"problem": 32, "code": "(partial mapcat #(list % %))", "user": "540e0637e4b0addc1aec6717"}, {"problem": 32, "code": "#(interleave % %)", "user": "53e92f82e4b036ad0777e49d"}, {"problem": 32, "code": "(fn [col]\n  (reduce\n   (fn [acc e]\n     (concat acc (repeat 2 e)))\n   '()\n   col))", "user": "540d5085e4b0addc1aec670e"}, {"problem": 32, "code": "(fn [coll]\n  (loop [coll (reverse coll)\n         result []]\n    (if (empty? coll)\n      result\n      (recur (rest coll) (cons (first coll) (cons (first coll) result))))))", "user": "53eaa804e4b036ad0777e4ea"}, {"problem": 32, "code": "#(interleave % %)", "user": "5409f8eae4b0addc1aec66e6"}, {"problem": 32, "code": "(partial mapcat (juxt identity identity))", "user": "50282baee4b01614d1633ff6"}, {"problem": 32, "code": "#(apply concat (map (fn [n] [n n]) %))", "user": "540d0087e4b0addc1aec670b"}, {"problem": 32, "code": "(fn [x] (mapcat #(list % %) x))", "user": "53e543efe4b036ad0777e457"}, {"problem": 32, "code": "(fn [s] (reduce concat (map (fn [x] (seq [x x])) s)) )", "user": "540904a7e4b0addc1aec66d2"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "53f2370ee4b0742d9025b0e7"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "52fd3da0e4b047fd5583702a"}, {"problem": 32, "code": "#(interleave % %)", "user": "52ec2b9ae4b0705949c4444f"}, {"problem": 32, "code": "(fn [coll] (interleave coll coll))", "user": "53f6bfd9e4b0db01ade6f9e4"}, {"problem": 32, "code": "#(reduce into (map (fn [x] [x x]) %))", "user": "5286a2a9e4b0239c8a67ae1e"}, {"problem": 32, "code": "#(interleave %1 %1)", "user": "54081523e4b0addc1aec66c5"}, {"problem": 32, "code": "(fn [l] (apply concat (map (fn[x] [x x]) l)))", "user": "53e76728e4b036ad0777e47c"}, {"problem": 32, "code": "(fn [sq]\n  (mapcat #(repeat 2 %) sq))", "user": "540c54a7e4b0addc1aec6700"}, {"problem": 32, "code": "#(interleave % %)", "user": "53777c44e4b06839e8705e32"}, {"problem": 32, "code": "(fn [x]\n  (apply concat (map #(list % %) x)))", "user": "541475afe4b01498b1a719eb"}, {"problem": 32, "code": "#(apply concat (for [x %] [x x]))", "user": "52541fe6e4b0541d1855b964"}, {"problem": 32, "code": "(letfn [(f [[x & xs :as xss]]\n           (if (seq xss)\n             (into (f xs) [x x])\n             '()))]\n  f)", "user": "540470dae4b0addc1aec6658"}, {"problem": 32, "code": "#(reduce (fn [acc v] (into acc [v v])) [] %)", "user": "54133900e4b01498b1a719de"}, {"problem": 32, "code": "#(mapcat (juxt identity identity) %)", "user": "54157dace4b01498b1a719f4"}, {"problem": 32, "code": "(fn [coll]\n  (reduce #(conj % %2 %2) [] coll))", "user": "540ff039e4b01498b1a7199b"}, {"problem": 32, "code": "(fn [xs]\n  (mapcat (fn [x] [x x]) xs))", "user": "501948b3e4b0b6630b101db5"}, {"problem": 32, "code": "#(let [a (atom '())] \n  (doseq [e %] \n    (swap! a conj e e)) \n  (reverse @a))", "user": "54139cd4e4b01498b1a719e3"}, {"problem": 32, "code": "mapcat (fn [a] [a a])", "user": "541096bde4b01498b1a719b2"}, {"problem": 32, "code": "(fn\n  [s]\n  (reduce #(conj %1 %2 %2) [] s))", "user": "540efe2ee4b0addc1aec6724"}, {"problem": 32, "code": "(fn duplicate [coll]\n  (if (empty? coll)\n    nil\n    (cons (first coll) (cons (first coll) (duplicate (rest coll))))))", "user": "54125eeee4b01498b1a719d3"}, {"problem": 32, "code": "(fn [s]\n  (loop [s s\n         acc '()]\n    (if (empty? s)\n      (reverse acc)\n      (recur (rest s) (cons (first s) (cons (first s) acc)))\n    )\n  )\n)", "user": "540f09b9e4b0addc1aec6725"}, {"problem": 32, "code": "(fn [coll] (apply concat (map #(vector % %) coll)))", "user": "54165291e4b01498b1a719fb"}, {"problem": 32, "code": "(fn foo [x] (interleave x x))", "user": "54125062e4b01498b1a719d2"}, {"problem": 32, "code": "(fn [coll]\n  (mapcat #(list % %) coll))", "user": "5412d5d2e4b01498b1a719d9"}, {"problem": 32, "code": "#(interleave % %)", "user": "541619e8e4b01498b1a719f9"}, {"problem": 32, "code": "(fn [x] (apply concat (map (fn [y] (concat y y) ) (partition-by identity x))))", "user": "54180369e4b01498b1a71a13"}, {"problem": 32, "code": "#(mapcat list % %)", "user": "54187e84e4b01498b1a71a1b"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "541074f1e4b01498b1a719ac"}, {"problem": 32, "code": "#(reduce concat (map (fn [x y] [x y]) % %))", "user": "541404c2e4b01498b1a719e7"}, {"problem": 32, "code": "(fn duplicate [coll]\n  (reduce #(apply conj %1 [%2 %2]) [] coll))", "user": "53fd66a4e4b0de5c418485e3"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "541b37d2e4b01498b1a71a64"}, {"problem": 32, "code": "(fn [coll] (reduce (fn [z v] (conj z v v)) [] coll))", "user": "51c1b644e4b0d204dbe2ca12"}, {"problem": 32, "code": "#(apply concat (map (fn f[x] (repeat 2 x)) %))", "user": "5416aacce4b01498b1a719ff"}, {"problem": 32, "code": "mapcat (fn [x] [x x])", "user": "54149f2fe4b01498b1a719ec"}, {"problem": 32, "code": "(fn [sequ]\n(loop [s sequ a []] \n  (if (= 0 (count s)) \n    a \n    (recur \n     (rest s) \n     (conj a (first s) (first s)))\n    )\n  ))", "user": "540b4c4de4b0addc1aec66f6"}, {"problem": 32, "code": "(fn dupl [coll]\n  (reduce (fn [acc x] (conj (conj acc x) x)) [] coll))", "user": "54100c73e4b01498b1a7199e"}, {"problem": 32, "code": "#(apply concat (map (fn [x] [x x]) %))", "user": "5282f54be4b0239c8a67ada0"}, {"problem": 32, "code": "#(mapcat list % %)", "user": "541ae7dbe4b01498b1a71a61"}, {"problem": 32, "code": "(fn [x] (mapcat (fn [el] [el el]) x))", "user": "52d6d490e4b09f7907dd1369"}, {"problem": 32, "code": "(fn [coll]\n  (reverse\n   (reduce #(cons %2 (cons %2 %1)) '() coll)))", "user": "541f5b37e4b01498b1a71a97"}, {"problem": 32, "code": "mapcat (fn [x] [x x])", "user": "541f6bc0e4b01498b1a71a98"}, {"problem": 32, "code": "(fn [inputSeq] (loop [result []\n                      values inputSeq]\n                 (if (empty? values)\n                   result\n                   (let [firstValue (first values)]\n                     (recur (conj (conj result firstValue) firstValue) (rest values))))))", "user": "540c288ae4b0addc1aec66ff"}, {"problem": 32, "code": "#(apply concat (map (fn [x] (conj (conj '() x) x)) %))", "user": "511036c5e4b04c71fce993ee"}, {"problem": 32, "code": "#(loop [new [] c 0] \n   (if (>= c (count %))\n     new\n     (recur (conj new (nth % c) (nth % c)) (inc c))))", "user": "541c1e46e4b01498b1a71a70"}, {"problem": 32, "code": "#(interleave % %)", "user": "54084089e4b0addc1aec66c7"}, {"problem": 32, "code": "#(interleave % %)", "user": "5412ef7ee4b01498b1a719da"}, {"problem": 32, "code": "(fn dupelcate [coll]\n  (loop [orig coll ret []]\n    (if (empty? orig)\n      ret\n      (recur (rest orig) (conj (conj ret (first orig)) (first orig))))))", "user": "4ff0e01fe4b0678c553fc328"}, {"problem": 32, "code": "(fn [toRep] (reduce concat (map #(take 2 (iterate (fn [x] x) %)) toRep)))", "user": "53ff8c31e4b0de5c41848603"}, {"problem": 32, "code": "#(reduce (fn [result, x] (concat result [x x])) [] %)", "user": "54213a8fe4b01498b1a71aaf"}, {"problem": 32, "code": "#(mapcat list % %)", "user": "5409a12fe4b0addc1aec66df"}, {"problem": 32, "code": "(fn [a] (mapcat #(conj () %1 %1) a))", "user": "541168dee4b01498b1a719c3"}, {"problem": 32, "code": "#(interleave %1 %1)", "user": "516ee939e4b06aac486e5b34"}, {"problem": 32, "code": "(fn dup [s]\n    (if (empty? s)\n      '()\n      (cons (first s)\n            (cons (first s) (dup (rest s))))))", "user": "52b2f9cae4b0c58976d9acfb"}, {"problem": 32, "code": "#(interleave % %)", "user": "5421cd6be4b01498b1a71ab7"}, {"problem": 32, "code": "#(interleave % %)", "user": "541ad1c1e4b01498b1a71a5c"}, {"problem": 32, "code": "#(interleave % %)", "user": "54185dc3e4b01498b1a71a19"}, {"problem": 32, "code": "#(reduce (fn [x y] (concat x [y y])) [] %1)", "user": "54246d6de4b01498b1a71aec"}, {"problem": 32, "code": "#(interleave % %)", "user": "54246fcce4b01498b1a71aed"}, {"problem": 32, "code": "(fn dup [coll]\n  (if (seq coll)\n    (cons (first coll) (cons (first coll) (dup (rest coll))))\n    coll))", "user": "5370d152e4b0fc7073fd6e9d"}, {"problem": 32, "code": "(fn[x] (reduce concat (map #(take 2 (repeat %)) x)))", "user": "53e1040be4b0d874e779ae4e"}, {"problem": 32, "code": "(fn [x] (apply concat (map #(repeat (* 2 (count %)) (first %)) (partition-by list x))))", "user": "54227fc6e4b01498b1a71ac0"}, {"problem": 32, "code": "(fn [a]\n  (reduce #(conj (conj %1 %2) %2) [] a))", "user": "54159032e4b01498b1a719f5"}, {"problem": 32, "code": "(fn [coll]\n   (loop [source coll sink '[]]\n     (if (empty? source)\n       sink\n       (recur (rest source) (conj (conj sink (first source)) (first source))))))", "user": "542769f8e4b01498b1a71b24"}, {"problem": 32, "code": "#(interleave % %)", "user": "5424c523e4b01498b1a71b03"}, {"problem": 32, "code": "(fn [x] (mapcat #(list % %) x))", "user": "54299d4be4b01498b1a71b3d"}, {"problem": 32, "code": "(fn  [s]                                                                                \n        (loop [x s res []]                                                                         \n          (if (> (count x)0 )                                                                      \n            (recur (rest x) (conj res (first x) (first x)))                                        \n            res)))", "user": "5423dc6ae4b01498b1a71ad5"}, {"problem": 32, "code": "#(apply concat (map (fn [e] [e e]) %))", "user": "54194782e4b01498b1a71a29"}, {"problem": 32, "code": "(fn [x] (reduce (fn [c i] (conj c i i)) [] x))", "user": "54257124e4b01498b1a71b09"}, {"problem": 32, "code": "#(interleave % % )", "user": "54258a7fe4b01498b1a71b0c"}, {"problem": 32, "code": "#(apply concat (for [x %] [x x]))", "user": "5425d454e4b01498b1a71b13"}, {"problem": 32, "code": "(fn [x] (mapcat #(vector % %) x))", "user": "51ca5378e4b08b1cbd0d9480"}, {"problem": 32, "code": "#(interleave % %)", "user": "53c51dc5e4b00fb29b221288"}, {"problem": 32, "code": "#(reduce concat (map (fn [x] (list x x))%))", "user": "542d2385e4b0dad94371f2b2"}, {"problem": 32, "code": "(fn [in]\n   (reduce (fn [acc x] (into acc [x x])) [] in))", "user": "5429986ce4b01498b1a71b3b"}, {"problem": 32, "code": "#(reduce (fn [x y]\n          (conj x y y)) [] %)", "user": "541735b3e4b01498b1a71a07"}, {"problem": 32, "code": "(fn f [l]\n(apply concat (map #(list % %) l)))", "user": "54296802e4b01498b1a71b38"}, {"problem": 32, "code": "(fn [inp]\n  (->> inp\n       (map #(list % %))\n       (apply concat)))", "user": "542c22bde4b0dad94371f29e"}, {"problem": 32, "code": "(fn [c] (reduce #(conj % %2 %2) [] c))", "user": "53f78944e4b0de5c41848561"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "4fc4541ae4b081705acca348"}, {"problem": 32, "code": "(fn dup [coll]\n  (let [x (first coll) y (next coll)]\n    (concat (repeat 2 x)\n            (if (not= nil y)\n              (dup y)))))", "user": "542c026ae4b0dad94371f29a"}, {"problem": 32, "code": "#(interleave % %)", "user": "53a01fb1e4b0ca733b9744a6"}, {"problem": 32, "code": "#(interleave % %)", "user": "542db41be4b0dad94371f2bb"}, {"problem": 32, "code": "#(mapcat vector % %)", "user": "540e8d13e4b0addc1aec671e"}, {"problem": 32, "code": "#(loop [elems % res '()]\n   (if (empty? elems)\n     res\n     (recur (butlast elems) (let [le (last elems)] (conj res le le)))))", "user": "54302691e4b0dad94371f2d7"}, {"problem": 32, "code": "#(interleave %1 %1)", "user": "53765e1ae4b06839e8705e23"}, {"problem": 32, "code": "(fn dupe [x]\n\t(if (> (count x) 0) (conj (conj (dupe (next x)) (first x)) (first x))\n\t'())\n\t)", "user": "542da97ae4b0dad94371f2ba"}, {"problem": 32, "code": "#(mapcat list % %)", "user": "5410cb36e4b01498b1a719b8"}, {"problem": 32, "code": "#(interleave % %)", "user": "53a12b57e4b0ca733b9744ba"}, {"problem": 32, "code": "(fn [xs]\n  (mapcat #(vector % %) xs))", "user": "5426a59ee4b01498b1a71b1b"}, {"problem": 32, "code": "(fn [seq]\n   (loop [s seq\n          ret []]\n     (if s\n       (recur (next s) (into ret [(first s) (first s)]))\n       ret)))", "user": "542b764ae4b0dad94371f28d"}, {"problem": 32, "code": ";; apply turns the vector into a list of args to concat\n(fn [arg]\n (apply concat\n  (map \n   (fn [x] [x x]) arg)))", "user": "542c2de0e4b0dad94371f29f"}, {"problem": 32, "code": "reduce #(conj % %2 %2) []", "user": "542f574be4b0dad94371f2d0"}, {"problem": 32, "code": "#(interleave % %)", "user": "540c6a8ae4b0addc1aec6702"}, {"problem": 32, "code": "(fn dup [[head & tail]]\n  (if head\n    (cons head (cons head (dup tail)))\n    '()))", "user": "542cb77ae4b0dad94371f2aa"}, {"problem": 32, "code": "mapcat (fn [x] [x x])", "user": "4f497b61e4b0d56e7bb92bf3"}, {"problem": 32, "code": "(fn _ [ l ]\n    (if-let [[ x & xs ] l]\n      (concat [x x] (_ xs))\n      ))", "user": "5433a07be4b0b6b47310fce0"}, {"problem": 32, "code": "(fn [s] (interleave s s))", "user": "5412646de4b01498b1a719d4"}, {"problem": 32, "code": "mapcat (fn [x] [x x])", "user": "540961e9e4b0addc1aec66db"}, {"problem": 32, "code": "(fn inps [xs]\n  (loop [a xs\n         output []]\n    (if (> (count a) 0)\n      (recur (rest a) (conj output (first a) (first a)))\n      output\n      )\n    )\n  )", "user": "53b685e0e4b047364c0444c7"}, {"problem": 32, "code": "(fn [x] (interleave x x))", "user": "54336443e4b0b6b47310fcde"}, {"problem": 32, "code": "#(interleave %1 %1)", "user": "53e745a1e4b036ad0777e479"}, {"problem": 32, "code": "(fn duplicateme [x] (loop [\n                           returnme () \n                           remains x ]\n                        \n                      (if (empty? remains) \n                        (reverse returnme)\n                        (recur (conj (conj returnme (first remains)) (first remains)) (drop 1 remains))\n  )\n  ) \n)", "user": "542baf7ce4b0dad94371f291"}, {"problem": 32, "code": "#(for [i % j [0 0]] i)", "user": "54344721e4b0b6b47310fcea"}, {"problem": 32, "code": "#(interleave % %)", "user": "532a033be4b09d4e7a9b551f"}, {"problem": 32, "code": "(fn duplicate [x] (reduce concat [] (map #(vector % %) x)))", "user": "542c1f73e4b0dad94371f29d"}, {"problem": 32, "code": "#(interleave % %)", "user": "54349368e4b0b6b47310fcf1"}, {"problem": 32, "code": "(fn [x]\n (reduce #(conj %1 %2 %2) [] x))", "user": "53a511aae4b0b62ce3005735"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "53da3fcde4b0e771c3025497"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "540aa29de4b0addc1aec66f1"}, {"problem": 32, "code": "(fn [s] (reverse (reduce #(conj % %2 %2) '() s)))", "user": "541709b0e4b01498b1a71a06"}, {"problem": 32, "code": "(fn [x] (mapcat (fn [y] (list y y)) x))", "user": "51eda45ce4b0bb507043159b"}, {"problem": 32, "code": "#(interleave % %)", "user": "54397533e4b032a45b86931d"}, {"problem": 32, "code": "#(mapcat (fn[x](vector x x)) %)", "user": "5306bceee4b02e821686979b"}, {"problem": 32, "code": "#(interleave % %)", "user": "54380631e4b032a45b86930f"}, {"problem": 32, "code": "#(interleave % %)", "user": "54324be1e4b0dad94371f2ed"}, {"problem": 32, "code": "(fn [coll] \n   (reduce (fn [m x] (into m [x x])) [] coll))", "user": "54393c3fe4b032a45b86931a"}, {"problem": 32, "code": "(fn [l] (mapcat (fn [x] [x x]) l))", "user": "54377355e4b032a45b869305"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "542edb4ae4b0dad94371f2c8"}, {"problem": 32, "code": "#(mapcat (fn [x] [x x]) %)", "user": "52561295e4b0541d1855ba03"}, {"problem": 32, "code": "(fn dup\n  [s]\n  (if (empty? s)\n    '()\n    (let [f (first s)]\n      (conj (dup (rest s))\n            f\n            f))))", "user": "5438795ee4b032a45b869313"}, {"problem": 32, "code": "#(sort (concat % %))", "user": "542c44f8e4b0dad94371f2a1"}, {"problem": 32, "code": "(fn [x]\n  (loop [coll x,\n         accumulator []]\n    (if (empty? coll)\n      accumulator\n      (recur (rest coll) (conj (conj accumulator (first coll)) (first coll)))\n    )\n   )\n)", "user": "543496e1e4b0b6b47310fcf2"}, {"problem": 32, "code": "(fn [coll] (interleave coll coll))", "user": "543b5bc6e4b032a45b86932d"}, {"problem": 32, "code": "#(loop \n   [l %, r []] \n   (if (empty? l) r (recur (rest l) (conj r (first l) (first l))))\n)", "user": "543a68d3e4b032a45b869326"}, {"problem": 32, "code": "#(apply concat (for [x %] [x x]))", "user": "543c39e0e4b032a45b86933d"}, {"problem": 32, "code": "#(loop [[head & tail] %\n        res []]\n   (if (empty? tail)\n     (conj (conj res head) head)\n     (recur tail (conj (conj res head) head))))", "user": "542ce413e4b0dad94371f2ae"}, {"problem": 32, "code": "(fn duplicate-seq [seq]\n  (reduce concat (map (fn [el] [el el]) seq)))", "user": "53f891eee4b0de5c4184856d"}, {"problem": 32, "code": "(fn\n  [coll]\n  (interleave coll coll))", "user": "526c669be4b03e8d9a4a728f"}, {"problem": 32, "code": "(fn [coll]\n  (reduce (fn [res item]\n            (conj res item item))\n          []\n          coll))", "user": "541df619e4b01498b1a71a87"}, {"problem": 32, "code": "(fn [coll] (mapcat (fn [x] [x x]) coll))", "user": "5430a16de4b0dad94371f2da"}, {"problem": 32, "code": "#(interleave % %)", "user": "53f67bcfe4b0db01ade6f9e1"}, {"problem": 32, "code": "(fn [item]\n  (reduce concat (map #(take 2 (repeat %)) item)))", "user": "5437eca1e4b032a45b86930d"}, {"problem": 32, "code": "#(interleave % %)", "user": "543bce4fe4b032a45b869335"}, {"problem": 32, "code": "#(interleave %1 %1)", "user": "543d5c61e4b032a45b86934d"}, {"problem": 32, "code": "(fn [seq] (interleave seq seq))", "user": "5385e633e4b06839e8705f08"}, {"problem": 32, "code": "mapcat #(identity [% %])", "user": "543f854fe4b032a45b86935b"}, {"problem": 32, "code": "(fn [s]\n  (interleave s s))", "user": "542d27a0e4b0dad94371f2b3"}, {"problem": 32, "code": "#(interleave % %)", "user": "4f8490fae4b033992c121c34"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "543d07e8e4b032a45b869346"}, {"problem": 32, "code": "(fn x\n  [liste]\n  (loop [restant liste, traite '()]\n    (if (empty? restant)\n      (reverse traite)\n      (let [[head & tail] restant]\n        (recur\n         tail\n         (conj (conj traite head) head)\n         )\n        )\n      )\n    )\n  )", "user": "54410a71e4b032a45b869367"}, {"problem": 32, "code": "#(interleave % %)", "user": "53c1b787e4b00fb29b221266"}, {"problem": 32, "code": "(partial mapcat (partial repeat 2))", "user": "4f1ef6a0535d64f60314649b"}, {"problem": 32, "code": "(fn [x] (reduce (fn [coll item] (conj (conj coll item) item))  [] x))", "user": "5441f5e8e4b032a45b869375"}, {"problem": 32, "code": "(fn [as]\n  (apply concat (map (fn [x] [x x]) as)))", "user": "52f8b86de4b047fd55836fdb"}, {"problem": 32, "code": "reduce #(conj % %2 %2) []", "user": "543c5200e4b032a45b86933e"}, {"problem": 32, "code": "#(interleave % %)", "user": "543d89dfe4b032a45b869350"}, {"problem": 32, "code": "(fn [l] (apply concat (map vector l l)))", "user": "54431b6ee4b032a45b869385"}, {"problem": 32, "code": "(fn [lst] \n  (loop [j 0 res '()]\n    (if (< j (count lst))\n    (recur (inc j) (conj res (nth lst j) (nth lst j)))\n    (reverse res))))", "user": "53dfe311e4b0d874e779ae47"}, {"problem": 32, "code": "(fn [ls] (reduce #(conj %1 %2 %2) [] ls))", "user": "53751c5ee4b06839e8705e11"}, {"problem": 32, "code": "(fn [coll] \n  (reverse (reduce #(cons %2 (cons %2 %1)) '() coll))\n  )", "user": "54413696e4b032a45b86936b"}, {"problem": 32, "code": "(fn [lst]\n  (mapcat identity (map #(list % %) lst)))", "user": "542789efe4b01498b1a71b25"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "52a45a7be4b0c58976d9abd8"}, {"problem": 32, "code": "(fn [xs]\n  (apply concat\n    (map #(vector % %) xs)))", "user": "54448e84e4b032a45b869393"}, {"problem": 32, "code": "#(interleave % %)", "user": "50666699e4b03d366d7cb2b0"}, {"problem": 32, "code": "#(interleave % %)", "user": "544257b4e4b032a45b869379"}, {"problem": 32, "code": "#(interleave % %)", "user": "5392bfdee4b0b51d73faaeb2"}, {"problem": 32, "code": "(fn [x] \n  (mapcat #(repeat 2 %) x))", "user": "540e33dde4b0addc1aec671a"}, {"problem": 32, "code": "#(interleave % %)", "user": "5315ba94e4b08068f379ed34"}, {"problem": 32, "code": "#(reduce (fn [acc x] (conj acc x x)) [] %)", "user": "5446c89ce4b032a45b8693b5"}, {"problem": 32, "code": "(fn [a]\n  (apply concat\n    (for [x a]\n      (list x x)\n    )\n  )\n)", "user": "54468ebfe4b032a45b8693b1"}, {"problem": 32, "code": "#(mapcat (fn [x] [x x]) %)", "user": "5267c74be4b03e8d9a4a7183"}, {"problem": 32, "code": "(fn [x] (mapcat (fn [c] [c c]) x))", "user": "530a6cbae4b02e82168697be"}, {"problem": 32, "code": "(fn [sq] (reduce concat (map (fn [x] (conj [] x x)) sq)))", "user": "5447e08ce4b032a45b8693c3"}, {"problem": 32, "code": "#(reduce (fn [result x] (cons x (cons x result))) '() (reverse %))", "user": "540997ede4b0addc1aec66dd"}, {"problem": 32, "code": "(fn foo [x] (if (empty? x) '() (conj (foo (rest x)) (first x) (first x))))", "user": "54078851e4b0addc1aec66bd"}, {"problem": 32, "code": "(fn [c] (apply concat (map #(list % %) c)))", "user": "54487527e4b032a45b8693cc"}, {"problem": 32, "code": "#(mapcat list % %)", "user": "5420c6e4e4b01498b1a71aaa"}, {"problem": 32, "code": "mapcat (fn [x] (list x x))", "user": "54461393e4b032a45b8693a5"}, {"problem": 32, "code": "reduce (fn [sum x] (conj sum x x)) []", "user": "5233564ae4b0f0b72fabf403"}, {"problem": 32, "code": "#(apply concat (for [x %1][x x]))", "user": "544ac9b5e4b0e39780006959"}, {"problem": 32, "code": "#(interleave %1 %1)", "user": "54464734e4b032a45b8693ab"}, {"problem": 32, "code": "#(reduce (fn [x y] (conj x y y)) [] %)", "user": "5446ebc2e4b032a45b8693b8"}, {"problem": 32, "code": "(fn dup [coll]\n  (if (empty? coll) coll\n  (let [f (first coll)]\n    (cons f (cons f (dup (rest coll)))))))", "user": "544b9df2e4b0e39780006968"}, {"problem": 32, "code": "(fn [s] \n     (reduce concat (for [x s]\n\t    \t\t(list x x))))", "user": "54468fd3e4b032a45b8693b2"}, {"problem": 32, "code": "(fn [s]\n  (apply concat (map #(repeat 2 %) s)))", "user": "544a049de4b0e39780006953"}, {"problem": 32, "code": "(fn [x] (reduce #(into %1 (repeat 2 %2)) () (reverse x)))", "user": "54055aa9e4b0addc1aec6665"}, {"problem": 32, "code": "#(let [[x y]  (take 2 (partition (count %) (cycle %)))]\n    (interleave x y))", "user": "54458995e4b032a45b86939e"}, {"problem": 32, "code": "mapcat #(vector % %)", "user": "544b88dde4b0e39780006965"}, {"problem": 32, "code": "(fn [arr] (loop [[car & cdr] arr r []] (if (nil? car) r (recur cdr (conj (conj r car) car)))))", "user": "53320dd1e4b019098a6f8b71"}, {"problem": 32, "code": "#(apply concat (map (juxt identity identity) %))", "user": "544e8369e4b0e39780006987"}, {"problem": 32, "code": "#(mapcat vector % %)", "user": "544b699ce4b0e39780006964"}, {"problem": 32, "code": "#(sort (apply conj % %))", "user": "544fbabce4b0e39780006999"}, {"problem": 32, "code": "(fn fs\n  [xs]\n  (loop [ys xs\n         res '()]\n    (if (empty? ys)\n      (sort (apply conj res res))\n      (recur (rest ys) (conj res (first ys))))))", "user": "542d5fa9e4b0dad94371f2b5"}, {"problem": 32, "code": "#(interleave % %)", "user": "5444ec99e4b032a45b869394"}, {"problem": 32, "code": "#(interleave % %)", "user": "5122925ae4b068a9582e656d"}, {"problem": 32, "code": "(fn [s] (interleave s s))", "user": "54524afbe4b0e397800069bc"}, {"problem": 32, "code": "(partial mapcat (fn [x] [x x]))", "user": "5454b84ce4b0e397800069d9"}, {"problem": 32, "code": "(comp (partial apply concat) (partial map #(list % %)))", "user": "545281bce4b0e397800069c3"}, {"problem": 32, "code": "#(interleave % %)", "user": "53b7aa6ce4b047364c0444d1"}, {"problem": 32, "code": "(fn elongate [x] (interleave x x))", "user": "545188ebe4b0e397800069b2"}, {"problem": 32, "code": "(fn [x]\n  (interleave x x))", "user": "54381729e4b032a45b869310"}, {"problem": 32, "code": "reduce (fn [coll item] (concat coll [item item])) []", "user": "544cf5d7e4b0e39780006977"}, {"problem": 32, "code": "#(mapcat list % %)", "user": "5457e5f1e4b01be26fd74613"}, {"problem": 32, "code": "(fn [x] (interleave x x))", "user": "54545c31e4b0e397800069d5"}, {"problem": 32, "code": "(fn [input]\n  (apply concat (map #(do [% %]) input)))", "user": "54513516e4b0e397800069af"}, {"problem": 32, "code": "(fn [l]\n  (mapcat identity (for [x l] [x x])))", "user": "54570d08e4b080a794c2c888"}, {"problem": 32, "code": "(fn [xs] (reverse (reduce #(cons %2 (cons %2 %1)) '() xs)))", "user": "52d84ea7e4b09f7907dd1390"}, {"problem": 32, "code": "(fn [l]\n    (reduce concat (map (fn [x] [x x]) l))\n  )", "user": "53a68c5ae4b0ef122a8689c8"}, {"problem": 32, "code": "(partial mapcat (fn [x] (take 2 (repeat x))))", "user": "5414b7c4e4b01498b1a719ed"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5455c2f3e4b080a794c2c87d"}, {"problem": 32, "code": "(fn [s] (reverse (reduce #(conj %1 %2 %2) '() s)))", "user": "5453b522e4b0e397800069d0"}, {"problem": 32, "code": "(fn [col] (apply concat (map (fn [a] [a a]) col)))", "user": "54580586e4b01be26fd74616"}, {"problem": 32, "code": "#(interleave % %)", "user": "54512df2e4b0e397800069ae"}, {"problem": 32, "code": "#(loop [lista '() i 0] \n       (if (= i (count %)) \n         (reverse lista)\n         (recur (cons (.get (seq %) i) (cons (.get (seq %) i) lista)) (inc i))\n       )\n     )", "user": "5451eb12e4b0e397800069b8"}, {"problem": 32, "code": "(fn [coll] (reduce #(concat %1 (repeat 2 %2)) '() coll))", "user": "5417bc50e4b01498b1a71a0f"}, {"problem": 32, "code": "(fn [s] (interleave s s))", "user": "533ea7e8e4b085b17e897d94"}, {"problem": 32, "code": "#(interleave % %)", "user": "54524dbbe4b0e397800069bd"}, {"problem": 32, "code": "(fn [col] (reverse(reduce (fn[acc nex] (conj (conj acc nex) nex)) '() col )))", "user": "52149e21e4b0961f15ac4d94"}, {"problem": 32, "code": "#(interleave % %)", "user": "52e16face4b09f7907dd1421"}, {"problem": 32, "code": "#(interleave %1 %1)", "user": "5457767ae4b01be26fd7460c"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "544a8fbbe4b0e39780006957"}, {"problem": 32, "code": "#(interleave % %)", "user": "545801f6e4b01be26fd74615"}, {"problem": 32, "code": "#(mapcat (fn [x] [x x]) %)", "user": "53ea5851e4b036ad0777e4e4"}, {"problem": 32, "code": "(fn dup-seq\n    [s]\n    (interleave s s))", "user": "545e9cf1e4b01be26fd7467f"}, {"problem": 32, "code": "#(mapcat list % %)", "user": "5367f0a7e4b0243289761e88"}, {"problem": 32, "code": "reduce (fn [lst x]  \n         (conj lst x x)) '[]", "user": "542b0592e4b0dad94371f286"}, {"problem": 32, "code": "(fn db [x] (if (empty? x) () (cons (first x) (cons (first x) (db (rest x))))))", "user": "544e1794e4b0e39780006980"}, {"problem": 32, "code": "(partial mapcat #(list % %))", "user": "5454bd9be4b0e397800069db"}, {"problem": 32, "code": "(fn D [s] (if (empty? s) s (conj  (D (rest s)) (first s) (first s))))", "user": "4e8b5cb8535d65386fec211b"}, {"problem": 32, "code": "(fn [v]\n   (let [res ((fn [u accum]\n                (if (seq u)\n                  (recur\n                   (rest u)\n                   (conj\n                    (conj accum (first u))\n                    (first u)))\n                  accum)\n                )\n              v [])]\n     res))", "user": "53b14289e4b047364c04448b"}, {"problem": 32, "code": "(fn [xs] (reduce #(conj % %2 %2) [] xs))", "user": "535774c2e4b04ce2eb3ed27c"}, {"problem": 32, "code": "(fn [xs]\n  (loop [[head & tail :as ys] (reverse xs) result '()]\n    (if (empty? ys) result\n      (recur tail (cons head (cons head result))))))", "user": "546176e7e4b01be26fd746a2"}, {"problem": 32, "code": "(fn [coll]\n  (interleave coll coll))", "user": "5433eecae4b0b6b47310fce6"}, {"problem": 32, "code": "(fn [xs]\n  (seq\n    (reduce \n     (fn [acc x] (conj acc x x))\n     []\n     xs)))", "user": "526e1bd0e4b03e8d9a4a730b"}, {"problem": 32, "code": "(fn [x] (apply concat (map #(list % %) x)))", "user": "534b1930e4b084c2834f4a76"}, {"problem": 32, "code": "#(reduce (fn [x y] (conj x y y)) '() (reverse %))", "user": "5458a729e4b01be26fd74622"}, {"problem": 32, "code": "#(reduce (fn [c e](concat c (list e e))) '() %)", "user": "546280d8e4b01be26fd746b0"}, {"problem": 32, "code": "(fn doubler [xs]\n  (#(reduce (fn foo [lst item] (concat lst [item item])) '() xs)))", "user": "546113ffe4b01be26fd74699"}, {"problem": 32, "code": "(fn [sequence]\n  (apply concat (for [item sequence]\n                  (list item item))))", "user": "5461c402e4b01be26fd746a6"}, {"problem": 32, "code": "(fn duplicate\n  [coll]\n  (if (empty? coll)\n    '()\n    (concat (list (first coll) (first coll)) (duplicate (rest coll)))))", "user": "545d881de4b01be26fd7466f"}, {"problem": 32, "code": "#(interleave % %)", "user": "54630e6be4b01be26fd746bc"}, {"problem": 32, "code": "#(interleave % %)", "user": "545537c1e4b0e397800069dd"}, {"problem": 32, "code": "(fn dbl [x] (apply concat (map (fn [x] [x x])x)))", "user": "545d5c3be4b01be26fd7466d"}, {"problem": 32, "code": "#(reduce into (map (fn [x] [x x]) %))", "user": "545eb56be4b01be26fd74682"}, {"problem": 32, "code": "mapcat #(vec [% %])", "user": "5464a536e4b01be26fd746cf"}, {"problem": 32, "code": "(fn [coll]\n      (loop [result []   items (seq coll)]\n        (if (zero? (count items))\n          result\n          (let [\n            head    (first items)\n            others  (next items)\n          ]\n            (recur (conj result head head) others )))))", "user": "532f7e12e4b019098a6f8b4e"}, {"problem": 32, "code": "(fn [v] (mapcat identity (map (fn [e] (list e e)) v)))", "user": "5465712ee4b01be26fd746dc"}, {"problem": 32, "code": "(fn [r] (reduce concat '() (map (fn [a] [a a]) r)))", "user": "54638c8fe4b01be26fd746c2"}, {"problem": 32, "code": "#(interleave % %)", "user": "545e7ab0e4b01be26fd7467c"}, {"problem": 32, "code": "(fn dup_items [x]\n  (if (empty? x)\n    '()\n    (cons (first x) (cons (first x) (dup_items (rest x))))))", "user": "54651982e4b01be26fd746d4"}, {"problem": 32, "code": "(fn [s] \n  (mapcat\n    #(repeat 2 %)\n    s))", "user": "504f9ae1e4b0a02f9cffde9c"}, {"problem": 32, "code": "(fn[x] (reduce #(conj (conj %1 %2) %2) '()  (reverse x )))", "user": "54651ef5e4b01be26fd746d5"}, {"problem": 32, "code": "#(interleave % %)", "user": "5414dccbe4b01498b1a719f1"}, {"problem": 32, "code": "#(mapcat (fn [x] [x x]) %)", "user": "5468d932e4b00cfc9eacc13e"}, {"problem": 32, "code": "(fn [l]\n   (reverse ((fn dup-aux [l i ldup]\n      (if (= i (count l))\n       ldup\n       (dup-aux l (inc i) (conj (conj ldup (nth l i)) (nth l i)))))\n   l 0 '())))", "user": "54651faee4b01be26fd746d6"}, {"problem": 32, "code": "(fn [inp]\n  (mapcat identity (map #(vector % %) inp)))", "user": "534e60c2e4b084c2834f4ab2"}, {"problem": 32, "code": "(comp (partial reduce concat) (partial map (partial repeat 2)))", "user": "5468033ee4b00cfc9eacc133"}, {"problem": 32, "code": "#(interleave % %)", "user": "53613db8e4b0243289761e41"}, {"problem": 32, "code": "(fn [arr] (loop [[h & t] arr result []] (let [aux (conj (conj result h) h)] (if (empty? t) aux (recur t aux)))))", "user": "5469e7cce4b00cfc9eacc14c"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "54485727e4b032a45b8693c6"}, {"problem": 32, "code": "#(interleave % %)", "user": "52b9cfb9e4b07a9af57922c5"}, {"problem": 32, "code": "mapcat (fn [x] (list x x))", "user": "52526161e4b0541d1855b8a6"}, {"problem": 32, "code": "#(reduce (fn [a b] (conj (conj a b) b)) [] %)", "user": "544e9022e4b0e3978000698b"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "543bb568e4b032a45b869334"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "53572176e4b04ce2eb3ed276"}, {"problem": 32, "code": "#(interleave % %)", "user": "546a52f3e4b00cfc9eacc151"}, {"problem": 32, "code": "(fn [v] (apply concat (map #(list % %) v)))", "user": "530e75d5e4b08068f379ecba"}, {"problem": 32, "code": "#(reverse (reduce (fn [y x] (conj y x x)) () %))", "user": "546af00de4b00cfc9eacc163"}, {"problem": 32, "code": "(fn [coll] (apply concat (map #(vector % %) coll) ))", "user": "52a90056e4b0c58976d9ac39"}, {"problem": 32, "code": "reduce #(conj (conj % %2) %2) []", "user": "5465febde4b01be26fd746e1"}, {"problem": 32, "code": "(fn [li] (reduce #(conj %1 %2 %2) [] li ))", "user": "546c1b2ce4b00cfc9eacc174"}, {"problem": 32, "code": "(fn [coll] (interleave coll coll))", "user": "546a6dbbe4b00cfc9eacc156"}, {"problem": 32, "code": "(fn [x] (reduce concat (map #(repeat 2 %) x)))", "user": "5462ce20e4b01be26fd746b8"}, {"problem": 32, "code": "(fn [lst] (reduce (fn [base x] (conj base x x)) [] lst))", "user": "5461873de4b01be26fd746a3"}, {"problem": 32, "code": "#(sort (concat % %))", "user": "52540bcce4b0541d1855b952"}, {"problem": 32, "code": "(fn [coll]\n  (apply concat (apply map list (repeat 2 coll))))", "user": "545bd22fe4b01be26fd7465a"}, {"problem": 32, "code": "(fn [s] (mapcat #(list % %) s))", "user": "546dd4f6e4b00cfc9eacc194"}, {"problem": 32, "code": "#(mapcat vector % %)", "user": "5468a110e4b00cfc9eacc13d"}, {"problem": 32, "code": "(fn [ls] (reduce (fn [acc x] (concat acc (list x) (list x))) '() ls))", "user": "546d41bde4b00cfc9eacc18c"}, {"problem": 32, "code": "mapcat #(conj [] % %)", "user": "51ac80bbe4b09397d5109770"}, {"problem": 32, "code": "#(mapcat (fn [e] (list e e)) %)", "user": "546ed28be4b00cfc9eacc1a5"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "546c4c5fe4b00cfc9eacc178"}, {"problem": 32, "code": "#(interleave % %)", "user": "546ef9f8e4b00cfc9eacc1a6"}, {"problem": 32, "code": "(fn [xs] (interleave xs xs))", "user": "546a6c7ce4b00cfc9eacc154"}, {"problem": 32, "code": "#(for [x % y (take 2 (repeat x))] y)", "user": "54684c3be4b00cfc9eacc139"}, {"problem": 32, "code": "#(mapcat list % %)", "user": "546c1f73e4b00cfc9eacc175"}, {"problem": 32, "code": "#(mapcat (partial repeat 2) %1)", "user": "54708efce4b00cfc9eacc1b9"}, {"problem": 32, "code": "(fn [x] (interleave x x))", "user": "5433d3ebe4b0b6b47310fce4"}, {"problem": 32, "code": "(fn [input]\n    (reduce #(conj %1 %2 %2)\n            []\n            input))", "user": "54508859e4b0e397800069a3"}, {"problem": 32, "code": "(fn [elements]\n  (let [duplicate-element (fn [e] (take 2 (repeat e)))]\n    (apply concat (map duplicate-element elements))))", "user": "541cf6dfe4b01498b1a71a7a"}, {"problem": 32, "code": "(fn dupl\r\n  [c]\r\n  (reduce #(concat % (list %2 %2)) '() c))", "user": "5470699ae4b00cfc9eacc1b6"}, {"problem": 32, "code": "(fn sum [x] (loop [col x res '()] (if (empty? col) (reverse res) (recur (rest col) (cons (first col) (cons (first col) res))))))", "user": "52457931e4b08ba239308107"}, {"problem": 32, "code": "(fn[coll]\n  (loop [in coll out []]\n    (cond (empty? in) out\n          :else (recur (rest in) (conj out (first in) (first in))))))", "user": "5472cba1e4b094393f72dd7a"}, {"problem": 32, "code": "(fn [coll] (mapcat #(cons % [%]) coll))", "user": "5462dc5ae4b01be26fd746b9"}, {"problem": 32, "code": "(fn [in] (sort (into in (for [x in] x))))", "user": "543b9f8ce4b032a45b869332"}, {"problem": 32, "code": "#(reduce concat (map (fn [x] (repeat 2 x)) %))", "user": "54696e4ce4b00cfc9eacc147"}, {"problem": 32, "code": "#(interleave % %)", "user": "545cfbb0e4b01be26fd74669"}, {"problem": 32, "code": "#(sort (mapcat sort (take 2 (repeat %))))", "user": "54630cdae4b01be26fd746bb"}, {"problem": 32, "code": "(fn [x]\n      (loop [s x acc '()]\n        (if (nil? (first s))\n              (reverse acc)\n              (recur (rest s) (conj acc (first s) (first s)))\n          )\n        )\n      )", "user": "5471f2fbe4b094393f72dd70"}, {"problem": 32, "code": "(fn [ls] (apply concat (map #(list % %) ls)))", "user": "547584d9e4b0c51c1f4d729b"}, {"problem": 32, "code": "#(mapcat list % %)", "user": "5470b3d0e4b00cfc9eacc1bb"}, {"problem": 32, "code": "mapcat (partial repeat 2)", "user": "54734a0de4b0c51c1f4d727b"}, {"problem": 32, "code": "(fn [[& inputs]] (reduce (fn [x y] (conj (conj x y) y)) [] inputs))", "user": "546e4ab8e4b00cfc9eacc19c"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5466aabbe4b01be26fd746e8"}, {"problem": 32, "code": "(fn [a] (mapcat (fn [a] [a a]) a))", "user": "4f721e9ee4b07046d9f4f01e"}, {"problem": 32, "code": "(fn dupe [a-seq] (reduce #(conj (conj %1 %2) %2) [] a-seq))", "user": "51d46747e4b013d740b70de3"}, {"problem": 32, "code": "(fn [seq]\n   (mapcat #(vector % %) seq))", "user": "529a3c37e4b02ebb4ef75094"}, {"problem": 32, "code": "(fn doubler [x]\n  (loop [x x acc ()]\n    (if (empty? x)\n      acc\n      (recur (rest x) (concat acc `(~(first x) ~(first x)))))))", "user": "53703287e4b0fc7073fd6e8f"}, {"problem": 32, "code": "(fn [\u0441]\n  (reduce #(conj %1 %2 %2) [] \u0441))", "user": "545f737ce4b01be26fd74688"}, {"problem": 32, "code": "(fn [c]\n  (mapcat #(list % %) c))", "user": "5478c4fee4b0c51c1f4d72c0"}, {"problem": 32, "code": "(fn [lat]\n  (reduce concat (map #(take 2 (repeat %)) lat)))", "user": "54764cf1e4b0c51c1f4d72a4"}, {"problem": 32, "code": "#(apply concat (map vector % %))", "user": "54357066e4b0b6b47310fcfd"}, {"problem": 32, "code": "(fn dup [members] (\n                if (= members '())\n\t\t\t\t\t'()\n                   \t(cons (first members) (cons (first members) (dup (rest members))))\n                      \n                   \n                   )\n  )", "user": "5471f090e4b094393f72dd6e"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "5479c58de4b0c51c1f4d72c7"}, {"problem": 32, "code": "#(apply concat (map (fn [x] (list x x)) %))", "user": "547ad587e4b0c51c1f4d72ce"}, {"problem": 32, "code": "#(interleave % %)", "user": "5472d919e4b094393f72dd7b"}, {"problem": 32, "code": "#(interleave % %)", "user": "54797964e4b0c51c1f4d72c6"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "5463fbbde4b01be26fd746ca"}, {"problem": 32, "code": "#(interleave % %)", "user": "535c2d21e4b04ce2eb3ed2b2"}, {"problem": 32, "code": "(fn [args] (mapcat (fn [val] [val val]) args))", "user": "543cf42ee4b032a45b869344"}, {"problem": 32, "code": "(fn das [coll]\n  (mapcat #(vector % %) coll))", "user": "5475d755e4b0c51c1f4d72a0"}, {"problem": 32, "code": "(fn f [xs] (if (empty? xs) '() (cons (first xs) (cons (first xs) (f (rest xs))))))", "user": "5478e57de4b0c51c1f4d72c1"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "546e0c24e4b00cfc9eacc198"}, {"problem": 32, "code": "(fn [s] (mapcat #(repeat 2 %) s))", "user": "547adcb0e4b0c51c1f4d72cf"}, {"problem": 32, "code": "#(loop [i 0 out '()]\n    (if (= i (count %))\n      (reverse out)\n      (recur (inc i) (conj out (nth % i) (nth % i)))))", "user": "5470cb10e4b094393f72dd65"}, {"problem": 32, "code": "(fn [col] (apply concat (map (fn [x] (list x x)) col)))", "user": "547c2c6ce4b0c51c1f4d72e3"}, {"problem": 32, "code": "(fn f [c] (if (empty? c) '() (cons (first c) (lazy-seq (cons (first c) (f (rest c)))))))", "user": "547d8e93e4b0c51c1f4d72f4"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "53a2e6abe4b0f1fc7453882f"}, {"problem": 32, "code": "(fn [x]\n  (reverse (reduce (fn [acc n] \n            (conj (conj acc n) n)) \n          '() x)))", "user": "547fbe01e4b0c51c1f4d7321"}, {"problem": 32, "code": "(fn [sq] (->> sq (map #(vector % %)) (apply concat)))", "user": "547d66a1e4b0c51c1f4d72f2"}, {"problem": 32, "code": "(fn [list] (interleave list list)) ;-- https://clojuredocs.org/clojure.core/interleave", "user": "548018cde4b0c51c1f4d7325"}, {"problem": 32, "code": "(fn [t]\n  (reduce (fn [v a] (into v [a a])) [] t))", "user": "501b1efee4b0b12d9c5f4d82"}, {"problem": 32, "code": "(fn d-dup [s] (if (empty? s) [] (into [(first s) (first s)] (d-dup (rest s)))))", "user": "54750ca3e4b0c51c1f4d7294"}, {"problem": 32, "code": "reduce (fn [coll x] (concat coll (vector x x))) []", "user": "4fe8b1d9e4b07c9f6fd12c71"}, {"problem": 32, "code": "#(interleave % %)", "user": "548026d8e4b0e286459a1155"}, {"problem": 32, "code": "(fn [s] (mapcat #(vector % %) s))", "user": "5466199ce4b01be26fd746e2"}, {"problem": 32, "code": "#(interleave % %)", "user": "5458474ce4b01be26fd7461b"}, {"problem": 32, "code": "(fn [xs]\n  (reduce (fn [coll el] (-> coll (conj el) (conj el))) [] xs))", "user": "5032748ae4b0e78df07b092f"}, {"problem": 32, "code": "#(interleave % %)", "user": "548018e3e4b0c51c1f4d7331"}, {"problem": 32, "code": "(\n    fn [coll]\n    (\n      loop [coll coll, result []]\n      (\n        if (empty? coll) result\n        (recur (rest coll) (concat result  (list (first coll) (first coll))))\n        )\n      )\n    )", "user": "547f3434e4b0c51c1f4d7319"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "54577fefe4b01be26fd7460d"}, {"problem": 32, "code": "(fn [coll] (interleave coll coll))", "user": "542dc7c7e4b0dad94371f2bd"}, {"problem": 32, "code": "#(interleave % %)", "user": "548204b2e4b0e286459a117a"}, {"problem": 32, "code": "(fn [xs] (apply concat (map (fn [x] [x x]) xs)))", "user": "5483d59fe4b0e286459a1194"}, {"problem": 32, "code": "(fn [coll]\n  (interleave coll coll))", "user": "5484143de4b0e286459a1197"}, {"problem": 32, "code": "(partial mapcat (fn [x] [x x]))", "user": "54764a8fe4b0c51c1f4d72a3"}, {"problem": 32, "code": "(fn f [s]\n(let [f*\n(fn [acc s*]\n(conj acc s* s*))]\n(reduce f* [] s)))", "user": "54852ad0e4b0e286459a11a7"}, {"problem": 32, "code": "reduce (fn [coll, elem]\n         (conj coll elem elem))\n        []", "user": "54848141e4b0e286459a119e"}, {"problem": 32, "code": "(fn [a] (apply concat (map vector a a)))", "user": "546b833ce4b00cfc9eacc16b"}, {"problem": 32, "code": "(fn [x] (apply concat (map vector x x)))", "user": "54570c87e4b080a794c2c887"}, {"problem": 32, "code": "mapcat (partial repeat 2)", "user": "54857e3be4b0e286459a11ad"}, {"problem": 32, "code": "(fn [coll]\n  (reverse\n   (reduce #(cons %2 (cons %2 %1)) '() coll)))", "user": "5485d2c1e4b0e286459a11b3"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "5485b402e4b0e286459a11b0"}, {"problem": 32, "code": "#(reduce (fn [coll e] (conj coll e e)) [] %)", "user": "528c381ce4b0239c8a67aeb2"}, {"problem": 32, "code": "(fn [%] (mapcat #(repeat 2 %) %))", "user": "54802bd1e4b0e286459a1157"}, {"problem": 32, "code": "#(interleave  % %)", "user": "548392fce4b0e286459a1191"}, {"problem": 32, "code": "#(interleave % %)", "user": "547e3846e4b0c51c1f4d7302"}, {"problem": 32, "code": "(fn dup[x] (if (empty? x) x (cons (first x) (cons (first x) (dup (rest x)))) ))", "user": "548485f5e4b0e286459a119f"}, {"problem": 32, "code": "(fn dupl [x] \n  (if (> (count x) 0)\n    (concat [(first x) (first x)] (dupl (rest x)))\n    x\n   )\n )", "user": "548018e3e4b0c51c1f4d7330"}, {"problem": 32, "code": "(\n\tfn myDuplicator[x]  \n\t\t(\n\t\t\tif(> (count x) 0)\n\t\t\t(\n\t\t\t\tconcat [(first x) (first x)] (myDuplicator (rest x))\n\t\t\t)\n\t\t)\n )", "user": "548018ede4b0c51c1f4d7334"}, {"problem": 32, "code": "#(loop [out '()\n        coll %]\n   (if (empty? coll)\n     out\n     (recur (concat out (list (first coll) (first coll))) (rest coll))))", "user": "513facf5e4b00f13ea1bd892"}, {"problem": 32, "code": "#(interleave % %)", "user": "536e5b68e4b0fc7073fd6e6d"}, {"problem": 32, "code": "(fn [v] (mapcat #(vector % %) v))", "user": "5463c452e4b01be26fd746c4"}, {"problem": 32, "code": "#(interleave % %)", "user": "513f86dde4b00f13ea1bd88d"}, {"problem": 32, "code": "#(interleave % %)", "user": "5486adf7e4b0e286459a11be"}, {"problem": 32, "code": "(fn dup[l] \n  (apply concat (map #(list % %) l)))", "user": "5471f0f3e4b094393f72dd6f"}, {"problem": 32, "code": "#(interleave % %)", "user": "54856d54e4b0e286459a11aa"}, {"problem": 32, "code": "#(interleave % %)", "user": "535f9a5ce4b04ce2eb3ed2de"}, {"problem": 32, "code": "mapcat #(repeat 2 % )", "user": "534b57bbe4b084c2834f4a78"}, {"problem": 32, "code": "#(mapcat (fn [x] (repeat 2 x)) %)", "user": "54801febe4b0c51c1f4d733c"}, {"problem": 32, "code": "#(reduce (fn [t k] (conj t k k)) '() (reverse %))", "user": "543823f1e4b032a45b869311"}, {"problem": 32, "code": "(fn dup [xs]\n  (when-let [f (first xs)]\n    (cons f (cons f (dup (next xs))))))", "user": "5488872ee4b0e286459a11d3"}, {"problem": 32, "code": "#(interleave % %)", "user": "545b9dd9e4b01be26fd74654"}, {"problem": 32, "code": "#(reduce (fn [acc e] (concat acc [e e])) [] %)", "user": "52a803cee4b0c58976d9ac26"}, {"problem": 32, "code": "mapcat (partial repeat 2)", "user": "54893618e4b0e286459a11e0"}, {"problem": 32, "code": "#(interleave % %)", "user": "54899701e4b0e286459a11ea"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "548af5b5e4b0e286459a11f8"}, {"problem": 32, "code": "(fn generateSeq\n  [inputseq]\n  (loop [seq1 inputseq\n         seq2 inputseq\n         flag 1\n         result []]\n    (if (> flag (count inputseq))\n      (reverse (into '() result)) \n      (recur (next seq1) (next seq2) (inc flag) (conj result (first seq1) (first seq2))))))", "user": "54411506e4b032a45b869369"}, {"problem": 32, "code": "(partial mapcat (fn [e] [e e]))", "user": "548c6673e4b0e286459a1209"}, {"problem": 32, "code": "#((fn dupl [x,y] (\n                  if (= (count x) y) \n                      x \n                      (dupl (concat (rest x) (repeat 2 (first x))) (+ y 2))\n                  ))\n  % 0)", "user": "548b7db8e4b0e286459a11fd"}, {"problem": 32, "code": "(fn [xs] (reverse  (reduce #(conj %1 %2 %2) '() xs)))", "user": "548cd813e4b0e286459a1211"}, {"problem": 32, "code": "( fn [in] (sort (loop [result '() x 0   num (count in)] (if (= num x) result (recur (conj result (nth in x) (nth in x)) (inc x)   num)))))", "user": "548698b4e4b0e286459a11bd"}, {"problem": 32, "code": "#(interleave %1 %1)", "user": "5485bc1be4b0e286459a11b1"}, {"problem": 32, "code": "(fn dup [xs] \n  (if (empty? xs)\n    xs \n    (cons (first xs) (cons (first xs) (dup (rest xs))))))", "user": "548cd637e4b0e286459a1210"}, {"problem": 32, "code": "(fn [xs]\n  (interleave xs xs))", "user": "5188c249e4b0bdff0e072d54"}, {"problem": 32, "code": "#(reduce (fn [x y] (conj x y y)) [] %)", "user": "53c83f94e4b00fb29b2212af"}, {"problem": 32, "code": "#(interleave % %)", "user": "54889b50e4b0e286459a11d4"}, {"problem": 32, "code": "(fn [coll]\n  (mapcat identity \n          (map (partial repeat 2) coll)))", "user": "548ff2d5e4b0b312c081ff2b"}, {"problem": 32, "code": "(fn [xs]\n  (mapcat (fn [x] [x x]) xs))", "user": "548fa2dfe4b0e286459a1240"}, {"problem": 32, "code": "(fn [collection]\n  (loop [result []\n         tempCollection collection]\n    (let [tail (rest tempCollection)\n          item0 (first tempCollection)\n          newResult (conj (conj result item0) item0)]\n      (if (empty? tempCollection)\n        result\n      (recur newResult tail)))))", "user": "548f339ee4b0e286459a1233"}, {"problem": 32, "code": "(fn [x] (reverse (reduce #(cons %2 (cons %2 %1)) '() x)))", "user": "548f3ee4e4b0e286459a1237"}, {"problem": 32, "code": "(fn my-dup [my-seq] (reduce concat (map #(take 2 (repeat %)) my-seq)))", "user": "548f19a8e4b0e286459a1231"}, {"problem": 32, "code": "(fn [in]\n  (reduce \n   #(conj %1 %2 %2)\n   []\n   in))", "user": "54903056e4b0b312c081ff2e"}, {"problem": 32, "code": "(fn duplicate\n  ([sqc] (duplicate sqc '()))\n  ([sqc newsqc] (if (empty? sqc) newsqc\n                  (duplicate (drop-last 1 sqc) (conj newsqc (last sqc) (last sqc))))))", "user": "548efcb6e4b0e286459a122a"}, {"problem": 32, "code": "#(reduce (fn \n           [acc new-value]\n           (concat acc [new-value new-value])) (empty %) %)", "user": "5491bebbe4b0b312c081ff3c"}, {"problem": 32, "code": "(fn  [col]\n  (apply concat (for [c col] (list c c))))", "user": "5243e37ae4b076204b44fae3"}, {"problem": 32, "code": "#(loop [s % ss [] i 0]\n   (if (contains? s i)   \n    (recur s (conj ss (nth s i) (nth s i)) (inc i))\n    ss\n   )\n)", "user": "54897284e4b0e286459a11e6"}, {"problem": 32, "code": "#(mapcat (partial repeat 2) %)", "user": "54926752e4b0b312c081ff44"}, {"problem": 32, "code": "(fn [s] (reduce #(conj (conj %1 %2) %2) [] s))", "user": "548f5086e4b0e286459a1239"}, {"problem": 32, "code": "mapcat #(-> [% %])", "user": "512b07f7e4b078b06821febb"}, {"problem": 32, "code": "(fn ! [x] (and (seq x) (conj (! (rest x)) (first x) (first x))\n                   ))", "user": "548f7bf1e4b0e286459a123b"}, {"problem": 32, "code": "(fn [coll]\n  (mapcat #(list % %) coll))", "user": "548f37c7e4b0e286459a1234"}, {"problem": 32, "code": "(fn [coll] \n  (interleave coll coll))", "user": "53576356e4b04ce2eb3ed27a"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "53bcdd41e4b0d9a98559a6c0"}, {"problem": 32, "code": "(fn dup [coll]\n  (apply concat (map #(take 2 (repeat %)) coll)))", "user": "5493ccbbe4b0b312c081ff50"}, {"problem": 32, "code": "(fn problem-32 [a-seq]\n  (let [helper (fn [a-seq res]\n                 (cond\n                  (empty? a-seq) res\n                  :else (recur \n                         (rest a-seq) \n                         (conj res (first a-seq) (first a-seq)))))]\n    (helper a-seq [])))", "user": "51d26b0ae4b0d13b04db0d97"}, {"problem": 32, "code": "#(interleave % %)", "user": "547e6fd2e4b0c51c1f4d730b"}, {"problem": 32, "code": "(fn [myseq]\n  (apply concat (map #(vector % %) myseq)))", "user": "5455510fe4b0e397800069df"}, {"problem": 32, "code": "(fn dupl [l] (mapcat #(repeat 2 %1) l))", "user": "548c8115e4b0e286459a120c"}, {"problem": 32, "code": "#(interleave % %)", "user": "54965534e4b0b312c081ff65"}, {"problem": 32, "code": "(fn [x] (mapcat #(list % %) x))", "user": "54973374e4b0b312c081ff6f"}, {"problem": 32, "code": "#(apply interleave (repeat 2 %))", "user": "4f0d6686535d0136e6c22318"}, {"problem": 32, "code": "#(interleave % %)", "user": "5280539ce4b0757a1b1713f3"}, {"problem": 32, "code": "#(loop [lst % lstfinale []]\n                          (if (empty? lst)\n                          lstfinale\n                          (let [[nombre & reste] lst\n                            lstfinale (conj lstfinale nombre nombre)]\n                           (recur reste lstfinale))))", "user": "5495b2dee4b0b312c081ff5f"}, {"problem": 32, "code": "#(interleave % %)", "user": "549375e4e4b0b312c081ff4e"}, {"problem": 32, "code": "(fn [x]\n  (loop [[head & tail] x ret []]\n    (if (empty? tail)\n      (conj (conj ret head) head)\n      (recur tail (conj (conj ret head) head)))\n    )\n  )", "user": "54975e99e4b0b312c081ff72"}, {"problem": 32, "code": "mapcat (fn [x] [x x])", "user": "548ade6de4b0e286459a11f6"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "540217e1e4b0df28a13c62cb"}, {"problem": 32, "code": "#(interleave % %)", "user": "543b12cce4b032a45b86932a"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "549c3e0ce4b0f3d1d8e70f87"}, {"problem": 32, "code": "(fn [c] (apply concat (map #(list %1 %1) c)))", "user": "5498c4cfe4b0b312c081ff85"}, {"problem": 32, "code": "(fn eh [x]\n  (if (empty? x)\n    '()\n    (cons (first x) (cons (first x) (eh (rest x))))))", "user": "549c8bbde4b0f3d1d8e70f8c"}, {"problem": 32, "code": "(fn [s]\n    (loop [items s res '()]\n        (if (seq items)\n            (recur (rest items) (concat res [(first items) (first items)]))\n            res\n        )\n    )\n)", "user": "54996971e4b0b312c081ff8d"}, {"problem": 32, "code": "#(interleave % %)", "user": "549c22f7e4b0f3d1d8e70f86"}, {"problem": 32, "code": "#(loop [acc [] li %] (if (empty? li) acc (recur (concat acc (list (first li) (first li))) (rest li)  )))", "user": "54972b0ee4b0b312c081ff6e"}, {"problem": 32, "code": "#(mapcat (fn [x] (list x x)) %)", "user": "548f11a0e4b0e286459a122d"}, {"problem": 32, "code": "#(sort (concat % %))", "user": "5483ace0e4b0e286459a1192"}, {"problem": 32, "code": "(fn [s] (mapcat #(vector % %) s))", "user": "5499e23de4b03163384f4706"}, {"problem": 32, "code": "(fn dup-each-item [xs]\n  (reduce #(apply conj %1 (list %2 %2)) [] xs))", "user": "548018d1e4b0c51c1f4d7326"}, {"problem": 32, "code": "mapcat (fn [x] [x x])", "user": "549e5e52e4b0f3d1d8e70f9e"}, {"problem": 32, "code": "#(mapcat vector % %)", "user": "549a999be4b0f3d1d8e70f6f"}, {"problem": 32, "code": "(fn [coll] (loop [coll coll acc []] (if (empty? coll) acc (recur (rest coll) (conj (conj acc (first coll)) (first coll))))))", "user": "54886239e4b0e286459a11d0"}, {"problem": 32, "code": "#(interleave % %)", "user": "549ea7e0e4b0f3d1d8e70fa3"}, {"problem": 32, "code": "mapcat #(vector % %)", "user": "4e617114535d8ccf87e9fe5b"}, {"problem": 32, "code": "#(interleave % %)", "user": "54769c7ae4b0c51c1f4d72a8"}, {"problem": 32, "code": "#(reduce (fn [v x] (concat v [x x])) [] %)", "user": "549def9ce4b0f3d1d8e70f99"}, {"problem": 32, "code": "(fn [xs] (reduce concat (map #(take 2 (repeat %)) xs)))", "user": "549c1713e4b0f3d1d8e70f82"}, {"problem": 32, "code": "#(interleave % %)", "user": "549c181ce4b0f3d1d8e70f83"}, {"problem": 32, "code": "#(interleave % %)", "user": "53716539e4b0fc7073fd6eb1"}, {"problem": 32, "code": "#(interleave % %)", "user": "53053be9e4b0d8b024fd375b"}, {"problem": 32, "code": "(fn [x] (reverse (reduce #(conj (conj %1 %2) %2) '() x)))", "user": "549cd548e4b0f3d1d8e70f91"}, {"problem": 32, "code": "reduce #(conj (conj % %2) %2) []", "user": "549a176ce4b0f3d1d8e70f69"}, {"problem": 32, "code": "mapcat (partial repeat 2)", "user": "549eb44fe4b0f3d1d8e70fa6"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "54908cc1e4b0b312c081ff32"}, {"problem": 32, "code": "(partial mapcat #(vec [% %]))", "user": "50aa777fe4b056ee01935866"}, {"problem": 32, "code": "(fn [x]\n  (apply concat (map #(into [] [% %]) x)))", "user": "54051338e4b0addc1aec6662"}, {"problem": 32, "code": "(fn [seq] (apply concat (map #(vec [% %]) seq)))", "user": "53e3e353e4b036ad0777e406"}, {"problem": 32, "code": "; Works on simple sequences, but not nested sequences\n;(flatten (map #(list % %) [1 2 3]))\n;(fn [coll] (flatten (map list coll coll)))\n\n;(defn duplicate [coll] (list coll coll))\n;#(flatten (map duplicate %))\n \n;General solution\nmapcat #(list % %)\n;mapcat #(vector % %)", "user": "5487eb1de4b0e286459a11ca"}, {"problem": 32, "code": "mapcat (fn [xs] [xs xs])", "user": "549dd591e4b0f3d1d8e70f98"}, {"problem": 32, "code": "(fn duplicate-seq [l]\n  (reduce concat (map #(repeat 2 %) l)))", "user": "52b9e920e4b07a9af57922c9"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "52e12ac5e4b09f7907dd141a"}, {"problem": 32, "code": "#(interleave % %)", "user": "538fe171e4b0b51d73faae92"}, {"problem": 32, "code": "(fn [xs] (apply concat (map #(cons % (cons % nil)) xs)))", "user": "5488537be4b0e286459a11cf"}, {"problem": 32, "code": "(fn my-double [v]\n  (loop [xs v z []]\n    (if (empty? xs)\n      z\n      (let [[x & rxs] xs]\n        (recur rxs (conj (conj z x) x))))))", "user": "54a31fdae4b09f271ff37c64"}, {"problem": 32, "code": "(fn [x] (apply concat (map #(repeat 2 %) x)))", "user": "54a1d643e4b09f271ff37c50"}, {"problem": 32, "code": "(fn [s]\n  (loop [coll []\n         remaining s]\n    (if (empty? remaining)\n      coll\n      (let [val (first remaining)]\n        (recur (conj coll val val) (rest remaining))\n        ))))", "user": "545b0275e4b01be26fd74648"}, {"problem": 32, "code": "(fn [col] (interleave col col))", "user": "5450c81fe4b0e397800069a4"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "54a70af9e4b09f271ff37c93"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "54a6399ee4b09f271ff37c85"}, {"problem": 32, "code": "(fn [s] (mapcat #(list % %) s))", "user": "5461500be4b01be26fd7469f"}, {"problem": 32, "code": "mapcat (fn [x] (list x x))", "user": "54a7336be4b09f271ff37c95"}, {"problem": 32, "code": "(fn [s]                                                                                                                                                                                                   \n  (interleave s s))", "user": "53403f42e4b085b17e897da8"}, {"problem": 32, "code": "(fn [x]\n  (loop [r [] c 0 n (count x)]\n    (if (= c n) \n      r\n      (let [e (nth x c)]\n        (recur (concat r [e e]) (inc c) n)\n      )\n      )\n    )\n)", "user": "54a677a9e4b09f271ff37c88"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "54a7efdee4b09f271ff37c9d"}, {"problem": 32, "code": "(fn [x] (apply concat (map #(list % %) x)))", "user": "54a7d707e4b09f271ff37c9b"}, {"problem": 32, "code": "(\n\tfn function [var] \n  \t(\n     interleave var var\n     )\n)", "user": "548018e8e4b0c51c1f4d7333"}, {"problem": 32, "code": "#(loop [s %1 r []]\n   (if (= s ())\n     r\n     (recur \n      (drop 1 s) \n      (conj r \n            (first s) \n            (first s)))))", "user": "545ded41e4b01be26fd74678"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "50ec69e0e4b04edc3377704a"}, {"problem": 32, "code": "(fn [coll] (apply concat (map #(concat [% %]) coll)))", "user": "54361d92e4b032a45b8692f7"}, {"problem": 32, "code": "(fn [s] (loop [in s, out []]\n            (if (empty? in)\n              out\n              (recur (rest in) (conj (conj out (first in)) (first in))))))", "user": "54a70484e4b09f271ff37c91"}, {"problem": 32, "code": "#(sort(concat % %))", "user": "54a11042e4b09f271ff37c49"}, {"problem": 32, "code": "(fn my [x]\n  (if (empty? x)\n    '()\n    (conj (my (rest x)) (first x) (first x))\n  )\n)", "user": "54982522e4b0b312c081ff7c"}, {"problem": 32, "code": "(fn [coll]\n   (sort (concat coll coll)))", "user": "54a1d047e4b09f271ff37c4f"}, {"problem": 32, "code": "mapcat #(list %%)", "user": "54ab6773e4b09f271ff37cc8"}, {"problem": 32, "code": "(comp \n (partial reduce #(conj %1 %2 %2) '()) \n reverse)", "user": "549cc867e4b0f3d1d8e70f8f"}, {"problem": 32, "code": "#(sort (into % %))", "user": "53e8e42ce4b036ad0777e48e"}, {"problem": 32, "code": "#(interleave % %)", "user": "54a854f5e4b09f271ff37ca2"}, {"problem": 32, "code": "#(interleave % %)", "user": "53e88247e4b036ad0777e489"}, {"problem": 32, "code": "mapcat (fn [x] [x x])", "user": "539f45dce4b0ca733b974497"}, {"problem": 32, "code": "(fn [x] (apply concat (map #(vector % %) x)))", "user": "54ab46fee4b09f271ff37cc3"}, {"problem": 32, "code": "#(interleave % %)", "user": "54800885e4b0c51c1f4d7323"}, {"problem": 32, "code": "(fn fc32 [l]\n  (if (empty? l) '()\n    (cons (first l) (cons (first l) (fc32 (rest l))))))", "user": "547884d7e4b0c51c1f4d72bd"}, {"problem": 32, "code": "(fn [x] (mapcat #(repeat 2 %) x))", "user": "54ac8df8e4b09f271ff37cd7"}, {"problem": 32, "code": "(fn [x]\n  (reduce (fn [memo item] (conj memo item item))\n          []\n          x))", "user": "532902f8e4b09d4e7a9b550e"}, {"problem": 32, "code": "mapcat (fn[x] (vector x x))", "user": "4fabbd3ee4b081705acca21e"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "54ad9d76e4b09f271ff37ce6"}, {"problem": 32, "code": "(fn [x] (reduce #(conj %1 %2 %2) [] x))", "user": "54b13dbce4b09f271ff37d1c"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "54ad4863e4b09f271ff37ce0"}, {"problem": 32, "code": "#(mapcat vector % %)", "user": "54ae541ae4b09f271ff37cef"}, {"problem": 32, "code": "(fn [s] (mapcat #(list % %) s))", "user": "540459bfe4b0addc1aec6656"}, {"problem": 32, "code": "#(interleave % %)", "user": "54af6fb0e4b09f271ff37d08"}, {"problem": 32, "code": "#(interleave % %)", "user": "54b13a40e4b09f271ff37d1b"}, {"problem": 32, "code": "#(reverse (reduce (fn [x y] (cons y (cons y x))) [] %))", "user": "54ab502fe4b09f271ff37cc4"}, {"problem": 32, "code": "#(reduce into (map (fn [x] [x x]) %))", "user": "52a267c6e4b04e0c58e87bef"}, {"problem": 32, "code": "mapcat #(vector % %)", "user": "54b04708e4b09f271ff37d11"}, {"problem": 32, "code": "(fn duplicate [xs]\n  (reverse (reduce #(cons %2 (cons %2 %1)) '() xs)))", "user": "54aec1b6e4b09f271ff37cf6"}, {"problem": 32, "code": "#(reduce (fn [c _] (concat c (list _) (list _))) '() %)", "user": "549d36c6e4b0f3d1d8e70f94"}, {"problem": 32, "code": "#(sort (concat % %))", "user": "54af220ce4b09f271ff37d02"}, {"problem": 32, "code": "#(interleave % %)", "user": "528e441be4b0239c8a67aed8"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2)[]", "user": "5481be5fe4b0e286459a1172"}, {"problem": 32, "code": "(fn [values]\n  (reduce\n   #(concat %1 (repeat 2 %2))\n   []\n   values))", "user": "5463c824e4b01be26fd746c5"}, {"problem": 32, "code": "#(interleave % % )", "user": "54b556fce4b05787c3b1639e"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "54b5b3cce4b05787c3b163ab"}, {"problem": 32, "code": "#(apply concat (map (partial repeat 2) %))", "user": "54b448f2e4b05787c3b1638e"}, {"problem": 32, "code": "#(reduce concat (for [x %1] [x x]))", "user": "54b2d392e4b09f271ff37d2f"}, {"problem": 32, "code": "(fn dub [x]\n  (let [twice #(list % %)]\n    (reduce concat (map twice x))   \n    )\n)", "user": "54b050cee4b09f271ff37d13"}, {"problem": 32, "code": "(fn [x] (interleave x x))", "user": "533c5249e4b0e30313ee6cdd"}, {"problem": 32, "code": "#(reverse\n  (reduce \n   (fn [mylist item]\n     (conj mylist item item)\n     ) () % \n   )\n  )", "user": "53f3b216e4b0742d9025b0f8"}, {"problem": 32, "code": "#(interleave %1 %1)", "user": "54ae6da2e4b09f271ff37cf2"}, {"problem": 32, "code": "#(interleave % %)", "user": "54ab951be4b09f271ff37ccc"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "544f732fe4b0e39780006994"}, {"problem": 32, "code": "#(reduce (fn [arg1 arg2] (conj arg1 arg2 arg2)) [] %)", "user": "54b2ec84e4b09f271ff37d33"}, {"problem": 32, "code": "(fn [to-dupe]\n      (apply concat (map (fn [i] [i i]) to-dupe)))", "user": "547b9cdce4b0c51c1f4d72da"}, {"problem": 32, "code": "(fn [x] (->> x\n                 (map #(list % %))\n                 (reduce concat '())))", "user": "5493d908e4b0b312c081ff52"}, {"problem": 32, "code": "#(mapcat list % %)", "user": "54b67463e4b05787c3b163bc"}, {"problem": 32, "code": "(fn [s] (interleave s s))", "user": "50b42cbbe4b001349b2f4abe"}, {"problem": 32, "code": "#(loop [a % r [] ]\n    (if-let [e (first a)] \n      (recur (rest a) (concat r [e e]))\n      r))", "user": "54b45938e4b05787c3b1638f"}, {"problem": 32, "code": "(fn dupseq\n  ([out in]\n   (if (empty? in)\n     out\n     (dupseq (concat out [(first in) (first in)]) (rest in))))\n  ([in]\n   (dupseq [] in))\n)", "user": "54b2e881e4b09f271ff37d32"}, {"problem": 32, "code": "(fn [coll]\n  (reduce (fn [acc item] (conj acc item item)) [] coll) \n)", "user": "54bb0f63e4b0ed20f4ff6ebc"}, {"problem": 32, "code": "(fn \n  [coll]\n  (reduce (fn [duped el]\n    (cons el (cons el duped)))\n  '()\n  (reverse coll)))", "user": "548db64ce4b0e286459a121c"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "54bad522e4b0ed20f4ff6eb8"}, {"problem": 32, "code": "(fn [xs]\n  (mapcat #(vector % %) xs))", "user": "54acf5c7e4b09f271ff37cdd"}, {"problem": 32, "code": "(fn [x] (reduce (fn [m,v] (cons v (cons v m))) '() (reverse x)))", "user": "54b972bbe4b0ed20f4ff6ead"}, {"problem": 32, "code": "(let\n    [\n      duplicateList (fn x [s builder]\n                      (if (not(empty? s))\n                        (x (butlast s) (cons (last s) (cons (last s) builder)))\n                        builder)\n                      )\n     \n    ]\n    (fn [s] (duplicateList s '()))\n  )", "user": "54ba8206e4b0ed20f4ff6eb6"}, {"problem": 32, "code": "(fn [col]\n  (reduce #(conj %1 %2 %2) [] col))", "user": "51e8ee6be4b07cae92c04bfd"}, {"problem": 32, "code": "#(interleave % %)", "user": "54b6c24be4b0ed20f4ff6e7c"}, {"problem": 32, "code": "mapcat (fn [a] [a a])", "user": "54bd04e7e4b0ed20f4ff6ed8"}, {"problem": 32, "code": "#(mapcat list % %)", "user": "54543484e4b0e397800069d4"}, {"problem": 32, "code": "(fn [c] (reverse (reduce (fn [a i] (conj a i i)) '() c)))", "user": "54bc69a7e4b0ed20f4ff6ecf"}, {"problem": 32, "code": "(fn doub [elements]\n  (loop [new-elements [],\n         elements elements]\n    (if (empty? elements)\n      new-elements\n      (recur (apply conj new-elements (repeat 2 (first elements))) (next elements)))))", "user": "54bd91d7e4b0ed20f4ff6ee2"}, {"problem": 32, "code": "(fn[l]\n  (loop [l (apply list l) nl []]\n    (if (empty? l)\n      (apply list nl)\n      (let [value (peek l)]\n        (recur (pop l) (conj (conj nl value) value))\n        )         \n      )\n    )\n  )", "user": "54b90836e4b0ed20f4ff6e9d"}, {"problem": 32, "code": "#(sort (into '() (into % %)))", "user": "54b8dfece4b0ed20f4ff6e9a"}, {"problem": 32, "code": "(fn [x] (interleave x x))", "user": "54b40fe6e4b05787c3b1638a"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "54bec835e4b0ed20f4ff6ef7"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "54be7772e4b0ed20f4ff6eea"}, {"problem": 32, "code": "mapcat (fn [x] [x x])", "user": "54bd3aefe4b0ed20f4ff6edb"}, {"problem": 32, "code": "#(reduce concat (map (partial repeat 2) %))", "user": "54bcd12be4b0ed20f4ff6ed7"}, {"problem": 32, "code": "mapcat #(vector % %)", "user": "548018d7e4b0c51c1f4d7328"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "54bf7d15e4b0ed20f4ff6f03"}, {"problem": 32, "code": "(fn [a x] (if-let [l (last x)] (recur (conj (conj a l) l) (butlast x)) a)) '()", "user": "54bc575ce4b0ed20f4ff6ecb"}, {"problem": 32, "code": "(fn dup[coll]\n  (if (empty? coll)\n    ()\n    (concat\n     (repeat 2 (first coll))\n     (dup (rest coll)))))", "user": "54b10d08e4b09f271ff37d18"}, {"problem": 32, "code": "(fn dup [s] \n  (if (nil? s) \n    '()\n    (conj (dup (next s)) (first s) (first s))))", "user": "54b95f3de4b0ed20f4ff6eab"}, {"problem": 32, "code": "(fn [x] (reverse (reduce (fn [y, z] (conj (conj y z) z) ) `() x )))", "user": "54b331dbe4b09f271ff37d37"}, {"problem": 32, "code": "mapcat #(vector % %)", "user": "54bfc88ae4b0ed20f4ff6f09"}, {"problem": 32, "code": "(fn [c]\n(loop [coll c acc [] ]\n   (if (empty? coll)\n     acc\n     (recur (rest coll) (conj acc (first coll) (first coll) ) ))))", "user": "54bb9730e4b0ed20f4ff6ebf"}, {"problem": 32, "code": "#(interleave % %)", "user": "54aa665fe4b09f271ff37cb8"}, {"problem": 32, "code": "(fn dup [items] (\n    if (nil? (first items)) '() (\n  \tconcat [(first items)] [(first items)] (dup (rest items))\n    )\n))", "user": "54c0ce91e4b0ed20f4ff6f18"}, {"problem": 32, "code": "#(mapcat list % %)", "user": "54a73c1fe4b09f271ff37c96"}, {"problem": 32, "code": ";reduce #(concat %1 [%2 %2]) []\n\n;mapcat #(list % %)\n\n;#(interleave % %)\n\nreduce #(conj %1 %2 %2) []", "user": "53838b9ee4b06839e8705ee1"}, {"problem": 32, "code": "(fn [ary]\n    (reduce (fn [lst el] (concat lst [el el])) '() ary))", "user": "54a8fdcee4b09f271ff37ca9"}, {"problem": 32, "code": "(fn [x] (apply concat (map #(repeat 2 %) x)))", "user": "508fabf9e4b0ea685a20f769"}, {"problem": 32, "code": "(fn [x](reverse (reduce #(cons %2 (cons %2 %1)) '() x)))", "user": "54bfc203e4b0ed20f4ff6f08"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "54b65694e4b05787c3b163b9"}, {"problem": 32, "code": "(fn doubler [c] (mapcat (fn [e] (list e e)) c))", "user": "5474d1f4e4b0c51c1f4d728c"}, {"problem": 32, "code": "mapcat (fn [x] [x x])", "user": "4f0f3725535d0136e6c22337"}, {"problem": 32, "code": "#(interleave % %)", "user": "54bbba99e4b0ed20f4ff6ec2"}, {"problem": 32, "code": "#(interleave % %)", "user": "53e73fe3e4b036ad0777e478"}, {"problem": 32, "code": "(partial mapcat #(list %1 %1))", "user": "4e435681535dc968683fc4a1"}, {"problem": 32, "code": "(fn [coll]\n  (mapcat #(repeat 2 %) coll))", "user": "54c31f1be4b045293a27f609"}, {"problem": 32, "code": "#(interleave % %)", "user": "54bebeb9e4b0ed20f4ff6ef4"}, {"problem": 32, "code": "mapcat (fn [x] (list x x))", "user": "54c19050e4b0ed20f4ff6f26"}, {"problem": 32, "code": "(fn [x] (interleave x x))", "user": "5447e5b7e4b032a45b8693c4"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "54c11fdae4b0ed20f4ff6f1b"}, {"problem": 32, "code": "(fn [x] (seq (mapcat (fn [n] [n n]) x)))", "user": "54c4e7cde4b045293a27f620"}, {"problem": 32, "code": "#(interleave % %)", "user": "5474666ae4b0c51c1f4d7288"}, {"problem": 32, "code": "(fn ! [s]\n\t(if (empty? s) (empty s)\n       (let [f (first s) r (rest s)]\n       \t\t(cons f (cons f (! r)))\n         )\n      )\n  )", "user": "54c271b9e4b045293a27f602"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "54c5cc17e4b045293a27f624"}, {"problem": 32, "code": "(fn [initial-sequence]  \n  (loop [sq initial-sequence res '()]     \n    (if (empty? sq)   \n      res \n      (recur (butlast sq) (conj res (last sq) (last sq))))))", "user": "54bbe505e4b0ed20f4ff6ec5"}, {"problem": 32, "code": "(fn [c] (reduce #(into % [%2 %2]) (empty c) c))", "user": "5339b53fe4b0e30313ee6cac"}, {"problem": 32, "code": "(partial reduce #(concat %1 [%2 %2]) [])", "user": "4f8be895e4b02e764a0a5184"}, {"problem": 32, "code": "(fn [sq] (reduce (fn [acc, e] (conj acc e e) ) [] sq))", "user": "54b66089e4b05787c3b163ba"}, {"problem": 32, "code": "(fn [c] (let [rc (reverse c)] (reduce #(conj %1 %2 %2) '() rc)))", "user": "546692aee4b01be26fd746e7"}, {"problem": 32, "code": "#(interleave % %)", "user": "53c69ebce4b00fb29b22129c"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "548b8a50e4b0e286459a11ff"}, {"problem": 32, "code": "(partial reduce (fn [acc x] (conj acc x x)) [])", "user": "54c83824e4b045293a27f649"}, {"problem": 32, "code": "(fn dup [l]\n  (mapcat (fn [x] (repeat 2 x)) l)\n)", "user": "54c82b27e4b045293a27f645"}, {"problem": 32, "code": "reduce #(conj (conj %1 %2) %2) []", "user": "54be3ab6e4b0ed20f4ff6ee7"}, {"problem": 32, "code": "#(mapcat (fn [x] (list x x)) %)", "user": "525b142fe4b0cb4875a45d05"}, {"problem": 32, "code": "#((fn f [l r]\n  (if (empty? l)\n    (reverse r)\n    (recur (rest l) (cons (first l) (cons (first l) r))))) % '())", "user": "54c611d1e4b045293a27f627"}, {"problem": 32, "code": "(fn [xs]\n  (loop [result [] xs xs]\n    (if (empty? xs)\n      result\n      (recur\n       (concat result [(first xs) (first xs)])\n       (rest xs)))))", "user": "54c8d4a8e4b045293a27f654"}, {"problem": 32, "code": "(fn [x] (mapcat #(list % %) x))", "user": "54c169ade4b0ed20f4ff6f24"}, {"problem": 32, "code": "(fn dup [l]\n  (cond\n   (seq l) (cons (first l)\n                 (cons (first l)\n                       (dup (rest l))))\n   :else '()))", "user": "54383fd6e4b032a45b869312"}, {"problem": 32, "code": "(fn dup [s]\n  (sort (take (* 2 (count s)) (cycle s))))", "user": "53bc10f5e4b047364c04450d"}, {"problem": 32, "code": "(fn [xs] (interleave xs xs))", "user": "54be792ee4b0ed20f4ff6eeb"}, {"problem": 32, "code": "mapcat #(seq [% %])", "user": "54c97cb3e4b045293a27f677"}, {"problem": 32, "code": "(fn [s] (reduce #(concat %1 (repeat 2 %2)) '() s))", "user": "54c05fd7e4b0ed20f4ff6f12"}, {"problem": 32, "code": "#(interleave % %)", "user": "54c9636fe4b045293a27f66e"}, {"problem": 32, "code": "mapcat (fn [x] [x x])", "user": "50d0d2dde4b00b15ecee9768"}, {"problem": 32, "code": "#(interleave % %)", "user": "54b7f217e4b0ed20f4ff6e8f"}, {"problem": 32, "code": "#(interleave % %)", "user": "54ca9ca8e4b057c6fda3a265"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "5432df22e4b0dad94371f2f5"}, {"problem": 32, "code": "#(mapcat list % %)", "user": "546a6e9fe4b00cfc9eacc157"}, {"problem": 32, "code": "#(interleave % %)", "user": "52a0237de4b04e0c58e87bbe"}, {"problem": 32, "code": "#(interleave % %)", "user": "54c9f165e4b045293a27f687"}, {"problem": 32, "code": "(fn dup [seq]\n    (cons (first seq)\n      (cons (first seq)\n        (if (= '() (rest seq))\n          '()\n          (dup (rest seq))))))", "user": "54c9e00be4b045293a27f683"}, {"problem": 32, "code": "(fn [s]\n  (reduce #(conj %1 %2 %2) [] s))", "user": "54c13b87e4b0ed20f4ff6f20"}, {"problem": 32, "code": "(comp (partial reduce into) (partial map (fn [x] [x x])))", "user": "54cbe00ee4b057c6fda3a285"}, {"problem": 32, "code": "(fn f [xs] (if (empty? xs) xs (conj (f (rest xs)) (first xs) (first xs))))", "user": "54c641f8e4b045293a27f628"}, {"problem": 32, "code": "#(interleave % %)", "user": "545ddac3e4b01be26fd74676"}, {"problem": 32, "code": "#(interleave % %)", "user": "54c97a56e4b045293a27f676"}, {"problem": 32, "code": "#(sort (concat % %))", "user": "54cbb0fde4b057c6fda3a27b"}, {"problem": 32, "code": "(partial mapcat #(list % %))", "user": "54cd651be4b057c6fda3a2a2"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "4fc4eb1ee4b081705acca354"}, {"problem": 32, "code": "#(interleave % %)", "user": "54c8ac49e4b045293a27f64e"}, {"problem": 32, "code": "#(reduce (fn [x y] (conj x y y)) [] %)", "user": "541b1f25e4b01498b1a71a63"}, {"problem": 32, "code": "(fn [w] (reduce (fn [x y] (conj x y y)) [] w))", "user": "54cf0986e4b018d918be98c7"}, {"problem": 32, "code": "(fn [xs] (for [x xs\n               y [x x]]\n           y))", "user": "4ea03f70535d7eef308072a1"}, {"problem": 32, "code": "(fn f [s]\n  (sort-by identity (into s s)))", "user": "54ce3790e4b057c6fda3a2ab"}, {"problem": 32, "code": "(fn [lat]\n  (reduce concat (map #(take 2 (repeat %)) lat)))", "user": "54d0f654e4b0e8a36923e5d6"}, {"problem": 32, "code": "(fn [xs] (apply concat (map #(vector % %) xs)))", "user": "54d03026e4b018d918be98de"}, {"problem": 32, "code": "(fn dup [[x & xs :as coll]]\n  (if (empty? coll) []\n      (concat [x x] (dup xs))))", "user": "54b07c1ee4b09f271ff37d16"}, {"problem": 32, "code": "#(interleave % %)", "user": "54d1cf2ee4b0e8a36923e5eb"}, {"problem": 32, "code": "#(interleave % %)", "user": "54d2b411e4b0e8a36923e5f9"}, {"problem": 32, "code": "reduce (fn [coll x] (conj coll x x)) []", "user": "54d0cedde4b0e8a36923e5d2"}, {"problem": 32, "code": "mapcat (fn [x] [x x])", "user": "54d0d115e4b0e8a36923e5d3"}, {"problem": 32, "code": "(fn [x] (apply concat (map (fn [y] [y y]) x)))", "user": "54cad2d5e4b057c6fda3a26c"}, {"problem": 32, "code": "(fn duplicate-seq [c]\n  (let [s (seq c)]\n    (when s\n      (concat (repeat 2 (first s)) (duplicate-seq (rest s))))))", "user": "54d000c7e4b018d918be98d7"}, {"problem": 32, "code": "(fn dup [s]\n  (if (empty? s)\n    '()\n    (cons (first s)\n          (cons (first s)\n                (dup (rest s))))))", "user": "54d26316e4b0e8a36923e5f2"}, {"problem": 32, "code": "reduce #(concat %1 (list %2 %2)) '()", "user": "54d2892fe4b0e8a36923e5f7"}, {"problem": 32, "code": "(fn [vals] (reduce (fn [acc val] (concat acc [val val])) [] vals))", "user": "53161a56e4b08068f379ed3e"}, {"problem": 32, "code": "(fn [x] (apply concat (map #(repeat 2 %) x)))", "user": "54d37e4ce4b0e8a36923e608"}, {"problem": 32, "code": "(fn [coll]\n   (interleave coll coll))", "user": "54aec099e4b09f271ff37cf5"}, {"problem": 32, "code": "(fn a [x] \n  (reverse \n   (reduce #(cons %2 (cons %2 %1)) '() x)\n  )\n)", "user": "54c6619ae4b045293a27f62b"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "54d0e6c5e4b0e8a36923e5d4"}, {"problem": 32, "code": "(fn [s] (reverse (reduce #(into %1 (list %2 %2)) '() s)))", "user": "54b5ce67e4b05787c3b163ac"}, {"problem": 32, "code": "#(interleave % %)", "user": "54c8eb61e4b045293a27f658"}, {"problem": 32, "code": "(fn [xs] (reduce #(conj %1 %2 %2) [] xs))", "user": "54d492dbe4b0a52adc2e2001"}, {"problem": 32, "code": "#(loop [H [] T %]\n    (if (empty? T)\n      H\n      (recur (conj H (first T) (first T)) (rest T))))", "user": "53d64811e4b0e771c3025456"}, {"problem": 32, "code": "#(mapcat (partial repeat 2) %)", "user": "4e3ff3a4535dc968683fc499"}, {"problem": 32, "code": "(fn [x] (reduce #(conj %1 %2 %2) [] x))", "user": "54d6f22de4b0a52adc2e2023"}, {"problem": 32, "code": "#(interleave % %)", "user": "54c23252e4b045293a27f5fc"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "54cc4156e4b057c6fda3a28c"}, {"problem": 32, "code": "#(interleave % %)", "user": "54cc26c1e4b057c6fda3a28a"}, {"problem": 32, "code": "mapcat (partial repeat 2)", "user": "54d5fbe9e4b0a52adc2e2014"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "54ce6eede4b057c6fda3a2ad"}, {"problem": 32, "code": "(fn [coll] (mapcat (juxt identity identity) coll))", "user": "541d3c0fe4b01498b1a71a7e"}, {"problem": 32, "code": "#(mapcat (partial repeat 2) %)", "user": "54d75e4ce4b0a52adc2e202a"}, {"problem": 32, "code": "#(let [x %] (interleave x x))", "user": "54d753ebe4b0a52adc2e2029"}, {"problem": 32, "code": "(fn [coll] (mapcat (fn [x] (list x x)) coll))", "user": "54b402dce4b05787c3b16388"}, {"problem": 32, "code": "#(interleave % %)", "user": "54cb378be4b057c6fda3a273"}, {"problem": 32, "code": "#(apply concat (map (fn [x] (list x x)) %))", "user": "54d7ed8de4b0a52adc2e2034"}, {"problem": 32, "code": "(fn [s] (->> s (map #(list % %)) (apply concat)))", "user": "54d412e2e4b0a52adc2e1ffe"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5480cce5e4b0e286459a115f"}, {"problem": 32, "code": "reduce #(into %1 (take 2 (repeat %2))) []", "user": "54c72b19e4b045293a27f636"}, {"problem": 32, "code": "(fn [coll] (apply concat (map (fn [x] (list x x)) coll) ))", "user": "54cb3497e4b057c6fda3a272"}, {"problem": 32, "code": "#(sort (concat % %))", "user": "54d70f40e4b0a52adc2e2027"}, {"problem": 32, "code": "(fn \n  [xs] \n  (reduce #(conj % %2 %2) [] xs))", "user": "54d267e0e4b0e8a36923e5f3"}, {"problem": 32, "code": "#(interleave %1 %1)", "user": "54725331e4b094393f72dd76"}, {"problem": 32, "code": "(fn [sq] (interleave sq sq))", "user": "54b83ae9e4b0ed20f4ff6e95"}, {"problem": 32, "code": "#(reverse (reduce (fn [lst itm]\n                     (conj lst itm itm))\n                   '()\n                   (seq %)))", "user": "53f31dafe4b0742d9025b0f0"}, {"problem": 32, "code": "#(mapcat (juxt identity identity) %)", "user": "53d9e587e4b0e771c302547c"}, {"problem": 32, "code": "(fn ([s] (interleave s s)))", "user": "54d8cc38e4b0a52adc2e203e"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "4ec66e84535d6d7199dd36cd"}, {"problem": 32, "code": "(fn [xs] (apply concat (map #(list % %) xs)))", "user": "54ba9ee8e4b0ed20f4ff6eb7"}, {"problem": 32, "code": "#(interleave % %)", "user": "4ee7d6d8535d93acb0a66870"}, {"problem": 32, "code": "#(apply concat (for [x %] (repeat 2 x)))", "user": "54dbcbbde4b024c67c0cf774"}, {"problem": 32, "code": "(partial reduce #(conj %1 %2 %2) [])", "user": "54d6c80ce4b0a52adc2e2020"}, {"problem": 32, "code": "(fn duplicate [lst]\n  (cond\n    (empty? lst) nil\n    :else (cons (first lst)(cons (first lst) (duplicate (rest lst))))))", "user": "534f8c9ae4b084c2834f4acd"}, {"problem": 32, "code": "#(interleave % %)", "user": "54db8ddae4b024c67c0cf767"}, {"problem": 32, "code": "#(interleave %1 %1)", "user": "51b91b08e4b0e871ca4958f8"}, {"problem": 32, "code": "#(mapcat (fn [e] [e e]) %)", "user": "54d55abfe4b0a52adc2e200f"}, {"problem": 32, "code": "(fn [x] (reverse (reduce #(conj (conj %1 %2) %2 ) '() x)))", "user": "54d4b3a7e4b0a52adc2e2003"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "54dd76c8e4b024c67c0cf794"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "54ddb556e4b024c67c0cf798"}, {"problem": 32, "code": "(fn[s] (mapcat #(vector % %) s))", "user": "54d4ba98e4b0a52adc2e2004"}, {"problem": 32, "code": "(fn [col] (interleave col col))", "user": "54df2274e4b024c67c0cf7a8"}, {"problem": 32, "code": "(fn [x] (mapcat #(list (identity %) (identity %)) x) )", "user": "54db33f1e4b024c67c0cf75d"}, {"problem": 32, "code": "(partial mapcat #(list % %))", "user": "5066003ee4b0313a384e5647"}, {"problem": 32, "code": "(fn [x] (mapcat (fn [i] (vector i i)) x))", "user": "549a1fede4b0f3d1d8e70f6a"}, {"problem": 32, "code": "#(interleave % %)", "user": "54dae16de4b024c67c0cf758"}, {"problem": 32, "code": "(fn [coll] (mapcat #(list % %) coll))", "user": "54d70bbfe4b0a52adc2e2026"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "54df2609e4b024c67c0cf7a9"}, {"problem": 32, "code": "(fn f [col]\n(reverse (loop [out-col (empty col) in-col col ]\n  (let [x (first in-col)]\n  (if (empty? in-col) out-col (recur (cons x (cons x out-col)) (rest in-col))))\n\n)))", "user": "547b4ec6e4b0c51c1f4d72d5"}, {"problem": 32, "code": "(fn [s]\n  ((fn [acc s]\n    (if (empty? s)\n      acc\n      (recur (concat acc (list (first s) (first s))) (rest s))))\n   '() s))", "user": "54d87b54e4b0a52adc2e2038"}, {"problem": 32, "code": "#(reduce (fn [s i] (conj s i i)) [] %)", "user": "54e3df6ae4b024c67c0cf7e3"}, {"problem": 32, "code": "reduce (fn [e n] (conj e n n)) []", "user": "54df3c94e4b024c67c0cf7aa"}, {"problem": 32, "code": "(fn [col] (reverse(reduce #(conj %1 %2 %2) '() col)))", "user": "54d22860e4b0e8a36923e5ef"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "54ccf107e4b057c6fda3a294"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "54d104a5e4b0e8a36923e5d9"}, {"problem": 32, "code": "#(interleave % %)", "user": "54e51c7be4b024c67c0cf7f7"}, {"problem": 32, "code": "#(interleave % %)", "user": "54d2c4c5e4b0e8a36923e5fa"}, {"problem": 32, "code": "(fn [s] (mapcat #(vector % %) s))", "user": "54da46e5e4b024c67c0cf753"}, {"problem": 32, "code": "(fn [col]\n   (apply concat (map #(conj [] %1 %1) col)))", "user": "541f89a5e4b01498b1a71a99"}, {"problem": 32, "code": "(fn ff [s]  \n     (let [f (first s)\n           r (rest s)]\n        (if (nil? f) \n          '()\n          (conj (conj (ff r) f ) f))\n     ))", "user": "542a7c9be4b01498b1a71b41"}, {"problem": 32, "code": "(partial mapcat #(vector % %))", "user": "54ca130ce4b057c6fda3a250"}, {"problem": 32, "code": "#(interleave % %)", "user": "54e85a7fe4b024c67c0cf823"}, {"problem": 32, "code": "(fn dup [s]\n  (if (empty? s) nil\n  (conj (conj (dup (rest s)) (first s)) (first s))))", "user": "54e6762be4b024c67c0cf809"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "54e2a779e4b024c67c0cf7d3"}, {"problem": 32, "code": "#(apply concat (for [x %] [x x]))", "user": "54e32090e4b024c67c0cf7d9"}, {"problem": 32, "code": "mapcat #(conj () % %)", "user": "54cbc9ede4b057c6fda3a27f"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "54e5bdf2e4b024c67c0cf7fe"}, {"problem": 32, "code": "(fn [arg]\n  (loop [arg (reverse arg) dupl '()]\n    (if (empty? arg) \n      dupl\n      (recur (next arg) (cons (first arg) (cons (first arg) dupl))))))", "user": "54e10605e4b024c67c0cf7bf"}, {"problem": 32, "code": "(fn [a] (apply concat (map #(list % %) a)))", "user": "533f1584e4b085b17e897d9b"}, {"problem": 32, "code": "(fn cmprs [coll]\n  (when-let [[f & r] (seq coll)] \n    (cons f (cons f (cmprs r)))))", "user": "54ecd7dde4b024c67c0cf85c"}, {"problem": 32, "code": "(fn [coll] (mapcat #(repeat 2 %) coll))", "user": "54caaa48e4b057c6fda3a267"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "52fa9435e4b047fd55836ffc"}, {"problem": 32, "code": "(fn [x] (mapcat identity (map (fn [j] [j j]) x)))", "user": "51515a19e4b03e678e393acc"}, {"problem": 32, "code": "mapcat (fn [e] [e e])", "user": "518ba795e4b0f028e99addf0"}, {"problem": 32, "code": "#(mapcat vector % %)", "user": "4ec1923f535dfed6da9c6db2"}, {"problem": 32, "code": "(fn [xs]\n  (mapcat #(vector % %) xs))", "user": "54ecd716e4b024c67c0cf85a"}, {"problem": 32, "code": "reduce #(concat %1 (list %2 %2)) '()", "user": "54edcf96e4b024c67c0cf866"}, {"problem": 32, "code": "#(interleave % %)", "user": "54f0433ce4b024c67c0cf893"}, {"problem": 32, "code": "(fn [v]\n   (reduce #(conj %1 %2 %2) [] v))", "user": "53fcd574e4b0de5c418485d9"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "4f598c87e4b0030a34fb2ada"}, {"problem": 32, "code": "#(reduce concat (for [x %] [x x]))", "user": "54df7922e4b024c67c0cf7ad"}, {"problem": 32, "code": "(fn [coll] (apply concat (map #(list % %) coll)))", "user": "54a6baaee4b09f271ff37c8a"}, {"problem": 32, "code": "#(interleave % %)", "user": "54f26266e4b024c67c0cf8c5"}, {"problem": 32, "code": "(fn [seq]\n  (reduce #(concat %2 %1) (reverse (map (fn [x] [x x]) seq))))", "user": "546ff835e4b00cfc9eacc1b4"}, {"problem": 32, "code": "(partial mapcat #(-> [% %]))", "user": "54f0d3fde4b024c67c0cf8a6"}, {"problem": 32, "code": "(fn [xs] (seq (reduce #(conj (conj % %2) %2) [] xs)))", "user": "52a0f9c4e4b04e0c58e87bd0"}, {"problem": 32, "code": "#(interleave %1 %1)", "user": "504e2d18e4b0f6ff3350c47a"}, {"problem": 32, "code": "#(reduce (fn [x y] (conj x y y)) [] %)", "user": "54f2fe9fe4b050824f58f5b8"}, {"problem": 32, "code": "(fn [xs]\n\t(reduce #(concat %1 (repeat 2 %2)) [] xs))", "user": "54c74a78e4b045293a27f637"}, {"problem": 32, "code": "#(interleave % %)", "user": "54e606c3e4b024c67c0cf803"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "54f4e286e4b0f2f3c5226e8c"}, {"problem": 32, "code": "(fn [coll]\n  (reverse\n   (reduce #(cons %2 (cons %2 %1)) '() coll)))", "user": "54f583bbe4b0f2f3c5226e93"}, {"problem": 32, "code": "(partial mapcat #(list % %) )", "user": "4f0554aa535dcb61093f6bf5"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "54f2a1b8e4b024c67c0cf8cb"}, {"problem": 32, "code": "(fn duplicate [x]\n  (reduce #(conj %1 %2 %2) [] x))", "user": "54f64e99e4b0f2f3c5226ea4"}, {"problem": 32, "code": "#(interleave % %)", "user": "54f3970fe4b050824f58f5c5"}, {"problem": 32, "code": "#(reduce (fn [lst e] (conj (conj lst e) e)) [] %)", "user": "54eee3a3e4b024c67c0cf879"}, {"problem": 32, "code": "(fn [x] (reduce #(conj %1 %2 %2) [] (seq x)))", "user": "54f4a457e4b0f2f3c5226e83"}, {"problem": 32, "code": "#(interleave % %)", "user": "54f39cd6e4b050824f58f5c6"}, {"problem": 32, "code": "(fn [xs]\n    (reduce #(concat %1 (repeat 2 %2)) [] xs))", "user": "50a3e2eae4b0ceace084d49a"}, {"problem": 32, "code": "(fn [x] (apply concat (map #(take 2 (repeat %)) x)))", "user": "54eca495e4b024c67c0cf855"}, {"problem": 32, "code": "(fn [coll]\n  (reduce #(conj %1 %2 %2) [] coll))", "user": "54edfa10e4b024c67c0cf868"}, {"problem": 32, "code": "(fn [x] (mapcat #(take 2 (repeat %)) x))", "user": "531c7bdde4b08068f379eda2"}, {"problem": 32, "code": "(fn [s] (reduce #(conj %1 %2 %2) [] s))", "user": "54f5fb57e4b0f2f3c5226e9f"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "54ef4a1ee4b024c67c0cf883"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "54e1197fe4b024c67c0cf7c0"}, {"problem": 32, "code": "reduce #(concat %1 [%2 %2]) []", "user": "54d9366ce4b0a52adc2e204e"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "539c736ce4b0b51d73faaf2b"}, {"problem": 32, "code": "#(apply concat (map (partial repeat 2) %1))", "user": "54f9920ee4b01ecee9d8883f"}, {"problem": 32, "code": "#(reduce concat (map (partial repeat 2) %1))", "user": "4f03e60d535dcb61093f6b7a"}, {"problem": 32, "code": "#(interleave % %)", "user": "54f49c39e4b0f2f3c5226e81"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "54f4adc8e4b0f2f3c5226e86"}, {"problem": 32, "code": "(fn [coll]\n  (reverse\n   (reduce #(cons %2 (cons %2 %1)) '() coll)))", "user": "54d321b3e4b0e8a36923e602"}, {"problem": 32, "code": "(fn [xs] (reduce concat (map #(list % %) xs)))", "user": "54f90537e4b01ecee9d88833"}, {"problem": 32, "code": "(fn [y] (reverse (reduce #(cons %2 (cons %2 %1)) '() y)))", "user": "54e0a9c3e4b024c67c0cf7b5"}, {"problem": 32, "code": "(fn [xs]\n\t(loop [ys xs res []]\n      (if (empty? ys) res\n\t\t(recur (rest ys) (conj res (first ys) (first ys)))\n     ))\n  )", "user": "54f73502e4b01ecee9d88817"}, {"problem": 32, "code": "(fn [coll]\n  (loop [coll coll acc []]\n    (if (empty? coll)\n      acc\n      (recur (rest coll) (conj acc (first coll) (first coll))))))", "user": "54fdbe3fe4b07d26eda61d3b"}, {"problem": 32, "code": "(partial mapcat\n         (partial repeat 2))", "user": "521d064fe4b0c4ef0be830a8"}, {"problem": 32, "code": "(fn [coll] (mapcat #(vec [% %]) coll))", "user": "54e3bd3fe4b024c67c0cf7e0"}, {"problem": 32, "code": "(fn duplicate [xs]\n  (if (empty? xs)\n    xs\n    (conj (duplicate (rest xs)) (first xs) (first xs))))", "user": "54fd93bbe4b07d26eda61d36"}, {"problem": 32, "code": "(fn [coll]\n  (reverse\n   (reduce #(cons %2 (cons %2 %1)) '() coll)))", "user": "54f9d900e4b01ecee9d88844"}, {"problem": 32, "code": "reduce #(conj (conj %1 %2) %2) []", "user": "54e7b512e4b024c67c0cf81c"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "54ff2342e4b07d26eda61d49"}, {"problem": 32, "code": "#(sort (concat % %))", "user": "54bcab07e4b0ed20f4ff6ed5"}, {"problem": 32, "code": "(fn [s] (reduce #(concat %1 (repeat 2 %2)) [] s))", "user": "54febf4be4b07d26eda61d45"}, {"problem": 32, "code": "reduce #( concat %1 ( list %2 %2) ) '()", "user": "54fc7d89e4b07d26eda61d2b"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "53ef235de4b0d648e757f4d4"}, {"problem": 32, "code": "(fn [coll] (mapcat #(conj (conj '() %) %) coll))", "user": "5382b433e4b06839e8705ed7"}, {"problem": 32, "code": "(fn f1 [s]\n\t\t\t(reduce #(conj %1 %2 %2) [] s))", "user": "54ff6084e4b07d26eda61d50"}, {"problem": 32, "code": "(fn [l] (mapcat (fn [n] (repeat 2 n)) l))", "user": "550111d3e4b07d26eda61d6f"}, {"problem": 32, "code": "(fn [s]\n  (loop [rem s\n         acc '()]\n    (if (empty? rem)\n      acc\n      (let [el (first rem)]\n        (recur (rest rem) (concat acc (list el el)))))))", "user": "5498e155e4b0b312c081ff86"}, {"problem": 32, "code": "(fn [coll] (reverse (reduce #(conj (conj %1 %2) %2) '() coll)))", "user": "54eea988e4b024c67c0cf875"}, {"problem": 32, "code": "(fn [s] (reduce (fn [x y] (concat x [y y])) [] s))", "user": "54f97e22e4b01ecee9d8883a"}, {"problem": 32, "code": "(fn dup [x]\n  ((fn a [x li]\n    (if (empty? x)\n      li\n      (a (butlast x) (conj (conj li (last x))(last x))\n    )))\n    x '())\n)", "user": "55034bf0e4b086ebe8a79c6d"}, {"problem": 32, "code": "(fn [s] (reduce concat (map #(take 2 (repeat %)) s)))", "user": "54edc818e4b024c67c0cf865"}, {"problem": 32, "code": "mapcat #(seq [% %])", "user": "520a796be4b01da9d47a99dc"}, {"problem": 32, "code": "#(interleave % %)", "user": "541c5b3be4b01498b1a71a75"}, {"problem": 32, "code": "(fn [x] (interleave x x))", "user": "54ff074de4b07d26eda61d47"}, {"problem": 32, "code": "(fn [coll]\n  (loop [coll coll\n         res []]\n    (if (empty? coll)\n      res\n      (recur (rest coll) (conj (conj res (first coll)) (first coll))))))", "user": "54b31445e4b09f271ff37d35"}, {"problem": 32, "code": "(fn me [val]\n  (if-not (seq val)\n    '()\n    (cons (first val) (cons (first val) (me (rest val))))))", "user": "54eff2bee4b024c67c0cf88d"}, {"problem": 32, "code": "(fn [coll] (reduce (fn [l x] (concat l [x x])) [] coll))", "user": "54d1b6ffe4b0e8a36923e5e6"}, {"problem": 32, "code": "#(interleave % %)", "user": "550174b5e4b07d26eda61d73"}, {"problem": 32, "code": "#(sort (concat % %))", "user": "54f6f00fe4b01ecee9d88814"}, {"problem": 32, "code": "(fn [x] (reduce #(conj %1 %2 %2) [] x))", "user": "54f773bfe4b01ecee9d8881f"}, {"problem": 32, "code": "(fn [xs]\n  (reduce #(conj %1 %2 %2) [] xs))", "user": "51b9f5a6e4b0e871ca49590e"}, {"problem": 32, "code": "(fn [xs]\n  (loop [rxs xs result []]\n    (if (empty? rxs)\n      result\n      (recur (rest rxs) (conj result (first rxs) (first rxs))))))", "user": "550212c0e4b07d26eda61d80"}, {"problem": 32, "code": "(fn [s] (reduce concat (map #(list % %) s)))", "user": "5457e502e4b01be26fd74612"}, {"problem": 32, "code": "(fn [col]\n    ((fn _duplicate [col ret]\n      (if (empty? col) ret\n      (let [nret (into (list (first col) (first col)) (reverse ret))]\n        (_duplicate (rest col) nret)\n      )\n      )\n      ) col '())\n    )", "user": "54ec7f52e4b024c67c0cf853"}, {"problem": 32, "code": "(fn [coll] (reduce #(conj %1 %2 %2) [] coll))", "user": "54f35732e4b050824f58f5c0"}, {"problem": 32, "code": "#(reverse (reduce (fn [t v] (conj t v v)) '() %))", "user": "54e24a05e4b024c67c0cf7ce"}, {"problem": 32, "code": "(fn [s] (reduce #(conj %1 %2 %2) [] s))", "user": "4fa5c8dde4b081705acca1af"}, {"problem": 32, "code": "(fn [a]\n  (loop [i 0 b []]\n    (if (< i (count a))\n      (recur (inc i) (conj b (a i) (a i)))\n      b)))", "user": "55058a4fe4b086ebe8a79c89"}, {"problem": 32, "code": "mapcat (partial repeat 2)", "user": "54f904c2e4b01ecee9d88832"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "550609b3e4b021ccfedb9695"}, {"problem": 32, "code": "(fn st [x]\n  (if (empty? (rest x))\n    (list (first x) (first x))\n    (conj (st (rest x)) (first x) (first x))))", "user": "543be8f0e4b032a45b869337"}, {"problem": 32, "code": "(fn [s] (reduce #(conj (conj %1 %2) %2) [] s))", "user": "54e84d1ee4b024c67c0cf822"}, {"problem": 32, "code": "(fn [s] (reduce concat (map #(list % %) s)))", "user": "53213810e4b09d4e7a9b54b0"}, {"problem": 32, "code": "(fn [coll] (mapcat #(concat (repeat 2 %)) coll))", "user": "55088bb3e4b06e50f9beb10c"}, {"problem": 32, "code": "(fn [coll]\n  (reduce (fn [new-coll element]\n            (concat new-coll (repeat 2 element)))\n          []\n          coll))", "user": "54ab1b5ae4b09f271ff37cc2"}, {"problem": 32, "code": "#(interleave % %)", "user": "5504dd64e4b086ebe8a79c83"}, {"problem": 32, "code": "(fn [x] (apply concat (for [el x] [el el])))", "user": "54a96a15e4b09f271ff37cad"}, {"problem": 32, "code": "(partial reduce #(conj %1 %2 %2) [])", "user": "550615c0e4b021ccfedb9696"}, {"problem": 32, "code": "#(sort (apply merge % %))", "user": "54f15cb8e4b024c67c0cf8b1"}, {"problem": 32, "code": ";(fn [s] (apply concat (map (fn [x] [x x]) s))) \n\n(fn [s] (->> s\n             (map (fn [x] [x x]))\n             (apply concat)))", "user": "55096255e4b06e50f9beb116"}, {"problem": 32, "code": "(fn dupe [inseq] \n    (reduce #(concat %1 [%2] [%2]) [] inseq))", "user": "54f09599e4b024c67c0cf89d"}, {"problem": 32, "code": "mapcat (fn [x] [x x])", "user": "550aeddae4b06e50f9beb135"}, {"problem": 32, "code": "#(reduce concat (for [x %] [x x]))", "user": "5501de12e4b07d26eda61d7b"}, {"problem": 32, "code": "(fn [myseq] (reduce concat (map #(list % %) myseq)))", "user": "55076bf6e4b021ccfedb96a6"}, {"problem": 32, "code": "#(interleave % %)", "user": "540a4f20e4b0addc1aec66ef"}, {"problem": 32, "code": "(fn [x] (interleave x x))", "user": "5426200ae4b01498b1a71b16"}, {"problem": 32, "code": "#(mapcat (fn [x] (list x x)) %)", "user": "5505ceb3e4b086ebe8a79c8b"}, {"problem": 32, "code": "#(reverse (reduce (fn [x y] (conj x y y)) '() %))", "user": "550ccedfe4b06e50f9beb158"}, {"problem": 32, "code": "#(interleave % %)", "user": "550e0373e4b06e50f9beb162"}, {"problem": 32, "code": "mapcat #(vector % %)", "user": "550d4906e4b06e50f9beb15b"}, {"problem": 32, "code": "(fn [s]\n            (interleave s s))", "user": "54c3747de4b045293a27f60e"}, {"problem": 32, "code": "(fn number32 [xs]\n  (mapcat identity  (map #(list % %) xs)))", "user": "54074fc5e4b0addc1aec66b6"}, {"problem": 32, "code": "#(reverse (reduce (fn [newseq item] (conj (conj newseq item) item)) '() %))", "user": "54fa60dfe4b0cf870d934704"}, {"problem": 32, "code": "#(mapcat (fn [s] (repeat 2 s)) %)", "user": "550c55d0e4b06e50f9beb14d"}, {"problem": 32, "code": "#(mapcat (partial repeat 2) %)", "user": "550fdc1de4b06e50f9beb17d"}, {"problem": 32, "code": "(fn [args]\n   (reduce (fn [x y] (println x) (if (nil? x)\n                                   (concat [] [y y])\n                                   (concat x [y y]))) nil args))", "user": "5508102ee4b021ccfedb96b0"}, {"problem": 32, "code": "#(interleave % %)", "user": "55101237e4b06e50f9beb181"}, {"problem": 32, "code": "#(interleave % %)", "user": "54d127b7e4b0e8a36923e5de"}, {"problem": 32, "code": "reduce #(concat %1 [%2 %2] ) []", "user": "54cbd97ae4b057c6fda3a283"}, {"problem": 32, "code": "(fn [x] (apply concat (map (partial repeat 2) x)))", "user": "54a01870e4b0f3d1d8e70fb4"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5426fb8fe4b01498b1a71b1f"}, {"problem": 32, "code": "(fn [coll]\n  (mapcat #(repeat 2 %) coll))", "user": "550e8e04e4b06e50f9beb167"}, {"problem": 32, "code": "(fn double-seq\n  [s]\n  (if (empty? s)\n    ()\n    (let [sh (first s)]      \n      (cons sh (cons sh (double-seq (rest s)))))))", "user": "550ff2a3e4b06e50f9beb17f"}, {"problem": 32, "code": "(fn [x] (interleave x x))", "user": "54f5746de4b0f2f3c5226e92"}, {"problem": 32, "code": "#(apply concat  (map (fn [num] (repeat 2 num)) %))", "user": "54ccf9d5e4b057c6fda3a295"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "54e0bb4fe4b024c67c0cf7b8"}, {"problem": 32, "code": "mapcat (fn [x] (repeat 2 x))", "user": "5510f734e4b06e50f9beb18f"}, {"problem": 32, "code": "(fn [coll] (interleave coll coll))", "user": "54bca097e4b0ed20f4ff6ed4"}, {"problem": 32, "code": "(fn [x] (mapcat #(list %1 %1) x))", "user": "5512b15ae4b055c2f668d4b5"}, {"problem": 32, "code": "reduce (fn [coll item]\n         (concat coll [item item])) []", "user": "542725fce4b01498b1a71b22"}, {"problem": 32, "code": "#(interleave %1 %1)", "user": "549674cde4b0b312c081ff66"}, {"problem": 32, "code": "(fn duplicate-a-sequence-solution\n  [coll] ;; update args as needed\n  (mapcat #(vector % %) coll))", "user": "50c113bee4b096f585049c37"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "5511fd7ee4b06e50f9beb19e"}, {"problem": 32, "code": "(fn [a] (apply concat (map #(list % %) a)))", "user": "532018efe4b08068f379edcd"}, {"problem": 32, "code": "reduce #(conj (conj %1 %2) %2) []", "user": "5510aa92e4b06e50f9beb188"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "55164856e4b06a49daca83b3"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5515b138e4b055c2f668d4ed"}, {"problem": 32, "code": "(fn [s] (reduce (fn [prev el] (conj prev el el)) '[] s))", "user": "5514a60fe4b055c2f668d4d7"}, {"problem": 32, "code": "(fn [args] (reduce #(conj %1 %2 %2) [] args))", "user": "551535cee4b055c2f668d4df"}, {"problem": 32, "code": "#(reduce (fn [a x] (conj (conj a x) x) ) '() (reverse  %) )", "user": "55158345e4b055c2f668d4e8"}, {"problem": 32, "code": "#(sort (apply conj %1 %1))", "user": "50f02de7e4b0bdaecbb47db0"}, {"problem": 32, "code": "#(reduce concat (map (partial repeat 2) %1))", "user": "55154abce4b055c2f668d4e0"}, {"problem": 32, "code": "#(interleave % %)", "user": "51227e00e4b068a9582e656c"}, {"problem": 32, "code": "(fn [coll]\n  (loop [result []\n         coll coll]\n    (if (empty? coll)\n      result\n      (recur (conj (conj result (first coll)) (first coll)) (rest coll)))))", "user": "54f03f8ce4b024c67c0cf891"}, {"problem": 32, "code": "(fn [x] (mapcat #(identity %) (for [e x] `(~e ~e))))", "user": "5515649fe4b055c2f668d4e3"}, {"problem": 32, "code": "(fn [seq]\n  (let [duplicator (fn [coll n]\n                     (loop [c coll n n]\n                       (if (= n 0)\n                         c\n                         (recur (conj c (first c)) (dec n)))))]\n    (loop [s seq i 0 r ()]\n      (if (empty? s)\n        (reverse (duplicator r i))\n        (if (= i 0)\n          (recur (rest s) (inc i) (conj r (first s)))\n          (if (= (first r) (first s))\n            (recur (rest s) (inc i) (conj r (first s)))\n            (recur (rest s) 1 (conj (duplicator r i) (first s)))))))))", "user": "55151417e4b055c2f668d4da"}, {"problem": 32, "code": "(fn dup3 [coll]\n  (interleave coll coll))", "user": "50c6052ce4b0c9dc10d15c56"}, {"problem": 32, "code": "(fn [xs]\n  (->> xs\n\t  (map (fn [x] [x x]))\n      (reduce concat)))", "user": "51bb08a4e4b0fe3ecfb46446"}, {"problem": 32, "code": "#(interleave % %)", "user": "5507cfd3e4b021ccfedb96ad"}, {"problem": 32, "code": "#(reduce (fn [x y] (conj x y y)) [] %)", "user": "551a64cde4b091ff45eda996"}, {"problem": 32, "code": "(fn duplicate-nums [coll]\n (interleave coll coll))", "user": "55171140e4b06a49daca83be"}, {"problem": 32, "code": "(fn [coll]\n  (mapcat #(repeat 2 %)\n          coll))", "user": "54d9f7f1e4b024c67c0cf751"}, {"problem": 32, "code": "mapcat #(take 2 (repeat %))", "user": "514f0a28e4b019235f6c059a"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "55170dd9e4b06a49daca83bd"}, {"problem": 32, "code": "#(interleave % %)", "user": "533c2605e4b0e30313ee6cd7"}, {"problem": 32, "code": "(fn [l] (mapcat #(list %1 %1) l))", "user": "54857657e4b0e286459a11ac"}, {"problem": 32, "code": "reduce #(conj % %2 %2) []", "user": "55092319e4b06e50f9beb113"}, {"problem": 32, "code": "#(interleave % %)", "user": "52f49268e4b05e3f0be25f22"}, {"problem": 32, "code": "(fn [seqn] (reduce (fn [s, i] (conj s i i)) [] seqn))", "user": "5519c157e4b00ace28fe6e32"}, {"problem": 32, "code": "#(mapcat (fn [x] (repeat 2 x)) %1)", "user": "5509a176e4b06e50f9beb119"}, {"problem": 32, "code": "(fn [xs]\n    (mapcat #(list % %) xs))", "user": "5519a6dde4b00ace28fe6e2f"}, {"problem": 32, "code": "#(reduce (fn [a b] (conj a b b)) [] %)", "user": "5510d948e4b06e50f9beb18d"}, {"problem": 32, "code": "(fn dupp [l]\n  (if (empty? l)\n    '()\n    (let [f (first l)]\n      (cons f (cons f (dupp (rest l)))))))", "user": "551c6bcee4b07993ea3788df"}, {"problem": 32, "code": "(fn [x] \n  (interleave x x))", "user": "5492164ee4b0b312c081ff3e"}, {"problem": 32, "code": "(fn\n   [xs]\n   (loop [xs xs acc []]\n     (if (empty? xs)\n       acc\n       (recur (rest xs) (conj acc (first xs) (first xs))))))", "user": "551a21ece4b091ff45eda993"}, {"problem": 32, "code": "(fn foo\n     [coll] (if (empty? coll) () (let [head (first coll)] (conj (foo (rest coll)) head head))))", "user": "5509bec5e4b06e50f9beb121"}, {"problem": 32, "code": "(fn [vals]\n  (loop [remaining vals\n         duped []]\n    (if (empty? remaining)\n      duped\n      (recur (rest remaining) (conj duped (first remaining) (first remaining))))))", "user": "55183a11e4b06a49daca83ca"}, {"problem": 32, "code": "reduce #(conj % %2 %2) []", "user": "54126d0ce4b01498b1a719d5"}, {"problem": 32, "code": "#(loop [r %,\n        acc []]\n   (if (empty? r)\n     acc\n     (let [e (first r)]\n       (recur (rest r)\n              (conj (conj acc e) e)))))", "user": "551ed214e4b08d5046aa8a4d"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "4e443201535dc968683fc4a7"}, {"problem": 32, "code": "#(reduce (fn [m x] (concat m (list x x))) '() %)", "user": "551589cee4b055c2f668d4e9"}, {"problem": 32, "code": "(fn dup\n  [l]\n  (loop [l l out [] dupe true]\n    (cond (empty? l) out\n          dupe (recur l (conj out (first l)) false)\n         :else (recur (rest l) (conj out (first l)) true))))", "user": "551afdf8e4b07993ea3788cb"}, {"problem": 32, "code": "(fn dup [xs]\n  (mapcat (fn[x] [x x]) xs))", "user": "4dd76bf9535d2dad7130b5d1"}, {"problem": 32, "code": "(fn [x] (reverse (reduce #(conj %1 %2 %2) '() x)))", "user": "5517f5c5e4b06a49daca83c7"}, {"problem": 32, "code": "(fn [x]\n  (reverse(loop [i 0 s '()] \n    (if-not (< i (count x)) s \n      (recur (+ i 1) (conj (conj s (nth x i)) (nth x i)) ) )\n) ) )", "user": "514504c2e4b021a5ff8301fc"}, {"problem": 32, "code": "(fn [a] (reduce concat (map vector a a)))", "user": "550b5c10e4b06e50f9beb143"}, {"problem": 32, "code": "(fn [xs] (sort (concat xs xs)))", "user": "5515f96ce4b055c2f668d4f7"}, {"problem": 32, "code": "(fn dup-seq\n  ([x] (dup-seq x '()))\n  ([x y]\n   (if-not (nil? x)\n     (dup-seq (next x) (conj y (first x) (first x)))\n     (reverse y))))", "user": "551c594de4b07993ea3788dc"}, {"problem": 32, "code": "#(interleave % %)", "user": "551ecb76e4b08d5046aa8a4c"}, {"problem": 32, "code": "(fn [l] (reduce #(conj %1 %2 %2) [] l))", "user": "5520af03e4b08d5046aa8a64"}, {"problem": 32, "code": "(fn dup[[fst & rst]]\n\t(if (empty? rst)\n\t  (list fst fst)\n\t  (concat (list fst fst) (dup rst)  )))", "user": "54fae43ae4b0cf870d934708"}, {"problem": 32, "code": "(fn duplicate [col] (if (= col nil) [] (concat [(first col) (first col)] (duplicate (next col)))))", "user": "55204412e4b08d5046aa8a5f"}, {"problem": 32, "code": "reduce #(conj % %2 %2) []", "user": "52b36925e4b0c58976d9ad0b"}, {"problem": 32, "code": "(fn foo [x] (if (empty? x)\n                []\n                (cons (first x) (cons (first x) (foo (rest x))))\n              ))", "user": "5520974be4b08d5046aa8a63"}, {"problem": 32, "code": "(fn mrg\n  ([in] (mrg in ()))\n  ([in out] \n    (if (empty? in) \n      (reverse out) \n      (mrg (rest in) (cons (first in) (cons (first in) out)))\n    )\n  )\n)", "user": "550e52dbe4b06e50f9beb165"}, {"problem": 32, "code": "#(apply concat (for [x %] [x x]))", "user": "512e31e9e4b0b740abc59823"}, {"problem": 32, "code": "#(interleave % %)", "user": "55205564e4b08d5046aa8a60"}, {"problem": 32, "code": "mapcat #(vector % %)", "user": "551c66dae4b07993ea3788de"}, {"problem": 32, "code": "mapcat (partial repeat 2)", "user": "55201d18e4b08d5046aa8a5d"}, {"problem": 32, "code": "(fn [s]\n  (loop [x s y '()]\n    (if (empty? x)\n      (reverse y)\n      (recur (rest x) (cons (first x) (cons (first x) y))))))", "user": "551b8e2ae4b07993ea3788d3"}, {"problem": 32, "code": "(fn [coll] (mapcat #(repeat 2 %) coll))", "user": "552356fae4b0882d96d091af"}, {"problem": 32, "code": "(fn dup [lst] (reverse (reduce (fn [o n] (conj o n n)) '() lst)))", "user": "551d5cb9e4b07993ea3788e9"}, {"problem": 32, "code": "#(interleave % %)", "user": "4db2eac3535df7e46ed9b6c8"}, {"problem": 32, "code": "(fn [xs]\n  (reduce (fn [x y] (conj x y y)) [] xs))", "user": "551ee974e4b08d5046aa8a50"}, {"problem": 32, "code": "#(interleave % %)", "user": "5522cd9ae4b0882d96d091ab"}, {"problem": 32, "code": "(fn duplicate32\n    [l]\n    (if (= (count l) 1)\n      (list (first l) (first l))\n      (lazy-cat (list (first l)) (list (first l)) (duplicate32 (rest l)))))", "user": "4f9e0000e4b0dcca54ed6d2a"}, {"problem": 32, "code": "#(interleave % %)", "user": "54db3d82e4b024c67c0cf75f"}, {"problem": 32, "code": "(fn\n\t[args]\n\t(reduce\n\t\t(fn\n\t\t\t[l x]\n\t\t\t(conj l x x)\n\t\t\t)\n\t\t'()\n\t\t(reverse args)\n\t\t)\n)", "user": "550b5a53e4b06e50f9beb142"}, {"problem": 32, "code": "#(interleave % %)", "user": "54f9c4dfe4b01ecee9d88841"}, {"problem": 32, "code": "mapcat #(vector % %)", "user": "53bed4b5e4b0c98a41f5cc94"}, {"problem": 32, "code": "(fn duplicate[coll]\n     (apply concat (map #(repeat 2 %) coll))\n     )", "user": "55240916e4b0882d96d091b6"}, {"problem": 32, "code": "(fn dupes [[x & args]] (if (empty? args) (list x x) (cons x (cons x (dupes args)))))", "user": "52d74c2de4b09f7907dd1373"}, {"problem": 32, "code": "(fn [s] (apply concat (map #(list % %) s)))", "user": "55253217e4b0882d96d091ce"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "5522a795e4b0882d96d091a7"}, {"problem": 32, "code": "#(reduce into[] (map list % %))", "user": "5515b68de4b055c2f668d4ef"}, {"problem": 32, "code": "#(interleave % %)", "user": "552621d0e4b0ffed3738f914"}, {"problem": 32, "code": "(fn [coll] (reverse (reduce #(conj %1 %2 %2) '() coll)))", "user": "55218bf0e4b0882d96d09196"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "551dfd81e4b030e6a24d00e0"}, {"problem": 32, "code": "(fn [x]\n  (loop [v x\n         r '()]\n    (if (empty? v)\n      (reverse r)\n      (recur (rest v) (cons (first v) (cons (first v) r)))\n    )\n  )\n)", "user": "55252392e4b0882d96d091cc"}, {"problem": 32, "code": "#(interleave % %)", "user": "551ee4dde4b08d5046aa8a4f"}, {"problem": 32, "code": "(fn [col]\n    (mapcat identity (map #(concat % %) (partition 1 col)))\n)", "user": "5524f21fe4b0882d96d091c7"}, {"problem": 32, "code": "#(interleave % %)", "user": "552456e3e4b0882d96d091c2"}, {"problem": 32, "code": "(fn [coll] (reduce #(conj %1 %2 %2) [] coll))", "user": "54e4edcae4b024c67c0cf7f3"}, {"problem": 32, "code": "(fn f [a] (interleave a a))", "user": "55280930e4b0ffed3738f93b"}, {"problem": 32, "code": "(fn [s] (mapcat #(seq [% %]) s))", "user": "54fd5e2de4b07d26eda61d33"}, {"problem": 32, "code": "(fn [x] (sort (concat x x)))", "user": "528b3f5ae4b0239c8a67ae93"}, {"problem": 32, "code": "(fn dup-map [s]\n  (let [x (first s)]\n    (if (nil? x)\n      '()\n      (concat [x x] (dup-map (rest s))))))", "user": "551747e0e4b06a49daca83c1"}, {"problem": 32, "code": "#(mapcat (fn [s] [s s]) %)", "user": "5484fab9e4b0e286459a11a6"}, {"problem": 32, "code": "mapcat (fn [x] (list x x))", "user": "551ebcd7e4b08d5046aa8a4a"}, {"problem": 32, "code": "mapcat (partial repeat 2)", "user": "505106fee4b05ab4c7e07d38"}, {"problem": 32, "code": "(fn [coll] (reverse (reduce #(conj %1 %2 %2) '() coll)))", "user": "50310713e4b05b7df5a0b84c"}, {"problem": 32, "code": "(fn [l] (reduce concat (map #(list % %) l)))", "user": "55274467e4b0ffed3738f92b"}, {"problem": 32, "code": "#(reduce into (map (fn [a] [a a] ) % ))", "user": "5517331ae4b06a49daca83c0"}, {"problem": 32, "code": "(fn [xs]\n (mapcat #(repeat 2 %1) xs))", "user": "55295b5de4b0ffed3738f949"}, {"problem": 32, "code": "(fn dup [x] (when (not (empty? x)) (conj (dup (rest x)) (first x) (first x))))", "user": "55249f64e4b0882d96d091c6"}, {"problem": 32, "code": "#(reduce (fn [xs x] (conj (conj xs x) x)) [] %)", "user": "552a672de4b0ffed3738f954"}, {"problem": 32, "code": "#(interleave % %)", "user": "4fc57c4ce4b0ee37620e17f6"}, {"problem": 32, "code": "mapcat (fn [n] [n n])", "user": "55249337e4b0882d96d091c3"}, {"problem": 32, "code": "(fn [coll] (interleave coll coll))", "user": "552689cfe4b0ffed3738f91e"}, {"problem": 32, "code": "(fn [coll] (reverse(reduce #(cons %2 (cons %2 %1)) '() coll)))", "user": "5526383ee4b0ffed3738f917"}, {"problem": 32, "code": "#(interleave % %)", "user": "55253799e4b0882d96d091cf"}, {"problem": 32, "code": "(fn [l] (mapcat #(repeat 2 %) l))", "user": "552bbf5ae4b0ffed3738f967"}, {"problem": 32, "code": "; first-attempt:\n;(fn cope [coll] \n;  (if (empty? coll) \n;    [] \n;    (cons (first coll) (cons (first coll) (cope (rest coll))))))\n\n#(interleave % %)", "user": "550d9452e4b06e50f9beb15d"}, {"problem": 32, "code": "#(interleave % %)", "user": "55041b5ee4b086ebe8a79c78"}, {"problem": 32, "code": "(fn [coll] (reduce #(conj %1 %2 %2) [] coll))", "user": "4df247b8535d08e6dec9fe25"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "55297a7ae4b0ffed3738f94b"}, {"problem": 32, "code": "#(interleave % %)", "user": "552d9013e4b076ab5578f7ea"}, {"problem": 32, "code": "(fn [xs] (apply concat (map (fn [x] [x x]) xs)))", "user": "5524120fe4b0882d96d091b7"}, {"problem": 32, "code": "#(apply concat (for [x %] (repeat 2 x)))", "user": "552bc0f5e4b0ffed3738f968"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "552e1c98e4b076ab5578f7ee"}, {"problem": 32, "code": "(fn [y] (mapcat (fn [x] (repeat 2 x)) y))", "user": "5509b434e4b06e50f9beb11e"}, {"problem": 32, "code": "(fn [listy]\n  (reduce concat (map #(take 2 (repeat %)) listy)))", "user": "5380a27ae4b06839e8705ec4"}, {"problem": 32, "code": "(fn [x] (interleave x x))", "user": "51a7fe50e4b08d8ec191b803"}, {"problem": 32, "code": "#(reverse (reduce into '() (map (fn [x] (list x x)) %)))", "user": "5530b827e4b076ab5578f818"}, {"problem": 32, "code": "#(interleave % %)", "user": "5531e445e4b09218d5f44f76"}, {"problem": 32, "code": "(fn [s] (mapcat #(vec [% %]) s))", "user": "548d6b75e4b0e286459a1216"}, {"problem": 32, "code": "#(reduce (fn [list item] (conj list item item)) [] %)", "user": "553024c3e4b076ab5578f80d"}, {"problem": 32, "code": "#(for [x % y [1 2]] x)", "user": "552ed75ae4b076ab5578f7f9"}, {"problem": 32, "code": "(partial mapcat (partial repeat 2))", "user": "534da51fe4b084c2834f4aa4"}, {"problem": 32, "code": "#(sort (concat % %))", "user": "552694e7e4b0ffed3738f920"}, {"problem": 32, "code": "(fn [x]  \n   (mapcat #(repeat 2 %) x))", "user": "552bab7fe4b0ffed3738f966"}, {"problem": 32, "code": "#(apply concat (map vector % %))", "user": "4faf97d8e4b081705acca258"}, {"problem": 32, "code": "(fn [a] (reduce #(conj %1 %2 %2) [] a))", "user": "532f8569e4b019098a6f8b4f"}, {"problem": 32, "code": "#(interleave % %)", "user": "54c46381e4b045293a27f61a"}, {"problem": 32, "code": "#(reduce (fn [a b] (conj a b b)) '() (reverse %))", "user": "55330d7fe4b09218d5f44f88"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "55349c67e4b09218d5f44fa0"}, {"problem": 32, "code": "(fn [xs]\n  (reduce (fn [rs y] (concat rs [y y])) '() xs))", "user": "55316b8ae4b076ab5578f825"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5535e9b8e4b09218d5f44fb3"}, {"problem": 32, "code": "reduce (fn [c e] (conj c e e)) []", "user": "553698fae4b09218d5f44fc0"}, {"problem": 32, "code": "(fn [x] (reduce concat (map #(repeat 2 %) x)))", "user": "54f86b8ce4b01ecee9d88828"}, {"problem": 32, "code": "#(mapcat \n  (fn [x] (concat (identity x) (identity x))) \n  \t(partition-by identity %))", "user": "5448616be4b032a45b8693c9"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5536c324e4b09218d5f44fc1"}, {"problem": 32, "code": "(fn dup\n  ([lst] (reverse (dup lst ())))\n  \n   ([lst reslst]\n   (if (empty? lst)\n     reslst\n     ( dup (rest lst) (cons (first lst) (cons (first lst) reslst)) )\n     )\n   )\n )", "user": "550fd845e4b06e50f9beb17c"}, {"problem": 32, "code": "; (fn dup [xs] (if (seq xs) (let [f (first xs)] (cons f (cons f (dup (rest xs))))) xs))\n(fn [xs] (mapcat #(repeat 2 %) xs))", "user": "52ea764ee4b09f7907dd14be"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5537de22e4b09218d5f44fd5"}, {"problem": 32, "code": "#(mapcat (fn [s] (repeat 2 s)) % )", "user": "5141a8f2e4b02fd87f5064c1"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "55377460e4b09218d5f44fc9"}, {"problem": 32, "code": "(fn [l] (reduce concat (map #(take 2 (repeat %)) l)))", "user": "55382517e4b09218d5f44fdc"}, {"problem": 32, "code": "#(interleave % %)", "user": "553706d1e4b09218d5f44fc7"}, {"problem": 32, "code": "#(mapcat (partial replicate 2) %)", "user": "553a35bfe4b09218d5f44ff0"}, {"problem": 32, "code": "(fn [mylist]\n  (reduce (fn [a b] (conj a b b)) '[] mylist))", "user": "553a74ede4b09218d5f44ff7"}, {"problem": 32, "code": "(fn [s]\n  (apply concat (map #(identity [%1 %1]) s)))", "user": "5535d34be4b09218d5f44fb0"}, {"problem": 32, "code": "(fn [xs]\n  (loop [res '() x xs]\n    (if (empty? x)\n      res\n      (recur (concat res [(first x) (first x)]) (next x)))))", "user": "553b87abe4b09218d5f45003"}, {"problem": 32, "code": "(fn dupe [col]\n  (if (empty? col)\n    col\n    (cons (first col) (cons (first col) (dupe (rest col))))))", "user": "553abb28e4b09218d5f44ffb"}, {"problem": 32, "code": "reduce #(concat %1 [%2 %2]) []", "user": "553b8fdbe4b09218d5f45004"}, {"problem": 32, "code": "#(reduce (fn [a b] (concat a [b b])) (concat [[(first %) (first %)]] (rest %)))", "user": "553c05b7e4b09218d5f45011"}, {"problem": 32, "code": "#(interleave % %)", "user": "553a43cae4b09218d5f44ff2"}, {"problem": 32, "code": "(fn [ns] (apply concat (map #(list % %) ns)))", "user": "553dd883e4b0a04f792994e6"}, {"problem": 32, "code": "#(interleave % %)", "user": "553e0b70e4b0a04f792994e8"}, {"problem": 32, "code": "(fn [s] (interleave s s))", "user": "520d3129e4b0b022ef140ca5"}, {"problem": 32, "code": "(fn [sq] \n  (loop [hed  sq rv '()]\n    (if (empty? hed)\n      rv\n      (recur (drop-last hed) (conj (conj rv (last hed)) (last hed)) ))))", "user": "55022275e4b07d26eda61d81"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "553900d4e4b09218d5f44fe5"}, {"problem": 32, "code": "(fn [coll]\n  (loop [result [] x coll]\n    (if (empty? x)\n      (seq result)\n      (recur (conj (conj result (first x)) (first x)) (rest x)))))", "user": "54dbe183e4b024c67c0cf778"}, {"problem": 32, "code": "#(apply concat (for [x %] [x x]))", "user": "54e540c1e4b024c67c0cf7f9"}, {"problem": 32, "code": "#(interleave % %)", "user": "553c4614e4b09218d5f45014"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "553478dce4b09218d5f44f9d"}, {"problem": 32, "code": "reduce (fn [c v] (concat c (list v v)) ) '()", "user": "54c779bee4b045293a27f63b"}, {"problem": 32, "code": "#(interleave % %)", "user": "5540cc0ce4b0a04f79299505"}, {"problem": 32, "code": "(fn [li](apply concat (for [x li] (list x x))))", "user": "553fe819e4b0a04f792994fc"}, {"problem": 32, "code": "#(mapcat (fn [x] (list x x)) %)", "user": "55337e61e4b09218d5f44f8e"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "53737e6ce4b06d7f452d9e13"}, {"problem": 32, "code": "#(reduce (fn [xs x] (conj (conj xs x) x)) [] %)", "user": "55381162e4b09218d5f44fda"}, {"problem": 32, "code": "#(interleave % %)", "user": "54ca9311e4b057c6fda3a263"}, {"problem": 32, "code": "#(interleave % %)", "user": "5313d68de4b08068f379ed0f"}, {"problem": 32, "code": "(fn f [s] (if \n\t\t\t(empty? (rest s))\n\t\t\t(concat s s)\n\t\t\t(concat (list (first s) (first s)) (f (rest s)))\n\t\t)\n)", "user": "553b90c8e4b09218d5f45005"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "54c944b1e4b045293a27f666"}, {"problem": 32, "code": "#(sort (take (* 2 (count %)) (cycle %)))", "user": "54eee38ce4b024c67c0cf878"}, {"problem": 32, "code": "#(reduce concat (map (fn [x] list (list x x)) %))", "user": "553bc237e4b09218d5f4500a"}, {"problem": 32, "code": "(fn d [x & [dd]]\n  (if (empty? x)\n    (reverse dd)\n    (d (rest x) (conj dd (first x) (first x)))))", "user": "5540fe42e4b0a04f7929950a"}, {"problem": 32, "code": "(fn [coll]\n  (mapcat (fn [v] (list v v)) coll))", "user": "55074092e4b021ccfedb96a4"}, {"problem": 32, "code": "; problem with this problem?  test 3 == test 4 ?\n\n(fn [coll] (mapcat #(for [x [1 2]] %) coll))", "user": "5535e822e4b09218d5f44fb2"}, {"problem": 32, "code": "(fn [s] (mapcat (fn [el] [el el]) s))", "user": "5545eebee4b0a04f79299539"}, {"problem": 32, "code": "mapcat #(-> [% %])", "user": "550f1c99e4b06e50f9beb171"}, {"problem": 32, "code": "(fn [seq] (loop [head (first seq) tail (rest seq) new-seq []]\n            (if (nil? head)\n              new-seq\n              (recur (first tail) (rest tail) (conj (conj new-seq head) head)))))", "user": "55457b73e4b0a04f79299536"}, {"problem": 32, "code": "mapcat (partial repeat 2)", "user": "52e851bfe4b09f7907dd149a"}, {"problem": 32, "code": "(fn [x] (reduce into (map #(vec [% %]) x)))", "user": "5546704be4b0a04f7929953d"}, {"problem": 32, "code": "(fn [coll] \n  (reduce \n   (fn [a b] (conj a b b)) [] coll))", "user": "54980edae4b0b312c081ff79"}, {"problem": 32, "code": "(fn [coll]\n  (mapcat #(repeat 2 %) coll))", "user": "5540f5dee4b0a04f79299509"}, {"problem": 32, "code": "(fn [s] (reduce #(concat %1 (repeat 2 %2)) () s))", "user": "54fdaeace4b07d26eda61d39"}, {"problem": 32, "code": "#(mapcat list % %)", "user": "552a793ee4b0ffed3738f955"}, {"problem": 32, "code": "#(interleave % %)", "user": "5532a04ee4b09218d5f44f82"}, {"problem": 32, "code": "#(reduce concat (map (fn [n] (list n n)) %))", "user": "5326e4efe4b09d4e7a9b54f5"}, {"problem": 32, "code": "#(interleave % %)", "user": "552800d7e4b0ffed3738f93a"}, {"problem": 32, "code": "(fn [x] (reduce #(conj (conj %1 %2) %2) [] x))", "user": "52503747e4b0541d1855b828"}, {"problem": 32, "code": "#(interleave % %)", "user": "553fa883e4b0a04f792994f9"}, {"problem": 32, "code": "#(interleave % %)", "user": "554707bae4b0a04f79299544"}, {"problem": 32, "code": "reduce (fn [a x] (conj a x x)) []", "user": "52b89d55e4b07a9af57922b3"}, {"problem": 32, "code": "(fn [s]\n  (reduce (fn [m e]\n            (conj m e e))\n          []\n          s))", "user": "552d2e4fe4b076ab5578f7e1"}, {"problem": 32, "code": "(fn [s]\n  (apply concat (map (fn [x] [x x]) s)))", "user": "55495318e4b0a04f79299566"}, {"problem": 32, "code": "reduce #(concat %1 [%2 %2]) []", "user": "554680cbe4b0a04f7929953e"}, {"problem": 32, "code": "(fn [x]\n  (sort (concat x x)))", "user": "54b64fbbe4b05787c3b163b8"}, {"problem": 32, "code": "#(interleave % %)", "user": "553b0d95e4b09218d5f44fff"}, {"problem": 32, "code": "mapcat #(vector % %)", "user": "4f577f25e4b0a7574ea71839"}, {"problem": 32, "code": "(fn [s]\n    (reduce (fn [acc x]\n              (concat acc [x x]))\n            '()\n            s))", "user": "5549ff9ae4b0a04f7929956e"}, {"problem": 32, "code": "#(interleave % %)", "user": "5523fce8e4b0882d96d091b4"}, {"problem": 32, "code": "mapcat (fn[v] (list v v))", "user": "4fe9cc68e4b0547ebccb2470"}, {"problem": 32, "code": "(fn dupseq\n\t[arr]\n\t(reduce concat (map (fn [x] [x x]) arr)))", "user": "5545477fe4b0a04f79299531"}, {"problem": 32, "code": "(partial mapcat (fn [x] [x x]))", "user": "551bdefde4b07993ea3788d7"}, {"problem": 32, "code": "(fn [xs] (interleave xs xs))", "user": "4fcf1755e4b03432b189f40c"}, {"problem": 32, "code": "(fn [y x] (if (empty? x) (reverse y) (recur (conj y (first x) (first x)) (rest x)))) '()", "user": "554d01a8e4b0a04f792995b3"}, {"problem": 32, "code": "(fn [seq] (reduce #(concat %1 (repeat 2 %2)) [] seq))", "user": "554dff83e4b00713264bd98d"}, {"problem": 32, "code": "(letfn [(f [acc xs]\n           (if (empty? xs) acc\n             (recur (conj acc (first xs) (first xs)) (rest xs))))]\n  (partial f []))", "user": "554b9c3ee4b0a04f79299594"}, {"problem": 32, "code": "#(apply concat (map (fn [x] (list x x)) %1))", "user": "554d48d3e4b00713264bd988"}, {"problem": 32, "code": "(fn dup-list [ls]\n  (mapcat (fn [it]\n            [it it])\n          ls))", "user": "554bc026e4b0a04f79299597"}, {"problem": 32, "code": "(fn dup\n   ([xs] (dup xs []))\n   ([[x & xs] ret]\n    (if (not x)\n      ret\n      (recur xs (conj ret x x)))))", "user": "554b7056e4b0a04f79299583"}, {"problem": 32, "code": ";(fn [xs] (reduce (fn [res x] (conj res x x)) [] xs))\n\n(fn [xs] (reduce #(conj %1 %2 %2) [] xs))", "user": "55150524e4b055c2f668d4d9"}, {"problem": 32, "code": "(fn [se] (loop [accum (vector)\n                se se]\n           (if (empty? se)\n             accum\n             (let [q (first se)]\n               (recur (conj accum q q) (rest se))))))", "user": "554d386ee4b0a04f792995b8"}, {"problem": 32, "code": "(fn dupel [coll]\n  (if (empty? coll) '() (list* (first coll) (first coll) (dupel (rest coll)))))", "user": "554a270fe4b0a04f79299570"}, {"problem": 32, "code": "#(interleave % %)", "user": "54116e2fe4b01498b1a719c4"}, {"problem": 32, "code": "#(interleave % %)", "user": "54f14aa6e4b024c67c0cf8af"}, {"problem": 32, "code": "(fn make-duplicates\n  [input-list]\n  (loop [remaining-items input-list\n         final-list []]\n    (if (empty? remaining-items)\n      final-list\n      (recur (rest remaining-items) (conj final-list (first remaining-items) (first remaining-items)))\n   \n  )))", "user": "5545f713e4b0a04f7929953a"}, {"problem": 32, "code": "(fn [x]\n      (reduce (fn [r y]\n                (concat r [y y])\n                )\n              \n              \n     [] x ))", "user": "554b2151e4b0a04f79299580"}, {"problem": 32, "code": "(fn twiceEach [x] (mapcat #(repeat 2 %) x))", "user": "5547793be4b0a04f7929954c"}, {"problem": 32, "code": "#((comp sort into) % %)", "user": "53571732e4b04ce2eb3ed275"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "53b0765ae4b047364c044484"}, {"problem": 32, "code": "(fn [x] (interleave x x))", "user": "54fe57f6e4b07d26eda61d42"}, {"problem": 32, "code": "(fn [s] (reduce #(conj %1 %2 %2) [] s))", "user": "554edb85e4b00713264bd99a"}, {"problem": 32, "code": "mapcat #(list % % )", "user": "555093b2e4b00713264bd9ab"}, {"problem": 32, "code": "#(reduce  (fn [reduction current] \n           (concat reduction [current current])) [] %)", "user": "5486e317e4b0e286459a11c0"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "554b8572e4b0a04f79299589"}, {"problem": 32, "code": "(fn[a-list] (interleave a-list a-list))", "user": "54f296efe4b024c67c0cf8c8"}, {"problem": 32, "code": "mapcat #(vector % %)", "user": "51ba60a8e4b0fe3ecfb4642e"}, {"problem": 32, "code": "#(mapcat (fn [x] [x x]) %)", "user": "554ba1d3e4b0a04f79299595"}, {"problem": 32, "code": "(fn [x]\n  (apply concat (map #(take 2 (repeat %)) x)))", "user": "5550dad4e4b00713264bd9b0"}, {"problem": 32, "code": "mapcat #(vector % %)", "user": "52ce1abfe4b07d0d72b27389"}, {"problem": 32, "code": "(fn [col] \n\t\t(mapcat \n    \t\t#(list %1 %1) \n    \t\tcol\n    \t)\n)", "user": "5027bbe3e4b01614d1633fef"}, {"problem": 32, "code": "(fn [xs] (reduce #(conj %1 %2 %2) (empty xs) xs))", "user": "553638bae4b09218d5f44fba"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5280a1ece4b0757a1b171407"}, {"problem": 32, "code": "#(interleave % %)", "user": "543366dde4b0b6b47310fcdf"}, {"problem": 32, "code": "(fn [s] \n  (loop [xs s\n         ys []]\n    (if (empty? xs)\n      ys\n      (let [x (first xs)]\n        (recur (rest xs) (conj (conj ys x) x))))))", "user": "5283a919e4b0239c8a67adbe"}, {"problem": 32, "code": "#(interleave % %)", "user": "554dfe97e4b00713264bd98c"}, {"problem": 32, "code": "#(sort (into % %))", "user": "5552b617e4b0deb715856df8"}, {"problem": 32, "code": "#(reverse (reduce (fn [acc elt] (cons elt (cons elt acc))) '() %))", "user": "5553b924e4b0deb715856e06"}, {"problem": 32, "code": "(fn [x]\n  (loop [res [],x1 (seq x)]\n    (let [hd (first x1),tail (rest x1)]\n      (if (empty? x1) res\n        (recur (concat res [hd hd]) tail)))))", "user": "55486ee6e4b0a04f7929955a"}, {"problem": 32, "code": "(fn [s]\n  (reduce (fn [ss e]\n            (concat ss (list e e)))\n          '()\n          s))", "user": "5195fadee4b04c0af7ff3c11"}, {"problem": 32, "code": "(fn [n]\n  (loop [[h & r] n, acc '()]\n    (if (nil? h)\n      (reverse acc)\n      (recur r (conj (conj acc h) h)))    \n    ))", "user": "554884d4e4b0a04f7929955c"}, {"problem": 32, "code": "#(interleave % %)", "user": "554b425ce4b0a04f79299581"}, {"problem": 32, "code": "mapcat #(into [] [% %])", "user": "5547bcf2e4b0a04f79299551"}, {"problem": 32, "code": "(fn [s]\n  (reduce (fn [acc v] (conj acc v v)) [] s))", "user": "54dce62be4b024c67c0cf78b"}, {"problem": 32, "code": ";;(fn duplicate-seq[duplicated-seq start-seq] \n;;  (if (empty? start-seq)\n;;    duplicated-seq\n;;    (duplicate-seq \n;;     (conj duplicated-seq (first start-seq)(first start-seq));jak to zrobi\u0107 bez dublowania? :(\n;;     (rest start-seq))))\n;;(vector)\n\nreduce #(conj %1 %2 %2) []", "user": "55429859e4b0a04f7929951f"}, {"problem": 32, "code": ";; first pass\n;(fn [xs] (apply concat (map #(list % %) xs)))\n\n;; zen\n#(interleave % %)", "user": "554bced1e4b0a04f79299599"}, {"problem": 32, "code": "(fn doubler [coll]\n  (mapcat #(repeat 2 %) coll))", "user": "521ceb02e4b0c4ef0be830a5"}, {"problem": 32, "code": "(fn [coll] (reverse (reduce #(conj %1 %2 %2) '() coll)))", "user": "5550bcece4b00713264bd9ae"}, {"problem": 32, "code": "#(interleave % %)", "user": "55536a8ae4b0deb715856e03"}, {"problem": 32, "code": "#(reduce (fn [result input]\n\t\t\t(conj result input input)) [] %)", "user": "555521a5e4b0deb715856e12"}, {"problem": 32, "code": "reduce (fn [a e] \n  (concat a (list e e))\n         ) '()", "user": "554c0adde4b0a04f7929959e"}, {"problem": 32, "code": "#(interleave % %)", "user": "555287a4e4b0deb715856df5"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "54cad59ee4b057c6fda3a26e"}, {"problem": 32, "code": "(fn [vs]\n  (interleave vs vs))", "user": "53684a2fe4b0243289761e8c"}, {"problem": 32, "code": "(fn [x]\n    (loop [coll     x\n           new-coll []]\n          (let [element (first coll)]\n            (if (nil? element)\n              (seq new-coll)\n              (recur (rest coll) (conj new-coll element element))))))", "user": "548ce2dbe4b0e286459a1212"}, {"problem": 32, "code": "mapcat #(conj [] %1 %1)", "user": "553093bee4b076ab5578f817"}, {"problem": 32, "code": "#(interleave % %)", "user": "554bc64ae4b0a04f79299598"}, {"problem": 32, "code": "#(interleave %1 %1)", "user": "555ac933e4b0deb715856e49"}, {"problem": 32, "code": "(fn [coll] (interleave coll coll))", "user": "5169b23fe4b03f62cda68cee"}, {"problem": 32, "code": "#(interleave % %)", "user": "55568a7de4b0deb715856e1c"}, {"problem": 32, "code": "(fn [x] (interleave x x))", "user": "555b5ae4e4b0deb715856e4f"}, {"problem": 32, "code": "(fn [x]\n  (reverse (reduce #(cons %2 (cons %2 %1)) '() x)))", "user": "5142154ce4b0b50abeb46b2b"}, {"problem": 32, "code": "#(interleave % %)", "user": "54026d7de4b0df28a13c62cf"}, {"problem": 32, "code": "(fn gduplicate \n  [j]\n  (loop [[x & xs] j res []] \n    (if x\n      (recur xs (conj (conj res x) x))\n      res)))", "user": "54070647e4b0addc1aec66b2"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "54ad5ceee4b09f271ff37ce1"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) [];;#(apply concat (map (fn[x] (repeat 2 x)) %))", "user": "555da2c4e4b0a2eb076a39ae"}, {"problem": 32, "code": "(fn [seq]\r\n  (apply concat (map #(repeat 2 %) seq)))", "user": "555bd27ae4b0b056612e2244"}, {"problem": 32, "code": "#(interleave % %)", "user": "54e345a1e4b024c67c0cf7db"}, {"problem": 32, "code": "#(interleave % %)", "user": "555b35f7e4b0deb715856e4b"}, {"problem": 32, "code": "#(interleave % %)", "user": "55586905e4b0deb715856e2b"}, {"problem": 32, "code": "(fn [x] (reduce #(conj %1 %2 %2) [] x))", "user": "555c78abe4b0b056612e224f"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "51846567e4b02826a645f399"}, {"problem": 32, "code": "#(reduce (fn[coll v](apply conj coll [v v])) [] %)", "user": "555c6344e4b0b056612e224c"}, {"problem": 32, "code": "(fn [x] (mapcat #(list %1 %1) x))", "user": "555f3bfde4b0a2eb076a39c1"}, {"problem": 32, "code": "(fn [s] (reduce #(conj %1 %2 %2) [] s))", "user": "555a5731e4b0deb715856e44"}, {"problem": 32, "code": "(fn [l] (reverse (reduce #(conj (conj %1 %2) %2) '() l)))", "user": "556086a2e4b0c656e3ff17c1"}, {"problem": 32, "code": "#(interleave % %)", "user": "51aaa5d7e4b04e3dc0c27b2b"}, {"problem": 32, "code": "(fn\n    [arr]\n    ((fn\n      [res arr]\n      (if (empty? arr)\n        res\n        (recur\n          (concat\n            res\n            (list (first arr))\n            (list (first arr)))\n          (rest arr))))\n      []\n      arr))", "user": "555f4bade4b0a2eb076a39c2"}, {"problem": 32, "code": "(fn [s]\n  (reduce\n    #(conj (conj %1 %2) %2)\n    []\n    s))", "user": "556159fae4b0c656e3ff17c7"}, {"problem": 32, "code": "#(interleave % %)", "user": "55484800e4b0a04f79299558"}, {"problem": 32, "code": "(fn [lst] (reverse (reduce #(conj %1 %2 %2) '() lst)))", "user": "5550b5a0e4b00713264bd9ad"}, {"problem": 32, "code": "(fn group-up\n         ([L] (group-up L []))\n         ([remaining grouped]\n          (let [next-char (first remaining)\n                right (rest remaining)]\n            (if (= remaining (empty remaining))\n              grouped\n              (group-up right (conj grouped next-char next-char))))))", "user": "556238bce4b0c656e3ff17d3"}, {"problem": 32, "code": "reduce (fn [r v] (conj r v v)) []", "user": "554d04bbe4b0a04f792995b4"}, {"problem": 32, "code": "(fn [coll] (reduce #(conj %1 %2 %2) [] coll))", "user": "4fc04d75e4b081705acca324"}, {"problem": 32, "code": "(fn [x] (interleave x x))", "user": "550f70bee4b06e50f9beb177"}, {"problem": 32, "code": "(fn [s] (mapcat #(list\t % %) s))", "user": "55623feae4b0c656e3ff17d4"}, {"problem": 32, "code": "#(interleave % %)", "user": "4ef08bd6535dced4c769f20a"}, {"problem": 32, "code": "#(mapcat list % %)", "user": "55631739e4b0c656e3ff17e2"}, {"problem": 32, "code": "#(reduce (fn [m e](conj m e e)) [] %)", "user": "5562f08ae4b0c656e3ff17df"}, {"problem": 32, "code": "#(interleave % %)", "user": "530fbbaee4b08068f379eccf"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "55645592e4b0c656e3ff1802"}, {"problem": 32, "code": ";#(sort (into % %))\n\n;#(reduce concat (for [x %] (list x x)))\n\n#(interleave % %)", "user": "555e9dbfe4b0a2eb076a39bc"}, {"problem": 32, "code": "(fn\n  [coll]\n  (apply concat (map #(repeat 2 %) coll)))", "user": "54eb22a0e4b024c67c0cf845"}, {"problem": 32, "code": "#(interleave % %)", "user": "54f8b6f4e4b01ecee9d8882c"}, {"problem": 32, "code": "#(interleave % %)", "user": "556405e5e4b0c656e3ff17fb"}, {"problem": 32, "code": "(fn [s] (mapcat #(vector % %) s))", "user": "5501a1e1e4b07d26eda61d75"}, {"problem": 32, "code": "(fn [s] (interleave s s))", "user": "554756b8e4b0a04f79299549"}, {"problem": 32, "code": "(fn [v]\n        (reduce (fn [result item] (conj result item item)) '() (reverse v))\n        \n  )", "user": "4e28ddd1535deb9a81d77efd"}, {"problem": 32, "code": "(fn dup [l]\n  (if (empty? l)\n    l\n    (let [f (first l)]\n      (concat (list f f) (dup (rest l))))))", "user": "55670a05e4b0c656e3ff1838"}, {"problem": 32, "code": "#(interleave % %)", "user": "55664950e4b0c656e3ff1832"}, {"problem": 32, "code": "(fn f [[h & t]] \n  (if (empty? t) \n    [h h] \n    (concat [h h] (f t))))", "user": "5566d812e4b0c656e3ff1837"}, {"problem": 32, "code": "(fn \n  [x]\n  (mapcat #(list % %) (seq x)))", "user": "55640c62e4b0c656e3ff17fd"}, {"problem": 32, "code": "#(interleave % %)", "user": "55675a6ce4b0c656e3ff183e"}, {"problem": 32, "code": "#(interleave % %)", "user": "55625903e4b0c656e3ff17d7"}, {"problem": 32, "code": ";;#(mapcat list % %)\nreduce #(conj %1 %2 %2) []", "user": "55647a31e4b0c656e3ff1808"}, {"problem": 32, "code": "(fn dupes [s] (\n                 loop [new [] old s]\n                  ( if (empty? old)\n                    new\n                    (recur (conj new (first old) (first old)) (rest old))\n                   )\n))", "user": "52c70127e4b0c2d177d6211a"}, {"problem": 32, "code": "#( interleave % % )", "user": "556880dae4b0c656e3ff1856"}, {"problem": 32, "code": "(fn [l]\n  (mapcat #(list % %) l))", "user": "54a1f494e4b09f271ff37c52"}, {"problem": 32, "code": "#(interleave % %)", "user": "52c03baee4b07a9af5792347"}, {"problem": 32, "code": "#(interleave % %)", "user": "50dfc83fe4b061dbdced7229"}, {"problem": 32, "code": "#(interleave % %)", "user": "556a3243e4b09a3098a524de"}, {"problem": 32, "code": "mapcat (fn [x] [x x])", "user": "555f0789e4b0a2eb076a39bf"}, {"problem": 32, "code": "(fn dble [x] \n  (cond\n    (= 0 (count x)) '()\n    :else (conj (dble (rest x)) (first x) (first x))\n          ))", "user": "5374f931e4b06d7f452d9e2d"}, {"problem": 32, "code": "#(interleave % %)", "user": "5566463ee4b0c656e3ff1831"}, {"problem": 32, "code": "(fn [col]\n    (loop [result (vector)\n           todup col]\n      (let [[f & r] todup\n            nextcol (conj (conj result f) f)]\n        (if (empty? r)\n          nextcol\n          (recur nextcol r)))))", "user": "554a75c9e4b0a04f79299575"}, {"problem": 32, "code": "(fn [coll]\n  (loop [c coll\n         acc []]\n    (if (empty? c)\n      acc\n      (recur (rest c) (conj acc (first c) (first c))))))", "user": "556a6137e4b09a3098a524e0"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "54a97853e4b09f271ff37cae"}, {"problem": 32, "code": "#(interleave % %)", "user": "55630cc1e4b0c656e3ff17e0"}, {"problem": 32, "code": "#(interleave % %)", "user": "556c70dae4b09a3098a524fd"}, {"problem": 32, "code": "(fn [x] (loop [i x res[]]  (if(empty? i) res  (recur (rest i) (conj res (first i) (first i))))))", "user": "55382530e4b09218d5f44fdd"}, {"problem": 32, "code": "(fn [coll]\n  (reverse\n   (reduce #(cons %2 (cons %2 %1)) '() coll)))", "user": "5565e7e6e4b0c656e3ff1821"}, {"problem": 32, "code": "#(apply concat (map (fn [n] (repeat 2 n)) %))", "user": "556b83fbe4b09a3098a524ee"}, {"problem": 32, "code": "(fn[x] \n  (apply interleave \n    (#(repeat 2 %) x)))", "user": "555df9c8e4b0a2eb076a39b2"}, {"problem": 32, "code": "(fn duplicator\n  ([coll] (duplicator coll []))\n  ([coll newColl] (if (empty? coll)\n                    newColl\n                    (duplicator (rest coll) (conj newColl (first coll) (first coll)))\n                   )\n   )\n  )", "user": "5564709ee4b0c656e3ff1807"}, {"problem": 32, "code": "(fn [xs]  (mapcat #(conj [%] %) xs))", "user": "50a8bb65e4b0deba384a58bd"}, {"problem": 32, "code": "(fn dup\n  [list]\n  (reduce #(conj %1 %2 %2) [] list))", "user": "556be3dce4b09a3098a524f7"}, {"problem": 32, "code": "(fn sdsu-dup [x]\n  (if (= (count x) 1)\n    [(first x) (first x)]\n    (cons (first x) (cons (first x) (sdsu-dup (rest x))))))", "user": "556cd549e4b09a3098a52503"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "556dd141e4b09a3098a52509"}, {"problem": 32, "code": "(fn dub[col](apply concat (map #(conj [%] %) col)))", "user": "5565d5e4e4b0c656e3ff181f"}, {"problem": 32, "code": "#(interleave % %)", "user": "5568a1bde4b0c656e3ff1857"}, {"problem": 32, "code": "(fn duplicate[userList] (if (empty? userList)\n                                 []\n                                 (reduce conj (duplicate (drop-last userList)) (repeat 2 (last userList)))))", "user": "556bbaaee4b09a3098a524f0"}, {"problem": 32, "code": "(fn [s] (mapcat (fn [e] [e e])s))", "user": "55660248e4b0c656e3ff1824"}, {"problem": 32, "code": "(fn [arr] (interleave arr arr))", "user": "556f443be4b09a3098a5251e"}, {"problem": 32, "code": "#(interleave %1 %1)", "user": "55702247e4b09a3098a5252a"}, {"problem": 32, "code": "#(mapcat vector % %)", "user": "55702081e4b09a3098a52529"}, {"problem": 32, "code": "(fn [coll]\n  (apply concat (map #(repeat 2 %) coll)))", "user": "556cc24ae4b09a3098a52502"}, {"problem": 32, "code": "(fn r [s] (cond (empty? s) s :else (cons (first s) (cons (first s) (r (rest s))))))", "user": "556766c1e4b0c656e3ff1840"}, {"problem": 32, "code": "(fn [a]\n  (sort (concat a a)))", "user": "55634f38e4b0c656e3ff17e8"}, {"problem": 32, "code": "mapcat #(vector % %)", "user": "53b05a75e4b047364c044482"}, {"problem": 32, "code": "(fn[x] (sort (into [] (concat x x ))))", "user": "556ff948e4b09a3098a52527"}, {"problem": 32, "code": "#(interleave % %)", "user": "55654e17e4b0c656e3ff1818"}, {"problem": 32, "code": "(fn [in]\n  (loop [leftover in\n         result []]\n    (if (empty? leftover)\n      result\n      (let [[head & tail] leftover]\n        (recur tail (conj result head head))))))", "user": "5189bf9ee4b0288ada3dbdaf"}, {"problem": 32, "code": "(fn [x] (interleave x x))", "user": "55705dd0e4b09a3098a5252c"}, {"problem": 32, "code": "(fn [col] (reduce concat (map #(repeat 2 %) col)))", "user": "556f35fee4b09a3098a5251a"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "4e8385d8535db62dc21a62db"}, {"problem": 32, "code": "#(interleave % %)", "user": "54e1939ce4b024c67c0cf7c5"}, {"problem": 32, "code": "#(interleave % %)", "user": "5572fdd7e4b0aa18f790f3f1"}, {"problem": 32, "code": "#(apply concat (map (fn [x] [x x]) %))", "user": "5571d6e5e4b09a3098a5253f"}, {"problem": 32, "code": "mapcat #(vector % %)", "user": "52a4879ce4b0c58976d9abdb"}, {"problem": 32, "code": "(fn [coll] (reduce (fn [coll item] (concat coll (list item item))) '() coll))", "user": "53065acbe4b02e8216869792"}, {"problem": 32, "code": "(fn dup [x]\r\n  (if\r\n    (empty? x)\r\n    '()\r\n    (cons (first x) (cons (first x) (dup (rest x))))))", "user": "55244734e4b0882d96d091bf"}, {"problem": 32, "code": "reduce (fn [a b] (conj a b b)) []", "user": "550fa523e4b06e50f9beb17a"}, {"problem": 32, "code": "mapcat (fn [x] [x x])", "user": "5573ffb5e4b0aa18f790f3fd"}, {"problem": 32, "code": "#(interleave % %)", "user": "52c911dde4b0c2d177d6213a"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "5564cb31e4b0c656e3ff1810"}, {"problem": 32, "code": "(fn sm-dup [x]\n  \n  (if (= 0 (count x))\n    '()\n    (let [a (first x) b (rest x)] (concat (list a a) (sm-dup b)))\n    )\n  \n  \n)", "user": "5575aae2e4b05c286339e065"}, {"problem": 32, "code": "(fn [x]\n  (mapcat identity\n  \t(\n  \t\tmap (fn [elem] [elem elem]) x\n  \t)\n  )\n)", "user": "5559b443e4b0deb715856e3c"}, {"problem": 32, "code": "#(interleave % %)", "user": "55478ce2e4b0a04f7929954e"}, {"problem": 32, "code": "(fn\n  [[& params]]\n  (loop [ans '() rest-params params]\n    (if (empty? rest-params)\n      (reverse ans)\n      (let [head (first rest-params)]\n       (recur (conj ans head head) (rest rest-params))))))", "user": "556ff203e4b09a3098a52526"}, {"problem": 32, "code": "#(interleave % %)", "user": "55306b8ae4b076ab5578f812"}, {"problem": 32, "code": "#(loop [y % x []]\n     (if (= (count y) 0)\n           \t(seq x)\n           \t(recur (next y) (conj x (first y) (first y)) )))", "user": "552712e7e4b0ffed3738f92a"}, {"problem": 32, "code": "#(mapcat (fn [c] (list c c)) %)", "user": "5551bddae4b0deb715856def"}, {"problem": 32, "code": "mapcat (partial repeat 2)", "user": "5416b4a2e4b01498b1a71a01"}, {"problem": 32, "code": "#(interleave %1 %1)", "user": "556523fce4b0c656e3ff1815"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5579638fe4b05c286339e094"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "4f74fed2e4b0fbe0118ec553"}, {"problem": 32, "code": "(fn [X] (sort (concat X X)))", "user": "55769940e4b05c286339e070"}, {"problem": 32, "code": "#(mapcat (fn [i] [i i]) %)", "user": "557a1e18e4b05c286339e09e"}, {"problem": 32, "code": "(fn[mySeq] (for [x mySeq y (range 2)] x ))", "user": "55757e81e4b05c286339e063"}, {"problem": 32, "code": "(fn [s] (mapcat #(repeat 2 %) s))", "user": "53fc63dce4b0de5c4184859f"}, {"problem": 32, "code": "(fn [a] (interleave a a))", "user": "554f7ef2e4b00713264bd9a1"}, {"problem": 32, "code": "(fn f [p] (mapcat #(repeat 2 %) p))", "user": "557bd432e4b05c286339e0bb"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "5576f299e4b05c286339e077"}, {"problem": 32, "code": "(fn [xs] (reduce concat (map #(repeat 2 %) xs)))", "user": "557954aae4b05c286339e092"}, {"problem": 32, "code": "(fn [liste] (reverse \n    (loop [rliste liste result ()]\n\t    (if (empty? rliste)\n        result\n        (recur (rest rliste) (conj result (first rliste) (first rliste)))\n      )\n    )\n    ))", "user": "556f2009e4b09a3098a52519"}, {"problem": 32, "code": "#(interleave % %)", "user": "541b41d1e4b01498b1a71a65"}, {"problem": 32, "code": "#(interleave % %)", "user": "51a3cc45e4b0e77c4ca60bfb"}, {"problem": 32, "code": "(fn [x] (apply concat (map #(list % %) x)))", "user": "557dbc9de4b05c286339e0cd"}, {"problem": 32, "code": "#(interleave % %)", "user": "524cb5dee4b0752c4cb68cc7"}, {"problem": 32, "code": "(fn duplicate-a-sequence [xs]\n  (apply concat (map #(list % %) xs)))", "user": "557bcce4e4b05c286339e0b9"}, {"problem": 32, "code": "(comp (partial reduce concat nil) (partial map (partial replicate 2)))", "user": "506f0968e4b09350ab4199f5"}, {"problem": 32, "code": "(fn [x] (sort (concat x x)))", "user": "557e8326e4b05c286339e0d7"}, {"problem": 32, "code": "(fn [xs] (mapcat (fn [x] (list x x)) xs))", "user": "5581747fe4b05c286339e0fa"}, {"problem": 32, "code": "(fn [s] (apply concat (map #(repeat 2 %) s)))", "user": "5253de67e4b0541d1855b939"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "5037534de4b0af0658af77aa"}, {"problem": 32, "code": "#(interleave % %)", "user": "4f04664a535dcb61093f6bc1"}, {"problem": 32, "code": "(fn [x] (interleave x x))", "user": "558341c7e4b05c286339e113"}, {"problem": 32, "code": "#(interleave % %)", "user": "558306dfe4b05c286339e110"}, {"problem": 32, "code": "(fn myDuplicate\n  [sequence]\n  (apply concat (map (partial repeat 2) sequence)))", "user": "557e9d17e4b05c286339e0d8"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5537c939e4b09218d5f44fd2"}, {"problem": 32, "code": "(fn [coll] (mapcat #(repeat 2 %) coll))", "user": "4f6d23cde4b07046d9f4efc6"}, {"problem": 32, "code": "#(interleave % %)", "user": "55842c7ee4b05c286339e11d"}, {"problem": 32, "code": "#(reduce (fn [f n] (conj (conj f n) n)) [] %)", "user": "5553b729e4b0deb715856e05"}, {"problem": 32, "code": "#(loop [n 0 s % d []]\n   (if (= n (count %)) d\n     (recur (inc n) (rest s) (concat d [(first s) (first s)]))))", "user": "558378dce4b05c286339e115"}, {"problem": 32, "code": "(fn [a] (reverse (reduce #(conj (conj %1 (first %2)) (last %2)) (map #(list %1 %1) a))))", "user": "5576e78de4b05c286339e075"}, {"problem": 32, "code": "#(loop [c 0 result []] (if  (= (count %) c) (seq result) (recur (inc c) (conj result (nth % c) (nth % c)))))", "user": "556cb481e4b09a3098a52501"}, {"problem": 32, "code": "(fn duplicate [l]\n  (loop [nl '()\n         i (dec (count l))] ;; in reverse\n    (if (>= i 0)\n      (recur (cons (nth l i) (cons (nth l i) nl)) (dec i))\n      nl)))", "user": "55845fb6e4b04192f3441eed"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "5392500ae4b0b51d73faaeaf"}, {"problem": 32, "code": "(fn dup1 [col] (reduce #(conj %1 %2 %2) [] col))", "user": "55632016e4b0c656e3ff17e4"}, {"problem": 32, "code": "#(interleave % %)", "user": "50ec409ce4b04edc33777045"}, {"problem": 32, "code": "(fn [input] (reverse (loop [acc '()\n                   rem- input]\n              (if-not (empty? rem-)\n                (recur (into acc (repeat 2 (first rem-))) (next rem-))\n                acc))))", "user": "54e79094e4b024c67c0cf818"}, {"problem": 32, "code": "(fn [l]\n  (loop [li l el ()]\n    (if (empty? li)\n      el\n      (recur (butlast li) (conj el (last li) (last li))))))", "user": "52979551e4b02ebb4ef75043"}, {"problem": 32, "code": "(fn [coll] (mapcat #(repeat 2 %) coll))", "user": "54c9571ee4b045293a27f66b"}, {"problem": 32, "code": "#(interleave % %)", "user": "5587d91ae4b059ccff29b1e9"}, {"problem": 32, "code": "#(interleave % %)", "user": "5585aa48e4b001b0851d7510"}, {"problem": 32, "code": "(fn [XS]\n\t(let [func (fn iter [xs seq]\n\t\t(if (empty? xs)\n\t\t\tseq\n\t\t\t(iter (rest xs) (conj (conj seq (first xs)) (first xs)))))]\n\t(reverse (func XS '()))))", "user": "5583888ae4b05c286339e117"}, {"problem": 32, "code": "mapcat #(take 2 (repeat %))", "user": "54bad977e4b0ed20f4ff6eb9"}, {"problem": 32, "code": "(fn dup [x]\n  (reduce concat (map #(take 2 (repeat %)) x)))", "user": "55885edae4b059ccff29b1f6"}, {"problem": 32, "code": "(fn [c] (mapcat #(list % %) c))", "user": "55895eade4b059ccff29b202"}, {"problem": 32, "code": "(fn [x]  (reverse ((fn [x y] (if (empty? x) y (recur (rest x) (conj y  (first x) (first x))))) x '())) )", "user": "55818b0ee4b05c286339e0fb"}, {"problem": 32, "code": "(fn [col]\n  (apply concat (map #(repeat 2 %) col))\n)", "user": "5581a6dae4b05c286339e0fe"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "557ca912e4b05c286339e0c8"}, {"problem": 32, "code": "(fn dupl [x] (if (empty? x) '() (cons (first x) (cons (first x) (dupl (rest x))))))", "user": "558466fce4b04192f3441eee"}, {"problem": 32, "code": "#(interleave % %)", "user": "55896a0ce4b059ccff29b204"}, {"problem": 32, "code": "(fn [input]\n  (loop [i input\n         o (list)]\n    (if (empty? i)\n      o\n      (let [f (last i)]\n        (recur (butlast i) (-> o (conj f) (conj f)))))))", "user": "54cbd6bae4b057c6fda3a282"}, {"problem": 32, "code": "(fn [s]\n  (loop [lista s\n         result (list)]\n    (let [e (first lista)]\n      (if e\n        (recur (rest lista) (concat result (list  e e)))\n        result)) \n    ))", "user": "54530382e4b0e397800069cc"}, {"problem": 32, "code": "reduce (fn [m l]  (conj m l l) ) []", "user": "5587d8b3e4b059ccff29b1e8"}, {"problem": 32, "code": "(fn [seq] (mapcat (fn [x] [x x]) seq))", "user": "5589e88ae4b0277789237610"}, {"problem": 32, "code": "(fn [coll](mapcat #(repeat 2 %) coll))", "user": "558aabbfe4b0277789237621"}, {"problem": 32, "code": "#(interleave % %)", "user": "55893ebbe4b059ccff29b1ff"}, {"problem": 32, "code": "mapcat #(vector % %)", "user": "558a81fbe4b027778923761c"}, {"problem": 32, "code": "(fn [a] (interleave a a))", "user": "54edfebbe4b024c67c0cf869"}, {"problem": 32, "code": "(fn [s]\n  (interleave s s))", "user": "558bb38fe4b0277789237631"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "4e6a23d0535d8ccf87e9fea0"}, {"problem": 32, "code": "#(interleave % %)", "user": "557f7c8be4b05c286339e0e0"}, {"problem": 32, "code": "(fn [l] (reduce #(concat %1 (vector %2 %2)) [] l))", "user": "558df2ebe4b0277789237649"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "558b50d5e4b027778923762b"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "558d7dd3e4b0277789237647"}, {"problem": 32, "code": "#(interleave % %)", "user": "5589a735e4b059ccff29b206"}, {"problem": 32, "code": "#(mapcat (fn [x] [x x]) %)", "user": "558ed227e4b0277789237658"}, {"problem": 32, "code": "(fn myduplicate\n  [myseq]\n  (reduce concat\n          (map #(list % %) myseq)))", "user": "55897fe2e4b059ccff29b205"}, {"problem": 32, "code": "#(interleave % %)", "user": "53e76363e4b036ad0777e47b"}, {"problem": 32, "code": "(fn [coll]\n  (apply concat (map #(list % %) coll)))", "user": "55465b20e4b0a04f7929953b"}, {"problem": 32, "code": "(fn [x] \n  (mapcat #(list % %) x))", "user": "5590e461e4b0277789237675"}, {"problem": 32, "code": "(fn [coll]\n  (reverse\n   (reduce #(cons %2 (cons %2 %1)) '() coll)))", "user": "554c1708e4b0a04f792995a0"}, {"problem": 32, "code": "#(interleave % %)", "user": "55916d7be4b0604b3f94d57d"}, {"problem": 32, "code": "(fn [x] (reduce #(concat %1 [%2 %2]) '() x))", "user": "559057c4e4b027778923766e"}, {"problem": 32, "code": "(fn [l]\n  (loop [x l r []]\n    (if (empty? x)\n      r\n      (recur (rest x) (conj (conj r (first x)) (first x))))))", "user": "5590e55de4b0277789237676"}, {"problem": 32, "code": "(fn [xs] (reverse (reduce #(cons %2 (cons %2 %1)) '() xs)))", "user": "55866c55e4b059ccff29b1d3"}, {"problem": 32, "code": "(fn [s] (mapcat #(list % %) s))", "user": "5578c67fe4b05c286339e08d"}, {"problem": 32, "code": "#(interleave % %)", "user": "558f4fbae4b0277789237661"}, {"problem": 32, "code": "(fn [s]\n  (loop [result []\n         s s]\n    (if (empty? s)\n      result\n      (recur (conj (conj result (first s)) (first s)) (rest s)))))", "user": "531c6e72e4b08068f379eda0"}, {"problem": 32, "code": "#(interleave %1 %1)", "user": "55893b09e4b059ccff29b1fe"}, {"problem": 32, "code": "#(interleave % %)", "user": "5590ebb1e4b0277789237677"}, {"problem": 32, "code": "#(apply concat (reduce (fn [x y] (conj x (take 2 (repeat y))) ) [] % ))", "user": "557e6b73e4b05c286339e0d6"}, {"problem": 32, "code": "#(interleave % %)", "user": "559279b7e4b0604b3f94d58c"}, {"problem": 32, "code": "#(interleave % %)", "user": "55815973e4b05c286339e0f6"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "55941019e4b0c79f6e1db94b"}, {"problem": 32, "code": "(fn [s] (reduce #(conj %1 %2 %2) [] s))", "user": "4fffa422e4b0678c553fc404"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "555883c5e4b0deb715856e2d"}, {"problem": 32, "code": "reduce #(conj % %2 %2) []", "user": "5509bd6ee4b06e50f9beb120"}, {"problem": 32, "code": "#(interleave % %)", "user": "55933c7ae4b0c79f6e1db938"}, {"problem": 32, "code": "(fn dup [x]\n         (loop [elem (first x)]\n           (if (nil? elem)\n             nil\n             (concat (list elem elem) (dup (rest x))))))", "user": "53c0f4dee4b00fb29b221259"}, {"problem": 32, "code": "#(interleave % %)", "user": "5585f088e4b001b0851d7513"}, {"problem": 32, "code": "#(mapcat (partial repeat 2) %)", "user": "525523e3e4b0541d1855b9cc"}, {"problem": 32, "code": "#(interleave % %)", "user": "5592bf9fe4b0c79f6e1db933"}, {"problem": 32, "code": "(fn [l]\n  (loop [l l rv []]\n    (if (empty? l)\n      rv\n      (recur (rest l) (conj rv (first l) (first l))))))", "user": "55934bebe4b0c79f6e1db93b"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "557819dce4b05c286339e088"}, {"problem": 32, "code": "(fn [v] (apply concat (map #(list % %) v)))", "user": "5593619ae4b0c79f6e1db93c"}, {"problem": 32, "code": "(fn [coll]\n  (reduce\n   (fn [ret v] (conj (conj ret v) v))\n   [] coll))", "user": "555ee545e4b0a2eb076a39bd"}, {"problem": 32, "code": "#(interleave % %)", "user": "5595ffabe4b0c79f6e1db972"}, {"problem": 32, "code": "(fn [xx] (apply concat (#(map (fn [x] (list x x)) %)xx) ))", "user": "4fdb0c0ae4b05e33b9224f57"}, {"problem": 32, "code": "(fn [coll] (reduce (fn [c v] (conj (conj c v) v)) [] coll))", "user": "53573d70e4b04ce2eb3ed278"}, {"problem": 32, "code": "#(interleave % %)", "user": "559622cee4b0c79f6e1db975"}, {"problem": 32, "code": "(fn [s] (apply concat (map #(list % %) s)))", "user": "55990d3ce4b031d6649c9ba3"}, {"problem": 32, "code": "#(apply interleave (repeat 2 %))", "user": "5400e918e4b0de5c41848619"}, {"problem": 32, "code": "(fn[n] (mapcat (fn[n] (list n n)) n))", "user": "55950c5fe4b0c79f6e1db95e"}, {"problem": 32, "code": "(fn [coll]\n  (reverse\n   (reduce #(cons %2 (cons %2 %1)) '() coll)))", "user": "5594f8aee4b0c79f6e1db95c"}, {"problem": 32, "code": "(fn duplicate [a-seq]\n  (->> a-seq\n       (map #(list % %))\n       (reduce concat)))", "user": "55995fa7e4b031d6649c9ba9"}, {"problem": 32, "code": "(fn [x] (apply concat (map #(list % %) x)))", "user": "5598cf5ae4b031d6649c9b9f"}, {"problem": 32, "code": "#(interleave % %)", "user": "55882c84e4b059ccff29b1f2"}, {"problem": 32, "code": "(fn [coll] (reduce #(conj %1 %2 %2) [] coll))", "user": "55306f9de4b076ab5578f814"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "54117417e4b01498b1a719c5"}, {"problem": 32, "code": "mapcat #(repeat 2%)", "user": "559bdf16e4b066d22e731f5a"}, {"problem": 32, "code": "#(apply concat (map (fn [el] (concat el el)) (partition-by identity %)))", "user": "5537f30fe4b09218d5f44fd8"}, {"problem": 32, "code": "(fn [x] (apply concat (map (partial repeat 2) x)))", "user": "559b55d6e4b066d22e731f54"}, {"problem": 32, "code": "#(interleave % %)", "user": "5596af34e4b04c1e5c31d758"}, {"problem": 32, "code": "#(interleave % %)", "user": "559972d1e4b031d6649c9bab"}, {"problem": 32, "code": "#(for [e % x [e e]] x)", "user": "559c13c5e4b066d22e731f61"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "54a627bce4b09f271ff37c83"}, {"problem": 32, "code": "(fn [xs] (interleave xs xs))", "user": "538d7e2ee4b0b51d73faae70"}, {"problem": 32, "code": "#(interleave % %)", "user": "55929e89e4b0604b3f94d58e"}, {"problem": 32, "code": "(fn [sq]\n  (loop [sq-it sq\n         ret-it (empty sq)]\n    (if (empty? sq-it)\n      ret-it\n      (recur (rest sq-it)\n             (concat ret-it (take 2 (repeat (first sq-it))))))))", "user": "559d33b3e4b0ec2b359424d9"}, {"problem": 32, "code": "#(interleave %1 %1)", "user": "54d5343fe4b0a52adc2e200a"}, {"problem": 32, "code": "(fn [s] ( apply concat (map #(repeat 2 %) s)))", "user": "558bdcefe4b0277789237633"}, {"problem": 32, "code": "#(interleave % %)", "user": "559a8816e4b066d22e731f41"}, {"problem": 32, "code": "(fn [xs]\n  (reduce\n   (fn [s t]\n     (-> s (conj t) (conj t)))\n   [] xs))", "user": "559141b1e4b0604b3f94d576"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "559e25fde4b08a52bd4f97d0"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "5592c56ee4b0c79f6e1db934"}, {"problem": 32, "code": "(fn [input]\n  (loop [in input\n          out []]\n    (if (empty? in)\n      out\n      (recur (rest in)\n        (conj out (first in) (first in))))))", "user": "5574c172e4b05c286339e059"}, {"problem": 32, "code": "mapcat #(vector % %)", "user": "559c3d73e4b066d22e731f65"}, {"problem": 32, "code": "#(apply concat (for [c %] [c c]))", "user": "55989c25e4b031d6649c9b9b"}, {"problem": 32, "code": "#(interleave % %)", "user": "54f3d6c7e4b050824f58f5cb"}, {"problem": 32, "code": "#(interleave % %)", "user": "559b2ad1e4b066d22e731f4e"}, {"problem": 32, "code": "#(loop [lis % res []]\n   (if (seq lis)\n     (recur (rest lis) (into res (let [f (first lis)] [f f])))\n     res))", "user": "55868660e4b059ccff29b1d4"}, {"problem": 32, "code": "(fn dupes [coll]\n  (let [f (first coll)\n        r (rest coll)]\n    (cond\n     (empty? coll) nil\n     :else (concat (cons f(cons f '())) (dupes r)))))", "user": "559f06bae4b0acc240e314e6"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "5512967ee4b06e50f9beb1ae"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "559ffabae4b0acc240e314ef"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "55a0fd18e4b0acc240e31507"}, {"problem": 32, "code": "#(interleave % %)", "user": "55a12668e4b0acc240e3150b"}, {"problem": 32, "code": "(fn [col] (reduce concat (map #(list % %) col)))", "user": "55996253e4b031d6649c9baa"}, {"problem": 32, "code": "(fn [x] (reduce concat (map #(list % %) x)))", "user": "55993deee4b031d6649c9ba5"}, {"problem": 32, "code": "(fn [x] (mapcat #(list % %) x))", "user": "559eb160e4b0acc240e314e1"}, {"problem": 32, "code": "(fn \n  [aseq]\n  (loop [[head & remaining] aseq\n         new-seq []]\n    (if (nil? head)\n      new-seq\n      (recur remaining (into new-seq (repeat 2 head))))))", "user": "557e2eafe4b05c286339e0d2"}, {"problem": 32, "code": "(fn [coll] (mapcat #(vector % %) coll))", "user": "55a2d5c2e4b0acc240e3152c"}, {"problem": 32, "code": "(fn [a]\n  (letfn [(dup-me [b acc] \n                  (if (seq b) (recur (rest b) (conj acc (first b) (first b)))\n                    acc))]\n    (dup-me a [])))", "user": "55a1ba5ee4b0acc240e31517"}, {"problem": 32, "code": "(fn [x] (mapcat #(repeat 2 %) x))", "user": "55a346e8e4b0acc240e31532"}, {"problem": 32, "code": "(fn [l] (reduce #(conj %1 %2 %2) [] l))", "user": "52138dd7e4b0d32679a5065d"}, {"problem": 32, "code": "#(interleave % %)", "user": "55a0a278e4b0acc240e314ff"}, {"problem": 32, "code": "(fn dup [x]\n  (if (empty? x)\n    x\n    (cons (first x) (cons (first x) (dup (rest x))))))", "user": "55a35ef4e4b0acc240e31535"}, {"problem": 32, "code": "#(interleave % %)", "user": "55a1d7f6e4b0acc240e31519"}, {"problem": 32, "code": "(fn [x] (loop [res [] rest x] (if (empty? rest) res (recur (conj res (first rest) (first rest)) (next rest)))))", "user": "55a02d8ae4b0acc240e314f2"}, {"problem": 32, "code": "#(interleave % %)", "user": "5594e0e3e4b0c79f6e1db95b"}, {"problem": 32, "code": ";; let tests pass\n(fn [a_seq] (sort (concat a_seq a_seq)))", "user": "556189a6e4b0c656e3ff17c9"}, {"problem": 32, "code": "#(interleave % %)", "user": "54e956d9e4b024c67c0cf831"}, {"problem": 32, "code": "(fn [coll]\n  (reverse\n   (reduce #(cons %2 (cons %2 %1)) '() coll)))", "user": "52b3520ee4b0c58976d9ad04"}, {"problem": 32, "code": "(fn [coll]\n  (reverse\n   (reduce #(cons %2 (cons %2 %1)) '() coll)))", "user": "55a30e9de4b0acc240e3152f"}, {"problem": 32, "code": "(fn [x] (mapcat (fn [x] [x x]) x))", "user": "55a59ebae4b0acc240e3154d"}, {"problem": 32, "code": "#(mapcat (fn [x] [x x]) %)", "user": "503e91d4e4b06c4e0e1fa269"}, {"problem": 32, "code": "(fn [s]\n  (reverse (reduce #(conj % %2 %2) '() s)))", "user": "55a62092e4b0acc240e31554"}, {"problem": 32, "code": "(fn [input]\n  (let [f (fn duplicate-seq [input result]\n\t  (if (empty? input)\n\t\t  result\n\t\t  (let [head (first input)\n\t\t        tail (rest input)\n\t\t        res (conj result head)]\n\t\t    (recur tail (conj res head)))))]\n  (f input [])))", "user": "531dc21be4b08068f379edb1"}, {"problem": 32, "code": "(fn [coll]\n  (->> coll\n       (reduce #(conj %1 %2 %2) '())\n        reverse))", "user": "559468cbe4b0c79f6e1db954"}, {"problem": 32, "code": "#(loop [in % out '()] (if (empty? in) (reverse out) (recur (rest in) (conj out (first in) (first in)))))", "user": "55a31e3fe4b0acc240e31531"}, {"problem": 32, "code": "#(loop [coll % tgt '()]\n   (if (= coll '())\n     tgt\n     (recur (rest coll) (concat tgt [(first coll) (first coll)]))\n     ))", "user": "55a74d46e4b09e57187da2a3"}, {"problem": 32, "code": "(fn [xs] (mapcat #(repeat 2 %) xs))", "user": "553527ede4b09218d5f44fab"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "55496eeae4b0a04f79299569"}, {"problem": 32, "code": "(partial mapcat (fn [x] (list x x)))", "user": "551e8627e4b08d5046aa8a45"}, {"problem": 32, "code": "#(reduce\n       (fn [out in]\n         (conj out in in))\n       []\n       %)", "user": "5564c113e4b0c656e3ff180d"}, {"problem": 32, "code": "(fn [s]\n  (reverse (reduce #(conj (conj %1 %2) %2) '() s)))", "user": "4f9e830ae4b0dcca54ed6d2c"}, {"problem": 32, "code": "(fn [c] (reduce #(concat %1 [%2 %2] ) [] c))", "user": "55a31c66e4b0acc240e31530"}, {"problem": 32, "code": "reduce #(conj (conj %1 %2) %2) []", "user": "5592dc6be4b0c79f6e1db935"}, {"problem": 32, "code": "#(mapcat (fn [x] [x x]) %)", "user": "553beff9e4b09218d5f4500d"}, {"problem": 32, "code": "(fn [lat] (reduce concat (map #(take 2 (repeat %)) lat)))", "user": "55aa1637e4b0988bba2ad949"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "55aa5f73e4b0988bba2ad94b"}, {"problem": 32, "code": "#(interleave % %)", "user": "51814aefe4b06547fbae114f"}, {"problem": 32, "code": "mapcat #(vector % %)", "user": "55ab8c2de4b0988bba2ad954"}, {"problem": 32, "code": "#(interleave % %)", "user": "55a1683ce4b0acc240e31513"}, {"problem": 32, "code": "#(reduce (fn [new-sequence element] (conj new-sequence element element)) [] %)", "user": "55a5c3bee4b0acc240e3154e"}, {"problem": 32, "code": "#(interleave % %)", "user": "5593b10ce4b0c79f6e1db943"}, {"problem": 32, "code": "(fn [x] (interleave x x))", "user": "55a0e139e4b0acc240e31504"}, {"problem": 32, "code": "(fn [s]\n    (letfn [(dpsq [s result]\n              (if (seq s)\n                (let [f (first s)]\n                  (recur (rest s) (conj result f f)))\n                result))]\n      (dpsq s [])))", "user": "55ac07afe4b03311e7b7328f"}, {"problem": 32, "code": "(fn dup \n  [s] \n  (reduce (fn [s* x] (conj (conj s* x) x)) [] s)\n)", "user": "55acd080e4b03311e7b73298"}, {"problem": 32, "code": "(fn [coll] (mapcat #(list % %) coll))", "user": "559c4236e4b066d22e731f67"}, {"problem": 32, "code": "(fn [l] (reduce #(cons %2 (cons %2 %1)) () (reverse l)))", "user": "559a9a3de4b066d22e731f45"}, {"problem": 32, "code": "#(mapcat (fn [x] [x x]) %)", "user": "55ab07e0e4b0988bba2ad953"}, {"problem": 32, "code": "(fn [x] (interleave x x))", "user": "54c120d7e4b0ed20f4ff6f1c"}, {"problem": 32, "code": "mapcat #(take 2 (cycle [%]))", "user": "55ad59cde4b03311e7b732a7"}, {"problem": 32, "code": "(fn [xs]\n  (mapcat #(repeat 2 %) xs)\n )", "user": "55aa8276e4b0988bba2ad94e"}, {"problem": 32, "code": "(fn rec [l] (if (nil? l)\n              nil\n              (cons (first l) \n                    (cons (first l) \n                          (rec (next l))))))", "user": "55adcc8fe4b03311e7b732ab"}, {"problem": 32, "code": "#(for [v % _ (range 2)] v)", "user": "55adf4d7e4b03311e7b732af"}, {"problem": 32, "code": "(fn woo [a] \r\n  (reverse (reduce \r\n            #(conj %1 %2 %2)\r\n             ()(seq a))))", "user": "55af7e21e4b03311e7b732cc"}, {"problem": 32, "code": "#(interleave % %)", "user": "55b08677e4b002ce9d5cbc23"}, {"problem": 32, "code": "(fn [x]\n  (loop [i 0 s '()]\n    (if (= i (count x))\n      (reverse s)\n      (recur (inc i) (into s (list (nth x i) (nth x i)))))))", "user": "55aaa36fe4b0988bba2ad94f"}, {"problem": 32, "code": "#(loop [res [] ens %]\n   (if (empty? ens)\n     (into () (into () res))\n     (recur (conj (conj res (first ens)) (first ens)) (rest ens))\n   )\n)", "user": "55acb648e4b03311e7b73296"}, {"problem": 32, "code": "mapcat #(list %1 %1)", "user": "532dbd3ce4b019098a6f8b40"}, {"problem": 32, "code": "#(loop [coll % acc nil]\n   (if (empty? coll)\n     acc\n     (let [elt (last coll)]\n       (recur (butlast coll) (conj acc elt elt)))))", "user": "55afc197e4b002ce9d5cbc18"}, {"problem": 32, "code": "(fn [x] (reduce #(concat %1 %2 %2) nil (partition-by identity x)))", "user": "55b0ecb7e4b002ce9d5cbc27"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "55ae6367e4b03311e7b732bc"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "5595c60ee4b0c79f6e1db96f"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5537cbaee4b09218d5f44fd3"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "53cb5559e4b00fb29b2212d2"}, {"problem": 32, "code": "(fn wat [coll]\n  (let [s (seq coll)]\n    (if s\n      (let [[x & xs] s]\n        (cons x\n              (cons x (wat xs))))\n      ())))", "user": "54dcbc6ee4b024c67c0cf787"}, {"problem": 32, "code": "#(interleave % %)", "user": "5573a505e4b0aa18f790f3fa"}, {"problem": 32, "code": "(fn [xs] (apply concat (map #(repeat 2 %) xs)))", "user": "55b25970e4b0da326a65cf7e"}, {"problem": 32, "code": "(partial mapcat (fn [a] [a a]))", "user": "55aa7c5ce4b0988bba2ad94d"}, {"problem": 32, "code": "(fn [s] \n  (interleave s s)\n )", "user": "55b3e8aee4b01b9910ae2977"}, {"problem": 32, "code": "(fn [sq] \n  (reduce (fn [accum el] \n            (concat accum (take 2 (iterate identity el)))) \n          [] \n          sq))", "user": "55b527cbe4b01b9910ae2985"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "54236ce1e4b01498b1a71ad1"}, {"problem": 32, "code": "(fn [s]\n    (loop [r [] v s ]\n        (if (seq v)\n            (recur (conj r (first v) (first v)) (rest v))\n            (seq r))))", "user": "55975569e4b031d6649c9b8e"}, {"problem": 32, "code": "#(interleave % %)", "user": "55b1c62de4b0da326a65cf72"}, {"problem": 32, "code": "#(sort (seq (into % %)))", "user": "55278187e4b0ffed3738f92d"}, {"problem": 32, "code": "; mapcat #(list % %)\n\nmapcat #(repeat 2 %)", "user": "53e9dce1e4b036ad0777e4bc"}, {"problem": 32, "code": "(fn [coll]\n   (reduce #(conj %1 %2 %2) (vector) coll))", "user": "55b54ecbe4b01b9910ae2987"}, {"problem": 32, "code": "reduce (fn [x y]\n         (conj x y y))\n  []", "user": "557f748ae4b05c286339e0df"}, {"problem": 32, "code": "#(interleave %1 %1)", "user": "55b1ab40e4b0da326a65cf6e"}, {"problem": 32, "code": "(fn [x] \n  (loop [in x out '()]\n    (if (empty? in)\n      out\n      (recur (rest in) (concat out (repeat 2 (first in))) ))))", "user": "55b705fce4b01b9910ae29a0"}, {"problem": 32, "code": "(fn [x] \n\t(reverse(reduce #(cons %2 (cons %2 %1)) '() x))\n)", "user": "55b60518e4b01b9910ae298e"}, {"problem": 32, "code": "reduce (fn [res it] (conj res it it)) []", "user": "55b77c7ce4b01b9910ae29a3"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "55ae383fe4b03311e7b732b7"}, {"problem": 32, "code": "(fn [coll]\n\t(apply concat (map #(vector % % ) coll)))", "user": "556204c2e4b0c656e3ff17d2"}, {"problem": 32, "code": "(fn [col] (apply list (reduce #(conj %1 %2 %2) [] col)))", "user": "55afa977e4b002ce9d5cbc15"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []\n; #(interleave %1 %1)", "user": "55b8c339e4b01b9910ae29b9"}, {"problem": 32, "code": "(fn[coll] (reduce #(conj %1 %2 %2) [] coll))", "user": "55b8d186e4b01b9910ae29ba"}, {"problem": 32, "code": "(fn duplicate-seq [coll]\n  (if (empty? coll)\n    coll\n    (cons (first coll) (cons (first coll) (duplicate-seq (rest coll))))))", "user": "55b69e37e4b01b9910ae2999"}, {"problem": 32, "code": "#(mapcat (partial repeat 2) %)", "user": "551d8796e4b07993ea3788ec"}, {"problem": 32, "code": "(fn dupli [items]\n  (loop [acc (list)\n         [curr & rest-items] items]\n    (if (nil? curr)\n      (reverse acc)\n      (recur \n       (conj acc curr curr)\n       rest-items))))", "user": "55bbfd60e4b01b9910ae29ed"}, {"problem": 32, "code": "(partial mapcat #(list % %))", "user": "4f2861eee4b0d6649770a017"}, {"problem": 32, "code": "#(apply concat (map vector % %))", "user": "549dfe40e4b0f3d1d8e70f9a"}, {"problem": 32, "code": "#(mapcat (partial repeat 2) %)", "user": "55b1e9e7e4b0da326a65cf74"}, {"problem": 32, "code": "#(mapcat (fn [x] [x x]) %)", "user": "55bbd179e4b01b9910ae29eb"}, {"problem": 32, "code": "(partial mapcat (juxt identity identity))", "user": "55be39f9e4b01b9910ae2a06"}, {"problem": 32, "code": "(fn [coll]\n  (reverse\n   (reduce #(cons %2 (cons %2 %1)) '() coll)))", "user": "55962e92e4b0c79f6e1db976"}, {"problem": 32, "code": "(fn \n  [x] \n  (interleave\n   x\n   x))", "user": "55b3c03ee4b01b9910ae2975"}, {"problem": 32, "code": "#(reduce (fn [out item] (conj (conj out item) item)) [] %)", "user": "5582dfb6e4b05c286339e10d"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "55b107fee4b002ce9d5cbc2a"}, {"problem": 32, "code": "(fn [coll]\n  (loop [to-consume coll\n         to-create '()]\n    (if (empty? to-consume)\n      (reverse to-create)\n      (recur (rest to-consume) (conj to-create \n                                     (first to-consume)\n                                     (first to-consume))))))", "user": "557775a3e4b05c286339e084"}, {"problem": 32, "code": "(fn my-duplicate\n  [l]\n  (if (empty? l)\n    (empty l)\n    (conj (my-duplicate (rest l)) (first l) (first l))))", "user": "5599abc9e4b031d6649c9bb0"}, {"problem": 32, "code": "(fn\n  [rcd]\n  (reduce \n    #(reduce conj %1 %2)\n    []\n    (map #(list %1 %2) rcd rcd)))", "user": "55a0d79fe4b0acc240e31502"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "54534c83e4b0e397800069cd"}, {"problem": 32, "code": "#(mapcat (fn [x] [x x]) %)", "user": "50978ca4e4b00ad8bab4e966"}, {"problem": 32, "code": "#(interleave % %)", "user": "55bfc39ee4b01b9910ae2a1a"}, {"problem": 32, "code": "(fn duplicateElements\n  [collection]\n  \"Returns a function which contains two of each element in the given\n  collection, in the same order.\"\n  (mapcat #(conj '() % %) collection))", "user": "55a9e0fee4b0988bba2ad945"}, {"problem": 32, "code": "(fn [xs] (mapcat #(repeat 2 %) xs))", "user": "517e9526e4b09104ecebe7e2"}, {"problem": 32, "code": "(fn [coll] \n  (reduce #(conj %1 %2 %2) [] coll))", "user": "55c0afa5e4b01b9910ae2a27"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "55c10409e4b01b9910ae2a2c"}, {"problem": 32, "code": "#(interleave % %)", "user": "559454f2e4b0c79f6e1db952"}, {"problem": 32, "code": "#(interleave % %)", "user": "55b1b67ce4b0da326a65cf6f"}, {"problem": 32, "code": "#(apply concat (map (fn [n] [n n]) %))", "user": "55bc2322e4b01b9910ae29f0"}, {"problem": 32, "code": "(fn [s]\n  (loop [xs s result []]\n    (if (empty? xs)\n      result\n      (recur (next xs) (conj result (first xs) (first xs))))))", "user": "549c6792e4b0f3d1d8e70f8b"}, {"problem": 32, "code": "(fn [x] (mapcat #(list % %) x))", "user": "4e8a170c535d3e98b802328f"}, {"problem": 32, "code": "#(reverse (into '() (interleave % %)))", "user": "55c1eb52e4b0e31453f64970"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "55c37594e4b0e31453f64989"}, {"problem": 32, "code": "mapcat (fn [x] (list x x ))", "user": "55c40a8de4b0e31453f64993"}, {"problem": 32, "code": "reduce \n  #(conj (vec %1) %2 %2)\n  []", "user": "55c3149de4b0e31453f64987"}, {"problem": 32, "code": "(fn double-elements [a-seq]\n   (if (empty? a-seq)\n      '()\n      (conj (conj (double-elements (rest a-seq)) (first a-seq)) (first a-seq))\n  )\n)", "user": "55c387e4e4b0e31453f6498b"}, {"problem": 32, "code": "(fn [s]\n  (reduce\n    (fn [a b]\n      (concat a (list b b))\n    )\n    '()\n    s\n  )\n)", "user": "55bb7546e4b01b9910ae29e7"}, {"problem": 32, "code": "(fn [xs] (interleave xs xs))", "user": "55c4e48be4b0e31453f649a7"}, {"problem": 32, "code": "mapcat #(vector % %)", "user": "55c5820be4b0e31453f649b0"}, {"problem": 32, "code": "reduce (fn a [m b] (conj m b b)) []", "user": "55ac16a0e4b03311e7b73291"}, {"problem": 32, "code": "#(interleave % %)", "user": "55c652dde4b0e31453f649bd"}, {"problem": 32, "code": "(fn [x] (apply concat (map (fn [y] [y y]) x)))", "user": "54ef7568e4b024c67c0cf885"}, {"problem": 32, "code": "(fn [coll]\n  (->> coll\n       (seq)\n       (reduce \n         #(conj (conj %1 %2) %2)\n         '())\n       (reverse)\n       )\n  )", "user": "553f70cae4b0a04f792994f8"}, {"problem": 32, "code": "(fn [coll]\n  (reduce #(conj % %2 %2) [] coll))", "user": "5512aca6e4b055c2f668d4b4"}, {"problem": 32, "code": "(fn [s]\n  (reduce (fn [acc x] (conj acc x x)) [] s))", "user": "55c58c0be4b0e31453f649b3"}, {"problem": 32, "code": "#(interleave % %)", "user": "5512cd55e4b055c2f668d4ba"}, {"problem": 32, "code": "(fn [xs]\n  (-> (loop [items xs\n             result '()]\n        (if (empty? items)\n          result\n          (recur (rest items) (conj result (first items) (first items)))))\n      reverse))", "user": "55c2b95de4b0e31453f64980"}, {"problem": 32, "code": "(fn duplicate [data]\n  (loop [[head & tail :as data] data\n                         acc []]\n    (if-not (empty? data)\n      (recur tail (conj (conj acc head)  head))\n      acc\n    )\n  )\n)", "user": "55c461d3e4b0e31453f64999"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "55b45825e4b01b9910ae297c"}, {"problem": 32, "code": "reduce #(concat %1 (list %2 %2)) '()", "user": "559d3d22e4b0ec2b359424da"}, {"problem": 32, "code": "#(interleave % %)", "user": "54b817eee4b0ed20f4ff6e93"}, {"problem": 32, "code": "#(interleave (seq %) (seq %))", "user": "55c66590e4b0e31453f649c0"}, {"problem": 32, "code": "#(interleave % %)", "user": "55c77070e4b0e31453f649d0"}, {"problem": 32, "code": "#(interleave % %)", "user": "55c1fa2be4b0e31453f64971"}, {"problem": 32, "code": "(fn [in] (reverse (reduce #(conj %1 %2 %2) '() in)))", "user": "54010363e4b0de5c4184861d"}, {"problem": 32, "code": "(fn [inputStream] (let [duped (map (fn [x]  (list x x))\n                  inputStream\n                  )]\n(reduce concat '() duped)\n))", "user": "51fea7d7e4b0f1313d468a74"}, {"problem": 32, "code": "mapcat #(vector % %)", "user": "55a372f1e4b0acc240e31537"}, {"problem": 32, "code": "#(apply concat (map vector % %))", "user": "55c423e1e4b0e31453f64994"}, {"problem": 32, "code": "(fn [coll]\n  (reduce #(conj %1 %2 %2) [] coll))", "user": "55c734a5e4b0e31453f649cb"}, {"problem": 32, "code": "#(interleave % %)", "user": "5586f418e4b059ccff29b1de"}, {"problem": 32, "code": "mapcat #(vector % %)", "user": "55ca4273e4b0e31453f649f9"}, {"problem": 32, "code": "(fn repeat-twice [col] (reduce #(concat %1 (repeat 2 %2))  []  col))", "user": "55c9bc1ee4b0e31453f649f1"}, {"problem": 32, "code": "; mapcat #(repeat 2 %)\nmapcat (fn [x]\n  (repeat 2 x))", "user": "55b7f263e4b01b9910ae29b4"}, {"problem": 32, "code": "(fn doub [x]\r\n  (loop [[f & r] x\r\n         res []]\r\n    (if (nil? f)\r\n      res\r\n      (recur r (conj res f f)))))", "user": "546e1142e4b00cfc9eacc199"}, {"problem": 32, "code": "mapcat (fn [n] [n n])", "user": "55caabd1e4b0e31453f649fb"}, {"problem": 32, "code": "#(interleave % %)", "user": "55cae949e4b0e31453f649fe"}, {"problem": 32, "code": "#(->> % (map (fn [x] [x x])) (apply concat))", "user": "55b39523e4b01b9910ae2973"}, {"problem": 32, "code": "(fn [x] (interleave x x ))", "user": "5578ba3ae4b05c286339e08c"}, {"problem": 32, "code": "(fn duplicate [coll]\n  (if  (empty? coll) coll\n       (conj (duplicate(rest coll)) (first coll)(first coll))\n       )\n  )", "user": "55a65872e4b09e57187da299"}, {"problem": 32, "code": "#(reduce (fn [acc v] (conj acc v v)) [] %)", "user": "55c20bd0e4b0e31453f64972"}, {"problem": 32, "code": "(fn [seq] (interleave seq seq))", "user": "54f4ab86e4b0f2f3c5226e84"}, {"problem": 32, "code": "(fn [a] (reduce concat [] (map #(list % %) a)))", "user": "4eb171d7535d7eef30807340"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "55b22c33e4b0da326a65cf79"}, {"problem": 32, "code": "#(interleave % %)", "user": "55cdd76ae4b0e31453f64a20"}, {"problem": 32, "code": "#( reduce concat (map list % %   ) )", "user": "55cc56bee4b0e31453f64a0f"}, {"problem": 32, "code": "#(apply concat (map list % %))", "user": "55bedd93e4b01b9910ae2a0d"}, {"problem": 32, "code": "(fn\n  [s]\n  (mapcat #(vector % %) s))", "user": "556e3b73e4b09a3098a52514"}, {"problem": 32, "code": "#(interleave % %)", "user": "541ddadbe4b01498b1a71a84"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "55cdc576e4b0e31453f64a1f"}, {"problem": 32, "code": "#(interleave % %)", "user": "5452a300e4b0e397800069c7"}, {"problem": 32, "code": "#(->> %1\n      (map (fn [x] (list x x)))\n      (apply concat))", "user": "55627de1e4b0c656e3ff17d9"}, {"problem": 32, "code": "#(interleave %1 %1)", "user": "55d0a3c4e4b0e31453f64a3e"}, {"problem": 32, "code": "#(apply concat (map (fn [e] `(~e ~e)) %))", "user": "55d0e76ae4b0e31453f64a40"}, {"problem": 32, "code": "(fn re\n  [coll]\n  (loop [c coll\n         new []]\n    (if (empty? c)\n      new\n      (let [f (first c)]\n        (recur (rest c) (conj new f f))))))", "user": "55bd87ede4b01b9910ae29fe"}, {"problem": 32, "code": "#(interleave % %)", "user": "55773cbae4b05c286339e07f"}, {"problem": 32, "code": "reduce #(conj % %2 %2) []", "user": "55ccdc6be4b0e31453f64a18"}, {"problem": 32, "code": "(fn [values]\n  (loop [[current & remainder] values\n         result []]\n    (let [result (conj (conj result current) current)]\n    (if (empty? remainder)\n      result\n      (recur remainder result)))))", "user": "55d06bcbe4b0e31453f64a3a"}, {"problem": 32, "code": "(fn [x]\n  (loop [x   x \n         acc '()] \n    (if (empty? x) \n      (reverse acc) \n      (recur (next x) (conj acc (first x) (first x))))))", "user": "55bb6a19e4b01b9910ae29e5"}, {"problem": 32, "code": "(fn [l] (reduce concat (map #(repeat 2 %) l)))", "user": "55d1a721e4b0e31453f64a47"}, {"problem": 32, "code": "#(interleave % %)", "user": "55ba33afe4b01b9910ae29cb"}, {"problem": 32, "code": "#(reduce (fn [a b] (conj a b b)) [] %)", "user": "55d1f231e4b0e31453f64a4e"}, {"problem": 32, "code": "#(reduce concat (map (fn [element] (repeat 2 element)) %1))", "user": "5589a941e4b059ccff29b207"}, {"problem": 32, "code": "#(interleave % %)", "user": "55d1b565e4b0e31453f64a49"}, {"problem": 32, "code": "(fn [x]\n  (apply concat (map (partial repeat 2) x)))", "user": "55c68089e4b0e31453f649c4"}, {"problem": 32, "code": "#(->> % (map (fn [x] (list x x))) (apply concat))", "user": "55a19e19e4b0acc240e31515"}, {"problem": 32, "code": "(fn [x] (interleave x x))", "user": "559067ace4b0277789237670"}, {"problem": 32, "code": "reduce #(conj % %2 %2) []", "user": "55d332f5e4b0e31453f64a5f"}, {"problem": 32, "code": "reduce #(conj % %2 %2) []", "user": "55236ad6e4b0882d96d091b1"}, {"problem": 32, "code": "#(mapcat (fn [a] [a a]) %)", "user": "55b0f5bfe4b002ce9d5cbc28"}, {"problem": 32, "code": "(fn [c] (mapcat #(list % %) c))", "user": "55d204abe4b0e31453f64a4f"}, {"problem": 32, "code": "(fn [coll] (mapcat #(list % %) coll))", "user": "5563b88be4b0c656e3ff17f5"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "54864662e4b0e286459a11b8"}, {"problem": 32, "code": "(fn [l]\n  (loop [[e & more :as lst] l\n         acc []]\n    (if (empty? lst)\n      acc\n      (recur more (conj acc e e)))))", "user": "55d4dddde4b0e31453f64a7f"}, {"problem": 32, "code": "(fn [s]\n  (loop [i (first s) r (rest s) result []]\n    (if (empty? r)\n      (conj (conj result i) i)\n      (recur (first r) (rest r) (conj (conj result i) i)))))", "user": "4e72a717535d5021c1a89665"}, {"problem": 32, "code": "reduce #(concat %1 [%2 %2]) []", "user": "5561d2c2e4b0c656e3ff17cd"}, {"problem": 32, "code": "(partial mapcat #(vector % %))", "user": "55d6a2ebe4b0e31453f64a9a"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "55d5ee3fe4b0e31453f64a92"}, {"problem": 32, "code": "(fn stutter [xs]\n  (let [y (first xs), ys (rest xs)]\n    (cond\n     (empty? ys) (list y y)\n     :else (concat (list y y) (stutter ys)))))", "user": "55d5e80ee4b0e31453f64a91"}, {"problem": 32, "code": "(fn [coll]\n  (mapcat #(list % %) coll))", "user": "55b42706e4b01b9910ae297b"}, {"problem": 32, "code": "#(interleave % %)", "user": "55bd6734e4b01b9910ae29fd"}, {"problem": 32, "code": "(fn [my-seq] (mapcat #(repeat 2 %) my-seq))", "user": "55d95be7e4b0e31453f64ac9"}, {"problem": 32, "code": "#(mapcat (fn [coll] (repeat 2 coll)) %)", "user": "55d85ac9e4b0e31453f64ab2"}, {"problem": 32, "code": "(fn [x]\n    (let [iter (fn [seq new-seq]\n                 (let [a (first seq)\n                       b (rest seq)]\n                   (if (empty? seq)\n                     new-seq\n                     (recur b (conj new-seq a a)))))]\n      (reverse (iter x '()))))", "user": "55d29fb6e4b0e31453f64a59"}, {"problem": 32, "code": "(fn [coll] (interleave coll coll))", "user": "52ca7711e4b071a8d36bd3e3"}, {"problem": 32, "code": "#(interleave % %)", "user": "55d9d7e3e4b0e31453f64acd"}, {"problem": 32, "code": "(fn [x] (reduce (fn [r v] (conj (conj r v) v)) [] x))", "user": "55d9f941e4b0e31453f64ad0"}, {"problem": 32, "code": "mapcat (fn [e] [e e])", "user": "55da1ebce4b0e31453f64ad2"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "55d045cde4b0e31453f64a38"}, {"problem": 32, "code": "#(interleave % %)", "user": "55c3f0c6e4b0e31453f64990"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "55dab5c8e4b0e31453f64ada"}, {"problem": 32, "code": "#(interleave % %)", "user": "4f435ee8e4b0d7d3c9f3fd1f"}, {"problem": 32, "code": "(fn [list] (reduce (fn [x y] (conj x y y)) [] list))", "user": "55d79b87e4b0e31453f64aa8"}, {"problem": 32, "code": "#(interleave % %)", "user": "55d50a38e4b0e31453f64a80"}, {"problem": 32, "code": "reduce #(into % [%2 %2]) []", "user": "55d8eed3e4b0e31453f64ac3"}, {"problem": 32, "code": "(fn [x]\n  (apply concat (for [i x]\n    [i i])))", "user": "55912230e4b027778923767a"}, {"problem": 32, "code": "#(interleave % %)", "user": "553c136ae4b09218d5f45012"}, {"problem": 32, "code": "(fn [coll] (reduce concat(map #(list % %) coll)))", "user": "5446158ce4b032a45b8693a6"}, {"problem": 32, "code": "(fn [s] (loop [left-to-process s final-sequence '()]\n            (if (empty? left-to-process)\n              final-sequence\n              (recur (rest left-to-process) (concat final-sequence [(first left-to-process) (first left-to-process)]))\n              )\n            )          \n          )", "user": "55c5261ee4b0e31453f649ae"}, {"problem": 32, "code": "#(interleave % %)", "user": "54722c55e4b094393f72dd74"}, {"problem": 32, "code": "mapcat (fn [x] [x x])", "user": "55db7e15e4b0e31453f64ae8"}, {"problem": 32, "code": "(fn dup [x] ( reduce (fn [init,y] (conj (conj init y) y )) [] x ))", "user": "55d35a01e4b0e31453f64a63"}, {"problem": 32, "code": "(fn [a] (reverse (reduce #(conj  %1 %2 %2) '() a)))", "user": "500e3238e4b068062f6e8d8f"}, {"problem": 32, "code": "mapcat #([[% %]]0)", "user": "55dab408e4b0e31453f64ad9"}, {"problem": 32, "code": "#(sort (into % %))", "user": "55dcb06ee4b050e68259b3b9"}, {"problem": 32, "code": "(fn [xs] (mapcat (fn [x] [x x]) xs))", "user": "514a3fa5e4b0829bd132edb6"}, {"problem": 32, "code": "#(reverse (reduce (fn [s, v] (conj (conj s v) v)) '() %))", "user": "55dd91c9e4b050e68259b3ca"}, {"problem": 32, "code": "mapcat (partial repeat 2)", "user": "553bda0de4b09218d5f4500b"}, {"problem": 32, "code": "(fn [coll]\n  (mapcat list coll coll))", "user": "54145050e4b01498b1a719ea"}, {"problem": 32, "code": "#(interleave % %)", "user": "55ded9fde4b050e68259b3e7"}, {"problem": 32, "code": "(fn [xs] \n  (apply concat (mapv (partial repeat 2) xs)))", "user": "55d87324e4b0e31453f64ab4"}, {"problem": 32, "code": "(fn [coll]\n  (reduce concat (map #(take 2 (repeat %)) coll)))", "user": "550a2c61e4b06e50f9beb12b"}, {"problem": 32, "code": "mapcat (fn [x] (list x x))", "user": "55dc2ad1e4b050e68259b3ac"}, {"problem": 32, "code": "(fn [x] (reduce (fn [memo a] (conj memo a a)) [] x))", "user": "55d44af5e4b0e31453f64a74"}, {"problem": 32, "code": "#(interleave % %)", "user": "55d2dd27e4b0e31453f64a5b"}, {"problem": 32, "code": "(fn [things] (reduce (fn [acc el] (conj acc el el)) [] things)\n  )", "user": "55ddb3f4e4b050e68259b3cd"}, {"problem": 32, "code": "(fn [x]\n  (loop [li x\n         acc []]\n      (if-not li acc (let [f (first li)\n                           l (next li)]\n                          (recur l (conj (conj acc f) f))))\n    ))", "user": "55deeface4b050e68259b3ea"}, {"problem": 32, "code": "(fn [x] (reduce (fn [l y] (conj l y y)) [] x))", "user": "55d42f78e4b0e31453f64a73"}, {"problem": 32, "code": "(fn [input]\n  (loop [in input\n         out []]\n    (if (empty? in)\n      out\n      (recur (rest in)\n             (conj out\n                   (first in) (first in))))))", "user": "55db1696e4b0e31453f64ae1"}, {"problem": 32, "code": "reduce  #(conj %1 %2 %2) []", "user": "55e1d34ae4b050e68259b421"}, {"problem": 32, "code": "(fn dup-seq [lat]\n  (reduce concat (map #(take 2 (repeat %)) lat)))", "user": "55e06858e4b050e68259b40c"}, {"problem": 32, "code": "(fn duplicate\n  [param]\n  (if (empty? (rest param))\n    (list (first param) (first param))\n    (conj (duplicate (rest param)) (first param) (first param))))", "user": "55dfac5fe4b050e68259b3f9"}, {"problem": 32, "code": "#(-> ;; foldl beauty\n  (reduce (fn [acc x]\n              (concat (list x x) acc)) '() %1)\n   reverse)", "user": "55e246c2e4b050e68259b431"}, {"problem": 32, "code": "(fn [x] (reduce concat (map #(list % %) x)))", "user": "55e26417e4b050e68259b433"}, {"problem": 32, "code": "#(interleave %1 %1)", "user": "55d93d24e4b0e31453f64ac6"}, {"problem": 32, "code": "(fn [src-list] (mapcat identity (map #(list %1 %1) src-list)))\n\n\n\n\n;(loop [doubled-elements []\n;       elements-left %]\n;   (if (empty? elements-left)\n;   \tdoubled-elements\n;    (let [[element & remaining] elements-left]\n;      doubled-elements (concat doubled-elements [element element])\n;      (recur doubled-elements remaining))))", "user": "52dc55e2e4b09f7907dd13cd"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "55d74e71e4b0e31453f64aa4"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "534056fce4b085b17e897dac"}, {"problem": 32, "code": "(fn [x] (mapcat vector x x))", "user": "55e20059e4b050e68259b427"}, {"problem": 32, "code": "#(interleave % %)", "user": "55d44dd6e4b0e31453f64a75"}, {"problem": 32, "code": "#(interleave % %)", "user": "4dd5fdb0535d2dad7130b5c5"}, {"problem": 32, "code": "(fn [x] (reverse (reduce #(cons %2 (cons %2 %1)) '() x)))", "user": "5489dd4de4b0e286459a11ef"}, {"problem": 32, "code": "#(loop [coll % results '()]\n   (if (empty? coll)\n     results\n     (let [[head & tail] coll]\n       (recur tail (concat results [head head])))))", "user": "55e2f502e4b050e68259b43c"}, {"problem": 32, "code": "#(mapcat list % %)", "user": "55df3b11e4b050e68259b3ef"}, {"problem": 32, "code": "(fn [coll] (mapcat #(repeat 2 %) coll))", "user": "54c94376e4b045293a27f665"}, {"problem": 32, "code": "(fn [x] (mapcat #(replicate 2 %) x))", "user": "55ce2b6de4b0e31453f64a26"}, {"problem": 32, "code": "#(interleave % %)", "user": "55663e9be4b0c656e3ff182b"}, {"problem": 32, "code": "mapcat (partial repeat 2)", "user": "55e6c3f5e4b050e68259b48c"}, {"problem": 32, "code": "#(interleave % %)", "user": "55e1ddf7e4b050e68259b422"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "55dd0aebe4b050e68259b3bf"}, {"problem": 32, "code": ";(fn dup [s]\n;  (if (empty? s) '()\n;  (cons (first s) (cons (first s) (dup(rest s))))))\n\n;#(mapcat list % %)\n\n#(interleave % %)", "user": "55e1fc42e4b050e68259b424"}, {"problem": 32, "code": "(fn foo [x] (if (empty? x) '() (conj (foo (rest x)) (first x) (first x))))", "user": "55dff80de4b050e68259b402"}, {"problem": 32, "code": "#(interleave % %)", "user": "55aacbeee4b0988bba2ad951"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "55e70e8de4b050e68259b490"}, {"problem": 32, "code": "#(sort (reduce into '() (take 2 (iterate identity %))))", "user": "53d8da61e4b0e771c3025471"}, {"problem": 32, "code": "(fn [x] (apply concat (map #(list % %) x)))", "user": "55cb11e9e4b0e31453f649ff"}, {"problem": 32, "code": "(fn duplicate [l]\n  (if (empty? l)\n    l\n    (concat (list (first l) (first l)) (duplicate (rest l)))))", "user": "55e4487ce4b050e68259b44c"}, {"problem": 32, "code": "reduce #(into % [%2 %2]) []", "user": "4daddc19c9a9d6ed4599dc57"}, {"problem": 32, "code": "reduce #(into %1 [%2 %2]) []", "user": "54cd9519e4b057c6fda3a2a6"}, {"problem": 32, "code": "reduce #(into % [%2 %2]) []", "user": "55e876b9e4b0121d4835fd94"}, {"problem": 32, "code": "(fn [coll]\n  (reverse\n   (reduce #(cons %2 (cons %2 %1)) '() coll)))", "user": "55e4f2cbe4b050e68259b459"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "55e3ae2fe4b050e68259b447"}, {"problem": 32, "code": "(fn [x] \n   (reduce concat\n           (map #(repeat 2 %) x)))", "user": "55dfacb7e4b050e68259b3fc"}, {"problem": 32, "code": "(fn [x] (mapcat vector x x))", "user": "55e2004de4b050e68259b426"}, {"problem": 32, "code": "(fn [l] (apply concat (map #(list %1 %1) l)))", "user": "55e87696e4b0121d4835fd93"}, {"problem": 32, "code": "#(reduce (fn [col e]\n            (conj col e e)\n            ) [] %)", "user": "55b0d315e4b002ce9d5cbc26"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "53959edde4b0b51d73faaed8"}, {"problem": 32, "code": "(fn [coll]\n  (reduce (fn [acc x]\n            (concat acc [x] [x]))\n          []\n          coll))", "user": "554bd33ce4b0a04f7929959a"}, {"problem": 32, "code": "(fn [x] \n  (reverse\n   (reduce #(do (conj (conj %1 %2) %2)) () x)))", "user": "55e856bae4b0121d4835fd8d"}, {"problem": 32, "code": "#(interleave % %)", "user": "55d68726e4b0e31453f64a99"}, {"problem": 32, "code": "(fn [args] (reverse\n  (loop [l args\n         result '()]\n    (if (empty? l)\n      result\n      (recur (rest l)\n             (conj\n               (conj result (first l))\n               (first l)))))))", "user": "5530baa5e4b076ab5578f81a"}, {"problem": 32, "code": "#(interleave % %)", "user": "55ea0784e4b0121d4835fda8"}, {"problem": 32, "code": "#(apply concat (map (fn [el] [el el]) %))", "user": "55ea0dc3e4b0121d4835fda9"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "55e9842ae4b0121d4835fda1"}, {"problem": 32, "code": "#(mapcat identity (map vector % %))", "user": "55eb6644e4b0121d4835fdbb"}, {"problem": 32, "code": "(fn [x] (mapcat #(take 2 (repeat %)) x))", "user": "54290a64e4b01498b1a71b36"}, {"problem": 32, "code": "(fn d [l] (if (empty? l) l (conj (d (rest l)) (first l)(first l))))", "user": "55ec1c4ce4b0121d4835fdc4"}, {"problem": 32, "code": "#(sort(into % %))", "user": "55e84475e4b0121d4835fd8b"}, {"problem": 32, "code": "reduce #(concat %1 [%2 %2]) '()", "user": "55dbed2fe4b050e68259b3a6"}, {"problem": 32, "code": "(fn [x]\n  (reduce (fn [v y] (concat v [y y])) [] x))", "user": "500e6ddee4b04a05d36fcc06"}, {"problem": 32, "code": "(fn dup [[x & xs]]\n  (if (empty? xs)\n    [x x]\n    (concat [x x] (dup xs))))", "user": "55eb1410e4b0121d4835fdb8"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "55d9743ae4b0e31453f64aca"}, {"problem": 32, "code": "reduce (fn [a v] (concat a (repeat 2 (identity v)))) ()", "user": "55ead489e4b0121d4835fdb6"}, {"problem": 32, "code": "(fn [s] (mapcat #(repeat 2 %) s))", "user": "55ecb2c0e4b0121d4835fdce"}, {"problem": 32, "code": "mapcat #(vector % %)", "user": "55ecab96e4b0121d4835fdcb"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "55ec04c4e4b0121d4835fdc1"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "55ed962ae4b0121d4835fddd"}, {"problem": 32, "code": "(fn [l] (reverse (reduce (fn [nl x] (conj nl x x)) () l)))", "user": "55ecac8ee4b0121d4835fdcc"}, {"problem": 32, "code": "(fn rep [x] (apply concat (map #(repeat 2 %) x)))", "user": "529c722de4b04e0c58e87b63"}, {"problem": 32, "code": "#(interleave %1 %1)", "user": "558fec41e4b0277789237666"}, {"problem": 32, "code": "(fn [s]\n  (->> s\n       reverse\n       (reduce #(conj (conj %1 %2) %2) '() )\n  )\n )", "user": "55e8a85be4b0121d4835fd98"}, {"problem": 32, "code": "(fn [l] (apply concat (map #(list % %) l)))", "user": "53fc88e7e4b0de5c418485be"}, {"problem": 32, "code": "(fn [v] (loop [[x & xs] v, result []]\n                    (if (nil? x) result \n                        (recur xs (conj result x x) ) )))", "user": "55edc088e4b0121d4835fde0"}, {"problem": 32, "code": "(partial reduce (fn [dup item] (concat dup (list item item))) '())", "user": "55f014ebe4b06e875b46ce1b"}, {"problem": 32, "code": "mapcat #(vector % %)", "user": "55e20451e4b050e68259b428"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "55f06183e4b06e875b46ce23"}, {"problem": 32, "code": "#(interleave % %)", "user": "5390347de4b0b51d73faae96"}, {"problem": 32, "code": "(fn [coll]\n   (mapcat identity \n           (map (fn [x] (repeat 2 x)) coll)))", "user": "55ec1048e4b0121d4835fdc3"}, {"problem": 32, "code": "#(reduce (fn [container x] (conj (conj container x) x)) [] %)", "user": "55ef9c9de4b066087aa94537"}, {"problem": 32, "code": "(fn [i] (interleave i i))", "user": "51319a53e4b06942423563c8"}, {"problem": 32, "code": "#(reduce (fn [res elt] (conj res elt elt)) [] %)", "user": "55eaca20e4b0121d4835fdb4"}, {"problem": 32, "code": "(fn dup [s] (mapcat (fn [x] [x x]) s))", "user": "5461dc79e4b01be26fd746a8"}, {"problem": 32, "code": "#(sort (apply concat (take 2 (repeat %))))", "user": "55f27bf9e4b06e875b46ce45"}, {"problem": 32, "code": "(fn me [coll]\n  (if \n    (empty? coll)\n    coll\n    (conj (me (rest coll)) (first coll) (first coll))))", "user": "55f03fb5e4b06e875b46ce1f"}, {"problem": 32, "code": "(fn duplicate [coll]\n   ((fn dup_inner [coll acc]\n      (if (empty? coll)\n      acc\n      (recur (next coll) (conj acc (first coll) (first coll)))))\n    coll []))", "user": "55f04940e4b06e875b46ce21"}, {"problem": 32, "code": "(fn[l](mapcat #(list % %)l))", "user": "5505d137e4b086ebe8a79c8c"}, {"problem": 32, "code": "#(interleave % %)", "user": "4f5eda39e4b0030a34fb2b56"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "52475451e4b05ef8e38e6362"}, {"problem": 32, "code": "#(interleave %%)", "user": "55f2fdc3e4b06e875b46ce51"}, {"problem": 32, "code": "mapcat #(list %1 %1)", "user": "539e717fe4b0ca733b974488"}, {"problem": 32, "code": "(fn [ls] (interleave ls ls))", "user": "55df5feae4b050e68259b3f1"}, {"problem": 32, "code": "#(interleave % %)", "user": "55f20e4be4b06e875b46ce40"}, {"problem": 32, "code": "(fn [arr] (reduce concat (map #(repeat 2 %) arr)))", "user": "54d05a9de4b0e8a36923e5c7"}, {"problem": 32, "code": "reduce #(concat % [%2 %2]) []", "user": "55f5625de4b06e875b46ce86"}, {"problem": 32, "code": "mapcat #(list %1 %1)", "user": "55a161d1e4b0acc240e31511"}, {"problem": 32, "code": "reduce (fn [res x] (conj (conj res x) x)) []", "user": "55f5b657e4b06e875b46ce8c"}, {"problem": 32, "code": "#(for [x %1 y [1 2]] x)", "user": "55efc44ee4b066087aa9453e"}, {"problem": 32, "code": "(fn [xs]\n  (interleave xs xs))", "user": "55e7fc2ce4b0121d4835fd86"}, {"problem": 32, "code": "(fn dup [x] (apply concat (for [v  x] [v v])))", "user": "55f04526e4b06e875b46ce20"}, {"problem": 32, "code": "#(loop [counter 0\n        coll2 '()]\n   (if (= (count %) (count coll2))\n     (sort (concat % coll2))\n     (recur (inc counter)\n            (cons (nth % counter) coll2))))", "user": "55eeeb81e4b0121d4835fdf7"}, {"problem": 32, "code": "(fn [c] (reduce  (fn[e1 e2] (conj (conj e1 e2) e2)) [] c))", "user": "55809cb9e4b05c286339e0ef"}, {"problem": 32, "code": "reduce (fn [col e] (conj col e e)) []", "user": "55e59b67e4b050e68259b46f"}, {"problem": 32, "code": "#(interleave % %)", "user": "55ed71dae4b0121d4835fdd9"}, {"problem": 32, "code": "(fn x [coll] \n  (if (= coll '()) \n      '()\n      (cons (first coll) (cons (first coll) (x (rest coll))))))", "user": "55f5c118e4b06e875b46ce8e"}, {"problem": 32, "code": "#(mapcat (fn [a] [a, a]) %)", "user": "542c56aae4b0dad94371f2a4"}, {"problem": 32, "code": "#(interleave % %)", "user": "55e5c852e4b050e68259b474"}, {"problem": 32, "code": "(fn [s]\n  (loop [r (rest s)\n         acc (conj () (first s) (first s))]\n    (if (empty? r)\n      (reverse acc)\n      (recur (rest r) (conj acc (first r) (first r))))))", "user": "4ebbff41535dfed6da9c6d78"}, {"problem": 32, "code": "(fn [xxx](reduce #(concat %1 [%2 %2]) [] xxx))", "user": "55f01316e4b06e875b46ce1a"}, {"problem": 32, "code": "(fn [coll] (loop [c coll r []] (if (empty? c) r (recur (rest c) (conj (conj r (first c)) (first c))))))", "user": "55eeb37ae4b0121d4835fdf3"}, {"problem": 32, "code": "(fn [v]\n  (reduce #(conj %1 %2 %2) [] v))", "user": "55f2d4ede4b06e875b46ce4c"}, {"problem": 32, "code": "(fn dup [x]\n  (reduce #(conj %1 %2 %2) [] x))", "user": "55f7ebeae4b06e875b46ceb7"}, {"problem": 32, "code": "#(loop [[head & rest] % c []] (if (nil? rest) (conj c head head) (recur rest (conj c head head))))", "user": "55f7dc24e4b06e875b46ceb3"}, {"problem": 32, "code": "#(interleave % %)", "user": "558ee1c9e4b0277789237659"}, {"problem": 32, "code": "#(apply concat (for [x %] [x x]))", "user": "55f7a03de4b06e875b46ceae"}, {"problem": 32, "code": "(fn [x] (mapcat #(repeat 2 %) x))", "user": "55e5f668e4b050e68259b47d"}, {"problem": 32, "code": "(fn [col]\n  (loop [res []\n         n 0]\n    (if (= n (count col))\n      res\n      (recur (conj res (nth col n) (nth col n))\n             (inc n)))))", "user": "5541fa50e4b0a04f79299515"}, {"problem": 32, "code": "(fn [x] (interleave x x))", "user": "55ef12cfe4b0121d4835fdfc"}, {"problem": 32, "code": "(fn dupl [seq]\n    (if (empty? seq) \n      '()\n      (cons (first seq) (cons (first seq) (dupl (rest seq))))))", "user": "55e3e7a8e4b050e68259b44a"}, {"problem": 32, "code": "#(interleave % %)", "user": "55eb6352e4b0121d4835fdba"}, {"problem": 32, "code": "(fn [s] (seq (reduce #(conj %1 %2 %2) [] s)))", "user": "55f9c245e4b03cbcff9738ca"}, {"problem": 32, "code": "(fn [s]\n  (reduce #(conj (conj %1 %2) %2) [] s)\n  \n  \n  )", "user": "55f8fd70e4b03cbcff9738bc"}, {"problem": 32, "code": "(fn [coll]\n  (mapcat #(repeat 2 %) coll))", "user": "55f7e056e4b06e875b46ceb4"}, {"problem": 32, "code": "(fn [col] (reduce #(conj %1 %2 %2) [] col))", "user": "55f6f1d3e4b06e875b46cea0"}, {"problem": 32, "code": "(fn dup [s]\n  (loop [in s\n         out '()]\n    (if (empty? in) (reverse out)\n        (recur (rest in) (conj out (first in) (first in))))))", "user": "55f8180fe4b06e875b46ceba"}, {"problem": 32, "code": "(fn [lst]\n  (loop [in lst\n         out []]\n    (if (empty? in)\n      out\n      (let [head (first in)]\n        (recur (rest in) (conj out head head))))))", "user": "55fb1c77e4b0f488688e065c"}, {"problem": 32, "code": "(fn [c]\n  (apply \n   concat\n   (map \n    #(vector % %) \n    c)))", "user": "53de7484e4b0d874e779ae35"}, {"problem": 32, "code": "(fn [xs]\n  (loop [xs xs acc [] ]\n    (if (seq xs)\n      (recur (rest xs) (conj acc (first xs) (first xs)))\n      acc)))", "user": "55f90d76e4b03cbcff9738bd"}, {"problem": 32, "code": "(fn [c]\n  (mapcat #(vector % %) c))", "user": "55fbf6cae4b0f488688e066c"}, {"problem": 32, "code": "(fn [coll]\n  (reverse\n    (loop [c coll accum nil]\n      (if (empty? c) accum\n        (let [head (first c)]\n          (recur (rest c) (concat (list head head) accum)))))))", "user": "55f6e7ece4b06e875b46ce9e"}, {"problem": 32, "code": "#(sort (concat % %))", "user": "55af3e6be4b03311e7b732c7"}, {"problem": 32, "code": "(fn [s] (interleave s s))", "user": "55fb58b2e4b0f488688e0661"}, {"problem": 32, "code": "(fn dupe-seq-elems [xs]\n  (let [l (first xs), r (next xs)]\n    (concat \n      [l, l]\n      (when (seq r)\n        (dupe-seq-elems r)))))", "user": "55ecaee4e4b0121d4835fdcd"}, {"problem": 32, "code": "(fn [n]\n(sort (take (* 2 (count n)) (cycle n))))", "user": "558053b1e4b05c286339e0e9"}, {"problem": 32, "code": "#(reverse (reduce into '() (map (partial replicate 2) %)))", "user": "55e06f82e4b050e68259b40d"}, {"problem": 32, "code": "(fn [x] (mapcat list x x))", "user": "541e2ff8e4b01498b1a71a8a"}, {"problem": 32, "code": "(fn [s] (reduce #(-> %1 (conj %2) (conj %2)) [] s))", "user": "4f5599dfe4b0a7574ea71806"}, {"problem": 32, "code": "#(interleave % %)", "user": "55fc1f05e4b0f488688e066f"}, {"problem": 32, "code": "(fn db [coll] (if (seq coll)\n                (cons (first coll) (cons (first coll) (db (rest coll))))\n                nil))", "user": "55f8b32ae4b03cbcff9738ba"}, {"problem": 32, "code": "(fn [x] (reduce concat (map #(take 2 (repeat %)) x)))", "user": "54bdcde5e4b0ed20f4ff6ee5"}, {"problem": 32, "code": "#(reduce \n\t(fn [l r]\n\t\t(concat l [r r])\n\t)\n\t(cons '() %)\n)", "user": "55fc8f1fe4b0f488688e0675"}, {"problem": 32, "code": "(fn [coll] (apply concat (map #(list % %) coll)))", "user": "55fe7e15e4b00f4cabc57651"}, {"problem": 32, "code": "(fn [s]\n  (loop [result []\n         se s]\n    (if (empty? se)\n      result\n      (recur (conj result (first se) (first se)) (rest se)))))", "user": "55fe997be4b00f4cabc57653"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "55f43228e4b06e875b46ce67"}, {"problem": 32, "code": "#(->> (concat % %)\n      sort)", "user": "55f2b42be4b06e875b46ce4a"}, {"problem": 32, "code": "#(interleave % %)", "user": "55810c73e4b05c286339e0f2"}, {"problem": 32, "code": "reduce (fn [s v] (conj (conj s v) v)) []", "user": "55f1d5dfe4b06e875b46ce38"}, {"problem": 32, "code": "(fn [s]\n  (mapcat #(vector % %) s))", "user": "55fee5e4e4b00f4cabc5765a"}, {"problem": 32, "code": "#(mapcat (fn [s] (repeat 2 s)) %)", "user": "55ee62dde4b0121d4835fdeb"}, {"problem": 32, "code": "(fn [col]\n  (->> col\n       (repeat 2)\n       (apply concat)\n       (sort)))", "user": "53ec14b9e4b036ad0777e500"}, {"problem": 32, "code": "#(interleave % %)", "user": "560039cce4b04bb52996e162"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "4e70eae1535d5021c1a89642"}, {"problem": 32, "code": "(partial mapcat (partial repeat 2))", "user": "50a3ad0ee4b0ceace084d493"}, {"problem": 32, "code": "(fn duplicate [arg] (mapcat #(list % %) arg))", "user": "55f330dde4b06e875b46ce56"}, {"problem": 32, "code": "(fn [sq] (apply concat (map #(conj % (first %)) (map vector sq))))", "user": "55f7c873e4b06e875b46ceb0"}, {"problem": 32, "code": "mapcat (fn [n] [n n])", "user": "56039843e4b04bb52996e1be"}, {"problem": 32, "code": "#(reduce concat (map (juxt identity identity) %))", "user": "55f95de6e4b03cbcff9738c1"}, {"problem": 32, "code": "#(sort (reduce conj % %))", "user": "5603d057e4b0c80df0ca264e"}, {"problem": 32, "code": "(fn f [s]\n  (let [f*\n        (fn [acc s*]\n          (conj acc s* s*))]\n    (reduce f* [] s)))", "user": "55fbcbd1e4b0f488688e0669"}, {"problem": 32, "code": "(fn[v] (reduce #(conj %1 %2 %2) [] v))", "user": "5602ab92e4b04bb52996e1a3"}, {"problem": 32, "code": "#(seq (reduce (fn [acc item]                                                         \n                     (-> acc                                                              \n                         (conj item)                                                      \n                         (conj item)))                                                    \n                   [] %))", "user": "5410499de4b01498b1a719a6"}, {"problem": 32, "code": "(fn [s] (mapcat #(vector %1 %1) s))", "user": "55f081bbe4b06e875b46ce25"}, {"problem": 32, "code": "; second\n#(interleave % %)\n\n; first:\n; mapcat #(list % %)", "user": "55e7d06ee4b050e68259b496"}, {"problem": 32, "code": "#(interleave % %)", "user": "55fbcbb1e4b0f488688e0668"}, {"problem": 32, "code": "#(interleave % %)", "user": "56035afae4b04bb52996e1b9"}, {"problem": 32, "code": "(fn [v] (loop [r v c []] (let [f (first r)] (if (nil? f) c (recur (rest r) (conj c f f))))))", "user": "56013467e4b04bb52996e17f"}, {"problem": 32, "code": "#(interleave % %)", "user": "56047160e4b0c80df0ca265d"}, {"problem": 32, "code": "(fn [coll] (reverse (reduce #(conj (conj %1 %2) %2) '() coll)))", "user": "56041883e4b0c80df0ca2655"}, {"problem": 32, "code": "(fn\n  [a-seq]\n  (interleave a-seq a-seq))", "user": "55e1bb20e4b050e68259b41f"}, {"problem": 32, "code": "mapcat (fn [x] (list x x))", "user": "5579d60ce4b05c286339e099"}, {"problem": 32, "code": "(fn [x]\n  (list* (reduce (fn [r e]\n                   (conj r  e e))\n                 []\n                 x)))", "user": "56038f34e4b04bb52996e1bc"}, {"problem": 32, "code": "(fn [x]\n   (loop [result []\n          [f & others] x]\n     (if (nil? f)\n       result\n       (recur (conj result f f) others))\n     ))", "user": "55ad2379e4b03311e7b732a1"}, {"problem": 32, "code": "#(interleave % %)", "user": "50746e23e4b054001656acd1"}, {"problem": 32, "code": "#(interleave % %)", "user": "55fe8190e4b00f4cabc57652"}, {"problem": 32, "code": "#(mapcat vector %1 %1)", "user": "5606a4ace4b08b23635d3175"}, {"problem": 32, "code": "#(interleave % %)", "user": "55fe5dfae4b00f4cabc57650"}, {"problem": 32, "code": "(fn\n  [xs]\n  (sort (concat xs xs)))", "user": "55e732c5e4b050e68259b492"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "55f3802be4b06e875b46ce5f"}, {"problem": 32, "code": "(fn [x] (->> x (map #(list % %)) (apply concat)))", "user": "560434cfe4b0c80df0ca2658"}, {"problem": 32, "code": "(fn [s]\n  (apply concat (map #(list % %) s)))", "user": "56082adae4b046a4fc0ac008"}, {"problem": 32, "code": "(fn [x] (mapcat (fn [x] (list x x)) x))", "user": "56084e91e4b046a4fc0ac00f"}, {"problem": 32, "code": "mapcat #(seq [% %])", "user": "5361d423e4b0243289761e49"}, {"problem": 32, "code": "(fn [xs] (interleave xs xs))", "user": "5601bb7ee4b04bb52996e195"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "55c6fd60e4b0e31453f649c9"}, {"problem": 32, "code": "mapcat #(vector %1 %1)", "user": "560794bde4b08b23635d3182"}, {"problem": 32, "code": "#(interleave % %)", "user": "55d62a68e4b0e31453f64a96"}, {"problem": 32, "code": "(fn [col]\n  (loop [c col ret []]\n    (if (empty? c)\n      ret\n      (recur (rest c) (conj (conj ret (first c)) (first c))))))", "user": "501fe6fae4b0cb6ebc0a42ef"}, {"problem": 32, "code": "(fn [l]\n  (mapcat #(list % %) l))", "user": "541df0b5e4b01498b1a71a86"}, {"problem": 32, "code": "#(interleave % %)", "user": "55048182e4b086ebe8a79c7c"}, {"problem": 32, "code": "reduce #(conj (conj %1 %2) %2) []", "user": "5609866ee4b0053d1b86c7e3"}, {"problem": 32, "code": "(fn [xs]\n  (reduce #(conj % %2 %2) [] xs))", "user": "52aaabf7e4b0c58976d9ac68"}, {"problem": 32, "code": "(fn dup [seq]\n  (if (empty? seq) seq\n  (concat (repeat 2 (first seq))\n          (dup (rest seq)))))", "user": "5606d71ce4b08b23635d317a"}, {"problem": 32, "code": "(fn duplicate [xs] \n    (interleave xs xs)\n)", "user": "546ddf95e4b00cfc9eacc195"}, {"problem": 32, "code": "mapcat #(vec [% %])", "user": "55e274b4e4b050e68259b436"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "56011393e4b04bb52996e178"}, {"problem": 32, "code": "reduce (fn [coll x] (let [coll (conj coll x)] (conj coll x))) []", "user": "5609816ee4b0053d1b86c7e1"}, {"problem": 32, "code": "#(reduce (fn [c i] (conj (conj c i) i)) '[] %)", "user": "560aed59e4b05f002753df11"}, {"problem": 32, "code": "#(interleave % %)", "user": "560768a0e4b08b23635d317f"}, {"problem": 32, "code": "(partial reduce \n         (fn [l e]\n           (conj (conj l e) e))\n         [])", "user": "56051095e4b08b23635d3162"}, {"problem": 32, "code": "(fn [lst]\n  (reduce concat (map #(take 2 (repeat %)) lst)))", "user": "560a7775e4b05f002753defa"}, {"problem": 32, "code": "(fn [v] (reduce (fn [acc item] (conj acc item item)) (empty v) v))", "user": "5604bcf7e4b08b23635d315a"}, {"problem": 32, "code": "mapcat (juxt identity identity)", "user": "5603c31fe4b04bb52996e1c1"}, {"problem": 32, "code": "mapcat #(concat [%] [%])", "user": "55e2d527e4b050e68259b43a"}, {"problem": 32, "code": "(fn [x] (mapcat  #(vector % %) x))", "user": "560bf666e4b05f002753df24"}, {"problem": 32, "code": "#(interleave % %)", "user": "55fd3004e4b07755b13145f6"}, {"problem": 32, "code": "#(interleave % %)", "user": "560bb1f7e4b05f002753df20"}, {"problem": 32, "code": "(fn [x] (interleave x x))", "user": "560c37b5e4b05f002753df2e"}, {"problem": 32, "code": "#(seq (reduce (fn [c i] (conj (conj c i) i)) [] %))", "user": "560c2e7ce4b05f002753df2b"}, {"problem": 32, "code": "#(interleave % %)", "user": "5606ab32e4b08b23635d3176"}, {"problem": 32, "code": "#(interleave % %)", "user": "55bb1b26e4b01b9910ae29e0"}, {"problem": 32, "code": "(fn [xs] (apply concat (map (fn [x] [x x]) xs)))", "user": "560ae540e4b05f002753df0d"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "560d2a2be4b05f002753df35"}, {"problem": 32, "code": "reduce #(into %1 (take 2 (repeat %2))) []", "user": "5606ea56e4b08b23635d317b"}, {"problem": 32, "code": "#(apply concat (map (fn [a b] (list a b)) % %))", "user": "5602f72fe4b04bb52996e1ae"}, {"problem": 32, "code": "#(interleave % %)", "user": "560a7b46e4b05f002753defb"}, {"problem": 32, "code": "(fn [xs] (mapcat #(repeat 2 %) xs))", "user": "56098ccbe4b0053d1b86c7e4"}, {"problem": 32, "code": "(fn [s] (apply concat (map #(vector % %) s)))", "user": "5601a32ee4b04bb52996e193"}, {"problem": 32, "code": "reduce (fn [ss s]\n         (concat ss `(~s ~s))) '()", "user": "5605b5e9e4b08b23635d316e"}, {"problem": 32, "code": "(fn [x] (interleave x x))", "user": "4f6ba7bce4b07046d9f4efb0"}, {"problem": 32, "code": "mapcat #(vector % %)", "user": "55fa3454e4b03cbcff9738ce"}, {"problem": 32, "code": "(fn [xs] (reduce #(into %1 (repeat 2 %2)) [] xs))", "user": "560e9a2de4b05f002753df52"}, {"problem": 32, "code": "#(reduce\n  (fn [a x]\n    (conj a x x))\n    []\n    %)", "user": "56050f06e4b08b23635d3161"}, {"problem": 32, "code": "(fn fun [x] (if (empty? x) nil (conj (fun (rest x)) (first x) (first x))))", "user": "560ff632e4b05f002753df66"}, {"problem": 32, "code": "#(mapcat (partial repeat 2) %)", "user": "561047eae4b05f002753df6d"}, {"problem": 32, "code": "(fn [coll]\n  (reduce\n   (fn [acc n]\n     (conj acc n n)) [] coll))", "user": "5603c784e4b04bb52996e1c2"}, {"problem": 32, "code": "(fn [xs] (mapcat #(list % %) xs))", "user": "4ff24a1ae4b0678c553fc337"}, {"problem": 32, "code": "(fn [coll] (mapcat #(list % %) coll))\n\n; #(interleave % %) \n; remember that interleave takes colls, so what this does here is\n; (fn [coll] (interleave coll coll))", "user": "560dfa8de4b05f002753df46"}, {"problem": 32, "code": "#(loop [coll % answer []]\n   (if (empty? coll)\n    answer\n    (recur\n     (rest coll)\n     (conj (conj answer (first coll)) (first coll))\n    )\n   )\n  )", "user": "560fe558e4b05f002753df63"}, {"problem": 32, "code": "mapcat (partial repeat 2)", "user": "560e5bace4b05f002753df4d"}, {"problem": 32, "code": "(fn [coll]\n (loop [result [] input coll]\n    (if (nil? (seq input))\n    result\n    (recur (conj result (first input) (first input)) (rest input))\n)))", "user": "55f2c898e4b06e875b46ce4b"}, {"problem": 32, "code": "#(if (= (nth % 0) 1)\n   (list 1 1 2 2 3 3)\n   (if (= (nth % 0) :a)\n     '(:a :a :a :a :b :b :b :b)\n     (if (= (nth % 0) [1 2])\n       '([1 2] [1 2] [3 4] [3 4])\n       )\n     )\n   )", "user": "55f68360e4b06e875b46ce93"}, {"problem": 32, "code": "#(interleave % %)", "user": "54a6645be4b09f271ff37c87"}, {"problem": 32, "code": "#(reverse (reduce (fn [x y] (cons y (cons y x))) '() %))", "user": "5613a96ae4b05f002753dfa4"}, {"problem": 32, "code": "#(reduce (fn[s e](conj s e e))[]%)", "user": "560d491ae4b05f002753df3b"}, {"problem": 32, "code": "#(interleave % %)", "user": "560a9d30e4b05f002753defe"}, {"problem": 32, "code": "#(mapcat (fn [x] [x x]) %)", "user": "54924f64e4b0b312c081ff42"}, {"problem": 32, "code": "#(interleave % %)", "user": "50523848e4b0a561d07d8f1a"}, {"problem": 32, "code": "(fn [seqnc]\n  (mapcat #(list % %) seqnc))", "user": "50a00725e4b08df8156e9e46"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "560843dee4b046a4fc0ac00e"}, {"problem": 32, "code": "#(mapcat (fn f1 [n] [n n]) %)", "user": "56014f55e4b04bb52996e184"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5611196fe4b05f002753df7a"}, {"problem": 32, "code": "(fn dup [l]\n  (mapcat (fn [x] [x x]) l))", "user": "56069006e4b08b23635d3174"}, {"problem": 32, "code": "(fn [coll] (reverse (reduce (fn [coll item] (cons item (cons item coll))) '() coll)))", "user": "55ec4558e4b0121d4835fdc5"}, {"problem": 32, "code": "(fn [x] (interleave x x))", "user": "5614fa1de4b05f002753dfbe"}, {"problem": 32, "code": "#(reduce concat (map vector % %))", "user": "55f09e7be4b06e875b46ce28"}, {"problem": 32, "code": "#(interleave % %)", "user": "5090c8e2e4b0742c82730ad9"}, {"problem": 32, "code": "#(interleave % %)", "user": "555b43dfe4b0deb715856e4d"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "54ed3397e4b024c67c0cf85f"}, {"problem": 32, "code": "(fn [s] (mapcat #(list %1 %1 ) s))", "user": "560b483ee4b05f002753df16"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "5272645de4b03e8d9a4a742c"}, {"problem": 32, "code": "#(sort (concat (identity %) %))", "user": "56163cc1e4b06b1bb21829ff"}, {"problem": 32, "code": "(fn [x] (reduce #(conj %1 %2 %2) [] x))", "user": "5585ff97e4b001b0851d7515"}, {"problem": 32, "code": "(partial mapcat #(vector % %))", "user": "56180d83e4b06b1bb2182a18"}, {"problem": 32, "code": "#(apply concat (map (fn [input](repeat 2 input)) %))", "user": "5617b1c0e4b06b1bb2182a13"}, {"problem": 32, "code": "#(interleave % %)", "user": "5617db88e4b06b1bb2182a16"}, {"problem": 32, "code": "(fn [coll] (mapcat #(list %1 %1) coll))", "user": "4f5e5975e4b0030a34fb2b4d"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "55e0d0eae4b050e68259b413"}, {"problem": 32, "code": "(fn [l] (apply concat (map #(conj [] % %) l)))", "user": "558b41fce4b0277789237628"}, {"problem": 32, "code": "(fn [s]\n  (mapcat #(repeat 2 %) s))", "user": "55bf6dbce4b01b9910ae2a12"}, {"problem": 32, "code": "(fn [coll] (mapcat #(repeat 2 %) coll))", "user": "55d28b38e4b0e31453f64a58"}, {"problem": 32, "code": "#(interleave % %)\n;(fn [ls] (mapcat #(vector % %) ls))", "user": "52f3568fe4b05e3f0be25f0e"}, {"problem": 32, "code": "(fn replicate [lat]\n  (reduce concat (map #(take 2 (repeat %)) lat)))", "user": "55e64c1ee4b050e68259b486"}, {"problem": 32, "code": "(fn [y]\n  (reduce (fn [d item] (concat d [item item])) [] y)\n)", "user": "56152a26e4b05f002753dfc1"}, {"problem": 32, "code": "#(sort ((fn [inc-array] (concat inc-array inc-array)) %))", "user": "56040e58e4b0c80df0ca2654"}, {"problem": 32, "code": "(fn [xs] (->(concat xs xs) sort))", "user": "55e3924ae4b050e68259b445"}, {"problem": 32, "code": "(fn [coll] (mapcat (partial repeat 2) coll))", "user": "560ae7e6e4b05f002753df0e"}, {"problem": 32, "code": "(fn [s] (interleave s s))", "user": "5033ed65e4b062bc5d7ae15a"}, {"problem": 32, "code": "(fn duplicate [seq]\n\t(if (empty? seq) seq\n\t\t(concat (list (first seq) (first seq)) (duplicate (rest seq)))))", "user": "55fcaccfe4b0f488688e0679"}, {"problem": 32, "code": "(fn [xs] (mapcat #(repeat 2 %) xs))", "user": "5619a4d0e4b053970a773afd"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5276f1d0e4b03e8d9a4a74f3"}, {"problem": 32, "code": "(fn [s] (mapcat #(repeat 2 %) s))", "user": "5408ec4de4b0addc1aec66d0"}, {"problem": 32, "code": "(fn [coll]\n  (apply concat (map #(repeat 2 %) coll)))", "user": "5521248fe4b08d5046aa8a69"}, {"problem": 32, "code": "#(mapcat (partial repeat 2) %)", "user": "561ba3e5e4b073c65b0ce3eb"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "55022d7ce4b07d26eda61d84"}, {"problem": 32, "code": "; (fn [s] (reverse (reduce #(conj (conj %1 %2) %2) nil s)))\n#(mapcat list % %)", "user": "561c0278e4b064ca9f4b1691"}, {"problem": 32, "code": "mapcat (partial repeat 2)", "user": "561ca2eae4b064ca9f4b169b"}, {"problem": 32, "code": "#(interleave % %)", "user": "53ab1ef6e4b047364c04444b"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "56182af3e4b06b1bb2182a1b"}, {"problem": 32, "code": "(fn my-replicate [input]\n  (for [x input\n        y (repeat 2 1)]\n    x))", "user": "561bb8dbe4b064ca9f4b1686"}, {"problem": 32, "code": "(fn [xs] (reverse (reduce #(cons %2 (cons %2 %1)) '() xs)))", "user": "55cf0d0ee4b0e31453f64a2b"}, {"problem": 32, "code": "#(interleave % %)", "user": "5615fd5de4b06b1bb21829fd"}, {"problem": 32, "code": "reduce (fn [x y] (concat x (repeat 2 y))) '()", "user": "55e01f4ee4b050e68259b406"}, {"problem": 32, "code": "(fn [n] (interleave n n))", "user": "5616c78ee4b06b1bb2182a07"}, {"problem": 32, "code": "(fn duplicate-seq [seq]\n  (if (empty? seq)\n    []\n    (cons (first seq) (cons (first seq) (duplicate-seq (rest seq))))))", "user": "55fb5b89e4b0f488688e0662"}, {"problem": 32, "code": "#(for [x % y [x x]] y)", "user": "561ca6ebe4b064ca9f4b169c"}, {"problem": 32, "code": "(fn [s]\n  (reduce (fn [s x]\n            (conj s x x)\n          )\n      \t  [] s\n  )\n)", "user": "56195e57e4b053970a773af6"}, {"problem": 32, "code": "#(interleave % %)", "user": "5537b2c7e4b09218d5f44fce"}, {"problem": 32, "code": "mapcat #(seq [% %])", "user": "561d8936e4b064ca9f4b16b2"}, {"problem": 32, "code": "#(reduce (fn [initial arg] (conj initial arg arg)) [] %)", "user": "55b5fc18e4b01b9910ae298d"}, {"problem": 32, "code": "(fn [xs] (reduce concat (for [x xs] [x x])))", "user": "561e2b33e4b064ca9f4b16ba"}, {"problem": 32, "code": "#(interleave % %)", "user": "561a060ee4b053970a773b01"}, {"problem": 32, "code": "#(reverse (reduce (fn [col x] (cons x (cons x col))) () %))", "user": "4fec0824e4b0681fd128dc9c"}, {"problem": 32, "code": "#(mapcat list % %)", "user": "561f9110e4b064ca9f4b16ce"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "561bc8e3e4b064ca9f4b1689"}, {"problem": 32, "code": "(fn [z] (lazy-seq (loop [x 0 q []] (if(< x (count z)) (recur (inc x) (conj q (get z x) (get z x))) q))))", "user": "561be724e4b064ca9f4b168c"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5616f411e4b06b1bb2182a0a"}, {"problem": 32, "code": "#(interleave % %)", "user": "56119b53e4b05f002753df81"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "561ff621e4b064ca9f4b16d6"}, {"problem": 32, "code": "(fn [xs]\n   (loop [result '()\n          l xs]\n     (if (empty? l)\n       (reverse result)\n       (recur (conj result (first l) (first l)) (rest l)))))\n\n;; Or #(interleave % %)", "user": "4f213e2ee4b0d66497709fcf"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "56205609e4b064ca9f4b16df"}, {"problem": 32, "code": "(fn [coll]\n  (loop [[x & xs] coll acc '()]\n    (if xs\n      (recur xs (conj acc x x))\n      (reverse (conj acc x x)))))", "user": "561cb6cfe4b064ca9f4b169e"}, {"problem": 32, "code": "#(interleave % %)", "user": "4f40c46fe4b0e243712b1fbe"}, {"problem": 32, "code": "reduce (fn [s x] (conj s x x)) []", "user": "561d23e3e4b064ca9f4b16a5"}, {"problem": 32, "code": "(fn [s] (apply concat (map #(list % %) s)))", "user": "55fb41a6e4b0f488688e065f"}, {"problem": 32, "code": "(fn [x] (reduce #(concat %1 [%2 %2]) [] x))", "user": "55b24240e4b0da326a65cf7b"}, {"problem": 32, "code": "mapcat (partial repeat 2)", "user": "56228d00e4b03f08ee9a9227"}, {"problem": 32, "code": "#(interleave % %)", "user": "54b54d1be4b05787c3b1639c"}, {"problem": 32, "code": "(fn [a]  (mapcat #(list % %) a))", "user": "54a634abe4b09f271ff37c84"}, {"problem": 32, "code": "(fn [g]\n  (reduce\n   (fn [r x] (apply conj r (repeat 2 x)))\n   []\n   g))", "user": "55fc838be4b0f488688e0674"}, {"problem": 32, "code": "(fn [s] (interleave s s))", "user": "560c31b4e4b05f002753df2d"}, {"problem": 32, "code": "mapcat #(vector % %)", "user": "5592ba8be4b0c79f6e1db931"}, {"problem": 32, "code": "(fn [x] (interleave x x))", "user": "55f6fe09e4b06e875b46cea2"}, {"problem": 32, "code": "#(apply concat (map (fn [x] [x x]) %))", "user": "562449dee4b0b951f963fc21"}, {"problem": 32, "code": "#(interleave % %)", "user": "5578f292e4b05c286339e08f"}, {"problem": 32, "code": "(fn [x]\n  (reduce (fn [r y]\n          (conj (conj r y) y)) [] x))", "user": "56171eade4b06b1bb2182a0c"}, {"problem": 32, "code": "(fn dup [s]\n  (interleave s s))", "user": "561eb82fe4b064ca9f4b16c7"}, {"problem": 32, "code": "#(interleave % %)", "user": "562326cbe4b03f08ee9a9230"}, {"problem": 32, "code": "#(interleave % %)", "user": "522a5bdde4b0590a43906cf8"}, {"problem": 32, "code": "(fn [v] (apply concat  (map #(list % %) v)))", "user": "56102f50e4b05f002753df6b"}, {"problem": 32, "code": "(fn [s]\n    (loop [s s\n           acc '()]\n      (cond\n        (empty? s) (reverse acc)\n        :else (recur (rest s) (cons (first s) (cons (first s) acc))))))", "user": "5600dccee4b04bb52996e175"}, {"problem": 32, "code": "(fn [initial-x]\n      (loop [x-prime (empty initial-x) x initial-x]\n        ;(println (str x-prime \", \" x))\n        (let [a (first x)]\n          (if (empty? x)\n            x-prime\n            (recur (conj x-prime a a) (rest x))\n            )\n          )\n        )\n      )", "user": "561bf12ce4b064ca9f4b168e"}, {"problem": 32, "code": "(fn dupl[input] \n  (reduce \n    (fn[l ll]\n      (concat l ll))\n    ()\n    (map #(list % %) input)))", "user": "5626447fe4b00e49c7cb47bd"}, {"problem": 32, "code": "#(interleave % %)", "user": "56018dd4e4b04bb52996e18f"}, {"problem": 32, "code": "#(apply concat (map (fn [x] (seq [x x])) % ))", "user": "536829c8e4b0243289761e8b"}, {"problem": 32, "code": "(fn [in]\n  (into () (reduce #(conj %1 %2 %2) '()  in))\n  )", "user": "546b24a0e4b00cfc9eacc166"}, {"problem": 32, "code": "(fn [seq] (reverse(reduce (fn [a s] (conj a s s)) nil seq)))", "user": "53623eaee4b0243289761e4f"}, {"problem": 32, "code": "reduce #(concat %1 (list %2 %2)) ()", "user": "561e3537e4b064ca9f4b16bc"}, {"problem": 32, "code": "#(mapcat (partial repeat 2) %)", "user": "5627d09ce4b00e49c7cb47db"}, {"problem": 32, "code": "(fn dup[lis]\n  (if (empty? lis) nil\n    (cons (first lis)\n       (cons (first lis)\n          (dup (rest lis))))))", "user": "5627444fe4b00e49c7cb47cd"}, {"problem": 32, "code": "#(mapcat list % %)", "user": "56202553e4b064ca9f4b16dd"}, {"problem": 32, "code": "(fn [coll]\n  (->> coll\n       (map #(vector % %))\n       (apply concat)))", "user": "562c15d3e4b058fa18c5a6d5"}, {"problem": 32, "code": "(fn [coll]\n  (->> coll\n       (mapcat (partial repeat 2))\n       (into (empty coll))))", "user": "5629dfaae4b00e49c7cb4813"}, {"problem": 32, "code": "#(interleave % %)", "user": "56282cdde4b00e49c7cb47e2"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "56215c8ee4b03f08ee9a921a"}, {"problem": 32, "code": "(fn [xs]\n  (apply concat (map (fn [x] [x x]) xs)))", "user": "562cd94ee4b0a45d2ff83015"}, {"problem": 32, "code": "#(reduce concat (for [e %] [e e]))", "user": "53b1db8ee4b047364c044495"}, {"problem": 32, "code": "#(interleave % %)", "user": "56278266e4b00e49c7cb47d3"}, {"problem": 32, "code": "#(interleave % %)", "user": "54485749e4b032a45b8693c7"}, {"problem": 32, "code": "#(mapcat list % %)", "user": "562b57c7e4b058fa18c5a6cc"}, {"problem": 32, "code": "(fn [x] (apply concat (apply map vector [x x])))", "user": "560d2b53e4b05f002753df37"}, {"problem": 32, "code": "#(loop [v % r []] (if (empty? v) r (recur (rest v) (conj (conj r (first v)) (first v)))))", "user": "5614ebc5e4b05f002753dfbc"}, {"problem": 32, "code": "(fn dupdup [s]\n  (if (empty? (rest s))\n    (list (first s) (first s))\n    (concat (list (first s) (first s)) (dupdup (rest s)))))", "user": "562e05e0e4b0a45d2ff83023"}, {"problem": 32, "code": "(fn [coll] (mapcat (fn [x] [x x]) coll))", "user": "562cb7cfe4b0a45d2ff83009"}, {"problem": 32, "code": "(fn [s]\n  (reduce (fn [a b] (seq (conj (conj (vec a) b) b))) nil s))", "user": "504f0c9ce4b0e7ad84dbc4b2"}, {"problem": 32, "code": "(let [xample '(8 6 5 )\n      ]\n(fn [x] (mapcat #(list % %) x))\n   )", "user": "5610d39de4b05f002753df75"}, {"problem": 32, "code": "(fn [coll]\n  (interleave coll coll))", "user": "562db4d1e4b0a45d2ff83021"}, {"problem": 32, "code": "#(seq (loop [sq %, ret []] (if (empty? sq) ret (recur (rest sq) (conj ret (first sq) (first sq))))))", "user": "55fc07d3e4b0f488688e066e"}, {"problem": 32, "code": "#(interleave % %)", "user": "55ed9108e4b0121d4835fddc"}, {"problem": 32, "code": "(fn [l]\n  (let [rl (reverse l)]\n    (loop [in rl out '()]\n      (if (empty? in)\n        out\n        (recur (rest in)\n               (conj (conj out (first in)) (first in)))))))", "user": "545c2d07e4b01be26fd7465c"}, {"problem": 32, "code": "mapcat (fn [x] [x x])", "user": "562b1a7be4b058fa18c5a6cb"}, {"problem": 32, "code": "(fn [x] (sort (concat x x)))", "user": "562e871ee4b0ab312c17ebba"}, {"problem": 32, "code": "(fn [c] (reduce (fn [a b] (conj a b b)) [] c))", "user": "562e8b2be4b0ab312c17ebbb"}, {"problem": 32, "code": "(fn duplicate-each\n  [input]\n  (into []\n        (mapcat #(list % %) input)))", "user": "4fc524aae4b081705acca37e"}, {"problem": 32, "code": "(fn [c]\n       (mapcat (fn [a b] [a b]) c c))", "user": "551e6526e4b030e6a24d00e8"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "5630a51de4b0bfe05bf11781"}, {"problem": 32, "code": "reduce (fn [a x] (concat a [x x])) []", "user": "4f0366b0535dcb61093f6aa9"}, {"problem": 32, "code": "#(apply interleave (take 2 (repeat %)))", "user": "562fb774e4b0ab312c17ebd9"}, {"problem": 32, "code": "(fn [ob]\n             (let [len (count ob)]\n               (loop [ret () index 0]\n                 (if (= index len)\n                   (reverse ret)\n                   (let [item (nth ob index)]\n                     (recur (conj ret item item) (+ index 1)))))))", "user": "56305383e4b073c1cf7a9be6"}, {"problem": 32, "code": "#(interleave % %)", "user": "562ab73ce4b00e49c7cb482e"}, {"problem": 32, "code": "#(interleave % %)", "user": "561a1af6e4b053970a773b02"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "5630ce72e4b0bfe05bf11786"}, {"problem": 32, "code": "reduce #(conj % %2 %2) []", "user": "56288ccae4b00e49c7cb47ea"}, {"problem": 32, "code": "(fn[s v](if (empty? v) s (recur (conj s (first v) (first v)) (rest v)))) []", "user": "561cad18e4b064ca9f4b169d"}, {"problem": 32, "code": "(fn [arg]\n  (loop [[first & rest] arg\n         result []]\n    (if first\n      (recur rest (conj result first first))\n      result)))", "user": "561fc0d0e4b064ca9f4b16d2"}, {"problem": 32, "code": "#(interleave % %)\n\n;(defn dup-sequence [x]\n;  (if (= x []) ()\n;     (flatten (reverse (conj (conj (conj () (first x)) (first x)) (dup-sequence (rest x)))))))", "user": "5633bb9de4b0bfe05bf117b4"}, {"problem": 32, "code": "#(interleave % %)", "user": "5537c5b3e4b09218d5f44fd1"}, {"problem": 32, "code": "(fn [x]\n  (loop [lst x new-list ()]\n    (if (empty? lst ) (reverse new-list)\n      (recur (rest lst) (conj (conj new-list (first lst) ) (first lst) )))))", "user": "563130e4e4b0bfe05bf1178d"}, {"problem": 32, "code": "reduce #(concat %1 (repeat 2 %2)) []", "user": "546a65fce4b00cfc9eacc153"}, {"problem": 32, "code": "#(sort (into % %))", "user": "561a9380e4b053970a773b07"}, {"problem": 32, "code": "(fn [coll]\n  (mapcat #(vector % %) coll))", "user": "56174d86e4b06b1bb2182a0e"}, {"problem": 32, "code": "#(loop [xs %, res []]\n   (if (seq xs)\n     (recur (rest xs) (into res (repeat 2 (first xs))))\n     res))", "user": "54995298e4b0b312c081ff8b"}, {"problem": 32, "code": "mapcat #(take 2 (repeat %))", "user": "53483a32e4b084c2834f4a57"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "54c6e78ae4b045293a27f634"}, {"problem": 32, "code": "mapcat #(vector % %)", "user": "54df955ee4b024c67c0cf7af"}, {"problem": 32, "code": "(fn [s](loop [x [], y s](if (empty? y) x (recur (into x (take 2 (repeat (first y)))) (rest y)))))", "user": "560331dee4b04bb52996e1b5"}, {"problem": 32, "code": "#(reverse (reduce\n                   (fn [s x] (cons x (cons x s)))\n                   '()\n                   %))", "user": "55729a78e4b09a3098a52547"}, {"problem": 32, "code": "(fn [coll] (mapcat #(list % %) coll))", "user": "560dbf17e4b05f002753df44"}, {"problem": 32, "code": "#(mapcat (fn [a] (list a a)) %)", "user": "53286f84e4b09d4e7a9b5505"}, {"problem": 32, "code": "(fn dupe [x & [y]]\n  (if y\n    (if (= (first x) nil)\n      y\n      (dupe (rest x) (conj y (first x) (first x)))\n      )\n    \n    (dupe x [])\n    )\n  )", "user": "5632abbee4b0bfe05bf117a7"}, {"problem": 32, "code": "#(interleave %1 %1)", "user": "563772a9e4b0bfe05bf117d7"}, {"problem": 32, "code": "(fn [lis]\n  (loop [asd lis, result lis]\n    (if(empty? asd)\n      (sort result)\n      (recur (rest asd) (cons (first asd) result)))))", "user": "5191a763e4b0d428d29dc1b4"}, {"problem": 32, "code": "(fn [coll]\n  (reduce #(concat %1 (repeat 2 %2)) '() coll))", "user": "5630fd6fe4b0bfe05bf1178b"}, {"problem": 32, "code": "(fn [c](reduce #(conj %1 %2 %2) [] c))", "user": "56347285e4b0bfe05bf117bc"}, {"problem": 32, "code": "reduce #(concat %1 (list %2 %2)) '()", "user": "56372798e4b0bfe05bf117d0"}, {"problem": 32, "code": "(fn [coll]\n  (apply concat (map #(repeat 2 %) coll)))", "user": "56319455e4b0bfe05bf11795"}, {"problem": 32, "code": "(fn dup [l]\n  (if (empty? l) (list)\n  \t(cons (first l) (cons (first l) (dup (rest l))))))", "user": "56393681e4b0bfe05bf117f2"}, {"problem": 32, "code": "reduce #(conj (conj %1 %2) %2) []", "user": "56366f73e4b0bfe05bf117cc"}, {"problem": 32, "code": "#(interleave % %)", "user": "563799f8e4b0bfe05bf117db"}, {"problem": 32, "code": "(fn [xs]\n  (reduce (fn [t v] (conj t v v)) [] xs))", "user": "54dce62fe4b024c67c0cf78c"}, {"problem": 32, "code": "#(interleave % %)", "user": "563a30d7e4b0bfe05bf117f9"}, {"problem": 32, "code": "(fn dup [col] (apply concat (map #(repeat 2 %) (seq col))))", "user": "56252effe4b00a550fc90294"}, {"problem": 32, "code": "(fn [xs] (apply concat (map #(repeat 2 %) xs)))", "user": "56388a0fe4b0bfe05bf117e7"}, {"problem": 32, "code": ";mapcat #(vector % %)\n\n#(interleave % %)", "user": "53abed65e4b047364c044455"}, {"problem": 32, "code": "#(interleave % %)", "user": "56399b7ee4b0bfe05bf117f5"}, {"problem": 32, "code": "#(interleave % %)", "user": "5604ae27e4b0c80df0ca2663"}, {"problem": 32, "code": "#(apply concat (map (fn [x] (seq [x x])) %))", "user": "52824143e4b0757a1b171453"}, {"problem": 32, "code": "(fn double-seq [[x & xs :as all]]\n (if (empty? all)\n   '()\n   (conj (double-seq xs) x x)))", "user": "56339e23e4b0bfe05bf117b1"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "55c13e73e4b01b9910ae2a2f"}, {"problem": 32, "code": "#(mapcat (fn[el] [el el]) %)", "user": "561d7246e4b064ca9f4b16b1"}, {"problem": 32, "code": "#(interleave % %)", "user": "5632b0a9e4b0bfe05bf117a8"}, {"problem": 32, "code": "(fn dup [x] (reverse (reduce (fn [acc b] (cons b (cons b acc)) ) '() x) ) )", "user": "563b559ee4b0bfe05bf1180d"}, {"problem": 32, "code": "#(interleave % %)", "user": "5587ddd9e4b059ccff29b1ea"}, {"problem": 32, "code": "#(loop [x % col nil] (if (empty? x) col (recur (rest x) (concat col (repeat 2 (first x))))))", "user": "4e4aaf49535dc968683fc4ce"}, {"problem": 32, "code": "(fn mef [[x & xs]] (if (empty? xs) (list x x) (concat (list x x) (mef xs))))", "user": "563747e9e4b0bfe05bf117d2"}, {"problem": 32, "code": "#(mapcat (partial repeat 2) %)", "user": "55350bdae4b09218d5f44fa8"}, {"problem": 32, "code": "#(interleave % %)", "user": "555994fbe4b0deb715856e39"}, {"problem": 32, "code": "(fn [coll] (reduce #(conj %1 %2 %2) [] coll))", "user": "563ddefee4b0bfe05bf11857"}, {"problem": 32, "code": "#(reverse (reduce\n    (fn f [xs x]\n      `(~x ~x ~@xs))\n    '()\n    %))", "user": "55c49394e4b0e31453f6499e"}, {"problem": 32, "code": "(fn [m] (reduce (fn [sq i] (conj (conj sq i) i)) '[] m))", "user": "56019662e4b04bb52996e190"}, {"problem": 32, "code": "(fn [in] (mapcat #(->[% %]) in))", "user": "563e7a33e4b0da801c4e466d"}, {"problem": 32, "code": "#(mapcat vector % %)", "user": "56083383e4b046a4fc0ac00a"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "544e6b7fe4b0e39780006986"}, {"problem": 32, "code": "(fn duplicate [s]\n  (reduce (fn [result v] (conj result v v)) [] s))", "user": "563f1493e4b08d4f616f5ecf"}, {"problem": 32, "code": "#(apply concat (map vector % %))", "user": "56304db8e4b073c1cf7a9be5"}, {"problem": 32, "code": "reduce #(apply conj %1 (repeat 2 %2)) []", "user": "5632e850e4b0bfe05bf117ac"}, {"problem": 32, "code": "#(reduce (fn [val i] (conj (conj val i) i)) [] %)", "user": "52d68ed2e4b09f7907dd1362"}, {"problem": 32, "code": "#(interleave % %)", "user": "563ed73ae4b08d4f616f5ecb"}, {"problem": 32, "code": "#(interleave % %)", "user": "563b5dc9e4b0bfe05bf1180f"}, {"problem": 32, "code": "(fn [s]\n  (mapcat #(repeat 2 %) s))", "user": "53bbae20e4b047364c044509"}, {"problem": 32, "code": "mapcat (fn [n] [n n])", "user": "563b6a2ae4b0bfe05bf11812"}, {"problem": 32, "code": "(fn [ls] (reduce #(conj (conj %1 %2) %2) [] ls))", "user": "564127a9e4b08d4f616f5ef3"}, {"problem": 32, "code": "(fn [xs] (reverse (reduce #(cons %2 (cons %2 %1)) () xs)))", "user": "54cec2a9e4b018d918be98c1"}, {"problem": 32, "code": ";(fn [coll] (reduce concat (map #(concat [%] [%]) coll)))\n#(interleave % %)", "user": "562f2985e4b0ab312c17ebc5"}, {"problem": 32, "code": "#(interleave % %)", "user": "55eb026de4b0121d4835fdb7"}, {"problem": 32, "code": "#(interleave % %)", "user": "5642b939e4b08d4f616f5f1b"}, {"problem": 32, "code": "(fn dup-seq [coll]\n  (interleave coll coll))", "user": "563fc1f2e4b08d4f616f5ed7"}, {"problem": 32, "code": "(fn [xs]\n  (mapcat (fn [x] (list x x)) xs))", "user": "5641296de4b08d4f616f5ef4"}, {"problem": 32, "code": "mapcat #(vector % %)", "user": "5642e2e3e4b08d4f616f5f1d"}, {"problem": 32, "code": "#(interleave % %)", "user": "505fdf63e4b08f2a82ad10b9"}, {"problem": 32, "code": "#(interleave % %)", "user": "5639e878e4b0bfe05bf117f7"}, {"problem": 32, "code": "(fn duplicate [num]\n  (reduce concat (map #(take 2 (repeat %)) num)))", "user": "5634995fe4b0bfe05bf117be"}, {"problem": 32, "code": "#(interleave % %)", "user": "563f0fdae4b08d4f616f5ece"}, {"problem": 32, "code": "(fn [x]\n  (loop [src x dest []]\n    (if (nil? (first src))\n      dest\n      (recur (rest src) (conj dest (first src) (first src))))))", "user": "563e022be4b0da801c4e4664"}, {"problem": 32, "code": "(fn dup_seq \n    ([s]\n        (dup_seq [] s))\n    ([r_seq s]\n        (if (< 0 (count s))\n            (dup_seq (conj r_seq (first s) (first s)) (rest s))\n            r_seq)))", "user": "56058d64e4b08b23635d3169"}, {"problem": 32, "code": "(fn [sequen]\n  (->> sequen\n       (mapcat #(vector % %))))", "user": "5422c959e4b01498b1a71ac7"}, {"problem": 32, "code": "(fn dup\n  [[x & tail]]\n  (concat\n   [x x]\n   (if (nil? tail) [] (dup tail))))", "user": "56451201e4b0284900eef600"}, {"problem": 32, "code": "mapcat (fn [x] (vector x x))", "user": "564045a8e4b08d4f616f5edd"}, {"problem": 32, "code": "mapcat #(take 2 (iterate identity %))", "user": "562d869be4b0a45d2ff8301f"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "5376190de4b06839e8705e1c"}, {"problem": 32, "code": "(fn [x] (reduce concat (map #(list %1 %2) x x)))", "user": "56449e4de4b0284900eef5f9"}, {"problem": 32, "code": "#(interleave % %)", "user": "56442758e4b0018b46ad8c0a"}, {"problem": 32, "code": "(fn [s] (mapcat identity\n    \t(map (fn [x] (cons x (cons x '()))) s)))", "user": "563871ede4b0bfe05bf117e5"}, {"problem": 32, "code": "(fn [s]\n  (reduce concat (map (fn [x] [x x]) s)))", "user": "564583f0e4b0284900eef607"}, {"problem": 32, "code": "(fn duplicate-sequence [s]\n  (reverse\n  (loop [result nil\n         input s]\n    (if\n      (empty? input)\n      result\n      (recur (concat (list (first input) (first input)) result) (rest input))\n      )\n    )\n  ))", "user": "563b9acbe4b0bfe05bf11827"}, {"problem": 32, "code": "(partial mapcat (partial repeat 2))", "user": "56466fb1e4b0284900eef613"}, {"problem": 32, "code": "(fn [coll] (mapcat #(list % %) coll))", "user": "5646dff3e4b0284900eef615"}, {"problem": 32, "code": "mapcat (partial repeat 2)", "user": "5400407de4b0de5c4184860a"}, {"problem": 32, "code": "(fn [xs] (mapcat #(repeat 2 %) xs))", "user": "5391149ee4b0b51d73faaea0"}, {"problem": 32, "code": "#(sort (apply concat (take 2 (repeat %))))", "user": "5643ba10e4b0018b46ad8bff"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5647dc44e4b0284900eef624"}, {"problem": 32, "code": "#(interleave % %)", "user": "56441e72e4b0018b46ad8c09"}, {"problem": 32, "code": "(fn [coll] (reduce concat (map #(repeat 2 %) coll)))", "user": "551e2cade4b030e6a24d00e4"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5649542fe4b0284900eef63f"}, {"problem": 32, "code": "#(mapcat (partial repeat 2) %)", "user": "56449c90e4b0284900eef5f8"}, {"problem": 32, "code": "(fn [s]\n  (reduce (fn [a b] (concat a (list b b))) '() s))", "user": "563d12f9e4b0bfe05bf11845"}, {"problem": 32, "code": "(fn f [s]\n  (let [f*\n        (fn [acc s*]\n          (conj acc s* s*))]\n    (reduce f* [] s)))", "user": "563c0d4ce4b0bfe05bf11831"}, {"problem": 32, "code": "reduce #(concat % [%2 %2]) []", "user": "545a2da7e4b01be26fd74634"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "564633a1e4b0284900eef60f"}, {"problem": 32, "code": "(fn [x] (loop [r x result '()] (if (empty? r) result (recur  (rest r) (concat result (list (first r) (first r)))))))", "user": "56427910e4b08d4f616f5f19"}, {"problem": 32, "code": "(fn [coll] (reverse\n            (reduce (fn [acc x]\n                      (conj (conj acc x) x))\n                    '()\n                    coll)))", "user": "5622af0fe4b03f08ee9a922b"}, {"problem": 32, "code": "#(mapcat (fn dupper[val] [val val]) %)", "user": "564b1ff8e4b0284900eef663"}, {"problem": 32, "code": "#(reverse\n  (reduce\n   (fn[output input]\n     (concat (take 2 (repeat input)) output))\n   '() %))", "user": "51671557e4b013fc800656c4"}, {"problem": 32, "code": "(fn double-list [the-seq]\n  (reverse (reduce #(cons %2 (cons %2 %1)) '() the-seq )))", "user": "5645a7d6e4b0284900eef608"}, {"problem": 32, "code": "(fn [xs]\n  (mapcat (fn[val]\n         (let[a val b val] (list a b)) ) xs))", "user": "54dce6dbe4b024c67c0cf78d"}, {"problem": 32, "code": "#(apply concat (for [x %] (repeat 2 x)))", "user": "5643a11ee4b0018b46ad8bfb"}, {"problem": 32, "code": "(fn [S]\n   (reduce (fn [lst x] (concat lst (list x x))) () S)\n)", "user": "5649615be4b0284900eef641"}, {"problem": 32, "code": "(fn [s] (reduce concat (map #(list % %) s)))", "user": "56350c87e4b0bfe05bf117c0"}, {"problem": 32, "code": "reduce #(conj % %2 %2) []", "user": "561223e5e4b05f002753df8b"}, {"problem": 32, "code": "(partial mapcat #(list % %))", "user": "541ef7e2e4b01498b1a71a92"}, {"problem": 32, "code": "#(interleave % %)", "user": "564d5b6be4b0284900eef67f"}, {"problem": 32, "code": "(fn [coll]  (mapcat #(repeat 2 %) coll))", "user": "56349008e4b0bfe05bf117bd"}, {"problem": 32, "code": "#(interleave % %)", "user": "563c48e7e4b0bfe05bf11832"}, {"problem": 32, "code": "#(interleave % %)", "user": "4df9d3b0535d04ed9115e77b"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "4ff3113ae4b0678c553fc345"}, {"problem": 32, "code": "(fn [col] (mapcat (fn [a] [a a] ) col))", "user": "564a560ae4b0284900eef654"}, {"problem": 32, "code": "#(interleave % %)", "user": "564d3169e4b0284900eef67c"}, {"problem": 32, "code": "#(loop [in % out []]\n   (if (empty? in)\n     out\n     (recur (rest in) (conj out (first in) (first in)))))", "user": "564a5a09e4b0284900eef656"}, {"problem": 32, "code": "mapcat #(take 2 (repeat %))", "user": "55a68518e4b09e57187da29b"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "55f25ae6e4b06e875b46ce43"}, {"problem": 32, "code": "#(interleave % %)", "user": "5576fee3e4b05c286339e078"}, {"problem": 32, "code": "(fn xduplicate [x]                                                            \n  (loop [ elms (seq x) acc '() ]                                                \n    (if (= 0 (count elms))                                                      \n      ;; then                                                                   \n      acc                                                                       \n      ;; else                                                                   \n      (recur (rest elms)                                                        \n             (concat acc (conj '() (first elms) (first elms))                   \n        )))))", "user": "564cc055e4b0284900eef676"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "564b3730e4b0284900eef665"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "56313ff1e4b0bfe05bf1178f"}, {"problem": 32, "code": "(fn [l] (reduce concat [] (map (fn [i] [i i]) l)))", "user": "563249dee4b0bfe05bf1179f"}, {"problem": 32, "code": "#(interleave % %)", "user": "563b1553e4b0bfe05bf1180a"}, {"problem": 32, "code": ";#(mapcat (fn [x] [x x]) %)\n#(interleave % %)", "user": "564b495de4b0284900eef667"}, {"problem": 32, "code": "(fn [col] (apply concat (map #(repeat 2 %) col)))", "user": "56504dc2e4b0284900eef6bc"}, {"problem": 32, "code": "#(reduce (fn [acc cur] (conj (conj acc cur) cur)) [] %)", "user": "564ecc9ee4b0284900eef6a1"}, {"problem": 32, "code": "(fn dup-all [in]\n\t(loop [[x1 & xrest :as X] in, out []]\n\t\t(if (seq X) \n\t\t\t(recur xrest (conj out x1 x1)) \n\t\t\tout)))", "user": "564d02cde4b0284900eef679"}, {"problem": 32, "code": "reduce #(conj (conj %1 %2) %2) []", "user": "563dfc02e4b0da801c4e4662"}, {"problem": 32, "code": "#(mapcat (fn [e] [e e]) %)", "user": "55380eeae4b09218d5f44fd9"}, {"problem": 32, "code": "(fn [c] (apply concat (map #(repeat 2 %) c)))", "user": "56441634e4b0018b46ad8c08"}, {"problem": 32, "code": "#(interleave % %)", "user": "55577fcce4b0deb715856e24"}, {"problem": 32, "code": "#(apply concat (map list % %))", "user": "4f037faf535dcb61093f6af8"}, {"problem": 32, "code": "#(interleave % %)", "user": "5650b8a0e4b0284900eef6c3"}, {"problem": 32, "code": "(fn [lst]\n  (reduce\n    (fn [new-lst el]\n      (concat new-lst (list el el)))\n    (list)\n    lst))", "user": "5625f678e4b00e49c7cb47b8"}, {"problem": 32, "code": "(fn [xs] (interleave xs xs))", "user": "535fa486e4b04ce2eb3ed2e0"}, {"problem": 32, "code": "#(reduce (fn [acc el] (conj acc el el)) [] %)", "user": "564faadce4b0284900eef6b2"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "56488119e4b0284900eef632"}, {"problem": 32, "code": "(fn [l] (mapcat #(-> [% %]) l))", "user": "56521a26e4b0f9d632dd845f"}, {"problem": 32, "code": "mapcat #(vector % %)", "user": "5642f094e4b08d4f616f5f1f"}, {"problem": 32, "code": "#(reduce (fn [acc x] (conj acc x x)) [] %)", "user": "54588070e4b01be26fd74620"}, {"problem": 32, "code": "(fn dup [x]\n  (reduce #(concat %1 (list %2 %2)) '() x))", "user": "564066dee4b08d4f616f5ee2"}, {"problem": 32, "code": "(fn [coll]\n  (mapcat #(repeat 2 %) coll))", "user": "55cd95b4e4b0e31453f64a1e"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "55c3c1b0e4b0e31453f6498c"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "54de7948e4b024c67c0cf7a4"}, {"problem": 32, "code": "(fn out [seq]\n  (let [filler (fn this [seq acc]\n                 (cond\n                   (= (count seq) 0) acc\n                   :else (this (rest seq) (conj acc (first seq) (first seq)))\n                   ))]\n    (filler seq []))\n  )", "user": "56530a1ce4b0f9d632dd846c"}, {"problem": 32, "code": "#(reduce into (reverse (for [x %] (repeat 2 x ) ) ) )", "user": "56405959e4b08d4f616f5ee1"}, {"problem": 32, "code": "(fn [xs]\n   (reduce\n   #(conj %1 %2 %2)\n   '()\n   (reverse xs)))", "user": "5624f5a6e4b00a550fc90288"}, {"problem": 32, "code": "#(reduce \n  (fn [a b] (conj a b b)) [] %)", "user": "4fc77f5ae4b0ee37620e1821"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "5654d0e1e4b0f9d632dd848c"}, {"problem": 32, "code": "(fn [coll]\n  (reduce #(conj (conj %1 %2) %2) [] coll))", "user": "564da567e4b0284900eef682"}, {"problem": 32, "code": "(fn dup [x]\n        (if (empty? x)\n          x\n          (conj (dup (rest x)) (first x) (first x))\n          ) \n       \n       )", "user": "5654cb2de4b0f9d632dd848b"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "560d7863e4b05f002753df40"}, {"problem": 32, "code": "(fn [in] \n  (loop [s in res '()]\n    (if (empty? s)\n      (reverse res)\n      (recur (rest s) (conj res (first s) (first s))))))", "user": "5600591de4b04bb52996e166"}, {"problem": 32, "code": "#(interleave % %)", "user": "558159b3e4b05c286339e0f7"}, {"problem": 32, "code": "#(interleave % %)", "user": "56561119e4b0f9d632dd849d"}, {"problem": 32, "code": "#(loop[n (- (count %) 1), r '()]\n   (if(< n 0)\n     r\n     (recur(dec n)(cons (nth % n) (cons (nth % n) r)))))", "user": "5654e8ade4b0f9d632dd848e"}, {"problem": 32, "code": "#(interleave % %)", "user": "5632d1b3e4b0bfe05bf117a9"}, {"problem": 32, "code": "(fn [lst] (for [pair (for [x lst] [x x]) element pair] element))", "user": "56367c51e4b0bfe05bf117cd"}, {"problem": 32, "code": "(fn [c] (apply concat \n (map #(list %1 %1) c)\n ))", "user": "561e8b11e4b064ca9f4b16c0"}, {"problem": 32, "code": "#(interleave % %)", "user": "53d0c3c9e4b00fb29b22130a"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "56540485e4b0f9d632dd847a"}, {"problem": 32, "code": "#(interleave % %)", "user": "52c48ec6e4b0c2d177d620dd"}, {"problem": 32, "code": "(fn duplicate [s] (apply concat (map #(list % %) s)))", "user": "5654e024e4b0f9d632dd848d"}, {"problem": 32, "code": "(fn dup [s] (reduce #(concat %1 [%2 %2]) '() s))", "user": "56582025e4b0f9d632dd84b1"}, {"problem": 32, "code": "(fn dup [s] (if (seq s)\n              (lazy-seq (cons (first s) (cons (first s) (dup (rest s)))))\n              nil))", "user": "54ca93abe4b057c6fda3a264"}, {"problem": 32, "code": "(fn duplicate [coll]\n  (if (nil? coll)\n    nil\n    (let [[c & cs] coll]\n      (conj (duplicate cs) c c))))", "user": "56557d2de4b0f9d632dd8498"}, {"problem": 32, "code": "#(interleave % %)", "user": "5658acabe4b0f9d632dd84b7"}, {"problem": 32, "code": "mapcat (fn [x] [x x])", "user": "56444fb1e4b0018b46ad8c0c"}, {"problem": 32, "code": "#(interleave % %)", "user": "5658eaa0e4b00d3155796115"}, {"problem": 32, "code": "#(reduce (fn [result, el] (conj result el el)) [] %)", "user": "5658b9bde4b00d315579610e"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "564c8e99e4b0284900eef674"}, {"problem": 32, "code": "(fn [t] (into () (reduce (fn [acc x] (cons x (cons x acc))) '() t)))", "user": "56588f4ee4b0f9d632dd84b6"}, {"problem": 32, "code": "mapcat #(vector % %)", "user": "56188848e4b053970a773aea"}, {"problem": 32, "code": "(fn [x]\n  (reduce\n     #(conj %1 %2 %2)\n     []\n     x))", "user": "56532ff4e4b0f9d632dd846e"}, {"problem": 32, "code": "(fn [x] (loop [a x b []] (let [h (first a)] (if (empty? a) b (recur (rest a) (conj b h h))))))", "user": "5651de3ee4b0f9d632dd845b"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "565a3e25e4b068f2fe63dbfb"}, {"problem": 32, "code": "#(interleave % %)", "user": "53f5c402e4b0db01ade6f9d4"}, {"problem": 32, "code": "#(interleave % %)", "user": "55d80befe4b0e31453f64aae"}, {"problem": 32, "code": "(fn dup [inlist] (if (empty? inlist) (list) (cons (first inlist) (cons (first inlist) (dup (rest inlist))))))", "user": "5658d775e4b00d3155796114"}, {"problem": 32, "code": "(fn dup [s]\n  (let [rfn (fn [acc x] (conj acc x x))]\n  (reduce rfn [] s)))", "user": "52ee46e5e4b05e3f0be25ec5"}, {"problem": 32, "code": "(fn [c]( mapcat #(repeat 2 %) c))", "user": "564348e1e4b08d4f616f5f26"}, {"problem": 32, "code": "#(sort (concat % %))", "user": "544285dde4b032a45b869380"}, {"problem": 32, "code": "#(apply concat (map (fn [x] [x x]) %))", "user": "565e0934e4b068f2fe63dc30"}, {"problem": 32, "code": "#(interleave % %)", "user": "565b4d7fe4b068f2fe63dc01"}, {"problem": 32, "code": "(fn [arg1]\n(cond\n(and (= arg1 [1 2 3])) (quote (1 1 2 2 3 3))\n(and (= arg1 [:a :a :b :b])) (quote (:a :a :a :a :b :b :b :b))\n(and (= arg1 [[1 2] [3 4]])) (quote ([1 2] [1 2] [3 4] [3 4]))\n(and (= arg1 [[1 2] [3 4]])) (quote ([1 2] [1 2] [3 4] [3 4]))\n))", "user": "565f2461e4b068f2fe63dc3b"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "55ff562fe4b00f4cabc57660"}, {"problem": 32, "code": "(fn [lst]\n  (loop [xs lst\n         res nil]\n    (if (empty? xs)\n      (reverse res)\n      (recur (rest xs) \n             (cons (first xs) (cons (first xs) res))))))", "user": "5516a874e4b06a49daca83b5"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "563f24f9e4b08d4f616f5ed0"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "565b818ce4b068f2fe63dc05"}, {"problem": 32, "code": "(fn [input] (mapcat #(repeat 2 %) input))", "user": "56004deee4b04bb52996e164"}, {"problem": 32, "code": "(let [conj2 #(conj (conj %1 %2) %2)\n      dupe #(reverse (reduce conj2 '() %1))]\n   dupe)", "user": "565b7902e4b068f2fe63dc04"}, {"problem": 32, "code": "(fn [coll]\n  (loop [c coll\n         r []]\n    (if (empty? c) (reverse (into '() r))\n       (recur (rest c) (into r (take 2 (repeat (first c))))))))", "user": "562c2fc2e4b058fa18c5a6d7"}, {"problem": 32, "code": "(fn [x] (apply concat (map #(list % %) x)))", "user": "5650ac8be4b0284900eef6c2"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "565faf46e4b068f2fe63dc44"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "56602649e4b068f2fe63dc47"}, {"problem": 32, "code": "#(reduce concat (map (fn [e] (list e e)) %))", "user": "530e9bd6e4b08068f379ecbe"}, {"problem": 32, "code": "#(reduce (fn [r x] (concat r (list x x))) '() %)", "user": "55344b75e4b09218d5f44f99"}, {"problem": 32, "code": "(fn [a] (reduce concat (map #(repeat 2 %) a)))", "user": "5657fc1ae4b0f9d632dd84ad"}, {"problem": 32, "code": "#(reduce (fn [r x] (conj (conj r x)x)) [] %)", "user": "5650082fe4b0284900eef6b7"}, {"problem": 32, "code": "(fn [coll]\n  (reduce into \n   (reverse \n    (map (partial repeat 2) coll))))", "user": "565b941ce4b068f2fe63dc07"}, {"problem": 32, "code": "(fn dup-sequence [xs]\n  (letfn [(combine-dup [xs x]\n            (cons x (cons x xs)))]\n  (reverse (reduce combine-dup '() xs))))", "user": "5661e09ae4b068f2fe63dc70"}, {"problem": 32, "code": "(fn [col] (sort (into col col)))", "user": "5656e039e4b0f9d632dd84a3"}, {"problem": 32, "code": "(fn [coll] (reduce #(conj %1 %2 %2) [] coll))", "user": "5659679ae4b068f2fe63dbeb"}, {"problem": 32, "code": "(fn [coll] (reduce #(conj %1 %2 %2) [] coll))", "user": "55f4ef68e4b06e875b46ce82"}, {"problem": 32, "code": "mapcat #(vector % %)", "user": "5666500ee4b0e91d5f5c566d"}, {"problem": 32, "code": "(fn [arg1]\n(cond\n(and (= arg1 [1 2 3])) (quote (1 1 2 2 3 3))\n(and (= arg1 [:a :a :b :b])) (quote (:a :a :a :a :b :b :b :b))\n(and (= arg1 [[1 2] [3 4]])) (quote ([1 2] [1 2] [3 4] [3 4]))\n(and (= arg1 [[1 2] [3 4]])) (quote ([1 2] [1 2] [3 4] [3 4]))\n))", "user": "5666bf34e4b04acd4f672dc2"}, {"problem": 32, "code": "mapcat #(vector % %)", "user": "56503c4ee4b0284900eef6bb"}, {"problem": 32, "code": "(fn [coll]\n  (apply concat\n    (for [v coll]\n      (list v v))))", "user": "5169d422e4b051e2a73aba53"}, {"problem": 32, "code": "(fn [x] (interleave x x))", "user": "56662275e4b0e91d5f5c566a"}, {"problem": 32, "code": "reduce #(conj (conj % %2) %2) []", "user": "56677192e4b04acd4f672dd5"}, {"problem": 32, "code": "#(interleave % %)", "user": "566734c4e4b04acd4f672dcc"}, {"problem": 32, "code": "#(interleave %1 %1)", "user": "5372e7d9e4b06d7f452d9e02"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "566733d6e4b04acd4f672dcb"}, {"problem": 32, "code": "#(interleave % %)", "user": "524e5e74e4b0541d1855b7d8"}, {"problem": 32, "code": "(fn [lat] (reduce concat (map #(repeat 2 %) lat)))", "user": "566888e4e4b04acd4f672ded"}, {"problem": 32, "code": "#(reverse (loop [result '()\n       input %]\n   (if (empty? input) result\n     (recur (conj (conj result (first input)) (first input)) (rest input)))))", "user": "56671a4de4b04acd4f672dca"}, {"problem": 32, "code": "(fn [x]\n  (sort (clojure.set/union x x)))", "user": "55263009e4b0ffed3738f916"}, {"problem": 32, "code": "(fn [xs] (mapcat #(vector % %) xs))", "user": "5668dcc6e4b04acd4f672df8"}, {"problem": 32, "code": "#(interleave % %)", "user": "566639f4e4b0e91d5f5c566b"}, {"problem": 32, "code": "#(interleave % %)", "user": "56618ddfe4b068f2fe63dc6a"}, {"problem": 32, "code": "(fn [xs] (reduce (fn [i d] (concat i [d d])) () xs))", "user": "56686edce4b04acd4f672dea"}, {"problem": 32, "code": "(fn [x](mapcat #(list % %) x))", "user": "566a3a26e4b0a866af689699"}, {"problem": 32, "code": "#(interleave %1 %1)", "user": "565b2fa5e4b068f2fe63dbfe"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "565a280be4b068f2fe63dbf7"}, {"problem": 32, "code": "#(interleave % %)", "user": "563afd5ae4b0bfe05bf11809"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "566a6e38e4b0a866af68969b"}, {"problem": 32, "code": "#(interleave % %)", "user": "566b7a77e4b0a866af6896af"}, {"problem": 32, "code": "#(interleave % %)", "user": "5393185ae4b0b51d73faaeb7"}, {"problem": 32, "code": "(fn [x] (apply concat (map #(do [% %]) x)))", "user": "5006c169e4b0678c553fc48d"}, {"problem": 32, "code": "#(apply concat ( for  [ x %] [x x]))", "user": "5661b0a9e4b068f2fe63dc6f"}, {"problem": 32, "code": "mapcat (partial repeat 2)", "user": "559ff9eee4b0acc240e314ee"}, {"problem": 32, "code": "(fn [coll]\n  (reverse\n   (reduce #(cons %2 (cons %2 %1)) '() coll)))", "user": "566fa059e4b0a866af6896ea"}, {"problem": 32, "code": "(fn\n  [x]\n   (reduce into [] (for [i x]\n    [i i])))", "user": "549ffeade4b0f3d1d8e70fb2"}, {"problem": 32, "code": "#(interleave % %)", "user": "5668aad0e4b04acd4f672df5"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "566064cae4b068f2fe63dc50"}, {"problem": 32, "code": "(partial mapcat #(list % %))", "user": "5640eb50e4b08d4f616f5eec"}, {"problem": 32, "code": "#(interleave % %)", "user": "5614855fe4b05f002753dfb8"}, {"problem": 32, "code": "(fn f [[x & xs]]\n  (if (nil? xs)\n    [x x]\n    (into [x x] (f xs))))", "user": "56483562e4b0284900eef629"}, {"problem": 32, "code": "(fn [s] (apply concat (map (fn [n] [n,n]) s)))", "user": "565233f2e4b0f9d632dd8461"}, {"problem": 32, "code": "(fn [coll] (mapcat #(repeat 2 %) coll))", "user": "51441ce7e4b0b4fb4ace5f41"}, {"problem": 32, "code": "(fn [coll] (reduce #(conj %1 %2 %2) [] coll))", "user": "55c5bdffe4b0e31453f649b6"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5654c550e4b0f9d632dd848a"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "566e5a03e4b0a866af6896d8"}, {"problem": 32, "code": "mapcat #(list %1 %1)", "user": "5674477ce4b05957ce8c6134"}, {"problem": 32, "code": "(fn [l] (reduce concat (map (fn [x] (list x x)) l)))", "user": "564716e6e4b0284900eef616"}, {"problem": 32, "code": "#(interleave % %)", "user": "56669819e4b0e91d5f5c5674"}, {"problem": 32, "code": "#(apply concat (map list  % %))", "user": "56754c4be4b05957ce8c6149"}, {"problem": 32, "code": "(fn [sequ] (reduce #(concat  %1 [%2 %2]) [] sequ))", "user": "567476bde4b05957ce8c6139"}, {"problem": 32, "code": "(fn [s] (mapcat #(vector % %) s))", "user": "55efb51ee4b066087aa9453b"}, {"problem": 32, "code": "reduce (fn [a x] (into a [x x])) []", "user": "566669d8e4b0e91d5f5c566f"}, {"problem": 32, "code": "#(interleave % %\n             )", "user": "5652dd89e4b0f9d632dd8469"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "5540e078e4b0a04f79299506"}, {"problem": 32, "code": "#(apply concat (map (partial repeat 2) %))", "user": "56732c84e4b05957ce8c611c"}, {"problem": 32, "code": "(fn [s] (reduce (fn [a, b] (concat a [b b])) [] s))", "user": "5675f2f4e4b05957ce8c6153"}, {"problem": 32, "code": "(fn [coll]\n  (loop [c1 coll, c2 []]\n    (if (empty? c1)\n        c2\n        (recur (rest c1) (conj c2 (first c1) (first c1))))))", "user": "567695c2e4b05957ce8c6157"}, {"problem": 32, "code": "mapcat (partial repeat 2)", "user": "5674f874e4b05957ce8c6144"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "56706f01e4b0a866af6896f2"}, {"problem": 32, "code": "#(interleave % %)", "user": "54ce541de4b057c6fda3a2ac"}, {"problem": 32, "code": "#(reduce concat (for [x %] [x x]))", "user": "52d9ba39e4b09f7907dd13af"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5676af21e4b05957ce8c6158"}, {"problem": 32, "code": "mapcat #(list %1 %1)", "user": "56761ab1e4b05957ce8c6154"}, {"problem": 32, "code": "(fn [coll] (reduce #(conj %1 %2 %2) [] coll))", "user": "56548885e4b0f9d632dd8483"}, {"problem": 32, "code": "#(interleave % %)", "user": "56771b31e4b05957ce8c6163"}, {"problem": 32, "code": "#(interleave % %)", "user": "566dd178e4b0a866af6896d1"}, {"problem": 32, "code": "(fn [x] (apply concat (for [n x]\n              [n n])))", "user": "566bd453e4b0a866af6896b7"}, {"problem": 32, "code": "(fn [coll]\n  (reduce (fn [res x]\n            (concat res (list x x)))\n          '() coll))", "user": "5675cdf1e4b05957ce8c614d"}, {"problem": 32, "code": "#(apply concat (map (fn [x] (take 2 (repeat x))) %1))", "user": "4fe98e07e4b0547ebccb2464"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "55c5b55fe4b0e31453f649b5"}, {"problem": 32, "code": "(fn [coll] (mapcat (fn [x] (repeat 2 x)) coll))", "user": "567874f3e4b05957ce8c617c"}, {"problem": 32, "code": "mapcat (fn [x] [x x])", "user": "5547b72be4b0a04f79299550"}, {"problem": 32, "code": "#(reduce into [] (map (fn [x] [x x]) %))", "user": "566caad9e4b0a866af6896c0"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "567b2f20e4b05957ce8c61a2"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "567798afe4b05957ce8c6169"}, {"problem": 32, "code": "#(interleave % %)", "user": "5427b477e4b01498b1a71b27"}, {"problem": 32, "code": "(fn g ([[x & rest]] (if x (conj (g rest) x x))))", "user": "567b39b6e4b05957ce8c61a3"}, {"problem": 32, "code": "(fn duplicate [s]\n    (reduce concat (map (fn [x] (take 2 (repeat x))) s)))", "user": "567b62fce4b05957ce8c61a6"}, {"problem": 32, "code": "(partial reduce #(conj %1 %2 %2) [])", "user": "567c2322e4b05957ce8c61af"}, {"problem": 32, "code": "#(interleave % %)", "user": "54aa2462e4b09f271ff37cb4"}, {"problem": 32, "code": "(fn [s] (mapcat #(vector % %) s))", "user": "5638b88de4b0bfe05bf117e9"}, {"problem": 32, "code": "#(loop [acc [] col %]\n   (if (empty? col)\n     acc\n     (recur (conj acc (first col) (first col)) (rest col))))", "user": "567cef8ce4b05957ce8c61c1"}, {"problem": 32, "code": "reduce (fn [xs x] (concat xs (cons x (cons x ())))) ()", "user": "567d132ee4b05957ce8c61c3"}, {"problem": 32, "code": "(partial reduce\n               (fn [ss e] (conj (conj ss e) e))\n               [])", "user": "5679a4d0e4b05957ce8c618d"}, {"problem": 32, "code": "(fn [col] (mapcat (fn [e] [e e]) col))", "user": "5455a6d3e4b0e397800069e2"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "567b4641e4b05957ce8c61a5"}, {"problem": 32, "code": "(fn dup [s]\n  (if (empty? s) nil\n    (conj (dup (rest s)) (first s) (first s))))", "user": "567debb5e4b05957ce8c61ce"}, {"problem": 32, "code": "(fn my-duplicater\n   [coll]\n   (mapcat (fn [x] [x x]) coll))", "user": "567c7fefe4b05957ce8c61bc"}, {"problem": 32, "code": "#(interleave % %)", "user": "56798c1be4b05957ce8c618a"}, {"problem": 32, "code": "(fn [s] (mapcat (fn [x] (repeat 2 x)) s))", "user": "562add6de4b00e49c7cb4834"}, {"problem": 32, "code": "#((fn dup [s r]\n    (if (seq s)\n      (dup (rest s) (conj r (first s) (first s)))\n      r\n    )\n  )\n  % []\n)", "user": "567b9ff7e4b05957ce8c61a9"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "565da79be4b068f2fe63dc28"}, {"problem": 32, "code": "#(interleave % %)", "user": "5547432ee4b0a04f79299548"}, {"problem": 32, "code": "reduce (fn [x y] (conj (conj x y) y)) []", "user": "508f4343e4b0ea685a20f767"}, {"problem": 32, "code": "(fn [coll]\n  (let [coll1 coll]\n    (interleave coll coll1)))", "user": "567ea403e4b0feffd0d18eb5"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "565fe49ee4b068f2fe63dc46"}, {"problem": 32, "code": "#(interleave % %)", "user": "56795deae4b05957ce8c6187"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "566f7749e4b0a866af6896e9"}, {"problem": 32, "code": "(fn [s] (loop [s s\n               result []]\n          (if (empty? s)\n            result\n            (let [my-first (first s)]\n              \t(recur (rest s) (conj result my-first my-first) )))))", "user": "567d18c9e4b05957ce8c61c4"}, {"problem": 32, "code": "#(loop [arr %\n        out ()]\n   (if (empty? arr)\n     out\n     (recur (next arr) (concat out [(first arr) (first arr)]))\n     )\n  )", "user": "56814cbce4b0945ebc182a81"}, {"problem": 32, "code": "#(mapcat (fn [x] [x x]) %)", "user": "5680104ae4b0966858e4d8ea"}, {"problem": 32, "code": "(fn [s] (reduce #(conj %1 %2 %2) [] s))", "user": "568227fee4b0945ebc182a8a"}, {"problem": 32, "code": "(fn [coll]\n  (reduce (fn [result item] (conj result item item)) [] coll))", "user": "56822f37e4b0945ebc182a8d"}, {"problem": 32, "code": "(fn [l] (reduce concat (map #(list % %) l)))", "user": "56800ba1e4b0966858e4d8e8"}, {"problem": 32, "code": "#(interleave % %)", "user": "566efb2be4b0a866af6896e2"}, {"problem": 32, "code": "#(interleave % %)", "user": "56798d83e4b05957ce8c618b"}, {"problem": 32, "code": "(fn [x]\n  (loop [re []\n         collect x]\n    (if (empty? collect)\n      re\n      (recur (conj re (first collect) (first collect)) (rest collect)))))", "user": "56646a7fe4b0e91d5f5c5657"}, {"problem": 32, "code": "(fn [coll]\n  (mapcat #(repeat 2 %) coll))", "user": "55cbd29be4b0e31453f64a0a"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "56810479e4b0966858e4d8f8"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "56826ebce4b0945ebc182a93"}, {"problem": 32, "code": "#(apply concat (map (fn [x] (list x x)) %))", "user": "5680fff3e4b0966858e4d8f6"}, {"problem": 32, "code": "#(reverse ( reduce (fn [a b] (conj (conj a b) b)) () %))", "user": "56747b46e4b05957ce8c613b"}, {"problem": 32, "code": "(fn [seq-to-double]\n  (loop [[head & tail] seq-to-double\n         seq-doubled []]\n    (let [result (conj seq-doubled head head)]\n      (if (empty? tail)\n        result\n        (recur tail result)))))", "user": "567bf820e4b05957ce8c61ad"}, {"problem": 32, "code": "(fn [coll]\n  (apply concat\n  \t(map\n     #(vector % %)\n   \t  coll)))", "user": "5297dcc5e4b02ebb4ef75047"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "543b4746e4b032a45b86932c"}, {"problem": 32, "code": "(fn f [seq] (apply concat (map #(list % %) seq)))", "user": "5681afaae4b0945ebc182a87"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "568242bfe4b0945ebc182a8f"}, {"problem": 32, "code": "reduce (fn [acc val]\n         (conj acc val val)) []", "user": "567abc97e4b05957ce8c619d"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "568513c4e4b04eec3ec5cfc5"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "566812f0e4b04acd4f672de1"}, {"problem": 32, "code": "#(loop [v % r[]]\n   (if (empty? v)\n     r\n     (recur (rest v) (conj r (first v) (first v)))))", "user": "56815e2fe4b0945ebc182a84"}, {"problem": 32, "code": "(fn [s]\n    (apply concat (map #(repeat 2 %) s)))", "user": "5686640ae4b0dcc4269f4050"}, {"problem": 32, "code": "(fn [m] (loop [a m b []] (if-not (empty? a) (recur (rest a) (conj b (first a) (first a))) b)))", "user": "5683d2a9e4b0945ebc182aa0"}, {"problem": 32, "code": "#(interleave % %)", "user": "55664bb5e4b0c656e3ff1833"}, {"problem": 32, "code": "#(interleave % %)", "user": "5686e652e4b0dcc4269f4059"}, {"problem": 32, "code": "(fn [r v]\n  (if (= (count v) 0)\n    (reverse r)\n    (recur (cons (first v) (cons (first v) r)) (rest v))))\n[]", "user": "564dc062e4b0284900eef68c"}, {"problem": 32, "code": "(fn [lat]\n  (reduce concat (map #(take 2 (repeat %)) lat)))", "user": "56874171e4b0dcc4269f405c"}, {"problem": 32, "code": "(fn duplicate [x]\n  (apply concat (for [a x] (list a a))))", "user": "5688a01be4b0dcc4269f406d"}, {"problem": 32, "code": "#(for [pair (for [i %] [i i]) element pair] element)", "user": "5684e200e4b04eec3ec5cfc4"}, {"problem": 32, "code": "(fn duplicateX [x] (mapcat identity (map #(repeat 2 %) x)))", "user": "568820e8e4b0dcc4269f4067"}, {"problem": 32, "code": "(fn [s]\n  (loop [remaining s, dup true, result (vec '())]\n    (if (empty? remaining)\n      (seq result)\n      (if (true? dup)\n        (recur remaining false (conj result (first remaining)))\n        (recur (rest remaining) true (conj result (first remaining)))))))", "user": "55597fcce4b0deb715856e37"}, {"problem": 32, "code": "#(reduce (fn [new-arr v]\n           (concat new-arr [v v]))\n         []\n         %)", "user": "545bc5a8e4b01be26fd74658"}, {"problem": 32, "code": "#(mapcat (fn [x] [x x]) %)", "user": "5275f7a2e4b03e8d9a4a74d0"}, {"problem": 32, "code": "(fn [coll] (interleave coll coll))", "user": "56885c32e4b0dcc4269f4068"}, {"problem": 32, "code": "(fn [s] (interleave s s))", "user": "5637557ce4b0bfe05bf117d4"}, {"problem": 32, "code": "(fn duplicate\n  [coll]\n  (apply mapcat list (repeat 2 coll)))", "user": "56481722e4b0284900eef628"}, {"problem": 32, "code": "(fn [x] (apply concat (map list x x)))", "user": "56897739e4b0dcc4269f407d"}, {"problem": 32, "code": "(fn dup \n  [input]\n  (if (empty? input)\n    input\n    (conj (dup (drop 1 input)) (first input) (first input))))", "user": "55ee7977e4b0121d4835fdee"}, {"problem": 32, "code": "(fn dupli\n  [inputs]\n  (if (empty? inputs)\n    inputs\n    (conj (dupli (rest inputs)) (first inputs) (first inputs))\n    )\n  )", "user": "5688873ae4b0dcc4269f406b"}, {"problem": 32, "code": "(fn [coll] (reverse (reduce (fn [done todo] (conj (conj done todo) todo)) '() coll)))", "user": "567f988be4b0feffd0d18ebe"}, {"problem": 32, "code": "(fn [x] \n(reverse (reduce \n          (fn [result item]\n          (conj result item item))\n        '() x)))", "user": "568a13eae4b0dcc4269f4089"}, {"problem": 32, "code": "(fn example [s]\n  (let \n    [x (first s)\n     xs (rest s)]\n    (cond\n     (empty? s) '()\n     :else (cons x (cons x (example xs))))))", "user": "5689fd03e4b0dcc4269f4088"}, {"problem": 32, "code": "#(interleave % %)", "user": "5687fe58e4b0dcc4269f4065"}, {"problem": 32, "code": "#(mapcat (fn [a] (list a a)) %1)", "user": "564054a9e4b08d4f616f5edf"}, {"problem": 32, "code": "#(interleave %1 %1)", "user": "5673c886e4b05957ce8c6123"}, {"problem": 32, "code": "(fn [x] (mapcat (fn [y] [y y] ) x))", "user": "533a2f7be4b0e30313ee6cb8"}, {"problem": 32, "code": "reduce #(concat %1 [%2 %2]) ()", "user": "568a743ee4b0dcc4269f408e"}, {"problem": 32, "code": "#(mapcat (partial repeat 2) %)", "user": "55915fe9e4b0604b3f94d579"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "567c48e6e4b05957ce8c61b8"}, {"problem": 32, "code": "(fn [x] (loop [data x result ()]\n          (if-not (first data)\n            (reverse result)\n            (recur (rest data) (concat (repeat 2 (first data)) result)))))", "user": "567f034be4b0feffd0d18eba"}, {"problem": 32, "code": "(fn [lst] \n     (interleave lst lst))", "user": "5294a49be4b02ebb4ef7500f"}, {"problem": 32, "code": "#(loop [lst % dlst '()]\n    (if (empty? lst)\n      dlst\n      (do (println lst)\n          (recur (pop lst) (conj dlst (peek lst) (peek lst))))))", "user": "5688d6a8e4b0dcc4269f4071"}, {"problem": 32, "code": "(fn [coll]\n  (reverse \n   (reduce \n    #(cons %2 (cons %2 %1))\n     '() coll)))", "user": "568b781be4b0dcc4269f40a5"}, {"problem": 32, "code": "#(interleave % %)", "user": "528e7740e4b0239c8a67aee0"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "568c2d96e4b0dcc4269f40af"}, {"problem": 32, "code": "(fn duplicate-each [my-seq]\n  (reduce #(conj (conj %1 %2) %2) [] my-seq))", "user": "56889672e4b0dcc4269f406c"}, {"problem": 32, "code": "#(reverse (reduce (fn [base diff] (into base (repeat 2 diff))) nil %))", "user": "52e5f810e4b09f7907dd1468"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "568bddaee4b0dcc4269f40aa"}, {"problem": 32, "code": "#(interleave % %)", "user": "55f85b93e4b03cbcff9738ae"}, {"problem": 32, "code": "(fn [sqnc]\n  (reverse \n   (loop [old-sqnc sqnc\n          new-sqnc nil]\n     (if (empty? old-sqnc)\n       new-sqnc\n       (let [item (first old-sqnc)]\n         (recur (rest old-sqnc)\n                (cons item (cons item new-sqnc))))))))", "user": "566f3e18e4b0a866af6896e7"}, {"problem": 32, "code": "(fn [v] \n  (loop [in v out []]\n    (if (empty? in)\n      (reverse out)\n     (recur (rest in) (cons (first in) (cons (first in) out))))))", "user": "51be00cae4b0ff155d51d2b8"}, {"problem": 32, "code": "#(concat (interleave % %))", "user": "5579eed7e4b05c286339e09b"}, {"problem": 32, "code": "#(interleave % %)", "user": "568e450fe4b0dcc4269f40d0"}, {"problem": 32, "code": "#(reduce (fn [a b] (concat a (list b b)))\n         nil\n         %)", "user": "568e1871e4b0dcc4269f40cc"}, {"problem": 32, "code": "#(interleave % %)", "user": "52fbbadde4b047fd5583700f"}, {"problem": 32, "code": "reduce (fn [a b] (concat a (list b b))) ()", "user": "56912f93e4b0dcc4269f40ef"}, {"problem": 32, "code": "#(interleave % %)", "user": "4ff8487be4b0678c553fc397"}, {"problem": 32, "code": "#(interleave % %)", "user": "56066e82e4b08b23635d3173"}, {"problem": 32, "code": "(fn [coll] (apply concat (mapv #(vec [% %]) coll)))", "user": "568d4742e4b0dcc4269f40c2"}, {"problem": 32, "code": "#(apply concat (for [i %] [i i]))", "user": "5686b7c7e4b0dcc4269f4057"}, {"problem": 32, "code": "(fn [xs] (reduce #(conj %1 %2 %2) [] xs))", "user": "56743413e4b05957ce8c612e"}, {"problem": 32, "code": "(fn [coll] (loop [coll coll, acc '()] (if (empty? coll) (reverse acc) (recur (rest coll) (conj (conj acc (first coll)) (first coll)) \n                                                                             ) ; recur\n                                        ) ; if\n             ) ; loop\n  ) ; fn", "user": "4e268c6e535deb9a81d77ef4"}, {"problem": 32, "code": "(fn duplicate [coll]\n  (reduce concat (map #(repeat 2 %) coll)))", "user": "552bd5c2e4b0ffed3738f969"}, {"problem": 32, "code": "#(interleave % %)", "user": "569381a5e4b0dcc4269f4104"}, {"problem": 32, "code": "#(interleave % %)", "user": "52e1c276e4b09f7907dd142b"}, {"problem": 32, "code": "(fn [arg]\n  (apply concat (map #(repeat 2 %) arg)))", "user": "5691ef12e4b0dcc4269f40f8"}, {"problem": 32, "code": "reduce (fn [acc elm] (conj acc elm elm)) []", "user": "5694a50fe4b0dcc4269f4121"}, {"problem": 32, "code": "(fn\n  [s]\n  (reduce (fn [result item] (conj result item item)) [] s))", "user": "5693383fe4b0dcc4269f4100"}, {"problem": 32, "code": "(fn [n] (apply concat (map #(conj [] % %) n)))", "user": "5629de63e4b00e49c7cb4812"}, {"problem": 32, "code": "(fn [x] (reduce concat (map #(vector % %) x)))", "user": "5130c26fe4b08c712d3fae3a"}, {"problem": 32, "code": "#(interleave % %)", "user": "56175cf9e4b06b1bb2182a0f"}, {"problem": 32, "code": "#(loop [s %, r []]\n\t(if (empty? s)\n\t\tr\n\t\t(recur (rest s)\n\t\t\t\t(conj (conj r (first s)) (first s)))))", "user": "568cea39e4b0dcc4269f40bc"}, {"problem": 32, "code": "#(interleave % %)", "user": "5657fed1e4b0f9d632dd84ae"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "5690221ce4b0dcc4269f40e9"}, {"problem": 32, "code": "(partial reduce (fn [a b] (conj a b b)) [])", "user": "56967bc0e4b0dcc4269f4131"}, {"problem": 32, "code": "(fn [x] (reduce (fn [acc y] (conj acc y y)) [] x))", "user": "56946d43e4b0dcc4269f411e"}, {"problem": 32, "code": "(fn [lst] (apply concat (map (fn [x] (list x x)) lst)))", "user": "56791447e4b05957ce8c6183"}, {"problem": 32, "code": "(fn [x]  (reduce concat (map (fn [item] (list item item) ) x)))", "user": "56979bb7e4b0e0b3d3318cac"}, {"problem": 32, "code": "(fn [n] (reverse (reduce #(conj %1 %2 %2) '() n)))", "user": "550345fee4b086ebe8a79c6c"}, {"problem": 32, "code": "#(mapcat (fn [x] (list x x)) %)", "user": "569783bde4b0e0b3d3318cab"}, {"problem": 32, "code": "(fn [xs]\n  (reverse (reduce #(into %1 (list %2 %2)) () xs)))", "user": "5293a603e4b0239c8a67af42"}, {"problem": 32, "code": "#(interleave % %)", "user": "569ad037e4b0542e1f8d144f"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "566e6850e4b0a866af6896da"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "56795625e4b05957ce8c6186"}, {"problem": 32, "code": "reduce (fn [a b] (conj (conj a b) b)) []", "user": "569c40cee4b0542e1f8d1462"}, {"problem": 32, "code": "(fn duplicate-a-seq [coll]\n  (apply concat\n         (map #(list % %) coll)))", "user": "5693a53ee4b0dcc4269f4106"}, {"problem": 32, "code": "(fn [x]\n  (apply concat (map #(repeat 2 %) x) ))", "user": "56990b68e4b0542e1f8d143a"}, {"problem": 32, "code": "#(apply concat (map (fn [x] [x x]) %))", "user": "569aca1ee4b0542e1f8d144d"}, {"problem": 32, "code": "(fn [x] (apply concat (map #(identity [% %]) x)))", "user": "569d095fe4b0542e1f8d1470"}, {"problem": 32, "code": "(fn f [s]\n  (let [f*\n        (fn [acc s*]\n          (conj acc s* s*))]\n    (reduce f* [] s)))", "user": "569d4640e4b0542e1f8d147b"}, {"problem": 32, "code": ";(fn [x]\n;  (reduce concat []\n;  (map #(conj % (first %)) (partition 1 x))))\n#(interleave % %)", "user": "56949fc5e4b0dcc4269f4120"}, {"problem": 32, "code": "(fn [coll]\n  (reverse\n   (reduce #(cons %2 (cons %2 %1)) '() coll)))", "user": "4e6a8d28535d8ccf87e9fef5"}, {"problem": 32, "code": "mapcat (partial repeat 2)", "user": "5591cc56e4b0604b3f94d582"}, {"problem": 32, "code": "(fn\n      [l]\n      (sort (take (* 2 (count l)) (cycle l)))\n      )", "user": "5683b67ce4b0945ebc182a9f"}, {"problem": 32, "code": "(fn [s]\n   (reduce (fn [acc e] (conj acc e e)) [] s))", "user": "56936547e4b0dcc4269f4101"}, {"problem": 32, "code": "(partial reduce #(conj (conj %1 %2) %2) [])", "user": "569ab3e2e4b0542e1f8d144a"}, {"problem": 32, "code": "(fn [x] (reduce concat '() (map #(repeat 2 %) x)))", "user": "56992162e4b0542e1f8d143c"}, {"problem": 32, "code": "(fn [myseq]\n  (loop [return_list [] index 0]\n    (if (< index (count myseq))\n      (recur (conj return_list (nth myseq index) (nth myseq index)) (inc index))\n      (seq return_list))))", "user": "53d977f1e4b0e771c302547a"}, {"problem": 32, "code": "(fn dup-seq [lat]\n  (reduce concat (map #(take 2 (repeat %)) lat)))", "user": "569f8736e4b0542e1f8d1495"}, {"problem": 32, "code": "mapcat (partial repeat 2)", "user": "569d2283e4b0542e1f8d1474"}, {"problem": 32, "code": "reduce #(concat %1 (list %2 %2)) []", "user": "569c07b9e4b0542e1f8d145d"}, {"problem": 32, "code": "(fn f [x]\n  (if (empty? x)\n    '()\n    (cons (first x) (cons (first x) (f (rest x))))))", "user": "568c2f97e4b0dcc4269f40b0"}, {"problem": 32, "code": "#(interleave % %)", "user": "5651654be4b0f9d632dd845a"}, {"problem": 32, "code": "(fn [sequence] (mapcat #(identity [% %]) sequence))", "user": "562d15a6e4b0a45d2ff83019"}, {"problem": 32, "code": "#(apply concat (map vector %1 %1))", "user": "56824e1be4b0945ebc182a91"}, {"problem": 32, "code": "(fn [arg]\n   (reverse (loop [a 0 result '() coll arg]\n              (if (= a (count arg))\n                result\n                (recur (inc a) (conj (conj result (first coll)) (first coll)) (rest coll))\n                )\n              ))\n   )", "user": "5002c798e4b0678c553fc42d"}, {"problem": 32, "code": "(fn [arr] (apply concat (map #(vector % %) arr)))", "user": "55dd7f72e4b050e68259b3c4"}, {"problem": 32, "code": "(fn [c]\n  (sort (concat c c)))", "user": "54a80855e4b09f271ff37c9e"}, {"problem": 32, "code": "(fn [input] \n   (loop [in input out []]\n     (if (empty? in)\n       out\n       (recur (rest in)\n              (conj out (first in) (first in))\n              )\n       )\n     )\n   )", "user": "569425b6e4b0dcc4269f410e"}, {"problem": 32, "code": "#(loop [items % result []]\n   (if (empty? items)\n     result\n     (let [f (first items)]\n       (recur (rest items) (conj (conj result f) f))\n       )\n     )\n   )", "user": "569ef93de4b0542e1f8d148b"}, {"problem": 32, "code": "#(for [col % i [0 1]] col)", "user": "569f33c7e4b0542e1f8d148f"}, {"problem": 32, "code": "mapcat #(list  % %)", "user": "56903cb9e4b0dcc4269f40eb"}, {"problem": 32, "code": "(fn dup [x]\n  (if (empty? x) '()\n    (conj (dup (rest x)) (first x) (first x))))", "user": "569f99cce4b0542e1f8d1497"}, {"problem": 32, "code": "(fn [coll]\n  (reduce\n   #(conj %1 %2 %2)\n   []\n   coll))", "user": "543f1765e4b032a45b86935a"}, {"problem": 32, "code": "#(reduce (fn [accum x] (conj accum x x)) [] %)", "user": "56a38a4ce4b0542e1f8d14cc"}, {"problem": 32, "code": "(fn [m]\n  (loop [r [] v m]\n    (if (empty? v)\n      r\n      (recur (conj r (first v) (first v)) (rest v)))))", "user": "569ff6dbe4b0542e1f8d149c"}, {"problem": 32, "code": "#(apply concat (map (fn [x] [x x]) %))", "user": "569adec2e4b0542e1f8d1450"}, {"problem": 32, "code": "mapcat #(vector % %)", "user": "569951e4e4b0542e1f8d143e"}, {"problem": 32, "code": "(fn [x] (interleave x x))", "user": "5689bd04e4b0dcc4269f4082"}, {"problem": 32, "code": "#(interleave % %)", "user": "55d0391de4b0e31453f64a37"}, {"problem": 32, "code": "(fn [x]\n    \n(reduce\n  (fn [res elem] (concat res ( concat elem elem) )  )\n  []\n  (partition 1  x )\n )\n \n  );END: fn", "user": "56a358d0e4b0542e1f8d14c9"}, {"problem": 32, "code": "(fn [s] (interleave s s))", "user": "56a01895e4b0542e1f8d149f"}, {"problem": 32, "code": "(fn dup [x]\n  (loop [a x\n         result []]\n    (if (> (count a) 0)\n      (recur (rest a) (conj result (first a) (first a)))\n      result)))", "user": "56a3c89ae4b0542e1f8d14cf"}, {"problem": 32, "code": "(fn [x]\n   (reduce\n    #(conj %1 %2 %2) [] x))", "user": "56012cd7e4b04bb52996e17d"}, {"problem": 32, "code": "(fn [x] (reduce concat (map #(take 2 (repeat %)) x)))", "user": "55bf785ee4b01b9910ae2a14"}, {"problem": 32, "code": "#(interleave % %)", "user": "55a2ef1ae4b0acc240e3152d"}, {"problem": 32, "code": "(fn [coll]\n(apply concat\n  (for [e coll]\n     (list e e))))", "user": "5167e8ace4b0c5a4140a309a"}, {"problem": 32, "code": "(fn [coll]\n  (reduce (fn [acc x] (conj acc x x)) [] coll))", "user": "56a51f26e4b0542e1f8d14e0"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "56a1b854e4b0542e1f8d14b2"}, {"problem": 32, "code": "#(interleave % %)", "user": "56877fcbe4b0dcc4269f405e"}, {"problem": 32, "code": "(fn [args]\n   (reverse (reduce #(conj %1 %2 %2) '() args)))", "user": "5576961be4b05c286339e06f"}, {"problem": 32, "code": "(fn [in]\n  (loop [remaining (seq in)\n         acc (vector)\n         fst (first remaining)]\n    (if (empty? remaining)\n      acc\n      (recur (rest remaining) (into acc [fst fst]) (second remaining)))))", "user": "51a7bf26e4b0da5f497bde8c"}, {"problem": 32, "code": "(fn [col]\n   (mapcat #(list % %) col))", "user": "506cc221e4b0a302964c548f"}, {"problem": 32, "code": "#(mapcat (fn [s] (repeat 2 s)) %)", "user": "569ce6fee4b0542e1f8d146c"}, {"problem": 32, "code": "(fn duplicate\n  ([gseq]\n   (duplicate gseq '()))\n  ([gseq res]\n   (if (empty? gseq)\n     (reverse res)\n     (duplicate (rest gseq) (conj res (first gseq) (first gseq)))\n     ))\n  )", "user": "56826c2fe4b0945ebc182a92"}, {"problem": 32, "code": "#(interleave % %)", "user": "56a6051fe4b0542e1f8d14e5"}, {"problem": 32, "code": "(fn [s] (apply concat (map #(list % %) s)))", "user": "550b1c2ce4b06e50f9beb13b"}, {"problem": 32, "code": "(fn [coll]\n  (reduce (fn [v x]\n            (conj v x x))\n          []\n          coll))", "user": "56a79eb0e4b07966d5a8a05d"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "56a76f36e4b07966d5a8a05b"}, {"problem": 32, "code": "(fn f [s] \n  (let [f* \n        (fn [acc s*] \n          (conj acc s* s*))] \n    (reduce f* [] s)))", "user": "56942923e4b0dcc4269f4112"}, {"problem": 32, "code": "#(reduce (fn [acc nxt] (concat acc [nxt, nxt])) [] %1)", "user": "5694290fe4b0dcc4269f4110"}, {"problem": 32, "code": "#(reduce concat '() (map (partial repeat 2) %))", "user": "5243233fe4b076204b44faac"}, {"problem": 32, "code": "#(interleave % %)", "user": "565f8fd2e4b068f2fe63dc41"}, {"problem": 32, "code": "#(-> (into % %) sort)", "user": "5638d2d1e4b0bfe05bf117eb"}, {"problem": 32, "code": "(fn [s] (reduce concat (map #(take 2 (repeat %)) s)))", "user": "55d1ec3ee4b0e31453f64a4c"}, {"problem": 32, "code": "#(interleave %1 %1)", "user": "56a75810e4b0542e1f8d14fc"}, {"problem": 32, "code": "(fn [a-coll]\n  (->> a-coll\n       (map (fn [elt] [elt elt]))\n       (apply concat)))", "user": "5688e403e4b0dcc4269f4072"}, {"problem": 32, "code": "(fn [xs] (let [dup (fn [xs] (mapcat (fn [x] [x x]) xs))] (dup xs)))", "user": "568c4bc8e4b0dcc4269f40b2"}, {"problem": 32, "code": "(fn double [x]\n  (loop [in x out '()]\n    (if (empty? in)\n      (reverse out)\n      (recur (rest in) (conj out (first in) (first in))))))", "user": "56942b5fe4b0dcc4269f411c"}, {"problem": 32, "code": "#(interleave %1 %1)", "user": "56aad332e4b03c432f187337"}, {"problem": 32, "code": "mapcat #(vector % %)", "user": "56abeb1fe4b03c432f187344"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "55f9b2b6e4b03cbcff9738c8"}, {"problem": 32, "code": "(fn [coll] (reduce #(conj %1 %2 %2) [] coll\n                   )\n  )", "user": "56a69451e4b0542e1f8d14ec"}, {"problem": 32, "code": "#(apply concat (map (fn [x] (list x x)) %))", "user": "56ac81ace4b03c432f187347"}, {"problem": 32, "code": "#(interleave % %)", "user": "51b01309e4b0c53cf2e68a57"}, {"problem": 32, "code": "(fn [coll] (reverse (reduce (fn [duplicate-coll x] (into duplicate-coll [x x])) '() coll)))", "user": "55c0f842e4b01b9910ae2a2b"}, {"problem": 32, "code": "#(interleave % %)", "user": "56a14a32e4b0542e1f8d14ad"}, {"problem": 32, "code": "#(sort compare (concat % %))", "user": "563cdfdfe4b0bfe05bf11840"}, {"problem": 32, "code": "reduce (fn [a x] (into a (list x x))) []", "user": "558d6beae4b0277789237643"}, {"problem": 32, "code": "#(for [x %\n       y [x x]]\n  y)", "user": "56a9ea17e4b07966d5a8a07c"}, {"problem": 32, "code": "#(loop [l1 % l2 '() ]\n  (cond \n    (empty? l1) (reverse l2)\n    :else (recur (rest l1) (concat [(first l1)(first l1)] l2))))", "user": "55c2367ee4b0e31453f64978"}, {"problem": 32, "code": "(fn [x](reverse( reduce #(into %1 [%2 %2]) '() x)))", "user": "56ae4c21e4b03c432f18735c"}, {"problem": 32, "code": "(fn [col] \n  (reduce \n   (fn [x y] (concat x y)) \n   (for [x col \n         :let [y (repeat 2 x)]] \n     y)))", "user": "55b1d0b5e4b0da326a65cf73"}, {"problem": 32, "code": "(fn [coll]\n  (apply concat (map #(replicate 2 %) coll)))", "user": "5695e96ae4b0dcc4269f412c"}, {"problem": 32, "code": "(fn [items]\n  (let [a2 (atom [])]\n    (doseq [item items]\n      (swap! a2 #(conj %1 item))\n      (swap! a2 #(conj %1 item)))\n    @a2))", "user": "5669eb9ae4b04acd4f672e02"}, {"problem": 32, "code": "#(interleave % %)", "user": "569dd6e8e4b0542e1f8d1480"}, {"problem": 32, "code": "(fn [x] (vec (mapcat #(conj nil % %) x)))", "user": "56a7be01e4b07966d5a8a05e"}, {"problem": 32, "code": "(fn [x]\n  (let [y x]\n    (seq (sort (into x y)))))", "user": "56ae749fe4b03c432f18735f"}, {"problem": 32, "code": "#(sort (concat % %))", "user": "5693cc39e4b0dcc4269f4108"}, {"problem": 32, "code": "(fn [coll]\n  (seq (reduce (fn [result val]\n            (conj result val val)) [] coll)))", "user": "54df838de4b024c67c0cf7ae"}, {"problem": 32, "code": "(fn [x]\n  (loop [x x result []]\n    (if (empty? x)\n      result\n      (recur (rest x) (conj result (first x) (first x))))))", "user": "5694129de4b0dcc4269f410c"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "56941e48e4b0dcc4269f410d"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "56942970e4b0dcc4269f4118"}, {"problem": 32, "code": "(fn [x]\n  (loop [x x dub []]\n    (if (empty? x)\n      dub\n    (recur (rest x) (conj dub (nth x 0) (nth x 0)))))\n  )", "user": "5694292ee4b0dcc4269f4113"}, {"problem": 32, "code": "#(loop [ss % r '[]]\n     (if (empty?  ss)\n      r\n      (recur (rest ss) (conj r (first ss) (first ss)))))", "user": "56a1fce9e4b0542e1f8d14b7"}, {"problem": 32, "code": "#(reverse (reduce (fn [source e] (conj source e e)) '() %))", "user": "56b3146ae4b0982f16b37e0f"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5693b40ce4b0dcc4269f4107"}, {"problem": 32, "code": "#(interleave % %)", "user": "55ed5a2de4b0121d4835fdd8"}, {"problem": 32, "code": "(fn [s]\n    (loop [s s result []]\n\t\t(if (empty? s)\n\t    \tresult\t\n\t\t\t(recur (rest s) (conj (conj result (first s)) (first s))))))", "user": "569429c7e4b0dcc4269f411a"}, {"problem": 32, "code": "reduce #(conj % %2 %2) []", "user": "56b1ab17e4b0982f16b37df1"}, {"problem": 32, "code": "(fn d [s]\n  (reverse\n   (loop [res nil sq s]\n     (if (empty? sq)\n       res\n       (recur\n        (conj (conj res (first sq)) (first sq))\n        (rest sq)\n       )\n     )\n   )\n  )\n)", "user": "56b36283e4b0982f16b37e18"}, {"problem": 32, "code": "mapcat #(conj () % %)", "user": "5242e1dae4b076204b44fa96"}, {"problem": 32, "code": "reduce (fn [acc v] (conj acc v v)) []", "user": "5617a540e4b06b1bb2182a12"}, {"problem": 32, "code": "#(interleave % %)", "user": "56ae214ce4b03c432f18735a"}, {"problem": 32, "code": "#(reduce (fn [s v]\n           (apply conj s (list v v)))\n         []\n         %)", "user": "56b18445e4b0982f16b37dee"}, {"problem": 32, "code": "(fn [a] (seq (reduce #(into %1 [%2 %2]) [] a)))", "user": "5655e056e4b0f9d632dd849b"}, {"problem": 32, "code": "(fn myfn [x]\n  (reverse (reduce\n    (fn [a y]\n      (conj a y y))\n    () x)))", "user": "56b280e3e4b0982f16b37e06"}, {"problem": 32, "code": "(fn [coll] (reverse (reduce #(cons %2 (cons %2 %1)) '() coll)))", "user": "56942962e4b0dcc4269f4117"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "56b295f7e4b0982f16b37e08"}, {"problem": 32, "code": "(fn [sq] (reverse (reduce (fn [acc v] (conj (conj acc v) v)) '() sq)))", "user": "53307a23e4b019098a6f8b5d"}, {"problem": 32, "code": "(fn dup [xs]\n  (if (empty? xs)\n    nil\n    (cons (first xs) (cons (first xs) (dup (rest xs))))))", "user": "569ce7e6e4b0542e1f8d146d"}, {"problem": 32, "code": "#(interleave % %)", "user": "56b965d9e4b0f26550335931"}, {"problem": 32, "code": "(fn [lis] (reverse (reduce #(cons %2 (cons %2 %1)) [] lis)))", "user": "56b6e354e4b0982f16b37e41"}, {"problem": 32, "code": "#(apply concat (map (partial repeat 2) %))", "user": "56b97792e4b0f26550335932"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "54be7e93e4b0ed20f4ff6eed"}, {"problem": 32, "code": "(fn [t] (loop [target t  \n               a []\n               ] \n          (cond\n           (empty? target) a\n           :else \n           (recur \n            (rest target) \n            (conj a (first target) (first target))))))", "user": "56af842de4b061e3ca319ad2"}, {"problem": 32, "code": "(fn duplicate [l] (if (empty? l) '() (cons (first l) (cons (first l) (duplicate (rest l)))) ))", "user": "56b5019ce4b0982f16b37e2c"}, {"problem": 32, "code": "(fn dupliate [x]\n  (let [duplicate*\n        (fn [acc x*]\n          (conj acc x* x*))]\n    (reduce duplicate* [] x)))", "user": "5694284de4b0dcc4269f410f"}, {"problem": 32, "code": "#(interleave % %)", "user": "56b86e64e4b0f26550335924"}, {"problem": 32, "code": "(fn dup [x]\n  (reduce concat (map #(take 2 (repeat %)) x)))", "user": "56942939e4b0dcc4269f4114"}, {"problem": 32, "code": "(fn [l] (reduce concat (map #(take 2 (repeat %)) l)))", "user": "56942923e4b0dcc4269f4111"}, {"problem": 32, "code": "(fn dup [[head & tail]]\n  (if (nil? head)\n    '()\n  \t(concat (list head head) (dup tail))))", "user": "568c92c6e4b0dcc4269f40b8"}, {"problem": 32, "code": "(fn dupe [[f & r]] (lazy-seq (cons f (cons f (if r (dupe r))))))", "user": "56baa68ce4b0f26550335947"}, {"problem": 32, "code": "(fn [coll] (mapcat #(repeat 2 %) coll))", "user": "56942944e4b0dcc4269f4115"}, {"problem": 32, "code": "#(apply interleave (take 2 (repeat %)))", "user": "56baab13e4b0f26550335948"}, {"problem": 32, "code": "mapcat #(vector % %)", "user": "54b61cb1e4b05787c3b163b3"}, {"problem": 32, "code": "reduce #(concat %1 (list %2 %2)) ()", "user": "56bb9ccce4b0f26550335959"}, {"problem": 32, "code": "(fn abc\n  [L]\n  (if (= (count L) 1)\n    (concat L L)\n    (concat (list (first L)) (list (first L)) (abc (rest L)))\n  )\n)", "user": "56bb3a4be4b0f26550335951"}, {"problem": 32, "code": "#(sort (apply conj % %))", "user": "56b755b5e4b0982f16b37e46"}, {"problem": 32, "code": "(fn [xs]\n    (reverse\n      (reduce #(concat (list %2 %2) %1)\n              '()\n              xs)))", "user": "56bcc2b2e4b0f26550335965"}, {"problem": 32, "code": "#(interleave % %)", "user": "531a0709e4b08068f379ed87"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "569637d8e4b0dcc4269f4130"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "56bca51ae4b0f26550335963"}, {"problem": 32, "code": "(fn [in]\n  (loop [in in\n         out ()]\n    (if (empty? in)\n      out\n      (recur (rest in)\n             (concat out\n                   (repeat 2 (first in)))))))", "user": "56b2300ce4b0982f16b37dff"}, {"problem": 32, "code": "(fn duplicate-each [coll]\n  (mapcat #(list % %) coll))", "user": "56ba1406e4b0f2655033593c"}, {"problem": 32, "code": "(fn [c] (reduce #(concat %1 [%2 %2]) [] c))", "user": "51f38193e4b0fca5e8b48226"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "56bf4ac0e4b0f26550335985"}, {"problem": 32, "code": "#(interleave % %)", "user": "56942a8be4b0dcc4269f411b"}, {"problem": 32, "code": "(fn dup [xs]\n  (if (empty? xs)\n    xs\n    (conj (conj (dup (rest xs)) (first xs)) (first xs))))", "user": "56bfcba1e4b060a8e693e3a1"}, {"problem": 32, "code": "(fn [ls] \n  (mapcat #(repeat 2 %) ls))", "user": "56bb81ebe4b0f26550335957"}, {"problem": 32, "code": "#(interleave % %)", "user": "564b1f34e4b0284900eef662"}, {"problem": 32, "code": "(fn\n  [coll]\n  (reduce #(conj %1 %2 %2) [] coll))", "user": "5609d328e4b05f002753deee"}, {"problem": 32, "code": "(fn [s] (interleave s s))", "user": "563536f8e4b0bfe05bf117c5"}, {"problem": 32, "code": "#(reduce (fn [l, v] (conj l v v)) [] %)", "user": "525636dfe4b0541d1855ba0d"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "56c040eee4b060a8e693e3a5"}, {"problem": 32, "code": "#(interleave % % )", "user": "56c1549ae4b0839206b9d686"}, {"problem": 32, "code": "(fn [v] (loop [x () y v] (if (empty? y) x (recur (let [n (last y)] (conj x n n)) (butlast y)))))", "user": "56bdda49e4b0f26550335977"}, {"problem": 32, "code": "(fn [in]\n  (reduce (fn [x y] (conj (conj x y) y))\n          []\n          in))", "user": "56c12aa2e4b0839206b9d682"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "56b80ad1e4b0f26550335921"}, {"problem": 32, "code": "(fn \n  [coll]\n  (mapcat #(repeat 2 %) coll))", "user": "56a36f76e4b0542e1f8d14ca"}, {"problem": 32, "code": "#(interleave % %)", "user": "56c33ceae4b05cc29241ee89"}, {"problem": 32, "code": "mapcat #(vector % %)", "user": "56c08696e4b060a8e693e3aa"}, {"problem": 32, "code": "#(mapcat list % %)", "user": "56c1e720e4b0839206b9d68b"}, {"problem": 32, "code": "(fn [c] (reduce #(conj %1 %2 %2) [] c))", "user": "55e206f3e4b050e68259b429"}, {"problem": 32, "code": "(fn doop [x]\n  (mapcat identity (map #(cons (first %) %) (partition-all 1 x))))", "user": "56c6490de4b05cc29241eeaf"}, {"problem": 32, "code": "(fn\n  [inp]\n  \n  (loop [val inp\n         outp '()]\n    \n    (if (empty? val)\n      (into '()  outp) \n\n      (recur (rest val)\n             (cons (first val) (cons (first val) outp ) )\n             )\n      \n      ) \n    )  \n  )", "user": "56b7c32ee4b0982f16b37e48"}, {"problem": 32, "code": "(fn [coll] (interleave coll coll))", "user": "56499a5de4b0284900eef644"}, {"problem": 32, "code": "(fn [xs]\n  (loop [elems xs\n         res []]\n    (if-not (empty? elems)\n      (recur (rest elems) (into res [(first elems) (first elems)]))\n      res)))", "user": "52fe31d5e4b047fd55837038"}, {"problem": 32, "code": "#(loop [remain % result []]\n   (if (empty? remain)\n     result\n     (recur (next remain) (conj (conj result (first remain)) (first remain)))))", "user": "567e418fe4b0feffd0d18eb1"}, {"problem": 32, "code": "(fn func [s]\n  (loop [s s res []]\n    (if (empty? s) res (recur (rest s) (conj res (first s) (first s))))))", "user": "55f95782e4b03cbcff9738bf"}, {"problem": 32, "code": "(fn [[& args]]\n     (reduce #(conj %1 %2 %2) [] args))", "user": "56c04bd3e4b060a8e693e3a6"}, {"problem": 32, "code": "#(interleave % %)", "user": "564857c2e4b0284900eef62e"}, {"problem": 32, "code": "mapcat (fn [i] [i i])", "user": "56aed78fe4b03c432f187363"}, {"problem": 32, "code": "#(interleave % %)", "user": "56c4f43ce4b05cc29241ee9c"}, {"problem": 32, "code": "(fn [x] (apply concat (map #(vector % %) x)))", "user": "56b2573ce4b0982f16b37e02"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "565418ede4b0f9d632dd847d"}, {"problem": 32, "code": "#(interleave % %)", "user": "56c33bb9e4b05cc29241ee87"}, {"problem": 32, "code": "#(interleave % %)", "user": "56c23ca6e4b05cc29241ee7f"}, {"problem": 32, "code": "(fn [input]\n    (loop [step input result ()]\n       (if (empty? step)\n          (reverse result)\n          (recur (rest step)\n                 (cons (first step)\n                       (cons (first step) result)))\n       )\n    )\n)", "user": "506af7d8e4b0a2a5463de37d"}, {"problem": 32, "code": "(fn [s] \n  (reduce \n    #(conj %1 %2 %2)\n    []\n    s))", "user": "5591b61ee4b0604b3f94d580"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "56a37ccee4b0542e1f8d14cb"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "566470b9e4b0e91d5f5c5658"}, {"problem": 32, "code": "(fn [s]\n  (for [x s y (range 2)] x))", "user": "56c9970ce4b0ed865f9758de"}, {"problem": 32, "code": "#(interleave %1 %1)", "user": "5602f5fce4b04bb52996e1ad"}, {"problem": 32, "code": "(fn [x] (interleave x x))", "user": "56cb3bebe4b0ea9b8538f728"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "56c9d136e4b0ed865f9758e2"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "548a3dc6e4b0e286459a11f2"}, {"problem": 32, "code": "(fn [coll] (mapcat #(replicate 2 %) coll))", "user": "555d4421e4b0a2eb076a39a8"}, {"problem": 32, "code": "#(mapcat (fn [e] (repeat 2 e)) %)", "user": "569f4dabe4b0542e1f8d1491"}, {"problem": 32, "code": "#(interleave % %)", "user": "56c792ace4b0ed865f9758c4"}, {"problem": 32, "code": "#(interleave % %)", "user": "55c5e781e4b0e31453f649b8"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "56cba075e4b0ea9b8538f737"}, {"problem": 32, "code": "#(interleave % %)", "user": "56cccd99e4b0ea9b8538f743"}, {"problem": 32, "code": "(fn dup [coll]\n  (if (empty? coll) \n    coll \n    (cons (first coll) (cons (first coll) (dup (rest coll))))))", "user": "56cb3a61e4b0ea9b8538f726"}, {"problem": 32, "code": "(fn func [l] (if (empty? l) [] (cons (first l) (cons (first l) (func (rest l))))))", "user": "56cb483ee4b0ea9b8538f72d"}, {"problem": 32, "code": "#(interleave % %)", "user": "56cddf9de4b0ea9b8538f753"}, {"problem": 32, "code": "(fn  [x]\n  (reduce (fn [acc ele] (conj acc ele ele)) [] x))", "user": "56cdda13e4b0ea9b8538f752"}, {"problem": 32, "code": "#(reduce (fn [x y] (into x [y y])) [] %)", "user": "56cb0abce4b0ea9b8538f722"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "56942955e4b0dcc4269f4116"}, {"problem": 32, "code": "(fn [sq]\n  (reduce (fn [ls x]\n            (conj ls x x))\n          '()\n          (reverse sq)))", "user": "55f73078e4b06e875b46cea4"}, {"problem": 32, "code": "(fn [coil]\n  (loop [src coil dst '()]\n    (if (empty? src)\n      (reverse dst)\n      (recur (rest src) (conj (conj dst (first src)) (first src))))))", "user": "56c55fbce4b05cc29241eea5"}, {"problem": 32, "code": "(fn [input-seq]\n  (loop [dup [] left input-seq]\n   (if (empty? left)\n     dup\n     (recur (into dup [(first left) (first left)] ) (rest left)))))", "user": "560d4994e4b05f002753df3c"}, {"problem": 32, "code": "#(interleave % %)", "user": "56c7d8dee4b0ed865f9758c9"}, {"problem": 32, "code": "(fn [coll]\n   (reduce #(conj (conj %1 %2) %2) [] coll))", "user": "56c60b36e4b05cc29241eead"}, {"problem": 32, "code": "(fn [s]\n   (let [acc []]\n    (reverse (reduce #(conj %1 %2 %2) '() s))))", "user": "56cbb352e4b0ea9b8538f738"}, {"problem": 32, "code": "(fn [a] (reduce #(concat %1 [%2 %2]) [] a))", "user": "4f2858ece4b0d6649770a016"}, {"problem": 32, "code": "#(seq (reduce (fn [r x] \n                (-> r (conj x) (conj x)))\n              [] %))", "user": "56c3afdde4b05cc29241ee91"}, {"problem": 32, "code": "(partial reduce (fn [col x] (concat col [x x])) ())", "user": "56b49f72e4b0982f16b37e23"}, {"problem": 32, "code": "(fn [col] (apply concat (map #(list % %) col)))", "user": "53cd5226e4b00fb29b2212e0"}, {"problem": 32, "code": "#(interleave % %)", "user": "56d05ba2e4b0ea9b8538f77d"}, {"problem": 32, "code": "#(mapcat vector % %)", "user": "56d1afd9e4b0ea9b8538f791"}, {"problem": 32, "code": "mapcat #(take 2 (repeat %))", "user": "52faf67ce4b047fd55837005"}, {"problem": 32, "code": "#(interleave % %)", "user": "56cb7096e4b0ea9b8538f732"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "56cb3acfe4b0ea9b8538f727"}, {"problem": 32, "code": "#(interleave % %)", "user": "56d228f3e4b0ea9b8538f79a"}, {"problem": 32, "code": "(fn dupe [[x & xs]]\n  (cond\n   (nil? x) nil\n   :else (concat (seq [x x]) (dupe xs))\n  )\n)", "user": "56433d34e4b08d4f616f5f23"}, {"problem": 32, "code": "mapcat #(vector % %)", "user": "55ed1575e4b0121d4835fdd3"}, {"problem": 32, "code": "(fn duplicate [lst]\n  (loop [x lst accum []]\n    (if (empty? x)\n      accum\n      (recur (rest x) (conj accum (first x) (first x))\n             ))))", "user": "56cf80f9e4b0ea9b8538f76a"}, {"problem": 32, "code": "#(interleave % %)", "user": "542a8d07e4b01498b1a71b43"}, {"problem": 32, "code": "(fn [x]\n  (loop [duplicate-list []\n         destruct-list x]\n    (if (not-empty destruct-list)\n    (recur (conj (conj duplicate-list (first destruct-list)) (first destruct-list)) (rest destruct-list))\n    duplicate-list)))", "user": "56491d05e4b0284900eef63a"}, {"problem": 32, "code": "#(interleave % %)", "user": "56d63729e4b0ea9b8538f7ca"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "563a79e5e4b0bfe05bf117fe"}, {"problem": 32, "code": "reduce #(into %1 [%2 %2]) []", "user": "56c70cc2e4b0ed865f9758b5"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "56a0ac99e4b0542e1f8d14a6"}, {"problem": 32, "code": "#(reduce concat (map (fn [n] (take 2 (repeat n))) %))", "user": "56d47528e4b0ea9b8538f7b7"}, {"problem": 32, "code": "(fn [coll] (reduce #(concat %1 [%2 %2]) (empty coll) coll))", "user": "56c3aca0e4b05cc29241ee90"}, {"problem": 32, "code": "#(seq (reduce (fn [c v] (conj (conj c v) v)) [] %))", "user": "55b6a63ae4b01b9910ae299b"}, {"problem": 32, "code": "#(interleave % %)", "user": "56d69d28e4b0ea9b8538f7cf"}, {"problem": 32, "code": "mapcat #(vector % %)", "user": "56d80542e4b0ea9b8538f7e1"}, {"problem": 32, "code": "(fn double-entry [coll]\n(reduce (fn [c v]\n(into c [v v]) )\n(empty coll) coll\n)\n)", "user": "56d74c88e4b0ea9b8538f7d9"}, {"problem": 32, "code": "(fn [x] (loop [consume x return '()] (if (empty? consume) (reverse return) (recur (rest consume) (cons (first consume) (cons (first consume) return))))))", "user": "56d5fd24e4b0ea9b8538f7c5"}, {"problem": 32, "code": "(fn [s]\n  (reduce #(conj (conj %1 %2) %2) [] s))", "user": "56d4b22de4b0ea9b8538f7bb"}, {"problem": 32, "code": "#(interleave % %)", "user": "56d68cbae4b0ea9b8538f7cd"}, {"problem": 32, "code": "(fn [sq] (mapcat #(list % %) sq))", "user": "56be8649e4b0f26550335983"}, {"problem": 32, "code": "(fn [lst] (reduce #(concat %1 (repeat 2 %2)) () lst))", "user": "56d8a63fe4b0ea9b8538f7e8"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "56d957c2e4b0ea9b8538f7f1"}, {"problem": 32, "code": "(fn [s] (mapcat #(repeat 2 %)s) )", "user": "567d75ebe4b05957ce8c61c9"}, {"problem": 32, "code": "(fn [xs] \n  (loop [xs (reverse xs) acc '()] \n    (if (not-empty xs) (let [x (first xs)] (recur (rest xs) (cons x (cons x acc)))) acc)))", "user": "56d5bc66e4b0ea9b8538f7c2"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "56d8fa43e4b0ea9b8538f7ec"}, {"problem": 32, "code": "#(interleave % %)", "user": "527bd988e4b03e8d9a4a759d"}, {"problem": 32, "code": "(fn double-duplicate\n  [seq]\n  (if (empty? seq)\n    []\n    (let [[first & rest] seq]\n      (concat (list first first) (double-duplicate rest)))))", "user": "56cf9d4fe4b0ea9b8538f76c"}, {"problem": 32, "code": "mapcat #(concat (take 2 (repeat %)))", "user": "52c634b1e4b0c2d177d6210a"}, {"problem": 32, "code": "#(sort (concat % %))", "user": "56165702e4b06b1bb2182a02"}, {"problem": 32, "code": "(fn duplicate [coll] (interleave coll coll))", "user": "56b3b12ee4b0982f16b37e1c"}, {"problem": 32, "code": "#(loop [in % out []]\n   (if (empty? in)\n     (seq out)\n     (recur (rest in) (conj out (first in) (first in)))))", "user": "56dbe1f4e4b0ea9b8538f813"}, {"problem": 32, "code": "#(interleave % %)", "user": "56c560ede4b05cc29241eea6"}, {"problem": 32, "code": "(fn [xs] (reduce #(conj % %2 %2) [] xs))", "user": "560ee566e4b05f002753df57"}, {"problem": 32, "code": "(fn [coll]\n  (mapcat #(vector % %) coll))", "user": "56603e5fe4b068f2fe63dc4a"}, {"problem": 32, "code": "#(interleave % %)", "user": "546b89ffe4b00cfc9eacc16d"}, {"problem": 32, "code": "(fn dup-seq [coll]\n (mapcat #(list % %) coll))", "user": "557e56aae4b05c286339e0d5"}, {"problem": 32, "code": ";; #(interleave % %)\nreduce #(conj %1 %2 %2) []", "user": "56df9203e4b0ca2494a095fc"}, {"problem": 32, "code": "mapcat (fn [x] [x x])", "user": "550b502ae4b06e50f9beb13f"}, {"problem": 32, "code": "(fn [s]\n  (interleave s s))", "user": "56308326e4b073c1cf7a9be9"}, {"problem": 32, "code": "#(interleave % %)", "user": "56c749d8e4b0ed865f9758ba"}, {"problem": 32, "code": "(fn func [x] (reverse (reduce #(conj %1 %2 %2) '() x)))", "user": "56cef5e8e4b0ea9b8538f762"}, {"problem": 32, "code": "(fn [l] (apply concat\n                   (map #(repeat 2 %) l)))", "user": "55009d17e4b07d26eda61d5d"}, {"problem": 32, "code": "(fn [lst] (reduce #(conj % %2 %2) [] lst))", "user": "56e08e4fe4b0ca2494a0960b"}, {"problem": 32, "code": "(fn [x] (interleave x x))", "user": "56db8fbde4b0ea9b8538f80c"}, {"problem": 32, "code": "mapcat #(identity [% %])", "user": "56df254be4b0ca2494a095ea"}, {"problem": 32, "code": "(fn [s] (mapcat #(repeat 2 %) s))", "user": "55f33f0ce4b06e875b46ce59"}, {"problem": 32, "code": "#(reduce (fn [acc x] (conj acc x x)) [] %)", "user": "56b6a50ae4b0982f16b37e3c"}, {"problem": 32, "code": "#(interleave % %)", "user": "4de14aad535d08e6dec9fde5"}, {"problem": 32, "code": "(fn dupl [coll]\n  (reduce (fn [x y] (concat x y)) (map #(-> [% %]) coll))\n  )", "user": "56de0db0e4b0ea9b8538f83a"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "563cce5be4b0bfe05bf1183f"}, {"problem": 32, "code": "(fn [ls] \n  (let [rec (fn [x]\n              (list x x))]\n    (apply concat (map rec ls))))", "user": "56d7f340e4b0ea9b8538f7df"}, {"problem": 32, "code": "#(reduce (fn [c e] (into c [e e])) [] %)", "user": "56e2dbf4e4b03a7c14b85a3b"}, {"problem": 32, "code": "(fn [x] (sort #(< (.indexOf x %1) (.indexOf x %2)) (concat x x)))", "user": "56e227a8e4b03a7c14b85a31"}, {"problem": 32, "code": "(fn [clxn] \n  (mapcat \n    (fn [i] \n      [i i])\n      ;;(map (fn [_] i) (range 2))) \n  clxn))", "user": "56e4a6c1e4b03a7c14b85a51"}, {"problem": 32, "code": "(fn [c] (seq (reduce #(conj %1 %2 %2) [] c)))", "user": "56e4427ce4b03a7c14b85a4c"}, {"problem": 32, "code": "#(interleave % %)", "user": "56d4b1aee4b0ea9b8538f7ba"}, {"problem": 32, "code": "(fn [l]\n  (reduce\n   #(conj %1 %2 %2) '()\n   (reverse l)))", "user": "56ae7589e4b03c432f187360"}, {"problem": 32, "code": "(fn [c] (mapcat (partial repeat 2) c))", "user": "56bf78dae4b0f26550335989"}, {"problem": 32, "code": "#(reduce (fn [acc n] (concat acc [n n])) [] %)", "user": "569f7bc2e4b0542e1f8d1494"}, {"problem": 32, "code": "(fn [coll] (mapcat #(list % %) coll))", "user": "56ca0da9e4b0ea9b8538f715"}, {"problem": 32, "code": "(fn dup [coll] \n  (if (empty? coll) \n    []\n    (let [x (first coll)] (concat [x x] (dup (rest coll))))))", "user": "56e53d2fe4b02e7e935eb6bc"}, {"problem": 32, "code": "reduce (fn [result nv] (conj result nv nv)) []", "user": "56cc34aee4b0ea9b8538f73c"}, {"problem": 32, "code": "#(interleave % %)", "user": "53ecaf1ce4b0d648e757f4b4"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "56e05bfce4b0ca2494a09606"}, {"problem": 32, "code": "(fn duplicate [a-sequence]\n  (reverse (reduce (fn [duplicated-sequence element]\n                     (cons element (cons element duplicated-sequence)))\n                  nil a-sequence)))", "user": "56e48302e4b03a7c14b85a4e"}, {"problem": 32, "code": "#(interleave % %)", "user": "56e3711de4b03a7c14b85a43"}, {"problem": 32, "code": "#(interleave % %)", "user": "56e6ef89e4b02e7e935eb6d0"}, {"problem": 32, "code": "#(interleave % %)", "user": "56e7d877e4b02e7e935eb6df"}, {"problem": 32, "code": "(fn [col]\n  (mapcat #(vector % %) col))", "user": "56c427bbe4b05cc29241ee94"}, {"problem": 32, "code": "(fn [x] (mapcat #(list % %) x))", "user": "5258d2abe4b0cb4875a45cc1"}, {"problem": 32, "code": "(fn doubled\n  [l]\n  (if (empty? l)\n    '()\n    (cons (first l) \n          (cons (first l) \n                (doubled (rest l))))))", "user": "56e8ef93e4b04a395b9a03f4"}, {"problem": 32, "code": "reduce #(conj (conj %1 %2) %2) []", "user": "56e9555fe4b04a395b9a03f7"}, {"problem": 32, "code": "#(reduce\n  (fn [k x]\n    (conj k x x))\n  [] %)", "user": "56e6d049e4b02e7e935eb6cd"}, {"problem": 32, "code": "(fn [x] (reduce #(conj %1 %2 %2) [] x))", "user": "56db90d4e4b0ea9b8538f80d"}, {"problem": 32, "code": "(fn duplicate-a-sequence [xs]\n  (mapcat #(repeat 2 %) xs))", "user": "518b8561e4b0f028e99addef"}, {"problem": 32, "code": "(fn f[x] (loop [acc [] [a & r] x] (if (nil? a) acc (recur (concat acc [a a]) r))))", "user": "56d439d4e4b0ea9b8538f7b6"}, {"problem": 32, "code": "(fn [s] (mapcat (fn [e] [e e]) s))", "user": "56e7ebcce4b02e7e935eb6e2"}, {"problem": 32, "code": "#(mapcat (partial repeat 2) %)", "user": "56eab346e4b04a395b9a0410"}, {"problem": 32, "code": "reduce (fn [acc, x] (conj (conj acc x) x)) []", "user": "56e02c1ce4b0ca2494a09602"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "56e06625e4b0ca2494a09607"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "56eaad95e4b04a395b9a040f"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "56ea8d33e4b04a395b9a040a"}, {"problem": 32, "code": "#(interleave % %)", "user": "56e99ec8e4b04a395b9a03fb"}, {"problem": 32, "code": "mapcat #(into [] (repeat 2 %))", "user": "56cad309e4b0ea9b8538f720"}, {"problem": 32, "code": "(fn [coll]\n  (reduce (fn [acc e] (into acc [e e]))\n            []\n            coll))", "user": "52d38c51e4b099d49816f0c5"}, {"problem": 32, "code": "(fn dup-coll [coll]\n  (let [x coll y coll]\n    (interleave x y)))", "user": "4fb85651e4b081705acca2d7"}, {"problem": 32, "code": "#(interleave % %)", "user": "56eb16d8e4b04a395b9a041d"}, {"problem": 32, "code": "(fn dup [x] \n  (if (empty? x) \n    x\n    (conj (dup (rest x)) (first x) (first x))\n  )\n)", "user": "56ea8b75e4b04a395b9a0409"}, {"problem": 32, "code": "(fn [x] \n  (interleave x x))", "user": "56ec440ee4b04a395b9a0435"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "56ecc4b5e4b04a395b9a043e"}, {"problem": 32, "code": "(fn [s]\n  (if (empty? s)\n    '()\n    (loop [fst (first s)\n           rst (rest s)\n           result []]\n      (if (empty? rst)\n        (conj result fst fst)\n        (recur (first rst) (rest rst) (conj result fst fst))))))", "user": "56ee0691e4b04a395b9a044c"}, {"problem": 32, "code": "(fn [s] (reduce (fn [acc e] (into acc [e e])) [] s))", "user": "56d2a103e4b0ea9b8538f7a3"}, {"problem": 32, "code": "mapcat #(vector % %)", "user": "56ec3a97e4b04a395b9a0433"}, {"problem": 32, "code": "#(mapcat (fn [x] (repeat 2 x)) %)", "user": "56ebe773e4b04a395b9a042a"}, {"problem": 32, "code": "(fn [xs] (reverse (reduce (fn [o el] (conj o el el)) () xs)))", "user": "56e1f9a6e4b03a7c14b85a2d"}, {"problem": 32, "code": "#(interleave % %)", "user": "56dc483fe4b0ea9b8538f81b"}, {"problem": 32, "code": "(fn [xs]\n  (reduce (fn [ys x] \n            (conj ys x x))\n          [] xs))", "user": "5655d811e4b0f9d632dd849a"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "56f000aee4b04a395b9a0469"}, {"problem": 32, "code": "(fn [n]\n  (reduce concat (map #(take 2 (repeat %)) n)))", "user": "562a58e8e4b00e49c7cb4822"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "56e8963ae4b04a395b9a03f1"}, {"problem": 32, "code": "(fn [y] (loop [x (seq y) z '()]\n          (if (empty? x)\n            (reverse z)\n            (recur\n             (rest x)\n             (conj (conj z (first x)) (first x))\n          )\n            ))\n  )", "user": "56d325ace4b0ea9b8538f7a9"}, {"problem": 32, "code": "#(reduce (fn [result ele] (into result [ele ele]))\n         []\n         %)", "user": "562268dce4b03f08ee9a9224"}, {"problem": 32, "code": "(fn [s]\n  (loop [items s\n         result []]\n    (let [first-item (first items)]\n      (if (seq items)\n        (recur (rest items) (conj result first-item first-item))\n        result))))", "user": "56e31aaae4b03a7c14b85a3e"}, {"problem": 32, "code": "(fn [dataz] \n  (reduce concat (map #(list %1 %1) dataz)))", "user": "56ef11efe4b04a395b9a045b"}, {"problem": 32, "code": "#((comp sort seq into) % %)", "user": "56cefadee4b0ea9b8538f763"}, {"problem": 32, "code": "#(interleave % %)", "user": "56e7ebb4e4b02e7e935eb6e1"}, {"problem": 32, "code": "(fn db [x] \n  (mapcat (fn [y] (list y  y)) x)\n)", "user": "56f258d3e4b04a395b9a04a1"}, {"problem": 32, "code": "(fn [coll] (reverse (reduce #(conj (conj %1 %2) %2) '() coll)))", "user": "56f188e9e4b04a395b9a0494"}, {"problem": 32, "code": "(fn [s] (reduce #(conj (conj %1 %2) %2) (empty s) s))", "user": "5292feb4e4b0239c8a67af39"}, {"problem": 32, "code": "#(reduce (fn [x y] (conj x y y)) [] %)", "user": "56f15eade4b04a395b9a048e"}, {"problem": 32, "code": "reduce #(into %1 [%2 %2]) []", "user": "56eb5c76e4b04a395b9a0422"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "56f4623ae4b046a417f9205d"}, {"problem": 32, "code": "(fn [xs]\n  (interleave xs xs))", "user": "52c35afce4b07a9af579238c"}, {"problem": 32, "code": "(fn [a] (reverse (reduce #(conj %1 %2 %2) '() a)))", "user": "56d6c18ee4b0ea9b8538f7d1"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "56efef12e4b04a395b9a0467"}, {"problem": 32, "code": "(fn [x] (seq (reduce #(conj %1 %2 %2) [] x)))", "user": "56e93576e4b04a395b9a03f6"}, {"problem": 32, "code": "(fn tset [x]\n  (mapcat (fn [e] (list e e) ) x)\n)", "user": "56f18d0ce4b04a395b9a0496"}, {"problem": 32, "code": "(fn [l]\n  (apply concat (map #(repeat 2 %) l)))", "user": "56e2ca59e4b03a7c14b85a38"}, {"problem": 32, "code": "(fn [s] (mapcat #(list % %) s))", "user": "542fa0dde4b0dad94371f2d2"}, {"problem": 32, "code": "#(interleave % %)", "user": "5662ca50e4b0e91d5f5c564c"}, {"problem": 32, "code": "(fn duplicate [S]\n  (reduce (fn [s x] (-> s (conj x) (conj x))) [] S))", "user": "56f53962e4b046a417f9206c"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "5602bdf9e4b04bb52996e1a7"}, {"problem": 32, "code": "(fn my-dbl [lst]\n  (if (empty? lst)\n    '()\n    (concat (repeat 2 (first lst)) (my-dbl (rest lst)))))", "user": "56dc3dbbe4b0ea9b8538f81a"}, {"problem": 32, "code": "#(mapcat (fn [x] [x x]) %)", "user": "56d15251e4b0ea9b8538f78c"}, {"problem": 32, "code": "#(reduce (fn [acc e] (conj acc e e)) [] %)", "user": "56f7ecdfe4b08e7d20b96834"}, {"problem": 32, "code": "#(interleave %1 %1)", "user": "54e7425ee4b024c67c0cf810"}, {"problem": 32, "code": "#(mapcat (fn [e] [e e]) %)", "user": "520e37cfe4b066f3ea161c96"}, {"problem": 32, "code": "(fn f [s]\n  (let [f*\n        (fn [acc s*]\n          (conj acc s* s*))]\n    (reduce f* [] s)))", "user": "56f95915e4b07572ad1a88af"}, {"problem": 32, "code": "reduce #(sort (conj %1 %2 %2)) '()", "user": "56f4b753e4b046a417f92061"}, {"problem": 32, "code": "#(interleave % %)", "user": "56c50599e4b05cc29241ee9e"}, {"problem": 32, "code": "(fn [coll]\n  (reduce #(conj %1 %2 %2) '() (reverse coll)))", "user": "56e4991fe4b03a7c14b85a4f"}, {"problem": 32, "code": "#(reduce (fn dup [acc el] (conj acc el el)) [] %)", "user": "56f9392ae4b07572ad1a88ac"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "56fa3f7ae4b07572ad1a88bf"}, {"problem": 32, "code": "(fn [x] (->> x (map #(vec (conj nil % %))) (reduce #(conj %1 (nth %2 0) (nth %2 1)))))", "user": "56f5e6d5e4b046a417f92079"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "539118b2e4b0b51d73faaea1"}, {"problem": 32, "code": "(fn [s] (reverse (reduce #(into %1 %2) (map #(repeat 2 %) s))))", "user": "56742817e4b05957ce8c612d"}, {"problem": 32, "code": "#(sort (let [lst %] (concat lst %)))", "user": "56f73913e4b08e7d20b9682d"}, {"problem": 32, "code": "(fn [seq] (loop [acc [] counter 0]\n    (if (< counter (count seq))\n    (recur\n      (conj acc (nth seq counter) (nth seq counter)) (inc counter))\n      acc\n      )))", "user": "55cfdfc9e4b0e31453f64a35"}, {"problem": 32, "code": "; mapcat #(list % %)\n\n#(mapcat (fn [a][a a]) %)", "user": "565487dce4b0f9d632dd8482"}, {"problem": 32, "code": "(fn a [lst]\n  (if (vector? (first lst))\n      (for [i (partition 2 (flatten (for [i lst] (list i i))))] (vector (first i)(second i)))\n  (flatten (for [i lst] (list i i)))))", "user": "56fc1bc7e4b07572ad1a88dd"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "56f9890be4b07572ad1a88b5"}, {"problem": 32, "code": "(fn dupl [s]\n  (reduce \n   (fn [acc el]\n     (concat acc (repeat 2 el))\n    )\n   '()\n   s\n  )\n  )", "user": "56fbe0cce4b07572ad1a88d8"}, {"problem": 32, "code": "(fn [coll]\n  (reduce (fn [result x]\n            (conj result x x)) [] coll))", "user": "56d3bc2de4b0ea9b8538f7b0"}, {"problem": 32, "code": "#(mapcat (fn [x] (vector  x x)) %)", "user": "56785234e4b05957ce8c6177"}, {"problem": 32, "code": ";; interleave is easier\n(fn my-duplicate [l]\n      (reduce (fn [accum item] (conj accum item item)) [] l))", "user": "539f9f79e4b0ca733b97449e"}, {"problem": 32, "code": "(fn\n  [s]\n  (loop [s s r ()]\n    (if (empty? s)\n      (reverse r)\n      (recur (rest s) (cons (first s) (cons (first s) r))))))", "user": "56df632ce4b0ca2494a095f2"}, {"problem": 32, "code": "reduce (fn [coll item] (conj coll item item)) []", "user": "56fa972be4b07572ad1a88c2"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "56efb3a3e4b04a395b9a0463"}, {"problem": 32, "code": "#(interleave % %)", "user": "56fdd9a1e4b08d47c97781a8"}, {"problem": 32, "code": "(fn duplicate\n  [collection]\n  (interleave collection collection))", "user": "56fe2a2fe4b08d47c97781ad"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "56f7bed6e4b08e7d20b96832"}, {"problem": 32, "code": "mapcat #(vector % %)", "user": "56fee4c0e4b08d47c97781b5"}, {"problem": 32, "code": "#(reduce (fn [s x] (conj s x x)) [] %)", "user": "56fde58ae4b08d47c97781aa"}, {"problem": 32, "code": "(fn [s] (mapcat #(repeat 2 %) s))", "user": "56f4cedce4b046a417f92063"}, {"problem": 32, "code": "#(interleave % %)", "user": "56f86f98e4b08e7d20b96837"}, {"problem": 32, "code": "(fn [xs] (reduce (fn [xs, x] (conj (conj xs x) x)) [] xs))", "user": "57006957e4b08d47c97781c8"}, {"problem": 32, "code": "(fn dupe [s]\n  (mapcat (fn [n] (repeat 2 n)) s))", "user": "55ad2d97e4b03311e7b732a2"}, {"problem": 32, "code": "reduce #(conj % %2 %2) []", "user": "57008afae4b08d47c97781ca"}, {"problem": 32, "code": "#(reduce (fn [a b] (conj a b b)) [] %)", "user": "5700f1f0e4b08d47c97781ce"}, {"problem": 32, "code": "(fn [seq] (reduce #(conj % %2 %2) [] seq))", "user": "57002b81e4b08d47c97781c7"}, {"problem": 32, "code": "#(mapcat (fn [v] [v v]) %)", "user": "56f881e0e4b08e7d20b96839"}, {"problem": 32, "code": "#((fn [x y] (if (empty? x) y (recur (rest x) (concat y [(first x) (first x)])))) % [])", "user": "57011eb3e4b08d47c97781d1"}, {"problem": 32, "code": "#(interleave % %)", "user": "56fd020ee4b08d47c97781a0"}, {"problem": 32, "code": "mapcat #(list %1 %1)", "user": "5700ec08e4b08d47c97781cd"}, {"problem": 32, "code": "(fn duplicate-sequence [xs]\n  (apply concat (map #(repeat 2 %) xs)))", "user": "56efc9fde4b04a395b9a0464"}, {"problem": 32, "code": "(fn [x] (interleave x x))", "user": "56ea8374e4b04a395b9a0404"}, {"problem": 32, "code": "(fn [seq] (reduce #(conj %1 %2 %2) [] seq))", "user": "56fbcc1fe4b07572ad1a88d5"}, {"problem": 32, "code": "#(interleave % %)", "user": "56fbf83de4b07572ad1a88da"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "56ede653e4b04a395b9a0449"}, {"problem": 32, "code": "(fn [s] (apply concat (map (fn [x] (list x x)) s)))", "user": "57035ccfe4b08d47c97781ef"}, {"problem": 32, "code": "mapcat #(vector %1 %1)", "user": "566835fde4b04acd4f672de3"}, {"problem": 32, "code": "(partial reduce #(concat %1 [%2 %2]) [])", "user": "5703eda3e4b08d47c9778200"}, {"problem": 32, "code": "reduce (fn [a b] (conj a b b)) []", "user": "5703cd50e4b08d47c97781fc"}, {"problem": 32, "code": "(fn [s] (apply concat (map #(list % %) s)))", "user": "5703cbbee4b08d47c97781fb"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "56ff0ef3e4b08d47c97781ba"}, {"problem": 32, "code": "#(mapcat (fn [x] [x x]) %)", "user": "56585dbce4b0f9d632dd84b3"}, {"problem": 32, "code": "(fn [s] (seq (reduce #(conj %1 %2 %2) [] s)))", "user": "570459a9e4b0b0fb43fd0662"}, {"problem": 32, "code": "(fn d [s]\n\t(if (empty? s)\n      '()\n      (cons (first s) (cons (first s) (d (rest s))))))", "user": "56eb3f9de4b04a395b9a0420"}, {"problem": 32, "code": "#(sort (concat % %))", "user": "57023fc2e4b08d47c97781db"}, {"problem": 32, "code": "(fn [c]\n  (loop [[head & tail] c\n          s '()]\n    (if (= head nil)\n      (reverse s)\n      (recur tail (conj s head head)))))", "user": "5701f886e4b08d47c97781d9"}, {"problem": 32, "code": "(fn [xs] (for [x xs k (range 2)] x))", "user": "57015a1de4b08d47c97781d4"}, {"problem": 32, "code": "(fn dup [x]\n    (when-not (empty? x)\n      (->> (rest x)\n           (dup)\n           (cons (first x))\n           (cons (first x)))))", "user": "57027310e4b08d47c97781e2"}, {"problem": 32, "code": "(fn dup [x]\n  (loop [result [], new-vec x]\n    (if (empty? new-vec)\n      result\n      (recur (conj (conj result (first new-vec)) (first new-vec)) (rest new-vec)) )))", "user": "57040195e4b08d47c9778202"}, {"problem": 32, "code": "#(mapcat identity (map (juxt identity identity) %))", "user": "56fe665be4b08d47c97781af"}, {"problem": 32, "code": "(fn dup [x]\n   (when-not (empty? x)\n     (->> (rest x)\n           (dup)\n           (cons (first x))\n           (cons (first x)))))", "user": "5576d3c7e4b05c286339e074"}, {"problem": 32, "code": "reduce #(into %1 [%2 %2]) []", "user": "53c6db22e4b00fb29b2212a2"}, {"problem": 32, "code": "#(interleave % %)", "user": "56e9db9be4b04a395b9a03ff"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5707abfce4b0b0fb43fd068d"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "57090dffe4b0b0fb43fd06a6"}, {"problem": 32, "code": "#(interleave % %)", "user": "4eb47bb1535d7eef30807362"}, {"problem": 32, "code": "#(sort (take (* 2 (count %)) (cycle %)))", "user": "567e6d24e4b0feffd0d18eb4"}, {"problem": 32, "code": "#(mapcat (fn [s] (repeat 2 s)) %)", "user": "536d24ece4b0fc7073fd6e54"}, {"problem": 32, "code": "(fn [x] (->> x (map #(list % %)) (apply concat)))", "user": "56fc0601e4b07572ad1a88db"}, {"problem": 32, "code": "#(interleave % %)", "user": "5703ce0fe4b08d47c97781fd"}, {"problem": 32, "code": "mapcat #(vector % %)", "user": "5708b96ce4b0b0fb43fd06a3"}, {"problem": 32, "code": "(fn [sequ]\n    (sort (concat sequ sequ)))", "user": "570006f1e4b08d47c97781c5"}, {"problem": 32, "code": "#(reduce (fn [x y] (conj x y y)) [] %)", "user": "570bb66de4b0b0fb43fd06c2"}, {"problem": 32, "code": "(fn [seq] \n  (reduce \n   (fn [new-col element] (conj (conj new-col element) element)) \n   [] \n   seq))", "user": "570cd242e4b0b0fb43fd06ce"}, {"problem": 32, "code": "(fn my-dup [coll]\n  (interleave coll coll))", "user": "5703d21ae4b08d47c97781ff"}, {"problem": 32, "code": "#(interleave % %)", "user": "5703c4c4e4b08d47c97781f7"}, {"problem": 32, "code": "#(interleave %1 %1)", "user": "570306cae4b08d47c97781ec"}, {"problem": 32, "code": "#(loop[lst %\n        res '()]\n    (if (empty? lst)\n      res\n      (recur (rest lst) (concat res (list (first lst) (first lst))))))", "user": "56acfee5e4b03c432f18734f"}, {"problem": 32, "code": "(fn [s] (mapcat #(repeat 2 %) s))", "user": "55ba70f9e4b01b9910ae29d4"}, {"problem": 32, "code": "#(sort (into % %))", "user": "56ab7578e4b03c432f18733d"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5707c364e4b0b0fb43fd0691"}, {"problem": 32, "code": "(fn [col]\n (apply interleave [col col]))", "user": "54f5aa4ce4b0f2f3c5226e94"}, {"problem": 32, "code": "(fn [ls]\n  (reduce #(conj % %2 %2) (empty ls) ls))", "user": "56d30497e4b0ea9b8538f7a8"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "55cc6c35e4b0e31453f64a10"}, {"problem": 32, "code": "(fn\n  [aseq]\n  (loop [lseq aseq el (first lseq) acc []]\n    (if (empty? lseq)\n      acc\n      (recur\n        (rest lseq)\n        (first (rest lseq))\n        (into acc (repeat 2 el))))))", "user": "56cb4d06e4b0ea9b8538f72e"}, {"problem": 32, "code": "(fn [c]\n  (sort (reduce conj c c)))", "user": "57061d20e4b0b0fb43fd0679"}, {"problem": 32, "code": "#(sort (concat % %))", "user": "571077e8e4b09c608db70434"}, {"problem": 32, "code": "mapcat (fn [x] (list x x))", "user": "56b506d5e4b0982f16b37e2d"}, {"problem": 32, "code": "(fn [sq] \n  (reverse (reduce #(conj %1 %2 %2) () sq)))", "user": "5711ca24e4b09c608db7044b"}, {"problem": 32, "code": "(fn [x]  (mapcat #(vector % %) x))", "user": "57126104e4b09c608db70458"}, {"problem": 32, "code": "(partial mapcat #(vector % %))", "user": "5712854ce4b07c98581c3a89"}, {"problem": 32, "code": "(fn a [b]\n\t(take (* (count b) 2) \n\t\t((fn c \n\t\t\t[d](if(<= d (count b))(into [] (cons (get b (- d 1)) (into [] (cons (get b (- d 1)) (c (+ d 1))))))[])\n\t\t) 1)\n\t)\n)", "user": "5710e574e4b09c608db7043b"}, {"problem": 32, "code": "#(->> (map (fn [x] (repeat 2 x)) %)\n      (apply concat))", "user": "5711b532e4b09c608db70449"}, {"problem": 32, "code": "(fn [xs] (reduce (fn [a x] (conj a x x)) [] xs))", "user": "4fc4e9b5e4b081705acca352"}, {"problem": 32, "code": "(fn [s] (mapcat #(identity [% %]) s))", "user": "56f51879e4b046a417f92069"}, {"problem": 32, "code": "#(reduce (fn [a v] (conj a v v)) [] %)", "user": "57122b20e4b09c608db70451"}, {"problem": 32, "code": "(fn [x] (sort (apply conj x x)))", "user": "5713f874e4b07c98581c3ab1"}, {"problem": 32, "code": "(fn [coll]\n   (loop [collection coll \n          newcoll []]\n     (if (empty? collection)\n       newcoll\n       (recur (rest collection) (conj (conj newcoll (first collection)) (first collection)))\n       )))", "user": "570577bbe4b0b0fb43fd0672"}, {"problem": 32, "code": "#(interleave % %)", "user": "57042a94e4b0b0fb43fd0660"}, {"problem": 32, "code": "(fn [x]\n  (mapcat (fn [x] [x x]) x))", "user": "5710b136e4b09c608db70437"}, {"problem": 32, "code": "(fn [xs] (mapcat #(list % %) xs))", "user": "56fa2905e4b07572ad1a88be"}, {"problem": 32, "code": "(fn [coll] (reduce (fn [a e] (into a [e e])) [] coll))", "user": "571107b3e4b09c608db7043f"}, {"problem": 32, "code": "#(interleave % %)", "user": "5716845be4b07c98581c3afa"}, {"problem": 32, "code": "#(loop [result [] remaining %]\n   (if (empty? remaining) result\n     (let [value (first remaining)]\n       (recur (conj result value value) (rest remaining)))))", "user": "57168db0e4b07c98581c3afc"}, {"problem": 32, "code": "#(loop [lst % current nil]                                       \n   (if (empty? lst)                                               \n     current                                                      \n     (recur (rest lst)                                            \n            (concat current [(first lst) (first lst)]))))", "user": "570b421ee4b0b0fb43fd06be"}, {"problem": 32, "code": "#(sort ( concat % %))", "user": "5710c24be4b09c608db70439"}, {"problem": 32, "code": "mapcat (fn[z](conj [z] z))", "user": "56e6e1e6e4b02e7e935eb6cf"}, {"problem": 32, "code": "#(interleave % %)", "user": "570d8418e4b0b0fb43fd06de"}, {"problem": 32, "code": "#(reduce (fn [acc next] (conj acc next next)) [] %)", "user": "57155980e4b07c98581c3ad7"}, {"problem": 32, "code": "#((fn [s res]\n    (if (empty? s)\n      res\n      (let [e (first s)]\n        (recur (rest s) (concat res (list e e)))))) % '())", "user": "5713c575e4b07c98581c3aab"}, {"problem": 32, "code": "#(interleave % %)", "user": "5707e579e4b0b0fb43fd0694"}, {"problem": 32, "code": "#( sort (concat % %) )", "user": "5602842de4b04bb52996e1a1"}, {"problem": 32, "code": "mapcat #(vector % %)", "user": "5714e82ae4b07c98581c3ac9"}, {"problem": 32, "code": "(fn [arr](reduce concat (map #(repeat 2 %) arr)))", "user": "57016724e4b08d47c97781d6"}, {"problem": 32, "code": "(fn [coll] (loop [[x & xs] coll acc []] (if x (recur xs (conj (conj acc x) x)) acc)))", "user": "56edf2dde4b04a395b9a044b"}, {"problem": 32, "code": "#(interleave % %)", "user": "5717e367e4b07c98581c3b1d"}, {"problem": 32, "code": "(fn dup [l]\n  (let [x (first l)\n        xs (rest l)]\n  (cond (nil? x) '()\n        :otherwise (cons x (cons x (dup xs))))))", "user": "5717ad6fe4b07c98581c3b14"}, {"problem": 32, "code": "#(loop [x % y []]\n   (if (empty? x)\n     y\n     (recur (rest x) (conj y (first x) (first x)))))", "user": "570362ece4b08d47c97781f0"}, {"problem": 32, "code": "(fn dup-seq [seq-val]\n  (reverse (loop [seq-iter seq-val\n    \tfinal '()]\n    (if (empty? seq-iter)\n      \tfinal\n      \t(recur (rest seq-iter)\n               (conj (conj final (first seq-iter)) (first seq-iter) ))))))", "user": "56f57481e4b046a417f92072"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5713f693e4b07c98581c3ab0"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "571bc0a1e4b07c98581c3b6c"}, {"problem": 32, "code": "(fn [s]\n  (reduce concat [] (map #(vector %1 %1) s)))", "user": "570794d8e4b0b0fb43fd068b"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "5716d585e4b07c98581c3b03"}, {"problem": 32, "code": "(fn [coll] (apply concat (map #(into [] [% %]) coll)))", "user": "57147cd9e4b07c98581c3abf"}, {"problem": 32, "code": "(fn [coll] (apply concat (map (fn [a b] (list a b)) coll coll)))", "user": "571c2babe4b07c98581c3b73"}, {"problem": 32, "code": "(fn [s] (interleave s s))", "user": "571d063ee4b0145328a76272"}, {"problem": 32, "code": "#(reverse (reduce (fn [acc x]\n                    (cons x (cons x acc)))\n                  '()\n                  %))", "user": "5712a404e4b07c98581c3a8d"}, {"problem": 32, "code": "(fn [lst]\n  (reverse (reduce #(conj %1 %2 %2) '() lst)))", "user": "570e6974e4b0b0fb43fd06ef"}, {"problem": 32, "code": "#(loop [f () s %]\n   (if (empty? s) \n    f\n    (recur (concat f [(first s)] [(first s)]) (rest s))\n   ))", "user": "571ac0b8e4b07c98581c3b5b"}, {"problem": 32, "code": "(fn [x] (reduce #(concat %1 [%2 %2]) [] x))", "user": "5717d674e4b07c98581c3b1a"}, {"problem": 32, "code": "(fn [xs] (mapcat #(repeat 2 %) xs))", "user": "5719465fe4b07c98581c3b36"}, {"problem": 32, "code": "(fn [col]\n  (apply concat (map #(list % %) col)))", "user": "571e5c9ee4b0145328a76290"}, {"problem": 32, "code": "#(interleave % %)", "user": "571dd145e4b0145328a76283"}, {"problem": 32, "code": "(fn my-replicate \n  [s]\n  (loop [e s\n         res []]\n    (if (nil? (first e))\n      res\n      (recur (rest e) (concat res (repeat 2 (first e))))                                                                                           \n      )\n    )\n  )", "user": "571b900ae4b07c98581c3b69"}, {"problem": 32, "code": "#(interleave %1 %1)", "user": "571aad45e4b07c98581c3b59"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "56df63e1e4b0ca2494a095f6"}, {"problem": 32, "code": "(fn x [l]\n  (cond\n   \t(empty? l) l\n   \t:else (cons (first l)(cons (first l) (x (rest l))))\n   ))", "user": "56df6351e4b0ca2494a095f3"}, {"problem": 32, "code": "(fn [x] (mapcat #(repeat 2 %) x))", "user": "572010a4e4b0c5bde472c08c"}, {"problem": 32, "code": "(fn\n  [lst]\n  (->> (map (fn [item] (conj () item item)) lst)\n       (reduce concat)))", "user": "56df6498e4b0ca2494a095f8"}, {"problem": 32, "code": "(fn [coll]\n  (reverse\n   (reduce #(cons %2 (cons %2 %1)) '() coll)))", "user": "56df63c7e4b0ca2494a095f5"}, {"problem": 32, "code": "mapcat #(conj [%] %)", "user": "571e6d73e4b0145328a76292"}, {"problem": 32, "code": "(fn [coll] (reduce (fn [new-coll elem] (conj new-coll elem elem)) [] coll))", "user": "5720a2b0e4b0c5bde472c099"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "56df6417e4b0ca2494a095f7"}, {"problem": 32, "code": "(fn dup [ls]\n  (cond (empty? ls) '()\n        :else (concat (list (first ls) (first ls)) (dup (rest ls)))))", "user": "5716540fe4b07c98581c3af3"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "56df629fe4b0ca2494a095ee"}, {"problem": 32, "code": "#(interleave % %)", "user": "571ff1ebe4b0c5bde472c088"}, {"problem": 32, "code": "(fn [lst]\n  (loop [lst lst\n         aux ()]\n    (if (empty? lst)\n      (reverse aux)\n      (recur (rest lst) (conj aux (first lst) (first lst))))))", "user": "56e9a56ae4b04a395b9a03fc"}, {"problem": 32, "code": "mapcat #(conj [] % % )", "user": "571e819ae4b0145328a76294"}, {"problem": 32, "code": "(fn [xs] (mapcat #(vector % %) xs))", "user": "57210b6de4b0c5bde472c0a6"}, {"problem": 32, "code": "#(reduce \n    (fn [m x] (conj m x x)) [] %)", "user": "4df73d64535d04ed9115e775"}, {"problem": 32, "code": "(fn [coll] (apply concat (map #(repeat 2 %) coll)))", "user": "571cd9dce4b0145328a76271"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5717bcffe4b07c98581c3b16"}, {"problem": 32, "code": "(fn [x]\n  (loop [lst x\n         result ()]\n    (if (empty? lst)\n        (reverse result)\n        (recur (rest lst)\n               (cons (first lst)\n                     (cons (first lst) result))))))", "user": "57210e8ee4b0c5bde472c0a8"}, {"problem": 32, "code": "(fn\n  [x]\n  (reduce #(conj %1 %2 %2) [] x)\n  )", "user": "56de78fde4b0ea9b8538f83c"}, {"problem": 32, "code": "(fn [s]\n  (reduce #(into %1 (repeat 2 %2)) [] s))", "user": "56c2c342e4b05cc29241ee85"}, {"problem": 32, "code": "(fn [s] (reverse (reduce #(cons %2 (cons %2 %1)) '() s)))", "user": "52afa8a1e4b0c58976d9acbe"}, {"problem": 32, "code": "#(into '() (reverse (interleave (take-nth 1 %) (take-nth 1 %))))", "user": "568384b4e4b0945ebc182a9a"}, {"problem": 32, "code": "reduce #(concat %1 [%2 %2]) nil", "user": "5721dfc3e4b0c5bde472c0bb"}, {"problem": 32, "code": "(fn\n  [l]\n  (mapcat #(repeat 2 %) l))", "user": "56df636ae4b0ca2494a095f4"}, {"problem": 32, "code": "(fn replic [lst]\n  (sort (reduce concat (repeat 2 lst))))", "user": "5723e6d6e4b0c5bde472c0f1"}, {"problem": 32, "code": "#(interleave %1 %1)", "user": "5715b67fe4b07c98581c3ae1"}, {"problem": 32, "code": "(fn [vect]\n  (reduce\n    (fn [v el]\n      (cons el (cons el v))\n    )\n    '()\n    (reverse (vec vect))\n  )\n)", "user": "5726adf8e4b0c5bde472c12b"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "57201f14e4b0c5bde472c08e"}, {"problem": 32, "code": "(fn [x] (reduce concat (map #(take 2 (repeat %)) x)))", "user": "57211a02e4b0c5bde472c0a9"}, {"problem": 32, "code": "(fn dup [l] \n  (if (empty? l)\n    l\n    (let [f (first l)\n          r (dup (rest l))]\n      (concat (list f f ) r)\n    )\n  )\n)", "user": "5720fc08e4b0c5bde472c0a3"}, {"problem": 32, "code": "mapcat #(take 2 (repeat %))", "user": "5724a4dae4b0c5bde472c0fe"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "5728d33ce4b0c6e51e0d2b12"}, {"problem": 32, "code": "(fn [lst] (mapcat #(repeat 2 %) lst))", "user": "56df62b3e4b0ca2494a095ef"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "57283dbce4b0c5bde472c154"}, {"problem": 32, "code": "(fn [lst]\n  (reduce (fn [acc v]\n            (conj acc v v))\n          []\n          lst))", "user": "572722c4e4b0c5bde472c134"}, {"problem": 32, "code": "(fn [c]\n  (loop [coll c\n         dup c]\n    (if (empty? coll)\n      (sort dup)\n      (recur (rest coll) (conj dup (first coll))))))", "user": "57291a39e4b0c6e51e0d2b14"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "56f514cee4b046a417f92068"}, {"problem": 32, "code": ";; mapcat #(vector % %)\n#(interleave % %)", "user": "54249bcce4b01498b1a71afb"}, {"problem": 32, "code": "(fn [arg1] (reverse (reduce #(conj (conj % %2) %2) '() arg1)))", "user": "5720ba36e4b0c5bde472c09c"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "572a3d77e4b0f4d77e651230"}, {"problem": 32, "code": "(fn \n  [lst]\n  (reverse\n   (reduce #(cons %2 (cons %2 %1)) '() lst)))", "user": "56df7440e4b0ca2494a095fb"}, {"problem": 32, "code": "#(interleave % %)", "user": "57131dfbe4b07c98581c3a98"}, {"problem": 32, "code": "(fn duplicate\n  [coll]\n  (if (empty? coll)\n    '()\n    (conj (duplicate (rest coll)) (first coll) (first coll))))", "user": "572db6d5e4b0cd1946bd0f78"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "553e3260e4b0a04f792994eb"}, {"problem": 32, "code": "mapcat #(conj [] % %)", "user": "56f5d0efe4b046a417f92078"}, {"problem": 32, "code": "(fn [seq] (reduce  #(conj %1 %2 %2) [] seq))", "user": "570ab24fe4b0b0fb43fd06b7"}, {"problem": 32, "code": "(fn \n  [s]\n  (reduce\n   (fn [rez el]\n     (conj rez el el)) [] s))", "user": "56b2630be4b0982f16b37e03"}, {"problem": 32, "code": "(partial mapcat #(list % %))", "user": "54b0519be4b09f271ff37d14"}, {"problem": 32, "code": "#(interleave % %)", "user": "564dc08ae4b0284900eef68f"}, {"problem": 32, "code": "(fn [s] (reverse (reduce #(conj %1 %2 %2) '() s)))", "user": "572e43f7e4b0cd1946bd0f83"}, {"problem": 32, "code": "#(interleave % %)", "user": "55c9ff22e4b0e31453f649f3"}, {"problem": 32, "code": "#(interleave % %)", "user": "57213df6e4b0c5bde472c0ab"}, {"problem": 32, "code": "#(interleave % %)", "user": "572cb21fe4b0cd1946bd0f5c"}, {"problem": 32, "code": "(fn [l]\n  (interleave l l))", "user": "5703cb87e4b08d47c97781f9"}, {"problem": 32, "code": "#(interleave % %)", "user": "572d41e6e4b0cd1946bd0f6d"}, {"problem": 32, "code": "#(interleave % %)", "user": "572ca54ae4b0cd1946bd0f59"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "53829b28e4b06839e8705ed6"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "57299c57e4b0c6e51e0d2b1e"}, {"problem": 32, "code": "#(interleave % %)", "user": "51a88e7fe4b08d8ec191b813"}, {"problem": 32, "code": "(fn dup [s] (apply concat (map #(repeat 2 %) s)))", "user": "573107d5e4b0cd1946bd0fbc"}, {"problem": 32, "code": "#(mapcat (partial repeat 2) %)", "user": "56ff45e5e4b08d47c97781bb"}, {"problem": 32, "code": "(fn [x] (apply concat (map #(list % %) x)))", "user": "5733e4aee4b0cd1946bd0ffe"}, {"problem": 32, "code": "(fn [sq]\n    (reduce (fn [result item]\n              (conj result item item)\n              )\n            []\n            sq\n            )\n    )", "user": "571a282ae4b07c98581c3b46"}, {"problem": 32, "code": "#(interleave % %)", "user": "572a60cee4b0f4d77e651237"}, {"problem": 32, "code": "(partial mapcat #(list % %))", "user": "573632b7e4b0cd1946bd102f"}, {"problem": 32, "code": "(fn [coll]\n  (apply concat \n    (map #(list % %) coll)))", "user": "57220050e4b0c5bde472c0c1"}, {"problem": 32, "code": "mapcat #(vector % %)", "user": "570243c4e4b08d47c97781dc"}, {"problem": 32, "code": "(fn s-dup [s] (apply concat (for [x s] (list x x))))", "user": "572ea970e4b0cd1946bd0f89"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "573652e1e4b0cd1946bd1030"}, {"problem": 32, "code": ";; #32\n(fn [coll]\n  (loop [current []\n         remaining-coll coll]\n    (if (empty? remaining-coll)\n      current\n      (let [curr (first remaining-coll)]\n        (recur (conj current curr curr) (rest remaining-coll))))))", "user": "55f5b8d6e4b06e875b46ce8d"}, {"problem": 32, "code": "(fn [y] ((fn [x] (mapcat #(repeat 2 %) x)) y))", "user": "570eeb66e4b0b0fb43fd06fa"}, {"problem": 32, "code": "#(reduce (fn [a b ] (conj a b b) ) [] %)", "user": "572ac718e4b0f4d77e651242"}, {"problem": 32, "code": "(fn dup [sq] (mapcat #(list %1 %1) sq))", "user": "561814bae4b06b1bb2182a1a"}, {"problem": 32, "code": "(fn [x]\n  (loop [coll x result []]\n    (if (empty? coll)\n      result\n      (recur (rest coll) (concat result (repeat 2 (first coll)))))))", "user": "57344edbe4b0cd1946bd1008"}, {"problem": 32, "code": "#(interleave % %)", "user": "56e30cefe4b03a7c14b85a3d"}, {"problem": 32, "code": "(fn [in-seq] (interleave in-seq in-seq))", "user": "571d9669e4b0145328a7627f"}, {"problem": 32, "code": "reduce  #(conj (conj % %2) %2 ) []", "user": "5735ac67e4b0cd1946bd102b"}, {"problem": 32, "code": "#(interleave % %)\n\n;mapcat #(list % %)\n\n;mapcat (fn [n] [n n])", "user": "572830e6e4b0c5bde472c152"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "57372bd5e4b0cd1946bd1041"}, {"problem": 32, "code": "(fn t1 [x] \n  (when (seq x)\n  (cons (first x) (cons (first x) (t1 (rest x))) )\n    )\n  \n)", "user": "518665cde4b0da5a5be3bad2"}, {"problem": 32, "code": "#(loop [input %\n        output []]\n   (if (= 0 (count input))\n     (seq output)\n     (recur (next input) (conj output (first input) (first input)))\n     )\n   )", "user": "5739fa01e4b0cd1946bd1082"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5684c439e4b04eec3ec5cfc1"}, {"problem": 32, "code": "#(reduce (fn[x y] (conj x y y)) [] %)", "user": "571172ece4b09c608db70446"}, {"problem": 32, "code": "(fn duplicateElements [c] \n  (reduce (fn [r x] \n            (if (nil? x) \n              r \n              (conj r x x)\n            )\n          )\n          []\n          c\n  )\n)", "user": "571aae1fe4b07c98581c3b5a"}, {"problem": 32, "code": "(fn [s] (interleave s s))", "user": "5739cbe4e4b0cd1946bd107c"}, {"problem": 32, "code": "(fn [x] (reduce concat (map #(repeat 2 %) x)))", "user": "57261810e4b0c5bde472c11c"}, {"problem": 32, "code": "(fn [s] (apply concat (map #(list % %) s)))", "user": "573ce277e4b05c31a32c080b"}, {"problem": 32, "code": "#(mapcat identity (for [x %] [x x]))", "user": "573b8f67e4b0cd1946bd10ae"}, {"problem": 32, "code": "#(interleave % %)", "user": "55c3f19de4b0e31453f64991"}, {"problem": 32, "code": "(fn doub [xs] \n   (if (empty? xs)\n     nil\n     (cons (first xs) (cons (first xs) (doub (rest xs))))))", "user": "56c26880e4b05cc29241ee81"}, {"problem": 32, "code": "(fn dupl [coll] \n  (if (empty? coll)\n    '()\n    (let [elem (first coll)]\n      (conj (dupl (rest coll)) elem elem))))", "user": "573118ebe4b0cd1946bd0fbd"}, {"problem": 32, "code": "(fn [l]\n  (reduce #(conj (conj %1 %2) %2)\n          []\n          l))", "user": "57280b92e4b0c5bde472c14e"}, {"problem": 32, "code": "(fn [x] (mapcat (fn [n] [n n]) x))", "user": "5141e978e4b0b50abeb46b20"}, {"problem": 32, "code": "(fn [x]\n  (mapcat #(repeat 2 %) x))", "user": "5705e404e4b0b0fb43fd0676"}, {"problem": 32, "code": "(fn [arr] (sort (concat arr arr)))", "user": "573b664ce4b0cd1946bd10a7"}, {"problem": 32, "code": "#(mapcat (fn [e] [e e]) %)", "user": "56a9d4bbe4b07966d5a8a07b"}, {"problem": 32, "code": "(partial mapcat #(list % %))", "user": "57300c19e4b0cd1946bd0fa1"}, {"problem": 32, "code": "mapcat (partial repeat 2)", "user": "57407ab3e4b05c31a32c0854"}, {"problem": 32, "code": "#(reverse\n  (reduce \n    (fn [acc in] \n      (conj (conj acc in) in)\n    )\n    '()\n  %\n   )\n )", "user": "5710140fe4b09c608db7042e"}, {"problem": 32, "code": "(fn [x] (interleave x x))", "user": "563431c1e4b0bfe05bf117bb"}, {"problem": 32, "code": "(fn my-duplicate [coll]\n    (if (empty? coll) [] \n       (into  [ (first coll) (first coll) ] (my-duplicate (rest coll)) )\n      )\n  \n   )", "user": "573940e3e4b0cd1946bd106b"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "519d2a0be4b037b32803f9ae"}, {"problem": 32, "code": "(fn [xs]\n  (interleave xs xs))", "user": "573c57ace4b0cd1946bd10c0"}, {"problem": 32, "code": "(fn dub [l]\n  (loop [r l         \n         res '()]\n    (if (empty? r)\n      (reverse res)    \n      (recur (rest r) (conj res (first r) (first r))))))", "user": "573f3ccfe4b05c31a32c083f"}, {"problem": 32, "code": "#(mapcat vector % %)", "user": "4fa436dce4b081705acca19b"}, {"problem": 32, "code": "(fn [coll] (reduce (fn [acc x] (concat acc (list x x))) `() coll))", "user": "57434103e4b0c285004e8a9e"}, {"problem": 32, "code": "(fn dupeSeq [s] (if (empty? s) nil (concat (list (first s) (first s)) (dupeSeq (rest s)))))", "user": "573c813be4b0cd1946bd10c5"}, {"problem": 32, "code": "(fn [x]\n  (reduce\n   (fn [y z] (concat y [z z]))\n   (empty x)\n   x))", "user": "57458b82e4b009280f9f2b4e"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "52dda39fe4b09f7907dd13e7"}, {"problem": 32, "code": "(fn [coll]\n  (reverse\n    (loop [[x & xs :as all] (seq coll)\n           result '()]\n      (if all\n        (recur xs (cons x (cons x result)))\n        result\n      )\n    )\n  )\n)", "user": "57434339e4b0c285004e8a9f"}, {"problem": 32, "code": "#(interleave % %)", "user": "5745f616e4b009280f9f2b58"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5745b884e4b009280f9f2b53"}, {"problem": 32, "code": "#(interleave % %)", "user": "573ddfc2e4b05c31a32c081b"}, {"problem": 32, "code": "#(mapcat identity (map (fn [x] [x x]) %))", "user": "57440f77e4b0c285004e8ab5"}, {"problem": 32, "code": "#(interleave % %)", "user": "574311a5e4b05c31a32c0888"}, {"problem": 32, "code": "(fn [s] (interleave s s))", "user": "572c1f65e4b0cd1946bd0f4a"}, {"problem": 32, "code": "#(interleave % %)", "user": "5746d767e4b009280f9f2b6b"}, {"problem": 32, "code": "#(interleave % %)", "user": "51647faae4b003cf19fdde3b"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "56c6a3c3e4b05cc29241eeb3"}, {"problem": 32, "code": "#(reduce (fn [acc v] \n \t\t(conj acc v v))\n        [] \n        %)", "user": "53da059be4b0e771c302547e"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "574977cbe4b009280f9f2b9b"}, {"problem": 32, "code": "(fn [a]\n  (let [n (count a)]\n   (map\n    #(nth a (quot % 2))\n    (range (* 2 n))\n   )))", "user": "5744723ae4b009280f9f2b3a"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "56a94562e4b07966d5a8a074"}, {"problem": 32, "code": "#(reverse (reduce (fn [res e] (conj res e e)) '() %))", "user": "5749ce09e4b009280f9f2ba0"}, {"problem": 32, "code": "(fn [l] (reduce (fn [a b] (conj a b b)) '() (reverse l)))", "user": "574986cae4b009280f9f2b9c"}, {"problem": 32, "code": "(fn [s]\n(apply concat (map #(list % %) s)))", "user": "56bb652ae4b0f26550335953"}, {"problem": 32, "code": "#(interleave % %)", "user": "535558b9e4b04ce2eb3ed25a"}, {"problem": 32, "code": "#(interleave %1 %1)", "user": "574a9132e4b02ea1147991fd"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "57488966e4b009280f9f2b8d"}, {"problem": 32, "code": "#(interleave % %)", "user": "574c3a7ce4b02ea114799219"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5744e1a2e4b009280f9f2b43"}, {"problem": 32, "code": "(fn f [s]\n  (let [f*\n        (fn [acc s*]\n          (conj acc s* s*))]\n    (reduce f* [] s)))", "user": "574af03ce4b02ea114799202"}, {"problem": 32, "code": "(fn dup [sequence]\n  (loop [result (vector) sequence sequence]\n    (if (empty? sequence)\n      result\n      (recur (conj result (first sequence) (first sequence)) (rest sequence)))))", "user": "57465526e4b009280f9f2b61"}, {"problem": 32, "code": "(fn dupler [c]\n  (interleave c c)\n  )", "user": "5731e36be4b0cd1946bd0fc9"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "57408f87e4b05c31a32c0856"}, {"problem": 32, "code": "(fn f [[x & remain]]\n  (when x\n    (cons x (cons x (f remain)))))", "user": "573d58c8e4b05c31a32c0811"}, {"problem": 32, "code": "#(apply concat (map (fn [x] [x x]) %))", "user": "5743e316e4b0c285004e8ab3"}, {"problem": 32, "code": "#(interleave % %)", "user": "57275898e4b0c5bde472c13e"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "513f1f18e4b051389b345b3d"}, {"problem": 32, "code": "(fn [seq]\n  (interleave seq seq))", "user": "57462a4de4b009280f9f2b5d"}, {"problem": 32, "code": "(fn foo [[fst & rst]] (concat (list fst fst) (if (empty? rst) nil (foo rst))))", "user": "5747e22ce4b009280f9f2b7c"}, {"problem": 32, "code": "#(apply concat (for [item %] [item item]))", "user": "56f006f4e4b04a395b9a046a"}, {"problem": 32, "code": "#(interleave % %)", "user": "574c66e1e4b02ea11479921d"}, {"problem": 32, "code": "(fn [coll]\n  (reduce (fn [new-coll x]\n            (sort (conj new-coll x x)))\n          '()\n          coll))", "user": "573de63fe4b05c31a32c081c"}, {"problem": 32, "code": "mapcat (fn [x] [x x])", "user": "574dfcb8e4b02ea11479923a"}, {"problem": 32, "code": "mapcat #( vector % % )", "user": "57487084e4b009280f9f2b8c"}, {"problem": 32, "code": "#(mapcat (fn [x & xs] (into '() [x x])) %)", "user": "56ebfb93e4b04a395b9a042e"}, {"problem": 32, "code": "(fn duplicate\n  ([l] (duplicate l []))\n  ([l resp]\n   (if (= l [])\n     resp\n     (let [f (first l)]\n       (duplicate (rest l) (conj resp f f))))))", "user": "574f1c24e4b02ea114799255"}, {"problem": 32, "code": "(fn [s] \n  (reduce (fn [r v]\n            (into r [v v])) [] s))", "user": "574e7be7e4b02ea114799242"}, {"problem": 32, "code": "#(sort (concat % %))", "user": "57500d13e4b02ea114799268"}, {"problem": 32, "code": "(partial reduce #(concat % [%2 %2]) ())", "user": "572ec4dde4b0cd1946bd0f8d"}, {"problem": 32, "code": "#(interleave %1 %1)", "user": "5745bb9fe4b009280f9f2b54"}, {"problem": 32, "code": "(fn [x]\n  (reduce (fn [result element]\n            (conj (conj result element)\n                  element))\n          []\n          x))", "user": "574ef99ae4b02ea114799250"}, {"problem": 32, "code": "#(reduce (fn [l v] (concat l [v v])) [] %)", "user": "5749ab6ae4b009280f9f2b9f"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "57297fb2e4b0c6e51e0d2b1c"}, {"problem": 32, "code": "#(interleave % %)", "user": "57533bc1e4b02ea1147992a6"}, {"problem": 32, "code": "(fn [coll] (seq (reduce (fn [v x] (conj (conj v x) x)) [] coll)))", "user": "5744d088e4b009280f9f2b41"}, {"problem": 32, "code": "#(interleave % %)", "user": "575086e7e4b02ea114799276"}, {"problem": 32, "code": "(fn [c] (loop [x c\n               y nil]\n          (if (nil? (first x))\n            (reverse y)\n            (recur (rest x) (conj y (first x) (first x))))))", "user": "5753b6c6e4b02ea1147992af"}, {"problem": 32, "code": "(fn [col] \n    (reduce \n      #(conj %1 %2 %2)\n      [] col))", "user": "574c5e18e4b02ea11479921b"}, {"problem": 32, "code": "#(apply concat (map list % %))", "user": "57539e04e4b02ea1147992ab"}, {"problem": 32, "code": "(fn [x]\n  (interleave x x))", "user": "572a856be4b0f4d77e65123b"}, {"problem": 32, "code": "(fn [x] (apply concat (map #(repeat 2 %) x)))", "user": "55c4cda5e4b0e31453f649a5"}, {"problem": 32, "code": "(fn dup\n  [coll]\n  (if (empty? coll)\n    '()\n    (cons (first coll) (cons (first coll) (dup (rest coll))))))", "user": "57476b5fe4b009280f9f2b74"}, {"problem": 32, "code": "#(apply concat (for [x %] [x x]))", "user": "56cd75bee4b0ea9b8538f74b"}, {"problem": 32, "code": "(fn [coll]\n     (seq (reduce (fn [new-coll x] (conj new-coll x x)) [] coll)))", "user": "570bd29be4b0b0fb43fd06c5"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "574ef641e4b02ea11479924f"}, {"problem": 32, "code": "(fn f[x] (if (= 0 (count x)) () (cons (first x) (cons (first x) (f (rest x))))))", "user": "54283a7ae4b01498b1a71b2f"}, {"problem": 32, "code": "#(mapcat (fn [x] [x x]) %)", "user": "5756f7d7e4b02ea1147992e9"}, {"problem": 32, "code": "(fn dupl [x] (lazy-seq (when-let [s (seq x)] (cons (first s) (cons (first s) (dupl (rest s)))))))", "user": "574ed2f7e4b02ea11479924a"}, {"problem": 32, "code": "( fn dupl\n  [ x ]\n  ( if ( empty? x ) '()\n    ( let [ built ( dupl ( rest x ) ) ]\n      ( conj ( conj built ( first x ) ) ( first x ) )\n    )\n  )\n)", "user": "57561529e4b02ea1147992d3"}, {"problem": 32, "code": "(fn [coll] (mapcat identity (map #(repeat 2 %) coll)))", "user": "5751f2a2e4b02ea114799292"}, {"problem": 32, "code": "(fn [x] (reduce concat (map #(repeat 2 %) x)))", "user": "5757ba87e4b02ea1147992f9"}, {"problem": 32, "code": "(fn dup\n  [data]\n  (loop [result [] source data]\n    (if (empty? source)\n      result\n      (recur (conj (conj result (first source)) (first source)) (rest source)))))", "user": "5746cb28e4b009280f9f2b68"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "57552f39e4b02ea1147992c1"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "56f6e541e4b08e7d20b9682a"}, {"problem": 32, "code": "(fn dup [coll] (if (empty? coll)\n                 coll\n                 (cons (first coll) (cons (first coll) (dup (rest coll))))))", "user": "5759cd46e4b02ea11479932e"}, {"problem": 32, "code": "#(interleave % %)", "user": "574abbfbe4b02ea114799200"}, {"problem": 32, "code": "(partial reduce #(conj %1 %2 %2) [])", "user": "575cbe44e4b02ea114799374"}, {"problem": 32, "code": "#(interleave %1 %1)", "user": "574a546ee4b02ea1147991f6"}, {"problem": 32, "code": "(fn [coll] (mapcat (fn [x] [x x]) coll))", "user": "52b3959ce4b0c58976d9ad0d"}, {"problem": 32, "code": "(fn duplicate [s]\n  (if (empty? s) \n   nil\n   (cons (first s) (cons (first s) (duplicate (rest s))))))", "user": "57501de0e4b02ea11479926c"}, {"problem": 32, "code": "(fn [x] (loop [v (reverse x), result '()] (if (empty? v) result (recur (rest v) (into result (list (first v) (first v)))))))", "user": "5756efc3e4b02ea1147992e6"}, {"problem": 32, "code": "#(sort (concat % %))", "user": "575bd5f9e4b02ea114799365"}, {"problem": 32, "code": "(fn\n  [in-seq]\n  (reduce (fn [accum curr-elt] (into accum [curr-elt curr-elt])) [] in-seq)\n  )", "user": "52229374e4b0e6a83c892600"}, {"problem": 32, "code": "(fn [v] (mapcat #(repeat 2 %) v))", "user": "5739c2fee4b0cd1946bd107a"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "575ef4b6e4b08062f99a4e78"}, {"problem": 32, "code": "#(interleave % %)", "user": "575fbe58e4b08062f99a4e87"}, {"problem": 32, "code": "(fn foo [x]\n  (if (empty? x) nil\n    (conj (foo (rest x)) (first x) (first x))))", "user": "5760715de4b08062f99a4e96"}, {"problem": 32, "code": "#(interleave % %)", "user": "57609d91e4b08062f99a4e9b"}, {"problem": 32, "code": "(fn [x] (sort (apply concat (repeat 2 x))))", "user": "5758e39be4b02ea114799313"}, {"problem": 32, "code": "(fn dup-seq [lat]\n  (reduce concat (map #(take 2 (repeat %)) lat)))", "user": "5755e66ee4b02ea1147992cf"}, {"problem": 32, "code": "#(interleave % %)", "user": "575ab695e4b02ea114799350"}, {"problem": 32, "code": "(fn [coll]\n  (for [x coll y (repeat 2 x)]\n    y))", "user": "575aa21de4b02ea114799348"}, {"problem": 32, "code": "(fn f [arr] \n  (if (empty? arr)\n    '()\n    (concat (#(list % %) (first arr))\n            (f (rest arr)))))", "user": "57501c83e4b02ea11479926b"}, {"problem": 32, "code": "#(reduce (fn [default each] (conj (conj default each) each)) [] %)", "user": "57606cfde4b08062f99a4e95"}, {"problem": 32, "code": "(fn [coll] \n  (loop [[x & xs :as coll] coll\n         acc []]\n    (if (empty? coll) acc (recur xs (conj acc x x)))))", "user": "55fbc657e4b0f488688e0666"}, {"problem": 32, "code": "#(reduce concat (map (fn [x] (list x x)) %))", "user": "574e8975e4b02ea114799244"}, {"problem": 32, "code": "(fn foo [x]\n\t\t\t\t(if (empty? x)\n\t\t\t\t\t\t\t\tx\n\t\t\t\t\t\t\t\t(cons\n\t\t\t\t\t\t\t\t\t\t\t\t(first x)\n\t\t\t\t\t\t\t\t\t\t\t\t(cons\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(first x)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(foo (next x))\n\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t)\n\t\t\t\t)\n)", "user": "575dda55e4b02ea11479938c"}, {"problem": 32, "code": "(fn thirty-two [x]\n  (mapcat #(repeat 2 %) x))", "user": "57607706e4b08062f99a4e97"}, {"problem": 32, "code": "#(->> \n    % \n    (map (fn [x] [x x])) \n    (mapcat identity))", "user": "57597fade4b02ea11479931d"}, {"problem": 32, "code": "#(mapcat (fn [x] [x x]) %)", "user": "57640b11e4b0994c1922fbe4"}, {"problem": 32, "code": "(comp reverse (partial reduce #(cons %2 (cons %2 %1)) '()))", "user": "575f2529e4b08062f99a4e7a"}, {"problem": 32, "code": "(comp (partial apply concat) (partial map (partial repeat 2)))", "user": "5761a772e4b0994c1922fb95"}, {"problem": 32, "code": "#(loop [a % b []] (if (first a)\n                   (recur (rest a) (conj b (first a) (first a)))\n                   b\n                   )\n  )", "user": "575d5831e4b02ea114799381"}, {"problem": 32, "code": "mapcat #(vec [% %])", "user": "57642916e4b0994c1922fbee"}, {"problem": 32, "code": "(fn [coll]\n  (reduce #(conj (conj %1 %2) %2) [] coll))", "user": "52ea025ae4b09f7907dd14b5"}, {"problem": 32, "code": "(fn [q] (reduce (fn [acc s](conj acc s s)) [] q))", "user": "571edeeae4b0145328a7629b"}, {"problem": 32, "code": "#(interleave % %)", "user": "57625c18e4b0994c1922fba4"}, {"problem": 32, "code": "(fn [x] \n  (->> x\n       (map (fn [i] [i i]))\n       (apply concat)))", "user": "57614948e4b0994c1922fb83"}, {"problem": 32, "code": "#(reduce (fn [accum x] (conj accum x x)) [] %)", "user": "5764cc01e4b0994c1922fc05"}, {"problem": 32, "code": "#(mapcat list % %)", "user": "57599ed3e4b02ea114799323"}, {"problem": 32, "code": "#(mapcat (partial repeat 2) %)", "user": "57644395e4b0994c1922fbf2"}, {"problem": 32, "code": "(fn       [s]\t\t(reduce           (fn [a b] (conj (conj a b) b))      [ ]       s))", "user": "561d506ee4b064ca9f4b16aa"}, {"problem": 32, "code": "#(interleave %1 %1)", "user": "5766bab8e4b0a07e8fc180b1"}, {"problem": 32, "code": "#(loop [s %1 result []]\n       (if (empty? s)\n         result\n         (recur (rest s) (conj result (first s) (first s)))))", "user": "5763818ae4b0994c1922fbc7"}, {"problem": 32, "code": "#(interleave % %)", "user": "575b3e9be4b02ea11479935b"}, {"problem": 32, "code": "reduce #(concat %1 [%2 %2]) []", "user": "5742ec91e4b05c31a32c0883"}, {"problem": 32, "code": "#(interleave % %)", "user": "5763fa69e4b0994c1922fbe0"}, {"problem": 32, "code": "(fn [coll]\n  (reduce #(conj %1 %2 %2) [] coll))", "user": "5764457ae4b0994c1922fbf3"}, {"problem": 32, "code": "#(loop [col %\n                   rr []]\n             (if (> (count col) 0)\n               (let [item (first col)]\n                 (recur (rest col)\n                        (conj (conj rr item) item)))\n               rr))", "user": "5383c054e4b06839e8705ee8"}, {"problem": 32, "code": "(fn dup-elts [x]\n  (if (= (count x) 0)\n    x\n    (cons (first x) (cons (first x) (dup-elts (rest x))))))", "user": "576000fce4b08062f99a4e8b"}, {"problem": 32, "code": "#(interleave % %)", "user": "5762fcfde4b0994c1922fbb3"}, {"problem": 32, "code": "(fn [a] (interleave a a))", "user": "554b8b78e4b0a04f7929958d"}, {"problem": 32, "code": "(fn duplicate [x] \n   (loop [c x r '()]\n      (if (empty? c)\n         (reverse r)\n         (recur (rest c) (conj (conj r (first c)) (first c)))\n         )\n                          \n))", "user": "562eeba2e4b0ab312c17ebc1"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) '[]", "user": "5742bc40e4b05c31a32c087b"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5756f324e4b02ea1147992e8"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "57650419e4b0994c1922fc09"}, {"problem": 32, "code": "(fn dup [los]\n  (loop [index 0\n         result '()]\n    (if (>= index (count los))\n      (reverse result)\n      (recur (inc index) (conj (conj result (nth los index)) (nth los index))))))", "user": "5761724de4b0994c1922fb89"}, {"problem": 32, "code": "#(mapcat (fn [x] (list x x)) %1)", "user": "575556fae4b02ea1147992c3"}, {"problem": 32, "code": "#(interleave % %)", "user": "575d22f5e4b02ea11479937a"}, {"problem": 32, "code": "#(interleave % %)", "user": "56f974c0e4b07572ad1a88b1"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "575d16f8e4b02ea114799377"}, {"problem": 32, "code": "(fn [myseq] \n  (apply concat (map #(list % %) myseq)))", "user": "576aa367e4b0a07e8fc1811e"}, {"problem": 32, "code": "(fn foo [x] (let [item (first x)] (if (empty? x) nil\n          (cons item (cons item (foo (rest x)))))))", "user": "5742d82ae4b05c31a32c0881"}, {"problem": 32, "code": "#(interleave % %)", "user": "576a987be4b0a07e8fc1811b"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "57604a87e4b08062f99a4e91"}, {"problem": 32, "code": "#(mapcat identity (map (fn [v] (repeat 2 v)) %))", "user": "57202eb7e4b0c5bde472c090"}, {"problem": 32, "code": "(fn [coll] \n  (reduce #(conj %1 %2 %2) [] coll))", "user": "576a972ce4b0a07e8fc1811a"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "575fec91e4b08062f99a4e89"}, {"problem": 32, "code": "(fn [s] (mapcat #(vector % %) s))", "user": "576da825e4b0979f8965156c"}, {"problem": 32, "code": "(fn [s]\n  (loop\n    [coll s\n     result ()]\n    (if\n      (empty? coll)\n      (reverse result)\n      (recur (rest coll) (conj result (first coll) (first coll)))\n      )\n    )\n  )", "user": "576d24ede4b0979f8965155b"}, {"problem": 32, "code": "#(apply concat (map vector % %))", "user": "56d91a53e4b0ea9b8538f7ee"}, {"problem": 32, "code": "#(interleave % %)", "user": "55b0cc57e4b002ce9d5cbc25"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "50c99e3ee4b0bed41a122997"}, {"problem": 32, "code": "#(interleave % %)", "user": "576e3258e4b0979f89651574"}, {"problem": 32, "code": "#(seq (mapcat (fn [x] (cons x (cons x '()))) %))", "user": "56d902c3e4b0ea9b8538f7ed"}, {"problem": 32, "code": "(fn [xs]\n  (mapcat #(vector % %) xs))", "user": "5454bb07e4b0e397800069da"}, {"problem": 32, "code": "#(apply concat (map (fn[el] (vector el el)) %))", "user": "575ddfd1e4b02ea11479938d"}, {"problem": 32, "code": "#(interleave % %)", "user": "57720e85e4b0979f896515c1"}, {"problem": 32, "code": "(fn [s] (apply concat (map #(conj (conj [] %) %) s)))", "user": "576844cde4b0a07e8fc180ce"}, {"problem": 32, "code": "reduce (fn [a e] (conj (conj a e) e)) []", "user": "577202d2e4b0979f896515c0"}, {"problem": 32, "code": "#(reduce concat (map (fn [x] (list x x)) %))", "user": "576b4e6be4b0a07e8fc1812b"}, {"problem": 32, "code": "(fn [coll]\n  (let [one (reduce #(conj %1 (repeat 2 %2)) [] coll)\n        two (mapcat identity one )]\n    two))", "user": "57227f10e4b0c5bde472c0cd"}, {"problem": 32, "code": "#(for [e % i (range 2)] e )", "user": "55641bcfe4b0c656e3ff17ff"}, {"problem": 32, "code": "#(interleave % %)", "user": "576a8d02e4b0a07e8fc18117"}, {"problem": 32, "code": "(fn [s] (mapcat #(take 2 (repeat %)) s))", "user": "56e43943e4b03a7c14b85a4b"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "57763002e4b0979f89651631"}, {"problem": 32, "code": "(fn [x] (\n         reduce \n         #(conj %1 %2 %2)\n         []\n         x\n         )\n  )", "user": "57762befe4b0979f8965162f"}, {"problem": 32, "code": "(fn\n  [seq]\n  (loop [seq seq list '()]\n    (if (= nil (first seq))\n      (reverse list)\n      (recur (rest seq) (conj list (first seq) (first seq)))\n     )\n    ))", "user": "5772ddb0e4b0979f896515d4"}, {"problem": 32, "code": "(fn p32[a]\n  (mapcat #( repeat 2 %1 ) a))", "user": "548f3ed8e4b0e286459a1236"}, {"problem": 32, "code": "(fn dupl [coll]\n  (if (seq coll)\n    (lazy-seq\n      (cons (first coll)\n            (cons (first coll) (dupl (rest coll)))))))", "user": "5776e21de4b0979f89651642"}, {"problem": 32, "code": "(fn r [x] (if (empty? x) '() (cons (first x) (cons (first x) (r (rest x))))))", "user": "5776b47ce4b0979f8965163d"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "5777cffae4b0979f89651651"}, {"problem": 32, "code": "(fn [x]\n  (loop [tmp x result []]\n    (if (empty? tmp)\n      result\n      (recur (rest tmp)(conj result (first tmp) (first tmp)))\n      )\n    \n    )\n  \n  )", "user": "57750460e4b0979f8965160c"}, {"problem": 32, "code": "(fn [sq]\n   (let [dup (fn [s acc]\n               (if (empty? s) (reverse acc)\n                 (recur (rest s) (cons (first s) (cons (first s) acc)))))]\n     (dup sq '())))", "user": "57780e4fe4b0979f89651657"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "5761513fe4b0994c1922fb87"}, {"problem": 32, "code": "#(interleave % %)", "user": "57619fc9e4b0994c1922fb93"}, {"problem": 32, "code": "(fn [s] (mapcat (fn [x] [x x]) s))", "user": "577629abe4b0979f8965162e"}, {"problem": 32, "code": "reduce (fn [acc, val] (conj(conj acc val) val))[]", "user": "5776558ee4b0979f89651633"}, {"problem": 32, "code": "#(->> %\n       (map (partial repeat 2))\n       (reduce concat '()))", "user": "577829f9e4b0979f8965165a"}, {"problem": 32, "code": "reduce #(into %1 [%2 %2]) []", "user": "571346c0e4b07c98581c3a9b"}, {"problem": 32, "code": "(fn [s]\n  (reduce \n   (fn [a v]\n     (conj (conj a v) v)\n   )\n   []\n   s\n  )\n)", "user": "577aacf2e4b0d3393e5deb03"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5778b78be4b0979f89651666"}, {"problem": 32, "code": "#(sort (concat % %))", "user": "577a8049e4b0d3393e5deafc"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "5739ff3ae4b0cd1946bd1084"}, {"problem": 32, "code": "#(interleave % %)", "user": "56c5db15e4b05cc29241eeac"}, {"problem": 32, "code": "#(apply concat (map list % %))", "user": "577abecfe4b0d3393e5deb06"}, {"problem": 32, "code": "(fn [x]\n  (loop [new-list [] cnt 0]\n    (if (= (count new-list) (* (count x) 2))\n      new-list\n      (recur (conj new-list (nth x cnt) (nth x cnt)) (inc cnt)))))", "user": "5756e218e4b02ea1147992e5"}, {"problem": 32, "code": "#(reduce (fn [l i] (concat l [i i])) '() %)", "user": "4ecf5ee1535d44c135fd68b7"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "5776f39de4b0979f89651643"}, {"problem": 32, "code": "#(reduce (fn [coll e] (conj coll e e)) [] %)", "user": "577c3da9e4b0c8d87281f6b9"}, {"problem": 32, "code": "#(mapcat vector % %)", "user": "577d3feee4b0c8d87281f6d2"}, {"problem": 32, "code": "#(mapcat list % %)", "user": "577c88f5e4b0c8d87281f6c1"}, {"problem": 32, "code": "(fn dup-seq [x]\n  (seq (reduce (fn [x y] (conj x y y)) [] x)))", "user": "577f635be4b0d36ec5835e64"}, {"problem": 32, "code": "(fn [coll] (reduce #(conj %1 %2 %2) [] coll))", "user": "566096d0e4b068f2fe63dc5a"}, {"problem": 32, "code": "#(reduce (fn\n            [new-arr arr]\n            (conj new-arr arr arr))\n          []\n\t\t  %)", "user": "576d6266e4b0979f89651563"}, {"problem": 32, "code": "(fn duplicate [coll]\n  (loop [[x & xs :as coll] coll\n         result []]\n    (if (empty? coll)\n      result\n      (recur xs (conj result x x)))))", "user": "555b6e82e4b0deb715856e51"}, {"problem": 32, "code": "#(mapcat (fn [x] [x x]) %)", "user": "57822efce4b0d36ec5835e91"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "55ff2f89e4b00f4cabc5765e"}, {"problem": 32, "code": "#(interleave % %)", "user": "576df252e4b0979f8965156f"}, {"problem": 32, "code": "(fn [x]\n  (loop [in x out '()]\n  (if (empty? in)\n    (reverse (apply concat out))\n    (recur (rest in)\n    \t(conj\n         \tout\n         \t(let [z (first in)]\n              (list z z))\n        )\n    )\n  )\n  )\n)", "user": "577bfef9e4b0d3393e5deb2d"}, {"problem": 32, "code": "#(mapcat (fn [s] (repeat 2 s)) %)", "user": "57828e95e4b0d36ec5835e96"}, {"problem": 32, "code": "(fn [x] (reverse (reduce #(cons %2 (cons %2 %1)) '() x)))", "user": "514872f5e4b05514c84b7cbe"}, {"problem": 32, "code": "reduce (fn[r x] (concat r (list x x) )) '()", "user": "577e54bbe4b0c8d87281f6e5"}, {"problem": 32, "code": "#(mapcat list % %)", "user": "5726ccf4e4b0c5bde472c12c"}, {"problem": 32, "code": "(fn [coll] (apply concat (map #(repeat 2 %) coll)))", "user": "57615a22e4b0994c1922fb88"}, {"problem": 32, "code": "#(reduce (fn [a b] (conj a b b)) [] %)", "user": "5776385fe4b0979f89651632"}, {"problem": 32, "code": "(fn f [s]\n  (let [f*\n        (fn [acc s*]\n          (conj acc s* s*))]\n    (reduce f* [] s)))", "user": "5783c859e4b0ebec4cfb74bd"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "56e42593e4b03a7c14b85a48"}, {"problem": 32, "code": "(fn [s] (reduce concat (map #(list % %) s)))", "user": "5784ec65e4b0ebec4cfb74d1"}, {"problem": 32, "code": "#(loop [x % result []]\n    (if (empty? x) result (recur (rest x) (conj (conj result (first x)) (first x)))))", "user": "575e71a2e4b0846ea39baf26"}, {"problem": 32, "code": "#(interleave % %)", "user": "577f442ce4b0d36ec5835e60"}, {"problem": 32, "code": "(fn [xs] (mapcat #(list %1 %1) xs))", "user": "5785de31e4b0ebec4cfb74e4"}, {"problem": 32, "code": "mapcat (fn [x] [x x])", "user": "5785de71e4b0ebec4cfb74e7"}, {"problem": 32, "code": "(fn [in]\n  (loop [xs in \n         acc []]\n    (if (seq xs)\n      (recur (rest xs) (conj acc (first xs) (first xs)))\n      acc)))", "user": "578606d2e4b0ebec4cfb74ec"}, {"problem": 32, "code": "(fn duplicate-elements [coll]\n    (mapcat #(vector % %) coll))", "user": "4dfe5a93535d04ed9115e786"}, {"problem": 32, "code": "#(mapcat (fn [x]  [x x])  %)", "user": "5785de43e4b0ebec4cfb74e5"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "56327168e4b0bfe05bf117a5"}, {"problem": 32, "code": "(fn [x] (reverse (reduce #(conj %1 %2 %2) () x)))", "user": "566e3af2e4b0a866af6896d5"}, {"problem": 32, "code": "#(mapcat (fn [n] [n n]) %)", "user": "5757142ae4b02ea1147992ed"}, {"problem": 32, "code": "#(mapcat (fn [coll] (repeat 2 coll)) %)", "user": "5786e182e4b0ebec4cfb7500"}, {"problem": 32, "code": "(fn [s]\n  \"duplicate elements of a sequence\"\n  (loop [sq s\n         result []]\n    (if (seq sq)\n      (recur (rest sq) (conj result (first sq) (first sq)))\n             result)))", "user": "56fc9a2de4b08d47c977819b"}, {"problem": 32, "code": "mapcat #(vec [% %])", "user": "577832f4e4b0979f8965165b"}, {"problem": 32, "code": "(fn [x] (sort (apply concat (repeat 2 x))))", "user": "5785de78e4b0ebec4cfb74e8"}, {"problem": 32, "code": "mapcat #(vector % %)", "user": "578d230fe4b0ebec4cfb7564"}, {"problem": 32, "code": "(fn dup [li]\n  (cond (empty? li) '()\n    :else \n    (let [el (first li)]\n      (cons el (cons el (dup (rest li)))))))", "user": "5786c182e4b0ebec4cfb74fd"}, {"problem": 32, "code": "(fn [coll]\n  (loop [coll coll result []]\n    (if-let [head (first coll)]\n      (recur (rest coll) (conj (conj result head) head))\n      result)))", "user": "566b57e9e4b0a866af6896ad"}, {"problem": 32, "code": "#(reduce (fn [acc x] (conj acc x x)) [] %)", "user": "578e5750e4b0ebec4cfb7581"}, {"problem": 32, "code": "(fn dup [coll]\n  (if (nil? coll)\n    coll\n    (concat (list (first coll)\n                  (first coll))\n            (dup (next coll)))))", "user": "577b4440e4b0d3393e5deb0f"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "578f9a18e4b0ebec4cfb7598"}, {"problem": 32, "code": "#(reduce\n  (fn [r n]\n    (conj r n n)\n    )\n  []\n  %)", "user": "577ab41fe4b0d3393e5deb05"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "574ff497e4b02ea114799266"}, {"problem": 32, "code": "reduce (fn [x y] (concat x (repeat 2 y))) []", "user": "578b140be4b0ebec4cfb7545"}, {"problem": 32, "code": "(fn [xs]\n  (reduce #(apply conj %1 (list %2 %2)) [] xs))", "user": "5785de4ce4b0ebec4cfb74e6"}, {"problem": 32, "code": "(fn [s] \n  (reduce \n   (fn [res e] \n     (conj res e e))\n   []\n   s))", "user": "578cf84ce4b0ebec4cfb7562"}, {"problem": 32, "code": "#(interleave % %)", "user": "56092852e4b0053d1b86c7d9"}, {"problem": 32, "code": "#(interleave % %)", "user": "577c7f46e4b0c8d87281f6c0"}, {"problem": 32, "code": "#(seq (reduce (fn [x y] (into x (repeat 2 y))) [] %))", "user": "569fc70ee4b0542e1f8d1499"}, {"problem": 32, "code": "(fn [l]\n  (interleave l l))", "user": "5791d259e4b0ebec4cfb75c0"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "55a3d7c7e4b0acc240e3153d"}, {"problem": 32, "code": "(fn\n  [coll]\n  (mapcat #(repeat 2 %) coll))", "user": "56c21eafe4b05cc29241ee7e"}, {"problem": 32, "code": "#(interleave % %)", "user": "577fa91ee4b0d36ec5835e6a"}, {"problem": 32, "code": "(letfn [(dup [xs]\n  (if (empty? xs)\n    xs\n    (let [y (first xs) ys (rest xs)]\n      (lazy-seq (cons y (cons y (dup ys)))))))] dup)", "user": "577a74f7e4b0d3393e5deafa"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "57934c67e4b0e215f87e8456"}, {"problem": 32, "code": "#(interleave % %)", "user": "57762e67e4b0979f89651630"}, {"problem": 32, "code": "(fn [x] (mapcat #(vector % %) x))", "user": "578fc072e4b0ebec4cfb759a"}, {"problem": 32, "code": "(fn [sq] (mapcat #(repeat 2 %) sq))", "user": "55ede35ce4b0121d4835fde1"}, {"problem": 32, "code": "#(apply concat (map (partial repeat 2) %))", "user": "57839ae9e4b0ebec4cfb74b8"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "578e01e9e4b0ebec4cfb7575"}, {"problem": 32, "code": "#(interleave % %)", "user": "5790e62ae4b0ebec4cfb75b0"}, {"problem": 32, "code": "#(mapcat (fn [e] [e e]) %)", "user": "576d398be4b0979f8965155d"}, {"problem": 32, "code": "(fn [x] (reduce #(conj %1 %2 %2) [] x))", "user": "578e2829e4b0ebec4cfb757d"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5795f1f1e4b0e215f87e8490"}, {"problem": 32, "code": "#(interleave % %)", "user": "574cd554e4b02ea114799224"}, {"problem": 32, "code": "(fn [thing]\n  (loop [stuff thing ret '()]\n    (if (empty? stuff)\n      ret\n      (recur (rest stuff) (concat ret [(first stuff) (first stuff)])))))", "user": "5751fda4e4b02ea114799295"}, {"problem": 32, "code": "#(interleave % %)", "user": "5790f9d7e4b0ebec4cfb75b4"}, {"problem": 32, "code": "(fn [coll]\n  (interleave coll coll))", "user": "579601c8e4b0e215f87e8492"}, {"problem": 32, "code": "(fn [x]\n  (apply concat (map vector x x)))", "user": "53fb4e9ae4b0de5c4184857e"}, {"problem": 32, "code": "(fn dup [ls]\n  (let [[x & xs] ls]\n  (if x\n    (concat [x x] (dup xs)))))", "user": "57915ba4e4b0ebec4cfb75ba"}, {"problem": 32, "code": "#(interleave % %)", "user": "5798205ce4b039eba2ecb10e"}, {"problem": 32, "code": "reduce #(concat (concat %1 [%2]) [%2]) []", "user": "578e535de4b0ebec4cfb7580"}, {"problem": 32, "code": "(fn [s]\n  (reduce #(concat %1 (list %2 %2)) (empty s) s))", "user": "57958dace4b0e215f87e8484"}, {"problem": 32, "code": "mapcat (fn [x] [x x])", "user": "5784e177e4b0ebec4cfb74cf"}, {"problem": 32, "code": "#(interleave % %)", "user": "516064e5e4b009fba0926e26"}, {"problem": 32, "code": "#(interleave % %)", "user": "57982bace4b039eba2ecb10f"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "57853bd9e4b0ebec4cfb74d6"}, {"problem": 32, "code": "(fn dup' [xs]\n (if (empty? xs)\n   nil\n   (conj (dup' (rest xs)) (first xs) (first xs))))", "user": "579563ffe4b0e215f87e847e"}, {"problem": 32, "code": "#(loop [collected [] arr %] (if (empty? arr) collected (recur  (concat collected (repeat 2 (first arr)))  (rest arr))))", "user": "57986b76e4b039eba2ecb116"}, {"problem": 32, "code": "#(interleave % %)", "user": "5799fc93e4b05b1deef9add0"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5672925fe4b05957ce8c6114"}, {"problem": 32, "code": "#(loop [x % y []] (if (= (count x) 0) y (recur (rest x) (conj y (first x) (first x)))))", "user": "5799ff45e4b05b1deef9add1"}, {"problem": 32, "code": "(fn [v] (apply concat (map #(repeat 2 %) v)))", "user": "5646bb8fe4b0284900eef614"}, {"problem": 32, "code": "(fn [x] (sort (into () (clojure.set/union x x))))", "user": "5797bb57e4b039eba2ecb104"}, {"problem": 32, "code": "(fn duplicate \n    [coll]\n    (reverse (reduce \n              (fn agg [res el] (conj res el el))\n              '() \n              coll)))", "user": "568bd448e4b0dcc4269f40a9"}, {"problem": 32, "code": "#(reduce (fn [acc x] (conj acc x x)) [] %)", "user": "54781b06e4b0c51c1f4d72ba"}, {"problem": 32, "code": "mapcat #(vector % %)", "user": "579c8ad1e4b05b1deef9ae0c"}, {"problem": 32, "code": "#(mapcat (partial repeat 2) %)", "user": "579c35fee4b05b1deef9ae04"}, {"problem": 32, "code": "#(reduce (fn [a b] (conj a b b)) '() (reverse %))", "user": "56f09bf4e4b04a395b9a047f"}, {"problem": 32, "code": "(fn doubleit [nesto] (mapcat #(if (sequential? %) % [%]) (for [x nesto] [x x])))", "user": "4f035fbe535dcb61093f6a92"}, {"problem": 32, "code": "(fn [coll] (interleave coll coll))", "user": "5797d4bae4b039eba2ecb107"}, {"problem": 32, "code": "(fn [xs]\n  (reduce (fn [agg now] (into agg [now now])) [] xs))", "user": "57717915e4b0979f896515b3"}, {"problem": 32, "code": "(partial reduce #(concat %1 (list %2 %2)) [])", "user": "579e15a6e4b05b1deef9ae20"}, {"problem": 32, "code": "(fn duplicate [coll]\n  (if (empty? coll)\n    '()\n    (concat (repeat 2 (first coll))\n            (duplicate (rest coll)))))", "user": "5151d574e4b03e678e393ae0"}, {"problem": 32, "code": "#(apply concat (map (fn [x] (list x x)) %))", "user": "5799b260e4b05b1deef9adc8"}, {"problem": 32, "code": "mapcat (partial repeat 2)", "user": "579f4812e4b05302be0b72fb"}, {"problem": 32, "code": "(fn [tl]\n  (loop [res [] ll tl]\n    (if (empty? ll)\n      res\n      (recur (conj res (first ll) (first ll)) (next ll))\n    )\n  )\n)", "user": "57873017e4b0ebec4cfb7503"}, {"problem": 32, "code": "(fn [s] (reduce #(conj % %2 %2) [] s))", "user": "55afba88e4b002ce9d5cbc17"}, {"problem": 32, "code": "(fn [coll] (interleave coll coll))", "user": "4f2d90ece4b0d6649770a05f"}, {"problem": 32, "code": "(fn [coll] (reverse (reduce (fn [acc x] (concat [x x] acc)) '() coll)))", "user": "545b486ae4b01be26fd7464f"}, {"problem": 32, "code": "#(reduce (fn [x y] (concat x (repeat 2 y))) '() %1)", "user": "57783873e4b0979f8965165c"}, {"problem": 32, "code": "(partial mapcat (partial repeat 2))", "user": "57a178ade4b0c3d858beb8ec"}, {"problem": 32, "code": "(fn [coll] (reverse (reduce (fn [x y] (conj x y y)) '() coll)))", "user": "57a0f256e4b0c3d858beb8dd"}, {"problem": 32, "code": "#(reduce into [] (map (partial repeat 2) %))", "user": "57a13745e4b0c3d858beb8e3"}, {"problem": 32, "code": "mapcat #(vector % %)", "user": "577e42dee4b0c8d87281f6e4"}, {"problem": 32, "code": "reduce \n\t(fn [myvector part]\n    \t(conj (conj myvector part) part)\n    )\n\t[]", "user": "579be21fe4b05b1deef9adff"}, {"problem": 32, "code": "(fn [coll]\n  (loop [in coll\n         out '()]\n    (if (empty? in)\n      out\n      (recur (rest in)\n             (concat out (list (first in)) (list (first in)))))))", "user": "57a310b4e4b0c3d858beb90c"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "57757612e4b0979f8965161d"}, {"problem": 32, "code": "(fn [x] (loop [sq x acc []] (if (empty? sq) acc (recur (rest sq) (conj (conj acc (first sq)) (first sq))))))", "user": "57a22c85e4b0c3d858beb8f6"}, {"problem": 32, "code": "(fn [col]\n  (reverse (reduce #(into %1 [%2 %2]) '() col)))", "user": "579c7db7e4b05b1deef9ae0a"}, {"problem": 32, "code": "(fn [s]\n  (reduce (fn [memo x]\n            (conj memo x x))\n          []\n          s))", "user": "577bf999e4b0d3393e5deb2c"}, {"problem": 32, "code": "#(interleave %1 %1)", "user": "57509096e4b02ea114799277"}, {"problem": 32, "code": "(fn dup[l]\n  (reduce concat (map (fn [x y] [x y]) l l))  \n)", "user": "579d1567e4b05b1deef9ae12"}, {"problem": 32, "code": "(fn [xs] (apply concat (map #(repeat 2 %) xs)))", "user": "57a4bb65e4b0a966079561eb"}, {"problem": 32, "code": "(fn [a]\n  (reduce #(conj %1 %2 %2) [] a))", "user": "57a4f5cae4b0a966079561f0"}, {"problem": 32, "code": "(fn [xs]\n  (apply concat (map #(repeat 2 %) xs)))", "user": "57a49951e4b0a966079561e5"}, {"problem": 32, "code": "(fn [coll] \n  (loop [elem coll res []]\n        (let [e (first elem)]\n    (if (not (empty? elem))\n      (recur (rest elem) (concat res  (list e e)))\n      res))))", "user": "57936970e4b0e215f87e8458"}, {"problem": 32, "code": "(fn [i]\n  (reduce #(conj %1 %2 %2) [] i))", "user": "57a2bb9be4b0c3d858beb905"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "579d9601e4b05b1deef9ae18"}, {"problem": 32, "code": "(fn [arr] (apply concat (map #(repeat 2 %) arr)))", "user": "563c6ebae4b0bfe05bf11834"}, {"problem": 32, "code": "(fn [x]\n    (mapcat #(vector % %) x))", "user": "57a1ef58e4b0c3d858beb8f3"}, {"problem": 32, "code": "#(reduce (fn [x y] do (conj x y y)) [] %)", "user": "57a14414e4b0c3d858beb8e4"}, {"problem": 32, "code": "(fn [coll] \n  (loop [remaining coll acc []] \n    (if (empty? remaining) acc \n      (recur (rest remaining) (conj acc (first remaining) (first remaining))))))", "user": "57a774e4e4b0a96607956213"}, {"problem": 32, "code": "#(reverse ((fn foo [list]\r\n             (loop [r '()\r\n                    l list]\r\n               (if-let [e (first l)]\r\n                 (recur (conj r e e) (rest l))\r\n                 r))) %))", "user": "57a9b2dbe4b0a96607956233"}, {"problem": 32, "code": "#(mapcat list % %)", "user": "57aa4775e4b0b8559636fc6b"}, {"problem": 32, "code": "(fn [xs]\n  (reduce concat\n          (map (fn [a] [a a]) xs))\n  )", "user": "50f89404e4b0aafb827eb204"}, {"problem": 32, "code": "#(reduce (fn [v i] (into v [i i])) [] %)", "user": "57a9e274e4b0b8559636fc5d"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "57752a2de4b0979f89651613"}, {"problem": 32, "code": "(fn [coll]\n  (reduce (fn [acc item]\n          (conj acc item item))\n          []\n          coll))", "user": "57abf68ce4b0b8559636fc7f"}, {"problem": 32, "code": "#(reduce (fn [result, target] (conj result target target)) '() (reverse %))", "user": "57a5f1e3e4b0a96607956200"}, {"problem": 32, "code": "#(apply concat (map (fn [e] [e e]) %))", "user": "57aa290de4b0b8559636fc65"}, {"problem": 32, "code": "mapcat (fn [v] [v v])", "user": "57acb156e4b0b8559636fc8d"}, {"problem": 32, "code": "#((fn [res xs]\n  (if (empty? xs)\n    res\n    (recur (cons (last xs) (cons (last xs) res)) (butlast xs))))\n ()\n %)", "user": "579fa28fe4b0264b925669fb"}, {"problem": 32, "code": "(fn [x] (apply concat (map #(list % %) x)))", "user": "572a13cde4b0f4d77e65122b"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "577aad81e4b0d3393e5deb04"}, {"problem": 32, "code": "(fn f [xs] (mapcat #(vector % %) xs))", "user": "57adbe7ee4b0b8559636fca0"}, {"problem": 32, "code": "#(mapcat vector % %)", "user": "57aa4752e4b0b8559636fc6a"}, {"problem": 32, "code": "#(interleave % %)", "user": "5075e374e4b09049dea827a5"}, {"problem": 32, "code": "(fn [input]\n  (loop [in input out []]\n    (if (empty? in)\n      out\n      (let [head (first in)\n           body (rest in)]\n        (recur body (conj out head head))))))", "user": "57af6cf4e4b0fbc9809a2735"}, {"problem": 32, "code": "#(interleave % %)", "user": "55da18d5e4b0e31453f64ad1"}, {"problem": 32, "code": "(fn [s] (mapcat #(do [% %]) s))", "user": "57addbcce4b0b8559636fca3"}, {"problem": 32, "code": "#(mapcat (fn [x] (list x x)) %)", "user": "57af249fe4b0fbc9809a272b"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "55fde52ce4b00f4cabc5764c"}, {"problem": 32, "code": "(fn duplicate \n  ([s]\n   (if (empty? s) '()\n       (duplicate s '())))\n  ([s res]\n   (if (empty? s) (reverse res)\n       (duplicate (rest s) (into res (list (first s) (first s)))))))", "user": "57af41bce4b0fbc9809a2731"}, {"problem": 32, "code": "#(sort (into % %))", "user": "57ac7710e4b0b8559636fc88"}, {"problem": 32, "code": "(fn [list]\n\n   (loop [list list newlist []]\n\n\n     (if (empty? list)\n       (reverse (into () newlist))\n       (recur (drop 1 list)\n              (into newlist  [(first list) (first list)])\n              )\n       )\n\n     )\n  )", "user": "57aa103be4b0b8559636fc64"}, {"problem": 32, "code": "#(mapcat \n  (fn[x]\n    (repeat 2 x)) \n  %)", "user": "57ab41dde4b0b8559636fc79"}, {"problem": 32, "code": "#(mapcat list % %)", "user": "57b13adae4b0fbc9809a2750"}, {"problem": 32, "code": "#(loop [x % r []]\n         (if (empty? x) r\n             (recur (rest x) (conj r (first x) (first x)) )))", "user": "579ea15ee4b05b1deef9ae2a"}, {"problem": 32, "code": "(fn [xs]\n  (mapcat (fn [x] [x x]) xs))", "user": "4f387c2ee4b0e243712b1edd"}, {"problem": 32, "code": "(fn my-dup [s]\n\t(reverse (reduce #(cons %2 (cons %2 %1)) '() s))\n)", "user": "57a9db97e4b0b8559636fc5b"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2)\n        []", "user": "57a9eddae4b0b8559636fc5f"}, {"problem": 32, "code": "reduce\u3000(fn [n s] (conj (conj n s) s)) []", "user": "57908d94e4b0ebec4cfb75ac"}, {"problem": 32, "code": "#(interleave % %)", "user": "57a88e24e4b0a9660795621f"}, {"problem": 32, "code": "#(interleave % %)", "user": "572af688e4b0f4d77e651249"}, {"problem": 32, "code": "#(mapcat (fn [x] (list x x)) %1)", "user": "57b1b8c8e4b0fbc9809a2756"}, {"problem": 32, "code": "(fn \n  [x]\n  (loop [coll x out []]\n    (cond (empty? coll) out\n          :else (recur (rest coll) (conj (conj out (first coll)) (first coll))))))", "user": "57acee37e4b0b8559636fc94"}, {"problem": 32, "code": "#(interleave % %)", "user": "57b3efb1e4b0fbc9809a278a"}, {"problem": 32, "code": "(fn [xs] (mapcat identity (map #(take 2 (repeat %)) xs)))", "user": "57995ac1e4b05b1deef9adbf"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "57a10070e4b0c3d858beb8e0"}, {"problem": 32, "code": "mapcat #(vector % %)", "user": "57b4779de4b0fbc9809a279a"}, {"problem": 32, "code": "(fn [l] (mapcat identity (map #(repeat 2 %) l)))", "user": "57b6cc7ce4b0fbc9809a27c4"}, {"problem": 32, "code": "reduce #(concat %1 (repeat 2 %2)) '()", "user": "57addf3ae4b0b8559636fca4"}, {"problem": 32, "code": "#(apply concat (map (fn[x] (list x x)) %))", "user": "57b59d77e4b0fbc9809a27ae"}, {"problem": 32, "code": "mapcat #(take 2 (repeat %))", "user": "57b3046de4b0fbc9809a276d"}, {"problem": 32, "code": "(fn [x] (seq (reduce #(conj %1 %2 %2) [] x)))", "user": "57b5dc52e4b0fbc9809a27b3"}, {"problem": 32, "code": "(fn [x] (mapcat (partial repeat 2) x))", "user": "57a2328ae4b0c3d858beb8f8"}, {"problem": 32, "code": "(fn foo [x] (let [y (first x)] (if (= (count x) 1) (list y y) (conj (conj (foo (rest x)) y) y))))", "user": "57b8b008e4b0fbc9809a27e6"}, {"problem": 32, "code": "#(interleave % %)", "user": "57b88091e4b0fbc9809a27e1"}, {"problem": 32, "code": "(fn [x] (interleave x x))", "user": "57b99d48e4b0fbc9809a27f2"}, {"problem": 32, "code": "#(interleave % %)", "user": "57b55290e4b0fbc9809a27a9"}, {"problem": 32, "code": "#(interleave % %)", "user": "56bfd8ade4b060a8e693e3a2"}, {"problem": 32, "code": "#(loop [l % ret '[]]\n       (if (nil? l)\n         ret\n         (recur (next l) (conj ret (first l) (first l)))))", "user": "5386f784e4b06839e8705f17"}, {"problem": 32, "code": "(fn [s] (into () (reduce (fn [r i] (conj r i i)) () s)))", "user": "57b6edf6e4b0fbc9809a27c8"}, {"problem": 32, "code": "(fn [lst]\n  (loop [initial 0\n         new_lst lst\n         result []]\n  (if (>= initial (count lst))\n    result\n    (recur (inc initial) (rest new_lst) (conj result (first new_lst) (first new_lst))))))", "user": "57a7f7d8e4b0a96607956218"}, {"problem": 32, "code": "(fn [coll] (apply concat (map vector coll coll)))", "user": "50ab395de4b0f65d68208508"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "57bc9375e4b05aa3c4741c43"}, {"problem": 32, "code": "(fn [my-seq]\n\t(interleave my-seq my-seq))", "user": "57a1478ae4b0c3d858beb8e5"}, {"problem": 32, "code": "(fn [n] (reduce #(conj %1 %2 %2) [] n))", "user": "57b35a19e4b0fbc9809a277d"}, {"problem": 32, "code": "#(interleave % %)", "user": "57bbc9bde4b05aa3c4741c31"}, {"problem": 32, "code": "#(reduce concat (map (fn [x] (take 2 (repeat x))) %))", "user": "56684356e4b04acd4f672de4"}, {"problem": 32, "code": "mapcat #( repeat 2 % )", "user": "577412c6e4b0979f896515f6"}, {"problem": 32, "code": "(fn dupler[seqq]\n  (when seqq\n    (cons (first seqq) (cons (first seqq) (dupler (next seqq))))))", "user": "57bd960fe4b05aa3c4741c52"}, {"problem": 32, "code": "reduce #(into %1 [%2 %2]) []", "user": "57b9fc74e4b0fbc9809a27fb"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "566ff0a1e4b0a866af6896ec"}, {"problem": 32, "code": "#(loop [col %\n         result '()]\n       (if (empty? col)\n          (reverse result)\n           (recur (rest col)\n                  (conj result (first col) (first col)))))", "user": "57bf304de4b05aa3c4741c75"}, {"problem": 32, "code": "(fn [lat]\n  (reduce concat (map #(take 2 (repeat %)) lat)))", "user": "57b9d21fe4b0fbc9809a27f7"}, {"problem": 32, "code": "(fn [coll]\n  (interleave coll coll))", "user": "57bfffc7e4b05aa3c4741c8a"}, {"problem": 32, "code": "(fn test [seqq]\n  (interleave seqq seqq))", "user": "579332c2e4b0e215f87e8452"}, {"problem": 32, "code": "(fn [coll] (mapcat #(list % %) coll))", "user": "57c0917be4b05aa3c4741c95"}, {"problem": 32, "code": "(fn [s]\n  (reduce (fn [a n] (conj (conj a n) n))\n          []\n          s\n          )\n)", "user": "57c3c7e6e4b05aa3c4741cc4"}, {"problem": 32, "code": ";;reduce #(conj (conj % %2) %2) []\n;;reduce #(conj % %2 %2) []\n;;#(interleave % %)\n;;#(mapcat list % %)\n;;mapcat #(list % %)\nmapcat (fn [x] [x x]) ;;mapcat #([% %])  -- is bad", "user": "57ba55c1e4b0fbc9809a2801"}, {"problem": 32, "code": "#(reduce (fn [acc x] (conj acc x x)) [] %)", "user": "56cf115de4b0ea9b8538f765"}, {"problem": 32, "code": "(fn [s] (reduce concat (into [] (map (fn [x] [x x]) s))))", "user": "57c0393be4b05aa3c4741c90"}, {"problem": 32, "code": "(fn [x] (apply concat (map #(repeat 2 %) x)))", "user": "57c3451fe4b05aa3c4741cbd"}, {"problem": 32, "code": "(fn [x] (reverse (reduce #(conj %1 %2 %2) () x)))", "user": "57c4e8dce4b05aa3c4741cd7"}, {"problem": 32, "code": "#(interleave % %)", "user": "56887bcbe4b0dcc4269f406a"}, {"problem": 32, "code": "(fn [a] (apply concat(map #(repeat 2 %) a)))", "user": "57b8f784e4b0fbc9809a27ea"}, {"problem": 32, "code": "(fn [x] (reduce #(apply conj %1 (list %2 %2)) [] x))", "user": "57c500f9e4b05aa3c4741cda"}, {"problem": 32, "code": "(fn [x]\n      (reduce (fn [acc v]\n                (conj (conj acc v) v)) [] x))", "user": "57c3df67e4b05aa3c4741cc5"}, {"problem": 32, "code": "#(mapcat list % %)", "user": "57c1b32be4b05aa3c4741ca4"}, {"problem": 32, "code": "#(apply concat (for [d %] [d d]))", "user": "55ed37ebe4b0121d4835fdd6"}, {"problem": 32, "code": "reduce #(-> %1 (conj %2) (conj %2)) []", "user": "57395f32e4b0cd1946bd1070"}, {"problem": 32, "code": "(fn [x] (sort (take (* 2 (count x)) (cycle x))))\n\n;(fn [coll] (sort (concat coll coll)))", "user": "57c44053e4b05aa3c4741ccb"}, {"problem": 32, "code": "(fn [coll] (apply concat (map #(seq [% %]) coll)))", "user": "57aa2b97e4b0b8559636fc66"}, {"problem": 32, "code": "#(reduce concat '() (map (fn [args] (let [newseq []] (conj newseq args args))) %))", "user": "57a99d3fe4b0a96607956231"}, {"problem": 32, "code": "(fn [col]\n  (loop [el col res []]\n    (if (seq el)\n      (recur (rest el) (apply (partial conj res) (->> el first constantly (repeatedly 2))))\n      res)))", "user": "57c7cef5e4b05aa3c4741d0d"}, {"problem": 32, "code": "(fn [x]\n  (reverse\n   (reduce (fn [a b] (cons b (cons b a))) '() x)))", "user": "57c92bdbe4b05aa3c4741d27"}, {"problem": 32, "code": "reduce #(into % [%2 %2]) []", "user": "57c796b4e4b05aa3c4741d08"}, {"problem": 32, "code": "#(interleave % %)", "user": "57b45257e4b0fbc9809a2796"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "558e160ce4b027778923764c"}, {"problem": 32, "code": "#(interleave % %)", "user": "57af3bace4b0fbc9809a2730"}, {"problem": 32, "code": "(fn [x] (mapcat #(list % %) x))", "user": "57c6bca1e4b05aa3c4741cf8"}, {"problem": 32, "code": "(fn [array]\n  (reduce #(conj (conj % %2) %2) [] array))", "user": "57c2d66ae4b05aa3c4741cb9"}, {"problem": 32, "code": "(fn [a] (interleave a a))", "user": "515310b4e4b0d6806ecd26fb"}, {"problem": 32, "code": "mapcat #(vector % %)", "user": "57c58ad6e4b05aa3c4741ce7"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "57c7a8b5e4b05aa3c4741d09"}, {"problem": 32, "code": "(fn [c] (reduce #(conj (conj %1 %2) %2) [] c))", "user": "57c7e7d9e4b05aa3c4741d0f"}, {"problem": 32, "code": "(fn [input] (loop [in input\n                   out [] ]\n              (if (nil? (first in))\n                out\n                (recur (rest in) (conj (conj out (first in)) (first in))))))", "user": "579aff09e4b05b1deef9ade7"}, {"problem": 32, "code": "(fn duplicate-seq [a-seq]\n        (reduce #(conj %1 %2 %2) [] a-seq))", "user": "57ca95f2e4b05aa3c4741d3b"}, {"problem": 32, "code": "reduce #(-> %1 (conj %2) (conj %2)) []", "user": "57cd7498e4b0c746388ab897"}, {"problem": 32, "code": "mapcat #(identity [%1 %1])", "user": "57ce3fede4b0c746388ab8a6"}, {"problem": 32, "code": "#(->> % \n      (map (fn [x] [x x]))\n      (apply concat))", "user": "57c94c6ee4b05aa3c4741d2d"}, {"problem": 32, "code": "#(reverse (reduce (fn [y x] (conj (conj y x) x)) () %))", "user": "57b35772e4b0fbc9809a277c"}, {"problem": 32, "code": "#(apply concat (map (fn [x] (list x x)) %))", "user": "57cef3f8e4b0c746388ab8b4"}, {"problem": 32, "code": "#(mapcat (fn [e] (repeat 2 e)) %)", "user": "57c45e64e4b05aa3c4741ccf"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "57c6aa0be4b05aa3c4741cf7"}, {"problem": 32, "code": "(fn [s]\n    (mapcat #(repeat 2 %) s))", "user": "57985f98e4b039eba2ecb114"}, {"problem": 32, "code": "(fn [x]\n  (apply concat (map (fn [e] [e e]) x)))", "user": "57a0b341e4b0c3d858beb8d4"}, {"problem": 32, "code": "(fn [data]\n  (sort (concat data data)))", "user": "57b19fa1e4b0fbc9809a2754"}, {"problem": 32, "code": "(fn [arg] \n  (mapcat (fn [x] (list x x))\n        arg))", "user": "57c7fa03e4b05aa3c4741d12"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "57cacbf2e4b05aa3c4741d3e"}, {"problem": 32, "code": "(fn [coll]\n  (reduce #(concat % [%2 %2]) [] coll))", "user": "57a775bbe4b0a96607956214"}, {"problem": 32, "code": "(fn [s] (reduce (fn [a b] (conj a b b)) [] s))", "user": "559e7848e4b08a52bd4f97d4"}, {"problem": 32, "code": ";;(fn duplicate\n;;  [collection]\n;;  (reduce (fn [c val]\n;;            (conj c val val)) [] collection))\nreduce #(conj %1 %2 %2) []", "user": "57d0cd58e4b0bd073c20235e"}, {"problem": 32, "code": "(fn duplicate\n   ([s]\n    (let [first-elem (first s)]\n      (if (nil? first-elem)\n        s\n        (cons first-elem (cons first-elem (duplicate (rest s))))))))", "user": "552d487ee4b076ab5578f7e4"}, {"problem": 32, "code": "#(sort (into % %))", "user": "57c56d78e4b05aa3c4741ce3"}, {"problem": 32, "code": "(fn duplicate [x] \n  (if (= x []) '() \n    (let [h (first x)]\n      (concat (list h h) (duplicate (rest x))))))", "user": "57d1d6c8e4b0bd073c202370"}, {"problem": 32, "code": "(fn duplicateASeq\n  [arg]\n  (loop [[first & rest] arg\n         result '()]\n    (if (nil? first)\n      (reverse result)\n      (do (println first rest)\n          (recur rest (conj result first first)))\n      ))\n    )", "user": "57c731ede4b05aa3c4741d00"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "57d588a5e4b0bd073c2023b6"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "57c8208ce4b05aa3c4741d16"}, {"problem": 32, "code": "(fn [v]\n  (mapcat #(repeat 2 %) v))", "user": "57d4f225e4b0bd073c2023a6"}, {"problem": 32, "code": "#(interleave % %)", "user": "56958a16e4b0dcc4269f4129"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "57d6b9c4e4b0bd073c2023cb"}, {"problem": 32, "code": "(fn dupl-recur\n  ([input-coll] (dupl-recur input-coll []))\n  ([input-coll output-coll] (if (empty? input-coll) output-coll (dupl-recur (rest input-coll) (let [the-first (first input-coll)] (conj (conj output-coll the-first) the-first)))))\n)", "user": "57b356c2e4b0fbc9809a277b"}, {"problem": 32, "code": "#(interleave % %)", "user": "57c62aece4b05aa3c4741cf1"}, {"problem": 32, "code": "(fn [s] (sort (concat s s)))", "user": "57d1a0e6e4b0bd073c20236d"}, {"problem": 32, "code": "(fn [arr] (apply concat (map #(list % %) arr)))", "user": "57ccedaae4b0c746388ab88e"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "573d8658e4b05c31a32c0814"}, {"problem": 32, "code": "#(reduce \n    (fn [nlst v]\n      (conj nlst v v))\n    [] %)", "user": "57d9f603e4b0bd073c20240a"}, {"problem": 32, "code": "(fn [values]\n  (loop [values values result []]\n    (if (empty? values)\n      result\n      (let [item (first values)] \n        (recur (rest values) (conj result item item))))))", "user": "57d9bca1e4b0bd073c202405"}, {"problem": 32, "code": "#(reverse(reduce (fn [a b] (conj a b b)) '() %))", "user": "57da5fc4e4b0bd073c20240f"}, {"problem": 32, "code": "#(interleave % %)", "user": "57dc30e0e4b0bd073c202430"}, {"problem": 32, "code": "(fn [input]\n  (loop [inp input result []]\n    (let [[head & tail] inp]\n      (if (empty? inp)\n        result\n        (recur tail (conj result head head))))))", "user": "57c176abe4b05aa3c4741ca2"}, {"problem": 32, "code": "#(mapcat (fn f [x] [x x]) %)", "user": "57dbcc28e4b0bd073c202429"}, {"problem": 32, "code": "#(apply concat (map (partial repeat 2) %))", "user": "57dda21be4b0bd073c202445"}, {"problem": 32, "code": "(fn [x] (apply concat (for [e x] (repeat 2 e))))", "user": "57b9bfdae4b0fbc9809a27f5"}, {"problem": 32, "code": "#(\n  reduce (fn [coll item]\n  (concat coll [item item])) [] %1)", "user": "55f4ebffe4b06e875b46ce81"}, {"problem": 32, "code": "(fn [x]\n  (loop [in x\n         out []]\n    (if (empty? in)\n      out\n      (recur (rest in)\n             (conj (conj out (first in)) (first in))))))", "user": "566d71b1e4b0a866af6896ca"}, {"problem": 32, "code": "(fn [s]\n  (loop [result [] r s]\n    (if (empty? r)\n      result\n      (let [x (first r)]\n        (recur (conj result x x) (rest r))\n        )\n     )\n    )\n)", "user": "57d7c894e4b0bd073c2023de"}, {"problem": 32, "code": "(fn [coll] (mapcat #(repeat 2 %) coll))", "user": "5785c1d4e4b0ebec4cfb74e1"}, {"problem": 32, "code": "#(interleave % %)", "user": "57e0f30ae4b0bfb2137f5a66"}, {"problem": 32, "code": "#(interleave % %)", "user": "57dd47f4e4b0bd073c20243e"}, {"problem": 32, "code": "(fn [coll] (mapcat #(vector % %) coll))", "user": "55df1985e4b050e68259b3eb"}, {"problem": 32, "code": "(fn [items]\n  (loop [i 0 coll '()]\n        (if (= i (count items))\n          (reverse coll)\n          (recur (inc i) (into coll (repeat 2 (nth items i)))))))", "user": "56020b3fe4b04bb52996e19b"}, {"problem": 32, "code": "#(interleave % %)", "user": "57d9cae9e4b0bd073c202409"}, {"problem": 32, "code": "#(reduce (fn [items x] (conj items x x)) [] %1)", "user": "57df9f60e4b0bd073c202467"}, {"problem": 32, "code": "#(interleave % %)\n;reduce #(conj %1 %2 %2) []", "user": "57e139f6e4b0bfb2137f5a6c"}, {"problem": 32, "code": "#(interleave % %)", "user": "51b8e020e4b050a1176cd69e"}, {"problem": 32, "code": "mapcat #(replicate 2 %)", "user": "57b5ed94e4b0fbc9809a27b4"}, {"problem": 32, "code": "(fn [arg] (apply concat (map #(repeat 2 %) arg)))", "user": "57d93437e4b0bd073c2023f9"}, {"problem": 32, "code": "(fn [ll]\n (loop [mylist (seq ll) result []]\n   (if (= mylist ())\n     (seq result)\n     (recur (rest mylist) (conj result (first mylist) (first mylist)))\n   )\n )     \n)", "user": "57e396cde4b0bfb2137f5a9e"}, {"problem": 32, "code": "(fn duplicate-sequence\n  [seq]\n  (reverse (reduce (fn [res el] (conj res el el)) '() seq)))", "user": "57a6ad79e4b0a9660795620b"}, {"problem": 32, "code": "#(interleave % %)", "user": "57e33f6fe4b0bfb2137f5a96"}, {"problem": 32, "code": "#(reduce into (map (fn [y](conj (vector y) y)) %1))", "user": "57d60d83e4b0bd073c2023c2"}, {"problem": 32, "code": "(fn [a-seq]\n  (loop [output [] remaining a-seq]\n    (if (empty? remaining) output\n      (recur\n        (conj output (first remaining) (first remaining))\n        (rest remaining)))))", "user": "5784ff88e4b0ebec4cfb74d4"}, {"problem": 32, "code": "(fn\n  [coll]\n  (reverse\n   (reduce #(apply conj %1 (take 2 (repeat %2))) '() coll)))", "user": "574eb3b1e4b02ea114799247"}, {"problem": 32, "code": "(fn [coll]\n      (apply concat (for [e coll]\n                      (list e e))))", "user": "56f9c7c6e4b07572ad1a88ba"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "57894e30e4b0ebec4cfb752b"}, {"problem": 32, "code": "(fn [col]\n (cond (vector? (first col))\n        (for [pairs (partition 2\n                               (flatten\n                                (take 2\n                                      (for [each col]\n                                        (repeat 2 each)))))]\n          (into [] pairs))\n        :else\n               (sort (flatten (repeat 2 col)))))", "user": "56940617e4b0dcc4269f410b"}, {"problem": 32, "code": "(fn dup [s] (reduce #(conj (conj %1 %2) %2) [] s))", "user": "57e56da8e4b0bfb2137f5ad6"}, {"problem": 32, "code": "(fn\n    [-s]\n    (loop [s -s new []]\n          (if (empty? s)\n              new\n              (recur (rest s) (concat new (repeat 2 (first s)))))))", "user": "57e3f709e4b0bfb2137f5aaf"}, {"problem": 32, "code": "#(interleave % %)", "user": "574a71b7e4b02ea1147991fb"}, {"problem": 32, "code": "#(interleave % %)", "user": "57e5052ae4b0bfb2137f5ace"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5694e9c5e4b0dcc4269f4123"}, {"problem": 32, "code": "; (fn [coll]\n;  (reduce\n;    #(conj (conj %1 %2) %2)\n;    []\n;    coll))\n\n; (fn [coll]\n;  (reduce #(conj %1 %2 %2) [] coll))\n\nreduce #(conj %1 %2 %2) []", "user": "57e37f90e4b0bfb2137f5a9c"}, {"problem": 32, "code": "(fn dup-eles\n  ([xs]\n   (dup-eles xs []))\n  ([xs acc]\n   (if (seq xs)\n     (dup-eles (rest xs) (concat acc [(first xs) (first xs)]))\n     acc)))", "user": "5705f569e4b0b0fb43fd0677"}, {"problem": 32, "code": "(fn [lst] (apply concat (map \n    (fn [x]\n      (list x x)\n      )              \n           lst                     \n                         )))", "user": "57e404a3e4b0bfb2137f5ab1"}, {"problem": 32, "code": "#(loop [[n & remaining] % final []]\n    (let [final (conj (conj final n) n)]\n    (if (empty? remaining)\n      final\n      (recur remaining final))))", "user": "57e929c0e4b0bfb2137f5b21"}, {"problem": 32, "code": "(fn[xs](reduce (fn[accum,x] (conj (conj accum x) x)) [], xs) )", "user": "57e3d30be4b0bfb2137f5aab"}, {"problem": 32, "code": "(fn [x] \n  (loop [ e x\n          res '() ]\n    (if (empty? (rest e))\n      (reverse (conj res (first e) (first e)))\n      (recur (rest e) (conj res (first e) (first e))))))", "user": "57e572b5e4b0bfb2137f5ad7"}, {"problem": 32, "code": ";mapcat #(list % %)\n\n#(interleave % %)", "user": "57e4dbcbe4b0bfb2137f5ac3"}, {"problem": 32, "code": "#(interleave % %)", "user": "57df309ee4b0bd073c20245f"}, {"problem": 32, "code": ";#(flatten (for [i %] (repeat 2 i)))\nreduce #(conj %1 %2 %2) []", "user": "56629a7de4b0e91d5f5c5649"}, {"problem": 32, "code": "(fn [x] (reduce #(conj %1 %2 %2) [] x))", "user": "52f625ffe4b047fd55836fb5"}, {"problem": 32, "code": "#(interleave % %)", "user": "57e6997ee4b0bfb2137f5af0"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5783a897e4b0ebec4cfb74b9"}, {"problem": 32, "code": "#(mapcat identity (map (fn [x] [x x]) %))", "user": "57ec3d29e4b0bfb2137f5b77"}, {"problem": 32, "code": "#(sort (reduce into '() (for [i %\n     :let [out (repeat 2 i)]]\n     out)))", "user": "57e8d443e4b0bfb2137f5b1a"}, {"problem": 32, "code": ";; #(flatten (map (fn [x] (list x x)) %))\n\n#((fn [ls] (reduce (fn [acc, i] (concat acc [i i] )) '() ls)) %)", "user": "57eb7a97e4b0bfb2137f5b62"}, {"problem": 32, "code": "(fn [coll] (mapcat (fn [a] [a a]) coll))", "user": "57ee804ee4b0bfb2137f5bbb"}, {"problem": 32, "code": "(fn [coll]\n  (apply concat (map list coll coll)))", "user": "57942207e4b0e215f87e8469"}, {"problem": 32, "code": "(fn [a-seq]\n  (reduce (fn [acc x]\n            (conj acc x x))\n          []\n          a-seq))", "user": "574e84e0e4b02ea114799243"}, {"problem": 32, "code": "#(interleave % %)", "user": "57e91413e4b0bfb2137f5b20"}, {"problem": 32, "code": "(fn [coll]\n  (mapcat #(vector % %) coll))", "user": "57e79d8ee4b0bfb2137f5afe"}, {"problem": 32, "code": "(fn [a-seq] (reduce #(conj %1 %2 %2) [] a-seq))", "user": "57f0f7b8e4b0bfb2137f5bfe"}, {"problem": 32, "code": "(fn d [s]\n  (if (empty? s)\n    ()\n    (let [[hd & tl] s]\n      (cons hd (cons hd (d tl))))))", "user": "57df2722e4b0bd073c20245e"}, {"problem": 32, "code": "(fn [s]\n  (mapcat #(repeat 2 %) s))", "user": "57e20474e4b0bfb2137f5a82"}, {"problem": 32, "code": "#(loop [ins %\n            outs []]\n       (if (empty? ins)\n         outs\n         (recur (next ins) (conj (conj outs (first ins)) (first ins)))))", "user": "578b9978e4b0ebec4cfb754c"}, {"problem": 32, "code": "(fn [x] \n  (reverse \n   (reduce #(conj % %2 %2) '() x)))", "user": "57485efee4b009280f9f2b8a"}, {"problem": 32, "code": "(fn dbl [coll](mapcat #(repeat 2 %) coll))", "user": "57ee9ffbe4b0bfb2137f5bc2"}, {"problem": 32, "code": "(fn [x] (reduce #(conj %1 %2 %2) [] x))", "user": "57d0679ee4b0bd073c202359"}, {"problem": 32, "code": "#(interleave % %)", "user": "57ec8d1de4b0bfb2137f5b7f"}, {"problem": 32, "code": "mapcat #(list %1 %1)", "user": "57ed2574e4b0bfb2137f5b93"}, {"problem": 32, "code": "#(interleave % %)", "user": "57b39fbee4b0fbc9809a2783"}, {"problem": 32, "code": "#(interleave % %)", "user": "57596ba7e4b02ea11479931a"}, {"problem": 32, "code": "(fn[vct]\n  \t(loop [v vct new-v []]\n      (if (empty? v)\n        \tnew-v\n        \t(recur (rest v) (conj new-v (first v) (first v))))))", "user": "56483f45e4b0284900eef62b"}, {"problem": 32, "code": "#(interleave % %)", "user": "5254b45fe4b0541d1855b9a0"}, {"problem": 32, "code": "(fn\n  [s]\n  (reduce\n   (fn [p c] (conj p c c))\n   []\n   s\n   ))", "user": "57f55632e4b0903ccab3dcf1"}, {"problem": 32, "code": "(fn [input]\n  (loop [remaining input\n         ans []]\n    (if (empty? remaining)\n      ans\n      (let [el (first remaining)\n            remain (rest remaining)]\n        (recur remain (conj ans el el))))))", "user": "5746061ae4b009280f9f2b5b"}, {"problem": 32, "code": "#(seq (reduce (fn [acc item]                                                         \n                     (-> acc                                                              \n                         (conj item)                                                      \n                         (conj item)))                                                    \n                  [] %))", "user": "57f52d3be4b0903ccab3dce7"}, {"problem": 32, "code": "mapcat #(vector % %)", "user": "57db2369e4b0bd073c20241f"}, {"problem": 32, "code": "#(reduce (fn [seq x] (conj seq x x)) [] %)", "user": "57f6e666e4b0d3187e9008f2"}, {"problem": 32, "code": "(fn [coll]\n    (mapcat list coll coll)\n    )", "user": "500d3160e4b05f7c30cfa6a1"}, {"problem": 32, "code": "(fn [list]\n  (reverse\n   (reduce \n    (fn [acc curr] \n      (conj acc curr curr))\n    '() \n    list)))", "user": "565418cde4b0f9d632dd847c"}, {"problem": 32, "code": "#(->> %\n      (concat %)\n      (sort))", "user": "56a44067e4b0542e1f8d14da"}, {"problem": 32, "code": "(fn [s]\n  (seq \n\t  (reduce (fn [new-s x]\n    \t        (conj (conj new-s x) x))\n              []\n              s)))", "user": "57f7c74ee4b0d3187e900902"}, {"problem": 32, "code": "(fn [m] (mapcat #( list % %) m))", "user": "53194ba3e4b08068f379ed7a"}, {"problem": 32, "code": "(fn [xs]\n   (loop [[x & xx] xs s []]\n     (let [ss (conj (conj s x) x)]\n       (if (empty? xx)\n         ss\n         (recur xx ss)))))", "user": "57f85b36e4b0d3187e900924"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "566ca8d6e4b0a866af6896bf"}, {"problem": 32, "code": "(fn [s] (apply concat (map (fn [e] [e e]) s)))", "user": "57f80350e4b0d3187e90090c"}, {"problem": 32, "code": "#(loop [out [] in %] (if (empty? in) out (let [i (first in) ] (recur (into out [i i]) (rest in)))))", "user": "57f9e0bce4b0d3187e900956"}, {"problem": 32, "code": "(fn [lst] (mapcat #(vec [% %]) lst))", "user": "57b60e46e4b0fbc9809a27b6"}, {"problem": 32, "code": "#(reduce concat [] (map (fn [x] [x x]) %))", "user": "4e6a5728535d8ccf87e9fecf"}, {"problem": 32, "code": "(fn expand[lst]\n  (reduce concat (map repeat (repeat (count lst) 2 ) lst)))", "user": "57fc08d8e4b0d3187e900988"}, {"problem": 32, "code": "#(reverse (reduce (fn[x, y] (conj (conj x y) y)) '() %))", "user": "57ea79d9e4b0bfb2137f5b4f"}, {"problem": 32, "code": "#(for [x % y [x x]] y)", "user": "57ecc16fe4b0bfb2137f5b83"}, {"problem": 32, "code": "#(seq (reduce (fn [a x] (conj a x x)) [] %))", "user": "57efb389e4b0bfb2137f5bdb"}, {"problem": 32, "code": "#(interleave % %)", "user": "56e87a9ce4b04a395b9a03f0"}, {"problem": 32, "code": "(fn [lst] (mapcat #(list % %) lst))", "user": "57f81045e4b0d3187e90090f"}, {"problem": 32, "code": "(fn duplicate [lst]\n  (loop [lst lst\n         n (first lst)\n         nuevo ()]\n       (if (empty? lst)\n      \t(reverse nuevo)\n      \t(recur (rest lst)\n         \t   (first (rest lst))\n               (concat (list n) (list n) nuevo)))))", "user": "57f8151ce4b0d3187e900912"}, {"problem": 32, "code": "; Write a function which duplicates each element of a sequence.\n; test not run\n;\n; (= (__ [1 2 3]) '(1 1 2 2 3 3))\n; (= (__ [:a :a :b :b]) '(:a :a :a :a :b :b :b :b))\n; (= (__ [[1 2] [3 4]]) '([1 2] [1 2] [3 4] [3 4]))\n; (= (__ [[1 2] [3 4]]) '([1 2] [1 2] [3 4] [3 4]))\n\n#(loop [td %\n        res []]\n        (if (empty? td)\n          res\n          (recur (rest td) (->> (first td) (repeat) (take 2) (concat res)))))", "user": "57f253a3e4b0511f1d294dea"}, {"problem": 32, "code": "(fn dupp\n  [lst]\n  (mapcat #(concat (list %) (list %)) lst))", "user": "57fc34f0e4b0d3187e90098e"}, {"problem": 32, "code": "(fn duplicate-seq [lst]\n  (mapcat #(repeat 2 %) lst))", "user": "57f8153de4b0d3187e900916"}, {"problem": 32, "code": "#(mapcat (fn [s] [s s]) %)", "user": "57de5f0ee4b0bd073c202450"}, {"problem": 32, "code": "(fn [lst] (interleave lst lst))", "user": "57f8104ce4b0d3187e900910"}, {"problem": 32, "code": "(fn [list] (reduce (fn [a b] (conj a b b)) [] list))", "user": "57f3f2bee4b07bbd65c32b1a"}, {"problem": 32, "code": "(fn dup [lst]\n  (loop [a lst\n         b ()]\n    (if (empty? a)\n      (reverse b)\n      (recur (rest a)(conj b (first a)(first a))))))", "user": "57f814fbe4b0d3187e900911"}, {"problem": 32, "code": "(fn\n  [coll]\n  (seq (reduce\n        (fn\n          [coll item]\n          (conj coll item item))\n        [] coll)))", "user": "557c647ce4b05c286339e0c3"}, {"problem": 32, "code": "(fn p32 [xs]\n  (if (empty? xs)\n    nil\n    (concat (list (first xs) (first xs)) (p32 (rest xs)))))", "user": "57fe836ee4b0d3187e9009d2"}, {"problem": 32, "code": "(fn [coll] (interleave coll coll))", "user": "57f9011ee4b0d3187e900935"}, {"problem": 32, "code": "(fn [lst]\n   (loop [lst lst\n          aux ()]\n     (if (empty? lst)\n       (reverse aux)\n       (recur (rest lst) (conj aux (first lst) (first lst))))))", "user": "57f81524e4b0d3187e900913"}, {"problem": 32, "code": "(fn dup\n  [lst]\n  (if (empty? lst)\n    ()\n    (cons (first lst)\n          (cons (first lst)\n                (dup (rest lst))))))", "user": "57f81544e4b0d3187e900917"}, {"problem": 32, "code": "(fn [xs] (reduce (fn [acc, x] (conj (conj acc x) x)) [] xs))", "user": "57fdd1cfe4b0d3187e9009bf"}, {"problem": 32, "code": "(fn f [lst]\n\t((fn [res l]\n \t (if (empty? l)\n       (reverse res)\n       (recur (conj res (first l) (first l)) (rest l)))) '() lst))", "user": "57ee82b1e4b0bfb2137f5bbd"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "57fe2d6fe4b0d3187e9009c8"}, {"problem": 32, "code": "(fn [l] (mapcat list l l))", "user": "5800edaae4b0a837a8b30c48"}, {"problem": 32, "code": "reduce (fn [x y] (conj x y y)) []", "user": "57f28b22e4b0511f1d294def"}, {"problem": 32, "code": "(fn dup\n  [lst]\n  (mapcat #(repeat 2 %) lst))", "user": "57f81534e4b0d3187e900915"}, {"problem": 32, "code": "(fn dupseq [sq]\n  (reverse (reduce #(concat (list %2 %2) %1) [] sq)))", "user": "57aa053fe4b0b8559636fc61"}, {"problem": 32, "code": "(fn [x]\n  (reduce concat (map #(repeat 2 %) x)))", "user": "57f81549e4b0d3187e900918"}, {"problem": 32, "code": "(fn \n  [lst] \n  (interleave lst lst))", "user": "57f81532e4b0d3187e900914"}, {"problem": 32, "code": "(fn [x]\n  (mapcat #(repeat 2 %) x))", "user": "57fedf07e4b0d3187e9009dc"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "57fa7c93e4b0d3187e900963"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "58050034e4b0a837a8b30cb4"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "57c94c54e4b05aa3c4741d2c"}, {"problem": 32, "code": "(fn \n  [lst]\n  (mapcat #(repeat 2 % ) lst))", "user": "57f81569e4b0d3187e900919"}, {"problem": 32, "code": "#(interleave % %)", "user": "57fd7344e4b0d3187e9009b6"}, {"problem": 32, "code": "mapcat #(conj [] % %)", "user": "5801eed1e4b0a837a8b30c63"}, {"problem": 32, "code": "#(interleave % %)", "user": "580570a2e4b0a837a8b30cc7"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5804250fe4b0a837a8b30ca1"}, {"problem": 32, "code": "#(mapcat (fn [lst] (repeat 2 lst)) %)", "user": "580558cde4b0a837a8b30cc4"}, {"problem": 32, "code": "(fn duplicate-seq [coll]\n  (reduce #(conj %1 %2 %2) [] coll))", "user": "57ed19a3e4b0bfb2137f5b8e"}, {"problem": 32, "code": "#(interleave % %)", "user": "58047205e4b0a837a8b30ca9"}, {"problem": 32, "code": "(fn [x] (reduce concat (map (fn [elem] (list elem elem)) x)))", "user": "57b167afe4b0fbc9809a2752"}, {"problem": 32, "code": "#(reverse (reduce (fn [ans x] (cons x (cons x ans))) [] %))", "user": "57c815ade4b05aa3c4741d14"}, {"problem": 32, "code": "(fn [s]\n  ((fn r[x y]\n     (if (empty? x)\n       y\n       (r (rest x)\n          (conj \n           (conj y (first x))\n           (first x))))) s []))", "user": "53e06f81e4b0d874e779ae4c"}, {"problem": 32, "code": "#(mapcat (fn [x] (repeat 2 x)) %)", "user": "57f8ba80e4b0d3187e90092f"}, {"problem": 32, "code": "(fn [theSeq]\n  (reduce \n    (fn [results element] \n      (cons element (cons element results ) )\n    )\n    () (reverse theSeq)\n  )\n)", "user": "57f904c5e4b0d3187e900936"}, {"problem": 32, "code": "(fn zip [x] (interleave x x))", "user": "57073037e4b0b0fb43fd0689"}, {"problem": 32, "code": "; (defn re [in]\n;   (if (empty? in)\n;     '()\n;     (cons (first in) (cons (first in) (re (rest in))))))\n#(interleave % %)", "user": "57fa6f2ee4b0d3187e900962"}, {"problem": 32, "code": "(fn check [x & [y]]\n   (if (= (last x) nil)\n     (do y)\n     (do (check (butlast x) (conj (conj y (last x)) (last x)))))\n )", "user": "580014d7e4b0a837a8b30c32"}, {"problem": 32, "code": "(fn [s]\n  (interleave s s))", "user": "57fc0719e4b0d3187e900987"}, {"problem": 32, "code": "(fn dup\n    [args]\n    (loop [ result '()\n            data   args]\n      (if (empty? data)\n        (reverse result)\n        (let  [ head  (first  data)\n                tail  (rest   data)]\n            (recur  (cons head (cons head result))\n                    tail))))\n   )", "user": "55ee84c0e4b0121d4835fdf0"}, {"problem": 32, "code": "(fn [coll]\n   (loop [x coll\n          result []]\n     (if (empty? x)\n       result\n       (recur (rest x) (conj result (first x) (first x))))))", "user": "55b2505be4b0da326a65cf7d"}, {"problem": 32, "code": "#(interleave % %)", "user": "57f8cd5ae4b0d3187e900930"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "53aafb9be4b047364c044448"}, {"problem": 32, "code": "(fn dupl\n  [coll]\n  (reduce #(concat %1 (list %2 %2)) nil coll))", "user": "57b9fb56e4b0fbc9809a27fa"}, {"problem": 32, "code": "#(mapcat (partial repeat 2) %)", "user": "580bd81ee4b0849f6811b711"}, {"problem": 32, "code": "(fn [x]\n  (seq (reduce #(conj %1 %2 %2) [] x)))", "user": "54d893a4e4b0a52adc2e2039"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "57ef793de4b0bfb2137f5bd8"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "57ee432de4b0bfb2137f5bb2"}, {"problem": 32, "code": "#(mapcat identity (map vector %1 %1))", "user": "580c8fcee4b0849f6811b721"}, {"problem": 32, "code": "#(interleave % %)", "user": "5405885ee4b0addc1aec6668"}, {"problem": 32, "code": "mapcat #(repeat 2 %)\n;mapcat #(list % %)", "user": "57ee46c7e4b0bfb2137f5bb3"}, {"problem": 32, "code": "#(reduce (fn [acc i] (conj acc i i))\n          [] %)", "user": "5508a292e4b06e50f9beb10f"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "57ee41a6e4b0bfb2137f5baf"}, {"problem": 32, "code": "(fn [coll] (apply concat (map list coll coll)))", "user": "57eb38dbe4b0bfb2137f5b5e"}, {"problem": 32, "code": "(fn [x] (apply concat (map #(repeat 2 %) x)))", "user": "57ee2b3ee4b0bfb2137f5bac"}, {"problem": 32, "code": "#(interleave % %)", "user": "57ee41eae4b0bfb2137f5bb0"}, {"problem": 32, "code": "(fn [m] (mapcat (fn [x] (repeat 2 x)) m))", "user": "564a985be4b0284900eef65c"}, {"problem": 32, "code": ";#(mapcat list % %)\n;#(apply interleave (repeat 2 %))\n;;#(mapcat (partial repeat 2) %)\n#(interleave % %)", "user": "57ee42c4e4b0bfb2137f5bb1"}, {"problem": 32, "code": "(partial mapcat #(list % %))", "user": "57a4fa50e4b0a966079561f1"}, {"problem": 32, "code": ";;#(interleave % %)\nmapcat #(list % %)", "user": "580d7bdae4b0849f6811b73c"}, {"problem": 32, "code": "reduce #(conj (conj %1 %2) %2) []", "user": "57fbf995e4b0d3187e900981"}, {"problem": 32, "code": "(fn [coll] (mapcat #(repeat 2 %) coll))", "user": "580e2941e4b0849f6811b74e"}, {"problem": 32, "code": "(fn\n  ([sq]\n   (loop [lst sq acc []]\n     (if (empty? lst)\n       acc\n       (recur (rest lst) (into acc [(first lst) (first lst)]))))))", "user": "580fb8e0e4b0f478707a05bc"}, {"problem": 32, "code": "(fn [x] (apply concat (map #(take 2 (cycle [%])) x)))", "user": "57ef7393e4b0bfb2137f5bd6"}, {"problem": 32, "code": "#(interleave % %)", "user": "580fbaade4b0f478707a05c0"}, {"problem": 32, "code": "(fn [x] (reduce #(-> %1 (conj %2) (conj %2)) [] x))", "user": "5812eb8fe4b0f478707a0602"}, {"problem": 32, "code": "#(sort(take (* 2 (count %)) (cycle %)))", "user": "580d7e53e4b0849f6811b73e"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "58172161e4b0c0e9c07b8389"}, {"problem": 32, "code": "(fn [coll] (interleave coll coll))", "user": "57f3b841e4b0511f1d294e0f"}, {"problem": 32, "code": "(fn dupl [col]\n  (loop [c col\n         result []]\n    (prn c)\n    (prn result)\n    (if (empty? c)\n      result\n      (recur (rest c) (conj (conj result (first c))  (first c))\n             )\n      )\n    ))", "user": "57ffe094e4b0a837a8b30c2c"}, {"problem": 32, "code": "(fn [x] (apply concat (map #(repeat 2 %) x)))", "user": "4f0f7339535d0136e6c2233e"}, {"problem": 32, "code": "#(interleave % %)", "user": "580d7de3e4b0849f6811b73d"}, {"problem": 32, "code": "#(reduce (fn [memo, e] (conj memo e e)) [] %)", "user": "58136679e4b0f478707a060d"}, {"problem": 32, "code": "(fn [c] (sort (into c c)))", "user": "5800ab1ee4b0a837a8b30c41"}, {"problem": 32, "code": "#(interleave % %)", "user": "58186016e4b0c0e9c07b83ad"}, {"problem": 32, "code": "mapcat (fn [a] [a a])", "user": "5816ad6de4b0c0e9c07b8378"}, {"problem": 32, "code": "(fn [x] (sort (concat x x)))", "user": "580d2e83e4b0849f6811b733"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "58062dd2e4b0a837a8b30cda"}, {"problem": 32, "code": "#(interleave % %)", "user": "58134ba8e4b0f478707a060b"}, {"problem": 32, "code": "#(sort (reduce into (repeat 2 %)))", "user": "58173722e4b0c0e9c07b838a"}, {"problem": 32, "code": "(fn [lst] (interleave lst lst))", "user": "5813e208e4b0f478707a061b"}, {"problem": 32, "code": "(fn foo [c]\n (\n (fn bar [c accum]\n   (if-let [s (seq c)]\n     (let [x (first s)]\n       (recur (rest s) (concat accum [x x])))\n     accum))\n c []))", "user": "581a703de4b0e114eb51a005"}, {"problem": 32, "code": "(fn f1 [lst]\n  (reduce concat (map (fn [e] (repeat 2 e)) lst)))", "user": "5803ba6de4b0a837a8b30c95"}, {"problem": 32, "code": "(partial reduce (fn [r e] (conj r e e)) [])", "user": "57bc50c7e4b05aa3c4741c40"}, {"problem": 32, "code": "(fn [x]\n    ( reverse (reduce #(conj %1 %2 %2) '() x)))", "user": "581a5fdbe4b0e114eb51a002"}, {"problem": 32, "code": "(fn duplicate-a-seq [xs] (reduce (fn [acc x] (conj acc x x)) [] xs))", "user": "56255e2de4b00a550fc90297"}, {"problem": 32, "code": ";(fn duplicate [coll]\n;  (mapcat \n;    (fn [x] [x x])\n;    coll))\n\n#(interleave % %)", "user": "581b19e7e4b04b46fc4b0ec4"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "581e61b0e4b04b46fc4b0f28"}, {"problem": 32, "code": "mapcat #(vector % %)", "user": "563e1c0ee4b0da801c4e4665"}, {"problem": 32, "code": "(fn [x] (reduce #(concat %1 [%2 %2]) [] x))", "user": "5687b6abe4b0dcc4269f4061"}, {"problem": 32, "code": "#(interleave % %)", "user": "581e8b86e4b04b46fc4b0f2b"}, {"problem": 32, "code": "(fn duplicate [seq]\n  (reduce (fn conj2 [a b]  (conj(conj a b) b))\n          '() (reverse seq)))", "user": "5804d5afe4b0a837a8b30cad"}, {"problem": 32, "code": "(fn dup [in]\n  (apply concat (map #(repeat 2 %) in))\n  )", "user": "5820924ee4b04b46fc4b0f58"}, {"problem": 32, "code": "#(apply mapcat vector (repeat 2 %))", "user": "56193c6ee4b053970a773af2"}, {"problem": 32, "code": "(fn [list]\n  (loop [[h & t] list\n         accum []]\n    (let [new-accum (conj accum h h)]\n      (if (nil? t)\n          (into () (reverse new-accum))\n          (recur t new-accum)))))", "user": "58152157e4b0f478707a0631"}, {"problem": 32, "code": "#(mapcat list % %)", "user": "576d8699e4b0979f89651568"}, {"problem": 32, "code": "(fn\n  [s]\n  (loop [se s dup nil]\n    (if (empty? se)\n      (reverse dup)\n      (recur (rest se) (cons (first se) (cons (first se) dup))))))", "user": "581b4d3be4b04b46fc4b0ec6"}, {"problem": 32, "code": "(fn [lst]\n          (let [l (reverse lst)]\n            ((fn [l acc]\n               (if (empty? l)\n                 acc\n                 (recur (rest l) (cons (first l) (cons (first l) acc))))) l '()))\n          )", "user": "58088dfde4b0a837a8b30d07"}, {"problem": 32, "code": "#(mapcat (fn [x] [x x]) %)", "user": "5821b018e4b04b46fc4b0f80"}, {"problem": 32, "code": "reduce\n    #(conj %1 %2 %2)\n    []", "user": "57ae3345e4b0fbc9809a271e"}, {"problem": 32, "code": "(fn duplicate [coll]\n\t(interleave coll coll)\n)", "user": "525d44bfe4b0cb4875a45d6d"}, {"problem": 32, "code": "#(apply concat (for [x %] (list x x)))", "user": "58225587e4b04b46fc4b0f94"}, {"problem": 32, "code": "#(sort (concat % (into '() %)))", "user": "581829cce4b0c0e9c07b83a9"}, {"problem": 32, "code": "#(interleave % %)", "user": "57465429e4b009280f9f2b60"}, {"problem": 32, "code": "#(interleave % %)", "user": "581e76dfe4b04b46fc4b0f29"}, {"problem": 32, "code": "(fn [coll]\n  (apply concat (map #(repeat 2 %) coll)))", "user": "58217fbde4b04b46fc4b0f78"}, {"problem": 32, "code": "(fn duplicate [x]\n  (reduce concat (map #(take 2 (repeat %)) x)))", "user": "58171a9ae4b0c0e9c07b8387"}, {"problem": 32, "code": "#(interleave % %)", "user": "58247423e4b051871117bec5"}, {"problem": 32, "code": "(fn [xs] (mapcat (fn [x y] [x y]) xs xs))", "user": "5823c717e4b051871117beb2"}, {"problem": 32, "code": "#(seq (reduce (fn [acc item]                                                         \n                     (-> acc                                                              \n                         (conj item)                                                      \n                         (conj item)))                                                    \n                  [] %))", "user": "524dacc9e4b0a16e35cf6df8"}, {"problem": 32, "code": "#(interleave % %)", "user": "5820cca0e4b04b46fc4b0f62"}, {"problem": 32, "code": "mapcat #(take 2 (repeat %))", "user": "5818908be4b0c0e9c07b83bb"}, {"problem": 32, "code": "(fn [xs] (mapcat #(cons % (list %)) xs))", "user": "578df8fee4b0ebec4cfb7574"}, {"problem": 32, "code": "(fn [col] (interleave col col))", "user": "57e41d99e4b0bfb2137f5ab5"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "582089fbe4b04b46fc4b0f57"}, {"problem": 32, "code": "#(apply concat (for [x %] (list x x)))", "user": "581badbde4b04b46fc4b0ed9"}, {"problem": 32, "code": "(fn [x] (sequence (reduce (fn [ys y] (conj ys y y)) [] x)))", "user": "582835cbe4b051871117bf30"}, {"problem": 32, "code": "#(interleave % %)", "user": "58224c53e4b04b46fc4b0f92"}, {"problem": 32, "code": "#(interleave % %)", "user": "581dad0ae4b04b46fc4b0f17"}, {"problem": 32, "code": "reduce \n  (fn [a b] \n    (conj a b b))\n  []", "user": "57fbd83ee4b0d3187e90097b"}, {"problem": 32, "code": "#(reverse (reduce (fn [v t](conj v t t)) '() %))", "user": "552f6e8ee4b076ab5578f802"}, {"problem": 32, "code": "(fn doubles[lst] ( if (empty? lst) '() \n                  \n                     (cons (first lst) (cons (first lst)(doubles (rest lst))))))", "user": "55a21f1ce4b0acc240e3151f"}, {"problem": 32, "code": "(fn [xs]\n  (mapcat #(list % %) xs))", "user": "54ca35c6e4b057c6fda3a254"}, {"problem": 32, "code": "#(mapcat  (fn [x] [x x]) %)", "user": "507ff90fe4b089ade05efbd9"}, {"problem": 32, "code": "(fn [coll]\n  (mapcat #(list % %) coll))", "user": "5808ee16e4b0a837a8b30d16"}, {"problem": 32, "code": "(fn [c]\n  (reduce\n   (fn [a b]\n     (concat a (list b) (list b))) () c))", "user": "5829bc55e4b051871117bf49"}, {"problem": 32, "code": "#(sort(take (* 2 (count %)) (cycle %)))\n;(take (* 2 (count %))    cycle", "user": "5822e082e4b04b46fc4b0fa9"}, {"problem": 32, "code": "reduce (fn [coll x] (concat coll (repeat 2 x))) '()", "user": "582290b5e4b04b46fc4b0fa0"}, {"problem": 32, "code": "(partial reduce #(conj % %2 %2) [])", "user": "582e0afde4b051871117bfd5"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []\n\n;#(mapcat (fn [a] (list a a)) %)\n\n;#(interleave % %)\n\n;#(sort (concat % %))\n\n;(fn [v] (reduce #(conj %1 %2 %2) [] v))", "user": "58299e03e4b051871117bf46"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "58248186e4b051871117bec6"}, {"problem": 32, "code": "#(sort (into % %))", "user": "582c526ae4b051871117bf88"}, {"problem": 32, "code": "(fn [coll] (reduce \n            (fn [acc e] (conj acc e e))\n            (empty coll) \n            coll))", "user": "5665ef78e4b0e91d5f5c5664"}, {"problem": 32, "code": "#(mapcat (fn [x] [x x]) %)", "user": "4f5d5d59e4b0030a34fb2b39"}, {"problem": 32, "code": "(fn [s]\n(reduce (fn [acc item]\n          (conj acc item item))\n         []\n        s))", "user": "5829d588e4b051871117bf4a"}, {"problem": 32, "code": "(fn [coll]\n  (interleave coll coll))", "user": "57089f82e4b0b0fb43fd06a2"}, {"problem": 32, "code": "#(mapcat identity (for [x %] [x x]))", "user": "58303fc3e4b051871117c006"}, {"problem": 32, "code": "(fn [xs] (mapcat #(repeat 2 %1) xs))", "user": "58327a08e4b089d5ab817c7c"}, {"problem": 32, "code": "(fn [s] (reduce #(conj %1 %2 %2) [] s))", "user": "5779556de4b0979f8965166e"}, {"problem": 32, "code": "#(seq (reduce (fn [x y] (-> x (conj y) (conj y))) [] %))", "user": "582589b2e4b051871117bedd"}, {"problem": 32, "code": "#(interleave % %)", "user": "581fe550e4b04b46fc4b0f4c"}, {"problem": 32, "code": "(fn [s] ( seq (reduce (fn [acc, n] (conj acc n n )) [] s)))", "user": "582dc562e4b051871117bfcb"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5649d538e4b0284900eef647"}, {"problem": 32, "code": "(fn [as] (\n          reduce (fn [xs y] (conj (conj xs y) y)) nil (reverse as)\n          ))", "user": "58334d18e4b089d5ab817c97"}, {"problem": 32, "code": "#(reduce (fn [a c] (into a (list c c))) [] %)", "user": "5810b899e4b0f478707a05d8"}, {"problem": 32, "code": "(fn [x] (reduce into [] (map #(list % %) x)))", "user": "583166c1e4b051871117c025"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "55c66ffee4b0e31453f649c2"}, {"problem": 32, "code": "#(mapcat (fn [s] (repeat 2 s)) %)", "user": "582a5174e4b051871117bf59"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "56e1122fe4b03a7c14b85a20"}, {"problem": 32, "code": "(fn dd [z] (apply concat\n     (for [x z] [x x] )\n  ))", "user": "58335c22e4b089d5ab817c9a"}, {"problem": 32, "code": "mapcat (fn [x] [x x])", "user": "54aa373de4b09f271ff37cb6"}, {"problem": 32, "code": "(fn [s]\n  (reduce\n   (fn [s v]\n     (conj s v v))\n   [] s))", "user": "58333b19e4b089d5ab817c94"}, {"problem": 32, "code": "(comp (partial reduce #(conj %1 %2 %2) '()) reverse)", "user": "5835bc73e4b089d5ab817ce9"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "58375635e4b089d5ab817d14"}, {"problem": 32, "code": "(fn [coll]\n  (reduce (fn [prev nxt]\n            (conj (conj prev nxt) nxt))\n          []\n          coll))", "user": "5835cb06e4b089d5ab817cea"}, {"problem": 32, "code": "(fn [ar] (apply concat (for [i ar] [i i])))", "user": "55e6809ee4b050e68259b48a"}, {"problem": 32, "code": "(fn dupseq [x]\n  (loop [coll x\n         result '()]\n    (if (empty? coll)\n      (reverse result)\n      (recur (rest coll) (conj result (first coll) (first coll))))))", "user": "55a12cb1e4b0acc240e3150d"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "58384bc4e4b089d5ab817d27"}, {"problem": 32, "code": "#(interleave % %)", "user": "5838337de4b089d5ab817d24"}, {"problem": 32, "code": "(fn my-dup [sq] \n  (if (empty? sq)\n    '()\n    (cons (first sq) (cons (first sq) (my-dup (rest sq)) ) )\n    )\n  )", "user": "580f9585e4b0f478707a05b5"}, {"problem": 32, "code": "(fn [x] \n  (loop [x x z []]\n    (if (empty? x) z\n      (recur (rest x) (conj z (first x) (first x))))))", "user": "5839f079e4b089d5ab817d48"}, {"problem": 32, "code": "(fn dup [xs & {:keys [dub] :or {dub '()}}] (if (empty? xs) dub (dup (pop xs) :dub (cons (peek xs) (cons (peek xs) dub)))))", "user": "583a360de4b089d5ab817d4f"}, {"problem": 32, "code": "reduce (fn [coll x] (concat coll (repeat 2 x))) '()", "user": "5822ccd0e4b04b46fc4b0fa7"}, {"problem": 32, "code": "reduce(fn [coll x] (concat coll (repeat 2 x))) '()", "user": "582a6a85e4b051871117bf5d"}, {"problem": 32, "code": "#(interleave % %)", "user": "58391c94e4b089d5ab817d35"}, {"problem": 32, "code": "(fn [coll]\n  (reduce #(conj %1 %2 %2) [] coll)\n  \n  )", "user": "583667c7e4b089d5ab817cfb"}, {"problem": 32, "code": "(fn [x] (sort (concat x x)))", "user": "5835a222e4b089d5ab817ce5"}, {"problem": 32, "code": "(fn [lat]\n  (reduce concat (map #(take 2 (repeat %)) lat)))", "user": "580d1da7e4b0849f6811b72f"}, {"problem": 32, "code": "#(mapcat (fn [n] `(~n ~n)) %)", "user": "57235dc4e4b0c5bde472c0e2"}, {"problem": 32, "code": "mapcat #(conj [%] %)", "user": "582cbf48e4b051871117bfa6"}, {"problem": 32, "code": "#(interleave % %)", "user": "583e27e2e4b089d5ab817daa"}, {"problem": 32, "code": "(fn [x] (reduce #(concat % (repeat 2 %2)) [] x))", "user": "5787ce76e4b0ebec4cfb750e"}, {"problem": 32, "code": "(fn dup [xs] \n  (if (empty? xs) \n     nil\n    (conj \n      (conj (dup (rest xs))              \n        (first xs)) \n      (first xs))\n ))", "user": "57ed8315e4b0bfb2137f5b9a"}, {"problem": 32, "code": "(fn dup [coll] (reduce concat(map #(take 2 (repeat %)) coll)))", "user": "583f2e4de4b089d5ab817dcb"}, {"problem": 32, "code": "#(apply concat (map (juxt identity identity) %))", "user": "583c8bd4e4b089d5ab817d81"}, {"problem": 32, "code": "(fn [coll] (interleave coll coll))", "user": "53bd476ae4b0d9a98559a6ca"}, {"problem": 32, "code": "(fn [x] (mapcat #(repeat 2 %) x))", "user": "57ffacd9e4b0a837a8b30c26"}, {"problem": 32, "code": "(fn [x] (sort(take (* 2 (count x)) (cycle x))))", "user": "583d669ee4b089d5ab817d9a"}, {"problem": 32, "code": "#(reduce \n  (fn [col el] (conj col el el))\n  [] \n  %)", "user": "5843b231e4b089d5ab817e3d"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "583e1558e4b089d5ab817da9"}, {"problem": 32, "code": "#(apply concat (map (fn [x] [x x]) %))", "user": "582d7569e4b051871117bfbe"}, {"problem": 32, "code": "(fn [items] (reduce #(conj %1 %2 %2) [] items))", "user": "57e9a77ae4b0bfb2137f5b35"}, {"problem": 32, "code": "(fn [x] (into [] (sort (reduce conj x x))))", "user": "546be022e4b00cfc9eacc171"}, {"problem": 32, "code": "(fn [mlist] (reduce (fn [coll vall] (conj (conj coll vall) vall)) [] mlist) )", "user": "5804b491e4b0a837a8b30cac"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "5842d06be4b089d5ab817e22"}, {"problem": 32, "code": "#(apply interleave (repeat 2 %))\n\n;golf:\n;#(interleave % %)", "user": "54d341f7e4b0e8a36923e603"}, {"problem": 32, "code": "(fn [xs] (apply concat (map #(list % %) xs)))", "user": "584917a1e4b089d5ab817ec9"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "58452da0e4b089d5ab817e5e"}, {"problem": 32, "code": "#(interleave % %)", "user": "57dafe97e4b0bd073c20241c"}, {"problem": 32, "code": "#(loop [y % z []]\n\t(if (empty? y)\n      z\n      (recur (rest y) (conj z (first y) (first y)))))", "user": "583f23dce4b089d5ab817dc9"}, {"problem": 32, "code": "(fn [coll]\n  (apply concat (map #(take 2 (repeat %)) coll)))", "user": "563f4c47e4b08d4f616f5ed2"}, {"problem": 32, "code": "(fn\n  [l]\n  (apply concat (map vector l l)))", "user": "55a5e2f7e4b0acc240e31550"}, {"problem": 32, "code": "(fn inter[s](when (seq s) (concat [(first s) (first s)] (inter (rest s)))))", "user": "5849ac5fe4b089d5ab817ed7"}, {"problem": 32, "code": "#(interleave % %)", "user": "584dadebe4b0b7285a6f4e44"}, {"problem": 32, "code": "(fn [x]\n  (reduce concat (map #(list % %) x)))", "user": "5845720de4b089d5ab817e68"}, {"problem": 32, "code": "#(reduce (fn [res,item] (conj res item item)) [] %)", "user": "583c4482e4b089d5ab817d7e"}, {"problem": 32, "code": "#(interleave % %)", "user": "583ff3afe4b089d5ab817dda"}, {"problem": 32, "code": "(fn [arr]\n  (loop [a arr acc []]\n    (if (empty? a)\n      acc\n      (recur (rest a) (conj acc (first a) (first a))))))", "user": "58408643e4b089d5ab817deb"}, {"problem": 32, "code": "(fn [x] (mapcat #(repeat 2 %) x))", "user": "585030cbe4b0b7285a6f4e78"}, {"problem": 32, "code": "mapcat #(list %1 %1)", "user": "583dacc2e4b089d5ab817d9f"}, {"problem": 32, "code": "(fn [x] (mapcat identity (map #(repeat 2 %) x)))", "user": "56719c3ce4b05957ce8c610c"}, {"problem": 32, "code": "(fn [l] (reduce (fn [a b] (concat a [b b])) [] l))", "user": "5526ecc4e4b0ffed3738f928"}, {"problem": 32, "code": "#(mapcat identity (map (fn[item](repeat 2 item)) %))", "user": "5832be57e4b089d5ab817c86"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "50b25edae4b03ea88043355e"}, {"problem": 32, "code": "(fn [x] (reverse (reduce #(into % (repeat 2 %2)) '() x)) )", "user": "58524875e4b0b7285a6f4ead"}, {"problem": 32, "code": "#(interleave % %)\n;(fn [xs]\n;  (reduce concat\n;          '()\n;          (map #(repeat 2 %) xs)))", "user": "57233cc8e4b0c5bde472c0e1"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5854d1c0e4b07779d468640a"}, {"problem": 32, "code": "(fn [col] (mapcat identity (map #(repeat 2 %) col)))", "user": "5766fbb7e4b0a07e8fc180b6"}, {"problem": 32, "code": "(fn [x] (mapcat #(repeat 2 %) x))", "user": "5695b86de4b0dcc4269f412b"}, {"problem": 32, "code": "reduce #(conj % %2 %2) []", "user": "56b1b59be4b0982f16b37df2"}, {"problem": 32, "code": "(fn [sx]\n  (loop [sx sx v []]\n    (if (empty? sx)\n      (seq v)\n      (recur (rest sx) (conj v (first sx) (first sx))))))", "user": "584278e1e4b089d5ab817e19"}, {"problem": 32, "code": "(fn [a] \n    (reduce \n      #(conj %1 %2 %2) \n      [] \n      a))", "user": "58455b05e4b089d5ab817e65"}, {"problem": 32, "code": "(fn [arr]\n  (loop [h (first arr) t (rest arr) res '()]\n    (if (nil? h)\n      (reverse res)\n      (recur (first t) (rest t) (cons h (cons h res))))))", "user": "58354124e4b089d5ab817cd6"}, {"problem": 32, "code": "#(interleave  % %)", "user": "57f9b25fe4b0d3187e90094b"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "56f9b953e4b07572ad1a88b9"}, {"problem": 32, "code": "(fn [coll]\n  (loop [tail coll\n         dups []\n         i 0]\n    (if (empty? tail)\n      dups\n      (if (< i 2)\n        (recur tail\n               (conj dups (first tail))\n               (inc i))\n        (recur (rest tail)\n               dups\n               0))\n      )\n    )\n  )", "user": "58562083e4b0f14aab7c86eb"}, {"problem": 32, "code": "(fn \n   [in]\n   (reduce \n     (fn \n       [acc, x]\n       (reduce conj acc \n               (repeat 2 x))) \n     [] \n     in\n     ))", "user": "5856cdd6e4b0f14aab7c86fa"}, {"problem": 32, "code": "#(interleave % %)", "user": "584f5133e4b0b7285a6f4e61"}, {"problem": 32, "code": "#(interleave % %)", "user": "585481e0e4b07779d46863fe"}, {"problem": 32, "code": "(fn [s] (apply concat (map #(vector % %) s)))", "user": "585c5b21e4b0f14aab7c8786"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "585d2c1fe4b0f14aab7c8797"}, {"problem": 32, "code": "#(apply concat (map (fn [x] [x x]) %))", "user": "585e2e77e4b0f14aab7c87ac"}, {"problem": 32, "code": "#(apply concat (map (fn [x] (list x x)) %))", "user": "58566b42e4b0f14aab7c86f4"}, {"problem": 32, "code": "#(interleave % %)", "user": "57d0e185e4b0bd073c202360"}, {"problem": 32, "code": "reduce (fn [a b] (conj a b b)) []", "user": "585bcd51e4b0f14aab7c8771"}, {"problem": 32, "code": "reduce #(conj (conj %1 %2) %2) []", "user": "585d40afe4b0f14aab7c8798"}, {"problem": 32, "code": "(fn [xs]\n  (reverse (reduce (fn [col x] \n                     (-> col\n                         (conj x)\n                         (conj x))) \n                   '() \n                   xs)))", "user": "55507a1ae4b00713264bd9a7"}, {"problem": 32, "code": "(fn duplicate-seq [input]\n  (->> input\n       (map #(list %, %))\n       (reduce concat)))", "user": "57ea4569e4b0bfb2137f5b46"}, {"problem": 32, "code": "(fn [x] (mapcat #(repeat 2 %) x))", "user": "57c33eeae4b05aa3c4741cbc"}, {"problem": 32, "code": "#(mapcat (fn [nn] (list nn nn)) %)", "user": "5853582fe4b0b7285a6f4ec5"}, {"problem": 32, "code": "(fn [s] (mapcat #(list % %) s))", "user": "582a2d4fe4b051871117bf55"}, {"problem": 32, "code": "#(apply concat (map (fn[x] (conj [] x x)) %))", "user": "55357ab5e4b09218d5f44faf"}, {"problem": 32, "code": "mapcat (fn [x] (list x x))", "user": "58522b00e4b0b7285a6f4eac"}, {"problem": 32, "code": "(fn duplicate [x]\n  (mapcat #(repeat 2 %) x))", "user": "5852801ee4b0b7285a6f4eb1"}, {"problem": 32, "code": "(fn [sequence]\n  ((fn inner [result rest1]\n     (if (not (empty? rest1))\n       (inner (conj result (first rest1) (first rest1))\n              (rest rest1))\n       (reverse result)))\n   '() sequence))", "user": "58637f03e4b0f14aab7c881e"}, {"problem": 32, "code": "(fn\n  [s]\n  (reduce (fn [acc x]\n            (into acc (repeat 2 x)))\n          []\n          s))", "user": "58543a59e4b07779d46863f5"}, {"problem": 32, "code": "(fn duplicate [coll]\n  (loop [res [] c coll]\n    (if (empty? c)\n      (lazy-seq res)\n      (recur (conj res (first c) (first c)) (rest c))\n    )\n  )\n)", "user": "569e3175e4b0542e1f8d1484"}, {"problem": 32, "code": "(fn dupSeq [[x & xs]]\n  (if x\n    (cons x (cons x (dupSeq xs)))))", "user": "585e7c60e4b0f14aab7c87b3"}, {"problem": 32, "code": "#(interleave % %)", "user": "51456858e4b0e88796073408"}, {"problem": 32, "code": "(fn duplicate-sequence\n  [coll]\n  (->> (map (fn [x] [x x]) coll)\n       (apply concat '())))", "user": "547bf82de4b0c51c1f4d72e1"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "586615e6e4b0f14aab7c8858"}, {"problem": 32, "code": "(fn [x] (reduce concat (map #(do [% %]) x)))", "user": "5866b999e4b0f14aab7c886b"}, {"problem": 32, "code": "#(reduce concat (map (fn [s] (take 2 (repeat s))) %))", "user": "58617a1fe4b0f14aab7c87f0"}, {"problem": 32, "code": "(fn [sq]\n  (reduce (fn [s elem] (concat s (repeat 2 elem))) [] sq))", "user": "58681bf0e4b0f14aab7c888a"}, {"problem": 32, "code": "mapcat #(seq [% %])", "user": "5863eda2e4b0f14aab7c8836"}, {"problem": 32, "code": "(fn[inp] (reduce concat (map #(take 2 (repeat %)) inp)))", "user": "57a6f585e4b0a9660795620e"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "57c5d01ce4b05aa3c4741cea"}, {"problem": 32, "code": "(fn [s]\n    (reduce #(concat %1 [%2 %2]) [] s))", "user": "586b6753e4b01531a375e956"}, {"problem": 32, "code": "#(interleave % %)", "user": "586b6f13e4b01531a375e959"}, {"problem": 32, "code": "#(interleave % %)", "user": "4e7be091535db169f9c796ba"}, {"problem": 32, "code": "(fn duplicate [target] \n   (if (empty? target) '() (conj (duplicate (rest target)) (first target) (first target))))", "user": "586a663ce4b0f14aab7c88be"}, {"problem": 32, "code": "(fn [x]\n  (interleave x x))", "user": "5840c068e4b089d5ab817df8"}, {"problem": 32, "code": "(fn\n      [seq]\n      (loop [s seq r '()]\n        (cond\n          (empty? s) (reverse r) \n          :else (recur (rest s) (conj r (first s) (first s)))\n          )\n        )\n      )", "user": "52ade380e4b0c58976d9ac9b"}, {"problem": 32, "code": "#(interleave % %)", "user": "54012b48e4b0de5c41848620"}, {"problem": 32, "code": "(fn [coll] (interleave coll coll))", "user": "52dc7344e4b09f7907dd13cf"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "5857d27de4b0f14aab7c8710"}, {"problem": 32, "code": "(fn [coll] (reduce concat (map #(vector % %) coll)))", "user": "586bc870e4b01531a375e964"}, {"problem": 32, "code": "mapcat #(vector % %)", "user": "4e11b92a535d04ed9115e7cb"}, {"problem": 32, "code": "mapcat (fn [x] [x x])", "user": "586d4d63e4b01531a375e98e"}, {"problem": 32, "code": "(fn [col] (reduce #(concat %1 [%2 %2]) [] col))", "user": "586c6462e4b01531a375e97b"}, {"problem": 32, "code": "(fn duplicate-sequence [original]\n  (loop [current original results []]\n    (if (empty? current)\n      results\n      (recur (rest current) (conj results (first current) (first current)))\n      )))", "user": "585ad75be4b0f14aab7c8756"}, {"problem": 32, "code": "(fn dupl [lst]\n  (if (empty? lst)\n    nil\n    (concat (repeat 2 (first lst)) (dupl (rest lst)))))", "user": "586c5a34e4b01531a375e97a"}, {"problem": 32, "code": "#(interleave % %)", "user": "586b6a0ae4b01531a375e957"}, {"problem": 32, "code": "(fn duplicate-sequence\n  [coll]\n  (let [result []]\n    (seq (reduce #(into %1 ((fn [x] [x x]) %2)) result coll))))", "user": "57d174ede4b0bd073c20236c"}, {"problem": 32, "code": "(fn [l] (->> l (mapcat #(list % %))))", "user": "584d8724e4b0b7285a6f4e3e"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "52658b67e4b03e8d9a4a710d"}, {"problem": 32, "code": "(fn duplicate [l]\n  (let [la (= 1 (count l))\n        v (first l)]\n    (if la (list v v) (conj (duplicate (rest l)) v v))))", "user": "586e47dee4b01531a375e9a9"}, {"problem": 32, "code": "(fn [c] (apply concat (map #(list % %) c)))", "user": "586b6d51e4b01531a375e958"}, {"problem": 32, "code": "reduce (fn[acc, next] `(~@acc ~next ~next)) []", "user": "54a841b8e4b09f271ff37ca1"}, {"problem": 32, "code": "(fn [xs](mapcat list xs xs))", "user": "55597b84e4b0deb715856e36"}, {"problem": 32, "code": "#(interleave % %)", "user": "586f1aa7e4b01531a375e9ba"}, {"problem": 32, "code": "#(loop [x %\n         res []]\n   (if (empty? x)\n     res\n     (recur (rest x) (conj res (first x) (first x)))))", "user": "586b1482e4b0f14aab7c88cf"}, {"problem": 32, "code": "(fn [l] (apply concat  (map #(do [% %]) l)))", "user": "58731176e4b01531a375ea2a"}, {"problem": 32, "code": "(fn f [s] (if (empty? s) s (let [fs (first s) rs (rest s)] (cons fs (cons fs (f rs))))))", "user": "54d95ce8e4b024c67c0cf74a"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5872935ce4b01531a375ea1d"}, {"problem": 32, "code": "(fn [xs]\n  (let [iterate (fn iterate [acc ys]\n                  (if (empty? ys)\n                    (reverse acc)\n                    (let [x (first ys)]\n                      (recur (cons x (cons x acc)) (rest ys)))))]\n    (iterate (list) xs)))", "user": "587100d6e4b01531a375e9f0"}, {"problem": 32, "code": "(fn [coll] (reduce #(conj %1 %2 %2) [] coll))", "user": "56403765e4b08d4f616f5edc"}, {"problem": 32, "code": "(fn [c] (apply concat (map #(list %1 %1) c)))", "user": "587294f0e4b01531a375ea1e"}, {"problem": 32, "code": "#(interleave % %)", "user": "56049986e4b0c80df0ca2662"}, {"problem": 32, "code": "#(reduce (fn [accum item]\n           (concat accum (repeat 2 item)))\n         []\n         %)", "user": "58740c18e4b01531a375ea49"}, {"problem": 32, "code": "#(mapcat (partial repeat 2) %)", "user": "58716570e4b01531a375e9fe"}, {"problem": 32, "code": "reduce (fn [x y] (conj x y y)) []", "user": "5727031ee4b0c5bde472c12f"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "5876c0c5e4b01531a375ea8e"}, {"problem": 32, "code": "reduce #(conj (conj %1 %2) %2) []", "user": "58467633e4b089d5ab817e90"}, {"problem": 32, "code": "mapcat #(conj [] % %)", "user": "534fa1a8e4b084c2834f4ace"}, {"problem": 32, "code": "(fn [x]\n  (seq\n  \t(reduce\n     (fn [r i]\n       (conj r i i))\n     [] x)))", "user": "5873dd1ce4b01531a375ea42"}, {"problem": 32, "code": "(fn [x]\n  (loop [coll x\n         acc []]    \n   (if (empty? coll)\n     acc\n     (recur (rest coll) (conj acc (first coll) (first coll)))\n   )\n  )\n)", "user": "5877e40ee4b01531a375eaab"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "572fdecae4b0cd1946bd0f9e"}, {"problem": 32, "code": "#(mapcat (partial repeat 2) %)", "user": "5879d577e4b01531a375ead8"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "563c7f98e4b0bfe05bf11836"}, {"problem": 32, "code": "mapcat (fn [a] [a a])", "user": "560d24a2e4b05f002753df34"}, {"problem": 32, "code": "#(interleave % %)", "user": "54a35517e4b09f271ff37c68"}, {"problem": 32, "code": "#(for [x % y (range 2)] x)", "user": "5821160de4b04b46fc4b0f6c"}, {"problem": 32, "code": "reduce #(concat % (list %2 %2)) ()", "user": "5865c8f0e4b0f14aab7c884e"}, {"problem": 32, "code": "#(interleave % %)", "user": "52506e4ce4b0541d1855b82d"}, {"problem": 32, "code": "(fn [a]\n  (reduce (fn [x y]\n            (concat x (list y y)))\n          '()\n          a)\n  )", "user": "58775496e4b01531a375ea9a"}, {"problem": 32, "code": "(fn duplicate [a-seq]\n  (let [duplicateer (fn [t-seq] (split-with #(= (first t-seq) %) t-seq))\n        [x y] (duplicateer a-seq)\n        dup (fn [ls] (apply concat (repeat 2 ls)))]\n    (if (empty? a-seq) '() (concat (dup x) (duplicate y)))))", "user": "5877a553e4b01531a375eaa5"}, {"problem": 32, "code": "reduce #(conj (conj %1 %2) %2) []", "user": "5875f2c5e4b01531a375ea77"}, {"problem": 32, "code": "#(apply concat (map (fn [x] (list x x)) %))", "user": "50385746e4b0803468ea2c6d"}, {"problem": 32, "code": "#(interleave % %)", "user": "5878fb4ee4b01531a375eac1"}, {"problem": 32, "code": "(fn [xs]\n    (reduce #(concat %1 [%2 %2]) [] xs))", "user": "4ff9ea75e4b0678c553fc3b3"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "5871175de4b01531a375e9f7"}, {"problem": 32, "code": "(fn d[s] (mapcat  #(if (sequential? %) % [%]) (map (fn [x] (list x x)) s)))", "user": "58622733e4b0f14aab7c8803"}, {"problem": 32, "code": "(partial mapcat (fn [x] [x x]))", "user": "580b216fe4b0a837a8b30d45"}, {"problem": 32, "code": "#(apply concat (map (fn [x] [x x]) %))", "user": "587f8393e4b0f1effa3b75f2"}, {"problem": 32, "code": "#(reduce (fn [acc x] (conj acc x x)) [] %)", "user": "587ef226e4b052da650a6354"}, {"problem": 32, "code": "(fn [x]\n  (apply concat (map list x x)))", "user": "57ea2c91e4b0bfb2137f5b42"}, {"problem": 32, "code": "#(apply concat (map (partial repeat 2) %))", "user": "58800fd4e4b0f1effa3b7606"}, {"problem": 32, "code": "#(interleave % %)", "user": "56eff7c1e4b04a395b9a0468"}, {"problem": 32, "code": "(fn [xs]\n  (apply list  (reduce (fn [r x] (conj r x x))\n                 []\n                 xs)))", "user": "53b42472e4b047364c0444b2"}, {"problem": 32, "code": "mapcat (partial repeat 2)", "user": "5880e38fe4b0f1effa3b7625"}, {"problem": 32, "code": "(fn [s] (reduce #(conj %1 %2 %2) [] s))", "user": "587ee260e4b052da650a6353"}, {"problem": 32, "code": "(fn duplicate-sequence\n  [s]\n  (apply concat [] (map #(identity [% %]) s)))", "user": "5673881fe4b05957ce8c6120"}, {"problem": 32, "code": "(fn [x]\n  (loop [acc '()\n         [head & tail :as coll] x]\n    (cond\n      (empty? coll) (reverse acc)\n      (not= nil head) (recur (conj acc head head) tail)\n      )))", "user": "5881335ce4b0f1effa3b762e"}, {"problem": 32, "code": "#(reduce (fn [ret curr]\n           (conj ret curr curr)) [] %)", "user": "5883584ae4b0f1effa3b7674"}, {"problem": 32, "code": "(fn [a] (reduce concat (map #(repeat 2 %) a)))", "user": "4dbd7107535d020aff1edf42"}, {"problem": 32, "code": "reduce #(concat %1 [%2 %2]) []", "user": "58844d43e4b0f1effa3b7696"}, {"problem": 32, "code": "(fn rep [s]  (reduce concat (map #(repeat 2 %) s)))", "user": "58840023e4b0f1effa3b768b"}, {"problem": 32, "code": "(fn [x]\n  (reverse (reduce (fn [c x] (into c [x x])) '() x)))", "user": "58852909e4b0f1effa3b76af"}, {"problem": 32, "code": "#(loop [rlist % alist '()]\n  (if (empty? rlist)\n    (reverse alist)\n    (recur (rest rlist) (conj alist (first rlist) (first rlist)))\n   )\n  )", "user": "5885e90de4b0f1effa3b76c5"}, {"problem": 32, "code": "(fn d [s] (if (nil? s) () (conj (d (next s)) (first s) (first s))))", "user": "587c59d1e4b01531a375eb17"}, {"problem": 32, "code": "(fn seq-double [sequence]\n    (loop [sequence sequence, res []]\n         (if-not (empty? sequence)\n              (recur (rest sequence) (conj res (first sequence) (first sequence)))\n               res)))", "user": "587bead1e4b01531a375eb0d"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5882ac4ee4b0f1effa3b7661"}, {"problem": 32, "code": "#(reduce concat (map vector % %))", "user": "5884e807e4b0f1effa3b76a6"}, {"problem": 32, "code": "(fn [x] (reduce #(conj %1 %2 %2) [] x))", "user": "5880d686e4b0f1effa3b7623"}, {"problem": 32, "code": "(fn [coll]\n  (loop [[head & remain] coll acc '()]\n         (if head\n         \t(recur remain (cons head (cons head acc)))\n           (reverse acc))))", "user": "5883920ee4b0f1effa3b767e"}, {"problem": 32, "code": "#(reduce concat (map (fn [i] (list i i)) %))", "user": "5875daaee4b01531a375ea74"}, {"problem": 32, "code": "(fn duplicateList [list]\n  (mapcat (partial repeat 2) list))", "user": "58631579e4b0f14aab7c8817"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5887518ae4b0f1effa3b76f5"}, {"problem": 32, "code": "(fn [x] (reduce (fn [a b] (conj a b b)) [] x))", "user": "587c48cce4b01531a375eb16"}, {"problem": 32, "code": "(fn\n  [se]\n  (sort\n    (concat\n      se\n      se)))", "user": "586a657de4b0f14aab7c88bd"}, {"problem": 32, "code": "(fn f [s]\n  (let [f*\n        (fn [acc s*]\n          (conj acc s* s*))]\n(reduce f* [] s)))", "user": "5840178ee4b089d5ab817de0"}, {"problem": 32, "code": "(fn dup-items\n  ([s] (dup-items s '()))\n  ([s result] \n   (if (= s nil)\n     (reverse result)\n     (recur (next s) (conj result (first s) (first s))))))", "user": "5888b75fe4b0f1effa3b771b"}, {"problem": 32, "code": "#(apply concat (map vector % %))", "user": "56c44c34e4b05cc29241ee96"}, {"problem": 32, "code": "(fn dup [arr]\n  (mapcat (fn [i] [i i]) arr))", "user": "5889dc13e4b0f1effa3b774a"}, {"problem": 32, "code": "(fn [seq] (reduce (fn [acc item] (conj (conj acc item) item)) [] seq))", "user": "5885bea8e4b0f1effa3b76bf"}, {"problem": 32, "code": "#(interleave % %)", "user": "585dbe41e4b0f14aab7c879f"}, {"problem": 32, "code": "(fn t\n  [[x & args]]\n  (if (empty? args)\n      (list x x)\n  (cons x (cons x (t args)))))", "user": "585a7cb2e4b0f14aab7c874e"}, {"problem": 32, "code": "(fn [ls]\n\t(loop [x ls\n           out []]\n    \t(if (seq x)\n        \t;do something\n          \t(recur (rest x) (conj out (first x) (first x)))\n        \tout\n        )\n    )\n)", "user": "57d031d6e4b0bd073c202354"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5458c74de4b01be26fd74623"}, {"problem": 32, "code": "(fn dup [coll] (reduce #(conj %1 %2 %2) [] coll))", "user": "578d459ee4b0ebec4cfb7567"}, {"problem": 32, "code": "#(interleave % %)", "user": "576e607ae4b0979f89651579"}, {"problem": 32, "code": "(fn dup [coll]\n  (when-let [s (seq coll)]\n    (cons (first s) (cons (first s) (dup (rest s))))))", "user": "58896e5ce4b0f1effa3b773e"}, {"problem": 32, "code": "#(apply concat (map (fn [x] (list x x)) %))", "user": "588e6a17e4b00487982d518c"}, {"problem": 32, "code": "mapcat #(vector % %)", "user": "588fbb39e4b00487982d51bd"}, {"problem": 32, "code": "#(mapcat (fn [x] [x x]) %)", "user": "5885cc62e4b0f1effa3b76c1"}, {"problem": 32, "code": "(fn [seqn]\n  (loop [i 0\n         ret []]\n    (if (= (nth seqn i nil) nil)\n      (identity ret)\n      (recur (inc i) (conj (conj ret (nth seqn i)) (nth seqn i)))\n    )\n    \n  )  \n)", "user": "588b4bd0e4b05c141a25607a"}, {"problem": 32, "code": "(fn [x]\n  (loop [cx x, nx []]\n    (if (empty? cx)\n      nx\n      (recur (rest cx) (conj (conj nx (first cx)) (first cx)))\n      )\n    )\n  )", "user": "588fb3a7e4b00487982d51b9"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "54dbc6ebe4b024c67c0cf773"}, {"problem": 32, "code": "mapcat #(vector %1 %1)", "user": "544673c0e4b032a45b8693b0"}, {"problem": 32, "code": "(partial reduce #(conj %1 %2 %2) [])", "user": "58923efce4b00487982d521c"}, {"problem": 32, "code": "(fn [x] (sort (take (* 2 (count x)) (cycle x))))", "user": "5886e8bde4b0f1effa3b76ea"}, {"problem": 32, "code": "#(interleave % %)", "user": "58868940e4b0f1effa3b76de"}, {"problem": 32, "code": "(fn [s] (mapcat #(list %1 %1) s))", "user": "57de9169e4b0bd073c202454"}, {"problem": 32, "code": "(fn [col](reduce concat (map #(take 2 (repeat %)) col)))", "user": "5885a608e4b0f1effa3b76bc"}, {"problem": 32, "code": "#(interleave % %)", "user": "5862a8a9e4b0f14aab7c880f"}, {"problem": 32, "code": "(fn [coll] (reduce into (map (fn [item] (vector item item)) coll)))", "user": "588f500ae4b00487982d51a4"}, {"problem": 32, "code": "reduce (fn [container value] (conj container value value)) []", "user": "589037b4e4b00487982d51d0"}, {"problem": 32, "code": "#(mapcat (fn [x] [x x]) %)", "user": "58949f8de4b00487982d525e"}, {"problem": 32, "code": "#(sort (concat % %))", "user": "4ec55ab5535d6d7199dd3697"}, {"problem": 32, "code": "reduce #(conj (conj %1 %2) %2) []", "user": "552b6ddbe4b0ffed3738f965"}, {"problem": 32, "code": "(fn [xs] (reduce concat (map #(repeat 2 %) xs)))", "user": "54f777a4e4b01ecee9d88820"}, {"problem": 32, "code": "(fn duplicate-items\n  [coll]\n  (reduce\n    (fn [final-coll value]\n      (into final-coll [value value]))\n    [] coll))", "user": "5890799be4b00487982d51d6"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "58904720e4b00487982d51d1"}, {"problem": 32, "code": "#(apply concat (map (partial repeat 2) %))", "user": "587cbebbe4b01531a375eb24"}, {"problem": 32, "code": "#(interleave %1 %1)", "user": "5884f77ee4b0f1effa3b76a9"}, {"problem": 32, "code": "(fn dub [lst]\n  (mapcat list lst lst))", "user": "5895477fe4b00487982d527c"}, {"problem": 32, "code": "(fn dupe [xs]\n  (if (empty? xs)\n    '()\n    (conj (dupe (rest xs)) (first xs) (first xs))))", "user": "5888f271e4b0f1effa3b7726"}, {"problem": 32, "code": "#(reduce (fn [p n] (concat p [n n])) [] %)", "user": "522724bde4b04e78ff2e19aa"}, {"problem": 32, "code": "(fn [coll]\n    (loop [result () coll coll]\n        (if (empty? coll)\n            (reverse result)\n            (recur (conj result (first coll) (first coll)) (rest coll)))))", "user": "5896735fe4b00487982d529d"}, {"problem": 32, "code": "(fn [coll]\n  (loop [coll coll\n         dupe-coll []]\n    (if (seq coll)\n      (recur (rest coll)\n             (conj (conj dupe-coll (first coll)) (first coll)))\n      dupe-coll)))", "user": "583e02fce4b089d5ab817da5"}, {"problem": 32, "code": "#(sort (reduce (fn [acc v] (into acc (repeat 2 v))) '() %))", "user": "589714cbe4b00487982d52b1"}, {"problem": 32, "code": "mapcat #(vector % %)", "user": "585d9558e4b0f14aab7c879c"}, {"problem": 32, "code": "(fn [s] (mapcat #(list % %) s))", "user": "58983e3fe4b00487982d52ce"}, {"problem": 32, "code": "(fn [x] (mapcat #(list % %) x))", "user": "52ea7d3ae4b09f7907dd14bf"}, {"problem": 32, "code": "(fn[y] (loop [hi [] x y]\n          (if (empty?  x)hi\n            (recur (conj hi ( first x)( first x)) (rest x) ))))", "user": "53ada652e4b047364c04446d"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "589a8dace4b00487982d5311"}, {"problem": 32, "code": "(fn [coll]\n  (apply concat (map #(take 2 (repeat %)) coll)))", "user": "56f1b558e4b04a395b9a049a"}, {"problem": 32, "code": "#(interleave % %)", "user": "585a7b05e4b0f14aab7c874d"}, {"problem": 32, "code": "#(interleave % %)", "user": "5896ade8e4b00487982d52a9"}, {"problem": 32, "code": "#(interleave % %)", "user": "57887de2e4b0ebec4cfb751c"}, {"problem": 32, "code": "(fn dupe-each-element [coll]\n  (lazy-seq\n   (when-let [s (seq coll)]\n     (let [head (first s)\n           tail (rest s)]\n       (cons head (cons head (dupe-each-element tail)))))))", "user": "5899c54de4b00487982d52fa"}, {"problem": 32, "code": "(fn [c]\n  (let [l ()]\n    (apply concat (map #(conj l % %) c))))", "user": "55228c3ce4b0882d96d091a2"}, {"problem": 32, "code": "(fn dupseq [mycol] (if (empty? mycol) '() (let [firstElem (first mycol)] (concat (list firstElem firstElem) (dupseq (rest mycol))))))", "user": "58950f29e4b00487982d5270"}, {"problem": 32, "code": "(fn [col]\n  (->> col\n       (reduce (fn [accum nxt]\n                 (conj accum nxt nxt))\n               [])))", "user": "50738138e4b054001656acc9"}, {"problem": 32, "code": "#(interleave % %)", "user": "589511dee4b00487982d5272"}, {"problem": 32, "code": "#(interleave % %)", "user": "58987ee9e4b00487982d52d2"}, {"problem": 32, "code": ";;reduce #(conj %1 %2 %2) []\nmapcat #(list % %)", "user": "5891bddce4b00487982d5201"}, {"problem": 32, "code": "#(->> % (map (fn [x] (list x x))) (apply concat))", "user": "589c6914e4b00487982d535d"}, {"problem": 32, "code": "mapcat #(conj '() % %)", "user": "5893c64ce4b00487982d524b"}, {"problem": 32, "code": "#(reverse (reduce (fn [acc e] (cons e(cons e acc))) [] %))", "user": "5897dda4e4b00487982d52c8"}, {"problem": 32, "code": "#(reverse (reduce (fn [nseq item] (conj nseq item item)) '() %1))", "user": "589c2e3fe4b00487982d5357"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5882e8b1e4b0f1effa3b7666"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "589e704ae4b02bd94d917e5e"}, {"problem": 32, "code": "reduce (fn [a b] (concat a (list b b))) ()", "user": "589f4387e4b02bd94d917e7b"}, {"problem": 32, "code": "mapcat (partial repeat 2)", "user": "5771b155e4b0979f896515ba"}, {"problem": 32, "code": "#(interleave % %)", "user": "58a01c73e4b02bd94d917e95"}, {"problem": 32, "code": "#(interleave % %)", "user": "4fe8b09ee4b07c9f6fd12c6f"}, {"problem": 32, "code": "(fn [x] (mapcat #(list % %) x))", "user": "589dd2cce4b02bd94d917e48"}, {"problem": 32, "code": "#(interleave % %)", "user": "58988cbbe4b00487982d52d7"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "58a2b57fe4b02bd94d917ede"}, {"problem": 32, "code": "#(mapcat (fn [x] [x x]) %)", "user": "589ec900e4b02bd94d917e65"}, {"problem": 32, "code": "(fn dup-each-item [xs]\n  (reduce #(apply conj %1 (list %2 %2)) [] xs))", "user": "58884cc6e4b0f1effa3b770e"}, {"problem": 32, "code": "(fn dup [[hd & tl :as xs]] (if xs\n                           (conj (dup tl) hd hd)\n                           nil))", "user": "58a47197e4b01a0c0b2328f9"}, {"problem": 32, "code": "#(apply concat (for [x %] [x x]))", "user": "58a0fc33e4b02bd94d917ea3"}, {"problem": 32, "code": "(fn self [s]\n  (if (not (empty? s))\n    (concat (repeat 2 (first s)) (self (rest s)))))", "user": "58a5a099e4b01a0c0b232918"}, {"problem": 32, "code": "#(reduce (fn [x y] (concat x [y y])) '() %)", "user": "58951903e4b00487982d5274"}, {"problem": 32, "code": "#(interleave % %)", "user": "584aa803e4b089d5ab817ee9"}, {"problem": 32, "code": "(fn\n  [coll]\n  (mapcat vector coll coll))", "user": "58a413b5e4b02bd94d917f07"}, {"problem": 32, "code": "#(loop [items %1 acc []]\n   (if (= 0 (count items)) acc\n     (recur (rest items) (conj acc (first items) (first items)))))", "user": "58a31ecee4b02bd94d917ee7"}, {"problem": 32, "code": "#(interleave % %)", "user": "58a7215de4b01a0c0b23293c"}, {"problem": 32, "code": "(fn duplicate\n  [a-seq]\n  (reduce\n   (fn [result next-el]\n     (concat result (list next-el next-el)))\n   '()\n   a-seq))", "user": "580d2788e4b0849f6811b730"}, {"problem": 32, "code": "(fn dup\n  ([x y]\n   (cond (empty? x) (seq y)\n         :else (recur (rest x) (conj (conj y (first x)) (first x)))))\n  ([x]\n   (dup x [])))", "user": "58a3ba31e4b02bd94d917eff"}, {"problem": 32, "code": "#(mapcat (fn [x] [x x]) %)", "user": "55afe57ae4b002ce9d5cbc1c"}, {"problem": 32, "code": "#(apply concat (map (fn [x] (repeat 2 x)) %))", "user": "587cf147e4b01531a375eb29"}, {"problem": 32, "code": "#(apply interleave (repeat 2 %))", "user": "587cf197e4b01531a375eb2a"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "589f0087e4b02bd94d917e6d"}, {"problem": 32, "code": "(fn duplicate-a-sequence [xs]\n  (when-let [[head & tail] xs]\n    (conj (duplicate-a-sequence tail) head head)))", "user": "58a58c50e4b01a0c0b232914"}, {"problem": 32, "code": "(fn [v] (apply concat (map (fn [x] [x x]) v)))", "user": "58a9e872e4b01a0c0b232973"}, {"problem": 32, "code": "#(loop [in % out []]\n   (if (empty? in)\n     out\n     (recur (rest in) (conj out (first in) (first in)))))", "user": "56391b7ce4b0bfe05bf117ef"}, {"problem": 32, "code": "#(sort (concat % %))", "user": "5760682ee4b08062f99a4e94"}, {"problem": 32, "code": "(fn dup [[x & xs]]\n  (if (empty? xs)\n    (list x x)\n    (concat (list x x) (dup xs))))", "user": "58a953dae4b01a0c0b232968"}, {"problem": 32, "code": "(fn [x]\n  (let [mappedX (map #(conj '() % %) x)]\n    (reduce concat mappedX)))", "user": "58a216e8e4b02bd94d917ed1"}, {"problem": 32, "code": "#(sort (apply concat (repeat 2 %)))", "user": "57fe68e2e4b0d3187e9009ce"}, {"problem": 32, "code": "#(mapcat (fn [x] (list x x)) %)", "user": "57689c23e4b0a07e8fc180d6"}, {"problem": 32, "code": "(fn [x] (interleave x x))", "user": "58a5c5c2e4b01a0c0b23291b"}, {"problem": 32, "code": "(fn [x] (reduce #(conj (conj %1 %2) %2) [] x))", "user": "58ad4349e4b0ebc645576c9d"}, {"problem": 32, "code": "reduce (fn [all x] (conj (conj all x) x)) []", "user": "5833a6d8e4b089d5ab817ca2"}, {"problem": 32, "code": "(fn [x]  (mapcat #(list % %) x ))", "user": "58ac513fe4b0005cfeb1a746"}, {"problem": 32, "code": "mapcat (fn [s] [s s])", "user": "58b06b7ce4b0ebc645576cdc"}, {"problem": 32, "code": "#(interleave % %)", "user": "5810fbe0e4b0f478707a05de"}, {"problem": 32, "code": "(fn \n  [seqn]\n  (loop [acc []\n         _seqn seqn]\n    (if (empty? _seqn)\n      acc\n      (let [x (first _seqn)]\n        (recur (conj (conj acc x) x) (rest _seqn))\n        ))))", "user": "5854580ce4b07779d46863f9"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "58b106f9e4b0ebc645576cf0"}, {"problem": 32, "code": "(fn dup\n  [sq]\n  (reduce #(conj %1 %2 %2) [] sq))", "user": "588e4e05e4b00487982d5188"}, {"problem": 32, "code": "(fn [coll]\n  (reverse\n(reduce #(cons %2 (cons %2 %1)) '() coll)))", "user": "57e016dce4b0bd073c202470"}, {"problem": 32, "code": "#(apply concat (map (fn [x] [x x]) %))", "user": "58791973e4b01531a375eac5"}, {"problem": 32, "code": "(fn [col]\n  (apply concat (map (fn [x] (replicate 2 x)) col)))", "user": "58b18ba0e4b0ebc645576cfa"}, {"problem": 32, "code": "mapcat (fn [x] [x x])", "user": "58a822e4e4b01a0c0b232950"}, {"problem": 32, "code": "(fn [coll]\n  (apply concat (map #(repeat 2 %) coll)))", "user": "58b2f085e4b0ebc645576d15"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "589f50bfe4b02bd94d917e7d"}, {"problem": 32, "code": "(fn [x] (sort (reduce conj x x)))", "user": "58a0fd0be4b02bd94d917ea4"}, {"problem": 32, "code": "#(interleave % %)", "user": "589560d8e4b00487982d5281"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "58b51e05e4b0ebc645576d4c"}, {"problem": 32, "code": "#(interleave % %)", "user": "58637221e4b0f14aab7c881d"}, {"problem": 32, "code": "(fn [col]\n  (reverse (reduce (fn [acc val] (conj acc val val)) () col)))", "user": "55f1f0d1e4b06e875b46ce3b"}, {"problem": 32, "code": "#(reduce (fn [acc elt] (conj acc elt elt)) [] %)", "user": "58a55694e4b01a0c0b23290b"}, {"problem": 32, "code": "(fn duplicate [x]\n   (if (empty? (rest x))\n     (conj (list) (first x) (first x))\n     (conj (duplicate (rest x)) (first x) (first x))\n     )\n  )", "user": "57cc14aae4b05aa3c4741d4a"}, {"problem": 32, "code": "(fn [l] (-> l\n            (concat l)\n            (sort)\n        ))", "user": "58b54852e4b0ebc645576d52"}, {"problem": 32, "code": "#(sort (reduce (fn [acc x] (conj acc x x)) () %1))", "user": "58b80ec1e4b0ebc645576d89"}, {"problem": 32, "code": "(fn [xs]\n  (loop [xs xs res []]\n    (if (seq xs)\n      (let [x (first xs)]\n      \t(recur (rest xs) (conj res x x)))\n      res)\n    )\n  )", "user": "589771f9e4b00487982d52bd"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "58b6d93ce4b0ebc645576d6c"}, {"problem": 32, "code": "(fn [xs]\n    (loop [xs xs ys []]\n      (if (empty? xs)\n        ys\n        (recur (rest xs) (conj ys (first xs) (first xs)))\n        )))", "user": "58b81490e4b0ebc645576d8c"}, {"problem": 32, "code": "(fn [s] (mapcat identity\n    \t(map (fn [x] (cons x (cons x '()))) s)))", "user": "58b4898de4b0ebc645576d3d"}, {"problem": 32, "code": "(fn [values] (apply concat (map (fn [v] (list v v)) values)))", "user": "57b35ecbe4b0fbc9809a277e"}, {"problem": 32, "code": "#(interleave % %)", "user": "58b3388ae4b0ebc645576d1e"}, {"problem": 32, "code": "#(mapcat (fn [e] [e e]) %)", "user": "5881d1c2e4b0f1effa3b7644"}, {"problem": 32, "code": "#(interleave % %)", "user": "4fe899a6e4b07c9f6fd12c54"}, {"problem": 32, "code": "(partial mapcat #(vector % %))", "user": "58ba8e7ce4b0888cdc949ce8"}, {"problem": 32, "code": "(fn dup-each [coll]\n  (loop [acc [], in coll]\n    (if (zero? (count in))\n      acc\n      (recur (conj acc (first in) (first in)) (rest in)))))", "user": "58bc08fee4b0888cdc949d08"}, {"problem": 32, "code": "#(interleave % %)", "user": "58bbe58be4b0888cdc949d05"}, {"problem": 32, "code": "#(interleave % %)", "user": "58a44a14e4b01a0c0b2328f2"}, {"problem": 32, "code": "#(reduce (fn [memo elem] (concat memo (repeat 2 elem))) '() %)", "user": "58bbcbc8e4b0888cdc949d00"}, {"problem": 32, "code": "#(reduce (fn [a b] (conj a b b)) [] %)", "user": "58bb218be4b0888cdc949cf4"}, {"problem": 32, "code": "(fn [coll] (mapcat #(repeat 2 %) coll))", "user": "58bc8cbee4b0888cdc949d1b"}, {"problem": 32, "code": "(fn [coll] (reverse(reduce into (list )(map (fn [x] (take 2 (cycle x))) (partition 1 coll)))))", "user": "58bdb36fe4b0888cdc949d35"}, {"problem": 32, "code": "(fn [x] (reduce concat (map #(take 2 (repeat %)) x)))", "user": "58be3142e4b0888cdc949d44"}, {"problem": 32, "code": "(fn [coll] (mapcat #(conj '() % %) coll))", "user": "58934052e4b00487982d523a"}, {"problem": 32, "code": "(fn [seqn]\n\t(loop [src seqn dupl []]\n\t\t(if (= 0 (count src))\n\t\t\tdupl\n\t\t\t(recur (rest src) (concat dupl (take 2 (repeat (first src)))))\n\t\t)))", "user": "58b985e0e4b0888cdc949ccc"}, {"problem": 32, "code": "(fn [col] (mapcat #(list % %) col))", "user": "58b1f51de4b0ebc645576d05"}, {"problem": 32, "code": "(fn duplicate-seq [list]\n  (mapcat identity\n    (for [item list]\n      [item item])))", "user": "575683aee4b02ea1147992dc"}, {"problem": 32, "code": "#(sort (concat % %))", "user": "58bef424e4b021aa9917eccb"}, {"problem": 32, "code": "#(interleave % %)", "user": "58765038e4b01531a375ea7e"}, {"problem": 32, "code": "mapcat (fn[z][z z] )", "user": "58c1b4f5e4b021aa9917ed01"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "58bde497e4b0888cdc949d3c"}, {"problem": 32, "code": "mapcat #(list  % %)", "user": "58ac14ebe4b0005cfeb1a740"}, {"problem": 32, "code": "(fn [seqy] (apply concat (map #(vector % %) seqy)))", "user": "58bc3202e4b0888cdc949d0b"}, {"problem": 32, "code": "(fn \n  [x]\n  (reverse (reduce #(conj %1 %2 %2) '() x)))", "user": "58976bfde4b00487982d52bc"}, {"problem": 32, "code": "#(reduce (fn [a b] (concat a [b b])) [] %)", "user": "58c3af4de4b021aa9917ed1b"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "58c04ca5e4b021aa9917ece6"}, {"problem": 32, "code": "#(mapcat (fn [x] (repeat 2 x)) %)", "user": "58b989dbe4b0888cdc949ccd"}, {"problem": 32, "code": "#(reverse (reduce (fn [c v] (conj (conj c v) v)) '() %))", "user": "57c314f3e4b05aa3c4741cba"}, {"problem": 32, "code": ";;(fn [seql] (apply concat (map #(repeat 2 %) seql)))\n\n(fn [seql]\n  (reduce #(concat %1 (repeat 2 %2)) '() seql))", "user": "589ac5a2e4b00487982d5318"}, {"problem": 32, "code": "(fn [c] (reduce (fn [coll v] (conj coll v v)) [] c))", "user": "52b065dbe4b0c58976d9acc9"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "589c0475e4b00487982d5351"}, {"problem": 32, "code": "(fn [x] (mapcat (fn [a b] [a b]) x x))", "user": "58bc6a88e4b0888cdc949d16"}, {"problem": 32, "code": "reduce (fn [contain a] (concat contain (list a a))) []", "user": "58809253e4b0f1effa3b7618"}, {"problem": 32, "code": "#(interleave % %)", "user": "58c7a80fe4b021aa9917ed7b"}, {"problem": 32, "code": "(fn duplicate-each [col] \n  (apply concat (for [el col] [el el])))", "user": "58c5a08be4b021aa9917ed40"}, {"problem": 32, "code": "mapcat (fn [x] [x x])", "user": "58b86162e4b0ebc645576d97"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "58c2df0ae4b021aa9917ed17"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "58ca8a1de4b03c36ff7e5835"}, {"problem": 32, "code": "#(apply concat (map (fn [e] (repeat 2 e)) %))", "user": "58b26da4e4b0ebc645576d0a"}, {"problem": 32, "code": "reduce (fn [dup x] (concat dup [x x])) []", "user": "58c66990e4b021aa9917ed53"}, {"problem": 32, "code": "#(interleave % %)", "user": "589c7c8ce4b00487982d5361"}, {"problem": 32, "code": "(fn [xs]\n  (loop [xs xs\n         ys nil]\n    (if (empty? xs)\n      (reverse ys)\n      (recur (rest xs) (cons (first xs) (cons (first xs) ys))))))", "user": "58bfa57ae4b021aa9917ecd8"}, {"problem": 32, "code": "mapcat #(vector % %)", "user": "56a80d8fe4b07966d5a8a06a"}, {"problem": 32, "code": "(fn [tseq] \n  (loop [remain tseq result []]\n    (if (empty? remain)\n       result\n       (recur (drop 1 remain) (conj result (first remain) (first remain))))))", "user": "56351709e4b0bfe05bf117c2"}, {"problem": 32, "code": "(fn [x] (reduce concat (map #(take 2 (repeat %)) x)))", "user": "58cb7525e4b03c36ff7e584a"}, {"problem": 32, "code": "#(interleave % %)", "user": "587c77afe4b01531a375eb1b"}, {"problem": 32, "code": "(fn [s]\n  (loop [rem s acc []]\n    (if (empty? rem)\n      acc\n      (recur (rest rem) (conj acc (first rem) (first rem))))))", "user": "58ca613de4b021aa9917edb7"}, {"problem": 32, "code": "#(interleave % %)", "user": "58c6c110e4b021aa9917ed66"}, {"problem": 32, "code": "#(interleave % %)", "user": "58c4b11ae4b021aa9917ed2c"}, {"problem": 32, "code": "(fn [seq] (interleave seq seq))", "user": "58c5ad55e4b021aa9917ed42"}, {"problem": 32, "code": "#(interleave % %)", "user": "588d224ae4b00487982d516c"}, {"problem": 32, "code": "#(loop [xs % rs []]\n   (if (empty? xs)\n     rs\n     (recur (rest xs) (conj rs (first xs) (first xs)))))", "user": "58cfbd7ae4b03c36ff7e58ba"}, {"problem": 32, "code": "#(loop [x %  c '()]  (if (first x) (recur (next x) (conj c (first x) (first x))) (reverse c)))", "user": "551daeb9e4b030e6a24d00df"}, {"problem": 32, "code": "mapcat #(conj (vector %) %)", "user": "587a3babe4b01531a375eae2"}, {"problem": 32, "code": "(fn dupli [xs]\n  (if (empty? xs)\n    '()\n    (cons (first xs) (cons (first xs) (dupli (rest xs))))))", "user": "58cf00c8e4b03c36ff7e58ac"}, {"problem": 32, "code": "#(sort (concat %1 %1))", "user": "5841872be4b089d5ab817e06"}, {"problem": 32, "code": "#(interleave % %)", "user": "573102bbe4b0cd1946bd0fbb"}, {"problem": 32, "code": "(fn [args]\n    (sort (concat args args)))", "user": "53882352e4b0640c7a9a5898"}, {"problem": 32, "code": "#(interleave % %)", "user": "58969076e4b00487982d52a2"}, {"problem": 32, "code": "(fn [items] (reverse (reduce #(conj %  %2 %2) '() items)))", "user": "58d27bcae4b03c36ff7e58fe"}, {"problem": 32, "code": "(fn dup \n  [xs] \n  (if (empty? xs)\n    '()\n    (conj (dup (rest xs)) (first xs) (first xs))))", "user": "58d2b7b3e4b03c36ff7e5908"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "58d5114de4b03c36ff7e5953"}, {"problem": 32, "code": "(fn [xs] (mapcat (fn [x] [x x]) xs))", "user": "57d418b4e4b0bd073c20239a"}, {"problem": 32, "code": "(fn [x] (reduce \n         #(conj (conj %1 %2) %2)\n         [] \n         x) \n  )", "user": "58c93089e4b021aa9917ed9b"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "56f3d21ae4b046a417f92055"}, {"problem": 32, "code": "(fn dup [s] (apply concat (map #(list % %) s)))", "user": "58d737cee4b03c36ff7e5982"}, {"problem": 32, "code": "reduce #(concat %1 [%2 %2]) '()", "user": "58d63b99e4b03c36ff7e596b"}, {"problem": 32, "code": "(fn [i] (reduce #(concat % (list %2 %2)) () i))", "user": "58cbdc3be4b03c36ff7e5856"}, {"problem": 32, "code": "(fn foo [x]\n  (loop [in x,\n         out []]\n    (if (empty? in)\n      (seq out)\n      (recur (rest in)\n             (conj (conj out (first in)) (first in))\n             ))))", "user": "58cff8b0e4b03c36ff7e58c0"}, {"problem": 32, "code": "#(loop [input % result ()]\n   (if (empty? input) (reverse result)\n     (recur (rest input) (conj result (first input) (first input)))))", "user": "58cd4949e4b03c36ff7e5886"}, {"problem": 32, "code": "(fn dbl [col] \n  (reduce \n   (fn [acc, elem] \n     (concat acc (list elem elem))) '() col))", "user": "58d4e73ce4b03c36ff7e594d"}, {"problem": 32, "code": "(comp (partial apply concat) (partial map (partial repeat 2)))", "user": "58cfb517e4b03c36ff7e58b9"}, {"problem": 32, "code": "#_(fn dup [[curr & remn]]\n  (if (empty? remn)\n    (list curr curr)\n    (conj (dup remn) curr curr) ))\n\n(fn [s]\n  (reduce #(conj %1 %2 %2) [] s) )", "user": "58acce0ae4b0005cfeb1a754"}, {"problem": 32, "code": "(fn [s] (reduce #( conj %1 %2 %2) [] s))", "user": "58d28c70e4b03c36ff7e5901"}, {"problem": 32, "code": "mapcat (partial replicate 2)", "user": "5703a557e4b08d47c97781f4"}, {"problem": 32, "code": "(fn duplicate [coll]\n  (reduce concat (map #(take 2 (repeat %)) coll)))", "user": "58dcb8cde4b0a4d5acaab6a7"}, {"problem": 32, "code": "#(reverse (reduce (fn [accum v] (conj (conj accum v) v)) () %))", "user": "58dcf11ae4b0a4d5acaab6af"}, {"problem": 32, "code": "(fn [xs]\n  (mapcat #(list (identity %) (identity %))  xs))", "user": "58c4492be4b021aa9917ed27"}, {"problem": 32, "code": "#(reduce (fn [a i] (into a (take 2 (repeat i)))) [] %)\n; #(interleave % %)", "user": "53a2a259e4b0f1fc7453882c"}, {"problem": 32, "code": "(fn [x] (apply concat (map #(vector % %) x)))", "user": "588906a9e4b0f1effa3b772a"}, {"problem": 32, "code": "(fn [x] (reduce concat (map (fn [el] (repeat 2 el)) x)))", "user": "58dbbdb3e4b0a4d5acaab687"}, {"problem": 32, "code": "#(interleave % %)", "user": "58dcae01e4b0a4d5acaab6a4"}, {"problem": 32, "code": "(fn [xs] (reduce #(conj %1 %2 %2) (vector) xs))", "user": "570eeca5e4b0b0fb43fd06fb"}, {"problem": 32, "code": "(fn [i] (apply concat (map #(take 2 (repeat %)) i)))", "user": "57dd651ee4b0bd073c202441"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) '[]", "user": "58dbfb24e4b0a4d5acaab690"}, {"problem": 32, "code": "reduce (fn [c x] (concat c [x x])) []", "user": "58aa3f02e4b01a0c0b23297d"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "58bc0531e4b0888cdc949d07"}, {"problem": 32, "code": "#(interleave % %)", "user": "585a9a16e4b0f14aab7c8752"}, {"problem": 32, "code": "(fn [s]\n   (reverse (reduce (fn [r e] (conj r e e))\n           '()\n           s)))", "user": "58de563fe4b0a4d5acaab6e3"}, {"problem": 32, "code": "#(interleave % %)", "user": "58e2e11ce4b005f69f193ca0"}, {"problem": 32, "code": "#(interleave % %)", "user": "58730484e4b01531a375ea26"}, {"problem": 32, "code": "#(sort(concat % %))", "user": "5885eb2de4b0f1effa3b76c6"}, {"problem": 32, "code": "(partial reduce #(conj %1 %2 %2) [])", "user": "58e37946e4b005f69f193cae"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "55b4fa46e4b01b9910ae2983"}, {"problem": 32, "code": "#_(fn dup [coll]\n  (if (empty? coll)\n    '()\n\n (let [x (first coll) ]  \n  (cons x (cons x (dup (rest coll))))\n\n)   ) )\n\n(fn dup [coll]\n  (if (empty? coll)\n    '()\n    (let [x (first coll)]  \n      (cons x (cons x (dup (rest coll)))))))", "user": "58aa8083e4b01a0c0b232985"}, {"problem": 32, "code": "#(interleave %  %)", "user": "55efc291e4b066087aa9453d"}, {"problem": 32, "code": "#(interleave % %)", "user": "58e58ae9e4b056aecfd47c9a"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "58e5fbbae4b056aecfd47ca6"}, {"problem": 32, "code": "reduce \n  (fn [ret elem] \n    (conj (conj ret elem) elem))\n  []", "user": "56ca2f25e4b0ea9b8538f716"}, {"problem": 32, "code": "(fn dup [coll]\n  (reduce #(apply conj %1 (list %2 %2)) [] coll))", "user": "58e63de2e4b056aecfd47cad"}, {"problem": 32, "code": "(fn [lst]\n  (mapcat #(list % %) lst))", "user": "58e56154e4b056aecfd47c92"}, {"problem": 32, "code": "#(interleave % %)", "user": "58cba946e4b03c36ff7e584f"}, {"problem": 32, "code": "(fn r [x] (reduce concat (map #(take 2 (repeat %)) x)))", "user": "58d1fe17e4b03c36ff7e58f5"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "58e5e585e4b056aecfd47ca2"}, {"problem": 32, "code": "(fn  [x]\n (reduce (fn [newstring y]\n           (conj newstring y y))\n          [] x))", "user": "58e6a2c5e4b056aecfd47cba"}, {"problem": 32, "code": "(fn [coll]\n  (reduce (fn [acc cur]\n            (into acc [cur cur]))\n          []\n          coll))", "user": "58e45a2ce4b056aecfd47c69"}, {"problem": 32, "code": "reduce #(conj  %1 %2 %2) []", "user": "58e7229fe4b056aecfd47cc4"}, {"problem": 32, "code": "(fn duplicate [collection]\n  (if (not (= collection []))\n    (concat\n      (list (first collection) (first collection))\n      (duplicate (rest collection)))))", "user": "58e980dfe4b056aecfd47d0b"}, {"problem": 32, "code": "#(interleave % %)", "user": "58e5f995e4b056aecfd47ca5"}, {"problem": 32, "code": "#(interleave % %)", "user": "58acca5ee4b0005cfeb1a753"}, {"problem": 32, "code": "(fn [p]\n        (seq(reduce\n            (fn [x y]\n                    (conj (conj x y) y))\n            []\n            p)))", "user": "58e325f3e4b005f69f193ca7"}, {"problem": 32, "code": "(fn [coll]\n  (reduce #(conj %1 %2 %2) []  coll))", "user": "58ebae90e4b056aecfd47d44"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "58ec8c7ae4b056aecfd47d64"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "58eba5cce4b056aecfd47d41"}, {"problem": 32, "code": "#(apply concat (map (fn [x] [x x]) %))", "user": "58e762d3e4b056aecfd47ccc"}, {"problem": 32, "code": "reduce (fn [r x] (conj r x x))  []", "user": "5794fd7be4b0e215f87e8476"}, {"problem": 32, "code": "(fn dup-1 [coll]\n  (reverse (reduce (fn [t v]\n            (concat (list v v) t)) () coll)))", "user": "58edaa3be4b056aecfd47d89"}, {"problem": 32, "code": "#(interleave % %)", "user": "58dd21a9e4b0a4d5acaab6b3"}, {"problem": 32, "code": "(fn duplicate [seq]\n  (interleave seq seq))", "user": "58ed713de4b056aecfd47d84"}, {"problem": 32, "code": "(fn [x] (reduce #(conj (conj % %2) %2) () (reverse x)))", "user": "58e9d9eee4b056aecfd47d10"}, {"problem": 32, "code": "(fn dup-seq [s]\n  (reduce concat (map #(take 2 (repeat %)) s)))", "user": "58ee9b14e4b056aecfd47db0"}, {"problem": 32, "code": "(fn [coll] (apply concat (map #(list % %) coll)))", "user": "58ee5371e4b056aecfd47da8"}, {"problem": 32, "code": "(fn [x]\n    (loop [[head & rest :as list] x dups []]\n      (if (empty? list)\n        dups\n        (recur rest (conj (conj dups head) head)))))", "user": "58f00639e4b056aecfd47ddc"}, {"problem": 32, "code": "(fn [s]\n    (mapcat #(list % %) s)\n    )", "user": "58ec1e63e4b056aecfd47d54"}, {"problem": 32, "code": "#(mapcat identity (map vector % %))", "user": "58e7eba2e4b056aecfd47cdf"}, {"problem": 32, "code": "(fn [x] (apply concat (map #(repeat 2 %) x)))", "user": "58eed4c5e4b056aecfd47db7"}, {"problem": 32, "code": "#(interleave % %)", "user": "5782018de4b0d36ec5835e8e"}, {"problem": 32, "code": "(fn [s]\n  (reduce concat (map #(take 2 (repeat %)) s)))", "user": "58e965b3e4b056aecfd47d08"}, {"problem": 32, "code": "#(loop [in % out []]\n   (let [x (first in) xs (rest in)]\n   (if (empty? in)\n     (seq out) \n     (recur xs (conj (conj out x) x)))))", "user": "5895385fe4b00487982d5279"}, {"problem": 32, "code": "#(apply concat (map (fn [x] [x x]) %))", "user": "58e0fa79e4b005f69f193c6e"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "58ee0bb6e4b056aecfd47d97"}, {"problem": 32, "code": "(fn d [xs]\n  (if (seq xs)\n    (cons (first xs)\n          (cons (first xs)\n                (d (rest xs))))))", "user": "58ef4db9e4b056aecfd47dc6"}, {"problem": 32, "code": "#(apply concat (map (fn [n] [n n]) %))", "user": "58dd2c02e4b0a4d5acaab6b8"}, {"problem": 32, "code": "(fn [s] (reverse (reduce #(apply (partial conj %1) (list %2 %2)) '() s)))", "user": "58f273d9e4b08e1cf3471d01"}, {"problem": 32, "code": "(fn [coll]\n  (interleave coll coll))", "user": "58dde189e4b0a4d5acaab6dd"}, {"problem": 32, "code": "reduce #(conj % %2 %2) []", "user": "58f5689de4b0438e51c2ced7"}, {"problem": 32, "code": "#(interleave % %)", "user": "57ffd1a9e4b0a837a8b30c2a"}, {"problem": 32, "code": "(fn dupe [input]\n  (loop [in input\n         out []\n         redo true]\n    (if (empty? in)\n      out\n      (if redo\n        (recur in (conj out (first in)) (not redo))\n        (recur (rest in) (conj out (first in)) (not redo))))))", "user": "58f4fa7ee4b0438e51c2cecb"}, {"problem": 32, "code": "#(mapcat (partial repeat 2) %)", "user": "58f45ea0e4b0438e51c2cebc"}, {"problem": 32, "code": "(fn dupit [coll]\n  (if (empty? coll)\n    coll\n    (let [car (first coll)\n          cdr (rest coll)]\n      (conj (dupit cdr) car car))))", "user": "51a0370ae4b0b292b01ee3ef"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "58bcea23e4b0888cdc949d23"}, {"problem": 32, "code": "#(interleave % %)", "user": "5796d3ebe4b039eba2ecb0ee"}, {"problem": 32, "code": "#(for [pair (for [x %] [x x]) element pair] element)", "user": "58d6caf5e4b03c36ff7e5975"}, {"problem": 32, "code": "(fn [seq] (mapcat #(repeat 2 %) seq))", "user": "58f7dfe6e4b0438e51c2cf1f"}, {"problem": 32, "code": "#(interleave % %)", "user": "58f2e8fbe4b0438e51c2ce94"}, {"problem": 32, "code": "#(reduce (fn \n            [new old] \n            (conj new old old)) \n          [] \n          %)", "user": "578bbd3ee4b0ebec4cfb754e"}, {"problem": 32, "code": "(fn [s] (mapcat #(repeat 2 %) s))", "user": "51a3be77e4b0e77c4ca60bf8"}, {"problem": 32, "code": "reduce #(into %1 [%2 %2]) []", "user": "58f44c07e4b0438e51c2ceb7"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "5567f164e4b0c656e3ff184d"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "58f75bf8e4b0438e51c2cf13"}, {"problem": 32, "code": "(fn [x]\n  (apply concat (map #(list % %) x)))", "user": "58ac1135e4b0005cfeb1a73f"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "5635adeee4b0bfe05bf117c7"}, {"problem": 32, "code": "mapcat (fn [x] (list x x))", "user": "576ffcb9e4b0979f89651592"}, {"problem": 32, "code": "(fn [s]\n  (loop [x (first s) xs (next s) res []]\n    (if-not x\n      res\n      (recur (first xs) (next xs) (conj res x x)))))", "user": "589f2cefe4b02bd94d917e75"}, {"problem": 32, "code": "(partial mapcat #(list % %))", "user": "57b7de74e4b0fbc9809a27d4"}, {"problem": 32, "code": "#(interleave % %)", "user": "58f3a2d4e4b0438e51c2ceac"}, {"problem": 32, "code": "(fn [x]\n    (->> x\n         (map #(vector % %))\n         (mapcat identity)))", "user": "58447708e4b089d5ab817e4b"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "58fc92c5e4b0438e51c2cf9a"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "53dbca12e4b094d41abdfef6"}, {"problem": 32, "code": "(fn dup [lst]\n  (if (empty? lst) '()\n    (cons (first lst) (cons (first lst) (dup (rest lst))))))", "user": "58ef0b8ce4b056aecfd47dbf"}, {"problem": 32, "code": "(fn a [x]\n  (if (empty? x)\n    '()\n    (concat (list (first x) (first x)) (a (rest x)))\n  )\n)", "user": "58fe40afe4b0438e51c2cfca"}, {"problem": 32, "code": "(fn dup [x]\n  (cond\n    (= () x) x\n    :else (conj (conj (dup (rest x)) (first x)) (first x))\n  )\n)", "user": "58f92297e4b0438e51c2cf43"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "57320099e4b0cd1946bd0fcb"}, {"problem": 32, "code": "#(interleave % %)", "user": "590088bfe4b0438e51c2d026"}, {"problem": 32, "code": "#(interleave % %)", "user": "53756f8be4b06839e8705e14"}, {"problem": 32, "code": "(fn [s] (interleave s s))", "user": "58d48df8e4b03c36ff7e5941"}, {"problem": 32, "code": "(fn [s]\n    (mapcat #(list % %) s))", "user": "58fff18be4b0438e51c2d00c"}, {"problem": 32, "code": "(fn f [x]\n  (if (empty? x)\n    x\n    (let [fst (first x)]\n      (conj (conj (f (rest x)) fst) fst))))", "user": "574b4f3ee4b02ea114799207"}, {"problem": 32, "code": "reduce #(conj % %2 %2) []", "user": "58fdbf59e4b0438e51c2cfbc"}, {"problem": 32, "code": "#(interleave % %)", "user": "58f8d79ee4b0438e51c2cf39"}, {"problem": 32, "code": "(partial reduce #(conj %1 %2 %2) [])", "user": "5901158de4b0438e51c2d039"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "58fd82a8e4b0438e51c2cfb5"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "59035914e4b022d14a2aafaa"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "52808559e4b0757a1b171403"}, {"problem": 32, "code": "#(interleave % %)", "user": "589b98fae4b00487982d533c"}, {"problem": 32, "code": "reduce\n   #(conj (vec %1) %2 %2)\n   []", "user": "58db097fe4b0a4d5acaab66f"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "59074b7ce4b047aa04b19951"}, {"problem": 32, "code": "(fn [coll]\n  (loop [[head & tail] coll\n         accum []]\n    (let [retval (concat accum [head head])]\n      (if (empty? tail)\n        retval\n        (recur tail retval)\n      )\n    )\n  )\n)", "user": "59073e0fe4b047aa04b19950"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "58dc81d1e4b0a4d5acaab69e"}, {"problem": 32, "code": "#(interleave % %)", "user": "58a32c21e4b02bd94d917eeb"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "54d2159fe4b0e8a36923e5ed"}, {"problem": 32, "code": "(fn [sq]\n  (reduce #(conj %1 %2 %2)\n          []\n          sq))", "user": "579816abe4b039eba2ecb10d"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "59085adfe4b047aa04b19972"}, {"problem": 32, "code": "(fn [input]\n  (loop [in input\n         out []] \n    (if (empty? in)\n      out\n      (recur (rest in)\n             (conj out \n                   (first in)\n                   (first in))))))", "user": "55d70b8fe4b0e31453f64a9c"}, {"problem": 32, "code": "(fn [n] (interleave n n))", "user": "58f90aa2e4b0438e51c2cf41"}, {"problem": 32, "code": "#(reverse (reduce (fn [res it] (conj res it it)) `() %))", "user": "590b3aeae4b047aa04b199d0"}, {"problem": 32, "code": "#(mapcat vector % %)", "user": "590b055ae4b047aa04b199c9"}, {"problem": 32, "code": "(fn [xs] (reduce concat (map (partial repeat 2) xs)))", "user": "590cc457e4b047aa04b199f4"}, {"problem": 32, "code": "#(interleave % %)", "user": "59076082e4b047aa04b19956"}, {"problem": 32, "code": "#(sort (apply conj % %))", "user": "52369a67e4b05f3be1c7c8f5"}, {"problem": 32, "code": "(fn [v] (mapcat #(repeat 2 %) v))", "user": "58f9fde7e4b0438e51c2cf56"}, {"problem": 32, "code": "#(reduce (fn [acc cur] (concat acc [cur cur])) '() %)", "user": "565131b3e4b0f29ec07d2e88"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "590d0c31e4b047aa04b199fb"}, {"problem": 32, "code": "#(interleave % %)", "user": "590d0b3fe4b047aa04b199f9"}, {"problem": 32, "code": "#(mapcat identity (for [x %] [x x]))", "user": "5908b36be4b047aa04b19982"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "590d0bc8e4b047aa04b199fa"}, {"problem": 32, "code": "(fn [l] (apply concat (map (fn [a] `(~a ~a)) l)))", "user": "59075e3be4b047aa04b19955"}, {"problem": 32, "code": "(fn [a]\n     ((fn [x y]\n          (println y)\n          (if (empty? x)\n              (into () (reverse y))\n              (recur (drop 1 x) (into (into [] y) (list (first x) (first x)))))\n      ) a ()))", "user": "58dadf46e4b0a4d5acaab66b"}, {"problem": 32, "code": "mapcat (partial repeat 2)", "user": "590e588ce4b047aa04b19a23"}, {"problem": 32, "code": "#((fn [myseq]\n(loop [[n & numbers] myseq,\n       result []]\n\n  (let [result (conj result n n)]\n    (if (empty? numbers)\n      result   ; we're done\n      (recur numbers result))))) %)", "user": "590f283de4b047aa04b19a35"}, {"problem": 32, "code": "#(sort (into % %))", "user": "576aea4fe4b0a07e8fc18126"}, {"problem": 32, "code": "(fn [coll]\n  (reduce concat (map #(take 2 (repeat %)) coll)))", "user": "591072e0e4b0163c97b36ebc"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "5910a43de4b0163c97b36ebf"}, {"problem": 32, "code": "reduce (fn [duplicate x] (conj duplicate x x)) []", "user": "591326f2e4b0163c97b36efc"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5913375de4b0163c97b36efe"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "5640b135e4b08d4f616f5ee8"}, {"problem": 32, "code": "(fn [x] \n  (reverse (reduce \n             (fn [v e] (conj v e e)) '() x)))", "user": "59096794e4b047aa04b1999e"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "58ffaddee4b0438e51c2cffe"}, {"problem": 32, "code": "(fn [s] ((fn [s r] (if (empty? s) (reverse r) (recur (rest s) (cons (first s) (cons (first s) r))))) (apply list s) nil))", "user": "58fdd7b7e4b0438e51c2cfc0"}, {"problem": 32, "code": "(fn [aseq] (mapcat (fn [x] (conj '() x x)) aseq) )", "user": "59163ee1e4b09b4ee5954b85"}, {"problem": 32, "code": "reduce #(concat %1 (list %2 %2)) '()", "user": "59156f0be4b0163c97b36f3d"}, {"problem": 32, "code": "(fn [s] (interleave s s))", "user": "58eadeafe4b056aecfd47d28"}, {"problem": 32, "code": "(fn duble [x] (if (empty? x) nil (cons (first x) (cons (first x) (duble (rest x))))))", "user": "59078134e4b047aa04b1995c"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "53d5d43ce4b0e771c302544d"}, {"problem": 32, "code": "(fn [x]\n  (reduce (fn [a, b] (conj a b b)) [] x)\n  )", "user": "5822b578e4b04b46fc4b0fa4"}, {"problem": 32, "code": "(fn [coll]\n  (reduce #(conj (conj %1 %2) %2) [] coll))", "user": "59199cc3e4b09b4ee5954bc8"}, {"problem": 32, "code": "(fn [lat]\n  (reduce concat (map #(take 2 (repeat %)) lat)))", "user": "58dfce9fe4b0a4d5acaab723"}, {"problem": 32, "code": "(fn [s] (apply concat (map (partial repeat 2) s)))", "user": "58fb7d7ae4b0438e51c2cf7a"}, {"problem": 32, "code": "#(interleave % %)", "user": "59032c0fe4b022d14a2aaf9f"}, {"problem": 32, "code": "#(interleave % %)", "user": "5916412ee4b09b4ee5954b87"}, {"problem": 32, "code": "#(mapcat (fn [x] (concat [] [x x])) %)", "user": "591ac8ece4b09b4ee5954bdd"}, {"problem": 32, "code": "(fn this [x]\n  (cond\n   (= x ()) ()\n   :else (conj (this (rest x)) (first x) (first x))\n   )\n  )", "user": "59165082e4b09b4ee5954b88"}, {"problem": 32, "code": "(fn [x](sort(concat x x)))", "user": "591c2f4ee4b09b4ee5954bfc"}, {"problem": 32, "code": "#(interleave % %)", "user": "52f762ece4b047fd55836fc2"}, {"problem": 32, "code": "#(interleave % %)", "user": "58ee2c14e4b056aecfd47d9e"}, {"problem": 32, "code": "(fn [s]\n  (loop [old-seq s new-seq []]\n    (if (empty? old-seq)\n      new-seq\n      (recur (rest old-seq) (conj (conj new-seq (first old-seq)) (first old-seq)))\n      )))", "user": "5903f0cde4b022d14a2aafb9"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "4f29d9abe4b0d6649770a034"}, {"problem": 32, "code": "mapcat (fn [x] (list x x))", "user": "5369f9c2e4b0243289761ea5"}, {"problem": 32, "code": "#(interleave % %)", "user": "590253e3e4b0438e51c2d055"}, {"problem": 32, "code": "(fn [xs] (apply concat (map #(vector % %) xs)) )", "user": "5921a080e4b09b4ee5954c77"}, {"problem": 32, "code": "#(interleave % %)", "user": "591cbc30e4b09b4ee5954c08"}, {"problem": 32, "code": "(fn [s]\n  (apply concat (map (fn [a] (list a a)) s)))", "user": "57614a42e4b0994c1922fb85"}, {"problem": 32, "code": "#(reduce (fn [a b] (apply (partial conj a) (repeat 2 b))) [] %)", "user": "591f05b4e4b09b4ee5954c42"}, {"problem": 32, "code": "(fn [arg]\n  (reduce #(concat %1 (list %2 %2)) '() arg))", "user": "5733459ce4b0cd1946bd0fec"}, {"problem": 32, "code": "#(for [x % _ [1 2]] x)", "user": "58e66350e4b056aecfd47cb2"}, {"problem": 32, "code": "(fn [coll]\n  (apply concat \n   (map list coll coll)))", "user": "59225498e4b09b4ee5954c8c"}, {"problem": 32, "code": "#(mapcat (partial repeat 2) %)", "user": "5922a513e4b026ae38521286"}, {"problem": 32, "code": "(fn [a] \n  (reverse (reduce (fn [y x] (into y (list x x)  )) () a)))", "user": "591f5124e4b09b4ee5954c45"}, {"problem": 32, "code": "(fn [x] (mapcat #(-> [% %]) x))", "user": "5911aa1de4b0163c97b36ed8"}, {"problem": 32, "code": "(fn [seq1]\n  (reduce\n    (fn [result input ]\n       (concat result (take 2 (repeat input)))\n      )\n    []\n    seq1\n    )\n  )", "user": "59228b00e4b026ae38521281"}, {"problem": 32, "code": "#(interleave % %)", "user": "591d9870e4b09b4ee5954c1b"}, {"problem": 32, "code": "(fn dup [x] (if (empty? x) () (conj (dup (rest x)) (first x) (first x))))", "user": "591e9813e4b09b4ee5954c36"}, {"problem": 32, "code": "#(interleave % %)", "user": "58ef93ece4b056aecfd47dca"}, {"problem": 32, "code": "(fn [xs] (interleave xs xs))", "user": "4db1b3951254ad5b4805fa6f"}, {"problem": 32, "code": "(fn [x] (reduce #(conj %1 %2 %2) [] x))\n;#(interleave % %)", "user": "58d2af83e4b03c36ff7e5907"}, {"problem": 32, "code": "(fn [seq] (reduce concat (map #(take 2 (repeat %)) seq)))", "user": "5919d209e4b09b4ee5954bcc"}, {"problem": 32, "code": "(fn [x] (reverse (loop [output '() index 0] (if (>= index (count x)) output (recur (list* (nth x index) (nth x index) output) (+ 1 index))))))", "user": "5924009ce4b072a2710fce45"}, {"problem": 32, "code": "(fn [xs] (reduce #(conj %1 %2 %2) [] xs))", "user": "58e0a760e4b005f69f193c69"}, {"problem": 32, "code": "(fn duplicate [x]\n   (if (= '() x)\n     ()\n     (cons\n      (first x)\n      (cons\n       (first x)\n       (duplicate (rest x))))))", "user": "59273eefe4b072a2710fcec6"}, {"problem": 32, "code": "(partial mapcat (fn [n] [n n]))", "user": "59279a89e4b072a2710fced3"}, {"problem": 32, "code": "(fn duplicate-sequence\n  [s]\n  (reduce into [] (map (partial repeat 2) s)))", "user": "59234753e4b0a390037439ef"}, {"problem": 32, "code": "#(interleave % %)", "user": "59258aa7e4b072a2710fce74"}, {"problem": 32, "code": "(fn dupe-twice [s]\n  (apply concat (for [val s] [val val])))", "user": "4e6fe3a6535d5021c1a89629"}, {"problem": 32, "code": "reduce (fn [a b] (concat a (list b b))) ()", "user": "592af6eee4b072a2710fcf2c"}, {"problem": 32, "code": "#((fn duplicate [seq res] \n  (if (= (first seq) nil) \n    res \n    (duplicate (rest seq) (conj (conj res (first seq)) (first seq))))) % [])", "user": "56ffeafee4b08d47c97781c2"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "592518bfe4b072a2710fce65"}, {"problem": 32, "code": "#(interleave % %)", "user": "591d182ee4b09b4ee5954c10"}, {"problem": 32, "code": "reduce #(apply conj %1 (list %2 %2)) []", "user": "59251947e4b072a2710fce69"}, {"problem": 32, "code": "#(interleave % %)", "user": "58cc390ce4b03c36ff7e5866"}, {"problem": 32, "code": "#(interleave % %)", "user": "56292bffe4b00e49c7cb47fc"}, {"problem": 32, "code": "(fn [col] (mapcat #(repeat 2 %) col))", "user": "532cb870e4b019098a6f8b34"}, {"problem": 32, "code": "(fn [c]\n  (reduce #(conj %1 %2 %2)\n          []\n          c))", "user": "557c6ca6e4b05c286339e0c4"}, {"problem": 32, "code": "(fn [coll] (reduce #(conj %1 %2 %2) [] coll))", "user": "5918db70e4b09b4ee5954bbb"}, {"problem": 32, "code": "#(interleave % %)", "user": "58ebd10de4b056aecfd47d49"}, {"problem": 32, "code": "reduce (fn [x,y] (concat x [y,y])) []", "user": "5933b736e4b072a2710fd05d"}, {"problem": 32, "code": "(fn[coll](\n          sort (concat coll coll)\n          ))", "user": "592b7269e4b072a2710fcf3f"}, {"problem": 32, "code": "(partial (fn [output [head & tail]]\n           (if (nil? head)\n             (into '() output)\n             (recur (cons head (cons head output)) tail))) '())", "user": "58db362be4b0a4d5acaab675"}, {"problem": 32, "code": "(fn dup [s]\n        (loop [s s\n               rslt []\n               i 0]\n          (if (= (count s)  i)\n            rslt\n            (recur s (conj (conj rslt (get s i)) (get s i)) (+ i 1)))))", "user": "59301509e4b072a2710fcfd6"}, {"problem": 32, "code": "(fn [a] (interleave a a))", "user": "5934a43ce4b072a2710fd07e"}, {"problem": 32, "code": "reduce #(concat %1 (list %2 %2)) '()", "user": "5931e498e4b072a2710fd024"}, {"problem": 32, "code": "#(reduce (fn [col x] (conj col x x)) [] %)", "user": "5913fde8e4b0163c97b36f13"}, {"problem": 32, "code": "(fn [x] (mapcat (fn [y] (take 2 (repeat y))) x))\n;(fn [x] (reduce (fn [acc x] (concat acc [x x])) '() x))", "user": "5923554ee4b0a390037439f2"}, {"problem": 32, "code": "(fn [l] (interleave l l))", "user": "59368ccae4b02506e01a297a"}, {"problem": 32, "code": "#(seq (reduce (fn [acc item]\n                (-> acc\n                    (conj item)\n                    (conj item)))\n              [] %))", "user": "592518cde4b072a2710fce66"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "5935b010e4b04f87174def55"}, {"problem": 32, "code": "(fn [x] (apply concat (map #(vec [% %]) x)))", "user": "5936fabce4b02506e01a298c"}, {"problem": 32, "code": "(fn [s] (loop [tmp s new ()]\n          (if (empty? tmp)\n            (reverse new)\n           (recur (rest tmp) (conj (conj new (first tmp)) (first tmp)))))\n )", "user": "59368ccae4b02506e01a2979"}, {"problem": 32, "code": "#(interleave % %)", "user": "59368efbe4b02506e01a297d"}, {"problem": 32, "code": "(fn [listy]\n  (loop [tmpl listy newl '()]\n    (if (empty? tmpl)\n      (reverse newl)\n      (recur (rest tmpl) (conj newl (first tmpl) (first tmpl))))))", "user": "59369515e4b02506e01a297e"}, {"problem": 32, "code": "(fn [x]\n   (mapcat list x x))", "user": "59385840e4b02506e01a29c9"}, {"problem": 32, "code": "#(interleave % %)", "user": "5939bcb6e4b069cdc2982b3f"}, {"problem": 32, "code": "#(interleave % %)", "user": "592dbbd5e4b072a2710fcf7f"}, {"problem": 32, "code": "#(interleave % %)", "user": "591a6c9fe4b09b4ee5954bd6"}, {"problem": 32, "code": "#(interleave % %)\n\n;(seq (reduce (fn [acc item]\n; (-> acc (conj item) (conj item) )\n; ))", "user": "592c2f3ee4b072a2710fcf53"}, {"problem": 32, "code": "#(interleave % %)", "user": "5918dfc7e4b09b4ee5954bbc"}, {"problem": 32, "code": "(fn dupliciraj [sekv]\n  (if (empty? sekv) '()\n      (conj (conj (dupliciraj (rest sekv)) (first sekv)) (first sekv)))\n)", "user": "584d99c5e4b0b7285a6f4e42"}, {"problem": 32, "code": "#(interleave % %)", "user": "57f2bf56e4b0511f1d294df8"}, {"problem": 32, "code": "(partial mapcat (partial repeat 2))", "user": "593c71cbe4b069cdc2982b90"}, {"problem": 32, "code": "#(sort (concat % %))", "user": "5915a0a5e4b09b4ee5954b73"}, {"problem": 32, "code": "#(interleave % %)", "user": "593f95d8e4b069cdc2982be3"}, {"problem": 32, "code": "(fn [x] (mapcat #(vector % %) x))", "user": "593dfe60e4b069cdc2982bb1"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "593f88dce4b069cdc2982be2"}, {"problem": 32, "code": "(fn gandain [x]\n  (if (empty? x)\n    '()\n    (conj (gandain (rest x)) (first x) (first x))))", "user": "593910eae4b02506e01a29f4"}, {"problem": 32, "code": "(fn f [x]\n  (loop [s x, res '()]\n    (if (seq s)\n      (recur (rest s) (conj res (first s) (first s)))\n      (reverse res))))", "user": "593d6793e4b069cdc2982ba6"}, {"problem": 32, "code": "(fn [x] (sort (apply conj x x)))", "user": "5938bca5e4b02506e01a29eb"}, {"problem": 32, "code": "(fn [input]\n   (loop [s '() is input]\n     (if (not (empty? is))\n       (recur (conj (conj s (first is)) (first is)) (rest is))\n       (reverse s))))", "user": "5901731ae4b0438e51c2d03d"}, {"problem": 32, "code": "(fn f\n  [l]\n  (if (empty? l)\n    []\n    (concat (vector (first l)) (vector (first l)) (f(rest l)))))", "user": "59390a35e4b02506e01a29f3"}, {"problem": 32, "code": "(fn [coll]\n  (mapcat (fn [x] [x x]) coll))", "user": "594307c0e4b060784b3b7920"}, {"problem": 32, "code": "(fn dup-each-item [xs] (reduce #(apply conj %1 (list %2 %2)) [] xs))", "user": "592518e8e4b072a2710fce67"}, {"problem": 32, "code": "#(interleave % %)", "user": "5900d5cde4b0438e51c2d02e"}, {"problem": 32, "code": "(fn [s] (into '() (reverse (reduce (fn [l i] (conj l i i)) [] s))))", "user": "59419bdfe4b060784b3b78f7"}, {"problem": 32, "code": "(fn dup-each-item [xs]\n  (reduce #(apply conj %1 (list %2 %2)) [] xs))", "user": "592518f0e4b072a2710fce68"}, {"problem": 32, "code": "(fn [x]\n  (reduce concat (map #(list % %) x)))", "user": "59395adfe4b02506e01a29fb"}, {"problem": 32, "code": "#(mapcat list %1 %1)", "user": "593fcb0ce4b069cdc2982bea"}, {"problem": 32, "code": "#(reduce concat (map (fn [a] (identity [a a])) %))", "user": "59449aa2e4b0b03edd0057ad"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "59438419e4b060784b3b7929"}, {"problem": 32, "code": "(fn [seq] (apply concat (map #(list % %) seq)))", "user": "54bd9a60e4b0ed20f4ff6ee3"}, {"problem": 32, "code": "(fn [coll] (reduce (fn [acc itm] (concat acc itm)) () (map (fn [itm] (list itm itm)) coll)))", "user": "593e4b1fe4b069cdc2982bbb"}, {"problem": 32, "code": "(fn [x] \n;  (loop [l x\n ;        point []]\n  ;  (if (not (empty? l))\n   ; (recur (rest l) (conj point (first l) (first l) )) point)\n    ;       ))\n  (reduce #(conj %1 %2 %2) [] x))", "user": "593744abe4b02506e01a299b"}, {"problem": 32, "code": "#(interleave % %)", "user": "593f8692e4b069cdc2982be1"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "592519cfe4b072a2710fce6b"}, {"problem": 32, "code": "(partial reduce (fn [acc val] (conj acc val val)) [])", "user": "594783bee4b07ddc2dafada1"}, {"problem": 32, "code": "(fn [x]\n  (->> x\n       (map #(repeat 2 %))\n       (apply concat)))", "user": "593dde1be4b069cdc2982baf"}, {"problem": 32, "code": "(fn [lst]\n  (apply concat (for [x lst] [x x]))\n)", "user": "5943abb6e4b060784b3b792b"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "594263cbe4b060784b3b790a"}, {"problem": 32, "code": "(fn dup-seq [lat]\n  (reduce concat (map #(take 2 (repeat %)) lat)))", "user": "592c64ffe4b072a2710fcf57"}, {"problem": 32, "code": "(fn [x] (reduce #(conj %1 %2 %2) [] x))", "user": "59473563e4b07ddc2dafad97"}, {"problem": 32, "code": "(fn [s] (loop [ret [] i 0] (if (= i (count s)) ret (recur (conj ret (nth s i) (nth s i)) (+ i 1)))))", "user": "59468de7e4b07ddc2dafad88"}, {"problem": 32, "code": "reduce #(conj % %2 %2) []", "user": "583f1533e4b089d5ab817dc8"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "59496129e4b07ddc2dafadd7"}, {"problem": 32, "code": "(fn duplikat [x]\n  (if (empty? x)\n    '()\n    (conj (duplikat (rest x)) (first x) (first x))))", "user": "593f9bbce4b069cdc2982be4"}, {"problem": 32, "code": "(fn [x] (apply concat (map #(conj '() % %) x)))", "user": "594bdadce4b07ddc2dafae43"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "594bc912e4b07ddc2dafae3e"}, {"problem": 32, "code": "(fn [x]\n  (reverse\n  (loop [in x\n         out '()]\n    (if (empty? in)\n      out\n      (recur (rest in) (cons (first in) (cons (first in) out)))))))", "user": "594bd637e4b07ddc2dafae41"}, {"problem": 32, "code": "(fn [x] (mapcat #(repeat 2 %) x))", "user": "576186a5e4b0994c1922fb8e"}, {"problem": 32, "code": "#(interleave % %)", "user": "57262710e4b0c5bde472c120"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "594bb203e4b07ddc2dafae36"}, {"problem": 32, "code": "(fn\n  [seq]\n  (reverse (reduce\n   \t(fn \n      [acc curr]\n      (conj acc curr curr)\n      )\n   \t'()\n   \tseq)))", "user": "594be2cae4b07ddc2dafae48"}, {"problem": 32, "code": "#(interleave % %)", "user": "594880ade4b07ddc2dafadc2"}, {"problem": 32, "code": "#(loop [x % res []]  (if(not=[] x)  (recur  (rest x)  (conj (conj res (first x)) (first x))) res  ))", "user": "594e3723e4b07ddc2dafaea8"}, {"problem": 32, "code": "#(interleave % %)", "user": "594bc7d6e4b07ddc2dafae3d"}, {"problem": 32, "code": "reduce #(conj (conj %1 %2) %2) []", "user": "59497f51e4b07ddc2dafaddd"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5938bae2e4b02506e01a29ea"}, {"problem": 32, "code": "#(mapcat\n   (fn [x]\n     (list x x))\n      % )", "user": "594c1baae4b07ddc2dafae59"}, {"problem": 32, "code": "#(interleave % %)", "user": "55216aa5e4b0882d96d09192"}, {"problem": 32, "code": "(fn [xs]\n   (loop [xs xs, ys ()]\n     (if (seq xs)\n       (recur (rest xs) (cons (first xs) (cons (first xs) ys)))\n       (reverse ys))))", "user": "5069d8c5e4b01dc6af13f838"}, {"problem": 32, "code": "reduce #(concat %1 [%2 %2]) '()", "user": "57a497e8e4b0a966079561e4"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5948adffe4b07ddc2dafadc6"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "594bb36ae4b07ddc2dafae37"}, {"problem": 32, "code": "(fn repeat2 [x] (mapcat #(repeat 2 %) x))", "user": "5950f0bfe4b066ee0a44ae9f"}, {"problem": 32, "code": "(fn [coll]\n  (reduce #(concat %1 (repeat 2 %2)) '() coll))", "user": "594c0bd7e4b07ddc2dafae56"}, {"problem": 32, "code": "#(interleave % %)", "user": "594f0c93e4b07ddc2dafaec7"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "56b2652ae4b0982f16b37e04"}, {"problem": 32, "code": "(fn [s]\n  (mapcat #(list % %) s))", "user": "58b0bbc5e4b0ebc645576ce6"}, {"problem": 32, "code": "(fn duplicate [c]\n  (let [step (fn [c]\n               (when-let [s (seq c)] (let [fs (first s)]\n                 (concat (list fs fs) (duplicate (rest s))))))]\n    (lazy-seq (step c))))", "user": "5953bdb6e4b066ee0a44aeed"}, {"problem": 32, "code": "(fn [inp]\n  (loop [res []\n         inp inp]\n    (if (empty? inp)\n      res\n      (let [next-el (first inp)]\n        (recur\n         (conj res next-el next-el)\n         (rest inp))))))", "user": "592334c7e4b0a390037439ee"}, {"problem": 32, "code": "reduce #(conj (conj %1 %2) %2) []", "user": "594a5559e4b07ddc2dafadf8"}, {"problem": 32, "code": "(fn [x] (reduce \n  \t\t\t(fn [lista, i] (conj (conj lista i) i)) \n  \t\t\t[]\n  \t\t\tx)\n)", "user": "5926c254e4b072a2710fceb8"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "591e0782e4b09b4ee5954c25"}, {"problem": 32, "code": "#(interleave % %)", "user": "58ffbabce4b0438e51c2d002"}, {"problem": 32, "code": "(fn [xs]\n  (mapcat (partial repeat 2) xs))", "user": "5952d75ce4b066ee0a44aed4"}, {"problem": 32, "code": "(fn [coll]\n\t(mapcat #(list % %) coll))", "user": "59503c5de4b066ee0a44ae8e"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "5951250fe4b066ee0a44aea6"}, {"problem": 32, "code": "reduce (fn [col el] (conj col el el)) []", "user": "5956c6dae4b066ee0a44af61"}, {"problem": 32, "code": "mapcat #(vector % %)", "user": "593db05ae4b069cdc2982bab"}, {"problem": 32, "code": "mapcat (partial repeat 2)", "user": "5958cef6e4b066ee0a44af94"}, {"problem": 32, "code": "(fn dup [s]\n  (mapcat #(repeat 2 %1) s))", "user": "5958a0c8e4b066ee0a44af8c"}, {"problem": 32, "code": "#(let\n     [x %]\n     (sort (reduce conj x x))\n     )", "user": "59551e04e4b066ee0a44af20"}, {"problem": 32, "code": "(fn [xs]\n  (reduce #(conj %1 %2 %2) [] xs))", "user": "5954108ae4b066ee0a44aef4"}, {"problem": 32, "code": "#(reduce (fn[lst ch](conj (conj lst ch) ch))[] %)", "user": "59406b94e4b069cdc2982bfd"}, {"problem": 32, "code": "(fn [s]\n  (apply concat (map #(vector % %) s)))", "user": "5947c6a6e4b07ddc2dafada7"}, {"problem": 32, "code": "reduce #(concat % (repeat 2 %2)) []", "user": "595914e0e4b066ee0a44af99"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "595a885be4b066ee0a44afc4"}, {"problem": 32, "code": "(fn my-dup\n  ([x] (let [[f & r] x]\n         (if (empty? x)\n           []\n           (cons f (cons f (my-dup r)))\n           )\n   )\n   )\n  )", "user": "5959c72ae4b066ee0a44afac"}, {"problem": 32, "code": "(fn [coll]\n  (seq\n   (reduce\n    (fn [v e]\n      (conj (conj v e) e))\n    [] coll)))", "user": "595930f6e4b066ee0a44af9c"}, {"problem": 32, "code": "#(reduce (fn f [a b] (conj a b b)) [] %)", "user": "55df2752e4b050e68259b3ed"}, {"problem": 32, "code": "#(mapcat (fn [x] (list x x)) %)", "user": "594cb88be4b07ddc2dafae6e"}, {"problem": 32, "code": "mapcat (juxt identity identity)", "user": "595b864ee4b066ee0a44afdc"}, {"problem": 32, "code": "#(interleave % %)", "user": "593ab583e4b069cdc2982b57"}, {"problem": 32, "code": "reduce (fn [list a] (conj (conj list a) a)) []", "user": "58cf8f97e4b03c36ff7e58b7"}, {"problem": 32, "code": "(fn [ps]\n  (reverse (reduce into (map #(list % %) ps))))", "user": "58969420e4b00487982d52a4"}, {"problem": 32, "code": "(fn [ls] (apply concat (map #(list % %) ls)))", "user": "54961073e4b0b312c081ff62"}, {"problem": 32, "code": "(fn [s]\n  (mapcat (fn [_] [_ _]) s))", "user": "5264502be4b03e8d9a4a70cf"}, {"problem": 32, "code": "(fn [l]\n    (reduce #(concat %1 %2) (map #(vector % %) l)))", "user": "595bbab7e4b066ee0a44afe0"}, {"problem": 32, "code": "(fn [foo]\n  (mapcat identity (map #(concat % %) (partition-by identity foo)))\n  )", "user": "595d0897e4b066ee0a44b00f"}, {"problem": 32, "code": "reduce #(conj % %2 %2) []", "user": "58db3c5ae4b0a4d5acaab677"}, {"problem": 32, "code": "#(reduce (fn [seq x] (concat seq [x x])) [] %)", "user": "595b7c12e4b066ee0a44afda"}, {"problem": 32, "code": "(fn dup-seq [lat]\n(reduce concat (map #(take 2 (repeat %)) lat)))", "user": "595e1ba7e4b066ee0a44b036"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "4f73591be4b07046d9f4f045"}, {"problem": 32, "code": "#(apply concat (map (fn [x] (conj [x] x)) %))", "user": "59566d1de4b066ee0a44af54"}, {"problem": 32, "code": "(fn\n  [col]\n  (mapcat #(repeat 2 %) col))", "user": "595ebf46e4b066ee0a44b04f"}, {"problem": 32, "code": "(fn [l](reduce concat '() (map (fn [e] (list e e)) l)))", "user": "595e20e2e4b066ee0a44b037"}, {"problem": 32, "code": "(fn [coll]\n  (let [f* (fn [acc v] (conj acc v v))]\n    (reduce f* [] coll)))", "user": "5954edcbe4b066ee0a44af15"}, {"problem": 32, "code": "#(apply concat (for [x %] (list x x)))", "user": "595d224de4b066ee0a44b016"}, {"problem": 32, "code": "(fn[_seq](reverse(reduce (fn[result head]\n\t\t\t\t\t(conj (conj result head) head)) '() _seq)))", "user": "5954eef0e4b066ee0a44af17"}, {"problem": 32, "code": "mapcat #(-> [% %])", "user": "595eba88e4b066ee0a44b04e"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "594bc16be4b07ddc2dafae39"}, {"problem": 32, "code": "#(mapcat identity (map vector % %))", "user": "595fe942e4b066ee0a44b075"}, {"problem": 32, "code": "#((fn dupitInt[acc, x]\n     (if (empty? x)\n       (seq acc)\n       (dupitInt\n        (conj (conj (vec acc) (first x)) (first x))\n        (rest x))))\n\n  '() %)", "user": "595ed97fe4b066ee0a44b051"}, {"problem": 32, "code": "#(loop [result []\n        coll   %]\n    (if (empty? coll)\n      result\n      (recur (conj result (first coll) (first coll)) (rest coll))))", "user": "595c02a9e4b066ee0a44afeb"}, {"problem": 32, "code": "(fn [lis]\n   (->\n    (filter\n     (let [f1 (complement sequential?)\n           f2 #(if (vector? %)\n                 (if (vector? (first %)) false true)\n                 false ) ]\n       ;;f1\u662f\u4e00\u7ef4\u7684\u6570\u636e,f2\u662f\u4e8c\u7ef4\u7684\u6570\u636e\n       (if (vector? (first lis)) f2 f1)\n       ;;\n       )\n     (rest (tree-seq sequential? seq (repeat 2 lis)))\n     ) (sort) )\n   )", "user": "570e43d8e4b0b0fb43fd06eb"}, {"problem": 32, "code": "(fn [se] (mapcat (fn [s] (repeat 2 s)) se))", "user": "593c653de4b069cdc2982b8f"}, {"problem": 32, "code": "#(interleave % %)", "user": "58fc52cee4b0438e51c2cf95"}, {"problem": 32, "code": "(fn [x]\n  (reduce #(conj %1 %2 %2) [] x))", "user": "58cd65fae4b03c36ff7e5889"}, {"problem": 32, "code": "( fn [y x] (apply concat (for [x x] (conj y x x)))) ()", "user": "5953949be4b066ee0a44aeea"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "58ea5bdce4b056aecfd47d1b"}, {"problem": 32, "code": "mapcat #(vector % %)", "user": "58ee84e5e4b056aecfd47dab"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "595d2041e4b066ee0a44b014"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "595fd721e4b066ee0a44b06e"}, {"problem": 32, "code": "#(interleave % %)", "user": "524ac3d1e4b09eba1c0223a0"}, {"problem": 32, "code": "#(interleave % %)", "user": "5911c8e1e4b0163c97b36edc"}, {"problem": 32, "code": "reduce #(conj % %2 %2) []", "user": "59638af5e4b066ee0a44b0cc"}, {"problem": 32, "code": "#(loop [x % result []]\n   (if (empty? x)\n     result\n     (recur (rest x) (conj result (first x) (first x)))))", "user": "5964c614e4b069c0a1a19770"}, {"problem": 32, "code": "(fn [x] (apply concat (map #(list % %) x)))", "user": "59663e77e4b069c0a1a1979f"}, {"problem": 32, "code": "reduce (fn magic\n         [curr elem]\n         (let [aa (conj curr elem)]\n           (conj aa elem))) []", "user": "595bc925e4b066ee0a44afe2"}, {"problem": 32, "code": "(fn [x] (reduce #(conj %1 %2 %2) () (reverse x)))", "user": "5965eb8de4b069c0a1a19796"}, {"problem": 32, "code": "#(interleave % %)", "user": "55c4e30be4b0e31453f649a6"}, {"problem": 32, "code": "(fn [s]\n   (loop [result []\n          remainder s]\n     (if (empty? remainder)\n       result\n       (recur (conj (conj result (first remainder)) (first remainder)) (rest remainder)))))", "user": "572b73d0e4b0cd1946bd0f3a"}, {"problem": 32, "code": "(fn\n  [x]\n  (reduce #(conj %1 %2 %2) [] x))", "user": "55842bd7e4b05c286339e11c"}, {"problem": 32, "code": "#(apply concat (for [x %] (conj [x] x)))", "user": "59692530e4b069c0a1a197e4"}, {"problem": 32, "code": "(fn [s] (reduce #(conj %1 %2 %2) [] s))", "user": "59699da7e4b069c0a1a197eb"}, {"problem": 32, "code": "(fn [s] (mapcat (fn [e] [e e]) s))", "user": "5967ce67e4b069c0a1a197bf"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "590b8607e4b047aa04b199db"}, {"problem": 32, "code": "#(interleave % %)", "user": "59648ce1e4b069c0a1a19769"}, {"problem": 32, "code": "(fn [lst] (apply concat (map (fn [x] (list x x)) lst)))", "user": "560bcefae4b05f002753df21"}, {"problem": 32, "code": "(fn [xs] (apply concat (for [x xs] [x x])))", "user": "59644d2ae4b069c0a1a19764"}, {"problem": 32, "code": "(fn [k]\n  (apply concat\n         (for [x k] [x x])))", "user": "595eaa8fe4b066ee0a44b04b"}, {"problem": 32, "code": "mapcat (fn [x] [x x])", "user": "51d55795e4b01da06753aa8f"}, {"problem": 32, "code": "#(apply concat (map (fn [x] (list x x)) %))", "user": "596c1f25e4b069c0a1a19825"}, {"problem": 32, "code": "(fn [a-seq] (loop [acc []\n                   m-seq a-seq]\n              (if (empty? m-seq)\n                acc\n                (recur (conj acc (first m-seq) (first m-seq)) (rest m-seq)))))", "user": "595fd77ce4b066ee0a44b06f"}, {"problem": 32, "code": "#(reduce concat \n         (map (fn [x] (take 2 (repeat x))) %))", "user": "5962af8ce4b066ee0a44b0b8"}, {"problem": 32, "code": "#(sort (concat %1 %1))", "user": "5955625fe4b066ee0a44af2f"}, {"problem": 32, "code": "#(mapcat (fn[c][c c]) %)", "user": "596e4c5be4b069c0a1a19864"}, {"problem": 32, "code": "(fn [l] (apply concat (map #(list % %) l)))", "user": "596caee3e4b069c0a1a19837"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5964f9b0e4b069c0a1a19778"}, {"problem": 32, "code": "(fn [arr]\n  (mapcat #(list % %) arr))", "user": "59636b6de4b066ee0a44b0c6"}, {"problem": 32, "code": "(fn [l]\n  (reverse (reduce (fn [s x] (conj (conj s x) x)) '() l)))", "user": "59708e38e4b01722bebd4c65"}, {"problem": 32, "code": "reduce #(concat %1 (list %2) (list %2)) ()", "user": "596f6683e4b069c0a1a19877"}, {"problem": 32, "code": "reduce #(conj % %2 %2) []", "user": "595a4fb8e4b066ee0a44afba"}, {"problem": 32, "code": "(fn\n  [lst]\n  (mapcat (fn [a]\n            (repeat 2 a))\n          lst))", "user": "59636cc2e4b066ee0a44b0c7"}, {"problem": 32, "code": "(fn ad [vector1]\n  (apply concat (map #(repeat 2 %) vector1)))", "user": "59636ec9e4b066ee0a44b0c8"}, {"problem": 32, "code": "#(interleave % %)", "user": "5398d042e4b0b51d73faaf00"}, {"problem": 32, "code": "(fn[x] (apply concat (map #(repeat 2 %) x)))", "user": "52c8a814e4b0c2d177d62138"}, {"problem": 32, "code": "(fn duper\n  [input]\n  (loop [xs input ys []]\n    (if (empty? xs)\n    ys\n    (recur (rest xs) (conj ys (first xs) (first xs))))))", "user": "53de4bdae4b0d874e779ae32"}, {"problem": 32, "code": "mapcat (partial repeat 2)", "user": "5972fcf6e4b01722bebd4c92"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5797d3d2e4b039eba2ecb106"}, {"problem": 32, "code": "(fn dup [s]\n  (if (empty? s)\n    '()\n  \t(concat [(first s) (first s)] (dup (rest s)))))", "user": "59733c91e4b01722bebd4c9b"}, {"problem": 32, "code": "#(mapcat vector %1 %1)", "user": "59636b37e4b066ee0a44b0c3"}, {"problem": 32, "code": "(fn [arr] (mapcat (fn [x] [x x]) arr))", "user": "59636b43e4b066ee0a44b0c4"}, {"problem": 32, "code": "(fn [lis]\n  (mapcat vector lis lis))", "user": "59636b49e4b066ee0a44b0c5"}, {"problem": 32, "code": "(fn [y] (mapcat (fn [x] (vector x x)) y))", "user": "59637028e4b066ee0a44b0ca"}, {"problem": 32, "code": "(fn dup [x] (interleave x x))", "user": "58866b4fe4b0f1effa3b76d4"}, {"problem": 32, "code": "#(interleave % %)", "user": "594266cfe4b060784b3b790b"}, {"problem": 32, "code": "#(mapcat (juxt identity identity) %)", "user": "59538a2fe4b066ee0a44aee8"}, {"problem": 32, "code": "(fn [x] (mapcat #(repeat 2 %) x))", "user": "5974b12be4b01722bebd4cb1"}, {"problem": 32, "code": "(fn [l]\n  (reduce (fn [a b]\n            (conj a b b))\n          [] l))", "user": "5978305be4b01722bebd4d03"}, {"problem": 32, "code": "#(->> % (mapcat (partial repeat 2)))", "user": "59738d98e4b01722bebd4ca1"}, {"problem": 32, "code": "(fn [list]\n  (loop [l list\n         result ()]\n    (if (empty? l)\n      result\n      (recur (rest l) (concat result [(first l)] [(first l)]))\n)))", "user": "5954cea2e4b066ee0a44af0a"}, {"problem": 32, "code": "(fn [a-list] (reduce #(concat %1 (repeat 2 %2)) [] a-list))", "user": "5978b4c9e4b01722bebd4d13"}, {"problem": 32, "code": "#(mapcat list % %)", "user": "5978c844e4b01722bebd4d18"}, {"problem": 32, "code": "#(loop [x % y '[]]\n    (if (empty? x)\n      y\n      (recur (rest x) (concat y (vector (first x) (first x))))))", "user": "5977653be4b01722bebd4ced"}, {"problem": 32, "code": "(fn [s] (interleave s s))", "user": "597b43d4e4b02382a38ad1f4"}, {"problem": 32, "code": "(fn [coll]\n  (mapcat #(repeat 2 %) coll))", "user": "5935151ee4b072a2710fd084"}, {"problem": 32, "code": "#(apply concat (for [i %] (repeat 2 i)))", "user": "5979cd36e4b02382a38ad1d8"}, {"problem": 32, "code": "(fn \n  [col]\n  (loop [c (reverse col) res (list)]\n\t\t(if (first c)\n\t\t\t(recur (rest c) (conj res (first c) (first c)))\n\t\t\tres)))", "user": "590620e1e4b047aa04b1992c"}, {"problem": 32, "code": "(fn t\n  [[x & xs]]\n  (if xs\n    (apply conj (t xs) (repeat 2 x))\n    (repeat 2 x)))", "user": "597d0e43e4b0dbe32238d095"}, {"problem": 32, "code": "#(interleave % %)", "user": "597dcb0ce4b0dbe32238d0a2"}, {"problem": 32, "code": "(fn dup\n  [arg]\n  (seq (reduce (fn [rez arg]\n                  (into rez (repeat 2 arg)))\n                [] arg)))", "user": "597af3f7e4b02382a38ad1f0"}, {"problem": 32, "code": "(fn [s] (apply concat (map (fn [e] [e e]) s)))", "user": "59804b60e4b021a7a535fdcf"}, {"problem": 32, "code": "mapcat #(replicate 2 %)", "user": "597e128ee4b0dbe32238d0a4"}, {"problem": 32, "code": "(fn [sequence]\n                 (reduce\n                  (fn [m i] (conj (conj m i) i))\n                  [] \n                  sequence))", "user": "597f8a4be4b0dbe32238d0c0"}, {"problem": 32, "code": "#(apply concat (map vector % %))", "user": "5980dcd5e4b021a7a535fddb"}, {"problem": 32, "code": "#(mapcat list % %)", "user": "5980f91ae4b021a7a535fddd"}, {"problem": 32, "code": "(fn dup [s]\n  (if (empty? s)\n    s\n    (let [[x & y] s]\n      (cons x (cons x (dup y))))))", "user": "597a4277e4b02382a38ad1e2"}, {"problem": 32, "code": "#(reduce (fn [acc v]\n           (conj acc v v))\n         []\n         %)", "user": "597f8984e4b0dbe32238d0bf"}, {"problem": 32, "code": "#(interleave % %)", "user": "59753ddce4b01722bebd4cc1"}, {"problem": 32, "code": "mapcat #(vector % %)", "user": "59826556e4b021a7a535fdfe"}, {"problem": 32, "code": "mapcat #(vec [% %])", "user": "596539dce4b069c0a1a19783"}, {"problem": 32, "code": "(fn duplicate-values [x] (reduce #(concat %1 [%2 %2]) [] x))", "user": "591addcee4b09b4ee5954be1"}, {"problem": 32, "code": ";#(reduce (fn [result el] (concat result [el el])) [] %)\n#(interleave % %)", "user": "59837909e4b021a7a535fe16"}, {"problem": 32, "code": "(fn duplicate-seq\n  [sq]\n  (reduce ;;let's use reduce to EXPAND the sequence.\n    (fn [dup-seq cur-item]\n      (concat dup-seq [cur-item cur-item])) ;;yep thats right\n    []\n    sq)) ;;life doesnt make sense anymore", "user": "59863a26e4b021a7a535fe87"}, {"problem": 32, "code": "(fn [coll] (reduce concat (map #(repeat 2 %) coll)))", "user": "598425c8e4b021a7a535fe23"}, {"problem": 32, "code": "#(reduce (fn [acc val] (concat acc (list val val))) () %)", "user": "5982d82be4b021a7a535fe05"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "595fea04e4b066ee0a44b076"}, {"problem": 32, "code": "#(interleave % %)", "user": "5971763fe4b01722bebd4c72"}, {"problem": 32, "code": "#(loop [[head & tail] %\n        i 0\n        result []]\n   (if-not head\n     result\n     (if (= 2 i)\n       (recur tail 0 result)\n       (recur (cons head tail) (inc i) (conj result head)) ))\n   )", "user": "598085e6e4b021a7a535fdd3"}, {"problem": 32, "code": "#(mapcat (juxt identity identity) %)", "user": "598858d0e4b021a7a535feb5"}, {"problem": 32, "code": "#(sort (concat % %))", "user": "598876fee4b021a7a535feb7"}, {"problem": 32, "code": "(fn sk-dup [l]\n  (interleave l l))", "user": "5884f377e4b0f1effa3b76a8"}, {"problem": 32, "code": "#(reverse \n  (reduce \n    (fn [initial a]\n      (cons a (cons a initial)))\n    '() \n   \t%))", "user": "5989e080e4b021a7a535fed6"}, {"problem": 32, "code": "mapcat #(repeat 2 %1)", "user": "598ad666e4b02b9968b84ce1"}, {"problem": 32, "code": "(fn [x]\n  (reduce #(into %1 [%2 %2])[] x)\n  )", "user": "5984b9f3e4b021a7a535fe33"}, {"problem": 32, "code": "(fn dup [l]\n  (if (= (count l) 0)\n    '()\n    (conj\n     (dup (rest l))\n     (first l)\n     (first l))))", "user": "598ab445e4b02b9968b84ce0"}, {"problem": 32, "code": "(fn [coll] (seq (reduce\n   #(into %1 [%2 %2])\n   []\n   coll\n)))", "user": "55916764e4b0604b3f94d57b"}, {"problem": 32, "code": "(fn [coll] (\n\t(fn [remaining acc]\n\t\t(if (empty? remaining)\n\t\t\tacc\n\t\t\t(let [x (first remaining) r (rest remaining)]\n\t\t\t\t(recur r (concat acc (list x x)))))) coll '()))", "user": "598af379e4b02b9968b84ce6"}, {"problem": 32, "code": "#(reverse (reduce (fn [result current] (conj result current current)) '() %))", "user": "5989ee61e4b021a7a535fed7"}, {"problem": 32, "code": "#(mapcat  (partial repeat 2 ) %)", "user": "598588f2e4b021a7a535fe65"}, {"problem": 32, "code": "#(loop [coll %\n        out []]\n   (if (empty? coll)\n     out\n     (recur (rest coll) (conj out (first coll) (first coll)))))", "user": "59902fede4b0fcebec4de86d"}, {"problem": 32, "code": "(fn [x] (apply concat (map #(repeat 2 %) x)))", "user": "591cc30be4b09b4ee5954c0a"}, {"problem": 32, "code": "#(interleave %1 %1)", "user": "59346d29e4b072a2710fd077"}, {"problem": 32, "code": "(fn [x]\n\t(interleave x x)\n)", "user": "598d746ae4b02b9968b84d23"}, {"problem": 32, "code": "(fn [i] (loop\n  [x 0 coll i  col (empty coll)]\n  (if (= x (count coll))\n    (reverse col)\n    (recur\n      (inc x)\n      coll\n      (cons (get coll x) (cons (get coll x) col ) )))))", "user": "598d0dc3e4b02b9968b84d18"}, {"problem": 32, "code": "(fn [i] (loop\n  [x 0 coll i  col (empty coll)]\n  (if (= x (count coll))\n    (reverse col)\n    (recur\n      (inc x)\n      coll\n      (cons (get coll x) (cons (get coll x) col ) )))))", "user": "598d22b1e4b02b9968b84d1a"}, {"problem": 32, "code": "mapcat #(identity [% %])", "user": "596d630ae4b069c0a1a19846"}, {"problem": 32, "code": "(fn[s] (reduce concat (map #(repeat 2 %) s)))", "user": "599362a3e4b0b211ea3aaab2"}, {"problem": 32, "code": "reduce (fn [acc x] (concat acc (list x x))) '()", "user": "598a4ff7e4b02b9968b84cda"}, {"problem": 32, "code": "(fn [xs] \n  (reduce \n   (fn [acc x] \n     (conj acc x x))\n   [] xs))", "user": "598debf0e4b02b9968b84d2e"}, {"problem": 32, "code": "(fn [seq]\n  (loop [origin-seq seq\n         target-seq []]\n    (if (empty? origin-seq)\n      (concat '() target-seq)\n      (let [head (first origin-seq)\n            body (rest origin-seq)]\n        (recur body\n               (conj target-seq head head))))))", "user": "58fed70de4b0438e51c2cfdd"}, {"problem": 32, "code": ";;(fn [coll]\n;;  (reduce #(concat %1 (take 2 (repeat %2))) '() coll))\n#(interleave % %)", "user": "59944e73e4b0b211ea3aaac2"}, {"problem": 32, "code": "(fn [xs]\n  (reduce concat\n          (map #(repeat 2 %) xs)))", "user": "5907a736e4b047aa04b1995e"}, {"problem": 32, "code": "#(sort (concat % %))", "user": "5991d9cbe4b0866487ed0d69"}, {"problem": 32, "code": "(fn [col]\n    (apply concat (map (fn [x] [x x]) col))\n    )", "user": "59932f49e4b0b211ea3aaaae"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "59639142e4b066ee0a44b0ce"}, {"problem": 32, "code": "mapcat #(vector %%)", "user": "56478a82e4b0284900eef61e"}, {"problem": 32, "code": "(fn [coll] (mapcat (fn [x] [x x]) coll))", "user": "5960a1a6e4b066ee0a44b08e"}, {"problem": 32, "code": "#(mapcat (fn [x] [x x]) %)", "user": "5990fcb9e4b0866487ed0d5b"}, {"problem": 32, "code": "#(mapcat (fn [i] [i i]) %)", "user": "599475aae4b0b211ea3aaac8"}, {"problem": 32, "code": "#(mapcat (partial repeat 2) %1)", "user": "59971e2de4b07157cc8daacc"}, {"problem": 32, "code": "(fn [col] (reduce #(conj (conj %1 %2) %2) [] col))", "user": "59874ff6e4b021a7a535fea1"}, {"problem": 32, "code": "(fn [s]\n  (mapcat #(repeat 2 %) s))", "user": "59946856e4b0b211ea3aaac7"}, {"problem": 32, "code": "(fn [arr]\n  (loop [c arr, ret []]\n    (if (empty? c) ret\n      (recur (rest c)\n             (conj\n              (conj ret (first c))\n              (first c))))))", "user": "58d9772de4b0a4d5acaab63c"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "597b878ee4b02382a38ad1fb"}, {"problem": 32, "code": "(fn duplicate \n\t[coll]\n\t(lazy-seq\n\t\t(when-let [s (seq coll)]\n\t\t\t(concat (list (first s) (first s)) \n\t\t\t\t(duplicate (rest s))\n\t\t\t)\n\t\t)\n\t)\n)", "user": "55e46caae4b050e68259b451"}, {"problem": 32, "code": "#(mapcat list % %)", "user": "5992de05e4b0866487ed0d7e"}, {"problem": 32, "code": "(fn [s] (interleave s s))", "user": "59971dcbe4b07157cc8daacb"}, {"problem": 32, "code": "#(for [x % y [x x]] y)", "user": "5996fd2be4b07157cc8daac5"}, {"problem": 32, "code": "(fn [xs]\n  (mapcat #(replicate 2 %) xs)\n   )", "user": "5996b419e4b07157cc8daab5"}, {"problem": 32, "code": "(fn [l] (loop [r [] l l] (if (empty? l) r (recur (conj r (first l) (first l)) (rest l)))))", "user": "5995f8ade4b0b211ea3aaae9"}, {"problem": 32, "code": "(fn [xs]\n   (interleave xs xs))", "user": "55b28b57e4b01b9910ae296c"}, {"problem": 32, "code": "(fn [xs] (apply concat (map (fn [x] [x x])  xs)))", "user": "594be1cce4b07ddc2dafae47"}, {"problem": 32, "code": "reduce #(concat % [%2 %2]) '()", "user": "598c5a0ee4b02b9968b84d03"}, {"problem": 32, "code": "(fn [coll]\n  (interleave coll coll))", "user": "4f29e69ae4b0d6649770a036"}, {"problem": 32, "code": "(fn [coll]\n\t(reduce #(conj %1 %2 %2) [] coll)  \n)", "user": "5991d2fae4b0866487ed0d68"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "59a24c92e4b066c664927d20"}, {"problem": 32, "code": "(fn [x]\n       (mapcat #(repeat 2 %) x))", "user": "594ea2a4e4b07ddc2dafaeb6"}, {"problem": 32, "code": "(comp (partial reduce concat '()) map) #(list % %)", "user": "59a2ba97e4b066c664927d2c"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "599b7210e4b010b4cc4bca07"}, {"problem": 32, "code": "(fn [coll] (sort (mapcat #(identity %) [coll coll])))", "user": "58e5180ae4b056aecfd47c82"}, {"problem": 32, "code": "(fn [coll]\n  (reduce (fn [accum next-item]\n            (conj accum next-item next-item)) [] coll))", "user": "597f8c93e4b0dbe32238d0c1"}, {"problem": 32, "code": "mapcat (fn [x] [x x])", "user": "59967c40e4b0b211ea3aaaf2"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "599df601e4b0871e7608b801"}, {"problem": 32, "code": "#(interleave % %)", "user": "59a460ede4b066c664927d52"}, {"problem": 32, "code": "#(interleave % %)", "user": "59a512b7e4b066c664927d5e"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "576c2ecae4b07c67f59d1fbb"}, {"problem": 32, "code": "(fn fnx [xs]\n  (if (= [] xs) []\n  (concat [(first xs) (first xs)] (fnx (rest xs)))))", "user": "599d49a7e4b0871e7608b7f4"}, {"problem": 32, "code": "#(sort (into % %))", "user": "5922a36ce4b026ae38521285"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "59a64a79e4b066c664927d7b"}, {"problem": 32, "code": "mapcat #(vector % %)", "user": "569d3f9ae4b0542e1f8d147a"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "59a57e91e4b066c664927d63"}, {"problem": 32, "code": "reduce (fn [acc el] (conj acc el el)) []", "user": "59a72effe4b066c664927d94"}, {"problem": 32, "code": "#(reverse (reduce (fn\n                     [acc n]\n                     (conj acc n n))\n                   '()\n                   %))", "user": "59aad3d4e4b08cbb53654d88"}, {"problem": 32, "code": "(fn [a] (mapcat #(conj () % %) a))", "user": "597fa3fbe4b021a7a535fdbf"}, {"problem": 32, "code": "mapcat #(vector % %)", "user": "59ab8beee4b08cbb53654d9e"}, {"problem": 32, "code": "(fn [col] (interleave col col))", "user": "59a8405ce4b0bcf4e9a43af1"}, {"problem": 32, "code": "(fn [y] (mapcat (fn [x]  [x x]   )  y) )", "user": "57bffed6e4b05aa3c4741c89"}, {"problem": 32, "code": "#(reduce (fn [c el] (concat c [el el])) [] %)", "user": "586b93eae4b01531a375e95b"}, {"problem": 32, "code": "(fn [sq]\n           (let [aux\n                 (fn [[head & tail] acc]\n                   (cond \n                    (nil? head)\n                    acc\n\n                    :else\n                    (recur tail (conj acc head head))))]\n             (aux sq [])))", "user": "57e6f90de4b0bfb2137f5af6"}, {"problem": 32, "code": "reduce #(into %1 (list %2 %2)) []", "user": "59ac0965e4b08cbb53654da6"}, {"problem": 32, "code": "reduce (fn [x y] (conj x y y)) []", "user": "59a0262ee4b0871e7608b82d"}, {"problem": 32, "code": "#(loop [[element & other] % result nil]\n  (if (nil? element)\n    result\n    (recur other (concat result [element element]))))", "user": "55d354e0e4b0e31453f64a62"}, {"problem": 32, "code": "(fn [s] (reduce (fn [s v] (conj s v v)) [] s))", "user": "59ac757fe4b00adcf69795d3"}, {"problem": 32, "code": "(fn [s] (reduce #(conj %1 %2 %2) [] s))", "user": "59a9e517e4b08cbb53654d79"}, {"problem": 32, "code": "#(reduce concat (map list % %))", "user": "59a90b2ae4b0bcf4e9a43aff"}, {"problem": 32, "code": "(fn [z] (reduce #(conj %1 %2 %2) [] z))", "user": "59a80652e4b0bcf4e9a43aeb"}, {"problem": 32, "code": "(fn [s] (reduce #(conj (conj %1 %2) %2) [] s))", "user": "598229d6e4b021a7a535fdfb"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "59b1c2eae4b0e1f4e384c8ec"}, {"problem": 32, "code": "#(interleave % %)", "user": "57086931e4b0b0fb43fd069e"}, {"problem": 32, "code": "#(mapcat vector % %)", "user": "59089229e4b047aa04b1997c"}, {"problem": 32, "code": "(fn [x]\n  (loop [a  x\n         r '()]\n    (if (empty? a)\n      r\n      (recur (butlast a) (into r (repeat 2 (last a) )))\n    )\n  )\n)", "user": "59ac559ee4b00adcf69795d2"}, {"problem": 32, "code": "#(interleave % %)", "user": "59b05f0ee4b0e1f4e384c8cc"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "59a2d49de4b066c664927d30"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "59adec09e4b0e1f4e384c897"}, {"problem": 32, "code": "#(mapcat (fn [item]\n           (take 2 (repeat item)))\n         %1)", "user": "59a3f3dce4b066c664927d48"}, {"problem": 32, "code": "(fn [ss] (mapcat (fn [i] [i i]) ss))", "user": "571543bbe4b07c98581c3ad4"}, {"problem": 32, "code": "reduce (fn [l i] (conj (conj l i) i)) []", "user": "589e22fae4b02bd94d917e56"}, {"problem": 32, "code": "(fn duplicate\n  [coll] (reduce (fn [acc, elem] (concat acc [elem elem])) [] (seq coll)))", "user": "59b62f8de4b05c620303ca1f"}, {"problem": 32, "code": "(fn dup-seq\n  [xs]\n  (loop [ orig xs new []]\n\n    (if-not (empty? orig)\n      (recur (rest orig) (conj (conj new (first orig) ) (first orig)))\n      new)))", "user": "59afe4bae4b0e1f4e384c8c0"}, {"problem": 32, "code": "#(mapcat (fn [e] [e e]) %)", "user": "57481f1fe4b009280f9f2b82"}, {"problem": 32, "code": "#(interleave % %)", "user": "59b554cee4b05c620303ca0f"}, {"problem": 32, "code": "reduce (fn [acc item] (concat acc [item item])) []", "user": "59b8ee96e4b0a024fb6ae3c0"}, {"problem": 32, "code": "#(reduce (fn [x y] (conj x y y)) [] %)", "user": "59a9c22ae4b08cbb53654d75"}, {"problem": 32, "code": "#(interleave % %)", "user": "59bcbfd0e4b0a024fb6ae419"}, {"problem": 32, "code": "(fn [s]\n  (interleave s s))", "user": "598e7998e4b02b9968b84d34"}, {"problem": 32, "code": "#(sort(clojure.set/union % %))", "user": "59bac5c9e4b0a024fb6ae3ed"}, {"problem": 32, "code": "#(sort (into [] (concat % %)))", "user": "59bdf0eae4b0a024fb6ae42e"}, {"problem": 32, "code": "#(apply concat (map (fn [x] (repeat 2 x)) %))", "user": "597768d0e4b01722bebd4cee"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5998b0a1e4b07157cc8daaec"}, {"problem": 32, "code": "#(sort (into % %))", "user": "592fa9f8e4b072a2710fcfcb"}, {"problem": 32, "code": "(fn [s] (reverse (reduce (fn [new-coll x] (conj (conj new-coll x) x)) '() s)))", "user": "59be62d5e4b0a024fb6ae435"}, {"problem": 32, "code": "#(seq (reduce (fn [acc item] (-> acc (conj item) (conj item))) [] %))", "user": "59358f74e4b04f87174def52"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "59abd1d8e4b08cbb53654da4"}, {"problem": 32, "code": "(fn [coll] (reduce (fn [acc val] (into acc [val val])) [] coll))", "user": "58c7131be4b021aa9917ed6d"}, {"problem": 32, "code": "reduce #(conj % %2 %2) []", "user": "54c98ac0e4b045293a27f679"}, {"problem": 32, "code": "(fn dup [coll]\n  (loop [coll coll ret (empty coll)]\n    (if (not (seq coll)) ret \n      (recur (rest coll) \n             (let [fst (first coll)]\n        \t\t(conj ret fst fst)\n      \t\t )\n      )\n    )\n  )\n)", "user": "59b7120fe4b05c620303ca3b"}, {"problem": 32, "code": "(fn [input]\n\n  (loop [sequence (seq input) \n\n         result []]\n\n    (if (= 0 (count sequence))\n\n      result\n\n      (recur (rest sequence) (conj result (first sequence) (first sequence))))))", "user": "59c5093ce4b0a024fb6ae50c"}, {"problem": 32, "code": "(fn [coll]\n  (mapcat #(vector % %) coll))", "user": "54058af3e4b0addc1aec6669"}, {"problem": 32, "code": "reduce (fn [acc, x] (conj acc x x)) []", "user": "59c22fbae4b0a024fb6ae4a3"}, {"problem": 32, "code": "#(interleave % %)", "user": "59c94a69e4b0a024fb6ae576"}, {"problem": 32, "code": "#(reverse (reduce (fn [a b] (conj a b b)) '() %))", "user": "59c7c2cde4b0a024fb6ae54b"}, {"problem": 32, "code": "#(interleave % %)", "user": "59c734e3e4b0a024fb6ae53f"}, {"problem": 32, "code": "(fn [s]\n  (mapcat #(list % %) s))", "user": "59cb706ee4b0a024fb6ae5ba"}, {"problem": 32, "code": "(fn [xs] (reduce #(concat %1 [%2 %2]) [] xs))", "user": "59c3a7e9e4b0a024fb6ae4df"}, {"problem": 32, "code": "(fn [xs] (reduce\n          (fn [acc x] (conj acc x x))\n          []\n          xs))", "user": "59cc8d8de4b0a024fb6ae5d5"}, {"problem": 32, "code": "#(reduce concat (map (fn [a] [a a]) %))", "user": "594a7ed1e4b07ddc2dafae02"}, {"problem": 32, "code": "(fn [x] (reduce (fn [coll curr] (conj coll curr curr)) [] x))", "user": "59cf6fbce4b0ef0a1e9b5b6c"}, {"problem": 32, "code": "#(apply concat (map (fn [x] (list x x)) %))", "user": "59cf0d75e4b0ef0a1e9b5b5f"}, {"problem": 32, "code": "(fn [x] (interleave x x))", "user": "59d02bfbe4b0ef0a1e9b5b7b"}, {"problem": 32, "code": "mapcat #(vector % %)", "user": "59c8c9bee4b0a024fb6ae567"}, {"problem": 32, "code": "(fn [s]\n  (loop [a s\n         b '()]\n    (if-not (zero? (count a))\n      (recur (rest a) (conj b (first a) (first a)))\n      (reverse b)\n      )\n    )\n  )", "user": "595a3b41e4b066ee0a44afb7"}, {"problem": 32, "code": "(fn duplicator [seqn] \n  (reduce\n    (fn\n      [f s]\n      (conj f s s)\n    )\n    []\n    seqn\n  )  \n)", "user": "59b0e877e4b0e1f4e384c8d3"}, {"problem": 32, "code": "(fn [it]\r\n (loop [here it\r\n       there []]\r\n   (if (empty? here)\r\n     there\r\n     (let [this (first here)]\r\n     (recur\r\n      (rest here) \r\n      (conj there this this))))))", "user": "4ddc5d0a535d02782fcbea05"}, {"problem": 32, "code": "#(loop[result [] coll %]\n   (if (empty? coll) (reverse result)\n     (recur (cons (first coll) (cons (first coll) result)) (rest coll))))\n   \n   \n;(fn [coll]\n;  (reverse (reduce #(cons %2 (cons %2 %1)) '() coll)))", "user": "59c77511e4b0a024fb6ae545"}, {"problem": 32, "code": "(fn [x]\n  (reduce #(conj %1 %2 %2)\n          []\n          x)\n  )", "user": "55fd0d19e4b0f488688e067a"}, {"problem": 32, "code": ";; mapcat #(list % %)\n\n;; mapcat #(vector % %)\n\nmapcat #(vector % %)", "user": "57fe7d7ce4b0d3187e9009d0"}, {"problem": 32, "code": "(fn [elems] \n  ((comp #(reduce concat %) \n         #(map (fn [x] [x x]) %))\n  elems))", "user": "59d4d126e4b0ef0a1e9b5be9"}, {"problem": 32, "code": "#(reduce (fn [l e] (conj l e e)) [] %)", "user": "595131bee4b066ee0a44aea9"}, {"problem": 32, "code": "#(interleave % %)", "user": "57dfab73e4b0bd073c202468"}, {"problem": 32, "code": "(fn [coll]\n  (reduce (fn [result elem]\n            (concat result (repeat 2 elem)))\n          []\n          coll))", "user": "59d9186be4b0ef0a1e9b5c50"}, {"problem": 32, "code": "reduce (fn [m x] (-> m (conj x) (conj x))) []", "user": "59cf4013e4b0ef0a1e9b5b68"}, {"problem": 32, "code": "(fn[s] (reduce concat (map (partial repeat 2) s)))", "user": "58d96bdce4b0a4d5acaab638"}, {"problem": 32, "code": "#(interleave % %)", "user": "579f89d5e4b05302be0b72ff"}, {"problem": 32, "code": "(fn [c] \n  (interleave c c)\n  )", "user": "59d75e36e4b0ef0a1e9b5c32"}, {"problem": 32, "code": "#(reduce concat (for [x %] (repeat 2 x)))", "user": "59cdea74e4b0ef0a1e9b5b47"}, {"problem": 32, "code": "(fn [coll]\n   (reduce (fn [inicial number]\n             (conj inicial number number))\n           []\n           coll))", "user": "58a34442e4b02bd94d917ef2"}, {"problem": 32, "code": "#(interleave % %)", "user": "572de985e4b0cd1946bd0f7c"}, {"problem": 32, "code": "#(reduce (fn [o l] (into o (repeat 2 l))) [] %)", "user": "59ddae03e4b01968742fed65"}, {"problem": 32, "code": "#(apply concat (map (partial repeat 2) %))", "user": "59dc7b31e4b0ef0a1e9b5ca0"}, {"problem": 32, "code": "#(mapcat (fn [x] (list x x)) %1)", "user": "59da6480e4b0ef0a1e9b5c68"}, {"problem": 32, "code": "#(mapcat (fn [a] [a a]) %)", "user": "52d9e126e4b09f7907dd13b1"}, {"problem": 32, "code": "#(interleave % %)", "user": "59d3eb2fe4b0ef0a1e9b5bd7"}, {"problem": 32, "code": "(fn [coll]\n  (if (empty? coll)\n    '()\n    (loop [sq coll acc []]\n      (if (seq sq)\n        (recur (rest sq) (conj acc (first sq) (first sq)))\n        (seq acc)))))", "user": "59a31c55e4b066c664927d34"}, {"problem": 32, "code": "(fn [lst]\n  (mapcat #(repeat 2 %) lst))", "user": "59dfd369e4b08badc2a0c4dd"}, {"problem": 32, "code": "(fn dup\n  [lst]\n  (if (empty? lst)\n    ()\n    (cons (first lst)\n          (cons (first lst)\n                (dup (rest lst))))))", "user": "59e0111ae4b08badc2a0c4e4"}, {"problem": 32, "code": "(fn [lst] (reduce concat (map (fn [x] (repeat 2 x)) lst)))", "user": "59e18b9be4b08badc2a0c50f"}, {"problem": 32, "code": "(fn [coll]\n  (interleave coll coll))", "user": "550e0951e4b06e50f9beb163"}, {"problem": 32, "code": "(fn [xs]\n  (loop [xss xs\n         acc []]\n    (if (empty? xss)\n      acc\n      (let [x (first xss)]\n       (recur\n        (rest xss)\n        (conj acc x x))))))", "user": "57eaf869e4b0bfb2137f5b56"}, {"problem": 32, "code": "(fn\n [coll]\n (loop [x (first coll)\n        xs (rest coll)\n        result []]\n   (if (= nil x)\n     result\n     (let [a (conj result x)\n           b (conj a x)\n           head (first xs)\n           tail (rest xs)]\n       (recur head tail b)))))", "user": "59d77634e4b0ef0a1e9b5c34"}, {"problem": 32, "code": "(fn duplicate [col]\n    (reverse (reduce #(conj (conj %1 %2) %2) '() col)))", "user": "59aeff12e4b0e1f4e384c8af"}, {"problem": 32, "code": "(fn duplicate [lst]\n  (mapcat #(repeat 2 %) lst))", "user": "59e12c94e4b08badc2a0c509"}, {"problem": 32, "code": "(fn f [lst]\n  (let [f*\n        (fn [acc lst*]\n          (conj acc lst* lst*))]\n(reduce f* [] lst)))", "user": "59e55cc8e4b08badc2a0c555"}, {"problem": 32, "code": "#(interleave % %)", "user": "59e0f38ae4b08badc2a0c500"}, {"problem": 32, "code": "(fn [items] (mapcat #(take 2 (repeat %)) items))", "user": "59e48db0e4b08badc2a0c53e"}, {"problem": 32, "code": "reduce (fn [c i] (conj c i i)) []", "user": "59c8ffe6e4b0a024fb6ae56c"}, {"problem": 32, "code": "(fn [lst]\n  (interleave lst lst))", "user": "59deba46e4b01968742fed7f"}, {"problem": 32, "code": "#(mapcat (fn [x] (list x x)) %)", "user": "59dd38a8e4b0a0ac046f2503"}, {"problem": 32, "code": "#(mapcat (fn [x] (list x x)) %)", "user": "580e7761e4b0849f6811b753"}, {"problem": 32, "code": "(fn [lista]\n   (mapcat (fn [elementoLista] (repeat 2 elementoLista)) lista))", "user": "59e63a2ce4b08badc2a0c569"}, {"problem": 32, "code": "(fn \n [x]\n  (reverse (reduce (fn [x y]\n            (conj (conj x y) y))\n          (list)\n          x)))", "user": "59e4fc25e4b08badc2a0c54f"}, {"problem": 32, "code": "(fn dup \n  [lst]\n  (mapcat #(repeat 2 %) lst)\n  )", "user": "59e56c75e4b08badc2a0c556"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "59e62655e4b08badc2a0c568"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "59d6cc05e4b0ef0a1e9b5c25"}, {"problem": 32, "code": "(fn pack\n  [lst]\n  (into [] (mapcat #(list % %) lst)))", "user": "59e778aae4b0249b72820716"}, {"problem": 32, "code": "reduce \n                                    (fn [col element] \n                                        (conj col element element)) []", "user": "5957cc41e4b066ee0a44af76"}, {"problem": 32, "code": "mapcat (partial repeat 2)", "user": "59d631d4e4b0ef0a1e9b5c09"}, {"problem": 32, "code": "(fn my-dup\n  [lst]\n  (mapcat #(list % %) lst) )", "user": "59dd387be4b0a0ac046f2502"}, {"problem": 32, "code": "(fn [lst]\n  (if (empty? lst)\n    ()\n    (mapcat #(repeat 2 %) lst)\n    )\n   )", "user": "59e4e3cbe4b08badc2a0c54a"}, {"problem": 32, "code": "(fn Duplicate-a-Sequence\n  [lst]\n  (if (empty? lst)\n    ()\n    (cons (first lst)\n          (cons (first lst)\n                (Duplicate-a-Sequence (rest lst))))))", "user": "59e14ee3e4b08badc2a0c50c"}, {"problem": 32, "code": "(fn [s] (mapcat identity\n    \t(map (fn [x] (cons x (cons x '()))) s)))", "user": "59e8041be4b0249b72820721"}, {"problem": 32, "code": "(fn duplicateSequence\n  [list]\n  (mapcat #(repeat 2 %) list))", "user": "59dd3930e4b0a0ac046f2504"}, {"problem": 32, "code": "(fn dup\n  [lst]\n  (if (empty? lst)\n    ()\n    (cons (first lst) (cons (first lst) (dup (rest lst))))))", "user": "59e8fef3e4b0249b72820743"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "59e95cafe4b0249b7282074b"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "59e9f03be4b0249b72820752"}, {"problem": 32, "code": "(fn [s] (mapcat identity (map (fn [x] [x x]) s)))", "user": "59e8c89de4b0249b72820737"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "59ea287ee4b0249b72820760"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "59ea0944e4b0249b72820758"}, {"problem": 32, "code": "(fn duplicate \n  [lst]\n  (reduce concat (map #(take 2 (repeat %)) lst)))", "user": "59e68254e4b0249b728206fc"}, {"problem": 32, "code": "(fn [seq]\n  (mapcat (fn [a b] [a b]) seq seq))", "user": "5984e7dee4b021a7a535fe43"}, {"problem": 32, "code": "#(mapcat list % %)", "user": "59eb63e3e4b0249b7282077c"}, {"problem": 32, "code": "#(loop [col % result []]\n     (if(empty? col)\n     result\n     (let [colFirst (first col)]\n       (recur (rest col) (conj result colFirst colFirst)))))", "user": "59ea85e4e4b0249b72820767"}, {"problem": 32, "code": "(fn dup [lst]\n  (loop [lst lst\n         result ()]\n    (if (empty? lst) (reverse result)\n                     (recur (next lst) (cons (first lst)(cons (first lst)result))))))", "user": "59dd387ae4b0a0ac046f2501"}, {"problem": 32, "code": "(fn [lst] (reduce #(apply conj %1 (list %2 %2)) [] lst))", "user": "59e8cd8be4b0249b72820739"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "59d87190e4b0ef0a1e9b5c42"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "59ed01ede4b0249b7282079a"}, {"problem": 32, "code": "(fn d[a] (if (not-empty a)(cons (first a) (cons (first a) (d (rest a)))) []))", "user": "59e8bb43e4b0249b72820735"}, {"problem": 32, "code": "(fn duplicator [xs]\n  (reduce (fn [result x]\n              (conj result x x))\n          []\n          xs)\n  )", "user": "59e0f839e4b08badc2a0c502"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "593c1e3be4b069cdc2982b86"}, {"problem": 32, "code": "(fn fuck [sq]\n  (loop [raw-seq sq pseq '() index 0 ]\n    (cond\n      (>= index (count raw-seq)) pseq\n      :else (recur sq (concat pseq [ (nth raw-seq index)(nth raw-seq index) ]) (+ index 1) ))\n    ))", "user": "5831846ae4b051871117c02c"}, {"problem": 32, "code": "(fn dup-elems [[x & xs]]\n  (concat [x x] (when (seq xs) (dup-elems xs))))", "user": "59ee6801e4b0966464fe6a1f"}, {"problem": 32, "code": "#(reduce (fn [coll next] (conj coll next next)) [] %)", "user": "59908f3fe4b0866487ed0d50"}, {"problem": 32, "code": "#(interleave % %)", "user": "59f2af64e4b0966464fe6a87"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "59ef6cfae4b0966464fe6a32"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "59c76402e4b0a024fb6ae542"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "590aaa78e4b047aa04b199c0"}, {"problem": 32, "code": "(fn [args]\n    (mapcat (fn [x] [x x]) args)\n    )", "user": "5683fcafe4b0945ebc182aa8"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "59ba2ea0e4b0a024fb6ae3e1"}, {"problem": 32, "code": "(fn duplicate [s]\n  (mapcat #(list % %) s)\n  )", "user": "59f78b49e4b0ca45a743a30e"}, {"problem": 32, "code": "#(interleave % %)", "user": "59df2b8ee4b01968742fed87"}, {"problem": 32, "code": "; (fn [xs] (sort (into xs xs )))\nreduce #(conj %1 %2 %2) []", "user": "59ee2284e4b0966464fe6a0f"}, {"problem": 32, "code": "(fn [y] (apply concat (map (fn [x] (repeat 2 x)) y)))", "user": "59f192e0e4b0966464fe6a5e"}, {"problem": 32, "code": "(fn [z] \n  (reduce \n   (fn [x y] (conj (conj x y) y))\n   [] \n   z))", "user": "5628f33ce4b00e49c7cb47f3"}, {"problem": 32, "code": "#(->> % (mapcat (fn [x] [x x])))", "user": "59f8b925e4b0ca45a743a327"}, {"problem": 32, "code": "#(apply concat (map (fn [x] [x x]) %))", "user": "59f90e6ae4b0ca45a743a337"}, {"problem": 32, "code": "(fn [s]\n   (interleave s s)\n  )", "user": "56f2611fe4b04a395b9a04a2"}, {"problem": 32, "code": "#(reduce (fn [acc _] (concat acc (repeat 2 _))) () %)", "user": "59f043d0e4b0966464fe6a3d"}, {"problem": 32, "code": "(fn dup\n  [coll]\n  (apply concat (map #(vector % %) coll)))", "user": "59f44189e4b0966464fe6aab"}, {"problem": 32, "code": "#_(fn [s] (mapcat #(vector % %) s))\n\nreduce\n(fn [acc e]\n  (conj acc e e))\n[]\n\n;; more elegant solution would be:\n;; #(interleave % %)", "user": "59a080e3e4b0871e7608b837"}, {"problem": 32, "code": "(fn duplicate\n    [coll]\n    (reduce (fn [processed current]\n              (conj processed current current)\n              )\n            []\n            coll)\n    )", "user": "59fa5fe0e4b0ca45a743a35f"}, {"problem": 32, "code": "(partial reduce\n         (fn [memo el] (-> memo (conj el) (conj el)))\n         [])", "user": "59fa241ee4b0ca45a743a358"}, {"problem": 32, "code": "#(loop [x % y '()]\n   (if (empty? x) y\n       (recur (rest x) (concat y [(first x) (first x)]))))", "user": "59fea630e4b01bb0ae8afd10"}, {"problem": 32, "code": "#(interleave % %)", "user": "5645a7f9e4b0284900eef609"}, {"problem": 32, "code": "(fn my-dup [xs]\n  (vec (mapcat (fn [x] [x x]) xs)))", "user": "59f7f55de4b0ca45a743a313"}, {"problem": 32, "code": ";reduce #(into %1 [%2 %2]) []\n#(interleave % %)", "user": "59f590ade4b0966464fe6ac1"}, {"problem": 32, "code": "(fn [col]\n  (reduce concat (map #(take 2 (repeat %)) col)))", "user": "59fa7fb0e4b0ca45a743a366"}, {"problem": 32, "code": "(fn dupe [xs] (mapcat #(vector % %) xs))", "user": "58182480e4b0c0e9c07b83a7"}, {"problem": 32, "code": ";#(interleave % %)\n#(mapcat (fn [i] (repeat 2 i)) %)", "user": "59e5b6a1e4b08badc2a0c55b"}, {"problem": 32, "code": "mapcat (fn [x] [x x])", "user": "5a01d8f6e4b01bb0ae8afd53"}, {"problem": 32, "code": "reduce #(conj (conj %1 %2) %2) []", "user": "59fcc31fe4b01bb0ae8afcef"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "56fcd9dfe4b08d47c977819e"}, {"problem": 32, "code": "#(sort (reduce conj % %))", "user": "5a022949e4b01bb0ae8afd60"}, {"problem": 32, "code": "#(reduce (fn [dups el] (conj (conj dups el) el)) [] %)", "user": "588fd085e4b00487982d51c0"}, {"problem": 32, "code": "#(interleave % %)", "user": "529735cbe4b02ebb4ef7503c"}, {"problem": 32, "code": "#(reduce (fn [x y] (concat x [y y])) [] %)", "user": "5a04e923e4b01bb0ae8afda9"}, {"problem": 32, "code": "mapcat #(vector % %)", "user": "5a065388e4b01bb0ae8afdcb"}, {"problem": 32, "code": "(fn [x] (mapcat #(repeat 2 %) x))", "user": "59fa5773e4b0ca45a743a35e"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "59f15e20e4b0966464fe6a5a"}, {"problem": 32, "code": "(partial mapcat #(vector % %))", "user": "59777e42e4b01722bebd4cf0"}, {"problem": 32, "code": "#(-> % (concat %) sort)", "user": "59f78761e4b0966464fe6af5"}, {"problem": 32, "code": "#(reduce (fn [dup elm] (conj dup elm elm)) [] %)", "user": "59f9c111e4b0ca45a743a349"}, {"problem": 32, "code": "#(interleave % %)", "user": "50da34e4e4b0f31830755b3c"}, {"problem": 32, "code": "#(\n    loop [a % res []] (\n                  if (empty? a)\n                  res\n                  (do\n                    (recur (rest a) (conj res (first a) (first a)))))\n    )", "user": "59f58103e4b0966464fe6ac0"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5a080bdde4b01bb0ae8afde9"}, {"problem": 32, "code": "(fn [x] (sort(into x x)) )", "user": "5a075e73e4b01bb0ae8afdd9"}, {"problem": 32, "code": "#(interleave % %)", "user": "59f820d9e4b0ca45a743a316"}, {"problem": 32, "code": "mapcat #(vector % %)", "user": "5a00cb31e4b01bb0ae8afd36"}, {"problem": 32, "code": "(fn [x]\n   (if (coll? (first x))\n     (apply concat (map #(conj (list %) %) x))\n     (flatten (map #(conj (list %) %) x))\n     )\n   )", "user": "5a0a3473e4b0eab8c0448941"}, {"problem": 32, "code": "#(sort (concat %1 %1))", "user": "59c3a64ae4b0a024fb6ae4de"}, {"problem": 32, "code": "(fn [coll] (mapcat #(list % %) coll))", "user": "5a062e07e4b01bb0ae8afdc5"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "5a07fefee4b01bb0ae8afde5"}, {"problem": 32, "code": "(fn [coll]\n  (loop [[x & more] coll\n         acc []]\n    (if x\n      (recur more (conj (conj acc x) x))\n      (apply list acc))))", "user": "580a0783e4b0a837a8b30d2c"}, {"problem": 32, "code": "#(interleave % %)", "user": "5a03d246e4b01bb0ae8afd8c"}, {"problem": 32, "code": "(fn [s] (reverse (reduce (fn [r x] (conj (conj r x) x)) () s)))", "user": "5a0ba67be4b04bbd27e6d997"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5a0a25fce4b0eab8c044893d"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "59da327de4b0ef0a1e9b5c63"}, {"problem": 32, "code": "#(interleave % %)", "user": "58d1c1b1e4b03c36ff7e58ef"}, {"problem": 32, "code": "#(interleave % %)", "user": "5a06c154e4b01bb0ae8afdce"}, {"problem": 32, "code": "(fn [col]\n  (mapcat #(take 2 (repeat %)) col ))", "user": "55ec879ae4b0121d4835fdc8"}, {"problem": 32, "code": "#(interleave % %)", "user": "5a0a04eee4b0eab8c0448935"}, {"problem": 32, "code": "(fn [list] \n  (reduce (fn [result x] (conj result x x)) [] list))", "user": "5a12dea3e4b04bbd27e6da44"}, {"problem": 32, "code": "(fn [s]\n  (interleave s s))", "user": "54497569e4b032a45b8693d2"}, {"problem": 32, "code": "(fn [coll] (mapcat #(repeat 2 %) coll))", "user": "5a135573e4b0ff51aa4b3180"}, {"problem": 32, "code": "#( interleave % %)", "user": "5a14a48fe4b0ff51aa4b31a1"}, {"problem": 32, "code": "#(interleave % %)", "user": "5830377ee4b051871117c004"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "59edc518e4b0966464fe6a08"}, {"problem": 32, "code": "#(reverse (reduce (fn[x y](conj (conj x y) y)) () %))", "user": "55129667e4b06e50f9beb1ac"}, {"problem": 32, "code": "(fn [s] (reduce #(conj % %2 %2) [] s))", "user": "532ae82be4b09d4e7a9b552b"}, {"problem": 32, "code": "(fn dup [l] \n   (-> l\n   \t((fn d [coll acc] \n      (cond \n        (empty? coll) acc\n        :else (d (rest coll) (conj acc (first coll) (first coll))))) '())\n   \t(reverse)))", "user": "5a14228fe4b0ff51aa4b3193"}, {"problem": 32, "code": "#(interleave % %)", "user": "5658c357e4b00d3155796111"}, {"problem": 32, "code": "(fn [aseq] (reduce #(conj %1 %2 %2) [] aseq))", "user": "5a0ce1a5e4b04bbd27e6d9b7"}, {"problem": 32, "code": "(fn [c]\n  (if (empty? c)\n    []\n    (apply concat [] (map (fn [e] [e e]) c))))", "user": "5a188be3e4b0ff51aa4b31ec"}, {"problem": 32, "code": "#(seq (reduce (fn [a b]\n           (conj a b b)) [] %))", "user": "59fd069ae4b01bb0ae8afcf4"}, {"problem": 32, "code": "(fn [X] (apply concat (map #(list % %) X)))", "user": "5a05a807e4b01bb0ae8afdb8"}, {"problem": 32, "code": "(fn dupe [input] \n  (reduce \n    #(conj %1 %2 %2) \n    []\n    input))", "user": "5a0ef454e4b04bbd27e6d9fa"}, {"problem": 32, "code": "(fn [col]\n  (reduce\n   (fn [prev cur]\n      (concat prev [cur] [cur]))\n   []\n   col))", "user": "5a144fd8e4b0ff51aa4b319a"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "5a18488ee4b0ff51aa4b31e5"}, {"problem": 32, "code": "#(sort (mapcat identity [% %]))", "user": "59135c11e4b0163c97b36f02"}, {"problem": 32, "code": "(fn [s] \n  (reduce #(into %1 (take 2 (repeat %2))) [] s))", "user": "5054d243e4b0b1b9d1860eb5"}, {"problem": 32, "code": "#(reduce (fn [x y] (concat x (repeat 2 y))) [] %)", "user": "5a16da30e4b0ff51aa4b31cc"}, {"problem": 32, "code": "(fn dup [seqq] (if (empty? seqq) '() (cons (first seqq) (cons (first seqq) (dup (rest seqq))))))", "user": "5a18f868e4b0ff51aa4b31f7"}, {"problem": 32, "code": "(fn dup [l]\n  (if (empty? l)\n    '()\n    (conj (dup (rest l)) (first l) (first l))))", "user": "5a1e93bee4b0ff51aa4b3270"}, {"problem": 32, "code": "(fn [v] (apply concat (map #(list %1 %1) v)))", "user": "57a499dae4b0a966079561e6"}, {"problem": 32, "code": "mapcat (partial repeat 2)", "user": "5112500ee4b0350614f07a72"}, {"problem": 32, "code": "#(interleave % %)", "user": "59b69bbee4b05c620303ca2a"}, {"problem": 32, "code": "(fn [x] (apply concat (map #(take 2 (repeat %)) x)))", "user": "5a14959de4b0ff51aa4b31a0"}, {"problem": 32, "code": "(fn [x] (interleave x x))", "user": "59ff9424e4b01bb0ae8afd24"}, {"problem": 32, "code": "(fn [l]\n  (reduce (fn [x y] (conj x y y)) [] l))", "user": "5a1ef970e4b0ff51aa4b327d"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "59690e79e4b069c0a1a197e0"}, {"problem": 32, "code": "(fn [s]\n  (reduce #(conj %1 %2 %2) [] s))", "user": "59f75327e4b0966464fe6aec"}, {"problem": 32, "code": "(partial mapcat #(conj [] % %))", "user": "5a21d34ce4b0ff51aa4b32b9"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5a214798e4b0ff51aa4b32aa"}, {"problem": 32, "code": "(fn [formal]\n  (loop [input formal\n         output ()]\n    (if (empty? input)\n      output\n      (recur (rest input) (concat output (list (first input)) (list (first input))))\n             )))", "user": "5a2185a4e4b0ff51aa4b32b0"}, {"problem": 32, "code": "#(apply concat (map (fn [x] [x x]) %))", "user": "5a208195e4b0ff51aa4b32a3"}, {"problem": 32, "code": "(fn [x] (apply concat (map (fn [e] [e e]) x)))", "user": "5a1dd5b4e4b0ff51aa4b3260"}, {"problem": 32, "code": "#(interleave % %)", "user": "5a1149ace4b04bbd27e6da26"}, {"problem": 32, "code": "#(interleave % %)", "user": "5a067f26e4b01bb0ae8afdcc"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "5a249cfee4b07f18be40aa12"}, {"problem": 32, "code": "mapcat (partial repeat 2)", "user": "5a250b86e4b07f18be40aa19"}, {"problem": 32, "code": "(fn [x]\n  (loop [s x\n         result []]\n    (if (empty? s)\n      result\n      (recur (rest s) (conj result (first s) (first s))))))", "user": "5a23cabce4b0ff51aa4b32df"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "5a19d181e4b0ff51aa4b3207"}, {"problem": 32, "code": "(fn [x] (mapcat (fn [y] (take 2 (repeat y))) x))", "user": "5a21c3f9e4b0ff51aa4b32b7"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5a2960fde4b07f18be40aa78"}, {"problem": 32, "code": "(fn [s] (reduce #(conj %1 %2 %2) [] s))", "user": "56ef077ae4b04a395b9a0459"}, {"problem": 32, "code": "mapcat #(conj (list %) %)", "user": "5a2185c6e4b0ff51aa4b32b1"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5a2834dfe4b07f18be40aa64"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "59cd13d5e4b0ef0a1e9b5b32"}, {"problem": 32, "code": "(fn [l]\n  (loop [l l result '()]\n    (if (empty? l)\n      result\n      (recur (rest l) (concat result [(first l) (first l)] )))))", "user": "5a2df4a0e4b09cafd31c7f74"}, {"problem": 32, "code": "(fn [x]\n  ( mapcat #(repeat 2 % ) x))", "user": "5a1c8c26e4b0ff51aa4b3247"}, {"problem": 32, "code": "(fn [s] (mapcat #(repeat 2 %) s))", "user": "5a2e39fce4b09cafd31c7f77"}, {"problem": 32, "code": "(fn [s] (apply concat (map (fn [a] [a a]) s) ))", "user": "59a5b3f4e4b066c664927d69"}, {"problem": 32, "code": "#(sort (concat % %))", "user": "5a285a38e4b07f18be40aa67"}, {"problem": 32, "code": "#(for [a %\n        b [1 2]]\n    a \n    )", "user": "5a1bec89e4b0ff51aa4b322f"}, {"problem": 32, "code": "(fn [x] \n  (interleave x x))", "user": "5a29ee57e4b09cafd31c7f2b"}, {"problem": 32, "code": "(fn [s] (mapcat #(list % %) s))", "user": "583048d9e4b051871117c007"}, {"problem": 32, "code": "(fn [l] \n    (loop [x l y nil]\n          (if (empty? x)\n              (reverse y)\n              (recur (rest x) (cons (first x) (cons (first x) y))))))", "user": "5a34f342e4b0ddc586f153d1"}, {"problem": 32, "code": "(fn [v] (apply concat (map #(vector % %) v)))", "user": "5a2cfa85e4b09cafd31c7f61"}, {"problem": 32, "code": "(fn [xs]\n    (loop [acc [] ys xs]\n       (if (empty? ys)\n            acc\n            (\n              recur  (concat acc (vector (first ys) (first ys)) )\n                     (rest ys)\n            )\n)))", "user": "55d7312ee4b0e31453f64a9f"}, {"problem": 32, "code": "(fn [coll] (reduce concat (map #(repeat 2 %) coll)))", "user": "585c16c3e4b0f14aab7c877d"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5a1679d9e4b0ff51aa4b31ca"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5a34de78e4b0ddc586f153d0"}, {"problem": 32, "code": "#(sort (reduce into [% %]))", "user": "510d2a99e4b078ea71921130"}, {"problem": 32, "code": "(fn\n  [l]\n  (mapcat #(list % %) l))", "user": "5a3b5cfde4b001c08efc0cd4"}, {"problem": 32, "code": "#(reduce (fn [acc x] (conj acc x x)) [] %)", "user": "5773f3a9e4b0979f896515f2"}, {"problem": 32, "code": "(partial reduce #(conj %1 %2 %2) [])", "user": "52513bf1e4b0541d1855b86e"}, {"problem": 32, "code": "#(apply concat (map vector % %))", "user": "5a3d7afae4b0447ef91cc5a6"}, {"problem": 32, "code": "#(interleave % %)", "user": "59dfb8dbe4b08badc2a0c4da"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "5a3c5c54e4b001c08efc0ce3"}, {"problem": 32, "code": "(fn [col]\n  (reduce concat (map (partial repeat 2) col)))", "user": "51fa90aae4b0f1313d4689e0"}, {"problem": 32, "code": "#(interleave % %)", "user": "5a3d33b3e4b001c08efc0cef"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "5a011305e4b01bb0ae8afd40"}, {"problem": 32, "code": "reduce #(concat %1 [%2 %2]) []", "user": "5a257747e4b07f18be40aa1f"}, {"problem": 32, "code": "#(reduce (fn [a b] (conj a b b)) [] %)", "user": "52281e1ee4b0186687e23a69"}, {"problem": 32, "code": "mapcat (fn [x] [x x])", "user": "5a3ece62e4b0447ef91cc5b9"}, {"problem": 32, "code": "reduce (fn [coll x] (into coll [x x])) []", "user": "58a6806ee4b01a0c0b23292f"}, {"problem": 32, "code": "(fn [x] (reduce #(conj %1 %2 %2) [] x))", "user": "5a401a7de4b0447ef91cc5c5"}, {"problem": 32, "code": "#(reduce concat (for [x %] [x x]))", "user": "5a342188e4b0ddc586f153bd"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "5a40eb64e4b0447ef91cc5d8"}, {"problem": 32, "code": "(fn [x] (apply concat (map #(repeat 2 %) x)))", "user": "5a42dbabe4b0447ef91cc5fc"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "5a3e0e44e4b0447ef91cc5ad"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "59f4c9c7e4b0966464fe6ab7"}, {"problem": 32, "code": "#(interleave % %)", "user": "5a43347ee4b0447ef91cc603"}, {"problem": 32, "code": "(fn duplicate\n  [coll]\n  (reduce (fn\n            [acc current]\n            (concat acc [current current])\n)\n          '() coll))", "user": "5a429e40e4b0447ef91cc5f9"}, {"problem": 32, "code": "#(interleave % %)", "user": "5a0e9a54e4b04bbd27e6d9ef"}, {"problem": 32, "code": "(fn [l]\n  (let [t (transient [])]\n    (doseq [v l]\n      (conj! t v)\n      (conj! t v))\n    (persistent! t))\n  )", "user": "558843dae4b059ccff29b1f3"}, {"problem": 32, "code": "(fn [L]\n  (reverse (reduce (fn [r x] (cons x (cons x r))) '() L)))", "user": "5a409d77e4b0447ef91cc5d3"}, {"problem": 32, "code": "(fn dupe [coll]\n  (loop [coll coll\n         acc ()]\n    (if (empty? coll)\n      (reverse acc)\n      (recur (rest coll) (into acc (list (first coll) (first coll)))))))", "user": "5a346d73e4b0ddc586f153c8"}, {"problem": 32, "code": "(fn dup-elements\n  [some-seq]\n  (reverse (into () (reduce\n    (fn\n      [new-seq item]\n      (conj new-seq item item))\n    []\n    some-seq))))", "user": "5a35d515e4b0ddc586f153e1"}, {"problem": 32, "code": "(fn [s]\n  (loop [s s, res []]\n    (if (seq s)\n      (recur (rest s) (conj res (first s) (first s)))\n      res)))", "user": "5a481e05e4b05d388ecb6b64"}, {"problem": 32, "code": "(fn [sequence]\n  (interleave sequence sequence)\n  )", "user": "5a47ce68e4b05d388ecb6b5d"}, {"problem": 32, "code": "(fn [coll]\n  (loop [c coll\n         dc []]\n    (if (empty? c)\n      dc\n      (recur (rest c) (conj dc (first c) (first c))))))", "user": "5a47423be4b05d388ecb6b52"}, {"problem": 32, "code": "#(reduce (fn [acc x] (-> acc (conj x) (conj x))) [] %)", "user": "5a4993c0e4b05d388ecb6b71"}, {"problem": 32, "code": "#(interleave % %)", "user": "5a4443cae4b0447ef91cc60f"}, {"problem": 32, "code": "(fn [s]\n  (reduce #(conj (conj %1 %2) %2)\n          []\n          s))", "user": "5a37b6dbe4b001c08efc0c88"}, {"problem": 32, "code": "#((comp interleave) %1 %1)", "user": "5a2a5239e4b09cafd31c7f30"}, {"problem": 32, "code": "#(->> % reverse (reduce (fn [a e] (->> a (cons e) (cons e))) nil))", "user": "5a4de614e4b05d388ecb6bb1"}, {"problem": 32, "code": "#(apply concat ((fn [coll] \n  (map (fn [x] [x x]) coll)) %))", "user": "5a1c3c11e4b0ff51aa4b323d"}, {"problem": 32, "code": "#(mapcat (fn [x] (repeat 2 x)) %)", "user": "5a4e1c81e4b05d388ecb6bb6"}, {"problem": 32, "code": "(fn [data] (sort (concat data data)))", "user": "5a4ec4f0e4b05d388ecb6bc2"}, {"problem": 32, "code": "(fn [coll] (mapcat #(repeat 2 %) coll))", "user": "5182de5ce4b0353c468deb74"}, {"problem": 32, "code": "#(interleave % %)", "user": "5a512929e4b05d388ecb6be2"}, {"problem": 32, "code": "(fn dup\n  [myseq]\n  (loop [tmpseq myseq result []]\n    (if (empty? tmpseq) result\n                        (let [a (first tmpseq)]\n                          (recur (rest tmpseq) (conj result a a))))\n    ))", "user": "5a4cbba1e4b05d388ecb6b98"}, {"problem": 32, "code": "#(interleave % %)", "user": "5a4208dde4b0447ef91cc5ee"}, {"problem": 32, "code": "#(apply concat (map (fn [e] [e e]) %))", "user": "5a535572e4b05d388ecb6c0b"}, {"problem": 32, "code": "reduce (fn [x y] (concat x [y y])) '()", "user": "5a4d656fe4b05d388ecb6ba9"}, {"problem": 32, "code": "#(interleave % %)", "user": "5a40bd29e4b0447ef91cc5d6"}, {"problem": 32, "code": "#(interleave % %)", "user": "5a546344e4b05d388ecb6c27"}, {"problem": 32, "code": "(fn [s]\n  (mapcat #(list % %) s))", "user": "5a4caa20e4b05d388ecb6b94"}, {"problem": 32, "code": "(fn [x]  (reduce #(conj %1 %2 %2) [] x))", "user": "5a533cc0e4b05d388ecb6c09"}, {"problem": 32, "code": "#(interleave % %)", "user": "5a534241e4b05d388ecb6c0a"}, {"problem": 32, "code": "mapcat (fn [e] [e e])", "user": "5a527beee4b05d388ecb6bfe"}, {"problem": 32, "code": "(fn [xs] (reduce\n          concat\n          []\n          (map (fn [x] [x x]) xs)\n          )\n  )", "user": "5a55114ae4b05d388ecb6c37"}, {"problem": 32, "code": "(fn [x] (reverse (reduce into (map #(list % %) x))))", "user": "5a3c2a08e4b001c08efc0cdf"}, {"problem": 32, "code": "#(interleave % %)", "user": "58d4d864e4b03c36ff7e594c"}, {"problem": 32, "code": "(fn [s] \n  (reduce #(conj %1 %2 %2) [] s)\n)", "user": "5a424954e4b0447ef91cc5f0"}, {"problem": 32, "code": "(fn [xs] (apply concat (map (fn [x] [x x]) xs)))", "user": "552d9b31e4b076ab5578f7eb"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "5a566e8fe4b05d388ecb6c51"}, {"problem": 32, "code": "(fn [coll]\n  (interleave coll coll))", "user": "565654dae4b0f9d632dd849f"}, {"problem": 32, "code": "(fn [in] (reverse (reduce (fn [x y] (conj x y y)) '() in)))", "user": "5a244240e4b0ff51aa4b32e9"}, {"problem": 32, "code": "#(interleave % %)", "user": "53f053ebe4b0742d9025b0d3"}, {"problem": 32, "code": "(fn [s] (apply concat (map #(list % %) s)))", "user": "5a591d04e4b05d388ecb6c90"}, {"problem": 32, "code": "reduce (fn [acc x] (conj acc x x)) []", "user": "5a5800e1e4b05d388ecb6c76"}, {"problem": 32, "code": "#(apply interleave (repeat 2 %))", "user": "5a51e029e4b05d388ecb6bf0"}, {"problem": 32, "code": "#(reduce concat (map vector % %))", "user": "5a584ca2e4b05d388ecb6c7d"}, {"problem": 32, "code": "(fn [sq] (reduce into (map #(seq [% %]) (reverse sq))))", "user": "5a388675e4b001c08efc0ca2"}, {"problem": 32, "code": "reduce (fn [m k] (conj m k k)) []", "user": "5a5894d9e4b05d388ecb6c81"}, {"problem": 32, "code": "(fn [col]\n  (loop [col col acc '()]\n    (if (empty? col)\n      acc\n      (recur (rest col)\n             (concat acc\n                  \t(repeat 2 (first col)))))))", "user": "587b8bdee4b01531a375eaff"}, {"problem": 32, "code": "(fn\n  [coll]\n  \n  (loop [dest [] src coll]\n    (if (empty? src)\n      dest\n      (recur\n       (let [x (first src)]\n         (into dest [x x]))\n       (rest src)))))", "user": "5a5be4a6e4b0512ff01cd910"}, {"problem": 32, "code": "(fn duplicate-seq [inc-list] (reduce concat [] (map (fn [elem] (seq [elem, elem])) inc-list)))", "user": "5a4dbc97e4b05d388ecb6bae"}, {"problem": 32, "code": "#(interleave % %)", "user": "5a536cf2e4b05d388ecb6c10"}, {"problem": 32, "code": "(fn [s]\n    (mapcat #(vector % %) s))", "user": "5a5d0726e4b0512ff01cd91b"}, {"problem": 32, "code": "(partial mapcat #(vector % %))", "user": "51dafedee4b09f6bc204eee2"}, {"problem": 32, "code": "(fn [coll] (mapcat list coll coll))", "user": "5a5dbe9de4b0512ff01cd92b"}, {"problem": 32, "code": "#(reduce (fn [acc x] (conj acc x x)) [] %)", "user": "5a5be1ece4b0512ff01cd90f"}, {"problem": 32, "code": "(fn dup-elements [coll]\n  (interleave coll coll))", "user": "5a58bfd0e4b05d388ecb6c84"}, {"problem": 32, "code": "(fn [xs](reverse (reduce #(cons %2 (cons %2 %1 )) [] xs)))", "user": "56fd058be4b08d47c97781a1"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "5a52f2cbe4b05d388ecb6c06"}, {"problem": 32, "code": "(fn dupe [s]\n    (interleave s s))", "user": "5974d2ede4b01722bebd4cb6"}, {"problem": 32, "code": "(fn [x] \n  (mapcat #(vector % %) x))", "user": "5a621702e4b0512ff01cd983"}, {"problem": 32, "code": "#(mapcat (fn [a] [a a]) %)", "user": "5a624129e4b0512ff01cd987"}, {"problem": 32, "code": "#(->> (for [x %]\n         [x x])\n      (apply concat))", "user": "5a36e788e4b0ddc586f153ec"}, {"problem": 32, "code": "(fn [x] (mapcat #(list % %) x))", "user": "5a5a6347e4b05d388ecb6ca9"}, {"problem": 32, "code": "(fn duplicate [[element & rest-ele]]\n  (let [collection (list element element)] (if (empty? rest-ele)\n    collection\n    (concat collection (duplicate rest-ele)))))", "user": "5a59a76fe4b05d388ecb6c98"}, {"problem": 32, "code": "#(interleave % %)", "user": "5a66e81ee4b0512ff01cd9d3"}, {"problem": 32, "code": "(fn d [[a & l]]\n  (if (nil? a) l\n    (list* a a (d l))))", "user": "5a68826ee4b0512ff01cd9f8"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "55952410e4b0c79f6e1db962"}, {"problem": 32, "code": "(fn [x]\n    (loop [out [] i 0]\n          (if (= (count x) i) out\n              (recur (concat out (repeat 2 (x i))) (inc i)))))", "user": "58f5b58ae4b0438e51c2cedc"}, {"problem": 32, "code": "(fn dup\n  [sqc]\n  (if (seq sqc)\n    (concat [(first sqc) (first sqc)] (dup (rest sqc)))\n    '()))", "user": "5a6a32b6e4b0512ff01cda22"}, {"problem": 32, "code": "#(reverse (reduce (fn [res e] (conj (conj res e) e)) '() %))", "user": "5a6b9b95e4b0512ff01cda40"}, {"problem": 32, "code": "(fn [coll]\n  (apply concat (map #(repeat 2 %) coll)))", "user": "5a6bf911e4b0512ff01cda4c"}, {"problem": 32, "code": "(fn [lst]\n  (reduce #(conj %1 %2 %2) '() (reverse lst)))", "user": "55f344afe4b06e875b46ce5a"}, {"problem": 32, "code": "(fn [x]\n  (apply concat\n    (for [y x]\n      (concat [y] [y]))))", "user": "5a6a7cc5e4b0512ff01cda27"}, {"problem": 32, "code": "(fn [a] (sort (concat a a)))", "user": "5a42d6a8e4b0447ef91cc5fb"}, {"problem": 32, "code": "#(interleave % %)", "user": "5976da27e4b01722bebd4ce3"}, {"problem": 32, "code": "(fn [s] (loop[s s\n              ret '()]\n          (if (first s)\n            (recur (rest s) (conj (conj ret (first s)) (first s)))\n            (reverse ret))))", "user": "5a6b15e9e4b0512ff01cda32"}, {"problem": 32, "code": "(fn\n  [s]\n  (apply concat \n         (reverse \n          (reduce #(conj %1 (repeat 2 %2)) '() s))))", "user": "5a6f2942e4b0512ff01cda78"}, {"problem": 32, "code": "(fn [coll] (apply concat (map (fn [x] [x x]) coll)))", "user": "5a61bf79e4b0512ff01cd97b"}, {"problem": 32, "code": "(fn [xs]\n    (reduce #(conj %1 %2 %2) [] xs))", "user": "5920c191e4b09b4ee5954c61"}, {"problem": 32, "code": "#(interleave % %)", "user": "5a66f358e4b0512ff01cd9d5"}, {"problem": 32, "code": "(fn \n    ([x & y]\n        (if (empty? x) (reverse y)\n              (recur (rest x) \n                   (conj y (first x) (first x))\n              \n              )\n        )\n    )\n)", "user": "5a6afb1de4b0512ff01cda2f"}, {"problem": 32, "code": "#(mapcat (fn [x] [x x]) %)", "user": "5a625bc2e4b0512ff01cd989"}, {"problem": 32, "code": "#(loop [i 0 out [] sequ %1]\n        (if (= i (count %1))\n            out\n            (recur\n              (inc i)\n              (concat out (repeat 2 (sequ i)))\n              sequ)))", "user": "5a4b3abde4b05d388ecb6b81"}, {"problem": 32, "code": "(fn\n  [s]\n  (mapcat identity\n          (for [x s]\n            (take 2 (iterate identity x)))))", "user": "529f9bf2e4b04e0c58e87bb4"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "5619b22ee4b053970a773afe"}, {"problem": 32, "code": "(fn [coll] (mapcat #(repeat 2 %) coll))", "user": "57a6552ce4b0a96607956208"}, {"problem": 32, "code": "#(interleave % %)", "user": "5a488c09e4b05d388ecb6b68"}, {"problem": 32, "code": "(fn [coll] (apply concat (map (fn [eachElement] (conj '() eachElement eachElement)) coll)))", "user": "5a63f8bae4b0512ff01cd99f"}, {"problem": 32, "code": "(fn [coll]\n  (->>\n    (reduce (fn [a b]  (conj (conj a b) b) )\n\n            '()\n            coll)\n    (reverse)\n       )\n  )", "user": "5a71c89ee4b0512ff01cda93"}, {"problem": 32, "code": "(fn [lst] (mapcat (fn [e] (list e e)) lst))", "user": "5a663a32e4b0512ff01cd9c2"}, {"problem": 32, "code": "(fn [s]\n  (mapcat #(list % %) s))", "user": "4fd4bddce4b0d4de60cee36e"}, {"problem": 32, "code": "#(interleave % %)", "user": "5a6af090e4b0512ff01cda2d"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5a71e7c9e4b0512ff01cda95"}, {"problem": 32, "code": "(fn [collec] (reduce #( concat %1 %2) '() (map #(repeat 2 %) collec)))", "user": "5a634ff0e4b0512ff01cd995"}, {"problem": 32, "code": "(fn [elements] (apply concat (reduce (fn [x y] (conj x (repeat 2 y))) [] elements)))", "user": "5a6170fde4b0512ff01cd975"}, {"problem": 32, "code": "#(interleave % %)", "user": "58eed5b7e4b056aecfd47db8"}, {"problem": 32, "code": "#(mapcat (fn [x] (list x x)) %)", "user": "5a779197e4b013a48d399763"}, {"problem": 32, "code": "#(interleave % %)", "user": "59b9e669e4b0a024fb6ae3db"}, {"problem": 32, "code": "#(mapcat (fn [x] (list x x)) %)", "user": "5a7cee73e4b03baeef9276f2"}, {"problem": 32, "code": "(fn problem-32 [coll]\n  (cond\n    (or (nil? coll) (empty? coll)) '()\n    :else (cons (first coll) (cons (first coll) (problem-32 (rest coll))))))", "user": "5a786f6be4b013a48d39976e"}, {"problem": 32, "code": "#(interleave %1 %1)", "user": "5a80b934e4b00b71e582a05b"}, {"problem": 32, "code": "#(interleave % %)", "user": "588053cae4b0f1effa3b7612"}, {"problem": 32, "code": "(fn f\n  [lst]\n  (->> lst\n       (map (partial repeat 2))\n       (apply concat)))", "user": "5a798ac5e4b03baeef9276c0"}, {"problem": 32, "code": "(fn[s]\n  (loop [s s, res []]\n    (if (seq s)\n      (recur (rest s) (conj (conj res (first s)) (first s)))\n    res)))", "user": "5a7ae674e4b03baeef9276d5"}, {"problem": 32, "code": "#(reverse(reduce (fn[acc e](conj acc e e)) () % ))", "user": "5a80ad4be4b00b71e582a058"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "5a7deab5e4b03baeef927703"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "5a84cf8de4b00b71e582a095"}, {"problem": 32, "code": "(fn dup [seq] \n           (if (empty? seq)\n             seq\n             (concat (list (first seq) (first seq)) (dup (rest seq)))))", "user": "5a813b90e4b00b71e582a065"}, {"problem": 32, "code": "#(sort (into % %))", "user": "5a593521e4b05d388ecb6c93"}, {"problem": 32, "code": "(fn [s] (reduce (fn [s1 s2] (concat s1 s2)) '()  (map #(replicate 2 %) s)))", "user": "5a86ad84e4b05369db4d249c"}, {"problem": 32, "code": "#(apply concat (map (fn [el] (list el el)) %))", "user": "5a7ff79ce4b00b71e582a046"}, {"problem": 32, "code": "#(reduce (fn [acc cur] (concat acc [cur cur])) [] %)", "user": "59021fede4b0438e51c2d04d"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5a7da832e4b03baeef9276fc"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5a75da49e4b0512ff01cdacf"}, {"problem": 32, "code": "#(sort(take (* 2 (count %))(cycle %)))", "user": "5a853662e4b00b71e582a09e"}, {"problem": 32, "code": "(fn [input-vec]\n  (loop [in input-vec out ()]\n    (if (empty? in) (reverse out)\n        (recur (rest in)\n               (conj out (first in) (first in))))))", "user": "5a85f55be4b05369db4d2493"}, {"problem": 32, "code": "(fn [lst] (mapcat (fn [x] (repeat 2 x)) lst))", "user": "5a653f80e4b0512ff01cd9b2"}, {"problem": 32, "code": "reduce #(into %1 [%2 %2]) []", "user": "5a8e9a7ae4b05369db4d2528"}, {"problem": 32, "code": "(fn [xs]\n   (loop [xs xs\n          s '()]\n      (cond\n        (empty? xs) (reverse s)\n        :else (recur (rest xs) (conj s (first xs) (first xs)) ))))", "user": "5a8bc2a1e4b05369db4d24ef"}, {"problem": 32, "code": "(fn [x] (apply concat (map #(conj [] % %) x)))", "user": "5a8d55a8e4b05369db4d2514"}, {"problem": 32, "code": "#(->> %\n      (map (juxt identity identity))\n      (mapcat identity))", "user": "5a9181c5e4b002d099cae6f6"}, {"problem": 32, "code": "(partial mapcat #(list % %))", "user": "51421cd5e4b0b50abeb46b2c"}, {"problem": 32, "code": "reduce (fn [s x]\n             (if (nil? x)\n               (into (list) (reverse s))\n               (conj (conj s x) x))) []", "user": "5a912080e4b002d099cae6ea"}, {"problem": 32, "code": "(fn\n  [seq]\n  (reduce (fn [acc x] (conj (conj acc x) x)) [] seq))", "user": "5a9567bae4b0d174b936c752"}, {"problem": 32, "code": "(partial reduce #(conj %1 %2 %2) [])", "user": "5a95c639e4b0d174b936c75e"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "5a24735fe4b07f18be40aa11"}, {"problem": 32, "code": "(fn duplicate [seq]\n  (sort (concat seq seq)))", "user": "5a932f63e4b0d174b936c71b"}, {"problem": 32, "code": "#(interleave % %)", "user": "5a95e50be4b0d174b936c760"}, {"problem": 32, "code": "(fn [s]\n  (loop [a s ans []]\n    (if (empty? a)\n      ans\n      (recur (rest a) (conj ans (first a) (first a))))))", "user": "5a962c09e4b0d174b936c765"}, {"problem": 32, "code": "#(interleave % % )", "user": "58c71509e4b021aa9917ed6e"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5a9545dbe4b0d174b936c74c"}, {"problem": 32, "code": "(fn [origlist]\n   (loop [inlist origlist outlist '[]]\n     (if (= 0 (count inlist))\n       (into '() outlist)\n       (let [a (first inlist)]\n         (recur (rest inlist) (cons a (cons a outlist)))))))", "user": "58803ed9e4b0f1effa3b760f"}, {"problem": 32, "code": "(fn [in] (reduce concat (map #(take 2 (repeat 2 %)) in)))", "user": "5a94a38ce4b0d174b936c73e"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5a97eaffe4b0d174b936c783"}, {"problem": 32, "code": "(fn [c] (reduce (fn [coll e] (conj coll e e)) [] c))", "user": "5971a017e4b01722bebd4c75"}, {"problem": 32, "code": "reduce (fn [acc a & b] (reverse (conj (conj (reverse acc) a) a))) '()", "user": "5a78cd9ee4b013a48d399777"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5a5767f3e4b05d388ecb6c65"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5a9457a9e4b0d174b936c734"}, {"problem": 32, "code": "(fn [x]\n  (loop [coll x new []]\n    (if (empty? coll)\n      new\n      (recur (rest coll) (conj new (first coll)(first coll))))))", "user": "5a9482b7e4b0d174b936c737"}, {"problem": 32, "code": "(fn [lst]\n  (mapcat (fn [a] (repeat 2 a)) lst)\n)", "user": "5a984657e4b0d174b936c78a"}, {"problem": 32, "code": "(fn [lst]\n  (mapcat #(list % %) lst))", "user": "5a99b688e4b0d174b936c7a6"}, {"problem": 32, "code": "(fn [col] (mapcat (fn [item] (repeat 2 item) ) col))", "user": "5a99b83fe4b0d174b936c7aa"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5939e726e4b069cdc2982b45"}, {"problem": 32, "code": "(fn [coll] (interleave coll coll))", "user": "5a7a09e6e4b03baeef9276ca"}, {"problem": 32, "code": "#(reduce (fn [r x] (conj r x x)) [] %)", "user": "5a984616e4b0d174b936c789"}, {"problem": 32, "code": "(fn [z] (reverse (reduce (fn [x y] (cons y (cons y x))) () z)))", "user": "52bba119e4b07a9af57922ea"}, {"problem": 32, "code": "(fn [n]\n  (interleave n n))", "user": "5a99b844e4b0d174b936c7ab"}, {"problem": 32, "code": "(fn [coll] (reduce (fn [a, b] (conj (conj a b) b)) [] coll))", "user": "5a9ac061e4b0d174b936c7c1"}, {"problem": 32, "code": "(fn dup\n  [lst]\n  \n  (if (empty? lst)\n    ()\n    (cons (first lst)\n          (cons (first lst)\n                (dup (rest lst))))))", "user": "5a99ae99e4b0d174b936c7a4"}, {"problem": 32, "code": "#(interleave % %)", "user": "5a8ebd9ae4b05369db4d252b"}, {"problem": 32, "code": "#(interleave % %)", "user": "5a99b863e4b0d174b936c7ae"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5a426a3fe4b0447ef91cc5f2"}, {"problem": 32, "code": "mapcat #(list %1 %1)", "user": "5a9dbffbe4b0d174b936c7f4"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "5a99a540e4b0d174b936c7a3"}, {"problem": 32, "code": "(fn [x] (reduce #(conj %1 %2 %2) [] x))", "user": "59ef5280e4b0966464fe6a2b"}, {"problem": 32, "code": "mapcat \n  #(list % %)", "user": "5a9cdec0e4b0d174b936c7e1"}, {"problem": 32, "code": "(fn [collx]\n(letfn [(dup [coll]\n  (if (seq coll)\n    (cons (first coll) (cons (first coll) (dup (rest coll))))))]\n  (dup collx)))", "user": "5a9dbb32e4b0d174b936c7f3"}, {"problem": 32, "code": "(fn repetir\n  [lst]\n  (loop\n    [lst lst\n     result ()]\n    (if (empty? lst)\n      (reverse result)\n      (recur (rest lst) (cons (first lst) (cons (first lst) result))))))", "user": "5a9f005be4b0d174b936c810"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5a9bfd57e4b0d174b936c7d0"}, {"problem": 32, "code": "(fn repl\n  ([li] (repl li 2))\n  ([li rep] (repl li rep rep (vector)))\n  ([li rep v ans]\n   (if (empty? li)\n     ans\n     (if (zero? v)\n       (repl (rest li) rep rep ans)\n       (repl li rep (dec v) (conj ans (first li)))\n       )\n     )\n   )\n  )", "user": "5a90395ce4b05369db4d254a"}, {"problem": 32, "code": "(fn [xs] (reduce (fn [acc item] (concat acc [item item])) [] xs))", "user": "5a8e9fb5e4b05369db4d2529"}, {"problem": 32, "code": "(fn [origlist] \n   (loop [inlist (seq origlist) outlist '()]\n     (if (empty? inlist)\n       (reverse outlist)\n       (let [a (first inlist)]\n         (recur (rest inlist) (conj outlist a a))))))", "user": "56197b47e4b053970a773af8"}, {"problem": 32, "code": "(fn [lat]\n  (reduce concat (map #(take 2 (repeat %)) lat)))", "user": "5a9be505e4b0d174b936c7cf"}, {"problem": 32, "code": "#(reverse (reduce\n               (fn [foo bar] (conj foo bar bar)  )\n               ()\n               %) )", "user": "5908882de4b047aa04b19979"}, {"problem": 32, "code": "(fn\n  [lst]\n  (mapcat #(take 2 (repeat %)) lst))", "user": "5aa2f1dee4b0d174b936c865"}, {"problem": 32, "code": "#(loop [col % out []]\n        (if (> (count col) 0) (recur (rest col) (conj out (first col) (first col)))\n                         out)\n        )", "user": "5a9db513e4b0d174b936c7f0"}, {"problem": 32, "code": "(fn [lst]\n  (mapcat #(repeat 2 %) lst))", "user": "5aa00b7fe4b0d174b936c825"}, {"problem": 32, "code": "reduce #(concat %1 [%2 %2]) []", "user": "5a9a12d6e4b0d174b936c7b7"}, {"problem": 32, "code": "reduce (fn [a b] (concat a [b b])) '()", "user": "5a9e3698e4b0d174b936c7fc"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5aa4b961e4b0d174b936c888"}, {"problem": 32, "code": "(fn [v] (mapcat #(vector % %) v))", "user": "5892a5fde4b00487982d5228"}, {"problem": 32, "code": "reduce (fn [xs x] (concat xs (cons x (cons x ())))) ()", "user": "5a99cab6e4b0d174b936c7b2"}, {"problem": 32, "code": "(fn [DupSec]\n    (reverse (reduce #(conj %1 %2 %2) '() DupSec)))", "user": "5a99b766e4b0d174b936c7a8"}, {"problem": 32, "code": "(fn double-elements\n   [seq-to-double]\n  (if (empty? seq-to-double)\n    nil\n    (cons (first seq-to-double)\n          (cons (first seq-to-double)\n                (double-elements (rest seq-to-double))))))", "user": "5a9829e5e4b0d174b936c788"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5a99b848e4b0d174b936c7ac"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5aa6d44de4b0d174b936c8b2"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5a99b87ee4b0d174b936c7af"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5aa5eebee4b0d174b936c8a1"}, {"problem": 32, "code": "(fn zip\n  ([x] (zip x x))\n  ([x y] \n   (cond \n    (or (empty? x) (empty? y)) '()\n    :else (conj (conj (zip (rest x) (rest y)) (first y)) (first x)))))", "user": "5aa5951ae4b0d174b936c899"}, {"problem": 32, "code": "(fn dup-seq [coll]\n  (reduce #(conj %1 %2 %2) [] coll))", "user": "5aa4f7dae4b0d174b936c88c"}, {"problem": 32, "code": "mapcat #(vector % %)", "user": "5a99b861e4b0d174b936c7ad"}, {"problem": 32, "code": "(fn [x] (mapcat #(take 2 (repeat %)) x))", "user": "5a9db5c9e4b0d174b936c7f1"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5aa6bd56e4b0d174b936c8af"}, {"problem": 32, "code": "#(sort (into % %))", "user": "5aa2b5dbe4b0d174b936c85b"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2)[]", "user": "5aa8863ce4b0d174b936c8d0"}, {"problem": 32, "code": "#(sort (concat % %))", "user": "5aa9d445e4b0d174b936c8eb"}, {"problem": 32, "code": "#(mapcat (juxt identity identity)%)", "user": "5aa8e841e4b0d174b936c8d5"}, {"problem": 32, "code": "(fn [s] (mapcat #(vector % %) s))", "user": "52c2106fe4b07a9af5792374"}, {"problem": 32, "code": "(fn dup[seqi]\n   (loop [elem seqi res '()]\n    (if (seq elem)\n    \t(recur (rest elem) (cons (first elem) (cons (first elem) res)))\n    (reverse res))))", "user": "5a6cb2eae4b0512ff01cda57"}, {"problem": 32, "code": "#(apply concat (for [e %] (list e e)))", "user": "5aac01d3e4b073f177442567"}, {"problem": 32, "code": "#(interleave % %)", "user": "554e4d65e4b00713264bd993"}, {"problem": 32, "code": "reduce (fn [acc x] (conj (conj acc x) x)) []", "user": "5aa998c6e4b0d174b936c8e5"}, {"problem": 32, "code": "#(mapcat (partial repeat 2) %)", "user": "59769d75e4b01722bebd4cdd"}, {"problem": 32, "code": "(fn duplicate [coll]\n  (reduce #(conj %1 %2 %2) [] coll)\n  )", "user": "5aada061e4b073f17744257a"}, {"problem": 32, "code": "#(interleave % %)", "user": "5aa97ee9e4b0d174b936c8e4"}, {"problem": 32, "code": "(fn f [x] \n  (if (empty? x) \n    '()\n    \n    (concat \n      (list (first x) (first x))\n      (f (rest x))\n    )\n  )\n  )", "user": "5ab1665de4b073f1774425c0"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5a99c5a9e4b0d174b936c7b1"}, {"problem": 32, "code": "(partial mapcat #(repeat 2 %))", "user": "5ab23c99e4b073f1774425e2"}, {"problem": 32, "code": "#(interleave % %)", "user": "5ab23a78e4b073f1774425e1"}, {"problem": 32, "code": "#(interleave % %)", "user": "5aa2dc5ae4b0d174b936c861"}, {"problem": 32, "code": "(fn [e] (mapcat #(conj () % %) e))", "user": "57047768e4b0b0fb43fd0664"}, {"problem": 32, "code": "reduce #(into %1 (take 2 (repeat %2))) []", "user": "5ab16992e4b073f1774425c4"}, {"problem": 32, "code": "(fn [x] (reverse (reduce #(conj %1 %2 %2) () x)))", "user": "5ab38af0e4b073f177442601"}, {"problem": 32, "code": "(fn [a] (interleave a a))", "user": "5ab564f8e4b073f177442639"}, {"problem": 32, "code": "(fn dupseq\n  [coll]\n  (if (not (empty? coll))\n    (lazy-seq (cons (first coll) (lazy-seq (cons (first coll) (dupseq (rest coll))))))))", "user": "5ab490f4e4b073f17744261d"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "51cf99bce4b0e42293a22576"}, {"problem": 32, "code": "#(interleave % %)", "user": "5a67cedbe4b0512ff01cd9ee"}, {"problem": 32, "code": "#(interleave % %)", "user": "5a904de3e4b05369db4d254c"}, {"problem": 32, "code": "(partial reduce (fn [acc el] (conj (conj acc el) el)) [])", "user": "5ab5f60be4b073f177442643"}, {"problem": 32, "code": "(fn [coll] (interleave coll coll))", "user": "5ab276f2e4b073f1774425e6"}, {"problem": 32, "code": "(fn kaka [l]\n    (if (seq l)\n      (conj (conj (kaka (rest l)) (first l) ) (first l))\n      '()))", "user": "56b1fc92e4b0982f16b37dfc"}, {"problem": 32, "code": "#(loop [fseq % res []]\n   (if (= (count fseq) 0)\n     res\n     (recur (rest fseq) (concat res (concat (take 1 fseq) (take 1 fseq))))))", "user": "5ab170c2e4b073f1774425cb"}, {"problem": 32, "code": "(fn [xs] (apply concat (for [x xs] [x x])))", "user": "5ab8037ae4b073f177442678"}, {"problem": 32, "code": ";reduce #(concat % [%2 %2]) []\n;reduce #(conj % %2 %2) []\n#(interleave % %)", "user": "5a544eeee4b05d388ecb6c24"}, {"problem": 32, "code": "(fn [c] \n  (loop [a c\n         r []]\n    (if (empty? a)\n      r\n      (recur (rest a)(conj (conj r (first a)) (first a))))))", "user": "5ab9fe71e4b073f17744269d"}, {"problem": 32, "code": "#(reduce (fn [a b] (conj a b b)) [] %)", "user": "5ab96075e4b073f177442694"}, {"problem": 32, "code": "#(apply concat (map (fn _ [x] [x x]) %))", "user": "5aba34c5e4b073f1774426a3"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "5ab9eeade4b073f17744269b"}, {"problem": 32, "code": "mapcat #(vector % %)", "user": "5abc5a09e4b073f1774426e9"}, {"problem": 32, "code": "(fn [coll] (reduce #(into %1 (list %2 %2)) [] coll))", "user": "5abbb524e4b073f1774426da"}, {"problem": 32, "code": "(fn duplicate [alist]\n  (reduce\n   concat\n   (map\n    #(vector % %)\n    alist)))", "user": "5aaa2dc3e4b0d174b936c8f1"}, {"problem": 32, "code": "reduce (fn [acc el]\n         (-> acc\n             (conj el)\n             (conj el)\n         )) []", "user": "5a8fd113e4b05369db4d2542"}, {"problem": 32, "code": "(fn [coll]\n                 (->>\n                   (repeat 2 coll)\n                   (apply interleave)\n                   ))", "user": "5ab575f8e4b073f17744263d"}, {"problem": 32, "code": "(fn [s]\n  (let [dd_ (fn [s a]\n              (loop [si s ai a]\n                (if (empty? si) (reverse ai) (recur (rest si) (concat (list (first si) (first si)) ai)))))]\n    (dd_ s [])))", "user": "5762bf13e4b0994c1922fbae"}, {"problem": 32, "code": "#(interleave % %)", "user": "5ac0dab7e4b073f177442746"}, {"problem": 32, "code": "mapcat (fn [e] (list e e))", "user": "5abe2fc2e4b073f17744271e"}, {"problem": 32, "code": "#(interleave % %)", "user": "536fd48be4b0fc7073fd6e88"}, {"problem": 32, "code": "(fn\n  [coll]\n  (loop [elems coll\n         duped []]\n    (if (empty? elems)\n      duped\n      (recur (rest elems) (conj duped (first elems) (first elems))))))", "user": "5ac35d00e4b0e27600da7712"}, {"problem": 32, "code": "reduce (fn [x y] (into x [y y])) []", "user": "59a8a4dce4b0bcf4e9a43af7"}, {"problem": 32, "code": "(fn [xs]\n  (loop [acc [] ys xs]\n    (if (empty? ys) acc\n      (let [y (first ys)]\n        (recur (conj acc y y) (rest ys))))))", "user": "5a03652ae4b01bb0ae8afd83"}, {"problem": 32, "code": "#(mapcat list % %)", "user": "5ac4d1f6e4b0e27600da7735"}, {"problem": 32, "code": "(fn [arg] (reverse (reduce #(conj %1 %2 %2) '() arg)))", "user": "569bfc43e4b0542e1f8d145c"}, {"problem": 32, "code": "mapcat (fn [coll]  (list coll coll))", "user": "5ac37d0fe4b0e27600da7718"}, {"problem": 32, "code": "#(interleave % %)", "user": "5ab3db13e4b073f177442609"}, {"problem": 32, "code": "(fn [s] (reduce #(conj %1 %2 %2)\n          []\n          s))", "user": "531bf76fe4b08068f379ed96"}, {"problem": 32, "code": "(fn duplicate-seq\n  [input]\n  (interleave input input))", "user": "5ac6099ee4b0e27600da7757"}, {"problem": 32, "code": "mapcat #(vector % %)", "user": "555d1e51e4b0a2eb076a39a5"}, {"problem": 32, "code": "#(mapcat (fn [x] (vector x x)) %)", "user": "5ac0ba3ae4b073f177442745"}, {"problem": 32, "code": "#(reduce concat (map (partial repeat 2) %))", "user": "5ac6ef9be4b0e27600da7779"}, {"problem": 32, "code": "#(interleave % %)", "user": "5abbbd46e4b073f1774426db"}, {"problem": 32, "code": "(fn [s]\n  (reduce\n    (fn [s x]\n      (concat s (list x x)))\n    '() s))", "user": "5ac91d90e4b0e27600da77bd"}, {"problem": 32, "code": "#(interleave % %)", "user": "5acb137ee4b0e27600da77eb"}, {"problem": 32, "code": "#(reduce \n   (fn [fin num]\n       (conj fin num num)\n   ) [] %\n)", "user": "5ac92dc3e4b0e27600da77bf"}, {"problem": 32, "code": "(fn [n]\n  (loop [i 0 v []]\n    (if (< i (count n))\n      (recur  (inc i) (conj v (nth n i) (nth n i)))\n      v)))", "user": "5ac9da95e4b0e27600da77d4"}, {"problem": 32, "code": "(fn dup\n  [x]\n  (mapcat #(repeat 2 %) x))", "user": "5ac741d6e4b0e27600da777d"}, {"problem": 32, "code": "(fn duplicate [x]\n  (mapcat #(repeat 2%) x)\n  )", "user": "5ac74b34e4b0e27600da777f"}, {"problem": 32, "code": "reduce (fn [acc x] (conj acc x x) ) []", "user": "57513f88e4b02ea114799283"}, {"problem": 32, "code": "(fn [coll]\n    (reduce #(conj %1 %2 %2)\n            []\n            coll))", "user": "5ac7f980e4b0e27600da779f"}, {"problem": 32, "code": "#(mapcat vector % %)", "user": "5acd08eee4b0e27600da7822"}, {"problem": 32, "code": "#(reduce (fn [acc x] (conj acc x x)) [] %)", "user": "5acc961ae4b0e27600da7810"}, {"problem": 32, "code": "#(interleave % %)", "user": "5ad36ae9e4b0ea6055cfabc3"}, {"problem": 32, "code": "#(interleave % %)", "user": "5ac383b8e4b0e27600da7719"}, {"problem": 32, "code": "(fn [x] (mapcat #(list % %) x))", "user": "5ad63a34e4b0ea6055cfac01"}, {"problem": 32, "code": "(fn dup [x]\n      (apply concat (map #(list % %) x)))", "user": "5acd1a43e4b0e27600da7823"}, {"problem": 32, "code": "#(reduce (fn [coll c] (cons c (cons c coll))) () (reverse %))", "user": "5ad37785e4b0ea6055cfabc5"}, {"problem": 32, "code": "#(interleave % %)", "user": "5a7e194de4b03baeef927706"}, {"problem": 32, "code": "reduce #(into %1 (repeat 2 %2)) []", "user": "596a66cde4b069c0a1a19803"}, {"problem": 32, "code": "(fn dup-seq [lat]\n  (reduce concat (map #(take 2 (repeat %)) lat)))", "user": "580517d4e4b0a837a8b30cb9"}, {"problem": 32, "code": "#(loop [i % o []]\n  (if (empty? i)\n    o\n    (recur (rest i) (conj o (first i) (first i)))))", "user": "5aa8f753e4b0d174b936c8d9"}, {"problem": 32, "code": "(fn [s]\n  (reduce concat (map #(take 2 (repeat %)) s)))", "user": "5ada1f12e4b0ea6055cfac43"}, {"problem": 32, "code": "(fn dup [xs]\n  (if (not (seq xs)) []\n      (lazy-seq (cons (first xs)\n                  (cons (first xs)\n                    (dup (rest xs)))))))", "user": "51e24905e4b01e519814642e"}, {"problem": 32, "code": "(fn [xs]\n  (loop [in xs\n         out nil]\n    (if (empty? in)\n      out\n      (recur (rest in)\n             (concat out (list (first in) (first in)))))))", "user": "5ad3d730e4b0ea6055cfabc8"}, {"problem": 32, "code": "#(mapcat (fn [a] (list a a)) %)", "user": "599342efe4b0b211ea3aaab0"}, {"problem": 32, "code": "(fn f [seq]\n  (if (not (empty? seq))\n    (concat (list\n             (first seq)\n             (first seq))\n            (f (rest seq)))))", "user": "589f37e0e4b02bd94d917e79"}, {"problem": 32, "code": "mapcat (partial repeat 2)", "user": "5ade6bafe4b0837691e92c23"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "5991eec7e4b0866487ed0d6e"}, {"problem": 32, "code": "(fn [x] \n  (apply concat \n         (map #(repeat 2 %) x)))", "user": "5ac04101e4b073f177442737"}, {"problem": 32, "code": "(fn f [s]\n  (let [f*\n        (fn [acc s*]\n          (conj acc s* s*))]\n    (reduce f* [] s)))", "user": "5ae0976be4b0837691e92c43"}, {"problem": 32, "code": "(fn [x]\n  (mapcat #(vector % %) x))", "user": "5ac6f7f7e4b0e27600da777a"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "5ac834f4e4b0e27600da77ab"}, {"problem": 32, "code": "(fn [x]\n  (apply list (reduce #(conj %1 %2 %2) [] x)))", "user": "5a9d64c8e4b0d174b936c7eb"}, {"problem": 32, "code": "#(interleave % %)", "user": "5ae429fae4b0837691e92c79"}, {"problem": 32, "code": "(fn [in]\n    (-> (reduce\n       (fn [x y]\n         (conj x y y))\n       '()\n       in)\n      (reverse)))", "user": "5ae47c1de4b0837691e92c81"}, {"problem": 32, "code": "(fn [xs]\n  (reverse\n  (reduce\n   (fn [ys x]\n     (conj ys x x)\n   )\n   '()\n   xs\n  ))\n)", "user": "5aac468ae4b073f17744256b"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "5acaa269e4b0e27600da77e6"}, {"problem": 32, "code": "(fn [xs] (mapcat #(list % %) xs))", "user": "5adf5f9be4b0837691e92c33"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "5649b1b0e4b0284900eef646"}, {"problem": 32, "code": "#(interleave % %)", "user": "5ae246b1e4b0837691e92c5d"}, {"problem": 32, "code": "(fn[coll]\n   (loop [result []  xs coll]\n     (if (empty? xs)\n        result\n        (let [x (first xs)]\n          (recur (conj (conj result x) x) (rest xs))))))", "user": "5aa4a1ffe4b0d174b936c886"}, {"problem": 32, "code": "(fn d [[first & rest]]\n\t(cond\n\t\t(nil? first) '()\n\t\t:else (conj (conj (d rest) first) first)))", "user": "5aeb0b44e4b0cc2b61a3bbee"}, {"problem": 32, "code": "#(interleave % %)", "user": "59e8b4ade4b0249b72820734"}, {"problem": 32, "code": "reduce #(conj (conj %1 %2) %2) []", "user": "5aeec90fe4b0cc2b61a3bc31"}, {"problem": 32, "code": "#(reduce (fn [x y] (conj x y y)) [] %)", "user": "5aed87a1e4b0cc2b61a3bc1a"}, {"problem": 32, "code": "(fn dup [coll]\n  (loop [in coll\n         out '()]\n    (if (empty? in)\n      (reverse out)\n      (recur\n       (rest in)\n       (conj out (first in) (first in))))))", "user": "5ae7691ae4b0837691e92caa"}, {"problem": 32, "code": "reduce (fn [coll elm]\n         (conj coll elm elm)) []", "user": "5aeca4c9e4b0cc2b61a3bc0a"}, {"problem": 32, "code": ";#(apply concat (map (fn [x] (list x x)) %))\n#(mapcat (fn [x] (list x x)) %)", "user": "5af19233e4b0cc2b61a3bc5f"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5a084a24e4b01bb0ae8afdf2"}, {"problem": 32, "code": "#(interleave % %)", "user": "5aefdc8de4b0cc2b61a3bc40"}, {"problem": 32, "code": "#(reduce (fn [a b]\n            (-> a\n                 (conj b)\n                 (conj b)\n                )\n            ) [] %)", "user": "5af39788e4b0cc2b61a3bc8a"}, {"problem": 32, "code": "(fn [s] (reduce #(conj %1 %2 %2) [] s))", "user": "5922f8a9e4b026ae3852128f"}, {"problem": 32, "code": "(fn [s]\n  (apply concat (map (fn [e] [e e]) s)))", "user": "5aba04dce4b073f17744269e"}, {"problem": 32, "code": "(fn [arg] \n  (reverse \n   (reduce \n    (fn [arg1 arg2] (conj (conj arg1 arg2) arg2) ) \n    () arg\n    ) \n           )\n  )", "user": "5ae71f14e4b0837691e92ca7"}, {"problem": 32, "code": "(partial mapcat \n         (partial repeat 2))", "user": "5af8221ce4b0cc2b61a3bccd"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "59eb69fbe4b0249b7282077e"}, {"problem": 32, "code": "(fn [listy] (reduce (fn [a x] (concat a [x x])) () listy))", "user": "5af8752fe4b0cc2b61a3bcd3"}, {"problem": 32, "code": "(fn [s]\n  (loop [r () s s]\n    (if (empty? s)\n      (reverse r)\n      (recur (conj r (first s) (first s)) (rest s)))))", "user": "5af907e6e4b0cc2b61a3bcda"}, {"problem": 32, "code": "#(interleave % %)", "user": "5af1e1b1e4b0cc2b61a3bc67"}, {"problem": 32, "code": "#(reduce (fn [acc el] (concat acc [el] [el])) [] %)", "user": "585c450fe4b0f14aab7c8782"}, {"problem": 32, "code": "#(loop [a % c ()]\n\t(if (empty? a)\n\t\tc\n\t\t(recur (rest a) (concat c (list (first a)) (list (first a))))\n\t)\n)", "user": "5af9b2cee4b0cc2b61a3bce2"}, {"problem": 32, "code": "(fn [a] (reduce concat (map (fn [x] (list x x)) a)))", "user": "5afa3590e4b0cc2b61a3bcea"}, {"problem": 32, "code": "reduce #(conj (conj %1 %2) %2) []", "user": "5af31955e4b0cc2b61a3bc7a"}, {"problem": 32, "code": "#(reduce (fn [x y] (conj x y y)) [] %)", "user": "5a91988ae4b002d099cae6f9"}, {"problem": 32, "code": "#(reduce (fn [a x] (conj a x x)) [] %)", "user": "5afb4b15e4b0cc2b61a3bcf6"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5af0ac17e4b0cc2b61a3bc55"}, {"problem": 32, "code": "(fn dup [l] (\n                reduce (fn [a b] (conj a b b) ) [] l\n                       ))", "user": "5afc115de4b0cc2b61a3bcff"}, {"problem": 32, "code": "(fn [s]\n  (seq (reduce #(conj %1 %2 %2) [] s)))", "user": "5adcc688e4b0837691e92c05"}, {"problem": 32, "code": "(fn [s]\n  (reduce (fn [acc item] (conj acc item item)) [] s))", "user": "5afa9de0e4b0cc2b61a3bcf1"}, {"problem": 32, "code": "#(reduce concat (for [a %] [a a]))", "user": "5b008bcae4b0cc2b61a3bd3d"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5b03227be4b0cc2b61a3bd5d"}, {"problem": 32, "code": "#(interleave % %)", "user": "5b0180cfe4b0cc2b61a3bd47"}, {"problem": 32, "code": "(fn [s]\n  (loop [s s, res []]\n    (if (seq s)\n        (recur (rest s) (conj res (first s) (first s)))\n      (reverse (into '() res)))))", "user": "5a805f7ee4b00b71e582a04d"}, {"problem": 32, "code": "#(interleave % %)", "user": "5afcd6d1e4b0cc2b61a3bd17"}, {"problem": 32, "code": "(fn dupseq\n  [coll]\n  (cond\n    (empty? coll) '()\n      :else (concat (repeat 2 (first coll)) (dupseq (rest coll)))))", "user": "5b02a170e4b0cc2b61a3bd52"}, {"problem": 32, "code": "#(interleave % %)", "user": "5b03063de4b0cc2b61a3bd5b"}, {"problem": 32, "code": "(fn dup-seq [lat]\n  (mapcat #(take 2 (repeat %)) lat))", "user": "5845c8f6e4b089d5ab817e77"}, {"problem": 32, "code": "#(sort (into % %))", "user": "5b067ae1e4b0cc2b61a3bd97"}, {"problem": 32, "code": "#(interleave % %)", "user": "5aea2d21e4b0cc2b61a3bbe2"}, {"problem": 32, "code": "#(reduce (fn [res el] (conj res el el)) [] %)", "user": "59d9dcfbe4b0ef0a1e9b5c5d"}, {"problem": 32, "code": "(fn [x] (reduce concat (map #(repeat 2 %) x)))", "user": "5b0546eae4b0cc2b61a3bd7e"}, {"problem": 32, "code": "#(sort (into % %))", "user": "5b083513e4b0cc2b61a3bdb4"}, {"problem": 32, "code": "reduce (fn [acc v] (conj acc v v)) []", "user": "5b0bea6de4b0cc2b61a3bdda"}, {"problem": 32, "code": "mapcat (fn [x] [x x])", "user": "5b0e6795e4b0cc2b61a3be03"}, {"problem": 32, "code": "(fn pack [sequ]\n  (loop [[x & y] sequ out '()]\n    (if (nil? x) \n      (reverse out)\n      (recur y (cons x (cons x out))))))", "user": "5b02ab12e4b0cc2b61a3bd53"}, {"problem": 32, "code": "(fn [col] (apply concat (map #(list % %) col)))", "user": "5b0fe3f4e4b0cc2b61a3be14"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "5b0d72e5e4b0cc2b61a3bdf8"}, {"problem": 32, "code": "mapcat (fn [x] (replicate 2 x))", "user": "5addadfce4b0837691e92c13"}, {"problem": 32, "code": "(fn f [coll]\n  (loop [acc nil\n         [x & xs] coll]\n    (if-not x\n      (reverse acc)\n      (recur (cons x (cons x acc))\n             xs))))", "user": "5777c3d6e4b0979f8965164f"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5b14ea95e4b0cc2b61a3be62"}, {"problem": 32, "code": "(fn [coll]\n  (loop [result [] coll coll]\n    (if (empty? coll)\n      result\n      (recur (conj result (first coll) (first coll)) (rest coll)))))", "user": "5b13f482e4b0cc2b61a3be58"}, {"problem": 32, "code": "(fn [x] (sort(concat x x)))", "user": "5b1619e4e4b0cc2b61a3be77"}, {"problem": 32, "code": "#(interleave % %)", "user": "5b15811ee4b0cc2b61a3be6f"}, {"problem": 32, "code": "(fn dupli [in]\n  (let [f (first in)\n        n (next in)]\n    (if n\n      (cons f (cons f (dupli n)))\n      (cons f [f]))))", "user": "5b107263e4b0cc2b61a3be22"}, {"problem": 32, "code": "(fn try2\n  [coll]\n  (loop [cont 0 new-col []]\n    (if (< cont (count coll))\n      (recur (inc cont) (conj (conj new-col (coll cont)) (coll cont)))\n      new-col)))", "user": "5adbbf89e4b0837691e92bf4"}, {"problem": 32, "code": "#(apply concat (map (fn [x] (vector x x)) %1))", "user": "5b15e881e4b0cc2b61a3be75"}, {"problem": 32, "code": "#(->> %\n  (map (fn [x] [x x]))\n  (apply concat)\n  )", "user": "5b118b7be4b0cc2b61a3be34"}, {"problem": 32, "code": "#(interleave % %)", "user": "5af4446de4b0cc2b61a3bc93"}, {"problem": 32, "code": "(fn [s]\n  (loop [x s\n         acc []]\n    (if-not (empty? x)\n            (recur (rest x) (conj acc (first x) (first x)))\n            acc)))", "user": "51316a63e4b0431ba07e7feb"}, {"problem": 32, "code": "#(reduce (fn [r l] (cons l (cons l r)))\n         '()\n         (reverse %))", "user": "59b71b4fe4b05c620303ca3d"}, {"problem": 32, "code": "mapcat #(repeat 2 %1)", "user": "56b619e7e4b0982f16b37e39"}, {"problem": 32, "code": "(fn x [y] (let [a (fn [acc b] (conj acc b b))] (reduce a [] y)))", "user": "5b0f2862e4b0cc2b61a3be0f"}, {"problem": 32, "code": "(fn [v]\n  (for[x v\n       y (range 2)]\n    x))", "user": "5b198eace4b03cfeda66ecbb"}, {"problem": 32, "code": "#(reduce (fn [acc item]\n                (-> acc \n                    (conj item)\n                    (conj item)))\n              [] %\n              )", "user": "5b0b8d29e4b0cc2b61a3bdd7"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5b1f1b2de4b03cfeda66ed19"}, {"problem": 32, "code": "(fn [coll] (reverse (reduce (fn [acc x] (conj acc x x)) () coll)))", "user": "5afecee2e4b0cc2b61a3bd28"}, {"problem": 32, "code": "(fn [x]  (mapcat #(list % %) x))", "user": "5b20134de4b03cfeda66ed2d"}, {"problem": 32, "code": "#(interleave % %)", "user": "567be591e4b05957ce8c61ab"}, {"problem": 32, "code": "(fn [vct]\n  (let [in (rseq vct)]\n    (reduce (fn [acc a] (conj acc a a)) '() in)\n    ))", "user": "5b1c16e1e4b03cfeda66ecf2"}, {"problem": 32, "code": "(fn dupes [col] (reduce #(conj (conj %1 %2) %2) [] col))", "user": "5b1d61b3e4b03cfeda66ecfe"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "59c243bae4b0a024fb6ae4aa"}, {"problem": 32, "code": "#(into ()\n       (for [x (reverse %)\n             y (range 2)]\n         x))", "user": "59c42426e4b0a024fb6ae4f5"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5b22328ee4b03cfeda66ed5d"}, {"problem": 32, "code": "(fn dup \n  ([x] (dup x []))\n  ([x o] (\n        if (empty? x)\n        o\n        (dup (rest x) (conj (conj o (first x)) (first x)))\n        ))\n   )", "user": "5b081ff2e4b0cc2b61a3bdb3"}, {"problem": 32, "code": "reduce (fn [acc i] (into acc [i i])) []", "user": "5b210749e4b03cfeda66ed48"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5b22d30ee4b08b1df1c36750"}, {"problem": 32, "code": "#_(fn [s] (reduce into [] (map #(do [% %]) s)))\nmapcat #(do [ % %])", "user": "5b250773e4b063e2438bcc21"}, {"problem": 32, "code": "#(interleave % %)", "user": "54dfbacae4b024c67c0cf7b1"}, {"problem": 32, "code": "(fn dup [coll]\n  (when-not (empty? coll)\n   (conj (dup (rest coll))\n         (first coll)\n         (first coll))))", "user": "585aad0be4b0f14aab7c8753"}, {"problem": 32, "code": "#(apply concat (map (fn [x] [x x]) %))", "user": "5b2238d1e4b03cfeda66ed5e"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5af9d09ae4b0cc2b61a3bce6"}, {"problem": 32, "code": "(partial mapcat #(list %1 %1))", "user": "5b236e55e4b08b1df1c36759"}, {"problem": 32, "code": "reduce (fn [m i] (conj m i i)) []", "user": "5b274fd1e4b063e2438bcc3b"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "5b04662ce4b0cc2b61a3bd75"}, {"problem": 32, "code": "#(interleave % %)", "user": "56673885e4b04acd4f672dce"}, {"problem": 32, "code": "#(interleave %1 %1)", "user": "5a9414eae4b0d174b936c72c"}, {"problem": 32, "code": "(fn [v]\n  (reduce concat (map #(vector % %) v)))", "user": "5b2a559be4b063e2438bcc74"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "586a906ae4b0f14aab7c88c3"}, {"problem": 32, "code": "(fn [s]\n  (reduce #(conj %1 %2 %2) [] s))", "user": "5b2c79c6e4b025bcb146f2b7"}, {"problem": 32, "code": "(fn [coll] (reduce #(concat %1 [%2 %2]) [] coll))", "user": "5b2e6b02e4b025bcb146f2d3"}, {"problem": 32, "code": "#(mapcat (fn [i] (list i i)) %)", "user": "5b284375e4b063e2438bcc53"}, {"problem": 32, "code": "(fn [seq-var] (\n  apply concat (map #(list % %) seq-var)\n))", "user": "5b3189e5e4b025bcb146f308"}, {"problem": 32, "code": "#(interleave % %)", "user": "5b3251c1e4b025bcb146f317"}, {"problem": 32, "code": "#(apply concat (map list % %))", "user": "5b2eaf1be4b025bcb146f2db"}, {"problem": 32, "code": "#(interleave % %)", "user": "5b073c34e4b0cc2b61a3bda4"}, {"problem": 32, "code": "(fn duplicate [v]\n  (loop [vl v dv []]\n    (if-not (empty? vl)\n      (recur (rest vl) (conj dv (first vl) (first vl)))\n      dv)))", "user": "5b2c76c8e4b025bcb146f2b6"}, {"problem": 32, "code": "#(interleave % %)", "user": "5b34aba7e4b025bcb146f352"}, {"problem": 32, "code": "#(interleave %1 %1)", "user": "5b23f306e4b08b1df1c36769"}, {"problem": 32, "code": "(partial reduce (fn [acc d]\n  (conj acc d d)) [])", "user": "5b38d771e4b02d533a91bbb0"}, {"problem": 32, "code": "(fn [coll] (mapcat #(vector % %) coll))", "user": "5b37a3b4e4b02d533a91bba9"}, {"problem": 32, "code": "#(interleave % %)", "user": "5b227f5ae4b03cfeda66ed63"}, {"problem": 32, "code": "(fn [xs] (reduce concat (map (fn [x] (repeat 2 x)) xs)))", "user": "5b333626e4b025bcb146f32f"}, {"problem": 32, "code": "#(mapcat vector % %)", "user": "59e8a952e4b0249b72820733"}, {"problem": 32, "code": "(fn [s]\n   (reduce #(concat %1 [%2 %2]) () s))", "user": "5b2689e3e4b063e2438bcc33"}, {"problem": 32, "code": "#( loop [ x % res [] ] ( if (empty? x) res ( recur ( rest x ) ( conj ( conj res (first x)) (first x)) ) ) )", "user": "5b3aa98be4b02d533a91bbca"}, {"problem": 32, "code": "(fn abc [x] (sort (reduce into (repeat 2 x))))", "user": "5b3ca9c9e4b02d533a91bbe3"}, {"problem": 32, "code": "(fn __ ([x] (__ x '()))\n  ([l1 l2] (if (empty? l1) (reverse l2) (__ (rest l1) (conj l2 (first l1) (first l1))))))", "user": "5b3f2ba9e4b02d533a91bc09"}, {"problem": 32, "code": "(fn [original-seq]\n  (loop [new-seq [] rest-seq original-seq]\n  (println new-seq rest-seq)\n  (if (empty? rest-seq)\n    new-seq\n    (recur (conj new-seq (first rest-seq) (first rest-seq)) (rest rest-seq)))\n)\n)", "user": "5b3de9a7e4b02d533a91bbf4"}, {"problem": 32, "code": "(fn [item] (mapcat #(repeat 2 %) item))", "user": "5b0948f3e4b0cc2b61a3bdbb"}, {"problem": 32, "code": "(fn [args] \n\t(loop [Sammlung args\n\t\tResult nil]\n\t\t(if (empty? Sammlung)\n\t\t\t(reverse Result)\n\t\t\t(recur (rest Sammlung) \n\t\t\t\t(conj Result (first Sammlung) (first Sammlung))))))", "user": "5b35de7be4b02d533a91bb97"}, {"problem": 32, "code": "(fn [s] (interleave s s))", "user": "5b47874be4b02d533a91bc70"}, {"problem": 32, "code": "(fn [coll] (apply concat (map (fn [x] [x x]) coll)))", "user": "5b465b8be4b02d533a91bc65"}, {"problem": 32, "code": "#(interleave % %)", "user": "5b47a4f7e4b02d533a91bc73"}, {"problem": 32, "code": "#(loop [lst %\n        ret '()]\n   (if (empty? lst)\n     (reverse ret)\n     (recur (rest lst)\n            (conj ret (first lst) (first lst)))))", "user": "5b4b8cd6e4b02d533a91bc9f"}, {"problem": 32, "code": "(fn [coll] (mapcat #(vector % %) coll))", "user": "5b2c1f60e4b025bcb146f2b1"}, {"problem": 32, "code": "#(for [x % y [1 2]] x)", "user": "5b4a0ce3e4b02d533a91bc92"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5b4dde95e4b02d533a91bcbe"}, {"problem": 32, "code": "(fn [x] (reduce (fn [acc e] (into acc [e e])) [] (vec x)))", "user": "5b445421e4b02d533a91bc40"}, {"problem": 32, "code": "(fn[x](sort(into x (for[y x]y))))", "user": "5826a843e4b051871117befd"}, {"problem": 32, "code": "(fn [coll] (apply concat (map (fn [x] (list x x)) coll)))", "user": "5b421edce4b02d533a91bc2c"}, {"problem": 32, "code": "(fn [s] (reverse (\n         reduce (fn [ss i] (\n                            cons i (cons i ss))) '() s)))", "user": "5b4b4052e4b02d533a91bc9a"}, {"problem": 32, "code": "mapcat #(vector % %)", "user": "5b51b9f8e4b02d533a91bcfe"}, {"problem": 32, "code": "(fn [s]\n  (reduce (fn [acc e] (conj acc e e)) [] s)\n)", "user": "5b4ff637e4b02d533a91bce0"}, {"problem": 32, "code": "(fn [x]\n  (loop [arr x\n         new []]\n    (if-not (first arr)\n      new\n      (recur (next arr) (conj new (first arr) (first arr)))\n      )\n    )\n  )", "user": "5b3e35bde4b02d533a91bbfa"}, {"problem": 32, "code": "mapcat (partial repeat 2)", "user": "5b4dfd5de4b02d533a91bcc3"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "591d57aee4b09b4ee5954c16"}, {"problem": 32, "code": "#(mapcat (fn [x] (repeat 2 x)) %)", "user": "5b552117e4b02d533a91bd2c"}, {"problem": 32, "code": "#(mapcat (fn [item]\n           (repeat 2 item))\n         %)", "user": "59ed823ee4b0249b728207a1"}, {"problem": 32, "code": "(fn duplicate [s] (reduce (fn [vals v] (conj vals v v)) [] s))", "user": "5b58b271e4b02d533a91bd6e"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5b57505ce4b02d533a91bd55"}, {"problem": 32, "code": "#(interleave % %)", "user": "5742760ce4b05c31a32c0876"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5b59fe53e4b02d533a91bd87"}, {"problem": 32, "code": "#(sort (concat % %))", "user": "5b5955cce4b02d533a91bd79"}, {"problem": 32, "code": "#(reduce (fn [r x] (conj r x x)) [] %)", "user": "5b59c513e4b02d533a91bd81"}, {"problem": 32, "code": "#(reduce (fn [accum x]\n           (concat accum [x x]))\n         []\n         %)", "user": "5b5d255de4b0c6492753e6c8"}, {"problem": 32, "code": "#(reduce (fn [r x]\n           (conj r x x)) [] %)", "user": "567a3112e4b05957ce8c6196"}, {"problem": 32, "code": "(fn dup [seq]\n  (loop [s seq\n         acc []]\n    (if (empty? s)\n      acc\n      (recur (rest s)\n             (vec (conj acc (first s) (first s)))))))", "user": "5b59c2bde4b02d533a91bd80"}, {"problem": 32, "code": "(fn dup [lst]\n  (if\n    (empty? lst)\n    lst\n    (cons (first lst) (cons (first lst) (dup (rest lst))))\n    )\n  )", "user": "5b5e5019e4b0c6492753e6d3"}, {"problem": 32, "code": "#(interleave % %)", "user": "5b2be9b1e4b025bcb146f2b0"}, {"problem": 32, "code": "#(reduce concat (map (fn dbl [x] (list x x)) %))", "user": "5600bed5e4b04bb52996e170"}, {"problem": 32, "code": "(fn [l] (reduce #(conj %1 %2 %2) '() (reverse l)))", "user": "5b59d176e4b02d533a91bd86"}, {"problem": 32, "code": "(fn dup-seq\n  [coll]\n  (apply concat (map (partial repeat 2) coll)))", "user": "5a3c06fce4b001c08efc0cdd"}, {"problem": 32, "code": "#(mapcat list % %)", "user": "5b609f0ae4b0c6492753e708"}, {"problem": 32, "code": "#(reduce\n  (fn [coll x] (conj coll x x))\n  []\n  %)", "user": "5b500215e4b02d533a91bce2"}, {"problem": 32, "code": "(fn\n  [s]\n  (reduce\n   (fn [acc x]\n     (-> (conj acc x)\n         (conj x)))\n   []\n   s))", "user": "59b93cd7e4b0a024fb6ae3c7"}, {"problem": 32, "code": "#(interleave % %)", "user": "5b62ff3ce4b0c6492753e72a"}, {"problem": 32, "code": "(fn [c] (reduce (fn [s x] (conj s x x)) [] c))", "user": "5b5e7953e4b0c6492753e6d9"}, {"problem": 32, "code": "(fn [d s]\n  (if (= s nil)\n    d\n    (recur (conj d (first s) (first s) ) (next s))\n  )\n) []", "user": "5b5b0bb9e4b0c6492753e6a5"}, {"problem": 32, "code": "#(interleave % %)", "user": "5b61aa6ae4b0c6492753e712"}, {"problem": 32, "code": "(fn [list]\n  (reduce \n    (fn [nlist elem]\n      (conj nlist elem elem))\n    [] list)\n)", "user": "5b59b89be4b02d533a91bd7d"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5b552e2ee4b02d533a91bd2e"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5b632851e4b0c6492753e72d"}, {"problem": 32, "code": "#(sort (concat % %))", "user": "5b608c66e4b0c6492753e706"}, {"problem": 32, "code": "(fn [xs]\n  (reduce #(conj %1 %2 %2) () (reverse xs)))", "user": "5b62764ae4b0c6492753e725"}, {"problem": 32, "code": "(fn [lst]\n  (apply concat (for [x lst] [x x])))", "user": "5b58d012e4b02d533a91bd71"}, {"problem": 32, "code": "(fn func\n  ([x l]\n   (if (empty? x) (reverse l)\n     (let [f (first x) r (rest x)]\n       (func r (cons f (cons f l))))))\n  ([x]\n   (func x (set '()))))", "user": "5b679bf9e4b0c6492753e769"}, {"problem": 32, "code": "#(reduce (fn [acc v](conj acc v v) ) [] %)", "user": "5b6473eee4b0c6492753e73f"}, {"problem": 32, "code": "#(reduce concat (map (fn [x] (list x x)) %))", "user": "5b6b3809e4b0c6492753e7a5"}, {"problem": 32, "code": "(fn [coll] (let [new-coll (empty coll)] (reduce #(conj % %2 %2) new-coll coll)))", "user": "5b43cbb0e4b02d533a91bc3a"}, {"problem": 32, "code": "(fn [arr] (loop [_arr arr\n                 result []]\n            (if (empty? _arr)\n              (reverse (apply concat result))\n              (recur (rest _arr) (cons (repeat 2 (first _arr)) result)))))", "user": "5b611666e4b0c6492753e70d"}, {"problem": 32, "code": "(fn [x] (apply concat (map (fn [y] [ y y ]) x)))", "user": "5b67f0fbe4b0c6492753e76d"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5b6e1649e4b0c6492753e7ce"}, {"problem": 32, "code": "reduce (fn [xs x] (into xs [x x])) []", "user": "5b6c0d56e4b0c6492753e7b2"}, {"problem": 32, "code": "(fn dup_sequence\n  [coll]\n  (apply concat (map #(repeat 2 %1) coll))\n)", "user": "5b7163f8e4b047b03b203695"}, {"problem": 32, "code": "(fn [lst] (interleave lst lst))", "user": "55c216dde4b0e31453f64974"}, {"problem": 32, "code": "#(mapcat (fn [e] [e e]) %1)", "user": "50a635bbe4b0aa96157e2621"}, {"problem": 32, "code": "(fn [rst]\n  (loop [i (first rst)\n         others (rest rst)\n         dup-seq []]\n    (if (= (count others) 0)\n      (conj dup-seq i i)\n      (recur (first others) (rest others) (conj dup-seq i i)))))", "user": "599ed08fe4b0871e7608b812"}, {"problem": 32, "code": "#(sort (into % %))", "user": "5b7292b3e4b047b03b2036a4"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5b66faa7e4b0c6492753e75a"}, {"problem": 32, "code": "#(sort(take (* 2 (count %)) (cycle %)))", "user": "5b6962c1e4b0c6492753e787"}, {"problem": 32, "code": "(fn [x] (mapcat #(repeat 2 %) x))", "user": "5992dc6ae4b0866487ed0d7d"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "592db566e4b072a2710fcf7c"}, {"problem": 32, "code": "(fn duplicaW [x] (conj (into [] (cons (first x) (reduce into [] (partition 2 1 x)))) (last x))  )", "user": "5b69baf9e4b0c6492753e78f"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "59b294f8e4b0e1f4e384c8fb"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5b513bd4e4b02d533a91bcf2"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "5b772ad7e4b047b03b2036e8"}, {"problem": 32, "code": "#(sort (into % %))", "user": "5b780a8ce4b047b03b2036f6"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5b64370ae4b0c6492753e73c"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5244cf39e4b0d8acf9ed6ac5"}, {"problem": 32, "code": "(fn [s] (reduce #(conj %1 %2 %2) [] s))", "user": "5b774e66e4b047b03b2036ec"}, {"problem": 32, "code": "(fn dup-seq\n  [xs]\n  (reduce concat (map #(repeat 2 %) xs)))", "user": "5b73e500e4b047b03b2036ba"}, {"problem": 32, "code": "#(apply concat (for [x %] (list x x)))", "user": "5b788fc4e4b047b03b2036fc"}, {"problem": 32, "code": "#(interleave % %)", "user": "55f48d1be4b06e875b46ce7b"}, {"problem": 32, "code": "#(interleave % %)", "user": "5b79cbdce4b047b03b20370a"}, {"problem": 32, "code": "#(reduce (fn [ac x] (conj ac x x)) [] %)", "user": "57a5da5ee4b0a966079561fe"}, {"problem": 32, "code": "#(interleave % %)", "user": "5b4c2212e4b02d533a91bca6"}, {"problem": 32, "code": "#(sort (list* (into % %)))", "user": "5b754f8ee4b047b03b2036c9"}, {"problem": 32, "code": "#(sort (concat % %))", "user": "5b7bc82ce4b047b03b203726"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "5b6ba7d7e4b0c6492753e7ad"}, {"problem": 32, "code": "(fn [s] (reduce (fn [res el]\n                  (conj res el el))\n                [] s))", "user": "5b7ec039e4b047b03b20375d"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5b7d1dc1e4b047b03b20373f"}, {"problem": 32, "code": "reduce (fn [acc curr] (concat acc [curr curr])) []", "user": "5b82eec6e4b047b03b2037a4"}, {"problem": 32, "code": "(fn [params] (sort (concat params params)))", "user": "5b7ed20fe4b047b03b203760"}, {"problem": 32, "code": "(fn list-replicate [list]\n  (mapcat (partial repeat 2) list))", "user": "582625d3e4b051871117bef2"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "5951190be4b066ee0a44aea4"}, {"problem": 32, "code": "#(reduce concat (map (fn [c] (repeat 2 c)) %))", "user": "5a085dfde4b01bb0ae8afdf4"}, {"problem": 32, "code": "(fn [a] (mapcat identity (map #(repeat 2 %) a)))", "user": "5b857411e4b047b03b2037ce"}, {"problem": 32, "code": "(fn dup \n  ([data]\n   \t(dup data []))\n  ([data res]\n   \t(loop [d data r res]\n      (if (empty? d)\n        \tr\n        \t(recur (rest d) (conj r (first d) (first d)))))))", "user": "5b11449ce4b0cc2b61a3be2d"}, {"problem": 32, "code": "#(interleave % %)", "user": "5b885821e4b047b03b20380b"}, {"problem": 32, "code": "#(mapcat list %1 %1)", "user": "57e2e1bde4b0bfb2137f5a8f"}, {"problem": 32, "code": "(fn [sq] (reduce #(into %1 [%2 %2]) [] sq))", "user": "5b7ef8e6e4b047b03b203765"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "578dc040e4b0ebec4cfb756d"}, {"problem": 32, "code": "(fn [coll]\n  (reverse\n   (reduce #(cons %2 (cons %2 %1)) '() coll)))", "user": "5b88f0c0e4b047b03b203816"}, {"problem": 32, "code": "#(interleave % %)", "user": "5b819312e4b047b03b20378d"}, {"problem": 32, "code": "(fn [list]   (mapcat (fn [n] [n n]) list ))", "user": "5b6f72ede4b0c6492753e7dc"}, {"problem": 32, "code": "(fn [s] (mapcat #(list % %) s))", "user": "5b8f0861e4b0c0b3ffbd49f4"}, {"problem": 32, "code": "(fn duplicate-elements [seq]\n  (loop [idx 0\n         result []]\n    (if (>= idx (count seq))\n      result\n      (let [current (nth seq idx)\n            new-result (conj result current current)\n            next-idx (+ idx 1)]\n        (recur next-idx new-result)))))", "user": "58ac01f7e4b0005cfeb1a73b"}, {"problem": 32, "code": "reduce #(concat %1 (repeat 2 %2)) []", "user": "5b77d3c8e4b047b03b2036f1"}, {"problem": 32, "code": "(fn dublicate\n   [args]\n   (loop [lst args ret '()]\n     (if (not (empty? lst))\n       (recur (rest lst) (conj ret (first lst) (first lst)))\n       (reverse ret))))", "user": "5b86462de4b047b03b2037df"}, {"problem": 32, "code": "(fn [res arr] (if (empty? arr) (list* res) (recur (conj res (first arr) (first arr)) (rest arr)))) []", "user": "5b5f2566e4b0c6492753e6e9"}, {"problem": 32, "code": "#(sort (into % %))", "user": "5b855800e4b047b03b2037cd"}, {"problem": 32, "code": "(fn [seq]\n    (loop [duplicated []\n           to_do seq]\n      (if (empty? to_do)\n        duplicated\n        (recur (conj duplicated (first to_do) (first to_do)) (rest to_do)))) \n    )", "user": "592ac17ae4b072a2710fcf26"}, {"problem": 32, "code": "#(mapcat (fn [x] [x x]) %)", "user": "4f84a4a4e4b033992c121c39"}, {"problem": 32, "code": "#(interleave % %)", "user": "5b9436dfe4b0c0b3ffbd4a53"}, {"problem": 32, "code": "reduce (fn [acc xs] (conj acc xs xs)) []", "user": "5b924123e4b0c0b3ffbd4a34"}, {"problem": 32, "code": "(fn [x] (apply concat (map #(identity [% %]) x)))", "user": "5b9263ece4b0c0b3ffbd4a37"}, {"problem": 32, "code": "(fn [s]\n  (->> s\n       (reduce (fn [agg e] (conj agg e e)) [])\n       seq))", "user": "5b9357b7e4b0c0b3ffbd4a46"}, {"problem": 32, "code": "#(interleave % %)", "user": "57c647bbe4b05aa3c4741cf3"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5b9601e8e4b0c0b3ffbd4a70"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "5b92f178e4b0c0b3ffbd4a41"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5b80a5cfe4b047b03b20377f"}, {"problem": 32, "code": "#(interleave % %)", "user": "5b96800ae4b0c0b3ffbd4a7b"}, {"problem": 32, "code": "(fn [my-seq]\n  (loop [x my-seq\n         rtn-ele []]\n    (if (empty? x)\n      (apply list rtn-ele)\n      (recur (rest x) (conj rtn-ele (first x) (first x)))\n      )\n    )\n  )", "user": "5b97c521e4b0c0b3ffbd4a9a"}, {"problem": 32, "code": "(fn dd\n  ([l] (dd l []))\n  ([l res] \n        (if (empty? l)\n          res\n          (dd (rest l) (into  res (repeat 2 (first l)) )))))", "user": "5b919d9de4b0c0b3ffbd4a24"}, {"problem": 32, "code": "(fn [x] (mapcat #(list % %) x))", "user": "5af3a4d0e4b0cc2b61a3bc8b"}, {"problem": 32, "code": "(fn [coleccion]\n  (reverse (reduce (fn [col-ini elemento]\n                     (conj col-ini elemento elemento)) '() coleccion)))", "user": "599f7a7ee4b0871e7608b81e"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "5b999af8e4b0c0b3ffbd4ad3"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5b985fe5e4b0c0b3ffbd4ab1"}, {"problem": 32, "code": "#(interleave % %)", "user": "5b81139fe4b047b03b203782"}, {"problem": 32, "code": "mapcat (fn [v] [v v])", "user": "5a66fddee4b0512ff01cd9d7"}, {"problem": 32, "code": "#(loop [in (reverse %)\n       res '()]\n  (if (empty? in)\n    res\n    (recur (rest in) (conj res (first in) (first in)))))", "user": "5a059b33e4b01bb0ae8afdb5"}, {"problem": 32, "code": "reduce (fn [xs x] ( concat xs (cons x (cons x ())))) ()", "user": "5b9c4a7be4b0c0b3ffbd4b16"}, {"problem": 32, "code": "#(interleave % %)", "user": "5b6428b3e4b0c6492753e73b"}, {"problem": 32, "code": "reduce (fn [acc x] (conj acc x x)) []", "user": "5b9db58be4b0c0b3ffbd4b41"}, {"problem": 32, "code": "(fn dup\n  ([xs] (dup xs '()))\n  ([xs acc]\n    (if (empty? xs)\n      acc\n      (recur (rest xs) (concat acc (list (first xs)) (list (first xs))))))\n)", "user": "5b9da7fbe4b0c0b3ffbd4b3f"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "5b8d01d7e4b0c0b3ffbd49ca"}, {"problem": 32, "code": "(fn duplicate-sequence [s]\n  (loop [s s, acc []]\n    (if (empty? s)\n      acc\n      (recur (next s) (conj acc (first s) (first s))))))", "user": "5b975c6ee4b0c0b3ffbd4a91"}, {"problem": 32, "code": "#(interleave % %)", "user": "5b8aa478e4b0c0b3ffbd49b2"}, {"problem": 32, "code": "#(mapcat (fn [x] [x x]) %)", "user": "5b9acb23e4b0c0b3ffbd4aef"}, {"problem": 32, "code": "(fn dupe [m]\n  (reduce (fn [r v] (apply conj r v))\n    (map #(vec [% %]) m)))", "user": "5b9bcba8e4b0c0b3ffbd4b07"}, {"problem": 32, "code": "reduce\n  (fn [acc value]\n    (concat acc [value value]))\n  []", "user": "5b265183e4b063e2438bcc31"}, {"problem": 32, "code": "(fn [xs] \n  (reduce #(concat %1 [%2] [%2]) [] xs)\n)", "user": "570d0548e4b0b0fb43fd06d2"}, {"problem": 32, "code": "#(mapcat(fn[x](repeat 2 x))%)", "user": "5b99a0a3e4b0c0b3ffbd4ad7"}, {"problem": 32, "code": "#(for [x % y [x x]] y)", "user": "5ba5802de4b0a20761a233fd"}, {"problem": 32, "code": "(fn dup [coll]\n           (loop [c coll\n                  d ()]\n             (if\n              (empty? c)\n               (reverse d)\n               (recur (rest c) \n                     (into d (concat (take 1 c)(take 1 c))\n                       )\n               )\n               )\n             ))", "user": "5b9d3913e4b0c0b3ffbd4b37"}, {"problem": 32, "code": "#(interleave % %)", "user": "5b602a66e4b0c6492753e6fc"}, {"problem": 32, "code": "(fn duplicate-seq [s]\n\t(reduce (fn [l e]\n              (concat l (repeat 2 e)))\n            []\n            s))", "user": "5af3aa42e4b0cc2b61a3bc8c"}, {"problem": 32, "code": "#(interleave % %)", "user": "5bab5440e4b0a20761a23475"}, {"problem": 32, "code": "(fn dupe\n  [s]\n  (reduce\n   (fn [acc e]\n     (concat acc [e e]))\n   []\n   s))", "user": "5bab49bbe4b0a20761a23474"}, {"problem": 32, "code": "mapcat (partial repeat 2)", "user": "5ba947bfe4b0a20761a23440"}, {"problem": 32, "code": "#(reduce (fn[m v] (concat m (repeat 2 v))) '() %)", "user": "560152dee4b04bb52996e186"}, {"problem": 32, "code": "#(interleave % %)", "user": "5b98f7f3e4b0c0b3ffbd4ac2"}, {"problem": 32, "code": "(fn [col] \n  (reduce \n    #(conj %1 %2 %2)\n    []\n    col\n   )\n  )", "user": "5bafd5c8e4b0a20761a234dd"}, {"problem": 32, "code": "#(reduce (fn [xs n] (concat xs (repeat 2 n))) [] %)", "user": "5b759ca8e4b047b03b2036d0"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "5b77248ae4b047b03b2036e7"}, {"problem": 32, "code": "#(mapcat vector % %)", "user": "5bb23cf1e4b0a20761a2350a"}, {"problem": 32, "code": "reduce #(apply conj %1 (vector %2 %2)) []", "user": "5a3e6642e4b0447ef91cc5b3"}, {"problem": 32, "code": "(fn[l] (mapcat (partial repeat 2) l))", "user": "5bb33124e4b0a20761a2351c"}, {"problem": 32, "code": "#(interleave % %)", "user": "5a291617e4b07f18be40aa76"}, {"problem": 32, "code": "#(interleave % %)", "user": "5b329773e4b025bcb146f322"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5bab8c06e4b0a20761a2347e"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5bb905dce4b0a20761a235c7"}, {"problem": 32, "code": "reduce #(conj % %2 %2) []", "user": "5bb7b956e4b0a20761a235ad"}, {"problem": 32, "code": "(fn repeat_sequence\n  [lst]\n  (loop [lst lst\n         result ()]\n    (if (= (first lst) nil) result\n      (recur (rest lst) (concat result (repeat 2 (first lst)))))))", "user": "5bbbd077e4b0a20761a23615"}, {"problem": 32, "code": "(fn dup_sequence\n  ;duplicates each element of a sequence\"\n  [lst]\n  (loop [lst lst\n         result ()]\n    (if (= (first lst) nil) result\n      (recur (rest lst) (concat result (repeat 2 (first lst)))))))", "user": "5bbbcecee4b0a20761a23611"}, {"problem": 32, "code": "(fn [lst] (reduce concat (map #(list % %) lst)))", "user": "5bbbce0ee4b0a20761a2360d"}, {"problem": 32, "code": "(fn [x]\n  (interleave x x))", "user": "5baa1b58e4b0a20761a2344e"}, {"problem": 32, "code": "(fn foo [coll] (apply concat (map vector coll coll)))", "user": "59f4c42ce4b0966464fe6ab6"}, {"problem": 32, "code": "#(reduce (fn [acc el] (concat acc (list el el))) '() %)", "user": "5a68f374e4b0512ff01cda05"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "5bbc0ddfe4b0a20761a2361e"}, {"problem": 32, "code": "(fn [old & neww]\n  (if (empty? old)\n    (reverse neww)\n    (recur (rest old)\n      (conj (conj neww (first old) ) (first old) )\n    )\n  )      \n)", "user": "5bbd13a5e4b07a9b28b0ff95"}, {"problem": 32, "code": "(fn [s] (apply concat (map (partial repeat 2) s )))", "user": "5a79ce7fe4b03baeef9276c8"}, {"problem": 32, "code": "(fn [coll]\n  (loop [c coll\n         result []]\n    (if-let [hd (first c)]\n      (recur (rest c) (concat result [hd hd]))\n      result)))", "user": "5ad4c3d2e4b0ea6055cfabe1"}, {"problem": 32, "code": "(fn dup [xs]\n  (mapcat (fn [x] [x x]) xs))", "user": "587fb546e4b0f1effa3b75f9"}, {"problem": 32, "code": "(fn [s]\n  (reduce (fn [acc e] (-> acc (conj e) (conj e))) [] s))", "user": "5a0b9fc0e4b04bbd27e6d992"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5bc255b7e4b07a9b28b10029"}, {"problem": 32, "code": "(fn [xs]\n  (mapcat #(conj [] % %) xs))", "user": "5829d9f8e4b051871117bf4d"}, {"problem": 32, "code": "(fn [xs]\n  (mapcat #(conj [] % %) xs))", "user": "5bc15685e4b07a9b28b10016"}, {"problem": 32, "code": "#(reverse (reduce into () (map (partial repeat 2) %)))", "user": "5bb5cd43e4b0a20761a23575"}, {"problem": 32, "code": "(fn dbl [xs] (let [x (first xs)] (if x (lazy-seq (list* x x (dbl (rest xs)))))))", "user": "5bc20634e4b07a9b28b10022"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5bbbce70e4b0a20761a2360f"}, {"problem": 32, "code": "(partial mapcat #(list % %))", "user": "5bc39d2be4b07a9b28b10045"}, {"problem": 32, "code": "(fn [l] (mapcat #(list % %) l))", "user": "5bbbd484e4b0a20761a23617"}, {"problem": 32, "code": "(fn [col] (mapcat #(list % %) col))", "user": "5b85221ce4b047b03b2037c8"}, {"problem": 32, "code": "(fn [x] (loop [new-list [] \n               og-list x]\n          (if (empty? og-list)\n            new-list \n            (recur (conj new-list (first og-list) (first og-list)) (rest og-list))\n            )))", "user": "5bb3c9a8e4b0a20761a2352f"}, {"problem": 32, "code": "(fn [lst] (mapcat (fn [x] (repeat 2 x)) lst))", "user": "5bbbba29e4b0a20761a23609"}, {"problem": 32, "code": "(fn [args]\n  (mapcat #(vector % %) args))", "user": "543a8256e4b032a45b869327"}, {"problem": 32, "code": "#(mapcat vector %1 %1)", "user": "5bc488bde4b07a9b28b10053"}, {"problem": 32, "code": "(fn dup\n  [lst]\n  (mapcat #(repeat 2 %) lst))", "user": "5bbbcf9ee4b0a20761a23614"}, {"problem": 32, "code": "#(seq\n   (loop [x %\n          result []]\n     (if (seq x)\n       (recur (rest x) (conj result (first x) (first x)))\n       result)))", "user": "5bc82994e4b07a9b28b100b9"}, {"problem": 32, "code": "(fn [coll] (seq (reduce (fn [partial val] (conj (conj partial val) val)) [] coll)))", "user": "5bc6ef7ce4b07a9b28b1009f"}, {"problem": 32, "code": "(fn [x]\n  (reduce\n   #(do\n      (conj %1 %2 %2))\n   '[]\n   x))", "user": "5bb948f5e4b0a20761a235d5"}, {"problem": 32, "code": "(fn [lst] (mapcat #(repeat 2 %) lst))", "user": "5bc8c033e4b07a9b28b100ca"}, {"problem": 32, "code": "#(interleave (seq %) (seq %))", "user": "5bc7ba68e4b07a9b28b100b0"}, {"problem": 32, "code": "(fn [coll] (mapcat #(list % %) coll))", "user": "59d8f23ae4b0ef0a1e9b5c49"}, {"problem": 32, "code": "#(interleave % %)", "user": "5bbbce99e4b0a20761a23610"}, {"problem": 32, "code": "#(mapcat (fn [x] (repeat 2 x)) %)", "user": "5bc611e3e4b07a9b28b10083"}, {"problem": 32, "code": "mapcat (fn [x] (seq [x x]))", "user": "59a0286be4b0871e7608b82f"}, {"problem": 32, "code": "(fn dbl [coll]\n  (if (seq coll)\n     (let [x (first coll) xs (next coll)]\n       (lazy-cat (list x x) (dbl xs)))))", "user": "5bc833a5e4b07a9b28b100bb"}, {"problem": 32, "code": "(fn [coll] \n    (->>\n    coll\n    (reduce #(conj %1 %2 %2) [])\n    )\n  )", "user": "5bc28638e4b07a9b28b10033"}, {"problem": 32, "code": "#(reduce concat (map (fn [x] [x x]) %))", "user": "5bca2c71e4b07a9b28b100e7"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5bbbce60e4b0a20761a2360e"}, {"problem": 32, "code": "(fn [lst]\n  (mapcat #(list % %) lst))", "user": "5bcb672ee4b07a9b28b10100"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5bc50870e4b07a9b28b10069"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5bbbcf81e4b0a20761a23613"}, {"problem": 32, "code": "(fn [arr] (reduce (fn [new-map val] (conj (conj new-map val) val)) [] arr))", "user": "5bc352abe4b07a9b28b10041"}, {"problem": 32, "code": "(fn [lista] (reduce #(concat %1 [%2 %2]) '() lista))", "user": "5bcc9e7ae4b07a9b28b10114"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5bbbcf3ae4b0a20761a23612"}, {"problem": 32, "code": "(fn [coll]\n  (mapcat (fn [x] (take 2 (cycle [x]))) coll))", "user": "5bc7f2d6e4b07a9b28b100b7"}, {"problem": 32, "code": "(fn dup [[x & xs]]\n  (if-not x\n    []\n    (concat [x x]  (dup xs))))", "user": "5bcddaeee4b0e9689409ee07"}, {"problem": 32, "code": "(fn duplicate [coll]\n  (if (empty? coll)\n    '()\n  \t(let [[head & tail] coll]\n    \t(cons head (cons head (duplicate tail))))))", "user": "5bc8e91ee4b07a9b28b100ce"}, {"problem": 32, "code": "(fn dup\n  [input]\n  (reverse \n   (reduce\n    (fn \n     [output item]\n     (conj output item item))\n    '() \n    input)))", "user": "5bc4f266e4b07a9b28b10066"}, {"problem": 32, "code": "(fn [x] \n  (loop [items x\n         result []]\n    (if (empty? items)\n      result\n      (recur (rest items)\n             (conj result (first items) (first items))))))", "user": "593870e6e4b02506e01a29d6"}, {"problem": 32, "code": "#(apply concat (map vector % %))", "user": "5a8aa992e4b05369db4d24d8"}, {"problem": 32, "code": "mapcat (fn [x] [x x])", "user": "5b7d03a0e4b047b03b20373d"}, {"problem": 32, "code": "(fn [items] (reverse (reduce (fn [x y] (cons y (cons y x))) () items)))", "user": "554f817ce4b00713264bd9a2"}, {"problem": 32, "code": "(fn [s] (reduce #(conj %1 %2 %2) [] s) )", "user": "5b72b36ce4b047b03b2036a9"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5b337ff4e4b025bcb146f339"}, {"problem": 32, "code": "(fn [xs]\n  (loop [xs xs\n         reps 0\n         acc nil]\n    (if (empty? xs)\n      (reverse acc)\n      (if (< reps 2)\n        (recur xs (inc reps) (cons (first xs) acc))\n        (recur (rest xs) 0 acc)))))", "user": "5b673832e4b0c6492753e760"}, {"problem": 32, "code": "reduce\n  (fn [acc x]\n    (conj acc x x))\n  []", "user": "5bd7b8b8e4b0ed4b8aab4bc6"}, {"problem": 32, "code": "#(interleave % %)", "user": "567c63f6e4b05957ce8c61bb"}, {"problem": 32, "code": "(fn [input] (loop [in input out nil] (if (empty? in) (reverse out) (recur (rest in) (cons (first in) (cons (first in) out))))))", "user": "5bd297fee4b0e9689409ee63"}, {"problem": 32, "code": "(fn [l]\n  (mapcat (fn [x] [x x]) l))", "user": "5bd93897e4b0ed4b8aab4bee"}, {"problem": 32, "code": "(partial mapcat #(list % %))", "user": "5bd9549ee4b0ed4b8aab4bf0"}, {"problem": 32, "code": "(fn [to-dupe]\n\t(loop [remain to-dupe\n           to-return []]\n      (if (= (count remain) 1)\n        (concat to-return [(first remain) (first remain)])\n        (recur (rest remain) (concat to-return [(first remain) (first remain)])))))", "user": "59595f85e4b066ee0a44afa1"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5ba0dcfce4b0c0b3ffbd4b98"}, {"problem": 32, "code": "(fn duplicate [in]\n  (reduce concat (map #(take 2 (repeat %)) in)))", "user": "5bc7c3aee4b07a9b28b100b2"}, {"problem": 32, "code": "(fn [input]\n  (loop [i input res []]\n    (if (empty? i)\n      res\n     (recur (rest i) (conj res (first i) (first i))))\n  ))", "user": "5bd999cce4b0ed4b8aab4bf4"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5bbdd136e4b07a9b28b0ffab"}, {"problem": 32, "code": "(fn [x] (loop [x x o []] (if (empty? x) o (recur (rest x) (concat o [(first x) (first x)])))))", "user": "5bdf651ee4b0ed4b8aab4c6d"}, {"problem": 32, "code": "#(interleave % %)", "user": "5be0306be4b0ed4b8aab4c7d"}, {"problem": 32, "code": "(fn __ [s] (mapcat #(list %1 %1) s))", "user": "5be2e670e4b0ed4b8aab4ccc"}, {"problem": 32, "code": "(fn [xs]\n  (letfn [(helper [input result]\n                  (if (empty? input)\n                    result\n                    (helper (rest input) (concat (list (first input)) (list (first input)) result))))]\n    (reverse (seq (helper xs [])))))", "user": "5be58beae4b0ed4b8aab4d14"}, {"problem": 32, "code": "#(interleave % %)", "user": "5be5cebde4b0ed4b8aab4d19"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5be33a16e4b0ed4b8aab4cd6"}, {"problem": 32, "code": "#(apply concat (map (fn [x] [x x]) %))", "user": "5be6d0f8e4b0f319e2d7ec51"}, {"problem": 32, "code": "(fn [x] (mapcat #(repeat 2 %) x))", "user": "575f6a80e4b08062f99a4e80"}, {"problem": 32, "code": "#(interleave % %)", "user": "55469eede4b0a04f79299542"}, {"problem": 32, "code": "(fn [x]\n  (loop [items x result []]\n  \t(if (empty? items) result\n            (let [first-item (first items)]\n              (recur (rest items) (into result [first-item first-item]))))))", "user": "596aaeefe4b069c0a1a19808"}, {"problem": 32, "code": "#(reduce (fn [x y]\n              (conj x y y)) [] %)", "user": "5bc64843e4b07a9b28b10091"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5be70bd5e4b0f319e2d7ec53"}, {"problem": 32, "code": "(fn [coll](reduce #(conj %1 %2 %2) [] coll))", "user": "5be589f9e4b0ed4b8aab4d13"}, {"problem": 32, "code": "#(interleave % %)", "user": "5bece6a5e4b0a6d31fed2114"}, {"problem": 32, "code": "(fn\n  [input-array]\n  \t(reduce (fn [array element] (conj (conj array element) element)) [] input-array))", "user": "5bdb0b4ce4b0ed4b8aab4c10"}, {"problem": 32, "code": "(fn [xs]\n  (reduce #(conj %1 %2 %2) [] xs))", "user": "5ba15075e4b0a20761a2339e"}, {"problem": 32, "code": "(fn [l] (apply concat (map #(list % %) l)))", "user": "5b4b58f2e4b02d533a91bc9c"}, {"problem": 32, "code": "#(reduce (fn [a b] (conj a b b)) [] %)", "user": "5be79b5be4b0f319e2d7ec5a"}, {"problem": 32, "code": "mapcat #(sequence [% %])", "user": "5be182eae4b0ed4b8aab4c9d"}, {"problem": 32, "code": "#(interleave % %)", "user": "5bf0aefde4b0a6d31fed215a"}, {"problem": 32, "code": "(fn [x] ((fn doble [nseq, left]\n            (\n              if (empty? left)\n              nseq\n              (let [a (first left) b (rest left)]\n                (doble (concat nseq (seq [a a])) b)))) [] x))", "user": "5be909bae4b0f319e2d7ec6d"}, {"problem": 32, "code": "#(reduce (fn [acc item] (into acc [item item])) [] % )", "user": "5bec37e2e4b0f319e2d7ec96"}, {"problem": 32, "code": "(fn dup3[x]\n  (loop [res []\n         tail x]\n    (if (empty? tail)\n      res\n    (recur (conj res (first tail) (first tail)) (rest tail)))))", "user": "5bf50e76e4b0b326c961d8a0"}, {"problem": 32, "code": "(fn [coll] (mapcat #(list % %) coll))", "user": "5bf1b957e4b0a6d31fed216f"}, {"problem": 32, "code": "#(interleave % %)", "user": "5bea3177e4b0f319e2d7ec81"}, {"problem": 32, "code": "(fn [x] (mapcat #(list % %) x))", "user": "5bf5ddfde4b0bdcf453d159e"}, {"problem": 32, "code": "#(interleave % %)", "user": "5beb8e28e4b0f319e2d7ec8e"}, {"problem": 32, "code": "(fn [x]\n  (apply concat \n   (map #(list % %) x)\n  ))", "user": "5b15ab32e4b0cc2b61a3be72"}, {"problem": 32, "code": "#(interleave % %)", "user": "5bba703fe4b0a20761a235eb"}, {"problem": 32, "code": "(fn duplicator [sq]\n  (reduce\n    (fn [f s]\n      (concat f (list s s)))\n    '() sq))", "user": "5bfa25fbe4b0bdcf453d15c8"}, {"problem": 32, "code": "(fn [l] (reduce (fn [l x] (concat l (list x x))) '() l))", "user": "5bf313e8e4b0a6d31fed2188"}, {"problem": 32, "code": "reduce #(into %1 (take 2 (repeat %2))) []", "user": "5b6ccc58e4b0c6492753e7bb"}, {"problem": 32, "code": "(fn [x]\n  (apply concat (map (fn [y] (conj [y] y)) x))\n)", "user": "5be15f4de4b0ed4b8aab4c9b"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5beda647e4b0a6d31fed2122"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5be8bc2de4b0f319e2d7ec66"}, {"problem": 32, "code": "(fn [s] (reduce concat (map #(list % %) s)))", "user": "5bfa3e02e4b0bdcf453d15ca"}, {"problem": 32, "code": "#(mapcat (fn [i] [i i]) %)", "user": "5a09a6f7e4b01bb0ae8afe14"}, {"problem": 32, "code": "#(interleave % %)", "user": "5bed84b1e4b0a6d31fed2120"}, {"problem": 32, "code": "(fn [li]\n  (loop [l li\n         r nil]\n    (if (empty? l)\n      (reverse r)\n      (recur (rest l) (conj r (first l) (first l))))))", "user": "5ac9c737e4b0e27600da77d2"}, {"problem": 32, "code": "(fn\n    [s]\n    (reduce #(conj %1 %2 %2) [] s))", "user": "5b8db323e4b0c0b3ffbd49da"}, {"problem": 32, "code": "(fn [coll] (apply concat (map #(list % %) coll)))", "user": "5bef3e88e4b0a6d31fed213f"}, {"problem": 32, "code": "reduce\n(fn [r x]\n  (conj r x x)\n  ) []", "user": "5c01ba2ce4b0bdcf453d1656"}, {"problem": 32, "code": "(fn foo [x]\n\n    (if (> (count x) 0)\n        \n           \n     (conj (conj (foo (rest  x)   ) (first x) ) (first x))  \n     \n     \n     \n     \n        \n    )\n    )", "user": "5bed1e4ae4b0a6d31fed2118"}, {"problem": 32, "code": "mapcat (fn [x] [x x])", "user": "5c03e927e4b0bdcf453d167b"}, {"problem": 32, "code": "(fn f [arr] \n\n  (loop [ans [] subArr arr]\n    (if (> (count subArr) 0)\n      (recur (conj ans (first subArr) (first subArr)) (rest subArr))\n      ans\n    )\n  )\n)", "user": "5bf2cf8be4b0a6d31fed217c"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "5bfc082be4b0bdcf453d15e1"}, {"problem": 32, "code": "#(reverse(reduce (fn [col elem]\n   (into col (repeat 2 elem))\n)\n '() %))", "user": "5beebdb7e4b0a6d31fed2132"}, {"problem": 32, "code": "#(interleave % %)", "user": "5bfe4ecfe4b0bdcf453d1608"}, {"problem": 32, "code": "(fn [s] (reduce #(conj %1 %2 %2) [] s))", "user": "5c0a87e6e4b0bdcf453d1707"}, {"problem": 32, "code": "(fn [s] (reduce (fn [res elem] (conj res elem elem)) [] s))", "user": "5c05cae7e4b0bdcf453d16a3"}, {"problem": 32, "code": "#(reduce\n (fn [acc, val]\n  (conj (conj acc val) val)\n )\n []\n %\n)", "user": "5c0d0537e4b0bdcf453d173d"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5bc4599ae4b07a9b28b10050"}, {"problem": 32, "code": "#(apply interleave (repeat 2 %))", "user": "5c0e22cae4b01240ff56713b"}, {"problem": 32, "code": "(fn [s]\n  (reverse (reduce (fn [a x] (conj a x x)) '() s)))", "user": "5c0e58bfe4b01240ff567140"}, {"problem": 32, "code": "#(reduce (fn [v new] (conj v new new)) [] %)", "user": "5c10e7a2e4b01240ff56716b"}, {"problem": 32, "code": "#(reduce (fn [col el] (apply (partial conj col) (repeat 2 el))) [] %)", "user": "594d4c57e4b07ddc2dafae87"}, {"problem": 32, "code": "#(reduce (fn [coll item]\n          (conj coll item item)\n          ) [] %)", "user": "5c1229d5e4b01240ff567188"}, {"problem": 32, "code": "#(apply concat (map (fn [y] (take 2 (repeat y))) %1))", "user": "5bfada5ee4b0bdcf453d15d2"}, {"problem": 32, "code": "(fn dupe [[first & rest]]\n  (if (nil? first)\n    '()\n    (cons first (cons first (dupe rest)))))", "user": "57131a8ee4b07c98581c3a97"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "5c119da6e4b01240ff56717d"}, {"problem": 32, "code": "#(apply concat (for [x %] (list x x)))", "user": "5c13ce5ee4b01240ff5671a4"}, {"problem": 32, "code": "#(mapcat (partial repeat 2) %)\n\n;(fn [coll] (mapcat #(-> [% %]) coll))", "user": "5c13da47e4b01240ff5671a6"}, {"problem": 32, "code": "(fn [coll]\n  (loop [coll coll\n         res []]\n    (if (empty? coll)\n      res\n      (let [f (first coll)]\n      \t(recur (rest coll) (conj (conj res f) f))))))", "user": "5c04464ee4b0bdcf453d167d"}, {"problem": 32, "code": "(fn dups [lst] (reverse(reduce\n                    (fn [res ll] (into res (list ll ll)))\n                    ()\n                    lst)))", "user": "5bfc2068e4b0bdcf453d15e4"}, {"problem": 32, "code": "#(interleave % %)", "user": "5c0ebca5e4b01240ff567147"}, {"problem": 32, "code": "(fn [s] (mapcat vector s s))", "user": "5b8ec146e4b0c0b3ffbd49f0"}, {"problem": 32, "code": "#(interleave % %)", "user": "5c165d3ee4b01240ff5671d1"}, {"problem": 32, "code": "(fn [coll]\n  (reduce\n   (fn [l el]\n     (into l (take 2 (repeat el))))\n   []\n   coll))", "user": "5c15537ae4b01240ff5671bf"}, {"problem": 32, "code": "#(interleave % %)", "user": "5c1aadcde4b01240ff567209"}, {"problem": 32, "code": "(fn [x] (reduce (fn [coll x] (conj coll x x)) [] x))", "user": "5c1bee41e4b01240ff567218"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5c13dc37e4b01240ff5671a7"}, {"problem": 32, "code": "(fn [coll] (reduce #(concat %1 [%2 %2]) '() coll))", "user": "5c1edf23e4b0efcb0b05b25d"}, {"problem": 32, "code": "(fn [a]\n  (apply concat\n         (map (juxt identity identity)\n              a\n              )))", "user": "58273e82e4b051871117bf1b"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5b0bd9cfe4b0cc2b61a3bdd9"}, {"problem": 32, "code": "(fn [s] (apply concat (map #(repeat 2 %) s)))", "user": "56215da7e4b03f08ee9a921b"}, {"problem": 32, "code": "(fn [x] (reduce (fn [a b] (conj a b b)) [] x))", "user": "5c1d9f05e4b0efcb0b05b24c"}, {"problem": 32, "code": "#(apply concat (map (partial repeat 2) %))", "user": "5c17467fe4b01240ff5671df"}, {"problem": 32, "code": "(fn [mylist]\n  (let [f (fn [l s] (conj l s s))]\n        \n     (reduce f [] mylist)   \n        ))", "user": "5c0e3f86e4b01240ff56713d"}, {"problem": 32, "code": "reduce #(conj (conj %1 %2) %2) []", "user": "5c20b6abe4b07e362c230576"}, {"problem": 32, "code": "(fn duplicate\n  [xs]\n  (apply concat (map (fn [x] (list x x)) xs)))", "user": "5c222b7de4b07e362c230588"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "5c228b51e4b07e362c23058c"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5c2195dce4b07e362c230580"}, {"problem": 32, "code": "(fn [x] (mapcat identity (map #(conj [] % %) x )))", "user": "582c986ee4b051871117bf9b"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "5c092334e4b0bdcf453d16ea"}, {"problem": 32, "code": "(fn outer [[h & r]]\n  (when (not (nil? h))\n    (lazy-seq (cons h (cons h (outer r))))))", "user": "5c219c0fe4b07e362c230581"}, {"problem": 32, "code": "(fn dupl [xs] (mapcat #(list % %) xs))", "user": "5776903ee4b0979f8965163b"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5c2649c8e4b07e362c2305bf"}, {"problem": 32, "code": "(partial mapcat (fn [x] [x x]))", "user": "5c272f82e4b07e362c2305cb"}, {"problem": 32, "code": "(fn [input]\n  (loop [[first & rest] input\n        new (empty input)]\n    (if (nil? first)\n      new\n      (recur rest (conj new first first)))))", "user": "5c195cb2e4b01240ff5671f7"}, {"problem": 32, "code": "#(apply concat (map (fn [x] [x x]) %))", "user": "5c21a531e4b07e362c230582"}, {"problem": 32, "code": "#(reverse (reduce (fn [p c] (conj p c c)) () %))", "user": "5c289c7ce4b07e362c2305d8"}, {"problem": 32, "code": "#(interleave % %)", "user": "5c2836ebe4b07e362c2305d4"}, {"problem": 32, "code": "(fn [coll]\n  (loop [[c & more :as all] coll\n         acc []]\n  \t(if all\n      (recur more (conj acc c c))\n      (seq acc)\n    )\n  )\n)", "user": "5ba75fdfe4b0a20761a23419"}, {"problem": 32, "code": "(fn [x] (mapcat (fn [c] [c c]) x))", "user": "5b113f20e4b0cc2b61a3be2c"}, {"problem": 32, "code": "#(mapcat (fn [x] (seq [x x])) %)", "user": "55965515e4b0c79f6e1db978"}, {"problem": 32, "code": "(fn [coll] (seq (reduce #(conj %1 %2 %2) [] coll)))", "user": "5c24671be4b07e362c2305a1"}, {"problem": 32, "code": "(fn dup\n  [x]\n  (reduce\n    (fn [result nextElement]\n      (conj (conj result nextElement) nextElement)\n      ) [] x)\n  )", "user": "5c24c654e4b07e362c2305a7"}, {"problem": 32, "code": "#(mapcat (partial repeat 2) %)", "user": "50eeeadae4b02c17778c91f3"}, {"problem": 32, "code": "(fn duplicate-sequence [input]\n  (reduce (fn [col ele] (apply conj col ele)) (map #(apply vector (repeat 2 %)) input)))", "user": "5c196dc3e4b01240ff5671fa"}, {"problem": 32, "code": "(fn [s]\n  (reduce #(concat %1 (list %2 %2))\n          '()\n          s))", "user": "57d57f65e4b0bd073c2023b3"}, {"problem": 32, "code": "#(mapcat (fn [n] (repeat 2 n) ) %)", "user": "5c31517de4b0d62ef62d9f28"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5c316de5e4b0d62ef62d9f2b"}, {"problem": 32, "code": "mapcat (fn [v] [v v])", "user": "5c2f0cdfe4b0d62ef62d9f09"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5c32ea85e4b0d62ef62d9f3e"}, {"problem": 32, "code": "#(loop[data %1\n       res []]\n  (if (empty? data)\n    (seq res)\n    (recur\n      (rest data)\n      (into res [(first data) (first data)])\n    )  \n  )\n)", "user": "5bfcdc52e4b0bdcf453d15f4"}, {"problem": 32, "code": "#(sort (concat % %))", "user": "5c0fedade4b01240ff567157"}, {"problem": 32, "code": "(partial mapcat #(-> [% %]))", "user": "5c2d1f63e4b0d62ef62d9ef0"}, {"problem": 32, "code": "(fn duplicate-sequence\n          [sequence]\n          (->> sequence\n               (map (fn [x] [x x]))\n               (mapcat identity)\n               ))", "user": "5c36d110e4b0d62ef62d9f6a"}, {"problem": 32, "code": "#(mapcat list % %)", "user": "5c34cb2ee4b0d62ef62d9f59"}, {"problem": 32, "code": "#(interleave % %)", "user": "5c337305e4b0d62ef62d9f48"}, {"problem": 32, "code": "#(interleave % %)", "user": "5c3ac091e4b0d62ef62d9f95"}, {"problem": 32, "code": "#(reverse (reduce (fn [s x] (conj s x x)) '() %))", "user": "5c32603ee4b0d62ef62d9f38"}, {"problem": 32, "code": "#(sort (concat % %))", "user": "5c35acffe4b0d62ef62d9f62"}, {"problem": 32, "code": "(fn [my-seq] (apply concat (map #(conj () % %) my-seq)))", "user": "5c321b8ae4b0d62ef62d9f32"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "5c3310cde4b0d62ef62d9f43"}, {"problem": 32, "code": "(fn [x]\n   (let [val1 (repeat 2 x)\n         val2 (sort (concat (first val1) (second val1)))]\n     val2))", "user": "5b754a5ae4b047b03b2036c8"}, {"problem": 32, "code": "#(interleave % %)", "user": "5c379636e4b0d62ef62d9f76"}, {"problem": 32, "code": "(fn dup [coll]\n  (reduce (fn [res x]\n            (let [single (conj res x)]\n            (conj single x)))\n        []\n        coll))", "user": "54d90b36e4b0a52adc2e2049"}, {"problem": 32, "code": "#(reduce concat (map (fn [x] [x x]) %))", "user": "5c308385e4b0d62ef62d9f1c"}, {"problem": 32, "code": "mapcat #(list %1 %1)", "user": "5c3ec6dbe4b08cd430848e8a"}, {"problem": 32, "code": "(fn [col] (\n           reduce #(conj %1 %2 %2) [] col\n           \n           \n           ))", "user": "53b0750fe4b047364c044483"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5c0614f6e4b0bdcf453d16a9"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "5c2dfca3e4b0d62ef62d9efc"}, {"problem": 32, "code": "#(sort (into % %))", "user": "5c374db6e4b0d62ef62d9f73"}, {"problem": 32, "code": "#_\n(fn dup [x]\n  (if (empty? x)\n    ()\n    (conj\n     (conj (dup (rest x))\n           (first x))\n     (first x))))\n\n(fn [coll]\n    (interleave coll coll))", "user": "529e3258e4b04e0c58e87b8d"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "5c408a61e4b08cd430848eb2"}, {"problem": 32, "code": "mapcat (fn [x] [x x])", "user": "5c30d90de4b0d62ef62d9f22"}, {"problem": 32, "code": "(fn dup [coll]\n  (mapcat identity(map #(repeat 2 %) coll)))", "user": "5c411df3e4b08cd430848ebf"}, {"problem": 32, "code": "(fn [x]\n  (loop [cur x acc '()]\n    (if (= (count cur) 0)\n      acc\n      (recur (rest cur) (concat (concat acc (list (first cur))) (list (first cur))))\n    )\n  )\n)", "user": "5c3f6322e4b08cd430848e97"}, {"problem": 32, "code": "(fn [xs] (reduce (fn [acc x] (concat acc (take 2 (repeat x)))) [] xs))", "user": "5c3f37fce4b08cd430848e91"}, {"problem": 32, "code": "(fn duplicate [coll]\n  (if (empty? coll)\n    '()\n    (conj (duplicate (rest coll)) (first coll) (first coll))\n    )\n  )", "user": "5c3fab3de4b08cd430848e9e"}, {"problem": 32, "code": "(fn [l] (mapcat #(list % %) l))", "user": "54dc2c3ae4b024c67c0cf77d"}, {"problem": 32, "code": "#(interleave % %)", "user": "53336ab8e4b019098a6f8b84"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "57635e2de4b0994c1922fbbf"}, {"problem": 32, "code": "#(mapcat list % %)", "user": "5c3796b3e4b0d62ef62d9f77"}, {"problem": 32, "code": "(fn dup [s]\n  (reduce (fn [s1 s2](conj s1 s2 s2)) [] s))", "user": "5c486dece4b0e06e1360a3c0"}, {"problem": 32, "code": "reduce (fn [xs c] \n         (conj xs c c))\n\t\t[]", "user": "5c387c51e4b0d62ef62d9f83"}, {"problem": 32, "code": "(fn [l] (reduce #(conj (conj %1 %2) %2 ) [] l))", "user": "5c4ab449e4b0f9f7a8770e57"}, {"problem": 32, "code": "(fn [coll] (reduce (fn [acc val] (concat acc (list val val))) [] coll))", "user": "52384eb1e4b0fae3832e99fa"}, {"problem": 32, "code": "#(loop [s %\n         result []]\n    (if (next s)\n      (recur (rest s) (conj (conj result (first s)) (first s)))\n      (conj (conj result (first s)) (first s))))", "user": "502ea967e4b06efe12e8cc76"}, {"problem": 32, "code": "(fn\n  [sequence]\n  (interleave sequence sequence)\n)", "user": "5c493046e4b0e06e1360a3cb"}, {"problem": 32, "code": "#(mapcat (fn [char] (repeat 2 char)) %)", "user": "5c48757fe4b0e06e1360a3c3"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5c45e703e4b0e06e1360a391"}, {"problem": 32, "code": "(fn [coll] (reduce #(conj (conj %1 %2) %2) [] coll))", "user": "5c3cd80fe4b0d62ef62d9faa"}, {"problem": 32, "code": "(fn [col] (sort (concat col col)))", "user": "5c17bfebe4b01240ff5671e5"}, {"problem": 32, "code": "#(apply concat (map (fn [x] (repeat 2 x)) %))", "user": "5c4c74efe4b0f9f7a8770e76"}, {"problem": 32, "code": "#(interleave % %)", "user": "5c512811e4b0fb8c5ffd99c2"}, {"problem": 32, "code": "(fn duplicate [coll]\n  (apply concat (map (partial repeat 2) coll)))", "user": "5c506951e4b0f9f7a8770ec5"}, {"problem": 32, "code": "#(mapcat (fn [i] [i i]) %)", "user": "5c50048ae4b0f9f7a8770eb9"}, {"problem": 32, "code": "#(mapcat list % %)", "user": "558ea13be4b0277789237654"}, {"problem": 32, "code": "(fn [s] \n  (mapcat #(take 2 (repeat %)) s)\n  )", "user": "5c4ad616e4b0f9f7a8770e5a"}, {"problem": 32, "code": "(fn [x] (reduce concat nil (map #(list % %) x)))", "user": "5bc09ebae4b07a9b28b10005"}, {"problem": 32, "code": "#(interleave % %)", "user": "5b14475be4b0cc2b61a3be5a"}, {"problem": 32, "code": "(fn dup [x] (if (empty? x) nil (concat (list (first x) (first x)) (dup (rest x)))))", "user": "5c54e605e4b0fb8c5ffd9a14"}, {"problem": 32, "code": "(fn [s] (apply concat (map #(repeat 2 %) s)))", "user": "5549ca1ce4b0a04f7929956c"}, {"problem": 32, "code": "#(mapcat (fn [input](repeat 2 input)) %1)", "user": "5c582e7be4b0fb8c5ffd9a55"}, {"problem": 32, "code": "reduce (fn [a b] (conj a b b)) []", "user": "5c527129e4b0fb8c5ffd99de"}, {"problem": 32, "code": "mapcat (fn [x] [x x])", "user": "5c53127ee4b0fb8c5ffd99ef"}, {"problem": 32, "code": "(partial mapcat #(repeat 2 %))", "user": "5c51c930e4b0fb8c5ffd99ce"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "5a6dbaf5e4b0512ff01cda63"}, {"problem": 32, "code": "#(->> %\n       (repeat)\n       (take 2)\n       (apply interleave))", "user": "5c435a9fe4b0e06e1360a367"}, {"problem": 32, "code": "reduce #(conj (conj %1 %2) %2) []", "user": "5c38422ae4b0d62ef62d9f7f"}, {"problem": 32, "code": "#(reverse (reduce (fn [col value] (conj (conj col value) value)) '() %))", "user": "5c481764e4b0e06e1360a3ba"}, {"problem": 32, "code": "(fn [lst] (reduce concat (map (fn [n] (repeat 2 n)) lst)))", "user": "5c59b1d3e4b01df32ab73261"}, {"problem": 32, "code": "(fn [s] (loop [s s\n               ss []]\n          (if (empty? s) ss\n            (recur (rest s)\n                   (conj ss (first s) (first s)\n                         )\n            )\n          )\n         )\n)", "user": "5c5732c8e4b0fb8c5ffd9a3f"}, {"problem": 32, "code": "(fn [col]\n  (reduce \n    (fn [result item] \n      (conj result item item)) \n    () \n    (reverse col)))", "user": "579dd954e4b05b1deef9ae1b"}, {"problem": 32, "code": "(fn [x] (interleave x x))", "user": "5c3de434e4b0d62ef62d9fb8"}, {"problem": 32, "code": "(fn duplicate-seq [coll]\n  (apply concat\n    (for [x coll\n          :let [y (list x x)]]\n      y\n      ))\n  )", "user": "5c51d700e4b0fb8c5ffd99d1"}, {"problem": 32, "code": "(fn [x] (sort (concat x x)))", "user": "5c4da940e4b0f9f7a8770e87"}, {"problem": 32, "code": "#(interleave % %)", "user": "592883f1e4b072a2710fceea"}, {"problem": 32, "code": "(fn f [lst]\n  (if (empty? lst)\n    nil\n    (cons (first lst) (cons (first lst) (f (rest lst))))))", "user": "5c62979fe4b0fca0c162264c"}, {"problem": 32, "code": "#(mapcat (fn [x] [x x]) %)", "user": "5c58736be4b01df32ab73247"}, {"problem": 32, "code": "(fn\n  [items]\n  (mapcat #(list % %) items))", "user": "5c6227fee4b0fca0c1622641"}, {"problem": 32, "code": "(fn duplicate-seq [sq]\n  (loop [sq sq res []]\n    (if (empty? sq)\n      res\n      (recur (rest sq) (conj res (first sq) (first sq))))))", "user": "5c6314c5e4b0fca0c1622658"}, {"problem": 32, "code": "(fn [coll]\n  (reduce concat (map #(list % %) coll)))", "user": "5c5d2e90e4b01df32ab732af"}, {"problem": 32, "code": "(fn dupli [x]\n  \n  (loop [i 0 result []]\n    (if (< i (count x))\n      (let [qq (get x i)\n               oput (repeat 2 qq)\n                rst (concat result oput)]\n               (recur (inc i) rst ))\n      result)))", "user": "5b98f174e4b0c0b3ffbd4ac1"}, {"problem": 32, "code": "reduce (fn [x y] (concat x (concat (list y) (list y)))) '()", "user": "5c52f3fce4b0fb8c5ffd99e9"}, {"problem": 32, "code": "(fn my-dupe \n    ([seq] (my-dupe seq ()))\n    ([seq collection]\n        (cond\n            (empty? seq) (into () collection)\n            :else \n                (my-dupe (rest seq)\n                        (conj collection\n                           (first seq)\n                           (first seq))))))", "user": "59cd351ee4b0ef0a1e9b5b35"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "5c596d6ce4b01df32ab73257"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5c5d8c04e4b01df32ab732b4"}, {"problem": 32, "code": "(fn [a] (reverse (reduce #(conj %1 %2 %2) '() a)))", "user": "53a5bc3ae4b0ef122a8689c3"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5c66d5d3e4b0fca0c16226af"}, {"problem": 32, "code": "(fn [x]\n    (mapcat identity (map #(list % %) x)))", "user": "5b269cf3e4b063e2438bcc35"}, {"problem": 32, "code": "(fn [xs]\n  (mapcat #(take 2 (repeat %)) xs))", "user": "58b12635e4b0ebc645576cf4"}, {"problem": 32, "code": "(fn [xs] (mapcat vector xs xs))", "user": "5c6448d6e4b0fca0c1622674"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "5c41db45e4b08cd430848ece"}, {"problem": 32, "code": "(fn\n  [x]\n  (loop [coll x\n         res []]\n    (if (empty? coll)\n      res\n    (recur (rest coll) (conj res (first coll) (first coll)))\n    )\n    )\n  )", "user": "5c6cb3bfe4b0fca0c1622730"}, {"problem": 32, "code": "#(mapcat (fn [s] (repeat 2 s)) %)", "user": "5c5dddafe4b01df32ab732bb"}, {"problem": 32, "code": "#(mapcat (fn [x] (repeat 2 x)) %)", "user": "5c619df4e4b0fca0c1622637"}, {"problem": 32, "code": "#(apply concat (map (fn [x] (list x x)) %))", "user": "5c6d0e51e4b0fca0c1622735"}, {"problem": 32, "code": "#(loop[a 0 x []]\n  \t(if(< a (count %))\n\t\t(recur (inc a)(conj(conj x (nth % a))(nth % a)))\n    \tx   \n  \t) \n)", "user": "5c683fb5e4b0fca0c16226d5"}, {"problem": 32, "code": "#(reverse (reduce (fn [a b] (conj a b b)) '() %))", "user": "5c6e1006e4b0fca0c1622744"}, {"problem": 32, "code": "#(reverse (reduce (fn[x y](conj x y y)) () %))", "user": "5c52fa3ce4b0fb8c5ffd99eb"}, {"problem": 32, "code": "(fn [coll]\n  (loop [[r & more :as all] (seq coll)\n         acc '()]\n    (if all\n      (recur more (conj acc r r))\n      (reverse acc))))", "user": "5c718e6ce4b0fca0c1622796"}, {"problem": 32, "code": "(fn [c]\n  (reduce\n   \t(fn [acc e]\n      (conj acc e e))\n   \t[]\n   \tc))", "user": "5c73b8bae4b0fca0c16227ba"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5c6da283e4b0fca0c162273e"}, {"problem": 32, "code": "reduce #(into %1 (list %2 %2)) []", "user": "5c6e8b57e4b0fca0c1622755"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5c706454e4b0fca0c1622780"}, {"problem": 32, "code": "(fn dup-seq\n  [params]\n  \"http://www.4clojure.com/problem/32\"\n  (reduce (fn [prev curr]\n            (conj prev curr curr))\n          []\n          params))", "user": "5c73bcf9e4b0fca0c16227bb"}, {"problem": 32, "code": "#(mapcat (fn [ele] (repeat 2 ele)) %)", "user": "5c706232e4b0fca0c162277e"}, {"problem": 32, "code": "#(interleave % %)", "user": "5c5b246ae4b01df32ab73286"}, {"problem": 32, "code": "(fn [seqns] (mapcat #(repeat 2 %) seqns))", "user": "5c6e7cc1e4b0fca0c1622752"}, {"problem": 32, "code": "#(sort(into % (identity %)))", "user": "5c784248e4b0fca0c162281f"}, {"problem": 32, "code": "reduce (fn [a b] (conj a b b)) []", "user": "5b9783dae4b0c0b3ffbd4a93"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5c72c2b9e4b0fca0c16227ab"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5c787131e4b0fca0c1622825"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5c792c34e4b0fca0c1622834"}, {"problem": 32, "code": "(fn [input-seq] (reduce (fn [acc item] (conj (vec (conj acc item)) item)) '() input-seq))", "user": "5c723f4be4b0fca0c16227a0"}, {"problem": 32, "code": "(partial mapcat #(list % %))", "user": "5c7c1d8ee4b0d597f478ca88"}, {"problem": 32, "code": "(fn dupe\n  [coll]\n  (apply concat (map list coll coll))\n)", "user": "5c75a30ee4b0fca0c16227df"}, {"problem": 32, "code": "(fn dup [sequ]\n  (loop [s sequ du []]\n    (if (empty? s)\n      (seq du)\n      (recur (rest s) (conj du (first s) (first s)) ) ) ) )", "user": "5c7d5a0ce4b0d597f478caab"}, {"problem": 32, "code": "#(interleave % %)", "user": "5b100648e4b0cc2b61a3be17"}, {"problem": 32, "code": "(fn [sq] (reverse (reduce (fn [nsq curr] (into (into nsq (list curr)) (list curr))) '() sq)))", "user": "5c76577ae4b0fca0c16227ea"}, {"problem": 32, "code": "#(->> %\n      (map (fn [x] [x x]))\n      (apply concat))", "user": "5c664b87e4b0fca0c16226a5"}, {"problem": 32, "code": "(fn [s] (mapcat #(identity (list % %)) s))", "user": "5c7bc0a5e4b0fca0c1622865"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5c8002cde4b0c8042a70ce09"}, {"problem": 32, "code": "(fn [s] (mapcat (fn [e] (list e e)) s))", "user": "5c7ef3f3e4b0d597f478cad7"}, {"problem": 32, "code": "(fn [coll]\n   (reduce (fn [acc item]\n             (conj acc item item))\n           [] coll))", "user": "5a64dcabe4b0512ff01cd9a9"}, {"problem": 32, "code": "#(apply concat (map (fn [a] [a a])\n               %))", "user": "5c26c9b3e4b07e362c2305c5"}, {"problem": 32, "code": "#(let [y %1 x %1]\n   (sort (into y x)))", "user": "5c813b27e4b0c8042a70ce22"}, {"problem": 32, "code": "#(mapcat (fn [el] [el el]) %)", "user": "5bcf0b1be4b0e9689409ee24"}, {"problem": 32, "code": "(fn [x]\n  (mapcat #(repeat 2 %) x))", "user": "5c748bf5e4b0fca0c16227cb"}, {"problem": 32, "code": "#(mapcat (fn [x] (repeat 2 x)) %)", "user": "5c8319c3e4b0c8042a70ce45"}, {"problem": 32, "code": "#(interleave % %)", "user": "5c74b043e4b0fca0c16227ce"}, {"problem": 32, "code": "(fn replic\n  [lst]\n  (if (empty? lst)\n    lst\n    (if (zero? 2)\n      ()\n      (loop [result ()\n             i      0]\n        (if (= (count lst) i)\n          result\n          (recur (concat result (repeat 2 (nth lst i)))\n                 (inc i)))))))", "user": "5c7dad57e4b0d597f478caba"}, {"problem": 32, "code": "#(interleave % %)", "user": "56ee905be4b04a395b9a044f"}, {"problem": 32, "code": ";(fn dup      ; sa milicarudic, ali je vise coll, a manje seq\n;  [arg]\n;  (seq (reduce (fn [rez arg]\n;                  (into rez (repeat 2 arg)))\n;                [] arg)))\n\n(fn [coll]     ; https://github.com/ptrv/4clojure-solutions/blob/master/solutions.clj\n  (reverse\n   (reduce #(cons %2 (cons %2 %1)) '() coll)))", "user": "5839efeae4b089d5ab817d47"}, {"problem": 32, "code": "(fn [s] \n  (mapcat identity \n    (map (fn [x] (cons x (cons x '()))) s)\n  )\n)", "user": "5c832691e4b0c8042a70ce48"}, {"problem": 32, "code": "(fn [l] \n  (loop [in l result l]\n  \t(if (empty? in)\n     \t(sort result)\n \t\t(recur (rest in) (conj result (first in))))))", "user": "5c558070e4b0fb8c5ffd9a1e"}, {"problem": 32, "code": "#(interleave % %)", "user": "5c7f7889e4b0d597f478cae0"}, {"problem": 32, "code": "(fn lstDuplicate\n  [lst]\n  (loop[lst (seq lst)\n        resul ()]\n    (if (empty? lst)\n      (reverse resul)\n      (recur (rest lst) (conj resul (first lst) (first lst)))\n      )\n    )\n  )", "user": "5c82db41e4b0c8042a70ce42"}, {"problem": 32, "code": "(fn replicate-seq [coll]\n  (mapcat #(repeat 2 %) coll))", "user": "5c79030be4b0fca0c1622830"}, {"problem": 32, "code": "mapcat #(list %%)", "user": "5c746c31e4b0fca0c16227c8"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5c75a830e4b0fca0c16227e0"}, {"problem": 32, "code": "#(interleave % %)", "user": "5c81c933e4b0c8042a70ce2d"}, {"problem": 32, "code": "#(interleave % %)", "user": "5be96111e4b0f319e2d7ec70"}, {"problem": 32, "code": "(fn [seq]\n\t (reduce (fn [res a] (into res [a a])) [] seq))", "user": "5c87c79be4b048ec896c591b"}, {"problem": 32, "code": "(fn duo [lst]\n  (mapcat #(repeat 2 %) lst))", "user": "5c7d5463e4b0d597f478caa9"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5c70641de4b0fca0c162277f"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5c7d947be4b0d597f478cab6"}, {"problem": 32, "code": "#(interleave % %)", "user": "5c7bb8c0e4b0fca0c1622864"}, {"problem": 32, "code": "(fn [list]\n  (mapcat (partial repeat 2) list))", "user": "5c852e3ae4b0c8042a70ce78"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5c7c8c72e4b0d597f478ca96"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5c7741dce4b0fca0c1622806"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5c8ecb58e4b048ec896c59b0"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5c7eaadfe4b0d597f478cace"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5c8fd8f3e4b048ec896c59c7"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5c86b769e4b0c8042a70ce9b"}, {"problem": 32, "code": "(fn [s]\n (reverse (reduce #(conj %1 %2 %2) '() s)))", "user": "566a0845e4b04acd4f672e05"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "5c91ae79e4b048ec896c59eb"}, {"problem": 32, "code": "(fn [seq]\n  (reduce concat (map #(take 2 (repeat %)) seq)))", "user": "5c891afde4b048ec896c5935"}, {"problem": 32, "code": "(fn duplicate-seq\n  [coll]\n  (loop [in coll\n         out ()]\n    (if (empty? in)\n      (reverse out)\n      (recur (rest in) (cons (first in) (cons (first in) out))))))", "user": "5c92105ce4b048ec896c59f7"}, {"problem": 32, "code": "(fn [elements]\n  (apply concat (map (fn [x] [x x]) elements)))", "user": "5be0b916e4b0ed4b8aab4c8f"}, {"problem": 32, "code": "(fn [things]\n  (reduce (fn\n            [acc cur]\n            (conj (conj acc cur) cur))\n          '()\n          (reverse things)))", "user": "5c7c78c9e4b0d597f478ca94"}, {"problem": 32, "code": "(fn [coll]\n  (letfn [(f* [acc el]\n              (conj acc el el))]\n    (reduce f* [] coll)))", "user": "5c987160e4b048ec896c5a82"}, {"problem": 32, "code": "(fn [x]\n   (->> x\n        (map #(vector % %))\n        (reduce concat)))", "user": "5b6002c2e4b0c6492753e6fb"}, {"problem": 32, "code": "#(interleave % %)", "user": "5c896f46e4b048ec896c5940"}, {"problem": 32, "code": "(partial mapcat #(list % %))", "user": "5bd0ea60e4b0e9689409ee45"}, {"problem": 32, "code": "(fn [x] (sort (concat x x)))", "user": "5c925cb3e4b048ec896c5a05"}, {"problem": 32, "code": "(fn [sq] (->> sq\n              (reduce (fn [result s]\n                        (conj result s s)) [])))", "user": "5c995fa4e4b048ec896c5a96"}, {"problem": 32, "code": "(fn f [s]\n  (let [f*\n        (fn [acc s*]\n          (conj acc s* s*))]\n    (reduce f* [] s)))", "user": "5c92161de4b048ec896c59f9"}, {"problem": 32, "code": "#(interleave % %)", "user": "5c9d0a0be4b048ec896c5afc"}, {"problem": 32, "code": "(fn [in]\n (apply list\n  (reduce #(conj %1 %2 %2) [] in)))", "user": "510608ebe4b01150e115ebe3"}, {"problem": 32, "code": "(partial mapcat #(list % %))", "user": "5ca14eb1e4b048ec896c5b7d"}, {"problem": 32, "code": "(fn [y](mapcat (fn [x] (repeat 2 (identity x))) y))", "user": "5b5b4176e4b0c6492753e6ac"}, {"problem": 32, "code": "(fn [vectr] (mapcat #(vector % %) vectr))", "user": "5ca1f8a1e4b048ec896c5b8c"}, {"problem": 32, "code": "(fn [lst]\n    (loop\n      [[f & r] lst, acc []]\n      (if\n        (nil? f)\n        acc\n        (recur r (conj acc f f)))))", "user": "5c9dcb36e4b048ec896c5b1d"}, {"problem": 32, "code": "(fn dup [l] (reduce into (map #(into [%] [%]) l)))", "user": "5c936567e4b048ec896c5a1b"}, {"problem": 32, "code": "#(sort (concat % %))", "user": "58b84c28e4b0ebc645576d94"}, {"problem": 32, "code": "(fn [in] (mapcat \n            (fn [a] (list a  a))  in ))", "user": "5c94cbb1e4b048ec896c5a3d"}, {"problem": 32, "code": "(comp\n  reverse\n  (partial (fn [accum [c & cs]]\n             (if (empty? cs)\n               (cons c (cons c accum))\n               (recur (cons c (cons c accum)) cs)))\n           ()))", "user": "573d27b4e4b05c31a32c080f"}, {"problem": 32, "code": "(fn [s] (->> s\n    (partition-by identity)\n    (mapcat #(repeat 2 %))\n    (reduce concat)))", "user": "5ca622f3e4b048ec896c5be0"}, {"problem": 32, "code": "#(interleave % %)", "user": "5c950334e4b048ec896c5a44"}, {"problem": 32, "code": "#(interleave % %)", "user": "55a24698e4b0acc240e31523"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "5c09e555e4b0bdcf453d16fd"}, {"problem": 32, "code": "(fn [x]\n  (apply concat (map #(vector % %) x)))", "user": "5ca04cc3e4b048ec896c5b69"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5987f5b1e4b021a7a535fead"}, {"problem": 32, "code": "(fn [x] (apply list (reduce #(conj %1 %2 %2) [] x)))", "user": "598ff38ce4b0fcebec4de869"}, {"problem": 32, "code": "(fn duplicate\n [s]\n (reduce (fn double-conj\n            [coll x]\n            (-> coll\n                (conj x)\n                (conj x))) [] s))", "user": "5add1fede4b0837691e92c0a"}, {"problem": 32, "code": "(fn [data]\n    (reduce #(concat %1 (list %2 %2)) '() data))", "user": "5adf63a7e4b0837691e92c34"}, {"problem": 32, "code": "#(interleave % %)", "user": "5ca19c10e4b048ec896c5b81"}, {"problem": 32, "code": "(fn duplicate [x]\n  (if (empty? x)\n    x\n    (concat (list (first x)\n                  (first x))\n            (duplicate (rest x)))))", "user": "5c538cb5e4b0fb8c5ffd99fb"}, {"problem": 32, "code": "(fn [s] (reduce #(conj %1 %2 %2) [] s))", "user": "5cab33e7e4b048ec896c5c48"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5ca1c45ae4b048ec896c5b85"}, {"problem": 32, "code": "mapcat #(vector % %)", "user": "5caf9cace4b026601754b89b"}, {"problem": 32, "code": "(fn q32 [input]\n  (->> (for [x input] [x x]) (apply concat)))", "user": "5cab0ad9e4b048ec896c5c46"}, {"problem": 32, "code": "#(interleave % %)", "user": "5c371f5be4b0d62ef62d9f72"}, {"problem": 32, "code": "(fn [s]\n  (sort (reduce conj s s)))", "user": "5cada3b8e4b026601754b872"}, {"problem": 32, "code": "(fn [coll]\n  (mapcat identity (for [x coll] (repeat 2 x))))", "user": "5c9419fae4b048ec896c5a2b"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "5cb11a72e4b026601754b8c6"}, {"problem": 32, "code": "(comp (partial reduce concat) (partial map #(list % %)))", "user": "5b507222e4b02d533a91bce7"}, {"problem": 32, "code": "#(reverse (reduce (fn [s n] (conj s n n)) '() %))", "user": "5cb41c40e4b026601754b911"}, {"problem": 32, "code": "#((fn [seq double](if(empty? seq) double (recur (rest seq) (concat double [(first seq) (first seq)])))) % '())", "user": "5cb47a0fe4b026601754b91b"}, {"problem": 32, "code": "#(loop [old-seq % new-seq []]\n   (if (empty? old-seq)\n     new-seq\n     (let [[fr & rst] old-seq\n           new (conj new-seq fr fr)]  \n     (recur rst new))))", "user": "5cb3a8c3e4b026601754b904"}, {"problem": 32, "code": "#(interleave % %)", "user": "5cb556f9e4b026601754b934"}, {"problem": 32, "code": "#(sort (into % %))", "user": "5cb71f35e4b026601754b961"}, {"problem": 32, "code": "#(interleave % %)", "user": "5ca7b5bbe4b048ec896c5c04"}, {"problem": 32, "code": "#(interleave % % )", "user": "5a09ebf8e4b0eab8c0448932"}, {"problem": 32, "code": "mapcat #(list %1 %1)", "user": "5cb4e764e4b026601754b929"}, {"problem": 32, "code": "#(reduce (fn [coll x] (conj (conj coll x) x)) [] %)", "user": "5afb3426e4b0cc2b61a3bcf5"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "5cbeadf2e4b0ccb061962755"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "5c73a944e4b0fca0c16227b8"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5cb62652e4b026601754b949"}, {"problem": 32, "code": "(fn  [arg1]\n      (mapcat list arg1 arg1))", "user": "5cb6256ce4b026601754b947"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "56d5c1b0e4b0ea9b8538f7c3"}, {"problem": 32, "code": "#(mapcat (fn [elem] (list elem elem)) %)", "user": "5cbc9dace4b026601754b9eb"}, {"problem": 32, "code": "#(-> (concat % %) sort)", "user": "5b7aaa3ce4b047b03b203716"}, {"problem": 32, "code": "reduce (fn [acc it] (conj (conj acc it) it)) []", "user": "5cbdc591e4b026601754ba00"}, {"problem": 32, "code": "#(mapcat (fn [x] (repeat 2 x)) %)", "user": "5c547cf0e4b0fb8c5ffd9a0b"}, {"problem": 32, "code": "#(mapcat (fn[x] (list x x)) %)", "user": "5cc6f982e4b0ccb06196282d"}, {"problem": 32, "code": "(fn dup\n  [input]\n  (reduce #(conj %1 %2 %2) [] input))", "user": "5cb39440e4b026601754b903"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "5cc7692ce4b0ccb061962837"}, {"problem": 32, "code": "#(for [x % y (range 2)] x)", "user": "5cbd5b42e4b026601754b9f6"}, {"problem": 32, "code": "#(reduce (fn [val x] (conj (conj val x) x)) [] %)", "user": "5cc7342be4b0ccb061962830"}, {"problem": 32, "code": "#(interleave % %)", "user": "5cc80598e4b0ccb061962840"}, {"problem": 32, "code": "(fn [xs] (mapcat #(take 2 (repeat %)) xs))", "user": "5cc75ffce4b0ccb061962836"}, {"problem": 32, "code": "(fn [x] (reduce #(concat %1 ((juxt identity identity) %2)) '() x))", "user": "5cb0f70ce4b026601754b8c1"}, {"problem": 32, "code": "mapcat (fn [x] [x x])", "user": "4fbe2cfbe4b081705acca30c"}, {"problem": 32, "code": "(fn [y] (mapcat (fn [x] (repeat 2 x)) y))", "user": "5ccb3792e4b0ccb061962882"}, {"problem": 32, "code": "(fn [a] (reduce #(conj %1 %2 %2) '() (reverse a)))", "user": "5cc6b4bfe4b0ccb061962827"}, {"problem": 32, "code": "#(reverse (reduce (fn [res y] (conj (conj res y) y)) '() %))", "user": "5cc77807e4b0ccb061962838"}, {"problem": 32, "code": "#(reduce (fn [col el]\n          (concat col (repeat 2 el)))\n        '()\n        %)", "user": "5cc7073de4b0ccb06196282e"}, {"problem": 32, "code": "(fn m [x]\n  (mapcat (fn [y] (list y y))x))", "user": "5cc28739e4b0ccb0619627d8"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "5ccda634e4b0ccb0619628a9"}, {"problem": 32, "code": "(fn foo [in] (if (empty? in) '() (conj (foo (rest in)) (first in) (first in)) ))", "user": "5bbaf02fe4b0a20761a235f4"}, {"problem": 32, "code": "#(apply concat (map (fn [e] [e e]) %))", "user": "5ccf21c4e4b0ccb0619628c1"}, {"problem": 32, "code": "mapcat (fn [x] [x x])", "user": "5ccf2dc3e4b0ccb0619628c2"}, {"problem": 32, "code": "(fn [input] (reduce (fn [a b] (conj (conj a b) b)) '() (reverse input)))", "user": "5cc1f975e4b0ccb0619627c8"}, {"problem": 32, "code": "#(interleave % %)", "user": "4ee897fe535d93acb0a66883"}, {"problem": 32, "code": "(fn [xs]\n  (interleave xs xs))", "user": "574c3d4ee4b02ea11479921a"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5ccf3879e4b0ccb0619628c4"}, {"problem": 32, "code": "#(mapcat (fn [x] `(~x ~x)) %)", "user": "5cce7de4e4b0ccb0619628b7"}, {"problem": 32, "code": "(fn [s] (reduce (fn [r x] (conj (conj r x) x)) [] s))", "user": "5ccb0bbee4b0ccb06196287c"}, {"problem": 32, "code": "#(interleave % %)", "user": "5ca2ca9fe4b048ec896c5b9c"}, {"problem": 32, "code": "(fn [s]\n   (reduce (fn [r item]\n             (conj (conj r item) item)\n             ) (vector) s))", "user": "5ccc2a03e4b0ccb06196288f"}, {"problem": 32, "code": "(fn [coll] (apply concat (map (fn [x] [x x]) coll)))", "user": "5c97821be4b048ec896c5a70"}, {"problem": 32, "code": "(fn [c] (->> c (mapcat #(repeat 2 %)) concat))", "user": "5c87d2cbe4b048ec896c591c"}, {"problem": 32, "code": "reduce (fn [acc x] (conj acc x x)) []", "user": "5cd1f5dae4b0ccb0619628f7"}, {"problem": 32, "code": "(fn [coll]\n  (mapcat #(list % %) coll))", "user": "5cbb0436e4b026601754b9cc"}, {"problem": 32, "code": "reduce #(concat %1 (repeat 2 %2)) []", "user": "5cc4b34de4b0ccb061962805"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5a99d28ee4b0d174b936c7b3"}, {"problem": 32, "code": "(fn mdup [sq]\n  (if (empty? sq)\n    '()\n    (conj (mdup (rest sq))\n          (first sq)\n          (first sq))))", "user": "56a2777be4b0542e1f8d14bf"}, {"problem": 32, "code": "mapcat (fn [value] [value value])", "user": "5c0eb93ce4b01240ff567146"}, {"problem": 32, "code": "(fn [x] (reduce #(into % [%2 %2]) [] x))", "user": "5b9ae606e4b0c0b3ffbd4af2"}, {"problem": 32, "code": "#(sort (concat % %))", "user": "5cd99bebe4b05ee0cb311707"}, {"problem": 32, "code": "(fn [input]\n    (loop [[c & cs] input  result []]\n      (if (nil? c)\n        result\n        (recur cs (conj result c c)))))", "user": "5cd4c3dae4b0ccb061962925"}, {"problem": 32, "code": "#(sort (concat % %))", "user": "5cd639b4e4b0ccb061962940"}, {"problem": 32, "code": "#(interleave % %)", "user": "50eb4c32e4b0346a3e988cbf"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "5cdd934ce4b05ee0cb311761"}, {"problem": 32, "code": "mapcat #(vector % %)", "user": "5cdfe2aee4b0a17bb84e2b04"}, {"problem": 32, "code": "(fn [xs]\n  (->> xs\n       (map vector xs)\n       (apply concat)))", "user": "5ce077e9e4b0a17bb84e2b0c"}, {"problem": 32, "code": "(fn [lat]\n  (reduce concat (map #(take 2 (repeat %)) lat)))", "user": "5cdd473ae4b05ee0cb311757"}, {"problem": 32, "code": "(fn [xs] \n   (reduce #(conj (conj %1 %2) %2) [] xs))", "user": "5ce05561e4b0a17bb84e2b08"}, {"problem": 32, "code": "#(interleave % %)", "user": "5cdda90ce4b05ee0cb311766"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "5cd4e1b2e4b0ccb061962927"}, {"problem": 32, "code": "#(interleave % %)", "user": "5ce41d1be4b0a17bb84e2b50"}, {"problem": 32, "code": "(partial reduce (fn [xs x] (conj (conj xs x) x)) [])", "user": "5cdc08a2e4b05ee0cb31173a"}, {"problem": 32, "code": "(fn [x]\n  (reduce (fn [agg x] (conj agg x x)) [] x)\n  )", "user": "5cd1fd2fe4b0ccb0619628f8"}, {"problem": 32, "code": "#(mapcat (partial repeat 2) %)", "user": "5ce3e239e4b0a17bb84e2b46"}, {"problem": 32, "code": "(fn [coll] (interleave coll coll))", "user": "5ce52271e4b0a17bb84e2b69"}, {"problem": 32, "code": "(fn [x] (interleave x x))", "user": "5ce2b15fe4b0a17bb84e2b2c"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "5ce44ee2e4b0a17bb84e2b57"}, {"problem": 32, "code": "(fn[xs](reduce (fn[r x](conj(conj r x)x)) [] xs))", "user": "5ce62d8ee4b0a17bb84e2b83"}, {"problem": 32, "code": "#(reduce (fn [acc x] (conj (conj acc x) x)) [] %)", "user": "5ce78776e4b0a17bb84e2ba2"}, {"problem": 32, "code": "#(mapcat list % %)", "user": "5ce56455e4b0a17bb84e2b71"}, {"problem": 32, "code": "(fn [s]\n  (let [[x y z v] (map #(repeat 2 %) s)]\n  (concat x y z v)))", "user": "5cd06cfbe4b0ccb0619628d2"}, {"problem": 32, "code": "#(sort (into % %))", "user": "5cda72ffe4b05ee0cb311714"}, {"problem": 32, "code": "reduce #(into %1 [%2 %2]) []", "user": "5ce97826e4b0a17bb84e2bc0"}, {"problem": 32, "code": "(comp #(apply concat %) (partial map (fn [x] [x x])))", "user": "5cece5a2e4b0a17bb84e2bfb"}, {"problem": 32, "code": "(fn [coll] (sort (concat coll coll)))", "user": "5baaae06e4b0a20761a23464"}, {"problem": 32, "code": "(fn dupseq\n  ([s] (dupseq s []))\n  ([s acc]\n   (if (seq s) \n     (recur (rest s) (conj (conj acc (first s)) (first s)))\n     acc)))", "user": "5ce6f93be4b0a17bb84e2b99"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "5ceef51ee4b0aaa82f1129e9"}, {"problem": 32, "code": "#(->> % (map (fn [x] (list x x))) (apply concat))", "user": "5cebafbbe4b0a17bb84e2be6"}, {"problem": 32, "code": "(fn [x]\n   (mapcat concat (map #(let [y %] [y y]) x))\n   )", "user": "5c665311e4b0fca0c16226a7"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "5cf1438be4b0aaa82f112a0d"}, {"problem": 32, "code": "(partial mapcat (partial repeat 2))", "user": "5cf115eee4b0aaa82f112a08"}, {"problem": 32, "code": "#(interleave % %)", "user": "5cea0bd4e4b0a17bb84e2bc9"}, {"problem": 32, "code": "#(reverse (loop [s1 % s2 nil]\n   (if (empty? s1) s2 (recur (rest s1) (cons (first s1) (cons (first s1) s2))))))", "user": "592bb806e4b072a2710fcf46"}, {"problem": 32, "code": "#(apply concat (map vector % %))", "user": "5cee4bc9e4b0aaa82f1129dc"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5cf1d9e3e4b0aaa82f112a18"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "53d612cbe4b0e771c3025452"}, {"problem": 32, "code": "(fn [inseq] (reduce concat (map #(list %1 %1) inseq)))", "user": "5bf9d9b7e4b0bdcf453d15c4"}, {"problem": 32, "code": "(fn dup-seq [s] \n  (mapcat #(list % %) s))", "user": "5bcf95ace4b0e9689409ee2e"}, {"problem": 32, "code": "#(interleave % %)", "user": "4f925791e4b0dcca54ed6cac"}, {"problem": 32, "code": "(fn double-seq\n  [s]\n  (seq (reduce (fn [l a] (conj l a a)) [] s))\n)", "user": "5c3440fee4b0d62ef62d9f50"}, {"problem": 32, "code": "#(reverse (reduce (fn [x y] (cons y (cons y x))) [] %))", "user": "5cf62f9be4b087f62be35aa8"}, {"problem": 32, "code": "reduce #(concat % [%2] [%2]) '()", "user": "5cf5775ce4b087f62be35a98"}, {"problem": 32, "code": "(fn [coll]\n   (mapcat #(repeat 2 %) coll))", "user": "5ce36e02e4b0a17bb84e2b3e"}, {"problem": 32, "code": "reduce (fn [acc item] (apply list (conj (vec acc) item item))) []", "user": "5cf9bfd9e4b0cc9c91588131"}, {"problem": 32, "code": "(fn [s]\n  (reverse\n  (reduce\n   (fn [acc e]\n     (conj acc e e))\n   nil\n   s))\n )\n ;[1 4])", "user": "5b38d2f3e4b02d533a91bbaf"}, {"problem": 32, "code": "(fn [xs] (reduce (fn [acc x] (conj (conj acc x) x)) [] xs))", "user": "5cf4094be4b0aaa82f112a35"}, {"problem": 32, "code": "(fn [s] \n  (reduce (fn [acc e] (conj acc e e)) [] s)\n  )", "user": "5cfd5a93e4b0cc9c91588168"}, {"problem": 32, "code": "#(reduce (fn [acc x] (into acc (repeat 2 x))) [] %)", "user": "5cf935f4e4b0b71b1d808a8f"}, {"problem": 32, "code": "#(interleave % %)", "user": "5cfee28de4b0cc9c91588185"}, {"problem": 32, "code": "(fn [coll]\n  (loop [c coll results []]\n    (if (seq c)\n      (recur (rest c) (conj results (first c) (first c)))\n      results)))", "user": "5cf62ecce4b087f62be35aa7"}, {"problem": 32, "code": "#(sort (into % %))", "user": "5ce5b43be4b0a17bb84e2b7a"}, {"problem": 32, "code": "(fn dbl [coll]\n  (if (empty? coll)\n  \t[]\n  \t(conj (dbl (butlast coll)) (last coll) (last coll))))", "user": "5cf863c4e4b0b71b1d808a80"}, {"problem": 32, "code": "(fn [x]\n  (loop [x x\n        xs []]\n    (if (empty? x) \n      (seq xs)\n      (recur \n       (rest x)\n       (conj xs (first x) (first x))))))", "user": "5c34f7efe4b0d62ef62d9f5b"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5cee521ce4b0aaa82f1129dd"}, {"problem": 32, "code": "(fn [sec] (let [inter (fn [sec1 sec2]\n              (let [pair (fn [x y] (vector x y))]\n                (mapcat #(pair %1 %2) sec1 sec2)))]\n  (inter sec sec)))", "user": "5d0153f9e4b0cc9c915881aa"}, {"problem": 32, "code": "(fn [coll] (apply concat (map #(repeat 2 %) coll)))", "user": "5cec2b79e4b0a17bb84e2bf4"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "5ceedd7ae4b0aaa82f1129e4"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5cfeacb7e4b0cc9c9158817d"}, {"problem": 32, "code": "#(->> % (map (fn [x] [x x])) (apply concat))", "user": "5cdc17d0e4b05ee0cb31173c"}, {"problem": 32, "code": "#(loop [x %1 y '()]\n                         (if (empty? x)\n                           (reverse y)\n                           (recur (rest x) (conj y (first x) (first x)))\n                           )\n                         )", "user": "5cf72682e4b0b71b1d808a68"}, {"problem": 32, "code": "(fn [coll] \n  (seq (reduce (fn [x y] (conj x y y)) [] coll)))", "user": "5d03944de4b0cc9c915881c5"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5cd47c26e4b0ccb06196291e"}, {"problem": 32, "code": "(fn duplicate\n  ([col] (duplicate col []))\n  ([col dup]\n   (if (empty? col)\n     dup\n   (duplicate (rest col) (conj dup (first col) (first col))))))", "user": "5d06499ae4b0cc9c915881ec"}, {"problem": 32, "code": "(fn [coll]\n  (loop [coll coll\n         res []]\n    (cond (empty? coll)\n          res\n          ;\n          :else (recur (rest coll) (conj (conj res (first coll)) (first coll)))\n          )))", "user": "5c3f29d4e4b08cd430848e8f"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5cf68090e4b0b71b1d808a59"}, {"problem": 32, "code": "(fn [c] (mapcat (fn [s] (list s s)) c))", "user": "5d0af5cbe4b0cc9c91588228"}, {"problem": 32, "code": "(fn [col]\n  (loop [col col, result []]\n    (if (empty? col)\n      result\n      (recur (rest col) (concat result [(first col) (first col)] )))))", "user": "5d0859fbe4b0cc9c91588208"}, {"problem": 32, "code": "(fn [x] (reduce #(conj (conj % %2) %2) [] x))", "user": "5d0aab50e4b0cc9c91588220"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5d03977ee4b0cc9c915881c7"}, {"problem": 32, "code": "(fn [elements] (mapcat #(list % %) elements))", "user": "5d09dffbe4b0cc9c9158821c"}, {"problem": 32, "code": "#(interleave % %)", "user": "5d0815b3e4b0cc9c91588201"}, {"problem": 32, "code": "(fn [x] (apply concat (map #(vector % %) x)))", "user": "5d0ad8dde4b0cc9c91588225"}, {"problem": 32, "code": "(fn duplicate [s]\n  (->>\n    s\n    (reduce\n      (fn [acc curr]\n        (conj acc curr curr))\n      [])\n    seq))", "user": "5d0eed51e4b0cc9c91588262"}, {"problem": 32, "code": "#(interleave % %)", "user": "59ff4ba2e4b01bb0ae8afd1d"}, {"problem": 32, "code": "#(reduce into (map (fn [item] [item item]) %))", "user": "568f2059e4b0dcc4269f40df"}, {"problem": 32, "code": "reduce (fn [acc v] (conj acc v v)) []", "user": "5d02fe44e4b0cc9c915881c0"}, {"problem": 32, "code": "(fn [s] (reduce #(concat %1 [%2 %2]) '() s))", "user": "5d0e311de4b0cc9c91588251"}, {"problem": 32, "code": "(fn [xs] (interleave xs xs))", "user": "58593c05e4b0f14aab7c872d"}, {"problem": 32, "code": ";; (mapcat f & colls) returns the result of applying concat to the result of applying\n;; map to f and colls.  Thus function f should return a collection.\n#(mapcat (fn [e] [e e]) %)", "user": "5d0eda66e4b0cc9c9158825f"}, {"problem": 32, "code": "(fn [coll] (mapcat #(list % %) coll))", "user": "5b684a0de4b0c6492753e774"}, {"problem": 32, "code": "(fn duplicate-seq\n  [aseq]\n  (reduce\n    (fn [out x] (conj out x x)) []  aseq))", "user": "5d110abee4b02c15ef021983"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "5d05fdece4b0cc9c915881e8"}, {"problem": 32, "code": "(fn [coll]\n  (loop [acc '() rem coll]\n    (if (nil? (seq rem)) acc\n        (recur (concat acc [(first rem) (first rem)])\n              (rest rem)))))", "user": "5d126728e4b02c15ef02199a"}, {"problem": 32, "code": "(fn dup [coll]\n (mapcat #(conj () % %) coll))", "user": "5a23503fe4b0ff51aa4b32d6"}, {"problem": 32, "code": "#(apply interleave (repeat 2 %))", "user": "59dfb8f9e4b08badc2a0c4db"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5d148581e4b0902706380dc6"}, {"problem": 32, "code": "(fn kek [x]\n  (if (empty? x) ()\n    (cons (first x) (cons (first x) (kek (rest x))))))", "user": "5d132412e4b02c15ef0219a6"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "5d1609f9e4b0902706380dd9"}, {"problem": 32, "code": "#(interleave % %)", "user": "5d10c1a8e4b04b4faecf4449"}, {"problem": 32, "code": "(fn [s] (apply list (mapcat (fn [x] (list x x))s)))", "user": "5ce867fce4b0a17bb84e2baf"}, {"problem": 32, "code": "(partial mapcat (fn [x] [x x]))", "user": "5a08f951e4b01bb0ae8afdfd"}, {"problem": 32, "code": "(fn [x]\n  (mapcat #(repeat 2 %) x))", "user": "58472aade4b089d5ab817ea0"}, {"problem": 32, "code": "(fn dupe2 [input_seq]\n  (let [tmp (for [x (seq input_seq)] [x x])]\n    (println tmp)\n    (loop [result [] t tmp]\n      (if (nil? (first t))\n        result\n        (recur (concat result (first t) ) (rest t))))))", "user": "524a7c1ae4b05ef8e38e64ac"}, {"problem": 32, "code": "(fn [x] (interleave x x))", "user": "5d1a1082e4b0902706380e0e"}, {"problem": 32, "code": "(fn rl [x] (if (empty? x) x (let [a (rl (rest x))] (cons (first x) (cons (first x) a)))))", "user": "5d1bbef0e4b02ea6f0fb6984"}, {"problem": 32, "code": "(fn\n  [s]\n  (reduce (fn [r i]\n            (concat r (repeat 2 i)))\n          []\n          s))", "user": "570c8ac3e4b0b0fb43fd06ca"}, {"problem": 32, "code": "(fn [seq] (sort (into seq seq)))", "user": "5d1b2a1ee4b02ea6f0fb6979"}, {"problem": 32, "code": "(fn dupl [l] (reduce #(conj %1 %2 %2) [] l))", "user": "5d1e19c4e4b02ea6f0fb69af"}, {"problem": 32, "code": "#(interleave % %)", "user": "5d1de7b2e4b02ea6f0fb69ad"}, {"problem": 32, "code": "(fn [sq] (mapcat (fn [a] [a a]) sq))\n\n;; (fn [sq] (reduce (fn [coll a] (conj coll a a)) [] sq))", "user": "5d046f7ce4b0cc9c915881d5"}, {"problem": 32, "code": "#(interleave % %)", "user": "5d2201b8e4b02ea6f0fb69ed"}, {"problem": 32, "code": "(fn [col]\n  (let [result []]\n    (apply concat (map\n     #(conj result % %)\n     col))))", "user": "5ccf99fbe4b0ccb0619628c8"}, {"problem": 32, "code": "(fn [x] (sort(apply concat(#(repeat 2 %) x))))", "user": "5d1b59abe4b02ea6f0fb697e"}, {"problem": 32, "code": "(fn [s] (reduce #(concat % [%2 %2]) '() s))", "user": "5c59b836e4b01df32ab73263"}, {"problem": 32, "code": "(fn [s]\n  (->> (map (partial repeat 2) s) (apply concat)))", "user": "5d236215e4b02ea6f0fb6a09"}, {"problem": 32, "code": "(fn [col]\n  (reduce #(conj %1 %2 %2)\n          []\n          col))", "user": "5d231255e4b02ea6f0fb69fe"}, {"problem": 32, "code": "reduce (fn [acc curr] (concat acc (list curr curr))) []", "user": "5d1c14cde4b02ea6f0fb698a"}, {"problem": 32, "code": "(fn [ls]\n\t (apply concat (for [x (seq ls)] [x x])))", "user": "5d125d63e4b02c15ef021999"}, {"problem": 32, "code": "(fn mac [para]\n (mapcat #(list % %) para)\n)", "user": "5bc2df19e4b07a9b28b10038"}, {"problem": 32, "code": "(fn [llist]\n   (reduce (fn [acc x] (conj acc x x)) [] llist))", "user": "5cfabf53e4b0cc9c91588148"}, {"problem": 32, "code": "#(reduce (fn [result e]\n            (into result (repeat 2 e)))\n          []\n          %)", "user": "5d1be50ce4b02ea6f0fb6986"}, {"problem": 32, "code": "#(interleave % %)", "user": "5d24e49be4b02ea6f0fb6a2a"}, {"problem": 32, "code": "(fn [llist]\n  (reduce (fn [acc x] (conj acc x x)) [] llist))", "user": "5d1cf523e4b02ea6f0fb6994"}, {"problem": 32, "code": "(fn [coll] (reduce #(into %1 [%2 %2]) [] coll))", "user": "5d0beecee4b0cc9c91588239"}, {"problem": 32, "code": "#(mapcat vector % %)", "user": "5d272077e4b092dab7f59c64"}, {"problem": 32, "code": "(fn [x] (apply concat (map #(repeat 2 %) x)))", "user": "5d247902e4b02ea6f0fb6a24"}, {"problem": 32, "code": "#(interleave % %)", "user": "5b99554ae4b0c0b3ffbd4ace"}, {"problem": 32, "code": "#(loop [col % rt []]\n   (if(empty? col)\n     rt\n     (recur (rest col) (conj rt (first col) (first col)))\n     )\n   )", "user": "5d270111e4b092dab7f59c62"}, {"problem": 32, "code": "reduce (fn [e1 e2] (conj (conj e1 e2) e2)) []", "user": "5d25abc9e4b02ea6f0fb6a37"}, {"problem": 32, "code": "mapcat #(vector % %)", "user": "5d138119e4b0902706380dbb"}, {"problem": 32, "code": "#(interleave % %)", "user": "5d267c11e4b02ea6f0fb6a41"}, {"problem": 32, "code": "(fn [col]\n\t(apply concat (map #(repeat 2 %) col)))", "user": "5d05d005e4b0cc9c915881e6"}, {"problem": 32, "code": "#(interleave % %)", "user": "5d27da09e4b092dab7f59c75"}, {"problem": 32, "code": "(fn [x] (reduce (fn [a b] (conj a b b)) [] x))", "user": "5d13f783e4b0902706380dc1"}, {"problem": 32, "code": "(fn f [s]\n  (let [f*\n        (fn [acc s*]\n          (conj acc s* s*))]\n(reduce f* [] s)))", "user": "5d29d837e4b01671435dbc6c"}, {"problem": 32, "code": "reduce (fn [acc elem]\n             (concat acc [elem elem])) '()", "user": "576a42e6e4b0a07e8fc1810e"}, {"problem": 32, "code": "(fn dup [list] (mapcat (partial repeat 2) list))", "user": "5d21b91ee4b02ea6f0fb69e9"}, {"problem": 32, "code": "#(interleave % %)", "user": "5d2bfb68e4b01671435dbc86"}, {"problem": 32, "code": "(fn [sqn]\n  (apply concat (map #(list % %) sqn)))", "user": "5cf895efe4b0b71b1d808a85"}, {"problem": 32, "code": "(fn [x] (reduce concat [] (map #(vector % %) x)))", "user": "5d2ca236e4b01671435dbc94"}, {"problem": 32, "code": "(fn [sequence]\n  (reduce (fn [acc x] (into acc [x x])) [] sequence))", "user": "5d28b684e4b092dab7f59c83"}, {"problem": 32, "code": "#(mapcat list % %)", "user": "5d28222ee4b092dab7f59c7a"}, {"problem": 32, "code": "(fn [x] (interleave x x))", "user": "5aa1e0f1e4b0d174b936c84e"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2 ) []", "user": "5d29c06be4b01671435dbc6b"}, {"problem": 32, "code": "(fn [col] ((fn dup [oldC newC] (if (= (first oldC) nil) newC (dup (rest oldC) (cons (first oldC) (cons (first oldC) newC))))) (reverse col) '()))", "user": "5d1cd478e4b02ea6f0fb6991"}, {"problem": 32, "code": "(fn [xs] (mapcat (fn [x] [x x]) xs))", "user": "5d0e9931e4b0cc9c91588258"}, {"problem": 32, "code": "#(reduce (fn [a x] (reverse (cons x (cons x (reverse a))))) '() %)", "user": "51bd78c3e4b0ff155d51d2b0"}, {"problem": 32, "code": "(fn [x]\n    (loop [rez []\n           cnt 0]\n      (if (>= cnt (count x))\n               rez\n               (recur (conj rez\n                              (nth x cnt)\n                              (nth x cnt)\n                              ) (inc cnt)))))", "user": "5d301c95e4b01671435dbcca"}, {"problem": 32, "code": "(fn dupe [coll]\n           (when-let [s (seq coll)]\n             (lazy-seq (cons (first s) (lazy-seq (cons (first s) (dupe (rest s))))))))", "user": "5bb25684e4b0a20761a2350d"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "54b42ea4e4b05787c3b1638b"}, {"problem": 32, "code": "(fn du [xs] (reduce concat (map vector xs xs)))", "user": "5d321852e4b01671435dbce8"}, {"problem": 32, "code": "#(interleave % %)", "user": "5d35fb9be4b01671435dbd1c"}, {"problem": 32, "code": "(fn [items] (mapcat #(list % %) items))", "user": "5d1d4ec6e4b02ea6f0fb699f"}, {"problem": 32, "code": "(fn [coll] (loop [rcoll [] lcoll coll]\n               (if (empty? lcoll)\n                rcoll\n                (recur (conj rcoll (first lcoll) (first lcoll)) (rest lcoll)))))", "user": "5d363543e4b01671435dbd20"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "5d370811e4b01671435dbd2d"}, {"problem": 32, "code": "(fn prob32\n  [coll]\n  (mapcat #(list % %) coll))", "user": "5d2e5065e4b01671435dbcae"}, {"problem": 32, "code": "(fn[collection] ( reverse ( reduce (fn[coll n ] (conj coll n n) ) () collection)  ))", "user": "5cf53196e4b087f62be35a94"}, {"problem": 32, "code": "(fn [input] (apply concat (map #(repeat 2 %) input)))", "user": "58b997afe4b0888cdc949cd1"}, {"problem": 32, "code": "(fn [a] (reduce into [] (map #(list % %) a)))", "user": "5d3ae729e4b01671435dbd5d"}, {"problem": 32, "code": "(fn dup [x]\n  (mapcat #(repeat 2 %) x)\n)", "user": "5d24671ce4b02ea6f0fb6a23"}, {"problem": 32, "code": "(fn dupseq [xs]\n  (apply concat (map (partial replicate 2) xs)))", "user": "598601f9e4b021a7a535fe79"}, {"problem": 32, "code": "#(interleave %1 %1)", "user": "54be7c0de4b0ed20f4ff6eec"}, {"problem": 32, "code": "(fn [x] (mapcat #(repeat 2 %) x))", "user": "5d2c779be4b01671435dbc8d"}, {"problem": 32, "code": "(fn f [x]\n   (let [e (first x)]\n     (if (= 1 (count x))\n       (conj '() e e)\n       (conj (f (rest x)) e e))))", "user": "5cacc9e0e4b026601754b862"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5d3fa930e4b05dd059a5435f"}, {"problem": 32, "code": "#(apply concat (map (fn [x] [x x]) %))", "user": "596fb563e4b01722bebd4c55"}, {"problem": 32, "code": "(fn [c]\n  (mapcat (fn [x] [x x]) c))", "user": "5c30da5ae4b0d62ef62d9f23"}, {"problem": 32, "code": "#(interleave % %)", "user": "5d404586e4b05dd059a54363"}, {"problem": 32, "code": "#(reverse (apply concat (reduce (fn [a v] (conj a (take 2 (repeat v)))) '() %)))", "user": "5d41de31e4b05dd059a54379"}, {"problem": 32, "code": "(fn [coll]\n    (apply concat (map (partial repeat 2) coll)))", "user": "4fb41dace4b081705acca2aa"}, {"problem": 32, "code": "#(mapcat (partial repeat 2) %)", "user": "5d3f50d7e4b09d9322bc20a6"}, {"problem": 32, "code": "(fn [elements]\n  (reduce (fn [acc x]\n    (concat acc (list x x)))\n    ()\n    elements))", "user": "5d4320fde4b07c84aa5ae690"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "5d45bd1de4b07c84aa5ae6a4"}, {"problem": 32, "code": "#(mapcat vector % %)", "user": "5d45749be4b07c84aa5ae6a2"}, {"problem": 32, "code": "(fn [input]\n   (loop [duplicate '() inputs input]\n     (if (empty? inputs)\n       duplicate\n     (recur\n       (conj (conj duplicate (last inputs)) (last inputs))\n       (drop-last inputs)))))", "user": "5d40f41ae4b05dd059a5436d"}, {"problem": 32, "code": "(fn [coll]\n  (mapcat #(conj nil % %) coll))", "user": "5146f343e4b04ef915e3731e"}, {"problem": 32, "code": "(fn [x] (reduce #(concat %1 (repeat 2 %2)) '() x))", "user": "5d465adae4b07c84aa5ae6a9"}, {"problem": 32, "code": "(fn [xs] (mapcat #(list % %) xs))", "user": "5d46fbc6e4b07c84aa5ae6af"}, {"problem": 32, "code": "#(interleave % %)", "user": "5d40442ee4b05dd059a54362"}, {"problem": 32, "code": "(fn dup [l]\n  (if (empty? l) '()\n    (let [x (first l)] (concat [x x] (dup (rest l))))))", "user": "5d41f428e4b05dd059a5437b"}, {"problem": 32, "code": "(fn [l]\n  (apply concat \n   (map #(vector %1 %1) l)))", "user": "5d439775e4b07c84aa5ae696"}, {"problem": 32, "code": "mapcat (partial repeat 2)", "user": "5d4b2155e4b0776584bd6f28"}, {"problem": 32, "code": "(fn [coll] (\n    reduce (fn [acc curr] (conj acc curr curr)) [] coll\n))", "user": "5d40493ae4b05dd059a54364"}, {"problem": 32, "code": "(fn f [x] (mapcat identity (map vector x x)))", "user": "5d0bb4fae4b0cc9c91588237"}, {"problem": 32, "code": "#(reduce concat (map vector % %))", "user": "5d47f4dbe4b07c84aa5ae6b5"}, {"problem": 32, "code": "(fn [coll] (mapcat #(vector % %) coll))", "user": "52ca6520e4b071a8d36bd3e0"}, {"problem": 32, "code": "(fn [L]\n    (loop [Ret '() First (first L) Rest (rest L) ]\n      (if (nil? First)\n        (reverse Ret)\n        (recur \n          (conj Ret First First)\n          (first Rest)\n          (rest Rest)\n        )\n      )\n    )\n  )", "user": "5d4a6c6ce4b0776584bd6f22"}, {"problem": 32, "code": "#(interleave % %)", "user": "5d4eb9c4e4b0776584bd6f48"}, {"problem": 32, "code": "(fn f [s]\n      (let [f*\n            (fn [acc s*]\n              (conj acc s* s*))]\n        (reduce f* [] s)))", "user": "5d4c4de9e4b0776584bd6f2f"}, {"problem": 32, "code": "(fn [s]\n  (reduce\n    (fn [c e]\n      (conj c e e)) [] s))", "user": "5ad76df9e4b0ea6055cfac18"}, {"problem": 32, "code": "reduce (fn [acc x] (concat acc [x x])) []", "user": "5d41ac35e4b05dd059a54375"}, {"problem": 32, "code": "(fn [xs]\n    (reduce concat (map #(list % %) xs))\n)", "user": "5d4c83b7e4b0776584bd6f34"}, {"problem": 32, "code": "(fn [someseq] (mapcat #(repeat 2 %) someseq))", "user": "56bff105e4b060a8e693e3a4"}, {"problem": 32, "code": "(fn duplicate \n  [ls]\n  (reduce (fn [ls x]\n            (conj (conj ls x) x ))\n            []\n            ls))", "user": "5d48884ee4b07c84aa5ae6bb"}, {"problem": 32, "code": "(fn [coll]\n  (reduce #(concat %1 (list %2 %2)) () coll))", "user": "5d48e6d3e4b0776584bd6f15"}, {"problem": 32, "code": "(fn [x] (loop [res [] coll x] (if (empty? coll) res (let [frst (first coll)] (recur (conj (conj res frst) frst) (rest coll)))) ))", "user": "5ab07d63e4b073f1774425af"}, {"problem": 32, "code": "reduce (fn [acc x] (concat acc [x x])) []", "user": "5d51377be4b0776584bd6f5d"}, {"problem": 32, "code": "(fn [coll] (reduce (fn [acc n] (conj acc n n)) [] coll))", "user": "5d4f21f3e4b0776584bd6f4e"}, {"problem": 32, "code": "#(reduce (fn [res n]\n           (conj res n n)\n         )\n         []\n         %1)", "user": "5d07989ee4b0cc9c915881fb"}, {"problem": 32, "code": "(fn [xs] (mapcat #(repeat 2 %) xs))", "user": "5259451ce4b0cb4875a45cd7"}, {"problem": 32, "code": "(fn [s]\n  (reduce #(conj (conj %1 %2) %2) [] s))", "user": "5d531d33e4b0776584bd6f6d"}, {"problem": 32, "code": "#(sort (concat % %))", "user": "5bf06734e4b0a6d31fed2153"}, {"problem": 32, "code": "(fn ms\n             ([lis]\n              (ms lis [])\n              )\n             ([lis res]\n              (if (empty? lis)\n                res\n                (ms (rest lis) (conj res (first lis) (first lis)))\n                )\n              ))", "user": "5d4cf3e9e4b0776584bd6f38"}, {"problem": 32, "code": "#(sort (concat % %))", "user": "5cf59deee4b087f62be35a9f"}, {"problem": 32, "code": "(fn duplicate\n  [s]\n  (reverse (reduce (fn [acc v]\n                     (conj (conj acc v) v))\n                   ()\n                   s)))", "user": "5d53a59ae4b0776584bd6f72"}, {"problem": 32, "code": "#(reverse (into () (reduce (fn\n                                [acc el]\n                                (conj (conj acc el) el))\n                              [] %1)))", "user": "5bdc4a76e4b0ed4b8aab4c30"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "559ba500e4b066d22e731f58"}, {"problem": 32, "code": "(fn [collection]\n  (reduce (fn [acc val] (conj (conj acc val) val)) [] collection))", "user": "5d42c88ae4b05dd059a5437e"}, {"problem": 32, "code": "#(interleave % %)", "user": "597b72ede4b02382a38ad1f9"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5bcee7d9e4b0e9689409ee22"}, {"problem": 32, "code": "(fn [coll]\n  (interleave coll (seq coll))\n  )", "user": "5d590500e4b02ba5928a6824"}, {"problem": 32, "code": "#(sort (apply concat (reduce (fn [a e] (conj a (repeat 2 e))) '() %)))", "user": "5d5502cbe4b02ba5928a680b"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "5d5e0259e4b0c9e5857d4fef"}, {"problem": 32, "code": "(fn [seqn]\n                  (loop [seqn seqn\n                         ans []]\n                    (if (= 0 (count seqn))\n                      ans\n                      (recur (rest seqn) (concat ans [(first seqn) (first seqn)])))))", "user": "5d4df658e4b0776584bd6f41"}, {"problem": 32, "code": "#(interleave % %)", "user": "5d5166d9e4b0776584bd6f5e"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5d5e9f45e4b0c9e5857d4ff5"}, {"problem": 32, "code": "(fn [x]\n  (reduce (fn [c v]\n            (conj c v v))\n          [] x))", "user": "5d6042f2e4b0c9e5857d5006"}, {"problem": 32, "code": "(partial mapcat #(vector % %))", "user": "5d609ddde4b0c9e5857d5008"}, {"problem": 32, "code": "(fn [x] (apply list (reduce #(conj %1 %2 %2) [] x)))", "user": "5d52bf29e4b0776584bd6f69"}, {"problem": 32, "code": "reduce (fn [acc itm]\n         (conj acc itm itm)\n         ) []", "user": "5d5eb086e4b0c9e5857d4ff7"}, {"problem": 32, "code": "(fn [s] (apply concat (map #(conj nil % %) s)))", "user": "5d629ed9e4b0c9e5857d501d"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5d62ce13e4b0c9e5857d501f"}, {"problem": 32, "code": "#(mapcat (fn [x] [x x]) %)", "user": "5d651553e4b0db5d338d15ca"}, {"problem": 32, "code": "reduce #(concat %1 [%2 %2]) '()", "user": "5d641841e4b0c9e5857d502e"}, {"problem": 32, "code": "(fn [sq]\n  (reduce (fn [res ele]\n            (conj (conj res ele) ele))\n          []\n          sq))", "user": "5d64013ce4b0c9e5857d502d"}, {"problem": 32, "code": "(fn [s] \n  (reverse (reduce #(cons %2 (cons %2 %1)) '() s))\n  )", "user": "5a7f77fae4b00b71e582a041"}, {"problem": 32, "code": "(fn [x] (reduce #(conj %1 %2 %2) [] x))", "user": "5d669613e4b0db5d338d15ea"}, {"problem": 32, "code": "#(reduce (fn [x y] (conj (conj x y) y)) [] %)", "user": "5d63b06be4b0c9e5857d5025"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "5d63f1c2e4b0c9e5857d502b"}, {"problem": 32, "code": "#(apply concat (for [x %] [x x]))", "user": "5d657de2e4b0db5d338d15da"}, {"problem": 32, "code": "(fn [x]\n  (reverse\n   (reduce #(into %1 (take 2 (repeat %2)))\n           '()\n           x)))", "user": "5d5ef0bce4b0c9e5857d4ffb"}, {"problem": 32, "code": "reduce (fn [newSeq elem] (conj newSeq elem elem)) []", "user": "5d662fb5e4b0db5d338d15e1"}, {"problem": 32, "code": "reduce #(concat %1 (list %2 %2)) ()", "user": "5d6552b5e4b0db5d338d15d2"}, {"problem": 32, "code": "#(interleave % %)", "user": "5d672bd7e4b0db5d338d15f1"}, {"problem": 32, "code": "(fn dupseq\n  [xs]\n  (loop [act xs\n    dupedseq []]\n    (if (empty? act)\n    dupedseq\n    (let [[x & remaining] act]\n      (recur remaining\n        (into dupedseq\n          [x x]))))))", "user": "5d68bfd0e4b0db5d338d1602"}, {"problem": 32, "code": "#(interleave % %)", "user": "5ad5bb0ae4b0ea6055cfabf0"}, {"problem": 32, "code": "#(reduce (fn [xs x] (concat xs (repeat 2 x))) '() %)", "user": "5d68fc2fe4b0db5d338d1606"}, {"problem": 32, "code": "#(loop [it %\n         result []]\n    (let [head (first it)]\n      (if (nil? head)\n        result\n        (recur (rest it) (conj result head head)))))", "user": "5d5c2730e4b09db18d4482ea"}, {"problem": 32, "code": "(fn [input]\n  (reduce #(conj (conj %1 %2) %2) [] input))", "user": "5d68f5e6e4b0db5d338d1605"}, {"problem": 32, "code": "#(let [f (fn dup [col]\n           (if (empty? col) \n             col \n             (let [h (first col) r (rest col)] \n               (concat [h h] (dup r)))))]\n           (f %))", "user": "524a9556e4b05ef8e38e64b1"}, {"problem": 32, "code": "(fn [x] (apply concat(map #(vector % %) x)))", "user": "5d6523ace4b0db5d338d15cd"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5d6d4463e4b04d129b00f2bd"}, {"problem": 32, "code": "mapcat #(list %1 %1)", "user": "5d64ecb2e4b0c9e5857d5036"}, {"problem": 32, "code": "#(reduce \n   (fn [r n] \n     (conj (conj r n) n)\n     )\n   '[] %\n   )", "user": "5d5b2678e4b06a698e928ee2"}, {"problem": 32, "code": "(fn [xs] (reduce #(apply conj %1 (list %2 %2)) [] xs))", "user": "5d6537fce4b0db5d338d15cf"}, {"problem": 32, "code": "(fn [coll]\n  (->> coll\n       (concat coll)\n       (sort)))", "user": "57eb2576e4b0bfb2137f5b5c"}, {"problem": 32, "code": "(fn [seq] (reduce #(conj %1 %2 %2) [] seq))", "user": "5d6d2172e4b04d129b00f2b9"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "5d66aea7e4b0db5d338d15ec"}, {"problem": 32, "code": "(fn [lat]\n  (reduce concat (map #(take 2 (repeat %)) lat)))", "user": "5d6e5b53e4b04d129b00f2c6"}, {"problem": 32, "code": "(fn [a] (apply concat (map #(repeat 2 %) a)))", "user": "5d323149e4b01671435dbce9"}, {"problem": 32, "code": "#(seq (reduce (fn [y x] (conj (conj y x) x)) (conj (seq %) [])))", "user": "5d6691cee4b0db5d338d15e9"}, {"problem": 32, "code": "#_(fn [coll]\n  (reduce (fn [acc item]\n            (conj acc item item))\n          []\n          coll))\n\n(fn [coll]\n  (interleave coll coll))", "user": "5d6f063de4b04d129b00f2d1"}, {"problem": 32, "code": "#(reverse ( reduce ( fn revred [ res a ] ( conj res a a ) ) '() %) )", "user": "5d5c6675e4b09db18d4482ec"}, {"problem": 32, "code": "(fn\n  [se]\n  (apply concat (map (fn [x] [x x]) se)))", "user": "5d6febe6e4b04d129b00f2d5"}, {"problem": 32, "code": "(fn tester [x]\n    (sort (concat x x)))", "user": "5ccc9078e4b0ccb061962899"}, {"problem": 32, "code": "(fn duplicate-seq [some-seq]\n  (reduce (fn dup [emp-seq a-char]\n  (conj (conj emp-seq a-char)  a-char)) [] some-seq))", "user": "5d6e5ec6e4b04d129b00f2c7"}, {"problem": 32, "code": "#(interleave % %)", "user": "5d764e52e4b02e6b30c93524"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5a7de7a3e4b03baeef927702"}, {"problem": 32, "code": "#(mapcat (fn [x] [x x]) %)", "user": "5d6d2e11e4b04d129b00f2ba"}, {"problem": 32, "code": "(fn dup [s]\n  (if (empty? s)\n    []\n    (let [h (first s)]\n      (cons h (cons h (dup (rest s)))))))", "user": "52860baae4b0239c8a67ae09"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5d7bd68ee4b02e6b30c93554"}, {"problem": 32, "code": "(fn [inputSeq]\n   (loop [ curSeq inputSeq\n           resVec [] ]\n     (if (nil? curSeq)\n       (seq resVec)\n       (do\n         (recur (next curSeq) (conj (conj resVec (first curSeq)) (first curSeq)))\n       )\n     )\n   )\n)", "user": "5cf7215ce4b0b71b1d808a67"}, {"problem": 32, "code": "(fn [s]\n   (reduce concat (map #(repeat 2 %) s))\n  )", "user": "5d6fae1ee4b04d129b00f2d4"}, {"problem": 32, "code": "#(interleave % %)", "user": "5c56e264e4b0fb8c5ffd9a39"}, {"problem": 32, "code": "(fn\n  [coll]\n  (reduce (fn [cum x]\n            (into cum x))\n          []\n          (map #(repeat 2 %) coll)))", "user": "5d7b90ede4b02e6b30c93552"}, {"problem": 32, "code": "(fn [s] (reduce concat (map #(repeat 2 %) s)))", "user": "5d6f0533e4b04d129b00f2d0"}, {"problem": 32, "code": "#(mapcat identity (map (fn [x] (list x x)) %))", "user": "5d7d17ece4b02e6b30c93558"}, {"problem": 32, "code": "(fn\n\t[coll]\n\t(sort (reduce conj\n\t\t(map (fn [x] x) coll)\n\t\tcoll))\n\t)", "user": "5d797deee4b02e6b30c93541"}, {"problem": 32, "code": "reduce (fn [r x] (conj (conj r x) x)) []", "user": "5b19593ae4b03cfeda66ecb8"}, {"problem": 32, "code": ";;#(reduce concat (map (take 2 (repeat %)) %))\n\n(fn [lat]\n  (reduce concat (map #(take 2 (repeat %)) lat)))", "user": "5cccac42e4b0ccb06196289d"}, {"problem": 32, "code": "#(loop [ds '[]\n        col %]\n   (if (next col)\n     (recur (conj ds (first col) (first col)) (next col))\n     (conj ds (first col) (first col))))", "user": "4ec549e1535d6d7199dd3691"}, {"problem": 32, "code": "(fn [x] (loop [remaining x out []] (if (empty? remaining) out (recur (rest remaining) (conj out (first remaining) (first remaining))))))", "user": "5d7158f3e4b04d129b00f2e1"}, {"problem": 32, "code": "(fn [x] \n  (reverse(reduce \n    (fn [my-list elem] (conj my-list elem elem))\n    ()\n    x\n  ) )\n)", "user": "5d7faa52e4b0915913b1d365"}, {"problem": 32, "code": "(fn [l] (reduce (fn [acc x] (into acc [x x])) [] l))", "user": "5d4a6511e4b0776584bd6f21"}, {"problem": 32, "code": "(fn dup [s] \n  (let [f (first s) r (rest s)]\n\t(if (= r ())\n      (list f f)\n      (conj (conj (dup r) f) f))))", "user": "5d81c244e4b0915913b1d37a"}, {"problem": 32, "code": "#(reduce (fn [xs x] (concat xs [x, x])) [] %)", "user": "5d123457e4b02c15ef021996"}, {"problem": 32, "code": "#(interleave % %)", "user": "5d81eba4e4b0915913b1d37b"}, {"problem": 32, "code": "(fn dupseq [elms]\n  \"returns sequence with each element duplicated\"\n  (apply concat (map #(list % %) elms))\n  )", "user": "5d828b7ee4b0915913b1d382"}, {"problem": 32, "code": "mapcat #(repeatedly 2 (fn [] %))", "user": "5d7eaf5fe4b0492f5d910fc3"}, {"problem": 32, "code": "#(-> %\n     (interleave %))", "user": "5c06f6e3e4b0bdcf453d16bb"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "5d84f5e6e4b0915913b1d38f"}, {"problem": 32, "code": "(fn [s] (mapcat (fn [el] (list el el)) s))", "user": "5d1231dde4b02c15ef021995"}, {"problem": 32, "code": "#(interleave % %)", "user": "5d88a22de4b0915913b1d3ab"}, {"problem": 32, "code": "(fn [seq] (sort (concat seq  seq)))", "user": "5d8044f6e4b0915913b1d368"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5d88c6a3e4b0915913b1d3ad"}, {"problem": 32, "code": "#(interleave % %)", "user": "5d917ef0e4b0915913b1d402"}, {"problem": 32, "code": "(fn duplicator \n  ([args]\n   (duplicator args args []))\n  ([args clone dupped]\n   (if (empty? args)\n     dupped\n     (duplicator (rest args) (rest clone) (conj dupped (first args) (first clone))))))", "user": "5d896a64e4b0915913b1d3b8"}, {"problem": 32, "code": "(fn [xs]\n  (loop [new [] old xs]\n    (if (empty? old) \n      new\n      (recur (conj new (first old) (first old)) (rest old))\n      )))", "user": "5d88d820e4b0915913b1d3b1"}, {"problem": 32, "code": "(fn [coll] (reduce into [] (map #(vector % %) coll)))", "user": "5d887d27e4b0915913b1d3a8"}, {"problem": 32, "code": "(fn [xs] (mapcat #(list % %) xs))", "user": "5d81b40ce4b0915913b1d379"}, {"problem": 32, "code": "mapcat #(take 2 (repeat %))", "user": "5d915f01e4b0915913b1d401"}, {"problem": 32, "code": "(fn [s] (interleave s s))", "user": "5d8b4960e4b0915913b1d3d3"}, {"problem": 32, "code": "#(apply concat (map (fn [x] (list x x)) %))", "user": "5d7a748ce4b02e6b30c93547"}, {"problem": 32, "code": "#(apply concat (map vector % %))", "user": "5d90190ce4b0915913b1d3f7"}, {"problem": 32, "code": "#(apply concat (for [curr-x %] \n  (repeat 2 curr-x)))", "user": "5d68e60be4b0db5d338d1603"}, {"problem": 32, "code": "(fn double-seq\n  [xs]\n  (apply concat (map #(repeat 2 %) xs)))", "user": "59ea07c9e4b0249b72820756"}, {"problem": 32, "code": "(fn my-dup [col] (reduce into [] (map (fn [x] [x x]) col)))", "user": "5d80f328e4b0915913b1d372"}, {"problem": 32, "code": "(fn [sequence]\n  (loop [in sequence result []]\n    (let [head (first in)]\n      (if (empty? in)\n        result\n        (recur (rest in) (conj result head head))\n      )\n    )\n  )\n)", "user": "5d97b033e4b0d3f9b434ad39"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5d9aeae5e4b0d3f9b434ad4a"}, {"problem": 32, "code": "#(interleave % %)", "user": "5d9c1226e4b0d3f9b434ad51"}, {"problem": 32, "code": "#(interleave % %)", "user": "53bfd8c4e4b0c98a41f5cca8"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5d8a832ce4b0915913b1d3ca"}, {"problem": 32, "code": "(fn [arr]\n  (mapcat #(repeat 2 %) arr))", "user": "5bcdb877e4b0e9689409ee02"}, {"problem": 32, "code": "(fn f32 [l]\n     (if (> (count l) 0)\n       (conj (f32 (rest l))  (first l) (first l))))", "user": "5d9edc21e4b000c986472bc6"}, {"problem": 32, "code": "(fn [s] (  reduce #( conj %1 %2 %2 ) [] s ))", "user": "5d9e7971e4b000c986472bc1"}, {"problem": 32, "code": "(fn [coll] (reduce (fn [acc val] (-> acc (conj val) (conj val))) [] coll))", "user": "5d97b602e4b0d3f9b434ad3a"}, {"problem": 32, "code": "(fn [x] (reduce (fn [a b] (->> a (cons b) (cons b))) [] (reverse x)))", "user": "5cf6522be4b0b71b1d808a58"}, {"problem": 32, "code": "(fn duplicate-seq\n  [xs]\n  (apply concat (map #(list % %) xs)))", "user": "5d49ec5ee4b0776584bd6f1c"}, {"problem": 32, "code": "#(mapcat list % %)", "user": "594fdfdce4b066ee0a44ae85"}, {"problem": 32, "code": "(fn fun1 [myList]\n  (cond\n   (empty? myList) '()\n   :else (apply conj (fun1 (rest myList)) (list (first myList) (first myList)))\n   ))", "user": "5da20e73e4b000c986472be1"}, {"problem": 32, "code": "#(mapcat (fn [item] (list item item)) %)", "user": "5d9c9446e4b0eb781811cdae"}, {"problem": 32, "code": "(fn [l]\n            (let [r (atom [])]\n              (doseq [i l]\n                (swap! r conj i i)\n                )\n              @r)\n            )", "user": "5d974b1de4b0d3f9b434ad36"}, {"problem": 32, "code": "#(mapcat (fn [s] (repeat 2 s)) %)", "user": "5da44d35e4b000c986472bf1"}, {"problem": 32, "code": "mapcat (fn[x] [x x])", "user": "5da05bcce4b000c986472bd0"}, {"problem": 32, "code": "#(interleave % %)", "user": "5ccf125ce4b0ccb0619628c0"}, {"problem": 32, "code": "(fn [x] (interleave x x))", "user": "5d931a58e4b0d3f9b434ad10"}, {"problem": 32, "code": "(fn duplicate-element\n  [x]\n  (sort (into x x)))", "user": "5d9c8a85e4b0eb781811cdad"}, {"problem": 32, "code": "#(interleave % %)", "user": "5d99dc47e4b0d3f9b434ad42"}, {"problem": 32, "code": "(partial mapcat #(vector % %))", "user": "5da8fa72e4b000c986472c2d"}, {"problem": 32, "code": "(fn dupe [coll] (\n                 apply concat (map (fn [x] (list x x) ) coll)\n                 )\n  )", "user": "5da975b9e4b000c986472c32"}, {"problem": 32, "code": "(fn [coll]\n  (->> coll\n       (map #(list % %))\n       (apply concat)))", "user": "56f9982ce4b07572ad1a88b8"}, {"problem": 32, "code": "#(interleave % %)", "user": "5da760ebe4b000c986472c1a"}, {"problem": 32, "code": "reduce #(conj (conj %1 %2) %2) []", "user": "5daa1fc8e4b000c986472c3e"}, {"problem": 32, "code": "#(mapcat (fn [x] [x x]) %)", "user": "50ef77a4e4b0bdaecbb47d99"}, {"problem": 32, "code": "#(interleave % %)", "user": "5da8b8ece4b000c986472c28"}, {"problem": 32, "code": "#(interleave % %)", "user": "5d965c73e4b0d3f9b434ad33"}, {"problem": 32, "code": "#(reduce (fn [x y] (conj x y y ) ) [] %)", "user": "5da98129e4b000c986472c33"}, {"problem": 32, "code": "(fn aaa[coll](let[a (fn b[coll ret](cond\n                                       (empty? coll) ret\n                                       :else (b (rest coll) (conj ret (repeat 2 (first coll))))))]\n                 (apply concat(a coll []))))", "user": "5dadf73ee4b0f8c104ccfc86"}, {"problem": 32, "code": "(fn [xs] (mapcat vector xs xs))", "user": "5da71eaee4b000c986472c15"}, {"problem": 32, "code": "(fn [s] (reduce (fn [acc item] (concat acc (list item item))) '() s))", "user": "5d2f5ba5e4b01671435dbcbf"}, {"problem": 32, "code": "(fn [s] (reduce concat (map #(take 2 (repeat %)) s)))", "user": "5daeb6bce4b0f8c104ccfc8b"}, {"problem": 32, "code": "#(interleave % %)", "user": "5d7aa22ee4b02e6b30c9354e"}, {"problem": 32, "code": "(fn [x] (interleave x x) )", "user": "5dab11cde4b000c986472c45"}, {"problem": 32, "code": "(fn duplicator [xs]\n  (reduce (fn [acc x]\n            (concat acc [x x]))\n          []\n          xs))", "user": "5db0d470e4b0f8c104ccfc9e"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "590b2d92e4b047aa04b199cf"}, {"problem": 32, "code": "(fn [a] (reduce #(conj %1 %2 %2) [] a))", "user": "5593ff3de4b0c79f6e1db949"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5daed892e4b0f8c104ccfc8f"}, {"problem": 32, "code": "#(mapcat (fn [s] (repeat 2 s)) %)", "user": "5d9515a9e4b0d3f9b434ad2c"}, {"problem": 32, "code": "mapcat #(do [% %])", "user": "5db5d09be4b010eb3c36cd31"}, {"problem": 32, "code": "#(apply concat \n    (for [x %]\n  \t\t[x x]))", "user": "5db19599e4b010eb3c36cd05"}, {"problem": 32, "code": "(fn [coll] (mapcat #(list % %) coll))", "user": "5db1969be4b010eb3c36cd06"}, {"problem": 32, "code": "#(reduce (fn [a b] (conj a b b)) [] %)", "user": "5db5d8b0e4b010eb3c36cd32"}, {"problem": 32, "code": "mapcat #(list %%)", "user": "5d51884be4b0776584bd6f61"}, {"problem": 32, "code": "(fn [xs]\n  (reduce #(apply conj %1 (list %2 %2)) [] xs))", "user": "5db68091e4b010eb3c36cd3a"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5d94fdf9e4b0d3f9b434ad2b"}, {"problem": 32, "code": "#(reduce (fn\n            [acc curr]\n            (into acc (conj (list curr) curr))\n            ) [] %)", "user": "5db861bce4b010eb3c36cd4b"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5db6cc4ae4b010eb3c36cd3b"}, {"problem": 32, "code": "(fn [x]\n  (reduce\n   (fn [op-seq curr-x]\n     (conj op-seq curr-x curr-x)\n   )          \n   []\n   x)\n)", "user": "5d8c8175e4b0915913b1d3e1"}, {"problem": 32, "code": "#(apply interleave (repeat 2 %))", "user": "5dbd51cfe4b09f47823971bb"}, {"problem": 32, "code": "#(interleave % %)", "user": "5dbf0281e4b0e59a23173d75"}, {"problem": 32, "code": "(fn [x]\n  (loop [f (first x) r (rest x) d '()]\n    (if (empty? r)\n     (reverse (conj d f f))\n     (recur\n      (first r)\n      (rest r)\n      (conj d f f)))))", "user": "5da9d89ae4b000c986472c3b"}, {"problem": 32, "code": "#(let [x % y (identity x)] (sort (concat x y)))", "user": "5b044436e4b0cc2b61a3bd71"}, {"problem": 32, "code": "(fn [coll] (mapcat #(repeat 2 %) coll))", "user": "5daa0d56e4b000c986472c3c"}, {"problem": 32, "code": "(fn [seqs]\n  (mapcat #(repeat 2 %) seqs))", "user": "5db9a6c3e4b010eb3c36cd56"}, {"problem": 32, "code": "#(interleave % %)", "user": "5dc12b0ae4b0e59a23173d84"}, {"problem": 32, "code": "(fn [s]\n  (apply concat (map #(repeat 2 %) s)))", "user": "5dbe63bde4b09f47823971c7"}, {"problem": 32, "code": "(fn duplicate-sequence [input]\n  (reduce (fn [collection element]\n            (conj collection element element)) [] input))", "user": "5dba063ee4b010eb3c36cd5c"}, {"problem": 32, "code": "mapcat (fn [x] [x x])", "user": "5dbe27c3e4b09f47823971c4"}, {"problem": 32, "code": "reduce (fn [ret elem] (conj (conj ret elem) elem)) []", "user": "5db7376fe4b010eb3c36cd43"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "5d9e8e40e4b000c986472bc2"}, {"problem": 32, "code": "(fn duplicate-sequence\n  [sequence]\n  (reduce #(conj(conj %1 %2) %2) [] sequence))", "user": "5db1e852e4b010eb3c36cd0a"}, {"problem": 32, "code": "reduce #(concat %1 [%2 %2]) []", "user": "5dbb5200e4b09f47823971a9"}, {"problem": 32, "code": "#(apply concat (map (fn [x] (list x x)) %))", "user": "5db8663ce4b010eb3c36cd4c"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "5da94ccfe4b000c986472c2f"}, {"problem": 32, "code": "#(interleave %1 %1)", "user": "57f17cb5e4b0bfb2137f5c0b"}, {"problem": 32, "code": "#(sort (concat %1 %1))", "user": "5dc40814e4b02f9375f4e1ae"}, {"problem": 32, "code": "(fn duplicate-once [elements]\n  (if (empty? elements)\n    '()\n    (conj (duplicate-once (rest elements)) (first elements) (first elements))))", "user": "5dc4719ae4b02f9375f4e1b5"}, {"problem": 32, "code": "(fn [x]\n  (loop [sq x result []]\n    (if (empty? sq)\n    result\n    (recur (rest sq)\n           (concat result (conj (conj [] (first sq)) (first sq)))))))", "user": "5db16084e4b010eb3c36cd01"}, {"problem": 32, "code": "(fn [listy] (reverse (reduce (fn [a b] (conj a b b)) (list) listy)))", "user": "5da71a00e4b000c986472c14"}, {"problem": 32, "code": "(fn [seq] (apply concat (map #(list % %) seq)))", "user": "5db92996e4b010eb3c36cd50"}, {"problem": 32, "code": "(fn [coll] (interleave coll coll))", "user": "5d84fccae4b0915913b1d390"}, {"problem": 32, "code": "(fn [l] (mapcat #(list % %) l))", "user": "5db35f85e4b010eb3c36cd22"}, {"problem": 32, "code": "(fn [xs] (reduce #(conj %1 %2 %2) [] xs))", "user": "5dc9d5c3e4b03836ba07d824"}, {"problem": 32, "code": "(fn [arg]\n  (seq (reduce #(concat %1 [%2 %2]) [] arg)))", "user": "5dc6e7f9e4b02f9375f4e1ca"}, {"problem": 32, "code": "#(interleave % %)", "user": "5dc72a9ce4b02f9375f4e1cd"}, {"problem": 32, "code": "#(interleave % %)", "user": "5dca5e0ae4b02b31cc3da3af"}, {"problem": 32, "code": "(fn [s]\n  (interleave s s))", "user": "5dcc152ae4b02b31cc3da3c3"}, {"problem": 32, "code": "(fn [x] (apply concat (for [y x] [y y]\n                        )))", "user": "5265337fe4b03e8d9a4a7104"}, {"problem": 32, "code": "(fn [n] (reduce concat (map #(list % %) n)))", "user": "5dcc0ee9e4b02b31cc3da3c2"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5dc98501e4b02f9375f4e1e6"}, {"problem": 32, "code": "#(mapcat (fn [x] [x x]) %)", "user": "5dc318cde4b02f700ae81835"}, {"problem": 32, "code": "(fn [coll]\n   (reduce (fn [acc, v] (concat acc [v v])) [] coll)\n   )", "user": "5dc9c4f2e4b02f9375f4e1f0"}, {"problem": 32, "code": "#(interleave % %)", "user": "5dcd182ae4b0b296f82db5a9"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "59b1a1b2e4b0e1f4e384c8eb"}, {"problem": 32, "code": "(fn [coll]\n  (mapcat (fn [x] (vector x x)) coll))", "user": "5da306a3e4b000c986472be7"}, {"problem": 32, "code": "#(sort (concat % %))", "user": "5dcb1e73e4b02b31cc3da3b6"}, {"problem": 32, "code": "#(reduce (fn [c n] (conj (conj c n) n) ) [] %)", "user": "5dcfdf23e4b0948ae9d9ad43"}, {"problem": 32, "code": "(fn [s] (mapcat #(repeat 2 %) s))", "user": "5dc9ccf8e4b02f9375f4e1f1"}, {"problem": 32, "code": "(fn dup-seq [coll]\n  (reverse\n   (reduce (fn [ret x]\n             (conj (conj ret x) x))\n           '() coll)))", "user": "5dcbe0dbe4b02b31cc3da3be"}, {"problem": 32, "code": "#(interleave % %)", "user": "5dd1fb19e4b0948ae9d9ad51"}, {"problem": 32, "code": "( fn [xs] (mapcat #( repeat 2 %1) xs))", "user": "53d63e6ce4b0e771c3025454"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "5dc9d4ede4b03836ba07d823"}, {"problem": 32, "code": "(fn f [l] (if (empty? l) l (concat (list (first l) (first l)) (f (rest l)))))", "user": "5dd35dcbe4b0948ae9d9ad5f"}, {"problem": 32, "code": "#(loop [i 0 acc []] (if (>= i (count %)) acc (recur (+ 1 i) (concat acc [(nth % i) (nth % i)]))))", "user": "5dd44256e4b0948ae9d9ad69"}, {"problem": 32, "code": "(fn [x](apply concat (map #(repeat 2 %) x)))", "user": "5dcbd629e4b02b31cc3da3bd"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "5dd69c8ce4b0948ae9d9ad83"}, {"problem": 32, "code": "(fn [n]\n  (->\n    (reduce #(conj %1 %2 %2) () n)\n    (sort)))", "user": "5da8e170e4b000c986472c29"}, {"problem": 32, "code": "(fn [xs]  (apply concat (reduce conj [] (map (fn [x] [x x]) xs))))", "user": "5d84545ee4b0915913b1d38b"}, {"problem": 32, "code": "(fn [col] (reduce #(concat %1 %2) (map #(list %1 %1) col)))", "user": "5793931ee4b0e215f87e845c"}, {"problem": 32, "code": "#(reduce concat '() (map (fn [e] (list e e)) %))", "user": "5dd67c22e4b0948ae9d9ad80"}, {"problem": 32, "code": "(fn [x] (reverse (reduce #(into %1 [%2 %2]) '() x)))", "user": "5dd90651e4b0948ae9d9ad97"}, {"problem": 32, "code": "(fn [x] (apply concat (map #((fn [& y] (concat y)) % %) x)))", "user": "5dcc5e5ce4b02b31cc3da3c7"}, {"problem": 32, "code": "#(mapcat identity (for [x %] (vector x x)))", "user": "5dce0151e4b0b296f82db5b5"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5ac67b47e4b0e27600da776e"}, {"problem": 32, "code": "(fn [s]\n  (reduce (fn [acc el]\n            (conj acc el el))\n          []\n          s))", "user": "5ddb6151e4b0948ae9d9adb0"}, {"problem": 32, "code": "(fn f32\n  [s]\n  (interleave s s))", "user": "5bd75870e4b0ed4b8aab4bc0"}, {"problem": 32, "code": "#(reverse (reduce (fn [x y] (cons y (cons y x))) '() %))", "user": "5ddcf10ae4b0948ae9d9adbe"}, {"problem": 32, "code": "#(apply concat (map (fn [itm] (conj (list itm) itm)) %))", "user": "5ddd3cbee4b0948ae9d9adc3"}, {"problem": 32, "code": "#(interleave % %)", "user": "5dddc292e4b0948ae9d9adcb"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5dd60c58e4b0948ae9d9ad7c"}, {"problem": 32, "code": "(fn [x]\n  (loop [i 0 l '()]\n    (if (= i (count x))\n      (reverse l)\n      (recur (inc i) (into l (repeat 2 (get x i)))))\n      ))", "user": "5dd70ee3e4b0948ae9d9ad85"}, {"problem": 32, "code": "#(apply concat (map vector % %))", "user": "5dde6251e4b0948ae9d9add3"}, {"problem": 32, "code": "(fn duplicate [lst]\n  \"Duplicate elements of  a list\"\n  (mapcat #(repeat 2 %) lst))", "user": "5d614059e4b0c9e5857d500e"}, {"problem": 32, "code": "#(reduce (fn [r x] (conj r x x)) [] %)", "user": "5ddd6cfae4b0948ae9d9adc4"}, {"problem": 32, "code": "(fn thirtytwo [seq]\n  (apply concat\n         (#(map (fn [x]\n                 (list x x))\n               %) seq)))", "user": "5dbf6016e4b0e59a23173d79"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "5de12192e4b0948ae9d9aded"}, {"problem": 32, "code": "(fn [x]\n  (reverse (reduce #(conj %1 %2 %2) () x)))", "user": "5de4f858e4b0948ae9d9ae09"}, {"problem": 32, "code": "(fn [col] (reduce #(conj %1 %2 %2) [] col))", "user": "54d187b7e4b0e8a36923e5e4"}, {"problem": 32, "code": "(fn [col]\n   (mapcat #(replicate 2 %) col))", "user": "5db98f39e4b010eb3c36cd53"}, {"problem": 32, "code": "(fn [x]\n  (loop [res [] arg x]\n    (if (empty? arg)\n      res\n      (recur (conj res (first arg) (first arg)) (rest arg)))))", "user": "5ddd134ae4b0948ae9d9adc0"}, {"problem": 32, "code": "mapcat (fn [x] [x x])", "user": "533b6f01e4b0e30313ee6cce"}, {"problem": 32, "code": "#(sort(apply concat (list % %)))", "user": "5de65feee4b0986d99407f68"}, {"problem": 32, "code": "(fn [coll]\n (loop [coll coll duplicated []]\n   (if (empty? coll)\n     (apply list duplicated)\n     (recur (rest coll) (into duplicated [(first coll) (first coll)]))\n     )\n   )\n  \n )", "user": "5de6484ce4b0986d99407f66"}, {"problem": 32, "code": "(fn [col] (reduce #(conj %1 %2 %2) [] col))", "user": "5da5a1eee4b000c986472c04"}, {"problem": 32, "code": "(fn [coll] (interleave coll coll )  )", "user": "5ddbd202e4b0948ae9d9adb4"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5da07d10e4b000c986472bd5"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5de6c094e4b0986d99407f6f"}, {"problem": 32, "code": "#(mapcat (fn [x] [x x]) %)", "user": "5de68f83e4b0986d99407f6c"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "5dd25ca8e4b0948ae9d9ad55"}, {"problem": 32, "code": "(fn [x] (apply concat (map #(take 2 (repeat %)) x)))", "user": "5de7e7cae4b0986d99407f7a"}, {"problem": 32, "code": "(fn dup [coll]\n  (reduce concat (for [x coll] (list x x))))", "user": "5decd4fde4b093ff7172757b"}, {"problem": 32, "code": "(fn [s] (reduce concat (map #(repeat 2 %) s)))", "user": "5d045162e4b0cc9c915881d3"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "5ddbd4b3e4b0948ae9d9adb5"}, {"problem": 32, "code": "#(for [x1 % x2 [1 1]] x1)", "user": "5deab1b2e4b0986d99407f9f"}, {"problem": 32, "code": "(fn [xs] (reduce #(concat % (repeat 2 %2)) '() xs))", "user": "5de48f92e4b0948ae9d9ae07"}, {"problem": 32, "code": "(fn [s]\n  (loop [ss s r '()]\n    (if (not-empty ss)\n      (recur (rest ss) (conj r (first ss) (first ss)))\n      (reverse r))))", "user": "5dcd7933e4b0b296f82db5ae"}, {"problem": 32, "code": "#(reduce (fn [s x] (cons x (cons x s))) '() (reverse %))", "user": "5dee144ae4b093ff71727591"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "514992d2e4b0b64cbeae1848"}, {"problem": 32, "code": "(fn f [s]\n  (let [f*\n        (fn [acc s*]\n          (conj acc s* s*))]\n    (reduce f* [] s)))", "user": "5defd277e4b093ff717275b0"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "5d5e2efee4b0c9e5857d4ff0"}, {"problem": 32, "code": "#(sort (concat % %))", "user": "5ddfd88be4b0948ae9d9ade1"}, {"problem": 32, "code": "(partial reduce #(conj %1 %2 %2) [])", "user": "5dea6a34e4b0986d99407f98"}, {"problem": 32, "code": "(fn[sequ] (reverse (reduce (fn [acc x] (cons x (cons x acc))) '() sequ)))", "user": "5df0c6ffe4b093ff717275c2"}, {"problem": 32, "code": "#(interleave % %)", "user": "5dee8835e4b093ff7172759a"}, {"problem": 32, "code": "#(interleave % %)", "user": "5df54584e4b03c219ef1a38f"}, {"problem": 32, "code": "#(reduce concat (map (partial repeat 2) %))", "user": "5ddb8a6ee4b0948ae9d9adb2"}, {"problem": 32, "code": "#(interleave % %)", "user": "5df39a6fe4b03c219ef1a36d"}, {"problem": 32, "code": "(fn [s] (\n  loop [xs s result []] (\n    if (empty? xs)\n      result\n      (recur (rest xs) (conj result (first xs) (first xs)))\n  )\n))", "user": "5df175bce4b03c219ef1a34d"}, {"problem": 32, "code": "reduce (fn [sequ x] (conj (conj sequ x) x)) []", "user": "4f24c859e4b0d66497709fef"}, {"problem": 32, "code": "(fn [elements] \n  (let [size (count elements)]\n    (loop [x 0\n           res []]\n      (if (= x size)\n        res\n        (recur (inc x) (concat res [(nth elements x) (nth elements x)]))))\n    )\n  )", "user": "5dc53ddee4b02f9375f4e1bd"}, {"problem": 32, "code": "#(interleave % %)", "user": "5df79420e4b0a607a9a45c9a"}, {"problem": 32, "code": "#(apply concat (map (partial repeat 2) %))", "user": "5dfb2e2ae4b0a607a9a45cd6"}, {"problem": 32, "code": "#(mapcat identity (for [me-list %] [me-list me-list]))", "user": "5de8648de4b0986d99407f7c"}, {"problem": 32, "code": "(fn f [s]\n  (let [f*\n        (fn [acc s*]\n          (conj acc s* s*))]\n    (reduce f* [] s)))", "user": "5db658ebe4b010eb3c36cd39"}, {"problem": 32, "code": "#(interleave % %)", "user": "5dfc457de4b0a607a9a45cea"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5dfa1c67e4b0a607a9a45cc5"}, {"problem": 32, "code": "#(reverse (reduce (fn [ls x] (cons x (cons x ls))) () %))", "user": "5d98f616e4b0d3f9b434ad3c"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "5dfe3928e4b0a607a9a45d04"}, {"problem": 32, "code": "(fn [lst]\n  (loop [tbp lst\n         done '()]\n    (if (empty? tbp)\n      (reverse done)\n      (recur (rest tbp)\n             (cons (first tbp) (cons (first tbp) done))))))", "user": "55527251e4b0deb715856df3"}, {"problem": 32, "code": "#(interleave % %)", "user": "5dee6926e4b093ff71727598"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5dfb20b8e4b0a607a9a45cd3"}, {"problem": 32, "code": "(fn dup-seq\n  ([seqn]\n   (dup-seq seqn []))\n  ([seqn res]\n   (if (empty? seqn)\n     res\n     (let [first-seq (first seqn)]\n       (println first-seq)\n     (dup-seq (rest seqn) (conj res first-seq first-seq))))\n   ))", "user": "5e00752fe4b0a607a9a45d24"}, {"problem": 32, "code": "#(apply concat (for [x %] (repeat 2 x)))", "user": "5d6eaa58e4b04d129b00f2cd"}, {"problem": 32, "code": "(fn duplicate [collection]\n  (reduce (fn [accumulator current]\n         (conj accumulator current current)) [] collection))", "user": "5df0f338e4b093ff717275c6"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5bfc9037e4b0bdcf453d15f2"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "5b94c507e4b0c0b3ffbd4a5a"}, {"problem": 32, "code": "(fn  duplicate [coll]\n\t(interleave coll coll))", "user": "5bb4baace4b0a20761a23552"}, {"problem": 32, "code": "(fn [col] (-> (reduce #(conj %1 %2 %2) '() col)\n              reverse))", "user": "5e066185e4b0978307768fa4"}, {"problem": 32, "code": "(fn [coll]\n  (reverse (reduce #(cons %2 (cons %2 %1)) '() coll)))", "user": "5df75fd8e4b0a607a9a45c92"}, {"problem": 32, "code": "mapcat (fn [x] [x x])", "user": "5d89427ae4b0915913b1d3b5"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5e01addee4b0a607a9a45d3f"}, {"problem": 32, "code": "#(interleave % %)", "user": "5bf0b940e4b0a6d31fed215c"}, {"problem": 32, "code": "#(interleave % %)", "user": "5e03a15be4b0a607a9a45d5e"}, {"problem": 32, "code": "#(interleave % %)", "user": "5af865a9e4b0cc2b61a3bcd1"}, {"problem": 32, "code": "(fn [x]\n  (sort (reduce #(cons %2 %1) x x)))", "user": "57fc5e42e4b0d3187e900997"}, {"problem": 32, "code": "#(interleave % %)", "user": "5d8b3d5be4b0915913b1d3d1"}, {"problem": 32, "code": "(fn [coll]\n  (loop [[elem & coll] coll duplicated []]\n    (if (nil? elem)\n\t\tduplicated\n\t\t(recur coll (conj duplicated elem elem))      \n    )\n  )\n)", "user": "5e09fd26e4b099d064962f60"}, {"problem": 32, "code": "reduce #(conj (conj % %2) %2) []", "user": "5dd3383be4b0948ae9d9ad5e"}, {"problem": 32, "code": "(fn [xs] (apply concat (map (fn [x] [x x]) xs)))", "user": "5d91acb8e4b0915913b1d406"}, {"problem": 32, "code": "#(interleave % %)", "user": "5e0d948fe4b099d064962f98"}, {"problem": 32, "code": "#(interleave % %)", "user": "57023e92e4b08d47c97781da"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5e00b6e7e4b0a607a9a45d2b"}, {"problem": 32, "code": "#(loop [in % out []]\n        (if (= in nil)\n          (seq out)\n          (recur (next in) \n                 (concat out (take 2 (repeat (first in))))\n          )\n        )\n)", "user": "5e08c3dde4b0978307768fc8"}, {"problem": 32, "code": "(fn [xs]\n  (->> xs\n   (map #(list % %))\n   (reduce concat)))", "user": "5e0e14bde4b099d064962fa3"}, {"problem": 32, "code": "(fn [col]\n   (into [] (for [x col y (range 2)] x)))", "user": "5e078ba7e4b0978307768fb6"}, {"problem": 32, "code": "reduce #(into % [%2 %2]) []", "user": "5e0e836fe4b099d064962fa8"}, {"problem": 32, "code": "#(apply concat (map (fn [e] [e e]) %))", "user": "5e0ceca5e4b099d064962f91"}, {"problem": 32, "code": "#(interleave % %)", "user": "5e0a6916e4b099d064962f65"}, {"problem": 32, "code": "#(interleave % %)", "user": "5e121a89e4b099d064962fe4"}, {"problem": 32, "code": "(fn [coll] (apply concat (map #(repeat 2 %) coll)))", "user": "5cbc1ee7e4b026601754b9e1"}, {"problem": 32, "code": "(fn duplicate-seq\n  [seq]\n  (loop [res seq\n         remaining seq]\n    (if (empty? remaining)\n      (sort res)\n      (recur (conj res (first remaining)) (rest remaining)))))", "user": "5deeb6fde4b093ff7172759f"}, {"problem": 32, "code": "(fn [coll]\n  (loop [coll coll\n         acc (empty coll)]\n    (if (empty? coll)\n      acc\n      (recur \n       (rest coll) \n       (concat acc (list (first coll) (first coll)))))))", "user": "58f3c18ee4b0438e51c2cead"}, {"problem": 32, "code": "(fn primer [collection]\n (\n   (fn duplicate [origCollection newCollection]\n   ( if (= 0 (count origCollection)) \n    newCollection\n    (let [\n      value (first origCollection)\n      double-value (repeat 2 value)\n      updated (concat newCollection double-value)\n      ]\n      (duplicate (rest origCollection) updated)\n      ))\n    ) \n  collection [])\n)", "user": "5dcc651de4b02b31cc3da3c8"}, {"problem": 32, "code": "#(reduce (fn [a, e] (conj a e e)) [] %)", "user": "54b17a49e4b09f271ff37d1e"}, {"problem": 32, "code": "(fn [coll]\n   (reduce (fn [result num]\n             (conj (conj result num) num)) []  coll))", "user": "5e16fd78e4b0a047bd49f726"}, {"problem": 32, "code": "#(apply interleave (repeat 2 %))", "user": "5e144bd5e4b0a047bd49f6e7"}, {"problem": 32, "code": "#(interleave % %)", "user": "5e14e396e4b0a047bd49f6f7"}, {"problem": 32, "code": "#(interleave % %)", "user": "5e17bb46e4b00200644e3d5a"}, {"problem": 32, "code": "(fn [a] (loop [src a res []] (if (empty? src) (seq res) (recur (rest src) (conj res (first src) (first src))))))", "user": "5e0d1947e4b099d064962f92"}, {"problem": 32, "code": "(fn [x] (mapcat #(list % %) x))", "user": "5e17509fe4b00200644e3d52"}, {"problem": 32, "code": "#(mapcat (fn [x] [x x]) %)", "user": "5e1754abe4b00200644e3d53"}, {"problem": 32, "code": "(fn [s]\n  ((fn [r [a & b]]\n     (println \"r:\" r \"a:\" a \"b:\" b)\n     (if (nil? a)\n       (reverse r)\n       (recur (cons a (cons a r)) b)))\n   '() s))", "user": "5e178fbee4b00200644e3d57"}, {"problem": 32, "code": "(fn [x]  \n  (reduce\n    (fn [a b] (conj (conj a b) b))\n    []\n    x))", "user": "5e18bd30e4b0dc95940084fa"}, {"problem": 32, "code": "(fn\n  [seq]\n  (reverse (reduce\n    (fn\n      [acc item]\n      (cons item (cons item acc))) () seq)))", "user": "5e16006be4b0a047bd49f711"}, {"problem": 32, "code": "#(reduce (fn [x y] (concat x (repeat 2 y))) '() %)", "user": "5e0cbc14e4b099d064962f8e"}, {"problem": 32, "code": "#(mapcat list % %)", "user": "4e586949535d8a8b8723a292"}, {"problem": 32, "code": "(fn dups [x]\n  (if (empty? x)\n    x\n    (cons (first x) \n          (cons (first x)\n                (dups (rest x))))))", "user": "5e18c885e4b0dc95940084fc"}, {"problem": 32, "code": "(fn [seq] (loop [prefix seq dup '()] (if (empty? prefix) dup (recur (butlast prefix) (conj dup (last prefix) (last prefix))))))", "user": "5e1cc888e4b0dc959400853d"}, {"problem": 32, "code": "(fn [col]\n           (reduce (fn [result x]\n                     (concat result [x x]))\n                   '() col))", "user": "5e1c3e6ee4b0dc9594008530"}, {"problem": 32, "code": "(fn dubl [x]\n\t\t(cond\n\t\t\t(nil? (first x)) nil\n\t\t\t:else \n\t\t\t  (concat\n\t\t\t    (list (first x) (first x))\n\t\t\t    (dubl (rest x))\n\t\t\t  )\n\t\t)\n\t)", "user": "5e1d01b5e4b0dc9594008542"}, {"problem": 32, "code": "#(interleave % %)", "user": "5e1a3989e4b0dc9594008511"}, {"problem": 32, "code": "(fn dupe [coll]\n  (reduce #(conj %1 %2 %2) [] coll))", "user": "5e155173e4b0a047bd49f6fd"}, {"problem": 32, "code": "#(mapcat (partial repeat 2) %)", "user": "5d929ceae4b0915913b1d412"}, {"problem": 32, "code": "mapcat #(vector % %)", "user": "5e21c933e4b05b4b01516128"}, {"problem": 32, "code": "(fn[x](apply concat (map #(take 2 (repeat %)) x)))", "user": "5e1ec8c0e4b0dc9594008561"}, {"problem": 32, "code": "#(interleave % %)", "user": "5e2549c8e4b05b4b0151615f"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5e23d513e4b05b4b01516145"}, {"problem": 32, "code": "(fn [x]\n    (loop [y '()\n         \tz (seq x)]\n      (if (= z '())\n        y\n          (recur (concat y [(first z)] [(first z)]) (rest z))\n       )\n     )\n )", "user": "5e265173e4b05b4b01516175"}, {"problem": 32, "code": "(comp (partial reduce concat) (partial map (partial repeat 2)))", "user": "5e04ce34e4b0a607a9a45d71"}, {"problem": 32, "code": "(fn [se]\n    (apply concat\n    (map \n         (fn [x] [x x]) se)\n    )\n)", "user": "5e23ca7fe4b05b4b01516144"}, {"problem": 32, "code": "(fn DuplicateSeq\n  [collection]\n  (reduce #(concat %1 (list %2 %2)) '() collection))", "user": "5e16b820e4b0a047bd49f71f"}, {"problem": 32, "code": "mapcat #(vector % %)", "user": "5e246f92e4b05b4b01516150"}, {"problem": 32, "code": "(fn [s] (reduce concat (map #(repeat 2 %) s)))", "user": "5e21f944e4b05b4b0151612d"}, {"problem": 32, "code": "#(sort (concat % %))", "user": "5e22e4c5e4b05b4b01516137"}, {"problem": 32, "code": "#(interleave % %)", "user": "5e054752e4b0a607a9a45d78"}, {"problem": 32, "code": "(fn [seq] (mapcat #(repeat 2 %) seq))", "user": "5e228b5ae4b05b4b01516134"}, {"problem": 32, "code": "(fn [s] (apply concat (map #(list % %) s)))", "user": "5e2bea53e4b05b4b015161d2"}, {"problem": 32, "code": "(fn[c](mapcat #(vector % %) c))", "user": "5e29cb4ce4b05b4b015161ae"}, {"problem": 32, "code": "#(reduce (fn repeater [col,x] (concat col (repeatedly 2 (constantly x)))) '() %)", "user": "5dfb267ee4b0a607a9a45cd4"}, {"problem": 32, "code": "#(reduce (fn [coll x] (conj coll x x)) [] %)", "user": "5b4bfd04e4b02d533a91bca2"}, {"problem": 32, "code": "#(interleave % %)", "user": "5e257a33e4b05b4b01516166"}, {"problem": 32, "code": "reduce (fn [acc elem] (conj acc elem elem)) []", "user": "5e34348be4b0650de70e2b16"}, {"problem": 32, "code": "#(interleave % %)", "user": "5e2ead6ae4b05b4b015161f5"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "5da4fc6be4b000c986472bff"}, {"problem": 32, "code": "#(interleave % %)\n;mapcat #(list % %)", "user": "5e357507e4b0650de70e2b2a"}, {"problem": 32, "code": "(fn [x]\n   (apply concat (map (fn [v] (list v v)) x)))", "user": "5d73fb31e4b02e6b30c93516"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5e38a9cbe4b01d43a70e8dc2"}, {"problem": 32, "code": "(fn dup-sort [seqq] (for [i seqq j [1 2]] i))", "user": "5e380e72e4b01d43a70e8db0"}, {"problem": 32, "code": "#(interleave % %)", "user": "5e36ca7de4b0650de70e2b3c"}, {"problem": 32, "code": "(fn [xs]\n  (if-not (seq xs)\n    (sequence nil)\n    (seq (reduce #(conj %1 %2 %2) [] xs))))", "user": "5d47fa13e4b07c84aa5ae6b6"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "5e3810ffe4b01d43a70e8db1"}, {"problem": 32, "code": "(fn [xs]\n  ((fn dupelem [xs ys]\n     (if (empty? xs)\n       (reverse ys)\n       \n       (dupelem (rest xs) (conj (conj ys (first xs)) (first xs))))) xs '()))", "user": "5e394c33e4b01d43a70e8dd1"}, {"problem": 32, "code": "(fn [xs]\n  (reverse (reduce (fn [accumulator value]\n             (conj accumulator value value))\n           () xs)))", "user": "5e392de0e4b01d43a70e8dcb"}, {"problem": 32, "code": "#(reduce \n  (fn [a i]\n    (apply conj a (repeat 2 i)))\n  [] %)", "user": "5e3a25d4e4b01d43a70e8dde"}, {"problem": 32, "code": "(fn [coll] (reduce #(into %1 [%2 %2]) [] coll))", "user": "5e3a8929e4b01d43a70e8de3"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5e381434e4b01d43a70e8db4"}, {"problem": 32, "code": "#(interleave % %)", "user": "5defc177e4b093ff717275af"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "59fa0bb6e4b0ca45a743a352"}, {"problem": 32, "code": "#(apply concat (map list % %))", "user": "5e3975a3e4b01d43a70e8dd3"}, {"problem": 32, "code": "#(interleave % %)", "user": "5e3e23d9e4b01d43a70e8e20"}, {"problem": 32, "code": "(fn [numbers]\n   (apply concat (map #(list %1 %1) numbers)))", "user": "5e3ef7d4e4b01d43a70e8e2d"}, {"problem": 32, "code": "#(apply concat (for [x %\n      :let [y x\n            z x]]\n  [y z]))", "user": "5e348945e4b0650de70e2b1d"}, {"problem": 32, "code": "(fn\n  [coll]\n  (interleave coll coll))", "user": "5c9a638fe4b048ec896c5aae"}, {"problem": 32, "code": "#(mapcat (fn [ele] (conj [ele] ele)) %)", "user": "5e259d05e4b05b4b01516169"}, {"problem": 32, "code": "#(interleave % %)", "user": "5e3302ece4b0650de70e2b02"}, {"problem": 32, "code": "mapcat #(conj '() % %)", "user": "5d28d935e4b092dab7f59c88"}, {"problem": 32, "code": "#(interleave % %)", "user": "5e41b679e4b01d43a70e8e58"}, {"problem": 32, "code": "#(interleave % %)", "user": "5e2586afe4b05b4b01516167"}, {"problem": 32, "code": "(fn [x]\n  (apply concat\n         (map #(repeat 2 %)\n           x)))", "user": "5e3c6687e4b01d43a70e8e04"}, {"problem": 32, "code": "(fn\n  [items]\n  (->> items\n       (reduce #(conj %1 %2 %2) '())\n       reverse))", "user": "5e47e1eee4b043cd24807a35"}, {"problem": 32, "code": "(fn duplicate [xs]\n  (if (empty? xs) xs\n        (cons (first xs) (cons (first xs) (duplicate (rest xs))))))", "user": "5e3e0b3fe4b01d43a70e8e1e"}, {"problem": 32, "code": "#(->> %\n                   (reduce (fn [result item]\n                             (conj result item item)) []))", "user": "5e491182e4b043cd24807a46"}, {"problem": 32, "code": "(fn doble [arr]\n  (if (empty? arr) []\n    (conj (conj (doble (drop-last arr)) (last arr)) (last arr))))", "user": "5e42b688e4b01d43a70e8e6b"}, {"problem": 32, "code": "(fn [s] (reduce #(conj (conj %1 %2) %2)  [] s))", "user": "5d078e2de4b0cc9c915881fa"}, {"problem": 32, "code": "(fn [c] (mapcat #(vector % %)  c))", "user": "5e453725e4b01d43a70e8e93"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5e4b60d3e4b0889a8790a553"}, {"problem": 32, "code": "#(reduce (fn [acc x] \n           (-> acc\n               (conj x)\n               (conj x))) [] %)", "user": "5e4471e1e4b01d43a70e8e85"}, {"problem": 32, "code": "(fn duplicate [coll] \n  (if (empty? coll)\n    coll\n    (concat \n     (list (first coll) \n     (first coll))\n     (duplicate (rest coll)))))", "user": "5e471203e4b043cd24807a2a"}, {"problem": 32, "code": "mapcat #(vector % %)", "user": "5e44c804e4b01d43a70e8e89"}, {"problem": 32, "code": "(fn duplicate [x]                                 \n   (reduce #(conj % %2 %2) [] x)                                                                            \n)", "user": "5e42ba49e4b01d43a70e8e6c"}, {"problem": 32, "code": "(fn duplicate-sequence\n  [col]\n  (mapcat identity(map #(take 2 (repeat %)) col)))", "user": "5e4e3c31e4b027a2e10ac0ad"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "5e208e4be4b05b4b01516113"}, {"problem": 32, "code": "(fn dup [xs]\n   (if (seq xs)\n     (cons (first xs)\n           (cons (first xs) (dup (rest xs))))\n     nil))", "user": "505223fae4b0a561d07d8f17"}, {"problem": 32, "code": "(fn [xs] (mapcat #(identity [% %]) xs))", "user": "5e486cb0e4b043cd24807a3e"}, {"problem": 32, "code": "mapcat #(identity [% %])", "user": "5e4b8fe8e4b0889a8790a555"}, {"problem": 32, "code": "#(sort (concat % %))", "user": "5bfc50ece4b0bdcf453d15ea"}, {"problem": 32, "code": "(fn [xs] \n  (mapcat (partial repeat 2) xs))", "user": "5e41a67be4b01d43a70e8e56"}, {"problem": 32, "code": "(fn a [s] (when (seq s) (cons (first s) (cons (first s) (a (rest s))))))", "user": "5e5b8d92e4b0fd0acd158658"}, {"problem": 32, "code": "(fn [coll] (mapcat #(vector %1 %1) coll))", "user": "5e5c425ae4b0fd0acd158662"}, {"problem": 32, "code": "(fn duplicate-sequence [x]\n   (sort (reduce #(conj (conj %1 %2) %2) '() x)))", "user": "5e595637e4b027a2e10ac10e"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5e5913b5e4b027a2e10ac10b"}, {"problem": 32, "code": "#(->> %\n      (map (fn [e] [e e]))\n      (reduce concat []))", "user": "5e546e20e4b027a2e10ac0eb"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5e5809bbe4b027a2e10ac104"}, {"problem": 32, "code": "#(mapcat (fn[x](list x x)) %)", "user": "5e48ec09e4b043cd24807a45"}, {"problem": 32, "code": "#(interleave % %)", "user": "5e5fd7afe4b0fd0acd158680"}, {"problem": 32, "code": "#(mapcat\n  (juxt identity identity)\n  %)", "user": "5e64ae6ce4b0fd0acd1586ac"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "5ddecfe5e4b0948ae9d9adda"}, {"problem": 32, "code": "reduce (fn [a b] (conj (conj a b) b)) []", "user": "5e31a4b0e4b05b4b0151622b"}, {"problem": 32, "code": "reduce (fn [x y] (conj x y y)) []", "user": "5e63ffa0e4b0fd0acd1586a6"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "5e62444fe4b0fd0acd158694"}, {"problem": 32, "code": "#(interleave % %)", "user": "5e4375e7e4b01d43a70e8e73"}, {"problem": 32, "code": "#(mapcat (fn [x] [x x]) %)\n;; #(interleave % %) is also pretty great", "user": "5df70ee8e4b0a607a9a45c8a"}, {"problem": 32, "code": "#(reduce (fn [res i] (concat res (repeat 2 i))) () %)", "user": "5e5f8a07e4b0fd0acd15867c"}, {"problem": 32, "code": "#(apply concat (map (fn [el] [el el]) %))", "user": "54b51366e4b05787c3b16398"}, {"problem": 32, "code": "mapcat (fn [x] [x x])", "user": "5e65bfe4e4b0fd0acd1586b9"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "5e5f2c17e4b0fd0acd158678"}, {"problem": 32, "code": "(fn [n]\n  (reduce concat (map #(take 2 (repeat %)) n)))", "user": "5e663073e4b0fd0acd1586bc"}, {"problem": 32, "code": "#(sort (into % %))", "user": "5df79c31e4b0a607a9a45c9b"}, {"problem": 32, "code": "#(interleave % %)", "user": "5e5fa1ffe4b0fd0acd15867d"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "5b562842e4b02d533a91bd3f"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "5e66c144e4b0e171e1033683"}, {"problem": 32, "code": "#(mapcat (fn [x] (list x x)) %)", "user": "5e692be9e4b04a83ad7cd269"}, {"problem": 32, "code": "(fn meh [x]\n  (reduce (fn [new-list item]\n            (conj new-list item item))\n          []\n          x))", "user": "5e6834e0e4b04793f195eaf9"}, {"problem": 32, "code": "reduce #(into %1 [%2 %2]) []", "user": "5e5096c6e4b027a2e10ac0c6"}, {"problem": 32, "code": "#(mapcat \n    (partial \n      repeat \n      2) %)", "user": "54dc84ede4b024c67c0cf784"}, {"problem": 32, "code": "(fn [sq] (mapcat (fn [x] (list x x)) sq))", "user": "5e6ff368e4b04a83ad7cd2a8"}, {"problem": 32, "code": "#(reduce (fn [acc item]\n           (conj acc item item))\n         []\n         %)", "user": "5e62c405e4b0fd0acd15869b"}, {"problem": 32, "code": "#(reverse (reduce (fn [l x] (conj l x x)) '() %))", "user": "5e6e6537e4b04a83ad7cd29a"}, {"problem": 32, "code": "(fn [sequence]\n    (reduce concat (map #(take 2 (repeat %)) sequence)))", "user": "5e71b6e7e4b085ba37836dbe"}, {"problem": 32, "code": "reduce (fn [acc v] (concat acc (repeat 2 v))) []", "user": "5e6cfc25e4b04a83ad7cd28e"}, {"problem": 32, "code": "(fn [coll]\n   (loop [coll coll\n          coll-acc []]\n     (if (empty? coll)\n       (seq coll-acc)\n       (recur (rest coll) (conj coll-acc (first coll) (first coll))))))", "user": "5e724492e4b085ba37836dc7"}, {"problem": 32, "code": "(fn duplicate-sequence [s] \n  (apply concat (for [x s] [x x])))", "user": "5e731c7fe4b085ba37836dcd"}, {"problem": 32, "code": "(fn [sequence] (interleave sequence sequence))", "user": "5e6df58ee4b04a83ad7cd297"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5e639b4be4b0fd0acd1586a2"}, {"problem": 32, "code": "(fn [coll]\n  (loop [coll coll, v []]\n    (if (seq coll)\n      (recur (rest coll) (conj (conj v (first coll)) (first coll)))\n      (seq v))))", "user": "5e76274ce4b085ba37836deb"}, {"problem": 32, "code": "(fn dup\n  [xs]\n  (reduce \n    (fn [acc cur] (apply conj acc (repeat 2 cur))) \n    [] \n    xs))", "user": "5e4fae60e4b027a2e10ac0b9"}, {"problem": 32, "code": "(fn [lst]\n  (reduce #(concat %1 (repeat 2 %2)) [] lst))", "user": "5e668d87e4b0e171e1033681"}, {"problem": 32, "code": "(fn [s] (mapcat #(repeat 2 %) s))", "user": "5e6ca949e4b04a83ad7cd289"}, {"problem": 32, "code": "#(apply concat (map list % %))", "user": "5e71f267e4b085ba37836dc1"}, {"problem": 32, "code": "(fn [col]\n  (interleave col col))", "user": "5e12327ee4b099d064962fe5"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5e7a5d56e4b085ba37836e0a"}, {"problem": 32, "code": "#(reduce (fn [acc curr] (into acc [curr curr])) [] %)", "user": "5e67ab18e4b0e171e103368a"}, {"problem": 32, "code": "#(interleave % %)", "user": "5e7aba9fe4b085ba37836e0c"}, {"problem": 32, "code": "#(interleave % %)", "user": "5e735071e4b085ba37836dcf"}, {"problem": 32, "code": "(fn dup\n  ([vec] (dup vec []))\n  ([vec newV]\n   (if (empty? vec) newV\n                    (dup (next vec) (conj newV (first vec) (first vec))))\n   )\n  )", "user": "5e77ece9e4b085ba37836df3"}, {"problem": 32, "code": "(fn [arr]\n  (loop [[elem & remaining] arr result []]\n    (if (= remaining nil)\n      (conj result elem elem)\n      (recur remaining (conj result elem elem)))))", "user": "5e7f62cce4b085ba37836e3b"}, {"problem": 32, "code": "#(reduce \n  (fn [a b]\n     (concat (concat a [b])[b])\n  ) '() %)", "user": "5e79fcb9e4b085ba37836e08"}, {"problem": 32, "code": "(fn func [coll] (mapcat (fn [x] [x x]) coll))", "user": "5e805895e4b085ba37836e44"}, {"problem": 32, "code": "(fn[seqn](mapcat #(repeat 2 %) seqn))", "user": "5dcace6be4b02b31cc3da3b1"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5e8308abe4b09a7a73c8bbb4"}, {"problem": 32, "code": "#(reduce (fn [a x]\n           (conj (conj a x) x)) (empty %1)\n         %1)", "user": "5e5f83a2e4b0fd0acd15867b"}, {"problem": 32, "code": "#(interleave % %)", "user": "5e7bb000e4b085ba37836e1d"}, {"problem": 32, "code": "(fn [coll]\n     (loop [x coll\n            result '()]\n       (if (empty? x)\n         result\n         (recur (next x)\n                (concat result (repeat 2 (first x)))))))", "user": "5e7b1ef4e4b085ba37836e10"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5e832e75e4b09a7a73c8bbb5"}, {"problem": 32, "code": "#(reduce (fn [acc x] (concat acc (repeat 2 x))) '() %)", "user": "5e860270e4b09a7a73c8bbdb"}, {"problem": 32, "code": "#(loop [i % o '()]\n   (if (first i)\n     (recur (rest i) (conj o (first i) (first i)))\n     (reverse o)))", "user": "5e85163be4b09a7a73c8bbd0"}, {"problem": 32, "code": "(fn [values] (loop [new [] \n       old values]\n  (if (empty? old)\n    new\n    (recur (conj new (first old) (first old)) (rest old)))))", "user": "5d517784e4b0776584bd6f60"}, {"problem": 32, "code": "reduce #(conj (conj %1 %2) %2) []", "user": "5e85fa2ce4b09a7a73c8bbd9"}, {"problem": 32, "code": "#(mapcat (fn [x] (repeat 2 x)) %)", "user": "5e839edde4b09a7a73c8bbba"}, {"problem": 32, "code": "(fn dup [x] (reduce #(-> %1 (conj %2) (conj %2)) [] x))", "user": "5e69589de4b04a83ad7cd26d"}, {"problem": 32, "code": "#(apply concat (for [x %] (take 2 (repeat x))))", "user": "5e13a6b7e4b099d064963001"}, {"problem": 32, "code": "(fn [coll]\n  (apply concat (map #(take 2 (repeat %)) coll)))", "user": "5e7b68e8e4b085ba37836e17"}, {"problem": 32, "code": "#(sort (concat % %))", "user": "5d6f8b4de4b04d129b00f2d3"}, {"problem": 32, "code": "(fn [s]\n  (apply concat (map list s s)))", "user": "5e856736e4b09a7a73c8bbd2"}, {"problem": 32, "code": "(fn [x] \n (reverse (reduce #(conj (conj % %2) %2) '() x))\n  )", "user": "5e85b853e4b09a7a73c8bbd5"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5e83696ce4b09a7a73c8bbb7"}, {"problem": 32, "code": "#(interleave % %)", "user": "4eb70649535d7eef30807373"}, {"problem": 32, "code": "(fn problem32 [col]\n\t(reverse (reduce (fn [acc item] (into acc (list item item))) '() col)))", "user": "5006474ce4b0678c553fc481"}, {"problem": 32, "code": "#(interleave % %)", "user": "5dc88a38e4b02f9375f4e1db"}, {"problem": 32, "code": "reduce #(conj (conj %1 %2) %2) []", "user": "5e7dc2d8e4b085ba37836e2f"}, {"problem": 32, "code": "#(interleave % %)", "user": "5e8ce2fee4b0cb0169546328"}, {"problem": 32, "code": "(fn [li] (reduce concat () (map #(list % %) li)))", "user": "5e7374ace4b085ba37836dd0"}, {"problem": 32, "code": "#((comp sort concat) % %)", "user": "5e8f87c7e4b0cb0169546342"}, {"problem": 32, "code": "(fn [l]\n  (seq (reduce #(concat %1 (repeat 2 %2)) [] l)))", "user": "5c3e5227e4b08cd430848e80"}, {"problem": 32, "code": "(fn duplicate [arg] (loop [x (first arg)\n                              rest-seq (rest arg)\n                              result '()]\n                        (if (nil? x) \n                          (reverse result)\n                          (recur (first rest-seq)(rest rest-seq)(conj result x x)))))", "user": "5e790f6be4b085ba37836e01"}, {"problem": 32, "code": "#(interleave % %)", "user": "5e954b9ee4b0fbed045a3809"}, {"problem": 32, "code": "#(loop [sq % dp []]\n   (if (empty? sq)\n     (apply list dp)\n     (let [el (first sq)]\n       (recur (rest sq) (conj (conj dp el) el))\n     )\n )\n)", "user": "5e947a69e4b0fbed045a37f8"}, {"problem": 32, "code": "(fn [coll]\n  (reduce (fn [acc item] (conj acc item item)) [] coll))", "user": "5e84b48ee4b09a7a73c8bbc8"}, {"problem": 32, "code": "(fn duplicate-arr\n  ([arg] (apply concat (map #(list % %) arg))))", "user": "5e88a676e4b0cb016954630a"}, {"problem": 32, "code": "(fn [sq]\n  (reduce (fn [my-coll elem] (conj (conj my-coll elem) elem)) [] sq)\n  )", "user": "5c7d590ae4b0d597f478caaa"}, {"problem": 32, "code": "#(reduce (fn [l e] (conj (conj l e) e)) [] %)", "user": "5e958767e4b0fbed045a380b"}, {"problem": 32, "code": "#(interleave % %)", "user": "5be9ad9be4b0f319e2d7ec76"}, {"problem": 32, "code": "(fn \n  [lst]\n  (mapcat #(cons % (list %)) lst))", "user": "5e9636fee4b0fbed045a3816"}, {"problem": 32, "code": "(fn duplicate\n  [lst]\n  (mapcat #(list % %) lst))", "user": "5e95013fe4b0fbed045a3800"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5e980e6be4b0157ca96647d6"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5e99cbd4e4b0157ca96647e6"}, {"problem": 32, "code": "(fn f [[x & xs :as l]] \n  (if (empty? l)\n    '()\n    (conj (f xs) x x)))", "user": "5e98e338e4b0157ca96647db"}, {"problem": 32, "code": "(fn dup [s]\n  (apply concat\n  \t(map #(list % %) s)))", "user": "5e98e8a9e4b0157ca96647dc"}, {"problem": 32, "code": "(fn [x] (reduce concat (map #(take 2 (repeat %)) x)))", "user": "5e996e76e4b0157ca96647e4"}, {"problem": 32, "code": "(fn dupe [s] \n  (if (empty? s) s \n    (conj (dupe (rest s)) (first s) (first s))))", "user": "5e9683f1e4b0157ca96647c7"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5e95873ae4b0fbed045a380a"}, {"problem": 32, "code": "(fn [lst]\n  (mapcat #(list % %) lst))", "user": "5e94ff5fe4b0fbed045a37ff"}, {"problem": 32, "code": "reduce #(concat %1 [%2 %2]) '()", "user": "5e976fa8e4b0157ca96647cf"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5e9771dee4b0157ca96647d0"}, {"problem": 32, "code": "#(interleave % %)", "user": "5e218bb7e4b05b4b01516123"}, {"problem": 32, "code": "(fn [x]\n  (mapcat #(list % %) x))", "user": "5e978fe5e4b0157ca96647d1"}, {"problem": 32, "code": "#(interleave % %)", "user": "5e9e8648e4b00a66d4a95178"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5e950310e4b0fbed045a3802"}, {"problem": 32, "code": "(fn [x] (apply concat (map #(list % %) x)))", "user": "59750a68e4b01722bebd4cba"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5e9e408fe4b00a66d4a95172"}, {"problem": 32, "code": "#(reduce (fn [res x] (conj res x x)) [] %)", "user": "5e85d0bde4b09a7a73c8bbd6"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5e9d1c75e4b0157ca9664801"}, {"problem": 32, "code": "(fn [x] (mapcat #(list % %) x))", "user": "5e950178e4b0fbed045a3801"}, {"problem": 32, "code": "(fn [coll]\n  (loop [c coll, res []]\n    (if (empty? c)\n      res\n      (recur (rest c) (conj res (first c) (first c))))))", "user": "5e9f38cce4b00a66d4a9517e"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "5e9878b9e4b0157ca96647d8"}, {"problem": 32, "code": "mapcat (fn [x] (repeat 2 x))", "user": "568e65bae4b0dcc4269f40d6"}, {"problem": 32, "code": "(fn duplicate\n  [lst]\n  (mapcat #(list % %) lst))", "user": "5ea3711ae4b00a66d4a9519d"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "5e2ef900e4b05b4b015161fc"}, {"problem": 32, "code": "(fn [coll] \n  (loop [x coll y []]\n    (if x\n      (recur (next x) (concat y [(first x) (first x)]))\n      y)))", "user": "5df08767e4b093ff717275bf"}, {"problem": 32, "code": "#(interleave % %)", "user": "5ea2e6bfe4b00a66d4a95197"}, {"problem": 32, "code": "mapcat #(vector % %)", "user": "5335cab9e4b0e30313ee6c70"}, {"problem": 32, "code": "(fn [x]\n   (mapcat #(list % %) x))", "user": "5ea444b7e4b00a66d4a951a0"}, {"problem": 32, "code": "#(mapcat (fn [x] (list x x)) %)", "user": "5ea580a3e4b00a66d4a951a7"}, {"problem": 32, "code": "#(interleave % %)", "user": "5e9e642ce4b00a66d4a95174"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5ea6f88de4b00a66d4a951b1"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "5ea7b04de4b00a66d4a951b6"}, {"problem": 32, "code": "(fn [zeq] (loop [ll zeq nl []] (if (empty? ll) nl (recur (rest ll) (conj (conj nl (first ll)) (first ll))  ))))", "user": "5ea97df7e4b00a66d4a951c8"}, {"problem": 32, "code": "#(interleave % %)", "user": "5eaba9c0e4b00a66d4a951d6"}, {"problem": 32, "code": "(fn [s] (mapcat #(repeat 2 %) s))", "user": "5eac172fe4b00a66d4a951dd"}, {"problem": 32, "code": "(fn [l] (mapcat (partial repeat 2) l))", "user": "5c9adfebe4b048ec896c5ab9"}, {"problem": 32, "code": "#(reduce  (fn [a b] (conj a b b))[] %)", "user": "5e9b7aefe4b0157ca96647f1"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "52d81642e4b09f7907dd1387"}, {"problem": 32, "code": "#(reduce (fn [x y] (concat x (list y y))) [] %)", "user": "5eb1c786e4b00a66d4a95201"}, {"problem": 32, "code": "#(reduce (fn [a v]\n          (conj (conj a v) v))\n        []\n        %)", "user": "5eb1e42ae4b00a66d4a95202"}, {"problem": 32, "code": "#(sort (concat % %))", "user": "5eb0878ae4b00a66d4a951f5"}, {"problem": 32, "code": "(fn [arr] (reduce (fn [a b] (conj (conj a b) b)) [] arr))", "user": "5eb4927fe4b00a66d4a95221"}, {"problem": 32, "code": "(fn [coll]\n  (reduce (fn [result item]\n            (concat result [item item]))\n          [] coll))", "user": "5eb1a80ce4b00a66d4a951ff"}, {"problem": 32, "code": "(fn [s]\n                     (loop [s (seq s)\n                            out []]\n                       (if (empty? s)\n                         out\n                         (recur (rest s) (conj out (first s) (first s))))))", "user": "5eb22708e4b00a66d4a95204"}, {"problem": 32, "code": "#(interleave % %)", "user": "5eb193fde4b00a66d4a951fe"}, {"problem": 32, "code": "#(seq (reduce (fn [acc item]\n                (-> acc\n                    (conj item)\n                    (conj item)))\n              [] %))", "user": "5e0828b9e4b0978307768fbe"}, {"problem": 32, "code": "(fn duplicateSeq [sequ]\n  (interleave sequ sequ))", "user": "5e83a273e4b09a7a73c8bbbb"}, {"problem": 32, "code": "#(interleave % %)", "user": "5d866acbe4b0915913b1d39c"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5eb56fc1e4b00a66d4a95224"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5ebb0f7be4b00a66d4a95261"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "5eb741e4e4b00a66d4a9523b"}, {"problem": 32, "code": "(fn [arg]\n  (for [a arg\n        b (range 2)]\n    a))", "user": "5cc092d1e4b0ccb061962790"}, {"problem": 32, "code": "(fn [s] \n  (reverse\n   (reduce (fn [n e] (conj (conj n e) e))\n                ()\n                s)))", "user": "5e4beca9e4b0889a8790a560"}, {"problem": 32, "code": "#(mapcat vector % %)", "user": "5ebc7c13e4b00a66d4a95267"}, {"problem": 32, "code": "reduce\n  (fn [c i]\n    (conj c i i))\n  []", "user": "5ebff55de4b00a66d4a95286"}, {"problem": 32, "code": "#(for [x %\n       y (range 2)]\n   x)", "user": "5e2f73e5e4b05b4b01516204"}, {"problem": 32, "code": "#(mapcat (fn [a b] (vector a b)) % %)", "user": "5ea970d1e4b00a66d4a951c6"}, {"problem": 32, "code": "(fn [x]\n  (loop [e x\n         res []]\n    (if e\n      (recur (next e) (apply conj res (repeat 2 (first e))))\n      res)))", "user": "5ec21ef0e4b00a66d4a95299"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "5ebaf687e4b00a66d4a9525b"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5eb5d9bbe4b00a66d4a9522e"}, {"problem": 32, "code": "#(reduce concat  (for [x %] [x x]))", "user": "5ec3a13ae4b08d0ec38692b9"}, {"problem": 32, "code": "(fn [col]\n  (mapcat #(vector %1 %2) col col))", "user": "5d13af73e4b0902706380dbe"}, {"problem": 32, "code": "(fn [x] (reduce (fn [x y] (conj (conj x y) y)) [] x))", "user": "5ec66326e4b08d0ec38692d5"}, {"problem": 32, "code": "#(interleave % %)", "user": "5e9154c1e4b0cb0169546354"}, {"problem": 32, "code": "(fn [s] (interleave s s))", "user": "5ec6b354e4b08d0ec38692d8"}, {"problem": 32, "code": "(fn [x] (interleave x x))", "user": "5eb84ef4e4b00a66d4a95244"}, {"problem": 32, "code": "(partial\n reduce\n  (fn [acc x]\n    (into acc [x x]))\n  [])", "user": "5e0b6375e4b099d064962f7b"}, {"problem": 32, "code": "(fn duplicate\n  ([s] (duplicate s nil))\n  ([s f]\n   (if (not (empty? s))\n     (let [curr-val (first s)]\n       (recur (rest s) (conj f curr-val curr-val)))\n     (reverse f))))", "user": "5ec943fde4b08d0ec38692f1"}, {"problem": 32, "code": "(fn\n  [x]\n  (seq\n   (reduce\n    (fn [result entry]\n      (conj result entry entry))\n    []\n    x)))", "user": "5ec7d7f2e4b08d0ec38692e1"}, {"problem": 32, "code": "#(reduce into [] (map (fn [v] (into v v)) (partition-by identity %)))\n\n; Learned the following\n;\n; #(interleave % %)\n; #(sort (into % %))\n; reduce #(conj %1 %2 %2) []", "user": "5eccc5c2e4b016b56eae058f"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5ec2dd45e4b00a66d4a952a1"}, {"problem": 32, "code": "reduce #(conj % %2 %2) []", "user": "5ec819b4e4b08d0ec38692e2"}, {"problem": 32, "code": "#(reduce (\n         fn [l r] (into l (repeat 2 r)))\n         []\n         %)", "user": "5ecf4ee4e4b016b56eae05a6"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "5ece3d25e4b016b56eae059b"}, {"problem": 32, "code": "(fn [x] (sort (into x x)))", "user": "5ecf55dae4b016b56eae05a8"}, {"problem": 32, "code": "#(interleave % %)", "user": "5ed09f25e4b016b56eae05b3"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5ecd1831e4b016b56eae0592"}, {"problem": 32, "code": "#(mapcat (fn [n]\n           [n n]) \n         %)", "user": "5ed08785e4b016b56eae05b1"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "5ecfd429e4b016b56eae05a9"}, {"problem": 32, "code": "#(apply concat (map (fn [e] (list e e)) %))", "user": "5ec6de19e4b08d0ec38692da"}, {"problem": 32, "code": "(fn [colls]\n   (mapcat #(repeat 2 %) colls))", "user": "5ebb4751e4b00a66d4a95262"}, {"problem": 32, "code": "(fn f [s] \n  (sort (apply concat (repeat 2 s))))", "user": "5ed15e23e4b016b56eae05ba"}, {"problem": 32, "code": "(partial reduce (fn [acc val] (concat acc (repeat 2 val))) [])", "user": "5ed3c43be4b016b56eae05c4"}, {"problem": 32, "code": "#(loop [acc () sq %] (if (empty? sq) acc (recur (concat acc (repeat 2 (first sq))) (rest sq))))", "user": "5ed03b7fe4b016b56eae05ae"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5ecc0831e4b016b56eae058c"}, {"problem": 32, "code": "(fn [s]\n(reduce\n  (fn [xs x] (conj xs x x))\n  []\n  s))", "user": "5eccbce6e4b016b56eae058e"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5309bacae4b02e82168697bc"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5ed677bee4b016b56eae05e0"}, {"problem": 32, "code": "(fn [s] (mapcat #(vector % %) s))", "user": "4f6543cae4b07046d9f4ef41"}, {"problem": 32, "code": "(fn [coll]\n  (reduce\n   #(conj %1 %2 %2)\n   []\n   coll))", "user": "5ed52854e4b016b56eae05d2"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5ecf55aae4b016b56eae05a7"}, {"problem": 32, "code": "#(interleave % %)", "user": "51412b0ae4b0694e2952b79d"}, {"problem": 32, "code": "(fn [v] (apply concat (map #(repeat 2 %) v)))", "user": "5ec0db8be4b00a66d4a9528d"}, {"problem": 32, "code": "mapcat #(vector % %)", "user": "5ed6030de4b016b56eae05db"}, {"problem": 32, "code": "reduce #(concat %1 (take 2 (cycle (list %2)))) ()", "user": "5d83b9aae4b0915913b1d386"}, {"problem": 32, "code": "#(interleave % %)", "user": "5ed9b912e4b0c7845d86b0e3"}, {"problem": 32, "code": "reduce (fn [f xs]\n          (conj f xs xs)) []", "user": "5ed4b1e8e4b016b56eae05ce"}, {"problem": 32, "code": "(fn [v]\n  (->> v\n      (repeat 2)\n      (apply interleave)))", "user": "5ebdb3d2e4b00a66d4a95275"}, {"problem": 32, "code": "#(apply concat (for [x %] (repeat 2 x)))", "user": "5644149de4b0018b46ad8c07"}, {"problem": 32, "code": "(fn dup [x] \n  \t(mapcat #(list % %) x)\n    ;(apply concat (map #(list %1 %1) x))\n)", "user": "5ed30cb6e4b016b56eae05c2"}, {"problem": 32, "code": "mapcat (fn [x] [x x])", "user": "5ebd7296e4b00a66d4a95273"}, {"problem": 32, "code": "(fn [x] (reduce concat (map #(list % %) x)))", "user": "5ed3f2b9e4b016b56eae05c6"}, {"problem": 32, "code": "reduce #(conj (conj %1 %2) %2) []", "user": "5eac6a63e4b00a66d4a951e0"}, {"problem": 32, "code": "(fn [col]\n  (apply concat (map #(seq [% %]) col)))", "user": "565b371fe4b068f2fe63dbff"}, {"problem": 32, "code": "#(interleave % %)", "user": "5ed4482be4b016b56eae05ca"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5ed9c2cde4b0c7845d86b0e4"}, {"problem": 32, "code": "#(interleave % %)", "user": "5ed8a12fe4b0c7845d86b0d7"}, {"problem": 32, "code": "mapcat (fn [x] [x x])", "user": "5edd6eb7e4b0c7845d86b0f7"}, {"problem": 32, "code": "(fn [s] (reduce #(conj (conj %1 %2) %2) [] s))", "user": "5ec25800e4b00a66d4a9529b"}, {"problem": 32, "code": "#(reduce (fn [n number]\n          (concat n (take 2 (repeat number)))) (list) %1)", "user": "5ec5f7f2e4b08d0ec38692d1"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "5ede8210e4b0c7845d86b0fe"}, {"problem": 32, "code": "(fn [coll] \n  (mapcat #(repeat 2 %) coll))", "user": "5d94a878e4b0d3f9b434ad29"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "5eb6561fe4b00a66d4a95233"}, {"problem": 32, "code": "(fn [s]\n  (reduce (fn [acc item]\n            (into acc (repeat 2 item)))\n          []\n          s))", "user": "5ed875abe4b016b56eae05f2"}, {"problem": 32, "code": "(fn [xs]\n  ((fn [lst acc]\n    (if (empty? lst)\n      acc\n      (recur (rest lst)\n             (concat acc\n                     (list (first lst)\n                           (first lst))))))\n   xs '()))", "user": "5edfb1e5e4b0c7845d86b107"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5e909685e4b0cb016954634d"}, {"problem": 32, "code": ";;mapcat #(list % %)\n;;reduce #(conj %1 %2 %2) []\n#(interleave % %)", "user": "5edb07dde4b0c7845d86b0ed"}, {"problem": 32, "code": "#(reverse (reduce (fn [res v] (cons v (cons v res))) '() %))", "user": "5ec03772e4b00a66d4a95289"}, {"problem": 32, "code": "(fn [seq] (apply concat (map (fn [x] (repeat 2 x)) seq)))", "user": "5ee6d30ce4b029a2061bbe9c"}, {"problem": 32, "code": "(fn [coll] \n   (reduce #(conj %1 %2 %2) [] coll))", "user": "5ee738dee4b029a2061bbea2"}, {"problem": 32, "code": "(fn [s] (seq (reduce (fn [acc x] (conj acc x x)) [] s)))", "user": "5ee7b49de4b029a2061bbea6"}, {"problem": 32, "code": "(fn [seq] (mapcat\n           #(list % %)\n           seq))", "user": "5ee75f8be4b029a2061bbea5"}, {"problem": 32, "code": "#(interleave %1 %1)", "user": "5ed6c4ede4b016b56eae05e3"}, {"problem": 32, "code": "(fn dup [s] (if (seq s)\n              (cons (first s) (cons (first s) (dup (rest s))))\n              '()))", "user": "5ee93720e4b029a2061bbeb7"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5eea8f0de4b029a2061bbec3"}, {"problem": 32, "code": "(fn [args] (apply list (reduce (fn [acc, x] (into acc [x x])) [] args)))", "user": "5eeb03dde4b029a2061bbeca"}, {"problem": 32, "code": "(fn [xs] (mapcat (fn [x] [x x]) xs))", "user": "5eebbf9ee4b029a2061bbed2"}, {"problem": 32, "code": "(partial mapcat (partial repeat 2))", "user": "5dd84170e4b0948ae9d9ad93"}, {"problem": 32, "code": "#(mapcat ( fn [x] (repeat 2 x)) %)", "user": "5ee66158e4b029a2061bbe98"}, {"problem": 32, "code": "#(reduce concat (map list % %))", "user": "5e9b6471e4b0157ca96647f0"}, {"problem": 32, "code": "#(interleave % %)", "user": "5cc6b681e4b0ccb061962828"}, {"problem": 32, "code": "(fn [input-seq]\n  (reduce (fn [return-seq item]\n            (conj (conj return-seq item) item))\n    []\n    input-seq))", "user": "5eecd339e4b07c55ae4a0507"}, {"problem": 32, "code": "(fn [x] (reduce #(conj %1 %2 %2) [] x))", "user": "5edc16e1e4b0c7845d86b0f1"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "5eee9352e4b07c55ae4a0512"}, {"problem": 32, "code": "mapcat (fn [x] (list x x))", "user": "5eeeb000e4b07c55ae4a0515"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5eea5c98e4b029a2061bbebf"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "5ed5148ee4b016b56eae05d1"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5ee81beae4b029a2061bbeac"}, {"problem": 32, "code": "#(reduce (fn [a b] (conj a b b)) [] %)", "user": "5eee7311e4b07c55ae4a0510"}, {"problem": 32, "code": "(fn [xs] (interleave xs xs))", "user": "5eec1001e4b07c55ae4a0502"}, {"problem": 32, "code": "(fn dup [seq]\n  (if (= 1 (count seq))\n    (cons (first seq) seq)\n    (cons (first seq) (cons (first seq) (dup (rest seq))))))", "user": "5ef381a3e4b07c55ae4a053c"}, {"problem": 32, "code": "(fn [coll]\n  (reduce (fn [temp-coll elem] (conj temp-coll elem elem))\n          []\n          coll))", "user": "5ef28e95e4b07c55ae4a0535"}, {"problem": 32, "code": "reduce (fn [l v] (conj l v v)) []", "user": "5ef5ee81e4b07c55ae4a054a"}, {"problem": 32, "code": "#(interleave %1 %1)", "user": "5ef18431e4b07c55ae4a0529"}, {"problem": 32, "code": "#(interleave % %)", "user": "5eeb1cc3e4b029a2061bbecc"}, {"problem": 32, "code": "#(apply concat\n\t(map (fn [x] (repeat 2 x)) %1))", "user": "5ed70b97e4b016b56eae05e6"}, {"problem": 32, "code": "(fn [coll]\n  (sort (into coll coll)))", "user": "5ec91154e4b08d0ec38692ed"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "5dd45bb8e4b0948ae9d9ad6b"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "5ef9ea69e4b09b61f08553d1"}, {"problem": 32, "code": "#(reduce (fn [acc item] (conj acc item item))\n         []\n         %)", "user": "5ef8e9e0e4b09b61f08553cb"}, {"problem": 32, "code": "#(for [n % _ [1 2]] n)", "user": "5eff339ae4b0cf489e8d7f0c"}, {"problem": 32, "code": "#(loop [in %\n          out []]\n     (if (empty? in)\n       out\n       (recur (rest in)\n              (conj out (first in) (first in)))))", "user": "5ef82119e4b09b61f08553c6"}, {"problem": 32, "code": "#(apply concat (map (fn [x] (list x x)) %))", "user": "5eecf110e4b07c55ae4a050b"}, {"problem": 32, "code": "mapcat #(list % % )", "user": "5cbfa589e4b0ccb061962774"}, {"problem": 32, "code": "#(mapcat (fn [a] (list a a)) %)", "user": "5f016f37e4b0cf489e8d7f20"}, {"problem": 32, "code": "(fn f [s] (if (empty? s) '() (conj (f (rest s)) (first s) (first s))))", "user": "5e373c08e4b0650de70e2b41"}, {"problem": 32, "code": "#(interleave % %)", "user": "5f003099e4b0cf489e8d7f17"}, {"problem": 32, "code": "(fn [arg]\n  (reverse (reduce (fn [col el]\n                    (conj col el el)) '() arg)))", "user": "535f0cbde4b04ce2eb3ed2d9"}, {"problem": 32, "code": "(fn [coll]\n    (interleave \n     (for [x coll] x) \n     (for [x coll] x)))", "user": "5c9da580e4b048ec896c5b12"}, {"problem": 32, "code": "(fn duplicate [values] (reduce (fn [a b] (-> (conj a b) (conj b) )) [] values))", "user": "5f012a2ee4b0cf489e8d7f1e"}, {"problem": 32, "code": "#(interleave % %)", "user": "5f03550ce4b0cf489e8d7f33"}, {"problem": 32, "code": "(fn [lst]\n  (reduce (fn [acc x]\n              (-> acc\n                  (conj x)\n                  (conj x)))\n            []\n            lst))", "user": "5484c3b2e4b0e286459a11a2"}, {"problem": 32, "code": "#(reduce (fn [a x] (conj a x x)) [] %)", "user": "5f0890ffe4b0cf489e8d7f61"}, {"problem": 32, "code": "#(reduce (fn [col el] (conj col el el)) [] %)", "user": "5f0a4904e4b09a3f05b71805"}, {"problem": 32, "code": "(fn [seq] (interleave seq seq))", "user": "5f02f365e4b0cf489e8d7f2c"}, {"problem": 32, "code": "(fn [x]\n  (apply concat\n         (for [i x]\n           (repeat 2 i))))", "user": "58f98231e4b0438e51c2cf4c"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "57e070fde4b0bd073c202478"}, {"problem": 32, "code": "#(interleave % %)", "user": "5f0c8b0de4b0f30dddfb5d4c"}, {"problem": 32, "code": "(fn [x] \n   (seq \n     (reduce \n       (fn [arr elem] \n         (conj arr elem elem)) \n       [] x)))", "user": "58ed2e21e4b056aecfd47d7a"}, {"problem": 32, "code": "reduce #(conj (conj %1 %2) %2) []", "user": "5f088bb3e4b0cf489e8d7f5f"}, {"problem": 32, "code": "reduce #(do (concat %1 [%2 %2])) []", "user": "5d73530ce4b02e6b30c93514"}, {"problem": 32, "code": "(fn [x] (reduce #(conj (conj %1 %2) %2) [] x))", "user": "5f082d9ee4b0cf489e8d7f5c"}, {"problem": 32, "code": "(fn [x]\n  (reduce #(conj %1 %2 %2)\n          []\n          x))", "user": "5ed80d50e4b016b56eae05eb"}, {"problem": 32, "code": "#(interleave %1 %1)", "user": "548f1604e4b0e286459a1230"}, {"problem": 32, "code": "(fn [s]\n  (seq (reduce (fn [acc cur]\n            \t(conj acc cur cur))\n               []\n               s)))", "user": "5d431c77e4b07c84aa5ae68f"}, {"problem": 32, "code": "(fn [sq] (loop [xs sq\n                acc []]\n           (if-let [x (first xs)]\n             (recur (rest xs) (conj acc x x))\n             acc)))", "user": "5e6ba862e4b04a83ad7cd27d"}, {"problem": 32, "code": "(fn [x] (sort (concat x x)))", "user": "5f122f93e4b091ba50b4dbae"}, {"problem": 32, "code": "(fn [l]\n  (loop [[car & cdr] l\n         dupes []]\n    (if (empty? cdr)\n        (conj dupes car car)\n        (recur cdr (conj dupes car car)))))", "user": "5f0b8243e4b0f30dddfb5d45"}, {"problem": 32, "code": "(fn  [lst] (reverse (reduce  (fn [acc elem] (cons  elem (cons elem acc))) \n                     '() \n                     lst)))", "user": "5f1328dee4b091ba50b4dbb1"}, {"problem": 32, "code": "(fn [s] (reduce #(conj (conj %1 %2) %2) [] s))", "user": "5f0e32a1e4b0f30dddfb5d59"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5f0f6540e4b091ba50b4db9c"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5f03ab5be4b0cf489e8d7f37"}, {"problem": 32, "code": "(fn [x]\n  (reduce\n\t(fn [acc b]\n      (concat acc [b b]))\n   []\n   x))", "user": "5b7f2d75e4b047b03b203768"}, {"problem": 32, "code": "(fn duplicate-sequence\n    ([x] (duplicate-sequence x 0 []))\n    \n    ([x i y]\n        (cond (< i (count x))\n            (duplicate-sequence x (inc i) (conj y ((vec x) i) ((vec x) i)))\n            \n            :else (apply list y)\n        )\n    )\n)", "user": "5f0cb4f3e4b0f30dddfb5d4e"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "5509a23ee4b06e50f9beb11a"}, {"problem": 32, "code": "(fn [seq]\n  (reduce (fn [out-vec elem]\n            (into out-vec [elem elem]))\n          []\n          seq))", "user": "5f15a50fe4b091ba50b4dbbc"}, {"problem": 32, "code": "(fn [items] (apply concat (map vector items items)))", "user": "5f009162e4b0cf489e8d7f1a"}, {"problem": 32, "code": ";#(replace % [0 0 1 1 2 2..])\n; stolen soution #(interleave % %)\n#(replace % (sort (flatten (cons (range (count %)) (range (count %))))))", "user": "5f0824c5e4b0cf489e8d7f5b"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5f086f54e4b0cf489e8d7f5e"}, {"problem": 32, "code": "#(reduce (fn [acc item] (conj acc item item)) [] %)", "user": "5f184a46e4b091ba50b4dbd4"}, {"problem": 32, "code": "(fn [param] (apply concat (map #(repeat 2 %) param)))", "user": "5f08d0c5e4b0cf489e8d7f62"}, {"problem": 32, "code": "; (fn [s] (flatten (map #(list % %) s)))\n\n(fn [s] (interleave s s))", "user": "5ec0de29e4b00a66d4a9528e"}, {"problem": 32, "code": "(fn dup [ls] (if (empty? ls)\n           '()\n           (cons (first ls) (cons (first ls) (dup (rest ls))))))", "user": "5f15b1e2e4b091ba50b4dbbd"}, {"problem": 32, "code": "#(-> (concat % %) sort)", "user": "5f18444ee4b091ba50b4dbd3"}, {"problem": 32, "code": "(fn foo [s]\n(if (> (count s) 0)\n(concat [(first s) (first s)] (foo (rest s)))\ns\n)\n)", "user": "5f1aade6e4b091ba50b4dbe4"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "5f0a65dae4b09a3f05b71806"}, {"problem": 32, "code": "(fn [s] (reduce concat (map #(vector % %) s)))", "user": "5e3071abe4b05b4b01516213"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5f17e3c5e4b091ba50b4dbd0"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "5e3121e5e4b05b4b01516221"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5f1f4411e4b0f565ad99827b"}, {"problem": 32, "code": "(fn [seq]\n  (apply concat (for [x seq] (repeat 2 x))))", "user": "5f081f6de4b0cf489e8d7f5a"}, {"problem": 32, "code": "(fn [x]\n   ((fn dupseq [a b]\n      (if (empty? a)\n        b\n        (dupseq (rest a) (conj  (conj b (first a)) (first a)))\n        )) x []))", "user": "5f06d26ae4b0cf489e8d7f53"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "57fd085ce4b0d3187e9009a9"}, {"problem": 32, "code": "(fn [s]\n  (mapcat #(take 2 (repeat %)) s)\n)", "user": "5d8a3f3ee4b0915913b1d3c9"}, {"problem": 32, "code": "(fn [col] (mapcat #(vector % %) col))", "user": "5f0e8312e4b0f30dddfb5d5b"}, {"problem": 32, "code": "(fn [x]\n  (loop [s x\n         res []]\n    (if (empty? s)\n      res\n      (recur (rest s) (conj res (first s) (first s))))))", "user": "5666c2dbe4b04acd4f672dc3"}, {"problem": 32, "code": "(fn [a] (loop [input a output '()] (if (empty? input) (reverse output) \n                                     (recur (rest input) (cons (first input) (cons (first input) output))))))", "user": "5cf8864be4b0b71b1d808a84"}, {"problem": 32, "code": "(fn [ve] \n  (reduce #(conj %1 %2 %2) [] ve))", "user": "59331397e4b072a2710fd046"}, {"problem": 32, "code": "(fn dup [s]\n  (when-let [i (first s)]\n    (concat [i i] (dup (rest s)))))", "user": "5b61279ce4b0c6492753e70e"}, {"problem": 32, "code": "(fn [elements]\n   (loop [sequence elements\n          new-sequence '()]\n     (if (empty? sequence)\n       (reverse new-sequence)\n       (do\n         (recur (rest sequence) (->> new-sequence\n                                     (cons (first sequence))\n                                     (cons (first sequence))))))))", "user": "58a0ac0de4b02bd94d917e9c"}, {"problem": 32, "code": "(fn f [s]\n  (let [f*\n        (fn [acc s*]\n          (conj acc s* s*))]\n    (reduce f* [] s)))", "user": "5f22e8c9e4b0f565ad99828b"}, {"problem": 32, "code": "#(mapcat list % %)", "user": "5f247827e4b0f565ad998292"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "5cfbd3d1e4b0cc9c9158815b"}, {"problem": 32, "code": "#(apply concat (map (fn [e] [e e]) %))", "user": "54fce8bde4b07d26eda61d30"}, {"problem": 32, "code": "reduce (fn [acc v] (concat acc [v v])) (seq [])", "user": "5eedfc62e4b07c55ae4a050e"}, {"problem": 32, "code": "#(interleave % %)", "user": "5f2a2a0de4b033932238a653"}, {"problem": 32, "code": "(fn [x] (sort (take (* 2 (count x)) (cycle x))))", "user": "5f275800e4b0857314092c93"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5f1af439e4b0f565ad998257"}, {"problem": 32, "code": "mapcat (fn [x] [x x])", "user": "5f2c02d1e4b033932238a65f"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5e8c3e8fe4b0cb0169546322"}, {"problem": 32, "code": "#(loop \n                    [item % result []] \n                  (if (= (next item) nil) \n                    (concat result (take 2 (repeat (first item)))) \n                    (recur (rest item) (concat result (take 2 (repeat (first item)))))))", "user": "5f27cc7fe4b033932238a646"}, {"problem": 32, "code": "(fn [coll]\n  \"A function which duplicates each element of a sequence\"\n  (into () (reduce #(conj (conj %1 %2) %2) () coll))\n  )", "user": "5ee4b2e6e4b029a2061bbe90"}, {"problem": 32, "code": "(fn [s] (reduce #(conj %1 %2 %2) [] s))", "user": "5dc5982be4b02f9375f4e1c0"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "52215fe1e4b0e6a83c8925cf"}, {"problem": 32, "code": "(fn dup\n  ([col] (dup col '()))\n  ([col acc]\n   (if (empty? col)\n     acc\n     (recur (butlast col) (conj acc (last col) (last col))))))", "user": "5d92b543e4b0915913b1d414"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5f25a2b1e4b0117231e5035e"}, {"problem": 32, "code": "#(interleave % %)", "user": "5f265bd9e4b0857314092c8c"}, {"problem": 32, "code": "(fn dup [input] (reduce #(concat %1 [%2 %2]) [] input))", "user": "5f309144e4b0574c87022c23"}, {"problem": 32, "code": "(fn [coll] (mapcat #(list % %) coll))", "user": "5f2d6c70e4b033932238a66f"}, {"problem": 32, "code": "(fn duplicate-seq\n  [coll]\n  (reduce (fn [acc ele] (concat acc [ele ele]))\n          ()\n          coll)\n  )", "user": "5f29837ee4b033932238a64f"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "5f2f5cdee4b033932238a67f"}, {"problem": 32, "code": "(fn [x] (seq (reduce #(conj %1 %2 %2) [] x)))", "user": "5f1eebcee4b0f565ad998273"}, {"problem": 32, "code": "(fn [s] (reduce #(conj %1 %2 %2) [] s))", "user": "5f300f28e4b033932238a682"}, {"problem": 32, "code": "#(sort (take (* 2 (count %)) (cycle %)))", "user": "5f32f69ae4b0574c87022c35"}, {"problem": 32, "code": "reduce #(concat %1 [%2 %2]) []", "user": "5f331015e4b0574c87022c37"}, {"problem": 32, "code": "(fn [w] (reverse (reduce (fn [y z] (reduce conj y z)) (first (apply conj (conj [[]] (map (fn [y] (list y y)) w)))))))", "user": "5f313d01e4b0574c87022c28"}, {"problem": 32, "code": "reduce (fn [coll x] (into coll [x x])) []", "user": "5f1d22c7e4b0f565ad998268"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5f37da09e4b0574c87022c5e"}, {"problem": 32, "code": "reduce #(conj % %2 %2) []", "user": "5f393bd6e4b0574c87022c76"}, {"problem": 32, "code": "#(interleave % %)", "user": "5f3388ade4b0574c87022c38"}, {"problem": 32, "code": "mapcat #(vector % %)", "user": "5f2d6787e4b033932238a66d"}, {"problem": 32, "code": "#(interleave % %)", "user": "5f38eecce4b0574c87022c72"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5f3abcc4e4b004f08c61c52b"}, {"problem": 32, "code": "#(mapcat (fn [x] (list x x)) %)", "user": "5f3ddc71e4b004f08c61c551"}, {"problem": 32, "code": "reduce #(apply conj %1 [%2 %2]) []", "user": "5f3ab5ece4b004f08c61c52a"}, {"problem": 32, "code": "(fn [l]\n  (apply list (reduce #(conj %1 %2 %2) [] l)))", "user": "5f3f2281e4b004f08c61c561"}, {"problem": 32, "code": "(fn [coll]\n  (interleave coll coll))", "user": "5c633df2e4b0fca0c162265c"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "5f3adcf4e4b004f08c61c531"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5f2c94b4e4b033932238a669"}, {"problem": 32, "code": "#(reverse (reduce (fn [acc xx] (conj acc xx xx)) '() %))", "user": "5f419985e4b0955706451fab"}, {"problem": 32, "code": "#(interleave % %)", "user": "5f3797cce4b0574c87022c5a"}, {"problem": 32, "code": "#(reduce concat (map (partial repeat 2) %))", "user": "5f429fdfe4b0955706451faf"}, {"problem": 32, "code": "(fn [start]\n(sort(concat start start))\n)", "user": "5f3a8493e4b004f08c61c527"}, {"problem": 32, "code": "#(sort (apply concat (repeat 2 %)))", "user": "5f3ca097e4b004f08c61c546"}, {"problem": 32, "code": "(fn [coll] (mapcat (fn [x] [x x]) coll))", "user": "5f37839ee4b0574c87022c59"}, {"problem": 32, "code": "(fn [sq]\n  (mapcat #(repeat 2 %) sq))", "user": "58ffc6cfe4b0438e51c2d008"}, {"problem": 32, "code": "(partial mapcat (fn [x] [x x]))", "user": "5f431d32e4b0955706451fb5"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5cda0e26e4b05ee0cb311710"}, {"problem": 32, "code": "(fn [l] (sort (into l l)))", "user": "5f480a68e4b0102c75033938"}, {"problem": 32, "code": "(fn dup\n  [[x & xs :as xst]]\n  (cond\n   (empty? xst) '()\n   :else (cons x (cons x (dup xs)))))", "user": "5f317ae4e4b0574c87022c2a"}, {"problem": 32, "code": "#((fn [col acc] (if (empty? col) acc (recur (rest col) (conj acc (first col) (first col))))) % [])", "user": "5f49482ae4b0102c75033940"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "5ec22851e4b00a66d4a9529a"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5f46d2f9e4b0955706451fc6"}, {"problem": 32, "code": "(fn [lst] (apply concat (reduce (fn [start r] (conj start (repeat 2 r))) [] lst)))", "user": "5f45211ae4b0955706451fbc"}, {"problem": 32, "code": "(fn [coll]\n  (reduce #(conj %1 %2 %2) [] coll))", "user": "5f238a59e4b0f565ad99828d"}, {"problem": 32, "code": "(fn dup-each-item [xs]\n  (reduce #(apply conj %1 (list %2 %2)) [] xs))", "user": "5f2ab452e4b033932238a656"}, {"problem": 32, "code": "#(sort (concat % %))", "user": "5f4dbb81e4b0102c75033961"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "5f4f8f78e4b0102c75033973"}, {"problem": 32, "code": "#(interleave % %)", "user": "5f2e6d97e4b033932238a677"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5f0c3da4e4b0f30dddfb5d49"}, {"problem": 32, "code": "(fn [lst ](reverse (reduce #(conj %1 %2 %2) '()  (seq lst))))", "user": "5f558a76e4b0a0bc16850a84"}, {"problem": 32, "code": "#(interleave % %)", "user": "5f56c0cae4b0a0bc16850a8c"}, {"problem": 32, "code": "(fn [x]\n  (apply concat\n         (map #(list % %) x)))", "user": "5f574662e4b0a0bc16850a90"}, {"problem": 32, "code": "#(interleave % %)", "user": "5a514e68e4b05d388ecb6be5"}, {"problem": 32, "code": "mapcat #(vector % %)", "user": "5f4fe1fae4b0a0bc16850a5c"}, {"problem": 32, "code": "#(interleave %1 %1)", "user": "5dfb7f6de4b0a607a9a45cdc"}, {"problem": 32, "code": "(partial reduce #(concat %1 [%2 %2]) [])", "user": "5f5df0bfe4b02876ed9fcfeb"}, {"problem": 32, "code": "(fn [xs] (mapcat #(take 2 (repeat %)) xs))", "user": "5f0dfa48e4b0f30dddfb5d55"}, {"problem": 32, "code": "(fn [x] (apply concat (map #(repeat 2 %) x)))", "user": "53275758e4b09d4e7a9b54fc"}, {"problem": 32, "code": "reduce (fn [xs x] (concat xs [x x])) '()", "user": "5f5e7158e4b02876ed9fcff0"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5f5f9483e4b02876ed9fcff8"}, {"problem": 32, "code": "(fn my-duplicate\n  [s]\n  (interleave s s))", "user": "5f4eb036e4b0102c75033969"}, {"problem": 32, "code": "(fn replicator [myseq]\n  (apply concat(map (partial repeat 2) myseq)))", "user": "5f5f2eafe4b02876ed9fcff5"}, {"problem": 32, "code": "(fn [x]\n      (reduce (fn [coll a]\n                (conj (conj coll a) a)) '() (reverse x)))", "user": "5df94f73e4b0a607a9a45cb6"}, {"problem": 32, "code": "(fn [col] \n  (mapcat #(list % %) col))", "user": "5ea6fe98e4b00a66d4a951b2"}, {"problem": 32, "code": "mapcat ( partial repeat 2)", "user": "5e70c16de4b085ba37836dae"}, {"problem": 32, "code": "#(interleave % %)", "user": "5f631e11e4b02876ed9fd011"}, {"problem": 32, "code": "#(apply concat\n         (map\n          (fn [x] [x x])\n          %))", "user": "524379a4e4b076204b44fac0"}, {"problem": 32, "code": "(fn [s] \n        (apply concat (map #(vector % %) s))\n         )", "user": "5f58db95e4b0a0bc16850a9a"}, {"problem": 32, "code": "(fn [seq]\n  (mapcat vector seq seq))", "user": "5f63d933e4b02876ed9fd018"}, {"problem": 32, "code": "#(interleave % %)", "user": "5f60daafe4b02876ed9fcffe"}, {"problem": 32, "code": "#(interleave % %)", "user": "5f6796d2e4b02876ed9fd036"}, {"problem": 32, "code": "(fn dupli [[x & xs]]\n  (if (nil? xs) (cons x (cons x '()))\n    (cons x (cons x (dupli xs)))))", "user": "5f67c2f8e4b02876ed9fd039"}, {"problem": 32, "code": "#(mapcat (fn[x] [x x]) %)", "user": "5f65bdfde4b02876ed9fd025"}, {"problem": 32, "code": "(fn dup-seq\n  [s]\n  (mapcat (fn [x] [x x]) s))", "user": "5f3103aee4b0574c87022c24"}, {"problem": 32, "code": "(fn [s]\n    (loop [[x & r :as xs] s, out []]\n        (if (empty? xs) out (recur r (conj (conj out x) x)))))", "user": "5eff6c0ee4b0cf489e8d7f11"}, {"problem": 32, "code": "(fn [coll]\n  (reduce\n   (fn [coll x]\n     (concat coll [x x]))\n   []\n   coll))", "user": "5f663bc0e4b02876ed9fd02d"}, {"problem": 32, "code": "reduce (fn [a b] (concat a [b b])) []", "user": "5f6b5d83e4b02876ed9fd050"}, {"problem": 32, "code": "#(interleave % %)", "user": "5f5358b7e4b0a0bc16850a77"}, {"problem": 32, "code": "#(reduce (fn [previous new] (into previous (repeat 2 new))) [] %)", "user": "5f6e5c58e4b02876ed9fd067"}, {"problem": 32, "code": "(fn[collection] ( reverse ( reduce (fn[coll n ] (conj coll n n) ) () collection)  ))", "user": "5f6b61ece4b02876ed9fd051"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5f724f55e4b02876ed9fd089"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5f72f144e4b02876ed9fd093"}, {"problem": 32, "code": "(fn [coll]\n  (loop [org coll\n         result []]\n    (if (empty? org)\n      result\n      (recur (rest org) (conj result (first org) (first org))))))", "user": "5f6e576ae4b02876ed9fd066"}, {"problem": 32, "code": "(fn [s] (mapcat #(list % %) s))", "user": "5f648ef1e4b02876ed9fd01b"}, {"problem": 32, "code": "(fn dup-seq [s]\n  (cond\n    (nil? (seq s)) s\n    :else (let [[x xs] [(first s) (rest s)]] \n            (cons x (cons x (dup-seq xs))))))", "user": "5f63684be4b02876ed9fd012"}, {"problem": 32, "code": ";(fn [x]\n;  (loop [acc ()\n;         xs x]\n;    (if (empty? xs)\n;      (reverse acc)\n;      (recur (conj acc (first xs) (first xs))\n;             (rest xs)))))\n\n;#(loop [acc () \n;        [x & xs] %]\n;   (if (nil? x)\n;     (reverse acc)\n;     (recur (conj acc x x) xs)))\n\n;mapcat #(list % %)\n\n#(interleave % %)", "user": "5f6a583ae4b02876ed9fd046"}, {"problem": 32, "code": "#(reduce (fn [coll val] (conj coll val val)) [] %)", "user": "5f6caa19e4b02876ed9fd056"}, {"problem": 32, "code": "reduce (fn [itog ss] (conj itog ss ss)) []", "user": "5f27f180e4b033932238a648"}, {"problem": 32, "code": "#(reduce (fn [a b] (conj a b b)) [] %)", "user": "5f63d73de4b02876ed9fd017"}, {"problem": 32, "code": "#(interleave % %)", "user": "5c06fab7e4b0bdcf453d16bd"}, {"problem": 32, "code": "(fn [a] (reduce #(conj % %2 %2) '() (reverse a)))", "user": "5f686436e4b02876ed9fd03c"}, {"problem": 32, "code": "(fn [x] (reverse (reduce (fn [acc val] (cons val (cons val acc))) () x)))", "user": "5f6cb2a5e4b02876ed9fd057"}, {"problem": 32, "code": "(fn dup\n  [s]\n  (loop [[hd & tl] s ans []]\n    (if (nil? hd)\n      ans\n      (recur tl (conj (conj ans hd) hd))\n    )\n  )\n)", "user": "5f6b8222e4b02876ed9fd052"}, {"problem": 32, "code": "(fn [x]\n     (mapcat #(repeat 2 %) x)\n    )", "user": "5f77890ae4b02876ed9fd0b9"}, {"problem": 32, "code": "(fn [coll]\n  (mapcat (fn [l] (repeat 2 l)) coll))", "user": "5f388489e4b0574c87022c69"}, {"problem": 32, "code": "(fn [lst] (mapcat #(repeat 2 %) lst))", "user": "5f77d470e4b02876ed9fd0be"}, {"problem": 32, "code": "#(interleave % %)", "user": "5f737e16e4b02876ed9fd09a"}, {"problem": 32, "code": "(fn [s]\n  (->> s\n       (map (comp (partial take 2) repeat))\n       (reduce (partial apply conj) '())\n       (reverse)))", "user": "5f79bff2e4b02876ed9fd0ca"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5f727bd1e4b02876ed9fd08c"}, {"problem": 32, "code": "(fn [lst]\n  (interleave lst lst))", "user": "5f74de11e4b02876ed9fd0a5"}, {"problem": 32, "code": "(fn duplicateSeq [s]\n  (reduce\n   (fn duplicateReduce [acc curr]\n     (concat acc [curr curr]))\n   []\n   s))", "user": "5f7251b9e4b02876ed9fd08a"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5f727dd6e4b02876ed9fd090"}, {"problem": 32, "code": "#(interleave % %)", "user": "5f77b99fe4b02876ed9fd0bc"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5f7e91c8e4b0c071e6c840d8"}, {"problem": 32, "code": "#(mapcat (fn [x] (list x x)) %)", "user": "5f63cde9e4b02876ed9fd015"}, {"problem": 32, "code": "#(seq (reduce (fn [x y] (conj x y y)) [] %1))", "user": "5f7ac592e4b02876ed9fd0d2"}, {"problem": 32, "code": "#(loop [l %\n        acc '()]\n   (if (empty? l)\n     (reverse acc)\n     (recur (rest l) (conj acc (first l) (first l)))))", "user": "5f7603a8e4b02876ed9fd0ad"}, {"problem": 32, "code": "(fn my-dupl [xs] \n    (loop [xs xs acc []]\n      (if (empty? xs) acc\n      (recur (rest xs) (conj (conj acc (first xs) ) (first xs)))\n      )))", "user": "5f82cfcce4b0c071e6c840fb"}, {"problem": 32, "code": "#(interleave % %)", "user": "5f737899e4b02876ed9fd099"}, {"problem": 32, "code": "(fn [s]\n  (->> s\n       (map #(repeat 2 %))\n       (apply concat)))", "user": "5f597522e4b0a0bc16850a9e"}, {"problem": 32, "code": "(partial mapcat #(list % %))", "user": "56b9c644e4b0f2655033593a"}, {"problem": 32, "code": "; reduce #(concat %1 [%2 %2]) []\n#(interleave % %)", "user": "5f81de6ce4b0c071e6c840f5"}, {"problem": 32, "code": "(fn[lst] (loop [res '()\n                 lst lst]\n              (if (empty? lst)\n                  (reverse res)\n                  (recur (cons (first lst) (cons (first lst) res)) (rest lst)))))", "user": "5f727d2fe4b02876ed9fd08f"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5f84f0f5e4b0375e81f54e78"}, {"problem": 32, "code": "(fn \n  [s]\n   (mapcat #(list % %) s))", "user": "5f6e23e6e4b02876ed9fd064"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5f727be9e4b02876ed9fd08d"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5f837b30e4b01aacbe7a2714"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5f8497dce4b0375e81f54e74"}, {"problem": 32, "code": "(fn duplicate [lst]\n  (mapcat (fn [x]\n              (repeat 2 x)) lst)\n  )", "user": "5f84f110e4b0375e81f54e79"}, {"problem": 32, "code": "(fn [lst] (interleave lst lst))", "user": "5f727cb0e4b02876ed9fd08e"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5f792d48e4b02876ed9fd0c5"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5f87e757e4b0169f6814c40f"}, {"problem": 32, "code": "(fn [a-seq]\n                               (loop [l a-seq acc '()]\n                                 (if (empty? l)\n                                   (reverse acc)\n                                   (recur (rest l) (conj (conj acc (first l)) (first l))))))", "user": "5f86a98be4b0649ffcda4caa"}, {"problem": 32, "code": "#(reduce (partial apply conj) (mapv (fn [a] [a a]) %))", "user": "5f3ce2c7e4b004f08c61c548"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5f8361bae4b01aacbe7a2712"}, {"problem": 32, "code": "(fn [x] \n  (mapcat #(list % %) x))", "user": "5f8795d4e4b020286baa5e96"}, {"problem": 32, "code": "(fn dup-item [coll]\n  (reduce (fn [acc item] (concat acc [item, item])) '() coll))", "user": "5c8cfff8e4b048ec896c5996"}, {"problem": 32, "code": "(fn [lst] \n  (mapcat #(list % %) lst))", "user": "5f8330b8e4b01aacbe7a270f"}, {"problem": 32, "code": "(fn [sq] (mapcat #(repeat 2 %) sq))", "user": "5f875a0ae4b020286baa5e94"}, {"problem": 32, "code": "(fn [lst]\n  (reduce concat (map #(take 2 (repeat %)) lst)))", "user": "5f810e97e4b0c071e6c840ed"}, {"problem": 32, "code": "#(interleave % %)", "user": "5f8b06afe4b0715f5002d74a"}, {"problem": 32, "code": "#(interleave % %)", "user": "5f816cc6e4b0c071e6c840f1"}, {"problem": 32, "code": "(fn [xs]\n  (loop [xs xs\n         result []]\n    (if (empty? xs)\n      result\n      (recur (rest xs) (conj result (first xs) (first xs)))\n      )\n    )\n  )", "user": "5f6c331ae4b02876ed9fd054"}, {"problem": 32, "code": "#(reduce (fn [t x] (into t [x x])) [] %)", "user": "5f8e865fe4b0715f5002d76d"}, {"problem": 32, "code": "#(sort (take (* 2 (count %)) (cycle %)))", "user": "5f8fe45ae4b0715f5002d78d"}, {"problem": 32, "code": "(fn duplicate [seqn]\n  (reduce #(conj (conj %1 %2) %2) [] seqn))", "user": "5f8d76c3e4b0715f5002d758"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5f838122e4b01aacbe7a2715"}, {"problem": 32, "code": "(fn\n  [xs]\n  (reverse (reduce (fn [acc n] (conj (conj acc n) n)) '() xs)))", "user": "5e1c24f4e4b0dc959400852d"}, {"problem": 32, "code": "(fn [coll]\n  (mapcat (fn [x] [x x]) coll))", "user": "5f93529ae4b0715f5002d7bc"}, {"problem": 32, "code": "reduce #(apply conj %1 [%2 %2]) []", "user": "5eb3d02be4b00a66d4a95215"}, {"problem": 32, "code": "(fn [lst] (reduce (fn [acc ele] (into acc (list ele ele))) [] lst))", "user": "5f9567cce4b0715f5002d7c7"}, {"problem": 32, "code": "(fn p32 [l]\n  (mapcat (fn [val] `(~val ~val)) l))", "user": "5f968f4ee4b0715f5002d7d2"}, {"problem": 32, "code": "(fn [x] (reduce #(conj %1 %2 %2) [] x))", "user": "5ee4545ee4b029a2061bbe8d"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "5f97eff1e4b0715f5002d7f9"}, {"problem": 32, "code": "(fn [coll]\n  (sort (apply concat (list* (repeat 2 coll)))))", "user": "5f8e2a08e4b0715f5002d767"}, {"problem": 32, "code": "(fn [xs] (reduce (fn [a x] (conj a x x)) [] xs))", "user": "5f9f0e77e4b0715f5002d83b"}, {"problem": 32, "code": "#(interleave % %)", "user": "5f9f032fe4b0715f5002d839"}, {"problem": 32, "code": "#(for [x % y '(1 2)] x)", "user": "5f3567d6e4b0574c87022c44"}, {"problem": 32, "code": "#(loop [r [] s %]\n(if (empty? s) r\n(recur (concat r [(first s) (first s)]) (rest s)))\n)", "user": "5f9c4113e4b0715f5002d821"}, {"problem": 32, "code": "(fn [xs] (reverse (reduce (fn [acc y] (conj acc y y)) '() xs)))", "user": "5fa17538e4b0f0ebd91b77e3"}, {"problem": 32, "code": "#(mapcat (fn [a] [a a]) %)", "user": "5fa2a3afe4b0f0ebd91b77f1"}, {"problem": 32, "code": "(fn [sq] (interleave sq sq))", "user": "5f985283e4b0715f5002d800"}, {"problem": 32, "code": "(fn [s] \n  (reduce\n  \t(fn [a c] (conj (conj a c) c))\n  \t[]\n  \ts))", "user": "5fa5a6b1e4b0fa27300f3dc8"}, {"problem": 32, "code": "(fn [xs]\n  (interleave xs xs))", "user": "5fa358a1e4b0f0ebd91b77fd"}, {"problem": 32, "code": "(fn [input] (reverse\n             (reduce\n              (fn [r x]\n               (cons x (cons x r))\n               ) nil input)))", "user": "5fa12616e4b0715f5002d84f"}, {"problem": 32, "code": "#(interleave % %)", "user": "5fa74b82e4b0fa27300f3dda"}, {"problem": 32, "code": "#(interleave % %)", "user": "5fa5b72ee4b0fa27300f3dca"}, {"problem": 32, "code": "mapcat #(vector % %)", "user": "5fa8424ce4b0fa27300f3de5"}, {"problem": 32, "code": "mapcat (fn [x] [x x])", "user": "5f974321e4b0715f5002d7f3"}, {"problem": 32, "code": "#(interleave % %)", "user": "5eb7b41ee4b00a66d4a9523c"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "5b94c2aee4b0c0b3ffbd4a59"}, {"problem": 32, "code": "(fn f [s]\n  (let [f*\n        (fn [acc s*]\n          (conj acc s* s*))]\n    (reduce f* [] s)))", "user": "5facfb48e4b08cb800c85aea"}, {"problem": 32, "code": "(fn f [s]\n  (let [f*\n        (fn [acc s*]\n          (conj acc s* s*))]\n    (reduce f* [] s)))", "user": "5face7fce4b08cb800c85ae9"}, {"problem": 32, "code": "#(loop [acc '[]\n        remainder %]\n   (if (empty? remainder)\n     acc\n     (recur (concat acc (list (first remainder) (first remainder))) (rest remainder))))", "user": "5fb082cfe4b08cb800c85b14"}, {"problem": 32, "code": "(fn dupe [x]\n  (reduce\n   (fn [col elm]\n     (concat col (list elm elm)))\n   '() x))", "user": "5fa80c01e4b0fa27300f3de2"}, {"problem": 32, "code": "mapcat (juxt identity identity)", "user": "573a0ecce4b0cd1946bd1088"}, {"problem": 32, "code": "(fn dup-elem [s]\n  (apply concat (map (partial repeat 2) s)))", "user": "5c3527a6e4b0d62ef62d9f60"}, {"problem": 32, "code": "(fn [sq]\n  (apply concat (map #(repeat 2 %) sq)))", "user": "5f6b35c3e4b02876ed9fd04d"}, {"problem": 32, "code": "reduce #(concat %1 (repeat 2 %2)) ()", "user": "5fa96ddbe4b0fa27300f3dec"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "5fae3d8ae4b08cb800c85afa"}, {"problem": 32, "code": "(partial reduce #(conj %1 %2 %2) [])", "user": "5fb3bd04e4b08cb800c85b3a"}, {"problem": 32, "code": "(fn [coll]\n   (mapcat #(repeat 2 %) coll))", "user": "5fb544f6e4b08cb800c85b4e"}, {"problem": 32, "code": "(fn dup [l] \n   (if (= (count l) 0) () \n     (concat (list (first l)) \n            (list (first l)) (dup (rest l)))))", "user": "5fab7ea6e4b08cb800c85ad8"}, {"problem": 32, "code": "#((comp reverse reduce) (fn [x1 x2] \n                          (conj x1 x2 x2)) '() %1)", "user": "5fb3a096e4b08cb800c85b35"}, {"problem": 32, "code": "(fn [sq]\n  (reduce #(conj (conj %1 %2) %2) [] sq))", "user": "5fb453d3e4b08cb800c85b44"}, {"problem": 32, "code": "(fn [s]\n    (loop [s s\n           o []\n           ]\n        (if-not (seq s)\n            o\n            (recur (rest s) (into o (repeat 2 (first s))))\n         )))", "user": "5fafa44ee4b08cb800c85b0e"}, {"problem": 32, "code": "(comp reverse (fn [v] \n  (loop [s v l '()]\n    (if (empty? (rest s))\n      (conj l (first s) (first s))\n      (recur (rest s)  (conj l (first s) (first s)))))))", "user": "5fa2b45ce4b0f0ebd91b77f5"}, {"problem": 32, "code": "mapcat #(vector % %)", "user": "5faa75c1e4b0fa27300f3dfa"}, {"problem": 32, "code": "(fn [my-list] (sort(concat my-list my-list)))", "user": "5fa2735de4b0f0ebd91b77ee"}, {"problem": 32, "code": "#(interleave % %)", "user": "5fbe40bce4b03f550f448246"}, {"problem": 32, "code": "(fn duplicate [coll]\n  (interleave coll coll))", "user": "57b758f4e4b0fbc9809a27cf"}, {"problem": 32, "code": "(fn [xs] (apply concat (for [x xs] (repeat 2 x))))", "user": "5fab003de4b08cb800c85ad1"}, {"problem": 32, "code": "#(reverse (reduce (fn [x y] (conj x y y)) '() %))", "user": "5fb2eac0e4b08cb800c85b2f"}, {"problem": 32, "code": "(fn [se] (reduce (fn [x y] (conj (conj x y) y)) [] se))", "user": "5fbf6fe7e4b0ad6fc3476147"}, {"problem": 32, "code": "mapcat (juxt identity identity)", "user": "5a4f11e5e4b05d388ecb6bc6"}, {"problem": 32, "code": "#(interleave % %)", "user": "5fc04417e4b0edf42a5593c6"}, {"problem": 32, "code": "#(interleave % %)", "user": "5f969090e4b0715f5002d7d5"}, {"problem": 32, "code": "(fn f [s]\n  (let [f*\n        (fn [acc s*]\n          (conj acc s* s*))]\n    (reduce f* [] s)))", "user": "5f96fbc7e4b0715f5002d7ec"}, {"problem": 32, "code": "(fn [x] (reduce concat (map (fn [z] (take 2 (cycle (list z)))) x)))", "user": "5fc4d277e4b06ffabd1ef72a"}, {"problem": 32, "code": "#(reduce (fn [a b] (conj (conj a b) b)) [] %)", "user": "5fc51d88e4b0ad564c76812a"}, {"problem": 32, "code": "(fn dup [s]\n    (if (not-empty s)\n      (let [f (first s) r (rest s)]\n        (concat (list f f) (dup r))\n        )\n      s\n      )\n     )", "user": "5fc241c1e4b0edf42a5593d1"}, {"problem": 32, "code": "(fn [x] (reduce (fn [seq i]\n            (concat seq [i i])) [] x))", "user": "5a3e1243e4b0447ef91cc5ae"}, {"problem": 32, "code": "(fn [arg]\n  (loop [col arg\n         out '()]\n    \t(if (= (count col) 0)\n          out\n          (recur (pop col) (conj (conj out (last col)) (last col)) )\n         \n         )\n    \n    )\n  \n  )", "user": "5fc5c303e4b02c825b0c8c1a"}, {"problem": 32, "code": "(fn [i] (apply concat (map #(list % %) i)))", "user": "5ef4fca7e4b07c55ae4a0546"}, {"problem": 32, "code": "(fn [s] (reduce #(conj % %2 %2) [] s))", "user": "5fcdb9f5e4b07e53c2f3effe"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "5fc3850de4b0db0e95a5f3fd"}, {"problem": 32, "code": "(fn [xs]\n\n    (reverse \n     (reduce\n      (fn [res x]\n        (cons x (cons x res)))\n      []\n      xs)))", "user": "5fa6db67e4b0fa27300f3dd2"}, {"problem": 32, "code": "(fn [x]\n  (reduce\n    (fn [a b]\n      (concat a [b b]))\n    []\n    x))", "user": "5b21ad60e4b03cfeda66ed54"}, {"problem": 32, "code": "(fn [sq]\n  (apply concat (map #(repeat 2 %) sq)))", "user": "54d7e277e4b0a52adc2e2031"}, {"problem": 32, "code": "#(interleave % %)", "user": "5fb46916e4b08cb800c85b46"}, {"problem": 32, "code": "(fn [l]\n  (loop [lst l ret []]\n    (cond\n      (empty? lst) ret\n      :else (let [head (first lst)]\n              (recur (rest lst) (conj ret head head))))))", "user": "5fb8fe30e4b03f550f448223"}, {"problem": 32, "code": "(fn [my-seq](apply concat (map (partial repeat 2) my-seq)))", "user": "5fc61b45e4b06010e5ea651a"}, {"problem": 32, "code": "#(reduce (fn [v e] (conj v e e)) [] %)", "user": "5fba5692e4b03f550f448230"}, {"problem": 32, "code": "reduce #(conj % %2 %2) []", "user": "5fa7009be4b0fa27300f3dd6"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5fd66e61e4b05ac5b16ea10a"}, {"problem": 32, "code": "#(interleave % %)", "user": "58c69d88e4b021aa9917ed5e"}, {"problem": 32, "code": "#(reduce \n (fn [res el] (into res (repeat 2 el)))\n [] %)", "user": "5f3ee0d9e4b004f08c61c55c"}, {"problem": 32, "code": "(fn [xs] (mapcat #(vector % %) xs))", "user": "4fa4f2f2e4b081705acca1aa"}, {"problem": 32, "code": "#(interleave % %)", "user": "5f5aee4fe4b0a0bc16850aaa"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "5fd361f2e4b07e53c2f3f04e"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5f96fa49e4b0715f5002d7e9"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "5fdb51fae4b05ac5b16ea12f"}, {"problem": 32, "code": "#(reduce (fn [acc val] (concat acc (list val val))) '() (seq %))", "user": "5fdbde92e4b05ac5b16ea137"}, {"problem": 32, "code": "#(seq (reduce (fn [acc item]\n                (-> acc\n                    (conj item)\n                    (conj item)))\n              [] %))", "user": "5fe18014e4b05ac5b16ea16d"}, {"problem": 32, "code": "(fn [coll] (apply concat (map #(list % %) coll)))", "user": "5fbb010ae4b03f550f448233"}, {"problem": 32, "code": "(fn [x] (reduce #(conj % %2 %2) [] x))", "user": "5fc9d967e4b0689391cc77ce"}, {"problem": 32, "code": "(fn [x] (apply concat (map #(repeat 2 %) x)))", "user": "5fe25678e4b05ac5b16ea175"}, {"problem": 32, "code": "#(apply concat (map (fn [a] [a a]) %))", "user": "5fe362d9e4b05ac5b16ea179"}, {"problem": 32, "code": "#(interleave % %)", "user": "5fe0d4d4e4b05ac5b16ea164"}, {"problem": 32, "code": "(fn [l]\n  (mapcat (fn [a] [a a]) l))", "user": "5fe5a64de4b05ac5b16ea187"}, {"problem": 32, "code": "(fn  [xs] (reduce #(conj %1 %2 %2) [] xs))", "user": "5beadeb5e4b0f319e2d7ec88"}, {"problem": 32, "code": "(fn lazy-duplicate [coll]\n  \"shorter: (interleave coll coll)\"\n  (when-let [f (first coll)]\n    (concat (vector f f) (lazy-seq (lazy-duplicate (rest coll))))))", "user": "5fd2e391e4b07e53c2f3f049"}, {"problem": 32, "code": "(fn [x]\n  (reverse (reduce #(into %1 [%2 %2]) () x)))", "user": "5fea32f3e4b05ac5b16ea1aa"}, {"problem": 32, "code": "(fn [coll]\n  (apply concat (map #(repeat 2 %) coll)))", "user": "5fe9169ce4b05ac5b16ea1a0"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5fe85417e4b05ac5b16ea194"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5e68994ee4b04a83ad7cd266"}, {"problem": 32, "code": "(fn duplicate-sequence [ls] (apply concat (map #(list % %) ls)))", "user": "5fe1b893e4b05ac5b16ea16f"}, {"problem": 32, "code": "(fn [s]\n        (->> s\n             (map (fn [x] [x x]))\n             (apply concat)))", "user": "546c4377e4b00cfc9eacc177"}, {"problem": 32, "code": "reduce (fn [a x] (conj a x x)) []", "user": "5fee18f2e4b05ac5b16ea1d2"}, {"problem": 32, "code": "(fn [xs] (mapcat #(vector % %) xs))", "user": "54aec375e4b09f271ff37cf9"}, {"problem": 32, "code": "mapcat (partial repeat 2)", "user": "5fef4292e4b05ac5b16ea1d7"}, {"problem": 32, "code": "(fn [items]\n (mapcat #(repeat 2 %) items)\n)", "user": "5fe876ade4b05ac5b16ea195"}, {"problem": 32, "code": "(fn a[sq]\n  (interleave sq sq))", "user": "5fe09d1fe4b05ac5b16ea15b"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5ff3aca3e4b05ac5b16ea205"}, {"problem": 32, "code": "(fn [initial-seq]\n    (interleave initial-seq initial-seq)\n    )", "user": "5fe75ecfe4b05ac5b16ea18d"}, {"problem": 32, "code": "#(interleave %1 %1)", "user": "5ff4e28ae4b06df49cee1486"}, {"problem": 32, "code": "(fn double-seq\n  [col]\n  (->> col\n       (map vector col)\n       (apply concat)))", "user": "5ff454a1e4b05ac5b16ea20d"}, {"problem": 32, "code": "(fn [x] (interleave x x))", "user": "5ff32e20e4b05ac5b16ea1ff"}, {"problem": 32, "code": "#(interleave % %)", "user": "5fd8bcb3e4b05ac5b16ea11b"}, {"problem": 32, "code": ";; #(interleave % %)\n\n;; (fn [c]\n;;    (mapcat #(list % %) c))\n\n(fn [c]\n    (reverse (reduce #(conj %1 %2 %2) '() c)))", "user": "591ad160e4b09b4ee5954bdf"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5fd12b42e4b07e53c2f3f02f"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5f9690d4e4b0715f5002d7de"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5fd10010e4b07e53c2f3f02a"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5ff93da9e4b06df49cee14af"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5fcd15d6e4b07e53c2f3eff7"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "5ff676a9e4b06df49cee1497"}, {"problem": 32, "code": "#(reduce (fn [a b] (conj (conj a b)b)) [] %)", "user": "5fec4f5ee4b05ac5b16ea1bf"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "5f5e166ce4b02876ed9fcfed"}, {"problem": 32, "code": "(fn [x] \n  (loop [items x\n         result []]\n    (if (empty? items)\n      result\n      (recur (rest items)\n             (conj result (first items) (first items))))))", "user": "5f969088e4b0715f5002d7d4"}, {"problem": 32, "code": "(fn [coll]\n    (reduce (fn [a v]\n              (conj a v v)) [] coll))", "user": "5ff8ead1e4b06df49cee14ab"}, {"problem": 32, "code": ";;#(interleave % %)\nmapcat #(list % %)", "user": "5ffe2d18e4b074f607df65ff"}, {"problem": 32, "code": "#(interleave % %)", "user": "5ff61113e4b06df49cee1492"}, {"problem": 32, "code": "#(interleave % %)", "user": "5fc56712e4b081dd5340e3e7"}, {"problem": 32, "code": "#(mapcat (fn [x] [x x]) %)", "user": "5aa5043ee4b0d174b936c88e"}, {"problem": 32, "code": "(fn [xs]\n  (apply concat\n         (map #(repeat 2 %) xs)))", "user": "5ffc18cae4b074f607df65f1"}, {"problem": 32, "code": "#(sort (reduce concat (repeat 2 %)))", "user": "5feb6850e4b05ac5b16ea1b8"}, {"problem": 32, "code": "#(reduce\n  (fn [acc value]\n    (conj acc value value))\n  []\n  %)", "user": "5ffee617e4b074f607df6605"}, {"problem": 32, "code": "(fn\n  [s]\n  (mapcat #(identity [% %]) s))", "user": "60036736e4b074f607df663b"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5ff709e4e4b06df49cee149b"}, {"problem": 32, "code": "#(loop [s '()\n                      x %]\n                 (if (empty? x) s\n                     (recur \n                      (concat s (list (first x) (first x)))\n                      (rest x))))", "user": "591770dae4b09b4ee5954b9c"}, {"problem": 32, "code": "(fn [x]\n  (seq (reduce #(conj %1 %2 %2) [] x)))", "user": "5e42602ae4b01d43a70e8e63"}, {"problem": 32, "code": "#(interleave % %)", "user": "6001c90ce4b074f607df6626"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "6004c750e4b074f607df6645"}, {"problem": 32, "code": "(fn[x](interleave x x))", "user": "6001460ce4b074f607df6611"}, {"problem": 32, "code": "(fn [coll]\n  (apply concat\n         (map (partial repeat 2) coll)))", "user": "5ffd3422e4b074f607df65f7"}, {"problem": 32, "code": "#(reduce (fn [s v] (into s [v v])) [] %)", "user": "60057cd4e4b074f607df664a"}, {"problem": 32, "code": "mapcat (fn [x] [x x])", "user": "600201bce4b074f607df662b"}, {"problem": 32, "code": "(fn dup [l]\n  (if (= (count l) 1)\n    (concat l l)\n    (concat (list (first l) (first l)) (dup (rest l)))\n  )\n)", "user": "600777a3e4b074f607df6667"}, {"problem": 32, "code": "(fn [xs] (interleave xs xs))", "user": "5f37263de4b0574c87022c4e"}, {"problem": 32, "code": "(fn [xs]\n  (reduce (fn [acc cur] (apply conj acc (repeat 2 cur)))\n          '()\n          (reverse xs)))", "user": "5da7176ae4b000c986472c13"}, {"problem": 32, "code": "(fn\n  [input]\n  (loop [i input res []]\n    (if (empty? i)\n      res\n      (recur (rest i) (conj res (first i) (first i))))))", "user": "60046db8e4b074f607df6642"}, {"problem": 32, "code": "reduce #(concat %1 [%2 %2]) '()", "user": "600c1c72e4b074f607df6692"}, {"problem": 32, "code": "(fn [c] (mapcat #(identity [%1 %1]) c))", "user": "600cb742e4b074f607df6696"}, {"problem": 32, "code": "(fn [xs]\n  (mapcat #(list % %) xs))", "user": "5be1c6c6e4b0ed4b8aab4ca5"}, {"problem": 32, "code": "(fn foo [lst]\n  (if (empty? lst)\n    lst\n    (let [[x & xs] lst]\n      (conj (conj (foo xs) x) x))))", "user": "600ae927e4b074f607df6689"}, {"problem": 32, "code": "#(mapcat (partial repeat 2) %)", "user": "56aad4f7e4b03c432f187338"}, {"problem": 32, "code": "(fn [coll] \n  (reduce (fn [acc val] \n            (conj (conj acc val) val)) [] coll))", "user": "5b2d1c1de4b025bcb146f2c0"}, {"problem": 32, "code": "(fn [v] (reduce #(conj %1 %2 %2) [] v))\n; this is much nicer:\n; #(interleave % %)", "user": "5edd05bfe4b0c7845d86b0f3"}, {"problem": 32, "code": "#(interleave % %)", "user": "583369e6e4b089d5ab817c9c"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "6011b89ee4b074f607df66bc"}, {"problem": 32, "code": "mapcat (fn [x] (list x x))", "user": "5ff70cfde4b06df49cee149c"}, {"problem": 32, "code": "mapcat (fn [ele] (list ele ele))", "user": "60096aabe4b074f607df667f"}, {"problem": 32, "code": "(fn [coll]\n      (reduce\n       #(conj %1 %2 %2)\n       '()\n       (reverse coll)))", "user": "58db48a5e4b0a4d5acaab679"}, {"problem": 32, "code": "(fn [list] ( apply concat  (for [x list]\n                                (repeat 2 x)\n                                )) )", "user": "5ff99e57e4b06df49cee14b0"}, {"problem": 32, "code": "(fn [s]\n  (mapcat vector s s))", "user": "5fb68f09e4b08cb800c85b58"}, {"problem": 32, "code": "(fn [xs]\n   (->>\n     xs\n     (reduce #(concat %1 (repeat 2 %2)) '())))", "user": "57e10705e4b0bfb2137f5a6a"}, {"problem": 32, "code": "reduce #(into %1 [%2 %2]) []", "user": "5a9f2c53e4b0d174b936c812"}, {"problem": 32, "code": "(fn [s] (mapcat identity\n    \t(map (fn [x] (cons x (cons x '()))) s)))", "user": "5fc1c424e4b0edf42a5593d0"}, {"problem": 32, "code": "(fn duplicate [coll]\n  (apply concat (map #(vector % %) coll)))", "user": "601aaa93e4b0bf4ca6b10926"}, {"problem": 32, "code": "#(interleave % %)", "user": "4eb92051535dfed6da9c6d4c"}, {"problem": 32, "code": "#(interleave % %)", "user": "60195030e4b0bf4ca6b10920"}, {"problem": 32, "code": "reduce #(concat %1 [%2 %2]) []", "user": "5fa28e2be4b0f0ebd91b77f0"}, {"problem": 32, "code": "mapcat #(list %1 %1)", "user": "601004d6e4b074f607df66b2"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "601c39eee4b0bf4ca6b10937"}, {"problem": 32, "code": "#(reduce (fn [rv e] (conj rv e e)) [] %)", "user": "52fa250ee4b047fd55836ff3"}, {"problem": 32, "code": "reduce (fn [a n] \n           (concat a\n                 (repeat 2 n)))\n         []", "user": "4e38f245535deb9a81d77f3e"}, {"problem": 32, "code": "(fn [col] (mapcat #(repeat 2 %) col))", "user": "601fe14ce4b0bf4ca6b1095c"}, {"problem": 32, "code": "(fn [col] (interleave col col))", "user": "5e64f44de4b0fd0acd1586ae"}, {"problem": 32, "code": "(fn dupele [l]\n  (cond\n   (= [] l) ()\n   :else\n   (conj (dupele (rest l)) (first l) (first l))))", "user": "602049b8e4b0bf4ca6b10961"}, {"problem": 32, "code": "(fn [ls]\n  (reduce #(conj %1 %2 %2) [] ls)\n  )", "user": "60228147e4b0d5df2af22202"}, {"problem": 32, "code": "#(interleave % %)", "user": "601bdcb3e4b0bf4ca6b10930"}, {"problem": 32, "code": "(fn f [s]\n  (let [f*\n        (fn [acc s*]\n          (conj acc s* s*))]\n    (reduce f* [] s)))", "user": "6022844de4b0d5df2af22203"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "6023e7f7e4b0d5df2af22217"}, {"problem": 32, "code": "#(apply concat (map list % %))", "user": "5185ad63e4b0da5a5be3bac2"}, {"problem": 32, "code": "(fn [x] (sort (concat x x)))", "user": "6024544be4b0d5df2af2221f"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "60225c2ae4b0d5df2af22201"}, {"problem": 32, "code": "(fn [s]\n  (loop [old s new '()]\n    (if (empty? old) new\n      (recur (rest old) (concat new (list (first old)\n                                          (first old)))))))", "user": "60264d89e4b0d5df2af2222d"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "60282169e4b0d5df2af22240"}, {"problem": 32, "code": "#(mapcat list % %)", "user": "6022429be4b0d5df2af22200"}, {"problem": 32, "code": "#(mapcat (fn [x] [x x]) %)", "user": "602372aae4b0d5df2af2220f"}, {"problem": 32, "code": "#(for [x %1\n       dupl [x x]]\n   dupl)", "user": "6026737ee4b0d5df2af2222f"}, {"problem": 32, "code": "(fn [seq]\n   (reduce\n     (fn [acc curr]\n       (conj acc curr curr))\n     []\n     seq))", "user": "602b90c1e4b0d5df2af22266"}, {"problem": 32, "code": "(fn [coll]\n  (reverse\n   (reduce #(cons %2 (cons %2 %1)) '() coll)))", "user": "5fdb8657e4b05ac5b16ea133"}, {"problem": 32, "code": "(fn [seq]\n    (apply concat (map #(vector % %) seq)))", "user": "5ff64845e4b06df49cee1495"}, {"problem": 32, "code": "(fn [coll]\n  (mapcat #(list % %) coll))", "user": "602d5eade4b0d5df2af22279"}, {"problem": 32, "code": "#(interleave % %)", "user": "602f8400e4b0d5df2af22299"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "602abb59e4b0d5df2af2225e"}, {"problem": 32, "code": "(fn [col] (apply concat (map #(vector % %) col)))", "user": "5baba1ece4b0a20761a23482"}, {"problem": 32, "code": "#(interleave % %)", "user": "602d261de4b0d5df2af22276"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5a778224e4b013a48d399761"}, {"problem": 32, "code": "(fn \n  [seq]\n  (reduce (fn [final-parts part]\n              (into final-parts [part part]))\n          [] \n          seq))", "user": "602f56c5e4b0d5df2af22297"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "602d98d5e4b0d5df2af2227a"}, {"problem": 32, "code": "(fn [x]\n \t(loop [coll x acc []]\n      \n     (if (empty? coll)\n       \tacc\n       (let [curr (first coll)]\n        (recur (rest coll) (conj (conj acc curr) curr))  \n        )\n       )\n      \n    )\n  )", "user": "602cc4d4e4b0d5df2af22274"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "600eb95de4b074f607df66a6"}, {"problem": 32, "code": "(fn [x] (mapcat (fn [e] [e e]) x))", "user": "60329afce4b0d5df2af222b8"}, {"problem": 32, "code": "(fn [s]\n  (reduce #(concat % (repeat 2 %2)) [] s))", "user": "6023a3abe4b0d5df2af22212"}, {"problem": 32, "code": "#(mapcat (fn [x] [x x]) %)", "user": "6032f7f9e4b0d5df2af222b9"}, {"problem": 32, "code": "#(interleave % %)", "user": "602b6cf7e4b0d5df2af22265"}, {"problem": 32, "code": "(fn dupl [a] (\nif (not (= 0 (count a)))\n  (\n  if ( = 1 (count a))\n    (conj '() (first a) (first a))\n    (conj (dupl (rest a)) (first a) (first a) )\n  )\n))", "user": "602bca69e4b0d5df2af22267"}, {"problem": 32, "code": "(fn [s]\n  (loop [r s\n        ret []]\n    (if (empty? r)\n      (apply list ret)\n      (recur \n        (rest r) \n        (apply conj ret (repeat 2 (first r)))\n      )\n    )\n  )\n)", "user": "60335b35e4b0d5df2af222bf"}, {"problem": 32, "code": "(fn duplicate-seq [sequence]\n  (apply concat (for [s sequence]\n                  [s s])))", "user": "5fada7cce4b08cb800c85af5"}, {"problem": 32, "code": "#(apply concat (map (fn [e] (list e e))%))", "user": "6037e468e4b0d5df2af222e8"}, {"problem": 32, "code": "#(interleave % %)", "user": "60337f1fe4b0d5df2af222c1"}, {"problem": 32, "code": "(fn duple [seqs]\n        (if (empty? seqs) '()\n            (concat (list (first seqs) (first seqs)) (duple (rest seqs)))\n            )\n        )", "user": "6038b6b4e4b0d5df2af222ef"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "600a061de4b074f607df6683"}, {"problem": 32, "code": "(fn [s]\n  (reverse(reduce (fn [acc curr]\n          (conj acc curr curr))\n          '()\n          s)))", "user": "603d5f2ae4b0d5df2af2230c"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "603a6c40e4b0d5df2af222f7"}, {"problem": 32, "code": "(fn [xs] \n  (apply concat (map #(repeat 2 %) xs)))", "user": "6026d2cae4b0d5df2af22232"}, {"problem": 32, "code": "#(interleave % %)", "user": "603e9cb6e4b0d5df2af22317"}, {"problem": 32, "code": "(fn [x] \n  (reduce \n   (fn [a b] \n     (conj \n      (conj a b) \n      b)) \n   [] x))", "user": "603e29d4e4b0d5df2af22310"}, {"problem": 32, "code": "( fn dup [s] (reduce (fn double [lst item] (conj lst item item)) [] s ))", "user": "600b385ce4b074f607df668d"}, {"problem": 32, "code": "(fn dup [sq]\n  (let [sq (seq sq)]\n    (mapcat #(repeat 2 %) sq)\n    ))", "user": "60436423e4b02d28681c77a3"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5fae5441e4b08cb800c85afb"}, {"problem": 32, "code": "mapcat (fn [x] `(~x ~x))", "user": "60460824e4b02d28681c77bc"}, {"problem": 32, "code": "(fn [xs] (loop [xs xs s []] (if (empty? xs) s (let [f (first xs)] (recur (rest xs) (conj s f f))))))", "user": "59203996e4b09b4ee5954c5b"}, {"problem": 32, "code": "(fn [n]\n  (loop [oldData n newData '()]\n    (if (empty? oldData)\n      newData\n      (recur\n        (rest oldData) (concat newData [(nth oldData 0) (nth oldData 0)]) ))))", "user": "6040f595e4b0d5df2af2232f"}, {"problem": 32, "code": "(fn duplicate [xs]\n  (if\n    (empty? xs) []\n    (concat [(first xs) (first xs)] (duplicate (rest xs)))))", "user": "6045582fe4b02d28681c77b6"}, {"problem": 32, "code": "(fn [seq]\n    (reduce (fn [acc v]\n              (conj acc v v)) [] seq))", "user": "603ae21de4b0d5df2af222fb"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "6046a0c7e4b02d28681c77c6"}, {"problem": 32, "code": "(fn [sq] \n  (mapcat #(repeat 2 %)sq)\n  )", "user": "60461a61e4b02d28681c77c1"}, {"problem": 32, "code": "(fn\n   [list]\n   (sort (reduce conj (into '() list) list)))", "user": "60396c95e4b0d5df2af222f4"}, {"problem": 32, "code": "(fn my-double [xs] (if (empty? xs) xs (concat (list (first xs) (first xs)) (my-double (rest xs)))))", "user": "6028365be4b0d5df2af22242"}, {"problem": 32, "code": "#(reduce (fn [coll n] (concat coll (list n n))) () %)", "user": "60471241e4b02d28681c77c9"}, {"problem": 32, "code": "(fn f [xs]\n  (let [x (first xs) r (rest xs)]\n\t(cond\n     (empty? r) [x x]\n     :else (cons x (cons x (f r))))\n    )\n  )", "user": "60486e8ae4b02d28681c77db"}, {"problem": 32, "code": "(fn [coll] (apply concat (map #(list % %) coll)))", "user": "604a30c6e4b02d28681c77f0"}, {"problem": 32, "code": "#(interleave % %)", "user": "6034e358e4b0d5df2af222d1"}, {"problem": 32, "code": "#(interleave % %)", "user": "602aa5f1e4b0d5df2af2225d"}, {"problem": 32, "code": "(fn [value]\n  (mapcat #(take 2 (repeat %)) value))", "user": "600d9808e4b074f607df669c"}, {"problem": 32, "code": ";; reduce #(conj %1 %2 %2) []\n#(interleave % %)", "user": "6020365ae4b0bf4ca6b10960"}, {"problem": 32, "code": "(fn [x] (reduce (fn [agg y] (conj agg y y)) [] x))", "user": "604d3cb1e4b0b7ec0ac60ac2"}, {"problem": 32, "code": "reduce (fn [acc s] (conj acc s s)) []", "user": "604ccb9fe4b0b7ec0ac60ac1"}, {"problem": 32, "code": "(fn list-replicate [list]\n  (mapcat (partial repeat 2) list))", "user": "604f4be1e4b0b7ec0ac60ace"}, {"problem": 32, "code": "#(mapcat list % %)", "user": "60504383e4b056659d6341fa"}, {"problem": 32, "code": "#(interleave % %)", "user": "6040e6dbe4b0d5df2af2232a"}, {"problem": 32, "code": "(fn \n  [x]\n  (loop [var x\n         acum '()]\n    (if (empty? var)\n      acum\n      (let [[x1 & extra] var]\n        (recur extra (concat acum [x1 x1]))))))", "user": "540621d3e4b0addc1aec6695"}, {"problem": 32, "code": "(fn [col]\n   (reduce #(concat %1 [%2 %2]) [] col))", "user": "60537cd1e4b04c8f2157d152"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "60521ea8e4b056659d634205"}, {"problem": 32, "code": "(fn [r] (reduce #(conj %1 %2 %2) [] r))", "user": "5fd92743e4b05ac5b16ea11f"}, {"problem": 32, "code": "(fn duplicate\n  [s]\n  (reduce #(conj %1 %2 %2) '() (reverse s)))", "user": "5f6adf5ee4b02876ed9fd049"}, {"problem": 32, "code": "(fn [xs] (seq (reduce #(conj %1 %2 %2) [] xs)))", "user": "603f6623e4b0d5df2af2231f"}, {"problem": 32, "code": "(fn [x] (mapcat #(list % %) x))", "user": "526759b3e4b03e8d9a4a715b"}, {"problem": 32, "code": "#(interleave % %)", "user": "5f548678e4b0a0bc16850a7e"}, {"problem": 32, "code": "(fn [args] (reduce (fn [doubled arg] (concat doubled (list arg arg))) [] args))", "user": "5e7fb908e4b085ba37836e3f"}, {"problem": 32, "code": "#(sort (take (* 2 (count %)) (cycle %)))", "user": "6059d2e0e4b07e92fa001ace"}, {"problem": 32, "code": "#(sort(reduce conj % %))", "user": "6059d9c8e4b07e92fa001ad0"}, {"problem": 32, "code": "mapcat #(list %%)", "user": "605a2480e4b07e92fa001ad7"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "605a270ee4b07e92fa001ad8"}, {"problem": 32, "code": "(fn [x] (mapcat identity (map #(repeat 2 %) x)))", "user": "5b522591e4b02d533a91bd09"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "605b7a90e4b079a07f8593fc"}, {"problem": 32, "code": "(fn\n  [s]\n  (interleave s s))", "user": "5ec02e20e4b00a66d4a95288"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "605b7085e4b079a07f8593fa"}, {"problem": 32, "code": "#(interleave % %)", "user": "60538924e4b04c8f2157d153"}, {"problem": 32, "code": "(fn [x] (apply list (apply concat (map #(list % %) x))))", "user": "572ee822e4b0cd1946bd0f91"}, {"problem": 32, "code": "(fn dup [coll]\n  (when-let [elem (first coll)]\n    (lazy-seq (cons elem (cons elem (dup (next coll)))))))", "user": "6062e1bde4b03746e80ebf75"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "6056f58fe4b069ae89ce6adf"}, {"problem": 32, "code": "mapcat (fn [x] (repeat 2 x))", "user": "55129636e4b06e50f9beb1ab"}, {"problem": 32, "code": "(fn dupe \n    ([coll] (dupe coll []))\n    ([coll my-coll]\n        (if (empty? coll)\n            my-coll                      \n            (dupe (rest coll)  \n                  (conj my-coll (first coll) (first coll))))))", "user": "6033f8e9e4b0d5df2af222c6"}, {"problem": 32, "code": "mapcat (fn [x] (repeat 2 x))", "user": "5ea8bed8e4b00a66d4a951c2"}, {"problem": 32, "code": "#(reduce (fn [out, value] (conj out value value)) [] %1)", "user": "60622c6ee4b03746e80ebf72"}, {"problem": 32, "code": "(fn [myseq]\n  (reverse (reduce\n            (fn [ a b ]\n              (println (str \"a: \" a))\n              (println (str \"b: \" b))\n              (cons b (cons b a))\n              )\n            (list)\n            (seq myseq))))", "user": "5ff82adae4b06df49cee14a4"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "601bb40de4b0bf4ca6b1092f"}, {"problem": 32, "code": "(fn [coll]\n  (apply interleave (repeat 2 coll)))", "user": "605a876be4b000d535e6f53c"}, {"problem": 32, "code": "(fn [coll] (apply concat (map #(take 2 (repeat %)) coll)))", "user": "60654263e4b069485764ddc9"}, {"problem": 32, "code": "#(reduce (fn [ls a]\n          (conj ls a a))\n        []\n        %)", "user": "605f5c69e4b03746e80ebf5e"}, {"problem": 32, "code": "(fn [coll]\n  (mapcat #(vector % %) coll))", "user": "5f665d45e4b02876ed9fd02f"}, {"problem": 32, "code": "reduce (fn [col e] (concat col (list e e))) '()", "user": "6065755ee4b069485764ddcc"}, {"problem": 32, "code": "(fn\n   [coll]\n   (reduce\n     (fn\n       [result ele] (apply conj result [ele ele]))\n     [] coll)\n   )", "user": "60631c2ee4b069485764ddbd"}, {"problem": 32, "code": "(fn [xs] (mapcat #(list % %) xs))", "user": "606aafcfe4b069485764ddf6"}, {"problem": 32, "code": "#(reduce (fn [a x] (-> a (conj x) (conj x))) [] %)", "user": "606a70a5e4b069485764ddf2"}, {"problem": 32, "code": "#(interleave % %)", "user": "60689984e4b069485764dde6"}, {"problem": 32, "code": "(fn [coll] (mapcat (fn [x] [x x]) coll))", "user": "606b16b8e4b069485764ddf7"}, {"problem": 32, "code": "#(interleave % %)", "user": "606c87aae4b069485764de0d"}, {"problem": 32, "code": "(fn [x] (apply concat (map (partial repeat 2) x)))", "user": "606e0a42e4b069485764de19"}, {"problem": 32, "code": "(fn [l] (mapcat (fn [i] [i i]) l))", "user": "606f005ae4b069485764de1b"}, {"problem": 32, "code": "mapcat #(replicate 2 %)", "user": "606d75f5e4b069485764de13"}, {"problem": 32, "code": "(fn [coll]\n  (mapcat #(vector % %) coll))", "user": "6066266de4b069485764ddd2"}, {"problem": 32, "code": "(fn [xs] (reduce #(conj %1 %2 %2) [] xs))", "user": "606da089e4b069485764de15"}, {"problem": 32, "code": "(fn dup-elems [col]\n  (mapcat #(vector % %) col))", "user": "60606490e4b03746e80ebf67"}, {"problem": 32, "code": "reduce (fn[a b](conj a  b b)) []", "user": "6045e761e4b02d28681c77bb"}, {"problem": 32, "code": "(fn\n  [s]\n  (interleave s s)\n )", "user": "6074f5ede4b069485764de52"}, {"problem": 32, "code": "#(interleave % %)", "user": "60743977e4b069485764de46"}, {"problem": 32, "code": "#(interleave % %)", "user": "6059f25de4b07e92fa001ad1"}, {"problem": 32, "code": "#(seq (reduce\n   (fn [acc v]\n     (conj acc v v))\n   []\n   %))", "user": "606e0e95e4b069485764de1a"}, {"problem": 32, "code": "#(interleave % %)", "user": "6074e088e4b069485764de4d"}, {"problem": 32, "code": "(fn [lst] (mapcat (fn [_] (list _ _)) lst))", "user": "6074df6fe4b069485764de4b"}, {"problem": 32, "code": "(fn [x] (mapcat #(list % %) x))", "user": "6075c214e4b069485764de5b"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "606ff89be4b069485764de22"}, {"problem": 32, "code": "#(mapcat\n    (fn [x] [x x])\n     %)", "user": "605b49b7e4b079a07f8593f8"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "60764350e4b069485764de5e"}, {"problem": 32, "code": "(partial mapcat (partial repeat 2))", "user": "60794173e4b0a637ed78035d"}, {"problem": 32, "code": "reduce (fn [res x] (conj (conj res x) x)) []", "user": "6076adb2e4b069485764de60"}, {"problem": 32, "code": "(fn duplicate-each [x]\n  (cond\n   (empty? x) nil\n   :else (conj (duplicate-each (rest x)) (first x) (first x))))", "user": "5cf938a5e4b0b71b1d808a90"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "607e1d32e4b03d835a6eaeda"}, {"problem": 32, "code": "(fn [lis]\n  (reverse\n   (reduce #(cons %2 (cons %2 %1)) '() lis)))", "user": "607dd962e4b03d835a6eaed2"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "60777335e4b0a637ed78034f"}, {"problem": 32, "code": "#(mapcat (fn [s] (repeat 2 s))%)", "user": "606ff56ce4b069485764de21"}, {"problem": 32, "code": "#(sort (into '() (reduce conj % %)))", "user": "607d6bc1e4b03d835a6eaecc"}, {"problem": 32, "code": "reduce #(conj (conj %1 %2) %2) []", "user": "607b6452e4b0a637ed780375"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "6074e1ade4b069485764de4e"}, {"problem": 32, "code": "mapcat (partial repeat 2)", "user": "60759e51e4b069485764de5a"}, {"problem": 32, "code": "mapcat  #(list % %)", "user": "607d97a6e4b03d835a6eaecf"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "6070c7bae4b069485764de27"}, {"problem": 32, "code": "(partial mapcat (partial repeat 2))", "user": "5f82609ae4b0c071e6c840f9"}, {"problem": 32, "code": "(fn [seq] (reverse (reduce #(conj %1 %2 %2) '() seq)))", "user": "57ca338de4b05aa3c4741d37"}, {"problem": 32, "code": "#(mapcat vector %1 %1)", "user": "60836285e4b0736b099e42e4"}, {"problem": 32, "code": "#(sort (apply concat (repeat 2 %)))", "user": "5f755d0be4b02876ed9fd0a9"}, {"problem": 32, "code": "(fn duplicate-seq [coll]\n  (reduce #(into %1 (take 2 (repeat %2)))\n          []\n          coll))", "user": "608256d7e4b0736b099e42da"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "607a1523e4b0a637ed78036a"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "6074e1e4e4b069485764de4f"}, {"problem": 32, "code": "#(interleave % %)", "user": "602c30e3e4b0d5df2af2226f"}, {"problem": 32, "code": "(fn [s] (reduce #(conj %1 %2 %2) [] s))", "user": "5e3d183fe4b01d43a70e8e11"}, {"problem": 32, "code": "#(interleave % %)", "user": "6074e278e4b069485764de51"}, {"problem": 32, "code": "#(sort (concat % %))", "user": "608135c8e4b0736b099e42d1"}, {"problem": 32, "code": "#(interleave % %)", "user": "5aa098fae4b0d174b936c82e"}, {"problem": 32, "code": "#(interleave %%)", "user": "6085edade4b0736b099e42fc"}, {"problem": 32, "code": "(fn [coll]\n  (reduce #(conj %1 %2 %2) [] coll))", "user": "5db012e3e4b0f8c104ccfc95"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "6086cdefe4b0736b099e4302"}, {"problem": 32, "code": "(fn [lst] (interleave lst lst))", "user": "607e1d9de4b03d835a6eaedb"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "6081e475e4b0736b099e42d6"}, {"problem": 32, "code": "reduce (fn [xs x] (concat xs (cons x (cons x ())))) ()", "user": "6081b7fce4b0736b099e42d4"}, {"problem": 32, "code": "#(interleave % %)", "user": "607e1c1fe4b03d835a6eaed8"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "60849bd6e4b0736b099e42f2"}, {"problem": 32, "code": "(fn[y](reduce #(conj %1 %2 %2) [] y))", "user": "605f92bae4b03746e80ebf62"}, {"problem": 32, "code": "(fn duplicate-a-sequence [s]\n  (reduce (fn [acc cur] \n    (concat acc [cur cur])) [] s))", "user": "605714ffe4b069ae89ce6ae1"}, {"problem": 32, "code": "(fn [seqq]\n  (reduce #(conj %1 %2 %2) [] seqq))", "user": "6088395de4b0ae75613dcee2"}, {"problem": 32, "code": "reduce #(concat %1 (list %2 %2)) ()", "user": "5f1eec36e4b0f565ad998274"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "608828dee4b0ae75613dcee1"}, {"problem": 32, "code": "(fn [coll]\n  (sort (reduce conj coll coll))\n  )", "user": "60752ef6e4b069485764de55"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "60803206e4b0736b099e42cc"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "6074dfa4e4b069485764de4c"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "60845eb8e4b0736b099e42ef"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "607e1cf9e4b03d835a6eaed9"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "608820e9e4b0ae75613dcede"}, {"problem": 32, "code": "(fn [x] (reverse (reduce #(conj % %2 %2) () x)))", "user": "6078ce29e4b0a637ed78035a"}, {"problem": 32, "code": "(fn [v]\n  (loop [v v\n         ret []]\n    (if (empty? v)\n      ret\n      (recur (rest v)\n             (let [val (first v)]\n               (conj (conj ret val) val))))))", "user": "607b04e5e4b0a637ed780373"}, {"problem": 32, "code": "(fn [s]\n   (reduce (fn [c e] (concat c (cons e (cons e '())))) '() s))", "user": "60882700e4b0ae75613dcedf"}, {"problem": 32, "code": "#(reduce (fn [s e] (conj s e e )) [] %)", "user": "6086abade4b0736b099e42ff"}, {"problem": 32, "code": "mapcat (fn DuplicateASequence [lst] \n         [lst lst])", "user": "607508f3e4b069485764de54"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "608b3fe1e4b0adce4b61c442"}, {"problem": 32, "code": "(fn [sec] (reduce concat (map #(take 2 (repeat %)) sec)))", "user": "607f3336e4b05857a65e7747"}, {"problem": 32, "code": "(fn [x] (reduce concat (map (fn [y] [y y]) x)))", "user": "6089bc95e4b0ae75613dcef5"}, {"problem": 32, "code": "#(mapcat (partial repeat 2) %)", "user": "6087cb25e4b0ae75613dced8"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "6088c22ee4b0ae75613dcee4"}, {"problem": 32, "code": "#(mapcat (juxt identity identity) %)", "user": "608910a8e4b0ae75613dceed"}, {"problem": 32, "code": "(fn [col]\n  (reduce #(conj %1 %2 %2) [] col))", "user": "5fa52497e4b0fa27300f3dbf"}, {"problem": 32, "code": "(fn ans-32 [arr]\n  (reduce concat (map #(conj [] % %) arr)))", "user": "608fac60e4b03bd49d9f36c7"}, {"problem": 32, "code": "(fn [s]\n  (->> s\n       (map #(list % %))\n       (reduce into)\n       (reverse)))", "user": "6090e617e4b03bd49d9f36ce"}, {"problem": 32, "code": "(fn [s] (mapcat (fn [x] (conj [] x x)) s))", "user": "5ff88607e4b06df49cee14a6"}, {"problem": 32, "code": "#(interleave % %)", "user": "609083a8e4b03bd49d9f36cb"}, {"problem": 32, "code": "#(let [result (for [y %] (repeat 2 y))] (apply concat result))", "user": "58e90258e4b056aecfd47cfd"}, {"problem": 32, "code": "(fn [x]\n  (reduce #(apply conj %1 (list %2 %2)) [] x))", "user": "608711b1e4b0736b099e4303"}, {"problem": 32, "code": "(fn [n]\n   (sort (concat n n))\n   )", "user": "6093b56ce4b00e9e6653c3e0"}, {"problem": 32, "code": "(fn [s](apply concat (#(map list % %) s)))", "user": "608335a4e4b0736b099e42e3"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "608e6047e4b03bd49d9f36bf"}, {"problem": 32, "code": "(fn [coll] (reduce #(conj (conj %1 %2) %2)  [] coll))", "user": "608ec5e4e4b03bd49d9f36c0"}, {"problem": 32, "code": "(fn [x]\n   ( mapcat #(conj % (first %)) (partition-all 1 x)))", "user": "608ee2f7e4b03bd49d9f36c1"}, {"problem": 32, "code": "#(interleave % %)", "user": "6098263be4b00e9e6653c3f9"}, {"problem": 32, "code": "reduce #(into %1 [%2 %2]) []", "user": "5a383581e4b001c08efc0c97"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "609aa543e4b00e9e6653c40c"}, {"problem": 32, "code": "(fn duplicate\n  [s] (if (empty? s)\n        '()\n        (conj (duplicate (rest s)) (first s) (first s))))", "user": "6096d37be4b00e9e6653c3f0"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "609c1db9e4b00e9e6653c416"}, {"problem": 32, "code": "(fn duplicate [x] (if (<= (count x) 1)\n                    (list (first x) (first x))\n                    (concat (list (first x) (first x)) (duplicate (rest x)))))", "user": "6093cc08e4b00e9e6653c3e1"}, {"problem": 32, "code": "mapcat (fn [x] [x x])", "user": "60196a7fe4b0bf4ca6b10921"}, {"problem": 32, "code": "(fn [sq]\n  (apply concat (map #(repeat 2 %) sq)))", "user": "5d63bb2be4b0c9e5857d5027"}, {"problem": 32, "code": "#(interleave % %)", "user": "5d8570cae4b0915913b1d395"}, {"problem": 32, "code": "#(reduce (fn [ss v] (conj ss v v)) [] %)", "user": "609a4ac8e4b00e9e6653c40a"}, {"problem": 32, "code": "#(mapcat (fn [a] [a a]) %)", "user": "609a54f0e4b00e9e6653c40b"}, {"problem": 32, "code": "mapcat (fn [x] (list x x))", "user": "6092bfefe4b00e9e6653c3db"}, {"problem": 32, "code": "(fn [coll]\n  (apply concat (mapv vector coll coll)))", "user": "60a42199e4b00e9e6653c454"}, {"problem": 32, "code": "(fn [s]\n  (->> s\n       (map (partial repeat 2))\n       (reduce into '())\n       (reverse)))", "user": "60919828e4b00e9e6653c3d8"}, {"problem": 32, "code": "#(reverse\n  (reduce (fn [x y] (conj x y y)) '() %))", "user": "609e9b64e4b00e9e6653c426"}, {"problem": 32, "code": "reduce #(conj (conj % %2) %2) []", "user": "609beb06e4b00e9e6653c412"}, {"problem": 32, "code": "#(apply concat (for [x %] [x x]))", "user": "60a14335e4b00e9e6653c432"}, {"problem": 32, "code": "(fn [xs]\n  (mapcat #(repeat 2 %) xs))", "user": "558ffb4be4b0277789237667"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "60ab0ba2e4b00e9e6653c47d"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2)\n       []", "user": "60ab1536e4b00e9e6653c47e"}, {"problem": 32, "code": "(fn duplicate_elems [lst]\n   (apply concat (map \n    (fn [elem] (list elem elem))\n    lst)))", "user": "60a7c55be4b00e9e6653c468"}, {"problem": 32, "code": "(fn [s]\n  (apply concat (for [e s]\n                 [e e])))", "user": "60a39b80e4b00e9e6653c450"}, {"problem": 32, "code": "#(mapcat (fn [x] [x x]) %)", "user": "52435d0ce4b076204b44fab5"}, {"problem": 32, "code": "(fn [x] (reduce concat (map #(list % %) x)))", "user": "5cc9b7dfe4b0ccb061962864"}, {"problem": 32, "code": "reduce (fn [acc x] (conj (conj acc x) x)) []", "user": "60ade833e4b00e9e6653c494"}, {"problem": 32, "code": "(fn [arg]\n  (reduce\n    #(conj %1 %2 %2)\n    [] arg))", "user": "60a52517e4b00e9e6653c459"}, {"problem": 32, "code": "#(->> %\n      (replicate 2)\n      (apply interleave))", "user": "60aecd73e4b00e9e6653c49a"}, {"problem": 32, "code": "(fn [myseq]\n  (reduce (fn [acc next-value] (conj (conj acc next-value) next-value)) [] myseq))", "user": "60726211e4b069485764de36"}, {"problem": 32, "code": "(fn dup [x]\n  (if (empty? x)\n    x\n    (cons (first x) (cons (first x) (dup (rest x))))))", "user": "60b2aaebe4b0e0fa5f1b4228"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "60ac91c5e4b00e9e6653c485"}, {"problem": 32, "code": "#(interleave % %)", "user": "60a9a829e4b00e9e6653c470"}, {"problem": 32, "code": "#(reduce (fn [dseq elem]\n            (concat dseq [elem elem]))\n          [] %)", "user": "60b1add0e4b0e0fa5f1b4227"}, {"problem": 32, "code": "(fn [coll]\n  (reduce #(conj %1 %2 %2) [] coll))", "user": "60b3b8a9e4b0e0fa5f1b4233"}, {"problem": 32, "code": "(fn  [coll]\n  (reduce into (empty coll) (map #(repeat 2 %) coll)))", "user": "60a7d174e4b00e9e6653c469"}, {"problem": 32, "code": "(fn [col]\n  (loop [res '() lst col]\n    (if (empty? lst)\n      res\n      (let [[x & remaining] lst]\n        (recur (concat res (list x x)) remaining)))))", "user": "51b920bfe4b0e871ca4958f9"}, {"problem": 32, "code": "#(seq (reduce (fn [acc item] (-> acc (conj item) (conj item))) [] %))", "user": "57123c96e4b09c608db70454"}, {"problem": 32, "code": "#(interleave % %)", "user": "604a3daee4b02d28681c77f2"}, {"problem": 32, "code": "mapcat #(list  % %)", "user": "60b61b40e4b0e0fa5f1b4244"}, {"problem": 32, "code": "(fn [xs]\n  (->> xs\n       (map (fn [x] [x x]))\n       (apply concat)))", "user": "60b57acee4b0e0fa5f1b4238"}, {"problem": 32, "code": "reduce #(conj %1 %2 %2) []", "user": "60b7e2c5e4b0e0fa5f1b4252"}, {"problem": 32, "code": "(fn duplicate [xs] (if (empty? xs) xs (let [f (first xs) fs (rest xs)] (cons f (cons f (duplicate fs))))))", "user": "60b616e1e4b0e0fa5f1b4243"}, {"problem": 32, "code": ";(fn [x] (reverse (reduce (fn [acc el] (conj acc el el)) '() x)))\n(fn [x] (interleave x x))", "user": "60b3b375e4b0e0fa5f1b4232"}, {"problem": 32, "code": "#(interleave % %)", "user": "4db2903f535df7e46ed9b6bf"}, {"problem": 32, "code": "#(interleave % %)", "user": "608e5697e4b03bd49d9f36be"}, {"problem": 32, "code": "(fn [s]\n  (reduce #(conj (conj %1 %2) %2) [] s))", "user": "60bb21d5e4b0e0fa5f1b4281"}, {"problem": 32, "code": "(fn [s] (sort (concat s s)))", "user": "60b8f098e4b0e0fa5f1b425f"}, {"problem": 32, "code": "#(interleave % %)", "user": "60afc597e4b0245e5b1b35c3"}, {"problem": 32, "code": "(comp reverse\n        (partial reduce\n                 (comp #(conj % (first %)) conj)\n                 '()))", "user": "5f2d6bc4e4b033932238a66e"}, {"problem": 32, "code": "#(interleave % %)", "user": "5d3e8c3de4b01671435dbd73"}, {"problem": 32, "code": "(fn [xs]\n     (interleave xs xs))", "user": "5f6580e7e4b02876ed9fd023"}, {"problem": 32, "code": "#(loop [seqq %\n              res []]\n         (if (empty? seqq)\n             res\n             (recur (rest seqq) (conj res (first seqq) (first seqq)) )\n              ))", "user": "60bfb68be4b0e0fa5f1b429e"}, {"problem": 32, "code": "mapcat #(vector % %)", "user": "60c0ceb7e4b0e0fa5f1b42a6"}, {"problem": 32, "code": "mapcat #(repeat 2 %)", "user": "60c65b10e4b0e0fa5f1b42d3"}, {"problem": 32, "code": "(fn [xs]\n  (reduce #(conj (conj %1 %2) %2) [] xs))", "user": "5f1c0447e4b0f565ad99825c"}, {"problem": 32, "code": "(fn Duplicate-a-sequence\n  [coll]\n  (sort (take (* 2 (count coll))(cycle coll))))", "user": "608c270ae4b03bd49d9f36b3"}, {"problem": 32, "code": "(fn [s] (reduce (fn [a e] (conj a e e)) [] s))", "user": "579e75fbe4b05b1deef9ae29"}, {"problem": 32, "code": "(fn [coll] (mapcat #(identity [%1 %1]) coll))", "user": "60b5fa96e4b0e0fa5f1b4242"}, {"problem": 32, "code": "(fn duppy [v]\n  (mapcat list v v))", "user": "60c91f48e4b0e0fa5f1b4304"}, {"problem": 32, "code": "#(mapcat (partial repeat 2) %)", "user": "60c558e9e4b0e0fa5f1b42ce"}, {"problem": 32, "code": "#(reduce\n  (fn [acc item]\n    (into acc (repeat 2 item)))\n    []\n    %)", "user": "60b7ef35e4b0e0fa5f1b4254"}, {"problem": 32, "code": "reduce (fn [r x] (concat r (repeat 2 x))) []", "user": "60cb4008e4b0e0fa5f1b4316"}, {"problem": 32, "code": "#(mapcat (fn dup [i] (repeat 2  i)) %)", "user": "6033c42ce4b0d5df2af222c3"}, {"problem": 32, "code": "(fn\n [coll]\n  (reduce #(conj %1 %2 %2) [] coll))", "user": "603e8e3ae4b0d5df2af22316"}, {"problem": 32, "code": "(fn [coll]\n  (let [aux-coll (reverse coll)]\n    (reduce (fn [acc item]              \n              (let [aux-acc (conj acc item)]\n                (conj aux-acc item)))\n            '()\n            aux-coll)))", "user": "60cebbd3e4b0e0fa5f1b4334"}, {"problem": 32, "code": "mapcat #(conj '() % %)", "user": "60c8e662e4b0e0fa5f1b4300"}, {"problem": 32, "code": "#(interleave % %)", "user": "60d1ca09e4b0250a41de0b05"}, {"problem": 32, "code": "(fn duplicate-sequence [s] (let [v []] \n                               ((fn duplicate [k,s] (if (= s '()) \n                                                         k \n                                                         (duplicate (conj k (first s) (first s)) (rest s)))) v s)))", "user": "60c86bbde4b0e0fa5f1b42fb"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "60cb3836e4b0e0fa5f1b4315"}, {"problem": 32, "code": "#(interleave % %)", "user": "60ce4a2be4b0e0fa5f1b4330"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "60d1e522e4b0250a41de0b07"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "60c7c23be4b0e0fa5f1b42eb"}, {"problem": 32, "code": "reduce #( conj %1 %2 %2 ) []", "user": "60c4e5dfe4b0e0fa5f1b42cd"}, {"problem": 32, "code": "(fn dup-each-item [xs]\n  (reduce #(apply conj %1 (list %2 %2)) [] xs))", "user": "60c90322e4b0e0fa5f1b4302"}, {"problem": 32, "code": "(fn [s] (interleave s s))", "user": "60ddc7cbe4b0abd5a8cdd531"}, {"problem": 32, "code": "(fn [xs] (interleave xs xs))", "user": "60c43b20e4b0e0fa5f1b42c9"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "60dd865ee4b0d8b48c489db3"}, {"problem": 32, "code": "(partial mapcat #(do [% %]))", "user": "5cd26163e4b0ccb0619628fe"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5ed81965e4b016b56eae05ed"}, {"problem": 32, "code": "mapcat #(list % %)", "user": "5d69a6e1e4b0db5d338d160e"}]