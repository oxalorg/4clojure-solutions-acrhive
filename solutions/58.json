[{"code": "(fn[& f] #((reduce (fn[v f] [(apply f v)]) %& (reverse f)) 0))", "problem": 58, "user": "4dce6e41535d5973398f92a2"}, {"code": "; Not Original - Studied from clojure code \r\n(fn [& fns] \r\n  (let [fs (reverse fns)] \r\n    (fn [& args] \r\n      (loop [ret (apply (first fs) args) fs (next fs)] \r\n        (if fs (recur ((first fs) ret) (next fs)) ret)))))", "problem": 58, "user": "4dc3780b535da86f151f0c3f"}, {"code": "(fn [f & r]\r\n  (fn [& args]\r\n    ((fn af [[f & r] args]\r\n       (if r\r\n         (f (af r args))\r\n         (apply f args)))\r\n      (cons f r) args)))", "problem": 58, "user": "4dc986d0535d5973398f9285"}, {"code": "(fn F[f & fs]\r\n  (if fs\r\n(fn[& a](f(apply (apply F fs) a)))\r\nf\r\n))", "problem": 58, "user": "4dd66da7535d2dad7130b5c8"}, {"code": "(fn my-comp [f & fs]\r\n  (letfn [(com [g k]\r\n            (fn [x] (g (k x))))]\r\n    (fn [& args]\r\n      (loop [f f, fs fs]\r\n        (if (empty? (rest fs))\r\n          (f (apply (first fs) args))\r\n          (recur (com f (first fs)) (rest fs)))))))", "problem": 58, "user": "4dd62278535d2dad7130b5c7"}, {"code": "(fn\r\n    ([a b] (fn [& x] (a (apply b x))))\r\n    ([a b c] (fn [& x] (a (b (apply c x))))))", "problem": 58, "user": "4dd61f98535d2dad7130b5c6"}, {"code": "(fn [& fns]\r\n  (let [[f & fns-left] (reverse fns)]\r\n    (fn [& args]\r\n      (let [first-result (apply f args)]\r\n        (loop [fns fns-left result first-result]\r\n          (if (seq fns)\r\n            (recur (rest fns) ((first fns) result))\r\n            result))))))", "problem": 58, "user": "4dd6d6a0535d2dad7130b5ca"}, {"code": "(fn [& xs] (loop [xs xs f (fn [x] x)] (if (seq xs) (recur (rest xs) (fn [& x] (f (apply (first xs) x)))) f)))", "problem": 58, "user": "4db5082e535d87e67b28fe03"}, {"code": "(fn mcomp\r\n  ([f g] (fn\r\n    ([x] (f (g x)))\r\n\t  ([x y] (f (g x y)))\r\n\t  ([x y & args] (f (apply g x y args)))))\r\n  ([f g h]\r\n     (fn\r\n       ([x] (f (g (h x))))\r\n       ([x y] (f (g (h x y))))\r\n       ([x y & args] (f (g (apply h x y args)))))))", "problem": 58, "user": "4ddc620d535d02782fcbea06"}, {"code": "(fn my-compose\r\n  ([] identity)\r\n  ([f & fs] (let [fs (reverse (conj fs f))]\r\n              (fn [& args]\r\n                (loop [ret (apply (first fs) args)\r\n                       fs (next fs)]\r\n                  (if fs\r\n                    (recur ((first fs) ret)\r\n                            (next fs))\r\n                    ret))))))", "problem": 58, "user": "4dd023dd535d5973398f92ad"}, {"code": "(fn  ([f] f)\r\n  ([f g] \r\n     (fn \r\n       ([] (f (g)))\r\n       ([x] (f (g x)))\r\n       ([x y] (f (g x y)))\r\n       ([x y z] (f (g x y z)))\r\n       ([x y z & args] (f (apply g x y z args)))))\r\n  ([f g h] \r\n     (fn \r\n       ([] (f (g (h))))\r\n       ([x] (f (g (h x))))\r\n       ([x y] (f (g (h x y))))\r\n       ([x y z] (f (g (h x y z))))\r\n       ([x y z & args] (f (g (apply h x y z args))))))\r\n  ([f1 f2 f3 & fs]\r\n    (let [fs (reverse (list* f1 f2 f3 fs))]\r\n      (fn [& args]\r\n        (loop [ret (apply (first fs) args) fs (next fs)]\r\n          (if fs\r\n            (recur ((first fs) ret) (next fs))\r\n            ret))))))", "problem": 58, "user": "4dd579b5535dae65d5c462ea"}, {"code": "(fn [& f] (fn[& a] ((reduce (fn [v g] [(apply g v)]) a  (reverse f)) 0)))", "problem": 58, "user": "4ddbd934535d02782fcbe9fc"}, {"code": "(fn compose [f & fs]\r\n  (if (empty? fs)\r\n    (fn [& args]\r\n      (apply f args))\r\n    (fn [& args]\r\n      (f (apply (apply compose fs) args)))))", "problem": 58, "user": "4ddbfb8a535d02782fcbea00"}, {"code": "(fn cc\r\n  ([f] (fn [& xs] (apply f xs)))\r\n  ([f & fs] (fn [& xs] (f (apply (apply cc fs) xs)))))", "problem": 58, "user": "4ddc1c89535d02782fcbea01"}, {"code": "(fn [& m] (let [f (reverse m)] (fn [& n] (loop [r (apply (first f) n) f (next f)] (if f (recur ((first f) r) (next f)) r)))))", "problem": 58, "user": "4db27319535df7e46ed9b6bd"}, {"code": "(fn poula [& xf] (fn [& q] \r\n\t\t\t\t\t\t\t(reduce (fn [a b] (b a)) (apply (last xf) q) (rest (reverse xf)))\r\n\t\t\t\t\t   ))", "problem": 58, "user": "4dadca03c9a9d6ed4199dc57"}, {"code": "(fn [& fns]\r\n       (fn [& args]\r\n         (let [reversed-functions (reverse fns)]\r\n           (loop [funs (rest reversed-functions)\r\n                  x (apply (first reversed-functions) args)]\r\n           (do (println x)\r\n               (println (first funs))\r\n               (if (first funs)\r\n                 (recur (rest funs) ((first funs) x))\r\n                 x))))))", "problem": 58, "user": "4dbe19fe535d020aff1edf59"}, {"code": "(fn [& function-list]\r\n    ((fn compose\r\n        ([functions]\r\n            (let [head (first functions) tail (rest functions)]\r\n                (compose (fn [& arg] (apply head arg)) tail)))\r\n        ([composed functions]\r\n            (if (zero? (count functions))\r\n                composed\r\n                (let [head (first functions) tail (rest functions)]\r\n                    (compose (fn [& arg] (head (apply composed arg))) tail)))))\r\n    (reverse function-list)))", "problem": 58, "user": "4dddf817535d08e6dec9fdd3"}, {"code": "(fn [& fs]\r\n  (fn [& args]\r\n    (reduce (fn [r f]\r\n              (f r))\r\n            (apply (first (reverse fs)) args)\r\n            (rest (reverse fs)))))", "problem": 58, "user": "4de2f44f535d08e6dec9fdec"}, {"code": "(fn [& more]\r\n  (let [rev-funs (reverse more)]\r\n    (reduce (fn [acc elm]\r\n        (fn [& arg]\r\n\t\t(elm (apply acc arg))))\r\n\t    (fn [& more1]\r\n\t      (apply (first rev-funs) more1))\r\n\t    (rest rev-funs))))", "problem": 58, "user": "4dd6d7ee535d2dad7130b5cb"}, {"code": "(fn [& args]\r\n  (reduce #(fn [& args2] (% (apply %2 args2))) args))", "problem": 58, "user": "4ddbdc1b535d02782fcbe9fd"}, {"code": "(fn [& fns]\r\n  (when-let [rev-fns (reverse fns)]\r\n    (fn [& args]\r\n      (loop [ret (apply (first rev-fns) args) n (next rev-fns)]\r\n        (if n\r\n          (recur ((first n) ret) (next n))\r\n          ret)))))", "problem": 58, "user": "4dd52e29535dae65d5c462e5"}, {"code": "(fn c [a & f] \r\n  (if (empty? f)\r\n        (fn [& x] (apply a x))\r\n        (fn [& x] (a (apply (apply c f) x)))))", "problem": 58, "user": "4df1ce44535d08e6dec9fe1f"}, {"code": "(fn [& fs]\r\n                (fn [& args]\r\n                  (let [res (apply (last fs) args)]\r\n                    (reduce #(%2 %1) res (reverse (butlast fs))))))", "problem": 58, "user": "4deb529a535d08e6dec9fe04"}, {"code": "(letfn [(mycomp [& funcs]\r\n      (let [[f & fs] (reverse funcs)]\r\n        (fn [& args]\r\n            (reduce (fn [res f] (f res)) (apply f args) fs)\r\n        )))]\r\n  mycomp)", "problem": 58, "user": "4df3d4f4535d08e6dec9fe2c"}, {"code": "(fn [& funs]\r\n  (fn\r\n    ([arg]\r\n       (loop [res arg to-call (reverse funs)]\r\n         (if (empty? to-call)\r\n           res\r\n           (recur ((first to-call) res ) (rest to-call)))))\r\n    ([arg1 arg2 & args]\r\n       (loop [res (apply (first (reverse funs)) (list* arg1 arg2 args)) to-call (rest (reverse funs)) ]\r\n         (if (empty? to-call)\r\n           res\r\n           (recur ((first to-call) res) (rest to-call))))))\r\n  )", "problem": 58, "user": "4df3df8a535d08e6dec9fe2d"}, {"code": "(fn func-comp [& funcs]\r\n    (fn [& args]\r\n      (first\r\n        (reduce #(vector (apply %2 %1))\r\n          args\r\n          (reverse funcs)))))", "problem": 58, "user": "4df669d4535d08e6dec9fe35"}, {"code": "(fn dot\r\n  ([f] f)\r\n  ([f & fns]\r\n   (fn [& args] (f (apply (apply dot fns) args)))))", "problem": 58, "user": "4dfd4ba8535d04ed9115e781"}, {"code": "(fn [& fns]\r\n   (fn [& args]\r\n     (reduce (fn [result f] (f result)) \r\n              (apply (last fns) args) (rest (reverse fns)))))", "problem": 58, "user": "4def301c535d08e6dec9fe12"}, {"code": "(fn [& fns]\r\n  (loop [fns (reverse fns)]\r\n    (let [c (count fns)]\r\n      (cond\r\n        (= c 0) identity\r\n        (= c 1) (first fns)\r\n        :else\r\n        (let [[f1 f2 & frest] fns]\r\n          (recur (cons (fn [& args] (f2 (apply f1 args))) frest)))))))", "problem": 58, "user": "4e02bee8535d04ed9115e791"}, {"code": "(fn [& f]\r\n  (fn [& a]\r\n    (nth\r\n      (reduce\r\n          #(list (apply %2 %))\r\n        a\r\n        (reverse f))\r\n      0)))", "problem": 58, "user": "4e03c616535d04ed9115e796"}, {"code": "(fn [& fs]\r\n    (fn [& args]\r\n      (reduce #(if (nil? %1)\r\n                 (apply %2 args)\r\n                 (%2 %1)\r\n                 ;; (println %1 %2)\r\n                 ;; nil\r\n                 )\r\n              nil (reverse fs))\r\n      )\r\n    )", "problem": 58, "user": "4e0d8c27535d04ed9115e7b7"}, {"code": "(fn [& fs]\r\n  (let [fs (reverse fs)]\r\n      (fn [& args]\r\n        (loop [ret (apply (first fs) args) fs (next fs)]\r\n          (if fs\r\n            (recur ((first fs) ret) (next fs))\r\n            ret)))))", "problem": 58, "user": "4e0e0529535d04ed9115e7b9"}, {"code": "(fn [& fns]\r\n  (fn [& param]\r\n    (if (= (count param) 1)\r\n      (reduce #(%2 %1) (first param) (reverse fns))\r\n      (let [r (rest (reverse fns)), p (apply (last fns) param)]\r\n        (reduce #(%2 %1) p r)))))", "problem": 58, "user": "4df407c3535d08e6dec9fe2e"}, {"code": "(fn mycomp [& initfs]\r\n  (fn [& args]\r\n    (loop [ret nil, fs (reverse initfs)] \r\n    (if (empty? fs)\r\n      ret\r\n      (if (nil? ret)\r\n        (recur (apply (first fs) args) (rest fs))\r\n        (recur ((first fs) ret) (rest fs)))))))", "problem": 58, "user": "4e123905535d04ed9115e7ce"}, {"code": "(fn [& func]\r\n  (fn [& args]\r\n    (let [func (reverse func)]\r\n    (loop [args (apply (first func) args) func (rest func)]\r\n      (if (empty? func)\r\n        args\r\n        (recur ((first func) args) (rest func)))))))", "problem": 58, "user": "4e170143535d04ed9115e7ed"}, {"code": "(fn [x & xs]\r\n  (fn [& args]\r\n    ((fn step [[f & fs] a]\r\n       (if fs\r\n         (f (step fs a))\r\n         (apply f a)))\r\n     (cons x xs) args)))", "problem": 58, "user": "4e1158aa535d04ed9115e7c6"}, {"code": "(fn [& fs](\n    fn [& as]\n      (let [fs (reverse fs)\nx (apply (first fs) as)]\n         (reduce (fn [o f]\n          (f o)) x (rest fs)))))", "problem": 58, "user": "4daa374930acd6ed13482a68"}, {"code": "(fn [ & r ]\r\n  (fn [& x]\r\n    (get (reduce #(conj [] (apply %2 %1))  x (reverse r))0)))", "problem": 58, "user": "4deff9f9535d08e6dec9fe15"}, {"code": "(fn mycomp [& f]\n  (fn [& x] (first (reduce #(list (apply %2 %1)) x (reverse f)))))", "problem": 58, "user": "4e14108c535d04ed9115e7dd"}, {"code": "(fn [& f]\r\n  #((reduce (fn [v f] [(apply f v)]) %& (reverse f)) 0))", "problem": 58, "user": "4e14b925535d04ed9115e7df"}, {"code": "(fn [& fns]\n    (letfn [(rec [fs arg]\n  \t (if (seq fs)\n\t\t   (let [f (first fs) ret (rec (rest fs) arg)]\n\t\t     (list (apply f ret)))\n\t\t   arg))]\n\t   (fn [& arg]\n\t       (first (rec fns arg)))))", "problem": 58, "user": "4e1b2cd9535d04ed9115e7fd"}, {"code": "(fn compose [& fns]\n  (fn [& args]\n    (loop [rest-fns (rest (reverse fns))\n           val      (apply (last fns) args)]\n        (if (empty? rest-fns)\n          val\n          (recur (rest rest-fns) ((first rest-fns) val))))))", "problem": 58, "user": "4e28120f535deb9a81d77efa"}, {"code": "(fn [& fs]\n  (reduce\n    (fn [f g]\n      (fn [& x]\n        (f (apply g x))))\n   fs))", "problem": 58, "user": "4de165f3535d08e6dec9fde6"}, {"code": "(fn [& funcs]\n  (let [coll (reverse funcs)]\n    (if (= (count coll) 2)\n      (fn [& args]\n        ((second coll) (apply (first coll) args)))\n      (if (= (count coll) 3)\n        (fn [& args]\n          ((last coll) ((second coll) (apply (first coll) args))))))))", "problem": 58, "user": "4e22b78b535d04ed9115e81e"}, {"code": "(fn composition\n  ([x y]\n#(x (y %)))\n  ([x y z]\n  (fn ([a b c d]\n        (x (y (z a b c d))))\n      ([a b]\n        (x (y (z a b)))))))", "problem": 58, "user": "4e16bdef535d04ed9115e7e9"}, {"code": "(fn [& fns]\n  (reduce (fn [f g] (fn [& args] (f (apply g args)))) fns))", "problem": 58, "user": "4dbd0161535d020aff1edf3f"}, {"code": "(fn [& C] (fn [& args] (reduce (fn [x y] (y x)) (apply (last C) args) (rest (reverse C)))))", "problem": 58, "user": "4e31a15c535deb9a81d77f1e"}, {"code": "(fn [& fs]\r\n    (let [[f & fs] (reverse fs)]\r\n      (fn [& xs] (reduce #(%2 %1) (apply f xs) fs))))", "problem": 58, "user": "4e26e8b4535deb9a81d77ef6"}, {"code": "(fn k [f & g]\n  (if g\n    #(f (apply (apply k g) %&))\n    f\n  )\n)", "problem": 58, "user": "4e307313535deb9a81d77f14"}, {"code": "(fn [& fxs]\n  (fn [& args]\n    (first \n      (reduce \n        (fn [args fx] \n          (list (apply fx args))) \n        args\n        (reverse fxs)))))", "problem": 58, "user": "4e2f9e71535deb9a81d77f11"}, {"code": "(fn [& fs]\n          (let [[f & fs] (reverse fs)]\n            (fn [& args]\n              (reduce #(%2 %1) (apply f args) fs))))", "problem": 58, "user": "4daef21cedd6309eace4d169"}, {"code": "(fn[& fs]\n  (fn [& xs]\n    (loop [fs (reverse fs), result xs]\n      (if (nil? (first fs))\n        (first result)\n        (recur (rest fs)(list (apply (first fs)result)))))))", "problem": 58, "user": "4db2cc55535df7e46ed9b6c5"}, {"code": "(new clojure.core$comp)", "problem": 58, "user": "4e3b6bff535deb9a81d77f52"}, {"code": "(fn my-comp [f & fns]\n  (if (not (empty? fns))\n    (fn [& xs] (f (apply (apply my-comp fns) xs)))\n    (fn [& xs] (apply f xs))))", "problem": 58, "user": "4e39fb68535deb9a81d77f47"}, {"code": "#(fn [& arg] \r\n   (first (reduce (fn [n f] \r\n\t\t\t    (vector (apply f n)))\r\n\t\t arg (reverse %&))))", "problem": 58, "user": "4e273301535deb9a81d77ef7"}, {"code": "(fn [& fns]\n               (let [fns (reverse fns)]\n                 (fn [& args]\n                   (loop [res (apply (first fns) args)\n                          fns (rest fns)]\n                     (if (seq fns)\n                       (recur ((first fns) res) (rest fns))\n                       res)))))", "problem": 58, "user": "4e08fb7a535d04ed9115e7ac"}, {"code": "(fn [& funs]\n  (reduce \n    (fn [f g]\n      (fn [& x] (f (apply g x))))\n    funs))", "problem": 58, "user": "4e4c238f535dc968683fc4dc"}, {"code": "(fn [& fns]\n  (fn [& args]\n    (apply (reduce (fn [result func]\n              (fn [& args] (result (apply func args))))\n            fns)\n      args)))", "problem": 58, "user": "4e42f930535dc968683fc49f"}, {"code": "(fn my-comp\n  ([f] f)\n  ([f g] (fn [& xs] (f (apply g xs))))\n  ([f g & more] (my-comp f (apply my-comp g more))))", "problem": 58, "user": "4e50b67b535dc968683fc4ed"}, {"code": "(fn\n  ([x y] #(x (apply y %&)))\n  ([x y z] \n    #(x (y (apply z %&)))))", "problem": 58, "user": "4e513ecf535dc968683fc4f6"}, {"code": "(fn [& funs]\n  (fn [& args]\n    (loop [coll (reverse funs) args args]\n      (if (empty? coll)\n        (first args)\n        (recur (rest coll)\n               (list (apply (first coll) args)))))))", "problem": 58, "user": "4e4ae5aa535dc968683fc4d2"}, {"code": "(fn [& fns]\n    (fn [& args]        \n      (reduce\n        (fn [x f] (f x))\n        (apply (last fns) args) \n        (rest (reverse fns)))))", "problem": 58, "user": "4e513758535dc968683fc4f3"}, {"code": "(fn[& f]\n  (let [[g & f] (reverse f)]\n    (fn[& a] (reduce #(%2 %) (apply g a) f))))", "problem": 58, "user": "4e12cc9d535d04ed9115e7d2"}, {"code": "(fn [& fs]\n  (fn [& args]\n  (reduce #(%2 %1) (apply (last fs) args) (reverse (butlast fs)))))", "problem": 58, "user": "4e5411e8535d8a8b8723a279"}, {"code": "#(fn [& x] ((reduce (fn [v f] [(apply f v)]) x (into () %&)) 0))", "problem": 58, "user": "4e52d815535d302ef430da77"}, {"code": "(fn [& fs]\n  (fn [& xs]\n   (let [[f & fs] (reverse fs)]\n     (reduce #(%2 %1) (apply f xs) fs))))", "problem": 58, "user": "4e4ad154535dc968683fc4d1"}, {"code": "(fn [x & xs]\n  (fn [& args]\n    ((fn step [[f & fs] a]\n       (if fs\n         (f (step fs a))\n         (apply f a)))\n     (cons x xs) args)))", "problem": 58, "user": "4db51ce0535d87e67b28fe06"}, {"code": "(fn\n  ([f1 f2]\n    (fn\n      ([a] (f1 (f2 a)))\n      ([a & b] (f1 (apply f2 a b)))))\n  ([f1 f2 f3]\n    (fn\n      ([a] (f1 (f2 (f3 a))))\n      ([a & b] (f1 (f2 (apply f3 a b)))))))", "problem": 58, "user": "4e333091535deb9a81d77f25"}, {"code": "(fn [& s]\n  #(first (reduce (fn [r f] [(apply f r)]) %& (reverse s))))", "problem": 58, "user": "4e5676b2535d8a8b8723a282"}, {"code": "(fn [& fns]\n  (fn [& args]\n    (reduce #(%2 %1)\n      (apply (last fns) args)\n      (rest (reverse fns)))))", "problem": 58, "user": "4e521cef535d302ef430da6d"}, {"code": "(fn\n  ([f] f)\n  ([f g] \n     (fn \n       ([] (f (g)))\n       ([x] (f (g x)))\n       ([x y] (f (g x y)))\n       ([x y z] (f (g x y z)))\n       ([x y z & args] (f (apply g x y z args)))))\n  ([f g h] \n     (fn \n       ([] (f (g (h))))\n       ([x] (f (g (h x))))\n       ([x y] (f (g (h x y))))\n       ([x y z] (f (g (h x y z))))\n       ([x y z & args] (f (g (apply h x y z args))))))\n  ([f1 f2 f3 & fs]\n    (let [fs (reverse (list* f1 f2 f3 fs))]\n      (fn [& args]\n        (loop [ret (apply (first fs) args) fs (next fs)]\n          (if fs\n            (recur ((first fs) ret) (next fs))\n            ret))))))", "problem": 58, "user": "4e58bcd4535d8a8b8723a296"}, {"code": "(fn [& fs]\r\n  (let [[rf & rfs] (reverse fs)]\r\n    (fn [& args]\r\n      (reduce #(%2 %1)\r\n\t      (apply rf args)\r\n\t      rfs))))", "problem": 58, "user": "4dd7d040535d2dad7130b5d6"}, {"code": "#(fn [& a]\n  (loop [r (apply (last %&) a) \n         c (reverse (butlast %&))]\n    (if (empty? c)\n      r\n      (recur ((first c) r) (rest c)))))", "problem": 58, "user": "4e49badd535dc968683fc4c9"}, {"code": "(fn function-composition [& functions]\n  (fn [& p]\n    (first (reduce (fn [l e]\n               (vector (apply e l)))\n                   p\n\t           (reverse functions)))\n    ))", "problem": 58, "user": "4e4bd94b535dc968683fc4d7"}, {"code": "(fn [& fs]\n  (fn [& xs]\n    (loop [fs (reverse fs) args xs]\n      (if fs\n        (recur (next fs) (list (apply (first fs) args)))\n        (when args (first args))))))", "problem": 58, "user": "4e593dac535d8a8b8723a29c"}, {"code": "(fn [& funs] (fn [& v] (reduce #(%2 %) (apply (last funs) v) (rest (reverse funs)))))", "problem": 58, "user": "4e589bdc535d8a8b8723a295"}, {"code": "(fn [& f]\n  (fn [& a]\n    (reduce #(%2 %1) (apply (last f) a) (rest (reverse f)))))", "problem": 58, "user": "4e5c801e535d8a8b8723a2c1"}, {"code": "(fn my-comp\n  [& fs]\n  (fn [& args]\n    (let [fs (reverse fs)]\n      (loop [fs fs args args]\n  (if (seq fs)\n\t  (recur (rest fs) [(apply (first fs) args)])\n\t  (first args))))))", "problem": 58, "user": "4e5bff2b535d8a8b8723a2bd"}, {"code": "(fn [& fns]\n  (let [fns (reverse fns)]\n    (fn [& args]\n      (loop [ret (apply (first fns) args) fns (next fns)]\n        (if fns\n          (recur ((first fns) ret) (next fns))\n          ret)))))", "problem": 58, "user": "4e2b1d48535deb9a81d77f03"}, {"code": "(fn [& funs]\n    (fn [& args]\n      (first\n       (reduce (fn [xs f]\n                 [(apply f xs)])\n               args\n               (reverse funs)))))", "problem": 58, "user": "4dad938fc9a9d6ed1b99dc57"}, {"code": "(fn [& fns]\n    (let [[f & gs] (reverse fns)]\n      (fn [& args]\n        (reduce #(%2 %1) (apply f args) gs))))", "problem": 58, "user": "4e5f08c7535d8a8b8723a2da"}, {"code": "(fn fog [& fns]\n  (reduce (fn [f g] #(f (apply g %&))) identity fns))", "problem": 58, "user": "4e615cd2535d8ccf87e9fe58"}, {"code": "(fn p\n  ([f g]\n   (fn [& args] (f (apply g args))))\n  ([f g h]\n   (fn [& args] (f (g (apply h args)))))\n  ([f g h i]\n   (fn [& args] (f (g (h (apply i args)))))))", "problem": 58, "user": "4e5914e0535d8a8b8723a29b"}, {"code": "(fn fun-comp [& args]\n  \"4clojure.com/problem/58 not solved\"\n  (let [funs (reverse args)]\n    (fn [& fun-args]\n      (first (reduce #(vector (apply %2 %1)) fun-args funs)))))", "problem": 58, "user": "4db58ccb535d87e67b28fe10"}, {"code": "(fn mycomp [& fs]\r\n  (let [fs (reverse fs)]\r\n  (fn [& args]\r\n\t  (loop [ret (apply (first fs) args) fs (next fs)]\r\n\t\t(if fs\r\n\t\t  (recur ((first fs) ret) (next fs))\r\n\t\t  ret)))))", "problem": 58, "user": "4e50c894535dc968683fc4ee"}, {"code": "(fn [& r]\n  (let [f (reverse r)]\n    (fn [& a]\n      (reduce #(%2 %1) \n              (apply (peek f) a)\n              (pop f)))))", "problem": 58, "user": "4e5ecd65535d8a8b8723a2d6"}, {"code": "(fn compo\n  [& fs]\n  (fn [& args]\n    (let [reversed-fs (reverse fs)]\n      (reduce #(%2 %1) (apply (first reversed-fs) args) (rest reversed-fs)))))", "problem": 58, "user": "4e3bccb1535deb9a81d77f55"}, {"code": "(fn comp-\n  ^{:doc \"58. Write a function which allows you to create function compositions.\"}\n   ([f] f)\n   ([f & fs] (fn [& args] ((apply comp- f (butlast fs)) (apply (last fs) args)))))", "problem": 58, "user": "4e5eb843535d8a8b8723a2d4"}, {"code": "(fn [& fns]\n  (let [rfns (reverse fns)]\n    (fn [& args]\n      (reduce\n        (fn [result f]\n          (f result))\n        (apply (first rfns) args)\n        (rest rfns)))))", "problem": 58, "user": "4e68c434535d8ccf87e9fe89"}, {"code": "(fn my-comp [& f]\r\n  (fn [& a] \r\n    (loop [r (apply (last f) a)\r\n           c (butlast f)]\r\n      (if (not c)\r\n        r\r\n        (recur \r\n          ((last c) r)\r\n          (butlast c) )))))", "problem": 58, "user": "4e5bdc2b535d8a8b8723a2bb"}, {"code": "(fn [& f]\n  (fn [& v]\n    (first (reduce #(list (apply %2 %)) v (reverse f)))))", "problem": 58, "user": "4e6a48d5535d8ccf87e9febd"}, {"code": "(fn [& a] (reduce #(fn [& x] (% (apply %2 x))) a))", "problem": 58, "user": "4e6b3fc8535d8ccf87e9ff0f"}, {"code": "(fn [& x]\n  (let [x (reverse x)]\n  (fn [& a]\n        (loop [r (apply (first x) a) x (next x)]\n          (if x\n            (recur ((first x) r) (next x))\n            r)))))", "problem": 58, "user": "4e44358f535dc968683fc4a8"}, {"code": "(fn myComp [& fs]\n  (let [fs (reverse fs)]\n    (fn [& args]\n      (loop [\n        ret (apply (first fs) args)\n        fs (next fs)]\n        (if fs\n            (recur ((first fs) ret) (next fs))\n            ret)))))", "problem": 58, "user": "4e6a60cd535d8ccf87e9fed7"}, {"code": "(fn c ([] (fn [x] x))\n      ([& r] #((apply c (butlast r)) (apply (last r) %&))))", "problem": 58, "user": "4e5fe31a535d8ccf87e9fe50"}, {"code": "(fn [& s]\n  (reduce (fn [f g] #(f (apply g %&))) s))", "problem": 58, "user": "4e6a412e535d8ccf87e9feb6"}, {"code": "(fn [& args] \n  (fn [& xs]\n    (reduce\n      (fn [a v] (v a))\n      (apply (last args) xs)\n      (reverse (butlast args))\n)))", "problem": 58, "user": "4e6e10d8535d5021c1a895fd"}, {"code": "(fn [& s] (reduce (fn[f g] #(f (apply g %&))) s))", "problem": 58, "user": "4e6dd0f5535d5021c1a895f3"}, {"code": "(fn [& fs] (fn [& data] (first (reduce (fn [result f] [(apply f result)]) data (reverse fs))\n)))", "problem": 58, "user": "4e6dc95a535d5021c1a895f1"}, {"code": "(fn [& a] (fn [& b] (\n  loop [todo a on b]\n    (if (empty? todo) on\n        (recur (butlast todo) (if (= (count todo) (count a)) (apply (last todo) on) ((last todo) on)))))))", "problem": 58, "user": "4e6e6630535d5021c1a89609"}, {"code": "(fn[& fs]\n  (let [fs (reverse fs)]\n  (fn [& args]\n    (loop [r (apply (first fs) args), fs (next fs)]\n      (if fs\n        (recur ((first fs) r), (next fs))\n        r\n      )\n    )\n  )\n  )\n)", "problem": 58, "user": "4e6df3c9535d5021c1a895fa"}, {"code": "(fn [a & r]\n    (if (seq r)\n      (recur (fn [& b] (a (apply (first r) b))) (rest r))\n      (fn [& b] (apply a b))))", "problem": 58, "user": "4e6f4cbc535d5021c1a8961a"}, {"code": "(fn poser [f & fs]\n  (fn [& args]\n    (if fs\n      (f (apply (apply poser fs) args))\n      (apply f args))))", "problem": 58, "user": "4e6a4950535d8ccf87e9febf"}, {"code": "(fn\n  ([a b] (fn [& args]\n            (a\n             (apply b args))))\n  ([a b c]\n      (fn [& args]\n        (a\n         (b\n          (apply c args))))))", "problem": 58, "user": "4e6dfe57535d5021c1a895fc"}, {"code": "(fn [& f]\n  (let [rf (reverse f)]\n    (fn [x & y]\n      (reduce (fn [p sf] (sf p))\n              (apply (first rf) (conj y x)) (rest rf)))))", "problem": 58, "user": "4e6f1b7a535d5021c1a89618"}, {"code": "(fn [& a]\n  (fn [& b]\n    (let [c (reverse a)]\n      (loop [f (rest c)\n             x (apply (first c) b)]\n        (if (empty? f)\n          x\n          (recur (rest f) ((first f) x))\n        )\n      )\n    )\n  )\n)", "problem": 58, "user": "4e3456f9535deb9a81d77f2a"}, {"code": "(fn comb [f & fs]\n   (fn [x & xs] (let [arglist (conj xs x)]\n\t     (if (nil? fs) \n\t\t (apply f arglist)\n\t\t (f (apply (apply comb fs) arglist))))))", "problem": 58, "user": "4e6e3a1e535d5021c1a89602"}, {"code": "(fn [& fcoll]\n  (fn [& args]\n    (loop [[f & fs :as l]   (reverse (butlast fcoll))\n           arg              (apply (last fcoll) args)]\n      (if (empty? l)\n        arg\n        (recur fs (f arg))))))", "problem": 58, "user": "4e71705e535d5021c1a89649"}, {"code": "(fn [& c] (fn [& a] \n  (let [d (apply (last c) a) e (rest (reverse c))] \n  (reduce #(%2 %) d e))))", "problem": 58, "user": "4e71da4d535d5021c1a89653"}, {"code": "(fn func-comp [& funcs]\n  (fn [& args]\n    (let [seed (apply (last funcs) args)\n          comp-list (-> funcs butlast reverse)]\n      (reduce #(%2 %1) seed comp-list))\n  )\n)", "problem": 58, "user": "4e720985535d5021c1a89655"}, {"code": "(fn [& fs] (fn [& args] (loop [ret (apply (last fs) args) fs (next (reverse fs))] (if fs (recur ((first fs) ret) (next fs)) ret))))", "problem": 58, "user": "4e6fa38b535d5021c1a89622"}, {"code": "(fn\n  ([f] f)\n  ([f g] \n     (fn \n       ([] (f (g)))\n       ([x] (f (g x)))\n       ([x y] (f (g x y)))\n       ([x y z] (f (g x y z)))\n       ([x y z & args] (f (apply g x y z args)))))\n  ([f g h] \n     (fn \n       ([] (f (g (h))))\n       ([x] (f (g (h x))))\n       ([x y] (f (g (h x y))))\n       ([x y z] (f (g (h x y z))))\n       ([x y z & args] (f (g (apply h x y z args)))))))", "problem": 58, "user": "4daedd1eedd6309eace4d164"}, {"code": "(fn comp* [& fns]\n  (let [comp2 (fn [f g]\n    (fn [& args]\n      (f (apply g args))))]\n  (when (seq fns)\n    (if (empty? (rest fns))\n      (first fns)\n      (reduce comp2 fns)))))", "problem": 58, "user": "4e691c79535d8ccf87e9fe97"}, {"code": "(fn \r\n  ([& fs]\r\n\t   (let [f (reverse (list* fs))]\r\n\t      (fn [& args]\r\n\t\t(loop [ret (apply (first f) args) f (next f)]\r\n\t\t   (if f\r\n\t\t     (recur ((first f) ret) (next f))\r\n\t\t     ret))))))", "problem": 58, "user": "4e6a79ca535d8ccf87e9feeb"}, {"code": "(fn [& fs]\n  (reduce (fn [f g]\n            #(f (apply g %&)))\n          fs))", "problem": 58, "user": "4dabb7b1950ed6eda1bd72f3"}, {"code": "(fn [& fs] #(first (reduce (fn [x f] [(apply f x)]) %& (reverse fs))))", "problem": 58, "user": "4e79a143535db169f9c796a2"}, {"code": "(fn c\n  ([f] f)\n  ([f & g]\n    (fn [& x]\n      (f (apply (apply c g) x)))))", "problem": 58, "user": "4e707db6535d5021c1a8963a"}, {"code": "(fn [& a]\n  (let [[f & r] (reverse a)]\n  (fn [& v]         \n   (reduce #(%2 %1) \n     (apply f v) r))))", "problem": 58, "user": "4e6a4038535d8ccf87e9feb5"}, {"code": "(fn [& fargs]\n  (fn [& args]\n  (loop [fns (reverse fargs) result args]\n\t  (if (seq fns)\n\t    (recur (next fns) [(apply (first fns) result)])\n\t    (first result)))))", "problem": 58, "user": "4e6a4edd535d8ccf87e9fec4"}, {"code": "(fn t\n    ([x y] (fn [& m] (x (apply y m))))\n    ([x y & m] (apply t (t x y) m)))", "problem": 58, "user": "4e50e2a0535dc968683fc4ef"}, {"code": "(fn my-comp [& [fst-fn & rst-fns]]\n  (if (empty? rst-fns)\n      fst-fn\n      (fn [& args] (fst-fn (apply (apply my-comp rst-fns) args)))))", "problem": 58, "user": "4e7c8fd1535db169f9c796be"}, {"code": "(fn [& fs] \n       (let [f (reverse fs)]\n         (fn [& args]\n           (loop [r (apply (first f) args) f (next f)]\n             (if f\n               (recur ((first f) r) (next f))\n               r)))))", "problem": 58, "user": "4e6a5f5c535d8ccf87e9fed6"}, {"code": "(fn [& fs]\n  (let [fs (reverse fs)]\n    (fn [& xs]\n      (reduce #(%2 %)\n              (apply (first fs) xs)\n              (rest fs)))))", "problem": 58, "user": "4e7dd982535db169f9c796ee"}, {"code": "(fn f [% & fs]\n  (if (empty? fs)\n    (fn [& x] (apply % x))\n    (fn [& x] (% (apply (apply f fs) x)))))", "problem": 58, "user": "4e7db3b4535db169f9c796e1"}, {"code": "(fn [& ffs]\n             (let [ff (reverse ffs)]\n      (fn [& args]\n        (loop [ret (apply (first ff) args) ff (next ff)]\n          (if ff\n            (recur ((first ff) ret) (next ff))\n            ret)))))", "problem": 58, "user": "4dcc5aff535d5973398f9293"}, {"code": "(fn c [f & r] (if (nil? r) f (fn [& x] (f (apply (apply c r) x)))))", "problem": 58, "user": "4e7e55ab535db169f9c79711"}, {"code": "(fn [& l] (fn [& y] (reduce (fn [a f] (if (= a y) (apply f a) (f a))) y (reverse l))))", "problem": 58, "user": "4e7f4147535db966e863cc3d"}, {"code": "(fn[& x](fn[& y](first(reduce #(list (apply %2 %1)) y (reverse x)))))", "problem": 58, "user": "4e7eff9e535db966e863cc38"}, {"code": "(fn better-comp [& fs]\n  (reduce (fn [f g]\n            (fn [& args]\n              (f (apply g args))))\n          fs))", "problem": 58, "user": "4e7f51eb535db966e863cc3f"}, {"code": "(fn [& F] (reduce (fn [f g] #(f (apply g %&))) F))", "problem": 58, "user": "4e7dfab0535db169f9c796f9"}, {"code": "(fn [& F]\n  (reduce\n    (fn [f g] #(f (apply g %&)))\n    F))", "problem": 58, "user": "4db85bdd535d1e037afb218d"}, {"code": "(fn pmoc [& args] (fn [& coll]\n                    (loop [fs (rest (reverse args))\n                           res (apply (first (reverse args)) coll)]\n                      (if (empty? fs)\n                        res\n                        (recur (rest fs) ((first fs) res))))))", "problem": 58, "user": "4e6a11ee535d8ccf87e9fe9f"}, {"code": "(fn [& fs]\n  (let [fs (reverse fs)]\n    (fn [& args]\n      (loop [rt (apply (first fs) args)\n             fs (next fs)]\n(if fs\n  (recur ((first fs) rt) (next fs))\n  rt)))))", "problem": 58, "user": "4e80d71b535db62dc21a62b7"}, {"code": "(fn \n  ([f g] \n     (fn \n       ([] (f (g)))\n       ([x] (f (g x)))\n       ([x y] (f (g x y)))\n       ([x y z] (f (g x y z)))\n       ([x y z & args] (f (apply g x y z args)))))\n  ([f g h] \n     (fn \n       ([] (f (g (h))))\n       ([x] (f (g (h x))))\n       ([x y] (f (g (h x y))))\n       ([x y z] (f (g (h x y z))))\n       ([x y z & args] (f (g (apply h x y z args))))))\n)", "problem": 58, "user": "4e78dc98535db95036265724"}, {"code": "(fn [& fs] \n  (fn [& p] \n    ((reduce \n        (fn [a f] [(apply f a)]) p (reverse fs)) 0)))", "problem": 58, "user": "4e7e93f5535db169f9c7971a"}, {"code": "(fn c [a & r] (if r #(a (apply (apply c r) %&)) a))", "problem": 58, "user": "4db858d1535d1e037afb218c"}, {"code": "(fn [& functions]\n          (let [funs (reverse (sequence functions))]\n            (fn [& args]\n              (loop [result (apply (first funs) args)\n                     funs (rest funs)]\n                (if (empty? funs)\n                  result\n                  (recur ((first funs) result) (rest funs)))))))", "problem": 58, "user": "4e6ea1f5535d5021c1a8960e"}, {"code": "(fn [& ffs]\n  (fn [& params]\n\t \t(loop [fs (reverse ffs)  ll  params ]\n\t\t   (let [cur (first fs)]\n\t\t    \t(if (nil? cur) \n\t\t\t      (first ll)\n\t\t\t      (recur  (next fs) (list (apply cur  ll))))))))", "problem": 58, "user": "4e739e13535dff18050a9c76"}, {"code": "(fn [ & funs ]\n (fn [ & inp ]\n  (loop [\n    fns (next (reverse funs))\n    inp (apply (last funs) inp) ]\n   (if (empty? fns) inp\n    (recur (next fns) ((first fns) inp\n))))))", "problem": 58, "user": "4e356d2b535deb9a81d77f2d"}, {"code": "(fn [& funcs]\n             (let [funs (reverse funcs)]\n                  (fn [& args]\n                      (loop [val (apply (first funs) args)\n                         fs  (next funs)]\n                         (if fs\n                             (recur ((first fs) val) (next fs))\n                             val)))))", "problem": 58, "user": "4e6a4954535d8ccf87e9fec0"}, {"code": "(fn [& fs] (fn [& xs] (reduce #(%2 %1)\n                        (apply (last fs) xs)\n                        (rest (reverse fs)))))", "problem": 58, "user": "4e8612f8535db62dc21a62f2"}, {"code": "(fn [& fs]\n  (let [ rs (reverse fs) ]\n    (fn [& as]\n      (reduce #(%2 %1) (apply (first rs) as) (rest rs)))))", "problem": 58, "user": "4e860e85535db62dc21a62f1"}, {"code": "(fn [& fns]\r\n  (let [fns (reverse fns)]\r\n    (fn [& args]\r\n       (first (reduce (fn [as f] [(apply f as)])\r\n               args fns)))))", "problem": 58, "user": "4e8681b7535dae1a5effa438"}, {"code": "(fn [& fs]\n    (fn [& args]\n      (first\n       (loop [ret args fs (reverse fs)]\n         (if (nil? fs)\n           ret\n           (recur [(apply (first fs) ret)] (next fs)))))))", "problem": 58, "user": "4e8510e7535db62dc21a62e7"}, {"code": "(fn [& fns]\n    (fn [& args]\n      (first (reduce\n       (fn [res f] (list (apply f res)))\n       args\n       (reverse fns)))))", "problem": 58, "user": "4e80aa10535db62dc21a62b1"}, {"code": "(fn [& fns]\n  (let [rfns (reverse fns)]\n    (fn rcp [& args]\n      (loop [rf (rest rfns) o (apply (first rfns) args)]\n        (if (empty? rf)\n          o\n          (recur (rest rf) ((first rf) o)))))))", "problem": 58, "user": "4e773be8535d324fb2983d6e"}, {"code": "(fn mycomp [& funs]\n    (fn [& args]\n      (let [first-result (apply (last funs) args)]\n        (reduce #(%2 %1) first-result (rest (reverse funs))))))", "problem": 58, "user": "4e89f46c535d3e98b8023288"}, {"code": "(fn [& fs]\n  (fn [& args]\n    (loop [todo (rest (reverse fs))\n           res (apply (last fs) args)]\n      (if-let [f (first todo)]\n        (recur (rest todo) (f res))\n        res))))", "problem": 58, "user": "4e8c1d97535d65386fec2127"}, {"code": "(fn f58\n ([f] f)\n ([f1 f2] (fn [& x] (f1 (apply f2 x))))\n ([f1 f2 & fs] (apply f58 (f58 f1 f2) fs)))", "problem": 58, "user": "4e88feef535d8b9bb0147ca8"}, {"code": "(fn my-comp2 [& funcs]\n  (fn [& args] \n    (first (reduce (fn [acc x] [(apply x acc)])\n  \t   args\n\t\t   (reverse funcs)))))", "problem": 58, "user": "4dc54eb2535d8a4b2fd74284"}, {"code": "(fn [& fns]\n  (let [fns (reverse (list* fns))]\n    (fn [& args]\n      (loop [ret (apply (first fns) args)\n             fns (next fns)]\n        (if fns\n          (recur ((first fns) ret) (next fns))\n          ret)))))", "problem": 58, "user": "4e8e8c24535d65386fec2143"}, {"code": "(fn app [& fns]\n  (if (= 1 (count fns))\n    (fn [& more] (apply (first fns) more))\n    (fn [& more]\n      ((first fns) (apply (apply app (rest fns)) more)))))", "problem": 58, "user": "4e8f5eba535d65386fec214c"}, {"code": "(fn comp'\n  [& fs]\n  (let [[f & fs] (reverse fs)]\n    (fn [& args]\n      (reduce #(%2 %1)\n              (apply f args)\n              fs))))", "problem": 58, "user": "4dc0ff08535d020aff1edf84"}, {"code": "(fn [& fns]\n  (fn [& x]\n    (loop [f (reverse fns) r x]\n      (let [r* (apply (first f) r)]\n        (if (next f)\n            (recur (rest f) (list r*))\n            r*)))))", "problem": 58, "user": "4db016af838c48654951d9b9"}, {"code": "(fn [& fn-args]\n(let [fns (reverse fn-args)]\n   (fn [& args]\n        (loop [result (apply (first fns) args) \n               fns (rest fns)]\n          (if (empty? fns) result\n            (recur ((first fns) result) (rest fns)))))))", "problem": 58, "user": "4dcfbc44535d5973398f92a7"}, {"code": "(fn c [& m]\n  (if (next m)\n    (fn [& x] ((first m) (apply (apply c (next m)) x)))\n    (first m)))", "problem": 58, "user": "4e80e0f2535db62dc21a62b8"}, {"code": "(fn compose [& fns]\n  (if (empty? fns) #(do %)\n    (fn [& args] ((apply compose (butlast fns)) (apply (last fns) args)))))", "problem": 58, "user": "4e89ddf9535d3e98b8023284"}, {"code": "(fn c [a f & g] (if g #(f (a (a c a g) %&)) f))\n\napply", "problem": 58, "user": "4e823ed7535db62dc21a62c7"}, {"code": "(fn [& f]\n  (fn [& r]\n    (let [fns (reverse f)]\n      (loop [ret (apply (first fns) r)\n             fs (next fns)]\n        (if fs (recur ((first fs) ret) (next fs))\n            ret)))))", "problem": 58, "user": "4e718fdc535d5021c1a8964d"}, {"code": "(fn\r\n  ([f g] (fn [arg] (f (g arg))))\r\n  ([f g h] (fn [& args] (f (g (apply h args))))))", "problem": 58, "user": "4dfe65a1535d04ed9115e787"}, {"code": "(fn compose \r\n  [& funcs]\r\n\t(if (= 1 (count funcs))\r\n\t\t(first funcs)\r\n\t\t(fn [& args]\r\n      ((first funcs) (apply (apply compose (rest funcs)) args)))))", "problem": 58, "user": "4e8a0c82535d3e98b802328d"}, {"code": "#(reduce (fn [a f] (fn [& args] (a (apply f args)))) identity %&)", "problem": 58, "user": "4e9660ec535dbda64a6f6b44"}, {"code": "(fn [& fns] (fn [& xs] (reduce #(%2 %1) (apply (last fns) xs) (reverse (butlast fns)))))", "problem": 58, "user": "4e976f79535dbda64a6f6b55"}, {"code": "(fn [& fs] (let [fs (reverse fs)]\n  (fn [& args] (reduce #(%2 %)\n        (apply (first fs) args) (rest fs)))))", "problem": 58, "user": "4e96557d535dbda64a6f6b43"}, {"code": "(fn [& fns]\n  (fn [& args]\n    (loop [f fns arg args]\n      (if (empty? f)\n        (first arg)\n        (recur (butlast f) [(apply (last f) arg)])))))", "problem": 58, "user": "4e955b95535dbda64a6f6b33"}, {"code": "(fn compo [& x] (fn [& y] (if (== (count x) 1) (apply (first x) y ) ( (first x\n) (apply (apply compo (rest x)) y) ) ) ) )", "problem": 58, "user": "4e8d5edd535d65386fec2134"}, {"code": "(fn [& f]\n  (let [[g & f] (reverse f)]\n    (fn [& a]\n      (reduce #(%2 %1) (apply g a) f))))", "problem": 58, "user": "4e8f1ac6535d65386fec2146"}, {"code": "(fn ([f g] (fn [x] (f (g x)))) ([f g h] (fn [& x] (f (g (apply h x))))))", "problem": 58, "user": "4e951ce5535dbda64a6f6b2e"}, {"code": "(fn [& fncs]\r\n  (fn [& val]\r\n    (loop [fns (reverse fncs), v val]\r\n      (if (empty? fns) (first v)\r\n          (recur (rest fns) [(apply (first fns) v)])))))", "problem": 58, "user": "4e994541535dbda64a6f6b64"}, {"code": "(fn step [& funs]\r\n  (let [fns (reverse funs)]\r\n  (fn [& args]\r\n    (loop [ret (apply (first fns) args) fs (next fns)]\r\n      (if fs\r\n        (recur ((first fs) ret) (next fs))\r\n        ret)))))", "problem": 58, "user": "4e99f2e1535dbda64a6f6b6c"}, {"code": "(fn [& fs]\n  (let [fs (reverse fs)]\n    (fn [& args]\n      (loop [ret (apply (first fs) args) fs (next fs)]\n        (if fs (recur ((first fs) ret) (next fs))\n          ret)))))", "problem": 58, "user": "4e9c66e2535dbda64a6f6b7f"}, {"code": "(fn [& f]\n  (fn [& args]\n    ((fn c [f]\n      (if (= (count f) 1) (apply (first f) args)\n        ((first f) (c (next f))))) f)))", "problem": 58, "user": "4e951f44535dbda64a6f6b30"}, {"code": "(fn [& fns]\n  (let [fs (reverse fns)]\n    (fn [& args]\n      (loop [ret (apply (first fs) args)\n             fs (next fs)]\n        (if fs\n          (recur ((first fs) ret) (next fs))\n          ret)))))", "problem": 58, "user": "4e7af59c535db169f9c796af"}, {"code": "(fn [& fs]\n  (fn [& args]\n    (first (reduce (fn [v f]\n                     [(apply f v)]) args (reverse fs)))))", "problem": 58, "user": "4e9fd521535d7eef3080729a"}, {"code": "(fn g[f & fns]\n    (fn [& args]\n      (if (empty? fns)\n        (apply f args)\n        (f (apply (apply g fns) args)))))", "problem": 58, "user": "4e9e0640535dbda64a6f6b91"}, {"code": "(fn [& fs]\r\n    (let [fs (reverse (list* fs))]\r\n\t       (fn [& args]\r\n\t\t   (loop [r (apply (first fs) args) fs (next fs)]\r\n\t\t      (if fs\r\n\t\t\t  (recur ((first fs) r) (next fs))\r\n\t\t\t  r)))))", "problem": 58, "user": "4e821ca5535db62dc21a62c2"}, {"code": "#(let [fs (reverse (list* %&))]\n  (fn [& args]\n    (loop [ret (apply (first fs) args) fs (next fs)]\n      (if fs\n        (recur ((first fs) ret) (next fs))\n        ret))))", "problem": 58, "user": "4e8f4f64535d65386fec2149"}, {"code": "(fn [& fs]\n  (fn [arg & args] \n    (loop [fs (reverse fs)\n           appfirst (not (nil? args))\n           acc (if (nil? args) arg (cons arg args))]\n      (println acc)\n      (if (empty? fs)\n        acc\n        (recur (rest fs)\n               false \n               (if appfirst\n                 (apply (first fs) acc)\n                 ((first fs) acc)))))))", "problem": 58, "user": "4e9dafe1535dbda64a6f6b89"}, {"code": "(fn [& funcs]\n   (fn [& args]\n     ((fn [coll-f result should-apply?]\n       (if (empty? coll-f)\n         result\n         (recur (butlast coll-f)\n            (if should-apply? \n            (apply (last coll-f) result)\n            ((last coll-f) result))\n            false)))\n       funcs args true)))", "problem": 58, "user": "4e73a9dc535dff18050a9c77"}, {"code": "#(let [[g & fs] (reverse %&)]\n   (fn [& args] (reduce (fn [a f] (f a)) (apply g args) fs)))", "problem": 58, "user": "4ea09fa4535d7eef308072aa"}, {"code": "(fn c [a & r] (if r #(a (apply (apply c r) %&)) a))", "problem": 58, "user": "4ea16981535d7eef308072b2"}, {"code": "(fn [& functions]\n    (let [fs (reverse functions)]\n      (fn [& args]\n        (loop [ret (apply (first fs) args) fs (next fs)]\n          (if fs\n            (recur ((first fs) ret) (next fs))\n            ret)))))", "problem": 58, "user": "4e6defcc535d5021c1a895f8"}, {"code": "(fn \r\n([f1 f2] (fn [x & more] (f1 (apply f2 x more))))\r\n([f1 f2 f3] (fn [x & more] (f1 (f2 (apply f3 x more))))))", "problem": 58, "user": "4ea09441535d7eef308072a7"}, {"code": "(fn [& fns]\n  (fn [& args]\n    (reduce #(%2 %) \n            (apply (last fns) args)\n            (rest (reverse fns)))))", "problem": 58, "user": "4ea1b9e4535d7eef308072b8"}, {"code": "(fn [x & xs]\n  (fn [& args]\n    ((fn step [[f & fs] a]\n       (if fs\n         (f (step fs a))\n         (apply f a)))\n     (cons x xs) args)))", "problem": 58, "user": "4e9e6bd6535dbda64a6f6b96"}, {"code": "(fn [& fns]\n  (reduce\n    (fn [a b]\n      (fn [& x] (a (apply b x)))\n    )\n    fns\n  )\n)", "problem": 58, "user": "4ea57300535d7eef308072d5"}, {"code": "(fn [& fs]\n  (fn [& args]\n    (loop [fs (reverse fs) args args]\n      (if (empty? fs)\n        (first args)\n        (recur\n          (rest fs)\n          [(apply (first fs) args)])))))", "problem": 58, "user": "4ea67906535d7eef308072e4"}, {"code": "(fn [& fs] (fn [& args] (first (reduce (fn [r n] [(apply n r)]) args (reverse fs)) )))", "problem": 58, "user": "4ea41fc2535d7eef308072cb"}, {"code": "(fn [& fns]\n  (letfn\n      [(apply-fn-to-memo [m fun] (fun m))]\n    (let\n        [fns (reverse fns)]\n      (fn [& args]\n        (reduce apply-fn-to-memo (apply (first fns) args) (rest fns))))))", "problem": 58, "user": "4dbb0f2d535d1e037afb21b1"}, {"code": "(fn c [& fs]\n  (let [sf (reverse fs)]\n    (fn [& as]\n      (reduce #(%2 %1) (apply (first sf) as) (rest sf)))))", "problem": 58, "user": "4e6a2f51535d8ccf87e9fea9"}, {"code": "(fn [& f]\n  (fn [& args]\n      (first(reduce #(list (apply %2 %)) args (reverse (seq f))))))", "problem": 58, "user": "4ea5e794535d7eef308072df"}, {"code": "(fn [& funcs]\n  (fn [& args]\n    (first (reduce #(list (apply %2 %1)) args (reverse funcs)))))", "problem": 58, "user": "4ead6418535d7eef3080731f"}, {"code": "(fn c [f & fns]\n  (if fns\n    #(f (apply (apply c fns) %&))\n    #(apply f %&)))", "problem": 58, "user": "4eae5fe4535d7eef30807325"}, {"code": "(fn c [& fs]\n  (reduce (fn [a b] (fn[x & xs] (b (apply a x xs)))) (reverse fs)))", "problem": 58, "user": "4dbd2aa3535d020aff1edf40"}, {"code": "(fn [& fs]\n  (let [fs (reverse fs)]\n    (fn [& args]\n      (loop [acc (apply (first fs) args) fs (next fs)]\n        (if fs\n          (recur ((first fs) acc) (next fs))\n          acc)))))", "problem": 58, "user": "4e9c81e8535dbda64a6f6b80"}, {"code": "(fn [& fs] (fn [& args] (reduce #(%2 %) (apply (last fs) args) (next (reverse fs)))))", "problem": 58, "user": "4db92654535d1e037afb21a0"}, {"code": "(fn\n  ([] identity)\n  ([f] f)\n  ([f g] \n     (fn \n       ([] (f (g)))\n       ([x] (f (g x)))\n       ([x y] (f (g x y)))\n       ([x y z] (f (g x y z)))\n       ([x y z & args] (f (apply g x y z args)))))\n  ([f g h] \n     (fn \n       ([] (f (g (h))))\n       ([x] (f (g (h x))))\n       ([x y] (f (g (h x y))))\n       ([x y z] (f (g (h x y z))))\n       ([x y z & args] (f (g (apply h x y z args))))))\n  ([f1 f2 f3 & fs]\n    (let [fs (reverse (list* f1 f2 f3 fs))]\n      (fn [& args]\n        (loop [ret (apply (first fs) args) fs (next fs)]\n          (if fs\n            (recur ((first fs) ret) (next fs))\n            ret))))))", "problem": 58, "user": "4eb0afed535d7eef3080733e"}, {"code": "(fn [& fs] (fn y [& xs] (reduce #(%2 %) (apply (last fs) xs) (rest (reverse fs)))))", "problem": 58, "user": "4eaede1f535d7eef30807329"}, {"code": "(fn [& fi] \n  (fn [& args]\n    (let [fs (reverse fi) \n          f (first fs) \n          a (apply f args)]\n      (reduce #(%2 %) a (rest fs)))))", "problem": 58, "user": "4e9d6a65535dbda64a6f6b87"}, {"code": "(fn [& fs]\n    (fn [& args]\n      (loop [answer (apply (first (reverse fs)) args)\n             fs (next (reverse fs))]\n        (if (nil? fs) answer\n            (recur ((first fs) answer) (next fs))))))", "problem": 58, "user": "4e89e939535d3e98b8023287"}, {"code": "(fn [& fs]\n  (let [fs (reverse (list* fs))]\n(fn [& args]\n  (loop [ret (apply (first fs) args) fs (next fs)]\n(if fs\n  (recur ((first fs) ret) (next fs))\nret)))))", "problem": 58, "user": "4eb27fad535d7eef3080734a"}, {"code": "(fn [& fs] (reduce (fn [f g] #(f (apply g %&))) fs))", "problem": 58, "user": "4eb97b2e535dfed6da9c6d54"}, {"code": "(fn my-f\n    ([f] f)\n    ([f g] (fn [& args] (f (apply g args))))\n    ([f g & args]\n      (reduce my-f (my-f f g) args)))", "problem": 58, "user": "4eb2d0ae535d7eef3080734e"}, {"code": "(fn [& fns]\n  (reduce \n    (fn [a b]\n      (fn [& args]\n        (a (apply b args)))) fns))", "problem": 58, "user": "4eb1dd39535d7eef30807345"}, {"code": "(fn [& fs]\n  (reduce #(fn [& a] (%1 (apply %2 a))) fs))", "problem": 58, "user": "4e68b46c535d8ccf87e9fe87"}, {"code": "(fn [& fs]\n  (fn [& xs]\n    (first (reduce #(vector (apply %2 %1)) xs (reverse fs)))))", "problem": 58, "user": "4ebc08a8535dfed6da9c6d7c"}, {"code": "#(let [l (reverse %&)]\n  (fn [& a]\n   (loop [x (apply (first l) a), l (next l)]\n     (if l\n       (recur ((first l) x), (next l))\n       x))))", "problem": 58, "user": "4e82f85d535db62dc21a62ce"}, {"code": "(fn [ & fs]\n  (let [fs (reverse fs)]\n    (fn [& args]\n      (loop [ret (apply (first fs) args) fs (next fs)]\n        (if fs\n          (recur ((first fs) ret) (next fs))\n          ret) ))))", "problem": 58, "user": "4ebe766d535dfed6da9c6d94"}, {"code": "(fn co\n  ([] identity)\n  ([f] f)\n  ([f g] \n     (fn \n       ([] (f (g)))\n       ([x] (f (g x)))\n       ([x y] (f (g x y)))\n       ([x y z] (f (g x y z)))\n       ([x y z & args] (f (apply g x y z args)))))\n  ([f g h] \n     (fn \n       ([] (f (g (h))))\n       ([x] (f (g (h x))))\n       ([x y] (f (g (h x y))))\n       ([x y z] (f (g (h x y z))))\n       ([x y z & args] (f (g (apply h x y z args))))))\n  ([f1 f2 f3 & fs]\n    (let [fs (reverse (list* f1 f2 f3 fs))]\n      (fn [& args]\n        (loop [ret (apply (first fs) args) fs (next fs)]\n          (if fs\n            (recur ((first fs) ret) (next fs))\n            ret))))))", "problem": 58, "user": "4ea85846535d7eef308072f9"}, {"code": "(fn [& fns]\n    (fn ff [& args]\n      (letfn [(yy [f a]\n                (if (= 1 (count f))\n                  (apply (first f) a)\n                  ((first f) (yy (rest f) a))))]\n        (yy fns args))))", "problem": 58, "user": "4e842ebb535db62dc21a62df"}, {"code": "(fn [& fs]\n  (let [fs (reverse fs)]\n    (fn [& ps]\n      (loop [r (apply (first fs) ps) fs (next fs)]\n        (if fs\n          (recur ((first fs) r) (next fs))\n          r)))))", "problem": 58, "user": "4dbdc9da535d020aff1edf4c"}, {"code": "(fn [& f] (fn [& args] \n  (loop [fs (rest (reverse f)) fargs (apply (last f) args)]\n    (if (nil? (first fs)) fargs\n    (recur (rest fs) ((first fs) fargs))))))", "problem": 58, "user": "4ea9b80c535d7eef30807306"}, {"code": "(partial\n(fn [result & fs]\n  (if (not (seq fs))\n    result\n    (recur\n      (fn [& args] \n        (result (apply (first fs) args)))\n      (rest fs))))\nidentity)", "problem": 58, "user": "4ec12577535dfed6da9c6da8"}, {"code": "(fn cmp\r\n    ([a b]\r\n    (fn\r\n      ([c1](a (b c1)))\r\n      ([c1 c2](a (b c1 c2)))))\r\n    ([a b c]\r\n      (fn\r\n        ([c1] (a (b (c c1))))\r\n        ([c1 c2] (a (b (c c1 c2))))\r\n        ([c1 c2 c3 & args] (a (b(apply c c1 c2 c3 args)))))))", "problem": 58, "user": "4e9def6b535dbda64a6f6b8f"}, {"code": "(fn my-comp [& funcs]\n  (reduce\n    (fn [func1 func2]\n      (fn [& args] (func1 (apply func2 args))))\n    funcs))", "problem": 58, "user": "4ec2fe3f535dcc7ae8597d4f"}, {"code": "(fn [& fns]\n  (let [new-fns (reverse fns)]\n    (fn [& args]\n      (reduce\n        (fn [a f] (f a))\n          (apply (first new-fns) args)\n          (rest new-fns)))))", "problem": 58, "user": "4ec34578535dcc7ae8597d51"}, {"code": "(fn ([f1 f2] (fn [& args] (f1 (apply f2 args))))\n  ([f1 f2 f3] (fn [& args] (f1 (f2 (apply f3 args))))))", "problem": 58, "user": "4ea0c284535d7eef308072ad"}, {"code": "(fn fc [& fs]\n (fn c [& params]\n   (loop [fns (butlast fs) acc (apply (last fs) params)]\n     (if (empty? fns) acc (recur (butlast fns) ((last fns) acc))))))", "problem": 58, "user": "4ea1ecfa535d7eef308072bb"}, {"code": "(fn [& l] (fn [& z] (reduce #(%2 %) (apply (last l) z) (rest (reverse l)))))", "problem": 58, "user": "4ec0c7ba535dfed6da9c6da4"}, {"code": "(fn my-comp [& fs]\n  (let [fs (reverse fs)]\n    (fn [& args]\n      (loop [ret (apply (first fs) args)\n             fs  (next fs)]\n        (if fs\n          (recur ((first fs) ret) (next fs))\n          ret)))))", "problem": 58, "user": "4e7263a1535d5021c1a8965f"}, {"code": "(fn s [& fs] (fn [& x] (reduce (fn [r f] (f r)) (apply (last fs) x )(rest (reverse fs)))))", "problem": 58, "user": "4eb2eae5535d7eef30807351"}, {"code": "(fn  [& col]\n  (fn [& params]\n  (loop [flist (rest (reverse col))  newparams (apply (first (reverse col)) params) ]\n      (if (empty? flist)\n          newparams\n          (recur (rest flist) ((first flist )  newparams) )\n       )\n\n  )))", "problem": 58, "user": "4ec5bec6535d6d7199dd36b3"}, {"code": "(fn x-comp [& args]\r\n  (fn [& call-args]\r\n    (reduce #(%2 %1) (apply (last args) call-args) (next (reverse args)))))", "problem": 58, "user": "4eccb190535d23f0362276fe"}, {"code": "(fn [& fs] \n  (fn [& s] \n    (loop [[h & t] (reverse fs), r s] (if h (recur t [(apply h r)]) (first r)))))", "problem": 58, "user": "4eabb245535d7eef30807319"}, {"code": "(fn [& fs]\n  (fn [& xs]\n    (first (reduce #(vector (apply %2 %1)) xs (reverse fs)))))", "problem": 58, "user": "4eb51942535d7eef30807365"}, {"code": "(fn [& funcs]\n  (reduce\n    #(fn [& args] (%1 (apply %2 args)))\n      funcs))", "problem": 58, "user": "4ec60863535d6d7199dd36bf"}, {"code": "(fn [& fs]\n  (fn [& args]\n    (loop [result (apply (first (reverse fs)) args) fseq (next (reverse fs))]\n      (if fseq (recur ((first fseq) result) (next fseq)) result))))", "problem": 58, "user": "4e9519b4535dbda64a6f6b2d"}, {"code": "#(fn [& c] \n    (letfn [(e [[f & fs]] (if fs (f (e fs)) (apply f c)))]\n      (e %&)))", "problem": 58, "user": "4ec74de3535d6d7199dd36df"}, {"code": "(fn [& fs]\n  (let [rfs (reverse fs)]\n    (fn [& xs]\n      (reduce #(%2 %) (apply (first rfs) xs) (rest rfs)))))", "problem": 58, "user": "4ed06ea6535d44c135fd68c4"}, {"code": "(fn my-comp [& fs]\n  (let [fs (reverse fs)]\n    (fn [& args]\n      (loop [[f & fs] fs, ret (apply f args)]\n        (if (empty? fs)\n          ret\n          (recur fs ((first fs) ret)))))))", "problem": 58, "user": "4ed188c8535d44c135fd68cf"}, {"code": "(fn [& f]\n    (fn [& a]\n      (first\n       (reduce #(vec [(apply %2 %1)]) a (reverse f)))))", "problem": 58, "user": "4e6f578c535d5021c1a8961b"}, {"code": "(fn [& fns]\n   (reduce (fn [acc f] (fn [& x] (acc (apply f x)))) identity fns))", "problem": 58, "user": "4eb0a757535d7eef3080733d"}, {"code": "(fn [& fs] (reduce #(fn [& x] (% (apply %2 x))) fs))", "problem": 58, "user": "4ec07699535dfed6da9c6da2"}, {"code": "(fn [& fs]\r\n  (fn f [& a]\r\n    ((fn walk [x]\r\n       (if (empty? (rest x))\r\n         (apply (first x) a)\r\n         ((first x) (walk (rest x))))) fs)))", "problem": 58, "user": "4ecbb249535df97575fdabdf"}, {"code": "(fn [ & f]\n  (fn [ & a]\n\t\t(first (reduce #(list (apply %2 %)) a (reverse f)))))", "problem": 58, "user": "4ec16c21535dfed6da9c6dac"}, {"code": "(fn [& fs]\n  (fn [& l] (first (reduce #(list (apply %2 %)) l (reverse fs)))))", "problem": 58, "user": "4ed2b168535d44c135fd68dd"}, {"code": "(fn [& f] (fn [& a] (reduce #(%2 %) (apply (last f) a) (reverse (butlast f)))))", "problem": 58, "user": "4e1350af535d04ed9115e7d8"}, {"code": "(fn my-comp [& funcs]\n  (let [rf (reverse funcs)]\n    (fn [& args]\n      (let [fv (apply (first rf) args)]\n        ((fn f [v funcs]\n           (if (seq funcs)\n             (recur ((first funcs) v) (rest funcs))\n             v))\n           fv (rest rf))))))", "problem": 58, "user": "4ec75077535d6d7199dd36e0"}, {"code": "(fn [& args]\n  (let [fst (first (reverse args))\n        fs (rest (reverse args))]\n  (reduce (fn [ret f]\n              (fn [& x] (f (apply ret x))))\n          (fn [& x] (apply fst x))\n          fs)))", "problem": 58, "user": "4ec21058535dfed6da9c6dba"}, {"code": "(fn\n  ([] identity)\n  ([f] f)\n  ([f1 f2]\n     (fn\n       ([] (f1 (f2)))\n       ([a] (f1 (f2 a)))\n       ([a b] (f1 (f2 a b)))\n       ([a b c] (f1 (f2 a b c)))\n       ([a b c d] (f1 (f2 a b c d)))))\n  ([f1 f2 f3]\n     (fn\n       ([] (f1 (f2 (f3))))\n       ([a] (f1 (f2 (f3 a))))\n       ([a b] (f1 (f2 (f3 a b))))\n       ([a b c] (f1 (f2 (f3 a b c))))\n       ([a b c d] (f1 (f2 (f3 a b c d)))))))", "problem": 58, "user": "4e59b02c535d8a8b8723a2a2"}, {"code": "(fn [& fns-]\n  (fn [& args]\n    (loop [fns (rest (reverse fns-)) ret (apply (last fns-) args)]\n      (if (empty? fns)\n        ret\n        (recur (rest fns) ((first fns) ret))))))", "problem": 58, "user": "4e89ff3d535d3e98b802328a"}, {"code": "(fn [& fns]\n          (let [fs (reverse fns)]\n            (fn [& args]\n              (loop [result (apply (first fs) args)\n                     fs (rest fs)]\n                (if (seq fs)\n                  (recur ((first fs) result) (next fs))\n                  result)))))\n; Mine turned out to be very similar to the actual implementation of comp\n; But as per usual, chouser's solution is hard to beat:\n;   (fn c [a & r] (if r #(a (apply (apply c r) %&)) a))", "problem": 58, "user": "4ebb20c0535dfed6da9c6d6f"}, {"code": "(fn mycomp ([f] f) ([f & fs] (fn [& args] (f (apply (apply mycomp fs) args)))))", "problem": 58, "user": "4ed94d69535d10e5ff6f5303"}, {"code": "#(reduce (fn [a b] (fn [& r] (a (apply b r)))) %&)", "problem": 58, "user": "4ed69ea4535d10e5ff6f52e3"}, {"code": "(fn new-comp [& fs] \n    (letfn [(restdo [f margs]\n      (if (= '() f)\n             (first margs)\n             (restdo (rest f) [(apply (first f) margs)])))\n      (firstdo [& margs]\n            (restdo (reverse fs) margs))]\n    firstdo))", "problem": 58, "user": "4ea7999e535d7eef308072ee"}, {"code": "(fn [& f] (reduce #(fn [& x] (% (apply %2 x))) f))", "problem": 58, "user": "4e65027c535d8ccf87e9fe6e"}, {"code": "(fn [& fns] \n  (let [[f & fs] (reverse fns)]\n    (fn [& a]\n      (reduce #(%2 %1) (apply f a) fs))))", "problem": 58, "user": "4ed0e139535d44c135fd68c7"}, {"code": "(fn [& fs]\n  (fn [& args]\n    (reduce #(%2 %1) (apply (last fs) args) (rest (reverse fs)))))", "problem": 58, "user": "4edab806535d10e5ff6f5311"}, {"code": "(fn [& fs]\n  (fn [& args]\n    (first (reduce #(list (apply %2 %1)) args (reverse fs)))))", "problem": 58, "user": "4eb9ce75535dfed6da9c6d5e"}, {"code": "(fn [& r] (fn [& s] (loop [funcs (rest (reverse r))\n                                      res (apply (last r) s)]\n                                 (if (empty? funcs)\n                                   res\n                                   (recur\n                                    (rest funcs) ((first funcs) res))))))", "problem": 58, "user": "4ebef65e535dfed6da9c6d9b"}, {"code": "(fn c [f & fs] (fn [& a] (if (seq fs) (f (apply (apply c fs) a)) (apply f a))))", "problem": 58, "user": "4ede8789535d10e5ff6f5337"}, {"code": "(fn [& fns]\n  (reduce (fn [c f]\n            (fn [& args]\n              (c (apply f args))))\n          identity\n          fns))", "problem": 58, "user": "4ede8e1d535d10e5ff6f5339"}, {"code": "(fn [& fns]\n  (reduce (fn [f g]\n            (fn [& args] (f (apply g args))))\n          fns))", "problem": 58, "user": "4ee3b586535d10e5ff6f5371"}, {"code": "(fn\n  ([f g]\n    (fn [& args] (f (apply g args))))\n  ([f g h]\n    (fn [& args] (f (g (apply h args))))))", "problem": 58, "user": "4eddc5f4535d10e5ff6f532c"}, {"code": "(fn [& x]\n  (let [fns (reverse x)]\n    (fn [& args]\n      (loop [retval (apply (first fns) args) fns (next fns)]\n        (if fns\n          (recur ((first fns) retval) (next fns))\n          retval)))))", "problem": 58, "user": "4ec5cdb0535d6d7199dd36b8"}, {"code": "(fn [& a] (fn [& x] (reduce #(%2 %1) (apply (last a) x) (reverse (butlast a)))))", "problem": 58, "user": "4eb13d60535d7eef3080733f"}, {"code": "(fn a [f & r]\n  (if r\n    #(f (apply (apply a r) %&))\n    f\n  )\n)", "problem": 58, "user": "4ee67364535d93acb0a6685f"}, {"code": "(fn ;only works for 2 or 3 args :p\n  ([f g] #(f (apply g %&))) \n  ([f g h] #(f (g (apply h %&)))))", "problem": 58, "user": "4ee7ef87535d93acb0a66872"}, {"code": "(fn apply_fn[& funcs] \n  (let [fun (reverse funcs)]\n  (fn [& args]\n        (loop [ret (apply (first fun) args) fun (next fun)]\n          (if fun\n            (recur ((first fun) ret) (next fun))\n            ret)))))", "problem": 58, "user": "4ee8092f535d93acb0a66875"}, {"code": "(fn [ & fs ]\n  #(first (reduce \n      (fn [v f] [(apply f v)]) \n      %& \n      (reverse fs))))", "problem": 58, "user": "4ee82223535d93acb0a66877"}, {"code": "(fn comb [f & fs]\n   (fn [x & xs] (let [arglist (conj xs x)]\n       (if (nil? fs) \n           (apply f arglist)\n           (f (apply (apply comb fs) arglist))))))", "problem": 58, "user": "4ec28d86535dfed6da9c6dbc"}, {"code": "(fn [& in-fns]\n     (fn [& x]\n       (loop [fns    (reverse in-fns)\n              result x]\n         (if (empty? fns)\n           (first result)\n           (recur (rest fns) [(apply (first fns) result)])))))", "problem": 58, "user": "4ee7fe83535d93acb0a66874"}, {"code": "(fn [ & functions] \n     (fn [ & args]\n       (let [functions_reverse (reverse functions)]\n       (reduce (fn a [intermediate fun] (fun intermediate)) (apply (first functions_reverse) args) (rest functions_reverse)))))", "problem": 58, "user": "4e8b98fc535d65386fec2124"}, {"code": "(fn create-func [& funcs]\n  (fn [& arg] (first (reduce #(vector (apply %2 %)) arg (reverse funcs))))\n)", "problem": 58, "user": "4e9de526535dbda64a6f6b8e"}, {"code": "(fn [& fnlist]\n  (let [rfnlist (reverse fnlist)]\n    (fn [& args]\n      (reduce #(%2 %)\n        (apply (first rfnlist) args)\n        (next rfnlist)))))", "problem": 58, "user": "4eb2e6ca535d7eef3080734f"}, {"code": "(fn [& fs] (fn [& x] (let [lf (last fs), init (if (next x) (apply lf x) (lf (first x))) ]  (reduce (fn [r f] (f r)) init (reverse (drop-last fs))) )) )", "problem": 58, "user": "4ee7d177535d93acb0a6686f"}, {"code": "(fn F [& l]\n  (if-let [f (last l)]\n    #((apply F (butlast l)) (apply f %&))\n    identity))", "problem": 58, "user": "4ee82539535d93acb0a66878"}, {"code": "(fn [& f]\n  ( fn [& x] \n      (first ( reduce #(list (apply %2 %1)) x  (reverse f)))))", "problem": 58, "user": "4edf5dc6535d10e5ff6f5340"}, {"code": "(fn \n  ([f g]\n    #(f (apply g %&)))\n  ([f g h]\n    #(f (g (apply h %&)))))", "problem": 58, "user": "4e6ebd4a535d5021c1a89610"}, {"code": "(fn cc [& fs]\n  (let [[f & fs] (reverse fs)]\n  (fn [& args]\n     (loop [fs fs arg (apply f args)]\n       (if (seq fs)\n         (recur (rest fs) ((first fs) arg))\n         arg)))))", "problem": 58, "user": "4ee88269535d93acb0a6687f"}, {"code": "(fn [& fs]\n    (let [[lf & lfs] (reverse fs)]\n      (fn [& args]\n        (reduce #(%2 %1) (apply lf args) lfs))))", "problem": 58, "user": "4e6a0667535d8ccf87e9fe9e"}, {"code": "(fn \n  ([f g] (fn [& args] (f (apply g args))))\n  ([f g h] (fn [& args] (f (g (apply h args))))))", "problem": 58, "user": "4ee6400c535d93acb0a6685b"}, {"code": "(fn func-comp\n  [& coll]\n  (let [f1 (first (reverse coll))\n        fs (rest (reverse coll))]\n    (fn [& args]\n      (reduce #(%2 %1)\n              (apply f1 args) fs))))", "problem": 58, "user": "4e3bcccd535deb9a81d77f56"}, {"code": "(fn [& fns]\n    (fn [& args]\n      (first (reduce (fn [args fn] [(apply fn args)]) args (reverse fns)))))", "problem": 58, "user": "4ec5a5f9535d6d7199dd36ad"}, {"code": "(fn [& f] (reduce #(fn [& a] (% (apply %2 a))) f))", "problem": 58, "user": "4ef2d243535dced4c769f221"}, {"code": "(fn mycomp [& fs]\n  (let [fs (reverse fs)]\n    (fn [& args]\n      (loop [res (apply (first fs) args) fs (next fs)]\n         (if fs\n             (recur ((first fs) res) (next fs))\n             res)))))", "problem": 58, "user": "4ef0a38e535dced4c769f20b"}, {"code": "(fn [& s]\n  #(reduce (fn [c f] (f c))\n           (apply (last s) %&)\n           (rest (reverse s))))", "problem": 58, "user": "4ef49c2c535dced4c769f238"}, {"code": "(fn [& fns]\n  (fn [& args]\n    (first\n      (reduce\n        #(vector (apply %2 %1))\n        args\n        (reverse fns)))))", "problem": 58, "user": "4edecdae535d10e5ff6f533c"}, {"code": "(fn [& f] (reduce #(fn [& a] (% (apply %2 a))) f))", "problem": 58, "user": "4ef77c82535dced4c769f253"}, {"code": "(fn [& f] (fn [& s] (first (reduce #(list (apply %2 %)) s (reverse f)))))", "problem": 58, "user": "4eecdd66535d93acb0a668b9"}, {"code": "(fn [& fns]\n    (fn [& args]\n      (reduce (fn [acc f] (f acc)) (apply (last fns) args) (rest (reverse fns)))))", "problem": 58, "user": "4ed292ac535d44c135fd68d9"}, {"code": "(fn [& fns]\n      (fn [& args]\n\t\t(reduce (fn [v f] (f v))\n\t\t\t(apply (last fns) args)\n\t\t\t(rest (reverse fns)))))", "problem": 58, "user": "4ec5d62c535d6d7199dd36ba"}, {"code": "(fn [& fs]\n  (reduce #(fn [& args] (%2 (apply % args)))\n          (reverse fs)))", "problem": 58, "user": "4e599577535d8a8b8723a29f"}, {"code": "(fn [& fs]\n  (fn [& args]\n    (first (reduce #(vector (apply %2 %)) args (reverse fs)))))", "problem": 58, "user": "4ec5aa1f535d6d7199dd36b0"}, {"code": "(fn func-list [& fs]\n  (cond (empty? fs) (fn [x] x)\n        (empty? (rest fs)) (first fs)\n        true (fn [& args]\n               ((fn rec-func [xs x]\n                 (cond (empty? xs) x\n                       true (rec-func (butlast xs) ((last xs) x))))\n               (butlast fs) (apply (last fs) args)))))", "problem": 58, "user": "4ef6f5ea535dced4c769f250"}, {"code": "(fn [ & fns]\n  (let [fs (reverse fns)]\n    (fn [& args]\n     (loop [rt (apply (first fs) args) fs (next fs)]\n        (if fs\n          (recur ((first fs) rt) (next fs))\n           rt)))))", "problem": 58, "user": "4ef992c8535dced4c769f268"}, {"code": "(fn [& fs]\n  (fn [& args]\n      (reduce (fn [acc f] (f acc))\n              (apply (last fs) args)\n              (rest (reverse fs)))))", "problem": 58, "user": "4dbb1126535d1e037afb21b3"}, {"code": "(fn [& fs]\n  (fn [& xs] (first (reduce #(list (apply %2 %)) xs (reverse fs)))))", "problem": 58, "user": "4ef41f26535dced4c769f230"}, {"code": "(fn mycomp [f & fs]\n  (if-not fs f\n    (fn [& args] \n      (f (apply (apply mycomp fs) args)))))", "problem": 58, "user": "4ee67d74535d93acb0a66861"}, {"code": "(fn [& fs] (fn [& args] (reduce #(%2 %1) (apply (last fs) args) (rest (reverse fs)))))", "problem": 58, "user": "4effb663535dcb61093f6a2e"}, {"code": "(fn [& fs]\r\n    (let [rfs (reverse fs)]\r\n      (fn [& args]\r\n        (loop [[f & fss] (rest rfs), r (apply (first rfs) args)]\r\n          (println f r)\r\n          (if (nil? f)\r\n            r\r\n            (recur fss (f r)))))))", "problem": 58, "user": "4ef1ee67535dced4c769f219"}, {"code": "(fn [& fns]\n  (let [[ff & f] (reverse fns)]\n    (fn [& args]\n        (reduce\n          (fn [a f] (f a))\n          (apply ff args)\n          f))))", "problem": 58, "user": "4eb30868535d7eef30807355"}, {"code": "(fn\n  ([f g] \n     (fn \n       ([x] (f (g x)))))\n  ([f g h] \n     (fn \n       ([x y] (f (g (h x y))))\n       ([x y z & args] (f (g (apply h x y z args)))))))", "problem": 58, "user": "4e57d1e2535d8a8b8723a289"}, {"code": "(fn [& fns]\n  (let [fns (reverse fns)]\n    (fn [& args]\n      (loop [ret (apply (first fns) args) \n             fns (next fns)]\n        (if fns\n          (recur ((first fns) ret) (next fns))\n          ret)))))", "problem": 58, "user": "4db8f6c4535d1e037afb219e"}, {"code": "(fn [& fns]\n  (let [snf (reverse fns)\n        fst (first snf)\n        rst (rest snf)]\n    (fn [& args]\n      (reduce #(%2 %1) (apply fst args) rst))))", "problem": 58, "user": "4ef0eaef535dced4c769f211"}, {"code": "(fn [& fs]\n  (fn [& xs]\n    (loop [fs (reverse fs) x xs]\n      (if (empty? fs) (first x) (recur (rest fs) (list(apply (first fs) x)))))))", "problem": 58, "user": "4f03d0fe535dcb61093f6b6d"}, {"code": "(fn [& funs] (fn [& argz] (reduce (fn [r f] (f r))\n                                  (apply (first (reverse funs)) argz)\n                                  (rest (reverse funs)))))", "problem": 58, "user": "4ee88bfb535d93acb0a66881"}, {"code": "(fn [& f]\n  (let [r (reverse f) m #(list (apply %2 %))]\n    #(first (reduce m %& r))))", "problem": 58, "user": "4f031eac535dcb61093f6a67"}, {"code": "(fn [& fs]\n  (let [fs (reverse fs)]\n    (fn [& args]\n      (loop [ret (apply (first fs) args) fs (next fs)]\n        (if fs \n          (recur ((first fs) ret) (next fs))\n          ret)))))", "problem": 58, "user": "4ef4c1ff535dced4c769f23e"}, {"code": "(fn my-comp\r\n  [& fxns]\r\n\t(fn [& y] (reduce #(%2 %) (cons (apply (last fxns) y) (rest (reverse fxns))))))", "problem": 58, "user": "4ecf1f51535d1f5ad70dba3a"}, {"code": "(fn [& fs]\n  (reduce (fn [f g] (fn [& x] (f (apply g x)))) fs))", "problem": 58, "user": "4f04d011535dcb61093f6be5"}, {"code": "(fn [& fs]\n  (let [f (last fs)\n        gs (butlast fs)]\n    (fn [& xs] \n      (reduce #(%2 %1) (apply f xs) (reverse gs)))))", "problem": 58, "user": "4ee9d697535d93acb0a66895"}, {"code": "(fn [& f] (reduce #(fn [& a] (% (apply %2 a))) f))", "problem": 58, "user": "4f03857e535dcb61093f6b0d"}, {"code": "(fn [& fs]\n  (let [fs (reverse fs)]\n  (fn [& xs]\n    (loop [rfs (rest fs)\n           x (apply (first fs) xs)]\n      (if (seq rfs)\n        (recur (rest rfs) ((first rfs) x))\n        x)))))", "problem": 58, "user": "4f043ed1535dcb61093f6bb4"}, {"code": "(fn [& fs] (fn [& args] (reduce #(%2 %1) (apply (last fs) args) (rest (reverse fs)))))", "problem": 58, "user": "4f052eaf535dcb61093f6bf3"}, {"code": "(fn comps [f & fns]\n  (fn [& args]\n    (if (empty? fns)\n      (apply f args)\n      (f (apply (apply comps fns) args))\n      )    \n    )\n  )", "problem": 58, "user": "4ecfa05c535d44c135fd68b9"}, {"code": "(fn [& x] #(\n  last (reduce (fn [v f] [(apply f v)]) %& (reverse x))\n  ))", "problem": 58, "user": "4f01c938535dcb61093f6a39"}, {"code": "(fn [& funs] \r\n  (fn [& x] \r\n    (loop [res (apply (last funs) x) fns (drop-last funs)] \r\n      (if (empty? fns) res (recur ((last fns) res) (drop-last fns))))))", "problem": 58, "user": "4f03822f535dcb61093f6b03"}, {"code": "(fn uno* [& funs]\n (fn comp* [& v]     \n  (loop [fs (reverse funs)\n         res v]     \n     (println (str \"funciones\" fs (seq? fs)))\n     (println (str \"argumentos: \" res))\n    (if (seq? fs) \n      (recur (next fs) \n          (list (apply (first fs) res)))\n      (let [x (first res)]\n       (if (list? x) (vec x)\n           x))))))", "problem": 58, "user": "4f04a06d535dcb61093f6bd9"}, {"code": "(fn cp [& fs]\n  (if (empty? (rest fs)) (fn [& as] (apply (first fs) as))\n    (fn [& as]\n        ((first fs) (apply (apply cp (rest fs)) as)))))", "problem": 58, "user": "4ee82ce9535d93acb0a6687a"}, {"code": "(fn [& functions] (fn [& args] (first (reduce #(vector (apply %2 %)) args (reverse functions)))))", "problem": 58, "user": "4f04b66b535dcb61093f6bdd"}, {"code": "(fn [& fs]\n         (let [fs (reverse fs)]\n           (fn [& a]\n             (reduce #(%2 %) (apply (first fs) a) (rest fs)))))", "problem": 58, "user": "4f0664bd535dcb61093f6c0f"}, {"code": "(fn [& fs]\n  (fn [& args]\n    (reduce (fn [c1 f] (f c1))\n      (apply (last fs) args)\n      (rest (reverse fs)))\n    ))", "problem": 58, "user": "4dc1e1e4535d020aff1edf90"}, {"code": "(fn func-comp [& caller-funcs]\r\n    (fn f [& x]\r\n      (loop [funcs (reverse caller-funcs) results x]\r\n        (if (empty? funcs)\r\n          (first results)\r\n          ;(apply (first funcs) results))))))\r\n          (recur (rest funcs) (list (apply (first funcs) results)))))))", "problem": 58, "user": "4f039524535dcb61093f6b2c"}, {"code": "(fn prob-0058\n  [& in-funs]\n  (let [rfuns (reverse in-funs)]\n    (fn [& args]\n      (loop [ans (apply (first rfuns) args)\n             rfs (next rfuns)]\n        (if rfs\n          (recur ((first rfs) ans) (next rfs))\n          ans)))))", "problem": 58, "user": "4f047c07535dcb61093f6bcd"}, {"code": "#(reduce (fn [g f] (fn [& args] (g (apply f args)))) %&)", "problem": 58, "user": "4f06dcad535dcb61093f6c16"}, {"code": "(fn c [hd & rst]\n  (cond\n   rst #(hd (apply (apply c rst) %&))\n   hd hd))", "problem": 58, "user": "4f0a4e7e535d0136e6c222f4"}, {"code": "#(partial (fn [h & x]\n            (if h\n              (recur (butlast h)\n                     (vector (apply (last h) x)))\n              (last x)))             \n          %&)", "problem": 58, "user": "4efb2fd7535dced4c769f274"}, {"code": "(fn [& funcs]\n  (fn [& s]\n    (if (= (count s) 1)\n      (reduce (fn [a e] (e a)) (first s) (reverse funcs))\n      (reduce (fn [a e] (e a)) (apply (first (reverse funcs)) s) (rest (reverse funcs))))))", "problem": 58, "user": "4f01ff83535dcb61093f6a3a"}, {"code": "(fn [& fs]\n  (let [fns (reverse fs) f1 (first fns) rst (rest fns)]\n    (fn [& args]\n        (reduce \n            (fn [v f] (f v))\n            (apply f1 args)\n            rst))))", "problem": 58, "user": "4f0b2028535d0136e6c222ff"}, {"code": "(fn\n  ([f g] (fn [v] (-> v g f)))\n  ([f g h] (fn [& v] (f (g (apply h v))))))", "problem": 58, "user": "4ee9ddb8535d93acb0a66896"}, {"code": "(fn [& s]\n  (let [x (reverse s) f (first x) r (rest x)]\n    (fn [& args] (reduce #(%2 %1) (apply f args) r))))", "problem": 58, "user": "4f050dec535dcb61093f6bef"}, {"code": "(fn [& fs]\n  #(first\n    (reduce (fn [res f]\n              [(apply f res)]) %& (reverse fs))))", "problem": 58, "user": "4f036d9b535dcb61093f6ac1"}, {"code": "#(fn [& a] (loop [f (reverse %&) r a]\n  (if (empty? f) (first r)\n    (recur (rest f) (list (apply (first f) r))))))", "problem": 58, "user": "4f0ce26c535d0136e6c22312"}, {"code": "(fn [& fns]\n  (fn [& args]\n    (let [fs (reverse fns)]\n      (loop [ret (apply (first fs) args)\n             nfs (next fs)]\n         (if nfs (recur ((first nfs) ret) (next nfs))\n             ret)))))", "problem": 58, "user": "4db87b3f535d1e037afb2196"}, {"code": "(fn myc\n  ([a] a)\n  ([a & rst]\n     (fn [ & args ]\n       (a (apply (apply myc rst) args)))))", "problem": 58, "user": "4f03154a535dcb61093f6a58"}, {"code": "(fn [& s] (reduce #(fn [& x] (% (apply %2 x))) identity s))", "problem": 58, "user": "4e1f9bb5535d04ed9115e80d"}, {"code": "(fn [ & ffs]\n  (let [fs (reverse ffs)\n        f (first fs)\n        r (rest fs)]\n    (fn [ & args]\n      (loop [v (apply f args) rr r]\n        (if (empty? rr) v\n          (recur ((first rr) v) (rest rr)))))))", "problem": 58, "user": "4f03ac2d535dcb61093f6b4a"}, {"code": "(fn mc [& fns]\n  (fn [& args]\n    (let [inner (fn me [[hd & tl]]\n                  (if tl\n                    (hd (me tl))\n                    (apply hd args)))]\n      (inner fns))))", "problem": 58, "user": "4f0ef874535d0136e6c22328"}, {"code": "(fn [& ff]\n  (fn [& as]\n    (let [[f & fs] (reverse ff)]\n      (reduce #(%2 %) (apply f as) fs))))", "problem": 58, "user": "4eeaf88f535d93acb0a668a3"}, {"code": "(fn compose [f & r]\n  (fn [& x]\n    (letfn [(comp-maker [r]\n      (cond\n        (empty? r) x\n        (empty? (rest r)) (apply (first r) x)\n        :else ((first r) (comp-maker (rest r)))))]\n      (f (comp-maker r)))))", "problem": 58, "user": "4ddb339c535d02782fcbe9f9"}, {"code": "(fn comp*\n  [& fns]\n  (fn [& args]\n    (let [fns* (reverse fns)]\n      (loop [acc (apply (first fns*) args) fns* (rest fns*)]\n        (if (seq fns*)\n          (recur ((first fns*) acc) (rest fns*))\n          acc)))))", "problem": 58, "user": "4dda44f2535d02782fcbe9f1"}, {"code": "(fn c [f & fs]\n  (if fs\n    (fn [& a] (f (apply (apply c fs) a)))\n    (fn [& a] (apply f a))))", "problem": 58, "user": "4f0f174c535d0136e6c22330"}, {"code": "(fn [& fs] (let [fs (reverse fs)] (fn [& args]  \n           (loop [ret (apply (first fs) args) fs (next fs)]\n             (if fs\n                (recur ((first fs) ret) (next fs))\n                ret)))))", "problem": 58, "user": "4f0e995e535d0136e6c22326"}, {"code": "(fn my-comp\n    ([f & fs] (fn [& args]\n        (let [gs (reverse (list* f fs))]\n            (loop [ret (apply (first gs) args) gs (next gs)]\n                (if gs\n                    (recur ((first gs) ret) (next gs))\n                    ret))))))", "problem": 58, "user": "4f0660ee535dcb61093f6c0d"}, {"code": "(fn [& fs] (let [[x & xs] (reverse fs)]\r\n             #(reduce (fn [acc f] (f acc))\r\n                      (apply x %&)\r\n                      xs)))", "problem": 58, "user": "4ebcb8ff535dfed6da9c6d8a"}, {"code": "(fn [& f]\n  (fn [& a]\n    (first (reduce #(list (apply %2 %)) \n       a (reverse f)))))", "problem": 58, "user": "4f0446f9535dcb61093f6bb8"}, {"code": "(fn my-comp [& fns]                                                                                                                          \r\n    (fn [& args]                                                                                                                               \r\n      (let [[first-fn & rest-fns] (reverse fns)]                                                                                              \r\n        (reduce (fn [t e] (e t)) (apply first-fn args) rest-fns))))", "problem": 58, "user": "4f149e0f535d64f60314643d"}, {"code": "(fn \n  ([f] f)\n  ([f g] \n    (fn \n      ([x] (f (g x)))\n    ))\n  ([f g h] \n    (fn \n      ([x y] (f (g (h x y))))\n      ([x y z a] (f (g (h x y z a))))\n    )))", "problem": 58, "user": "4e8a0d5d535d3e98b802328e"}, {"code": "(fn [& funs] \n  (fn [& args]\n    (first (loop [inner_funs (reverse funs) inner_args args]\n      (if (empty? inner_funs) \n         inner_args\n         (recur (rest inner_funs) \n                (list (apply (first inner_funs) \n                       inner_args))))))))", "problem": 58, "user": "4f0d093b535d0136e6c22313"}, {"code": "(fn [& fns] (fn [& args] (first (reduce (fn [acc f] (list (apply f acc))) args (reverse fns)))))", "problem": 58, "user": "4f13047d535d64f60314642c"}, {"code": "(fn ([f1 f2] (fn [v] (f1 (f2 v))))\n      ([f1 f2 f3] \n     (fn ([v1 v2] (f1 (f2 (f3 v1 v2))))\n\t       ([v1 v2 & more] (f1 (f2 (apply f3 v1 v2 more)))))))", "problem": 58, "user": "4f066916535dcb61093f6c10"}, {"code": "(fn [& f]\n  (fn [& a]\n    (let [r (reverse f)] \n      (reduce #(%2 %) (apply (first r) a) (rest r)))))", "problem": 58, "user": "4ede361a535d10e5ff6f5332"}, {"code": "(fn my-comp\n               ([] identity)\n               ([x1] x1)\n               ([x1 & fns] (fn [& xs] (x1 (apply (apply my-comp fns) xs)))))", "problem": 58, "user": "4e48b61d535dc968683fc4be"}, {"code": "(fn topfoo [f & fs]\r\n          (fn [x & xs]\r\n            (let [args (conj xs x)]\r\n              (if (nil? fs)\r\n              (apply f args)\r\n              (f (apply (apply topfoo fs) args))))))", "problem": 58, "user": "4f11b078535d64f603146422"}, {"code": "#(let [funclist (reverse %&)]\n  (fn[& x](loop [funcs (rest funclist) original (apply (first funclist) x)]\n     (if (empty? funcs) original (recur (rest funcs) ((first funcs) original))))))", "problem": 58, "user": "4ed2dd98535d44c135fd68e2"}, {"code": "#(let [rfns (reverse %&)]\n  (fn [& args]\n    (loop [val (apply (first rfns) args)\n           rfns (next rfns)]\n      (if rfns\n        (recur ((first rfns) val) (next rfns))\n        val))))", "problem": 58, "user": "4ee4f4a9535d1385b2869d85"}, {"code": "(fn mycomp [& f]\n    (fn [& x]\n        (first (reduce #(vector (apply %2 %1)) x (reverse f)))))", "problem": 58, "user": "4f128865535d64f603146428"}, {"code": "(fn [& fs]\n  (fn [& x]\n    (let [fs (reverse fs)]\n      (loop [acc x f (first fs) fs (rest fs)]\n        (if (nil? f)\n          (first acc)\n          (recur (list (apply f acc)) (first fs) (rest fs)))))))", "problem": 58, "user": "4dafa380edd6309eace4d17c"}, {"code": "(fn [& xs] (fn [& ys] (reduce #(%2 %1) (apply (last xs) ys) (rest (reverse xs)))))", "problem": 58, "user": "4f1b92d1535d64f60314647b"}, {"code": "(fn [& s] (fn [& x]\n  (reduce #(%2 %1) (apply (last s) x) (rest (reverse s)))))", "problem": 58, "user": "4f1b0ab3535d64f603146474"}, {"code": "(fn [& args1] (fn [& args2] (loop [fs (reverse args1) i args2] (if (empty? fs) (first i) (recur (rest fs) (list (apply (first fs) i)))))))", "problem": 58, "user": "4f0e4ebd535d0136e6c22322"}, {"code": "(fn cmp [& fns]\n  (fn [& args]\n    (loop [out (apply (last fns) args)\n           fs (next (reverse fns))]\n      (if (nil? fs)\n        out\n        (recur ((first fs) out) (next fs))))))", "problem": 58, "user": "4f04f847535dcb61093f6beb"}, {"code": "(fn [& funcs]\n    (fn [& args]\n      (letfn [(build [funcs]\n                (if (= (count funcs) 1)\n                  (apply (last funcs) args)\n                  ((first funcs) (build (rest funcs)))))]\n        (build funcs))))", "problem": 58, "user": "4f16213f535d64f603146449"}, {"code": "(fn\n  ([f] f)\n  ([f g]\n    (fn\n      ([] (f (g)))\n      ([x] (f (g x)))\n      ([x y] (f (g x y)))\n      ([x y z] (f (g x y z)))\n      ([x y z w] (f (g x y z w)))))\n  ([f g h]\n    (fn\n      ([] (f (g (h))))\n      ([x] (f (g (h x))))\n      ([x y] (f (g (h x y))))\n      ([x y z] (f (g (h x y z))))\n      ([x y z w] (f (g (h x y z w))))))\n  )", "problem": 58, "user": "4f16d3fd535d64f60314644e"}, {"code": "(fn [& funs]\n  (let [[f & rfuns] (reverse funs)]\n    (fn [& args] \n      (reduce #(%2 %1)\n        (apply f args)\n        rfuns))))", "problem": 58, "user": "4f1de175535d64f60314648f"}, {"code": "(fn c [& fns]\n  (fn [& args]\n    (if (next fns)\n      ((first fns) (apply (apply c (next fns)) args))\n      (apply (first fns) args))))", "problem": 58, "user": "4f038355535dcb61093f6b04"}, {"code": "(fn compos\n  ([f] f)\n  ([f g]\n     (fn\n       ([] (f (g)))\n       ([x] (f (g x)))\n       ([x y] (f (g x y)))\n       ([x y z] (f (g x y z)))\n       ([x y z & args] (f (apply g x y z args)))))\n  ([f g h]\n     (fn\n       ([] (f (g (h))))\n       ([x] (f (g (h x))))\n       ([x y] (f (g (h x y))))\n       ([x y z] (f (g (h x y z))))\n       ([x y z & args] (f (g (apply h x y z args))))))\n  ([f1 f2 f3 & fs]\n    (let [fs (reverse (list* f1 f2 f3 fs))]\n      (fn [& args]\n        (loop [ret (apply (first fs) args) fs (next fs)]\n          (if fs\n            (recur ((first fs) ret) (next fs))\n            ret))))))", "problem": 58, "user": "4f048f67535dcb61093f6bd3"}, {"code": "(fn [& fns]\r\n  (fn [& params]\r\n    (loop [res (apply (last fns) params)\r\n           rem-fns (butlast fns)]\r\n      (if (empty? rem-fns)\r\n        res\r\n        (recur ((last rem-fns) res)\r\n               (butlast rem-fns))))))", "problem": 58, "user": "4eddcbbf535d10e5ff6f532d"}, {"code": "#(fn [& a] (loop [ret (apply (first (reverse %&)) a) fs (next (reverse %&))] (if fs (recur ((first fs) ret) (next fs)) ret)))", "problem": 58, "user": "4ef6e689535dced4c769f24f"}, {"code": ";(fn [& funcargs]\n;    (fn [& args]\n;     (loop [f (rest (reverse funcargs)),\n;            result (apply (last funcargs) args)]\n;       (if (seq f)\n;         (recur (rest f) ((first f) result))\n;         result))));\n\n\n(fn outer [f & fs]\n          (if fs\n            (fn [& x] (f (apply (apply outer fs) x)))\n            (fn [& xs] (apply f xs))))", "problem": 58, "user": "4ee26f01535d10e5ff6f5368"}, {"code": "(fn [& fns]\n  (let [fg (fn [f g] \n        (fn [& args] \n          (g (apply f args))))]\n    (reduce fg (reverse fns))))\n\n\n;(fn [& fns]\n;  (let [st (fn step [[f & fs] y ]\n;      (if fs\n;        (f (step fs y))\n;        (apply f y)))]\n;  (fn [& args]\n;    (st fns args))))\n\n\n;(fn \n;  ([f]\n;    f)\n;  ([f g]\n;    (fn [& args]\n;      (f (apply g args))))\n;  ([f g h]\n;    (fn [& args]\n;      (f (g (apply h args)))))\n;  ([f g h i]\n;    (fn [& args]\n;      (f (g (h (apply i args)))))))", "problem": 58, "user": "4f1c2a3a535d64f603146480"}, {"code": "(fn \n  ([f g] \n    (fn [& args] \n      (f (apply g args))))\n  ([f g h]\n    (fn [& args]\n      (f (g (apply h args))))))", "problem": 58, "user": "4f1fd734535d64f6031464a5"}, {"code": "(fn [& s] (reduce #(fn [& x] (% (apply %2 x))) s))", "problem": 58, "user": "4f08b15b535dcb61093f6c40"}, {"code": "(fn req [& args]\n    (if (empty? args)\n      identity\n      (fn [& p]\n        \n        ((apply req (drop-last args)) (apply (last args) p)))))", "problem": 58, "user": "4eb02674535d7eef30807338"}, {"code": "(fn [& fns]\n  (fn [& args]\n    (reduce #(%2 %) \n            (apply (last fns) args)\n            (rest (reverse fns)))))", "problem": 58, "user": "4ed30184535d44c135fd68e7"}, {"code": "(fn [& fs]\n  (fn [& x]\n    (loop [fs1 (reverse (butlast fs))\n           r (apply (last fs) x)]\n      (if (empty? fs1)\n        r\n        (recur (rest fs1) ((first fs1) r))))))", "problem": 58, "user": "4f251302e4b0d66497709ff0"}, {"code": "(fn  [& fs]\r\n    (let [fs (reverse (list* fs))]\r\n      (fn [& args]\r\n        (loop [ret (apply (first fs) args) fs (next fs)]\r\n          (if fs\r\n            (recur ((first fs) ret) (next fs))\r\n            ret)))))", "problem": 58, "user": "4e6cf521535de274dd8d818b"}, {"code": "(fn [& fns]\n  (fn [& xs]\n    (first (reduce (fn [a e] [(apply e a)]) xs (reverse fns)))))", "problem": 58, "user": "4f1b0008535d64f603146473"}, {"code": "(fn [& fs] (reduce (fn [f g] (fn [& h] (f (apply g h)))) fs))", "problem": 58, "user": "4dc1bd76535d020aff1edf8d"}, {"code": "(fn [& fs]\n  (fn [& args]\n    (let [[f1 & rest-fs] (reverse fs)\n          first-result   (apply f1 args)]\n      (reduce #(%2 %1) first-result rest-fs))))", "problem": 58, "user": "4daf36c2edd6309eace4d175"}, {"code": "(fn mycomp [f & funcs]\n  (if (empty? funcs)\n    (fn [& x] (apply f x))\n    (fn [& x] (f (apply (apply mycomp funcs) x)))))", "problem": 58, "user": "4f215350e4b0d66497709fd0"}, {"code": "(fn foo [method & others]\n  (if (empty? others) \n    method\n    (fn [& args] (method (apply (apply foo others) args)))))", "problem": 58, "user": "4f294c48e4b0d6649770a023"}, {"code": "(fn [& more]\r\n   (fn [& args]\r\n     (loop [fns (reverse more) res args]\r\n       (if (empty? fns) (first res)\r\n         (recur (rest fns) (list (apply (first fns) res)))))))", "problem": 58, "user": "4f29cdc8e4b0d6649770a033"}, {"code": "(fn [& more]\n    (loop [result nil i (dec (count more))]\n      (if (= i -1)\n        result\n        (recur\n         (if (nil? result)\n           (fn [& args]\n             (apply (nth more i) args)\n             )\n           (fn [& args] ((nth more i) (apply result args)) )\n           )\n         (dec i))\n        )\n      )\n    )", "problem": 58, "user": "4ea31da2535d7eef308072c1"}, {"code": "#( \n  (fn c [[f & r]] \n     (fn [& x] \n        (if (empty? r) \n            (apply f x) \n            (f (apply (c r) x)))))          \n  (vec %&)        \n)", "problem": 58, "user": "4f1d1d95535d64f603146488"}, {"code": "(fn r-fns [f & fs]\n  (fn [& args]\n  (cond\n\t  (nil? fs) (apply f args)\n\t  :default (f (apply (apply r-fns fs) args)))))", "problem": 58, "user": "4f1abbfb535d64f60314646e"}, {"code": "(fn [& fns]\n  (fn [& args]\n    (loop [acc (apply (last fns) args) fs (rest (reverse fns))]\n      (if fs\n        (recur ((first fs) acc) (next fs))\n         acc))))", "problem": 58, "user": "4f26d6d9e4b0d6649770a007"}, {"code": "(fn [& funcs]\n  (fn [& s]\n    (first\n     (reduce\n      (fn [result f]\n        (let [new-result \n              (apply f result)]\n          ;; put results in a single-item list, to satisfy apply\n          (list new-result)))\n      s\n      (reverse funcs)))))", "problem": 58, "user": "4f31519ae4b0d6649770a086"}, {"code": "(fn [& f]\n  (let [y (reverse f)]\n    (fn [& a]\n      (loop [r (apply (first y) a) y (next y)]\n        (if y\n          (recur ((first y) r) (next y))\n          r)))))", "problem": 58, "user": "4e5af45e535d8a8b8723a2b1"}, {"code": "(fn [& funs]\n  (fn [& args]\n    (let [fns (reverse funs)]\n      (reduce (fn [ret fun] (fun ret)) \n              (apply (first fns) args) \n              (rest fns)) )))", "problem": 58, "user": "4f2965ffe4b0d6649770a029"}, {"code": "(fn [x & xs]\n  (fn [& args]\n    ((fn step [[f & fs] a]\n       (if fs\n         (f (step fs a))\n         (apply f a)))\n     (cons x xs) args)))", "problem": 58, "user": "4f329974e4b0d6649770a093"}, {"code": "(fn [& f]\n  (fn [& args]\n    (let [fs (reverse f)]\n      (loop [r (apply (first fs) args) fs (rest fs)]\n        (if-not (empty? fs) (recur ((first fs) r) (rest fs)) r)))))", "problem": 58, "user": "4e7d1c22535db169f9c796c5"}, {"code": "(fn our-comp [& rest]\r\n  (let [our-comp-2 (fn [f g]\r\n                    (fn h [& more]\r\n                      (g (apply f more))))]\r\n  (reduce our-comp-2 (reverse rest))))", "problem": 58, "user": "4ef0f1a1535dced4c769f212"}, {"code": "(fn \n  ([x y]\n  (fn \n    [& args]\n    (x (apply y args))))\n  ([x y z]\n  (fn\n    [& args]\n    (x (y (apply z args))))))", "problem": 58, "user": "4f1d1299535d64f603146487"}, {"code": "(fn [& fs] \n  (fn [& a] \n    (let [rf (reverse fs)\n          [f & fs] rf]\n    (reduce (fn [r f] (f r)) (apply f a) fs))))", "problem": 58, "user": "4f32a7f1e4b0d6649770a095"}, {"code": "(fn [f & fs]\r\n  (fn [x & xs]\r\n    (let [ff (cons f fs)\r\n          xx (cons x xs)]\r\n      ((fn [[f & fs :as s] x]\r\n         (if (nil? s)\r\n           (first x)\r\n           (recur fs (list(apply f x))))) (reverse ff) xx))))", "problem": 58, "user": "4f359c7ee4b0e243712b1ec4"}, {"code": "(fn ([f g] (fn [c] (f (g c))))\n ([f g h] (fn [& cs] (f (g (apply h cs))))))", "problem": 58, "user": "4f3976aee4b0e243712b1eea"}, {"code": "(fn [ & fs]\n  (fn [ & args]\n    (reduce #(%2 %) (apply (last fs) args) (drop 1 (reverse fs)))))", "problem": 58, "user": "4f38d6bbe4b0e243712b1ee2"}, {"code": "(fn\n([] identity)\n([f] f)\n([f g]\n(fn\n([] (f (g)))\n([x] (f (g x)))\n([x y] (f (g x y)))\n([x y z] (f (g x y z)))\n([x y z & args] (f (apply g x y z args)))))\n([f g h]\n(fn\n([] (f (g (h))))\n([x] (f (g (h x))))\n([x y] (f (g (h x y))))\n([x y z] (f (g (h x y z))))\n([x y z & args] (f (g (apply h x y z args))))))\n([f1 f2 f3 & fs]\n(let [fs (reverse (list* f1 f2 f3 fs))]\n(fn [& args]\n(loop [ret (apply (first fs) args) fs (next fs)]\n(if fs\n(recur ((first fs) ret) (next fs))\nret))))))", "problem": 58, "user": "4f2aff4de4b0d6649770a044"}, {"code": "(fn fcomp [& more]\n  (let [back (reverse more)]\n    (fn [& y] \n      (loop [f (apply (first back) y) r (next back)]\n        (if r\n          (recur ((first r) f) (next r))\n          f)))))", "problem": 58, "user": "4f04d312535dcb61093f6be7"}, {"code": "(fn [& fs]\n           (fn [& c]\n               (first (reduce #(list (apply %2 %1)) c (reverse fs)))))", "problem": 58, "user": "4f34eb87e4b0e243712b1eba"}, {"code": "(fn [& fns]\n  (fn [& args]\n    (first\n      (reduce #(list (apply %2 %1))\n        args (reverse fns)))))", "problem": 58, "user": "4f28c979e4b0d6649770a01a"}, {"code": "(fn c3\n([f] f)\n([f g] (fn [& args] (f (apply g args))))\n([f g & hs] (let [h (apply c3 hs)]\n(fn [& args] (f (g (apply h args)))))))", "problem": 58, "user": "4f418eaee4b0d7d3c9f3fce9"}, {"code": "(fn composition [& fs]\n         (let [fs (reverse fs)]\n           (fn [& args]\n             (loop [ret (apply (first fs) args) fs (next fs)]\n               (if fs\n                 (recur ((first fs) ret) (next fs))\n                 ret)))))", "problem": 58, "user": "4f1bee08535d64f60314647e"}, {"code": "(fn [& fns] \n  (fn [& arg] \n    (first (reduce #(vector (apply %2 %1)) arg (reverse fns)))))", "problem": 58, "user": "4f0da4e4535d0136e6c22319"}, {"code": "(fn [& fs ]\n  (fn [& args]\n    (loop [ret (apply (last fs) args)\n           fs (butlast fs)]\n      (if fs\n        (recur ((last fs) ret) (butlast fs))\n        ret))))", "problem": 58, "user": "4f29eb2ae4b0d6649770a037"}, {"code": "(fn [ & funcs ]\r\n  (reduce\r\n    (fn [f g]\r\n      (fn [ & args ]\r\n        (f (apply g args))))\r\n    funcs))", "problem": 58, "user": "4f426a7ae4b0d7d3c9f3fcff"}, {"code": "(fn [& f]\n    (fn [& h]\n      (reduce\n      #(%2 %1)\n      (apply (last f) h)\n      (rest (reverse f))  \n      )\n    )\n)", "problem": 58, "user": "4f1595da535d64f603146444"}, {"code": "(fn c [& fs]\r\n  (if (= (count fs) 1)\r\n    (first fs)\r\n    (fn [& xs] ((apply c (butlast fs)) (apply (last fs) xs)))))", "problem": 58, "user": "4f474f43e4b0d56e7bb92bb7"}, {"code": "(fn [& fs]\n    (fn [& args]\n        ((fn it [fl]\n            (if (= (count fl) 1)\n                (apply (first fl) args)\n                ((first fl)(it (rest fl)))))\n          fs)))", "problem": 58, "user": "4f404dcee4b0e243712b1fb0"}, {"code": "(fn [& fun]\n  (let [fs (reverse fun)]\n    (fn [& args]\n      (loop [ret (apply (first fs) args) fs (next fs)]\n        (if fs\n          (recur ((first fs) ret) (next fs)) ret)))))", "problem": 58, "user": "4f4ba29ae4b03ad3f0c10c7a"}, {"code": "(fn \n  ([f1 f2]\n    (fn [& args]\n        (apply f1     \n          (list\n            (apply f2 args)))))\n  ([f1 f2 f3]\n    (fn [& args]\n      (apply f1\n        (list (apply f2\n          (list(apply f3 args))))))))", "problem": 58, "user": "4f1427f8535d64f603146435"}, {"code": "(fn [f & more]\n    (loop [func f [g & gs :as tail] more]\n        (if (empty? tail)\n            func\n            (recur (fn [& args] (func (apply g args))) gs))))", "problem": 58, "user": "4f4ac35ae4b0d56e7bb92c18"}, {"code": "(fn [& ops]\n  (fn [& data]\n    (loop [ops (reverse ops) data data]\n      (if (seq ops)\n        (recur (rest ops) (apply (juxt (first ops)) data))\n        (first data)))))", "problem": 58, "user": "4f4544e1e4b0d56e7bb92b7a"}, {"code": "(fn [& fs] \n  (fn [& e] \n    (reduce #(%2 %1) \n            (apply (last fs) e) \n            (reverse (butlast fs)))))", "problem": 58, "user": "4f4a5ca6e4b0d56e7bb92c0f"}, {"code": "(fn [& funs]\n  (fn [& args]\n    (reduce #(%2 %1)\n            (apply (last funs) args)\n            (reverse (drop-last funs)))))", "problem": 58, "user": "4eb66737535d7eef3080736b"}, {"code": "#(reduce (fn [ret f] (if (nil? ret)\n                       (fn [& args] (apply f args))\n                       (fn [& args] (ret (apply f args))))) %&)", "problem": 58, "user": "4f4319ebe4b0d7d3c9f3fd13"}, {"code": "(fn [& fns] \n  (let [last-fn (last fns)\n        fns (drop-last fns)]\n   (fn [& rest]\n     (reduce (fn [args f] (f args)) (apply last-fn rest) (reverse fns)))))", "problem": 58, "user": "4f4e91a9e4b03ad3f0c10cca"}, {"code": "(fn [& xs] (fn [& ys] (first (reduce #(list (apply %2 %1)) ys (reverse xs)))))", "problem": 58, "user": "4f4f0287e4b03ad3f0c10cd7"}, {"code": "(fn [& fs] \n  (reduce \n    (fn [g f] (fn [& x] (g (apply f x))))\n    fs))", "problem": 58, "user": "4ef77edb535dced4c769f254"}, {"code": "(fn [& ops]\n  (fn [& v0] (println v0)\n  ((fn [x xs] (if (empty? xs) (first x) (recur [(apply (last xs) x)] (drop-last xs))))\n  v0 ops)))", "problem": 58, "user": "4f51e8a4e4b03ad3f0c10d2d"}, {"code": "(fn comp_ [& fs]\n  (fn [& args]\n    (loop [acc (apply (last fs) args)\n           fs_ (butlast fs)]\n      (if (nil? fs_) \n          acc\n          (recur ((last fs_) acc) (butlast fs_))))))", "problem": 58, "user": "4f50c414e4b03ad3f0c10d0d"}, {"code": "(fn compose [& funcs]\n  (fn [& args]\n    (reduce  \n      (fn [x y] (y x))\n      (apply (last funcs) args)\n      (reverse (butlast funcs)))))", "problem": 58, "user": "4f4f08c8e4b03ad3f0c10cd8"}, {"code": "(fn my-comp\r\n  ([] identity)\r\n  ([f] f)\r\n  ([f g] \r\n     (fn \r\n       ([] (f (g)))\r\n       ([x] (f (g x)))\r\n       ([x y] (f (g x y)))\r\n       ([x y z] (f (g x y z)))\r\n       ([x y z & args] (f (apply g x y z args)))))\r\n  ([f g h] \r\n     (fn \r\n       ([] (f (g (h))))\r\n       ([x] (f (g (h x))))\r\n       ([x y] (f (g (h x y))))\r\n       ([x y z] (f (g (h x y z))))\r\n       ([x y z & args] (f (g (apply h x y z args))))))\r\n  ([f1 f2 f3 & fs]\r\n    (let [fs (reverse (list* f1 f2 f3 fs))]\r\n      (fn [& args]\r\n        (loop [ret (apply (first fs) args) fs (next fs)]\r\n          (if fs\r\n            (recur ((first fs) ret) (next fs))\r\n            ret))))))", "problem": 58, "user": "4f17ab99535d64f603146457"}, {"code": "(fn [& funs]\n  (let [[f & refuns] (reverse funs)]\n    (fn [& ps] \n      (loop [p (apply f ps) fs refuns]\n        (if (empty? fs) p \n          (recur ((first fs) p) (rest fs)))))))", "problem": 58, "user": "4f569218e4b0a7574ea71826"}, {"code": "(fn [& funcs]\n  (let [first-func (last funcs) \n        rest-funcs (reverse (butlast funcs))]\n  (fn [& args] \n    (reduce (fn [arg func] (func arg)) \n      (apply first-func args)\n      rest-funcs)\n)))", "problem": 58, "user": "4f2acb29e4b0d6649770a040"}, {"code": "(fn app [f & fs]\n  (if (empty? fs) \n      f\n      (fn [& args] (f (apply (apply app fs) args)))))", "problem": 58, "user": "4f567cdbe4b0a7574ea71824"}, {"code": "(fn fc [& fs]\r\n  (let [[f & more] (seq fs)]\r\n    (fn [& args]\r\n      (if more\r\n        (f (apply (apply fc more) args))\r\n        (apply f args)))))", "problem": 58, "user": "4f047177535dcb61093f6bc6"}, {"code": "(fn [& fs]\n    (let [fs (reverse (list* fs))]\n      (fn [& args]\n        (loop [ret (apply (first fs) args) fs (next fs)]\n          (if fs\n            (recur ((first fs) ret) (next fs))\n            ret)))))", "problem": 58, "user": "4ed60c9c535d10e5ff6f52dd"}, {"code": "(fn [& fns]\n    (partial\n     (fn myfn\n       ([fs xs]\n          (if (empty? fs)\n            xs\n            (let [tfn (first fs)\n                  ps (myfn (rest fs) xs)]\n              (tfn ps))))\n       ([fs x & xs]\n          (myfn (butlast fs) (apply (last fs) (list* x xs))))) fns ))", "problem": 58, "user": "4f3ec266e4b0e243712b1f8c"}, {"code": "(fn [& fs]\n  (fn [& args]\n    (reduce\n      #(%2 %1)\n      (apply (last fs) args)\n      (rest (reverse fs)))))", "problem": 58, "user": "4f569a3ce4b0a7574ea71828"}, {"code": "(fn [& more]\n  (when-let [more (reverse more)]\n    (fn [& args]\n      (loop [result (apply (first more) args), funcs (rest more)]\n        (if\n          (empty? funcs)\n          result\n          (recur\n            ((first funcs) result)\n            (rest funcs)))))))", "problem": 58, "user": "4f5c0549e4b0030a34fb2b1a"}, {"code": "(fn [& funcs]\n    (let [funcs (reverse funcs)]\n      (fn [& real-args]\n        (loop [f-ret     (apply (first funcs) real-args)\n               remaining (next funcs)]\n          (if (empty? remaining) f-ret\n              (recur ((first remaining) f-ret) (next remaining)))))))", "problem": 58, "user": "4f4a8707e4b0d56e7bb92c12"}, {"code": "(fn co [& fs]\n  (fn [& args]\n    (let [rfs (reverse fs)\n          val (apply (first rfs) args)]\n    (reduce #(%2 %) val (rest rfs)))))", "problem": 58, "user": "4ed27f9f535d44c135fd68d5"}, {"code": "(fn cmp[& funcs]\n  (fn [& args]\n    (first\n    (reduce (fn [a f] (list (apply f a))) args (reverse funcs)))))", "problem": 58, "user": "4f4c6b21e4b03ad3f0c10c8f"}, {"code": "(fn [& fns]                                                \n  (fn [& xs]                                                          \n    (reduce #(%2 %1) (apply (last fns) xs)\n            (reverse (butlast fns)))))", "problem": 58, "user": "4f2baf1ae4b0d6649770a04c"}, {"code": "(fn [& fs]\n  (let [[f & fs] (reverse fs)]\n    (fn [& xs]\n      (reduce #(%2 %) (apply f xs) fs))))", "problem": 58, "user": "4f6160a7e4b0defedf855fbe"}, {"code": "#(reduce\n  (fn [f g]\n    (fn [& a] (f (apply g a))))\n  %&)", "problem": 58, "user": "4dbe9674535d020aff1edf65"}, {"code": "(fn [& funcs]\n  (fn [& args]\n    (loop [fs (rest (reverse funcs)) out (apply (last funcs) args)]\n      (if (empty? fs)\n        out\n        (recur (rest fs) ((first fs) out))))))", "problem": 58, "user": "4dd9d299535d2dad7130b5dd"}, {"code": "(fn [& ff]\n  (let [aa (fn  [fs  arg]\n      (if (= fs [])\n         (first arg)\n         (recur (rest fs) (list (apply (first fs) arg)))))]\n  (fn [& cc] ( aa (reverse ff) cc))\n))", "problem": 58, "user": "4f62b29ce4b0defedf855fd9"}, {"code": "(fn cmp [& fns]\n  (loop [curr (first fns)\n        rst (rest fns)]\n    (if (empty? rst)\n      curr\n      (recur (fn [& args] (curr (apply (first rst) args))) (rest rst)))))", "problem": 58, "user": "4f611127e4b0defedf855fb4"}, {"code": "(fn \n  ([] identity)\n  ([f] f)\n  ([f g] \n     (fn \n       ([] (f (g)))\n       ([x] (f (g x)))\n       ([x y] (f (g x y)))\n       ([x y z] (f (g x y z)))\n       ([x y z & args] (f (apply g x y z args)))))\n  ([f g h] \n     (fn \n       ([] (f (g (h))))\n       ([x] (f (g (h x))))\n       ([x y] (f (g (h x y))))\n       ([x y z] (f (g (h x y z))))\n       ([x y z & args] (f (g (apply h x y z args))))))\n )", "problem": 58, "user": "4f69681ee4b07046d9f4ef89"}, {"code": "(fn [& p]\n  (reduce\n    (fn [f g]\n      #(f (apply g %&))) p))", "problem": 58, "user": "4f6fbb68e4b07046d9f4efeb"}, {"code": "(fn p58s [& fs]\n    (fn [& args]\n      (loop [ret (apply (last fs) args) fs (butlast fs)]\n        (if fs\n          (recur ((last fs) ret) (butlast fs))\n          ret)\n        )\n      )\n  )", "problem": 58, "user": "4f63777be4b0defedf855fe4"}, {"code": "(fn compf [ & funcol] \n  (let [tmpcol (reverse funcol),\n        fun1 (first tmpcol),\n        fcol (rest tmpcol)\n        ]\n   (fn lambda\n     ([col]  (reduce  #(%2 %1) (fun1 col) fcol) )\n     ([a b]  (reduce #(%2 %1) (fun1 a b) fcol) )\n     ([a b & other] (let \n                      [cols (cons a (cons b other)) ] \n                     (reduce #(%2 %1) (apply fun1 cols) fcol) \n                     )\n                   )\n  )\n )\n)", "problem": 58, "user": "4f6d9d7ee4b07046d9f4efcd"}, {"code": "(fn [& funcs]\n  (fn ([arg]\n    (reduce (fn [acc f]\n              (f acc))\n            arg (reverse funcs)))\n      ([a & args]\n    (reduce (fn [acc f]\n            (f acc))\n            (apply (first (reverse funcs)) (concat [a] args)) (rest (reverse funcs))))))", "problem": 58, "user": "4e7f5a0b535db966e863cc41"}, {"code": "(fn compose [& fs] (reduce #(fn [& xs] (%1 (apply %2 xs))) identity fs))", "problem": 58, "user": "4f7251eee4b07046d9f4f02e"}, {"code": "(fn  [& fx]\r\n      (let [fx (reverse fx)]\r\n\t\t  (fn [& fs]\r\n\t\t      (loop [result (apply (first fx) fs) fx (rest fx)]\r\n\t\t\t (if (empty? fx)\r\n\t\t\t     result\r\n\t\t\t     (recur ((first fx) result)(rest fx)))))))", "problem": 58, "user": "4f4ec77ae4b03ad3f0c10cd0"}, {"code": "(fn f [& fs]\n    (fn [& args]\n      (loop [rev-fs (rest (reverse fs))\n             eval-val (apply (last fs) args)]\n        (if (empty? rev-fs)\n          eval-val\n          (recur (rest rev-fs) ((first rev-fs) eval-val))))))", "problem": 58, "user": "4f5cc3b8e4b0030a34fb2b2b"}, {"code": "(fn [& fs]\n  (let [[f & fs] (reverse fs)]\n   (fn [& args]\n     (reduce #(%2 %1) (apply f args) fs))))", "problem": 58, "user": "4f58fe71e4b0a7574ea7185f"}, {"code": "(fn [x & xs]\n  (fn [& args]\n    ((fn step [[f & fs] a]\n       (if fs\n         (f (step fs a))\n         (apply f a)))\n     (cons x xs) args)))", "problem": 58, "user": "4ecd6a88535d23f036227704"}, {"code": "(fn [& fns]\n  (let [comp-helper #(if (empty? %2)\n                       %1\n                       (recur ((last %2) %1) (butlast %2)))]\n    #(comp-helper (apply (last fns) %&) (butlast fns))))", "problem": 58, "user": "4f71347ae4b07046d9f4f009"}, {"code": "(fn [& f]\n  (fn [& args] \n    (first (reduce #(seq [(apply %2 %1)]) args (reverse f)))))", "problem": 58, "user": "4f713878e4b07046d9f4f00a"}, {"code": "(fn [& fns]\n  (let [fns (reverse fns)]\n    (fn [& iargs]\n      (loop [f fns\n             cargs iargs]\n        (if (seq? f)\n          (recur (next f) [(apply (first f) cargs)])\n          (first cargs))))))", "problem": 58, "user": "4e89dbce535d3e98b8023283"}, {"code": "(fn n-comp [& fns]\n (reduce (fn [f g] #(f(apply g %&))) fns))", "problem": 58, "user": "4e568873535d8a8b8723a283"}, {"code": "(fn [& funcs]\n  (let [comp-fns (fn [f1 f2] \n                   (fn [& args] (f1 (apply f2 args))))]                    \n    (reduce comp-fns funcs)))", "problem": 58, "user": "4f7e29dde4b06e829148e1ca"}, {"code": "(fn p58 [& fs]\r\n  (fn [& args]\r\n\t\t(loop [functions (reverse fs) result args]\r\n\t\t\t(if (empty? functions)\r\n\t\t\t\t(first result)\r\n\t\t\t\t(recur (rest functions) (list (apply (first functions) result)))))))", "problem": 58, "user": "4f7f0827e4b06e829148e1d5"}, {"code": "(fn compose [& fs]\r\n  (let [fs (reverse fs)]\r\n    (fn [& args]\r\n      (loop [rf (apply (first fs) args)\r\n             fs (next fs)]\r\n        (if fs\r\n          (recur ((first fs) rf) (next fs))\r\n          rf)))))", "problem": 58, "user": "4f7d5328e4b06e829148e1bf"}, {"code": "(fn [& funcs]\n  (let [rl-funcs (reverse funcs)]\n    (fn [& params]\n      (loop [rest-fs rl-funcs\n             cur-result params]\n        (println cur-result)\n        (if (empty? rest-fs)\n          (first cur-result)\n          (recur (rest rest-fs) [(apply (first rest-fs) cur-result)]))))))", "problem": 58, "user": "4f841b23e4b033992c121c29"}, {"code": "#(reduce\n  (fn [f g]\n    (fn [& a] (f (apply g a))))\n  %&)", "problem": 58, "user": "4f678ac8e4b07046d9f4ef67"}, {"code": "(fn [& fl]\n  (fn [& vl]\n    (loop [f (drop-last fl) v (apply (last fl) vl)]\n      (if (empty? f)\n        v\n        (recur (drop-last f) ((last f) v))\n      )\n    )\n  )\n)", "problem": 58, "user": "4e6e2ac4535d5021c1a895ff"}, {"code": "(fn co [& fl]\n  (if (= (count fl) 1)\n    (first fl)\n    (fn [& args]\n      ((first fl) ( apply (apply co (rest fl)) args))\n    )\n  )\n)", "problem": 58, "user": "4f84400de4b033992c121c2e"}, {"code": "(fn iter [a & r]\n  (if (empty? r)\n    a\n    #(a (apply (apply iter r) %&))))", "problem": 58, "user": "4f8345c6e4b033992c121c1b"}, {"code": "(fn mycomp [& infuncs]\n     (letfn [(res [funcs & args] \n                (if (= (count funcs) 1)\n                    (apply (first funcs) args)\n                    ((first funcs) (apply (partial res (rest funcs)) args))\n                )\n             )]\n            (fn out [& inargs] (apply (partial res infuncs) inargs))\n     )\n)", "problem": 58, "user": "4f8b56dae4b02e764a0a517e"}, {"code": "(fn [& fs]\n  (let [fs (reverse fs)]\n    (fn [& a]\n      (loop [ret (apply (first fs) a), fs (next fs)]\n        (if fs\n          (recur ((first fs) ret) (next fs))\n          ret)))))", "problem": 58, "user": "4f725201e4b07046d9f4f02f"}, {"code": "(fn\n  ([] identity)\n  ([f] f)\n  ([f g]\n     (fn\n       ([] (f (g)))\n       ([x] (f (g x)))\n       ([x y] (f (g x y)))\n       ([x y z] (f (g x y z)))\n       ([x y z & args] (f (apply g x y z args)))))\n  ([f g h]\n     (fn\n       ([] (f (g (h))))\n       ([x] (f (g (h x))))\n       ([x y] (f (g (h x y))))\n       ([x y z] (f (g (h x y z))))\n       ([x y z & args] (f (g (apply h x y z args))))))\n  ([f1 f2 f3 & fs]\n    (let [fs (reverse (list* f1 f2 f3 fs))]\n      (fn [& args]\n        (loop [ret (apply (first fs) args) fs (next fs)]\n          (if fs\n            (recur ((first fs) ret) (next fs))\n            ret))))))", "problem": 58, "user": "4f847bf2e4b033992c121c32"}, {"code": "(fn [& s]\n  (fn[& x]\n    (reduce\n      #(%2 %1)\n      (apply (last s) x)\n      (rest (reverse s)))))", "problem": 58, "user": "4f725466e4b07046d9f4f030"}, {"code": "(fn c\n  ([] identity)\n  ([f] f)\n  ([f g] (fn [& p] (f (apply g p))))\n  ([f g & fs] \n    (fn [& p] (f (apply (if (empty? fs)\n                            (c g)\n                            (apply c g (first fs) (rest fs)))\n                        p)))))", "problem": 58, "user": "4f9120d8e4b0dcca54ed6c96"}, {"code": "(fn munge \n  ( [f1] (fn [& args] (apply f1 args)))\n  ( [f1 f2] (fn [& args] (f1 (apply f2 args))))\n  ( [f1 f2 & funcs]    \n    (fn [& args]\n      (f1 (apply (munge f2 (first funcs)) args))\n    )\n  )\n)", "problem": 58, "user": "4f8ea1f7e4b0d4e659cdde69"}, {"code": "(fn [ & fs] \n  (reduce (fn [c f] #(c (apply f %&))) fs))", "problem": 58, "user": "4f6511eee4b07046d9f4ef3a"}, {"code": "(fn [& fns] \r\n       (fn [& %] \r\n         (loop [curfn (last fns) morefns (rest (reverse fns)) args %] \r\n           (if (empty? morefns) \r\n             (apply curfn args)\r\n             (recur (first morefns) (rest morefns) (list (apply curfn args)))))))", "problem": 58, "user": "4f9174d0e4b0dcca54ed6c9b"}, {"code": "(fn [& fns]\n  (loop [acc identity fns (seq fns)]\n    (if-not fns\n      acc\n      (recur (fn [& xs] (acc (apply (first fns) xs))) (next fns)))))", "problem": 58, "user": "4e116e2e535d04ed9115e7c7"}, {"code": "(fn [& f] (fn [& args] (reduce #(%2 %) (apply (last f) args) (rest (reverse f)))))", "problem": 58, "user": "4f83665ee4b033992c121c1c"}, {"code": "(fn [& fs] (reduce #(fn [& args] (%1 (apply %2 args))) fs))", "problem": 58, "user": "4efd8b67535de96065cf5085"}, {"code": "(fn [& fs]\n  (fn [& args]\n  (loop [res (apply (last fs) args) funs (reverse (butlast fs))]\n    (if funs\n      (recur ((first funs) res) (next funs))\n      res)\n  )))", "problem": 58, "user": "4f88ae35e4b033992c121c6d"}, {"code": "(fn [& fns]\n  (reduce (fn [f s] (fn [& args]  (f (apply s args)))) fns))", "problem": 58, "user": "4f890488e4b033992c121c76"}, {"code": "(fn f ([x & l] (fn [& xs] (x (apply (apply f l) xs)))) ([x] x))", "problem": 58, "user": "4f8c5f4fe4b02e764a0a5198"}, {"code": "(fn [& fs] \r\n  (fn [x & xs] \r\n    (let [f (last fs)] \r\n      (reduce #(%2 %1) \r\n        (if (seq xs) (apply f x xs) (f x)) \r\n        (reverse (butlast fs))))))", "problem": 58, "user": "4f969214e4b0dcca54ed6cdd"}, {"code": "(fn compr\n\t  ([f1 & fs]\n\t    (let [fs (reverse (list* f1 fs))]\n\t      (fn [& args]\n\t        (loop [ret (apply (first fs) args) fs (next fs)]\n\t          (if fs\n\t            (recur ((first fs) ret) (next fs))\n\t            ret))))))", "problem": 58, "user": "4f891abde4b033992c121c77"}, {"code": "(fn [& fns]\n  (reduce (fn [f g]\n            (fn [& a] (f (apply g a))))\n          fns))", "problem": 58, "user": "4f7ab8c7e4b06e829148e19c"}, {"code": "(fn [& fs]\n  (fn [& args]\n    (let [rfs (reverse fs)]\n      (reduce (fn [a f] (f a))\n              (apply (first rfs) args)\n              (rest rfs)))))", "problem": 58, "user": "4f0c4518535d0136e6c2230b"}, {"code": "(fn [& r]\r\n  (reduce\r\n    (fn [p q]\r\n      #(p (apply q %&))) r))", "problem": 58, "user": "4f9597e0e4b0dcca54ed6cd4"}, {"code": "(fn comp2 [& fns]\n             (if (= 1 (count fns))\n               (first fns)\n               (fn [& args]\n                 (println args)\n                 ((first fns) (apply (apply comp2 (rest fns)) args)))))", "problem": 58, "user": "4f465096e4b0d56e7bb92b9a"}, {"code": "(fn [& fns]\n  (fn [& args]\n    (first\n      (reduce\n        #(vector (apply %2 %))\n        args\n        (reverse fns)))))", "problem": 58, "user": "4f9d53f3e4b0dcca54ed6d21"}, {"code": "(fn blah \n  ([f] f)\n  ([f & more] \n    (fn [x & args] \n      (f (apply (apply blah more) x args)))))", "problem": 58, "user": "4f17aa97535d64f603146456"}, {"code": "(fn mycomp [f & funcs]\n  (if funcs\n    (fn [& args] (f (apply (apply mycomp funcs) args)))\n    f))", "problem": 58, "user": "4e5c3612535d8a8b8723a2be"}, {"code": "#(fn [& v]\n   (loop [f %& e v]\n     (if (empty? f)\n       (first e)\n       (recur (butlast f)\n              [(apply (last f) e)]))))", "problem": 58, "user": "4f9fe2b9e4b0dcca54ed6d40"}, {"code": "(fn co\n      ([f g]\n        (fn\n          ([a]       (f (g a)))\n          ([a b]     (f (g a b)))\n          ([a b c]   (f (g a b c)))\n          ([a b c d] (f (g a b c d)))))\n      ([f g h]\n        (fn\n          ([a]       (f (g (h a))))\n          ([a b]     (f (g (h a b))))\n          ([a b c]   (f (g (h a b c))))\n          ([a b c d] (f (g (h a b c d)))))))", "problem": 58, "user": "4f9920a3e4b0dcca54ed6cfc"}, {"code": "(fn [x & xs]\r\n  (fn [& args]\r\n    ((fn step [[f & fs] a]\r\n       (if fs\r\n         (f (step fs a))\r\n         (apply f a)))\r\n     (cons x xs) args)))", "problem": 58, "user": "4f50be5de4b03ad3f0c10d0c"}, {"code": "(fn \n  ([f g] \n    (fn \n      ([x] (f (g x)))\n      ([x & args] (f (apply g x args)))))\n  ([f g h]\n    (fn\n      ([x & args] (f (g (apply h x args)))))))", "problem": 58, "user": "4fa39b3ee4b081705acca191"}, {"code": "(fn [& fs]\n  (reduce\n    (fn [g f]\n      (fn [& xs] (g (apply f xs))))\n    identity fs))", "problem": 58, "user": "4f969a66e4b0dcca54ed6cde"}, {"code": "(fn [& fs] (reduce (fn [g f] #(g (apply f %&))) identity fs))", "problem": 58, "user": "4f954dbce4b0dcca54ed6ccd"}, {"code": "(fn [& f] #((reduce (fn [v f] [(apply f v)]) %& (reverse f)) 0))", "problem": 58, "user": "4f40ccd9e4b0e243712b1fc0"}, {"code": "(fn [& functions]\n  (fn [& values]\n    (reduce\n      #(%2 %1)\n      (apply (last functions) values)\n      (rest (reverse functions)))))", "problem": 58, "user": "4fa3f91fe4b081705acca196"}, {"code": "(fn [& fs]\n  (fn [& args]\n    (first (reduce #(vector (apply %2 %1)) (conj (reverse fs) args)))))", "problem": 58, "user": "4fa0a4b1e4b0dcca54ed6d4f"}, {"code": "(fn [& funs] (reduce #(fn [& args]\n                          (%1 (apply %2 args)))\n                       funs))", "problem": 58, "user": "4fa6d532e4b081705acca1be"}, {"code": "(fn [& fs]\n  (let [[f & more] (reverse fs)]\n    (fn [& args]\n      (reduce #(%2 %1) (apply f args) more))))", "problem": 58, "user": "4f3fb586e4b0e243712b1f9c"}, {"code": "(fn [& f] (let [[g & h] (reverse f)]\n  (fn [& l] (reduce #(%2 %) (apply g l)  h ))\n))", "problem": 58, "user": "4ef48422535dced4c769f236"}, {"code": "(fn [& fns]\n  (fn [& vs]\n    (loop [fns- (butlast fns)\n           vs- (apply (last fns) vs)]\n      (if (empty? fns-) vs-\n        (recur (butlast fns-)\n               ((last fns-) vs-))))))", "problem": 58, "user": "4faa8de0e4b081705acca1f8"}, {"code": "(fn cmp [& fns]\r\n     (let [fs (reverse fns)]\r\n       (fn [& args]\r\n         (loop [ret (apply (first fs) args) fs (next fs)]\r\n           (if fs\r\n             (recur ((first fs) ret) (next fs))\r\n               ret)))))", "problem": 58, "user": "4f82e14be4b033992c121c0c"}, {"code": "(fn [& f] (fn [& x] (first (reduce #(list (apply %2 %1)) x (reverse f)))))", "problem": 58, "user": "4faa9593e4b081705acca1f9"}, {"code": "(fn com [f & fs]\n  (fn [& a]\n    (if (= fs nil)\n        (apply f a)\n        (f (apply (apply com fs) a)))))", "problem": 58, "user": "4faae01ae4b081705acca206"}, {"code": "(fn my-comp\n([f] f)\n([f g]\n    (fn\n    ([] (f (g)))\n    ([x] (f (g x))) \n    ([x y] (f (g x y))) \n    ([x y z] (f (g x y z)))\n    ([x y z & args] (f (apply g x y z args)))))\n([f g h]\n    (fn\n    ([] (f (g (h))))\n    ([x] (f (g (h x)))) \n    ([x y] (f (g (h x y))))\n    ([x y z] (f (g (h x y z))))\n    ([x y z & args] (f (g (apply h x y z args)))))))", "problem": 58, "user": "4f9c4080e4b0dcca54ed6d1a"}, {"code": "(fn mycomp\n  ([f] f)\n  ([f g]\n    (fn [& args]\n      (f (apply g args))))\n  ([f g & more]\n    (apply mycomp (mycomp f g) more)))", "problem": 58, "user": "4f49e869e4b0d56e7bb92c02"}, {"code": "(fn [& more]\n  (fn [& a] (reduce\n              (fn [v f] (f v))\n              (apply (last more) a)\n              (reverse (butlast more)))))", "problem": 58, "user": "4faac363e4b081705acca200"}, {"code": "(fn [& fns]\r\n  (fn [& args]\r\n    (let [fns (reverse fns)\r\n          entry (first fns)]\r\n      (loop [r (apply entry args) remain (rest fns)]\r\n        (if (not (empty? remain))\r\n          (recur ((first remain) r) (rest remain))\r\n          r)))))", "problem": 58, "user": "4facff22e4b081705acca230"}, {"code": "(fn [& fs]\n  (fn [& xs]\n    (let [[g & hs] (reverse fs)]\n      (reduce #(%2 %1) (apply g xs) hs))))", "problem": 58, "user": "4fae0b85e4b081705acca245"}, {"code": "(fn c [& f]\n  (if (= (count f) 1)\n    (first f)\n    (fn [& x]\n      ((first f) (apply (apply c (rest f)) x)))))", "problem": 58, "user": "4facd2fae4b081705acca22f"}, {"code": "(fn [& s] \n  (reduce\n    (fn [f g] \n      (fn [& a] (g (apply f a))))\n    (reverse s)))", "problem": 58, "user": "4f4274f2e4b0d7d3c9f3fd00"}, {"code": "(fn com\n  ([] identity)\n  ([ & fs] (fn [ & args] \n    ((apply com (butlast fs)) \n       (apply (last fs) args)))))", "problem": 58, "user": "4f91a38ae4b0dcca54ed6c9f"}, {"code": "(fn [& fns]\n  (reduce\n    (fn\n      ([f1 f2] #(f1 (apply f2 %&)))\n      ([f1] #(apply f1 %&)))\n    fns))", "problem": 58, "user": "4f7f9665e4b033992c121bea"}, {"code": "(fn [& fs]\n  (fn [& args] \n    (loop [f (reverse fs) r args]\n    (if (empty? f) (first r)\n        (recur (rest f) (list (apply (first f) r)))))))", "problem": 58, "user": "4fae258de4b081705acca246"}, {"code": "(fn [& xs]\n  (fn [& data]\n    (first \n      (loop [f (reverse xs) r data]\n        (if (seq f)\n          (recur (rest f) (list (apply (first f) r)))\n          r)))))", "problem": 58, "user": "4fa5406fe4b081705acca1ac"}, {"code": "(fn fn-comp [& fns]\r\n  (let \r\n    [my-apply (fn my-apply [fn-list & args]\r\n                (if (empty? fn-list) (first args)\r\n                  (let [first-fn (first fn-list)\r\n                        rest-fns (rest fn-list)\r\n                        next-arg (apply first-fn args)]\r\n                      (my-apply rest-fns next-arg))))\r\n     rev-fns (reverse fns)]\r\n     (fn [& args] (apply (partial my-apply rev-fns ) args))))", "problem": 58, "user": "4f036fb3535dcb61093f6ac8"}, {"code": "(fn [& fs]\n  (reduce (fn [f g]\n            (fn [& args]\n              (f (apply g args))))\n          identity\n          fs))", "problem": 58, "user": "4e8338d6535db62dc21a62d3"}, {"code": "(fn [& f] \n  (fn [& s] \n    (first \n      (reduce \n        #(list (apply %2 %)) \n        s \n        (reverse f)))))", "problem": 58, "user": "4f991ec1e4b0dcca54ed6cfb"}, {"code": "(fn \r\n  ([] identity)\r\n  ([f] f)\r\n  ([f g] \r\n     (fn \r\n       ([] (f (g)))\r\n       ([x] (f (g x)))\r\n       ([x y] (f (g x y)))\r\n       ([x y z] (f (g x y z)))\r\n       ([x y z & args] (f (apply g x y z args)))))\r\n  ([f g h] \r\n     (fn \r\n       ([] (f (g (h))))\r\n       ([x] (f (g (h x))))\r\n       ([x y] (f (g (h x y))))\r\n       ([x y z] (f (g (h x y z))))\r\n       ([x y z & args] (f (g (apply h x y z args))))))\r\n  ([f1 f2 f3 & fs]\r\n    (let [fs (reverse (list* f1 f2 f3 fs))]\r\n      (fn [& args]\r\n        (loop [ret (apply (first fs) args) fs (next fs)]\r\n          (if fs\r\n            (recur ((first fs) ret) (next fs))\r\n            ret))))))", "problem": 58, "user": "4f9f9ff5e4b0dcca54ed6d3a"}, {"code": "(fn [ & fns]\n  (letfn [(mc [fl]\n                (if (empty? (rest fl)) (fn [y] (apply (first fl) y)) \n                    (fn [x] ((first fl)\n                             ((mc (rest fl)) x)))))]\n    (fn [& x]\n       ((mc fns) x))))", "problem": 58, "user": "4fb4b798e4b081705acca2af"}, {"code": "(fn [& f]\n  (let [[f & ff] (reverse f)]\n    (fn [& x]\n      (reduce #(%2 %1) (apply f x) ff))))", "problem": 58, "user": "4fb2101ce4b081705acca284"}, {"code": "(fn comp1 [& fns]\n  (fn [& args] \n    (first (reduce (fn [memo item] (list (apply item memo))) args (reverse fns)))))", "problem": 58, "user": "4f9a0064e4b0dcca54ed6d03"}, {"code": "(fn [& f]\n  (fn [& x]\n    (loop [f (reverse f) x x]\n      (if (seq f)\n        (recur (next f) [(apply (first f) x)])\n        (first x)))))", "problem": 58, "user": "4f9d8083e4b0dcca54ed6d23"}, {"code": "(fn comb [& funcs]\r\n  (fn [& args]\r\n    (first\r\n      (reduce #(vector (apply %2 %1)) args (reverse funcs )))))", "problem": 58, "user": "4f7d25b4e4b06e829148e1ba"}, {"code": "(fn [& f] (fn [& args] (reduce #(%2 %) (apply (last f) args) (reverse (butlast f)))))", "problem": 58, "user": "4fb3b865e4b081705acca2a2"}, {"code": "(fn [& fs]\n    (fn [a & others] \n      (reduce #(%2 %) (if others\n                          (apply (last fs) a others) \n                          ((last fs) a)) (reverse (butlast fs)))))", "problem": 58, "user": "4fa30027e4b081705acca187"}, {"code": "(fn j [& fns]\n   (fn [& fnargs]\n     (first (reduce (fn [x y] [(apply y x)]) \n         fnargs\n        (reverse fns)))\n   )   \n)", "problem": 58, "user": "4f7b6b90e4b06e829148e1a4"}, {"code": "(fn my-comp [& fs]\n  (fn [& args]\n    ;; this function should take the args and pass them backwards through the fs\n    ((fn [f x]\n       (if (nil? (last f))\n         x\n         (recur (butlast f) ((last f) x))))\n     (butlast fs) (apply (last fs) args))))", "problem": 58, "user": "4fa17b00e4b0dcca54ed6d5f"}, {"code": "(fn [& fns]\n  (reduce\n    #(fn [& args] (% (apply %2 args)))\n    fns))", "problem": 58, "user": "4db3393e535df7e46ed9b6cc"}, {"code": "(fn([] identity)\n    ([f] f)\n\t  ([f g]\n\t     (fn\n\t       ([] (f (g)))\n\t       ([x] (f (g x)))\n\t       ([x y] (f (g x y)))\n\t       ([x y z] (f (g x y z)))\n\t       ([x y z & args] (f (apply g x y z args)))))\n\t  ([f g h]\n\t     (fn\n\t       ([] (f (g (h))))\n\t       ([x] (f (g (h x))))\n\t       ([x y] (f (g (h x y))))\n\t       ([x y z] (f (g (h x y z))))\n\t       ([x y z & args] (f (g (apply h x y z args))))))\n\t  ([f1 f2 f3 & fs]\n\t    (let [fs (reverse (list* f1 f2 f3 fs))]\n\t      (fn [& args]\n\t        (loop [ret (apply (first fs) args) fs (next fs)]\n\t          (if fs\n\t            (recur ((first fs) ret) (next fs))\n\t            ret))))))", "problem": 58, "user": "4faec810e4b081705acca24e"}, {"code": "(fn t\n  ([f] f)\n  ([f1 f2] #(f1 (f2 %)))\n  ([f1 f2 f3]\n    (fn [& a] (f1 (f2 (apply f3 a))))))", "problem": 58, "user": "4f1bb9d8535d64f60314647d"}, {"code": "(fn my-comp \n  ([f] f)\n  ([f & fns] \n    (fn [& args] \n      (f (apply (apply my-comp fns) args)))))", "problem": 58, "user": "4f6bab49e4b07046d9f4efb1"}, {"code": "(fn [& functions]\n  (let [fs (reverse functions)]\n    (fn [& s]\n      (loop [fs fs res s]\n        (if-let [f (first fs)]\n          (recur (next fs) [(apply f res)])\n          (first res))))))", "problem": 58, "user": "4fc13433e4b081705acca32b"}, {"code": "(fn mycomp [cfn & fns] \n    (fn [& args]\n      (apply cfn (if fns [(apply (apply mycomp fns) args)] args))))", "problem": 58, "user": "4fbfe9a4e4b081705acca31f"}, {"code": "(fn comp2 [& fns]\n  (reduce\n    (fn [f1 f2]\n      #(f1 (apply f2 %&))) fns))", "problem": 58, "user": "4faafccde4b081705acca209"}, {"code": "(fn [& args]\n  (reduce (fn [f1 f2] \n            (fn [& xs] (f1 (apply f2 xs))))\n          args))", "problem": 58, "user": "4e51c67a535d302ef430da6a"}, {"code": "(fn [& f]\n  (fn [& args]\n    (loop [ [fh & ft] (reverse f), arg args ]\n      (if (nil? ft)\n        (apply fh arg)\n        (recur ft [(apply fh arg)])))))", "problem": 58, "user": "4fc0853ae4b081705acca327"}, {"code": "(fn [& fs]\n  (reduce #(fn [& args] (% (apply %2 args)))\n  identity\n  fs))", "problem": 58, "user": "4fc4eadee4b081705acca353"}, {"code": "(fn [& fns]\r\n  (let [[f & fns] (reverse fns)]\r\n    (fn [& args]\r\n      (reduce #(%2 %1) (apply f args) fns))))", "problem": 58, "user": "4fb37882e4b081705acca2a0"}, {"code": "(fn [& fns]\n  (let [temp (reverse fns)]\n    (fn [ & args] \n      (loop [funs (rest temp) arg (apply (first temp) args) ]\n        (cond (empty? funs) arg\n          :else (recur (rest funs) \n                    ((first funs) arg)))))))", "problem": 58, "user": "4fbd1ebbe4b081705acca2fe"}, {"code": "(fn [& functions]\n  (fn [& args] \n    (first (reduce \n      (fn [a f] (list (apply f a))) args (reverse functions)))))", "problem": 58, "user": "4fc7db47e4b0ee37620e182a"}, {"code": "(fn comp--tail\n  ([]  identity)\n  ([& fns]\n   (fn [& args]\n     (loop [x (apply (peek (vec fns)) args), ; Apply the rightmost function\n            stack (pop (vec fns))]           ; and assemble the rest as a stack.\n       (if (seq stack)\n         (recur ((peek stack) x) (pop stack)) ; Calling the top of the stack.\n         x)))))", "problem": 58, "user": "4fc6305de4b0ee37620e180b"}, {"code": "(fn [& o]\n    (let [[f & fs] (reverse o)]\n      (fn [& args]\n        (reduce #(%2 %1) (apply f args) fs))))", "problem": 58, "user": "4fc8c8d8e4b0ee37620e183b"}, {"code": "(fn [& fs] (fn [& args] (reduce #(%2 %1) (apply (last fs) args) (reverse (butlast fs)))))", "problem": 58, "user": "4fb65f2fe4b081705acca2c7"}, {"code": "(fn my-comp [& fs]\n  (fn [& x] (first (reduce (fn [y f] [(apply f y)]) x (reverse fs)))))", "problem": 58, "user": "4fcaf7a4e4b0ee37620e1857"}, {"code": "(fn c [& fs]\n  (fn [& args](reduce #(%2 %)\n                      (apply (last fs) args)\n                      (reverse (butlast fs)))))", "problem": 58, "user": "4fca1cd6e4b0ee37620e184c"}, {"code": "(fn [& fns]\r\n  (fn [& args]\r\n    (let [fns (reverse fns)]\r\n      (loop [r (apply (first fns) args) \r\n             fns (next fns)]\r\n        (if fns\r\n          (recur ((first fns) r) (next fns))\r\n          r)))))", "problem": 58, "user": "4e970e6a535dbda64a6f6b4e"}, {"code": "(fn [& fs]\n  (fn [& args]\n    (loop [res args fs (reverse fs)]\n      (if (empty? fs)\n        (first res)\n        (recur [(apply (first fs) res)] (rest fs))))))", "problem": 58, "user": "4fb4f42ae4b081705acca2b4"}, {"code": "(fn [& f] \n  ( fn [ & k] ( let [\n          l (reverse f)\n          s ( cons (apply (first l) k) (rest l) )\n        ] \n    ( reduce #(%2 %1) s ))))", "problem": 58, "user": "4fc43a8ee4b081705acca346"}, {"code": "(fn\n  ([] identity)\n  ([f] f)\n  ([f g] \n     (fn \n       ([] (f (g)))\n       ([x] (f (g x)))\n       ([x y] (f (g x y)))\n       ([x y z] (f (g x y z)))\n       ([x y z & args] (f (apply g x y z args)))))\n  ([f g h] \n     (fn \n       ([] (f (g (h))))\n       ([x] (f (g (h x))))\n       ([x y] (f (g (h x y))))\n       ([x y z] (f (g (h x y z))))\n       ([x y z & args] (f (g (apply h x y z args))))))\n  ([f1 f2 f3 & fs]\n    (let [fs (reverse (list* f1 f2 f3 fs))]\n      (fn [& args]\n        (loop [ret (apply (first fs) args) fs (next fs)]\n          (if fs\n            (recur ((first fs) ret) (next fs))\n            ret))))))", "problem": 58, "user": "4fa2fa5ee4b081705acca186"}, {"code": "(fn [& fns]\n  (reduce\n    #(fn [& args] (%1 (apply %2 args)))\n    identity\n    fns))", "problem": 58, "user": "4fce5474e4b0d4b2a7a9d451"}, {"code": "(fn mycomp\n  ([f] f)\n  ([f & others] (fn [& v] (f (apply (apply mycomp others) v))))\n)", "problem": 58, "user": "4fcad14ce4b0ee37620e1856"}, {"code": "(fn [& f] (fn[& z](reduce (fn[a b](b a)) (apply (last f) z) (rest (reverse f)))))", "problem": 58, "user": "4fb3dd1ee4b081705acca2a5"}, {"code": "(fn [& args]\n  (reduce \n    (fn [s e] (fn [& f-args] (e (apply s f-args))))\n    (reverse args)))", "problem": 58, "user": "4fcfa1a4e4b03432b189f41a"}, {"code": "#(reduce (fn [f1 f2] (fn [& xs] (f1 (apply f2 xs)))) %&)", "problem": 58, "user": "4f7431d2e4b044e54cd9a8f7"}, {"code": "(fn [& r]\n  (fn [& data]\n  (let [[f & r] (reverse r)]\n    (reduce\n      #(%2 %1)\n      (apply f data)\n    r))))", "problem": 58, "user": "4fb1d907e4b081705acca282"}, {"code": "(fn [& fs]\n  (fn [& args]\n    (let [rfs (reverse fs)]\n      (reduce #(%2 %) (apply (first rfs) args) (rest rfs)))))", "problem": 58, "user": "4fd22e70e4b04c3a95aa041c"}, {"code": "(fn [ & fnsl] \n ( fn [ & argsl ] \n      (loop [ fns fnsl\n                  args argsl]\n           (if-not  (empty? fns) \n                 (recur (butlast fns)  (list (apply (last fns) args)) )  \n                  (first args)))))", "problem": 58, "user": "4f030775535dcb61093f6a43"}, {"code": "(fn [x & xs]\n  (fn [& args]\n    ((fn step [[f & fs] a]\n       (if fs\n         (f (step fs a))\n         (apply f a)))\n     (cons x xs) args)))", "problem": 58, "user": "4fc2e302e4b081705acca33a"}, {"code": "(fn my[& f]\n   (fn [& x]\n     ((fn temp[flist]\n       (if (empty? (rest flist)) (apply (first flist) x)\n           ((first flist) (temp (rest flist))))) f)))", "problem": 58, "user": "4fb86dc9e4b081705acca2d8"}, {"code": "(fn o\n  ([f] f)\n  ([f g] (fn [& xs] (f (apply g xs))))\n  ([f g & r] (o (o f g) (apply o r))))", "problem": 58, "user": "4ec812d9535d6d7199dd36f0"}, {"code": "(fn o\n ([f] f)\n ([f & fs]\n   (fn [& gs]\n     (f (apply (apply o fs) gs)))))", "problem": 58, "user": "4ec3b393535dcc7ae8597d59"}, {"code": "(fn [& fs]\n  (let [[rf & rfs] (reverse fs)]\n    (fn [& args]\n      (reduce #(%2 %) (apply rf args) rfs))))", "problem": 58, "user": "4fd96694e4b05e33b9224f37"}, {"code": "(fn zomp [& funcs]\n  (fn zomp1 [& args]\n    (loop [fs funcs as args]\n      (if (<= (count fs) 1)\n        (apply (last fs) as)\n        (recur (butlast fs) [(apply (last fs) as)])\n      )\n    )\n  )\n)", "problem": 58, "user": "4e5fdd68535d8ccf87e9fe4f"}, {"code": "(fn compose [& fns]\n  (fn [& args]\n    (reduce #(%2 %1)\n      (apply (last fns) args)\n      (rest (reverse fns)))))", "problem": 58, "user": "4db0ef131254ad5b4805fa64"}, {"code": "(fn [& topargs]\n    (letfn [(mycomp0 [f & fs]\n              (if (seq fs)\n                (fn [& args] (f (apply (apply mycomp0 fs) args)))\n                (fn [& args] (apply f args))))]\n      (apply mycomp0 topargs)))", "problem": 58, "user": "4e5be681535d8a8b8723a2bc"}, {"code": "(fn compo2 [& fns]\n  (let [[f & fns] (reverse fns)]\n    (fn [& args]\n      (reduce #(%2 %1) (apply f args) fns))))", "problem": 58, "user": "4ed2a31c535d44c135fd68db"}, {"code": "(fn [& fs]\n  (fn [& xs]\n    (loop [x (apply (last fs) xs), f (butlast fs)]\n      (if (empty? f)\n        x\n        (recur ((last f) x) (butlast f))))))", "problem": 58, "user": "4fb12b35e4b081705acca275"}, {"code": "(fn [& fs]\n  (fn ret-fun [& s]\n    (loop [value s, funs (reverse fs)]\n        (do (println value funs)\n        (if-let [f (first funs)]\n            (recur [(apply f value)] (rest funs))\n            (first value))))))", "problem": 58, "user": "4fa67030e4b081705acca1b7"}, {"code": "(fn [& f](fn [& c] (reduce #(%2 %1) (apply (last f) c) (reverse (butlast f)))))", "problem": 58, "user": "4fd29d7ce4b04c3a95aa0424"}, {"code": "(fn [& fs]\n  (fn [& xs]\n    (reduce\n      #(%2 %1)\n      (apply (last fs) xs)\n      (rest (reverse fs)))))", "problem": 58, "user": "4fd6f4d8e4b0dab7d829f37b"}, {"code": "(fn x  [ & fs] (fn  [& args ]  \n  (if (= 2 (count fs))  \n       ((first fs)  (apply (last fs) args))  \n       ((apply x (butlast fs))   (apply (last fs) args))\n   )))", "problem": 58, "user": "4fccdc75e4b0ee37620e186d"}, {"code": "(fn [& x]\r\n  (fn [& v] \r\n    (first (reduce #(list (apply %2 %1)) v (reverse x)))))", "problem": 58, "user": "4f82ed48e4b033992c121c0e"}, {"code": "(fn [& fs]\n  (reduce (fn [f1 f2]\n    (fn [& args] (f1 (apply f2 args))))\n      fs))", "problem": 58, "user": "4fda016ae4b05e33b9224f42"}, {"code": "(fn f1 [& fns]\n  (let [[f & fns] (reverse fns)]\n  (fn f2 [& v]\n    (loop [r (apply f v) [f & fns] fns]\n      (if f\n        (recur (f r) fns)\n        r)))))", "problem": 58, "user": "4fdec88fe4b05e33b9224f8e"}, {"code": "(fn [& fs]\n  (let [[[first-func] other-funcs] (split-at 1 (reverse fs))]\n    (fn [& lst]\n      (reduce #(%2 %) (apply first-func lst) other-funcs))))", "problem": 58, "user": "4fba7d1ee4b081705acca2e0"}, {"code": "(fn [& f] (fn [& x] (reduce #(%2 %) (apply (last f) x) (reverse (butlast f)))))", "problem": 58, "user": "4fd91099e4b05e33b9224f32"}, {"code": "(fn my-comp\n  ([] identity)\n  ([f] f)\n  ([f g] \n     (fn \n       ([] (f (g)))\n       ([x] (f (g x)))\n       ([x y] (f (g x y)))\n       ([x y z] (f (g x y z)))\n       ([x y z & args] (f (apply g x y z args)))))\n  ([f g h] \n     (fn \n       ([] (f (g (h))))\n       ([x] (f (g (h x))))\n       ([x y] (f (g (h x y))))\n       ([x y z] (f (g (h x y z))))\n       ([x y z & args] (f (g (apply h x y z args))))))\n  ([f1 f2 f3 & fs]\n    (let [fs (reverse (list* f1 f2 f3 fs))]\n      (fn [& args]\n        (loop [ret (apply (first fs) args) fs (next fs)]\n          (if fs\n            (recur ((first fs) ret) (next fs))\n            ret))))))", "problem": 58, "user": "4fe229f0e4b0dd6cd5ce3642"}, {"code": "(fn ([f1 f2] (fn [& args] (f1 (apply f2 args))))\r\n([f1 f2 f3] (fn [& args] (f1 (f2 (apply f3 args))))))", "problem": 58, "user": "4fcc6cb3e4b0ee37620e1861"}, {"code": "(fn ([x y] (fn [a] (x (y a))))\n    ([x y z]\n      (fn\n        ([a b] (x (y (z a b))))\n        ([a b c d] (x (y (z a b c d)))))))", "problem": 58, "user": "4ecbd630535df97575fdabe1"}, {"code": "(fn c [& fs]\n  (let [f (first fs)\n        rf (rest fs)]\n    (fn [& x]\n      (if (empty? rf)\n        (apply f x)\n        (f (apply (apply c rf) x))))))", "problem": 58, "user": "4fde492be4b05e33b9224f8a"}, {"code": "(fn [ & f]\n  (fn [ & x] \n    (reduce (fn [m f] (f m))  \n            (apply (last f) x) (-> f reverse rest))))", "problem": 58, "user": "4fdd27f3e4b05e33b9224f78"}, {"code": "(fn compose[& a] (fn [& x] (reduce #(%2 %1) (apply (last a) x) (reverse (drop-last a)))))", "problem": 58, "user": "4fce75cfe4b03432b189f400"}, {"code": "(fn\n  ([] identity)\n  ([f] f)\n  ([f g] \n     (fn \n       ([] (f (g)))\n       ([x] (f (g x)))\n       ([x y] (f (g x y)))\n       ([x y z] (f (g x y z)))\n       ([x y z & args] (f (apply g x y z args)))))\n  ([f g h] \n     (fn \n       ([] (f (g (h))))\n       ([x] (f (g (h x))))\n       ([x y] (f (g (h x y))))\n       ([x y z] (f (g (h x y z))))\n       ([x y z & args] (f (g (apply h x y z args))))))\n  ([f1 f2 f3 & fs]\n    (let [fs (reverse (list* f1 f2 f3 fs))]\n      (fn [& args]\n        (loop [ret (apply (first fs) args) fs (next fs)]\n          (if fs\n            (recur ((first fs) ret) (next fs))\n            ret))))))", "problem": 58, "user": "4f726dd2e4b07046d9f4f034"}, {"code": "(fn func-comp [& init-funcs]\n  (let [[fn1 & fns] (reverse init-funcs)]\n    (fn [& args] (reduce #(%2 %1) (apply fn1 args) fns))))", "problem": 58, "user": "4f68c485e4b07046d9f4ef7c"}, {"code": "(fn a [f & z]\n  (if z\n    #(f (apply (apply a z) %&))\n    f))", "problem": 58, "user": "4fe8aef4e4b07c9f6fd12c6c"}, {"code": "(fn [& functions]\n  (fn [& args]\n    (first (apply (fn iter [functions-left & result]\n      (if (empty? functions-left)\n        result\n        (iter (rest functions-left) (apply (first functions-left) result))))\n    (reverse functions) args))))", "problem": 58, "user": "4fe8e771e4b0547ebccb2431"}, {"code": "(fn [& fns]\n  (fn [& args]\n    (first\n    (reduce #(vector (apply %2 %1)) args (reverse fns)))))", "problem": 58, "user": "4fe88f78e4b07c9f6fd12c45"}, {"code": "(fn [& args] (reduce (fn [r c] (fn [& x] (r (apply c x)))) identity args))", "problem": 58, "user": "4feada56e4b0140c20fb9c11"}, {"code": "(fn cmps [& fns]\n  (letfn [(apply-rt-to-left [funlist arglist]\n            (if (= (count funlist) 0)\n               (first arglist)\n               (apply-rt-to-left (butlast funlist)\n                                 (list (apply (last funlist) arglist)))))]\n     (fn [& args]\n        (apply-rt-to-left fns args))))", "problem": 58, "user": "4fe87e56e4b07c9f6fd12c40"}, {"code": "(fn [& more]\n  (let [fs (reverse more)]\n    (fn [& args] (reduce #(%2 %1) (apply (first fs) args) (rest fs)))))", "problem": 58, "user": "4f8bbb27e4b02e764a0a5182"}, {"code": "(fn [f & r] \r\n  (fn [& x]\r\n    (letfn [(comp-maker [r]\r\n              (cond\r\n               (empty? r) x\r\n               (empty? (rest r)) (apply (first r) x)\r\n               :else ((first r) (comp-maker (rest r)))))]\r\n      (f (comp-maker r)))))", "problem": 58, "user": "4fdf4e2be4b05e33b9224f96"}, {"code": "(fn [& funcs] \n  (fn [& args] (first (reduce #(list (apply %2 %)) args (reverse funcs)))))", "problem": 58, "user": "4f05ea25535dcb61093f6c02"}, {"code": "(fn [x & xs]\r\n  (fn [& args]\r\n    ((fn step [[f & fs] a]\r\n       (if fs\r\n         (f (step fs a))\r\n         (apply f a)))\r\n     (cons x xs) args)))", "problem": 58, "user": "4ff07688e4b0678c553fc324"}, {"code": "(fn\r\n  [& varargs]\r\n  (let [fs (reverse varargs)]\r\n       (fn [& args]\r\n         (loop [ret (apply (first fs) args) fs (next fs)]\r\n           (if fs\r\n             (recur ((first fs) ret) (next fs)) ret)))))", "problem": 58, "user": "4fee04a0e4b0678c553fc308"}, {"code": "#_ (fn c [& funs]\n  (if (= (count funs) 1)\n    (fn [& args] (apply (first funs) args))\n    (fn [& args]\n      ((first funs)\n        (apply (apply c (rest funs)) args)))))\n\n(fn c [& funs]\n  (reduce #(fn [& args] (%1 (apply %2 args))) funs))", "problem": 58, "user": "4fe8b6afe4b07c9f6fd12c76"}, {"code": "(fn [& fs] (fn [& xs] (loop [[f & gs] (rest (reverse fs))\n y (apply (last fs) xs)] (if f (recur gs (f y)) y))))", "problem": 58, "user": "4fca2ef0e4b0ee37620e184e"}, {"code": "(fn [ & fns] \r\n  (let [rfns (reverse fns)]\r\n    (fn [& args]\r\n      (first (reduce (fn [accum f] (vector (apply f accum))) args rfns)))))", "problem": 58, "user": "4db2cd84535df7e46ed9b6c6"}, {"code": "(fn my-comp [& functions]\n  (fn [& arguments]\n    (first (reduce #(vector (apply %2 %1)) arguments (reverse functions)))))", "problem": 58, "user": "4fe83efbe4b07c9f6fd12c3b"}, {"code": "(fn [x & y]\n    (fn [& r]\n      ((fn i [[f & g] a]\n         (if g\n           (f (i g a))\n           (apply f a)))\n       (cons x y) r)))", "problem": 58, "user": "4fe9de74e4b0547ebccb2475"}, {"code": "(fn myc [& xs]\n  (fn [& ys]\n    (if (seq? xs)\n      ((apply myc (drop-last xs)) (apply (last xs) ys))\n      (first ys))))", "problem": 58, "user": "4fc93728e4b0ee37620e1844"}, {"code": "(fn [& m] (apply (fn [para & more]\r\n                         (if (empty? more)\r\n                           para\r\n                           (recur (fn [& m1]\r\n                                    ((first more) (apply para m1))) (rest more)))) (reverse m)))", "problem": 58, "user": "4f8aa1c1e4b02e764a0a516e"}, {"code": "(fn [& fargs] (fn [& args] (let [rfargs (reverse fargs)] (reduce #(%2 %1) (apply (first rfargs) args) (rest rfargs)))))", "problem": 58, "user": "4e79ff2a535db169f9c796a9"}, {"code": "(fn [& fs]\r\n  (fn com\r\n    ([s]\r\n      (reduce #(%2 %1) s (reverse fs)))\r\n    ([x & s]\r\n      (reduce #(%2 %1) (apply (last fs) (concat [x] s))\r\n        (reverse (butlast fs))))))", "problem": 58, "user": "4ff304f4e4b0678c553fc343"}, {"code": "(fn [& funcs] (fn [& initial] (reduce #(apply %2 (list %1)) \n                                      (apply (last funcs) initial)\n                                      (rest (reverse funcs)))))", "problem": 58, "user": "4ff50604e4b0678c553fc365"}, {"code": "(fn [& fs]\r\n  (fn [& args]\r\n    (first (reduce #(vector (apply %2 %1)) args (reverse fs)))))", "problem": 58, "user": "4f4fbed7e4b03ad3f0c10ce8"}, {"code": "(fn cmp [& funcs]\r\n  (fn [& args]\r\n    (first (reduce #(vector (apply %2 %1)) args (reverse funcs)))))", "problem": 58, "user": "4ff201d7e4b0678c553fc330"}, {"code": "(fn [& f]\n  (fn [& v]\n    (reduce #(%2 %1) \n    (apply (last f) v) (reverse (butlast f)))))", "problem": 58, "user": "4ff5744ae4b0678c553fc36a"}, {"code": "(fn [& fns]                                                                                                                                                         \n  (fn [& args]                                                                                                                                                   \n    (->> fns reverse\n      (reduce #(vector (apply %2 %1)) args) first )))", "problem": 58, "user": "4ff6aea8e4b0678c553fc381"}, {"code": "(fn [& fn-list]\n  (fn [& arg-list]\n\t\t(reduce\n\t\t\t#(%2 %1)\n\t\t\t(apply (last fn-list) arg-list)\n\t\t\t(rest (reverse fn-list)))))", "problem": 58, "user": "4fb57e06e4b081705acca2bf"}, {"code": "(fn [& f]\n  (fn [& a]\n    (let [fs (reverse f)]\n      (loop [r (apply (first fs) a)\n             fs (next fs)]\n        (if fs\n          (recur ((first fs) r) (next fs))\n          r)))))", "problem": 58, "user": "4ff9d4e5e4b0678c553fc3b0"}, {"code": "(fn fcom [& fs]\r\n    (let [ops (reverse fs)]\r\n    (fn ([c] \r\n         (reduce #(apply %2 [%1]) c ops))\r\n         ([c & m] (reduce #(apply %2 [%1]) (apply (first ops) c m) (rest ops))))))", "problem": 58, "user": "4ff4c9dae4b0678c553fc360"}, {"code": "(fn\n  ([] identity)\n  ([f] f)\n  ([f g] \n     (fn \n       ([] (f (g)))\n       ([x] (f (g x)))\n       ([x y] (f (g x y)))\n       ([x y z] (f (g x y z)))\n       ([x y z & args] (f (apply g x y z args)))))\n  ([f g h] \n     (fn \n       ([] (f (g (h))))\n       ([x] (f (g (h x))))\n       ([x y] (f (g (h x y))))\n       ([x y z] (f (g (h x y z))))\n       ([x y z & args] (f (g (apply h x y z args))))))\n  ([f1 f2 f3 & fs]\n    (let [fs (reverse (list* f1 f2 f3 fs))]\n      (fn [& args]\n        (loop [ret (apply (first fs) args) fs (next fs)]\n          (if fs\n            (recur ((first fs) ret) (next fs))\n            ret))))))", "problem": 58, "user": "4f6b4237e4b07046d9f4efa9"}, {"code": "(fn [& fns]\n  (fn [& xs]\n    (loop [fns (reverse fns)\n            xs xs]\n            (if (seq fns)\n              (recur (rest fns)\n                      [(apply (first fns) xs)])\n            (first xs)))))", "problem": 58, "user": "4eda7cc3535d10e5ff6f530e"}, {"code": "(fn [& f] (reduce (fn [x y] #(x (apply y %&))) f))", "problem": 58, "user": "4ff82b00e4b0678c553fc395"}, {"code": "(fn [& fn-list]\n    (fn [& args]\n      (first (reduce #(list (apply %2 %1)) args (reverse fn-list)))))", "problem": 58, "user": "4da8dd6e30acd6ed12482a68"}, {"code": "(fn [& fns]\n  \t(fn [& args]\n\t\t\t(loop [funs (reverse fns) r args]\n\t\t\t\t(if (empty? funs) (first r)\n\t\t\t\t\t(recur (rest funs) (list (apply (first funs) r)))))))", "problem": 58, "user": "4e6a63fd535d8ccf87e9feda"}, {"code": "(fn [x & xs]\n  (fn [& args]\n    ((fn step [[f & fs] a]\n       (if fs\n         (f (step fs a))\n         (apply f a)))\n     (cons x xs) args)))", "problem": 58, "user": "4f6845d2e4b07046d9f4ef74"}, {"code": "(fn comp\u00e9 [f & funcs]\n  (if (empty? funcs)\n    f\n    (fn [& args] (f\n      (apply (apply comp\u00e9 funcs) args)))))", "problem": 58, "user": "4fc50bcbe4b081705acca375"}, {"code": "(fn \n    ([f g] (fn [& xs] (f (apply g xs))))\n    ([f g h] (fn [& xs] (f (g (apply h xs))))))", "problem": 58, "user": "4fe8a3bde4b07c9f6fd12c61"}, {"code": "(fn [& fns]\n  (fn [& args]\n    (first (reduce\n      #(list (apply %2 %1))\n      args\n      (reverse fns)))))", "problem": 58, "user": "4fbd24d2e4b081705acca2ff"}, {"code": "(fn compo [& fs]\n  (fn [& params]\n    (let [funs (reverse fs)\n          res (apply (first funs) params)]\n      (loop [fns (rest funs) r res]\n        (if (seq fns)\n          (recur (rest fns) ((first fns) r))\n          r)))))", "problem": 58, "user": "5003deb9e4b0678c553fc445"}, {"code": "(fn ccomp [& xs]\n  (let [[h & tl] (seq xs)]\n    (if (not tl)\n      h\n      (fn [& x] (h (apply (apply ccomp tl) x))))))", "problem": 58, "user": "4f625f68e4b0defedf855fd2"}, {"code": "(fn\n  ([] identity)\n  ([f] f)\n  ([f g] \n     (fn \n       ([] (f (g)))\n       ([x] (f (g x)))\n       ([x y] (f (g x y)))\n       ([x y z] (f (g x y z)))\n       ([x y z & args] (f (apply g x y z args)))))\n  ([f g h] \n     (fn \n       ([] (f (g (h))))\n       ([x] (f (g (h x))))\n       ([x y] (f (g (h x y))))\n       ([x y z] (f (g (h x y z))))\n       ([x y z & args] (f (g (apply h x y z args))))))\n  ([f1 f2 f3 & fs]\n    (let [fs (reverse (list* f1 f2 f3 fs))]\n      (fn [& args]\n        (loop [ret (apply (first fs) args) fs (next fs)]\n          (if fs\n            (recur ((first fs) ret) (next fs))\n            ret))))))", "problem": 58, "user": "4fdf2b50e4b05e33b9224f93"}, {"code": "(fn [& fs]\n  (let [[g & fs] (reverse fs)]\n    (fn [& a]\n      (reduce #(%2 %1) (apply g a) fs))))", "problem": 58, "user": "4e86d3cf535dceadca46984c"}, {"code": "(fn [& functions]\n  (let [fs (reverse (list* functions))]\n    (fn [& args]\n      (loop [ret (apply (first fs) args) fs (next fs)]\n        (if fs\n          (recur ((first fs) ret) (next fs))\n            ret)))))", "problem": 58, "user": "50052fd0e4b0678c553fc45d"}, {"code": "(fn [& fs]\n  (fn [& a] (let [[f & r] (reverse fs)]\n              (reduce #(%2 %1) (apply f a) r))))", "problem": 58, "user": "5003ee7de4b0678c553fc446"}, {"code": "(fn mycmp [& fsequence]                                                                                                                          \n    (loop [newfseq fsequence                                                                                                                       \n           builder nil]                                                                                                                            \n      (if (empty? newfseq)                                                                                                                         \n        builder                                                                                                                                    \n        (recur (butlast newfseq)                                                                                                                   \n               (fn [& args]                                                                                                                        \n                 (if (nil? builder)                                                                                                                \n                   (apply (last newfseq) args)                                                                                                     \n                   ((last newfseq) (apply builder args))))))))", "problem": 58, "user": "50057f23e4b0678c553fc466"}, {"code": "(fn [& funs]\n  (let [[f & fs] (reverse funs)]\n    #(reduce (fn [x f] (f x)) (apply f %&) fs)))", "problem": 58, "user": "500933a6e4b046cdb195e074"}, {"code": "(fn [& fs]\n  (fn [& args]\n     (reduce #(%2 %) \n       (apply (last fs) args) (rest (reverse fs)))))", "problem": 58, "user": "4fdb02aae4b05e33b9224f56"}, {"code": "(fn [& fs]\n  (fn [& xs]\n    (first (reduce #(vector (apply %2 %1)) xs (reverse fs)))))", "problem": 58, "user": "500d0f21e4b05f7c30cfa69e"}, {"code": "(fn [& fs]\n  (let [fs (reverse fs)]\n    (fn [& args]\n      (loop [ret (apply (first fs) args)\n             fs (next fs)]\n        (if fs\n          (recur ((first fs) ret) (next fs))\n          ret)))))", "problem": 58, "user": "500d8c49e4b07ccb9a7ddb00"}, {"code": "(fn my-compose [f & fs]\n  (if (empty? fs)\n    f\n    (recur (fn [& xs] (f (apply (first fs) xs))) (rest fs))))", "problem": 58, "user": "4ff355a1e4b0678c553fc34d"}, {"code": "(fn c ([a b] (fn [& args] (a (apply b args))))\n      ([a b & rest] (apply c (c a b) rest)))", "problem": 58, "user": "4fe900a6e4b0547ebccb243a"}, {"code": "(fn [& funcs]\n  (let [funcs (reverse funcs)]\n    (fn [& args] (reduce #(%2 %1) (apply (first funcs) args) (rest funcs)))))", "problem": 58, "user": "5002b6e5e4b0678c553fc42c"}, {"code": "(fn [& fns] \n  (fn [& args] \n    (first \n      (reduce \n        #(list (apply %2 %1)) \n        args \n        (reverse fns)))))", "problem": 58, "user": "500aa15ee4b03d00572d2d76"}, {"code": "(fn compose\n  ([f & fs]  (fn [& args] (f (apply (apply compose fs) args))))\n  ([f]  (fn [& args] (apply f args))))", "problem": 58, "user": "50127fbfe4b030d97e4db70f"}, {"code": "(fn [& xs]\n  (reduce (fn [f g] (fn [& xs] (f (apply g xs)))) xs))", "problem": 58, "user": "5013193ae4b0f26a0e3320ab"}, {"code": "(fn my-comp\n  ([] identity)\n  ([f] f)\n  ([f g] #(f (apply g %&)))\n  ([f g h & more]\n     (let [k (apply my-comp (list* g h more))]\n       #(f (apply k %&)))))", "problem": 58, "user": "500ff421e4b0ae202717946f"}, {"code": "(fn mycomp [f & r]\n  (if (empty? r)\n    (fn [& x] (apply f x))\n    (fn [& x] (f (apply (apply mycomp r) x)))))", "problem": 58, "user": "500cb910e4b05f7c30cfa698"}, {"code": "#(fn [& a] ((reduce (fn [x f] [(apply f x)]) a (reverse %&)) 0))", "problem": 58, "user": "5014718fe4b094324338f8e3"}, {"code": "(fn [& f]\r\n  (fn [& a]\r\n    (reduce #(%2 %) (apply (last f) a) (rest (reverse f)))))", "problem": 58, "user": "500d1db4e4b05f7c30cfa69f"}, {"code": "(fn [& fs] \n  (let [fs (reverse (list* fs))]\n    (fn [& args]\n      (loop [ret (apply (first fs) args) fs (next fs)]\n        (if fs\n          (recur ((first fs) ret) (next fs))\n          ret)))))", "problem": 58, "user": "50097962e4b03d00572d2d6c"}, {"code": "(fn [& fs]\n  (let [fs (reverse fs)]\n     (fn [& args]\n      (loop [ret (apply (first fs) args) fs (next fs)]\n        (if fs\n          (recur ((first fs) ret) (next fs))\n              ret)))))", "problem": 58, "user": "4f8320e9e4b033992c121c18"}, {"code": "(fn [& fs]\n  (reduce (fn [f g]\n            #(f (apply g %&)))\n          fs))", "problem": 58, "user": "4dae0510c9a9d6ed4b99dc57"}, {"code": "(fn [& fns] (reduce (fn [f1 f2] #(f1 (apply f2 %&))) fns))", "problem": 58, "user": "4ff76effe4b0678c553fc390"}, {"code": "(fn c\n  ([f g] #(f (apply g %&)))\n  ([f g & h] (reduce c (c f g) h)))", "problem": 58, "user": "50142490e4b07d18bdaaf70a"}, {"code": "(fn __ [& fns] \n  (reduce\n    (fn [f g]\n      (fn [& a] (f (apply g a))))\n    fns))", "problem": 58, "user": "4ec9549d535d6d7199dd36fe"}, {"code": "#(reduce (fn [f g] (fn [& x] (f (apply g x)))) %&)", "problem": 58, "user": "4ec1e953535dfed6da9c6db8"}, {"code": "(fn [& f]\n  (fn [& args]\n    (first (reduce #(vector (apply %2 %1)) args (reverse f) ))))", "problem": 58, "user": "500b61b1e4b03d00572d2d81"}, {"code": "(fn [& funcs] \n  (reduce (fn [f1 f2]\n            (fn [& args] (f1 (apply f2 args))))\n          funcs))", "problem": 58, "user": "500900dee4b0144d4f561e42"}, {"code": "(fn [& fs]\n  (fn [& args]\n    (first (reduce #(list (apply %2 %)) args (reverse fs)))))", "problem": 58, "user": "50166470e4b052339a490e76"}, {"code": "(fn fco2 [& funcs]\n  (fn [& inp]\n    (first \n      ( ( (fn c [fuvec]    \n            (if (= (count fuvec) 1)             \n              (fn [input] (list (apply (first fuvec) input)))        \n              (fn [input] (list (apply (first fuvec) ((c (rest fuvec)) input))))        \n              )    \n            ) \n          funcs ) \n        inp))\n    )\n  )", "problem": 58, "user": "4fcf5292e4b03432b189f40e"}, {"code": "(fn cmp [x & xs]\n  (if (nil? xs)\n      x\n      (fn [& zs]\n        (x (apply (apply cmp xs) zs)))))", "problem": 58, "user": "4ff4f5c4e4b0678c553fc362"}, {"code": "(fn c [& fs]\r\n  (fn [& ps]\r\n    (let [s ( reverse fs) ]\r\n      (loop [sof s\r\n             pms ps]\r\n        (if (empty? sof)\r\n          (first pms)\r\n          (recur (rest sof) (list (apply (first sof) pms)) )\r\n          ))\r\n      )\r\n    )\r\n  )", "problem": 58, "user": "4febb4dae4b0681fd128dc98"}, {"code": "(fn  \n  ([] identity)\n  ([f] f)\n  ([f g] \n     (fn \n       ([] (f (g)))\n       ([x] (f (g x)))\n       ([x y] (f (g x y)))\n       ([x y z] (f (g x y z)))\n       ([x y z & args] (f (apply g x y z args)))))\n  ([f g h] \n     (fn \n       ([] (f (g (h))))\n       ([x] (f (g (h x))))\n       ([x y] (f (g (h x y))))\n       ([x y z] (f (g (h x y z))))\n       ([x y z & args] (f (g (apply h x y z args))))))\n  ([f1 f2 f3 & fs]\n    (let [fs (reverse (list* f1 f2 f3 fs))]\n      (fn [& args]\n        (loop [ret (apply (first fs) args) fs (next fs)]\n          (if fs\n            (recur ((first fs) ret) (next fs))\n            ret))))))", "problem": 58, "user": "50158fa0e4b0aaedd199e913"}, {"code": "(fn [& fns]\r\n  (fn [& params]\r\n    (loop [a (rest (reverse fns)) b (apply (first (reverse fns)) params)]\r\n      (if (empty? a) \r\n        b\r\n        (recur (rest a)\r\n               ((first a) b))))))", "problem": 58, "user": "4fd8544be4b0dab7d829f390"}, {"code": "(fn [x & xs]\n  (fn [& args]\n    ((fn step [[f & fs] a]\n       (if fs\n         (f (step fs a))\n         (apply f a)))\n     (cons x xs) args)))", "problem": 58, "user": "4eb8ec4a535dfed6da9c6d4b"}, {"code": "(fn [x & xs]\n  (fn [& args]\n    ((fn step [[f & fs] a]\n      (if fs\n        (f (step fs a))\n        (apply f a)))\n      (cons x xs) args)))", "problem": 58, "user": "4e944706535dbda64a6f6b11"}, {"code": "(fn [& fs]\n  (fn [& args]\n    (first (reduce (fn [r f] [(apply f r)]) args (reverse fs)))))", "problem": 58, "user": "4f9f7daae4b0dcca54ed6d37"}, {"code": "(fn mcomp [& fx]\n  (fn [& xs] (first (reduce #(list (apply %2 %1)) xs (reverse fx)))))", "problem": 58, "user": "4fcf642ee4b03432b189f410"}, {"code": "(fn [& fns]\r\n  (fn [& args]\r\n    (first (reduce #(vector (apply %2 %)) args (clojure.core/reverse fns)))))", "problem": 58, "user": "500159b3e4b0678c553fc419"}, {"code": "(fn mycomp [f & r]\n    (if r\n      (fn [& args] (f (apply (apply mycomp r) args)))\n      f))", "problem": 58, "user": "4e4ca885535dc968683fc4df"}, {"code": "(fn [& fs]\n  (fn [& args]\n    (reduce #(%2 %) (apply (last fs) args) (rest (reverse fs)))))", "problem": 58, "user": "5028cd0fe4b01614d1633ffc"}, {"code": "(fn [& funcs]\n  (fn \n    [x & args]\n      (let [fs (reverse funcs),\n            initial (if (nil? args) \n                      ((first fs) x)\n                      (apply (first fs) (cons x args)))]\n           (reduce #(%2 %) initial (rest fs)\n            ))\n    )\n  )", "problem": 58, "user": "502a5fa4e4b09e8f859a9fbd"}, {"code": "(fn [& fs]\n  (fn [& xs]\n    (first (reduce #(vector (apply %2 %1)) xs (reverse fs)))))", "problem": 58, "user": "5029fccee4b023940c84aa47"}, {"code": "#(let [fns (reverse %&)]\r\n  (fn [& args]\r\n    (loop [retval (apply (first fns) args)\r\n           fns (next fns)]\r\n       (if fns\r\n         (recur ((first fns) retval) (next fns))\r\n          retval))))", "problem": 58, "user": "502a5e59e4b09e8f859a9fbc"}, {"code": "(fn [& f] (fn [& v] (first (reduce #(list (apply %2 %)) v (reverse f)))))", "problem": 58, "user": "4e9609ad535dbda64a6f6b3e"}, {"code": "(fn [& funcs] (partial (fn r [fs & xs]\n              (if (= 1 (count fs))\n                (apply (first fs) xs)\n                ((first fs) (apply r (rest fs) xs)))) funcs))", "problem": 58, "user": "4ee624f8535d93acb0a66855"}, {"code": "(fn __ [& args]\n  (fn [& x]\n    (let [fr (apply (last args) x)]\n      (reduce (fn [g f] (f g)) fr (rest (reverse args))))))", "problem": 58, "user": "4fa719c0e4b081705acca1bf"}, {"code": "(fn [& fs]\r\n  (fn [& va]\r\n    (first (reduce #(list (apply %2 %1)) va (reverse fs)))))", "problem": 58, "user": "502873a8e4b01614d1633ff8"}, {"code": "(fn [& fs]\n  (fn [& xs]\n    (apply identity\n      (reduce\n        (fn [xs f] (list (apply f xs)))\n        xs\n        (reverse fs)))))", "problem": 58, "user": "4f4e7c01e4b03ad3f0c10cc9"}, {"code": "(fn [& a]\n  (fn [& x]\n    (loop [fl a args x]\n      (if\n          (empty? fl) (first args)\n          (recur (butlast fl) (list (apply  (last fl) args)))))))", "problem": 58, "user": "5007cdb9e4b0b17c647f5227"}, {"code": "(fn [& ops]\n  (fn [& args]\n    (first (reduce (fn [r o] [(apply o r)]) args (reverse ops)))))", "problem": 58, "user": "4ed8b598535d10e5ff6f52fc"}, {"code": "(fn ([f] f)\r\n  ([f g] \r\n     (fn \r\n       ([] (f (g)))\r\n       ([x] (f (g x)))\r\n       ([x y] (f (g x y)))\r\n       ([x y z] (f (g x y z)))\r\n       ([x y z & args] (f (apply g x y z args)))))\r\n  ([f g h] \r\n     (fn \r\n       ([] (f (g (h))))\r\n       ([x] (f (g (h x))))\r\n       ([x y] (f (g (h x y))))\r\n       ([x y z] (f (g (h x y z))))\r\n       ([x y z & args] (f (g (apply h x y z args))))))\r\n  ([f1 f2 f3 & fs]\r\n    (let [fs (reverse (list* f1 f2 f3 fs))]\r\n      (fn [& args]\r\n        (loop [ret (apply (first fs) args) fs (next fs)]\r\n          (if fs\r\n            (recur ((first fs) ret) (next fs))\r\n            ret))))))", "problem": 58, "user": "5028bce0e4b01614d1633ffb"}, {"code": "(fn [& fs]\n  (reduce (fn [f g] #(f (apply g %&))) fs))", "problem": 58, "user": "5032b066e4b00c0952a257ea"}, {"code": "(fn [& fs] (fn [& args]\n   (reduce #(%2 %) \n           (apply (last fs) args) \n           (reverse (butlast fs)))))", "problem": 58, "user": "50052d38e4b0678c553fc45c"}, {"code": "(fn [& fs]\n    (let [fs (reverse (list* fs))]\n      (fn [& args]\n        (loop [ret (apply (first fs) args) fs (next fs)]\n\n          (if fs\n            (recur ((first fs) ret) (next fs))\n            ret)))))", "problem": 58, "user": "502b0804e4b063e52107afad"}, {"code": "(fn comp1\n  ([f] f)\n  ([f g & hs]\n   (fn [& args]\n     (f (apply (apply comp1 g hs) args)))))", "problem": 58, "user": "4f2b0951e4b0d6649770a045"}, {"code": "(fn cmp [f & fns] \n  (if fns \n    #(f (apply (apply cmp fns) %&)) \n    f))", "problem": 58, "user": "5009fd0ae4b03d00572d2d70"}, {"code": "(fn [& fns]\n  (fn [& args]\n    (reduce #(%2 %1) (apply (last fns) args) (rest (reverse fns)))))", "problem": 58, "user": "5027fc0ce4b01614d1633ff2"}, {"code": "(fn [& fs]\n  (fn [& xs]\n    (reduce (fn [v f] (f v))\n            (apply (last fs) xs)\n            (reverse (butlast fs)))))", "problem": 58, "user": "4f2a35ace4b0d6649770a03a"}, {"code": "(fn cmp\r\n  ([f] f)\r\n  ([f & g] #(f (apply (apply cmp g) %&))))", "problem": 58, "user": "50336c6be4b0c6c1199c710f"}, {"code": "(fn [x & xs]\n  (fn [& args]\n    ((fn step [[f & fs] a]\n       (if fs\n         (f (step fs a))\n         (apply f a)))\n     (cons x xs) args)))", "problem": 58, "user": "4df39b50535d08e6dec9fe29"}, {"code": "(fn [& fns]\n  (fn [& args]\n    (reduce\n      #(%2 %1)\n      (apply (last fns) args)\n      (reverse (butlast fns)))))", "problem": 58, "user": "50361b6be4b0fbe0a74d26be"}, {"code": "(fn [& fs] \n  (fn [& args] \n    (first \n      (reduce \n        #(list (apply %2 %1)) \n        args \n        (reverse fs)))))", "problem": 58, "user": "4ded27db535d08e6dec9fe0a"}, {"code": "(fn [& fns]\n    (fn [& args]\n      (let [[f & fns] (reverse fns)]\n        (reduce #(%2 %1) (apply f args) fns))))", "problem": 58, "user": "4db4e9d7535dc0f10411755e"}, {"code": "(fn mp [& fs] (fn [& as] (first (reduce #(list (apply %2 %)) as (reverse fs)))))", "problem": 58, "user": "4e976daa535dbda64a6f6b54"}, {"code": "(fn [& fns]\n  (fn [& args]\n    (let [[f & fs] (reverse fns)]\n        (reduce #(%2 %) (apply f args) fs))))", "problem": 58, "user": "4fbef9a6e4b081705acca316"}, {"code": "(fn [& fs]\r\n    (let [fs (reverse fs)]\r\n      (fn [& args]\r\n        (loop [ret (apply (first fs) args) fs (next fs)]\r\n          (if fs\r\n            (recur ((first fs) ret) (next fs))\r\n            ret)))))", "problem": 58, "user": "4e8768f6535dceadca469850"}, {"code": "(fn [& f]\r\n    (fn [& v]\r\n      (nth (reduce #(vector (apply %2 %1)) v (reverse f)) 0)))", "problem": 58, "user": "4f58d92fe4b0a7574ea71858"}, {"code": "#(fn [& params]\n  (loop [fns (reverse %&) out params]\n    (if (empty? fns) (first out) (recur (rest fns) (list (apply (first fns) out))))))", "problem": 58, "user": "5033a1fbe4b062bc5d7ae155"}, {"code": "(fn co [& fns]\n  (if (empty? fns)\n    identity\n    (fn [& x] ((apply co (butlast fns)) (apply (last fns) x)))))", "problem": 58, "user": "5034b0e1e4b062bc5d7ae167"}, {"code": "(fn [& ls] (reduce (fn [fc f]  (fn [& args] (fc (apply f args)))) identity ls))", "problem": 58, "user": "502a9fdee4b095a7adb898b4"}, {"code": "(fn my-comb [& func]\n    (reduce (fn [func x] (fn [& n] (x (apply func n)))) (reverse func)))", "problem": 58, "user": "4f03818e535dcb61093f6b00"}, {"code": "(fn [& gg]\n  (fn [& args]\n    (let [gg'' (reverse gg)]\n      (loop [g (first gg''), gg' (rest gg''), v args]\n        (if (nil? g)\n          (first v) (recur (first gg') (rest gg') (vector (apply g v))))\n        ))))", "problem": 58, "user": "4f616892e4b0defedf855fbf"}, {"code": "(fn f [& v] \n   (let [[g & u] (reverse v)]\n     (fn [& y] \n       (reduce #(%2 %) (apply g y) u))))", "problem": 58, "user": "503917a0e4b088a6a14ca763"}, {"code": "(fn [& fs]\n  (fn [& a]\n    (let [[f & r] (reverse fs)]\n      (reduce #(%2 %) (apply f a) r))))", "problem": 58, "user": "502904e0e4b0feaf66e22fad"}, {"code": "(fn my-function [& args]\n  (fn [& coll]\n    (println coll)\n    (loop [result coll\n           funcs (reverse args)]\n      (println result)\n      (if (not-empty funcs)\n        (recur (list (apply (first funcs) result)) (rest funcs))\n        (first result)))))", "problem": 58, "user": "50254dace4b0b0b8afb15aa6"}, {"code": "(fn [& fs] \n  (let [sf (reverse fs)]\n    (fn [& coll] \n      (reduce \n        #(%2 %1) \n        (if (= 1 (count sf)) \n          ((first sf) coll) \n          (apply (first sf) coll)) \n        (rest sf)))))", "problem": 58, "user": "501c1492e4b086d93747d180"}, {"code": "(fn [& f]\n  (fn [& a] (first\n\t\t(reduce #(list (apply %2 %)) a (reverse f)))))", "problem": 58, "user": "501d52a8e4b066e56b9d0b20"}, {"code": "(fn [& fs]\n    (let [fns (reverse fs)]\n      (fn [& args]\n        (reduce #(%2 %1)\n                (apply (first fns) args)\n                (rest fns)))))", "problem": 58, "user": "5014754de4b094324338f8e5"}, {"code": "(fn [& fns]\n  (fn [& args]\n    (reduce\n      (fn [a g]\n        (g a))\n      (apply (last fns) args)\n      (rest (reverse fns)))))", "problem": 58, "user": "50427899e4b0add3005c0fc2"}, {"code": "(fn [& f]\n          (let [[h & r] (reverse f)]\n            (fn [& z]\n              (reduce\n               #(%2 %)\n               (apply h z)\n               r))))", "problem": 58, "user": "503b6995e4b07a1917cc34dd"}, {"code": "(fn [& fs]\n  (let [[f & fns] (reverse fs)]\n    (fn [& args]\n      (reduce \n        (fn [acc f] (f acc))\n        (apply f args)\n        fns))))", "problem": 58, "user": "5012ec0ae4b0c87326002230"}, {"code": "(fn [& fns]\n  (reduce #(fn [& xs] (%1 (apply %2 xs))) identity fns))", "problem": 58, "user": "4fd81472e4b0dab7d829f38e"}, {"code": "(fn [& fns]\n  (fn [& args]\n    (loop [fns (reverse fns) args args]\n      (if (= () fns)\n        (first args)\n        (recur (rest fns) [(apply (first fns) args)])))))", "problem": 58, "user": "50435852e4b034ff00315d22"}, {"code": "(fn [& args]\n  (fn [& x]\n  (reduce #(%2 %)\n    (apply (first (reverse args)) x) (rest (reverse args)))))", "problem": 58, "user": "503de5aae4b06c4e0e1fa259"}, {"code": "(fn [& f]\n    (fn [& p]\n      ((fn r [g q] (if (nil? g) q (r (butlast g) ((last g) q)))) (butlast f) (apply (last f) p))))", "problem": 58, "user": "4e43b0d9535dc968683fc4a3"}, {"code": "(fn [f & fs]\r\n  (let [fs (reverse (list* f fs))]  ; Right-to-left list of functions\r\n    (fn [& args]\r\n      (loop [ret (apply (first fs) args) fs (next fs)]\r\n        (if fs\r\n          (recur ((first fs) ret) (next fs))\r\n          ret)))))", "problem": 58, "user": "4fabbb97e4b081705acca21d"}, {"code": "(fn c [f & rest]\n  (if (nil? rest) (fn [& args] (apply f args))\n     (fn [& args] (f (apply (apply c rest) args)))))", "problem": 58, "user": "4fb266a5e4b081705acca28c"}, {"code": "(fn f [& fs]\n  (fn g [& args]\n    (first (reduce #(list (apply %2 %1)) args (reverse fs)))))", "problem": 58, "user": "50464831e4b011c5dfee771f"}, {"code": "(fn [& funcs]\r\n  (fn f [& args]\r\n    (first (reduce #(vector (apply %2 %1)) args (reverse funcs)))))", "problem": 58, "user": "5046b003e4b011c5dfee7727"}, {"code": "(fn [& fs]\r\n          (fn [& args]\r\n            (first ( reduce (fn [a f] [(apply f a)]) args (reverse fs)))))", "problem": 58, "user": "503d129fe4b06c4e0e1fa254"}, {"code": "(fn [& fs]\n  (reduce (fn [acc f] (fn [& xs] (acc (apply f xs))))\n    identity fs))", "problem": 58, "user": "50479524e4b0371827a27bc4"}, {"code": "(fn compose [& funcs]\n  (if\n    (= 1 (count funcs))\n      (first funcs)\n    (fn [& args]\n      ((first funcs)\n        (apply\n          (apply compose (rest funcs))\n          args)))))", "problem": 58, "user": "504e48ace4b0f6ff3350c498"}, {"code": "(fn [& funs] \n  (fn [& initial-args]\n    (loop [fs (reverse funs) \n           args initial-args]\n      (if (empty? fs)\n        (first args)\n        (recur (rest fs) [(apply (first fs) args)])))))", "problem": 58, "user": "4f2e0369e4b0d6649770a064"}, {"code": "(fn mc [& xs]\r\n  (fn [& args]\r\n    (let [[ox & oxs] (reverse xs)]\r\n      (loop [result (apply ox args) fs oxs]\r\n        (if (empty? fs)\r\n          result\r\n          (recur ((first fs) result) (rest fs)))))))", "problem": 58, "user": "4dd59d8b535dae65d5c462eb"}, {"code": "(fn [& fs]\n  (fn [& xs] (first (reduce #(list (apply %2 %1)) xs (reverse fs)))))", "problem": 58, "user": "504e13fce4b078edc5f593bc"}, {"code": "(fn X [& fs] \n  (let [[f & n] (reverse fs)]\n    (fn Y [& ps] (reduce #(%2 %1) (apply f ps) n))))", "problem": 58, "user": "504e07f3e4b078edc5f593a4"}, {"code": "(fn [& fns]\r\n  (let [[f & fs] (reverse fns)]\r\n    (fn [& args] (reduce #(%2 %1) (apply f args) fs))))", "problem": 58, "user": "504e14c2e4b078edc5f593bf"}, {"code": "(fn co [& fc]\r\n  (fn r [& coll] (first  \r\n    (reduce #(vector (apply %2 %)) coll (reverse fc)))))", "problem": 58, "user": "503354c3e4b0c6c1199c710c"}, {"code": "(fn [& fs] \n  (fn [& args]\n    (first\n      (reduce \n        #(list (apply %2 %1))\n        args\n        (reverse fs)\n      ))\n  ))", "problem": 58, "user": "504e685fe4b0f6ff3350c4ae"}, {"code": "(fn [& fs] (fn [& args] (first (reduce #(vector (apply %2 %)) args (reverse fs)))))", "problem": 58, "user": "504e1abee4b0f6ff3350c45d"}, {"code": "(fn [& fs] (reduce #(fn [& args] (% (apply %2 args))) fs))", "problem": 58, "user": "504f865ee4b0a02f9cffde90"}, {"code": "(fn composition\n  [& fns]\n    (fn [& args]\n      (reduce #(%2 %1) (apply (last fns) args) (rest (reverse fns)))))", "problem": 58, "user": "504f57c7e4b0a02f9cffde71"}, {"code": "(fn c [& more]\n  (fn r [& s]\n    (reduce #(%2 %1) (apply (last more) s) (reverse (butlast more)))))", "problem": 58, "user": "504e04a4e4b078edc5f59397"}, {"code": "(fn my-comp ([f] (fn [& x] (apply f x)))\n  ([g & fs] (fn [& x] (g (apply (apply my-comp fs) x)))))", "problem": 58, "user": "4fc5a693e4b0ee37620e17fc"}, {"code": "(fn [& fs]\n  (let [[f & fs] (reverse fs)]\n    (fn [& args]\n      (reduce #(%2 %1) (apply f args) fs))))", "problem": 58, "user": "50586354e4b06522596eba78"}, {"code": "(fn [& f] (fn [& a] (loop [r (apply (first (reverse f)) a) f (next (reverse f))] (if f (recur ((first f) r) (next f)) r))))", "problem": 58, "user": "4f045946535dcb61093f6bba"}, {"code": "(fn [& args]\r\n    (reduce (fn [tot e] #(tot (apply e %&))) identity args) \r\n    )", "problem": 58, "user": "50588ff1e4b06522596eba7e"}, {"code": "(fn _this_ [ x & more_] (fn [y & more__]  (first (loop [params (reverse (cons x more_ )) ret (cons y more__)]\r\n                  (if (empty? params) ret  \r\n                  (recur (rest params)  (list (apply  (first params) ret))))))))", "problem": 58, "user": "50463347e4b011c5dfee771e"}, {"code": "(fn [& fs]\r\n  (fn [& args]\r\n    (loop \r\n      [f (reverse fs)\r\n       r args]\r\n      (if (empty? f)\r\n        (first r)\r\n        (recur (rest f) [(apply (first f) r)])))))", "problem": 58, "user": "4f9aa97ae4b0dcca54ed6d0e"}, {"code": "(fn [& fs]\n  (fn [& args]\n    (first (reduce #(list (apply %2 %1)) args (reverse fs)))))", "problem": 58, "user": "50435689e4b034ff00315d21"}, {"code": "(fn [& fns] (fn [& x] (first (reduce  #(list (apply %2 %1)) x (reverse fns)))))", "problem": 58, "user": "50563ae2e4b0ce54f56f0405"}, {"code": "(fn [& fns]\n  (reduce (fn [r e]\n(fn [& x]\n  (r (apply e x))))\nfns))", "problem": 58, "user": "4fca2a13e4b0ee37620e184d"}, {"code": "(fn [& functions] (fn [& args] (first (reduce #(vector (apply %2 %)) args (reverse functions)))))", "problem": 58, "user": "4f6fd91ae4b07046d9f4efed"}, {"code": "(fn c [& fns]\n  (fn c-impl [& args]\n    (loop [f (reverse fns) acc args]\n      (if (empty? f)\n        (first acc)\n        (recur (rest f) [(apply (first f) acc)])))))", "problem": 58, "user": "4f046d70535dcb61093f6bc5"}, {"code": "(fn [& fs]\n  (fn [& args]\n    (reduce\n      (fn [v f] (f v))\n      (apply (last fs) args)\n      (reverse (butlast fs)))))", "problem": 58, "user": "504c8165e4b09724c857af31"}, {"code": "(fn [& fs]\n  (reduce (fn [a b] #(b (apply a %&)))\n          (reverse fs)))", "problem": 58, "user": "4f84a4a4e4b033992c121c39"}, {"code": "(fn [& fns]\r\n  (fn [& xs]\r\n    (first (reduce #(vector (apply %2 %1)) xs (reverse fns)))\r\n    )\r\n  )", "problem": 58, "user": "4faa6184e4b081705acca1f1"}, {"code": "(fn [& fs] (let [rfs (reverse fs)] (fn [& args] (reduce (fn [r f] (apply f (list r))) (apply (first rfs) args) (rest rfs)))))", "problem": 58, "user": "5063fe48e4b075d771da6f9e"}, {"code": "(fn compose [& args]\r\n  (fn [& vars] \r\n    (loop [f (reverse args) v vars]\r\n        (if (empty? f) (first (reverse v))\r\n            (recur (rest f) (list (apply (first f) v)))))))", "problem": 58, "user": "50588af1e4b06522596eba7d"}, {"code": "(fn co [ & f ] (fn [ & x ] (if (= 1 (count f)) (apply (first f) x) ((first f) (apply (apply co (rest f)) x ) ))))", "problem": 58, "user": "504f191ae4b0e7ad84dbc4ba"}, {"code": "(fn [& funcs]\n  (reduce (fn [f g]\n            (fn [& args]\n              (f (apply g args))))\n          funcs))", "problem": 58, "user": "50630247e4b05ac47bc68d6b"}, {"code": "(fn  [ & fs]\r\n  (reduce (fn [f f2] (fn [& x] (f (apply f2 x)))) fs))", "problem": 58, "user": "4fb23582e4b081705acca28a"}, {"code": "(fn [& funs]\n  (reduce (fn [f g]\n            (fn [& args]\n              (f (apply g args))))\n          funs))", "problem": 58, "user": "4fe84c74e4b07c9f6fd12c3c"}, {"code": "(fn comp2\n  ([] identity)\n  ([f] f)\n  ([f & r] #(f (apply (apply comp2 r) %&))))", "problem": 58, "user": "50015be1e4b0678c553fc41a"}, {"code": "(fn [& functions]\n  (fn [& args]\n    ((fn step [[f & fs] a]\n       (if fs\n        (f (step fs a))\n        (apply f a)))\n     functions args)))", "problem": 58, "user": "506755b3e4b03d366d7cb2bc"}, {"code": "(fn [& funcs]\n  (let [[f & r] (reverse funcs)]\n    (fn [& args]\n      (reduce #(%2 %1) (apply f args) r))))", "problem": 58, "user": "4fd2e5d8e4b04c3a95aa0427"}, {"code": "(fn [& funcs] \n  ((fn [ flist] \n    \n  \t(partial \n\t\t\t(fn step [[f & flist] & args]\n        \t(if flist\n\t\t\t    (f (apply (partial step flist) args))\n\t\t\t    (apply f args))) flist)\n\t\t) \n\tfuncs))", "problem": 58, "user": "506afdafe4b0a2a5463de37e"}, {"code": "(fn \n  ([f g] #(f (g %)))\n  ([f g h] #(f (g (apply h %&)))))", "problem": 58, "user": "506e0e5ae4b09350ab4199eb"}, {"code": "(fn comp2 [& fns]\n  (let [rfns (reverse fns)]\n    (fn [& args]\n      (loop\n          [acc (apply (first rfns) args)\n           rfns (next rfns)]\n        (println acc rfns)\n        (if (nil? rfns)\n          acc\n          (recur\n           ((first rfns) acc)\n           (next rfns)))))))", "problem": 58, "user": "504ec4d3e4b069badc5a33c9"}, {"code": "(fn compose [& fs]\n  (fn [& args]\n    (let [[f & rs] fs]\n      (if rs\n        (f (apply (apply compose rs) args))\n        (apply f args)\n        )\n      )\n    )\n  )", "problem": 58, "user": "506ab9bae4b05d3b7762c74c"}, {"code": "(fn cmp [f & fs] (if fs\n                     (fn [& args] (f (apply (apply cmp fs) args)))\n                     (fn [& args] (apply f args))))", "problem": 58, "user": "506ef8c3e4b09350ab4199f4"}, {"code": "(fn [& funcs]\n          (fn [& args] (first (reduce #(list (apply %2 %1)) args (reverse funcs)))))", "problem": 58, "user": "50705072e4b07bd6ad9b9f27"}, {"code": "(fn [& f] (fn [& a] (reduce #(%2 %) (apply (last f) a) (reverse (butlast f)))))", "problem": 58, "user": "507056b8e4b07bd6ad9b9f29"}, {"code": "(fn [& fns] (reduce #(fn [& args] (%2 (apply %1 args))) (reverse fns)))", "problem": 58, "user": "4f614976e4b0defedf855fbb"}, {"code": "(fn [& fs] (fn [& args] (first (reduce (fn [acc x] [(apply x acc)])  args (reverse fs)))))", "problem": 58, "user": "4f3b5219e4b0e243712b1f2a"}, {"code": "(fn cmp\n ([f g]   (fn [& xs] (f (apply g xs))))\n ([f g h] (fn [& xs] (f (g (apply h xs)))))\n )", "problem": 58, "user": "506fd0afe4b07bd6ad9b9f23"}, {"code": "#(reduce (fn [x y] (fn [& r] (x (apply y r)))) %&)", "problem": 58, "user": "50548ce8e4b0b1b9d1860ead"}, {"code": "(fn testme [& args]\n  (fn [x & xxs] \n      (let [mylist (reverse args)]\n  (loop [myx x\n\t       myxxs xxs\n\t       lst mylist] (println myx) (println lst) (println myxxs)\n\t         (if (empty? lst)\n\t\t      myx\n\t\t      (recur (if (empty? myxxs) ((first lst) myx) (apply (first lst) (conj myxxs myx)))  '() (rest lst)))))))", "problem": 58, "user": "4f2f6678e4b0d6649770a06e"}, {"code": "(fn [& l] (fn [& xs] (reduce (fn [x y] (y x)) (apply (last l) xs) (rest (reverse l)))))", "problem": 58, "user": "507437c2e4b054001656acd0"}, {"code": "(fn [& fs]\n  (if (empty? fs)\n    identity\n    (fn [& args]\n      (loop [fsr (rest (reverse fs))\n             ret (apply (first (reverse fs)) args)]\n        (if (empty? fsr)\n          ret\n          (recur (rest fsr) ((first fsr) ret)))))))", "problem": 58, "user": "4f32ef71e4b0d6649770a098"}, {"code": "(fn my-comp [& forms]\n  (fn in-mc [& args]\n    (loop [[f & fleft] (reverse forms) fargs args]\n      (if (nil? f)\n        (if (= 1 (count fargs)) (first fargs) fargs)\n        (recur fleft [(apply f fargs)])\n  )))\n)", "problem": 58, "user": "5070e31ee4b0e3170b5a8678"}, {"code": "(fn c\r\n  ([f] f)\r\n  ([f & fs]\r\n    (let [fs (reverse (list* f fs))]\r\n     (fn [& xs]\r\n       ((apply c (reverse (next fs))) (apply (first fs) xs))))))", "problem": 58, "user": "5054c7e1e4b0b1b9d1860eb2"}, {"code": "(fn [& funcs]\n    (fn [& args]\n      (letfn [(recur-apply [seqfunc elements] \n        (if (= 0 (count seqfunc)) elements\n            (recur-apply (rest seqfunc) [(apply (first seqfunc) elements)])))]\n        (first (recur-apply (reverse funcs) args)))))", "problem": 58, "user": "504eff22e4b0e7ad84dbc4a9"}, {"code": "(fn [& args]\n  (fn [& inargs]\n    (first(reduce #(list (apply %2 %1)) inargs (reverse args)))))", "problem": 58, "user": "4fceef7ae4b03432b189f40a"}, {"code": "(fn [& fs]\n  (let [[f & fs] (reverse fs)]\n    (fn [& as]\n      (reduce #(%2 %1) (apply f as) fs))))", "problem": 58, "user": "506a1985e4b01dc6af13f83e"}, {"code": "(fn fnc[& args]\n  (fn rec[& l] \n    (first (apply (fn myrec[a & lz]\n      (if (empty? a)\n      lz\n      (myrec (drop-last a) (apply (last a) lz)))) args l))))", "problem": 58, "user": "4f8b05d2e4b02e764a0a5176"}, {"code": "(fn [x & xs]\r\n  (fn [& args]\r\n    ((fn step [[f & fs] a]\r\n       (if fs\r\n         (f (step fs a))\r\n         (apply f a)))\r\n     (cons x xs) args)))", "problem": 58, "user": "4fecebe1e4b0681fd128dcac"}, {"code": "(fn [& functions]\n  (fn [& args]\n    (first (reduce (fn [result f]\n              [(apply f result)])\n            args\n            (reverse functions)))))", "problem": 58, "user": "4f3e6244e4b0e243712b1f85"}, {"code": "(fn compose [& args]\n  (if (nil? args)\n       identity\n   (fn [& x] ((apply compose (butlast args))\n         (apply (last args) x)))))", "problem": 58, "user": "507db411e4b03c76e5499e06"}, {"code": "(fn __ [& fs]\n  (fn [& args] (first (reduce (fn [f c] (vector (apply c f))) args (reverse fs)))) \n)", "problem": 58, "user": "503f872ee4b00d1a725ff2ac"}, {"code": "(fn my-comp [& funcs]\n  (let [funcs (reverse funcs)\n        fun   (first funcs)\n        funs  (rest funcs)]\n    (fn [& args]\n      (reduce (fn [x f] (f x)) (apply fun args) funs))))", "problem": 58, "user": "50763574e4b0a894bb95bf3d"}, {"code": "(fn [& fns]\n  (fn [& args]\n    (reduce\n      #(%2 %1)\n      (apply (last fns) args)\n      (reverse (butlast fns))\n    )\n  )\n)", "problem": 58, "user": "507eddf4e4b06ce648bcdbfa"}, {"code": "(fn [& fs]\r\n  (reduce\r\n    (fn [g f]\r\n      (fn [& xs] (g (apply f xs))))\r\n    identity fs))", "problem": 58, "user": "50822e03e4b057580b53f4b1"}, {"code": "(fn [& fs] (fn [& es] \n  (first (reduce #(vector (apply %2 %)) es (reverse fs)))))", "problem": 58, "user": "506617c3e4b03d366d7cb2ab"}, {"code": "(fn comp' [& fs]\n    (let [f0 (first fs)\n          fs' (next fs)]\n      (if (empty? fs') f0\n        (fn [& args]\n            (f0 (apply (apply comp' fs') args))))))", "problem": 58, "user": "508157b2e4b0946d0443855c"}, {"code": "(fn [ & fs]\n  (fn [ & args]\n    (loop [fs (reverse fs) args args]\n      (if-let [[f & t] (seq fs)]\n        (recur t [(apply f args)])\n        (first args)))))", "problem": 58, "user": "503a234de4b088a6a14ca76d"}, {"code": "(fn my-comp[& fs]\r\n  (fn [& args]\r\n    (reduce #(%2 %1) \r\n      (apply (last fs) args) (rest (reverse fs)))))", "problem": 58, "user": "4f3242bae4b0d6649770a08f"}, {"code": "#(reduce (fn [f g] (fn [& x] (f (apply g x)))) identity %&)", "problem": 58, "user": "5088082ae4b0198722bd9854"}, {"code": "(fn [& args]\n   (fn [& v]\n     (first (reduce (fn [acc f]\n               [(apply f acc)]\n               ) v (reverse args)))\n     ))", "problem": 58, "user": "503ca47fe4b06c4e0e1fa24f"}, {"code": "(fn cmp\n  ([f] f)\n  ([f & more] (fn [& args] (f (apply (apply cmp more) args)))))", "problem": 58, "user": "5084cb7de4b0fb8f40674bfb"}, {"code": "(fn [& fns]\r\n    (let [fs (reverse fns)]\r\n      (fn [& args]\r\n        (loop [ret (apply (first fs) args)\r\n               to-do (next fs)]\r\n          (if (nil? to-do)\r\n            ret\r\n            (recur\r\n             ((first to-do) ret)\r\n             (next to-do)))))))", "problem": 58, "user": "508b95a0e4b0be79e5b189c6"}, {"code": "(fn [ & fns ] \n  (fn [& args]\n    (reduce #(%2 %1) (apply (last fns) args) (reverse (butlast fns)))))", "problem": 58, "user": "4ec1923f535dfed6da9c6db2"}, {"code": "(fn compose [& fs]\n  (if (empty? (rest fs))\n    (first fs)\n    (fn [& s] \n      ((first fs) (apply (apply compose (rest fs)) s)))))", "problem": 58, "user": "50901b2ee4b0ea685a20f774"}, {"code": "(fn [& fns]\r\n  (fn [& args]\r\n    (reduce #(%2 %1)\r\n            (apply (last fns) args)\r\n            (rest (reverse fns)))))", "problem": 58, "user": "509160dae4b0742c82730aef"}, {"code": "(fn \n  ([f] f)\n  ([f1 f2] (fn [& args] (f1 (apply f2 args))))\n  ([f1 f2 f3] (fn [& args] (f1 (f2 (apply f3 args))))))", "problem": 58, "user": "4ec57410535d6d7199dd36a1"}, {"code": "(fn [ & funcs] (fn [& params] (first (reduce (fn [acc x] (list (apply x acc)) ) params (reverse funcs))) ) )", "problem": 58, "user": "50783762e4b0fc74642bff67"}, {"code": "(fn my-comp [& funs] \n  (let [fs (reverse funs)]\n    (fn [& args]\n      (loop [ret (apply (first fs) args)\n             todo (rest fs)]\n      (if (empty? todo)\n        ret\n        (recur ((first todo) ret) (rest todo)))))))", "problem": 58, "user": "4f08a8a2535dcb61093f6c3d"}, {"code": "(fn [f & fs]\n  (let[g (reverse (conj fs f))]\n    (fn[ & args] (reduce #(%2 %) (apply (first g) args) (next g)))))", "problem": 58, "user": "507c7c8be4b0b083f3ff82ef"}, {"code": "(fn ([a b] \n  #(->> % b a))\n  ([a b c]\n    (fn [& x](->> x (apply c) b a))))\n;;only for test", "problem": 58, "user": "507fbd77e4b089ade05efbd3"}, {"code": "(fn [& fs]\n  (let [[rf & rfs] (reverse fs)]\n    (fn [& as]\n      (reduce\n        #(%2 %)\n        (apply rf as)\n        rfs))))", "problem": 58, "user": "50657775e4b0deb876850599"}, {"code": "(fn [& funcs]\r\n  (fn [& params]\r\n    (loop [fs (reverse funcs) args params]\r\n      (if (not (first fs))\r\n        (if (= 1 (count (flatten args))) (first (flatten args)) (flatten args))\r\n        (recur (next fs) (vector (apply (first fs) args)))))))", "problem": 58, "user": "502d4ea0e4b02fc10c6c6e46"}, {"code": "(fn ComposeFunc [h & t]\n     (if (nil? t)\n       h\n       (fn [& l] (h (apply (apply ComposeFunc t) l)))))", "problem": 58, "user": "503efe01e4b06c4e0e1fa26f"}, {"code": "#(fn [& xs]\n  (let [[f & fs] (reverse %&)]\n    (reduce (fn [v f] (f v))\n    (apply f xs)\n    fs)))", "problem": 58, "user": "5097a95fe4b00ad8bab4e96e"}, {"code": "(fn [& fs] (fn [& xs] (reduce #(%2 %) (apply (last fs) xs) (rest (reverse fs)))))", "problem": 58, "user": "508ee17ae4b0706b2ed3ef8d"}, {"code": "(fn [& fs]\n  (fn [& xs]\n    (reduce #(%2 %1)\n           (apply (last fs) xs)\n           (-> fs reverse rest))))", "problem": 58, "user": "5089ebfee4b03217b26a539f"}, {"code": "(fn [& fns]\n           (fn [& args]\n             (let [[f & fns] (reverse fns)]\n               (reduce #(%2 %1) (apply f args) fns))))", "problem": 58, "user": "4e5f034b535d8a8b8723a2d9"}, {"code": "(fn [& fs]\n  (let [fs (reverse fs)]\n    (fn [& args]\n      (loop [ret (apply (first fs) args)\n             fs (next fs)]\n        (if fs \n          (recur ((first fs) ret) (next fs))\n          ret)))))", "problem": 58, "user": "50053d6ce4b0678c553fc45e"}, {"code": "(fn [ & args]\n  (fn [ & xs]\n    (first (reduce (fn [a b] [(apply b a)]) xs (reverse args)))))", "problem": 58, "user": "5097b556e4b00ad8bab4e970"}, {"code": "(fn [f & fs]\n  (let [fs (reverse (list* f fs))]\n    (fn [& args]\n      (loop [ret (apply (first fs) args) fs (next fs)]\n        (if fs\n          (recur ((first fs) ret) (next fs))\n          ret)))))", "problem": 58, "user": "5084c43be4b0fb8f40674bfa"}, {"code": "(fn fcmp [& fs]\n  (let [bin-cmp (fn [f g] #(f (apply g %&)))]\n    (reduce bin-cmp identity fs)))", "problem": 58, "user": "509e8da7e4b08df8156e9e2f"}, {"code": "(fn [a & b]\n  (let [fs (reverse (list* a b))]\n  (fn [& args]\n    (loop [ret (apply (first fs) args) fs (next fs)]\n      (if fs\n        (recur ((first fs) ret) (next fs))\nret)))))", "problem": 58, "user": "501b1efee4b0b12d9c5f4d82"}, {"code": "(fn [& funs]\n    (reduce (fn [a b]\n              (fn [& args] (a (apply b args)))) funs))", "problem": 58, "user": "4f463dfde4b0d56e7bb92b99"}, {"code": "(fn my-comp \n  ([f g] #(f (apply g %&)))\n  ([f g h] #(f (g (apply h %&)))))", "problem": 58, "user": "4ec7c32c535d6d7199dd36e6"}, {"code": "(fn  ([] identity)\n  ([f] f)\n  ([f g] \n     (fn \n       ([] (f (g)))\n       ([x] (f (g x)))\n       ([x y] (f (g x y)))\n       ([x y z] (f (g x y z)))\n       ([x y z & args] (f (apply g x y z args)))))\n  ([f g h] \n     (fn \n       ([] (f (g (h))))\n       ([x] (f (g (h x))))\n       ([x y] (f (g (h x y))))\n       ([x y z] (f (g (h x y z))))\n       ([x y z & args] (f (g (apply h x y z args))))))\n  ([f1 f2 f3 & fs]\n    (let [fs (reverse (list* f1 f2 f3 fs))]\n      (fn [& args]\n        (loop [ret (apply (first fs) args) fs (next fs)]\n          (if fs\n            (recur ((first fs) ret) (next fs))\n            ret))))))", "problem": 58, "user": "5008d149e4b0144d4f561e41"}, {"code": "(fn comp* [f1 & fns]\n    (if (nil? fns)\n      f1\n      (fn [& args]\n        (f1 (apply (apply comp* fns)\n                   args )))))", "problem": 58, "user": "4daea889edd6309eace4d15b"}, {"code": "(fn [& fs] (fn [& args] (reduce #(%2 %1) (apply (last fs) args) (rest (reverse fs)))))", "problem": 58, "user": "50310b8be4b05b7df5a0b84d"}, {"code": "(fn [& fs]\n  (fn [& args]\n    (first\n     (reduce\n       (fn [x f]\n         [(apply f x)])\n       args\n       (reverse fs)))))", "problem": 58, "user": "4fe13ad7e4b0dd6cd5ce3632"}, {"code": "(fn custom-comp\n  [& fs]\n  (let [reverse-fs (reverse fs)]\n    (fn [& args]\n      (reduce\n        (fn [result f]\n          (f result))\n        (apply (first reverse-fs) args) \n        (rest reverse-fs)))))", "problem": 58, "user": "4dad76588e77d6ed63f12a44"}, {"code": "(fn [& fs] (reduce #(fn [& args] (% (apply %2 args))) fs))", "problem": 58, "user": "4fb1325de4b081705acca276"}, {"code": "(fn cmprec [& fns]\n  (fn [& args]\n    (loop [rfns (reverse fns) args args]\n      (if (empty? rfns)\n        (first args)\n        (recur (rest rfns) (list (apply (first rfns) args)))))))", "problem": 58, "user": "4dd0e8f7535da60f04a96e57"}, {"code": "(fn [& fs]\n    (let [fs (reverse  fs)]\n      (fn [& args]\n        (loop [ret (apply (first fs) args) fs (next fs)]\n          (if fs\n            (recur ((first fs) ret) (next fs))\n            ret)))))", "problem": 58, "user": "509c2c55e4b085ae113522ab"}, {"code": "(fn [& fs]\n  (fn [& xs] (reduce #(%2 %1) (apply (last fs) xs) (-> fs butlast reverse))))", "problem": 58, "user": "4e7f32ee535db966e863cc3a"}, {"code": "(fn [x & xs]\n  (fn [& args]\n    ((fn step [[f & fs] a]\n       (if fs\n         (f (step fs a))\n         (apply f a)))\n     (cons x xs) args)))", "problem": 58, "user": "5013141de4b0f26a0e3320a9"}, {"code": "(fn [& fs]\r\n  (fn [& args]\r\n    (let [[f & fs] (reverse fs)]\r\n      (reduce #(%2 %) (apply f args) fs))))", "problem": 58, "user": "509c03f3e4b085ae113522a8"}, {"code": "(fn b [& m]\n  (fn nn [& n]\n    (loop [mm (drop-last m) l (apply (last m) n)]\n(if (empty? mm)\nl\n(recur (drop-last mm) ((last mm) l))))))", "problem": 58, "user": "4fe97adde4b0547ebccb245e"}, {"code": "(fn comb [& funcs]\n  (fn [& args]\n    (first\n      (reduce #(vector (apply %2 %1)) args (reverse funcs )))))", "problem": 58, "user": "50ae22c3e4b0a40c9cfb08d0"}, {"code": "(fn [& fs]\n  (fn [& args] (reduce #(%2 %) (apply (last fs) args) (reverse (butlast fs)))))", "problem": 58, "user": "50996a38e4b0cae2931060b3"}, {"code": "(fn mycomp\n  [& fns]\n  (fn [& args]\n    (let [fs (reverse fns)]\n      (loop [ret (apply (first fs) args) fs (next fs)]\n        (if fs\n          (recur ((first fs) ret) (next fs))\n          ret)))))", "problem": 58, "user": "50982769e4b04e098a4c726a"}, {"code": "(fn [& fns]\n  (fn [& args]\n    (loop [fs (reverse fns) a args]\n      (if (empty? fs)\n        (first a)\n        (recur (rest fs) [(apply (first fs) a)])))))", "problem": 58, "user": "50843a4ae4b0c98812d0788b"}, {"code": "(fn my-comp [& fns]\n  (if (= 1 (count fns))\n    (fn\n      [& x] (apply (first fns) x))\n    (fn \n      [& x] ((first fns) (apply (apply my-comp (rest fns)) x)))))", "problem": 58, "user": "4ff769bce4b0678c553fc38f"}, {"code": "(fn [& fns]\n  (fn [& args]\n    (first \n     (reduce \n       (fn [res f] (list (apply f res)))\n       args\n       (reverse fns)))))", "problem": 58, "user": "50217818e4b00bba4502f7a7"}, {"code": "(fn a [f & z]\r\n  (if z\r\n    #(f (apply (apply a z) %&))\r\n    f))", "problem": 58, "user": "50b47c46e4b0c464d223d1b8"}, {"code": "(fn [& fns]\n  (let [fns (reverse fns)]\n    (fn [& args]\n      (reduce #(%2 %1) \n              (apply (first fns) args) \n              (rest fns)))))", "problem": 58, "user": "50b67515e4b08fb537db98f3"}, {"code": "(fn [& fs] \n  (fn [& args] \n    (reduce (fn [arg f] (f arg)) \n      (apply (last fs) args) \n      (reverse (butlast fs)))))", "problem": 58, "user": "4ee528fb535d1385b2869d87"}, {"code": "(fn [& func_args]\n  (fn [& args]\n\t\t(let [[func & func_args] (reverse func_args)]\n\t\t\t(reduce #(%2 %1) (apply func args) func_args))))", "problem": 58, "user": "50655366e4b0c838e409d557"}, {"code": "(fn f\n  ([a] a)\n  ([a & r] (fn [& c] (a (apply (apply f r) c)))))", "problem": 58, "user": "50b668dde4b08fb537db98f2"}, {"code": "(fn [x & xs] \n  (fn [& args] \n    ((fn step [[f & fs] a] \n       (if fs \n         (f (step fs a)) \n         (apply f a))) \n     (cons x xs) args)))", "problem": 58, "user": "4f03f3b7535dcb61093f6b85"}, {"code": "(fn [& fs]\n  (reduce (fn [f g] (fn [& args] (f (apply g args)))) \n          identity\n          fs))", "problem": 58, "user": "5027b41ee4b01614d1633fee"}, {"code": "(fn my-comp [f & fx]\n  (if (empty? fx)\n    f\n    (fn [& args] (f (apply (apply my-comp fx) args)))))", "problem": 58, "user": "50aab057e4b056ee0193586b"}, {"code": "(fn [& funcs]\r\n  (fn [& args]\r\n    (loop [funcs (reverse funcs) result args]\r\n      (println funcs result)\r\n      (if (empty? funcs) (first result)\r\n        (recur (rest funcs) (list (apply (first funcs) result)))))))", "problem": 58, "user": "50ba4b9ee4b03e68e4411c7b"}, {"code": "(fn [& f]\n  (fn [& x] \n    (reduce #(%2 %) \n      (apply (last f) x) (rest (reverse f)))))", "problem": 58, "user": "4f956072e4b0dcca54ed6ccf"}, {"code": "(fn [& f] (fn [& g] (reduce #(%2 %1) (apply (last f) g) (reverse (butlast f)))))", "problem": 58, "user": "5071b614e4b0e3170b5a867d"}, {"code": "(fn [& xs]\n  (fn [& x]\n    (loop [funcs (reverse xs)\n            res x]\n           (cond (empty? funcs) (first res)\n                 :else\n                  (recur (rest funcs) (list (apply (first funcs) res)))))))", "problem": 58, "user": "4fccb31be4b0ee37620e1868"}, {"code": "(fn g [f & r]\n  (if (empty? r) f\n      #(f (apply (apply g r) %&))))", "problem": 58, "user": "50a83315e4b054305ba5a830"}, {"code": "(fn [& m]\n  (let [f (reverse m)]\n    (fn [& m]\n      (loop [r (apply (first f) m) f (next f)]\n        (if f\n          (recur ((first f) r) (next f))\n          r)))))", "problem": 58, "user": "4fb54e50e4b081705acca2bb"}, {"code": "(fn my-comp2\n  ([] identity)\n  ([& funcs] \n   (fn [& args]\n     ((fn inner [fs x]\n        (if (empty? fs)\n          x\n          (recur (rest fs) ((first fs) x) )))\n      (reverse (butlast funcs))\n      (apply (last funcs) args)))))", "problem": 58, "user": "50812debe4b01a93d3f38e4c"}, {"code": "(fn [x & xs]\n  (fn [& args]\n    ((fn step [[f & fs] a]\n       (if fs\n         (f (step fs a))\n         (apply f a)))\n     (cons x xs) args)))", "problem": 58, "user": "50456747e4b01f6c9a8b236c"}, {"code": "(fn [& fs]\n    (let [fs (reverse fs)]\n      (fn [& args]\n        (loop [ret (apply (first fs) args) \n               fs (next fs)]\n          (if fs\n            (recur ((first fs) ret) (next fs))\n            ret)))))", "problem": 58, "user": "508e13abe4b0f17d83ea26c7"}, {"code": "(fn [& fs]\n  (fn [& xs]\n    (reduce #(%2 %) (apply (first (reverse fs)) xs) (rest (reverse fs)))))", "problem": 58, "user": "5061cc17e4b0a30dc9a35d34"}, {"code": "(fn [& args] (fn [& l] (reduce #(%2 %1) (apply (last args) l) (rest (reverse args)))))", "problem": 58, "user": "50921f9ae4b09a7d0b586de1"}, {"code": "(fn [& fs]\n  (fn [& xs]\n    (first (reduce #(vector (apply %2 %1)) xs (reverse fs)))))", "problem": 58, "user": "506406c8e4b075d771da6f9f"}, {"code": "(fn [& f]\n  (fn [& p]\n      (reduce #(%2 %) (apply (last f) p) (-> f reverse rest))))", "problem": 58, "user": "5054bc87e4b0b1b9d1860eb0"}, {"code": "(fn [& fs]\n  (fn [& args]\n    (reduce #(%2 %1) (apply (last fs) args) (rest (reverse fs)))))", "problem": 58, "user": "505dcfc8e4b0e6aca564be0d"}, {"code": "(fn [& fns]\n  (fn [& argv]\n    (loop [fns fns args (vec argv)]\n      (let [fs (pop (vec fns)) g (last (vec fns))]\n        (if (= '() fs)\n          (apply g args)\n          (recur fs (vector (apply g args))))))))", "problem": 58, "user": "50bd6033e4b0594b91591c66"}, {"code": "(fn [& f]\n  #((reduce (fn [v f] [(apply f v)]) \n            %& \n            (reverse f)) 0))", "problem": 58, "user": "509251f3e4b09a7d0b586de5"}, {"code": "(fn [& f]\n  (reduce #(fn [& a] (%1 (apply %2 a))) f))", "problem": 58, "user": "50acbd15e4b071b89ef26234"}, {"code": "(\n  fn sol\n\t( \n\t\t[ f1 f2 ] ( \n\t\t\tfn f [ & coll ](\n\t\t\t\tf1 ( apply f2 coll )\n\t\t\t)\n\t\t) \n\t) \n\t(\n\t\t[ f1 f2 & coll] (\n\t\t\t\tapply sol ( sol f1 f2 ) coll\n\t\t)\n\t)\n)", "problem": 58, "user": "50bf7b72e4b0ffd967a66cc1"}, {"code": "(fn [& funs]\n  (let [funs (reverse funs)]\n    (reduce \n      (fn [c fun] (fn [& args] (fun (apply c args))))\n      (fn [& args] (apply (first funs) args))\n      (rest funs))))", "problem": 58, "user": "50c9e5e3e4b0a409464667d7"}, {"code": "(fn [ & ops]\n    (let [ \n          first-op (last ops)\n          rest-ops (reverse (drop-last ops))\n          ]\n    \n        (fn [& args] \n          \n          (reduce #(%2 %1) (apply first-op args) rest-ops)))\n  )", "problem": 58, "user": "50956c2be4b087f34d351ab2"}, {"code": "#(reduce \n  (fn [f1 f2] \n    (fn [& a] \n      (f2 (if (coll? a) \n        (apply f1 a) \n        (f1 a))))) \n  (reverse %&))", "problem": 58, "user": "4f1e4ab5535d64f603146496"}, {"code": "(fn f1 [& f-coll]\r\n  (partial (fn f2 [f-coll & coll]\r\n     (if (= (count f-coll) 1) (apply (first f-coll) coll)\r\n       (f2 (rest f-coll) (apply (first f-coll) coll)))) (reverse f-coll)))", "problem": 58, "user": "505dd5c4e4b0e6aca564be0e"}, {"code": "(fn cr [& fns]\n  (let [order (reverse fns)]\n    (fn compos[& args]\n      (reduce #(%2 %1) (apply (first order) args)\n          (rest order)))))", "problem": 58, "user": "5065bd94e4b0148eb3925aed"}, {"code": "(fn [& fns]\n  (fn [& args]\n    (loop [fs fns a args]\n      (if (empty? fs)\n       (first a)\n       (recur (drop-last fs) [(apply (last fs) a)])))))", "problem": 58, "user": "5054e37fe4b0b1b9d1860eb6"}, {"code": "(fn [& f]\n  (fn [& a]\n    (let [[f & g] (reverse f)]\n      (reduce #(%2 %1) (apply f a) g))))", "problem": 58, "user": "507ef25ce4b0f753b6f9788e"}, {"code": "(fn [& fs]\n  (let [fs-r (reverse fs)]\n    (fn [& xs] (reduce #(%2 %) (apply (first fs-r) xs) (rest fs-r)))))", "problem": 58, "user": "50cb4cf6e4b0f78a8e1645b4"}, {"code": "(fn [& fs]\n  (fn [x & xs]\n    (let [rfs (reverse fs)]\n      (reduce\n        #(%2 %)\n        (if (seq xs)\n          (apply\n            (first rfs)\n            (cons x xs))\n          ((first rfs) x))\n        (rest rfs)))))", "problem": 58, "user": "4f253a49e4b0d66497709ff3"}, {"code": "(fn mycomp [& fs]\n  (let [fl (reverse fs)]\n    (fn [& args] \n      (loop [ret (apply (first fl) args)\n             fl (next fl)]\n        (if (empty? fl)\n          ret\n          (recur ((first fl) ret) (next fl)))))))", "problem": 58, "user": "50c84ba2e4b00bb60fe0c53e"}, {"code": "(fn [& fs]\n  (reduce\n   (fn [g f]\n     (fn [& xs] (g (apply f xs))))\n   identity fs))", "problem": 58, "user": "50b0cffae4b009df37c708c5"}, {"code": "(fn [& fs]\n  (fn [& vs]\n    (reduce #(%2 %1) (apply (first (reverse fs)) vs) (rest (reverse fs)))))", "problem": 58, "user": "5092fe10e4b097f48cc3857e"}, {"code": "(fn [& fns]\n  (reduce (fn [a b]\n            #(a (apply b %&)))\n          fns))", "problem": 58, "user": "4ebaf790535dfed6da9c6d6e"}, {"code": "(fn c [f & fs] \n  (fn [& xs] \n    (if (nil? fs) \n      (apply f xs) \n      (f (apply (apply c (first fs) (rest fs)) xs)))))", "problem": 58, "user": "50733b31e4b0e3170b5a869a"}, {"code": "(fn [& fs]\n\t(fn [& xs]\n\t    (first (reduce (fn [ps f] [(apply f ps)]) xs (reverse fs)))))", "problem": 58, "user": "50d8f4b6e4b01f0871336e74"}, {"code": "(fn [& funcs]\n  (fn [& args]\n    (loop [f (butlast funcs) x (apply (last funcs) args)]\n      (if (empty? f) x\n      (recur (butlast f) ((last f) x)))\n    )\n  )\n)", "problem": 58, "user": "50bfbf25e4b05ae8c1cbbd9b"}, {"code": "(fn [x & xs] \n  (fn [& args] \n    ((fn step [[f & fs] a] \n       (if fs \n         (f (step fs a)) \n         (apply f a))) \n     (cons x xs) args)))", "problem": 58, "user": "50d71a39e4b0159555a1fc79"}, {"code": "(fn ([f g]\n        (fn ([] (f (g)))\n          ([a] (f (g a)))\n          ([a & args] (f (apply g a args)))))\n    ([f g h]\n        (fn ([] (f (g (h))))\n          ([a] (f (g a)))\n          ([a & args] (f (g (apply h a args))))) )\n    )", "problem": 58, "user": "50cae881e4b0f75dcc9a6e51"}, {"code": "(fn c [& fns]\n  (fn [& args]\n      (first (reduce #(list (apply %2 %)) args (reverse fns)))))", "problem": 58, "user": "4fb79872e4b081705acca2d2"}, {"code": ";; The below code is a straight copy from here\n;; http://yyhh.org/blog/2011/05/my-solutions-problems-no-51-75-4clojure-com\n;; Just do not understand the clojure types and they are driving me up the wall.\n;; After wasting more than 9 precious hours of mine that I am not getting back.\n;; I am really feeling crap about this language.\n\n(fn [head & tail]\n    (fn [& y]\n      ((fn foo [[head & tail] b]\n         (if (empty? tail)\n           (apply head b)\n           (head (foo tail b))))\n       (cons head tail) y)))", "problem": 58, "user": "5078300de4b0fc74642bff66"}, {"code": "(fn [& functions]\n    (reduce\n     (fn [f1 f2]\n       (fn [& args]\n         (f1 (apply f2 args)))\n       )\n     functions)\n    )", "problem": 58, "user": "50dcc5c9e4b02e6ac9592c93"}, {"code": "(fn [& xs]\n  (loop [fun identity\n         f (first xs)\n         r (rest xs)]\n    (if (nil? f)\n      fun\n      (recur (fn [& xx] (fun (apply f xx)))\n             (first r)\n             (rest r)))))", "problem": 58, "user": "50981062e4b04e098a4c7268"}, {"code": "(fn [& fns]\n    (fn [& args]\n      (first (reduce (fn [a f]\n        (list (apply f a))) args (reverse fns)))))", "problem": 58, "user": "4ee77f15535d93acb0a66868"}, {"code": "(fn [& fs]\n  (if-not fs\n    identity\n    (let [fsr (reverse fs)]\n      (fn [& args] (reduce #(%2 %1) (apply (first fsr) args) (rest fsr))))))", "problem": 58, "user": "5095f761e4b0ba05ca7aebfd"}, {"code": "(fn c [a & r] (if r #(a (apply (apply c r) %&)) a))", "problem": 58, "user": "4db1fe241254ad5b4805fa77"}, {"code": "(fn [x & xs]\n  (fn [& args]\n    ((fn step [[f & fs] a]\n       (if fs\n         (f (step fs a))\n         (apply f a)))\n     (cons x xs) args)))", "problem": 58, "user": "4eb3fcba535d7eef30807359"}, {"code": "(fn [& fns]\n  (fn [& args]\n    (first\n     (reduce\n      (fn [v f]\n        [(apply f v)])\n      args\n      (reverse fns)))))", "problem": 58, "user": "507b7dbee4b09034bfeeb71e"}, {"code": "(fn [& funcs]\n\t(fn [& args]\n\t\t(first (reduce #(vector (apply %2 %1)) args (reverse funcs)))))", "problem": 58, "user": "50d8de3fe4b01f0871336e72"}, {"code": "(fn [& fs]\n  (fn [& params]\n    (reduce #(%2 %1) (apply (last fs) params) (reverse (butlast fs)))))", "problem": 58, "user": "5021f0b3e4b00bba4502f7ac"}, {"code": "(fn [& fsi] (fn [ & args] \n             (let [fs (reverse fsi)]\n             (loop [res (apply (first fs) args) fsrest (next fs)] \n               (println res, fsrest) \n               (if (nil? fsrest) \n                 res \n                 (recur ((first fsrest) res) (next fsrest)))))))", "problem": 58, "user": "50de11b2e4b061dbdced7217"}, {"code": "(fn[& f]\n        (let [r (reverse f)\n              a (first r)]\n          (fn[& o]\n              (reduce #(%2 %) (apply a o) (rest r)))))", "problem": 58, "user": "4e778d36535d324fb2983d71"}, {"code": "(fn comp2\n  [& fs]\n  (fn [& args] (reduce #(%2 %)\n                 (apply (last fs) args)\n                 (reverse (butlast fs))))\n)", "problem": 58, "user": "50e3ec87e4b0463d32072486"}, {"code": "(fn\n  ([f g]\n     (fn \n       ([x] (f (g x)))\n       ([x y] (f (g x y)))\n       ([x y z] (f (g x y z)))\n       ([x y z a] (f (g x y z a)))))\n  ([f g h] \n     (fn \n       ([x] (f (g (h x))))\n       ([x y] (f (g (h x y))))\n       ([x y z] (f (g (h x y z))))\n       ([x y z a] (f (g (h x y z a)))))))", "problem": 58, "user": "50c9ece0e4b0a409464667d8"}, {"code": "(fn ([f] f)\n  ([f g] \n     (fn \n       ([] (f (g)))\n       ([x] (f (g x)))\n       ([x y] (f (g x y)))\n       ([x y z] (f (g x y z)))\n       ([x y z & args] (f (apply g x y z args)))))\n  ([f g h] \n     (fn \n       ([] (f (g (h))))\n       ([x] (f (g (h x))))\n       ([x y] (f (g (h x y))))\n       ([x y z] (f (g (h x y z))))\n       ([x y z & args] (f (g (apply h x y z args))))))\n  ([f1 f2 f3 & fs]\n    (let [fs (reverse (list* f1 f2 f3 fs))]\n      (fn [& args]\n        (loop [ret (apply (first fs) args) fs (next fs)]\n          (if fs\n            (recur ((first fs) ret) (next fs))\n            ret))))))", "problem": 58, "user": "50e1bdd8e4b019fc399ce17f"}, {"code": "(fn komp [& fs] (fn [& args] (reduce #(%2 %) (apply (last fs) args) (rest (reverse fs)))))", "problem": 58, "user": "50dfb660e4b061dbdced7228"}, {"code": "(fn [& fs] \n  (fn [& args] \n    (let [[ff & rf] (reverse fs), x (apply ff args)]\n      (reduce #(%2 %1) x rf))))", "problem": 58, "user": "50d0d4c8e4b00b15ecee976a"}, {"code": "(fn [& fns]\n  (fn [& args]\n    (loop [v (apply (last fns) args)\n           fns (rest (reverse fns))]\n      (if (seq fns)\n        (recur ((first fns) v)\n               (rest fns))\n        v))))", "problem": 58, "user": "4ffc10aae4b0678c553fc3d6"}, {"code": "(fn [& fs]\n  (fn [& args]\n    (let [fs (reverse fs)]\n      (loop [ret (apply (first fs) args) fs (rest fs)]\n        (if (seq fs)\n          (recur ((first fs) ret) (rest fs))\n          ret)))))", "problem": 58, "user": "50e3cf55e4b01912b3285c45"}, {"code": "(fn [& fns]\n  (fn [& args]\n    (reduce (fn [input f] (f input)) (apply (last fns) args) (rest (reverse fns)))))", "problem": 58, "user": "4f3e5e87e4b0e243712b1f83"}, {"code": "(fn\n([f g]\n     (fn\n       ([] (f (g)))\n       ([x] (f (g x)))\n       ([x y] (f (g x y)))\n       ([x y z] (f (g x y z)))\n       ([x y z & args] (f (apply g x y z args)))))\n  ([f g h]\n     (fn\n       ([] (f (g (h))))\n       ([x] (f (g (h x))))\n       ([x y] (f (g (h x y))))\n       ([x y z] (f (g (h x y z))))\n       ([x y z & args] (f (g (apply h x y z args))))))\n)", "problem": 58, "user": "50e87252e4b0ebbe794eb7e7"}, {"code": "(fn [& funcs] (reduce (fn [acc foo] (fn [& args] (acc (apply foo args)))) funcs))", "problem": 58, "user": "50e8a340e4b0ebbe794eb7ed"}, {"code": "(fn [& f] \n  (fn [& v] \n    (reduce #(%2 %) \n            (apply (last f) v) \n            (rest (reverse f)))))", "problem": 58, "user": "50e7dd5de4b077ad597af36b"}, {"code": "(fn cmp [& f]\n  (if (< (count f) 2)\n    (fn [& a] (apply (first f) a))\n    #((first f) (apply (apply cmp (rest f)) %&))\n    ))", "problem": 58, "user": "50e8ff6be4b0ebbe794eb7f3"}, {"code": "(fn [& funs]\n     (fn [& args]\n       (loop [result  (apply (first (reverse funs)) args)\n              f (next (reverse funs))]\n         (println result)\n         (println f)\n         (if (empty? f)\n           result\n           (recur ((first f) result)(rest f) )))))", "problem": 58, "user": "50e87427e4b0ebbe794eb7e8"}, {"code": "(fn [& fs]\n  (let [[f & fs] (reverse fs)]\n    (fn [& xs]\n      (reduce #(%2 %1) (apply f xs) fs))))", "problem": 58, "user": "5017d9a9e4b0adbf98d88a3f"}, {"code": "(fn [& fcol]\n  (fn [n1 & n2]\n    (letfn [(applier [f2 x2 y2]\n                     (if (= y2 '()) (f2 x2) (apply f2 x2 y2)))]\n    (loop [f (reverse fcol) x n1 y n2]\n    (if (= f '())\n      x\n      (recur (rest f) (applier (first f) x y) nil ))))))", "problem": 58, "user": "50bfe725e4b080409b860f26"}, {"code": "(fn [& fs]\n  (fn [& xs]\n    (let [[f & fs] (reverse fs)]\n      (reduce #(%2 %) (apply f xs) fs))))", "problem": 58, "user": "4f410b63e4b0e243712b1fc5"}, {"code": "(fn [& fs]\n  (reduce (fn [f g]\n            (fn [& args]\n              (f (apply g args))))\n          identity\n          fs))", "problem": 58, "user": "50e4b066e4b0cb9ec68fbca6"}, {"code": "(fn [& f] (fn [& a] (let [[i & r] (reverse f)] (reduce #(%2 %) (apply i a) r))))", "problem": 58, "user": "4db29f98535df7e46ed9b6c1"}, {"code": "(fn [& funcs]\n  (fn [& args] \n    (apply identity \n           (reduce \n            (fn [arguments f] [(apply f arguments)]) args \n            (reverse funcs)))))", "problem": 58, "user": "50ef9a7ae4b0bdaecbb47d9e"}, {"code": "(fn my-comp [& fns]\n  (let [fns (reverse fns)]\n    (fn [& args]\n      (first\n        (reduce (fn [a f]\n                  (println \"a\" a)\n                  (println \"f\" f)\n                  (list (apply f a)))\n                args\n                fns)))))", "problem": 58, "user": "50a7ef7fe4b090657f4a5ce0"}, {"code": "(fn f [& m] (if (empty? (rest m)) (first m) (fn [& n] ((first m) (apply (apply f (rest m)) n)))))", "problem": 58, "user": "50ed4626e4b01236b1d4983c"}, {"code": "(fn [& s]\n            (fn [& z]\n                (first (let [p (reverse s)]\n                            (loop [fun p res z]\n                               (if (empty? fun)\n                                   res\n                                   (recur (rest fun) \n                                          (if (= 1 (count res))\n                                              [((first fun) (first res))]\n                                              [(apply (first fun) res)]))))))))", "problem": 58, "user": "4f03f197535dcb61093f6b84"}, {"code": "(fn [& functions]\n  (fn [& args]\n    (let [rfs (reverse functions)\n          first-function (first rfs)\n          rest-functions (rest rfs)]\n      (loop [[f & fs] rest-functions\n             result (apply first-function args)]\n        (if (nil? f)\n          result\n          (recur fs (f result)))))))", "problem": 58, "user": "50ed3c6be4b01236b1d4983b"}, {"code": "(fn [& fs]\n  (fn [& args]\n    (loop [res (apply (last fs) args)\n           fs (butlast fs)]\n      (if (nil? fs)\n        res\n        (recur ((last fs) res) (butlast fs))))))", "problem": 58, "user": "500854c4e4b028e089d3518c"}, {"code": "(fn [& x] \n       (fn [& y] \n         ((fn q [z l] \n           (if (empty? l) \n             z \n             (q ((last l) z) (butlast l)))\n           ) (apply (last x)  y) (butlast x))))", "problem": 58, "user": "50ef3e5de4b0a78662fa2652"}, {"code": "(fn \n  ([f g] (fn \n    \t\t([x] (f (g x)))\n    \t\t([x y] (f (g x y)))))\n  \n  ([f g h] (fn \n    \t\t([x] (f (g (h x))))\n    \t\t([x & args] (f (g (apply h x args))))))\n  )", "problem": 58, "user": "4e6e3aac535d5021c1a89603"}, {"code": "(fn [x & xs]\n  (fn [& args]\n    ((fn step [[f & fs] a]\n       (if fs\n         (f (step fs a))\n         (apply f a)))\n     (cons x xs) args)))", "problem": 58, "user": "504eb604e4b069badc5a33c4"}, {"code": "(fn    \n    ([f g] (fn [x] (f (g x))))\n    ([f g h] (fn \n               ([x] (f (g (h x))))\n               ([a b] (f (g (h a b))))\n               ([a b c d] (f (g (h a b c d))))\n               )\n     ))", "problem": 58, "user": "4f038567535dcb61093f6b0c"}, {"code": "(fn [& fs] \n  (let [ [fst & rst] (reverse fs)]\n\t(fn [& args] \n      (reduce \n     \t(fn [x f] (apply f [x]))\n     \t(apply fst args)\n       \trst))))", "problem": 58, "user": "50aa8776e4b056ee01935867"}, {"code": "(fn [& x]\n             (fn [& p]\n               (reduce #(%2 %1) (apply (last x) p) (rest (reverse x)))))", "problem": 58, "user": "50ed5d1be4b06330c1f87c37"}, {"code": "(fn\n  ([] identity)\n  ([f] f)\n  ([f g] \n     (fn \n       ([] (f (g)))\n       ([x] (f (g x)))\n       ([x y] (f (g x y)))\n       ([x y z] (f (g x y z)))\n       ([x y z & args] (f (apply g x y z args)))))\n  ([f g h] \n     (fn \n       ([] (f (g (h))))\n       ([x] (f (g (h x))))\n       ([x y] (f (g (h x y))))\n       ([x y z] (f (g (h x y z))))\n       ([x y z & args] (f (g (apply h x y z args))))))\n  ([f1 f2 f3 & fs]\n    (let [fs (reverse (list* f1 f2 f3 fs))]\n      (fn [& args]\n        (loop [ret (apply (first fs) args) fs (next fs)]\n          (if fs\n            (recur ((first fs) ret) (next fs))\n            ret))))))", "problem": 58, "user": "50bc23e4e4b0594b91591c3c"}, {"code": "(fn [& fns] (fn [& x] (reduce #(%2 %1) (apply (last fns) x) (reverse (drop-last fns)) ) ) )", "problem": 58, "user": "50fbdacfe4b0d10d794c19f0"}, {"code": "(fn c1 [& fns]\n  (fn [& xs]\n    (reduce #(%2 %1)\n            (apply (last fns) xs)\n            (reverse (butlast fns)))))", "problem": 58, "user": "50978ca4e4b00ad8bab4e966"}, {"code": "(fn \n  ([f1 f2] (fn [args] (f1 (f2 args))))\n  ([f1 f2 f3] (fn [& args] (f1 (f2 (apply f3 args))))))", "problem": 58, "user": "5006b7d2e4b0678c553fc48c"}, {"code": "(fn [& fs]\n  (let [gs (reverse fs)]\n    (fn [& args]\n      (reduce\n       (fn [result f] (f result))\n       (apply (first gs) args)\n       (rest gs)))))", "problem": 58, "user": "50fbf811e4b0d10d794c19f1"}, {"code": "(fn f-comp [f & fs]\n  (if (seq fs)\n    (fn [& args]\n      (f (apply (apply f-comp fs) args)))\n      f))", "problem": 58, "user": "50eddbc4e4b06330c1f87c4b"}, {"code": "(fn com \n  ([] identity)\n  ([f] f)\n  ([f g] \n     (fn \n       ([] (f (g)))\n       ([x] (f (g x)))\n       ([x y] (f (g x y)))\n       ([x y z] (f (g x y z)))\n       ([x y z & args] (f (apply g x y z args)))))\n  ([f g h] \n     (fn \n       ([] (f (g (h))))\n       ([x] (f (g (h x))))\n       ([x y] (f (g (h x y))))\n       ([x y z] (f (g (h x y z))))\n       ([x y z & args] (f (g (apply h x y z args)))))))", "problem": 58, "user": "5101192ae4b0bef64c30e266"}, {"code": "(fn\n  ([] identity)\n  ([f] f)\n  ([f g] \n     (fn \n       ([] (f (g)))\n       ([x] (f (g x)))\n       ([x y] (f (g x y)))\n       ([x y z] (f (g x y z)))\n       ([x y z & args] (f (apply g x y z args)))))\n  ([f g h] \n     (fn \n       ([] (f (g (h))))\n       ([x] (f (g (h x))))\n       ([x y] (f (g (h x y))))\n       ([x y z] (f (g (h x y z))))\n       ([x y z & args] (f (g (apply h x y z args))))))\n  ([f1 f2 f3 & fs]\n    (let [fs (reverse (list* f1 f2 f3 fs))]\n      (fn [& args]\n        (loop [ret (apply (first fs) args) fs (next fs)]\n          (if fs\n            (recur ((first fs) ret) (next fs))\n            ret))))))", "problem": 58, "user": "50ab44b2e4b0f65d68208509"}, {"code": "(fn [& fns]\n  (fn [& args]\n    (reduce\n      (fn [f s] (s f))\n      (apply (last fns) args)\n      (reverse (butlast fns)))))", "problem": 58, "user": "50e4f4e9e4b049a987753896"}, {"code": "(fn [& f] (fn [& a]  ((reduce (fn [v g] [(apply g v)]) a (reverse f)) 0)))", "problem": 58, "user": "4ff67852e4b0678c553fc37e"}, {"code": "(fn [x & mores]  (fn [& args] ((fn rrun [[ar & ars] a] (if ars (ar (rrun ars a)) (apply ar a))) (cons x mores) args)))", "problem": 58, "user": "4eb0175b535d7eef30807336"}, {"code": "(fn [& fns]\n  (reduce (fn [f g] \n            (fn [& args]\n              (f (apply g args))))\n          fns))", "problem": 58, "user": "510db6cde4b078ea71921145"}, {"code": "(fn [& f] (fn [& a] (first (reduce #(do [(apply %2 %)]) a (reverse f)))))", "problem": 58, "user": "5107b86de4b05b2b4eee7495"}, {"code": "(fn [& funcs] \n  (let [fs (reverse funcs)]\n    (fn [& args] \n\t  (loop [ret (apply (first fs) args) fs (next fs)]\n        (if (> (count fs) 0)\n          (recur ((first fs) ret) (rest fs))\n           ret)))))", "problem": 58, "user": "4e74e119535d7a570dd295bc"}, {"code": "(fn [& fns]\n   (partial #(if (empty? %1)\n               (first %&)\n               (recur (rest %1) (list (apply (first %1) %&))))\n            (reverse fns)))", "problem": 58, "user": "51105c7fe4b04c71fce993ef"}, {"code": "(fn c [& fs]\n  (let [fs (reverse fs)]\n\t  (fn [& args]\n    \t(loop [r (apply (first fs) args)\n               fs (next fs)]\n          (if fs\n            (recur ((first fs) r) (next fs))\n            r)))))", "problem": 58, "user": "4db2f208535df7e46ed9b6c9"}, {"code": "(fn\n  ([f g] (fn ([& args] (f (apply g args)))))\n  ([f g h] (fn ([& args] (f (g (apply h args)))))))", "problem": 58, "user": "5106bc8ae4b01150e115ebec"}, {"code": "(fn [& x]\n  (fn [& y]\n    (let [[f & g] (reverse x)]\n      (reduce #(%2 %1) (apply f y) g))))", "problem": 58, "user": "5102489de4b00c483ae176f6"}, {"code": "(fn compose [& funs]\n\t(fn [& args] (first (reduce #(list (apply %2 %)) args (reverse funs)))))", "problem": 58, "user": "50ed8a5fe4b06330c1f87c3d"}, {"code": "(fn [& fns]\n  (let [[f1 f2 f3] (reverse fns)]\n    (fn [& args]\n      ((or f3 identity) (f2 (apply f1 args))))))", "problem": 58, "user": "50e3e108e4b01912b3285c48"}, {"code": "(fn [& fns]\n  (let [fns (reverse fns)]\n  (fn [& args]\n    (loop [f (rest fns)\n           res (apply (first fns) args)]\n      (if (seq f)\n        (recur (rest f) ((first f) res))\n        res)))))", "problem": 58, "user": "511c91ace4b00c2a1fa7ff7a"}, {"code": "(fn [& xs]\n  (reduce #(fn [& more] (%2 (apply %1 more))) (reverse xs)))", "problem": 58, "user": "5102ac9de4b00c483ae176fa"}, {"code": "(fn [& fs]\n  (let [fs (reverse fs)]\n    (fn [& args]\n      (let [rslt (apply (first fs) args)]\n        (letfn [(apply-all [fs rslt]\n                  (if-let [f (first fs)]\n                    (apply-all (rest fs) (f rslt))\n                    rslt))]\n          (apply-all (rest fs) rslt))))))", "problem": 58, "user": "50d93c53e4b0fd36a4b89223"}, {"code": "(fn [& functions]\n  (let [funcs (reverse functions)]\n    (fn [& args]\n      (loop [returned (apply (first funcs) args) func (next funcs)]\n        (if func\n          (recur ((first func) returned) (next func))\n          returned)))))", "problem": 58, "user": "509331d9e4b097f48cc38580"}, {"code": "(fn my-comp [& fns]\n  (fn retfn [& args]\n    (loop [fns-left (rest (reverse fns))\n           ret (apply (first (reverse fns)) args)]\n      (if (empty? fns-left) ret\n        (recur (rest fns-left) ((first fns-left) ret)\n               )))))", "problem": 58, "user": "5119f3d5e4b06c8af0111818"}, {"code": "(fn [& fs]\n    (fn [& args]\n      (let [[f & rs] (reverse fs)]\n        (reduce (fn [args f] (f args)) (apply f args) rs))))", "problem": 58, "user": "4e50ad74535dc968683fc4ec"}, {"code": "(fn compz [& fns]\n    (fn [& a]\n      (if (nil? fns)\n        (first a)\n        ((apply compz (drop-last fns))\n         (apply (last fns) a)))))", "problem": 58, "user": "50589113e4b06522596eba7f"}, {"code": "(fn [& f]\n  (fn [& a]\n    (let [r (reverse f)]\n      (reduce #(apply %2 (list %)) (apply (first r) a) (rest r)))))", "problem": 58, "user": "50ebd63ce4b04edc3377703c"}, {"code": "(fn [& f]\n  (fn [& args] (first (reduce #(list (apply %2 %1)) args (reverse f)))))", "problem": 58, "user": "511b810ce4b07ab9ec456182"}, {"code": "(fn [& args]\n    (partial (fn doit [fns, & param]\n      (if (> (count fns) 0)\n        (do (doit (rest fns) (apply (first fns) param)))\n        (if (> (count param) 1) (flatten param) (first param)))) (reverse args)) )", "problem": 58, "user": "50d3b03fe4b030b634c368b9"}, {"code": "(fn [x & xs]\n  (fn [& args]\n    ((fn step [[f & fs] a]\n       (if fs\n         (f (step fs a))\n         (apply f a)))\n     (cons x xs) args)))", "problem": 58, "user": "503539dee4b0ed9c821488f6"}, {"code": "(fn comb [& funcs]\n  (fn [& args]\n    (first\n      (reduce #(vector (apply %2 %1)) args (reverse funcs )))))", "problem": 58, "user": "51195e77e4b055cfb310d499"}, {"code": "(fn comp-new\n  ([] identity)\n  ([f] f)\n  ([f g]\n     (fn\n       ([] (f (g)))\n       ([x] (f (g x)))\n       ([x y] (f (g x y)))\n       ([x y z] (f (g x y z)))\n       ([x y z & args] (f (apply g x y z args)))))\n  ([f g h]\n     (fn\n       ([] (f (g (h))))\n       ([x] (f (g (h x))))\n       ([x y] (f (g (h x y))))\n       ([x y z] (f (g (h x y z))))\n       ([x y z & args] (f (g (apply h x y z args))))))\n  ([f1 f2 f3 & fs]\n    (let [fs (reverse (list* f1 f2 f3 fs))]\n      (fn [& args]\n        (loop [ret (apply (first fs) args) fs (next fs)]\n          (if fs\n            (recur ((first fs) ret) (next fs))\n            ret))))))", "problem": 58, "user": "51181009e4b0e0897831a60f"}, {"code": ";(fn \n;  ([f1 f2]\n;   (fn [& args]\n;     (f1 (apply f2 args))))\n;  ([f1 f2 f3]\n;   (fn [& args]\n;     (f1 (f2 (apply f3 args))))))\n\n(fn [& args]\n  (reduce\n   (fn [composition f]\n     (fn [& args]\n        (composition (apply f args))))\n   identity\n   args))", "problem": 58, "user": "511f88eee4b085952a83535f"}, {"code": "(fn mycomp [& f]  \n  (fn [& x]\n    (let [f1 (last f)\n          rf (drop-last 1 f)\n          fresult (apply f1 x)]\n      (if (empty? rf) \n        fresult \n        ((apply mycomp rf) fresult)))))", "problem": 58, "user": "4e9ff8d0535d7eef3080729c"}, {"code": "(fn [& f] (reduce #(fn [& x] (% (apply %2 x))) f))", "problem": 58, "user": "4f8c813de4b02e764a0a519f"}, {"code": "(fn [& fs]\n  (fn [& xs]\n    (let [rfs (reverse fs)]\n      (reduce #(%2 %1) (apply (first rfs) xs) (rest rfs)))))", "problem": 58, "user": "50f9739ce4b0e7c80cb15a4d"}, {"code": "(fn [& f] (fn [& x] \n            (let [fs (reverse f)]\n              (reduce #(%2 %1) (apply (first fs) x) (rest fs)))))", "problem": 58, "user": "4fa05b99e4b0dcca54ed6d47"}, {"code": "(fn [& funcs]\n  (fn [& args]\n     (loop [r (apply (last funcs) args) fs (drop-last funcs)]\n       (if (empty? fs)\n         r\n         (recur ((last fs) r) (drop-last fs))))))", "problem": 58, "user": "50bce014e4b0594b91591c63"}, {"code": "(fn [ & funs]\n  (fn [& args]\n  \t(loop [rfuns (rest (reverse funs))\n           args (apply (first (reverse funs)) args)]\n      (if (empty? rfuns) args        \n      \t(recur (rest rfuns) ((first rfuns) args))))))", "problem": 58, "user": "5081566ce4b0946d0443855b"}, {"code": "(fn [& funcs]\n  (fn [& args]\n    (loop [res (apply (last funcs) args),\n           to-apply (rest (reverse funcs))]\n      (if (seq to-apply)\n        (recur ((first to-apply) res) (rest to-apply))\n        res))))", "problem": 58, "user": "511623cbe4b0d4f670fd2fe1"}, {"code": "(fn [& fs]\n  (reduce (fn [f g] #(f (apply g %&)))\n          fs))", "problem": 58, "user": "510d9d61e4b078ea71921141"}, {"code": "(fn c ([f & fs] (fn [& args] (f (apply (apply c fs) args)))) ([f] f))", "problem": 58, "user": "4e9a1512535dbda64a6f6b6e"}, {"code": "(fn my-comp\n  [& fs]\n  (fn [& init-args]\n    (first (reduce\n     (fn [args f]\n       (list (apply f args)))\n     init-args\n     (reverse fs)))))", "problem": 58, "user": "511720eae4b0063b4e3e16da"}, {"code": "(fn [& more]\n  (fn [& a]\n    (loop [fs (rest (reverse more))\n           r (apply (first (reverse more)) a)]\n      (if (nil? (first fs))\n        r\n        (recur (rest fs) ((first fs) r))))))", "problem": 58, "user": "5123ac8ee4b061b4c6f0e0b1"}, {"code": "(fn [ & fs]\n  (condp = (count fs)\n    0 identity\n    1 (first fs)\n    (reduce (fn [f1 f2] (fn [& args] (f2 (apply f1 args)))) (reverse fs))\n    ))", "problem": 58, "user": "51281b25e4b03a34742b4304"}, {"code": "(fn [& f]\n  (reduce #(fn [& x] (% (apply %2 x))) f))", "problem": 58, "user": "51256b40e4b05d10e3e395f8"}, {"code": "(fn [& fs] (fn [& args]\n                \t(reduce #(%2 %1)\n                            (apply (last fs) args)\n                            (rest (reverse fs)))))", "problem": 58, "user": "510acd6ee4b078ea719210f4"}, {"code": "(fn comps \n    ([func] (fn [& args] (apply func args)))\n    ([func & others] (fn [& args] (func (apply (apply comps others) args))))\n)", "problem": 58, "user": "511cca27e4b00c2a1fa7ff7d"}, {"code": "(fn _comp [& functions]\n  (if (= 1 (count functions))\n    (first functions)\n    (fn [& args]\n      ((first functions) (apply (apply _comp (rest functions)) args)))))", "problem": 58, "user": "510cd1dde4b078ea71921124"}, {"code": "(fn comp' [& fs]\n  (let [[f & fs] (reverse fs)]\n    (fn [& xs] (reduce #(%2 %) (apply f xs) fs))))", "problem": 58, "user": "4fca4c37e4b0ee37620e184f"}, {"code": "(fn [& fs]\n  #(reduce (fn [v f] (f v)) (apply (last fs) %&) (rest (reverse fs)))\n  )", "problem": 58, "user": "4fbbcf0ce4b081705acca2ee"}, {"code": "(fn [& funcs]\n  (fn [& args]\n    (first (reduce (fn [results f] (list (apply f results))) args (reverse funcs)))))", "problem": 58, "user": "4fc53390e4b081705acca389"}, {"code": "(fn [& f]\n     (fn [& x]\n       (if (= (count x) 1)\n       (loop [result (first x) functions (reverse f)]\n         (if functions\n           (recur ((first functions) result) (next functions))\n           result\n           )\n         )\n       \n       (loop [result (apply (first (reverse f)) x) functions (rest (reverse f))]\n         (if functions\n           (recur ((first functions) result) (next functions))\n           result\n           )\n         )\n       \n       )\n       )\n     )", "problem": 58, "user": "5106dc1be4b01150e115ebf0"}, {"code": "(fn [& fs]\n  (let [[f & fs] (reverse fs)]\n    (fn [& args]\n        (reduce #(%2 %1) (apply f args) fs))))", "problem": 58, "user": "4f525fdce4b03ad3f0c10d37"}, {"code": "(fn fun \n  ([x] x)\n  ([f g]\n     (fn\n       ([] (f (g)))\n       ([x] (f (g x)))\n       ([x y] (f (g x y)))\n       ([x y z] (f (g x y z)))\n       ([x y z & args] (f (apply g x y z args)))))\n  ([f g h]\n     (fn\n       ([] (f (g (h))))\n       ([x] (f (g (h x))))\n       ([x y] (f (g (h x y))))\n       ([x y z] (f (g (h x y z))))\n       ([x y z & args] (f (g (apply h x y z args))))))\n)", "problem": 58, "user": "4e2164ff535d04ed9115e815"}, {"code": "(fn [& functions]\n  (fn [& v]\n    (first (reduce #(vector (apply %2 %1)) v (reverse functions)))))", "problem": 58, "user": "512d3304e4b040332b905b2d"}, {"code": "(fn mycomp [& fargs]\n  (fn [& args]\n    (loop [fargs fargs\n           result args]\n      (if (empty? fargs)\n        (apply identity result)\n        (recur (butlast fargs) [(apply (last fargs) result)])))))", "problem": 58, "user": "512474ede4b02c3f2a072cce"}, {"code": "(fn comp'\n  [& fns]\n  (fn\n    [& args]\n    (loop [value (apply (last fns) args)\n           stack (rest (reverse fns))]\n      (if (seq stack)\n        (recur ((first stack) value) (rest stack))\n        value))))", "problem": 58, "user": "5131104ae4b09e21d785bdfe"}, {"code": "(fn [& fs]\n  (let [fs (reverse fs)]\n    (fn [& args]\n      (loop [gs (next fs)\n             res (apply (first fs) args)]\n        (if (seq gs)\n          (recur (next gs) ((first gs) res))\n          res)))))", "problem": 58, "user": "511442d0e4b0e9c109bb74d5"}, {"code": "(fn mycomp [& fc]\n  (fn [& coll] \n    (first  \n       (reduce #(vector (apply %2 %)) coll (reverse fc)))))", "problem": 58, "user": "5125745ae4b05d10e3e395f9"}, {"code": "(fn my-comp\n    ([f1 f2]\n        (fn [& coll] (f1 (apply f2 coll))))\n    ([f1 f2 f3]\n        (fn [& args]\n            (f1 (f2 (apply f3 args))))))", "problem": 58, "user": "5132c6f0e4b021281ec7b6d3"}, {"code": "(fn [& fs]\n  (fn [& args] \n    (first (reduce #(list (apply %2 %1)) args (reverse fs)))))", "problem": 58, "user": "50d3ec8be4b030b634c368bb"}, {"code": "(fn [& fns] (reduce \n             (fn [f f2] (fn [& args] (f (apply f2 args)))) \n             fns))", "problem": 58, "user": "50e0d5a3e4b061dbdced723d"}, {"code": "(fn mycp[x & xs]\n              (cond (empty? xs) x :else\n              (fn [& y] (x  (apply (apply mycp xs) y ) )  )\n              )\n)", "problem": 58, "user": "504ffa26e4b0a02f9cffdead"}, {"code": "(fn [& fs]\n  (fn [& x]\n    (reduce #(%2 %) (apply (last fs) x) (rest (reverse fs)))))", "problem": 58, "user": "51057b2be4b06d28cacc92e8"}, {"code": "(fn [& fs]\n  (let [[f & fs] (reverse fs)]\n    (fn [& args]\n      (reduce #(%2 %1)\n              (apply f args) fs))))", "problem": 58, "user": "4dada426c9a9d6ed2a99dc57"}, {"code": "(fn [& fns]\n  (let [fs (reverse fns)]\n    (fn [& args]\n      (loop [currentValue (apply (first fs) args) fs (next fs)]\n        (if fs\n          (recur ((first fs) currentValue) (next fs))\n          currentValue)))))", "problem": 58, "user": "4fe8da4de4b0547ebccb2429"}, {"code": "(fn aaa [& args] \n             \n        (fn [& x] \n\n           (if (= (count x) 2)\n             (reduce #(%2 %1) ((last args) (first x) (second x)) (reverse (butlast args))) \n             \n             \n             \n                (if (= (count x) 1)\n                  \n                      (reduce #(%2 %1) (flatten x) (reverse args))\n             \t\t  (reduce #(%2 %1) (apply (last args) x) (reverse (butlast args)))\n             \n                 )\n             \n             \n             )\n                )\n                \n                )", "problem": 58, "user": "5105ed16e4b01150e115ebe2"}, {"code": "(fn [& funs] (let [funs (reverse funs)] (fn [& args] (loop [ret (apply (first funs) args) funs (next funs)] (if funs (recur ((first funs) ret) (next funs)) ret)))))", "problem": 58, "user": "5137c3b0e4b0509a8b470482"}, {"code": "(fn [& fs] (fn [& args] (reduce #(%2 %1) (apply (last fs) args) (rest (reverse fs)))))", "problem": 58, "user": "513d121fe4b0e544971636a2"}, {"code": "(fn my-comp [& fs]\n  (reduce\n   (fn [acc, f]\n     (fn [& args]\n       (acc (apply f args))))\n   fs))", "problem": 58, "user": "51365524e4b04ac1f358dd52"}, {"code": "(fn [& fs]\n  (fn [& args]\n    (first (reduce #(list(apply %2 %1)) args (reverse fs)))))", "problem": 58, "user": "504e12ade4b078edc5f593b7"}, {"code": "(fn\n  [& fns]\n  (fn [& init-paramters]\n    (let [fns (reverse fns)\n          result (apply (first fns) init-paramters)]\n      (loop [fns (rest fns) result result]\n        (if (empty? fns) \n          result\n          (recur (rest fns) ((first fns) result)))))))", "problem": 58, "user": "4fdf566fe4b05e33b9224f99"}, {"code": "(fn f ([x y]\n       (fn [v] (x (y v))))\n  ([x y z]\n       (fn [& v] (x (y (apply z v))))))", "problem": 58, "user": "512f06c5e4b0762be4c7aad7"}, {"code": "(fn [& fs] (let\n             [g  (last fs)\n              gs (-> fs reverse rest)]\n             (fn [& args] (reduce #(%2 %1) (apply g args) gs))))", "problem": 58, "user": "51307b84e4b08c712d3fae39"}, {"code": "(fn [ & fs ]\n  (let [ [f0 & fs'] (reverse fs)]\n    (fn [ & xs ]\n      (reduce (fn [x f] (f x)) (apply f0 xs) fs' ))))", "problem": 58, "user": "50fa01bce4b07934dda8b0ba"}, {"code": "(fn [& fns]\n    (fn [& args]\n      (let [[f & fns] (reverse fns)]\n        (reduce #(%2 %1) (apply f args) fns))))", "problem": 58, "user": "50b35486e4b03ea88043356a"}, {"code": "(fn mycomp ([f1 f2] (let [f (fn[x] (f1 (f2 x)))] f)) ([f1 f2 f3] (let [f (fn[& args] (f1 (f2 (apply f3 args))))] f)))", "problem": 58, "user": "5138d08be4b0a5db03d727db"}, {"code": "#(reduce (fn[valFn, fun]\n\t\t\t(fn[& args]\n        \t\t(fun (apply valFn args))))\n         (reverse %&))", "problem": 58, "user": "5141fafbe4b0b50abeb46b28"}, {"code": "(fn [& funcs]\n  (let [fs (reverse funcs)]\n    (fn [& args]\n      (loop [ret (apply (first fs) args)\n             fs (next fs)]\n        (if fs\n          (recur ((first fs) ret) (next fs))\n          ret)))))", "problem": 58, "user": "509b152be4b0412cdea6eb1e"}, {"code": "(fn [& fs] (let [fs (reverse fs)] (fn [& x] \n             (loop [ret (apply (first fs) x) fs (next fs)]\n               (if fs (recur ((first fs) ret) (next fs)) ret )))))", "problem": 58, "user": "51424cc8e4b0b50abeb46b34"}, {"code": "(fn [& f]\n  (let [[g & f] (reverse f)]\n    (fn [& a]\n      (reduce #(%2 %1) (apply g a) f))))", "problem": 58, "user": "4fe8fda4e4b0547ebccb2438"}, {"code": "(fn [& fs] (fn [& args] (first (reduce #(list (apply %2 %)) args (reverse fs)))))", "problem": 58, "user": "50e3fe8fe4b0463d32072488"}, {"code": "(fn \n  ([f1 f2 ]\n    (fn [& args]\n      (f1 (apply f2 args))))\n  ([f g & fs]\n    (fn [& args]\n      (let [fs (reverse (list* f g fs))]\n        (loop [fss (rest fs) ret (apply (first fs) args)]\n          (if fss\n            (recur (next fss) ((first fss) ret))\n            ret))))))", "problem": 58, "user": "513cb853e4b0b86ece9f322b"}, {"code": "(fn [& fs]\n  (fn [& args] (first  \n    (reduce #(vector (apply %2 %)) args (reverse fs)))))", "problem": 58, "user": "512eb723e4b0b740abc5982b"}, {"code": "(fn\n  ([f g] #(f (apply g %&)))\n  ([f g h] #(f (g (apply h %&)))))", "problem": 58, "user": "513dcc1ce4b0825f97f7f964"}, {"code": "(fn [& fs] (fn [& args] (first (reduce (fn [arg f] (list (apply f arg))) args (reverse fs)))))", "problem": 58, "user": "5145832be4b0e8879607340a"}, {"code": "(fn [& fs]\n  (fn [& args]\n    (first (reduce (fn [ret f] [(apply f ret)]) args (reverse fs)))))", "problem": 58, "user": "514721c6e4b0d520409ed392"}, {"code": "(fn [& r] (let [c (fn [f g] #(g (apply f %&)))] (reduce c (reverse r))))", "problem": 58, "user": "4ff3df0fe4b0678c553fc355"}, {"code": "(fn [& fs]\n  (fn [& args]\n    (let [[f & fs] (reverse fs)]\n      (reduce #(%2 %1) (apply f args) fs))))", "problem": 58, "user": "5117c31ee4b0e0897831a60c"}, {"code": "#(reduce (fn [f g] (fn [& a] (f (apply g a)))) %&)", "problem": 58, "user": "513f0565e4b051389b345b3b"}, {"code": "(fn [& fs]\n  (fn [& args] \n    (first (reduce #(vector (apply %2 %1)) args (reverse fs)))))", "problem": 58, "user": "4f21838fe4b0d66497709fd2"}, {"code": "(fn [& fncs] \n(fn [& args] (reduce #(%2 %1) (apply (first (reverse fncs)) args)  (rest (reverse fncs)))))", "problem": 58, "user": "5124619ae4b02c3f2a072ccd"}, {"code": "(fn [& f]\n  (let [s #(%2 %)\n        f (reverse f)]\n    #(reduce s (apply (first f) %&) (rest f))))", "problem": 58, "user": "514d8084e4b019235f6c0588"}, {"code": "(fn ([] identity)\n  ([f] f)\n  ([f g] \n     (fn \n       ([] (f (g)))\n       ([x] (f (g x)))\n       ([x y] (f (g x y)))\n       ([x y z] (f (g x y z)))\n       ([x y z & args] (f (apply g x y z args)))))\n  ([f g h] \n     (fn \n       ([] (f (g (h))))\n       ([x] (f (g (h x))))\n       ([x y] (f (g (h x y))))\n       ([x y z] (f (g (h x y z))))\n       ([x y z & args] (f (g (apply h x y z args))))))\n  ([f1 f2 f3 & fs]\n    (let [fs (reverse (list* f1 f2 f3 fs))]\n      (fn [& args]\n        (loop [ret (apply (first fs) args) fs (next fs)]\n          (if fs\n            (recur ((first fs) ret) (next fs))\n            ret))))))", "problem": 58, "user": "514fd753e4b0b449e54b8e00"}, {"code": "(fn comb [x & xs]\n  (if x\n    (if (first xs)\n      (fn [z & zs] (x (apply (apply comb xs) z zs)))\n      (fn [z & zs] (apply x z zs)))))", "problem": 58, "user": "5110b8bae4b04c71fce993f4"}, {"code": "(fn [& fs] (fn [& x] (let [fs (reverse fs)] (loop [[f & fs] fs x x] (if (nil? f) (first x) (recur fs [(apply f x)]))))))", "problem": 58, "user": "50742549e4b054001656accf"}, {"code": ";with help of source of comp\n(fn\n  ([f g]\n    (fn\n      ([] (f (g)))\n      ([x] (f (g x)))))\n  ([f g h]\n    (fn\n      ([] (f (g (h))))\n      ([x y] (f (g (h x y))))\n      ([x y z a] (f (g (h x y z a)))))))", "problem": 58, "user": "505b9084e4b032b709c81371"}, {"code": "(fn [& fs] (fn[& as] (first (reduce #(vector (apply %2 %)) as (reverse fs)))))", "problem": 58, "user": "4f296a80e4b0d6649770a02a"}, {"code": "(fn f [a & x] (\n  if (empty? x) a\n  (fn [& p] (a (apply (apply f x) p))))\n  )", "problem": 58, "user": "514457fbe4b0b4fb4ace5f43"}, {"code": "(fn [x & xs]\n   (fn [& args]\n     ((fn step [[f & fs] a]\n        (if fs\n          (f (step fs a))\n          (apply f a)))\n      (cons x xs) args)))", "problem": 58, "user": "514e4ae4e4b019235f6c0594"}, {"code": "(fn my-comp\n  ([f g]\n     (fn\n       ([x] (f (g x)))\n       ([x & more] (f (apply g x more)))))\n  ([f g h]\n     (fn\n       ([x y] (f (g (h x y))))\n       ([x y & more] (f (g (apply h x y more)))))))", "problem": 58, "user": "511b9017e4b00c2a1fa7ff6b"}, {"code": "(fn mycomp [& fsq]\n   (if\n     (= 1 (count fsq))\n       (fn [& args] (apply (first fsq) args))\n       (fn [& args] ((first fsq) (apply (apply mycomp (rest fsq)) args)))))", "problem": 58, "user": "515737f0e4b0b0b4b87062d0"}, {"code": "(fn [& fs]\n   (fn [& args]\n     (let [v (apply (last fs) args)]\n       (reduce #(%2 %) v (rest (reverse fs))))))", "problem": 58, "user": "515a6151e4b0394f658fe241"}, {"code": "(fn o [& funs]\n  (let [[f & fs] (reverse funs)]\n  (fn [& parms]\n    (reduce #(%2 %) (apply f parms) fs))))", "problem": 58, "user": "515c9f14e4b069911535cf16"}, {"code": "(fn [& funcs]\n  (let [flist (reverse funcs)]\n    (reduce (fn [acc fun] (fn [& args] (fun (apply acc args))))\n            (first flist)\n            (rest flist))))", "problem": 58, "user": "515828b8e4b0a069fd272c71"}, {"code": "(fn mycomp [ & fns1]\n  (fn [ & args1 ]\n    (loop [ fns (reverse  fns1)\n            args args1]\n      (let [mfn (first fns)]\n        (println \"HERE with \" mfn \" and \" args)\n        (if-not mfn\n          (first args)\n          (recur (rest fns) (list (apply mfn args))))))))", "problem": 58, "user": "5018ed15e4b011a2e0bf6412"}, {"code": "(fn\t[& fs]\n\t(let [fs (reverse fs)]\n\t  (fn [& args]\n\t      (reduce #(%2 %1) (apply (first fs) args) (rest fs)))))", "problem": 58, "user": "5142ea50e4b0c172af7558ca"}, {"code": "(fn [& fns]\n  (let [[f & fns] (reverse fns)]\n    (fn [& args]\n      (reduce #(%2 %1)\n              (apply f args)\n              fns))))", "problem": 58, "user": "515ead6be4b049add99a053e"}, {"code": "(fn !\n  ([f] f)\n  ([f & fns]\n    (fn [& args]\n      (f (apply (apply ! fns) args)))))", "problem": 58, "user": "513b43ede4b067e25a345ed3"}, {"code": "(fn[& fs] (fn[& x] (reduce #(%2 %) (apply (last fs) x) (rest (reverse fs)))))", "problem": 58, "user": "5093ca51e4b097f48cc38585"}, {"code": ";(fn cmp\n  ;([f] (fn [& args] (apply f args)))\n  ;([f1 f2](fn [& args]\n   ;         (f1 (apply f2 args))))\n  ;([f1 f2 & fs] (fn [& args]\n                   ;(f1 (apply (apply cmp f2 fs) args)))))\n\n(fn cmp [f & fs]\n  (if fs\n    #(f (apply (apply cmp fs) %&))\n    f))", "problem": 58, "user": "51533ecde4b0252ac4b16619"}, {"code": "(fn\n  [& fs]\n  (fn \n    [& args] \n    (reduce #(%2 %) (apply (last fs) args) (rest (reverse fs)))))", "problem": 58, "user": "514f0723e4b019235f6c0599"}, {"code": "(fn com [& fs]\n  (let [fs (reverse fs)]\n  (fn [& b]\n    (reduce #(%2 %1) (apply (first fs) b) (rest fs)))))", "problem": 58, "user": "50c8697ce4b00bb60fe0c53f"}, {"code": "(fn f [x & y] (fn [& z] (if (empty? y) (apply x z) (x (apply (apply f y) z)))))", "problem": 58, "user": "514d398ee4b019235f6c0583"}, {"code": "(fn [& fs]\n    (fn [& xs]\n      (loop [vals xs\n             funcs (reverse fs)]\n        (if (empty? funcs)\n          (first vals)\n          (recur\n            (list (apply (first funcs) vals))\n            (next funcs))))))", "problem": 58, "user": "5165a235e4b079ad97ec44ac"}, {"code": "(fn\n  [& fcoll]\n  (fn\n    [& x]\n    ((fn it\n      [t f]\n      (if-not\n        (empty? f)\n        (it (vector (apply (last f) t)) (-> f count (- 1) (take f)))\n        (first t)\n      ))\n     x fcoll\n    )\n  )\n)", "problem": 58, "user": "5162757ee4b03cfa3774b3fe"}, {"code": "(fn xxx  \n  ([f] f)\n  ([f1 f2] (fn\n              ([] (f1 (f2)))\n              ([a] (f1 (f2 a)))\n              ([a b] (f1 (f2 a b)))\n              ([a b c] (f1 (f2 a b c)))\n              ([a b c & args] (f1 (apply f2 a b c args)))))\n   ([f1 f2 f3] (fn\n                 ([] (f1 (f2 (f3))))\n                 ([a] (f1 (f2 (f3 a))))\n                 ([a b] (f1 (f2 (f3 a b))))\n                 ([a b c] (f1 (f2 (f3 (a b c)))))\n                 ([a b c & args] (f1 (f2 (apply f3 a b c args)))))))", "problem": 58, "user": "5163a7bbe4b055933a9ca02f"}, {"code": "(fn [& fs]\n  (fn [& args]\n    (loop [ret (apply (last fs) args) fs (butlast fs)]\n      (if fs\n        (recur ((last fs) ret) (butlast fs))\n        ret))))", "problem": 58, "user": "50b1d166e4b03ea880433554"}, {"code": "(fn x [x & xs]\n   (println x)\n   (println xs)\n  (fn [& args]\n    (println args)\n    ((fn step [[f & fs] a]\n       (if fs\n         (f (step fs a))\n         (apply f a)))\n     (cons x xs) args)))", "problem": 58, "user": "51696bcde4b03f62cda68ce7"}, {"code": "(fn cc [f & fs]\n        (fn [& args]\n          (if fs\n            (f (apply (apply cc fs) args))\n            (apply f args))))", "problem": 58, "user": "50f48298e4b004d364930527"}, {"code": "(fn [& fns]\n    (fn [& arguments]\n        (reduce\n            (fn [args fun] (fun args) )\n            (apply (last fns) arguments)\n            (rest (reverse fns)))))", "problem": 58, "user": "516385cee4b055933a9ca02d"}, {"code": "(fn [& m] (reduce (fn outer [a b] (fn inner [& z] (a (apply b z)))) m))", "problem": 58, "user": "5150a7d7e4b03e678e393abb"}, {"code": ";(fn comp2 [& fs]\n;  (fn [& args]\n;    (reduce #(apply %2 [%])\n;            (apply (last fs) args)\n;            (rest (reverse fs)))))\n(fn comp3 [& fs]\n  (fn [& args]\n    (let [[f & rf] (reverse fs)]\n      (reduce #(%2 %) (apply f args) rf))))", "problem": 58, "user": "515ffbfbe4b0e2be8aa20bdd"}, {"code": "(fn c [a & r] (if r #(a (apply (apply c r) %&)) a))", "problem": 58, "user": "51740b65e4b0d277d717bc67"}, {"code": "(fn c [f & fs] \n  (if fs \n    (do\n      #(f (apply (apply c fs) %&))) \n    f))", "problem": 58, "user": "4eab612d535d7eef30807316"}, {"code": "(fn _comp [f & fns]\n  (cond\n    (empty? fns) f\n    :else (fn [& args]\n            (f (apply (apply _comp fns) args)))))", "problem": 58, "user": "50cfcad6e4b00b15ecee9752"}, {"code": "(fn [& fs]\n  (fn [& args]\n    (reduce\n     (fn [v f] (f v))\n     (apply (last fs) args)\n     (drop 1 (reverse fs)))))", "problem": 58, "user": "5173726be4b098276e74652c"}, {"code": "(fn [& xs] (fn [& ys] (reduce #(%2 %1) (apply (last xs) ys) (rest (reverse xs)))))", "problem": 58, "user": "50c6fad1e4b00bb60fe0c52d"}, {"code": "(fn c [f & args]\n  (if (empty? args)\n    f\n    (fn [& x] (f (apply (apply c args) x)))))", "problem": 58, "user": "515f8a0de4b0e2be8aa20bce"}, {"code": "(fn compose [& xs]\n  (if (empty? (rest xs)) \n    (first xs)\n    (fn [& x] \n      ((first xs) \n       (apply (apply compose (rest xs)) x)\n      )\n    )\n  )\n)", "problem": 58, "user": "515fb48fe4b0e2be8aa20bd5"}, {"code": "(fn mycomp[& fnlist]\n   (fn [arg & more]\n     \n     (let [revfnlist (reverse fnlist)]\n       \n       (reduce \n         (fn [acc f]\n          (f acc)                      \n         )\n        (apply (first revfnlist) arg more)\n      \n        (rest revfnlist)\n       )\n      )\n     )\n   )", "problem": 58, "user": "4fb03cf4e4b081705acca262"}, {"code": "(fn mycomp [& fs]\n    (let [fs (reverse fs)]\n      (fn [& args]\n        (loop [ret (apply (first fs) args) fs (next fs)]\n          (if fs\n            (recur ((first fs) ret) (next fs))\n            ret)))))", "problem": 58, "user": "517a025ce4b01aacecbecbe6"}, {"code": "(fn [x & xs]\n  (fn [& args]\n    ((fn step [[f & fs] a]\n      (if fs\n        (f (step fs a))\n        (apply f a))) \n    (cons x xs) args)))", "problem": 58, "user": "51757af0e4b085adf681d873"}, {"code": "(fn [& fs]\n  (reduce \n   \t(fn [f g]\n     \t#(f (apply g %&))\n     ) \n   fs)\n)", "problem": 58, "user": "517adc6ce4b0925c997201c4"}, {"code": "(fn composition [& f]\n  (letfn [(stop-position [f] (= 0 (count f)))\n          (comp-iter [f & value]\n                     (if (stop-position f)\n                       (first value) ; value will always be wrapped in a list because it's a variable list of arguments!\n                       (comp-iter (rest f) (apply (first f) value))))]\n    (let [funs (reverse f)]\n    \t(fn [& value] (apply comp-iter funs value)))))", "problem": 58, "user": "517531c6e4b07031762f2eea"}, {"code": "(fn [& funcs]\n  (letfn [(sup [x funcs] (let [[f & restf] funcs]\n               (if (empty? restf) (apply f x) (f (sup x restf) ) ) ))] \n         (fn [& x] (sup x funcs)  ) )\n )", "problem": 58, "user": "51729002e4b044b2ef48a850"}, {"code": "(fn f [& fs]\n  (let [[f & fs] (reverse fs)]\n    (fn [& xs]\n      (reduce #(%2 %) (apply f xs) fs))))", "problem": 58, "user": "515e8ce2e4b049add99a053d"}, {"code": "(fn ([x y] (fn [z] (x (y z))))\n    ([x y z] (fn [& t] (x (y (apply z t))))))", "problem": 58, "user": "4ed286d4535d44c135fd68d7"}, {"code": "(fn c [a & r] (if r #(a (apply (apply c r) %&)) a))", "problem": 58, "user": "5157c711e4b0b0b4b87062d5"}, {"code": "(fn [& fs]\n  (let [rfs (reverse (list* fs))]\n    (fn [& xs]\n      (loop [ret (apply (first rfs) xs)\n             ifs (next rfs)]\n        (if ifs\n          (recur ((first ifs) ret) (next ifs))\n          ret)))))", "problem": 58, "user": "5125d963e4b05d10e3e395fe"}, {"code": "(fn \n  [& fns]\n  (fn [& args]\n    (let [[f & fns] (reverse fns)]\n      (reduce #(%2 %1) \n              (apply f args) \n              fns))))", "problem": 58, "user": "51804bcbe4b04f45bde7d901"}, {"code": "(fn [& funs]\n  (fn [& l]\n    (loop [ret (apply (last funs) l)\n           funs (butlast funs)]\n      (if funs\n        (recur ((last funs) ret) (butlast funs))\n        ret))))", "problem": 58, "user": "5163b06be4b055933a9ca030"}, {"code": "(fn [& fns]\n          (reduce \n           (fn [fs g]\n             (fn [& args] (fs (apply g args))))\n           (fn [& args] (if (= 1 (count args)) (first args) args))\n           fns))", "problem": 58, "user": "515cf9b5e4b00901442db1d4"}, {"code": "(fn [& x]\n  (fn [& y]\n    (reduce #(%2 %) (apply (last x) y) (rest (reverse x)))))", "problem": 58, "user": "513b77f3e4b00f740c76c403"}, {"code": "(fn ccomp [& fns]\n   (fn [& args]\n     (let [fns (reverse fns)]\n       (reduce\n        (fn [v f] (f v))\n        (apply (first fns) args)\n        (rest fns)))))", "problem": 58, "user": "51684318e4b03f62cda68cd6"}, {"code": "(fn ([& fns]\n    (let [fs (reverse fns)]\n      (fn [& args]\n        (loop [ret (apply (first fs) args) fs (next fs)]\n          (if fs\n            (recur ((first fs) ret) (next fs))\n            ret))))))", "problem": 58, "user": "4eec82fe535d93acb0a668ae"}, {"code": "(fn my-comp\n  [& fns]\n  (fn [x & more]\n    (let [rfns (reverse fns)\n          ffn (first rfns)\n          fr (apply ffn (list* x more))]\n      (loop [f (rest rfns)\n             r fr]\n        (if (empty? f)\n          r\n          (recur (rest f) ((first f) r)))))))", "problem": 58, "user": "4f2942ace4b0d6649770a01e"}, {"code": "(fn [& fs]\n  (let [fs (reverse fs)]\n    (fn [& args]\n      (loop [ret (apply (first fs) args)\n             fs (next fs)]\n        (if fs\n       (recur ((first fs) ret) (next fs))\n       ret)))))", "problem": 58, "user": "5016ac54e4b052339a490e7b"}, {"code": "(fn [& fns]\n  (fn [& x]\n    (reduce #(%2 %) (apply (last fns) x) (reverse (butlast fns)))))", "problem": 58, "user": "518696c1e4b0c40be512d708"}, {"code": "(fn my-compose [& fs]\n      (if (= (count fs) 1)\n          (first fs)\n          (fn [& args]\n              ((apply my-compose (butlast fs)) (apply (last fs) args)))))", "problem": 58, "user": "5186134ce4b0da5a5be3bac7"}, {"code": "(fn [& f] (fn [& a] (reduce #(%2 %1) (apply (last f) a) \n                            (rest (reverse f)))))", "problem": 58, "user": "4f29651ce4b0d6649770a028"}, {"code": "(fn [& fx]\n  (reduce #(fn [& x] (%1 (apply %2 x))) fx))", "problem": 58, "user": "51364acfe4b04ac1f358dd51"}, {"code": "(fn [& funcs]\n  (fn [& args]\n    (reduce #(%2 %1) (apply (last funcs) args) (rest (reverse funcs)))))", "problem": 58, "user": "514d7e29e4b019235f6c0587"}, {"code": "(fn co [f & rest] (if (empty? rest) f (fn res [& args] (f (apply (apply co rest) args)))))", "problem": 58, "user": "5134973ce4b0230e9f713b42"}, {"code": "(fn [& fs]\n  (loop [remaining (rest fs)\n         result (first fs)]\n    (if (empty? remaining)\n      result\n      (recur (rest remaining) (fn [& a] (result (apply (first remaining) a)))))))", "problem": 58, "user": "51899891e4b0288ada3dbdab"}, {"code": "(fn cmp [& fs]\n  (fn [& xs] \n    (let [x (apply (last fs) xs)]\n      (reduce #(%2 %1) x (reverse (butlast fs))))))", "problem": 58, "user": "50a4f36be4b0344e360f3bc9"}, {"code": "(fn [& fcoll]\n  (fn [& coll]\n    (reduce #(%2 %1)\n            (apply (last fcoll) coll)\n            (reverse (drop-last fcoll)))))", "problem": 58, "user": "51780f88e4b03d69594194c9"}, {"code": "(fn [& fns] \n  (fn [& args] \n    (let [fns (reverse fns)]\n      (reduce #(%2 %1) (apply (first fns) args) (rest fns)))))", "problem": 58, "user": "5112bbdde4b0350614f07a7c"}, {"code": "(fn\n  ([] identity)\n  ([& funcs]\n    (let [fs (reverse funcs)]\n      (fn [& args]\n        (loop [result (apply (first fs) args) fs (next fs)]\n          (if fs\n            (recur ((first fs) result) (next fs))\n            result))))))", "problem": 58, "user": "51460e4ce4b04ef915e37314"}, {"code": "(fn f [& args]\n  (fn [& coll]\n    (loop [coll coll args (reverse args)]\n      (if (empty? args)\n        (first coll)\n        (recur (list (apply (first args) coll)) (rest args))))))", "problem": 58, "user": "51750cd4e4b07031762f2ee5"}, {"code": "(fn [& fs]\n  (let [[h & t] (reverse fs)]\n    (fn [& as]\n      (reduce #(%2 %1) (apply h as) t))))", "problem": 58, "user": "51933b41e4b0c663c5d86ca2"}, {"code": "(fn [& f]\n  (fn [& x]\n    ((fn post [[f & fs] x]\n      (if fs\n        (f (post fs x))\n        (apply f x)))\n    f x)))", "problem": 58, "user": "518ccf6be4b05e6c8537e386"}, {"code": "(fn [& fs]\n  (let [[f & fs] (reverse fs)]\n    (fn [& xs]\n      (reduce #(%2 %1) (apply f xs) fs))))", "problem": 58, "user": "51805d22e4b0e3fc13e244df"}, {"code": "(fn [& f] \n  (fn [& args] (first (reduce #(do [(apply %2 %)]) args (reverse f)))))", "problem": 58, "user": "519b2570e4b0ac1b7dced6a3"}, {"code": "(fn \n  ([] identity)\n  ([ & fs ]\n   (let [fs (reverse fs)]\n     (fn [& args]\n       (loop [result (apply (first fs) args) fs (next fs)]\n         (if fs\n           (recur ((first fs) result) (next fs))\n           result))))))", "problem": 58, "user": "50377d53e4b0af0658af77ad"}, {"code": "(fn ([f g](fn[& c](f(apply g c))))\n  ([f g h](fn[& c](f(g(apply h c))))))", "problem": 58, "user": "4de8a7d7535d08e6dec9fdfe"}, {"code": "(fn [& funcs]\n    (fn [& args]\n      (loop [v args, flist funcs]\n        (if (empty? flist)\n          (v 0)\n          (recur [(apply (last flist) v)] (butlast flist))))))", "problem": 58, "user": "504e0517e4b078edc5f5939a"}, {"code": "(fn mycomp [& fns]\n  (if (= 1 (count fns))\n    #(apply (first fns) %&)\n  \t#((apply mycomp (butlast fns)) (apply (last fns) %&))))", "problem": 58, "user": "51944aaae4b0142f60b4aedc"}, {"code": "(fn mycomp [& funcs]\n     (fn [& args]\n        (if (empty? funcs)\n            (first args)\n            ((apply mycomp (butlast funcs))\n             (apply (last funcs) args)))))", "problem": 58, "user": "51a4d53ae4b0def3c5c58699"}, {"code": "(fn [& fs] (fn [& x] \n(loop [ls (drop-last fs) t (apply (last fs) x)]\n(if (empty? ls) t\n(recur (drop-last ls) ((last ls) t))))))", "problem": 58, "user": "517945dce4b0684c1c981a43"}, {"code": "(letfn [(revcomp [& args]\n                 (let [lastfn (last args)\n                       firstfns (map (partial nth args) (range (dec (count args))))]\n                   (if (= 1 (count args))\n                     lastfn\n                     (fn [& x] ((apply revcomp firstfns) (apply lastfn x))))))]\n               revcomp)", "problem": 58, "user": "51a768e0e4b0da5f497bde84"}, {"code": "(fn mycomp [& args]\n        (reduce #(fn [& args] (%2 (apply %1 args))) (reverse args)))", "problem": 58, "user": "51a8f0c6e4b08d8ec191b821"}, {"code": "(fn [& fs]\n    (loop [[f & fs :as lst] fs\n           cont identity]\n      (if (empty? lst)\n        cont\n        (recur fs (fn [& acc] (cont (apply f acc)))))))", "problem": 58, "user": "51131da8e4b0350614f07a83"}, {"code": "(fn [& fns] \n  (fn [& arg] \n    (first \n     (reduce (fn [r f] [(apply f r)]) arg (reverse fns))\n     )))", "problem": 58, "user": "519b7d76e4b02a926d9a436e"}, {"code": "(fn [& fns]\n  (fn [& args]\n    (first \n      (reduce \n        (fn [m f] (list (apply f m))) \n        args \n        (reverse fns)))))", "problem": 58, "user": "5073de20e4b054001656acca"}, {"code": "(fn\n ([f] (fn [& more] (apply f  more)))\n ([f g] (fn [& more] (f (apply g  more))))\n ([f g h] (fn [& more] (f (g (apply h  more)))))\n )", "problem": 58, "user": "4f90dc2ae4b0dcca54ed6c92"}, {"code": "(fn [& fs]\n  (fn [& xs]\n    (first (reduce #(vector (apply %2 %1)) xs (reverse fs)))))", "problem": 58, "user": "50bc4e73e4b0594b91591c3d"}, {"code": "(fn [& fns]\n    (fn [& args]\n      (first (reduce (fn [new-args f] (list (apply f new-args))) args (reverse fns)))))", "problem": 58, "user": "5141abf1e4b02fd87f5064c3"}, {"code": ";; Because we need to be [initially] variadic we use & args below and re-wrap\n;; in a vector each time\n(fn [& fs]\n  (fn [& args]\n    (first (reduce #(vector (apply %2 %1))\n                   args\n                   (reverse fs)))))", "problem": 58, "user": "50f94727e4b0e7c80cb15a49"}, {"code": "(fn mycomp [& fns]\n  (fn [& args]\n    (first (reduce (fn [acc x]\n                     (list (apply x acc)))\n                   args\n                   (reverse fns))) ))", "problem": 58, "user": "51ac6360e4b09397d510976c"}, {"code": "(fn f [& c] (if (= (count c) 1) (first c) (fn [& x] ((first c) (apply (apply f (rest c)) x)))))", "problem": 58, "user": "519964cbe4b0aa09cbc0b849"}, {"code": "(fn [& fs]\n  #(first (reduce (fn [a f] [(apply f a)]) %& (reverse fs))))", "problem": 58, "user": "50a2f901e4b029e8bace362a"}, {"code": "(fn [& fns]\n  (fn [& args]\n    ((reduce\n     #(vector (apply %2 %1))\n     args\n     (reverse fns)) 0)\n    ))", "problem": 58, "user": "51aa2b4fe4b04e3dc0c27b21"}, {"code": "(fn cmp [& fs]\n  (if (empty? fs)\n    identity\n    (fn [& args]\n      ((apply cmp (butlast fs))\n       (apply (last fs) args)))))", "problem": 58, "user": "51672d15e4b079759a74a5e7"}, {"code": "(fn [& more]\n    (reduce\n     (fn [acc, sym] (fn [& x] (sym (apply acc x))))\n     (reverse more)))", "problem": 58, "user": "51b38769e4b026427ecf067f"}, {"code": "(fn [& fs]\n  (fn [& xs]\n    (first (reduce #(vector (apply %2 %1)) xs (reverse fs)))))", "problem": 58, "user": "51b793d3e4b0d906fcd71d38"}, {"code": "(fn [& f]\n  (fn [& n]\n    (reduce #(%2 %1)\n            (apply (last f) n)\n            (rest (reverse f)))))", "problem": 58, "user": "51b3f109e4b0f094dd986fa9"}, {"code": "(fn [& fns] (fn [& args] (reduce #(%2 %) (apply (last fns) args) (rest (reverse fns)))))", "problem": 58, "user": "4ddbf54e535d02782fcbe9ff"}, {"code": "(fn [& fns]\n  (fn [& args]\n    (let [[f & fns] (reverse fns)]\n      (reduce #(%2 %1) (apply f args) fns))))", "problem": 58, "user": "5133e51ae4b0d7a043de8cf6"}, {"code": "(fn [& f]\n  (let [fs (reverse f)]\n    (fn [& args]\n      (loop [ret (apply (first fs) args) \n             fs (next fs)]\n        (if fs\n          (recur ((first fs) ret) (next fs))\n          ret)))))", "problem": 58, "user": "50a5b7e9e4b0aa96157e2610"}, {"code": "(fn [& fns]\n  (fn [& args]\n    (loop [rfns (rest (reverse fns))\n           v (apply (last fns) args)]\n      (if (seq rfns) (recur (rest rfns) ((first rfns) v))\n        v))))", "problem": 58, "user": "4fa340b4e4b081705acca18c"}, {"code": "(fn ([f1 f2] \n     (fn \n       \t([x] (f1 (f2 x)))\n     \t([x y] (f1 (f2 x y))))\n     )\n  ([f1 f2 f3]\n    (fn \n      \t([x] (f1 (f2 (f3 x))))\n  \t\t([x y] (f1 (f2 (f3 x y))))\n   \t\t([x y z & args] (f1 (f2 (apply f3 x y z args))))\n      )\n   )\n  )", "problem": 58, "user": "514358eae4b0c172af7558d6"}, {"code": "(fn \n  ([] identity)\n  ([& fs] \n   (let [fs (reverse (seq fs))]\n     (fn [& args]\n       (loop [res (apply (first fs) args) fs (next fs)]\n         (if fs\n           (recur ((first fs) res) (next fs))\n           res))))))", "problem": 58, "user": "4fa6a491e4b081705acca1bc"}, {"code": "(fn my-comp\n  [f & fs]\n  (fn [& args]\n    (if (empty? fs)\n      (apply f args)\n      (f (apply (apply my-comp fs) args)))))", "problem": 58, "user": "4ebf11bc535dfed6da9c6d9c"}, {"code": "(fn [& fs] (fn [& xs] (reduce #(%2 %1) (apply (last fs) xs) (reverse (butlast fs)))))", "problem": 58, "user": "51a7b4fee4b0da5f497bde8b"}, {"code": "(fn [& fs]\n  (reduce (fn [f g]\n            #(f (apply g %&))) fs))", "problem": 58, "user": "5164867fe4b003cf19fdde3e"}, {"code": "(fn c [& fs] \n  (fn [& args] \n    (if (empty? (rest fs)) \n      (apply (last fs) args) \n      ((apply c (butlast fs)) (apply (last fs) args)))))", "problem": 58, "user": "51bf4560e4b013aa0d74b817"}, {"code": "(fn [x & xs]\n  (fn [& args]\n    ((fn step [[f & fs] a]\n       (if fs\n         (f (step fs a))\n         (apply f a)))\n     (cons x xs) args)))", "problem": 58, "user": "51bec919e4b013aa0d74b800"}, {"code": "(fn [& fs] \n  (fn [& args]\n    (reduce #(%2 %1) (apply (first (reverse fs)) args) (next (reverse fs)))))", "problem": 58, "user": "5161e5eee4b009fba0926e3a"}, {"code": "(fn [& fs]\n(fn mcomp0 [& arg]\n(reduce \n  (fn [acc e]\n    \n    (if (= -1 acc)\n      (apply e arg)\n      (e acc) ))\n       \n        -1 (reverse fs)))\n  )", "problem": 58, "user": "5180dc04e4b06b8caf33fa01"}, {"code": "#(fn [& args] ((reduce (fn [v f] [(apply f v)]) args (into () %&)) 0))", "problem": 58, "user": "51b90b88e4b050a1176cd6a2"}, {"code": "(fn [& p] (fn [& x] (reduce (fn [a b] (if (= x a) (apply b a) (b a))) x (reverse p))))", "problem": 58, "user": "51beb32ae4b013aa0d74b7fd"}, {"code": "(fn mycomp [& xs]\n  (fn [& xs2]\n    (if (= (count xs) 1)\n      (apply (first xs) xs2)\n      ((first xs)\n         (apply (apply mycomp (rest xs)) xs2))\n    )\n  )\n)", "problem": 58, "user": "51ca15bfe4b09ce160bef5b8"}, {"code": "(fn compose [& fns]\n  (letfn [ (call [fns args]\n             (if (== (count fns) 1)\n               (apply (first fns) args)\n               ((first fns) (call (rest fns) args))))]\n    (fn [& args] (call fns args))))", "problem": 58, "user": "51b8e8b3e4b050a1176cd6a0"}, {"code": "(fn [& function-list]\n  (fn [& args]\n    (reduce (fn [memo new-function]\n              (new-function memo)) \n            (apply (last function-list) args) \n            (rest (reverse function-list)))))", "problem": 58, "user": "51c76864e4b07ef393169e3f"}, {"code": "(fn [& x] (reduce (fn [f g] (fn [& a] (f (apply g a)))) x))", "problem": 58, "user": "51cbdee1e4b08d8387cbede1"}, {"code": "(fn m\n  ([] identity)\n  ([f] f)\n  ([f g] \n     (fn \n       ([] (f (g)))\n       ([x] (f (g x)))\n       ([x y] (f (g x y)))\n       ([x y z] (f (g x y z)))\n       ([x y z & args] (f (apply g x y z args)))))\n  ([f g h] \n     (fn \n       ([] (f (g (h))))\n       ([x] (f (g (h x))))\n       ([x y] (f (g (h x y))))\n       ([x y z] (f (g (h x y z))))\n       ([x y z & args] (f (g (apply h x y z args))))))\n  ([f1 f2 f3 & fs]\n    (let [fs (reverse (list* f1 f2 f3 fs))]\n      (fn [& args]\n        (loop [ret (apply (first fs) args) fs (next fs)]\n          (if fs\n            (recur ((first fs) ret) (next fs))\n            ret))))))", "problem": 58, "user": "51c858c3e4b07ef393169e55"}, {"code": "(fn da-compy [& fns]\n  (if (= 1 (count fns)) (fn [& x] (apply (first fns) x))\n      (fn [& x]\n        ((first fns) (apply (apply da-compy (rest fns)) x)))))", "problem": 58, "user": "51b76227e4b0d906fcd71d35"}, {"code": "(fn [& fs]\n  (fn [& args]\n    (first (reduce #(list (apply %2 %1)) args (reverse fs)))))", "problem": 58, "user": "5142e808e4b0c172af7558c9"}, {"code": "(fn [& x]\n  (fn [& y]\n    (let [[f & fz] (reverse x)]\n      (reduce (fn [w z] (z w)) (apply f y) fz))))", "problem": 58, "user": "5098f5d6e4b0cae2931060a4"}, {"code": "(fn c\n  ([f g]\n    (fn [& args](f (apply g args))))\n   ([f g h]\n    (fn [& args] (f (g (apply h args))))))", "problem": 58, "user": "51d19c24e4b0cfcf579466c3"}, {"code": "(fn c [h & t]\n  (if (empty? t)\n    h\n    #(h (apply (apply c t) %&))\n  )\n)", "problem": 58, "user": "51b9d1f0e4b0e871ca49590b"}, {"code": "(fn [& fns]\n  (fn [& args]\n    (let [plan (fn exec-plan [[f & fs]] (if (empty? fs) (apply f args) (f (exec-plan fs))))]\n      (plan fns))))", "problem": 58, "user": "51cdd3f0e4b0e42293a2254b"}, {"code": "(fn [ & args ] (fn [& x] (loop [ft (reverse args) fp x] (if (empty? ft) (first fp) (recur (rest ft) (vector (if (= 1 (count fp)) ((first ft) (last fp)) (apply (first ft) fp))))))))", "problem": 58, "user": "51c09719e4b0c9c82288293c"}, {"code": "(fn comp* [& fs]\n  (fn [& args]\n    (let [fsr (reverse fs)]\n      (let [f (first fsr)\n            xs (rest fsr)\n            f* (fn [agg f**]\n                 (f** agg))]\n        (reduce f* (apply f args) xs)))))", "problem": 58, "user": "51d662fce4b0154f82ab92ef"}, {"code": "(fn [& fs] \n  (fn [& ps]\n    (reduce #(cond \n              (nil? %1) (apply %2 ps)\n              :else (%2 %1)) nil (reverse fs))))", "problem": 58, "user": "516d2a46e4b06f078fab252f"}, {"code": "(fn fn-comp-1   \n  [& fns]  \n  (fn [& init-paramters]  \n    (let [fns (reverse fns)  \n          result (apply (first fns) init-paramters)]  \n      (loop [fns (rest fns) result result]  \n        (if (empty? fns)   \n          result  \n          (recur (rest fns) ((first fns) result)))))))", "problem": 58, "user": "51d10b1fe4b067c36548635e"}, {"code": "(fn [& xs] (let [fs (reverse xs)] (fn [& args] (loop [acc (apply (first fs) args) f (rest fs)] (if (empty? f) acc (recur ((first f) acc) (rest f)))))))", "problem": 58, "user": "51bd1a0de4b0df1216cefd93"}, {"code": "(fn [& a] (fn [& p] (first (reduce #(list (apply %2 %)) p (reverse a)))))", "problem": 58, "user": "51cc5cb3e4b02254fc79486f"}, {"code": "(fn compose [& fs]\n  (reduce  (fn [f e] (fn [& args] (e (apply f args)))) (reverse fs)))", "problem": 58, "user": "50d86fe2e4b01f0871336e67"}, {"code": "(fn [& fn-ls]\n    (fn [& args]\n      (let [fs (reverse (list* fn-ls))]\n        (loop [rs (apply (first fs) args) fs (next fs)]\n          (if fs\n            (recur ((first fs) rs) (next fs))\n            rs)))))", "problem": 58, "user": "51cacda3e4b068dadb8f2227"}, {"code": "(fn [& fns]\n  (fn [& args]\n    (loop [f (reverse fns) r args]\n      (if (seq f)\n          (recur (rest f) [(apply (first f) r)])\n          (first r)))))", "problem": 58, "user": "511d6a01e4b022853b0e07a5"}, {"code": "(fn [& fns]\n  (fn [& args]\n    (let [funs (reverse fns)]\n      (loop [result (apply (first funs) args) fun (rest funs)]\n        (if (empty? fun)\n          result\n          (recur ((first fun) result) (rest fun)))\n        )\n     )))", "problem": 58, "user": "51da7e49e4b02ceefd947768"}, {"code": "(fn c [& fs]\n  (if (= 1 (count fs))\n    (fn [& a] (apply (first fs) a))\n    (fn [& a] ((first fs) (apply (apply c (rest fs)) a)))))", "problem": 58, "user": "5175533fe4b0dea9bbfba575"}, {"code": "(fn my-comp [& fns]\n  (fn [& x]\n    (let [[f & fns] (reverse fns)]\n      (reduce #(%2 %1) (apply f x) fns))\n    ))", "problem": 58, "user": "51b7b521e4b0d906fcd71d3a"}, {"code": "(fn [& fs]\n  (let [[f & ff] (reverse fs)]\n  (fn [& args]\n    (reduce #(%2 %1) \n            (apply f args)\n            ff))))", "problem": 58, "user": "4fe15ffee4b0dd6cd5ce3634"}, {"code": "(fn [& fs]\n  (fn [& a]\n    (loop [fs fs a a]\n      (if (empty? fs) (first a) \n        (recur (butlast fs) [(apply (last fs) a)])))))", "problem": 58, "user": "51e00020e4b01188f0627534"}, {"code": "(fn one-comp\n  [& args]\n  (if (> (count args) 1)\n      (fn [& fn-args] ((apply one-comp (butlast args)) (apply (last args) fn-args)))\n      (fn [& fn-args] (apply (last args) fn-args))))", "problem": 58, "user": "51701a9ce4b034fe8eaf70f5"}, {"code": "(fn ff [& args]\n  (fn [& x] \n    (let [fs (reverse args)\n          r (apply (first fs) x)]\n      (reduce #(%2 %1) r (next fs)))))", "problem": 58, "user": "50a5f72fe4b0aa96157e2611"}, {"code": "(fn [& fs]\n  (fn [& args]\n    (first (reduce (fn [acc f]\n                     [(apply f acc)])\n                   args\n                   (reverse fs)))))", "problem": 58, "user": "51e89428e4b006d205356a51"}, {"code": "(fn f1 [& ff]\n      (fn [& args]\n        ((fn f3 [ff]\n\t        (if (= (count ff) 1)\n\t          (apply (first ff) args)\n\t          ((first ff) (f3 (rest ff)))\n\t        )\n        ) ff)\n      )\n    )", "problem": 58, "user": "51db9e1ee4b0e067a9bbadc9"}, {"code": "(fn f [& fs]\n  (fn [& args]\n    (reduce #(%2 %) (apply (last fs) args) (reverse (drop-last fs)))\n  )\n)", "problem": 58, "user": "51ba8f82e4b0fe3ecfb46434"}, {"code": "(fn co [& funs]\n  (fn [& x]\n    ((fn call[fs y]\n       (if (empty? fs) \n         y\n         (call (butlast fs) ((last fs) y)))) (butlast funs) (apply (last funs) x))))", "problem": 58, "user": "51efd397e4b0249c592fbdeb"}, {"code": "(fn [& funcs]\n  (fn [& params]\n    (loop [[f & fs] (reverse funcs)\n            ps params]\n       (if f (recur fs (list (apply f ps)))\n            (first ps)))))", "problem": 58, "user": "51eadb98e4b0f1f103a0d153"}, {"code": "(fn comp2 [& fs]\n  (fn [& args]\n    (loop [acc (apply (last fs) args) fs (drop-last fs)]\n  \t\t(if (seq fs) (recur ((last fs) acc) (drop-last fs))\n          acc))))", "problem": 58, "user": "51e1a1fae4b06a68e693eaf6"}, {"code": "(fn newcomp\n  [& fns]\n  (fn\n    [& args]\n    (loop [fns (reverse fns)\n           args args]\n      (if (seq fns)\n        (recur (next fns) (vector (apply (first fns) args)))\n        (apply identity args)))))", "problem": 58, "user": "511b233ae4b07ab9ec456180"}, {"code": "(fn [& fs] #(reduce (fn [a b] (b a)) (apply (last fs) %&) (rest (reverse fs))))", "problem": 58, "user": "500ec210e4b00fff93030f9d"}, {"code": "(fn cmp [f & fs]\n  (if fs\n    #(f (apply (apply cmp fs) %&))\n    f))", "problem": 58, "user": "51e58e02e4b0efabf93c02d0"}, {"code": "(fn [& xs] (fn [& ys] (reduce #(%2 %1) (apply (last xs) ys) (rest (reverse xs)))))", "problem": 58, "user": "51e780dae4b0730ab87cf353"}, {"code": "(fn [& in]\n         (let [[f & r] (reverse in)]\n           (fn [& args]\n             (loop [[f1 & fn] r\n                    ret (apply f args)]\n      (if f1\n        (recur fn (f1 ret))\n        ret)))))", "problem": 58, "user": "501d34f6e4b066e56b9d0b1e"}, {"code": "( fn [f1 & fs]\n    (let [fs (reverse (list* f1  fs))]\n      (fn [& args]\n        (loop [ret (apply (first fs) args) fs (next fs)]\n          (if fs\n            (recur ((first fs) ret) (next fs))\n            ret)))))", "problem": 58, "user": "518644bce4b0da5a5be3baca"}, {"code": "(fn [& fs] \n  (fn [& xs] \n    (first (reduce #(list (apply %2 %1)) \n                   xs \n                   (reverse fs)))))", "problem": 58, "user": "51c19873e4b0d204dbe2ca0d"}, {"code": "(fn [ & fargs ]\n    (let [ [fo & rfs] (reverse fargs)] \n        (fn [ & xs]\n            (reduce #(%2 %1) (apply fo xs) rfs))))", "problem": 58, "user": "51f59607e4b0abb92f97f9d5"}, {"code": "(fn [& fns]\n  (let [wrap-two (fn [a b] (fn [& args] (a (apply b args))))]\n    (reduce wrap-two identity fns)))", "problem": 58, "user": "51fa8dfee4b0f1313d4689df"}, {"code": "(fn [& f]\n  (fn [& a]\n    (loop [a a f f]\n      (if (empty? f)\n        (first a)\n        (recur (list (apply (last f) a)) (butlast f))))))", "problem": 58, "user": "51f9b1d0e4b09be9c177e550"}, {"code": "(fn c [& a] (fn [& b] (first (reduce #(list (apply %2 %1)) b (reverse a)))))", "problem": 58, "user": "5046ee3ee4b03b02161376b4"}, {"code": "(fn [& fns]\n  (fn [& args]\n    (first\n     (reduce (fn [arg f] (list (apply f arg))) args (reverse fns)))))", "problem": 58, "user": "51eec1a6e4b0871fa145d98d"}, {"code": "(fn [& fns]\n  (fn [& args]\n    (loop [fn (drop-last fns) result (apply (last fns) args)]\n      (if (empty? fn)\n        result\n        (recur (drop-last fn) ((last fn) result))))))", "problem": 58, "user": "50e90813e4b033b0e80d11e7"}, {"code": "(fn [& fs]\n  #(first(reduce (fn [v f] [(apply f v)]) %& (reverse fs))))", "problem": 58, "user": "4fbf2818e4b081705acca317"}, {"code": "(fn [& fs]\n  (let [fs (reverse fs)]\n    (fn [& args]\n      (loop [ret (apply (first fs) args) fs (next fs)]\n        (if fs\n          (recur ((first fs) ret) (next fs))\n          ret)))))", "problem": 58, "user": "4e399d94535deb9a81d77f42"}, {"code": "(fn fcomp [& fns]\n  (fn [& args]\n    (let [[f & fns] (reverse fns)]\n      (reduce #(%2 %1) (apply f args) fns))))", "problem": 58, "user": "51d96ad0e4b02ceefd94774f"}, {"code": "(fn [& fns]\n  (fn [& args]\n    (first\n    \t(reduce (fn [acc f]\n        \t    \t  [(apply f acc)])\n            \targs              \n            \t(reverse fns)))))", "problem": 58, "user": "4f0b3c88535d0136e6c22301"}, {"code": "(fn [& fs]\n     (let [f (reverse (list* fs))]\n       (fn [& args]\n         (loop [rst (apply (first f) args) f (next f)]\n           (if f\n             (recur ((first f) rst) (next f))\n             rst)))))", "problem": 58, "user": "50aedb8ce4b0a40c9cfb08d4"}, {"code": "(fn [& fs] \n  (fn [& args] \n    (let [[f & fx] (reverse fs)] \n      (reduce (fn [a g] (g a)) (apply f args) fx))))", "problem": 58, "user": "50c781bbe4b00bb60fe0c535"}, {"code": "(fn [& funcs]\n  (reduce (fn [a b] (fn [& x] (b (apply a x)))) (reverse funcs)))", "problem": 58, "user": "52069fade4b0bf4f1882c82c"}, {"code": "(fn comp2 [& fs]\n  (let [r (reverse fs)]\n    (fn [& x]\n      (reduce #(%2 %1) (apply (first r) x) (next r)))))", "problem": 58, "user": "52039e12e4b0fb7e47ea51ff"}, {"code": "(fn [& fs] \n  (let [fs (reverse fs)]\n  (fn [& args]\n    (reduce (fn [x f] (f x)) (apply (first fs) args) (rest fs)))))", "problem": 58, "user": "4dbe8729535d020aff1edf62"}, {"code": "(fn [& funcs] \n  (fn [& args] (first (reduce #(list (apply %2 %)) args (reverse funcs)))))", "problem": 58, "user": "5200ffc6e4b0d7096e99ddac"}, {"code": "(fn [& a]\n(apply (fn n [& f]\n  (fn [& l]\n    (if (empty? f)\n      (apply identity l)\n      ((apply n (rest f)) (apply (first f) l)))))\n(reverse a)))", "problem": 58, "user": "52091d57e4b0e152394d76f0"}, {"code": "(fn fn-comp [& fs]\n  (fn comp-apply [& args]\n    (loop [f (reverse fs)\n           a args]\n      (if (empty? f)\n        (first a)\n        (recur (rest f) (list (apply (first f) a)))))))", "problem": 58, "user": "51d360d1e4b099f3b6acddff"}, {"code": "(fn [& fns] (fn [& args] (first (reduce #(list (apply %2 %1)) args (reverse fns)))))", "problem": 58, "user": "52015698e4b0d7096e99ddba"}, {"code": "(fn [& fns]\n  (let [[f & rfns] (reverse fns)]\n    (fn [& x] (reduce #(%2 %1) (apply f x) rfns))))", "problem": 58, "user": "4fc67081e4b0ee37620e1813"}, {"code": "(fn [& fs]\n\t(fn [& x]\n\t\t(loop [fc fs\n\t\t\tresult x]\n\t\t\t(if (empty? fc)\n\t\t\t\t(first result)\n\t\t\t\t(recur (butlast fc) [(apply (last fc) result)])))))", "problem": 58, "user": "51dd9370e4b0c33a4e1da40c"}, {"code": "(fn [& fss]\n  (let [[f & fs] (reverse fss)]\n    (fn [& xs]\n      (reduce #(%2 %) (apply f xs) fs))))", "problem": 58, "user": "51cbaf14e4b08d8387cbedda"}, {"code": "(fn my-comp [& functions]\n  (let [fs (reverse functions)]\n    (fn [& args]\n      (loop [result (apply (first fs) args)\n             fs (next fs)]\n        (if\n          fs\n          (recur ((first fs) result) (next fs))\n          result)))))", "problem": 58, "user": "5201ada5e4b0b2e020a18f14"}, {"code": "(fn [& fs]\n  (fn [& xs]\n    (first (reduce #(list (apply %2 %)) xs (reverse fs)))))", "problem": 58, "user": "51c8301ee4b07ef393169e4d"}, {"code": "(fn [& f]\n  (let [fs (reverse f)\n        f1 (first fs)\n        fr (rest fs)]\n    (fn [& args]\n      (reduce #(%2 %1) (apply f1 args) fr))))", "problem": 58, "user": "514c2d05e4b02b8cbb2a9278"}, {"code": "(fn[& f]\n  (fn [& args]\n    (loop [ret (apply (last f) args) f1 (drop-last f)]\n      (if (empty? f1)\n        ret\n        (recur ((last f1) ret) (drop-last f1))\n        ))))", "problem": 58, "user": "5201572be4b0d7096e99ddbb"}, {"code": "(fn [& fs]\n  (fn [& args]\n    (let [[v] (reduce #(list (apply %2 %)) args (reverse fs))]\n      v)\n    ))", "problem": 58, "user": "513fab65e4b00f13ea1bd891"}, {"code": "(fn [& funs] \n\t(fn [& args]\n\t\t(let [rfuns (reverse funs)]\n\t\t\t(reduce #(%2 %)\n\t\t\t\t(apply (first rfuns) args)\n\t\t\t\t(rest rfuns)))))", "problem": 58, "user": "520242bae4b030ee0c5b26e3"}, {"code": "(fn pmoc\n  [& functions]\n  (let [[f & fs] (reverse functions)]\n    (fn [& args]\n      (reduce #(%2 %)\n              (apply f args)\n              fs))))", "problem": 58, "user": "51f9527fe4b09be9c177e549"}, {"code": "(fn comp-e [& x]\n  (let [order (reverse x)]\n    (fn inner [y & y-rst]\n      (loop [result (apply (first order) y y-rst)\n             r-order (rest order)]\n        (if (empty? r-order) result\n          (recur ((first r-order) result) (rest r-order)))))))", "problem": 58, "user": "52084f75e4b01ce6bbf31dde"}, {"code": "(fn [& fs]\n  (fn [& args]\n    (first (reduce #(vector (apply %2 %1)) args (reverse fs)))))", "problem": 58, "user": "51696ee7e4b03f62cda68ce8"}, {"code": "(fn comp2 [& funs]\n\t(fn [& args]\n\t\t(first \n\t\t\t(reduce \n\t\t\t\t(fn [so-far next-fun] \n\t\t\t\t\t[(apply next-fun so-far)]) \n\t\t\t\targs \n\t\t\t\t(reverse funs)))))", "problem": 58, "user": "51ba4482e4b0fe3ecfb4642b"}, {"code": "(fn\n  ([f] f)\n  ([f g] \n     (fn \n       ([] (f (g)))\n       ([x] (f (g x)))\n       ([x y] (f (g x y)))\n       ([x y z] (f (g x y z)))\n       ([x y z & args] (f (apply g x y z args)))))\n  ([f g h] \n     (fn \n       ([] (f (g (h))))\n       ([x] (f (g (h x))))\n       ([x y] (f (g (h x y))))\n       ([x y z] (f (g (h x y z))))\n       ([x y z & args] (f (g (apply h x y z args))))))\n  ([f1 f2 f3 & fs]\n    (let [fs (reverse (list* f1 f2 f3 fs))]\n      (fn [& args]\n        (loop [ret (apply (first fs) args) fs (next fs)]\n          (if fs\n            (recur ((first fs) ret) (next fs))\n            ret))))))", "problem": 58, "user": "51d9eb05e4b02ceefd947755"}, {"code": "(fn [& fns]\n  (fn [& args]\n    (reduce #(%2 %1) (apply (last fns) args) (rest (reverse fns)))))", "problem": 58, "user": "511f9625e4b085952a835362"}, {"code": "(fn [& fs] (let [sf (reverse fs)] #(reduce (fn [r f] (f r)) (apply (first sf) %&) (rest sf))))", "problem": 58, "user": "51f66e0ee4b06ff1c25c52c3"}, {"code": "(fn [& f] (fn [& x] (nth (reduce #(-> [(apply %2 %1)]) x (reverse f)) 0 )))", "problem": 58, "user": "52160dbee4b0bf4bffd29cb3"}, {"code": "(fn [& args] (reduce (fn [a b] (fn [& more] (a (apply b more)))) args))", "problem": 58, "user": "521e8227e4b0dd19981ad082"}, {"code": "(fn c\n    ([f] (fn [& a] (apply f a)))\n    ([f & g] (fn [& a] (f (apply (apply c g) a)))))", "problem": 58, "user": "51f28a64e4b0210f90e7454e"}, {"code": "(fn my-comp [& fs]\n  (fn [& args]\n    (loop [fs (reverse fs)\n           res args]\n      (if (empty? fs)\n        (first res)\n        (let [f (first fs)\n              fs (rest fs)\n              r (list (apply f res))]\n          (recur fs r))))))", "problem": 58, "user": "50c113bee4b096f585049c37"}, {"code": "(fn [& funcs]\n\t(fn [& args]\n\t\t(first\n\t\t\t(reduce #(vector (apply %2 %1)) args (reverse funcs)))))", "problem": 58, "user": "51bdc609e4b0ff155d51d2b3"}, {"code": "(fn [& fs]\n  (let [[f & fs] (reverse fs)]\n    (fn [& as]\n      (reduce #(%2 %1) (apply f as) fs))))", "problem": 58, "user": "521679e9e4b0bf4bffd29cca"}, {"code": "(fn [& y] (fn [& x] (reduce (fn [acc f] (f acc)) (apply (last y) x) (reverse (butlast y)))))", "problem": 58, "user": "5216933be4b000d124d989cf"}, {"code": "(fn f [& fs]\n  (let [nfs (reverse fs)]\n    (fn [& args]\n      (loop [ans (apply (first nfs) args) nfs (next nfs)]\n        (if nfs\n          (recur ((first nfs) ans) (next nfs))\n          ans)))))", "problem": 58, "user": "52196842e4b0890f2f822bfa"}, {"code": "(fn outer [& fs]\n  (fn [& args]\n    (-> (reduce #(->> (apply %2 %1) vector) args (reverse fs)) first)))", "problem": 58, "user": "52016fd3e4b0b2e020a18f10"}, {"code": "(fn funcomp [& fs]\n  (fn [& args]\n    (let [funs (reverse fs)]\n      (loop [ret (apply (first funs) args) funs (rest funs)]\n        (if (empty? funs)\n          ret\n          (recur ((first funs) ret) (rest funs)))))))", "problem": 58, "user": "521b339fe4b0c4ef0be83031"}, {"code": "(fn [& xs] (fn [& ys] (reduce #(%2 %1) (apply (last xs) ys) (rest (reverse xs)))))", "problem": 58, "user": "5220909fe4b0e6a83c89259f"}, {"code": "; The last two tests necessitated the use of apply, but I had trouble making sure that apply did\n; not come into play whe there was only one argument. I had to peek at a solution and make a tweak \n; to mine to add in the first and list parts. The solution seems obvious now.\n(fn [& fns]\n\t(fn [& args]\n\t\t(first\n\t\t\t(reduce (fn [x f] (list (apply f x))) args (reverse fns))\n\t\t\t))\n\t)", "problem": 58, "user": "5201ff99e4b0b2e020a18f26"}, {"code": "(fn [& args]\n    (reduce (fn [compf f]\n                (fn ([x] (compf (f x)))\n                    ([x & xs] (compf (apply (partial f x) xs)))))\n            args))", "problem": 58, "user": "51891c96e4b04c2714a2670e"}, {"code": "(fn [f1 f2 & fs]\n    (let [fs (reverse (list* f1 f2 fs))]\n      (fn [& args]\n        (reduce #(do (println %1 %2) (%2 %1)) (apply (first fs) args) (next fs)))))", "problem": 58, "user": "52244a77e4b01819a2de42d1"}, {"code": "(fn [& f] \n  (fn [& x] \n    (reduce #(%2 %) \n            (apply (last f) x) \n            (rest (reverse f)))))", "problem": 58, "user": "5065faf9e4b0313a384e5645"}, {"code": "(fn [& fs] (reduce (fn [c f] (fn [& args] (c (apply f args)))) fs))", "problem": 58, "user": "522454f4e4b01819a2de42d3"}, {"code": "(fn [& funcs] \n  (fn [& args] (first (reduce #(list (apply %2 %)) args (reverse funcs)))))", "problem": 58, "user": "5225b16de4b0d2f5d1e2c0ed"}, {"code": "(fn [& args] (fn [& x] (first (reduce #(list (apply %2 %)) x (reverse args)))))", "problem": 58, "user": "52253004e4b01819a2de42fa"}, {"code": "(fn [& l]\n  (reduce #(fn [& x] (% (apply %2 x))) l))", "problem": 58, "user": "522b922ee4b0d34ee08e71c3"}, {"code": "(fn [& fs]\n  (fn [& x] \n    (loop [funs (reverse fs) result x first-time true]\n      (if (empty? funs)\n        result\n        (if first-time\n          (recur (next funs) (apply (first funs) result) false)\n          (recur (next funs) ((first funs) result) false))))))", "problem": 58, "user": "52016690e4b0b2e020a18f0f"}, {"code": "(fn [& fs]\n  (reduce #(fn [& as] (%1 (apply %2 as))) fs))", "problem": 58, "user": "521b9f92e4b0c4ef0be8304c"}, {"code": ";todo try reducing the function compositions\n(fn my-comp [& fs]\n  (partial (fn my-comp-help [[fh & ft] & args]\n             (if ft\n             \t (fh (apply my-comp-help ft args))\n               \t (apply fh args)))\n           fs))", "problem": 58, "user": "5213dbc3e4b0961f15ac4d74"}, {"code": "(fn [f1 & fx] (fn [& args] \n                ((fn step [[f & fs] a]\n                   (if fs\n                     (f (step fs a))\n                     (apply f a)))\n                 (cons f1 fx) args)))", "problem": 58, "user": "5230d9bde4b0035e815da397"}, {"code": "(fn my-comp [& fns]\n  (letfn [(comp-2 [fn1 fn2]\n                  (fn [& args] (fn2 (apply fn1 args))))]\n    (reduce comp-2 (reverse fns))))", "problem": 58, "user": "51ce1320e4b0e42293a22551"}, {"code": "(fn my-comp [head & tail] \n  (if (empty? tail) \n    head \n    (fn [& args] (head (apply (apply my-comp tail) args)))))", "problem": 58, "user": "516abecae4b081287f204e9f"}, {"code": "(fn fifty-eight\n  [& funs]\n  (fn [& n] (first (reduce #(vector (apply %2 %1)) n (reverse funs)))))", "problem": 58, "user": "510591dde4b06d28cacc92eb"}, {"code": "(fn my-comp\n  ([f] f)\n  ([f & fs]\n     (fn [& args] (f (apply (apply my-comp fs) args)))))", "problem": 58, "user": "5213ffd3e4b0961f15ac4d7d"}, {"code": "(fn ([a b] (fn [& args] (a (apply b args)))) ([a b c] (fn [& args] (a (b (apply c args))))))", "problem": 58, "user": "51b9b5ace4b0e871ca495908"}, {"code": "(fn my-comp [& fns]\n\t(if (empty? fns)\n\t    identity\n\t  (fn [& args]\n\t      (let [[head & tail] (reverse fns)]\n\t\t(reduce #(%2 %1)\n\t\t\t(apply head args)\n\t\t\ttail)))))", "problem": 58, "user": "52381b2ae4b0fae3832e99ef"}, {"code": "(fn [& fns] \n  (let [rev-fns (reverse fns)]\n    (fn [& args] \n      (reduce #(%2 %1) (apply (first rev-fns) args) (rest rev-fns)))))", "problem": 58, "user": "52379c46e4b0fae3832e99db"}, {"code": "(fn cmb [f & r]\n  (if-not r\n    f \n    (fn [& x] (f (apply (apply cmb r) x)))\n  ))", "problem": 58, "user": "52394c03e4b0d705d026ef09"}, {"code": "(fn [& fs]\n  (let [fs (reverse fs)]\n    (fn [& args]\n      (loop [ret (apply (first fs) args)\n             fs (next fs)]\n        (if fs\n          (recur ((first fs) ret) (next fs))\n          ret)))))", "problem": 58, "user": "518a59b3e4b02bf06f6bbb4b"}, {"code": "(fn [& fs] (fn [& xs] (first (reduce #(list (apply %2 %)) xs (reverse fs)))))", "problem": 58, "user": "523d02b0e4b0dbf0c3017289"}, {"code": "(fn ([f g] #(f (g %)))\n    ([f g h] (fn [& xs] (f (g (apply h xs))))))", "problem": 58, "user": "52161db6e4b0bf4bffd29cb8"}, {"code": "(fn compouse [& coll]\n  (partial (fn apl [c & args]\n             (if-let [x (first c)]\n               (recur (rest c) (list (apply x args)))\n               (first args))) (reverse coll)))", "problem": 58, "user": "523b82efe4b07becd5be21f0"}, {"code": "(fn f \n  [& xs]\n  (let [new-xs (reverse xs)]\n    (fn [& args]\n      (first (reduce (fn [x y] (list (apply y x))) args new-xs)))))", "problem": 58, "user": "50aa60bee4b056ee01935865"}, {"code": "(fn [& fns] \n  (fn [& args] \n    (first (reduce #(list (apply %2 %)) args (reverse fns)))))", "problem": 58, "user": "523b1988e4b02f719975bdbc"}, {"code": "(fn cp ([a] #(a %))\n       ([a b] (fn [& args ](a (apply b args))))\n       ([a b & t] (reduce cp (cp a b) t)))", "problem": 58, "user": "5241ea66e4b076e5d3121f39"}, {"code": "(fn compose [& funcs]\n  (loop [l (reverse (butlast funcs)) ans (last funcs)]\n    (if (empty? l)\n      (fn [& args] (apply ans args))\n      (recur\n        (rest l)\n        (fn [& args] ((first l) (apply ans args)))\n      )\n    )\n  )\n)", "problem": 58, "user": "51f09f3de4b0274c496158d7"}, {"code": "(fn [& fns]\n    (fn [& args]\n      (reduce (fn [a f] (f a)) (apply (last fns) args) (reverse (butlast fns)))))", "problem": 58, "user": "4f4e4ecbe4b03ad3f0c10cbf"}, {"code": "(fn [& fns]\n    (fn [& args]\n      (let [reversed-fns (reverse fns)]\n        (reduce (fn [value f] (f value))\n                (apply (first reversed-fns) args)\n                (rest reversed-fns)))))", "problem": 58, "user": "51f2b8f1e4b0210f90e74556"}, {"code": "(fn [& fs]\n  (fn [& args]\n    (reduce\n      (fn [v f] (f v))\n      (apply (last fs) args)\n      (reverse (butlast fs)))))", "problem": 58, "user": "51cfc616e4b0e42293a22578"}, {"code": "(fn func-comp [& args]\n  (fn [& args-]\n    (reduce #(if (= args- %1)\n               (apply %2 %1)\n               (%2 %1)) args- (reverse args))))", "problem": 58, "user": "511e763ce4b03e81d390ac29"}, {"code": "(fn [& fs] (reduce (fn [f1 f2] #(f1 (apply f2 %&))) identity fs))", "problem": 58, "user": "52437703e4b076204b44fabf"}, {"code": "(fn self [f & r]\n  (if (empty? r)\n    f\n    (fn [& args]\n      (f  (apply (apply self r) args)))))", "problem": 58, "user": "5233ad08e4b07e3ee2be83ac"}, {"code": "(fn comb [& args] \n  (fn ([n] (reduce #(%2 %1) n (reverse args)))\n      ([n & nargs] (reduce #(%2 %1) (apply (last args) (cons n nargs)) (reverse (butlast args))))))", "problem": 58, "user": "5239caa6e4b0d705d026ef27"}, {"code": "(fn fncomp [& fns]\n  (fn [& args]\n    (reduce #(%2 %1) (apply (last fns) args) (reverse (butlast fns)))))", "problem": 58, "user": "5245fbbbe4b09dbe66b56183"}, {"code": "(fn [& fs]\n  (fn [& xs]\n    (first (reduce (fn [v f] [(apply f v)]) xs (reverse fs)))))", "problem": 58, "user": "52487654e4b05ef8e38e63dc"}, {"code": "(fn[& functions]\n(fn [& vals]\n     (reduce\n      (fn [_first _next]\n        (if (nil? _first)\n          (apply _next vals)\n          (_next _first)\n          )\n        )\n      nil\n      (reverse functions))\n     )\n)", "problem": 58, "user": "50550f43e4b0b1b9d1860eb7"}, {"code": "(fn my-comp [& fs]\n  (let [fs (reverse fs)]\n    (fn [& args]\n      (loop [v (apply (first fs) args)\n             fs (rest fs)]\n        (if (seq fs)\n            (recur ((first fs) v)\n                   (rest fs))\n            v)))))", "problem": 58, "user": "52485f02e4b05ef8e38e63d3"}, {"code": "(fn [& fns]\n  (fn [& params]\n    (reduce (fn [result f]\n              (f result)) \n            (apply (last fns) params) \n            (reverse (butlast fns)))))", "problem": 58, "user": "5048202fe4b0ec70b3ef8d9a"}, {"code": "(fn\n  [& list-fn]\n  (fn [& args]\n    (println \"Before loop\" args)\n    (loop [fns (rest (reverse list-fn))\n           result (if (sequential? args)\n                    (apply (first (reverse list-fn)) args)\n                    ((first list-fn) args))]\n      (println \"inside loog result\" result)\n      (if (empty? fns)\n        result\n        (recur (rest fns) ((first fns) result))))))", "problem": 58, "user": "523288fee4b035af41902a88"}, {"code": "(fn cp [& fs]\n  (if (= 2 (count fs)) (fn[& x] ((first fs) (apply (second fs) x)))\n      (fn [& x] ((first fs) (apply (apply cp (rest fs)) x)))))", "problem": 58, "user": "4fbd12a5e4b081705acca2fd"}, {"code": "(fn [& fns]\n  (let [rev-fns (reverse fns)]\n    (fn [& args]\n      (loop [args args rem-fns rev-fns]\n        (let [[func & rem-fns] rem-fns]\n          (if (seq rem-fns)\n            (recur (list (apply func args)) rem-fns)\n            (apply func args)))))))", "problem": 58, "user": "5245aea8e4b08ba239308123"}, {"code": "(fn [& fns]\n  (fn [& args]\n    (let [[f & rfns] (reverse fns)]\n      (reduce #(%2 %1) (apply f args) rfns))))", "problem": 58, "user": "4f2d5f5de4b0d6649770a05a"}, {"code": "(fn [& a] (fn [& b] (reduce #(%2 %1) (apply (last a) b) (reverse (butlast a)))))", "problem": 58, "user": "50ae0d24e4b0a40c9cfb08ce"}, {"code": "(fn [& flist] (reduce (fn [f1 f2] (fn [& args] (f1 (apply f2 args)))) identity flist))", "problem": 58, "user": "5246e945e4b0644eb7b0783b"}, {"code": "(fn com [f & fs]\n  (if (empty? fs)\n    f\n    (fn [& args]\n      (f (apply (apply com fs) args)))))", "problem": 58, "user": "524cdd51e4b0752c4cb68ccc"}, {"code": "(fn [& fns]\n    (fn [& args]\n      (let [[f & fns] (reverse fns)]\n        (reduce #(%2 %1) (apply f args) fns))))", "problem": 58, "user": "5243d9a2e4b076204b44fadf"}, {"code": "(fn [& funcs]\n    (fn [& args]\n      ((fn this [in-funcs]\n         (if (empty? (rest in-funcs))\n           (apply (first in-funcs) args)\n           ((first in-funcs) (this (rest in-funcs)))\n           )\n         )\n       funcs)\n      )\n    )", "problem": 58, "user": "52213426e4b0e6a83c8925c4"}, {"code": "(fn [& c]\n  (let [[f0 & fs] (reverse c)]\n    (fn [& args]\n      (reduce #(%2 %) (apply f0 args) fs))))", "problem": 58, "user": "508923d5e4b06d8254e936e8"}, {"code": "(fn [& args]\n  (fn [& x] \n     (first (reduce #(list (apply %2 %1)) x (reverse args)))))", "problem": 58, "user": "523a9fc9e4b081681ca7adca"}, {"code": "(fn [& fns]\n    (let [funs (reverse (vec fns))]\n      (fn [& args] \n        (reduce \n          (fn [acc new_] \n              (new_ acc))\n          (apply (first funs) args)\n          (rest funs)\n        )\n      )\n    )\n  )", "problem": 58, "user": "52485723e4b05ef8e38e63d2"}, {"code": "(fn [& fs] (reduce (fn [f g] #(f (apply g %&))) fs))", "problem": 58, "user": "518c5236e4b087e178201de0"}, {"code": "(fn a \n  ([f g] #(f (apply g %&)))\n  ([f g h] #(f (g (apply h %&)))))", "problem": 58, "user": "523ed522e4b057c4b7cd0a78"}, {"code": "(fn [& fns]\n  (fn [& args] (reduce #(%2 %1) (apply (last fns) args) (reverse (butlast fns)))))", "problem": 58, "user": "524b90fae4b09eba1c0223df"}, {"code": "(fn [& fs]\n  (fn [& args]\n\t(first (reduce #(vector (apply %2 %)) args (reverse fs)))))", "problem": 58, "user": "52479487e4b05ef8e38e6373"}, {"code": "(fn [& fs] (fn [& args] (reduce (fn [acc f] (f acc)) (apply (last fs) args) (reverse (butlast fs)))))", "problem": 58, "user": "525431dfe4b0541d1855b970"}, {"code": "; Note that this only handles the arg cases it has to to pass the unit tests\n; I think there's a \"a b c\" case I missed.\n(fn run-in-order\n  ([x] x)\n  ([x y]\n   (fn \n     ([arg] (x (y arg)))\n     ([a b] (x (y a b)))\n     ([a b c & args] (x (apply y a b c args)))))\n  ([x y z]\n   (fn \n     ([arg] (x (y (z arg))))\n     ([a b] (x (y (z a b))))\n     ([a b c & args] (x (y (apply z a b c args)))))))", "problem": 58, "user": "52463059e4b09dbe66b56198"}, {"code": "(fn [& fns]\n  (fn [& args]\n    (let [arg2 (apply (last fns) args)]\n    \t(reduce #(%2 %1) arg2 (rest (reverse fns))))))", "problem": 58, "user": "52525a0ee4b0541d1855b8a2"}, {"code": "(fn [& fns] \n  (fn [& stuff] \n    (loop [fns (reverse fns)\n           result stuff]\n      (if (empty? fns)\n        (first result)\n        (recur (rest fns) [(apply (first fns) result)])))))", "problem": 58, "user": "524ae8e6e4b09eba1c0223b5"}, {"code": "(fn [& fs]\n  (let [rfs (reverse fs)]\n    (fn [& args]\n      (loop [rfs' (rest rfs)\n             res (apply (first rfs) args)]\n        (if (empty? rfs')\n          res\n          (recur (rest rfs') ((first rfs') res)))))))", "problem": 58, "user": "519db0ede4b037b32803f9b9"}, {"code": "(fn com [& fs]\n    (let [fs (reverse fs)]\n     (fn [& b]\n         (reduce #(%2 %1) (apply (first fs) b) (rest fs))\n      )))", "problem": 58, "user": "51d28e15e4b0d13b04db0d9b"}, {"code": "(fn[& xs]\n  (fn[& args]\n   (let [ rxs (reverse xs)\n          res (apply (first rxs) args)]\n     (loop [f (next rxs) arg res]\n        (if(nil? f)\n          arg\n          (recur (next f) ( (first f) arg)))))))", "problem": 58, "user": "50b25f2ce4b03ea88043355f"}, {"code": "(fn [& fs]\n  (fn [& x]\n    (reduce #(%2 %1) (apply (last fs) x) (rest (reverse fs)))\n    )\n  )", "problem": 58, "user": "523f0bbfe4b01c266ffa7f91"}, {"code": "(fn compy ([f & g] (fn [& x] (f (apply (apply compy g) x)) \n          ))\n           ([f] f))", "problem": 58, "user": "5259a16ee4b0cb4875a45ce1"}, {"code": "(fn my-comp [& funcs]\n  (let [funcs (reverse funcs)]\n\t  (fn [& args]\n\t    (loop [ret (apply (first funcs) args)\n\t           funcs (next funcs)]\n\t      (if funcs\n\t        (recur ((first funcs) ret) (next funcs))\n\t        ret)))))", "problem": 58, "user": "52319066e4b0e2e8de81d1e9"}, {"code": "(fn [& fs]\n  (fn [& args]\n  \t(first (reduce\n   \t\t(fn [a f] (vector (apply f a)))\n   \t\targs (reverse fs)))\n    )\n  )", "problem": 58, "user": "522d3a16e4b0e26240291d50"}, {"code": "(fn [& f] \n  (fn [& a] \n    (reduce \n     #(%2 %1) \n     (apply (last f) a) \n     (reverse (butlast f)))))", "problem": 58, "user": "524be8e0e4b09eba1c0223f1"}, {"code": "(fn [& fs] \n    (letfn [(cmp [fns args] \n              (if (seq fns) \n                (recur (rest fns) (list (apply (first fns) args)))\n                (first args)))] \n      (fn [& xs] (cmp (reverse fs) xs))))", "problem": 58, "user": "4e3a9dae535deb9a81d77f4a"}, {"code": "(fn mycomp [& funcs]\n  (fn [& args]\n    (reduce (fn [x f] (f x)) \n            (apply (last funcs) args)\n            (rest (reverse funcs)))))", "problem": 58, "user": "523c6451e4b07becd5be2222"}, {"code": "(fn fcmp [& fs]\n    (if (= (count fs) 1)\n      (first fs)\n      (partial (fn [f & x]\n                 ((first fs) (apply f x))\n                 )\n               (apply fcmp (rest fs))\n               )\n      )\n  )", "problem": 58, "user": "52586d24e4b0cb4875a45cb0"}, {"code": "(fn [& fns] (fn [& xs] (reduce #(%2 %) (apply (last fns) xs) (reverse (butlast fns)))))", "problem": 58, "user": "523b1a65e4b02f719975bdbd"}, {"code": "#(fn [& v]\n  (loop [r v f (reverse %&)]\n    (if f\n      (recur [(apply (first f) r)] (next f))\n      (first r))))", "problem": 58, "user": "524f0deee4b0541d1855b7fd"}, {"code": "(fn [& f] (fn [& p] (first (reduce #(vector (apply %2 %)) p (reverse f)))))", "problem": 58, "user": "525b0b51e4b0cb4875a45d01"}, {"code": "(fn [& fs]\n  (fn [& args]\n    (last\n      (reduce #(vector (apply %2 %1)) args (reverse fs)))))", "problem": 58, "user": "5236cd89e4b0e010857b4e45"}, {"code": "(fn cmp [& fs]\n  (letfn [(aux [[f & gs :as fs] & x]\n            (if (seq fs)\n              (aux gs (apply f x))\n              (if (= (count x) 1)\n                (first x)\n                x)))]\n    (partial aux (reverse fs))))", "problem": 58, "user": "52606318e4b03e8d9a4a7036"}, {"code": "(fn [& fs] (fn [& xs] (first (reduce (fn [p f] (list (apply f p))) xs (reverse fs)))))", "problem": 58, "user": "525f51bde4b0cb4875a45dc8"}, {"code": "(fn [& xs] (reduce (fn [f g] (fn [& args] (f (apply g args)))) (fn [x] x) xs))", "problem": 58, "user": "52618ea3e4b03e8d9a4a7064"}, {"code": "(fn comb [& funcs]\n  (fn [& args]\n    (first\n      (reduce #(vector (apply %2 %1)) args (reverse funcs )))))", "problem": 58, "user": "514cfa27e4b019235f6c057d"}, {"code": "(fn appl\n  ([f] f)\n  ([f g]\n    (fn\n      ([] (f (g)))\n      ([x] (f (g x)))\n      ([x y] (f (g x y)))\n      ([x y z] (f (g x y z)))\n      ([x y z & args] (f (apply g x y z args)))))\n  ([f g h]\n  (fn\n    ([] (f (g (h))))\n    ([x] (f (g (h x))))\n    ([x y] (f (g (h x y))))\n    ([x y z] (f (g (h x y z))))\n    ([x y z & args] (f (g (apply h x y z args)))))))", "problem": 58, "user": "5245d29ae4b09dbe66b56174"}, {"code": "(fn [x & xs]\n  (fn [& args]\n    ((fn step [[f & fs] a]\n       (if fs\n         (f (step fs a))\n         (apply f a)))\n     (cons x xs) args)))", "problem": 58, "user": "517c1a3be4b07ef0e56148d6"}, {"code": "(fn [x & xs]\n  (fn [& args]\n    ((fn step [[f & fs] a]\n       (if fs\n         (f (step fs a))\n         (apply f a)))\n     (cons x xs) args)))", "problem": 58, "user": "516282c3e4b0e6d3c4734711"}, {"code": "(fn myComposition\n  [& fns]\n  (let [butFirstFn (rest (reverse fns))]\n  (fn [& args] (reduce #(%2 %1) (apply (last fns) args) butFirstFn))))", "problem": 58, "user": "509a25b7e4b0efbae1fbc0a8"}, {"code": "(fn mycomp [& fns]\n    (if (empty? (rest fns))\n      (fn [& lst] (apply (first fns) lst))\n      (fn [& lst] ((first fns)\n                  (apply (apply mycomp (rest fns)) lst)))))", "problem": 58, "user": "524f213be4b0541d1855b7ff"}, {"code": "(fn cmp [f & fs]\n  (if (empty? fs) f\n      (fn [& args] (f (apply (apply cmp fs) args)))))", "problem": 58, "user": "504e108ce4b078edc5f593b3"}, {"code": "(fn [& fc]\n\t\t(partial (fn [f & a]\n\t\t\t\t\t (reduce \n\t\t\t\t\t  #(%2 %1)\n\t\t\t\t\t  (apply (last f) a)\n\t\t\t\t\t  (reverse (butlast f))))\n\t\t\t\t fc))", "problem": 58, "user": "51f2851fe4b0210f90e7454b"}, {"code": "(fn [& fs]\n  (reduce \n    (fn reductor [f e] \n      #(f (apply e %&))) \n    identity \n    fs))", "problem": 58, "user": "5268eb68e4b03e8d9a4a71c6"}, {"code": "(fn r [& x] \n  (if (= (count x) 1)\n    (first x)\n    (fn [& w] ((first x) (apply (apply r (rest x)) w)))\n    ))", "problem": 58, "user": "525cc137e4b0cb4875a45d46"}, {"code": "(let [f\n      (fn [funs result]\n        (if (nil? funs)\n          result\n          (recur (next funs) ((first funs) result))\n        )\n      )\n      g\n      (fn [z & x] (f (next z) (apply (first z) x)))]\n  (fn [& p] \n    (partial g (reverse p))\n  )\n)", "problem": 58, "user": "526dd90de4b03e8d9a4a72fe"}, {"code": "(fn [& funcs] \n  (fn [& params] \n    (letfn [(compo [[f & fs]]\n       (if (empty? fs)\n         (apply f params)\n         (f (compo fs))))]\n    (compo funcs))))", "problem": 58, "user": "525aa499e4b0cb4875a45cf7"}, {"code": "(fn [& funs]\n  (fn [& args]\n    (reduce #(%2 %1) (apply (last funs) args) (reverse (butlast funs)))))", "problem": 58, "user": "51df825de4b01188f062752b"}, {"code": "(fn mycomp [& fns]\n  (fn [ & args]\n    (let [[f & fs] (reverse fns)\n          initial (apply f args)]\n      (reduce #(%2 %1) initial fs))))", "problem": 58, "user": "52655949e4b03e8d9a4a710b"}, {"code": "(fn [& funs]\n  (let [comp* (fn [f g] (fn [& rest] (f (apply g rest))))]\n    (reduce comp* funs)))", "problem": 58, "user": "526f79aee4b03e8d9a4a736a"}, {"code": "(fn my-comp [& funcs]\n  (let [fs (reverse funcs)]\n    (fn [arg]\n      (reduce #(%2 %) arg fs))\n    (fn [& args]\n      (let [first-result (apply (first fs) args)]\n        (reduce #(%2 %) first-result (rest fs))))))", "problem": 58, "user": "51d08d67e4b067c365486351"}, {"code": "(fn [& funs]\n  (fn [& p] \n    (loop [fs (reverse funs) res p]\n      (cond\n        (empty? fs) (first res)\n        :else (recur (rest fs) (list (apply (first fs) res)))))))", "problem": 58, "user": "52667ecfe4b03e8d9a4a713e"}, {"code": "(fn\n  ([] identity)\n  ([f] f)\n  ([f g] \n   (fn\n     ([] (f(g)))\n     ([a](f( g a)))\n     ([a & b ] ( f( apply g a b )))\n     ))\n  \n  ([f g h] \n   (fn\n   ([] (f(g(h))))\n   ([a] (f(g(h a))))\n   ([a & b ] (f(g(apply h a b)))))\n  ))", "problem": 58, "user": "5273562ae4b03e8d9a4a7479"}, {"code": "(fn c[& ffs]\n (let [[f & fs] ffs]\n (fn [& a] \n     (if (nil? fs) (apply f a) (f (apply (apply c fs) a)))\n )\n)\n)", "problem": 58, "user": "52593207e4b0cb4875a45cd3"}, {"code": "(fn [& fs] (fn [& args] (reduce #(%2 %1) (apply (last fs) args) (reverse (butlast fs)))))", "problem": 58, "user": "52746701e4b03e8d9a4a74a2"}, {"code": "(fn [& fns] (fn [& args] (first (reduce #(list (apply %2 %1)) args (reverse fns)))))", "problem": 58, "user": "5274eb56e4b03e8d9a4a74bb"}, {"code": "(fn comp2\n    [& fns]\n    (if (= (count fns) 1)\n        (first fns) \n        (fn [& args] ((apply comp2 (drop-last fns)) (apply (last fns) args)))\n    )   \n)", "problem": 58, "user": "51422945e4b0b50abeb46b2e"}, {"code": "(fn comp1 [& fs]\n  (fn [& arg]\n    ((fn mf [a fss]\n       (if (empty? fss) a (mf ((first fss) a) (next fss)))\n       ) (apply (last fs) arg) (drop 1 (reverse fs)))\n    ))", "problem": 58, "user": "5272669de4b03e8d9a4a742e"}, {"code": "(fn ([f g] (fn [& args] (f (apply g args))))\n    ([f g h] (fn [& args] (f (g (apply h args)))))\n)", "problem": 58, "user": "5272d4b7e4b03e8d9a4a7453"}, {"code": "(fn [x & xs]\n  (fn [& args]\n    ((fn step [[f & fs] a]\n       (if fs\n         (f (step fs a))\n         (apply f a)))\n     (cons x xs) args)))", "problem": 58, "user": "523bde95e4b07becd5be2202"}, {"code": "(fn my-comp [& fns]\n  (fn [& args]\n    (first (reduce #(vector (apply %2 %1)) args (reverse fns)))))", "problem": 58, "user": "526ee63de4b03e8d9a4a733f"}, {"code": "(fn [& fs]\n  (let [[f & fs] (reverse fs)]\n    (fn [& args]\n      (reduce #(%2 %) (apply f args) fs))))", "problem": 58, "user": "527236d4e4b03e8d9a4a741f"}, {"code": "(fn ccomp [f & fs]\n  (let [fs (reverse (list* f fs))]\n    (fn [& args]\n      (loop [ret (apply (first fs) args)\n             fs (next fs)]\n        (if fs\n          (recur ((first fs) ret) (next fs))\n          ret)))))", "problem": 58, "user": "52736ca1e4b03e8d9a4a747e"}, {"code": "(fn \n([f] f)\n  ([f g]\n     (fn\n       ([] (f (g)))\n       ([x] (f (g x)))\n       ([x y] (f (g x y)))\n       ([x y z] (f (g x y z)))\n       ([x y z & args] (f (apply g x y z args)))))\n  ([f g h]\n     (fn\n       ([] (f (g (h))))\n       ([x] (f (g (h x))))\n       ([x y] (f (g (h x y))))\n       ([x y z] (f (g (h x y z))))\n       ([x y z & args] (f (g (apply h x y z args))))))\n  ([f1 f2 f3 & fs]\n    (let [fs (reverse (list* f1 f2 f3 fs))]\n      (fn [& args]\n        (loop [ret (apply (first fs) args) fs (next fs)]\n          (if fs\n            (recur ((first fs) ret) (next fs))\n            ret))))))", "problem": 58, "user": "4feb02fbe4b0140c20fb9c13"}, {"code": "(fn [& fs]\n  (fn [& args]\n    (loop [fs (reverse fs)\n           accum args]\n      (if (empty? fs)\n        (first accum)\n        (recur (rest fs)\n               [(apply (first fs) accum)])))))", "problem": 58, "user": "4ec1b090535dfed6da9c6db5"}, {"code": "(fn a [& fs] (let [f (reverse fs)] (fn [& args] (loop [ret (apply (first f) args) f (next f)] (println f ret args)(if(empty? f)(identity ret)(recur ((first f) ret) (next f)))))))", "problem": 58, "user": "527a8eb7e4b03e8d9a4a755f"}, {"code": "(fn [& fs]\n  (let [[f & fs] (reverse fs)]\n    (fn [& xs]\n      (reduce (fn [acc f] (f acc)) (apply f xs) fs))))", "problem": 58, "user": "5213d7aae4b0961f15ac4d72"}, {"code": "(fn [& fns]\n  (let [fns (reverse fns)]\n    (fn [& args]\n      (loop [f (next fns)\n             r (apply (first fns) args)]\n        (if f\n          (recur (next f) ((first f) r))\n          r)))))", "problem": 58, "user": "5236b6bce4b05f3be1c7c8fe"}, {"code": "(fn\n  ([f1 f2] (fn [& args] (f1 (apply f2 args))))\n  ([f1 f2 f3] (fn [& args] (f1 (f2 (apply f3 args))))))", "problem": 58, "user": "51269362e4b083bb8f88cf09"}, {"code": "(fn [& x] (reduce (fn [f g] (fn [& a] (f (apply g a)))) x))", "problem": 58, "user": "527ba29de4b03e8d9a4a7594"}, {"code": "(fn c [& fs]\n  (fn [& args]\n    (let [fs (reverse fs)\n          r (apply (first fs) args)]\n      (reduce\n       #(%2 %1)\n       r\n       (rest fs)))))", "problem": 58, "user": "522a01ade4b0590a43906ced"}, {"code": "(fn [& fs]\n  (let [rfs (reverse fs) f (first rfs) rs (rest rfs)]\n  (fn [& v]\n    (reduce #(%2 %1) (apply f v) rs))))", "problem": 58, "user": "526439a4e4b03e8d9a4a70cc"}, {"code": "(fn f [a & r]                                        \n    (if r                                            \n      #(a (apply (apply f r) %&))                           \n      a ) )", "problem": 58, "user": "4df20dda535d08e6dec9fe23"}, {"code": "#(fn [& args] (loop [fns (reverse %&) res args]\n                (if (empty? fns) (first res) \n                  (recur (pop fns) (list (apply (peek fns) res))))))", "problem": 58, "user": "519ef784e4b087743fad2198"}, {"code": "(fn my-comp [& xs]\n   (fn [& args]\n       ((fn step [[f & fs] a]\n           (if fs\n             (f (step fs a))\n             (apply f a)))\n        xs args)))", "problem": 58, "user": "52890634e4b0239c8a67ae5e"}, {"code": "(fn com [& fns] (fn[& args](reduce #(%2 %1) (apply (last fns) args) (rest (reverse fns)))))", "problem": 58, "user": "526a3412e4b03e8d9a4a721e"}, {"code": "(fn [x & xs] \n  (fn [& args] \n    ((fn step [[f & fs] a] \n       (if fs \n         (f (step fs a)) \n         (apply f a))) \n     (cons x xs) args)))", "problem": 58, "user": "51f72676e4b06ff1c25c52d3"}, {"code": "(fn [& fns]\n  (let [[f & fs] (reverse fns)]\n  (fn [& args]\n    (reduce #(%2 %1) (apply f args) fs))))", "problem": 58, "user": "527dc2aee4b0757a1b17138d"}, {"code": "(fn mycomp [& fcts]\n  (reduce #(fn [& args] (%1 (apply %2 args))) fcts)\n  )", "problem": 58, "user": "5267d9bde4b03e8d9a4a7188"}, {"code": "(fn [& fs]\n  (let [fs (reverse fs)]\n    (fn [& args]\n      (loop [ret (apply (first fs) args)\n             fs (next fs)]\n        (if fs\n          (recur ((first fs) ret) (next fs))\n          ret)))))", "problem": 58, "user": "51622fb8e4b009fba0926e3f"}, {"code": "(fn [& fs] (fn [& args] (reduce #(%2 %) (apply (last fs) args) (rest (reverse fs)))))", "problem": 58, "user": "5078d366e4b08327cd804a5b"}, {"code": "(fn [& fns]\n  (let [[x & xs] (reverse fns)]\n    (fn [& args]\n      (reduce #(%2 %1) (apply x args) xs))))", "problem": 58, "user": "511aa2a4e4b0c87c59c9670a"}, {"code": "(fn com [& fns]\n    (let [lfn (last fns)\n          rfns (reverse (butlast fns))]\n      (fn [& args]\n        (reduce (fn [result f] (f result))\n                (apply lfn args)\n                rfns))))", "problem": 58, "user": "4f35b2ace4b0e243712b1ec5"}, {"code": "(fn ([] identity)\n  ([f] f)\n  ([f g]\n     (fn\n       ([] (f (g)))\n       ([x] (f (g x)))\n       ([x y] (f (g x y)))\n       ([x y z] (f (g x y z)))\n       ([x y z & args] (f (apply g x y z args)))))\n  ([f g h]\n     (fn\n       ([] (f (g (h))))\n       ([x] (f (g (h x))))\n       ([x y] (f (g (h x y))))\n       ([x y z] (f (g (h x y z))))\n       ([x y z & args] (f (g (apply h x y z args))))))\n  ([f1 f2 f3 & fs]\n    (let [fs (reverse (list* f1 f2 f3 fs))]\n      (fn [& args]\n        (loop [ret (apply (first fs) args) fs (next fs)]\n          (if fs\n            (recur ((first fs) ret) (next fs))\n            ret))))))", "problem": 58, "user": "5047782ce4b0371827a27bc2"}, {"code": "(fn [x & xs] \n  (fn [& args] \n    ((fn step [[f & fs] a] \n       (if fs \n         (f (step fs a)) \n         (apply f a))) \n     (cons x xs) args)))", "problem": 58, "user": "528d74e3e4b0239c8a67aec4"}, {"code": "#(reduce (fn [c f] (fn [& args] (c (apply f args)))) %&)", "problem": 58, "user": "4f0f36a7535d0136e6c22336"}, {"code": "(fn [& f] (fn [& x] (reduce #(%2 %1) (apply (last f) x) (rest (reverse f)))))", "problem": 58, "user": "528e64b7e4b0239c8a67aedd"}, {"code": "(fn [& fns]\n  (let [fns (reverse fns)]\n    (fn [& args]\n      (reduce #(%2 %) (apply (first fns) args) (rest fns)))))", "problem": 58, "user": "51e38568e4b0c611d6113e43"}, {"code": "#(reduce (fn [f g] (fn [& args] (f (apply g args)))) %&)", "problem": 58, "user": "528e95efe4b0239c8a67aee2"}, {"code": "(fn [& fs]\n    (fn [& args] (let [f_list (reverse fs) f_result (apply (first f_list) args)]\n         (loop [r f_result  rf (rest f_list)]\n          (if (empty? rf) r\n              (recur ((first rf) r) (rest rf))\n          )\n       ))\n    )\n)", "problem": 58, "user": "522eba30e4b01cdb292c5f0e"}, {"code": "(fn [& fs]\n  (let [fs (reverse fs)]\n    (fn [& pars]\n      (loop [p (apply (first fs) pars)\n             fs (rest fs)]\n          (if (empty? fs)\n            p\n            (recur ((first fs) p) (rest fs)))))))", "problem": 58, "user": "52753740e4b03e8d9a4a74c1"}, {"code": "(fn my-comp [& fns]                                                                                                                                                                            \n  (let [fs (reverse fns)]                                                                                                                                                                        \n    (fn [& args]                                                                                                                                                                                 \n      (loop [acc (apply (first fs) args)                                                                                                                                                         \n             fs (next fs)]                                                                                                                                                                       \n        (if fs                                                                                                                                                                                   \n          (recur ((first fs) acc) (next fs))                                                                                                                                                     \n          acc)))))", "problem": 58, "user": "50fc48dde4b0d10d794c19f6"}, {"code": "(fn [& fce] \n  (fn \n    [& args]\n    \t(reduce #(%2 %1) (apply (last fce) args) (-> fce butlast reverse))))", "problem": 58, "user": "4fb4303fe4b081705acca2ac"}, {"code": "(fn [& l]\n  (let [r (reverse l)]\n    (fn [& a] ((reduce (fn [u v] #(v (u))) #(apply (first r) a) (rest r))))))", "problem": 58, "user": "517ecab1e4b09104ecebe7e8"}, {"code": "(fn [& f]\n  #((reduce (fn [v f]\n              [(apply f v)])\n            %&\n            (reverse f))\n    0))", "problem": 58, "user": "51ad244fe4b09397d510977f"}, {"code": "(fn p58-compose [& fns]\n  (fn [& args]\n    (let [fs (reverse fns)]\n      (loop [ret (apply (first fs) args)\n             fs  (rest fs)]\n        (if (empty? fs)\n          ret\n          (recur ((first fs) ret) (rest fs)))))))", "problem": 58, "user": "526d6968e4b03e8d9a4a72d9"}, {"code": "(fn [& fcn-list]\n    (fn [& args] (first (reduce #(list (apply %2 %)) args (reverse fcn-list)))))", "problem": 58, "user": "5281a445e4b0757a1b17143a"}, {"code": "(fn mycomp [& fns]\n  (let [f\n        (fn [& args]\n          (loop [fs (reverse (list* fns)) a args]\n            (if (empty? fs) (first a)\n                (let [a1 (apply (first fs) a)]\n                  (recur (rest fs) (list (apply (first fs) a))))))\n          )] f))", "problem": 58, "user": "52140b53e4b0961f15ac4d7e"}, {"code": "(fn [& funcs]\n  (fn [& args]\n    ((fn comp-rec [fs arguments]\n       (if (empty? (rest fs))\n         (apply (first fs) args)\n         (apply (first fs) [(comp-rec (rest fs) arguments)])))\n     funcs args)))", "problem": 58, "user": "527ccaf4e4b0757a1b17136d"}, {"code": "(fn [& fs]\n  (fn [& args]\n    (let [r (apply (last fs) args)]\n      (reduce #(.invoke %2 %1) r (reverse (butlast fs))))))", "problem": 58, "user": "52a1acb2e4b04e0c58e87bdb"}, {"code": "(fn \n  [ & fs]\n    (let [fs (reverse fs)]\n      (fn [& args]\n        (loop [ret (apply (first fs) args) fs (next fs)]\n          (if fs (recur ((first fs) ret) (next fs)) ret)))))", "problem": 58, "user": "5296008fe4b02ebb4ef7502a"}, {"code": "(fn ccomp [& fs]\n  (fn [& xs]\n    (first (reduce\n     (fn [vs f]\n         [(apply f vs)])\n     xs (reverse fs)))))", "problem": 58, "user": "529ce629e4b04e0c58e87b6e"}, {"code": "(fn [& fs]\n  (let [fs (reverse fs)]\n    (fn [& args]\n      (loop [ret (apply (first fs) args) fs (next fs)]\n       (if fs\n         (recur ((first fs) ret) (next fs))\n         ret)))))", "problem": 58, "user": "4ec1619b535dfed6da9c6dab"}, {"code": "(fn solution [& funs]\n  (fn [& args]\n    (let [all (reverse funs)]\n      (loop [not-applied (rest all)\n             ret (apply (first all) args)]\n        (if (empty? not-applied)\n          ret\n          (recur (rest not-applied)  ((first not-applied) ret))\n          )))))", "problem": 58, "user": "5226f8e9e4b04e78ff2e199a"}, {"code": "(fn [& m] (fn [& s] (first (reduce (fn [r i] (list (apply i r))) s (reverse m)))))", "problem": 58, "user": "528652fbe4b0239c8a67ae14"}, {"code": "(fn [& fs]\n    (let [rev-fs (reverse fs)]\n      (fn [& args]\n        (reduce #(%2 %1) (apply (first rev-fs) args) (rest rev-fs)))))", "problem": 58, "user": "52a503e4e4b0c58976d9abe1"}, {"code": "(fn [& fs]\n    (let [fs (reverse fs)]\n      (fn [& args]\n        (loop [ret (apply (first fs) args) fs (next fs)]\n          (if fs\n            (recur ((first fs) ret) (next fs))\n            ret)))))", "problem": 58, "user": "51929214e4b08962174cf74c"}, {"code": ";(fn [& fs] \n ;   (let [f (last fs)\n  ;        r (rest (reverse fs))] \n   ;   (fn [& data] (reduce #(%2 %) (apply f data) r))))\n\n(fn [& fs] \n    (let [[f & r] (reverse fs)] \n      (fn [& data] (reduce #(%2 %) (apply f data) r))))", "problem": 58, "user": "509fe759e4b08df8156e9e43"}, {"code": "(fn [& fns]\n  (fn [& args]\n    (loop [fns (reverse fns) args args result nil]\n      (if-not (seq fns)\n        result\n        (let [result (apply (first fns) args)]\n          (recur (rest fns) [result] result))))))", "problem": 58, "user": "4f45c72be4b0d56e7bb92b8a"}, {"code": "(fn [& fs]\n  (fn [& args]\n    (loop [fs (reverse fs) args args]\n      (if (empty? fs)\n        (first args)\n        (recur (rest fs) [(apply (first fs) args)])))))", "problem": 58, "user": "4f77b68de4b0fbe0118ec581"}, {"code": "(fn func-compose [& fns]\n  (fn [& args]\n    (prn \"args: \" args)\n    (prn \"fns: \" fns)\n\n    (\n    (fn step [[f & fs] a]\n      (if (empty? fs)\n        (apply f a)\n        (f (step fs a))))\n    fns args)))", "problem": 58, "user": "52a6ed15e4b0c58976d9ac0a"}, {"code": "(fn fn-comp [& fs]\n    (let [fs (reverse fs)]\n      (fn [& xs]\n        (loop [r (apply (first fs) xs) fs (rest fs)]\n          (if (not-empty fs)\n            (recur ((first fs) r) (rest fs))\n            r)))))", "problem": 58, "user": "52a04f0ee4b04e0c58e87bc1"}, {"code": "(fn cmp [& args]\n  (partial \n   (fn [fns & n]\n       (if (empty? fns) (first n)\n         (recur (rest fns) [(apply (first fns) n)]))) (reverse args)))", "problem": 58, "user": "5273e006e4b03e8d9a4a7495"}, {"code": "(fn comp* [f & fs]\n  (if (seq fs)\n    (fn [& args]\n      (f (apply (apply comp* fs) args)))\n    (fn [& args]\n      (apply f args))))", "problem": 58, "user": "52ab6de1e4b0c58976d9ac78"}, {"code": "(fn my-comp-1\n  [& fs]\n  (fn [& args]\n    (let [ret (apply (last fs) args)\n          fs (rest (reverse fs))]\n      (reduce #(%2 %1) ret fs))))", "problem": 58, "user": "51937eb3e4b04df54c098022"}, {"code": "(fn [& fs]\n    (fn [& args]\n      (first (reduce (fn [a f] (list (apply f a))) args (reverse fs)))))", "problem": 58, "user": "526f9715e4b03e8d9a4a7372"}, {"code": "(fn [& fs] \n    (let [f (last fs)\n          r (rest (reverse fs))] \n      (fn [& data] (reduce #(%2 %) (apply f data) r))))", "problem": 58, "user": "51febd40e4b0f1313d468a76"}, {"code": "(fn [& fs] \n          (fn [& args]\n            (first\n              (reduce \n                #(list (apply %2 %1))\n                args\n                (reverse fs)\n              ))\n          ))", "problem": 58, "user": "52b1d41ce4b0c58976d9ace6"}, {"code": "(fn [& fs]\n  (fn [& xs]\n    (loop [fs (reverse fs) res xs]\n      (if-let [[f & fs] fs]\n        (recur fs [(apply f res)])\n        (first res)\n        )\n      )\n    )\n  )", "problem": 58, "user": "5298d3f4e4b02ebb4ef75068"}, {"code": "(fn my-comp [f & fs]\n  (if (empty? fs)\n    f\n    (fn [& args]\n      (f (apply (apply my-comp fs) args)))))", "problem": 58, "user": "51789dfae4b03d69594194d7"}, {"code": "(fn [& fs] (fn [& x] (loop [f (reverse fs) a x] (if (empty? f) (first a) (recur (rest f) (list (apply (first f) a)))))))", "problem": 58, "user": "52b43468e4b0c58976d9ad1b"}, {"code": "(fn [& funcs]\n  (fn [& args]\n    (first (reduce #(vector (apply %2 %1)) args (reverse funcs)))))", "problem": 58, "user": "52a55adee4b0c58976d9abe7"}, {"code": "(fn [& fs] (fn [& args] (loop [ret (apply (last fs) args) fs (butlast fs)] (if (seq fs) (recur ((last fs) ret) (butlast fs)) ret))))", "problem": 58, "user": "4e4be570535dc968683fc4d8"}, {"code": "(fn [& funcs]\n               (reduce (fn [f1 f2]\n                         (fn [& xs]\n                           (f1 (apply f2 xs))))\n                       funcs))", "problem": 58, "user": "509e62a8e4b08df8156e9e2e"}, {"code": "(fn [& fs] \n  (let [fs (reverse fs)]\n    (fn [& args]\n      (loop [ret (apply (first fs) args) fs (next fs)]\n        (if fs \n          (recur ((first fs) ret) (next fs))\n          ret)))))", "problem": 58, "user": "52a69e06e4b0c58976d9ac04"}, {"code": "(fn [& fs] (reduce #(fn [& args] (%1 (apply %2 args))) fs))", "problem": 58, "user": "52aad30ce4b0c58976d9ac6d"}, {"code": "(fn [& fns]\n  (fn [& args]\n   (let [applied (apply (last fns) args)\n         ordered-fns (reverse (drop-last fns))]\n     (reduce #(%2 %1) applied ordered-fns))))", "problem": 58, "user": "52b65f26e4b0c58976d9ad43"}, {"code": "(fn [& fs]\n        (reduce\n          (fn [f g]\n            (fn [& xs]\n              (f (apply g xs))))\n          fs))", "problem": 58, "user": "52a88c4de4b0c58976d9ac30"}, {"code": "(fn [& fs]\n  (let [lst (last fs)\n        rst (drop 1 (reverse fs))]\n    (fn [& args]\n      (reduce #(%2 %1) (apply lst args) rst))))", "problem": 58, "user": "4f437751e4b0d7d3c9f3fd20"}, {"code": "(fn f1 [& fs]\n  (fn f2 [& vals]\n    (first\n     (reduce (fn f3 [a f] [(apply f a)])\n             vals\n             (reverse fs)))))", "problem": 58, "user": "4fc3a72ae4b081705acca342"}, {"code": "(fn compose\n  [& fs]\n  (let [rfs (into [] (reverse fs))]\n    (fn [& data]\n      (reduce #(%2 %) (apply (first rfs) data) (rest rfs)))))", "problem": 58, "user": "524f4256e4b0541d1855b808"}, {"code": "(fn _comp [& funcs] \n  (fn [& args] \n    (first(reduce (fn [a func] [(apply func a)]) args (reverse funcs)))))", "problem": 58, "user": "522d0360e4b0806774ddfef7"}, {"code": "(fn [& fs] (fn [& args] (reduce #(%2 %1) (apply (last fs) args) (rest (reverse fs)))))", "problem": 58, "user": "51e28063e4b08e53a149f0f2"}, {"code": "(fn [& fs]\n  (fn [& args]\n    (first (reduce #(list (apply %2 %1))\n                   args (reverse fs)))))", "problem": 58, "user": "52976262e4b02ebb4ef75041"}, {"code": "(fn bach [& fns]\n\t(fn [& args]\n\t\t(loop [[f & t] (reverse fns) rv args a? true]\n\t\t\t(if f\n\t\t\t\t(recur t (if a? (apply f rv) (f rv)) false)\n\t\t\t\trv\n\t\t\t)\n\t\t)\n\t)\n)", "problem": 58, "user": "527ba695e4b03e8d9a4a7596"}, {"code": "(fn [& fs]\n  (let [fs (reverse fs)]\n    (fn [& args]\n      (loop [ret (apply (first fs) args) fs (next fs)]\n          (if fs\n            (recur ((first fs) ret) (next fs))\n            ret)))))", "problem": 58, "user": "52bf8e35e4b07a9af579233a"}, {"code": "(fn [& fns]\n    (fn [& args]\n      (let [[f & fns] (reverse fns)]\n        (reduce #(%2 %1) (apply f args) fns))))", "problem": 58, "user": "52bdb689e4b07a9af5792306"}, {"code": "(fn [& fns]\n  (fn [& args]\n    (reduce\n     #(%2 %1)\n     (apply (last fns) args)\n     (reverse (butlast fns)))))", "problem": 58, "user": "519136e9e4b0f8ef0be96c01"}, {"code": "(fn [& fs]\n  (reduce\n    (fn [f g]\n      (fn [& args]\n        (f (apply g args))))\n    identity fs))", "problem": 58, "user": "527cd633e4b0757a1b17136f"}, {"code": "(fn compose [ f & fs ]\n  (fn [& args]\n    (if (= fs nil)\n      (apply f args)\n      (let [rr (apply compose fs)]\n        (f (apply rr args))))))", "problem": 58, "user": "52be4347e4b07a9af579231b"}, {"code": "(fn [& fs]\n  (fn [& args]\n    (loop [fs (reverse fs)\n           args args]\n      (if (empty? fs)\n        (first args)\n        (recur (rest fs)\n               [(apply (first fs) args)])))))", "problem": 58, "user": "52be58d7e4b07a9af579231d"}, {"code": "(fn my-comp [& fns]\n          (if (= (count fns) 1)\n            (first fns)\n            (fn [& args] ((first fns) (apply (apply my-comp (rest fns)) args)))))", "problem": 58, "user": "5294e44de4b02ebb4ef75016"}, {"code": "(fn [& f] #((reduce (fn [x j] [(apply j x)]) %& (into () f)) 0))", "problem": 58, "user": "52bf29fde4b07a9af579232e"}, {"code": "(fn [& funcs]\n  (fn [& args]\n    (let [comped (reduce (fn [acc el] (fn [& args] (acc (apply el args)))) identity funcs)]\n      (apply comped args))))", "problem": 58, "user": "4f3a979de4b0e243712b1f10"}, {"code": "(fn ([f g] (fn \n                 [& args]\n                 (f (apply g args))))\n          ([f g h] (fn \n                    [& args]\n                    (f (g (apply h args))))))", "problem": 58, "user": "4ffa8affe4b0678c553fc3bd"}, {"code": "(fn c\n  ([f] (fn [& xs] (apply f xs)))\n  ([f g] (fn [& xs] (f (apply g xs))))\n  ([f g & hs] (fn [& xs] (f (g (apply (apply c hs) xs))))))", "problem": 58, "user": "52b955f8e4b07a9af57922bc"}, {"code": "(fn c\n  ([f] f)\n  ([f & g]\n      #(f (apply (apply c g) %&))))", "problem": 58, "user": "4dada16fc9a9d6ed2699dc57"}, {"code": "(fn [& args]\n  (reduce \n   (fn [result fun] (fn [& multi] (fun (apply result multi))))\n   (reverse args)))", "problem": 58, "user": "52c2106fe4b07a9af5792374"}, {"code": "(fn my-comp [& funcs]\n  (let [a (first funcs) b (rest funcs)]\n    (if (empty? b)\n      a\n      (fn [& args]\n        (a (apply (apply my-comp b) args))))))", "problem": 58, "user": "523f1245e4b01c266ffa7f95"}, {"code": "(fn my-comp[& f]\n  (fn [& a]\n    (loop [r (apply (last f) a) f (rest (reverse f))]\n      (if (empty? f)\n        r\n        (recur ((first f) r) (rest f))))))", "problem": 58, "user": "52b405e1e4b0c58976d9ad15"}, {"code": "(fn [& fs] (fn [& a] (reduce (fn [g h] (h g)) (apply (last fs) a) (reverse (butlast fs)))))", "problem": 58, "user": "5167d60de4b0c5a4140a3098"}, {"code": "(fn\n  [& fs]\n  (let [fs (reverse (seq fs))]\n    (fn [& args]\n      (loop [ret (apply (first fs) args)\n             fs (next fs)]\n        (if fs\n          (recur ((first fs) ret) (next fs))\n          ret)))))", "problem": 58, "user": "51852961e4b0da5a5be3babb"}, {"code": "(fn [& funcs]\n  (let [fs (reverse funcs)]\n    (fn [& args]\n      (loop [ret (apply (first fs) args)\n             fs (next fs)]\n        (if fs\n          (recur ((first fs) ret) (next fs))\n           ret)))))", "problem": 58, "user": "52b02329e4b0c58976d9acc5"}, {"code": "(fn [& rest]\n  (fn [& args]\n    (first (reduce (fn [acc it] [(apply it acc)]) args (reverse rest)))))", "problem": 58, "user": "52aa16d1e4b0c58976d9ac5a"}, {"code": "(fn co [& funs]\n  (if (= 1 (count funs))\n    (fn [& args]\n      (apply (first funs) args))\n    (fn [& args]\n      ((apply co (butlast funs)) (apply (last funs) args)))))", "problem": 58, "user": "529e3a4fe4b04e0c58e87b92"}, {"code": "(fn [& fns]\n  (fn [& as]\n    (loop [acc as fns (reverse fns)]\n      (if (empty? fns)\n        (first acc)\n        (recur (list (apply (first fns) acc)) (rest fns))\n        )\n     ))\n  )", "problem": 58, "user": "52ba43d0e4b07a9af57922cd"}, {"code": "(fn outer [f & fs]\n          (if fs\n            (fn [& x] (f (apply (apply outer fs) x)))\n            (fn [& xs] (apply f xs))))", "problem": 58, "user": "52c4fe42e4b0c2d177d620e9"}, {"code": "(fn cmp [& fs]\n  (fn [& args]\n    (let [fs (reverse fs)]\n      (reduce #(%2 %1) (apply (first fs) args) (rest fs))\n     )\n  )\n)", "problem": 58, "user": "52b49aebe4b0c58976d9ad2b"}, {"code": "(fn [& fs]\n  (fn [& xs]\n    (let [x (apply (last fs) xs)]\n      (reduce #(%2 %1) x (reverse (butlast fs))))))", "problem": 58, "user": "50645e12e4b007509339a58a"}, {"code": "(fn c [h & t]\n  (if (empty? t)\n    h\n    #(h (apply (apply c t) %&))\n  )\n)", "problem": 58, "user": "52bbe6e1e4b07a9af57922ef"}, {"code": "(fn [ & fs ]\n  (fn [ & as]\n    (loop [\n           f (reverse fs)\n           r as\n           ]\n      (if \n        (empty? f)\n        (first r)\n        (recur (rest f) [(apply (first f) r)])))))", "problem": 58, "user": "4f05a9cf535dcb61093f6bfc"}, {"code": "(fn [& fs]\n  (fn [& xs]\n    (first (reduce #(vector (apply %2 %1)) xs (reverse fs)))))", "problem": 58, "user": "52c580c2e4b0c2d177d620f5"}, {"code": "(fn function-composition [& fs]\n  (let [[h & t] (reverse fs)]\n\n    (reduce\n\n     (fn [fa f]\n       (fn [& x] (f (apply fa x))))\n   \n     (fn [& x] (apply h x))\n\n     t)))", "problem": 58, "user": "515bbcd9e4b0388ca8ca1521"}, {"code": "#(fn [& a]\n     ((fn x [[f & s]]\n        (if s\n          (f (x s))\n          (apply f a)))\n      %&))", "problem": 58, "user": "52c73194e4b0c2d177d6211e"}, {"code": "(fn [& fs] (reduce #(fn [& x] (% (apply %2 x))) fs))", "problem": 58, "user": "52c58440e4b0c2d177d620f7"}, {"code": "(fn [& a] (fn [& d] (first (reduce #(list (apply %2 %)) d (reverse a)))))", "problem": 58, "user": "52c6a0abe4b0c2d177d62111"}, {"code": "(fn c ([f] f) ([f & fs] (fn [& a] (f (apply (apply c fs) a)))))", "problem": 58, "user": "52b453b0e4b0c58976d9ad21"}, {"code": "(fn [& fs] (fn [& args] (reduce (fn [a b] (b a)) (apply (first (reverse fs)) args) (rest (reverse fs)))))", "problem": 58, "user": "52c1bd29e4b07a9af579236a"}, {"code": "(fn [& fns]  \n  (let [fns (reverse fns)]\n    (fn [& args]\n      (loop [res (apply (first fns) args) fns (rest fns)]\n        (if (seq fns)\n          (recur ((first fns) res) (rest fns))\n          res)))))", "problem": 58, "user": "52cc582ae4b07d0d72b27362"}, {"code": "(fn [& fs] (reduce (fn [composite f] (fn [& args] (composite (apply f args)))) identity fs))", "problem": 58, "user": "4f03641a535dcb61093f6a9b"}, {"code": "(fn c [f & fs]\n  (if fs\n     #(f (apply (apply c fs) %&))\n     f))", "problem": 58, "user": "4e1047ad535d04ed9115e7bf"}, {"code": "(fn comp* ;; cheat; not generic\n  ([f g] (comp* f g identity))\n  ([f g h] #(-> (apply h %&) g f)))", "problem": 58, "user": "52d0902ee4b07d0d72b273bd"}, {"code": "(fn [& fs]\n  (fn [& xs]\n    (loop [fs fs v xs]\n      (if (seq fs)\n        (recur (butlast fs) [(apply (last fs) v)])\n        (first v)))))", "problem": 58, "user": "4ea365e2535d7eef308072c5"}, {"code": "(fn ([f] f)\n  ([f g] (fn [& args] (f (apply g args))))\n  ([f g h] (fn [& args] (f (g (apply h args))))))", "problem": 58, "user": "5268a013e4b03e8d9a4a71b0"}, {"code": "(fn m [& fns]\n  (fn [& args]\n    (first (reduce #(vector (apply %2 %)) args (reverse fns)))))", "problem": 58, "user": "52828298e4b0757a1b17145b"}, {"code": "(fn[& funcs]\n  (fn[& args]\n    (let [funcs (reverse funcs)]\n      (loop [[f & more] (rest funcs) args (apply (first funcs) args)]\n        (if (seq more)\n          (recur more (f args))\n          (f args))))))", "problem": 58, "user": "4fc50525e4b081705acca370"}, {"code": "(fn comb [& funcs]\n  (fn [& args]\n    (first\n      (reduce #(vector (apply %2 %1)) args (reverse funcs )))))", "problem": 58, "user": "5271605ae4b03e8d9a4a73ed"}, {"code": "(fn comp2 [& funs]\n\t(let [rfuns (reverse funs) ffun (first rfuns) ofuns (rest rfuns)]\n\t(fn [& args]\n\t\t(reduce\n\t\t\t(fn [res f] (f res))\n\t\t\t(apply ffun args)\n\t\t\tofuns\n\t\t\t))))", "problem": 58, "user": "5094057fe4b097f48cc38593"}, {"code": "(fn \n  ([] identity)\n  ([f] f)\n  ([f g]\n     (fn\n       ([] (f (g)))\n       ([x] (f (g x)))\n       ([x y] (f (g x y)))\n       ([x y z] (f (g x y z)))\n       ([x y z & args] (f (apply g x y z args)))))\n  ([f g h]\n     (fn\n       ([] (f (g (h))))\n       ([x] (f (g (h x))))\n       ([x y] (f (g (h x y))))\n       ([x y z] (f (g (h x y z))))\n       ([x y z & args] (f (g (apply h x y z args))))))\n  ([f1 f2 f3 & fs]\n    (let [fs (reverse (list* f1 f2 f3 fs))]\n      (fn [& args]\n        (loop [ret (apply (first fs) args) fs (next fs)]\n          (if fs\n            (recur ((first fs) ret) (next fs))\n            ret))))))", "problem": 58, "user": "527c9c08e4b0757a1b171366"}, {"code": "(fn meu-comp [& f]\n           (fn [& p]\n             (reduce #(%2 %1) (apply (last f) p) (reverse (drop-last 1 f)))))", "problem": 58, "user": "52c8758be4b0c2d177d62135"}, {"code": "(fn [& fns]\n  (fn [& args]\n    (reduce #(%2 %1) (apply (last fns) args) (rest (reverse fns)))))", "problem": 58, "user": "52382dd6e4b0fae3832e99f1"}, {"code": "(fn [& funcs] \n  (fn [& args] (first (reduce #(list (apply %2 %)) args (reverse funcs)))))", "problem": 58, "user": "52d02380e4b07d0d72b273b7"}, {"code": "(fn [& functions] \n\t(let [[f & fs] (reverse functions)]\n\t(fn [& p] (reduce #(%2 %1) (apply f p) fs))))", "problem": 58, "user": "52cdb7efe4b07d0d72b2737c"}, {"code": "(fn [& funcs] \n  (fn [& args] (first (reduce #(list (apply %2 %)) args (reverse funcs)))))", "problem": 58, "user": "52d7f7efe4b09f7907dd1380"}, {"code": "(fn [& fns]\n  (let [[f & fs] (reverse fns)]\n    (fn [& args]\n      (reduce #(%2 %) (do (println (apply f args)) (apply f args)) fs))))", "problem": 58, "user": "51a97f7ae4b08d8ec191b827"}, {"code": "(fn [& f]\n  (reduce #(fn [& s] (%2 (apply %1 s))) (reverse f)))", "problem": 58, "user": "5256627ce4b0541d1855ba1a"}, {"code": "(fn mycomp\n        [f g & fs]\n        (let [funs (conj (vec (reverse fs)) g f)]\n          #(loop [fstcall true\n                  ret nil\n                  funs' funs]\n             (println \"ret = \" ret)\n             (println \"funs' = \" funs')\n             (if (empty? funs')\n               ret\n               (let [fun (first funs')\n                     ret (if fstcall \n                           (if (empty? %&)\n                             (fun %)\n                             (apply fun % %&))\n                           (fun ret))]\n                 (recur false ret (rest funs')))))))", "problem": 58, "user": "52c58561e4b0c2d177d620f8"}, {"code": "(fn compo [& functions]\n  (let [fs (reverse functions)]\n    (fn [& args]\n      (loop [ret (apply (first fs) args)\n             fs (next fs)]\n        (if fs\n          (recur ((first fs) ret) (next fs))\n          ret)))))", "problem": 58, "user": "52d7b0ade4b09f7907dd137c"}, {"code": "(fn my-comp [& s]\n    (reduce \n      #(fn[& args](%2 (apply %1 args))) (reverse s))\n    )", "problem": 58, "user": "52bbd09ee4b07a9af57922ee"}, {"code": "(fn [& fs] \n          (fn [& args]\n            (first\n              (reduce \n                #(list (apply %2 %1))\n                args\n                (reverse fs)\n              ))\n          ))", "problem": 58, "user": "50e1a564e4b019fc399ce17a"}, {"code": "(fn compo \n  ([f] f)\n  ([f & fs]\n   (fn [& args]\n     (f (apply (apply compo fs) args)))))", "problem": 58, "user": "525d490ae4b0cb4875a45d70"}, {"code": "(fn f\n\t([h] h)\n\t([h & g] #(h (apply (apply f g) %&))))", "problem": 58, "user": "528a3e14e4b0239c8a67ae72"}, {"code": "(fn compose [& fs]\n  (reduce  (fn [f e] (fn [& args] (e (apply f args)))) (reverse fs)))", "problem": 58, "user": "52951156e4b02ebb4ef7501b"}, {"code": "(fn [& fns]\n    (fn [& args] (first (reduce \n               (fn [acc val] [(apply val acc)])\n               args (reverse fns)))))", "problem": 58, "user": "52c1f404e4b07a9af5792370"}, {"code": "(fn [& fs]\n  (fn [& x]\n    (let [[f & fs] (reverse fs)]\n      (reduce #(%2 %) (apply f x) fs))))", "problem": 58, "user": "4ee75ec2535d93acb0a66867"}, {"code": "(fn [& fs]\n  (fn [& args]\n    (letfn [(docomp [[f1 & fRest]]\n            (if (empty? fRest)\n              (apply f1 args)\n              (f1 (docomp fRest))))]\n      (docomp fs))))", "problem": 58, "user": "52c672e2e4b0c2d177d6210e"}, {"code": "(fn [& fns] \n  (let [rev-fns (reverse fns)] \n    (fn [& params] (reduce #(%2 %1) \n                           (apply (first rev-fns) params) \n                           (rest rev-fns)))))", "problem": 58, "user": "52dd4fb4e4b09f7907dd13df"}, {"code": "#(fn [& m] (reduce (fn [a b] (b a)) (apply (last %&) m) (rest (reverse %&))))", "problem": 58, "user": "52b35a6ee4b0c58976d9ad07"}, {"code": "(fn usercomp [& parms]\n  (fn [& coll]\n    (reduce\n      #(%2 %1)\n      (apply (last parms) coll)\n      (rest (reverse parms)))))", "problem": 58, "user": "52dad8bde4b09f7907dd13be"}, {"code": "(fn ([f g] (fn [& a] (f (apply g a)))) ([f g h] (fn [& a] (f (g (apply h a))))))", "problem": 58, "user": "529b44afe4b02ebb4ef7509d"}, {"code": "(fn\n  ([f g] \n     (fn \n       ([x] (f (g x)))))\n  ([f g h] \n     (fn \n       ([x] (f (g (h x))))\n       ([x y] (f (g (h x y))))\n       ([x y z w] (f (g (h x y z w)))))))", "problem": 58, "user": "52cc4fd6e4b07d0d72b27360"}, {"code": "(fn [& x] (reduce (fn [f g] (fn [& a] (f (apply g a)))) x))", "problem": 58, "user": "52d00832e4b07d0d72b273b4"}, {"code": "(fn cmp\n    ([f] f)\n    ([f & fs] (fn [& args] (f (apply (apply cmp fs) args)))))", "problem": 58, "user": "52d6a9c2e4b09f7907dd1365"}, {"code": "(fn\n      ([f g] (fn[x] (f (g x))))\n      ([f g h](fn[x & args](f (g (apply h x args))))))", "problem": 58, "user": "52d66ca0e4b09f7907dd135c"}, {"code": "(fn [& fs]\n  (fn [& args]\n    (let [fs (reverse fs)]\n      (first (reduce (fn [result f] [(apply f result)]) args fs)))))", "problem": 58, "user": "52c4af71e4b0c2d177d620e1"}, {"code": "(fn [& ops]\n  (fn [& x]\n    (if (= (count x) 1)\n      (reduce #(%2 %1) (first x) (reverse ops))\n      (reduce #(%2 %1) (apply (last ops) x) (rest (reverse ops)))\n      )\n    )\n  )", "problem": 58, "user": "52e59ca5e4b09f7907dd1464"}, {"code": "(fn [& fns]\n  (fn [& c]\n    (first (reduce #(vector (apply %2 %))\n                   c (reverse fns)))))", "problem": 58, "user": "52c25645e4b07a9af579237d"}, {"code": "(fn comp2\n  [& fns]\n  (let [fs (reverse fns)]\n    (fn [& args]\n      (reduce (fn [agg next-fn] (next-fn agg)) (apply (first fs) args) (rest fs)))))", "problem": 58, "user": "4daeabf6edd6309eace4d15c"}, {"code": "(fn [& fx] (fn y[& args] ((fn z[l] (if (= (count l) 1) (apply (first l) args) ((first l) (z (rest l))))) fx)))", "problem": 58, "user": "52e73b36e4b09f7907dd1483"}, {"code": "(fn my-comp \n  ([f] (fn[& args] (apply f args)))\n  ([f g](fn[& args] (f (apply g args))))\n  ([f g & more](fn [& args] (f (g (apply (apply my-comp more) args)))))\n)", "problem": 58, "user": "52763696e4b03e8d9a4a74d7"}, {"code": "(fn [& fs]\n  (fn [& params] (reduce #(%2 %) (apply (last fs) params) (rest (reverse fs)))))", "problem": 58, "user": "522eb5cce4b01cdb292c5f0c"}, {"code": "(fn com\n   ([] identity)\n  ([f] f)\n  ([f g]\n    (fn\n      ([] (f (g)))\n      ([x] (f (g x)))\n      ([x y] (f (g x y)))\n      ([x y z] (f (g x y z)))\n      ([x y z & args] (f (apply g x y z args)))))\n  ([f g h]\n    (fn\n      ([] (f (g (h))))\n      ([x] (f (g (h x))))\n      ([x y] (f (g (h x y))))\n      ([x y z] (f (g (h x y z))))\n      ([x y z & args] (f (g (apply h x y z args))))))\n  ([f1 f2 f3 & fs]\n    (let [fs (reverse (list* f1 f2 f3 fs))]\n      (fn [& args]\n        (loop [ret (apply (first fs) args) fs (next fs)]\n          (if fs\n            (recur ((first fs) ret) (next fs))\n            ret))))))", "problem": 58, "user": "52e25beee4b09f7907dd1433"}, {"code": "(fn [& fns]\n  (reduce (fn [g f] (fn [& args] (f (apply g args)))) (reverse fns)))", "problem": 58, "user": "4ef9c8f9535dced4c769f26b"}, {"code": "(fn comp! [& fns]\n  (fn [& args] \n    (reduce #(%2 %1) (apply (last fns) args) (drop 1 (reverse fns)))))", "problem": 58, "user": "529d4f4be4b04e0c58e87b79"}, {"code": "(fn mycomp [& fs]\n  (let [rfs (reverse fs)]\n    (fn [& args]\n      (loop [r (apply (first rfs) args) rr (rest rfs)]\n        (if (empty? rr)\n          r\n          (recur ((first rr) r) (rest rr)))))))", "problem": 58, "user": "52d809bde4b09f7907dd1384"}, {"code": ";; Admitting defeat - had to look at comp's source.\n(fn\n  ([f] f)\n  ([f & fs]\n   (fn [& args]\n     (let [revfs (reverse (list* f fs))]\n     (loop [fs (next revfs)\n            ret (apply (first revfs) args)]\n       (if (seq fs)\n         (recur (next fs) ((first fs) ret))\n         ret))))))", "problem": 58, "user": "52d3f666e4b09f7907dd1327"}, {"code": "(fn [& fs]\n  (let [fs (reverse fs)]\n    (fn [& args]\n      (loop [res (apply (first fs) args)\n             fs (next fs)]\n        (if-not (nil? fs)\n          (recur ((first fs) res) (next fs))\n          res)))))", "problem": 58, "user": "52efd3d9e4b05e3f0be25ed4"}, {"code": "(fn accomp [& fns]\n  (letfn [(comper [[f & r] args]\n            (if (empty? r) (apply f args) (f (comper r args))))]\n    (fn [& args] (comper fns (vec args)))))", "problem": 58, "user": "50c2fbebe4b00e537d00253c"}, {"code": "(fn [& funcs]\n  (fn [& args] (first (reduce #(list (apply %2 %)) args (reverse funcs)))))", "problem": 58, "user": "52699a0ee4b03e8d9a4a71f2"}, {"code": "(fn my-comp\n  [& fs]\n  (reduce (fn [fs f]\n            (fn [& args]\n              (fs (apply f args))))\n          fs))", "problem": 58, "user": "52dd6cc8e4b09f7907dd13e2"}, {"code": "(fn [& funcs] \n    (fn [& args] (first (reduce #(list (apply %2 %1)) args (reverse funcs)))))", "problem": 58, "user": "52e3e6a8e4b09f7907dd1448"}, {"code": "(fn combo [& fns] (fn [& args] (reduce #(%2 %1) (apply (last fns) args) (reverse (butlast fns)))))", "problem": 58, "user": "52f10094e4b05e3f0be25ee8"}, {"code": "(fn [& fs]\n    (let [fs (reverse fs)]\n    (fn [& args]\n      (loop [ret (apply (first fs) args)\n             fs (next fs)]\n        (if fs\n          (recur ((first fs) ret) (next fs))\n          ret)))))", "problem": 58, "user": "52d9aaa1e4b09f7907dd13ae"}, {"code": "(fn [& fs]\n  (let [fs     (reverse fs)\n        f      (first fs)\n        restfs (rest fs)]\n    (fn [& args]\n      (reduce (fn [x f] (f x)) (apply f args) restfs))))", "problem": 58, "user": "527a69cee4b03e8d9a4a755d"}, {"code": "(fn rev-apply [& fns]\n  (let [rev-fns (reverse fns)]\n    (fn [& args]\n      (reduce #(%2 %1) (apply (first rev-fns) args) (rest rev-fns)))))", "problem": 58, "user": "52f07ccee4b05e3f0be25edf"}, {"code": "(fn [& args]\n  (let [reducef (fn [acc e]\n                  (fn [& p]\n                    (acc (apply e p))))]\n    (reduce reducef args)))", "problem": 58, "user": "52f8f4d1e4b047fd55836fde"}, {"code": "(fn comp-r-l [& args]\n  (fn \n    [input]\n    (loop [result input, fns (reverse args)]\n      (if (empty? fns)\n        result\n        (recur ((first fns) result) (rest fns)))))\n  (fn \n    [a & i]\n    (let [input (conj i a)\n          funs (reverse args)]\n      (loop [result (apply (first funs) input), fns (rest funs)]\n        (if (empty? fns)\n          result\n          (recur ((first fns) result) (rest fns))))))\n  )", "problem": 58, "user": "52cf084ce4b07d0d72b27399"}, {"code": "(fn *c\n  ([f-1 f-2] (fn [& args] (f-1 (apply f-2 args))))\n  ([f-1 f-2 & funcs] (*c f-1 (apply *c (cons f-2 funcs)))))", "problem": 58, "user": "51ab4082e4b04e3dc0c27b31"}, {"code": "(fn \n  ([f g] (fn [& x] (f (apply g x))))\n  ([f g h] (fn [& y] (f (g (apply h y))))))", "problem": 58, "user": "52ee0de4e4b05e3f0be25ec1"}, {"code": "(fn [& fs] \n         (fn [& args]\n             (let [fs (reverse fs)]\n               (reduce #(%2 %1) (apply (first fs) args) (rest fs)))))", "problem": 58, "user": "4f1c9652535d64f603146483"}, {"code": "(fn [& f] (fn [& x] (reduce #(%2 %1) (apply (first (reverse f)) x) (rest (reverse f)))))", "problem": 58, "user": "5300aa1de4b0d8b024fd3710"}, {"code": "(fn [& fs] (fn [& xs] (let [rfs (reverse fs)] (reduce #(%2 %1) (apply (first rfs) xs) (drop 1 rfs)))))", "problem": 58, "user": "52dc2bc8e4b09f7907dd13ca"}, {"code": "(fn [& F]\n    (let [[f & F] (reverse F)]\n      #(reduce (fn [a f]\n                 (f a))\n               (apply f %&)\n               F)))", "problem": 58, "user": "51a10b2ce4b0b292b01ee3fe"}, {"code": "(fn [& fs]\n\t(fn [& args]\n\t\t(loop [\tfuncs (rest (reverse fs))\n\t\t\t\tret (apply (first (reverse fs)) args)]\n\t\t\t\t(if (empty? funcs)\n\t\t\t\t\tret\n\t\t\t\t\t(recur (rest funcs) ((first funcs) ret))))))", "problem": 58, "user": "4f47eab2e4b0d56e7bb92bc6"}, {"code": "(fn [& fns]\n  (fn [& params]\n    (first (reduce (fn [acc f] [(apply f acc)]) params (reverse fns)))))", "problem": 58, "user": "4f48f587e4b0d56e7bb92be2"}, {"code": "#(let [fs (reverse (list* % %&))]\n   (fn [& args]\n     (loop [ret (apply (first fs) args) fs (next fs)]\n       (if fs\n         (recur ((first fs) ret) (next fs))\n         ret))))", "problem": 58, "user": "52d7f9a8e4b09f7907dd1381"}, {"code": "(fn [& fs] (fn [& xs] (reduce #(%2 %1) (apply (last fs) xs) (rest (reverse fs)))))", "problem": 58, "user": "524469dee4b0d8acf9ed6a9d"}, {"code": "(fn [x & xs]\n    (fn [& args]\n      ((fn step [[f & fs] a]\n         (if fs\n           (f (step fs a))\n           (apply f a)))\n       (cons x xs) args)))", "problem": 58, "user": "52eee533e4b05e3f0be25ecb"}, {"code": "(fn com\n    ([] identity)\n    ([& fs] (fn [& args] ((apply com (butlast fs)) (apply (last fs) args)))))", "problem": 58, "user": "5300f68de4b0d8b024fd3714"}, {"code": "(fn [& fns]\n    (fn [& args]\n      (let [[f & fns] (reverse fns)]\n        (reduce #(%2 %1) (apply f args) fns))))", "problem": 58, "user": "52eb400ee4b0705949c4443b"}, {"code": "(fn [& funs] \n    (let [fs (reverse funs)]\n      (fn [& args]\n        (loop [ret (apply (first fs) args) fs (next fs)]\n          (if fs \n            (recur ((first fs) ret) (next fs))\n            ret)))))", "problem": 58, "user": "52fa4f48e4b047fd55836ff7"}, {"code": "(fn [& fs]\n  (letfn [(ccc ([f1 f2] (fn [& more] (f1 (apply f2 more))))\n               ([f1 f2 f3] (fn [& more] (f1 (f2 (apply f3 more))))))]\n   \t(apply ccc fs)\n    ))", "problem": 58, "user": "52fcfeeee4b047fd55837027"}, {"code": "(fn [& funs]\n  (let [[f & funs] (reverse funs)]\n    (fn [& x] \n      (reduce #(%2 %1) (apply f x) funs))))", "problem": 58, "user": "528a2de7e4b0239c8a67ae71"}, {"code": "(fn [& os]\n  (fn [& ps]\n    (letfn \n      [(myap [_os _ps]\n       (if (empty? _os)\n         _ps\n         (myap (rest _os) ((first _os) _ps))\n         ))]\n      (myap (rest (reverse os)) (apply (last os) ps))\n      )))", "problem": 58, "user": "52faec2ee4b047fd55837004"}, {"code": "(fn [& c]\n   (fn [& x]\n     (first (reduce #(vector (apply %2 %1)) x (reverse c)))) )", "problem": 58, "user": "52f4fae4e4b05e3f0be25f27"}, {"code": "(fn [& fs]\n  (fn [& args]\n    (loop [f fs\n           arg args]\n      (if f\n       (recur\n        (butlast f)\n        [(apply (last f) arg)])\n       (first arg)))))", "problem": 58, "user": "50f53694e4b057d4c52de881"}, {"code": "(fn [& fns]\n  (fn [& args]\n    (let [rfns (reverse fns)]\n      (reduce #(%2 %1) (apply (first rfns) args) (rest rfns)))))", "problem": 58, "user": "528e7433e4b0239c8a67aedf"}, {"code": "(fn [& funcs]\n  (reduce #(fn [& args] (%1 (apply %2 args))) funcs))", "problem": 58, "user": "530578ede4b0d8b024fd3760"}, {"code": "(fn [& f]  (fn [& d]  (first (reduce (fn[acc el] (list(apply el acc))) d (reverse f)))))", "problem": 58, "user": "5307e4ece4b02e82168697a9"}, {"code": "(fn cmp [f & gs]\n  (if (seq gs)\n    (fn [& args]\n      (f (apply (apply cmp gs) args)))\n    (fn [& args] (apply f args))))", "problem": 58, "user": "4dad8a6dc9a9d6ed1399dc57"}, {"code": "(fn [& xs] (fn [& input] (reduce #(%2 %1) (apply (last xs) input) (rest(reverse xs)) ) ))", "problem": 58, "user": "52bf6946e4b07a9af5792334"}, {"code": "(fn[& f]\n  (fn[& v]\n    (reduce\n     #(%2 %)\n     (apply (last f) v)\n     (rest (reverse f)))))", "problem": 58, "user": "52f818a6e4b047fd55836fcc"}, {"code": "(fn [& funs] \n  (fn [& args]\n    (loop [fs (reverse (butlast funs))\n           res (apply (last funs) args)]\n      (if fs\n        (recur (next fs) ((first fs) res))\n        res))))", "problem": 58, "user": "5302bb37e4b0d8b024fd3734"}, {"code": "(fn [& funcs]\n  (fn [& all]\n    (first\n      (reduce\n        (fn [result func]\n          (list (apply func result)))\n        all (reverse funcs)))))", "problem": 58, "user": "53070615e4b02e821686979e"}, {"code": "(fn cmp [& fs]\n  #(loop [fs (reverse fs)\n          args %&]\n     (if (empty? fs)\n       (first args)\n       (recur (rest fs) [(apply (first fs) args)]))))", "problem": 58, "user": "4dbecb06535d020aff1edf6a"}, {"code": "(fn comp2 [& fnsBackwards]\n  (fn ret [& args]\n  (let [fns (reverse fnsBackwards)\n        reducer (fn [acc op2] (op2 acc))]\n    (reduce reducer (apply (first fns) args) (rest fns))\n    )))", "problem": 58, "user": "52ffb7f2e4b0d8b024fd370b"}, {"code": "(fn [& fns] (fn [& x]\n              (loop [fs fns c identity]\n                (if (empty? fs)\n                  (apply c x)\n                  (recur (rest fs) \n                         (fn [& x] (c (apply (first fs) x))))))))", "problem": 58, "user": "5313c007e4b08068f379ed0e"}, {"code": "(fn top [& [arg1 :as fnls]]\n  (let [lastfn (last fnls)]\n    (fn [& [:as ls]] (if (nil? arg1)\n              (first ls)\n              ((apply top (drop-last 1 fnls)) (apply lastfn ls))))\n    ))", "problem": 58, "user": "5301157ae4b0d8b024fd3717"}, {"code": "(fn my-comp [& funcs]\n  (fn [& args]\n    (cond (empty? funcs) nil\n          (empty? (rest funcs)) (apply (first funcs) args)\n          :else ((first funcs) (apply (apply my-comp (rest funcs)) args)))))", "problem": 58, "user": "5310e7aee4b08068f379ecdc"}, {"code": "(fn fx\n ([f] f)\n ([f1 f2] #(f1 (apply f2 %&)))\n ([f1 f2 & fs] (fx (fx f1 f2) (apply fx fs))))", "problem": 58, "user": "5316cdcae4b08068f379ed4b"}, {"code": "(fn [& fns]\n  (do\n    (fn [& args]\n      (do\n        (reduce (fn [s n]\n                  (do\n                    (n s)\n                  )\n                ) (apply (last fns) args) (rest (reverse fns)))\n      )\n    )\n  )\n)", "problem": 58, "user": "5303a027e4b0d8b024fd3745"}, {"code": "(fn [& fns]\n  (fn [& args]\n    (reduce \n       (fn [result f2] (f2 result)) \n       (-> fns last (apply args)) \n       (-> fns reverse rest)))\n  )", "problem": 58, "user": "531490bde4b08068f379ed17"}, {"code": "(fn cmp [f & gs]\n  (if (empty? gs)\n  \tf\n  \t(let [fog (fn [& args]\n                (f (apply (first gs) args)))]\n      (apply cmp fog (rest gs)))))", "problem": 58, "user": "5315ec83e4b08068f379ed39"}, {"code": "(fn [& fns]\n  (fn [& args]\n    (reduce #(%2 %1) (apply (last fns) args) (rest (reverse fns)))))", "problem": 58, "user": "52fb64b7e4b047fd55837009"}, {"code": "(fn [& fs]\n  (fn [& gs]\n    (reduce #(%2 %1) (apply (last fs) gs) (rest (reverse fs)))))", "problem": 58, "user": "50b9d991e4b04934c218a4a9"}, {"code": "(fn [a b & c]\n        (fn[& coll]\n          (println (if c (flatten [ #(apply (first c) %) (rest c)  b a]) [b a]))\n          (reduce (fn[x el] (el x) ) (flatten coll) (if c (flatten [ #(apply (first c) %) (rest c)  b a]) [b a]) )\n        )\n)", "problem": 58, "user": "52da20c7e4b09f7907dd13b3"}, {"code": "#(fn [& x] \n  (loop [fs (drop-last %&) o (apply (last %&) x)]\n    (if (empty? fs)\n      o\n      (recur (drop-last fs) ((last fs) o))\n    )\n  )  \n)", "problem": 58, "user": "5176afd2e4b085adf681d889"}, {"code": "(fn[& fns] (fn [& x] \n               (loop [fns (reverse fns) \n                      x x]\n                 (if (empty? fns) \n                   (first x)\n                   (recur (rest fns)  (list (apply (first fns) x)))))))", "problem": 58, "user": "531bfb69e4b08068f379ed97"}, {"code": "(fn combine [& f]\n  (fn [& args]\n    (let [start (apply (last f) args)\n          rf (rest (reverse f))]\n      (reduce\n       (fn [a b] (b a))\n       start\n       rf))))", "problem": 58, "user": "5125029de4b0ce9225d2ed3e"}, {"code": "(fn comb [& funcs]\n  (fn [& args]\n    (first\n      (reduce #(vector (apply %2 %1)) args (reverse funcs )))))", "problem": 58, "user": "527367dfe4b03e8d9a4a747d"}, {"code": "(fn compose [h & t]\n  (if (nil? t) h\n    (fn [& x] (h (apply (apply compose t) x)))))", "problem": 58, "user": "531619c1e4b08068f379ed3d"}, {"code": "(fn \n  ([ fn1 fn2 ] #(-> % fn2 fn1))\n  ([ fn1 fn2 fn3 ]\n   \n   \t(fn [ & args] (fn1 \n                         (fn2 \n                                (apply fn3 args)\n                                )\n                         )\n    )\n  )\n)", "problem": 58, "user": "5085bfdae4b004985b776e53"}, {"code": "(fn ([& fs]\n            (let [fs (reverse fs)]\n              (fn [& args]\n                (loop [ret (apply (first fs) args) fs (next fs)]\n                  (if fs\n                    (recur ((first fs) ret) (next fs))\n                    ret))))))", "problem": 58, "user": "52a5a8ebe4b0c58976d9abed"}, {"code": "#(let [f (reverse %&)]\n   (fn [& as]\n     (loop [r (apply (first f) as)\n            f (next f)]\n       (if (not f)\n         r\n         (recur ((first f) r) (next f))))))", "problem": 58, "user": "53034738e4b0d8b024fd373e"}, {"code": "(fn [& fns] (fn [& args] (first (reduce (fn [a f] [(apply f a)]) args (reverse fns)))))", "problem": 58, "user": "532347dde4b09d4e7a9b54cc"}, {"code": "(fn _comp [f & more]\n  (if (empty? more) f\n  (fn [& args]\n    (f (apply (apply _comp more) args))))\n)", "problem": 58, "user": "5323a414e4b09d4e7a9b54d1"}, {"code": "(fn [x & xs]\n    (fn [& args]\n      ((fn step [[f & fs] a]\n         (if fs\n           (f (step fs a))\n           (apply f a)))\n       (cons x xs) args))\n    )", "problem": 58, "user": "52430d3ce4b076204b44faa5"}, {"code": "(fn comp_[& fns] (loop [funs (rest (reverse fns))\n                   result (fn[& a] (apply (first (reverse fns)) a))] \n               \n              (if (empty? funs) result \n                (recur (rest funs) (fn[& a]((first funs) (apply result a))))\n               \n               )\n             ))", "problem": 58, "user": "4f320253e4b0d6649770a08d"}, {"code": "(fn [& fs]\n  (fn [& args]\n    (reduce #(%2 %1)\n            (apply (last fs) args)\n            (rest (reverse fs)))))", "problem": 58, "user": "5300158ae4b0d8b024fd370f"}, {"code": "(fn [& f] (fn [& args] (->> f reverse (reduce #(list (apply %2 %1)) args) first)))", "problem": 58, "user": "530cb5b8e4b02e82168697e0"}, {"code": "(fn\n([f1 f2] (fn [& args] (f1 (apply f2 args))))\n([f1 f2 f3] (fn [& args] (f1 (f2 (apply f3 args))))))", "problem": 58, "user": "4fd11a93e4b04c3a95aa040a"}, {"code": "(fn [& fs] \n  (fn [& vs]\n    (let [rv (reverse fs)\n          rf (first rv)\n          rfs (rest rv)\n          ]\n      (reduce #(%2 %1) (apply rf vs) rfs))))", "problem": 58, "user": "5326c5f7e4b09d4e7a9b54f2"}, {"code": "(fn func-comp\n  [fun & fns] (if (nil? fns)\n \t          fun\n\t\t  (fn [& args] (fun (apply (apply func-comp fns) args)))\n))", "problem": 58, "user": "531c0619e4b08068f379ed98"}, {"code": "(fn outer [f & fs]\n          (if fs\n            (fn [& x] (f (apply (apply outer fs) x)))\n            (fn [& xs] (apply f xs))))", "problem": 58, "user": "525c575be4b0cb4875a45d38"}, {"code": "(fn [& list]\n  (fn [& more]\n    (let [tsil (reverse list)]\n      (loop [r (rest tsil) v (if (seq? more)\n                               (apply (first tsil) more)\n                               ((first tsil) more))]\n        (if (empty? r)\n          v\n          (recur (rest r) ((first r) v)))))))", "problem": 58, "user": "52c81954e4b0c2d177d6212e"}, {"code": "(fn [& fs] (reduce (fn [f g] (fn [& args] (f (apply g args)))) fs))", "problem": 58, "user": "531f1e63e4b08068f379edc2"}, {"code": "(fn [& fns]\n    (fn [& args]\n      (let [[s & r] (reverse fns)]\n        (reduce #(%2 %) (apply s args) r))))", "problem": 58, "user": "5005b57de4b0678c553fc46a"}, {"code": "(fn [x & xs]\n  (fn [& args]\n    ((fn step [[f & fs] a]\n       (if fs\n         (f (step fs a))\n         (apply f a)))\n     (cons x xs) args)))", "problem": 58, "user": "51d0977fe4b067c365486352"}, {"code": "(fn [& functions]\n  (fn [& args]\n    (loop [funcs (rest (reverse functions))\n           res (apply (first (reverse functions)) args)]\n      (if-not (empty? funcs)\n        (recur (rest funcs) ((first funcs) res))\n        res))))", "problem": 58, "user": "532418f3e4b09d4e7a9b54d8"}, {"code": "(fn [& fns] (fn [& args] (first (reduce #(list (apply %2 %1)) args (reverse fns)))))", "problem": 58, "user": "531f7a2de4b08068f379edc6"}, {"code": "(fn [& fs] \n  (fn [& args]\n  (first (reduce #(list (apply %2 %)) args (reverse fs))))\n )", "problem": 58, "user": "52be0263e4b07a9af579230e"}, {"code": "(fn [& f-list] (fn [& d] (reduce #(%2 %) (apply (last f-list) d) (rest (reverse f-list)))))", "problem": 58, "user": "52265e41e4b04e78ff2e1981"}, {"code": "(fn [& args]\n    (fn name [& list]\n      (let [args (reverse args)\n            val (apply (first args) list)]\n        (reduce (fn [a b] (b a)) val (rest args))\n        )\n      ))", "problem": 58, "user": "5322d364e4b09d4e7a9b54c6"}, {"code": "(fn newcomp [& f]\n     (if (= (count f) 1)\n       (fn phi [& x]\n         (apply (first f) x))\n       (fn psi [& y]\n         ((first f) (apply (apply newcomp (rest f)) y)))))", "problem": 58, "user": "532727bae4b09d4e7a9b54fa"}, {"code": "(fn my-cmp [& fns]\n  (fn [& args]\n    (loop [todo (next (reverse fns))\n          return (apply (last fns) args)]\n      (if todo\n        (recur (next todo) ((first todo) return))\n        return))))", "problem": 58, "user": "52cb19abe4b07d0d72b27348"}, {"code": "(fn cmpo [f & fs]\n  (fn [& a]\n     (if (empty? fs) (apply f a)\n         (f (apply (apply cmpo fs) a)))))", "problem": 58, "user": "53300924e4b019098a6f8b55"}, {"code": "(fn [& fns]\n    (fn [& arg]\n      (first (reduce (fn [ret cur]\n                [(apply cur ret)]) arg (reverse fns)))))", "problem": 58, "user": "525ed5f4e4b0cb4875a45db8"}, {"code": "(fn [& funcs]\n  (fn [& args]\n    (first\n     (reduce\n      #(list (apply %2 %))\n      args\n      (reverse funcs)))))", "problem": 58, "user": "520fff3ce4b080a8d9b9d633"}, {"code": "(fn f [& fns]\n  #(first (reduce (fn [x f] [(apply f x)]) %& (reverse fns))))", "problem": 58, "user": "53315c78e4b019098a6f8b67"}, {"code": "(fn d [& fs]\n  (if (next fs)\n    #((first fs) (apply (apply d (rest fs)) %&)  )\n    (first fs)))", "problem": 58, "user": "5336a339e4b0e30313ee6c7d"}, {"code": ";; (fn [& fs] ;; fs = [rest reverse]\n;;  (fn [& args] ;; args = [[1 2 3 4]]\n;;    (first\n;;      (reduce\n;;        (fn [[& args] f] \n;;          (list (apply f args))) ;; (apply reverse [[[1 2 3 4]]])\n;;        args ;; [[1 2 3 4]]\n;;        (reverse fs)))))\n\n(fn [& fs] ;; fs = [rest reverse]\n  (fn [& args] ;; args = [[1 2 3 4]]\n    (first\n      (reduce\n        (fn [args f] \n          (list (apply f args))) ;; (apply reverse [[1 2 3 4]])\n        args ;; [[1 2 3 4]]\n        (reverse fs)))))", "problem": 58, "user": "533696b9e4b0e30313ee6c7c"}, {"code": "(fn f [& args]\n  (letfn [(solve [x args]\n            (if (empty? args)\n             x\n             (recur ((first args) x) (rest args)))\n            )]\n    (fn [& x]\n      (solve (apply (first (reverse args)) x) (rest (reverse args))))\n    )\n  )", "problem": 58, "user": "5302ac7fe4b0d8b024fd3731"}, {"code": "(fn [& m] (fn [& x] (first (reduce #(vector (apply %2 %)) x (reverse m)))))", "problem": 58, "user": "52d7a930e4b09f7907dd1379"}, {"code": "(fn ([f1 f2] #(f1 (f2 %)))\n       ([f1 f2 f3] (fn [& args] (f1 (f2 (apply f3 args))))))", "problem": 58, "user": "53286f84e4b09d4e7a9b5505"}, {"code": "(fn [& lst]\n\t(fn \n      [& args] (reduce (fn [a b] (b a)) (apply (last lst) args) (rest (reverse lst)))\n\t)\n)", "problem": 58, "user": "52570aeae4b0541d1855ba42"}, {"code": "(fn compm [& fs]\n  (if (= 1 (count fs))\n    (fn [& r]\n      (apply (first fs) r))\n    (fn [& r]\n      ((first fs) (apply (apply compm (rest fs)) r))\n      )))", "problem": 58, "user": "532b43c3e4b09d4e7a9b5531"}, {"code": "(fn fn-list [& fns]\n  (let [fns (reverse fns)]\n    (fn [& args]\n      (loop [res (apply (first fns) args)\n             fns (rest fns)]\n        (if-not (empty? fns)\n          (recur ((first fns) res) (rest fns))\n          res)))))", "problem": 58, "user": "52d885afe4b09f7907dd1398"}, {"code": "(fn compose\n  ([] identity)\n  ([f] f)\n  ([f & fs]\n   #(-> compose\n        (apply fs)\n        (apply %&)\n        f)))", "problem": 58, "user": "532ab0bde4b09d4e7a9b5527"}, {"code": "(fn my-comp\n  ([a b] (fn [& args]\n           (a (apply b args))))\n  ([a b c] (my-comp a (my-comp b c))))", "problem": 58, "user": "4feff3b6e4b0678c553fc31e"}, {"code": "(fn [& fs]\n    (let [fs (reverse fs)]\n      (fn [& args]\n        (loop [ret (apply (first fs) args) \n               fs (next fs)]\n          (if fs\n            (recur ((first fs) ret) (next fs))\n            ret)))))", "problem": 58, "user": "5336ca32e4b0e30313ee6c80"}, {"code": "(fn [& funs] \n  (reduce  (fn [acc,f] (fn [& args] (acc (apply f args)))) funs))", "problem": 58, "user": "533ab9abe4b0e30313ee6cbf"}, {"code": "(fn f [& fs] (reduce #(fn [& n] (%1 (apply %2 n))) identity fs))", "problem": 58, "user": "52d1e364e4b0d9f9285948e7"}, {"code": "(fn[& fs](let [[f & fns] (reverse fs)] (fn [& args](reduce #(%2 %1) (apply f args) fns))))", "problem": 58, "user": "51efa6a6e4b0249c592fbde8"}, {"code": "(fn [& fns]\n  (letfn [(comp-2 [f1 f2] (fn [& args] (f1 (apply f2 args))))]\n    (reduce comp-2 fns)))", "problem": 58, "user": "51a3b135e4b0e77c4ca60bf6"}, {"code": "(fn [& f]\n  (fn [& args]\n    (let [[f1 & fr] (reverse f)]\n      (reduce #(%2 %) (apply f1 args) fr))))", "problem": 58, "user": "5036eba7e4b0af0658af77a5"}, {"code": "(fn f [x & r]\n  (if (empty? r)\n    #(apply x %&)\n    #(x (apply (apply f r) %&))))", "problem": 58, "user": "506d5e4ce4b0a302964c5493"}, {"code": "(fn [& fs]\n  (fn [& args]\n    (first (reduce #(list (apply %2 %)) args (reverse fs)))))", "problem": 58, "user": "533018b2e4b019098a6f8b56"}, {"code": "(fn[& fncts]\n      (fn[& argmts]\n        (reduce (fn[argmt fnct](fnct argmt)) \n                (apply (last fncts) argmts) \n                (rest(reverse fncts)))))", "problem": 58, "user": "532631e1e4b09d4e7a9b54ea"}, {"code": "(fn [& sf]\n  (let [fs (reverse sf)\n        iscon (fn [testo] (= (type (cons 1 (list 1))) (type testo)))]\n    (fn [parg & arg]\n      (loop [f (first fs)\n           fr (rest fs)\n           zarg (if (nil? arg) parg (cons parg arg))]\n        (if f\n          (recur (first fr) (rest fr)\n                (if-not (iscon zarg) (apply f zarg nil)\n                        (apply f zarg)))\n          zarg)))))", "problem": 58, "user": "52747090e4b03e8d9a4a74a5"}, {"code": "(fn [& fs] (let [fs (reverse fs)] (fn [& as] (reduce (fn [accum f] (f accum)) (apply (first fs) as) (drop 1 fs)))))", "problem": 58, "user": "533ee560e4b085b17e897d98"}, {"code": "(fn [& procs]\n  (fn [& args]\n    ((fn iter [pl res]\n       (if (empty? pl) res\n         (iter (rest pl) ((first pl) res))))\n     (rest (reverse procs)) (apply (last procs) args))))", "problem": 58, "user": "51da631be4b02ceefd947766"}, {"code": "(fn [& fs]\n  (fn [& args]\n    (reduce #(apply %2 [%1]) (apply (last fs) args) (reverse (butlast fs)))))", "problem": 58, "user": "5341b141e4b00652c8746ecf"}, {"code": "(fn [& fns]\n    (fn [& args]\n        (let [rfns (reverse fns)]\n            (loop [a (apply (first rfns) args) fns (rest rfns)]\n                (if (empty? fns)\n                    a\n                    (recur ((first fns) a) (rest fns))\n                )\n            )\n        )\n    )\n)", "problem": 58, "user": "53409368e4b085b17e897daf"}, {"code": "(fn [& fns]    (fn [& args]      (let [[f & fns] (reverse fns)]         (reduce #(%2 %1) (apply f args) fns))))", "problem": 58, "user": "50be9b4ae4b00fb48fed2ef6"}, {"code": "(fn comp1 [& comp-fns]\n  (fn [& args]\n\t(let [accum1 (fn [x y]\n                   (y x))\n          run-order (reverse comp-fns)\n          first-val (apply (first run-order) args)]\n      (reduce accum1 first-val (rest run-order)))))", "problem": 58, "user": "51f82769e4b09be9c177e527"}, {"code": "(fn [& fs] \n  (fn [& as] \n    (reduce (fn [x y] (y x)) (apply (last fs) as) (rest (reverse fs)))))", "problem": 58, "user": "525ab6cfe4b0cb4875a45cf9"}, {"code": "(fn comb [& funcs]\n  (fn [& args]\n    (first\n      (reduce #(vector (apply %2 %1)) args (reverse funcs )))))", "problem": 58, "user": "50436470e4b034ff00315d23"}, {"code": "(fn gfx [& fns]\n  (reduce #(fn [& x] (%1 (apply %2 x))) fns))", "problem": 58, "user": "52d2ca1ce4b099d49816f0b4"}, {"code": "(fn [& fns]\n   (fn [& args]\n     (let [rslt (atom (apply (last fns) args))\n           fns (reverse (drop-last fns))]\n       (doall (for [f fns]\n                (reset! rslt (f @rslt))))\n       @rslt)))", "problem": 58, "user": "532bce35e4b09d4e7a9b5536"}, {"code": "(fn new_comp [& fns] (partial (fn run_stuff [fns & args] \n                                (if (empty? fns) \n                                  (first args) \n                                  (run_stuff (butlast fns) (apply (last fns) args)))) fns))", "problem": 58, "user": "4fbd6210e4b081705acca303"}, {"code": "(fn compose \n  ([] identity)\n  ([f] f)\n  ([f g] (fn \n           ([]         (f (g)))\n           ([x]        (f (g x)))\n           ([x & args] (f (apply g x args)))))\n  ([f g h]\n   (fn \n     ([]         (f (g (h))))\n     ([x]        (f (g (h x))))\n     ([x & args] (f (g (apply h x args)))))))", "problem": 58, "user": "5054c853e4b0b1b9d1860eb3"}, {"code": "(fn \n    ([f] f)\n    ([f g] (fn  [& args] (f (apply g args))))\n    ([f g & fs] \n      (let [fapp (fn fapp [funs args] \n                    (apply (first funs) (if (empty? (rest funs)) args (list (fapp (rest funs) args)) )))]\n        (fn [& args] (f (g (fapp fs args)))))))", "problem": 58, "user": "533e45a7e4b085b17e897d8c"}, {"code": "(fn my-comp \n  ([f] (fn [& xs] (apply f xs)))\n  ([f & fs] (fn [& xs] (f (apply (apply my-comp fs) xs)))))", "problem": 58, "user": "53244c9de4b09d4e7a9b54db"}, {"code": "(fn [& x]\n  (let [[f & fs] (reverse x)]\n    (fn [& args]\n      (reduce #(%2 %1) (apply f args) fs))))", "problem": 58, "user": "53468f6ce4b084c2834f4a3f"}, {"code": "(fn [& f]\n  (fn [& a]\n    (reduce #(%2 %1) (apply (last f) a) (rest (reverse f)))))", "problem": 58, "user": "53460d02e4b084c2834f4a39"}, {"code": "(fn mycomp\n    [f & r]\n    (fn [& args] \n      (if (empty? r)\n        (apply f args)\n        (f (apply (apply mycomp r) args)))))", "problem": 58, "user": "53224d45e4b09d4e7a9b54c0"}, {"code": "(fn comp2 [& fns]\n  (fn [& args] (reduce #(%2 %) (apply (last fns) args) (rest (reverse fns)))))", "problem": 58, "user": "53307da1e4b019098a6f8b5e"}, {"code": "(fn [& fs]\n    (reduce \n      (fn [f1 f2]\n              (fn [& args] (f2 (apply f1 args))))\n            (reverse fs)))", "problem": 58, "user": "4e705861535d5021c1a89635"}, {"code": "#(reduce (fn [f g] (fn [& xs] (f (apply g xs)))) identity %&)", "problem": 58, "user": "53134005e4b08068f379ed07"}, {"code": "(fn mycomp [& fs]\n    (let [fs (reverse fs)]\n      (fn [& args]\n        (loop [ret (apply (first fs) args)\n               fs (rest fs)]\n          (if fs\n            (recur ((first fs) ret) (next fs))\n            ret\n            )\n          )\n        ))\n    )", "problem": 58, "user": "532cb6bbe4b019098a6f8b33"}, {"code": "(fn compose\n  ([f] (fn [& args] (apply f args)))\n  ([f & fx] (fn [& args] (f (apply (apply compose fx) args)))))", "problem": 58, "user": "4e82c062535db62dc21a62cc"}, {"code": "(fn func-comp\n  [& funcs]\n  (fn [& args]\n    (loop [funcs (reverse funcs)\n           result args]\n      (if (empty? funcs)\n        (first result)\n        (recur (rest funcs) [(apply (first funcs) result)])))))", "problem": 58, "user": "5339af7de4b0e30313ee6cab"}, {"code": "(fn [& fns]\n    (fn [& args] ; should use destruct here\n      (reduce #(%2 %)\n              (apply (last fns) args)\n              (reverse (butlast fns)))))", "problem": 58, "user": "4fceda40e4b03432b189f407"}, {"code": "(fn [& fs]\n  (fn [& args]\n    (loop [fx (apply (last fs) args) fs (butlast fs)]\n      (if fs\n        (recur ((last fs) fx) (butlast fs))\n        fx))))", "problem": 58, "user": "5349ac2be4b084c2834f4a67"}, {"code": "(fn [& funcs]\n  (fn [& args]\n    (reduce #(%2 %1) (apply (last funcs) args) (rest (reverse funcs)))))", "problem": 58, "user": "534941d1e4b084c2834f4a60"}, {"code": "(fn [& l] (reduce #(fn [& m] (% (apply %2 m))) l))", "problem": 58, "user": "534bde26e4b084c2834f4a81"}, {"code": "(fn [& funcs]\n  (fn [& xs] (first (reduce #(list (apply %2 %1)) xs (reverse funcs)))))", "problem": 58, "user": "50fc299ee4b0d10d794c19f2"}, {"code": "(fn [& fns]\n  (fn [& args]\n    (first (reduce (fn [res f] [(apply f res)]) args (reverse fns)))))", "problem": 58, "user": "5348236ee4b084c2834f4a54"}, {"code": "(fn [& funs]\n    (fn [& args]\n      (loop [a args\n             l (reverse funs)]\n        (print a)\n         (if (empty? l)\n          (first a)\n          (recur (list (apply (first l) a)) (rest l))))))", "problem": 58, "user": "53487737e4b084c2834f4a59"}, {"code": "(fn [& fs]\n  (fn [& args]\n    (loop [fns (butlast fs) arg (apply (last fs) args)]  ; get the first eval done here \n      (if (first fns)\n        (recur (butlast fns) ((last fns) arg))       \n        arg))))", "problem": 58, "user": "53219cece4b09d4e7a9b54b7"}, {"code": "(fn fun [& fns]\n    (fn [& args]\n      (let [[f & fns] (reverse fns)]\n        (reduce #(%2 %1) (apply f args) fns))))", "problem": 58, "user": "5349da55e4b084c2834f4a68"}, {"code": "(fn [f & fs]\n   (loop [result f\n          remain fs]\n     (if (empty? remain)\n       result\n       (recur (fn [& args] (apply result (list (apply (first remain) args)))) (rest remain))\n     )\n   )\n )", "problem": 58, "user": "534815bde4b084c2834f4a53"}, {"code": "(fn [& fns]\n        ((fn [fns newfn]\n           (cond (empty? fns) newfn\n                 (nil? newfn) (recur (rest fns) (fn [& args] (apply (first fns) args)))\n                 :else (recur (rest fns) (fn [& args] ((first fns) (apply newfn args))))))\n         (reverse fns) nil))", "problem": 58, "user": "534e9ed4e4b084c2834f4ab8"}, {"code": "(fn cmp [& fs]\n  (fn [& x] (first (reduce (fn [acc f] [(apply f acc)]) x (reverse fs)))))", "problem": 58, "user": "51aa56c4e4b04e3dc0c27b27"}, {"code": "(fn [& fun] \n    (fn [l & r]\n      (loop [fun (reverse fun) result l r r]\n        (if (empty? fun)\n          result\n          (recur (rest fun)\n                 (if (nil? r)\n                   ((first fun) result)\n                 (apply (first fun) (conj r result)))\n\t                nil)))))", "problem": 58, "user": "53527ce8e4b084c2834f4af1"}, {"code": "(fn comb [& funcs]\n  (fn [& args]\n    (first\n     (reduce #(vector (apply %2 %1)) args (reverse funcs)))))", "problem": 58, "user": "531d34cfe4b08068f379edac"}, {"code": "(fn [& fs] (reduce (fn [f g] #(f (apply g %&))) fs))", "problem": 58, "user": "526a7025e4b03e8d9a4a722a"}, {"code": "(fn [& functions]\n  (fn [& xs]\n    (let [[f & fs] (reverse functions)]\n      (reduce (fn [x0 g] (g x0))\n              ;;(if (nil? xs)\n               ;;  (f x)\n                 (apply f xs)\n              fs))))", "problem": 58, "user": "52e6351ae4b09f7907dd146e"}, {"code": "(fn cmp [f & gs]\n  (if gs\n    #(f (apply (apply cmp gs) (conj %& %)))\n    f))", "problem": 58, "user": "5353afa0e4b084c2834f4b03"}, {"code": "(fn fc\n\t([f] f)\n\t  ([f g]\n\t     (fn\n\t       ([] (f (g)))\n\t       ([x] (f (g x)))\n\t       ([x y] (f (g x y)))\n\t       ([x y z] (f (g x y z)))\n\t       ([x y z & args] (f (apply g x y z args)))))\n\t  ([f g h]\n\t     (fn\n\t       ([] (f (g (h))))\n\t       ([x] (f (g (h x))))\n\t       ([x y] (f (g (h x y))))\n\t       ([x y z] (f (g (h x y z))))\n\t       ([x y z & args] (f (g (apply h x y z args))))))\n\t  ([f1 f2 f3 & fs]\n\t    (let [fs (reverse (list* f1 f2 f3 fs))]\n\t      (fn [& args]\n\t        (loop [ret (apply (first fs) args) fs (next fs)]\n\t          (if fs\n\t            (recur ((first fs) ret) (next fs))\n\t            ret))))))", "problem": 58, "user": "52e17e66e4b09f7907dd1423"}, {"code": "(fn [& fs]\n  (let [[f & gs] (reverse fs)]\n    (fn [& args]\n      (reduce #(%2 %1) (apply f args) gs))))", "problem": 58, "user": "5312cdaae4b08068f379ed03"}, {"code": "(fn [& fs]\n  (let [fs (reverse fs)]\n    (fn [& args]\n      (loop [res (apply (first fs) args)\n             fs (rest fs)]\n        (if-not (empty? fs)\n          (recur ((first fs) res) (rest fs))\n          res)))))", "problem": 58, "user": "4f3d83b5e4b0e243712b1f69"}, {"code": "(fn [& q]\n  (fn [& a]\n    (loop [f (butlast q) r (apply (last q) a)]\n      (if (> (count f) 0)\n        (recur (butlast f) ((last f) r))\n        r))))", "problem": 58, "user": "51ab70c3e4b04e3dc0c27b33"}, {"code": "(fn [& s] (let [[f & r] (reverse s)] (fn [& a] (reduce #(%2 %1) (apply f a) r))))", "problem": 58, "user": "535d2533e4b04ce2eb3ed2bc"}, {"code": "(fn whee [& functions]\n  (let [functions (reverse functions)]\n    (fn [& args]\n      (loop [funcs (rest functions), res (apply (first functions) args)]\n        (if (empty? funcs) res\n          (recur (rest funcs) ((first funcs) res)))))))", "problem": 58, "user": "53597288e4b04ce2eb3ed29c"}, {"code": "(fn [& more] (reduce (fn xxx [x y] (fn [& z] (x (apply y z)))) more))", "problem": 58, "user": "535920b2e4b04ce2eb3ed294"}, {"code": "(fn [& f]\n  (fn [& a]\n    (first ((fn r [f]\n              (if (empty? f)\n                a\n                [(apply (first f) (r (rest f)))]))\n            f))))", "problem": 58, "user": "535d910ae4b04ce2eb3ed2c5"}, {"code": "(fn [& fs] (fn [& args] (first (reduce #(list (apply %2 %1)) args (reverse fs)))))", "problem": 58, "user": "523cdde6e4b07645915a4787"}, {"code": "(fn x [& coll]\n  (let [coll (reverse coll)]\n    (fn [& x]\n      (reduce #(%2 %1) (apply (first coll) x) (rest coll)))))", "problem": 58, "user": "53513d28e4b084c2834f4ae3"}, {"code": "(fn [& s]\n  (reduce #(fn [& x]\n             (%2 (apply %1 x))) (reverse s)))", "problem": 58, "user": "53523ae0e4b084c2834f4aee"}, {"code": "(fn my-comp [& funs]\n  (if (= (count funs) 1)\n    (fn [& args] (apply (first funs) args))\n    (fn [& args] ((first funs) (apply (apply my-comp (rest funs)) args)))))", "problem": 58, "user": "5356e04fe4b04ce2eb3ed271"}, {"code": "(fn compose \n  ([g] (fn [& rest] (apply g rest))) \n  ([f1 & fs] (fn [& rest] ((apply compose (cons f1 (butlast fs))) (apply (last fs) rest))))\n)", "problem": 58, "user": "52f9c68ce4b047fd55836fef"}, {"code": "(fn [& f]\n  (fn [& x]\n    (loop [f f x x]\n      (if (empty? f)\n        (first x)\n        (recur (drop-last f) (list (apply (last f) x)))))))", "problem": 58, "user": "53664e3be4b0243289761e74"}, {"code": "(fn [& fs]\n    (let [fs (reverse fs)]\n      (fn [& args]\n        (loop [ret (apply (first fs) args) fs (next fs)]\n          (if fs\n            (recur ((first fs) ret) (next fs))\n            ret)))))", "problem": 58, "user": "52a32876e4b04e0c58e87bfb"}, {"code": "(fn\n  [& fns]\n  (let [fs (reverse fns)]\n    (fn\n      [& vs]\n      (loop [res (apply (first fs) vs)\n             f (next fs)]\n        (if f\n          (recur ((first f) res) (next f))\n          res\n        )\n      )\n    )\n  )\n)", "problem": 58, "user": "52012f19e4b0d7096e99ddb5"}, {"code": "(fn t1 [& funcs]\n  (fn [& args]\n    (loop [f (reverse funcs) data args]\n      (if (seq f)\n            (recur (rest f) (list (apply (first f) data)))\n        (first data)))))", "problem": 58, "user": "5046f909e4b03b02161376b5"}, {"code": "(fn [& funcs]\n  (fn [& args]\n    (reduce (fn [r f] (f r))\n            (apply (last funcs) args)\n            (reverse (butlast funcs)))))", "problem": 58, "user": "5225271fe4b01819a2de42f9"}, {"code": "(fn [& fs]\n  (fn [& xs]\n    (let [funs (reverse fs)\n          first-eval (apply (first funs) xs)]\n      (reduce (fn [acc f] (f acc))\n              first-eval\n              (next funs)))))", "problem": 58, "user": "5160195ae4b0e2be8aa20be3"}, {"code": "(fn  ([] identity)\n  ([f] f)\n  ([f g]\n     (fn\n       ([] (f (g)))\n       ([x] (f (g x)))\n       ([x y] (f (g x y)))\n       ([x y z] (f (g x y z)))\n       ([x y z & args] (f (apply g x y z args)))))\n  ([f g h]\n     (fn\n       ([] (f (g (h))))\n       ([x] (f (g (h x))))\n       ([x y] (f (g (h x y))))\n       ([x y z] (f (g (h x y z))))\n       ([x y z & args] (f (g (apply h x y z args))))))\n  ([f1 f2 f3 & fs]\n    (let [fs (reverse (list* f1 f2 f3 fs))]\n      (fn [& args]\n        (loop [ret (apply (first fs) args) fs (next fs)]\n          (if fs\n            (recur ((first fs) ret) (next fs))\n            ret))))))", "problem": 58, "user": "52f3af46e4b05e3f0be25f14"}, {"code": "(fn my-comp [& fs]\n  (fn [& args]\n    (loop [result (apply (last fs) args)\n           rfs (rest (reverse fs))]\n      (if (empty? rfs)\n        result\n        (recur ((first rfs) result) (rest rfs))))))", "problem": 58, "user": "5369d072e4b0243289761ea1"}, {"code": "(fn mycomp [f & fs]\n    (fn [& params]\n      (if (empty? fs)\n        (apply f params)\n        (f (apply (apply mycomp fs) params)))))", "problem": 58, "user": "51c3c6a6e4b0851ac09658f8"}, {"code": "(fn rargs [& args]\n  (fn [& coll]\n    (first (reduce (fn [ret f] (list (apply f ret))) coll (reverse args)))))", "problem": 58, "user": "5368a275e4b0243289761e8f"}, {"code": "(fn [& f] (fn [& a] (reduce #(%2 %1) (apply (last f) a) (rest (reverse f)))))", "problem": 58, "user": "536973e5e4b0243289761e9e"}, {"code": "(fn [& funs]\n  (fn [& args]\n    (let [f1 (last funs)\n          fx (reverse (butlast funs))\n          init (apply f1 args)]\n      (reduce (fn [ret f] (f ret)) init fx))))", "problem": 58, "user": "536d83cee4b0fc7073fd6e5e"}, {"code": "(fn my-comp\n  [& fs]\n  (fn [& x] (first (reduce #(list (apply %2 %1)) x (reverse fs)))))", "problem": 58, "user": "536aa86de4b0243289761eb1"}, {"code": "(fn [& fs] \n      (fn [& arg] \n          (loop [fs (reverse fs), v arg] \n                (if (empty? fs) \n                    (first v) \n                  (recur (rest fs) (list (apply (first fs) v)))))))", "problem": 58, "user": "52bdf6bde4b07a9af579230d"}, {"code": "(fn [& fns]\n  (let [fs (reverse fns)]\n    (fn [& args]\n      (loop [ret (apply (first fs) args)\n             fs (next fs)]\n        (if fs\n          (recur ((first fs) ret) (next fs))\n          ret)))))", "problem": 58, "user": "4ea5ba92535d7eef308072d9"}, {"code": "(fn [& fs]\n  (fn [& args]\n    (first\n    (reduce #(vector (apply %2 %1)) args (reverse fs)))))", "problem": 58, "user": "53572767e4b04ce2eb3ed277"}, {"code": "(fn [& fs]\n  (fn [& fn-args]\n    (loop [fs (reverse fs)\n           fn-args fn-args]\n      (if (empty? fs)\n        (first fn-args)\n        (recur (rest fs) [(apply (first fs) fn-args)])))))", "problem": 58, "user": "53527551e4b084c2834f4af0"}, {"code": "(fn compton\n  [& rargs]\n  (let [args (reverse rargs)] \n    (fn [& fargs]\n      (reduce #(%2 %1) (apply (first args) fargs) (rest args)))))", "problem": 58, "user": "5338387de4b0e30313ee6c91"}, {"code": "(fn [& fns] \n  (let [rfns (reverse fns)] \n    (fn [& x] \n      \t(if \n          (> (count x) 1) \n          (reduce #(%2 %1) (reduce (first rfns) x) (rest rfns))\n      \t  (reduce #(%2 %1) (first x) rfns)\n         )\n      )\n    )\n  )", "problem": 58, "user": "535197f2e4b084c2834f4ae4"}, {"code": "(fn comp* [f & fs]\n    (if (seq fs)\n      (fn [& args] (f (apply (apply comp* fs) args)))\n      f))", "problem": 58, "user": "5370ef22e4b0fc7073fd6ea0"}, {"code": "(fn [& fns]\n   (let [ps (reverse fns)]\n     (fn [& xs]\n       (reduce #(%2 %1)\n               (apply (first ps) xs)\n               (rest ps)))))", "problem": 58, "user": "51d4ed02e4b013d740b70dec"}, {"code": "(fn [& fs]\n  (fn [& xs]\n    (first (reduce #(vector (apply %2 %1)) xs (reverse fs)))))", "problem": 58, "user": "536d52b8e4b0fc7073fd6e58"}, {"code": "(fn mcomp\n  [& fns]\n  (fn [& args]\n    (first (reduce (fn [r e]\n                     (list (apply e r)))\n                args (reverse fns)))))", "problem": 58, "user": "5348cab4e4b084c2834f4a5e"}, {"code": "(fn mycmp [f & fs] \n  (letfn [(cp [f g] (fn xxx [& xs] (f (apply g xs))))]\n    (reduce cp f fs)))", "problem": 58, "user": "53720c5ce4b0493c815db704"}, {"code": "(fn [& fs]\n    (let [rfs (reverse fs)]\n    (fn [& args]\n      (loop [ret (apply (first rfs) args)\n             rfs (next rfs)]\n        (if rfs\n          (recur ((first rfs) ret) (next rfs))\n          ret))))\n)", "problem": 58, "user": "5374adc3e4b06d7f452d9e27"}, {"code": "(fn mycomp\n  [& funcs]\n  (fn\n    [& args]\n    (loop [res (apply (last funcs) args)\n           rem-funcs (butlast funcs)]\n           (if (empty? rem-funcs) res\n            (recur ((last rem-funcs) res) (butlast rem-funcs))))))", "problem": 58, "user": "53733312e4b06d7f452d9e0a"}, {"code": "#(reduce (fn [f g] (fn [& x] (f (apply g x)))) %&)", "problem": 58, "user": "536e0930e4b0fc7073fd6e66"}, {"code": "(fn [& funcs]\n  (fn [& args]\n  \t(loop [ n (dec (count funcs))\n            result (apply (last funcs) args) ]\n      (if (= 0 n) result     \n              (recur (dec n) ((nth funcs (dec n)) result))))))", "problem": 58, "user": "53691dc7e4b0243289761e97"}, {"code": "(fn [x & xs]\n  (fn [& args]\n    ((fn step [[f & fs] a]\n       (if fs\n         (f (step fs a))\n         (apply f a)))\n     (cons x xs) args)))", "problem": 58, "user": "53436e60e4b084c2834f4a19"}, {"code": "(fn my-comp [f & fs]\n  (fn [& xs]\n    (if (empty? fs) \n      (apply f xs)\n      (f (apply (apply my-comp fs) xs)))))", "problem": 58, "user": "536ca4bde4b0fc7073fd6e49"}, {"code": "(fn [& fs] (fn [& vals] (reduce #(%2 %1) (apply (last fs) vals) (reverse (butlast fs)))))", "problem": 58, "user": "53705e2de4b0fc7073fd6e96"}, {"code": "(fn ccc\n  ([] identity)\n  ([f] f)\n  ([f g] (fn [& args] (f (apply g args))))\n  ([f g h] (fn [& args] (f (g (apply h args)))))\n  ([f g h & args] (f (g (apply ccc h args)))))", "problem": 58, "user": "506c0a02e4b0eda3100c090d"}, {"code": "(letfn \n  [(comp-2 [f g]\n           (fn [& more] \n             (f (apply g more))))\n   \n   (comp-n [ops] \n           (reduce comp-2 ops))]\n  \n  #(comp-n %&))", "problem": 58, "user": "5371167fe4b0fc7073fd6ea7"}, {"code": "(fn [& functions]\n  (reduce #(fn [& more]\n               (%1 (apply %2 more)))\n            identity\n            functions))", "problem": 58, "user": "53121863e4b08068f379ecf3"}, {"code": "; from On Lisp\r\n(fn [& fns]\r\n  (if fns\r\n    (let [fn1 (last fns)\r\n          fns (reverse (butlast fns))]\r\n      (fn [& args]\r\n        (reduce #(%2 %1) (apply fn1 args) fns)))\r\n    identity))", "problem": 58, "user": "5376966ae4b06839e8705e27"}, {"code": "(fn [& funs]\n  (loop [funs1 funs\n         acc identity] ; function acculators\n    ;;\n    (if (empty? (rest funs1))\n      ;; stop at the very last function (first to be applied)\n      ;; this one may take multiple args, use apply, and warp with acc\n      (fn [& x] (acc (apply (first funs1) x)))\n      ;; Insert each function inside the previous one\n      (recur (rest funs1) (fn [x] (acc ((first funs1) x)))))))", "problem": 58, "user": "53415755e4b00652c8746ecd"}, {"code": "(fn [& funcs]\n  (let [funcs (reverse funcs)\n        fun (first funcs)\n        funs (rest funcs)]\n    (fn [& args]\n      (reduce (fn [x f] (f x)) (apply fun args) funs))))", "problem": 58, "user": "536a37efe4b0243289761eaa"}, {"code": "(fn [& fns]\n  (let [fns (reverse fns)]\n    (fn [& args]\n      (loop [fns fns rv args]\n        (if (empty? fns)\n          (first rv)\n          (recur (rest fns) (vector (apply (first fns) rv))))))))", "problem": 58, "user": "534f13b2e4b084c2834f4ac4"}, {"code": "(fn [& fns]\n  (fn [& args]\n    (let [compose (fn [a f] (list (apply f a)))]\n      (first\n        (reduce compose args (reverse fns))))))", "problem": 58, "user": "5379306fe4b06839e8705e50"}, {"code": "(fn [& f]\n  (fn [& args]\n    (first (reduce (fn [x y] [(apply y x)]) args (reverse f)))\n    ))", "problem": 58, "user": "536f5900e4b0fc7073fd6e7b"}, {"code": "(fn [& fs]\n  (let [[f1 & fs] (reverse fs)]\n    (fn [& args]\n      (reduce #(%2 %)\n              (apply f1 args)\n              fs))))", "problem": 58, "user": "524b0645e4b09eba1c0223bf"}, {"code": "(fn my-comp [func & more-funcs]\n  (if (empty? more-funcs)\n    func\n    (fn [& xs]\n      (func (apply (apply my-comp more-funcs) xs)))))", "problem": 58, "user": "53800d99e4b06839e8705ebd"}, {"code": "(fn [f g & more]\n  (if (empty? more)\n    (fn [& args] (f (apply g args)))\n    (recur (fn [& args] (f (apply g args))) (first more) (rest more))))", "problem": 58, "user": "5361a4f2e4b0243289761e47"}, {"code": "(fn [& fs]\n  (fn [& arg] (first (reduce #(vector (apply %2 %1))\n                             arg\n                             (reverse fs)))))", "problem": 58, "user": "5370f8ede4b0fc7073fd6ea2"}, {"code": "(fn [& fs]\n  (fn [& d]\n    (first (reduce\n            (fn [d f] (list (apply f d)))\n            d\n            (reverse fs)))))", "problem": 58, "user": "537e745ae4b06839e8705ea6"}, {"code": "(fn _comp [& funcs]\n  (fn [& args]\n    (first \n      (reduce #(vector (apply %2 %1)) args (reverse funcs)))))", "problem": 58, "user": "53834ed3e4b06839e8705edb"}, {"code": "(fn [& funcs]\n  (let [r-funcs (reverse funcs)\n        f (first r-funcs)\n        fs (rest r-funcs)]\n    (fn [& args]\n      (reduce (fn [r f] (f r))\n              (apply f args)\n              fs))))", "problem": 58, "user": "537f4652e4b06839e8705eb1"}, {"code": "(fn [ & fns]\n  (fn [ & x]\n    (reduce (fn [e, f] (f e)) (apply (first (reverse fns)) x) (rest (reverse fns)))))", "problem": 58, "user": "53820087e4b06839e8705ecf"}, {"code": "(fn [& xs] (reduce (fn [fy fz] (fn [& ys] (fy (apply fz ys)))) xs))", "problem": 58, "user": "535aee3be4b04ce2eb3ed2aa"}, {"code": "(fn compi [& funcs]\n  (fn [& args]\n    (first (reduce (fn [v f] (vector (apply f v))) args (reverse funcs)))))", "problem": 58, "user": "53778b90e4b06839e8705e36"}, {"code": "(fn [& fns]\n   (fn [& args]\n     (let [[f & rfns] (reverse fns)]\n       (reduce (fn [acc i] (i acc)) (apply f args) rfns))))", "problem": 58, "user": "535eaa73e4b04ce2eb3ed2d4"}, {"code": "(fn comb [& funcs]\n  (fn [& args]\n    (first\n      (reduce #(vector (apply %2 %1)) args (reverse funcs )))))", "problem": 58, "user": "538754b1e4b06839e8705f1c"}, {"code": "(fn [& fs]\r\n    (let [rfs (reverse fs)]\r\n      (fn [& args]\r\n        (reduce (fn [result f]\r\n                  (f result)) (apply (first rfs) args) (rest rfs)))))", "problem": 58, "user": "51a54fb4e4b0def3c5c586a3"}, {"code": "(fn [& fs]\t\n  (reduce \n    (fn [composed nextf] \n      #(composed (apply nextf %&)))\n    identity\n    fs))", "problem": 58, "user": "51b24defe4b02f8f128bb963"}, {"code": "(fn [& fs] \n    (let [[f & r] (reverse fs)] \n      (fn [& data] (reduce #(%2 %) (apply f data) r))))", "problem": 58, "user": "53736f65e4b06d7f452d9e0f"}, {"code": "(fn [& funs] (fn [& args] (reduce (fn [a x] (do (println x a) (x a))) (apply (first (reverse funs)) args) (rest (reverse funs)))))", "problem": 58, "user": "5356d00ee4b04ce2eb3ed26f"}, {"code": "(fn [& funs]\n  (if (empty? funs)\n    identity\n    (let [funs (reverse funs)]\n      (fn [& args]\n        (reduce (fn [x f] (f x)) (apply (first funs) args) (rest funs))))))", "problem": 58, "user": "53889587e4b0640c7a9a589e"}, {"code": "(fn c [& fs]\n        (if (= 1 (count fs))\n          (first fs)\n          (let [f (first fs)\n                g (apply c (rest fs))]\n            (fn [& x] (f (apply g x))))))", "problem": 58, "user": "5055e7f4e4b0ce54f56f0401"}, {"code": "(fn [& fns]\n  (fn [& args]\n    (loop [result (apply (last fns) args) fns (drop-last fns)]\n      (if (seq fns)\n        (recur ((last fns) result) (drop-last fns))\n        result\n        )\n      )))", "problem": 58, "user": "53767991e4b06839e8705e25"}, {"code": "(fn [& funs]\n  (letfn [(mkf [fs as]\n    (if (= 1 (count fs))\n      (apply (first fs) as)\n      ((first fs) (mkf (rest fs) as))))]\n    (fn [& args] (mkf funs args))))", "problem": 58, "user": "4ec53f8c535d6d7199dd368b"}, {"code": "(fn [& funs]\n  (fn [& args]\n    (loop [fs (butlast funs) x (apply (last funs) args)]\n      (if (empty? fs) x\n        (recur (butlast fs) ((last fs) x))))))", "problem": 58, "user": "51a4416ae4b0def3c5c5868c"}, {"code": "(fn [& fns]\n  (reduce\n    (fn [fl fr] (fn [& args] (fl (apply fr args))))\n    fns))", "problem": 58, "user": "53050c04e4b0d8b024fd3757"}, {"code": "(fn my-comp [& fs] (reduce (fn [f g] (fn [& args] (f (apply g args)))) fs))", "problem": 58, "user": "4f849f76e4b033992c121c36"}, {"code": "(fn [f1 f2 & fs]\n  (let [fs (reverse (list* f1 f2 fs))]\n    (fn [& args]\n      (loop [ret (apply (first fs) args)\n             fs  (next fs)]\n        (if fs\n          (recur ((first fs) ret) (next fs))\n          ret)))))", "problem": 58, "user": "538e5b3fe4b0b51d73faae84"}, {"code": "(fn fcomp [& f]\n  (fn [& args]\n    (let [[ff & rf] (reverse f)]\n      (reduce #(%2 %1) (apply ff args) rf))))", "problem": 58, "user": "532c9dc9e4b019098a6f8b30"}, {"code": "(fn [& fns]\n  (reduce \n   (fn [f g] \n     (fn [& args] \n       (f (apply g args)))) \n   fns))", "problem": 58, "user": "5189a51ae4b0288ada3dbdad"}, {"code": "(fn [& functions]\n  (let [fs (reverse functions)]\n    (fn [& ps]\n      (reduce (fn [v f] (f v)) (apply (first fs) ps) (rest fs)))))", "problem": 58, "user": "5392b849e4b0b51d73faaeb1"}, {"code": "(fn my-comp [& fns]\n  (reduce\n   (fn [f g] \n     (fn [& args] \n       (f (apply g args))))\n   fns))", "problem": 58, "user": "538c3424e4b0b51d73faae58"}, {"code": "(fn [x & xs]\n  (fn [& args]\n    ((fn step [[f & fs] a]\n       (if fs\n         (f (step fs a))\n         (apply f a)))\n     (cons x xs) args)))", "problem": 58, "user": "53777c44e4b06839e8705e32"}, {"code": "(fn mycomp\n  ([f] f)\n  ([f & fns] (fn [& args] (f (apply (apply mycomp fns) args)))))", "problem": 58, "user": "530bf87ee4b02e82168697d5"}, {"code": "(fn [x & xs] \n  (fn [& args] \n    ((fn step [[f & fs] a] \n       (if fs \n         (f (step fs a)) \n         (apply f a))) \n     (cons x xs) args)))", "problem": 58, "user": "538ca203e4b0b51d73faae5f"}, {"code": "(fn [& funcs]\n  (let [orderedFuncs (reverse funcs)]\n    (fn [& init]\n      (let [applyingComp (fn [v f] (println v) [(apply f v)])\n            result (reduce applyingComp init orderedFuncs)]\n        (if (= 1 (count result)) (result 0) result )))))", "problem": 58, "user": "538c6db7e4b0b51d73faae5a"}, {"code": "(fn fc [& init-args]\n  (fn [& init-coll]\n    (loop [coll init-coll\n           args (reverse init-args)]\n      (if (not-empty args)\n          (recur (list (apply (first args) coll)) (rest args))\n        (first coll)))))", "problem": 58, "user": "52bc6cb2e4b07a9af57922f5"}, {"code": "(fn [& gs]\n  (let [[f1 & fs] (reverse gs)]\n    (fn [& xs]\n      (reduce (fn [x f] (f x)) (apply f1 xs) fs))))", "problem": 58, "user": "4f497b61e4b0d56e7bb92bf3"}, {"code": "(fn comp2 [& x]\n  (let [f (first x)]\n    (if (= 1 (count x))\n        (fn [& _] (apply f _))\n        (fn [& _] (f (apply (apply comp2 (rest x)) _))))))", "problem": 58, "user": "53940789e4b0b51d73faaec3"}, {"code": "(fn [& s] \n  (fn [& a] \n    (first\n   \t (reduce #(list (apply %2 %1))  a (reverse s)))))", "problem": 58, "user": "51aefceee4b09397d5109797"}, {"code": "( fn mycomp [a & more]\n  (if (nil? more) a\n  (fn [& args]  (a (apply (apply mycomp more) args)))))", "problem": 58, "user": "53979a87e4b0b51d73faaef0"}, {"code": "(fn [& f] \n  (fn [& a] \n    (reduce #(%2 %) (apply (last f) a) (rest (reverse f)))))", "problem": 58, "user": "53973e7be4b0b51d73faaee6"}, {"code": "(fn [& fns]\n\t\t      (fn [& args]\n\t\t\t(loop [x (apply (last fns) args)\n\t\t\t      my-fns (rest (reverse fns))]\n\t\t\t  (if (empty? my-fns)\n\t\t\t    x\n\t\t\t    (recur\n\t\t\t     ((first my-fns) x)\n\t\t\t     (rest my-fns))))))", "problem": 58, "user": "536f871de4b0fc7073fd6e7f"}, {"code": "(fn fake-conj [& functions]\n\t\t\t\t\t\t(if (= (count functions) 1)\n\t\t\t\t\t\t\t(fn [& arguments] \n\t\t\t\t\t\t\t\t(apply (first functions) arguments))\n\t\t\t\t\t\t\t(fn [& arguments]\n\t\t\t\t\t\t\t\t((first functions) (apply (apply fake-conj (rest functions)) arguments)))))", "problem": 58, "user": "53838742e4b06839e8705ee0"}, {"code": "(fn my-comp [& fns]\n  (fn [& x]\n    (let [temp-result (apply (last fns) x)]\n      (loop [temp-fns (drop-last fns)\n             temp-result temp-result]\n        (if (empty? temp-fns) temp-result\n          (let [actual-fn (last temp-fns)\n                rest-fns (drop-last temp-fns)]\n            (recur rest-fns (actual-fn temp-result))))))))", "problem": 58, "user": "52ee46e5e4b05e3f0be25ec5"}, {"code": "(fn [ & fs ]\n    (let [ rfs (reverse fs) ]\n        (fn [ & args]\n            (reduce #(%2 %)\n                    (apply (first rfs) args)\n                    (rest rfs)))))", "problem": 58, "user": "5398305fe4b0b51d73faaef6"}, {"code": "(fn compose [& functions]\n  (fn [& x]\n    (if (last functions) ((apply compose (butlast functions)) (apply (last functions) x)) (first x))))", "problem": 58, "user": "539c9e26e4b0b51d73faaf2e"}, {"code": "(fn[& f]\n  (let [fs (reverse f)]\n    (fn [& args]\n      (loop [ret (apply (first fs) args)\n             fs (next fs)]\n        (if fs\n          (recur ( (first fs) ret)\n                 (next fs))\n          ret)))))", "problem": 58, "user": "520cb8c4e4b0b022ef140c9a"}, {"code": "(fn co [f & n]\n  (if-not n\n    f\n    (fn [& p] (f (apply (apply co n) p))) ))", "problem": 58, "user": "53908e6be4b0b51d73faae9a"}, {"code": "(fn comb [& funcs]\n  (fn [& args]\n    (first\n      (reduce #(list (apply %2 %1)) args (reverse funcs )))))", "problem": 58, "user": "53a1b5c8e4b0ca733b9744c1"}, {"code": "(fn [& fns]\n  (let [[f & fs] (reverse fns)]\n    (fn [& args]\n      (reduce (fn [res f] (f res)) (apply f args) fs))))", "problem": 58, "user": "5080a697e4b01a93d3f38e49"}, {"code": "(fn [& args] \n   (reduce \n     (fn [a b] \n        #(a (apply b %&))) \n        args))", "problem": 58, "user": "538d7e2ee4b0b51d73faae70"}, {"code": "(fn\n  [& fs]\n  (fn [& args] (loop [args args\n                      fs fs]\n                 (if fs\n                     (let [f (last fs)]\n                       (recur [(apply f args)] (butlast fs)))\n                     (first args)))))", "problem": 58, "user": "52dfc89be4b09f7907dd1405"}, {"code": "(fn compose\n  ([] identity)\n  ([f] f)\n  ([f & fs]\n   (fn [& args]\n     (f (apply (apply compose fs) args)))))", "problem": 58, "user": "539a2901e4b0b51d73faaf0f"}, {"code": "(fn \n  ([f1 f2]\n  \t#(->> %            \n    \tf2 \n        f1))\n  ([f1 f2 f3]\n  \t#(->> %&\n          (apply f3)    \t\n          f2 \n        f1)))", "problem": 58, "user": "53886d2fe4b0640c7a9a589d"}, {"code": "(fn my-comp [& fs]\n\t(reduce (fn [f1 f2] (fn [& params] (f2 (apply f1 params)))) (reverse fs)))", "problem": 58, "user": "52e657e4e4b09f7907dd1472"}, {"code": "(fn compose [f & args] \n  (fn [&  all] (if (empty? args) (apply f all) \n                 (f (apply (apply compose args) all)))))", "problem": 58, "user": "53976599e4b0b51d73faaeea"}, {"code": "(fn [& fs]\n  ((fn my-comp [xs]\n     (if (= 1 (count xs))\n       (first xs)\n       (fn [& args] ((first xs) (apply (my-comp (rest xs)) args))) ))\n   fs))", "problem": 58, "user": "5360f043e4b0243289761e3c"}, {"code": "(fn my-comp [ & fns ]\n  (if (empty? (rest fns)) (first fns)\n      (fn [ & args ] ( (apply my-comp (drop-last fns)) (apply (last fns) args)))))", "problem": 58, "user": "4ddb696b535d02782fcbe9fa"}, {"problem": 58, "code": "(fn test [& funcs]\n  (fn [& args]\n    (loop [fns (reverse funcs)\n           result args]\n      (println result)\n      (if (seq fns)\n        (recur (rest fns) \n               (list (apply (first fns) result)))\n        (first result)))))", "user": "53a55de5e4b0b62ce3005739"}, {"problem": 58, "code": "(fn [& args]\n  (fn [& x]\n    (let [new-x (apply (last args) x)\n          new-args (rest (reverse args))]\n    \t(reduce #(%2 %1) new-x new-args))))", "user": "538e864ee4b0b51d73faae87"}, {"problem": 58, "code": "(fn [& functions] (reduce #(fn [& args] (%1 (apply %2 args))) functions))", "user": "526e5159e4b03e8d9a4a7316"}, {"problem": 58, "code": "(fn [& fs]\n  (reduce #(fn [& args]\n             (% (apply %2 args)))\n          fs))", "user": "4f041de1535dcb61093f6ba5"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& args]\n    (let [fs (reverse fs)]\n      (reduce #(%2 %1) (apply (first fs) args) (next fs)))))", "user": "52e4f06be4b09f7907dd1456"}, {"problem": 58, "code": "(fn [& x]\n    (fn [& t] (let [rev (reverse x)\n           args (apply vector t)\n           prime (fn [] (apply (first rev) args))\n           funcs (cons prime (drop 1 rev))]\n                ((reduce (fn [z y] #(y (z))) funcs)))))", "user": "53a5c7ffe4b0ef122a8689c4"}, {"problem": 58, "code": "(fn my-comp [& fs]\n  (let [[f1 & ordered-fs] (reverse fs)]\n  (fn [& args] \n    (reduce #( %2 %1) (apply f1 args) ordered-fs))))", "user": "5396c94be4b0b51d73faaee3"}, {"problem": 58, "code": "(fn my-comp [& fs]\n  (loop [fs fs\n         res identity\n         ]\n    (if (empty? fs)\n      res\n      (recur (rest fs) (fn [& x] (res (apply (first fs) x)))))))", "user": "531bad96e4b08068f379ed93"}, {"problem": 58, "code": "(fn [& f] (reduce #(fn [& x] (%1 (apply %2 x))) f))", "user": "53aaaf7ae4b047364c044444"}, {"problem": 58, "code": "(fn comb [& funcs]\n  (fn [& args]\n    (first\n      (reduce #(vector (apply %2 %1)) args (reverse funcs )))))", "user": "53ae16e2e4b047364c044472"}, {"problem": 58, "code": "(fn komp \n\t([] identity)\n\t([& fs](if fs\n\t\t(let [[f & r] (reverse fs)]\n\t\t\t(fn [& args]\n\t\t\t\t(reduce #(%2 %1) (apply f args) r))))))", "user": "53b39d82e4b047364c0444a6"}, {"problem": 58, "code": "(fn comp1 [& fs]\n  (fn [& args]\n    (loop [res (apply (last fs) args)\n           fs (drop-last fs)]\n      (print res)\n      (if (empty? fs)\n        res\n        (recur ((last fs) res) (drop-last fs))\n        )\n      )\n    )\n  )", "user": "5245e320e4b09dbe66b56177"}, {"problem": 58, "code": "(fn comb [& funcs]\n  (fn [& args]\n    (first\n      (reduce #(list (apply %2 %1)) args (reverse funcs)))))", "user": "53858594e4b06839e8705f05"}, {"problem": 58, "code": "(fn [& fs] (fn [& args] (reduce #(%2 %1) (apply (last fs) args) (rest (reverse fs)))))", "user": "52d07cc5e4b07d0d72b273bb"}, {"problem": 58, "code": "(fn __ [& fs]\n  (reduce (fn [a b] (fn [& args] (a (apply b args)))) fs))", "user": "534d1173e4b084c2834f4a98"}, {"problem": 58, "code": "(fn [& fs] (reduce #(fn [& xs] (% (apply %2 xs))) fs))", "user": "52c7f036e4b0c2d177d62126"}, {"problem": 58, "code": "(fn [& funcs]\n  (let [funcs (reverse funcs)]\n    (fn [& args]\n      (reduce\n       (fn [x f] (f x))\n       (apply (first funcs) args)\n       (rest funcs)))))", "user": "5290257ae4b0239c8a67af03"}, {"problem": 58, "code": "(fn my-comp\n  [& funcs]\n  (let [fs (reverse funcs)]\n    (fn [& args]\n      (loop [ret (apply (first fs) args)\n             fs (next fs)]\n        (if fs\n          (recur ((first fs) ret) (next fs))\n          ret)))))", "user": "53ac4719e4b047364c04445c"}, {"problem": 58, "code": "(fn my-comp [& funcs]    \n    (let [funcss (reverse funcs)]\n      (fn [& args]            \n        (loop [res (apply (first funcss) args) fun (rest funcss)]\n          (if fun\n            (recur ((first fun) res) (next fun))\n            res)\n          )\n\n        )))", "user": "5364ab34e4b0243289761e64"}, {"problem": 58, "code": "(fn my-comp [& coll](fn [& a]\n\t(let [rev-coll (reverse coll) init (rest rev-coll) seed (apply (first rev-coll) a)]\n\t(loop [init init seed seed]\n\t\t(if (empty? init) seed\n\t\t\t(recur (rest init) ((first init) seed)))))))", "user": "538e29d1e4b0b51d73faae80"}, {"problem": 58, "code": "(fn cmp\n        ([] identity)\n        ([a] a)\n        ([a & b]\n         (fn [& args] (a (apply (apply cmp b) args)))))", "user": "4f867b25e4b033992c121c51"}, {"problem": 58, "code": "(fn  [& fns] (fn [& args] (let[[f & fs] (reverse fns)](reduce #(%2 %) (apply f args) fs) ) ))", "user": "53b3ea79e4b047364c0444ab"}, {"problem": 58, "code": "(fn compose [f & fs]\n  (if (empty? fs)\n    #(apply f %&)\n    #(f (apply (apply compose fs) %&))))", "user": "53acaf1fe4b047364c04445f"}, {"problem": 58, "code": "(fn [& fs]\n  (reduce (fn [f g]\n            #(f (apply g %&))) fs))", "user": "51897709e4b0288ada3dbdaa"}, {"problem": 58, "code": "(fn app\n  ([] identity)\n  ([f] f)\n  ([f g] \n     (fn \n       ([] (f (g)))\n       ([x] (f (g x)))\n       ([x y] (f (g x y)))\n       ([x y z] (f (g x y z)))\n       ([x y z & args] (f (apply g x y z args)))))\n  ([f g h] \n     (fn \n       ([] (f (g (h))))\n       ([x] (f (g (h x))))\n       ([x y] (f (g (h x y))))\n       ([x y z] (f (g (h x y z))))\n       ([x y z & args] (f (g (apply h x y z args))))))\n  ([f1 f2 f3 & fs]\n    (let [fs (reverse (list* f1 f2 f3 fs))]\n      (fn [& args]\n        (loop [ret (apply (first fs) args) fs (next fs)]\n          (if fs\n            (recur ((first fs) ret) (next fs))\n            ret))))))", "user": "53c051a5e4b0c98a41f5ccae"}, {"problem": 58, "code": "(fn [& a]\n        (let [[f & r] (reverse a)]\n        (fn [& x] (reduce #(%2 %1) (apply f x) r))))", "user": "5382704be4b06839e8705ed4"}, {"problem": 58, "code": "(fn [& fns]\n  (fn [& args]\n    (reduce\n      (fn [m el]\n        (el m))\n      (apply (last fns) args)\n      (-> fns reverse rest))))", "user": "52d6d490e4b09f7907dd1369"}, {"problem": 58, "code": "(fn my-comp [& funcs]\n  (let [fns (reverse funcs)]\n    (fn [& args]\n      (loop [result (apply (first fns) args) pending (next fns)]\n        (if (nil? pending)\n          result\n          (recur ((first pending) result) (next pending)))))))", "user": "53bf0913e4b0c98a41f5cc99"}, {"problem": 58, "code": "(fn my-comp [& funcs] (fn [& args] (first (reduce (fn [a b] (list (apply b a))) args (reverse funcs)))))", "user": "539b4268e4b0b51d73faaf1c"}, {"problem": 58, "code": "(fn [& f] \n  (fn [& p] (loop [f1 (drop-last f) p1 (apply (last f) p)]\n      (if (empty? f1) p1 \n        (recur (drop-last f1) ((last f1) p1))\n    ))))", "user": "52b434c9e4b0c58976d9ad1c"}, {"problem": 58, "code": "(fn [& x] \n  (reduce (fn [f g] \n            (fn [& a] \n              (f (apply g a)))) \n          x))", "user": "53a7771ee4b047364c04441b"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& args]\n    ((fn cmb [functs]\n       (if (empty? (rest functs))\n         (apply (first functs) args)\n         ((first functs) (cmb (rest functs))))) fs)))", "user": "537f8e7be4b06839e8705eb8"}, {"problem": 58, "code": "(fn [& args]\n  (fn [& a2]\n    (let [v (into [] args)\n          r1 (apply (last v) a2)]\n      (loop [f (pop v), r r1]\n        (if (empty? f) r\n            (recur (pop f) ((last f) r)))))))", "user": "538e36c7e4b0b51d73faae81"}, {"problem": 58, "code": "(fn [& functions]\n   (let [reverseFunctions (reverse functions)\n         zeroFunction (first reverseFunctions)\n         restFunctions (rest reverseFunctions)]\n   (fn [& parameters] \n     (reduce #(%2 %1) (apply zeroFunction parameters) restFunctions))))", "user": "53c38b8ce4b00fb29b22127b"}, {"problem": 58, "code": "(fn f [& x]\n  #(loop [x (reverse x)\n          y %&]\n     (if (= x [])\n       (first y)\n       (recur (rest x) [(apply (first x) y)]))))", "user": "53c74cfce4b00fb29b2212a7"}, {"problem": 58, "code": "(fn[& f]\n      (fn[& a] \n          (reduce #(%2 %1) (apply (last f) a)  (next (reverse f)))))", "user": "4e8849c5535d8b9bb0147ca4"}, {"problem": 58, "code": "(fn [& args]\n            (reduce (fn [a b]\n                      (fn [& s] (a (apply b s)))) args)\n            )", "user": "531902b1e4b08068f379ed77"}, {"problem": 58, "code": "(fn [& funs]\n  (fn [& args]\n    (loop [r-fun  (reverse funs)\n           c-args args]\n      (let [i (apply (first r-fun) c-args)\n            nr-fun (rest r-fun)]\n        (if (empty? nr-fun)\n          i\n          (recur nr-fun [i])))))\n  )", "user": "53c1ce3ee4b00fb29b221268"}, {"problem": 58, "code": "(fn [& f]\n  (fn [& a]\n    (reduce #(%2 %) (apply (last f) a) (rest (reverse f)))))", "user": "53b7c21ae4b047364c0444d4"}, {"problem": 58, "code": "(fn [ & s]\n  (let [[f & r] (reverse s)]\n    (fn [& data] (reduce (fn [x1 x2] (x2 x1)) (apply f data) r))))", "user": "4fe3338ee4b0e8f79898fea8"}, {"problem": 58, "code": "(fn [& fi] \n  (fn [& ai]\n    (loop [[f & ff] (reverse fi) a ai]\n      (if f (recur ff [(apply f a)])\n        (first a)))))", "user": "5310e968e4b08068f379ecdd"}, {"problem": 58, "code": "(fn wei [& xs]\n  (fn [& args]\n      (first (reduce #(list (apply %2 %)) args (reverse xs)))))", "user": "539c88e1e4b0b51d73faaf2c"}, {"problem": 58, "code": "(fn [& F]\n  (fn [& i]\n    (loop [r (apply (last F) i) F (butlast F)]\n      (if-let [l (last F)]\n        (recur (l r) (butlast F))\n        r))))", "user": "502940a9e4b061fd216be4b8"}, {"problem": 58, "code": "(fn [& fns]\n    (let [[f & fs] (reverse fns)]\n      (fn [ & args]\n        (reduce #(%2 %1) (apply f args) fs))))", "user": "538db083e4b0b51d73faae74"}, {"problem": 58, "code": "(fn [& c] (let [[f & r] (reverse c)] (fn [& a] (reduce #(%2 %) (apply f a) r))))", "user": "4e6961f0535d8ccf87e9fe9b"}, {"problem": 58, "code": "(fn F[f1 & f2]\n    (fn [& xs] (if (= nil f2) (apply f1 xs) (f1 (apply (apply F f2) xs))))\n)", "user": "53ca23e3e4b00fb29b2212c6"}, {"problem": 58, "code": "(fn [& fs] \n  (reduce (fn [f g] \n            #(f (apply g %&))) fs))", "user": "50c6052ce4b0c9dc10d15c56"}, {"problem": 58, "code": "(fn [& funcs] \n  (fn [& args] \n    (first\n      (loop [funcs-rem (reverse funcs) \n             result args]\n        (if (empty? funcs-rem)\n          result\n          (recur \n            (rest funcs-rem)\n            (vector (apply (first funcs-rem) result))))))))", "user": "5227eacee4b0186687e23a5e"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& args]\n    (first (reduce\n             (fn [s e] [(apply e s)])\n             args\n             (reverse fs)))))", "user": "53d78b64e4b0e771c3025466"}, {"problem": 58, "code": "(fn [& fns]\n  (let [fns (reverse fns)] \n    (fn [& args]\n      (loop [ret (apply (first fns) args)\n             fns (next fns)]\n        (if fns\n          (recur ((first fns) ret) (next fns))\n          ret)))))", "user": "53806e5be4b06839e8705ec1"}, {"problem": 58, "code": "(fn [& funcs] \n  (fn [& args] \n  \t(let [ofuncs (reverse funcs)\n          ffunc (first ofuncs)\n          rfuncs (rest ofuncs)\n          ]\n     \t(reduce (fn [arg f] (f arg)) (apply ffunc args) rfuncs)\n     )\n  )\n)", "user": "53d5e45ae4b0e771c302544e"}, {"problem": 58, "code": "(fn compfs [& fs]\n  (let [f (last fs), lf (butlast fs)]\n    (if (empty? lf)\n      (fn [& arg]\n        (apply f arg)\n      )\n      (fn [& arg]\n        ((apply compfs lf) (apply f arg))\n      )\n    )\n  )\n)", "user": "53ca41dae4b00fb29b2212c8"}, {"problem": 58, "code": "(fn comb [& funcs]\n  (fn [& args]\n    (first\n      (reduce #(vector (apply %2 %1)) args (reverse funcs)))))", "user": "53da19fde4b0e771c3025484"}, {"problem": 58, "code": "(fn [& l]\n  (fn [& x]\n       (reduce #(%2 %)\n               (apply (last l) x)\n               (rest (reverse l))\n               )\n       )\n  )", "user": "53aef31ce4b047364c04447b"}, {"problem": 58, "code": "(fn [& fs]\n    (fn [& x]\n      (reduce #(%2 %1) (apply (last fs) x) (rest (reverse fs)))))", "user": "53dcdde4e4b0d874e779ae24"}, {"problem": 58, "code": "(fn [& fs]\n  (let [rfs (reverse fs)]\n    (fn [& args]\n      (loop [ret (apply (first rfs) args) \n             rfs (next rfs)]\n        (if rfs\n            (recur ((first rfs) ret) (next rfs))\n            ret)))))", "user": "53bf5c54e4b0c98a41f5cca0"}, {"problem": 58, "code": "(fn fncmp [& funcs]\n  (fn [& args]\n    (if (= (count funcs) 1)\n      (apply (first funcs) args)\n      ((first funcs) (apply (apply fncmp (rest funcs)) args)))))", "user": "53ddd44be4b0d874e779ae2e"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& xs] (first (reduce #(vector (apply %2 %1)) xs (reverse fs))))\n)", "user": "53dcf474e4b0d874e779ae25"}, {"problem": 58, "code": "(fn [& fns] (fn [& args] (reduce #(%2 %1) (apply (last fns) args) (reverse (butlast fns)))))", "user": "53e19461e4b0d874e779ae59"}, {"problem": 58, "code": "(fn function-composition [& fs]\n  (fn [& args]\n    (loop [f (last fs)\n           fs (drop-last fs)\n           last-result (apply f args)]\n      (if (empty? fs)\n        last-result\n        (recur (last fs) \n               (drop-last fs) \n               ((last fs) last-result))))))", "user": "53d40508e4b00fb29b221332"}, {"problem": 58, "code": "(fn c \n  ([x y] #(x (apply y %&)))\n  ([x y & xs] (reduce c (list* x y xs))))", "user": "53dfdf01e4b0d874e779ae46"}, {"problem": 58, "code": "(fn [& v]\n  #(first\n     (reduce (fn [a b] [(apply b a)])\n             %& (reverse v))))", "user": "53500869e4b084c2834f4ad3"}, {"problem": 58, "code": "(fn r [& fs]\n  (reduce\n    (fn [a b]\n      (fn [& args] (b (apply a args)))) (reverse fs)))", "user": "53e2b212e4b036ad0777e3f4"}, {"problem": 58, "code": "(fn [& fs]\n  (let [fs (reverse fs)]\n    (fn [& args]\n      (let [[f & fs] fs\n            r (apply f args)]\n        (reduce #(%2 %) r fs)))))", "user": "5224a46ce4b01819a2de42e5"}, {"problem": 58, "code": "(fn compose [& fns]\n  (let [rfns (reverse fns)\n        inner (first rfns)\n        outer (second rfns)\n        others (rest (rest rfns))\n        composed-two (fn [& args] (outer (apply inner args)))]\n    (if (empty? others)\n      composed-two\n      (apply compose (reverse (filter identity (conj (rest others) (first others) composed-two)))))))", "user": "504f5804e4b0a02f9cffde72"}, {"problem": 58, "code": "(fn [& F] (let [f (reverse F)] (fn [& l] (loop [x (apply (first f) l) g (next f)] (if g (recur ((first g) x) (next g)) x)))))", "user": "53b2a7f8e4b047364c04449c"}, {"problem": 58, "code": "(fn [& funcs]\n  (fn [& args]\n    (first\n     (reduce (fn [a b] (vector (apply b a))) args (reverse funcs)))))", "user": "53d5a63be4b0e771c3025449"}, {"problem": 58, "code": "(fn composem [& funs]\n  (fn [& args]\n    (first (loop [my-funs (reverse funs)\n                  my-args args\n                  ]\n             (if (empty? my-funs) my-args\n               (recur (rest my-funs)\n                      (list (apply (first my-funs) my-args))\n                      ))))))", "user": "53dadf1de4b0e771c30254ad"}, {"problem": 58, "code": "(fn [& fs] (fn [& xs] (first (reduce #(list (apply %2 %1)) xs (reverse fs)))))", "user": "51aab611e4b04e3dc0c27b2d"}, {"problem": 58, "code": "(fn [& funcs]\n  (fn [& args]\n    (first\n      (reduce #(vector (apply %2 %1)) args (reverse funcs )))))", "user": "537e59ffe4b06839e8705ea3"}, {"problem": 58, "code": "(fn [& functions]\n  (fn [& arguments]\n    (let [reversed (reverse functions)]\n      (first (loop [fs reversed args arguments]\n        (if (empty? fs)\n          args\n          (recur (rest fs) [(apply (first fs) args)])))))))", "user": "4fdf9a9ae4b05e33b9224f9f"}, {"problem": 58, "code": "(fn [x & xs]\n  (fn [& args]\n    ((fn step [[f & fs] a]\n       (if fs\n         (f (step fs a))\n         (apply f a)))\n     (cons x xs) args)))", "user": "53710c09e4b0fc7073fd6ea5"}, {"problem": 58, "code": "(fn my-comp [f & fs]\n  (if (empty? fs)\n    f\n    #(f (apply (apply my-comp fs) %&))))", "user": "53eb8ceae4b036ad0777e4fb"}, {"problem": 58, "code": ";(fn com [f & fns] (if fns (fn [& args] (f (apply (apply com fns) args))) f))\n\n;(fn [& fns] (fn [& args] (reduce #(%2 %1) args (reverse fns))))\n\n(fn [& fns] (reduce (fn [fn1 fn2] (fn [& args] (fn1 (apply fn2 args)))) fns))", "user": "53ecac57e4b0d648e757f4b3"}, {"problem": 58, "code": "#(reduce\n  (fn [c f]\n    (fn [& x] (f (apply c x))))\n  (reverse %&))", "user": "53e4fa2ce4b036ad0777e454"}, {"problem": 58, "code": "(fn my-comp [& fns]\n  (fn apply-fns \n    ([x]\n     (loop [rem-fns (butlast fns)\n            curr-fn (last rem-fns)\n            curr-res ((last fns) x)]\n         (if (empty? rem-fns)\n           curr-res\n           (recur (butlast rem-fns) (last rem-fns) (curr-fn curr-res)))))\n    ([x & args]\n     (loop [rem-fns (butlast fns)\n            curr-fn (last rem-fns)\n            curr-res (apply (last fns) x args)]\n         (if (empty? rem-fns)\n           (curr-fn curr-res)\n           (recur (butlast rem-fns) (last rem-fns) (curr-fn curr-res)))))))", "user": "53791ab7e4b06839e8705e4d"}, {"problem": 58, "code": "(fn \n  ([first] first)\n  ([first second]  \n   (fn [& more](first (apply second more))))\n  ([first second third]\n   (fn [& more](first (second ( apply third more))))))", "user": "53e06f81e4b0d874e779ae4c"}, {"problem": 58, "code": "(fn rick-comp \n  ([] identity)\n  ([f] f)\n  ([f g]\n   (fn\n     ([] (f (g)))\n     ([x] (f (g x)))\n     ([x y] (f (g x y)))\n     ([x y z] (f (g x y z)))\n     ([x y z & args] (f (apply g x y z args)))))\n  ([f g h]\n   (fn \n     ([] (f (g (h))))\n     ([x] (f (g (h x))))\n     ([x y] (f (g (h x y))))\n     ([x y z] (f (g (h x y z))))\n     ([x y z & args] (f (g (apply h x y z args)))))))", "user": "53703287e4b0fc7073fd6e8f"}, {"problem": 58, "code": "(fn my-comp [& fs]\n  (let [recur-apply (fn recur-apply [[f & fns] argues]\n                      (if (empty? fns)\n                        (apply f argues)\n                        (f (recur-apply fns argues))))]\n  (fn [& args]\n    (recur-apply fs args))))", "user": "53edb464e4b0d648e757f4c7"}, {"problem": 58, "code": "(fn my-comp [f & fs]\n  (if (= (count fs) 0)\n    f\n    (fn [& args] (f (apply (apply my-comp fs) args)))))", "user": "53dc94c8e4b094d41abdfefc"}, {"problem": 58, "code": "(fn [& fns]\n  (fn [& args]\n    (first (reduce #(vector (apply %2 %)) args (reverse fns)))))", "user": "53e241a6e4b036ad0777e3f0"}, {"problem": 58, "code": "(fn [& fargs]\n  (fn [& vargs]\n     (reduce #(%2 %) (apply (last fargs) vargs) (rest (reverse fargs)))))", "user": "53e9a15be4b036ad0777e4ae"}, {"problem": 58, "code": "(fn\n  ([] identity)\n  ([f] f)\n\n\n  ([f & fs]\n    (let [fs (reverse (list* f fs))]\n      (fn [& args]\n        (loop [ret (apply (first fs) args) fs (next fs)]\n          (if fs\n            (recur ((first fs) ret) (next fs))\n            ret))))))", "user": "53f5de41e4b0db01ade6f9d7"}, {"problem": 58, "code": "(fn bar [& all-fns]\n    (fn [& args]\n      (letfn [(baz [f & fns] \n                (if (seq fns)\n                  (f (apply baz fns))\n                  (apply f args)))]\n        (apply baz all-fns))))", "user": "513e8141e4b02b2a3d8235c1"}, {"problem": 58, "code": "(fn my-comp [& fs]\n  (println \"fs\" fs)\n  (let [[head & tail] fs]\n    (if (empty? tail)\n      head\n      (fn [& args] (head (apply (apply my-comp tail) args))))))", "user": "53f7820be4b0de5c41848560"}, {"problem": 58, "code": "(fn comb [& funcs]\n  (fn [& args]\n    (first\n      (reduce #(vector (apply %2 %1)) args (reverse funcs )))))", "user": "53edb840e4b0d648e757f4c9"}, {"problem": 58, "code": "(fn[& f]\n    (reduce #(fn[& z](%2 (apply %1 z))) (reverse f)))", "user": "53ed2fafe4b0d648e757f4c1"}, {"problem": 58, "code": "(fn [& ff] (fn [& in] (first (reduce #(list (apply %2 %1)) in (reverse ff) ))))", "user": "50856bd1e4b004985b776e4c"}, {"problem": 58, "code": "(fn [& functions]\n  (let [[h & xs] (reverse functions)]\n    (fn [& args]\n      (loop [fns xs\n             result (apply h args)]\n        (if (seq fns)\n          (recur (rest fns) ((first fns) result))\n          result)))))", "user": "53c649d3e4b00fb29b221297"}, {"problem": 58, "code": "(fn compose\n  ([] identity)\n  ([f] #(apply f %&))\n  ([f & args] #(f (apply (apply compose args) %&))))", "user": "53fb5256e4b0de5c4184857f"}, {"problem": 58, "code": "(fn [& fs]\n    (fn [& args] ;function to be returned\n        (first      ;reduce returns results in vector\n            (reduce #(vector (apply %2 %1)) args (reverse fs)))))", "user": "53bd7080e4b0d9a98559a6d1"}, {"problem": 58, "code": "(fn compo [& funcs]\n    (fn [& x]\n      (let [y (apply (last funcs)  x)\n            subcoll (drop-last funcs)]\n        (if (first subcoll)\n          ((apply compo subcoll) y)\n          y) )))", "user": "53ed6976e4b0d648e757f4c4"}, {"problem": 58, "code": "(fn comb [& fs]\n  (fn [& args]\n    (first (reduce #(vector (apply %2 %1)) args (reverse fs)))\n  )\n)", "user": "53f17931e4b0742d9025b0dd"}, {"problem": 58, "code": "(fn [& funcs]\n(fn [& args] (first (reduce #(list (apply %2 %)) args (reverse funcs)))))", "user": "53e67e69e4b036ad0777e473"}, {"problem": 58, "code": "(fn comb [& funcs]\n  (fn [& args]\n    (first\n      (reduce #(vector (apply %2 %1)) args (reverse funcs )))))", "user": "53f75957e4b0de5c4184855d"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& args]\n    (loop [out (apply (last fs) args) fs (butlast fs)]\n      (if fs\n        (recur ((last fs) out) (butlast fs))\n        out))))", "user": "53e76bb2e4b036ad0777e47d"}, {"problem": 58, "code": "(fn [& fns]\n  (fn [& args]\n    (first (reduce\n            #(list (apply %2 %))\n            args (reverse fns)))))", "user": "53f6d555e4b0db01ade6f9e5"}, {"problem": 58, "code": "(fn [& z] (reduce (fn [x y] (fn [& u] (x (apply y u)))) z))", "user": "53fc8424e4b0de5c418485b3"}, {"problem": 58, "code": "(fn [& fs] (reduce #(fn [& args] (%1 (apply %2 args))) identity fs))", "user": "506ba58be4b0eda3100c090b"}, {"problem": 58, "code": "(fn function-composition\n  ([f] (fn [& xs] (apply f xs)))\n  ([f & fs] (fn [& xs] ((apply function-composition (cons f (butlast fs))) (apply (last fs) xs)))))", "user": "52616198e4b03e8d9a4a705e"}, {"problem": 58, "code": "(fn c  \n  ([& fs] (let [fs (reverse fs)] \n\t(fn [& args]\n\t  (loop [ret (apply (first fs) args) fs (next fs)]\n\t\t(if fs (recur ((first fs) ret) (next fs)) ret))))))", "user": "53fe1c3be4b0de5c418485f2"}, {"problem": 58, "code": "(fn mm [& fs]\n  (let [fs (reverse fs)]\n    (fn [& args]\n      (loop [ret (apply (first fs) args)\n             fs (next fs)]\n        (if (first fs)\n          (recur ((first fs) ret) (next fs))\n          ret)))))", "user": "535f0cbde4b04ce2eb3ed2d9"}, {"problem": 58, "code": "(fn [& f]\n  (let [f (reverse f)]\n   (loop [tail (rest f) result (first f)]\n    (if (seq tail)\n      (recur (rest tail) (fn [& args] ((first tail) (apply result args))))\n      result))))", "user": "53f35c34e4b0742d9025b0f4"}, {"problem": 58, "code": "(fn my_cmp\n    ([f] f)\n    ([f & funcs]\n       (fn [& args] (f (apply (apply my_cmp funcs) args))))\n    )", "user": "52fac708e4b047fd55836fff"}, {"problem": 58, "code": "(fn [& fs] (reduce (fn [f1 f2] (fn [& args] (f1 (apply f2 args)))) fs))", "user": "53fcdd1ae4b0de5c418485dd"}, {"problem": 58, "code": "(fn __58 [& fns]\n    (let [[rfn & rfns] (reverse fns)]\n      (fn [& args]\n        (reduce #(%2 %1) (apply rfn args) rfns))))", "user": "5151c184e4b03e678e393add"}, {"problem": 58, "code": "(fn [& fns]\n  (reduce (fn [f1 f2]\n            (fn [& args] (f1 (apply f2 args))))\n          fns))", "user": "5405fdcce4b0addc1aec6683"}, {"problem": 58, "code": "(fn [& funs]\n  (fn [& args]\n    (reduce #(%2 %1) (apply (last funs) args) (rest (reverse funs)))))", "user": "53ee7f2ee4b0d648e757f4cf"}, {"problem": 58, "code": "(fn [& funcs]\n  (fn [& args]\n    (let [[f & fs] (reverse funcs)]\n      (reduce #(%2 %1) (apply f args) fs))))", "user": "53214efbe4b09d4e7a9b54b2"}, {"problem": 58, "code": "(fn [& fs] (reduce (fn [f g] #(f (apply g %&))) fs))", "user": "53b9bb15e4b047364c0444ed"}, {"problem": 58, "code": "(fn [& fns]\n   (let [revf (reverse fns)]\n     (fn [& xs]\n       (reduce #(%2 %) (apply (first revf) xs) (rest revf)))))", "user": "53ea5307e4b036ad0777e4e2"}, {"problem": 58, "code": "(fn comb [& funcs]\n  (fn [& args]\n    (first\n      (reduce #(vector (apply %2 %1)) args (reverse funcs )))))", "user": "53be3ee7e4b0d9a98559a6df"}, {"problem": 58, "code": "(fn \n  ([f g]\n   (fn [& args] (f (apply g args))\n     )\n   )\n  ([f g h]\n   (fn [& args] (f (g (apply h args))) )\n   )\n)", "user": "537b1083e4b06839e8705e64"}, {"problem": 58, "code": "(fn \n  [& fs]\n  (let [applier (fn \n                  [f args]\n                  [(apply f args)])]\n    (fn\n      [& args]\n      (first (reduce #(applier %2 %1) args (reverse fs))))))", "user": "5401aefbe4b0df28a13c62c7"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& args] \n   (first (reduce #(vector (apply %2 %1)) args (reverse fs)))))", "user": "4ff4bed0e4b0678c553fc35f"}, {"problem": 58, "code": "(fn comp'\n  [& funs]\n  (if (nil? funs)\n    identity\n    (fn [& args]\n      ((apply comp' (butlast funs))\n        (apply (last funs) args)))))", "user": "540b2dcbe4b0addc1aec66f4"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& vs]\n    (reduce #(%2 %1) (apply (last fs) vs) (rest (reverse fs)))))", "user": "51780bfce4b0f89a8f53839c"}, {"problem": 58, "code": "(fn mycomp [f & fs]\n  (if (empty? fs)\n    f\n    (fn [& args]\n      (f (apply (apply mycomp fs) args)))))", "user": "53e8c684e4b036ad0777e48b"}, {"problem": 58, "code": "(fn [& fs]\n  (let [[f & fs'] (reverse fs)]\n    (fn [& x]\n      (let [x' (apply f x)]\n        (loop [[f' & sf' :as sf] fs' x'' x']\n          (if (empty? sf)\n            x''\n            (recur sf' (f' x'')))))))\n  )", "user": "53ef7f77e4b0742d9025b0ce"}, {"problem": 58, "code": "(fn comp2 [& fns] \n    (fn [& args] \n      (loop [ret (apply (last fns) args)\n             fns (rest (reverse fns))]\n         (if (empty? fns)\n          ret\n          (recur \n            ((first fns) ret)\n            (rest fns))))))", "user": "53da8fede4b0e771c30254a3"}, {"problem": 58, "code": "(fn [& fns]\n  (fn [& args]\n    (let [rfns (reverse fns)]\n      (loop [f (first rfns)\n             r (rest rfns)\n             res args]\n        (if (nil? f)\n          (first res)\n          (recur (first r) (rest r) [(apply f res)]))))))", "user": "540e97f9e4b0addc1aec671f"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& xs]\n    (loop [accu xs\n           my-fs (reverse fs)]\n      (if (seq my-fs)\n        (let [my-f (first my-fs)\n              rest-f (rest my-fs)]\n          (if (> (.size xs) 1)\n            (recur [(apply my-f accu)] rest-f)\n            (recur [(my-f (first accu))] rest-f)))\n        (first accu)))))", "user": "540d7dd1e4b0addc1aec6713"}, {"problem": 58, "code": "(fn compose [& funcs]\n  (fn [& args]\n    (reduce #(%2 %1)\n            (apply (last funcs) args)\n            (reverse (butlast funcs)))))", "user": "54084784e4b0addc1aec66c9"}, {"problem": 58, "code": "(fn my-comp [f & fs]\n  (if (nil? fs)\n    f\n    (fn [& args]\n      (f (apply (apply my-comp fs) args)))))", "user": "53edb628e4b0d648e757f4c8"}, {"problem": 58, "code": "(fn my-comp [& functions]\n  (fn [& arguments]\n    (first\n      (reduce\n        (fn [r f]\n          (list (apply f r)))\n        arguments\n        (reverse functions)))))", "user": "528bba38e4b0239c8a67aea9"}, {"problem": 58, "code": "(fn [& fs]\n    (fn [& coll]\n      (first (reduce \n        (fn [val f]\n          (print f val (type val ) \"\\n\") \n          (print (apply f val) \"\\n\") \n          (list (apply f val))) \n        coll \n        (reverse fs)))))", "user": "54094824e4b0addc1aec66da"}, {"problem": 58, "code": "(fn cop [& ops]\n  (fn [& args]\n    (loop [ret (apply (last ops) args) opp (drop-last 1 ops)]\n      (if (seq opp)\n        (recur ((last opp) ret) (drop-last 1 opp))\n        ret))))", "user": "53d86564e4b0e771c302546b"}, {"problem": 58, "code": "(fn comp* [& fns]\n    (fn [& args]\n      (first (reduce (fn [a f] [(apply f a)])\n                     args \n                     (reverse fns)))))", "user": "540e17c3e4b0addc1aec6719"}, {"problem": 58, "code": "(letfn [(my-comp [& funcs]\n           (fn [& args]\n             (do-my-comp funcs args)))\n        (do-my-comp [[f & fs] args]\n                    (if (seq fs)\n                      (f (do-my-comp fs args))\n                      (apply f args)))]\n  my-comp)", "user": "540470dae4b0addc1aec6658"}, {"problem": 58, "code": ";; not my solution\n(fn [& fns]\n    (fn [& args]\n      (let [[f & fns] (reverse fns)]\n        (reduce #(%2 %1) (apply f args) fns))))", "user": "52382d91e4b0fae3832e99f0"}, {"problem": 58, "code": "(fn  [& f]\n  (let [nf (reverse f)] \n    (fn [& x] (loop [funcs nf inputs x] \n                (if (empty? funcs) \n                  (first  inputs)\n                  (recur (rest funcs) (vector  (apply (first funcs)  inputs))))))))", "user": "4ec4d723535dcc7ae8597d65"}, {"problem": 58, "code": "(fn ([a b] #(a (b %))) ([a b c] (fn [& x] (a (b (apply c x))))))", "user": "53fddd71e4b0de5c418485eb"}, {"problem": 58, "code": "(fn compose [& fs]\n    (let [fs (reverse fs)]\n      (fn [& args]\n        (loop [ret (apply (first fs) args) fs (next fs)]\n          (if fs\n            (recur ((first fs) ret) (next fs))\n            ret)))))", "user": "5414b7c4e4b01498b1a719ed"}, {"problem": 58, "code": "(fn my-comp\n  [& fs]\n  (fn [& args]\n    (let [rev (reverse fs)]\n      (reduce (fn [v f]\n                (f v))\n              (apply (first rev) args)\n              (rest rev)))))", "user": "53fd66a4e4b0de5c418485e3"}, {"problem": 58, "code": "(fn [& fs] (fn [& x] (first (reduce #(list (apply %2 %)) x (reverse fs)))))", "user": "5417385fe4b01498b1a71a08"}, {"problem": 58, "code": "(fn [& fns]\n  (fn [& args]\n    (loop [functions fns\n           result args]\n      (if (empty? functions)\n        (first result)\n        (recur (butlast functions) (list (apply (last functions) result)))\n      )\n    )\n  )\n)", "user": "540f09b9e4b0addc1aec6725"}, {"problem": 58, "code": "(fn [& functs]\n  (fn [& args]\n    (loop [fl (reverse functs), cur-args args]\n      (if (zero? (count fl))\n        (first cur-args)\n\t(recur (rest fl) (list (apply (first fl) cur-args)))))))", "user": "540e0637e4b0addc1aec6717"}, {"problem": 58, "code": "(fn [& fs]\n  (reduce (fn [f g]\n            #(f (apply g %&)))\n          fs))", "user": "4df9c598535d04ed9115e77a"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& as]\n    (first\n      (reduce #(vector (apply %2 %1)) as (reverse fs)))))", "user": "541096bde4b01498b1a719b2"}, {"problem": 58, "code": "(fn [& fs] (fn [& xs] (first (reduce #(vector (apply %2 %1)) xs (reverse fs)))))", "user": "541b37d2e4b01498b1a71a64"}, {"problem": 58, "code": "(fn [& funcs] \n  (fn [& args] \n    (first (reduce #(list (apply %2 %)) \n                   args \n                   (reverse funcs))) ))", "user": "54187e84e4b01498b1a71a1b"}, {"problem": 58, "code": "(fn [& fns]\n  (reduce (fn [acc func]\n            (fn [& args]\n              (acc (apply func args))))\n          fns))", "user": "53dd37aee4b0d874e779ae28"}, {"problem": 58, "code": "(fn my-comp [& funcs]\n  (fn [& args]\n    (first (reduce #(list (apply %2 %1)) args (reverse funcs)))))", "user": "541619e8e4b01498b1a719f9"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& args]\n     (reduce (fn [ret f] (f ret)) (apply (last fs) args) (reverse (drop-last fs)))\n  ))", "user": "54149f2fe4b01498b1a719ec"}, {"problem": 58, "code": "(fn [& fns]\n  (fn [& args]\n    (let [rfns (reverse fns)]\n     (loop [fs (rest rfns)\n            x  (apply (first rfns) args)]\n      (if-let [f (first fs)]\n          (recur (rest fs) (f x))\n          x)))))", "user": "54246fcce4b01498b1a71aed"}, {"problem": 58, "code": "(fn c [& fs]\n  (if (= (count fs) 1)\n    (first fs)\n    (fn [& xs] ((apply c (butlast fs)) (apply (last fs) xs)))))", "user": "541ae7dbe4b01498b1a71a61"}, {"problem": 58, "code": "(fn my-comp [& rst]\n  (fn [& args] (first (reduce #(list (apply %2 %1)) args (reverse rst)))))", "user": "541475afe4b01498b1a719eb"}, {"problem": 58, "code": "(fn [x & xs]\n  (fn [& args]\n    ((fn step [[f & fs] a]\n       (if fs\n         (f (step fs a))\n         (apply f a)))\n     (cons x xs) args)))", "user": "524b827ce4b09eba1c0223d7"}, {"problem": 58, "code": "(fn compx\n  [& fs]\n  (if (> (count fs) 1)\n    (fn [& x] ((apply compx (butlast fs)) (apply (last fs) x)))\n    (first fs)\n      )    \n    )", "user": "53d6b266e4b0e771c3025459"}, {"problem": 58, "code": "(fn mycomp [& fs]\n    (fn [& args]\n      (let [acc (apply (last fs) args)]\n        (reduce (fn [acc f] (f acc))\n                acc\n                (reverse (drop-last fs))))))", "user": "5429986ce4b01498b1a71b3b"}, {"problem": 58, "code": "(fn t ([f] f) ([f & fs] (fn [& args] (f (apply (apply t fs) args)))))", "user": "5282f54be4b0239c8a67ada0"}, {"problem": 58, "code": "(fn [& fns]\n    (let [fs (reverse fns)]\n      (fn [& args]\n        (loop [ret (do\n                     (apply (first fs) args) )\n               fs (next fs)]\n          (if fs\n            (do\n\n              (recur ((first fs) ret) (next fs)))\n            ret)))))", "user": "542b764ae4b0dad94371f28d"}, {"problem": 58, "code": "(fn [& s] (reduce (fn [f g] #(f (apply g %&))) s))", "user": "53a01fb1e4b0ca733b9744a6"}, {"problem": 58, "code": "(fn !\n     [& x]\n     (if (nil? (next x))\n       #(apply (first x) %&)\n       #((first x) (apply (apply ! (rest x)) %&))))", "user": "542f574be4b0dad94371f2d0"}, {"problem": 58, "code": "(fn [& fns]\n  (fn [& args]\n    (loop [flist (->> fns reverse next)\n           farg  (apply (->> fns reverse first) args)]\n      (if flist\n        (recur (next flist) ((first flist) farg))\n        farg))))", "user": "542c22bde4b0dad94371f29e"}, {"problem": 58, "code": "(fn [& fns]\n  (fn [& args]\n    (let [fs (reverse fns)]\n      (loop [fns (next fs)\n             ret (apply (first fs) args)]\n        (if fns\n          (recur (next fns) ((first fns) ret))\n          ret)))))", "user": "51b8d3d5e4b050a1176cd69d"}, {"problem": 58, "code": "(fn\n  ([] identity)\n  ([f] f)\n  ([f g] \n     (fn \n       ([] (f (g)))\n       ([x] (f (g x)))\n       ([x y] (f (g x y)))\n       ([x y z] (f (g x y z)))\n       ([x y z & args] (f (apply g x y z args)))))\n  ([f g h] \n     (fn \n       ([] (f (g (h))))\n       ([x] (f (g (h x))))\n       ([x y] (f (g (h x y))))\n       ([x y z] (f (g (h x y z))))\n       ([x y z & args] (f (g (apply h x y z args))))))\n  ([f1 f2 f3 & fs]\n    (let [fs (reverse (list* f1 f2 f3 fs))]\n      (fn [& args]\n        (loop [ret (apply (first fs) args) fs (next fs)]\n          (if fs\n            (recur ((first fs) ret) (next fs))\n            ret))))))", "user": "540e8d13e4b0addc1aec671e"}, {"problem": 58, "code": "(fn [& gs] \n  (fn [& v] \n    (let  [[f & fs] (reverse gs)] \n      (reduce #(%2 %) (apply f v) fs))))", "user": "53f78944e4b0de5c41848561"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& x]\n    (loop [result (apply (last fs) x)\n           remaining-fs (butlast fs)]\n      (if remaining-fs\n        (recur ((last remaining-fs) result) (butlast remaining-fs))\n        result))\n    ))", "user": "53f6bfd9e4b0db01ade6f9e4"}, {"problem": 58, "code": "(fn [& fns]\n  (let [[f & fns] (reverse fns)]\n    (fn [& args] (reduce #(%2 %1) (apply f args) fns))))", "user": "54397533e4b032a45b86931d"}, {"problem": 58, "code": "(fn [ & fns]\n  (let [fns (reverse fns)]\n\t(fn [& args]\n      (loop [ret (apply (first fns) args) fns (next fns)]\n        (if fns\n          (recur ((first fns) ret) (next fns))\n            ret)))))", "user": "52d03f55e4b07d0d72b273b8"}, {"problem": 58, "code": "(fn\n  ([] identity)\n  ([f] f)\n  ([f g] \n     (fn \n       ([] (f (g)))\n       ([x] (f (g x)))\n       ([x y] (f (g x y)))\n       ([x y z] (f (g x y z)))\n       ([x y z & args] (f (apply g x y z args)))))\n  ([f g h] \n     (fn \n       ([] (f (g (h))))\n       ([x] (f (g (h x))))\n       ([x y] (f (g (h x y))))\n       ([x y z] (f (g (h x y z))))\n       ([x y z & args] (f (g (apply h x y z args))))))\n  ([f1 f2 f3 & fs]\n    (let [fs (reverse (list* f1 f2 f3 fs))]\n      (fn [& args]\n        (loop [ret (apply (first fs) args) fs (next fs)]\n          (if fs\n            (recur ((first fs) ret) (next fs))\n            ret))))))", "user": "543b5bc6e4b032a45b86932d"}, {"problem": 58, "code": "(fn co [& fs] #(if (= 1 (count fs))\n                 (apply (first fs) %&)\n                 ((first fs) (apply (apply co (rest fs)) %&))))", "user": "54349368e4b0b6b47310fcf1"}, {"problem": 58, "code": "(fn [& fs]\n  (letfn [(do-apply [[f & rfs] args]\n            (if (seq rfs)\n              (f (do-apply rfs args))\n              (apply f args)))]\n  \t(fn [& args] (do-apply fs args))))", "user": "5339c105e4b0e30313ee6cae"}, {"problem": 58, "code": "(fn myComp [& fnctns] (fn [& args] (reduce #(%2 %1) (apply (last fnctns) args) (rest(reverse fnctns)))))", "user": "542c1f73e4b0dad94371f29d"}, {"problem": 58, "code": "(fn [& f] (reduce #(fn [& x] (%1 (apply %2 x))) f))", "user": "53f592b7e4b0db01ade6f9d0"}, {"problem": 58, "code": "(fn __\n    ([] identity)\n    ([f]       f)\n    ([f & fs]\n       (fn [& args]\n         (f (apply (apply __ fs) args)))))", "user": "5433a07be4b0b6b47310fce0"}, {"problem": 58, "code": "(fn cmp [& fns]\n  (loop [to-comp (butlast fns)\n         comped (last fns)]\n    (if (empty? to-comp)\n      comped\n      (recur (butlast to-comp) (fn [& args] ((last to-comp) (apply comped args)))))))", "user": "541709b0e4b01498b1a71a06"}, {"problem": 58, "code": "(fn [& f]\n  (fn [& a]\n    (first\n      (reduce #(vector (apply %2 %1)) a (reverse f)))))", "user": "4e4334ef535dc968683fc4a0"}, {"problem": 58, "code": "(fn [f & more]\n  (let [fs (reverse (list* f more))]\n    (fn [& args]\n      (loop [res (apply (first fs) args) fs (next fs)]\n        (if fs\n          (recur ((first fs) res) (next fs))\n          res)))))", "user": "54055aa9e4b0addc1aec6665"}, {"problem": 58, "code": "(fn comb [& funcs]\n\t(fn [& args]\n\t\t(first\n\t\t\t(reduce #(vector (apply %2 %1)) args (reverse funcs )))))", "user": "542edb4ae4b0dad94371f2c8"}, {"problem": 58, "code": "(fn [& fns]\n  (fn [& args]\n    ((reduce #(vector (apply %2 %)) args \n            (reverse fns)) 0)))", "user": "543f854fe4b032a45b86935b"}, {"problem": 58, "code": "(fn [& funcs](reduce (fn [f g](fn [& args](f (apply g args))))funcs))", "user": "5367f0a7e4b0243289761e88"}, {"problem": 58, "code": "(fn [& fns]\n    (fn [& args]\n      (let [firstfn (last fns)\n            comps (rest (reverse fns))]\n        (reduce #(%2 %1) (apply firstfn args) comps)))\n    )", "user": "537bde5de4b06839e8705e73"}, {"problem": 58, "code": "(fn my-comp\n  ([fst] fst)\n  ([fst & other]\n    (fn [& args]\n      (fst (apply (apply my-comp other) args)))\n  )\n)", "user": "5443cb97e4b032a45b86938a"}, {"problem": 58, "code": "(fn [& fs] \n  (fn [& args] \n     (first \n      (reduce \n       #(vector (apply %2 %1)) args (reverse fs)))))", "user": "53f3a4ace4b0742d9025b0f7"}, {"problem": 58, "code": "(fn [& input-funcs]\n  (let [[first-func & funcs] (reverse input-funcs)]\n    (fn [& args]\n      (reduce (fn [acc f]\n                (f acc))\n              (apply first-func args)\n              funcs))))", "user": "5424c523e4b01498b1a71b03"}, {"problem": 58, "code": "(fn comp- [& fns]\n  (fn [& args] \n    (first (reduce #(vector (apply %2 %1)) args (reverse fns)))))", "user": "532a033be4b09d4e7a9b551f"}, {"problem": 58, "code": "(fn compose [& functions]\n               (let [inner-fn (last functions)\n                     outer-fns (butlast functions)]\n                 (if (empty? outer-fns)\n                   inner-fn\n                   (fn [& args]\n                     ((apply compose outer-fns)(apply inner-fn args))))))", "user": "53f891eee4b0de5c4184856d"}, {"problem": 58, "code": "(fn [& funcs]\n  (fn [& args]\n    (reduce #(%2 %1) (apply (last funcs) args) (reverse (butlast funcs)))))", "user": "54448e84e4b032a45b869393"}, {"problem": 58, "code": "(fn cmp\n  ([f] f)\n  ([f & fs]\n   (fn [& args]\n     (f (apply (apply cmp fs) args)))))", "user": "50d882d4e4b01f0871336e69"}, {"problem": 58, "code": "(fn [& x] (reduce (fn [f g] (fn [& a] (f (apply g a)))) x))", "user": "4fe99c8ee4b0547ebccb2467"}, {"problem": 58, "code": "(fn [& fns]\n    (let [fs (reverse fns)]\n      (fn [& args]\n        (loop [args (apply (first fs) args) fs (rest fs)]\n          (if (seq fs)\n            (recur ((first fs) args) (rest fs))\n            args)))))", "user": "5370d152e4b0fc7073fd6e9d"}, {"problem": 58, "code": "(fn [& f]\n  (fn [& x]\n    (first\n      (reduce #(list (apply %2 %1)) x (reverse f)))))", "user": "543d5c61e4b032a45b86934d"}, {"problem": 58, "code": "(fn [& fns]\n    (let [fns (reverse fns)]\n      (fn [& args]\n        (reduce (fn [a f] (f a)) (apply (first fns) args) (rest fns)))))", "user": "50666699e4b03d366d7cb2b0"}, {"problem": 58, "code": "#(fn [& x] (loop [f (rest (reverse %&)) w (apply (last %&) x)]\n                   (if (empty? f) w (recur (rest f) ((first f) w) ))\n                   )\n   )", "user": "51e1c176e4b06a68e693eafb"}, {"problem": 58, "code": "(fn [f & fs]\n  (let [fss (reverse (cons f fs))]\n    (fn \n      ([x] (reduce (fn [acc g] (g acc)) x fss))\n      ([y & ys] (reduce (fn [acc g] (g acc)) (apply (first fss) (cons y ys)) (rest fss))))))", "user": "5447e08ce4b032a45b8693c3"}, {"problem": 58, "code": "(fn mycomp [& fs] \n  (reduce (fn [acc f] (fn [& x] (f (apply acc x)))) (reverse fs)))", "user": "53ff8c31e4b0de5c41848603"}, {"problem": 58, "code": "(fn [& funs] \n  (fn [& s] \n    (first (reduce (fn [acc f] (conj [] (apply f acc))) s (reverse funs)))\n    )\n  )", "user": "544a049de4b0e39780006953"}, {"problem": 58, "code": "(fn [& functs] (fn [& args] \n  (\n    loop [x functs y args]\n    (\n      if (= 0 (count x))\n        (first y)\n      (recur (drop-last x) (vector (apply (last x) y)))\n    )\n  )\n))", "user": "53ed03f0e4b0d648e757f4bb"}, {"problem": 58, "code": "(fn [& funcs]\n  (let [fs (reverse funcs)]\n    (fn [& xs]\n      (reduce #(%2 %1) (apply (first fs) xs) (rest fs)))))", "user": "54487527e4b032a45b8693cc"}, {"problem": 58, "code": "(fn [& fns]\n  (let [[f & rfns] (reverse fns)]\n    (fn [& args]\n      (reduce (fn [r f] (f r))\n              (apply f args)\n              rfns))))", "user": "5122925ae4b068a9582e656d"}, {"problem": 58, "code": "(fn [x & xs] \n  (fn [& args] \n    ((fn step [[f & fs] a] \n       (if fs \n         (f (step fs a)) \n         (apply f a))) \n     (cons x xs) args)))", "user": "54021f13e4b0df28a13c62cc"}, {"problem": 58, "code": "(fn my-comp\n  ([] identity)\n  ([f] f)\n  ([f g] \n     (fn \n       ([] (f (g)))\n       ([x] (f (g x)))\n       ([x y] (f (g x y)))\n       ([x y z] (f (g x y z)))\n       ([x y z & args] (f (apply g x y z args)))))\n  ([f g h] \n     (fn \n       ([] (f (g (h))))\n       ([x] (f (g (h x))))\n       ([x y] (f (g (h x y))))\n       ([x y z] (f (g (h x y z))))\n       ([x y z & args] (f (g (apply h x y z args))))))\n  ([f1 f2 f3 & fs]\n    (let [fs (reverse (list* f1 f2 f3 fs))]\n      (fn [& args]\n        (loop [ret (apply (first fs) args) fs (next fs)]\n          (if fs\n            (recur ((first fs) ret) (next fs))\n            ret))))))", "user": "53b7aa6ce4b047364c0444d1"}, {"problem": 58, "code": "(fn [& fs]\n  (let [[h & r] (reverse fs)]\n    (fn [& args]\n      (reduce #(%2 %1)\n              (apply h args)\n              r))))", "user": "544b699ce4b0e39780006964"}, {"problem": 58, "code": "(fn [& fns]\n  (fn [& xs]\n    (first\n      (reduce #(vector (apply %2 %1)) xs (reverse fns )))))", "user": "54133900e4b01498b1a719de"}, {"problem": 58, "code": "(fn hof [& fs]\n  (fn [& a]\n    (reduce #(%2 %1) (apply (last fs) a) (rest (reverse fs)))))", "user": "53ce4cd4e4b00fb29b2212ef"}, {"problem": 58, "code": "(fn [& fs] \n      (fn [& args] (->> (reverse fs) (reduce #(list (apply %2 %1)) args) (first))))", "user": "5409a12fe4b0addc1aec66df"}, {"problem": 58, "code": "(fn\n  [& func-list]\n  (fn\n    [& arg-list]\n    (reduce #(%2 %1) (apply (last func-list) arg-list) (reverse (butlast func-list)))))", "user": "54570d08e4b080a794c2c888"}, {"problem": 58, "code": "(fn [& rest]\n     (reduce (fn [f g] (fn [& x] (f (apply g x)))) rest))", "user": "5446ebc2e4b032a45b8693b8"}, {"problem": 58, "code": "(fn my-comp [& fs]\n  (let [[f & r] (reverse fs)]\n    (fn [& data] (reduce (fn [acc f] (f acc)) (apply f data) r))))", "user": "51ae350fe4b09397d5109790"}, {"problem": 58, "code": "(fn [& s] (fn [& a] (reduce #(%2 %1) (apply (last s) a) (reverse (butlast s)))))", "user": "5457e5f1e4b01be26fd74613"}, {"problem": 58, "code": "(fn [& fs]\n  (loop [f (last fs)\n         r (butlast fs)]\n    (if (empty? r)\n      #(apply f %&)\n      (recur (fn [& args]\n               ((last r) (apply f args)))\n             (butlast r)))))", "user": "505aa653e4b021387fb89857"}, {"problem": 58, "code": "(fn [& fs]\n  (let [[f & fs] (reverse fs)]\n    (fn [& xs]\n      (reduce (fn [v f] (f v)) (apply f xs) fs))))", "user": "5126dbabe4b083bb8f88cf0e"}, {"problem": 58, "code": "(fn [& xs] (loop [xs xs f (fn [x] x)] (if (seq xs) (recur (rest xs) (fn [& x] (f (apply (first xs) x)))) f)))", "user": "541bd782e4b01498b1a71a6b"}, {"problem": 58, "code": "(fn ccc [f & fs]\n              (fn [& args]\n                (if (empty? fs)\n                  (apply f args)\n                ( f  (apply (apply ccc fs   )  args))\n                  )))", "user": "542a7c9be4b01498b1a71b41"}, {"problem": 58, "code": "(fn [& fs]\n  (let [fx (reverse fs)]\n    (fn [& args]\n      (first\n        (reduce #(list (apply %2 %1)) args  fx)))))", "user": "5458c74de4b01be26fd74623"}, {"problem": 58, "code": "(fn\n    ([f g] (fn [x] (f (g x))))\n    ([f g h] (fn [& xs] (f (g (apply h xs))))))", "user": "5327c591e4b09d4e7a9b54ff"}, {"problem": 58, "code": "(fn [& x] \n  (reduce (\n       fn [f g] \n             (fn [& a] (f (apply g a)))\n       ) \n        x\n  )\n)\n\n;; Like comp > will not consume stack\n;; (fn ([f1 f2 & fs]\n;;     (let [fs (reverse (list* f1 f2 fs))]\n;;       (fn [& args]\n;;         (loop [ret (apply (first fs) args) fs (next fs)]\n;;           (if fs\n;;             (recur ((first fs) ret) (next fs))\n;;             ret))))))", "user": "5412646de4b01498b1a719d4"}, {"problem": 58, "code": "(fn [& funcs]\n  (loop [fs (rest funcs)\n         f (first funcs)]\n    (if (empty? fs)\n      f\n      (recur (rest fs) (fn [& x] (f (apply (first fs) x)))))))", "user": "54651982e4b01be26fd746d4"}, {"problem": 58, "code": "(fn [& fns] (\n            fn [& xs] (\n                     reduce (fn [r f] (f r)) (apply (last fns) xs) (rest (reverse fns))\n                         )\n              ))", "user": "546280d8e4b01be26fd746b0"}, {"problem": 58, "code": "(fn comb [& funcs]\n  (fn [& args]\n    (first\n      (reduce #(vector (apply %2 %1)) args (reverse funcs)))))", "user": "5458474ce4b01be26fd7461b"}, {"problem": 58, "code": "(fn r [& funcs]\n  (fn [& args] \n    (loop [f (reverse funcs) result args]\n      (if (empty? f)\n        (first result)\n        (recur (rest f) (list (apply (first f) result))))\n      )))", "user": "546c1b2ce4b00cfc9eacc174"}, {"problem": 58, "code": "(fn [& funcs] (reduce (fn [f1 f2] #(f1 (apply f2 %&))) funcs))", "user": "544cf5d7e4b0e39780006977"}, {"problem": 58, "code": "(fn ([& fs]\n  (let [fs (reverse (list* fs))]\n    (fn [& args]\n      (loop [ret (apply (first fs) args) fs (next fs)]\n        (if fs\n          (recur ((first fs) ret) (next fs))\n          ret))))))", "user": "5464a536e4b01be26fd746cf"}, {"problem": 58, "code": "(fn c\n  ([f g] \n     (fn\n       ([& args] (f (apply g args)))))\n  ([f g & fs]\n     (reduce c (list* f g fs))))", "user": "4ebbc1f6535dfed6da9c6d72"}, {"problem": 58, "code": "(fn\n  ([] identity)\n  ([f] f)\n  ([f g] \n     (fn \n       ([] (f (g)))\n       ([x] (f (g x)))\n       ([x y] (f (g x y)))\n       ([x y z] (f (g x y z)))\n       ([x y z & args] (f (apply g x y z args)))))\n  ([f g h] \n     (fn \n       ([] (f (g (h))))\n       ([x] (f (g (h x))))\n       ([x y] (f (g (h x y))))\n       ([x y z] (f (g (h x y z))))\n       ([x y z & args] (f (g (apply h x y z args))))))\n  ([f1 f2 f3 & fs]\n    (let [fs (reverse (list* f1 f2 f3 fs))]\n      (fn [& args]\n        (loop [ret (apply (first fs) args) fs (next fs)]\n          (if fs\n            (recur ((first fs) ret) (next fs))\n            ret))))))", "user": "51ca5378e4b08b1cbd0d9480"}, {"problem": 58, "code": "(fn [& m] \n      (reduce #(fn [& x] (%1 (apply %2 x))) m))", "user": "544e9022e4b0e3978000698b"}, {"problem": 58, "code": "(fn \n  ([f g] (fn [& args] (f (apply g args))))\n  ([f g h] (fn [& args] (f (g (apply h args))))))", "user": "546d41bde4b00cfc9eacc18c"}, {"problem": 58, "code": "(fn\n  ([f g] \n    (fn\n      ([](f (g)))  \n      ([x](f (g x)))  \n      ([x y](f (g x y)))  \n      ([x y z](f (g x y z)))  \n      ([x y z & args](f (apply g x y z args)))\n    )  \n  )\n  ([f g h] \n    (fn \n      ([](f (g (h))))  \n      ([x](f (g (h x))))  \n      ([x y](f (g (h x y))))  \n      ([x y z](f (g (h x y z))))  \n      ([x y z & args](f (g (apply h x y z args))))  \n    )\n  ) \n)", "user": "545537c1e4b0e397800069dd"}, {"problem": 58, "code": "(fn [& fs]\n  (reduce (fn [f g] (fn [& a] (f (apply g a)))) fs))", "user": "53968a70e4b0b51d73faaee0"}, {"problem": 58, "code": "(fn [& fs]\n  (let [fs (reverse fs)]\n    (fn [& args]\n      (loop [ret (apply (first fs) args) fs (next fs)]\n        (if fs\n          (recur ((first fs) ret) (next fs))\n          ret)))))", "user": "541f89a5e4b01498b1a71a99"}, {"problem": 58, "code": "(fn [& fs] (fn [& args] ((reduce (fn [x y] [(apply y x)]) args (reverse fs)) 0)))", "user": "5454b84ce4b0e397800069d9"}, {"problem": 58, "code": "(fn [& fns] \n  (fn [x & xx] \n    (->> fns\n      reverse\n      rest\n      (reduce\n        (fn [res f] (f res))\n        (apply (last fns) x xx)))))", "user": "5170ea06e4b0d70c8bbbf235"}, {"problem": 58, "code": "(fn compose [& fns]\n  (let [fns (reverse fns)]\n    (fn [& args]\n        (reduce (fn [acc f] (f acc))\n                (apply (first fns) args)\n                (rest fns)))))", "user": "546c1f73e4b00cfc9eacc175"}, {"problem": 58, "code": "(fn [& fns]\n    (fn[& args]\n      (loop [[f & tail :as in] (reverse fns) result args]\n        (cond (empty? in) (get result 0)\n              :else (recur tail (vector (apply f result)))))))", "user": "5472cba1e4b094393f72dd7a"}, {"problem": 58, "code": "(fn comp* [& fns]\n  (fn [& args]\n    (let [fns (reverse fns)\n          initial (apply (first fns) args)]\n      (loop [f (next fns) \n             r initial]\n        (if f\n          (recur (next f) ((first f) r))\n          r)))))", "user": "5405ae2be4b0addc1aec6671"}, {"problem": 58, "code": "(fn c [& fs]\n  (fn [& xs]\n    (if (= (count fs) 1)\n      (apply (first fs) xs)\n      ((first fs) (apply (apply c (rest fs)) xs)))))", "user": "5136f659e4b04059df19f2fd"}, {"problem": 58, "code": "(fn _comp [f & fs]\n  (if (empty? fs)\n    f\n    (fn [& xs]\n \t  (f (apply (apply _comp fs) xs)))))", "user": "547584d9e4b0c51c1f4d729b"}, {"problem": 58, "code": "(fn mycomp [& fns]\n  (fn [& args]\n    (let [fs (reverse fns)]\n      (loop [ret (apply (first fs) args) restfns (rest fs)]\n        (if (seq restfns)\n            (recur ((first restfns) ret) (next restfns))\n            ret)))))", "user": "536e5055e4b0fc7073fd6e6b"}, {"problem": 58, "code": "(fn [& fns]\n  (fn [& args]\n    (first (reduce\n     (fn [res f] [(apply f res)])\n     args\n     (reverse fns)))))", "user": "51434a4fe4b0c172af7558d4"}, {"problem": 58, "code": "(fn [& s]\r\n  (fn [& args]\r\n    (reduce\r\n      (fn [r f] (f r))\r\n      (apply (last s) args)\r\n      (rest (reverse s)))))", "user": "5470699ae4b00cfc9eacc1b6"}, {"problem": 58, "code": "(fn my-comp\n  [f & fs]\n  (fn [& args]\n    (if (empty? fs)\n      (apply f args)\n      (f (apply (apply my-comp fs) args)))))", "user": "5473efc3e4b0c51c1f4d7285"}, {"problem": 58, "code": "(fn [& funcs]\n  (loop [input (butlast funcs)\n         output (last funcs)]\n    (if (empty? input)\n      output\n      (recur (butlast input) (fn [& args] ((last input) (apply output args)))))))", "user": "546c4c5fe4b00cfc9eacc178"}, {"problem": 58, "code": "(fn [& fns]\n  (fn [& args]\n    (loop [fs (rest (reverse fns))\n           v (apply (last fns) args)]\n      (if (seq fs)\n        (recur (rest fs) ((first fs) v))\n        v))))", "user": "5479c58de4b0c51c1f4d72c7"}, {"problem": 58, "code": "(fn [& f]\n  (let [f (reverse f)]\n    (fn [& a]\n      (loop [r (apply (first f) a) f (next f)]\n        (if f\n          (recur ((first f) r) (next f))\n          r)))))", "user": "544e8369e4b0e39780006987"}, {"problem": 58, "code": "(fn [& fs] (reduce (fn [f g] #(f (apply g %&))) fs))", "user": "5460f59ce4b01be26fd74695"}, {"problem": 58, "code": "(fn [& fns]\n  (reduce (fn [acc f]\n            (fn [& args]\n              (acc (apply f args)))) fns))", "user": "5478c4fee4b0c51c1f4d72c0"}, {"problem": 58, "code": "(fn comp2 [& functions]\n  (fn [& arguments]\n    (first (reduce #(vector (apply %2 %1)) arguments (reverse functions)))))", "user": "541f5b37e4b01498b1a71a97"}, {"problem": 58, "code": ";(fn o [fun & funs]\n;  (if (empty? funs)\n;    fun\n;    (fn [& args] (fun (apply (apply o funs) args)))\n;    ))\n\n(fn o [& funs]\n  (fn [& args]\n    (first (reduce \n            #(vector (apply %2 %1)) \n            args \n            (reverse funs)))))", "user": "5478e57de4b0c51c1f4d72c1"}, {"problem": 58, "code": "(fn\n         ([] identity)\n         ([f] f)\n         ([f g] (fn [& args] (f (apply g args))))\n         ([f g h] (fn [& args] (f (g (apply h args))))))", "user": "5409f8eae4b0addc1aec66e6"}, {"problem": 58, "code": "(fn [& fs]\n  (reduce (fn [f g]\n            #(f (apply g %&))) fs)\n  )", "user": "547adcb0e4b0c51c1f4d72cf"}, {"problem": 58, "code": "(fn [& fs] (apply (fn f' [f & fs] \n              (if (empty? fs) f\n              (fn [& args] ((apply f' fs) (apply f args))))) (reverse fs)))", "user": "547d8e93e4b0c51c1f4d72f4"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& xs]\n    (loop [funcs (rest (reverse fs))\n           res (apply (last fs) xs)]\n      (if (empty? funcs)\n        res\n        (recur (rest funcs) ((first funcs) res))))))", "user": "547ad587e4b0c51c1f4d72ce"}, {"problem": 58, "code": "(fn [& s] (reduce (fn [f g] #(f (apply g %&))) s))", "user": "54448b64e4b032a45b869392"}, {"problem": 58, "code": "(fn fc [& funcs]\n  (fn [& args]\n    (let [arg (apply (last funcs) args)\n          f (drop-last funcs)]\n    (loop [f f\n           arg arg]\n      (if (empty? f) arg\n        (recur (drop-last f) ((last f) arg)))))))", "user": "5475d755e4b0c51c1f4d72a0"}, {"problem": 58, "code": "(fn my-comp [& fs]\n  (cond\n    (empty? fs) identity\n    (= 1 (count fs)) (fn [& args] (apply (first fs) args))\n    :else (fn [& args] ((first fs) (apply (apply my-comp (rest fs)) args)))))", "user": "54734a0de4b0c51c1f4d727b"}, {"problem": 58, "code": "(fn [& fs]\n  (reduce (fn [f g]\n            #(f (apply g %&))) fs))", "user": "52e7afe1e4b09f7907dd148b"}, {"problem": 58, "code": "(fn my-comp [f & fs]\n  (println f \"~\" fs)\n  (if (nil? fs)\n    (fn [& args] (println \"++ \" f \" : \" args) (apply f args))\n    (fn [& args] (println \">> \" f \" : \" args) (f (apply (apply my-comp fs) args)))))", "user": "5483d59fe4b0e286459a1194"}, {"problem": 58, "code": "(fn [& fns]\n  (let [[f & r] (reverse fns)]\n    (fn [& args]\n      (reduce #(%2 %1) (apply f args) r))))", "user": "54814dbee4b0e286459a116b"}, {"problem": 58, "code": "(fn [& funs]\n  (let [[hd & tail] (reverse funs)]\n    (fn [& args]\n      (reduce (fn [val fun]\n                (fun val))\n              (apply hd args)\n              tail))))", "user": "5456e4e7e4b080a794c2c883"}, {"problem": 58, "code": "(fn [& fs] (reduce #(fn [& args] (%(apply %2 args))) (vec fs)))", "user": "53c06438e4b0c98a41f5ccb0"}, {"problem": 58, "code": "(fn [& funcs]\n  (fn [& args]\n    (first\n      (reduce #(list (apply %2 %1)) args (reverse funcs )))))", "user": "5470c930e4b094393f72dd64"}, {"problem": 58, "code": "(fn [& fs]\n  (reduce (fn [f g] \n             #(f (apply g %&))) \n          fs))", "user": "54857e3be4b0e286459a11ad"}, {"problem": 58, "code": "(fn mycomp \n   ([a b] (fn [x] (a (b x))))\n   ([a b c] (fn [& x] (a (b (apply c x))))))", "user": "4e41a04e535dc968683fc49e"}, {"problem": 58, "code": "(fn my-comp [& fs]\n  (if (= (count fs) 1)\n    (first fs)\n    (fn [& args] ((first fs) (apply (apply my-comp (rest fs)) args)))))", "user": "5412ef7ee4b01498b1a719da"}, {"problem": 58, "code": "(fn composition [& fs]\n  (let [fs (reverse fs)]\n    (fn [& args]\n      (loop [ret (apply (first fs) args) fs (next fs)]\n        (if fs\n          (recur ((first fs) ret) (next fs))\n          ret)))))", "user": "54651faee4b01be26fd746d6"}, {"problem": 58, "code": "#(fn [& args]\n    (loop [ret (apply (first (reverse %&)) args)\n           fs (next (reverse %&))]\n      (if fs\n        (recur ((first fs) ret) (next fs))\n        ret)))", "user": "4daee8e9edd6309eace4d166"}, {"problem": 58, "code": "(fn [& funs]\n  (reduce #(fn [& a]\n             (% (apply %2 a)))\n          funs))", "user": "5466aabbe4b01be26fd746e8"}, {"problem": 58, "code": "(fn mycomp\n  ([] identity)\n  ([f] f)\n  ([f g] (fn\n           ([] (f (g)))\n           ([x] (f (g x)))\n           ([x & xs] (f (apply g x xs)))\n           ))\n  ([f g h] (fn\n             ([] (f (g (h))))\n             ([x] (f (g (h x))))\n             ([x & xs] (f (g (apply h x xs))))\n             ))\n  )", "user": "5488872ee4b0e286459a11d3"}, {"problem": 58, "code": "(fn [& funcs]\n  (fn [& args]\n    (let [[f & funcs] (reverse funcs)\n          funcs (cons (partial apply f) funcs)]\n      (reduce (fn [v f] (f v)) args funcs))))", "user": "548c6673e4b0e286459a1209"}, {"problem": 58, "code": "(fn compose [& fs]\n  (if (empty? (rest fs))\n    (first fs)\n    (fn [& args] ((first fs) (apply (apply compose (rest fs)) args))\n      )\n    )\n  )", "user": "5471f2fbe4b094393f72dd70"}, {"problem": 58, "code": "(fn [& functions]\n  (fn [& args]\n    (first\n      (reduce #(vector (apply %2 %1)) args (reverse functions)))))", "user": "547cd90ee4b0c51c1f4d72ec"}, {"problem": 58, "code": "(fn [& fns]\n  (fn [& xs]\n    (reduce #(%2 %) (apply (last fns) xs) (reverse (butlast fns)))))", "user": "5470b3d0e4b00cfc9eacc1bb"}, {"problem": 58, "code": "(fn [& fs]\n  (let [[f & fs] (reverse fs)]\n    (fn [& xs]\n      (reduce\n        (fn [acc x]\n          (x acc))\n        (apply f xs)\n        fs))))\n\n;(fn [& fs]\n;  (fn [& args]\n;    (first\n;      (reduce\n;        (fn [acc x] [(apply x acc)])\n;        args\n;        (reverse fs)))))", "user": "53a074a4e4b0ca733b9744af"}, {"problem": 58, "code": "(fn [f & fs]\n    (reduce (fn [f g]\n              (fn [& xs]\n                (f (apply g xs))))\n     \t\t(cons f fs)))", "user": "548e940fe4b0e286459a1225"}, {"problem": 58, "code": "(fn compose [& fs]\n  (reduce (fn [f g]\n            #(f (apply g %&)))\n          fs))", "user": "542c026ae4b0dad94371f29a"}, {"problem": 58, "code": "(fn my-comp [& funcs]\n    (fn [& coll]\n      (first \n        (reduce #(list (apply %2 %1)) coll (reverse funcs)))))", "user": "5471f0f3e4b094393f72dd6f"}, {"problem": 58, "code": "(fn [& funcs]\n\t(reduce (fn [f g] (fn [& args] (f (apply g args)))) funcs)\n)", "user": "5472d919e4b094393f72dd7b"}, {"problem": 58, "code": "(fn mycomp [& fns]\n  (let [fns (reverse fns)] \n    (loop [func (first fns)\n           fns (rest fns)           \n           result (fn [& args] (apply func args))]\n        (if (empty? fns)\n            result\n            (recur (first fns) (rest fns) (fn [& args] ((first fns) (apply result args))))))))", "user": "5458a729e4b01be26fd74622"}, {"problem": 58, "code": "(fn n-comp [& fns]\n  (letfn [(two-comp [f g] (fn [& args] (f (apply g args))))]\n    (reduce two-comp fns)))", "user": "4f748b54e4b044e54cd9a8fa"}, {"problem": 58, "code": "(fn [& fs]\n    (fn [& coll]\n      (first (reduce (fn [cur next] [(apply next cur)]) coll (reverse fs)))))", "user": "5462ce20e4b01be26fd746b8"}, {"problem": 58, "code": "(fn [& funcs]\n  (fn [& args] (first (reduce #(list (apply %2 %)) args (reverse funcs)))))", "user": "54630cdae4b01be26fd746bb"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& xs]\n    (reduce #(%2 %) (apply (last fs) xs) (reverse (butlast fs)))))", "user": "5392bfdee4b0b51d73faaeb2"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& args]\n    (first\n     (reduce (fn [args f]\n               (list (apply f args)))\n             args\n             (reverse fs)))))", "user": "511688d5e4b0b3e208dba05a"}, {"problem": 58, "code": "(fn [& funcs]\n  (fn [& x]\n    (reduce #(%2 %1) (apply (last funcs) x) (reverse (butlast funcs)))))", "user": "548fa2dfe4b0e286459a1240"}, {"problem": 58, "code": "(fn [& fns]\n    (reduce #(fn [& x] (%1 (apply %2 x))) fns))", "user": "545e9cf1e4b01be26fd7467f"}, {"problem": 58, "code": "(fn c2 [& a]\n  (letfn [(af [fs]\n     (fn [& b]\n         (apply (first fs) \n              (if (empty? (rest fs)) \n                b \n                [(apply (af (rest fs)) b)]\n                )\n        ) \n     )\n)]\n  (fn [& b] (apply (af a) b))\n  )\n)", "user": "4fc8f671e4b0ee37620e1840"}, {"problem": 58, "code": "(fn my-comp\n  [& fns]\n  (fn x\n    [& args] \n    (reduce #(%2 %1) (apply (last fns) args) (rest (reverse fns)))))", "user": "53b952eee4b047364c0444e6"}, {"problem": 58, "code": "(fn mcomp [& funcs]\n  (fn [& a] (reduce #(%2 %1) (apply (last funcs) a) (reverse (butlast funcs)))))", "user": "53e745a1e4b036ad0777e479"}, {"problem": 58, "code": "(fn [& fs] (fn [& args] (first  (reduce #(list ( apply %2 %1)) args (reverse fs))) )  )", "user": "512b07f7e4b078b06821febb"}, {"problem": 58, "code": "(fn\n    [& fns]\n    (fn \n      [& args]\n      (first \n       (reduce \n        #(list (apply %2 %1)) args (reverse fns)))))", "user": "543d89dfe4b032a45b869350"}, {"problem": 58, "code": "(fn\n  ([] identity)\n  ([f] f)\n  ([f g & fns]\n   (let [fns (reverse (list* f g fns))]\n     (fn [& args]\n       (let [first-res (apply (first fns) args)]\n         (reduce (fn [res f] (f res)) first-res (rest fns)))))))", "user": "5317d78ee4b08068f379ed63"}, {"problem": 58, "code": "(fn [& c] (reduce #(fn [& a] (% (apply %2 a))) c))", "user": "536e5b68e4b0fc7073fd6e6d"}, {"problem": 58, "code": "(fn\n  [& fns]\n  (if (empty? fns)\n    identity\n    (let [fns (reverse fns)]\n      (fn [& args]\n        (loop [[fn-1 & rest-fns] fns res args]\n          (if (empty? rest-fns)\n            (apply fn-1 res)\n            (recur rest-fns [(apply fn-1 res)])))))))", "user": "54926752e4b0b312c081ff44"}, {"problem": 58, "code": "(fn [& x]\n  (letfn [(mComp [x z]\n          (if (empty? (rest x))\n            (apply (first x) z)\n           \t((first x) (mComp (rest x) z))))]             \n  (fn [& z]\n    (mComp x z))))", "user": "549c8bbde4b0f3d1d8e70f8c"}, {"problem": 58, "code": "(fn [& funcs]\n  (fn [& args]\n    (loop [funcs_ (drop 1 (reverse funcs))\n           res_ (apply (last funcs) args)]\n      (if (empty? funcs_)\n        res_\n        (recur (rest funcs_) ((first funcs_) res_))))))", "user": "549e5e52e4b0f3d1d8e70f9e"}, {"problem": 58, "code": "(fn [& fs]\n  (reduce (fn [f g]\n            #(f (apply g %&))) fs))", "user": "549c3e0ce4b0f3d1d8e70f87"}, {"problem": 58, "code": "(fn [& f]\n  (let [g (reverse f)] \n    (fn [& v] (reduce #(%2 %1) (apply (first g) v) (rest g)))\n  )\n)", "user": "549c22f7e4b0f3d1d8e70f86"}, {"problem": 58, "code": "(fn cmp [& fns]\n  (fn [& args]\n    (loop [lfns fns\n           largs args]\n      (let [newfns (butlast lfns)\n            res (apply (last lfns) largs)]\n        (if (seq? newfns)\n          (recur newfns [res])\n          res)))))", "user": "54577fefe4b01be26fd7460d"}, {"problem": 58, "code": "(fn [& ft]\n  (let [f (reverse ft)]\n    (fn [& args]\n      (loop [rt (apply (first f) args) f (next f)]\n        (if f\n          (recur ((first f) rt) (next f))\n          rt)))))", "user": "5243e37ae4b076204b44fae3"}, {"problem": 58, "code": "(fn [& fns]\n (fn [& x]\n  (let [[ff & rstf] (reverse fns)]\n   (reduce (fn [arg f] (f arg))\n           (apply ff x)\n           rstf))))", "user": "549a999be4b0f3d1d8e70f6f"}, {"problem": 58, "code": "(fn [& funs]\n  (fn [& args]\n    (first\n     (reduce (fn [args fun]\n               (list\n                (apply fun args)))\n             args\n             (reverse funs)))))", "user": "54848141e4b0e286459a119e"}, {"problem": 58, "code": "(fn \n      ([f g] (fn [& xs] (f (apply g xs))))\n      ([f g h] (fn [& xs] (f (g (apply h xs)))))\n  )", "user": "549a176ce4b0f3d1d8e70f69"}, {"problem": 58, "code": "(fn [& fs] \n  (let [fs (reverse fs)] \n  \t(fn [& xs] \n      (reduce #(apply %2 [%1]) \n              (apply (first fs) xs) \n              (rest fs)))))", "user": "4f1ef6a0535d64f60314649b"}, {"problem": 58, "code": "(fn [& fs]\n      (fn [& args]\n          (loop [f (reverse fs), r args]\n                (if (empty? f) (first r) (recur (rest f) [(apply (first f) r)] ) )\n                )\n          )\n      )", "user": "53bcdd41e4b0d9a98559a6c0"}, {"problem": 58, "code": "(fn func-comp [& funcs]\n  (fn [& args]\n    (letfn [(func-comp-helper [[f & r]]\n                              (cond (empty? r) (apply f args)\n                                    :else (f (func-comp-helper r))))]\n        (func-comp-helper funcs))))", "user": "52b9e920e4b07a9af57922c9"}, {"problem": 58, "code": "(fn [& args]\n  (fn [& my-args]\n    (loop [rest-args args\n           ret my-args]\n      (if (empty? rest-args)\n        (first ret)\n        (recur (drop-last rest-args) [(apply (last rest-args) ret)]))\n      )\n    )\n  )", "user": "53fe1b42e4b0de5c418485f1"}, {"problem": 58, "code": "(fn [x & xs]\n  (fn [& args]\n    ((fn step [[f & fs] a]\n       (if fs\n         (f (step fs a))\n         (apply f a)))\n     (cons x xs) args)))", "user": "54a70af9e4b09f271ff37c93"}, {"problem": 58, "code": "#(reduce (fn [f g] (fn [& xs] (f (apply g xs)))) identity %&)", "user": "50ef4e2be4b0a78662fa2653"}, {"problem": 58, "code": "(fn [& fs]\n  (let [fs (reverse fs)]\n    (fn [& args]\n      (loop [ret (apply (first fs) args) fs (next fs)]\n        (if fs\n          (recur ((first fs) ret) (next fs))\n          ret)))))", "user": "5367bc60e4b0243289761e81"}, {"problem": 58, "code": "(fn [& a]\n  (fn [& b]\n    (reduce #(%2 %) (apply (last a) b) (rest (reverse a)))))", "user": "53572176e4b04ce2eb3ed276"}, {"problem": 58, "code": "(fn my-comp \n  ([f] (fn [& xs] (apply f xs)))  \n  ([f & fs] (let [func (apply my-comp fs)]\n              (fn [& xs] (f (apply func xs))))))", "user": "548ade6de4b0e286459a11f6"}, {"problem": 58, "code": "(fn [& funcs] (fn [& args] (let [[f & fs] (reverse funcs)] (reduce (fn [x f] (f x)) (apply f args) fs))))", "user": "54769c7ae4b0c51c1f4d72a8"}, {"problem": 58, "code": "(fn [& fs] (reduce (fn [f g] #(f (apply g %&))) fs))", "user": "548f19a8e4b0e286459a1231"}, {"problem": 58, "code": "(fn [& fs] (reduce (fn [f g] #(f (apply g %&))) fs))", "user": "54ae541ae4b09f271ff37cef"}, {"problem": 58, "code": "(fn [& fns] (reduce (fn [a b] (fn [& args] (a (apply b args)))) fns))", "user": "54ac5ad7e4b09f271ff37cd6"}, {"problem": 58, "code": ";(fn cmp [& fns]\n;    (let [f       (first fns)\n;          new-fns (rest fns)]\n;      (if (empty? new-fns)\n;        (fn [& args] (apply f args))\n;        (fn [& args] (f (apply (apply cmp new-fns) args))))))\n;; better / shorter:\n(fn [& fns] (reduce (fn [f g] #(f (apply g %&))) fns))", "user": "54ad9d76e4b09f271ff37ce6"}, {"problem": 58, "code": "(fn [& fs] (fn [& vs] (reduce (fn [v f] (f v)) (apply (last fs) vs) (rest (reverse fs)))))", "user": "50f10f7be4b06d9538fe211a"}, {"problem": 58, "code": "(fn [& fs](reduce (fn [f g] #(f (apply g %&))) fs))", "user": "5481be5fe4b0e286459a1172"}, {"problem": 58, "code": "(fn mc\n   ([f]\n     f)\n   ([f g]\n     (fn [& args] (f (apply g args))))\n   ([f g & more]\n     (fn [& args] (f (apply (apply mc g more) args))))\n   )", "user": "54b13a40e4b09f271ff37d1b"}, {"problem": 58, "code": "; First Try:\n \n;(fn [& funcs] \n;  (fn [col] \n;    (reduce #(apply %2 [%]) col (reverse funcs))))\n \n; That failed on test case three becuase of the variable number of args\n \n; Second Try:\n \n;(fn [& funcs] \n;  (fn [& col] \n;    (let [ordered_funcs (reverse funcs)\n;          first_func (first ordered_funcs)\n;          other_funcs (rest ordered_funcs)]\n;      (reduce #(apply %2 [%]) (apply first_func col) other_funcs))))\n \n; That works but some cleanup was suggested in \"code review\"\n \n(fn [& funcs] \n  (let [ordered-funcs (reverse funcs)\n        first-func (first ordered-funcs)\n        other-funcs (rest ordered-funcs)]\n    (fn [& col] \n      (reduce #(%2 %1) (apply first-func col) other-funcs))))", "user": "5465febde4b01be26fd746e1"}, {"problem": 58, "code": "(fn [& fns] (reduce (fn [acc f] (fn [& xs] (acc (apply f xs)))) identity fns))", "user": "53d92964e4b0e771c3025476"}, {"problem": 58, "code": "(fn [& funcs]\n  (fn [& args]\n    (first (reduce (fn [inargs f] (vector (apply f inargs))) args (reverse funcs)))\n  )\n)", "user": "54aa373de4b09f271ff37cb6"}, {"problem": 58, "code": "(fn [& fns] \n  (let [ fs (reverse fns) ]\n    (fn [& args]\n      (loop [ret (apply (first fs) args) fs (next fs)]\n        (if fs\n          (recur ((first fs) ret) (next fs) ) \n          ret)))))", "user": "52eaba10e4b09f7907dd14c2"}, {"problem": 58, "code": "(fn [& fargs]\n    (let [fns (vec (reverse fargs))]\n      (fn [& args]\n        (loop [fs (next fns) acc (apply (first fns) args)]\n          (if fs\n            (recur (next fs) ((first fs) acc))\n            acc)))))", "user": "515ebde3e4b01e5d11ccd0a8"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& args]\n    (reduce (fn [c f] (f c))\n            (apply (last fs) args)\n            (rest (reverse fs)))))", "user": "53e3f7a8e4b036ad0777e408"}, {"problem": 58, "code": "(fn [& fs]\n  (let [fs (reverse (list* fs))]\n    (fn [& args]\n      (loop [ret (apply (first fs) args) fs (next fs)]\n        (if fs\n          (recur ((first fs) ret) (next fs))\n          ret)))))", "user": "5383668ee4b06839e8705edd"}, {"problem": 58, "code": "#(fn [& x]\n   (let [[z] (reduce (fn [r f] (list (apply f r)))\n                     x\n                     (reverse %&))]\n     z))", "user": "54acf5c7e4b09f271ff37cdd"}, {"problem": 58, "code": "(fn [& ff]\r\n  (loop [acc (fn [f1] f1), curr-ff ff]\r\n    (if curr-ff\r\n      (recur (fn [& x] (acc (apply (first curr-ff) x))) (next curr-ff))\r\n      acc)))", "user": "54bbaa8ee4b0ed20f4ff6ec0"}, {"problem": 58, "code": "(fn g [f & fs] (if (seq? fs) (fn [& s] (f (apply (apply g fs) s))) f))", "user": "54bd04e7e4b0ed20f4ff6ed8"}, {"problem": 58, "code": "(fn [& fns] (fn [& args] (first (reduce (fn [x f] (conj () (apply f x))) args (reverse fns)))))", "user": "525b142fe4b0cb4875a45d05"}, {"problem": 58, "code": "(fn [& fns]\n  (fn [& x]\n    (loop [value (apply (last fns) x) fns (rest (reverse fns))]\n      (if (empty? fns) \n        value\n        (recur ((first fns) value) (rest fns))\n        )\n      ) \n    ) \n  )", "user": "54b90836e4b0ed20f4ff6e9d"}, {"problem": 58, "code": "(fn my-comp [& fs]\n  (let [fs (reverse fs)]\n    (loop [g (first fs)\n           f (second fs)\n           fs (rest (rest fs))]     \n      (if (nil? f) g          \n          (recur #(f (apply g %&))\n                 (first fs)\n                 (rest fs))))))", "user": "50aa777fe4b056ee01935866"}, {"problem": 58, "code": "(fn f1 [& fs] (reduce (fn f2 [c f] (fn f3 [& args] (c (apply f args)))) fs))", "user": "4ea03f70535d7eef308072a1"}, {"problem": 58, "code": "(fn [& fns]\n    (fn [& args]\n      (first\n       (reduce (fn [args func]\n                 [(apply func args)])\n               args\n               (reverse fns)))))", "user": "4f42c80ae4b0d7d3c9f3fd0f"}, {"problem": 58, "code": "(fn comp' [& args]\n  #(first (reduce (fn [args f] (list (apply f args)))\n           %&\n           (reverse args)\n           )))", "user": "54be7772e4b0ed20f4ff6eea"}, {"problem": 58, "code": "(fn [& fs] (reduce #(fn [& r] (% (apply %2 r))) fs ))", "user": "54bc539be4b0ed20f4ff6eca"}, {"problem": 58, "code": "(fn [& hgf] (reduce (fn [a b] #(a (apply b %&))) hgf))", "user": "54c169ade4b0ed20f4ff6f24"}, {"problem": 58, "code": "(fn [& rfs]\n  (let [[f & fs] (reverse rfs)]\n  (fn [& args]\n    (reduce #(%2 %1) (apply f args) fs))))", "user": "4e435681535dc968683fc4a1"}, {"problem": 58, "code": "(fn [& fns]\n  (fn [& args]\n     (reduce #(%2 %1) (apply (last fns) args) (reverse (butlast fns)))))", "user": "54908cc1e4b0b312c081ff32"}, {"problem": 58, "code": "(fn my-comp [& x]\n  (let [rx (reverse x)]\n  (fn inner [& args]\n    (reduce #(%2 %1) (apply (first rx) args) (rest rx))    \n  )\n  )\n)", "user": "54b050cee4b09f271ff37d13"}, {"problem": 58, "code": "(fn my-comp [f & rem-funcs]\n  (if (empty? rem-funcs)\n    f\n    (fn [& args] (f (apply (apply my-comp rem-funcs) args)))))", "user": "54bd3aefe4b0ed20f4ff6edb"}, {"problem": 58, "code": "(fn fc [& func]\n  (fn [& x]\n    (first \n    (loop [f (reverse func) res x]\n      (if (empty? f) \n        res\n        (recur (rest f) (list (apply (first f) res))))))))", "user": "54b95f3de4b0ed20f4ff6eab"}, {"problem": 58, "code": "(fn self [fun & funs]\n  (if (empty? funs)\n      fun\n      (fn [& parameter]\n        (fun (apply (apply self funs) parameter)))))", "user": "545bd22fe4b01be26fd7465a"}, {"problem": 58, "code": "(fn mycompose [f & remainder]\n  (fn composed [& args]\n\t(if (empty? remainder)\n        (apply f args)\n\t\t(let [g (apply mycompose remainder)]\n      \t\t(f (apply g args))\n        )\n    )\n  )\n)", "user": "54c82b27e4b045293a27f645"}, {"problem": 58, "code": "(fn [& functions]\n  (let [[function & functions] (reverse functions)]\n    (fn [& args]\n      (reduce #(%2 %1) (apply function args) functions))))", "user": "5412d5d2e4b01498b1a719d9"}, {"problem": 58, "code": "(fn compose\n  ([x] x)\n  ([x y] (fn [& args]\n           (x (apply y args))))\n  ([x y & more]\n   (reduce compose (compose x y) more)))", "user": "51db0d99e4b06aa4d4669a9d"}, {"problem": 58, "code": "(fn my-comp [& fs]\n  (let [fs (reverse fs)]\n    (fn [& args]\n      (loop [ret (apply (first fs) args)\n             fs (next fs)]\n        (if fs\n          (recur ((first fs) ret) (next fs))\n          ret)))))", "user": "549c1713e4b0f3d1d8e70f82"}, {"problem": 58, "code": "(fn [& l] (fn [& a] (first (reduce #(vector (apply %2 %1)) a (reverse l)))))", "user": "54c11fdae4b0ed20f4ff6f1b"}, {"problem": 58, "code": ";(fn comp'\n;  ([f] (fn [& xs] (apply f xs)))\n;  ([f & fs] (fn [& xs] (f (apply (apply comp' fs) xs)))))\n(fn comp' [& fs]\n  (fn [& xs]\n    (let [rfs (reverse fs)]\n      (reduce #(%2 %1) (apply (first rfs) xs) (rest rfs)))))", "user": "54ca9ca8e4b057c6fda3a265"}, {"problem": 58, "code": "(fn [& funs]\n  (fn [& args]\n    (loop\n      [carry args\n       funs_left (reverse funs)]\n      (if (empty? funs_left)\n        (first carry)\n      (recur (list (apply (first funs_left) carry)) (rest funs_left))\n      )\n    )\n  )\n)", "user": "54c9f165e4b045293a27f687"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& args]\n    (loop [ret (apply (last fs) args) fs (butlast fs)]\n      (if fs\n        (recur ((last fs) ret) (butlast fs))\n        ret))))", "user": "544fbabce4b0e39780006999"}, {"problem": 58, "code": "(fn ! [f & fs]\n  (if (empty? fs)\n    (fn [& a]\n      (apply f a))\n    (fn [ & a]\n      (f (apply (apply ! fs) a)))))", "user": "54c271b9e4b045293a27f602"}, {"problem": 58, "code": "(fn [& fns]\n  (let [f (reverse fns)]\n    (fn [& args]\n      (reduce #(%2 %1) (apply (first f) args) (rest f)))))", "user": "541b1f25e4b01498b1a71a63"}, {"problem": 58, "code": "(fn [& fs] (fn [& args] (first (reduce #(vector (apply %2 %1)) args (reverse fs)))))", "user": "54c641f8e4b045293a27f628"}, {"problem": 58, "code": "(fn [& f]\n  (fn [& x]\n    (loop [x x, f (reverse f)]\n      (if (seq f)\n        (recur (list (apply (first f) x)) (rest f))\n        (first x)))))", "user": "4f301d02e4b0d6649770a072"}, {"problem": 58, "code": "(fn [& fs]\n(let [fs (reverse fs)]\n(fn [& args]\n(loop [result (apply (first fs) args)\nfs (next fs)]\n(if-not fs\nresult\n(recur ((first fs) result) (next fs)))))))", "user": "54580586e4b01be26fd74616"}, {"problem": 58, "code": "(fn [& fs] (reduce (fn [f g] #(f(apply g %&))) fs))", "user": "54d1cf2ee4b0e8a36923e5eb"}, {"problem": 58, "code": "#(fn [& x] (loop [fns %& x x] (if (empty? fns) (first x) (recur (butlast fns) [(apply (last fns) x)]))))", "user": "54cbe00ee4b057c6fda3a285"}, {"problem": 58, "code": "(fn [& fns]\n  (fn [& args]\n    (reduce #(%2 %) (apply (last fns) args) (rest (reverse fns)))))", "user": "536046a9e4b063bf7a5f8fe1"}, {"problem": 58, "code": "(fn [& funs]\n  (fn [& args]\n    (loop [value (apply (last funs) args)\n           funs (rest (reverse funs))]\n      (if (empty? funs)\n        value\n        (recur ((first funs) value) (rest funs))))))", "user": "54be792ee4b0ed20f4ff6eeb"}, {"problem": 58, "code": "(fn c [& funcs]\n  (fn [& args]\n    ((fn help [remaining]\n      (if (empty? (rest remaining))\n        (apply (first remaining)\n               args)\n        (apply (first remaining)\n               (list (help (rest remaining))))))\n     funcs)))", "user": "54d26316e4b0e8a36923e5f2"}, {"problem": 58, "code": "(fn my-comp\n  [f & fs]\n  (if (nil? fs)\n    f\n    (fn [& xs]\n      (f (apply (apply my-comp fs) xs)))))", "user": "52561295e4b0541d1855ba03"}, {"problem": 58, "code": "(fn [& functions]\n  (fn [& args]\n    (let [[first & rest] (reverse functions)]\n      (reduce (fn [acc next]\n                (next acc)) (apply first args) rest))))", "user": "54d80751e4b0a52adc2e2035"}, {"problem": 58, "code": "(fn cmp [f & fs]\n  (if (empty? fs)\n    f\n    (fn [ & x] (f (apply (apply cmp fs) x)) )))", "user": "54d6f22de4b0a52adc2e2023"}, {"problem": 58, "code": "(fn [& fn-list] (partial\n                  (fn my-comp [funcs & args]\n                    (println args)\n                    (if (seq funcs)\n                      (my-comp (drop 1 funcs) (apply (first funcs) args))\n                      (first args))) (reverse fn-list)))", "user": "54cad2d5e4b057c6fda3a26c"}, {"problem": 58, "code": "(fn fc [& f]\n  (fn [& args]\n    ((fn cf[g]\n       (if (= 1 (count g))\n         (apply (first g) args)\n         ((first g)(cf (rest g))))) f)))", "user": "54d4bd2be4b0a52adc2e2005"}, {"problem": 58, "code": "(fn [& fs] \n  (fn [& xs] \n    (let [[f0 & rest-fs] (reverse fs)\n          x0 (apply f0 xs)]\n      (reduce #(%2 %1) x0 rest-fs))))", "user": "52950ab6e4b02ebb4ef7501a"}, {"problem": 58, "code": "(fn comp' [& fs]\n    (fn [& args] (first (reduce #(list (apply %2 %)) args (reverse fs)))))", "user": "54d7ed8de4b0a52adc2e2034"}, {"problem": 58, "code": "(fn [& fns]\n  (let [[first-fn & rest-fns] (reverse fns)]\n    #(reduce (fn [val func] (func val)) (apply first-fn %&) rest-fns)))", "user": "524740e7e4b05ef8e38e635d"}, {"problem": 58, "code": "(fn f [first-fn & fns]\n  (fn [& args]\n    (if (empty? fns)\n      (apply first-fn args)\n      (first-fn (apply (apply f fns) args)))))", "user": "5344fe13e4b084c2834f4a32"}, {"problem": 58, "code": "(fn \n  ([f g] (fn [x] (f (g x))))\n  ([f g h] (fn [x & args] (f (g (apply h x args))))))", "user": "52a90056e4b0c58976d9ac39"}, {"problem": 58, "code": "(fn [& f]\n  (let [rf (reverse f)]\n    (fn [& args]\n      (loop [fns (next rf)\n             values (apply (first rf) args)]\n        (if (next fns)\n          (recur (rest fns) ((first fns) values))\n          ((first fns) values))))))", "user": "54dd76c8e4b024c67c0cf794"}, {"problem": 58, "code": "(fn ([x y] (fn [& args] (x (apply y args))))\n    ([x y z] (fn [& args] (x (y (apply z args))))))", "user": "54d5fbe9e4b0a52adc2e2014"}, {"problem": 58, "code": "(fn [& fs] (let [fs (reverse fs)] (fn [& as] (reduce #(%2 %1) (apply (first fs) as) (rest fs)))))", "user": "54cd651be4b057c6fda3a2a2"}, {"problem": 58, "code": "(fn [& funs]\n  (let [funs (reverse funs)]\n    (fn [& args]\n      (loop [fs (rest funs) res (apply (first funs) args)]\n        (if (= (count fs) 1)\n          ((first fs) res)\n          (recur (rest fs) ((first fs) res)))))))", "user": "541d3c0fe4b01498b1a71a7e"}, {"problem": 58, "code": "(fn [& funcs]\n  (fn [& args]\n    (first\n     (reduce\n      (fn [x y]\n        (list (apply y x)))\n      args\n      (reverse funcs)))))", "user": "52474133e4b05ef8e38e635e"}, {"problem": 58, "code": "(fn [& col]\n  (fn [& arg]\n    (let [col (reverse col)]\n    (reduce  #(%2 %) (apply (first col) arg)   (rest col)\n             \n             \n             ))))", "user": "54af6fb0e4b09f271ff37d08"}, {"problem": 58, "code": "(fn ([] identity)\n  ([f] f)\n  ([f g]\n    (fn\n      ([] (f (g)))\n      ([x] (f (g x)))\n      ([x y] (f (g x y)))\n      ([x y z] (f (g x y z)))\n      ([x y z & args] (f (apply g x y z args)))))\n  ([f g h]\n    (fn\n      ([] (f (g (h))))\n      ([x] (f (g (h x))))\n      ([x y] (f (g (h x y))))\n      ([x y z] (f (g (h x y z))))\n      ([x y z & args] (f (g (apply h x y z args)))))))", "user": "52f9ce6de4b047fd55836ff0"}, {"problem": 58, "code": "(fn f [& funs]\n  (fn [& args] \n    (->> \n      (loop [args args, funs funs]\n            (if (empty? funs)\n                args\n                (recur (vector (apply (last funs) args)) (butlast funs))))\n      (first))))", "user": "5493d908e4b0b312c081ff52"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& xs]\n    (first (reduce #(vector (apply %2 %1)) xs (reverse fs)))))", "user": "54dae16de4b024c67c0cf758"}, {"problem": 58, "code": "(fn my-comp5\n  ([f] f)\n  ([f & fs] #(f (apply (apply my-comp5 fs) %&))))", "user": "54e3df6ae4b024c67c0cf7e3"}, {"problem": 58, "code": "(fn mycomp [& fns]\n  (fn [& args]\n    (loop [fns (reverse fns) args args]\n      (if (empty? fns)\n        (first args)\n        (let [new-arg (vector (apply (first fns) args))]\n          (recur (rest fns) new-arg))))))", "user": "4f7207d3e4b07046d9f4f019"}, {"problem": 58, "code": "(fn compose [& funcs] \n    (fn [& args] \n      (first (reduce #(vector (apply %2 %1)) args (reverse funcs)))\n    )\n  )", "user": "546692aee4b01be26fd746e7"}, {"problem": 58, "code": "(fn [& f] \n  (fn [& a] \n    (\n     reduce #(%2 %) (apply (last f) a) (rest (reverse f)) \n     )\n  )\n)", "user": "54db33f1e4b024c67c0cf75d"}, {"problem": 58, "code": "(fn [& functions]\n  (reduce (fn [composition func] #(composition (apply func %&)))\n          functions))", "user": "54cc26c1e4b057c6fda3a28a"}, {"problem": 58, "code": "(fn [& all-fns]\n  (reduce\n   (fn [acc-fn curr-fn]\n     (fn [& args] (acc-fn (apply curr-fn args))))\n   identity\n   all-fns))", "user": "528b01a0e4b0239c8a67ae89"}, {"problem": 58, "code": "(fn [& fns] (fn [& more] (reduce #(%2 %1) (apply (last fns) more) (rest (reverse fns)) )))", "user": "524025bce4b0ad64fa01030f"}, {"problem": 58, "code": "(fn [& fns] (fn [& args]\n                (reduce #(%2 %) (apply (last fns) args) (rest (reverse fns)))))", "user": "4e68c465535d8ccf87e9fe8a"}, {"problem": 58, "code": "(fn [& f] (reduce (fn [f1 f2] #(f1 (apply f2 %&))) f))", "user": "54b7f217e4b0ed20f4ff6e8f"}, {"problem": 58, "code": "(fn [& fns]\n    (fn [& args]\n      (first (reduce #(list (apply %2 %1))\n              args\n              (reverse fns)))))", "user": "525cc912e4b0cb4875a45d48"}, {"problem": 58, "code": "(fn [& fs]\n  (let [[f & fs] (reverse fs)]\n    (fn [& more]\n      (reduce #(%2 %) (apply f more) fs))))", "user": "54ddb556e4b024c67c0cf798"}, {"problem": 58, "code": "(fn _comp [& l]\n    (fn [& b]\n        (loop [f (reverse l) a b]\n              (if (nil? f)\n                  (first a)\n                (recur (next f) (list (apply (first f) a)))))))", "user": "534e4a29e4b084c2834f4ab0"}, {"problem": 58, "code": "(fn [& functions]\n    (fn [& args]\n      (peek (reduce\n        (fn [args f]\n          (list (apply f args)))\n        args\n        (reverse functions)))))", "user": "54ca130ce4b057c6fda3a250"}, {"problem": 58, "code": "(fn [& funs]\n  (fn [& args] (first (reduce #(vector (apply %2 %1)) args (reverse funs))))\n)", "user": "54e5bdf2e4b024c67c0cf7fe"}, {"problem": 58, "code": "(fn [& fns]\n  (fn [& xs]\n    (let [[f & rfns] (reverse fns)]\n      (reduce #(%2 %)\n              (apply f xs)\n              rfns))))", "user": "4edee6a2535d10e5ff6f533e"}, {"problem": 58, "code": "(fn [& n] \n  (fn [& a](reduce \n     (fn [f1 f2](if (nil? f1) (apply f2 a) (f2 f1))) \n     nil (reverse n))))", "user": "54edcf96e4b024c67c0cf866"}, {"problem": 58, "code": "(fn [& a]\n  (fn [& b]\n    (loop [c (reverse a) y b]\n      (if (empty? c)\n        (nth y 0)\n        (recur (rest c) (list (apply (nth c 0) y)))))))", "user": "54d753ebe4b0a52adc2e2029"}, {"problem": 58, "code": "(fn\n    ([f g]\n       (fn [x] (f (g x))))\n    ([f g h]\n       (fn\n         ([x] (f (g (h x))))\n         ([x y] (f (g (h x y))))\n         ([x y z a] (f (g (h x y z a)))))))", "user": "52b2f9cae4b0c58976d9acfb"}, {"problem": 58, "code": "(fn [& args]\n   (let [args (reverse args)]\n     (fn [& a]\n       (reduce #(%2 %1) (apply (first args) a) (rest args)))))", "user": "546ff835e4b00cfc9eacc1b4"}, {"problem": 58, "code": "(fn [& funcs] \n  (fn [& ps] \n    (let [param (if (sequential? (first ps)) (first ps) ps)]\n      (if (sequential? (first ps))\n        (reduce (fn [acc f] (f acc)) param (reverse funcs))\n        (reduce (fn [acc f] (if (= param acc) (apply f acc) (f acc) )  ) param (reverse funcs))))))", "user": "54e51c7be4b024c67c0cf7f7"}, {"problem": 58, "code": "(fn [& fs] (fn [& args] (first (reduce (fn [r f] [(apply f r)]) args (reverse fs)))))", "user": "54f0d3fde4b024c67c0cf8a6"}, {"problem": 58, "code": "(fn [& fs]\n    (fn [& args]\n      ((fn iter [fs]\n         (if (= 1 (count fs))\n           (apply (first fs) args)\n           ((first fs) (iter (rest fs)))))\n       fs)))", "user": "51b91b08e4b0e871ca4958f8"}, {"problem": 58, "code": "(fn [& funs] \n  (fn [& args] \n    (first\n      (loop [ret args, samurai funs]\n        ; (println \"last samurai=\" (last samurai) \" | ret= \" ret)\n        (if (empty? samurai) ret \n          ; Akira would be proud\n          (recur [(apply (last samurai) ret)] (butlast samurai)\n      ))))))", "user": "54bbe505e4b0ed20f4ff6ec5"}, {"problem": 58, "code": "(fn [& fns]\n           (fn [& args]\n             (let [fns (reverse fns)\n                   first-function (first fns)\n                   first-return (apply first-function args)]\n               (reduce #(%2 %1) first-return (rest fns)))))", "user": "52f53589e4b05e3f0be25f2c"}, {"problem": 58, "code": "(fn comb [& funcs]\n  (fn [& args]\n    (first\n     (reduce #(vector (apply %2 %1)) args (reverse funcs)))))", "user": "54d760efe4b0a52adc2e202b"}, {"problem": 58, "code": "(fn comb [& funcs]\n  (fn [& args]\n    (first\n      (reduce #(vector (apply %2 %1)) args (reverse funcs )))))", "user": "54ef4a1ee4b024c67c0cf883"}, {"problem": 58, "code": "(fn [& fns] (reduce (fn [f g] #(f (apply g %&))) fns))", "user": "4ee7d6d8535d93acb0a66870"}, {"problem": 58, "code": "(fn [& fs] (reduce (fn [f g] #(f (apply g %&))) fs))", "user": "539c736ce4b0b51d73faaf2b"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& args]\n    (let [v0 (apply (last fs) args)]\n      (reduce #(%2 %1)\n              v0 (rest (reverse fs))))))", "user": "54f2fe9fe4b050824f58f5b8"}, {"problem": 58, "code": "(fn comp2 [& funcs]\n    (print \"comp2 \" funcs \"\\n\")\n    (fn compsub [& args]\n       ((fn compsub2 [funcs2 args2]\n          (print \"compsub2 \" funcs2 args2 \"\\n\")\n          (let [ffunc (first funcs2)\n                rfunc (rest funcs2)]\n            (if (empty? rfunc)\n              (apply ffunc args2)\n              (ffunc (compsub2 rfunc args2))))) funcs args)))", "user": "54d9366ce4b0a52adc2e204e"}, {"problem": 58, "code": "(fn t\n  ([f g]\n   (fn [x] (f (g x))))\n  ([f g h]\n   (fn [& x] (f (g (apply h x)))))\n  )", "user": "51a4d802e4b0def3c5c5869a"}, {"problem": 58, "code": "(fn [& xs]\n  (let [fns (reverse xs)]\n    (fn [& args]\n    (reduce #(%2 %) \n            (apply (first fns) args) (rest fns)))))", "user": "547fbe01e4b0c51c1f4d7321"}, {"problem": 58, "code": "(fn my-comp\n  [& funcs]\n  (reduce (fn [func1 func2] #(func1 (apply func2 %&))) funcs))", "user": "54f2a1b8e4b024c67c0cf8cb"}, {"problem": 58, "code": "(fn [& fns]\n  (fn [& args]\n    (let [[f & fns] (reverse fns)]\n      (reduce #(%2 %) (apply f args) fns))))", "user": "54fdbe3fe4b07d26eda61d3b"}, {"problem": 58, "code": "(fn [& fns] (reduce\n             (fn [accf f]\n               (fn [& args] (accf (apply f args)))) fns))", "user": "5368fedee4b0243289761e93"}, {"problem": 58, "code": "; My solution\n;(fn [& funs]\n;    (fn [& args]\n;        (reduce\n;            #(%2 %1)\n;            (apply (last funs) args)\n;            (reverse (butlast funs)))))\n; Cooler solution -- constructs nested function\n(fn [& fs]\n  (reduce\n   (fn [f g]\n     (fn [& as] (f (apply g as))))\n   fs))", "user": "54b04708e4b09f271ff37d11"}, {"problem": 58, "code": "(fn multipleFN\n  [& args]\n  (loop [xs args\n         f (fn [x] x)]\n    (if (empty? xs)\n      f\n      (recur (rest xs) (fn [& x] (f (apply (first xs) x)))))))", "user": "54f64e99e4b0f2f3c5226ea4"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& zs] \n    (reduce #(%2 %1) \n            (apply (last fs) zs)\n            (reverse (drop-last fs)))))", "user": "54febf4be4b07d26eda61d45"}, {"problem": 58, "code": "(fn compose [& fs]\n  (if\n    (empty? fs)\n    identity\n  \t(fn [& args] ((apply compose (drop-last fs)) (apply (last fs) args)))))", "user": "54f904c2e4b01ecee9d88832"}, {"problem": 58, "code": "(fn [& fns]\n  (let [init (last fns)\n        fxs (reverse (butlast fns))]\n    (fn [& args]\n      (reduce\n        (fn [acc f] (f acc))\n        (apply init args)\n        fxs))))", "user": "53c1b787e4b00fb29b221266"}, {"problem": 58, "code": "( fn\n    [ & fcts]\n    ( fn [& args] \n      ( loop [res args\n              rfcts fcts]\n       ( if ( empty? rfcts )\n          (first res)\n          ( recur ( list ( apply ( last rfcts ) res ) ) ( butlast rfcts))))))", "user": "54fc7d89e4b07d26eda61d2b"}, {"problem": 58, "code": "(fn [& fs] (reduce (fn [f g] #(f (apply g %&))) fs))", "user": "535c2d21e4b04ce2eb3ed2b2"}, {"problem": 58, "code": "(fn comb [& funcs]\n  (fn [& args]\n    (first\n      (reduce #(vector (apply %2 %1)) args (reverse funcs )))))", "user": "54bcab07e4b0ed20f4ff6ed5"}, {"problem": 58, "code": "(fn ([& f] (let[[a & b] (reverse f)] (fn [& x] (reduce #(%2 %1) (apply a x) b)))))", "user": "54d8cc38e4b0a52adc2e203e"}, {"problem": 58, "code": "(fn [& fs]\n  (let [fs (reverse fs)]\n    (fn [& args]\n      (loop [ret (apply (first fs) args)\n             fs (next fs)]\n        (if fs (recur ((first fs) ret) (next fs))\n          ret)))))", "user": "55088bb3e4b06e50f9beb10c"}, {"problem": 58, "code": "(fn [& funcs]\n  (fn [& args] (first (reduce #(list (apply %2 %)) args (reverse funcs)))))", "user": "538d49e1e4b0b51d73faae6b"}, {"problem": 58, "code": "(fn func-comp [& forms]\n\t\t\t(let [forms (reverse forms)]\n\t\t\t\t\t (fn [& args]\n\t\t\t\t\t\t\t (reduce\n\t\t\t\t\t\t\t #(%2 %1)\n\t\t\t\t\t\t\t (apply (first forms) args)\n\t\t\t\t\t\t\t (rest forms))\n\t\t\t\t\t\t\t )\n\t\t\t\t\t )\n)", "user": "54ff6084e4b07d26eda61d50"}, {"problem": 58, "code": "(fn [& fs]\n  (let [fs (reverse fs)]\n    (fn [& args]\n      (loop [ret (apply (first fs) args) fs (next fs)]\n        (if fs\n          (recur ((first fs) ret) (next fs))\n          ret)))))", "user": "4eb7b049535d7eef30807377"}, {"problem": 58, "code": "(fn [& fns]\n  (fn [& args]\n  \t(reduce #(%2 %1)\n            (apply (last fns) args)\n            (rest (reverse fns)))))", "user": "550615c0e4b021ccfedb9696"}, {"problem": 58, "code": "(fn cmp [& functions]\n    (fn [& params]\n        (let [fst-res (apply (last functions) params)]\n            (reduce #(%2 %1) fst-res (rest (reverse functions))))))", "user": "54f09599e4b024c67c0cf89d"}, {"problem": 58, "code": "(fn [& fs] (fn [& args] (let [[f & fs] (reverse fs)]\n                    (reduce (fn [v f] (f v)) (apply f args) fs))))", "user": "5066003ee4b0313a384e5647"}, {"problem": 58, "code": "(fn [& fncs]\n    (fn [& args]\n      (reduce (fn [x y] (println x y (vec args)) (if (nil? x)\n                                                   ((partial apply y args))\n                                        ((partial y x))) ) nil (reverse fncs))))", "user": "5508102ee4b021ccfedb96b0"}, {"problem": 58, "code": "(fn [& fns] \n  (reduce \n   (fn [res f] (fn [& args] (res (apply f args)))) \n   fns))", "user": "550aeddae4b06e50f9beb135"}, {"problem": 58, "code": "(fn [& funs] \n  (fn [& args]\n    (first\n     (reduce (fn [acc x] [(apply x acc)])\n             args\n             (reverse funs)))))", "user": "52d63e89e4b09f7907dd134e"}, {"problem": 58, "code": "; arity-reduce\n(fn cp ([x] #(apply x %&)) ([x y] #(x (apply y %&))) ([x y & others] (reduce cp (cp x y) others)))", "user": "550fdc1de4b06e50f9beb17d"}, {"problem": 58, "code": "(fn [& fns]\n  (fn [& args]\n    (reduce (fn [prev el] (el prev))\n     (apply (last fns) args) (rest (reverse fns)))))", "user": "5514a60fe4b055c2f668d4d7"}, {"problem": 58, "code": "(fn [& flist]\n  (fn [& y] \n    (let [rlist (reverse flist)]\n       (reduce\n          #(apply %2 [%1])\n          (apply (first rlist) y)   ;; Starting value has to be calculated separately (cf. test case 3)\n          (rest rlist)))))", "user": "5515649fe4b055c2f668d4e3"}, {"problem": 58, "code": "(fn [& f] (fn [& a] (first (reduce #(list (apply %2 %)) a (reverse f)))))", "user": "51a058dae4b0b292b01ee3f3"}, {"problem": 58, "code": "(fn [& fns]\n  (reduce\n    (fn [acc f]\n      (fn [& args] (f (apply acc args))))\n    (reverse fns)))", "user": "55170dd9e4b06a49daca83bd"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& stuff]\n    (loop [fs fs\n           result stuff]\n      (if (empty? fs)\n        (first result)\n        (recur (drop-last fs) (list (apply (last fs) result)))))))", "user": "5512aca6e4b055c2f668d4b4"}, {"problem": 58, "code": "(fn [& fs]\n      (fn [& args]\n        (->> (reduce (fn [acc next] (list (apply next acc))) args (reverse fs))\n             (first))))", "user": "550c55d0e4b06e50f9beb14d"}, {"problem": 58, "code": "(fn [& args] (fn [& vals] (reduce #(%2 %) (apply (last args) vals) (rest (reverse args)))))", "user": "532018efe4b08068f379edcd"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& xs] (reduce #(%2 %1) (apply (last fs) xs) (rest (reverse fs)))))", "user": "54e2a779e4b024c67c0cf7d3"}, {"problem": 58, "code": "(fn [& fns]\n    (fn [& x]\n      (loop [fns (reverse fns)\n             y x]\n        (if (empty? fns)\n          (first y)\n          (recur (rest fns) (list (apply (first fns) y)))))))", "user": "551a21ece4b091ff45eda993"}, {"problem": 58, "code": "(fn [& fns] (reduce (fn [f g] (fn [& args] (f (apply g args)))) fns))", "user": "5519c157e4b00ace28fe6e32"}, {"problem": 58, "code": "(fn [& fns]\n  (let [basefn (fn [& more]\n                 (apply (last fns) more))\n        fns (butlast fns)]\n    (letfn [(compose [fns]\n                     (if (empty? fns)\n                       basefn\n                       (fn [& more]\n                         ((first fns) (apply (compose (rest fns)) more)))))]\n      (compose fns))))", "user": "551ed214e4b08d5046aa8a4d"}, {"problem": 58, "code": "(fn comp' [& fs]\n  (letfn [(comp2 [f g]\n                 (fn [& xs] (f (apply g xs))))]\n    (reduce comp2 fs)))", "user": "551ee974e4b08d5046aa8a50"}, {"problem": 58, "code": "(fn [& funcs] \n  (fn [& v] (reduce #(%2 %1) (apply (last funcs) v) (rest (reverse funcs))) )\n)", "user": "551c66dae4b07993ea3788de"}, {"problem": 58, "code": "(fn [& fs] (reduce (fn [a b] #(a (apply b %&))) fs))", "user": "55201d18e4b08d5046aa8a5d"}, {"problem": 58, "code": "(fn c\n  ([f] f)\n  ([f & fs]\n   #(f (apply (apply c fs) %&))))", "user": "5455c2f3e4b080a794c2c87d"}, {"problem": 58, "code": "(fn [& fonctions] (fn [& args] (first (reduce #(vector (apply %2 %1)) args (reverse fonctions)))))", "user": "55253217e4b0882d96d091ce"}, {"problem": 58, "code": "(fn [& fns]\n  (fn [& args]\n    (let [[f  & fs] (reverse fns)]\n    (reduce #(%2 %1) (apply f args) fs))))", "user": "54cd53dae4b057c6fda3a29f"}, {"problem": 58, "code": "(fn [& f] (fn [& a] (let [f (reverse f)] (reduce #(%2 %) (apply (first f) a) (rest f)))))", "user": "54126d0ce4b01498b1a719d5"}, {"problem": 58, "code": "(fn com [& fns] \n  (fn [& args]\n    ((fn comp-and-apply [[f & fs] args]\n       (if fs\n         (f (comp-and-apply fs args))\n         (apply f args)\n         )) fns args)))", "user": "5143824ae4b0b4fb4ace5f36"}, {"problem": 58, "code": "(fn [& fs]\n  (reduce\n   (fn [f h]\n     (fn [& args]\n       (f (apply h args))))\n   fs))", "user": "521d064fe4b0c4ef0be830a8"}, {"problem": 58, "code": "(fn ([f1 f2] (fn [& x] (f1 (apply f2 x))))\n            ([f1 f2 f3] (fn [& x] (f1 (f2 (apply f3 x)))))\n          )", "user": "533c2605e4b0e30313ee6cd7"}, {"problem": 58, "code": "(fn [& funcs]\n  (fn [& args]\n    (first\n     (reduce #(vector (apply %2 %1)) args (reverse funcs)))))", "user": "5522cd9ae4b0882d96d091ab"}, {"problem": 58, "code": "(fn comp1 [& args]\n  (fn [& x]\n    (loop [args1 (butlast args) res (apply (last args) x)]\n      (if (empty? args1)\n        res\n        (recur (butlast args1) ((last args1) res))\n      )\n    )\n  )\n)", "user": "55280930e4b0ffed3738f93b"}, {"problem": 58, "code": "(fn  [& fs]\n  (reduce (fn [f1 f2]\n            (fn [& xs]\n              (f2 (apply f1 xs))))\n          (reverse fs)))", "user": "50611456e4b0dc10a69545a5"}, {"problem": 58, "code": "(fn comb [& funcs]\n(fn [& args]\n(first\n(reduce #(vector (apply %2 %1)) args (reverse funcs )))))", "user": "54a1d643e4b09f271ff37c50"}, {"problem": 58, "code": "(fn mycomp\n  [& fns]\n  (loop [fns fns out identity]\n    (cond (empty? fns) out\n          (= out identity) (recur (butlast fns) #(apply (last fns) %&))\n          :else (recur (butlast fns) #((last fns) (apply out %&))))))", "user": "551afdf8e4b07993ea3788cb"}, {"problem": 58, "code": "(fn [& fs]\n    (letfn [(c [f & fs]\n              (if (nil? fs)\n                (fn [& xs] (apply f xs))\n                (fn [& xs] (f (apply (apply c fs) xs)))))]\n      (apply c fs)))", "user": "51bb08a4e4b0fe3ecfb46446"}, {"problem": 58, "code": "(fn\n  ([] identity)\n  ([f] f)\n  ([f1 & fs]\n   (let [fs (reverse (list* f1 fs))]\n     (fn [& args]\n       (loop [ret (apply (first fs) args)\n              fs (next fs)]\n         (if fs\n           (recur ((first fs) ret) (next fs))\n           ret))))))", "user": "54f4adc8e4b0f2f3c5226e86"}, {"problem": 58, "code": "(fn comp-funcs [& funcs]\n  (fn [& args] (first (reduce #(vector (apply %2 %1)) args (reverse funcs)))))", "user": "53504fe6e4b084c2834f4ada"}, {"problem": 58, "code": "(fn [& fs] \n    (fn [& xs] \n      (let [ff (last fs) fr (rest (reverse fs))] \n        (reduce #(%2 %1) (apply ff xs) fr))))", "user": "55249f64e4b0882d96d091c6"}, {"problem": 58, "code": "(fn comp* [& fs]\n  (fn [& args]\n    (let [fsr (reverse fs)]\n      (let [f (first fsr)\n            xs (rest fsr)\n            f* (fn [agg f**]\n                 (f** agg))]\n        (reduce f* (apply f args) xs)))))", "user": "55253799e4b0882d96d091cf"}, {"problem": 58, "code": "(fn [& ffs] \n  (fn [& xs] \n    (let [rffs (reverse ffs)\n          f (first rffs)\n          r (rest rffs)] \n      (reduce #(%2 %) (apply f xs) r))))", "user": "55297a7ae4b0ffed3738f94b"}, {"problem": 58, "code": "(fn [& funs]\n         (fn [& params]\n           (loop [fs (reverse funs), p params]\n             (if (empty? fs)\n               (first p)\n               (recur (rest fs) [(apply (first fs) p)])\n               )\n             )\n           )\n         )", "user": "552d9013e4b076ab5578f7ea"}, {"problem": 58, "code": "(fn [& fs]\n    (let [fs (reverse fs)]\n      (fn [& args]\n        (loop [ret (apply (first fs) args) fs (next fs)]\n          (if fs\n            (recur ((first fs) ret) (next fs))\n            ret)))))", "user": "548db64ce4b0e286459a121c"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& y] (reduce (fn [t v] (v t)) (apply (last fs) y) (rest (reverse fs)))))", "user": "54e24a05e4b024c67c0cf7ce"}, {"problem": 58, "code": "(fn [& fs]\n  (fn ([& xs] (first (reduce (fn [x f] (list (apply f x))) xs (reverse fs))))))", "user": "54d127b7e4b0e8a36923e5de"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& args] (reduce (fn [r f] (f r)) \n                       (apply (peek (vec fs)) args) \n                       (reverse (pop (vec fs))))))", "user": "55316b8ae4b076ab5578f825"}, {"problem": 58, "code": "(fn runit [& fns]\n  (reduce (fn [fn-col f]\n            (fn [& args]\n              (fn-col (apply f args))))\n          fns))", "user": "52fc34cee4b047fd55837015"}, {"problem": 58, "code": "(fn [& fns]\n  (let [[inner & more-fns] (reverse fns)\n        inner (or inner identity)]\n    (fn [& args]\n      (reduce\n       #(%2 %1)\n       (apply inner args)\n       more-fns))))", "user": "5531e445e4b09218d5f44f76"}, {"problem": 58, "code": "(letfn [(cmp [f & fs] (if (empty? fs) f (fn [& args] (f (apply (apply cmp fs) args)))))] cmp)", "user": "553e0b70e4b0a04f792994e8"}, {"problem": 58, "code": "(fn [ & fns ]\n    (fn [ & args ]\n      (reduce\n        #(%2 %1)\n        (apply (last fns) args)\n        (rest (reverse fns)))))", "user": "553abb28e4b09218d5f44ffb"}, {"problem": 58, "code": "(fn compose [& fs]\n  (let [fs (reverse fs)]\n  \t(fn [& args]\n    \t(reduce #(%2 %1) \n                (apply (first fs) args) \n                (rest fs)))))", "user": "553dd883e4b0a04f792994e6"}, {"problem": 58, "code": "(fn [& fs]\n  (reduce (fn [f g]\n            #(f (apply g %&))) fs))", "user": "553d51c3e4b0a04f792994df"}, {"problem": 58, "code": "(fn [& fns]\n           (fn [& args]\n             (first (reduce (fn [acc curr-fn]\n                              (vector (apply curr-fn acc))) args (reverse fns)))))", "user": "530b8580e4b02e82168697cc"}, {"problem": 58, "code": "(fn f [a & b] \n  (if b\n    #(a (apply (apply f b) %&)  )\n    a ))", "user": "53b15e6ee4b047364c04448f"}, {"problem": 58, "code": "(fn [& fns]\n   (reduce (fn [composed f] (fn [& x] (f (apply composed x))))\n           \n           (reverse fns)))", "user": "5515b138e4b055c2f668d4ed"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& args]\n    (first (reduce #(list (apply %2 %)) args (reverse fs)))))", "user": "55274467e4b0ffed3738f92b"}, {"problem": 58, "code": "(fn func-comp [& args]\n  (fn [& params] \n    (loop [ff (reverse args)\n           params params\n           apply? true]\n      (if (seq ff)\n        (let [f (first ff)] \n          (recur (next ff) \n                 (if apply? \n                   (apply f params)\n                   (f params)) \n                 false))\n        params))))", "user": "5244a10de4b0d8acf9ed6ab3"}, {"problem": 58, "code": "(fn [& fs]\n    (let [[f1 & fs] (reverse fs)]\n      #(reduce (fn [res f] (f res)) (apply f1 %&) fs)))", "user": "550f1c99e4b06e50f9beb171"}, {"problem": 58, "code": "(fn [& fs]\n  (reduce (fn [f g]\n            #(f (apply g %&)))\n          fs))", "user": "5540cc0ce4b0a04f79299505"}, {"problem": 58, "code": "(fn [& fns]\n    (fn [& arg]\n      (first \n        (reduce #(list (apply %2 %))\n          arg (reverse fns)))))", "user": "51bd255ce4b0df1216cefd94"}, {"problem": 58, "code": "(fn [& fs] (fn a [& xs] (loop [fs (vec fs), res xs] (if (empty? fs) (first res) (recur (pop fs) (list (apply (peek fs) res)))))))", "user": "5507cfd3e4b021ccfedb96ad"}, {"problem": 58, "code": "(fn rec [& fnc]\n\t(let [f (first fnc) r (rest fnc)]\n        (if (empty? r)\n          #(apply f %&)\n          #(f (apply (apply rec r) %&)))))", "user": "5546704be4b0a04f7929953d"}, {"problem": 58, "code": "(fn [& funcs]\n  (fn [& args]\n    ((fn [fs x]\n      (if (empty? fs)\n        (first x)\n        (recur (drop-last fs) (list (apply (last fs) x)))))\n     funcs args)))", "user": "55495318e4b0a04f79299566"}, {"problem": 58, "code": "(fn \n  ( [a b] \n     (fn[x](a(b x)) )  )\n  ([a b c] \n     (fn\n       ([x] (a(b(c x)))) \n       ([x y](a(b(c x y))))  \n       ([x y & z](a(b(apply c x y z))))     )))", "user": "552800d7e4b0ffed3738f93a"}, {"problem": 58, "code": "(fn [& fs] (fn [& xs] (first (reduce (fn [vs f] [(apply f vs)]) xs (reverse fs)))))", "user": "4fcf1755e4b03432b189f40c"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& args]\n    (reduce #(%2 %1) (apply (last fs) args) (rest (reverse fs)))))", "user": "5532a04ee4b09218d5f44f82"}, {"problem": 58, "code": "(fn my-comp\n  [& fns]\n  (if (empty? fns) identity\n    (let [first-fn (last fns)]\n      (fn\n        [& args]\n        (loop [rem-fns (pop (vec fns))\n               result (apply first-fn args)]\n          (if (empty? rem-fns) result\n            (recur (pop rem-fns) ((peek rem-fns) result))))))))", "user": "554d386ee4b0a04f792995b8"}, {"problem": 58, "code": "(letfn [(cmp\n            ([] identity)\n            ([f] f)\n            ([f g]\n             (fn\n               ([] (f (g)))\n               ([x] (f (g x)))\n               ([x y] (f (g x y)))\n               ([x y z] (f (g x y z)))\n               ([x y z & args] (f (apply g x y z args)))))\n            ([f g h]\n             (fn\n               ([] (f (g (h))))\n               ([x] (f (g (h x))))\n               ([x y] (f (g (h x y))))\n\t       ([x y z] (f (g (h x y z))))\n\t       ([x y z & args] (f (g (apply h x y z args)))))))]\n    cmp)", "user": "554b9c3ee4b0a04f79299594"}, {"problem": 58, "code": "(fn mycomp [& fs]\n  (fn [ & xs]\n   ((fn myrecur[funs x]\n    (if (empty? funs) \n      x\n      (myrecur (rest funs) ((first funs) x)))) \n        (reverse (drop-last fs))\n        (apply (last fs) xs)\n    )))", "user": "5510aa92e4b06e50f9beb188"}, {"problem": 58, "code": "(fn my-comp [f g & more]\n    (if more\n      (reduce my-comp f (list* g more))\n      (fn [& args] (f (apply g args)))))", "user": "554b7056e4b0a04f79299583"}, {"problem": 58, "code": "(fn [& fs] (fn [& args] (reduce #(%2 %1) (apply (last fs) args) (reverse (butlast fs)))))", "user": "4fc4eb1ee4b081705acca354"}, {"problem": 58, "code": "(fn [& fcts]\n  (fn [& args]\n    (first (reduce (fn [acc fct] (list (apply fct acc))) args (reverse fcts)))))", "user": "5264383be4b03e8d9a4a70cb"}, {"problem": 58, "code": "(fn foo\n  [f & more]\n  (fn [& args]\n    (if (> (count more) 0)\n      (f (apply (apply foo more) args))\n      (apply f args))))", "user": "54edc818e4b024c67c0cf865"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& args]\n    (reduce (fn [acc elt] (elt acc)) \n            (apply (first (reverse fs)) args)\n            (rest (reverse fs)))))", "user": "5553b924e4b0deb715856e06"}, {"problem": 58, "code": "(fn mycomp [f & fs]\n  (if (empty? fs) f\n    (fn [& args] (f (apply (apply mycomp fs) args)))))", "user": "55337e61e4b09218d5f44f8e"}, {"problem": 58, "code": "(fn [& fns]\n  (fn [& args]\n    (loop [remaining-funcs (butlast fns)\n           result (apply (last fns) args)]\n      (if (empty? remaining-funcs)\n        result\n        (recur\n          (butlast remaining-funcs)\n          ((last remaining-funcs) result))))))", "user": "5486e317e4b0e286459a11c0"}, {"problem": 58, "code": "(fn [& fs]\n    (fn [& args]\n        (loop [res (apply (last fs) args) \n               fs (butlast fs)]\n         \t(if fs\n            \t(recur ((last fs) res) (butlast fs))\n            \tres))))", "user": "54d5343fe4b0a52adc2e200a"}, {"problem": 58, "code": "(fn [& fns]\n  (let [[f & fs] (reverse fns)]\n    (fn [& x] (reduce #(%2 %1) (apply f x) fs))))", "user": "52ce1abfe4b07d0d72b27389"}, {"problem": 58, "code": "(fn C \n  ([f] f)\n  ([f & F]\n   (fn [& a]\n       (f (apply (apply C F) a)))))", "user": "4f42ae16e4b0d7d3c9f3fd09"}, {"problem": 58, "code": "#(reduce (fn [f g] (fn [& a] (g (apply f a)))) (reverse %&))", "user": "543366dde4b0b6b47310fcdf"}, {"problem": 58, "code": "(fn comb [& funcs]\n  (fn [& args]\n    (first\n      (reduce #(vector (apply %2 %1)) args (reverse funcs )))))", "user": "54ecd6f1e4b024c67c0cf858"}, {"problem": 58, "code": "(fn [& fns] (reduce (fn [a b] (fn [& args] (b (apply a args )))) (reverse fns)))", "user": "533ea7e8e4b085b17e897d94"}, {"problem": 58, "code": "(fn [x & xs]\n\n  (fn [& args]\n\n    ((fn step [[f & fs] a]\n\n       (if fs\n\n         (f (step fs a))\n\n         (apply f a)))\n\n     (cons x xs) args)))", "user": "5535e9b8e4b09218d5f44fb3"}, {"problem": 58, "code": "#(reduce (fn [previous current]\n           (fn [& args]\n             (current (apply previous args))))\n         (reverse %&))", "user": "53571732e4b04ce2eb3ed275"}, {"problem": 58, "code": "(fn [& fns]\n  (fn [& args]\n     (first (reduce #(list (apply %2 %1)) args (reverse fns)))))", "user": "4f9b3532e4b0dcca54ed6d13"}, {"problem": 58, "code": "(fn [& fns]\n  (fn [& args]\n    (let [[f & fns] (reverse fns)]\n      (reduce #(%2 %1) (apply f args) fns))))", "user": "54ab1b5ae4b09f271ff37cc2"}, {"problem": 58, "code": "(fn komp [& t]\n   (reduce\n      (fn [f g] #(f (apply g %&)))\n      t))", "user": "549a1fede4b0f3d1d8e70f6a"}, {"problem": 58, "code": "(fn [f & fs]\n  (reduce (fn [result input]\n            (let [g (fn [& x]\n                      (apply input x))]\n              (fn [& z]\n                (result (apply g z)))))\n          (fn [& x] (apply f x)) fs))", "user": "555521a5e4b0deb715856e12"}, {"problem": 58, "code": "(fn mycomp [& funs]\n  (fn [ & args ] (first (reduce #(vector (apply %2 %1)) args (reverse funs)))))", "user": "55536a8ae4b0deb715856e03"}, {"problem": 58, "code": "(fn [& f] (fn [& x] (reduce #(%2 %) (apply (last f) x) (reverse (butlast f)))))", "user": "545ddac3e4b01be26fd74676"}, {"problem": 58, "code": "(fn [& fs] \n  (reduce\n    (fn [f g] \n      #(f (apply g %&))) fs))", "user": "5552b617e4b0deb715856df8"}, {"problem": 58, "code": "(fn [& funcs]\r\n  (fn ([& seq]\r\n    (loop [funcs (reverse funcs)\r\n           seq seq]\r\n      (if (empty? funcs)\r\n        (first seq)\r\n        (let [[head & tail] funcs]\r\n          (recur tail [(apply head seq)])))))))", "user": "555bd27ae4b0b056612e2244"}, {"problem": 58, "code": "(fn [& i] (fn [& o] (first (reduce #(list (apply %2 %1)) o (reverse i)))))", "user": "5562442be4b0c656e3ff17d5"}, {"problem": 58, "code": "(fn [x & xs]\n  (fn [& args]\n    ((fn step [[f & fs] a]\n       (if fs\n         (f (step fs a))\n         (apply f a)))\n     (cons x xs) args)))", "user": "555a5731e4b0deb715856e44"}, {"problem": 58, "code": "(fn [& fn-list-reverse]\n  (let [fn-list   (reverse fn-list-reverse)       ;1) Reverse the list of functions\n        fn1   (first fn-list)]                    ;2) Take first fn to be applied\n    (fn [& args]                                  ;3) Create a fn that loops using...\n      (loop [fns   (rest fn-list)                 ;  ...the rest of the functions and\n             result   (apply fn1 args)]           ;  ...the first computed value\n        (if (empty? fns)                          ;4) If no more functions...\n          result                                  ;5) ...return the final computed result\n          (let [fn2   (first fns)]                ;6) ...else calc next intermediate value\n            (recur (rest fns) (fn2 result)))))))) ;      and start next loop.\n                                                  ;(Oh, I should have used reduce. Lesson learned!)", "user": "4f80db02e4b033992c121bf9"}, {"problem": 58, "code": "(fn  [& fns]\n  (fn [& args]\n    (loop [fs (butlast fns) c (apply (last fns) args)]\n      (if (seq fs)\n        (recur (butlast fs) ((last fs) c))\n        c))))", "user": "516d227fe4b06f078fab252d"}, {"problem": 58, "code": "(fn thiscomp[fun & more] \n\t\t\t(cond (empty? more)\t\t\t(partial fun)\n\t\t\t \t  (nil? (second more))\t(fn [& args] (fun (apply (first more) args)))\n\t\t\t\t  :else \t\t\t\t(apply thiscomp \n\t\t\t\t\t\t\t\t\t\t\t(concat [fun]\n\t\t\t\t\t\t\t\t\t\t\t\t(drop-last 2 more)\n\t\t\t\t\t\t\t\t\t\t\t\t[(apply thiscomp (take-last 2 more))]))))", "user": "5564cad5e4b0c656e3ff180f"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& xs]\n    (reduce #(%2 %1) (apply (last fs) xs) (rest (reverse fs)))))", "user": "54c5cc17e4b045293a27f624"}, {"problem": 58, "code": "(fn comp* [& args] (\n                    fn [& x] (first (reduce #(list (apply %2 %1)) x (reverse args)))\n  ))", "user": "55645592e4b0c656e3ff1802"}, {"problem": 58, "code": "(fn [& fs]\n  (let [reversed-fs (reverse fs)]\n    (fn [& xs]\n      (reduce #(%2 %1) (apply (first reversed-fs) xs) (rest reversed-fs)))))", "user": "50cf94bde4b0abc485cb9bb2"}, {"problem": 58, "code": "(fn [& f] \n  (fn [& args] \n    (loop [[f1 & fs] (reverse f) r args]\n      (if (nil? f1)\n        (first r)\n        (recur fs [(apply f1 r)])))))", "user": "556159fae4b0c656e3ff17c7"}, {"problem": 58, "code": "(fn [& funcs]\n  (fn [& args]\n    (first\n      (reduce #(vector (apply %2 %1)) args (reverse funcs)))))", "user": "52ba2639e4b07a9af57922cb"}, {"problem": 58, "code": "(fn [& fns]\n  (fn [& args]\n    (loop [funcs (reverse fns)\n           result args]\n      (if (seq funcs)\n        (recur (rest funcs) (list (apply (first funcs) result)))\n        (first result)\n     )\n    )\n  )\n  )", "user": "4e28ddd1535deb9a81d77efd"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& args]\n    (let [fs (reverse fs)]\n    (reduce (fn [result f] (f result))\n            (apply (first fs) args)\n            (rest fs)))))", "user": "504e71cbe4b0f6ff3350c4b3"}, {"problem": 58, "code": "(fn [& f]\n    (let [[s & r] (reverse f)]\n      (fn [& a]\n        (reduce #(%2 %) (apply s a) r))))", "user": "5499e23de4b03163384f4706"}, {"problem": 58, "code": "(fn new-comp\n  [& fs]\n  (fn [& args]\n    (if (> (count fs) 1)\n      ((apply new-comp (butlast fs)) (apply (last fs) args))\n      (apply (last fs) args))))", "user": "550d9452e4b06e50f9beb15d"}, {"problem": 58, "code": "(fn [& functions]\n  \n  (fn \n    [& args]\n    \n    ((fn [[x]] x) (reduce (fn [args func] [(apply func args)]) args (reverse functions)))\n    \n    )\n \n )", "user": "55625903e4b0c656e3ff17d7"}, {"problem": 58, "code": "(fn [& fns]\n     (fn [& args]\n       (let [params (apply (last fns) args)]\n         (reduce #(%2 %) params (rest (reverse fns))))))", "user": "51c8f1d8e4b07ef393169e5d"}, {"problem": 58, "code": "(fn compose [& funcs]\n  (fn [& args]\n    (first (reduce (fn [memo fun] (list (apply fun memo))) args (reverse funcs)))))", "user": "5566434ee4b0c656e3ff182f"}, {"problem": 58, "code": "(fn f [& fns]\n  (fn [& args]\n    (reduce (fn [x f] (f x)) (apply (last fns) args) (reverse (butlast  fns)))))", "user": "5283a919e4b0239c8a67adbe"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& xs]\n    (reduce #(%2 %1) (apply (last fs) xs) (rest (reverse fs)))))", "user": "554edb85e4b00713264bd99a"}, {"problem": 58, "code": "(fn my-comp [& funcs]\n  (fn [& params]\n    ((fn inner-my-comp [funcs params]\n    (if (= (count funcs) 1)\n      (apply (first funcs) params)\n      ((first funcs) (inner-my-comp (rest funcs) params)))) funcs params)))", "user": "556405e5e4b0c656e3ff17fb"}, {"problem": 58, "code": "(fn [f & fs]\n  (reduce\n   (fn [rf f] (fn [& x] (rf (apply f x ))))\n   f fs))", "user": "555f3bfde4b0a2eb076a39c1"}, {"problem": 58, "code": "(fn cmp [& args]\n\t(fn [& nargs]\n\t\t(reduce \n\t\t\t(fn [a b ] ( b a))\n\t\t\t(apply (last args) nargs)\n\t\t\t(reverse (drop-last args))\n\t\t\t)\n\t\t)\n\t)", "user": "5545477fe4b0a04f79299531"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& args]\n      (reduce #(%2 %1) (apply (last fs) args) (rest (reverse fs)))))", "user": "555ac933e4b0deb715856e49"}, {"problem": 58, "code": "(fn [& fns] \n  (fn [& args] \n    (first \n      (reduce #(vector (apply %2 %1)) args (reverse fns)))))", "user": "5550bcece4b00713264bd9ae"}, {"problem": 58, "code": "(fn [& ops] \n  (fn [& args] \n    (reduce #(%2 %1) \n            (apply (last ops) args) \n            (rest (reverse ops)))))", "user": "52e851bfe4b09f7907dd149a"}, {"problem": 58, "code": ";function is the first-class citizen of clojure\n(fn myComp\n  ([f] f)\n  ([f1 f2]\n   (fn[& args]\n     (f1 (apply f2 args))))\n  ([f1 f2 & fs]\n   (apply myComp (myComp f1 f2) fs)))", "user": "556c70dae4b09a3098a524fd"}, {"problem": 58, "code": "(fn [& fns]\n  (let [f-fn (last fns)\n        fns (reverse (drop-last 1 fns))]\n    (fn [& args]\n      (reduce #(%2 %1) (apply f-fn args) fns))))", "user": "540a4f20e4b0addc1aec66ef"}, {"problem": 58, "code": "(fn [& fs] \n  (fn [& args] \n      (reduce #(%2 %1) (apply (last fs) args) (next (reverse fs)))))", "user": "554b8572e4b0a04f79299589"}, {"problem": 58, "code": "(fn compo [& fs]\n  (reduce (fn [f g]\n            #(f (apply g %&))) fs))", "user": "54c3747de4b045293a27f60e"}, {"problem": 58, "code": "(fn [& fs]\n  (let [fs (reverse fs)]\n    (fn [& args]\n      (loop [ret (apply (first fs) args)\n             fs  (next fs)]\n        (if fs\n          (recur ((first fs) ret) (next fs))\n          ret)))))", "user": "55586905e4b0deb715856e2b"}, {"problem": 58, "code": "(fn func_comp\n  [& operators] (fn [& parameters] (reduce #(%2 %1) (apply (last operators) parameters) (rest (reverse operators)))))", "user": "556c94afe4b09a3098a524fe"}, {"problem": 58, "code": "(fn [& fns]\n  (fn [& args]\n    (let [[head & tail]\n          (reverse fns)]\n      (reduce #(%2 %1)\n              (apply head args)\n              tail))))", "user": "54d9f7f1e4b024c67c0cf751"}, {"problem": 58, "code": "(fn __ [f & fs]\n  (if (empty? fs)\n    f\n    (fn [& args]\n      (f (apply (apply __ fs) args)))))", "user": "55702081e4b09a3098a52529"}, {"problem": 58, "code": "(fn [& fns]\n    (fn [& args]\n      (let [[firstf & restf] (reverse fns)\n            firstres (apply firstf args)]\n        (reduce\n         #(%2 %1)\n         firstres\n         restf))))", "user": "554a75c9e4b0a04f79299575"}, {"problem": 58, "code": "(fn number58 [& fns]\n  (fn [& xs]\n    (first (reduce #(vector (apply %2 %)) xs (reverse fns)))))", "user": "54074fc5e4b0addc1aec66b6"}, {"problem": 58, "code": "(fn ([f g] #(f(g %))) ([f g h] #(f(g(apply h %&)))))", "user": "556f35fee4b09a3098a5251a"}, {"problem": 58, "code": "(fn compp [f & fns]\n  (fn [& xs]\n    (if (seq fns)\n      (f (apply (apply compp fns) xs))\n      (apply f xs))))", "user": "52470d42e4b05ef8e38e6350"}, {"problem": 58, "code": "(fn [& fs] (reduce #(fn [& xs] (% (apply %2 xs))) fs))", "user": "5579bc24e4b05c286339e098"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& args]\n    (reduce #(%2 %1)\n            (apply (last fs) args)\n            (rest (reverse fs)))))", "user": "5501a1e1e4b07d26eda61d75"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& args]\n    ((fn yo [fs args]\n       (let [g (first fs)\n             gs (next fs)]\n         (if gs\n           (g (yo gs args))\n           (apply g args))))\n      fs args)))", "user": "557a1e18e4b05c286339e09e"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& args]\n    (reduce (fn [x f] (f x))\n            (apply (last fs) args)\n            (rest (reverse fs)))))", "user": "552a793ee4b0ffed3738f955"}, {"problem": 58, "code": "(fn compp [f & other-fs]\n  (if (empty? other-fs) f\n    (fn [& args]\n      (f (apply (apply compp other-fs) args)))))", "user": "53065acbe4b02e8216869792"}, {"problem": 58, "code": "(fn [& funcs] (fn [& args]\n             (let [[f & fs] (reverse funcs)]\n               (reduce #(%2 %1) (apply f args) fs))))", "user": "52c5c1c8e4b0c2d177d620fc"}, {"problem": 58, "code": "(fn f [& funcs]\n  (fn [& args]\n    (let [[f & funcs] (reverse funcs)]\n      (reduce #(%2 %1) (apply f args) funcs))))", "user": "51a3cc45e4b0e77c4ca60bfb"}, {"problem": 58, "code": "(fn myComp2\n  ([] identity)\n  ([f] f)\n  ([f & n] (partial (fn [f g & x] (f (apply g x))) f (apply myComp2 n))))", "user": "557e9d17e4b05c286339e0d8"}, {"problem": 58, "code": "(fn my-compose\n  [& fns]\n  (fn\n    [& args]\n    (reduce (fn [f1 f2] (f2 f1)) (apply (last fns) args) (reverse (butlast fns)))))", "user": "506f0968e4b09350ab4199f5"}, {"problem": 58, "code": "(fn sol [& fs] (fn [& args] (first (reduce (fn [acc f] (list (apply f acc))) args (reverse fs)))))", "user": "54857657e4b0e286459a11ac"}, {"problem": 58, "code": "(fn [& fs] (fn [& x] (first (reduce #(vector (apply %2 %1)) x (reverse fs)))))", "user": "5581747fe4b05c286339e0fa"}, {"problem": 58, "code": "(fn [& fns]\n  (fn [& xs]\n    (loop [output xs lst (reverse fns)]\n      (if (empty? lst) (first output)\n        (recur [(apply (first lst) output)] (rest lst))))))", "user": "558378dce4b05c286339e115"}, {"problem": 58, "code": "(fn [& fns]\n  (fn [& args]\n    (first (reduce #(list (apply %2 %1)) args (reverse fns)))))", "user": "55842c7ee4b05c286339e11d"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& xs]\n    (loop [fs fs [y & ys] xs]\n      (if (empty? fs)\n        (if (nil? ys)\n          y\n          (concat (list y) ys))\n        (recur (butlast fs)\n               (if (nil? ys)\n                 (list ((last fs) y))\n                 (list (apply (last fs) (concat (list y) ys)))))))))", "user": "54cad59ee4b057c6fda3a26e"}, {"problem": 58, "code": "(fn [& fus]\n  (fn [& args]\n    (loop [s true fu fus r args]\n      (if (empty? fu)\n        r\n        (recur false (butlast fu) (if s (apply (last fu) r) ((last fu) r)))))))", "user": "52979551e4b02ebb4ef75043"}, {"problem": 58, "code": "(fn f58 [ & fs]\n  (letfn \n      [(f2 [ fs args]\n         (if (empty? fs)\n           args\n           (f2 (butlast fs) (vector (apply (last fs) args)))))]\n    (fn cm [& args]\n      (last (f2 fs args))\n      )))", "user": "51f81925e4b09be9c177e526"}, {"problem": 58, "code": "(fn [& funcs]\n  (fn [& args] (first (reduce #(list (apply %2 %)) args (reverse funcs)))))", "user": "52a4879ce4b0c58976d9abdb"}, {"problem": 58, "code": "(fn [& fs]\n   (fn [& args]\n     (first (reduce #(list (apply %2 %1)) args (reverse fs)))))", "user": "540c6a8ae4b0addc1aec6702"}, {"problem": 58, "code": "(fn compf [& fs]\n    (let [fs (reverse fs)]      \n     ( fn [& args]\n      (reduce #(%2 %1) (apply (first fs) args) (rest fs)))))", "user": "55896a0ce4b059ccff29b204"}, {"problem": 58, "code": "(fn [& fns]\n    (fn [& args]\n      (first (reduce (fn [r f]\n                 (list (apply f r))) args (reverse fns)))))", "user": "55895eade4b059ccff29b202"}, {"problem": 58, "code": "(fn comb [& funcs]\n  (fn [& args]\n    (first\n      (reduce #(vector (apply %2 %1)) args (reverse funcs )))))", "user": "558a81fbe4b027778923761c"}, {"problem": 58, "code": "(fn [& fargs]\n    (fn [& args]\n      (let [args2  (vec args)\n            fargs2 (reverse fargs)]\n        (reduce\n          (fn [cur-args2 cur-farg2]\n            (if (vector? cur-args2)\n              (apply cur-farg2 cur-args2)\n              (cur-farg2 cur-args2)))\n          args2\n          fargs2)\n        )\n      )\n    )", "user": "5535e822e4b09218d5f44fb2"}, {"problem": 58, "code": "(fn [& funcs] (fn [& args] (first (reduce #(list (apply %2 %1)) args (reverse funcs)))))", "user": "558b50d5e4b027778923762b"}, {"problem": 58, "code": "(fn [& args] (fn [& c] (first (reduce \n                      (fn [r l] (vector (apply l r))) \n                      c\n                      (reverse args)))))", "user": "5587d8b3e4b059ccff29b1e8"}, {"problem": 58, "code": "#_(fn comp->\n  [& comp-funcs]\n  (let [rev-funcs (reverse comp-funcs)]\n      (fn ret-closure [& closure-args]\n        (let [[rightmost-func & leftmost-funcs] rev-funcs\n              init-result (apply rightmost-func closure-args)]\n            (reduce (fn [acc each-fn] (each-fn acc)) init-result leftmost-funcs)))))\n\n;; another version using low-level recursion might look like:\n(fn comp->\n  [& comp-funcs]\n    (let [rev-funcs (reverse comp-funcs)]\n      (fn closure-recur [& args]\n        (loop [[head-func & tail-funcs] rev-funcs\n               result (apply head-func args)]\n            (if (nil? tail-funcs)\n              result\n              (recur tail-funcs ((first tail-funcs) result)))))))", "user": "5553b729e4b0deb715856e05"}, {"problem": 58, "code": "(fn [& fnlist]\n  (fn [& args]\n    ((fn doit [fnlist args]\n      (cond\n        (= 1 (count fnlist)) (apply (first fnlist) args)\n        :else ((first fnlist) (doit (rest fnlist) args)))) fnlist args)))", "user": "558df2ebe4b0277789237649"}, {"problem": 58, "code": "(fn [& f]\n  (fn [& p]\n    (first (reduce #(list (apply %2 %)) p (reverse f)))))", "user": "559279b7e4b0604b3f94d58c"}, {"problem": 58, "code": "(fn [& fs]\n  (reduce \n   (fn [comb f] \n     (fn [& any] (f (apply comb any))))\n  (reverse fs)))\n\n;  (rest (reverse arg))", "user": "558ea13be4b0277789237654"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& args]\n    (reduce #(%2 %1) (apply (last fs) args) (next (reverse fs)))))", "user": "5504dd64e4b086ebe8a79c83"}, {"problem": 58, "code": "(fn [& funcs]\n  (fn [& args] (first (reduce #(list (apply %2 %)) args (reverse funcs)))))", "user": "5598a15ae4b031d6649c9b9d"}, {"problem": 58, "code": "(fn bob ([f] (fn [& args] (apply f args)))\n    ([f g] (fn [& args] (f (apply g args))))\n    ([f g h] (fn [& args] (f (g (apply h args))))))", "user": "55934bebe4b0c79f6e1db93b"}, {"problem": 58, "code": "(fn foo [& funcs]\n  (fn [& args]\n    (loop [f (reverse funcs) r args]\n      (if (empty? f) (first r)\n        (recur (rest f) (list (apply (first f) r)))))))", "user": "5590e55de4b0277789237676"}, {"problem": 58, "code": "(fn me\n  [& ops]\n  \n  (let [returnf \n   \t\t\n        (fn returnFn [f1 f2]\n\n\t\t\t\t(fn [& args]\n\t\t\t\t\t(f1 (apply f2 args))\n\t\t\t\t)\n\n\t\t)\n   \t\t]\n   \n    \t(reduce returnf ops)\n    )\n  \n  \n  )", "user": "55897fe2e4b059ccff29b205"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& args]\n    (first\n      (reduce \n        (fn [acc f] [(apply f acc)])\n        args\n        (reverse fs)))))", "user": "5596a324e4b04c1e5c31d757"}, {"problem": 58, "code": "(fn [& fs]\n  (let [rev (reverse fs)]\n    (fn [& args]\n      (loop [ev (apply (first rev) args)\n             rs (rest rev)]\n        (if-let [f (first rs)]\n          (recur (f ev) (rest rs))\n          ev)))))", "user": "55995fa7e4b031d6649c9ba9"}, {"problem": 58, "code": "(fn [& F]\n  (reduce #(fn [& g] (%1 (apply %2 g))) \n          #(-> %)\n          F))", "user": "559c13c5e4b066d22e731f61"}, {"problem": 58, "code": "(fn mcomp\n  [& funs]\n  (let [fs (reverse (list* funs))]\n    (fn\n      [& args]\n      (loop [result (apply (first fs) args)\n             fs (next fs) ]\n        (if fs\n          (recur ((first fs) result) (next fs))\n          result\n          )))))", "user": "51d55598e4b01da06753aa8e"}, {"problem": 58, "code": "(fn [& funcs]\n  (fn [& args]\n    (first\n      (reduce #(vector (apply %2 %1)) args (reverse funcs)))))", "user": "52b89d55e4b07a9af57922b3"}, {"problem": 58, "code": "(fn my-comp [& fns]\n  (fn [& args]\n    (reduce (fn [result next]\n              (next result)) (apply (last fns) args) (rest (reverse fns)))))", "user": "54d0cedde4b0e8a36923e5d2"}, {"problem": 58, "code": "(fn [& fns] (reduce #(fn [& a] (%1 (apply %2 a))) fns))", "user": "559ff3b1e4b0acc240e314ed"}, {"problem": 58, "code": "(fn [& all-fns]\n  (reduce\n   (fn [acc-fn curr-fn]\n     (fn [& args]\n       (acc-fn (apply curr-fn args))))\n   identity\n   all-fns))", "user": "5587ddd9e4b059ccff29b1ea"}, {"problem": 58, "code": "(fn [& fcns]\n    (fn p58 [& coll]\n      (let [a (atom [(apply (nth (reverse fcns) 0) coll)])]\n        (dotimes [i (count fcns)]\n          (if (> i 0)\n            (swap! a conj ((nth (reverse fcns) i) (last @a)))\n            )\n          )\n        (last @a))\n    ))", "user": "5400e918e4b0de5c41848619"}, {"problem": 58, "code": "(fn mycomp [& fns] \n  (fn [& args]  \n    (let [fnr (reverse fns)]\n    (loop [ret (apply (first fnr) args) fs (next fnr)]\n      (if fs\n        (recur ((first fs) ret) (next fs))\n        ret\n        )))\n      ))", "user": "5592bf9fe4b0c79f6e1db933"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& args]\n    (reduce #(%2 %1) (apply (last fs) args) (rest (reverse fs)))))", "user": "559b2ad1e4b066d22e731f4e"}, {"problem": 58, "code": "(fn m [& a]\n  (if (empty? (rest a))\n    (first a)\n    (fn [& b]\n      ((first a)\n       (apply (apply m (rest a))\n              b)))))", "user": "559d33b3e4b0ec2b359424d9"}, {"problem": 58, "code": "(fn [& fs] (reduce (fn [f g] #(f (apply g %&))) fs))", "user": "537e104ce4b06839e8705e9a"}, {"problem": 58, "code": "(fn compose [& funcs]\n  (fn composed [& args]\n    (first (reduce (fn [args f] [(apply f args)])\n                   args \n                   (reverse funcs)))))", "user": "55a1d7f6e4b0acc240e31519"}, {"problem": 58, "code": "(fn [& fns]\n     (fn [& args]\n       (let [[f & fns] (reverse fns)]\n         (reduce #(%2 %1) (apply f args) fns))))", "user": "55a0e139e4b0acc240e31504"}, {"problem": 58, "code": "(fn [& fns]\n  (let [[f & r] (reverse fns)]\n    (fn [& data] \n      (reduce \n       (fn [args f]\n         (f args))\n       (apply f data)\n       r))))", "user": "4fc5eb7fe4b0ee37620e1803"}, {"problem": 58, "code": "(fn ccomp [f & gs] \n  (fn [& args] \n    (if (empty? gs) \n      (apply f args) \n      (f (apply (apply ccomp gs) args)))))", "user": "55306f9de4b076ab5578f814"}, {"problem": 58, "code": "; Let me explain what is going on here\n; First we return an inner anonymous function that simply requires args\n; Then it wraps a closure of another function that knows all the functions initially passed in\n; (mighthave been able to use partial here?)\n; This 'step' function iteratively takes from the head and applies that function to the step of the remainder\n; x y z [1 2] -> x ( y( z([1 2])))\n(fn compose [& fns]\n  (fn ! [ & args]\n    ((fn step [fns args]\n      (cond\n       (= 1 (count fns)) (apply (first fns) args)\n       :else ((first fns) (step (rest fns) args)))) fns args)))", "user": "559f06bae4b0acc240e314e6"}, {"problem": 58, "code": "(fn [& fs] (fn [& args] (->> (reduce (fn [acc next] (list (apply next acc))) args (reverse fs)) (first))))", "user": "51bfc1f0e4b0e49ef9037dd4"}, {"problem": 58, "code": "(fn [& fs]\n  (reduce (fn [f g]\n            #(f (apply g %&))) fs))", "user": "5520d6b8e4b08d5046aa8a65"}, {"problem": 58, "code": "#(fn [& args]\n   (let [[f & fs] (reverse %&)]\n     (reduce (fn [x f] (f x)) (apply f args) fs)))", "user": "55a12668e4b0acc240e3150b"}, {"problem": 58, "code": "(fn my-juxt\n  [& all-funs]\n  (reduce (fn [acc-fn curr-fn]\n            (fn [& coll]\n              (curr-fn (apply acc-fn coll)))) (reverse all-funs)))", "user": "5594e0e3e4b0c79f6e1db95b"}, {"problem": 58, "code": "(fn [& f] (fn [& x] (reduce #(%2 %1) (apply (last f) x) (rest (reverse f)))))", "user": "55205564e4b08d5046aa8a60"}, {"problem": 58, "code": "(fn [& fns]\n  (fn [& args]\n    (first (reduce #(vector (apply %2 %1)) args (reverse fns)))))", "user": "523b4e91e4b07becd5be21ef"}, {"problem": 58, "code": "(fn \n        ([& fs]\n                (let [fs (reverse (list* fs))]\n                        (fn [& args]\n                                (loop [ret (apply (first fs) args) fs (next fs)]\n                                        (if fs\n                                                (recur ((first fs) ret) (next fs))\n                                                ret))))))", "user": "55aa1637e4b0988bba2ad949"}, {"problem": 58, "code": "(fn compos [& fns]\n  (if (= 1 (count fns))\n    #(apply (last fns) %&)\n  \t#((apply compos (take (dec (count fns)) fns)) (apply (last fns) %&))))", "user": "55a74d46e4b09e57187da2a3"}, {"problem": 58, "code": "(fn \n  ([f1 f2] (fn [x] (f1 (f2 x))))\n  ([f1 f2 f3] (fn [& args] (f1 (f2 (apply f3 args))))) \n  \n  )", "user": "54fc75fce4b07d26eda61d2a"}, {"problem": 58, "code": "(fn [& fs] \n(fn [& xs] \n    (first\n        (reduce \n            (fn [x f] [(apply f x)]) \n            xs \n            (reverse fs)))))", "user": "52dbd423e4b09f7907dd13c6"}, {"problem": 58, "code": "(fn [& funs]\n  (fn [& args]\n    (reduce #(%2 %1) (apply (last funs) args) (reverse (butlast funs)))))", "user": "55ac07afe4b03311e7b7328f"}, {"problem": 58, "code": "#(fn [& args]\n    (loop [procs (butlast %&) arg (apply (last %&) args)]\n      (if (empty? procs)\n        arg\n        (recur (butlast procs) ((last procs) arg)))))", "user": "55afc197e4b002ce9d5cbc18"}, {"problem": 58, "code": "(fn [& fs] (reduce (fn [f g] #(f (apply g %&))) fs))", "user": "53cb5559e4b00fb29b2212d2"}, {"problem": 58, "code": "(fn [& cf] (fn [& cc] (loop [f cf r cc]\n    (if (empty? f) (first r)\n      (recur (drop-last f) [(apply (last f) r)])\n   ))))", "user": "55adf4d7e4b03311e7b732af"}, {"problem": 58, "code": "(fn reduceKunmetiF [& z] (reduce (fn [x  y] (fn [ & argj]   (x (apply y argj)) )) z))", "user": "5576e78de4b05c286339e075"}, {"problem": 58, "code": "(fn comp* [& fns]\n  (fn [& args]\n    (let [r (reverse fns)]\n      (->\n       (reduce (fn [a f] (vector (apply f a)))\n               args\n               r)\n       (get 0)))))", "user": "5392500ae4b0b51d73faaeaf"}, {"problem": 58, "code": "(fn comp2\n  ([f] f)\n  ([f g] (fn [& args] (f (apply g args))))\n  ([f g & fs]\n   (->>\n    (reduce #(comp2 %2 %) (reverse fs))\n    (comp2 g)\n    (comp2 f))))", "user": "55aa7c5ce4b0988bba2ad94d"}, {"problem": 58, "code": "(fn [& x] \n  (fn [& y]\n    (let [y-seq (and (sequential? (first y)) (empty? (rest y)))\n          y (if y-seq (first y) (apply (last x) y))\n          x (if y-seq x (butlast x))] \n        (loop [x x y y]\n          (cond \n           (empty? x) y\n           :else (recur (butlast x) ((last x) y))))\n      )))", "user": "55b527cbe4b01b9910ae2985"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& args]\n    (let [[f & fs] (reverse fs)]\n      (reduce #(%2 %) (apply f args) fs))))", "user": "50ec409ce4b04edc33777045"}, {"problem": 58, "code": "(fn [& fns]\n    (fn [& args] (first (reduce #(do [ (apply %2 %1) ]) args (reverse fns)) )))", "user": "55aa5f73e4b0988bba2ad94b"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& args]\n    (let [fs' (reverse fs)]\n      (reduce\n       #(%2 %1)\n       (apply (first fs') args)\n       (rest fs')))))", "user": "5576f299e4b05c286339e077"}, {"problem": 58, "code": "(fn [& ops]\n  \t(fn [& args]\n        (let [ops (reverse ops) result (apply (first ops) args)]\n       \t\t(loop [ops (rest ops) result result]\n\t\t\t\t(if (empty? ops) result\n       \t\t\t\t(recur (rest ops) ((first ops) result)))))))", "user": "559b55d6e4b066d22e731f54"}, {"problem": 58, "code": ";; This is cheating\n(fn \n  ([g]\n   (fn [& arg]\n     (apply g arg)))\n  ([f g]\n   (fn [& arg]\n     (f (apply g arg))))\n  ([e f g]\n   (fn [& arg]\n     (e (f (apply g arg))))))", "user": "5351fca5e4b084c2834f4aec"}, {"problem": 58, "code": "(fn[& a]\n  (fn[& b]\n    (loop [fs (reverse a)\n           v b]\n      (if (empty? fs)\n        (apply identity v)\n        (recur (rest fs) (conj [] (apply (first fs) v)))))))", "user": "5596af34e4b04c1e5c31d758"}, {"problem": 58, "code": "(fn [& fs]\n    (fn [& [h & _ :as vs]]\n      (if (<= (count vs) 1)\n        (let []\n          (reduce #(%2 %1) h (reverse fs)))\n        (let [[fh & ft] (reverse fs)\n              i (apply fh vs)]\n          (reduce #(%2 %1) i ft)\n          )\n        )\n      )\n    )", "user": "559a9a3de4b066d22e731f45"}, {"problem": 58, "code": "(fn [& fs]\n\t(fn [& args]\n\t\t(reduce #(%2 %1) \n\t\t\t    (apply (last fs) args) \n\t\t\t    (reverse (butlast fs)))))", "user": "55b8c339e4b01b9910ae29b9"}, {"problem": 58, "code": "(fn [& fns]\n  (let [r (reverse fns)\n        ffn (first r)\n        restfn (rest r)]\n    (fn [& args]\n      (reduce\n       #(%2 %1)\n       (apply ffn args)\n       restfn))))", "user": "55647a31e4b0c656e3ff1808"}, {"problem": 58, "code": "(fn [& fs]\n    (fn [& v]\n      (loop [result v\n             fs (reverse fs)]\n        (if (empty? fs)\n          (first result)\n          (recur (list (apply (first fs) result))\n                 (rest fs))))))", "user": "55b54ecbe4b01b9910ae2987"}, {"problem": 58, "code": "(fn [& f]\n  (reduce \n   (fn [a x]\n     (fn [& y] (a (apply x y)))) f))", "user": "55be39f9e4b01b9910ae2a06"}, {"problem": 58, "code": "(fn [& fs] (reduce (fn [f g] #(f (apply g %&))) fs))", "user": "53df11c3e4b0d874e779ae3d"}, {"problem": 58, "code": "(fn [& f] (fn [& e] (first (reduce #(list (apply %2 %)) e (reverse f)))))", "user": "4faf97d8e4b081705acca258"}, {"problem": 58, "code": "(fn [& fns]\n  (let [reverse-fns (reverse fns)]\n    (fn [& args] \n      \"we need to apply args to the first function, becasue args holds a collection of the said argument\n      e.g. in the first example it args = ([1 2 3 4])\"\n      (reduce #(%2 %1) (apply (first reverse-fns) args) (rest reverse-fns)))))", "user": "558bdcefe4b0277789237633"}, {"problem": 58, "code": "(fn compose [& fns]\n  (reduce (fn [a b] #(a (apply b %&))) (first fns) (rest fns)))", "user": "55c0afa5e4b01b9910ae2a27"}, {"problem": 58, "code": "(fn my-comp\n  ([] identity)\n  ([f] f)\n  ([f & fs]\n   (fn [& args]\n     (f (apply (apply my-comp fs) args)))))", "user": "55c4e48be4b0e31453f649a7"}, {"problem": 58, "code": "(fn my-comp\n  [& fns]\n  (if (empty? fns) identity\n      (let [f (last fns)\n            xf (butlast fns)]\n        (fn [& args] ((apply my-comp xf) (apply f args)))\n        )))", "user": "54965534e4b0b312c081ff65"}, {"problem": 58, "code": "(fn [& a]\n  (fn f\n    [& x](loop [c (reverse a) r x]\n           (print c r)\n           (if (empty? c)\n             (first r)\n             (recur (rest c) (list (apply (first c) r)))))))", "user": "555883c5e4b0deb715856e2d"}, {"problem": 58, "code": "(fn f\n  ([a] a)\n  ([a & r] (fn [& c] (a (apply (apply f r) c)))))\n\n;#(fn [& ps] (reduce (fn [z f] (f z)) (apply (last %&) ps) (rest (reverse %&)) ))", "user": "54e1939ce4b024c67c0cf7c5"}, {"problem": 58, "code": "(fn [& args] \n  (reduce (fn [acc f] #(acc (apply f %&))) args))", "user": "5394aa77e4b0b51d73faaecd"}, {"problem": 58, "code": "(fn [& fns]\n  (let [fs (reverse fns)]\n    (fn [& args]\n      (loop [ret (apply (first fs) args)\n             fs (next fs)]\n        (if fs\n          (recur ((first fs) ret) (next fs))\n          ret)))))", "user": "54addba9e4b09f271ff37ce9"}, {"problem": 58, "code": "(fn [& fns] (fn compose [& args] (letfn [(comp-builder [fs] (if (= 1 (count fs)) (apply (first fs) args) ((first fs) (comp-builder (rest fs)))))] (comp-builder fns))))", "user": "55c10409e4b01b9910ae2a2c"}, {"problem": 58, "code": "(fn my-comp\n  ([f1] (fn [& xs] (apply f1 xs)))\n  ([f1 f2] (fn [& xs] (f1 (apply f2 xs))))\n  ([f1 f2 f3] (fn [& xs] (f1 (f2 (apply f3 xs))))))", "user": "549c6792e4b0f3d1d8e70f8b"}, {"problem": 58, "code": "(fn [& fs]\n  (let [[f & fs] (reverse fs)]\n    (fn [& xs]\n      (reduce #(%2 %) (apply f xs) fs))))", "user": "5416b4a2e4b01498b1a71a01"}, {"problem": 58, "code": "(fn var-comp\n  [& fns]\n  ((fn my-comp\n       ([f-lst g]\n       (if (empty? f-lst)\n           g\n           (recur (drop-last f-lst) ((fn comp-2\n                                         [f g]\n                                         (fn [& args] (f (apply g args)))) (last f-lst) g))))) \n                                       (drop-last fns) (last fns)))", "user": "55acd080e4b03311e7b73298"}, {"problem": 58, "code": "(fn compa ([a]\n  (fn [& b] (apply a b)))\n  ([c & rest]\n   (fn [& a] ((apply compa (butlast (cons c rest))) (apply (last rest) a)))))", "user": "55af7e21e4b03311e7b732cc"}, {"problem": 58, "code": "(fn [& fns]\n    (fn [& args]\n      (reduce #(%2 %1)\n              (apply (last fns) args)\n              (reverse (butlast fns)))))", "user": "55c652dde4b0e31453f649bd"}, {"problem": 58, "code": "(fn [& funcs]\n  (let [fs (reverse funcs)]\n    (fn [& args]\n      (loop [ret (apply (first fs) args)\n             next-fs (next fs)]\n        (if next-fs\n           (recur ((first next-fs) ret) (next next-fs))\n           ret)))))", "user": "549dfe40e4b0f3d1d8e70f9a"}, {"problem": 58, "code": "(fn [& fs]\n    (let [fst-fn (last fs)\n          other-fns (drop-last fs)]\n      (fn [& n]\n        (letfn [(iter [others result]\n                  (if (empty? others)\n                    result\n                    (iter (drop-last others) ((last others) result))))]\n          (iter other-fns (apply fst-fn n))))))", "user": "54b817eee4b0ed20f4ff6e93"}, {"problem": 58, "code": "(fn outer [f & fs]\n          (if fs\n            (fn [& x] (f (apply (apply outer fs) x)))\n            (fn [& xs] (apply f xs))))", "user": "554b8b78e4b0a04f7929958d"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& x]\n    (let [[f & fns] (reverse fs)]\n       (reduce #(%2 %1) (apply f x) fns))))", "user": "550b5c10e4b06e50f9beb143"}, {"problem": 58, "code": "(fn compose [& fs]\n  (if (empty? fs)\n    identity\n    (fn [& args]\n      (let [[f & fs] fs]\n      (if (empty? fs)\n        (apply f args)\n        (f (apply (apply compose fs) args)))))))", "user": "559454f2e4b0c79f6e1db952"}, {"problem": 58, "code": "(fn f\n  ([a] a)\n  ([a & r] (fn [& c] (a (apply (apply f r) c)))))", "user": "55c423e1e4b0e31453f64994"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& args]\n    (reduce #(%2 %1) (apply (last fs) args) (rest (reverse fs)))))", "user": "4f85a75ce4b033992c121c48"}, {"problem": 58, "code": "(fn\n               ([f g]\n                (fn [& x] (f (apply g x))))\n               ([f g h]\n                (fn [& x] (f (g (apply h x))))))", "user": "55a372f1e4b0acc240e31537"}, {"problem": 58, "code": "(fn [& fs]\n  (reduce (fn [f g] #(f (apply g %&)))\n          fs))", "user": "55d0e76ae4b0e31453f64a40"}, {"problem": 58, "code": "(fn [ & args]\n  (let [[first & rest] (reverse args)]\n    (fn [ & ags]\n      (reduce #(%2 %) (apply first ags) rest))))", "user": "55a0d79fe4b0acc240e31502"}, {"problem": 58, "code": "(fn [& f]\n    (let [[a & r] (reverse f)]\n      (fn [& x]\n        (reduce #(%2 %) (apply a x) r))))", "user": "505106fee4b05ab4c7e07d38"}, {"problem": 58, "code": "(fn [& fs]\n  (let [fs (reverse fs)]\n    (fn [& args]\n      (loop [ret (apply (first fs) args) \n             fs (next fs)]\n        (if fs\n          (recur ((first fs) ret) (next fs))\n          ret)))))", "user": "55be464ce4b01b9910ae2a07"}, {"problem": 58, "code": "(fn [& funcs]\n  (fn [& args]   (first     (reduce (fn [v f] (list (apply f v)))     args (reverse funcs)))))", "user": "55b0f5bfe4b002ce9d5cbc28"}, {"problem": 58, "code": "(fn my-comp\n  ([f g]\n   (fn\n     ([a] (f (g a)))\n     ([a b] (f (g a b)))\n     ([a b & c] (f (apply g a b c))))\n   )\n  ([f g z]\n   (reduce my-comp (list f g z))))", "user": "55c9bc1ee4b0e31453f649f1"}, {"problem": 58, "code": "(fn [& fs]\n  (fn foo [& v]\n    (let [[f & fns] (reverse fs)\n          v0 (apply f v)]\n      (reduce #(%2 %1) v0 fns))))", "user": "54864662e4b0e286459a11b8"}, {"problem": 58, "code": "(fn co [& q] (reduce (fn compo [a b] (fn [& r] (a (apply b r)))) q))", "user": "55ac16a0e4b03311e7b73291"}, {"problem": 58, "code": "(fn my-comp [& fs]\n  (if (empty? fs)\n    identity\n    (fn [& args]\n      (let [rfs (reverse fs)]\n        (loop [arg (apply (first rfs) args)\n               rfs (rest rfs)]\n          (if (empty? rfs)\n            arg\n            (recur ((first rfs) arg) (rest rfs))))))))", "user": "55d6a2ebe4b0e31453f64a9a"}, {"problem": 58, "code": "(fn my-comp [& fns]\n  (if (empty? fns)\n    identity\n    (fn [& args]\n      (if (empty? (rest fns))\n        (apply (first fns) args)\n        ((first fns)\n         (apply (apply my-comp (rest fns))\n          args))))))", "user": "55d95be7e4b0e31453f64ac9"}, {"problem": 58, "code": "(fn [& fns]\n  (fn [& args] \n    (reduce (fn [args the-fn] (the-fn args)) \n            (apply (last fns) args)\n            (rest (reverse fns)))))", "user": "55d332f5e4b0e31453f64a5f"}, {"problem": 58, "code": "(fn [& fs]\n  (let [[f & fs] (reverse fs)]\n    (fn [& ps]\n      (reduce #(%2 %) (apply f ps) fs))))", "user": "55ccdc6be4b0e31453f64a18"}, {"problem": 58, "code": "(fn [& funcs]\n  (reduce #(fn [& arg] (% (apply %2 arg))) funcs))", "user": "55b22c33e4b0da326a65cf79"}, {"problem": 58, "code": "(fn [& fns] \n  (fn [& args]\n    (first (reduce (fn [s f] (list (apply f s))) args (reverse fns)))))", "user": "55cdc576e4b0e31453f64a1f"}, {"problem": 58, "code": "(letfn [(yeah [f & fns]\n          (if (empty? fns)\n            f\n            (fn [& args]\n              (f (apply (apply yeah fns) args)))))]\n  yeah)", "user": "55db7e15e4b0e31453f64ae8"}, {"problem": 58, "code": "(fn [& fns]\n  (fn [& args]\n    (first\n      (reduce (fn [xs f] [(apply f xs)]) args (reverse fns)))))", "user": "55c20bd0e4b0e31453f64972"}, {"problem": 58, "code": "(fn [& arg] (reduce (fn [a b] #(b (apply a %&))) (reverse arg)))", "user": "55236ad6e4b0882d96d091b1"}, {"problem": 58, "code": "(fn [& argsf] (fn [& args] (reduce #(%2 %1) (apply (last argsf) args) (rest (reverse argsf)))))", "user": "5582c5b1e4b05c286339e10a"}, {"problem": 58, "code": "(fn comp'\n  ([] identity)\n  ([f] f)\n  ([f g]\n    (fn\n      ([] (f (g)))\n      ([& args] (f (apply g args)))))\n  ([f g & fs] (reduce comp' (list* f g fs))))", "user": "55d5e80ee4b0e31453f64a91"}, {"problem": 58, "code": "(fn mycomp\n  [f0 & frest]\n  (cond\n    (empty? frest) f0\n    :else (fn [& x] (f0 (apply (apply mycomp frest) x)))))", "user": "54145050e4b01498b1a719ea"}, {"problem": 58, "code": "(fn function-comp\n  [& functions]\n    (reduce #(fn [& x] (%2 (apply %1 x))) (reverse functions)))", "user": "55a9e0fee4b0988bba2ad945"}, {"problem": 58, "code": "(fn [& fncs]\n  (fn [& args]\n    (let [fnclist (reverse fncs)\n          tempresult (apply (first fnclist) args)\n          result (reduce (fn [result fnction] (fnction result)) tempresult (rest fnclist))]\n      (if (seq? result) (vec result) result)\n    )\n  )\n)", "user": "558fec41e4b0277789237666"}, {"problem": 58, "code": "(fn [& fns]\n  (fn [& args]\n    (let [[f n & rst] (reverse fns)] \n      (loop [coll rst acc (apply f args) nxt n]\n       (if-let [acc (when nxt (nxt acc))]\n         (recur (rest coll) acc (first coll))\n         acc)))))", "user": "4e929dd0535dbda64a6f6b05"}, {"problem": 58, "code": "(fn [& fs]\n  (reduce (fn [f g]\n            (fn [& args] (f (apply g args))))\n          identity fs))", "user": "55d5ee3fe4b0e31453f64a92"}, {"problem": 58, "code": "(fn my-comp\n  [& f]\n  (fn [& args]\n    (loop [g f\n           result args]\n      (if (> (count g) 1)\n        (recur (butlast g) (list (apply (last g) result)))\n        (apply (first g) result)))))", "user": "5574c172e4b05c286339e059"}, {"problem": 58, "code": "(fn [& fs] (reduce #(fn [& x] (do (println % %2 x) (% (apply %2 x)))) fs))", "user": "55b39523e4b01b9910ae2973"}, {"problem": 58, "code": "(fn\n  [& fns]\n  (fn\n    [& args]\n    (loop [ret (apply (last fns) args)\n           fns (drop-last fns)]\n      (if\n        (empty? fns)\n        ret\n        (recur ((last fns) ret) (drop-last fns))))))", "user": "5586f418e4b059ccff29b1de"}, {"problem": 58, "code": "(fn [& f]\n  (reduce (fn [g z] #(g (apply z %&))) f)\n  )", "user": "55e1d34ae4b050e68259b421"}, {"problem": 58, "code": "#(fn [& args]\n   (let [[f1 & fs] (reverse %&)\n         arg (apply f1 args)\n         f (fn [arg f] (f arg))]\n     (reduce f arg fs)))", "user": "55dcb06ee4b050e68259b3b9"}, {"problem": 58, "code": ";;((\n(fn [& fs]\n  (fn [& args]\n    (letfn [(f [[g0 & gs]]\n               (if (empty? gs)\n                 (apply g0 args)\n                 (g0 (f gs))))]\n           (f fs))))\n;;rest reverse) [1 2 3 4])", "user": "55d87324e4b0e31453f64ab4"}, {"problem": 58, "code": "(fn cc [f & fns]\n  (if (empty? fns) f \n    (fn [& args] (f (apply (apply cc fns) args)))))", "user": "558bb38fe4b0277789237631"}, {"problem": 58, "code": "(fn [& funcs]\n  (fn [& args]\n    (first\n      (reduce #(vector (apply %2 %1)) args (reverse funcs )))))", "user": "54c94376e4b045293a27f665"}, {"problem": 58, "code": "(fn comp-e [& x]\n  (let [order (reverse x)]\n    (fn inner [y & y-rst]\n      (loop [result (apply (first order) y y-rst)\n             r-order (rest order)]\n        (if (empty? r-order) result\n          (recur ((first r-order) result) (rest r-order)))))))", "user": "55c77070e4b0e31453f649d0"}, {"problem": 58, "code": "(fn x [f & fs] (if (empty? fs) f (fn [& xs] (f (apply (apply x fs) xs)))))", "user": "54924f64e4b0b312c081ff42"}, {"problem": 58, "code": "(fn ([a b] (fn [& l] (a (apply b l))))\n  ([a b c] (fn [& l] (a (b (apply c l)))))\n  )", "user": "55ec1c4ce4b0121d4835fdc4"}, {"problem": 58, "code": "(fn [& fs] (fn [& arg] (first (reduce #(vector (apply %2 %1)) arg (reverse fs)))))", "user": "555c6344e4b0b056612e224c"}, {"problem": 58, "code": "(fn comb [& funcs]\n  (fn [& args]\n    (first\n      (reduce #(vector (apply %2 %1)) args (reverse funcs )))))", "user": "553c136ae4b09218d5f45012"}, {"problem": 58, "code": "(fn [& all-fns]\n  (loop [fns (butlast all-fns)\n         acc-fn (last all-fns)]\n    (if (empty? fns)\n      acc-fn\n      (recur (butlast fns)\n             (fn [& a] ((last fns) (apply acc-fn a)))))))", "user": "5166b716e4b060c690c1f4bf"}, {"problem": 58, "code": "(fn my-compose [& fs]\n  (fn [& args]\n    (reduce (fn [acc f] (f acc)) (apply (last fs) args) (rest (reverse fs)))))", "user": "55e6c3f5e4b050e68259b48c"}, {"problem": 58, "code": "(fn\n  [& fns]\n  (reduce (fn [i f]\n            (fn [& par] (if i\n                        (f (apply i par))\n                        (apply f par))))\n          nil (reverse fns)))", "user": "51c1b644e4b0d204dbe2ca12"}, {"problem": 58, "code": "(fn [& fl]\n  (fn [& l]\n    (loop [fl (reverse fl) l l]\n      (println fl)\n      (println l)\n      (if (empty? fl) (first l)\n        (recur (rest fl) (vector (apply (first fl) l)))\n        ))))", "user": "55d74e71e4b0e31453f64aa4"}, {"problem": 58, "code": "(fn compo \n  ([] identity)\n  ([f] f)\n  ([f g] \n     (fn \n       ([] (f (g)))\n       ([x] (f (g x)))\n       ([x y] (f (g x y)))\n       ([x y z] (f (g x y z)))\n       ([x y z & args] (f (apply g x y z args)))))\n  ([f g & fs]\n     (reduce compo (list* f g fs))))", "user": "55ed1dc5e4b0121d4835fdd4"}, {"problem": 58, "code": "(fn composition [f & funcs]\n    (partial (fn inner [f funcs & args]\n               (if (empty? funcs)\n                 (apply f args)\n                 (inner f (drop-last funcs) (apply (last funcs) args))))\n             f funcs))", "user": "55ed1575e4b0121d4835fdd3"}, {"problem": 58, "code": "(fn [& f] (reduce #(fn [& a] (%1 (apply %2 a))) f))", "user": "55d1b565e4b0e31453f64a49"}, {"problem": 58, "code": "(fn compy [& fns]\n  (fn [& args]\n    (reduce (fn [accumulative next-f] (next-f accumulative))\n            (apply (last fns) args) (rest (reverse fns)))))", "user": "54f36b36e4b050824f58f5c2"}, {"problem": 58, "code": "(fn this\n  ([f g] #(f (g %)))\n  ([f g h] #((this f g) (apply h %&)) )\n  )", "user": "55ed962ae4b0121d4835fddd"}, {"problem": 58, "code": "(fn my-comp\n  ([f] f)\n  ([f g] (fn [& args] (f (apply g args))))\n  ([f g & fns] (reduce my-comp (my-comp f g) fns)))", "user": "539e717fe4b0ca733b974488"}, {"problem": 58, "code": "(fn my-comp\n  ([] identity)\n  ([f] f)\n  ([f g]\n   (fn\n     ([] (f (g)))\n     ([x & args] (f (apply g (list* x args))))))\n  ([f g & more]\n   (reduce my-comp f (list* g more))))", "user": "53350264e4b0656e627bfd73"}, {"problem": 58, "code": "(fn [& fs] \n  (fn [& xs] \n      (reduce #(%2 %1)\n              (apply (last fs) xs)\n              (reverse (drop-last fs)))))", "user": "55ecb2c0e4b0121d4835fdce"}, {"problem": 58, "code": "(fn compose [f & fs]\n  (if (empty? fs)\n    f\n    (fn [& args] (f (apply (apply compose fs) args)))))", "user": "524e79c1e4b0541d1855b7e0"}, {"problem": 58, "code": ";;(fn [& s] (let [[f & r] (reverse s)] (fn [& v] (reduce #(%2 %1) (apply f v) r))))\n(fn [& s] (reduce #(fn [& v] (%2 (apply % v))) (reverse s)))", "user": "4f5eda39e4b0030a34fb2b56"}, {"problem": 58, "code": "(fn me\n  ([f g] (fn [& args]\n           (f (apply g args))))\n  ([f g & more]\n      (reduce me\n              f\n              (cons g more))))", "user": "521ed5b4e4b0e6c71e0c0bc0"}, {"problem": 58, "code": "(fn [& funs]\n  (partial\n    (fn c [fs & args]\n      (apply (first fs)\n        (if (empty? (rest fs))\n          args\n          (list\n            (apply c \n              (rest fs)\n              args)))))\n  funs))", "user": "55d2dd27e4b0e31453f64a5b"}, {"problem": 58, "code": "(fn my-comp\n  ([f g]\n   (fn [x] (f (g x))))\n  ([f g h]\n   (fn\n     ([x y] (f (g (h x y))))\n     ([x y & args] (f (g (apply h x y args)))))))", "user": "505d1b01e4b0e6aca564be04"}, {"problem": 58, "code": "(fn compose [f & fs]\n  (if (seq fs)\n    (fn [& x] (f (apply (apply compose fs) x)))\n    (fn [& x] (apply f x))))", "user": "55f8fd70e4b03cbcff9738bc"}, {"problem": 58, "code": "(fn prob58 [& funcs]\n  (fn [& args]\n    (first \n     (reduce \n      #(vector (apply %2 %1))\n      args \n      (reverse funcs)))\n    ))", "user": "4ebbff41535dfed6da9c6d78"}, {"problem": 58, "code": "(fn [& fns] (fn [& args] (let [nextargs (atom args)]\n(first (last (for [thefn (reverse fns)]\n(reset! nextargs [(apply thefn @nextargs)])))))))", "user": "55f75c6be4b06e875b46cea9"}, {"problem": 58, "code": "(fn func\n  [& fs]\n  (let [apply-and-log (fn [arg f]\n                        (let [applied (f arg)]\n                          (println applied)\n                          applied))]\n        \n    (fn\n      ([as-seq]\n        (reduce #(%2 %1) as-seq (reverse fs)))\n      ([arg1 & args]\n         (let [a (cons arg1 args)\n               functions (reverse fs)\n               first-applied (apply (first functions) a)]\n            (reduce apply-and-log first-applied (rest functions)))))))", "user": "55a62092e4b0acc240e31554"}, {"problem": 58, "code": "(fn [ & funcs]\n  (fn [& ele]\n    (reduce #(%2 %1) (apply (last funcs) ele) (reverse (butlast funcs)))))", "user": "55fe7e15e4b00f4cabc57651"}, {"problem": 58, "code": "(fn [f & r]\n  (fn [& x]\n    (letfn [(comp-maker [r]\n              (cond\n               (empty? r) x\n               (empty? (rest r)) (apply (first r) x)\n               :else ((first r) (comp-maker (rest r)))))]\n      (f (comp-maker r)))))", "user": "54bdcde5e4b0ed20f4ff6ee5"}, {"problem": 58, "code": "(fn [ & functions ]\n  (fn [ & args ]\n   (loop [[f & remainder :as to-apply] (reverse functions)\n          result args]\n    (if (empty? to-apply)\n      (first result)\n      (recur\n        remainder\n\t    [(apply f result)])))))", "user": "55d06bcbe4b0e31453f64a3a"}, {"problem": 58, "code": "(fn [& all-fns] \n  (reduce\n   (fn [acc-fn curr-fn]\n     (fn [& args]\n       (acc-fn (apply curr-fn args))))\n   identity\n   all-fns))", "user": "56018dd4e4b04bb52996e18f"}, {"problem": 58, "code": "(fn [& fns]\n               (fn [& args]\n                 (reduce (fn [result f] (f result))\n                         (apply (last fns) args)\n                         (rest (reverse fns)))))", "user": "50a3ad0ee4b0ceace084d493"}, {"problem": 58, "code": "(fn [& fns]\n    (fn [& parms]\n      (first (reduce (fn [res fun] [(apply fun res)]) parms (reverse fns)))))", "user": "5148bcbee4b05514c84b7cc6"}, {"problem": 58, "code": "(fn compose\n  ([f1] f1)\n  ([f1 & remm]\n   (fn [& args]\n     (println f1 remm args)\n      (f1 (apply (apply compose remm ) args))\n  )))", "user": "55ddc5cbe4b050e68259b3d0"}, {"problem": 58, "code": "(fn\n  [& functions]\n  (fn [& args]\n    (reduce (fn [result func]\n              (func result))\n              (apply (last functions) args)  (rest (reverse functions)))))", "user": "55fc1f05e4b0f488688e066f"}, {"problem": 58, "code": "(fn _comp \n  ([f] f)\n  ([f & fs] \n   #(f (apply (apply _comp fs) %&))))", "user": "5606a4ace4b08b23635d3175"}, {"problem": 58, "code": "(fn [& funcs]\n  (fn [& args] (first (reduce #(list (apply %2 %)) args (reverse funcs)))))", "user": "55f27bf9e4b06e875b46ce45"}, {"problem": 58, "code": "(fn compose [& funs]\n  (letfn [(compose2-left [f g] (fn [& x] (g (apply f x))))]\n    (reduce compose2-left (reverse funs))))", "user": "560843dee4b046a4fc0ac00e"}, {"problem": 58, "code": "(fn [& fns] \n  (fn [& args] \n    (let [[res] (reduce (fn [args f] \n                        (let [res (apply f args)]\n                           [res])) args (reverse fns))]\n      res)))", "user": "560794bde4b08b23635d3182"}, {"problem": 58, "code": "(fn my-comp [& fns]\n  (let [[f & fns] (reverse fns)]\n    (fn [& args] (reduce #(%2 %1) (apply f args) fns))))", "user": "560a67a1e4b05f002753def6"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& args]\n    (reduce (fn [a f] (f a)) (apply (last fs) args) (rest (reverse fs)))))", "user": "55fee5e4e4b00f4cabc5765a"}, {"problem": 58, "code": "; http://stackoverflow.com/a/21418527\n(fn [& fs] (reduce (fn [f g] #(f (apply g %&))) fs))\n\n; dwelte's solution\n#_(fn [& fs] (reduce #(fn [& x] (% (apply %2 x))) fs))\n\n; austintaylor's solution\n; I almost got to this solution but got stuck because I used [...] instead of (vector ...)\n#_(fn [& fs]\n  (fn [& xs]\n    (first (reduce #(vector (apply %2 %1)) xs (reverse fs)))))\n\n; first solution -- this is what many folks ended up with\n#_(fn composer [& fs]           ; first function is specia\n  (fn caller [& args]         ; arguments for the >first< function\n    (reduce\n      #(%2 %)                 ; call the next function with results of previous\n      (apply (last fs) args)  ; first function takes an argument list\n      (rest (reverse fs)))))  ; skip first function for reduction", "user": "55e7d06ee4b050e68259b496"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& args]\n    (first (reduce (fn [args f]\n                     (vector (apply f args))) ; or list\n                   args\n                   (reverse fs)))))", "user": "53576356e4b04ce2eb3ed27a"}, {"problem": 58, "code": "(fn compose [& fs] (if (= (count fs) 1)\n                     (first fs)\n                     #((first fs) (apply (apply compose (rest fs)) %&))))", "user": "55f20e4be4b06e875b46ce40"}, {"problem": 58, "code": "(fn [& fns]\n  (fn [& args]\n    ((fn recc [ffs]\n       (if (= 1 (count ffs))\n         (apply (first ffs) args)\n         ((first ffs) (recc (rest ffs)))))\n      fns)))", "user": "552d2e4fe4b076ab5578f7e1"}, {"problem": 58, "code": "(fn cmp [f & fs]\n  (if fs\n      #(f (apply (apply cmp fs) %&))\n      f))", "user": "548b8a50e4b0e286459a11ff"}, {"problem": 58, "code": "(fn fuck [& fns] \n  (fn [& coll] \n    (first \n     (reduce \n       (fn [input func]\n         [(apply func (seq input))]) coll (reverse fns)))))", "user": "560039cce4b04bb52996e162"}, {"problem": 58, "code": "(fn comb [& funcs]\n(fn [& args]\n(first\n(reduce #(vector (apply %2 %1)) args (reverse funcs )))))", "user": "54dd8a8ae4b024c67c0cf795"}, {"problem": 58, "code": "(fn \n  ([] identity)\n  ([f] f)\n  ([f g]\n     (fn\n       ([] (f (g)))\n       ([x] (f (g x)))\n       ([x y] (f (g x y)))\n       ([x y z] (f (g x y z)))\n       ([x y z & args] (f (apply g x y z args)))))\n  ([f g h]\n     (fn\n       ([] (f (g (h))))\n       ([x] (f (g (h x))))\n       ([x y] (f (g (h x y))))\n       ([x y z] (f (g (h x y z))))\n       ([x y z & args] (f (g (apply h x y z args))))))\n  ([f1 f2 f3 & fs]\n    (let [fs (reverse (list* f1 f2 f3 fs))]\n      (fn [& args]\n        (loop [ret (apply (first fs) args) fs (next fs)]\n          (if fs\n            (recur ((first fs) ret) (next fs))\n            ret))))))", "user": "56051095e4b08b23635d3162"}, {"problem": 58, "code": "(fn [& fs] (fn [& a] (first (reduce (fn [acc f] [(apply f acc)]) a (reverse fs)))))", "user": "553698fae4b09218d5f44fc0"}, {"problem": 58, "code": "(fn my-comp\n  [& fs]\n  (reduce (fn [f g] #(f (apply g %&))) fs))", "user": "56084e91e4b046a4fc0ac00f"}, {"problem": 58, "code": "(fn fc\n    [& fs]\n      (let [fncs (reverse fs)]\n        (fn [& args]\n          (loop [out (apply (first fncs) args) fncs (rest fncs)]\n            (if (empty? fncs)\n              out\n              (recur ((first fncs) out) (rest fncs))\n              )))))", "user": "55f8b32ae4b03cbcff9738ba"}, {"problem": 58, "code": "(fn [& fns] (fn [& args] (reduce #(%2 %1) (apply (last fns) args) (rest (reverse fns)))))", "user": "532ecd44e4b019098a6f8b49"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& xs]\n    (let [[f0 & fs-more] (reverse fs)]\n\t  (reduce (fn [x f] (f x)) (apply f0 xs) fs-more))))", "user": "4ff24a1ae4b0678c553fc337"}, {"problem": 58, "code": "(fn my-comp [& funcs]\n\t(reduce\n\t\t(fn [current-result f]\n\t\t\t(fn [& args]\n\t\t\t\t(current-result (apply f args))\n\t\t\t)\n\t\t)\n\t\tidentity\n\t\tfuncs\n\t)\n)", "user": "5559b443e4b0deb715856e3c"}, {"problem": 58, "code": "(fn my-comp [& fs]\n  (let [[f & fr] (reverse fs)]\n    (fn [& args] \n      (reduce \n       #(%2 %1) \n       (apply f args) \n       fr))))", "user": "5606ea56e4b08b23635d317b"}, {"problem": 58, "code": "(fn [& fs]\n  (reduce (fn [f g]\n            (fn [& args]\n              (f (apply g args))))\n          fs))", "user": "5601e037e4b04bb52996e199"}, {"problem": 58, "code": "(fn my-comp\n  [& fns]\n  (let [fns (reverse fns)]\n    (fn [& args]\n      (loop [x (apply (first fns) args)\n             fns (next fns)]\n        (if fns\n          (recur\n           ((first fns) x)\n           (next fns))\n          x)))))", "user": "55916d7be4b0604b3f94d57d"}, {"problem": 58, "code": "(fn [& f] \n    (fn [& v]\n      (nth \n        (reduce         \n          #(list (apply %2 %)) v (reverse f)) 0)))", "user": "561047eae4b05f002753df6d"}, {"problem": 58, "code": "(fn [& f]\n  (fn [& args]\n    (let [t (reverse f)]\n      (reduce #(%2 %1) (apply (first t) args) (rest t))\n  )\n )\n)", "user": "55eeb37ae4b0121d4835fdf3"}, {"problem": 58, "code": "(fn [& fns]\n    (fn [& coll]\n      (->> (reduce #(vector (apply %2 %))\n               coll\n               (reverse fns))\n           (first))))", "user": "532f8569e4b019098a6f8b4f"}, {"problem": 58, "code": "(fn [& fs]\n    (fn [& args]\n      (first\n       (reduce\n        #(list (apply %2 %1))\n        args (reverse fs)))))", "user": "560e9a2de4b05f002753df52"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& args] \n    (first (reduce (fn [t v] [(apply v t)]) args (reverse fs)))))", "user": "54dce62be4b024c67c0cf78b"}, {"problem": 58, "code": "(fn [& fs] (fn [& args] (first (reduce #(vector (apply %2 %)) args (reverse fs)))))", "user": "5603c31fe4b04bb52996e1c1"}, {"problem": 58, "code": "(fn [& f]\n  (fn [& x]\n    (reduce #(%2 %1) (apply (last f) x) (rest (reverse f)))))", "user": "55d9743ae4b0e31453f64aca"}, {"problem": 58, "code": "(fn [& fns]\n     (fn [& args]\n       (let [[f & fns] (reverse fns)]\n         (reduce #(%2 %1) (apply f args) fns))))", "user": "4f6ba7bce4b07046d9f4efb0"}, {"problem": 58, "code": "(fn my-comp\n  ([] identity)\n  ([f] f)\n  ([f g] #(f (apply g %&)))\n  ([f1 f2 & fs]\n   (reduce my-comp (my-comp f1 f2) fs)))", "user": "56180d83e4b06b1bb2182a18"}, {"problem": 58, "code": "(fn p58\n    ([] identity)\n    ([f] f)\n    ([f g] (fn [& args] (f (apply g args))))\n    ([f g & fs] (reduce p58 (list* f g fs))))", "user": "55d204abe4b0e31453f64a4f"}, {"problem": 58, "code": "(fn [& funcs]\n #(loop [funcs funcs args %&]\n  (if \n    (empty? funcs)\n    (first args)\n    (recur\n     (butlast funcs)\n     (vector (apply (last funcs) args))\n    )\n  )\n )\n)", "user": "560fe558e4b05f002753df63"}, {"problem": 58, "code": "(fn[& fns](\n               fn[& args](\n                           first(loop[i 0 cmp args](\n                                    if(= i (count fns)) cmp\n                                    (recur (inc i) (\n                                                \n                                                     list(apply\n                                                   (nth (reverse fns) i)\n                                                   cmp\n                                                   ))\n                                                     )\n                                                 ))\n                         )\n               ))", "user": "56039843e4b04bb52996e1be"}, {"problem": 58, "code": "(fn [& fns] (fn [& args] (first (reduce #(list (apply %2 %1)) args (reverse fns)))))", "user": "561ca2eae4b064ca9f4b169b"}, {"problem": 58, "code": "(fn [& fns]\n  (reduce (fn [f-acc g] #(f-acc (apply g %&))) fns))", "user": "5573ffb5e4b0aa18f790f3fd"}, {"problem": 58, "code": "(\n    fn [& fns]\n    (fn [& args] \n      (loop [remainingFunctions (butlast fns)\n             ret (apply (last fns) args)]\n        (if (empty? remainingFunctions)\n          ret\n          (recur (butlast remainingFunctions) ((last remainingFunctions) ret))))\n    ))", "user": "55f2c898e4b06e875b46ce4b"}, {"problem": 58, "code": "(fn [& fx]\n  (fn [& args]\n    (first (reduce (fn [acc it]\n              (list (apply it acc)))\n            args\n            (reverse fx)))))", "user": "561ba3e5e4b073c65b0ce3eb"}, {"problem": 58, "code": "(fn comp* [& funs]\n  (fn [& params]\n    (let [res (apply (last funs) params)\n          other-funs (butlast funs)]\n      (if (empty? other-funs)\n        res\n        ((apply comp* other-funs) res)))))", "user": "53fc88e7e4b0de5c418485be"}, {"problem": 58, "code": "(fn [& fs] \n  (fn [& xs]\n    (first (reduce (fn [res f] (list (apply f res))) xs (reverse fs)))))", "user": "5617db88e4b06b1bb2182a16"}, {"problem": 58, "code": "(fn [& funcs] (fn [& args] (get (reduce (fn [val func] [(apply func val)]) args (reverse funcs)) 0)))", "user": "561f9110e4b064ca9f4b16ce"}, {"problem": 58, "code": "(fn my-comp [& args] (fn [& args*]\n                           (first\n                            (reduce\n                             #(vector\n                               (apply %2 %1)) args*\n                             (reverse args))))\n                              )", "user": "5614fa1de4b05f002753dfbe"}, {"problem": 58, "code": "(fn \n  ([] identity)\n  ([f] f)\n  ([f g] \n     (fn \n       ([] (f (g)))\n       ([x] (f (g x)))\n       ([x y] (f (g x y)))\n       ([x y z] (f (g x y z)))\n       ([x y z & args] (f (apply g x y z args)))))\n  ([f g h] \n     (fn \n       ([] (f (g (h))))\n       ([x] (f (g (h x))))\n       ([x y] (f (g (h x y))))\n       ([x y z] (f (g (h x y z))))\n       ([x y z & args] (f (g (apply h x y z args))))))\n  ([f1 f2 f3 & fs]\n    (let [fs (reverse (list* f1 f2 f3 fs))]\n      (fn [& args]\n        (loop [ret (apply (first fs) args) fs (next fs)]\n          (if fs\n            (recur ((first fs) ret) (next fs))\n            ret)))))\n  )", "user": "53da059be4b0e771c302547e"}, {"problem": 58, "code": "(fn comp-ms\n  [& fncs]\n  (fn revargs [& args]\n    (reduce #(%2 %1) (apply (last fncs) args) (reverse (butlast fncs))) ))", "user": "561ca6ebe4b064ca9f4b169c"}, {"problem": 58, "code": "(fn mc[& fns] \n  (if-let [n (next fns)]\n    (fn [& args] ((first fns) (apply (apply mc n) args)))\n    (first fns)))", "user": "561c0278e4b064ca9f4b1691"}, {"problem": 58, "code": "(fn [& a]\n  (fn [& b]\n    (reduce\n      #(apply %2 (list %) )\n      (apply (last a) b)\n      (rest (reverse a)))))", "user": "52bacfa8e4b07a9af57922d6"}, {"problem": 58, "code": "(fn [f1 f2 & f3]\n\t(fn [& lin]\n        (let [l (vec (flatten (vec lin)))\n              p3 (if f3 (reduce (first f3) l) nil)\n              p2 (f2 (if p3 p3 l))\n              p1 (f1 p2)]\n    \tp1\n          )\n      )\n)", "user": "52824143e4b0757a1b171453"}, {"problem": 58, "code": "(fn [& funcs]\n    (fn [& args]\n      (letfn [(apply-funcs [[h & t] coll]\n                (if (empty? t)\n                  (apply h coll)\n                  (h (apply-funcs t coll))))]\n        (apply-funcs funcs args))\n      )\n    )", "user": "4f5e5975e4b0030a34fb2b4d"}, {"problem": 58, "code": "(fn [& fs]\n  (reduce (fn [a b]\n     #(a(apply b %&))) fs))", "user": "55b1e9e7e4b0da326a65cf74"}, {"problem": 58, "code": "(fn [& fns] (fn [& args] (let [[f & fs] (reverse fns)] (reduce #(%2 %1) (apply f args) fs))))", "user": "4fb710f4e4b081705acca2cd"}, {"problem": 58, "code": "(fn \n  ([a b] (fn [& z] (a (apply b z) ) ) )\n  ([a b c] \n   (fn \n     ([z z1  z2 z3] (a (b (apply c (list z z1 z2 z3)))))\n     ([z z1] (a (b (apply c (list z z1)))))\n     )\n   )\n  )", "user": "56238371e4b03f08ee9a9233"}, {"problem": 58, "code": "(fn compose \n  ([f] f)\n  ([f g] (fn [& args] (f (apply g args))))\n  ([f g & more] (compose f (apply compose g more))))", "user": "56228d00e4b03f08ee9a9227"}, {"problem": 58, "code": "(fn solve58 [& all-functions]\n  (fn [& start-params]\n    (loop [functions (reverse all-functions)\n           params start-params]\n      (if (seq functions)\n        (let [new-params [(apply (first functions) params)]]\n          (recur (rest functions) new-params))\n        (first params)))))", "user": "55a5c3bee4b0acc240e3154e"}, {"problem": 58, "code": "(fn [& f]\n  (fn [& coll]\n    (first\n     (reduce #(vector (apply %2 %1)) coll (reverse f)))))", "user": "4f40c46fe4b0e243712b1fbe"}, {"problem": 58, "code": "(fn [& fns] \n  (fn [& args]\n    (first\n     (reduce\n      (fn [a f] [(apply f a)])\n      args\n      (reverse fns)))))", "user": "4f0f01c0535d0136e6c22329"}, {"problem": 58, "code": "(fn [& xs]\n  (fn [& ys]\n    (reduce #(%2 %1)\n            (apply (last xs) ys)\n            (rest (reverse xs)))))", "user": "54d000c7e4b018d918be98d7"}, {"problem": 58, "code": "(fn comp1\n  ([f] f)\n  ([f g]\n   (fn\n     ([] (f (g)))\n     ([& args] (f (apply g args)))))\n  ([f g & args]\n   (reduce comp1 (list* f g args))))", "user": "56201392e4b064ca9f4b16d8"}, {"problem": 58, "code": "(fn [& fs]\n  (reduce (fn [f g]\n            #(f (apply g %&))) fs))", "user": "5626447fe4b00e49c7cb47bd"}, {"problem": 58, "code": "(fn my-comp [& functions]\n  (fn [& args]\n    (reduce #(%2 %1) (apply (last functions) args)\n            (reverse (butlast functions)))))", "user": "561d23e3e4b064ca9f4b16a5"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& x]\n    (loop [fs fs, x x]\n      (if (empty? fs) (first x)\n        (recur (butlast fs) (list (apply (last fs) x)))))))", "user": "5492164ee4b0b312c081ff3e"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& args]\n    (first (reduce #(vector (apply %2 %1)) args (reverse fs))))\n  )", "user": "5628cb07e4b00e49c7cb47ef"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& args] \n    (reduce #(%2 %1) (apply (last fs) args) (rest (reverse fs)))))", "user": "5566463ee4b0c656e3ff1831"}, {"problem": 58, "code": "(fn rec [& fs]\n  (let [fs (reverse fs)]\n    (fn [& args]\n      (loop [ret (apply (first fs) args) fs (next fs)]\n        (if fs \n          (recur ((first fs) ret) (next fs))\n          ret)))))", "user": "51647faae4b003cf19fdde3b"}, {"problem": 58, "code": "(fn compo [f & fs]\n  (if (empty? fs) f\n    (fn [& xs] \n      (f (apply (apply compo fs) \n                xs)))))", "user": "562cd94ee4b0a45d2ff83015"}, {"problem": 58, "code": "(fn [& fs] \n    (let [[f & r] (reverse fs)] \n      (fn [& data] (reduce #(%2 %) (apply f data) r))))", "user": "56011393e4b04bb52996e178"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& args]\n    (loop [acc (apply (last fs) \n                      args)\n           fs (butlast fs)]\n      (if (empty? fs)\n        acc\n        (recur ((last fs) acc)\n               (butlast fs))))))", "user": "55d8eed3e4b0e31453f64ac3"}, {"problem": 58, "code": "(fn [& F] (reduce (fn [g h] (fn [& x] (g (apply h x)))) F))", "user": "55f6fe09e4b06e875b46cea2"}, {"problem": 58, "code": "(fn mycomp\n  ([] identity)\n  ([f] f)\n  ([f g] \n     (fn \n       ([] (f (g)))\n       ([x] (f (g x)))\n       ([x y] (f (g x y)))\n       ([x y z] (f (g x y z)))\n       ([x y z & args] (f (apply g x y z args)))))\n  ([f g & fs]\n     (reduce mycomp (list* f g fs))))", "user": "534f8c9ae4b084c2834f4acd"}, {"problem": 58, "code": "(fn [& x]\n    (fn [& s]\n      (loop [f (reverse x)\n             acc s]\n        (cond\n          (empty? f) (first acc)\n          :else (recur (rest f) (list (apply (first f) acc)))))))", "user": "5600dccee4b04bb52996e175"}, {"problem": 58, "code": "(fn [& args] (reduce \n #(fn [& xs] (% (apply %2 xs)))\n args))", "user": "5627444fe4b00e49c7cb47cd"}, {"problem": 58, "code": "(fn [& fs] (fn [& x] (first (reduce (fn [v f] [(apply f v)]) x (reverse fs) ))))", "user": "5595a88ee4b0c79f6e1db96e"}, {"problem": 58, "code": "(fn cmp\n  ([f] f)\n  ([f g] (fn ([& args] (f (apply g args)))))\n  ([f g h] (fn ([& args] (f (g (apply h args)))))))", "user": "54b54d1be4b05787c3b1639c"}, {"problem": 58, "code": "(fn [& fns]\n      (fn [& args]\n\t  (let [[f & fns] (reverse fns) ]\n\t    (reduce #(%2 %1) (apply f args) fns))\n)\n\n       )", "user": "55f09e7be4b06e875b46ce28"}, {"problem": 58, "code": "(fn [& fs]\n  (let [[f & fs] (reverse fs)]\n    (fn [& args]\n      (reduce #(%2 %1) (apply f args) fs))))", "user": "562cb7cfe4b0a45d2ff83009"}, {"problem": 58, "code": "(fn [& xs] \n  (fn [& as] \n    ((fn s [[f & fs] a]\n      (if fs\n        (f (s fs a))\n        (apply f a))) xs as)))", "user": "55ed9108e4b0121d4835fddc"}, {"problem": 58, "code": "(fn [& fs] #(reduce (fn [v f] (f v))\n                      (apply (last fs) %&)\n                      (rest (reverse fs))))", "user": "54db3d82e4b024c67c0cf75f"}, {"problem": 58, "code": "(fn custom-comp\n  [& fns]\n  fns\n  (fn\n    [& args]\n    (let [first-result (apply (last fns) args)\n          rest-fns (rest (reverse fns))]\n      (reduce\n       (fn [reduce-val fn-el]\n         (fn-el reduce-val))\n       first-result rest-fns))))", "user": "4fc524aae4b081705acca37e"}, {"problem": 58, "code": "(fn [& fns]\n  (let [reverse-fns (reverse fns)]\n    (fn [& args] \n      (reduce #(%2 %1) (apply (first reverse-fns) args) (rest reverse-fns)))))", "user": "562e8b2be4b0ab312c17ebbb"}, {"problem": 58, "code": "(fn [& funcs]\n  (fn [& args]\n    (reduce #(%2 %1) (apply (last funcs) args) (rest (reverse funcs)))))", "user": "5521248fe4b08d5046aa8a69"}, {"problem": 58, "code": "(fn [& func-list]\n  ;; Need to reverse the function list because we want to start applying the last one first\n  (let [[f1 & fmore] (reverse func-list)]                   \n    (fn [& args]\n      (reduce\n        ;; we need to 'apply' the first one (because 'args' is a list) but then we just the others directly\n        #(%2 %1)\n        (apply f1 args)\n        fmore))))", "user": "563772a9e4b0bfe05bf117d7"}, {"problem": 58, "code": "(fn [& fs] \n  (fn [& x] \n    (first (reduce (fn [v f] [(apply f v)]) \n                   x \n                   (reverse fs)))))", "user": "531c6e72e4b08068f379eda0"}, {"problem": 58, "code": "(fn [& fs]\n  (let [[f & fs] (reverse fs)]\n    (fn [& args]\n      (reduce #(%2 %1) (apply f args) fs))))", "user": "55f2e47de4b06e875b46ce4d"}, {"problem": 58, "code": "(fn my-comp [& args]\n  (let [rargs (reverse args)]\n    (fn [& coll]\n      (loop [fs (rest rargs) ar (apply (first rargs) coll)]\n        (if (empty? fs)\n          ar\n          (recur (rest fs) ((first fs) ar)))))))", "user": "561a1af6e4b053970a773b02"}, {"problem": 58, "code": "(fn [& fs]\n  (reduce #(fn [& p] (%2 (apply %1 p))) (reverse fs)))", "user": "56372798e4b0bfe05bf117d0"}, {"problem": 58, "code": "(fn [& fns]\n                (fn [& args]\n                  (reduce #(%2 %1)\n                          (apply (last fns) args)\n                          (rest (reverse fns)))))", "user": "551e6526e4b030e6a24d00e8"}, {"problem": 58, "code": "(fn [& fs] \n  (fn [& xs] \n    (reduce #(%2 %1) \n            (apply (last fs) xs) (rest (reverse fs)))))", "user": "55630cc1e4b0c656e3ff17e0"}, {"problem": 58, "code": "(fn [& fns]\n    (fn [& coll]\n      (loop [funs (rest (reverse fns))\n             xs (apply (first (reverse fns)) coll)]\n        (if (empty? funs)\n          xs\n          (recur (rest funs)\n                 ((first funs) xs))))))", "user": "554bd33ce4b0a04f7929959a"}, {"problem": 58, "code": "(fn my-comp [f & fs]\n  (fn [& args]\n    (if-not (seq fs)\n      (apply f args)\n      (f (apply (apply my-comp fs) args))\n    )\n  )\n)", "user": "5627d09ce4b00e49c7cb47db"}, {"problem": 58, "code": "(fn comb [& funcs]\n  (fn [& args]\n    (first\n      (reduce #(vector (apply %2 %1)) args (reverse funcs )))))", "user": "56399b7ee4b0bfe05bf117f5"}, {"problem": 58, "code": "(fn\n  [& funcs]\n  (let [[head &  other] (reverse funcs)]\n    (fn [& args] (reduce #(%2 %1) (apply head args) other))\n    )\n  )", "user": "563a30d7e4b0bfe05bf117f9"}, {"problem": 58, "code": "(fn [& fncs]\n  (fn [& coll]\n    (first\n     (reduce #(vector (apply %2 %1)) coll (reverse fncs)))))", "user": "540c54a7e4b0addc1aec6700"}, {"problem": 58, "code": "(fn create-comp [& funs]\n  (let [funcs (reverse funs)]\n    (fn [& xs]\n     (first (reduce (fn [acc f] (list (apply f acc))) xs funcs)) \n    )\n  )\n)", "user": "56393681e4b0bfe05bf117f2"}, {"problem": 58, "code": "(fn [& fs]\n  (reduce \n   (fn [acc-f f]\n     (fn [& args] (acc-f (apply f args)))) \n   fs))", "user": "52f3568fe4b05e3f0be25f0e"}, {"problem": 58, "code": "(fn t\n  ([x] x)\n  ([x & xs] (fn [& args] (x (apply (apply t xs) args)))))", "user": "53fcd574e4b0de5c418485d9"}, {"problem": 58, "code": "(fn [& fns]\n  (fn [& args]\n    (first (reduce (fn [acc f] [(apply f acc)]) args (reverse fns)))))", "user": "55d28b38e4b0e31453f64a58"}, {"problem": 58, "code": "(fn my-compose [& all-fns]\n  (reduce\n    (fn [acc-fn curr-fn]\n      (fn [& args]\n        (acc-fn (apply curr-fn args))))\n    identity\n    all-fns)\n   )", "user": "563b9acbe4b0bfe05bf11827"}, {"problem": 58, "code": "(fn my-comp\n  [& fs]\n  (if (empty? (rest fs))\n    (first fs)\n    (fn [& args] ((first fs) (apply (apply my-comp (rest fs)) args)))))", "user": "563f1493e4b08d4f616f5ecf"}, {"problem": 58, "code": "(fn [& fs]\n  (reduce (fn [g f]\n            (fn [& xs]\n              (g (apply f xs))))\n          fs))", "user": "564161aae4b08d4f616f5ef9"}, {"problem": 58, "code": "(fn [& fs] (fn [& xs] (reduce #(%2 %1) (apply (last fs) xs) (reverse (drop-last fs)))))", "user": "505fdf63e4b08f2a82ad10b9"}, {"problem": 58, "code": "(fn [& fs] \n  (let [rfs (reverse fs)]\n    \n      (fn [& args] (reduce  #(%2 %1)  (apply (first rfs) args) (rest rfs)))))", "user": "564127a9e4b08d4f616f5ef3"}, {"problem": 58, "code": ";These folks are impressive. I did not come up with this yet...\n\n(fn comb [& funcs] \n   (fn [& args] \n     (first \n       (reduce #(vector (apply %2 %1)) args (reverse funcs ))))) \n\n\n;(fn [& fs] (reduce (fn [f g] #(f (apply g %&))) fs))", "user": "5633bb9de4b0bfe05bf117b4"}, {"problem": 58, "code": "(fn my-comp [& fns]\n  (fn [& args]\n    (let [rfns (reverse fns)\n          initial-f (first rfns)\n          initial-v (apply initial-f args)]\n      (reduce (fn [v f] (f v)) initial-v (rest rfns)))))", "user": "5641296de4b08d4f616f5ef4"}, {"problem": 58, "code": "(fn combine_fns [& f]\n  (fn [& args]\n    (first\n      (reduce #(vector (apply %2 %1))\n              args\n              (reverse f )))))", "user": "5632b0a9e4b0bfe05bf117a8"}, {"problem": 58, "code": "(fn comp*\n  ([] identity)\n  ([f] f)\n  ([f g] \n     (fn \n       ([] (f (g)))\n       ([x] (f (g x)))\n       ([x y] (f (g x y)))\n       ([x y z] (f (g x y z)))\n       ([x y z & args] (f (apply g x y z args)))))\n  ([f g & fs]\n   (reduce comp* (list* f g fs))))", "user": "563ed73ae4b08d4f616f5ecb"}, {"problem": 58, "code": "(fn [& fns] \n  (reduce (fn [f g] (fn [& args] (f (apply g args)))) \n          fns))", "user": "545e7ab0e4b01be26fd7467c"}, {"problem": 58, "code": "(fn  [& fs]\n  (fn [& args]\n    (let [fsr (reverse fs)]\n      (let [f (first fsr)\n            xs (rest fsr)\n            f* (fn [agg f**]\n                 (f** agg))]\n        (reduce f* (apply f args) xs)))))", "user": "5634995fe4b0bfe05bf117be"}, {"problem": 58, "code": "(fn \n  ([f1 f2]\n   (fn [& args]\n    \t(f1 (apply f2 args))))\n  ([f1 f2 f3]\n   (fn [& args]\n    (f1 (f2 (apply f3 args))))))", "user": "55eb026de4b0121d4835fdb7"}, {"problem": 58, "code": "(fn [& fs]\n    (fn [& args]\n      (first (reduce #(list (apply %2 %1)) args (reverse fs)))))", "user": "54ff074de4b07d26eda61d47"}, {"problem": 58, "code": "(fn komp [& fns]\n  (fn [& args]\n    (loop [f (rest (reverse fns))\n           res (apply (last fns) args)]\n      (if (seq f)\n        (recur (rest f) ((first f) res))\n        res))))", "user": "559067ace4b0277789237670"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& args]\n    (let \n      [[fi & funs] (reverse fs)\n       base (apply fi args)]\n      (reduce (fn [x f] (f x)) base funs))))", "user": "5647dc44e4b0284900eef624"}, {"problem": 58, "code": "(fn [& f]\n  (fn [& args] \n    (reduce #(%2 %1) (apply (last f) args) (reverse (drop-last f)))\n  )\n)", "user": "5649615be4b0284900eef641"}, {"problem": 58, "code": "(fn [& funcs]\n  (let [composed-funcs (next (reverse funcs))\n        func (last funcs)]\n    (fn [& xs]\n      (let [start-x (apply func xs)]\n        (loop [[cur-fn & to-apply] composed-funcs\n               arg start-x]\n          (if cur-fn\n            (recur to-apply (cur-fn arg))\n            arg))))))", "user": "54e79094e4b024c67c0cf818"}, {"problem": 58, "code": "(fn [& fns]\n  (fn [& args]\n    (loop [fns' (butlast fns)\n           res (apply (last fns) args)]\n      (if (empty? fns')\n        res\n        (recur (butlast fns')\n               ((last fns') res))))))", "user": "4fdb881ee4b05e33b9224f5e"}, {"problem": 58, "code": "(fn my-compose [& fns]\n  (fn [& args]\n    (loop [result args\n         l (reverse fns)]\n    (if (empty? l)\n      (first result)\n      (recur (list (apply (first l) result)) (rest l)))\n    )))", "user": "5630fd6fe4b0bfe05bf1178b"}, {"problem": 58, "code": "(let \n  [comp-2\n   (fn [f g] \n  \t(fn [& args] \n    (f (apply g args))))]\n  (fn [& fs]\n    (reduce comp-2 fs)))", "user": "564f1be3e4b0284900eef6a6"}, {"problem": 58, "code": "(fn fc [& funcs]\n  (fn [& args]\n    (loop [f (rest (reverse funcs)) a (apply (last funcs) args) ]\n      (if (empty? f)\n        a\n        (recur (rest f) ((first f) a))))))", "user": "563d12f9e4b0bfe05bf11845"}, {"problem": 58, "code": "(fn compose\n  ( [x] (fn [arg] (x arg)))\n  ( [x y] (fn [arg] (x (y arg))))\n  ( [x y z] (fn [& arg] (x (y (apply z arg)))))\n  )", "user": "564b1ff8e4b0284900eef663"}, {"problem": 58, "code": "(fn my-comp [& fns] \n  (fn [& args]\n      (reduce #(%2 %1) (apply (last fns) args) (rest (reverse fns)))))", "user": "563b5dc9e4b0bfe05bf1180f"}, {"problem": 58, "code": "(fn [& lefs]\n  (fn [& args]\n    (loop [v (apply (last lefs) args)\n           fs (reverse (butlast lefs))]\n      (if (seq fs)\n          (recur ((first fs) v) (rest fs))\n          v))))", "user": "52173464e4b082aa80a88c75"}, {"problem": 58, "code": "(fn [& funcs]\n  (fn [& args]\n    (first (reduce #(list (apply %2 %1)) args (reverse funcs)))))", "user": "56504dc2e4b0284900eef6bc"}, {"problem": 58, "code": "(fn cmp [fun & rfuns]\n  (if (seq rfuns) \n  \t(fn [& x] (fun (apply (apply cmp rfuns) x))) \n  \t(fn [& x] (apply fun x))))", "user": "564d02cde4b0284900eef679"}, {"problem": 58, "code": "(fn [& fns]\n  (reduce (fn [f1 f2]\n            (fn [& params] (f1 (apply f2 params)))) fns))", "user": "56288ccae4b00e49c7cb47ea"}, {"problem": 58, "code": "(fn [& fns]\n  (fn [& args]\n    (let [fns (reverse fns)]\n      (reduce #(%2 %1)\n              (apply (first fns) args)\n              (rest fns)))))", "user": "5650b8a0e4b0284900eef6c3"}, {"problem": 58, "code": "(fn mycomp\n  ([f] f)\n  ([f & fs] (fn [& xs] (f (apply (apply mycomp fs) xs))))\n  )", "user": "56521a26e4b0f9d632dd845f"}, {"problem": 58, "code": "(fn [& fns]\n  (partial\n    (fn app [funs & args]\n      (if\n        (next funs)\n        ((first funs) (apply app (next funs) args))\n        (apply (first funs) args)\n        )\n      )\n    fns)\n  )", "user": "564faadce4b0284900eef6b2"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& xs]\n    (reduce \n     (fn [x f] (f x))\n     (apply (last fs) xs)\n     (rest (reverse fs)))))", "user": "5630471ce4b073c1cf7a9be4"}, {"problem": 58, "code": "(fn [& fns]\n  (fn [& args]\n    (first(reduce\n      (fn [ret f] [(apply f ret)])\n      args\n      (reverse fns)\n    ))\n  )\n)", "user": "52d68ed2e4b09f7907dd1362"}, {"problem": 58, "code": "(fn cmp [& fs]\n  (if (= (count fs) 1)\n    (first fs)\n    (fn [& args]\n      ((first fs) (apply (apply cmp (rest fs)) args)))))", "user": "541ef7e2e4b01498b1a71a92"}, {"problem": 58, "code": "(fn c\n  ([f] f)\n  ([f & r]\n   (fn [& a] (f (apply (apply c r) a)))))", "user": "563b1553e4b0bfe05bf1180a"}, {"problem": 58, "code": "(fn [& fs] (fn [& v] (first ((fn fc [v fs] (if (empty? fs) v [(apply (first fs) (fc v (rest fs)))])) v fs))))", "user": "544e6b7fe4b0e39780006986"}, {"problem": 58, "code": "(fn my-composition [& fns]\n  (reduce (fn reducer [prevFn nextFn]\n            (fn out [& args] (prevFn (apply nextFn args)))) fns))", "user": "56530a1ce4b0f9d632dd846c"}, {"problem": 58, "code": "(fn compose ([] (fn [x] x)) ([f] f) ([f g & fs] (fn [& args] (f (g (apply (apply compose fs) args))))))", "user": "54ca93abe4b057c6fda3a264"}, {"problem": 58, "code": "#(reduce (fn [f g] (fn ([x] (g (f x)))\n  \t                               ([x & args] (g (apply f x args))))) (reverse %&))", "user": "54a677a9e4b09f271ff37c88"}, {"problem": 58, "code": "(fn outer [& params]\n    (fn inner [& inputs]\n      (loop [functions (reverse params)\n             result inputs]\n        (if (empty? functions)\n          (first result)\n          (recur (rest functions)  [(apply (first functions) result)])\n          )))\n    )", "user": "5654cb2de4b0f9d632dd848b"}, {"problem": 58, "code": ";(fn [& fns]\n;  (fn [& args]\n;    (reduce (fn [r f] (f r))\n;            (apply (last fns) args)\n;            (rest (reverse fns)))))\n\n(fn [& fns]\n  (reduce (fn [f g]\n            (fn [& args]\n              (f (apply g args))))\n          fns))", "user": "54485749e4b032a45b8693c7"}, {"problem": 58, "code": "(fn [& fs]\n    (letfn [(build\n              ([f]      (fn [& args]    (apply f args)))\n              ([f & fs] (fn [& args] (f (apply (apply build fs) args)))))]\n      (apply build fs)))", "user": "5652f23ce4b0f9d632dd846b"}, {"problem": 58, "code": "(fn compose [& fns]\n  (fn [& args]\n    (reduce #(%2 %) (apply (last fns) args) (rest (reverse fns)))))", "user": "5545eebee4b0a04f79299539"}, {"problem": 58, "code": "(fn [& fs] (reduce (fn [f g] #(f (apply g %&))) fs))", "user": "54e0bb4fe4b024c67c0cf7b8"}, {"problem": 58, "code": "(fn mycomp\n  ([f] (fn [& args] (apply f args)))\n  ([f & more] (fn [& args] (f (apply (apply mycomp more) args)))))", "user": "527c166de4b03e8d9a4a75b3"}, {"problem": 58, "code": "(fn cmp [& fs] (fn [ & args ] (letfn [(cmp ([f] (apply f args)) ([f1 & f2-fn] (f1 (apply cmp f2-fn))))] (apply cmp fs))))", "user": "5646dff3e4b0284900eef615"}, {"problem": 58, "code": "(fn [& funs]\n  (fn [& args]\n    (reduce (fn [res fun]\n              (fun res))\n      (apply (last funs) args)\n      (rest (reverse funs)))))", "user": "53a83c74e4b047364c044426"}, {"problem": 58, "code": "(fn c [& fs]\n  (case (count fs)\n    1 (first fs)\n    2 (let [[f1 f2] fs] (fn [& args] (f1 (apply f2 args))))\n    (let [[f & ff] fs] (c f (apply c ff)))))", "user": "565a3e25e4b068f2fe63dbfb"}, {"problem": 58, "code": "(fn [& args] (fn [& input] (first (reduce #(vector (apply %2 %1)) input (reverse args)))))", "user": "5632e850e4b0bfe05bf117ac"}, {"problem": 58, "code": "(fn [& fns]\n  (reduce (fn [f g]\n            (fn [& args]\n              (f (apply g args)))) fns))", "user": "4fca0376e4b0ee37620e184a"}, {"problem": 58, "code": "(fn [& funcs]\n  (fn [& args]\n    (first\n      (reduce #(vector (apply %2 %1)) args (reverse funcs )))))", "user": "562ab73ce4b00e49c7cb482e"}, {"problem": 58, "code": "(fn [& fl]\n    (reduce (fn [acc f] (fn [& xs] (acc (apply f xs)))) identity fl))", "user": "55c49394e4b0e31453f6499e"}, {"problem": 58, "code": "(fn compose [& fs]\n  (reduce (fn [acc-f f]\n            (fn [& xs]\n              (acc-f (apply f xs))))\n          identity\n          fs))", "user": "56444fb1e4b0018b46ad8c0c"}, {"problem": 58, "code": "(fn [& fs] (reduce (fn [f g] #(f (apply g %&))) fs))", "user": "564045a8e4b08d4f616f5edd"}, {"problem": 58, "code": "(fn compose ([f] (fn [& x] (apply f x))) ([f & fs] (fn [& x] (f (apply (apply compose fs) x)))))", "user": "556ffa45e4b09a3098a52528"}, {"problem": 58, "code": "(fn my-comp\n             ([f] (fn [& args] (apply f args)))\n             ([f & fs] (fn [& args] (f (apply (apply my-comp fs) args)))))", "user": "5393185ae4b0b51d73faaeb7"}, {"problem": 58, "code": "(fn c [& fs]\n  (fn [& x]\n    (loop [v x f (reverse fs)]\n      (if (empty? f)\n        (first v)\n        (recur (list (apply (first f) v)) (rest f))))))", "user": "56588f4ee4b0f9d632dd84b6"}, {"problem": 58, "code": "(fn [& f]\n  (fn [& x]\n    (reduce #(%2 %1) (apply (last f) x) (rest (reverse f)))))", "user": "55c6fd60e4b0e31453f649c9"}, {"problem": 58, "code": "(fn [& funcs]\n  (fn [& args]\n    (first (reduce #(vector (apply %2 %1)) args (reverse funcs)))))", "user": "5632d1b3e4b0bfe05bf117a9"}, {"problem": 58, "code": "(fn [& funcs]\n  (let [[fun & funs] (reverse funcs)]\n    (fn [& args]\n      (reduce (fn [res f] (f res)) (apply fun args) funs))))", "user": "5169d422e4b051e2a73aba53"}, {"problem": 58, "code": "(fn cmp [& fns]  \n  (fn [& p] \n    (if (empty? fns) (first p)\n    \t((apply cmp (butlast fns))  \n\t        \t(apply (last fns) p)\n        )        \n)))", "user": "5654d0e1e4b0f9d632dd848c"}, {"problem": 58, "code": "(fn [& x] \n  (fn [& n] \n    (loop [func (drop-last x) value (apply (last x) n)]\n      (if (empty? func) \n          value \n          (recur (drop-last func) ((last func) value))))))", "user": "563c48e7e4b0bfe05bf11832"}, {"problem": 58, "code": "(fn [& xs]\n  (fn [& ys]\n    (reduce \n      #(%2 %1)\n      (apply (last xs) ys)\n      (reverse (butlast xs)))))", "user": "564c8e99e4b0284900eef674"}, {"problem": 58, "code": "(fn [& funs] (fn [& args] (first (reduce #(list (apply %2 %1)) args (reverse funs)))))", "user": "56481722e4b0284900eef628"}, {"problem": 58, "code": "(fn [x & xs]\n  (fn [& args]\n    ((fn step [[f & fs] a]\n       (if fs\n         (f (step fs a))\n         (apply f a)))\n     (cons x xs) args)))", "user": "5653da73e4b0f9d632dd8478"}, {"problem": 58, "code": "(fn [& f] (reduce #(fn [& a] (%1 (apply %2 a))) f))", "user": "5657fc1ae4b0f9d632dd84ad"}, {"problem": 58, "code": "(fn [& x]\n    (fn [& args]\n      (loop [in (rest (reverse x))\n             out (apply (first (reverse x)) args)]\n        (if (empty? in)\n          out\n          (recur (rest in)\n                 ((first in) out))))))", "user": "56171eade4b06b1bb2182a0c"}, {"problem": 58, "code": "(fn [& funcs]\n  (fn [& args]\n    (loop [fs (reverse funcs)\n           as args]\n      (if (= 1 (count fs))\n        (apply (first fs) as)\n        (recur (rest fs) (list (apply (first fs) as)))\n      )\n    )\n  )\n)", "user": "55380eeae4b09218d5f44fd9"}, {"problem": 58, "code": "(fn mycomp [& args1]\n  (fn [& args2]\n    (->> args1\n         reverse\n         (reduce #(list (apply %2 %1)) args2) \n         first)))", "user": "5666500ee4b0e91d5f5c566d"}, {"problem": 58, "code": "(fn __ [& fns]\n  (fn [& xs]\n    (let [helper (apply (last fns) xs)]\n      (loop [rem-fns (butlast fns)\n             interim helper]\n        (if (last rem-fns)\n          (recur (butlast rem-fns) ((last rem-fns) interim))\n          interim)))))", "user": "4f856adfe4b033992c121c44"}, {"problem": 58, "code": "(fn [& fns] (reduce (fn [a b] (fn [& args] (a (apply b args)))) fns))", "user": "564a560ae4b0284900eef654"}, {"problem": 58, "code": "(fn [& fns] (reduce (fn [acc v] (fn [& args] (acc (apply v args)))) identity fns))", "user": "5668dcc6e4b04acd4f672df8"}, {"problem": 58, "code": "(fn my-comp [& fns]\n  (fn [& args]\n    (let [[ffn & rfn] (reverse fns)]\n      (reduce #(%2 %) (apply ffn args) rfn))))", "user": "563dfc02e4b0da801c4e4662"}, {"problem": 58, "code": "(fn [& fns]\n  (fn [& args]\n    ((fn next-f [[f & fs]]\n       (if (empty? fs)\n         (apply f args)\n         (f (next-f fs))))\n     fns)))", "user": "56685a73e4b04acd4f672de5"}, {"problem": 58, "code": "(fn [& xs]\n  (fn [& ys]\n    (reduce #(%2 %1) (apply (last xs) ys) (rest (reverse xs)))))", "user": "52a3c66ce4b04e0c58e87c04"}, {"problem": 58, "code": "(fn [& fs]\n  (let [fs (reverse (list* fs))]\n    (fn [& args]\n      (loop [ret (apply (first fs) args) fs (next fs)]\n        (if fs\n          (recur ((first fs) ret) (next fs))\n          ret )))))", "user": "550e52dbe4b06e50f9beb165"}, {"problem": 58, "code": "(fn [& fs] (reduce (fn [f g] #(f (apply g %&))) fs))", "user": "566888e4e4b04acd4f672ded"}, {"problem": 58, "code": "(fn [& params] (fn [& p] (reduce #(%2 %) (apply (last params) p) (rest (reverse params)))))", "user": "56677192e4b04acd4f672dd5"}, {"problem": 58, "code": "(fn ! [& fns]\n             (let [fns (reverse fns)]\n               (fn [& args]\n                 (reduce #(%2 %) (apply (first fns) args) (rest fns)))))", "user": "56706f01e4b0a866af6896f2"}, {"problem": 58, "code": "(fn composer\n  [& functions]\n  (fn [& x]\n    (first (reduce #(vector (apply %2 %1)) x (reverse functions)))))", "user": "5564709ee4b0c656e3ff1807"}, {"problem": 58, "code": "(fn [& params] (fn [& params2](first(reduce #(vector(apply %2 %1)) params2 (reverse params)))))", "user": "566a3a26e4b0a866af689699"}, {"problem": 58, "code": "(fn [& fns] (fn [& a] ((fn rr [coll] (if (seq (rest coll)) ((first coll) (rr (rest coll))) (apply (first coll) a))) fns)))", "user": "5659679ae4b068f2fe63dbeb"}, {"problem": 58, "code": "(fn [& fs]\n   (fn [& args]\n     (loop [res args, fs (reverse fs)]\n       (if (empty? fs)\n         (first res)\n         (recur (vector (apply (first fs) res))  (rest fs))))))", "user": "56669819e4b0e91d5f5c5674"}, {"problem": 58, "code": "(fn [& funs]\n  (fn [& args]\n    (reduce (fn [prev fun]\n              \t(fun prev)) (apply (last funs) args) (-> funs reverse rest))))", "user": "4f9aa2a6e4b0dcca54ed6d0c"}, {"problem": 58, "code": "(fn compp [& fs]\n      (fn [& args]\n        (reduce \n         #(%2 %1) \n         (apply (last fs) args) \n         (drop 1 (reverse fs)))))", "user": "567476bde4b05957ce8c6139"}, {"problem": 58, "code": ";(fn [& fns] (loop [fns fns f (fn [x] x)] (if (seq fns) (recur (rest fns) (fn [& x] (f (apply (first fns) x)))) f)))\n(fn [& funcs]\n  (fn [& args]\n    (reduce #(%2 %1) (apply (last funcs) args) (rest (reverse funcs)))))", "user": "55efb51ee4b066087aa9453b"}, {"problem": 58, "code": "(fn [& fns] (reduce (fn [f acc] (fn [& args] (f (apply acc args)))) fns))", "user": "56201509e4b064ca9f4b16da"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& v]\n    (let [fs (reverse fs)]\n      (reduce #(%2 %1) \n              (apply (first fs) v) \n              (rest fs)))))", "user": "5591cc56e4b0604b3f94d582"}, {"problem": 58, "code": "(fn comb [& funcs]\n  (fn [& args]\n    (first\n      (reduce #(vector (apply %2 %1)) args (reverse funcs )))))", "user": "5672f58fe4b05957ce8c611a"}, {"problem": 58, "code": "(fn compose [first & more]\n  (fn [& args]\n    (if (empty? more)\n      (apply first args)\n      (first (apply (apply compose more) args)))))", "user": "5654e024e4b0f9d632dd848d"}, {"problem": 58, "code": "(fn n-comp [& fns]\n  (fn [& args]\n    (reduce (fn [result next-fn] (next-fn result))\n      (apply (last fns) args) (rest (reverse fns)))))", "user": "56540485e4b0f9d632dd847a"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& args]\n    (loop [fx (apply (last fs) args) f1 (butlast fs)]\n      (if f1\n        (recur ((last f1) fx) (butlast f1))\n        fx))))", "user": "56427910e4b08d4f616f5f19"}, {"problem": 58, "code": "(fn [& f] \n  (fn [& args] \n    (loop [ret args\n           funcs (reverse f)]\n      (if (empty? funcs) (first ret)\n        (recur [(apply (first funcs) ret)] (rest funcs))))))", "user": "554680cbe4b0a04f7929953e"}, {"problem": 58, "code": "(fn [& fns]\n    (fn [& arguments]\n      (loop [funcs (reverse fns)\n             args arguments]\n        (if-let [s (seq funcs)]\n          (recur (rest s) (list (apply (first s) args)))\n          (first args))\n      )\n    )\n  )", "user": "536ecd9fe4b0fc7073fd6e76"}, {"problem": 58, "code": "(fn [& fs] (loop [fs fs f identity]\n            (if (empty? fs) f (recur (rest fs) #(f (apply (first fs) %&))))))", "user": "5547b72be4b0a04f79299550"}, {"problem": 58, "code": "(fn [& fns]\n  (fn apply-comp [& args]\n    (loop [f (reverse fns)\n           a args]\n      (if-not (first f)\n        (first a)\n        (recur (rest f) [(apply (first f) a)])))))", "user": "567c2322e4b05957ce8c61af"}, {"problem": 58, "code": "(fn c [f & fs]\n  (if (empty? fs)\n    f\n    (fn [& x] (f (apply (apply c fs) x)))))", "user": "56483562e4b0284900eef629"}, {"problem": 58, "code": "(fn [& fs]\n  (reduce (fn [f g]\n            #(f (apply g %&))) fs))", "user": "5675cdf1e4b05957ce8c614d"}, {"problem": 58, "code": "(fn comp* [& fs]\n  (fn [& args]\n    (let [fsr (reverse fs)]\n      (let [f (first fsr)\n            xs (rest fsr)\n            f* (fn [agg f**]\n                 (f** agg))]\n        (reduce f* (apply f args) xs)))))", "user": "567ea95de4b0feffd0d18eb6"}, {"problem": 58, "code": "(fn([f1 f2](\n   fn[& args](f1 (apply f2 args))))\n  ([f1 f2 f3](\n   fn[& args](f1 (f2 (apply f3 args))))))", "user": "5677f9ffe4b05957ce8c616f"}, {"problem": 58, "code": "(fn comb [& funcs]\n  (fn [& args]\n    (first\n      (reduce #(vector (apply %2 %1)) args (reverse funcs )))))", "user": "567cef8ce4b05957ce8c61c1"}, {"problem": 58, "code": "(fn [& fs] (fn [& args]\n                          (loop [a (apply (last fs) args) fs (butlast fs)]\n                            (if fs\n                              (recur ((last fs) a) (butlast fs))\n                              a))))", "user": "555c38d9e4b0b056612e2249"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& xs]\n    (let [revfs (reverse fs)]\n      (loop [out (apply (first revfs) xs) in (rest revfs)]\n        (if (empty? in) out (recur ((first in) out) (rest in)))))))", "user": "564a5a09e4b0284900eef656"}, {"problem": 58, "code": "(fn my-comp [& fns]\n  (fn [& args]\n    (loop [x args fns (reverse fns)]\n      (if (empty? fns)\n        (first x)\n        (recur [(apply (first fns) x)] (rest fns))))))", "user": "508f4343e4b0ea685a20f767"}, {"problem": 58, "code": "(fn [& fs]\n  (reduce (fn [f g] #(f (apply g %&))) fs))", "user": "567931e9e4b05957ce8c6184"}, {"problem": 58, "code": "(fn [& fs] (reduce (fn [f g] #(f (apply g %&))) fs))", "user": "56810479e4b0966858e4d8f8"}, {"problem": 58, "code": "(fn [& functions]\n  (fn [& args]\n    (first (reduce #(vector (apply %2 %1)) args (reverse functions)))))", "user": "567695c2e4b05957ce8c6157"}, {"problem": 58, "code": "(fn [& fns]\n  (fn [& args]\n    (first\n         (reduce (fn [acc next] (list (apply next acc))) args (reverse fns)))))", "user": "567c7fefe4b05957ce8c61bc"}, {"problem": 58, "code": "(fn [& xs] \n  ((fn \n     ([result fns] \n       (if (empty? fns) \n         result \n         (recur \n          (fn [& params] (result (apply (first fns) params))) \n        (rest fns))))) \n   identity xs))", "user": "567798afe4b05957ce8c6169"}, {"problem": 58, "code": "(fn comp'\n  ([f] f)\n  ([f g] (fn [& args] (f (apply g args))))\n  ([f g & more] (reduce comp' (list* f g more))))", "user": "5680104ae4b0966858e4d8ea"}, {"problem": 58, "code": "(let [comp-pair\n      (fn [a b]\n       (fn [& args]\n         (a (apply\n             b\n             args))))]\n     (fn [& fns]\n       (reduce\n        comp-pair\n        fns)))", "user": "54b10d08e4b09f271ff37d18"}, {"problem": 58, "code": "(fn [& fs]\n(fn [& x]\n(reduce (fn [p f] (f p)) (apply (last fs) x) \n(rest (reverse fs)))))", "user": "565b941ce4b068f2fe63dc07"}, {"problem": 58, "code": "(fn comb [& funcs]\n  (fn [& args]\n    (first\n      (reduce #(vector (apply %2 %1)) args (reverse funcs )))))", "user": "566efb2be4b0a866af6896e2"}, {"problem": 58, "code": "(fn comp*  \n  [& fs]\n  (reduce (fn \n            [f g]\n            #(f (apply g %&)))\n          fs))", "user": "566f7749e4b0a866af6896e9"}, {"problem": 58, "code": "(fn [f1 & others]\n               (fn [& coll]\n                 (loop [f1 f1\n                        others others\n                        coll (if (coll? coll) coll (list coll))]\n                   (if (empty? others)\n                     (apply f1 coll) \n                     (recur f1\n                            (drop-last others)\n                            (let [new-coll (apply (last others) coll)]\n                              (list new-coll))\n                     )))))", "user": "567d18c9e4b05957ce8c61c4"}, {"problem": 58, "code": "(fn mycomp\n  ([f] f)\n  ([f &\tmore] (fn [ & args] (f (apply (apply\tmycomp more) args))))\n)", "user": "568513c4e4b04eec3ec5cfc5"}, {"problem": 58, "code": "(fn [& fs] (fn [& args] (first (reduce #(list (apply %2 %)) args (reverse fs)))))", "user": "5275f7a2e4b03e8d9a4a74d0"}, {"problem": 58, "code": "(fn [& fs]\n    (fn [& args]\n      ((fn [fs args]\n        (prn (count fs) args)\n        (if (empty? fs) (first args)\n          (recur (rest fs) [(apply (first fs) args)])\n        )\n        ) (reverse fs) args)\n      )\n  )", "user": "5681afaae4b0945ebc182a87"}, {"problem": 58, "code": "(fn my-comp\n  ([f] f)\n  ([f & fs]\n   (let [fcomp (apply my-comp fs)]\n     (fn [& args] (f (apply fcomp args))))))", "user": "56897739e4b0dcc4269f407d"}, {"problem": 58, "code": ";((\n (fn [& fs]\n     (let [rfs (rest (reverse fs)) ff (last fs)]\n       (fn [& v]\n        \n         (loop [l rfs x (apply ff v)]\n           (if (seq l)\n             (recur (rest l) ((first l) x))\n             x\n             )\n           )\n       )\n     ))\n ;rest rest rest\n;) [1 2 3 4])", "user": "52503747e4b0541d1855b828"}, {"problem": 58, "code": "(fn fc [h & t] \n  (if (empty? t)\n    (fn [& y] (apply h y))\n    (fn [& y] (h (apply (apply fc t) y)))\n  )\n)", "user": "5672a711e4b05957ce8c6117"}, {"problem": 58, "code": "(fn [& funcs] \n   \t(fn [& args] \n   \t\t(loop [res args fs funcs]\n   \t\t\t(if (<= (count fs) 0)\n\t   \t\t\t(first res)\n\t   \t\t\t(recur [(apply (last fs) res)] (butlast fs))\n   \t\t\t)\n   \t\t)))", "user": "5578f292e4b05c286339e08f"}, {"problem": 58, "code": "(fn [& funs]\n  (fn [& par]\n  \t(loop [s funs p par]\n      (if (= s '())\n        (first p)\n        (recur (drop-last s) [(apply (last s) p)])))))", "user": "568a743ee4b0dcc4269f408e"}, {"problem": 58, "code": ";(fn comp'\n;  ([f] (fn [& args] (apply f args)))\n;  ([f & fs] (fn [& args] (f (apply (apply comp' fs) args)))))\n(fn comp''\n  [& fs]\n  (let [[rf & rfs] (reverse fs)]\n    (fn [& args] (reduce #(%2 %1) (apply rf args) rfs))))", "user": "56488119e4b0284900eef632"}, {"problem": 58, "code": "(fn f [& func]\n  (fn g [& param]\n     (first (reduce #(conj [] (apply %2 %1)) param (reverse func)))))", "user": "56795deae4b05957ce8c6187"}, {"problem": 58, "code": "(fn cp [f & fs]\n    (if (nil? fs)\n      (fn [& i] (apply f i))\n      (fn [& i] (f (apply (apply cp fs) i)))))", "user": "56761ab1e4b05957ce8c6154"}, {"problem": 58, "code": "(fn my_comp\n  ([f] f)\n  ([f & fs] #(f (apply (apply my_comp fs) %&))))", "user": "567b39b6e4b05957ce8c61a3"}, {"problem": 58, "code": "(fn my-comp [& fns]\n  #(if (empty? fns)\n     (first %&)\n     ((apply my-comp (butlast fns))\n      (apply (last fns) %&))))\n\n\n;; (fn my-comp [& funcs]\n;;   (fn [& args]\n;;     (first\n;;      (reduce #(vector (apply %2 %1)) args (reverse funcs )))))", "user": "568e1871e4b0dcc4269f40cc"}, {"problem": 58, "code": "(fn f [& fs]\n  (fn [& xs]\n    (loop [fs-remaining fs\n           result nil]\n      (if (seq? fs-remaining)\n        (recur (butlast fs-remaining) (cond \n                                        (nil? result) (apply (last fs-remaining) xs)\n                                       :else ((last fs-remaining) result)))\n       result))))", "user": "5657fed1e4b0f9d632dd84ae"}, {"problem": 58, "code": "(fn [& funcs]\n   (fn [& args]\n     ( let [[ff & rf] (reverse funcs), x (apply ff args)]\n     (reduce #(%2 %1) x rf))))", "user": "566a8600e4b0a866af68969d"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& c]\n    (loop [c c, fs (reverse fs)]\n      (if (empty? fs)\n        (first c)\n        (recur [(apply (first fs) c)] (rest fs))))))", "user": "4e268c6e535deb9a81d77ef4"}, {"problem": 58, "code": "(fn [& fs]\n  (reduce (fn [f g]\n            #(f (apply g %&))) fs))", "user": "550345fee4b086ebe8a79c6c"}, {"problem": 58, "code": "(fn func-comp [& funcs]\n  (fn\n    ([coll]\n     (loop [rfuncs (reverse funcs) c1 coll]\n\n       (if (seq rfuncs)\n         (recur (rest rfuncs) ((first rfuncs) c1))\n         c1)))\n    ([x & args]\n     (let [v (apply (last funcs) x args)]\n       (loop [rfuncs (rest (reverse funcs)) v1 v]\n         (if (seq rfuncs)\n           (recur (rest rfuncs) ((first rfuncs) v1))\n           v1))))))", "user": "5693a53ee4b0dcc4269f4106"}, {"problem": 58, "code": "(fn my-comp\n  ([] identity)\n  ([f] f)\n  ([f g] \n     (fn \n       ([] (f (g)))\n       ([x] (f (g x)))\n       ([x y] (f (g x y)))\n       ([x y z] (f (g x y z)))\n       ([x y z & args] (f (apply g x y z args)))))\n  ([f g h] \n     (fn \n       ([] (f (g (h))))\n       ([x] (f (g (h x))))\n       ([x y] (f (g (h x y))))\n       ([x y z] (f (g (h x y z))))\n       ([x y z & args] (f (g (apply h x y z args))))))\n  ([f1 f2 f3 & fs]\n    (let [fs (reverse (list* f1 f2 f3 fs))]\n      (fn [& args]\n        (loop [ret (apply (first fs) args) fs (next fs)]\n          (if fs\n            (recur ((first fs) ret) (next fs))\n            ret))))))", "user": "5688a01be4b0dcc4269f406d"}, {"problem": 58, "code": "(fn\n  ([f g]\n   (fn [& args]\n           (f (apply g args))))\n  ([f g h] \n   (fn [& args]\n     (f (g (apply h args))))))", "user": "55f85b93e4b03cbcff9738ae"}, {"problem": 58, "code": "(fn [& functions]\n  (fn [& args]\n    ((fn recursive [[f & fs] as]\n       (if fs\n         (f (recursive fs as))\n         (apply f as)\n       )\n    ) functions args)\n  )\n)", "user": "56979bb7e4b0e0b3d3318cac"}, {"problem": 58, "code": "(fn gen\n  ([f & fs]\n   (if (empty? fs)\n     f\n     (fn [& args]\n       (f (apply (apply gen fs) args))))))", "user": "55ba4a78e4b01b9910ae29cf"}, {"problem": 58, "code": "(fn cc\n  [& f]\n  (if (= (count f) 1) (first f)\n      (fn [& x] ((first f) (apply (apply cc (rest f)) x)))))", "user": "569d095fe4b0542e1f8d1470"}, {"problem": 58, "code": "(fn t\n   ([f g] (fn [x & args] (f (apply g x args)))) \n   ([f g & fs] (reduce t (list* f g fs)))\n   )", "user": "569951e4e4b0542e1f8d143e"}, {"problem": 58, "code": "(fn my-comp [& fs]\n  (fn [& args]\n    (reduce (fn [a-val a-fun] (a-fun a-val))\n            (apply (last fs) args)\n            (reverse (butlast fs)))))", "user": "563fc1f2e4b08d4f616f5ed7"}, {"problem": 58, "code": "(fn f ([f g] (fn [& args] (f (apply g args)))) ([f g h] (fn [& args] (f (g (apply h args))))))", "user": "569c40cee4b0542e1f8d1462"}, {"problem": 58, "code": "(fn [& fns]\n    (fn [arg1 & args]\n      (reduce (fn [coll f] (if (and (not (nil? args))\n                                   (some (set\n                                          (if (coll? coll)\n                                            coll\n                                            (list coll)))\n                                         (set args))\n                                   (or (seq? coll) (vector? coll)))\n                            (apply f coll)\n                            (f coll)))\n              (if (nil? args) arg1 (cons arg1 args))\n              (reverse fns))))", "user": "56372c3ce4b0bfe05bf117d1"}, {"problem": 58, "code": "(fn[& f] (fn[& a] (let [o (reduce #(list(apply %2 %1)) a (reverse f))] (first o))))", "user": "5339cb07e4b0e30313ee6caf"}, {"problem": 58, "code": "(fn my-comp [& fns]\n    (fn [& args]\n      (first (reduce (fn [values nextfn] (list (apply nextfn values))) args (reverse fns)))))", "user": "56548fd3e4b0f9d632dd8485"}, {"problem": 58, "code": "(fn [& fns]\n  (fn [& args]\n    (first (reduce (fn [acc f]\n              [(apply f acc)]\n              ) args (reverse fns)))\n    ))", "user": "56946d43e4b0dcc4269f411e"}, {"problem": 58, "code": "(fn my-comp [& all] (fn inner [& params] (first (reduce #(list (apply %2 %1)) params (reverse all)))))", "user": "56912f93e4b0dcc4269f40ef"}, {"problem": 58, "code": "(fn [& fns]\n  (fn [& args]\n    (let [rtl-fns (reverse fns)]\n      (reduce (fn [acc f]\n                (f acc)) \n              (apply (first rtl-fns) args) \n              (rest rtl-fns)))))", "user": "5630ce72e4b0bfe05bf11786"}, {"problem": 58, "code": "(fn foo [& fns]\n  (let [f (first fns) r (next fns)]\n    (if r\n      (fn [& args] (f (apply (apply foo r) args)))\n      f)))", "user": "56a01895e4b0542e1f8d149f"}, {"problem": 58, "code": "(fn [& fs] (reduce (fn [f g] #(f (apply g %&))) fs))", "user": "56a1b854e4b0542e1f8d14b2"}, {"problem": 58, "code": "(fn[& a] (reduce #(fn[& b] (%2 (apply % b))) (reverse a)))", "user": "56824e1be4b0945ebc182a91"}, {"problem": 58, "code": "(fn [& funcs]\n  (loop [acc   (last funcs)\n         funcs (reverse (butlast funcs))]\n    (if (seq funcs)\n      (recur (fn [& args] ((first funcs) (apply acc args))) (rest funcs))\n      acc)))", "user": "553b0d95e4b09218d5f44fff"}, {"problem": 58, "code": "(fn [& functions]\n  (fn [& args]\n \t (first (reduce (fn [acc f] [(apply f acc)]) args (reverse functions)))))", "user": "56a51f26e4b0542e1f8d14e0"}, {"problem": 58, "code": "(fn [& fns] \n  (let [comp2 (fn [f g] (fn [& args] (g (apply f args))))] \n    (reduce comp2 (reverse fns))))", "user": "569d2283e4b0542e1f8d1474"}, {"problem": 58, "code": "(fn ff [& fs]\n  (fn [& x]\n    (if (empty? fs)\n      (first x)\n      ((apply ff (butlast fs)) (apply (last fs) x)))))", "user": "56a38a4ce4b0542e1f8d14cc"}, {"problem": 58, "code": "(fn composition\n  ([f] f)\n  ([f g]\n   (fn [& arguments] (f (apply g arguments))))\n  ([f g & functions]\n   (reduce composition (composition f g) functions)))", "user": "56ac81ace4b03c432f187347"}, {"problem": 58, "code": "(fn fc ([f g](fn [& v](f (apply g v))))\n  ([f g h](fn [& v]((fc f g) (apply h v)))))", "user": "5686b7c7e4b0dcc4269f4057"}, {"problem": 58, "code": "(fn [& fs] (reduce (fn [f1 f2] #(f1 (apply f2 %&))) fs ))", "user": "525b4e8de4b0cb4875a45d0f"}, {"problem": 58, "code": "(fn mycomp ([] identity)\n    ([f] f)\n    ([f g] \n      (fn \n      ([] (f (g [])))\n      ([x] (f (g x)))\n      ([x y] (f (g x y)))\n      ([x y z] (f (g x y z)))\n      ([x y z & args] \n        (f (apply g x y z args))\n      )\n     )\n    )\n    ([f g & fs]\n       (reduce mycomp (list* f g fs))\n    ) \n)", "user": "556f2009e4b09a3098a52519"}, {"problem": 58, "code": "(fn [& f] \n      (fn [& g] \n        (reduce (fn [r x] (x r)) (apply (first (reverse f) ) g) (rest(reverse f)))\n        ))", "user": "56066e82e4b08b23635d3173"}, {"problem": 58, "code": "(fn [& fs]\n  (reduce (fn [comp-f f] \n            (fn [& xs]\n              (comp-f (apply f xs)))) \n          fs))", "user": "56a79eb0e4b07966d5a8a05d"}, {"problem": 58, "code": "(fn mycomp [& fs] (\n                                         reduce (fn [acc f1]\n                                                 \n                                              \n                                                  (fn [& tt] (f1( apply acc tt ))) \n                                                  ) \n                                                (fn [& tt] ( apply (first (reverse fs)) tt))\n                                                (rest (reverse fs))\n                                                ))", "user": "56ae4c21e4b03c432f18735c"}, {"problem": 58, "code": "(fn [& fs] (reduce (fn [f g] #(f (apply g %&))) fs))", "user": "56874171e4b0dcc4269f405c"}, {"problem": 58, "code": "(fn [& fs] \n(fn [& p] \n(loop [\na (reverse fs) res1 p]\n(if (empty? a)\n(first res1)\n(let [res (apply (first a) res1)]\n(recur (rest a) (list res))\n))\n)))", "user": "56a75810e4b0542e1f8d14fc"}, {"problem": 58, "code": "(fn [& fs] \n    (fn [& args]\n      (reduce (fn [res ff] (ff res)) (apply (last fs) args) (rest (reverse fs)))))", "user": "51a3be77e4b0e77c4ca60bf8"}, {"problem": 58, "code": "(fn [& xs] (fn [& p] (first (reduce (fn [arg, func] [(apply func arg)]) p (reverse xs)))))", "user": "56b35565e4b0982f16b37e16"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& args]\n    (first\n     (reduce\n      (fn [acc f]\n        [(apply f acc)])\n      args\n      (reverse fs)))))", "user": "5617a540e4b06b1bb2182a12"}, {"problem": 58, "code": "#(fn [& args]\n    (first\n      (reduce (fn [acc f] (vector (apply f acc))) args (reverse %&))))", "user": "55ed5a2de4b0121d4835fdd8"}, {"problem": 58, "code": "(fn [x & xs]\n  (fn [& args]\n    ((fn step [[f & fs] a]\n       (if fs\n         (f (step fs a))\n         (apply f a)))\n     (cons x xs) args)))", "user": "56a8b818e4b07966d5a8a06d"}, {"problem": 58, "code": "(fn comp* [& fns]\n  (let [f1 (first fns)\n        rf (next fns)]\n    (if rf\n      (fn [& args] (f1 (apply (apply comp* rf) args)))\n      f1)))", "user": "56a76f36e4b07966d5a8a05b"}, {"problem": 58, "code": "(fn [& args]\n  (letfn [(runner [f fs arg]\n                 (if (empty? fs)\n                   (f arg)\n                   (runner (last fs) (butlast fs) (f arg))))\n        ]\n    (fn [& iargs]\n      (let [x (apply (last args) iargs)\n            bl (butlast args)]\n        (if (empty? bl)\n          x\n          (runner (last bl) (butlast bl) x))))))", "user": "540d5085e4b0addc1aec670e"}, {"problem": 58, "code": "(fn [& fns]\n  (fn [& args]\n    (loop [result args fns (reverse fns)]\n      (if (empty? fns)\n        (first result)\n        (recur [(apply (first fns) result)] (rest fns))))))", "user": "56b965d9e4b0f26550335931"}, {"problem": 58, "code": "(fn [& funcs] \n  (let [[f & after] (reverse funcs)]\n\t(fn [& args] \n\t\t(reduce #(%2 %1) (apply f args) after))))", "user": "56bb9ccce4b0f26550335959"}, {"problem": 58, "code": "(fn [& fs]\n  (let [[f & fs] (reverse fs)]\n    (fn [& args]\n      (reduce (fn [acc f] (f acc))\n              (apply f args)\n              fs))))", "user": "534da51fe4b084c2834f4aa4"}, {"problem": 58, "code": "(fn [& funcs]\n  (fn [& params]\n    (loop [[x & xs :as all] (reverse funcs)\n           appliables params]\n      (if (empty? all)\n        (first appliables)\n        (recur xs [(apply x appliables)])))))", "user": "5655e056e4b0f9d632dd849b"}, {"problem": 58, "code": "(fn [& fs] \n  (fn [& args]\n    (reduce #(%2 %1) (apply (last fs) args) (reverse (drop-last fs)))))", "user": "55e6809ee4b050e68259b48a"}, {"problem": 58, "code": "(fn [& fs] \n  (fn [& args] \n    (reduce #(%2 %1) \n            (apply (last fs) args) \n            (reverse (butlast fs)))))", "user": "56b86e64e4b0f26550335924"}, {"problem": 58, "code": "(fn my-comp [& fs]\n  (fn [& args]\n    (apply (fn unroll\n             ([g] (apply g args))\n             ([g & gs] (g (apply unroll gs)))) fs)))", "user": "5638b88de4b0bfe05bf117e9"}, {"problem": 58, "code": "(fn [& fs] \n  (reduce \n   (fn [f g] \n     #(f (apply g %&))) fs))", "user": "56bca51ae4b0f26550335963"}, {"problem": 58, "code": "(fn my-comp [& funcs]\n  (fn [& args]\n    (reduce (fn [result func]\n              (func result))\n            (apply (last funcs) args)\n            (reverse (butlast funcs)))))", "user": "56c33ceae4b05cc29241ee89"}, {"problem": 58, "code": "(fn [& funcs]\n  (let [f (first funcs) gs (rest funcs)]\n  (if (empty? gs)\n    f\n    (recur (conj (rest gs) (fn [& args] (f (apply (first gs) args)))))\n  )\n  )\n  )", "user": "55009d17e4b07d26eda61d5d"}, {"problem": 58, "code": "(fn [& fs]\n  (reduce #(fn [& xs] (%2 (apply % xs)))\n          (reverse fs)))", "user": "56ae214ce4b03c432f18735a"}, {"problem": 58, "code": "(fn my-comp\n  ([f g]\n    (fn\n      ([& more] (f (apply g more)))))\n  ([f g & more]\n    (if (seq more)\n      (my-comp f (apply my-comp g more))\n      (my-comp f g))))", "user": "56a36f76e4b0542e1f8d14ca"}, {"problem": 58, "code": ";; based on p57, they probably want a recursive soln, but meh.\n\n(fn [& F]\n\n(fn [& args] \n\n(loop [fns (butlast F), acc (apply (last F) args) ]\n  (if (empty? fns)\n    acc\n    (recur\n     (butlast fns) ; remove one function\n     ((last fns) acc) ;apply last fn to result\n     )))))", "user": "533a2f7be4b0e30313ee6cb8"}, {"problem": 58, "code": "(fn [& fns]\n  (let [rev (reverse fns)]\n    (fn [& args] (reduce #(%2 %1) (apply (first rev) args) (rest rev)))))", "user": "536673a8e4b0243289761e76"}, {"problem": 58, "code": "#(fn [& args]\n   (reduce (fn [a f] (f a))\n           (apply (last %&) args)\n           (reverse (butlast %&))))", "user": "56baa68ce4b0f26550335947"}, {"problem": 58, "code": "(fn [& funcs] (fn [& s] (reduce #(%2 %1) (apply (last funcs) s) (reverse (butlast funcs)))))", "user": "56baab13e4b0f26550335948"}, {"problem": 58, "code": "#(fn [& args]\n   (let [fns (reverse %&)]\n     (loop [rest-fns (rest fns), result (apply (first fns) args)]\n       (if (empty? rest-fns)\n         result\n         (recur (rest rest-fns) ((first rest-fns) result))))))", "user": "567e418fe4b0feffd0d18eb1"}, {"problem": 58, "code": "(fn myrec [& fcoll] \n  (let \n   [l (last fcoll) \n    b (butlast fcoll)]\n    (if (= 1 (count fcoll)) \n     l\n     (let [f (apply myrec (butlast fcoll))] \n      (fn [& args] \n        (f (apply l args))\n      )\n     )\n    )\n   )\n)", "user": "56c4f971e4b05cc29241ee9d"}, {"problem": 58, "code": "(fn [& f]\n  (fn [& args]\n    (reduce #(%2 %1) (apply (last f) args) (rest (reverse f)))))", "user": "56cd44fde4b0ea9b8538f749"}, {"problem": 58, "code": "(fn [& fus] (fn [& args] (reduce #(%2 %1) (apply (first (reverse fus)) args) (drop 1 (reverse fus)))))", "user": "56cd75bee4b0ea9b8538f74b"}, {"problem": 58, "code": "(fn [& fns]\n  (fn [& args]\n    (first (reduce #(vector (apply %2 %1)) args (reverse fns)))))", "user": "53483a32e4b084c2834f4a57"}, {"problem": 58, "code": "(fn funCompX [& fs] (partial (fn funCompP [fs & x] ((fn funCompRec [fs x]\n\t(if (nil? (second fs))\n\t\t(apply (first fs) x)\n\t\t((first fs) (funCompRec (rest fs) x))\n\t)\n)\n fs (vec x))) (vec fs)))", "user": "568820e8e4b0dcc4269f4067"}, {"problem": 58, "code": "(fn my-comp\n  [& fns]\n  (fn [& args]\n    (let [ordered-fns (reverse fns)\n          first-result (apply (first ordered-fns) args)\n          remaining-fns (rest ordered-fns)]\n      (reduce (fn [result fun] (fun result))\n              first-result\n              remaining-fns))))", "user": "56603e5fe4b068f2fe63dc4a"}, {"problem": 58, "code": "(fn [& f] (fn [& s] (reduce #(%2 %) (#(apply (last f) %) s) (rest (reverse f)))))", "user": "56c08696e4b060a8e693e3aa"}, {"problem": 58, "code": ";(fn [& fs] (fn [& x] (reduce #(%2 %1) (apply (last fs) x) (reverse (butlast fs))))) \n\n(fn [& fs]\n  (let [fsr (reverse fs)] ;; they need to be applied in reverse order\n    (fn [& x]\n      (reduce #(%2 %1) (apply (first fsr) x) (rest fsr)))))", "user": "50fac9e3e4b07934dda8b0d1"}, {"problem": 58, "code": "(fn my-comp\n  ([f1 f2]\n   (fn [& args]\n     (f1 (apply f2 args))))\n  ([f1 f2 & fs]\n   (apply my-comp #(f1 (f2 %))\n          fs)))", "user": "5561d2c2e4b0c656e3ff17cd"}, {"problem": 58, "code": "(fn ([f1 f2] (fn [x] (f1 (f2 x))))\n\t([f1 f2 f3] (fn[& args] (f1 (f2 (reduce f3 args)))))\t\n)", "user": "56d645f2e4b0ea9b8538f7cc"}, {"problem": 58, "code": "(fn comp' ([f g] (fn ([a] (f (g a)))\n                     ([a & args] (f (apply g a args)))))\n          ([f g & fns] (fn ([a] (f ((apply comp' g fns) a)))\n                           ([a & args] (f (apply (apply comp' g fns) a args))))))", "user": "56d68cbae4b0ea9b8538f7cd"}, {"problem": 58, "code": "(fn my-comp\n  ([f] f)\n  ([f & tail] #(f (apply (apply my-comp tail) %&))))", "user": "56bf4ac0e4b0f26550335985"}, {"problem": 58, "code": "(fn [ & fns]\n  (fn [& args]\n    (loop [result nil the-fns (reverse fns)]\n      (if (next the-fns)\n        (if (nil? result)\n          (recur (apply (first the-fns) args) (next the-fns))\n          (recur ((first the-fns) result) (next the-fns)))\n        ((first the-fns) result)))))", "user": "56cccd99e4b0ea9b8538f743"}, {"problem": 58, "code": "(fn my-comp [& fs] \n  (let [[f & r] fs]\n    (if (empty? r)\n      #(apply f %&)\n      #(f (apply (apply my-comp r) %&))\n    )\n  )\n)", "user": "56d80542e4b0ea9b8538f7e1"}, {"problem": 58, "code": "(fn my-comp\n  ([x y]\n   (fn [& ls]\n     (x (apply y ls))))\n  ([x y & xs]\n   (apply my-comp (my-comp x y) xs)))", "user": "55f73078e4b06e875b46cea4"}, {"problem": 58, "code": "#(letfn [(mycomp [x y] (fn [& args] (x (apply y args))))]\n   (reduce mycomp %&))", "user": "56d1afd9e4b0ea9b8538f791"}, {"problem": 58, "code": "(fn [& functions]\n  (fn [& param]\n    (first\n      (reduce #(vector (apply %2 %1)) param (reverse functions)))))", "user": "564d3169e4b0284900eef67c"}, {"problem": 58, "code": "(fn fn-comp [& fns]\n\t(fn [& xs]\n\t\t (let [frst (first (reverse fns))\n\t\t\t   remaining (rest (reverse fns))]\n\n\t\t\t (reduce (fn [r f] (f r))\n\t\t\t\t\t (apply frst xs) remaining)))\n\t)", "user": "552bd5c2e4b0ffed3738f969"}, {"problem": 58, "code": "(fn [& funcs]\n  (fn [& args]\n    (let [[f & fs] (reverse funcs)]\n      (reduce #(%2 %1) (apply f args) fs))))", "user": "54f86b8ce4b01ecee9d88828"}, {"problem": 58, "code": "(fn [& functions]\n  (fn [& args]\n    (first\n      (reduce (fn [result function]\n                (list (apply function result)))\n              args\n              (reverse functions)))))", "user": "56d4b22de4b0ea9b8538f7bb"}, {"problem": 58, "code": "(fn [& reverse-funcs] \n  (let [fns (reverse reverse-funcs)]\n    (fn [& xs] \n      (loop [f (apply (first fns) xs) fs (rest fns)]\n        (if (empty? fs)\n          f\n          (recur ((first fs) f) (rest fs)))))))", "user": "56db8fbde4b0ea9b8538f80c"}, {"problem": 58, "code": "(fn my-comp\n  ([] identity)\n  ([f] f)\n  ([f g]\n   (fn\n     ([] (f (g)))\n     ([x] (f (g x)))\n     ([x y] (f (g x y)))\n     ([x y z] (f (g x y z)))\n     ([x y z & args] (f (apply g x y z args)))))\n  ([f g & fs]\n   (reduce my-comp (list* f g fs))))", "user": "56d5fd24e4b0ea9b8538f7c5"}, {"problem": 58, "code": "(fn [& af] #(reduce (fn [a f] (f a)) (apply (last af) %&) (reverse (butlast af))))", "user": "56aed78fe4b03c432f187363"}, {"problem": 58, "code": "#(fn [& a]\n   (let [[f & fs] (reverse %&)]\n     (reduce (fn [acc f]\n               (f acc))\n             (apply f a)\n             fs) ))", "user": "56441634e4b0018b46ad8c08"}, {"problem": 58, "code": "(fn [& f]\n  (fn [& coll]\n    (first\n     (reduce #(vector (apply %2 %1)) coll (reverse f)))))", "user": "56df9203e4b0ca2494a095fc"}, {"problem": 58, "code": "(fn [& funcs]                                                                      \n  (fn [& args]                                                                     \n    (reduce #(%2 %1) (apply (last funcs) args) (reverse (butlast funcs)))))", "user": "563536f8e4b0bfe05bf117c5"}, {"problem": 58, "code": "(fn rec [f & res]\n  (fn [& r]\n    (if (empty? res)\n      (apply f r)\n      (f (apply (apply rec res) r))\n      )))", "user": "56d7f340e4b0ea9b8538f7df"}, {"problem": 58, "code": "(fn [& fns]\n  (fn [& args]\n    (let [revfns (reverse fns)]\n       (reduce #(%2 %) (apply (first revfns) args) (rest revfns)))))", "user": "56e2dbf4e4b03a7c14b85a3b"}, {"problem": 58, "code": "(fn [& xs]\n  (let [[f & r] (reverse xs)]\n    (fn [& paras] \n      (loop [res (apply f paras)\n            [f1 & r1] r]\n       (if f1 (recur (f1 res) r1) res)))))", "user": "56df254be4b0ca2494a095ea"}, {"problem": 58, "code": "(fn [& args]\r\n  (reduce (fn [f g] (fn [& rest] (f (apply g rest)))) args))", "user": "566470b9e4b0e91d5f5c5658"}, {"problem": 58, "code": "(fn [& fns]\n  (fn [& args]\n    (reduce #(%2 %1) (apply (last fns) args) (rest (reverse fns)))))", "user": "56d63729e4b0ea9b8538f7ca"}, {"problem": 58, "code": "(fn comp-n [& functions]\n  (reduce (fn [comp-function next-function]\n            (fn [& args] (next-function (apply comp-function args))))\n          (last functions)\n          (reverse (butlast functions))))", "user": "56e48302e4b03a7c14b85a4e"}, {"problem": 58, "code": "(fn\n   [& fs]\n   (fn\n     [& args]\n     (reduce \n       (fn [result f] (f result))\n       (apply (last fs) args)\n       (rest (reverse fs)))))", "user": "56050f06e4b08b23635d3161"}, {"problem": 58, "code": "(fn func\n  ([f] f)\n  ([g f] (fn [& x] (g (apply f x))))\n  ([h g f] (fn [& x] (h (g (apply f x)))))\n  ([i h g f] (fn [& x] (i (h (g (apply f x)))))))", "user": "56278266e4b00e49c7cb47d3"}, {"problem": 58, "code": "(fn\n  [& fns]\n  (fn [& initial-args]\n    (let [rev-fns (reverse fns)\n          initial-val (apply (first rev-fns) initial-args)]\n      (reduce (fn [arg f] (f arg))\n              initial-val\n              (rest rev-fns)))))", "user": "52d38c51e4b099d49816f0c5"}, {"problem": 58, "code": "(fn [& x] (reduce (fn [f g] (fn [& a] (f (apply g a)))) x))", "user": "5250a13ee4b0541d1855b839"}, {"problem": 58, "code": "(fn mc\n    ([f1 f2]\n     (fn [& args]\n       (f1 (apply f2 args))))\n    ([f1 f2 & fs]\n     (mc f1 (apply mc f2 fs))))", "user": "56eaad95e4b04a395b9a040f"}, {"problem": 58, "code": "(fn [& f] (fn [& args] (reduce #(%2 %1) args (cons (partial apply (last f)) (rest (reverse f))))))", "user": "56e6ef89e4b02e7e935eb6d0"}, {"problem": 58, "code": "(fn [& fns]\n  (fn [ & data] \n    (first (reduce #(list (apply %2 %1)) data (apply vector (reverse fns))))))", "user": "55f9b2b6e4b03cbcff9738c8"}, {"problem": 58, "code": "(fn comp' [& fs]\n  (fn [& args]\n    (reduce (fn [acc f]\n              (f acc))\n            (apply (last fs) args)\n            (rest (reverse fs)))))", "user": "569dd6e8e4b0542e1f8d1480"}, {"problem": 58, "code": "(fn compose\n  [& funcs]\n  (let [[f & fns] (reverse funcs)]\n    (fn composed-args \n    \t[& args]\n    \t(letfn [(f0 [] (apply f args))]\n      \t\t((reduce (fn [fs g] #(g (fs))) f0 fns))))))", "user": "56e99ec8e4b04a395b9a03fb"}, {"problem": 58, "code": "(fn [& fns]\n  (fn [& args]\n    (loop [result (apply (last fns) args) fnlist (butlast fns)]\n      (if (empty? fnlist) result\n        (recur ((last fnlist) result) (butlast fnlist))))))", "user": "53d977f1e4b0e771c302547a"}, {"problem": 58, "code": "(fn solve [f & fs] \n  (if (= fs nil) \n    #(apply f %&)\n    #(f (apply (apply solve fs) %&))\n  )\n)", "user": "56f258d3e4b04a395b9a04a1"}, {"problem": 58, "code": "(fn[& xs]\n\t  (reduce\n\t  \t(fn[f g]\n          (fn[& args]\n            (f (apply g args)))) xs))", "user": "55101237e4b06e50f9beb181"}, {"problem": 58, "code": "(fn com [& fs]\n    (fn [& args] (reduce (fn [x y] (y x)) (apply (first (reverse fs)) args) (rest (reverse fs)))))", "user": "567f988be4b0feffd0d18ebe"}, {"problem": 58, "code": "(fn [& fns]\n  (let [fs (reverse fns)]\n    (fn [& args]\n      (reduce #(%2 %1) (apply (first fs) args) (rest fs)))))", "user": "542a8d07e4b01498b1a71b43"}, {"problem": 58, "code": "(fn [& funcs] (reduce (fn [f,g] (fn [& args] (g (apply f args)))) (reverse funcs)))", "user": "56ec0af1e4b04a395b9a0430"}, {"problem": 58, "code": "(fn [& transforms]\n    (let [applier (fn\n                    [reapplier funcargs funclist]\n                    (let [interim [(apply (last funclist) funcargs)]]\n                      (if (> (count funclist) 1)\n                        (reapplier reapplier interim (butlast funclist))\n                        (first interim)\n                      )\n                    )\n                  )   \n          ]             \n      (fn [& input-data] (applier applier input-data transforms))\n      )\n    )", "user": "56ef11efe4b04a395b9a045b"}, {"problem": 58, "code": "(fn cmpose [& ops] \n   (fn combined-function [& args] \n     (first (reduce #(vector (apply %2 %1)) args (reverse ops)))))", "user": "56f188e9e4b04a395b9a0494"}, {"problem": 58, "code": "(fn mycomp\n  ([f] f)\n  ([f g]\n   (fn [& xs] (f (apply g xs)))\n   )\n  ([f g & fs] (reduce mycomp (list* f g fs)))\n  )", "user": "569ad037e4b0542e1f8d144f"}, {"problem": 58, "code": "(fn [& fns]\n  (let [[f & fns] (reverse fns)]\n    (fn [& args]\n      (reduce (fn [v f] (f v)) (apply f args) fns))))", "user": "4f5599dfe4b0a7574ea71806"}, {"problem": 58, "code": "(fn my-comp [& fns]\n  (if (= 1 (count fns))\n      (first fns)\n  (loop [accum-fn (last fns)\n         fns (butlast fns)]\n    (if (= 1 (count fns))\n      (fn [& args]\n        ((last fns)  (apply accum-fn args)))\n      (recur (fn [& args]\n               ((last fns)  (apply accum-fn args)))\n             (butlast fns))))))\n\n;; I like aguire's solution\n;(fn [& functions]\n;   (let [reverseFunctions (reverse functions)\n;         zeroFunction (first reverseFunctions)\n;         restFunctions (rest reverseFunctions)]\n;   (fn [& parameters] \n;     (reduce #(%2 %1) (apply zeroFunction parameters) ;restFunctions))))", "user": "539f9f79e4b0ca733b97449e"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& ps]\n    (reduce #(%2 %) (apply (last fs) ps) (rest (reverse fs)))))", "user": "53f5c402e4b0db01ade6f9d4"}, {"problem": 58, "code": "(fn [& fs] (reduce (fn [f g] #(f (apply g %&))) fs))", "user": "56dc483fe4b0ea9b8538f81b"}, {"problem": 58, "code": "(fn com [& funcs]\n  (reduce\n   (fn [composed new-f]\n     (fn [& rest] (new-f (apply composed rest))))\n   (reverse funcs)))", "user": "56f53962e4b046a417f9206c"}, {"problem": 58, "code": "(fn my-58\n  [& fns]\n  (fn [& args] (reduce #(%2 %) (apply (last fns) args) (rest (reverse fns)))))", "user": "56c3aca0e4b05cc29241ee90"}, {"problem": 58, "code": "(fn [& fs]\n  (let [fs (reverse fs)]\n    (fn [& args]\n      (reduce #(%2 %1)\n              (apply (first fs) args)\n              (rest fs)))))", "user": "56f9982ce4b07572ad1a88b8"}, {"problem": 58, "code": "(fn [& fns]\n  (fn [& args]\n    (let [fns (reverse fns)]\n      (loop [fs (next fns)\n             res (apply (first fns) args)]\n        (if fs\n          (recur (next fs)\n                 ((first fs) res))\n          res)))\n    )\n  )", "user": "4f57c913e4b0a7574ea7183f"}, {"problem": 58, "code": "(fn [& fns] (fn [& args] (reduce #(%2 %1) (apply (last fns) args) (reverse (butlast fns)))))", "user": "56f7ecdfe4b08e7d20b96834"}, {"problem": 58, "code": "(fn [& f]\n  (fn [& args]\n    (let [ff (reverse f)]\n      (reduce #(%2 %1) (apply (first ff) args) (rest ff)))))", "user": "56f9890be4b07572ad1a88b5"}, {"problem": 58, "code": "(fn [& fs]\n  (reduce (fn [f g]\n            #(f (apply g %&))) fs))", "user": "5292feb4e4b0239c8a67af39"}, {"problem": 58, "code": "(fn  h2 \n  ([f g] (fn [x] (f (g x))))\n  ([f g h ] (fn [ & x ] (f (g (apply h x))))))", "user": "56fa8984e4b07572ad1a88c1"}, {"problem": 58, "code": "(fn my-comp\n  ([f1] f1)\n  ([f1 & ff] (partial (fn [g & args] (f1 (apply g args))) (apply my-comp ff))))", "user": "56f9392ae4b07572ad1a88ac"}, {"problem": 58, "code": "(fn f [fa & fns] (if (empty? fns) (fn [& args] (apply fa args)) (fn [& args] (fa (apply (apply f fns) args)))))", "user": "55b6a63ae4b01b9910ae299b"}, {"problem": 58, "code": "(fn [& fns]\n  (fn [& args]\n    (let [r (reverse fns)]\n      (loop [a (apply (first r) args)\n             f (rest r)]\n        (if (empty? f)\n          a\n          (recur ((first f) a) (rest f)))))))", "user": "4f037faf535dcb61093f6af8"}, {"problem": 58, "code": "(fn f [ & fns] (fn g [& args]\n                 (first (reduce (fn c [y x] [(apply x y)]) args (reverse fns)))\n                 ))", "user": "56f15eade4b04a395b9a048e"}, {"problem": 58, "code": "(fn my-comp [& funs]\n  (fn [& args]\n    ;;(apply (last funs) args)\n    (reduce #(%2 %1) (apply (last funs) args) (rest (reverse funs)))\n  )\n)", "user": "5700f1f0e4b08d47c97781ce"}, {"problem": 58, "code": "(fn [& fs] (reduce (fn [c f] (fn [& es] (c (apply f es)))) identity fs))", "user": "520e37cfe4b066f3ea161c96"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& xs] (first\n    (reduce\n     (fn [ys f]\n       [(apply f ys)])\n     xs\n     (reverse fs)))))", "user": "51e5a627e4b0efabf93c02db"}, {"problem": 58, "code": "(fn [& fs] (reduce\n               (fn [m f]\n                 (fn [& args] (m (apply f args))))\n               fs))", "user": "56fbf83de4b07572ad1a88da"}, {"problem": 58, "code": "(fn [& fns]\n     (fn [& args]\n       (first (reduce\n                (fn [r f] [(apply f r)])\n                args\n                (reverse fns)))))", "user": "56dc3bdfe4b0ea9b8538f819"}, {"problem": 58, "code": "(fn c [f & r] (if r (fn [& a] (f (apply (apply c r) a))) (fn [& a] (apply f a))))", "user": "56b2573ce4b0982f16b37e02"}, {"problem": 58, "code": "(fn casc \n  ([f g] (fn ([] (f (g)))\n             ([x] (f (g x)))\n             ([x y] (f (g x y)))\n             ([x y & zs] (f (apply g x y zs)))))\n  ([f g & hs] (reduce casc (list* f g hs))))", "user": "5703eda3e4b08d47c9778200"}, {"problem": 58, "code": "(fn [& fs]\n  (reduce #(fn [& x] (% (apply %2 x))) fs))", "user": "57035ccfe4b08d47c97781ef"}, {"problem": 58, "code": "(fn fun-comp\n  ([f g]\n    (fn[ & more] \n      (f (apply g more))))\n  ([f g h]\n    (fn[ & more]\n      (prn more)\n      (f (g (apply h more))))))", "user": "56f4cedce4b046a417f92063"}, {"problem": 58, "code": "(fn [& fns]\n  (fn [& args]\n    (reduce\n      (fn [arg f] (f arg))\n      (apply (last fns) args)\n      (next (reverse fns)))))", "user": "5703cd50e4b08d47c97781fc"}, {"problem": 58, "code": "(fn x [& fns]\n  (let [s (reverse fns)]\n   (fn [& x]\n     (reduce #(%2 %1) (apply (first s) x) (rest s)) \n    )\n  )\n  \n  )", "user": "56db90d4e4b0ea9b8538f80d"}, {"problem": 58, "code": "(fn compose [& funcs]\n  (fn [& args]\n    (first\n      (reduce #(vector (apply %2 %1)) args (reverse funcs)))))", "user": "56efc9fde4b04a395b9a0464"}, {"problem": 58, "code": "(fn comp1 [& fns]\n  (fn [& args]\n    (loop [fns (vec fns) vals args]\n      (if (empty? fns)\n        (first vals)\n        (recur (butlast fns) [(apply (last fns) vals)])))))", "user": "54764a8fe4b0c51c1f4d72a3"}, {"problem": 58, "code": "(fn [& fs]\n    (fn [& v]\n      (reduce #(%2 %) (apply (last fs) v) (rest (reverse fs)))))", "user": "516db4f6e4b046df6fbb76a0"}, {"problem": 58, "code": "(fn [& f]\n  (fn [& args]\n    (reduce #(%2 %) (apply (last f) args) (reverse (butlast f)))))", "user": "549eb44fe4b0f3d1d8e70fa6"}, {"problem": 58, "code": "(fn [& fs] (fn[& args] (apply identity (reduce #(vector (apply %2 %1)) args (reverse fs)   )) ) \n  )", "user": "56a6051fe4b0542e1f8d14e5"}, {"problem": 58, "code": "(fn my-comp [& fs]\n  (let [right-f (last fs)\n        left-fs (butlast fs)]\n    (fn [& args]\n      (if (empty? left-fs)\n        (apply right-f args)\n        ((apply my-comp left-fs) (apply right-f args))))))", "user": "557e56aae4b05c286339e0d5"}, {"problem": 58, "code": "(fn [& funcs]\n    (fn [& args]\n      (first\n        (reduce\n          #(list (apply %2 %))\n          args\n          (reverse funcs)))))", "user": "56fc0601e4b07572ad1a88db"}, {"problem": 58, "code": "(fn [& funcs]\n    (fn [& args]\n      (first (reduce (fn [v foo]\n                       [(apply foo v)])\n                     args\n                     (reverse funcs)))))", "user": "5712854ce4b07c98581c3a89"}, {"problem": 58, "code": "(fn my-comp [& funcs]\n  (fn [& args] \n    (loop [remaining (drop-last funcs) result-func (apply (last funcs) args)]\n      (if (empty? remaining)\n        result-func\n        (recur (drop-last remaining) (apply (last remaining) [result-func]))))))", "user": "5711b532e4b09c608db70449"}, {"problem": 58, "code": "(fn comb [& funcs]\n  (fn [& args]\n    (first\n      (reduce #(vector (apply %2 %1)) args (reverse funcs )))))", "user": "56ede653e4b04a395b9a0449"}, {"problem": 58, "code": "(fn [& funcs]\n  (fn [& args]\n    (first (reduce (fn [x y] (cons (apply y x) '())) args (reverse funcs)))\n  )\n)", "user": "56b506d5e4b0982f16b37e2d"}, {"problem": 58, "code": "(fn [& fs] (reduce (fn [f g] #(f (apply g %&))) fs))", "user": "56d781b3e4b0ea9b8538f7dc"}, {"problem": 58, "code": "(fn mycomp [& args]\n  (if (= 1 (count args))\n   (first args)\n  #((first args) \n    (apply \n     (apply mycomp (rest args)) %&)\n   )\n  )\n )", "user": "57011eb3e4b08d47c97781d1"}, {"problem": 58, "code": "(fn comp1\n  ([] identity)\n  ([f] f)\n  ([f g] \n     (fn \n       ([] (f (g)))\n       ([x] (f (g x)))\n       ([x y] (f (g x y)))\n       ([x y z] (f (g x y z)))\n       ([x y z & args] (f (apply g x y z args)))))\n  ([f g & fs]\n     (reduce comp1 (list* f g fs))))", "user": "56ab7578e4b03c432f18733d"}, {"problem": 58, "code": "(fn [& fns]\n  (fn [& args]\n    (let [rfns (rest (reverse fns))\n          f (first (reverse fns))\n          seed (if (= 1 (count args))\n                 (f (first args))\n                 (apply f args))]\n      (loop [lseq rfns acc seed]\n        (if (empty? lseq)\n          acc\n          (recur (rest lseq) ((first lseq) acc)))))))", "user": "56cb4d06e4b0ea9b8538f72e"}, {"problem": 58, "code": "(fn cmp [& fns]\n (let [rev-fns (reverse fns)]\n  (reduce\n   (fn [acc f]\n     (fn [& args] (f (apply acc args))))\n   (first rev-fns)\n   (rest rev-fns)\n   )\n  )\n  )", "user": "56fbe0cce4b07572ad1a88d8"}, {"problem": 58, "code": "(fn [& s]\n  (reduce (fn [a b]\n            (fn [& i]\n              (a (apply b i))))\n          s))", "user": "57008afae4b08d47c97781ca"}, {"problem": 58, "code": "(fn [& fns]\n  (fn [& x]\n    ((fn call [fns]\n       (if (empty? (rest fns)) \n         (apply (first fns) x)\n         ((first fns) (call (rest fns)))))  \n     fns)))", "user": "571c2babe4b07c98581c3b73"}, {"problem": 58, "code": "#_(fn [& fns]\n            (fn [& xs]\n              (loop [vs xs, gs (reverse fns)]\n                (if (seq gs)\n                  (let [g (first gs)\n                        vs' (list (apply g vs))]\n                    (recur vs' (rest gs)))\n                  (first vs)))))\n\n(fn [& fns]\n            (fn [& xs]\n              (->> (reduce (fn [acc f]\n                             (list (apply f acc)))\n                           xs\n                           (reverse fns))\n                   first)))", "user": "53684a2fe4b0243289761e8c"}, {"problem": 58, "code": "(fn my-comp\n ; ([f] (fn [& args] (apply f args)))\n;  ([f g] (fn [& args] (f (apply g args))))\n  ([& fns] (let [fns (reverse fns)\n                f (first fns)\n                gns (rest fns)]\n             (fn [& args] (reduce #(%2 %1) (apply f args) gns)))))", "user": "571d063ee4b0145328a76272"}, {"problem": 58, "code": "(fn [& fns]\n  (fn [& args]    \n    (first \n     (reduce \n      #(vector (apply %2 %1)) \n      args \n      (reverse fns)))))", "user": "54e345a1e4b024c67c0cf7db"}, {"problem": 58, "code": "(fn cmp\n [f & fs]\n  (if fs\n   (fn [& args] (f (apply (apply cmp fs) args)))\n   f\n    )\n )", "user": "56edf2dde4b04a395b9a044b"}, {"problem": 58, "code": "(fn [& s] \n  (reduce \n   #(fn [& a] \n      (%1 (apply %2 a))) s))", "user": "56f51879e4b046a417f92069"}, {"problem": 58, "code": "(fn [& foos]\n  (fn [& args]\n    (reduce #(%2 %1) (apply (last foos) args) (reverse (butlast foos)))))", "user": "571e5c9ee4b0145328a76290"}, {"problem": 58, "code": "(fn compose\n  ([] identity)\n  ([f] f)\n  ([f g]\n   (fn\n     ([] (f (g)))\n     ([x] (f (g x)))\n     ([x y] (f (g x y)))\n     ([x y z] (f (g x y z)))\n     ([x y z & args] (f (apply g x y z args)))))\n  ([f g & fs]\n   (reduce compose (list* f g fs))))", "user": "5716540fe4b07c98581c3af3"}, {"problem": 58, "code": "(fn [& fs] (reduce (fn [f g] #(f (apply g %&))) fs))", "user": "56de79fee4b0ea9b8538f83d"}, {"problem": 58, "code": "(fn [& funs]\n  (let [fl (reverse funs)]\n    (fn [& args]\n      (loop [ret (apply (first fl) args)\n             ffl (next  fl)]\n        (if ffl\n          (recur ((first ffl) ret) (next ffl))\n          ret)))))", "user": "56102f50e4b05f002753df6b"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& args]\n    (first (reduce #(list (apply %2 %)) args (reverse fs)))))", "user": "57002b81e4b08d47c97781c7"}, {"problem": 58, "code": "(fn [& fs]\n      (fn [& args]\n        (->> (reduce (fn [acc next] (list (apply next acc))) args (reverse fs))\n             (first)\n             )))", "user": "56791447e4b05957ce8c6183"}, {"problem": 58, "code": "(fn [& functions] (reduce (fn [f g] #(f (apply g %&))) functions))", "user": "57283dbce4b0c5bde472c154"}, {"problem": 58, "code": "(fn [& functions]\n  (reduce (fn [acc v]\n            (fn [& args]\n              (v (apply acc args))))\n          (reverse functions)))", "user": "572722c4e4b0c5bde472c134"}, {"problem": 58, "code": "(fn [& fs] \n  (reduce (fn [f g]\n            (fn [& args]\n              (f (apply g args))))\n          identity fs))", "user": "5461dc79e4b01be26fd746a8"}, {"problem": 58, "code": "(fn my-comp\n  [f & fs]\n  (if (empty? fs)\n    f\n    (fn [& args] (f (apply (apply my-comp fs) args)))))", "user": "572db6d5e4b0cd1946bd0f78"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& args]\n    (let [fs (reverse fs)\n          start (apply (first fs) args)] \n     (reduce (fn [acc f]\n              (f acc))\n            start\n            (rest fs)))))", "user": "53dfbc75e4b0d874e779ae44"}, {"problem": 58, "code": "(fn [& f] \n  (reduce \n   (fn [f s] #(f (apply s %&))) \n   f))", "user": "56efb3a3e4b04a395b9a0463"}, {"problem": 58, "code": "(fn my-comp [f & fns]\n  (if (empty? fns)\n    f\n    (fn [& args]\n      (f (apply (apply my-comp fns) args)))))", "user": "569f99cce4b0542e1f8d1497"}, {"problem": 58, "code": "(fn [& allfns] (let [[fn1 & fns] (reverse allfns)] (fn [& ps] (reduce (fn [p f1] (f1 p)) (apply fn1 ps) fns))))", "user": "571aad45e4b07c98581c3b59"}, {"problem": 58, "code": "(fn [ & sq ]\n  (reduce\n    (fn [r x]\n      (fn [ & args ]\n        (r (apply x args))))\n    sq))", "user": "57300c19e4b0cd1946bd0fa1"}, {"problem": 58, "code": "(fn \n  q[& xs] \n  (\n    fn [& x] \n    (first \n      (reduce \n         #(;do \n          ; (println (str %2) (str %1) (vector (apply %2 %1)) ) \n          vector (apply %2 %1)\n          ) \n        x \n        (reverse xs)\n      )\n    )\n  )\n)", "user": "5717d674e4b07c98581c3b1a"}, {"problem": 58, "code": "(fn mycomp [& fs]\n (fn [& args]\n     (reduce #(%2 %1) (apply (last fs) args) (rest (reverse fs)))))", "user": "4df73d64535d04ed9115e775"}, {"problem": 58, "code": "(fn [& fns] \n  (fn [& args] \n    (let [[f & fns] (reverse fns)] \n      (reduce (fn [a f] (f a)) \n              (apply f args) \n              fns))))", "user": "51b0e7b3e4b0c53cf2e68a6e"}, {"problem": 58, "code": "(fn fcomp [& funcs]\n  (fn [& a]\n    (loop [fs (butlast funcs)\n           res (apply (last funcs) a)]\n      (if (empty? fs)\n        res\n        (recur (butlast fs) ((last fs) res) )))))", "user": "572ea970e4b0cd1946bd0f89"}, {"problem": 58, "code": "(fn [x & xs]\n   (fn [& args]\n     ((fn rec [[f & fs]\n               a]\n        (if fs\n          (f (rec fs a))\n          (apply f a)))\n      (cons x xs)\n      args)))", "user": "5724a4dae4b0c5bde472c0fe"}, {"problem": 58, "code": "(fn comp* [& fs]\n  (fn [& args]\n    (let [fsr (reverse fs)]\n      (let [f (first fsr)\n            xs (rest fsr)\n            f* (fn [agg f**]\n                 (f** agg))]\n        (reduce f* (apply f args) xs)))))", "user": "572a500fe4b0f4d77e651233"}, {"problem": 58, "code": "(fn my-comp [head & tail]\n  (if (= tail nil)\n    head\n    #(head (apply (apply my-comp tail) %&))))", "user": "5733e4aee4b0cd1946bd0ffe"}, {"problem": 58, "code": ";((\n(fn [& fs]\n  (reduce (fn [f g]\n            #(f (apply g %&))) fs))\n; rest reverse) [1 2 3 4])", "user": "573632b7e4b0cd1946bd102f"}, {"problem": 58, "code": "(fn [f & fs]\n  (loop [acc f, [f & remain] fs]\n  \t(if (nil? f)\n      acc\n      (recur #(acc (apply f %&)) remain))))", "user": "573d58c8e4b05c31a32c0811"}, {"problem": 58, "code": "(fn [& funcs]\n    (fn [& args]\n      (reduce (fn [result func] \n                (func result)\n                )\n                                        ; First apply the last func\n              (apply (last funcs) args)\n              \n              ; Then apply the remaining funcs right to left\n              (reverse (drop-last funcs))\n       )\n      )\n    )", "user": "571a282ae4b07c98581c3b46"}, {"problem": 58, "code": "(fn [& fs] (reduce (fn [f g] #(f (apply g %&))) fs))", "user": "573652e1e4b0cd1946bd1030"}, {"problem": 58, "code": "(fn compIt2 [& funcs]\n  (fn [& args]\n    (loop [funcsRemaining funcs input args]\n    (if (empty? funcsRemaining)\n      (first input)\n      (do (println input) (println funcsRemaining)\n        (if (= (count input) 1)\n          (recur (drop-last funcsRemaining) [(apply (last funcsRemaining) input)])\n          (recur (drop-last funcsRemaining) [(reduce (last funcsRemaining) input)])\n          ))))))", "user": "57131dfbe4b07c98581c3a98"}, {"problem": 58, "code": "(fn [& fns]\n  (fn [& args]\n    (let [[f & fns] (reverse fns)]\n      (reduce #(%2 %1) (apply f args) fns))))", "user": "570794d8e4b0b0fb43fd068b"}, {"problem": 58, "code": "(fn [& fns]\n  (reduce (fn [c f] (fn [& args] (f (apply c args)))) (reverse fns)))", "user": "50b42cbbe4b001349b2f4abe"}, {"problem": 58, "code": "(fn my-comp [& args]\n  (let [myfns (reverse args)]\n    (loop [current (first myfns)\n           remaining (rest myfns)]\n      (if (empty? remaining)\n        current\n        (recur\n          (fn [x & arags]\n            (\n              (first remaining)\n              (apply current x arags)\n              )\n            )\n          (rest remaining))\n        )\n      ))\n  )", "user": "55d42f78e4b0e31453f64a73"}, {"problem": 58, "code": "(fn [& funs]\n  (fn [& args]\n    (reduce #(%2 %) (apply (last funs) args) (reverse (butlast funs)))))", "user": "573f63bfe4b05c31a32c0842"}, {"problem": 58, "code": "(fn [& l]  (fn [& v]  (reduce   #(%2  %)    (apply (first (reverse l)) v )   (rest (reverse l)) )     )  )", "user": "5735ac67e4b0cd1946bd102b"}, {"problem": 58, "code": "(fn [& fs] (fn [& a]( reduce  #(%2 %1)  (apply (last fs) a) (rest (reverse fs)))))", "user": "56fa2905e4b07572ad1a88be"}, {"problem": 58, "code": "(fn comps [& fns]\n  (fn [& args]\n    (reduce (fn [acc x] (x acc)) (apply (last fns) args) (rest (reverse fns)))))", "user": "57434103e4b0c285004e8a9e"}, {"problem": 58, "code": "(fn mycomp [& fns]\n  (fn composed [& args]\n    (let [fnlist (reverse fns)\n          myf (fn myf [fs cumval]\n                 (if (empty? fs) cumval\n                     (myf (drop 1 fs) ((first fs) cumval))))]\n      (myf (drop 1 fnlist) (apply (first fnlist) args)))))", "user": "56ff45e5e4b08d47c97781bb"}, {"problem": 58, "code": "(fn [& fns] (reduce (fn [f g] #(f (apply g %&))) fns))", "user": "56a94562e4b07966d5a8a074"}, {"problem": 58, "code": "(fn [& funcs]\n  (let [[func & funcs] (reverse funcs)]\n  \t(fn [& x]\n  \t\t(loop [[f & fs] funcs, result (apply func x)]\n    \t\t(if f\n      \t\t\t(recur fs (f result))\n            \tresult)))))", "user": "57015a1de4b08d47c97781d4"}, {"problem": 58, "code": "(fn comp2\n  ([f] (fn [& args] (apply f args)))\n  ([f & fs]\n   (fn [& args]\n     (f (apply (apply comp2 fs) args)))))", "user": "5609d328e4b05f002753deee"}, {"problem": 58, "code": "(fn [& f] (fn [& s] (reduce #(%2 %1) (apply (last f) s) (reverse (drop-last f)))))", "user": "573ce277e4b05c31a32c080b"}, {"problem": 58, "code": "(fn composefn [& funcs]\n  (fn [& p]\n      (loop [fs funcs\n             , p1 p]\n\n        (if (= (count fs) 1)          \n          (apply (last fs) p1 )\n          (recur\n            (drop-last fs)\n            [(apply (last fs) p1)]\n          )\n        )\n      )\n  )\n)", "user": "571aae1fe4b07c98581c3b5a"}, {"problem": 58, "code": "(fn [& funcs]\n  (let [revfunc (reverse funcs)\n        first-func (first revfunc)\n        ]\n  (fn [& args] (reduce #(%2 %1) (apply first-func args) (rest revfunc)))))", "user": "574c1c98e4b02ea114799216"}, {"problem": 58, "code": "(fn comp* [& fs]\n  (fn [& args]\n    (let [fsr (reverse fs)]\n      (let [f (first fsr)\n            xs (rest fsr)\n            f* (fn [agg f**]\n                 (f** agg))]\n        (reduce f* (apply f args) xs)))))", "user": "574af03ce4b02ea114799202"}, {"problem": 58, "code": "(fn h ([f g] (fn ([x & args] (f (apply g x args)))))\n      ([f g & fs] (reduce h (list* f g fs))))", "user": "52e1c276e4b09f7907dd142b"}, {"problem": 58, "code": "(fn [& funs] (fn [& args] (reduce #(%2 %1) (apply (last funs) args) (rest (reverse funs)))))", "user": "56cad309e4b0ea9b8538f720"}, {"problem": 58, "code": "(fn my-comp [& fgh]\n  (if (= 1 (count fgh))\n    (first fgh)\n    (fn [& args] ((apply my-comp (butlast fgh)) (apply (last fgh) args)))))", "user": "57458b82e4b009280f9f2b4e"}, {"problem": 58, "code": "(fn [& shit]\n    (fn [& args]\n      (reduce #(%2 %1) args\n              (update-in (vec (reverse shit)) [0] #(partial apply %)))))", "user": "561814bae4b06b1bb2182a1a"}, {"problem": 58, "code": "(fn [& fns]\n  (reduce (fn [f1 f2] (fn [& args] (f1 (apply f2 args)))) fns))", "user": "574dfcb8e4b02ea11479923a"}, {"problem": 58, "code": "(fn [& fns]\n  (fn [& args]\n    (let [fns (reverse fns)]\n\t    (reduce #(%2 %1) (apply (first fns) args) (rest fns)))))", "user": "5590ebb1e4b0277789237677"}, {"problem": 58, "code": "(fn [a & args]\n      (reduce \n        (fn [x y]\n          (fn \n            ( [d] (x (y d)) )\n            ( [d & a] (x (apply y d a)) )\n            )\n          ) \n        a\n        args\n        )\n      )", "user": "573407f0e4b0cd1946bd1001"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& args]\n    (first (reduce (fn [acc next] (list (apply next acc))) args (reverse fs)))\n    ))", "user": "56fee4c0e4b08d47c97781b5"}, {"problem": 58, "code": "(fn [& _functions]\n\n          (fn [& _args]\n\n            (loop [args  _args\n                   functions (reverse _functions)]\n\n              (println args functions)\n              (cond\n                (empty? functions) (first args)\n                :else (recur (list (apply (first functions) args)) (rest functions))))))", "user": "562268dce4b03f08ee9a9224"}, {"problem": 58, "code": "(fn [& funcs]\n  (fn [& args]\n    (first (reduce #(vector (apply %2 %1)) args (reverse funcs)))\n    ))", "user": "57552f39e4b02ea1147992c1"}, {"problem": 58, "code": "(fn [& args]\n  (reduce\n    (fn [f g] (fn [& a] (f (apply g a)))) identity args))", "user": "54e540c1e4b024c67c0cf7f9"}, {"problem": 58, "code": "(fn [& g]\n  (let [[f & r] (reverse g)]\n    (fn [& a]\n      (reduce\n       #(%2 %1)\n       (apply f a)\n       r))))", "user": "5742ec91e4b05c31a32c0883"}, {"problem": 58, "code": "(fn ([f g] #(f (apply g %&)))\n\t([f g h] #(f (g (apply h %&)))))", "user": "508c3d42e4b0f17d83ea26b2"}, {"problem": 58, "code": "(fn my-comp2 [& funcs]\n  (fn [& args]\n    (loop [fun (reverse funcs) \n           arg args \n           begn true]\n      (if (= fun [])\n        arg\n        (if begn\n          (recur (rest fun) (apply (first fun) arg) false)\n          (recur (rest fun) ((first fun) arg) false) )))))", "user": "574f1c24e4b02ea114799255"}, {"problem": 58, "code": "(fn cmps [& fs] (fn [& args] (reduce #(%2 %1)\n                                     (apply (last fs) args)\n                                     (reverse (butlast fs)))))", "user": "57539e04e4b02ea1147992ab"}, {"problem": 58, "code": "(fn [& fns]\n  (let [fns (reverse fns)]\n    (fn [& args]\n      (reduce #(%2 %1)\n              (apply (first fns) args)\n              (rest fns)))))", "user": "575cbe44e4b02ea114799374"}, {"problem": 58, "code": "(fn mycomp [ & funcs ]\n  (fn [ & args ]\n    (loop [[head & tail] (reverse funcs)\n           arg args ]\n      (if (nil? head)\n        (first arg)\n        (recur tail\n          [(apply head arg)]\n          )))))", "user": "574e7be7e4b02ea114799242"}, {"problem": 58, "code": "(fn exec_funcs [& funcs]\n  (fn [& args]\n    (first (reduce (fn [acc next] (list (apply next acc))) args (reverse funcs)))))", "user": "574ed2f7e4b02ea11479924a"}, {"problem": 58, "code": "(fn my-comp [& fs]\n    (fn [& coll] (if (= 1 (count fs))\n                   (apply (last fs) coll)\n                   ((apply my-comp (drop-last 1 fs)) (apply (last fs) coll)))))", "user": "5751f2a2e4b02ea114799292"}, {"problem": 58, "code": "(fn my-comp\n  ([f g]\n  (fn [& args]\n    (f (apply g args))))\n   ([f g k] (my-comp f (my-comp g k)))\n   )", "user": "574ff497e4b02ea114799266"}, {"problem": 58, "code": "(fn  aux [& fs_]\n    (fn [& x_]\n      (reduce #(%2 %1)\n              (apply (last fs_) x_)\n              (rest (reverse fs_)))))", "user": "57275898e4b0c5bde472c13e"}, {"problem": 58, "code": "(fn cmp [& fs] \n  (fn [& args] \n    (reduce #(%2 %1) (apply (last fs) args) (rest (reverse fs)))))", "user": "575ef4b6e4b08062f99a4e78"}, {"problem": 58, "code": "#(fn [& r] (reduce (fn [a f] (f a)) (apply (last %&) r) (rseq (vec (butlast %&)))))", "user": "57609d91e4b08062f99a4e9b"}, {"problem": 58, "code": "(fn [& funct]\n  (fn [& args]\n    (loop [funct (reverse funct)\n           result args\n           first? true]\n      (let [f (first funct)\n            r (rest funct)]\n        (if (nil? f)\n          result\n          (cond\n            first? (recur r (apply f result) false)\n            :else (recur r (f result) false))\n          ))))\n  )", "user": "573107d5e4b0cd1946bd0fbc"}, {"problem": 58, "code": "(fn [& functions]\n  (letfn [(rcr [fns result]\n           (if (seq fns)\n             (rcr (next fns) ((first fns) result))\n             result))]\n  (fn [& args]\n    (let [[f & fns] (reverse functions)]\n      (rcr fns (apply f args))))))", "user": "541ddadbe4b01498b1a71a84"}, {"problem": 58, "code": "(fn comb [& funcs]\n  (fn [& args]\n    (first\n      (reduce #(vector (apply %2 %1)) args (reverse funcs )))))", "user": "575ebba3e4b08062f99a4e70"}, {"problem": 58, "code": "(fn [& fs] \n  (fn [& xs] \n    (let [[f & fs] (reverse fs)]\n    \t(reduce #(%2 %1) (apply f xs) fs))))", "user": "57642916e4b0994c1922fbee"}, {"problem": 58, "code": "(fn [& f] (fn [& n] (first (reduce (fn [c n] [(apply n c)]) n (reverse f)))))", "user": "5761a772e4b0994c1922fb95"}, {"problem": 58, "code": "(fn [& fns] \n  (fn [& args]\n    (first (loop [reversed-fns (reverse fns)\n                  result args]\n             (if (empty? reversed-fns)\n               result\n               (recur (rest reversed-fns) (vector (apply (first reversed-fns) result))))))))", "user": "56c60b36e4b05cc29241eead"}, {"problem": 58, "code": "(fn fun-comp\n\t([] identity)\n\t([f] f)\n\t([f g] \n\t\t(fn \n\t\t\t([] (f (g)))\n\t\t\t([x] (f (g x)))\n\t\t\t([x y] (f (g x y)))\n\t\t\t([x y z] (f (g x y z)))\n\t\t\t([x y z & args] (f (apply g x y z args)))))\n\t([f g & fs]\n\t\t(reduce fun-comp (list* f g fs))))", "user": "572ec4dde4b0cd1946bd0f8d"}, {"problem": 58, "code": "(fn [& fs]\n  (reduce (fn [f g] #(f (apply g %&))) fs))", "user": "576186a5e4b0994c1922fb8e"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& args]\n    (first (reduce #(vector (apply %2 %1))\n                   args\n                   (reverse fs)))))", "user": "5297dcc5e4b02ebb4ef75047"}, {"problem": 58, "code": "(fn me\n  ([f1] f1)\n  ([ff & frest] (fn [& args]\n                  \t(ff (apply (apply me frest) args)))))", "user": "561d506ee4b064ca9f4b16aa"}, {"problem": 58, "code": "; ne znam ljepse bez jednog applya i ostalog reduceanja :/\n\n(fn [& y](fn [& a](let [l (last y) r (reverse (butlast y))](\n\t\t\t\t\t\t   reduce #(%2 %1) (apply l a) r))))", "user": "575dda55e4b02ea11479938c"}, {"problem": 58, "code": "(fn my-comp\n  ([f g]\n   (fn [& args] (f (apply g args))))\n  ([f g & fs]\n   (reduce my-comp (list* f g fs))))", "user": "52ea025ae4b09f7907dd14b5"}, {"problem": 58, "code": "(fn [& fns]\n  (let [[h & t] (reverse fns)]\n    (fn [& args] (reduce #(%2 %1) (apply h args) t))\n  )\n)", "user": "574a546ee4b02ea1147991f6"}, {"problem": 58, "code": "(fn r ([f] f)\n      ([f & g] (fn [& a] (f (apply (apply r g) a)))))", "user": "576e3258e4b0979f89651574"}, {"problem": 58, "code": "(fn cmp \n  ([f] f)\n  ([f & fs] #(f (apply (apply cmp fs) %&))))", "user": "4dbf7a31535d020aff1edf75"}, {"problem": 58, "code": "(fn co [f & n]\n  (if-not n\n    f\n    (fn [& p] (f (apply (apply co n) p))) ))", "user": "5731e36be4b0cd1946bd0fc9"}, {"problem": 58, "code": "(fn [& fns]\n  (let [to-apply (reverse fns)]\n    (fn [& args]\n      (reduce (fn [v f] (f v))\n              (apply (first to-apply) args)\n              (rest to-apply)))))", "user": "576da825e4b0979f8965156c"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& a]\n    (loop [o (apply (last fs) a) f (butlast fs)]\n      (if f\n        (recur ((last f) o) (butlast f))\n        o))))", "user": "57533bc1e4b02ea1147992a6"}, {"problem": 58, "code": "(fn [& fs] (fn [& ps] (reduce #(%2 %1) (apply (last fs) ps) (rest (reverse fs)))))", "user": "56f974c0e4b07572ad1a88b1"}, {"problem": 58, "code": "(fn\n  ([a b] (fn [x] (a (b x))))\n  ([a b c] (fn [& args] (a (b (apply c args))))))", "user": "574abbfbe4b02ea114799200"}, {"problem": 58, "code": "(fn comb [& funcs]\n  (fn [& args]\n    (first\n      (reduce #(vector (apply %2 %1)) args (reverse funcs )))))", "user": "54283a7ae4b01498b1a71b2f"}, {"problem": 58, "code": "(fn my-comp [& fns]\n  (fn [& args] (first (reduce #(vector (apply %2 %)) args (reverse fns)))))", "user": "575b3e9be4b02ea11479935b"}, {"problem": 58, "code": "(fn comp1\n  ([] identity)\n  ([f] f)\n  ([f g] \n     (fn \n       ([] (f (g)))\n       ([x] (f (g x)))\n       ([x y] (f (g x y)))\n       ([x y z] (f (g x y z)))\n       ([x y z & args] (f (apply g x y z args)))))\n  ([f g & fs]\n     (reduce comp1 (list* f g fs))))", "user": "53b4bddae4b047364c0444b9"}, {"problem": 58, "code": "(fn a [& fns]\n  (let [rfns (reverse fns)]\n    (fn [& args]\n      (reduce #(%2 %1) (apply (first rfns) args) (rest rfns)))))", "user": "53e9dce1e4b036ad0777e4bc"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& args]\n    (reduce #(%2 %1) (apply (last fs) args) (drop 1 (reverse fs)))))", "user": "56d91a53e4b0ea9b8538f7ee"}, {"problem": 58, "code": "(fn [& funcs]\n  (fn [& args] (first (reduce #(list (apply %2 %)) args (reverse funcs)))))", "user": "57644395e4b0994c1922fbf2"}, {"problem": 58, "code": "(fn comp_ [& fs]\n  (fn [& args]\n    (let [rfs (reverse fs)\n          args (apply (first rfs) args)]\n      (loop [result args\n             f (next rfs)]\n        (if f\n          (recur ((first f) result)(next f))\n          result)))))", "user": "534fa9dae4b084c2834f4acf"}, {"problem": 58, "code": "(fn my-comp\n\n([] identity)\n  ([f] f)\n  ([f g]\n     (fn\n       ([] (f (g)))\n       ([x] (f (g x)))\n       ([x y] (f (g x y)))\n       ([x y z] (f (g x y z)))\n       ([x y z & args] (f (apply g x y z args)))))\n  ([f g & fs]\n     (reduce my-comp (list* f g fs))))", "user": "5756f7d7e4b02ea1147992e9"}, {"problem": 58, "code": "(fn [& f] \n  (fn [& a] \n    (reduce #(%2 %1) \n            (apply (last f) a) \n            (rest (reverse f)))))", "user": "577202d2e4b0979f896515c0"}, {"problem": 58, "code": "(fn [& fns]\n  (fn [& args]\n    (first (reduce #(vector (apply %2 %1)) args (reverse fns)))))", "user": "566096d0e4b068f2fe63dc5a"}, {"problem": 58, "code": "(fn [& fns]\n    (fn [& args]\n      (let [cmps (fn [fns result]\n                   (if (empty? fns) (first result)\n                     (recur (rest fns) (list (apply (first fns) result)))))]\n        (cmps (reverse fns) args))))", "user": "57780e4fe4b0979f89651657"}, {"problem": 58, "code": "(fn \n  [& f]\n  (fn [& a] \n    (loop [l f n a]\n      (if (empty? (rest l))\n        (apply (last l) n)\n        (recur (butlast l) (vector (apply (last l) n)))\n        )))\n  )", "user": "5772ddb0e4b0979f896515d4"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& args]\n    (let [[f & more] (reverse fs)]\n      (reduce (fn [x f] (f x))\n              (apply f args)\n              more))))", "user": "5764457ae4b0994c1922fbf3"}, {"problem": 58, "code": "(fn [& funcs] \n  (fn [& args] \n    (first \n     (reduce #(vector (apply %2 %1)) args (reverse funcs )))))", "user": "57750460e4b0979f8965160c"}, {"problem": 58, "code": "(fn mc\n  ([a b] \n   (fn [& args] (a (apply b args))))\n  ([a b c]\n   (fn [& args] (a (b (apply c args))))))", "user": "5776f39de4b0979f89651643"}, {"problem": 58, "code": "(fn mycomp [& args] \n  (if (= 1 (count args)) \n    (fn [& arg] (apply (last args) arg))\n    (fn [& arg] ((apply mycomp (take (dec (count args)) args)) (apply (last args) arg)))))", "user": "577c3da9e4b0c8d87281f6b9"}, {"problem": 58, "code": "(fn my-comp [& ffs]\n    (let [[f & fs] (reverse ffs)]\n      (fn ret [& args]\n        (reduce #(%2 %1) (apply f args) fs))))", "user": "4dfe5a93535d04ed9115e786"}, {"problem": 58, "code": "(fn cmp ([f] #(apply f %&)) ([f & t] #(f (apply (apply cmp t) %&))))", "user": "576df252e4b0979f8965156f"}, {"problem": 58, "code": "(fn mycomp\n  ([] identity)\n  ([f] f)\n  ([f g]\n   (fn [& x]\n     (f (apply g x))))\n  ([f g & funcs]\n   (fn [& x]\n     (f (g (apply (apply mycomp funcs) x))))))", "user": "55c68089e4b0e31453f649c4"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& args]\n  (let [fs (reverse fs)\n        f1 (first fs)\n        fr (rest fs)\n        r1 (apply f1 args)]\n    (reduce (fn [a v] (v a)) r1 fr))))", "user": "577832f4e4b0979f8965165b"}, {"problem": 58, "code": "(fn [& fs] (reduce (fn [f g] #(f (apply g %&))) fs))", "user": "5776558ee4b0979f89651633"}, {"problem": 58, "code": "(fn [& funcs]\n  (fn [& args]\n    (first \n    (reduce #(vector (apply %2 %1)) args (reverse funcs)))))", "user": "578d230fe4b0ebec4cfb7564"}, {"problem": 58, "code": "(fn Comp\n  ([f g] (fn [& args] (f (apply g args))))\n  ([f g & rst]\n   (reduce Comp (list* f g rst))))", "user": "57934c67e4b0e215f87e8456"}, {"problem": 58, "code": "(fn [& fns]\n  (reduce (fn [f g]\n            #(f (apply g %&))) fns))", "user": "55ede35ce4b0121d4835fde1"}, {"problem": 58, "code": "(fn [& args]\n (fn [& xs] \n    (first (reduce (fn [res e] [(apply e res)]) \n                   xs \n                   (reverse args)))))", "user": "578cf84ce4b0ebec4cfb7562"}, {"problem": 58, "code": "(fn [& args] (reduce\n      (fn [x y]\n        (fn [& args]\n          (x (apply y args))))\n      args))", "user": "578b140be4b0ebec4cfb7545"}, {"problem": 58, "code": "(fn [& xf]\n  (reduce (fn [a f]\n            (fn [& x]\n              (f (apply a x)))) (reverse xf)))", "user": "55c4cda5e4b0e31453f649a5"}, {"problem": 58, "code": "(fn comp'\n  ([f] f)\n  ([f g] (fn [& xs] (f (apply g xs))))\n  ([f g & fs] (reduce comp' (comp' f g) fs)))", "user": "57915ba4e4b0ebec4cfb75ba"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& a]\n    (loop [o (apply (last fs) a) f (butlast fs)]\n      (if f\n        (recur ((last f) o) (butlast f))\n        o))))", "user": "5798205ce4b039eba2ecb10e"}, {"problem": 58, "code": "(fn ccomp \n  ([f0 f1]\n   (fn [& x] (f0 (apply f1 x))))\n  ([f0 f1 f2]\n   (fn [& x] (f0 (f1 (apply f2 x))))))", "user": "56327168e4b0bfe05bf117a5"}, {"problem": 58, "code": "(fn [& fs] \n  (reduce (fn [f1 f2] #(f1 (apply f2 %&))) fs))", "user": "573118ebe4b0cd1946bd0fbd"}, {"problem": 58, "code": "(fn COMP [f & rest]\n  (if (nil? rest)\n    f\n    (fn [& args]\n      (f (apply (apply COMP rest) args)))))", "user": "570ab24fe4b0b0fb43fd06b7"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& a]\n    (loop [o (apply (last fs) a) f (butlast fs)]\n      (if f\n        (recur ((last f) o) (butlast f))\n        o))))", "user": "57982bace4b039eba2ecb10f"}, {"problem": 58, "code": "(fn [& functions]\n  (let [cc \n        (fn c [[f & ff] result]\n          (if (empty? ff)\n            (f result)\n            (c ff (f result))))]\n    (let [[f & ff] (reverse functions)]\n      (fn [& x] (cc ff (apply f x))))))", "user": "578fc072e4b0ebec4cfb759a"}, {"problem": 58, "code": "(fn new-comp [& fs]\n  (let [rfs (reverse fs)\n        firstf (first rfs)\n        restf (rest rfs)]\n    (fn [& args]\n      (reduce #(%2 %1) (apply firstf args) restf))))", "user": "56f85849e4b08e7d20b96836"}, {"problem": 58, "code": "(fn COMP \n  ([f] f)\n  ([f g] (fn [& args] (f (apply g args))))\n  ([f g & rst ]\n   (reduce COMP f (cons g rst))))", "user": "579c8ad1e4b05b1deef9ae0c"}, {"problem": 58, "code": "(fn c [& fns]\n (let [fns (reverse fns)]\n  (fn [& a]\n    (reduce #(%2 %)\n            (apply (first fns) a)\n            (rest fns)))))", "user": "50e5bca5e4b09ae9427b0e75"}, {"problem": 58, "code": "(fn [& fns]\n    (fn [& args]\n    (let [fns-reverse (reverse fns)]\n      (reduce (fn [acc fnc] (fnc acc))\n              (apply (first fns-reverse) args)\n              (rest fns-reverse)))))", "user": "57147cd9e4b07c98581c3abf"}, {"problem": 58, "code": "(fn z [& fns]\n  (fn [& args]\n    (loop [s (reverse fns) ret (apply (first s) args)]\n      (if (next s) \n        (recur (next s) ((first (next s)) ret) )\n        ret))))", "user": "572ac718e4b0f4d77e651242"}, {"problem": 58, "code": "(fn [& fs]\n  (reduce\n    (fn [f now]\n      #(f (apply now %&)))\n    fs))", "user": "57717915e4b0979f896515b3"}, {"problem": 58, "code": "(fn comb [& funcs]\n  (fn [& args]\n    (first\n      (reduce #(vector (apply %2 %1)) args (reverse funcs )))))", "user": "57949eb0e4b0e215f87e846f"}, {"problem": 58, "code": "(fn [& fns] \n  (reduce\n    (fn [f g] #(f (apply g %&)))\n    fns))", "user": "579e15a6e4b05b1deef9ae20"}, {"problem": 58, "code": "(fn [& fns] \n\t(fn [& args] \n\t\t(first  (reduce (fn [ret f] \n\t\t\t(let [result (apply f ret)] \n\t\t\t\t(if (vector? result) \n\t\t\t\t\tresult \n\t\t\t\t\t[result]))) (vec args) (reverse fns)))))", "user": "57986b76e4b039eba2ecb116"}, {"problem": 58, "code": "(fn [f & flist] \n         (fn [x & y] \n            (let [lf (into [f] flist)]\n              (loop [i  (count flist) z (into [x] y)]  \n\t\t(println \"z\" z \"x\" x)\n\t       (cond\n                  (< i 0) z\n                  (vector? z) (recur (dec i) (apply (get lf i) z))\n\t\t  :else (recur (dec i) ((get lf i) z))\n               )   \t\n\t      )\t\n            )\n          )\n    )", "user": "56e6e1e6e4b02e7e935eb6cf"}, {"problem": 58, "code": "(fn comp'\n  ([f] f)\n  ([f g] \n   (fn [& args] (f (apply g args))))\n  ([f g & rest] (reduce comp' (list* f g rest))))", "user": "576b4e6be4b0a07e8fc1812b"}, {"problem": 58, "code": "(fn mycmp [& fns] \n(cond (nil? fns) identity\n(nil? (next fns))\n  (fn [& args] (apply (first fns) args))\n:else\n  (fn [& args] ((first fns) (apply (apply mycmp (rest fns)) args)))))", "user": "56903cb9e4b0dcc4269f40eb"}, {"problem": 58, "code": "(fn [& fs]\n  (let [rfs (reverse fs)]\n    (fn [& as]\n      (reduce #(%2 %1)\n              (apply (first rfs) as)\n              (rest rfs)))))", "user": "57aa4775e4b0b8559636fc6b"}, {"problem": 58, "code": "(fn\n  ([] identity)\n  ([& fs] (fn [& xs]\n            (let [[init-f & rev-fs] (reverse fs)]\n              (reduce #(%2 %1) (apply init-f xs) rev-fs)))))", "user": "505345d9e4b0517ede0d0a06"}, {"problem": 58, "code": "(fn [& v]\n    (loop [fns  (rest v)\n           res  (first v)]\n      (if (empty? fns) res\n          (recur (rest fns)\n                 (fn [ & a ] (res (apply (first fns) a)))))))", "user": "57aa290de4b0b8559636fc65"}, {"problem": 58, "code": "(fn my-comp [& funcs]\n  (fn [& args]\n    (reduce (fn [result next-fn]\n              (println result next-fn)\n              (next-fn result)) (apply (last funcs) args) (reverse (butlast funcs))\n             )\n    \n    )\n  )", "user": "569f4dabe4b0542e1f8d1491"}, {"problem": 58, "code": "(fn compose [& fns]\n  (fn [& args]\n    (first (reduce #(vector (apply %2 %1)) args (reverse fns)))))", "user": "57a9e274e4b0b8559636fc5d"}, {"problem": 58, "code": "(fn [& fns]\n  (fn [& args]\n    (reduce (fn [res f]\n              (f res))\n            (apply (first (reverse fns)) args)\n            (rest (reverse fns)))))", "user": "55912230e4b027778923767a"}, {"problem": 58, "code": "(fn [& foos]\n  (fn [arg & more]\n    (let [funcs (reverse foos)\n          ]\n      (reduce (fn [a f] (f a)) (if more (cons arg more) arg) (cons (if more (partial apply (first funcs)) (first funcs)) (rest funcs))))))", "user": "50b65966e4b0a86f8358ca6c"}, {"problem": 58, "code": "(fn f [& gs]\n  (fn [& args]\n    (let [g1 (last gs), g2 (butlast gs)]\n      (cond\n        g2 ((apply f g2) (apply g1 args))\n        g1 (apply g1 args)\n        :else nil))))", "user": "57adbe7ee4b0b8559636fca0"}, {"problem": 58, "code": "(fn [& fs] \n  (fn [& args]\n    (reduce #(%2 %1) (apply (last fs) args) (rest (reverse fs)))))", "user": "532dbd3ce4b019098a6f8b40"}, {"problem": 58, "code": "(fn [& fs] (reduce (fn [f g] #(f (apply g %&))) fs))", "user": "578e07cfe4b0ebec4cfb7578"}, {"problem": 58, "code": "(fn [& fs]\n  (let [fs (reverse fs)]\n    (fn [& args]\n      (loop [v (apply (first fs) args) fs (rest fs)]\n        (if (seq fs) \n          (recur ((first fs) v) (rest fs))\n          v)))))", "user": "5799ff45e4b05b1deef9add1"}, {"problem": 58, "code": "(fn ([fn1 fn2] (fn [& arg] (fn1 (fn2 (flatten arg))))) ([fn1 fn2 fn3] (fn [& arg] (fn1 (fn2 (apply fn3 (flatten arg)))))))", "user": "57addbcce4b0b8559636fca3"}, {"problem": 58, "code": "(fn [& funcs]\n    (fn [& args]\n      (first\n        (reduce\n          (fn [a b]\n            (vector\n              (apply b a)\n            )\n          )\n          args\n          (reverse funcs)\n        )\n      )\n    )\n  )", "user": "5784e177e4b0ebec4cfb74cf"}, {"problem": 58, "code": "(fn [& fs] (reduce (fn [f g] #(f (apply g %&))) fs))", "user": "57b13adae4b0fbc9809a2750"}, {"problem": 58, "code": "(fn[& fs]\n  (fn[& ic](loop [[f & r] (reverse fs) x (apply f ic)]\n    (if (first r) \n      (recur r ((first r) x)) \n      x))))", "user": "57b3efb1e4b0fbc9809a278a"}, {"problem": 58, "code": "(fn [& fs]\n    (reduce (fn [f g]\n              #(f (apply g %&))) fs))", "user": "56b306c6e4b0982f16b37e0e"}, {"problem": 58, "code": "(fn compose\n  ([] identity)\n  ([f] f)\n  ([f g] (fn [& args] (f (apply g args))))\n  ([f g & fs] (fn [& args] (f (g (apply (apply compose fs) args))))))", "user": "57a0f256e4b0c3d858beb8dd"}, {"problem": 58, "code": "(fn fcmp\n  ([] identity)\n  ([f] f)\n  ([f g] \n   (fn \n     ([] (f (g)))\n     ([& args] (f (apply g args)))))\n  ([f g & fs]\n   (reduce fcmp (list* f g fs))))", "user": "57af41bce4b0fbc9809a2731"}, {"problem": 58, "code": "(fn foo [& args] \n  (let [f (fn [& z] \n            (if (= 1 (count args))\n              (apply (first args) z)\n              (let [ff (first args) ra (rest args) p (apply (apply foo ra) z)]\n                (ff p))\n              )\n            )]\n    f)\n  )", "user": "57b8b008e4b0fbc9809a27e6"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& args]\n    (let [r (rseq (vec fs))]\n      (reduce (fn [i f] (f i)) \n        (apply (first r) args)\n        (rest r)))))", "user": "548b7db8e4b0e286459a11fd"}, {"problem": 58, "code": "(fn [& ops] (fn [& args] (loop [op (next (reverse ops)) arg (apply (first (reverse ops)) args)] (println op arg) (if (empty? op) arg (recur (next op) ((first op) arg))))))", "user": "57873017e4b0ebec4cfb7503"}, {"problem": 58, "code": "(fn my-comp [& fns]\n  (loop [remaining-fns (reverse fns),\n         result nil]\n    (if (empty? remaining-fns)\n      result\n      (recur\n        (rest remaining-fns)\n        (if (nil? result)\n          (fn [& x] (apply (first remaining-fns) x))\n          (fn [& x] ( (first remaining-fns) (apply result x) )) )))))", "user": "57b99d48e4b0fbc9809a27f2"}, {"problem": 58, "code": "(fn [& fns]\n  (reduce (fn [ff f] #(ff (apply f %&))) fns))", "user": "56eab346e4b04a395b9a0410"}, {"problem": 58, "code": "(fn [& funcs]\n  (fn [& args] (first (reduce #(list (apply %2 %)) args (reverse funcs)))))", "user": "57b3046de4b0fbc9809a276d"}, {"problem": 58, "code": "(fn [& funcs]\n  (reduce\n    (fn [f1 f2] (fn [& args] (f1 (apply f2 args))))\n    funcs))", "user": "53ef55eee4b0742d9025b0ca"}, {"problem": 58, "code": "(fn my-comp [& fs]\n  (fn [& args]\n    (->> fs\n         (reverse)\n         (reduce #(vector (apply %2 %1)) args)\n         first\n         )))", "user": "516064e5e4b009fba0926e26"}, {"problem": 58, "code": "(fn c\n    ([f] f)\n    ([f & g]\n    (fn\n      [a & e]\n      (f (apply (apply c g) a e)))))", "user": "57b1b8c8e4b0fbc9809a2756"}, {"problem": 58, "code": "(fn comb [& funcs]\n  (fn [& args]\n    (first\n      (reduce #(vector (apply %2 %1)) args (reverse funcs )))))", "user": "57a1ef58e4b0c3d858beb8f3"}, {"problem": 58, "code": "(fn my-comp [f & rest]\n  (if (not-empty rest)\n    (fn [& args] (f (apply (apply my-comp rest) args)))\n    f))", "user": "577bf999e4b0d3393e5deb2c"}, {"problem": 58, "code": "(fn [& functions]\n  (let [reverse-functions (reverse functions)]\n    (fn [& some-args] \n      (reduce (fn [result-so-far next-fn]\n                 (next-fn result-so-far)\n               )\n              (apply (first reverse-functions) some-args)\n              (rest reverse-functions)\n       )\n    )\n  )\n)", "user": "57c3c7e6e4b05aa3c4741cc4"}, {"problem": 58, "code": "(fn myc1\n\n   ([f] f)\n\n   ([f g] \n\n    (fn myc1-1([x] (f (g x)))\n\n              ([x & y] (f (apply g x y)))))\n\n   ([f g & funcs] \n\n    (reduce myc1 (concat (list f g) funcs))))", "user": "57487084e4b009280f9f2b8c"}, {"problem": 58, "code": "(fn [& functions]\n  (letfn [(my-comp [f1 f2]\n\t\t   (fn [& args] (f1 (apply f2 args))))]\n \t(let [composite-function (reduce my-comp (first functions) (rest functions))]\n \t\t(fn [& operands]\n \t\t\t(apply composite-function operands)))))", "user": "57c0917be4b05aa3c4741c95"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& p]\n    (first (reduce #(list (apply %2 %1)) p (reverse fs))\n    )))", "user": "57395f32e4b0cd1946bd1070"}, {"problem": 58, "code": "(fn test [& funs]\n  (letfn [(help [funs coll]\n                (if (= (count funs) 1)\n                  (apply (first funs) coll)\n                  ((first funs) (help (rest funs) coll))))]\n    (fn [& coll]\n      (help funs coll))))", "user": "579332c2e4b0e215f87e8452"}, {"problem": 58, "code": "(fn my-comp [& rem]\n\t(fn [& arg]\n\t\t(loop [fs (reverse rem) result arg]\n\t\t\t(if (nil? (first fs))\n\t\t\t\t(first result)\n\t\t\t\t(recur (rest fs) [(apply (first fs) result)]))\n\t\t)\n\t)\n)", "user": "57a9db97e4b0b8559636fc5b"}, {"problem": 58, "code": "(fn [& fns]\n  (reduce #(fn [& args] (%2 (apply %1 args))) (reverse fns)))", "user": "57c94c54e4b05aa3c4741d2c"}, {"problem": 58, "code": "(fn[& f]\n  (fn[& x]\n    (reduce #(%2 %1) (apply (last f) x) (rest (reverse f)))))", "user": "57b9fc74e4b0fbc9809a27fb"}, {"problem": 58, "code": "(fn komp \n  ([] (fn [n] (identity n)))\n  ([fn1] (fn [& n] (apply fn1 n)) )\n  ([fn1 fn2] (fn [& n]\n               (fn1 ((fn [m] (apply fn2 m)) n))))\n  ([fn1 fn2 & fns] (fn [& n]\n               (fn1 ((fn [m] (apply (apply komp (conj fns fn2)) m)) n)))))", "user": "579d9601e4b05b1deef9ae18"}, {"problem": 58, "code": "(fn [& fs] (reduce (fn [f g] #(f (apply g %&))) fs))", "user": "57bd960fe4b05aa3c4741c52"}, {"problem": 58, "code": "(fn [& fs] \n  (fn [ & xs]\n    (let [fs (reverse fs)\n          f (first fs)\n          initial (apply f xs)]\n      (loop [fs (rest fs)\n             result initial]\n        (if (empty? fs)\n          result\n          (recur (rest fs) ( (first fs) result)))))))", "user": "4fc34787e4b081705acca33e"}, {"problem": 58, "code": "(fn r\n  ([f1 f2] #(f1 (apply f2 %&)))\n  ([f1 f2 & f3] (reduce r (cons f1 (cons f2 f3))))\n)", "user": "57c7e7d9e4b05aa3c4741d0f"}, {"problem": 58, "code": "(fn ([a b] (fn [x] (a (b x)))) ([a b c] (fn [& x] (a (b (apply c x))))))", "user": "57b35a19e4b0fbc9809a277d"}, {"problem": 58, "code": "(fn c \n  ([f1 f2] (fn [& args] (f1 (apply f2 args))))\n  ([f1 f2 & fs] (reduce c (list* f1 f2 fs))))", "user": "57c7a8b5e4b05aa3c4741d09"}, {"problem": 58, "code": "(fn [& all-fns]\n  (reduce\n    (fn [acc-fn curr-fn]\n      (fn [& args]\n        (acc-fn (apply curr-fn args))))\n      identity\n      all-fns))", "user": "57c0393be4b05aa3c4741c90"}, {"problem": 58, "code": "(fn my-comp [& fns]\n  (fn [& args]\n    (reduce (fn [x f]\n              (f x))\n            (apply (last fns) args)\n            (reverse (butlast fns)))))", "user": "57c45e64e4b05aa3c4741ccf"}, {"problem": 58, "code": "(fn [& fs] (reduce (fn [f g] #(f (apply g %&))) fs))", "user": "5790f9d7e4b0ebec4cfb75b4"}, {"problem": 58, "code": "(fn [& fns]\n  (let [fns (reverse fns)\n        first (first fns)\n        fns (rest fns)]\n    (fn [& args]\n      (reduce (fn [acc func] (func acc)) (apply first args) fns))))", "user": "57155980e4b07c98581c3ad7"}, {"problem": 58, "code": "(fn mycomp [f & fs]\n  (if (empty? fs)\n    f\n    (fn[& args] (apply f [(apply (apply mycomp fs) args)]))\n   )\n )", "user": "57cf03c0e4b00451144b04f9"}, {"problem": 58, "code": "(fn cmp [f & r]\n  (if r\n    (fn [& args]\n      (f (apply (apply cmp r) args)))\n    f))", "user": "57a0b341e4b0c3d858beb8d4"}, {"problem": 58, "code": "(fn [& xs]\n  (fn [& ys]\n    (let [xs (reverse xs)]\n      (reduce (fn [acc x] (x acc))\n              (apply (first xs) ys)\n              (rest xs)))))", "user": "56cf115de4b0ea9b8538f765"}, {"problem": 58, "code": "(fn my-comp\n  ([f] f)\n  ([f & other-functions]\n   (fn [& args]\n     (f (apply (apply my-comp other-functions) args)))))", "user": "552d487ee4b076ab5578f7e4"}, {"problem": 58, "code": "(fn my-comp [& fns]\n  (fn [& args]\n    (reduce \n     (fn [result-so-far next-fn] (next-fn result-so-far))\n     (apply (last fns) args) \n     (rest (reverse fns))\n    )\n  )\n)", "user": "57cc7d96e4b0c746388ab882"}, {"problem": 58, "code": "(fn my-comp [fun & funs]\n  (if funs\n    (fn [& args]\n      (fun (apply (apply my-comp funs) args)))\n    (fn [& args]\n      (apply fun args))))", "user": "57d0cd58e4b0bd073c20235e"}, {"problem": 58, "code": "(fn compose [& fs]\n  (if (<= (count fs) 1) (first fs)\n   (let [v (vec fs)\n         f (peek v)]\n     (fn [& args] ((apply compose (pop v)) (apply f args))))))", "user": "57d1d6c8e4b0bd073c202370"}, {"problem": 58, "code": "(fn [& args] (fn [& xs] (reduce #(%2 %1) (apply (last args) xs) (rest (reverse args)))))", "user": "57c6aa0be4b05aa3c4741cf7"}, {"problem": 58, "code": "(fn compose\n ([f g] (fn [& args] (f (apply g args))))\n ([f g & more] (reduce compose (list* f g more))))", "user": "5272645de4b03e8d9a4a742c"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& ps]\n    (first (reduce \n     (fn [p nf]\n       [(apply nf p)])\n     ps\n     (reverse fs)))))", "user": "57c94c6ee4b05aa3c4741d2d"}, {"problem": 58, "code": "(fn [& funs]\n  (reduce\n    (fn [result current]\n         (fn [& args]\n              (result (apply current args))))\n    identity\n    funs))", "user": "57d9bca1e4b0bd073c202405"}, {"problem": 58, "code": "(fn [& funcsa]\n  (fn [& a] \n    ((fn [[arg & rarg :as args] [func & funcs]]\n       (if func\n         (recur (list (apply func args)) funcs )\n         arg\n       )) a (reverse funcsa))))", "user": "4f4aa932e4b0d56e7bb92c14"}, {"problem": 58, "code": "(fn [& f]\n    (fn [& a]\n      (first (reduce #(vector (apply %2 %1)) a (reverse f)))))", "user": "57d9f603e4b0bd073c20240a"}, {"problem": 58, "code": "(fn fc\n  [& fs]\n  (when (seq fs)\n    (let [f (first fs)\n          rf (apply fc (rest fs))]\n      (if (nil? rf)\n        (fn [& args] (apply f args))\n        (fn [& args] (f (apply rf args)))))))", "user": "56bb652ae4b0f26550335953"}, {"problem": 58, "code": "(fn my-comp [& fs] (fn [& args] (reduce (fn [acc f] (f acc)) (apply (last fs) args) (rest (reverse fs)))))", "user": "57e0f30ae4b0bfb2137f5a66"}, {"problem": 58, "code": "(fn [& f]\n      (fn [& coll]\n        (first\n         (reduce #(vector (apply %2 %1)) coll (reverse f)))))", "user": "57dd47f4e4b0bd073c20243e"}, {"problem": 58, "code": "(fn mycomp\n  [& all-fns]\n  (fn [& args]\n    (first (reduce (fn [acc next-val] (list (apply next-val acc))) args (reverse all-fns)))))", "user": "5785c1d4e4b0ebec4cfb74e1"}, {"problem": 58, "code": "(fn [& functions]\n  (fn [& arguments]\n    (first\n      (reduce \n       #(vector (apply %2 %1)) \n       arguments\n       (reverse functions)))))", "user": "57e139f6e4b0bfb2137f5a6c"}, {"problem": 58, "code": "(fn\n    [& -funcs]\n    (fn [& -args]\n        (loop [funcs (vec (reverse -funcs)) args -args]\n              (do (println args)\n              (if (= 1 (count funcs))\n                  (apply (first funcs) args)\n                  (recur (rest funcs) [(apply (first funcs) args)]))))))", "user": "57e3f709e4b0bfb2137f5aaf"}, {"problem": 58, "code": "(fn fc [& functions]\n  (fn [& args]\n    (first\n     (reduce (fn [result f]\n        (list (apply f result)))\n      args\n      (reverse functions)\n      )\n     )\n    )\n  )", "user": "57e7fbc7e4b0bfb2137f5b0b"}, {"problem": 58, "code": "(fn [& xs]\n  (fn [y & ys]\n    (if (coll? y)\n      (reduce (fn [zs f] (f zs)) y (reverse xs)) \n      (first (reduce (fn [zs f] [(apply f zs)]) (cons y ys) (reverse xs))))\n    ))", "user": "5705f569e4b0b0fb43fd0677"}, {"problem": 58, "code": "(fn compose [f & r]\n  (fn [& x]\n    (letfn [(comp-maker [r]\n              (cond\n               (empty? r) x\n               (empty? (rest r)) (apply (first r) x)\n               :else ((first r) (comp-maker (rest r)))))]\n      (f (comp-maker r))\n      )\n    )\n  )", "user": "57b9d21fe4b0fbc9809a27f7"}, {"problem": 58, "code": "(fn comb [& funcs]\n  (fn [& args]\n    (first\n      (reduce #(vector (apply %2 %1)) args (reverse funcs )))))", "user": "57df309ee4b0bd073c20245f"}, {"problem": 58, "code": "(fn [& funciones]\n\t(fn [& args]\n\t\t(loop [\tres (apply (last funciones) args)\n\t\t\t\tfns (butlast funciones)]\n\t\t\t(if (empty? fns)\n\t\t\t\tres\n\t\t\t\t(recur ((last fns) res) (butlast fns))))))", "user": "57c1b32be4b05aa3c4741ca4"}, {"problem": 58, "code": "(fn mycomp [f & rfs]\n  (fn [& args]\n    (apply f (if (empty? rfs) args\n                 (list  (apply (apply mycomp rfs) args))))))", "user": "56f9c7c6e4b07572ad1a88ba"}, {"problem": 58, "code": "(fn c [h & s]\n\t(if (empty? s)\n\t\t(fn [& x] (apply h x))\n\t\t(fn [& x] (h (apply (apply c s) x)))))", "user": "57ccedaae4b0c746388ab88e"}, {"problem": 58, "code": "(fn ccomp [& fs] (\n    reduce (fn [acc, f] \n      (fn [& x] (f (apply acc x)))\n    ) (reverse fs)\n))", "user": "57eb7a97e4b0bfb2137f5b62"}, {"problem": 58, "code": "#(fn [& x] (reduce (fn [a b]\n                     (b a))\n                   (apply (last %&) x)\n                   (rest (reverse %&))))", "user": "57ec3d29e4b0bfb2137f5b77"}, {"problem": 58, "code": "(fn compose\n    ([] identity)\n    ([f] f)\n    ([f g] (fn [& args] \n             (f (apply g args))))\n    ([f g & rest] (reduce compose (list* f g rest))))", "user": "57ee804ee4b0bfb2137f5bbb"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& args]\n    (reduce #(%2 %1) (apply (last fs) args) (rest (reverse fs)))))", "user": "52761edae4b03e8d9a4a74d4"}, {"problem": 58, "code": "(fn [& functions]\n  (let [rfs (reverse functions)]\n    (fn [& args]\n      (loop [r args, [f & fs] rfs]\n        (cond (nil? f) (first r)\n              :else\n              (recur (conj () (apply f r)) fs))\n        ))\n    ))", "user": "57efb389e4b0bfb2137f5bdb"}, {"problem": 58, "code": "(fn c ([f & gs]\n       (if (empty? (rest gs))\n         #(f (apply (first gs) %&))\n         (c f (apply c gs)))))", "user": "57b39fbee4b0fbc9809a2783"}, {"problem": 58, "code": "(fn comp2 [& fs]\n  (fn [& args]\n    ((fn build[[bf & bfs] a]\n      (if bfs\n        (bf (build bfs a))\n        (apply bf a)))\n      fs args)))", "user": "57ee9ffbe4b0bfb2137f5bc2"}, {"problem": 58, "code": "(fn [& funs]\n  (fn [& args]\n    (first\n     (reduce #(vector (apply %2 %1)) args (reverse funs)))))", "user": "57ed2574e4b0bfb2137f5b93"}, {"problem": 58, "code": "(fn cmp\n  ([f g] (fn [& args] (f (apply g args))))\n  ([f g & fs] (reduce cmp (concat [f g] fs))))", "user": "57f0f7b8e4b0bfb2137f5bfe"}, {"problem": 58, "code": "(fn my-comp [& fns]\n  (let [cur-fn (first fns)\n        rest-fns (next fns)]\n    (loop\n     [fns-remaining rest-fns\n      final-fn cur-fn]\n      (let [first-fn (first fns-remaining)\n            next-fns (next fns-remaining)]\n        (if next-fns\n          (do\n            (println \"in if\")\n            (clojure.pprint/pprint final-fn)\n            (clojure.pprint/pprint first-fn)\n            (clojure.pprint/pprint next-fns)\n            (println (format \"Making a function #(%s (%s args))\" first-fn final-fn))\n            (recur next-fns (fn ([args] (final-fn (first-fn args)))\n                              ([arg1 arg2]\n                               (final-fn (first-fn arg1 arg2))))))\n          (do\n            (println \"in else\")\n            (println (format \"Making a function (%s (%s args))\" final-fn first-fn))\n            (clojure.pprint/pprint final-fn)\n            (clojure.pprint/pprint first-fn)\n            (clojure.pprint/pprint next-fns)\n            (fn\n              ([args]\n                 (final-fn (first-fn args)))\n              ([arg1 arg2]\n               (final-fn (first-fn arg1 arg2)))\n              ([arg1 arg2 arg3]\n               (final-fn (first-fn arg1 arg2 arg3)))\n              ([arg1 arg2 arg3 arg4]\n               (final-fn (first-fn arg1 arg2 arg3 arg4)))\n              )))))))", "user": "5658d775e4b00d3155796114"}, {"problem": 58, "code": "(fn n58\n  ([f g]\n   (fn\n     ([x] (f (g x)))\n     ([x & xs] (f (apply g x xs)))))\n  ([f g & fs]\n   (reduce n58 (list* f g fs))))", "user": "55bf6dbce4b01b9910ae2a12"}, {"problem": 58, "code": "#(reduce % (reverse %&)) (fn [g f] #(f (apply g %&)))", "user": "57e33f6fe4b0bfb2137f5a96"}, {"problem": 58, "code": "(fn my-comp\n  ([f g]\n   (fn [& args]\n     (f (apply g args))))\n  ([f g & fs]\n   (reduce my-comp (list* f g fs))))", "user": "566b57e9e4b0a866af6896ad"}, {"problem": 58, "code": "(fn perso-comp [& fns]\n  (fn [& args]\n    (loop [remaining (butlast fns) ans (apply (last fns) args)]\n      (if (empty? remaining)\n        ans\n        (recur (butlast remaining)  ((last remaining) ans))))))", "user": "5746061ae4b009280f9f2b5b"}, {"problem": 58, "code": "(fn [& funcs]\n  (fn [& args]\n    (first (reduce #(vector (apply %2 %1)) args (reverse funcs)))))", "user": "57e79d8ee4b0bfb2137f5afe"}, {"problem": 58, "code": "(fn c [f & fs]\n    (if (empty? fs)\n      f\n      (fn [& args] (f (apply (apply c fs) args)))))", "user": "4e837808535db62dc21a62d9"}, {"problem": 58, "code": "(fn [& fs]\n  #(first (reduce (fn [acc f] [(apply f acc)]) %& (reverse fs))))", "user": "57e20474e4b0bfb2137f5a82"}, {"problem": 58, "code": "(letfn [(c2 [g f]\n            (fn [& x] (f (apply g x))))]\n       (fn [& q] (reduce c2 (reverse q))))", "user": "5800edaae4b0a837a8b30c48"}, {"problem": 58, "code": "(fn [& fs] \n (letfn [(go-func [fs args]\n \n(if (empty? (rest fs)) \n  (apply (first fs) args) \n  ((first fs) \n    (go-func (rest fs) args)))\n)]\n (fn [& par] (go-func fs par))))", "user": "57f9011ee4b0d3187e900935"}, {"problem": 58, "code": "(fn [& funcs]\n  (letfn [(my-comp [func & funcs]\n            (if (empty? funcs)\n              func\n              (let [rest-func (apply my-comp funcs)]\n                (fn [& args]\n                  (func (apply rest-func args))))))]\n    (apply my-comp funcs)))", "user": "57a4fa50e4b0a966079561f1"}, {"problem": 58, "code": "(fn [& funcs]\n  (fn [& args]\n    (reduce #(%2 %1) (apply (last funcs) args) (rest (reverse funcs)))))", "user": "57e6997ee4b0bfb2137f5af0"}, {"problem": 58, "code": "(fn [& fs](reduce (fn [f g] #(f (apply g %&))) fs))", "user": "57ee42c4e4b0bfb2137f5bb1"}, {"problem": 58, "code": "(fn [& fns]\n  (let [[lf & lfs] (reverse fns)]\n    (fn [& args]\n      (reduce #(%2 %1) (apply lf args) lfs))))", "user": "57f8ba80e4b0d3187e90092f"}, {"problem": 58, "code": "(fn [& fs]\n  (reduce (fn [f g]\n            #(f (apply g %&))) fs))", "user": "5405885ee4b0addc1aec6668"}, {"problem": 58, "code": "(fn [& fs] (reduce (fn [f g] #(f (apply g %&))) fs))", "user": "57db2369e4b0bd073c20241f"}, {"problem": 58, "code": "(fn [& args] (fn [& more] (first(reduce (fn [a f] (vector(apply f a))) more (reverse args)))))", "user": "580c8fcee4b0849f6811b721"}, {"problem": 58, "code": "(fn c\n  ([f] f)\n  ([f & x]\n   #(f (apply (apply c x) %&))))", "user": "54d893a4e4b0a52adc2e2039"}, {"problem": 58, "code": "(fn cmp [& fns]\n  (fn [& params]\n    (let [r-fns (reverse fns)]\n      (reduce #(%2 %1) (apply (first r-fns) params) (rest r-fns)))))", "user": "570e6974e4b0b0fb43fd06ef"}, {"problem": 58, "code": "(fn [& f]\n  (fn [& l]\n    (loop [r (apply (last f) l)\n           f (drop-last f)]\n      (if (empty? f)\n        r\n        (recur ((last f) r) (drop-last f))))))", "user": "5801eed1e4b0a837a8b30c63"}, {"problem": 58, "code": "(fn g [& fs]\n    (fn [& args]\n      (loop [fs (reverse fs) args args]\n        (if-let [f (first fs)]\n          (recur (next fs) (list (apply f args)))\n          (first args)))))", "user": "500d3160e4b05f7c30cfa6a1"}, {"problem": 58, "code": "(fn\n  ([f] f)\n  ([g f] (fn [& args] (g (apply f args))))\n  ([g f & fs]\n   (fn [& args]\n     (reduce (fn [x f]\n               (f x))\n             (apply (last fs) args)\n             (concat [f g] (butlast fs))))))", "user": "5629dfaae4b00e49c7cb4813"}, {"problem": 58, "code": "(fn [& fs]\n  (reduce (fn [f g]\n            #(f (apply g %&))) fs))", "user": "57e544c5e4b0bfb2137f5ad3"}, {"problem": 58, "code": "(fn c [ f1 & more_funcs ]\n        (fn [ & args]\n          (if (empty? more_funcs)\n            (apply f1 args)\n            (f1 (apply (apply c more_funcs) args))\n            )))", "user": "57fc0719e4b0d3187e900987"}, {"problem": 58, "code": "(fn [& fns] \n  (fn [& vals]\n    (let [val (apply (last fns) vals) fns (drop-last fns)] \n      (loop [fns (reverse fns) val val]\n        (if (empty? fns) \n          val\n          (recur (rest fns) ((first fns) val)))))))", "user": "5686e652e4b0dcc4269f4059"}, {"problem": 58, "code": "(fn compose [& fs]\n (reduce (fn [f g] (fn [& xs] (f (apply g xs)))) fs))", "user": "55fbc657e4b0f488688e0666"}, {"problem": 58, "code": "(fn comb [& funcs]\n  (fn [& args]\n    (first\n      (reduce #(vector (apply %2 %1)) args (reverse funcs )))))", "user": "580d7e53e4b0849f6811b73e"}, {"problem": 58, "code": "(fn [& fs] (reduce (fn [f g] #(f (apply g %&))) fs))", "user": "581e61b0e4b04b46fc4b0f28"}, {"problem": 58, "code": "(fn my-comp [& fs]\n  (reduce \n    (fn [f g] \n      (fn [& args]\n        (f (apply g args))))\n    fs))", "user": "581b19e7e4b04b46fc4b0ec4"}, {"problem": 58, "code": "(fn [& fns]\n  (let [[ifn & rfns] (reverse fns)] \n    (fn [& args]\n      (reduce #(%2 %1) (apply ifn args) rfns))))", "user": "5821b018e4b04b46fc4b0f80"}, {"problem": 58, "code": "(fn f [& funcs]\n  (let [fs (reverse funcs)]\n  (fn [& args]\n    (reduce #(%2 %1) (apply (first fs) args) (rest fs)))))", "user": "563e1c0ee4b0da801c4e4665"}, {"problem": 58, "code": "(fn [& funs] (fn [& args] (let [fns (rest (reverse funs)) vl (apply (last funs) args)] (reduce #(%2 %1) vl fns))))", "user": "581a5fdbe4b0e114eb51a002"}, {"problem": 58, "code": "(fn cfns\n  ([f1 f2] #(f1 (apply f2 %&)))\n  ([f1 f2 f3] #(f1 (f2 (apply f3 %&))))\n  ([f1 f2 f3 f4] #(f1 (f2 (f3 (apply f4 %&))))))", "user": "56069006e4b08b23635d3174"}, {"problem": 58, "code": "(fn compose-it\n  [& functions]\n  (fn [& arg]\n    (loop [[h & t] (reverse functions)\n           accum arg]\n      (if (nil? t)\n          (apply h accum)\n          (recur t [(apply h accum)])))))", "user": "58152157e4b0f478707a0631"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& xs] (first (reduce (fn [acc f] [(apply f acc)]) xs (reverse fs)))))", "user": "5687b6abe4b0dcc4269f4061"}, {"problem": 58, "code": "(fn [& f]\n  (fn [& args]\n    (loop [fns f\n           input args]\n      (let [result (apply (last fns) input)\n            remaining (butlast fns)]\n        (if remaining\n          (recur remaining [result])\n          result)))))", "user": "581e8b86e4b04b46fc4b0f2b"}, {"problem": 58, "code": "(fn my-comp [& fs]\n  (loop [f (first fs)\n         rfs (rest fs)]\n    (if (empty? rfs)\n      f\n      (recur #(f (apply (first rfs) %&)) (rest rfs)))))", "user": "56449e4de4b0284900eef5f9"}, {"problem": 58, "code": "(fn [& fns]\n  (fn\n    [& args]\n    (reduce\n     (fn [p c]\n       (c p)\n       )\n     (apply (last fns) args)\n     (rest (reverse fns)))))", "user": "57f55632e4b0903ccab3dcf1"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& xs]\n    (loop [remaining fs, args xs]\n      (if (empty? remaining)\n        (first args)\n        (recur\n          (drop-last remaining)\n          [(apply (last remaining) args)])))))", "user": "58247423e4b051871117bec5"}, {"problem": 58, "code": "(fn [& funcs]\n  (fn [& args]\n    (reduce \n      #(%2 %1) \n      (apply (last funcs) args)\n      (rest (reverse funcs)))\n  ))", "user": "5710140fe4b09c608db7042e"}, {"problem": 58, "code": "(fn my-comp [& fns]\n    (let [fseq (reverse fns)]\n      (fn [& paras]\n        (loop [result (apply (first fseq) paras)\n               fseq (next fseq)]\n          (if fseq\n            (recur (apply (first fseq) (list result))\n                   (next fseq))\n            result)))))", "user": "5808ee16e4b0a837a8b30d16"}, {"problem": 58, "code": "(fn cmp\n  ([] identity)\n  ([f] f)\n  ([f g] \n   (fn \n     ([] (f (g)))\n     ([& args] (f (apply g args)))))\n  ([f g & other]\n   (reduce cmp (list* f g other))))", "user": "55815973e4b05c286339e0f6"}, {"problem": 58, "code": "(fn [& fns]\n  (fn [& args]\n    (loop [func (first fns)\n           xs (rest fns)]\n      (if (empty? xs)\n        (apply func args)\n        (recur (fn [& x]\n                 (func (apply (first xs) x))) (rest xs))))))", "user": "55cb11e9e4b0e31453f649ff"}, {"problem": 58, "code": "(fn\n  ([x y]\n   (fn [a] (x (y a))))\n  ([x y z]\n   (fn [& args] (x (y (apply z args))))))", "user": "572a856be4b0f4d77e65123b"}, {"problem": 58, "code": "(fn comb [& funcs]\n  (fn [& args]\n    (first\n      (reduce #(vector (apply %2 %1)) args (reverse funcs )))))\n\n\n;((fn [& funcs]\n;   (fn [& args]\n;     (loop [x (reverse funcs) y args]\n;       (if (empty? x)\n;         y\n;         (recur (apply (first x) y) (rest x)))))) rest reverse)", "user": "582c526ae4b051871117bf88"}, {"problem": 58, "code": "(fn [& fs]\n    (reduce (fn [f g]\n              #(f (apply g %&))) fs))", "user": "55c5b55fe4b0e31453f649b5"}, {"problem": 58, "code": "(fn my-comp2 [& all-fns]\n  (reduce\n   (fn [acc-fn curr-fn]\n     (fn [& args]\n       ;; Reduce consumes left to right. So swap acc-fn and curr-fn\n       ;; around so that the last function consumed is the inner-most\n       ;; function!\n       (acc-fn (apply curr-fn args))))\n   ;; The starting value (fn) for the accumilater\n   ;; is the identity fn\n   identity\n   all-fns))", "user": "58327a08e4b089d5ab817c7c"}, {"problem": 58, "code": "(fn\n  ([f g] (fn [x] (f (g x))))\n  ([f g h] (fn [& args] (f (g (apply h args))))))", "user": "57ed19a3e4b0bfb2137f5b8e"}, {"problem": 58, "code": "(fn [& fns]\n  (fn [& args]\n    (first \n     (reduce #(list (apply %2 %)) args (reverse fns)))))", "user": "5835cb06e4b089d5ab817cea"}, {"problem": 58, "code": "(fn compose [f & fs]\n  (fn [& args]\n    (if (seq fs)\n      (f (apply (apply compose fs) args))\n      (apply f args))))", "user": "5791d259e4b0ebec4cfb75c0"}, {"problem": 58, "code": "(fn [& f]\n  #((reduce (fn [v f] [(apply f v)]) %& (reverse f)) 0))", "user": "58391c94e4b089d5ab817d35"}, {"problem": 58, "code": "(fn func-comp [& fs]\n  (fn [& args]\n    (loop [a (apply (last fs) args) b (reverse (butlast fs))]\n      (if (empty? b)\n        a\n        (recur ((first b) a) (rest b))))))", "user": "5843b95de4b089d5ab817e3f"}, {"problem": 58, "code": "(fn [& fs]\n  (let [fs (reverse fs)]\n    (fn [& args]\n      (reduce #(%2 %1) (apply (first fs) args) (rest fs)))))", "user": "583e27e2e4b089d5ab817daa"}, {"problem": 58, "code": "(fn my-comp\n  ([a & b]\n    (fn [& arguments]\n      (a (apply (apply my-comp b) arguments))))\n  ([a] a)\n  ([] identity))", "user": "57e9a77ae4b0bfb2137f5b35"}, {"problem": 58, "code": "(fn composition \n  ([f g] #(f (apply g %&)))\n  ([f g & more] (reduce composition (composition f g) more)))", "user": "566ff0a1e4b0a866af6896ec"}, {"problem": 58, "code": "(fn fun [& flist] (fn [& arg]\n              (if (= (count flist) 1)\n                  (apply (first flist) arg)\n                  ((first flist) (apply (apply fun (rest flist)) arg))\n              )\n             ))", "user": "583c8bd4e4b089d5ab817d81"}, {"problem": 58, "code": "(fn [& funcs] \n  (if (empty? funcs)\n    identity\n    (let [rfuncs (reverse funcs)]\n      (fn [& args] \n        (reduce #(%2 %) \n                (apply (first rfuncs) args) \n                (rest rfuncs))))))\n\n; golf, no identity, min 2 funcs, 39 nws + 3 necws = 42\n;(fn [&f] \n;  (reduce (fn [g h]  \n;            #(g (apply h %&)))\n;          f))", "user": "54d341f7e4b0e8a36923e603"}, {"problem": 58, "code": "(fn [& f]\n  (fn [& args]\n    (reduce #(%2 %1)\n            (apply (last f) args)\n            (rest (reverse f)))))", "user": "54dbcbbde4b024c67c0cf774"}, {"problem": 58, "code": "(fn c [f & fs] \n  (if (nil? fs)\n    f\n    (fn [& xs]\n      (f (apply (apply c fs) xs))\n    )\n  )\n)", "user": "58335c22e4b089d5ab817c9a"}, {"problem": 58, "code": "(letfn [(apply-all [fs x] (if (empty? fs) x (apply-all (rest fs) ((first fs) x))))] (fn [& fs] (fn [& args] (apply-all (rest (reverse fs)) (apply (last fs) args)))))", "user": "584dadebe4b0b7285a6f4e44"}, {"problem": 58, "code": "(fn mycomp[a & b](if (not b) a (fn[& c](a (apply (apply mycomp b) c)))))", "user": "5849ac5fe4b089d5ab817ed7"}, {"problem": 58, "code": "(fn composition [& fns]\n  (fn [& v]\n    (loop [fs (reverse fns)\n           val v]\n      (if (empty? fs) (first val)\n                    (recur (rest fs) (list (apply (first fs) (list* val)))))\n    )))", "user": "525d44bfe4b0cb4875a45d6d"}, {"problem": 58, "code": "(fn [& args]\n    (fn [& params]\n      (first (reduce #(conj [] (apply %2 %1)) params (reverse args)))))", "user": "584917a1e4b089d5ab817ec9"}, {"problem": 58, "code": "(fn [& fs]\n  (reduce (fn [x c] (fn [& a] (x (apply c a)))) (first fs) (rest fs)))", "user": "584b0422e4b089d5ab817ef4"}, {"problem": 58, "code": "(fn [& f]\n  (fn [& args]\n    (reduce #(%2 %)\n            (apply (last f) args)\n            (rest (reverse f)))))", "user": "565b2fa5e4b068f2fe63dbfe"}, {"problem": 58, "code": "(fn f [ & funcs]\n  (fn [ & pars]\n      (let \n        [cc \n           (fn g [x & res]\n             (if\n               (nil? res)\n               (apply x pars)\n               (x (apply g res))))]\n        \n        (apply cc funcs))))", "user": "4e6a5728535d8ccf87e9fecf"}, {"problem": 58, "code": "(fn cmps [& funs]\n    (fn [& args]\n      (let [reverse-funs (reverse funs)] \n        (reduce #(%2 %1) (apply (first reverse-funs) args) (drop 1 reverse-funs)))))", "user": "585c5b21e4b0f14aab7c8786"}, {"problem": 58, "code": "(fn [& fns]\n  (fn [& args]\n    (let [rfns (reverse fns)\n          init-res (apply (first rfns) args)]\n      (reduce #(%2 %1) init-res (rest rfns)))))", "user": "585e2e77e4b0f14aab7c87ac"}, {"problem": 58, "code": "(fn compose [& fs]\n  (when-let [[f & fs] (seq (reverse fs))]\n    (reduce #(fn [& args] (%2 (apply % args))) f fs)))", "user": "583dacc2e4b089d5ab817d9f"}, {"problem": 58, "code": "(fn foo [& fs]\n  (when-let [[f & fs] (seq (reverse fs))]\n    (reduce #(fn [& args] (%2 (apply % args))) f fs)))", "user": "5722bf99e4b0c5bde472c0d6"}, {"problem": 58, "code": "(fn comb [& funcs]\n  (fn [& args]\n    (first\n      (reduce #(vector (apply %2 %1)) args (reverse funcs )))))", "user": "5863be34e4b0f14aab7c8830"}, {"problem": 58, "code": "(fn z [& fs]\n  (fn [& args]\n    (loop [funcs (rest (reverse fs))\n           res (apply (last fs) args)]\n      (if (empty? funcs)\n            res\n            (recur (rest funcs) ((first funcs) res))))))", "user": "583667c7e4b089d5ab817cfb"}, {"problem": 58, "code": "(fn [& funs]\n  (reduce #(fn [& x] (% (apply %2 x))) funs))", "user": "56b6e354e4b0982f16b37e41"}, {"problem": 58, "code": "(fn compose ([] identity)\n  ([f] f)\n  ([f g] \n     (fn \n       ([] (f (g)))\n       ([x] (f (g x)))\n       ([x y] (f (g x y)))\n       ([x y z] (f (g x y z)))\n       ([x y z & args] (f (apply g x y z args)))))\n  ([f g & fs]\n     (reduce compose (list* f g fs))))", "user": "58622733e4b0f14aab7c8803"}, {"problem": 58, "code": "(fn [& f]\n  (reduce (fn [a b] #(a (apply b %&))) f))", "user": "57d0e185e4b0bd073c202360"}, {"problem": 58, "code": "(fn [& fs]\n  (reduce\n   (fn [f1 f2]\n    (fn [& args]\n      (f1 (apply f2 args))))\n   fs))", "user": "5826a3b7e4b051871117befc"}, {"problem": 58, "code": ";((\n  (fn [& r] (fn  [& p] (reduce #( %2 %1) (apply (last r) p) (rest (reverse r))))) \n  ;;inc inc +) 1 2 4)", "user": "58566b42e4b0f14aab7c86f4"}, {"problem": 58, "code": "(fn [& fns]\n  (fn [& args]\n    (reduce #(%2 %1) (apply (last fns) args) (rest (reverse fns)))))", "user": "586615e6e4b0f14aab7c8858"}, {"problem": 58, "code": "(fn ncomp [& fs]\n  (fn final-fn [& args]\n    (loop [res (apply (last fs) args)\n           fns (drop-last fs)]\n      (if (empty? fns)\n        res\n        (recur ((last fns) res) (drop-last fns)))\n      )))", "user": "57ee82b1e4b0bfb2137f5bbd"}, {"problem": 58, "code": "(fn mycomp [& funcs]\n  (let [fns (reverse funcs)]\n    (fn [a & args]\n      (let [all (cons a args)]\n        (if (empty? args)\n          (reduce #(%2 %1) a (reverse funcs))\n          (reduce #(%2 %1) (apply (first fns) all) (rest fns)))))))", "user": "51456858e4b0e88796073408"}, {"problem": 58, "code": "(fn func-comp\n  ([f] f)\n  ([f0 f1]\n   (fn[& args]\n     (f0 (apply f1 args))))\n  ([f0 f1 & fs]\n   (apply func-comp (func-comp f0 f1) fs)))", "user": "582cbf48e4b051871117bfa6"}, {"problem": 58, "code": "(fn\n  [& fs]\n  (let [sorted-fs (reverse fs)]\n    (fn [& args]\n      (reduce (fn [acc f]\n                (f acc))\n              (apply (first sorted-fs) args)\n              (rest sorted-fs)))))", "user": "58543a59e4b07779d46863f5"}, {"problem": 58, "code": "(fn compose [& args]\n  (if (= 1 (count args))\n    (first args)\n    (fn [& params]\n      ((apply compose (butlast args)) (apply (last args) params)))))", "user": "585d9558e4b0f14aab7c879c"}, {"problem": 58, "code": "(fn comp_ [& f]\n  (partial\n    (fn [f & p]\n      (first \n        (reduce\n          #(list (apply %2 %))\n          p (reverse f))))\n    f))", "user": "56b1b59be4b0982f16b37df2"}, {"problem": 58, "code": "(fn [& f]\n    (fn [& x] (reduce (fn [result func]\n                        (func result))\n                      (apply (last f) x) (reverse (butlast f)))))", "user": "586b6753e4b01531a375e956"}, {"problem": 58, "code": "(fn [& fs] \n  (fn [& topArgs]\n    (first (reduce (fn [res f] [(apply f res)]) topArgs (reverse fs)))))", "user": "586bc870e4b01531a375e964"}, {"problem": 58, "code": "(fn [& x] (fn [y & z] (if (nil? z)\n                        (reduce #(%2 %1) y (reverse x))\n                        (reduce #(%2 %1) (apply (last x) (cons y z)) (rest (reverse x))))))", "user": "57dafe97e4b0bd073c20241c"}, {"problem": 58, "code": "(fn c [& [f ff & fs]]\n (if (seq fs)\n  (apply c (cons (fn [x](f (ff x))) fs))\n  (fn [& xs] (f (apply ff xs)))))", "user": "55597b84e4b0deb715856e36"}, {"problem": 58, "code": "(fn ([f f1] (fn [& args] (f (apply f1 args))))\n    ([f f1 f2] (fn [& args] (f (f1 (apply f2 args))))))", "user": "586e47dee4b01531a375e9a9"}, {"problem": 58, "code": "(fn[& fns]\n  (fn [& args]\n    (reduce\n     (fn[data e](e data))\n     (if (= 1 (count args))\n       ((first (reverse fns)) (first args))\n       (apply (first (reverse fns)) args))\n     (rest (reverse fns)))))", "user": "5832be57e4b089d5ab817c86"}, {"problem": 58, "code": "(fn [& fs] (reduce (fn [f g] #(f (apply g %&))) fs))", "user": "5857d27de4b0f14aab7c8710"}, {"problem": 58, "code": "(fn\n  ([f1] (partial f1))\n  ([f1 f2] (fn [x] (f1 (f2 x))))\n  ([f1 f2 f3] (fn [& args] (f1 (f2 (apply f3 args))))))", "user": "5874d5ace4b01531a375ea5b"}, {"problem": 58, "code": "(fn [& fs] (fn [& args] (let [fs (reverse fs)] \n            (reduce #(%2 %1) (apply (first fs) args) (rest fs)))\n                        ))", "user": "584d8724e4b0b7285a6f4e3e"}, {"problem": 58, "code": "(fn my-comp [& fns]\n  (if-let [fs (next fns)]\n    (let [inner-f (apply my-comp fs)\n          f (first fns)]\n      (fn [& args] (f (apply inner-f args))))\n    (first fns)))", "user": "4f3ca5a6e4b0e243712b1f53"}, {"problem": 58, "code": "(fn [& fns]\n  (reduce (fn [agg f] #(agg (apply f %&))) fns))", "user": "5879d577e4b01531a375ead8"}, {"problem": 58, "code": "(fn [& fs]\n  (let [comp2 (fn [f1 f2]\n                (fn [& vs]\n                  (f1 (apply f2 vs))))]\n    (reduce comp2 fs)))", "user": "55868660e4b059ccff29b1d4"}, {"problem": 58, "code": "(fn [& fns] (fn [& args] (first (reduce #(vector (apply %2 %1)) args (reverse fns)))))", "user": "581dad0ae4b04b46fc4b0f17"}, {"problem": 58, "code": "(fn func [f & fs]\n\n   (fn [& x]\n\n    (if fs\n\n      (f (apply (apply func fs) x))\n\n      (apply f x))))", "user": "586b6a0ae4b01531a375e957"}, {"problem": 58, "code": "(fn [& f] (fn [& p] (reduce #(%2 %1) (apply (last f) p) (rest (reverse f)))))", "user": "587294f0e4b01531a375ea1e"}, {"problem": 58, "code": "(fn [& funcs]\n  (fn [& stuff]\n      ((fn do-stuff [verbs nouns]\n         (if (empty? verbs)\n           (first nouns)\n           (do-stuff (rest verbs) [(apply (first verbs) nouns)])\n         )\n      ) (reverse funcs) stuff)\n  )\n)", "user": "58669dd0e4b0f14aab7c8867"}, {"problem": 58, "code": "(fn cheat\n  ([] identity)\n  ([f] f)\n  ([f g] \n   (fn \n     ([] (f (g)))\n     ([x] (f (g x)))\n     ([x y] (f (g x y)))\n     ([x y z] (f (g x y z)))\n     ([x y z & args] (f (apply g x y z args)))))\n  ([f g & fs]\n   (reduce cheat (list* f g fs))))", "user": "5881335ce4b0f1effa3b762e"}, {"problem": 58, "code": "(fn [& fns]\n  (fn [& args]\n    ((fn [fns args]\n       (println fns args)\n       (if (empty? fns)\n         (first args)\n         (recur (drop-last fns)\n                (list (apply (last fns) args)))))\n     fns args)))", "user": "58800fd4e4b0f1effa3b7606"}, {"problem": 58, "code": "(fn [& fs] (reduce (fn [f g] #(f (apply g %&))) fs))", "user": "5872935ce4b01531a375ea1d"}, {"problem": 58, "code": "(fn c [& x]\n  (fn [& y]\n  \t(if (second x)\n    \t((first x) (apply (apply c (rest x)) y))\n    \t(apply (first x) y))))", "user": "58844d43e4b0f1effa3b7696"}, {"problem": 58, "code": "(fn x [s & a]\n  (if (nil? a)\n    #(apply s %&)\n    #(s (apply (apply x a) %& ))))", "user": "587c59d1e4b01531a375eb17"}, {"problem": 58, "code": "(\n    fn comb [& funcs]\n    (fn [& args]\n      (first\n       (reduce\n        #(vector\n          (apply %2 %1)\n          )\n        args\n        (reverse funcs )\n        )\n       )\n      )\n    )", "user": "58047205e4b0a837a8b30ca9"}, {"problem": 58, "code": "(fn [& fns]\n  (reduce (fn [afn vfn] (fn [& x] (afn (apply vfn x))))\n          identity fns))", "user": "5884e807e4b0f1effa3b76a6"}, {"problem": 58, "code": "(fn composite [& fns] (fn [& args] (reduce #(%2 %1) (apply (first (reverse fns)) args) (rest (reverse fns)))))", "user": "578d459ee4b0ebec4cfb7567"}, {"problem": 58, "code": "(fn [& fns]\n  (fn [& args]\n    (reduce #(%2 %1) (apply (last fns) args) (rest (reverse fns)))))", "user": "54f26266e4b024c67c0cf8c5"}, {"problem": 58, "code": "(fn [& fs]\n  (let [fs (reverse fs)]\n    (fn [& args]\n      (let [result (apply (first fs) args)]\n        (reduce (fn [x f]\n                           (f x)) result (rest fs))))))", "user": "58949f8de4b00487982d525e"}, {"problem": 58, "code": "(fn my-comp\n  ([] identity)\n  ([f] f)\n  ([f g] (fn \n           ([] (f (g)))\n           ([x] (f (g x)))\n           ([x y] (f (g x y)))\n           ([x y & xs] (f (apply g x y xs)))))\n  ([f g & fs] (reduce my-comp (list* f g fs))))", "user": "552b6ddbe4b0ffed3738f965"}, {"problem": 58, "code": "(fn mycomp\n  ([foo] foo)\n  ([foo & rst]\n   (let [bar (apply mycomp rst)]\n     (fn [& args] (foo (apply bar args))))))", "user": "562add6de4b00e49c7cb4834"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& args]\n    (let [fs (reverse fs)]\n      (loop [v args\n             fs fs]\n        (if (empty? fs)\n          (first v)\n          (recur [(apply (first fs) v)] (rest fs)))))))", "user": "4fe49706e4b0e8f79898feb7"}, {"problem": 58, "code": "(fn comp-1\n  ([f] f)\n  ([f1 f2] (fn [& args] (f1 (apply f2 args))))\n  ;([f1 f2 f3] (comp-1 (comp-1 f1 f2) f3))\n  ([f1 f2 & fs] (reduce (fn [lf f] (comp-1 lf f)) (comp-1 f1 f2) fs)))", "user": "585dbe41e4b0f14aab7c879f"}, {"problem": 58, "code": "(fn [& fns]\n  (fn [& col]\n    (-> (reduce (fn [acc func]              \n              (vector (apply func acc)))\n            col\n            (reverse fns))\n        first)))", "user": "53b05a75e4b047364c044482"}, {"problem": 58, "code": "(fn [& fns]\n  (fn [& xs]\n    (let [[f & fns] (reverse fns)]\n      (reduce #(%2 %1) (apply f xs) fns))))", "user": "5896a0e6e4b00487982d52a8"}, {"problem": 58, "code": "(fn f [g & gs]\n      (fn [& xs]\n        (if (seq gs)\n          (g (apply (apply f gs) xs))\n          (apply g xs))))", "user": "53b42472e4b047364c0444b2"}, {"problem": 58, "code": "(fn [& funcs]\n   (fn [& args]\n     (first\n       (reduce #(vector (apply %2 %1)) args (reverse funcs )))))", "user": "5890dbeae4b00487982d51e3"}, {"problem": 58, "code": "(fn mycomp\n  ([] identity)\n  ([f] f)\n  ([f g] (fn [& args] (f(apply g args))))\n  ([f g & fs] (reduce mycomp (cons f (cons g fs))) )\n  )", "user": "589a8dace4b00487982d5311"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& args]\n    (reduce  \n\t#(%2 %1)\n(apply (last fs) args) (reverse (butlast fs)))))", "user": "575ddfd1e4b02ea11479938d"}, {"problem": 58, "code": "(fn [& allFuncs]\n  (let\n    [funcList (reverse allFuncs),\n     recurser \n     (fn recurs \n       [funcs args]\n       (if\n         (empty? funcs)\n         args\n         (recurs (rest funcs) (list (apply (first funcs) args)))\n         ))]\n    (fn \n      [& argList]\n      (first (recurser funcList argList))\n      )\n    )\n  )", "user": "58950f29e4b00487982d5270"}, {"problem": 58, "code": "(fn [& fs]\n  (reduce (fn [f g] (fn [& args] (f (apply g args)))) fs))", "user": "56255e2de4b00a550fc90297"}, {"problem": 58, "code": "(fn\n  ([] \"Nothing to see here\")\n  ([f] (str \"You wanted to use \" f))\n  ([f g]\n   (fn [x]\n     (f (g x))))\n  ([f g h]\n   (fn [& x]\n     (f (g (reduce h x))))))", "user": "4ee897fe535d93acb0a66883"}, {"problem": 58, "code": "(fn [& fs] (fn [& xs] (reduce (fn [x f] (f x)) (apply (last fs) xs) (rest (reverse fs)))))", "user": "58983e3fe4b00487982d52ce"}, {"problem": 58, "code": "(fn [& functions]\n  (fn [& args]\n    (let [functions-in-order (reverse functions)\n          first-application (apply (first functions-in-order) args)]\n      (reduce (fn [result func]\n                (func result))\n              first-application (rest functions-in-order)))))", "user": "4fe899a6e4b07c9f6fd12c54"}, {"problem": 58, "code": "(fn [& funcs]\n  (reduce (fn [f g]\n            (fn [& args] (f (apply g args))))\n          identity\n          funcs))", "user": "58a47197e4b01a0c0b2328f9"}, {"problem": 58, "code": "(fn [& fns]\n  (let [[f & fs] (reverse fns)]\n    (fn [& args]\n      (reduce #(%2 %1)\n              (apply f args)\n              fs))))", "user": "58a2b57fe4b02bd94d917ede"}, {"problem": 58, "code": "(fn [& funcs]\n  (reduce (fn [f1 f2]\n            (fn [& args] (f1 (apply f2 args)))\n            ) identity funcs)\n  )", "user": "589037b4e4b00487982d51d0"}, {"problem": 58, "code": ";;python: reduce(lambda f,g: lambda x: f(g(x)), fs) by picking f(g(x)) it's right to left, g(f(x)) is left to right.\n(fn [ & fs]\n  (reduce (fn [f g] #(f (apply g %&))) fs) )", "user": "58988cbbe4b00487982d52d7"}, {"problem": 58, "code": "(fn my-comp [& funcs]\n  (reduce (fn [inner-fun outer-fun]\n            #(outer-fun (apply inner-fun %&))) (reverse funcs)))", "user": "580d2788e4b0849f6811b730"}, {"problem": 58, "code": "(fn [& params]\n  (fn [& coll]\n    (reduce (fn [acc a-fn]\n              (a-fn acc))\n            (apply (last params) coll) (rest (reverse params)))))", "user": "5896735fe4b00487982d529d"}, {"problem": 58, "code": "(fn compose [& fs]                                   (if (empty? (rest fs))                                 (first fs)                                           (let [[f & t] fs]                                      (fn [& xs]                                             (f (apply (apply compose t) xs))))))", "user": "5895477fe4b00487982d527c"}, {"problem": 58, "code": "(fn [& fns] (fn [& args] (reduce #(%2 %1) (apply (last fns) args) (rest (reverse fns)))))", "user": "57625c18e4b0994c1922fba4"}, {"problem": 58, "code": "(fn my-comp [f & fseq]\n  (if (empty? fseq)\n    f\n    (fn [& x] (f (apply (apply my-comp fseq) x)))))", "user": "58a0fc33e4b02bd94d917ea3"}, {"problem": 58, "code": "(fn my-compose\n    ([] my-compose)\n    ([f] f)\n    ([f g] (fn [& args] (f (apply g args))))\n    ([f g & fs] (fn [& args]\n        (f (g (apply (reduce (fn [result f]\n                            (fn [& args]\n                                (result (apply f args))))\n                                identity fs) args))))))", "user": "58a953dae4b01a0c0b232968"}, {"problem": 58, "code": "(fn comb [& funcs]\n  (fn [& args]\n    (first\n      (reduce #(vector (apply %2 %1)) args (reverse funcs )))))", "user": "58a01c73e4b02bd94d917e95"}, {"problem": 58, "code": "(fn h\n    ([] identity)\n    ([f] f)\n    ([f g]\n        (fn [& args] (f (apply g args))))\n    ([f g & fns]\n        (reduce h (list* f g fns))))", "user": "58b06b7ce4b0ebc645576cdc"}, {"problem": 58, "code": "(fn [& fs] (reduce (fn [f g] #(f (apply g %&))) fs))", "user": "58ac513fe4b0005cfeb1a746"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& args]\n    ((fn _ [[f & r]]\n      (if (empty? r)\n        (apply f args)\n        (f (_ r))))\n      fs)))", "user": "58b51e05e4b0ebc645576d4c"}, {"problem": 58, "code": "(fn [& fns]\n  (fn [& args]\n    (first\n      (reduce #(vector (apply %2 %1))\n              args\n              (reverse fns)))))", "user": "559622cee4b0c79f6e1db975"}, {"problem": 58, "code": "(fn yo [& funs]\n  (let [first-app (first (reverse funs))\n        rest-app (rest (reverse funs))]\n      (fn [& bruh] (reduce #(%2 %1) (apply first-app bruh) rest-app))))", "user": "571d9669e4b0145328a7627f"}, {"problem": 58, "code": "(fn combo [& functions]\n  (let [reverseFunctions (reverse functions)\n        zeroFunction (first reverseFunctions)\n        restFunctions (rest reverseFunctions)]\n    (fn [& parameters]\n      (reduce #(%2 %1) (apply zeroFunction parameters) restFunctions))))", "user": "58a44a14e4b01a0c0b2328f2"}, {"problem": 58, "code": "(fn [& fs]\n  (reduce\n    (fn [f1 f2]\n      (fn [& args]\n        (f1 (apply f2 args))))\n    fs))", "user": "50385746e4b0803468ea2c6d"}, {"problem": 58, "code": "(fn foo [& fs]\n  (fn [& args]\n    (let [fsr (reverse fs)\n            f (first fsr)\n            xs (rest fsr)]\n        (reduce #(%2 %) (apply f args) xs))))", "user": "507eed82e4b06ce648bcdbfe"}, {"problem": 58, "code": "(fn [& fns] (reduce (fn [p v] (fn [& args] (v (apply p args)) ) ) (fn [& args] (apply (last fns) args ) ) (rest (reverse fns)) ) )", "user": "58a9e872e4b01a0c0b232973"}, {"problem": 58, "code": "(fn [& fs] (reduce (fn [f g] #(f (apply g %&))) fs))\n\n;; redo", "user": "5897dda4e4b00487982d52c8"}, {"problem": 58, "code": "(fn [& fs] (fn [& vs] (reduce #(do (println %1) (%2 %1)) (apply (first (reverse fs)) vs) (next (reverse fs)))))", "user": "574eb3b1e4b02ea114799247"}, {"problem": 58, "code": "(fn [& fns]\n  (fn [& args]\n    (first (reduce\n     (fn [args f]\n       (println args)\n       (list (apply f args)))\n       args\n       (reverse fns)))))", "user": "586a657de4b0f14aab7c88bd"}, {"problem": 58, "code": "(fn [& fs] (reduce (fn [f g] #(f (apply g %&))) fs))", "user": "58bc0531e4b0888cdc949d07"}, {"problem": 58, "code": "(fn [& fns]\n    (fn [& args]\n      (->> fns\n           reverse\n           (reduce #(list (apply %2 %1)) args)\n           first)))", "user": "58bbcbc8e4b0888cdc949d00"}, {"problem": 58, "code": "(fn [& funcs]\n  (fn [& args]\n    (first (reduce #(conj [] (apply %2 %1)) args (reverse funcs)))))", "user": "57b356c2e4b0fbc9809a277b"}, {"problem": 58, "code": "(fn [& fns]\n  (fn [& args]\n    (reduce\n      (fn [m f] (f m))\n      (apply (last fns) args)\n      (rest (reverse fns)))))", "user": "5881d1c2e4b0f1effa3b7644"}, {"problem": 58, "code": "(fn [f & fs]\n  (loop [f f\n         fs fs]\n    (if (empty? fs)\n      f\n      (recur (fn [& xs] (f (apply (first fs) xs))) (rest fs)))))", "user": "58bb218be4b0888cdc949cf4"}, {"problem": 58, "code": "(fn [& fs] (fn [& args] (let [[f-last & f-rest] (reverse fs)] (reduce #(%2 %1) (apply f-last args) f-rest))))", "user": "58ba8e7ce4b0888cdc949ce8"}, {"problem": 58, "code": "(fn comb [& funcs]\n  (fn [& args]\n    (first\n      (reduce #(vector (apply %2 %1)) args (reverse funcs )))))", "user": "58c1b4f5e4b021aa9917ed01"}, {"problem": 58, "code": "(fn [& fns]\n  (fn [& args]\n    (let [[f & r] (reverse fns)]\n      (reduce #(%2 %1) (apply f args) r))))", "user": "58923efce4b00487982d521c"}, {"problem": 58, "code": "(fn [& coll] \n  (fn [& args] (loop [c (reverse coll)\n                     arg args]\n                (if (empty? c)\n                  (first arg)\n                  (recur (rest c) \n                         (list (apply (first c) arg)) )))))", "user": "562326cbe4b03f08ee9a9230"}, {"problem": 58, "code": "(fn mcomp \n   ([] identity)\n   ([f] f)\n   ([f g] (fn [& x] (f (apply g x))))\n   ([f g h] (fn [& x] (f (g (apply h x)))))\n)", "user": "57887de2e4b0ebec4cfb751c"}, {"problem": 58, "code": "(fn [& fs]\n    (fn [& xs]\n      (loop [fs (reverse fs) xs xs]\n        (if (empty? fs)\n          (first xs)\n          (recur (rest fs)\n                 [(apply (first fs) xs)])))))", "user": "58b81490e4b0ebc645576d8c"}, {"problem": 58, "code": "(fn my-comp\r\n  [& fns]\r\n  (fn [& args]\r\n    (reduce (fn [acc f] (f acc))\r\n            (apply (last fns) args)\r\n            (rest (reverse fns)))))", "user": "56f514cee4b046a417f92068"}, {"problem": 58, "code": "(fn [& fs] \n  (fn [& xs] \n    (first (reduce #(list (apply %2 %1))\n            xs\n            (reverse fs)))))", "user": "58c2df0ae4b021aa9917ed17"}, {"problem": 58, "code": "(fn [& fs]\n  (reduce \n   #(fn [& args]\n      (%1 (apply %2 args)))\n   fs))", "user": "58ca8a1de4b03c36ff7e5835"}, {"problem": 58, "code": "(fn [& as]\n    (partial (fn func\n        ([args lst]\n            (if-not (empty? args)\n                (func (rest args) ((first args) lst))\n                lst))\n        ([args fst & lst]\n            (if-not (empty? args)\n                (func (rest args) (apply (first args) (cons fst lst)))\n                lst))\n        ) (reverse as)))", "user": "53882352e4b0640c7a9a5898"}, {"problem": 58, "code": "(fn [& args] (fn [& xs] (let [fs (reverse args)] (reduce #(%2 %1) (apply (first fs) xs) (drop 1 fs)))))", "user": "58946fa1e4b00487982d525b"}, {"problem": 58, "code": "(fn [& fs]                                                                                 \n  (fn [& args]                                                                             \n    (let [fs (reverse fs)]                                                                 \n      (loop [fss (rest fs) res (apply (first fs) args)]                                    \n        (if (seq fss)                                                                      \n          (recur (rest fss) ((first fss) res))                                             \n          res)))))", "user": "589771f9e4b00487982d52bd"}, {"problem": 58, "code": "(fn composite\n  ([] identity)\n  ([f] f)\n  ([f g]\n   (fn\n     ([] (f (g)))\n     ([x] (f (g x)))\n     ([x y] (f (g x y)))\n     ([x y & args] (f (apply g x y args)))))\n  ([f g & fs]\n   (reduce composite (list* f g fs))))", "user": "58b989dbe4b0888cdc949ccd"}, {"problem": 58, "code": "(fn [& xs] (loop [xs xs f (fn [x] x)] (if (seq xs) (recur (rest xs) (fn [& x] (f (apply (first xs) x)))) f)))", "user": "58ac14ebe4b0005cfeb1a740"}, {"problem": 58, "code": "(fn [& fs]\n           (fn [& args]\n             (first (reduce #(list (apply %2 %1)) args (reverse fs)))))", "user": "567d132ee4b05957ce8c61c3"}, {"problem": 58, "code": "(fn composition [& args]\n  (fn [& x]\n    (first (reduce (fn [val f]\n      (list (apply f val))) x (reverse args)))))", "user": "587a3babe4b01531a375eae2"}, {"problem": 58, "code": "(fn my-comp [& fns]\n  (fn [& args]\n    (if (= (count fns) 1)\n      (apply (first fns) args)\n      ((apply my-comp (butlast fns))\n       (apply (last fns) args)))))", "user": "5410499de4b01498b1a719a6"}, {"problem": 58, "code": "(fn [& f]\n  (fn [& a]\n    (reduce\n            #(%2 %1)\n            (apply (last f) a)\n            (rest (reverse f)))))", "user": "5893c64ce4b00487982d524b"}, {"problem": 58, "code": "(fn [& args] (fn [& params] (first (reduce (fn [a b] (vector (apply b a)))  params (reverse args))) ) )", "user": "575bd5f9e4b02ea114799365"}, {"problem": 58, "code": "(fn [& fs]\n  \t(fn [& arg]\n      \t(loop [[ff & restf] (reverse (butlast fs))\n               arg (apply (last fs) arg)]\n          (if ff\n              (recur restf (ff arg))\n              arg))))", "user": "5703a557e4b08d47c97781f4"}, {"problem": 58, "code": "(fn comp-fn [f & more]\n  (fn [x & y]\n    (let [fs (reverse (cons f more))\n          ff (first fs)\n          fr (if y (apply ff (cons x y)) (ff x))\n          ]\n      (loop [\n             rf (rest fs)\n             rs fr\n             ]\n        (if (empty? rf)\n          rs\n          (recur (rest rf) ((first rf) rs))\n          )\n        )\n      )\n    )\n  )", "user": "5708e8f6e4b0b0fb43fd06a4"}, {"problem": 58, "code": "(fn [& input]\n  (let [funcs (reverse input)]\n    (reduce #(fn [& a] (%2 (apply %1 a))) funcs)))", "user": "57b9fb56e4b0fbc9809a27fa"}, {"problem": 58, "code": "(fn [& fns]\n  (fn [& args]\n    (let [[f & fs] (reverse fns)]\n      (reduce #(%2 %1) (apply f args) fs))))", "user": "58dcf11ae4b0a4d5acaab6af"}, {"problem": 58, "code": "(fn [& fs] \n  (fn [& l]\n    (let [f1 (last fs)\n          fr (reverse (butlast fs))\n          l2 (apply f1 l)]\n      (reduce #(%2 %1) l2 fr))))", "user": "55b4fa46e4b01b9910ae2983"}, {"problem": 58, "code": "(fn [& fns]\n  (fn [& args]\n    (first \n     (reduce \n       (fn [res f] (list (apply f res)))\n       args\n       (reverse fns)))))", "user": "57b35772e4b0fbc9809a277c"}, {"problem": 58, "code": "(fn [& fs]\n  (let [fns (reverse fs)]\n    (fn [& args]\n      (loop [acc (apply (first fns) args)\n             fns (next fns)]\n        (if-not fns\n          acc\n          (recur ((first fns) acc)\n                 (next fns)))))))", "user": "563f4c47e4b08d4f616f5ed2"}, {"problem": 58, "code": "(fn my-reduce-comp [& fs]  (reduce (fn [f g]            (println g)            (fn [& args]              (f (apply g args))))          fs))", "user": "58e37946e4b005f69f193cae"}, {"problem": 58, "code": "(fn [& funcs]\n  (fn [& args]\n    (let [[f & fs] (reverse funcs)]\n      (reduce #(%2 %1) (apply f args) fs))))", "user": "58a1f61ae4b02bd94d917ecd"}, {"problem": 58, "code": "(fn [& fns]\n  (reduce (fn [f g]\n            (fn [& a] (f (apply g a)))) fns))", "user": "577bcbd9e4b0d3393e5deb1b"}, {"problem": 58, "code": "(fn c\n  [& funs]\n  (fn [arg & remain-args]\n    (let [funs (reverse funs)\n          r (if (empty? remain-args)\n              ((first funs) arg)\n              (apply (first funs) (conj remain-args arg))\n              )]\n      (loop [funs (rest funs)\n             r r]\n        (if-not (empty? funs)\n          (recur (rest funs) ((first funs) r))\n          r)))))", "user": "58de563fe4b0a4d5acaab6e3"}, {"problem": 58, "code": "(fn my-comp\n  ([f] (fn [& x] (apply f x)))\n  ([f & fs] (fn [& x] (f (apply (apply my-comp fs) x)))))", "user": "53ae0c50e4b047364c044471"}, {"problem": 58, "code": "#(fn [& v]  \n    (->> %&\n         reverse\n         (reduce (fn [c o] [(apply o c)]) v)\n         first))", "user": "5614425ee4b05f002753dfb1"}, {"problem": 58, "code": "(fn [& fs] (reduce (fn [f g] #(f (apply g %&))) fs))", "user": "58e2e11ce4b005f69f193ca0"}, {"problem": 58, "code": "(fn [& fs]\n  (let [[f1 & frest] (reverse fs)]\n   (fn [& x]\n    (reduce\n     (fn [acc f]\n      (f acc))\n     (apply f1 x)\n     frest\n     )\n    )\n  )\n)", "user": "57cd7498e4b0c746388ab897"}, {"problem": 58, "code": "(fn [& fs] (reduce (fn [f g] #(f (apply g %&))) fs))", "user": "58e256e1e4b005f69f193c90"}, {"problem": 58, "code": "(fn my-comp\n  [& fns]\n  (reduce \n   (fn [accum f]\n     (fn [& args]\n       (accum (apply f args))))\n   identity\n   fns))", "user": "58740c18e4b01531a375ea49"}, {"problem": 58, "code": "; maybe?\n#_(defmacro mycomp [& fns]\n  (fn [& args]\n    (reduce #(list %2 %1)\n       (list apply (last fns) args)\n       (reverse (butlast fns)) )))\n\n(fn [& fns]\n  (fn [& args]\n    (reduce #(%2 %1) \n      (apply (last fns) args)\n      (reverse \n        (butlast fns) ))))", "user": "58acce0ae4b0005cfeb1a754"}, {"problem": 58, "code": "(fn [& funcs]\n    (fn [& args]\n      (first\n       (reduce #(vector (apply %2 %1)) args (reverse funcs)))))", "user": "517e12e3e4b0fcc7c5d37d3c"}, {"problem": 58, "code": "(fn [& fs]\n  (reduce (fn [f g]\n            #(f (apply g %&)))\n          fs))", "user": "58dcb8cde4b0a4d5acaab6a7"}, {"problem": 58, "code": "(fn [& fs] (reduce (fn [f g] #(f (apply g %&))) fs))", "user": "58e5f995e4b056aecfd47ca5"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& ps]\n    (reduce\n     #(%2 %1)\n     (apply (last fs) ps)\n     (next (reverse fs)))))", "user": "58ebae90e4b056aecfd47d44"}, {"problem": 58, "code": "(fn comb [& funcs] (fn [& args] (first (reduce #(vector (apply %2 %1)) args (reverse funcs)))))", "user": "58be3142e4b0888cdc949d44"}, {"problem": 58, "code": "(fn [& fs] (reduce (fn [f g] #(f (apply g %&))) fs))", "user": "58eba5cce4b056aecfd47d41"}, {"problem": 58, "code": "(fn [& fs](letfn [(comp' \n    ([] identity)\n    ([f] f)\n    ([f g] (fn \n        ([] (f (g)))\n        ([& x] (f (apply g x)))))\n    ([f g & h] (reduce comp' f (list* g h))))]\n  (apply comp' fs)))", "user": "58e7229fe4b056aecfd47cc4"}, {"problem": 58, "code": "(fn [& fs]\n    (reduce (fn [f g]\n              #(f (apply g %&)))\n            fs))", "user": "58ed713de4b056aecfd47d84"}, {"problem": 58, "code": "(fn c\n  ([] identity)\n  ([f] f)\n  ([f g]\n   (fn [& args]\n     (f (apply g args))))\n  ([f g & fs]\n   (reduce c (list* f g fs))))", "user": "58e58ae9e4b056aecfd47c9a"}, {"problem": 58, "code": "(fn\n  ([f g]\n   (fn [& args]\n     (f (apply g args))))\n  ([ f g h]\n   (fn [& args]\n     (f (g (apply h args)))))\n  )", "user": "5823d3e6e4b051871117beb8"}, {"problem": 58, "code": "(fn c [f g & more]\n  (if (seq more)\n    (c f (c g (first more)))\n    (fn [& xs] (f (apply g xs)))))", "user": "58ef4db9e4b056aecfd47dc6"}, {"problem": 58, "code": "(fn compose [& fns]\r\n  (fn [& input]\r\n    (reduce #(->> %1 (%2))\r\n            (apply (last fns) input)\r\n            (rest (reverse fns)))))", "user": "58f2e8fbe4b0438e51c2ce94"}, {"problem": 58, "code": "(fn [& fs]\n       (fn [& xs]\n         (reduce #(%2 %1)\n                 (apply (->> fs reverse first) xs)\n                 (->> fs reverse rest))))", "user": "58c4b11ae4b021aa9917ed2c"}, {"problem": 58, "code": "(fn [& functs]\n  (reduce \n    #(fn\n      [& p]\n      (%1 (apply %2 p)))\n    functs\n   ))", "user": "58d28c70e4b03c36ff7e5901"}, {"problem": 58, "code": "(fn [& fs] (fn [& args] (let [g (apply (last fs) args)] (reduce #(%2 %1) g (reverse (drop-last fs))))))", "user": "5796d3ebe4b039eba2ecb0ee"}, {"problem": 58, "code": "(fn [& fns]\n  (reduce #(fn [& args] (%1 (apply %2 args))) fns))", "user": "58ec1e63e4b056aecfd47d54"}, {"problem": 58, "code": "(fn [& fs]\n    (fn [& ls] \n       (first \n        (reduce \n           \t(fn [acc f] (list (apply f acc)))\n         \tls (reverse fs)))))", "user": "56ca2f25e4b0ea9b8538f716"}, {"problem": 58, "code": "(fn [& fs] \n  (let [fs (reverse fs)\n        f  (fn f [fs & args] (if (empty? fs) (first args) (f (rest fs) (apply (first fs) args))))]\n    (fn [& args] (apply f (cons fs args)))))", "user": "58cfb517e4b03c36ff7e58b9"}, {"problem": 58, "code": "(fn [& f]\r\n  #((reduce (fn [v f] [(apply f v)]) %& (reverse f)) 0))", "user": "58f45ea0e4b0438e51c2cebc"}, {"problem": 58, "code": "(fn mycomp [f & fs]\n  (if (empty? fs) f\n      (fn [& args]\n        (let [res (apply (apply mycomp fs) args)]\n          (println res)\n          (f res)))))", "user": "58ef0b8ce4b056aecfd47dbf"}, {"problem": 58, "code": "(fn [& fns] (fn [& args] (let [fns_ (reverse fns)] (reduce (fn [r f] (f r)) (apply (first fns_) args) (rest fns_)))))", "user": "58987ee9e4b00487982d52d2"}, {"problem": 58, "code": "(fn [& fns]\n    (fn [& args]\n      (reduce #(%2 %1) (apply (last fns) args) (reverse (butlast fns)))))", "user": "58d27bcae4b03c36ff7e58fe"}, {"problem": 58, "code": "(fn [& xs]\n  (fn [& ys]\n    (reduce #(%2 %1)\n            (apply (last xs) ys) (rest (reverse xs)))))", "user": "58fd4c41e4b0438e51c2cfae"}, {"problem": 58, "code": "(fn\n  [& fns]\n  (fn [& args]\n    (reduce\n      (fn [curr f]\n        (f curr))\n      (apply (last fns) args)\n      (rest (reverse fns)))))", "user": "58f7dfe6e4b0438e51c2cf1f"}, {"problem": 58, "code": "(fn [& funcs]\n  (fn [& args]\n    (first (reduce\n             (fn [acc fu]\n               [(apply fu acc)])\n             args\n             (reverse funcs)))))", "user": "58bc6a88e4b0888cdc949d16"}, {"problem": 58, "code": "(fn [& fs] (reduce (fn [f g] #(f (apply g %&))) fs))", "user": "53dbca12e4b094d41abdfef6"}, {"problem": 58, "code": "(fn [& fns] \n           (fn [& args]\n             (reduce (fn [r f] (f r)) (apply (last fns) args) (rest (reverse fns)))))", "user": "58b86162e4b0ebc645576d97"}, {"problem": 58, "code": "(fn comb [& funcs]\n  (fn [& args]\n    (first\n      (reduce #(vector (apply %2 %1)) args (reverse funcs )))))", "user": "560124b0e4b04bb52996e17b"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& args]\n    (first\n      (reduce\n        (fn [res f] [(apply f res)])\n        args\n        (reverse fs)))))", "user": "5901158de4b0438e51c2d039"}, {"problem": 58, "code": "(fn [& f]\n  (fn [& a]\n    (->> (reduce (fn [acc next] (list (apply next acc))) a (reverse f))\n         (first))))", "user": "57c3bb49e4b05aa3c4741cc2"}, {"problem": 58, "code": "(fn [& fs]\n  (let [[f & fs] (reverse fs)]\n    (fn [& a]\n      (reduce #(%2 %1)\n              (apply f a) \n              fs))))", "user": "5552780ce4b0deb715856df4"}, {"problem": 58, "code": "(fn mycomp\n  [& fnargs]\n    (fn [& acargs]\n      (loop [ans (apply (last fnargs) acargs)\n             fnargs (rest (reverse fnargs))]             \n        (if (empty? fnargs)\n          ans\n          (recur ((first fnargs) ans) (rest fnargs))))))", "user": "58809253e4b0f1effa3b7618"}, {"problem": 58, "code": "(fn c\n  ([f a]\n   (fn\n     ([x] (f (a x)))\n     ([x y] (f (a x y)))\n     ([x y & l] (f (apply a x y l)))))\n  ([f g & fs]\n   (reduce c (list* f g fs))))", "user": "4e5e9f6b535d8a8b8723a2d2"}, {"problem": 58, "code": "(fn mycomp [ & fs]\n          (fn [ & args]\n            (loop [funcs (reverse fs)\n                   res args]\n\n              (if (empty? funcs)\n                (first res)\n                (recur (rest funcs) (vector (apply (first funcs) res)))))))", "user": "58c4492be4b021aa9917ed27"}, {"problem": 58, "code": "(fn comp-fn\n  [fst & rst]\n  (if (seq rst)\n    (fn [& args]\n      (fst (apply (apply comp-fn rst) args)))\n    fst))", "user": "588e4e05e4b00487982d5188"}, {"problem": 58, "code": "(fn com \n  ([] identity) \n  ([& fs] (fn [& xs] ((apply com (butlast fs)) (apply (last fs) xs)))))", "user": "5566d812e4b0c656e3ff1837"}, {"problem": 58, "code": "(fn compose [& fns]\n  (fn [& opts]\n    (reduce (fn [x y](y x)) \n            (apply (last fns) opts) \n            (rest(reverse fns)))))", "user": "58ffaddee4b0438e51c2cffe"}, {"problem": 58, "code": "(fn compose-3 [& fns]\n  (fn [& args]\n    (->> (reverse fns)\n         (reduce (fn [acc ele]\n                   (list (apply ele acc)))\n                 args)\n         first)))", "user": "561d8936e4b064ca9f4b16b2"}, {"problem": 58, "code": "(fn\n  [& funcs]\n  (fn [& args]\n   (first (reduce #(vector (apply %2 %1)) args (reverse funcs)))))", "user": "5640b135e4b08d4f616f5ee8"}, {"problem": 58, "code": "(fn [& fns]\n  (fn [& args]\n    (reduce (fn [result-so-far next-fn]\n              (next-fn result-so-far))\n            (apply (last fns) args)\n            (rest (reverse fns)))))", "user": "591072e0e4b0163c97b36ebc"}, {"problem": 58, "code": "(fn ([f1 & fs]\n    (let [fs (reverse (list* f1 fs))]\n      (fn [& args]\n        (loop [ret (apply (first fs) args) fs (next fs)]\n          (if fs\n            (recur ((first fs) ret) (next fs))\n            ret))))))", "user": "5910a43de4b0163c97b36ebf"}, {"problem": 58, "code": "(fn [& other-fns]\n  (fn [& inputs]\n    (reduce (fn [in fun] (fun in))\n            (apply (last other-fns) inputs) (rest (reverse other-fns)))))", "user": "5918db70e4b09b4ee5954bbb"}, {"problem": 58, "code": "(fn xcomp\n  [& f]\n  (fn [& args]\n    (loop [rem (reverse f), res args]\n      (if (empty? rem)\n        (first res)\n        (recur (rest rem) [(apply (first rem) res)])\n        )\n      )))", "user": "590b3aeae4b047aa04b199d0"}, {"problem": 58, "code": "(fn \n  [& fns] \n  (reduce \n   (fn [prevFn nextFn] \n     (fn [& args] \n       (nextFn (apply prevFn args))\n     ) \n   )\n   (reverse fns)\n  )\n)", "user": "59175adde4b09b4ee5954b9a"}, {"problem": 58, "code": "(fn foo [& [f & fs]]\n  (if (nil? fs)\n       f\n       #(f (apply (apply foo fs) %&))))", "user": "59156f0be4b0163c97b36f3d"}, {"problem": 58, "code": "(fn [& functions]\n  (fn [& args]\n    (loop [args args\n           fns (reverse functions)]\n      (if (empty? fns)\n        (first args)\n        (recur [(apply (first fns) args)]\n               (rest fns))))))", "user": "585aad0be4b0f14aab7c8753"}, {"problem": 58, "code": "(fn t [& fns]\n (let [fns-rev (reverse fns)]\n (fn [& args]\n  (reduce #(%2 %1)\n  (apply (first fns-rev) args)\n (rest fns-rev)))))", "user": "589b98fae4b00487982d533c"}, {"problem": 58, "code": "(fn my-comp\n\t([] identity)\n\t([f] f)\n\t([f g] (fn [& args] (f (apply g args))))\n\t([f g & other] (reduce my-comp (list* f g other))))", "user": "58fb7d7ae4b0438e51c2cf7a"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& xs]\n    (first (reduce (fn [a b] [(apply b a)]) xs (reverse fs)))))", "user": "58ffac9de4b0438e51c2cffd"}, {"problem": 58, "code": "(fn [& fns]\n  (reduce (fn [acc f] (fn [& args] (f (apply acc args)))) (reverse fns)))", "user": "55f5b8d6e4b06e875b46ce8d"}, {"problem": 58, "code": "(fn c [& fs]\n     (if (> (count fs) 1)\n       (fn [& vs] ((first fs) (apply (apply c (rest fs)) vs)))\n       (fn [& vs] (apply (first fs) vs))))", "user": "5921a080e4b09b4ee5954c77"}, {"problem": 58, "code": "(fn [& ops]\n  (fn [& args]\n    (let [re-ops (reverse ops)]\n      (loop [op (first re-ops)\n             result (apply op args)\n             to-do (rest re-ops)]\n        (if (= 0 (count to-do)) result\n          (let [new-op (first to-do)\n                new-result (new-op result)\n                new-rest (rest to-do)]\n            (recur new-op new-result new-rest)))))))", "user": "591f05b4e4b09b4ee5954c42"}, {"problem": 58, "code": "(fn \n  ([x y] #(x (y %)))\n  ([x y z] (fn [& args] (x (y (apply z args))))))", "user": "557e8326e4b05c286339e0d7"}, {"problem": 58, "code": "(fn compose-fns [f & fs]\n  (if (empty? fs)\n    f\n    (fn [& args]\n      (f (apply (apply compose-fns fs) args)))))", "user": "580bd81ee4b0849f6811b711"}, {"problem": 58, "code": "(fn [& funcs]\n  (let [all-funcs (reverse funcs)]\n    (fn [& args]\n      (loop [res (apply (first all-funcs) args), fs (rest all-funcs)]\n        (if (empty? fs)\n          res\n          (recur ((first fs) res) (rest fs)))))))", "user": "59225498e4b09b4ee5954c8c"}, {"problem": 58, "code": "(fn [& args]\n  (let [[f & fns] (reverse args)]\n    (fn [& params]\n      (reduce (fn [a f] (f a))\n              (apply f params)\n              fns))))", "user": "514a3fa5e4b0829bd132edb6"}, {"problem": 58, "code": "(fn f58 [& fun]\n    (fn [& args]\n      (first (reduce #(list (apply %2 %1)) args (reverse fun)))))", "user": "57bbc9bde4b05aa3c4741c31"}, {"problem": 58, "code": "(fn my-comp [& fs]\n  (let [reversed (reverse fs)]\n    (fn [& xs] (reduce (fn [result f] (f result))\n                    (apply (first reversed) xs)\n                    (rest reversed)))))", "user": "58db097fe4b0a4d5acaab66f"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& xs]\n    (let [f (last fs)\n          ys (reverse (butlast fs))]\n\t  (reduce\n        (fn [memo f]\n          (f memo))\n        (apply f xs)\n        ys))))", "user": "59279a89e4b072a2710fced3"}, {"problem": 58, "code": "(fn [& fs] (reduce (fn [f g] #(f (apply g %&))) fs))", "user": "592518bfe4b072a2710fce65"}, {"problem": 58, "code": "(fn [& funcs]\n  (fn [& args]\n    (reduce #(%2 %1) (apply (last funcs) args) (rest (reverse funcs)))))", "user": "571dd145e4b0145328a76283"}, {"problem": 58, "code": "(fn ff \n  ([a b] (fn [coll] \n            (a (b coll))))\n  ([a b c] (fn [& coll]\n            (a (b (apply c coll))))))", "user": "585a7cb2e4b0f14aab7c874e"}, {"problem": 58, "code": "(fn [& fs] (reduce (fn [f g] (fn [& args] (f (apply g args)))) fs))", "user": "58eac340e4b056aecfd47d24"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& xs] (first (reduce (fn [x,y] [(apply y x)]) xs (reverse fs)))))", "user": "5933b736e4b072a2710fd05d"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& args]\n    (reduce (fn [ret f] (f ret)) (apply (last fs) args) (reverse (butlast fs)))))", "user": "59074b7ce4b047aa04b19951"}, {"problem": 58, "code": "(fn [& f]\n    (reduce (fn [a b] #(a (apply b %&))) f))", "user": "59385840e4b02506e01a29c9"}, {"problem": 58, "code": "(fn rcomp\n  ([f] f)\n  ([f g]\n   (fn\n     ([x]             (f (g x)))\n     ([x y]           (f (g x y)))\n     ([x y z]         (f (g x y z)))\n     ([x y z & args]  (f (apply g x y z args)))))\n  ([f g & fs]\n   (reduce rcomp (list* f g fs))))", "user": "54684c3be4b00cfc9eacc139"}, {"problem": 58, "code": "(fn\n    [& funcs]\n    (fn [& s]\n      (let [rev-funcs (reverse funcs)\n            res (apply (first rev-funcs) s)\n            rest-funcs (rest rev-funcs)]\n        (reduce\n         (fn\n           [acc x]\n           ( x acc)) res rest-funcs))))", "user": "58976bfde4b00487982d52bc"}, {"problem": 58, "code": "(fn [& functions]\n    (fn [& args]\n      (->\n       (reduce #(list (apply %2 %1)) args (reverse functions)) first))\n     )", "user": "5935b010e4b04f87174def55"}, {"problem": 58, "code": "(fn [& f]\n  (fn [& args]\n    (loop [tmpf (reverse f) ans args]\n      (if (empty? tmpf)\n        (first ans)\n        (recur (rest tmpf) (list (apply (first tmpf) ans)))))))", "user": "59368ccae4b02506e01a297a"}, {"problem": 58, "code": "(fn [& funcs]\n  \t\t(fn [& args]\n    \t\t(loop [tmpfuncs (reverse funcs) tmpargs args]\n    \t\t\t(if (empty? tmpfuncs)\n    \t\t\t\t(first tmpargs)\n    \t\t\t\t(recur (rest tmpfuncs) (list (apply (first tmpfuncs) tmpargs)))\n    \t\t\t\t))))", "user": "59368ccae4b02506e01a2979"}, {"problem": 58, "code": "(fn [& args]\n  (loop [f (fn [& others] (apply (last args) others)) fs (reverse (butlast args))]\n    (if (empty? fs)\n      f\n      (recur (fn [& others] ((first fs) (apply f others))) (rest fs)))))", "user": "55aaa36fe4b0988bba2ad94f"}, {"problem": 58, "code": "(fn comp' [& fns]\n  (reduce (fn [acc f]\n            (fn [& args] (acc (apply f args))))\n          identity fns))", "user": "59362afee4b0d6bb3c60df69"}, {"problem": 58, "code": "(fn [& f]\n  (fn [& args]\n    (reduce #(%2 %1)\n            (apply (last f) args)\n            (rest (reverse f)))))", "user": "557c6ca6e4b05c286339e0c4"}, {"problem": 58, "code": "(fn [& funs]\n  (fn [& args]\n    (loop [_funs (rest (reverse funs))\n           res (apply (last funs) args)]\n      (if (seq _funs)\n      \t(recur (rest _funs) ((first _funs) res))\n        res))))", "user": "51990df9e4b068aa333628fc"}, {"problem": 58, "code": "(fn my-comp [& fns]\n  (fn [& args]\n    (if (= (count fns) 1)\n      (apply (first fns) args)\n      ((apply my-comp (butlast fns))\n       (apply (last fns) args)))))", "user": "59251947e4b072a2710fce69"}, {"problem": 58, "code": "(fn \n([f g]\n  (fn [& args]\n    (f (apply g args))))\n([e f g]\n  (fn [& args]\n    (e (f (apply g args)))))\n)", "user": "593f95d8e4b069cdc2982be3"}, {"problem": 58, "code": "(fn compose [& fns] \n (reduce \n  (fn [composition f] #(f (apply composition %&))) \n  (last fns) \n  (rest (reverse fns))))", "user": "53c69ebce4b00fb29b22129c"}, {"problem": 58, "code": "(fn my_comp [& fns]\n  (fn [& i]\n    (if-not (empty? fns)\n      ((apply my_comp (drop-last fns)) (apply (last fns) i))\n      (first i))))", "user": "5829d588e4b051871117bf4a"}, {"problem": 58, "code": "(fn [& fl]\n  (fn [& args]\n    (first ((fn huehue [fnl]\n      (cond\n       (empty? fnl) args\n       :else (list (apply (first fnl) (huehue (rest fnl)))))) fl))))", "user": "5833a6d8e4b089d5ab817ca2"}, {"problem": 58, "code": "(fn kompozicija  [f & druge]\n  (if (empty? druge) (fn [& prdec] (apply f prdec))\n  (fn [& prdec] ((apply kompozicija f (drop-last druge)) (apply (last druge) prdec)))\n))", "user": "584d99c5e4b0b7285a6f4e42"}, {"problem": 58, "code": "(fn my-comp \n  ([] identity)\n  ([f] f)\n  ([f g] #(f (g %)))\n  ([f g & fs]\n   (reduce\n     (fn [cf func]\n        (fn [& args] (cf (apply func args))))\n     (my-comp f g) fs)))", "user": "55c66ffee4b0e31453f649c2"}, {"problem": 58, "code": "(fn my-comp [& fns]\n  (fn [& args]\n    (if (= (count fns) 1)\n      (apply (first fns) args)\n      ((apply my-comp (butlast fns))\n       (apply (last fns) args)))))", "user": "593d6793e4b069cdc2982ba6"}, {"problem": 58, "code": "(fn my-comp [& fns]\n  (fn [& args]\n    (if (= (count fns) 1)\n      (apply (first fns) args)\n      ((apply my-comp (butlast fns))\n       (apply (last fns) args)))))", "user": "592518cde4b072a2710fce66"}, {"problem": 58, "code": "(fn [& fs]\n  (reduce #(fn [& args] (%1 (apply %2 args)))\n          fs))", "user": "594783bee4b07ddc2dafada1"}, {"problem": 58, "code": "(fn [& fs] (reduce (fn [f g] #(f (apply g %&))) fs))", "user": "5938bae2e4b02506e01a29ea"}, {"problem": 58, "code": "(fn [& fns]\n  (fn [& args]\n    (reduce\n      (fn [v f] (f v))\n      (apply (last fns) args)\n      (rest (reverse fns)))))", "user": "5571d6e5e4b09a3098a5253f"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& xs]\n    (first (reduce (fn [acc f] [(apply f acc)]) xs (reverse fs)))\n  )\n)", "user": "5943abb6e4b060784b3b792b"}, {"problem": 58, "code": "(fn comp' [f & fs]\n  (if (empty? fs)\n    (fn [& xs] (apply f xs))\n    (fn [& xs] (f (apply (apply comp' fs) xs)))))", "user": "5953bdb6e4b066ee0a44aeed"}, {"problem": 58, "code": "(fn comb [& funcs]\n  (fn [& args]\n    (first\n(reduce #(vector (apply %2 %1)) args (reverse funcs )))))", "user": "5950f0bfe4b066ee0a44ae9f"}, {"problem": 58, "code": "(fn ([a b]\n  #(a (apply b %&)))\n  ([a b c]\n  #(a (b (apply c %&))))\n  )", "user": "593dfe60e4b069cdc2982bb1"}, {"problem": 58, "code": "(fn func [& funcs]\n  (loop [[f & fs] funcs\n         res identity]\n    (if (nil? f)\n      res\n      (recur fs \n             (fn [& x] (res (apply f x)))))))", "user": "59497f51e4b07ddc2dafaddd"}, {"problem": 58, "code": "(fn comp2 [& funcs]\n  (if (= (count funcs) 1)\n    (fn [& args] (apply (first funcs) args))\n    (fn [& args] ((first funcs) (apply (apply comp2 (rest funcs)) args)))))", "user": "592334c7e4b0a390037439ee"}, {"problem": 58, "code": "(fn my-comp [& fs]\n  (reduce (fn [f g]\n            (fn [& a]\n              (f (apply g a))))\n          fs))", "user": "5880e38fe4b0f1effa3b7625"}, {"problem": 58, "code": "(fn c\n  ([f1] f1)\n  ([f1 f2] (fn [& a] (f1 (apply f2 a))))\n  ([f1 f2 & m] (apply c (cons (c f1 f2) m))))", "user": "590b055ae4b047aa04b199c9"}, {"problem": 58, "code": "(fn [& fns]\n  (fn [& args]\n    (loop [val (apply (last fns) args) fnl (reverse (butlast fns))]\n      (if-let [f (first fnl)]\n        (recur (f val) (next fnl))\n        val))))", "user": "5958cef6e4b066ee0a44af94"}, {"problem": 58, "code": "(fn my-comp [& fns]\n  (fn [& args]\n    (if (= (count fns) 1)\n      (apply (first fns) args)\n      ((apply my-comp (butlast fns))\n       (apply (last fns) args)))))", "user": "592518e8e4b072a2710fce67"}, {"problem": 58, "code": "(fn [& fs] (reduce (fn [f g] #(f (apply g %&))) fs))", "user": "592519cfe4b072a2710fce6b"}, {"problem": 58, "code": "(fn [& fs] (reduce (fn [f g] #(f (apply g %&))) fs))", "user": "5948adffe4b07ddc2dafadc6"}, {"problem": 58, "code": "(fn mycomp \n  ([f] f)\n  ([f g] (fn [& args] (f (apply g args))))\n  ([f g & args] (reduce mycomp (concat [f g] args)) ))", "user": "594263cbe4b060784b3b790a"}, {"problem": 58, "code": "(fn [& funcs]\n  (fn [& args] (first (reduce #(list (apply %2 %)) args (reverse funcs)))))", "user": "595a885be4b066ee0a44afc4"}, {"problem": 58, "code": "(fn [& flist] (reduce (fn [f g] #(f (apply g %&))) flist))", "user": "5959c72ae4b066ee0a44afac"}, {"problem": 58, "code": "(fn [& fs] \n  (reduce (fn [f g] \n            #(f (apply g %&))) fs))", "user": "5958a0c8e4b066ee0a44af8c"}, {"problem": 58, "code": "(fn [& fns]\n  (fn [& xs]\n    (loop [functions (reverse fns)\n           partial-result xs]\n      (if (empty? functions)\n        (apply identity partial-result)\n        (recur (rest functions) (list (apply (first functions) partial-result)))))))", "user": "5947c6a6e4b07ddc2dafada7"}, {"problem": 58, "code": "(fn [& fs]\n    #(reduce (fn [acc f] (f acc)) (apply (last fs) %&) (rest (reverse fs))))", "user": "595bbab7e4b066ee0a44afe0"}, {"problem": 58, "code": "(fn [fn1 fn2 & more]\n  (reduce\n   (fn [f g]\n     (fn [& args]\n       (f (apply g args))))\n   (cons fn1 (cons fn2 more))))", "user": "58ee84e5e4b056aecfd47dab"}, {"problem": 58, "code": "(fn [& args] (reduce (fn [f g] #(f (apply g %&))) args))", "user": "595fe942e4b066ee0a44b075"}, {"problem": 58, "code": "(fn [& fs]\n  (let [[ff & fs] (reverse fs)\n        cf       #(reduce (fn [x f]\n                            (f x))\n                          (apply ff %)\n                          fs)]\n    (fn [& xs]\n      (cf xs))))", "user": "594880ade4b07ddc2dafadc2"}, {"problem": 58, "code": "(fn [& funcs]\n    (fn [& params]\n      (reduce #(%2 %) (apply (last funcs) params) (rest (reverse funcs))\n\t)))", "user": "583f1533e4b089d5ab817dc8"}, {"problem": 58, "code": "(fn [& s] (reduce (fn [f g] #(f (apply g %&))) s))", "user": "595eba88e4b066ee0a44b04e"}, {"problem": 58, "code": "(fn comb [& funcs]\n  (fn [& args]\n    (first\n      (reduce #(vector (apply %2 %1)) args (reverse funcs )))))", "user": "55c4e30be4b0e31453f649a6"}, {"problem": 58, "code": "(fn [& fs]\n    (let [fs (reverse fs)]\n      (fn [& as]\n        (reduce (fn [v f] (f v)) (apply (first fs) as) (rest fs)))))", "user": "572b73d0e4b0cd1946bd0f3a"}, {"problem": 58, "code": "(fn compose [& fs] \n  (fn [& args] (first (reduce (fn [a b] (list (apply b a))) args (reverse fs)))))", "user": "59663e77e4b069c0a1a1979f"}, {"problem": 58, "code": "(fn my_comp([f g]\n\t(fn [& args]\n\t\t(f (apply g args))))\n\t([f g & funs]\n\t\t(reduce my_comp (list* f g funs))))", "user": "5954eef0e4b066ee0a44af17"}, {"problem": 58, "code": "(fn \n  ([f g h]\n   (fn [& xs](f (g (apply h xs)))))\n  ([f g]\n   #(f (g %)))\n  )", "user": "59390a35e4b02506e01a29f3"}, {"problem": 58, "code": "(fn [& functions]\n  (fn [& x]\n    (loop [acc (apply (last functions) x) fns (rest (reverse functions))]\n      (if\n        (empty? fns)\n        acc\n        (recur\n         ((first fns) acc)\n         (rest fns))))))\n\n\n\n;(fn [& funcs]\n;  (fn [& args]\n;    (reduce #(%2 %1) (apply (last funcs) args) (rest (reverse funcs)))))", "user": "58d2af83e4b03c36ff7e5907"}, {"problem": 58, "code": "(fn [& fns] (let [flist (reverse fns)] (fn [& s] (reduce (fn [ret f] (println ret) (f ret)) (apply (first flist) s) (rest flist)))))", "user": "59468de7e4b07ddc2dafad88"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& args]\n    (->> (reduce\n           (fn [acc next] (list (apply next acc)))\n           args\n           (reverse fs))\n         first   \n      ))\n)", "user": "596e2a70e4b069c0a1a19861"}, {"problem": 58, "code": "(fn [& fs] (reduce (fn [f g] #(f (apply g %&))) fs))", "user": "5972fcf6e4b01722bebd4c92"}, {"problem": 58, "code": "(fn p58[& fs] \n  (fn [& xs] \n    (reduce #(%2 %1) \n            (apply (last fs) xs) (rest (reverse fs)))))", "user": "593910eae4b02506e01a29f4"}, {"problem": 58, "code": "(fn my-comp [& fns] \n  #(first (reduce (fn [v f]\n             [(apply f v)]) \n           %& \n           (reverse fns))))", "user": "5884f77ee4b0f1effa3b76a9"}, {"problem": 58, "code": "(fn [& args] (fn [& x] ( reduce #(%2 %1) (apply (last args) x) (rest (reverse args)) )))", "user": "596f6683e4b069c0a1a19877"}, {"problem": 58, "code": "(fn cmp\n  ([f] f) \n  ([f g]\n   (fn\n     ([] (f (g)))\n     ([x] (f (g x)))\n     ([x y] (f (g x y)))\n     ([x y z] (f (g x y z)))\n     ([x y z & args] (f (apply g x y z args)))))\n  ([f g & fs]\n   (reduce cmp (list* f g fs)) )\n )", "user": "593db05ae4b069cdc2982bab"}, {"problem": 58, "code": "(fn[& fns](fn[& xs](reduce #(%2 %1) (apply (last fns) xs) (reverse (butlast fns)))))", "user": "56163cc1e4b06b1bb21829ff"}, {"problem": 58, "code": "(fn [& f]\n           (fn [& l]\n             (reduce #(%2 %1)\n                     (apply (last f) l)\n                     (rest (reverse f)))))", "user": "591e0782e4b09b4ee5954c25"}, {"problem": 58, "code": "(fn fc\n  [& functions]\n  (fn\n    ([args]\n     (reduce #(%2 %1) args (reverse functions)))\n    ([arg & args]\n     (reduce #(%2 %1) (reduce (first (reverse functions)) arg args) (next (reverse functions)))\n     )\n    )\n  )", "user": "5888b75fe4b0f1effa3b771b"}, {"problem": 58, "code": "(fn ocomp\n  [& funcs]\n  (fn [& args]\n      (reduce #(%2 %1) (apply (last funcs) args) (reverse (butlast funcs)))\n      )\n\n)", "user": "59692530e4b069c0a1a197e4"}, {"problem": 58, "code": "(fn [& fs]\n      (reduce (fn [g h] #(g (apply h %&))) fs)\n      )", "user": "53ef3adfe4b0742d9025b0c9"}, {"problem": 58, "code": "(fn my-comp\n  [& fs]\n  (let [f-seq (reverse fs)]\n    (fn [& args]\n      (loop [remaining (rest f-seq)\n             result (apply (first f-seq) args)]\n        (if (empty? remaining)\n            result\n            (recur (rest remaining) ((first remaining) result)))))))", "user": "597f8c93e4b0dbe32238d0c1"}, {"problem": 58, "code": "(fn comp1\n  ([] identity)\n  ([f] f)\n  ([f g] \n     (fn \n       ([] (f (g)))\n       ([x] (f (g x)))\n       ([x y] (f (g x y)))\n       ([x y z] (f (g x y z)))\n       ([x y z & args] (f (apply g x y z args)))))\n  ([f g & fs]\n     (reduce comp1 (list* f g fs))))", "user": "587ee260e4b052da650a6353"}, {"problem": 58, "code": "(fn [& a] (reduce #(fn [& x] (% (apply %2 x))) a))", "user": "4fb1d7ace4b081705acca281"}, {"problem": 58, "code": "(fn mycomp\n  ([f] f)\n  ([f g] (fn inner\n           ([x] (f (g x)))\n           ([x y] (f (g x y)))\n           ([x y & args] (f (apply g x y args)))))\n  ([f g & fs]\n   (reduce mycomp (list* f g fs))))", "user": "4ff9a200e4b0678c553fc3ab"}, {"problem": 58, "code": "(fn [& fs]\n  (reduce (fn [f g]\n            #(f (apply g %&))) fs))", "user": "5727031ee4b0c5bde472c12f"}, {"problem": 58, "code": "(fn my-comp\n     ([] identity)\n     ([a] a)\n     ([a b] (fn\n              ([] (a (b)))\n              ([x] (a (b x)))\n              ([x y] (a (b x y)))\n              ([x y z] (a (b x y z)))\n              ([x y z & args] (a (apply b x y z args)))))\n     ([a b & fns] (reduce my-comp (concat [a b] fns))))", "user": "57596ba7e4b02ea11479931a"}, {"problem": 58, "code": "(fn [& fs]\n  (reduce (fn [f g]\n            #(f (apply g %&))) fs))", "user": "5989e080e4b021a7a535fed6"}, {"problem": 58, "code": "(fn my-comp\n  [& funcs]\n  (fn [& args]\n    (reduce (fn [a f]\n    \t         (f a))\n            (apply (last funcs) args)\n            (rest (reverse funcs)))))", "user": "5974d2ede4b01722bebd4cb6"}, {"problem": 58, "code": "(fn my-comp [& fns] \n  (fn [& args]\n    (reduce #(%2 %1) (apply (last fns) args) (rest (reverse fns)))))", "user": "59837909e4b021a7a535fe16"}, {"problem": 58, "code": "(fn [& functions]\n  (fn [& args]\n    (first\n      (reduce (fn [result function]\n                (list (apply function result)))\n              args\n              (reverse functions)))))", "user": "54c72b19e4b045293a27f636"}, {"problem": 58, "code": "(fn comb [& funcs]\n  (fn [& args]\n    (first\n      (reduce #(vector (apply %2 %1)) args (reverse funcs)))))", "user": "59738d98e4b01722bebd4ca1"}, {"problem": 58, "code": "(fn [& funcs]\n  (fn [& args]\n      (first (reduce #(list (apply %2 %1))\n              \t\t args (reverse funcs)))))", "user": "58fc52cee4b0438e51c2cf95"}, {"problem": 58, "code": "(fn my-comp [& fns]\n  (if (= 1 (count fns))\n    (first fns)\n    (let [[cur-fn & rest-fns] fns\n          rest-comp (apply my-comp rest-fns)]\n      #(cur-fn (apply rest-comp %&)))))", "user": "58fc92c5e4b0438e51c2cf9a"}, {"problem": 58, "code": "(fn [& fns]\n  (fn [& args]\n    (let [[f & fns] (reverse fns)]\n      (reduce #(%2 %1) (apply f args) fns))))", "user": "598588f2e4b021a7a535fe65"}, {"problem": 58, "code": "(fn comp1\n  ([] identity)\n  ([f] f)\n  ([f g]\n   (fn\n     ([] nil)\n     ([x] (f (g x)))\n     ([x & args] (f (apply g x args)))))\n  ([f g & args]\n   (reduce comp1 (list* f g args))))", "user": "57235dc4e4b0c5bde472c0e2"}, {"problem": 58, "code": "(fn sk-comp [& fns]\n  (fn [& xs]\n    (let [rfs (reverse fns)]\n      (reduce \n        #(%2 %1) \n        (apply (first rfs) xs) \n        (rest rfs)))))", "user": "5884f377e4b0f1effa3b76a8"}, {"problem": 58, "code": "(fn [& funcs]\n  (fn [& args]\n    ((fn call [funcs]\n       (let [f (first funcs)]\n         (if (second funcs)\n           (f (call\n               (rest funcs)))\n           (apply f args))))\n         funcs)))", "user": "598ab445e4b02b9968b84ce0"}, {"problem": 58, "code": "(letfn [(my-comp [f1 f2]\n                (fn [& args]\n                    (f1 (apply f2 args))\n                )\n        )]\n       #(reduce my-comp %&)\n)", "user": "5990fcb9e4b0866487ed0d5b"}, {"problem": 58, "code": "(fn [& funcs] (fn [& args] (first (reduce (fn [res func] (list (apply func res))) args (reverse funcs)))))", "user": "59874ff6e4b021a7a535fea1"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& args]\n    (first (reduce (fn [args f] (list (apply f args)))\n                   args\n                   (reverse fs)))))", "user": "5960a1a6e4b066ee0a44b08e"}, {"problem": 58, "code": "(fn apply-funcs-right-left [& funcs]\n  (let [[first-fn & rest-fns] (reverse funcs)]\n    (fn reduce-fns [& args]\n      (reduce #(%2 %1) (apply first-fn args) rest-fns))))", "user": "594266cfe4b060784b3b790b"}, {"problem": 58, "code": "(fn [& fns]\n    (fn [& vs]\n        ((fn cmps\n             [fs v]\n             (if (>= 1 (count fs))\n                 (apply (first fs) v)\n                 ((first fs) (cmps (rest fs) v))))\n          fns vs)))", "user": "591addcee4b09b4ee5954be1"}, {"problem": 58, "code": "(fn compose-functions [& fs]\n  (let [compose-two-functions (fn [f g] (fn [& args] (f (apply g args))))]\n    (reduce compose-two-functions fs)))", "user": "5993eeefe4b0b211ea3aaabc"}, {"problem": 58, "code": "(fn [& fns-reversed]\n    (let [fns' (reverse fns-reversed)]\n      (fn [& args]\n        (println fns')\n        (println args)\n        (loop [fns (rest fns'), acc (apply (first fns') args)]\n          (if (empty? fns)\n            acc\n            (recur (rest fns) ((first fns) acc)))))))", "user": "55916764e4b0604b3f94d57b"}, {"problem": 58, "code": "(fn [& funcs]\n         (fn f\n           [& args]\n           (first (reduce #(vector (apply %2 %1)) args (reverse funcs)))\n           ))", "user": "596d630ae4b069c0a1a19846"}, {"problem": 58, "code": "(fn comb [& funcs]\n  (fn [& args]\n    (first\n\t\t(reduce #(vector (apply %2 %1)) args (reverse funcs )))))", "user": "4fff289ae4b0678c553fc3fd"}, {"problem": 58, "code": "(fn comp' [& fns]\n  (reduce (fn [f g]\n            (fn [& x]\n              (f (apply g x))))\n          fns))", "user": "597a4277e4b02382a38ad1e2"}, {"problem": 58, "code": "(fn my-comp [f & fs]\n  (if (seq fs)\n    #(f (apply (apply my-comp fs) %&))\n    f))", "user": "59a24c92e4b066c664927d20"}, {"problem": 58, "code": "(fn compose [& funcs]\n  (fn [& args]\n\t(reduce #(%2 %1) (apply (last funcs) args) (rest (reverse funcs)))))", "user": "59971e2de4b07157cc8daacc"}, {"problem": 58, "code": "(fn [& fns]\n  (fn [& params]\n    (reduce (fn [p f] (f p))\n            (apply (last fns) params)\n            (rest (reverse fns)))))", "user": "59946856e4b0b211ea3aaac7"}, {"problem": 58, "code": "(fn my-comp [& fns]\n  (fn [& args]\n    (loop [rfns (reverse fns) fargs args]\n      (if (empty? rfns) \n        (first fargs)\n        (recur (rest rfns) [(apply (first rfns) fargs)])))))", "user": "59a2ba97e4b066c664927d2c"}, {"problem": 58, "code": "(fn my-comp \n  ([] identity)\n  ([func] (fn [& args] (apply func args)))\n  ([func & funcs]\n   (fn [& args]\n     (func (apply (apply my-comp funcs) args)))))", "user": "59a96a85e4b0bcf4e9a43b13"}, {"problem": 58, "code": "(fn [& fs] (reduce #(fn [& args] (% (apply %2 args))) fs))", "user": "59ab8beee4b08cbb53654d9e"}, {"problem": 58, "code": "(fn my-con [& fs]\n     (fn [& args]\n       (first (reduce\n                (fn [acc next-f]\n                  (list (apply next-f acc)))\n                args\n                (reverse fs)))))", "user": "594ea2a4e4b07ddc2dafaeb6"}, {"problem": 58, "code": "(fn\n  ( [f g]\n    (fn [x] \n      (f (g x))))\n   ( [f g h]\n    (fn [& k] \n      (f (g (apply h  k)))))\n  )", "user": "57bffed6e4b05aa3c4741c89"}, {"problem": 58, "code": "(fn c [& fns]\n\t(fn [& args]\n\t    (first\n    \t(loop [value args fns fns]\n        \t(if (empty? fns)\n            \tvalue\n              (recur [(apply (last fns) value)] (butlast fns))\n            )\n      )\n\t    )\n    )\n)", "user": "5991d2fae4b0866487ed0d68"}, {"problem": 58, "code": "(fn [& functions]\n    (fn [& rest]\n      (loop [f functions\n             a rest]\n        (let [fst (first a)\n              args (if (vector? fst) fst a)]\n          (if (nil? f)\n            (first args)\n            (recur (butlast f) (list (if (vector? fst)\n                                       ((last f) args)\n                                       (apply (last f) args)))))))))", "user": "59932f49e4b0b211ea3aaaae"}, {"problem": 58, "code": "(fn [& functions]\n  (fn [& args]\n    (let [fs (reverse functions)\n          ret (apply (first fs) args)\n          rest-f (rest fs)]\n      (if (empty? rest-f)\n        ret\n        (reduce (fn [arg f] (apply f [arg]))\n                ret\n                rest-f)))))", "user": "58fed70de4b0438e51c2cfdd"}, {"problem": 58, "code": "(fn c [f & fs]\n  (if fs\n    #(f (apply (apply c fs) %&))\n    f))", "user": "59a72effe4b066c664927d94"}, {"problem": 58, "code": "(fn myc                                                                           \n  ([f] f)                                                                           \n  ([f1 f2] (fn [& args] (f1 (apply f2 args))))                                      \n  ([f1 f2 & more]                                                                   \n   (let [[r1 r2 & rmore] (reverse (concat [f1 f2] more))]                        \n     (apply myc (reverse (cons (myc r2 r1) rmore))))))", "user": "58ebd10de4b056aecfd47d49"}, {"problem": 58, "code": "(fn [& fns]\n    (reduce \n     (fn comp*\n       ([f] f)\n       ([f g]\n        (fn [ & args ]\n          (f (apply g args)))))\n     fns))", "user": "59b1c2eae4b0e1f4e384c8ec"}, {"problem": 58, "code": "(fn [& fs] \n  (fn [& args] \n    (loop [\n           fs (reverse fs)\n           res args]\n      (if (empty? fs) \n        (first res)\n        (recur \n         (rest fs)\n         (vector \n          (apply (first fs) res))\n         ))\n      ))\n)", "user": "598debf0e4b02b9968b84d2e"}, {"problem": 58, "code": "(fn[& fns]\n  (fn[& args]\n    (first\n     (reduce \n       #(vector (apply %2 %1))\n       args \n       (reverse fns)))))", "user": "590b8607e4b047aa04b199db"}, {"problem": 58, "code": "(fn [& fs]\n  (reduce (fn [f g] #(f (apply g %&))) fs))", "user": "57481f1fe4b009280f9f2b82"}, {"problem": 58, "code": "(fn [& a]\n  (fn [& b]\n    (first \n     (reduce \n      #(vector (apply %2 %1))\n      b \n      (reverse a)))))", "user": "59733c91e4b01722bebd4c9b"}, {"problem": 58, "code": "(fn [& rest] (reduce (fn [a b] (fn [& args] (a (apply b args)))) rest))", "user": "587ad5aae4b01531a375eaf0"}, {"problem": 58, "code": "(fn do-comp\n  [& fs]\n  (fn\n    [& args]\n    (prn args)\n    (first (reduce (fn [acc f]\n                     (prn acc)\n                     (vector (apply f acc))) args (reverse fs)))))", "user": "59b62f8de4b05c620303ca1f"}, {"problem": 58, "code": "(fn rec\n        ([] identity)\n        ([f] f)\n        ([f g] \n         (fn \n           ([] (f (g)))\n           ([x] (f (g x)))\n           ([x y] (f (g x y)))\n           ([x y z] (f (g x y z)))\n           ([x y z & args] (f (apply g x y z args)))))\n        ([f g & fs]\n         (reduce rec (list* f g fs))))", "user": "57e6f90de4b0bfb2137f5af6"}, {"problem": 58, "code": "(fn [& fns]\n  (fn [& args]\n    (first (reduce (fn [acc n] (vector (apply n acc)) ) args (reverse fns)))))", "user": "567b2f20e4b05957ce8c61a2"}, {"problem": 58, "code": "(fn my-comp\n  ([] identity)\n  ([f] f)\n  ([f g] \n     (fn \n       ([] (f (g)))\n       ([x] (f (g x)))\n       ([x y] (f (g x y)))\n       ([x y z] (f (g x y z)))\n       ([x y z & args] (f (apply g x y z args)))))\n  ([f g & fs]\n     (reduce my-comp (list* f g fs))))", "user": "59a0262ee4b0871e7608b82d"}, {"problem": 58, "code": "(fn [& fs] (reduce (fn [f g] #(f (apply g %&))) fs))", "user": "59b8334ce4b05c620303ca4f"}, {"problem": 58, "code": "(fn mcomp [& fns]\n  (if (seq? fns)\n    (fn\n      ([x]\n       (let [ffn (first fns)\n             lfn (last fns)\n             rfn (apply mcomp (rest fns))]\n         (ffn (rfn x))))\n      ([x & xs]\n       (let [lfn (last fns)\n             blfn (apply mcomp (butlast fns))]\n         ((mcomp blfn) (apply lfn (cons x xs))))))\n    identity))", "user": "5866b999e4b0f14aab7c886b"}, {"problem": 58, "code": "(fn [& fs] (reduce (fn [f g] #(f (apply g %&))) fs))", "user": "597768d0e4b01722bebd4cee"}, {"problem": 58, "code": "(fn my-comp [f & r]\n  (fn [& x]\n    (letfn [(comp-maker [r]\n              (cond\n               (empty? r) x\n               (empty? (rest r)) (apply (first r) x)\n               :else ((first r) (comp-maker (rest r)))))]\n      (f (comp-maker r)))))", "user": "59a1fd6be4b066c664927d1b"}, {"problem": 58, "code": "(fn [& fns] (reduce (fn [a b] #(a (apply b %&))) fns))", "user": "576c2ecae4b07c67f59d1fbb"}, {"problem": 58, "code": "(fn comb [& funcs]\n  (fn [& args]\n    (first\n      (reduce #(vector (apply %2 %1)) args (reverse funcs )))))", "user": "59bac5c9e4b0a024fb6ae3ed"}, {"problem": 58, "code": "(fn my-comp [& funcs]\n\n  (fn inner [& args]\n    (let [[first-func & other-funcs] (reverse funcs)\n          first-result (apply first-func args)]\n      (reduce (fn [acc f] (f acc))\n              first-result\n              other-funcs)\n      )\n    )\n\n  )", "user": "59cc4d5ee4b0a024fb6ae5d0"}, {"problem": 58, "code": "(fn \n  ([f1 f2] (fn [& more] (f1 (apply f2 more))))\n  ([f1 f2 f3] (fn [& more] (f1 (f2 (apply f3 more))))))", "user": "59089229e4b047aa04b1997c"}, {"problem": 58, "code": "(fn my-comp [& fns]\n  (fn [& args]\n    (if (= (count fns) 1)\n      (apply (first fns) args)\n      ((apply my-comp (butlast fns))\n       (apply (last fns) args)))))", "user": "592fa9f8e4b072a2710fcfcb"}, {"problem": 58, "code": "(fn [& fs] (fn [& args] (reduce (fn [v f] (f v)) (apply (last fs) args) \n(reverse (butlast fs)))))", "user": "59358f74e4b04f87174def52"}, {"problem": 58, "code": "(fn [& f] (fn [& a] (first (reduce #(list (apply %2 %1)) a (reverse f)))))", "user": "59da6480e4b0ef0a1e9b5c68"}, {"problem": 58, "code": "(fn [& funcs] (reduce (fn [f1 f2] #(f1 (apply f2 %&))) funcs))", "user": "59c734e3e4b0a024fb6ae53f"}, {"problem": 58, "code": "(fn [& fs] \n    (let [reverse-fs (reverse fs)\n    [first-f & rest-f] reverse-fs]\n    (fn [& ll] (reduce #(%2 %1) (apply first-f ll) rest-f))))", "user": "59cf4013e4b0ef0a1e9b5b68"}, {"problem": 58, "code": "#(fn [& args]\n     (let [other (reverse %&)]\n       (reduce (fn [a b] (b a)) (apply (first other) args) (rest other))))", "user": "59ddae03e4b01968742fed65"}, {"problem": 58, "code": "(fn compp\n\t([] identity)\n\t([f] f)\n\t([f g]\n\t\t(fn [& args]\n\t\t\t(f (apply g args))))\n\t([f g & gs]\n\t\t(reduce compp (list* f g gs))))", "user": "59ac559ee4b00adcf69795d2"}, {"problem": 58, "code": "(fn -comp [& funcs]\n  (let [[f & restf] (reverse funcs)]\n    (fn [& args] (reduce (fn [acc ff] (ff acc)) (apply f args) restf))))", "user": "59c94a69e4b0a024fb6ae576"}, {"problem": 58, "code": "(fn\n [& fns]\n (fn\n  [& args]\n  (reduce\n   (fn\n    [x f]\n    (f x))\n   (apply (last fns) args)\n   (rest (reverse \n    fns)))))", "user": "56403765e4b08d4f616f5edc"}, {"problem": 58, "code": "(fn [& fs] (fn [& arg] (reduce #(%2 %1) (apply (last fs) arg) (rest (reverse fs)))))", "user": "59e8c89de4b0249b72820737"}, {"problem": 58, "code": "(fn [& fs]\n    (fn [& args]\n      (let [sf (reverse fs)]\n        (if (nth sf 2 nil)\n          ((nth sf 2) ((second sf) (apply (first sf) args)))\n          ((second sf) (apply (first sf) args))))))", "user": "5777cffae4b0979f89651651"}, {"problem": 58, "code": "(fn [& fns]\n                       (fn [& args]\n                         (let [lfns (reverse fns)]\n                           (reduce\n                            (fn [composed_fs f]\n                              (f composed_fs))\n                            (apply (first lfns) args)\n                            (rest lfns)))))", "user": "5957cc41e4b066ee0a44af76"}, {"problem": 58, "code": "(fn [& fns]\n  (reduce (fn [fs f]\n            (fn [& args]\n              (fs (apply f args))))\n          fns))", "user": "59eb63e3e4b0249b7282077c"}, {"problem": 58, "code": "(fn [& fs] (reduce (fn [xs x] (fn [& args] (x (apply xs args)))) (reverse fs)))", "user": "580e7761e4b0849f6811b753"}, {"problem": 58, "code": "(fn [& fs]\n      (fn [x & xs]\n        (reduce #(%2 %1) (apply (last fs) (cons x xs)) (reverse (butlast fs)))))", "user": "59e0f38ae4b08badc2a0c500"}, {"problem": 58, "code": "(fn f\n  [& fs]\n  (fn [& x]\n    (reduce #(%2 %1) (apply (last fs) x)\n            (rest (reverse fs)))))", "user": "54a11042e4b09f271ff37c49"}, {"problem": 58, "code": "(fn [& fns]\n         (fn [& x]\n           (loop [r x\n                  [f & more] (reverse fns)]\n             (if (seq more)\n               (recur [(apply f r)] more)\n               (apply f r)))))", "user": "5782018de4b0d36ec5835e8e"}, {"problem": 58, "code": "(fn [& fns]\n    (let [fns' (reverse fns)]\n         (fn [& args]\n           (reduce (fn [acc f] (f acc))\n                   (apply (first fns') args)\n                   (rest fns')))))", "user": "59bdf0eae4b0a024fb6ae42e"}, {"problem": 58, "code": "(fn comp* [& fs]\n  (fn [& args]\n    (let [fsr (reverse fs)]\n      (let [f (first fsr)\n            xs (rest fsr)\n            f* (fn [agg f**]\n                 (f** agg))]\n        (reduce f* (apply f args) xs)))))", "user": "563ac0cfe4b0bfe05bf11805"}, {"problem": 58, "code": "(fn [& funcs]\n  (fn [& args] \n    (first\n      (reduce \n       #(vector (apply %2 %1))\n       args \n       (reverse funcs)\n      )\n     )\n  )\n)", "user": "59d75e36e4b0ef0a1e9b5c32"}, {"problem": 58, "code": "(fn [& funcs]\n  (fn [& args] (first (reduce #(list (apply %2 %)) args (reverse funcs)))))", "user": "59ee4883e4b0966464fe6a17"}, {"problem": 58, "code": "(fn _\n  ([f] f)\n  ([f1 f2]\n   (fn [& args]\n     (f1 (apply f2 args))))\n  ([f1 f2 & fs]\n   (fn [& args]\n     (f1 (f2 (apply (reduce _ fs) args))))))", "user": "5794fd7be4b0e215f87e8476"}, {"problem": 58, "code": "(fn [& functions] (fn [& args] (loop [res args remaining (reverse functions)]\n                                   (if (empty? remaining) (first res)\n                                   (recur (list (apply (first remaining) res)) (rest remaining))))))", "user": "59ba2ea0e4b0a024fb6ae3e1"}, {"problem": 58, "code": "(fn [& f] (reduce (fn [x y] #(x (apply y %&))) f))", "user": "572de985e4b0cd1946bd0f7c"}, {"problem": 58, "code": "(fn custom-comp [& fs]\n    (reduce\n      (fn [f g]\n        (fn [& args]\n          (f (apply g args))))\n      fs))", "user": "59f78b49e4b0ca45a743a30e"}, {"problem": 58, "code": "(fn [& fns]\n    (let [[inner & more-fns] (reverse fns)]\n      (fn [& args]\n        (reduce\n         #(%2 %1)\n         ((fnil apply identity) inner args)\n         more-fns))))", "user": "539fa040e4b0ca733b97449f"}, {"problem": 58, "code": "(fn [& fns]\n  (let [apply' (fn [fns args]\n                 (if (empty? fns)\n                   (first args)\n                   (recur\n                     (rest fns)\n                     [(apply (first fns) args)])))]\n    (fn [& args]\n      (apply' (reverse fns) args))))", "user": "518279abe4b0353c468deb65"}, {"problem": 58, "code": "(fn [ & fns ]\n   (reduce (fn [ acc next ] (fn [& x] (acc (apply next x))) ) fns))", "user": "59f90e6ae4b0ca45a743a337"}, {"problem": 58, "code": "(fn mycomp [f & fs]\n  (if-not (seq fs)\n    (fn [& args] (apply f args))\n    (fn [& args] (f (apply (apply mycomp fs) args)))))", "user": "52fe31d5e4b047fd55837038"}, {"problem": 58, "code": "(fn [& fs]\n  (let [fs-ordered (reverse fs)]\n    (fn [& args] (reduce #(%2 %1)\n                         (apply (first fs-ordered) args)\n                         (rest fs-ordered)))))\n\n;; User \"anjensan\" posted a solution which in my opinion is more elegant than my own.\n;; I'll put it here formatted and with parameter names adjusted for understandability:\n#_(fn [& functions]\n    (reduce #(fn [& args] (%1 (apply %2 args)))\n            functions))", "user": "59a080e3e4b0871e7608b837"}, {"problem": 58, "code": "(fn comp* [& fs]\n    (let [f (first fs)\n          r (rest fs)]\n      (fn [& args]\n        (if (seq r)\n          (f (apply (apply comp* r) args))\n          (apply f args)))))", "user": "59fa241ee4b0ca45a743a358"}, {"problem": 58, "code": "; shamelessly copied from elsewhere :(\n(fn [& funcs]\n  (fn [& args]\n    (reduce #(%2 %1) (apply (last funcs) args) (rest (reverse funcs)))))", "user": "56f2611fe4b04a395b9a04a2"}, {"problem": 58, "code": "(fn [& xs] (reduce (fn [acc itm] #(acc (apply itm %&))) xs))", "user": "5a01d8f6e4b01bb0ae8afd53"}, {"problem": 58, "code": "(fn[& funcs]\n    (fn[& input]\n    (let [firstFuncToApply (last funcs)\n          isSingleInput (= (count input) 1)\n          isSingleFunc (= (count funcs) 1)\n          finalOutput (if isSingleInput (firstFuncToApply (flatten input)) (apply firstFuncToApply input))]\n    (if isSingleFunc finalOutput\n        (reduce #(%2 %1) finalOutput (rest (reverse funcs)))))))", "user": "571172ece4b09c608db70446"}, {"problem": 58, "code": "(fn compose [f & gs]\n  (if gs\n    (fn [& args]\n      (f (apply (apply compose gs) args)))\n    f))", "user": "594bc16be4b07ddc2dafae39"}, {"problem": 58, "code": "(fn ([a b] (fn [y](a (b y)))) ([a b c] (fn[& x](a (b (apply c x))))) )", "user": "59e8bb43e4b0249b72820735"}, {"problem": 58, "code": "(fn my-comp [& fns]\n   (fn [& args]\n     (let [fns (reverse fns)]\n       (reduce (fn [acc curr] (curr acc)) (apply (first fns) args) (rest fns)))))", "user": "5a082ce4e4b01bb0ae8afdec"}, {"problem": 58, "code": "(fn [& functions]\n  (fn [& args]\n    (reduce (fn [a f] (f a)) (apply (last functions) args) (rest (reverse functions)))))", "user": "5a0b9fc0e4b04bbd27e6d992"}, {"problem": 58, "code": "(fn [& funcs]\n    (fn [& args]\n      ;(println args)\n      (first (reduce #(vector (apply %2 %)) args (reverse funcs)))))", "user": "5a00cb31e4b01bb0ae8afd36"}, {"problem": 58, "code": "(fn [& fs] (reduce (fn [f g] (fn [& x] (f (apply g x)))) fs))", "user": "57ea2c91e4b0bfb2137f5b42"}, {"problem": 58, "code": "(fn [& args] (reduce #(fn [& args2] (%1 (apply %2 args2))) args))", "user": "5a080bdde4b01bb0ae8afde9"}, {"problem": 58, "code": "(fn [& fs]\n  (reduce (fn [f g] #(f (apply g %&))) fs))", "user": "5a0a25fce4b0eab8c044893d"}, {"problem": 58, "code": "(fn c\n  ([] identity)\n  ([f] f)\n  ([f g] (fn [& args] (f (apply g args))))\n  ([f g & fs] (reduce c (list* f g fs)))\n)", "user": "5a12dea3e4b04bbd27e6da44"}, {"problem": 58, "code": "(fn [f & xs]\n  (reduce (fn [a b]\n            #(a (apply b %&)))\n          f\n          xs))", "user": "53ea5851e4b036ad0777e4e4"}, {"problem": 58, "code": "(fn [& f]\n  (fn [& args]\n    (let [funcs (reverse f)]\n        (reduce (fn [s func]\n                  (func s))\n            (apply (first funcs) args)\n            (rest funcs)))))", "user": "57c314f3e4b05aa3c4741cba"}, {"problem": 58, "code": "(fn [& fn-args] \r\n  (fn [& args] \r\n    (reduce \r\n      (fn [acc nxt] (nxt acc)) \r\n      (apply (last fn-args) args) \r\n      (rest (reverse fn-args)))))", "user": "59fa5773e4b0ca45a743a35e"}, {"problem": 58, "code": "(fn my-comp\n  ([] identity)\n  ([f] f)\n  ([f g] \n     (fn \n       ([] (f (g)))\n       ([x] (f (g x)))\n       ([x y] (f (g x y)))\n       ([x y z] (f (g x y z)))\n       ([x y z & args] (f (apply g x y z args)))))\n  ([f g & fs]\n     (reduce my-comp (list* f g fs))))", "user": "58637f03e4b0f14aab7c881e"}, {"problem": 58, "code": "(fn comb [& funcs]\n  (fn [& args]\n    (first\n(reduce #(vector (apply %2 %1)) args (reverse funcs )))))", "user": "59fd069ae4b01bb0ae8afcf4"}, {"problem": 58, "code": "(fn comp2\n  ([f1 f2]\n   #(f1 (apply f2 %&)))\n  ([f1 f2 & fs]\n   (reduce comp2 (list* f1 f2 fs)))\n  )", "user": "58d96bdce4b0a4d5acaab638"}, {"problem": 58, "code": "(fn my-comp\n  [& fs]\n  (fn [& args]  \n    (let [fs (reverse fs)]\n      (reduce #(%2 %1) (apply (first fs) args) (rest fs))))\n  )", "user": "59f44189e4b0966464fe6aab"}, {"problem": 58, "code": "(fn [& f]\n  (fn [& v]\n    (reduce #(%2 %) (apply (last f) v) (-> f butlast reverse))))", "user": "4dc78527535d8a4b2fd7428f"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& args]\n    (reduce (fn [args f]\n              (f args)) (apply (last fs) args) (reverse (butlast fs)))))", "user": "5a250b86e4b07f18be40aa19"}, {"problem": 58, "code": "(fn fr [& fargs] \n   (fn [& args] \n      (reduce #(%2 %1) (apply (last fargs) args) (rest (reverse fargs)))\n     ))", "user": "59ff9424e4b01bb0ae8afd24"}, {"problem": 58, "code": "(fn __ [& fs]\n  (let [[fh & fr] (reverse fs)]\n    (fn [& x]\n      (reduce #(%2 %) (apply fh x) fr))))", "user": "58f44c07e4b0438e51c2ceb7"}, {"problem": 58, "code": "(fn [& fns]\n  (fn [& args] \n      ((fn r [fs] \n        (if (= (count fs) 1)\n          (apply (last fs) args)\n          ((first fs) (r (rest fs))))) fns)))", "user": "5a14228fe4b0ff51aa4b3193"}, {"problem": 58, "code": "(fn [x & rest]\n  (let [funcs  (drop 1 (reverse (cons x rest))) first-func (last rest)]\n    (fn [arg & optional] (reduce (fn [a f] (f a)) (apply first-func arg optional) funcs)\n    )))", "user": "5a1bec89e4b0ff51aa4b322f"}, {"problem": 58, "code": "(fn [ & fns]\n  (fn [ & args ]\n    (loop [l (pop (vec fns)) v (apply (last fns) args)]\n      (if (empty? l)\n        v\n        (recur\n          (pop l)\n          ((peek l) v))))))", "user": "5a2df4a0e4b09cafd31c7f74"}, {"problem": 58, "code": "(fn\n  ([f g h]\n   (fn [& args]\n     (f (g (apply h args)))))\n  ([f g]\n   (fn [args]\n     (f (g args)))))", "user": "5a16da30e4b0ff51aa4b31cc"}, {"problem": 58, "code": "(fn tcomp [& fs]\n   (fn [& args] (reduce #(%2 %1) (apply (last fs) args) (reverse (butlast fs)))))", "user": "59f043d0e4b0966464fe6a3d"}, {"problem": 58, "code": "(fn [& fs]\n    (loop [rfs (rest (reverse fs))\n           cf (last fs)]\n          (if (empty? rfs)\n              cf\n              (recur (rest rfs) (fn [& y] (apply (first rfs) (list (apply cf y))))))))", "user": "5a34f342e4b0ddc586f153d1"}, {"problem": 58, "code": "(fn composefns\n  [& funcs]\n  #(loop\n     [funcsleft (butlast funcs)\n      value (apply (last funcs) %&)]\n     (if (empty? funcsleft)\n       value\n       (recur (butlast funcsleft)\n              ((last funcsleft) value)))))", "user": "5a3ece62e4b0447ef91cc5b9"}, {"problem": 58, "code": "(fn [ & fs ]\n(fn [& x ]\n  (let [fns (reverse fs)\n        y (apply (first fns) x)]\n    (loop [ fes (rest fns) my-eval y ]\n( if ( empty?  fes)\nmy-eval\n(recur ( rest fes) (( first fes) my-eval))))) ))", "user": "5a1c8c26e4b0ff51aa4b3247"}, {"problem": 58, "code": "(fn [& fs] (reduce (fn [f g] #(f (apply g %&))) fs))", "user": "5a3c5c54e4b001c08efc0ce3"}, {"problem": 58, "code": "(fn my-comp\n  ([] identity)\n  ([f] f)\n  ([f g] \n     (fn \n       ([] (f (g)))\n       ([x] (f (g x)))\n       ([x y] (f (g x y)))\n       ([x y z] (f (g x y z)))\n       ([x y z & args] (f (apply g x y z args)))))\n  ([f g & fs]\n     (reduce my-comp (list* f g fs))))", "user": "5773f3a9e4b0979f896515f2"}, {"problem": 58, "code": "(fn myc[& margs]\n  (reduce\n    (fn[ff gg] (fn[& args] ( gg (apply ff args))))\n    (reverse (vec margs))))", "user": "52f426fce4b05e3f0be25f1e"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& args]\n    (first\n     (reduce #(vector (apply %2 %1)) args\n     (reverse fs)))\n    ))", "user": "5a4443cae4b0447ef91cc60f"}, {"problem": 58, "code": "(fn [& funcs]\n  (fn [& args]\n    (loop [current (last funcs) funcs (butlast funcs) args args]\n      (if (= funcs nil)\n        (apply current args)\n        (recur (last funcs) (butlast funcs) (vector (apply current args)))))))", "user": "58a6806ee4b01a0c0b23292f"}, {"problem": 58, "code": "(fn [& fs] (reduce (fn [a f] (fn [& x] (a (apply f x)))) identity fs))", "user": "5a4de614e4b05d388ecb6bb1"}, {"problem": 58, "code": "(fn [& fns] \n    (fn [& args] \n        (reduce \n                #(%2 %1) \n                (apply (first (reverse fns)) args)\n                (rest (reverse fns)))))", "user": "5a0ef454e4b04bbd27e6d9fa"}, {"problem": 58, "code": "(fn [& funcs]\n  (fn [& args]\n    (reduce\n      #(%2 %1)\n      (apply (last funcs) args)\n      (-> funcs reverse rest))))", "user": "5a4993c0e4b05d388ecb6b71"}, {"problem": 58, "code": "(fn compose [& fs]\n    (reduce (fn [f g] #(f (apply g %&))) fs))", "user": "5182de5ce4b0353c468deb74"}, {"problem": 58, "code": "(fn cmp [& fns] (reduce (fn [f1 f2] (fn ([x] (f1 (f2 x))) ([x y] (f1 (f2 x y)) ) ([x y & more] (f1 (apply f2 x y more))) )) identity fns))", "user": "5a535572e4b05d388ecb6c0b"}, {"problem": 58, "code": "(fn [& a]\n  (reduce (fn [b c]\n            (fn [& d]\n              (b (apply c d))))\n          identity\n          a))", "user": "52281e1ee4b0186687e23a69"}, {"problem": 58, "code": "(fn apall\n      ([x]  #( x %) )\n      (\n        [x y] (fn[k] (x (y k)) )\n      )   \n      (\n        [x y z] (fn [& args] ( x ( y (apply z args) ) )      ) \n      )\n      \n    )", "user": "55d7312ee4b0e31453f64a9f"}, {"problem": 58, "code": "(fn comp- [& funs]\n  (fn [& args]\n    (first (reduce #(vector (apply %2 %1)) args (reverse funs)))))", "user": "565654dae4b0f9d632dd849f"}, {"problem": 58, "code": "(fn comb [& funcs]\n  (fn [& args]\n    (first\n(reduce #(vector (apply %2 %1)) args (reverse funcs )))))", "user": "59dfb8dbe4b08badc2a0c4da"}, {"problem": 58, "code": "(fn [& fns]\n  (fn [& args]\n    (loop [[f & fs] (reverse fns)\n           as args]\n      (if (nil? fs)\n        (apply f as)\n        (recur fs [(apply f as)])))))", "user": "5a566e8fe4b05d388ecb6c51"}, {"problem": 58, "code": "#_(fn [& fs]\n  (fn [& args]\n    (first\n     (reduce\n      (fn [a f]\n        (vector (apply f a)))\n      args\n      (reverse fs)))))\n\n(fn mycomp\n  ([f1 f2]\n   (fn [& args]\n     (f1 (apply f2 args))))\n  ([f1 f2 & fs]\n   (apply mycomp (mycomp f1 f2) fs)))", "user": "5564c113e4b0c656e3ff180d"}, {"problem": 58, "code": "(fn [& args]\n  (reduce (fn [f g]\n            (fn [& x]   \n              (f (apply g x))))\n            args))", "user": "53716539e4b0fc7073fd6eb1"}, {"problem": 58, "code": "(fn fc [& fns]\n  (fn [& args]\n    (if (= (count fns) 1)\n      (apply (first fns) args)\n      ((apply fc (butlast fns))\n       (apply (last fns) args)))))", "user": "53f053ebe4b0742d9025b0d3"}, {"problem": 58, "code": "(fn [& fs]\n  (let [[f & fs] (reverse fs)]\n  #(reduce (fn [v f] (f v)) (apply f %&) \n           fs)))", "user": "51dafedee4b09f6bc204eee2"}, {"problem": 58, "code": "(fn [& fns]\n  (fn [& args]\n    (loop [bal_fns (rest (reverse fns))\n           result (apply (last fns) args)]\n      (if (empty? bal_fns)\n        result\n        (recur (rest bal_fns) ((first bal_fns) result))))))", "user": "5a4d656fe4b05d388ecb6ba9"}, {"problem": 58, "code": "(fn compy  [& args]\n  (let [nargs (reverse args)]\n   (fn [& x]  (reduce #(%2 %1)\n                      (apply (first nargs) x) (rest nargs)))))", "user": "5a527beee4b05d388ecb6bfe"}, {"problem": 58, "code": "(fn\n  ([a b] #(a (b %)))\n  ([a b c] (fn [& x] (a (b (apply c x)))))\n  )", "user": "5a3c2a08e4b001c08efc0cdf"}, {"problem": 58, "code": "(fn my-comp4 [& funcs]\n  (cond (empty? funcs) identity\n        (= (count funcs) 1) (first funcs)\n        :else (fn [& args] ((apply my-comp4 (butlast funcs)) (apply (last funcs) args)))\n        )\n  )", "user": "5a621702e4b0512ff01cd983"}, {"problem": 58, "code": "(fn [& functions]\n  (fn [& args]\n    (let [f (last functions)\n          f-rest (rest (reverse functions))\n          r (apply f args)]\n      (loop [fs f-rest, r r]\n        (if (empty? fs)\n          r\n          (recur (rest fs) ((first fs) r)))))))", "user": "5a536cf2e4b05d388ecb6c10"}, {"problem": 58, "code": "(fn hof [ & fns]\n  (fn [& params]\n    (loop [funcs (reverse fns) x params]\n      (if\n       (empty? funcs) (first x)\n       (recur (rest funcs) (list (apply (first funcs) x)))\n      )\n    )\n  )\n)", "user": "5a424954e4b0447ef91cc5f0"}, {"problem": 58, "code": "(fn [& fs] (reduce (fn [f g] #(f (apply g %&))) fs))", "user": "5a34de78e4b0ddc586f153d0"}, {"problem": 58, "code": "(fn cmp [& fns]\n    (if-let [fns (reverse fns)]\n      (fn [& args]\n        (reduce\n         (fn [result f]\n           (f result))\n         (apply (first fns) args)\n         (next fns)))\n      identity))", "user": "5a5d0726e4b0512ff01cd91b"}, {"problem": 58, "code": "(fn q \n   ([f g] (q identity f g))\n   ([f g h]\n    (fn r\n      ([a] (f (g (h a))))\n      ([a b] (f (g (h a b))))\n      ([a b c d] (f (g (h a b c d)))))))", "user": "5a4caa20e4b05d388ecb6b94"}, {"problem": 58, "code": "(fn ([] identity)\n        ([x] x)\n        ([x y] (fn [& a] (x (apply y a))))\n        ([x y z] (fn [& a] (x (y (apply z a)))))\n  \t\t([x y z n] (fn [& a] (x (y (z (apply n a)))))))", "user": "58a822e4e4b01a0c0b232950"}, {"problem": 58, "code": "(fn comp'\n  [& fs]\n  (fn [& xs]\n    (let [fg (fn fg [[f & fe] x]\n               (if f\n                 (fg fe [(apply f x)])\n                 (first x)))]\n      (fg (reverse fs) xs))))", "user": "5a067f26e4b01bb0ae8afdcc"}, {"problem": 58, "code": "(fn comb [& funcs]\n  (fn [& args]\n    (first\n      (reduce #(vector (apply %2 %1)) args (reverse funcs )))))", "user": "5a58d8a0e4b05d388ecb6c8a"}, {"problem": 58, "code": "(fn \n  ([f g]\n   (fn\n  \t ([] (f (g)))\n     ([x] (f (g x)))\n     ([x  & args] (f (apply g x  args)))))\n  ([f g h]\n   (fn\n   \n     \n     ([] (f (g (h))))\n      \n     ([x] (f (g (h x)))) \n     ([x  & args] (f (g (apply h x args)))))))", "user": "5a71c89ee4b0512ff01cda93"}, {"problem": 58, "code": "(fn comb [& funcs]\n  (fn [& args]\n    (first\n      (reduce #(vector (apply %2 %1)) args (reverse funcs )))))", "user": "58637221e4b0f14aab7c881d"}, {"problem": 58, "code": "(fn my-comp [& fs]\n  (fn [& x]\n    (first (reduce #(vector (apply %2 %1)) x (reverse fs)))))", "user": "5a6b9b95e4b0512ff01cda40"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& args]\n    (first (reduce #(list (apply %2 %)) args (reverse fs)))))", "user": "5a6af090e4b0512ff01cda2d"}, {"problem": 58, "code": "(fn mycomp [& args]\n  (fn [& x]\n    (reduce (fn [res f]\n              (f res))\n      (apply (last args) x)\n      (reverse (drop-last args)))))", "user": "5a1c3c11e4b0ff51aa4b323d"}, {"problem": 58, "code": "(fn\n  [& fs]\n  (reduce (fn [fa fb]\n            (fn [& args] (fa (apply fb args))))\n          fs))", "user": "5a188be3e4b0ff51aa4b31ec"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& args]\n    (first\n      (reduce #(list (apply %2 %1)) args (reverse fs)))))", "user": "5a69be17e4b0512ff01cda14"}, {"problem": 58, "code": "(fn c[& fs]\n  (let [[r1 & rs] (reverse fs)]\n    (fn [& args]\n      (reduce #(%2 %1) (apply r1 args) rs))))", "user": "4fd4bddce4b0d4de60cee36e"}, {"problem": 58, "code": "(fn comp* [& fs]\n  (fn [& args]\n    (let [fsr (reverse fs)]\n      (let [f (first fsr)\n            xs (rest fsr)\n            f* (fn [agg f**]\n                 (f** agg))]\n        (reduce f* (apply f args) xs)))))", "user": "5a71a811e4b0512ff01cda92"}, {"problem": 58, "code": "(fn [& fs] (reduce (fn [fa f] (fn [& xs] (fa (apply f xs)))) fs))", "user": "552d9b31e4b076ab5578f7eb"}, {"problem": 58, "code": "(fn [& predicates]\n  (fn [& value]\n    ((fn applyPredicates [preds]\n       (apply (first preds) (if (= 1 (count preds)) value (list (applyPredicates (next preds))))))\n      predicates)))", "user": "5a59a76fe4b05d388ecb6c98"}, {"problem": 58, "code": "(fn [& args]\n  (loop [output (last args) rem (rest (reverse args))]\n    (if (empty? rem)\n      output\n      (recur (fn [& a] ((first rem) (apply output a))) (rest rem))\n      )\n  )\n)", "user": "5a244240e4b0ff51aa4b32e9"}, {"problem": 58, "code": "(fn my-comp [f & fs] \n  (if (nil? (seq fs))\n    f\n    (fn [& args] \n      (f (apply (apply my-comp fs) \n         args)))))", "user": "53161a56e4b08068f379ed3e"}, {"problem": 58, "code": "(fn my-comp [& args]\n  (if (= 1 (count args))\n    (fn [& a] (apply (first args) a))\n    (fn [& b] ((first args) (apply (apply my-comp (rest args)) b)))))", "user": "594a7ed1e4b07ddc2dafae02"}, {"problem": 58, "code": "(fn _comp \n               ([f] f)\n               ([f & fs]\n                (fn [& args]\n                  (f (apply (apply _comp fs) args)))))", "user": "5a813b90e4b00b71e582a065"}, {"problem": 58, "code": "(fn myComp [& funcs] \n\t(fn [& args] \n\t\t(first \n\t\t\t(reduce #(vector (apply %2 %1)) args (reverse funcs )))))", "user": "5a63f8bae4b0512ff01cd99f"}, {"problem": 58, "code": "(fn [& fs] (reduce (fn [f g] #(f (apply g %&))) fs))", "user": "4eb5750a535d7eef30807366"}, {"problem": 58, "code": "(fn [& fs] (reduce (fn [f g] (fn [& args] (f (apply g args)))) fs))", "user": "5a86ad84e4b05369db4d249c"}, {"problem": 58, "code": "(fn my-comp [first-fn & rest-fns]\n  (if (seq rest-fns)\n    (fn [& body]\n      (->> body\n           (apply (apply my-comp rest-fns))\n           (first-fn)))\n    first-fn))", "user": "5a95c639e4b0d174b936c75e"}, {"problem": 58, "code": "(fn [& fs]\n      (fn [& args]\n        (first (reduce #(list (apply %2 %1)) args (reverse fs)))))", "user": "4ed45563535d10e5ff6f52c9"}, {"problem": 58, "code": "(fn [& fs] (reduce (fn [f g] #(f (apply g%&))) fs))", "user": "5a97eaffe4b0d174b936c783"}, {"problem": 58, "code": "(fn comp-me\n    ([] identity)\n    ([f] f)\n    ([f g]\n     (fn\n       [& coll] (f (apply g coll))))\n    ([f g & args]\n     (reduce comp-me (concat (list f g) args))))", "user": "5a4b3abde4b05d388ecb6b81"}, {"problem": 58, "code": "(fn [& fs] \n\t  (fn [& args]\n\t    (first\n\t      (reduce \n\t        #(list (apply %2 %1))\n\t        args\n\t        (reverse fs)\n\t      ))\n\t  ))", "user": "5a9be505e4b0d174b936c7cf"}, {"problem": 58, "code": "(fn [& f]\n   (let [nf (reverse f)]\n     (fn [& args]\n           (reduce (fn [acc v] (v acc) )\n                   (apply (first nf) args)\n                   (rest nf)\n             )\n       )\n     )\n)", "user": "5a8d55a8e4b05369db4d2514"}, {"problem": 58, "code": "(fn my-comp [& fs]\n  (fn [& args]\n    ((fn this [[f & gs]]\n      (if (empty? gs)\n        (apply f args)\n        (f (this gs)))) fs)))", "user": "55b28b57e4b01b9910ae296c"}, {"problem": 58, "code": "(fn [& fns]\n  (loop [[f & rest-fns] fns\n         comp-fn f]\n    (if-not (seq rest-fns)\n      comp-fn\n      (recur rest-fns (fn [& args] (comp-fn (apply (first rest-fns) args)))))))", "user": "50310713e4b05b7df5a0b84c"}, {"problem": 58, "code": "(fn [& fns]\n  (fn [& args]\n    (letfn [(chain [[fn1 & rm-fns]]\n              (if (empty? rm-fns)\n                (apply fn1 args)\n                (fn1 (chain rm-fns))))]\n      (chain fns))))", "user": "5a9dbb32e4b0d174b936c7f3"}, {"problem": 58, "code": "(fn compose\n  ([f] f)\n  ([f & fs] #(f (apply (apply compose fs) %&))))", "user": "59769d75e4b01722bebd4cdd"}, {"problem": 58, "code": "(fn [& args]\n  (let [funs (reverse args)]\n    (fn [& params]\n      (reduce (fn [res fun] (fun res)) (apply (first funs) params) (rest funs)))))", "user": "5267c74be4b03e8d9a4a7183"}, {"problem": 58, "code": "(fn c\n  ([] identity)\n  ([f] f)\n  ([f g]\n   (fn\n     ([] (f (g)))\n     ([x] (f (g x)))\n     ([x y] (f (g x y)))\n     ([x y z] (f (g x y z)))\n     ([x y z & args] (f (apply g x y z args)))))\n  ([f g & fs]\n   (reduce c (list* f g fs))))", "user": "5a90395ce4b05369db4d254a"}, {"problem": 58, "code": "(fn [& fns]\n  (fn [& args]\n    (let [[f & fs] (reverse fns)]\n      (reduce (fn [acc g] (g acc))\n              (apply f args)\n              fs))))", "user": "59ac0965e4b08cbb53654da6"}, {"problem": 58, "code": "(fn comp* [& fs]\n  (fn [& args]\n    (let [fsr (reverse fs)]\n      (let [f (first fsr)\n            xs (rest fsr)\n            f* (fn [agg f**]\n                 (f** agg))]\n        (reduce f* (apply f args) xs)))))", "user": "5ab168d2e4b073f1774425c2"}, {"problem": 58, "code": "(fn __ [& funcs]\n  (fn [& args]\n    (first (reduce #(list (apply %2 %1)) args (reverse funcs)))\n    ))", "user": "5a0ce1a5e4b04bbd27e6d9b7"}, {"problem": 58, "code": "(fn my-compose [& functions]\n  (fn [& args]\n    (first (reduce (fn [intermediary f] [(apply f intermediary)]) args (reverse functions)))\n    )\n  )", "user": "5aada061e4b073f17744257a"}, {"problem": 58, "code": "(fn [& mfuncs]\n  (let [nfuncs (reverse mfuncs)\n        ffunc (first nfuncs)\n        rfuncs (rest nfuncs)]\n    (loop [ifuncs rfuncs\n           ofuncs ffunc]\n      (if (empty? ifuncs)\n        ofuncs\n        (recur (rest ifuncs) (fn [& x] ((first ifuncs) (apply ofuncs x))))))))", "user": "56197b47e4b053970a773af8"}, {"problem": 58, "code": "(fn mcomp [& fns] \n  ( reduce (\n            fn composeTwo [f g] \n              (fn executeTwo [& args] \n                 (f (apply g args)))\n            ) \n    identity\n    fns ))", "user": "5aad79d9e4b073f177442578"}, {"problem": 58, "code": "(fn mycomp [& funcs]\n  (fn [& params]\n    (loop [f (rest (reverse funcs))\n           p (apply (first (reverse funcs)) params)]\n      (if (empty? f)\n        p\n        (recur (rest f) ((first f) p))))))", "user": "5ab490f4e4b073f17744261d"}, {"problem": 58, "code": "(fn [& x]\n  (fn [& y]\n    (reduce #(%2 %1)\n            (apply (last x) y) (rest (reverse x)))))", "user": "57b19fa1e4b0fbc9809a2754"}, {"problem": 58, "code": "(fn [& funcs]\n  (fn [& input]\n    ((fn runcmp [in [cur & rst]]\n      (if (nil? rst)\n        (apply cur in)\n        (cur (runcmp in rst)))) input funcs)))", "user": "5ab5f60be4b073f177442643"}, {"problem": 58, "code": "(fn [& fns]\n  (fn [& args]\n    (reduce\n      (fn [res f] (f res))\n      (apply (last fns) args)\n      (rest (reverse fns)))))", "user": "5aa998c6e4b0d174b936c8e5"}, {"problem": 58, "code": "(fn comp-me\n    ([f g]\n     (fn [& f-args]\n       (f (apply g f-args))))\n    ([f g & args-f]\n     (reduce comp-me (concat (list f g) args-f))))", "user": "5ab23c99e4b073f1774425e2"}, {"problem": 58, "code": "(fn cf\n  ([] identity)\n  ([f] f)\n  ([f g] (fn [& args] (f (apply g args))))\n  ([f g h] (fn [& args] (f (g (apply h args)))))\n  )", "user": "5ab9fe71e4b073f17744269d"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& args]\n    (first (reduce (fn [res f] (list (apply f res))) args (reverse fs)))))", "user": "5abc5a09e4b073f1774426e9"}, {"problem": 58, "code": "(fn func-comp [& funcs]\n  (fn [& args]\n    (reduce \n     (fn [carry x] (x carry))\n     (apply (first (reverse funcs)) args)\n     (rest (reverse funcs)))))", "user": "5aaa2dc3e4b0d174b936c8f1"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& args]\n    (let [[f & fs] (reverse fs)]\n      (reduce (fn [arg ff] (ff arg))\n              (apply f args)\n              fs))))", "user": "5ab16992e4b073f1774425c4"}, {"problem": 58, "code": "(fn [& fs]\n   (fn [& args] \n     (reduce #(%2 %1) (apply (last fs) args) (reverse (drop-last fs)))))", "user": "5a67cedbe4b0512ff01cd9ee"}, {"problem": 58, "code": "(fn [& funs]\n  (fn [& args]\n    (loop [funs funs\n           args args]\n      (if (nil? funs)\n        (first args)\n        (recur (butlast funs)\n               [(apply (last funs) args)])))))", "user": "5a9181c5e4b002d099cae6f6"}, {"problem": 58, "code": "(fn [& funcs]\n  (fn [& args]\n    (->> (reverse funcs)\n        (reduce #(vector (apply %2 %1)) args)\n        first)))", "user": "59636cc2e4b066ee0a44b0c7"}, {"problem": 58, "code": "(fn com [& fs]\n  (let [[g & gs] (reverse fs)]\n    (fn [& x] (reduce (fn [a b] (b a)) (apply g x) gs))))", "user": "5ab564f8e4b073f177442639"}, {"problem": 58, "code": "(fn comp-fx [& funcs]\n  (fn [& args] (loop [result args funcs (reverse funcs)]\n              (if (empty? funcs) (first result)\n                  (recur (list (apply (first funcs) result)) (rest funcs))))))", "user": "58f5b58ae4b0438e51c2cedc"}, {"problem": 58, "code": "(fn [& fns] (reduce (fn [f1 f2] (fn [& args] (f1 (apply f2 args)))) fns))", "user": "5abe2fc2e4b073f17744271e"}, {"problem": 58, "code": "(fn comb [& funcs]\n  (fn [& args]\n    (first\n      (reduce #(vector (apply %2 %1)) args (reverse funcs )))))", "user": "5a6170fde4b0512ff01cd975"}, {"problem": 58, "code": "(fn [& fs]\n    (fn [& elems]\n      (let [[func & funcs] (reverse fs)]\n        (reduce (fn [v f] (f v))\n                (apply func elems)\n                funcs))))", "user": "5ac6ef9be4b0e27600da7779"}, {"problem": 58, "code": "(fn myComp [& funcs] (fn [& args] (first (reduce #(vector (apply %2 %1)) args (reverse funcs )))))", "user": "5a634ff0e4b0512ff01cd995"}, {"problem": 58, "code": "(fn my-comp\n  [& fs]\n\n    (reduce (fn \n    [f g] \n       #(f (apply  g %&)) )\n            fs\n    )\n )", "user": "5ac37d0fe4b0e27600da7718"}, {"problem": 58, "code": "(fn [& f]\n  (reduce (fn [g h] #(g (apply h %&))) f))", "user": "5ac4d1f6e4b0e27600da7735"}, {"problem": 58, "code": "(fn cmp\n  [& fns]\n  (fn [& args]\n    (->> fns\n         reverse\n         (reduce (fn [acc fun]\n                   (list (apply fun acc)))\n\n                 args)\n         first)))", "user": "5a8fd113e4b05369db4d2542"}, {"problem": 58, "code": "(fn [ & fs] \n  (reduce \n   \t(fn [f g] (fn [ & args ] (f ( apply g args) ) ) )\n   fs)  \n)", "user": "5ac85708e4b0e27600da77ac"}, {"problem": 58, "code": "(fn [& fns]\n  (let [rev-fns (reverse fns)]\n    (fn [& args]\n      (loop [res (apply (first rev-fns) args) fs (rest rev-fns)]\n        (if (empty? fs)\n          res\n          (recur ((first fs) res) (rest fs)))))))", "user": "5a512929e4b05d388ecb6be2"}, {"problem": 58, "code": "(fn [& f*] (fn [& args] (reduce \n                         (fn [acc f] (f acc)) \n                         (apply (last f*) args) \n                         (rest (reverse f*)))))", "user": "58bcecc9e4b0888cdc949d24"}, {"problem": 58, "code": "(fn my-comp [& fns]\n  (let [rfns (reverse fns)]\n    (fn [& params] (reduce #(%2 %1) (apply (first rfns) params) (rest rfns)))))", "user": "5acd235ae4b0e27600da7824"}, {"problem": 58, "code": "(fn [& l] (fn [& i] (first (reduce #(list (apply %2 %1)) i (reverse l)))))", "user": "5a9db5c9e4b0d174b936c7f1"}, {"problem": 58, "code": "(fn [& rev-fns]\n  (let [[f & fs] (reverse rev-fns)]\n    (fn [& args]\n      (reduce #(%2 %1) (apply f args) fs))))", "user": "5ad63a34e4b0ea6055cfac01"}, {"problem": 58, "code": "(fn [& fs] (reduce (fn [f g] #(f (apply g %&))) fs))", "user": "5acd1a43e4b0e27600da7823"}, {"problem": 58, "code": "(fn [& fs]\n  (reduce (fn [f g]\n            (fn [& args]\n              (f\n               (apply g args))))\n          fs))", "user": "5a257747e4b07f18be40aa1f"}, {"problem": 58, "code": "#(fn [& args]\n    (reduce (fn [res nf]\n              (nf res)) (apply (first (reverse %&)) args) (rest  (reverse %&))))", "user": "5831846ae4b051871117c02c"}, {"problem": 58, "code": "(fn __ [function & functions]\n  (fn [& args]\n    (if (empty? functions)\n      (apply function args)\n      (function (apply (apply __ functions) args)))))", "user": "5ac91d90e4b0e27600da77bd"}, {"problem": 58, "code": "(fn comp* [& fs]\n  (fn [& args]\n    (let [fsr (reverse fs)]\n      (let [f (first fsr)\n            xs (rest fsr)\n            f* (fn [agg f**]\n                 (f** agg))]\n(reduce f* (apply f args) xs)))))", "user": "5ae0976be4b0837691e92c43"}, {"problem": 58, "code": "(fn [& x]\n  (fn [& y] (reduce #(%2 %1) (apply (last x) y) (rest (reverse x)))))", "user": "574b4f3ee4b02ea114799207"}, {"problem": 58, "code": "(fn \n  ([f] identity)\n  ([f g] \n   (fn [& args]\n     (f ( apply g args))\n     ))\n  ([f g h]\n   (fn [& args]\n     (f ( g ( apply h args)))\n    )))", "user": "5ac92dc3e4b0e27600da77bf"}, {"problem": 58, "code": "(fn comb [& funcs]\n  (fn [& args]\n    (first\n(reduce #(vector (apply %2 %1)) args (reverse funcs )))))", "user": "5ac04101e4b073f177442737"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& args]\n    (first (reduce #(vector (apply %2 %1)) args (reverse fs)))))", "user": "5adf5f9be4b0837691e92c33"}, {"problem": 58, "code": "(fn [& funcs]\n    (fn [& args]\n      (loop [rfns (rest (reverse funcs))\n             outp (apply (last funcs) args)]\n        (if (empty? rfns)\n          outp\n          (recur (rest rfns) ((first rfns) outp))\n          ))))", "user": "5a9d64c8e4b0d174b936c7eb"}, {"problem": 58, "code": "(fn [& fs]\n  (let [[f & fss] (reverse fs)]\n    (fn [& args]\n      (reduce \n        #(%2 %1)\n        (apply f args)\n        fss\n      )\n    )\n  )\n)", "user": "5aac468ae4b073f17744256b"}, {"problem": 58, "code": "(fn [& args]\n               (fn [& a2]\n                 (let [fs (reverse args)\n                       r (apply (first fs) a2)]\n                   (loop [a r fs2 (rest fs)]\n                     (if-let [f (first fs2)]\n                       (recur (f a) (rest fs2)) a)))))", "user": "57086931e4b0b0fb43fd069e"}, {"problem": 58, "code": "(fn [& fns]\n  (fn [& args]\n    (loop [result (apply (last fns) args) remfns (butlast fns)]\n      (if (empty? remfns)\n        result\n        (recur ((last remfns) result) (butlast remfns))))))", "user": "5976da27e4b01722bebd4ce3"}, {"problem": 58, "code": "(fn [& fs] (fn [& args] (first (reduce #(list (apply %2 %1)) args (reverse fs)))))", "user": "5aeec90fe4b0cc2b61a3bc31"}, {"problem": 58, "code": "(letfn\n  [(my-comp\n     ([f] f)\n     ([f & r]\n      #(f (apply (apply my-comp r) %&))))]\n  my-comp)", "user": "59d37e3de4b0ef0a1e9b5bb9"}, {"problem": 58, "code": "(fn\n  ([f g]\n   (fn [s]\n     (f (g s))))\n  ([f g h]\n   (fn [& s]\n      (f (g (apply h s))))))", "user": "5af907e6e4b0cc2b61a3bcda"}, {"problem": 58, "code": "(fn my-comp [& fns]\n  (fn [& vars]\n    (reduce (fn [res f] (f res)) (apply (first (reverse fns)) vars) (rest (reverse fns)))))", "user": "5aeca4c9e4b0cc2b61a3bc0a"}, {"problem": 58, "code": "(fn my-comp\n  [& fns]\n  (loop [output-fn #(apply (last fns) %&)\n         remaining-fns (reverse (butlast fns))]\n    (if (empty? remaining-fns) output-fn\n        (let [[next-fn & other-fns] remaining-fns]\n          (recur #(next-fn (apply output-fn %&)) \n                 other-fns)))))\n\n;(fn [& fs] (reduce (fn [f g] #(f (apply g %&))) fs))", "user": "5af31955e4b0cc2b61a3bc7a"}, {"problem": 58, "code": "(fn [& fns]\n  (let [[f1 & fs] (reverse fns)]\n    (fn [& args] (reduce #(%2 %1) (apply f1 args) fs))))", "user": "5afb4b15e4b0cc2b61a3bcf6"}, {"problem": 58, "code": "(fn [& functions]\n (reduce \n   (fn [func combined] (fn [& args] apply (func (apply combined args))))\n   identity \n   functions))", "user": "546e4ab8e4b00cfc9eacc19c"}, {"problem": 58, "code": "(fn compx\n  [& fs]\n  (reduce (fn [f1 f2]\n            #(f1 (apply f2 %&))) fs))", "user": "5b02a170e4b0cc2b61a3bd52"}, {"problem": 58, "code": "(fn [f g & h]\n (fn [& x]\n  (if h (f(g(apply (first h) x))) (f(apply g x)))))", "user": "5b0180cfe4b0cc2b61a3bd47"}, {"problem": 58, "code": "(fn [& fs]\n  (reduce\n    (fn [a b] (fn [& x] (a (apply b x))))\n    fs))", "user": "5731283ae4b0cd1946bd0fbe"}, {"problem": 58, "code": "(fn [& fns]\n  (fn [& args]\n    (reduce #(%2 %1)\n            (apply (last fns) args)\n            (rest (rseq (vec fns))))))", "user": "5aa4f7dae4b0d174b936c88c"}, {"problem": 58, "code": "(fn [& ftns]\n\t(fn [& data]\n\t\t(\n\t\t\tlet [[ftn & ftns] (reverse ftns)]\n\t\t\t(reduce #(%2 %1) (apply ftn data) ftns)\n\t\t)\u2028\t)\n)", "user": "5b118b7be4b0cc2b61a3be34"}, {"problem": 58, "code": "(fn [& fs] ((fn [accum [f & fs]]\n                            (if (empty? fs)\n                              (fn[& args] (accum (apply f args)))\n                              (recur #(accum (f %)) fs))) identity fs))", "user": "5b0fe3f4e4b0cc2b61a3be14"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& args]\n    (loop [x args fs (reverse fs)]\n      (if (empty? fs)\n        (first x)\n        (let [[f] fs\n              rst (rest fs)\n              nx (apply f x)]\n          (recur [nx] rst)))\n     )))", "user": "56aad332e4b03c432f187337"}, {"problem": 58, "code": "(fn my-comp [& fns]\n  (fn [& args]\n    (let [fns-in-order (reverse fns)]\n      (reduce\n       (fn [acc f] (f acc))\n       (apply (first fns-in-order) args)\n       (rest fns-in-order)))))", "user": "551bdefde4b07993ea3788d7"}, {"problem": 58, "code": "(fn [& fs]\n    (fn [& args]\n      (first (reduce #(vector (apply %2 %)) args (reverse fs)))))", "user": "58db3c5ae4b0a4d5acaab677"}, {"problem": 58, "code": "(fn mycmp [& l] (reduce (fn [a b] (fn [& p] (a (apply b p)))) l))", "user": "583048d9e4b051871117c007"}, {"problem": 58, "code": "(fn [& fns]\n  (reduce (fn [a f] (fn [& args] (a (apply f args)))) fns))", "user": "5af8221ce4b0cc2b61a3bccd"}, {"problem": 58, "code": "(fn [& fs] (reduce (fn [f g] #(f (apply g %&))) fs))", "user": "594bc7d6e4b07ddc2dafae3d"}, {"problem": 58, "code": "(fn [& fs]\n  (reduce #(fn [& args] (%1 (apply %2 args))) fs))", "user": "598858d0e4b021a7a535feb5"}, {"problem": 58, "code": "(fn [& fs] (reduce (fn [f g] #(f (apply g %&))) fs))", "user": "592c64ffe4b072a2710fcf57"}, {"problem": 58, "code": "(fn compose [& fns]\n  (fn [& args]\n    (first\n      (reduce \n        #(list (apply %2 %1))\n        args\n        (reverse fns)))))", "user": "5b02ab12e4b0cc2b61a3bd53"}, {"problem": 58, "code": "(fn func ([] identity) ([f] f) ([f g] (fn ([] (f (g))) ([x] (f (g x))) ([x y] (f (g x y))) ([x y z] (f (g x y z))) ([x y z & args] (f (apply g x y z args))))) ([f g & fs] (reduce func (list* f g fs))))", "user": "5addadfce4b0837691e92c13"}, {"problem": 58, "code": "(fn c [& fs] (reduce (fn [f g] (fn [& x] (f (apply g x)))) fs))", "user": "59419bdfe4b060784b3b78f7"}, {"problem": 58, "code": "(fn mcomp [& fns]\n  (if (empty? (rest fns))\n    (fn [& args] (apply (first fns) args))\n    (fn [& args] ((first fns) (apply (apply mcomp (rest fns)) args)))))", "user": "5922f8a9e4b026ae3852128f"}, {"problem": 58, "code": "(fn my-comp [& f]\n  (fn [& args]\n    ((fn rev [fs]\n      (if (= (count fs) 1)\n        (apply (first fs) args)\n        ((first fs) (rev (rest fs))))) f)))", "user": "5b15811ee4b0cc2b61a3be6f"}, {"problem": 58, "code": "(fn my-comp [& funcs]\n  (fn [& args]\n    (letfn [(apply-all [f & fs]\n              (if-not fs\n                (apply f args)\n                (f (apply apply-all fs))))]\n      (apply apply-all funcs))))", "user": "5b13ba71e4b0cc2b61a3be53"}, {"problem": 58, "code": "(fn [& funcs]\n  (fn [& args]\n    (let [rfuncs (reverse funcs)]\n      (reduce #(%2 %) (apply (first rfuncs) args) (rest rfuncs)))))", "user": "5b0e6795e4b0cc2b61a3be03"}, {"problem": 58, "code": "(fn [& fs]\n  (reduce (fn [f g]\n            #(f (apply g %&))) fs))", "user": "5b107263e4b0cc2b61a3be22"}, {"problem": 58, "code": "#(reduce (fn[a i] (fn[& x] (i (apply a x)))) (reverse %&))", "user": "5b210749e4b03cfeda66ed48"}, {"problem": 58, "code": "(fn my-comp [& fs]\n  (let [rfs (reverse fs)]\n    (fn [& els]\n      (if (= (count rfs) 1)\n        ((first rfs) els)\n        (reduce #(%2 %1) (apply (first rfs) els) (rest rfs))))))", "user": "5b2c282ce4b025bcb146f2b2"}, {"problem": 58, "code": "(fn [& funcs]  \n  (let [[fun & funs] (reverse funcs)]    \n    (fn [& args]      \n      (reduce (fn [res f] (f res)) (apply fun args) funs))))", "user": "51316a63e4b0431ba07e7feb"}, {"problem": 58, "code": "(fn my-comp[& fns]\n  (letfn [(spin\n            ([functions first-arg & other-args]\n             (spin\n              (rest functions)\n              (apply (first functions) first-arg other-args)))\n            ([functions result]\n             (if (empty? functions)\n               result\n               (spin (rest functions) ((first functions) result)))))]\n    (fn [& args]\n      (apply spin (reverse fns) args))))", "user": "5980f91ae4b021a7a535fddd"}, {"problem": 58, "code": "(fn [& fs]\n   (fn [& args]\n     (let [f0 (last fs)\n           r0 (apply f0 args)]\n       (loop [fs (drop-last fs)\n              rn r0]\n         (if (empty? fs) rn\n             (recur (drop-last fs)\n                    ((last fs) rn)))))))", "user": "5b073c34e4b0cc2b61a3bda4"}, {"problem": 58, "code": "#(fn [& args]\n     (reduce (fn [f1 f2]\n               (if (fn? f1)\n                 (f2 (apply f1 args))\n                 (f2 f1))) (reverse %&)))", "user": "5b34aba7e4b025bcb146f352"}, {"problem": 58, "code": "(fn [& fns]\n  (let [[f & more] (reverse fns)]\n    (fn [& args]\n      (reduce (fn [acc g]\n                 (g acc))\n              (apply f args)\n              more))))", "user": "5777c3d6e4b0979f8965164f"}, {"problem": 58, "code": "(fn my-comp [& funcs]\n\t(fn [& args]\n\t\t(let [helper (fn helper [f1 & fs]\n\t\t\t\t\t\t(if-not (seq fs)\n\t\t\t\t\t\t\t(apply f1 args)\n\t\t\t\t\t\t\t(f1 (apply helper fs))))]\n\t\t\t(apply helper funcs))))", "user": "5b2a559be4b063e2438bcc74"}, {"problem": 58, "code": "(fn COMP [& fns] (fn [& args] (letfn [(COMP1 [fns args] (if (empty? fns) args (COMP1 (rest fns) (list (apply (first fns) args)))))] (first (COMP1 (reverse fns) args)))))", "user": "5b3f2ba9e4b02d533a91bc09"}, {"problem": 58, "code": "(fn \n ([f g] #(f (apply g %&)))\n ([f g h] #(f (g (apply h %&)))))", "user": "579c35fee4b05b1deef9ae04"}, {"problem": 58, "code": "(fn comb [& funcs]\n  (fn [& args]\n    (first\n(reduce #(vector (apply %2 %1)) args (reverse funcs )))))", "user": "5b37fd11e4b02d533a91bbac"}, {"problem": 58, "code": "(fn compose [& fns]\n  (fn x [& args] \n      (first (reduce #(vector (apply %2 %1)) args (reverse fns)))))", "user": "5b3ef412e4b02d533a91bc06"}, {"problem": 58, "code": "(fn [& funcs]\n  (fn [& args]\n    (reduce #(%2 %1) (apply (last funcs) args) (rest (reverse funcs)))))", "user": "5b0948f3e4b0cc2b61a3bdbb"}, {"problem": 58, "code": "(fn crippled-compose [& fs]\n  (fn [& args]\n    (let [rev-fs (reverse fs)]\n      (reduce (fn [v f] (f v))\n              (apply (first rev-fs) args)\n              (rest rev-fs)))))", "user": "5b47874be4b02d533a91bc70"}, {"problem": 58, "code": "(fn x[f1 & f2] ( if (> (count f2) 1) (apply x (x f1 (first f2)) (rest f2)) (fn [& args] (f1 (apply (first f2) args)) )))", "user": "5b3aa98be4b02d533a91bbca"}, {"problem": 58, "code": "(fn [& rst] (reduce (fn [f1 f2] #(f1 (apply f2 %&))) rst))", "user": "59021fede4b0438e51c2d04d"}, {"problem": 58, "code": "(fn [& fns] (fn [& args] (first (reduce\n                         (fn [acc e] (vector (apply e acc)))\n                         args\n                         (reverse fns)))))", "user": "5b445421e4b02d533a91bc40"}, {"problem": 58, "code": "(fn [& funs] (fn [& args] (reduce #(%2 %1) (apply (last funs) args) (rest (reverse funs)))))", "user": "5b4b4052e4b02d533a91bc9a"}, {"problem": 58, "code": "( fn [& fns]\n   (let [fns (reverse fns)] \n    (fn [& args]\n        (reduce #(%2 %1) (apply (first fns) args)  (rest fns))   \n    )\n    )    \n)", "user": "5b274fd1e4b063e2438bcc3b"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [a & args]\n      (let [rfs (reverse fs)]\n        (reduce #(%2 %1) (apply (first rfs) a args) (rest rfs)))))", "user": "5b4ff637e4b02d533a91bce0"}, {"problem": 58, "code": "(fn [& fv]\n  (fn [& bv]\n    (reduce #(%2 %1) (apply (last fv) bv) (reverse (drop-last fv)))))", "user": "5b008bcae4b0cc2b61a3bd3d"}, {"problem": 58, "code": "#(fn [a & args]\n  (let [[g & gs] (reverse %&)\n        init (if (nil? args) (g a) (apply g a args))]\n    (loop [[f & fs] gs res init]\n      (if (nil? f) res\n        (recur fs (f res))))))", "user": "5b552117e4b02d533a91bd2c"}, {"problem": 58, "code": "(fn my-comp [& fs]\n  (let [[f & fs] (reverse fs)]\n    (fn [& xs]\n      (reduce (fn [x fun] (fun x)) (apply f xs) fs))))", "user": "5b51b9f8e4b02d533a91bcfe"}, {"problem": 58, "code": "(fn my-comp [& funcs]\n  (fn [& args]\n    (first (reduce (fn [r fun]\n              (list (apply fun r)))\n            args\n            (reverse funcs)))))", "user": "5b0b8d29e4b0cc2b61a3bdd7"}, {"problem": 58, "code": "(fn [& fns]\n  (fn [& args]\n    (first (reduce #(list (apply %2 %))\n                   args\n                   (reverse fns)))))", "user": "5aeb0b44e4b0cc2b61a3bbee"}, {"problem": 58, "code": "(fn compose [& funcs]\n  (if (second funcs)\n    (fn [& x] ((first funcs) (apply (apply compose (rest funcs)) x)))\n    (fn [& x] (apply (first funcs) x))))", "user": "5b465b8be4b02d533a91bc65"}, {"problem": 58, "code": "(fn co\n  ([f] f)\n  ([f g] (fn two [& args] (f (apply g args))))\n  ([f g & funcs]\n  (reduce co (concat (list f g) funcs))))", "user": "5b4cd94ce4b02d533a91bcb1"}, {"problem": 58, "code": "(fn [& fns]\n  (fn [& args]\n    ((fn r [[f & rst]]\n      (if (empty? rst)\n        (apply f args)\n        (f (r rst)))) fns)))", "user": "5ab1665de4b073f1774425c0"}, {"problem": 58, "code": "(fn megacomp [& fns]\n  (fn [& data]\n  \t(first (reduce (fn [results f]\n                     (println results)\n                     [(apply f results)])\n                   data\n                   (reverse fns)))\n    )\n  )", "user": "5b5f2990e4b0c6492753e6ea"}, {"problem": 58, "code": "(fn my-comp [& fs]\n  (if (= 2 (count fs))\n    (fn [& x] ((first fs) (apply (second fs) x)))\n    (my-comp (first fs) (apply my-comp (rest fs)))))", "user": "5ad002f2e4b0ea6055cfab87"}, {"problem": 58, "code": "(fn [& fs]\n  (let [compose (fn [g gs]\n                  (fn [& xs]\n                    (reduce (fn [x h] (h x)) (apply g xs) gs)))\n        [h & hs] (reverse fs)]\n    (compose h hs)))", "user": "56e2ca59e4b03a7c14b85a38"}, {"problem": 58, "code": "(fn own-comp\n  [& funcs]\n  (fn [& args]\n    (first\n      (reduce #(vector (apply %2 %1)) args (reverse funcs)))))", "user": "58e56633e4b056aecfd47c94"}, {"problem": 58, "code": "(fn f-seq\n  ([f] f)\n  ([f g] (fn\n           ([] (f (g)))\n           ([x] (f (g x)))\n           ([x y] (f (g x y)))\n           ([x y & z] (f (apply g x y z)))))\n  ([f g & h] (reduce f-seq (list* f g h))))", "user": "5b5e7953e4b0c6492753e6d9"}, {"problem": 58, "code": "(fn\n ([f g] #(f (apply g %&)))\n ([f g h] #(f (g (apply h %&)))))", "user": "5b61aa6ae4b0c6492753e712"}, {"problem": 58, "code": "(fn compose [& funs]\n  (fn [& args]\n    (reduce (fn [partial-result next-fn] (next-fn partial-result))\n            (apply (last funs) args) (rest (reverse funs)))))", "user": "5b6f27dce4b0c6492753e7d9"}, {"problem": 58, "code": "(fn [& functions]\n    (fn [& p]\n      (reduce\n        (fn [r f] (f r))\n        (apply (last functions) p)\n        (rest (reverse functions)))))", "user": "5b67f0fbe4b0c6492753e76d"}, {"problem": 58, "code": "; first solution\n;#(fn [& xs]\n;    (let [[f & fs] (reverse %&)\n;          xs (apply f xs)]\n;      (loop [[f & fs] fs xs xs]\n;        (if f (recur fs (f xs)) xs))))\n\n; inspired by aguirre, which ends up being identical to daowens's\n(fn [& fs]\n  (let [[f & fs] (reverse fs)]\n    (fn [& xs]\n      (reduce #(%2 %1) (apply f xs) fs))))", "user": "5a544eeee4b05d388ecb6c24"}, {"problem": 58, "code": "(fn c\n  ([] identity)\n  ([f] f)\n  ([f g] (fn [& args] (f (apply g args))))\n  ([f g & fs] (reduce c (list* f g fs))))", "user": "5b772ad7e4b047b03b2036e8"}, {"problem": 58, "code": "(fn [& fs']\n  (fn [& xs']\n    (loop [fs (reverse fs')\n           xs xs']\n      (if (empty? fs)\n        (first xs)\n        (recur (rest fs) (list (apply (first fs) xs)))))))", "user": "5b64370ae4b0c6492753e73c"}, {"problem": 58, "code": "(fn [& fns]\n    (fn [& args]\n      (loop [fns-to-exec (reverse fns)\n             curr-fn (first fns-to-exec)\n             curr-args args\n             ]\n        (println \"::\" fns-to-exec)\n        (if (empty? fns-to-exec)\n          (or (println \"==result==\" curr-args) (first curr-args))\n          (or (println \"->\" curr-fn \"args: \" curr-args \"result: \" (vector (apply curr-fn curr-args))) (recur (rest fns-to-exec) (first (rest fns-to-exec)) (vector (apply curr-fn curr-args))))))))", "user": "57ebbf3ae4b0bfb2137f5b66"}, {"problem": 58, "code": "(fn fcomp [& fs]\n  (fn inner [& args]\n    (first\n      (reduce\n        #(vector (apply %2 %1))\n        args\n        (reverse fs)))))", "user": "5779556de4b0979f8965166e"}, {"problem": 58, "code": "(fn foo [& args]\n  (fn bar [& x]\n    (reduce #(if (= x %1) (apply %2 %1) (%2 %1)) x (reverse args))\n  )\n)", "user": "5b3251c1e4b025bcb146f317"}, {"problem": 58, "code": "(fn\n  ([f](identity f))\n  ([f g](fn \n        ([a](-> a g f))\n        ([a & b](-> (a b) g f))\n  ))\n  ([f g h](fn\n        ([a](-> a h g f))\n        ([a b](-> (h a b) g f))\n        ([a b & c](-> (apply h (list* a b c)) h g f))\n  ))\n)", "user": "5826a843e4b051871117befd"}, {"problem": 58, "code": "(fn mycomp\n  ([x y]\n   (fn [& args] (x (apply y args))))\n  ([x y & z]\n   (reduce #(mycomp %1 %2) (mycomp x y) z)))", "user": "5b632851e4b0c6492753e72d"}, {"problem": 58, "code": "(fn [& a]\n  (fn [& b]\n    (reduce #(%2 %1) (apply (last a) b) (reverse (butlast a)))))", "user": "5b59d176e4b02d533a91bd86"}, {"problem": 58, "code": "(fn my-comp-2 [& fs]\n   (fn [& args]\n     (println fs args)\n     (let [first-result (apply (last fs) args)]\n       (reduce #(%2 %1) first-result (reverse (drop-last fs))))))", "user": "5a91988ae4b002d099cae6f9"}, {"problem": 58, "code": "(fn [& fs] (reduce (fn [f g] #(f (apply g %&))) fs))", "user": "5b83c11ae4b047b03b2037b7"}, {"problem": 58, "code": "(fn [& fs] (reduce (fn [f g] #(f (apply g %&))) fs))", "user": "5b88f0c0e4b047b03b203816"}, {"problem": 58, "code": "(fn recomp [f & fs]\n  (if (empty? fs)\n    f\n    (fn [& xs]\n      (f (apply (apply recomp fs) xs)))))", "user": "5b500215e4b02d533a91bce2"}, {"problem": 58, "code": "(fn [& funcs]\n  (fn [& args] (first (reduce #(list (apply %2 %)) args (reverse funcs)))))", "user": "59cd13d5e4b0ef0a1e9b5b32"}, {"problem": 58, "code": "(fn c \n  ([] identity)\n  ([f] f)\n  ([f g]   \n   (fn \n     ([] (f (g)))\n     ([x] (f (g x)))\n     ([x y ] (f (g x y)))\n     ([x y z] (f (g x y z)))\n     ([x y z & args] (f (apply g x y z args)))))\n     \n  \n  ([f g & fs]\n   (reduce c \n           (list* f g fs)\n           )\n   )\n   )", "user": "5969bb32e4b069c0a1a197ed"}, {"problem": 58, "code": "(fn [& f]\n  (let [fs (reverse f)]\n    (fn [& p]\n      (loop [_fs fs _p p]\n        (if (not-empty _fs)\n          (recur (rest _fs) (list (apply (first _fs) _p)))\n          (apply #(identity %) _p))))))", "user": "5a085dfde4b01bb0ae8afdf4"}, {"problem": 58, "code": "(fn [& funcs]\n  (let [funcs (reverse funcs)]\n    (fn [& args]\n      (first (reduce (fn [as f] (list (apply f as))) args funcs)))))", "user": "5b9357b7e4b0c0b3ffbd4a46"}, {"problem": 58, "code": "(fn [& fns]\n      (if (empty? fns)\n        identity\n        (loop [result (last fns) fns (take (dec (count fns)) fns)]\n          (if (empty? fns)\n            result\n            (recur\n              #((last fns)\n                (apply\n                  result\n                  %&))\n              (take (dec (count fns)) fns))\n            ))))", "user": "5b999af8e4b0c0b3ffbd4ad3"}, {"problem": 58, "code": "(fn [& funcs]\n  (fn [& args]\n    (reduce #(%2 %1) (apply (last funcs) args) (rest (reverse funcs)))))", "user": "5b77d3c8e4b047b03b2036f1"}, {"problem": 58, "code": "(fn [& fns]\n  (let [[head & tail] (reverse fns)]\n    (fn [& args]\n      (reduce #(%2 %1) (apply head args) tail))))", "user": "5b62ff3ce4b0c6492753e72a"}, {"problem": 58, "code": "(fn [& funcs]\n   (fn [& args]\n     (let [[fst-f & rst-f] (reverse funcs)\n           start-val (apply fst-f args)]\n       (reduce (fn [acc-val func]\n                 (func acc-val))\n               start-val\n               rst-f))))", "user": "5ba28f36e4b0a20761a233c4"}, {"problem": 58, "code": "(fn [& args] (reduce (fn [f g] #(f (apply g %&))) args))", "user": "5b11449ce4b0cc2b61a3be2d"}, {"problem": 58, "code": "(fn [& fns]\n  (fn \n    ([x] (reduce #(%2 %1) x (reverse fns)))\n    ([x & xs] (reduce #(%2 %1) (apply (last fns) x xs) (reverse (butlast fns))))\n  )\n)", "user": "570d0548e4b0b0fb43fd06d2"}, {"problem": 58, "code": ";; Noisesmith's is best \n(fn pmoc\n  [& functions]\n  (let [[f & fs] (reverse functions)]\n    (fn [& args]\n      (reduce #(%2 %)\n              (apply f args)\n              fs))))", "user": "599342efe4b0b211ea3aaab0"}, {"problem": 58, "code": "(fn [& fns] (reduce (fn [acc elem] (fn [& args] (acc (apply elem args)))) fns))", "user": "59f4c9c8e4b0966464fe6ab8"}, {"problem": 58, "code": "(fn [& function]\n  (fn [& args]\n    (reduce #(%2 %1) (apply (last function) args)  (rest (reverse function)) )))", "user": "5b6f72ede4b0c6492753e7dc"}, {"problem": 58, "code": "(fn [& fs] \n  (reduce \n   (fn [f g] #(f (apply g %&))) fs))", "user": "5b79cbdce4b047b03b20370a"}, {"problem": 58, "code": "(fn [& fns]\n  (reduce #(fn [& args] (%1 (apply %2 args))) identity fns))", "user": "56ef077ae4b04a395b9a0459"}, {"problem": 58, "code": "(fn [& args]\n  (let [fns (reverse args)]\n    (fn [& args]\n      (reduce\n       (fn [a f] (f a))\n       (apply (first fns) args)\n       (rest fns))\n      )\n    ))", "user": "5a66fddee4b0512ff01cd9d7"}, {"problem": 58, "code": "(fn comp' [& functions]\n  (let [fs (reverse functions)]\n    (fn [& args]\n      (reduce (fn [acc f] (f acc))\n               (apply (first fs) args)\n               (rest fs)))))", "user": "5b602a66e4b0c6492753e6fc"}, {"problem": 58, "code": "(fn [& f]\n  (fn [& a]\n    (first\n     (reduce #(vector (apply %2 %1)) a (reverse f))\n     )\n    )\n  )", "user": "5b99a0a3e4b0c0b3ffbd4ad7"}, {"problem": 58, "code": "(fn compose [& fs] (reduce (fn [f1 f2] #(f1 (apply f2 %&))) \n                           fs))", "user": "5bafd5c8e4b0a20761a234dd"}, {"problem": 58, "code": "(fn [& fns]\n  (fn [& x]\n    (first (reduce (fn [x f] [(apply f x)]) x (reverse fns)))))", "user": "4ea8570f535d7eef308072f8"}, {"problem": 58, "code": "#(fn [& x] (first (reduce (fn [a b] (list (apply b a))) x (reverse %&))))", "user": "5bb23cf1e4b0a20761a2350a"}, {"problem": 58, "code": "(fn comp_ [& [f g & fs]]\n    (cond\n      g\n      (fn [& args]\n        (f (apply (apply comp_ g fs) args)))\n      f\n      f\n      :else\n      identity\n      ))", "user": "59137b42e4b0163c97b36f04"}, {"problem": 58, "code": "(let [comp2 (fn [f g]\n              (fn [& args]\n                (f (apply g args))))]\n  (fn [& fs]\n    (reduce comp2 identity fs)))", "user": "5bab5440e4b0a20761a23475"}, {"problem": 58, "code": "(fn [& fs] \n  (fn [& args]\n    (let [[f0 & fns] (reverse fs)]\n      (reduce #(%2 %1) (apply f0 args) fns))))", "user": "56c4f43ce4b05cc29241ee9c"}, {"problem": 58, "code": "(fn [& fs] \n  (let [[ff1 & ffs] (reverse fs)]\n  (fn [& args]\n    (reduce #(%2 %) (apply ff1 args) ffs) )))", "user": "5b919d9de4b0c0b3ffbd4a24"}, {"problem": 58, "code": "(fn [& f] (fn [& p] (apply identity (reduce #(list (apply %2 %)) p (reverse f)))))", "user": "5b924123e4b0c0b3ffbd4a34"}, {"problem": 58, "code": "(fn my-comp [& fs] (fn [& args] (reduce (fn [r f] (f r)) (apply (last fs) args) (rest (reverse fs)))))", "user": "5b7bc82ce4b047b03b203726"}, {"problem": 58, "code": "(fn cmp\n  ([f g]\n   (fn [& args] (f (apply g args))))\n  ([f g & more]\n   (reduce cmp (list* f g more))))", "user": "5829d9f8e4b051871117bf4d"}, {"problem": 58, "code": "(fn f [& funcs]\n  (cond\n   (seq (rest funcs)) #((first funcs) \n                        (apply (apply f (rest funcs)) %&))\n   (seq funcs) (first funcs)\n   :default identity))", "user": "5bc39d2be4b07a9b28b10045"}, {"problem": 58, "code": "(fn [& fs]\n  (reduce\n   (fn [acc f]\n     #(acc (apply f %&)))\n   fs))", "user": "5bc15685e4b07a9b28b10016"}, {"problem": 58, "code": "(fn [& fns]\n  (let [fns (reverse fns)]\n    (fn [& args]\n      (reduce\n       (fn [acc f]\n         (f acc))\n       (apply (first fns) args)\n       (rest fns)))))", "user": "5b96800ae4b0c0b3ffbd4a7b"}, {"problem": 58, "code": "(fn \n  ([] identity)\n  ([f] f)\n  ([f g]\n   (fn [& args] (f (apply g args))))\n  ([f g h] (fn [& args] (f (g (apply h args))))))", "user": "58ac1135e4b0005cfeb1a73f"}, {"problem": 58, "code": "(fn [& fns]\n    (fn [& valz]\n      (let [fs (reverse fns)]\n        (if (empty? (rest valz))\n          (reduce #(%2 %1) (first valz) fs)\n          (reduce #(%2 %1) (reduce (first fs) valz) (rest fs))\n        )\n      )\n    )\n )", "user": "5bbd13a5e4b07a9b28b0ff95"}, {"problem": 58, "code": "(fn [& args] (reduce (fn [f g] #(f (apply g %&))) args))", "user": "5b9c4a7be4b0c0b3ffbd4b16"}, {"problem": 58, "code": "(fn [& fs] (reduce (fn [f g] #(f (apply g %&))) fs))", "user": "5b85221ce4b047b03b2037c8"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& xs]\n    (reduce\n      (fn [acc f]\n        (f acc))\n      (apply (last fs) xs)\n      (rest (reverse fs)))))", "user": "5ade6bafe4b0837691e92c23"}, {"problem": 58, "code": "(fn [& fs]\n  (reduce (fn [f g]\n            (fn [& args]\n              (f (apply g args)))) fs))", "user": "59d8f23ae4b0ef0a1e9b5c49"}, {"problem": 58, "code": "(fn compose [f & fr]\n  (if fr (fn [& temp-args] (f (apply (apply compose fr) temp-args))) f))", "user": "5bc935bde4b07a9b28b100d8"}, {"problem": 58, "code": "(fn [& fs] (reduce (fn [f g] #(f (apply g %&))) fs))", "user": "5b759ca8e4b047b03b2036d0"}, {"problem": 58, "code": "(fn blub\n  ([f] f)\n  ([f & g] (fn [& x] (f (apply (apply blub g) x)))))", "user": "5bc9e3e9e4b07a9b28b100e2"}, {"problem": 58, "code": "(fn [& fs]\n  (reduce (fn [f g]\n            #(f (apply g %&))) fs))", "user": "5bcd9a86e4b0e9689409edfe"}, {"problem": 58, "code": "(fn [& args]\n  (reduce (fn [acc f]\n            (fn ([x] (acc (f x))))\n            (fn ([& xs] (acc (apply f xs)))))\n          args))", "user": "543a8256e4b032a45b869327"}, {"problem": 58, "code": "(fn [& x]\n  (fn [& i]\n    (let [rx (reverse x)\n          r (if (= (count i) 1)\n              ((first rx)(first i))\n              (apply (first rx) i))]\n          (reduce #(%2 %) r (rest rx)))))", "user": "566d71b1e4b0a866af6896ca"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& args]\n    (let [fs (reverse fs)]\n      (reduce #(%2 %1)\n              (apply (first fs) args)\n              (rest fs)))))", "user": "565131b3e4b0f29ec07d2e88"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& args]\n    (reduce #(%2 %1) (apply (last fs) args) (rest (reverse fs)))))", "user": "567c63f6e4b05957ce8c61bb"}, {"problem": 58, "code": "(fn [& funcs] (fn [& x]\n    (loop [fl (reverse funcs) v x]\n      (if (empty? fl)\n          (first v)\n          (recur (rest fl) [(apply (first fl) v)])\n      )\n    )\n  )\n)", "user": "5bdf651ee4b0ed4b8aab4c6d"}, {"problem": 58, "code": "(fn [& fns]\n  (let [fs (reverse fns)]\n    (fn [& args]\n     (reduce (fn [val f] (f val)) (apply (first fs) args) (rest fs)))))", "user": "5592ba8be4b0c79f6e1db931"}, {"problem": 58, "code": "(fn [& fs] (reduce (fn [f g] #(f (apply g %&))) fs))", "user": "5bbdd136e4b07a9b28b0ffab"}, {"problem": 58, "code": "(fn [& fs]\n  (let [[f & rfs] (reverse fs)]  \n    (fn [& x]\n      (loop [res (apply f x) rfs rfs]\n        (if (seq rfs)\n          (recur ((first rfs) res)\n                 (rest rfs))\n          res)))))", "user": "5bc833a5e4b07a9b28b100bb"}, {"problem": 58, "code": "(fn f [& xs]\n    (fn g [& ys]\n      (if (>= (count xs)\n              2)\n        ((apply f (butlast xs))\n         (apply (last xs)\n                ys))\n        (apply (last xs)\n               ys))))", "user": "5be5cebde4b0ed4b8aab4d19"}, {"problem": 58, "code": "(fn komp [f & fs]\n    (fn [& xs]\n      (if (empty? fs)\n        (apply f xs)\n        (f (apply (apply komp fs) xs)))))", "user": "5be0306be4b0ed4b8aab4c7d"}, {"problem": 58, "code": "(fn [& fargs] (fn [& vargs] (loop [fs (vec fargs) vs vargs]\n  (cond\n   \t(empty? fs) (first vs)\n    :else (recur (pop fs) (cons (apply (peek fs) vs) ())\n           )\n   )\n                              \n                             )\n               )\n  )", "user": "5be6d0f8e4b0f319e2d7ec51"}, {"problem": 58, "code": "(fn my-comp [f & fs]\n  (if (empty? fs)\n    #(apply f %&)\n    #(f (apply (apply my-comp fs) %&))))", "user": "5b60e88be4b0c6492753e70b"}, {"problem": 58, "code": "(fn \n  ([fx fg] \n   (fn [x] (fx (fg x)))) \n  ([fx fg fz] \n   (fn [& xs] \n     (fx (fg (apply fz xs))))))", "user": "5bea8b77e4b0f319e2d7ec83"}, {"problem": 58, "code": "(fn hi-ord-f [& fs]\n  (fn [& args]\n    (first\n      (reduce #(vector (apply %2 %1))  args  (reverse fs)))))", "user": "5be33a16e4b0ed4b8aab4cd6"}, {"problem": 58, "code": "(fn [& f] (fn [& a] (first (reduce #(list (apply %2 %1)) a (reverse f)))))", "user": "5be182eae4b0ed4b8aab4c9d"}, {"problem": 58, "code": "(fn [& fun]\n    (fn [& args]\n      (first (reduce #(vector (apply %2 %1)) args (reverse fun)))))", "user": "5bf5ddfde4b0bdcf453d159e"}, {"problem": 58, "code": "(fn comb [& funcs]\n  (fn [& args]\n    (first\n      (reduce #(vector (apply %2 %1)) args (reverse funcs )))))", "user": "5a42dbabe4b0447ef91cc5fc"}, {"problem": 58, "code": "(fn rr [& function-args]\n  (if (empty? (rest function-args))\n    (fn [& x] (apply (first function-args) x))\n    (fn [& x] ((first function-args) (apply (apply rr (rest function-args)) x)))\n    ))", "user": "5bfa25fbe4b0bdcf453d15c8"}, {"problem": 58, "code": "(fn [& fns]\n    (fn inner [& arguments]\n      (first \n      (reduce (fn [a f] (list (apply f a)))\n              arguments\n              (reverse fns)))))", "user": "55469eede4b0a04f79299542"}, {"problem": 58, "code": "(fn comb [& funcs]\n  (fn [& args]\n    (first\n      (reduce #(list (apply %2 %1)) args (reverse funcs )))))", "user": "5be58beae4b0ed4b8aab4d14"}, {"problem": 58, "code": "(fn my-comp [& f]\n  (fn [& args]\n    (reduce #(%2 %1) (apply (first (reverse f)) args) (drop 1 (reverse f)))))", "user": "5bf0aefde4b0a6d31fed215a"}, {"problem": 58, "code": "(fn [& functions]\n  (loop [composed identity\n         funclist functions]\n    (if (empty? funclist)\n      composed\n      (if (= identity composed)\n        (recur (fn [& args] (apply (last funclist) args)) (butlast funclist))\n        (recur (fn [& args] ((last funclist) (apply composed args))) (butlast funclist))\n        )\n      )\n    )\n  )", "user": "5c05cae7e4b0bdcf453d16a3"}, {"problem": 58, "code": "(fn cp [& fns]\n  (fn [& args]\n    (first\n     (reduce #(list (apply %2 %1))\n             args\n             (reverse fns)))))", "user": "5ba15075e4b0a20761a2339e"}, {"problem": 58, "code": "(fn [& funcs]\n  (fn [& args] (reduce #(%2 %1) (apply (last funcs) args) (rest (reverse funcs)))))", "user": "5c03e927e4b0bdcf453d167b"}, {"problem": 58, "code": "(fn [& fns]\n  (fn [& x]\n   (reduce (fn [acc y] (y acc)) (apply (first (reverse fns)) x) (rest (reverse fns)))))", "user": "5b15ab32e4b0cc2b61a3be72"}, {"problem": 58, "code": "(fn com [f & g]\n  (fn [& x]\n   (if g\n    (f (apply (apply com g) x))\n    (apply f x)\n   )\n  )\n)", "user": "5c0d0537e4b0bdcf453d173d"}, {"problem": 58, "code": "(fn [& fns] \n  (fn [& args]\n      (reduce (fn [agg f] (f agg)) (apply (last fns) args) (rest (reverse fns)))\n  )\n)", "user": "5b8ec146e4b0c0b3ffbd49f0"}, {"problem": 58, "code": "(fn [& funs-norm] \n  (let [funs (reverse funs-norm)\n        [start-f & rest-fs] funs] \n    (fn [& args] \n      (let [start-val (apply start-f args)]\n        (reduce #(%2 %1) start-val rest-fs)))))", "user": "5c13da47e4b01240ff5671a6"}, {"problem": 58, "code": "(fn co [f g & hs]\n  (let [a (fn [& args] (f (apply g args)))]\n    (if (empty? hs)\n      a\n      (apply co a hs))))", "user": "5c13ce5ee4b01240ff5671a4"}, {"problem": 58, "code": "(fn [& fns]\n  (fn [& args]\n    (loop [vals args, next-fn (last fns), rest-fns (drop-last fns)]\n      (if (empty? rest-fns)\n        (apply next-fn vals)\n        (recur (vector (apply next-fn vals)) (last rest-fns) (drop-last rest-fns))))))", "user": "5c196e7be4b01240ff5671fb"}, {"problem": 58, "code": "(fn [& flist] \n  (fn [& args]\n    (reduce #(%2 %1) (apply (last flist) args) (rest (reverse flist)))))", "user": "57c647bbe4b05aa3c4741cf3"}, {"problem": 58, "code": "(fn\n  [& fs]\n  (fn [& args] (first (reduce #(list (apply %2 %1)) args (reverse fs)))))", "user": "5c1840eae4b01240ff5671eb"}, {"problem": 58, "code": "(fn [& f]\n  (fn [& a]\n    (first (reduce #(list (apply %2 %1)) a (reverse f)))\n    ))", "user": "5c1aadcde4b01240ff567209"}, {"problem": 58, "code": "(fn [& fns] (reduce (fn [f g] (fn [& x] (f (apply g x)))) fns))", "user": "5b0bd9cfe4b0cc2b61a3bdd9"}, {"problem": 58, "code": "#(fn [& a] (let [fs (reverse %&)] (reduce (fn [c x] (x c)) (apply (first fs) a) (rest fs))))", "user": "594d4c57e4b07ddc2dafae87"}, {"problem": 58, "code": "(fn [& fs]\n  (reduce\n   \t(fn [f g]\n      #(f (apply g %&)))\n   fs))", "user": "5c2649c8e4b07e362c2305bf"}, {"problem": 58, "code": "(fn my-compose\n  [& fs]\n  (letfn [(compose-2 [f g] (fn [ & xs] (f (apply g xs))))]\n    (reduce compose-2 identity fs)))", "user": "5c222b7de4b07e362c230588"}, {"problem": 58, "code": "(fn [& f]\n  (let [cmp (fn cmp [[x & xs] & h]\n            (if x (cmp xs (apply x h)) (first h)))]\n    (partial cmp (reverse f))))", "user": "5c2836ebe4b07e362c2305d4"}, {"problem": 58, "code": "(fn custom-comp\n  ([f] f)\n  ([f g]\n   (fn [& args] (f (apply g args)))\n    )\n  ([f g & others]\n   (println others)\n   (reduce custom-comp (into [f g] others)))\n  )", "user": "5c20b6abe4b07e362c230576"}, {"problem": 58, "code": "(fn composer [& [f & r]]\n  (if (nil? r)\n    f\n    (fn [& args] (f (apply (apply composer r) args)))\n  )\n)", "user": "5c219c0fe4b07e362c230581"}, {"problem": 58, "code": "(fn c [f & fs]\n  (fn [& args]\n    (if (seq fs)\n      (f (apply (apply c fs) args))\n      (apply (or f identity) args))))", "user": "54df2609e4b024c67c0cf7a9"}, {"problem": 58, "code": "(fn [& fns]\n  (let [rfns (reverse fns)]\n    (fn [& args]\n      (reduce\n       (fn [value current-fn]\n         (current-fn value))\n       (apply (first rfns) args)\n       (rest rfns)))))", "user": "5c15537ae4b01240ff5671bf"}, {"problem": 58, "code": "(fn [& fs]\n  (let [lf (partial apply (last fs))\n        ffs (concat (butlast fs) [lf])]\n    (fn [& args]\n      (let [rf (fn [c f] (f c))]\n        (reduce rf args (reverse ffs))))))", "user": "50eeeadae4b02c17778c91f3"}, {"problem": 58, "code": "(fn my-comp4 [& funcs]\n   (fn [& xs]\n     (reduce (fn [result f] (f result)) (apply (last funcs) xs) (reverse (drop-last funcs)))))", "user": "5c24c654e4b07e362c2305a7"}, {"problem": 58, "code": "(fn  [& fns]\n        (fn [& v]\n      (let [start (apply (first (reverse fns)) v)\n            rvs-fns (reverse fns)]\n        (reduce (fn [acc x] (x acc)) start (rest rvs-fns))))\n)", "user": "5c17467fe4b01240ff5671df"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& args] (reduce (fn [acc f] (f acc)) (if (= 1 (count args))\n                                              ((last fs) (nth args 0))\n                                              (reduce (last fs) args)) (reverse (butlast fs)))))", "user": "57d57f65e4b0bd073c2023b3"}, {"problem": 58, "code": "(fn [& funcs]\n    (let [rfuncs (reverse funcs)]\n      (fn [& args]\n        (reduce #(%2 %) (apply (first rfuncs) args) (rest rfuncs)))))", "user": "5c165d3ee4b01240ff5671d1"}, {"problem": 58, "code": "(fn my-comp \n  [& functions]\n  (fn [& args] \n    (let [fs (reverse functions)]\n      (loop [value (apply (first fs) args) remaining (rest fs)]\n        (if (empty? remaining)\n          value\n          (recur ((first remaining) value) (rest remaining)))))))", "user": "5c3ac091e4b0d62ef62d9f95"}, {"problem": 58, "code": "(fn [& m] (reduce #(fn [& p] (% (apply %2 p))) m))", "user": "5c379636e4b0d62ef62d9f76"}, {"problem": 58, "code": "(fn re-comp\n  ([f1 f2]\n   (fn [& x] (f1 (apply f2 x))))\n  ([f1 f2 & fs]\n   (reduce re-comp (list* f1 f2 fs))))", "user": "59b9e669e4b0a024fb6ae3db"}, {"problem": 58, "code": "(fn [& fs] \n        (fn [& v]\n          (reduce \n              (fn [acc item]\n                    (item acc))\n                        (apply (last fs) v) (rest (reverse fs)))))", "user": "56483f45e4b0284900eef62b"}, {"problem": 58, "code": "(fn [& fs] \n        (fn [& v]\n          (reduce \n              (fn [acc item]\n                    (item acc))\n                        (apply (last fs) v) (rest (reverse fs)))))", "user": "5a64dcabe4b0512ff01cd9a9"}, {"problem": 58, "code": "(fn [& func]\n  (fn [& args]\n    (first\n      (reduce #(vector (apply %2 %1)) args (reverse func)))))", "user": "56f4623ae4b046a417f9205d"}, {"problem": 58, "code": "(fn \n  ([f g] (fn [& x] (f (apply g x))))\n  ([f g h] (fn [& x] (f (g (apply h x)))))\n   )", "user": "5c308385e4b0d62ef62d9f1c"}, {"problem": 58, "code": "(fn [& fs]\n    (let [comp-2 (fn [f1 f2]\n                   (if (nil? f2)\n                     f1\n                     (fn [& args] (f1 (apply f2 args)))))]\n      (loop [in-fs (rest fs) final-fs (first fs)]\n        (if (empty? in-fs)\n          final-fs\n          (recur (rest in-fs) (comp-2 final-fs (first in-fs)))))))", "user": "5920c191e4b09b4ee5954c61"}, {"problem": 58, "code": "(fn [& fs]\n               (fn [& args]\n                 (reduce #(%2 %1)\n                         (apply (last fs) args)\n                         (reverse (butlast fs)))))", "user": "5c3f37fce4b08cd430848e91"}, {"problem": 58, "code": ";(fn comp* [& fns]\n;  (let [[fh & ft] (reverse fns)]\n;    #(reduce (fn [v f] (f v)) (apply fh %&) ft)))\n\n; monadic solution if you will\n;(fn comp*\n; ([] identity)\n; ([f] f)\n; ([f g] #(f (apply g %&)))\n; ([f g & fs] \n;  (reduce comp* (list* f g fs))))\n\n; (->> v fn ... f2 f1)\n;(fn comp* [& fs]\n;  #((reduce (fn [vs f] [(apply f vs)]) %& (reverse fs)) 0))\n\n; composing all the functions as one\n#(reduce (fn [h f] (fn [& args] (h (apply f args)))) identity %&)", "user": "5bea3177e4b0f319e2d7ec81"}, {"problem": 58, "code": "(fn my-comp [& fns]\n  (reduce (fn [x y] #(x (apply y %&))) fns))", "user": "592883f1e4b072a2710fceea"}, {"problem": 58, "code": "(fn [& args]\n  (fn [& xs]\n    (first \n     (reduce #(conj [] (apply %2 %1)) xs (reverse args)))))", "user": "52b52c29e4b0c58976d9ad38"}, {"problem": 58, "code": "(fn myComp\n  ([f] f)\n  ([f1 f2]\n   (fn[& args]\n     (f1 (apply f2 args))))\n  ([f1 f2 & fs]\n   (apply myComp (myComp f1 f2) fs)))", "user": "5c4ab449e4b0f9f7a8770e57"}, {"problem": 58, "code": "(fn comb [& funcs]\n  (fn [& args]\n    (first\n      (reduce #(vector (apply %2 %1)) args (reverse funcs )))))", "user": "5c374db6e4b0d62ef62d9f73"}, {"problem": 58, "code": "(fn my-comp [& functions]\n  (fn [& args]\n    (reduce (fn [val f] (f val)) \n            (apply (last functions) args) \n            (rest (reverse functions)))))", "user": "5c506951e4b0f9f7a8770ec5"}, {"problem": 58, "code": "(fn [& f]\n  (fn [& coll]\n    (first\n     (reduce #(vector (apply %2 %1)) coll (reverse f)))))", "user": "5c45e703e4b0e06e1360a391"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& xs]\n    (first (reduce #(vector (apply %2 %1))\n                   xs\n                   (reverse fs)))))", "user": "5c48757fe4b0e06e1360a3c3"}, {"problem": 58, "code": "(fn function-composition1 [& fs]\n  (fn [& xs]\n    (if (< 1 (count xs))\n     (reduce\n      (fn [res f] (f res))\n      (apply (last fs) xs)\n      (reverse (butlast fs)))\n     (reduce\n       (fn [res f] (f res))\n       (first xs)\n       (reverse fs)))))", "user": "5984e7dee4b021a7a535fe43"}, {"problem": 58, "code": "(fn my-comp\n  ([f] f)\n  ([f1 f2] (fn [& args] (f1 (apply f2 args))))\n  ([f1 f2 f3] (fn [& args] (f1 (f2 (apply f3 args)))))\n  ([f1 f2 f3 f4] (fn [& args] (f1 (f2 (f3 (apply f4 args)))))))", "user": "5c411df3e4b08cd430848ebf"}, {"problem": 58, "code": "(fn [& funcs] (fn [& args] (first (reduce #(list (apply %2 %1)) args (reverse funcs)))))", "user": "5c41db45e4b08cd430848ece"}, {"problem": 58, "code": "(fn [& fs]\n    (fn [& args]\n      (first\n        ((fn f [lst]\n           (if (empty? lst)\n             args\n             [(apply (first lst) (f (rest lst)))]))\n         fs))))", "user": "5c62979fe4b0fca0c162264c"}, {"problem": 58, "code": "(fn func-composition\n  ([] identity)\n  ([f] (fn [coll] (f coll)))\n  ([f g]\n    (fn\n      ([] (f (g)))\n      ([x] (f (g x)))\n      ([x y] (f (g x y)))\n      ([x y & more] (f (apply g x y more)))))\n  ([f g & more-funcs]\n   (reduce func-composition (list* f g more-funcs))))", "user": "5c51d700e4b0fb8c5ffd99d1"}, {"problem": 58, "code": "(fn compose-funcs [& funcs]\n  (fn [& args]\n    (let [[head-func & tail-funcs] (reverse funcs)]\n      (reduce #(%2 %1) (apply head-func args) tail-funcs))))", "user": "5c3f6322e4b08cd430848e97"}, {"problem": 58, "code": "(fn [& fs]\n  (reduce (fn [f g] \n            (fn [& args] (f (apply g args))))\n          identity\n          fs))", "user": "5c58736be4b01df32ab73247"}, {"problem": 58, "code": ";(print ((\n(fn [& fns]\n  (fn [& xs]\n    (let [[f & fs] (reverse fns)]\n      (reduce #(%2 %) (apply f xs) fs))))\n;rest reverse)\n;[1 2 3 4]))", "user": "5c5d2e90e4b01df32ab732af"}, {"problem": 58, "code": "(fn \n ([f g] (fn [x] (f (g x))))\n ([f g h] (fn [& args] (f (g (apply h args))))))", "user": "58b12635e4b0ebc645576cf4"}, {"problem": 58, "code": "(fn ([f g] (fn [& args] (f(apply g args)) ))\n                ([f g h] (fn [& args] (f(g(apply h args)))))\n                )", "user": "5900ad0ce4b0438e51c2d028"}, {"problem": 58, "code": "(fn [& fns]\n  (fn [& xs]\n    (let [fns (reverse fns)\n          result (apply (first fns) xs)]\n      (reduce #(%2 %1)\n             result\n             (rest fns)))))", "user": "51d42f44e4b013d740b70ddb"}, {"problem": 58, "code": "(fn my-comp [& fs]\n  (letfn [(helper [acc f]\n            (fn [& args]\n              (acc (apply f args))))]\n    (reduce helper identity fs)))", "user": "5c6448d6e4b0fca0c1622674"}, {"problem": 58, "code": "(fn [& fs]\n  (reduce #(fn [& args] (% (apply %2 args))) fs))", "user": "5c72ffb6e4b0fca0c16227b2"}, {"problem": 58, "code": "(fn [& xs]\n  (fn [& ys]\n    (reduce #(%2 %1)\n            (apply (last xs) ys) (rest (reverse xs)))))", "user": "5c6d0e51e4b0fca0c1622735"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& args]\n    (reduce\n      (fn [x f]\n        (f x))\n      (apply (last fs) args)\n      (rest (reverse fs)))))", "user": "5c73b8bae4b0fca0c16227ba"}, {"problem": 58, "code": "(fn [& args] (reduce (fn [f g] #(f (apply g %&)) ) args) )", "user": "5b337ff4e4b025bcb146f339"}, {"problem": 58, "code": "(fn fc [& args]\n  (if (empty? args) identity\n      (let [l (last args)\n            r (apply fc (butlast args))]\n        (fn [& x] (r (apply l x))))))", "user": "5b14475be4b0cc2b61a3be5a"}, {"problem": 58, "code": "(fn [& funcs]\n  (reduce (fn [f1 f2] #(f1 (apply f2 %&))) funcs))", "user": "5c723f4be4b0fca0c16227a0"}, {"problem": 58, "code": "(fn [& fns]\n  (reduce (fn [acc curr]\n            (fn [& args]\n              (acc (apply curr args)))) identity fns))", "user": "576a972ce4b0a07e8fc1811a"}, {"problem": 58, "code": "(fn [& xs] (loop [xs xs f (fn [x] x)] (if (seq xs) (recur (rest xs) (fn [& x] (f (apply (first xs) x)))) f)))", "user": "5c7f7889e4b0d597f478cae0"}, {"problem": 58, "code": "(fn [& fs] (reduce (fn [f g] #(f (apply g %&))) fs))", "user": "5c72c2b9e4b0fca0c16227ab"}, {"problem": 58, "code": "(fn my-comp [& fs] (fn [& args] (reduce #(%2 %) (apply (last fs) args) (reverse (drop-last fs)))))", "user": "5c7bc0a5e4b0fca0c1622865"}, {"problem": 58, "code": "(fn comp* [& fs]\n  (fn [& args]\n    (let [fsr (reverse fs)]\n      (let [f (first fsr)\n            xs (rest fsr)\n            f* (fn [agg f**]\n                 (f** agg))]\n        (reduce f* (apply f args) xs)))))", "user": "5be96111e4b0f319e2d7ec70"}, {"problem": 58, "code": "(fn [& funs] (fn [& args] (first (reduce (fn [argus funk] (vector (apply funk argus))) args (reverse funs)\n                                         ))))", "user": "5c7c1d8ee4b0d597f478ca88"}, {"problem": 58, "code": "(fn[& x](fn[& y] \n             (loop[ c (butlast x) r (apply (last x) y)]\n               (if (empty? c)\n                 r\n                 (recur (butlast c) ((last c) r) )\n                 )\n             )))", "user": "5c683fb5e4b0fca0c16226d5"}, {"problem": 58, "code": "(fn [& fns] (fn [& a] (reduce #(%2 %1) (apply (last fns) a) (rest (reverse fns)))))", "user": "5b100648e4b0cc2b61a3be17"}, {"problem": 58, "code": "(fn [& fs] (reduce (fn [f g] #(f (apply g %&))) fs))", "user": "5c2d1f63e4b0d62ef62d9ef0"}, {"problem": 58, "code": "(fn [& args]\n  (fn ([x] (reduce #(%2 %1) x (reverse args))) \n      ([x & xs] (reduce #(%2 %1) (apply (last args) (cons x xs)) (rest (reverse args))))))", "user": "5b72b36ce4b047b03b2036a9"}, {"problem": 58, "code": "(fn [& fs] (reduce (fn [f g] #(f (apply g %&))) fs))", "user": "5c792c34e4b0fca0c1622834"}, {"problem": 58, "code": "(fn [& fs]\n  (reduce (fn [result f]\n            (fn [& args] (result (apply f args))))\n          fs))", "user": "5c995fa4e4b048ec896c5a96"}, {"problem": 58, "code": "(fn [& fns]\n  (reduce (fn [acc f] (fn [& args] (acc (apply f args)))) identity fns))", "user": "5c987160e4b048ec896c5a82"}, {"problem": 58, "code": "(fn mycomp\n  ([] identity)\n  ([f] f)\n  ([f g] (fn [& args]  (f (apply g args))))\n  ([f g & fns]\n   (reduce mycomp f (list* g fns))))", "user": "57f80350e4b0d3187e90090c"}, {"problem": 58, "code": "(fn [& f]\n  (fn [a & b]\n    (loop [fs (reverse f)\n           b b\n           result (if (nil? b) a (cons a b))]\n      (if (empty? fs)\n        result\n        (recur (rest fs)\n               nil\n               (do\n                 (if (nil? b)\n                   ((first fs) result)\n                   (apply (first fs) result))))))))", "user": "5c558070e4b0fb8c5ffd9a1e"}, {"problem": 58, "code": "(fn my-comp\n  [& fn-args]\n  (fn [& args]\n    (first (reduce #(list (apply %2  %1)) args (reverse fn-args)))))", "user": "5c92105ce4b048ec896c59f7"}, {"problem": 58, "code": "(fn [& fs]\n    (fn [& xs] (first (reduce #(list (apply %2 %1)) xs (reverse fs)))))", "user": "5bd0ea60e4b0e9689409ee45"}, {"problem": 58, "code": "(fn [& fns]\n  (fn [& args]\n   (reduce (fn [acc f] (f acc)) (apply (last fns) args) (rest (reverse fns)))))", "user": "5c950334e4b048ec896c5a44"}, {"problem": 58, "code": "(fn [& fs] (reduce (fn [f g] #(f (apply g %&))) fs))", "user": "5245af03e4b08ba239308124"}, {"problem": 58, "code": "(fn [& fns]\n  (let [rfns (reverse fns)]\n    (fn [& args]\n      (reduce #(%2 %1) (apply (first rfns) args) (next rfns))\n    )\n  )\n)", "user": "543bb568e4b032a45b869334"}, {"problem": 58, "code": "(fn [& fns] (reduce (fn [f1 f2] #(f1 (apply f2 %&))) fns))", "user": "5c9419fae4b048ec896c5a2b"}, {"problem": 58, "code": "(fn my-fn [& fs]\n\t(fn [& xs]\n    (first (reduce #(vector (apply %2 %1)) xs (reverse fs)))))", "user": "5c896f46e4b048ec896c5940"}, {"problem": 58, "code": "(fn composition\n  ([f] (fn [x] (f x)))\n  ([f1 f2] (fn [& x] (f1 (apply f2 x))))\n  ([f1 f2 & funcs] (fn [& x] \n                     (let [\n                           rev (reverse (conj funcs f2 f1))\n                           l1 (first rev)\n                           l2 (second rev)\n                           r (drop 2 rev) \n                           ]\n                       ;(println \"l1=\" l1 \"\\nl2=\" l2 \"\\nr=\" r)\n                       ;(println \"llllllllllllll=\" (reverse (conj r (composition l2 l1))))\n                       (apply (apply composition (reverse (conj r (composition l2 l1)))) x)\n                       ;((composition l2 l1) x)\n                       )\n                     ))\n  )", "user": "5c9b848fe4b048ec896c5acf"}, {"problem": 58, "code": "#_(fn\n  [& functions]\n  (loop [functions (conj functions identity)\n         res identity]\n    (if (empty? functions)\n      res\n      (let [leftovers (butlast functions)\n            current-function (last functions)]\n        (recur leftovers \n               (fn [& args] (current-function (apply res args))))))))\n\n#(reduce (fn [f g] (fn [& args] (f (apply g args)))) identity %&)", "user": "5c936567e4b048ec896c5a1b"}, {"problem": 58, "code": "#(reduce\n   (fn\n     [accumulated-function f]\n     (fn [& args] (accumulated-function (apply f args))))\n   identity\n   %&)", "user": "5c936583e4b048ec896c5a1c"}, {"problem": 58, "code": "(fn f [& fs]\n  (fn [& args]\n    (first (reduce #(list (apply %2 %1)) args\n        (reverse fs)\n        ))\n    ))", "user": "5cada3b8e4b026601754b872"}, {"problem": 58, "code": "(fn [& func] (reduce (fn [f g] #(f (apply g %&))) func))", "user": "5cadd6a4e4b026601754b87b"}, {"problem": 58, "code": "(fn [& fns]\n (fn [& xs]\n  (let [fns (reverse fns)]\n   (reduce #(%2 %1)\n    (apply (first fns) xs)\n    (rest fns)))))", "user": "510608ebe4b01150e115ebe3"}, {"problem": 58, "code": "(fn mycomp [& fs]\n  (let [f1 (last fs)\n        fs (rest (reverse fs))]\n    (fn [& xs] (reduce (fn [x f] (f x)) (apply f1 xs) fs))))", "user": "5cab33e7e4b048ec896c5c48"}, {"problem": 58, "code": "(fn comp_ [& funcs]\n           (fn [& args]\n               (first (reduce (fn [value func]\n                               [(apply func value)])\n                           args \n                           (reverse funcs)))))", "user": "5766bab8e4b0a07e8fc180b1"}, {"problem": 58, "code": "(fn \n  [& funcs]\n  (reduce (fn [f1 f2] #(f1 (apply f2 %&) )) funcs))", "user": "5cb71f35e4b026601754b961"}, {"problem": 58, "code": "(fn composer\n  [& funcs]\n  (reduce (fn [f1 f2] #(f1 (apply f2 %&))) funcs)\n  )", "user": "5cbd66e2e4b026601754b9f8"}, {"problem": 58, "code": "(fn[& f] (fn [& q] (let [[f & F](reverse f)] (reduce #(%2 %1) (apply f q) F))))", "user": "5a6dbaf5e4b0512ff01cda63"}, {"problem": 58, "code": "(fn [& fs] \n  (reduce \n   (fn [f g] \n     #(f \n       (apply g %&))) fs))", "user": "5cbeadf2e4b0ccb061962755"}, {"problem": 58, "code": "(fn ([f g] (fn [& x] (f (apply g x))))\n  ([f g h] (fn [& x] (f (g (apply h x))))))", "user": "5b007e46e4b0cc2b61a3bd3c"}, {"problem": 58, "code": "(fn [& more]\n  (reduce #(fn [& x] (%1 (apply %2 x))) identity more))", "user": "5caf9cace4b026601754b89b"}, {"problem": 58, "code": "(fn [& args]\n  (reduce\n     (fn [f g] #(f (apply g %&))   )\n     args\n  )\n)", "user": "5cc7692ce4b0ccb061962837"}, {"problem": 58, "code": "(fn mycomp \n  ([f g] (fn [x] (f (g x))))\n  ([f g h] (fn [x & y] (f (g (reduce h x y)))))\n  )", "user": "56d5c1b0e4b0ea9b8538f7c3"}, {"problem": 58, "code": "(fn mycomp \n  ([]     identity)\n  ([& fs] (fn [& xs] ((apply mycomp (drop-last fs)) (apply (last fs) xs)))))", "user": "4fbe2cfbe4b081705acca30c"}, {"problem": 58, "code": "(fn [& funcs] (reduce (fn [f g] #(f (apply g %&))) funcs))", "user": "5ccb3792e4b0ccb061962882"}, {"problem": 58, "code": "(fn [& funcs]\n  (let [fs (reverse funcs)]\n    (println fs)\n    (fn [& args]\n      (println args)\n      (loop [cur (first fs)\n             remain (rest fs)\n             a args]\n        (if (nil? cur)\n          (first a)\n          (if (= 1 (count args))\n            (recur (first remain) (rest remain) [(cur (first a))])\n            (recur (first remain) (rest remain) [(apply cur a)])\n            )\n          )\n        ))\n    )\n  )", "user": "5ccaed31e4b0ccb061962877"}, {"problem": 58, "code": "(fn my-compose [& funcs]\n  (fn [& args]\n    (first (reduce #(vector (apply %2 %1)) args (reverse funcs)))))", "user": "5ca14eb1e4b048ec896c5b7d"}, {"problem": 58, "code": "(fn [f g & fs]\n    (fn [x & xs]\n      (if (seq fs)\n        (f (g (apply (last fs) x xs)))\n        (f (g x)))))", "user": "5a9bfd57e4b0d174b936c7d0"}, {"problem": 58, "code": "(fn [& fns]\n    (if (empty? fns)\n      identity\n      (fn [& args]\n        (loop [data (apply (last fns) args)\n               remaining (rest (reverse fns))]\n          (if-let [f (first remaining)]\n            (recur\n              (f data)\n              (rest remaining))\n            data)))))", "user": "4f43b992e4b0d7d3c9f3fd2c"}, {"problem": 58, "code": "(fn func\n  ([] identity)\n  ([f] f)\n  ([f g] \n     (fn \n       ([] (f (g)))\n       ([x] (f (g x)))\n       ([x y] (f (g x y)))\n       ([x y z] (f (g x y z)))\n       ([x y z & args] (f (apply g x y z args)))))\n  ([f g & fs]\n     (reduce func (list* f g fs))))", "user": "5cbb0436e4b026601754b9cc"}, {"problem": 58, "code": "(fn [& fns]\n   (fn [& args]\n     (let [[f & fs] (reverse fns)]\n       (reduce\n        (fn [r f] (f r))\n        (apply f args)\n        fs))))", "user": "5cdc34a2e4b05ee0cb31173f"}, {"problem": 58, "code": "(fn comp*\n  ([f] f)\n  ([f g] (fn [& args] (f (apply g args))))\n  ([f g h] (fn [& args] (f (g (apply h args))))))", "user": "59ef6cfae4b0966464fe6a32"}, {"problem": 58, "code": "(fn [& fs] (reduce (fn [f g] #(f (apply g %&))) fs))", "user": "593e01cde4b069cdc2982bb3"}, {"problem": 58, "code": "(fn [& fs]\n    (fn [& xs]\n      (first (reduce (fn [xs' f]\n                       (list (apply f xs')))\n                     xs\n                     (reverse fs)))))", "user": "5cdfe2aee4b0a17bb84e2b04"}, {"problem": 58, "code": "(fn [& fs]\n  (reduce (fn [a f]\n            (fn [& x] (a (apply f x))))\n          (first fs)\n          (rest fs)))", "user": "5ce077e9e4b0a17bb84e2b0c"}, {"problem": 58, "code": "(fn comb [& funcs]\n  (fn [& args]\n    (first\n      (reduce #(vector (apply %2 %1)) args (reverse funcs )))))", "user": "5ca2ca9fe4b048ec896c5b9c"}, {"problem": 58, "code": "(fn [& f]\n  (fn [a & b]\n    (if (empty? b)\n    (reduce (fn [result function]\n              (function result)\n              ) a (reverse f))\n    (reduce (fn [result function]\n              (function result)\n              ) (apply (last f) a b) (rest (reverse f))))))", "user": "5ccc2a03e4b0ccb06196288f"}, {"problem": 58, "code": ";(fn [& body]\n;  (fn [& params]\n;\t(let [execs (reverse body)\n;          partialz (fn[a xs] ((reduce #(partial %1 %2) a xs)))]\n;    \t(loop [fs execs\n;               res params]\n;          (if (= 1 (count fs)) \n;            (partialz (first fs) res)\n;            (recur (rest fs) [(partialz (first fs) res)])\n;            )\n;        )\n;    )  \n;  )\n;)\n\n\n; NEED TO REMEMBER THAT ALL FUNCTION AFTER THE FIRST WILL BE 1-arity function\n\n(fn [& body]\n (let [rbody (reverse body)]\n   (fn [& params]\n     (reduce #(%2 %1) (apply (first rbody) params) (rest rbody))  \n   )\n )\n)", "user": "5ce41d1be4b0a17bb84e2b50"}, {"problem": 58, "code": "(fn [& funcs]\n  (fn [& args]\n    (first (reduce #(list (apply %2 %1)) args (reverse funcs))))\n  )", "user": "5cdbb1b2e4b05ee0cb311732"}, {"problem": 58, "code": "(fn [& funcs]\n (fn [& args]\n   (first (reduce #(list (apply %2 %1)) args (reverse funcs))))\n )", "user": "5ce3bcd6e4b0a17bb84e2b43"}, {"problem": 58, "code": "(fn [& fs]\n  (reduce (fn [f g]\n            (fn [& data] (f (apply g data)) )) fs))", "user": "5cd4e1b2e4b0ccb061962927"}, {"problem": 58, "code": "(fn comb [& funcs]\n  (fn [& args]\n    (first\n(reduce #(vector (apply %2 %1)) args (reverse funcs )))))", "user": "53ef235de4b0d648e757f4d4"}, {"problem": 58, "code": "(fn [& fns] (fn [& xs] (first (reduce #(list (apply %2 %1)) xs (reverse fns)))))", "user": "5ce56455e4b0a17bb84e2b71"}, {"problem": 58, "code": "(fn mycomp \n  [& fs]\n  (let [r-fs (reverse fs)\n        f (first r-fs)]\n     (fn [& args]\n          (loop [rem-fs (rest r-fs)\n                 new-v (apply f args)]\n            (if (empty? rem-fs)\n              new-v\n              (recur (rest rem-fs)\n                     ((first rem-fs) new-v)))))))", "user": "5ce6f93be4b0a17bb84e2b99"}, {"problem": 58, "code": "(fn\n    [& ops]\n    (fn\n      [& args]\n      (let \n        [[x] (reduce (fn [r op] [(apply op r)]) args (reverse ops))]\n        x)))", "user": "5ce62d8ee4b0a17bb84e2b83"}, {"problem": 58, "code": "(fn comp' [f & fs]\n    (if (empty? fs)\n     (fn [& xs] (apply f xs))\n     (fn [& xs]\n       (let [fs' (apply comp' fs)\n             xs' (list (apply fs' xs))]\n          (apply f xs')))))", "user": "5ce05561e4b0a17bb84e2b08"}, {"problem": 58, "code": "(fn [& fns] (fn [& args] (first (reduce (fn [a v] (list (apply v a))) args (reverse fns)))))", "user": "5a5894d9e4b05d388ecb6c81"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& args]\n    (first (reduce #(list (apply %2 %1)) args (reverse fs)))))", "user": "5cee521ce4b0aaa82f1129dd"}, {"problem": 58, "code": "(fn mcomp [& rst]\n    (fn [& args]\n      (first (reduce (fn [a f] [(apply f a)]) args (reverse rst)))))", "user": "5c547cf0e4b0fb8c5ffd9a0b"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& args]\n  \t(first (reduce #(vector (apply %2 %1)) args (reverse fs)))\n  )\n)", "user": "5cfd5a93e4b0cc9c91588168"}, {"problem": 58, "code": "(fn [& fs]\n    (reduce (fn [f g] (fn\n                        ([x] (f (g x)))\n                        ([x & xs] (f (apply g x xs)))\n                        ))\n            fs))", "user": "5cd4c3dae4b0ccb061962925"}, {"problem": 58, "code": "(fn f [& fs]\n  (cond \n    (empty? (rest fs)) (fn [& xs] (apply (first fs) xs))\n    :else (fn [& x] ((first fs) (apply (apply f (rest fs)) x)))))", "user": "5a2b09ace4b09cafd31c7f42"}, {"problem": 58, "code": "#(reduce (fn [f g] (fn [& args] (f (apply g args)))) %&)", "user": "5cebafbbe4b0a17bb84e2be6"}, {"problem": 58, "code": "(fn c [& fs] \n  (fn [& x] \n    (reduce #(%2 %) (apply (last fs) x) (reverse (butlast fs)))))", "user": "51dd5d6fe4b0c33a4e1da406"}, {"problem": 58, "code": ";(fn compose\n;  [& [f & fs]]\n;  (if\n;    (seq fs)\n;\t#(f (apply (apply compose fs) %&))\n;    f))\n;\n; or:\n\n(fn compose\n  [& fs]\n  (fn\n    [& xs]\n    (first (reduce #(vector (apply %2 %1))\n            xs\n            (reverse fs)))))", "user": "5cdc17d0e4b05ee0cb31173c"}, {"problem": 58, "code": "(fn [& funcs]\n      (fn [& args]\n        (loop [rfuncs (reverse funcs) cargs args]\n        (if (empty? rfuncs)\n          (first cargs)\n          (recur (rest rfuncs) (list (apply (first rfuncs) cargs)))\n          ))))", "user": "5bf9d9b7e4b0bdcf453d15c4"}, {"problem": 58, "code": "(fn [& fs] (reduce (fn [f g] #(f (apply g %&))) fs))", "user": "5d01fb3ce4b0cc9c915881b5"}, {"problem": 58, "code": "(fn comb [& funcs]\n  (fn [& args]\n    (first\n      (reduce #(vector (apply %2 %1)) args (reverse funcs )))))", "user": "5baaae06e4b0a20761a23464"}, {"problem": 58, "code": "(fn [& fs]\n  (let [[f & nfs] (reverse fs)]\n    (fn [& args]\n      (reduce (fn [r xf] (xf r))\n              (apply f args)\n              nfs))))", "user": "54236ce1e4b01498b1a71ad1"}, {"problem": 58, "code": "(fn  \n ([a b]\n  #(-> % b a))\n  ([a b c] \n  (fn [& args]\n    (-> (reduce c args) b a))))", "user": "5ca03402e4b048ec896c5b68"}, {"problem": 58, "code": "(fn f [ & fs ]\r\n  (fn\r\n    ([x] (reduce #(%2 %1) x (reverse fs)))\r\n    ([ a & rest ] ((apply f (butlast fs)) (apply (last fs) (cons a rest))))))", "user": "5ccb0bbee4b0ccb06196287c"}, {"problem": 58, "code": "(fn\n  [& ftns]\n  (fn [& coll]\n    (let [rev-ftns (reverse ftns)]\n      (reduce\n     (fn [acc f]\n       (f acc))\n     (apply (first rev-ftns) coll)\n     (rest rev-ftns)))))", "user": "5cf48f04e4b087f62be35a86"}, {"problem": 58, "code": "(fn [& funs] \n         (fn [& args] \n           (first(loop [fns (reverse funs) result args]\n                  (if (nil? (first fns) )result  \n                    (recur (rest fns) [ (apply (first fns) result)]))))))", "user": "5d0cf1c8e4b0cc9c91588246"}, {"problem": 58, "code": "(fn comp' \n  ([f] f)\n  ([f & gs] (fn [& xs] (f (apply (apply comp' gs) xs))))\n)", "user": "5a08f951e4b01bb0ae8afdfd"}, {"problem": 58, "code": "(fn ([f g] (fn [& arg] (f (g (seq (apply map identity arg))))))\n                          ([f g z] (fn [& arg] (f (g (nth (apply map z (partition-all 1 arg)) 0))))\n                         )\n                        )", "user": "5cf72682e4b0b71b1d808a68"}, {"problem": 58, "code": "(fn qcomp\n  ([f g]\n   (fn\n     ([] (f (g)))\n     ([x] (f (g x)))\n     ([x & args] (f (apply g x args)))))\n  ([f g & fs]\n   (reduce qcomp (list* f g fs)))\n  )", "user": "5c5e3af7e4b01df32ab732c6"}, {"problem": 58, "code": "(fn [& fns]\n   (fn [& xs]\n     (first (reduce #(vector (apply %2 %1))\n              xs\n              (reverse fns)))))", "user": "5a03d246e4b01bb0ae8afd8c"}, {"problem": 58, "code": "(fn [& cfs]\n  (let [cfs (reverse cfs)]\n    (fn [& args]\n      (if (not (seq cfs))\n        (apply identity args)\n        (loop [fs (rest cfs) v (apply (first cfs) args)]\n          (if (not (seq fs))\n            v\n            (recur (rest fs) ((first fs) v))))))))", "user": "5357b241e4b04ce2eb3ed282"}, {"problem": 58, "code": "(fn funky\n  [f & fs]\n  (if (empty? fs)\n    f\n    (fn [& args] (f (apply (apply funky fs) args)))))", "user": "5d1b2b7de4b02ea6f0fb697a"}, {"problem": 58, "code": "(fn\n  [& fns]\n  (fn [& args]\n    (let [[first & rest] (reverse fns)]\n      (reduce (fn [result f]\n                (f result))\n              (apply first args)\n              rest))))", "user": "570c8ac3e4b0b0fb43fd06ca"}, {"problem": 58, "code": "(fn my-comp [& fns]\n  (fn [& xs] (first (reduce #(vector (apply %2 %1)) xs (reverse fns)))))", "user": "5cdc08a2e4b05ee0cb31173a"}, {"problem": 58, "code": "(fn\n  [& funcs]\n  (fn\n    [& params]\n    (reduce \n      (fn [acc f] (f acc))\n      (apply (last funcs) params) \n      (reverse (butlast funcs)))))", "user": "5d0e311de4b0cc9c91588251"}, {"problem": 58, "code": "(fn [& fs]\n  (let [fr (reverse fs)]\n    (fn [& args]\n      (loop [prev (apply (first fr) args) fr (next fr)]\n        (if (empty? fr)\n          prev\n          (recur ((first fr) prev) (next fr)))))))", "user": "5d1bbef0e4b02ea6f0fb6984"}, {"problem": 58, "code": "(fn [& fns]\n  (fn [& args]\n    (let [rfns (reverse fns)]\n      (first (reduce (fn [arg f]\n                (list (apply f arg)))\n                args\n                rfns)))))", "user": "5d231255e4b02ea6f0fb69fe"}, {"problem": 58, "code": "(fn my-comp [& fs]\n    (fn\n      ([args]\n       (loop [fs (reverse fs)\n              args args]\n         (if-not (seq fs)\n           args\n           (recur (rest fs) ((first fs) args)))))\n      ([arg & args]\n       (loop [gs (reverse fs)\n              args (cons arg args)]\n         \n         (if-not (seq gs)\n           args\n           (recur (rest gs) (if (= (count gs) (count fs)) (apply (first gs) args) ((first gs) args)))))))\n    )", "user": "5d236215e4b02ea6f0fb6a09"}, {"problem": 58, "code": "(fn [& f]\n\t(fn [& x]\n\t\t(reduce #(%2 %1) (apply (last f) x) (rest (reverse f)))\n\t)\n)", "user": "5d2201b8e4b02ea6f0fb69ed"}, {"problem": 58, "code": "(fn mycomp [& flist] (fn [& args] \n     (loop [flist (reverse flist)\n            x args]\n       (if (empty? flist)\n         (apply identity x)\n         (recur (rest flist) (list (apply (first flist) x)))))))", "user": "5d02fe44e4b0cc9c915881c0"}, {"problem": 58, "code": "(fn my-comp \n  ([f g]\n  (fn \n    ([x] (f(g x))\n       )\n    ([x y z & args] (f(apply g x y z args)))\n    ))\n  ([f g h]\n   (fn \n    ([x] (f(g(h x)))\n       )\n     ([x y] (f(g(h x y)))\n       )\n    ([x y z & args] (f(g(apply h x y z args))))\n    )\n   )\n  )", "user": "5d270111e4b092dab7f59c62"}, {"problem": 58, "code": "(fn my-comp [& fs]\n  (fn [& args]\n    (first (reduce (fn [args f] [(apply f args)])\n                   args\n                   (reverse fs)))))", "user": "5d272077e4b092dab7f59c64"}, {"problem": 58, "code": "(fn\n  [& fns]\n  (fn [& args]\n    (let [init (apply (last fns) args)\n          rest-of-fns (reverse (drop-last fns))]\n      (reduce #(%2 %1) init rest-of-fns))))", "user": "5d1c14cde4b02ea6f0fb698a"}, {"problem": 58, "code": "(fn my-comp [& funcs]\n  (fn [& args]\n    (reduce #(%2 %1) (apply (last funcs) args) (reverse (drop-last funcs)))))", "user": "5d247902e4b02ea6f0fb6a24"}, {"problem": 58, "code": "(fn [& fs]\n  (reduce (fn [f g] #(f (apply g %&))) fs))", "user": "5c3796b3e4b0d62ef62d9f77"}, {"problem": 58, "code": "(fn f [& fns]\n  (fn [& args]\n    (let [init (apply (first (reverse fns)) args)]\n      (reduce (fn [x f] (f x)) init (rest (reverse fns))))))", "user": "5012da69e4b0c8732600222d"}, {"problem": 58, "code": "(fn my-comp [& fns]\n  (reduce (fn [g f]\n           (fn [& args]\n             (g (apply f args))))\n          identity\n          fns))", "user": "5d1be50ce4b02ea6f0fb6986"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& args]\n    (->> fs\n         (reverse)\n         (reduce (fn [acc f] (list (apply f acc))) args)\n         (first))))", "user": "5d27da09e4b092dab7f59c75"}, {"problem": 58, "code": "#(fn [& a]\n   (let [single-arg? (fn [e1 e2] (if (= (count a) 1) e1 e2))]\n     (reduce\n      (fn [acc f] (f acc))\n      (single-arg? (first a) (apply (last %&) a) )\n      (single-arg? (reverse %&) (rest (reverse %&))))))", "user": "576e607ae4b0979f89651579"}, {"problem": 58, "code": "(fn [& functions] (fn [& arguments] (loop [fns functions args arguments] (if (empty? fns) (first args) (recur (butlast fns) (list (apply (last fns) args)))))))", "user": "5d3ae729e4b01671435dbd5d"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& xs]\n      (let [[f0 & frest] (reverse fs)]\n        (reduce #(%2 %1) (apply f0 xs) frest))))", "user": "5d2e5065e4b01671435dbcae"}, {"problem": 58, "code": "(fn my-comp [& xs]\n  (fn [& a]\n    (loop [r (apply (last xs) a) [f & ls] (rest (reverse xs))]\n      (if (nil? f)\n        r\n        (recur (f r) ls)))))", "user": "598601f9e4b021a7a535fe79"}, {"problem": 58, "code": "(fn [& fns]\n  (reduce (fn [f g] #(f (apply g %&))) fns))", "user": "5cf895efe4b0b71b1d808a85"}, {"problem": 58, "code": "(fn [& funs]\n  (fn [& args]\n    (loop [funs (reverse funs) args args]\n      (if-let [f (first funs)]\n        (recur (rest funs) [(apply f args)])\n        (first args)))))", "user": "5d45749be4b07c84aa5ae6a2"}, {"problem": 58, "code": "(fn [& fs]\n    (reduce\n      (fn [f g]\n        #(f (apply g %&)))\n      fs))", "user": "4e628ab2535d8ccf87e9fe61"}, {"problem": 58, "code": "(fn [& funcs]\n  (reduce (fn [f1 f2] #(f1 (apply f2 %&))) funcs))", "user": "5d47f4dbe4b07c84aa5ae6b5"}, {"problem": 58, "code": "(fn [& funcs]\n  (fn [& args]\n    (first (reduce (fn [a f] (vector (apply f a))) args (reverse funcs)))))", "user": "5d46fbc6e4b07c84aa5ae6af"}, {"problem": 58, "code": "(fn [& funcs]\n   (fn [& args]\n    (first\n     (reduce\n      (fn [r f] (vector (apply f r)))\n       args\n       (reverse funcs)))))", "user": "5ccf99fbe4b0ccb0619628c8"}, {"problem": 58, "code": "(fn [& fns]\n    (fn [& args]\n      (let [fns-ordenadas (reverse fns)\n            inicial (apply (first fns-ordenadas) args)\n            fns-siguientes (rest fns-ordenadas)]\n        (reduce (fn [resultado-actual siguiente-fn]\n                  (siguiente-fn resultado-actual))\n                 inicial\n                 fns-siguientes))))", "user": "5d0153f9e4b0cc9c915881aa"}, {"problem": 58, "code": "(fn [& fns]\n        (let [rfns (reverse fns)\n              f (first rfns)\n              fs (rest rfns)]\n          (fn [& args]\n            (reduce #(%2 %) (apply f args) fs))))", "user": "5d29c06be4b01671435dbc6b"}, {"problem": 58, "code": "(fn [& Funcs]\n      (fn [& Args]\n        (loop [ Ret Args First (first (reverse Funcs)) Rest (rest (reverse Funcs)) ]\n          (if (nil? First)\n            (first Ret)\n            (recur [(apply First Ret)] (first Rest) (rest Rest))\n          )\n        )\n      )\n    )", "user": "5d4a6c6ce4b0776584bd6f22"}, {"problem": 58, "code": "(fn [& fns]\n  (reduce (fn [f g]\n            #(f (apply g %&))) fns))", "user": "54b42ea4e4b05787c3b1638b"}, {"problem": 58, "code": "(fn\n    ([f g] (fn [a & o] (f (apply g a o))))\n    ([f g h] (fn [a & o] (f (g (apply h a o))))))", "user": "5bb25684e4b0a20761a2350d"}, {"problem": 58, "code": "(fn my-comp [& fn-list]\n  (cond (empty? fn-list) my-comp\n        (empty? (rest fn-list)) (fn [& args]\n                                 (apply (first fn-list)\n                                        args))\n        :else (fn [& args]\n                ((first fn-list)\n                 (apply (apply my-comp (rest fn-list)) args)))))", "user": "5d48e6d3e4b0776584bd6f15"}, {"problem": 58, "code": "(fn cmp\n  [& fs]\n  (fn [& args]\n    (let [[f & fs] (reverse fs)]\n      (reduce #(%2 %) (apply f args) fs))))", "user": "5d0bb4fae4b0cc9c91588237"}, {"problem": 58, "code": "(fn\n    [& fns]\n    (reduce (fn [f g] #(f (apply g %&)))\n            identity\n            fns))", "user": "5d52ea90e4b0776584bd6f6c"}, {"problem": 58, "code": "(fn [& funcs]\n    (fn [& args]\n      (loop [rfns (rest (reverse funcs))\n             outp (apply (last funcs) args)]\n        (if (empty? rfns)\n          outp\n          (recur (rest rfns) ((first rfns) outp))\n          ))))", "user": "5d52bf29e4b0776584bd6f69"}, {"problem": 58, "code": "(fn [& fs] \n  (reduce \n    (fn [acc f] (fn [& vals] (f (apply acc vals)))) \n    (reverse fs)))", "user": "5d4f21f3e4b0776584bd6f4e"}, {"problem": 58, "code": "(fn [& funcs]\n   (reduce (fn [f g] #(f (apply g %&)))\n           funcs))", "user": "5d4b2155e4b0776584bd6f28"}, {"problem": 58, "code": "(fn my-comp\n  [& fs]\n  (let [fs (reverse fs)]\n                                        ; return a function which takes variable args\n    (fn [& fargs]\n      (reduce (fn [acc f]\n                                        ;(print acc)\n                                        ;(print f)\n                                        ;(print (f acc))\n                (f acc))\n              (apply (first fs) fargs) ; note: fargs is list of var args\n              (rest fs)))))", "user": "5d53a59ae4b0776584bd6f72"}, {"problem": 58, "code": "(fn compose [& fns]\n  (fn [ & args ]\n    (let [funcs (reverse fns) fstfn (first funcs)] \n      (reduce (fn [ac f]\n              (f ac)\n              ) (apply fstfn  args) (rest funcs)))))", "user": "5d5eb086e4b0c9e5857d4ff7"}, {"problem": 58, "code": "(fn \n  ([f1 f2]\n   (fn [& args]\n     (f1 (apply f2 args))))\n  ([f1 f2 f3]\n   (fn [& args]\n     (f1 (f2 (apply f3 args))))))", "user": "51e3a549e4b0c611d6113e47"}, {"problem": 58, "code": "(fn [& funcs]\n  (fn [& args] (first (reduce #(list (apply %2 %)) args (reverse funcs)))))", "user": "5be79b5be4b0f319e2d7ec5a"}, {"problem": 58, "code": "(fn [& funcs] (fn [& args] (first (reduce #(vector (apply %2 %)) args (reverse funcs)))))", "user": "5d6633bde4b0db5d338d15e2"}, {"problem": 58, "code": "(fn [& fs] (reduce (fn [f g] #(f (apply g %&))) fs))", "user": "5d67c955e4b0db5d338d15f7"}, {"problem": 58, "code": "(fn [& x]\n  (fn [& y]\n    (reduce #(%2 %1)\n            (apply (last x) y)  \n            (rest (reverse x))  \n            )))", "user": "5c0eb93ce4b01240ff567146"}, {"problem": 58, "code": "(fn [& fns]\n  (partial (fn g [fns & args]\n             (if (empty? fns)\n               (first args)\n               (let [res (apply (first fns) args)]\n                  (g (rest fns) res))))\n                  (reverse fns)))", "user": "5d672bd7e4b0db5d338d15f1"}, {"problem": 58, "code": "(fn [& funs] (fn [& args] (apply identity (reduce (fn [acc fun] [(apply fun acc)]) args (reverse funs)))))", "user": "5d6d2172e4b04d129b00f2b9"}, {"problem": 58, "code": "(fn [& fs] (reduce (fn [f g] (fn [& x] (f (apply g x)))) fs))", "user": "5d5ef0bce4b0c9e5857d4ffb"}, {"problem": 58, "code": "(fn [& fs] \n  (reduce \n   (fn [f g &] \n     #(f (apply g %&)\n     )\n   )\n  fs)\n)", "user": "5cbe5fdfe4b0ccb061962750"}, {"problem": 58, "code": "(fn compose [f g & args]\n  ;; recur through the list and apply right to left\n  (println \"\\n[TRACE]COMPOSE\")\n\n  (cond (= (count args) 0) (fn [xs] (f (g xs)))\n        (= (count args) 1) (fn [& xs]\n                             (let [h (first args)]\n                             (do\n                               ;; (println f)\n                               ;; (println g)\n                               ;; (println h)\n                               ;; (println xs)\n                               ;; (println (reduce h xs))\n                             (f (g (reduce (first args) xs))))\n                             ))\n        (= (count args) 2)\n        (let [f' (first args)\n              g' (second args)]\n          (fn [xs] (f (g (f' (g' xs))))))\n        (> (count args) 2)\n        (f (g (compose args))))\n  )", "user": "5d631376e4b0c9e5857d5023"}, {"problem": 58, "code": "(fn cmp\n  ([] identity)\n  ([f] f)\n  ([f g] \n     (fn \n       ([] (f (g)))\n       ([x] (f (g x)))\n       ([x y] (f (g x y)))\n       ([x y z] (f (g x y z)))\n       ([x y z & args] (f (apply g x y z args)))))\n  ([f g & fs]\n     (reduce cmp (list* f g fs))))", "user": "5d64ecb2e4b0c9e5857d5036"}, {"problem": 58, "code": "(fn cmp\n  [& fns]\n  (fn composed\n    [& args]\n    (reduce\n      #(%2 %1)\n      (apply (last fns) args)\n      (reverse (butlast fns)))))", "user": "5d609ddde4b0c9e5857d5008"}, {"problem": 58, "code": "(fn funccompose\n  [& fns]\n  (fn [& args]\n    (loop [res args funcs fns]\n      (if (= (count funcs) 0)\n        (first res)\n        (recur (list (apply (last funcs) res)) (drop-last funcs))\n        ))\n    )\n  )", "user": "5d5950c1e4b02ba5928a6827"}, {"problem": 58, "code": "(fn combs [& funcs]\n  (fn applyer [& args]\n    (first\n     (reduce #(vector (apply %2 %1)) args (reverse funcs)))))", "user": "5ccc9078e4b0ccb061962899"}, {"problem": 58, "code": "(fn my-comp[& funcs]\n  (let [funcs (reverse funcs)]\n    (fn [& input]\n      (let [first-res (apply (first funcs) input)]\n        (loop [pending (rest funcs) res first-res]\n          (if (empty? pending) res (recur (rest pending) ((first pending) res))))))))", "user": "5d5e0259e4b0c9e5857d4fef"}, {"problem": 58, "code": "(fn [& fns]\n    (fn [& args]\n      (reduce (fn [args f] (f args)) (apply (last fns) args) (rest (reverse fns)))))", "user": "5beda647e4b0a6d31fed2122"}, {"problem": 58, "code": "(fn my-comp [& funs]\n  (fn [& args]\n    (first (reduce (fn [args fun]\n                     (list (apply fun args)))\n                   args\n                   (reverse funs)))))", "user": "5d6f063de4b04d129b00f2d1"}, {"problem": 58, "code": "(fn [& a]\n  (fn [& b]\n    (loop [f (reverse a) result b]\n      (if (= (count f) 0)\n        (first result)\n        (recur (next f) (conj '() (apply (first f) result)))))))", "user": "5d5c6675e4b09db18d4482ec"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& x]\n    (loop [fsr (reverse fs)\n           acc (if (coll? (first x)) (first x) x)]\n      (if (empty? fsr) (if (coll? (first x)) acc (first acc))\n                       (recur (rest fsr)\n                              (if (coll? (first x)) ((first fsr) acc)\n                                                    [(apply (first fsr) acc)]))))))", "user": "5d764e52e4b02e6b30c93524"}, {"problem": 58, "code": "(fn compi [& seq]\n      (fn [& args]\n            (loop [[curr-f & rest-f] (reverse seq) curr-args args]\n                  (println curr-f curr-args)\n                  (if (nil? curr-f)\n                        (first curr-args)\n                        (let [vv (apply curr-f curr-args)]\n                              (println \"vv: \" vv)\n                              (recur rest-f [vv])))\n\n                  )\n            ))", "user": "5d809b4fe4b0915913b1d36c"}, {"problem": 58, "code": "(fn compose\n  [& fns]\n  (reduce (fn [f g] #(f (apply g %&))) fns))", "user": "5d7b90ede4b02e6b30c93552"}, {"problem": 58, "code": "(fn f0 [g & gs]\n  (fn [& args]\n    (if gs\n    \t(g (apply (apply f0 gs) args))\n        (apply g args))))", "user": "5d7eaf5fe4b0492f5d910fc3"}, {"problem": 58, "code": "(fn compos [& args]\n  (letfn [(my-rec \n        [x args2]\n        (println (first args2))\n          (if (not (nil? (second args2)))\n            (if (= + (first args2))\n              (apply (first args2) (my-rec x (rest args2)))\n              ((first args2) (my-rec x (rest args2))))\n            (if (= + (first args2))\n              (apply (first args2) x)\n              (if (= take (first args2))\n                ((first args2) (first x) (second x))\n                ((first args2) x)))))]\n    (fn rec [x & args3] \n      (println (cons x args3))\n      (my-rec (flatten (cons x args3)) args))))", "user": "5d7d17ece4b02e6b30c93558"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& x]\n    (loop [to-run (butlast fs)\n          ret (apply (last fs) x)]\n      (if (empty? to-run)\n        ret\n        (recur (butlast to-run) ((last to-run) ret))))))", "user": "5d24e49be4b02ea6f0fb6a2a"}, {"problem": 58, "code": "(fn [& x]\n  (fn [& y]\n    (reduce #(%2 %1)\n            (apply (last x) y) (rest (reverse x)))))\n\n\n;fn [& x]         ; a collection of functions to call--why need to use &??\n\n  ;(fn [& y]       ; a collection of values to use with the functions\n\n   ; (reduce\n      ;(fn [last-function rest-of-functions]\n\n       ; rest-of-functions last-function)\n\n      ;(apply (last x) y)  ; The last function from the collection of functions\n\n      ;(rest (reverse x))  ; The rest of the collections of functions in reverse order\n;\n     ; )))", "user": "5ce5b43be4b0a17bb84e2b7a"}, {"problem": 58, "code": "(fn custom-comp [& fns]\n  (let [fns (reverse fns)]\n    (fn [& args]\n      (reduce\n        (fn [acc curr]\n          (println curr acc)\n          (curr acc))\n        (apply (first fns) args)\n        (rest fns)))))", "user": "5d0eed51e4b0cc9c91588262"}, {"problem": 58, "code": "(fn [& fs]\n  (reduce (fn [acc f]\n            (fn [& args] (acc (apply f args)))) \n          identity\n          fs))", "user": "5d81b40ce4b0915913b1d379"}, {"problem": 58, "code": "(fn comp' [f g & fs]\n  (if (empty? fs)\n    #(f (apply g %&))\n    (comp' f (apply comp' g fs))))", "user": "5d81eba4e4b0915913b1d37b"}, {"problem": 58, "code": "(fn [& coll]\n  (fn [& args]\n    (let [funcs (reverse coll)]\n      (reduce #(%2 %1) (apply (first funcs) args) (rest funcs)))))", "user": "5d9c1226e4b0d3f9b434ad51"}, {"problem": 58, "code": "(fn [& uptownFuncs]\n     (fn [& args]\n       (reduce #(%2 %1) (apply (last uptownFuncs) args) (rest (reverse uptownFuncs)))))", "user": "5d887d27e4b0915913b1d3a8"}, {"problem": 58, "code": "(fn [& fl]  \n(fn [& a] \n  (reduce (fn [aa f](f aa)) (apply (last fl) a) (rest (reverse fl)))))", "user": "5951190be4b066ee0a44aea4"}, {"problem": 58, "code": "(fn [& fs]\n  (reduce\n   (fn [acc f] (fn [& xs] (acc (apply f xs))))\n   identity\n   fs))", "user": "5d97b602e4b0d3f9b434ad3a"}, {"problem": 58, "code": "(fn func-compose [& funcs]\n  #(loop [i 1\n         f (apply (last funcs) %&)]\n     (println \"log: \" %& i f)\n    (if (>= i (count funcs))\n      f\n      (recur (inc i) ((nth funcs (- (count funcs) i 1)) f)))))", "user": "5da6cb60e4b000c986472c10"}, {"problem": 58, "code": "(fn [& fns]\n    (let\n      [ last-fn (last fns)\n        other-fns (reverse (drop-last fns))\n      ]\n      (fn [ & args ]\n        (reduce #(%2 %1) (apply last-fn args) other-fns))))", "user": "5d123457e4b02c15ef021996"}, {"problem": 58, "code": "(fn [& funs]\n  (reduce (fn [co fun]\n            (fn [& args]\n              (apply fun (list (apply co args))))) (reverse funs)))", "user": "5d931a58e4b0d3f9b434ad10"}, {"problem": 58, "code": "(fn [& fns]\n\t(fn [& vals]\n\t (first (reduce (fn [res func] (list (apply func res))) vals (reverse fns)))))", "user": "5c87c79be4b048ec896c591b"}, {"problem": 58, "code": "(fn\n  [& fs]\n  (reduce (fn [result f]\n            (fn [& args]\n              (result (apply f args))))\n          identity\n          fs))", "user": "5d96edeae4b0d3f9b434ad35"}, {"problem": 58, "code": "(fn [& fs] \n  (fn [& args] \n    (reduce #(%2 %1)\n            (apply (last fs) args)\n            (reverse (butlast fs)))))", "user": "5da8fa72e4b000c986472c2d"}, {"problem": 58, "code": "(fn [& fs] (reduce (fn [f g] #(f (apply g %&))) fs))", "user": "5da7176ae4b000c986472c13"}, {"problem": 58, "code": "(fn [& f]\n\t(fn [& args]\n\t\t(let [rf (reverse f)]\n\t\t\t(reduce (fn [acc x] (x acc)) (apply (first rf) args) (rest rf)))))", "user": "562d869be4b0a45d2ff8301f"}, {"problem": 58, "code": "(fn my-comp [& fns]\n  (fn [& args]\n    (reduce (fn [acc f]\n              (f acc))\n            (apply (last fns) args)\n            (rest (reverse fns)))))", "user": "5d7aa22ee4b02e6b30c9354e"}, {"problem": 58, "code": "(fn my-comp\n  ([] identity)\n  ([f] f)\n  ([f & fs]\n   (fn [& args]\n     (f (apply (apply my-comp fs) args)))))", "user": "5db4ba2fe4b010eb3c36cd2b"}, {"problem": 58, "code": "(fn my-compose [& fns]\n  (fn composed [& args]\n    (reduce (fn [fx g] (g fx))\n            (apply (last fns) args)\n            (reverse (butlast fns)))))", "user": "5db0d470e4b0f8c104ccfc9e"}, {"problem": 58, "code": "(fn [& fs]\n    (let [[f & fs] (reverse fs)]\n      (fn [& args]\n       (reduce (fn [accu cur] (cur accu)) (apply f args) fs))))", "user": "5d883119e4b0915913b1d3a6"}, {"problem": 58, "code": "(fn [& functions]\n  (fn [& args]\n    (first\n     (reduce (fn [result function]\n               (list (apply function result)))\n             args\n             \n             (reverse functions)))))", "user": "5daeb6bce4b0f8c104ccfc8b"}, {"problem": 58, "code": "(fn [& f] \n  (fn [& args]\n    (reduce #(%2 %1) (apply (last f) args) (rest (reverse f)))\n  )\n)", "user": "5da975b9e4b000c986472c32"}, {"problem": 58, "code": "(fn [& fs] \n  (fn [& args] \n    (reduce #(%2 %1) \n            (apply (first (reverse fs)) args) \n            (rest (reverse fs)))))", "user": "5d1231dde4b02c15ef021995"}, {"problem": 58, "code": "(fn my-comp\n  ([] identity)\n  ([f] f)\n  ([f g] \n     (fn \n       ([] (f (g)))\n       ([x] (f (g x)))\n       ([x y] (f (g x y)))\n       ([x y z] (f (g x y z)))\n       ([x y z & args] (f (apply g x y z args)))))\n  ([f g & fs]\n     (reduce my-comp (list* f g fs))))", "user": "5da760ebe4b000c986472c1a"}, {"problem": 58, "code": "(fn cmp\n  [& args]\n   (fn\n     [& x]\n     (first (reduce (fn [acc f]\n                      \n                      (list (apply f acc)) \n                      )\n                    x\n                    (reverse args)))))", "user": "5da94ccfe4b000c986472c2f"}, {"problem": 58, "code": "(fn [& fns]\r\n  (reduce (fn [v f] #(v (apply f %&))) fns))", "user": "5dbd51cfe4b09f47823971bb"}, {"problem": 58, "code": "(fn [& fns]\n  (fn [& col]\n    (loop [functions (rest (reverse fns))\n            result (apply (last fns) col)]\n      (if (empty? functions) \n        result\n        (recur (rest functions) ((first functions) result))\n      )\n    )\n  )   \n)", "user": "5da20e73e4b000c986472be1"}, {"problem": 58, "code": "(fn [ & f ]  \n  (fn [ & x ]  (reduce \n                     (fn [a b]  (  b a))  (apply (last f ) x) (reverse (drop-last f))      \n                 )                        \n  )          \n)", "user": "5da98129e4b000c986472c33"}, {"problem": 58, "code": "(fn [& fs] \n  (fn [& xs] \n   (loop [cl fs re xs ]\n     (if (not (first cl)) (first re)\n       (recur (butlast cl) [(apply (last cl) re )]  )) ) \n   ))", "user": "5dc12b0ae4b0e59a23173d84"}, {"problem": 58, "code": "(fn comp2 [& funcs] {:pre (every? fn? funcs)}\n    (if (> (count funcs) 1)\n        (fn [& args] ((first funcs) (apply (apply comp2 (rest funcs)) args)))\n        (fn [& args] (apply (first funcs) args))\n    )\n)", "user": "5db7376fe4b010eb3c36cd43"}, {"problem": 58, "code": "(fn [& fs] (reduce (fn [prev f] #(prev (apply f %&))) fs))", "user": "5db92996e4b010eb3c36cd50"}, {"problem": 58, "code": "(fn [& fs] (fn [& args] (reduce #(%2 %1) (apply (last fs) args) (reverse (drop-last fs)))))", "user": "5dc9d5c3e4b03836ba07d824"}, {"problem": 58, "code": "(fn [& fs] (reduce (fn [f g]  #(f (apply g %&))) fs))", "user": "59fbc01ce4b0ca45a743a383"}, {"problem": 58, "code": "(fn ([f g] (fn [s] (f (g s)))) \n  \t([f g h] (fn [& s] (f (g (apply h s))))))", "user": "5da71eaee4b000c986472c15"}, {"problem": 58, "code": "(fn\n  [& fns]\n  (loop [result (first fns), remaining (rest fns)]\n    (if (empty? remaining)\n      result\n      (recur #(result (apply (first remaining) %&)) (rest remaining)))))", "user": "5dc9ccf8e4b02f9375f4e1f1"}, {"problem": 58, "code": "(fn comp3\n  [& f]\n  (fn [& x]\n    (if (= (count f) 1)\n      (apply (first f) x)\n      ((first f) (apply (apply comp3 (rest f)) x)))))", "user": "5dc9c070e4b02f9375f4e1ee"}, {"problem": 58, "code": "(fn [& fs]\n  (reduce\n   (fn [r f]\n     (fn [& args]\n       (f (apply r args))))\n   (reverse fs)))", "user": "5cf6522be4b0b71b1d808a58"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& xs]\n    (first (reduce (fn [xxs f] (vector (apply f xxs))) xs (reverse fs)))\n  )\n)", "user": "5dcfdf23e4b0948ae9d9ad43"}, {"problem": 58, "code": "(fn [& funcs] (reduce (fn [f1 f2] (fn [& params] (f1 (apply f2 params)))) funcs))", "user": "5dc40814e4b02f9375f4e1ae"}, {"problem": 58, "code": "(fn compose\n  ([f] f)\n  ([f & fs]\n   (fn [& args]\n     (f (apply (apply compose fs) args)))))", "user": "5dd35dcbe4b0948ae9d9ad5f"}, {"problem": 58, "code": "(fn my-comp\n  ([] identity)\n  ([f] f)\n  ([f & fs]\n   (fn [& x] (f (apply (apply my-comp fs) x)))))", "user": "5dc98501e4b02f9375f4e1e6"}, {"problem": 58, "code": "(fn [& x] (fn [& y] (first (reduce #(vector (apply %2 %1)) y (reverse x)))))", "user": "5daae405e4b000c986472c44"}, {"problem": 58, "code": "(fn compose-functions [& functions]\n  (fn [& arg]\n    (let [[head-func & funcs-from-right] (reverse functions)\n          head-result (apply head-func arg)\n          ]\n      (reduce\n       #(apply %2 [%1])\n       head-result funcs-from-right))))", "user": "5dc4719ae4b02f9375f4e1b5"}, {"problem": 58, "code": "(fn apply-right-to-left [& functions]\n  (loop [rem (reverse functions)\n         res nil]\n    (if (empty? rem)\n      res\n      (if (= nil res)\n        (recur (rest rem) (first rem))\n        (recur (rest rem) (fn [& args] ((first rem) (apply res args)))))\n      )\n    )\n  )", "user": "5dd67c22e4b0948ae9d9ad80"}, {"problem": 58, "code": "(fn comp* [& funcs]\n    (fn [& args] (reduce (fn [x f] (f x)) (apply (last funcs) args) (rest (reverse funcs))))\n    )", "user": "5dd90651e4b0948ae9d9ad97"}, {"problem": 58, "code": "(fn my-comp\n  ([f] (fn [& args] (apply f args)))\n  ([f & fs] (fn [& args] (f (apply (apply my-comp fs) args)))))", "user": "5da05bcce4b000c986472bd0"}, {"problem": 58, "code": "(fn [& fns]\n\n    (fn [& args]\n\n      (reduce #(%2 %1)\n              (apply (last fns) args)\n              (rest (reverse fns)))\n\n\n      )\n\n    )", "user": "5dd1fb19e4b0948ae9d9ad51"}, {"problem": 58, "code": "(fn a\n      [& funcs]\n      (fn\n        [& args]\n        (println args)\n        (reduce (fn\n                  [x f]\n                  (f x))\n                (apply (first (reverse funcs)) args)\n                (rest (reverse funcs)))\n        )\n      )", "user": "5ddd3cbee4b0948ae9d9adc3"}, {"problem": 58, "code": "(fn apply-function-comp [& funcs]\n  (let [order (reverse funcs)\n        f1 (first order)\n        f (rest order)]\n    (fn [& args]\n      (reduce\n       (fn [acc curr]\n         (curr acc))\n       (apply f1 args)\n       f))))", "user": "5d8c8175e4b0915913b1d3e1"}, {"problem": 58, "code": "(fn [& funcs]\n  (fn [& args]\n    (first (reduce\n     (fn [res fn]\n       (conj [] (apply fn res)))\n     args\n     (reverse funcs)))))", "user": "5ddb6151e4b0948ae9d9adb0"}, {"problem": 58, "code": "(fn  [& x] (reduce (fn [f g] (fn [& a] (f (apply g a)))) x))", "user": "5dcc65b7e4b02b31cc3da3c9"}, {"problem": 58, "code": "(fn [& funcs]\n  (fn [& args]\n    (loop [funcs (apply vector funcs) result args]\n      (if (empty? funcs)\n        \t(first result)\n        \t(recur (pop funcs) [(apply (last funcs) result)])\n        )\n      )\n  )\n)", "user": "5de6484ce4b0986d99407f66"}, {"problem": 58, "code": "(fn [& fns]\n  (fn [& args]\n    (reduce #(%2 %1) (apply (last fns) args) (rest (reverse fns)))))", "user": "5dd60c58e4b0948ae9d9ad7c"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& args]\n    (let [[f1 & fr] (reverse fs)]\n      (reduce\n       (fn [acc f]\n         (f acc))\n       (apply f1 args)\n       fr))))", "user": "5d5824fae4b02ba5928a681f"}, {"problem": 58, "code": "(fn comp* [& fs]\n  (fn [& args]\n    (let [fsr (reverse fs)]\n      (let [f (first fsr)\n            xs (rest fsr)\n            f* (fn [agg f**]\n                 (f** agg))]\n        (reduce f* (apply f args) xs)))))", "user": "5defd277e4b093ff717275b0"}, {"problem": 58, "code": "(fn [& funcs]\n  (fn [& args]\n    (let [rfuncs (rest (reverse funcs))\n          r (apply (first (reverse funcs)) args)]\n      (loop [[f & frest] rfuncs\n              res r]\n        (if (empty? frest)\n          (f res)\n          (recur frest (f res)))))))", "user": "5de68f83e4b0986d99407f6c"}, {"problem": 58, "code": "(fn [& args]\n  (reduce (fn [acc item]\n            (fn [& s]\n              (acc (apply item s))))\n          identity\n          args))", "user": "5215661be4b02f6d8ea676c7"}, {"problem": 58, "code": "(fn [& ff]\n    (let [[f & fs] (reverse ff)]\n      (fn [& s] (reduce (fn [r nf] (nf r)) (apply f s) fs))))", "user": "529dfc6de4b04e0c58e87b8a"}, {"problem": 58, "code": "(fn  [& fns]\n          (fn [& args]\n            (first (reduce (fn [a b]\n                           [(apply b a)])\n                           args\n                           (reverse fns)))))", "user": "5cc6b4bfe4b0ccb061962827"}, {"problem": 58, "code": "(fn [& funs]\n  (letfn [(combine [f1 f2]\n            (fn [& args] (f1 (apply f2 args))))]\n  (reduce combine funs)))", "user": "5de28eeae4b0948ae9d9adf5"}, {"problem": 58, "code": "(fn\n  ([] identity)\n  ([f] f)\n  ([f g] (fn [a] (f (g a))))\n  ([f g h]\n   (fn\n     ([a b] (f (g (h a b))))\n     ([a b c d] (f (g (h a b c d)))))))", "user": "5ddb8a6ee4b0948ae9d9adb2"}, {"problem": 58, "code": "(fn c\n   ([f] (fn [& a] (apply f a)))\n   ([f g] (fn [& a] (f (apply g a))))\n   ([f g h] (fn [& a] (f (g (apply h a))))))", "user": "4edd038c535d10e5ff6f5327"}, {"problem": 58, "code": "(fn [& fns]\n  (let [[head-fn & tail-fns] (reverse fns)]\n    (fn [& args]\n      (reduce #(%2 %1)\n              (apply head-fn args)\n              tail-fns))))", "user": "5dfb2e2ae4b0a607a9a45cd6"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& is]\n    (loop [fss (butlast fs) \n           is (apply (last fs) is)]\n      (if (empty? fss) is\n        (recur (butlast fss)\n               ((last fss) is)))\n      )))", "user": "54961073e4b0b312c081ff62"}, {"problem": 58, "code": "(fn [& fs] (reduce (fn [f g] #(f (apply g %&))) fs))", "user": "5dfb20b8e4b0a607a9a45cd3"}, {"problem": 58, "code": "(fn my-comp\n  [& funcs]\n  (let [[func & rst] (reverse funcs)]\n    (fn [& args]\n     (reduce\n       (fn [args fun] (fun args))\n       (apply func args)\n       rst\n       )\n     ))\n  )", "user": "5dfb538ee4b0a607a9a45cda"}, {"problem": 58, "code": "(fn mycomp\n  ([] identity)\n  ([f] f)\n  ([f g] \n     (fn \n       ([] (f (g)))\n       ([x] (f (g x)))\n       ([x y] (f (g x y)))\n       ([x y z] (f (g x y z)))\n       ([x y z & args] (f (apply g x y z args)))))\n  ([f g & fs]\n     (reduce mycomp (list* f g fs))))", "user": "5d9c9446e4b0eb781811cdae"}, {"problem": 58, "code": "(fn p-58 [& fns]\n  (if (= 1 (count fns))\n    (fn [& x] (apply (first fns) x))\n    (fn [& x] ((first fns) (apply (apply p-58 (rest fns)) x)))))", "user": "5bfc9037e4b0bdcf453d15f2"}, {"problem": 58, "code": "(fn mycomp [& others]\n  (let [funs (reverse others)]\n    (fn mycomp-impl [& args]\n      (loop [[f & n] (rest funs)\n             xs (apply (first funs) args)]\n        (if f\n          (recur n (f xs))\n           xs)))))", "user": "5df0c6ffe4b093ff717275c2"}, {"problem": 58, "code": "(fn [& fs]\n  (reduce (fn [f g]\n            #(f (apply g %&))) fs))", "user": "5e066185e4b0978307768fa4"}, {"problem": 58, "code": "(fn [& fns]\n  (fn [& inputs] (reduce (fn [result next-fn] (next-fn result)) \n                         (apply (last fns) inputs) (drop 1 (reverse fns)))))", "user": "5d84545ee4b0915913b1d38b"}, {"problem": 58, "code": "(fn [& args]\n  (reduce (fn [a b] (fn [& arg] (a (apply b arg)))) args))", "user": "5dfa1c67e4b0a607a9a45cc5"}, {"problem": 58, "code": "(fn [& fns] \n  (fn [& args]\n    (loop [fns (reverse fns) res args]\n      (if (empty? fns)\n        (first res)\n        (recur (rest fns) (vector (apply (first fns) res)))\n        )\n    )\n  )\n)", "user": "5e09fd26e4b099d064962f60"}, {"problem": 58, "code": "(fn [& fs] (reduce (fn [f g] #(f (apply g %&))) fs))", "user": "5e00b6e7e4b0a607a9a45d2b"}, {"problem": 58, "code": "(fn comp1 [& fs]\n   (fn [& args]\n     (reduce (fn [as f] (f as)) (apply (last fs) args) (rest (reverse fs)))))", "user": "5e0d948fe4b099d064962f98"}, {"problem": 58, "code": "#(reduce (fn [f g]\n          (fn [& args]\n            (f (apply g args))))\n        (list* % %2 %&))", "user": "510528a0e4b0730a5f55ad85"}, {"problem": 58, "code": "(fn [& fns]\n  (fn [& args]\n    (let [fns (reverse fns)]\n      (loop [result (apply (first fns) args)\n             fns (rest fns)]\n        (if (empty? fns)\n          result\n          (recur\n           ((first fns) result)\n           (rest fns)))))))", "user": "5e0f46fce4b099d064962fb6"}, {"problem": 58, "code": "(fn c\n  ([] identity)\n  ([f] f)\n  ([f g]\n   (fn [& args]\n     (f (apply g args))))\n  ([f g & fs]\n   (apply c (c f g) fs)))", "user": "57023e92e4b08d47c97781da"}, {"problem": 58, "code": "(fn [& fs]\n  (let [[f1 & fs] (reverse fs)]\n    (fn [& xs]\n      (reduce (fn [agg f] (f agg)) (apply f1 xs) fs))))", "user": "5b857411e4b047b03b2037ce"}, {"problem": 58, "code": "(fn apna-comp [& functions]\n  #_=>   (fn [& elements]\n  #_=>   (reduce\n  #_=>    (fn [acc fun] (fun acc))\n  #_=>    (apply (last functions) elements)\n  #_=>    (rest (reverse functions)))))", "user": "5e0cbc14e4b099d064962f8e"}, {"problem": 58, "code": "(fn [& args]\n\t(fn [& initial-value]\n\t  (first (reduce\n\t#(vector (apply %2 %1))\n\tinitial-value (reverse args)))))", "user": "5e12b4ffe4b099d064962fec"}, {"problem": 58, "code": "(fn [& func-list] (fn [& args] (reduce (fn [result func](func result)) (apply (last func-list) args) (rest (reverse func-list)))))", "user": "5e14175be4b0a047bd49f6e5"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& args]\n    (loop [functions (reverse fs) args args]\n      (if (empty? functions)\n         (first args)\n         (recur (rest functions)\n                (list (apply\n                       (first functions)\n                       args))\n                )\n         ))))", "user": "5e078ba7e4b0978307768fb6"}, {"problem": 58, "code": ";https://stackoverflow.com/questions/21371860/clojure-implementing-the-comp-function\n\n(fn [& xs]\n  (fn [& ys]\n    (reduce #(%2 %1)\n            (apply (last xs) ys) (rest (reverse xs)))))", "user": "5d89427ae4b0915913b1d3b5"}, {"problem": 58, "code": "(fn [& funcs]\n  (fn [& args]\n  \t(loop [fs (reverse funcs)\n           ar args]\n      (if (empty? fs)\n        (first ar)\n        (recur (rest fs)\n               [(apply (first fs) ar)])))\n    )\n  )", "user": "5b22ba1ae4b08b1df1c3674b"}, {"problem": 58, "code": "(fn [& fs]\n    (reduce\n      (fn [f g] #(f (apply g %&)))\n      fs))", "user": "5e1561b1e4b0a047bd49f700"}, {"problem": 58, "code": "(fn [& fns]\n  (fn [& args] \n    (loop [f-coll (rest (reverse fns))\n          prev (apply (last fns) args)]\n     (if (empty? f-coll)\n       prev\n       (recur (rest f-coll) ((first f-coll) prev))))))", "user": "5cb0f70ce4b026601754b8c1"}, {"problem": 58, "code": "(fn [& fs]\n    (reduce (fn [f g] #(f (apply g %&))) fs))", "user": "5e17bb46e4b00200644e3d5a"}, {"problem": 58, "code": "(fn [& funs] \n    (fn [& args]\n      (first\n      (reduce #(list (apply %2 %1)) args (reverse funs)))))", "user": "5df75fd8e4b0a607a9a45c92"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& args]\n    (let [[first-func & funcs] (reverse fs)]\n      (reduce (fn [prev-res f]\n                (f prev-res))\n              (apply first-func args)\n              funcs))))", "user": "5d07989ee4b0cc9c915881fb"}, {"problem": 58, "code": "(fn [& fs] (reduce (fn [f g] #(f (apply g %&))) fs))", "user": "5c3440fee4b0d62ef62d9f50"}, {"problem": 58, "code": "(fn [& args] (reduce (fn [f1 f2] (fn [& args] (f1 (apply f2 args)))) identity args))", "user": "5e1cc888e4b0dc959400853d"}, {"problem": 58, "code": "(fn [& fns]\n (reduce (fn [compf f]\n           (fn [& args]\n             (compf (apply f args)))) identity fns))", "user": "5d929ceae4b0915913b1d412"}, {"problem": 58, "code": "(fn my-comp [& f-args]\n             (fn [& args]\n               (if (= 1 (count f-args))\n                 (apply (first f-args) args)\n                 ((first f-args) (apply (apply my-comp (rest f-args)) args)))))", "user": "5e1c3e6ee4b0dc9594008530"}, {"problem": 58, "code": "(fn FuncCompose\n  [& inputFunctions]\n  #(loop [inputFunctions (reverse inputFunctions) args %&]\n     (if (empty? inputFunctions)\n       (first args)\n       (recur (rest inputFunctions) (list (apply (first inputFunctions) args)))\n       )\n     )\n  )", "user": "5e16b820e4b0a047bd49f71f"}, {"problem": 58, "code": "(fn  [& fs]\n  (let [reversed-fs (reverse fs)]\n    (reduce (fn [prev-fs curr-f]\n              (fn [& args] (curr-f (apply prev-fs args))))\n            (first reversed-fs)\n            (rest reversed-fs)))\n  )", "user": "5e300655e4b05b4b01516209"}, {"problem": 58, "code": "(fn dd [& fns]\n  (fn [& args]\n    (reduce (fn [result-so-far next-fn] (next-fn result-so-far))\n            (apply (last fns) args) (rest (reverse fns)))))", "user": "5e2010eee4b05b4b01516105"}, {"problem": 58, "code": "(fn c\n  ([f]        f)\n  ([f g]      #(f (apply g %&)))\n  ([f g & h]  #(f (apply (apply c g h) %&))))", "user": "5e38a9cbe4b01d43a70e8dc2"}, {"problem": 58, "code": "(fn  [& args]\n  (let [size (count args)\n        build (fn builder [i x y]\n                  (if (= i (- size 1))\n                    (if (nil? y)\n                      ((nth args i) x)\n                      (apply (partial (nth args i) x) y))\n                    ((nth args i) (builder (inc i) x y))))]\n    (fn [x & y] (build 0 x y))))", "user": "5dc53ddee4b02f9375f4e1bd"}, {"problem": 58, "code": "(fn [& fns]\n  (fn [& colls]\n    (let [fns (reverse fns)]\n      (reduce #(%2 %1)\n              (apply (first fns) colls)\n              (rest fns)))))", "user": "5cb41c40e4b026601754b911"}, {"problem": 58, "code": "#(fn [& args]\n  (first\n  (reduce \n   (fn [a x]\n     [(apply x a)])\n  args (reverse %&))))", "user": "5e3a25d4e4b01d43a70e8dde"}, {"problem": 58, "code": "(fn my-comp\n  [& functions]\n  (fn [& args]\n  (reduce\n    (fn [val f]\n       (apply f (if (= (type val) clojure.lang.ArraySeq)\n                   val\n                   (list val))))\n   args (reverse functions))))", "user": "5e348945e4b0650de70e2b1d"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& vs]\n    (reduce \n     (fn [acc f] (f acc))\n     (apply (last fs) vs)\n     (rest (reverse fs)))))", "user": "52860baae4b0239c8a67ae09"}, {"problem": 58, "code": "(fn ccomp \n  ([l] (fn [ & rest]  (apply l rest)))\n  ([l & tail] \n    (fn [& rest] (let [t ( apply (apply ccomp tail) rest)\n                              ](l t )))))", "user": "5e308d0ae4b05b4b01516215"}, {"problem": 58, "code": "(fn [& fns]\n  (fn [& args]\n    (let [fns (reverse fns)\n          seed (apply (first fns) args)]\n      (reduce #(%2 %1) seed (rest fns)))))", "user": "50504a1de4b0a02f9cffdeb9"}, {"problem": 58, "code": "(fn _\n   ([f] #(apply f %&))\n   ([f & fs] #(f (apply (apply _ fs) %&))))", "user": "5e41b679e4b01d43a70e8e58"}, {"problem": 58, "code": "(fn c\n  ([] identity)\n  ([f] f)\n  ([f g]\n   (fn\n     ([] (f (g)))\n     ([x] (f (g x)))\n     ([x y] (f (g x y)))\n     ([x y & args] (f (apply g x y args)))))\n  ([f g & fs]\n   (reduce c (list* f g fs))))", "user": "57fc5e42e4b0d3187e900997"}, {"problem": 58, "code": "(fn\n  ([a b] #(a (b %)))\n  ([a b c] (fn [& args] (a (b (apply c args)))))\n)", "user": "5e3b6ae9e4b01d43a70e8df4"}, {"problem": 58, "code": "(fn [& fs]\n   (fn [& args]\n     (let [[fh & ft] (reverse fs)]\n       (reduce #(%2 %1) (apply fh args) ft))))", "user": "5e3ef7d4e4b01d43a70e8e2d"}, {"problem": 58, "code": "(fn f [ff & fs]\n  (fn [& xs]\n    (if (empty? fs)\n      (apply ff xs)\n      (ff (apply (apply f fs) xs)))))", "user": "5e2549c8e4b05b4b0151615f"}, {"problem": 58, "code": "(fn [& fns]\n  (fn [& args]\n    (first (reduce #(list (apply %2 %1)) args (reverse fns)))))", "user": "54186e68e4b01498b1a71a1a"}, {"problem": 58, "code": "(fn answer [& functions]\n  (fn [& args]\n    (println \"The args are \" args \" and the functions are \" functions)\n    (reduce (fn [res f]\n              (println \"Trying to apply \" f \" on \" res)\n              (println \"Applying \" f \" on \" res \" which yields \" (f res))\n              (f res)\n              )\n            (apply (last functions) args)\n            (rest (reverse functions)))\n    ))", "user": "5e491182e4b043cd24807a46"}, {"problem": 58, "code": "(fn [& f]\n  (fn [& args]\n    (reduce #(%2 %1) (apply (last f) args) (rest (reverse f)))))", "user": "5e246f92e4b05b4b01516150"}, {"problem": 58, "code": "(fn [& fns] (fn [& args] (reduce #(%2 %1) (apply (first (reverse fns)) args) (rest (reverse fns) ))))", "user": "5d828b7ee4b0915913b1d382"}, {"problem": 58, "code": "(fn [& fs] (reduce (fn [f g] #(f (apply g %&))) fs))", "user": "5e392de0e4b01d43a70e8dcb"}, {"problem": 58, "code": "(fn  [& fs] \n   (fn [& args] \n      (first (reduce (fn [acc elem]\n                 (list (apply elem acc))\n                 )\n               args (reverse fs)))\n    )\n  )", "user": "5e44c804e4b01d43a70e8e89"}, {"problem": 58, "code": "(fn compo\n  [f & fs]\n  (if (seq fs)\n    (fn [& args] (f (apply (apply compo fs) args)))\n    f))", "user": "556323b5e4b0c656e3ff17e5"}, {"problem": 58, "code": "(fn compose [& funs]\n  (let [first-fn (last funs)\n        rest-fn (reverse (drop-last funs))]\n    (fn [& args]\n      (let [first-result (apply first-fn args)]\n        (reduce #(%2 %1) first-result rest-fn)))))", "user": "5dcc152ae4b02b31cc3da3c3"}, {"problem": 58, "code": "(fn f\n    ([f] (fn [x] (f x)))\n    ([f g] (fn ([x] (f (g x)))\n               ([x y] (f (g x y)))))\n    ([f g h] (fn ([x] (f (g (h x))))\n                 ([x y] (f (g (h x y))))\n                 ([x y z] (f (g (h x y z))))\n                 ([x y z p] (f (g (h x y z p)))))))", "user": "5e08c3dde4b0978307768fc8"}, {"problem": 58, "code": "(fn [& funs] (reduce (fn [a b] (fn [& args] (b (apply a args)))) (reverse funs)))", "user": "5e5b8d92e4b0fd0acd158658"}, {"problem": 58, "code": "(fn c; hickey's stuff\n  ([f g] \n     (fn \n       ([& args] (f (apply g args)))))\n  ([f g & fs]\n     (reduce c (list* f g fs))))", "user": "5dd47f7ce4b0948ae9d9ad6d"}, {"problem": 58, "code": "(fn comb [& funcs]\n  (fn [& args]\n    (first\n      (reduce #(vector (apply %2 %1)) args (reverse funcs )))))", "user": "5e692be9e4b04a83ad7cd269"}, {"problem": 58, "code": "(fn [& funcs]\n    (let [right-to-left (reverse funcs)]\n      (fn [& args]\n        (reduce (fn [acc func] (func acc)) (apply (first right-to-left) args) (rest right-to-left)))))", "user": "5df70ee8e4b0a607a9a45c8a"}, {"problem": 58, "code": "(fn mc\n    ([f1 f2]\n     (fn [& args]\n       (f1 (apply f2 args))))\n    ([f1 f2 & fs]\n     (mc f1 (apply mc f2 fs))))", "user": "5e48ec09e4b043cd24807a45"}, {"problem": 58, "code": "(fn\n  [& fns]\n  (reduce\n   (fn [acc f]\n     (fn [& args]\n       (acc (apply f args))))\n   fns))", "user": "5be1c6c6e4b0ed4b8aab4ca5"}, {"problem": 58, "code": "(fn mycomp [frst secnd & rst]\n  (if (= rst nil)\n    (fn [& args] (frst (apply secnd args)))\n    (mycomp frst \n            (apply mycomp (cons secnd rst)))))", "user": "5e20a159e4b05b4b01516118"}, {"problem": 58, "code": "(fn [& fns]\n  (let [fns (reverse fns)]\n    (fn [& args]\n      (reduce\n        (fn [acc f]\n          (f acc))\n        (apply (first fns) args)\n        (rest fns)))))", "user": "5d28d935e4b092dab7f59c88"}, {"problem": 58, "code": "(fn mc [& fs]\n  (fn [& args]\n    (let [fs (reverse fs)]\n        (reduce #(%2 %1) (apply (first fs) args) (rest fs)))))", "user": "5e7df614e4b085ba37836e32"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& xs]\n  \t(let [[f & fs] (reverse fs)]\n    \t(reduce #(%2 %1) (apply f xs) fs))))", "user": "5e7f075ee4b085ba37836e36"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& v]\n    (reduce (fn [a f] (f a)) (apply (last fs) v) (drop 1 (reverse fs))) ))", "user": "53a5bc3ae4b0ef122a8689c3"}, {"problem": 58, "code": "(fn my-comp [& fns]\n    (fn [& args]\n      (reduce (fn [result-so-far next-fn] (next-fn result-so-far))\n              (apply (last fns) args) (rest (reverse fns)))))", "user": "5e31a4b0e4b05b4b0151622b"}, {"problem": 58, "code": "(fn \n  [& fs]\n  (reduce (fn [a b]\n            #(a (apply b %&))\n            ) identity fs))", "user": "5e79fcb9e4b085ba37836e08"}, {"problem": 58, "code": "#_(fn [& fs]\n  (let [rfs (reverse fs)\n        ff (first rfs)]\n    (fn [& args]\n      (when ff\n        (reduce\n          (fn [result f] (f result))\n          (apply ff args)\n          (rest rfs))))))\n(fn cm\n  ([f g]\n   (fn [& args] (f (apply g args))))\n  ([f g & fs]\n   (reduce cm (list* f g fs))))", "user": "4eb70649535d7eef30807373"}, {"problem": 58, "code": "(fn func [& fs]\n  (let [[f1 & frest] (reverse fs)]\n    (fn [& args]\n      (reduce (fn [res el] (el res)) (apply f1 args) frest))))", "user": "5e805895e4b085ba37836e44"}, {"problem": 58, "code": "(fn [& fs]\n  (reduce (fn [f g]\n            #(f (apply g %&))) fs))", "user": "5c9da580e4b048ec896c5b12"}, {"problem": 58, "code": "(fn\n  [& fs]\n  (fn [& xs]\n    (first (reduce (fn [zs f] (vector (apply f zs)))\n                   xs\n                   (reverse fs)))))", "user": "5e952e17e4b0fbed045a3807"}, {"problem": 58, "code": "(fn\n([f1 f2] (fn [& args] (f1 (apply f2 args))))\n([f1 f2 f3] (fn [& args] (f1 (f2 (apply f3 args)))))\n)", "user": "5e13a6b7e4b099d064963001"}, {"problem": 58, "code": "(fn [& functions]\n    (fn [& xs]\n      (apply\n        (reduce (fn [f g] (fn [& args] (f (apply g args))))\n                functions)\n        xs)))", "user": "5e99cbd4e4b0157ca96647e6"}, {"problem": 58, "code": "(fn [f1 & funcs]\n  (reduce (fn [agg fnx] (fn [& fargs] (agg (apply fnx fargs)))) f1 funcs))", "user": "5e9c11f8e4b0157ca96647f6"}, {"problem": 58, "code": "(fn [& args] (reduce (fn [acc f] #(acc (apply f %&))) args))", "user": "5e5f2c17e4b0fd0acd158678"}, {"problem": 58, "code": "(fn c \n  ([f1 f2]\n   (fn [& args]\n     (f1 (apply f2 args))))\n  ([f1 f2 & fs]\n   (c f1 (apply c f2 fs))))", "user": "5dc88a38e4b02f9375f4e1db"}, {"problem": 58, "code": "(fn mycomp                                      \n  ([f] f)                                 \n  ([f g] (fn ([& more] (f (apply g more)))))\n  ([f g & fs]                          \n    (reduce mycomp (list* f g fs))))", "user": "5e5096c6e4b027a2e10ac0c6"}, {"problem": 58, "code": "(fn [& fs]\n  (fn\n    [& args]\n    (let [fs (reverse fs)\n          firstfs (first fs)\n          restfs (rest fs)]\n      (loop [acc (apply firstfs args)\n             fs restfs]\n        (if (empty? fs)\n          acc\n          (recur ((first fs) acc) (rest fs)))))))", "user": "53528cd3e4b084c2834f4af2"}, {"problem": 58, "code": "(fn [& fns]\n              (fn [& args]\n                (loop [[f & restfns] (reverse fns)\n                       args args]\n                  (if f\n                    (recur restfns [(apply f args)])\n                    (get args 0)))))", "user": "58acca5ee4b0005cfeb1a753"}, {"problem": 58, "code": "(fn [& funcs] (fn [& args] (first (reduce #(vector (apply %2 %1)) args (reverse funcs)))))", "user": "5e954b9ee4b0fbed045a3809"}, {"problem": 58, "code": "(fn [& fs]\n  (let [fs' (reverse fs)]\n    (fn [& args] (reduce #(%2 %1) (apply (first fs') args) (rest fs')))))", "user": "5e9f38cce4b00a66d4a9517e"}, {"problem": 58, "code": "(fn function-composition [& f]\n  (fn [& args]\n    (first (reduce #(list (apply %2 %)) args (reverse f)))))", "user": "5e92adb6e4b0fbed045a37ea"}, {"problem": 58, "code": "(fn test\n    ([f] f)\n    ([f g] (fn [& x] (f (apply g x))))\n    ([f g & fs]\n     (reduce test (list* f g fs))))", "user": "5e7b1ef4e4b085ba37836e10"}, {"problem": 58, "code": "(fn [& f]\n  #(loop [l f s (apply (last l) %&)]\n      (if (= (count l) 1) s\n          (recur (butlast l) ((last (butlast l)) s)))))", "user": "5e6ca949e4b04a83ad7cd289"}, {"problem": 58, "code": "(fn [& fs] (reduce #(fn [& args] (%1 (apply %2 args))) fs))", "user": "5eb1c786e4b00a66d4a95201"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& s]\n    (reduce #(%2 %) (apply (last fs) s) (reverse (butlast fs)))))", "user": "5649b1b0e4b0284900eef646"}, {"problem": 58, "code": "(fn compose ([f] (fn [& args] (apply f args))) ([f & rest] (fn [& args] (f (apply (apply compose rest) args)))))", "user": "57d0fce5e4b0bd073c202364"}, {"problem": 58, "code": ";((\n(fn m [& fs]\n  (fn\n   ([xs]\n    (reduce\n     (fn [o f]\n       (f o))\n     xs\n     (reverse fs)))\n   ([xs & aa]\n        ((apply m (butlast fs))\n         (apply\n          (last fs)\n          xs\n          aa)))))\n;#(mod % 8) +) 3 5 7 9)", "user": "5e64ae6ce4b0fd0acd1586ac"}, {"problem": 58, "code": "(fn [& xs]\n  (fn [& ys]\n    (reduce #(%2 %1)\n            (apply (last xs) ys) (rest (reverse xs)))))", "user": "5eb56fc1e4b00a66d4a95224"}, {"problem": 58, "code": "(fn [& fs]\n  (let [[f1 & fns] (reverse fs)]\n    (fn [& args]\n      (loop [f* fns v (apply f1 args)]\n        (if (empty? f*)\n          v\n          (recur (rest f*) ((first f*) v)))))))", "user": "4dd1de4d535dae65d5c462d7"}, {"problem": 58, "code": "(fn [& fs] (reduce (fn [f g] #(f (apply g %&))) fs))", "user": "5c9adfebe4b048ec896c5ab9"}, {"problem": 58, "code": "(fn comp'\n([] identity)\n  ([f] f)\n  ([f g] \n     (fn \n       ([] (f (g)))\n       ([x] (f (g x)))\n       ([x y] (f (g x y)))\n       ([x y z] (f (g x y z)))\n       ([x y z & args] (f (apply g x y z args)))))\n  ([f g & fs]\n     (reduce comp' (list* f g fs))))", "user": "5defc177e4b093ff717275af"}, {"problem": 58, "code": "(fn solution [& more]\n  (let [fns (reverse more)]\n    (fn [& more]\n      (reduce #(%2 %1) (apply (first fns) more) (rest fns)))))", "user": "5e2ef900e4b05b4b015161fc"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& args]\n    (loop [to-apply (butlast fs)\n           val (apply (last fs) args)]\n      (if (empty? to-apply)\n        val\n        (recur (butlast to-apply) ((last to-apply) val))))))", "user": "592ac17ae4b072a2710fcf26"}, {"problem": 58, "code": "(fn\n  ([x y]\n   (fn [& inp] (x (apply y inp))))\n  ([x y z]\n   (fn [& inp] (x (y  (apply z inp))))))", "user": "5ec3a13ae4b08d0ec38692b9"}, {"problem": 58, "code": "(fn [& fs] (reduce (fn [f g] #(f (apply g %&))) fs))", "user": "5ec2d9e5e4b00a66d4a952a0"}, {"problem": 58, "code": "(fn [& funcs]\n  (let [reversed (reverse funcs)\n        func (fn link [funcs] (if (> (count funcs) 1) \n                                  (fn [& args] \n                                      ((link (rest funcs)) \n                                             (apply (first funcs) args))) \n                                  (first funcs)))]\n    (func reversed)))", "user": "568f2059e4b0dcc4269f40df"}, {"problem": 58, "code": "(fn [& fs]\n    (fn [& args]\n      (reduce (fn [acc f]\n                (f acc)) (apply (last fs) args) (reverse (butlast fs)))      ))", "user": "5ebc7c13e4b00a66d4a95267"}, {"problem": 58, "code": "(fn\n  [& fns]\n  (fn [& xs]\n    (let [[first-fn & rest-fns] (reverse fns)\n          first-result (apply first-fn xs)\n          reduce-fn (fn [result item]\n                      (item result))]\n      (reduce reduce-fn first-result rest-fns))))", "user": "5c9a638fe4b048ec896c5aae"}, {"problem": 58, "code": "(fn [& fs] (reduce (fn [f g] #(f (apply g %&))) fs))", "user": "5ecf55dae4b016b56eae05a8"}, {"problem": 58, "code": "(fn compose [& f1s] \n  (let [[f1 & fns] (reverse f1s)]\n    (fn [& args]\n      (reduce (fn [res f] (f res )) (apply f1 args) fns))))", "user": "5ec819b4e4b08d0ec38692e2"}, {"problem": 58, "code": "(fn [& fns]\n  (fn [& args] (first (reduce #(conj [] (apply %2 %1)) args (reverse fns)))))", "user": "5e909685e4b0cb016954634d"}, {"problem": 58, "code": "(fn [& fs]\n  (let [[f & fs] (reverse fs)]\n    (fn [& args]\n      (reduce #(%2 %1) (apply f args) fs))))", "user": "5de12192e4b0948ae9d9aded"}, {"problem": 58, "code": "(fn compose [& g] (fn [& x] (reduce (fn [x f] (f x)) (apply (last g) x) (rest (reverse g)))))", "user": "5ed4a4ade4b016b56eae05cd"}, {"problem": 58, "code": "(fn [& fns]\n    (fn [& args]\n      (let [fns' (reverse fns)\n            f    (first fns')\n            fx   (apply f args)]\n        (reduce (fn [state f]\n                  (f state))\n                fx\n                (rest fns')))))", "user": "57f904c5e4b0d3187e900936"}, {"problem": 58, "code": "(fn [& fs] (fn [& x] (reduce #(%2 %1) (apply (last fs) x) (rest (reverse fs)))))", "user": "5ed9b912e4b0c7845d86b0e3"}, {"problem": 58, "code": "(fn c\n ([f g] #(f (apply g %&)))\n ([f g & h] (reduce c (c f g) h)))", "user": "512700c4e4b083bb8f88cf14"}, {"problem": 58, "code": "(fn\n  [& funs]\n  (reduce (fn\n            [comp-fun fun]\n            (fn\n              [& args]\n              (comp-fun (apply fun args))))\n          funs))", "user": "5ed875abe4b016b56eae05f2"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& xs] \n    (first (reduce #(vector (apply %2 %1))\n            xs\n            (reverse fs))\n    )))", "user": "5ebdb3d2e4b00a66d4a95275"}, {"problem": 58, "code": "(fn comp-home-made\n  [& fs]\n  (reduce\n   #(fn [& args] (%2 (apply %1 args)))\n   (fn [& args] (apply (last fs) args))\n   (reverse (butlast fs))))", "user": "5ed52854e4b016b56eae05d2"}, {"problem": 58, "code": "(fn toto [f & fs]\n  (if (nil? fs)\n    f\n    #(f (apply (apply toto fs) %&)))\n  )", "user": "5ed8a12fe4b0c7845d86b0d7"}, {"problem": 58, "code": "(fn ([f1 f2] (fn [x] (f1 (f2 x))))\n  ([f1 f2 f3] (fn [& x] (f1 (f2 (apply f3 x))))))", "user": "5eccc5c2e4b016b56eae058f"}, {"problem": 58, "code": "(fn [& y] (reduce #(fn [& x] (% (apply %2 x))) y))", "user": "5edd6eb7e4b0c7845d86b0f7"}, {"problem": 58, "code": "(fn [& funcs]\n  (fn [& args]\n    (reduce #(%2 %1) (apply (last funcs) args) (rest (reverse funcs)))))", "user": "5e9e8648e4b00a66d4a95178"}, {"problem": 58, "code": "(fn my-comp\n  [& fs]\n  (fn [& args]\n    (reduce #(%2 %1)\n            (apply (last fs) args)\n            (rest (reverse fs)))))", "user": "5ecfd429e4b016b56eae05a9"}, {"problem": 58, "code": "#(let [fs (reverse %&)]\n   (fn [& args]\n     (reduce (fn [input f] (f input))\n             (apply (first fs) args)\n             (rest fs))))", "user": "5ec6de19e4b08d0ec38692da"}, {"problem": 58, "code": "(fn [& funcs]\n  (fn [& params]\n    (reduce #(%2 %1)\n            (apply (last funcs) params)\n            (reverse (drop-last funcs)))))", "user": "5ebd7296e4b00a66d4a95273"}, {"problem": 58, "code": "(fn f [& x]\n  (reduce (fn [f g] #(f (apply g %&))) x\n  ))", "user": "5ee6d30ce4b029a2061bbe9c"}, {"problem": 58, "code": "(fn compose\n  ([] identity)\n  ([f] f)\n  ([f g]\n     (fn \n       ([] (f (g)))\n       ([x] (f (g x)))\n       ([x y] (f (g x y)))\n       ([x y & args] (f (apply g x y args)))))\n  ([f g & fs]\n   \t(reduce compose (list* f g fs))))", "user": "5ee7b49de4b029a2061bbea6"}, {"problem": 58, "code": "(fn __\n  [& fs]\n  (let [[f1 & fr] (reverse fs)]\n    (fn [& s]\n      (reduce (fn [acc f] (f acc))\n              (apply f1 s)\n              fr))))", "user": "5b73e500e4b047b03b2036ba"}, {"problem": 58, "code": "(fn [& args]\n      (fn [a & others]\n        (loop [in (if (= 0 (count others)) a (conj others a))\n\n               i-args args\n               noor (> (count others) 0)\n               ]\n          (do (println  in)\n              (if (empty? i-args) in\n                                  (recur (apply (last i-args) (if (= true noor) in (vector in))) (drop-last i-args) (= true false)))))))", "user": "53c73e8ae4b00fb29b2212a5"}, {"problem": 58, "code": "(fn compose [& funs] (if\n                       (empty? (rest funs))\n                       (first funs)\n                       (fn [& args] ((first funs) (apply (apply compose (rest funs)) args)))))", "user": "5ee93720e4b029a2061bbeb7"}, {"problem": 58, "code": "(fn myc [_f & _rf]\n  (if (nil? _rf)\n    _f\n    (let [inner' (apply myc _rf)]\n      (fn [& x]\n        (_f (apply inner' x))))))", "user": "5ecc0831e4b016b56eae058c"}, {"problem": 58, "code": "(fn function-compo [& fns]\n  (fn [& s]\n    (reduce #(%2 %1) (apply (last fns) s) (rest (reverse fns)))))", "user": "5c665311e4b0fca0c16226a7"}, {"problem": 58, "code": "(fn COMP [f & fs]\n  (if (empty? fs)\n    (fn [& args] (apply f args))\n    (fn [& args] (f (apply (apply COMP fs) args)))))", "user": "5eee7311e4b07c55ae4a0510"}, {"problem": 58, "code": "(fn [& fs] (reduce (fn [f g] #(f (apply g %&))) fs))", "user": "597dcb0ce4b0dbe32238d0a2"}, {"problem": 58, "code": "(fn kek\n    ([f1]\n     (fn [& other]\n       (apply f1 other))\n     )\n    ([f1 & other]\n     (fn [& other2]\n       (f1 (apply (apply kek other) other2)))))", "user": "5eb4927fe4b00a66d4a95221"}, {"problem": 58, "code": "(fn [& fs] (reduce (fn [f g] #(f (apply g %&))) fs))", "user": "5ec25800e4b00a66d4a9529b"}, {"problem": 58, "code": "(fn comp-\n  ([] identity)\n\n  ([f] f)\n\n  ([f g]\n   (fn\n     ([] (f (g)))\n     ([x] (f (g x)))\n     ([x y] (f (g x y)))\n     ([x y & z] (f (apply g x y z)))))\n\n  ([f g & fs]\n   (reduce comp- (list* f g fs))))", "user": "5cf1d9e3e4b0aaa82f112a18"}, {"problem": 58, "code": "(fn f [& fs]\n  (reduce \n    (fn [a b] \n      (fn [& v]\n        (a (apply b v)))) fs))", "user": "5df08767e4b093ff717275bf"}, {"problem": 58, "code": "(fn my-comp [& fns]\n    (if (not (empty? fns))\n      (fn [& args]\n        (let [reversed-fns (reverse fns)\n              init-result (apply (first reversed-fns) args)]\n          ((fn helper [result remained-fns]\n             (if (empty? remained-fns)\n               result                   ; no fn left, return\n               (helper (apply (first remained-fns) [result])\n                       (rest remained-fns))))\n           init-result\n           (rest reversed-fns)\n           )\n          )\n        )\n      )\n    )", "user": "5ee75f8be4b029a2061bbea5"}, {"problem": 58, "code": "(fn [& funcs]\n    (let [rfuncs (reverse funcs)\n          func1 (first rfuncs)\n          funcs (rest rfuncs)]\n      (fn [data & remaining]\n        (if (nil? remaining)\n          (reduce #(%2 %1) (func1 data) funcs)\n          (reduce #(%2 %1) (apply func1 (concat [data] remaining)) funcs)\n          ))))", "user": "5ef5ee81e4b07c55ae4a054a"}, {"problem": 58, "code": "(fn [& fs]\n    (reduce (fn [f g]\n              #(f (apply g %&))) fs))", "user": "5edc16e1e4b0c7845d86b0f1"}, {"problem": 58, "code": "(fn cmp [f & fs]\n                (cond (empty? fs) (fn [& args] (apply f args))\n                      :else\n                      (fn [& args] (f (apply (apply cmp (cons (first fs)\n                                                  (rest fs)))\n                                             args)))))", "user": "5edfb1e5e4b0c7845d86b107"}, {"problem": 58, "code": "(fn my-comp [& fns]\n    (fn [& xs] (first (reduce #(list (apply %2 %1)) xs (reverse fns)))))", "user": "5ef8e9e0e4b09b61f08553cb"}, {"problem": 58, "code": "(fn mycomp\n  ([fn1 fn2]\n    (fn [ & all]\n      (do \n        (println all)\n      (fn1 (fn2 (first all))))))\n  ([fn1 fn2 fn3]\n    (fn [ & all]\n      (fn1 (fn2 (apply fn3 all))))))", "user": "5f088bb3e4b0cf489e8d7f5f"}, {"problem": 58, "code": "(fn [& funcs]\n     (let [appq (reverse funcs)]\n       (fn [& initargs]\n         (loop [data (apply (first appq) initargs)\n                remain (rest appq)]\n           (let [nxt (first remain)\n                 v (apply nxt [data])]\n             (println \"nxt:\" data nxt remain v)\n             (if (empty? (rest remain))\n               v\n               (recur v (rest remain))\n               )\n             )\n           )\n         )\n       )\n     )", "user": "5f06caa7e4b0cf489e8d7f52"}, {"problem": 58, "code": "(fn [& fns]\n\t\t(fn [& arg]\n\t\t  (loop\n\t\t\t[res (apply (last fns) arg), funcs (butlast fns)]\n\t\t\t  (println res funcs)\n\t\t\t  (if (empty? funcs)\n\t\t\t  \tres\n\t\t\t  \t(recur ((last funcs) res) (butlast funcs))\n\t\t\t  )\n\t\t  )\n\t\t)\n\t)", "user": "5d73530ce4b02e6b30c93514"}, {"problem": 58, "code": "(fn\n ([f g] #(f (apply g %&)))\n ([f g h] #(f (g (apply h %&)))))", "user": "57e070fde4b0bd073c202478"}, {"problem": 58, "code": "(fn my-compose [& args]\n  (if (empty? (rest (rest args)))\n      (fn [& r] ( (first args) (apply (second args) r) ))\n      (fn [& r] ((first args) (apply (apply my-compose (rest args) ) r )))))", "user": "5f1328dee4b091ba50b4dbb1"}, {"problem": 58, "code": "(fn my-comp ([f] (fn [& xs] (apply f xs)))\n\t\t\t([f & fs] (fn [& xs] (f (apply (apply my-comp fs) xs)))))", "user": "5f03ab5be4b0cf489e8d7f37"}, {"problem": 58, "code": "(fn [& functions]\n  (fn [& args]\n    (first\n     (reduce (fn [result function]\n               (list (apply function result)))\n             args\n             (reverse functions)))))", "user": "5f0e32a1e4b0f30dddfb5d59"}, {"problem": 58, "code": "(fn compose [f & fs]\n  (fn [& args]\n    (if (nil? fs) (apply f args) (f (apply (apply compose fs) args)))))", "user": "4eb97234535dfed6da9c6d53"}, {"problem": 58, "code": "(fn compose [& fs]\n  (fn [& args] (first(reduce #(vector (apply %2 %1)) args (reverse fs)))))", "user": "5ed6030de4b016b56eae05db"}, {"problem": 58, "code": "(fn [& fns]\n  (let [funs (reverse fns)]\n    (fn [& args]\n  \t  (reduce (fn [v cur] (cur v))\n    \t      (apply (first funs) args)\n              (drop 1 funs)))))", "user": "5d431c77e4b07c84aa5ae68f"}, {"problem": 58, "code": "(fn func [& funcs]\n  (fn [& args]\n    (reduce\n      (fn [res f]\n        (f res))\n      (apply (first (reverse funcs)) args)\n      (rest (reverse funcs)))))", "user": "5666c2dbe4b04acd4f672dc3"}, {"problem": 58, "code": "(fn [& funs]\n    (fn [& args]\n      (->> (butlast funs)\n           reverse\n           (reduce #(%2 %1) (apply (last funs) args))\n           )\n      )\n    )", "user": "5f0e8312e4b0f30dddfb5d5b"}, {"problem": 58, "code": "(fn [& fns]\n  (fn [& args]\n    (let [[first-fn & fns] (reverse fns)]\n      (reduce (fn [val a-fn] (a-fn val))\n              (apply first-fn args)\n              fns))))", "user": "5f247827e4b0f565ad998292"}, {"problem": 58, "code": "(fn my-comp\n  ([f g] #(f (apply g %&)))\n  ([f g & fs] (reduce my-comp (list* f g fs))))", "user": "5b7f2d75e4b047b03b203768"}, {"problem": 58, "code": "(fn comp-clone\n  [& fns]\n  (loop [rem-fns (butlast fns)\n         compd-fns (fn [& args] (apply (last fns) args))]\n    (if (empty? rem-fns)\n      compd-fns\n      (recur (butlast rem-fns) (fn [& args] ((last rem-fns) (apply compd-fns args)))))))", "user": "5f21d172e4b0f565ad998286"}, {"problem": 58, "code": "(fn [& z] (reduce (fn [a b] (fn [& x] (a (apply b x)))) z))", "user": "5f2c02d1e4b033932238a65f"}, {"problem": 58, "code": "(fn [& fns]\n  (fn [& args]\n    (let [[firstf & restf] (reverse  fns)]\n      (loop [fns restf\n             res (apply firstf args)]\n        (if (seq fns)\n          (recur (rest fns) ((first fns) res))\n          res)))))", "user": "5e9154c1e4b0cb0169546354"}, {"problem": 58, "code": "(fn c\n  ([f g] #(f (apply g %&)))\n  ([f g & z] (reduce c (list* f g z))))", "user": "5f2d6787e4b033932238a66d"}, {"problem": 58, "code": "(fn cmp [& fs]\n  (reduce\n    #(fn [& xs] (%1 (apply %2 xs)))\n    identity\n    fs))", "user": "5f300f28e4b033932238a682"}, {"problem": 58, "code": "(fn sample [& fs]\n  (reduce (fn [f g]\n            #(f (apply g %&))) fs))", "user": "5ec5f7f2e4b08d0ec38692d1"}, {"problem": 58, "code": "(fn my-comp\n  ([] identity)\n  ([f] f)\n  ([f g] (fn comp2 [& args] (f (apply g args))))\n  ([f g & tail-f]\n   (reduce (fn [acc ele] (my-comp ele acc))\n           \n           (concat tail-f [g f]))))", "user": "5f29837ee4b033932238a64f"}, {"problem": 58, "code": "(fn [& fns]\n  (reduce\n   (fn [a b] (fn [& args] (b (apply a args))))\n   (reverse fns)))", "user": "5f3abcc4e4b004f08c61c52b"}, {"problem": 58, "code": "(fn [& fns] \n  (fn [& args] \n    (reduce (fn [agg f] (println agg) (f agg))\n            (apply (last fns) args) \n            (reverse (butlast fns)))))", "user": "5f431d32e4b0955706451fb5"}, {"problem": 58, "code": "(fn [& fcoll]\n  (let [rf (reverse fcoll)]\n    (fn [& x]\n      (loop [remaining-f (rest rf) args (apply (first rf) x)]\n        (if (= 1 (count remaining-f))\n          ((first remaining-f) args)\n          (recur (rest remaining-f) ((first remaining-f) args)))))))", "user": "5e12327ee4b099d064962fe5"}, {"problem": 58, "code": "(fn [& l]\n    (fn [& p]\n      (loop [f (reverse l)\n             result p\n             first? true]\n        (print result)\n        (if (empty? f)\n          result\n          (recur (rest f)\n                 (if (true? first?)\n                   (apply (first f) result)\n                   ((first f) result))\n                 false)))))", "user": "5f3f2281e4b004f08c61c561"}, {"problem": 58, "code": "(fn compo\n  ([] identity)\n  ([f] f)\n  ([f g] (fn [& args] (f (apply g args))))\n  ([f g & fs] (fn [& args] (f (apply (apply compo g fs) args))))\n)", "user": "5f574662e4b0a0bc16850a90"}, {"problem": 58, "code": "(fn [& xs]\n  (fn [& ys]\n    (reduce #(%2 %1)\n            (apply (last xs) ys) (rest (reverse xs)))))", "user": "5c9dcb36e4b048ec896c5b1d"}, {"problem": 58, "code": "(fn r\n  ([] identity)\n  ([f] f)\n  ([f g] (fn\n           ([& args] (f (apply g args)))))\n  ([f g & fs]\n   (reduce r (list* f g fs))))", "user": "5f419985e4b0955706451fab"}, {"problem": 58, "code": "(fn [& fs]\n  (let [rfs (reverse fs)]\n    (fn [& args]\n    (reduce\n     (fn [v f]\n       (f v))\n     (apply (first rfs) args)\n     (rest rfs)))))", "user": "5f5e7158e4b02876ed9fcff0"}, {"problem": 58, "code": "; based on http://www.4clojure.com/problem/135\n(fn compy\n    ([f1]       \n        #(apply f1 %&)\n    )\n    ([f1 & f2]\n        #(->> %& (apply (apply compy f2)) f1)\n     ))", "user": "5f0824c5e4b0cf489e8d7f5b"}, {"problem": 58, "code": "(fn [& fs] (reduce (fn [f g] #(f (apply g %&))) fs))", "user": "5eff588ae4b0cf489e8d7f10"}, {"problem": 58, "code": "(fn [& fs] (reduce (fn [f g] #(f (apply g %&))) fs))", "user": "5f5f9483e4b02876ed9fcff8"}, {"problem": 58, "code": "#(fn [& input]\n                 (first\n                   (reduce\n                    (fn [res f] (list (apply f res)))\n                    input\n                    (reverse %&))))", "user": "5f5a2cc6e4b0a0bc16850aa4"}, {"problem": 58, "code": "(fn mycomp\n  ([f] f)\n  ([f g]\n   (fn\n     ([x] (f (g x)))\n     ([x y] (f (g x y)))\n     ([x y & args] (f (apply g x y args)))))\n  ([f g & args]\n   (reduce mycomp (list* f g args))))", "user": "5f2c94b4e4b033932238a669"}, {"problem": 58, "code": "(fn my-comp \n  ([f g]\n     (fn\n       ([] (f (g)))\n       ([x] (f (g x)))\n       ([x y] (f (g x y)))\n       ([x y z] (f (g x y z)))\n       ([x y z & args] (f (apply g x y z args)))))\n  ([f g & fs]\n     (reduce my-comp (list* f g fs))))", "user": "5eff6c0ee4b0cf489e8d7f11"}, {"problem": 58, "code": "(fn [& fns]\n  (fn [& args]\n    (reduce (fn [acc f] (f acc))\n            (apply (first (reverse fns)) args)\n            (rest (reverse fns)))))", "user": "5f6d4305e4b02876ed9fd05c"}, {"problem": 58, "code": "(fn mc\n    ([f1 f2]\n     (fn [& args]\n       (f1 (apply f2 args))))\n    ([f1 f2 & fs]\n     (mc f1 (apply mc f2 fs))))", "user": "5f6b61ece4b02876ed9fd051"}, {"problem": 58, "code": "(fn adultcomp\n  ([] identity)\n  ([f] f)\n  ([f g]\n   (fn\n     ([x] (f (g x)))\n     ([x y] (f (g x y)))\n     ([x y & args] (f (apply g x y args)))))\n  ([f g & args]\n   (reduce adultcomp (cons f (cons g args)))))", "user": "5f63d933e4b02876ed9fd018"}, {"problem": 58, "code": "(fn [& fns] \n    (fn [& coll] \n      (loop [result coll\n             fns fns\n             first? true]\n        (if (empty? fns)\n          result\n          (if first?\n            (recur (apply (last fns) result) (drop-last fns) false)\n            (recur ((last fns) result) (drop-last fns) false))))))", "user": "5d9e8e40e4b000c986472bc2"}, {"problem": 58, "code": "(fn c\n    ([] identity)\n    ([a] a)\n    ([a b] #(a (apply b %&)))\n    ([a b & r]\n     (reduce c (conj r b a))))", "user": "588fbb39e4b00487982d51bd"}, {"problem": 58, "code": "(fn [& fs] (reduce (fn [f g] #(f (apply g %&))) fs))", "user": "5f6b5d83e4b02876ed9fd050"}, {"problem": 58, "code": "(fn [& fs] (reduce (fn [f g] #(f (apply g %&))) fs))", "user": "5f727dd6e4b02876ed9fd090"}, {"problem": 58, "code": "(fn f [& fns]\n  (fn [& args]\n    (loop [res (apply (last fns) args)\n           fns (drop-last fns)]\n      (if (empty? fns)\n        res\n        (recur ((last fns) res)\n               (drop-last fns))))))", "user": "5ea6fe98e4b00a66d4a951b2"}, {"problem": 58, "code": "(fn [& fs]\n    (fn [& args]\n      (first\n       (loop [fs* (reverse fs)\n              val args]\n         (if (empty? fs*)\n           val\n           (recur (rest fs*)\n                  [(apply (first fs*) val)]))))))", "user": "5f0aa72de4b09a3f05b71808"}, {"problem": 58, "code": "(fn [& args]\n         (fn [& s]\n           (let [args (reverse args)\n                 first-f (first args)\n                 args (rest args)\n                 first-r (apply first-f s)]\n             (->> args\n                  (reduce #(%2 %1) first-r)))))", "user": "5beadeb5e4b0f319e2d7ec88"}, {"problem": 58, "code": "(fn [& fs] (reduce (fn [f g] #(f (apply g %&))) fs))", "user": "5f5f2eafe4b02876ed9fcff5"}, {"problem": 58, "code": "(fn combine\n  ([] identity)\n  ([f] f)\n  ([f g]\n   (fn\n     ([& args] (f (apply g args)))))\n  ([f g & fs]\n   (reduce combine (list* f g fs))))", "user": "5f74770fe4b02876ed9fd09f"}, {"problem": 58, "code": "(fn comp2\n  ([f] f)\n  ([f g]\n   (fn\n     ([] (f (g)))\n     ([& args] (f (apply g args)))))\n  ([f g & args]\n   (reduce comp2 (list* f g args))))", "user": "5f6e23e6e4b02876ed9fd064"}, {"problem": 58, "code": "(fn [& functions]\n    (fn [& args]\n      (loop [fn-list (reverse functions)\n             state args]\n        (if (= 0 (count fn-list))\n          state\n          (recur\n           (rest fn-list)\n           (if (= (count functions) (count fn-list))\n             (apply (first fn-list) state)\n             ((first fn-list) state)))))))", "user": "5f79bff2e4b02876ed9fd0ca"}, {"problem": 58, "code": "(fn [& fns]\n  (fn [& x] (first (reduce\n    (fn [acc f] [(apply f acc)])\n    x\n    (reverse fns)\n    )))\n  )", "user": "5f58db95e4b0a0bc16850a9a"}, {"problem": 58, "code": "(fn f [& fns] \n  (fn o [& orig-args] (reduce (fn r [a f] (f a)) (apply (last fns) orig-args) (rest (reverse fns)))))", "user": "5f5b624de4b05ea7b9adc42f"}, {"problem": 58, "code": "(fn [& fns]\n  (fn [& args]\n    (loop [i (- (count fns) 2) result (apply (last fns) args)]\n      (if (< i 0)\n        result\n        (recur (dec i) ((nth fns i) result))))))", "user": "5e8ce2fee4b0cb0169546328"}, {"problem": 58, "code": "(fn [& fs]\n    (fn [& args] (first (reduce (fn [a b] (list (apply b a))) args (reverse fs)))))", "user": "5f82cfcce4b0c071e6c840fb"}, {"problem": 58, "code": "(fn [& fs] (reduce (fn [f g] #(f (apply g %&))) fs))", "user": "507e68abe4b085af06e3afd2"}, {"problem": 58, "code": "(fn [x & g] (let [f-compose (fn f-compose [h t]\n                              (if (empty? t)\n                                (fn [& x] (apply h x))\n                                (fn [& x] (h (apply (f-compose (first t) (rest t)) x)))))]\n              (f-compose x g)))", "user": "5f86a98be4b0649ffcda4caa"}, {"problem": 58, "code": "(fn compos\n  [& args]\n  (fn [& more]\n    (let [rev-args (reverse args)]\n      (loop [s (next rev-args)\n             r (apply (first rev-args) more)]\n          (if s\n            (recur (next s)\n                   ((first s) r))\n            r)))))", "user": "4e8a170c535d3e98b802328f"}, {"problem": 58, "code": "(fn fcmp [& fs]\n  (let [fs (reverse fs)\n        f1 (first fs)]\n    (fn [& args] (reduce #(%2 %1) (apply f1 args) (rest fs)))))", "user": "5f8b06afe4b0715f5002d74a"}, {"problem": 58, "code": "(fn ([] identity)\n    ([& fs]\n     (let [[f & rfs] (reverse fs)]\n       (fn [& args]\n         (reduce #(%2 %1) (apply f args) rfs)))))", "user": "596a66cde4b069c0a1a19803"}, {"problem": 58, "code": "(fn \n  ([f g & fs]\n     (reduce\n      (fn [f g] \n        (fn \n          ([] (f (g)))\n          ([x] (f (g x)))\n          ([x & args] (f (apply g x args)))\n        )\n      )\n     (list* f g fs))))", "user": "5f8b7506e4b0715f5002d74c"}, {"problem": 58, "code": "(fn [& funcs]\n       (let [fs (reverse funcs)]\n         (fn [& args]\n           (loop [res (apply (first fs) args)\n                  fs  (rest fs)]\n             (if (empty? fs)\n               res\n               (recur ((first fs) res)\n                      (rest fs)))))))", "user": "5f93529ae4b0715f5002d7bc"}, {"problem": 58, "code": "(fn [& fs] (reduce (fn [f g] #(f (apply g %&))) fs))", "user": "5f5358b7e4b0a0bc16850a77"}, {"problem": 58, "code": "(fn func-comp\n  [& funcs]\n  (fn [& x]\n    (first (reduce\n             (fn [result func] (vector (apply func result)))\n             x\n             (reverse funcs)))))", "user": "5f3103aee4b0574c87022c24"}, {"problem": 58, "code": "(fn func-comp [f & rest]\n  (if (nil? rest)\n    (fn [& args] (apply f args))\n    (fn [& args] (f (apply (apply func-comp rest) args)))))", "user": "5f63684be4b02876ed9fd012"}, {"problem": 58, "code": "(fn my-comp-2 ([] identity)\n  ([f1] f1)\n  ([f1 & ff]\n   (fn [& x]\n     (f1 (apply (apply my-comp-2 ff) x)))))\n\n;(fn my-comp ([] identity)\n;  ([f1] f1)\n;  ([f1 f2]\n;   (fn [x] (f1 (f2 x))))\n;  ([f1 f2 f3]\n;   (fn [& x]\n;     (f1 (f2 (apply f3 x))))))", "user": "5b044436e4b0cc2b61a3bd71"}, {"problem": 58, "code": "(fn cool-comp [& funs]\n  (reduce\n   #(fn[& args]\n      (%2 (apply % args)))\n   (reverse funs)))", "user": "5f838122e4b01aacbe7a2715"}, {"problem": 58, "code": "(fn comp1 [& fs]\n  (fn [& args]\n    (let [rfs (reverse fs)]\n      (reduce (fn [acc f] (f acc)) (apply (first rfs) args) (rest rfs)))))", "user": "5fa74b82e4b0fa27300f3dda"}, {"problem": 58, "code": "(fn compose [& fs]\n  (if (= 1 (count fs))\n    (first fs)\n  (fn [& args]\n    ((first fs) (apply (apply compose (rest fs)) args)))))", "user": "5fa8424ce4b0fa27300f3de5"}, {"problem": 58, "code": "(fn [& fs] (fn [& args] (let [[h & t] (reverse fs)] (reduce #(%2 %1) (apply h args) t))))", "user": "5e8c3e8fe4b0cb0169546322"}, {"problem": 58, "code": "(fn com \n    ([f] (fn [& arg] (apply f arg)))\n    ([f & fs] (fn [& arg]\n        (f (apply (apply com fs) arg)))))", "user": "5fa358a1e4b0f0ebd91b77fd"}, {"problem": 58, "code": "(fn [& funcs]\n       (fn [& params]\n         (first\n          (reduce\n           (fn [acc func]\n             (list (apply func acc)))\n           (cons params (reverse funcs))))))", "user": "58db48a5e4b0a4d5acaab679"}, {"problem": 58, "code": "(fn [& fs] (reduce (fn [acc f] (fn [& args] (acc (apply f args)))) fs))", "user": "5fad8efee4b08cb800c85af3"}, {"problem": 58, "code": "(fn [& fs] (reduce (fn [f g] #(f (apply g %&))) fs))", "user": "5face7fce4b08cb800c85ae9"}, {"problem": 58, "code": "(fn [& fs] (reduce (fn [f g] #(f (apply g %&))) fs))", "user": "5facfb48e4b08cb800c85aea"}, {"problem": 58, "code": "(fn foo\n  ;;([] (fn [x] x))\n  ;;([f] f)\n  ([f1 f2] (fn \n             ([] f1 (f2))\n             ([x] (f1 (f2 x)))\n             ([x & args] (f1 (apply f2 x args)))))\n  ([f1 f2 & fs] (reduce foo (list* f1 f2 fs))))", "user": "5fb3a096e4b08cb800c85b35"}, {"problem": 58, "code": "(fn [& fns]\n  (let [[f0 & rfns] (reverse fns)]\n    (fn [& args]\n      (reduce (fn [x f] (f x)) (apply f0 args) rfns))))", "user": "52851da0e4b0239c8a67adea"}, {"problem": 58, "code": "(fn [& args] (println args)\n    (loop [ops (rest args) r (first args)]\n      (if (= (count ops) 1)\n        (do (println 1 (count ops))\n            (fn [& s] (println s) (r (apply (first ops) s))))\n        (do (println 2)\n            (recur (rest ops)\n                   (fn [& s] (r (apply (first ops) s))))))))", "user": "5f9c4113e4b0715f5002d821"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& args]\n    (let [fs (reverse fs)]\n      (reduce (fn [a b] (b a)) (apply (first fs) args) (rest fs)))))", "user": "5f4fe1fae4b0a0bc16850a5c"}, {"problem": 58, "code": "(fn [& functions]\n  (fn [& params]\n    (let [rev (reverse functions)]\n      (reduce\n       #(%2 %1)\n       (apply (first rev) params)\n       (rest rev)))))", "user": "5f597522e4b0a0bc16850a9e"}, {"problem": 58, "code": "(fn [& fns] (let [rfns (reverse fns)] \n              (fn [& params] \n                (reduce #(%2 %1) (apply (first rfns) params) (rest rfns)))))", "user": "5fae3d8ae4b08cb800c85afa"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& args]\n    (let [funcs (reverse fs)]\n      ((fn compose [rst result]\n         (if (empty? rst) result\n           (compose (rest rst) ((first rst) result)))) (rest funcs) (apply (first funcs) args)))))", "user": "58f98231e4b0438e51c2cf4c"}, {"problem": 58, "code": "(fn [& funs]\n\n    (reduce\n\n      (fn [f g]\n\n        (fn [& args]\n\n          (f (apply g args)))) funs))", "user": "5fab7ea6e4b08cb800c85ad8"}, {"problem": 58, "code": "(fn f \n  [& xs] (fn [& args]\n           (reduce #( %2 %) (apply (last xs) args) (rest (reverse xs)))\n                       \n              ))", "user": "5fa96ddbe4b0fa27300f3dec"}, {"problem": 58, "code": "(fn [& fns]\n  (let [[fn1 & fnrest] (reverse fns)\n        baseFn (fn [args]\n                 (if (coll? (first args))\n                   (fn1 (first args)) (apply fn1 args)))]\n    (fn [& args]\n      (reduce (fn [acc curr] (curr acc)) (baseFn args) fnrest))))", "user": "5fac50f4e4b08cb800c85ae5"}, {"problem": 58, "code": "(fn [& fns]\n  (reduce (fn [f g] (fn [& args] (f (apply g args))))\n          identity\n          fns))", "user": "5f90aeefe4b0715f5002d799"}, {"problem": 58, "code": "(fn [ & fs]\n    (fn [& x]\n      (first\n       (reduce (fn [p f] (vector (apply f p))) x  (reverse fs)))))", "user": "573a0ecce4b0cd1946bd1088"}, {"problem": 58, "code": "(fn [& fs]\n    #(reduce\n       (fn [accum f] (f accum))\n       (apply (last fs) %&)\n       (reverse (drop-last fs))))", "user": "5f331015e4b0574c87022c37"}, {"problem": 58, "code": "(fn my-comp[& fs] (reduce (fn [f g] #(f (apply g %&))) fs))", "user": "5f96fa49e4b0715f5002d7e9"}, {"problem": 58, "code": "(fn [& fns]\n    (fn [& args]\n      (reduce (fn [acc f]\n                (f acc))\n              (apply (first (reverse fns)) args)\n              (rest (reverse fns)))))", "user": "4f6d23cde4b07046d9f4efc6"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& args]\n    (first (reduce #(list (apply %2 %1)) args (reverse fs)))))", "user": "5b77248ae4b047b03b2036e7"}, {"problem": 58, "code": "(fn cmp [& fs]\n  (reduce (fn [f g]\n            (fn [& args]\n              (f (apply g args))))\n          (list* fs)))", "user": "5fea32f3e4b05ac5b16ea1aa"}, {"problem": 58, "code": "(fn [& input]\n  (fn [& args] (let [fns (reverse input)]\n                 (reduce #(%2 %1) (apply (first fns) args) (rest fns))))\n)", "user": "54c13b87e4b0ed20f4ff6f20"}, {"problem": 58, "code": "(fn [& f]\n  #(do\n    (loop [[e & f] (reverse f)\n           a %&]\n      (if e\n        (recur\n         f\n         [(apply e a)])\n        (a 0))\n      )))", "user": "5e042dede4b0a607a9a45d69"}, {"problem": 58, "code": "(fn compose [& fs] (fn h [& args] (first (reduce #(vector (apply %2 %1)) args (reverse fs)))))", "user": "5fe0d4d4e4b05ac5b16ea164"}, {"problem": 58, "code": "(fn cf [f & fs]\n         (if (empty? fs)\n           f\n           (fn [& args]\n             (let [pf (apply cf fs)]\n               (f (apply pf args))))))", "user": "546c4377e4b00cfc9eacc177"}, {"problem": 58, "code": "(fn [& fs] (reduce (fn [f g] #(f (apply g %&))) fs))", "user": "5fe362d9e4b05ac5b16ea179"}, {"problem": 58, "code": "(fn [& fs] (reduce (fn [f g] #(f (apply g %&))) fs))", "user": "5ff3aca3e4b05ac5b16ea205"}, {"problem": 58, "code": "(fn [& s]\n  #(reduce (fn [c f] (f c))\n           (apply (last s) %&)\n           (rest (reverse s))))", "user": "54d7e277e4b0a52adc2e2031"}, {"problem": 58, "code": "(fn [& args] \n    (fn [& xs]\n     (first (reduce #(list (apply %2 %1)) xs (reverse args)))))", "user": "5fd8bcb3e4b05ac5b16ea11b"}, {"problem": 58, "code": "(fn [& fncs]\n  (fn [& xs]\n    ((fn b [[f & fs]]\n       (if fs\n         (f (b fs))\n         (apply f xs))) fncs)))", "user": "5fa17538e4b0f0ebd91b77e3"}, {"problem": 58, "code": "#(reduce (fn [f g]\n             (fn [& args] (f (apply g args))))\n          %&)", "user": "5ff93da9e4b06df49cee14af"}, {"problem": 58, "code": "(fn [& fs] (reduce (fn [f g] #(f (apply g %&))) fs))", "user": "5fd10010e4b07e53c2f3f02a"}, {"problem": 58, "code": "(fn [& fs] (reduce (fn [f g] #(f (apply g %&))) fs))", "user": "5ff676a9e4b06df49cee1497"}, {"problem": 58, "code": "(fn [& fs]\n    (fn [& args]\n      (first\n       (reduce #(vector (apply %2 %1))\n               args\n               (reverse fs)))))\n\n;; (fn [& fs]\n;;     (fn [& args]\n;;       (reduce #(%2 %1)\n;;               (apply (last fs) args)\n;;               (->> fs\n;;                    (reverse)\n;;                    (rest )))))\n\n;; recur-version\n;; (fn [& fs]\n;;     (fn [& args]\n;;       (let [sorted-fs (reverse fs)\n;;             do-fs (fn [[f & r-fs :as rest-fs] after-apply-fs]\n;;                     (if (empty? rest-fs)\n;;                       (first after-apply-fs)\n;;                       (recur r-fs (vector (apply f after-apply-fs)))))]\n;;         (do-fs sorted-fs args))))\n\n;; loop-version\n;; (fn [& fs]\n;;     (fn [& args]\n;;       (let [order-fs (reverse fs)\n;;             first-f (first order-fs)\n;;             true-fs (rest order-fs)]\n;;         (loop [[f & rest-fs :as current-fs] true-fs\n;;                apply-fs-result (apply first-f args)]\n;;           (if (empty? current-fs)\n;;             apply-fs-result\n;;             (recur rest-fs (f apply-fs-result)))))))\n\n;; _caterpillar's solution:\n;; (fn myComp\n;;     ([f] f)\n;;     ([f1 f2]\n;;      (fn [& args]\n;;        (f1 (apply f2 args))))\n;;     ([f1 f2 & fs]\n;;      (apply myComp (myComp f1 f2) fs)))", "user": "591ad160e4b09b4ee5954bdf"}, {"problem": 58, "code": "(fn solution\n    ([] identity)\n    ([f] f)\n    ([f g]\n     (fn\n       ([] (f (g)))\n       ([x] (f (g x)))\n       ([x y] (f (g x y)))\n       ([x y z] (f (g x y z)))\n       ([x y z & args] (f (apply g x y z args)))))\n    ([f g & fs]\n     (reduce solution (list* f g fs))))", "user": "5ff5bc1ae4b06df49cee1490"}, {"problem": 58, "code": "(fn [& funcs]\n  (let [cf (reduce\n            (fn [aggf f] #(->> % aggf f))\n            (reverse (drop-last funcs)))]\n    (fn [& args] (cf (apply (last funcs) args)))\n    )\n  )", "user": "6004c750e4b074f607df6645"}, {"problem": 58, "code": "(fn composition\n  ([fn & fns] (composition (cons fn fns)))\n  ([fns]\n   (if (empty? fns)\n     identity\n     (fn\n       ([arg] ((composition (butlast fns)) ((last fns) arg)))\n       ([arg & args] ((composition (butlast fns)) (apply (last fns) (cons arg args))))))))", "user": "5f37263de4b0574c87022c4e"}, {"problem": 58, "code": "(fn foo [f & fs]\n    (if (empty? fs)\n        f\n        (fn [& xs]\n            (f (apply (apply foo fs) xs)))))", "user": "600ae927e4b074f607df6689"}, {"problem": 58, "code": "(fn [& xs]\n  (fn [& ys]\n    (reduce #(%2 %1)\n            (apply (last xs) ys) (rest (reverse xs)))))", "user": "5fec4f5ee4b05ac5b16ea1bf"}, {"problem": 58, "code": "(fn [& fns]\n  (fn [& args]\n    (let [ordered-fns (reverse fns)\n          first-result (apply (first ordered-fns) args)\n          remaining-fns (rest ordered-fns)])\n    (reduce (fn [result next-fn] (next-fn result))\n            (apply (last fns) args) \n            (rest (reverse fns)))))", "user": "5fed2610e4b05ac5b16ea1c7"}, {"problem": 58, "code": "(fn a [& fs]\n  (let [fs (reverse fs)]\n    (fn b [x & xs]\n      (reduce (fn [v f]\n                (f v))\n              (apply (first fs)\n                     (if xs (cons x xs) [x]))\n              (rest fs)))))", "user": "583369e6e4b089d5ab817c9c"}, {"problem": 58, "code": ";(fn [& fs] (reduce #(fn [& args] (% (apply %2 args))) fs))\n\n#(reduce (fn [c f] (fn [& args] (c (apply f args)))) %&)", "user": "5e3e23d9e4b01d43a70e8e20"}, {"problem": 58, "code": "(fn [& fns] \n  #(loop [f (last fns) fs (drop-last 1 fns) v %&] \n     (if (nil? f) \n       (first v)\n       (recur (last fs) (drop-last 1 fs) [(apply f v)]))))", "user": "600cb742e4b074f607df6696"}, {"problem": 58, "code": "(fn f-composition [& fs]\n    (fn [& args]\n        ((fn rec [fs args]\n            (if (empty? (rest fs))\n                (apply (first fs) args)\n                ((first fs) (rec (rest fs) args)))) fs args)))", "user": "601004d6e4b074f607df66b2"}, {"problem": 58, "code": "(letfn [(compose\n  ([] identity)\n  ([f] f)\n  ([f & fns] (fn [& args] (f (apply (apply compose fns) args)))))]\n  compose)", "user": "4f4b62e6e4b03ad3f0c10c78"}, {"problem": 58, "code": "(fn comp'\n  ([f] (fn [& xs] (apply f xs)))\n  ([f & fs]\n   (let [comped-f (apply comp' fs)]\n     (fn [& xs]\n       (->> xs\n            (apply comped-f)\n            f)))))", "user": "601aaa93e4b0bf4ca6b10926"}, {"problem": 58, "code": "(fn [& funcs]\n  (reduce (fn [fs f] (fn [& x] (fs (apply f x))))\n          identity\n          funcs))", "user": "5338e33fe4b0e30313ee6ca1"}, {"problem": 58, "code": "(fn\n ([f g] #(f (apply g %&)))\n ([f g h] #(f (g (apply h %&)))))", "user": "5fb68f09e4b08cb800c85b58"}, {"problem": 58, "code": "(fn [& fs] \n  (fn [& rst]\n    (let [[f & fs] (reverse fs)]\n    \t(reduce #(%2 %) (apply f rst) fs))))", "user": "6011b89ee4b074f607df66bc"}, {"problem": 58, "code": "(fn comb [& funcs]\n  (fn [& args]\n    (first\n      (reduce #(vector (apply %2 %1)) args (reverse funcs )))))", "user": "601bdcb3e4b0bf4ca6b10930"}, {"problem": 58, "code": "(fn [ & fns ]\n  (fn [ & l]\n    (reduce\n      (fn [acc f] (f acc))\n      (apply (first (take-last 1 fns)) l)\n      (reverse (drop-last 1 fns)))))", "user": "602049b8e4b0bf4ca6b10961"}, {"problem": 58, "code": "(fn comp* [& fs]\n  (fn [& args]\n    (let [fsr (reverse fs)]\n      (let [f (first fsr)\n            xs (rest fsr)\n            f* (fn [agg f**]\n                 (f** agg))]\n        (reduce f* (apply f args) xs)))))", "user": "6022844de4b0d5df2af22203"}, {"problem": 58, "code": "#(fn [& args]\n   (loop [func-list %&\n          result args]\n     (if func-list\n       (recur (butlast func-list) (list (apply (last func-list) result)))\n       (first result))\n     ))", "user": "60096aabe4b074f607df667f"}, {"problem": 58, "code": "#(reduce\n     (fn [a c]\n       (fn [& x]\n         (a (apply c x))))\n     %&)", "user": "4e38f245535deb9a81d77f3e"}, {"problem": 58, "code": "(fn [& fs] (reduce (fn [f g] #(f (apply g %&))) fs))", "user": "5ff709e4e4b06df49cee149b"}, {"problem": 58, "code": "(fn function-composition [& functions]\n  (fn [& arguments]\n    (first\n      (reduce (fn [result function]\n                (list (apply function result)))\n              arguments\n              (reverse functions)))))", "user": "5fbf6fe7e4b0ad6fc3476147"}, {"problem": 58, "code": "(fn compose [& fns]\n(fn [& opts]\n(reduce (fn [x y](y x))\n(apply (last fns) opts)\n(rest(reverse fns)))))", "user": "60264d89e4b0d5df2af2222d"}, {"problem": 58, "code": "(fn c [& n]\n  (fn y [& x]\n    (reduce #(%2 %) (apply (last n) x) (rest (reverse n)))))", "user": "602d5eade4b0d5df2af22279"}, {"problem": 58, "code": "(fn my-comp [& fs]\n  (fn [& args]\n    (let [rev-fs (reverse fs)\n          rest-fs (rest rev-fs)]\n      (reduce #(%2 %1) (apply (first rev-fs) args) rest-fs))))", "user": "5baba1ece4b0a20761a23482"}, {"problem": 58, "code": "(fn [& fs] (reduce (fn [f g] #(f (apply g %&))) fs))", "user": "5fd361f2e4b07e53c2f3f04e"}, {"problem": 58, "code": "(fn [& fs] (reduce (fn [f g] #(f (apply g %&))) fs))", "user": "60329afce4b0d5df2af222b8"}, {"problem": 58, "code": "(fn [& fs] \n  (reduce \n   (fn [f g] #(f (apply g %&))) fs))", "user": "603454cbe4b0d5df2af222cb"}, {"problem": 58, "code": "(fn my-comp\n  ([] identity)\n  ([f] f)\n  ([f g]\n   (fn\n     ([] (f (g)))\n     ([x] (f (g x)))\n     ([x & ys] (f (apply g x ys)))))\n  ([f g & fs]\n   (reduce my-comp (list* f g fs))))", "user": "5fada7cce4b08cb800c85af5"}, {"problem": 58, "code": "#(reduce (fn [f g] (fn [& args] (f (apply g args)))) (list* %&))", "user": "6026737ee4b0d5df2af2222f"}, {"problem": 58, "code": "(fn abcd [& fs]\n     (reduce (fn [f g] #(f (apply g %&))) fs))", "user": "5fe09d1fe4b05ac5b16ea15b"}, {"problem": 58, "code": "(fn [& fs] (reduce (fn [f g] #(f (apply g %&))) fs))", "user": "603ba3a8e4b0d5df2af22300"}, {"problem": 58, "code": "(fn c ([f g] (fn [& x] (f (apply g x)))) ([f g & h] (reduce c (c f g) h)))", "user": "5d62ce13e4b0c9e5857d501f"}, {"problem": 58, "code": "(fn c [& f]\n    (if (= 1 (count f))\n      (first f)\n      (fn [& d]\n        ((first f) (apply (apply c (rest f)) d)))))", "user": "603ae21de4b0d5df2af222fb"}, {"problem": 58, "code": "(fn my-comp [& functions]\n  (let [functions (reverse functions)]\n    (fn [& params]\n      (reduce (fn [acc f] (f acc))\n              (apply (first functions) params)\n              (rest functions)))))", "user": "604a30c6e4b02d28681c77f0"}, {"problem": 58, "code": "(fn mc \n  ([f g] (fn [& args] (f (apply g args))))\n  ([f g & fns] (reduce mc (list* f g fns))))", "user": "6020365ae4b0bf4ca6b10960"}, {"problem": 58, "code": "(fn my-comp [& fs]\n  (let [fs (reverse fs)]\n    (fn [& args]\n      (loop [ret (apply (first fs) args)\n             fs  (next fs)]\n        (if fs\n          (recur ((first fs)ret)  (next fs))\n          ret)))))", "user": "60471241e4b02d28681c77c9"}, {"problem": 58, "code": "(fn comp2\n  ([f] f)\n  ([f & fs]\n   (fn [& xs]\n     (f (apply (apply comp2 fs) xs)))))", "user": "60460824e4b02d28681c77bc"}, {"problem": 58, "code": "(fn f [& x] \n  (fn [& y]\n    (reduce \n     #(%2 %) \n     (apply (last x) y)\n     (rest (reverse x)))))", "user": "604d3cb1e4b0b7ec0ac60ac2"}, {"problem": 58, "code": "(fn [& arguments]\n  (let [[f & functions] (reverse arguments)]\n    (fn [& args]\n      (reduce (fn [acc item] (item acc)) (apply f args) functions))))", "user": "5fcf86c2e4b07e53c2f3f00d"}, {"problem": 58, "code": "(fn [& fs] (reduce (fn [f g] #(f (apply g %&))) fs))", "user": "603a6c40e4b0d5df2af222f7"}, {"problem": 58, "code": "(fn [& fs]\n  (reduce (fn [f g] \n            #(f (apply g %&))) fs))", "user": "60504383e4b056659d6341fa"}, {"problem": 58, "code": "(fn comb [& funcs]\n  (fn [& args]\n    (first\n      (reduce #(vector (apply %2 %1)) args (reverse funcs )))))", "user": "5d28c6dce4b092dab7f59c85"}, {"problem": 58, "code": "(fn [ & fx ] (fn [ & args] (let [[f1 & fr] (reverse fx)] (reduce (fn [v f] (f v)) (apply f1 args) fr))))", "user": "5839f079e4b089d5ab817d48"}, {"problem": 58, "code": "(fn [& fns]\n    (let [c2 (fn [f g]\n               (fn [& args]\n                 (f (apply g args))))]\n      (reduce c2 identity fns)))", "user": "6026d2cae4b0d5df2af22232"}, {"problem": 58, "code": "(fn function-composition [& functions]\n  (fn [& args]\n    (first\n      (reduce (fn [result function]\n                (list (apply function result)))\n              args\n              (reverse functions)))))", "user": "4e586949535d8a8b8723a292"}, {"problem": 58, "code": "(fn rec [& [f & fs]]\n  (fn [& args]\n    (if (empty? fs)\n      (apply f args)\n      (f (apply (apply rec fs) args)))))", "user": "605b7a90e4b079a07f8593fc"}, {"problem": 58, "code": "(fn\n  [& fns]\n  (fn [& args] (first (reduce #(list (apply %2 %1)) args (reverse fns)))))", "user": "5ec02e20e4b00a66d4a95288"}, {"problem": 58, "code": "(fn __ [& fs]\n  (fn [& args]\n    (loop [fs fs\n           xs args]\n      (println fs xs)\n      (if (seq fs)\n        (recur (butlast fs) (list (apply (last fs) xs)))\n        (first xs)))))", "user": "526759b3e4b03e8d9a4a715b"}, {"problem": 58, "code": "(fn [& fns]\n    (fn [& args]\n      (let [reversed (reverse fns)]\n        (reduce (fn [result f]\n                  (f result))\n                (if (> (count args) 1) \n                  (reduce (first reversed) args)\n                  ((first reversed) (first args)))\n                (rest reversed)))))", "user": "5d5c2730e4b09db18d4482ea"}, {"problem": 58, "code": "(fn [& xs]\n  (fn [& ys]\n    (reduce #(%2 %1)\n            (apply (last xs) ys) (rest (reverse xs)))))", "user": "60654263e4b069485764ddc9"}, {"problem": 58, "code": "(fn compose [& fs]\n  (fn [& xs] (first (reduce #(list (apply %2 %1)) xs (reverse fs)))))", "user": "60606490e4b03746e80ebf67"}, {"problem": 58, "code": "(fn [& funs] (reduce (fn [x y] (fn [& z] (x (apply y z)))) identity funs))", "user": "6066c745e4b069485764ddd8"}, {"problem": 58, "code": "#(reduce (fn[f1 f2]\n             (fn [& args]\n               (f2 (apply f1 args))))\n           (reverse %&))", "user": "54be7c0de4b0ed20f4ff6eec"}, {"problem": 58, "code": "(fn f [& fns]\n  (fn [& args]\n    (let [init (apply (last fns) args)\n          fns (reverse (drop-last fns))]\n\n      (reduce (fn [x f] (f x))\n              init\n              fns))))", "user": "60537cd1e4b04c8f2157d152"}, {"problem": 58, "code": "(fn problem-58 [& fns]\n  (fn [& args]\n\t(reduce (fn [acc f] (f acc))\n\t\t\t(apply (last fns) args)\n\t\t\t(rest (reverse fns)))))", "user": "5d669613e4b0db5d338d15ea"}, {"problem": 58, "code": "(fn [& fs]\r\n  (reduce\r\n    (fn [f g] \r\n      (fn [& args]\r\n        (f (apply g args))))\r\n    fs))", "user": "606e0a42e4b069485764de19"}, {"problem": 58, "code": "(fn cm [f & fs] (if (seq fs) (fn [& xs] (f (apply (apply cm fs) xs))) f))", "user": "51435753e4b0c172af7558d5"}, {"problem": 58, "code": "(fn [& fs]\n  (let [[f1 & fr] (reverse fs)]\n    (fn [& s]\n      (reduce (fn [acc f] (f acc))\n              (apply f1 s)\n              fr))))", "user": "59adec09e4b0e1f4e384c897"}, {"problem": 58, "code": "(fn [& fn-list]\n    (fn [& args] (first (reduce\n                         (fn [coll f]\n                           (do\n                             (println f coll)\n                             [(apply f coll)])) args (reverse fn-list)))))", "user": "604ccb9fe4b0b7ec0ac60ac1"}, {"problem": 58, "code": "(fn function-comp\n  [& fs]\n  (fn [& coll]\n    (first (reduce (fn [my-list f]\n                     [(apply f my-list)])\n                   coll\n                   (reverse fs)))))", "user": "60396c95e4b0d5df2af222f4"}, {"problem": 58, "code": "(fn compose\n  ([] identity)\n  ([f] f)\n  ([f g]\n   (fn\n     ([] (f (g)))\n     ([& args] (f (apply g args)))))\n  ([f g & fs]\n   (reduce compose (list* f g fs))))", "user": "606d7f1ce4b069485764de14"}, {"problem": 58, "code": "(fn [& funcs]\n    (fn [& args]\n      (first\n        (reduce #(vector (apply %2 %1)) args (reverse funcs )))))", "user": "605b319de4b079a07f8593f7"}, {"problem": 58, "code": "(fn compo [& [f & fs]]\n  (fn [& xs]\n    (if fs\n      (let [new-xs (apply (apply compo fs) xs)]\n        (f new-xs))\n      (apply f xs))))", "user": "605b49b7e4b079a07f8593f8"}, {"problem": 58, "code": "(fn my-comp\n  ([] identity)\n  ([f] f)\n  ([f & fs] (fn [& args] (f (apply (apply my-comp fs) args)))))", "user": "606b16b8e4b069485764ddf7"}, {"problem": 58, "code": "(fn [& fs] (reduce (fn [f g] #(f (apply g %&))) fs))", "user": "606ff89be4b069485764de22"}, {"problem": 58, "code": "(fn my-comp2 [& funcs]\n  (reduce (fn [f v] (fn [& a] (f (apply v a)))) funcs))", "user": "5edd05bfe4b0c7845d86b0f3"}, {"problem": 58, "code": "(fn mycomp\n  ([] identity)\n  ([f] f)\n  ([f g] \n     (fn \n       ([] (f (g)))\n       ([x] (f (g x)))\n       ([x y] (f (g x y)))\n       ([x y z] (f (g x y z)))\n       ([x y z & args] (f (apply g x y z args)))))\n  ([f g & fs]\n     (reduce mycomp (list* f g fs))))", "user": "605f5c69e4b03746e80ebf5e"}, {"problem": 58, "code": "(fn my-comp\n  [& fs]\n  (let [sf (reverse fs)]\n    (fn [& args]\n      ( reduce (fn [z y] (y z)) (apply (first sf) args) (rest sf)))))", "user": "6076adb2e4b069485764de60"}, {"problem": 58, "code": "(fn [& fs]\n  (fn func [& x]\n    (loop [funcs (butlast fs) args (apply (last fs) x)]\n      (if (seq funcs)\n        (recur (butlast funcs) ((last funcs) args))\n        args))))", "user": "5f9f032fe4b0715f5002d839"}, {"problem": 58, "code": "(fn [& fns]\n  (fn [& x]\n    (first (reduce #(list (apply %2 %1)) x (reverse fns)))))", "user": "5e3d183fe4b01d43a70e8e11"}, {"problem": 58, "code": "(fn [& fns]\n  (fn [& args]\n    (first (reduce (fn [acc next] (list (apply next acc))) args (reverse fns)))))", "user": "607d6bc1e4b03d835a6eaecc"}, {"problem": 58, "code": "(fn [& fns]\n  (reduce (fn [f g] \n            (fn [& args]\n              (f (apply g args)))) identity fns))", "user": "60836285e4b0736b099e42e4"}, {"problem": 58, "code": "(fn\n([f g] (fn [& args] (f (apply g args))))\n([f g h] (fn [& args] (f (g (apply h args))))))", "user": "606a70a5e4b069485764ddf2"}, {"problem": 58, "code": "(fn [& funcs] (fn [& args]\n                  (if (empty? funcs)\n                    args\n                    (loop [base (apply (last funcs) args) cur_funcs (drop-last funcs)]\n                      (if (empty? cur_funcs)\n                        base\n                        (recur ((last cur_funcs) base) (drop-last cur_funcs)))))))", "user": "607bd80be4b0a637ed780379"}, {"problem": 58, "code": "(fn my-comp \n  ([f g] (fn [& args] (f (apply g args))))\n  ([f g & fs] (reduce my-comp (list* f g fs))))", "user": "608256d7e4b0736b099e42da"}, {"problem": 58, "code": "(fn [& fs] (fn [& args] (reduce #(%2 %1) (apply (last fs) args) (rest (reverse fs)))))", "user": "5f548678e4b0a0bc16850a7e"}, {"problem": 58, "code": ";; based on clojure.core/comp\n;; (fn compose\n;;   ([f] f)\n;;   ([f g] (fn [& args] (f (apply g args))))\n;;   ([f g & fs]\n;;    (reduce compose (concat [f g] fs) )))\n(fn [& fs]\n  (reduce (fn [composed f]\n            (fn [& args] (f (apply composed args))))\n          (reverse fs)))", "user": "60794173e4b0a637ed78035d"}, {"problem": 58, "code": "(fn [& funs]\n  (let [[ff & rf] (reverse funs)]\n    (fn [& args] (reduce #(%2 %1) (apply ff args) rf))))", "user": "60849bd6e4b0736b099e42f2"}, {"problem": 58, "code": "(fn [& fs] (reduce (fn [f g] #(f (apply g %&))) fs))", "user": "6081b7fce4b0736b099e42d4"}, {"problem": 58, "code": "(fn [& fs]\n  (let [[f1 & fr] (reverse fs)]\n    (fn [& s]\n      (reduce (fn [acc f] (f acc))\n              (apply f1 s)\n              fr))))", "user": "608e3bf7e4b03bd49d9f36bd"}, {"problem": 58, "code": "(fn [& seqq]\n  (reduce (fn [f1 f2] #(f1 (apply f2 %&))) seqq))\n\n;(fn [& fs] (reduce (fn [f g] #(f (apply g %&))) fs))", "user": "6088395de4b0ae75613dcee2"}, {"problem": 58, "code": "(fn my-comp \n  ([] identity)\n  ([f] f)\n  ([f g] (fn [& args] (f (apply g args))))\n  ([f g & more]\n   (fn [& args] (f (g (apply (apply my-comp more) args))))))", "user": "5b4b8cd6e4b02d533a91bc9f"}, {"problem": 58, "code": "(fn [& fns]  \n  (let [[f1 & rest-fns] (reverse fns)\n        exec-f (fn [result f] (f result))]\n  (fn [& args]\n    (reduce exec-f (apply f1 args) rest-fns))))", "user": "5f82609ae4b0c071e6c840f9"}, {"problem": 58, "code": "(fn my-comp [f & fs]\n  (fn [arg & args]\n    (if (empty? fs)\n      (apply f arg args)\n      (f (apply (apply my-comp fs) arg args)))))", "user": "589f37e0e4b02bd94d917e79"}, {"problem": 58, "code": "(fn [& fns] (fn [& x] (->> (rest (reverse fns)) (reduce #(%2 %1) (apply (last fns) x)))))", "user": "609e01afe4b00e9e6653c420"}, {"problem": 58, "code": "(fn f1\n    ([f g] (fn ([& args] (f (apply g args)))))\n    ([f g & fs] (reduce f1 (list* f g fs))))", "user": "5eff339ae4b0cf489e8d7f0c"}, {"problem": 58, "code": "(fn [& fs]\n  (reduce\n   (fn [g f] (fn [& xs] (g (apply f xs))))\n   fs))", "user": "5fb46916e4b08cb800c85b46"}, {"problem": 58, "code": "(fn my-comp\n  [& fs]\n  (let [fs* (reverse fs)]\n    (fn [& x]\n      (reduce\n        (fn [result f] (f result))\n        (apply (first fs*) x)\n        (rest fs*)))))", "user": "6098263be4b00e9e6653c3f9"}, {"problem": 58, "code": "(fn [& fs]\n  (fn [& xs]\n    (let [fs (reverse fs)]\n      (reduce #(%2 %1)\n              (apply (first fs) xs)\n              (rest fs)))))", "user": "608ec5e4e4b03bd49d9f36c0"}, {"problem": 58, "code": "(fn rec [f & fns]\n  (if (seq fns)\n    #(f (apply (apply rec (first fns) (rest fns)) %&))\n    f))", "user": "4db2903f535df7e46ed9b6bf"}, {"problem": 58, "code": "(fn spotcomp [& args]\n   (reduce (fn [f1 f2] #(f1 (apply f2 %&))) args))", "user": "60882700e4b0ae75613dcedf"}, {"problem": 58, "code": "(fn my-compose-top [& fns]\n            (let [fn-composed (apply (fn my-comp [& fns]\n                                       (let [f (first fns)]\n                                         (if f\n                                           (let [f-1 (apply my-comp (rest fns))]\n                                             (if (= 1 (count fns))\n                                               (fn [x] (apply f (f-1 x)))\n                                               (fn [x] (f (f-1 x)))))\n                                           (fn [x] x)))) fns)]\n              (fn [& xs]\n                (fn-composed xs))))", "user": "5db35f85e4b010eb3c36cd22"}, {"problem": 58, "code": "(fn kcomp [& fns]\n  (fn [& x]\n    (loop [remain (reverse fns) curr x]\n      (if (empty? remain)\n        (first curr)\n        (recur (rest remain) (list (apply (first remain) curr)))))))", "user": "60b2aaebe4b0e0fa5f1b4228"}, {"problem": 58, "code": "(fn comp'\n    ([] identity)\n     ([f] f)\n     ([f g]\n     (fn \n       ([] (f (g)))\n       ([x] (f (g x)))\n      ([x y] (f (g x y)))\n      ([x y z] (f (g x y z)))\n       ([x y z & args] (f (apply g x y z args)))\n        ))\n    ([f g & fs]\n     (reduce comp' (list* f g fs))))", "user": "60b616e1e4b0e0fa5f1b4243"}, {"problem": 58, "code": "(fn [& fs]\n   (fn [& args]\n     (->> (reduce (fn [acc next]\n                    (list (apply next acc)))\n                  args (reverse fs))\n          (first))))", "user": "60b7e2c5e4b0e0fa5f1b4252"}, {"problem": 58, "code": "(fn [& funcs]\n  (fn [& args]\n    (first (reduce (fn [result func-to-perform]\n                     (list (apply func-to-perform result))) args (reverse funcs)))))", "user": "60b8b0f8e4b0e0fa5f1b425c"}, {"problem": 58, "code": "(fn [& fs] (reduce (fn [f g] #(f (apply g %&))) fs))", "user": "60ac91c5e4b00e9e6653c485"}, {"problem": 58, "code": "(fn [& fs]\n  (reduce\n   (fn [a b] \n     #(a (apply b %&))) fs))", "user": "60be31ace4b0e0fa5f1b428b"}, {"problem": 58, "code": "(fn [& fns]\n  (loop [f (last fns)\n         others (rest (reverse fns))]\n    (if (empty? others)\n      f\n      (let [next-f (fn [& args] ((first others) (apply f args)))]\n        (recur next-f (rest others))))))", "user": "51b920bfe4b0e871ca4958f9"}, {"problem": 58, "code": "(fn [& fs] \n  (reduce (fn [f g] #(f (apply g %&))) fs))", "user": "5f6580e7e4b02876ed9fd023"}, {"problem": 58, "code": "(fn [& fs] (fn [& args] (reduce #(%2 %1) (apply (last fs) args) (rest (reverse fs)))))", "user": "5fd92743e4b05ac5b16ea11f"}, {"problem": 58, "code": "(fn\n  [& fs]\n  (fn [& args]\n    (reduce (fn [val ff] (ff val))\n            (apply (last fs) args)\n            (reverse (drop-last fs)))))", "user": "60b1add0e4b0e0fa5f1b4227"}, {"problem": 58, "code": "(fn fn-comp\n  ([] identity)\n  ([f] f)\n  ([f g] (fn [& args] (f (apply g args))))\n  ([f g & fs] (reduce fn-comp (cons f (cons g fs)))))", "user": "60c0ceb7e4b0e0fa5f1b42a6"}, {"problem": 58, "code": "(fn hey \n  ([y z x] (fn [& args]\n    (->> args\n         (apply x)\n         z\n         y)))\n   ([y x] (fn [t] (->> t\n                x\n                y))))", "user": "60b3b375e4b0e0fa5f1b4232"}, {"problem": 58, "code": "(fn [& fs] (reduce (fn [f g] #(f (apply g %&))) fs))", "user": "6093b56ce4b00e9e6653c3e0"}, {"problem": 58, "code": "(fn [& funcs]\n    (fn [& v]\n      (reduce (fn [acc cur]\n                (if (= v acc) (apply cur acc) (cur acc)))\n              v (reverse funcs))))", "user": "5fa80c01e4b0fa27300f3de2"}, {"problem": 58, "code": "(fn [& fs] (reduce (fn [f g] #(f (apply g %&))) fs))", "user": "60c9a411e4b0e0fa5f1b4307"}, {"problem": 58, "code": "(fn [& fs] (reduce (fn [f g] #(f (apply g %&))) fs))", "user": "602c30e3e4b0d5df2af2226f"}, {"problem": 58, "code": "(fn my-comp\n  ([f1] #(f1 %))\n  ([f1 f2] #(f1 (f2 %)))\n  ([f1 f2 f3] (fn [& args] (f1 (f2 (apply f3 args))))))", "user": "60c91f48e4b0e0fa5f1b4304"}]