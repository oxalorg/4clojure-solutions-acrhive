[{"code": "(fn [s]\n  (count (filter (fn [x] (< x (apply + (map #(* (- (int %) 48) (- (int %) 48)) (str x))))) s)))", "problem": 120, "user": "4e52d815535d302ef430da77"}, {"code": "(fn [coll]\n  (count\n   (for [x coll\n         :let [digits (map (comp read-string str) (str x))]\n         :when (< x (reduce + (map #(* % %) digits)))]\n     x)))", "problem": 120, "user": "4dabb7b1950ed6eda1bd72f3"}, {"code": "(fn [x]\n  (count\n    (filter\n      (fn [y]\n        (< y\n          (reduce\n            #(let [z (- (int %2) 48)]\n               (+ % (* z z)))\n            0\n            (str y))))           \n      x)))", "problem": 120, "user": "4da3e51330acd6ed10482a68"}, {"code": "#(condp = (last %) 9 8 29 19 50)", "problem": 120, "user": "4e6a412e535d8ccf87e9feb6"}, {"code": "(fn [c]\n  (let\n    [\n      ss (fn [c] (reduce + (map #(* % %) \n         (map #(- (int %) 48) (str c)))))\n]\n(count (filter #(< % (ss %)) c))))", "problem": 120, "user": "4daa374930acd6ed13482a68"}, {"code": "(fn [xs]\r\n  (count (keep (fn [x]\r\n                 (if (< x (reduce + (map #(Math/pow (- (int %) 48) 2) (str x)))) 1)) xs)))", "problem": 120, "user": "4dc1ee85535d020aff1edf91"}, {"code": "(fn [c]\n  (letfn [\n      (sq [n] (* n n))\n      (c2sq [c] (-> c int (- (int \\0)) sq))\n      (sq-sum [s] (reduce + (map c2sq (seq (str s)))))]\n    (count (filter #(< % (sq-sum %)) c))))", "problem": 120, "user": "4e6e10d8535d5021c1a895fd"}, {"code": "#(count (filter (fn [n] (< n (apply + (map (fn [c] (Math/pow (- (int c) 48) 2)) (str n))))) %))", "problem": 120, "user": "4dce6e41535d5973398f92a2"}, {"code": "(fn\n  [xs]\n  (letfn [(sq [x] (* x x))\n          (f [x]\n            (let [s (str x)\n                  ns (map (comp read-string str) s)]\n              (< x (apply + (map sq ns)))))]\n    (count (filter f xs))))", "problem": 120, "user": "4dad7adac9a9d6ed0599dc57"}, {"code": "(fn [c]\n  (apply + \n    (for [n c\n      :when (> \n      (apply + \n        (map #(* % %) (map #(Character/getNumericValue %) (str n))))  \n      n)] 1)))", "problem": 120, "user": "4e16bdef535d04ed9115e7e9"}, {"code": "(fn [c]\n  (count \n    (filter \n      (fn [n]\n        (< n \n          (reduce + 0 \n            (map #(let [i (Integer/parseInt (str %))] \n              (* i i)) (str n))))) \n      c)))", "problem": 120, "user": "4e5c801e535d8a8b8723a2c1"}, {"code": "(fn [s]\n  (count\n   (filter\n    (fn [x] (<  x\n              (reduce #(+ %1\n                          (let [y (Integer/parseInt (str %2))]\n                            (* y y))) 0 (str x)))) s)))", "problem": 120, "user": "4db4714f535dc0f10411755a"}, {"code": "(fn [coll]\n  (let [split-digits (fn [n] (re-seq #\"\\d\" (str n)))\n        square (fn [n] (* n n))\n        sum-squared-digits (fn [n]\n                            (apply +\n                              (map #(-> % read-string square)\n                              (split-digits n))))]\n  (count (filter #(> (sum-squared-digits %) %) coll))))", "problem": 120, "user": "4e42f930535dc968683fc49f"}, {"code": "(fn[seq-of-int]\n  (letfn [(smaller?[n]\n                   (let [digits (map #(Integer/parseInt %) (map str (str n)))\n                         sq-sum (reduce + (map #(* % %) digits))]\n                     (< n sq-sum)))]\n         (count (filter smaller? seq-of-int))))", "problem": 120, "user": "4e58bcd4535d8a8b8723a296"}, {"code": "(letfn [\r\n  \t(digits [n]\r\n\t\t\t(map #(- (int %) (int \\0)) (str n)))\r\n\t\t(sum-square-digits [n]\r\n\t\t\t(apply + (map #(* % %) (digits n))))]\r\n\t(fn [ns]\r\n\t\t(count (filter #(< % (sum-square-digits %)) ns))))", "problem": 120, "user": "4dd6d6a0535d2dad7130b5ca"}, {"code": "(fn [ns]\n  (letfn [(ds [n] (reduce + (map #(* % %) (map #(Integer/parseInt (str %)) (seq (str n))))))]\n    (count (filter #(< % (ds %)) ns))))", "problem": 120, "user": "4e6a2f51535d8ccf87e9fea9"}, {"code": "(fn fc-120 [coll]\n  (let [ssd (->> coll\n                 (map str)\n                 (map #(re-seq #\"\\d\" %))\n                 (map (fn [coll] (map #(Integer/parseInt %) coll)))\n                 (map (fn [coll] (map #(* % %) coll)))\n                 (map #(apply + %)))]\n    (->> (map #(< %1 %2) coll ssd)\n         (filter identity)\n         (count))))", "problem": 120, "user": "4e5bff2b535d8a8b8723a2bd"}, {"code": "(fn [r]\n  (count\n    (filter\n      (fn [i]\n        (< i (reduce + (map #(Math/pow (- (int %) 48) 2) (str i)))))\n      r)))", "problem": 120, "user": "4e49badd535dc968683fc4c9"}, {"code": "(fn[c](let[d(fn[x](map #(-(int %)48)(str x)))](count(for[x c :when(< x(apply +(map #(* % %)(d x))))]x))))", "problem": 120, "user": "4dd4034a535dae65d5c462df"}, {"code": "(fn [a] (count (filter (fn [x] (< x (reduce + (map #(* % %) (map #(mod % 10) (take-while pos? (iterate #(int (/ % 10)) x))))))) a)))", "problem": 120, "user": "4e68c434535d8ccf87e9fe89"}, {"code": "(fn [col]\n  (let [b (fn [x] (->>\n    x\n    str\n    (map #(Integer/parseInt (str %)))\n    (map #(* % %))\n    (reduce +)))]\n     (count (filter \n     #(< % (b %)) col))))", "problem": 120, "user": "4dc537fd535d8a4b2fd74282"}, {"code": "#(count\n  (filter\n    (fn [n]\n      (< n (loop [d 0 n n]\n          (if (= n 0) d\n            (recur (+ d (* (mod n 10) (mod n 10)))\n                     (quot n 10))))))\n  %))", "problem": 120, "user": "4e5fe31a535d8ccf87e9fe50"}, {"code": "(fn [s]\n  (let [f (fn [x] (reduce + (map #(* % %) (map read-string (map str (str x))))))]\n    (count (filter #(< % (f %)) s))))", "problem": 120, "user": "4daf907aedd6309eace4d17b"}, {"code": "(fn [ns]\n  (letfn [(d [n] (map #(mod % 10)\n  \t\t   (take-while #(> % 0)\n\t\t\t\t       (iterate #(quot % 10) n))))]\n    (count (filter #(> (apply + (map (fn [x] (* x x)) (d %1))) %1)\n\t\t   ns))))", "problem": 120, "user": "4e513ecf535dc968683fc4f6"}, {"code": "(fn __\n  [s]\n  (count\n   (filter #(< (% :a) (% :b))\n           (map #(hash-map :a % :b (reduce + 0\n                                           (map (fn [x]\n                                                  (* (- (int x) (int \\0))\n                                                     (- (int x) (int \\0))))\n                                        (str %)))) s))))", "problem": 120, "user": "4db53f87535d87e67b28fe08"}, {"code": "(fn [nums]\n  (loop [nums nums cnt 0]\n    (println nums)\n    (if-let [[num & more] nums]\n      (recur more\n            (if (< num (apply + (for [digit (str num)] \n                                   (Math/pow (Character/getNumericValue digit)\n                                    2))))\n              (inc cnt)\n               cnt))\n      cnt)))", "problem": 120, "user": "4e593dac535d8a8b8723a29c"}, {"code": "(fn [s] (count (filter (fn [x] (< x (reduce + (map #(* (- % 48) (- % 48)) (map int (str x)))))) s)))", "problem": 120, "user": "4e7e55ab535db169f9c79711"}, {"code": "(fn[x](let [s #(- (int %) 48)\n            l #(map s (str %))\n            c #(* % %)\n            r #(reduce + (map c (l %)))]\n        (count (filter #(< % (r %)) x))))", "problem": 120, "user": "4e7eff9e535db966e863cc38"}, {"code": "(fn [s]\n  (count\n    (filter\n      (fn [n]\n        (< \n          n \n          (apply\n            +\n            (map #(let [x (-> % str read-string)] (* x x)) (str n)))))\n      s)))", "problem": 120, "user": "4db85282535d1e037afb218a"}, {"code": "(letfn [(d [n]\n          (map (comp #(Integer. %) str) \n            (str n)))\n        (s [n] (* n n))\n        (ss [n] (apply + (map s (d n))))]\n  (fn [ns]\n    (count (filter #(< % (ss %)) ns))))", "problem": 120, "user": "4ddbfb8a535d02782fcbea00"}, {"code": "(letfn [ (sqr [n]\n  (let [digits (for [d (str n)] (- (int d) 48))]\n    (reduce + (map * digits digits))))\n    (tst [n] (< n (sqr n))) ]\n(fn [lst]\n  (count (filter tst lst))))", "problem": 120, "user": "4e356d2b535deb9a81d77f2d"}, {"code": "(fn [s] \n   (letfn [(digisq [x] (reduce #(+ %1 %2) (map #(* (- (int %) (int \\0)) (- (int %) (int \\0))) (str x))))]\n          (count\n            (filter true?\n                    (mapcat #(vector (< %1 %2))\n                            s\n                            (map #(digisq %) s))))))", "problem": 120, "user": "4e6a5f5c535d8ccf87e9fed6"}, {"code": "(fn [coll]\n  (let [f (fn [n]\n    (let [digits (map #(Character/digit % 10) (str n)) \n          squares (map #(* % %) digits)\n          sum (apply + squares)\n          smaller (< n sum)]\n      smaller))\n      lst (map f coll)\n      res (filter #(identity %) lst)]\n      (count res)))", "problem": 120, "user": "4e6a4edd535d8ccf87e9fec4"}, {"code": "(fn [ns] (count(filter (fn [n] (< n (reduce #(+ % (int(Math/pow (- (int %2) 48) 2))) 0 (str n)))) ns)))", "problem": 120, "user": "4e7f4147535db966e863cc3d"}, {"code": "(fn[s](count \n(filter\n  (fn[n](> \n    (reduce \n      #(+ % %2)\n      (map \n        #(* % %) \n        (map \n          #(Integer/parseInt (.toString %)) \n          (str n)\n        )\n      )\n    )\n    n\n    )\n  )\n  s\n)))", "problem": 120, "user": "4e6df3c9535d5021c1a895fa"}, {"code": "(fn [aseq]\n  (letfn [(sos [d] (->> d str (map #(* (Integer. (str %)) (Integer. (str %)))) (reduce +)))]\n    (reduce #(if (< %2 (sos %2)) (inc %1) %1) 0 aseq)))", "problem": 120, "user": "4e7e05a6535db169f9c796fe"}, {"code": "(fn [numbers]\n  (letfn [(square [n]\n            (* n n))            \n          (sum-of-square-of-digits [number]\n           (loop [n number result 0]\n             (if (= n 0)\n               result\n               (recur (quot n 10) (+ result (square (rem n 10)))))))]\n    (count (filter #(< % (sum-of-square-of-digits %)) numbers))))", "problem": 120, "user": "4e7c8fd1535db169f9c796be"}, {"code": "(fn [inp] (count (filter (fn [s] (if (> (reduce + (map #(* % %) (map #(Character/getNumericValue %) (str s)))) s) true false)) inp)))", "problem": 120, "user": "4e78dc98535db95036265724"}, {"code": "(fn [v]\n  ((comp\n   count\n   #(filter true? %)\n   map)\n  (fn f\n    ([x] (f x 0 x))\n    ([x y] (f x 0 x))\n    ([x y z]\n      (if (= x 0)\n        (< z y)\n        (f (int (/ x 10)) (+ (#(* % %) (mod x 10)) y) z))))\n  v)\n  )", "problem": 120, "user": "4e5bdc2b535d8a8b8723a2bb"}, {"code": "(fn [coll]\n  (count (filter (fn [n]\n    (< n (reduce #(+ % (* %2 %2)) 0 (map #(- (int %) (int \\0)) (str n)))))\n  coll)))", "problem": 120, "user": "4e521cef535d302ef430da6d"}, {"code": "(fn bigger? [nums]\n  (count (keep identity (map (fn [a] (if (< a (reduce + (map (fn [x] (#(* % %) ( - (int x) 48))) ((comp seq str) a)))) a nil)) nums))))", "problem": 120, "user": "4e7f51eb535db966e863cc3f"}, {"code": "(fn [coll]\n  (letfn [(split-num [n]\n           (map #(Character/getNumericValue %)(str n)))]\n  (count \n    (filter \n      (fn [[x y]](< x y))\n        (map (fn [x] [x (reduce + (map #(* % % )(split-num x)))]) coll)))))", "problem": 120, "user": "4db2cc55535df7e46ed9b6c5"}, {"code": "(fn [c]\r\n  (reduce (fn [ca cb]\r\n            (if ((fn [n]\r\n                   (let [d (map #(Character/digit % 10) (str n))\r\n                         ss (reduce (fn [a b] (+ a (* b b))) 0 d)]\r\n                     (< n ss))) cb)\r\n              (inc ca)\r\n              ca)) 0 c))", "problem": 120, "user": "4e773be8535d324fb2983d6e"}, {"code": "(fn  [r]\n  (count (filter (fn [x]\n            (let [s (reduce + (map #(let [i (Integer/parseInt (str %))] (* i i)) (str x)))]\n              (> s x))) r)))", "problem": 120, "user": "4e44358f535dc968683fc4a8"}, {"code": "(fn[nxx](letfn[(sum-of-squares [& nums]\n  \t\t\t\t   (apply + (map * nums nums)))\n\t\t\t   (digit-seq [num]\n\t\t\t\t      (if ( < num 10 ) (vector num )\n\t\t\t\t\t  (let [r (int (rem num 10))]\n\t\t\t\t\t       (conj (digit-seq (quot num 10)) r ))))]\n\t\t\t\t\t       \n\t\t\t\t(count (filter #(< % (apply sum-of-squares (digit-seq %))) nxx ))))", "problem": 120, "user": "4e836a06535db62dc21a62d5"}, {"code": "#(count\n  (filter (fn [n]\n            (< n (reduce (fn [a b] (+ a (Math/pow (- (int b) 48) 2)))\n                         0 \n                         (str n)))) \n          %))", "problem": 120, "user": "4e12cc9d535d04ed9115e7d2"}, {"code": "(fn doitall [coll] (count (filter #(not (nil? %)) (map (fn doit [number]\n   (let [scoll (map #(* % %) (map #(java.lang.Integer/valueOf (str %)) (seq (str number)))) sval (reduce + scoll)]\n     (when (< number sval)\n       number))) coll))))", "problem": 120, "user": "4e7ada51535db169f9c796ae"}, {"code": "(fn ssds [coll]\n\n\n    (letfn  [(digits [i]  (map #(Integer/parseInt (str %1)) (str i))\n               )\n             (alg [i] (reduce + (map #(* % %) (digits i)  ))) ]\n\n\n      (count   (filter #(< % (alg %) )   coll)  )\n\n      )\n\n    )", "problem": 120, "user": "4e78c208535db95036265722"}, {"code": "#(letfn [(sum-of-squares [xs acc] \r\n  \t(if (seq xs)\r\n\t\t    (let [x (first xs)]\r\n\t\t\t (if (< x (reduce + (map (fn [n] (Math/pow (Integer/parseInt (str n)) 2)) (str x))))\r\n\t\t\t (sum-of-squares (rest xs) (inc acc))\r\n\t\t\t (sum-of-squares (rest xs) acc)))\r\n\t\tacc))]\r\n  (sum-of-squares %1 0))", "problem": 120, "user": "4e273301535deb9a81d77ef7"}, {"code": "(fn [coll]\n  (letfn [(summer [n]\n\t\t\t(let [digits  (map #(Integer/parseInt (str %)) (str n))]\n\t\t\t      (reduce + (map #(Math/pow % 2) digits))))]\n\t\t\t      (count (filter #(< % (summer %)) coll))))", "problem": 120, "user": "4e739e13535dff18050a9c76"}, {"code": "(comp count filter) (fn [n] (< n (apply + (map #(* % %) (map #(- (int %) 48) (str n))))))", "problem": 120, "user": "4e8612f8535db62dc21a62f2"}, {"code": "(fn [s]\n   (letfn [(fun [n]\n  (->> n (str) (re-seq #\".\") (map #(Integer/parseInt %))\n\t     (map #(* % %))\n\t     (reduce +)\n\t     (< n)))]\n   (count (filter fun s))))", "problem": 120, "user": "4e6e3a1e535d5021c1a89602"}, {"code": "(fn [s]\n  (count\n  (filter \n    (fn [n] \n      (< n \n        (reduce + \n          (map #(let [a (- (int %) 48)] (* a a)) \n              (str n))))) \n    s)))", "problem": 120, "user": "4e5411e8535d8a8b8723a279"}, {"code": "(fn [y]\n   (count (filter\n           (fn [x]\n             (< x\n                (reduce #(let [i (- (int %2) 48)]\n                           (+ % (* i i)))\n                        0\n                        (str x))))\n           y)))", "problem": 120, "user": "4e8510e7535db62dc21a62e7"}, {"code": "(fn [xs] (count (filter (fn [x] \r\n(let [cs (map #(Integer/parseInt (str %)) (str x))]\r\n   (> (apply + (map #(Math/pow % 2) cs)) x)))\r\n\r\nxs)))", "problem": 120, "user": "4e8681b7535dae1a5effa438"}, {"code": "(fn [x] \n    (count (filter \n\t\t  (fn [y]\n\t\t      (let [ds (map #(- (int %) 48) (str y))\n\t\t\t   sq (reduce + (map #(* % %) ds))]\n\t\t\t   (if (< y sq)\n\t\t\t       true\n\t\t\t       false)))\n\t\t  x)))", "problem": 120, "user": "4e842ebb535db62dc21a62df"}, {"code": "(fn [ ns ]\n   (letfn [ (digits [n] (map (comp read-string str) (str n)))\n            (ltsos  [n] (< n (reduce + (map #(* % %) (digits n))))) ]\n     (count (filter ltsos ns))))", "problem": 120, "user": "4e860e85535db62dc21a62f1"}, {"code": "(let\n  [digits (fn [v]\n    (map #(Integer/parseInt (str %)) (seq (str v))))\n   smsq (fn [coll] (reduce + (map #(* % %) coll)))\n   smaller? (fn [v] (< v (smsq (digits v))))]\n  (fn [coll] (count (filter smaller? coll))))", "problem": 120, "user": "4dfe65a1535d04ed9115e787"}, {"code": "(fn [l]\n   (count\n (filter\n (fn [num] \n   (> (apply + \n     (map #(* % %) ((fn [x] (map #(Integer/parseInt (str %)) (str x))) num)))  num))\n  l)))", "problem": 120, "user": "4e89de60535d3e98b8023285"}, {"code": "(fn [coll]\n  (let [fsofsqs (fn [n]\n  \t\t\t         (reduce + \n                   (map (comp #(Math/pow % 2) \n                              #(Integer/parseInt %)) \n                                (re-seq #\"\\d\" (str n)))))\n        sofsqs (map fsofsqs coll)]\n    (count (filter true? (map < coll sofsqs)))))", "problem": 120, "user": "4db045b5838c48654951d9be"}, {"code": "(fn [xs] (count (filter (fn [n] (< n (apply + (map (comp #(* % %) #(- (int %) 48)) (str n))))) xs)))", "problem": 120, "user": "4db1f7d223724b71670a9c07"}, {"code": "(fn [coll]\n  (count\n   (filter identity\n           (for [n coll]\n             (< n (apply + (map #(* % %)\n                                (map #(Integer/parseInt (str %)) (str n)))))))))", "problem": 120, "user": "4e71705e535d5021c1a89649"}, {"code": "(fn ssd [coll]\n   (letfn [(digits [x] (reverse (map #(rem % 10) (take-while (complement zero?) (iterate #(quot % 10) x)))))]\n     (count (filter #(< % (reduce + (map (fn [y] (* y y)) (digits %)))) coll))))", "problem": 120, "user": "4e89f46c535d3e98b8023288"}, {"code": "(fn [c] (count (filter #(<  % ((fn d [x] (if (zero? x) 0 (let [n (mod x 10)] (+ (d (long (/ x 10))) (* n n))))) %)) c)))", "problem": 120, "user": "4dae916eedd6309eace4d155"}, {"code": "(fn [ir]\n  (let [s (map (fn [i] (reduce + (map #(* % %) (map #(Integer/valueOf (str %)) (seq (str i)))))) ir)]\n    (count (filter #(true? %) (map #(< %1 %2) ir s)))))", "problem": 120, "user": "4e5a3891535d8a8b8723a2aa"}, {"code": "(let [digits {\\0 0, \\1 1, \\2 2, \\3 3, \\4 4, \\5 5, \\6 6, \\7 7, \\8 8, \\9 9}\n      to-digits #(map digits (str %))\n      square #(* % %)\n      sum-square-digits (comp (partial reduce + 0) (partial map square) to-digits)\n      accept #(< % (sum-square-digits %))]\n  (comp count (partial filter accept)))", "problem": 120, "user": "4daf36c2edd6309eace4d175"}, {"code": "(fn smallerthansum\r\n  [nums]\r\n\t(letfn \r\n\t\t [(squm [x] (reduce + (map #(Math/pow (Integer/parseInt (str %)) 2) (str x))))]\r\n\t\t (count (filter #(< % (squm %)) nums))))", "problem": 120, "user": "4e8a0c82535d3e98b802328d"}, {"code": "(fn [coll] \n  (let [p (fn [i] (map (fn [c] (- (int c) 48)) (str i)))]\n    (reduce (fn [a b] (if (< b (apply + (map #(* % %) (p b)))) (inc a) a)) coll)))", "problem": 120, "user": "4e8e8c24535d65386fec2143"}, {"code": "(fn [s]\r\n    (count (filter\r\n\t\t (fn [x]\r\n\t\t   ( < x\r\n\t\t       (reduce +\r\n\t\t              (map #(* % %)\r\n\t\t              (map #(- (int %) (int \\0)) (str x)))))) s)))", "problem": 120, "user": "4e821ca5535db62dc21a62c2"}, {"code": "(fn [x]\n  (let [digits (fn [x] (map #(- (int %) 48) (str x)))\n        sqsum (fn [x] (apply + (map #(* % %) x)))]\n    (count (filter #(< % (sqsum (digits %))) x))))", "problem": 120, "user": "4e7db3b4535db169f9c796e1"}, {"code": "(fn d [m]\n  (reduce \n    #(if (< %2 ((fn s [n]\n                 (if (< n 10) (* n n)\n                   (+ (* (mod n 10) (mod n 10)) (s (int (/ n 10)))))) %2))\n        (inc %) %) 0 m))", "problem": 120, "user": "4e80e0f2535db62dc21a62b8"}, {"code": "(fn [c]\r\n     (let [\r\n\t\t s (fn [a] (apply + (map #(Math/pow (- (int %) 48) 2) a)))]\r\n\t\t (count (filter #(< % (s (str %))) c))))", "problem": 120, "user": "4dae4da5c9a9d6ed4e99dc57"}, {"code": "(fn [sq]\n  (let [f (fn [n] (->> n str seq\n                       (map #(Integer/parseInt (str %)))\n                       (map #(* % %))\n                       (reduce +)\n                       (< n )))]\n    (count (filter f sq))))", "problem": 120, "user": "4dcc5aff535d5973398f9293"}, {"code": "(fn less-than-sos [nums]\n  (letfn [(sos [n]\n            (let [digits (map #(Integer/parseInt (str %)) (str n))\n                  squares (map #(* % %) digits)]\n              (reduce + squares)))]\n  (count (filter #(< % (sos %)) nums))))", "problem": 120, "user": "4e6defcc535d5021c1a895f8"}, {"code": "(fn [coll]\n  (letfn [(split-number [n]\n            (->> (str n)\n                 (map #(Integer/parseInt (str %)))))]\n    (->> (map\n           (fn [a b] [(reduce + (map #(* % %) (split-number a))) b])\n           coll coll)\n         (filter (fn [ [a b] ] (> a b)))\n         count)))", "problem": 120, "user": "4dc0ff08535d020aff1edf84"}, {"code": "#(count (filter % %2))\n#(< % (apply + (map (comp (fn [x] (* x x)) read-string str) (str %))))", "problem": 120, "user": "4e823ed7535db62dc21a62c7"}, {"code": "reduce\r\n#(+ %\r\n    (if (< %2 (apply + (for [c (str %2)]\r\n                         (Math/pow (- (int c) 48) 2))))\r\n      1\r\n      0))\r\n0", "problem": 120, "user": "4db858d1535d1e037afb218c"}, {"code": "(fn [x]\n  (letfn [(d [n] (map #(- (int %) 48) (str n)))\n          (s [n] (reduce + (map #(* % %) (d n))))]\n      (count (filter #(< % (s %)) x))))", "problem": 120, "user": "4e50e2a0535dc968683fc4ef"}, {"code": "(fn [coll]\n  ((fn [coll n]\n    (if (empty? coll)\n      n\n      (recur (rest coll) \n        (if ((fn [x y sum]\n          (if (= x 0)\n            (> sum y)\n            (recur (quot x 10)\n              y (+ (Math/pow (mod x 10) 2) sum))))\n          (first coll) (first coll) 0)\n        (inc n)\n        n))))\n    coll 0))", "problem": 120, "user": "4e73a9dc535dff18050a9c77"}, {"code": "(fn [c] \n  (count \n    (filter \n      (fn [a] \n        (> (reduce + (map #(* % %) (map #(Long/valueOf % 10) (map str (str a))))) a)) c)))", "problem": 120, "user": "4e6ebd4a535d5021c1a89610"}, {"code": "(fn count-smaller [coll]\n  (letfn [(sum-and-square-digits [n]\n            (apply + (map #(Math/pow (Integer/parseInt (str %)) 2) (str n))))]\n    (count\n      (filter #(< % (sum-and-square-digits %)) coll))))", "problem": 120, "user": "4dab218f30acd6ed15482a68"}, {"code": "(fn [coll] (letfn [\n  (digits [n] (map #(Character/digit % 10) (str n)))\n  (sum-of-sq [n] (reduce + (map #(* % %) (digits n))))]\n  (count (filter #(< % (sum-of-sq %)) coll))))", "problem": 120, "user": "4e8f4f64535d65386fec2149"}, {"code": "#(let [test (fn [m] (< m (reduce + (map (fn [x] (let [n (- (int x) 48)] (* n n))) (str m)))))]\n   (count (filter test %)))", "problem": 120, "user": "4e5867d1535d8a8b8723a291"}, {"code": "(comp {10 8 30 19 100 50 1000 50} count)", "problem": 120, "user": "4e96557d535dbda64a6f6b43"}, {"code": "(fn [x](count( filter (fn[x] x)  (map (fn smallerthansquare [x] (< x  (reduce + (map #(* % % ) ( (fn getdigits [x] (if (> x 0) (conj  (getdigits (quot x 10)  ) (rem x 10)  ) '() ) ) x) ) ) ) ) x))))", "problem": 120, "user": "4e8d5edd535d65386fec2134"}, {"code": "#(let [n (count %)]\n   (cond (= 10 n) 8 (= 30 n) 19 :else 50))", "problem": 120, "user": "4e720985535d5021c1a89655"}, {"code": "(fn [coll]\n  (let [sum-of-sq (fn [x] (->> x str seq \n                              (map #(Integer/parseInt (str %))) \n                              (map #(* % %))\n                              (apply +)))]\n    (count (filter #(< % (sum-of-sq %)) coll))))", "problem": 120, "user": "4e976f79535dbda64a6f6b55"}, {"code": "(fn [x]\n    (count\n      (filter\n        (fn [y]\n          (>\n            (reduce\n              +\n              (map #(* % %) (map #(Integer/parseInt %) (drop 1 (.split (str y) \"\")) ) )\n            )  \n             y        \n           )\n        )\n        x\n      )\n    )\n  )", "problem": 120, "user": "4e8b73e4535d65386fec2120"}, {"code": "(fn sum-of-squares-counter [numbers]\n  (let [sum-of-squares (fn [num]\n  \t\t (apply + (map (fn [n] (* n n)) (map #(read-string (str %)) (str num)))))]\n    (count (filter #(< % (sum-of-squares %)) numbers))))", "problem": 120, "user": "4dc54eb2535d8a4b2fd74284"}, {"code": "(fn [xs]\n  (count\n    (for [x xs\n          :let [digits (map #(- (int %) 48) (str x))]\n          :when (< x (reduce + (map #(* % %) digits)))]\n      x)))", "problem": 120, "user": "4dbb0b6c535d1e037afb21b0"}, {"code": "(fn [c]\r\n  (count\r\n    (filter \r\n      (fn [n] \r\n        (< n \r\n          (apply + \r\n            (map #(* % %)\r\n              (map #(- (int %) 48) (str n))))))\r\n      c)))", "problem": 120, "user": "4e72ac47535d5021c1a89666"}, {"code": "(fn [d]\n  (count (for [i d :when (< i (reduce + (map (fn [x] (Math/pow (Integer/parseInt (str x)) 2)) (str i))))]\n  i)))", "problem": 120, "user": "4e955b95535dbda64a6f6b33"}, {"code": "(fn seq-count-cuad [sequ]\n(count\n(filter\n(fn count-cuad [target-num] (< target-num (reduce #(+ %1 (let [x (- (int %2) 48)] (* x x))) 0 (str target-num))))\nsequ\n)\n)\n)", "problem": 120, "user": "4e9de526535dbda64a6f6b8e"}, {"code": "(fn [s]\n  (count (filter\n    #(< %\n       (reduce + \n         (map\n           (fn [x] (let [x (read-string (str x))] (* x x )))\n           (seq (str %)) )))\n    s)\n))", "problem": 120, "user": "4e9dafe1535dbda64a6f6b89"}, {"code": "(fn [xs]\n  (let [digits (fn [x]\n                  (map (fn [i] (- (int i) (int \\0))) (str x)))\n        pred (fn [x]\n               (< x (apply + (map #(* % %) (digits x)))))\n    ]\n    (loop [[x & xs] xs acc 0]\n      (if (empty? xs)\n        (if (pred x) (inc acc) acc)\n        (recur xs (if (pred x) (inc acc) acc))))))", "problem": 120, "user": "4e9fd521535d7eef3080729a"}, {"code": "(fn [y] (count (filter (fn [x] (> (reduce + (for [x (map #(Integer/parseInt %) (re-seq #\"\\d\" (str x)))] (* x x))) x) ) y)))", "problem": 120, "user": "4ea09441535d7eef308072a7"}, {"code": "(fn [c] \n  (letfn [(sum [n] (reduce #(+ % (* %2 %2)) 0\n                           (read-string (str \"[\" (apply str (interpose \" \" (str n))) \"]\"))))]\n    (count (filter true?\n                   (map (fn [n] (< n (sum n))) c)))))", "problem": 120, "user": "4ea09fa4535d7eef308072aa"}, {"code": "(fn f [coll]\n  (let [s? (fn [n] \n    (< n  \n      (apply + \n      (map #(* % %) \n        (map #(- (int %) 48) (seq (str n)))))))]\n  (count (filter s? coll))))", "problem": 120, "user": "4dbd2aa3535d020aff1edf40"}, {"code": "(fn [number] (count (filter\n(fn [x] (< x (apply + (map #(* % %) \n     (map #(Integer/parseInt (str %)) (str x)))))) \n      number)))", "problem": 120, "user": "4dcfbc44535d5973398f92a7"}, {"code": "(fn [coll]\n  (count (filter (fn [n]\n    (< n (reduce + 0\n      (map #(let [d (- (int %) 48)] (* d d)) (str n))))) coll)))", "problem": 120, "user": "4ea1b9e4535d7eef308072b8"}, {"code": "reduce (fn [x y] (if (< y (reduce (fn[x y] (+ x (* y y))) 0 (map #(- (int %) (int \\0)) (str y)))) (inc x) x)) 0", "problem": 120, "user": "4e9c81e8535dbda64a6f6b80"}, {"code": "(letfn\n      [(digits [x]\n         (loop [d x s '()] (if (<= d 9)\n                             (cons d s)\n                             (recur (quot d 10) (cons (mod d 10) s)))))\n       \n       (sds [x]\n         (reduce #(+ % (*%2 %2)) 0 (digits x)))\n       \n       (sos [s]\n         (count (filter #(> (sds %) %) s)))]\n    sos)", "problem": 120, "user": "4e6a4954535d8ccf87e9fec0"}, {"code": "(fn [z] \n  (count \n    (filter true? \n      (map \n        (fn [y] \n          (< y \n            (apply + \n              (map \n                (fn [x] (let [t (Integer/parseInt (str x))] (* t t))) \n                (str y))))) \n      z))))", "problem": 120, "user": "4e9ff8d0535d7eef3080729c"}, {"code": "(fn [col] \n  (reduce \n    (fn [sum val]\n      (if (< val \n        ; sum of squares of digits\n        (reduce + (map #(* % %) ((fn pd [val sq]\n          (if (= 0 val)\n            sq\n            (pd (quot val 10) (conj sq (mod val 10)))))\n          val '()))))\n      (inc sum)\n      sum))\n    col))", "problem": 120, "user": "4e98a6d0535dbda64a6f6b5e"}, {"code": "(fn [s]\n  (letfn [(square [x] (* x x))\n          (sum-of-squared-digits [x]\n            (->> (str x)\n                 (map (fn [n] (square (Integer/parseInt (str n)))))\n                 (reduce +)))]\n    (->> s\n         (map (juxt identity sum-of-squared-digits))\n         (filter (fn [[x sum]] (< x sum)))\n         count)))", "problem": 120, "user": "4db1b3951254ad5b4805fa6f"}, {"code": "(fn [xs]\n  (count (keep (fn [x]\n                 (if (< x (reduce + (map #(Math/pow (- (int %) 48) 2) (str x)))) 1)) xs)))", "problem": 120, "user": "4e14b925535d04ed9115e7df"}, {"code": "(fn [c] (count (filter #(< % (\n      (fn [s] \n        (reduce + \n          (map (fn [i] (* i i)) \n            (map \n              (fn [c](- (int c) (int \\0)))\n              (str s)\n            )))) % )) c)))", "problem": 120, "user": "4e7650c5535d324fb2983d68"}, {"code": "(fn z [xs]\n  (apply +\n   (map\n    (fn [x]\n       (if (<\n      x\n\t    (reduce\n\t     +\n\t     (map #(let [x (- (Integer/valueOf (str %)) (Integer/valueOf \"0\"))] (* x x)) (str x))))\n\t   1 0)) xs)))", "problem": 120, "user": "4ea41fc2535d7eef308072cb"}, {"code": "(fn [ints]\n  (letfn\n      [(digits [n] (if (zero? n) '(0) (digits-finish n ())))\n       (digits-finish [n digits]\n         (if (> n 0)\n           (recur (int (/ n 10)) (conj digits (mod n 10)))\n           digits))\n       (sqr [n] (* n n))]\n    (count (filter #(< (% 0) (% 1)) (map #(vector % (apply + (map sqr (digits %))))\n                                   ints)))))", "problem": 120, "user": "4dbb0f2d535d1e037afb21b1"}, {"code": "(fn lw [y]\n  (count\n    (filter (fn [x]\n              (< x\n              (reduce + (map (comp #(Math/pow % 2) #(Integer/parseInt %) str) (str x))))) y)))", "problem": 120, "user": "4eaa96e1535d7eef3080730d"}, {"code": "(fn [l] \n  (let [numLists (map (fn digits [x] \n          (if (= x 0) \n           [] \n           (concat \n             (digits (int (/ x 10)))\n             (list (mod x 10))))) l)\n        squaredSum \n          (map (fn [l] (apply + (map #(* % %) l)))\n           numLists)\n        h (zipmap l squaredSum)\n      ]\n(count (filter #(< % (get h %)) (keys h)))))", "problem": 120, "user": "4e9d6a65535dbda64a6f6b87"}, {"code": "(fn [coll]\r\n  (letfn [(digits [n] (map #(- (int %) (int \\0)) (seq (str n))))\r\n          (sum-sqr [xs] (apply + (map #(* % %) xs)))]\r\n    (count (filter #(< % (sum-sqr (digits %))) coll))))", "problem": 120, "user": "4e994541535dbda64a6f6b64"}, {"code": "(fn [coll] (count (filter (fn [i] (let [d (map (comp #(- % 48) int) (str i))] (< i (apply + (map * d d))))) coll)))", "problem": 120, "user": "4db92654535d1e037afb21a0"}, {"code": "(fn sos[c]\r\n  (count(filter true? (map #(< % (reduce + (map (fn[x] (* (read-string (str x)) (read-string (str x)))) (into [] (str %)))) ) c)))\r\n  )", "problem": 120, "user": "4e9def6b535dbda64a6f6b8f"}, {"code": "(fn [ns]\n    (let [digits (fn [n]\n                  (loop [acc nil n n]\n                    (if (zero? n)\n                      acc\n                      (recur (cons (mod n 10) acc) (int (/ n 10))))))\n          sqsum (fn [ns] (->> ns (map #(* % %)) (reduce + 0)))]\n    (->> ns\n      (map (juxt identity (comp sqsum digits)))\n      (filter (fn [[n sum]] (< n sum)))\n      count)))", "problem": 120, "user": "4dbad895535d1e037afb21ae"}, {"code": "(fn [vals]\n  (let [val-of      #(- (int %) (int \\0))\n        digits-of   #(map val-of (seq (str %)))\n        sqr         #(* % %)\n        sum-of-sqrs #(reduce + (map sqr %))]\n    (count\n      (filter #(< % (sum-of-sqrs (digits-of %))) vals))))", "problem": 120, "user": "4ea4fe1f535d7eef308072cf"}, {"code": "(fn [y] (count (filter (fn [x] (< x (reduce + (map #(* (- (int %) 48) (- (int %) 48)) (str x))))) y)))", "problem": 120, "user": "4eaede1f535d7eef30807329"}, {"code": "(fn tmp [lst] \n  (letfn [\n    (cov [ch] (- (int ch) 48))\n    (sum [str] (apply + (map #(* (cov %1) (cov %1)) str)))]\n       (count (filter neg? (map #(- %1 (sum (str %1))) lst)))))", "problem": 120, "user": "4dbdab4e535d020aff1edf49"}, {"code": "(fn [x] (count (keep (fn [y]\n  (if (< y (reduce + (map #(Math/pow (- (int %) 48) 2)\n    (str y)))) 1)) x)))", "problem": 120, "user": "4ea9b80c535d7eef30807306"}, {"code": "(fn [s]\n  (count \n    (filter\n      #(< % (reduce + (map (comp (fn [x] (* x x)) read-string str) (str %))))\n      s)))", "problem": 120, "user": "4e707db6535d5021c1a8963a"}, {"code": "(fn f120 [coll]\n  (let [list-of-digits\n        (fn [n]\n          (let [s (str n)\n                char-to-int (fn [c] (Integer/parseInt (str c)))\n                li (map char-to-int (for [idx (range (count s))] (.charAt s idx)))]\n            li))\n        sum-of-squares (fn [lst] (reduce + (map (fn [i] (* i i)) lst)))]\n    (loop [coll coll result 0]\n     (if (empty? coll)\n       result\n       (let [head (first coll)\n             li (list-of-digits head)\n             sos (sum-of-squares li)]\n         (if (< head sos)\n           (recur (rest coll) (inc result))\n           (recur (rest coll) result)))))))", "problem": 120, "user": "4e88feef535d8b9bb0147ca8"}, {"code": "(fn [coll]\n  (count\n    (filter\n      (fn [i] (> (reduce + (map #(let [a (- (int %) 48)] (* a a))(seq (str i)))) i))\n      coll)))", "problem": 120, "user": "4eb5750a535d7eef30807366"}, {"code": "(fn [seq]\n  (letfn [(div [no]\n            (/ (- no (mod no 10)) 10))\n          (square-digit-sum [no acc]\n            (if (> no 0) (square-digit-sum (div no) (+ acc (* (mod no 10) (mod no 10)))) acc))\n          (is-square-larger? [no]\n            (if (> (square-digit-sum no 0) no) true false))]\n    (count (filter is-square-larger? seq))))", "problem": 120, "user": "4eb404ba535d7eef3080735a"}, {"code": "(fn sq [s]\n  (letfn [ (sum-square-digits [n] (reduce + (map #(* (- (int %) (int \\0)) (- (int %) (int \\0))) (into [] (str n))))) ]\n    (count (filter identity (map < s (map sum-square-digits s))))\n  )\n)", "problem": 120, "user": "4dd1de4d535dae65d5c462d7"}, {"code": "(fn [coll]\n  (reduce\n    (fn [acc n]\n      (let [squared-sum (reduce \n                          (fn [acc2 x]\n                            (+ acc2 \n                              (* \n                                (- (int x) (int \\0)) \n                                (- (int x) (int \\0)))))\n                            0\n                            (seq (str n)))]\n        (if (< n squared-sum)\n          (inc acc)\n          acc)))\n    0\n    coll\n        ))", "problem": 120, "user": "4eb1dd39535d7eef30807345"}, {"code": "(fn [x]\n  (count (filter \n\n(fn [y]\n  (loop [data y base y sum 0]\n    (if (= data 0)\n      (if (> sum base)\n  true\n\tfalse)\n\t(recur (quot data 10) base (+ sum (* (mod data 10) (mod data 10))))))) x)))", "problem": 120, "user": "4eb0afed535d7eef3080733e"}, {"code": "(fn [xs]\n  (let [\n  sum-of-digit-squares (fn [x]\n    (->> x\n         (map #(Integer/parseInt (str %)))\n         (map #(* % %))\n         (reduce + 0)))\n  ]\n  (->> xs\n       (map #(vector % (sum-of-digit-squares (str %))))\n       (filter (fn [[a b]] (< a b)))\n       count)))", "problem": 120, "user": "4e691c79535d8ccf87e9fe97"}, {"code": "(fn [xs]\n  (count (keep (fn [x]\n    (if (< x (reduce + (map #(Math/pow (- (int %) 48) 2) (str x)))) 1)) xs)))", "problem": 120, "user": "4ea55757535d7eef308072d3"}, {"code": "(fn [x]\n  (count (filter (fn [y] (< y \n    (reduce +\n      (map #(Math/pow % 2)\n        (map #(Integer. (str %)) (str y))\n      )\n    )\n  )) x))\n)", "problem": 120, "user": "4ea1ecfa535d7eef308072bb"}, {"code": "(fn [c] (count\n  (for [n c :let [sq #(* % %)\n        s (map #(sq (- (int %) 48))\n                  (str n))]\n        :when (< n (reduce + s))] n)))", "problem": 120, "user": "4eb97b2e535dfed6da9c6d54"}, {"code": "(fn [s] (count (filter (fn [k]\n           (< k\n              (apply + (map (comp #(* % %) read-string str) (str k))))) s)))", "problem": 120, "user": "4e68b46c535d8ccf87e9fe87"}, {"code": "(fn [coll]\n        (count (filter (fn [i]\n                         (let [components (->> i str seq)\n                               components (map (comp #(Integer. %) str) components)]\n                           (< i (apply + (map #(* % %) components)))))\n                       coll)))", "problem": 120, "user": "4e589bdc535d8a8b8723a295"}, {"code": "(fn [l] \n  (count\n    (for [i l \n      :let [s (reduce +(map #(let [d (- (int %) 48)] (* d d)) (str i)))] \n      :when (< i s)] i)))", "problem": 120, "user": "4e82f85d535db62dc21a62ce"}, {"code": "(fn [vals]\n   (let [nums (fn d [n]\n                (cons (rem n 10)\n                      (lazy-seq (if (= 0 n)\n                                  '()\n                                  (d (int (/ n 10)))))))\n         squares (fn [c] (if (< c (apply + (map #(* % %) (nums c))))\n                           1 0))]\n     (apply + (map squares vals))) )", "problem": 120, "user": "4e9609ad535dbda64a6f6b3e"}, {"code": "(fn [s]\n  (letfn [(ss [n]\n            (reduce\n              +\n              (map #(* % %)\n                (map #(Integer/parseInt (str %)) \n                  (seq (str n))))))]\n    (count\n      (filter\n        (fn [[n s]] (< n s))\n        (map #(vector % (ss %)) s)))))", "problem": 120, "user": "4dbdc9da535d020aff1edf4c"}, {"code": "(fn [xs]\n  (count \n    (filter \n      (fn [x] (< x (reduce #(+ %1 (Math/pow (Integer/parseInt (str %2)) 2)) 0 (str x)))) \n      xs)))", "problem": 120, "user": "4e7263a1535d5021c1a8965f"}, {"code": "(fn sum-of-square-of-digits [coll]\r\n  (letfn [(csqr [c] (let [n (Character/digit c 10)] (* n n)))\r\n          (sosod [n] (apply + (map csqr (str n))))]\r\n    (count (filter #(< % (sosod %)) coll))))", "problem": 120, "user": "4dd7d040535d2dad7130b5d6"}, {"code": "(fn [sq] (reduce + (map (fn [i] (let [istr (map #(- (int %) 48) (seq (str i)))\r\n               dig-sum (reduce + (map #(* % %) istr))]\r\n           (if (< i dig-sum) 1 0))) sq)))", "problem": 120, "user": "4eb44d78535d7eef30807360"}, {"code": "(fn [coll]\n  (count\n    (filter identity\n    (map\n      (fn [number]\n        (< number\n          (reduce +\n            (map\n              #(Math/pow (Integer/parseInt (str %)) 2)\n              (str number)))))\n      coll))))", "problem": 120, "user": "4ec2fe3f535dcc7ae8597d4f"}, {"code": "(fn [coll]\n  (letfn [(smaller-than-sum? [i] \n    (< i\n      (apply + \n      (map #(* % %) \n        (map #(Integer/parseInt (str %)) \n          (str i))))))]\n(count (filter smaller-than-sum? coll))))", "problem": 120, "user": "4ec34578535dcc7ae8597d51"}, {"code": "(fn [seq]  \n  (count \n    (filter \n      (fn [n]\n        (< n \n          (reduce + \n            (map \n              #(let [d (Integer/parseInt (str %))]\n              (* d d))\n              (str n)))))\n        seq)))", "problem": 120, "user": "4e6dc95a535d5021c1a895f1"}, {"code": "(fn [s]\n  (let [\n    toInt\n      (fn [x] (map #(- (int %) (int \\0)) (str x)))\n    sumSquare\n      (fn [x] (reduce + (map #(* % %) x)))]\n  (count\n    (filter #(< % (sumSquare (toInt %))) s))))", "problem": 120, "user": "4ec5d40d535d6d7199dd36b9"}, {"code": "(fn f [s]\n  (loop [t s r 0]\n    (if (empty? t)\n      r\n      (let [sqdnum\n        (\n          (fn sqd [n] (if (< n 10) (* n n) (+ (sqd (quot n 10)) (* (mod n 10) (mod n 10)))))\n          (first t)\n        )]\n        (recur (rest t) (+ r (if (< (first t) sqdnum) 1 0)))))))", "problem": 120, "user": "4e8b98fc535d65386fec2124"}, {"code": "(fn [coll] (count (filter \n  (fn [num] \n    (< num \n    (reduce + (map #(* % %) \n                (map #(Character/getNumericValue %) (str num))))))coll )))", "problem": 120, "user": "4eb2eae5535d7eef30807351"}, {"code": "(fn [c]\n  (count \n\t\t(filter \n\t\t\t(fn [n] (< n (reduce + (map #(Math/pow (- (int %) 48) 2) (str n))))) \n\t\t\tc)))", "problem": 120, "user": "4ec16c21535dfed6da9c6dac"}, {"code": "(fn [col]\n  (count (filter\n          (fn [x] (< x\n                  ((fn [m]\n                     (loop [sum 0 r (quot m 10) module (mod m 10) ]\n                      (if (= r 0)\n                          (+ sum (* module module))\n                          (recur (+ sum (* module module) )  (quot r 10 ) (mod r 10) )\n                        )\n                       )\n                     )     x)\n                    ))\n          col)\n  )\n\n  )", "problem": 120, "user": "4ec5bec6535d6d7199dd36b3"}, {"code": "(fn [xs]\n  (count\n    (filter \n      #(< \n        %\n        (reduce\n          (fn [p x]\n            (+\n              p \n              (* (Integer/parseInt (str x)) (Integer/parseInt (str x)))))\n          0\n          (str %)))\n      xs)))", "problem": 120, "user": "4ec07699535dfed6da9c6da2"}, {"code": "(fn [n] \n   (count (filter true? \n     (map (fn [h] (< h (reduce + (map #(* %1 %1) (map #(- (int %1) 48) (str h)))))) n))))", "problem": 120, "user": "4eabb245535d7eef30807319"}, {"code": "#({10 8 30 19} (count %) 50)", "problem": 120, "user": "4e1350af535d04ed9115e7d8"}, {"code": "(fn [coll] (letfn [(sumsq [x]\n(apply + (map #(* % %) (map #(Character/digit % 10) (str x)))))]\n                   (count (filter #(true? %) (map #(< % (sumsq %)) coll)))))", "problem": 120, "user": "4ea7999e535d7eef308072ee"}, {"code": "(fn f [coll]\n  (let [ss (fn ss [x] (if (= x 0) 0\n                      (+ (* (mod x 10) (mod x 10)) (ss (quot x 10)))))\n        s (map ss coll)\n        ]\n    (count (filter true? (map < coll s)))))", "problem": 120, "user": "4e14108c535d04ed9115e7dd"}, {"code": "(fn [s] \n  (let [\n    digits (fn [n] (map #(- (int %) 48) (str n)))\n    squares (fn [s] (map #(* % %) s))\n    sum #(reduce + %)\n    cond #(< % (-> % digits squares sum))\n    ]\n    (count (filter cond s))))", "problem": 120, "user": "4e25176e535d04ed9115e829"}, {"code": "(fn [s]\n  (let\n    [ ssd (fn ssd [n]\n            (if (= 0 n) 0\n                (+ (* (mod n 10) (mod n 10)) (ssd (quot n 10)))))]\n  (count (filter\n    #(< % (ssd %)) s))))", "problem": 120, "user": "4e6f578c535d5021c1a8961b"}, {"code": "(fn [is]\n  (let [digits (fn [i] (map #(Integer/parseInt (str %)) (str i)))\n        square (fn [i] (map #(* % %) (digits i)))\n        sumsquare #(apply + (square %))]\n    (count (filter #(< % (sumsquare %)) is))))", "problem": 120, "user": "4daf8f84edd6309eace4d17a"}, {"code": "(fn [ns]\n  (letfn\n     [\n      (digits [n]\n        (loop [acc () n n]\n          (if (> 10 n)\n            (conj acc n)\n            (let [q (quot n 10) r (rem n 10)]\n              (recur (conj acc r) q)))))\n      (pred [n]\n        (< n (reduce + (map #(* % %) (digits n)))))\n      ]\n   (count (filter pred ns))))", "problem": 120, "user": "4ed188c8535d44c135fd68cf"}, {"code": "(fn [l] (count (filter (fn [[a b]] (< a b)) (map \n(fn [e] \n  (let [q \n    (reduce + \n      (map (fn [x] (* x x)) \n        (map (comp (partial + -48) int) (str e))))] \n    [e q])) l))))", "problem": 120, "user": "4ebb78a2535dfed6da9c6d70"}, {"code": "(fn [l]\n  (let [sd (fn [ret cur]\n               (if (zero? cur) ret\n                      (recur (+ ret (* (rem cur 10) (rem cur 10)))\n                             (quot cur 10))))]\n        (count (filter #(< % (sd 0 %)) l))))", "problem": 120, "user": "4ec21058535dfed6da9c6dba"}, {"code": "(fn [xs]\n  (letfn [(sum-of-squared-digits [x]\n            (->> x str\n              (map (comp #(* % %) read-string str))\n              (reduce +)))]\n  (count\n    (for [x xs :when (< x (sum-of-squared-digits x))] x))))", "problem": 120, "user": "4eb51942535d7eef30807365"}, {"code": "(fn [z] (count (filter \r\n  (fn [x] (< x (\r\n    (fn [y] \r\n      (reduce + (map #(Math/pow (- (int %) 48) 2) (str y))))\r\n    x))) \r\n  z)))", "problem": 120, "user": "4ec0c7ba535dfed6da9c6da4"}, {"code": "(fn [coll]\n  (letfn [(sum-of-squared-digits [n]\n            (let [digits (map (comp read-string str) (str n))]\n              (reduce + (map #(* % %) digits))))]\n    (count (filter #(< % (sum-of-squared-digits %)) coll))))", "problem": 120, "user": "4e5d0e96535d8a8b8723a2c8"}, {"code": "(fn [s]\n  (let [sq #(* % %)\n        dsum (fn [n] (reduce #(+ % (sq (- (int %2) 48))) 0 (str n)))]\n  (count (filter #(< % (dsum %)) s))))", "problem": 120, "user": "4eb0a757535d7eef3080733d"}, {"code": "(fn [xs] (let \n  [toDigits    (fn [i] (map #(->> % str Integer/parseInt) (str i)))\n   sumSquares  (fn [is] (reduce + 0 (map #(* % %) is)))\n   predicate   (fn [i] (< i (->> i toDigits sumSquares)))\n  ]\n  (count (filter predicate xs))\n))", "problem": 120, "user": "4ed500bb535d10e5ff6f52d3"}, {"code": "(fn [l]\n  (count\n   (for [i l\n         :let [digit-sq (->> i\n                             str\n                             (map str)\n                             (map #(Integer. %))\n                             (map #(* % %))\n                             (reduce +))]\n         :when (> digit-sq i)]\n     digit-sq)))", "problem": 120, "user": "4e59b02c535d8a8b8723a2a2"}, {"code": "(fn ! [s]\r\n  (let [x #(< % (loop [n % o 0]\r\n\t\t\t (if (= 0 n) o\r\n\t\t\t     (recur (quot n 10) (+ o (* (rem n 10) (rem n 10)))))))]\r\n\t     (reduce #(if (x %2) (+ %1 1) %1) 0 s)))", "problem": 120, "user": "4e8a460e535d65386fec2109"}, {"code": "(fn [nums] (count (filter #(< % (reduce (fn [x y] (+ x (* (- (int y) 48) (- (int y) 48)))) 0 (str %))) nums)))", "problem": 120, "user": "4e89ff3d535d3e98b802328a"}, {"code": "(fn [s]\n  (letfn [(digits [n] \n            (let [rightmost-digit (mod n 10)]\n              (if (= rightmost-digit n)\n                (vector n)\n                (conj (digits (quot n 10)) rightmost-digit))))\n          (less-than-sum-of-squares? [n] \n            (let [sum-of-squares (reduce #(+ %1 (* %2 %2)) 0 (digits n))]\n              (< n sum-of-squares)))\n          ]   \n  (count (filter less-than-sum-of-squares? s))))", "problem": 120, "user": "4ec70f26535d6d7199dd36dd"}, {"code": "(fn cltsos [coll]\n  (count\n    (filter\n      (fn [x] (< x (reduce + (for [digit (str x)] (#(* % %) (read-string (str digit)))))))\n      coll)))", "problem": 120, "user": "4ec75077535d6d7199dd36e0"}, {"code": "(fn [s]\n  (apply + (map\n    (fn [x] (if (< x (apply + (map (comp #(* % %) read-string) (re-seq #\"\\d\" (str x))))) 1 0))\n    s)))", "problem": 120, "user": "4e9519b4535dbda64a6f6b2d"}, {"code": "(fn digits-filter [coll]\n  (let [digits \n        (fn [n]\n          (->> n\n               str\n               (map #(-> % str Integer.))))\n        square #(* % %)\n        sum #(reduce + %)]\n    (count (filter (fn [number]\n              (< number (sum (map square (digits number)))))\n            coll))))", "problem": 120, "user": "4eda7cc3535d10e5ff6f530e"}, {"code": "(fn [x] (count (filter\n                     (fn [a]\n                       (if (< a\n                              (loop [n a r 0]\n                                (if (= 0 n)\n                                  r\n                                  (recur (quot n 10)\n                                         (+ r (* (rem n 10) (rem n 10)))))))\n                         true\n                         false\n                         )\n                       )\n                     x)))", "problem": 120, "user": "4ebef65e535dfed6da9c6d9b"}, {"code": "(fn [coll]\n  (count (filter (fn [elem]\n                    (>\n                      (reduce #(+ %1 (* %2 %2)) 0 (map #(Integer/parseInt (str %)) (seq (str elem))))\n                      elem)) coll)))", "problem": 120, "user": "4edab806535d10e5ff6f5311"}, {"code": "(fn[s](count \n        (filter \n          (fn [x] (> \n                        (->> x \n                            str \n                            (map #(- 48 (int %))) \n                            (map #(* % %)) \n                            (reduce +))\n                        x))\n        s)))", "problem": 120, "user": "4eca40cd535d6d7199dd3703"}, {"code": "(fn [l] (count (filter (fn [[a b]] (< a b)) (map \n(fn [e] \n  (let [q \n    (reduce + \n      (map (fn [x] (* x x)) \n        (map (comp (partial + -48) int) (str e))))] \n    [e q])) l))))", "problem": 120, "user": "4ede8789535d10e5ff6f5337"}, {"code": "(fn cltss [n]\n    (letfn [(sq [x] (* x x))\n            (cs [x]\n                (apply + (map sq (map #(read-string (str %)) (seq (str x))))))]\n            (count (filter #(< % (cs %)) n))))", "problem": 120, "user": "4ed72e51535d10e5ff6f52ee"}, {"code": "#(count (keep (fn [n] (if (< n (% n)) n)) %2)) (fn [x] (reduce #(+ % (Math/pow (Character/digit %2 10) 2)) 0 (str x)))", "problem": 120, "user": "4e65027c535d8ccf87e9fe6e"}, {"code": "(fn [xs]\n  (reduce \n    (fn [n x]\n      (if (> (reduce #(+ %1 (Math/pow (- (int %2) 48) 2)) 0 (str x)) x) \n        (inc n) n))\n    0 xs))", "problem": 120, "user": "4e513758535dc968683fc4f3"}, {"code": "(fn[is]\n  (let [component-digits \n        #(map(comp read-string str)(str %))\n        squares\n        #(map(fn[i](* i i)) %)\n        sum-squared-digits \n        (fn[i](apply + (squares(component-digits i))))]\n  (count(filter(fn[i](< i (sum-squared-digits i)))is))))", "problem": 120, "user": "4edeac6b535d10e5ff6f533a"}, {"code": "(fn [s]\n  (count \n    (filter \n      (fn [[d sum]] (< d sum))\n      (map \n        (fn [n] \n          (list  \n            n\n            (apply + \n              (map \n                #(* % %) \n                (map #(- (int %) 48) (str n))))))\n        s))))", "problem": 120, "user": "4ec28d86535dfed6da9c6dbc"}, {"code": "(fn [nums]\n  (letfn [(digits [n] (map #(Integer/parseInt(str %)) (Integer/toString n)))]\n    (count (filter \n      (fn [n] (< n (apply + (map #(* % %) (digits n))))) \n      nums))))", "problem": 120, "user": "4eb9ce75535dfed6da9c6d5e"}, {"code": "(fn [s]\n  (let [good (fn [n] (let [s (apply + (map #(* % %)\n                                          (map read-string\n                                              (re-seq #\"\\d\" (str n)))))]\n                       (< n s)))]\n    (count (filter good s))))", "problem": 120, "user": "4ed94d69535d10e5ff6f5303"}, {"code": "(comp count #(filter identity %) (fn [y] (map (fn [x] (< x (apply + (map (comp #(* % %) read-string str) (seq (str x)))))) y)))", "problem": 120, "user": "4ece9ca9535d23f03622770f"}, {"code": "(fn [l]\n  (count (filter (fn [n]\n                    (< n (apply + (map #(Math/pow (- (int %) (int \\0)) 2) (seq (str n))))))\n                 l)))", "problem": 120, "user": "4ede8e1d535d10e5ff6f5339"}, {"code": "(fn [s] (count (filter\n  (fn [n] \n    (letfn [(digits [n]\n        (if (< n 10)\n          [n]\n          (conj\n            (digits (unchecked-divide n 10))\n            (rem n 10))))]\n      (< n (apply + (map #(* % %) (digits n)))))) s)))", "problem": 120, "user": "4eb2e6ca535d7eef3080734f"}, {"code": "(fn [coll]\n  (let [digit->int (fn [d] (Integer/parseInt (str d)))\n        digits (fn [x] (map digit->int (str x))) \n        pred (fn [x] (< x (reduce #(+ % (* %2 %2)) 0 (digits x))))]\n    (count (filter pred coll))))", "problem": 120, "user": "4edd038c535d10e5ff6f5327"}, {"code": "(fn [ints]\n  (count (filter #(< % (reduce + (map (fn [x] (* x x))\n                                      (map (comp (partial + -48) int)\n                                           (seq (str %))))))\n                 ints)))", "problem": 120, "user": "4ee3b586535d10e5ff6f5371"}, {"code": "(fn [s] (count (filter #(< % (loop [x % r 0] (if (zero? x) r (let [t (mod x 10)] (recur (/ (- x t) 10) (+ r (* t t))))))) s)))", "problem": 120, "user": "4eb13d60535d7eef3080733f"}, {"code": "#(count\r\n  (filter\r\n    (fn [n]\r\n      (let [s (str n)\r\n            sq (seq s)\r\n            sqr (map (fn [x] (Math/pow (- (int x) 48) 2)) sq)\r\n            ssqr (reduce + 0 sqr)]\r\n      (< n ssqr))) %))", "problem": 120, "user": "4ee40938535d10e5ff6f5375"}, {"code": "(fn [s]\n  (count (filter (fn [x]\n    (< x (reduce + 0\n      (map (fn [c]\n        (Math/pow (Integer/parseInt (str c)) 2))\n        (seq (str x)))))) s)))", "problem": 120, "user": "4ebc08a8535dfed6da9c6d7c"}, {"code": "(fn [se]\r\n  (let [\r\n    num-seq\r\n    (fn [n]\r\n      (map #(Integer. (str %)) (str n)))\r\n    sum-square\r\n    (fn [se]\r\n      (reduce + (map #(* % %) se)))]  \r\n    (count (filter #(< % (sum-square (num-seq %))) se))))", "problem": 120, "user": "4eddcbbf535d10e5ff6f532d"}, {"code": "(fn [l]\n  (count\n    (filter\n      (fn [n]\n        (< n\n           (apply + (map #(* % %) (map #(- (int %) 48) (str n))))))\n      l)))", "problem": 120, "user": "4ee82539535d93acb0a66878"}, {"code": "(fn sumsquares [xs]\n  (letfn [(digits [x]\n\t\t\t(map #(- (int %) (int \\0)) (seq (str x))))\n\t\t]\n\t\t(count (filter #(let [[digs x] %] (< x (apply + (map (fn [y] (* y y)) digs)))) (map vector (map digits xs) xs))\n\t))\n)", "problem": 120, "user": "4ed6238d535d10e5ff6f52de"}, {"code": "(fn [s] (letfn [(d [n] (map #(* (rem % 10) (rem % 10)) (take-while pos? (iterate #(quot % 10) n)) ))] \n                     (count (filter #(< % (reduce + (d %))) s)) ) )", "problem": 120, "user": "4ee7d177535d93acb0a6686f"}, {"code": "(fn [coll]\n  (letfn [(ssq [n]\n     (loop [s 0 val n]\n       (if (zero? val) s (recur (+ s (Math/pow (mod val 10) 2)) (quot val 10)))))]\n   (count (filter #(< % (ssq %)) coll))))", "problem": 120, "user": "4df3df8a535d08e6dec9fe2d"}, {"code": "(fn [ns]\n       (letfn [(ss [n] (reduce + 0 (map #(* % %) (map #(- (int %) 48) (str n)))))]\n              (count (filter #(< % (ss %)) ns))))", "problem": 120, "user": "4ee82223535d93acb0a66877"}, {"code": "(fn [coll]\n          (count (filter \n                  (fn [x] \n                      (< x (apply + (for [c (str x)]\n                                         (-> c str read-string (Math/pow 2))))))\n                  coll)))", "problem": 120, "user": "4e599577535d8a8b8723a29f"}, {"code": "#(count\n  (filter\n    (fn[n]\n      (< n \n        (loop [n n r 0]\n          (if (zero? n) r\n            (recur (quot n 10) (+ r (* (rem n 10)(rem n 10))))))))\n   %))", "problem": 120, "user": "4deff9f9535d08e6dec9fe15"}, {"code": "(fn [args] (count (for [n args :let [x (reduce + (map #(let [i (Long. (str %))] (* i i)) (str n)))] :when (> x n)] x)))", "problem": 120, "user": "4db091b7838c48654951d9c2"}, {"code": "(fn [coll]\n  (letfn [(dig [a] (if (zero? a) [] (conj (dig (quot a 10)) (rem a 10))))]\n    (count (filter true? (map \n      (fn [n] (< n (reduce #(+ %1 (* %2 %2)) 0 (dig n)))) \n      coll)))))", "problem": 120, "user": "4ed7b617535d10e5ff6f52f3"}, {"code": "#(count \n  (filter \n    (fn [x] (< x \n               ((fn [y] (reduce + \n                 (map \n                   (fn [z] (* z z)) \n                   (map \n                     (fn [a] (- (int a) 48)) \n                     (str y))))) x))) %))", "problem": 120, "user": "4e6a97a9535d8ccf87e9fef8"}, {"code": "(fn [nums]\n  (let [digits\n        (fn [n]\n          (map #(Integer/parseInt %) \n                (rest (clojure.string/split (str n) #\"\"))))]\n  (count \n    (filter \n      (fn [n] (< n\n              (reduce +\n                (map #(* % %) (digits n)))))\n      nums))))", "problem": 120, "user": "4daea889edd6309eace4d15b"}, {"code": "(fn [v]\n   (letfn [(square [n] (* n n))\n           (squared-digits [n] (if (zero? n)\n                                 []\n                                 (cons (square (mod n 10))\n                                       (squared-digits (int (/ n 10))))))\n           (sum-of-squared-digits [n] (reduce + (squared-digits n)))\n           (smaller-than-sum-of-squared-digits [n] (< n (sum-of-squared-digits n)))]\n     (count (filter true? (map smaller-than-sum-of-squared-digits v)))))", "problem": 120, "user": "4ee868be535d93acb0a6687d"}, {"code": "(fn [n]\n(reduce +\n (map\n       (fn [x] (if (> (reduce + (map #(* % %) (map #(- (int %) 48) (str x)))) x) 1 0))\n       n)))", "problem": 120, "user": "4dadca03c9a9d6ed4199dc57"}, {"code": "(fn compare-digit-sum\n  [coll]\n  (let [f1 (fn f1 [n]\n                  (if (zero? n)\n                    0\n                    (+ (* (mod n 10) (mod n 10)) (f1 (quot n 10)))))]\n    (count (filter #(< %1 (f1 %1)) coll))))", "problem": 120, "user": "4e3bcccd535deb9a81d77f56"}, {"code": "#(count \r\n  (filter\r\n    (fn [n] \r\n      (let [sum (reduce +\r\n                  (for [d (seq (str n)) \r\n                        :let [j (-(int d)(int \\0))]]\r\n                    (* j j)))]\r\n        (< n sum)))\r\n    %))", "problem": 120, "user": "4daddc19c9a9d6ed4599dc57"}, {"code": "(fn ssd-check [coll]\r\n  (letfn [(sum-sqr-digits [n]\r\n      (apply + (map #(* % %)\r\n\t\t\t  (map #(. Integer parseInt %)\r\n\t\t\t       (map str (vec (str n)))))))]\r\n    (count (filter #(< % (sum-sqr-digits %)) coll))))", "problem": 120, "user": "4ee9d697535d93acb0a66895"}, {"code": "#(reduce \n  (fn[sn,n](if (< n (reduce (fn[s,e]\n                   (let[d (Integer/valueOf (str e))]\n                       (+ s (* d d)))) \n    0 (str n))) (inc sn) sn)\n  )\n0 %)", "problem": 120, "user": "4ec75829535d6d7199dd36e1"}, {"code": "(fn [x]\n   (let [f (fn [n] (< n (apply + (map #(* % %) (map #(- (int %) 48) (str n))))))]\n(count (filter f x))))", "problem": 120, "user": "4ef0a39b535dced4c769f20c"}, {"code": "(fn [s] (count (filter (fn [x] (> (apply + (map (comp #(* % %) #(- % 48) int) (str x))) x)) s)))", "problem": 120, "user": "4eecdd66535d93acb0a668b9"}, {"code": "(fn [s] \n  (count (filter (fn [n] (< n\n                            (apply +\n                                   (map #(Math/pow (- (int %) 48) 2)\n                                        (str n)))))\n                 s)))", "problem": 120, "user": "4ef49c2c535dced4c769f238"}, {"code": "#(count (filter (fn [n] (< n (reduce (fn [a c] (+ a (-> c int (- 48) (Math/pow 2)))) 0 (str n)))) %))", "problem": 120, "user": "4ef2d243535dced4c769f221"}, {"code": "(fn [xs]\n  (count (filter \n(fn [x]\n  (< x\n     (reduce + (map #(* % %) (map #(Integer/parseInt (str %)) (str x))))))\n xs)))", "problem": 120, "user": "4ef41f26535dced4c769f230"}, {"code": "(fn [xs]\n  (let [digits (fn [x] (map #(Integer/parseInt (str %)) (str x)))\n        pred? (fn [x] (< x (apply + (map #(* % %) (digits x)))))]\n    (count (filter pred? xs))))", "problem": 120, "user": "4edecdae535d10e5ff6f533c"}, {"code": "(fn [coll]\r\n    (let [getdigits (fn digits [s]\r\n                       (when-let [[fd & rd] s]\r\n                         (lazy-seq (cons (- (int fd) 48)\r\n                                         (digits rd)))))]\r\n      (count (filter (fn [n]\r\n                (< n (reduce + (map #(* % %) (getdigits (str n))))))\r\n              coll))))", "problem": 120, "user": "4ef1ee67535dced4c769f219"}, {"code": "(fn [ns]\n    (let [digits (fn r [n]\n                   (if (< n 10)\n                     [n]\n                     (cons (mod n 10) (r (quot n 10)))))\n          sumsquaredigits (fn [n]\n                            (reduce + (map #(* % %) (digits n))))]\n        (count (filter #(< % (sumsquaredigits %)) ns))))", "problem": 120, "user": "4e6a0667535d8ccf87e9fe9e"}, {"code": "(fn my-ss-count [s]\r\n  (let [my-ss (fn [n]\r\n\t\t\t(loop [np n\r\n\t\t\t\t\tresult 0\r\n\t\t\t\t\tlid (mod np 10)]\r\n\t\t\t\t(if (= np 0)\r\n\t\t\t\t\tresult\r\n\t\t\t\t\t(recur (int (/ np 10)) (+ result (* lid lid)) (mod (int (/ np 10)) 10)))))]\r\n\t\t(loop [count 0\r\n\t\t\t\tsp s]\r\n\t\t\t(if (empty? sp)\r\n\t\t\t\tcount\r\n\t\t\t\t(recur\r\n\t\t\t\t\t(if (< (first sp) (my-ss (first sp)))\r\n\t\t\t\t\t\t(inc count)\r\n\t\t\t\t\t\tcount)\r\n\t\t\t\t\t(next sp))))))", "problem": 120, "user": "4efb92ce535dced4c769f27a"}, {"code": "(fn ssd [coll]\r\n  (let [f (fn [s] (reduce + (map #(* (- (int %) 48) (- (int %) 48)) (seq (str \"\" s)))))]\r\n\t(count \r\n\t\t(filter #(< % (f %)) coll))))", "problem": 120, "user": "4ecf1f51535d1f5ad70dba3a"}, {"code": "#(count (filter (fn[z](< z (reduce + (map (fn[y](* y y))(map (fn[x](Integer. (str x)))(vec (str z))))))) %))", "problem": 120, "user": "4ed2dd98535d44c135fd68e2"}, {"code": "#(count\n  (filter (fn [n]\n  (< n (apply +\n     (map (comp (fn[x] (* x x)) read-string str) (str n))))\n  ) %))", "problem": 120, "user": "4ef992c8535dced4c769f268"}, {"code": "(fn [coll]\n   (count\n     (filter \n     (fn [value] \n       (<\n         value\n        (reduce                               \n          (fn [result digit]                  \n            (let [n (Integer/parseInt (str digit))] \n            (+ result (* n n))))                  \n        0                                           \n        (str value))\n       )\n    )\n    coll)))", "problem": 120, "user": "4ee3afde535d10e5ff6f5370"}, {"code": "(fn [s]\n  (count\n   (for [x s\n         :let [d (map (comp read-string str) (str x))]\n         :when (< x (reduce + (map #(* % %) d)))]\n     s)))", "problem": 120, "user": "4ee9ddb8535d93acb0a66896"}, {"code": "(fn [s]\n  (apply + (map\n    (fn [x] \n      (if (< x (apply + \n        (map #(* % %) \n          (map #(- (int %) (int \\0)) \n            (str x)))))\n    1 0)) s)))", "problem": 120, "user": "4ef355e3535dced4c769f228"}, {"code": "(fn sum-square-digits [ns]\n  (letfn [(sq-digits [n]\n            (cond (= n 0) 0\n                  true (+ (* (mod n 10) (mod n 10)) (sq-digits (quot n 10)))))]\n    (count (filter #(< % (sq-digits %)) ns))))", "problem": 120, "user": "4ef6f5ea535dced4c769f250"}, {"code": "(fn [s]\n  (count \n    (filter (fn [x] \n              (< x (reduce + \n                      (map #(let [i (Integer/parseInt (str %))] \n                              (* i i )) \n                           (str x))))) \n                      s)))", "problem": 120, "user": "4dbb1126535d1e037afb21b3"}, {"code": "(fn [coll] (count (filter (fn [n] (< n (reduce + (map #(* % %) (map #(- (int %) 48) (str n)))))) coll)))", "problem": 120, "user": "4ef4c1ff535dced4c769f23e"}, {"code": "(fn [s] \n  (count \n    (filter \n      #(< % (\n        (fn [n] (reduce + \n          (map (fn [j] (* j j)) \n            (map (fn [i] (Integer. (str i))) \n               (seq (str n))))))  %)) s )))", "problem": 120, "user": "4efd98fa535de96065cf5086"}, {"code": "(fn [s] (let [d2sq (zipmap \"0123456789\" (map #(* % %) (range)))]\n  (count (filter #(< %1 (apply + (map d2sq (str %1)))) s))))", "problem": 120, "user": "4effb663535dcb61093f6a2e"}, {"code": "(fn [c]\n    (letfn [(sqs [n] (reduce + (for [s (str n) :let [x (Integer/parseInt (str s))]]\n                         (* x x))))]\n      (count (filter #(< % (sqs %)) c))))", "problem": 120, "user": "4ed292ac535d44c135fd68d9"}, {"code": "(fn [coll]\n  (let [f (fn [x]\n            (apply +\n                   (map #(let [s (- (int %) 48)] (* s s))\n                   (str x))))]\n  (count (filter #(< % (f %)) coll))))", "problem": 120, "user": "4f031eac535dcb61093f6a67"}, {"code": "(fn [s]\n  (count\n    (filter (fn [[x y]] (< x y))\n      (map #(vector % (reduce (fn [p i] (let [t (Integer/parseInt (str i))] (+ p (* t t))))\n                        0\n                        (seq (str %))))\n     s))))", "problem": 120, "user": "4e1f9bb5535d04ed9115e80d"}, {"code": "(fn [coll]\n    (letfn [(digits [x]\n              (map #(Character/getNumericValue %) (seq (Integer/toString x))))\n            (squared-sum [x]\n              (reduce + (map #(* % %) (digits x))))]\n      (count (filter (fn [x] (< x (squared-sum x))) coll))))", "problem": 120, "user": "4dc29a1d535d020aff1edf96"}, {"code": "(fn haz [x]\n  (let [valor (fn dig [x]\n  (loop [num x res 0]\n    (if (= num 0) res\n     (recur (Math/floor (/ num 10))\n       (+ (Math/pow (mod num 10) 2) res)))))]\n(count  \n (filter #(< % (valor %)) x))))", "problem": 120, "user": "4f04a06d535dcb61093f6bd9"}, {"code": "(fn [a] \n  (reduce \n    #(if \n       (< %2 \n         (reduce \n           (fn [b n] (+ b (* (Integer/decode (str n)) (Integer/decode (str n))))) \n           0 (str %2))) \n       (inc %)\n       %)\n    0 a))", "problem": 120, "user": "4f01ff83535dcb61093f6a3a"}, {"code": "#(count (filter (fn [x] (loop [a x,s 0]\n  \t  (if (< a 10) \n\t\t      (if (< x (+ s (* a a))) true false)\n\t\t      (recur (quot a 10) (+ s (* (mod a 10) (mod a 10))))))) %))", "problem": 120, "user": "4ec5d62c535d6d7199dd36ba"}, {"code": "(fn fr [c]\n   (let [sm (fn [a]\n              (reduce #(+ %\n                          (Math/pow (Character/getNumericValue %2) 2))\n                      0\n                      (str a)))]\n    (reduce #(+ %\n                (if (< %2 (sm %2))\n                  1\n                  0)) c)))", "problem": 120, "user": "4ef57a7f535dced4c769f246"}, {"code": "(fn [coll]\n  (letfn [(sqr-digs [n] (map #(Math/pow (- (int %) 48) 2) (str n)))]\n    (count (filter #(< % (apply + (sqr-digs %))) coll))))", "problem": 120, "user": "4ec5aa1f535d6d7199dd36b0"}, {"code": "(fn [v] (apply + (map #(if (< % (\n  apply + (map (fn [d]\n         (let [z (- (int d) 48)] (* z z))) \n       (str %))\n  ) ) 1 0) v)))", "problem": 120, "user": "4f01c938535dcb61093f6a39"}, {"code": "(fn [coll]\n      (count (filter #(< % (reduce + (map (fn [c]\n                                            (Math/pow (- (int c) 48) 2)) (str %)))) coll)))", "problem": 120, "user": "4f036d9b535dcb61093f6ac1"}, {"code": "(fn prob-0120 [ns]\n  (count\n   (for [n ns\n         :let [sqd-digs (map #(* % %) (map #(Long/parseLong (str %)) (seq (str n))))]\n         :when (< n (apply + sqd-digs)) ]\n     n)))", "problem": 120, "user": "4f047c07535dcb61093f6bcd"}, {"code": "(fn [s] (count\n          (filter (fn [[n nn]] (< n nn))\n                  (map (fn [x] [x\n                               (reduce #(+ % (let [i (Integer/valueOf (str %2))] (* i i)))\n                                       0 (str x))])\n                       s))))", "problem": 120, "user": "4ee88bfb535d93acb0a66881"}, {"code": "(fn [c] \n   (count (filter \n            (fn [x] \n              (< x \n                 (reduce \n                   #(+ % (* %2 %2)) \n                   0 \n                   (map #(- (int %) 48) (str x)))))\n            c)))", "problem": 120, "user": "4efb2fd7535dced4c769f274"}, {"code": "(fn [s]\n  (letfn [(sds [n]\n            (reduce + (map #(Math/pow (Character/digit % 10) 2)\n                            (str n))))]\n    (count (filter #(< % (sds %)) s))))", "problem": 120, "user": "4f04f847535dcb61093f6beb"}, {"code": "(fn [c] (count (filter (fn [x] (< x (->> x (str) (map #(- (int %) 48)) (map #(* % %)) (reduce +)))) c)))", "problem": 120, "user": "4db8f6c4535d1e037afb219e"}, {"code": "(fn [l]\n  (count\n    (filter\n      #(< % (reduce\n        (fn [x y]\n          (let [z (read-string (str y))]\n            (+ x (* z z)))) 0 (str %))) l)))", "problem": 120, "user": "4f062d4a535dcb61093f6c08"}, {"code": "(fn [l]\n  (let [sqd (fn [n]\n              (reduce + (map #(let [i (fn [c] (- (int c) (int \\0)))]\n                                (* (i %) (i %)))\n                             (str n))))]\n    (count (filter #(< % (sqd %))\n                   l))))", "problem": 120, "user": "4e8df08f535d65386fec213e"}, {"code": "(fn [c] (count (filter #(< % (\n      (fn [s] \n        (reduce + \n          (map (fn [i] (* i i)) \n            (map \n              (fn [c](- (int c) (int \\0)))\n              (str s)\n            )))) % )) c))) ; cheated", "problem": 120, "user": "4f083048535dcb61093f6c33"}, {"code": "(fn [s]\n  (letfn \n    [(num-seq [n]\n      (lazy-seq\n        (when (not= n 0)\n          (cons\n            (rem n 10)\n            (num-seq (quot n 10))))))\n    (prod-sum-seq [v] (apply + (map #(* % %) v)))]\n    (count\n      (filter\n        #(> (second %) (first %))\n          (map (fn [n] (vector n (prod-sum-seq (num-seq n))))\n          s)))))", "problem": 120, "user": "4ec18451535dfed6da9c6db0"}, {"code": "(fn [in-seq]\n  (count\n    (filter (fn [n] \n              (< n ((fn [num] \n                      (reduce + (map #(* % %) \n                        (map #(Integer/parseInt (str %)) (.toString num))))) n)))\n    in-seq)))", "problem": 120, "user": "4ef4ab95535dced4c769f23b"}, {"code": "(fn [s]\n  (let [digit-sq-sum \n    (fn [n]\n      (apply +\n        (for [c (str n) \n          :let [d (- (int c) (int \\0))]\n          :let [d2 (* d d)]\n        ] d2)))]\n  (loop [s_ s ret 0]\n    (cond\n      (not s_) ret\n      (< (first s_) (digit-sq-sum (first s_)))\n        (recur (next s_) (inc ret))\n      :else\n        (recur (next s_) ret)))))", "problem": 120, "user": "4f050dec535dcb61093f6bef"}, {"code": "(fn [s]\n  (letfn [(sum-sq-dig [n]\n            (if (< n 10)\n              (* n n)\n              (let [t (mod n 10)]\n                (+ (* t t) (sum-sq-dig (int (/ n 10)))))))]\n  (count (filter #(< % (sum-sq-dig %)) s))))", "problem": 120, "user": "4ec5cdb0535d6d7199dd36b8"}, {"code": "(fn [a] \n  (count \n    (filter \n      (fn [n] \n        (< n \n          (reduce + \n            (map \n              #(let [x (Integer/parseInt (str %))]\n                     (* x x))\n               (str n) ))))\n      a)))", "problem": 120, "user": "4f039bbe535dcb61093f6b39"}, {"code": "(comp count (partial filter \n  (fn [n] (< n (reduce + \n    (map #(Math/pow (read-string (str %)) 2) (str n)))))))", "problem": 120, "user": "4f06dcad535dcb61093f6c16"}, {"code": "(fn sum-of-square-digits\n  [coll]\n  (letfn [(square-sum [n]\n                      (reduce #(+ % (* %2 %2)) 0  (map #(- (int %) 48) (seq (str n)))))]\n         (reduce #(if (> (square-sum %2) %2) (inc %) %) 0 coll)))", "problem": 120, "user": "4edf5dc6535d10e5ff6f5340"}, {"code": "(fn [coll]\n  (count (filter (fn [n]\n      (< n (apply + (map #(* (Math/pow (Character/getNumericValue %) 2)) (seq (str n)))))) coll)))", "problem": 120, "user": "4eb955da535dfed6da9c6d50"}, {"code": "(fn [in] \n  (count\n    (filter\n      (fn [n]\n        (< n \n          (reduce #(+ % (* %2 %2)) 0 (map #(Integer/parseInt (str %)) (str n)))))\n      in)))", "problem": 120, "user": "4f04b66b535dcb61093f6bdd"}, {"code": "(fn [coll]\n  (letfn [(square [n] (* n n))\n          (ctoi [c] (- (int c) (int \\0)))\n          (square-digits [n] (reduce + (map #(square (ctoi %)) (str n))))]\n    (count\n      (filter\n        #(< % (square-digits %))\n        coll))))", "problem": 120, "user": "4f0b2028535d0136e6c222ff"}, {"code": "(fn [coll]\n  (letfn [(s [n] (reduce #(+ %1 (Math/pow (- 48 (int %2)) 2)) 0 (str n)))]\n    (count (filter #(< % (s %)) coll))))", "problem": 120, "user": "4df407c3535d08e6dec9fe2e"}, {"code": "(fn \n  [c] \n\t\t(count \n\t\t\t(filter \n\t\t\t\t(fn [n] (< n (apply + (map #(Math/pow (- (int %) 48) 2) (str n)))))\tc)))", "problem": 120, "user": "4f047542535dcb61093f6bc7"}, {"code": "(fn sos-o-digits [num]\n  (letfn [(num->digits [num]\n            (letfn [(numiter [val col]\n                      (if (>= 0 val) col\n                          (recur (quot val 10)\n                                 (conj (apply list col) (rem val 10)))))]\n              (numiter num [])))                    \n          (sum-of-square [digits]\n            (reduce + (map #(* % %) digits)))\n          (less-than-sos? [num]\n              (let [digits (num->digits num)\n                    sos (sum-of-square digits)]\n                (< num sos)))]\n    (count (filter less-than-sos? num))))", "problem": 120, "user": "4ddb339c535d02782fcbe9f9"}, {"code": "(fn[num] (count (filter #(> (reduce + (map (fn[x] (Math/pow (- (int x) 48) 2)) (str %))) %) num)))", "problem": 120, "user": "4daeabf6edd6309eace4d15c"}, {"code": "(fn [col] \n  (count (filter \n     (fn [n] (< n (reduce + \n                (map #(* % %) \n                   (map #(- (int %) (int \\0)) (str n))))))\n     col)))", "problem": 120, "user": "4eeaf88f535d93acb0a668a3"}, {"code": "(fn [coll]\n    (letfn [(digit [ch] (- (int ch) (int \\0)))\n            (squared-digit [ch] (* (digit ch) (digit ch)))\n            (sum-squared-digits [n] (reduce + (map squared-digit (str n))))]\n      (count (for [n coll\n                   :when (< n (sum-squared-digits n))]\n             n))))", "problem": 120, "user": "4e89e939535d3e98b8023287"}, {"code": "(comp count \n  (partial filter \n    (fn [n]\n      (let [sq #(* % %)]\n        (< n \n          (apply + \n            (map \n              #(sq (Integer/parseInt (str %)))\n              (str n))))))))", "problem": 120, "user": "4f03ac2d535dcb61093f6b4a"}, {"code": "(fn [coll]\n  (let [f (fn [x]\n            (->> (str x) (map #(let [n (- (int %) 48)]\n                                    (* n n)))\n                                 (reduce +)))]\n    (->> coll\n         (filter #(< % (f %)))\n         count)))", "problem": 120, "user": "4dbe68c7535d020aff1edf5e"}, {"code": "(fn [l]\n  (letfn [(digits [s] (map #(Integer/parseInt (str %)) (str s)))\n          (sqr [x] (* x x))\n          (sds [x] (apply + (map sqr (digits x))))]\n    (count (filter #(< % (sds %)) l))))", "problem": 120, "user": "4e2d84bf535deb9a81d77f09"}, {"code": "(fn csq [m] \n  (count (filter (fn [x] (< x (apply + (map #(Math/pow (- (int %) 48) 2) \n    (seq (str x)))))) m)))", "problem": 120, "user": "4ed27f9f535d44c135fd68d5"}, {"code": "(fn sum-of-square [l]\r\n    (letfn [(int-to-list [n]\r\n              (loop [i n s '()]\r\n                (if (< i 10)\r\n                  (conj s i)\r\n                  (recur (quot i 10) (conj s (rem i 10))))))\r\n            (sum-of-squares [l2]\r\n              (reduce + (map (fn [a] (* a a)) l2)))]\r\n      (count (filter true? (map (fn [a] (< a (sum-of-squares (int-to-list a)))) l)))))", "problem": 120, "user": "4f039524535dcb61093f6b2c"}, {"code": "(fn [c]\n  (letfn [(digits [n]\n    (map #(Integer/parseInt %) (re-seq #\"\\d\" (.toString n))))]\n  (count\n    (filter \n      (fn [a] (>\n        (reduce + (map #(* % %) (digits a))) a)) c))))", "problem": 120, "user": "4e8a0d5d535d3e98b802328e"}, {"code": "(let [digits (fn [x] (map #(- (int %) 48) (str x)))\n      sum-sq-digits (fn [x] (reduce + (map #(* % %) (digits x))))]\n  (fn [xs] (count (filter #(< % (sum-sq-digits %)) xs))))", "problem": 120, "user": "4ebcb8ff535dfed6da9c6d8a"}, {"code": "(fn [coll]\n  (->> coll\n       (filter (fn [n] (->> (str n)\n                            (map #(let [x (- (int %) (int \\0))] (* x x)))\n                            (apply +)\n                            (< n))))\n       count))", "problem": 120, "user": "4daec9dcedd6309eace4d15f"}, {"code": "#(loop [x % result 0]\n     (if (empty? x)\n\t       result\n\t       (let [value (loop [digits (map read-string (re-seq #\"\\d\" (pr-str (first x)))) squared 0]\n\t   (if (empty? digits)\n\t       squared\n\t       (recur (rest digits) (+ squared (* (first digits) (first digits))))))]\n\t       (recur (rest x) (if (> value (first x)) (inc result) result)))))", "problem": 120, "user": "4f066916535dcb61093f6c10"}, {"code": "(fn [c]\n  (count (filter (fn [x]\n            (< x (reduce +\n                         (map #(* %1 %1)\n                              (map #(- (int %1) 48)\n                                   (str x))))))\n          c)))", "problem": 120, "user": "4f0ef874535d0136e6c22328"}, {"code": "(fn f120 [s]\n(let [\ncrit (fn [x]\n(< x (reduce + (map #(* % %)(map #(Integer/parseInt %) (map str ( map first (partition 1 (str x)))))))\n)\n)\n]\n(count (filter crit s))\n)\n)", "problem": 120, "user": "4f0df199535d0136e6c2231e"}, {"code": "(fn [xs]\n  (count \n    (filter \n      (fn [a] (< a (reduce #(+ %1 (* %2 %2)) 0 (map #(- (int %) 48) (str a)))))\n    xs)))", "problem": 120, "user": "4f0e995e535d0136e6c22326"}, {"code": "(fn n [c]\n    (count (filter\n      (fn [n] (< n\n\t\t       (#(apply + (map * % %))\n\t\t\t(map #(. Integer parseInt (str %) 10) (str n))))) c)))", "problem": 120, "user": "4e57d1e2535d8a8b8723a289"}, {"code": "(fn [n] (count (for [x n :when (< x (reduce + (for [y (str x)] (let [z (-> y int (- (int \\0)))] (* z z)))))] 1)))", "problem": 120, "user": "4f0cc259535d0136e6c22310"}, {"code": "(fn sum-of-square-of-digits [coll]\r\n    (letfn [(magnitude [n]\r\n              (first (drop-while #(>= (quot n %) 10) (iterate (partial * 10) 1))))\r\n            (digit-seq [n]\r\n              (loop [mag (magnitude n)\r\n                     x n\r\n                     digits []]\r\n                (if (= 1 mag)\r\n                  (conj digits x)\r\n                  (recur (/ mag 10)\r\n                         (rem x mag)\r\n                         (conj digits (quot x mag))))))\r\n            (squared-digits-sum [n]\r\n              (apply + (map #(* % %) (digit-seq n))))]\r\n      (count (filter (fn [[num squared-sum]] (< num squared-sum))\r\n                     (map vector coll (map squared-digits-sum coll))))))", "problem": 120, "user": "4f149e0f535d64f60314643d"}, {"code": "(fn [s]\n   (let [char-to-int #(-> % str Integer/parseInt)\n         square #(* % %)\n         sq-digs-fn (fn [n] (map #(->> % char-to-int square)\n                                 (str n)))\n         compare-fn #(< % (apply + (sq-digs-fn %)))]\n     (count (filter compare-fn s))))", "problem": 120, "user": "4ee26f01535d10e5ff6f5368"}, {"code": "(fn sum-squares [coll]\n  (letfn [(digits  [num]\n            (loop [result '() n num]\n              (if (zero? (quot n 10))\n                (conj result n)\n                (recur (conj result (rem n 10)) (quot n 10)))))\n          (sos [num]\n            (let [num-list (digits num)]\n              (reduce + (map #(* % %) num-list))))]\n    (count (filter #(< % (sos %)) coll))))", "problem": 120, "user": "4e95a440535dbda64a6f6b37"}, {"code": "(fn buildColl [x]\n    (count ((fn myFilter [k l]\n        (if (empty? k)\n            l\n        (if (> (first k) (nth k 1))\n            (myFilter (drop 2 k) (concat l [(nth k 1)] ))\n        (myFilter (drop 2 k) l))))\n    (interleave (map (fn [h] (reduce (fn [a b] (+ a b)) h)) \n       (map  \n           (fn [z] ( \n                 map ( \n                     fn [c] (let [g (- (int c) 48)]  \n                               (* g g))) z))   \n               (map (fn [d] (str d)) x))) x) [])))", "problem": 120, "user": "4f03b3fb535dcb61093f6b52"}, {"code": "(fn cnt-ss [xs]\n    (count\n        (filter (fn my-sum-sqr [n]\n                    (let [ss (apply + (map #(* % %) (map #(- (int %) 48) (str n))))]\n                        (< n ss)))\n            xs)))", "problem": 120, "user": "4f128865535d64f603146428"}, {"code": "(comp count filter) (fn [x] (< x ((fn [n] (reduce + (map #(* % %) (map #(Integer/parseInt (str %)) (str n))))) x)))", "problem": 120, "user": "4ef6e689535dced4c769f24f"}, {"code": "(let\n  [sq (fn [x] (* x x))\n   dsq (comp sq #(Integer/parseInt %) str)\n   isq (fn [i] (apply + (map dsq (str i))))\n   \n  ]\n  (fn [coll]\n    (count (filter #(< % (isq %)) coll ))\n  )\n)", "problem": 120, "user": "4f03154a535dcb61093f6a58"}, {"code": "(fn [coll]\n  (let [sqsum (fn [n] (reduce + 0 (map #(* % % ) (map #(- (int %) (int \\0)) (str n)))))]\n       (count (filter #(< % (sqsum %)) coll))))", "problem": 120, "user": "4f13047d535d64f60314642c"}, {"code": "(fn [nums]\n  (count \n    (filter \n      (fn [n]\n        (< n \n          (reduce + \n            (map #(Math/pow (- (int %) 48) 2) (str n)))))\n      nums)))", "problem": 120, "user": "4ee4f4a9535d1385b2869d85"}, {"code": "(fn [nums]\n  (count\n   (filter (fn [e] (< e (reduce + (map #(Math/pow % 2)\n                          (map #(Integer/parseInt %) (map str ((comp seq str) e)))))))\n           nums)))", "problem": 120, "user": "4db1fe241254ad5b4805fa77"}, {"code": "(fn [x]\n  (count (filter \n    (fn [n] (< n (reduce + \n       (map #(* % %) \n         (map #(Integer/parseInt %) \n           (map str (seq (str n)))))))) \n     x)))", "problem": 120, "user": "4e8768f6535dceadca469850"}, {"code": "(fn [x]\n  (let [sq (fn [n] (reduce + (map #(* % %) \n    (map #(Character/digit % 10) (seq (str n))))))]\n    (count (filter #(< % (sq %)) x))))", "problem": 120, "user": "4e6b6294535d8ccf87e9ff11"}, {"code": "(fn [xs]\n  (let [square #(* % %)\n        sum-squares #(reduce + (map square %))\n        digits (fn [n] (map #(Integer/parseInt (str %)) (str n)))]\n    (count (filter #(< % (sum-squares (digits %))) xs))))", "problem": 120, "user": "4dafa380edd6309eace4d17c"}, {"code": "(fn [s]\n  (let [sumsq #(reduce + (map * % %))\n        digits #(map (comp read-string str) (str %))]\n    (count (filter\n      (fn [n]\n        (< n (sumsq (digits n))))\n      s))))", "problem": 120, "user": "4f1b0ab3535d64f603146474"}, {"code": "(fn sum-of-square-of-digits? [coll]\n  (count \n    (filter\n     (fn [x]\n       (< x \n          (apply +\n            (map \n             #(* (Character/digit % 10) (Character/digit % 10)) \n             (str x)))))\n     coll)))", "problem": 120, "user": "4ecfa05c535d44c135fd68b9"}, {"code": "(fn [c] (apply + (for [x c] (let [s (map #(- (int %) 48) (str x)),E (apply + (map * s s))] (if (< x E) 1 0)))))", "problem": 120, "user": "4e95f5a5535dbda64a6f6b3b"}, {"code": "(fn [data]\n    (reduce +\n      (map\n        (fn [n]\n          ({true 1 false 0} (< n (reduce + (map #(* (compare % \\0) (compare % \\0) ) (str n)))))\n        )\n        data))\n)", "problem": 120, "user": "4f16d6ed535d64f60314644f"}, {"code": "(fn [sq]\n  (count (filter true? (map < \n    sq (map (fn [x] (reduce + (map #(* % %) (map #(- (int %) 48) (seq (str x)))))) sq)))))", "problem": 120, "user": "4e7d1c22535db169f9c796c5"}, {"code": "(fn ssd [n]\r\n  (apply +\r\n         (map #(let [d1 (mod % 10)\r\n                     d2 (int (/ % 10))]\r\n                 (if (and (< % 100) (> (+ (* d1 d1) (* d2 d2)) %))\r\n                 1\r\n                 0))\r\n                 n)))", "problem": 120, "user": "4ef0f1a1535dced4c769f212"}, {"code": "(fn smaller [coll] \n  (letfn [(digits [n] \n\t\t(loop [digits [] quotient n]\n\t\t(if (= 0 quotient) \n\t\t\t(reverse digits)  \n\t\t\t(let [x (quot quotient 10) y (rem quotient 10)]\n\t\t\t\t(recur (conj digits y) x)))))\n\t\t\t(sum-digits-squared [n] (apply + (map #(* % %) (digits n))))] \n\t\t\t(count (filter #(< % (sum-digits-squared %)) coll))))", "problem": 120, "user": "4ef5c7ce535dced4c769f248"}, {"code": "(fn [items]\n  (let [digit   (fn [char] (- (int char) 48))\n        squared (fn [n] (* n n))\n       \tsos     (fn [n]\t(apply + (map (comp squared digit) (str n))))]\n    (count (filter #(< % (sos %)) items))))", "problem": 120, "user": "4f0d093b535d0136e6c22313"}, {"code": "(fn x [lis]\n  (apply + (map \n             (fn z [n]\n(if (< n \n(apply + (map (fn [x] (* x x)) (map read-string (map str (seq (str n)))) ))\n       )\n       1\n  0\n  ))\n              lis))\n  )", "problem": 120, "user": "4f2004a1535d64f6031464a7"}, {"code": "(fn [nums]\n  (letfn\n    [(num-to-seq [x] (map #(- (int %) 48) (str x)))\n     (sum-squares [col] (reduce #(+ (* %2 %2) %1) 0 col))]\n    (count (filter #(< % (sum-squares (num-to-seq %))) nums))))", "problem": 120, "user": "4f0c4518535d0136e6c2230b"}, {"code": "(fn [s] \n  (count\n    (filter \n      (fn [x] \n        (< x \n          (reduce + \n            (map #(* % %)\n            (map #(mod % 10) (take 9 (iterate #(quot % 10) x)))))))\n                            \n    s)))", "problem": 120, "user": "4f08b15b535dcb61093f6c40"}, {"code": "(fn [xs]\n  (count\n    (filter\n      (fn [x] (< x (reduce + (map #(* % %) (map (comp read-string str) (str x))))))\n      xs)))", "problem": 120, "user": "4f1b92d1535d64f60314647b"}, {"code": "(fn [n] \n  (letfn [(a [c] (Long/parseLong (str c)))\n          (b [n] (* n n))\n          (c [n] (reduce + (map (comp b a) (str n))))]\n    (count (filter #(< % (c %)) n))))", "problem": 120, "user": "4ec74de3535d6d7199dd36df"}, {"code": "#(count (filter (fn [x] (< x (apply + (map (fn [x] (let [x (- (int x) (int \\0))] (* x x))) (str x))))) %))", "problem": 120, "user": "4f0664bd535dcb61093f6c0f"}, {"code": "(fn [coll] (reduce #(if (< %2\n                (loop [c %2 v 0]\n                  (if (< c 10)\n                    (+ v (Math/pow c 2))\n                    (recur (int (/ c 10)) (+ v (Math/pow (mod c 10) 2))))))\n           (inc %1)\n           %1)\n        0\n        coll))", "problem": 120, "user": "4ea11921535d7eef308072af"}, {"code": "(fn [x]\n\n   (loop [i (dec (count x)) result 0]\n     (if (zero? i) result\n      (recur (dec i)\n             (+ result\n                (if (< (nth x i)\n                       (#(loop [sum 0 num %1]\n                           (if (zero? num) sum\n                               (recur (+ sum (* (mod num 10) (mod num 10)) ) (int (/ num 10)) )\n                               ))\n                        (nth x i))\n                       )\n                  1\n                  0))\n             )\n      )\n     )\n   )", "problem": 120, "user": "4ea31da2535d7eef308072c1"}, {"code": "(fn [i] (count (filter (fn [i] (> (first i) (last i))) (map (fn [j] [(reduce (fn [r k] (+ r (* k k))) 0 (map #(Integer/parseInt %) (re-seq (re-pattern \".\") (str j)))) j] ) i))))", "problem": 120, "user": "4f0e4ebd535d0136e6c22322"}, {"code": "(fn count-small [xs]\n  (letfn [(sum [n] (apply + (map #(* % %) (digits n))))\n          (digits [n] (if (= 0 (quot n 10)) [(mod n 10)] (cons (mod n 10) (digits (quot n 10)))))]\n    (count (filter #(> (sum %) %) xs))))", "problem": 120, "user": "4f251302e4b0d66497709ff0"}, {"code": "(fn [l]\n  (let [s #(Math/pow % 2)] (reduce (fn [r e]\n            (if (< e   \n                    (loop [x e a 0] \n                        (if (< x 10)\n                          (+ a (s x))\n                          (recur\n                            (Math/floor (/ x 10))\n                            (+ a (s (mod x 10)))\n                          )\n                        )\n                      )\n\n                )\n              (+ 1 r)\n              r\n            )\n          )\n          0\n          l\n))\n)", "problem": 120, "user": "4f1595da535d64f603146444"}, {"code": "(fn [s] \n  (count \n    (filter \n      (fn [n] \n        (loop [num n res 0] \n          (if (< 0 num) \n            (recur (int (/ num 10)) \n                   (+ res (* (mod num 10) (mod num 10)))) \n            (> res n)))) \n      s)))", "problem": 120, "user": "4f1fd734535d64f6031464a5"}, {"code": "(fn [r] \n  (count \n    (filter \n      (fn [n] \n        (< n (apply + \n                   (map #(Math/pow (- (int %) 48) 2) \n                        (str n))\n      )))\n      r)))", "problem": 120, "user": "4f1d1d95535d64f603146488"}, {"code": "(fn [coll]\n    (count\n     (filter (fn [n] (> (reduce #(+ % (* %2 %2))\n                               0\n                               (map #(read-string (str %)) (str n))) n))\n             coll)))", "problem": 120, "user": "4e7e8684535db169f9c79717"}, {"code": "(fn [s]\n  (count\n   (filter\n    (fn [x]\n      (< x\n         (reduce\n          (fn [result item]\n            (let [item-int (Integer/valueOf (str item))]\n              (+ result (* item-int item-int))))\n          0 (str x))))\n    s)))", "problem": 120, "user": "4f31519ae4b0d6649770a086"}, {"code": "(fn [ns] (let [sum-square (fn [s] (apply + (map #(let [x (read-string (str %))] (* x x)) (str s))))]\n  (.size \n    (filter (fn [n] (< n (sum-square n))) ns))))", "problem": 120, "user": "4e8ad247535d65386fec2111"}, {"code": "#(count \n  (filter identity\n    (map \n      (fn [n] \n        (> (reduce + \n             (map \n               (fn [d] \n                 (Math/pow (read-string (str d)) 2))             \n              (str n))) n)) %)))", "problem": 120, "user": "4dc1bd76535d020aff1edf8d"}, {"code": "(fn [xs]\n  (let [f (fn [n] (apply + (map #(* % %) (map #(Integer/parseInt %) (map str (str n))))))]\n    (count (for [x xs :when (< x (f x))] x))))", "problem": 120, "user": "4f26d6d9e4b0d6649770a007"}, {"code": "(fn [xs]\n  (count (filter #(< % (reduce (fn [s d]\n                          (+ s (Math/pow (- (int d) 48) 2)))\n                        0\n                        (str %)))\n          xs)))", "problem": 120, "user": "4e7dd982535db169f9c796ee"}, {"code": "(fn [xs]\n  (count \n    (filter (fn [x]\n      (< x (reduce + \n        (map\n          (comp #(* % %) #(Integer/parseInt (str %))) \n          (str x))))) xs)))", "problem": 120, "user": "4ee6400c535d93acb0a6685b"}, {"code": "(fn [l]\n  (reduce +\n          (map\n            #(loop [r %1 s 0]\n               (let [x (rem r 10)]\n                 (if (zero? r)\n                   (if (< %1 s) 1 0)\n                   (recur (int (/ r 10)) (+ (* x x) s)))))\n            l)))", "problem": 120, "user": "4f32a7f1e4b0d6649770a095"}, {"code": "(fn [c]\r\n  (count \r\n    (filter #(apply < %)\r\n      (map\r\n        (fn [i]\r\n          [i (apply + (map #(let [n (- (int %) 48)] (* n n)) (seq (str i))))])\r\n        c))))", "problem": 120, "user": "4f0f01c0535d0136e6c22329"}, {"code": "(fn [nums]\n    (let [digits #(map (comp read-string str) (str %))\n          sqr #(* % %)]\n        (->> nums\n             (map #(vector % (apply + (map sqr (digits %)))))\n             (filter (fn [[n sqdn]] (< n sqdn)))\n             count\n        )))", "problem": 120, "user": "4df3d4f4535d08e6dec9fe2c"}, {"code": "(fn [coll]\r\n  (let [fsofsqs (fn [n]\r\n    \t\t         (reduce + \r\n                   (map (comp #(Math/pow % 2) \r\n                              #(Integer/parseInt %)) \r\n                                (re-seq #\"\\d\" (str n)))))\r\n        sofsqs (map fsofsqs coll)]\r\n    (count (filter true? (map < coll sofsqs)))))", "problem": 120, "user": "4ec3b393535dcc7ae8597d59"}, {"code": "(fn [ind]  \n  (let \n    [ints (fn [x]\n        (map #(Integer/parseInt (str %)) \n            (seq (str x))))\n     square (fn [x]\n       (* x x))\n     lessthansq (fn [x]\n       (< x (reduce + (map square (ints x)))))]\n  (count (filter lessthansq ind))))", "problem": 120, "user": "4eb9353f535dfed6da9c6d4e"}, {"code": "(fn [s]\n  (reduce (fn [c e]\n    (if (< e (reduce (fn [a b] (+ a (* b b)))  \n                 0 (map read-string (map str (str e)))))\n       (inc c)\n       c)) 0 s))", "problem": 120, "user": "4f1d1299535d64f603146487"}, {"code": "(fn sum-square [coll]\n  (letfn [(s [i] (map #(- (int %) 48) (str i)))\n          (conv_back [coll] (Integer/parseInt (apply str coll)))\n          (squares? [coll] (< (conv_back coll) (reduce + (map #(int (Math/pow % 2)) coll)))) ]\n    (count (map conv_back (filter squares? (map s coll))))))", "problem": 120, "user": "4f04d312535dcb61093f6be7"}, {"code": "(fn [c]\n  (count \n    (filter \n      (fn [x]\n        (< x \n          (apply +\n            (map #(* % %) \n               (for [i (iterate (partial * 10) 10) \n                 :while (< i (* x 10))]\n                 (int (/ (rem x i) (/ i 10))))))))\n      c)))", "problem": 120, "user": "4dc986d0535d5973398f9285"}, {"code": "#(reduce + (map (fn [x]\n  (if (< x\n    (reduce + (map\n      (fn [y] (Math/pow (Character/getNumericValue y) 2))\n      (seq (str x)))\n    )\n  ) 1 0)) % ))", "problem": 120, "user": "4ef48422535dced4c769f236"}, {"code": "(fn [c] \n           (->> c\n                (map #(map (comp read-string str) (str %)))\n                (map #(apply + (map (fn sqs [d] (* d d)) %)))\n                (map list c)\n                (filter #(< (first %) (second %)))\n                (count)))", "problem": 120, "user": "4f34eb87e4b0e243712b1eba"}, {"code": "(comp\n  count\n  (partial filter\n    (fn [x]\n      (let [digits (map #(- (int %) (int \\0)) (seq (str x)))\n            sum-of-sqrs (reduce + (map #(* % %) digits))]\n        (< x sum-of-sqrs)))))", "problem": 120, "user": "4f2e0369e4b0d6649770a064"}, {"code": "(fn [a] (letfn [(split-digit [n coll]\n                 (if (= n 0)\n                   coll\n                   (recur (int (/ n 10)) (cons (mod n 10) coll))))\n                (sum-of-square [n]\n                  (reduce #(+ %1 (* %2 %2)) 0 (split-digit n ())))]\n         (count (filter #(< % (sum-of-square %)) a))))", "problem": 120, "user": "4f1bee08535d64f60314647e"}, {"code": "(fn [coll]\n  (let [f \n    (fn [x]\n      (< x \n        (reduce + 0\n          (map #(* % %) \n             (map #(- (int %) 48) (seq (Integer/toString x))) ))))]\n  (count (filter\n    f coll))))", "problem": 120, "user": "4f38d6bbe4b0e243712b1ee2"}, {"code": "(fn [s]\n    (letfn [(digits [n] \n            (map #(- (int %) 48) (str n)))\n          (ss [n] \n            (reduce + (map #(* % %) (digits n))))]\n    \n    (count (filter #(< % (ss %)) s))))", "problem": 120, "user": "4f29eb2ae4b0d6649770a037"}, {"code": "(fn cc [s]\n(let [sumdigits (fn [x] (reduce + (map #(* % %) (map #(- (int %) (int \\0)) (str x)))))]\n(count (filter (fn [x] (< x (sumdigits x))) s))))", "problem": 120, "user": "4f418eaee4b0d7d3c9f3fce9"}, {"code": "(fn [col] \n  (count\n    (filter \n      (fn [i] \n        (let [v (map #(- (int %) 48) (str i))] \n          (< i (apply + (map #(* % %) v))))) col)))", "problem": 120, "user": "4ef77edb535dced4c769f254"}, {"code": "(fn [coll]\n   (count\n     (filter #(> (first %) (second %))\n             (map   \n               (fn [num] \n                 (vector\n                   (apply \n                     + \n                     (map \n                       #(int (Math/pow (rem % 10) 2)) \n                       (take-while \n                         pos? \n                         (iterate #(quot % 10) num)))\n                     )\n                   num\n                   ))\n               coll))))", "problem": 120, "user": "4e131443535d04ed9115e7d3"}, {"code": "(fn [x & acc]\n  (let [smaller\n        (fn [n]\n          (let [vec-of-digits (map #(Integer/parseInt (str %)) (into [0] (vec  (str n))))]\n            (let [ssd (reduce #(+ %1 (* %2 %2)) (Math/pow (first vec-of-digits) 2) (rest vec-of-digits))]\n                (< n ssd))))]\n      (cond (nil? acc) (recur x 0)\n            (empty? x) acc\n            (smaller (first x)) (recur (rest x) (inc acc))\n            :else (recur (rest x) acc))))", "problem": 120, "user": "4f343e60e4b0e243712b1eb5"}, {"code": "#(letfn [(digisum [n s]\r\n          (if (zero? n) s\r\n              (recur (quot n 10) (+ (* (rem n 10) (rem n 10)) s))))]\r\n   (count (filter (fn [x] (< x (digisum x 0))) %)))", "problem": 120, "user": "4f474f43e4b0d56e7bb92bb7"}, {"code": "(fn [coll]\n  (count\n    (filter\n      (fn [i]\n        (< i (reduce + (map #(Math/pow % 2) (loop [i i d ()]\n                                              (cond (> i 0) (recur (quot i 10) (conj d (rem i 10))) :else d))))))\n      coll)))", "problem": 120, "user": "4ec5a5f9535d6d7199dd36ad"}, {"code": "(fn [i]\n  (let [dig (fn [n]\n              ((fn [k l]\n                 (if (= k 0)\n                   l\n                   (recur (int (/ k 10))\n                          (cons (mod k 10) l))))\n               n `()))\n        square (fn [x] (* x x))]\n    (let [ q? (fn [n]\n                (< n (apply + (map square (dig n)))))]\n          (.size (filter q? i)))))", "problem": 120, "user": "4f404dcee4b0e243712b1fb0"}, {"code": "(fn [xs]\n  (let [digits (fn [x] (reverse (map #(mod % 10) (take-while (complement zero?) (iterate #(quot % 10) x)))))]\n   (count (filter (fn [x]\n                    (< x\n                       (reduce + 0\n                               (map (fn [y] (* y y)) (digits x)))))\n                  xs))))", "problem": 120, "user": "4f426a7ae4b0d7d3c9f3fcff"}, {"code": "(fn [s]\n  (count (filter\n    (fn [i]\n      (let [digits\n              (for [e (str i)] (- (int e) (int \\0)))\n            squares\n              (map (fn [e] (* e e)) digits)]\n        (< i (apply + squares))))\n    s)))", "problem": 120, "user": "4de165f3535d08e6dec9fde6"}, {"code": "(fn [series]\n  (letfn [(squarify [n]\n            (reduce + (map #(Math/pow (Integer/parseInt (str %)) 2)\n                           ((comp seq str) n))))]\n    (reduce #(+ %1 (if (< %2 (squarify %2)) 1 0)) 0 series)))", "problem": 120, "user": "4f2baf1ae4b0d6649770a04c"}, {"code": "(fn [numbers]\n  (let [to-digits (fn [n] \n                    (loop [num n, coll []] \n                      (if (zero? num) \n                          coll \n                          (recur (quot num 10) (cons (mod num 10) coll)))))]\n    (count (filter \n      (fn [n] (< n (reduce + (map #(* % %) (to-digits n))))) numbers))))", "problem": 120, "user": "4e6a60cd535d8ccf87e9fed7"}, {"code": "(fn [coll]\n  (let [dig (fn [n] (map #(- (int %) (int \\0)) (seq (str n))))\n        sum #(reduce + %)\n        sq  #(* % %)]\n    (count (filter #(> (sum (map sq (dig %))) %) coll))))", "problem": 120, "user": "4dda44f2535d02782fcbe9f1"}, {"code": "(fn [seq]\n    (letfn [\n        (digits [n]\n            (loop [acc [(mod n 10)] m (quot n 10)]\n                (if (zero? m)\n                acc\n                (recur (conj acc (mod m 10)) (quot m 10)))))]\n        (count (filter #(< % ((comp (partial reduce + 0) (partial map (fn [n] (* n n)))) (digits %))) seq))))", "problem": 120, "user": "4f4ac35ae4b0d56e7bb92c18"}, {"code": "(fn [coll]\n  (letfn [(digs [n] (map #(Integer/parseInt %) (map str (str n))))\n          (sqre [c] (map #(* % %) c))]\n    (count (filter true? (for [i coll] (< i (reduce + (sqre (digs i)))))))))", "problem": 120, "user": "4f4ba29ae4b03ad3f0c10c7a"}, {"code": "(fn process [sequence]\n  (count (filter  (fn filterout[n]\n                          (< n (reduce + \n                                 (map #(* % %)                          \n                                      (loop [n n ls '()]\n                                        (if (zero? n) ls\n                                          (recur (/ (- n (rem n 10)) 10) (conj ls (rem n 10))))\n                                        )\n                                      ))))\n                 sequence)))", "problem": 120, "user": "4f4c6b21e4b03ad3f0c10c8f"}, {"code": "(fn [r] (count (filter (fn [n] (< n (reduce + (map #(* % %) (map #(- (int %) (int \\0)) (seq (str n))))))) r)))", "problem": 120, "user": "4e50b67b535dc968683fc4ed"}, {"code": "(fn no-of\r\n  [s]\r\n  (count\r\n   (filter\r\n    (fn [n] (< n (reduce + 0 (map #(Math/pow (- (int %) 48) 2) (str n))))) s)))", "problem": 120, "user": "4f17ab99535d64f603146457"}, {"code": "(fn [l]\r\n  (count (filter true? (map #(< %1 %2) l (map (fn [x]\r\n  (apply + (map #(* %1 %1) (#(loop [n %1 out '()]\r\n                               (if (= n 0)\r\n                                 out\r\n                                 (recur (quot n 10) (conj out (rem n 10))))) x)))) l)))))", "problem": 120, "user": "4f3c772de4b0e243712b1f4c"}, {"code": "(fn [s] \n  (count (filter \n    (fn [x] \n      (< x (apply + (map (comp #(* % %) #(- % 48) int) (seq (str x))))))\n    s)))", "problem": 120, "user": "4f4e91a9e4b03ad3f0c10cca"}, {"code": "(fn sos-count [numbers]\n  (let [square (fn [x] (* x x))\n        sos-digits (fn [x]\n                     (loop [result 0 n x]\n                       (if (zero? n)\n                         result\n                         (recur (+ result (square (rem n 10)))\n                                (quot n 10)))))]\n    (count (filter #(< % (sos-digits %)) numbers))))", "problem": 120, "user": "4db8d37d535d1e037afb219c"}, {"code": "(fn smaller? [coll]\n  (let [digits (fn [n] (map #(Integer/parseInt %) (map str (seq (.toString n)))))\n        squared (fn [n] (reduce + (map #(* % %) (digits n))))]\n    (loop [c_ coll acc 0]\n      (cond\n        (empty? c_) acc\n        :else (recur (rest c_)\n                     (if (< (first c_) (squared (first c_)))\n                         (inc acc)\n                         acc))))))", "problem": 120, "user": "4f50c414e4b03ad3f0c10d0d"}, {"code": "(fn [xs]\n  (letfn [(digit-wise [x]\n            (map (comp read-string str) (str x)))\n          (digit-square-sum [x]\n            (reduce + (map #(* % %) (digit-wise x))))]\n    (count (filter identity\n      (map <\n        xs\n        (map digit-square-sum xs))))))", "problem": 120, "user": "4f4e7c01e4b03ad3f0c10cc9"}, {"code": "(fn [r] (count (filter (fn [v] (< v (apply + (for [c (str v)] (let [v (- (int c) (int \\0))] (* v v)))))) r)))", "problem": 120, "user": "4f3ec266e4b0e243712b1f8c"}, {"code": "(fn [s]\n  (let [sq (fn [x] (* x x))\n        foo (fn [x]\n              (apply + (map #(sq (Integer/parseInt (str %))) (str x))))]\n    (count (filter #(< % (foo %)) s))))", "problem": 120, "user": "4eb66737535d7eef3080736b"}, {"code": "(fn [coll]\n  (let [sum-of-squares (fn [coll] (reduce (fn [x y] (+ x (* y y))) 0 coll))\n        digits (fn digits [x] (if (= 0 x) '() (conj (digits (quot x 10)) (mod x 10))))]\n  (count (filter true? (map (fn [x] (< x (sum-of-squares (digits x)))) coll)))))", "problem": 120, "user": "4f4f08c8e4b03ad3f0c10cd8"}, {"code": "(fn [r]\n  ( ->> r\n  (map str)\n  (map (fn [e] (map #(read-string (str %)) e)))\n  (map (fn [e] (map #(* % %) e)))\n  (map #(reduce + %))\n  (interleave (range))\n  (partition 2)\n  (filter #(< (first %)(last %)))\n  (count)\n))", "problem": 120, "user": "4f0446f9535dcb61093f6bb8"}, {"code": "(fn [s] \n  (->> s \n    (filter \n      (fn [x] \n        (< x \n          (->> x \n               str\n               (map #(-> % int (- 48))) \n               (map #(* % %))\n               (apply +)))))\n    count))", "problem": 120, "user": "4f567cdbe4b0a7574ea71824"}, {"code": "(let [squares (vec (map #(* % %) (range 10)))]\r\n    (fn [coll]\r\n      (letfn [(sum-squares [x]\r\n                (loop [x x acc 0]\r\n                  (let [tens (quot x 10)\r\n                        value (+ acc (squares (mod x 10)))]\r\n                    (if (pos? tens)\r\n                      (recur tens value)\r\n                      value))))]\r\n        (count (filter #(< % (sum-squares %)) coll)))))", "problem": 120, "user": "4f047177535dcb61093f6bc6"}, {"code": "(fn [s]\r\n  (count (filter (fn [i]\r\n                  (< i \r\n                     (reduce #(+ % (* %2 %2)) 0 (map #(Integer/parseInt (str \"\" %)) (str i)))))\r\n         s)))", "problem": 120, "user": "4f3e6244e4b0e243712b1f85"}, {"code": "(fn [s]\n  (count\n    (filter\n      (fn [n]\n        (< n\n           (reduce #(+ % (* %2 %2))\n             0\n             (map #(- (int %) 48) (str n)))))\n      s)))", "problem": 120, "user": "4f38b7d9e4b0e243712b1ee0"}, {"code": "(fn [s]\n  (->> s\n      (filter\n        (fn [x]\n          (< x\n            (->> (map #(Integer/parseInt (str %)) (str x))\n                 (reduce #(+ %1 (* %2 %2)) 0)))))\n      (count)))", "problem": 120, "user": "4f569a3ce4b0a7574ea71828"}, {"code": "(fn [coll]\n  (letfn\n    [\n      (toDigits [n]\n        (map\n          (fn [c] (- (int c) (int \\0)))\n          (seq (str n)))),\n      (squareAll [coll]\n        (map\n          (fn [d] (Math/pow d 2))\n          coll)),\n      (sumAll [coll]\n        (reduce\n          +\n          0\n          coll)),\n      (smallerThanDigitsSquared [coll]\n        (map\n          (fn [n]\n            (if\n              (< n (sumAll (squareAll (toDigits n))))\n              1\n              0))\n          coll)),\n    ]\n    (sumAll (smallerThanDigitsSquared coll))))", "problem": 120, "user": "4f5c0549e4b0030a34fb2b1a"}, {"code": "(fn [s]\n  (count\n    (filter (fn [n]\n      (< n (reduce #(+ % (* %2 %2)) 0\n        (map #(Character/getNumericValue %) (str n)))))\n       s)))", "problem": 120, "user": "4f3444b7e4b0e243712b1eb6"}, {"code": "(fn [s]\n  (letfn [\n    (f [n]\n      (if (> 1 n) 0\n        (let [r (rem n 10)]\n          (+ (* r r) (f (/ (- n r) 10))))))]\n  (count (filter #(< % (f %)) s))))", "problem": 120, "user": "4f569218e4b0a7574ea71826"}, {"code": "(fn count-lt-squared [xs]\n  (let [digitize\n        (fn [number]\n          (loop [n number,\n                 digits ()]\n            (if (= n 0)\n              digits\n              (let [remainder (rem n 10)]\n                (recur (/ (- n remainder) 10) (cons remainder digits)))))),\n        lt-squared?\n        (fn [number]\n          (< number (reduce + (map #(* % %) (digitize number)))))]\n    (count (filter lt-squared? xs))))", "problem": 120, "user": "4f047902535dcb61093f6bcc"}, {"code": "(fn [seq]\n  (letfn [(digits [num]\n            (map #(read-string %) (re-seq #\"\\d\" (str num))))\n          (sum-of-squares [num]\n            (reduce + (map #(* % %) (digits num))))]\n    (count (filter #(< % (sum-of-squares %)) seq))))", "problem": 120, "user": "4f2893d0e4b0d6649770a019"}, {"code": "(fn [sif]\n  (count\n    (letfn [(sqd [n] \n              (reduce + \n                (map #(* (Integer. (str %)) (Integer. (str %))) (str n))))]\n      (for [x sif :when (< x (sqd x))]\n        x))))", "problem": 120, "user": "4dc7e7a5535d8a4b2fd74290"}, {"code": "reduce\r\n#(+ %\r\n    (if (< %2 (apply + (for [c (str %2)]\r\n                         (Math/pow (- (int c) 48) 2))))\r\n      1\r\n      0))\r\n0", "problem": 120, "user": "4e50c894535dc968683fc4ee"}, {"code": "(fn [a] (count\n          (filter (fn [n0]\n                           (loop [n n0 res 0]\n                             (if (= n 0)\n                               (< n0 res)\n                               (recur (quot n 10) (+ res (* (rem n 10) (rem n 10))))))) a)))", "problem": 120, "user": "4f40f055e4b0e243712b1fc2"}, {"code": "(fn [x]\n  (count\n   (filter\n    (fn [r]\n      (< r (apply + (map (fn [i] (let [y (Integer/parseInt (str i))] (* y y))) (str r))))\n      )\n    x)\n   )\n  )", "problem": 120, "user": "4f63777be4b0defedf855fe4"}, {"code": "(fn [s]\n  (count (filter \n      (fn [x]\n        (< x \n          (reduce + (map #(* % %) \n            (map #(Integer/parseInt %) (map str (str x)))))))\n      s)))", "problem": 120, "user": "4dd9d299535d2dad7130b5dd"}, {"code": "(fn [xs]\n  (let [sum-squared \n        (fn [x] \n          (loop [x x acc 0]\n            (if (= x 0)\n              acc\n              (recur (quot x 10) (+ acc (* (rem x 10) (rem x 10)))))))]\n    (count \n      (filter #(< % (sum-squared %)) xs))))", "problem": 120, "user": "4e7f5a0b535db966e863cc41"}, {"code": "(fn [lst]\n    (letfn [(todigit\n            [n]\n            (map #(- (int %) 0x30) (seq (str n))))\n           (sum-of-sqrt\n            [s]\n            (reduce + (map #(int (Math/pow % 2)) s)))\n           (count-smaller-than\n            [n]\n            (sum-of-sqrt (todigit n)))\n           (_dc_\n            [s]\n            (count (filter (fn [[x y]](> x y))\n                           (map vector (map count-smaller-than s)\n                                       s))))]\n    (_dc_ lst)))", "problem": 120, "user": "4f5cc3b8e4b0030a34fb2b2b"}, {"code": "(fn [l]\n  (loop [l l count 0]\n    (let [dig (map #(read-string (str %)) (seq (str (first l))))\n          dig (map #(* % %) dig)\n          dig (reduce + dig)]\n    (if (empty? l)\n        count\n        (if (< (first l) dig)\n          (recur (rest l) (inc count))\n          (recur (rest l) count))))))", "problem": 120, "user": "4e568873535d8a8b8723a283"}, {"code": "(fn [c] (count (filter (fn [n] (< n (apply + (map #(let [d (- (int %) 48)] (* d d)) (str n))))) c)))", "problem": 120, "user": "4efd8b67535de96065cf5085"}, {"code": "(fn [coll] \n  (count \n    (filter \n      (fn [x] \n        (< x \n          (reduce \n            + \n            (map \n              (fn [n] (Math/pow n 2)) \n              (map \n                (fn [c] (- (int c) (int \\0))) \n                (flatten (partition 1 (str x))))))))\n      coll)))", "problem": 120, "user": "4f57a153e4b0a7574ea7183a"}, {"code": "(fn fc120 [nums]\n  (let [smaller? (fn [n] (< n (reduce + (map (fn [x] (* x x)) (map read-string\n                                                                 (map str (str n)))))))]\n    (count (filter smaller? nums))))", "problem": 120, "user": "4e7f32ee535db966e863cc3a"}, {"code": "(fn [s]\n  (count (filter\n    (fn [n]\n      (<\n        n\n        ((fn ssd [x]\n          (if (= x 0)\n            0\n            (let [d (mod x 10)]\n              (+ (* d d) (ssd (quot x 10)))))) n)))\n  s)))", "problem": 120, "user": "4f559d2ce4b0a7574ea71808"}, {"code": "(fn chk [nums]\n  (letfn [(sumofsqdig [x]\n           (reduce +\n            (map #(Math/pow (Integer/parseInt %) 2)\n             (map str (str x)))))]\n    (count (filter #(> (sumofsqdig %) %) nums))))", "problem": 120, "user": "4f62b29ce4b0defedf855fd9"}, {"code": "(fn [s]\n  (let [sumDigits (fn [n] (apply + \n                            (map #(* % %) \n                                 (map #(Character/getNumericValue %) \n                                      (str n)))))]\n    (reduce #((if (< %2 (sumDigits %2)) inc identity) %1) 0 s)))", "problem": 120, "user": "4f58fe71e4b0a7574ea7185f"}, {"code": "(fn [v]\n  (count \n    (for [x v :when \n          (< x (apply +\n                 (map #(* % %)\n                      (take-while \n                        pos? \n                        (for \n                          [x (iterate \n                               #(quot % 10)\n                               x)] (mod x 10))))))] \n         x)))", "problem": 120, "user": "4eccb190535d23f0362276fe"}, {"code": "reduce\n#(if (< %2 (reduce + \n  (map (zipmap \"0123456789\" (map * (range) (range)))\n    (str %2)))) (inc %) %) 0", "problem": 120, "user": "4e8f1ac6535d65386fec2146"}, {"code": "(fn [c] (count (filter (fn [x] (< x (apply + (map #(* % %) (map #(Integer/valueOf (str %)) (str x)))))) c)))", "problem": 120, "user": "4e6e2ac4535d5021c1a895ff"}, {"code": "#({9 8, 29 19}\n  (last %)\n  50)", "problem": 120, "user": "4f6fbb68e4b07046d9f4efeb"}, {"code": "(fn [r]\n  (let [sum-of-squares (fn [n] (reduce + (map #(Math/pow (Integer/parseInt (str %)) 2) (str n))))]\n    (reduce #(if (< %2 (sum-of-squares %2)) (inc %1) %1) r)))", "problem": 120, "user": "4f12ab23535d64f603146429"}, {"code": "(fn [ r]\n (count\n (filter (fn [[e l]] (< e (apply + (map #(* % %) l))))\n (map \n   ( fn [t] [t (map #(- (int %) (int \\0)) (str t))])\n     r))))", "problem": 120, "user": "4f7869c2e4b0fbe0118ec589"}, {"code": "(fn [x] (count \n  (for [a x \n    :let [b (map read-string (re-seq #\"\\d\" (str a)))] \n    :when (> (apply + (map #(* % %) b)) a) \n    ] a)))", "problem": 120, "user": "4f4bd422e4b03ad3f0c10c7e"}, {"code": "reduce\n (fn [t i]\n   (if (< i\n          (reduce (fn [n d] (+ n (let [x (Integer/parseInt (str d))] (* x x)))) 0 (str i)))\n     (inc t) t)) 0", "problem": 120, "user": "4ecbb249535df97575fdabdf"}, {"code": "(fn [xs]\n  (let [digits (fn [n] (map #(- (int %) (int \\0)) (str n)))\n        sum-sqr #(reduce + (map (fn [x] (* x x)) %))]\n    (count (filter #(< % (sum-sqr (digits %))) xs))))", "problem": 120, "user": "4f6160a7e4b0defedf855fbe"}, {"code": "(fn [l]\n  (let [f (fn [x] (apply + (map #(let [ p (Character/digit % 10)] (* p p))(seq (str x)))))]\n  (count (filter #(< % (f %)) l))))", "problem": 120, "user": "4de18de7535d08e6dec9fde8"}, {"code": "(fn [l]\n  (let [ssd (fn [n]\n              (reduce  #(+ % (* (- (int %2) (int \\0)) (- (int %2) (int \\0)))) 0 (seq (str n))))]\n    (count (filter #(< % (ssd %)) l))))", "problem": 120, "user": "4f7e29dde4b06e829148e1ca"}, {"code": "(fn [coll]\n  (count\n    (remove nil?\n      (map (fn [c]\n        (if (>\n          (reduce\n            +\n            (map\n              #(let [x (- (int %) 48)] (* x x))\n              (flatten (partition-all 1 (str c)))))\n          c)\n        c))\n        coll))))", "problem": 120, "user": "4f6b4237e4b07046d9f4efa9"}, {"code": "(fn sosod [coll]\n  (letfn [(sum [n] \n               (reduce (fn [a b] (+ a (Math/pow (Integer. (str b)) 2))) \n                       0\n                       (str n)))]\n         (reduce (fn [a b]\n                     (if (< b (sum b))\n                       (+ a 1)\n                       a)) \n                 0 \n                 coll)))", "problem": 120, "user": "4dd61f98535d2dad7130b5c6"}, {"code": "(fn [s]\n  (count\n    (filter\n      #(< % (loop [n % v 0]\n            (if \n              (= n 0) v\n              (recur (/ (- n (mod n 10)) 10) (+ v (* (mod n 10) (mod n 10)))))))\n      s)))", "problem": 120, "user": "4f03fb59535dcb61093f6b89"}, {"code": "(fn [liste]\n  (count\n    (filter \n      #(< % (\n        (fn sq [nombre]\n          (if (< nombre 10) \n            (* nombre nombre) \n            (+ (sq (int (/ nombre 10))) (sq (rem nombre 10)))\n          )\n        )\n        %)\n      )\n      liste\n    )\n  )\n)", "problem": 120, "user": "4f84400de4b033992c121c2e"}, {"code": "(fn [xs]\n  (letfn [(digits [s] (map #(- (int %) (int \\0)) (str s)))\n          (square [x] (* x x))\n          (squared-digits [s] (map square (digits s)))]\n   (count (for [x xs :when (< x (reduce + (squared-digits x)))] x))))", "problem": 120, "user": "4f8345c6e4b033992c121c1b"}, {"code": "(fn sum-of-digits-sq [sq]\n     (let [gt-sum-of-sqs (fn [number]\n                          (let [s (seq (str number))\n                                my-int #(Integer/parseInt (str %1))\n                                sum (reduce #(+ %1 (* (my-int %2) (my-int %2))) 0 s)]\n                            (> sum number)))]\n       (count (filter gt-sum-of-sqs sq))))", "problem": 120, "user": "4f82e14be4b033992c121c0c"}, {"code": "(fn [coll]\n       (let [sum-square-digits\n       (fn [x]\n\t       (reduce + (map #(* % %) (map #(-> % str read-string) (str x)))))]\n\t (count (filter #(< % (sum-square-digits %)) coll))))", "problem": 120, "user": "4e49a7bb535dc968683fc4c6"}, {"code": "(fn [s] (count (filter (fn [x] (< x (reduce (fn [s x] (+ s (* x x)) ) 0 (map #(Integer/parseInt (str %)) (seq (str x)))))) s)))", "problem": 120, "user": "4f4274f2e4b0d7d3c9f3fd00"}, {"code": "(fn [c]\n  (letfn [(sq [n] (* n n))\n            (dsum [n]\n            (if (< n 10) (sq n) (+ (dsum (quot n 10)) (sq (rem n 10))))\n  )]\n  (count (filter #(< % (dsum %)) c))\n  )\n)", "problem": 120, "user": "4f8b56dae4b02e764a0a517e"}, {"code": "(fn [s]\n  (count\n    (filter\n      #(< % (apply + (\n        (fn sqdigits [n]\n          (if (zero? n)\n            ()\n            (lazy-seq (cons (let [d (rem n 10)] (* d d)) (sqdigits (quot n 10))))\n          )\n        )\n      %)))\n      s\n    )\n  )\n)", "problem": 120, "user": "4f725201e4b07046d9f4f02f"}, {"code": "(fn [s]\n \n (count (keep (fn [x]\n   (if (< x (apply (partial + 0) (map \n     (fn [y] (* (Integer/parseInt (str y)) (Integer/parseInt (str y)) ) ) \n     (str x)) \n     )) x)\n ) s))\n  \n)", "problem": 120, "user": "4f7b6b90e4b06e829148e1a4"}, {"code": "#(let [f (fn [x]\n   (loop [x x a 0]\n     (let [d (mod x 10)\n           a2 (+ a (* d d))\n           r (quot x 10)]\n       (if (= r 0) a2 (recur r a2)))))]\n   (reduce + (map (fn [v] (if (< v (f v)) 1 0)) %)))", "problem": 120, "user": "4f69f34fe4b07046d9f4ef90"}, {"code": "#(count (filter (fn [n] (< n (reduce + (map (fn [c] (let [i (- (int c) 48)] (* i i))) (str n))))) %))", "problem": 120, "user": "4f83665ee4b033992c121c1c"}, {"code": "(fn [snum]\n  (count (filter true?\n                 (map\n                  (fn [s] (if (< s (reduce + (map\n                                              #(java.lang.Math/pow % 2)\n                                              (map #(Integer/valueOf (str %)) (str s)))))\n                            true false)) snum))))", "problem": 120, "user": "4eb8ec4a535dfed6da9c6d4b"}, {"code": "(fn [s]\r\n  (count\r\n    (keep\r\n      (fn [m]\r\n        (if (< m (reduce + (map #(Math/pow (- (int %) 48) 2) (str m))))\r\n            1))\r\n      s)))", "problem": 120, "user": "4f9597e0e4b0dcca54ed6cd4"}, {"code": "(fn [coll] (count (filter #(< %1 \n  (reduce (fn [acc n](let [v (Character/getNumericValue n)] (+ acc (* v v)))) \n          0 \n          (str %1))) \n  coll)))", "problem": 120, "user": "4f88ae35e4b033992c121c6d"}, {"code": "(fn [coll]\n  (letfn [ (strsq [num]\n                      (apply + (map (fn [s] \n                                        (let [n (Integer. (str s))] \n                                             (* n n)))\n                                    (str num)))) ]\n             (count (filter #(< % (strsq %)) coll))))", "problem": 120, "user": "4f3cd535e4b0e243712b1f56"}, {"code": "(fn [coll]\r\n  (let [sum\r\n        (fn [x] (reduce\r\n                  #(+ %1 (* %2 %2))\r\n                  0\r\n                  (map #(Character/digit % 10) (str x))))]\r\n    (count (filter #(> (sum %) %) coll))))", "problem": 120, "user": "4f969214e4b0dcca54ed6cdd"}, {"code": "(fn [xs]\n  (letfn [(square [x]\n            (* x x))\n          (sum-of-square-of-digits [n]\n            (if (< n 10)\n              (square n)\n              (+ (square (rem n 10))\n                 (sum-of-square-of-digits (quot n 10)))))\n          (smaller-than-sum-of-square-digits? [n]\n            (< n (sum-of-square-of-digits n)))]\n    (count (filter smaller-than-sum-of-square-digits? xs))))", "problem": 120, "user": "4f3fb586e4b0e243712b1f9c"}, {"code": "(fn [s]\n  (let [ssd (fn [n] (loop [n n acc 0] \n                             (if (zero? n) \n                               acc \n                               (recur (quot n 10) \n                                      (+ acc (* (mod n 10) (mod n 10)))))))]\n    (count (filter #(< % (ssd %)) s))))", "problem": 120, "user": "4f9120d8e4b0dcca54ed6c96"}, {"code": "(fn [nums] (apply + \n   (map  (fn [num] (let [a (apply + \n     (map  #(let [n (Integer/valueOf (str %)) ] (* n n )) (str num)))] \n        (if (<= a num) 0 1 )))  nums)))", "problem": 120, "user": "4e86d3cf535dceadca46984c"}, {"code": "(fn [coll]\n  (let\n    [square-char\n      (comp #(* % %) read-string str)\n     squares-sum\n      (comp\n        #(apply + %)\n        #(map square-char %)\n        str)]\n    (count (filter #(< % (squares-sum %)) coll))))", "problem": 120, "user": "4f7f9665e4b033992c121bea"}, {"code": "(fn [l] (count (filter #(< % ((fn f [n] (if (= 0 n) 0 (let [r (rem n 10) N (quot n 10)] (+ (* r r) (f N))))) %)) l)))", "problem": 120, "user": "4f8c5f4fe4b02e764a0a5198"}, {"code": "(fn [lst] \n    (reduce \n        #(if (< %2 \n                (loop [num %2, sum 0, op (mod %2 10)]\n                    (if (== num op) (+ sum (* op op))\n                        (let [newnum (quot num 10)]\n                           (recur newnum (+ sum (* op op)) (mod newnum 10))))))\n              (+ %1 1)\n              %1) lst))", "problem": 120, "user": "4f9754d4e4b0dcca54ed6ce9"}, {"code": "(fn [nums]\n  (letfn [\n    (square [n] (* n n))\n    (parse-char [c] (Integer/parseInt (str c)))\n    (sq-digits [n] \n      (reduce + \n        (map (comp square parse-char) \n             (.toString n))))]\n    (count\n      (filter #(< % (sq-digits %)) nums))))", "problem": 120, "user": "4f9d53f3e4b0dcca54ed6d21"}, {"code": "(fn [r]\n  (count (filter neg? \n\n  (map \n    (fn [v]\n            (- v \n                     (reduce +\n                             (map #(Math/pow (- (int %) (int \\0)) 2) \n                                   (str v)\n                              )\n                     )\n             ) \n          )\n   r)))\n)", "problem": 120, "user": "4f0da4e4535d0136e6c22319"}, {"code": "(fn [v] (count (filter #(< % (reduce + (map (fn [i] (let [n (- (int i) 48)] (* n n))) (str %)))) v)))", "problem": 120, "user": "4f9fe2b9e4b0dcca54ed6d40"}, {"code": "(let [sqd #(Math/pow (- (int %) 48) 2)]\n  (comp\n    count \n    (partial filter \n      #(< % (apply + (map sqd (str %)))))))", "problem": 120, "user": "4f991ec1e4b0dcca54ed6cfb"}, {"code": "(fn [seq]\n    (count \n     (letfn [(digits-seq [n] (map #(Integer/parseInt %) (re-seq #\"\\d\" (str n))))\n             (square-digits-seq [n] (map #(* % %) (digits-seq n)))]\n       (filter\n        #(> (apply + (square-digits-seq %)) %)\n        seq))))", "problem": 120, "user": "4f98ead0e4b0dcca54ed6cf8"}, {"code": "(fn cnt-sqrt [arg]\r\n  (let [get-digits (fn [n]\r\n                     (map #(Integer/valueOf (str %)) (String/valueOf n)))\r\n        digits-sqr (fn [n]\r\n                     (apply + (map #(* % %) (get-digits n))))\r\n        res-seq (filter #(< % (digits-sqr %)) arg)]\r\n    (count res-seq)))", "problem": 120, "user": "4f7d25b4e4b06e829148e1ba"}, {"code": "#(count (filter (fn [n] (< n (apply + (map (fn [c] (Math/pow (- (int c) 48) 2)) (str n))))) %))", "problem": 120, "user": "4f40ccd9e4b0e243712b1fc0"}, {"code": "(fn [s]\n (letfn [(square [n] (* n n))\n         (to-digits [n] (map #(Integer/parseInt (str %)) (str n)))\n         (sum-of-squares-of-digits [n] (reduce + (map square (to-digits n))))]\n   (count (filter #(< % (sum-of-squares-of-digits %)) s))))", "problem": 120, "user": "4fa0a4b1e4b0dcca54ed6d4f"}, {"code": "(fn [xs]\n  (letfn [(digits [n] (map #(- (int %) (int \\0)) (str n)))\n          (square [n] (* n n))\n          (sum-square [n] (apply + (map square (digits n))))]\n    (count (filter #(< % (sum-square %)) xs))))", "problem": 120, "user": "4dac39a28cc9d6edb8beb0b3"}, {"code": "(letfn [(smaller-than-sum-square-digits? [n]\n          (< n (sum-square-digits n)))\n        (sum-square-digits [n]\n          (loop [n n sum 0]\n            (if (zero? n)\n              sum\n              (recur (quot n 10)\n                     (+ sum (square (rem n 10)))))))\n        (square [n]\n          (* n n))]\n  (comp\n    count\n    (partial filter smaller-than-sum-square-digits?)))", "problem": 120, "user": "4f969a66e4b0dcca54ed6cde"}, {"code": "(fn [s]\n  (count\n    (filter\n      (fn [v]\n        (< v \n           (reduce\n             +\n             (map #(Math/pow (Integer/valueOf %) 2) (re-seq #\"\\d\" (str v)))))) s)))", "problem": 120, "user": "4f954dbce4b0dcca54ed6ccd"}, {"code": "(fn [xs]\n  (count\n    (filter\n      (fn [x]\n        (loop [sum 0 x-mod x]\n          (cond \n            (> sum x) true\n            (zero? x-mod) false\n            :else (recur\n                    (+ sum (Math/pow (mod x-mod 10) 2))\n                    (int (/ x-mod 10))))))\n      xs)))", "problem": 120, "user": "4fa5406fe4b081705acca1ac"}, {"code": "(fn squsum[cols]\r\n  (let[ncol (fn splitnum\r\n  \t\t\t\t\t   ([val result]\r\n\t\t\t\t\t\t      (if(< val 10)\r\n\t\t\t\t\t\t         (cons val result)\r\n\t\t\t\t\t\t         (recur (quot val 10) \r\n\t\t\t\t\t\t                (cons (mod val 10) result) ) \r\n\t\t\t\t\t\t      ))\r\n\t\t\t\t\t\t   ([val] (splitnum val '()) )\r\n\t\t\t\t\t\t   )\r\n       nsum (fn[num]\r\n              (reduce #(+ %1 (* %2 %2))  0 (ncol num))) ]\r\n  (count\r\n    (filter #(< % (nsum %) )  \r\n       cols))))", "problem": 120, "user": "4f6d9d7ee4b07046d9f4efcd"}, {"code": "(fn [coll] \n  (count (filter (fn [num] \n    (< num ((fn [nums] \n      (apply + (map (comp #(* % %) read-string str first) \n      (partition 1 (str nums))))) \n     num))) \n    coll)))", "problem": 120, "user": "4fa39b3ee4b081705acca191"}, {"code": "(fn [nums]\n  (reduce +\n    (for [n nums] \n      (if (< n\n        (reduce +\n          (for [y (for [x (str n)] (- (int x) 48))] \n            (* y y)) \n        ))\n        1\n        0\n      )\n    )\n  )\n)", "problem": 120, "user": "4dd579b5535dae65d5c462ea"}, {"code": "(fn [v] (count (filter #((fn f [w] (> (reduce (fn [x y] (+ x (* y y))) 0 (loop [r [] n w] (if (> 10 n) (conj r n) (recur (conj r (rem n 10)) (quot n 10))))) w))\n                       %) v)))", "problem": 120, "user": "4dc78527535d8a4b2fd7428f"}, {"code": "(fn foo [x]\n  (count (filter (fn [n]\n            (let [q (map #(- (int %) (int \\0)) (str n))]\n              (< n (reduce + (map * q q)))))\n                 x)))", "problem": 120, "user": "4facd2fae4b081705acca22f"}, {"code": "(fn [s]\n  (let [ssd (fn [n]\n              (reduce +\n                (map #(* % %)\n                  (map #(Character/digit % 10) (str n)))))]\n    (count (filter #(< % (ssd %)) s))))", "problem": 120, "user": "4db3393e535df7e46ed9b6cc"}, {"code": "#(count \n  (filter \n    (fn [n] \n      (let [digits (map (fn [c] (read-string (str c))) (str n))\n            square-sum (reduce (fn [sum n] (+ sum (* n n))) 0 digits)]\n      (< n square-sum)))\n       %))", "problem": 120, "user": "4e0e0529535d04ed9115e7b9"}, {"code": "(fn [lst]\n  (letfn [\n    (digits [N]\n      (loop [n N, result []]\n        (if (zero? n)\n          (reverse result)\n          (recur (quot n 10) (conj result (rem n 10))))))\n    (norm [A]\n      (reduce + (map * A A)))]\n    (count (filter #(< % (-> % digits norm)) lst))))", "problem": 120, "user": "4faa9593e4b081705acca1f9"}, {"code": "(fn hms [ints]\n  (count \n    (filter \n      (fn [i]\n        (let [digits (seq (str i))\n              digitnums (map #(- (int %) (int \\0)) digits)\n              sqdigits (map #(* % %) digitnums)\n              sumsq (reduce + sqdigits)]\n          (< i sumsq))) ints)))", "problem": 120, "user": "4f036fb3535dcb61093f6ac8"}, {"code": "reduce \n  #(if (< %2 \n        (apply + (map \n                  (fn [a]\n                    (let \n                      [b (- (int a) 48)]\n                      (* b b)))\n                  (str %2))))\n    (inc %) %)\n  0", "problem": 120, "user": "4fa30027e4b081705acca187"}, {"code": "(fn sumOfSquareOfDigits [a] (loop [x a y (map #(reduce + %) (map (fn [aa] (map #(Math/pow % 2) aa)) (map (fn [xx] (map #(Integer/parseInt (str %)) xx)) (map seq (map str a)))))  z 0]\r\n                                (if (empty? x) z\r\n                                    (recur (rest x) (rest y) (if (< (first x) (first y)) (inc z) z)))))", "problem": 120, "user": "4f9336ece4b0dcca54ed6cb7"}, {"code": "(fn [c]\r\n  (count\r\n    (filter\r\n      (fn [n]\r\n        (< n (apply + (map #(java.lang.Math/pow (Integer/parseInt (str %)) 2) (str n)))))\r\n      c)))", "problem": 120, "user": "4facff22e4b081705acca230"}, {"code": "(fn \n  [xs]\n  (let [digits (fn [n]\n                 (loop [nn n acc []]\n                   (if (zero? nn) acc\n                       (recur (quot nn 10) (conj acc (rem nn 10))))))\n        ssum (fn [n]\n                (reduce + (map #(* % %) (digits n))))]\n    (count (filter #(< % (ssum %)) xs))))", "problem": 120, "user": "4fadbc3fe4b081705acca23f"}, {"code": "(fn [y] (count (filter (fn [x] (< x (reduce + (map #(* % %) (map (comp read-string str) (.toString x)))))) y)))", "problem": 120, "user": "4f4f0287e4b03ad3f0c10cd7"}, {"code": "(fn [c]\n  (->>\n    c\n    (map str)\n    (map (fn [x] (map #(Integer/parseInt (str %)) x)))\n    (map (fn [x] (map #(* % %) x)))\n    (map #(reduce + %))\n    (map-indexed (fn [i x] (if (> x (nth c i)) 1 0)))\n    (reduce +)))", "problem": 120, "user": "4f9f7daae4b0dcca54ed6d37"}, {"code": "(fn [c]\n  (count\n    (filter\n      (fn [n]\n        (< n\n          (reduce\n            #(+ %1 (* %2 %2))\n            0\n            (map #(mod % 10)\n              (take-while\n                pos?\n                (iterate #(int (/ % 10)) n))))))\n      c)))", "problem": 120, "user": "4fb2101ce4b081705acca284"}, {"code": "(fn [coll]\n    (let [digits (fn [n] \n                   (loop [n n acc 0]\n                     (if (zero? n) acc \n                       (let [r (rem n 10)]\n                         (recur (quot n 10) (+ acc (* r r)))))))]\n      (apply + (map (fn [n] (if (< n (digits n)) 1 0)) coll))))", "problem": 120, "user": "4fa2fa5ee4b081705acca186"}, {"code": "(fn [coll]\r\n  (letfn\r\n      [(squared-digits [n]\r\n  \t       (map int (map #(Math/pow (Integer/parseInt (str %)) 2) (seq n))))\r\n       (sum-of-squares [n]\r\n\t\t       (apply + (squared-digits n)))]\r\n    (count (filter #(< % (sum-of-squares (str %))) coll))))", "problem": 120, "user": "4f4e4ecbe4b03ad3f0c10cbf"}, {"code": "(fn [s]\n  (count (filter\n    (fn [i] (< i (apply + (map #(Math/pow (- (int %) (int \\0)) 2) (str i)))))\n    s)))", "problem": 120, "user": "4fa67030e4b081705acca1b7"}, {"code": "(let [digit #(- (int %) 48)\n      sq #(* % %)\n      sqsum #(reduce + (map (comp sq digit) (str %)))]\n  (fn [s] (count (filter #(< % (sqsum %)) s))))", "problem": 120, "user": "4fa6d532e4b081705acca1be"}, {"code": "(fn [r]\n  (count \n    (filter \n      (fn [x] \n        (< x \n          (->> (vec (str x))\n            (map #(Integer/valueOf (str %)))\n            (map #(* % %))\n            (apply +)))) r)))", "problem": 120, "user": "4fb3b865e4b081705acca2a2"}, {"code": "(fn r [xs]\n     (if (empty? xs)\n       0\n       (+ (r (rest xs))\n            (if (< (first xs)\n                   (reduce +(map #(* (- (int %) 48) (- (int %) 48)) (str (first xs)))))\n              1\n              0))))", "problem": 120, "user": "4fb510b5e4b081705acca2b8"}, {"code": "(fn [l]\n  (let [\n  \tsqu #(* % %)\n\t\tchar2Int #(Integer/parseInt (str %))\n\t\tint2Digit #(map char2Int (seq (str %)))\n\t\tsumsqu (fn [ls]\n\t\t\t(reduce #(+ %1 (squ %2)) 0 (int2Digit ls)))]\n\t\t\t\n\t\t(reduce\n\t\t\t#(if (< %2 (sumsqu %2)) (inc %1) %1)\n\t\t\t0 l)))", "problem": 120, "user": "4fc0853ae4b081705acca327"}, {"code": "(fn [xs]\n  (letfn \n    [(ss [s] (reduce #(+ (* %2 %2) %1) 0 (map #(Character/getNumericValue %) (str s))))] \n  (count (filter #(> (ss %) %) xs))))", "problem": 120, "user": "4fa6a491e4b081705acca1bc"}, {"code": "(fn sum-of-square-of-digits [s]\n  (letfn [(digits [start-n]\n            (loop [result [] n start-n]\n              (if (<= n 0)\n                result\n                (let [digit (rem n 10)]\n                  (recur (conj result digit) (int (/ n 10)))))))\n          (is-smaller [n]\n            (< n (reduce + (map #(* % %) (digits n)))))]\n    (count (filter is-smaller s))))", "problem": 120, "user": "4f68c485e4b07046d9f4ef7c"}, {"code": "(fn [c]\n  (letfn\n    [(digits [x] \n        (map #(read-string (str %)) (seq (str x))))\n     (sum-of-squares-of-digits [y] \n        (reduce + (map #(* % %) (digits y))))]\n    (count \n      (filter #(> (sum-of-squares-of-digits %) %) c))))", "problem": 120, "user": "4edfdfa2535d10e5ff6f5346"}, {"code": "(fn ssod [col]\r\n  (count (filter (fn [n] (>\r\n                          (reduce +  (map #(* % %) (map  (zipmap \"0123456789\" (range 10)) (str n))))\r\n                          n)) col)))", "problem": 120, "user": "4fab31a8e4b081705acca215"}, {"code": "(fn [xs] (count (filter (fn [x] (< x (reduce + (map #(let [y (Integer/valueOf (Character/toString %))] (* y y)) (str x))))) xs)))", "problem": 120, "user": "4fb65f2fe4b081705acca2c7"}, {"code": "(fn [l]\n  (let [s (fn [n] (reduce (fn [s d] (+ s (* d d))) 0\n           (map #(-> % int (- 48)) (str n))))]\n  (count (filter #(> (s %) %) l))))", "problem": 120, "user": "4faac363e4b081705acca200"}, {"code": "(fn my-sum [r]\n  (cond\n    (= 10 (count r)) 8\n    (= 30 (count r)) 19\n    (= 100 (count r)) 50\n    (= 1000 (count r)) 50\n  )\n)", "problem": 120, "user": "4faacc04e4b081705acca201"}, {"code": "(fn [coll]\n   (count\n     (filter (fn [n]\n               (< n\n                  (apply +\n                         ((fn [nu]\n                            (map #(* % %)\n                                 (map #(- (int %) (int \\0))\n                                      nu))) (str n))))) coll)))", "problem": 120, "user": "4fbe42b7e4b081705acca30f"}, {"code": "(fn [x]\r\n  (letfn [(toInt[x] (- (int x) (int \\0)))\r\n          (sqr[x] (* x x))\r\n          (ss[z]\r\n            (< z (apply + (map #(-> % toInt sqr) (-> z str seq)))))]\r\n    (count (filter ss x))))", "problem": 120, "user": "4f82ed48e4b033992c121c0e"}, {"code": "(fn[x](count (filter #(< % (reduce + (map (fn[a](* (read-string (str a)) (read-string (str a)))) (seq (str %))))) x)))", "problem": 120, "user": "4fb3dd1ee4b081705acca2a5"}, {"code": "(fn [l]\n   (let [digits (fn [l] (map #(- (int %) 48) (seq (str l))))\n         sqrd (fn [x] (* x x))]\n     (count\n      (filter\n       (fn [n] (< n (apply + (map sqrd (digits n)))))\n       l))))", "problem": 120, "user": "4fc8c8d8e4b0ee37620e183b"}, {"code": "(fn [lst]\n  (let [sum-sq (fn [n]\n    ((fn tot [acc rest]\n       (let [remaining (quot rest 10) sum (+ acc (* (rem rest 10) (rem rest 10)))]\n         (if (< remaining 1) sum\n             (tot sum remaining)))) 0 n))]\n    (let [check (fn [num]\n                  (if (> (sum-sq num) num) true false))]\n      (count (filter check lst)))))", "problem": 120, "user": "4fb86dc9e4b081705acca2d8"}, {"code": "(fn [ints]\n  (count (filter \n          (fn [i] (let [digits (map #(Integer/parseInt (str %)) (seq (str i)))\n                        squared (map #(* % %) digits)\n                        sscd (apply + squared)]\n            (if (< i sscd) true false))) ints)))", "problem": 120, "user": "4faec810e4b081705acca24e"}, {"code": "(fn [xs]\n  (letfn [(sumofsq [x] (->> (str x) (map #(Integer/parseInt (str %))) (map #(* % %)) (reduce +)))]\n  (count (filter #(< % (sumofsq %)) xs))\n))", "problem": 120, "user": "4fca1cd6e4b0ee37620e184c"}, {"code": "(fn [s]\n  (let [f (fn [n] (apply + (map #(* % %) (map #(Integer/valueOf (str %)) (str n)))))]\n    (count\n      (filter \n        #(< % (f %))\n        s))))", "problem": 120, "user": "4fccf4dae4b0ee37620e186f"}, {"code": "(fn [v] (count (filter (fn [[a b]] (< a b)) (let [sq (fn [a] \n  \t\t    (loop [q a s ()]\n\t\t\t       (if (zero? q) s (recur (quot q 10) (conj s (rem q 10))))))]\n\t\t\t       (map (fn [a] [a (apply + (map #(* % %) (sq a)))]) v)))))", "problem": 120, "user": "4fc7db47e4b0ee37620e182a"}, {"code": "(fn [c]\n  (let [q \n    (fn [x]\n      (loop [a 0 r x]\n          (let [d (rem r 10) n (- r d) s (+ a (* d d))]\n            (if (> n 0)\n                (recur s (/ n 10))\n              s))))]\n    (count (filter #(< % (q %)) c))\n  ))", "problem": 120, "user": "4fccf479e4b0ee37620e186e"}, {"code": "(fn filter-less-than-sq-digits [nums]\n  (letfn [(to-digits [n]\n          (if (= 0 n)\n            []\n            (conj (to-digits (quot n 10)) (mod n 10))))\n          (test-digits [n]\n            (let [digits (to-digits n)\n                  sq-sum (apply + (map #(* % %) digits))]\n              (< n sq-sum)))]\n    (count (filter test-digits nums))))", "problem": 120, "user": "4fcaf7a4e4b0ee37620e1857"}, {"code": "(fn [v]\n  (letfn [(p [n]\n               (< n (->> (.toString n)\n                    (map #(- (int %) (int \\0)))\n                    (map #(* % %))\n                    (apply +)\n               )))]\n  (count (filter #(p %) v)))\n)", "problem": 120, "user": "4fcad14ce4b0ee37620e1856"}, {"code": "(fn [x]\n  (let\n    [c->i   #(- (int %) 48)\n     digits #(map c->i (str %))\n     sos    (fn [ds] \n              (reduce + (map #(* % %) ds)))\n     sums   (map #(vector % (sos (digits %))) x)]\n    (count (filter (partial apply <) sums))))", "problem": 120, "user": "4fce5474e4b0d4b2a7a9d451"}, {"code": "(fn [lst]\n  (count (filter (fn [n]\n                   (let [s (reduce + (map #(* % %) (map #(- (int %) (int \\0)) (str n))))]\n                     (< n s)))\n                 lst)))", "problem": 120, "user": "4fba7d1ee4b081705acca2e0"}, {"code": "(fn\r\n  [s]\r\n  (count\r\n    (filter true?\r\n      (for [x s\r\n            :let [digits (map #(- (int %) (int \\0)) (seq (str x)))\r\n                  sos (reduce + (map #(* % %) digits))]]\r\n        (< x sos)))))", "problem": 120, "user": "4f18677d535d64f603146459"}, {"code": "(fn [coll]\n  (let [n->d (fn [n] (map #(Character/digit % 10) (str n)))\n        d-sum (fn [n] (reduce + (map #(* % %) (n->d n))))]\n    (count (filter #(< % (d-sum %)) coll))))", "problem": 120, "user": "4fb1d907e4b081705acca282"}, {"code": "(fn count-lt-sum-sq-digits [nums]\n  (let\n    [sum-sq-digits (fn sum-sq-digits [num]\n      (if (zero? num)\n          0\n          (+ (#(* % %) (mod num 10))\n             (sum-sq-digits (quot num 10)))))]\n    (count (filter #(< % (sum-sq-digits %)) nums))))", "problem": 120, "user": "4f725466e4b07046d9f4f030"}, {"code": "(fn [coll]\n  (letfn [(square-digits [n]\n            (if (zero? n)\n              0\n              (+ (* (mod n 10) (mod n 10))\n                 (square-digits (quot n 10)))))]\n    (count (filter #(< % (square-digits %)) coll))))", "problem": 120, "user": "4f7431d2e4b044e54cd9a8f7"}, {"code": "(fn [ns] (count (filter (fn [n]\n(let [ns (apply + (map (fn [n] (* n n))((fn cha \n  ([n] (cha n ()))\n  ([n result]\n    (if (zero? n)\n        result\n        (recur (quot n 10) (cons (rem n 10) result))))) n)))]\n  (< n ns))) ns)))", "problem": 120, "user": "4fbb9d80e4b081705acca2ea"}, {"code": "(fn [s] (count (filter #(< % (loop [x % r 0] (if (zero? x) r (let [t (mod x 10)] (recur (/ (- x t) 10) (+ r (* t t))))))) s)))", "problem": 120, "user": "4f826548e4b033992c121c08"}, {"code": "(fn [c]\n  (letfn [(split-num [num]\n    (loop [n num d []]\n      (if (< n 10)\n        (cons n d)\n        (recur \n          (int (/ (float n) 10)) \n          (cons (mod n 10) d)))))]\n    (count \n      (filter \n        (fn [num] \n          (< num \n            (apply + \n              (map #(* % %) (split-num num)))))\n          c))))", "problem": 120, "user": "4fbacdbae4b081705acca2e5"}, {"code": "(fn f [x] \n  (letfn [ (g [x] (if (< x 10) [x]  ( cons (rem x 10) (g (quot x 10 ))  ) )) \n           (h [x] (reduce + (map #(* % %) (g x))))\n          ] \n         (count (filter neg? ( map #(- % (h %)) x ) ))\n         ))", "problem": 120, "user": "4fccdc75e4b0ee37620e186d"}, {"code": "(fn [coll]\n  (let [test (fn [n]\n    (let [digits (map #(- (int %) (int \\0)) (str n))]\n      (< n (apply + (map #(* % %) digits)))))]\n  (count (filter test coll))))", "problem": 120, "user": "4fd22e70e4b04c3a95aa041c"}, {"code": "(comp count\n  (partial\n    filter\n    (fn [x]\n      (< x (apply + (map (comp #(* % %) read-string str)\n                         (str x)))))))", "problem": 120, "user": "4fd96694e4b05e33b9224f37"}, {"code": "(fn [nums]\n  (count (filter true?\n    (map\n      #(->> %\n        str\n        (map (fn[x] (let [y (- 48 (int x))] (* y y))))\n        (reduce +)\n        (< %))\n      nums))))", "problem": 120, "user": "4fb12b35e4b081705acca275"}, {"code": "(fn [xs]\n  (count (filter (fn [m]\n    (letfn [(qux [n]\n      (let [q (quot n 10) r (rem n 10)]\n        (if (zero? q) (* r r) (+ (* r r) (qux q)))))]\n          (< m (qux m)))) xs)))", "problem": 120, "user": "4f91f5b1e4b0dcca54ed6ca7"}, {"code": "(fn [c]\n  (count\n   (for [x c\n         :let [digits (map (comp read-string str) (str x))]\n         :when (< x (reduce + (map #(* % %) digits)))]\n     x)))", "problem": 120, "user": "4ead2841535d7eef3080731e"}, {"code": "(fn [c]\n   (count (filter (fn [a] \n     (< a (reduce + \n       (map #(* % %) \n       (map #(Integer/parseInt (str %)) (str a)))))) c)))", "problem": 120, "user": "4fcc103fe4b0ee37620e185f"}, {"code": "(fn [y] \n (count (filter true? (map (fn [x] (< x (apply + (map #(* % %) (map #(Character/getNumericValue %) (str x)))))) y))))", "problem": 120, "user": "4fbd12a5e4b081705acca2fd"}, {"code": "(fn [S] \n  (reduce + (for [i S\n    :let [N (reduce +\n      (map #(* % %)\n        (map #(- (int %) 48) (seq (str i)))))]]\n              (if (< i N) 1 0))))", "problem": 120, "user": "4fda016ae4b05e33b9224f42"}, {"code": "(fn [nums] (count\n  (for [n nums\n    :let [s (->> n str seq (map #(Long. (str %))))]\n    :when (< n (apply + (map #(* % %) s)))]\n  n)))", "problem": 120, "user": "4fdec88fe4b05e33b9224f8e"}, {"code": "#(count\n  (for [n %\n       :when\n         (< n\n           (apply + (for [d (str n)\n            :let [k (read-string (str d))]]\n            (* k k))))] n))", "problem": 120, "user": "4db0114d838c48654951d9b8"}, {"code": "(fn[coll]\n  (count (filter \n    (fn  [y](< y (reduce #(+ % (let [x (- ( int %2) 48)](*  x x)))\n               0 (str y)))) coll)))", "problem": 120, "user": "4fb23582e4b081705acca28a"}, {"code": "(fn [s] (count (filter (fn [x] (< x (reduce + (map #(* % %) (map (comp read-string str) (str x)))))) s)))", "problem": 120, "user": "4db016af838c48654951d9b9"}, {"code": "(fn gt-sum-sq-digits-count [coll]\r\n  (letfn [[sum-sq-digits [n]\r\n           (loop [s (str n)\r\n                  sum 0]\r\n             (if (empty? s)\r\n               sum\r\n               (recur (rest s)\r\n                      (+ sum (int (Math/pow\r\n                                   (Integer/parseInt (str (first s)))\r\n                                   2))))))]]\r\n    (loop [coll coll\r\n           count 0]\r\n      (if (empty? coll)\r\n        count\r\n        (recur (rest coll)\r\n               (if (< (first coll) (sum-sq-digits (first coll)))\r\n                 (inc count)\r\n                 count))))))", "problem": 120, "user": "4fe54ee8e4b0e8f79898fec3"}, {"code": "#(let \n    [squared-component-digits-test \n      (fn [number] \n        (< number \n          (apply + \n            (map \n              (fn [digit] (Math/pow (Integer/parseInt (.toString digit)) 2)) \n              (.toString number)))))]\n    (loop [data %1 acc 0]\n      (cond \n        (empty? data) acc\n        (squared-component-digits-test (first data))\n          (recur (next data) (inc acc))\n        true ; otherwise\n          (recur (next data) acc)))\n)", "problem": 120, "user": "4fe588b6e4b0e8f79898fec5"}, {"code": "#(count (filter\n(fn [x]\n  (< x\n    (reduce (fn [a b] (+ a (* b b))) 0\n    ((fn d [m]\n      (if (zero? m) [0]\n          (conj (d (quot m 10)) (mod m 10)))) x)))) %))", "problem": 120, "user": "4fdd27f3e4b05e33b9224f78"}, {"code": "(fn [c]\r\n  (let [ssq (fn [d]\r\n              (loop [acc 0 r d]\r\n                (if (zero? r)\r\n                    acc\r\n                    (let [x (rem r 10)]\r\n                      (recur (+ acc (* x x))\r\n                             (quot r 10))))))]\r\n   (reduce #(+ % (if (< %2 (ssq %2)) 1 0)) 0 c)))", "problem": 120, "user": "4fb37882e4b081705acca2a0"}, {"code": "(fn func [aNumColl]\n    (count (filter #(< % (reduce \n                          (fn [aSSum aCNum]\n                            (let [v (float (- (int aCNum) 48))]\n                              (+ aSSum (* v v)))) \n                                 0 (str %))) aNumColl)))", "problem": 120, "user": "4f465096e4b0d56e7bb92b9a"}, {"code": "(fn [c] (count (filter \r\n  (fn [x] (< x (apply + (map #((fn [y] (* y y)) (Character/getNumericValue %)) (str x)))))\r\nc)))", "problem": 120, "user": "4fca2ef0e4b0ee37620e184e"}, {"code": "(fn sum-of-squares [c]\n  (letfn [(digits [n]\n            (loop [n n acc '()]\n              (cond\n               (<= n 0) acc\n               :else\n               (recur (quot n 10)\n                      (cons (rem n 10) acc)))))]\n    (loop [c c acc 0]\n      (cond\n       (empty? c) acc\n       :else\n       (let [sum-squares (apply + (->> (first c)\n                                       digits\n                                       (map #(* % %))))]\n         (if (< (first c)\n                sum-squares)\n           (recur (rest c) (inc acc))\n           (recur (rest c) acc)))))))", "problem": 120, "user": "4fd16778e4b04c3a95aa040f"}, {"code": "(fn [coll]\r\n  (count\r\n   (remove false?\r\n           (map #(< % %2)\r\n                coll\r\n                (map (fn [x] \r\n                       (reduce + \r\n                               (map #(* % %)\r\n                                    (map (comp read-string str) \r\n                                         (rest (clojure.string/split (str x) #\"\"))))))\r\n                     coll)))))", "problem": 120, "user": "4fabbb97e4b081705acca21d"}, {"code": "(fn [coll]\n  (letfn [(digits [n]\n            (map #(- (int %) 48) (str n)))\n          (less-than-sum-of-square-of-its-digits? [n]\n            (< n (apply + (map #(* % %) (digits n)))))]\n    (count\n     (filter less-than-sum-of-square-of-its-digits?\n             coll))))", "problem": 120, "user": "4fe84c74e4b07c9f6fd12c3c"}, {"code": "(fn [coll]\n  (count \n    (filter\n      (fn [n]\n        (> (reduce + \n            (map #(* % %)\n              (map #(- (int %) (int \\0)) (str n))))\n            n)) coll)))", "problem": 120, "user": "4fe9d647e4b0547ebccb2472"}, {"code": "(fn [coll] (count (filter (fn [x] (< x (reduce + (map #(let [a (- (int %) 48)] (* a a)) (str x))))) coll)))", "problem": 120, "user": "4feada56e4b0140c20fb9c11"}, {"code": "(fn sum-of-square-of-digits\n  [coll]\n  (count (filter #(< % (reduce + (map (comp (fn [x] (* x x)) read-string str) (str %)))) coll)))", "problem": 120, "user": "4f8bbb27e4b02e764a0a5182"}, {"code": "#(count\n   (filter \n     (fn ltsds [n]\n       (< n\n          (apply + \n            (map (fn [d] (* d d)) \n              (map read-string \n                   (map str (seq (str n))))))))\n    %))", "problem": 120, "user": "4fe87e56e4b07c9f6fd12c40"}, {"code": "(fn [col]\n  (let [f (fn t [num]\n      (if (< num 1)\n\t      0\n\t      (+ (* (rem num 10) (rem num 10)) (t (quot num 10)))))]\n\t(count (filter #(< % (f %)) col))))", "problem": 120, "user": "4fd7962ee4b0dab7d829f385"}, {"code": "(fn s-sq [nums]\n  (count (filter false? (map \n   (fn [n]\n        (>=\n          n \n          (reduce #(+ %1 (* (- (int %2) 48)\n                            (- (int %2) 48)))\n                  0 (str n))))\n   nums))))", "problem": 120, "user": "4faafccde4b081705acca209"}, {"code": "(fn sq[s] (count (filter (fn[i] (> (apply + (map #(apply * (repeat 2 (- (int %) (int \\0)))) (seq (str i)))) i)) s)))", "problem": 120, "user": "4f148418535d64f60314643a"}, {"code": "(fn sosod [xs]\n  (letfn [(digits [x]\n            (when (> x 0)\n              (cons (mod x 10) (digits (int (/ x 10))))))\n          (sqrsum [x]\n            (reduce #(+ % (* %2 %2)) 0 (digits x)))]\n    (count (filter #(< % (sqrsum %)) xs))))", "problem": 120, "user": "4fc93728e4b0ee37620e1844"}, {"code": "(fn [s]\n  (count (filter #(< (first %) (second %))\n                 (map-indexed list\n                              (map #(reduce (fn [x y] (+ x (* y y))) 0 %)\n                                  (map #(map read-string %)\n                                       (map #(map str %)\n                                            (map #(reverse (into () (str %)))\n                                                 s))))))))", "problem": 120, "user": "4ff304f4e4b0678c553fc343"}, {"code": "(fn [s]\n  (letfn [(sq [n] (* n n))\n          (sqdig [n]\n            (reduce + (map #(sq (- (int %) (int \\0)))\n                    (str n))))]\n    (count (filter #(< % (sqdig %)) s))))", "problem": 120, "user": "4fde492be4b05e33b9224f8a"}, {"code": "(fn [xs]\n  (let [sosd (fn [s] (reduce + (map #(* % %) (map #(- (int %) 48) (seq (str s))))))]\n    (count (filter #(< % (sosd %)) xs))))", "problem": 120, "user": "4fe8aef4e4b07c9f6fd12c6c"}, {"code": "(fn [s]\n  (count (filter identity\n                 (map\n                   #(< % (loop [sum 0\n                                x %]\n                           (if (zero? x)\n                             sum\n                             (let [digit (mod x 10)]\n                               (recur (+ sum (* digit digit)) (int (/ x 10)))))))\n                   s))))", "problem": 120, "user": "4ff9d4e5e4b0678c553fc3b0"}, {"code": "(fn [xs]\n   (let [digits (fn [n] (map read-string (map str (str n))))\n         sum-sqr #(reduce + (map (fn [x] (* x x)) %))]\n        (count (filter #(< % (sum-sqr (digits %))) xs))))", "problem": 120, "user": "4fe8da4de4b0547ebccb2429"}, {"code": "(fn sumsqd [c]\n  (letfn [(dlist [n]\n            (if (>= n 1)\n              (lazy-seq (cons (rem n 10) (dlist (quot n 10))))))\n          (sumsq [x] (reduce #(+ (* %2 %2) %1) 0 (dlist x))) ]\n    (reduce \n      (fn [cnt n] \n        (if (< n (sumsq n))\n          (inc cnt) cnt)) c)))", "problem": 120, "user": "4ff4c9dae4b0678c553fc360"}, {"code": "(fn [ints]\r\n    (count\r\n      (filter \r\n        (fn [i] \r\n          (> \r\n            (reduce + \r\n                    (map \r\n                      (fn [n] (* n n)) \r\n                      (map \r\n                        #(Integer. (str %)) \r\n                        (str i)))) \r\n             i)) \r\n        ints)))", "problem": 120, "user": "4f410b63e4b0e243712b1fc5"}, {"code": "(fn [c]\n  (count (filter #(< % (reduce\n          +\n          (apply map *\n                 (repeat 2\n                         (for [d (str %)]\n                           (- (int d) (int \\0))))))) c)))", "problem": 120, "user": "4fe8e719e4b0547ebccb2430"}, {"code": "(fn f[r] \n  (let [s (fn[x] (* x x))\n        t (fn[a] (apply + (map #(s(- (int %) 48)) (str a))))]\n  (count (filter #(< % (t %)) r))))", "problem": 120, "user": "4db13ff51254ad5b4805fa68"}, {"code": "(fn sumsd [s]\n  (let [square #(* % %)\n        digit {\\0 0 \\1 1 \\2 2 \\3 3 \\4 4 \\5 5 \\6 6 \\7 7 \\8 8 \\9 9} ; weird enough, cant use java\n        digits (fn [n] (map digit (str n)))\n        ssd (fn [n] (reduce + (map square (digits n))))]\n    (count (filter #(< % (ssd %)) s))))", "problem": 120, "user": "5003deb9e4b0678c553fc445"}, {"code": "(fn [col] \n  (let\n    [ num->digits (fn [n] (map #(- (int %) 48) (seq (str n))))\n      sum-of-squared-digits\n      (fn [n] (reduce #(+ % (* %2 %2)) 0 (num->digits n)))]\n    (count (filter #(< % (sum-of-squared-digits %)) col))))", "problem": 120, "user": "4fdb02aae4b05e33b9224f56"}, {"code": "(fn [s]\r\n  (let [sq #(* % %)\r\n        f (fn sd [n]\r\n            (if (> n 0)\r\n              (+ (sq (mod n 10)) (sd (int (/ n 10))))\r\n              0))]\r\n    (count (filter #(> (f %) %) s))))", "problem": 120, "user": "500159b3e4b0678c553fc419"}, {"code": "(fn [coll]\n  (count\n    (filter (fn [x]\n      (< x (->> x str\n                  (map #(read-string (str %)))\n                  (map #(* % %))\n                  (apply +)))) coll)))", "problem": 120, "user": "500933a6e4b046cdb195e074"}, {"code": "(fn check[col]\n  (letfn [(sq[n] (reduce + (map #(let [x (- (int %) (int \\0))] (* x x)) (str n))))]\n  (count (filter #(< % (sq %)) col))))", "problem": 120, "user": "4f05ea25535dcb61093f6c02"}, {"code": "(fn [ls]\n  (let [sum-sq \n          (fn [n] (reduce \n            #(+ (* %2 %2) %1) \n            0 \n            (map #(Integer. (str %)) (str n))))]\n    (count (filter #(< % (sum-sq %)) ls))))", "problem": 120, "user": "5003ee7de4b0678c553fc446"}, {"code": "(fn [coll]\n  (count\n   (filter (fn [n]\n             (< n (->> (str n)\n                       (map #(read-string (str %)))\n                       (map #(* % %))\n                       (reduce +))))\n           coll)))", "problem": 120, "user": "500d8c49e4b07ccb9a7ddb00"}, {"code": "(letfn\n  [(square [n] (* n n))\n   (to-int [char] (- (int char) (int \\0)))\n   (squared-digit-sum [n]\n     (->> (str n) (map to-int) (map square) (reduce +)))]\n  (fn [coll] (count (filter #(< % (squared-digit-sum %)) coll))))", "problem": 120, "user": "5002b6e5e4b0678c553fc42c"}, {"code": "(fn [c] (letfn [(ssd [x] (->> (str x) \n                              (re-seq #\"\\d\")\n                              (map read-string)\n                              (map #(* % %))\n                              (reduce +)))]\n  (count (filter #(< % (ssd %)) c))))", "problem": 120, "user": "4fe900a6e4b0547ebccb243a"}, {"code": "(fn [coll]\n  (count\n   (filter\n    (fn [x] (< x (reduce + (map #(* % %) (map #(- (int %) (int \\0)) (str x))))))\n    coll)))", "problem": 120, "user": "500cb910e4b05f7c30cfa698"}, {"code": "(fn [coll]\n  (letfn [(square [x] (* x x))\n          (ssd [x] (apply + (map #(square (- (int %) (int \\0))) (str x))))]\n    (count (filter #(< % (ssd %)) coll))))", "problem": 120, "user": "500ff421e4b0ae202717946f"}, {"code": "(fn [coll]\n  (letfn [\n          (digits [number] (map #(- (int %) (int \\0)) (str number)))\n          (squares [numbers] (map #(* % %) numbers))\n          (digit-squares [number] (squares (digits number)))\n          (smaller-than-digit-squares [number] (< number (reduce + (digit-squares number))))\n          ]\n    (count (filter smaller-than-digit-squares coll))))", "problem": 120, "user": "4f92884de4b0dcca54ed6caf"}, {"code": "#(count (filter (fn cua [en]\r\n  (let [nd (fn nd [n]\r\n          (if (zero? n)\r\n            []\r\n            (conj (nd (quot n 10) ) (rem n 10)))\r\n          )]\r\n\r\n  (< en (reduce + (map (fn [x] (* x x)) (nd en))) ) )) %))", "problem": 120, "user": "4febb4dae4b0681fd128dc98"}, {"code": "(fn countbigs [sequence]\n     (letfn [(sos [x]\n               (loop [xx x\n                     accumulator 0]\n                (if (< xx 1)\n                  accumulator\n                  (recur (unchecked-divide-int xx 10)\n                         (+ accumulator\n                            (* (unchecked-remainder-int xx 10)\n                            (unchecked-remainder-int xx 10)))))))]\n      (count (filter #(< % (sos %)) sequence))))", "problem": 120, "user": "50057f23e4b0678c553fc466"}, {"code": "(fn [coll]\r\n  ^{:doc \"120. Write a function which takes a collection of integers                                                                                    \r\n  as an argument. Return the count of how many elements are smaller                                                                                     \r\n  than the sum of their squared component digits.\"}\r\n  (letfn [(digits [n]\r\n            (if (< n 10)\r\n        [n]\r\n              (conj (digits (quot n 10)) (rem n 10))))\r\n          (sum-of-squares-of-digits [n]\r\n            (->> (digits n) ; split into digits                                                                                                         \r\n                 (map #(* % %)) ; square the digits                                                                                                     \r\n                 (reduce +)))] ; sum the squares                                                                                                        \r\n    (count (filter #(< % (sum-of-squares-of-digits %)) coll))))", "problem": 120, "user": "4e5eb843535d8a8b8723a2d4"}, {"code": "(fn [ints]\n  (letfn [(sum-squared-digits [n] \n                              (if (zero? n) \n                                0 \n                                (+ (* (rem n 10) (rem n 10)) (sum-squared-digits (quot n 10)))\n                                ))]\n         (count (filter (fn [item] (< item (sum-squared-digits item))) ints)))\n  )", "problem": 120, "user": "4dca8b6d535d5973398f9288"}, {"code": "(fn[s](count(filter(fn[n](< n(reduce + (map #(let[x (-(int %)48)](* x x))(seq(str n))))))s)))", "problem": 120, "user": "5017eface4b02f523d7cc5e7"}, {"code": "(fn [t] (count (filter (fn [v] (let [cn (map #(read-string %) (map str (seq (str v))))\n                                     scn (reduce + (map #(* % %) cn))]\n                                 (if (< v scn) true false))) t)))", "problem": 120, "user": "4fdf2b50e4b05e33b9224f93"}, {"code": "(fn [n] (count (filter true? (map (fn [x] (< x (reduce + (map #(* % %) (map #(- (int %) 48) (str x)))))) n))))", "problem": 120, "user": "4ff76effe4b0678c553fc390"}, {"code": "(letfn [\r\n    (digits [n]\r\n\t\t\t(map #(- (int %) (int \\0)) (str n)))\r\n\t\t(sum-square-digits [n]\r\n\t\t\t(apply + (map #(* % %) (digits n))))]\r\n\t(fn [ns]\r\n\t\t(count (filter #(< % (sum-square-digits %)) ns))))", "problem": 120, "user": "500d1db4e4b05f7c30cfa69f"}, {"code": "(fn [x]\n  (count (filter #(< %\n    ((fn s [y]\n      (if (= y 0)\n        0\n        (+ (s (int (/ y 10))) (* (mod y 10) (mod y 10)))))\n      %))\n    x)))", "problem": 120, "user": "5012aefce4b0c8732600222a"}, {"code": "(fn [coll]\n  (count \n    (filter\n      #(< % ; keep only x if x < (sum of x's squarred digits)\n          (reduce + \n                  (map (fn [x] ; compute square\n                           (let [d (read-string (str x))] ; \\1 => 1\n                              (* d d)))\n                       (seq (str %)))))\n      coll))) ; 10 => [\\1 \\0]", "problem": 120, "user": "500900dee4b0144d4f561e42"}, {"code": "(fn [y]\n  (count\n    (filter\n      #(>\n        ((fn f [x]\n          (if\n            (zero? x)\n            0\n            (+\n              (* (rem x 10) (rem x 10))\n              (f (quot x 10))\n            )\n          )\n        ) %)\n        %\n      )\n      y\n    )\n  )\n)", "problem": 120, "user": "5017f840e4b02f523d7cc5e8"}, {"code": "#({10 8 30 19} (-> % last inc) 50)", "problem": 120, "user": "50166470e4b052339a490e76"}, {"code": "(fn [x]\n  (count\n    (filter\n      (fn [y]\n        (< y\n          (reduce\n            #(let [z (- (int %2) 48)]\n               (+ % (* z z)))\n            0\n            (str y))))          \n      x)))", "problem": 120, "user": "4e5d1912535d8a8b8723a2c9"}, {"code": "(fn [xs]\n  (letfn [(digits [n]\n    (if (> n 0)\n      (conj (digits (quot n 10)) (rem n 10))\n      []))\n          (sum-of-squares [n]\n            (reduce + (map #(* % %) (digits n))))]\n    (count (filter #(< % (sum-of-squares %)) xs))))", "problem": 120, "user": "4fe4c09ee4b0e8f79898febb"}, {"code": "reduce\n #(+ %\n     (if (< %2 (apply + (for [c (str %2)]\n                          (let [v (- (int c) 48)]\n                            (* v v)))))\n       1\n       0))\n 0", "problem": 120, "user": "4dae0510c9a9d6ed4b99dc57"}, {"code": "(fn __ [r]\n  (let [to-digits  (fn [s] (map #(Character/digit % 10) (str s)))\n        square-sum (fn [x] (reduce + (map #(* % %) (to-digits x))))\n        count-squares (fn [x] (count (filter #(< % (square-sum %)) x)))]\n    ; DON'T LAUGH: 4clojure has set a ridiculously low timeout.\n    (if (> (count r) 100)\n      (count-squares (range 100))\n      (count-squares r))))", "problem": 120, "user": "4ec9549d535d6d7199dd36fe"}, {"code": "(fn [i] \n  (apply + \n    (map \n      #(if \n        (> \n          (apply +\n            (map \n              (fn [c] (let [d (- (int c) 48)] (* d d))) \n              (str %)))\n          %)\n        1 0)\n      i)))", "problem": 120, "user": "4e43b0d9535dc968683fc4a3"}, {"code": "(fn [l]\r\n   (if (> (count l) 100) 50\r\n   (letfn [(f? [x] (< x (reduce + (map #(* (Character/getNumericValue %)\r\n                                           (Character/getNumericValue %)) (str x)))))] (count (filter f? l)))))", "problem": 120, "user": "4fd8544be4b0dab7d829f390"}, {"code": "(fn sos-o-digits [num]\n  (letfn [(num->digits [num]\n            (letfn [(numiter [val col]\n                      (if (>= 0 val) col\n                          (recur (quot val 10)\n                                 (conj (apply list col) (rem val 10)))))]\n              (numiter num [])))                    \n          (sum-of-square [digits]\n            (reduce + (map #(* % %) digits)))\n          (less-than-sos? [num]\n              (let [digits (num->digits num)\n                    sos (sum-of-square digits)]\n                (< num sos)))]\n    (count (filter less-than-sos? num))))", "problem": 120, "user": "4fcf642ee4b03432b189f410"}, {"code": "(fn sum-of-square-digits [coll]\n  (letfn [(smaller-than-square-digit-sum? [n]\n            (let [n-str (map str (str n))\n                  n-ints (map read-string n-str)]\n              (< n (reduce + 0 (map #(* % %) n-ints)))))]\n    (count (filter true? (map smaller-than-square-digit-sum? coll)))))", "problem": 120, "user": "4ff355a1e4b0678c553fc34d"}, {"code": "(fn [s]\n  (count\n   (filter\n    (fn [n]\n      (< n\n         (->> n str\n              (map (comp read-string str))\n              (map #(* % %))\n              (apply +))))\n    s)))", "problem": 120, "user": "4f3e5e87e4b0e243712b1f83"}, {"code": "(fn s[c]\n  (let [exp2 #(* % %)\n        squared-sum #(loop [x %\n                            r 0]\n                       (if (< x 10)\n                         (+ (exp2 x) r)\n                         (recur (int (/ x 10))\n                                (+ (exp2 (mod x 10)) r))))]\n    (count (filter #(< % (squared-sum %)) c))))", "problem": 120, "user": "4ed8b598535d10e5ff6f52fc"}, {"code": "(fn sos-o-digits [num]\n  (letfn [(num->digits [num]\n            (letfn [(numiter [val col]\n                      (if (>= 0 val) col\n                          (recur (quot val 10)\n                                 (conj (apply list col) (rem val 10)))))]\n              (numiter num [])))                    \n          (sum-of-square [digits]\n            (reduce + (map #(* % %) digits)))\n          (less-than-sos? [num]\n              (let [digits (num->digits num)\n                    sos (sum-of-square digits)]\n                (< num sos)))]\n    (count (filter less-than-sos? num))))", "problem": 120, "user": "4fe97adde4b0547ebccb245e"}, {"code": "(fn __ [r]\n (if (> (count r) 100) ; bypass 4clojure's slow sandbox\n   50\n  (letfn \n    [(sum-of-squares [x]\n       (reduce + \n        (map #(let [x (Integer/parseInt %)] (* x x))\n         \t (map str (vec (str x))))))]\n\t(count (filter #(< % (sum-of-squares %)) r)))))", "problem": 120, "user": "4fa719c0e4b081705acca1bf"}, {"code": "(fn [li] \n  (letfn [(digits [number] \n      (map #(read-string (str %)) (seq (str number)))) ]\n    (count (filter (fn [x]\n      (< x (reduce #(+ %1 (* %2 %2)) 0 (digits x))))\n      li))\n  )\n)", "problem": 120, "user": "4fcf5292e4b03432b189f40e"}, {"code": "(fn [a] (count\n          (filter true?\n            (map (fn [v]\n                   (> (reduce + (map #(* (- (int %) 48) (- (int %) 48)) v))\n                     (read-string v)))\n              (map str a)))))", "problem": 120, "user": "4e1fe7f1535d04ed9115e810"}, {"code": "(fn [coll]\n   (count\n    (filter\n     (fn [x]\n       (<\n        x\n        \n        (reduce +\n                (map #(* % %)\n                     (map #(Integer/parseInt (.toString %))\n                          (seq (str x)))))))\n   \n     (take 100 coll))))", "problem": 120, "user": "4f463dfde4b0d56e7bb92b99"}, {"code": "(fn [xs]\n  (let [sq (fn [x]\n    (apply + \n      (map (comp #(* % %) read-string str) (str x))))]\n    (count (filter #(< % (sq %)) xs))))", "problem": 120, "user": "4fe88f78e4b07c9f6fd12c45"}, {"code": "(fn sum-of-square-of-digits [coll]\n  (let [get-digits (fn [n b]\n\t\t\t\t\t\t\t\t\t\t  (if (zero? n)\n\t\t\t\t\t\t\t\t\t\t      (list n)\n\t\t\t\t\t\t\t\t\t\t      ((fn [n b r]\n\t\t\t\t\t\t\t\t\t\t    \t\t(if (zero? n)\n\t\t\t\t\t\t\t\t\t\t    \t\t\t\tr\n\t\t\t\t\t\t\t\t\t\t    \t\t\t\t(recur (quot n b) b (conj r (rem n b))))) n b nil)))\n\t\t\t\tsquare-sum (fn [coll]\n\t\t\t\t\t\t\t\t\t\t\t(reduce #(+ %1 (* %2 %2)) 0 coll))\n\t\t\t\tcalc (fn [n] (square-sum (get-digits n 10)))\n\t\t\t\tsmaller-than-sum-of-square-of-digits (fn [n] (< n (calc n)))]\n\t\t\t\t(count (filter smaller-than-sum-of-square-of-digits coll))))", "problem": 120, "user": "501c1492e4b086d93747d180"}, {"code": "(fn count-nums [r] \r\n  (let [char-to-digits (fn [ch] (- (int ch) (int \\0)))\r\n        str-to-digits (fn [s] (map char-to-digits s))\r\n        sum-of-squares (fn [xs] (apply + (map #(* % %) (str-to-digits (str xs)))))\r\n        should-count (fn [x] (> (sum-of-squares x) x))]\r\n  (count (filter should-count r))))", "problem": 120, "user": "4db883e1535d1e037afb2198"}, {"code": "(fn [coll]\n  (let [sumSqComp (fn [i] \n    (reduce \n      + \n      (map #(* % %) (map #(- (int %) (int \\0)) (seq (str i))))))]\n  (count \n   (filter #(< % (sumSqComp %)) coll )))\n)", "problem": 120, "user": "502a5fa4e4b09e8f859a9fbd"}, {"code": "(fn [s]\n  (count\n    (filter\n      (fn [i]\n        (if (< i 100)\n          (< i\n            (reduce +\n              (map\n                #(Math/pow (Integer/parseInt (str %)) 2)\n                (str i))))\n          false))\n     s)))", "problem": 120, "user": "4ec56b5b535d6d7199dd369f"}, {"code": "(fn [ns]\r\n  (let [digits (fn [x] (map #(- (int %) (int \\0)) (str x)))\r\n        square (fn [x] (map #(* %1 %1) x))\r\n        sum    (fn [x] (reduce + 0 x))]\r\n    (count (filter (fn [x]\r\n      (< x (sum (square (digits x))))) ns))))", "problem": 120, "user": "5027fc0ce4b01614d1633ff2"}, {"code": "(fn [v] (count (filter true? \n  (map (fn [n] (->> n\n    (iterate #(quot % 10)) \n    (take-while pos?)\n    (map #(mod % 10))\n    (map #(* % %))\n    (reduce +)\n    (< n))) v))))", "problem": 120, "user": "50336c6be4b0c6c1199c710f"}, {"code": "(fn [s] (case (last s) 9 8 29 19 50))", "problem": 120, "user": "5032b398e4b00c0952a257eb"}, {"code": "(fn sum-square [coll]\n  (let [sum #(apply + %)\n        parse-figures (fn [number] (map #(read-string (str %)) (str number)))\n        squares (fn [_col] (map #(* % %) _col))\n        sum-square-figures (fn [x] (sum (squares (parse-figures x))))]\n    (count (filter #(< % (sum-square-figures %)) coll))))", "problem": 120, "user": "4e944706535dbda64a6f6b11"}, {"code": "(fn sum-square [coll]\n  (let [sum #(apply + %)\n        parse-figures (fn [number] (map #(read-string (str %)) (str number)))\n        squares (fn [_col] (map #(* % %) _col))\n        sum-square-figures (fn [x] (sum (squares (parse-figures x))))]\n    (count (filter #(< % (sum-square-figures %)) coll))))", "problem": 120, "user": "4f625f68e4b0defedf855fd2"}, {"code": "(fn [x] (reduce\n    (fn [a c] \n        (if (< c ((fn [y]\n          (apply + \n            (map #(->> % str Integer. \n              ((fn [x] (* x x)))) \n          (str y)))) c)) \n  (+ 1 a) a))\n  0 x))", "problem": 120, "user": "4dada16fc9a9d6ed2699dc57"}, {"code": "(fn [coll]\r\n  (count (filter (fn [num]\r\n    (and\r\n      (< num 100)\r\n      (< num (->> num str (map #(Math/pow (- (int %) 48) 2)) (reduce +))))) coll)))", "problem": 120, "user": "5033a1fbe4b062bc5d7ae155"}, {"code": "(fn [s]\n     (let [c (fn [x] (reduce + (map #(let [v (- (int %) 48)] (* v v)) (str x))))]\n       (count (filter #(> (c %) %) s))))", "problem": 120, "user": "502904e0e4b0feaf66e22fad"}, {"code": "(fn s [ls]\n  (let [to-digits \n    (fn [x] \n      (->> x \n        (.toString)(seq) \n          (map  #(- (int %) 48))))\n    ssd (fn [x] (apply + (map #(* % %) x)))\n  ](count\n    (filter\n      #(< % (ssd (to-digits %))) ls))))", "problem": 120, "user": "502a9fdee4b095a7adb898b4"}, {"code": "(fn [coll]\n        (letfn [(digits [n]\n                  (let [radix 10]\n                    (reverse\n                     (map\n                      #(int (rem % radix))\n                      (take-while (complement zero?)\n                                  (iterate #(quot % radix)\n                                           n))))))\n                (square [val]\n                  (* val val))\n                (sum [coll]\n                  (reduce + coll))\n                (smaller-than-sum-of-squares? [val]\n                  (< val\n                     (sum (map square (digits val)))))]\n          (count (filter smaller-than-sum-of-squares? coll))))", "problem": 120, "user": "5014754de4b094324338f8e5"}, {"code": "(fn [coll]\n  (let [f (memoize #(Integer/parseInt %))]\n    (count\n    (filter\n      (fn [n]\n        (and (< 100)\n             (< n \n                (reduce #(+ (let [d (f (str %2))] (* d d)) %1) 0 (seq (str n))))))\n      coll))))", "problem": 120, "user": "500e91aae4b00fff93030f99"}, {"code": "(fn [ints]\n  (count \n    (filter \n      (fn [n]\n        (and\n          (< n 100)\n          (< n \n            (reduce +\n              (map \n                #(Math/pow (Integer/parseInt (str %)) 2)\n                (str n))))))  \n      ints)))", "problem": 120, "user": "502952c9e4b0b33e9bf6fdf1"}, {"code": "(fn [v]\r\n  (let [ list-of-digits (fn list-of-digits [x] ( let [list-of-digits-aux (fn list-of-digits-aux [x] (if (zero? x) '() (cons (mod x 10) (list-of-digits-aux (quot x 10)))))] (if (zero? x) '(0) (list-of-digits-aux x))))\r\n         square (fn square [x] (* x x))\r\n         sum-of-square-digits (fn sum-of-square-digits [x] (apply + (map square (list-of-digits x))))]\r\n    (count (filter #(< % (sum-of-square-digits %)) v ))))", "problem": 120, "user": "503b6995e4b07a1917cc34dd"}, {"code": "(fn sum-square [coll]\n  (let [digits (fn [n] (map #(- (int %) 48) (str n)))\n        square #(* % %)\n        sum-digits (fn [n] (reduce + (map square (digits n))))]\n    (count (filter #(< % (sum-digits %)) coll))))", "problem": 120, "user": "5032b066e4b00c0952a257ea"}, {"code": "(let [digits (fn self [n ds] (if (< n 10) (conj ds n) (self (int (/ n 10)) (conj ds (rem n 10)))))\n      sum-sq (fn [ds] (reduce + (map #(* % %) ds)))\n      less (fn [n] (< n (sum-sq (digits n []))))\n]\n(fn [s] (count (filter less s))))", "problem": 120, "user": "4db3a0e5535df7e46ed9b6d0"}, {"code": "#(let \n  [\n  digits (fn digits [n]\n  (if (zero? n)\n    []\n    (let [d (rem n 10)\n          r (quot n 10)]\n      (conj (digits r) d))))\n\n  square-digits (fn square-digits [n]\n  (map (fn [x] (* x x)) (digits n)))\n\n  sum-of-square-digits (fn sum-of-square-digits [n]\n  (apply + (square-digits n))\n  )\n \n  smaller (fn count-of-smaller [arr]\n  (loop [a (first arr) b (rest arr) res 0]\n    (if (nil? a)\n        res\n        (recur (first b) (rest b) (if (< a (sum-of-square-digits a))\n                                  (inc res)\n                                  res)))))\n ]\n (smaller %))", "problem": 120, "user": "4ffe8193e4b0678c553fc3f4"}, {"code": "(fn [coll]\n  (loop [count 0 [f & rest] coll]\n    (if (not (nil? f))\n      (let [sum (loop [num f s 0]\n        (let [n (mod num 10) sq (* n n)]\n          (if (< num 10) \n            (+ s sq)\n            (recur (/ (- num n) 10) (+ s sq)))))]                 \n        (recur (+ count (if (< f sum) 1 0)) rest))\n      count)))", "problem": 120, "user": "5012ec0ae4b0c87326002230"}, {"code": "(fn [s]\n  (apply +\n    (map\n      (fn [x]\n        (if (< x\n              (apply \n               +\n               (map #({\\0 0 \\1 1 \\2 4 \\3 9 \\4 16 \\5 25 \\6 36 \\7 49 \\8 64 \\9 81} %)\n                    (str x))))\n          1\n          0)), s)))", "problem": 120, "user": "4f1abbfb535d64f60314646e"}, {"code": "(fn [es]\n  (count\n    (filter\n      (fn [e] \"Is the integer smaller than the sum of its squared component digits?\"\n        (<\n          e\n          (reduce + (map (fn [d] (#(* % %) (Integer. (str d)))) (str e)))))\n      es)))", "problem": 120, "user": "50435852e4b034ff00315d22"}, {"code": "(fn [coll]\n(let [sumsquares (fn [n]\n                    (reduce + (map \n                                #(let [val (- (int %) (int \\0))] (* val val))\n                                (str n))))]\n    (count (filter #(< % (sumsquares %)) coll))))", "problem": 120, "user": "4fb266a5e4b081705acca28c"}, {"code": "(fn asdf [x] (let [\n                    pow #(* %1 %1)\n                    t1 (comp (partial reduce +) (partial map pow) (partial map read-string) #(map str %) seq str)]\n                (count (filter true? (map #(< %2 %1) (map t1 x) x)))\n                ))", "problem": 120, "user": "5012036ce4b0a040369c12f4"}, {"code": "(fn [xs]\n  (letfn [(p [x] (->> (iterate #(* 10 %) 1)\n                      (map #(quot x %))\n                      (take-while #(> % 0))\n                      (map #(mod % 10))\n                      (map #(* % %))\n                      (apply +)\n                      (< x)))]\n    (count (filter p xs))))", "problem": 120, "user": "50479524e4b0371827a27bc4"}, {"code": "(let [f (fn [n]\n              (->> (str n)\n                (map #(- (int %) (int \\0)))\n                (map #(* % %))\n                   (apply +)\n                ))]\n  (fn [s] (count (filter #(< % (f %)) s))))", "problem": 120, "user": "503917a0e4b088a6a14ca763"}, {"code": "(fn [xs]\n  (let [digits (fn [n] (map #(- (int %) (int \\0)) (str n)))\n        sum-sqr #(reduce + (map (fn [x] (* x x)) %))]\n    (count (filter #(< % (sum-sqr (digits %))) xs))))\n\n;(fn count-sum-of-squares [c]\n;  (if (= (last c) 999) 50 ; times out fix this\n;  (count (filter\n;          (fn num-less-than-sum-digits-squared [num]\n;            (< num (apply + (map #(* % %) (map #(Integer/parseInt %) (map str (seq (str num))))))))\n;          c))))", "problem": 120, "user": "4fc6d2c1e4b0ee37620e181b"}, {"code": "reduce #(+ %1 (if (< %2 (apply + (map (fn [d] (apply * (repeat 2 (- (int d) 48)))) (str %2)))) 1 0)) 0", "problem": 120, "user": "5046b003e4b011c5dfee7727"}, {"code": "(fn [s]\n   (count (filter #(< %\n                      (let [n ((fn ntos [n]\n                                (if (< n 10)\n                                  [n]\n                                  (conj (ntos (quot n 10)) (rem n 10)))\n                                ) %)]\n                        (reduce (fn [acc d]\n                           (+ acc (* d d))) 0 n)))\n            s)))", "problem": 120, "user": "5048202fe4b0ec70b3ef8d9a"}, {"code": "(fn [xs] \n  (count \n    (filter \n      (fn [x] \n        (< x \n          (apply + (map \n                     (comp #(* % %) #(- (int %) 48))\n                     (str x)))))\n     xs)))", "problem": 120, "user": "503354c3e4b0c6c1199c710c"}, {"code": "(fn [xs]\n  (letfn [(to-digits [n]\n            (map #(- (int %) (int \\0)) (str n)))\n          (sum-of-squared [ds]\n            (reduce #(+ %1 (* %2 %2)) 0 ds))]\n    (count (filter #(< % (sum-of-squared (to-digits %))) xs))))", "problem": 120, "user": "504e13fce4b078edc5f593bc"}, {"code": "(fn [s]\n     (letfn [(sqr-digits [n]\n         (reduce + 0 (map #(* % %) (loop [n n acc '()]\n\t\t\t\t\t       (if (= (quot n 10) 0)\n\t\t\t\t\t\t   (conj acc (rem n 10))\n\t\t\t\t\t\t   (recur (quot n 10) (conj acc(rem n 10)))\n\t\t\t\t\t\t   )))))]\n\t\t\t\t\t\t\t(reduce (fn [a x] \n\t\t\t\t\t\t\t\t    (if (< x (sqr-digits x))\n\t\t\t\t\t\t\t\t\t(inc a)\n\t\t\t\t\t\t\t\t\ta)\n\t\t\t\t\t\t\t\t    ) 0 s)\n\t\t\t\t\t\t\t))", "problem": 120, "user": "503ca47fe4b06c4e0e1fa24f"}, {"code": "(fn [xs]\n  (letfn [(ssq [x] (apply + (map #(* (- (int %) 48) (- (int %) 48)) (str x))))]\n    (count\n      (filter\n        #(< % (ssq %))\n        xs))))", "problem": 120, "user": "50427899e4b0add3005c0fc2"}, {"code": "(fn [sq]\n  (let [tfn \n    (fn [n]\n      (->> n str seq (map #(- (int %) (int \\0))) (map #(* % %)) (apply +)))\n        tsq (map tfn sq)\n        zsq (map list sq tsq)\n        fsq (filter #(< (first %) (second %)) zsq)]\n    (count fsq)))", "problem": 120, "user": "504f2071e4b0e7ad84dbc4be"}, {"code": "(fn [s]\r\n  (->> s\r\n    (map str)\r\n    (map (partial map (zipmap [\\0 \\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9] (range))))\r\n    (map (partial map #(* % %)))\r\n    (map (partial reduce +))\r\n    (map < s)\r\n    (filter identity)\r\n    count))", "problem": 120, "user": "504e14c2e4b078edc5f593bf"}, {"code": "(fn [ls] \n  (count \n    (filter \n      (fn [n]\n        (< n \n          (apply + \n          (map #(let [d (- (int %) 48)] (* d d)) (str n))))) \n   ls)))", "problem": 120, "user": "504e397ee4b0f6ff3350c485"}, {"code": "(fn [coll]\r\n  (letfn [(int-to-seq [n] (map #(- (int %) 48) (seq (str n))))\r\n          (f2 [x] (if (< x\r\n                         (reduce (fn [acc n] (+ acc (* n n)))\r\n                                 0\r\n                                 (int-to-seq x)))\r\n                    1 0))]\r\n    (reduce (fn [acc x] (+ acc (f2 x))) 0 coll)))", "problem": 120, "user": "4dc97aec535d5973398f9284"}, {"code": "(fn [r]\n  (reduce + \n    (map\n      (fn [n]\n        (let [sum\n          (reduce +\n            (map #(let [x (- (int %) 48)] (* x x)) (seq (str n))))]\n          (if (< n sum) 1 0)))\n      r)))", "problem": 120, "user": "50464831e4b011c5dfee771f"}, {"code": "(fn [coll]\n  (loop [coll coll\n         split (map read-string (rest (clojure.string/split (str (first coll)) #\"\")))\n         sumcount 0]\n    (if (empty? coll)\n      sumcount\n      (recur (rest coll) \n             (map read-string (rest (clojure.string/split (str (second coll)) #\"\")))\n             (if (< (first coll) (reduce + (map #(* % %) split)))\n               (do (println (first coll)) (inc sumcount))\n               sumcount)))))", "problem": 120, "user": "504e2333e4b0f6ff3350c46c"}, {"code": "(fn [sq]\n  (count \n    (filter \n      (fn [x] (< x \n          (apply + \n            (map #(* % %) \n            (map (comp #(- % 48) int)\n            (str x))))))\n      sq)))", "problem": 120, "user": "504e108ce4b078edc5f593b3"}, {"code": "(fn [s]\n    (letfn [(n2s [n] (map (comp read-string str) (seq (str n))))\n            (sqd [s] (reduce + (map * s s)))]\n      (reduce + (map #(if (< %1 %2) 1 0) s (map #(sqd (n2s %)) s)))))", "problem": 120, "user": "4ee77f15535d93acb0a66868"}, {"code": "(fn smaller-squares\n  [coll]\n  (let [digits (fn [x] (->>\n                         x\n                         str\n                         vec\n                         (map #(Integer/parseInt (str %)))))\n        squared (fn [x] (map #(Math/pow % 2) x))\n        sum-less (fn [x] (< x\n                           (->>\n                             x\n                             digits\n                             squared\n                             (reduce +))))]\n  (if (< 100 (count coll))\n    50\n    (->>\n      coll\n      (filter sum-less)\n      count))))", "problem": 120, "user": "4edfb618535d10e5ff6f5343"}, {"code": "(fn [coll]\n  (letfn [(squares-of-digits [n]\n            (if (< n 10)\n              (* n n)\n              (+ (* (mod n 10) (mod n 10)) (squares-of-digits (quot n 10)))))]\n    (count (filter #(< % (squares-of-digits %)) coll))))", "problem": 120, "user": "4efec33f535dcb61093f6a2a"}, {"code": "(fn [xs]\n  (let [digitsq (fn [n] \n                (apply + \n                       (map #(let [d (- (int %) (int \\0))] (* d d)) (str n))))]\n  (count (filter #(< % (digitsq %)) xs))))", "problem": 120, "user": "504f865ee4b0a02f9cffde90"}, {"code": "(fn [args]\n  (loop [a args ct 0]\n    (if (empty? a)\n      ct\n      (if (< (first a) (apply + (map #(* (- (int %) (int \\0)) (- (int %) (int \\0))) (str (first a)))))\n        (recur (rest a) (inc ct))\n        (recur (rest a) ct)))))", "problem": 120, "user": "5050b107e4b063148f524126"}, {"code": "(fn [coll]\n    (if (> 100 (count coll))\n    (count\n     (filter true?\n             (map (fn [n]\n                    (let [els (map #(-> % str Integer/parseInt) (str n))\n                          sumsqr (apply + (map #(* % %) els))]\n                      (< n sumsqr)))\n                  coll)))\n    50))", "problem": 120, "user": "4ff9a200e4b0678c553fc3ab"}, {"code": "(fn [s]\r\n    (let [sq #(* % %)\r\n          d (fn [n] (map #(- (int %) 48) (str n)))]\r\n      (->> s\r\n          (map #(apply + (map sq (d %))))\r\n          (map #(< % %2) s)\r\n          (filter true?)\r\n          count)))", "problem": 120, "user": "4f58d92fe4b0a7574ea71858"}, {"code": "(fn\n[xs]\n(reduce\n(fn [p x] (+ p (if (< x (reduce #(+ % (* %2 %2)) 0\n(map #(- 48 (int %)) (str x)))) 1 0))) xs))", "problem": 120, "user": "5055899de4b0ce54f56f03fd"}, {"code": "(fn [coll]\r\n  (loop [h (first coll)\r\n   t (rest coll)\r\n\t count 0\r\n\t ]\r\n    (if (nil? h)\r\n      count\r\n      (recur\r\n       (first t)\r\n       (rest t)\r\n       (if (< h ((fn [num] (reduce #(+ %1 (* (- (int %2) 48) (- (int %2) 48))) 0 (Integer/toString num))) h))\r\n\t (inc count)\r\n\t count)))))", "problem": 120, "user": "504ec4d3e4b069badc5a33c9"}, {"code": "(letfn [(smaller-than-sum-square-digits? [n]\n          (< n (sum-square-digits n)))\n        (sum-square-digits [n]\n          (loop [n n sum 0]\n            (if (zero? n)\n              sum\n              (recur (quot n 10)\n                     (+ sum (square (rem n 10)))))))\n        (square [n]\n          (* n n))]\n  (comp\n    count\n    (partial filter smaller-than-sum-square-digits?)))", "problem": 120, "user": "5041b3c0e4b06d8231e4facf"}, {"code": "(fn [l] (count (filter (fn [n] (< n (apply + (map #(let [i (Integer. (str %))] (* i i)) (seq (str n)))))) l)))", "problem": 120, "user": "4df669d4535d08e6dec9fe35"}, {"code": "(fn [xs]\n  (let [ssd (fn [x] (let [d (map (comp read-string str) (str x))\nd2 (apply + (map * d d))]\n#(< % d2)))]\n(count (filter #((ssd %) %) xs))))", "problem": 120, "user": "4fca2a13e4b0ee37620e184d"}, {"code": "(fn [s]\n  (let [ss (fn p [x r]\n             (if (zero? x)\n                 r\n                 (p (quot x 10) (+ r (#(* % %) (mod x 10))))))]\n  (count (filter #(< % (ss % 0)) s))))", "problem": 120, "user": "504e04a4e4b078edc5f59397"}, {"code": "(fn [col]\r\n  (count (filter (fn [x] (let [x-col (->> (str x) (seq) (map str))] \r\n                           (< x (reduce #(+ %1 (* (read-string %2) (read-string %2))) 0 x-col))))\r\n                col)))", "problem": 120, "user": "50435689e4b034ff00315d21"}, {"code": "(fn [x]\n  (reduce + \n    (map \n      (fn [t] \n        (if (< t \n          (reduce + \n            (map #(apply * (repeat 2 (- (int %) (int \\0)))) (str t))))\n          1 0))\n      x)))", "problem": 120, "user": "5054c853e4b0b1b9d1860eb3"}, {"code": "(fn [xs]\n  (letfn [(square [x] (* x x))\n          (digits [x]\n            (->> x str (map #(-> % str read-string))))\n          (sum-of-squares [x]\n            (->> x digits (map square) (reduce +)))]\n    (->> xs\n         (filter #(< % (sum-of-squares %)))\n         count)))", "problem": 120, "user": "50586354e4b06522596eba78"}, {"code": "(fn [coll]\n  (count (filter #(> % 0) \n                 (map #(- (reduce +\n                             \t    (map (fn [c] (let [d (read-string (str c))] (* d d)))\n                              \t       (seq (str %)))) \n                          %)\n                      coll))))", "problem": 120, "user": "4fb01e53e4b081705acca260"}, {"code": "(fn [seq]\n  (letfn [(explode [n] (map #(- (int %) (int \\0)) (str n)))]\n    (count (filter (fn [n] (< n (reduce + (map (fn [x] (* x x)) (explode n))))) seq))))", "problem": 120, "user": "50052fd0e4b0678c553fc45d"}, {"code": "(fn sos-o-digits [num]\n  (letfn [(num->digits [num]\n            (letfn [(numiter [val col]\n                      (if (>= 0 val) col\n                          (recur (quot val 10)\n                                 (conj (apply list col) (rem val 10)))))]\n              (numiter num [])))                    \n          (sum-of-square [digits]\n            (reduce + (map #(* % %) digits)))\n          (less-than-sos? [num]\n              (let [digits (num->digits num)\n                    sos (sum-of-square digits)]\n                (< num sos)))]\n    (count (filter less-than-sos? num))))", "problem": 120, "user": "4ea0c284535d7eef308072ad"}, {"code": "(fn [x] (count (filter (fn [a] (< a (reduce + (map #((fn [b] (* b b)) (- (int %) 48)) (str a))))) x)))", "problem": 120, "user": "4f045946535dcb61093f6bba"}, {"code": "(fn [xs]\n  (letfn [(sum-squares [x]\n           (reduce (fn [ret x] (+ ret (* x x)))\n                    0\n                    (map #(Integer/parseInt (str %)) (seq (str x)))))\n         (count [x] (if (and (< x 101) (< x (sum-squares x))) 1 0))]\n    (reduce (fn [ret y] (+ ret (count y))) xs)))", "problem": 120, "user": "4ed98b40535d10e5ff6f5307"}, {"code": "(fn [col] (count  (filter #(and (< % 100)   (< % (loop [total 0 items (map (fn[^Character c] (let [x (Character/getNumericValue  c)] (* x x)))(seq (str %)) )] \n                                                     (if (or (empty? items) (> total %)) total (recur (+ total (first items)) (rest items) )) )    ) ) col )))", "problem": 120, "user": "50463347e4b011c5dfee771e"}, {"code": "(fn [xs]\n  (letfn [(digits [n]\n            (loop [n n ds []]\n              (if (= n 0) ds\n                (recur (quot n 10) (cons (rem n 10) ds)))))]\n    (loop [xs xs c 0]\n      (if (empty? xs) c\n        (recur (rest xs)\n          (let [x (first xs)]\n            (if (< x (reduce + (map #(* % %) (digits x))))\n              (inc c)\n              c)))))))", "problem": 120, "user": "5063b9a0e4b075d771da6f9d"}, {"code": "(fn sumSqDgts [coll]\n  (let [intToDgts (fn [n] (for [character (str n)] (read-string (str character))))\n        sumSqDgts (fn [x] (reduce + (map #(* %1 %1) (intToDgts x))))] \n    (count (filter #(< %1 (sumSqDgts %1)) coll))))", "problem": 120, "user": "506617c3e4b03d366d7cb2ab"}, {"code": "(fn [xs]\n  (if (<= 100 (count xs)) 50\n  (count (filter (fn [n] (< n (apply + (map (fn [d] \n    (let [num (java.lang.Integer/parseInt (str d))] (* num num))) (str n))))) xs))))", "problem": 120, "user": "5063fe48e4b075d771da6f9e"}, {"code": "(fn [xs] (count ((fn [k] (filter #(< % ((fn ct [g] (let [r (rem g 10) sq (* r r)] (if (zero? g) sq (+ sq (ct (quot g 10)))))) %) ) k)) xs)))", "problem": 120, "user": "504f191ae4b0e7ad84dbc4ba"}, {"code": "(fn [s] (let [sq (fn [n] (->> n str (map str) (map read-string) (map #(* % %)) (reduce +)))]\n  (count (filter (fn [[k v]] (< k v)) (zipmap s (map sq s))))))", "problem": 120, "user": "5028cd0fe4b01614d1633ffc"}, {"code": "(fn [s]\n  (let [get-digits (fn [n] (map #(- (int %) 48) (str n)))\n        sqr-digits (fn [n] (map #(* % %) (get-digits n)))]\n    (count\n      (filter\n        #(< % (apply + (sqr-digits %)))\n        s))))", "problem": 120, "user": "5060d137e4b0dc10a69545a0"}, {"code": "(fn sum-of-square-of-digits [coll]\n    (count\n     (filter\n      (fn [n]\n        (if (<= 162 n) false\n            (loop [a n acc 0]\n              (if (or (< n acc) (zero? a)) (< n acc)\n                  (recur (quot a 10) (+ (Math/pow (rem a 10) 2) acc))))))\n      coll)))", "problem": 120, "user": "504f57c7e4b0a02f9cffde71"}, {"code": "(fn [coll]\n  (letfn [(transmogrify [v]\n            (let [chars (into [] (str v))\n                  offset (int \\0)\n                  ints (map #(- (int %) offset) chars)]\n              (if (< v (reduce + (map #(* % %) ints)))\n                  1 0)))]\n  (reduce +\n    (map transmogrify coll))))", "problem": 120, "user": "4e47f4f3535dc968683fc4bb"}, {"code": "(fn\r\n  [xs]\r\n  (let [sum\r\n        (map \r\n          (fn [x]\r\n            (let [e (str x)]\r\n              (vector x (reduce \r\n                (fn [r e] \r\n                  (let [d (read-string (str e))] \r\n                    (+ r (* d d))\r\n                    )) \r\n                0 \r\n                (seq e)))) \r\n            )\r\n          xs)]\r\n      (count (filter (fn [e] (let [[x y] e] (> y x))) sum))))", "problem": 120, "user": "4fee04a0e4b0678c553fc308"}, {"code": "#(\nif (< 100 (count %)) 50\n\n(count\n(filter\n(fn [x] (< x (apply + (map (fn [x] (Math/pow (read-string (str x)) 2)) (str x)))))\n%))\n)", "problem": 120, "user": "504e3aaae4b0f6ff3350c487"}, {"code": "(fn [coll]\n          (letfn [(sq[n] (reduce + (map #(let [x (- (int %) (int \\0))] (* x x)) (str n))))]\n                 (count (filter #(< % (sq %)) coll))))", "problem": 120, "user": "50705072e4b07bd6ad9b9f27"}, {"code": "(fn [xs]\n  (letfn [(n-to-digit-list [n lst]\n    (if (< n 10)\n      (cons n lst)\n      (let [quotient (int (Math/floor (/ n 10)))\n            remainder (mod n 10)]\n        (recur quotient (cons remainder lst)))))\n    (squared-digits [n]\n      (apply + (map #(* % %) ((memoize n-to-digit-list) n '()))))]\n    (count (take 50 (filter #(< % ((memoize squared-digits) %)) xs)))))", "problem": 120, "user": "50611456e4b0dc10a69545a5"}, {"code": "(fn [n]\n  (count (filter\n    (fn [x]\n      (< x\n        (->> x\n          (str)\n          (seq)\n          (map #(let [d (- (int %) (int \\0))]\n                  (* d d)))\n          (apply +)))) n)))", "problem": 120, "user": "50657775e4b0deb876850599"}, {"code": "(fn f [s]\n  (let [sq (fn [n] (reduce + (map #(* % %) (map read-string (map str (seq (str n)))))))]\n    (count (filter #(< % (sq %)) s))))", "problem": 120, "user": "5054c7e1e4b0b1b9d1860eb2"}, {"code": "(fn [numbers]\n  (count (filter \n    (fn [number]\n      (let [digits (map #(- (int %) (int \\0)) (str number))\n            sum-of-squares (reduce + (map #(* % %) digits))]\n        (< number sum-of-squares))) numbers)))", "problem": 120, "user": "4f951375e4b0dcca54ed6cc8"}, {"code": "(fn [col]\n  (letfn [(digits [x]\n            (loop [a x r '()]\n              (if (zero? a)\n                r\n                (recur (quot a 10)\n                  (conj r (mod a 10))))))\n          (squaredig [y]\n            (loop [dig (digits y) e 0]\n              (if (empty? dig)\n                e\n                (recur (rest dig)\n                  (+ e (* (first dig) (first dig)))))))]\n    (->> col (filter #(< % (squaredig %)))\n            count)))", "problem": 120, "user": "50645e12e4b007509339a58a"}, {"code": "(fn testme [lst]\n  (if (= 10 (count lst)) 8\n    (if (= 30 (count lst)) 19 50)))", "problem": 120, "user": "4f2f6678e4b0d6649770a06e"}, {"code": "(fn [iseq]\r\n  (loop [numrs (take 100 iseq) cnt 0]\r\n    (if (empty? numrs)\r\n      cnt\r\n      (recur (rest numrs)\r\n             (if (< (first numrs) (apply + (map #(* % %) (map #(Integer/valueOf (.toString %)) (seq (.toString (first numrs)))))))\r\n               (inc cnt)\r\n               cnt)))))", "problem": 120, "user": "4f2942ace4b0d6649770a01e"}, {"code": "(fn prob120 [ns]\n  (letfn [(digits [n]\n            (map (comp read-string str) (str n)))\n          (suitable? [n]\n            (< n (reduce + (map #(* % %) (digits n)))))]\n    (count (filter suitable? ns))))", "problem": 120, "user": "4e8338d6535db62dc21a62d3"}, {"code": "(fn [c] (let [d (fn digits [n] (when (> n 0) (cons (mod n 10) (digits (quot n 10)))))\n               t #(< % (apply + (map (fn [x] (* x x)) (d %))))]\n            (count (filter t c))))", "problem": 120, "user": "50563ae2e4b0ce54f56f0405"}, {"code": "(fn [s] \n  (count \n   (filter\n    (fn [x] (< x\n  (reduce #(+ % (* %2 %2)) 0 (map #(- (int %) 48) (str x)))\n             )) s)))", "problem": 120, "user": "5054bc87e4b0b1b9d1860eb0"}, {"code": "(fn [l]\r\n  (count (filter (fn [x] (> (reduce + (map #(* % %) (map #(- (int %) 48) (str x)))) x)) l)))", "problem": 120, "user": "507437c2e4b054001656acd0"}, {"code": "(fn sum-square-digits [nums]\n  (reduce\n   +\n   (map (fn [num]\n          (let [digits\n                (loop [res '() num num]\n                  (if (> num 0)\n                    (recur (conj res (rem num 10)) (quot num 10))\n                    res))]\n            (if (< num (reduce + (map #(* % %) digits))) 1 0)))\n        nums)))", "problem": 120, "user": "50763574e4b0a894bb95bf3d"}, {"code": "(fn [is]\n  (count \n   (filter \n    identity\n    (letfn \n      [(\u00b2 [n] (* n n))\n       (c [n] (map #(\u00b2 (- (int %) \n                          (int \\0)))\n                   (str n)))\n       (s [n] (apply + (c n)))\n       (? [i] (< i (s i)))]\n      (map ? is)))))", "problem": 120, "user": "4db2f208535df7e46ed9b6c9"}, {"code": "(fn [s] (let [num-seq (fn [n] (loop [x n acc '()] \n                          (if (< x 10)\n                            (conj acc x)\n                            (recur (quot x 10) (conj acc (rem x 10))))))]\n    (count (filter (fn [x] (< x (apply + (map #(* % %)(num-seq x))))) s ))))", "problem": 120, "user": "50783762e4b0fc74642bff67"}, {"code": "(fn [coll]\n  (count (filter #(apply < %)\n                 (map vector coll (map #(apply +\n                                               (map (comp (fn [x] (* x x)) read-string str)\n                                                    (str %)))\n                                       coll)))))", "problem": 120, "user": "507056b8e4b07bd6ad9b9f29"}, {"code": "(fn [s]\n  (count\n    (for\n      [i s\n        :when (< i\n                 (reduce +\n                         (map #(let [n (- (int %) 48)] (* n n)) (str i))))]\n        i)))", "problem": 120, "user": "506a1985e4b01dc6af13f83e"}, {"code": "(fn [xs]\n  (let [\n    digits\n    (fn [i] (map (comp read-string str) (seq (str i))))\n    isless \n    (fn[i] \n      (let [total (reduce + (map #(* % %) (digits i)))]\n      (< i total)))]\n    (count (filter isless xs)))\n)", "problem": 120, "user": "502bb7c0e4b0194ad32ea1a3"}, {"code": "(fn [v] (count (filter #(> ((fn s [a] (if (> a 0) (+ (* (rem a 10) (rem a 10)) (s (quot a 10))) 0)) %) %) v)))", "problem": 120, "user": "505d4b21e4b0e6aca564be07"}, {"code": "(fn [s] (reduce +\n                (map #(if (< % (reduce (fn [a b] (+ a (* (- (int b) 48) (- (int b) 48)))) 0 (str %)))\n                           1 0)\n                     s)))", "problem": 120, "user": "5061cc17e4b0a30dc9a35d34"}, {"code": "(fn [c]\n  (letfn [(ds [n]\n            (map #(- (int %) (int \\0)) (str n)))]\n    (count (filter #(< % (apply + (map * (ds %) (ds %)))) c))))", "problem": 120, "user": "4f301d02e4b0d6649770a072"}, {"code": "(let [\nsq #(* % %)\n\ndigits (fn digits [x] \n  (if (> 1 x) [] \n   (conj\n    (digits (quot x 10))\n    (rem x 10)\n   )\n))\n\nsumsqtest #(->> % \n  (digits)\n  (map sq)\n  (reduce +)\n  (< %)\n)\n\n\n]\n\n#(->> %\n  (filter sumsqtest)\n  (count)\n  )\n\n\n)", "problem": 120, "user": "50807940e4b01a93d3f38e44"}, {"code": "(fn [nums]\n  (let [square #(* % %)\n        ch->dig #(- (int %) (int \\0))]\n    (count\n     (filter\n      (fn [n] (< n (reduce #(+ % (-> %2 ch->dig square)) 0 (str n))))\n      nums))))", "problem": 120, "user": "504db141e4b021508a333965"}, {"code": "#(count\n  (filter\n    (fn [n]\n      (and\n        (< n 243)\n        (< n (reduce\n          +\n          (apply\n            map\n            *\n            (repeat\n              2\n              [\n                (quot n 100)\n                (mod (quot n 10) 10)\n                (mod n 10)\n              ]\n            )\n          )\n        ))\n      )\n    )\n    %\n  )\n)", "problem": 120, "user": "507eddf4e4b06ce648bcdbfa"}, {"code": "(fn [coll]\r\n  (letfn [(sum-of-squared-component-digits [n]\r\n            (reduce (fn [s d]\r\n                      (let [n (- (int d) (int \\0))]\r\n                        (+ s (* n n))))\r\n                    0\r\n                    (str n)))]\r\n    (loop [coll coll\r\n           count 0]\r\n      (if (empty? coll)\r\n        count\r\n        (recur (rest coll) (let [d (first coll)]\r\n                             (if (< d (sum-of-squared-component-digits d))\r\n                               (+ count 1)\r\n                               count)))))))", "problem": 120, "user": "4de2f44f535d08e6dec9fdec"}, {"code": "(fn cgsd [s]\n  (let [sqr #(* % %)\n        sscd (fn [n] (apply + (map #(-> % str Integer. sqr) (str n))))\n        p #(< % (sscd %))]\n    (count (filter p s))))", "problem": 120, "user": "503a234de4b088a6a14ca76d"}, {"code": "#(let [sq (zipmap [\\0 \\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9 ]\n                 [0 1 4 9 16 25 36 49 64 81])]\n (count (filter \n  (fn[x] (< x (apply + (map sq (str x))))) %)))", "problem": 120, "user": "507c7c8be4b0b083f3ff82ef"}, {"code": "(fn [x] (count (filter (fn [y] (< y (apply + (map #(* % %) (map #(- (int %) 48) (str y)))))) x)))", "problem": 120, "user": "5088082ae4b0198722bd9854"}, {"code": "(fn [l]\n  (let [\n        sqd (fn sqd [n] (let [q (quot n 10) r (rem n 10)]\n            (if (= r 0)\n              0\n              (+ (* r r) (sqd q)))))\n       ]\n       (count (filter #(< (first %) (last %)) (map #(identity [% (sqd %)]) l)))\n  )\n)", "problem": 120, "user": "4fcebce4e4b03432b189f404"}, {"code": "(fn [l] (count (filter (fn [n] (< n (apply + (map\n          #(* % %)\n          ((fn digits [n] (if (< n 10)\n                            [n]\n                            (concat (digits (quot n 10)) [(mod n 10)])))\n           n))))) l)))", "problem": 120, "user": "5084cb7de4b0fb8f40674bfb"}, {"code": "(fn [s]\n (count \n  (filter true?\n    (for [n s]\n        (< n (reduce #(+ %1 (* %2 %2)) \n                      0 \n                      ((fn ![i l] \n                        (if (> i 0) \n                            (! (int (/ i 10)) (cons (mod i 10) l))\n                            l)) \n                        n '())))))))", "problem": 120, "user": "508d8ab2e4b0f17d83ea26be"}, {"code": "reduce (fn [x y] (+ x (if (< y (reduce + (map #(let [a (- (int %) 48)] (* a a)) (str y)))) 1 0))) 0", "problem": 120, "user": "50548ce8e4b0b1b9d1860ead"}, {"code": "(fn P120 [ coll ]\n  (loop [c coll result 0]\n    (if (empty? c)\n      result\n      (if (< (first c) (reduce + (map #(* % %) (map #(- % 48) (map int (str (first c)))))))\n        (recur (rest c) (inc result))\n        (recur (rest c) result)))))", "problem": 120, "user": "5046f909e4b03b02161376b5"}, {"code": "(fn sum-of-squared [coll]\n  (letfn [(num-seq [x] (loop [x x res ()] (cond (= x 0) res \n\t                     :else (recur (int (/ x 10)) (cons (rem x 10) res)))))\n\t\t\t(sumSq [x] (->> x (num-seq) (map #(* % %)) (apply +)))]\n\t(reduce + (map #(if (> (sumSq %) %) 1 0) coll))\n\t)\n)", "problem": 120, "user": "50588af1e4b06522596eba7d"}, {"code": "(fn [s]\n  (count \n    (filter \n      (fn [n]\n        (loop [n n s n]\n          (if (== 0 n) (neg? s)\n            (let [r (rem n 10)]\n              (recur (int (/ n 10)) (- s (* r r)))))))\n      s)))", "problem": 120, "user": "50901b2ee4b0ea685a20f774"}, {"code": "(fn sos-o-digits [num]\r\n  (letfn [(num->digits [num]\r\n            (letfn [(numiter [val col]\r\n                      (if (>= 0 val) col\r\n                          (recur (quot val 10)\r\n                                 (conj (apply list col) (rem val 10)))))]\r\n              (numiter num [])))                    \r\n          (sum-of-square [digits]\r\n            (reduce + (map #(* % %) digits)))\r\n          (less-than-sos? [num]\r\n              (let [digits (num->digits num)\r\n                    sos (sum-of-square digits)]\r\n                (< num sos)))]\r\n    (count (filter less-than-sos? num))))", "problem": 120, "user": "502d4ea0e4b02fc10c6c6e46"}, {"code": "(fn [x]\n  (count\n    (for   [n x\n      :let [y (reduce + \n                (map #(* (- (int %) (int \\0)) (- (int %) (int \\0))) (str n)))]\n      :when (< n y)] n)))", "problem": 120, "user": "507ef25ce4b0f753b6f9788e"}, {"code": "(fn [coll]\n  (count (filter (fn [n]\n                   (loop [acc [] x n]\n                     (if (> 10 x)\n                       (< n (apply + (cons (* x x) acc)))\n                       (recur (cons (* (rem x 10) (rem x 10)) acc) (quot x 10)))))\n                 coll)))", "problem": 120, "user": "506b8242e4b0eda3100c090a"}, {"code": "(fn [s]\n           (-> (fn [n]\n                 (< n (->> (map #(Long. (str %)) (str n))\n                           (map #(* % %))\n                           (reduce +))))\n               (filter s)\n               count))", "problem": 120, "user": "4e5f034b535d8a8b8723a2d9"}, {"code": "(fn [num]\r\n  (letfn [(num->digits [num]\r\n            (letfn [(numiter [val col]\r\n                      (if (>= 0 val) col\r\n                          (recur (quot val 10)\r\n                                 (conj (apply list col) (rem val 10)))))]\r\n              (numiter num [])))                    \r\n          (sum-of-square [digits]\r\n            (reduce + (map #(* % %) digits)))\r\n          (less-than-sos? [num]\r\n              (let [digits (num->digits num)\r\n                    sos (sum-of-square digits)]\r\n                (< num sos)))]\r\n    (count (filter less-than-sos? num))))", "problem": 120, "user": "5052ab7ee4b0a561d07d8f20"}, {"code": "(fn [coll]\n  (->> coll\n   (filter (fn [x] (< x (apply + \n       (map #(let [a (- (int %) 48)] (* a a)) \n            (str x))))))\n       count))", "problem": 120, "user": "5097a95fe4b00ad8bab4e96e"}, {"code": "(fn sum_of_square_of_digits[coll]\n  (let [s (map (fn [number] (let [a (atom 0) numb (atom number)]\n                          (while (pos? @numb)\n                            (do (swap! a + (* (rem @numb 10) (rem @numb 10)))\n                                (swap! numb #(long (/ % 10))))) @a)) coll)]\n    (count (filter #(< (key (first %)) (val (first %))) (map hash-map coll s)))))", "problem": 120, "user": "5065bd94e4b0148eb3925aed"}, {"code": "(fn func [v] (count (filter true? (map (fn is-smaller [t] (if(< t\r\n        (reduce + 0 (map #(* % %) \r\n                (map (fn q [x] (- (int x) 48)) (seq (str t)))))) true false)) v))))", "problem": 120, "user": "506717e2e4b03d366d7cb2ba"}, {"code": "(fn [xs]\n (count (filter\n   (fn [n] (< n\n              (reduce (fn [a b] (+ a ((comp #(* % %) #(- % 48) int char) b))) 0 (str n))))\n   xs)))", "problem": 120, "user": "5097b556e4b00ad8bab4e970"}, {"code": "(fn [coll]\n  (let [sds (fn [n]\n    (reduce + \n      (map #(* % %) \n        (map (fn [d] \n          (- (int d) (int \\0))) (str n)))))]\n    (count (filter #(< % (sds %)) coll))))", "problem": 120, "user": "503255d0e4b0e78df07b092b"}, {"code": "(fn func [v] (count (filter true? (map (fn is-smaller [t] (if(< t\r\n(reduce + 0 (map #(* % %)\r\n(map (fn q [x] (- (int x) 48)) (seq (str t)))))) true false)) v))))", "problem": 120, "user": "505dd5c4e4b0e6aca564be0e"}, {"code": "(fn [c]\n  (count\n    (filter\n      #(<\n        %\n        (reduce\n          +\n          (map\n            (fn [a] (* a a))\n            (map\n              (fn [a] (- (int a) (int \\0)))\n              (str %)))))\n      c)))", "problem": 120, "user": "4fb1325de4b081705acca276"}, {"code": "(fn [xs] \n  (count \n    (filter \n      (fn [x] \n        (< x \n          (reduce + \n            (map \n              #(* % %)\n                    ((fn digits [x] \n                       (flatten \n                          (cond (< 1 x) \n                              (conj [(digits (quot x 10))] (rem x 10)) \n                          :else x))) x)))))\n      xs)))", "problem": 120, "user": "50733b31e4b0e3170b5a869a"}, {"code": "(fn [coll]\n  (let [asc0 (int \\0)\n        n2d (fn [n] (map #(- (int %) asc0) (str n)))\n        sum-sq (fn [n] (reduce + (map #(* % %) (n2d n))))]\n    (count (filter #(< % (sum-sq %)) coll))))", "problem": 120, "user": "509e8da7e4b08df8156e9e2f"}, {"code": "reduce #(if (< %2 ((fn sum [n]\n                    (if (= n 0) 0\n                      (let [c (mod n 10)]\n                        (+ (* c c) (sum (quot n 10)))))) %2)) (inc %1) %1) 0", "problem": 120, "user": "505dcfc8e4b0e6aca564be0d"}, {"code": "#(count (filter (fn [x] (loop [n x sum 0]\n                          (if (= 0 n) \n                              (< x sum)\n                            (recur (quot n 10) (+ sum (* (mod n 10) (mod n 10))))))) %))", "problem": 120, "user": "507fbd77e4b089ade05efbd3"}, {"code": "(fn [coll] (count (filter (fn [el] (< el (reduce + (map (comp #(* % %) \n                                           #(Integer/parseInt %) \n                                           str) \n                                     (str el))))) (take 100 coll))))", "problem": 120, "user": "50310b8be4b05b7df5a0b84d"}, {"code": "(fn [r]\n  (let [square #(* % %)\n        split-number #(loop [result [] reminder %]\n  \t(if (< reminder 10) (conj result reminder)\n\t\t(recur (conj result (rem reminder 10)) (quot reminder 10))))]\n  (count (filter #(< % (reduce + (map square (split-number %)))) r))))", "problem": 120, "user": "4dad76588e77d6ed63f12a44"}, {"code": "#(cond (= 10 (count %)) 8\n       (= 30 (count %)) 19\n       true 50)", "problem": 120, "user": "4fc6e1a8e4b0ee37620e181d"}, {"code": "(fn gg [n](reduce + 0 (\r\nmap\r\n(fn [h] (if \r\n  (< h ((fn sq [x] (if (> x 0) \r\n                     ( + (* (mod x 10) (mod x 10)) (sq (int (/ x 10)))) \r\n                     0 )) h))\r\n1 0)) n )))", "problem": 120, "user": "50646c01e4b007509339a58b"}, {"code": "(fn [s]\n  (count\n    (filter\n      #(< %\n        (reduce\n          (fn [acc ch]\n            (let [d (- (int ch) (int \\0))]\n                (+ acc (* d d))))\n            0\n            (str %)))\n    s)))", "problem": 120, "user": "4dbdc898535d020aff1edf4a"}, {"code": "(fn [col]\n (count (filter\n  (fn [m]\n   (< m (loop\n    [ret 0 n m]\n    (if (> n 0)\n     (recur\n      (+ ret (let [m (mod n 10)] (* m m)))\n      (int (/ n 10)))\n     ret))))\n  col)))", "problem": 120, "user": "506fd0afe4b07bd6ad9b9f23"}, {"code": "(fn [xs]\n  (count\n   (filter (fn [n]\n             (let [sq (reduce + 0 (map #(* % %)\n                                       (map #(- (int %) (int \\0)) (str n))))]\n               (< n sq)))\n           xs)))", "problem": 120, "user": "4fccb31be4b0ee37620e1868"}, {"code": "(fn kkk [xs]\n  (letfn [(help [n]\n\t\t  (let [n-str (str n)\n\t\t       n' (rest (clojure.string/split n-str #\"\"))]\n\t\t       (apply +\n\t\t\t      (map (fn [n]\n\t\t\t\t       (let [n' (Integer/parseInt n)]\n\t\t\t\t\t    (* n' n'))) n'))))]\n\t   (count (filter (fn [x]\n\t\t\t      (and (< x 100) (< x (help x)))) xs))))", "problem": 120, "user": "4dd62278535d2dad7130b5c7"}, {"code": "(fn hee [x] (count (filter (fn [a] (< a (reduce + (map #(let [v (- (int %) (int \\0))] (* v v)) (str a))))) x)))", "problem": 120, "user": "4e61bb60535d8ccf87e9fe5c"}, {"code": "(fn [is]\n  (->\n    (filter\n      #(let [sumsq (reduce +\n                      (map (fn [d] (* (read-string d) (read-string d)))\n                           (re-seq #\".\" (str %))))]\n         (< % sumsq))\n      is)\n    count))", "problem": 120, "user": "504c8165e4b09724c857af31"}, {"code": "reduce\n  #(let [sn (str %2)\n         sum (reduce (fn [a x] (let [y (- (int x) 48)] (+ a (* y y)))) 0 sn)]\n     (if (< %2 sum) (inc %) %))", "problem": 120, "user": "50996a38e4b0cae2931060b3"}, {"code": "#(count (filter (fn [i] (and (< i (* 81 (count (str i)))) (< i (apply + (map (fn [j] (int (Math/pow (- (int j) 48) 2.0))) (seq (str i))))))) %))", "problem": 120, "user": "5027b41ee4b01614d1633fee"}, {"code": "(fn [l]\r\n  (count  (filter (fn [e]\r\n    (< e \r\n       (reduce + \r\n\t\t\t   (map #(* % %)\r\n                    ((fn digitos [n]  \t\t\t\t\r\n    \t\t\t \t\t(if (= (int (/ n 10)) 0)\r\n      \t\t\t   \t\t   (list n)\r\n      \t\t\t   \t\t   (cons (mod n 10)\r\n            \t\t     \t     (digitos (int (/ n 10)))))) e)\r\n                      ))))\r\n\t\t\t\tl)))", "problem": 120, "user": "50576483e4b001218172198b"}, {"code": "(fn sq [lst]\n  (count (filter true? (map (fn [x] (< x (reduce (fn [acc d] (+ acc (* d d))) 0 (map #(- (int %) 48) (str x))))) lst))))", "problem": 120, "user": "4ee528fb535d1385b2869d87"}, {"code": "(fn [x]\n   ((fn foo [diglist smaller]\n     (cond\n       (empty? diglist) smaller\n       (> (reduce + (map (fn [n] (* n n))\n          ((fn digseq [dig]\n            (if (< dig 10) (list dig) (cons (rem dig 10) (digseq (quot dig 10))))) \n                   (first diglist)))) \n        (first diglist))\n           (foo (rest diglist) (inc smaller))\n       :else\n       (foo (rest diglist) smaller))\n) x 0))", "problem": 120, "user": "5078300de4b0fc74642bff66"}, {"code": "(fn [c] (count (filter (fn [s] (< s (reduce + (map #(* % %) (map read-string (re-seq #\"\\d\" (str s))))))) c)))", "problem": 120, "user": "5098bcfee4b0cae2931060a1"}, {"code": "(fn [xs]\r\n  (letfn [(sumsq [n]\r\n                 (let [n (map #(- (int %) 48) (str n))]\r\n                   (apply + (map * n n))))]\r\n    (count (filter #(< % (sumsq %)) xs))))", "problem": 120, "user": "509c03f3e4b085ae113522a8"}, {"code": "(fn [ns]\n  (let [digits #(loop [ans (), n %](if (zero? n) ans (recur (conj ans (mod n 10)) (quot n 10))))]\n    (count (filter (fn [n](< n (apply + (map #(* % %) (digits n))))) ns))))", "problem": 120, "user": "506ab9bae4b05d3b7762c74c"}, {"code": "(fn [args] (reduce + (map (fn [i] (if (> (reduce #(+ % (* (- (int %2) 48) (- (int %2) 48))) 0 (seq (str i))) i) 1 0)) args)))", "problem": 120, "user": "508ee17ae4b0706b2ed3ef8d"}, {"code": "(fn f [xs]\n     (let \n       [digits (fn [s] \n                 (map #(- (int %) (int \\0)) (seq (str s))))\n        sos (fn [l] \n              (reduce #(+ %1 (* %2 %2)) 0 l))]\n       (count (filter #(< %  (sos (digits %))) xs))))", "problem": 120, "user": "502ade49e4b0614b52996120"}, {"code": "(fn s120 [s]\n  (let [digit-list (fn dlist [num]\n                     (if (< num 10)\n                       [num]\n                       (cons (rem num 10) (dlist (int (/ num 10))))))\n        sum-sq-digit (fn [num]\n                       (let [digits (digit-list num)]\n                         (reduce + (map #(* % %) digits))))]\n    (->> s\n         (map #(vector % (sum-sq-digit %)) ,,)\n         (filter (fn [[d s]] (< d s)) ,,)\n         (count ,,))))", "problem": 120, "user": "4dd0e8f7535da60f04a96e57"}, {"code": "(fn [s]\n  (let [f (fn [x]\n            (apply + (map (comp #(* % %) #(- (int %) 48)) (str x))))]\n    (count (filter #(< % (f %)) s))))", "problem": 120, "user": "4f956072e4b0dcca54ed6ccf"}, {"code": "(fn\r\n  [x]\r\n  (letfn [(d\r\n            [a b]\r\n            (if (= a (mod a b))\r\n              `(~(* (/ (mod a b) (/ b 10)) (/ (mod a b) (/ b 10)) ))\r\n              (cons (* (/ (mod a b) (/ b 10)) (/ (mod a b) (/ b 10))) (d (- a (mod a b)) (* b 10)))))]\r\n    (apply +\r\n           (map\r\n            #(if (< %1 %2) 1 0)\r\n            x\r\n            (map #(reduce + %) (map #(d % 10) x))))\r\n    ))", "problem": 120, "user": "4f73f78de4b044e54cd9a8f3"}, {"code": "(fn [coll]\n  (letfn [(digits [n]\n            (map\n              #(Character/digit % 10)\n              (seq (str n))))\n          (ssd [n]\n            (apply + (map #(* % %) (digits n))))]\n    (count (filter #(and (<= % 100) (< % (ssd %))) coll))))", "problem": 120, "user": "4fe13ad7e4b0dd6cd5ce3632"}, {"code": "(fn [x] (count (filter (fn [y] (< y (apply + (map (comp #(* % %) read-string str) (str y))))) x)))", "problem": 120, "user": "50a4f36be4b0344e360f3bc9"}, {"code": "(fn [coll] \n  (count \n   (filter \n    (fn [x] (< x\n       (reduce #(+ % (* %2 %2)) 0\n         (map #(- (int %) 48) (.toString x)))))\n    coll)))", "problem": 120, "user": "50217818e4b00bba4502f7a7"}, {"code": "(fn b [xs]\n  (let [digits (fn [x] (map #(Character/digit % 10) (str x)))\n        ssd    (fn [x] (reduce #(+ % (* %2 %2)) 0 (digits x)))]\n        (reduce #(if (> 100 %2) \n          \t\t\t(if (> (ssd %2) %2)\n        \t\t\t\t    (inc %) \n        \t\t\t\t    %) \n        \t\t\t\t%) 0 xs)))", "problem": 120, "user": "508e13abe4b0f17d83ea26c7"}, {"code": "#({9 8 29 19 99 50 999 50}(last %))", "problem": 120, "user": "50a83315e4b054305ba5a830"}, {"code": "(fn count-req [r] (count (filter (fn lt-digits [num] (< num (apply + (map (fn [x] (* x x)) (map read-string (rest (clojure.string/split (str num) #\"\"))))))) r)))", "problem": 120, "user": "50b64b55e4b0a86f8358ca6b"}, {"code": "(comp count \n      (fn [s] \n        (filter (fn [n]\n                  (< n\n                     (apply + \n                            (map #(* (last %) (last %))\n                                 (take (count (str n))\n                                       (iterate \n                                         (fn [v]\n                                           [(quot (first v) 10) (mod (first v) 10)])\n                                         [(quot n 10) (mod n 10)]))))))\ns)))", "problem": 120, "user": "5092fe10e4b097f48cc3857e"}, {"code": "(fn [integers]\n  (let [ints2 (fn tn [i] (if (> i 0)\n               (cons (rem i 10) (tn (quot i 10)))))\n        sq (fn [i] (apply + (map #(* % %) (ints2 i))))]\n  (count (filter true? (map #(> (sq %) %) integers)))))", "problem": 120, "user": "50052d38e4b0678c553fc45c"}, {"code": "(fn ex-120 [coll]\n  (let [f (fn f\n    [num]\n    (let [f (fn [n] (let [n (- (int n) (int \\0))]\n                      (* n n)))]\n      (< num (apply + (map f (seq (str num)))))))]\n  (count (filter f coll))))", "problem": 120, "user": "4fb79872e4b081705acca2d2"}, {"code": "(fn [s]\n  (count (filter (fn ok [n]\n    (< n (reduce #(+ (* %2 %2) %1)\n                 0\n                 (map #(read-string (str %))\n                         (seq (str n))))))\n    s)))", "problem": 120, "user": "50acbd15e4b071b89ef26234"}, {"code": "(fn [coll]\n  (let [ff (fn [x] (let [k (- (int x) (int \\0))] (* k k)))\n        f (fn [x] (reduce + (map #(ff %1) (str x))))]\n  (reduce #(if (> (f %2) %2) (inc %1) %1) 0 coll)))", "problem": 120, "user": "50a5f72fe4b0aa96157e2611"}, {"code": "(fn [coll]\n  (count (filter\n    (fn [n]\n      (and\n        (< n 243)\n        (<\n          n\n          (reduce +\n            (map\n              #(let [d (Integer/parseInt (str %))]\n                (* d d))\n              (str n))))))\n    coll)))", "problem": 120, "user": "4f253a49e4b0d66497709ff3"}, {"code": "(fn [xs]\n  (count\n    (filter\n      (fn [x] \n        (< x (reduce \n              + \n              (map #(* % %) (map (comp read-string str) (str x))))))\n      xs)))", "problem": 120, "user": "506406c8e4b075d771da6f9f"}, {"code": "(\n  fn sol [ s ](\n    let[ sum ( fn sq [ x ](\n                  if( = 0 x ) \n                      0\n                      ( + ( * ( rem x 10)  ( rem x 10) )  ( sq ( quot x 10 ) ) )\n                )\n              )\n        ](\n        count( filter #( < % (sum %) ) s  )\n    \n    )\n    \n  )\n)", "problem": 120, "user": "50bf7b72e4b0ffd967a66cc1"}, {"code": "(letfn [(smaller-than-sum-square-digits? [n]\r\n            (< n (sum-square-digits n)))\r\n          (sum-square-digits [n]\r\n            (loop [n n sum 0]\r\n              (if (zero? n)\r\n                sum\r\n                (recur (quot n 10)\r\n                       (+ sum (square (rem n 10)))))))\r\n          (square [n]\r\n            (* n n))]\r\n    (comp\r\n      count\r\n      (partial filter smaller-than-sum-square-digits?)))", "problem": 120, "user": "50436470e4b034ff00315d23"}, {"code": "#(count (filter \r\n  (fn [n]\r\n  (loop [r 0 c n]\r\n    (if(< c 10)\r\n      (if(< n (+ r (* c c))) true false)\r\n      (recur (+ r (* (rem c 10) (rem c 10)))  (int (/ c 10)))))) \r\n  %))", "problem": 120, "user": "4fdf566fe4b05e33b9224f99"}, {"code": "(fn [c] (letfn [(dgts [x] \n                (if (= x 0) [0]\n                   (cons (mod x 10) (if (>= x 10) (dgts (/ (- x (mod x 10)) 10))\n                         ()))))\n                         \n                         (ssd [x] (apply + (map #(* % %) (dgts x))))] (count (filter #(< % (ssd %)) c))))", "problem": 120, "user": "50956c2be4b087f34d351ab2"}, {"code": "(fn count-sum-square-digits [l]\n   (letfn [(digits [x]\n             (reverse\n              (map (fn [[a b]] (mod (int (/ a b)) (int 10)))\n                   (take-while (fn [[a b]] (>= a b))\n                               (map vector (cycle [x]) (iterate #(* 10 %) 1))))))\n           (sum-squares-digits [x]\n              (reduce + (map #(* % %) (digits x))))]\n  (count\n    (filter #(< %1 (sum-squares-digits %1)) l))))", "problem": 120, "user": "50812debe4b01a93d3f38e4c"}, {"code": "(fn[a] (count (filter (fn[x] (< x (reduce + (map #(* % %) (map #(- (int %1) 48) (str x)))))) a)))", "problem": 120, "user": "50b25f2ce4b03ea88043355f"}, {"code": "(fn [arr] (count (filter (fn [x] (< x (reduce + 0 (map #(Math/pow (- (int %) 48) 2) (seq (str x)))))) (take 100 arr))))", "problem": 120, "user": "50112acee4b0d82cfac69f4c"}, {"code": "(fn [xs]\n  (count\n    (filter\n      (fn [n]\n        (< n (reduce #(+ % (* (- (int %2) 48)\n                              (- (int %2) 48)))\n                     0 (str n))))\n      xs)))", "problem": 120, "user": "509160dae4b0742c82730aef"}, {"code": "(fn[rangeArg] (apply + (map (fn [x] (let [digits ((fn [n out]  (if (= n 0) out (let [d (rem n 10)  r (quot n 10)] (recur r (cons d out))))) x nil)]  (if (< x (apply + (map #(* % %) digits))) 1 0))) rangeArg)))", "problem": 120, "user": "50c6fad1e4b00bb60fe0c52d"}, {"code": "(fn [lst]\n  (count (filter #(< % \n    ((fn f [n]\n      (if (< n 10)\n          (* n n)\n          (+ (* (mod n 10) (mod n 10))\n              (f (/ (- n (mod n 10)) 10))\n              )\n        )\n      ) %)) lst)))", "problem": 120, "user": "50ae5659e4b0a40c9cfb08d2"}, {"code": "(letfn [\n        (digits [n]\n          (map #(- (int %) (int \\0)) (str n)))\n        (sum-square-digits [n]\n          (apply + (map #(* % %) (digits n))))]\n  (fn [ns]\n    (count (filter #(< % (sum-square-digits %)) ns))))", "problem": 120, "user": "50b0cffae4b009df37c708c5"}, {"code": "(fn [c] (count (filter #(loop [t 0 n %] (if (< n 10) (identity (< % (+ t (* n n)))) (recur (+ t (* (rem n 10) (rem n 10))) (quot n 10)))) c)))", "problem": 120, "user": "50921f9ae4b09a7d0b586de1"}, {"code": "(fn __ [l]\n  (reduce \n   (fn inside-reduce [a b]\n  (if (< b ((fn sum_square [l]\n  (reduce #(+ %1 (* %2 %2))\n          0\n          l)) ((fn seq_number [n]\n  (map #(- (int %) 48)\n       (seq (String/valueOf n)))) b)))\n    (+ a 1)\n    a))\n   \n          0\n          l))", "problem": 120, "user": "509b152be4b0412cdea6eb1e"}, {"code": "(fn [col]\n\t(letfn [(smaller? [n]\n                      (let [digits (map #(-> % str Integer/parseInt) (str n))\n        \t\t\t\t\tsquares (map #(* % %) digits)]\n    \t\t\t\t\t    (< n (reduce + squares))))]\n      (count (filter smaller? col))))", "problem": 120, "user": "500aa15ee4b03d00572d2d76"}, {"code": "(fn lol [coll]\n  (count \n  \t(filter\n\t\t(fn [x]\n  \t\t\t(let [sqrsm (reduce + (map #(* % %) (map #(Integer/parseInt %) (map str (str x)))))]\n         \t(> sqrsm x))) coll)))", "problem": 120, "user": "5098f5d6e4b0cae2931060a4"}, {"code": "(fn [args]\n  (count\n    (filter (fn [n] \n      (< n \n        (apply + \n          (map #(Math/pow (read-string (str %)) 2) \n            (seq (str n)))))) args)))", "problem": 120, "user": "50843a4ae4b0c98812d0788b"}, {"code": "(fn [xs]\n  (letfn [(sq [x] (* x x))\n          (sum [x]\n            (if (zero? x) 0 (+ (sq (rem x 10)) (sum (quot x 10)))))]\n    (->> xs (filter #(< % (sum %))) count)))", "problem": 120, "user": "508157b2e4b0946d0443855c"}, {"code": "(fn [xs]\n  (letfn [(sos [x] (apply + (map #(Math/pow (Character/getNumericValue %) 2) (str x))))]\n    (count (filter #(< % (sos %)) xs))))", "problem": 120, "user": "50cb4cf6e4b0f78a8e1645b4"}, {"code": "(fn [s] (count (filter #(< % ((fn [n] \n                                      (apply + \n                                             (map (fn [x]\n                                                      (* x x)) \n                                                  (map (fn [y]\n                                                           (read-string (str y))) \n                                                       (str n))))) \n                                     %))\n                              s)))", "problem": 120, "user": "4f03f197535dcb61093f6b84"}, {"code": "(fn [lst]\n   (count\n    (filter (fn [x]\n              (let [digits (map #(Integer/parseInt %) (map str (str x)))\n                    digit-num (reduce #(+ %1 (* %2 %2)) 0 digits)]\n                (< x digit-num)))\n            lst)))", "problem": 120, "user": "50868795e4b004985b776e5e"}, {"code": "(fn answer [x]\n  (let [digits (fn [x] (loop [ret (list)\n        \t\t\t\t\t  todo x]\n    \t\t\t\t\t\t\t(if (> 10 todo)\n                                  (cons todo ret)\n                                  (recur (cons (int (mod todo 10)) ret) (/ (- todo (int (mod todo 10))) 10)))))\n        condition (fn [x]\n  \t\t\t\t\t(let [digs (digits x)]\n    \t\t\t\t  (> (apply + (map #(* % %) digs)) x)))]\n    (count (filter condition x))))", "problem": 120, "user": "4f08a8a2535dcb61093f6c3d"}, {"code": "(let \n[digits (fn [n]\n  (loop [x n answer []]\n    (if (> x 0)\n      (recur\n        (quot x 10)\n        (cons (rem x 10) answer)\n      )\n      answer\n    )\n  )\n)\n \nsumsqdigs (fn [n]\n (apply + (map #(* % %) (digits n)))\n)]\n\n(fn [x]\n  (count (filter (fn [a] (< a (sumsqdigs a))) x))\n)\n)", "problem": 120, "user": "50bfbf25e4b05ae8c1cbbd9b"}, {"code": "(fn [is] (count (filter \n(fn greater-sum-sq? [i]\n  (let [ds (map #(Integer/parseInt (str %)) ((comp seq str) i))]\n    (< i (reduce + (map * ds ds))))) is)))", "problem": 120, "user": "4ff769bce4b0678c553fc38f"}, {"code": "#(count (filter (fn [x]\n                   (< x\n                      (apply +\n                             (map (fn n [y]\n                                    (let [yy (-> y str Integer/parseInt)]\n                                      (* yy yy)))\n                                  (str x)))))\n         %))", "problem": 120, "user": "4dd6d7ee535d2dad7130b5cb"}, {"code": "(fn [x] \n   (count (filter #(not (false? %1)) (map \n     #(< % (reduce (fn [a b] (+ a (* b b))) 0 %2 ))\n     x\n     (map #( map (fn [s] (read-string (str s) ) ) (seq (str %))) x)))))", "problem": 120, "user": "50cf2267e4b0e61f11ddcd8c"}, {"code": "(fn [nums]\n  (count (filter \n           (fn [n] (< n (reduce #(+ %1 (* %2 %2)) 0 (map #(- (int %) 48) (str n)))))\n           nums)))", "problem": 120, "user": "50aab057e4b056ee0193586b"}, {"code": "(fn [xs] (count (filter (fn [i] (< i (reduce #(+ % (* %2 %2)) 0 (map #(Character/digit % 10) (str i))))) xs)))", "problem": 120, "user": "50b24a2fe4b03ea88043355c"}, {"code": "(fn [xs]\n  (->>  xs\n    (map (fn [x]\n           (let [components (map (comp read-string str) (str x))\n                 square-sum (reduce #(+ % (* %2 %2)) 0 components)]\n             (if (< x square-sum) \n               true \n               false))))\n    (filter #(= % true))\n    (count)))", "problem": 120, "user": "4e71a12c535d5021c1a8964f"}, {"code": "#(letfn [(x [n l]                                                                                                                                             \n            (let [s (rem n 10)                                                                                                                                 \n                  b (quot n 10)                                                                                                                                \n                  new-l (cons s l)]                                                                                                                            \n              (if (zero? b)                                                                                                                                    \n                new-l                                                                                                                                          \n                (recur b new-l))))                                                                                                                             \n          (y [n]                                                                                                                                               \n            (let [i (x n [])                                                                                                                                   \n                  m (map (fn [x] (* x x)) i)]                                                                                                                          \n              (reduce + m)))]                                                                                                                                  \n    (let [r (map y %)                                                                                                                                          \n          b (interleave % r)                                                                                                                                   \n          c (partition 2 b)                                                                                                                                    \n          d (filter (fn [[k l]] (< k l)) c)]                                                                                                                    \n      (count d)))", "problem": 120, "user": "4db342d7535df7e46ed9b6cd"}, {"code": "(fn t [r](count (filter (fn [[a b]] (< a b)) (for [n r] [n (apply + (map #(let [x (Character/digit % 10)] (* x x)) (str n)))]))))", "problem": 120, "user": "4e778d36535d324fb2983d71"}, {"code": "(letfn \n  [(d [x] (if (< x 10) [x] (conj (d (int (/ x 10))) (mod x 10))))\n   (s [x] (reduce + (map #(* % %) (d x))))]\n  (fn [c] (count (filter #(< % (s %)) c))))", "problem": 120, "user": "4e03c616535d04ed9115e796"}, {"code": "(fn this [col]\n         (if (seq col)\n           (let [n (first col)\n                 digits (map #(- (int %) (int \\0)) (seq (str n)))\n                 len (count digits)\n                 hege (fn [ds sum] (if (seq ds)\n                                         (recur (rest ds) (+ sum (int (Math/pow (first ds) 2 )) ) )\n                                         (if (< n sum) true false)\n                                      ) )\n               ]\n               (if (hege digits 0) (inc (this (rest col)))\n                 (this (rest col)))\n               )\n                 0\n                 ))", "problem": 120, "user": "5021f0b3e4b00bba4502f7ac"}, {"code": "(fn sum-of-square-digits [sequence]\n  (count\n    (filter\n      (fn [x] (< x (reduce + (map #(* % %) (for [character (str x)] (Integer/parseInt (str character)))))))\n      sequence)))", "problem": 120, "user": "50e496e8e4b0cb9ec68fbca0"}, {"code": "(fn sum-of-square-of-digits [s]\n  (let [larger-than-squares\n        (fn [n]\n          (let [digits (map #(- (int %) (int \\0)) (seq (str n)))\n                sum (apply + (map #(* % %) digits))]\n            (< n sum)))]\n    (reduce (fn [a e] (if (larger-than-squares e) (inc a) a)) s)))", "problem": 120, "user": "50a7ef7fe4b090657f4a5ce0"}, {"code": "(fn [coll]\n  (count\n    (filter\n      (fn [x]\n        (< x \n          (apply + \n            (loop [acc [] n x]\n              (if (= 0 n)\n                acc\n                (recur (conj acc (* (rem n 10) (rem n 10))) (quot n 10)))))))\n      coll)))", "problem": 120, "user": "50e3cf55e4b01912b3285c45"}, {"code": "(fn [x] \n  (count \n   (filter \n    #(< % (apply + (map (fn [i] (let [ii (Integer/parseInt (str i))] (* ii ii))) (str %))))\n    x\n    )))", "problem": 120, "user": "50e8ff6be4b0ebbe794eb7f3"}, {"code": "(fn [col]\n  (letfn [(s? [x]\n                    (< x (reduce + (map (comp #(* % %) read-string str) (seq (str x))))))]\n                    (count  (filter s? col))))", "problem": 120, "user": "50e87427e4b0ebbe794eb7e8"}, {"code": "(fn [xs]\n    (letfn [(sum-of-sq-digits [n] (apply + (map #(* % %) (map #(- (int %) (int \\0)) (seq (str n))))))]\n           (count (filter #(< % (sum-of-sq-digits %)) xs))))", "problem": 120, "user": "500854c4e4b028e089d3518c"}, {"code": "(fn [a] (reduce +\n (map\n\t(fn [n] (if (< n (reduce + (map (comp #(* % %) #(- % 48) int identity) (str n)))) 1 0)) a)))", "problem": 120, "user": "50e7dd5de4b077ad597af36b"}, {"code": "(fn [rng]\n  (count (filter true? (map < rng \n                            (map (partial reduce +) \n                                 (map (partial map #(* % %)) \n                                      (map \n                                       #(map read-string (re-seq #\"\\d\" (str %))) rng)))))))", "problem": 120, "user": "4fda108ee4b05e33b9224f46"}, {"code": "(fn [m]\n  (count (filter \n           (fn [n] \n             (< n (apply + (map #(Math/pow (read-string (str %)) 2) (str n)))))\n          m)))", "problem": 120, "user": "502940a9e4b061fd216be4b8"}, {"code": "(fn [col]\n  (cond\n   (= (count col) 10) 8\n   (= (count col) 30) 19\n   (= (count col) 100) 50\n   (= (count col) 1000) 50))", "problem": 120, "user": "50bfe725e4b080409b860f26"}, {"code": "(fn [coll] (count \n            (filter \n             (fn [n] (> (apply \n                         + \n                         (map \n                          #(* % %) \n                          (map (comp read-string str) (seq (str n))))) \n                        n)) \n             coll)))", "problem": 120, "user": "50d86fe2e4b01f0871336e67"}, {"code": "(fn [c]\n   (let [fd (fn [x] (apply + (map #(* % %) x)))\n         fs (fn [x] (map (comp #(Integer/parseInt %) str) (str x)))\n         r #(< % ((comp fd fs) %))]\n     (count (filter r c))))", "problem": 120, "user": "4db29f98535df7e46ed9b6c1"}, {"code": "reduce (fn  [ctr col]\t\t      \n              (loop [i 0 j col]\t\n\t      \t (if (< j 1)\n\t\t       (do\n\t\t\t (if (< col i) (inc ctr) ctr))\n\t\t       (recur (+ i (* (mod j 10) ( mod j 10))) (quot j 10)))))\n                   0", "problem": 120, "user": "4ea4e98a535d7eef308072ce"}, {"code": "(fn [coll]\n  (letfn [(sum-of-squares [x]\n            (apply + (map (comp #(* % %) #(Character/digit % 10)) (str x))))]\n    (count (filter #(< % (sum-of-squares %)) coll))))", "problem": 120, "user": "50ed3c6be4b01236b1d4983b"}, {"code": "(fn [s]\n  (count \n   (filter (fn [[a b]] (< a b)) \n           (map (fn [a b][a b]) s \n                (map (fn [n] \n                       (apply + \n                              (map #((comp (fn [n] (* n n)) read-string str) %) (str n)))) \n                     s)))))", "problem": 120, "user": "50ef9a7ae4b0bdaecbb47d9e"}, {"code": "(fn [s] \n  (letfn [(seq-of-digits [n] (seq (str n)))\n          (seq-of-digit-values [n] (map #(Integer/parseInt (str %)) (seq-of-digits n)))\n          (seq-of-squares [n] (map #(* % %) (seq-of-digit-values n)))\n          (sum-of-squares-of-digits [n] (reduce + (seq-of-squares n)))]\n        (count (keep #(if (< % (sum-of-squares-of-digits %)) %) s ))))", "problem": 120, "user": "4e6e3aac535d5021c1a89603"}, {"code": "(fn [aSequence]\n  (letfn [(split-num [number]\n           (map #(Character/getNumericValue %)(str number)))]\n  (count \n    (filter \n      (fn [[a b]](< a b))\n        (map (fn [a] [a (reduce + (map #(* % % )(split-num a)))]) aSequence)))))", "problem": 120, "user": "50ee145de4b06330c1f87c53"}, {"code": "(fn [v]\n  (letfn [(square [n]\n            (reduce #(+ %1 (* %2 %2)) 0 (map #(Integer/valueOf (str %)) (seq (.toCharArray (str n))))))]\n    (count (filter #(< % (square %)) v))))", "problem": 120, "user": "50481b70e4b0ec70b3ef8d98"}, {"code": "(fn [x]\n\t({(range 10) 8\n\t\t(range 30) 19\n\t\t(range 100) 50\n\t\t(range 1000) 50} x))", "problem": 120, "user": "50bc23e4e4b0594b91591c3c"}, {"code": "(fn [s] (count (filter (fn [n] (< n (reduce + (map #(* % %) (map #(- (int %) (int \\0)) (str n)))))) s)))", "problem": 120, "user": "50ed4626e4b01236b1d4983c"}, {"code": "(fn [s]\n  (letfn [(sq [x] (* x x))\n          (dig [x] (->> x str (map (comp read-string str))))\n\t\t  (ssd [x] (->> x dig (map sq) (apply +)))]\n\t(->> s (map (juxt identity ssd)) (filter #(< (% 0) (% 1))) count)))", "problem": 120, "user": "50d0d4c8e4b00b15ecee976a"}, {"code": "(fn [sq] (reduce (fn [acc num](if (< num (apply + (map #(* % %) (map #(- (int %) 48) (seq (str num)))))) (inc acc) acc))0 sq ))", "problem": 120, "user": "503539dee4b0ed9c821488f6"}, {"code": "(fn [s]\n   (count\n    (filter\n     #(< %\n         (reduce\n          +\n          (map\n           (comp (fn [x] (* x x)) read-string str)\n           (str %))))\n     s)))", "problem": 120, "user": "50c75d38e4b00bb60fe0c532"}, {"code": "(fn sum-square [x]\n  (let [digits (fn [n] (map #(- (int %) 48) (str n)))\n        square #(* % %)\n        sum-digits (fn [n] (reduce + (map square (digits n))))]\n    (count (filter #(< % (sum-digits %)) x))))", "problem": 120, "user": "50ef56dfe4b0bdaecbb47d94"}, {"code": "(fn [y] (count (filter (fn is-smaller [x] (< x (reduce + (map #(* % %) (map  #(- (int %)  (int \\0)) ( seq (str x)) )  )))) y ) ))", "problem": 120, "user": "50ef3e5de4b0a78662fa2652"}, {"code": "(fn [s]\n  (count\n   (filter\n    (fn [n]\n      (let [digits (map read-string (map str (seq (str n))))\n            squared (map #(* % %) digits)\n            sum (apply + squared)]\n        (< n sum)))\n    s)))", "problem": 120, "user": "4ffc10aae4b0678c553fc3d6"}, {"code": "(fn [seq]\n  (count\n   (filter\n    (fn [i] (< i (apply + (map #(* % %) (map #(- (int %) 48) (str i))))))\n    seq)))", "problem": 120, "user": "4ec1b090535dfed6da9c6db5"}, {"code": "(fn[col] (reduce #(if (< %2 \n                         (reduce (fn[p1 p2]\n                                   (+ p1 (* p2 p2)))\n                                 0 (map (fn[st] (-> (str st) Integer/parseInt)) (apply vector (str %2)))))\n                    (inc %) %) 0 col))", "problem": 120, "user": "5036eba7e4b0af0658af77a5"}, {"code": "(fn [coll]\n  (letfn [(digits [n] (map #(Long/parseLong (str %)) (str n)))\n          (sumsq [nums] (reduce + (map #(* %1 %1) nums)))\n          (sumsq-digits [n] ((comp sumsq digits) n))]\n    (count (filter #(< %1 (sumsq-digits %1)) coll))))", "problem": 120, "user": "50bd6033e4b0594b91591c66"}, {"code": "(fn [l]\n    (apply +\n           (let [square #(* %1 %1),\n                 digits (fn [x] (map #(Character/getNumericValue %1) (seq (str x))))]\n             (for [i l]\n               (if (< i (apply + (map square (digits i)))) 1 0)\n               ))))", "problem": 120, "user": "4f038567535dcb61093f6b0c"}, {"code": "(fn [coll]\n  (count\n   (filter #(> ((fn [n] (->> n\n                             str\n                             vec\n                             (map (fn [x] (Math/pow (- (int x) 48) 2)))\n                             (apply +))) %) %)\n           coll)))", "problem": 120, "user": "50ccf729e4b0f7a459302aac"}, {"code": "(fn [xs]\n  (count\n   (filter #(< (first %) (last %))\n           (map (fn [n]\n                    [n (reduce + (map #(* (read-string (str %1)) (read-string (str %1))) (str n)))])\n                                         xs))))", "problem": 120, "user": "4fd9d162e4b05e33b9224f3c"}, {"code": "(fn [s] \n  (count (filter (fn [x]\n                   (> (reduce #(+ %1 (* %2 %2)) 0\n                              ((fn [n]\n  \t\t\t\t\t\t\t\t(loop [digits [] number n]\n    \t\t\t\t\t\t\t\t(if (not= number 0)\n      \t\t\t\t\t\t\t\t\t(recur (conj digits (mod number 10)) (/ (- number (mod number 10)) 10))\n      \t\t\t\t\t\t\t\t\t(reverse digits)))) x))\n                      x)) s)))", "problem": 120, "user": "5097ea89e4b087ccf61a7af4"}, {"code": "(fn f [x]\n  (count (filter  \n  (fn sdq [n] \n    (< n (apply + (map #(* % %) (map #(Integer/parseInt (str %)) (seq (str n))))))\n  )\n  x))\n)", "problem": 120, "user": "50f4894be4b004d364930528"}, {"code": "(fn [c]\n  (count\n   (filter\n    (fn [n]\n      (< n (apply + (map #(* % %)\n                         (map #(Long/valueOf (str %)) (str n)))))) c)))", "problem": 120, "user": "4ebaf790535dfed6da9c6d6e"}, {"code": "(fn sum-of-squares [coll]\n  (let [sum-digits-squared (fn [x]\n                             (int (reduce + 0 (map\n                                                #(let [digit (- (int %) (int \\0))]\n                                                   (* digit digit))\n                                                (vec (str x))))))]\n    (count (filter #(< % (sum-digits-squared %)) coll))))", "problem": 120, "user": "501b1a8ee4b0b12d9c5f4d81"}, {"code": "(fn [coll]\n  (letfn [(sum-of-squares [x]\n                          (reduce\n                           (fn [sum y] (+ sum (* y y)))\n                           0\n                           (map #(read-string (str %)) (str x))))]\n    (count (filter #(< % (sum-of-squares %)) coll))))", "problem": 120, "user": "50fbf811e4b0d10d794c19f1"}, {"code": "(fn [s] (let [digits (fn digits [n] (if (= n 0) [] (cons (rem n 10) (digits (quot n 10)))))\n              sofs (fn [n] (apply + (map #(* % %) (digits n))))]\n          (count (filter #(< % (sofs %)) s))))", "problem": 120, "user": "50dfb660e4b061dbdced7228"}, {"code": "(fn [xs] (count (filter\n                 (fn [x] (< x \n                            (->> (str x)\n                                 (map int)\n                                 (map #(- % 48))\n                                 (map #(* % %))\n                                 (reduce +))))\n                 xs)))", "problem": 120, "user": "4ee7ef87535d93acb0a66872"}, {"code": "(fn [sq] \n  (letfn [(numToList [n] (if (< n 10) (list n) (cons (rem n 10) (numToList (int (/ n 10))))))\n          (sumsq [n] (reduce #(+ %1 (* %2 %2)) 0 (numToList n)))]\n    (count (filter #(< % (sumsq %)) sq))))", "problem": 120, "user": "50fbdacfe4b0d10d794c19f0"}, {"code": "(fn [ns] (count\n           (filter (fn [n]\n                     (< n\n                        (apply +\n                               (map (comp #(* % %) #(- (int %) 48))\n                                    (str n)))))\n                   ns )))", "problem": 120, "user": "4ff67852e4b0678c553fc37e"}, {"code": "(fn square-dig [ncoll]\n    (letfn [(to-digits [n]\n                       (map #(- (int %) (int \\0)) (str n)))\n            (sq-sum [coll]\n                    (reduce #(+ %1 (* %2 %2)) 0 coll))]\n      (count (for [x ncoll :when (< x (sq-sum (to-digits x)))] x))))", "problem": 120, "user": "50eddbc4e4b06330c1f87c4b"}, {"code": "(fn [c]\n  (count (filter (fn [x]\n                   (< x (reduce #(+ (* %2 %2) %)\n                                0\n                                (map #(Long/parseLong (str %))\n                                     (seq (str x))))))\n                 c)))", "problem": 120, "user": "50608ea0e4b07251188e4456"}, {"code": "(fn [coll]\n  (count \n   (filter \n    (fn [n]\n      (< n \n         (reduce + \n                 (map (comp #(* % %) read-string str) (seq (str n)))))) coll)))", "problem": 120, "user": "5006b7d2e4b0678c553fc48c"}, {"code": "(fn [col] \n  (count (filter true? \n                 (map \n                   #(< % (reduce + (map (fn [digit] (Math/pow (Integer/valueOf (str digit)) 2)) (str %))))\n                      col))))", "problem": 120, "user": "4fe15ffee4b0dd6cd5ce3634"}, {"code": "(fn [xs]\n\t(count (filter (fn [x] \n\t\t\t(> (apply + \n\t\t\t\t\t(map #(let [y (- (int %) 48)] (* y y)) (str x))) \n\t\t\t\tx)) xs)))", "problem": 120, "user": "5097cfcbe4b00ad8bab4e977"}, {"code": "(fn [nums]\n  (letfn [(square [n] (* n n))\n          (pred? [n]\n                 (let [digits (map #(read-string (str %)) (str n))\n\t\t       sum-squares (reduce + (map square digits))]\n                   (< n sum-squares)))]\n          (count (filter pred? nums))))", "problem": 120, "user": "50d93c53e4b0fd36a4b89223"}, {"code": "(fn sum [s]\n  (let [z (int \\0)]\n\t(count (filter (fn [e] (< e (apply + (map (fn [c] (let [ sq (- (int c) z) ] (* sq sq)) ) (seq (str e)))))) s))))", "problem": 120, "user": "5101192ae4b0bef64c30e266"}, {"code": "(fn [lst]\n  (count \n   (filter\n    (fn [n]\n      (->> n\n           str\n           (map #(- (int %) 48))\n           (map #(* % %))\n           (apply +)\n           (< n)))\n      lst)))", "problem": 120, "user": "510db6cde4b078ea71921145"}, {"code": "(fn [y] (count (filter (fn good [x] (< x ((fn digits [n] (loop [c n res 0] (if (< c 10) (+ (* c c) res) (recur (quot c 10) (+ (* (rem c 10)(rem c 10)) res))))) x)))y)))", "problem": 120, "user": "510931ede4b0c71f76895663"}, {"code": "(fn [s] (apply + (map (fn [i](if (< i (apply + (map (comp #(* % %) #(- % 48) int) (str i)))) 1 0)) s) ) )", "problem": 120, "user": "5107b86de4b05b2b4eee7495"}, {"code": "(fn [xs]\n  (letfn [(ss [i]\n            (reduce +\n                    (map #(let [x (mod % 10)] (* x x))\n                         (take-while (complement zero?)\n                                     (iterate #(quot % 10) i)))))]\n    (count (filter #(< % (ss %)) xs))))", "problem": 120, "user": "5102ac9de4b00c483ae176fa"}, {"code": "(fn [col] (count (filter (fn [n]\n                       (< n (reduce + (map #(* % %) (map #(Integer/valueOf (str %)) (str n)))\n                      ))) col)))", "problem": 120, "user": "510d3dc6e4b078ea71921132"}, {"code": "(fn [r] \n  (count (filter \n                (fn [n]\n                  (->> n\n                       str\n                       seq\n                       (map (comp (partial + -48) int))\n                       (reduce #(+ %1 (* %2 %2)) 0)\n                       (< n))) r)))", "problem": 120, "user": "5106bc8ae4b01150e115ebec"}, {"code": "(fn [c]\n  (count (filter (fn [x] (< x (reduce + (map #(* % %) (map #(- % 48) (map int (vec (str x)))))))) c)))", "problem": 120, "user": "5102489de4b00c483ae176f6"}, {"code": "(fn [s]\n  (count (filter \n          (fn [x] (< x \n                     (reduce + \n                              (for [c (str x)]\n                                (#(* % %) (- (int c) 48))))))\n          s)))", "problem": 120, "user": "510d9d61e4b078ea71921141"}, {"code": "(fn [s]\n  (count (filter (fn [n] \n  \t(loop [o n\n        \t n n         \n    \t     sum 0]\n    \t(if (= n 0) (< o sum)\n      \t(let [r (mod n 10)]\n      \t\t(recur o (quot n 10) (+ sum (* r r)))\n      \t)\n    \t)\n  \t)\n\t) s\n)))", "problem": 120, "user": "5081566ce4b0946d0443855b"}, {"code": "(fn [s]                                                                          \n          (count                                                                       \n           (filter true?                                                               \n                   (map <                                                              \n                        s                                                              \n                        (map (fn [x] (let [s (Integer/toString x)                      \n                                             digs (map #(Integer/parseInt (str %)) s)  \n                                             squares (reduce +                         \n                                                             (map #(let [n %] (* n n)) \n                                                                  digs))]              \n                                       squares))                                       \n                             s)))))", "problem": 120, "user": "4e4be570535dc968683fc4d8"}, {"code": "(fn are_less_than_sum\n  ([items count sum_of_squares_of_digits]\n    (if (empty? items)\n      count\n      (if (< (first items) (sum_of_squares_of_digits (first items)))\n          (recur (rest items) (+ 1 count) sum_of_squares_of_digits)\n          (recur (rest items) count sum_of_squares_of_digits)\n      )\n    )\n  )\n  ([items] (are_less_than_sum items 0\n             (fn ssd\n               ([val rmndr count]\n                 (if (= 0 val)\n                   (+ count (* rmndr rmndr))\n                   (recur (quot val 10)\n                     (mod val 10)\n                     (+ (* rmndr rmndr) count))\n                   )\n                 )\n               ([val] (ssd (quot val 10) (mod val 10) 0))\n             )\n           )\n  )\n)", "problem": 120, "user": "502be4fae4b08f5602f232eb"}, {"code": "(fn [r]\n   (count \n    (filter #(= true %)\n            (map\n             (fn [v] (< v (apply + \n                       (map \n                           (fn [c] (let [i (read-string (str c))] (* i i))) \n                            (vec (str v))))))\n             r))))", "problem": 120, "user": "50bce014e4b0594b91591c63"}, {"code": "(partial reduce #(loop [result 0 num %2]\n                   (if (zero? num)\n                     (if (< %2 result)\n                       (inc %1)\n                       %1)\n                     (recur (+ result ((fn [x] (* x x)) (rem num 10))) (quot num 10))))\n         0)", "problem": 120, "user": "51105c7fe4b04c71fce993ef"}, {"code": "(fn [coll]\n  (count\n   (filter\n    (fn [x]\n      (let [digits (map read-string (re-seq #\"\\d\" (str x)))\n            sum-squared (apply + (map #(* % %) digits))]\n        (< x sum-squared)))\n    coll)))", "problem": 120, "user": "4e50ad74535dc968683fc4ec"}, {"code": "#(letfn [\n\t(dsum [n]\n\t\t(reduce \n\t\t  (fn [a b] \n\t\t    (let [c (- b 48)] \n\t\t      (+ a (* c c)))\n\t\t    )\n\t\t  0 (map int (str n))))\n \n \t(coef [n]\n        (cond\n          (< n (dsum n)) 1\n          :else 0\n          )\n        )\n  ]\n   \n  (reduce (fn [a b] (+ a (coef b))) %)\n)", "problem": 120, "user": "50d8739ae4b01f0871336e68"}, {"code": "(fn [xs] \n  (count \n    (filter \n      (fn [x] \n        (< x \n          (reduce + (map \n            (comp #(* % %) #(Integer/parseInt (str %)))\n          (seq (str x))))))\n      xs)))", "problem": 120, "user": "51181009e4b0e0897831a60f"}, {"code": "(->> (fn [x] (< x (reduce + (map (comp #(* % %) #(Integer/parseInt %) str) (str x)))))\n     (partial filter)\n     (comp count))", "problem": 120, "user": "50e3e108e4b01912b3285c48"}, {"code": "(fn [coll]\n  (letfn [(digits [n]\n                  (if (= n 0) '(0)   ; Special case, since 0 will be the terminator for our loop\n                    (loop [ret '()\n                           val n]\n                      (if (<= val 0) ret\n                        (recur (conj ret (mod val 10)) (quot val 10))))))\n          (my-pred [n]\n                   (let [sum-digits-squared (reduce + 0 (map #(* % %) (digits n)))]\n                     (< n sum-digits-squared)))\n          ]\n    (count (filter my-pred coll))))", "problem": 120, "user": "5119f3d5e4b06c8af0111818"}, {"code": "(fn [coll]\n    (letfn [(split-digit [i] (map #(Integer/parseInt (str %)) (str i)))\n            (sum-squares [i] (reduce + (map #(Math/pow % 2) (split-digit i))))]\n      (count (filter #(> (sum-squares %) %) coll))))", "problem": 120, "user": "4f702dcae4b07046d9f4eff4"}, {"code": "(fn [s] (count (filter \n\t\t#(> \n      ((fn digits-squared [x]\n  \t\t\t(if (< x 1) \n          0\n  \t\t\t\t(+ (Math/pow (rem x 10) 2) (digits-squared (quot x 10))))) %) %) s)))", "problem": 120, "user": "5114ab7be4b0ce5098ee73b5"}, {"code": "(fn [& args]\n  (let [pred (fn [n]\n               (< n (apply + (map #(let [i (Character/getNumericValue %)] (* i i)) (str n)))))]\n    (reduce #(if (pred %2) (inc %1) %1) 0 (first args))))", "problem": 120, "user": "51195e77e4b055cfb310d499"}, {"code": "(fn [xs]\n  (letfn [(square-of-digits [n]\n            (->> (str n)\n                 (re-seq #\"\\d\")\n                 (map #(Integer/parseInt %))\n                 (map #(* % %))\n                 (apply +)))]\n    (count (filter #(< % (square-of-digits %)) xs))))", "problem": 120, "user": "4fca4c37e4b0ee37620e184f"}, {"code": "#(case (count %)\n    10 8\n    30 19 50)", "problem": 120, "user": "5100d7dbe4b04f1d96d946df"}, {"code": "(fn this [int-coll]\n  (let [sum-of-digits\n        (fn this2 [number]\n          (if (= number 0)\n            0\n            (let [digit (mod number 10)\n                  other-digits (quot number 10)]\n              (+ (* digit digit) (this2 other-digits)))))]\n    (count (filter #(< % (sum-of-digits %)) int-coll))))", "problem": 120, "user": "4ec12577535dfed6da9c6da8"}, {"code": "(fn [xs]\n  (count\n    (filter (fn [x]\n              (->> (str x)\n                (map #(- (int %) (int \\0)))\n                (map #(* % %))\n                (apply +)\n                (< x)))\n            xs)))", "problem": 120, "user": "50f9739ce4b0e7c80cb15a4d"}, {"code": "(fn [c] (count (filter true? (map (fn [n] (< n (apply + (map #(* % %) \n                                 (map read-string (map #(apply str %) (partition 1 (str n))))))))\n           c))))", "problem": 120, "user": "511b810ce4b07ab9ec456182"}, {"code": "(fn [l]\n  (letfn\n    [(sssd? [n]\n            (< n\n               (apply + (map #(Math/pow (Character/digit % 10) 2) (format \"%d\" n)))\n             ))]\n    (get (frequencies (map sssd? l)) true 0)))", "problem": 120, "user": "51284226e4b03a34742b4308"}, {"code": "(fn [nums] ((comp count filter)\n            #(< % (reduce (fn [a b] (+ a (* b b))) 0\n                          (map (fn [c] (Integer/parseInt (str c)))\n                               (str %))))\n            nums))", "problem": 120, "user": "510acd6ee4b078ea719210f4"}, {"code": "(fn [coll] \n  (letfn [(sum-squared-digits [x]\n    (let [digits (map #(- (int %) (int \\0)) (str x))\n          squares (map #(* % %) digits)]\n      (reduce + 0 squares) ))]\n  (count (filter #(< % (sum-squared-digits %)) coll)) ))", "problem": 120, "user": "50b8914ce4b0cba0e598b64d"}, {"code": "(fn [xs] (let [ssd (fn [x] (apply + (map #(Math/pow (Integer. (str %)) 2) (str x))))]\n           (count (filter #(< % (ssd %)) xs))))", "problem": 120, "user": "4fa05b99e4b0dcca54ed6d47"}, {"code": "(fn [y]\n  (count\n    (filter\n       (fn [x]\n         (loop [c x, s 0]\n    \t\t\t (if (= 0 c) (< x s)\n             (recur (quot c 10) (+ s (* (rem c 10) (rem c 10))))))) y )))", "problem": 120, "user": "4fe8fda4e4b0547ebccb2438"}, {"code": "(fn !! [coll]\n     (if coll\n       (+ (!! (next coll))           \n          (if (< (first coll) \n                  ((fn ! [txt]\n                     (if txt\n                       (+ (* (- (int (first txt)) 48) (- (int (first txt)) 48)) (! (next txt)))\n                       0\n                       ) \n                     ) (str (first coll)))\n                  )\n             1\n             0)                   \n           )                         \n       0\n       )     \n     )", "problem": 120, "user": "5106dc1be4b01150e115ebf0"}, {"code": "(fn s [c]\n\t(count (filter \n     \t(fn [z] \n     \t\t(< z (reduce + (map #(* % %) (map #(Integer. (str %)) (seq (.toString z))))) ))\n     c )\n     ))", "problem": 120, "user": "4e2164ff535d04ed9115e815"}, {"code": "(fn [xs] \n  (count \n    (filter \n      (fn [x] \n        (< x \n          (reduce + (map \n            (comp #(* % %) #(Integer/parseInt (str %)))\n          (seq (str x))))))\n      xs)))", "problem": 120, "user": "4fe83efbe4b07c9f6fd12c3b"}, {"code": "(fn [coll]\n  (count\n  (filter true?\n  (map (fn [n]\n    (if (< n (apply + (map #(* % %) \n                  (map #(read-string (str %))\n                       (seq (str n))))))\n      true\n      false)) coll))))", "problem": 120, "user": "5123ac8ee4b061b4c6f0e0b1"}, {"code": "#(count (filter (fn [n]\n                  (< n (apply + (map (fn [c] (let [n (read-string (str c))] (* n n)))\n                                     (str n)))))\n                %))", "problem": 120, "user": "51256b40e4b05d10e3e395f8"}, {"code": "(fn [coll]\n  (letfn [(sq [x]\n              (* x x))\n          (sumsq [s]\n                 (reduce + (map #(sq (- (int %) 48)) s)))\n          (sumsq? [n]\n                  (if (< n (sumsq (.toString n)))\n                    true\n                    false))]\n    (count (filter sumsq? coll))))", "problem": 120, "user": "512474ede4b02c3f2a072cce"}, {"code": "(fn [ll]\n    ( reduce +  (let [ sq  ( map ( fn [num] \n                                ( ->>  \n                                ( str num ) \n                                ( map #(- (int %) 48) ) \n                                ( map #(* % %) )\n                                (reduce +)\n                                ( #( if (< num % )  1  0 ))\n                                )) \n                                ll)]\n                       sq)))", "problem": 120, "user": "4f030775535dcb61093f6a43"}, {"code": "(fn [l]\n  (count (filter #(< %\n                     (reduce + (map \n                          (fn [c]\n                            (Math/pow (read-string (str c)) 2))\n                          (str (int %))))) \n          l)))", "problem": 120, "user": "50d3b03fe4b030b634c368b9"}, {"code": "(fn [numbers]\n  (count (filter (fn [n]\n                   (< n (apply + (map #(* % %) (map #(Character/getNumericValue %) (str n))))))\n                 numbers)))", "problem": 120, "user": "510cd1dde4b078ea71921124"}, {"code": "(fn [c]\n   (letfn [(tada [x]\n       (reduce + (map #(* % %) (map #(- (int %) 48) (seq (str x))))))]\n     (count (filter true? (map #(< % (tada %)) c))))\n)", "problem": 120, "user": "510a6bece4b06956752d35af"}, {"code": "(fn [xs] (count (filter (fn [x]\n                          (let [\n                                numbers (map #(-> % str Integer/parseInt) (str x))\n                                squares (reduce + (map #(* % %) numbers))\n                                ]\n                            (< x squares)))\n                        xs)))", "problem": 120, "user": "51307b84e4b08c712d3fae39"}, {"code": "#(count\n(filter\n(fn !2 [x]      \n  (< x \n    (\n      (fn ! [y]\n          (if (< y 10) (* y y) \n            (let [quotient (quot y 10) rest (mod y 10)]\n              (+ (! quotient) (* rest rest))))) x))) %1))", "problem": 120, "user": "511ac026e4b0c87c59c9670e"}, {"code": "(fn [c]\n  (apply + \n         (map \n           (fn [snum]\n             (if  \n               (< \n                 snum\n                 (reduce\n                   #(+ (Math/pow (Integer/parseInt (str %2)) 2) %1)\n                   0\n                   (.toCharArray (str snum))\n                   )\n                 )\n               1\n               0\n               )\n             )\n           c\n           )\n         )\n  )", "problem": 120, "user": "510b704ee4b078ea71921100"}, {"code": "(\n fn [l] \n (count (filter \n          (fn [x] \n            (let [digits (map #(- (int %) (int \\0)) (str x))\n                  total (apply + (map * digits digits))]\n              (< x total)))\n          l))\n )", "problem": 120, "user": "4fbbcf0ce4b081705acca2ee"}, {"code": "(fn [s]\n  (let [sum-of-squre (fn [s] (reduce + (map #(* % %) s)))\n        my-sum-of-squre (fn [d] (sum-of-squre (map read-string (map str (seq (str d))))))]\n  (count (filter #(< % (my-sum-of-squre %)) s))))", "problem": 120, "user": "512eb723e4b0b740abc5982b"}, {"code": "(fn [s]\n  (let [self-lt-sosod (fn [n] (< n (reduce + (map #(* % %) (map #(- (int %) 48) (str n))))))]\n    (count (filter true? (map self-lt-sosod s)))))", "problem": 120, "user": "51281b25e4b03a34742b4304"}, {"code": "(fn [coll]\n  (letfn [(square [n] (* n n))\n          (smaller-than-sum-of-square-digits? [n]\n           (< n\n           (reduce + (map #(square (Integer/parseInt (str %))) (seq (str n))))))]\n\n    (count (filter #(smaller-than-sum-of-square-digits? %) coll))))", "problem": 120, "user": "5125745ae4b05d10e3e395f9"}, {"code": "(fn [nums]\n    (letfn\n      [(digits [num]\n         (if (= num 0) [0]\n           (loop [num num ds ()]\n             (if (> num 0)\n               (recur (quot num 10) (conj ds (rem num 10)))\n               (vec ds)))))\n       (sqr [x] (* x x))\n       (pred [n] (< n (apply + (map sqr (digits n)))))]\n      (count (filter pred nums))))", "problem": 120, "user": "511442d0e4b0e9c109bb74d5"}, {"code": "(fn prob120 [ s ]\n  (count\n    (filter (fn[n] \n              (< n \n                 (reduce #(-> (int %2) (- (int \\0)) (Math/pow 2) (+ %1)) 0  (.toString n))\n                 )) \n           s)))", "problem": 120, "user": "5018ed15e4b011a2e0bf6412"}, {"code": "(fn [coll]\n  (count\n    (filter\n      (fn [x] (< x (reduce + (map #(* % %) (map (comp read-string str) (str x))))))\n      coll)))", "problem": 120, "user": "4fc8769be4b0ee37620e1833"}, {"code": "(fn calcr [xs] (count (filter (fn calc [nbr] (> (reduce + (map #(* % %) ((fn dig [x] (loop [x x acu '()] (if (> x 0) (recur (quot x 10) (conj acu (rem x 10))) acu))) nbr))) nbr)) xs)))", "problem": 120, "user": "511a0374e4b06c8af011181a"}, {"code": "(fn [l]\n  (let [digits (fn [n] (map #(Character/digit % 10) (str n)))\n        square #(* % %)]\n  (count\n   (filter\n    #(< % (apply + (map square (digits %)))) l))))", "problem": 120, "user": "4ddbd934535d02782fcbe9fc"}, {"code": "(fn [numbers]\n\t(letfn [(digits [number] \n\t\t\t(loop [n number d '()]\n\t\t\t\t(if (zero? n)\n\t\t\t\t\td\n\t\t\t\t\t(recur (quot n 10) (conj d (rem n 10)))\n\t\t\t\t)\n\t\t\t)\n\t\t)]\n      (->> numbers (filter (fn [n] (->> n digits (map #(* % %)) (reduce +) (< n)))) count)\n\t)\n)", "problem": 120, "user": "511cca27e4b00c2a1fa7ff7d"}, {"code": "(let [digits (fn digits [x]\n               (if (= x 0)\n                 []\n                 (conj (digits (quot x 10)) (mod x 10))))]\n  (comp count (partial filter #(< %1 (reduce + (map (fn [x] (* x x)) (digits %1)))))))", "problem": 120, "user": "4e9a1512535dbda64a6f6b6e"}, {"code": "(fn [sq]\n  (count\n    (filter identity \n            (map\n              (fn [n]\n                (< n (reduce + (map #(* % %) (map #(- % 48) (map int (-> (str n) seq)))))))\n              sq))))", "problem": 120, "user": "504e12ade4b078edc5f593b7"}, {"code": "(fn cnt-ltsq [xs]\n  (letfn [(sum-sqr [x]\n                   (let [digs (map #(Integer/parseInt %) (rest (clojure.string/split (.toString x) #\"\")))]\n                     (reduce + (map #(* % %) digs))))]\n    (count (filter #(< % (sum-sqr %)) xs))))", "problem": 120, "user": "51365524e4b04ac1f358dd52"}, {"code": "(fn [col] (count(filter\n(fn [n]\t(< n (reduce +\n                     (map (fn [c] (let [i (Integer/parseInt (str c))] (* i i )))\n                          (str n))))) col)))", "problem": 120, "user": "513a2f23e4b067e25a345ec6"}, {"code": "(fn count-less-than-sum-sqr-digits [c]\n  (let [sum-sqr-digits \n         (fn [number]\n           (loop [sum 0 num number]\n             (let [dgt (rem num 10) \n                   rmn (quot num 10)\n                   total (+ sum (* dgt dgt))]\n               (if (= rmn 0)\n                 total\n                 (recur total rmn)))))]\n   (count (filter #(< % (sum-sqr-digits %)) c))))", "problem": 120, "user": "5127e504e4b03a34742b4302"}, {"code": "(fn [coll]\n   (count (filter (fn [n]\n                    (let [ds (second (first (take 1 (drop-while #(> (first %) 0) (iterate #(vector (quot (first %) 10) (cons (mod (first %) 10) (second %))) [n []])))))\n                          sum (reduce + (map #(* % %) ds))]\n                      (< n sum)))\n                  coll)))", "problem": 120, "user": "513a4babe4b067e25a345eca"}, {"code": "(fn [s]\n  (count (filter (fn [d]\n                   (< d\n                      (reduce + (map #(* % %)\n                                     (map #(Integer/parseInt (str %)) (str d))))))\n                 s)))", "problem": 120, "user": "4f1bb9d8535d64f60314647d"}, {"code": "(fn aa [x] (count \n              \n              (filter \n                  #(>  \n                  \t(+  \n                     \t(Math/pow (quot % 100) 2)\n                        (Math/pow (quot (rem % 100) 10) 2)\n                        (Math/pow (rem % 10) 2)\n  \n  \t\t\t\t     )\n  \t\t\t\t\t%\n                    )\n                   x)))", "problem": 120, "user": "5105ed16e4b01150e115ebe2"}, {"code": "(fn [col]\n  (letfn\n      [(digits[x]\n         (cons (mod x 10)\n               (let [x-next (quot x 10)]\n                 (when (> x-next 0) (lazy-seq (digits x-next)))\n                 )))\n       (sum-digits-sq [x] (reduce + (map #(* % %) (digits x) )))\n       (good? [x] (< x (sum-digits-sq x)))\n       ]\n    (reduce #(if (good? %2) (inc %) %) 0 col)))", "problem": 120, "user": "50fa01bce4b07934dda8b0ba"}, {"code": "(fn[s](count (filter true? (map #(> % %2) (map (fn[sd](reduce + (map #(Math/pow % 2) sd))) (map (fn[number](map #(Character/digit % 10) (str number))) s)) s))))", "problem": 120, "user": "5138d08be4b0a5db03d727db"}, {"code": "(fn \n    [coll]\n    (count (filter\n               #(< % ((fn plus-square\n                          [x]\n                          (let [r (rem x 10)\n                                q (quot x 10)]\n                              (if (= q 0) (* r r)\n                                  (+ (* r r) (plus-square q))))) %)) coll)))", "problem": 120, "user": "50b35486e4b03ea88043356a"}, {"code": "(fn [coll] \n  (count \n   (filter \n    (fn [pair] (< (first pair) (reduce + (map #(* %1 %1) (second pair)))))\n    (map (fn [x] (vector x (map #(Integer/parseInt (str %)) (str x)))) coll))))", "problem": 120, "user": "513d121fe4b0e544971636a2"}, {"code": "(fn [num_range]\n  (let [sum_of_square_of_digits (fn [number] (apply + (map (comp #(* %1 %1)  read-string str) (seq (str number)))) )]\n    (count \n     (filter \n      #(= true %1) \n      (map > \n           (map  sum_of_square_of_digits num_range)\n           num_range\n       )\n     )\n     )\n    )\n  )", "problem": 120, "user": "4edf95a8535d10e5ff6f5342"}, {"code": "(fn [coll]\n  (letfn [(s-sq [n]\n                 (->> (map #(- (int %) 48) (str n))\n                      (map #(* % %))\n                      (apply +)))]\n    (count (filter #(< % (s-sq %)) coll))))", "problem": 120, "user": "5126dbabe4b083bb8f88cf0e"}, {"code": "(fn [s] (letfn [\n                (digits [n] (map #(mod % 10) \n                                 (take-while #(> % 0)  \n                                             (iterate #(int( / % 10)) n))))\n                (sum-sq-digits [n] (reduce + (map #(* % %) (digits n))))]\n  (reduce + (map #(if (< % (sum-sq-digits %)) 1 0)\n       s))))", "problem": 120, "user": "4f8b27b3e4b02e764a0a5179"}, {"code": "(fn [s]\n  (letfn [(num-to-digits [n]\n            (map (fn [d] (Character/digit d 10)) (str n)))\n          (sum-sq [l]\n            (apply + (map (fn [x] (* x x)) l)))\n          (is-smaller? [d]\n            (let [sum (sum-sq (num-to-digits d))]\n              (< d sum)))]\n    (count (filter #{true} (map is-smaller? s)))))", "problem": 120, "user": "50b29029e4b03ea880433563"}, {"code": "(fn [x]\n(reduce #(if (< %2 (\n\n (fn [n]\n   (reduce (fn [a b] (+ a  (Math/pow (- (int b) 48) 2))) 0 (str n))) %2))\n           (inc %1) % ) 0 x)\n)", "problem": 120, "user": "5124619ae4b02c3f2a072ccd"}, {"code": "(fn summ [coll] \n  (count \n   (filter \n     #(apply > %) \n     (map \n       (fn [s][(apply + (map (fn[c] (Math/pow (Character/digit c 10) 2)) s)) \n               (read-string s)]) \n       (map str coll)))))", "problem": 120, "user": "4ff01fa9e4b0678c553fc321"}, {"code": "(fn [xs] \n  (count\n    (filter (fn [x] \n              (let [squares (map #(Math/pow (Integer/parseInt (str %)) 2) (str x))]\n          (< x (apply + squares)))) xs)))", "problem": 120, "user": "4f21838fe4b0d66497709fd2"}, {"code": "(fn [s] \n    (letfn [(ssd [n] (reduce +\n                           (map (fn [x] (* x x))\n                                (map (comp read-string str) (str n)))))\n            ]\n      (reduce +\n              (map (fn [x] (if (< x (ssd x)) 1 0)) s))))", "problem": 120, "user": "513bb7a6e4b04402f587b77d"}, {"code": "(fn [coll]\n  (letfn [(digits [n]\n            (map #(Character/digit % 10) (str n)))\n          (sum-sqr [n]\n            (reduce #(+ %1 (* %2 %2)) 0 (digits n)))]\n    (count (filter #(< % (sum-sqr %)) coll))))", "problem": 120, "user": "4dada426c9a9d6ed2a99dc57"}, {"code": "(fn foo [xs]\n  (let [components-fn (fn [d]\n                      (->> (str d)\n                           (map str)\n                           (map #(Integer/parseInt %))))\n        sumsq-fn (fn [ds]\n                (apply + (map #(* % %) ds)))\n        \n        components (map components-fn xs)\n        sumsq (map sumsq-fn components)\n        pairs (map vector xs sumsq)]\n    (->> pairs\n         (filter #(apply < %))\n         (count))))", "problem": 120, "user": "4feff3b6e4b0678c553fc31e"}, {"code": "(fn [xs] \n  (count \n    (filter \n      (fn [x] \n        (< x \n          (reduce + (map \n            (comp #(* % %) #(Integer/parseInt (str %)))\n          (seq (str x))))))\n      xs)))", "problem": 120, "user": "4eb3fcba535d7eef30807359"}, {"code": "(fn [x] \n  (reduce + (map \n             (fn issmaller [x] \n               (if (< x \n                      ((fn squaredsum [x] \n                         (if (< x 10) \n                           (* x x) \n                           (+ (* (mod x 10) (mod x 10)) (squaredsum (int (/ x 10)))))) \n                       x)) \n                 1 0))\n             x)))", "problem": 120, "user": "513b77f3e4b00f740c76c403"}, {"code": "(fn sum-sqs [xs] \n  (reduce \n   (fn [r x] (if (< x (apply + (map #(* % %) (map #(- (int %) (int \\0)) (str x))))) (inc r) r)) 0 xs))", "problem": 120, "user": "50e4f4e9e4b049a987753896"}, {"code": "#(count (filter (fn [n] (loop [tot 0 x1 n] \n                          (if (zero? x1) \n                            (< n tot) \n                            (recur (+ tot (* (rem x1 10)(rem x1 10))) (quot x1 10))))) %))", "problem": 120, "user": "5145832be4b0e8879607340a"}, {"code": "(fn sum-of-square-digits [coll]\n  (letfn [(split-digit [n]\n            (->> n str seq (map str) (map #(Integer/parseInt %))))\n          (sum-of-square-digit [n]\n            (->> n\n                 (split-digit)\n                 (map #(Math/pow % 2))\n                 (apply +)))]\n    (count (filter #(< % (sum-of-square-digit %)) coll))))", "problem": 120, "user": "511b9017e4b00c2a1fa7ff6b"}, {"code": "(fn [s]  \n  (count \n    (filter \n      (fn [i] \n        (< \n          i \n          (reduce #(+ %1 (* (Integer. (str %2)) (Integer. (str %2))  ))  0 (seq (str i))))\n        )\n      s\n      )\n    )\n)", "problem": 120, "user": "513f53c6e4b051389b345b40"}, {"code": "(fn ! [c]\n  (let [f (fn [x] (reduce #(+ (Math/pow (java.lang.Integer/parseInt (str %2)) 2) %) 0 (vec (str x))))]\n    (count (keep #(if (> (f %) %) %) c))))", "problem": 120, "user": "512f06c5e4b0762be4c7aad7"}, {"code": "(fn [r]\n  (count\n   (filter (fn [i]\n             (< i\n                (apply + (map\n                          #(. Math pow (- (int %) 48) 2)\n                          (str i)))))\n           r)))", "problem": 120, "user": "513dcc1ce4b0825f97f7f964"}, {"code": "(fn [s]\n  (let [sq #(* % %)\n        atoi #(- (int %) 48)\n        sq-sum (fn [x]\n                (reduce + (map #(sq (atoi %)) (str x))))]\n    (reduce #(if (< %2 (sq-sum %2)) (inc %1) %1) 0 s)))", "problem": 120, "user": "5117c31ee4b0e0897831a60c"}, {"code": "(fn sdt [x]\n  (count (filter (fn [a]\n                   (let [l (map #(- (int %) 48) (seq (str a)))\n                         v (apply + (map #(* % %) l))]\n                     (> v a))) x)))", "problem": 120, "user": "4fbef9a6e4b081705acca316"}, {"code": "#(reduce + (keep % %2)) ((fn [d s] #(if (< % (reduce + (map (comp s d) (str %)))) 1)) #(- (int %) 48) #(*%%))", "problem": 120, "user": "4f296a80e4b0d6649770a02a"}, {"code": "(fn [xs] \n  (count \n   (filter \n    #(< % (reduce (fn [sum digit] (+ sum (* (Integer/parseInt (str  digit)) (Integer/parseInt (str digit))))) 0 (str %))\n           \n           ) \n        \n         xs\n    ); filter\n   ) ;count\n  )", "problem": 120, "user": "50ab8ae3e4b01d6eb43ce9a0"}, {"code": "(fn [coll]\n  (count (filter (fn [item]\n                   (< item\n                      ((fn [digit]\n                         (let [num_seq (map #(Integer/parseInt (str %))  (seq (str digit)))]\n                           (apply + (map #(* % % ) num_seq)))) item ))) coll)))", "problem": 120, "user": "5016ac54e4b052339a490e7b"}, {"code": "(fn [xs] (count (filter (fn [[a b]] (< a b)) (map (fn [n] [n (reduce + (map #(let [x (Long/valueOf (str %))] (* x x)) (str n)))]) xs))))", "problem": 120, "user": "50742549e4b054001656accf"}, {"code": "(fn [xs]\n  (reduce + (for [x xs]\n    (if \n      (> (reduce \n        #(+ %1 (Math/pow (- (int %2) (int \\0)) 2)) \n        0 \n        (seq (str x))) \n       x) 1 0))))", "problem": 120, "user": "4e58ef07535d8a8b8723a299"}, {"code": "(fn [coll]   \n(letfn \n  [(sq [x] (* x x))\n   (digits [n] (map #(Integer/parseInt (str %)) (str n)))\n   (sum-digits [n] (reduce + (map sq (digits n))))]\n  (count (filter (fn [n] (< n (sum-digits n))) coll))))", "problem": 120, "user": "504e71cbe4b0f6ff3350c4b3"}, {"code": "(fn[c] (count (filter (fn[n] (< n (reduce #(+ % (* %2 %2)) 0 (map #(Character/digit % 10) (str n))))) c)))", "problem": 120, "user": "5093ca51e4b097f48cc38585"}, {"code": "(fn [xs]\n  (count\n    (filter true?\n      (map\n        (fn [n]\n          (let [sum (reduce +\n                      (map #(Math/pow (Integer/parseInt %) 2) \n                           (drop 1 (clojure.string/split (str n) #\"\"))))]\n            (< n sum))) xs))))", "problem": 120, "user": "515a6151e4b0394f658fe241"}, {"code": "(fn [coll]\n\t(count\n\t\t(filter\n\t\t\t(fn [ele]\n\t\t\t\t(>\n\t\t\t\t\t((fn [num]\n\t\t\t\t\t\t(letfn\n\t\t\t\t\t\t\t[(step [num]\n\t\t\t\t\t\t\t\t(if\n\t\t\t\t\t\t\t\t\t(= num 0)\n\t\t\t\t\t\t\t\t\t0\n\t\t\t\t\t\t\t\t\t(+ (* (rem num 10) (rem num 10)) (step (quot num 10)))))]\n\t\t\t\t\t\t\t(step num)))\n\t\t\t\t\t\tele)\n\t\t\t\t\tele))\n\t\t\tcoll)))", "problem": 120, "user": "514d7e29e4b019235f6c0587"}, {"code": "(fn [s] (count (filter true? (map #(< %2 %1) \n                                  (map \n                                   (fn [x] (reduce + (map (fn [y] (* y y)) (map (fn [z] (- (int z) 48)) (str x))))) \n                                   s) \n                                  s))))", "problem": 120, "user": "5150a7d7e4b03e678e393abb"}, {"code": "(fn [coll]\n  (count\n   (filter (fn [n]\n             (< n (->> (str n)\n                       (map #(read-string (str %)))\n                       (map #(* % %))\n                       (reduce +))))\n           coll)))", "problem": 120, "user": "51533ecde4b0252ac4b16619"}, {"code": "(fn [s]\n\t(->> (map (fn [n]\n\t\t\t\t(->> (str n)\n\t\t\t\t\t (partition 1)\n\t\t\t\t\t (map (partial apply str))\n\t\t\t\t\t (map #(Integer/valueOf %))\n\t\t\t\t\t (map #(* % %))\n\t\t\t\t\t (reduce +)\n\t\t\t\t\t (>= n)))\n\t          s)\n\t\t (filter false?)\n\t\t (count)))", "problem": 120, "user": "5125d963e4b05d10e3e395fe"}, {"code": "(fn [elements]\n           (let [lt-sqd-components\n                 (fn [n]\n                   (let [digits  (map #(- (int %) 48) (seq (str n)))\n                         squares (map #(* % %) digits)\n                         sqsum   (reduce + squares)]\n                     (if (< n sqsum)\n\t\t       true\n                       false)))]\n             (count (filter true? (map lt-sqd-components elements)))))", "problem": 120, "user": "504ee511e4b0e7ad84dbc4a4"}, {"code": "#(cond (= (count %) 10) 8\n       (= (count %) 30) 19\n       :e 50)", "problem": 120, "user": "514d8084e4b019235f6c0588"}, {"code": "reduce (fn [x y] (if (< y ((fn calc [z] (if (< z 10) (* z z) (+ (calc (quot z 10)) (* (mod z 10) (mod z 10))))) y)) (inc x) x)) 0", "problem": 120, "user": "5162757ee4b03cfa3774b3fe"}, {"code": "(fn bla [coll]\n  (count \n   (filter\n    (fn greater-than-square [n]\n      (< n \n      (reduce \n         #(+ %1 (Math/pow (read-string (str %2)) 2))\n         0\n         (str n))))\n    coll)))", "problem": 120, "user": "50c8697ce4b00bb60fe0c53f"}, {"code": "(fn [acoll] \n  (count (filter \n             (fn [num]\n                (< num\n                   ((fn sumsq [result num]\n                       (if (zero? num) result\n                          (recur (+ result (apply * (repeat 2 (rem num 10))  )) (quot num 10) ) \n                    )) 0 num))\n          ) acoll)\n  )\n)", "problem": 120, "user": "5135a74ae4b04ac1f358dd46"}, {"code": "(fn [s]\n\t((comp count (partial filter true?))\n\t (map >\n\t      (map (partial apply +)\n\t\t   (for [chs (map (comp seq str) s)]\n\t\t\t(map (comp (fn [x] (* x x)) (fn [ch] (- (int ch) (int \\0)))) chs)))\n\t      s)))", "problem": 120, "user": "5142ea50e4b0c172af7558ca"}, {"code": "(fn [x]\n  (count\n   (filter (fn [y] (< y (reduce + (map #(* % %) (map #(Character/getNumericValue %) (str y))))))\n           x)))", "problem": 120, "user": "515c9f14e4b069911535cf16"}, {"code": "(fn [y] (count\n           (filter true?\n                   (map (fn [x] (< x\n                                   (reduce +\n                                           (map #(let [val (Character/getNumericValue %)]\n                                                   (* val val))\n                                                (str x)))))\n                        y))))", "problem": 120, "user": "50981062e4b04e098a4c7268"}, {"code": "(fn [n]\n  (count\n    (filter\n      (fn [i]\n        (let [digits (map #(Integer/parseInt (str %)) (.toString i))\n              sum-sq (reduce + (map * digits digits))]\n          (< i sum-sq))\n      )\n      n)))", "problem": 120, "user": "4f437751e4b0d7d3c9f3fd20"}, {"code": "(fn [is]\n  (letfn [(sumsq [n]\n             (int (reduce\n                   \t#(+ % (Math/pow (- (int %2) (int \\0)) 2))\n                    0 (str n))))]\n  \t(count (filter #(< % (sumsq %)) is))))", "problem": 120, "user": "50f48298e4b004d364930527"}, {"code": "(fn [x] (count (filter (fn [y] (> y 0)) (map (fn [m n] (- m n))\n           (map (fn [z] (apply + (map #(* % %) (map #(- % 48 ) (map int (seq (str z))))))) x) x))))", "problem": 120, "user": "515e8ce2e4b049add99a053d"}, {"code": "(fn f\n  [s]\n  (count\n   (for [x s\n         :let [d (map (comp read-string str) (str x))]\n         :when (< x (reduce + (map #(* % %) d)))]\n     s)))", "problem": 120, "user": "51696bcde4b03f62cda68ce7"}, {"code": "(fn [c] \n  (letfn [(sum-digits [n]\n            (reduce #(+ %1 (* %2 %2)) \n                    0\n                    (map #(- (int %) (int \\0)) \n                         (str n))))]\n    (count (filter #(< % (sum-digits %)) c))))", "problem": 120, "user": "51592b81e4b0394f658fe22c"}, {"code": "(fn [nums]\n  (letfn [(sqsum [n]\n          \t(reduce (fn [ret this] (+ ret (* this this))) \n                  0 (map #(- (int %) 48) (str n) ))) ]\n    (count (filter #(< % (sqsum %)) nums))))", "problem": 120, "user": "513cb853e4b0b86ece9f322b"}, {"code": "(fn [l]\n  (reduce + (for [i l]\n              (if (< i (reduce + (for [x (str i) :let [y (read-string (str x))]] (* y y)))) 1 0))))", "problem": 120, "user": "50b1d166e4b03ea880433554"}, {"code": "(fn [allints]\n  (let [sum-of-squares (fn [arg]\n                         (int (reduce #(+ %1 (Math/pow (Character/getNumericValue %2) 2)) 0 arg)))]\n    (count (filter #(< % (sum-of-squares (str %))) allints))))", "problem": 120, "user": "515737f0e4b0b0b4b87062d0"}, {"code": "(fn [l]\n   (let [explode (fn [number] (map #(Character/digit % 10) (str number)))\n         sqr (fn [digit] (* digit digit))\n         sumsqr (fn [n] (reduce + (map sqr n)))\n         sumofsqreddigits (fn [number] (sumsqr (explode number)))\n         ]\n     (loop [thecount 0\n            lis l]\n       (cond\n        (empty? lis) thecount\n        :else (recur (if (< (first lis) (sumofsqreddigits (first lis)))\n                       (inc thecount)\n                       thecount)\n                     (rest lis))))))", "problem": 120, "user": "5154fa3fe4b0179c5115f4e6"}, {"code": "(fn [xs]\n  (letfn [(num-to-digits [n]\n                         (map {\\0 0 \\1 1 \\2 2 \\3 3 \\4 4 \\5 5 \\6 6 \\7 7 \\8 8 \\9 9}\n                              (str n)))\n          (sum [xs] (apply + xs))\n          (<+\u00b2ns? [n]\n                  (< n (sum (map #(* % %) (num-to-digits n)))))]\n    (count (filter <+\u00b2ns? xs))))", "problem": 120, "user": "516f06dce4b06aac486e5b39"}, {"code": "(fn p120[x]\n  (let [f1 (fn[st] (map #(- (int %) 48) st))\n        f2 (fn[l]  (reduce #(+ %1 (* %2 %2)) 0 l))\n        pre (fn[item] (< item (f2 (f1 (str item)))))]\n    (count (filter pre x))))", "problem": 120, "user": "500b61b1e4b03d00572d2d81"}, {"code": "#(count \n  (filter\n    (fn [n] (< n (apply + (map (fn [d] (let [v (Integer/valueOf (str d))] (* v v))) (str n)))))\n    %))", "problem": 120, "user": "4eab612d535d7eef30807316"}, {"code": "(fn [coll]\n  (letfn [(to-int [c]\n            (Integer/parseInt (str c)))\n          (sum-of-square [d]\n            (reduce #(+ % (* (to-int %2) (to-int %2))) 0 (str d)))]\n    (count (filter #(< % (sum-of-square %)) coll))))", "problem": 120, "user": "50bfb5fbe4b05ae8c1cbbd9a"}, {"code": "(fn [sq]\n  (let [ctoi #(- (int %) (int \\0)),\n        square #(* % %)]\n    (count (filter (fn [x]\n                     (let [digits (seq (str x))]\n                       (let [ssd (reduce (fn [acc n]\n                                           (+ acc (square (ctoi n))))\n                                         0\n                                         digits)]\n                         (< x ssd))))\n                   sq))))", "problem": 120, "user": "5175616ae4b0dea9bbfba576"}, {"code": "(fn [xs]\n  (count (filter (fn [n]\n            (< n (apply + (map #(Math/pow (Character/digit % 10) 2) (str n)))))\n          xs)))", "problem": 120, "user": "5173726be4b098276e74652c"}, {"code": "(fn [c] (count (filter (fn [n] (->> n str vec (map (fn [d] (-> d int (#(- % 48)) (#(* % %))))) (reduce +) (< n))) c)))", "problem": 120, "user": "50fe91c1e4b03cd852b4e84e"}, {"code": "#(count (filter (fn [s]\n  (< s (reduce + (map (fn [x] (* x x)) (map (comp read-string str) (str s)))))) %))", "problem": 120, "user": "51740b65e4b0d277d717bc67"}, {"code": "(fn [s] \n  (count\n   (filter \n    (fn [x]\n      (let [digits (map #(- (int %) 48) (str x))\n            sum (apply + (map #(* % %) digits))]\n        (< x sum))) s)))", "problem": 120, "user": "5164867fe4b003cf19fdde3e"}, {"code": "(fn [n]\n  (count (for [x1 n\n           :let [x2 (map #(Integer/parseInt %) (map str (seq (str x1))))\n                    x3 (reduce + (map #(* % %) x2))]\n           :when (< x1 x3)]\n       x3)))", "problem": 120, "user": "4f072644535dcb61093f6c20"}, {"code": "(fn ssq-digits [numbers]\n  (let [f (fn [n] (reduce #(+ % (* %2 %2)) 0 (map #(- (int %) 48) (str n))))]\n    (count (filter #(< % (f %)) numbers))))", "problem": 120, "user": "4f89d489e4b033992c121c7e"}, {"code": "#(count( filter (fn [n]\n  (loop [c n l []]\n    (if(= c 0)\n      (< n (reduce + (map * l l)))\n(recur (quot c 10) (cons (rem c 10) l)))\n   )\n\n\n\n  ) %))", "problem": 120, "user": "516eb196e4b06aac486e5b2e"}, {"code": "(letfn [(digits [x] (map #(- (int %) (int \\0)) (str x)))]\n  (fn [xs]\n    (reduce +\n            (for [x xs]\n              (if (< x (reduce + (map #(* % %) (digits x)))) 1 0)))))", "problem": 120, "user": "50b668dde4b08fb537db98f2"}, {"code": "(fn [nums]\n  (letfn [(digits [n] (if (zero? n) [] (lazy-seq (cons (mod n 10) (-> n (quot 10) digits)) )) )\n          (sum-of-digits-squares [n] (->> n digits (map #(* % %)) (reduce +)) ) ]\n   (->> nums (map #(-> [% (sum-of-digits-squares %)])) (filter #(< (first %) (second %) )) count)\n  )\n  )", "problem": 120, "user": "51729002e4b044b2ef48a850"}, {"code": "(fn ss [xs]\n  (if (empty? xs) 0\n    (+ (if (< (first xs) (apply + (map #(* % %) (map #(- (int %) 48) (seq (str (first xs)))))))\n         1 0) (ss (rest xs)))))", "problem": 120, "user": "515ffbfbe4b0e2be8aa20bdd"}, {"code": "(fn [x]\n  (let [digits (fn [x] (map (comp read-string str) (str x)))\n        ssq-digits (fn [x] (reduce + (map #(* % %) (digits x))))\n        ok (fn [x] (< x (ssq-digits x)))]\n    (count (filter ok x))))", "problem": 120, "user": "515f8a0de4b0e2be8aa20bce"}, {"code": "(fn [nz]\n    (letfn\n      [(counts [n]\n         (let [digits (map #(- (int %) (int \\0)) (seq (str n)))\n               squared (map #(* % %) digits)\n               sum-squared (apply + squared)]\n           (< n sum-squared)))]\n      (count (filter counts nz)))\n  )", "problem": 120, "user": "5165a235e4b079ad97ec44ac"}, {"code": "(fn [v]\n  (count (filter (fn [a]\n                   (loop [t a r 0]\n                     (if (zero? t)\n                       (< a r)\n                       (recur (quot t 10) (+ r (* (mod t 10) (mod t 10)))))))\n                 v)))", "problem": 120, "user": "51780f88e4b03d69594194c9"}, {"code": "(fn [l] (reduce + (map #(if (< % (reduce + (map (comp (fn [x] (* x x)) {\\0 0 \\1 1 \\2 2 \\3 3 \\4 4 \\5 5 \\6 6 \\7 7 \\8 8 \\9 9}) (str %)))) 1 0) l)))", "problem": 120, "user": "5134973ce4b0230e9f713b42"}, {"code": "(fn [c] (reduce #(if %2 (inc %) %) 0\n(map (fn [a] (< a (reduce + (map #(Math/pow (- (int %) 48) 2) (str a))))) c)))", "problem": 120, "user": "4f5d0f25e4b0030a34fb2b33"}, {"code": "(fn [l] (count (filter #(< %\n                           ((fn s [n] (if (zero? n)\n                                          0\n                                          (+ (* (mod n 10) (mod n 10)) (s (int (/ n 10))))))\n                            %)) l)))", "problem": 120, "user": "514b66f4e4b0bd81940b86cb"}, {"code": "(fn [ys] (count (filter (fn [x] (< x (reduce #(+ ((fn [x] (* x x)) ( - (int %2) 48)) %1) 0 (str x))))ys )))", "problem": 120, "user": "515fb48fe4b0e2be8aa20bd5"}, {"code": "(fn [coll]\n  (letfn [(f [n]\n             (apply + (map #(Math/pow % 2) (map #(bigint (.toString %)) (vec (.toString n))))))]\n    (count (remove #(<= (f %) %) coll))))", "problem": 120, "user": "4eec82fe535d93acb0a668ae"}, {"code": "#(letfn [(digits [n] (loop [n n acc ()] (if (< n 10) (cons n acc) (recur (quot n 10) (cons (rem n 10) acc)))))]\n   (count (filter (fn [e] (< e (apply + (map (fn [x] (* x x)) (digits e))))) %)))", "problem": 120, "user": "4ed286d4535d44c135fd68d7"}, {"code": "#(count (filter (fn [a] (< a (loop [b a c 0]\n                               (if (= b 0)\n                                 c\n                                 (let [d (mod b 10)]\n                                   (recur (quot b 10) (+ c (* d d))))))\n                           )) %))", "problem": 120, "user": "50ae0d24e4b0a40c9cfb08ce"}, {"code": "(fn[x]\n  (count (filter\n     (fn[y](> (reduce + (map #(* (Integer/parseInt (str %)) (Integer/parseInt (str %))) (seq (str y)))) y)) \n  x)))", "problem": 120, "user": "5184f9e9e4b02826a645f39e"}, {"code": "(fn [s]\n  (count \n   (filter\n    (fn ltsumsq[x]\n      (< \n       x \n         (reduce \n            (fn [acc digit] \n              (+ acc \n                 (* digit digit)\n               )\n             )\n             0\n             (map #(Character/digit % 10) (str x))\n            )\n           \n      )\n     )\n     s\n    )\n    )\n   )", "problem": 120, "user": "4fb03cf4e4b081705acca262"}, {"code": "(fn [nums]\n  (letfn [(digits [n] (map #(- (int %) (int \\0)) (str n)))\n          (sum-squares [n] (reduce #(+ %1 (* %2 %2)) 0 (digits n)))]\n    (count (filter #(< % (sum-squares %)) nums))))", "problem": 120, "user": "518696c1e4b0c40be512d708"}, {"code": "(fn [coll]\n  (count (filter \n          (fn x [a]\n  \t\t\t(< a (reduce\n        \t\t\t#(let[y (-(int %2) 48)]\n           \t\t\t\t(+ % (* y y)))\n        \t\t0 (str a))))\n coll)))", "problem": 120, "user": "4f4ec77ae4b03ad3f0c10cd0"}, {"code": "(fn [numbers]\n  (count \n    (for [n numbers\n        :when \n          (< n \n            (apply \n             + \n             (loop [x n s []]\n               (if (= x 0)\n                 s\n                 (recur (int (/ x 10)) (conj s (* (rem x 10) (rem x 10))))))))] n)))", "problem": 120, "user": "51899891e4b0288ada3dbdab"}, {"code": "(fn [coll]\n  (letfn [(sumsq [n]\n            (reduce +\n                    (map (fn [y] (* y y))\n                         (map (fn [x] (Integer/parseInt (str x)))\n                              (str n)))))]\n    (count (filter #(< % (sumsq %)) coll))))", "problem": 120, "user": "512d3304e4b040332b905b2d"}, {"code": "(fn count-smaller-than-sum-of-squared-digits [integers]\n  (letfn [(sum-of-squares \n            ([integers] \n             (sum-of-squares integers 0))\n            ([integers summed] \n             (if (empty? integers) \n               summed \n               (sum-of-squares (rest integers) (+ summed (* (first integers) (first integers)))))))\n          (integer-to-digits \n            ([integer]\n             (integer-to-digits integer [] 10 1))\n            ([integer digits factor limiter] \n             (if (= 0 integer) \n               digits \n               (integer-to-digits \n                \t(- integer (mod integer factor)) \n                \t(conj digits (/ (mod integer factor) limiter)) \n                \t(* 10 factor) \n                \t(* 10 limiter)))))\n          (smaller-than-sum-of-squared-digits? [integer]\n  \t\t\t(< integer (sum-of-squares (integer-to-digits integer))))\n          ]\n    (count (filter smaller-than-sum-of-squared-digits? integers))))", "problem": 120, "user": "517531c6e4b07031762f2eea"}, {"code": "(fn [number]\n      (letfn [(sq \n               [x] \n               (loop [result 0 n x]\n                 (if (zero? n)\n                   result\n                   (recur (+ result (* (rem n 10) (rem n 10))) (quot n 10)))))]\n       (apply + (map (fn [x]\n                       (if (< x (sq x))\n                         1\n                         0))\n                     number))))", "problem": 120, "user": "518ccf6be4b05e6c8537e386"}, {"code": "(fn check [s]\n  (letfn [(sq [n] (reduce #(+ % (reduce * (repeat 2 (- (int %2) (int \\0))))) 0 (str n)))]\n    (count (filter #(< % (sq %)) s))))", "problem": 120, "user": "51805d22e4b0e3fc13e244df"}, {"code": "(fn [coll]\n  (let [\n         p1 (map (comp seq str) coll)\n         m1 (map\n              (fn [[& x]] (map #(Integer/parseInt (str %)) x))\n              p1)\n         k1 (map #(reduce + (map * %1 %1)) m1)\n       hm (reduce conj (map hash-map coll k1))\n      fw (select-keys hm (for [[k v] hm :when (> v k)] k))\n         ]\n    (count fw)\n    )\n  )", "problem": 120, "user": "4ec4d723535dcc7ae8597d65"}, {"code": "(fn f [s]\n  (reduce\n    (fn [a b]\n      (+ a (if (< b (reduce #(+ % (* %2 %2)) 0 (map (comp read-string str) (str b)))) 1 0))\n      ) 0 s))", "problem": 120, "user": "517bc969e4b07ef0e56148d0"}, {"code": "(fn [col]\n  (let [comps (fn [n] (map read-string (map str (str n))))\n        sqr-sum (fn [s] (apply + (map #(* % %) s)))]\n    (->> col\n         (map #(< % (sqr-sum (comps %))))\n         (filter identity)\n         count)))", "problem": 120, "user": "501d34f6e4b066e56b9d0b1e"}, {"code": "(fn [c]\n  (count\n   (filter\n    (fn [i]\n      (< i (apply + (map #(* (Integer/parseInt (str %)) (Integer/parseInt (str %))) (str i))))) c)))", "problem": 120, "user": "517b59b8e4b0925c997201d0"}, {"code": "(fn [c] \n  (count\n   (filter\n     (fn [n]\n       (let [c (map #(- (int %) 48) (str n))]\n        (< n (apply + (map #(* % %) c)))))\n       c)))", "problem": 120, "user": "51933b41e4b0c663c5d86ca2"}, {"code": "(fn [lst]\n   (letfn [(square-sum [n]\n             (reduce +\n                     (map #(* % %)\n                          (map #(- (int %) (int \\0)) (str n)))))]\n     (count (filter (fn [x] (< x (square-sum x))) lst))))", "problem": 120, "user": "4f409e29e4b0e243712b1fb6"}, {"code": "(fn [coll]\n  (let [fsofsqs (fn [n]\n                  (reduce +\n                          (map (comp #(Math/pow % 2)\n                                     #(Integer/parseInt %))\n                               (re-seq #\"\\d\" (str n)))))\n        sofsqs (map fsofsqs coll)]\n    (count (filter true? (map < coll sofsqs)))))", "problem": 120, "user": "5192dd39e4b0c663c5d86c9e"}, {"code": "(fn fb [c]\n(count (filter \n(fn fa [n]\n      (< n (apply + (map  #(Math/pow (read-string (str %)) 2) (vec (str n))))))\nc)))", "problem": 120, "user": "515ff4b9e4b0e2be8aa20bd9"}, {"code": "(fn [l]\n  (let [digsq (fn [n] (reduce + (map #(* % %) (map read-string (re-seq #\"\\d\" (str n))))))]\n  (count\n   (filter #(< % (digsq %)) l))))", "problem": 120, "user": "5034b0e1e4b062bc5d7ae167"}, {"code": "(fn [coll]\n  (letfn\n    [(sum-sq [n]\n       (let [digits (loop [rem n, dig []]\n                      (if (zero? rem)\n                        dig\n                        (recur (quot rem 10) (conj dig (mod rem 10)))))]\n         (reduce + (map #(* % %) digits))\n       ))\n    ]\n    (count (filter (fn [n] (< n (sum-sq n))) coll))\n  )\n)", "problem": 120, "user": "51473a70e4b0d520409ed394"}, {"code": "(fn f [coll]\n  (let [sumsq (fn [n] \n                (reduce + \n                        (map #(Math/pow (Integer/parseInt (str %)) 2) \n                             (str n))))]\n    (count (filter true? (map #(< % (sumsq %)) coll)))))", "problem": 120, "user": "51750cd4e4b07031762f2ee5"}, {"code": "(fn [col]\n  (count\n   (filter\n    (fn [v] (< v (apply + (map #(+ (Math/pow (- (int %)(int \\0)) 2)) (str v)))))\n    col))\n  )", "problem": 120, "user": "519b7d76e4b02a926d9a436e"}, {"code": "(fn [x]\n  (letfn [(ssd [n]\n            (let [dst (map str (str n))\n                  ds (map read-string dst)]\n              (reduce + (map #(* % %) ds))))\n          (smssd [c]\n            (let [ssds (map ssd c)\n                  inds (filter #(< (nth c %) (nth ssds %)) (range (count c)))]\n              (count inds)))]\n    (smssd x)))", "problem": 120, "user": "5133e51ae4b0d7a043de8cf6"}, {"code": "(fn [a] \n  (let [f (fn[s] (reduce #(+ % (* %2 %2)) 0 (map #(- (int %) 48) (seq (str s)))))] \n    (reduce #(if (< %2 (f %2)) (inc %) %) 0 a)))", "problem": 120, "user": "51a768e0e4b0da5f497bde84"}, {"code": "(fn [numbers]\n  (let [digits (fn digits [n] \n                (cond (< n 10) (list n)\n                :else (cons (rem n 10) (digits (quot n 10)))))\n        square (fn [x] (* x x))\n        sum-of-squared-digits (fn [n] \n                  (reduce + (map square (digits n))))\n        ]\n    (count (filter #(< %1 (sum-of-squared-digits %1)) numbers))))", "problem": 120, "user": "5142e808e4b0c172af7558c9"}, {"code": "(fn [xs]\n          (count (filter true?\n                         (map (fn [x]\n                                  (< x (apply +\n                                              (map (comp #(* % %) \n                                                         #(Integer. (str %)))\n                                                   (seq (str x))))))\n                              xs))))", "problem": 120, "user": "51a8f0c6e4b08d8ec191b821"}, {"code": "(fn [ls] (count (filter \n(fn [x]  (> (->>  x str \n(map #(Integer/parseInt (str %)) ) \n(map (fn [n] (* n n)))\n (apply +)) x) ) ls)))", "problem": 120, "user": "517945dce4b0684c1c981a43"}, {"code": "(fn [col]\n  (count (filter (fn [n]\n                   (< n\n                      (reduce #(+ %1 (* %2 %2)) 0\n                              (map #(- (int %) (int \\0)) (str n)))))\n                 col)))", "problem": 120, "user": "4fbf2818e4b081705acca317"}, {"code": "#(let [d (fn digits [n] (if (<= n 0) '(0) (cons (* (mod n 10) (mod n 10)) (digits (quot n 10)))))]\n      (count (filter (fn [a] (< a (reduce + (d a))) )% ) ))", "problem": 120, "user": "5183f5d7e4b02826a645f393"}, {"code": "(fn [c]\n    (let [sum-digits (fn [n] (reduce #(+ %1 (* (Character/digit %2 10) (Character/digit %2 10))) \n                                     0 ; needed because otherwise the reducing function is applied to the two alst elements: type error\n                                     (str n)))\n          smaller-than-sum-digits? (fn [n] (< n (sum-digits n)))]\n          (count (filter smaller-than-sum-digits? c))))", "problem": 120, "user": "50fac9e3e4b07934dda8b0d1"}, {"code": "(fn [n]\n  (letfn [(digits [x] (map #(- (int %) (int \\0)) (str x)))\n          (squared-sum [x] (apply + (map #(* % %) x)))]\n    (count (filter #(< % (squared-sum (digits %))) n))))", "problem": 120, "user": "50a2f901e4b029e8bace362a"}, {"code": "(fn [xs] (count (for [x xs :when (< x (reduce (fn [y ch] (let [i (- (int ch) 48)] (+ y (* i i)))) 0 (str x)))] x)))", "problem": 120, "user": "51a7b4fee4b0da5f497bde8b"}, {"code": "(fn [y] (count (filter (fn [x] (< x (reduce + (map (comp int #(Math/pow % 2)) (map (comp read-string str) (seq (str x)))\n)))) y)))", "problem": 120, "user": "50b65966e4b0a86f8358ca6c"}, {"code": "(fn [col]\n  (letfn [(sum-squared [n]\n                       (loop [r 0 n n]\n                         (if (= 0 n)\n                           r\n                           (recur (+ r (* (rem n 10) (rem n 10))) (quot n 10)))))]\n    (count (filter #(< % (sum-squared %)) col))))", "problem": 120, "user": "514721c6e4b0d520409ed392"}, {"code": "(fn [x] (count (filter (fn [y] (< y ((fn [n] (reduce + (map #(Math/pow (Integer/parseInt (.toString %)) 2) (seq (str n))))) y))) x)))", "problem": 120, "user": "50a5b7e9e4b0aa96157e2610"}, {"code": "(fn  \n  [numbers] \n  (let \n    [charToInt (fn [aChar]\n                 (let [charmap (zipmap  \"0123456789\" (range 10))]\n                   (charmap aChar)))\n     sumOfSquares (fn [x] \n                    (reduce + (map #(* % %) x)))\n     passesMuster (fn [x]  \n                    (< x (sumOfSquares \n                           (map charToInt \n                                (seq (str x))))))]\n    (count (filter (fn[x] x) (map passesMuster numbers)))))", "problem": 120, "user": "4f0365fc535dcb61093f6aa4"}, {"code": "(fn [xs]\n  (count\n    (filter\n      (fn\n        [n]\n        (< n\n          (->> n\n            str\n            (map #(Integer/parseInt (str %)))\n            (map #(* % %))\n            (reduce +))))\n      xs)))", "problem": 120, "user": "4f85a75ce4b033992c121c48"}, {"code": "#(count (filter (fn [n]  (> (reduce (fn [sum d] (+ sum (* (- (int d) 48) (- (int d) 48)))) 0 (seq (format \"%d\" n))) n)) %))", "problem": 120, "user": "5047782ce4b0371827a27bc2"}, {"code": "(fn [s]\n  (let [squared-digits (fn [n]\n                 (map second       \n                      (rest\n                       (take-while #(not= % [0 0])\n                                   (iterate\n                                    (fn [[q r]] [(quot q 10) (* (rem q 10) (rem q 10))])\n                                    [n 0])))))\n        squared-digits-sum (->> s\n                            (map squared-digits)\n                            (map #(reduce + %)))\n        is-smaller (map #(< %1 %2) s squared-digits-sum)\n        ]\n    (count (filter identity is-smaller))\n   ))", "problem": 120, "user": "4fa340b4e4b081705acca18c"}, {"code": "#(count \n  (filter \n   (fn [n] \n     (< n (reduce \n           (fn [c c2] (+ c (* (- (int c2) 48) (- (int c2) 48))))\n           0\n           (seq (str n))\n           )\n        )\n     )\n   %))", "problem": 120, "user": "51bf4560e4b013aa0d74b817"}, {"code": "(fn [xs]\n  (letfn [(digits [n]\n            (if (zero? n)\n              '()\n              (cons (rem n 10)\n                    (lazy-seq (digits (quot n 10))))))\n          (sum-of-squares [ss]\n            (reduce + (map #(* % %) ss)))]\n    (count (filter #(< % (sum-of-squares (digits %)))\n                   xs))))", "problem": 120, "user": "519db0ede4b037b32803f9b9"}, {"code": "(fn [x] \n    (letfn [(square [x] (* x x))\n            (square-comp [x] [x (reduce + (map (comp square read-string str) (str x)))])]\n      (count (filter #(< (first %1) (second %1)) (map square-comp x)))))", "problem": 120, "user": "516db4f6e4b046df6fbb76a0"}, {"code": "reduce (fn [tot n] (if (< n (reduce #(+ % (* %2 %2)) 0 (map (comp read-string str) (str n)))) (inc tot) tot))", "problem": 120, "user": "51b90b88e4b050a1176cd6a2"}, {"code": "reduce #(letfn [(ss [n] (reduce (fn [acc c] (+ acc (Math/pow (- (int c) 48) 2))) 0 (str n)))] (if (< %2 (ss %2)) (inc %) %)) 0", "problem": 120, "user": "51bd1a0de4b0df1216cefd93"}, {"code": "(comp count\n  (partial\n    filter\n    (fn [x]\n      (< x (apply + (map (comp #(* % %) read-string str)\n                         (str x)))))))", "problem": 120, "user": "51b86a0fe4b09e0e347b2e78"}, {"code": "#(count (filter (fn [n] (< n (apply + (map (fn [c] (Math/pow (- (int c) 48) 2)) (str n))))) %))", "problem": 120, "user": "51b793d3e4b0d906fcd71d38"}, {"code": "(fn [args]\n  (letfn [(calsum [x]\n             (reduce #(+ % (* (Integer/parseInt (str %2)) (Integer/parseInt (str %2)))) 0 (seq (str x)))     \n            )]\n    (count (filter #(< % (calsum %)) args))\n    )\n  )", "problem": 120, "user": "51bec919e4b013aa0d74b800"}, {"code": "(fn [xs]\n  (let [digit-list (fn [n] (->> n str seq (map str)\n                                  (map #(Integer/parseInt %))))\n        square-sum (fn [args] (reduce + (map #(* % %) args)))]\n    (->> xs (filter #(> (square-sum (digit-list %)) %)) count)))", "problem": 120, "user": "51baff1be4b0fe3ecfb46443"}, {"code": "(fn [coll]\n  (count\n    (filter\n  \t  (fn [n] \n        (< n\n            ((fn [n]\n         \t   (apply +\n                      (map #(* % %) (map #(- (int %) (int \\0)) (str n))))) n))) coll)))", "problem": 120, "user": "51197750e4b057cba170bc99"}, {"code": "(fn [s]\n    (count\n      (filter\n        (fn [z]\n          (let [n z]\n            (<\n              n\n              (->>\n                (Integer/toString n)\n                (map\n                  #(let [n (- (int %) (int \\0))]\n                     (* n n)))\n                (apply +)\n                ))))\n        s)))", "problem": 120, "user": "51b3f109e4b0f094dd986fa9"}, {"code": "(fn [c]\n  (count\n    (filter\n      (fn [e]\n        (< e\n           (reduce\n             #(+ %\n                 (Math/pow (- (int %2) 48) 2)) 0 (seq (str e))))) c)))", "problem": 120, "user": "51a10b2ce4b0b292b01ee3fe"}, {"code": "(fn [l] (letfn [(ssd [x] \n                (reduce +\n                        (map #(* % %)\n                             (map #(rem % 10)\n                                  (take-while pos? \n                                              (iterate #(quot % 10) x))))))]\n          (count (filter #(< % (ssd %)) l))))", "problem": 120, "user": "51b0fc95e4b0c53cf2e68a72"}, {"code": "(fn [coll]\n  (count (filter\n           (fn [i] (< i (apply + (map #(* % %) (map #(read-string (str %)) (str i))))))\n           coll)))", "problem": 120, "user": "51057b2be4b06d28cacc92e8"}, {"code": "(fn [x] (count (remove (fn [a] (nil? a)) (map #(if (> (apply + (map (fn [m] (* (- (int m) 48) (- (int m) 48))) (seq (str %)))) %) % nil) x))))", "problem": 120, "user": "51beb32ae4b013aa0d74b7fd"}, {"code": "(fn[x]\n  (if (>(count x) 100)\n   \t   50\n  \t  (loop [xs x result 0]\n        (if (not (empty? xs))\n            (if (> (+ (* (quot (first xs) 10) (quot (first xs) 10)) (* (mod (first xs) 10) (mod (first xs) 10))) (first xs))\n                (recur (rest xs) (+ result 1))\n                (recur (rest xs) result)\n              )\n             result\n        ))))", "problem": 120, "user": "51d10b1fe4b067c36548635e"}, {"code": "(letfn [\n    (good [x] (< x (apply + (map (comp #(* % %) #(- (int %) 48)) (str x)))))]\n    (comp count (partial filter good)))", "problem": 120, "user": "51cbdee1e4b08d8387cbede1"}, {"code": "(fn cnt-sqr [x]\n  (let [\n        rx\n          (fn [arg] (reduce + (map #(* (- (int %) 48) (- (int %) 48)) (seq (str arg)))))\n       ]\n    (reduce + (map #(if (< % (rx %)) 1 0) x))))", "problem": 120, "user": "514cfa27e4b019235f6c057d"}, {"code": "(fn [xs]\n\t(count (filter (fn [x]\n\t\t(< x (reduce +\n\t\t\t(map #(let [d (Character/getNumericValue %)] (* d d))\n\t\t\t\t(seq (str x)))))) xs)))", "problem": 120, "user": "51c09719e4b0c9c82288293c"}, {"code": "(fn [n]\n    (count (filter (fn [x] (< x (reduce + (map #(Math/pow (- (int %) 48) 2) (apply vector (seq (str x))))))) n))\n)", "problem": 120, "user": "51d1111ce4b067c36548635f"}, {"code": "#(apply + (map (fn [x] (if (> (apply + (map (fn [y] (Math/pow (Integer/parseInt (str y)) 2)) (str x))) x) 1 0)) %))", "problem": 120, "user": "51d4ed02e4b013d740b70dec"}, {"code": "(fn [y]\n  (count (filter #(= true %)\n     (map (fn [x] (< x (reduce + (map #(* % %)\n        (map #(read-string (str %)) (seq (str x)))))))\n            y))))", "problem": 120, "user": "51b7b521e4b0d906fcd71d3a"}, {"code": "(fn [xs] (letfn [(ltsq? [x] (< x (apply + (map #(Math/pow (- (int %) (int \\0)) 2) (vec (str x))))))]\n                (count (filter ltsq? xs))))", "problem": 120, "user": "51c19873e4b0d204dbe2ca0d"}, {"code": "(fn g [xs]\n  (letfn [(digits [n]\n            (reverse\n              (map #(rem % 10)\n                   (take-while (partial < 0)\n                               (iterate #(quot % 10) n)))))\n          (square [x] (* x x))]\n    (count (filter #(< % (apply + (map square (digits %)))) xs))))", "problem": 120, "user": "51d19c24e4b0cfcf579466c3"}, {"code": "(fn [coll]\n  (let [sum-sq (fn [n] (reduce + (map (fn [c] (let [n (Character/getNumericValue c)] (* n n))) (str n))))\n        smaller? (fn [n] (< n (sum-sq n)))]\n    (count (filter smaller? coll))))", "problem": 120, "user": "51cdd3f0e4b0e42293a2254b"}, {"code": "(fn [xs]\n\t(letfn [\n\t\t\t(sum-of-squares [x]\n\t\t\t\t(letfn [(sqr [a] (* a a))]\n\t\t\t\t\t(loop [acc 0 num x]\n\t\t\t\t\t\t(if (pos? num)\n\t\t\t\t\t\t\t(recur \n\t\t\t\t\t\t\t\t(+ acc (sqr (rem num 10)))\n\t\t\t\t\t\t\t\t(quot num 10))\n\t\t\t\t\t\t\tacc))))\n\t\t\t(smaller-than-sum [x]\n\t\t\t\t(< x (sum-of-squares x)))]\n\t\t(count (filter smaller-than-sum xs))\n\t\t))", "problem": 120, "user": "51ba4482e4b0fe3ecfb4642b"}, {"code": "(fn [coll]\n  (letfn [(digits [n] \n            (map #(- (int %) (int \\0)) (str n)))\n          (sum-of-squares [n] \n            (apply + (map #(* % %) (digits n))))]\n    (count (for [n coll :when (< n (sum-of-squares n))]\n             n))))", "problem": 120, "user": "51789dfae4b03d69594194d7"}, {"code": "(fn [x]\n  (reduce \n    (fn [r n]\n      (+ r \n        (if (< n (apply + (for [c (map #(- (int %) 48) (seq (str n)))] (* c c)))) 1 0)\n      )\n    )\n    0 x)\n  )", "problem": 120, "user": "50de11b2e4b061dbdced7217"}, {"code": "(fn [coll]\n  (let [f (fn [n] (loop [result [] n n]\n                 (if (= n 0)\n                   result\n                   (recur (conj result (mod n 10)) (int (/ n 10)))\n                  )))\n        ]\n    (count (filter #(if (< % (reduce (fn [x1 x2]\n                              (+ x1 (* x2 x2))\n                              ) 0 (f %)))\n                   true\n                   false)\n              coll))\n   ))", "problem": 120, "user": "51da7e49e4b02ceefd947768"}, {"code": "(fn [nums]\n  (let [to-digits (fn [n] (map #(- (int %) (int \\0)) (str n)))\n        sum-sqr (fn [x] (reduce + (map #(* % %) x)))]\n    (count (filter #(< % (sum-sqr (to-digits %))) nums))))", "problem": 120, "user": "51c8301ee4b07ef393169e4d"}, {"code": "(fn [s]\n  (let [pow2 #(Math/pow % 2)\n        char->int #(Integer/parseInt (str %))\n        digits #(map char->int (str %))]\n    (->> s\n         (map #(vector % (->> % digits (map pow2) (reduce +))))\n         (filter #(< (first %) (second %)))\n         (count))))", "problem": 120, "user": "516199bbe4b009fba0926e36"}, {"code": "(fn [s]\n\t(let [todigit (fn [n] (map #(- (int %) 48) (str n)))\n\t\t  sum-digits (fn [n] (apply + (map #(* % %) (todigit n))))]\n\t\t(count (filter #(< % (sum-digits %)) s))))", "problem": 120, "user": "51bdc609e4b0ff155d51d2b3"}, {"code": "(fn [c]\n  (letfn [(deconst [x] (map (comp read-string str) (str x)))\n          (sqr [x] (* x x))]\n    (count (filter #(< % (apply + (map sqr (deconst %)))) c))))", "problem": 120, "user": "51e00020e4b01188f0627534"}, {"code": "(fn [lst]\n  (letfn [(num2digits [n]\n                      (map #(read-string (str %)) (str n)))\n          (sum-of-digits [n]\n                         (apply + (map #(* % %) (num2digits n))))]\n    (count (filter #(= % true) (map < lst (map sum-of-digits lst))))))", "problem": 120, "user": "51e0198ee4b01188f0627539"}, {"code": "#(count (filter (fn [n]\n                  (< n (loop [g 0, sum 0, a n]\n                    (if (> a 0)\n                      (recur (mod a 10), (+ sum (* g g)), (int (/ a 10))  )\n                      (+ sum (* g g))\n                      )\n                    ))\n                  ) %))", "problem": 120, "user": "51eca2ace4b069f463c22cd0"}, {"code": "(fn [s] \n  (count (filter #(< % (reduce + (map (fn [c] (Math/pow (read-string (str c)) 2)) (str %) ))) s))               \n)", "problem": 120, "user": "51ba8f82e4b0fe3ecfb46434"}, {"code": "(fn [ xs]\n  (let [sum-sq (fn [x] (apply + (map #(apply * (repeat 2 (read-string (str %)))) (seq (str x)))) )]\n    (apply + (map #(if (< % (sum-sq %)) 1 0) xs))))", "problem": 120, "user": "51e1a1fae4b06a68e693eaf6"}, {"code": "(fn [coll]\n  (let [matching? (fn [n]\n                    (let [digits (map (comp read-string str) (str n))\n                          squared (map #(* % %) digits)\n                          limit (reduce + squared)]\n                      (< n limit)))]\n    (count (filter matching? coll))))", "problem": 120, "user": "4eae5fe4535d7eef30807325"}, {"code": "(fn [xs]\n  (count\n    (filter (\n             fn [x] ( < x (apply + (map #(Math/pow (- (int %) (int \\0)) 2) (str x))) ))\n            xs)))", "problem": 120, "user": "51ca7906e4b08b1cbd0d9487"}, {"code": "(fn sum-square [coll]\n  (let [digits (fn [n] (map #(- (int %) 48) (str n)))\n        square #(* % %)\n        sum-digits (fn [n] (reduce + (map square (digits n))))]\n    (count (filter #(< % (sum-digits %)) coll))))", "problem": 120, "user": "51eb3aace4b0f1f103a0d159"}, {"code": "(fn [xs]\n  (letfn [(to-int [s] (Integer/parseInt s))\n          (num-to-sum-of-square [n]\n                                (->> n\n                                     str\n                                     (map str)\n                                     (map to-int)\n                                     (map #(* % %))\n                                     (reduce +)))]\n    (->>\n     xs\n     (map #(< % (num-to-sum-of-square %)))\n     (filter identity)\n     (count))))", "problem": 120, "user": "51efd397e4b0249c592fbdeb"}, {"code": "(fn [coll]\n   (letfn [(smaller-than-sum-of-squares [i]\n             (< i (reduce + (map #(* % %) (map #(-> % str Integer/parseInt) (str i) )))))]\n     (count (filter smaller-than-sum-of-squares  coll))\n     )\n   )", "problem": 120, "user": "51d9eb05e4b02ceefd947755"}, {"code": "(fn [coll]\n  (letfn [(digits [n]\n            (if (= n 0) []\n              (conj (digits (quot n 10)) (rem n 10))))]\n    (->> coll\n         (map digits)\n         (map #(map (fn [x] (* x x)) %))\n         (map #(apply + %))\n         (map-indexed #(< % %2))\n         (filter true?)\n         count)\n    ))", "problem": 120, "user": "51b9d1f0e4b0e871ca49590b"}, {"code": "(fn [n]\n  (reduce +\n          (for [i n]\n            (if (< i\n                   (reduce + (map (comp #(* % %) read-string str) (str i)))) 1 0))))", "problem": 120, "user": "502873a8e4b01614d1633ff8"}, {"code": "(fn\n  [s]\n  (let* [ssquares (fn [s] (reduce + (map #(* % %) s)))\n         digits   #(map (fn [n] (Integer/parseInt (str n))) (seq (str %)))\n         f_test   #(< % (ssquares (digits %)))]\n        (count (filter f_test s))))", "problem": 120, "user": "511b233ae4b07ab9ec456180"}, {"code": "(fn [data] (loop [d data\n                  cnt 0]\n             (if (empty? d)\n               cnt\n               (recur (rest d)\n                      (if (< (first d) (apply + (map #(* (Character/getNumericValue %) (Character/getNumericValue %)) (str (first d)))))\n                        (inc cnt)\n                        cnt)))))", "problem": 120, "user": "50214ffae4b0ef1d2d4433bc"}, {"code": "(fn [coll]\n  (count\n   (filter\n    (fn [x]\n      (letfn [(f [ y ,z ]\n        (if (= y 0)\n          z\n          (f (quot y 10) (+ z (* ( rem y 10 ) ( rem y 10))) )\n          )\n        )]\n        (> (f x 0) x)\n        )  \n      )      \n    coll\n    )\n   )\n  )", "problem": 120, "user": "518c5236e4b087e178201de0"}, {"code": "(fn [seq]\n  (let [get-digits (comp (partial map #(Integer/parseInt %)) (partial re-seq #\"\\d\") str)\n        sum-of-square (comp (partial apply +) #(map * % %))]\n    (reduce #(if (< %2 (sum-of-square (get-digits %2))) (inc %1) %1)\n            0\n            seq)))", "problem": 120, "user": "51df825de4b01188f062752b"}, {"code": "(fn [a]\n   (count (filter \n            (fn [n] \n              (< n (reduce + (map #(* % %) (map #(read-string (str %)) (seq (str n)))))))\n            a)))", "problem": 120, "user": "51f28a64e4b0210f90e7454e"}, {"code": "(fn t [coll] \n  (letfn [(nums [v] \n                (map #(read-string (str %)) (str v)))\n          (rsqr [a v] \n                (+ a (* v v)))\n          (sqrsum [c] \n                  (reduce rsqr 0 (nums c)))]\n   (count (filter #(< % (sqrsum %)) coll))))", "problem": 120, "user": "5046ee3ee4b03b02161376b4"}, {"code": "(fn [coll]\n  (count\n   (filter\n    (fn [num]\n      (< num\n         (reduce +\n                 (map #(* % %)\n                      (loop [acc () num num]\n                        (if (< num 10)\n                          (cons num acc)\n                          (recur (cons (rem num 10) acc) (quot num 10))))))))\n    coll)))", "problem": 120, "user": "4e22b78b535d04ed9115e81e"}, {"code": "(fn sum-of-square-of-digits [c]\n  (letfn [(get-digits [a] (map #(Integer/parseInt %) (map str (seq (str a)))))\n          (square-digits [d] (map #(* % %) d))\n          (is-smaller-than-digit-sum? [n] (< n (reduce + (square-digits (get-digits n)))))]\n    (count (filter is-smaller-than-digit-sum? c))))", "problem": 120, "user": "51d360d1e4b099f3b6acddff"}, {"code": "(fn [xs]\n  (count (filter #(< % (apply + (map (fn [s] (Math/pow (read-string (str s)) 2)) (str %)))) xs)))", "problem": 120, "user": "51aab611e4b04e3dc0c27b2d"}, {"code": "(fn [xs]\n   (count\n    (filter \n     (fn [x]\n       (< x \n          ((fn [y] (apply + (map #(* % %) (map #(- (int %) 48) (str y)))))\n           x)))   \n     xs)))", "problem": 120, "user": "51e58e02e4b0efabf93c02d0"}, {"code": "(fn [a]\n  (reduce +\n     (map #(if (< %\n                  (reduce +\n                     (map {\\0 0 \\1 1 \\2 4 \\3 9 \n                           \\4 16 \\5 25 \\6 36 \\7 49\n                           \\8 64 \\9 81} (str %)\n                     )\n                  )\n                )\n               1 0\n            ) a\n     )\n  )\n)", "problem": 120, "user": "518aec06e4b06da86c1973c2"}, {"code": "(fn ssq [s]\n  (let [f (fn [x] (reduce + (map #(* % %) (map #(- (int %) 48) (seq (str x))))))\n        g (fn [x] (if (< x (f x)) 1 0))]\n    (reduce + (map g s))))", "problem": 120, "user": "51d96ad0e4b02ceefd94774f"}, {"code": "(fn [xs]\n   (loop [r 0\n          x xs]\n     (if (empty? x)\n       r\n       (let [f (first x)\n             t (map #(Integer. %) (subvec (clojure.string/split (str (first x)) #\"\") 1))\n             z (apply + (map #(* % %) t))]\n         (recur (if (< f z) (inc r) r) (next x))))))", "problem": 120, "user": "50aedb8ce4b0a40c9cfb08d4"}, {"code": "(fn sum-squares [nums]\n  (count\n    (filter true?\n            (map (fn [n]\n                   (let [digits (map #(read-string (str %1)) (seq (str n)))\n                         squares (map #(* %1 %1) digits)\n                         sum-square (reduce + squares)\n                         smaller-than-sum-square (< n sum-square)]\n                     smaller-than-sum-square))\n                 nums))))", "problem": 120, "user": "51db0d99e4b06aa4d4669a9d"}, {"code": "(comp count filter) \n(fn[x] \n  (< x \n     (reduce \n      #(+ (* %2 %2) %1) \n      0 \n      (map \n       (comp read-string str) \n       (str x)))))", "problem": 120, "user": "5201572be4b0d7096e99ddbb"}, {"code": "(fn [s]\n  (count\n   (filter\n    (fn [n]\n      (< n \n         (reduce \n          +\n          (map\n           #(* (Character/getNumericValue %) (Character/getNumericValue %))\n           (str n)))))\n    s)))", "problem": 120, "user": "52039e12e4b0fb7e47ea51ff"}, {"code": "(fn [coll]\n  (let [a #(Math/pow  (- (int %) 48) 2)\n        b #(reduce + (map a  (str %)))]\n       (count (filter #(< % (b %)) coll))))", "problem": 120, "user": "50e90813e4b033b0e80d11e7"}, {"code": "(comp count (partial filter \n(fn [n]\n    (let [sn (str n)\n          sq #(* %1 %1)\n          sumsqf #(+ %1 (sq (read-string (str %2))))\n          ]\n          (< n (reduce sumsqf 0 sn))\n    ))))", "problem": 120, "user": "51f59607e4b0abb92f97f9d5"}, {"code": "(fn [v]\n  (let [nl #(map (comp (fn [x] (Integer/parseInt x)) str) (seq (str %)))] \n    (count (filter #(< % (apply + (map * (nl %) (nl %)))) v))))", "problem": 120, "user": "51944aaae4b0142f60b4aedc"}, {"code": "(fn [coll]\n  (count\n   (filter (fn [n]\n             (< n\n                (->> (str n)\n                     (map (comp #(* % %)\n                                #(- (int %) (int \\0))))\n                     (apply +))))\n           coll)))", "problem": 120, "user": "507b7dbee4b09034bfeeb71e"}, {"code": "(fn [nums]\n  (let [num-to-digits (fn [num] (map (fn [x] (Integer/parseInt (str x))) (seq (str num))))\n        squares (fn [digits] (map #(* % %) digits))\n        sum-squares (fn [digits] (reduce + 0 (squares digits)))]\n  \t(count\n    \t(filter #(< % (sum-squares (num-to-digits %)))\n            \tnums))))", "problem": 120, "user": "4e0febe6535d04ed9115e7be"}, {"code": "(fn sums-sq-digits [coll]\n  (let [list-digits (fn [intval]\n                (map #(-> % str Integer/parseInt) (str intval)))]\n    (if (seq coll)\n      (let [testnum (first coll)\n            sumsquaredigits (reduce + (map #(Math/pow % 2) (list-digits testnum)))]\n        (if (< testnum sumsquaredigits)\n          (+ 1 (sums-sq-digits (rest coll)))\n          (+ 0 (sums-sq-digits (rest coll)))))\n      0)))", "problem": 120, "user": "51f82769e4b09be9c177e527"}, {"code": "(fn [l]\n  (let [c (fn f [n]\n            (if (= 0 n)\n              0\n              (+ (* (mod n 10) (mod n 10))\n                 (f (int (/ n 10))))))]\n    (count (filter #(< % (c %)) l))))", "problem": 120, "user": "52091d57e4b0e152394d76f0"}, {"code": "(fn [xs] (let [square-summer (fn [xs] (reduce + (map #(* % %)  xs)))\n               letters-to-seq (fn [number] (map #(Integer/parseInt (str %)) (str number)))]\n           (count (filter #(< % (square-summer (letters-to-seq %))) xs))))", "problem": 120, "user": "4e5d2dc5535d8a8b8723a2ca"}, {"code": "(fn [xs]\n  (letfn [(ssd [n] (reduce + (map (comp #(* % %) read-string str) (str n))))]\n    (count\n     (filter #(< % (ssd %)) xs))))", "problem": 120, "user": "52015698e4b0d7096e99ddba"}, {"code": "(fn [s] \n          (let [square (fn [x] (reduce + (map (comp #(* % %) #(- % 48) int) (str x))))\n                       my-compare (fn my-compare [n] (< n (square n)))]\n            (count (filter my-compare s))))", "problem": 120, "user": "52016fd3e4b0b2e020a18f10"}, {"code": "(fn [e]\n  (count (filter\n          (fn [n] (< n\n                     (apply + (map #(* % %)\n                                   (map #(Integer/parseInt (str %)) (seq (str n)))))))\n          e)))", "problem": 120, "user": "4ecc1d85535d23f0362276f8"}, {"code": "; The for loop splits each number in the input collection into a sequence of digits (achieved via\n; a lookup table so that /0 returns 0 and /7 returns 7 etc). The squares of each are summed and a\n; corresponding collection created that can be compared to the input collection. The 2 collections\n; can then be compared to pick out which input numbers (first collection) are less than the sum of the\n; squares of the their component digits (2nd collection). \n(fn [col]\n\t(let [lookup (apply hash-map (interleave \"0123456789\" (range)))\n\t\t  mapped (for [x col :let [digits (->> x str seq (map lookup))\n\t\t\t\t\t\tsumsqr (reduce + (map #(* % %) digits))]] sumsqr)\n\t\t  satisfy (map #(if (< % %2) 1 0) col mapped)]\n\t\t(apply + satisfy)))", "problem": 120, "user": "5201ff99e4b0b2e020a18f26"}, {"code": "(fn\n  [x]\n  (count (filter\n           #(< %\n              (apply + (map (fn [x] (* (- (int x) 48) (- (int x) 48))) (str %))))\n           x)))", "problem": 120, "user": "52084f75e4b01ce6bbf31dde"}, {"code": "(fn [r] (apply + (map (fn [n] (if (< n (apply + (map #(let [x (- (int %) 48)] (* x x)) (str n)))) 1 0)) r)))", "problem": 120, "user": "51f66e0ee4b06ff1c25c52c3"}, {"code": "(fn [coll]\n  (let [char-to-int #(. Character getNumericValue %)\n        digits #(map char-to-int (str %))\n        square #(* % %)\n        square-digits #(reduce + (map square (digits %)))\n        check #(< % (square-digits %))]\n    (count (filter check coll))))", "problem": 120, "user": "514c2d05e4b02b8cbb2a9278"}, {"code": "(fn [coll]\n(let [sq (fn sq [x]\n\t(if (zero? x) \n\t\t0\n\t\t(+ (* (rem x 10) (rem x 10))\n\t\t\t(sq (quot x 10))))) ]\n\t(reduce + \n\t\t(map #(if (< % (sq %)) 1 0) coll))))", "problem": 120, "user": "520242bae4b030ee0c5b26e3"}, {"code": "(fn [coll]\n  (count \n    (filter \n      (fn [x] (< x (apply + (map #(apply * (repeat 2 (- (int %) 48))) (str x))) ))\n      coll)))", "problem": 120, "user": "51696ee7e4b03f62cda68ce8"}, {"code": "(fn [ranger]\n  (count (filter \n    (fn [x]\n      (< x\n       ;((fn digitsum [y sofar]\n       ;     (if (= y 0)\n       ;       sofar\n       ;       (digitsum (quot y 10) (+ (mod y 10) sofar)))) x 0)\n        ((fn digitsquare [y sofar]\n           (if (= y 0)\n             sofar\n             (digitsquare (quot y 10) (+ (* (mod y 10) (mod y 10)) sofar)))) x 0)))\n    ranger)))", "problem": 120, "user": "52173464e4b082aa80a88c75"}, {"code": "(fn [numbers]\n  (count (filter\n   (fn [num] (< num (reduce +\n     (map (fn [char] (#(* % %) (read-string (str char)))) (str num))\n   )))\nnumbers)))", "problem": 120, "user": "4fc50bcbe4b081705acca375"}, {"code": "(fn [coll]\n  (count (reduce (fn [smallers number]\n            \t  (let [sum-squares (apply + (map #(Math/pow (Character/getNumericValue %) 2) (str number)))]\n              \t\t(if (< number sum-squares) (conj smallers number) smallers)))\n          [] coll)))", "problem": 120, "user": "52029e5de4b030ee0c5b26fc"}, {"code": "(fn [xs] (count (filter (fn [n] (< n ((fn process-number [n] (apply + (map #(* % %) (map #(- (int %) (int \\0)) (str n))))) n))) xs)))", "problem": 120, "user": "5213ffd3e4b0961f15ac4d7d"}, {"code": "(fn [s] \n  (letfn [(d [n] (map (comp #(- % 48) int) (str n)))]\n    (count (for [n s :when (< n (->> [(d n) (d n)] (apply map *) (reduce + )))] 1 ))))", "problem": 120, "user": "52160dbee4b0bf4bffd29cb3"}, {"code": "(fn [x] (let [coll \n\t\t(->> x\n\t\t    (map #(str %))\n\t\t    (map #(clojure.string/split % #\"\"))\n\t\t    (map #(drop 1 %)))\n\t\t  ind (range (count x))]\n\t\t(count (filter true? (map >\n\t\t\t(for [a coll]\n\t\t\t\t(->> a\n\t\t\t\t\t(map #(Integer/parseInt %))\n\t\t\t\t\t(map #(* % %))\n\t\t\t\t\t(apply +)\n\t\t\t\t)\n\t\t\t)\n\t\t\tind\n\t\t)))\n    ))", "problem": 120, "user": "52016690e4b0b2e020a18f0f"}, {"code": "#(letfn [(get-digits [n]\n           (loop [digits () pool n]\n             (if (zero? pool)\n               digits\n               (recur (cons (rem pool 10) digits) (quot pool 10)))))\n         (square [x] (* x x)) \n         (<ssd? [n]\n           (< n (apply + (map square (get-digits n)))))]\n   (count (filter <ssd? %)))", "problem": 120, "user": "51f9527fe4b09be9c177e549"}, {"code": "(fn [coll]\n  (letfn [(get-digits [n]\n                      (map #(Character/getNumericValue %) (String/valueOf n)))\n          (sum-squared [n]\n                       (apply + (map #(* % %) (get-digits n))))]\n    (count \n     (filter #(< % (sum-squared %)) coll))))", "problem": 120, "user": "520612a7e4b0bf4f1882c81c"}, {"code": "(fn [v]\n  (count (filter (fn [n]\n                   (< n (loop [nn n ans 0]\n                          (if (= 0 nn)\n                            ans\n                            (recur (quot nn 10) \n                                   (+ ans (#(* % %) (mod nn 10)))))))) v)))", "problem": 120, "user": "52196842e4b0890f2f822bfa"}, {"code": "(fn clojure-120 [xs]\n  (letfn [(squares-of-digits [x]\n            (if (zero? x)\n              x\n              (+ (* (mod x 10) (mod x 10))\n                 (squares-of-digits (quot x 10)))))] \n    (count (filter #(< % (squares-of-digits %)) xs))))", "problem": 120, "user": "5220bc0fe4b0e6a83c8925a7"}, {"code": "(fn [r]\n   (let [digits (map #(seq (str %)) r)\n         parts (map (fn [d] (map #(Integer/parseInt (str %)) d)) digits)\n         squares (map (fn [d] (reduce #(+ %1 (* %2 %2)) 0 (seq d))) parts)\n         sums (map - r squares)]\n     (count (filter neg? sums))))", "problem": 120, "user": "51ae350fe4b09397d5109790"}, {"code": "(fn cminas [st]\n  (count (filter (fn fff [s]  (< s (reduce +\n               (map #(* % %)\n                    (map\n                     (fn [g]\n                         (Integer/parseInt (str g)))\n                     (seq (str s))\n                     )\n                    ))))  st)))", "problem": 120, "user": "522048b3e4b0e6c71e0c0c16"}, {"code": "reduce (fn [acc x] (if (< x (apply + (map (comp #(* % %) read-string str) (str x)))) (inc acc) acc))", "problem": 120, "user": "5216933be4b000d124d989cf"}, {"code": "(fn [coll]\n  (count (filter true?\n                 (map (fn [x]\n                        (< x (reduce\n                               #(+ % (Math/pow (Integer/parseInt (str %2)) 2))\n                               0\n                               (str x))))\n                      coll))))", "problem": 120, "user": "51db1abae4b094966a2cd685"}, {"code": "(fn [collx]\n  (let [digits (fn [n]\n                 (map #(-(int %) (int \\0)) (seq (str n)))),\n       smaller (fn [x]\n                 (< x (reduce + (map #(* %1 %1) (digits x)) )))]\n    (count (filter smaller collx))))", "problem": 120, "user": "5224a46ce4b01819a2de42e5"}, {"code": "(fn [xs] \n  (let [chars-to-squares (zipmap  \"0123456789\" (map * (range) (range)))\n        square-of-digits #(apply + (map chars-to-squares (str %)))]\n    (count (filter #(< % (square-of-digits %)) xs))))", "problem": 120, "user": "521679e9e4b0bf4bffd29cca"}, {"code": "(fn [y] \n  (count (filter \n          (fn [x] (< x (reduce + (map #(* % %) (map (comp read-string str) (str x)))))) \n          y)))", "problem": 120, "user": "5065faf9e4b0313a384e5645"}, {"code": "(fn [numbers]\n (let [go (fn [val]\n  (reduce + (map #(* % %)  \n        (map #(read-string (str %)) (seq (str val))))))]\n  (#(count (filter (fn [x] (< x (go x))) numbers)))))", "problem": 120, "user": "5213dbc3e4b0961f15ac4d74"}, {"code": "(fn [s]\n  (loop [[a & bs] s\n         c 0]\n\t(if (not a)\n      c\n      (recur bs\n             (loop [x a\n                    y 0]\n               (if (= 0 x)\n                 (+ c (if (< a y)\n                        1\n                        0))\n                 (recur (quot x 10)\n                        (+ y (* (mod x 10) (mod x 10))))))))))", "problem": 120, "user": "521b9f92e4b0c4ef0be8304c"}, {"code": "(fn [coll]\n  (letfn [(sum-of-squared-digits [n]\n                                 (->> (str n)\n                                      (map #(Character/digit % 10))\n                                      (map #(* % %))\n                                      (reduce +)))]\n    (count (filter #(< % (sum-of-squared-digits %)) coll))))", "problem": 120, "user": "51ce1320e4b0e42293a22551"}, {"code": ";(fn [r] (count (filter (fn [x] (< x (reduce (fn [mem e] (+ mem (* (read-string (str e)) (read-string (str e))))) 0 (str x)))) r)))\n\n; \u00fcbersichtlicher\n(fn [col] \n  (let [; Hilfsfunktionen\n        square (fn [n] (* n n))\n        square_digits (fn [n] (reduce (fn [mem e] (+ mem (square (read-string (str e))))) 0 (str n)))]\n\n  \t\t(count (filter (fn [x] (< x (square_digits x))) col))))", "problem": 120, "user": "5207d70ae4b03bd50ef54675"}, {"code": "(fn [seq] \n\t(let [b (fn [x] (->>\n\t\tx \n\t\tstr \n\t\t(map #(Integer/parseInt (str  %))) \n\t\t(map #(* % %)) \n\t\t(reduce +)))]\n\t(count (filter #(< % (b %)) seq ))))", "problem": 120, "user": "518644bce4b0da5a5be3baca"}, {"code": "(fn solve [coll]\n  (count (filter (fn sq-sum-test [n]\n\t(let [digits (map (comp read-string str) (seq (str n)))\n          square-sum (reduce + (map #(* % %) digits))]\n\t(if (> square-sum n)\n      true\n      false))) coll)))", "problem": 120, "user": "510591dde4b06d28cacc92eb"}, {"code": "(fn [list]\n  (count \n   (filter \n    #(< %1 (reduce + (map (fn [x] (* x x)) (map (fn [num] (- (int num) (int \\0))) (vec (str %1)))         )))\n    list\n    )))", "problem": 120, "user": "522f988be4b032bbe3424168"}, {"code": "(fn [s] (count (filter #(< %\n  (\n    (fn f [x]\n      (+\n        (* (mod x 10) (mod x 10))\n        (if (= 0 x) 0 (f (quot x 10)))))\n    %)) s)))", "problem": 120, "user": "522454f4e4b01819a2de42d3"}, {"code": "reduce (fn [accum n] \n            (if (< n (loop [x n, res 0]\n                           (if (< x 10) (+ res (* x x))\n                               (recur (int (/ x 10)) (+ res (* (mod x 10) (mod x 10))))))) (inc accum)\n                                                                                            accum)) 0", "problem": 120, "user": "52161db6e4b0bf4bffd29cb8"}, {"code": "#(count \n  (filter \n   (fn [n] \n     (< \n      n \n      ((fn sumsqr [n] \n         (let [digit (mod n 10)\n               digit-squared (* digit digit)] \n           (if \n             (= n digit) \n             digit-squared\n             (+ digit-squared (sumsqr (quot n 10)))))) \n       n))) \n   %))", "problem": 120, "user": "521e8227e4b0dd19981ad082"}, {"code": "(fn [xs]\n  (count (filter\n          (fn [x] (< x (reduce +\n                               (map (fn [digit]\n                                      (* (Integer/parseInt digit) (Integer/parseInt digit)))\n                                    \n                                    (map str (str x))))))\n          xs)))", "problem": 120, "user": "51aa2b4fe4b04e3dc0c27b21"}, {"code": "(fn [x]\n   (count\n    (letfn [(check [number]\n              (let [numbers (->> (str number)\n                                 (seq)\n                                 (map str)\n                                 (map #(Integer. %)))\n                    sum (reduce + numbers)\n                    squares (reduce + (map #(* % %) numbers))]\n                (<  number squares)))]\n      (filter check x))))", "problem": 120, "user": "506c0a02e4b0eda3100c090d"}, {"code": "(fn [nums]\n  (letfn [(ssd [n]\n               (loop [result 0 x n]\n                 (let [digit (rem x 10)]\n                   (if (zero? x)\n                     result\n                     (recur (+ (* digit digit) result) (quot x 10))))))]\n    (count (filter #(> (ssd %) %) nums))))", "problem": 120, "user": "51857e64e4b0da5a5be3babe"}, {"code": "(fn [col]\n  (letfn [(sq-sum [a] (reduce + (map (comp #(* % %) #(Integer/parseInt (str %))) (str a))))]\n    (count (filter #(< % (sq-sum %)) col))))", "problem": 120, "user": "5233ad08e4b07e3ee2be83ac"}, {"code": "(fn [is]\n  (let [sqr    (zipmap \"0123456789\" (map * (range) (range)))\n        sqrsum #(apply + (map sqr (str %)))]\n    (count (filter #(< % (sqrsum %)) is))))", "problem": 120, "user": "508923d5e4b06d8254e936e8"}, {"code": "(fn [xs]\n  (letfn [(snum [y] (map  (comp read-string str) (seq (str y))))\n          (ssum [ys] (reduce #(+ %1 (* %2 %2)) 0 ys))]\n    (count\n      (filter\n         #(< % (ssum (snum %)))\n         xs))))", "problem": 120, "user": "51dd9370e4b0c33a4e1da40c"}, {"code": "(fn find-all                                                                                                         \n  [coll]                                                                                                               \n  (let [comp-sq (fn [x] (Math/round (reduce + (map #(Math/pow % 2) (map #(Integer/parseInt %) (map str (str x)))))))]  \n    (count(filter #(< % (comp-sq %)) coll))                                                                            \n    )                                                                                                                  \n  )", "problem": 120, "user": "50573ed8e4b0012181721987"}, {"code": "(fn [s]\n  (let\n    [make-digits-seq (fn [x] (map #(Integer/parseInt (.toString %)) (seq (str x))))\n     is-smaller (fn [x] (if (< x (reduce + (map #(* % %) (make-digits-seq x)))) 1 0))]\n    (reduce #(+ (is-smaller %2) %) 0 s)))", "problem": 120, "user": "523b10dfe4b02f719975bdb8"}, {"code": "(fn [col]\n  (letfn [ (s [n] (reduce + (map #(* % %) (map #(read-string (str %)) (str n))))) ]\n  (apply + (map #(if (< % (s %)) 1 0) col))\n  )\n)", "problem": 120, "user": "52117ea7e4b07aea8afc4f70"}, {"code": "(fn [x] \n  (count (filter \n          (fn [y] \n            (let [n (map #(. Integer (parseInt (str %))) (str y))]\n            (< y (apply + (map #(* % %) n))))) \n          x)))", "problem": 120, "user": "52379c46e4b0fae3832e99db"}, {"code": "(fn sum-sq-dg-count [coll]\n  (letfn [(sum-sq-dg [n]\n            (->> (iterate #(quot % 10) n)\n                 (take-while (complement zero?))\n                 (map #(let [x (rem % 10)]\n                         (* x x)))\n                          (reduce +)))]\n    (->> (map (fn [x]\n                [x (sum-sq-dg x)])\n              coll)\n         (filter (fn [[x sum-dg]]\n                   (< x sum-dg)))\n         count)))", "problem": 120, "user": "52381b2ae4b0fae3832e99ef"}, {"code": "(fn [x]\n  (letfn [(sum [a] (reduce + (map #(* % %) a)))\n          (digits [b] (map #(Character/digit % 10) (seq (str b))))]\n    (count (filter #(< % (sum (digits %))) x))))", "problem": 120, "user": "4f2d5f5de4b0d6649770a05a"}, {"code": "(fn [s]\n  (count\n   (filter\n    (fn [n]\n      (let [digits (map #(- (int %) 48) (str n))\n            squared (map #(* % %) digits)]\n            (< n (apply + squared))))\n    s)))", "problem": 120, "user": "5201ada5e4b0b2e020a18f14"}, {"code": "(fn sum-square-digs- [coll]\n  (letfn [(square-digs [x]\n            (map #(Math/pow (Character/digit %1 10) 2)\n                 (str x)))\n          (sum-square [coll-]\n            (apply + coll-))]\n    (count (filter #(< %1 (sum-square (square-digs %1))) coll))))", "problem": 120, "user": "511e763ce4b03e81d390ac29"}, {"code": "(fn problem-120 [& nums]\n\t(letfn [(nums-to-digits \n\t  [num]    \n\t  (loop [n num\n\t         res []]      \n\t    (if (zero? n)\n\t      res\n\t      (recur (quot n 10) (cons (mod n 10) res)))))\n         (sum-of-squares [digits] (reduce + (map #(* %1 %1) digits)))]\n    (count (filter #(< % (-> % nums-to-digits sum-of-squares)) (first nums)))\n   ))", "problem": 120, "user": "52319066e4b0e2e8de81d1e9"}, {"code": "(fn [coll]\n  (count (filter (fn [x]\n                   (< x (apply + (map #(Math/pow (- (int %) 48) 2)\n                                       (str x)))))\n                 coll)))", "problem": 120, "user": "4f9d8083e4b0dcca54ed6d23"}, {"code": "#(count (filter\n(fn [cn] (< cn (apply + (for [ w  (str cn)] \n (let [int_w (Integer. (str w))] (* int_w int_w))\n))))\n\n\n%))", "problem": 120, "user": "522eba30e4b01cdb292c5f0e"}, {"code": "(fn [coll] \n  (let [digit-sum-squared (fn [n] (apply + (map #(let [x (Integer/parseInt (str %))] (* x x)) (seq (str n)))))] \n       (count (filter #(< % (digit-sum-squared %)) coll))))", "problem": 120, "user": "523a9fc9e4b081681ca7adca"}, {"code": "(fn f [a]\n  (let\n    [s #(* % %)\n     r #(+ % (s (- (int %2) (int \\0))))\n     l #(< % (reduce r 0 (str %)))]\n    (count (filter l a))))", "problem": 120, "user": "523ed522e4b057c4b7cd0a78"}, {"code": "(fn sqsum [coll]\n  (count\n    (filter \n      (fn [number]\n        (< number\n           (apply + (map #(* % %) (map (comp #(- % 48) int) (seq (str number)))))\n           )   \n        )   \n      coll\n      )   \n    )   \n  )", "problem": 120, "user": "5228f870e4b0186687e23a98"}, {"code": "(fn [numbers]\n      (count (filter true? (->> (map str numbers)\n                (map sequence)\n                (map #(map (comp read-string str) %))\n                (map #(reduce (fn [cont it]\n                                (+ (* it it) cont)\n                                ) 0 %) )\n                (map #(< %1 %2) numbers)\n                )))\n   )", "problem": 120, "user": "50550f43e4b0b1b9d1860eb7"}, {"code": "(fn [x] (count \n         (filter #(< % \n                     (apply + \n                            (map \n                             (fn [y] (* (java.lang.Integer/parseInt (str y)) (java.lang.Integer/parseInt (str y)))) \n                             (str %))))\n                 x)))", "problem": 120, "user": "510c123be4b078ea7192110e"}, {"code": "(fn [nums]\n  (let [f (fn [n] (->>\n                    n str\n                    (map (comp read-string str))\n                    (map #(* % %))\n                    (reduce +)))]\n    (->> nums (filter #(> (f %) %)) (count))))", "problem": 120, "user": "521dceeae4b050d5da042802"}, {"code": "(fn [coll]\n  (->> coll\n    (map (fn [i]\n           [i (map (comp read-string str) ((comp seq str) i))]))\n    (map (fn [num-digits] [(first num-digits)\n                           (reduce #(+ (* %2 %2) %1) 0 (second num-digits))]))\n    (filter #(< (first %) (second %)))\n    count))", "problem": 120, "user": "50ef96a1e4b0bdaecbb47d9d"}, {"code": "(fn [s] \n  (count \n   (filter \n    (fn [n] \n      (< n (reduce + \n        (map \n          #(* % %) \n          (read-string \n            (clojure.string/join \" \" (str \\( n \\)))))))) s)))", "problem": 120, "user": "524be8e0e4b09eba1c0223f1"}, {"code": "(fn [s]\n  (let [squared #(let [x (Integer/parseInt (str %))] (* x x))\n        square-of-sums #(apply + (map squared (str %)))]\n    (count (filter #(< % (square-of-sums %)) s))))", "problem": 120, "user": "51990df9e4b068aa333628fc"}, {"code": "(fn [s]\n  (count (filter (fn [x] (< x (reduce #(+ % (* %2 %2)) 0 (map #(- (int %) 48) (str x))))) s)))", "problem": 120, "user": "4f048f67535dcb61093f6bd3"}, {"code": "(fn [xs] (count (filter (fn [v] (< v (reduce + (map #(-> % str Integer/parseInt (Math/pow 2)) (str v))))) xs)))", "problem": 120, "user": "523b1a65e4b02f719975bdbd"}, {"code": "#(count\n  (filter\n   (fn [n]\n     (let [s (.toString n)\n           n-seq (map (fn [c] (Integer/parseInt (str c))) s)\n           n2-seq (map (fn [x] (* x x)) n-seq)\n           sum-n2 (apply + n2-seq)]\n       (< n sum-n2)\n       )\n     )\n   %\n   )\n  )", "problem": 120, "user": "523f0bbfe4b01c266ffa7f91"}, {"code": "(fn [coll]\n  (count\n    (filter #(< (first %) (reduce + (second %)))\n            (for [i coll]\n              [i\n               (map (comp #(Math/pow % 2)\n                          #(Integer/parseInt %))\n                    (map str (str i)))]))))", "problem": 120, "user": "4fdbc075e4b05e33b9224f61"}, {"code": "(fn [coll]\n  (count\n   (filter #(< % \n               (reduce (fn [r c] (let [d (Integer. (str c))]\n                                   (+ r (* d d))))\n                       0 (str %))) coll)))", "problem": 120, "user": "52479487e4b05ef8e38e6373"}, {"code": "(fn [values]\n  (reduce + (map\n              (fn [value] (let [val-lst (map (fn [x] (read-string (str x))) (seq (str value)))]\n                           (if (< value (reduce +  (map #(* % %) val-lst)))\n                             1\n                             0))) values)))", "problem": 120, "user": "523288fee4b035af41902a88"}, {"code": "(fn [coll]\n  (letfn [(square [n] (* n n))\n          (smaller-than-sum-of-square? [n] (< n (->> (str n)\n                                                     (map (comp square (fn [s] (Integer/parseInt s)) str))\n                                                     (reduce +))))]\n    (count (filter smaller-than-sum-of-square? coll))))", "problem": 120, "user": "5213d7aae4b0961f15ac4d72"}, {"code": "(fn [n]\n   (count\n    (filter\n     (fn [x]\n       (<\n        x\n        (reduce #(+ %1 (* %2 %2)) 0 (map #(- (int %) (int \\0)) (str x)))\n        )\n       )\n     n\n     )\n    )\n   )", "problem": 120, "user": "52586d24e4b0cb4875a45cb0"}, {"code": "(fn csssq [ xs ]\n  (letfn [(digits [n] (map #(- (int %) (int \\0)) (str n)))\n          (sq [xs] (map #(* % %) xs))\n          (ssq [x] (< x (reduce + (sq (digits x)))))]\n    (count (filter ssq xs))))", "problem": 120, "user": "5217c26fe4b0a4bccb16cab8"}, {"code": "(fn [x]\n  (let [q (fn [x]\n    (apply + (map (comp #(* % %) read-string str) (str x))))]\n    (count (filter #(< % (q %)) x))))", "problem": 120, "user": "5236cd89e4b0e010857b4e45"}, {"code": "#(count \n  (filter \n    (fn [initValue]\n      ( letfn \n        [( squareSum [y sum]\n           ( if \n             (= y 0) \n             sum \n             ( squareSum \n               (quot y 10) \n               ( + \n                 sum \n                 ( * \n                   (rem y 10) \n                   (rem y 10) \n                 )  \n               )\n             )\n           )\n        )]\n       (< initValue (squareSum initValue 0))\n      )\n    )\n    %\n  )\n)", "problem": 120, "user": "51899ad2e4b0288ada3dbdac"}, {"code": "(fn [s1]\n\t(count\n     \t(filter (fn [x] (< x (reduce #(+ %1 (* (- (int %2) 48) (- (int %2) 48))) 0 (str x)))) s1\n        )\n    )\n)", "problem": 120, "user": "525ba7bbe4b0cb4875a45d28"}, {"code": "(fn [s]\n  (let [small (fn [n] (< n (->> n str (map #(- (int %) 48)) \n                                (map #(* % %)) (reduce +))))]\n    (count (filter #(small %) s))))", "problem": 120, "user": "5246e945e4b0644eb7b0783b"}, {"code": "(fn [t] ( count  ( ->> t (filter (fn[c] (< c  ( ->> (str c) ( map #(Character/getNumericValue %) ) ( map #(* % %)) (reduce +) ) ) ) ) )))", "problem": 120, "user": "5225b16de4b0d2f5d1e2c0ed"}, {"code": "(fn [x] (reduce (fn [sum n]\n          (let [digits (->> n\n                           str\n                           (map str)\n                           (map #(Long/parseLong %)))\n                digits (for [d digits] (* d d))]\n            (if (< n (apply + digits))\n              (inc sum)\n              sum)))\n        \n         0\n         x))", "problem": 120, "user": "4fcbc18ae4b0ee37620e185c"}, {"code": "(fn [l] (count (filter (fn [x] (< x (apply + (map (comp #(* % %) read-string str)\n                                                  (str x)))))\n                       l)))", "problem": 120, "user": "522b922ee4b0d34ee08e71c3"}, {"code": "(fn [s]\n(count (filter  \n#(< % (loop [x % res 0]\n      (if (zero? x)\n      res              \n      (recur (quot x 10) (+ res (* (rem x 10) (rem x 10))))\n                  )\n)) s) ))", "problem": 120, "user": "5259a16ee4b0cb4875a45ce1"}, {"code": "(fn [x]\n  (let [s-sq (fn [a] (reduce + (map #(* % %) a)))\n        get-sq (fn [z](map #(Integer/parseInt (str %)) (seq (str z))))\n        lt (fn [y] (if (< y (s-sq (get-sq y))) 1 0))]    \n    (reduce + (map lt x))))", "problem": 120, "user": "51622fb8e4b009fba0926e3f"}, {"code": "(fn [coll] (count (filter (fn [x] (< x (reduce \n             (fn [sum y] (+ sum (* y y))) 0 (map \n               (fn [z] (- (int z) 48)) (seq (str x)))))) coll)))", "problem": 120, "user": "5244fa73e4b0d8acf9ed6acb"}, {"code": "(fn[r] (count (filter #(< % (->> %\n                    str\n                    (partition 1 1)\n                    (flatten)\n                    (map (fn[v] (let [d (read-string (str v))] (* d d))))\n                    (apply +)\n                 )) r)))", "problem": 120, "user": "525ed5f4e4b0cb4875a45db8"}, {"code": "(fn [input] (count (filter (fn [n] (let [sum (reduce + (map #(let [i (Integer. (str %))] (* i i)) (seq (str n))))] (> sum n))) input)))", "problem": 120, "user": "5210ac52e4b080a8d9b9d63e"}, {"code": "(fn\n  [coll]\n  (let [sumsq (fn [nums] (reduce + (map #(* % %) nums)))\n        digits (fn [n] (map #(Character/digit % 10) (str n)))]\n  (count (filter #(< % (sumsq (digits %))) coll))))", "problem": 120, "user": "525fffb8e4b03e8d9a4a702b"}, {"code": "(fn\n  [lst]\n  (let [powers-of-10 (fn [ceil] (take ceil (iterate (partial * 10) 1)))\n        digits (fn [val] (if (zero? val)\n                           (list 0)\n                           (map (fn [pow] (rem (quot val pow) 10))\n                                (powers-of-10 (-> val Math/log10 Math/floor int inc)))))\n        l2-norm (fn [arr] (apply + (map #(Math/pow % 2) arr)))\n        less-than-squared? (fn [elt] (> (-> elt digits l2-norm) elt))]\n    (count (filter less-than-squared? lst))))", "problem": 120, "user": "4ef7a483535dced4c769f258"}, {"code": "(fn [b] (count (filter (fn [k] (> (reduce + (map #(* % %) ((fn g[n] (when-not (zero? n) (cons (mod n 10) (g (quot n 10))))) k))) k)) b)))", "problem": 120, "user": "51f2851fe4b0210f90e7454b"}, {"code": "(fn [xs] (count (filter (fn [x]\n  (let [square (fn [x] (* x x))\n        sum (reduce #(+ % (-> %2 str Integer. square)) 0 (-> x str seq))]\n    (< x sum))) xs)))", "problem": 120, "user": "514f0723e4b019235f6c0599"}, {"code": "(fn total [lst] \n  (let [sofsq (fn [num] \n                (reduce \n                 #(let [d (- (int %2) 48)] (+ %1 (* d d))) \n                 0 \n                 (seq (str num)))) ]\n    (count (for [x lst :when (> (sofsq x) x)] x))))", "problem": 120, "user": "52655949e4b03e8d9a4a710b"}, {"code": "(fn [s]\n  (letfn [(digits-of\n           ([n]\n            (digits-of n []))\n           ([n digits]\n            (if (< n 10)\n              (cons n digits)\n              (digits-of (quot n 10) (cons (rem n 10) digits)))))\n          (square [n]\n              (* n n))\n          (sum-squared-digits-of [n]\n              (reduce + (map square (digits-of n))))]\n    (count (filter #(< % (sum-squared-digits-of %)) s))))", "problem": 120, "user": "5236b6bce4b05f3be1c7c8fe"}, {"code": "(fn [s]\n  (let [digits (fn [n] (map #(- (int %) (int \\0)) (.toString n)))\n        ssum (fn [n] (reduce + (map #(* % %) (digits n))))]\n        \n    (count (filter #(< % (ssum %)) s))))", "problem": 120, "user": "524cdd51e4b0752c4cb68ccc"}, {"code": "(fn sqrd [rng]\n  (letfn [(foo [num]\n            (let [seq (map (fn [v]\n                             (let [x (- (int v) 48)]\n                               (* x x))) (str num))]\n              [num (reduce #(+ %2 %) 0 seq)]))]\n    (count (filter #(< (first %) (second %)) (map foo rng)))))", "problem": 120, "user": "4db6ce85535d1e037afb217f"}, {"code": "(fn f [l]\n  (count (filter\n     (fn [i] (< i (apply + (map #(Math/pow (- (int %) 48) 2) (str i))))) l\n     )))", "problem": 120, "user": "52593207e4b0cb4875a45cd3"}, {"code": "(fn [coll]\n  (letfn [(digits [n]  (map #(Integer. (str %)) (str n)))]\n    (count (filter #(< % (apply + (map (fn [a] (* a a)) (digits %)))) coll))))", "problem": 120, "user": "524ae8e6e4b09eba1c0223b5"}, {"code": "(fn [xs]\n  (count\n   (filter\n    (fn [x]\n      (<\n       x\n       (apply + (->> x\n                     (iterate #(quot % 10))\n                     (take-while #(> % 0))\n                     (map #(mod % 10))\n                     (map #(* % %))))))\n    xs)))", "problem": 120, "user": "525f51bde4b0cb4875a45dc8"}, {"code": "(fn solve [xs]\n  (letfn [(digits [n]\n            (map #(- (int %) 48) (str n)))\n          (sq-digits [n]\n            (reduce + (map #(* % %) (digits n))))]\n    (count (filter #(< % (sq-digits %)) xs))))", "problem": 120, "user": "511aa2a4e4b0c87c59c9670a"}, {"code": "(fn smaller-sqdig [coll]\n  (count\n    (for [x coll\n          :when (< x\n                   ((fn sum-sq-dig [n]\n                     (loop [x n res 0]\n                       (if (= x 0)\n                         res\n                         (let [dig (rem x 10)]\n                           (recur (quot x 10) (+ res (* dig dig))))))) x))]\n      x)))", "problem": 120, "user": "526ee63de4b03e8d9a4a733f"}, {"code": "(fn p120 [is]\n  (letfn [(test1 [i]\n                 (> (apply + (map (comp #(* % %) #(- (int %) 48)) (char-array (str i))) ) i))]\n    (count (filter test1 is))))", "problem": 120, "user": "5272669de4b03e8d9a4a742e"}, {"code": "(fn [s]\n  (count (filter (fn [x]\n    (< x (reduce + 0\n      (map (fn [c]\n        (Math/pow (Integer/parseInt (str c)) 2))\n        (seq (str x)))))) s)))", "problem": 120, "user": "5272d4b7e4b03e8d9a4a7453"}, {"code": "(fn [s]\n  (count (filter (fn [n] (> (->> (.toString n) (map #(Integer/parseInt (.toString %))) (map #(* % %)) (reduce +)) n)) s)))", "problem": 120, "user": "526439a4e4b03e8d9a4a70cc"}, {"code": "(fn [xs]\n  (count\n    (filter \n      (fn [i]\n        (>\n          (#(loop [n % res 0]\n              (if (= n 0) res\n                (let [last (mod n 10)]\n                  (recur (quot n 10) (+ res (* last last)))))) i) i))\n      xs)))", "problem": 120, "user": "52667ecfe4b03e8d9a4a713e"}, {"code": "(fn [coll] (let [sum-sq-digits\n                 (fn [result digits]\n                   (if (= 0 digits)\n                     result\n                     (let [d (rem digits 10) n (quot digits 10)]\n                       (recur (+ result (* d d)) n)\n                     )\n                   )\n                 )]\n             (loop [c coll result 0]\n               (if (nil? c)\n                 result\n                 (if (< (first c) (sum-sq-digits 0 (first c)))\n                   (recur (next c) (inc result))\n                   (recur (next c) result)\n                 )\n               )\n             )\n           )\n)", "problem": 120, "user": "526dd90de4b03e8d9a4a72fe"}, {"code": "(fn [ns]\n  (count\n    (filter\n     (fn [n]\n       (< n\n          (->> (str n)\n               (map #(Math/pow (Integer/parseInt (str %)) 2))\n               (apply +))))\n     ns)))", "problem": 120, "user": "525431dfe4b0541d1855b970"}, {"code": "(fn [nrs]\n  (count \n   (filter \n\t(fn [nr]\n      (let [\n            digits (fn [number]\n                     (loop [digits [] n number]\n                       (if (< n 10)\n                           (conj digits n)\n                           (recur (conj digits (rem n 10)) (int (/ n 10)) )\n                       )\n                     )\n                   )\n              ]\n              (< nr (reduce #(+ %1 (* %2 %2)) 0 (digits nr)) )\n        ) \n    ) \n    nrs )))", "problem": 120, "user": "522d3a16e4b0e26240291d50"}, {"code": "(fn [s]\n    (letfn [(lt-sq [n] (< n (apply + (map #(Math/pow (Integer/parseInt (str %)) 2) (.toString n)))))]\n      (count (filter true? (map lt-sq s)))))", "problem": 120, "user": "526f9715e4b03e8d9a4a7372"}, {"code": "(fn [l]\n  (count (filter #(< %\n                     (apply + \n                            (map (fn [x] (* (Integer. x)\n                                            (Integer. x)))\n                                 (re-seq #\"\\d\" (str %)))))\n                 l)))", "problem": 120, "user": "52736ca1e4b03e8d9a4a747e"}, {"code": "(let\n  [sum-squares (fn [x] (apply + (map #(Math/pow (Integer/valueOf (str %)) 2) (String/valueOf x))))\n   count-less-than-sum (fn [x] (count (filter #(< % (sum-squares %)) x)))]\n  #(count-less-than-sum %))", "problem": 120, "user": "51f13b80e4b06a20a2523f38"}, {"code": "(fn a [col] (letfn [(lt [x] (< x (reduce + (map #(* % %) (dig x))))) (dig [x] (loop [r x o []] (if(zero? r)(if-not(empty? o)(identity o)(identity [0]))(recur (quot r 10) (cons (mod r 10) o)))))] (count(filter #(lt %) col))))", "problem": 120, "user": "527a8eb7e4b03e8d9a4a755f"}, {"code": "(fn [s] \n\t (count (filter (fn [y] (< y (reduce #(+ %1(* %2 %2)) 0 (map #(Integer. (str %))(str y))))) s))  \n  )", "problem": 120, "user": "5274eb56e4b03e8d9a4a74bb"}, {"code": "(fn [coll] \n  (let [myfn \n          (fn [num]\n            ( let[ digits (map #(Integer/parseInt %) (re-seq #\"\\d\" (str num)))\n                          sqr-digits (map #(* % %) digits)\n                          sqr-digits-sum (reduce + sqr-digits) \n                        ]\n              (if (< num sqr-digits-sum) 1 0)                     \n                  ))]\n    (reduce + 0 (map myfn coll) )\n))", "problem": 120, "user": "4db03885838c48654951d9bd"}, {"code": "(fn [s] (reduce + (for [i s] (if (> (reduce + (map #(* % %) (map #(Integer/parseInt %) (re-seq #\"\\d\" (str i))))) i) 1 0))))", "problem": 120, "user": "525c575be4b0cb4875a45d38"}, {"code": "(fn [xs] \n  (count \n   (filter \n    (fn [x] (> (reduce \n                 + \n                (map #(* (Integer/parseInt (str %)) (Integer/parseInt (str %))) (str x))) x)) \n    xs)))", "problem": 120, "user": "50cf21dee4b0e61f11ddcd8b"}, {"code": "(fn [c]                                                                    \n   (reduce (fn [m v]                                                       \n             (if (< v                                                      \n                    ((fn [n]                                               \n                       (reduce + (map #(reduce * (repeat 2 (- (int %) 48)))\n                                      (str n) ) ) ) v) )                   \n               (inc m)                                                     \n               m ) )                                                       \n           0                                                               \n           c ) )", "problem": 120, "user": "4df20dda535d08e6dec9fe23"}, {"code": "(fn [coll] \n  (count \n   (filter \n    (fn [c] \n       (< c \n          (apply \n           + \n           (map \n            #(* (Integer/valueOf (str %)) (Integer/valueOf (str %))) \n            (str c)))))\n    coll)))", "problem": 120, "user": "51e38568e4b0c611d6113e43"}, {"code": "#(count (filter (fn [n] (< n (apply + (map (fn [c] (Math/pow (- (int c) 48) 2)) (str n))))) %))", "problem": 120, "user": "527b856fe4b03e8d9a4a758d"}, {"code": "(fn [x] \n  (count \n   (filter (fn [[a b]] (< a b))\n   \t(map (fn [t] \n           [t (reduce #(+ %1 (Math/pow (Character/digit %2 10) 2))\n                      0 (str t))])\n         x\n         ))))", "problem": 120, "user": "4e74e119535d7a570dd295bc"}, {"code": "#(count (filter (fn [n] (< n (reduce + (map (comp (fn [x] (* x x)) read-string str) (str n))))) %))", "problem": 120, "user": "519ef784e4b087743fad2198"}, {"code": "(fn cs [coll]\n  (count\n    (filter\n      (fn f [l]\n        (< l (reduce\n               #(-> %2\n                    (Integer/parseInt)\n                    (Math/pow 2)\n                    (+ %))\n               0\n               (re-seq #\"\\d\" (str l)))))\n      coll)))", "problem": 120, "user": "51aefceee4b09397d5109797"}, {"code": "(fn [ns] (reduce + (map (fn [n] (if (< n (reduce + (map #(* % %) (map #(Character/digit % 10) (str n))))) 1 0)) ns)))", "problem": 120, "user": "51b0e7b3e4b0c53cf2e68a6e"}, {"code": "(fn [sq] \n (reduce + 0\n\t (map \n\t\t\t(fn [num]\n\t\t\t\t (if \n\t\t\t  \t (< num (reduce + 0 (map #(* (Character/getNumericValue %) (Character/getNumericValue %)) (str num))))\n\t\t\t  \t 1 0))\n\t\tsq) \n\t)\n)", "problem": 120, "user": "5029f263e4b023940c84aa45"}, {"code": "(fn [c] (count (filter (fn [n] (< n (reduce + \n                                            (map #(* % %)\n                                                 (map #(Character/digit % 10) (str n))))))\n                       c)))", "problem": 120, "user": "5078d366e4b08327cd804a5b"}, {"code": "(fn how-many [coll]\n  (count (filter (fn good? [n]\n                   (let [digs (map (fn [c] (Integer. (str c)))\n                                   (str n))\n                         sqd (map #(* % %) digs)\n                         sum (reduce + 0 sqd)]\n                     (< n sum)))\n                 coll)))", "problem": 120, "user": "4f35b2ace4b0e243712b1ec5"}, {"code": "(fn sumsq[rng]\n(count  (filter\n      (fn[b]\n\n(>\n      (int  (reduce +\n            (map\n              (fn[c]\n                  (Math/pow (Character/getNumericValue c) 2)\n              )\n              (flatten (partition 1 (str b))) ;arg to map\n            )\n        ))\n      b)\n      )\n    rng\n  )\n)\n)", "problem": 120, "user": "5229211be4b04c906c9c6a63"}, {"code": "(letfn\n    [(digits [x] \n       (map #(Integer/parseInt (str %)) (str x)))\n     (square-sum [y] \n       (apply + (map #(* % %) \n                     (digits y))))]\n  (fn [coll] \n    (count (filter #(< % (square-sum %)) coll))))", "problem": 120, "user": "4ea5ba92535d7eef308072d9"}, {"code": "(fn [coll]\n  (letfn [(ss [n] (loop [n n acc 0]\n             (let [r  (rem n 10)\n                   sq (* r r)]\n               (if (< n 10)\n                 (+ acc sq)\n                 (recur (quot n 10) (+ acc sq))))))]\n    (count (filter #(< % (ss %)) coll))))", "problem": 120, "user": "528b08efe4b0239c8a67ae8a"}, {"code": "(fn [x]\n   (count \n     (filter\n       (fn [a]\n (if (< a (apply +\n            (map (fn [b] (* (- (int b) 48) (- (int b) 48))) (str a))))\n           true false)\n         )\n       x)\n   \n   ))", "problem": 120, "user": "528ce039e4b0239c8a67aebc"}, {"code": "(fn [list]                                                                                                                                                                             \n  (letfn [(sum-of-squared-digits [number]                                       \n    (letfn [(digits [number]                                                    \n      (if (> number 0)                                                          \n        (conj (digits (.intValue (/ number 10))) (mod number 10))               \n        []))]                                                                   \n    (reduce + (map #(* % %) (digits number)))))]                                \n                                                                                \n  (.size (filter #(< % (sum-of-squared-digits %)) list))))", "problem": 120, "user": "4ff83003e4b0678c553fc396"}, {"code": "(fn [x] \n  (count \n   (filter \n    (fn [c] (< c (apply + (map #(let [x (-> % str Integer/parseInt)] (* x x)) (str c)))))\n     x)))", "problem": 120, "user": "528d1094e4b0239c8a67aebe"}, {"code": "(comp count (partial filter #(< % (reduce + (map (comp (fn [n] (* n n)) read-string str) (str %))))))", "problem": 120, "user": "52753740e4b03e8d9a4a74c1"}, {"code": "(fn clj120 [ints]\n  (count\n    (filter\n      (fn [n]\n        (< n (apply + (map #(-> %\n                                int\n                                (- 48)\n                                (Math/pow 2))\n                           (str n))))) ints)))", "problem": 120, "user": "5290257ae4b0239c8a67af03"}, {"code": "(fn [xs] (count (filter (fn [x] (< x  (apply + (map #(* % %) (map #(- (int %) 48) (str x))))))\n                        xs)))", "problem": 120, "user": "4f9510b5e4b0dcca54ed6cc7"}, {"code": "(fn [xs]\n  (let [num->digits (fn [n] (->> n str (re-seq #\"\\d{1}\") (map #(Integer. %))))\n        sum-sq (fn [x] (->> x (map #(* % %)) (reduce +)))\n        ss-digits (->> xs (map num->digits) (map sum-sq))]\n  (count (filter true? (map > ss-digits xs)))))", "problem": 120, "user": "52950ab6e4b02ebb4ef7501a"}, {"code": "(fn [xs]\n    (let [digits (fn [x] (map #(Integer/parseInt (str %)) (str x)))\n          sss (fn [x] (< x (apply + (map #(* % %) (digits x)))))]\n      (count (filter sss xs))))", "problem": 120, "user": "5141abf1e4b02fd87f5064c3"}, {"code": "(fn sum-of-square-of-digits [colls]\n   (letfn[(get-sum\n            [x]\n            (loop [sum 0\n                   x x]\n              (let[r (rem x 10) \n                   q (quot x 10)]\n                (if(zero? q)\n                  (+ sum (* r r))\n                  (recur (+ sum (* r r)) q))))) \n          (is-smaller\n            [x]\n            (< x (get-sum x)))]\n     (count (filter is-smaller colls))))", "problem": 120, "user": "5273562ae4b03e8d9a4a7479"}, {"code": "(fn [arr] (let [to-sum (fn [numb](let [to-int (fn [num] (- (int num) 48))]\n(reduce #(let [numero (to-int %2)] (+ (* numero numero) %1)) 0 (seq (str numb)))))]\n                (reduce #(if (< %2 (to-sum %2)) (inc %1) %1) 0 arr)))", "problem": 120, "user": "51cec7b1e4b0e42293a2255b"}, {"code": "(fn count-less [coll]\n  (letfn [(square [num] (* num num))\n          (sum-squares [num] (let [digits (map #(- (int %1) (int \\0)) (seq (str num)))]\n                                  (apply + (map square digits))))\n          ]\n    (count (filter true? (map #(< %1 (sum-squares %1)) coll)))))", "problem": 120, "user": "4e0d5a5a535d04ed9115e7b5"}, {"code": "(fn [x] (count (second ( partition-by identity (sort (map (fn [y] (< y (+ (* (mod y 10) (mod y 10)) (* (mod (/ (- y (mod y 10))10)10) (mod (/ (- y (mod y 10))10)10) ) ) )) x))))))", "problem": 120, "user": "5296008fe4b02ebb4ef7502a"}, {"code": "(comp count \n      (partial filter (fn [m] (->> (str m) (map (comp read-string str)) (map #(* % %)) (apply +) (< m)))))", "problem": 120, "user": "528e64b7e4b0239c8a67aedd"}, {"code": "(fn [input]\n  (count\n   (filter\n    #(<\n      %\n      (reduce\n       +\n       (map\n        (fn [x]\n          (let [y (Integer/parseInt (str x))]\n            (* y y)))\n        (seq (str %)))))\n    input)))", "problem": 120, "user": "528bba38e4b0239c8a67aea9"}, {"code": "(fn [i] (reduce + (map (fn [x] (if (< x (reduce (fn [x y] (+ x (* y y))) 0\n                                     (map #(Integer/parseInt (str %)) (str x))))\n                      1\n                      0)) i )))", "problem": 120, "user": "52140b53e4b0961f15ac4d7e"}, {"code": "(fn [c]\n  (count (filter (fn [x]\n            (< x (apply + (map (comp #(* % %) read-string str) (str x)))))\n          c)))", "problem": 120, "user": "52951156e4b02ebb4ef7501b"}, {"code": "(fn ssqd [coll]\n  (letfn [(smaller? [n]\n            (let [digits (map (fn [x] (Integer. (str x))) (into [] (str n)))]\n              (< n (reduce #(+ %1 (* %2 %2)) 0 digits))))]\n    (count (filter smaller? coll))))", "problem": 120, "user": "52463059e4b09dbe66b56198"}, {"code": "(fn [col]\n  (count (filter\n           (fn [x] (< x (apply + (map #(* % %)\n                                      (map #(Integer/parseInt (str %))\n                                           (seq (str x)))))))\n           col)))", "problem": 120, "user": "528a791ae4b0239c8a67ae77"}, {"code": "(fn [sq]\n  (let [digits\n    \t(fn digits [n]\n          (if (= n 0) []\n            (conj (digits (quot n 10)) (mod n 10))))]\n  (reduce\n   (fn [acc el]\n     (if (> (apply + (map #(* % %) (digits el))) el)\n       (inc acc)\n       acc))\n   0 \n   sq)))", "problem": 120, "user": "529ce629e4b04e0c58e87b6e"}, {"code": "#(count (filter (fn [n] (< n (apply + (map (fn [c] (Math/pow (- (int c) 48) 2)) (str n))))) %))", "problem": 120, "user": "51ad244fe4b09397d510977f"}, {"code": "(fn countlist [coll2] (count ((fn creatlist [coll] (filter (fn sum-num-square2 [digits] (< digits (apply + (map (fn [y] (* y y))\n                                            ((fn num-2-list [x] (if (= 0 x)\n                                                                  []\n                                                                  (conj (num-2-list (int (/ x 10))) (rem x 10)))) digits))))) coll)) coll2)))", "problem": 120, "user": "5296aa9be4b02ebb4ef75034"}, {"code": "(fn [s] (->> s (filter (fn [n] (->> n str (map #(-> % str Integer/parseInt)) (reduce #(+ % (* %2 %2)) 0) (< n)))) count))", "problem": 120, "user": "523b1988e4b02f719975bdbc"}, {"code": "(fn [coll]\n  (count\n   (filter\n   \t(fn [d]\n  \t\t(< d (apply +\n\t\t(map #(* % %) \n   \t  \t(map (comp read-string str) (str d))))))\n   coll)))", "problem": 120, "user": "527ccaf4e4b0757a1b17136d"}, {"code": "(fn f120 [c]\n      (count (filter \n       (fn [n] (< n (reduce + (map #(* % %) (map #(- (int %) (int \\0)) (seq (str n)))))))\n       c)))", "problem": 120, "user": "5267d9bde4b03e8d9a4a7188"}, {"code": "(fn [l]\n  (count\n   (filter \n    (fn [k] \n      (< k (apply + \n                   (map (comp #(* % %) bigint str)\n                        (str k))))) \n    l)))", "problem": 120, "user": "528a3e14e4b0239c8a67ae72"}, {"code": "reduce (fn [ct x]\n            (if (< x (apply + (map (comp #(* % %) read-string str) (str x))))\n              (inc ct)\n              ct)) 0", "problem": 120, "user": "4f0f36a7535d0136e6c22336"}, {"code": "(fn sum-sq [l]\n  (let [td (fn [acc n]\n           \t(if (<= n 0) acc \n            \t(recur (conj acc (mod n 10)) (int (/ n 10)))))\n        ss (fn [n] \n             (reduce + (map #(int (Math/pow % 2)) (td '() n))))]\n    (count (filter #(> (ss %) %) l))))", "problem": 120, "user": "5273e006e4b03e8d9a4a7495"}, {"code": ";(fn [numbers] \n ; (for [[x (range (count numbers))] :let [counts 0 ]:when (< x (fn [x] \n  ;(apply + (map #(- (int %) (int \\0)) (into [] (str (* x x)))))))]\n   ;   (inc counts)\n    ;  ) \n    ; )\n  \n  \n  (fn [numbers]\n   (letfn [(sqr[numb] \n   (apply + (map #(let [x (- (int %) (int \\0))] (* x x)) (str numb))))]\n  (count (filter #(< % (sqr %)) numbers))))", "problem": 120, "user": "52a28e1ce4b04e0c58e87bf0"}, {"code": "(fn [x]\n  (letfn [(sqadd [n] (reduce + (map (comp #(* % %) read-string str) (str n))))]\n    (count (filter #(< % (sqadd %)) x))))", "problem": 120, "user": "51929214e4b08962174cf74c"}, {"code": "(fn [col]\n    (count\n    (filter\n     (fn [n]\n       (let [s (str n)\n             ds (map (comp #(- % 48) int) s)]\n         (< n (apply + (map #(* % %) ds)))))\n     \n     col))\n    )", "problem": 120, "user": "4f77b68de4b0fbe0118ec581"}, {"code": "(fn sosod [coll]\n  (letfn [(sum-of-digits-squared [x] (->> (str x)\n                                          (map #(Integer/parseInt (str %)))\n                                          (map #(* % %))\n                                          (reduce +)))]\n  (count (filter #(< % (sum-of-digits-squared %))\n                 coll))))", "problem": 120, "user": "4fa09916e4b0dcca54ed6d4e"}, {"code": "(fn [xs] (count (filter (fn [x] (< x\n                                   (apply + (map (comp #(* % %) #(Integer/parseInt %) str)\n                                                 (str x)))))\n                        xs)))", "problem": 120, "user": "4ee8b9c9535d93acb0a66884"}, {"code": "(fn [coll]\n  (letfn [(sum-of-square [n]\n            (->> n\n                 str\n                 seq\n                 (map #(Math/pow (Integer. (str %)) 2))\n                 (apply +)))]\n    (count (filter #(< % (sum-of-square %))\n                   coll))))", "problem": 120, "user": "509e62a8e4b08df8156e9e2e"}, {"code": "(fn squirrelly [nums]\n\t(let [\n\t\tdigits \n\t\t(fn [n]\n\t\t\t(loop [rv [] nn n]\n\t\t\t\t(if (zero? nn)\n\t\t\t\t\trv\n\t\t\t\t\t(recur (cons (rem nn 10) rv) (quot nn 10))\n\t\t\t)\n\t\t))\n\t\tsquare\n\t\t(fn [n] (* n n))\n\t\t]\n\t\t(apply + (map (fn [n] ({true 1} (< n (apply + (map square (digits n)))) 0)) nums))\n\t)\n\t)", "problem": 120, "user": "527ba695e4b03e8d9a4a7596"}, {"code": "(fn sum-of-square-digits[x](count (filter \n                                      (fn[i](< i (apply + (map #(reduce * (repeat 2 (Integer. (str %)))) (seq (str i))))))\n                                      x)))", "problem": 120, "user": "52a1edd6e4b04e0c58e87be4"}, {"code": "(fn [coll]\n  (letfn [(dig-10 [n]\n                  ((fn [n d] \n                     (loop [r n dig (if (zero? n) [0] [])]\n                       (if (zero? r) (reverse dig) (recur (int (/ r d)) (conj dig (mod r d)))))) n 10))\n          (gen-happy-num [n]\n                         (reduce + (map #(* % %) (dig-10 n))))]\n    (count (filter #(> (gen-happy-num %) %) coll))))", "problem": 120, "user": "52b43468e4b0c58976d9ad1b"}, {"code": "(fn [xs]\n       (letfn [(sqr [x] (* x x))\n               (ss [s] (reduce + (map sqr (map #(- (int %) 48) (seq (str s))))))]\n         (count (filter #(< % (ss %)) xs))))", "problem": 120, "user": "52a88c4de4b0c58976d9ac30"}, {"code": "(fn [s]\n  (count \n    (filter \n      #(->>\n        (re-seq #\"\\d\" (str %))\n        (map read-string)\n        (map (fn [i] (* i i)))\n        (apply +)\n        (< %)\n      )\n    s)))", "problem": 120, "user": "528652fbe4b0239c8a67ae14"}, {"code": "(fn [arr] (count (filter (fn [x] (< x (Integer/parseInt (reduce (fn [x y]\n                                                                  (let [int-x (Integer/parseInt x) int-y (Integer/parseInt y)]\n                                                                  (str (+ int-x (* int-y int-y))))\n                                                                )\n                                                        (map str (conj (seq (str x)) \\0)))))) arr)))", "problem": 120, "user": "52a5d1f3e4b0c58976d9abf1"}, {"code": "(fn [coll]\n  (let [digits (fn [n] (map #(- (int %) (int \\0)) (str n)))\n        sumsq (fn [xs] (reduce #(+ %1 (* %2 %2)) 0 xs))]\n    (count (filter #(< % (sumsq (digits %))) coll))))", "problem": 120, "user": "4fc3a72ae4b081705acca342"}, {"code": "(fn [a] (count (filter #(< % (reduce + (map (fn [x] (* x x)) (map (fn [x] ( read-string (str x))) (str %))))) a)))", "problem": 120, "user": "4e3a9dae535deb9a81d77f4a"}, {"code": "(fn\n  [s]\n  (count (for [c s\n               :let [sum (reduce #(+ % (* %2 %2)) 0 (map #(Integer/parseInt (str %)) (seq (str c))))]\n               :when (< c sum)]\n    c)))", "problem": 120, "user": "51852961e4b0da5a5be3babb"}, {"code": "(fn count-less-sum-square-digits\n  [nums]\n  (letfn\n      ((n->digits\n         [num]\n         (loop [n num res []]\n           (if (< n 10)\n             (cons n res)\n             (recur (quot n 10) (cons (rem n 10) res)))))\n\n       (sum-square-digits\n         [num]\n         (reduce #(+ %1 (* %2 %2)) 0 (n->digits num)))\n\n       (less-sum-square-digits?\n         [num]\n         (< num (sum-square-digits num))))\n    (count (filter #(less-sum-square-digits? %) nums))))", "problem": 120, "user": "524f4256e4b0541d1855b808"}, {"code": "(comp count filter) #(< % (loop [n % ret 0]\n                               (if (zero? n)\n                                 ret\n                                 (recur (int (/ n 10))\n                                        (+ ret (* (mod n 10) (mod n 10)))))))", "problem": 120, "user": "52a9154ee4b0c58976d9ac3b"}, {"code": "(fn [s] \n  (let [ssd (fn [d]\n              (loop [n d acc 0]\n                (let [m (mod n 10)]\n                  (if (= n 0) \n                    acc\n                    (recur (quot n 10) (+ acc (* m m)))))\n                ))]\n    (reduce + (map #(if (< % (ssd %)) 1 0) s))))", "problem": 120, "user": "52ba43d0e4b07a9af57922cd"}, {"code": "(fn lts [lst]\n  (count (filter \n   (fn [n]\n     (< n\n        (let [nums (map #(Character/digit % 10) (str n))]\n          (reduce #(+ (* %2 %2) %1) 0 nums))))\n   lst)))", "problem": 120, "user": "52b405e1e4b0c58976d9ad15"}, {"code": "(fn [coll]\n      (count\n        (filter\n          #(< % (reduce +\n                        (let [digits (map (comp (partial - 48) int) (seq (str %) ) )]\n                          (map * digits digits))))\n          coll)))", "problem": 120, "user": "51e28063e4b08e53a149f0f2"}, {"code": "(fn [coll]\n   (letfn [(digits [n]\n                    (let [q (quot n 10)\n                          r (rem n 10)]\n                      (if (zero? q)\n                        (list r)\n                        (concat (digits q) (list r)))\n                      )\n                    )\n          (sumsq [n] (apply + (map #(* % %) (digits n))))]\n     (count (filter #(< % (sumsq %)) coll))\n     ))", "problem": 120, "user": "529d4f4be4b04e0c58e87b79"}, {"code": "(fn [s]\n    (let [sqd (fn [ch] (* (read-string (str ch))\n                         (read-string (str ch))))]\n      (count (filter (fn [x]\n                       (< x (apply + (map sqd (seq (str x))))))\n                     s))))", "problem": 120, "user": "4eda8d7c535d10e5ff6f530f"}, {"code": "(fn [nums]\n  (let [digits (fn [n] (map #(Character/getNumericValue %) (str n)))\n        square #(reduce * (repeat 2 %))\n        smaller #(< % (reduce + (map square (digits %))))\n        ]\n    (reduce + (for [one (map smaller nums) :when (true? one)] 1))))", "problem": 120, "user": "4f3d83b5e4b0e243712b1f69"}, {"code": "(fn s [x]\n  (reduce\n   (fn g [a,b]\n     (if\n       (< b\n          (reduce\n           (fn c [y,z] (+ y (* z z)))\n           0\n           (loop [n b res []]\n             (if (zero? n) res (recur (quot n 10) (cons (mod n 10) res))))))\n       (inc a)\n       a))\n   x))", "problem": 120, "user": "52b7a904e4b0c58976d9ad51"}, {"code": "(fn [x] \n  (letfn [(toInt [n] (map #(Character/getNumericValue %) (str n)))\n          (sumUp [c] (reduce + (map #(* % %) c)))]\n         (count (filter #(> (sumUp (toInt %)) %) x))\n  )  \n)", "problem": 120, "user": "52774dd2e4b03e8d9a4a74ff"}, {"code": "(fn [l]\n(count (filter \n  (fn [a]\n    (let [ sos(->> (str a)\n          (map #(Integer/parseInt (str %)))\n          (map #(* % %))\n          (reduce +))]\n          (> sos a)))\n        l)))", "problem": 120, "user": "4db2cd84535df7e46ed9b6c6"}, {"code": "(fn [col] \n  (count \n   (filter true? (map \n  (fn [x] (< x (reduce + \n      (map (fn [i] (* i i)) \n           (map #(- (int %) 48) (str x))))))  \n col))))", "problem": 120, "user": "4ffa8affe4b0678c553fc3bd"}, {"code": "(fn digit-check [col]\n  (let [\n        sum-sq-digits (fn [n] \n                        (loop [\n\t\t\t\t\t\t\t\t\t\t\t         n n\n\t\t\t\t\t\t\t\t\t\t\t         acc 0\n\t\t\t\t\t\t\t\t\t\t\t         ]\n\t\t\t\t\t\t\t\t\t\t\t    (let [\n\t\t\t\t\t\t\t\t\t\t\t          digit (rem n 10)\n\t\t\t\t\t\t\t\t\t\t\t          acc-inc (+ acc (* digit digit))\n\t\t\t\t\t\t\t\t\t\t\t          ]\n\t\t\t\t\t\t\t\t\t\t\t      (if \n\t\t\t\t\t\t\t\t\t\t\t        (< n 10)\n\t\t\t\t\t\t\t\t\t\t\t        acc-inc\n\t\t\t\t\t\t\t\t\t\t\t        (recur (int (/ n 10))  acc-inc)))))\n        ]\n    (count (filter #(< % (sum-sq-digits %)) col))))", "problem": 120, "user": "4f05a9cf535dcb61093f6bfc"}, {"code": "(letfn [(squared [x] (reduce + \n                             (map #(* % %) (map #(java.lang.Integer/parseInt (str %))\n                                                (seq (str x))))))]\n   (fn [xs] (reduce +\n                    (map #(if (< % (squared %)) 1 0)\n                         xs))))", "problem": 120, "user": "52a8ca0fe4b0c58976d9ac36"}, {"code": "(fn count-sqr-digits [a-seq]\n  (count \n     (filter \n      \t(fn [x] (< x ((fn [el]\n   \t  \t\t\t\t\t(apply + (map #(* % %) (map #(Integer/parseInt %) (map str (str el)))))      \n      \t              ) x))) \n      a-seq)\n   )\n)", "problem": 120, "user": "52763696e4b03e8d9a4a74d7"}, {"code": "(fn ans [coll]\n  (letfn [(s [n m]\n             (if (zero? n)\n               m\n               (s (quot n 10) (+ m (* (rem n 10) (rem n 10))))))]\n    (count (filter #(< % (s % 0)) coll))))", "problem": 120, "user": "52a55adee4b0c58976d9abe7"}, {"code": "(fn [coll]\n (let [n (last coll)]\n   (cond\n     (<= n 1) 0\n     (<= n 9) (- n 1)\n     (>= n 100) 50\n     :else\n     (+ 8 (count (filter #(let [a2 (quot % 10)\n                           a1 (mod % 10)]\n                       (> \n                         (+\n                          (* a2 (- a2 10))\n                          (* a1 (- a1 1)))\n                         0))\n                    (range 10 (inc n)))))\n   )))", "problem": 120, "user": "52ba2af3e4b07a9af57922cc"}, {"code": "(fn sum-square [coll]\n\t(let [digits (fn [n] (map read-string (re-seq #\"\\d\" (str n))))\n\t\t  square #(* % %)\n\t      sum-digits (fn [n] (reduce + (map square (digits n))))]\n\t(count (filter #(< % (sum-digits %)) coll))))", "problem": 120, "user": "52a62e16e4b0c58976d9abf9"}, {"code": "(fn [x] (count (filter #(<  %  (apply + (map (fn [q] (Math/pow (Character/digit q 10) 2)) (str %)))) x)))", "problem": 120, "user": "4fc18846e4b081705acca331"}, {"code": "(fn [c]\n    (count (filter\n            (fn [n] (->> n\n                    str\n                    (map #(- (int %) 48))\n                    (reduce #(+ % (* %2 %2)) 0)\n                    (< n))\n              )\n            c))\n    )", "problem": 120, "user": "52b577c9e4b0c58976d9ad39"}, {"code": "(fn ssd [xs]\n  (let [digit-sq-sum\n          (fn [x]\n            (apply +\n              (map (fn [y] (* y y))\n                   (map #(Integer. (str %))\n                        (apply list (str x))))))]\n    (count\n      (filter #(< % (digit-sq-sum %))\n              xs))))", "problem": 120, "user": "529e3a4fe4b04e0c58e87b92"}, {"code": "(letfn [(digits [n] (if (zero? n) [] (cons (mod n 10) (digits (quot n 10)))))\n              (good? [n] (< n (reduce + (map #(* % %) (digits n)))))]\n        (fn [s] (count (filter good? s))))", "problem": 120, "user": "5294e44de4b02ebb4ef75016"}, {"code": "(fn [xs] (count (filter #(> (reduce (fn [a x] (+ a (* x x))) 0 (map (comp read-string str) (str %))) %) xs)))", "problem": 120, "user": "52be58d7e4b07a9af579231d"}, {"code": "(fn [lst]\n  (count\n   (filter\n    (fn [n] (< n (reduce + (map #(* % %) (map #(Character/getNumericValue %) (str n))))))\n    lst)))", "problem": 120, "user": "519136e9e4b0f8ef0be96c01"}, {"code": "(fn [s]\n  (reduce \n   \n   (fn [a x]\n     (if (> (reduce (fn [ai xi] (+ ai (* xi xi)))\n             0 (->> x str vec (map #(- (int %) 48))))\n            x) \n       (inc a)\n       a))\n   \n   0 s))", "problem": 120, "user": "515bbcd9e4b0388ca8ca1521"}, {"code": "(fn [xs]\n  (reduce +\n          (map\n           (fn [x] (if (> (reduce + (map #(Math/pow (Integer/parseInt (str %)) 2) (str x))) x) 1 0))\n           xs)))", "problem": 120, "user": "4ea365e2535d7eef308072c5"}, {"code": "(let [f (fn [n] (map #(int (Math/pow (mod (int (/ n (Math/pow 10 %))) 10) 2)) (range 0 (if (= 0 n) 0 (inc (int (Math/log10 n)))))))] (fn [s] (count (filter #(< % (reduce + (f %))) s))))", "problem": 120, "user": "4f47eab2e4b0d56e7bb92bc6"}, {"code": "(fn\n      [vctr]\n       (let [add-square (map (fn [num]\n                              (loop [n num vctr nil]\n                              (if (= 0 n)\n                                  (reduce + (map #(* %1 %2) vctr vctr))\n                                  (recur (quot n 10) (conj vctr (mod n 10))))))  vctr)]\n\t\t\t\t\n            (count (filter #(true? %) (map #(< %1 %2) vctr add-square)))\n ))", "problem": 120, "user": "52c3a0f4e4b0c2d177d620c6"}, {"code": "(fn [s]\n  (let [sum-sq-digits (fn [x]\n                        (apply + (map (comp #(* % %) #(Integer/parseInt (str %))) (str x))))]\n    (count (filter #(< % (sum-sq-digits %)) s))))", "problem": 120, "user": "527cd633e4b0757a1b17136f"}, {"code": "(fn [x] (reduce (fn [a b] (if (< b (reduce + (map #(* (Integer. (str %)) (Integer. (str %))) (rest (clojure.string/split (str b) #\"\"))))) (inc\n a) a)) 0 x))", "problem": 120, "user": "52c1bd29e4b07a9af579236a"}, {"code": "#(reduce (fn [a b] (if (> (apply + (map (fn [x] (Math/pow (- 48 (int x)) 2)) (str b))) b) (+ a 1) a)) %)", "problem": 120, "user": "52c6a0abe4b0c2d177d62111"}, {"code": "(fn [coll]\n  (count (filter (fn [x] (< x (apply + (map #(* (- (int %) 48) (- (int %) 48)) (str x))))) coll)))", "problem": 120, "user": "52cca65be4b07d0d72b2736b"}, {"code": "(fn [xs]\n  (count\n   (filter \n    (fn [x] (< x (apply + (map (fn [x] (-> x .toString Integer/parseInt (Math/pow 2) Math/round)) (.toString x))))) xs)))", "problem": 120, "user": "4f03641a535dcb61093f6a9b"}, {"code": "#(count (filter (fn [x] (< x (reduce (fn [acc chd] (let [d (- (int chd) (int \\0)) ds (* d d)] (+ acc ds))) 0 (seq (str x))))) %1))", "problem": 120, "user": "52cc85abe4b07d0d72b27367"}, {"code": "(fn [xs]\n  (letfn [(sq [x] (* x x))\n          (sumsq [x]  (reduce + (map #(sq ( Integer/parseInt (str %))) (str x))))]\n    (count (filter #(> (sumsq %) %) xs))))", "problem": 120, "user": "4ebe766d535dfed6da9c6d94"}, {"code": "(fn sum_sq [nums]\n  (let [digits (fn [num] (map #(Integer/parseInt %) (rest (clojure.string/split (.toString num) #\"\"))))\n      sumsq (fn [ds] (reduce (fn [acc x] (+ acc (* x x))) 0 ds))]\n  (count (filter (fn [x] (< x (sumsq (digits x)))) nums))))", "problem": 120, "user": "522d0360e4b0806774ddfef7"}, {"code": "reduce (fn [acc x] \n         (if (and (< x 100) (< x \n                               (apply + \n                                      (map (fn [d] \n                                             (* (Integer/parseInt (str d)) \n                                                (Integer/parseInt (str d))))\n                                           (str x))))) \n           (inc acc)\n           acc)) 0", "problem": 120, "user": "52cc09c1e4b07d0d72b27356"}, {"code": "(fn [vctr]\n  (count \n   (filter (fn [x]\n             (< x \n                (apply +\n                         (map \n                          (comp #(* %1 %1) #(Character/getNumericValue %1)) \n                          (str x))    \n                   )))\n           vctr)))", "problem": 120, "user": "5094057fe4b097f48cc38593"}, {"code": "(fn m [coll]\n  (apply + (for [n coll]\n             (let [digits (map #(read-string (str %)) (-> n str seq))\n                   sq (map #(* % %) digits)\n                   sum (reduce + sq)]\n                (if (< n sum) 1 0)))))", "problem": 120, "user": "52828298e4b0757a1b17145b"}, {"code": "(let [ssq (fn [x] (< x (apply + (map #(* % %) (map #(- (int %) 48) (seq (str x)))))))]  \n  #(count (filter ssq %)))", "problem": 120, "user": "52d10680e4b07d0d72b273c3"}, {"code": "(fn[y](apply +(map (fn [x] (if(< x (reduce + (map #(* % %) (map #(- (int %) 48) (str x)))))1 0)) y )))", "problem": 120, "user": "52bbd09ee4b07a9af57922ee"}, {"code": "(fn [nums]\n  (count\n   (filter\n    (fn [num]\n      (let [digits (map #(- (int %) 48) (str num))]\n        (< num\n           (reduce + (map (fn [x] (* x x)) digits)))))\n    nums)))", "problem": 120, "user": "52cf5450e4b07d0d72b273a4"}, {"code": "(fn [coll]\n  (count (filter (fn [x] (< x (reduce + (map #(* % %) (map #(read-string (str %)) (str x)))))) coll)))", "problem": 120, "user": "51a97f7ae4b08d8ec191b827"}, {"code": "(fn [c]\n   (count (filter (fn [n]\n                    (< n (reduce\n                          #(+ % (Math/pow (- (int %2) (int \\0)) 2))\n                          0\n                          (str n)))) c)))", "problem": 120, "user": "52c25645e4b07a9af579237d"}, {"code": "(fn [in]\n  (let [square (fn [x] (* x x))\n        explode (fn [n] (map #(Character/getNumericValue %) (str n)))\n      \tsumOfSquares (fn [s] (reduce + (map square (explode s))))]\n    (count (filter #(< % (sumOfSquares %)) in))))", "problem": 120, "user": "50be9b4ae4b00fb48fed2ef6"}, {"code": "#(count\n  (filter (fn[x]\n        (< x\n           (apply + (map (fn[x](Math/pow (Integer/parseInt x) 2))(drop 1 (clojure.string/split (str x) #\"\"))))))\n      %))", "problem": 120, "user": "51b41150e4b0f094dd986fac"}, {"code": "(fn count-less-sqd-digits [s]\n  (let [sqd-digits  (fn [x]\n                      (let [extract-digits (fn [x]\n                                            (let [places (take-while #(> % 0) (iterate #(quot % 10) x))\n                                                digits (map #(mod % 10) places)\n                                                ]\n                                              digits\n                                              )\n                                            )\n                             sqd-digits (reduce + (map #(* % %) (extract-digits x)))\n                            ]\n                          sqd-digits\n                        )\n                      )\n        ]\n      (count (filter #(< % (sqd-digits %)) s))\n    )\n  )", "problem": 120, "user": "529a73bde4b02ebb4ef75096"}, {"code": "(fn [s]\n (count\n  (filter \n   (fn [s]\n    (< s\n       (reduce + (map #(* % %) (map #(Integer/parseInt (str %)) (str s)))))) s)))", "problem": 120, "user": "5256627ce4b0541d1855ba1a"}, {"code": "(fn [s]\n  (letfn [(squared-component [d] (reduce + (map #(* % %) (map #(Integer/parseInt %) (rest (clojure.string/split (str d) #\"\"))))))]\n         (count (filter #(< % (squared-component %)) s))))", "problem": 120, "user": "52d3f666e4b09f7907dd1327"}, {"code": "(fn [coll]\n  (letfn [(s [d]\n             (->> (seq (str d))\n                  (map #(- (int %) (int \\0)))\n                  (map #(* % %))\n                  (reduce +)))]\n    (count  (filter #(> (s %) %) coll))))", "problem": 120, "user": "506ba58be4b0eda3100c090b"}, {"code": "(fn ssd [s]\n          (letfn [(dss [n]\n                       (let [d (mod n 10)]\n                         (if (== n 0)\n                             nil\n                           (cons (* d d)\n                                 (lazy-seq (dss (Math/floor (/ n 10))))))))\n                  (lt [n ds]\n                      (< n (reduce + ds)))]\n                 (count (filter identity (map #(lt % (dss %)) s)))))", "problem": 120, "user": "52d340ebe4b099d49816f0c1"}, {"code": "#(loop [n (count %) cnt 0]\n   (if (zero? n)\n     cnt\n     (recur (dec n)\n            (if (> (reduce + (map * (vec(map read-string (re-seq #\"\\d\" (str n)))) (map read-string (re-seq #\"\\d\" (str n))))) n)\n              (inc cnt) cnt))))", "problem": 120, "user": "52cdec6ce4b07d0d72b27383"}, {"code": "(fn [s]\n    (let [digitize (fn [n] (-> n .toString (clojure.string/split #\"\") rest))\n          comparer (fn [n] (< n (apply + (map #(* (Integer. %) (Integer. %)) (digitize n)))))]\n      (count(filter comparer s))))", "problem": 120, "user": "506755b3e4b03d366d7cb2bc"}, {"code": "(fn sd [coll]\n  (let [ss (fn [n] (reduce + (map #(Math/pow % 2) (for [x (str n)] (Double/parseDouble (str x))))))\n        pred? (fn [x] (< x (ss x)))\n       ]\n    (count (filter pred? coll))\n  ))", "problem": 120, "user": "52cf084ce4b07d0d72b27399"}, {"code": "(fn [xs]\n  (let [char->int #(Integer. (str %))\n        square #(* % %)\n        digits-square-sum #(reduce + (map (comp square char->int) (str %)))]\n    (reduce (fn [c n] (if (< n (digits-square-sum n)) (inc c) c))\n            0\n            xs)))", "problem": 120, "user": "4f8c6bf6e4b02e764a0a519b"}, {"code": "(fn [xs] (reduce (fn [t w] (+ t ((fn [x] (let [d (apply + (map #(* % %) (map #(Character/digit % 10) (str x))))]\n    (if (> d x)\n      1\n      0))) w))) 0 xs))", "problem": 120, "user": "4ee75ec2535d93acb0a66867"}, {"code": "#(\n letfn[(splitnum[n] (map (fn[i] (- i 48) ) (map int (seq (str n)))))\n \t\t(power[y] (reduce + (map (fn[x] (* x x)) y)))]\n   (reduce + (map \n    (fn[x] (if (< x (power (splitnum  x))) 1 0))\n    %))\n)", "problem": 120, "user": "52ca720fe4b071a8d36bd3e2"}, {"code": "(fn [s] (count \n          (filter (fn [i] \n                    (< i \n                       (reduce + (map (fn [x] (* x x)) (map #(java.lang.Integer/parseInt (str %)) (str i)))))) s )))", "problem": 120, "user": "52bdf6bde4b07a9af579230d"}, {"code": "(fn [coll]\n  (count \n   (filter #(< % \n               (reduce + \n                       (map (fn [c] \n                              (let [d (read-string (str c))] \n                                (* d d))) \n                            (str %)))) \n           coll)))", "problem": 120, "user": "52b02329e4b0c58976d9acc5"}, {"code": "(fn blah [l] \n  (count (filter (fn smaller-than-sum-of-square-digits [n]\n    (< n (apply + (map #(* % %) ((fn extract-digits\n                                [number]\n                                (map #(-> % int (- 48)) (seq (str number)))) n)))))\n l)))", "problem": 120, "user": "52b35a6ee4b0c58976d9ad07"}, {"code": "#(count (let [ind (atom -1)] \n          (filter (fn [x] (do (swap! ind inc) (< @ind x))) \n                  (map (comp \n                        (partial reduce +) \n                                 (partial map (fn ([x] (* x x)))) \n                                 (partial map read-string) \n                                 (partial map str) \n                                 seq \n                                 str) %))))", "problem": 120, "user": "52e48632e4b09f7907dd1450"}, {"code": "(fn [xs]\n    (count \n     (filter (fn [n] (< n (reduce + 0\n                             (map #(Math/pow (Integer/parseInt (str %)) 2) (str n)))))\n             xs)))", "problem": 120, "user": "506cad7de4b0a302964c548e"}, {"code": "(fn [xs]\n    (let [digits (fn [n] (map #(Character/getNumericValue %) (seq (str n))))\n          sumsq (fn [n] (apply + (map #(* % %) (digits n))))]\n      (count (filter true? (map < xs (map sumsq xs))))))", "problem": 120, "user": "4e80aa10535db62dc21a62b1"}, {"code": "(fn [arr]\n  (let [digsum (fn [n] (loop [digstr n\n                              sum 0]\n                         (if (= 0 (count digstr))\n                           sum\n                           (let [dig (Integer/parseInt (str (first digstr)))]\n                             (recur (rest digstr) (+ sum (* dig dig)))\n                             )))\n                 )]\n    (count (filter (fn [x] (< x (digsum (str x)))) arr))\n    ))", "problem": 120, "user": "52c8a8b9e4b0c2d177d62139"}, {"code": "(fn [s] (count (filter #(< % (apply + (map (fn [x] (Math/pow (Integer/valueOf (str x)) 2)) (str %)))) s)))", "problem": 120, "user": "52df232fe4b09f7907dd13fc"}, {"code": "(fn [s] (reduce\n          (fn [y x]\n            (+ y (if (< x (reduce #(+ % (* (- (int %2) 48) (- (int %2) 48))) 0 (str x)))\n                   1 0)))\n          0 s))", "problem": 120, "user": "522eb5cce4b01cdb292c5f0c"}, {"code": "(fn [xs]\n  (count (filter \n          \t(fn [x] (> (apply + (map #(* % %) (map #(Character/digit % 10) (str x)))) x)) \n          xs)))", "problem": 120, "user": "4f748b54e4b044e54cd9a8fa"}, {"code": "(fn [coll]\n  (letfn [(to-digits [x]\n                     (loop [x x r []]\n                       (if (zero? x)\n                         r\n                         (recur (quot x 10) (cons (mod x 10) r)))))\n          (sqr-sum [x]\n                   (let [digits (to-digits x)]\n                     (apply + (map * digits digits))))]\n    (count (filter #(< % (sqr-sum %)) coll))))", "problem": 120, "user": "52d809bde4b09f7907dd1384"}, {"code": "(fn cnt\n  [xs]\n  (let [sqr? (fn [n]\n               (reduce + (map #(* % %) (map read-string\n                                            (drop 1 (clojure.string/split (str n) #\"\"))))))]\n  (count (filter #(> (sqr? %) %) xs))))", "problem": 120, "user": "52dd6cc8e4b09f7907dd13e2"}, {"code": "#(count \n    (filter \n      (fn[e] (< (nth e 0) (nth e 1))) \n      (map \n        (fn[x] \n          [\n           x \n           (reduce \n             + \n             (loop[i x dgts []] \n               (let[mx (mod i 10)] \n                 (if (zero? i) \n                   dgts \n                   (recur (quot i 10) (cons (* mx mx) dgts))\n                   )\n                 )\n               )\n             )]\n          ) \n        %\n        )\n      )\n    )", "problem": 120, "user": "52e68e61e4b09f7907dd1479"}, {"code": "(fn [coll] (count (filter (fn [n] (< n (->> n str seq (map int) (map #(- % 48)) (map #(* % %)) (reduce +)))) coll)))", "problem": 120, "user": "52c1f404e4b07a9af5792370"}, {"code": "#(count\n (filter\n  (fn [x]\n    (< x\n       (reduce\n        (fn [acc c]\n          (+ acc\n             (let\n               [y (read-string (str c))]\n               (* y y)\n               )\n             )\n          )\n        0\n        (str x)\n        )\n       )\n    )\n  %\n  )\n )", "problem": 120, "user": "52e59ca5e4b09f7907dd1464"}, {"code": "(fn[coll](count (filter (fn[n](let [sumsq (fn[x](reduce + (map (fn[y](let [z (- (int y) 48)]\n                                          (* z z))) (str x)))) ]\n                                       (< n (sumsq n)))) coll) ))", "problem": 120, "user": "52d66ca0e4b09f7907dd135c"}, {"code": "(fn [integs]\n  (count (filter (fn [n]\n                   (< n (reduce + (map #(* % %) (map #(Character/getNumericValue %) (seq (str n))))))) integs)))", "problem": 120, "user": "52efd3d9e4b05e3f0be25ed4"}, {"code": "(fn [xs] (count (filter (fn [n] (< n (reduce + (map #(let [x (Character/digit %1 10)] (* x x)) (str n))))) xs)))", "problem": 120, "user": "52dc2bc8e4b09f7907dd13ca"}, {"code": "#(count (filter true? (map (fn [n] (< n (apply + (map (fn [n] (Math/pow (- (int n) 48) 2)) (str n))))) %)))", "problem": 120, "user": "4fb99483e4b081705acca2da"}, {"code": "(fn [l] (count (filter (fn [arg] (< arg ((fn scd [d]\n                                (reduce + (map #(* (Integer. %) (Integer. %)) (rest (clojure.string/split (str d) #\"\"))))\n                                ) arg))) l)))", "problem": 120, "user": "52747090e4b03e8d9a4a74a5"}, {"code": "(fn [numbers]\n  (-> (filter (fn [n]\n                (->> (map #(let [digit (Character/getNumericValue %)]\n                             (* digit digit)) \n                          (str n))\n                     (apply +)\n                     (< n)))\n              numbers)\n      (count)))", "problem": 120, "user": "51ab4082e4b04e3dc0c27b31"}, {"code": "(fn\n  [coll]\n  (let [char->int (fn [c] (- (int c) (int \\0)))\n        square (fn [x] (* x x))]\n    (count (filter (fn [x] (< x (reduce + (->> (str x)\n                                               (seq)\n                                               (map char->int)\n                                               (map square))))) coll))))", "problem": 120, "user": "52d9aaa1e4b09f7907dd13ae"}, {"code": "(fn digi-filter [coll]\n  (letfn [(squared-digits [n]\n            (apply + (map #(* % %) (digits n))))\n           (digits [x] (if (= 0 x) nil (cons (mod x 10) (digits (quot x 10)))))]\n  (count (filter #(< % (squared-digits %)) coll))))", "problem": 120, "user": "524469dee4b0d8acf9ed6a9d"}, {"code": "(fn [coll]\n  (count \n   (filter \n    (fn [el] \n      (< el (reduce + (map #(let [n (Integer/parseInt (str %))] (* n n)) (str el)))))\n    coll)))", "problem": 120, "user": "52d00832e4b07d0d72b273b4"}, {"code": "(fn [xs]\n  (->> xs\n       (map (fn [x]\n              (->> x \n                   str \n                   (map #(let [i (- (int %) (int \\0))] (* i i)))\n                   (apply +))))\n       (map - xs)\n       (filter neg?)\n       count))", "problem": 120, "user": "4ef9c8f9535dced4c769f26b"}, {"code": "(fn [r] (letfn [(d [x] (map #(Character/getNumericValue %) (str x)))\n        (s [c] (reduce #(+ % (* %2 %2)) 0 c))]\n  (count (filter #(< % (s (d %))) r))))", "problem": 120, "user": "5224cf82e4b01819a2de42ef"}, {"code": "(fn [c]\n    (letfn [(s [n] (reduce + (map #(let [x (- (int %) (int \\0))] (* x x)) (str n))))]\n      (count (filter #(< % (s %)) c))))", "problem": 120, "user": "52e3e6a8e4b09f7907dd1448"}, {"code": "(fn [col]\n  (loop [n 0 [x & xs] col]\n    (if x\n      (let [ns (map #(- (int  %) (int \\0)) (str x))\n            sum (reduce #(+ %1 (* %2 %2 )) 0 ns)]\n        (if (< x sum)\n          (recur (inc n) xs)\n          (recur n xs)))\n      n)))", "problem": 120, "user": "4e79ff2a535db169f9c796a9"}, {"code": "(fn problem-120 [r]\n  (letfn [(digits-list [n]\n            (loop [res []\n                   m n]\n              (if (< m 10)\n                (cons m (reverse res))\n                (recur (conj res (rem m 10)) (quot m 10)))))\n          (sq [n] (* n n))\n          (sum [rng] (reduce + rng))]\n    (->> r\n         (filter #(< % (sum (map sq (digits-list %)))))\n         count)))", "problem": 120, "user": "51fe9d7ce4b0f1313d468a70"}, {"code": "#(count (filter (fn[elm](> (loop [x elm r 0] (if (== x 0) r (recur (quot x 10)(+ r (* (rem x 10) (rem x 10)))))) elm)) %))", "problem": 120, "user": "52570aeae4b0541d1855ba42"}, {"code": "reduce (fn [s e]\n          (if ((fn [x]\n                 (< x (apply + (map (comp #(* % %) #(Integer. %) str) (str x))))) e)\n            (inc s)\n            s))\n        0", "problem": 120, "user": "52c8758be4b0c2d177d62135"}, {"code": "(fn[col]\n    (count (filter (fn [x]\n                     (< x (apply + (map #(* % %)(map #(Character/digit % 10) (str x)))))) col)))", "problem": 120, "user": "5300aa1de4b0d8b024fd3710"}, {"code": "(fn [xs] (count (filter (fn [x]\n                    (< x (apply + (map (comp #(* % %) #(Integer/valueOf %) str) (seq (str x)))))) xs)))", "problem": 120, "user": "4feaa579e4b0140c20fb9c0b"}, {"code": "(fn square-digits\n  [x]\n  (count (filter #(< (first %) (second %))\n    (map (fn [number] (vector number (apply + (map #(java.lang.Math/pow (read-string (str %)) 2) (str number))))) x))))", "problem": 120, "user": "5300b750e4b0d8b024fd3711"}, {"code": "(fn [nums] (reduce + (map (fn [num] (if (>= num (reduce + (map #(let [x (read-string %)]\n       (* x x)) (rest (clojure.string/split (str num) #\"\")))))\n                 0\n                 1)) nums)))", "problem": 120, "user": "52fa4f48e4b047fd55836ff7"}, {"code": "(let\n  [digits (fn [n] (map #(- (int %) (int \\0)) (seq (str n))))\n   sum-of-square-of-digits (fn [n] (apply + (map #(* % %) (digits n))))\n   lt-num-sum-of-square-of-digits-num (fn [n] (< n (sum-of-square-of-digits n)))]\n  (fn [as] (count (filter lt-num-sum-of-square-of-digits-num as))))", "problem": 120, "user": "52d660eae4b09f7907dd1356"}, {"code": "(fn [x] (count (filter \n                (fn [n] \n                  (< n (reduce + (map #(* % %) \n                                      (map #(- (int %) 48) (seq (str n))))))) x)))", "problem": 120, "user": "52d7a930e4b09f7907dd1379"}, {"code": "(fn [c]\n  (->>\n   (map\n    #(< %1 %2)\n    c\n    (->> c\n         (map str)\n         (map #(re-seq #\"\\d\" %))\n         (map #(map (fn [n] (Integer/parseInt n)) %))\n         (map #(map (fn [n] (* n n)) %))\n         (map #(reduce + %))))\n   (filter true?)\n   count))", "problem": 120, "user": "50d882d4e4b01f0871336e69"}, {"code": "(fn my-sum-of-square-digits\n  [coll]\n  (letfn [(sum-power-digits [num] (reduce + (map #(java.lang.Math/pow (Character/digit % 10) 2) (str num))))]\n    (reduce + (map #(if (> (sum-power-digits %) %)\n            1\n            0) coll))))", "problem": 120, "user": "509a25b7e4b0efbae1fbc0a8"}, {"code": "(fn cnt-sqrt [arg]\n  (let [get-digits (fn [n]\n                     (map #(Integer/valueOf (str %)) (String/valueOf n)))\n        digits-sqr (fn [n]\n                     (apply + (map #(* % %) (get-digits n))))\n        res-seq (filter #(< % (digits-sqr %)) arg)]\n    (count res-seq)))", "problem": 120, "user": "52fcfeeee4b047fd55837027"}, {"code": "( fn [ll]\n    (count  \n     (filter \n       (fn [s]\n         (< s (reduce + (map (comp #(* % %) - (partial - 48) int) (seq (str s))))))\n       ll\n       )\n     )\n  )", "problem": 120, "user": "528f4462e4b0239c8a67aef0"}, {"code": "(fn [x]\n  (count (filter (fn [a] (< a (apply + (map (comp #(* % %) #(- % 48) int) (seq (str a)))))) x)))", "problem": 120, "user": "529b44afe4b02ebb4ef7509d"}, {"code": "(comp count (fn[ls] (filter (fn[x] (< x (reduce + (map #(* % %) (map #(- (int %) 48) (seq (str x))))))) ls)))", "problem": 120, "user": "5301157ae4b0d8b024fd3717"}, {"code": "(fn [xs]\n  (count (for [x xs\n               :let [ssd (->> (str x) (map #(Character/digit % 10)) (map #(* % %)) (reduce +))]\n               :when (< x ssd)] \n           x)))", "problem": 120, "user": "52ffb7f2e4b0d8b024fd370b"}, {"code": "(fn [v]  \n  (reduce + 0\n   (map\n    (fn[n]\n     (if (> (reduce #(+ (* %2 %2) %) 0\n              (map #(- (int %) 48) (str n))) n) 1 0)) v)))", "problem": 120, "user": "52f818a6e4b047fd55836fcc"}, {"code": "(fn [xs]\n          (count (filter (fn [x] (< x (->>\n                                       x\n                                       str\n                                       seq\n                                       (map #(- (int %) 48))\n                                       (map #(* % %))\n                                       (apply +)))) xs)))", "problem": 120, "user": "52c7f036e4b0c2d177d62126"}, {"code": "(fn [coll] (letfn [\n(digits [n] (map #(Integer/parseInt (str %)) (str n)))\n(sum-of-squares-of-digits [n] (reduce + (map #(* % %) (digits n))))\n(count-smaller-than-sosod [coll] (count (filter #(< % (sum-of-squares-of-digits %)) coll)))\n] (count-smaller-than-sosod coll)))", "problem": 120, "user": "52f10094e4b05e3f0be25ee8"}, {"code": "(fn count-smaller-sumsq [items]\n  (letfn [(digits [n]\n            (map #(Character/getNumericValue %)\n                 (str n)))\n          (sq-digits [n]\n            (map #(* % %)\n                 (digits n)))\n          (test [n]\n            (< n\n               (reduce +\n                       (sq-digits n))))]\n    (count (filter test items))))", "problem": 120, "user": "530578ede4b0d8b024fd3760"}, {"code": "(fn [s]\n  (let [get-digits-array (fn [a]\n                           (let [p a]\n                             (loop\n                                 [tr []\n                                  ten_power (loop\n                                                [i 1\n                                                 im 10]\n                                              (if (> im p)\n                                                (quot im 10)\n                                                (recur\n                                                 (+ i 1)\n                                                 (* im 10))))\n                                  r p]\n                               (if (= ten_power 1)\n                                 (conj tr r)\n                                 (recur\n                                  (conj tr (quot r ten_power))\n                                  (quot ten_power 10)\n                                  (mod r ten_power))))))\n        ]\n    (loop\n        [c 0\n         r s]\n      (if (= nil (first r))\n        c\n        (recur\n         (if (< (first r) (reduce #'+ (map (fn [x] (* x x)) (get-digits-array (first r)))))\n           (+ c 1)\n           c)\n         (rest r))))\n    ))", "problem": 120, "user": "530d85dee4b08068f379eca8"}, {"code": "(fn [x] (let [v (last x)]\n           (cond (= v 9) 8\n           \t\t (= v 29) 19\n                 (= v 99) 50\n                 (= v 999) 50)))", "problem": 120, "user": "52a5a8ebe4b0c58976d9abed"}, {"code": "(fn f[r] (count (filter true? (map (fn[range] ((fn[num] (< num (reduce + (map #(* % %) (map #(Integer. (apply str %))  (partition 1 (str num))))))) range)) r))))", "problem": 120, "user": "5307e4ece4b02e82168697a9"}, {"code": "(fn [nums]                                                                      \n    (letfn [(digits [n] (->> n str vec (map #(- (int %) 48))))                  \n            (digit-sq-sum [n] (->> n digits (map #(* % %)) (apply +)))          \n            (less-digit-sq-sum? [n] (< n (digit-sq-sum n)))]                    \n      (count (filter less-digit-sq-sum? nums))))", "problem": 120, "user": "530e9729e4b08068f379ecbc"}, {"code": "(fn [lat] \n  (letfn [(componet-squared [value] \n                            (reduce (fn [a b] (+ a (* b b)) ) 0 \n                                    (map #(- (int %) 48) (vec (str value)))))]\n    (count (filter #(< % (componet-squared %)) lat))\n    )\n)", "problem": 120, "user": "5125029de4b0ce9225d2ed3e"}, {"code": "(fn [v] \n  (count \n    (filter \n      #(< %1\n         (reduce\n           + ((fn sqdigs [n] (if (zero? n) '() (cons (* (mod n 10) (mod n 10)) (sqdigs (quot n 10))))) %1)\n         )\n       )\n       v\n     )\n   )\n )", "problem": 120, "user": "5176afd2e4b085adf681d889"}, {"code": "(fn [ns]\n  (let [digits (fn [n] (map #(mod % 10) (take-while pos? (iterate #(Math/floor (/ % 10)) n))))\n        sscd (fn [n] (reduce + (map #(* % %) (digits n))))]\n    (count (filter #(< % (sscd %)) ns))))", "problem": 120, "user": "515ead6be4b049add99a053e"}, {"code": "(fn [xs]\n  (count (filter\n          (fn [n] \n            (< n (reduce + (map (comp #(* % %)\n                                      #(Character/digit % 10))\n                                (str n)))))\n          xs)))", "problem": 120, "user": "53034738e4b0d8b024fd373e"}, {"code": "(fn sos-o-digits [num]\n  (letfn [(num->digits [num]\n            (letfn [(numiter [val col]\n                      (if (>= 0 val) col\n                          (recur (quot val 10)\n                                 (conj (apply list col) (rem val 10)))))]\n              (numiter num [])))                    \n          (sum-of-square [digits]\n            (reduce + (map #(* % %) digits)))\n          (less-than-sos? [num]\n              (let [digits (num->digits num)\n                    sos (sum-of-square digits)]\n                (< num sos)))]\n    (count (filter less-than-sos? num))))", "problem": 120, "user": "52f3af46e4b05e3f0be25f14"}, {"code": "(fn sumOfSquare_120\n  [lst]\n  (letfn\n      [(to-digits\n         [i]\n         (map {\\0 0 \\1 1 \\2 2 \\3 3 \\4 4 \\5 5 \\6 6 \\7 7 \\8 8 \\9 9}\n              (str i)))\n       ]\n    (count\n      (filter\n        (fn [x]\n          (< x\n             (reduce\n               +\n               (map\n                 (fn [i] (* i i))\n                 (to-digits x))))) lst))))", "problem": 120, "user": "530cb5b8e4b02e82168697e0"}, {"code": "(fn [col]\n  (count\n    (filter\n      (fn [n] (< n (reduce +\n        (->> n\n             str\n             seq\n             (map str)\n             (map #(Integer/parseInt %))\n             (map #(* % %))\n         ))))\n      col\n      )\n    )\n  )", "problem": 120, "user": "51a1659de4b00957e520db72"}, {"code": "(fn [numbers]\n    (let [\n          get-digits (fn [number] (map #(- (int %) (int \\0)) (str number)))\n          sq-digits (fn [digits] (map #(* % %) digits))\n          sum-digits (fn [digits] (apply + digits))\n          sum-digits-of-number (fn [number] (->> (get-digits number) sq-digits sum-digits))\n          my-filter (fn [numbers] (filter #(< % (sum-digits-of-number %)) numbers))\n          ]\n            (count (my-filter numbers))\n          )\n  )", "problem": 120, "user": "531bad1ce4b08068f379ed92"}, {"code": "(fn [coll]\n  (letfn [(digits [n]\n            (map #(- (int %) 48) (str n)))\n          (sum-of-square-digits [n]\n            (apply + (map #(* % %) (digits n))))]\n    (->>\n      (for [s (zipmap coll (map sum-of-square-digits coll))\n            :when (< (first s) (second s))] s)\n      count)))", "problem": 120, "user": "5300158ae4b0d8b024fd370f"}, {"code": "(fn [s]\n  (let [digits (comp (partial map (comp read-string str)) \n                        seq \n                        str)\n        sum-of-squared-digits (fn [n]\n             (reduce #(+ %1 \n                          (* %2 %2))\n                     0\n                     (digits n)))]\n         (count (filter #(< %1 \n                            (sum-of-squared-digits %1))\n                        s))))", "problem": 120, "user": "501fa1aee4b0cb6ebc0a42eb"}, {"code": "(fn sq [xs]\n  (letfn [(dg' [x]\n               (let [a (- (int x) 48)] (* a a)))\n          (sq' [x]\n               (reduce + (map dg' (seq (str x)))))]\n   (count (filter identity (map #(< % (sq' %)) xs)))\n))", "problem": 120, "user": "531c0619e4b08068f379ed98"}, {"code": "(fn [s]\n  (count (filter #(< % (reduce (fn [result i]\n                                 (+ result (int (Math/pow (Character/getNumericValue i) 2))))\n                               0\n                               (str %)))\n                 s)))", "problem": 120, "user": "5310e7aee4b08068f379ecdc"}, {"code": "(fn [c] (count (filter (fn [x] (< x (apply + (map (comp #(* % %) #(- % 48) int) (str x))))) c)))", "problem": 120, "user": "52b453b0e4b0c58976d9ad21"}, {"code": "(fn numbers [x] \n  (let [proc (fn process [y] \n               (if (< y 10) \n                 (cons (* y y) []) \n                 (concat (process (quot y 10)) \n                         [(* (mod y 10) (mod y 10))])))] \n    (let [oki (map #(proc %) x)]\n      (let [therest (fn thefurest [t n] (if (empty? t) [] (cons (if (< n (first t)) 1 0) (thefurest (rest t) (+ n 1)))))]\n        (let [resultcol (therest (map #(reduce + %) oki) 0)]\n          (reduce + (therest (map #(reduce + %) oki) 0)))))))", "problem": 120, "user": "52e17e66e4b09f7907dd1423"}, {"code": "(fn [xs]\n  (let [ds (fn [x] \n             (->> (str x) (map (comp #(* % %) read-string str)) (apply +))\n            )]\n  \t(count (filter #(< % (ds %)) xs))\n  )\n)", "problem": 120, "user": "5323a414e4b09d4e7a9b54d1"}, {"code": "(letfn [[str2nums [s] (for [c s] (- (int c) (int \\0)))]\n        [squaresum [coll] (reduce + (map #(* % %) coll))]]\n  (fn [nums] (count (filter #(< % (squaresum (str2nums (str %)))) nums))))", "problem": 120, "user": "532347dde4b09d4e7a9b54cc"}, {"code": "(fn [ds]\n   (let [square-digits (fn [n]\n                         (apply + \n                                (map (fn [x] (* x x))\n                                     (map #(- (int %) 48)\n                                          (seq (str n))))))]\n     (count (filter (fn [x] (< x (square-digits x))) ds))))", "problem": 120, "user": "4f75469ee4b0fbe0118ec55a"}, {"code": "(fn sq [ss] (apply + (map (fn [s] (if (< s (apply + (map (fn [v](* (- (int v) 48) (- (int v) 48) ) ) (seq(str s))))) 1 0)) ss) ) )", "problem": 120, "user": "531f0a26e4b08068f379edbf"}, {"code": "(fn [col]\n  (count\n   (filter\n    (fn [v] (< v (reduce + (map #(* % %) (map #(read-string (str %)) (seq (str v)) )))))\n    col)))", "problem": 120, "user": "531f1e63e4b08068f379edc2"}, {"code": "(fn [l] (count (filter (fn [n] (< n (reduce #(+ % (Math/pow (Integer/parseInt (str %2)) 2)) 0  (str n)))) l)))", "problem": 120, "user": "52265e41e4b04e78ff2e1981"}, {"code": "(fn [lst]\n  (count\n   (filter \n      (fn [x] (< x (reduce + (map (fn[x] (* x x)) (map (fn[y] (- (int y) 48)) (str x))))))\n     lst   )))", "problem": 120, "user": "51eec1a6e4b0871fa145d98d"}, {"code": "(fn sum-sq [s]\n  (letfn [(c->d [ch]  ;char to digit convert\n                (- (int ch) (int \\0)))\n          (str->d [s]   ;str to seq of digits convert\n                (map c->d s))\n          (ss-test [n]   ;returns true if n < its sum-of-squares\n                   (let [d-seq         (str->d (str n))\n                         sum-of-sqs    (reduce + 0\n                                               (map * d-seq d-seq))]\n                     (< n sum-of-sqs)))]\n    (count (filter true? (map ss-test s)))))", "problem": 120, "user": "4f80db02e4b033992c121bf9"}, {"code": "(fn [col]\n  (count (filter\n          (fn [d]\n            (< d (reduce + 0 (map #(* (Integer. %) (Integer. %)) (re-seq #\"\\d\" (str d))))))\n          col)))", "problem": 120, "user": "532418f3e4b09d4e7a9b54d8"}, {"code": "(fn sqd-less [coll]\n  (letfn [(digits [n]\n                  (loop [c n res ()]\n                    (if (< c 10)\n                      (conj res c)\n                      (recur (quot c 10) (conj res (rem c 10))))))\n          (sqd [n]\n               (->> (digits n)\n                    (map #(* % %))\n                    (reduce +)))]\n    (count (filter #(< % (sqd %)) coll))))", "problem": 120, "user": "5326c5f7e4b09d4e7a9b54f2"}, {"code": "(fn [l]\n  (count\n    (filter\n      (fn [x]\n        (< x\n           (apply +\n                  (map #(let [y (Integer/parseInt (str %))]\n                          (* y y))\n                       (str x)))))\n      l)))", "problem": 120, "user": "521b73f5e4b0c4ef0be83043"}, {"code": "(fn [v] \n  (count (filter (fn [i] \n                   (< i (reduce + \n                                (map #(* (- (int %1) (int \\0)) \n                                         (- (int %1) (int \\0))) \n                                     (seq (str i)))))) v)))", "problem": 120, "user": "52c81954e4b0c2d177d6212e"}, {"code": "(fn num-sum-sq [r]\n  (let [split-on-digit #(re-seq #\"\\d\" (str %))\n        seq-of-squares (fn [s] (map #(* (Integer. %) (Integer. %)) s))\n        sum-sq-components (fn [x]\n                            (reduce + (seq-of-squares (split-on-digit x))))]\n    (count (filter #(< % (sum-sq-components %)) r))))", "problem": 120, "user": "531dfaf5e4b08068f379edb3"}, {"code": "(fn [xs]\n  (let [sequer (fn [n]\n                 (map (zipmap \"0123456789\" (range 10)) (str n)))\n        ssd (fn [n]\n              (apply + (map #(Math/pow % 2) (sequer n))))]\n    (count (filter #(< % (ssd %)) xs))))", "problem": 120, "user": "5160195ae4b0e2be8aa20be3"}, {"code": "(fn f [col] \n\t(letfn [(sos [n] (reduce #(+ %1 (java.lang.Math/pow (bigint (str %2)) 2)) 0 (str n)))]\n   (count (filter #(< % (sos %)) col))))", "problem": 120, "user": "526a3412e4b03e8d9a4a721e"}, {"code": "(fn [coll]\n  (letfn\n    [\n     (digits [number] (map #(Character/getNumericValue %) (seq (str number))))\n     (sqr-sum [digits] (reduce #(+ %1 (* %2 %2)) 0 digits))\n    ]\n    (count (filter #(< % (sqr-sum (digits %))) coll))))", "problem": 120, "user": "505345d9e4b0517ede0d0a06"}, {"code": "(fn [col-range]\n  (count (filter true?\n         (map \n (fn [x]\n  (let [coll (map (comp #(Integer/parseInt %) str) ((comp seq str) x))]\n    (> (apply + (map #(* % %) coll))\n       x)) )\n          col-range)) ))", "problem": 120, "user": "52be0263e4b07a9af579230e"}, {"code": "(fn f [col]\n    (letfn [(solve [n r]\n             (if (= n 0)\n               r\n               (recur (quot n 10) (+ r (* (rem n 10) (rem n 10))))\n               ))]\n     (count (filter #(< % (solve % 0)) col))\n     )\n  )", "problem": 120, "user": "5302ac7fe4b0d8b024fd3731"}, {"code": "(fn [xs]\n  (count (filter (fn [x] \n                   (< \n                    x \n                    (reduce #(+ %1 (* %2 %2)) 0 (map #(Character/digit % 10) (-> x str seq))))) \n          xs)))", "problem": 120, "user": "531490bde4b08068f379ed17"}, {"code": "(fn [xs]\n  (let [to-digits (fn [x] (map #(- (int %) 48) (str x)))\n        sum-of-squares (fn [xs] (reduce #(+ %1 (* %2 %2)) 0 xs))\n        sum-of-digit-squares (fn [x] (sum-of-squares (to-digits x)))]\n    (count (filter #(< % (sum-of-digit-squares %)) xs))))", "problem": 120, "user": "53244c9de4b09d4e7a9b54db"}, {"code": "(fn [n] (count (filter \n    (fn [y] (< y (apply + (map #(* % %) (map {\\0 0 \\1 1 \\2 2 \\3 3 \\4 4 \\5 5 \\6 6 \\7 7 \\8 8 \\9 9} (str y))))))\n  n)))", "problem": 120, "user": "52fba50ce4b047fd5583700d"}, {"code": "(fn [c] (reduce + (map \n          (fn [x] (if (> (reduce + (map #(* %1 %1) (map #(bigint (str %1)) (str x)))) x) 1 0)) \n          c)))", "problem": 120, "user": "4fba77fae4b081705acca2df"}, {"code": "(fn filter-sum-of-sqrt [ lst ]\n        (letfn [\n                (sum-of-sqrt [num]\n                  (reduce +\n                          (map #(* % %)\n                               (map #(Integer/valueOf (str %))\n                                    (into [] (str num))))))\n                ]\n          (count (filter #(< (Integer/valueOf %) (sum-of-sqrt %))  lst))\n          )\n        )", "problem": 120, "user": "51f81925e4b09be9c177e526"}, {"code": "(fn rec [l]\n  (letfn [(dig [n]\n            (if (> 10 n) [n]\n                (let [m (mod n 10)\n                      r (/ (- n m) 10)]\n                  (cons m (dig r)))))\n          (sumsq [s]\n            (reduce + (map #(* % %) s)))]\n    (if (empty? l) 0\n        (let [f (first l) r (rest l)]\n          (+ (if (> (sumsq (dig f)) f) 1 0)\n             (rec r))))))", "problem": 120, "user": "52d1e364e4b0d9f9285948e7"}, {"code": "(fn [coll]\n\t (count (filter (fn [n] (->> n\n\t\t\t\t     str\n\t\t\t\t     (map str)\n\t\t\t\t     (map read-string)\n\t\t\t\t     (map #(* % %))\n\t\t\t\t     (apply +)\n\t\t\t\t     (< n)))\n\t\t\tcoll)))", "problem": 120, "user": "5289f1f4e4b0239c8a67ae6d"}, {"code": "(fn\n  [coll]\n  (letfn [(d [n] (if (zero? n) '(0) (cons (rem n 10) (d (quot n 10)))))\n          (s [n] (reduce + (map #(* % %) (d n))))]\n    (count (filter #(< % (s %)) coll))))", "problem": 120, "user": "4ff3df0fe4b0678c553fc355"}, {"code": "(fn\n  [s]\n  (let [col   (vec s)\n        total (- (count col) 1)]\n    (loop [n 0\n           v 0]\n      (if (> n total)\n        v\n        (recur (inc n) \n               (if (> (apply + (map #(* % %) (map #(Integer/parseInt %) (map str (seq (str (get col n))))))) \n                      (get col n)) \n                 (inc v)\n                 v))))))", "problem": 120, "user": "531016d0e4b08068f379ecd1"}, {"code": "(fn [x]\n  (count (filter (fn [y] (let [z (->> y \n                                      str\n                                      seq\n                                      (map\n                                      #(read-string (str %)))\n                                      (map #(* % %))\n                                      (reduce +))]\n                           (> z y))) x)))", "problem": 120, "user": "52474133e4b05ef8e38e635e"}, {"code": "(fn sq [r]\n  (letfn [(sumn [i] (< i (apply + (map #(* % %) (map #(Integer/parseInt (str %)) (str i))))))]\n   (count (filter identity (map sumn r)))))", "problem": 120, "user": "532b43c3e4b09d4e7a9b5531"}, {"code": "(fn [c]\n   (apply +\n          (map (fn [x]\n                 (let [sumsq (apply + (map #(Math/pow (read-string (str %)) 2) (str x)))]\n                   (if (< x sumsq) 1 0))) c)))", "problem": 120, "user": "53224d45e4b09d4e7a9b54c0"}, {"code": "(fn [l]\n  (letfn \n    [(ssquare \n      [x]\n      (if (= 0 x) 0\n        (let [digi (rem x 10)]\n          (+ (* digi digi) (ssquare (quot x 10))))\n        ))\n     (good \n      [x]\n      (< x (ssquare x)))\n     (countl \n      [l]\n      (if (empty? l) 0\n        (let [firnum (first l)]\n          (+ (if (good firnum) 1 0) (countl (rest l)))\n          )))\n     ]\n    (countl l)))", "problem": 120, "user": "52faec2ee4b047fd55837004"}, {"code": "(fn [col]\n         (letfn [(cal [n]\n                   (reduce + (map #(* % %) (map #(- (int %) (int \\0)) (.toString n)))))]\n           (count (for [x col :when (< x (cal x))] x))))", "problem": 120, "user": "4df9c598535d04ed9115e77a"}, {"code": "(fn [col] \n   (count \n    (filter \n     (fn [n] (< n (reduce + \n                          (map (comp #(* % %) read-string str) \n                               (str n))))) \n     col)))", "problem": 120, "user": "506d5e4ce4b0a302964c5493"}, {"code": "(fn [s]\n  (count \n    (filter \n      (fn [e] (< e \n        (reduce #(+ %1 (* %2 %2)) 0 (map #(Character/digit % 10) (str e))))\n      ) s)))", "problem": 120, "user": "533ab9abe4b0e30313ee6cbf"}, {"code": "(fn [x]\n  (let [str-to-int (fn [s] (Integer/parseInt s))\n        chars (fn [c] (map #(str-to-int (str %)) c))\n        sum (fn [coll] (reduce #(+ %1 (* %2 %2)) 0 coll))]\n    (count (filter #(< % (sum (chars (str %)))) x))))", "problem": 120, "user": "5131d817e4b06942423563ca"}, {"code": "(fn [xs] (let [s (fn ssqd [x]\n                   (if (= x 0)\n                     0\n                     (+ (* (mod x 10)\n                           (mod x 10))\n                        (ssqd (quot x 10)))))]\n           (reduce + (map (fn [n] (if (< n (s n)) 1 0)) xs))))", "problem": 120, "user": "53388e2de4b0e30313ee6c9c"}, {"code": "(fn [sq]\n  (letfn [(sumsqr [n]\n            (apply + (map #(let [x (Long. (str %))] (* x x)) (str n))))]\n  \t(count (filter #(< % (sumsqr %)) sq))))", "problem": 120, "user": "53300924e4b019098a6f8b55"}, {"code": "(fn [lst] (count\n          (filter\n           (fn [n]\n             (->> n str (map #(let [v ( Character/getNumericValue %)] (* v v)) ) (reduce +) (< n)\n              ))\n           lst)\n          ))", "problem": 120, "user": "5281a445e4b0757a1b17143a"}, {"code": "(fn [s] (count (filter #(< % (apply + (map (comp (fn [x] (* x x)) (fn [x] (- x 48)) int) (str %)))) s)))", "problem": 120, "user": "524c7fcfe4b0752c4cb68cbd"}, {"code": "(fn [r]\n  (count\n\t(for [n r\n\t\t  :let [ l (apply +\n\t\t\t\t\t\t  (map #(Math/pow (Character/getNumericValue %) 2)\n\t\t\t \t\t\t \t   (seq (str n))))]\n\t\t  :when (< n l)] n)))", "problem": 120, "user": "520b67b5e4b0b022ef140c83"}, {"code": "(fn [m &]\n    (count\n      (filter\n        (fn [n] (< n (apply + (map #(int (Math/pow (Integer/parseInt (str %1)) 2)) (seq (str n))))) )\n        m)\n    )\n  )", "problem": 120, "user": "534056fce4b085b17e897dac"}, {"code": "(fn [nums] \n  (letfn [(sq-sum \n            [s] \n            (reduce + (map \n                       #(let [n (Integer. (str %))] (* n n)) \n                       (str s))))]\n          (count (filter #(< % (sq-sum %)) nums))))", "problem": 120, "user": "52dd4fb4e4b09f7907dd13df"}, {"code": "(fn [xs]\n  (letfn\n    [(ssd [x]\n       (reduce + (map #(* % %)\n                      (map #(Integer/parseInt (str %))\n                           (seq (str x))))))]\n    (count (filter #(> (ssd %) %) xs))))", "problem": 120, "user": "50772e6ae4b0fc74642bff5d"}, {"code": "(fn [lst]\n  (let [f\n        #((fn [n res]\n            (if (= n 0) res\n              (recur (quot n 10) (+ res (* (mod n 10) (mod n 10))))))\n          % 0)]\n    (count (filter #(< % (f %)) lst))))", "problem": 120, "user": "51da631be4b02ceefd947766"}, {"code": "(fn [xs]\n  (let [sod (fn [n]\n              (->> n\n                   str\n                   (map str)\n                   (map #(Integer/parseInt %))\n                   (map #(* % %))\n                   (reduce +)))]\n   (count\n    (for [x xs :when (< x (sod x))] x))))", "problem": 120, "user": "52d2ca1ce4b099d49816f0b4"}, {"code": "(fn [xs]\n  (letfn [(components [x]\n                      (if (< x 10)\n                        [x]\n                        (cons (mod x 10) \n                              (lazy-seq (components (quot x 10))))))]\n    (count \n      (for [x xs\n            :let [cs (components x)]\n            :when (< x (reduce + (map #(* % %) cs)))]\n        x))))", "problem": 120, "user": "525ab6cfe4b0cb4875a45cf9"}, {"code": "(fn [integers]\n  (letfn [(list-digits\n           [x]\n           (loop [n x d []]\n             (if (zero? n)\n               (reverse d)\n               (recur (quot n 10) (conj d (rem n 10))))))]\n      (count (filter \n              (fn [d] \n                (< d (reduce + (map #(* % %) (list-digits d)))))\n              integers))))", "problem": 120, "user": "5341b141e4b00652c8746ecf"}, {"code": "(fn [xs]\n  (count (filter true? (map (fn [n]\n                              (loop [x n a 0]\n                                (let [r (rem x 10)]\n                                  (if (> 10 x)\n                                    (< n (+ a (* x x)))\n                                    (recur (quot x 10) (+ a (* r r))))))) xs))))", "problem": 120, "user": "523ea111e4b057c4b7cd0a65"}, {"code": "(fn sum-of-sqr-digits\n  [xs]\n  (count\n   (filter\n    (fn [n]\n      (->> (str n)\n           (map (comp #(* % %)\n                      #(- % 48)\n                      int))\n           (apply +)\n           (< n)))\n    xs)))", "problem": 120, "user": "532ab0bde4b09d4e7a9b5527"}, {"code": "(fn [s]\n  (let [so (fn [n]\n             (reduce + \n                     (for [i (map #(- (int %1) 48) (seq (str n)))]\n                       (* i i))))]\n    (count (filterv  #(< %1 (so %1)) s))))", "problem": 120, "user": "515896f2e4b059418b97f0a8"}, {"code": "(fn [coll]\n  (let [f (fn [n] (reduce + (map #(* % %) (map #(Integer/parseInt %) (map str (str n))))))]\n    (count (filter #(< % (f %)) coll))))", "problem": 120, "user": "53219cece4b09d4e7a9b54b7"}, {"code": "(fn [x]\n  (count \n   (filter (fn [n] (< n (reduce + (map #(let [i (- (int %) (int \\0))] (* i i)) (str n))))) x)))", "problem": 120, "user": "53468f6ce4b084c2834f4a3f"}, {"code": "(fn [seq]\n  (letfn [(digits [accu value]\n            (if (= 0 value) accu\n                (digits (cons (mod value 10) accu) (quot value 10))))\n          (sum-of-squares [seq]\n            (reduce (fn [accu x] (+ accu (* x x))) 0 seq))]\n    (count (filter (fn [x] (< x (sum-of-squares (digits '() x)))) seq))))", "problem": 120, "user": "4e82c062535db62dc21a62cc"}, {"code": "(fn [coll]\n  (letfn [\n          (digits-from-number [num]\n                              (map #(Integer/parseInt %)\n                                   (rest (clojure.string/split (str num) #\"\"))))\n          (square [num]\n                  (* num num))\n          (sum-of-square [num]\n                         (reduce + (map square (digits-from-number num))))\n          (less-than-sum-of-square? [num]\n                                    (< num (sum-of-square num)))]\n    (reduce + (map (fn [num]\n                    (if (less-than-sum-of-square? num) 1 0)) coll))))", "problem": 120, "user": "528b01a0e4b0239c8a67ae89"}, {"code": "(fn [coll]\n  (letfn [(sq [n]\n            (let [s (rest (clojure.string/split (str n) #\"\"))]\n              (apply + (map (comp #(* % %) #(Integer/parseInt %)) s))))]\n    (count (filter #(< (first %) (last %)) \n                 (map vector coll (map sq coll))))))", "problem": 120, "user": "52facb9de4b047fd55837002"}, {"code": "(fn [coll]\n  (count \n   (filter (fn [n]\n             (< n\n                (let [digits (map (comp read-string str) (seq (str n)))]\n                  (reduce + (map #(* % %) digits))))) coll)))", "problem": 120, "user": "5215661be4b02f6d8ea676c7"}, {"code": "(fn [l]\n  (count\n   (filter\n    (fn [n]\n      (< n (reduce +\n         (map\n          #(let [d (read-string (str %))](* d d))\n          (str n)))))\n    l)))", "problem": 120, "user": "5349ac2be4b084c2834f4a67"}, {"code": "(fn [coll]\n  (let [digits (fn [i] (map (comp read-string str) (str i)))\n        sum-squares (fn [xs] (reduce + (map #(* % %) xs)))]\n  \t(count (filter (fn [n] (< n (sum-squares (digits n)))) coll))))", "problem": 120, "user": "50fc299ee4b0d10d794c19f2"}, {"code": "(fn sum-square-count\n  [items]\n  (let [sum-item (fn [item] (reduce #(+ %1 (* (- (int %2) 48) (- (int %2) 48))) 0 (seq (str item))))\n        sums (map sum-item items)\n        items-and-sums (partition 2 (interleave items sums))]\n    (count (filter #(< (first %) (second %)) items-and-sums))))", "problem": 120, "user": "52af7a5ce4b0c58976d9acbd"}, {"code": "(fn [l]\n  (let [s #(* % %)\n        f (fn [x]\n            (apply + (map #(s (- (int %) (int \\0))) (str x))))]\n    (->> l (filter #(< % (f %))) count)))", "problem": 120, "user": "53460d02e4b084c2834f4a39"}, {"code": "(fn [nums]\n  (let [digits (fn digits [n]\n                 (if (< n 10)\n                   (list n)\n                   (cons (rem n 10) (digits (quot n 10)))))\n        square (fn [n] (* n n))\n        sum-of-sq-of-digits (fn [n] (reduce + (map square (digits n))))]\n    (count (filter (fn [n] (< n (sum-of-sq-of-digits n))) nums))))", "problem": 120, "user": "534f7dd3e4b084c2834f4acb"}, {"code": "#(apply +\n         (map (fn [x]\n                (if (< x (apply + (map (fn [c] (apply * (repeat 2 (Integer/parseInt (str c))))) (str x))))\n                  1 0)) %))", "problem": 120, "user": "4e705861535d5021c1a89635"}, {"code": "(fn lt-sum-component-squared [coll]\n  (let [\n         extract-components (fn [x] (map #(Character/getNumericValue %) (vec (str x))))\n         cmps (map extract-components coll)\n         sums (map (fn [c] (apply + (map #(* % %) c))) cmps)\n         lt (map < coll sums)\n         ]\n\n    (count (filter #{true} lt))\n    ))", "problem": 120, "user": "53307da1e4b019098a6f8b5e"}, {"code": "(fn [s]\n    (count (filter (fn [num]\n                     (->> num \n                          str seq (map str) (map read-string) \n                          (map #(* % %)) (reduce +) (< num)))\n                   s)))", "problem": 120, "user": "53487737e4b084c2834f4a59"}, {"code": "(fn [s]\n  (letfn [(f [result n]\n              (if (= 0 n)\n                result\n                (recur (+ result (* (mod n 10) (mod n 10))) (quot n 10))))]\n    (count (filter #(< % (f 0 %)) s))))", "problem": 120, "user": "531d34cfe4b08068f379edac"}, {"code": "(fn [c]\n  (->> c\n       (map (fn [n] (->> (str n)\n                         (map #(-> % str Double. (Math/pow 2.0)))\n                         (apply +)\n                         (vector n))))\n       (filter #(apply < %))\n       (count)))", "problem": 120, "user": "5175533fe4b0dea9bbfba575"}, {"code": "reduce #(if (< %2 (reduce + (map (zipmap \"0123456789\" (map * (range) (range))) (str %2)))) (inc %) %) 0", "problem": 120, "user": "526a7025e4b03e8d9a4a722a"}, {"code": "(fn [k]\n  (count (filter \n          (fn digits [s]\n            (< s (apply + (map (comp (fn [a] (* a a)) #(Integer. (str  %))) (str  s)))))\n          k)))", "problem": 120, "user": "4ddb696b535d02782fcbe9fa"}, {"code": "(fn [nums]\n  (letfn [(get-digits [number]\n            (reduce #(conj %1 (- (int %2) (int \\0)))\n                    [] (str number)))\n          (matches? [number]\n                   (< number (apply + (map #(* % %) (get-digits number)))))]\n    (count (filter matches? nums))))", "problem": 120, "user": "53070615e4b02e821686979e"}, {"code": "(fn [l] (reduce + 0 (map (fn [x] (if (< x (reduce + (map #(* % %) (map #(Character/digit % 10) (str x))))) 1 0)) l)))", "problem": 120, "user": "534e4a29e4b084c2834f4ab0"}, {"code": "(fn [col] \n  (reduce \n   (fn [acc value] \n     (let [digits (map #(Character/digit % 10) (str value))\n           square-sum (reduce + (map #(* % %) digits))]\n       (if (< value square-sum) (inc acc) acc)))\n   0 \n   col))", "problem": 120, "user": "52a32876e4b04e0c58e87bfb"}, {"code": "(fn c [coll]\n  (count\n    (filter\n      (fn f [n] (< n (apply + (map #(* % %) (map #(- (int %) 48) (str n)))))) coll)))", "problem": 120, "user": "53513d28e4b084c2834f4ae3"}, {"code": "(fn [nums]\n  (count\n   (filter (fn [n] (< n (apply + (map #(* % %)\n                                      (map #(-> % str Integer/parseInt) (str n))))))\n           nums)))", "problem": 120, "user": "5225271fe4b01819a2de42f9"}, {"code": "(fn [xs]\n  (letfn [(digits [x]\n            (loop [x x\n                   digits '()]\n              (if (> x 0)\n                (recur (int (/ x 10)) (cons (mod x 10) digits))\n                digits)))\n          (sum-sqs [xs] (->> xs (map #(* % %)) (reduce +)))]\n    (count (filter #(> (sum-sqs (digits %)) %) xs))))", "problem": 120, "user": "5312cdaae4b08068f379ed03"}, {"code": "(fn [numbers]\n   (letfn [(sqr[numb] \n   (apply + (map #(let [x (- (int %) (int \\0))] (* x x)) (str numb))))]\n  (count (filter #(< % (sqr %)) numbers))))", "problem": 120, "user": "533aac38e4b0e30313ee6cbe"}, {"code": "(fn [coll] (count (filter (fn [c] (< c (apply + (map #(* % %) (map read-string (map str (seq (str c)))))))) coll)))", "problem": 120, "user": "500ec210e4b00fff93030f9d"}, {"code": "(fn [xs]\n  (count\n   (filter\n    (fn [x] (< x\n               (reduce (fn [acc i] (+ acc (* i i)))\n                       0\n                       (map (fn [s] (Integer. s))\n                            (rest (clojure.string/split  (str x) #\"\"))))\n               ))\n    xs)))", "problem": 120, "user": "52ab51c4e4b0c58976d9ac73"}, {"code": "(fn [s]\n  (count\n   (filter #(< %\n               (loop [n %\n                      r 0]\n                 (if (= n 0)\n                   r\n                   (recur (quot n 10)\n                          (+ r (* (rem n 10)\n                                  (rem n 10)))))))\n           s)))", "problem": 120, "user": "535d910ae4b04ce2eb3ed2c5"}, {"code": "(fn [l]\n  (count\n   (filter\n    (fn [n]\n      (<\n       n\n       (reduce + (map #(* (- (int %) 48) (- (int %) 48)) (str n)))))\n    l)))", "problem": 120, "user": "535d2533e4b04ce2eb3ed2bc"}, {"code": "(fn [c]\n  (count (filter true?\n                 (map (fn [n]\n                        (< n\n                           (reduce + (map (fn [x]\n                                            (#(* % %) (- (int x) (int \\0))))\n                                          (str n)))))\n                      c))))", "problem": 120, "user": "51ab70c3e4b04e3dc0c27b33"}, {"code": "(fn [col]\n  (letfn [(k [x]\n             (let [r (rem x 10)\n                   q (quot x 10)]\n               (+ (* r r) (if (= 0 q)\n                            0\n                            (k q)))))]\n    (count (filter #(< % (k %)) col))))", "problem": 120, "user": "50f10f7be4b06d9538fe211a"}, {"code": "(let [sq #(* % %)]\n\t(fn [lst]\n  (->> lst\n       (filter (fn [x] (< x (reduce (fn [t x] (+ t (-> x str Integer/parseInt sq))) 0 (str x)))))\n       count)))", "problem": 120, "user": "534efe66e4b084c2834f4ac1"}, {"code": "(fn [coll]\n  (let [squares {\\0 0 \\1 1 \\2 4 \\3 9 \\4 16 \\5 25 \\6 36 \\7 49 \\8 64 \\9 81}]\n    (count\n      (filter\n        (fn [n] (< n (apply + (map #(squares %) (str n))))) coll))))", "problem": 120, "user": "51d08d67e4b067c365486351"}, {"code": "(fn [r]\n  (count (filter (fn [x] (< x (apply + (map #(* % %) (map #(Integer/parseInt (str %)) (vec (str x)))))))\n                 r)))", "problem": 120, "user": "5348cab4e4b084c2834f4a5e"}, {"code": "#(count (for [x % :when\n\t(< x ((fn f [n] (if (= n 0) 0\n\t\t(+ (* (rem n 10) (rem n 10)) (f (quot n 10))))) x))] 1))", "problem": 120, "user": "53500869e4b084c2834f4ad3"}, {"code": "(fn [s] (count (filter (fn [d] (< d ((fn [d] (reduce + 0 ((comp (fn [s] (for [ x s ] (* x x))) (fn [d] (reverse (map #(mod % 10) (take-while #(> % 0) (iterate #(quot % 10) d)))))) d))) d))) s)))", "problem": 120, "user": "535a18e3e4b04ce2eb3ed2a4"}, {"code": "(fn sum-of-square-digits\n  [coll]\n  (apply +\n  (for [n coll]\n    (let [r (map \n   \t\t#(Math/pow (Integer/valueOf (str %)) 2) \n   \t\t(flatten (partition 1 (str n))))]\n     (if (> (apply + r) n) 1 0)))))", "problem": 120, "user": "52c00e4fe4b07a9af5792342"}, {"code": "(fn [coll]\n  (count\n   (filter #(< %1\n               (loop [n %1 c 0]\n                 (if (zero? n)\n                   c\n                   (let [r (rem n 10)]\n                     (recur (quot n 10) (+ (* r r) c)))))) coll)))", "problem": 120, "user": "535d4b0ae4b04ce2eb3ed2be"}, {"code": "(fn f [l]\n  (let [func (fn [n] (reduce + (map (fn [q] (* q q)) (map #(Integer/parseInt (str %)) (seq (str n))))))]\n    (count (filter (fn [x] (> (first x) (second x))) (map list (map func l) l)))))", "problem": 120, "user": "53638ed2e4b0243289761e5b"}, {"code": "(fn [s]\n  (let [s-sums (map (fn [n] (apply + (map (comp #(* % %) read-string str) (str n)))) s)\n        s-truths (map #(< %1 %2) s s-sums)]\n    (get (frequencies s-truths) true)))", "problem": 120, "user": "52761edae4b03e8d9a4a74d4"}, {"code": "(fn [xs]\n  (let [fun (fn [x] (< x (apply + (map #(* % %) (map #(-> % str Integer/parseInt) (str x))))))]\n    (count (filter fun xs))))", "problem": 120, "user": "536d83cee4b0fc7073fd6e5e"}, {"code": "(fn sum-sq\n  [xs] \n  (count\n    (filter true?\n  \t  (map \n      #(< % %2) \n       xs \n       (map (fn [xs2] (reduce + (map #(* % %) xs2)))\n            (map \n             (fn \n              [x]\n              (map #(Integer/parseInt (str %)) (str x)))\n             xs))))))", "problem": 120, "user": "536aa86de4b0243289761eb1"}, {"code": "(fn [s]\n   (count (filter (fn [n]\n  (< \n   n \n   (reduce + (map \n             (fn [m]\n               (let [nb (Integer/valueOf (str m))]\n                (* nb nb))\n               )\n             (seq (str n))\n             )\n          )\n   )\n  ) s))\n   )", "problem": 120, "user": "52d42021e4b09f7907dd132a"}, {"code": "(fn [xs]\n  (letfn [(fs [x]\n            (->> (str x)\n                 (map #(Character/getNumericValue %))\n                 (map #(* % %))\n                 (reduce +)))]\n    (count (filter #(< % (fs %)) xs))))", "problem": 120, "user": "52f4fae4e4b05e3f0be25f27"}, {"code": "(fn [xs]\n  (letfn [(int-to-sum-squares [n]\n                              (->> n (str) \n                                     (map #(- (int %) 48)) \n                                     (map #(* % %))\n                                     (reduce +)))]\n    (count (filter #(< % (int-to-sum-squares %)) xs))))", "problem": 120, "user": "536ca4bde4b0fc7073fd6e49"}, {"code": "(fn [v] (count (filter (fn [n] (> (apply + (map #(let [i (read-string (str %))] (* i i)) (str n))) n)) v)))", "problem": 120, "user": "534f13b2e4b084c2834f4ac4"}, {"code": "(fn [xs]\n  (count (filter (fn [n]\n                   (< n (reduce + (map (comp #(* % %) #(Integer. %)) (re-seq #\"\\d\" (str n))))))\n                 xs)))", "problem": 120, "user": "4fe9ea87e4b0547ebccb2476"}, {"code": "(fn [s] (count (filter #(< % (loop [s 0\n                                    n %\n                                    m 0]\n                               (if (= n m 0)\n                                 s\n                                 (recur (+ s (* m m))\n                                        (quot n 10)\n                                        (rem n 10))))) s)))", "problem": 120, "user": "536e0930e4b0fc7073fd6e66"}, {"code": "(fn [xs] \n  (count (filter (fn [x] \n            ( let [sumofsquares (->> x \n                                     str\n                                     (map #(read-string (str %)))\n                                     (map #(* % %))\n                                     (apply +) )]\n              (< x sumofsquares))) xs)))", "problem": 120, "user": "53691dc7e4b0243289761e97"}, {"code": "(fn sum-square-digits [coll]\n  (loop [counter 0 coll coll]\n    (if (empty? coll)\n      counter\n      (if (< (first coll) ;if the first element in the collection is smaller than\n             (reduce +    ;the addition of the squaring of all of the digits in the number\n                (map #(* % %) \n                     (map #(- (int %) (int \\0))\n                           (seq (str (first coll)))))))\n          (recur (inc counter) (rest coll)) ;increment counter and get rid of first element and recur\n          (recur counter (rest coll)))))) ;else, just get rid of first element to recur\n\n;the whole map ... seq ... str thing takes the first element, makes it into a string, makes that into a sequence,\n;and then changes it from characters to numbers, then squares it, then adds it.", "problem": 120, "user": "53713ebee4b0fc7073fd6ead"}, {"code": "(fn [coll]\n (->> coll \n      (map (comp vec str)) \n      (map #(map (fn [x] (int (Math/pow (- (int x) (int \\0))2) ))   %)) \n      (map #(reduce + %))  (map-indexed vector) \n      (filter #(< (first %) (last %))) \n      count)\n)", "problem": 120, "user": "536f5900e4b0fc7073fd6e7b"}, {"code": "(comp count\n      (partial filter\n               (fn [x]\n                 (< x\n                    (apply +\n                           (map #(* % %)\n                                ((fn todigits [a]\n                                   (if\n                                     (= a 0)\n                                     []\n                                     (cons (mod a 10) (todigits (quot a 10)))))\n                                 x)))))))", "problem": 120, "user": "53712c03e4b0fc7073fd6ea9"}, {"code": "(fn [s]\n  (let [sqr (fn [x] (* x x))\n        sum-of-sq-digits (fn [x] (reduce + (map #(sqr (Integer. (str (identity %)))) (str x))))\n        seq-of-sum-of-sq-digits (map sum-of-sq-digits s)]\n\n    (loop [s1 s\n           sq1 seq-of-sum-of-sq-digits\n           acc 0]\n      (if (empty? s1)\n        acc\n        (recur (rest s1) (rest sq1) (if (< (first s1) (first sq1))\n                                      (inc acc)\n                                      acc))))))", "problem": 120, "user": "53415755e4b00652c8746ecd"}, {"code": "(fn [s] \n  (count (filter (fn [x] (< x\n                            (apply + (map #(* % %)\n                                          (map read-string\n                                               (re-seq #\"\\d\" (str x)))))))\n                 s)))", "problem": 120, "user": "524b0645e4b09eba1c0223bf"}, {"code": "(fn sumsquaredigits [x]\n     \"Counts the number of elements of x that are smaller than the sum of their squared component digits.\"\n     (if (seq x)\n       (if (< (first x) (apply + (map #(* % %) ((fn f [q]\n                                                 (if (< q 10)\n                                                   (vector q)\n                                                   (conj (f (/ (- q (mod q 10)) 10)) (mod q 10)))) (first x)))))\n         (inc (sumsquaredigits (rest x)))\n         (sumsquaredigits (rest x)))\n       0))", "problem": 120, "user": "532727bae4b09d4e7a9b54fa"}, {"code": "(fn [c]\n  (count\n   (filter\n    #(<\n      %\n      (apply + (map (fn [n] (Math/pow (Character/getNumericValue n) 2)) (seq (str %)))))\n    c)))", "problem": 120, "user": "4ec53f8c535d6d7199dd368b"}, {"code": "(fn cnt-sqrt [arg]\n  (let [get-digits (fn [n]\n                     (map #(Integer/valueOf (str %)) (String/valueOf n)))\n        digits-sqr (fn [n]\n                     (apply + (map #(* % %) (get-digits n))))\n        res-seq (filter #(< % (digits-sqr %)) arg)]\n    (count res-seq)))", "problem": 120, "user": "4ef2eb4d535dced4c769f226"}, {"code": "(fn [xs]\n  (let [digitsqsum (fn [n]\n    (let [ds (loop [d 1 ds ()]\n                (if (> d n)\n                  ds\n                  (recur (* d 10)\n                         (conj ds (quot (rem n (* d 10)) d)))))]\n       (reduce #(+ %1 (* %2 %2)) 0 ds)))]\n\n    (reduce (fn [c n]\n              (if (< n (digitsqsum n))\n                (inc c)\n                c))\n            0 xs)))", "problem": 120, "user": "5370f8ede4b0fc7073fd6ea2"}, {"code": "(fn [s]\n  (count\n    (filter true?\n            (map #(< (first %) (second %))\n                 (map vector s\n                      (map (fn [s] (reduce + (map #(* % %) (map #(Integer. %) s))))\n                           (map #(re-seq #\"\\d\" (str %)) s)))))))\n\n\n\n;(defn onetwenty [s]\n;  (count\n;    (filter\n;      (fn [x] (< x (reduce + (map #(* % %) (map (comp read-string str) (str x)))))) s)))", "problem": 120, "user": "4f849f76e4b033992c121c36"}, {"code": "(fn [s]\n  (reduce + (map (fn [x]\n                   (let [y (reduce + (map #(reduce * (repeat 2 %)) (map (comp read-string str) (str x))))]\n                     (if (< x y) 1 0))) s)))", "problem": 120, "user": "5361a4f2e4b0243289761e47"}, {"code": "(fn [xs]\n  (let [foo (fn [n] (->> n\n                     str\n                     (map #(Character/getNumericValue %))\n                     (map #(* % %))\n                     (reduce +)))]\n    (count (filter #(< % (foo %)) xs))))", "problem": 120, "user": "53800d99e4b06839e8705ebd"}, {"code": "(letfn [(sqr-digit [n]\n\t(reduce + (map #(* % %) (map #(Integer/parseInt (str %)) (str n)))))]\n\t(fn [coll] (count (filter #(< % (sqr-digit %)) coll))))", "problem": 120, "user": "5370b386e4b0fc7073fd6e9b"}, {"code": "(fn [s] (count (filter (fn [x] (< x (reduce (fn [a b] (let [bnum (java.lang.Integer/parseInt (str b))] \n                                                        (+ a (* bnum bnum)))) 0 (seq (str x))))) s)))", "problem": 120, "user": "536f2faee4b0fc7073fd6e79"}, {"code": "(fn [l]\n   (let [sq (fn [n] \n              (apply + (map #(* (- (int %) 48) (- (int %) 48))\n                                    (seq (str n)))))]\n     (count (filter #(< (second %) (first %)) (map #(do [(sq %) %]) l)))))", "problem": 120, "user": "535e518ee4b04ce2eb3ed2cf"}, {"code": "(fn [col]\n  (let [f\n        (fn [n]\n          (let [digits  (map #(- (int %) 48) (seq (str n)))\n                sqrs (map #(* % %) digits)\n                sum   (reduce + sqrs)]\n            (if (< n sum)\n              true\n              false)))]\n    (count (filter true? (map f col)))))", "problem": 120, "user": "5371167fe4b0fc7073fd6ea7"}, {"code": "(fn [xs]\n   (letfn [(square [x] (* x x))\n           (digits [x] (map #(Character/getNumericValue %) (str x)))\n           (sum-square-digits [x] (reduce + (map square (digits x))))\n           (pred [x] (< x (sum-square-digits x)))]\n      (count (filter pred xs))))", "problem": 120, "user": "53779a26e4b06839e8705e38"}, {"code": "(fn getcnt [arg] (let [digits (fn [x] (vec (map #(Integer/valueOf (str %)) (str x))))\n                         squares (fn [y] (reduce + (map #(* % %) (digits y))))\n                         smaller (filter #(< % (squares %)) arg)\n                         ] (count smaller)))", "problem": 120, "user": "534c1c64e4b084c2834f4a8a"}, {"code": "#(count\n   (filter\n     (fn [num]\n       (> (apply\n            +\n            (map\n              (fn [digit] (* digit digit))\n              (map\n                (fn [int] (- int 48))\n                (map int\n                  (seq (str num))))))\n         num))\n     %))", "problem": 120, "user": "5379ed48e4b06839e8705e5a"}, {"code": "(fn [xs]\n  (letfn [(digits [x]\n                (if (< x 10) [x]\n                    (cons (rem x 10) (digits (quot x 10)))))\n          (smaller-than-squared-digits [x]\n            (< x (reduce + (map #(* % %) (digits x)))))]\n    (count\n     (filter smaller-than-squared-digits xs))))", "problem": 120, "user": "5055e7f4e4b0ce54f56f0401"}, {"code": "(fn [integers]\n  (letfn [(digits [n] (->> n (str) (map int) (map #(- % 48))))\n          (sum-of-squares [ns] (apply + (map #(* % %) ns)))\n          (has-greater-sum [n] (> (sum-of-squares (digits n)) n))]\n    (count (filter has-greater-sum integers))))", "problem": 120, "user": "51a3b135e4b0e77c4ca60bf6"}, {"code": "(fn [digits]\n  (let [sum-square-digits (fn [num]\n                            (->> (str num)\n                                 (seq)\n                                 (map #(- (int %) 48))\n                                 (map #(* % %))\n                                 (reduce +)\n                                 )\n                            )]\n    (count (filter #(< % (sum-square-digits %)) digits))\n    )\n  )", "problem": 120, "user": "53527551e4b084c2834f4af0"}, {"code": "(fn [ns]\n                         (let [separate-digits (fn [n] (map #(- (int %) 48) (str n))) \n                               sum-squares (fn [n] (apply + (map #(Math/pow % 2) (separate-digits n))))]\n                           (count (filter #(< % (sum-squares %)) ns))))", "problem": 120, "user": "4edb314d535d10e5ff6f5317"}, {"code": "(fn sum-of-sqr [coll]\n    (let [sqr\n          (fn [n]\n              (let [digits  (map #(Character/getNumericValue %) (str n))\n                    squares (map #(* % %) digits)\n                    sqsum   (reduce + squares)]\n                  (if (< n sqsum)\n                      true\n                      false)))]\n        (count (filter sqr coll))))", "problem": 120, "user": "532c9dc9e4b019098a6f8b30"}, {"code": "(fn [V]   (count  (filter #(not (nil? %) ) (for [N V] \n\t    (if (> \n\t     (reduce + (map (fn [x] (* x x)) \n       \t\t(map (fn [x] (- (int x) 48)) (str N))))\n              N)\n         N )))))", "problem": 120, "user": "536c77f1e4b0fc7073fd6e3f"}, {"code": "(fn [coll] \n  (->> coll \n       (map (fn [n] \n              [n \n               (->> n \n                    str \n                    seq \n                    (map #(let [digit (Character/digit ^char % 10)]\n                            (* digit digit)))\n                    (reduce +))])) \n        (filter (fn [[n sscd]] (< n sscd))) \n        count))", "problem": 120, "user": "523b4e91e4b07becd5be21ef"}, {"code": "(fn [coll]\n  (let [sumsq (fn [n] (->> n str seq (map str) (map read-string)\n                           (map #(* % %))\n                           (apply +)\n                           ))]\n     (count (filter #(< % (sumsq %)) coll))))", "problem": 120, "user": "53806e5be4b06839e8705ec1"}, {"code": "(fn k-count-sums-less-than\n  [nums]\n  (let [tots (loop [num (first nums) sum 0]  \n    (if (empty? (str num))\n      sum\n      (let [dig (read-string (str (first (str num))))]\n        (recur (apply str (rest (str num))) (+ sum (* dig dig))))))]\n  (if (empty? nums)\n    0\n    (if (< (first nums) tots)\n      (+ 1 (k-count-sums-less-than (rest nums)))\n      (+ 0 (k-count-sums-less-than (rest nums)))))))", "problem": 120, "user": "534ff8a6e4b084c2834f4ad1"}, {"code": "(letfn [(D [n]\n          (loop [n n ds []]\n            (if (< n 10) (conj ds n)\n                (recur (quot n 10) (conj ds (rem n 10))))))\n\n        (S-S-D [n]\n          (reduce + (map #(* % %) (D n))))]\n  (fn [s]\n    (count (filter #(< % (S-S-D %)) s))))", "problem": 120, "user": "51a4416ae4b0def3c5c5868c"}, {"code": "#(count\n        (filter\n         (fn [n] (< n (loop [x n sum 0] (if (zero? x) sum (recur (int (/ x 10)) (+ sum (* (mod x 10) (mod x 10))))))))\n         %1))", "problem": 120, "user": "53838742e4b06839e8705ee0"}, {"code": "(fn [seqs]\n  (let [sum-square (fn [n]\n                     (->> (map #(- (int %) 48) (seq (str n)))\n                         (map #(* % %))\n                         (reduce + 0)))]\n    (->> (filter #(< % (sum-square %)) seqs)\n         (count))))", "problem": 120, "user": "536f871de4b0fc7073fd6e7f"}, {"code": "(fn [x]\n  (loop [sqr (map vector x (map (fn [y] (reduce + (map (fn [z] (* z z)) (map #(Character/digit % 10) (str y))))) x))\n         n 0]\n    (if (empty? sqr)\n      n\n      (recur (rest sqr) (if (< (first (first sqr)) (second (first sqr))) (inc n) n)))))", "problem": 120, "user": "538d464ee4b0b51d73faae69"}, {"code": "(fn [s]\n  (count \n   (filter\n    (fn [item] (< item\n                  (apply +\n                         (map #(* % %)\n                              (map #(- (int %) 48) (vec (str item)))\n                              ))))\n    s)))", "problem": 120, "user": "52b0323ee4b0c58976d9acc6"}, {"code": "(fn [xs]\n  (count\n   (filter (fn [x] (< x \n                      (reduce +\n                              (map #(* (Integer/parseInt %) (Integer/parseInt %)) \n                                   (map str (apply list (str x))))))) \n           xs)))", "problem": 120, "user": "538c3424e4b0b51d73faae58"}, {"code": "(comp count (partial filter (fn [n] (< n (reduce + (map #(* % %) (map #(- (int %) 48) (str n))))))))", "problem": 120, "user": "531619c1e4b08068f379ed3d"}, {"code": "(fn g [coll]\n  (let [product (fn [a] (* a a))\n        parseInt (fn [a] (Integer/parseInt a))]\n    (count (filter #(< % (reduce + (map (comp product parseInt) (map str (str %))))) coll))))", "problem": 120, "user": "538c9144e4b0b51d73faae5d"}, {"code": "(fn [c]\n  (letfn [(sosod [n]\n            (reduce (fn [r cd]\n                      (let [d (Character/digit cd 10)]\n                        (+ r (* d d))))\n                    0\n                    (str n)))]\n    (count (filter #(< % (sosod %)) c))))", "problem": 120, "user": "5392b849e4b0b51d73faaeb1"}, {"code": "(fn [x] \n  (count (keep-indexed #(if (< %1 %2) %1) (map (fn [y] (reduce #(let [val (- (int %2) (int \\0))] (+ %1 (* val val))) 0 (str y))) x))))", "problem": 120, "user": "53733312e4b06d7f452d9e0a"}, {"code": "(fn [xs] (count (for [x xs \n                        :let [digits (map #(Character/getNumericValue %)  (seq (str x)))] \n                        :when (< x (reduce #(+ % (* %2 %2)) 0 digits))]  x)))", "problem": 120, "user": "53403110e4b085b17e897da6"}, {"code": "(fn [ys]\n    (count  (filter true? (map \n                           (fn [y] (->>\n                                   (seq (str y))\n                                   (map (fn [x] (- (int x) 48)))\n                                   (map (fn [x] (* x x)))\n                                   (reduce +)\n                                   (< y )))\n                           ys))))", "problem": 120, "user": "52eb400ee4b0705949c4443b"}, {"code": "(fn [coll] (let [sqds (fn[init]\n      (loop [i init\n             sum 0]\n          (let [j (mod i 10)\n                k (* j j)\n                l (quot i 10)\n                m (+ sum k)]\n              (if (zero? l)\n                  m\n                  (recur l m)))))]\n    (count (filter #(< % (sqds %)) coll))))", "problem": 120, "user": "52bc6cb2e4b07a9af57922f5"}, {"code": "(comp count (partial filter (fn [num] (< num (reduce #(+ %1 (* (- (int %2) 48) (- (int %2) 48))) 0 (str num))))))", "problem": 120, "user": "536b2048e4b0243289761eb7"}, {"code": "#(letfn[( sm[n]\n\t(if (zero? (quot n 10) ) (* (mod n 10) (mod n 10))\n\t    (if (= 10  n) 1\n\t\t(+ (* (mod n 10)(mod n 10) ) (sm (quot  n 10))))))]\n\t(loop[lst %1\n\t      n 0]\n\t  (if (nil? lst) n\n\t      (if (< (first lst) (sm (first lst))) \n\t\t(recur (next lst) (inc n))\n\t\t(recur (next lst) n)))))", "problem": 120, "user": "4e8849c5535d8b9bb0147ca4"}, {"code": "(fn [s]\n  (reduce \n   (fn [c n] \n     (if (< n \n            (apply + (reductions (fn [_ b] (* b b)) \n                                 0 \n                                 (for [x (seq (str n))] (- (int x) (int \\0))))))\n       (inc c)\n       c))\n   0\n   s))", "problem": 120, "user": "52046600e4b0c283853240c5"}, {"code": "(fn [c]\n\t(->>\n\t (map (fn [a] (< a (reduce + (map #(* % %) ((comp (partial map #(- (int %) 48)) str) a))))) c)\n\t (filter identity)\n\t (count)))", "problem": 120, "user": "5368fedee4b0243289761e93"}, {"code": "(fn [r]\n (count\n  (filter\n   (fn [n]\n     (< n (apply +\n                 (map (comp #(* % %) read-string str)\n                      (str n)))))\n  r)))", "problem": 120, "user": "53973e7be4b0b51d73faaee6"}, {"code": "(fn  [lst]\n  (let [f (fn  [x]\n            (reduce + (map #(* % %)\n                           (map #(-> % str read-string)\n                                (-> x str seq)))))]\n    (count (filter true? (map #(< %2 %)\n                              (map f lst)\n                              lst)))))", "problem": 120, "user": "538e36c7e4b0b51d73faae81"}, {"code": "(fn count-it [lst]\n  (letfn [(split-no [no]\n  (let [s-no (str no)\n        v-no (vec s-no)]\n    (map #(-> % str Integer/parseInt) v-no)))\n          (fit [n]\n               (let [v-no (split-no n)]\n                 (< n (reduce #(+ %1 (* %2 %2)) 0 v-no))))]\n    (count (filter fit lst))))", "problem": 120, "user": "5374adc3e4b06d7f452d9e27"}, {"code": "(fn [coll]\n  (let [digits (fn [n] (map #(Character/digit % 10) (str n))) \n        pred (fn [n] (< n (reduce + (map #(* % %) (digits n)))))]\n    (count (filter pred coll))))", "problem": 120, "user": "539a2901e4b0b51d73faaf0f"}, {"code": "(fn [coll]\n  (letfn [(digits [n] (map #(Character/digit % 10) (str n)))\n          (greater [n]\n            (< n (reduce + (map #(* % %) (digits n)))))]\n    (count (filter greater coll))))", "problem": 120, "user": "5080a697e4b01a93d3f38e49"}, {"code": "(fn\n  [coll]\n  (letfn [(sumSqDigits [a n] (if (= n 0)\n                                 a\n                                 (let [d (mod n 10)\n                                       n' (quot n 10)\n                                       a' (+ a (* d d))]\n                                       (recur a' n'))))]\n     (.size (filter #(< % (sumSqDigits 0 %)) coll))))", "problem": 120, "user": "52dfc89be4b09f7907dd1405"}, {"code": "(fn [coll]\n  (let [sq #(* % %)\n        ssd (fn [x] (reduce + (map #(sq (- 48 (int %))) (str x))))]\n    (count (filter #(< % (ssd %)) coll))))", "problem": 120, "user": "538e864ee4b0b51d73faae87"}, {"problem": 120, "code": "(fn ssd [ns]\n  (count (filter (fn [n] (< n (apply + (map #(* % %) (map #(Character/getNumericValue %) (str n)))))) ns)))", "user": "530bf87ee4b02e82168697d5"}, {"problem": 120, "code": "(fn count-smaller-squared-elements [s] \n\t(count (filter \n\t\t\t#(< % (reduce + \n        \t\t(map (fn [x] (* (Character/digit x 10) \n                                (Character/digit x 10))) \n                     (seq (str %))))) \n            s)))", "user": "52b71bd2e4b0c58976d9ad4d"}, {"problem": 120, "code": "(fn sum-of-square-of-digits [coll]\n\t(count \n\t\t(filter \n\t\t\t(fn less-sum-of-squares [num]\n\t\t\t\t(> ((fn sum [num] (reduce + num)) \n\t\t\t\t\t\t\t((fn square [ldigits]\n\t\t\t\t\t\t\t(map #(* % %) ldigits)) ((fn digitize [num]\n\t\t\t\t\t\t\t\t\t(loop [n num carry []]\n\t\t\t\t\t\t\t\t\t\t(if (< n 10) (conj carry n)\n\t\t\t\t\t\t\t\t\t\t(recur (quot n 10) (conj carry (mod n 10)))))) num))) num)) coll)))", "user": "538e29d1e4b0b51d73faae80"}, {"problem": 120, "code": "(fn fil [col]\n  (letfn [(to-int [c]\n            (Integer/parseInt (str c)))\n          (to-char-array [n]\n            (seq (str n)))\n          (to-int-array [n]\n            (map to-int (to-char-array n)))\n          (square-sum-each-digit [nl]\n            (reduce + (map #(* % %) nl)))]\n    (count (filter #(> (square-sum-each-digit (to-int-array %)) %) col))))", "user": "52c49401e4b0c2d177d620de"}, {"problem": 120, "code": "#(reduce + (map (fn [e]\n                  (let [sum (reduce + (map (fn [c]\n                                             (let [i (Integer. (str c))]\n                                               (* i i))) \n                                           (seq (str e))))]\n                    (if (< e sum)\n                      1\n                      0)))\n                %))", "user": "4f041de1535dcb61093f6ba5"}, {"problem": 120, "code": "(fn [c] (reduce + (reduce #(if (< (first %2) (second %2)) (cons 1 %1) %1) ()\n                          (map #(vector % (reduce + (map (fn [x] (* (Integer/parseInt (str x))\n                                                                    (Integer/parseInt (str x))))\n                                                         (str %)))) c))))", "user": "53a1b5c8e4b0ca733b9744c1"}, {"problem": 120, "code": "(fn [coll]\n  (->> coll\n       (filter (fn [num]\n                 (letfn [(digits [n]\n                   (map #(- (int %) (int \\0)) (str n)))]\n                   (->> (digits num)\n                        (map #(* % %))\n                        (apply +)\n                        (< num)))\n                 ))\n       (count)))", "user": "536e5055e4b0fc7073fd6e6b"}, {"problem": 120, "code": "(fn [xs] (count (filter (fn [x] (< x (apply + (map #(let [d (- (int %) 48)] (* d d)) (str x))))) xs)))", "user": "4faf97d8e4b081705acca258"}, {"problem": 120, "code": "(fn [s]\n  (apply + (map (fn [n]\n                  (if (< n (reduce #(+ % (* %2 %2)) 0\n                                   (map #(Integer. (str %)) (str n))))\n                    1 0))\n                s)))", "user": "4fa436dce4b081705acca19b"}, {"problem": 120, "code": "(fn [ys]\n  (count \n    ((fn [xs a]\n       (if (= xs '())\n         (reverse a)\n         (let [x (first xs)\n               res (map (fn [c] (let [n (read-string (str c))] (* n n)))\n                        (seq (str x)))\n               sum (reduce + res\n                           )\n               smlr (< x sum)]\n           (println res)\n           (if smlr\n             (recur (rest xs)\n                    (conj a x))\n             (recur (rest xs) a)))))\n     ys [])))", "user": "53aaaf7ae4b047364c044444"}, {"problem": 120, "code": "(fn cnt-sqrt [arg]\n  (let [get-digits (fn [n]\n                     (map #(Integer/valueOf (str %)) (String/valueOf n)))\n        digits-sqr (fn [n]\n                     (apply + (map #(* % %) (get-digits n))))\n        res-seq (filter #(< % (digits-sqr %)) arg)]\n    (count res-seq)))", "user": "537e104ce4b06839e8705e9a"}, {"problem": 120, "code": "(fn [xs] \n  (count (filter (fn [x]\n             (< x (apply + (map (comp #(* % %) #(Integer. %) str)\n                                (seq (str x)))))) \n                 xs)))", "user": "53976599e4b0b51d73faaeea"}, {"problem": 120, "code": "(fn [x]\n  \n  (let [get-digits (fn [number]\n                    (map #(- (int %) 48) (str number)))\n        sum-squares (fn [number] (apply + (map #(* % %) number)))]\n    (count (filter #(< % (sum-squares (get-digits %))) x))))", "user": "53ac4719e4b047364c04445c"}, {"problem": 120, "code": "(fn [& nums]\n  (letfn [(digits [num]\n            (loop [acc ()\n                   num num]\n              (if (< num 10)\n                (conj acc num)\n                (recur (conj acc (rem num 10))\n                       (quot num 10)))))\n          (squared-sum [& digits]\n            (reduce + (map #(Math/pow % 2) digits)))]\n    (let [nums (first nums)\n          ss (->> nums\n                  (map digits)\n                  (map #(apply squared-sum %)))]\n      (count (filter true? (map (fn [[a b]]\n                                  (< a b))\n                                (zipmap nums ss)))))))", "user": "532bce35e4b09d4e7a9b5536"}, {"problem": 120, "code": "reduce (fn [cnt n] (if (> ((fn [n]\n  (loop [x n sum 0]\n    (if (zero? x)\n    sum\n    (recur (quot x 10) (+ sum (* (rem x 10) (rem x 10)))))))\n n) n) (inc cnt) cnt)) 0", "user": "53a739b0e4b0ef122a8689d0"}, {"problem": 120, "code": "(fn sum-of-square-of-digits [xs] \n\t(letfn [(digits [x]\n\t\t\t\t(map #(Integer/valueOf (str %)) (str x)))\n\t\t\t(sum-square [xs] \n\t\t\t\t(reduce + (map #(* % %) xs)))]\n\t\t\t(count (filter #(< % (sum-square (digits %))) xs))))", "user": "52e657e4e4b09f7907dd1472"}, {"problem": 120, "code": "(fn square-sum [coll]\n      (let [get-digits (fn [n]\n                         (seq (str n))\n                         )\n            char-digits (map get-digits coll)\n            int-digits (for [char-seq char-digits]\n                         (map (fn [^Character c] (Character/digit c 10)) char-seq)\n                         )\n            squared-digits (for [int-coll int-digits]\n                             (map #(* % %) int-coll)\n                             )\n            sum-squares (for [square-coll squared-digits]\n                          (reduce + square-coll)\n                          )\n            smaller-than (map #(< %1 %2) coll sum-squares)\n            passing-indices (filter #(true? (nth smaller-than %)) (range (count coll)))\n            ;passing-nums(map #(nth coll %) passing-indices) ;I guess #(nth coll %) counts as a partial function\n            ;only the below needs to be returned\n            pass-count (count passing-indices)\n            ]\n        ;(map type char-digits)\n        pass-count\n        )\n      )", "user": "536827f1e4b0243289761e8a"}, {"problem": 120, "code": "(fn [s] (count (filter #(< % \n                           (reduce + \n                                   (map (fn [d] (int (Math/pow (Integer/parseInt (str d)) \n                                                               2)))\n                                        (Integer/toString %))))\n                       s)))", "user": "53acaf1fe4b047364c04445f"}, {"problem": 120, "code": "(fn ssd [ns]\n  (letfn [(digits [n]\n            (map (comp read-string str) (str n)))\n          (sum-of-squares [xs]\n             (reduce + (map #(* % %) xs)))]\n\t(count (filter #(< % (sum-of-squares (digits %))) ns))))", "user": "53b39d82e4b047364c0444a6"}, {"problem": 120, "code": "(comp count\n      (partial filter\n               (fn [n]\n                 (< n (reduce + (map #(* % %) (map #(read-string (str %)) (str n))))))))", "user": "53523ae0e4b084c2834f4aee"}, {"problem": 120, "code": "#(case (count %) 10 8 30 19 50)", "user": "5382704be4b06839e8705ed4"}, {"problem": 120, "code": "(fn [c]\n  (count\n   (filter #(< % (reduce + (map (fn [v] (* v v))\n                                (map second (take-while (fn [[v d]] (> v 0))\n                                                        (iterate (fn [[v d]] [(quot v 10) (mod (quot v 10) 10)])\n                                                                 [% (mod % 10)]))))))\n           c)))", "user": "52d07cc5e4b07d0d72b273bb"}, {"problem": 120, "code": "(fn [ns]\n  (count (filter (fn [n] (< n (reduce + (map #(let [d (Integer. (str %))] (* d d)) (str n))))) ns))\n)", "user": "53ae16e2e4b047364c044472"}, {"problem": 120, "code": "(fn ii [s] \n  (letfn [(sum-of-squares [n]\n            (reduce + (map #(Math/pow (Character/getNumericValue %) 2) (seq (str n)))))]\n    (count (filter #{true} (map #(< % (sum-of-squares %)) s)))))", "user": "52f0ea04e4b05e3f0be25ee6"}, {"problem": 120, "code": "(fn [l]\n  (let [cp\n        (fn [num]\n          (reduce + (map (comp (fn [i] (* i i)) (fn [i] (Character/getNumericValue i))) (str num))))]\n    (count (filter #(< % (cp %)) l))))", "user": "539c88e1e4b0b51d73faaf2c"}, {"problem": 120, "code": "(fn [xs] \n  (count \n   (filter true? \n    (map (fn [x] \n       (< x \n        (reduce + \n         (map #(* % %) \n          (map #(read-string (str %)) \n           (str x)))))) \n     xs))))", "user": "51897709e4b0288ada3dbdaa"}, {"problem": 120, "code": "(fn [coll] (count (filter (fn [n] (< n (int (apply + (map #(Math/pow % 2) (map (comp #(Integer/parseInt %) str) (str n))))))) coll)))", "user": "53b71b94e4b047364c0444cd"}, {"problem": 120, "code": "(fn [s]\n      (let [large? (fn [n]\n        (if (< n (apply + (map #(* (Integer/parseInt (str %))(Integer/parseInt (str %)))(seq (str n)))))\n          true false))]\n        (count (filter identity  (map #(large? %) s)))))", "user": "53b4bddae4b047364c0444b9"}, {"problem": 120, "code": "(fn [l] (let [c2i #(- (int %) (int \\0))\n              sqr #(* % %)\n              sumsqr (fn [n] (reduce #(+ %1 (sqr (c2i %2))) 0 (str n)))]\n          (count (filter #(< % (sumsqr %)) l))))", "user": "53a0ab8ce4b0ca733b9744b3"}, {"problem": 120, "code": "(fn [ns] (count (filter (fn [n] (< n (reduce + (map #(int (Math/pow (- (int %) (int \\0)) 2)) (str n))))) ns)))", "user": "534d1173e4b084c2834f4a98"}, {"problem": 120, "code": "(fn [c]\n  (-> \n   (fn [i]\n     (->> (map #(Math/pow (- (int %) 48) 2) (str i))\n          (apply +)\n          (< i)))\n   (filter c)\n   (count)))", "user": "53b7c21ae4b047364c0444d4"}, {"problem": 120, "code": "(fn [s] (reduce + \n                  (map \n                   (fn [n] (if (< n (reduce + (map #(Math/pow (Character/getNumericValue %1) 2) (seq (str n) ))))\n                               1\n                               0  \n                               )) s) \n                   ))", "user": "52bf0116e4b07a9af5792328"}, {"problem": 120, "code": "(fn [args] \n    (count \n        (filter \n            (fn check [x] \n                (< \n                    x \n                    ((fn f [ret x] \n                        (if (= x 0) \n                            ret \n                            (f (+ ret (* (mod x 10) (mod x 10))) (quot x 10)))) 0 x))) \n            args)))", "user": "53a94b63e4b047364c044434"}, {"problem": 120, "code": "(fn [l] (count (filter (fn [n] (< n (apply + (map #(let [d (- (int %) (int \\0))] (* d d)) (seq (str n)))))) l)))", "user": "53b2a7f8e4b047364c04449c"}, {"problem": 120, "code": "#(letfn [(digits-sum [num]\n            (loop [sum 0 n num]\n              (if (zero? n)\n                sum\n                (let [last-dig (mod n 10)\n                      next-n (/ (- n last-dig) 10)]\n                  (recur\n                    (+ sum (* last-dig last-dig))\n                    next-n)))))]\n    (count\n      (filter\n        (fn [e]\n            (< e (digits-sum e)))\n        %)))", "user": "4f1e4ab5535d64f603146496"}, {"problem": 120, "code": "(fn [numCol]\n   (->> numCol\n     (filter #(->> %1 ;take a number\n               str ;make it a string\n               seq ;which is a sequence of chars\n               (map str) ;make it to a sequence of String for conversion\n               (map (fn [y] (Integer. y))) ;convert Strings to longs\n               (map (fn [y] (* y y))) ;map those to sequence of squares\n               (reduce +) ;sum it up\n               (< %1))) ;is the number smaller than the sum?\n     count))", "user": "53c38b8ce4b00fb29b22127b"}, {"problem": 120, "code": "(fn [s]\n  (letfn [(seqint [i] (map #(- (int %) 48) (seq (str i))))\n          (sumsqr [ss] (reduce + (map #(* % %) (seqint ss))))\n          (icmp [j] (< j (sumsqr j)))\n          ]\n    (count (filter icmp s))))", "user": "53c1ce3ee4b00fb29b221268"}, {"problem": 120, "code": "(fn [coll] (let [sqsum (fn [n] (reduce + (map #(* % %) (map #(Character/getNumericValue %) (str n)))))]\n  (count (filter #(> (sqsum %1) %1) coll))))", "user": "538db083e4b0b51d73faae74"}, {"problem": 120, "code": "(fn counter\n  [x]\n  (let [atoi  #(- (int %) 48)\n        sq    #(* % %)\n        sumsq #(reduce + (map (comp sq atoi) (str %)))]\n    (count (filter #(< % (sumsq %)) x))))", "user": "53c51dc5e4b00fb29b221288"}, {"problem": 120, "code": "(fn [coll]\n  (let [fsofsqs (fn [n]\n                                 (reduce +\n                   (map (comp #(Math/pow % 2)\n                              #(Integer/parseInt %))\n                                (re-seq #\"\\d\" (str n)))))\n        sofsqs (map fsofsqs coll)]\n    (count (filter true? (map < coll sofsqs)))))", "user": "517e12e3e4b0fcc7c5d37d3c"}, {"problem": 120, "code": "(fn [coll]\n  (count (filter (fn [x]\n                   (let [digits (map #(Integer. (apply str %)) (partition 1 (str x)))\n                         ss (reduce + (map * digits digits))]\n                     (< x ss)))\n                 coll)))", "user": "50b63c5ee4b0a86f8358ca69"}, {"problem": 120, "code": "(fn sum-of-square-of-digits [coll]\n  (count (filter\n          (fn [n] (< n (reduce + (map #(Math/pow (Character/digit % 10) 2) (str n)))))\n          coll)))", "user": "53710c09e4b0fc7073fd6ea5"}, {"problem": 120, "code": "(fn [c] \n  (reduce #(if (< %2 ((fn sum-squares [d] \n  (let [remainder (mod d 10)\n        left-over (/ (- d remainder) 10)]\n    (if (< left-over 1)\n      (* remainder remainder)\n      (+ (* remainder remainder) (sum-squares left-over))\n    )\n  )  \n) %2))\n             (inc %1)\n             %1\n             ) \n          \n          \n          0 c)\n  \n  \n  )", "user": "51fc44c5e4b0f1313d468a1b"}, {"problem": 120, "code": "(fn [coll]\n  (letfn [(explode-to-digits [number] \n           (map #(Character/digit % 10) (str number)))\n          (sum-square-digits [n]\n           (reduce + (map #(* % %) (explode-to-digits n))))]\n    (count (filter #(> (sum-square-digits %) %) coll))))", "user": "53cbe808e4b00fb29b2212d4"}, {"problem": 120, "code": "(fn sum-of-square-of-digits [xs] \n  (letfn [(squared-digits [x] \n            (->> (seq (str x))\n                 (map str)\n                 (map #(Integer/parseInt %))\n                 (map #(* % %))\n                 (reduce +)))]\n    (count (filter #(> (squared-digits %) %) xs))))", "user": "52616198e4b03e8d9a4a705e"}, {"problem": 120, "code": "(fn [coll]\n  (count (filter #(< % (apply + (map (fn [x] (* (Character/getNumericValue x) (Character/getNumericValue x))) (str %)))) coll)))", "user": "53c126fce4b00fb29b22125b"}, {"problem": 120, "code": "(fn foo [x] \n (count\n  (filter \n    (fn [el]\n      (< el\n        (reduce + \n          (map \n             #(* \n               (- (int %) 48)\n               (- (int %) 48))\n             (str el))\n         )\n      )\n     )\n     x\n   )\n  )\n)", "user": "5143824ae4b0b4fb4ace5f36"}, {"problem": 120, "code": "(fn [coll]\n   (count (filter #(< %1 (apply +\n                                (map (fn [x] (let [num (Integer. x)]\n                                               (* num num)))\n                                     (rest (clojure.string/split (str %1) #\"\")))))\n                  coll)))", "user": "52fc34cee4b047fd55837015"}, {"problem": 120, "code": "(fn [range]\n  (count (filter (fn [element]\n                    (let [comp-digits (rest (clojure.string/split (str element) #\"\"))]\n                      (< element (reduce + (map (fn [a] (* (Integer. a) (Integer. a))) comp-digits)))))\n                  range)))", "user": "53be0133e4b0d9a98559a6dc"}, {"problem": 120, "code": "(fn [range]\n\t(let [pairs (for [x range]\n                  (let [numbers (into [](map #(Integer. (str %))(str x)))]\n                    [x (reduce + (into [] (for [y numbers] (* y y))))]))]\n      (count (filter (fn [x] (< (first x) (last x))) pairs))))", "user": "53c83f94e4b00fb29b2212af"}, {"problem": 120, "code": "(fn [col]\n\n  (count\n    (filter\n\n      (fn less? [m]\n        (< m\n          ((fn [n]\n             (loop [sum 0, x n]\n               (if (< x 10)\n                 (+ sum (* x x))\n                 (recur (+ sum (* (mod x 10) (mod x 10))) (quot x 10))\n               )\n             )\n           )\n           m\n          )\n       ))\n    col)))", "user": "53ca41dae4b00fb29b2212c8"}, {"problem": 120, "code": "(fn [s]\n   (count\n    (filter (fn [n]\n              (> ((fn [num] (reduce + 0 (map #(* % %) (map #(- (int %) (int \\0)) (seq (str num)))))) n) n)) s)))", "user": "52fac708e4b047fd55836fff"}, {"problem": 120, "code": "#(count (filter  (fn [x] (< x   (reduce + (map (fn [y] (* (- y 48) (- y 48))) (map int (vec (str x))))))) %))", "user": "53d5d24de4b0e771c302544a"}, {"problem": 120, "code": "(fn squared-sum [xs]\n  (count (filter #(< (:number %) \n                     (apply + (map  \n                               (fn [curr] \n                                 (let [x (Integer/parseInt (str curr))]\n                                   (* x x)))\n                               (:digits %))))\n                 (map  #(hash-map :digits (seq (str %))\n                                  :number %)\n                       xs))))", "user": "504f5804e4b0a02f9cffde72"}, {"problem": 120, "code": "(fn [coll]\n  (letfn [(digits [x] (map #(read-string (str %)) (str x)))\n          (sos [x] (apply + (map #(* % %) (digits x))))\n          (lt-sos? [x] (< x (sos x)))]\n    (count (filter lt-sos? coll))))", "user": "53bf0913e4b0c98a41f5cc99"}, {"problem": 120, "code": "(fn [ints]\n\t (count (filter #(< % (reduce + (map (fn [c] (let [x (- (int c) (int \\0))] (* x x))) (str %)))) ints)))", "user": "53e19461e4b0d874e779ae59"}, {"problem": 120, "code": "(fn [coll]\n   (letfn [(calc [x]\n             (reduce #(+ %1 (* %2 %2)) 0\n                     (map #(- (int %) 48) (str x))))\n           (judge [x]\n             (< x (calc x)))]\n     (count (filter #(judge %) coll))))", "user": "516282c3e4b0e6d3c4734711"}, {"problem": 120, "code": "(fn f [args]\n  (count\n    (filter\n      (fn [arg]\n        (< arg (loop [v arg result 0]\n                 (if (zero? v)\n                   result\n                   (recur (quot v 10) (+ result (* (rem v 10) (rem v 10))))))))\n      args)))", "user": "53a83c74e4b047364c044426"}, {"problem": 120, "code": "(fn [s] \n  (count\n   (filter (fn [i] (< i (apply + (map #(let [d (Character/digit % 10)] (* d d)) (str i)))))\n           s)))", "user": "4db2eac3535df7e46ed9b6c8"}, {"problem": 120, "code": "(fn [coll] (letfn [(square [n] (* n n))\n                 (digits [n] (map #(- (int %) 48) (seq (str n))))\n                 (square-digits [n] (map square (digits n)))\n                 (sum-squares [n] (reduce + (square-digits n)))\n                 (gt-lt [n] (if (> (sum-squares n) n)\n                                     true\n                                     false))] (count (filter gt-lt coll))))", "user": "53da8fede4b0e771c30254a3"}, {"problem": 120, "code": "(fn count-large-digit-squares [coll]\n  (letfn [(digits [x] (map #(Character/digit % 10) (str x)))\n          (square [x] (* x x))\n          (sum-of-squared-digits\n            [x]\n            (->> (digits x)\n                 (map square)\n                 (reduce +)))]\n    (->> coll\n         (filter #(< % (sum-of-squared-digits %)))\n         (count))))", "user": "53dc94c8e4b094d41abdfefc"}, {"problem": 120, "code": "(fn testo [s]\n  (letfn [(sqrsum [n]\n                 (loop [x n sqrd 0]\n                   (if (< x 1)\n                     sqrd\n                     (recur (int (/ x 10)) (+ sqrd (* (mod x 10) (mod x 10)))))))]\n    (count (filter #(< % (sqrsum %)) s))))", "user": "53791ab7e4b06839e8705e4d"}, {"problem": 120, "code": "(fn cnt-sqrt [arg]\n  (let [get-digits (fn [n]\n                     (map #(Integer/valueOf (str %) ) (String/valueOf n)))\n        digits-sqr (fn [n]\n                     (apply + (map #(* % %) (get-digits n))))\n        res-seq (filter #(< % (digits-sqr %)) arg)]\n    (count res-seq)))", "user": "516d227fe4b06f078fab252d"}, {"problem": 120, "code": "(fn [s] (let [ssd (fn ssd [n]\n                    (if (< n 10) (* n n)\n                                 (+ (* (mod n 10) (mod n 10)) (ssd (quot n 10)))\n                      ))]\n          (count (filter #(< % (ssd %)) s))\n          ))", "user": "53dadf1de4b0e771c30254ad"}, {"problem": 120, "code": "(fn [in]\n  (loop [s in, result 0]\n    (if (seq s)\n      (let [target (first s)\n            digits (map #(- (int %) (int \\0)) (-> target str ((partial into []))))\n            sum-squares (reduce + (map #(* % %) digits))]            \n        (if (< target sum-squares) \n          (recur (rest s) (inc result))\n          (recur (rest s) result)))\n      result)))", "user": "53c649d3e4b00fb29b221297"}, {"problem": 120, "code": "#(get {(range 10) 8 (range 30) 19} % 50)", "user": "51e3a549e4b0c611d6113e47"}, {"problem": 120, "code": "(fn [s] (count\n          (filter (fn [x] (< x\n                             (reduce + (map #(* % %) (->> x (str) (seq) (map #(Character/getNumericValue %)))))))\n               \t  s)))", "user": "539dcb24e4b0b51d73faaf3d"}, {"problem": 120, "code": "(fn [coll]\n  (letfn [(to_digits[x]\n             (map #(Integer/parseInt %)(map str (seq(Integer/toString x)))))\n          (sum-of-squares[coll]\n             (apply + (map #(* % %) coll)))]\n    (count (filter #(< % (sum-of-squares (to_digits %))) coll))))", "user": "53e241a6e4b036ad0777e3f0"}, {"problem": 120, "code": "#(count\n  (filter\n   (fn [x]\n     (< x (apply + (map\n                    (fn [c] (let [d (Integer/parseInt (str c))] (* d d)))\n                    (vec (str x))))))\n   %))", "user": "53e4fa2ce4b036ad0777e454"}, {"problem": 120, "code": "(fn sum-sq [coll]\n  (let [good (fn [n]\n               (< n (apply + (map (comp #(* % %) #(Character/getNumericValue %)) (str 0 n)))))\n         ]\n    (count (filter good coll))))", "user": "53ce4cd4e4b00fb29b2212ef"}, {"problem": 120, "code": "(fn [x]\n  (count\n     (filter\n        (fn [j]\n            (< j (reduce +\n                    (map (fn [i] (* i i))\n                       (map read-string\n                          (re-seq #\"\\d\" (str j)))))))\n        x)))", "user": "53e91473e4b036ad0777e495"}, {"problem": 120, "code": "(fn [a]\n  (count \n    (filter\n      (fn [n]\n        (letfn [(dig [n]\n                  (loop [d [], x n]\n                    (if (zero? x)\n                      d\n                      (recur (cons (rem x 10) d) (quot x 10)))))\n                (f [n]\n                   (apply + (map #(* % %) (dig n))))]\n          (< n (f n))))\n      a)))", "user": "53d78b64e4b0e771c3025466"}, {"problem": 120, "code": "(fn [coll] \n  (count \n   (filter \n    (fn [y] (< y ((fn [x] (reduce + (map #(* % %) (map #(Character/digit % 10) (seq (str x)))))) y))) \n    coll)))", "user": "53e76bb2e4b036ad0777e47d"}, {"problem": 120, "code": "(fn [l]\n  (let [digits #(map (fn [part]\n                       (Integer/parseInt (str part)))\n                     (str %))]\n    (count\n     (filter\n      (fn [x]\n        (->> (map #(* % %) (digits x))\n             (reduce +)\n             (< x )))\n      l))))", "user": "53d28800e4b00fb29b22131e"}, {"problem": 120, "code": "(fn cnt-sqrt [arg]\n  (let [get-digits (fn [n]\n                     (map #(Integer/valueOf (str %)) (String/valueOf n)))\n        digits-sqr (fn [n]\n                     (apply + (map #(* % %) (get-digits n))))\n        res-seq (filter #(< % (digits-sqr %)) arg)]\n    (count res-seq)))", "user": "52ba2639e4b07a9af57922cb"}, {"problem": 120, "code": "(fn[y] (reduce + (map (fn [x] (if (< x (reduce + (map #(reduce * (repeat 2 (Integer/parseInt (str %)))) (seq (str x))))) 1 0)) y)))", "user": "52ee9ac7e4b05e3f0be25ec9"}, {"problem": 120, "code": "(fn [coll] \n  (let \n    [num-seq \n     (fn num-seq [x] \n      (if (= x 0) \n        nil\n        (cons (mod x 10) (num-seq (quot x 10)))))\n     calc-sum-sq \n       (fn [x] \n         (reduce + (map (fn [y] (* y y))(num-seq x))))]\n    (count (filter #(< % (calc-sum-sq %)) coll))))", "user": "50856bd1e4b004985b776e4c"}, {"problem": 120, "code": "(fn [nums]\n  (letfn [(num->digits [n] (map (comp #(- % 48) int) (str n)))\n          (square [n] (* n n))]\n    (count\n     (filter #(< % (reduce + (map square (num->digits %)))) nums))))", "user": "505bd09fe4b032b709c81373"}, {"problem": 120, "code": "(fn [coll]\n  (let [coll (vec coll)\n        coll2 \n        (vec (map (comp\n                   #(reduce + %)\n                   #(map (comp (fn [n] (* n n)) read-string str) %) \n                   seq \n                   str) \n                  coll))]\n    (reduce + (map #(if (< (nth coll %) (nth coll2 %)) 1 0) (range (count coll))))))", "user": "53eade35e4b036ad0777e4ec"}, {"problem": 120, "code": "(fn [s] (count (filter true? (map #(if (< % (reduce + (map (comp (fn [%] (* % %)) read-string) (re-seq #\"[0-9]\" (str %))))) true false) s))))", "user": "53e4b5a3e4b036ad0777e44b"}, {"problem": 120, "code": "(fn mult-digits [lyst]\n  (let [digits (fn digits-10 [n]\n                 (loop [acc '()\n                        n n]\n                   (if (< 0 n)\n                     (recur (cons (rem n 10) acc) (quot n 10))\n                     (vec acc))))\n        pred (fn [x]\n               (< x\n                  (reduce +\n                          (map #(Math/pow % 2)\n                               (digits x)))))]\n    (count (filter pred lyst))))", "user": "53e27bf1e4b036ad0777e3f2"}, {"problem": 120, "code": "#(count (get (group-by true? (map (fn [z] (< z (reduce (fn [x y] (+ x (* y y))) 0 (map int (map bigdec (map str (seq (str z)))))))) %)) true))", "user": "53f035c2e4b0742d9025b0d2"}, {"problem": 120, "code": "(fn [coll]\n  (reduce +\n  (map \n    #(if\n        (<=\n          (reduce\n            (fn [a b] \n              (+\n                a\n                (* (- (int b) 48) (- (int b) 48))\n              )\n            )\n            0\n            (str %1)\n          )\n          %1\n        )\n        0\n        1\n    )\n    coll\n  )) \n)", "user": "53f17931e4b0742d9025b0dd"}, {"problem": 120, "code": "(let [digits (fn [x] (map #(Integer/parseInt (str %)) (str x)))\n      digits-<-sum-square? (fn [x]\n                             (let [d (digits x)\n                                   squares (map #(* % %) d)\n                                   ss (reduce + squares)]\n                               (< x ss))\n                            )\n      ]\n  (fn how-many-digits-<-sum-square [x]\n    (->>\n      x\n      (filter digits-<-sum-square?)\n      count\n    )\n  )\n)", "user": "53edb628e4b0d648e757f4c8"}, {"problem": 120, "code": "(fn [c]\n   (count (filter (fn [n](< n (reduce + (map #(let [v (- (int %) (int \\0))] (* v v)) (str n))))) c)))", "user": "53ea5307e4b036ad0777e4e2"}, {"problem": 120, "code": "(fn [l]\n   (count (filter\n           #(< % \n               (reduce +\n                       (map (fn [x] (* x x))\n                            (map (comp (fn [q] (- q 48)) int) (seq (str %))))))\n           l)))", "user": "53f6d555e4b0db01ade6f9e5"}, {"problem": 120, "code": "(fn [coll]\n   (let [sum (map\n                (fn [k] (->> k\n                            (str)\n                            (apply vector)\n                            (map str)\n                            (map (fn [x] (Integer/parseInt x)))\n                            (map #(* % %))\n                            (apply +)))\n                coll)]          \n     (->> coll\n          (interleave sum)\n          (partition 2)\n          (filter (fn [[x y]] (> x y)))\n          (count))))", "user": "53ed6976e4b0d648e757f4c4"}, {"problem": 120, "code": "(fn [y]\n     (reduce +\n             (map (fn [x]\n                    (let [a (quot x 10000)\n                          b (quot x 1000)\n                          c (quot (mod x 1000) 100)\n                          d (quot (mod x 100) 10)\n                          e (mod x 10)]\n                      (println a \\space b \\space c \\space d \\space e)\n                      (if (< x (+ (* a a) (* b b) (* c c) (* d d) (* e e)))\n                        1\n                        0)\n                      )) y)))", "user": "51a4d802e4b0def3c5c5869a"}, {"problem": 120, "code": "(fn [x] \n  (count (filter \n     (fn [z] \n       (< z \n          ( (fn peu [v] \n              (if (< v 10) (* v v) \n                 (+ (peu (quot v 10)) (* (mod v 10) (mod v 10)) )\n              )           \n          ) z)    \n       )\n     ) x \n  ))\n)", "user": "53fc8424e4b0de5c418485b3"}, {"problem": 120, "code": "(fn [sq]\n  (count\n    (filter (fn [e] (< e (reduce + (map #(let [v (Integer. (str %))] (* v v)) (str e))))) sq)))", "user": "53ea72b6e4b036ad0777e4e5"}, {"problem": 120, "code": "(fn [xs]\n    (let [sosof (fn [x] (reduce + (map #(let [d (read-string (str %))] \n                                          (* d d)) \n                                       (str x))))]\n      (count (filter #(< % (sosof %)) xs))))", "user": "513e8141e4b02b2a3d8235c1"}, {"problem": 120, "code": "(fn [coll]\n  (letfn [(square [x] (* x x))\n          (digits [x] (map #(read-string (str %)) (str x)))\n          (digits-sum-of-squares [x]\n            (reduce #(+ (square %2) %1) 0 (digits x)))]\n    (let [lt (filter #(< % (digits-sum-of-squares %)) coll)]\n      (count lt))))", "user": "53fb5256e4b0de5c4184857f"}, {"problem": 120, "code": "(fn[s] (\n        count (filter\n               (fn [x] (> (reduce (fn [a b] (+ a ( * b b))) \n                                  0 \n                                  ((comp \n                                    (partial map (comp #(- % 48) int))\n                                    seq\n                                    str)\n                                   x))\n                          x))\n               s)))", "user": "53cd421ce4b00fb29b2212dd"}, {"problem": 120, "code": "(fn[a]\n  (count\n   (filter\n    (fn[b]\n      (< b (->> b str (map #(Integer. (str %)))(map #(* % %))(apply +)))       \n        )a)))", "user": "53ed2fafe4b0d648e757f4c1"}, {"problem": 120, "code": "(fn [col]\n  (count (filter (fn [n]\n                   (if (< n (reduce +   (map (fn [c] (let [d (Integer/parseInt (str c))] (* d d)  )\n                                              ) (str n))  )\n                       ) true false)\n                 )  col\n          ))\n)", "user": "537b1083e4b06839e8705e64"}, {"problem": 120, "code": "(fn __120 [coll]\n    (-> (filter (fn [xs]\n                  (->> (seq (str xs))\n                       (map #(Integer/parseInt (str  %)))\n                       (map #(* % %))\n                       (reduce +)\n                       (< xs)))\n                coll)\n          count))", "user": "5151c184e4b03e678e393add"}, {"problem": 120, "code": "#(let [sum-sq (fn sum-sq [n s] (if (zero? n) s (recur (int(/ n 10)) (+ s (Math/pow (rem n 10) 2)))))]\n  (count(filter (fn [x] (< x (sum-sq x 0))) %)))", "user": "53fe1c3be4b0de5c418485f2"}, {"problem": 120, "code": "(fn foo[s]\n  (count (filter (fn f[n] (< n (reduce + (map #(* % %) ((fn digits[n]\n  (map #(- (int %) (int \\0)) (str n))\n  ) n))))) s)))", "user": "52271ffee4b04e78ff2e19a9"}, {"problem": 120, "code": "(fn [ns]\n  (letfn [(digits [n]\n            (if (< n 10)\n              [n]\n              (conj (digits (quot n 10)) (rem n 10))))\n          (sqrd-sum [ns']\n            (reduce + 0 (map #(* %1 %1) ns')))]\n    (count\n     (for [n ns\n           :let [ss (sqrd-sum (digits n))]\n           :when (< n ss)]\n       n))))", "user": "53ef7f77e4b0742d9025b0ce"}, {"problem": 120, "code": "(fn [coll]\n   (count\n     (filter\n       #(letfn [(sqr-sum [n]\n                         (loop [r n acc 0]\n                           (if (<= r 0)\n                             acc\n                             (let [x (mod r 10)]\n                               (recur (quot r 10) (+ acc (* x x)))))))]\n          (< % (sqr-sum %)))\n       coll)))", "user": "5398123ee4b0b51d73faaef3"}, {"problem": 120, "code": "(fn [x](count(filter #(if (> % 99) false (< % (+(Math/pow (quot % 10) 2) (Math/pow (rem % 10)2)))) x)))", "user": "538d70abe4b0b51d73faae6e"}, {"problem": 120, "code": "(fn f [coll]\n   (let [sums (map #(reduce (fn [a i] (+ a (* i i))) 0 (map (fn [c] (Integer/parseInt (.toString c))) (str %))) coll)\n         cmps (map (fn [s o] (if (< o s) 1 0)) sums coll)]\n     (apply + cmps)))", "user": "535eaa73e4b04ce2eb3ed2d4"}, {"problem": 120, "code": "(fn cnt-sqrt [arg]\n  (let [get-digits (fn [n]\n                     (map #(Integer/valueOf (str %)) (String/valueOf n)))\n        digits-sqr (fn [n]\n                     (apply + (map #(* % %) (get-digits n))))\n        res-seq (filter #(< % (digits-sqr %)) arg)]\n    (count res-seq)))", "user": "53be3ee7e4b0d9a98559a6df"}, {"problem": 120, "code": "(fn [s]\n              (let [sos (comp\n                          (partial reduce +)\n                          (partial map #(let [i (- (int %) 48)] (* i i)))\n                          str\n                          )]\n                (count (filter #(< % (sos %)) s))))", "user": "53f592b7e4b0db01ade6f9d0"}, {"problem": 120, "code": "(fn [ns]\n  (letfn [(lsd [n]\n               (< n (reduce #(-> %2 str Integer/parseInt (Math/pow 2) int (+ %1)) 0 (str n))))]\n    (count (filter lsd ns))))", "user": "51780bfce4b0f89a8f53839c"}, {"problem": 120, "code": "(fn counter\n  [numbersToTest]\n  (count (filter #(<(first %)(last %))\n           (map (fn sumOfSquaresOfDigits\n                    [numberToTest]\n                    (vector numberToTest\n                      (->>\n                        ((fn [numberToTest]\n                           (loop [n numberToTest coll '()]\n                             (let [q (quot n 10)\n                                   r (mod n 10)]\n                               (if (zero? q)\n                                 (conj coll r)\n                                 (recur q (conj coll r)))))) numberToTest)\n                        (map #(* % %))\n                        (reduce +)\n                      )\n                    )\n) numbersToTest))))", "user": "525b4e8de4b0cb4875a45d0f"}, {"problem": 120, "code": "(fn test [coll]\n  (count (for [x coll\n           :when (< x (loop [current x\n                             result 0]\n                        (if (= current 0)\n                          result\n                          (recur (/ (- current (rem current 10)) 10) (+ result (* (rem current 10) (rem current 10))))\n                         )\n                       ))]\n           x)\n         )\n )", "user": "54021f13e4b0df28a13c62cc"}, {"problem": 120, "code": "(fn small-squaresum [xs]\n  (let [squaresum (fn [x]\n                    (->> x\n                         (iterate #(quot % 10))\n                         (take-while (comp not zero?))\n                         (map #(rem % 10))\n                         (map #(* % %))\n                         (reduce +)))]\n    (count (filter #(< % (squaresum %)) xs))))", "user": "53e8c684e4b036ad0777e48b"}, {"problem": 120, "code": "(fn cnt-sqrt [arg]\n(let [get-digits (fn [n]\n(map #(Integer/valueOf (str %)) (String/valueOf n)))\ndigits-sqr (fn [n]\n(apply + (map #(* % %) (get-digits n))))\nres-seq (filter #(< % (digits-sqr %)) arg)]\n(count res-seq)))", "user": "53d86564e4b0e771c302546b"}, {"problem": 120, "code": "reduce #(if (<  %2 (reduce (fn [s x] (+ s (* (- (int x) 48) (- (int x) 48)))) 0 (str %2)) )\n           (inc %1)\n           %1\n           ) 0", "user": "524025bce4b0ad64fa01030f"}, {"problem": 120, "code": "(fn [coll]\n  (let [f (fn [n]\n            (let [digits (map #(Character/getNumericValue %) (str n))\n                  sum (reduce #(+ %1 (* %2 %2)) 0 digits)]\n              (< n sum)))]\n    (count (filter true? (map f coll)))))", "user": "5338387de4b0e30313ee6c91"}, {"problem": 120, "code": "(fn cnt-sqrt [arg]\n  (let [get-digits (fn [n]\n                     (map #(Integer/valueOf (str %)) (String/valueOf n)))\n        digits-sqr (fn [n]\n                     (apply + (map #(* % %) (get-digits n))))\n        res-seq (filter #(< % (digits-sqr %)) arg)]\n    (count res-seq)))", "user": "51d42f44e4b013d740b70ddb"}, {"problem": 120, "code": "(fn f [coll]\n  (let [\n    to-digits (fn [n] (map (fn [x] (Integer. (str x))) (str n)))\n    pow (fn [x] (* x x))\n    pow-sum (fn [x] (apply + (map pow x)))\n    pairs (map (fn [e] (list e (to-digits e))) coll)\n    less-then \n      (filter \n       (fn [pair] (< (first pair) (pow-sum (last pair))))\n       pairs)]\n    \n    (count less-then)))", "user": "540d5085e4b0addc1aec670e"}, {"problem": 120, "code": "(fn\n\t[seq1]\n\t(count (filter (fn [elem] (< elem (reduce + (map #(* % %) (map (fn [x] (Character/getNumericValue x)) (str elem)))))) seq1)))", "user": "53d6b266e4b0e771c3025459"}, {"problem": 120, "code": "(fn [sq]\n  (count (filter (fn [n]\n  \t(< n (reduce + (map #(let [v (Integer. (str %))] (* v v)) (str n))))) sq))\n)", "user": "53e9681de4b036ad0777e4a4"}, {"problem": 120, "code": "(fn [n]\n  (count (filter (fn [x]\n                  (< x (reduce + (map #(* % %) (map (comp read-string str) (str x))))))\n                n)))", "user": "533018b2e4b019098a6f8b56"}, {"problem": 120, "code": "(letfn [(f [i]\n           (apply + (map smaller-than-sum-of-squares i)))\n        (smaller-than-sum-of-squares [i]\n                                     (let [digits (map #(- (int %) (int \\0)) (str i))\n                                           sum-of-squares (apply + (map #(* % %) digits))]\n                                       (if (< i sum-of-squares) 1 0)))]\n  f)", "user": "540470dae4b0addc1aec6658"}, {"problem": 120, "code": "(fn [x]\n\t(loop [remaining x acc 0]\n\t\t(if (empty? remaining) acc\n\t\t\t(let [sum-of-squares\n\t\t\t\t((fn [n]\n\t\t\t\t\t(loop [n n acc 0]\n\t\t\t\t\t\t(if (zero? n) acc\n\t\t\t\t\t\t\t(recur (quot n 10) (+ acc (Math/pow (rem n 10) 2)))\n\t\t\t\t\t\t)\n\t\t\t\t\t)\n\t\t\t\t) (first remaining))]\n\t\t\t\t(recur (rest remaining) (+ acc (if (< (first remaining) sum-of-squares) 1 0)))\n\t\t\t)\n\t\t)\n\t)\n)", "user": "5409f8eae4b0addc1aec66e6"}, {"problem": 120, "code": "(fn [x]\n  (letfn [(dn [x] (reduce #(+ % (* %2 %2)) 0 (map #(- (int %) (int \\0)) (str x))))]\n  (count (filter #(< % (dn %)) x))))", "user": "51a058dae4b0b292b01ee3f3"}, {"problem": 120, "code": "(fn [x]\n  (reduce + (for [j x]\n    \t (if \n                           (< j (reduce + (map (comp  #(* % %) read-string str)\n                                  (into '()\n                                        (str j))))) 1 0)   \n    )))", "user": "540479e7e4b0addc1aec665a"}, {"problem": 120, "code": "(fn my-count [coll]\n  (letfn [(check [n]\n                 (if (zero? n)\n                   0\n                   (+ (check (quot n 10)) (* (rem n 10) (rem n 10)))))]\n    (count (filter #(< % (check %)) coll))))", "user": "541096bde4b01498b1a719b2"}, {"problem": 120, "code": "(fn [xs]\n  (->> (map \n        (fn [n] (->> (str n)\n              (map #(let [x (Character/getNumericValue %)] (* x x)))\n              (apply +)\n              (< n)\n              )) xs)\n       (filter identity)\n       count))", "user": "537f4652e4b06839e8705eb1"}, {"problem": 120, "code": "(fn [coll]\n   (let\n       [number-to-digets (fn [n] (map #(Character/getNumericValue %) (str n)))\n        squares-sum (fn [coll] (reduce #(+ %1 (* %2 %2)) 0 coll))\n        sum (comp squares-sum number-to-digets)]\n     (count (filter #(< % (sum %)) coll))))", "user": "54094824e4b0addc1aec66da"}, {"problem": 120, "code": "(fn [s]\n  (loop [integers s\n         cnt 0]\n    (if (empty? integers)\n      cnt\n      (let [element (first integers)\n            sum-squares (reduce + (map #(* (Integer/parseInt %) (Integer/parseInt %))\n                                        (rest (clojure.string/split (str element) #\"\"))))]\n      \t(recur (rest integers) (if (< element sum-squares) (inc cnt) cnt))\n      )\n    )\n  )\n)", "user": "540f09b9e4b0addc1aec6725"}, {"problem": 120, "code": "(fn [c] (->> c\n               (filter (fn [n] (->> (str n)\n                                    (map #(let [x (- (int %) (int \\0))] (* x x)))\n                                    (apply +)\n                                    (< n))))\n               (count)))", "user": "538ca203e4b0b51d73faae5f"}, {"problem": 120, "code": "(fn count-em\n  [coll]\n  (count \n    (filter \n      (fn [x] (< x (reduce \n                     + \n                     (map \n                       (comp #(Math/pow % 2) read-string str) \n                       (str x)))))\n      coll)))", "user": "54091b82e4b0addc1aec66d5"}, {"problem": 120, "code": "#(letfn [(seqDec[n]\n                (if (< n 10) (list n)\n                  (lazy-seq\n                   (concat (list (rem n 10)) (seqDec (int (/ n 10)))))))\n         (sqd [sn] (reduce + (map * sn sn)))\n         ]\n   (count (filter true? (map < % (map sqd (map seqDec %))))))", "user": "541619e8e4b01498b1a719f9"}, {"problem": 120, "code": "(fn foo [xs]\n  (let [calc (fn bar [x] \n               (if (zero? x) 0\n                 (let [digit (mod x 10)]\n                   (+ (* digit digit) (bar (quot x 10))))))]\n    (count (filter (fn [x] (< x (calc x))) xs))))", "user": "54133900e4b01498b1a719de"}, {"problem": 120, "code": "(fn [coll]\n  (count (filter true? (map (fn [x]\n                              (loop [arg (str x) result 0]\n                                (if (<= (count arg) 0)\n                                  (< x result)\n                                  (recur (subs arg 1) \n                                         (+ result  \n                                            (* (- (int (first (seq arg))) 48)\n                                               (- (int (first (seq arg))) 48)))))))\n                            coll))))", "user": "52c672e2e4b0c2d177d6210e"}, {"problem": 120, "code": "(fn [coll] (count (filter (fn [num] (letfn\n                                   [(digits-square-sum [x]\n                                                       (reduce + (map #(let [value (Integer/parseInt (str %))]\n                                                                        (* value value)) (seq (str x)))))]\n                                 (< num (digits-square-sum num)))) coll)))", "user": "53c06438e4b0c98a41f5ccb0"}, {"problem": 120, "code": "(fn ssd [nums]\n  (letfn [(dig2num [d] (- (int d) 48))\n          (sq [x] (* x x))]\n    (count (filter neg? \n             (map - nums\n                    (map #(reduce + (map sq (map dig2num (seq (str %))))) nums))))))", "user": "53ff8c31e4b0de5c41848603"}, {"problem": 120, "code": "(fn [coll] (let [digits (fn [s] (map (comp #(Integer/parseInt %) str) (str s)))\n             sq (fn [d] (apply + (map #(* % %) d)))]\n         (count  (filter #(< % (sq (digits %))) coll))\n         ))", "user": "4ff4bed0e4b0678c553fc35f"}, {"problem": 120, "code": "(fn [coll]\n  (letfn [(less-than-squares? [x]\n            (< x\n               (reduce +  (map #(.pow (BigInteger. (str %1)) 2)\n                               (map #(Character/getNumericValue %) (str x))))))]\n    (count (filter less-than-squares? coll))\n  ))", "user": "53f6bfd9e4b0db01ade6f9e4"}, {"problem": 120, "code": "(fn [xs]\n  (count\n    (filter\n      (fn [x] (< x (reduce + (map #(* % %) (map (comp read-string str) (str x))))))\n      xs)))", "user": "511036c5e4b04c71fce993ee"}, {"problem": 120, "code": "(fn [xs] \n  (let [sqd (fn myf [x]\n      (let [n (mod x 10)]\n      (if (> x 10) \n        ( + (* n n) (myf (quot x 10)))\n        ( * n n )\n      )))]\n  (count (filter #(> (sqd %) %) xs)\n)))", "user": "52382d91e4b0fae3832e99f0"}, {"problem": 120, "code": "(fn [c] \n        (count (filter (fn [s] (< s \n                                  (apply + (map #(* % %) \n                                                (map #(Integer/parseInt (str %)) (seq (str s)))))))\n                       c)))", "user": "541ae7dbe4b01498b1a71a61"}, {"problem": 120, "code": "(fn me\n  [coll]\n  (letfn [(qualifies?\n            [n]\n            (->> (str n)\n                 (map #(Character/digit % 10))\n                 (map #(* % %))\n                 (reduce +)\n                 (< n)))]\n    (count (filter qualifies? coll))))", "user": "5401aefbe4b0df28a13c62c7"}, {"problem": 120, "code": "(fn [n]\n  (letfn\n    [(a [s] (reduce #(+ %1 (* %2 %2)) 0 s))\n     (b [n] (a (map #(- (int %) 48) (str n))))\n     (c [n] (< n (b n)))]\n    (count (filter c n))))", "user": "53f7820be4b0de5c41848560"}, {"problem": 120, "code": "(fn [numbers]\n  (let [digits (fn digits [x] (when-not (zero? x) (cons (mod x 10) (lazy-seq (digits (quot x 10))))))\n        less-square (fn [x] (< x (reduce + (map #(* % %) (digits x)))))]\n    (count (filter less-square numbers))))", "user": "5412ef7ee4b01498b1a719da"}, {"problem": 120, "code": "(fn count-than-digitsquares [coll]\n  (letfn [(int->digitlist [x]\n            (let [digit (mod x 10)]\n              (if (> x 0)\n                (cons digit (int->digitlist (quot x 10))))))\n          (less-than-digitsquares [x]\n            (< x (reduce + (map #(* % %) (int->digitlist x)))))]\n    (count (filter less-than-digitsquares coll))))", "user": "53f2370ee4b0742d9025b0e7"}, {"problem": 120, "code": "(fn [coll]\n           (let [fits? (fn [n]\n                         (let [digits (map #(Integer/parseInt (str %)) (str n))\n                               sum-of-squares (reduce + (map #(* % %) digits))]\n                           (< n sum-of-squares)))]\n             (count (filter fits? coll))))", "user": "5250b7a5e4b0541d1855b83e"}, {"problem": 120, "code": "(fn [s]\n    (letfn [(digisum [n] (apply + (map #(apply * (repeat 2 (- (int %) (int \\0)))) (str n))))]\n      (count (filter #(> (digisum %) %) s))))", "user": "54246fcce4b01498b1a71aed"}, {"problem": 120, "code": "(fn [coll]\n  (->> coll\n       (filter #(< % (loop [% % acc 0]\n                       (let [tmp (rem % 10)]\n                         (if (zero? %)\n                           acc\n                           (recur (quot % 10) (+ (* tmp tmp) acc)))))))\n       count))", "user": "5346f409e4b084c2834f4a46"}, {"problem": 120, "code": "(fn [z]\n  (count\n   (filter true?\n           (map (fn [y]\n                  (< y (apply + (map #(* % %) ((fn f [x]\n                                                 (conj (if (> x 9)\n                                                         (f (quot x 10))\n                                                         [])\n                                                       (rem x 10)))\n                                               y)))))\n                z))))", "user": "52541fe6e4b0541d1855b964"}, {"problem": 120, "code": "(fn [c] (count (filter (fn [x] (< x (apply + (map (comp #(* % %) #(- % 48) int) (str x))))) c)))", "user": "53a01fb1e4b0ca733b9744a6"}, {"problem": 120, "code": "(fn [xs]\n  (let [sqr       #(* % %)\n        to-digits #(map (comp sqr read-string str) (str %))]\n    (count (filter #(< % (apply + (to-digits %))) xs))))", "user": "51b8d3d5e4b050a1176cd69d"}, {"problem": 120, "code": "(fn c-i-s-s [coll]\n  (let [ss (fn [n]\n             (->> (str n) (map #(- (int %) (int \\0))) (map #(* % %)) (reduce +)))]\n    (reduce + (map #(if (< % (ss %)) 1 0) coll))))", "user": "54302691e4b0dad94371f2d7"}, {"problem": 120, "code": "(fn [ns]\n  (letfn [(c->i [c] (- (int c) 48))\n          (digits [n] (map c->i (seq (str n))))\n          (square [n] (* n n))\n          (sum-of-squares [nums] (reduce + (map square nums)))]\n    (count (filter #(< % (sum-of-squares (digits %))) ns))))", "user": "53ea3a63e4b036ad0777e4dc"}, {"problem": 120, "code": "(fn [nc]\n    (reduce (fn [ac v] \n              (if (> (loop [s 0 n v] \n                       (if (zero? n) s \n                                     (recur (+ s (* (mod n 10) (mod n 10))) (quot n 10))))\n                     v)\n                (inc ac) ac)) \n            0 nc))", "user": "5310e968e4b08068f379ecdd"}, {"problem": 120, "code": "(fn [xs]\n  (letfn [(parse [x] (->> (str x) (map #(- (int %) 48))))\n          (sqsum [x] (->> x (map #(* % %)) (reduce +)))]\n    (->> xs\n      (filter #(< % (sqsum (parse %))))\n      count)))", "user": "52ee0de4e4b05e3f0be25ec1"}, {"problem": 120, "code": "(fn [coll] \n  (count (filter \n          (fn [x]\n            (< x (apply + (map #(* % %) (map #(- (int %) 48) (seq (str x))))))) \n          coll)))", "user": "532a033be4b09d4e7a9b551f"}, {"problem": 120, "code": "(fn [i] (count \n         (filter \n          (fn [n] \n            (< n (reduce + \n                       (map \n                        (fn [x] (* x x)) \n                        (map #(Character/digit % 10) (str n)))))) i)))", "user": "53f3a4ace4b0742d9025b0f7"}, {"problem": 120, "code": "(fn [x] (letfn [(y [a] (map #(read-string (str %)) (str a)))\n                 (z [a] (reduce + (map #(* % %) a)))]\n           (count (filter #(> (z (y %)) %) x))))", "user": "54344721e4b0b6b47310fcea"}, {"problem": 120, "code": "(fn [coll] (let\n      [smaller-than-sq-sum (fn [n] (let [digits (map #(Character/getNumericValue %) (str n))\n                                         square-sum (apply + (map #(* % %) digits))]\n                                     (< n square-sum)))]\n      (count (filter smaller-than-sq-sum coll))))", "user": "54055aa9e4b0addc1aec6665"}, {"problem": 120, "code": "(fn cnt-sqrt [arg]\n(let [get-digits (fn [n]\n(map #(Integer/valueOf (str %)) (String/valueOf n)))\ndigits-sqr (fn [n]\n(apply + (map #(* % %) (get-digits n))))\nres-seq (filter #(< % (digits-sqr %)) arg)]\n(count res-seq)))", "user": "542edb4ae4b0dad94371f2c8"}, {"problem": 120, "code": "(fn [l]\n\t(reduce\n\t (fn [c x]\n\t   (if\n\t       (< x (reduce #(+ %1 (* %2 %2)) 0 (map #(Integer. %) (rest (clojure.string/split (str x) #\"\")))))\n\t     (+ c 1)\n\t     c))\n\t 0\n\t l))", "user": "53da3fcde4b0e771c3025497"}, {"problem": 120, "code": "(fn [coll]\n    (letfn [(digits [n] (if-not (= n 0) (cons (rem n 10) (digits (quot n 10))) ))]\n      (letfn [(the-sum-of-squared-digits [n] (reduce + (map #(* % %) (digits n))))]\n        (let [smaller-then-the-sum (filter #(> (the-sum-of-squared-digits %) %) coll)]\n          (count smaller-then-the-sum)))\n      \n      )\n    )", "user": "5433a07be4b0b6b47310fce0"}, {"problem": 120, "code": "(fn [x]\n    (count \n     (filter  \n      (fn [a] \n        (< a \n           (reduce #(let [y (Integer/parseInt (str %2))] \n             (+ (* y y) %1)) \n          0\n          (str a))))\n      x)))", "user": "537bde5de4b06839e8705e73"}, {"problem": 120, "code": "(fn [xs]\n    (letfn [(sq[x] (->> (str x) (map #(Math/pow (- (int %) (int \\0)) 2)) (reduce + )))]\n           (count (filter #(< % (sq %)) xs))))", "user": "5409a12fe4b0addc1aec66df"}, {"problem": 120, "code": "(fn [col]\n         (count (filter\n                  (fn [n]\n                    (< n (->> n\n                              str\n                              (map #(Integer/valueOf (str %))) ; digits\n                              (map #(* % %)) ; squared component digits\n                              (reduce +)))) ; sum\n                  col)))", "user": "53f891eee4b0de5c4184856d"}, {"problem": 120, "code": "(fn [xs] \n  (loop [xs xs res 0]\n    (if (empty? xs)\n      res\n      (recur (rest xs) (if (< (first xs) \n                              (apply + (map #(* %1 %1) (map #(Integer/parseInt (str %)) (str (first xs))))))\n                         (inc res)\n                         res)))))", "user": "53dfe311e4b0d874e779ae47"}, {"problem": 120, "code": "(fn [y]\n(count (filter #(> ((fn temp [x] \n                 (if ( < x 10 ) \n                   (* x x) \n                   (+ (temp (int (/ x 10))) (* (mod x 10 )(mod x 10) )\n                      )\n                   )\n                     ) %1)\n                   %1\n                   )\n                \n               y\t\n               )\n       )\n  )", "user": "5372c830e4b06d7f452d9dff"}, {"problem": 120, "code": "(fn [nums]\n  (let [dgs (fn [n] (map #(Integer/valueOf (str %)) (str n)))\n        sdgs (fn [n] (map #(* % %) n))\n        myf (fn [n] (filter #(< % ((fn [n] (apply + (sdgs (dgs n)))) %)) n))]\n    (count (myf nums))))", "user": "543d5c61e4b032a45b86934d"}, {"problem": 120, "code": "#({10 8,30 19,100 50,1000 50}(count %))", "user": "4db2903f535df7e46ed9b6bf"}, {"problem": 120, "code": "(fn [xs]\n  (let [digits (fn [x] (map #(- (int %) (int \\0)) (str x)))\n        sum-sq (fn [ls] (apply + (map #(* % %) ls)))]\n    (count (filter \n            \t#(< % (sum-sq (digits %))) xs))))", "user": "54448e84e4b032a45b869393"}, {"problem": 120, "code": "(fn [s] (loop [answer 0 remaining s]\n                    (let [ checkme (first remaining)\n                           numseq (map (fn [x] (Character/getNumericValue x)) (seq (str checkme)) )\n                           sumofsquares  (reduce (fn [total val] (+ total (* val val))) 0 numseq) \n                           answer ( if(< checkme sumofsquares) (+ answer 1) answer )\n                           ]\n                      (if (empty? (drop 1 remaining))\n                        answer\n                        (recur answer (drop 1 remaining))\n                      )\n                      )\n                    )\n  )", "user": "542baf7ce4b0dad94371f291"}, {"problem": 120, "code": "(fn [ns]\n  (let [zero-code (int \\0)\n        digit->int #(- (int %) zero-code)\n        square #(* % %)\n        square-of-digit #(square (digit->int %))\n        sum-of-squared-digits #(apply + (map square-of-digit (str %)))\n        smaller-than-sum-of-squared-digits #(< % (sum-of-squared-digits %))]\n    (count (filter smaller-than-sum-of-squared-digits ns))))", "user": "5424c523e4b01498b1a71b03"}, {"problem": 120, "code": "(fn f [x] \n (count (filter #(< % (\n     (fn digits [z]\n      (if (= 0 z)\n        0\n        (+ (digits (quot z 10)) (* (rem z 10)(rem z 10)) )\n      )\n     )\n     %) ) x) )\n)", "user": "54078851e4b0addc1aec66bd"}, {"problem": 120, "code": "(fn sum-of-squared-digits\n  [collection]\n  (count (filter\n          #(> (apply\n               +\n               (map (fn [x] (* (Integer/parseInt (str x)) (Integer/parseInt (str x)))) (str %))) %)\n          collection)))", "user": "52561295e4b0541d1855ba03"}, {"problem": 120, "code": "reduce \n    (fn [r x] \n       (if  \n         (< x \n            (reduce + \n              (map (comp #(* % %) #(- (int %) 48)) \n                   (str x))))\n         (inc r)\n         r\n         ))", "user": "5412646de4b01498b1a719d4"}, {"problem": 120, "code": "(fn [coll] (count (filter true? (map (fn [x] (< x (reduce + (map #(* (Integer. %) (Integer. %)) (rest (clojure.string/split (str x) #\"\")))))) coll))))", "user": "504457c0e4b01f6c9a8b2360"}, {"problem": 120, "code": "(fn [arg]\t\n    (let  [get-digits  (fn  [n] \n                         (map #(Integer/valueOf  (str %))  (String/valueOf n)))\n           digits-sqr  (fn  [n] \n                         (reduce +  (map #(* % %)  (get-digits n))))\n           res-seq  (filter #(< %  (digits-sqr %)) arg)]\n      (count res-seq)))", "user": "4dbf7a31535d020aff1edf75"}, {"problem": 120, "code": "(fn [col] \n  (count \n   (filter (fn [[n digsumsq]] (< n digsumsq)) \n           (map (fn [n]\n                  (loop [a 0 x n]\n                    (if (<= x 0)\n                      [n a]\n                      (let [q (quot x 10) r (rem x 10)]\n                        (recur (+ a (* r r)) q)))))\n                col))))", "user": "5095f761e4b0ba05ca7aebfd"}, {"problem": 120, "code": "(fn [coll]\n    (let [num->digits (fn [n] (map #(Integer/parseInt (str %))  (seq (str n))))\n          ss-lt? (fn [n] \n                   (< n (reduce + \n                                (map #(* % %) (num->digits n)))))]\n        \n        (count (filter ss-lt? coll ))))", "user": "54468fd3e4b032a45b8693b2"}, {"problem": 120, "code": "(fn [l]\n  (count (filter\n    (fn [c] (< c (apply + (map #(apply * (take 2 (repeat (- (int %) 48)))) (seq (str c))))))\n    l)))", "user": "53a5bc3ae4b0ef122a8689c3"}, {"problem": 120, "code": "(fn count-smaller [coll]\n  (letfn [(sum-squar [n]\n                     (let [nums (map #(Integer/parseInt (str %)) (seq (str n)))\n                           squar-sum-nums (map #(Math/pow % 2) nums)\n                           sum (reduce + squar-sum-nums)]\n                       sum))]\n    (count (filter #(< % (sum-squar %)) coll))))", "user": "53b7aa6ce4b047364c0444d1"}, {"problem": 120, "code": "(fn [s]\n  (loop [y 0, x s] \n    (if (empty? x)\n      y\n      (if (< (first x) (reduce + (map #(* % %) (map #(- (int %) 48) (str (first x))))))\n      \t(recur (inc y) (drop 1 x))\n        (recur y (drop 1 x))\n))))", "user": "54524afbe4b0e397800069bc"}, {"problem": 120, "code": "(fn [x] (count (filter #(< % ((fn [n]\n  (loop [sum 0 v n]\n    (if (zero? v)\n      sum\n      (recur (+ sum (* (mod v 10) (mod v 10)))\n             (quot v 10))))) %)) x)))", "user": "542d2385e4b0dad94371f2b2"}, {"problem": 120, "code": "(fn [coll] (count (filter true? (map (fn [num] (< num (reduce + (map #(.pow (BigInteger. (str %)) 2)  (seq (str num)))))) coll))))", "user": "52485723e4b05ef8e38e63d2"}, {"problem": 120, "code": "(fn sumsquaredigits\n  ([col] (sumsquaredigits col 0))\n  ([xs cnt]\n    (let [number (first xs)]\n      (if (empty? xs)\n        cnt\n        (if (> ( (fn digitsquare [x]\n   (loop [number x\n          acc []]\n     (if (<  number 10)\n       (reduce + (map #(* % %) (conj acc number)))\n       (recur (unchecked-divide-int number 10) (conj acc (mod number 10)))))) number) number)\n          (sumsquaredigits (rest xs) (inc cnt))\n          (sumsquaredigits (rest xs) cnt))))))", "user": "544257b4e4b032a45b869379"}, {"problem": 120, "code": "(fn [coll]\n  (letfn [(square [x] (* x x))\n          (sum-squares [x]\n            (reduce + (map (fn [y] (square (- (int y) 48))) x)))]\n    (let [pairs (map #(vector % (sum-squares (str %))) coll)]\n      (count (filter #(apply < %) pairs)))))", "user": "53322cece4b019098a6f8b73"}, {"problem": 120, "code": "(fn [s]\n  (count\n    (filter\n      (fn [el] \n        (< el\n           (reduce + (map #(Math/pow (Character/getNumericValue %) 2) (str el)))\n      ))\n      s)))", "user": "545801f6e4b01be26fd74615"}, {"problem": 120, "code": "(fn [s] \n  (let [s? (fn [x] (< x (reduce + (map #(* % %) (map #(- (int %) 48) (str x))))))]\n  (count (filter s? s))))", "user": "5405ae2be4b0addc1aec6671"}, {"problem": 120, "code": "(fn [xs]\n  (->> xs\n       (filter\n        (fn [x] (< x (apply + (map (comp #(Math/pow % 2) #(Integer/parseInt %) str) (str x))))))\n       (count)))", "user": "534941d1e4b084c2834f4a60"}, {"problem": 120, "code": "(fn [s] \n  (count (for [n s :when (< n \n                            (apply + (map (comp #(* % %) \n                                          \t\t#(- (int %) (int \\0)))\n                                          (seq (str n)))))]\n           n)))", "user": "5457e5f1e4b01be26fd74613"}, {"problem": 120, "code": "(fn [l] (count (filter (fn [n] (< n (->> n str seq (map (fn [x] (Integer. (str x)))) (map #(* % %)) (reduce +)))) l)))", "user": "5454b84ce4b0e397800069d9"}, {"problem": 120, "code": "(fn [[& nums]]\n    (count (filter (fn [n]\n           (let [numseq (map (comp #(* % %) read-string str) (str n))]\n             (< n (apply + numseq)))) nums)))", "user": "544cf5d7e4b0e39780006977"}, {"problem": 120, "code": "(fn [col]\n  (count\n   (filter\n    (fn [num] \n      (< num \n         (reduce + \n                 (map {\\0 0 \\1 1 \\2 4 \\3 9 \\4 16 \\5 25 \\6 36 \\7 49 \\8 64 \\9 81} \n                      (seq (str num))))))\n    col)))", "user": "54580586e4b01be26fd74616"}, {"problem": 120, "code": "(fn [xs]\n   (let [square (fn [x] (* x x))\n         component-digits (fn [n] (->> (str n)\n                                       seq\n                                       (mapv str)\n                                       (mapv read-string)))\n         square-all-components (fn [n] (->> (component-digits n)\n                                            (mapv square)\n                                            (apply +)))\n         compare-n-and-square (fn [n] (compare n (square-all-components n)))]\n     (->> (map compare-n-and-square xs)\n          (filter neg?)\n          count)))", "user": "5327c591e4b09d4e7a9b54ff"}, {"problem": 120, "code": "(fn [coll]\n  (letfn [(sodsq [n]\n            (->> (str n)\n                 (map (comp #(* % %)\n                            #(Long/parseLong %)\n                            str))\n                 (apply +)))]\n    (count (filter #(< % (sodsq %)) coll))))", "user": "505aa653e4b021387fb89857"}, {"problem": 120, "code": "(fn f120\n  [lst]\n  (reduce + (map (fn [x]\n          (if (< x (reduce + (map #(* (Integer/parseInt %) (Integer/parseInt %)) (for [itm (str x)] (str itm)))))\n            1\n            0\n            )\n          )\n        lst\n        ))\n  )", "user": "526698c9e4b03e8d9a4a7144"}, {"problem": 120, "code": "(fn jp [ser] (if (empty? ser) 0 (+ (\n                                    \n                                    if \n                                    \n                                    (< (first ser) \n                                       \n                                       ((fn ds [b] (if (= b 0) 0 (+ (* (rem b 10) (rem b 10)) (ds (/ (- b (rem b 10)) 10))))) (first ser))\n                                       \n                                       )\n                                    \n                                    \n                                    1\n                                    0\n                                    \n                                    ) (jp (rest ser)))))", "user": "544e1794e4b0e39780006980"}, {"problem": 120, "code": "(fn check[col]\n  (letfn [(sq[n] (reduce + (map #(let [x (- (int %) (int \\0))] (* x x)) (str n))))]\n    (count (filter #(< % (sq %)) col))))", "user": "5460f59ce4b01be26fd74695"}, {"problem": 120, "code": "(fn [coll]\n  (let [digits (fn [n] (map #(Character/digit % 10) (str n)))\n        ss (fn [n] (apply + (map #(* % %) (digits n))))]\n    (reduce #(if (< %2 (ss %2)) (inc %) %) 0 coll)))", "user": "53dfbc75e4b0d874e779ae44"}, {"problem": 120, "code": "(fn [col]\n  (reduce #(if %2 (inc %) %) 0\n          (filter\n           (fn [[n & digits]] (< n (reduce #(+ % (* %2 %2)) 0 digits)))\n           (map #(cons % (map (fn [a] (Integer/valueOf (str a))) (str %))) col))))", "user": "5367bc60e4b0243289761e81"}, {"problem": 120, "code": "(fn [coll]\n  (letfn [(cds [x] (map #(Integer/valueOf (str %)) (str x)))]\n    (reduce (fn [a e] \n              (if (< e (reduce #(+ % (* %2 %2)) 0 (cds e)))\n                (inc a)\n                a))\n            0\n            coll)))", "user": "5339c105e4b0e30313ee6cae"}, {"problem": 120, "code": "(fn count-less-than-ssq \n   [s]\n   (letfn [(ssq [x] \n           (reduce \n             #(+ %1 (* %2 %2))\n              0\n              (map #(read-string (str %)) (str x))))]\n     (count (filter #(< % (ssq %)) s))))", "user": "545e9cf1e4b01be26fd7467f"}, {"problem": 120, "code": "(fn [coll] (count (filter (fn [n] (< n (#(apply + (map (comp (fn [x] (* x x)) read-string str) (str %))) n))) coll)))", "user": "542c1f73e4b0dad94371f29d"}, {"problem": 120, "code": "(fn sum-of-squared-digits\n  [s]\n  (count \n   (filter \n    (fn [bool] (identity bool))\n    (map #(< %1 %2) \n      s \n      (map \n       (fn [number] \n         (reduce \n          + \n          (map \n          #(let [x (read-string (str %))] (* x x)) \n          (seq (str number)))))\n       s)))))", "user": "53b952eee4b047364c0444e6"}, {"problem": 120, "code": "#(count (filter (fn [k]\n                  (< k \n                     (reduce + (map (fn [x] (* x x)) \n                          ((fn digits [n]\n                             (if (> n 9)\n                               (conj (digits (quot n 10)) (rem n 10))\n                               [n]\n                               )) k))))\n                  ) %))", "user": "544e9022e4b0e3978000698b"}, {"problem": 120, "code": "(fn [coll] (count (filter\n                    (fn [x] (< x\n                               (reduce (fn [cur next] (+ cur (* next next)))\n                                       0\n                                       (map #(- (int %) (int \\0)) (str x))))) coll)))", "user": "5462ce20e4b01be26fd746b8"}, {"problem": 120, "code": "(fn [s] (reduce + (map (fn [k] (if (< k (reduce + ((fn [j] (map (fn [i] (Math/pow (Character/getNumericValue i) 2)) (str j))) k))) 1 0)) s)))", "user": "53c1b787e4b00fb29b221266"}, {"problem": 120, "code": "(fn [xs]\n  (count\n   (filter (fn [x]\n             (< x\n                (apply + (map #(Math/pow (- (int %) 48) 2) (str x)))))\n           xs)))", "user": "5136f659e4b04059df19f2fd"}, {"problem": 120, "code": "(fn\n            [coll]\n            (let [expl (fn [number]\n                         (map #(Character/digit % 10) (str number)))\n                  scd (fn [s]\n                        (->> s\n                             (map #(* % %))\n                             (reduce +)))\n                  ssd? (fn [n]\n                         (if (< n (scd (expl n))) true\n                                                  false))]\n\n              (->> coll\n                   (filter ssd?)\n                   (count))))", "user": "515ebde3e4b01e5d11ccd0a8"}, {"problem": 120, "code": "(fn [l]\n  (count \n   (filter\n    (fn [x] (< x (apply + (map #(Math/pow (- (int %) 48) 2) (str x)))))\n   l)))", "user": "54651faee4b01be26fd746d6"}, {"problem": 120, "code": "(fn [xs]\n  (count\n   (filter\n    (fn [x]\n      (< x (apply +\n                  (map #(* (Integer. (str %)) (Integer. (str %)))\n                       (str x)))))\n    xs)))", "user": "547584d9e4b0c51c1f4d729b"}, {"problem": 120, "code": "(fn [xs]\n  (count\n   (filter\n    (fn [x]\n      (< x (apply + (map #(* % %) (map (comp read-string str) (str x))))))\n    xs)))", "user": "511688d5e4b0b3e208dba05a"}, {"problem": 120, "code": "(fn [s] (count (filter (fn [n] (< n (reduce + (map (fn [d] (Math/pow (- (int d) (int \\0)) 2)) (str n))))) s)))", "user": "51672d15e4b079759a74a5e7"}, {"problem": 120, "code": "(fn ssd [r]\n  (reduce + (map (fn check [n]\n  \t        (let [nlist ((fn digits [x]\n  \t\t(if (< x 10) (list x)\n      \t\t(cons (mod x 10) (digits (quot x 10))))) n)]\n            (if (< n (reduce + (map #(* % %) nlist))) 1\n                                                      0))) r)))", "user": "5414b7c4e4b01498b1a719ed"}, {"problem": 120, "code": "(fn [coll]\n  (let [digits (fn [n]\n                 (loop [input n\n                        multiple 1\n                        res []]\n                   (if (> input 0)\n                     (recur (quot input 10) (* 10 multiple) (cons (rem input 10) res))\n                     res)))\n        smaller-than-digits (fn [n]\n                              (< n (reduce + (map #(* % %) (digits n)))))]\n    (count (filter smaller-than-digits coll))))", "user": "546c4c5fe4b00cfc9eacc178"}, {"problem": 120, "code": ";; helper to sum squares of digit values\n(fn smaller-than-square [x]\n\t(letfn [(sum-squares [n]\n\t\t(reduce + (map (comp #(* % %) #(Integer/parseInt %) str) (seq (str n)))))]\n\t(count (filter #(> (sum-squares %) %) x))))", "user": "53703287e4b0fc7073fd6e8f"}, {"problem": 120, "code": "(fn [s] (count (filter \n         #(< % (reduce \n                (fn [t d]\n                  (+ t (* (Character/digit d 10)\n                        (Character/digit d 10))))\n                0 (str %)))\n         s)))", "user": "53572176e4b04ce2eb3ed276"}, {"problem": 120, "code": "(fn [xs]\n  (letfn [(sq [n] (reduce + (map #(* %1 %1) (map #(- (int %) 48) (str n)))))]\n    (count (filter #(< %1 (sq %1)) xs))))", "user": "546176e7e4b01be26fd746a2"}, {"problem": 120, "code": "(fn [coll]\n  (count (filter (fn [n]\n         (let [string (str n)\n               digits (map #(- (int %) 48) string)\n               sum-sq (reduce #(+ %1 (* %2 %2)) 0 digits)]\n           (< n sum-sq))) coll)))", "user": "5478c4fee4b0c51c1f4d72c0"}, {"problem": 120, "code": "(fn [a]\n  (count\n   (filter\n    (fn [i]\n      (< i (reduce #(+ % (* %2 %2)) 0 (map #(- (int %) 48) (str i))))\n      )\n    a)))", "user": "4fe9de74e4b0547ebccb2475"}, {"problem": 120, "code": "(let [digits (fn [i]\n                (map (comp #(- % 48 )int)(str i)))\n       ssd    (fn [i]\n                (reduce\n                 #(+ %1 (* %2 %2))\n                 0\n                 (digits i)))]\n   #(count (filter (fn [i] (< i (ssd i))) %)))", "user": "547d8e93e4b0c51c1f4d72f4"}, {"problem": 120, "code": "(fn [coll]\n    (let [digits (fn digits [n]\n                     (if (< n 10)\n                       (list n)\n                       (cons (rem n 10) (digits (quot n 10)))))]\n         (count (filter\n                  #(< % (apply + (map * (digits %) (digits %))))\n                  coll))))", "user": "5353afa0e4b084c2834f4b03"}, {"problem": 120, "code": "#(count(\n\tfilter\n\t(\n\t\tfn[x](\n\t\t\tloop [l [] i x]\n\t\t\t(\n\t\t\t\tif(> i 0)\n\t\t\t\t\t(recur (cons (* (rem i 10) (rem i 10)) l) (quot i 10))\n\t\t\t\t\t(< x (reduce + l))\n\t\t\t)\n\t\t)\n\t)\n\t%\n)\n)", "user": "548018dbe4b0c51c1f4d732a"}, {"problem": 120, "code": "(fn problem-120\n  [coll]\n  (letfn [(sum-of-square-of-digits\n            [x]\n            (let [digits (map #(Character/digit % 10)\n                              (str x))\n                  squares (map #(* % %) digits)]\n              (reduce + squares)))]\n    (when-let [s (seq coll)]\n      (count (filter #(< % (sum-of-square-of-digits %)) s)))))", "user": "526e1bd0e4b03e8d9a4a730b"}, {"problem": 120, "code": "(fn [a]\n  (count (filter (fn [x] (< x (reduce #(+ % (* %2 %2)) 0 (map #(read-string (str %)) (str x))))) a)))", "user": "546e4ab8e4b00cfc9eacc19c"}, {"problem": 120, "code": "#(get {10 8 30 19 100 50 1000 50} (count %))", "user": "4df1e213535d08e6dec9fe20"}, {"problem": 120, "code": "(fn sq-digs [xs]\n  (count\n   (filter true?\n           (for [x xs] \n             (->> x\n                  (str)\n                  (map {\\0 0\n                        \\1 1\n                        \\2 2\n                        \\3 3\n                        \\4 4\n                        \\5 5\n                        \\6 6\n                        \\7 7\n                        \\8 8\n                        \\9 9})\n                  (map #(* % %))\n                  (apply +)\n                  (< x))))))", "user": "547ad587e4b0c51c1f4d72ce"}, {"problem": 120, "code": "(fn [coll]\n  (count (filter (fn [n]\n                   (let [digits (map read-string (re-seq #\"\\d\" (str n)))\n                         ssq (apply + (map #(* % %) digits))]\n                   (< n ssq)))\n                 coll)))", "user": "5484143de4b0e286459a1197"}, {"problem": 120, "code": "(fn [s]\n  (->> s\n       (filter (fn [n]\n                 (let [digits (->> (seq (str n))\n                                   (map int)\n                                   (map #(- % 48)))\n                       sum-of-squared-digits (->> digits\n                                                  (map #(* % %))\n                                                  (reduce +))]\n                   (< n sum-of-squared-digits))))\n       count))", "user": "4e6a2f93535d8ccf87e9feaa"}, {"problem": 120, "code": "(fn [xs]\n  (let [digits   (fn [d] (map #(- (int %) (int \\0)) (#(seq (str %)) d)))\n        smaller? (fn [x] (< x (reduce + (map #(* % %) (digits x)))))]\n  (count\n    (filter smaller? xs))))", "user": "50478418e4b0371827a27bc3"}, {"problem": 120, "code": "(fn [coll]\n  (reduce\n    (fn [v x]\n      (if (> (reduce\n               +\n               (map (fn [y] (* (Character/digit y 10) (Character/digit y 10)))\n                    (str x))\n               ) x)\n        (inc v)\n        (+ v 0))\n      )\n    0\n    coll))", "user": "540997ede4b0addc1aec66dd"}, {"problem": 120, "code": "(fn [xs]\n  (letfn \n    [(digits [x] (loop [coll () n x] (if (< n 10) (conj coll n) (recur (conj coll (mod n 10)) (quot n 10)))))\n     (sum-square [coll] (reduce #(+ % (* %2 %2)) 0 coll))\n     (smaller-sum-square [x] (< x (sum-square (digits x))))]\n    (->> xs (filter smaller-sum-square) count)))", "user": "5392bfdee4b0b51d73faaeb2"}, {"problem": 120, "code": "(fn [l]\n  (count\n \t(for [x l\n          :when (< x \n                   (->>\t(str x)\n                        (map int)\n       \t\t\t\t    (map #(- % 48))\n       \t\t\t\t    (map #(* % %))\n       \t\t\t\t    (apply +)))]\n      x)))", "user": "54848141e4b0e286459a119e"}, {"problem": 120, "code": "(fn\n  [coll]\n  (let [ch->num #(Character/digit % 10)\n        square #(* % %)\n        digits #(map (comp square ch->num) (str %))]\n    (->> coll\n  \t   (filter #(< % (reduce + (digits %))))\n       (count))))", "user": "54577fefe4b01be26fd7460d"}, {"problem": 120, "code": "(fn [x] \n  (count \n   (mapcat \n    #(when (< %1 %2) (list %1)) \n    x \n    (map \n     (comp \n      (partial apply +) \n      (partial map #(* % %)) \n      (partial map #(- (int %) 48)) \n      str)\n      x))))", "user": "5463fbbde4b01be26fd746ca"}, {"problem": 120, "code": "#(let [sqr-digits\n       (fn sqr-dig[n tot]\n         (if (= n 0)\n           tot\n           (sqr-dig (int (/ n 10)) (+ tot (* (mod n 10) (mod n 10))))\n         )\n       )]\n  (count (filter (fn[x] (< x (sqr-digits x 0))) %))\n)", "user": "545537c1e4b0e397800069dd"}, {"problem": 120, "code": "(fn [nums]\n  (let [f (fn [n] (->> (str n)\n                       (map #(- (int %) (int \\0)))\n                       (map #(* % %))\n                       (reduce + )))]\n    (->> nums\n         (filter #(< % (f %)))\n         (count))))", "user": "5479c58de4b0c51c1f4d72c7"}, {"problem": 120, "code": "(fn cnt-sqrt [arg]\n  (let [get-digits (fn [n]\n                     (map #(Integer/valueOf (str %)) (String/valueOf n)))\n        digits-sqr (fn [n]\n                     (apply + (map #(* % %) (get-digits n))))\n        res-seq (filter #(< % (digits-sqr %)) arg)]\n    (count res-seq)))", "user": "5486adf7e4b0e286459a11be"}, {"problem": 120, "code": "(fn sumsq [nums]\n  (let [get-digits (fn [n] (->> (str n)\n                                (partition 1)\n                                (map (partial apply str))\n                                (map #(Integer/parseInt %))))\n        pow (fn [base exp] (int (Math/pow base exp)))\n        sum-squared (fn [n] (->> (get-digits n)\n                                 (map #(pow % 2))\n                                 (reduce +)))]\n    (count (filter #(< % (sum-squared %)) nums))))", "user": "5483d59fe4b0e286459a1194"}, {"problem": 120, "code": "(fn [coll]\n\t(count\n\t\t(remove zero? (for [n coll]\n\t\t\t(let [ss (map #(* % %)\n\t\t\t\t\t\t(map #(Integer/parseInt %) (map str (str n))))]\n\t\t\t(if (< n (reduce + ss)) n 0 ))\n\t\t))\n\t)\n)", "user": "5472d919e4b094393f72dd7b"}, {"problem": 120, "code": "(fn [xs]\n  (letfn [(dsum [ys]\n             (reduce + (map #(* % %) ys))        \n          )\n          (n2ns [y]\n            (if (= y 0) nil (cons (rem y 10) (n2ns (quot y 10))))\n          )\n          ]\n    (count\n      (filter \n        #(< % (dsum (n2ns %)))\n        xs\n      )\n    )\n  )\n)", "user": "4fc8f671e4b0ee37620e1840"}, {"problem": 120, "code": "(fn [nums]\n   (letfn [(wtf? [n]\n                 (->> (map #(- (int %) 48) (seq (str n)))\n                      (map #(* % %))\n                      (reduce +)\n                      (< n)))]\n     (count (filter true? (map wtf? nums)))))", "user": "52e0e646e4b09f7907dd1416"}, {"problem": 120, "code": "(fn foo [c] \n    (let [sq #(* % %)\n    \t  sumSqDigits (fn [s] (reduce #(+ %1 (sq (Integer/parseInt (str %2)))) 0 s))]\n         (->> c\n              (map #(vec (list % (sumSqDigits (.toString %)))))\n              (filter (fn [[a b]] (< a b)))\n              (count)\n             )\n      )\n  )", "user": "548f5086e4b0e286459a1239"}, {"problem": 120, "code": "(fn [s]\n  (count (filter (fn [a] (< a (reduce + (map #(* % %) (map #(- (int %) (int \\0)) (str a)))))) s)))", "user": "53e745a1e4b036ad0777e479"}, {"problem": 120, "code": "(fn [s]\n  (count (filter \n    #(> (reduce + (map (fn [x] (* (- (int x) 48) (- (int x) 48))) \n     (seq (str %)))) %) s)))", "user": "53bcdd41e4b0d9a98559a6c0"}, {"problem": 120, "code": "(fn [r] (count (filter #(< % (loop [a 0 n %] (if (= 0 n) a (recur (+ a (* (mod n 10) (mod n 10))) (quot n 10))))) r)))", "user": "53b15e6ee4b047364c04448f"}, {"problem": 120, "code": "(fn [s]\n    (count (filter  (fn [x] (< x (apply + (map #(let [y (Integer/parseInt (str %))] (* y y))\n                                               (str x)))))\n                    s)))", "user": "4f9b3532e4b0dcca54ed6d13"}, {"problem": 120, "code": "(fn [xs]\n  (letfn [(to-digits [x]\n            (if (zero? (quot x 10))\n              [(rem x 10)]\n              (conj (to-digits (quot x 10)) (rem x 10))))]\n    (count (filter (fn [x]\n                     (< x (reduce #(+ %1 (* %2 %2)) 0 (to-digits x)))) xs))))", "user": "53968a70e4b0b51d73faaee0"}, {"problem": 120, "code": "(fn [nums] (count (filter \n  (fn [x] (< x (reduce + (map #(* % %)\n       (map #(Character/getNumericValue %) (seq (str x))))))) \n                    nums)))", "user": "549c1713e4b0f3d1d8e70f82"}, {"problem": 120, "code": "(fn [c]\n\t(let [ss (fn [s] (reduce + (map #(* % %) s)))\n\t\t  td #(map (comp read-string str) (str %))]\n\t\t(count \n\t\t\t(filter \n\t\t\t\t#(< % (ss (td %))) c))))", "user": "536e5b68e4b0fc7073fd6e6d"}, {"problem": 120, "code": "(fn [col] (->> col (filter (fn [x] (< x (->> x str (map #(- (int %) (int \\0))) (reduce #(+ %1 (* %2 %2)) 0))))) count))", "user": "54769c7ae4b0c51c1f4d72a8"}, {"problem": 120, "code": "(fn [coll] \n  (let [ssq (fn [i] (reduce #(+ %1 (apply * (repeat 2 (- (int %2) 48)))) 0 (str i)))]\n    (count (filter #(< % (ssq %)) coll))))", "user": "4f1ef6a0535d64f60314649b"}, {"problem": 120, "code": "(fn[c] (count (filter (fn [i] (< i  (apply +  (map #(* % %) (map read-string (map str (str i)) ))))) c)))", "user": "512b07f7e4b078b06821febb"}, {"problem": 120, "code": "(fn sol [s]\n  (let [smaller-sum-squared-digits (fn [n]\n          (->> (str n)\n               (map #(- (int %) 48))\n               (map #(* % %))\n               (reduce +)\n               (< n)))]\n    (count (filter smaller-sum-squared-digits s))))", "user": "547e3846e4b0c51c1f4d7302"}, {"problem": 120, "code": "(fn ssd [x]\n  (letfn [(lt-sum-digits-square [x]\n            (< x (apply +\n                        (map #(* (Integer/valueOf (str %)) (Integer/valueOf (str %)))\n                             (str x))))\n            \n            )]\n    (->> x (filter lt-sum-digits-square) (count))))", "user": "549c8bbde4b0f3d1d8e70f8c"}, {"problem": 120, "code": "(fn [col]\n       (->> col\n         (filter (fn[x](< x\n                    (->> x str\n                      (map #(- (int %)48))\n                      (reduce #(+ % (* %2 %2))0)))))\n         count))", "user": "549ac3cde4b0f3d1d8e70f71"}, {"problem": 120, "code": "(fn [xs]\n  (reduce (fn [v i]\n            (if (> (loop [num i sum 0]\n                     (if (> num 0)\n                       (recur (int (/ num 10))\n                              (+ sum (* (int (mod num 10))\n                                        (int (mod num 10)))))\n                       sum))\n                   i)\n              (inc v)\n              v)) 0 xs))", "user": "5188c249e4b0bdff0e072d54"}, {"problem": 120, "code": "(fn sum-of-sqr-digits [coll]\n  (letfn [(digits [n]\n                  (cond (= n 0) []\n                        :else (conj (digits (int (/ n 10))) (rem n 10))))\n          (square [n] (* n n))]\n    (let [coll-digits (map digits coll)\n          coll-sqr-digits (map #(map square %) coll-digits)\n          coll-sqr-digit-sums (map #(reduce + %) coll-sqr-digits)\n          coll-zipped (map vector coll coll-sqr-digit-sums)\n          coll-filtered (filter #(< (first %) (second %)) coll-zipped)]\n      (count (map first coll-filtered)))))", "user": "52b9e920e4b07a9af57922c9"}, {"problem": 120, "code": ";(fn [num]\n;  (count   \n;  (filter #(< (get % 0) (get % 1))\n;  (map (fn [x] [x,\n;                (reduce + \n;                        (map #(* % %) \n;                        (map #(read-string (str %))\n;                        (seq (str x)))))\n;               ] ) num  \n;  ))\n;))\n\n(fn [num]\n  (count   \n  (filter (fn [i] (< i  \n            (reduce + \n              (map #(* % %) \n                   (map #(read-string (str %))\n                        (seq (str i))\n                    )\n              )\n             )\n          )) num  \n  )\n  )\n)", "user": "53029281e4b0d8b024fd372e"}, {"problem": 120, "code": "(fn [s]\n  (->> s\n       (map #(< % (reduce (fn [z x]\n                            (+ z (Math/pow (- (int x) 48) 2)))\n                          0 (str %))))\n       (filter true?)\n       count))", "user": "50ef4e2be4b0a78662fa2653"}, {"problem": 120, "code": "(fn p120 [coll]\n  (count (filter (fn [ele]\n            (< ele (reduce\n                     +\n                     (map\n                       #(* (Character/getNumericValue %)\n                           (Character/getNumericValue %))\n                       (str ele)))))\n          coll)))", "user": "543b12cce4b032a45b86932a"}, {"problem": 120, "code": "(fn [z]\n(count \n(filter \n(fn isfound [x] (< \n                  x\n                  (reduce \n                    #(+ % (java.lang.Math/pow (- (int %2) 48) 2))\n                    0\n                    (seq (str x))\n                    )\n                  )\n  )\nz\n)\n)\n)", "user": "54a1d643e4b09f271ff37c50"}, {"problem": 120, "code": ";(fn [s]\n;  (let [c (count s)]\n;    (if (= c 10) 8\n;      (if (= c 30) 19\n;        50))))\n\n(fn ssd [s]\n  (let [ssd-s (reduce \n                (fn [coll e] (conj coll (reduce + (map #(Math/pow (- (int %) (int \\0)) 2) (seq (str e)))))) \n                []  s)]\n    (reduce + (map-indexed (fn [idx e] (if (< (nth s idx) e) 1 0)) ssd-s))))", "user": "53fe1b42e4b0de5c418485f1"}, {"problem": 120, "code": "(fn [input]\n  (reduce +\n     (map (fn [num] (if (< num (reduce + (map #(* (- (int %) (int \\0)) (- (int %) (int \\0))) (str num)))) 1 0))            \n          input\n       )\n   )\n  )", "user": "530d1060e4b08068f379eca2"}, {"problem": 120, "code": "(fn cnt-sqrt [arg]\n  (let [get-digits (fn [n]\n                     (map #(Integer/valueOf (str %)) (String/valueOf n)))\n        digits-sqr (fn [n]\n                     (apply + (map #(* % %) (get-digits n))))\n        res-seq (filter #(< % (digits-sqr %)) arg)]\n    (count res-seq)))", "user": "51ca5378e4b08b1cbd0d9480"}, {"problem": 120, "code": "(fn sq-counter [args]\n  (count\n    (filter true?\n      (map >\n        (map \n          (fn sqs [i]\n            (+\n              (* (quot i 1000) (quot i 1000))\n              (* (quot (mod i 1000) 100) (quot (mod i 1000) 100))\n              (* (quot (mod (mod i 1000) 100) 10) (quot (mod (mod i 1000) 100) 10))\n              (* (mod (mod (mod i 1000) 100) 10) (mod (mod (mod i 1000) 100) 10))\n            )\n          )\n          args\n        )\n      args\n      )\n    )\n  )\n)", "user": "54982522e4b0b312c081ff7c"}, {"problem": 120, "code": "(fn [xs]\n  (->> xs\n       (filter \n         (fn [x] \n           (->> x str\n                (map (comp #(* % %)\n                           read-string\n                           str))\n                (reduce +)\n                (< x))))\n       count))", "user": "53dfdf01e4b0d874e779ae46"}, {"problem": 120, "code": "(fn sum-square [coll]\n  (let [digits (fn [n] (map #(- (int %) 48) (str n)))\n        square #(* % %)\n        sum-digits (fn [n] (reduce + (map square (digits n))))]\n    (count (filter #(< % (sum-digits %)) coll))))", "user": "54ab6773e4b09f271ff37cc8"}, {"problem": 120, "code": "(fn [cx] (let [getdigits  (fn [n] (loop [digits '() num n]\n                                     (if (zero? num)\n                                       (if (zero? (count digits))\n                                         '(0)\n                                         digits)\n                                       (recur (conj digits (mod num 10)) (quot num 10) ))))\n                sqdigitsum (fn [c] (reduce + (map #(* % %) c)))\n                ans (fn [n] (if (< n (sqdigitsum (getdigits n)))\n                              1\n                              0))\n                ]\n            \n            (reduce + (map ans cx))\n\n            \n            \n            ))", "user": "549375e4e4b0b312c081ff4e"}, {"problem": 120, "code": "(fn [coll]\n\t(count\n   (filter\n    (fn [ele]\n      (>\n       ((fn [num]\n          (letfn [(step [num]\n                 (if\n                \t(= num 0)\n                    0\n                   (+ (* (rem num 10) (rem num 10)) (step (quot num 10)))))]\n            (step num)))\n        ele)\n       ele))\n    coll)))", "user": "53214efbe4b09d4e7a9b54b2"}, {"problem": 120, "code": "(fn cc [col] \n(letfn [(sqsum [n] (->> (str n) (map #(- (int %)  48)) (map #( * % %))  (apply +)  (< n) ))]\n             (count (filter sqsum    col ))))", "user": "54af6fb0e4b09f271ff37d08"}, {"problem": 120, "code": "(fn [xs] (count (filter true? (map (fn [x]\n                                      (let [ds (map #(- (int %) 48) (str x))\n                                            ssq (apply + (map #(* % %) ds))]\n                                        (< x ssq))) xs))))", "user": "54b13a40e4b09f271ff37d1b"}, {"problem": 120, "code": "(fn [z]\n  (->> (map (fn [x]\n              (->> (str x)\n                   (seq)\n                   (map #(-> %\n                             (int)\n                             (- (int \\0))))\n                   (map #(* % %))\n                   (reduce +)\n                   (#(if (< x %) 1 0)))) z)\n       (reduce +)))", "user": "536b9d8ae4b0243289761ebe"}, {"problem": 120, "code": "(fn func [col] (when-let [s col] (+ (if (< (-> s first) (apply + (map (fn [c] (let [n (- (int c) 48)] (* n n))) (str (first s))))) 1 0) (if (not (empty? (rest s))) (func (rest s)) 0))))", "user": "53347274e4b0656e627bfd6b"}, {"problem": 120, "code": "(fn [l]\n  (count (filter\n          #(< % (reduce (fn [s n] (+ s (* (- (int n) 48) (- (int n) 48)))) 0 (str %)))\n              l)))", "user": "54b2ec84e4b09f271ff37d33"}, {"problem": 120, "code": "(fn sos-o-digits [num]\n  (letfn [(num->digits [num]\n            (letfn [(numiter [val col]\n                      (if (>= 0 val) col\n                          (recur (quot val 10)\n                                 (conj (apply list col) (rem val 10)))))]\n              (numiter num [])))                    \n          (sum-of-square [digits]\n            (reduce + (map #(* % %) digits)))\n          (less-than-sos? [num]\n              (let [digits (num->digits num)\n                    sos (sum-of-square digits)]\n                (< num sos)))]\n    (count (filter less-than-sos? num))))", "user": "54aec1b6e4b09f271ff37cf6"}, {"problem": 120, "code": "(fn [ints]\n  (letfn [(parseint [c] (- (int c) 48))\n          (components [n] (->> n str seq (map parseint)))\n          (sum [n] (->> n components (map #(* % %)) (apply +)))\n          (less? [n] (if (< n (sum n)) true false))]\n    (count (filter less? ints))))", "user": "53e3f7a8e4b036ad0777e408"}, {"problem": 120, "code": "(fn [xs]\n  (letfn [(sq [n] (reduce #(+ % (* %2 %2)) \n                          0 (map #(Character/digit % 10) \n                                 (str n))))]\n    (count (filter #(< % (sq %)) xs))))", "user": "54acf5c7e4b09f271ff37cdd"}, {"problem": 120, "code": "(fn ss-digits [coll]\n  (letfn [(to-digits [num]\n            (map parse-int (seq (str num))))\n          (parse-int [i]\n            (- (int i) 48))\n          (sums [nums]\n            (reduce + (map #(* % %) nums)))]\n    (count (filter #(< % (sums (to-digits %))) coll))))", "user": "54ae541ae4b09f271ff37cef"}, {"problem": 120, "code": "(fn [s] (let [\n  sqr #(* % %)\n  dig #(- (int %) (int \\0))\n  sumdigits2 #(->> % (map dig) (map sqr) (reduce +))\n  f #(< % (sumdigits2 (str %)))\n] (count (filter f s))))", "user": "54bd04e7e4b0ed20f4ff6ed8"}, {"problem": 120, "code": "(fn [coll]\n  (count\n    (filter\n      (fn [x]\n        (<\n          x\n          (apply\n            +\n            (map\n              (fn [dc]\n                (let [d (Character/getNumericValue dc)]\n                  (* d d)))\n              (str x)))))\n      coll)))", "user": "54bad522e4b0ed20f4ff6eb8"}, {"problem": 120, "code": "(fn [xs]\n  (letfn [(squaredsum [xs] (reduce #(+ % (* %2 %2)) 0 xs))\n          (getdigits [n] (if (= n 0) [0]\n                           (map #(unchecked-divide-int (mod n %) (/ % 10)) \n                                 (take (inc (int (Math/log10 n))) (iterate #(* 10 %) 10)))))]\n    (reduce #(+ % (if (< %2 (squaredsum (getdigits %2))) 1 0)) 0 xs)))", "user": "53e9a15be4b036ad0777e4ae"}, {"problem": 120, "code": "(fn [coll]\n  (let [explode (fn [n] (map #((comp read-string str) %) (seq (str n))))\n        is-smaller? (fn [n] (< n (reduce + (map #(* % %) (explode n)))))]\n    (count (filter is-smaller? coll))))", "user": "5383668ee4b06839e8705edd"}, {"problem": 120, "code": "(fn [coll]\n  (count (filter (fn [x] (< x (reduce + (map #(* (- % 48) (- % 48)) (map int (str x)))))) coll)))", "user": "54908cc1e4b0b312c081ff32"}, {"problem": 120, "code": "(fn [xs] \n(count (filter #(< % ((fn s [x]\n  (if (< x 1)\n    0 \n    (+ (s (quot x 10))  (Math/pow (mod x 10) 2) ))) %)) xs)))", "user": "54ab502fe4b09f271ff37cc4"}, {"problem": 120, "code": "(fn [c]\n  (count (filter #(< % ((fn [n] (apply + (map (fn [x] (* x x)) \n                       (map (fn [x] (Character/digit x 10)) \n                            (str n))))) %)) c)))", "user": "52a267c6e4b04e0c58e87bef"}, {"problem": 120, "code": "(fn [l]\n  (let [digits (fn [x] (map #(- (int %) 48) (seq (str x))))\n        dgsumsq (fn [x] (reduce + (map #(* % %) (digits x))))]\n    (count (filter #(< % (dgsumsq %)) l))))", "user": "54b95f3de4b0ed20f4ff6eab"}, {"problem": 120, "code": "(fn [nums]\n  (count (filter identity\n               (map (fn [x]\n                      (let [to-digits\n                            (fn to-digits [n base]\n                              (let [r (rem n base)\n                                    n' (int (/ n base))]\n                                (if (= 0 n')\n                                  [r]\n                                  (vec (concat (to-digits n' base) [r])))))]\n                        (< x (reduce + (map #(* % %) (to-digits x 10))))))\n                    nums))))", "user": "54be7772e4b0ed20f4ff6eea"}, {"problem": 120, "code": "(fn [coll]\n  (count\n   (filter \n    (fn [x] (< x\n               (reduce + (map #(* % %) (map #(- (int %) (int \\0)) (-> x str seq))))))\n    coll)))", "user": "54b10d08e4b09f271ff37d18"}, {"problem": 120, "code": "(fn count-sumsq [coll]\n  (letfn [(lt-dq-digits? [x]\n                         (< x (apply + (map (comp #(* % %) #(Character/digit % 10)) (str x)))))]\n    (count (filter lt-dq-digits? coll))))", "user": "54bd3aefe4b0ed20f4ff6edb"}, {"problem": 120, "code": "(fn __ [s]\n  (->> (map (fn [n]\n              \t(list n (->> (str n)\n                             (map #(Character/digit % 10))\n                             (map #(* % %))\n                             (reduce +) ) ) ) \n            s)\n       (filter #(< (first %) (second %)))\n       (count)))", "user": "54c271b9e4b045293a27f602"}, {"problem": 120, "code": "(fn num-less-than-sos [l]\n  (let [digit-str (fn [x] (- (int x) (int \\0)))\n        square-int-str (fn [x] (* (digit-str x) (digit-str x)))\n        sos-digits (fn [num] (reduce + (map square-int-str (str num))))\n        less-than-sos (fn [x] (< x (sos-digits x)))]\n    (count (filter less-than-sos l))\n  )\n)", "user": "54c82b27e4b045293a27f645"}, {"problem": 120, "code": "(fn [l]\n  (count (filter (fn [n]\n            (let [digits (map (comp read-string str) (str n))]\n              (> (reduce + (map #(* % %) digits))\n                 n)))\n          l)))", "user": "534bfc71e4b084c2834f4a88"}, {"problem": 120, "code": "(fn [coll] \n    (let [colls (map (fn [n] (map (fn [i] (Integer/parseInt (str i))) (seq (str n)))) coll)]\n        (count (filter #(< (first (keys %)) (first (vals %)))\n        (map (fn [i] (hash-map (Integer/parseInt (apply str i)) (apply + (map #(* % %) i)))) colls)\n        ))))", "user": "54b6c24be4b0ed20f4ff6e7c"}, {"problem": 120, "code": "(fn [s]\n  (let [mapper (comp #(* % %) #(- (int %) (int \\0)))\n        sqdigits (fn [i] (map mapper (str i)))\n        pred (fn [i] (< i (reduce + 0 (sqdigits i))))]\n    (count (filter pred s))))", "user": "50b42cbbe4b001349b2f4abe"}, {"problem": 120, "code": "(fn [coll]\n  (count (filter (fn [v]\n                   (< v (reduce + (map #(* (- (int %) 48) (- (int %) 48)) (str v))))\n         ) \n         coll)))", "user": "546692aee4b01be26fd746e7"}, {"problem": 120, "code": "(fn [r]\n  (letfn [(sum-of-squares [n]\n                          (reduce #(+ % (* %2 %2)) 0 \n                                  (map #(Character/getNumericValue %) (Integer/toString n))))]\n    (count (filter #(< % (sum-of-squares %)) r))))", "user": "532902f8e4b09d4e7a9b550e"}, {"problem": 120, "code": "(fn [xs]\n  (let [digit-sq-sum (fn [n]\n                       (reduce + (map\n                                   #(* % %)\n                                   (map\n                                     #(Integer/parseInt (str %))\n                                     (str n)))))]\n    (count (filter #(< % (digit-sq-sum %)) xs))))", "user": "54c8d4a8e4b045293a27f654"}, {"problem": 120, "code": "(fn [nums]\n  (count (for [n nums\n               :let [sq-sum (->> (str n)\n                                 (map #(Character/getNumericValue %))\n                                 (map #(* % %))\n                                 (apply +))]\n               :when (< n sq-sum)]\n           n)))", "user": "4ed45563535d10e5ff6f52c9"}, {"problem": 120, "code": "(fn [s]\n     (let [digits (fn dig [n]\n                 (if (< n 10)\n                   (list n)\n              (cons (mod n 10) (dig (quot n 10)))))]\n       (count\n       (map first\n       (filter #( < (first %) (second %))\n       (map #( list % (reduce + (map (fn [x] (* x x)) (digits %))) ) s)\n       )))))", "user": "54c169ade4b0ed20f4ff6f24"}, {"problem": 120, "code": "(fn [coll] (count (filter (fn messatsu\n                 [num]\n                 (let [pecah ((fn separasi\n                                [no]\n                                (if (zero? (quot no 10))\n                                  [no]\n                                  (conj (separasi (quot no 10)) (rem no 10) ))) num)\n                       pecah-finale (apply + (map #(* % %) pecah))]\n                   (< num pecah-finale))) coll)))", "user": "520cb8c4e4b0b022ef140c9a"}, {"problem": 120, "code": "(fn [coll]\n  (apply +\n         (map\n          (fn sumSq?\n            ([n] (sumSq? n n 0))\n            ([n p sumSq]\n             (if (< p 1)\n               (if (< n sumSq) 1 0)\n               (sumSq? n (quot p 10) (+ sumSq (#(* % %) (mod p 10))))\n               )\n             )\n            )\n          coll\n          )\n         )\n  )", "user": "525d490ae4b0cb4875a45d70"}, {"problem": 120, "code": "#(let [\n      square-of-components (fn square-of-components [s] (apply + (map (fn [c] (let [e (- (int c) (int \\0))] (* e e))) (seq s))))\n      ]\n      (count (filter (fn [y] (< y (square-of-components (str y)))) %)))", "user": "525b142fe4b0cb4875a45d05"}, {"problem": 120, "code": "(fn [s]\n  (->> s\n       (map (fn [x]\n              [x\n               ((comp\n                  #(apply + %)\n                  (partial map #(* % %))\n                  #(map (comp bigint str) %)\n                  str) x)]))\n       (filter (partial apply <))\n       count))", "user": "54b7f217e4b0ed20f4ff6e8f"}, {"problem": 120, "code": "; LOOK AT THIS LINE WITH RAINBOW PARENTHESES\n(fn [is] ((comp count filter) (fn [i] (< i (->> (mapv (comp #(* % %) #(- (int %) (int \\0))) (str i)) (reduce +)))) is)) ;#RainbowParentheses\n;\n;\n;(fn [integers]\n;  ((comp count filter)\n;   (fn [integer] (< integer\n;                   (->> (mapv (comp #(* % %)\n;                                    #(Character/getNumericValue %))\n;                              (str integer))\n;                        (reduce +))))\n;   integers))\n;\n;(fn [is]\n;  ((comp count filter)\n;   (fn [i]\n;     (< i\n;        (->> (mapv (comp #(* % %)\n;                         #(- (int %) (int \\0)))\n;                   (str i))\n;             (reduce +))))\n;   is))\n\n;\n;(fn [integers]\n;  (let [digits (fn [number]\n;                 (mapv #(Character/getNumericValue %) (str number)))\n;        smaller-than-squares (fn [number]\n;                               (< number (reduce #(+ %1 (* %2 %2)) 0 (digits number))))]\n;    ((comp count filter) smaller-than-squares integers)))\n;\n;                                  I want the cursor's scope full brightness\n;                                  everything above it's scope dimmed to minimum,\n;                                  everything below dimmed less so according to contributing fill of the future call stack to a maximum,\n;                                  possibly symbols of previous lines in use of current scope adding a fraction of the color of the symbol,\n;                                   (all symbols have a unique solid color, bright and visible but not festive),\n;                                  solving maximum flow through function calls, directed cyclic graph with length 0 edges???, (enforce flow is = on length 0 edges?),\n;                                  \n;", "user": "54ca9ca8e4b057c6fda3a265"}, {"problem": 120, "code": "(fn [xs]\n  (let [digits (fn digits [n]\n                 (if (zero? n)\n                   []\n                   (conj (digits (quot n 10)) (mod n 10))))\n        square (fn [x] (* x x))\n        sum-squared (fn [n]\n                      (apply + (map square (digits n))))\n        lt-sum-squared (fn [n] (< n (sum-squared n)))]\n    \n    (count (filter lt-sum-squared xs))))", "user": "5344fe13e4b084c2834f4a32"}, {"problem": 120, "code": "#(count (filter (fn [n] (< n (apply + (map (fn [c] (Math/pow (- (int c) 48) 2)) (str n))))) %))", "user": "54c641f8e4b045293a27f628"}, {"problem": 120, "code": "(fn [xs] (count (for [x xs\n                      :let [ds (for [d (seq (str x))]\n                                 (- (int d) (int \\0)))\n                            sum (reduce + 0 (map * ds ds))]\n                      :when (< x sum)]\n                  x)))", "user": "4ea03f70535d7eef308072a1"}, {"problem": 120, "code": "(fn f [coll] \n  (letfn [(digits [x] \n  (loop [x x\n         digit '()]\n        (if (> 10 x)\n            (cons x digit)\n            (recur (int (/ x 10)) (cons (mod x 10) digit)))))] \n  (->> coll\n       (filter (fn [x] \n                 (let [sum-squares (apply + (map #(* % %) (digits x)))]\n                      (< x sum-squares))))\n       (count))))", "user": "5493d908e4b0b312c081ff52"}, {"problem": 120, "code": "(fn [lst]\n  (letfn [( dss [n] (apply + (map (fn [d] (let [ x (- (int d) (int \\0))] (* x x)))  (str n)))\n     )]\n    (count (filter (fn [n] (< n (dss n))) lst))\n  )            \n)", "user": "533ea7e8e4b085b17e897d94"}, {"problem": 120, "code": "(fn [xs]\n  (count (filter (fn [x] (< x (apply + (map #(* % %) (map #(- (int %) 48) (str x)))))) xs)))", "user": "54d03026e4b018d918be98de"}, {"problem": 120, "code": "(fn [coll]\n  (letfn [(do-sum [x]\n            (reduce + (map (comp #(* % %) \n                                 #(Integer/parseInt %) \n                                 str) \n                           (str x))))]\n    (count (filter #(< % (do-sum %)) coll))))", "user": "541b1f25e4b01498b1a71a63"}, {"problem": 120, "code": "(fn [coll]\n  (letfn \n    [(digitlist [n] ; problem 99: return the list of component digits, eg 182 => '(1 8 2) \n  \t\t(loop [digits [], remainder n]\n    \t\t(let [digit (rem remainder 10)]\n   \t\t\t\t(if (<= remainder 0) digits\n    \t\t\t\t(recur   (concat [digit] digits)   (quot remainder 10) \n\t)))))\n    (sumsquared [d]\t(reduce + (map #(* % %) (digitlist d))))]\n  (count (filter #(< % (sumsquared %)) coll ))\n))", "user": "54bbe505e4b0ed20f4ff6ec5"}, {"problem": 120, "code": "(fn f [s]\n  (let [int->digits (fn [i] (->> i str (map #(Character/digit % 10))))\n        sum-squares (fn [l] (->> l (map #(* % %)) (reduce +)))]\n    (->> s\n         (map (juxt identity (comp sum-squares int->digits)))\n         (filter (fn [[x y]] (< x y)))\n         count)))", "user": "52470d42e4b05ef8e38e6350"}, {"problem": 120, "code": "(fn[col](count (filter (fn[x](< x (reduce + (map (comp #(* % %) #(- (int %) 48))  (seq (str x)))   ))) col)))", "user": "54aa665fe4b09f271ff37cb8"}, {"problem": 120, "code": "(fn [s]\n  (letfn [(sumsq [n]\n            (->> n str\n                 (map #(- (int %) (int \\0)))\n                 (map #(* % %)) (reduce +)))]\n    (->> (map sumsq s)\n         (map < s)\n         (filter true?)\n         count)))", "user": "54c23252e4b045293a27f5fc"}, {"problem": 120, "code": "(fn [xs]\n  (count (for [x xs :let [dgs (map #(- (int %) 48) (seq (str x)))\n                   sqs (apply + (map #(* % %) dgs))]\n        :when (> sqs x)\n        ]\n    x))\n  )", "user": "54d70f40e4b0a52adc2e2027"}, {"problem": 120, "code": "(fn [ xs ]\n  (letfn [(digits [x] (map #(Integer. (str %)) (str x)))\n        (d-square [x] (apply + (map #(* % %) (digits x))))]\n  (count (filter #(< % (d-square %)) xs))))", "user": "54d6f22de4b0a52adc2e2023"}, {"problem": 120, "code": "(fn [xs]\n    (letfn [(f [s]\n              (let [nums (map read-string (map str (seq (str s))))]\n                (reduce #(+ %1 (* %2 %2)) (* (first nums) (first nums)) (rest nums))))]\n      (->> xs\n           (filter (fn [x]\n                     (< x (f x))))\n           count)))", "user": "51f40975e4b0fca5e8b4822e"}, {"problem": 120, "code": "(fn [s] \n    (let [\n          digits\n          (fn \n            [n] \n            (loop [l (list) n n]\n              (if (= n 0)\n                l   \n                (recur (conj l (mod n 10)) (int (/ n 10)))\n                )   \n              )   \n            )   \n          square\n          (fn[x]\n            (* x x)\n            )   \n          ]   \n      (count (filter\n        #(< % (apply +\n                (map square (digits %)))) s)) \n      )   \n    )", "user": "54b90836e4b0ed20f4ff6e9d"}, {"problem": 120, "code": "(fn [lst]\n    (count (filter\n            (fn [n]\n              (< n\n                 (reduce #(let [digit ((comp read-string str) %2)] \n                            (+ %1 (* digit digit )))\n                         0 \n                         (seq (str n)))))\n            lst)))", "user": "53f31dafe4b0742d9025b0f0"}, {"problem": 120, "code": "(fn  [col]\n  (let [q \n(fn  [x]\n  (reduce + (map #(* (- (int %) (int \\0))\n           (- (int %) (int \\0))) (seq (str x)))))]\n  (count (filter #(< % (q %)) col))))", "user": "53664e3be4b0243289761e74"}, {"problem": 120, "code": "(fn [x] (letfn [(ss [y] (reduce + (map #(* %1 %1) y)))\n                 (td [s] (map #(Character/digit % 10) (str s)))\n                 (sstd [s] (ss (td s)))]\n           (count (filter #(< % (sstd %)) x))))", "user": "4ec66e84535d6d7199dd36cd"}, {"problem": 120, "code": "(fn [s]\n  (let [squares (apply hash-map (mapcat #(list (first (str %)) (* % %)) (range 10)))\n        square (fn [n] \n                 (reduce + (map squares (str n))))]\n    (count\n     (filter\n      #(< (first %) (second %))\n      (map\n       #(vector % (square %))\n       s)))))", "user": "54dd76c8e4b024c67c0cf794"}, {"problem": 120, "code": "(fn loo [col]\n\t(reduce \n    #(if \n      (<  %2\n          (reduce \n            (fn foo [x e] \n              (+ (* (Integer/parseInt (str e)) (Integer/parseInt (str e))) x)) \n            0 \n            (seq (str %2))))\n      (inc %1)\n      %1)\n    0\n    col))", "user": "51e8ee6be4b07cae92c04bfd"}, {"problem": 120, "code": "(fn [integers]\n  (letfn [(sum-of-square-of-digits [n]\n                                   (let [digits (map #(Character/getNumericValue %) (str n))]\n                                     (reduce + (map #(* % %) digits))))]\n    (count (filter #(< % (sum-of-square-of-digits %)) integers))))", "user": "54cc26c1e4b057c6fda3a28a"}, {"problem": 120, "code": "(fn [s] ((comp count filter)\n            (fn [x] (< x\n                       (apply + (map #(* % %)\n                                     (map #(Character/digit % 10) (str x))))))\n            s))", "user": "52d84ea7e4b09f7907dd1390"}, {"problem": 120, "code": "(fn [i-coll]\n  (count\n   (->> i-coll\n        (map str)\n        (map #(vector (Integer/parseInt %) (map (fn [i] (Integer/parseInt (str i))) %)))\n        (filter #(< (nth % 0) (reduce (fn [acc e] (+ acc (* e e))) 0 (nth % 1)))))))", "user": "541d3c0fe4b01498b1a71a7e"}, {"problem": 120, "code": "(fn foo [xs]\n  (let [sum-digits (fn [n]\n                     (loop [x n y 0]\n                       (if (not= 0 x)\n                         (recur (quot x 10)\n                                (+ y (* (rem x 10) (rem x 10))))\n                         y)))\n        ys (for [x xs :when (< x (sum-digits x))] x)]\n    (count ys)))", "user": "54d753ebe4b0a52adc2e2029"}, {"problem": 120, "code": "#(case (count %) 10 8 30 19 50)\n;reduce #(if (> ((fn [y] (apply + (map (fn [x](* x x)) ((fn [x] (reduce (fn [x y](conj x (Integer. y))) [] (rest (clojure.string/split (str x) #\"\")))) y)))) %2) %2) (inc %1)  %1) 0", "user": "54a7efdee4b09f271ff37c9d"}, {"problem": 120, "code": "(fn sum-sq-test [c]\n  (let [sum-sq (fn [n] (apply + (map (comp #(* % %) #(- % 48) int) (str n))))]\n    (count (filter #(< % (sum-sq %)) c))))", "user": "4f7207d3e4b07046d9f4f019"}, {"problem": 120, "code": "(fn [values]\n  (let [sum-squares (fn [sum ch]\n                      (let [nmbr (read-string (str ch))]\n                        (+ sum (* nmbr nmbr))))]\n    (->> values\n         (filter (fn [v] (< v (->> v\n                                   str\n                                   (reduce sum-squares 0)))))\n         count)))", "user": "5463c824e4b01be26fd746c5"}, {"problem": 120, "code": "(fn prob120-redux [s]\n  (letfn\n      [(digits [n] (map #(- (int (identity %)) 48) (str n)))\n       (ssd [n] (apply + (map #(* % %) (digits n))))]\n    (count (filter #(< % (ssd %)) s))))", "user": "54e3df6ae4b024c67c0cf7e3"}, {"problem": 120, "code": "(fn [nums]\n   (count (filter \n           (fn [num] (< num\n                        ((fn [xstr]\n                          (reduce + 0\n                                  (map #(apply * (repeat 2 (read-string (str %)))) (str xstr)))) num))) nums)))", "user": "525cc912e4b0cb4875a45d48"}, {"problem": 120, "code": "(fn [coll]\n    (let [char-digit->int (fn [char-digit]\n                            (- (int char-digit) (int \\0)))\n          sum-squares-of-digits (fn [n]\n                                  (reduce + (map #(-> % char-digit->int (Math/pow 2)) (str n))))]\n      (count (filter identity (map #(< % (sum-squares-of-digits %)) coll)))))", "user": "51b91b08e4b0e871ca4958f8"}, {"problem": 120, "code": "(fn [c]\n  (count (filter (fn [n] (< n (apply + (map (comp #(* % %) read-string str) (str n))))) c)))", "user": "54ddb556e4b024c67c0cf798"}, {"problem": 120, "code": "(fn sq-dig [c]\r\n  (letfn [(digits [a] (map #(- (int %) 48) (str a)))\r\n          (sqdig  [a] (reduce #(+ %1 (* %2 %2)) 0 (digits a)))]\r\n    (count (filter #(> (sqdig %) %) c))))", "user": "5470699ae4b00cfc9eacc1b6"}, {"problem": 120, "code": "(fn [digits]\n   (apply +\n          (for [num digits\n                :let [component-digits      (map #(Long/valueOf (str %)) (str num))\n                      digits-sqared         (map #(* % %) component-digits)\n                      summed-digits-squared (apply + digits-sqared)]\n                :when (> summed-digits-squared num)]\n            1)))", "user": "510a3cd4e4b06956752d35ad"}, {"problem": 120, "code": "(fn [nums] (count (filter #(< % (reduce + (map (fn [number](* (Character/getNumericValue number) (Character/getNumericValue number))) (str %)))) nums)))", "user": "54e0e911e4b024c67c0cf7bc"}, {"problem": 120, "code": "(fn [ns]\n    (let [digits (fn [n] (apply + (map #(* % %) (map #(- (int %) 48) (str n)))))]\n         (count (map second (filter #(apply > %) (map (juxt digits identity) ns))))))", "user": "4e68c465535d8ccf87e9fe8a"}, {"problem": 120, "code": "(fn [coll]\n  (letfn [(sum-square [x]\n                      (->> (str x)\n                      (map #(Integer/parseInt (str %)))\n                      (map #(* % %))\n                      (reduce +)))]\n    (count (filter #(< % (sum-square %)) coll))))", "user": "547fbe01e4b0c51c1f4d7321"}, {"problem": 120, "code": "(fn [coll]\n  (reduce + ((fn [coll]\n  (map (fn [i1 i2] (if (> i1 i2) 1 0)) (map (fn [i] (reduce\n          (fn [sum-so-far next] (+ (* (Integer/parseInt (str next)) (Integer/parseInt (str next))) sum-so-far)) 0 (str i))) coll) coll)) coll)))", "user": "54df3c94e4b024c67c0cf7aa"}, {"problem": 120, "code": "(fn [xs]\n  (count\n    (filter true?\n      (for [x xs\n            :let [cs     (seq (str x))\n                  digits (map int cs)\n                  cdigits (map #(- % 48) digits)\n                  sqs (map #(* % %) cdigits)\n                  sum (apply + sqs)]]\n          (< x sum)\n        ))))", "user": "546a6c7ce4b00cfc9eacc154"}, {"problem": 120, "code": "(fn [coll] (count (filter (fn [x] (< x (reduce + (map #(* % %) (map #(Integer. (str %)) (str x)))))) coll)))", "user": "54f0d3fde4b024c67c0cf8a6"}, {"problem": 120, "code": "(fn  [numbers]\n  (->> numbers\n       (map str)\n       (map (partial\n              map #(Math/pow\n                     (- (int %) 48)\n                     2)))\n       (map #(apply + %))\n       (map #(< % %2) numbers)\n       (filter true?)\n       (count)))", "user": "51c611c4e4b03a28d42333bf"}, {"problem": 120, "code": "(fn [s] \n\t (count (filter (fn [y] (< y (reduce #(+ %1(* %2 %2)) 0 (map #(Integer. (str %))(str y))))) s))  \n  )", "user": "52b2f9cae4b0c58976d9acfb"}, {"problem": 120, "code": "(fn [coll]\n  (let [split-digits (fn [n]\n                       (map (comp read-string str) (str n)))\n        sum-of-squares (fn [s]\n                         (reduce + (map #(* % %) s)))\n        less-than-sum-of-squared-digits? (fn [n]\n                                           (< n (sum-of-squares (split-digits n))))]\n    (count (filter less-than-sum-of-squared-digits? coll))))", "user": "505d1b01e4b0e6aca564be04"}, {"problem": 120, "code": "(fn [coll]\n  (letfn [(ssd [i]\n    (reduce + (map #(let [d (- (int %) (int \\0))] (* d d)) (str i))))]\n    (count (filter #(< % (ssd %)) coll))))", "user": "518ba795e4b0f028e99addf0"}, {"problem": 120, "code": "(fn [v]\n  (let [digits (fn [n] (vector n (map #(Character/digit % 10) (str n))))\n        sqr-digits (fn [d] (map #(* % %) d))\n        smaller (fn [[n d]] (< n (apply + (sqr-digits d))))\n    ]\n    (count (filter smaller (map digits v)))))", "user": "5481be5fe4b0e286459a1172"}, {"problem": 120, "code": "(fn [c]\n  (let [sq            #(* % %)\n        sum-sq-digits (fn prod [n s]\n                              (if (< n 10)\n                                (+ s (sq n))\n                                (prod (quot n 10)\n                                      (+ s (sq (rem n 10))))))]\n    (reduce + (map #(if (< % (sum-sq-digits % 0)) 1 0) c))))", "user": "54f2fe9fe4b050824f58f5b8"}, {"problem": 120, "code": "(fn [xs]\n  (let [split (fn [n] (map #(Integer. (str %)) (str n)))\n        sns   (fn [x](reduce + (map #(* % %) x)))]\n    (count (filter #(> (sns (split %)) %) xs))))", "user": "546ff835e4b00cfc9eacc1b4"}, {"problem": 120, "code": "reduce #(if (< %2 (->> (str %2)\n                       (map (comp read-string str))\n                       (reduce (fn [a b] (+ a (* b b))) 0)))\n          (inc %1)\n          %1)\n       0", "user": "54e2a779e4b024c67c0cf7d3"}, {"problem": 120, "code": "(fn sum-square [coll]\n  (let [digits (fn [n] (map #(- (int %) 48) (str n)))\n        square #(* % %)\n        sum-digits (fn [n] (reduce + (map square (digits n))))]\n    (count (filter #(< % (sum-digits %)) coll))))", "user": "539c736ce4b0b51d73faaf2b"}, {"problem": 120, "code": "(fn   ([s] (letfn [(d [x] (loop [v [] n x] (let [m (mod n 10) r (/ (- n m) 10)] (if (= 0 r) (cons m v) (recur (cons m v) r) ))))\n               (z [c] (reduce + (map #(* % %) c)))]\n         (count (filter #(< % (z (d %))) s)))))", "user": "54d8cc38e4b0a52adc2e203e"}, {"problem": 120, "code": "(fn [coll]\n  (reduce #(if (< (first %2) (apply + (map (fn [x] (* x x)) (second %2))))\n             (inc %)\n             %) 0 (zipmap coll (map #(loop [n % acc [0]]\n                                       (if (zero? n)\n                                         acc\n                                         (recur (quot n 10) (conj acc (rem n 10))))) coll))))", "user": "54fdbe3fe4b07d26eda61d3b"}, {"problem": 120, "code": "(fn [x] (count (filter #{true} (map #(< %1 (apply + (map (fn [c] (* (Character/getNumericValue c) (Character/getNumericValue c))) (seq (String/valueOf %1))))) x))))", "user": "54fdaeace4b07d26eda61d39"}, {"problem": 120, "code": "(fn ssd[c]\n  (count \n    (filter\n      (fn [n](let[ds (map read-string (map str (seq (str n))))\n                  ss (apply + (map #(* % %) ds))]\n         (< n ss)))\n      c)))", "user": "54d4bd2be4b0a52adc2e2005"}, {"problem": 120, "code": "(fn [coll]\n  (let [r-fn        (fn [acc x] (+ acc (Math/pow (Integer/parseInt (str x)) 2)))\n        squares-sum (fn [y] (reduce r-fn 0 (str y)))\n        f-fn        (fn [z] (< z (squares-sum z)))]\n  (count (filter f-fn coll))))", "user": "54b83ae9e4b0ed20f4ff6e95"}, {"problem": 120, "code": "(fn ssdCount\n  [x]\n  (let [ssd (fn [x]\n              (reduce\n               #(+ %1 (* %2 %2))\n               0\n               (map #(read-string (str %)) (str x))))]\n    (apply +\n           (for [numb x\n                 :when (< numb (ssd numb))]\n             1))))", "user": "54f64e99e4b0f2f3c5226ea4"}, {"problem": 120, "code": "(fn [s]\n    (reduce (fn [cnt m]\n              (if (< m (apply + (map #(* % %) (map #(- (int %) 48) (str m)))))\n                (inc cnt)\n                cnt))\n            0\n            s))", "user": "54508859e4b0e397800069a3"}, {"problem": 120, "code": "(fn [s]\n    (count (filter (fn [x] \n                     (< x \n                        (->> x \n                             str \n                             seq \n                             (map str) \n                             (map read-string) \n                             (map #(* % %)) \n                             (reduce +)))) \n             s)))", "user": "54febf4be4b07d26eda61d45"}, {"problem": 120, "code": "(fn [n]\n  (reduce\n    (fn [c n]\n      (let [d (map #(Character/digit % 10) (str n))\n            sqrs   (map #(* % %) d)\n            sum    (apply + sqrs)]\n        (if (< n sum)\n          (inc c)\n          c)))\n    0 n))", "user": "4ee7d6d8535d93acb0a66870"}, {"problem": 120, "code": ";;I know using read-string is bad, please don't email me about this. This isn't production code.\n(fn count-smaller [col] \n  (reduce + \n          (map \n           (fn square-sum [n] \n             (if (< n (->> n (str) (map #(int (Math/pow (read-string (str %)) 2))) (reduce +))) \n                    1 \n                    0)) col)))", "user": "50e1bdd8e4b019fc399ce17f"}, {"problem": 120, "code": "(fn [coll]\n  (letfn [(sumsq [x]\n                 (->> (str x) (map str) (map #(Integer/parseInt %)) (map #(* % %)) (reduce +)))]\n    (count (filter #(> (sumsq %) %) coll))))", "user": "55088bb3e4b06e50f9beb10c"}, {"problem": 120, "code": "#(count (filter \n         (fn [x] \n           (< x \n              ((comp \n                (fn [m] (apply + m)) \n      \t\t\t(fn [z] (map (fn [y] (* (- (int y) 48) (- (int y) 48))) z))  \n                sequence \n                str) x)\n)) %))", "user": "54e0a9c3e4b024c67c0cf7b5"}, {"problem": 120, "code": "(fn [coll]\n  (let [sqa (fn [x] (* x x))\n        digit-sum (fn [x] (apply + (map #(sqa (- (int %) (int \\0))) (str x))))] \n  \t(count (filter #(< % (digit-sum %)) coll))))", "user": "55058a4fe4b086ebe8a79c89"}, {"problem": 120, "code": "(fn [xs]\n   (letfn [(yeah? [x] (< x (reduce #(+ %1 (* %2 %2)) 0 (map #(Character/digit % 10) (str x)))))]\n     (count (filter yeah? xs))))", "user": "52cee992e4b07d0d72b27395"}, {"problem": 120, "code": "(fn [a] (count (filter (fn [x] (< x (reduce + (map #(* % %) (map #(Integer. %) (re-seq #\"\\d\" (str x))))))) a)))", "user": "5505ceb3e4b086ebe8a79c8b"}, {"problem": 120, "code": "(fn [nums]\n\t(count (filter\n\t  (fn [n] (< n (reduce #(+ %1 (* %2 %2)) 0 (map #(read-string (str %1)) (seq (str n))))))\n\t  nums)))", "user": "54f4a457e4b0f2f3c5226e83"}, {"problem": 120, "code": "(fn [col] (count (filter (fn [a] (< a\n                (reduce + (map #(* % %)\n                       ((fn dig [n r] (if (= n 0) r (dig (quot n 10) (conj r (rem n 10))))) a [])\n                               )))) col)))", "user": "550e0373e4b06e50f9beb162"}, {"problem": 120, "code": "(fn [lst]\n  (count\n   (filter\n    (fn [n]\n      (< n\n       (reduce\n        (fn [a b]\n          (+ a (Math/pow (Integer/parseInt b) 2)))\n        0 (remove empty? (.split (str n) \"\")))))\n    lst)))", "user": "51b76227e4b0d906fcd71d35"}, {"problem": 120, "code": "#(case (count %) 10 8 30 19 50)", "user": "5507cfd3e4b021ccfedb96ad"}, {"problem": 120, "code": "(fn [c]\n  (count \n    (filter \n      (fn [n] (< n (reduce + (map #(* % %) (map #(- (int %) 48) (seq (str n))))))) \n      c)))", "user": "54e606c3e4b024c67c0cf803"}, {"problem": 120, "code": "(fn cnt-few-square [col]\n  (let [n2v (fn [n] \n              (vec \n                (reverse\n                  (for [i (range (count (str n)))]\n                    (rem (quot n (Math/pow 10 i)) 10)))))\n        sum-n2v-sq (fn [n]\n                     (apply + (map #(Math/pow % 2) (n2v n))))\n        col-sq (map sum-n2v-sq col)]\n     (count (filter neg? (map #(- %1 %2) col col-sq)))))", "user": "5243e37ae4b076204b44fae3"}, {"problem": 120, "code": "(fn [l] (letfn [(is-sss [x] (< x (reduce + (map (comp #(* % %) #(- % 48) int) (seq (.toString (biginteger x)))))))]\n         (count (filter true? (map is-sss l)))))", "user": "544e8369e4b0e39780006987"}, {"problem": 120, "code": "(fn [coll]\n  (let [f (fn [n] (reduce + (map #(* % %) (map read-string (map str (str n)))))\n)]\n    (count (filter #(< % (f %)) coll))\n    ))", "user": "54d1b6ffe4b0e8a36923e5e6"}, {"problem": 120, "code": "(fn [coll]\n   (let [parse-int #(Integer/parseInt %)\n         digits #(map (comp parse-int str) (str %))\n         sqr (fn [x] (map #(* % %) x))\n         sum #(apply + %)\n         calc (comp sum sqr digits)]\n     (count (filter #(< % (calc %)) coll))))", "user": "5515b138e4b055c2f668d4ed"}, {"problem": 120, "code": "(fn [xs]\n(count\n(filter\n\t(fn [x]\n    \t(< x (apply + (map #(int (Math/pow (Integer/parseInt (str %) ) 2)) (str x) ))) ) xs)\n))", "user": "54e51c7be4b024c67c0cf7f7"}, {"problem": 120, "code": "(fn [xs]\n    (count\n    (filter \n   (fn [x]\n     (< x (reduce + (map #(* % %) (map #(Integer. %) (map str (seq (str x))))))))\n    xs)))", "user": "54bcab07e4b0ed20f4ff6ed5"}, {"problem": 120, "code": "(fn [coll]\n   (letfn [(sqr [x] (* x x))\n           (dig [x] (Character/digit x 10))\n           (sos [c] (reduce #(+ %1 (-> %2 dig sqr)) 0 c))]\n     (->> coll\n          (map #(->> % str seq sos (< %)))\n          (filter true?)\n          (count))))", "user": "4fa5c8dde4b081705acca1af"}, {"problem": 120, "code": "(fn [args]\n  (letfn\n    [(square [n] (* n n))\n     (square-digit [n] (square (Integer/parseInt n)))\n     (sum-square-digits [n] (reduce + (map #(square-digit (Character/toString %)) (str n))))\n     (lt-square-digit [n] (< n (sum-square-digits n)))]\n    (count (filter lt-square-digit args))))", "user": "5514a60fe4b055c2f668d4d7"}, {"problem": 120, "code": "(fn [s] \n  (->> s\n    (filter (fn [n] (< n   \n      (->> n\n        (str)\n        (map #(- (int %) 48))\n        (map #(* % %))\n        (reduce +)))))\n    (count)))", "user": "4fc4eb1ee4b081705acca354"}, {"problem": 120, "code": "(fn [ns]\n    (let [split-digit\n          (fn [n]\n            (loop [n n acc []]\n              (if (zero? n)\n                acc\n                (recur (int (/ n 10)) (conj acc (mod n 10))))))]\n      (count (for [n ns\n                   :let [splited (split-digit n)\n                         squared (map #(* % %) splited)\n                         sum (reduce + squared)]\n                   :when (< n sum)]\n               n))))", "user": "551a21ece4b091ff45eda993"}, {"problem": 120, "code": "#(condp = %\n   (range 10) 8\n   (range 30) 19\n   (range 100) 50\n   (range 1000) 50)", "user": "551ed214e4b08d5046aa8a4d"}, {"problem": 120, "code": "(fn [coll]\n  (let [digits (fn [v] (map #(-> % str Integer/parseInt) (str v)))\n        sum-of-squares (fn [coll] (apply + (map #(* % %) coll)))\n        filtered (filter #(< % (sum-of-squares (digits %))) coll)]\n    (count filtered)))", "user": "5455c2f3e4b080a794c2c87d"}, {"problem": 120, "code": "(fn [z]  (count (filter (fn [y] (< y  (apply + (map (fn [x] (let [val (- (int x) 48)] (* val val))) (str y))))) z)))", "user": "52457931e4b08ba239308107"}, {"problem": 120, "code": "(fn [l]\n  (reduce + (map (fn[x] (let [d (map #(- (int %) 48) (str x))\n                             r (reduce #(+ % (* %2 %2)) 0 d)]\n                         (if (> r x) 1 0))) l)))", "user": "53d5a63be4b0e771c3025449"}, {"problem": 120, "code": "(fn check[col]\n  (letfn [(sq[n] (reduce + (map #(let [x (- (int %) (int \\0))] (* x x)) (str n))))]\n    (count (filter #(< % (sq %)) col))))", "user": "55170dd9e4b06a49daca83bd"}, {"problem": 120, "code": "(fn cnt-sqrt [arg]\n  (let [get-digits (fn [n]\n                     (map #(Integer/valueOf (str %)) (String/valueOf n)))\n        digits-sqr (fn [n]\n                     (apply + (map #(* % %) (get-digits n))))\n        res-seq (filter #(< % (digits-sqr %)) arg)]\n    (count res-seq)))", "user": "50c6052ce4b0c9dc10d15c56"}, {"problem": 120, "code": "(fn [xs]\n  (let [ys (->> xs (map str) (map #(reduce (fn [t d] (+ t (Math/pow (- (int d) 48) 2))) 0 %)))\n        zs (map < xs ys)]\n    (->> zs (filter true?) count)))", "user": "53908e6be4b0b51d73faae9a"}, {"problem": 120, "code": "(fn p120\n  [s]\n  (letfn [(digits [n] (map #(Integer/parseInt (str %)) (seq (str n))))\n          (sqdsum [n] (reduce + (map #(* % %) (digits n))))]\n    (count (filter #(< % (sqdsum %)) s))))", "user": "550ff2a3e4b06e50f9beb17f"}, {"problem": 120, "code": "(fn [coll]\n  (letfn [(square [x] (* x x))\n          (char->digit [c] (Character/digit c 10))\n          (squared-digits [x] (map (comp square char->digit) (str x)))\n          (sum [coll] (reduce + coll))\n          (lt-sum-squared-digits? [x] (< x (sum (squared-digits x))))]\n    (count (filter lt-sum-squared-digits? coll))))", "user": "552356fae4b0882d96d091af"}, {"problem": 120, "code": "(fn [x]\n  (count (filter #(< %\n                     (apply + (map (fn [v] (* v v))\n                                   (map (comp read-string str)\n                                        (str %))))) x)))", "user": "50f53694e4b057d4c52de881"}, {"problem": 120, "code": "(fn [v]\n  (apply +\n    (for [i v]\n\t  (if (< i (reduce (fn [x y] (+ x (* y y))) 0 (map #(- (int %) 48) (str i)))) 1 0))))", "user": "551c66dae4b07993ea3788de"}, {"problem": 120, "code": "(fn [& [xs]]\n        \n         (count (filter #(< % (reduce + (map (fn [sm] ((fn [sq] ( * sq sq)) (- (int sm) (int \\0)))) (seq (str %)))) ) xs)) \n          )", "user": "533c2605e4b0e30313ee6cd7"}, {"problem": 120, "code": "(fn [xs]\n  (let [digits (fn [x] (reverse (map #(mod % 10) (take-while pos? (iterate #(quot % 10) x)))))]\n    (count (filter #(< % (reduce + (map * (digits %) (digits %)))) xs))))", "user": "551ecb76e4b08d5046aa8a4c"}, {"problem": 120, "code": "(fn f-120 [x]\n  (let [get-digits (fn [x] (loop [x1 x acc '()] (if (zero? x1) acc (recur (quot x1 10) (cons (mod x1 10) acc))))),\n        get-sqsum (fn [x] (reduce + (map #(* % %) (get-digits x))))]\n    (count\n      (filter\n       #(< % (get-sqsum %))\n       x\n      )\n    )\n  )\n)", "user": "55280930e4b0ffed3738f93b"}, {"problem": 120, "code": "(fn [s] (count (filter (fn [n]\n                   (< n (apply + (map (comp #(* % %) #(Integer/parseInt (str %))) (str n)))))\n                   s)))", "user": "50310713e4b05b7df5a0b84c"}, {"problem": 120, "code": "(fn small-sqr-digits [coll]\n  (let [sum-of-squared-digits (fn [x]\n                        (loop [digits x sum 0]\n                          (if (= digits 0)\n                            sum\n                            (recur (quot digits 10) (+ sum (* (rem digits 10) (rem digits 10)))))))]\n    (count (filter true? (map (fn [x] (< x (sum-of-squared-digits x))) coll)))))", "user": "55151417e4b055c2f668d4da"}, {"problem": 120, "code": "(fn [xs]\n  (count\n   (filter \n    (fn [x] (< x (reduce + (map #(let [v (Character/getNumericValue %)] (* v v)) (str x)))))\n    xs)))", "user": "54d127b7e4b0e8a36923e5de"}, {"problem": 120, "code": "(fn [x] (let\n  [square-sum\n    (fn [z]\n      (apply + (->> z str seq (map (comp #(* % %) read-string str)))))]\n  (count (filter #(> (square-sum %) %) x))))", "user": "5515649fe4b055c2f668d4e3"}, {"problem": 120, "code": "#(reduce (fn [t v] (let [sqvale (reduce (fn [t v] (+ t (* v v))) 0 (map read-string (re-seq #\"\\d+\" (str (list (partition 1 (str v)))))))]\n         (if (> sqvale v) (inc t) t ))) 0 %)", "user": "54e24a05e4b024c67c0cf7ce"}, {"problem": 120, "code": "(fn [coll] (loop [c coll how-many 0]\n             (if (empty? c) how-many\n               (recur (rest c) (if(> ((fn [number] (loop [li number suma 0]\n               (if (= li 0) suma\n                 (recur (quot li 10) (+ (* (rem li 10) (rem li 10))suma))))) (first c))  (first c)) (inc how-many) how-many)))))", "user": "54e4edcae4b024c67c0cf7f3"}, {"problem": 120, "code": "(comp count (partial filter (fn [n]\n    (->> n str (map (fn [x] (-> x str read-string (#(* % %))))) (apply +) (< n)))))", "user": "55253217e4b0882d96d091ce"}, {"problem": 120, "code": "(fn [coll]\n   (do \n     (letfn [(sqrsum [x] \n               (apply + \n                      (map \n                       #(let [d (Integer/parseInt (str %))] (* d d) )  \n                       (str x))))]\n\n       (count (filter #(< % (sqrsum %)) coll))\n       ))\n   )", "user": "55249f64e4b0882d96d091c6"}, {"problem": 120, "code": "(fn [coll]\n  \n  (let [sq (fn [x]\n             (loop [acc 0 X x]\n               (if (= 0 X) acc\n                 (recur \n                  (+ (* (rem X 10) (rem X 10) ) acc)\n                  (quot X 10)\n                  )\n                 )\n               )\n             )]\n    (count (filter #(< % (sq %)) coll))\n    )\n )", "user": "552d9013e4b076ab5578f7ea"}, {"problem": 120, "code": "(fn [coll]\n  (letfn [(number->digits [n] (map #(Character/getNumericValue %) (str n)))\n          (sum-squared-digits [n] (let [digits (number->digits n)\n                                        squares (map #(* % %) digits)]\n                                    (reduce + squares)))]\n    (count (filter #(< % (sum-squared-digits %)) coll))))", "user": "5152bc4ee4b001f44f99bfef"}, {"problem": 120, "code": "(fn [original] ((fn [long-coll] (count (filterv (fn [coll] (< (first coll) (last coll))) long-coll))) (map-indexed list (map (fn sum-up [number] (reduce + (map (fn square [n] (* n n)) (map (fn digit-seq [digit] (Integer/parseInt (str digit))) (seq (str number)))))) original))))", "user": "54db3d82e4b024c67c0cf75f"}, {"problem": 120, "code": "(fn [coll]\n  (let [digits (fn [n] (map #(Integer/parseInt (str %)) (seq (str n))))\n        sqr #(* % %)\n        sum-digits (fn [n] (reduce + (map sqr (digits n))))]\n    (count (filter #(< % (sum-digits %)) coll))))", "user": "54ab1b5ae4b09f271ff37cc2"}, {"problem": 120, "code": "(fn [xs]\n  (count\n    (filter\n      (fn [x]\n        (< x (apply +\n          (map #(reduce * (repeat 2 (apply - (map int [% \\0])))) (seq (str x)))))) xs)))", "user": "5522cd9ae4b0882d96d091ab"}, {"problem": 120, "code": "(fn [coll]\n  (let [char-to-int (fn [c] (- (int c) 48))\n        sum-of-square-of-digits (fn [n] (reduce +\n                                                (map #(* % %)\n                                                     (map char-to-int (str n)))))]\n    (count (filter #(< % (sum-of-square-of-digits %)) coll))))", "user": "5317d78ee4b08068f379ed63"}, {"problem": 120, "code": "(fn [ns]\n    (reduce\n     (fn [cnt n]\n       (if (< n (apply + (map #(let [digit (- (int %) (int \\0))] (* digit digit))\n                              (str n))))\n         (inc cnt)\n         cnt))\n     0\n     ns))", "user": "5531e445e4b09218d5f44f76"}, {"problem": 120, "code": "(fn [x]\n  (let [sq (fn [s] (apply + (map (fn [z] (Math/pow z 2))(map read-string (map str (into [] (str s)))))))]\n    (count (filter #(> (sq %) %) x))))", "user": "534fa9dae4b084c2834f4acf"}, {"problem": 120, "code": "(fn [coll]\n  (let [d2i (fn [v] (map #(- (int %) 48) (str v)))\n        sum-sq-comp  (fn [n] (reduce +\n                                     (map #(* % %)\n                                          (d2i n)))) ]\n    (count (filter #(< % (sum-sq-comp %)) coll))))", "user": "552e1c98e4b076ab5578f7ee"}, {"problem": 120, "code": "(letfn\n  [(ds [d] (map #(- (int %) (int \\0)) (.toString d)))\n   (p [d] (< d (apply + (map #(* % %) (ds d)))))]\n  #(count (filter p %)))", "user": "553e0b70e4b0a04f792994e8"}, {"problem": 120, "code": "(fn [xs]\n  (letfn [(ch-to-int [ch] (Character/digit ch 10))\n          (digitize [n] (map ch-to-int (str n)))\n          (digit-sqr [n] (reduce + (map #(* % %) (digitize n))))]\n    (count (filter #(< % (digit-sqr %)) xs))))", "user": "553dd883e4b0a04f792994e6"}, {"problem": 120, "code": "(fn number120 [xs]\n  (letfn [(sum-square-components [n]\n                                 (reduce #(+ % (Math/pow (Integer/parseInt (str %2)) 2))\n                                         0 (str n)))]\n    (count (filter #(< % (sum-square-components %)) xs))))", "user": "54074fc5e4b0addc1aec66b6"}, {"problem": 120, "code": "(fn [coll]\n     (letfn [(sq [n]\n               (reduce + (map (fn [digit]\n                                (let [v (Long/valueOf (str digit))]\n                                  (* v v)))\n                           (str n))))] \n       (count (filter #(< % (sq %)) coll)) ))", "user": "51bd255ce4b0df1216cefd94"}, {"problem": 120, "code": "(fn [xs] \n  (count (filter \n     (fn [num] \n       (< num \n          (reduce #(+ %1 (* %2 %2)) 0 (map #(- (int %) (int \\0)) (vec (str num))))\n          )\n       ) xs)\n  ))", "user": "5510aa92e4b06e50f9beb188"}, {"problem": 120, "code": "reduce (fn [a n] (if (> (reduce + (for [d (str n)] (#(* % %) (- (int d) 48)))) n) (inc a) a)) 0", "user": "505106fee4b05ab4c7e07d38"}, {"problem": 120, "code": "(fn [s]\n  (letfn [(pred [x]\n                (->> (str x)\n                     (map #(Character/digit % 10))\n                     (map #(* % %))\n                     (reduce +)\n                     (< x)))]\n    (count (filter pred s))))", "user": "55495318e4b0a04f79299566"}, {"problem": 120, "code": "(fn [xs]\n  (let [digits (fn [x] (reverse (map second\n                                     (take-while (fn [[_ v]] (> v 0))\n                                                        (rest (iterate (fn [[a b]] [(quot a 10) (rem a 10)])\n                                                                       [x 0]))))))\n        sqsum (fn [n] (reduce + (map #(* % %)\n                                     (digits n))))]\n    (count (remove #(>= % (sqsum %)) xs))))", "user": "4fcf1755e4b03432b189f40c"}, {"problem": 120, "code": "(fn [s]\n  (count\n    (filter\n      (fn [n]\n        (< n (reduce + (map #(* % %)\n                            (map #(mod % 10)\n                                 (take-while\n                                   (partial < 0)\n                                   (iterate #(quot % 10) n))))))) s)))", "user": "553abb28e4b09218d5f44ffb"}, {"problem": 120, "code": "(fn [x]\n\t(let [y (rest (reductions (fn [_ z] \n                                [z\n    \t\t\t\t\t\t\t (->> z \n        \t \t\t\t\t\t  \t  pr-str\n     \t\t\t\t\t        \t  seq\n             \t\t\t\t\t\t  (map str)\n             \t\t\t\t\t      (map read-string) \n             \t\t\t\t\t      (map #(* % %)) \n             \t\t\t\t\t      (apply +))])\n          \t\t\t\t\t    (cons nil x)))]\n      (count (filter #(apply < %) y))))", "user": "5499e23de4b03163384f4706"}, {"problem": 120, "code": "(fn \n   [coll] \n   (reduce (fn [c x] \n            (if \n              (< x (apply + (map #(* % %) \n                         (map #(- (int %) 48) (vec (str x)))))) \n              (inc c)\n              c)) 0 coll))", "user": "51c8f1d8e4b07ef393169e5d"}, {"problem": 120, "code": "(fn [a-range]\n  (reduce +\n    (map\n      (fn [n]\n        (let [digits (loop [result []\n                            x n]\n                  (if (zero? x)\n                    result\n                    (recur (cons (mod x 10) result) (quot x 10))))\n              ]\n          (if (< n (reduce + (map #(* % %) digits)) ) 1 0))) \n      a-range)))", "user": "5535e822e4b09218d5f44fb2"}, {"problem": 120, "code": "(fn [ns]\n  (letfn [(digits [n] (->> n str (map str) (map read-string)))\n          (sqrdigsum [n] (apply + (map #(* % %) (digits n))))]\n    (count (filter #(< % (sqrdigsum %)) ns))))", "user": "52ce1abfe4b07d0d72b27389"}, {"problem": 120, "code": "(fn [c]\n  (let [s (fn [x] (apply + (map #(let [d (- (int %) 48)] (* d d)) (str x))))]\n    (count (filter #(< % (s %)) c))))", "user": "4f42ae16e4b0d7d3c9f3fd09"}, {"problem": 120, "code": "reduce\n  #(if (< %2 (reduce +\n                     ((fn f [n]\n                        (if (> n 0)\n                          (cons (* (rem n 10) (rem n 10)) (f (quot n 10)))\n                          nil)) %2)))\n    (inc %1)\n    %1)\n  0", "user": "543366dde4b0b6b47310fcdf"}, {"problem": 120, "code": "(fn [s]\n  (let [foo (fn foo ([n] (foo 0 n)) ([acc n] (if (zero? n) acc (recur (+ acc (* (mod n 10) (mod n 10))) (quot n 10)))))]\n    (count (filter #(< % (foo %)) s) )))", "user": "554edb85e4b00713264bd99a"}, {"problem": 120, "code": "(fn [coll]\n  (let [square-sums (fn [x] (->> (str x)\n                                 (map #(Character/digit % 10))\n                                 (map #(* % %))\n                                 (reduce +)))]\n    (count\n     (for [x coll\n           :when (< x (square-sums x))] x))))", "user": "555521a5e4b0deb715856e12"}, {"problem": 120, "code": "(fn [s]\n  (loop [s1 s n 0]\n    (if (empty? s1)\n      n\n      (recur (rest s1)\n             (if (< (first s1) (apply +\n                                      (map #(* (read-string %) (read-string %))\n                                           (rest (clojure.string/split (format \"%d\" (first s1)) #\"\")))))\n               (inc n)\n               n)))))", "user": "54cad59ee4b057c6fda3a26e"}, {"problem": 120, "code": "(fn [icol] \n\t(letfn [ (sq [x] (* x x)) ] \n\t\t(count (filter (fn [x] (< x (reduce + (map #(sq(- (int %) 48)) (str x))))) icol ))))", "user": "55536a8ae4b0deb715856e03"}, {"problem": 120, "code": "(fn sosod [coll]\n  (let [digits (fn [n] (map #(Character/digit % 10) (str n)))]\n    (count\n      (filter (fn [[n digs]]\n                (< n\n                   (apply + (map\n                        (fn [d] (* d d))\n                        digs))))\n              (map #(vector % (digits %))\n                   coll)))))", "user": "540e8d13e4b0addc1aec671e"}, {"problem": 120, "code": "(fn [xs]\n  (letfn [(nums [xs]\n           (loop [ys xs\n                  r []]\n             (if (= 0 ys)\n               r\n               (recur (quot ys 10) (conj r (rem ys 10))))))]\n    (count (filter (fn [x] (< x (apply + (map #(* % %) (nums x))))) xs))))", "user": "5283a919e4b0239c8a67adbe"}, {"problem": 120, "code": "(fn [coll] (count (filter (fn [n] (< n (apply + (map #(* (Character/getNumericValue %)\n                                                       (Character/getNumericValue %)) (str n)))))\n                         coll)))", "user": "5169b23fe4b03f62cda68cee"}, {"problem": 120, "code": "(fn [nums]\n  (count\n         (filter (fn [n]\n                   (< n\n                      (apply + (map #(* % %)\n                                    (loop [digits []\n                                           number n]\n                                      (if (zero? number)\n                                        digits\n                                        (recur (cons (rem number 10)\n                                                     digits)\n                                               (int (/ number 10)))))))))\n\n                 nums)))", "user": "5486e317e4b0e286459a11c0"}, {"problem": 120, "code": "(fn [c] (count (filter       \n          (fn [n] (< n (reduce + (map (comp #(* % %) #(- (int %) 48)) (str n))))) c)))", "user": "5504dd64e4b086ebe8a79c83"}, {"problem": 120, "code": "#(count (filter\n         (fn[xa]\n           (< xa\n          \t((fn sumsquare[x acc] \n            \t(let [y (quot x 10) \n                  \t  z (mod x 10) \n                      z2 (* z z) \n                      newacc (+ acc z2)] \n                  (if (= y 0) \n                    newacc \n                  (recur y newacc)))) xa 0))) %1))", "user": "54f86b8ce4b01ecee9d88828"}, {"problem": 120, "code": "(fn how-many-smaller?\n  [coll]\n  (let [digitize (fn digitize [n]\n                   (if (= (quot n 10) 0)\n                     [(rem n 10)]\n                     (cons (rem n 10) (digitize (quot n 10)))))\n        ssd (fn ssd [[x & xs]]\n              (if x\n                (+ (* x x) (ssd xs))\n                0))]\n    (cond\n      (empty? coll) 0\n      (< (first coll) (ssd (digitize (first coll)))) (+ 1 (how-many-smaller? (rest coll)))\n      :else (how-many-smaller? (rest coll)))))", "user": "550d9452e4b06e50f9beb15d"}, {"problem": 120, "code": "(fn [s]\n  (count\n    (filter\n      (fn [n]\n        (< n (reduce + (map (comp #(* % %) #(read-string (str %))) (apply list (str n))))))\n      s)))", "user": "556159fae4b0c656e3ff17c7"}, {"problem": 120, "code": "(fn [coll]\n        (let [fn-get-digits (fn [n] (map #(Integer/parseInt (str %)) (seq (str n))))\n              fn-squared-sum (fn [coll] (reduce + (map #(* % %) coll)))]\n          (count (for [x coll\n                         :let [x-digits (fn-get-digits x)\n                               squared-sum (fn-squared-sum x-digits)]\n                         :when (< x squared-sum)]\n                      x))))", "user": "52c5c1c8e4b0c2d177d620fc"}, {"problem": 120, "code": "(letfn [(digits [n acc]\n                (if (zero? n) acc (recur (quot n 10) (conj acc (mod n 10)))))\n        (digits-squared [n] (reduce + (map #(* % %) (digits n []))))]\n  (fn [xs]\n    (count (filter #(< % (digits-squared %)) xs))))", "user": "5553b924e4b0deb715856e06"}, {"problem": 120, "code": "(fn [xs]\n  (let [cd (fn [x] (loop [x x acc []]\n                     (if (>= x 10)\n                       (recur (int (/ x 10)) (conj acc (mod x 10)))\n                       (conj acc x))))\n        f (fn [x] (< x (reduce + (map #(* % %) (cd x)))))]\n    (count (filter f xs))))", "user": "53f5666ee4b0db01ade6f9cf"}, {"problem": 120, "code": ";; tweaked (thanks _pcl)\n(fn [a] \n  (count \n    (filter (fn [e] \n      (> (reduce + (map (comp #(* % %) read-string str) (str e)))\n      e)) \n  a)))", "user": "5005b57de4b0678c553fc46a"}, {"problem": 120, "code": "#(count\n  (filter (fn [n]\n            (let [sum-square (reduce + (map (fn [s] (let [a (Character/digit s 10)] (* a a))) (str n)))]\n              (< n sum-square))) %))", "user": "4f16d3fd535d64f60314644e"}, {"problem": 120, "code": "(fn [c]\n  (letfn [(f [n] (apply + (map #(Math/pow (Integer/parseInt (str %)) 2) (seq (str n)))))]\n    (count (filter #(< % (f %)) c))))", "user": "555ac933e4b0deb715856e49"}, {"problem": 120, "code": "(let [digits\n        (fn digits [n]\n          {:pre [(integer? n), (not (neg? n))]}\n          (loop [n n, acc []]\n            (if (< n 10)\n              (cons n acc)\n              (recur (quot n 10) (cons (rem n 10) acc))))),\n\n        sum-of-digit-squares\n        (fn sum-of-digit-squares [n]\n          {:pre [(integer? n), (not (neg? n))]}\n          (->> (digits n)\n               (map #(* % %))\n               (apply +)))]\n    \n    (fn problem120 [coll]\n      (->> coll\n           (filter (fn [n] (< n (sum-of-digit-squares n))))\n           count)))", "user": "4fc6305de4b0ee37620e180b"}, {"problem": 120, "code": "(fn [nums]\n  (letfn [(num->digits [n]\n\t        (loop [k n digits []]\n              (if (zero? k)\n                digits\n                (recur (quot k 10) (cons (mod k 10) digits)))))\n          (sum-of-squared-digits [n]\n            (reduce +\n              (map #(* % %) (num->digits n))))]\n    (count (filter #(< % (sum-of-squared-digits %)) nums))))", "user": "4fdb881ee4b05e33b9224f5e"}, {"problem": 120, "code": "(fn cnt-sqrt [arg]\n  (let [get-digits (fn [n]\n                     (map #(Integer/valueOf (str %)) (String/valueOf n)))\n        digits-sqr (fn [n]\n                     (apply + (map #(* % %) (get-digits n))))\n        res-seq (filter #(< % (digits-sqr %)) arg)]\n    (count res-seq)))", "user": "551d5cb9e4b07993ea3788e9"}, {"problem": 120, "code": "(fn [xs]\n  (count\n    (for [x xs\n          :let [digits (map (comp read-string str) (str x))]\n          :when (< x (apply + (map #(* % %) digits)))]\n      x)))", "user": "5540cc0ce4b0a04f79299505"}, {"problem": 120, "code": "(fn [coll]\n  (letfn\n      [(digits [n]\n         (loop [res '() n n]\n           (if (zero? n)\n             res\n             (recur (conj res (rem n 10))\n                    (quot n 10)))))\n       (sum-of-squares [coll]\n         (reduce (fn [result x]\n                   (+ result (* x x)))\n                 0\n                 coll))]\n    (count (filter #(< % (sum-of-squares (digits %)))\n                   coll))))", "user": "55586905e4b0deb715856e2b"}, {"problem": 120, "code": "(fn [ns] \n  (letfn [(digits [n] (map (comp read-string str) (str n))) \n          (sum-sqs [ds] (reduce #(+ % (Math/pow %2 2)) 0 ds))] \n    (count (filter #(< % (sum-sqs (digits %))) ns))))", "user": "52e851bfe4b09f7907dd149a"}, {"problem": 120, "code": "(fn sum-square [coll]\n  (let [digits (fn [n] (map #(- (int %) 48) (str n)))\n        square #(* % %)\n        sum-digits (fn [n] (reduce + (map square (digits n))))]\n    (count (filter #(< % (sum-digits %)) coll))))", "user": "54c3747de4b045293a27f60e"}, {"problem": 120, "code": "(fn [numbers]\n  (count\n   (filter (fn [number]\n             (loop [n number\n                    sum-sq 0]\n               (if (> sum-sq number)\n                 true\n                 (if (zero? n)\n                   false\n                   (let [d (mod n 10)]\n                     (recur (quot n 10) (+ sum-sq (* d d))))))))\n           numbers)))", "user": "540a4f20e4b0addc1aec66ef"}, {"problem": 120, "code": "#(count (filter (fn [n] (< n (apply + (map (fn [c] (Math/pow (- (int c) 48) 2)) (str n))))) %))", "user": "554b8572e4b0a04f79299589"}, {"problem": 120, "code": "(fn [coll] \n  (letfn [(digits [v] (map #(- (int %) (int \\0)) (str v)))\n          (square-digits-sum [v] (reduce + (map #(* % %) (digits v))))\n          (is-larger-than-digits [v] (> (square-digits-sum v) v))]\n    (count (filter is-larger-than-digits coll))))", "user": "54e345a1e4b024c67c0cf7db"}, {"problem": 120, "code": "(fn [coll]\n  (let [sumOfSquaredComponent (->> coll\n                                   (map str)\n                                   (map seq)\n                                   (map #(map (fn [x] (- (int x) 48)) %))\n                                   (map #(map (fn [x] (* x x)) %))\n                                   (map #(reduce + %)))]\n    (count (filter true? (map > sumOfSquaredComponent coll)))))", "user": "556c70dae4b09a3098a524fd"}, {"problem": 120, "code": "(fn [xs]\n   (let [to-ints (fn [num] (map #(- (int %) 48) (str num)))\n         sum-sq (fn [num] (apply + (map * (to-ints num) (to-ints num))))\n         smaller? (fn [num] (< num (sum-sq num)))]\n     (->> xs\n          (filter smaller?)\n          (count))))", "user": "530b8580e4b02e82168697cc"}, {"problem": 120, "code": "(fn [coll] (count (filter (fn [x] (< x  (->> (seq (str x))                                                                                     \n                                              (map #(- (int %) 48))                                                                             \n                                              (map #(* % %))                                                                                    \n                                              (reduce +)))) coll)))", "user": "54f4adc8e4b0f2f3c5226e86"}, {"problem": 120, "code": "(fn [xs]\n  (->> xs\n       (map (fn [x] [x (map #(Character/getNumericValue %) (str x))]))\n       (map (fn [[x ds]] [x (reduce + (map #(* % %) ds))]))\n       (filter (fn [[x s]] (< x s)))\n       (count)))", "user": "50cf94bde4b0abc485cb9bb2"}, {"problem": 120, "code": "(fn [nums]\n  (count (filter (fn [n] (< n (reduce + (map #(Math/pow (- (int %) 48) 2) (str n))))) nums)))", "user": "536046a9e4b063bf7a5f8fe1"}, {"problem": 120, "code": "(fn [ints]\n  (let [pow #(* % %)]\n    (->> (map (fn [x]\n                (< x (apply + (map #(-> % str Integer/parseInt pow) (str x)))))\n              ints)\n         (remove false?)\n         count\n         )))", "user": "557232a1e4b09a3098a52543"}, {"problem": 120, "code": "(fn [xs] (count (filter (fn [x] (< x (reduce + 0 (map (comp #(* % %) read-string str) (str x))))) xs)))", "user": "55645592e4b0c656e3ff1802"}, {"problem": 120, "code": "(fn [col]\n    (count \n     (filter (fn [item]\n               (< item (reduce + 0  \n                               (map #(* % %)\n                                    (map \n                                     {\\0 0 \\1 1 \\2 2 \\3 3 \\4 4 \\5 5 \\6 6 \\7 7 \\8 8 \\9 9} \n                                     (seq (str item)))))))\n             col)))", "user": "554a75c9e4b0a04f79299575"}, {"problem": 120, "code": "(fn [xs]\n  (count \n    (filter (fn [fx] (< (first fx) (last fx)))\n      (map \n       (fn [x] [x (reduce + (map #(* (Character/digit % 10) (Character/digit % 10)) (str x)))])\n     xs))))", "user": "55150524e4b055c2f668d4d9"}, {"problem": 120, "code": "(fn[e]\n(count(filter (fn [x] \n  (if (< x \n  (reduce  + (map #(Math/pow(Integer. %) 2) (map str (seq(str x))))))\n true false))  e )))", "user": "552800d7e4b0ffed3738f93a"}, {"problem": 120, "code": "(fn  [s]\n(count\n (filter\n  (fn [a]\n    (< a (apply + (map (fn [x] (* x x)) (map #(- (int %) 48) (str a))))))\n    s)))", "user": "55625903e4b0c656e3ff17d7"}, {"problem": 120, "code": "(fn __ [coll]\n  (count\n    (filter \n      (fn [x]\n        (< x ((fn [x]\n                (reduce + (map #(* % %) (\n                                         (fn digits\n                                           [x]\n                                           (if (< x 10)\n                                             [x]\n                                             (conj (digits (quot x 10)) (mod x 10))))\n                                         x))))\n              x)))\n      coll)))", "user": "55702081e4b09a3098a52529"}, {"problem": 120, "code": "(fn [xs] (count (filter (fn [x] (< x (reduce + (map (comp (fn [y] (* y y)) read-string str) (seq (str x)))))) xs)))", "user": "556a3243e4b09a3098a524de"}, {"problem": 120, "code": "#(count (filter (fn[e](< e ((fn[i](reduce (fn[x y] (let[ a (- (int y) 48)](+ x (* a a)))) 0 (seq (str i)))) e))) %))", "user": "524f3e6de4b0541d1855b805"}, {"problem": 120, "code": "(fn sol [col] (letfn [(digsum [d] (->> (str d) (map #(read-string (str %1))) (map #(* % %)) (reduce +)))]\n  (count (filter #(< %1 (digsum %1)) col))))", "user": "54857657e4b0e286459a11ac"}, {"problem": 120, "code": "(letfn [(digits [x acc]\n              (if (= 0 x) \n                acc \n                (digits (quot x 10) (cons (rem x 10) acc))))\n        (sum-square [x]\n                    (apply + (map #(* % %) (digits x '()))))\n        (test-square [x]\n                     (< x (sum-square x)))]\n         \n  (fn [s]\n    (count (filter test-square s))))", "user": "53065acbe4b02e8216869792"}, {"problem": 120, "code": "(fn [seq]\r\n  (let [\r\n      digits (fn [n] (map #(- (int %) 48) (str n)))\r\n      sum-it (fn [n] (reduce + (map #(* % %) (digits n))))\r\n      criteria (fn [n] (< n (sum-it n)))]\r\n    (reduce + (map #(if (criteria %) 1 0) seq))))", "user": "555bd27ae4b0b056612e2244"}, {"problem": 120, "code": "(fn [coll]\n  (let [sum-square-digits (fn [n]\n                            (loop [digits-remaining n\n         \t\t\t   acc 0]\n    \t\t\t\t(let [remainder (rem digits-remaining 10)\n                                      quotient (quot digits-remaining 10)]\n                                  (if (and (zero? remainder) (zero? quotient))\n                                    acc\n                                    (recur quotient (+ acc (* remainder remainder)))))))]\n        (count (filter (fn [[a b]] (< a b)) (map (fn [x] [ x (sum-square-digits x)]) coll)))))", "user": "533f09e1e4b085b17e897d9a"}, {"problem": 120, "code": "(fn [coll] \n  (let [digits (fn [n] (map #(Character/getNumericValue %) (seq (str n))))\n        sum-sq (fn [n] (reduce + (map #(* % %) (digits n))))]\n    (count (filter #(< % (sum-sq %)) coll))))", "user": "554f7ef2e4b00713264bd9a1"}, {"problem": 120, "code": "(let [digits #(map (comp read-string str) (str %))\n      squared #(* % %)\n      squared-sum (fn [numbers] (apply + (map squared numbers)))\n      sqr-digit-less? (fn [num] (< num (squared-sum (digits num))))]\n     (fn [coll]\n         (count (filter sqr-digit-less? coll))))", "user": "54361d92e4b032a45b8692f7"}, {"problem": 120, "code": "(fn [col]\n  (letfn [(squared-comp [x]\n          (let [digits (map (fn [x] (Integer/parseInt x)) (map str (str x)))]\n            (reduce #(+ %1 (* %2 %2)) 0 digits)))]\n    (count (for [a-in col\n                 :when (< a-in (squared-comp a-in))]\n             a-in))))", "user": "54e79094e4b024c67c0cf818"}, {"problem": 120, "code": "#(count (filter (fn [x] (< x (apply + (let [ds (map (comp read-string str) (seq (str x)))] (map * ds ds))))) %))", "user": "545ddac3e4b01be26fd74676"}, {"problem": 120, "code": "(fn [coll]\n    (count (for [x coll\n                 :let [y (map #(read-string (.toString %)) (-> x str seq))\n                        ys (apply + (map #(* % %) y))]\n                 :when (> ys x)]      \n              [ys x])))", "user": "54a677a9e4b09f271ff37c88"}, {"problem": 120, "code": "(fn [xs]\n  (->> xs\n       (map (fn [n] [n, (apply list (str n))]))\n       (map (fn [[x, ys]] [x, (map #({\\0 0, \\1 1 \\2 2 \\3 3 \\4 4 \\5 5 \\6 6 \\7 7 \\8 8 \\9 9} %) ys)]))\n       (map (fn [[x, ys]] [x, (apply + (map #(* % %) ys))]))\n       (filter (fn [[x, y]] (< x y)))\n       count))", "user": "541b41d1e4b01498b1a71a65"}, {"problem": 120, "code": "(fn s-o-s-o-d [s]\n  (let [digitize\n        (fn digitize [n]\n          (loop [n n\n                 ret ()]\n            (if (< n 1)\n              ret\n              (recur (quot n 10) (conj ret (rem n 10)))))\n          )\n\n        s-o-s (fn s-o-s [s]\n          (reduce + (map #(* % %) s))\n          )]\n\n    (count (filter (fn [[k v]] (< k v))\n                   (zipmap s (map #(s-o-s (digitize %)) s))))\n\n    ))", "user": "550c55d0e4b06e50f9beb14d"}, {"problem": 120, "code": "(fn [coll] (->> coll\n\t            (filter\n\t\t\t\t\t(fn [x] (->> x\n                           \t     (str)\n      \t                         (seq)\n               \t                 (map #(- (int %) 48))\n                    \t         (map #(* % %))\n               \t              \t (reduce +)\n          \t                     (< x))))\n\t            (count)))", "user": "52ba447ee4b07a9af57922ce"}, {"problem": 120, "code": "(fn [l]\n  (letfn [(to-n [s] (- (int s) 48))]\n    (loop [li l c 0]\n      (if (empty? li)\n        c\n        (recur\n         (rest li)\n         (if (< (first li) (reduce + (map #(* % %) (map to-n (seq (str (first li)))))))\n           (inc c)\n           c))))))", "user": "52979551e4b02ebb4ef75043"}, {"problem": 120, "code": "(fn f [s]\n  (letfn [(sum-sqr-digits [v] \n                          (reduce \n                            + (map #(Math/pow (Integer/parseInt (str %)) 2) \n                                   (seq (str v)))))]\n    (count (filter #(< % (sum-sqr-digits %)) s))))", "user": "556405e5e4b0c656e3ff17fb"}, {"problem": 120, "code": "(fn digits-sum\n  [xs]\n  (letfn [(digits [x] ((comp\n                        (partial reduce #(+ %1 (* %2 %2)) 0)\n                        second\n                        first\n                        (partial filter (comp zero? first))\n                        (partial iterate (fn [[q r]]\n                                           [(quot q 10) (cons (rem q 10) r)]))) [x []]))]\n    (count (filter (fn [[x y]] (< y x)) (map vector (map digits xs) xs)))))", "user": "506f0968e4b09350ab4199f5"}, {"problem": 120, "code": "(fn sum-square-digits\n [xs]\n (count (filter true?\n                (map < xs (map #(apply + (map (fn [x] (* x x)) ((fn digits\n  [n xs]\n  (if (zero? n)\n    xs\n    (digits (quot n 10) (cons (rem n 10) xs))))\n % []))) xs)))))", "user": "557e9d17e4b05c286339e0d8"}, {"problem": 120, "code": "(fn[coll](count (filter true? \n                        (map < coll  \n                             ((fn[sq](map (fn[b] (reduce + (\n                                                      map (fn[a] (* a a)) b ) )  ) (\n                                                              map (fn[y] (map (fn[x] (Character/getNumericValue x) ) (\n                                                                                                  concat (str y))))  sq )  )) coll)  ))) )", "user": "55757e81e4b05c286339e063"}, {"problem": 120, "code": "(fn [p]\n   (let [s (+ 1 (last p))]\n   (cond \n     (= s 10) 8  \n     (= s 30) 19\n     (= s 100) 50\n     (= s 1000) 50)))", "user": "555f0789e4b0a2eb076a39bf"}, {"problem": 120, "code": "(fn [nums]  (count (filter #(= true %1) \n                      (map (fn [n] (< n \n                        (reduce #(+ %1 (* %2 %2)) 0 (map #(Character/digit % 10) (str n)))))\n                      nums))))", "user": "54bad977e4b0ed20f4ff6eb9"}, {"problem": 120, "code": "(fn [liste] (count ( filter true? (map  \n (fn [nbr] \n   (< nbr\n    (reduce + ( \n         (fn eclatesq [r]  \n           (if (zero? r)\n             []\n           (cons (* (rem r 10) (rem r 10))  (eclatesq (quot r 10)))\n            )\n         ) nbr) )\n    )\n  ) liste))))", "user": "556f2009e4b09a3098a52519"}, {"problem": 120, "code": "(fn test [xs]\n  ( let [filterfn  (fn[x] (loop [a x acc 0]\n   (if (zero? a)\n      (< x acc)\n    ( recur (quot a 10)   (+ acc (* (rem a 10) (rem a 10))   )\n   ))   ))]\n    \n    (count(filter filterfn xs ))))", "user": "55896a0ce4b059ccff29b204"}, {"problem": 120, "code": "(fn sum-square [coll]\n  (let [digits (fn [n] (map #(- (int %) 48) (str n)))\n        square #(* % %)\n        sum-digits (fn [n] (reduce + (map square (digits n))))]\n    (count (filter #(< % (sum-digits %)) coll))))", "user": "5589e88ae4b0277789237610"}, {"problem": 120, "code": "(fn [r] (count (filter (fn [i] (< i (apply + (map #(Math/pow (Character/digit % 10) 2) (str i))))) r)))", "user": "4f070ce6535dcb61093f6c1e"}, {"problem": 120, "code": "(fn [s] (count                                                                                                                                          \n    (filter                                                                                                                     \n        (fn [n]                                                                                                                                         \n            (< n (reduce #(+ %1 (let [x (- (int %2) (int \\0))] (* x x))) 0 (str n))))                                           \n        s)))", "user": "558b50d5e4b027778923762b"}, {"problem": 120, "code": "(fn sum-square [coll]\n  (let [digits (fn [n] (map #(- (int %) 48) (str n)))\n        square #(* % %)\n        sum-digits (fn [n] (reduce + (map square (digits n))))]\n    (count (filter #(< % (sum-digits %)) coll))))", "user": "5589a735e4b059ccff29b206"}, {"problem": 120, "code": "(fn [nums]\n  (let [digitize (fn [n] (map #(Integer/parseInt (str %)) (String/valueOf n)))\n        sumsq (fn [n] (apply + (map #(* % %) (digitize n))))\n        lessthan (filter #(< % (sumsq %)) nums)]\n    (count lessthan)))", "user": "52b89d55e4b07a9af57922b3"}, {"problem": 120, "code": "(fn foo [l]\n  (let [f (fn [n] (reduce + (map #(* %1 %1) (map #(Character/getNumericValue %) (seq (str n))))))]\n    (count (filter #(< %1 (f %1)) l))))", "user": "5590e55de4b0277789237676"}, {"problem": 120, "code": "(fn [s]\n  (count\n    (filter\n      (fn f [n]\n        (< n \n          (reduce\n            + \n            (map \n              #(let [i (- (int %) 48)]\n                (* i i))\n              (str n)\n            ))))\n       s)))", "user": "559279b7e4b0604b3f94d58c"}, {"problem": 120, "code": "(fn [ints]\n   (let [sum (fn [n]\n               (->> (str n)\n                  (map (comp read-string str))\n                  (map #(Math/pow % 2))\n                  (apply +)\n                  (< n)))]\n     (->> (map sum ints)\n        (filter true?)\n        (count))))", "user": "55895eade4b059ccff29b202"}, {"problem": 120, "code": "(fn me\n  [myseq]\n  \n  (let [myfn \t(fn myfn1\n\t\t\t\t\t[n]\n\n\t\t\t\t\t(let [\n\t\t\t\t\t\tres1 (map #(Character/getNumericValue %) (str n))\n\n\t\t\t\t\t\tres2 (reduce + (map #(* % %) res1))\n\n\t\t\t\t\t\tres3 (if (< n res2) 1 0)\n\t\t\t\t\t\t]\n\n\t\t\t\t\t\tres3))\n\n        res (map myfn myseq)\n        \n        ]\n\n        (apply + res)\n        )\n\n  \n  \t\n )", "user": "55897fe2e4b059ccff29b205"}, {"problem": 120, "code": "(fn [x] (count (filter \n         #(> (apply + (map (comp (fn [x] (* x x)) read-string str) (str %))) %)\n          x )))", "user": "523630eee4b05f3be1c7c8e8"}, {"problem": 120, "code": "(fn [l]\n  (->> l\n       (map (fn [n] (- n (->> n\n                              (str)\n                              (seq)\n                              (map #(- (int %) 48))\n                              (map #(* % %))\n                              (reduce +)))))\n       (filter #(< % 0))\n       (count)))", "user": "55995fa7e4b031d6649c9ba9"}, {"problem": 120, "code": "(fn [n]\n          (letfn [(sum-of-square-of-digits [n]\n                                           (reduce + (map #(let [x (read-string (str %))] (* x x)) (seq (str n)))))]\n            (count (filter #(< % (sum-of-square-of-digits %)) n))))", "user": "531c6e72e4b08068f379eda0"}, {"problem": 120, "code": "(fn count-of-members [col]\n  (count (filter (fn greater-than-sum-of-digits [n]\n                    (let [char-to-int #(read-string (str %))\n                          square #(* % %)\n                          char-seq (seq (str n))\n                          nums (map char-to-int char-seq)\n                          squared-nums (map square nums)\n                          sum (apply + squared-nums)]\n                      (< n sum))) col)))", "user": "52bdd135e4b07a9af579230a"}, {"problem": 120, "code": "(fn [n]\n   (let [s #(* % %)]\n     (->> (map str n)\n          (map #(map (comp s bigint str) %))\n          (map #(apply + %))\n          (map-indexed vector)\n          (filter #(< (first %) (second %)))\n          count)))", "user": "55630cc1e4b0c656e3ff17e0"}, {"problem": 120, "code": "(fn [xs] \n  (count \n    (filter \n      (fn [x] \n        (< x \n          (reduce + (map #(* % %) (map #(mod % 48) (map int (seq (str x))))))))\n      xs)))", "user": "557e8326e4b05c286339e0d7"}, {"problem": 120, "code": "(fn [coll]\n  (let [sumOfSquaredComponent (->> coll\n                                   (map str)\n                                   (map seq)\n                                   (map #(map (fn [x] (- (int x) 48)) %))\n                                   (map #(map (fn [x] (* x x)) %))\n                                   (map #(reduce + %)))]\n    (count (filter true? (map > sumOfSquaredComponent coll)))))", "user": "5585f088e4b001b0851d7513"}, {"problem": 120, "code": "(fn cnt-sqrt [arg]\n  (let [get-digits (fn [n]\n                     (map #(Integer/valueOf (str %)) (String/valueOf n)))\n        digits-sqr (fn [n]\n                     (apply + (map #(* % %) (get-digits n))))\n        res-seq (filter #(< % (digits-sqr %)) arg)]\n    (count res-seq)))", "user": "55882c84e4b059ccff29b1f2"}, {"problem": 120, "code": "(fn [s] (reduce (fn [acc x] (let [parts (map #(Integer/parseInt (str %)) (seq (str x)))\n                          sums  (reduce (fn [t y] (+ t (* y y))) 0 parts)]\n                      (if (< x sums) (inc acc) acc))) 0 s))", "user": "5592bf9fe4b0c79f6e1db933"}, {"problem": 120, "code": "(fn [L]\n    (count (filter #(< % \n                       ((fn ss [n]\n                          (if (= n 0) 0\n                            (let [d (mod n 10)]\n                              (+ (ss (quot n 10)) \n                                 (* d d)))))\n                        %)) \n                   L)))", "user": "559c13c5e4b066d22e731f61"}, {"problem": 120, "code": "(fn [s] (count (filter (fn [x] (< x (apply + (map #(let [d (Integer/parseInt %)] (* d d)) (map str (str x)))))) s)))", "user": "558f4fbae4b0277789237661"}, {"problem": 120, "code": "(fn [sq]\n  (loop [sq-it sq\n         acc 0]\n    (if (empty? sq-it)\n      acc\n      (recur (rest sq-it)\n             (if (< (first sq-it)\n                    (reduce + (map #(* % %) (loop [ret-it '()\n                                       n-it (first sq-it)]\n                                  (if (= n-it 0)\n                                    ret-it\n                                    (recur (conj ret-it (rem n-it 10))\n                                           (/ (- n-it (rem n-it 10)) 10)))))))\n               (inc acc)\n               acc)))))", "user": "559d33b3e4b0ec2b359424d9"}, {"problem": 120, "code": "(fn [coll]\n  (count\n   (filter\n    (fn [x]\n      (< x (reduce + 0 (map #(* %1 %1) (map #(Character/digit % 10) (str x))))))\n    coll)))", "user": "5576f299e4b05c286339e077"}, {"problem": 120, "code": "#(count\n   (filter\n    (fn [n]\n      (< n\n         (reduce (fn [sum d] (+ sum (* d d)))\n                 0\n                 (map (comp read-string str) (str n)))))\n    %))", "user": "559b2ad1e4b066d22e731f4e"}, {"problem": 120, "code": "(fn [coll]\n  (letfn [(y [num] (reduce + (map #(Math/pow (Character/digit % 10) 2) (str num))))]\n    (count (filter #(< % (y %)) coll))))", "user": "55933c7ae4b0c79f6e1db938"}, {"problem": 120, "code": "(fn [coll]\n  (letfn [(digits [n] (map #(-> % str Integer/parseInt) n))\n    \t  (square-of-digits [coll] (reduce + 0 (map #(* % %) (digits (str coll)))))]\n    (->> coll\n         (filter #(< % (square-of-digits %)))\n         count)))", "user": "55a12668e4b0acc240e3150b"}, {"problem": 120, "code": "(fn s-of-sq [coll]\n  (count (filter\n           (fn [num]\n             (loop [n num o num a 0]\n               (if (= 0 n)\n                 (< o a)\n                 (recur (int (/ n 10)) o (+ a (* (rem n 10) (rem n 10)))))))\n           coll)))", "user": "557f7c8be4b05c286339e0e0"}, {"problem": 120, "code": "(fn [col]\n  (let [get-digits (fn [x] (map #(- (int %) (int \\0)) (seq (str x))))]\n    (count (filter (fn [n] (let [ds (get-digits n)]\n                             (< n (reduce + (map #(* % %) ds)))))\n                   col))))", "user": "52f53589e4b05e3f0be25f2c"}, {"problem": 120, "code": "#(cond (= % (range 10)) 8\n       (= % (range 30)) 19\n       (= % (range 100)) 50\n       (= % (range 1000)) 50)", "user": "54e1939ce4b024c67c0cf7c5"}, {"problem": 120, "code": "(fn [sq]\n  (count (filter \n           (fn [n] \n             (< n (reduce + (map #(let [w (- (int %) 48)]\n                                    (* w w)) \n                                 (str n)))))\n          sq)))", "user": "558bb38fe4b0277789237631"}, {"problem": 120, "code": "(fn [x] (count (filter identity (map (fn [b] (let [comp (map read-string (rest (clojure.string/split (str b) #\"\")))] (if (< b (apply + (map #(* % %) comp))) b))) x))))", "user": "51bfc1f0e4b0e49ef9037dd4"}, {"problem": 120, "code": "(fn [xs] \n  (letfn [(char->int [s]\n            (-> s str Integer.))\n          (int->digitseq [x]\n            (map char->int (str x)))\n          (sos [xs]\n             (reduce + (map * xs xs)))]\n    (count (filter #(> (-> % int->digitseq sos) %) xs))))", "user": "5566463ee4b0c656e3ff1831"}, {"problem": 120, "code": "(fn cnt [coll] \n  (count \n   (filter \n    (fn [n] \n      (< n (reduce + \n                   (map (comp #(* %1 %1) read-string str)\n                        (seq (str n)))))) coll)))", "user": "55306f9de4b076ab5578f814"}, {"problem": 120, "code": "(fn [y] (count\n          (reduce\n           (fn [a c]\n            (let [x (map {\\0 0 \\1 1 \\2 2 \\3 3 \\4 4 \\5 5 \\6 6 \\7 7 \\8 8 \\9 9 } (seq (str c)))]\n             (if (> (reduce #(+ %1 (* %2 %2)) 0 x)  c)\n              (conj a c)\n              a))) [] y)))", "user": "555883c5e4b0deb715856e2d"}, {"problem": 120, "code": "(fn [is]\n  (letfn [(squared-digits [i]\n            (apply + (map #(* (Integer/parseInt (str %)) (Integer/parseInt (str %)))\n                          (str i))))]\n    (count (filter #(< % (squared-digits %)) is))))", "user": "541709b0e4b01498b1a71a06"}, {"problem": 120, "code": "(fn square\n  [coll]\n  (count (filter true? (map #(< %1 %2) coll (map (fn [x]\n           (reduce #(+' %1 (* (- (int %2) 48) (- (int %2) 48))) 0 (seq (str x)))\n                        ) coll)))))", "user": "5594e0e3e4b0c79f6e1db95b"}, {"problem": 120, "code": "#(count (filter (fn [v] (< v\n                            (loop [n v res []]\n                              (if (zero? n)\n                                (reduce (fn [ret ne] (+ ret (* ne ne))) 0 res)\n                                (recur (quot n 10)\n                                       (conj res (rem n 10))))))) %))", "user": "554680cbe4b0a04f7929953e"}, {"problem": 120, "code": "(fn [coll]\n  (loop [s coll cnt 0]\n    (if (empty? s)\n      cnt\n      (recur\n        (rest s)\n        (if (< \n              (first s)\n              (apply + \n                (map (fn [n] (* n n)) (map (fn [n] (Character/getNumericValue n)) (str (first s)))))            ) \n           (inc cnt)\n           cnt)))))", "user": "55929e89e4b0604b3f94d58e"}, {"problem": 120, "code": "(fn [coll] (count (filter #(> (reduce (fn [acc e] (+ acc (apply * (repeat 2 (- (int e) (int \\0)))))) 0 (str %)) %) coll)))", "user": "55a74d46e4b09e57187da2a3"}, {"problem": 120, "code": "(fn [in-seq]\n  (count (filter #(> ((fn square-digit\n  [n]\n  (if (> n 0)\n    (+ ((fn [n] (* n n)) (rem n 10)) (square-digit (quot n 10)))\n    0\n    )\n) %) %) in-seq))\n)", "user": "5581a6dae4b05c286339e0fe"}, {"problem": 120, "code": "(fn [coll]\n  (let [ch2int #(- (int %) (int \\0))\n        sqr #(* % %)\n        sqri (fn [x] (reduce + (map #(sqr (ch2int %)) (str x))))]\n    (count (filter #(< (first %) (last %)) (map #(vector % (sqri %)) coll)))))", "user": "55205564e4b08d5046aa8a60"}, {"problem": 120, "code": "(fn [xs]\n  (count\n  \t(filter \n       (fn [n]\n         (< n\n     \t\t(\n             (fn [result n]\n         \t\t(if (= n 0) result\n             \t\t(recur (+ result (* (mod n 10) (mod n 10))) (quot n 10)))) 0 n))) xs)))", "user": "559b55d6e4b066d22e731f54"}, {"problem": 120, "code": "(fn [s]\n  (letfn [(pred [x]\n            (< x (->> x str (map (comp read-string str))\n                      (map #(* % %)) (reduce +))))]\n    (reduce #(if (pred %2) (inc %1) %1) 0 s)))", "user": "55ac07afe4b03311e7b7328f"}, {"problem": 120, "code": "(fn smaller-count [v]\n  (let [components (fn components [n]\n                     (if (zero? n)\n                       nil\n                       (cons (rem n 10) (lazy-seq (components (quot n 10))))))\n        square-sum (fn [n] (apply + (map #(* % %) (components n))))\n        f (fn [n] (if (< n (square-sum n)) 1 0))]\n    (apply + (map f v))))", "user": "55934bebe4b0c79f6e1db93b"}, {"problem": 120, "code": "(fn [numbers]\n    (->> numbers\n        (filter (fn [num]\n                  (< num (let [chars (map str (seq (str num)))]\n                            (->> chars\n                                 (map read-string)\n                                 (map #(* % %))\n                                 (apply + )\n\n                                 ))))\n                  )\n        (count)\n             )\n    )", "user": "55aa5f73e4b0988bba2ad94b"}, {"problem": 120, "code": "(fn [s] (count (filter (fn [x] (< x (reduce + (map #(Math/pow (- (int %) 48) 2)(Integer/toString x ))))) s )))", "user": "5576e78de4b05c286339e075"}, {"problem": 120, "code": "(fn p120 [coll]\n  (get\n   (frequencies \n          (map \n            #(< % (->> %\n                      (str)\n                      (seq)\n                      (map (fn [x]\n                             (Integer. (str x))))\n                      (map (fn [x]\n                             (apply * (repeat 2 x))))\n                      (apply +)\n                      ))\n           coll)) \n   true)\n  )", "user": "5400e918e4b0de5c41848619"}, {"problem": 120, "code": "(fn\n  [xs]\n  (let [sqrt #(* % %)\n        squared-sum (fn [n]\n                      (loop [sum 0 m n]\n                        (if (= 0 m)\n                          sum\n                          (recur (+ sum (sqrt (mod m 10))) (quot m 10)))))\n        ]\n    (->> xs\n         (map > (map squared-sum xs) )\n         (filter true?)\n         count)))", "user": "50ec409ce4b04edc33777045"}, {"problem": 120, "code": "(fn smaller-than-sum-of-squared-digs\n  [coll]\n  (letfn [(split-num-by-digits [x]\n              (if (< x 10) \n                (list x)\n                (map (fn [v] (- (int v) (int \\0))) ((comp vec str) x))))\n          (sum-of-squared [x] \n              (reduce + (map #(* % %) (split-num-by-digits x))))]\n      (count (filter #(< % (sum-of-squared %)) coll))))", "user": "5553b729e4b0deb715856e05"}, {"problem": 120, "code": "(fn [nums]\n  (count\n    (filter\n      (fn [n]\n        (< n\n           (apply +\n                  (map (comp #(* % %) read-string str)\n                       (str n))))) \n      nums)))", "user": "53571732e4b04ce2eb3ed275"}, {"problem": 120, "code": "(fn[x] (count (filter (fn[z] (< z (reduce + (map (fn[y] (* y y)) (map (fn[y] (- (int y) 48)) (vec (str z))))))) x)))", "user": "4f32135ae4b0d6649770a08e"}, {"problem": 120, "code": "(fn [cl] (->> cl (map (fn [v1]\n      (loop [v v1 r []]\n        (let [vm (mod v 10)] (if (zero? v) (< v1 (reduce + r))\n          (recur (long (/ v 10)) (conj r (* vm vm)))\n   ))))) (filter true?) count) )", "user": "55adf4d7e4b03311e7b732af"}, {"problem": 120, "code": "#(count (filter\n         (fn [x] (< x\n                  \t(reduce +\n                            (map\n                             (fn [d] (Math/pow (Integer/parseInt (str d)) 2))\n                             (seq (str x))))))\n         %))", "user": "55a5c3bee4b0acc240e3154e"}, {"problem": 120, "code": "(fn[r](count (filter (fn[d](< d (reduce #(let[n (Integer/valueOf (str %2))](+ %1 (* n n))) 0 (str d)))) r )))", "user": "555c6344e4b0b056612e224c"}, {"problem": 120, "code": "(fn [c] \n  (count \n   (filter \n    (fn [x] (< x (reduce + (for [s (str x) :let [s (Integer/parseInt (str s))]] (* s s)) )))\n   \tc\n    )))", "user": "55be39f9e4b01b9910ae2a06"}, {"problem": 120, "code": "(fn [s]\n  (->> (for [t s]\n         (->> t str (map identity) (map #(Character/digit % 10)) (map #(* % %)) (apply +) (#(< t %) ) ))\n    (filter identity)\n    (count))\n  )", "user": "55aa1637e4b0988bba2ad949"}, {"problem": 120, "code": "(fn [coll]\n    (letfn [(scd [n] (reduce + (map #(* % %) (map #(Integer/valueOf (str %)) (str n)))))]\n      (count (filter #(< (first %) (last %)) (map #(vector % (scd %)) coll)))))", "user": "5245e320e4b09dbe66b56177"}, {"problem": 120, "code": "(fn [col]\n    (count (filter (fn [y] (< y\n        (reduce + \n            (map (fn [x] (* (Integer/parseInt (str x)) (Integer/parseInt (str x)))) \n                (map identity (str y)))))) col)))", "user": "55975569e4b031d6649c9b8e"}, {"problem": 120, "code": "(fn s-o-s-o-d [s]\n  (let [digitize\n        (fn digitize [n]\n          (loop [n n\n                 ret ()]\n            (if (< n 1)\n              ret\n              (recur (quot n 10) (conj ret (rem n 10))))\n            ))\n\n        s-o-s\n        (fn s-o-s [s]\n          (reduce + (map #(* % %) s)))\n        ]\n    (count (filter (fn [[k v]] (< k v))\n                   (zipmap s (map #(s-o-s (digitize %)) s)))))\n  )", "user": "54a627bce4b09f271ff37c83"}, {"problem": 120, "code": "(fn [x]\n  (reduce\n   (fn [a b]\n     (+ a\n        (if (> ((comp #(apply + %) (partial map #(* % %)) (partial map #(- (int %) (int \\0))) str) b) b) 1 0))) x))", "user": "55b107fee4b002ce9d5cbc2a"}, {"problem": 120, "code": "#(count (filter (fn [n] (< n (reduce + (map (fn [c] (let [i (- (int c) 48)] (* i i))) (str n))))) %))", "user": "55bfc39ee4b01b9910ae2a1a"}, {"problem": 120, "code": "(fn count-less-than-sum-sqrs [nums]\n  (let [digits (fn digits [num] (map #(- (int %) (int \\0)) (seq (str num))))\n        sum-sqr-digits (fn [num] (reduce + (map #(* % %) (digits num))))\n        less-than-sum-sqrs? (fn [num] (< num (sum-sqr-digits num)))]\n    (count (filter less-than-sum-sqrs? nums))))", "user": "55a1d7f6e4b0acc240e31519"}, {"problem": 120, "code": "(fn [s]\n  (letfn [(digitsSquared [n] \n            (->> n \n              str \n              seq \n              (map #(- (int %) (int \\0)))\n              (map #(* % %))\n              (reduce +)))]\n    (->> s (filter #(< % (digitsSquared %))) count)))", "user": "559454f2e4b0c79f6e1db952"}, {"problem": 120, "code": "(fn [xs]\n  (letfn [(f [x]\n            (< x (->> x str (map (comp #(* % %) read-string str)) (apply +))))]\n    (->> (map f xs) (remove false?) count)))", "user": "5416b4a2e4b01498b1a71a01"}, {"problem": 120, "code": "(fn [xs]\n  (letfn [(digits [n]\n            (when (pos? n)\n              (cons (rem n 10)\n                    (digits (quot n 10)))))\n          (dig-sq-sum [n]\n            (reduce + (map (fn [d] (* d d))\n                           (digits n))))]\n    (count (filter (fn [x]\n                     (< x (dig-sq-sum x)))\n                   xs))))", "user": "55c4e48be4b0e31453f649a7"}, {"problem": 120, "code": "(fn sum-squares [coll] (let [parse #(map read-string (re-seq #\"\\d\" (str %)))\n                               squares (map (fn [n] (reduce + (map #(* % %) (parse n)))) coll)]\n                           (reduce + (map #(if (> %1 %2) 1 0) squares coll))\n                           ))", "user": "55c10409e4b01b9910ae2a2c"}, {"problem": 120, "code": "(fn [xs]\n  (count\n   (filter\n    (fn [n]\n        (< n\n           (reduce +\n                   (map (fn [d]\n                            (let [int-d (read-string (str d))]\n                              (* int-d int-d)))\n                        (str n)))))\n    xs)))", "user": "549dfe40e4b0f3d1d8e70f9a"}, {"problem": 120, "code": "(fn my-filter\n  [xs]\n  (count (filter #(< % ((fn test\n                         [x]\n                         (let [re-x (str x)]\n                           (if (= (count re-x) 1)\n                             (Math/pow x 2)\n                             (+ (Math/pow (Integer/parseInt (str (first re-x))) 2) (test (Integer/parseInt (str (reduce str (rest re-x))))))))) %)\n                    ) xs)))", "user": "55b3c03ee4b01b9910ae2975"}, {"problem": 120, "code": "(fn count-smaller-than-sum-sq [coll]\n   (letfn [(smaller-than-sum-square-digits? [n]\n             (let [digits-array (map #(- (int %) (int \\0)) (str n))]\n               (< n (reduce + (map #(* % %) digits-array)))))]\n     (count (filter smaller-than-sum-square-digits? coll))))", "user": "54b817eee4b0ed20f4ff6e93"}, {"problem": 120, "code": "(fn [xs]\n  (letfn [(sq [n]\n            (apply + (map (fn [x] (let [y (read-string (str x))] (* y y)))\n                          (str n))))]\n    (reduce (fn [t v] (if (> (sq v) v) (inc t) t)) 0 xs)))", "user": "54dce62be4b024c67c0cf78b"}, {"problem": 120, "code": "(fn [coll] (count (for [x coll :when (< x (reduce + (map #(Math/pow (Character/getNumericValue %1) 2) (.toString x))))] x)))", "user": "54236ce1e4b01498b1a71ad1"}, {"problem": 120, "code": "(fn smaller\n  [k]\n  (loop [c k n 0]\n  (if (empty? c)\n    n\n    (recur (rest c) (loop [f (first c) sum 0]\n                      (cond\n                        (> sum (first c)) (inc n)\n                        (= f 0) n\n                        :else (recur (quot f 10)\n                               (+ sum  (* (rem f 10) (rem f 10))))\n                        ))))))", "user": "55c9bc1ee4b0e31453f649f1"}, {"problem": 120, "code": "(fn [x]\n  (count (filter\n           #(< %\n              (apply + (map (fn [x] (* (- (int x) 48) (- (int x) 48))) (str %))))\n           x)))", "user": "55c77070e4b0e31453f649d0"}, {"problem": 120, "code": "#(count (filter \n         (fn [v] (< v (->> v str seq\n                           (map (fn [d] (- (int d) (int \\0))))\n                           (map (fn [x] (* x x)))\n                           (reduce +))))\n         %))", "user": "55c20bd0e4b0e31453f64972"}, {"problem": 120, "code": "(comp \n count  \n (partial filter true?)\n (partial map (fn [x] (->> x\n                           str\n                           seq\n                           (map #(Character/digit % 10))\n                           (map #(* % %))\n                           (apply +)\n                           (< x)))))\n\n#_(fn [xs] (count (filter (fn [x] \n                            (< x \n                               (reduce + (map #(* % %) (map (comp read-string str) (str x)))))) xs)))", "user": "55cdc576e4b0e31453f64a1f"}, {"problem": 120, "code": "(fn [s]\n                                   (let [digits (fn [n] (map second \n                                                             (take-while #(not= [0 0] %) \n                                                                         (iterate (fn [[a b]] [(quot a 10) (rem a 10)]) \n                                                                                  [(quot n 10) (rem n 10)]))))]\n                                     (reduce (fn [acc elt]\n                                               (if (< elt (apply + (map #(* % %) (digits elt))))\n                                                 (inc acc)\n                                                 acc))\n                                             0\n                                             s)))", "user": "54cad2d5e4b057c6fda3a26c"}, {"problem": 120, "code": "(fn [s] (reduce + (map (fn [x] (if (> (reduce + (map (fn [a] (* a a)) (map bigint (re-seq #\"\\d\" (str x)))) ) x) 1 0)) s)))", "user": "55b0f5bfe4b002ce9d5cbc28"}, {"problem": 120, "code": "(fn [x]\n\t(letfn [(sum-square [n]\n             (reduce #(+ (* (Integer. %2) (Integer. %2)) %1) 0 (filter #(not= \"\" %) (clojure.string/split (str n) #\"\")))           \n                        )]\n  \t\t(count\n         (filter\n          (fn [a] (> (sum-square a) a))\n          x))))", "user": "552456e3e4b0882d96d091c2"}, {"problem": 120, "code": "(fn [xs]\n  (letfn [(digits [x]\n                  (loop [x x d ()]\n                    (if (zero? x) d\n                      (recur (quot x 10) (conj d (mod x 10))))))\n          (lts [x]\n               (< x (reduce + (map #(* % %) (digits x)))))]\n    (count (filter lts xs))))", "user": "55c68089e4b0e31453f649c4"}, {"problem": 120, "code": "(fn [s]\n(count (filter true? (map (fn [v]\n  (let [a (map #(- (int %) 48) (str v))\n      b (map #(* % %) a)\n      c (reduce + b)] (< v c))) s))))", "user": "541ddadbe4b01498b1a71a84"}, {"problem": 120, "code": "(fn [xs] (letfn [\n  (digits [x] (map #(Integer. (str %)) (str x)))\n  (sum [x] (reduce + (map #(* % %) (digits x))))]\n\n  (count (filter #(< % (sum %)) xs))))", "user": "55d5e80ee4b0e31453f64a91"}, {"problem": 120, "code": "(fn [coll]\n  (letfn [(g [n] (reduce + (map (comp #(* % %) #(- (int %) (int \\0))) (str n))))]\n    (count (filter #(< % (g %)) coll))))", "user": "4e6a4950535d8ccf87e9febf"}, {"problem": 120, "code": "(fn [l]\n  (letfn [(cal [n]\n               (reduce #(+ % (* %2 %2)) 0 (map #(- (int %) 48) (str n))))]\n    (count (filter #(< % (cal %)) l))))", "user": "55236ad6e4b0882d96d091b1"}, {"problem": 120, "code": "(fn [s]\n  (let [sq (fn [x]\n             (< x\n                (reduce #(+ %1 (* (Integer/parseInt (str %2)) (Integer/parseInt (str %2))))\n                        0 (.toString x))))]\n    (count (filter sq s))))", "user": "549c6792e4b0f3d1d8e70f8b"}, {"problem": 120, "code": "#(count \n  (filter (fn [n]\n            (<\n             n\n             (reduce\n              (fn [sum x]\n                (-> x\n                    int\n                    (- 48)\n                    (Math/pow 2)\n                    (+ sum)))\n              0\n              (str n)))) % ))", "user": "54722c55e4b094393f72dd74"}, {"problem": 120, "code": "(fn [xs] (loop [times 0 the-list xs]\n  (if (= 0 (count the-list))\n    times\n    (let [\n      first-item (first the-list) \n      calc (reduce + (map #(int (Math/pow % 2)) (map #(Integer/parseInt %) (map str (seq (str first-item))))))\n      ]\n      (if (< first-item calc)\n        (recur (inc times) (rest the-list))\n        (recur times (rest the-list))\n      )\n    )\n  )\n))", "user": "55d79b87e4b0e31453f64aa8"}, {"problem": 120, "code": "(fn [xs]\n  (letfn [(digits [n]\n    (if (zero? n) '(0)\n      (loop [x n result '()]\n        (if (zero? x)\n          result\n          (recur (quot x 10) (cons (rem x 10) result))\n        )\n      )\n    ))]\n\n    (count (filter\n      (fn [x]\n        (< x (apply + (map #(* % %) (digits x))))\n      )\n      xs))\n  )\n)", "user": "51f09f3de4b0274c496158d7"}, {"problem": 120, "code": "(fn p120 [v]\n  (let [nc (fn [n] (apply + (map #(* % %) (map #(read-string (str %)) (str n)))))\n        fc #(< % (nc %))]\n    (count (filter true? (map fc v)))))", "user": "54965534e4b0b312c081ff65"}, {"problem": 120, "code": "(fn [x]\n  (count (filter\n          (fn [i]\n            (< i (reduce + (map\n                            #(Math/pow (Integer/parseInt (str %)) 2)\n                            (seq (str i))))))\n          x)))", "user": "55dcb06ee4b050e68259b3b9"}, {"problem": 120, "code": "(fn [n]\n  (loop [[next-item & remainder :as to-process] n\n         counter 0]\n    (if (empty? to-process)\n      counter\n      (recur \n       remainder\n       (if (< next-item (reduce + (map (fn [x] (Math/pow (Integer/parseInt (str x)) 2)) (str next-item))))\n         (inc counter)\n         counter)))))", "user": "55d06bcbe4b0e31453f64a3a"}, {"problem": 120, "code": "(fn [c] \n  (count\n   (filter\n    (fn [z]\n      (>\n       (apply + (map #(let [x (-(int %) 48)] (* x x))(str z)))\n       z)\n      )\n    c)\n   )\n  )", "user": "55e1d34ae4b050e68259b421"}, {"problem": 120, "code": "(fn sum-sq [nums]\n  (letfn [(get-digits\n            ([num] (get-digits num []))\n            ([num coll]\n             (if (= 0 num)\n               coll\n               (recur (quot num 10) (cons (rem num 10) coll)))))]\n    (count\n     (filter #(apply < %)\n             (map\n              (fn [num]\n                [num (reduce + (map #(* % %) (get-digits num)))])\n              nums)))))", "user": "54f09599e4b024c67c0cf89d"}, {"problem": 120, "code": "(fn csd\n  [xs]\n  (let [digits (fn [x] (map #(Integer/parseInt (str %)) (str x)))\n        sqd    (fn [x] (apply + (map #(* % %) (digits x))))]\n    (count (filter #(< % (sqd %)) xs))))", "user": "5461dc79e4b01be26fd746a8"}, {"problem": 120, "code": "(fn [xs]\n  (count (filter \n          (fn [n]\n            (< n (reduce (fn [s x]\n                      (let [x (- (int x) 48)]\n                      (+ s (* x x))))\n                    0\n                    (str n)))\n            )          \n          xs)))", "user": "55c652dde4b0e31453f649bd"}, {"problem": 120, "code": "(fn [coll]\n   (letfn [(->seq [n]\n                  (map #(Integer/parseInt (str %)) (vec (str n))))\n           (calc [nseq]\n                 (reduce #(+ % (* %2 %2)) 0 nseq))]\n\n     (count (filter identity\n              (map #(->>\n                     (->seq %)\n                     (calc)\n                     (< %))\n                   coll)))\n     ))", "user": "55a372f1e4b0acc240e31537"}, {"problem": 120, "code": "(fn [ls]\n    (count (filter (fn [n]\n                     (< n (reduce + (map #(let [x (Integer. (str %))] (* x x))\n                                         (format \"%d\" n))))) ls)))", "user": "4f435ee8e4b0d7d3c9f3fd1f"}, {"problem": 120, "code": "(fn [a] \n    (count (filter (fn [x] (> (reduce + \n        (map #(* % %) \n             (map read-string \n                  (re-seq #\"\\d\" (str x))))) x)) a)))", "user": "55627de1e4b0c656e3ff17d9"}, {"problem": 120, "code": "(fn foo [numbers]\n  (letfn [(sum-of-sqare [number]\n                        (reduce + (map\n                                    (fn [c]\n                                      (let [digit (- (int c) (int \\0))]\n                                        (*\n                                          digit\n                                          digit)))\n                                    (str number))))]\n    (count\n      (filter\n        (fn [number]\n          (< number (sum-of-sqare number)))\n        numbers))))", "user": "55e6c3f5e4b050e68259b48c"}, {"problem": 120, "code": "(fn [l]\n  (count (filter \n          (fn [n]\n            (< n (apply + (map #(apply * (repeat 2 (- (int %) (int \\0)))) (seq (str n))))))\n          l)))", "user": "55d74e71e4b0e31453f64aa4"}, {"problem": 120, "code": "(fn [v] (count (filter (fn [n] (< n (reduce #(+ %1 (* %2 %2)) 0 (map #(- (int %) 48) (seq (str n)))))) v)))", "user": "55d1b565e4b0e31453f64a49"}, {"problem": 120, "code": "(fn func\n  [coll]\n  (let [number->digits \n        (fn [num]\n          (->> num str (map str) (map read-string)))\n        smaller?\n        (fn [i]\n          (< i (reduce + (map #(* % %) (number->digits i)))))]\n    (->> coll (map smaller?) (filter true?) count)))", "user": "55a62092e4b0acc240e31554"}, {"problem": 120, "code": "(fn [coll]\n  (reduce (fn [i v]\n            (let [sv (str v)\n                  sum (apply\n                       +\n                       (map (fn [vv]\n                              (let [vvv (- (int vv) 48)]\n                                (* vvv vvv))) sv))]\n              (if (< v sum)\n                (inc i)\n                i))) 0 coll))", "user": "51c1b644e4b0d204dbe2ca12"}, {"problem": 120, "code": "(fn [xs] \n  (letfn [(sum-sq-filter [n] \n    (let [digits (map #(- (int %)(int \\0)) (str n))\n          sum-squares (reduce #(+ %1 (* %2 %2)) 0 digits)]\n       (< n sum-squares)))]\n  (count (filter sum-sq-filter xs))))", "user": "55ecb2c0e4b0121d4835fdce"}, {"problem": 120, "code": "#(count \n  (filter \n    (fn [x] \n      (< x (reduce + (map (fn [x] (* x x)) (map read-string (map str (seq (str x))))))\n         )\n      ) \n    %)\n  )", "user": "55d42f78e4b0e31453f64a73"}, {"problem": 120, "code": "(fn [l]\n  (apply + (map (fn [x] (if\n                     (< x (apply + (map #(let [c (Character/digit % 10)] (* c c)) (str x))))\n                     1 0)) l)))", "user": "54864662e4b0e286459a11b8"}, {"problem": 120, "code": "(fn [coll] (count (filter true? (map #(< % ((fn [x] (loop [ n x sum 0]\n          (let [ r (* (mod n 10) (mod n 10)) ]\n            (if (> n 0 )\n              (recur (quot n 10) (+ sum r))\n              sum)\n            )\n          )\n\n         )\n         %\n         )\n         ) (seq coll)) ) ))", "user": "55d44dd6e4b0e31453f64a75"}, {"problem": 120, "code": "(fn [c]\n  (count\n   (filter (fn [x] (->> x\n                     (str)\n                     (map #(- (int %) 48))\n                     (map #(* % %))\n                     (reduce + 0)\n                     (< x)))\n           c)))", "user": "4f5eda39e4b0030a34fb2b56"}, {"problem": 120, "code": "(fn [nums]\n  (let [smaller-than-sum-of-squares?\n        (fn [i]\n          (->> i\n               str\n               (map #(Character/digit % 10))\n               (map #(* % %))\n               (apply +)\n               (< i)))]\n    (count (filter smaller-than-sum-of-squares? nums))))", "user": "55cb11e9e4b0e31453f649ff"}, {"problem": 120, "code": "(fn count-less-sum-square-digits [coll]\n  (letfn [\n          (sum-square-num-range [col]\n            (reduce + (map #(square-num %) col)))\n          (square-num [n]\n            (* n n ))\n          (digit-list [num]\n            (map char-to-num (str num)))\n          (char-to-num [c]\n            (- (int c) 48))\n          ]\n  (count (filter  #(true? %) (map #(< % (sum-square-num-range (digit-list %))) coll)))))", "user": "4ebbff41535dfed6da9c6d78"}, {"problem": 120, "code": "(fn smaller-than-square-digits [co]\n  (count \n    (filter \n      (fn [n] (< n (reduce \n                        #(let [b (- (int %2) (int \\0))] \n                        (+ %1 (* b b))) 0 (str n)) )) co)))", "user": "558bdcefe4b0277789237633"}, {"problem": 120, "code": "(fn fuck[arr]\n     (let [jg (fn[i]\n               (< i (reduce #(+ %1 (* %2 %2)) 0 (map #(- (int %) 48) (str i)))))]\n                 \n                 (count (filter jg arr))\n                 ))", "user": "54d05a9de4b0e8a36923e5c7"}, {"problem": 120, "code": "(fn [n]\n (->>  n\n      (map str)\n      (map (fn [x] (map #(- (int %) 48) x)))\n      (map (fn [x] (map #(Math/pow % 2) x)))\n      (map #(reduce + %))\n      (map < n)\n      (filter true?)\n       count\n ))", "user": "559067ace4b0277789237670"}, {"problem": 120, "code": "(fn allsumd [aseq] (if (empty? aseq) 0 (if (true?\n((fn issumdg [anum] (> \n((fn sumd [thenum] (reduce + (for [x (range 0 thenum) :let [y (apply * (repeat x 10))] :while (> thenum y)] (let [curr (quot (mod thenum (* 10 y)) y)] (* curr curr))))) anum)\nanum)) (first aseq))) (+ 1 (allsumd (rest aseq))) (allsumd (rest aseq)))))", "user": "55f75c6be4b06e875b46cea9"}, {"problem": 120, "code": "(fn aaa [coll]\n  (count (filter (partial apply >) (map list (map (comp\n                               (fn sum-squared [c]\n                                 (reduce #(+ %1 (* %2 %2)) 0 c)\n                                 )\n                               (fn digits [num]\n                                 (loop [rm num\n                                        accum '(0)]\n                                   (if (zero? rm)\n                                     accum\n                                     (recur (unchecked-divide-int rm 10) (conj accum (rem rm 10)))\n                                     )\n                                   )\n                                 )\n                               ) coll) coll)))\n  )", "user": "55f06183e4b06e875b46ce23"}, {"problem": 120, "code": "(letfn [(digits   [n] (map #(- (int %) (int \\0)) (str n)))\r\n        (smallish [n] (< n (apply + (map #(* % %) (digits n)))))]\r\n  #(count (filter smallish %)))", "user": "55d0e76ae4b0e31453f64a40"}, {"problem": 120, "code": "(fn [ns]\n  (->> ns\n       (filter\n        #(->> (str %)\n              (map (fn [d] (-> (str d)\n                               (biginteger)\n                               (.pow 2))))\n              (reduce +)\n              (< %)))\n       (count)))", "user": "553698fae4b09218d5f44fc0"}, {"problem": 120, "code": "(fn [c]\n  (count (filter (fn [n]\n    (< n (reduce + (map #(Math/pow (Character/getNumericValue %) 2) (str n)))))\n                 c)))", "user": "55f20e4be4b06e875b46ce40"}, {"problem": 120, "code": "#(loop [c %\n        r (first c)\n        sqc '()]\n   (if (empty? c)\n     (count sqc)\n     (recur (rest c)\n            (inc r)\n            (if (> \n                 (let [hund (/ (- r (mod r 100)) 100)\n                       ten (/ (- (mod r 100) (mod r 10)) 10)\n                       unit (mod r 10)]\n                   (+ (* hund hund) (* ten ten) (* unit unit)))\n                 r)\n                       (conj sqc r)\n                       sqc)\n            )))", "user": "55eeeb81e4b0121d4835fdf7"}, {"problem": 120, "code": "(fn [coll]\n  (reduce (fn [cnt num]\n            (let [dig (map #(Character/getNumericValue %) (str num))]\n              (if (< num (reduce #(+ %1 (* %2 %2)) 0 dig))\n                (+ 1 cnt)\n                cnt)))                     \n          0 coll))", "user": "53573d70e4b04ce2eb3ed278"}, {"problem": 120, "code": "(fn [cols]\n  (count\n   (filter\n    #(loop [acc 0 n %]\n       (let [q (quot n 10)\n             m (mod n 10)\n             acc' (+ acc (* m m))]\n         (if (= 0 q)\n           (< % acc')\n           (recur acc' q))))\n    cols)))", "user": "55d5ee3fe4b0e31453f64a92"}, {"problem": 120, "code": "#(count (filter \n  (fn [x]    \n    (< x (reduce + (map (fn [c] (let [n (Integer/parseInt (str c))] (* n n))) (str x)))))\n  %))", "user": "55fee5e4e4b00f4cabc5765a"}, {"problem": 120, "code": "(fn [coll]\n  (letfn [(digits [number] (when-not (zero? number) (lazy-cat [(mod number 10)] (digits (quot number 10)))))\n          (squared-digits [digits-coll] (apply + (map #(* % %) digits-coll)))]\n    (->> coll \n         (map #(list % (squared-digits (digits %))))\n         (filter #(apply < %))\n         count\n         )\n    )\n  )", "user": "55fe7e15e4b00f4cabc57651"}, {"problem": 120, "code": "(fn filter-smaller-than-sum-of-squared-digits [xs]\n  (let [digits (fn digits [x & acc] (if (< x 10) (conj (or acc []) x) (recur (int (/ x 10)) (conj (or acc '()) (rem x 10)))))]\n    (count (filter (fn [x] (< x (reduce + (map #(* % %) (digits x))))) xs))))", "user": "55fb58b2e4b0f488688e0661"}, {"problem": 120, "code": "(fn sumSquares [x]\n  (count\n  (filter\n    (fn [z] (< z \n             ; reduce sequences of digits into sum of squares\n             (reduce                 \n                (fn fxn1 [b c] (+ b (* c c))) 0   \n                ;awkwardly convert single int into sequence of its digits\n                (map (fn fxn2 [y] (Integer/parseInt (str y))) (seq (str z)))\n             )                 \n            )\n    )\n    x\n  )\n  )\n)", "user": "55d35a01e4b0e31453f64a63"}, {"problem": 120, "code": "(fn [xs]\n  (letfn\n    [(number-digits [n] (map (comp read-string str) (str n)))\n     (sum-of-digits-squared [n] (reduce #(+ % (* %2 %2)) 0 (number-digits n)))]\n    (reduce #(if (< %2 (sum-of-digits-squared %2)) (inc %) %) 0 xs)))\n\n\n; first solution\n#_(fn [xs]\n  (letfn\n    [(number-digits [n] (map #(Character/digit % 10) (str n)))\n     (sum-of-digits-squared [n] (reduce #(+ % (* %2 %2)) 0 (number-digits n)))]\n    (reduce #(if (< %2 (sum-of-digits-squared %2)) (inc %) %) 0 xs)))", "user": "55e7d06ee4b050e68259b496"}, {"problem": 120, "code": "(fn [x] (count \n   (filter \n    (fn [current] \n      (< current (reduce + (map (comp #(* % %) read-string str) (seq (str current)))))) (seq x))))", "user": "560039cce4b04bb52996e162"}, {"problem": 120, "code": "(fn [coll]\n   (count \n     (filter \n       (fn [c] (< c \n                  (reduce + \n                          (map \n                            #(* (Integer/parseInt (str %)) (Integer/parseInt (str %))) \n                            (str c) )\n                          )))\n       coll)))", "user": "55f8b32ae4b03cbcff9738ba"}, {"problem": 120, "code": "(fn [c] \n  (count \n    (filter \n      (fn [el] \n         (< el \n            (reduce #(+ %1 (* %2 %2)) 0\n                    (map #(- (int %1) (int \\0)) (str el))     \n            )\n         )\n      )  c\n    )\n  )\n)", "user": "55eeb37ae4b0121d4835fdf3"}, {"problem": 120, "code": "(fn [ns]\n  (let [sods (fn [n]\n               (loop [n n r 0]\n                 (if (zero? n)\n                   r\n                   (let [d (rem n 10)]\n                     (recur (quot n 10) (+ r (* d d)))))))]\n    (count (filter #(< % (sods %)) ns))))", "user": "53576356e4b04ce2eb3ed27a"}, {"problem": 120, "code": "(fn [l]\n  (let [sd (fn [n]\n             (loop [c n\n                    sum 0]\n               (if (= c 0)\n                 sum\n                 (recur (int (/ c 10)) (+ sum (* (rem c 10) (rem c 10)))))))]\n             \n  (count \n   (filter \n    #(< % (sd %))\n    l))))", "user": "56051095e4b08b23635d3162"}, {"problem": 120, "code": "(fn [coll]\n   (let [->sum-of-squared (fn [num]\n                            (reduce\n                              (fn [acc x]\n                                (+ acc (Math/pow (Double/parseDouble (str x)) 2)))\n                              0\n                              (str num)))\n         <-ss?            (fn [num]\n                            (when (< num (->sum-of-squared num))\n                              true))]\n     (count (keep <-ss? coll))))", "user": "554bd33ce4b0a04f7929959a"}, {"problem": 120, "code": "(fn [coll]\n    (let [sum-sqr-digits (fn [str-num]\n                           (->> str-num\n                                (map #(Character/digit % 10))\n                                (reduce #(+ % (* %2 %2)) 0)))]\n      (reduce #(if (> (sum-sqr-digits (str %2)) %2)\n                 (inc %) %) 0 coll)))", "user": "532f8569e4b019098a6f8b4f"}, {"problem": 120, "code": "reduce\n#(+ %1 (if (>\n            (apply + (map (fn [char-int]\n                            (let [num (- (int char-int) (int \\0))]\n                              (* num num)))\n                          (str %2))) %2) 1 0)) 0", "user": "532ecd44e4b019098a6f8b49"}, {"problem": 120, "code": "(fn [xs]\n  (let [digits (fn [n]\n                 (loop [n n\n                        acc '()]\n                   (if (zero? n)\n                     acc\n                     (recur (quot n 10) (cons (mod n 10) acc)))))\n        sumsqdigits (fn [n]\n                      (reduce + (map #(* % %) (digits n))))]\n\n    (count (filter #(< % (sumsqdigits %)) xs))))", "user": "4ff24a1ae4b0678c553fc337"}, {"problem": 120, "code": "(fn[s](\n          count(filter (fn[n](< n\n                              (reduce\n\t                              (fn[a b](+ a (* b b) ))\n\t                              0\n\t                              (map (fn[c](- (int c) 48)) (seq (str n)))\n                              )\n                      \n                               )) s\n               )))", "user": "56039843e4b04bb52996e1be"}, {"problem": 120, "code": "(fn [xs]\n    (let [sum-squares (fn [n]\n                        (->> n (str)\n                             (seq)\n                             (map #(- (int %) (int \\0)))\n                             (reduce #(+ %1 (Math/pow %2 2)) 0)))]\n      (->> xs\n           (filter #(< % (sum-squares %)))\n           (count))))", "user": "560e9a2de4b05f002753df52"}, {"problem": 120, "code": "(fn [a]\n  (count\n    (filter \n      (fn [n] (< n ((fn [digits] (apply + (map (fn [x] (* x x)) digits))) ((fn [val] (map (fn [x] (- (int x) 48)) (seq (.toString val)))) n))))\n      a)))", "user": "554756b8e4b0a04f79299549"}, {"problem": 120, "code": "(fn [coll] \n  (let [explode-number-to-digits (fn [n] (map #(Character/digit % 10) (str n)))]\n  (count \n   (filter \n      (fn [n] \n          (> (reduce + (map #(* % %) (explode-number-to-digits n) )) n )) \n      coll)\n  ))\n)", "user": "55f2c898e4b06e875b46ce4b"}, {"problem": 120, "code": "(fn sum-sqr[sq]\n  (count (for [x sq\n               :when (< x (apply + (map #(Math/pow (- (int %) 48) 2) (into [] (str x)))))]\n           x)))", "user": "5545477fe4b0a04f79299531"}, {"problem": 120, "code": "(fn [coll]\n  (let [sum_sq_dig (fn [x] (reduce #(+ %1 (* %2 %2)) 0 (map #(-> % str read-string) (seq (.toString x)))))]\n    (count (filter #(< %1 (sum_sq_dig %1)) coll))))", "user": "55f6f1d3e4b06e875b46cea0"}, {"problem": 120, "code": "(fn [xs] \n  (count (filter (fn [x] (< x (reduce + (map (comp #(* % %) read-string str) (str x))))) xs)))", "user": "548b8a50e4b0e286459a11ff"}, {"problem": 120, "code": "(fn [x]\n  (count (filter\n          (fn [y] \n            (< y\n               (reduce + (map #(apply * (repeat 2 (Integer/parseInt (str %)))) (str y)))))\n          x)))", "user": "4de77a0a535d08e6dec9fdfa"}, {"problem": 120, "code": "(fn sol-n [li]\n  (->> li\n       (filter (fn [i] (let [digits (map #(Integer/valueOf (str  %)) (str i))]\n                         (< i (reduce + (map #(* % %) digits))))))\n       (count)))", "user": "5619a388e4b053970a773afc"}, {"problem": 120, "code": "(fn countsumof [x]\n  (let [sumof? (fn sumof? [x]\n                (let [sqr (fn sqr\n                        [x]\n                        (* x x))\n                      digit (fn digit\n                              [d]\n                              (map read-string (map str (str d))))]\n                  (if (< x (reduce + (map sqr (digit x))))\n                    true\n                    false)))]\n    (count (filter sumof? x))))", "user": "55d9743ae4b0e31453f64aca"}, {"problem": 120, "code": "(fn wf [sq]\n\t(count (filter \n\t\t(fn [x]\n\t\t\t(< x (apply + (map #(* (Character/digit % 10) (Character/digit % 10)) (str x))))\n\t\t)\n\tsq)\n\t)\n)", "user": "5559b443e4b0deb715856e3c"}, {"problem": 120, "code": "#(condp = %\n (range 10) 8\n (range 30) 19\n (range 100) 50\n (range 1000) 50)", "user": "5585aa48e4b001b0851d7510"}, {"problem": 120, "code": "(fn sum-sqr-digits [xs]\n  \"#120\"\n  (count (remove false? (for [n xs]\n                    (->> (map (comp read-string str) (seq (str n)))\n                         (map #(* % %))\n                         (reduce +)\n                         (< n)\n                    )))))", "user": "4f6ba7bce4b07046d9f4efb0"}, {"problem": 120, "code": "(fn [xs]\n  (let [sum-sq-digits (fn [x]\n                        (let [digits (map int (str x))\n                              zero-dig (int \\0)\n                              nums (map #(- % zero-dig) digits)\n                              num-sqd (map #(* % %) nums)]\n                          (reduce + num-sqd)))]\n    (count (filter #(< % (sum-sq-digits %)) xs))))", "user": "5573ffb5e4b0aa18f790f3fd"}, {"problem": 120, "code": "(fn [s](->> s\n \t(filter (fn [x](->> x \n      (iterate #(quot % 10)) \n      (take-while #(< 0 %)) \n      (map #(mod % 10)) \n      (map #(* % %)) \n      (apply +)\n      (< x))))\n     (count)\n))", "user": "5603c31fe4b04bb52996e1c1"}, {"problem": 120, "code": "(fn [xs]\n    ( letfn [(square-sums [num]\n                            (reduce + (map\n                                       #(int ( Math/pow (- (int %) (int \\0)) 2))\n                                       (seq (str num)))))]\n      (count (filter #(< % (square-sums %)) xs)) )\n    )", "user": "4f5e5975e4b0030a34fb2b4d"}, {"problem": 120, "code": "(fn foo [s]\n  (letfn [(digits [i] (->> i str (map #(Integer/parseInt (str %)))))\n          (sqrsum [x] (->> x (map #(* % %)) (reduce +)))]\n    (->> s (filter #(< % (sqrsum (digits %)))) count)))", "user": "561ba3e5e4b073c65b0ce3eb"}, {"problem": 120, "code": "(fn  [numbers]\n  (let [\n        get-digits (fn [number] (map #(- (int %) (int \\0)) (str number)))\n        sq-digits (fn [digits] (map #(* % %) digits))\n        sum-digits (fn [squares] (reduce + squares))\n        sum-digits-of-number (fn [number] (->> (get-digits number) (sq-digits) (sum-digits)))\n        my-filter (fn [numbers] (filter #(< % (sum-digits-of-number %)) numbers))\n        ]\n    (count (my-filter numbers))))", "user": "56011393e4b04bb52996e178"}, {"problem": 120, "code": "(fn [s]\n  (letfn [(digits [x]\n                  (->> (str x)\n                       (map #(-> (str %) (Integer/parseInt 10)))))\n          (square [x] (* x x))]\n    (->> s\n         (filter #(< % (apply + (map square (digits %)))))\n         count)))", "user": "561ca2eae4b064ca9f4b169b"}, {"problem": 120, "code": "(letfn [(to-digits [integer] \n          (map #(Integer/parseInt (str %))\n                        (str integer)))\n        (smaller-than-sum-of-squares-of-digits? [integer]\n          (< integer\n             (reduce + (map #(* % %) (to-digits integer)))))]\n  (fn [seq-of-ints]\n    (count (filter smaller-than-sum-of-squares-of-digits?\n                   seq-of-ints))))", "user": "516385cee4b055933a9ca02d"}, {"problem": 120, "code": "(fn f [xs]\n  (letfn [(k [x] (* x x))\n          (m [x] (k (mod x 10))) \n          (q [x] (s (quot x 10)))\n          (s [x] (if (< x 10) (k x) (+ (m x) (q x))))\n          (t [x] (< x (s x)))\n          (f [s] (filter t s))\n          (c [s] (count (f s)))]\n    (c xs)))", "user": "55b1e9e7e4b0da326a65cf74"}, {"problem": 120, "code": "(fn [vals] (letfn \n       [(dec-digit-vals [dec-val] (map #(- (int %) 48) (str dec-val)))\n        (sum-of-squares [vals] (apply + (map #(* % %) vals)))\n        (cmp-sos [val] (< val (sum-of-squares (dec-digit-vals val))))\n        (count-cmp-sos [vals] (count (filter true? (map cmp-sos vals))))]\n  (count-cmp-sos vals)))", "user": "550e52dbe4b06e50f9beb165"}, {"problem": 120, "code": "(fn [tab]\n (letfn \n   [(red [i] (if (zero? i) 0\n     (+ (Math/pow (mod i 10) 2) (red (quot i 10)))))]\n    (->> tab\n         (filter #(< % (red %)))\n         count)\n   )\n   )", "user": "55e8a85be4b0121d4835fd98"}, {"problem": 120, "code": "(fn [seq]\n        (-> (fn [item]\n                    (if (> 10 item)\n                      (< item (* item item))\n                      (< item (apply + (map (comp #(* % %) read-string str first)\n                                            (split-at 1 (str item)))))))\n              (filter seq)\n              count))", "user": "5410499de4b01498b1a719a6"}, {"problem": 120, "code": "(fn lssm [col]\n (let [sum_sq (fn [n](loop [sum 0, n n]\n                   \t  (if (= n 0) sum\n                       (recur (+ sum (* (rem n 10) (rem n 10)))\n                              (quot n 10)))))]\n    (count (filter (fn [x] (> (sum_sq x) x)) col))))", "user": "54b54d1be4b05787c3b1639c"}, {"problem": 120, "code": "(fn my-count [col]\n  (count\n   (filter (fn [i]\n             (let [chars (seq (str i))\n                   digits (map #(- (int %) (int \\0)) chars)\n                   sq-sum (reduce #(+ %1 (* %2 %2)) 0 digits)]\n               (< i sq-sum)))\n           col)))", "user": "561d23e3e4b064ca9f4b16a5"}, {"problem": 120, "code": "(fn [nums]\n  (let [num->digits (fn [x]\n                      (->> x\n                           str\n                           (map str)\n                           (map #(Integer/parseInt %))))\n        sum-square-digits (fn [digits]\n                            (->> digits\n                                 (map #(* % %))\n                                 (reduce +)))]\n    (->> nums\n         (map (juxt identity (comp sum-square-digits num->digits)))\n         (filter (partial reduce <))\n         count)))", "user": "5629dfaae4b00e49c7cb4813"}, {"problem": 120, "code": "(fn [s]\n    (letfn \n     [(digits [x]\n\t      (map #(Character/digit % 10) (seq (str x))))\n      (compd [x]\n\t     (reduce + (map #(* % %) (digits x))))\n      ]\n     (count (filter #(< % (compd %)) s))))", "user": "55f09e7be4b06e875b46ce28"}, {"problem": 120, "code": "(fn [s]\n  (count (filter (fn [x]\n                   (let [digits (map #(- (int %) (int \\0)) (str x))\n                         sum-sq (reduce + (map #(* % %) digits))]\n                     (< x sum-sq)))\n                 s)))", "user": "54d000c7e4b018d918be98d7"}, {"problem": 120, "code": "(fn [S] (count (filter (fn [n] (< n (reduce + (map #(let [d (- (int %) 48)] (* d d)) (str n))))) S)))", "user": "55f6fe09e4b06e875b46cea2"}, {"problem": 120, "code": "(fn [coll]\n  (letfn \n    [(get-digits \n      [n]\n      (if (< n 10)\n        (list n)\n        (cons (rem n 10) (get-digits (quot n 10)))))]\n    (count (filter (fn [x] (> (reduce #(+ %1 (* %2 %2)) 0 (get-digits x)) x)) coll))))", "user": "55c0afa5e4b01b9910ae2a27"}, {"problem": 120, "code": "(fn [xs]\n  (count (filter (fn [n]\n            (let [to-i #(Integer/parseInt (str %))\n                  sq #(* % %)\n                  digit-sum (apply + (map (comp sq to-i) (str n)))]\n              (< n digit-sum))) xs)))", "user": "53fcd574e4b0de5c418485d9"}, {"problem": 120, "code": "(fn [xs]\n  (let [ss (fn [i] (->> i str seq\n                        (map #(- (int %) (int \\0)))\n                        (map #(* % %)) (reduce +)))]\n    (->> xs\n         (filter #(< % (ss %)))\n         (count))))", "user": "559a9a3de4b066d22e731f45"}, {"problem": 120, "code": "(fn ssd[l]\n  (letfn [(happify[n]\n                  (apply + (map #(* % %) (map #(Integer/parseInt %) (rest (clojure.string/split (str n) #\"\"))))))]\n    (count (filter #(> (happify %) %) l))))", "user": "5626447fe4b00e49c7cb47bd"}, {"problem": 120, "code": "(fn [coll] \n  (count\n    (filter true?\n      (map (fn [n] \n             (> ((fn [x]\n                  (reduce + (loop [x x\n                                   di []]\n                              (if (< x 10)\n                                (conj di (* x x))\n                                (let [m (mod x 10)] \n                                  (recur (/ (- x m) 10) (conj di (* m m)))))))) n)\n                n)) \n                   coll))))", "user": "504f0c9ce4b0e7ad84dbc4b2"}, {"problem": 120, "code": "(fn\n  [col]\n  (let [num2digit (fn [x]\n                    (->> (str x)\n                         (seq)\n                         (map str)\n                         (map read-string)))\n        sqdigit (fn [x]\n                  (->> (num2digit x)\n                       (map #(* % %))\n                       (reduce +)))\n        st-sqdigit? (fn [x]\n                      (if (< x (sqdigit x))\n                        true\n                        false))]\n    (count (filter st-sqdigit? col))))", "user": "55bf6dbce4b01b9910ae2a12"}, {"problem": 120, "code": "(fn [se]\n    (count (filter (fn [num] (< num (->> (str num)\n                                         (map (comp #(- % 48) int))\n                                         (map #(* % %))\n                                         (apply +)))) se)))", "user": "56018dd4e4b04bb52996e18f"}, {"problem": 120, "code": "(fn smaller-than-sd [l]\n  (let [sd \n        (fn sd [x]\n          (if (= (unchecked-divide-int x 10) 0) (* x x)\n            (+ (* (rem x 10) (rem x 10)) (sd (unchecked-divide-int x 10)))))]\n  (count (filter #(< % (sd %)) l))))", "user": "56278266e4b00e49c7cb47d3"}, {"problem": 120, "code": "(fn [coll]\n  (let [digits         (fn [n] (for [c (str n)] (Integer/parseInt (str c))))\n        sum-of-squares (fn [digits] (reduce + (map #(* % %) digits) ))\n        sums           (fn [coll] (for [n coll] [n (sum-of-squares (digits n))]))\n        bigger         (fn [coll] (map #(< (first %) (second %)) coll))\n        ]\n        ;(count (result (sums coll)))\n        (count (filter true? (bigger (sums coll))))\n    ))", "user": "5474666ae4b0c51c1f4d7288"}, {"problem": 120, "code": "(fn sm [coll]\n  (count (filter true? (map (fn smallo [x] \n    (< x (apply + (map #(Math/pow % 2) ((fn digits [x]\n    (if (< x 10)\n      [x]\n      (conj (digits (quot x 10)) (rem x 10)))) x))))) coll))))", "user": "55ed9108e4b0121d4835fddc"}, {"problem": 120, "code": "(fn [xs]\n  (count\n    (filter\n      (fn [x]\n        (< x\n           (reduce +\n                   (map #(let [d (Character/digit % 10)]\n                           (* d d))\n                        (str x)))))\n      xs)))", "user": "562cd94ee4b0a45d2ff83015"}, {"problem": 120, "code": "(fn [coll]\n  (count (filter (fn [x]\n  (< x (apply + (map #(* % %) (map #(- (int %) (int \\0)) (seq (str x))))))) coll)))", "user": "561a1af6e4b053970a773b02"}, {"problem": 120, "code": "(fn [c]\n  (let [component-digits (fn [n] (map #(Integer. %) (map str (seq (str n)))))\n        square-sum (fn [digits] (apply + (map #(* % %) digits)))]\n    (count (filter #(< % ( square-sum (component-digits %))) c))))", "user": "562e8b2be4b0ab312c17ebbb"}, {"problem": 120, "code": "(fn F [int-coll]\n  (let [f (fn [i] (reduce + (map (comp #(* % %) #(Character/digit % 10)) (str i))))]\n    (count (filter #(< % (f %)) int-coll))))", "user": "4f856adfe4b033992c121c44"}, {"problem": 120, "code": "(fn [xs]\n  (let [sum-squared-digits (fn [x] (reduce #(+ % (* %2 %2)) 0 (map #(Integer. (str %)) (str x))) )]\n    (count (filter #(< % (sum-squared-digits %)) xs))))", "user": "522a01ade4b0590a43906ced"}, {"problem": 120, "code": "(fn \n  [coll]\n  (letfn [(sum-of-squares [num] (reduce + (map (fn [digit] (->> digit (str) (read-string) (#(* % %)))) (str num) )))]\n    (count (filter #(< % (sum-of-squares %)) coll))           \n  ))", "user": "563a30d7e4b0bfe05bf117f9"}, {"problem": 120, "code": "(fn [xs]\n   (let [pred?\n         (fn [n] (< n\n                    (reduce + (->> n\n                                   str\n                                   (map str)\n                                   (map read-string)\n                                   (map #(* % %))))))]\n     (count (filter pred? xs))))", "user": "518279abe4b0353c468deb65"}, {"problem": 120, "code": "(fn crazy\n  [s]\n  (let [digit-sequence\n         (fn digit-sequence\n          [n]\n            (if (< n 10)\n              (list n)\n              (let [quotient (quot n 10)]\n                (concat (digit-sequence quotient) (list (- n (* 10 quotient))))\n              )\n            )\n          )\n        \n          sum-of-squares\n          (fn [s] (reduce + (map * (digit-sequence s) (digit-sequence s))))\n        ]\n    (count (filter #(< % (sum-of-squares %)) s))\n  )\n)", "user": "56393681e4b0bfe05bf117f2"}, {"problem": 120, "code": "(fn [c]\n  (reduce\n    (fn [a e]\n      (if (< e (reduce + (map #(-> % int (- 48) (Math/pow 2)) (str e))))\n        (inc a) a))\n    c))", "user": "52bacfa8e4b07a9af57922d6"}, {"problem": 120, "code": "(fn puz-120 [c]\n  (letfn [(digits [n]\n                  (loop [n n\n                         dig '()]\n                    (if (zero? n) dig\n                      (recur (unchecked-divide-int n 10) (cons (mod n 10) dig)))))\n          (sum-of-square-digits [n]\n                                (apply + \n                                       (map #(* % %)\n                                            (digits n))))]\n    (count\n      (filter #(> (sum-of-square-digits %) %)c))))", "user": "53286f84e4b09d4e7a9b5505"}, {"problem": 120, "code": "(let [less-than-sum-squares?\n      (fn [x]\n        (let [sum-squares\n              (->> x\n                   str\n                   (map (comp read-string str))\n                   (map #(* % %))\n                   (reduce +))]\n          (< x sum-squares)))]\n  #(->> % (filter less-than-sum-squares?) count))", "user": "563cf9e5e4b0bfe05bf11844"}, {"problem": 120, "code": "(fn[c](count(filter(fn [n](< n (reduce #(+ %1 (* %2 %2))0(map #(Character/digit % 10)(str n)))))c)))", "user": "56347285e4b0bfe05bf117bc"}, {"problem": 120, "code": "(fn sq-digits [coll]\n  (->> coll\n      (map (fn [i] \n             [i (->> i\n                     str\n                     seq\n                     (map #(- (int %) (int \\0)))\n                     (reduce #(+ %1 (* %2 %2)) 0))]))\n      (filter #(< (% 0) (% 1)))\n      count))", "user": "55d29fb6e4b0e31453f64a59"}, {"problem": 120, "code": "(fn count-sd\n  [coll]\n  (->> coll\n       (map #(reduce (fn [sum ch] (+ sum (Math/pow (Integer/parseInt (str ch)) 2))) 0 (str %)))\n       (map #(if (< %1 %2) %1 false) coll)\n       (filter number?)\n       count))", "user": "4fc524aae4b081705acca37e"}, {"problem": 120, "code": "(fn [X] (count (filter true? (for [x X] (< x (reduce + (map #(* % %) (map #(- (int %) 48) (str x)))))))))", "user": "55fc07d3e4b0f488688e066e"}, {"problem": 120, "code": "(fn problem-120\n  [nums]\n  (let [sum-squared-digits (fn [n] (apply +\n                                          (map (comp #(* % %) #(- (int %) 48))\n                                               (str n))))]\n    (count (filter #(< % (sum-squared-digits %)) nums))))", "user": "563f1493e4b08d4f616f5ecf"}, {"problem": 120, "code": "(fn [xs]\n  (let [digits (fn [x] (map #(Integer. %) (re-seq #\"\\d\" (str x))))\n        ss     (fn [a] (reduce + 0 (map #(* % %) (digits a))))]\n    (count (filter true? (map < xs (map ss xs))))))", "user": "563ed73ae4b08d4f616f5ecb"}, {"problem": 120, "code": "(fn [s]   \n   (let [ssqd (fn ssqd [x] (if (zero? x) 0\n        (let [d (mod x 10) n (int (/ x 10))]\n           (+ (* d d) (ssqd n)))))]\n   \n   (count (filter #(< % (ssqd %)) s))))", "user": "564127a9e4b08d4f616f5ef3"}, {"problem": 120, "code": "(fn sum-square-digits [x]\n        (count (filter\n                 (fn [y] (< y\n                            ((fn ssd [z] (reduce + (map #(* % %) (map (fn [w] (- (int w) 48)) (str z)))))\n                              y)))\n                 x)))", "user": "5632b0a9e4b0bfe05bf117a8"}, {"problem": 120, "code": "(fn [coll]\n  (loop [out []\n         c coll]\n    (if (empty? c)\n      (count out)\n      (recur\n        (let [c2 (map #(Integer/parseInt (str %)) (str (first c)))]\n              (if (> (reduce + (map #(* % %) c2)) (first c))\n                (conj out (first c))\n                out))\n                (drop 1 c)))))\n\n; Here is another example without the recursion\n;(fn sum-square [coll]\n;  (let [digits (fn [n] (map #(- (int %) 48) (str n)))\n;        square #(* % %)\n;        sum-digits (fn [n] (reduce + (map square (digits n))))]\n;    (count (filter #(< % (sum-digits %)) coll))))", "user": "5633bb9de4b0bfe05bf117b4"}, {"problem": 120, "code": "(fn [coll]\n  (let [calc #(apply + (map (fn [c] (let [x (- (int c) (int \\0))] (* x x))) %))]\n    (count (filter #(< % (calc (str %))) coll))))", "user": "545e7ab0e4b01be26fd7467c"}, {"problem": 120, "code": "(fn [xs]\n  (->> xs\n       (map (fn [x] (->> x\n                         str\n                         (map #(- (int %) (int \\0)))\n                         (map #(* % %))\n                         (apply +)\n                         )))\n       (map #(< %1 %2) xs)\n       (filter identity)\n       count))", "user": "563772a9e4b0bfe05bf117d7"}, {"problem": 120, "code": "(fn [coll]\n  (count (filter (fn [num]\n                   (< num (apply + (map #(Math/pow (- (int %) 48) 2) (str num)))))\n                 coll)))", "user": "562cb7cfe4b0a45d2ff83009"}, {"problem": 120, "code": "(fn [s]\n(count (filter #(< %1 (reduce +  (map (fn [x] \n                  (let [i (- (int x) 48)] \n                    (* i i))) \n                (str %1)))) s)))", "user": "56102f50e4b05f002753df6b"}, {"problem": 120, "code": "(fn [c] (count (filter #(< % (apply + (map (fn [v] (Math/pow (-> v str read-string) 2)) (str %)))) c)))", "user": "54126d0ce4b01498b1a719d5"}, {"problem": 120, "code": "(fn foo [a-seq]\n   (count (filter (fn [x] \n          (< x((fn ssq [m]\n   (reduce + (map (fn [a] (* a a))\n \n ((fn components [n]\n  (loop [n n res '()]\n    (if (zero? n)\n      res\n      (recur (/ (- n (rem n 10)) 10) (cons (rem n 10) res))))) m))))   x))) a-seq)))", "user": "563d12f9e4b0bfe05bf11845"}, {"problem": 120, "code": "(fn sum-of-squares [num-seq]\n  (loop [num-seq num-seq\n         counter 0]\n    (if (empty? num-seq)\n      counter\n      (if ((fn greater-than-sum [x]\n             (< x (->> x\n                       str\n                       (into [])\n                       (map str)\n                       (map read-string)\n                       (map #(* % %))\n                       (reduce +)))) (first num-seq))\n        (recur (rest num-seq) (inc counter))\n        (recur (rest num-seq) counter)))))", "user": "558378dce4b05c286339e115"}, {"problem": 120, "code": "(fn [s]\n  (count\n        (filter \n         (fn [n] \n           (> \n            (reduce + \n                    (map #(* % %) \n                         (map \n                          (comp read-string str) \n                          (str n)))) \n            n))\n         s)))", "user": "541ef7e2e4b01498b1a71a92"}, {"problem": 120, "code": "(fn sum-squares\n  [& args]\n  (loop [pointer (first args) acc 0]\n    (if (empty? pointer) \n      acc \n      (let [p (str (first pointer))\n            value (read-string (str p))\n            sum-o-squares (apply + (map #(* (read-string (str %)) (read-string (str %))) p))\n            ]\n        (recur (rest pointer) (if (> sum-o-squares value) (inc acc) acc)))\n      )\n    )\n  )", "user": "5564709ee4b0c656e3ff1807"}, {"problem": 120, "code": "(fn [coll]\n    (count (filter (fn [n] \n                     (< n ((fn [n] \n                             (reduce + (map (comp (fn [x] \n                                                    (reduce * (repeat 2 x))) \n                                                  bigint \n                                                  str) \n                                            (str n)))) n))) \n                   coll)))", "user": "564583f0e4b0284900eef607"}, {"problem": 120, "code": "(fn [coll]\n  (count (filter #(< % (reduce + (map \n                                  (fn [d]\n                                    (let [n (- (int d) (int \\0))]\n                                      (* n n))) (str %)))) coll)))", "user": "564b495de4b0284900eef667"}, {"problem": 120, "code": "(fn square-of-digit [l]\n\n  (let [f (fn [x] (reduce + (map (comp #(* % %) #(Character/digit % 10))\n                              (seq (str x)))))\n        g #(< % (f %))\n        ]\n    (count (filter g l))\n    )\n  )", "user": "563b9acbe4b0bfe05bf11827"}, {"problem": 120, "code": "#(count \n  (filter \n   (fn [z] (< (first z) (last z))) \n   (map \n    (fn [n] \n      [n (apply + (map (fn [s] (let [z (Character/digit s 10)] (* z z))) (str n)))]) \n    %)))", "user": "5578f292e4b05c286339e08f"}, {"problem": 120, "code": "(fn [input]\n   (let [break-down (fn [in]\n                      (map (comp #(Integer. %) str )  (str in)))\n         square #(* % %) ]\n     (count (filter #(> (reduce + (map square (break-down %))) %)  input))))", "user": "546b24a0e4b00cfc9eacc166"}, {"problem": 120, "code": "(fn [coll] \n  (reduce + \n          (map #(if (< %1 %2) 1 0)\n               coll\n               (map\n               \t\t(comp\n                     \t(partial reduce +)\n                        (partial map\n                                 (comp \n                                  \t#(* % %)\n                                    read-string\n                                    str))\n                         seq\n                         str)\n                     coll))))", "user": "56561119e4b0f9d632dd849d"}, {"problem": 120, "code": "reduce \n(fn [r n]\n  (let [nseq (map #(Character/digit % 10) (seq (str n)))]\n\t(if (< n (reduce + (map #(* % %) nseq)))\n      (+ r 1)\n      r)\n))", "user": "5654d0e1e4b0f9d632dd848c"}, {"problem": 120, "code": "(fn [c]\n  (letfn [(small-square? [n]\n                        (< n\n                           (reduce #(+ % (-> %2 str read-string ((fn [a] (* a a)))))\n                                   0\n                                   (str n))))]\n    (reduce #(if (small-square? %2) (inc %) %) 0 c)))", "user": "563dfc02e4b0da801c4e4662"}, {"problem": 120, "code": "(fn [numbers]\n  (count (filter true? (map (fn [number] \n                         (< number (apply + (map #(* %1 %1) (map read-string (map str (seq (str number)))))))) numbers))))", "user": "5658d775e4b00d3155796114"}, {"problem": 120, "code": "(fn [l]\n    (let [divmod (fn [x n]\n               [(quot x n) (mod x n)])\n          d (fn [x]\n                (loop [ [i j] (divmod x 10)\n                        r 0]\n                      (if (= 0 i)\n                          (+ r (* j j))\n                          (recur (divmod i 10) (+ r (* j j))))))\n        ]\n\n        (count (filter identity (map #(< % (d %)) l)))))", "user": "55c49394e4b0e31453f6499e"}, {"problem": 120, "code": "(fn [c] (count\n          (filter\n           #(< % (reduce + ((fn f [n] (if (> n 0) (let [m (mod n 10)] (cons (* m m) (lazy-seq (f (int (/ n 10))))))))  %)))\n           c)))", "user": "564b1ff8e4b0284900eef663"}, {"problem": 120, "code": "(fn [col]\n  (let [sqr (fn [x] (* x x))\n        sum (fn [x] (let [digits (map #(Integer/parseInt (str %)) (seq (str x)))]\n                      (apply + (map sqr digits))))\n        sum-sqr? (fn [i] (< i (sum i)))]\n    (count (filter sum-sqr? col))))", "user": "564a560ae4b0284900eef654"}, {"problem": 120, "code": "(fn [s]\n  (letfn [(sum-digits \n           [n]\n           (reduce + 0 (map (fn [s]\n                              (let [n (- (int s) (int \\0))]\n                                (* n n))) (str n))))]\n    (count (filter #(< % (sum-digits %)) s))))", "user": "54ca93abe4b057c6fda3a264"}, {"problem": 120, "code": "(fn [ns] \n  (reduce \n    (fn [acc n] \n      (if (< n (reduce + (map #(* % %) (map #(Character/digit % 10) (str n))))) \n        (inc acc) \n        acc))     \n    0\n    ns))", "user": "5627d09ce4b00e49c7cb47db"}, {"problem": 120, "code": "(fn count-funny [coll]\n   (letfn [(digits [num]\n             (loop [n num, s []]\n               (if (= n 0)\n                 s\n                 (recur (quot n 10) (cons (rem n 10) s))\n                 )))\n           (is-funny? [num]\n             (->> (digits num)\n                  (map #(* % %))\n                  (reduce +)\n                  (< num)\n                  ))]\n     (count (filter is-funny? coll)))\n   )", "user": "564ecc9ee4b0284900eef6a1"}, {"problem": 120, "code": "(fn [xs]\n  (reduce + (map (fn [n]\n  (let [s (str n)\n        nums (map #(Character/digit % 10) s)\n        tot (reduce + (map #(* % %) nums))]\n    (if (> tot n)\n      1\n      0))) xs)))", "user": "5632d1b3e4b0bfe05bf117a9"}, {"problem": 120, "code": "(fn is-smaller[x] \n  (count (filter #(< % (apply + (map (fn [k] (int (Math/pow (read-string (str k)) 2))) (str %)))) x)))", "user": "5654cb2de4b0f9d632dd848b"}, {"problem": 120, "code": "(fn count-less-sum-square [s]\n  (letfn [(digitize [n] (if (= n 0) '() (cons (mod n 10) (lazy-seq (digitize (quot n 10))))))\n          (square [n] (Math/pow n 2))\n          (sum-square [ls] (apply + (map square (digitize ls))))]\n    (count\n      (filter\n        #(not= nil %)\n        (map #(if (< % (sum-square %)) % nil) s)))))", "user": "5654e024e4b0f9d632dd848d"}, {"problem": 120, "code": "(fn [S]\n  (let [dig {\\0 0 \\1 1 \\2 2 \\3 3 \\4 4 \\5 5 \\6 6 \\7 7 \\8 8 \\9 9}\n        digits (fn [n]  (map dig (seq (str n))))\n        sqr (fn [n] (* n n))\n        sum-dig-sqr (fn [n] (apply + (map sqr (digits n))))]\n    (count (filter #(< % (sum-dig-sqr %)) S)))\n  \n  )", "user": "5649615be4b0284900eef641"}, {"problem": 120, "code": "(fn sum-of-square-of-digits [ints]\n  (let [squared (fn [n] (* n n))\n        to-digits (fn [n] (map #(squared (Integer/parseInt (str %))) (seq (str n))))\n        summed (fn [xs] (reduce + xs))\n        pairs (map vector ints (map (comp summed to-digits) ints))\n        num-second-greater (reduce (fn [acc [x y]] (if (> y x) (inc acc) acc)) 0 pairs)\n        ]\n    num-second-greater))", "user": "561d8936e4b064ca9f4b16b2"}, {"problem": 120, "code": "#(count (remove nil?\n                  (map (fn [n]\n                         (loop [x n r 0]\n                           (if (< x 10)\n                             (if (< n (+ r (* x x)))\n                               n)\n                             (recur (int (/ x 10)) (+ r (* (mod x 10) (mod x 10))))))) %)))", "user": "54eee38ce4b024c67c0cf878"}, {"problem": 120, "code": "(fn [arg1]\n(cond\n(and (= arg1 (range 10))) 8\n(and (= arg1 (range 30))) 19\n(and (= arg1 (range 100))) 50\n(and (= arg1 (range 1000))) 50\n))", "user": "565f2461e4b068f2fe63dc3b"}, {"problem": 120, "code": "(fn sum-square [xs]\n  (count (filter (fn [x]\n              (< x (->> (str x)\n                        (map #(Integer/parseInt (str %)))\n                        (reduce #(+ %1 (* %2 %2)) 0))))\n            xs)))", "user": "56444fb1e4b0018b46ad8c0c"}, {"problem": 120, "code": "(fn f [coll]\n  (letfn [(aux [n]\n            (reduce + 0 (map (comp #(* % %) #(Integer/parseInt %) str) (seq (str n)))))]\n    (count (filter #(< % (aux %)) coll))))", "user": "56588f4ee4b0f9d632dd84b6"}, {"problem": 120, "code": "(fn sum-square [numbers]\n  (count \n    (filter \n       true?\n       (map\n         (fn [num]\n           (<\n             num\n             (reduce\n               (fn [a e]\n                 (+ a (* e e)))\n               0\n               (map #(- (int %) 48) (list* (str num))))))\n          numbers))))", "user": "52c1ede2e4b07a9af579236d"}, {"problem": 120, "code": "(fn [l]\n  (count (filter (fn [x] (< x (reduce + (map #(* % %) (map #(- (int %) 48) (str x)))))) l)))", "user": "565e0934e4b068f2fe63dc30"}, {"problem": 120, "code": "(fn [coll]\n  (count (for [x coll\n      :let [y (reduce + (map #(* % %) (map #(Character/getNumericValue %) (str x))))]\n      :when (< x y)] x)))", "user": "564da567e4b0284900eef682"}, {"problem": 120, "code": "(fn solution [coll]\n  (letfn [(char->digit [c]\n            (- (int c) 48))\n          (pred? [n]\n            (< n (reduce +\n                         (map #(* % %)\n                              (map char->digit\n                                   (str n))))))]\n    (count (filter pred? coll))))", "user": "56504dc2e4b0284900eef6bc"}, {"problem": 120, "code": "(fn sum-square-digits\n    [ncoll]\n    (letfn [(digits [n]\n              (map (fn [x] (Character/digit x 10)) (str n)))\n             (sum-square-digits [nseq]\n               (apply + (map (fn [x] (* x x)) nseq)))]\n       (->> ncoll\n         (map digits)\n         (map sum-square-digits)\n         (map (fn [x y] (< x y)) ncoll)\n         (filter true?)\n         count)))", "user": "5637557ce4b0bfe05bf117d4"}, {"problem": 120, "code": "(fn [xs]\n   (letfn [(d [x]\n             (if (= x 0) nil\n                        (lazy-seq (cons (mod x 10) (d (int (/ x 10)))))))]\n     (reduce (fn [n x]\n               (if (->> x\n                        d\n                        (map #(* % %))\n                        (reduce +)\n                        (< x))\n                 (inc n)\n                 n)) 0 xs)))", "user": "55316b8ae4b076ab5578f825"}, {"problem": 120, "code": "(fn [arg1]\n(cond\n(and (= arg1 (range 10))) 8\n(and (= arg1 (range 30))) 19\n(and (= arg1 (range 100))) 50\n(and (= arg1 (range 1000))) 50\n))", "user": "5666bf34e4b04acd4f672dc2"}, {"problem": 120, "code": "(fn [s]\n  (let [square-of-digits (fn [x]\n         \t               (loop [acc 0 x x]\n                             (if (zero? x)\n                               acc\n                               (recur (+ acc (* (rem x 10) (rem x 10))) (quot x 10)))))]\n\t(count (filter #(< % (square-of-digits %)) s))))", "user": "5643a11ee4b0018b46ad8bfb"}, {"problem": 120, "code": "(fn [coll]\n  (count \n   (filter\n    (fn [x] \n      (let [digits (map (comp read-string str) (str x))\n               squares (map #(* % %) digits)\n               sum-of-squares (reduce + squares)]\n        (< x sum-of-squares)))\n    coll)))", "user": "53e9dce1e4b036ad0777e4bc"}, {"problem": 120, "code": "(fn [xs]\n  (count (filter #(< % (reduce (fn [t v] (let [x (- (int v) 48)] (+ t (* x x)))) 0 (seq (str %)))) xs)))", "user": "54dce62fe4b024c67c0cf78c"}, {"problem": 120, "code": "(fn [xs]\n  (count (filter\n          (fn [x] (< x (->> x str\n                            (map #(- (int %) (int \\0)))\n                            (map #(* % %))\n                            (apply +))))\n          xs)))", "user": "54c5cc17e4b045293a27f624"}, {"problem": 120, "code": "(fn less-than-square-sum-digits\n  [coll]\n  (count\n   (filter\n    (fn [n] (< n (reduce + (map #(apply * (repeat 2 (- 48 (int %)))) (.toString n)))))\n    coll)))", "user": "55a9e0fee4b0988bba2ad945"}, {"problem": 120, "code": "(fn [coll]\n  (->> coll\n     (map (comp seq str))\n     (map (partial map (comp read-string str)))\n     (map (partial map #(* % %)))\n     (map #(reduce + %))\n     (map #(if (< %1 %2) 1 0) coll)\n     (reduce +)))", "user": "5666500ee4b0e91d5f5c566d"}, {"problem": 120, "code": "(fn [collection-of-integers]\n  (let [map-of-original-numbers-to-squared-sums-of-digits \n          (zipmap \n            collection-of-integers\n            (map (fn [sub-coll] \n                    (reduce + sub-coll)) \n                 (map \n                  (fn [x] \n                    (reduce #(conj %1 (* (->> %2 str Integer.) (->> %2 str Integer.))) '() x)) \n                  (map vec (map str collection-of-integers)))))]\n    (loop [acc 0 coll collection-of-integers x (first coll)]\n      (cond\n        (empty? coll)\n          acc\n        (< x (get map-of-original-numbers-to-squared-sums-of-digits x)) \n          (let [rs (rest coll)] \n            (recur (inc acc) rs (first rs)))\n        :else\n          (let [rs (rest coll)]\n            (recur acc rs (first rs)))))))", "user": "4fc77f5ae4b0ee37620e1821"}, {"problem": 120, "code": "(fn [xs](count \n        (filter (fn [x] (< x (reduce + (map #(* % %) (map read-string (map str (str x)))))))\n         xs)))", "user": "53623eaee4b0243289761e4f"}, {"problem": 120, "code": "(fn [n]\n    (count\n      (mapcat\n        (fn [s]\n         (let [n (->> s str vec (map str) (map read-string))\n               x (reduce #(+ %1 (* %2 %2)) 0 n)]\n           (if (> x s) [s])))\n        n)))", "user": "564348e1e4b08d4f616f5f26"}, {"problem": 120, "code": "(fn c [xs]\n\t(count\n\t\t(filter #(< % 0)\n\t\t\t(map - \n\t\t\t\txs\n\t\t\t\t(map (comp (partial reduce +) \n\t\t\t\t\t(partial map {\\0 0 \\1 1 \\2 4 \\3 9 \\4 16 \\5 25 \\6 36 \\7 49 \\8 64 \\9 81}) seq str) \n\t\t\t\t\t\txs)))))", "user": "56540485e4b0f9d632dd847a"}, {"problem": 120, "code": "(fn [a]\n        (count (filter (fn[y]  (< y (reduce + (map (fn [x] (* x x)) (map read-string (re-seq #\"[0-9]\" (str y))) )))) a))\n)", "user": "5661b0a9e4b068f2fe63dc6f"}, {"problem": 120, "code": "(fn compare-to-sum-of-square-of-digits [int-range]\n  (let [disected-ints (map (fn dissect-int [x] (map #(Integer. (str %)) (into [] (str x))) ) int-range)\n        sum-of-square-digits (map (fn dissectet-int-map [disected-int]\n               (reduce +\n                       (map (fn square-it [int] (* int int)) disected-int))) disected-ints)]\n    (count (filter true? (map < int-range sum-of-square-digits)))))", "user": "554bc64ae4b0a04f79299598"}, {"problem": 120, "code": "(fn sum-squared\n  [nums]\n  (->>\n    nums\n    (map (fn [num]\n         (let [squared-sum ((fn get-squared-sum [num]\n                             (->> num str seq\n                                  (map (fn [char] (Character/getNumericValue ^Character char)))\n                                  (map #(Math/pow % 2))\n                                  (map int)\n                                  (reduce +))) num)]\n           (print squared-sum)\n           (< num squared-sum))))\n    (remove false?)\n    (count)))", "user": "536ecd9fe4b0fc7073fd6e76"}, {"problem": 120, "code": "(fn [coll]\n   (count\n    (filter  #(< \n               % \n               (reduce \n                (fn [a b] (+ (* b b) a)) \n                0 \n                (map  (comp read-string str) (str %)))) \n             coll)))", "user": "567476bde4b05957ce8c6139"}, {"problem": 120, "code": "(fn [s]\n  (count\n    (filter \n      #(< (first %) (second %))\n      (map \n        (fn [n]\n          (loop [out 0 in n]\n            (if (<= in 0)\n              (vector n out)\n              (recur (+ out (* (rem in 10) (rem in 10))) (quot in 10)))))\n        s))))", "user": "564a5a09e4b0284900eef656"}, {"problem": 120, "code": "(fn [coll] (count (filter true? (map (fn [myVal] (< myVal (reduce + (map #(* % %) (map #(- (int %) (int \\0)) (str myVal)))))) coll))))", "user": "5676af21e4b05957ce8c6158"}, {"problem": 120, "code": "(fn [coll]\n  (reduce (fn [acc number]\n            (let [sqdigits (reduce (fn [acc number]\n                                     (+ acc (* number number)))\n                                   0\n                                   (map #(- (int %) (int \\0)) (str number)))]\n              (if (< number sqdigits)\n                (inc acc)\n                acc)))\n          0\n          coll))", "user": "56732c84e4b05957ce8c611c"}, {"problem": 120, "code": "(fn [xs] (count (filter (fn [x] (< x (reduce + (apply map * (repeat 2 (map #(- (int %) (int \\0)) (str x))))))) xs)))", "user": "56706f01e4b0a866af6896f2"}, {"problem": 120, "code": "(fn sumSquare [x]\n   (letfn \n     [(numToDigits [x] (if (< x 10) [x] (conj  (numToDigits (int (/ x 10))) (rem x 10))))]\n   (count (filter #(= % 1) (map\n     (fn [y]\n       (if (> (reduce #(+ (* %2 %2) %1) 0 (numToDigits y)) y)\n         1\n         -1))\n     x)))))", "user": "56427910e4b08d4f616f5f19"}, {"problem": 120, "code": "(fn [int-coll]\n  (let [digits (fn [n] (map read-string (map str (str n)))),\n        sum-of-squares (fn [coll] (reduce + (map #(* % %) coll)))]\n    (reduce #(if (< %2 (sum-of-squares (digits %2))) (inc %1) %1) int-coll)))", "user": "567695c2e4b05957ce8c6157"}, {"problem": 120, "code": "(fn [arg]\n  (let [digit (fn [n] (map #(Integer/valueOf (str %)) (String/valueOf n)))\n        sqr (fn [n] (apply + (map #(* % %) (digit n))))]\n    (count (filter #(< % (sqr %)) arg))))", "user": "56669819e4b0e91d5f5c5674"}, {"problem": 120, "code": "(fn sol [coll]\n  (reduce + (map (fn mapped [n] (if ((fn is-smaller-than-squared-digits [n]\n                                       (< n ((fn square-digits [n]\n                                               (reduce + (map (fn blah [m] (* m m)) ((fn get-digits [n]\n                                                                                       (map #(Integer/parseInt (str %)) (seq (str n))  )) n)))) n))) n) 1 0))  coll)))", "user": "535f9a5ce4b04ce2eb3ed2de"}, {"problem": 120, "code": "(fn sum-square [coll]\n  (let [digits (fn [n] (map #(- (int %) 48) (str n)))\n        square #(* % %)\n        sum-digits (fn [n] (reduce + (map square (digits n))))]\n    (count (filter #(< % (sum-digits %)) coll))))", "user": "56810479e4b0966858e4d8f8"}, {"problem": 120, "code": "(fn [col]\n  (count \n   (filter (fn [x]\n             (if (< x (reduce + \n                         (map (fn [y] (* y y)) \n                             (map #(Character/getNumericValue %) (str x)))))\n               true \n               false)) \n           col)))", "user": "55aaa36fe4b0988bba2ad94f"}, {"problem": 120, "code": "(fn [col] (let [sum-of-digits (fn [n] (reduce + (map #(* % %) (map #(Character/digit % 10) (str n)))))]\n  (count (filter #(< (first %) (second %)) (map #(vector % (sum-of-digits %)) col)))))", "user": "56800ba1e4b0966858e4d8e8"}, {"problem": 120, "code": "(fn sum-square [coll]\n  (let [digits (fn [n] (map #(- (int %) 48) (str n)))\n        square #(* % %)\n        sum-digits (fn [n] (reduce + (map square (digits n))))]\n    (count (filter #(< % (sum-digits %)) coll))))", "user": "56754c4be4b05957ce8c6149"}, {"problem": 120, "code": "(fn [coll] \n  (let [f1 (fn [number] (loop [number number result ()]\n      \t\t\t\t\t (if (< number 10)\n        \t\t\t\t  (conj result number)\n        \t\t\t\t  (recur \n         \t\t\t\t   (quot number 10) \n                           (conj result (rem number 10))))))\n        \n        f2 (fn [s] (reduce + (map #(* %1 %1) s)))]\n    (let [s1 (map f2 (map f1 coll))]\n      (prn s1)\n      (loop [s1 s1\n             coll coll\n             cnt 0]\n        (if (empty? s1)\n          cnt\n          (recur (rest s1)\n                 (rest coll)\n                 (if (< (first coll) (first s1)) (inc cnt) cnt)))))))", "user": "567d18c9e4b05957ce8c61c4"}, {"problem": 120, "code": "(fn [nums]\n  (let [digits-of (fn [num]\n                    (->> (clojure.string/split (str num) #\"\")\n                         (remove empty?)\n                         (map #(Integer/parseInt %))))\n        squares-sum (fn [num]\n                      (->> (digits-of num)\n                           (map #(* % %))\n                           (apply +)))]\n\n    (->> (map #(if (< % (squares-sum %)) 1 0) nums)\n         (apply +))))", "user": "55d28b38e4b0e31453f64a58"}, {"problem": 120, "code": "#(reduce +\n  (map\n   (letfn [(s [x]\n             (loop [x x ret 0]\n               (if (= x 0)\n                 ret\n                 (recur (quot x 10) (+ ret (* (rem x 10) (rem x 10)))))))]\n     (fn [x] (if (< x (s x)) 1 0))) %))", "user": "54c8ac49e4b045293a27f64e"}, {"problem": 120, "code": "(fn [nums]\n  (letfn [(square [x] (* x x))\n          (sum-of-sd [n] (if (< n 10) \n                           (* n n)\n                           (let [ld (mod n 10)\n                                 qu (/ (- n ld) 10)]\n                           \t\t(+ (square ld) (sum-of-sd qu)))))\n          (qualify [n] (< n (sum-of-sd n)))]\n    (count(filter qualify nums))))", "user": "56897739e4b0dcc4269f407d"}, {"problem": 120, "code": "(fn q4q120 [c]\n  (->>\n   c\n   (filter #(< %\n               (reduce + (map (fn [n] (* n n)) ((fn dig-seq [n]\n  (if (zero? n)\n    nil\n    (lazy-seq\n     (cons\n      (mod n 10)\n      (dig-seq (quot n 10))))))\n %)))))\n   count))", "user": "52213426e4b0e6a83c8925c4"}, {"problem": 120, "code": "(fn cnt-sqrt [arg]\n  (let [get-digits (fn [n]\n                     (map #(Integer/valueOf (str %)) (String/valueOf n)))\n        digits-sqr (fn [n]\n                     (apply + (map #(* % %) (get-digits n))))\n        res-seq (filter #(< % (digits-sqr %)) arg)]\n    (count res-seq)))", "user": "56874171e4b0dcc4269f405c"}, {"problem": 120, "code": "(fn [s]\n          (count\n           (filter\n            identity\n            (map\n             (fn [x] (< x (reduce + (map #(* % %) (map #(- (int %) 48) (str x))))))\n             s))))", "user": "5275f7a2e4b03e8d9a4a74d0"}, {"problem": 120, "code": "(fn [seq']\n  (let [digits (fn [n]\n                 (map #(Character/digit % 10) (str n)))]\n    (count\n     (filter (fn [n]\n               (< n (reduce #(+ %1 (* %2 %2))\n                            0\n                            (digits n))))\n             seq'))))", "user": "567bf820e4b05957ce8c61ad"}, {"problem": 120, "code": "(fn [l]\n  (let [P (fn [n]\n            (apply + (map (comp #(* % %) #(- (int %) (int \\0))) (seq (str n)))))]\n    (count (filter #(< % (P %)) l))))", "user": "567b39b6e4b05957ce8c61a3"}, {"problem": 120, "code": "(fn [c] (reduce (fn [x y] (if (< y (reduce #(+ %1 (* %2 %2)) 0 (map #(read-string (str %)) (seq (str y))))) (inc x) x)) 0 c))", "user": "56798d83e4b05957ce8c618b"}, {"problem": 120, "code": "(comp count (partial filter #(->> %\n                                   str\n                                   seq\n                                   (map str)\n                                   (map read-string)\n                                   (map (partial repeat 2))\n                                   (map (partial apply *))\n                                   (reduce +)\n                                   (< %))))", "user": "5687fe58e4b0dcc4269f4065"}, {"problem": 120, "code": "(fn [coll] (count (filter\n                    (fn [n] (< n\n                               (apply +\n                                      (map (comp #(* % %) (zipmap \"0123456789\" (range))) (str n)))))\n                    coll)))", "user": "55f85b93e4b03cbcff9738ae"}, {"problem": 120, "code": "(fn [s] (apply + (for [i s]\n          (if (< i (apply + (map #(* % %) (->> i str seq (map (comp read-string str)))))) 1 0)\n          )))", "user": "543b4746e4b032a45b86932c"}, {"problem": 120, "code": ";#((fn [given-sequence result]\n;    (if (nil? given-sequence)\n;      result\n;      (let [number (first given-sequence)\n;            digits (seq (str number))\n;            sum (apply + (map (fn [x] (* (- (int x) (int \\0)) (- (int x) (int \\0)))) digits))]\n;        (recur\n;          (next given-sequence)\n;          (if (< number sum)\n;            (inc result)\n;            result\n;            )\n;          )\n;        )\n;      )\n;    )\n;    %1 0\n;  )\n(fn [given-sequence]\n  (count\n    (filter\n      (fn [x]\n        (< x\n           (apply + (map #(* % %) (map (comp read-string str) (str x))))\n           )\n        )\n      given-sequence\n      )\n    )\n  )", "user": "566639f4e4b0e91d5f5c566b"}, {"problem": 120, "code": "(fn temp [xs]\n  (letfn [(p [x]\n            (reduce #(+ %1 (Math/pow (Integer/valueOf (str %2)) 2)) 0 (seq (str x))))]\n          (count (filter #(< % (p %)) xs))))", "user": "5657fed1e4b0f9d632dd84ae"}, {"problem": 120, "code": "#(count (filter (fn [e] (< e\n                           (reduce + (map (fn [d] (* (Integer/valueOf (str d))\n                                                     (Integer/valueOf (str d))))\n                                          (str e)))))\n                %))", "user": "568e1871e4b0dcc4269f40cc"}, {"problem": 120, "code": "(fn[x]\n(count \n(filter\n (fn [n]\n(->> n str \n(map(fn[digit](let[ii (Integer/parseInt (str digit))](* ii ii))))\n(apply +)\n(< n))\n) x)))", "user": "50342d1be4b062bc5d7ae15f"}, {"problem": 120, "code": "(fn [a-seq]\n  (let [threshold (fn [n] (apply + (map\n                                    #(-> % \n                                         (Character/digit  10)\n                                         (Math/pow 2)) \n                                    (seq (str n)))))]\n    (->>\n     a-seq\n     (filter #(< % (threshold %)) )\n     (count))))", "user": "5680104ae4b0966858e4d8ea"}, {"problem": 120, "code": "(fn countSquareX [x] \n   \n  (let [squareDigitX (fn [x] \n                       (let [digitsX (fn dig[x] (if (< x  10) [x] (conj (dig (quot x 10)) (mod x 10))))\n                             \n                             \n                             ] (reduce + (map #(* % %) (digitsX x)))))]\n  (count (filter (fn [n] (< n (squareDigitX n))) x)))\n)", "user": "568820e8e4b0dcc4269f4067"}, {"problem": 120, "code": "(fn [a] \n    (count (filter \n      (fn [b] (< b \n        (reduce (fn [a b] (+ a (* b b))) 0 \n          (map (fn [x] (Integer/parseInt (str x))) (seq (str b)))))) a)))", "user": "569c40cee4b0542e1f8d1462"}, {"problem": 120, "code": "(fn [xs]\n  (letfn [(digits [x]\n                  (loop [res () x x]\n                    (if (pos? x)\n                      (recur (cons (mod x 10) res) (quot x 10))\n                      res)))\n          (sum-squares [coll]\n                       (apply + (map #(* % %) coll)))]\n    (count (filter #(< % (sum-squares (digits %))) xs))))", "user": "55ccdc6be4b0e31453f64a18"}, {"problem": 120, "code": "(fn [coll]\n  (count (filter \n    (fn [x]\n      ( ->> x\n        (str)\n        (map #(- (int %) 48))\n        (map #(* % %))\n        (reduce +)\n        (< x)\n      )\n    )\n    coll\n  ))\n)", "user": "56979bb7e4b0e0b3d3318cac"}, {"problem": 120, "code": "#(count (filter (fn ltsod [x]\n                  (< x ((fn sod [x]\n                          (if\n                            (< x 10)\n                            (* x x)\n                            (+\n                              (sod (quot x 10))\n                              (* (mod x 10) (mod x 10))\n                              )\n                            )\n                          )\n                         x)\n                     )\n                  )\n                %\n                )\n        )", "user": "5680fff3e4b0966858e4d8f6"}, {"problem": 120, "code": "(fn [inp]\n  (let [square (fn [x] (* x x))\n        cnt-fn (fn  [i]\n                 (let [n (map #(Character/digit % 10) (str i))\n                       zm (reduce + (map square n))\n                       f (if (> zm i) 1 0)]\n                   f))]\n    (reduce + (map cnt-fn inp))))", "user": "5489dd4de4b0e286459a11ef"}, {"problem": 120, "code": "(fn [s]\n  (reduce (fn [ret n]\n          (if (> (reduce\n                   #(+ % (* %2 %2)) 0\n                   (map #(- (int %) 48) (str n)))\n                 n)\n            (inc ret)\n            ret))\n  0 s))", "user": "5195fadee4b04c0af7ff3c11"}, {"problem": 120, "code": "(fn sum-of-square-of-digits [coll]\n  (count\n   (filter (fn [x] (< x\n                     (apply + (map #(*' % %) (map #(Character/digit % 10) (str x))))))\n           coll)))", "user": "5693a53ee4b0dcc4269f4106"}, {"problem": 120, "code": "(fn filter-ssd [lst] (count (filter #(< % (\n                                      (fn ssd [n] (if (zero? n) 0 (+ (ssd (quot n 10)) (* (rem n 10) (rem n 10)))))\n                                      %)) lst)))", "user": "56912f93e4b0dcc4269f40ef"}, {"problem": 120, "code": "(fn [coll]\n  (let [squared-digits (fn [n]\n                         (reduce #(+ %1 (-> (Integer. %2) (Math/pow 2) int)) \n                                 0 \n                                 (re-seq #\"\\d\" (str n))))\n        filter-fn #(< % (squared-digits %))]\n    (count (filter filter-fn coll))))", "user": "5591cc56e4b0604b3f94d582"}, {"problem": 120, "code": "(fn[r]\n  (count(filter\n     (fn [n] (let [sq (apply + (map #(* % %) (map read-string (map str (str n)))))] (> sq n))) r)))", "user": "54ef4a1ee4b024c67c0cf883"}, {"problem": 120, "code": "(fn [coll]\n  (letfn [(num->digits-seq [n]\n                           (->> n\n                                (str)\n                                (map str)\n                                (map #(Integer/parseInt % 10))))]\n    (->> coll\n         (filter \n           (fn [n]\n                   (< \n                     n \n                     (->> (num->digits-seq n)\n                             (map #(* % %))\n                             (reduce +)))))\n         (count))))", "user": "5630ce72e4b0bfe05bf11786"}, {"problem": 120, "code": "(fn [c]\n  (let [digits (fn [n] (map (comp #(Integer/parseInt %) str) (str n)))\n        lt-squared-digit-sum? (fn [n] (< n\n                                         (reduce + (map #(* % %) (digits n)))))]\n    (count\n      (filter lt-squared-digit-sum? c))))", "user": "553b0d95e4b09218d5f44fff"}, {"problem": 120, "code": "(fn [col]\n  (count\n   (filter\n    (fn [n]\n      (->> n\n           (str)\n           (map str)\n           (map #(Integer. %))\n           (map #(* % %))\n           (apply +)\n           (< n)))\n      col)))", "user": "56877fcbe4b0dcc4269f405e"}, {"problem": 120, "code": "#(count\n (filter\n identity\n (map\n  (fn [x]\n    (when (< x (apply +\n                      (map\n                       (fn [str-num] \n                         (* (read-string (str str-num))\n                            (read-string (str str-num))))\n                       (seq (str x)))))\n      x))\n  %)))", "user": "5564c113e4b0c656e3ff180d"}, {"problem": 120, "code": "(fn [Y] \n\t(count\n\t(filter #(< 0 %)\n    (map -    \n    \t(map \n        (fn [X] \n        (reduce + (map #(* % %) \n        (map #(read-string (str %)) (str X))))) Y) Y))))", "user": "56066e82e4b08b23635d3173"}, {"problem": 120, "code": "(fn [arr]\n  (->> arr\n       (map (fn [n] (if (< n\n                           (->> n\n                                str\n                                (map #(Character/digit % 10))\n                                (map #(* % %))\n                                (apply +)))\n                           1 0)))\n       (apply +)))", "user": "56a38a4ce4b0542e1f8d14cc"}, {"problem": 120, "code": "#(count\n   (for [x %\n         :let [sq ((fn [gimmeanint]\n                     (reduce + ((fn [vecs] (apply mapv * vecs))\n                                (vec\n                                 (repeat 2 (mapv {\\0 0 \\1 1 \\2 2 \\3 3 \\4 4 \\5 5 \\6 6 \\7 7 \\8 8 \\9 9} (str gimmeanint))\n                                         )))))  x)]\n         :when (< x sq)]\n     [sq]))", "user": "55810c73e4b05c286339e0f2"}, {"problem": 120, "code": "(fn sum-of-squared-digits\n  [s]\n  (count\n   (filter\n    (fn digit-checker\n      [k]\n      (let\n        [digits (map #(Character/digit % 10) (str k))]\n        (< k (apply + (map #(Math/pow % 2) digits)))))\n    s)))", "user": "51b01309e4b0c53cf2e68a57"}, {"problem": 120, "code": "(fn [list] (count (filter \n                   (fn [e] \n                     (< e \n                        (apply + (map \n                                  #(* (- (int %) 48) (- (int %) 48)) \n                                  (str e) )))) \n                   list)) )", "user": "562326cbe4b03f08ee9a9230"}, {"problem": 120, "code": "#(apply + (map (fn[x](loop [n x s 0](if (= 0 n) (if (> s x) 1 0) (recur (quot n 10) (+ s (* (mod n 10) (mod n 10))))))) %))", "user": "5686b7c7e4b0dcc4269f4057"}, {"problem": 120, "code": "(fn [xs] \n  (let [num-to-digits (fn [x]\n            (loop [num x  digits '()]\n              (if (zero? num) \n                [x digits]\n                (recur (quot num 10) (conj digits (rem num 10))))))\n        square-sum (fn [[n d]]\n                     (let [s (reduce #(+ %1 (* %2 %2)) 0 d )]\n                       (if (< n s ) 1 0)))]\n    (->> xs\n         (map num-to-digits)\n         (map square-sum )\n          (reduce +) )))", "user": "55f9b2b6e4b03cbcff9738c8"}, {"problem": 120, "code": "(fn sum-square [integers]\n    (reduce (fn [acc number]\n                (let [digits (seq (str number))\n                      faux #(Math/pow (Character/getNumericValue %) 2)\n                      sq (apply + (map faux digits))]\n                    (if (> sq number)\n                        (inc acc)\n                        acc)))\n            0 integers))", "user": "552bd5c2e4b0ffed3738f969"}, {"problem": 120, "code": "(fn [coll]\n  (let [pivot (fn [x]\n                (apply + (map #(* % %) (map read-string (rest (clojure.string/split (str x) #\"\"))))))]\n    (count (filter true? (map #(> %1 %2) \n                              (map pivot coll) \n                              coll)))))", "user": "5297dcc5e4b02ebb4ef75047"}, {"problem": 120, "code": "(fn abc\n  [L]\n  (let [digits (fn [d] (map #(- (int %) 48) (str d)))]\n    (let [sum-sq (fn [x] (reduce + (map #(* % %) (digits x))))]\n      (let [mark-one (fn [n] (if (< n (sum-sq n)) 1 0))]\n        (reduce + (map mark-one L))\n      )\n    )\n  )\n)", "user": "56bb3a4be4b0f26550335951"}, {"problem": 120, "code": "(fn [s]\n  (letfn [(digseq [n]\n            (map (comp bigint str) (str n)))\n          (sumsq [s]\n            (reduce + (map #(* % %) s)))]\n    (count (filter #(< % (sumsq (digseq %)))\n                   s))))", "user": "565f8fd2e4b068f2fe63dc41"}, {"problem": 120, "code": "(fn [in] (count (filter (fn [x]\n           (let [d (rest (clojure.string/split (str x) #\"\"))\n                 sq (map #(* (read-string %) (read-string %)) d)\n                 ssq (reduce + sq)]\n             (< x ssq))) in)))", "user": "536673a8e4b0243289761e76"}, {"problem": 120, "code": "(fn [ints]\n  (count\n   (filter\n    (fn [[num sqr]] (< num sqr))\n    (map (juxt identity (fn [n]\n                          (reduce +\n                                  (map #(reduce * (repeat 2 (Integer. (str %)))) (str n)))))\n         ints))))", "user": "56481722e4b0284900eef628"}, {"problem": 120, "code": "(fn [coll]\n  (let [digits #(map (comp read-string str) (str %))]\n    (count\n     (filter \n      (fn [v] (< v (apply + (map #(* % %) (digits v)))))\n      coll))))", "user": "56ae214ce4b03c432f18735a"}, {"problem": 120, "code": "#(apply + \n \t(map \n \t\t(fn [i]\n \t\t\t(if (< i (apply + \n \t\t\t\t\t\t(map\n \t\t\t\t\t\t\t(fn [s] (let [d (- (int s) 48)] (* d d))) (str i))))\n \t\t\t\t1\n \t\t\t\t0))\n\t\t%))", "user": "56baa68ce4b0f26550335947"}, {"problem": 120, "code": "(fn [coll]\n  (reduce (fn[s n] (if (< n (reduce + (map #(* % %) (map #(- (int %) (int \\0)) (seq (str n)))))) (inc s) s)) coll))", "user": "56bb9ccce4b0f26550335959"}, {"problem": 120, "code": "(fn [coll]\n  (letfn\n    [(sscd [val]\n       (reduce + (map #(* % %)\n                      (map #(- (int %) (int \\0)) (str val)))))]\n    (count (filter #(< % (sscd %)) coll))))", "user": "56a01895e4b0542e1f8d149f"}, {"problem": 120, "code": "(fn sum-of-squares [coll]\n  (letfn [(component-squares [a-num]\n            (reduce (fn [c n] (+ c (* n n)))\n                    0 (map #(Character/getNumericValue %) (str a-num))))\n          (accum-smallers [c n]\n            (if (< n (component-squares n))\n              (inc c)\n              c))]\n    (reduce accum-smallers\n            0 coll)))", "user": "563fc1f2e4b08d4f616f5ed7"}, {"problem": 120, "code": "(fn cc[l] (count (filter #(< % (loop [n % sqs 0] (if (= 0 n) sqs (recur (quot n 10) (+ sqs (* (mod n 10) (mod n 10))))))) l)))", "user": "56a75810e4b0542e1f8d14fc"}, {"problem": 120, "code": "(fn [s]\n  (count\n   (filter (fn [n]\n             (< n (apply + (map #(* % %)\n                                (map #(- (int \\0) (int %))\n                                     (str n))))))\n           s)))", "user": "4e7dfab0535db169f9c796f9"}, {"problem": 120, "code": "(fn [xs]\n  (letfn [(sum-of-squares [xs] (reduce + (map #(* % %) xs)))\n          (digits [x]\n             (loop [ds []\n                    v  x]\n               (if (= 0 v) ds\n                 (recur (conj ds (mod v 10)) (quot v 10)))))]\n    (count (filter #(< % (sum-of-squares (digits %))) xs))))", "user": "56bfcba1e4b060a8e693e3a1"}, {"problem": 120, "code": "(fn[s](count (filter (fn [x](< x (reduce + (map #(Math/pow (Integer/parseInt (str %)) 2) (str x))))) s)))", "user": "56baab13e4b0f26550335948"}, {"problem": 120, "code": "(fn [s] (letfn [(digits [n] (map #(Character/digit % 10) (str n)))\n                (sos [s] (reduce + (map #(* % %) s)))]\n   (count (filter #(< % (sos (digits %))) s))))", "user": "56b86e64e4b0f26550335924"}, {"problem": 120, "code": "#(count (filter (fn[n] (< n (apply + (map (comp (fn[i] (* i i)) bigint str) (str n))))) %))", "user": "56824e1be4b0945ebc182a91"}, {"problem": 120, "code": "(fn filter-with-sum-of-squares [col]\n  (count\n   (filter\n    (fn [i]\n      (> (apply + (map (fn [x] (* x x)) (map #(Integer/parseInt (str %)) (seq (str i))))) i))\n    col)))", "user": "569f4dabe4b0542e1f8d1491"}, {"problem": 120, "code": "(fn [coll]                                                     \n    (count (filter                                                                \n             true?                                                                \n             (map (fn [n] (< n (apply + (map #(let                                \n                                                [v (Integer/parseInt (str %))]    \n                                                (* v v)) (str n))))) coll))))", "user": "563536f8e4b0bfe05bf117c5"}, {"problem": 120, "code": "(fn ssd\n  [coll]\n  (let [digitize (fn [num] (map #(mod % 10) (take-while (comp not zero?) (iterate #(quot % 10) num))))]\n    (count (filter true? (map < coll (map #(reduce (fn [s x] (+ s (* x x))) 0 (digitize %)) coll))))))", "user": "5609d328e4b05f002753deee"}, {"problem": 120, "code": "#(count (filter (fn \n                  [n]\n                  (< n (apply + (map (fn [ch]\n                                       (let [d (- (int ch) (int \\0))]\n                                         (* d d))) (str n))))) %))", "user": "56a36f76e4b0542e1f8d14ca"}, {"problem": 120, "code": "(fn [coll]\n  (let [digits (fn [n] (map (comp read-string str) (str n)))\n        sum-squares (fn [c] (apply + (map #(* % %) c)))]\n  (count (filter #(< % (sum-squares (digits %))) coll))))", "user": "56c4f43ce4b05cc29241ee9c"}, {"problem": 120, "code": "reduce (fn [c s] (if (< s (reduce + (for [x (map #(Integer. %) (drop 1 (clojure.string/split (str s) #\"\"))) :let [y (* x x)]] y))) (inc c) c)) 0", "user": "56c08696e4b060a8e693e3aa"}, {"problem": 120, "code": "(fn [coll]                                                                                                                                                                     \n  (count (filter #(< % (loop [d % res 0]                                                                                                                                           \n                         (if (< d 10)                                                                                                                                              \n                           (+ res (* d d))                                                                                                                                         \n                           (recur (quot d 10) (* (rem d 10) (rem d 10))))))\n                 coll)))", "user": "54edc818e4b024c67c0cf865"}, {"problem": 120, "code": "(fn sumsq [rng]\n  (let [sq-of-digits\n        (fn [d] (->> d (str) (seq) (map #(- (int %) 48))\n                                   (map #(Math/pow % 2)) (reduce +)))]\n    (->> rng\n         (filter #(< % (sq-of-digits %)))\n         (count))))", "user": "4e36e647535deb9a81d77f36"}, {"problem": 120, "code": "(fn [coll]\n  (letfn [(getdigits [elem] (map #(Character/digit % 10) (str elem)))\n          (sqrsum [elems]  (reduce + (map #(* % %) elems)))]\n    (loop [[head & tail :as remaining] coll\n           digits (getdigits head)\n           acc (list)]\n      (if (empty? remaining)\n        (count acc)\n        (recur tail (getdigits (first tail)) (if (< head (sqrsum digits)) (conj acc head) acc))))))", "user": "51a7bf26e4b0da5f497bde8c"}, {"problem": 120, "code": "(fn s-o-s-o-d [s]                                         ;Sum of square of digits\n  (let [digitize                                            ; zahl in ziffern zerlegen\n        (fn digitize [n]\n          (loop [n   n\n                 ret ()]\n            (if (< n 1)\n              ret\n              (recur (quot n 10) (conj ret (rem n 10))))))\n        s-o-s\n        (fn s-o-s [s]                                     ;sum of squares\n          (reduce + (map #(* % %) s)))                      ;summe der quadrate\n        ]\n    (count\n      (filter (fn [[k v]] (< k v))  ;filtere die, wo wert < summe\n        (sort-by key\n          (zipmap s (map ;mische input-collection und die summen-collection\n                      #(s-o-s (digitize %))\n                      s)))))))", "user": "569ce6fee4b0542e1f8d146c"}, {"problem": 120, "code": "(fn [c]  (count ( filter  #(< % (reduce +  (map (fn [d] (let [v (- (int d) (int \\0))] (* v v) ) ) (str %)   ) )  )    c )    )   )", "user": "56a6051fe4b0542e1f8d14e5"}, {"problem": 120, "code": "(fn[y](count(filter (fn [x] (->> (str x)\n              (map #(Character/digit % 10))\n              (map #(* % %))\n              (apply +)\n              (< x))) y )))", "user": "566a3a26e4b0a866af689699"}, {"problem": 120, "code": "(fn [s]\n  (letfn [(digits-squ-sum\n           [n]\n           (->> n\n                str\n                (map identity)\n                (map #(- (int %) (int \\0)))\n                (map #(* % %))\n                (apply +)))]\n    (count (filter #(< % (digits-squ-sum %)) s))))", "user": "567e418fe4b0feffd0d18eb1"}, {"problem": 120, "code": "(fn [x]\n    (count (filter identity (map (fn [n] (< n (reduce + (map (fn [d] (* d d)) (map (fn [t] (Integer/parseInt (str t))) (seq (str n))))))) x))))", "user": "4e8a170c535d3e98b802328f"}, {"problem": 120, "code": "(fn [xs]\n  (let [squared (fn [n]\n                  (->> (str n)\n                       (map (comp read-string str))\n                       (map #(Math/pow % 2))\n                       (reduce + )))]\n    (count (filter #(< % (squared %)) xs))))", "user": "5617a540e4b06b1bb2182a12"}, {"problem": 120, "code": "(fn [s]\n(count (filter\n    #(< % \n        (apply + (map (fn [x] (* (- (int x) 48) (- (int x) 48))) (vec (str %)))))s)))", "user": "56bca51ae4b0f26550335963"}, {"problem": 120, "code": "(fn [xs]\n  (letfn [(square [x] (* x x))]\n    (->> xs\n         (map (comp #(map (comp square read-string) %) #(re-seq #\"[0-9]\" %) str)) \n         (map #(apply + %)) \n         (map - xs) \n         (filter #(> 0 %)) \n         count)))", "user": "56d1afd9e4b0ea9b8538f791"}, {"problem": 120, "code": "(fn\n  [coll]\n  (letfn [(sum-of-square-digits \n           [n]\n           (let [digits         (map #(Character/digit % 10) (seq (str n)))\n                 squares        (map #(* % %) digits)]\n             (reduce + 0 squares)))]\n    (count (filter #(< % (sum-of-square-digits %)) coll))))", "user": "55ed5a2de4b0121d4835fdd8"}, {"problem": 120, "code": "reduce (fn [how-many current]\n         (letfn [(digit-sum [num] (if (> 10 num)\n                            (* num num)\n                            (+ (let [n (rem num 10)]\n                                 (* n n))\n                               (digit-sum (quot num 10)))))]\n           (do (if (< current (digit-sum current))\n             (inc how-many)\n             how-many) )))", "user": "55868660e4b059ccff29b1d4"}, {"problem": 120, "code": "#(count (filter (fn [n]\n      (< n (loop [s 0 r n]\n       (if (= r 0)  s\n         (recur (+ s (* (mod r 10) (mod r 10))) (int (/ r 10))))))) %))", "user": "4fd11a93e4b04c3a95aa040a"}, {"problem": 120, "code": "#(apply + (map (fn [x] \n    (let [b (mod x 10) a (/ (- x b) 10)] \n      (if (> (* a (- a 10)) (* b (- 1 b))) 1 0))) (take 100 %)))", "user": "56b2573ce4b0982f16b37e02"}, {"problem": 120, "code": "#(->> %\n     (map (fn [x]\n            (loop [n x ds []]\n              (if (zero? n)\n                (list x ds)\n                (recur (quot n 10) (conj ds (mod n 10)))))))\n      (map (fn [[x ds]]\n             (if (< x (reduce (fn [y z] (+ y (* z z))) 0 ds))\n               1 0)))\n      (reduce +))", "user": "563f24f9e4b08d4f616f5ed0"}, {"problem": 120, "code": "(fn foo[coll]\n  (let [sos (fn [num] (reduce + (map (fn[e] (* (Integer/parseInt e) (Integer/parseInt e))) (rest (clojure.string/split (str num) #\"\")))))]\n  (count (filter (fn[elem] (< elem (sos elem))) coll))))", "user": "5537b2c7e4b09218d5f44fce"}, {"problem": 120, "code": "(fn [c]\n  (let [f (fn [n] (reduce #(+ %1 (* (Character/digit %2 10) (Character/digit %2 10))) 0 (str n)))]\n    (->> c\n         (filter #(> (f %) %))\n         count)))", "user": "5541fa50e4b0a04f79299515"}, {"problem": 120, "code": "(fn [xs]\n  (reduce (fn [x y]\n            (if (< y \n                   (reduce + (map #(* (- (int %) 48)\n                                  (- (int %) 48)) (seq (str y)))))\n              (inc x)\n              x))\n          0\n          xs))", "user": "55f73078e4b06e875b46cea4"}, {"problem": 120, "code": "(fn [c]\n  (let [small? (fn [n]\n                 (< n (->> (str n)\n                           (map #(Integer/parseInt (str %)))\n                           (map #(* % %))\n                           (apply +))))]\n    (count (filter small? c))))", "user": "56441634e4b0018b46ad8c08"}, {"problem": 120, "code": "(fn cnt-sqrt [arg]\n  (let [get-digits (fn [n]\n                     (map #(Integer/valueOf (str %)) (String/valueOf n)))\n        digits-sqr (fn [n]\n                     (apply + (map #(* % %) (get-digits n))))\n        res-seq (filter #(< % (digits-sqr %)) arg)]\n    (count res-seq)))", "user": "56d05ba2e4b0ea9b8538f77d"}, {"problem": 120, "code": "(fn [a]\n  (count (filter (fn [x]\n            (let [b (vec (str x))\n                  c (map #(- (int %) 48) b)\n                  d (reduce + (map #(* % %) c))\n                   ]\n              (< x d))) a)))", "user": "564d3169e4b0284900eef67c"}, {"problem": 120, "code": "(fn [s]\n  (let [square #(* %1 %1)\n        n->s #(loop [n %1 s []]\n                (if (= 0 n)\n                  s\n                  (recur (int (/ n 10)) (conj s (mod n 10)))))\n        sum #(apply + (map square (n->s %1)))\n        reducer #(if (< %2 (sum %2)) (inc %1) %1)]\n    (reduce reducer 0 s)))", "user": "56d63729e4b0ea9b8538f7ca"}, {"problem": 120, "code": "(fn [coll] (count (filter (fn [x] (< x (reduce #(let [d (- (int %2) (int \\0))] (+ % (* d d))) 0 (str x)) )) coll)))", "user": "54b8dfece4b0ed20f4ff6e9a"}, {"problem": 120, "code": "(fn [c]\n  (count\n    (filter #(< (first %) (second %))\n            (map (fn [d]\n                   (vector (first d)\n                           (reduce + (map #(* % %) (second d)))))\n                 (map (fn [e]\n                        (vector e (map #(Character/digit % 10) (str e))))\n                      c)))))", "user": "56d4b22de4b0ea9b8538f7bb"}, {"problem": 120, "code": "(fn [coll]\n  (let [digits (fn [n] (map #(Character/getNumericValue %) (str n)))\n        sum-of-squares (fn [ds] (apply + (map #(* % %) ds)))]\n     (count (filter identity (map #(< % (sum-of-squares (digits %))) coll)))))", "user": "550b502ae4b06e50f9beb13f"}, {"problem": 120, "code": "(fn [x]  \n  (reduce + \n          (map\n           (fn [y] (if (< y (reduce + (map #(* (Integer/parseInt (str %1)) (Integer/parseInt (str %1))) (str y))))\n                     1\n                     0 \n                     )\n              ) x\n           )\n          )\n  )", "user": "51e1c176e4b06a68e693eafb"}, {"problem": 120, "code": "reduce #(let [a (str %2)\n              n (map (fn [x] (-> x str read-string)) a)\n              s (map (fn [x] (* x x)) n)\n              t (apply + s)]\n          (if (< %2 t) (inc %1) %1)) 0", "user": "56aed78fe4b03c432f187363"}, {"problem": 120, "code": "(fn [nums]\n  (letfn [(square-sum [num]\n            (reduce + (map #(Math/pow (Character/getNumericValue %) 2) (str num))))]\n    (count (filter #(> (square-sum %) %) nums))))", "user": "56603e5fe4b068f2fe63dc4a"}, {"problem": 120, "code": "(fn [a]\n  (reduce #(if (< %2 (reduce (fn [s c] (+ s (* c c)))\n                             0\n                             (map (comp read-string str) (seq (str %2)))))\n             (inc %)\n             %)\n          0\n          a))", "user": "568227fee4b0945ebc182a8a"}, {"problem": 120, "code": "#(letfn [(digits [n r b]\n            (if (zero? n)\n              r\n              (recur (quot n b) (conj r (mod n b)) b)))\n          (sum-squared-digits [n]\n            (->> (digits n () 10)\n                 (map (fn [d] (* d d)))\n                 (apply +)))]\n   (reduce (fn [r e] (if (< e (sum-squared-digits e)) (inc r) r)) 0 %))", "user": "56dc3bdfe4b0ea9b8538f819"}, {"problem": 120, "code": "(fn [coll]\n    (loop [c coll\n           o 0]\n      (if (empty? c)\n        o\n        (let [f (first c)\n              r (rest c)\n              ssqrd (reduce #(+ % %2) (map #(* % %) (map #(Integer/parseInt %) (remove #(= % \"\") (clojure.string/split (str f) #\"\")))))]\n        (recur r (+ o (if (< f ssqrd) 1 0)))))))", "user": "56d5fd24e4b0ea9b8538f7c5"}, {"problem": 120, "code": "(let [dgt (fn [x] (apply + (map #(->> % Character/getNumericValue (repeat 2) (apply *)) (str x))))                          \n          ret (fn [coll] (count (filter #(< % (dgt %)) coll)))] ret)", "user": "56ecc4b5e4b04a395b9a043e"}, {"problem": 120, "code": "(fn [x]\n  (letfn [(split [x] (if (zero? x) [] (conj (split (int (/ x 10))) (mod x 10))))]\n    (->> x\n         (map #(vector % (reduce (fn [t n] (+ t (* n n))) 0 (split %))))\n         (filter (fn [[x y]] (< x y)))\n         count)))", "user": "56d68cbae4b0ea9b8538f7cd"}, {"problem": 120, "code": "(fn lessthanpowsum [col]\n  (letfn [(powsum [n] (->> n\n                           str\n                           (map #(- (int %) (int \\0)))\n                           (map #(* % %))\n                           (apply +)\n                           (#(< n %))\n                           ))]\n    (count (filter powsum col))))", "user": "569dd6e8e4b0542e1f8d1480"}, {"problem": 120, "code": "(fn my-120\n  [coll]\n  (count \n    (filter \n      (fn [num] \n        (< num (apply + (map #(Math/pow (Character/digit % 10) 2) (str num))) )) \n      coll)))", "user": "56c3aca0e4b05cc29241ee90"}, {"problem": 120, "code": "(fn f1 [s]\n  (count (filter (fn f [a]\n  (< a (reduce + (map (comp #(* % %) #(. Integer parseInt %) str) (seq (str a) )))))\n s)))", "user": "56ebe773e4b04a395b9a042a"}, {"problem": 120, "code": "(fn [li]\n( count (filter (fn [a] (apply < a))\n\t\t\t(map list\n\t\t\t\tli\n\t\t\t\t(map (fn [v] (reduce + (map #(* %1 %1) (map #(- (int %) 48) (str v)) ))) li)))))", "user": "54be7e93e4b0ed20f4ff6eed"}, {"problem": 120, "code": "(fn sum-square [coll]\n  (let [digits (fn [n] (map #(- (int %) 48) (str n)))\n        square #(* % %)\n        sum-digits (fn [n] (reduce + (map square (digits n))))]\n    (count (filter #(< % (sum-digits %)) coll))))", "user": "56dc483fe4b0ea9b8538f81b"}, {"problem": 120, "code": "(fn lt-sum-sq-dig-count [coll]\n  (letfn [(lt-sum-sq-dig? [n]\n            (< n\n               (loop [digits n\n                      acc 0]\n                 (if (< digits 10)\n                   (+ acc (* digits digits))\n                   (recur (int (/ digits 10.0)) (+ acc (* (mod digits 10) (mod digits 10))))))))]\n    (count (filter lt-sum-sq-dig? coll))))", "user": "542c026ae4b0dad94371f29a"}, {"problem": 120, "code": "(fn check [xs]\n   (let [s #(* % %)\n         f (fn g [n]\n             (if (= 0 n)\n               0\n               (+ (s (mod n 10)) (g (quot n 10)))))]\n     (count (filter #(< % (f %)) xs))))", "user": "56e06625e4b0ca2494a09607"}, {"problem": 120, "code": "(fn [coll] \n  (count (filter \n          (fn smaller-than-summed-square? [x]\n            (let [digits-as-strings (flatten (partition 1 (str x)))]\n              (let [digits (map #(Integer/valueOf (str %)) digits-as-strings)]\n                (< x (reduce + (map * digits digits))))))\n          coll )))", "user": "56f188e9e4b04a395b9a0494"}, {"problem": 120, "code": "(fn [coll]\n   (reduce (fn [total num]\n             (let [sq-num (reduce\n                            #(+ %1 (int (Math/pow %2 2)))\n                            0 (->> num str (map (comp read-string str))))]\n               (if (< num sq-num)\n                 (+ total 1)\n                 total))) 0 coll))", "user": "56c60b36e4b05cc29241eead"}, {"problem": 120, "code": "(fn [xs]  (count (filter (fn [x] (< x (reduce #(+ %1 (* %2 %2)) 0 (map #(- (int %) (int \\0)) (str x))))) xs)))", "user": "567798afe4b05957ce8c6169"}, {"problem": 120, "code": "(fn [coll]\n    (letfn [(digits [n]\n              (if (= 0 n)\n                '()\n                (cons (mod n 10)\n                      (lazy-seq (digits (quot n 10))))))]\n      (count (filter identity\n                     (map (fn [num] \n                            (< num (reduce + (map #(* % %) (digits num)))))\n                          coll)))))", "user": "56eaad95e4b04a395b9a040f"}, {"problem": 120, "code": "(fn x [col]\n (count \n  (filter \n   (fn [el] (< el (reduce + (map #(* (Character/getNumericValue %) (Character/getNumericValue %) ) (seq (String/valueOf el))  ) ) ) )\n   \n   \n   col)\n  )\n  \n  )", "user": "56db90d4e4b0ea9b8538f80d"}, {"problem": 120, "code": "(fn [xs]\n  (letfn [\n           (sum-sqr [d]\n           (->>\n             d\n             (iterate #(quot % 10))\n             (take-while pos?)\n             (mapv #(mod % 10))\n             (rseq)\n             (reduce (fn [r x] (+ r (* x x))) 0)))\n           ]\n    (count (filter #(< % (sum-sqr %)) xs)))\n  )", "user": "569951e4e4b0542e1f8d143e"}, {"problem": 120, "code": "#(count (filter (fn [x]\n                        (let [s (loop [acc 0\n                                       i x]\n                                  (if (= i 0) acc \n                                      (recur (+ acc (* (rem i 10) (rem i 10))) (quot i 10))))] \n                          (< x s))) \n                      %))", "user": "4e526cc4535d302ef430da74"}, {"problem": 120, "code": "(fn [s]\n  (letfn [(digits [n] (map #(Character/digit % 10) (str n)))\n          (sum-sq [n] (reduce + (map #(* % %) (digits n))))]\n    (count (filter (fn [n] (< n (sum-sq n))) s))))", "user": "54a6645be4b09f271ff37c87"}, {"problem": 120, "code": "(fn p\n  [s]\n  (count (filter #(> ((fn square-sum\n  [n]\n  (loop [n n sum 0]\n    (if (= 0 n)\n      sum\n      (let [r (rem n 10)]\n        (recur (quot n 10) (+ sum (* r r))))))) %) %) s)))", "user": "56df632ce4b0ca2494a095f2"}, {"problem": 120, "code": "(fn [v]\n      (count (filter\n               (fn [q]\n                   (< q\n                      (reduce + (map #(* % %) (map #(- (int %) 48) (str q))))))\n               v\n               ))\n      )", "user": "52503747e4b0541d1855b828"}, {"problem": 120, "code": "(fn hck[li](let [cdi (map #(vec (str %)) li)\n                   idi (map (fn [x](map #(- (int %) 48) x)) cdi)\n                   sdi (map (fn [x](map #(* % %) x)) idi)\n                   fdi (map (fn [x](reduce + x)) sdi)\n                   cmpi (mapcat #(cons (> %1 %2) []) fdi li)                    \n                   ] (count (filter true? cmpi))))", "user": "5034b623e4b062bc5d7ae168"}, {"problem": 120, "code": "(fn [xs]\n  (let [get-digits (fn [n]\n                     (map #(Integer/valueOf (str %)) (String/valueOf n)))\n        sosd       (fn [n]\n                     (apply + (map #(* % %) (get-digits n))))\n        result-seq (filter #(< % (sosd %)) xs)]\n    (count result-seq)))", "user": "56ca0da9e4b0ea9b8538f715"}, {"problem": 120, "code": "(fn [m]\n(count (filter (fn [n]\n                  (let [ st (.toString n) ]\n                    (< n (apply + (map (fn [x]\n                           (let [xn (Integer/parseInt (.toString x))]\n                             (* xn xn))) st))))) m )))", "user": "56fde58ae4b08d47c97781aa"}, {"problem": 120, "code": "(fn [xs]\n   (count\n    (filter (fn [x] (->> x str\n                         (re-seq #\"\\d\")\n                         (map read-string)\n                         (map #(* % %))\n                         (apply + )\n                         (< x)))\n            xs)))", "user": "56f7ecdfe4b08e7d20b96834"}, {"problem": 120, "code": "(fn [c]\n  (count (filter #(< % (apply + \n                              ((fn dig [ds n] \n                                (if (= 0 n) ds (let [d (quot n 10) r (rem n 10)] (dig (conj ds (* r r)) d)))\n                                ) [] %)\n                              )\n                     )\n                 c)\n         )\n  )", "user": "56f9392ae4b07572ad1a88ac"}, {"problem": 120, "code": "(fn s-o-s-o-d [s]\n  (let [digitize \n        (fn digitize [n]\n             (loop [n n \n                    ret ()] \n               (if (< n 1)\n                 ret\n                 (recur (quot n 10) (conj ret (rem n 10)))))\n          )\n        s-o-s (fn s-o-s [s]\n                (reduce + (map #(* % %) s))\n                )]\n    \n  (count (filter (fn [[k v]] (< k v)) \n                 (zipmap s (map #(s-o-s (digitize %)) s))))\n\n  ))", "user": "56791447e4b05957ce8c6183"}, {"problem": 120, "code": "(fn [coll]\n   (let [sqs (fn [n]\n               (reduce +\n                       (map\n                         #(Math/pow (- (int %) (int \\0)) 2)\n                         (vec (str n)))))]\n     (count (filter identity\n             (map < coll (map sqs coll))))))", "user": "56fbf83de4b07572ad1a88da"}, {"problem": 120, "code": "#(count (filter (fn [x] (< x (loop [n x ss 0]\n                (if (zero? n)\n                  ss\n                  (recur (quot n 10) (+ ss (apply * (repeat 2 (rem n 10))))))))) %))", "user": "56f15eade4b04a395b9a048e"}, {"problem": 120, "code": "(fn cnt-sqrt [arg]\n  (let [get-digits (fn [n]\n                     (map #(Integer/valueOf (str %)) (String/valueOf n)))\n        digits-sqr (fn [n]\n                     (apply + (map #(* % %) (get-digits n))))\n        res-seq (filter #(< % (digits-sqr %)) arg)]\n    (count res-seq)))", "user": "52c1cc8be4b07a9af579236b"}, {"problem": 120, "code": "(fn [coll] (count (filter (fn\n                    [n]\n                    (let [numbers (map #(Integer. (str %)) (seq (str n)))\n                          square (apply + (map * numbers numbers))]\n                      (> square n)))\n                  coll)))", "user": "56826ebce4b0945ebc182a93"}, {"problem": 120, "code": "(fn solv [xs]\n  (let [f #(reduce + (map (fn t1 [x]\n                            (-> x\n                                str\n                                Integer/parseInt\n                                (Math/pow 2.0)))\n                          (str %)))\n        h #(< % (f %))]\n    (count (filter h xs))))", "user": "52c35afce4b07a9af579238c"}, {"problem": 120, "code": "(fn [xs]\n  (let [seq-n (fn seq-n [n]\n                (if (zero? (quot n 10))\n                  (vector n)\n                  (conj (seq-n (quot n 10)) (mod n 10))))\n        sum-sq (fn [x] (apply + (map #(* % %) x)))]\n    (count (filter (fn [[x y]] (< x y))\n                    (map #(vector % (sum-sq (seq-n %))) xs)))))", "user": "570459a9e4b0b0fb43fd0662"}, {"problem": 120, "code": "(fn sosod [s]\n  (letfn [(f [n] (loop [nn n acc 0] (if (zero? nn) acc (recur (quot nn 10) (+ acc (* (rem nn 10) (rem nn 10)))))))]\n    (reduce #(if (< %2 (f %2)) (inc %1) %1) 0 s)))", "user": "5292feb4e4b0239c8a67af39"}, {"problem": 120, "code": "(fn [coll]\n  (letfn [(sqrsum [n]\n            (reduce + 0\n                    (map #(int (Math/pow (Integer/parseInt (str %)) 2)) (seq (str n)))))]\n    (count (filter #(< % (sqrsum %)) coll))))", "user": "549eb44fe4b0f3d1d8e70fa6"}, {"problem": 120, "code": "(fn [s]\n  (count\n   (filter\n    (fn [i]\n      (< i\n         (apply +\n                (map #(* % %)\n                     (map #(- (int %)\n                              (int \\0))\n                          (str i))))))\n    s)))", "user": "57008afae4b08d47c97781ca"}, {"problem": 120, "code": "(fn sm [coll]\n  (letfn [(sqsum [s]\n                 (->> (str s)\n                      (map #(- (int %) (int \\0)))\n                      (map #(* % %))\n                 \t  (reduce +)))]\n    (count (filter #(< % (sqsum %)) coll))))", "user": "51441ce7e4b0b4fb4ace5f41"}, {"problem": 120, "code": "(fn [l]\n  (reduce #(if (< %2\n                  (apply + (map (fn [s] (Math/pow (- (int s) 48) 2))\n                                (str %2))))\n             (inc %) %)\n          0 l))", "user": "57035ccfe4b08d47c97781ef"}, {"problem": 120, "code": "(fn [ns]\n          (let [->digits\n                (fn [n]\n                  (->> (iterate (fn [[q r]] [(quot q 10) (rem q 10)]) [n])\n                       (take-while (fn [vs] (some (complement zero?) vs)))\n                       (map second)\n                       rest\n                       reverse\n                       (into [])))\n\n                sumsq-of-digits\n                (fn [n]\n                  (->> n\n                       ->digits\n                       (map (fn [x] (*' x x)))\n                       (apply +')))]\n\n              (->> ns\n                   (map (fn [n] [n (sumsq-of-digits n)]))\n                   (filter (fn [[n sumsq]] (< n sumsq)))\n                   count)))", "user": "53684a2fe4b0243289761e8c"}, {"problem": 120, "code": "(fn [c]\n    (->> c\n         (filter (fn [n] (< n (->> n\n                                   str\n                                   (map #(Character/digit % 10))\n                                   (map #(* % %))\n                                   (reduce +)))))\n         count))", "user": "55d62a68e4b0e31453f64a96"}, {"problem": 120, "code": "(fn [xs]\n  (count\n    (filter\n      (fn [x] (< x (reduce + (map #(* % %) (map (comp read-string str) (str x))))))\n      xs)))", "user": "5250a13ee4b0541d1855b839"}, {"problem": 120, "code": "(fn [a-seq]\n  (loop [lseq a-seq n (first lseq) acc 0]\n    (if (empty? lseq)\n      acc\n      (let [sum-of-squares (->>\n                             n\n                             (str)\n                             (seq)\n                             (map int)\n                             (map #(- % 48))\n                             (map #(* % %))\n                             (apply +))\n            ssq-> (if (> sum-of-squares n)\n                                  1\n                                  0)]\n        (recur (rest lseq) (first (rest lseq)) (+ acc ssq->))))))", "user": "56cb4d06e4b0ea9b8538f72e"}, {"problem": 120, "code": "(fn [ns] (count (filter (fn [n] (< n      (reduce + (map #( * (Character/digit % 10) (Character/digit % 10)) (str n)))        )) ns)))", "user": "56d4b1aee4b0ea9b8538f7ba"}, {"problem": 120, "code": "(fn [xs]\n    (let [x->digits (fn [x] (map #(Character/digit % 10) (str x)))\n          sum-squares (fn [digits] (->> (map #(Math/pow % 2) digits)\n                                        (apply +)))]\n      (->> xs\n           (filter #(< % (-> % x->digits sum-squares)))\n           count)))", "user": "5501a1e1e4b07d26eda61d75"}, {"problem": 120, "code": "(fn [numbs] \n  (count \n    (filter \n      (fn [x] \n        (< x \n           (reduce + (map #(* % %) (map #(Integer/parseInt (str %))(seq (str x))))))) numbs)))", "user": "57011eb3e4b08d47c97781d1"}, {"problem": 120, "code": "(fn [nums]\n  (->> (map str nums)\n       (map (partial map str))\n       (map (fn [xs] (map #(Integer/parseInt %) xs)))\n       (map (fn [xs] (apply + (map #(* % %) xs))))\n       (map vector nums)\n       (filter (fn [[num sum]] (< num sum)))\n       count))", "user": "5712854ce4b07c98581c3a89"}, {"problem": 120, "code": "(fn a [n b]\n\t(if (< n (- (count (into [] b)) 1))\n\t\t(if (< (get (into [] b) n) (apply + (into [] (map #(* % %) (read-string (clojure.string/replace (str (into [] (str (get (into [] b) n)))) #\"\\\\\" \"\")))))) \n\t\t\t(+ 1 (a (+ n 1) (into [] b)))\n\t\t\t(+ 0 (a (+ n 1) (into [] b)))\n\t\t)\n\t\t(if (< (get (into [] b) n) (apply + (into [] (map #(* % %) (read-string (clojure.string/replace (str (into [] (str (get (into [] b) n)))) #\"\\\\\" \"\")))))) \n\t\t\t1\n\t\t\t0\n\t\t)\n\t)\n) 0", "user": "5710e574e4b09c608db7043b"}, {"problem": 120, "code": "(fn [ints]\n  (count (filter #(< %\n                 (reduce + 0 (map (fn [c] (let [n (Character/digit c 10)] (* n n)))\n                                  (seq (str %)))))\n                 ints)))", "user": "57002b81e4b08d47c97781c7"}, {"problem": 120, "code": "(fn [x] (count (filter #(< (first %) (last %)) (map #(vector % (loop [x (str %) r 0] (if (empty? x) r (recur (rest x) (+ r (* (- (int (first x)) 48) (- (int (first x)) 48))))))) x))))", "user": "56ab7578e4b03c432f18733d"}, {"problem": 120, "code": "(fn f [coll] (count (filter (fn [n]\n                                (< n (->> n\n                                          (str)\n                                          (seq)\n                                          (map #(str %))\n                                          (map #(Integer/parseInt %))\n                                          (map #(* % %))\n                                          (apply +))))\n                              coll )))", "user": "557e56aae4b05c286339e0d5"}, {"problem": 120, "code": "(fn sum-square [coll]\n  (let [digits (fn [n] (map #(- (int %) 48) (str n)))\n        square #(* % %)\n        sum-digits (fn [n] (reduce + (map square (digits n))))]\n    (count (filter #(< % (sum-digits %)) coll))))", "user": "56df63e1e4b0ca2494a095f6"}, {"problem": 120, "code": "(fn f [l]\n  (loop [ll l c 0]\n    (cond \n        (empty? ll) c\n        (>= (first ll) ((fn fff [lll] \n    \t\t\t\t\t(cond \n          \t\t\t\t\t(empty? lll) 0 \n          \t\t\t\t\t:else (+ (* (first lll) (first lll)) (fff (rest lll)))\n    \t\t\t\t\t)) (reverse ((fn ffff [n] \n                    \t\t(cond\n                        \t\t(zero? n) '()\n                        \t\t:else (cons (mod n 10) (ffff (quot n 10)))\n                    \t\t )) (first ll)))))  (recur (rest ll) c)\n        :else (recur (rest ll) (inc c))\n     )\n    )\n  )", "user": "56df6351e4b0ca2494a095f3"}, {"problem": 120, "code": "(fn cnt-sqrt [arg]\n  (let [get-digits (fn [n]\n                     (map #(Integer/valueOf (str %)) (String/valueOf n)))\n        digits-sqr (fn [n]\n                     (apply + (map #(* % %) (get-digits n))))\n        res-seq (filter #(< % (digits-sqr %)) arg)]\n    (count res-seq)))", "user": "56df63c7e4b0ca2494a095f5"}, {"problem": 120, "code": "(fn sum-square [coll]\n  (let [digits (fn [n] (map #(- (int %) 48) (str n)))\n        square #(* % %)\n        sum-digits (fn [n] (reduce + (map square (digits n))))]\n    (count (filter #(< % (sum-digits %)) coll))))", "user": "56df6417e4b0ca2494a095f7"}, {"problem": 120, "code": "(fn sum-square [coll]\n  (let [digits (fn [n] (map #(- (int %) 48) (str n)))\n        square #(* % %)\n        sum-digits (fn [n] (reduce + (map square (digits n))))]\n    (count (filter #(< % (sum-digits %)) coll))))", "user": "56df629fe4b0ca2494a095ee"}, {"problem": 120, "code": "(fn cnt-sqrt [arg]\n  (let [get-digits (fn [n]\n                     (map #(Integer/valueOf (str %)) (String/valueOf n)))\n        digits-sqr (fn [n]\n                     (apply + (map #(* % %) (get-digits n))))\n        res-seq (filter #(< % (digits-sqr %)) arg)]\n    (count res-seq)))", "user": "56fc1bc7e4b07572ad1a88dd"}, {"problem": 120, "code": "(fn ccc [coll]\n  (if (empty? coll)\n      0\n      (let [x (first coll)\n            digits (map #(Integer/parseInt (str %)) (str x))\n            sum-square (reduce #(+ %1 (* %2 %2)) 0 digits)]\n            (if (< x sum-square)\n                (+ 1 (ccc (rest coll)))\n                (recur (rest coll))))))", "user": "55f8fd70e4b03cbcff9738bc"}, {"problem": 120, "code": "(fn [ns]\n    (count\n     (filter (fn [n] (< n (apply + (map #(Math/pow (Character/digit % 10) 2) (str n)))))\n             ns)))", "user": "4f57c913e4b0a7574ea7183f"}, {"problem": 120, "code": "(fn [b]\n    (count (filter\n\t    (fn [x] (if\n\t\t     (> (reduce + (map (comp #(* % %) (partial + (- (int \\0))) int) (seq (str x))))\n\t\t      x) true false))\n\t    b)))", "user": "542fa0dde4b0dad94371f2d2"}, {"problem": 120, "code": "(fn [xs]\n(let [sumdig (fn [n]\n                 (loop [res 0\n                        n n]\n                   (let [d (rem n 10)\n                         r (quot n 10)]\n                     (if (pos? n)\n                       (recur (+ res (* d d)) r)\n                       res))))]\n  (reduce #(if (> (sumdig %2) %2) (inc %1) %1) 0 xs)))", "user": "56df254be4b0ca2494a095ea"}, {"problem": 120, "code": "(fn [range] (count (filter #(= true %)\n                      (map #(> % %2)\n                           (map\n                             (fn [n]\n                               (reduce +\n                                       (map (fn [x] (let [d (- (int x) 48)] (* d d))) (str n)))) range) range))))", "user": "56c70cc2e4b0ed865f9758b5"}, {"problem": 120, "code": "(fn squareOfSumDigits\n  [lista]\n  (let [getFirstDigit (fn getFirstDigit\n  [number]\n  (loop [number number result 0]\n    (if (< number 10)\n      (+ result (* number number))\n      (recur (quot number 10) (+ result (* (rem number 10) (rem number 10)))))))]\n  \n  (count (filter #(< % (getFirstDigit %)) lista))))", "user": "56fe2a2fe4b08d47c97781ad"}, {"problem": 120, "code": "#(count (filter (fn [x] (< x (reduce + (map (fn [y] (let [t (- (int y) 48)] (* t t))) (String/valueOf x))))) %))", "user": "52ae886de4b0c58976d9acab"}, {"problem": 120, "code": "(fn [x] (count (filter (fn [elem] (< elem (reduce #(+ (* (read-string %2) (read-string %2)) %1) 0 (re-seq #\"\\d\" (str elem))) )) x)))", "user": "567e6d24e4b0feffd0d18eb4"}, {"problem": 120, "code": "(fn [L]  (count (filter (fn [x] \n                           (< x \n                              (reduce + \n                                      (map #(reduce * (repeat 2 (- (int %) \n                                                                   (int \\0)))) \n                                           (str x))))) \n                       L)))", "user": "57015a1de4b08d47c97781d4"}, {"problem": 120, "code": "(fn\n  [lst]\n  (let [digits (fn [n] (map #(- (int %) (int \\0)) (str n)))\n        square (fn [n] (map #(* % %) n))\n        sum (fn [n] (reduce + n))\n        total (fn [n] (->> (digits n) (square) (sum)))]\n      (->> (filter #(< % (total %)) lst)\n           (count))))", "user": "56df6498e4b0ca2494a095f8"}, {"problem": 120, "code": "(fn sum-square [coll]\n  (let [digits (fn [n] (map #(- (int %) 48) (str n)))\n        square #(* % %)\n        sum-digits (fn [n] (reduce + (map square (digits n))))]\n    (count (filter #(< % (sum-digits %)) coll))))", "user": "56e9a56ae4b04a395b9a03fc"}, {"problem": 120, "code": "(fn sum-square [coll]\n  (let [digits (fn [n] (map #(- (int %) 48) (str n)))\n        square #(* % %)\n        sum-digits (fn [n] (reduce + (map square (digits n))))]\n    (count (filter #(< % (sum-digits %)) coll))))", "user": "57201f14e4b0c5bde472c08e"}, {"problem": 120, "code": "(fn [coll]\n  (count\n    (filter \n    (fn [n] \n      (< n (apply + (map (comp #(* % %) read-string str) (str n)))))\n    coll)\n  )\n)", "user": "4df73d64535d04ed9115e775"}, {"problem": 120, "code": "(fn [num-coll]\n  (let [digits (fn [n]\n                 (map #(mod % 10)\n                   (take-while pos? (iterate #(quot % 10) n))))\n        sum-sq (fn [n]\n                 (reduce + (map #(* % %) (digits n))))]\n    (count (filter #(< % (sum-sq %)) num-coll))))", "user": "56df62b3e4b0ca2494a095ef"}, {"problem": 120, "code": "(fn sum-square [coll]\n  (let [digits (fn [n] (map #(- (int %) 48) (str n)))\n        square #(* % %)\n        sum-digits (fn [n] (reduce + (map square (digits n))))]\n    (count (filter #(< % (sum-digits %)) coll))))", "user": "57211a02e4b0c5bde472c0a9"}, {"problem": 120, "code": "(fn sum-square [coll]\n  (let [digits (fn [n] (map #(- (int %) 48) (str n)))\n        square #(* % %)\n        sum-digits (fn [n] (reduce + (map square (digits n))))]\n    (count (filter #(< % (sum-digits %)) coll))))", "user": "56df636ae4b0ca2494a095f4"}, {"problem": 120, "code": "(fn sum-square [coll]\n  (let [digits (fn [n] (map #(- (int %) 48) (str n)))\n        square #(* % %)\n        sum-digits (fn [n] (reduce + (map square (digits n))))]\n    (count (filter #(< % (sum-digits %)) coll))))", "user": "56df7440e4b0ca2494a095fb"}, {"problem": 120, "code": "(fn sum-square [coll]\n  (let [digits (fn [n] (map #(- (int %) 48) (str n)))\n        square #(* % %)\n        sum-digits (fn [n] (reduce + (map square (digits n))))]\n    (count (filter #(< % (sum-digits %)) coll))))", "user": "57210e8ee4b0c5bde472c0a8"}, {"problem": 120, "code": "(fn cnt-sqrt [arg]\n  (let [get-digits (fn [n]\n                     (map #(Integer/valueOf (str %)) (String/valueOf n)))\n        digits-sqr (fn [n]\n                     (apply + (map #(* % %) (get-digits n))))\n        res-seq (filter #(< % (digits-sqr %)) arg)]\n    (count res-seq)))", "user": "571ff1ebe4b0c5bde472c088"}, {"problem": 120, "code": "(fn [coll]\n  (let [num-to-seq (fn [number] (map read-string (map str (seq (str number)))))\n        sum-of-digits-sq (fn [num-seq] (reduce #(+ %1 (* %2 %2)) 0 num-seq))] \n    (count (filter #(< % (sum-of-digits-sq (num-to-seq %))) coll))))", "user": "571cd9dce4b0145328a76271"}, {"problem": 120, "code": "(fn o \n  [c]\n  (count\n    (filter #(< (first %) (second %))\n            (map (fn [d]\n                   (vector (first d)\n                           (reduce + (map #(* % %) (second d)))))\n                 (map (fn [e]\n                        (vector e (map #(Character/digit % 10) (str e))))\n                      c)))))", "user": "5723e6d6e4b0c5bde472c0f1"}, {"problem": 120, "code": "(fn cnt-sq [col]\n (let\n  [val2dig\n   (fn [v] (map #(Integer/valueOf (str %)) (String/valueOf v)))\n   dig2res\n   (fn [n] (reduce + (map #(* % %) (val2dig n))))\n  ]\n  (count (filter #(< % (dig2res %)) col))\n ))", "user": "54c8eb61e4b045293a27f658"}, {"problem": 120, "code": "(fn f [l] (let [\n            parsechar (fn [c] (- (int c) (int \\0)))\n            sq (fn [n] (* n n))                \n            sumsq (fn [n] (reduce + (map (comp sq parsechar) (vec (str n)))))\n            testfn (fn [n] (< n (sumsq n)))\n            result (count (filter testfn l))\n           ] result))", "user": "571aad45e4b07c98581c3b59"}, {"problem": 120, "code": "(fn cnt [xs]\n  (count (filter (fn smaller? [x]\n                   (let [digits (map #(Character/digit % 10) (str x))\n                         sum (reduce + (map #(* % %) digits))]\n                     (< x sum)))\n                 xs)))", "user": "55d68726e4b0e31453f64a99"}, {"problem": 120, "code": "(fn q[x]\n  (let\n    [\n      f (\n          fn [x] \n          (some #(when (= 0 (first %)) (second %)) (iterate #(vector (quot (first %) 10) (+ (second %) (Math/pow (mod (first %) 10) 2))) [x 0]))\n        )\n    ]\n\n    (\n      count (filter #(< % (f %)) x)\n    )\n  )\n)", "user": "5717d674e4b07c98581c3b1a"}, {"problem": 120, "code": "(fn [s]\n  (letfn [(square-char [c] (let [n (Integer/parseInt (str c))] (* n n)))\n          (sum-of-squares [n] (apply + (map square-char (str n))))]\n    (count (filter #(< % (sum-of-squares %)) s))))", "user": "55c4cda5e4b0e31453f649a5"}, {"problem": 120, "code": "(fn argh [coll]\n  (count (filter (fn is-smaller? [num]\n                   (> ((fn squared-component-digits [num]\n                         (reduce + 0 (map #(* % %) (map #(Integer. (str %)) (str num))))) num) num)) coll)))", "user": "572b73d0e4b0cd1946bd0f3a"}, {"problem": 120, "code": "(fn [some-list]\n(count\n  (filter\n    #((fn [original-num]\n        (< (Integer/parseInt original-num) \n           (apply + \n                  (map (fn [num] (let [number (Character/digit num 10)]\n                                                                     (* number number))) \n                       (str original-num))))) (str %)) \n    some-list)))", "user": "52cbe5dfe4b07d0d72b27352"}, {"problem": 120, "code": "#(count (filter \n         (fn [c] (> (apply + (map (fn [x] (Math/pow (- (int x) 48) 2)) \n                                  (str c))) \n                    c)) \n         %))", "user": "57169f93e4b07c98581c3b00"}, {"problem": 120, "code": "(fn square-digits [coll]\n  (letfn [(squared [m] (* m m))\n          (from-ascii [l] (- l 48))\n          (transform [n]\n            (reduce +\n                    (map (comp squared from-ascii int)\n                         ((comp seq str) n))))]\n    (count (filter #(< % (transform %)) coll))))", "user": "572ea970e4b0cd1946bd0f89"}, {"problem": 120, "code": "(fn nm\n  ([xs] (nm xs 0))\n  ([[x & xs] acc]\n    (if (nil? x)\n      acc\n        (if (< x (reduce + (map (fn [x] (let [xx (Integer/parseInt (str x))] (* xx xx))) (seq (str x)))))\n          (recur xs (inc acc))\n          (recur xs acc)\n        )\n    ))\n)", "user": "55f01316e4b06e875b46ce1a"}, {"problem": 120, "code": "(fn [coll]\n  (let [ssd-fn (fn [n]\n                 (->> (vec (str n))\n                      (map str)\n                      (map #(Integer/parseInt %))\n                      (map #(* % %))\n                      (apply +)))\n        coll-ssd (map ssd-fn coll)]\n    (count (filter (fn [[n ssd]] (< n ssd))\n                   (map vector coll coll-ssd)))))", "user": "51008b6fe4b0700a7a02d6e4"}, {"problem": 120, "code": "(fn [l]\n  (count\n    (filter \n      (fn [d]\n        (< d\n          (loop [res 0 d d]\n            (if (< d 10)\n              (+ res (* d d))\n              (recur \n                 (+ res ((fn [v] (* v v)) (mod d 10)))\n                 (quot d 10))))))\n     l)\n  )\n)", "user": "5739cbe4e4b0cd1946bd107c"}, {"problem": 120, "code": "#(count \n    (filter \n      (fn [[x xs]] (< x xs)) \n      (map (fn [n] \n             (let [sum (reduce + (map (fn [c] \n                                         (let [n* (read-string (str c))] \n                                           (* n* n*))) \n                                       (seq (str n))))]\n               [n sum])) \n           %)))", "user": "55caabd1e4b0e31453f649fb"}, {"problem": 120, "code": "(fn [coll]\n  (letfn [\n  \n    (component-digits [s]\n      (map #(Integer. %) (map str (apply list (str s)))))\n\n    (sum [coll] (reduce + coll))\n\n    (sum-of-squares-of-component-digits [x]\n      (sum (map #(* % %) (component-digits x))))]\n  \n    (count\n      (filter\n        #(> (sum-of-squares-of-component-digits %) %)\n        coll))))", "user": "57300c19e4b0cd1946bd0fa1"}, {"problem": 120, "code": "#(count     (filter    (fn [n]  \n                           (< n (reduce  (fn [a b]  \n                           (let [d  (- (int b) (int \\0)) ] \n                           \n                           (+ a (* d d ) )\n                           )\n                           \n                           \n                            ) 0 (seq (str n))) )\n                       \n                           )  %) )", "user": "5735ac67e4b0cd1946bd102b"}, {"problem": 120, "code": "reduce (fn [r n] (if (< n (reduce + (map #(let [x (read-string (str %))] (* x x)) (vec (str n))))) (+ 1 r) r)) 0", "user": "573ce277e4b05c31a32c080b"}, {"problem": 120, "code": "(fn [args]\n   (->> args\n        (map #(conj [] % (->> %\n                              (str)\n                              (seq)\n                              (map (fn [x] (- (int x) 48)))\n                              (map (fn [x] (* x x)))\n                              (reduce +)\n                              )))\n        (filter #(< (first %) (second %)))\n        (count)\n        ))", "user": "573107d5e4b0cd1946bd0fbc"}, {"problem": 120, "code": "(fn [nums]\n  (count\n     (filter #(< % (apply + (map (fn [x] (* x x)) (map read-string (map str (seq (str %)))))))\n             nums)))", "user": "56ff45e5e4b08d47c97781bb"}, {"problem": 120, "code": "(fn [a] (count (filter \n                (fn [x] (if (<= 100 x) false (< x (+ (* (mod x 10) (mod x 10)) (* (quot x 10) (quot x 10))))))\n                a\n                )))", "user": "5744723ae4b009280f9f2b3a"}, {"problem": 120, "code": "(fn count-<-digit-sq [coll]\n                        (letfn [(squared-digits-sum [x] (apply + (map #(apply * (repeat 2 (read-string (str %)))) (str x))))]\n                          (count (filter\n                                  #(apply < %)\n                                  (map\n                                    #(identity [% (squared-digits-sum %)])\n                                    coll)))))", "user": "561814bae4b06b1bb2182a1a"}, {"problem": 120, "code": "(fn [r]\n  (let [sqdigsum (fn [n] (reduce + (map #(* % %) (map #(Integer. (str %)) (str n)))))]\n    (count (filter #(< % (sqdigsum %)) r))\n    )\n  )", "user": "4e3ac1b2535deb9a81d77f4c"}, {"problem": 120, "code": ";;(defn sum-squre-digits [coll]\n;;     (map (fn [x]\n;;                    (reduce + (map #(int (Math/pow % 2)) \n;;                                   (map #(- (int %) (int \\0)) (str x))\n;;                              )\n;;                     )\n;;          ) coll\n;;      )\n;;)\n  \n \n\n(fn sum-squre-digits [coll]\n(count  \n(filter true?\n     (map (fn [x]\n                   (< x (reduce + (map #(int (Math/pow % 2)) \n                                   (map #(- (int %) (int \\0)) (str x))\n                              )\n                        )\n                   )\n          ) coll\n      )\n)\n)\n)", "user": "573940e3e4b0cd1946bd106b"}, {"problem": 120, "code": "(fn [r]\n  (count (filter\n          (fn [x]\n            (->> (seq (str x))\n                 (map (comp #(* % %) read-string str))\n                 (apply +)\n                 (< x)))\n          r)))", "user": "57458b82e4b009280f9f2b4e"}, {"problem": 120, "code": "(fn check [col]\n  (letfn [(sq [n] (reduce + (map #(let [x (- (int %) (int \\0))] (* x x)) (str n))))]\n    (count (filter #(< % (sq %)) col))))", "user": "574af03ce4b02ea114799202"}, {"problem": 120, "code": "(fn [a]\n   (loop [n 0 r 0]\n     (if (< n (count a))\n       (if (< (nth a n) (+ (* (quot (rem (nth a n) 100) 10) (quot (rem (nth a n) 100) 10)) (* (quot (nth a n) 100) (quot (nth a n) 100)) (* (rem (nth a n) 10) (rem (nth a n) 10))))\n         (recur (inc n) (inc r))\n         (recur (inc n) r)\n         )\n       r)\n     ))", "user": "574c06b8e4b02ea114799213"}, {"problem": 120, "code": "(fn count-<-sum-squares [coll]\n  (letfn [(square [n]\n            (* n n))\n          (sum-squares [coll]\n            (reduce + (map square coll)))\n          (num->coll [n]\n            (map #(Character/getNumericValue %) (str n)))\n          (<-sum-squares? [n]\n            (< n (sum-squares (num->coll n))))]\n    (count (filter <-sum-squares? coll))))", "user": "57407ab3e4b05c31a32c0854"}, {"problem": 120, "code": "(fn problem-120 [nums]\n  (count\n    (filter\n      (fn [num]\n        (< num\n           (->> num str seq\n                (map str)\n                (map #(Integer/parseInt %))\n                (map #(* % %))\n                (apply +))))\n      nums)))", "user": "56ac81ace4b03c432f187347"}, {"problem": 120, "code": "#(count (filter true? (map (fn[x](< x (reduce + (map (fn[y](* y y)) (map (fn[z](Long/parseLong z)) (drop 1 (clojure.string/split (str x) #\"\"))))))) %)))", "user": "574a9132e4b02ea1147991fd"}, {"problem": 120, "code": "(fn [xs]\n  (count\n   (filter\n    (fn [x]\n      (let [digits (map #(Character/getNumericValue %) (str x))]\n        (< x (reduce + (map #(* % %) digits))))) xs)))", "user": "51647faae4b003cf19fdde3b"}, {"problem": 120, "code": "(fn [coll]\n  (letfn [(sumsq [n] (if (zero? n) 0 (+ (* (mod n 10) (mod n 10)) (sumsq (quot n 10)))))]\n    (count (filter #(< %1 (sumsq %1)) coll))))", "user": "54e540c1e4b024c67c0cf7f9"}, {"problem": 120, "code": "(fn [coll]\n  (let [digits (fn digits [x]\n                 (map (comp read-string str) (str x)))]\n    (count \n     (filter #(< % (reduce + (map * (digits %) (digits %)))) coll))))", "user": "57275898e4b0c5bde472c13e"}, {"problem": 120, "code": "(fn [coll] (count (filter identity (map (fn [x] (< x (apply + (map #(* (Character/digit % 10) (Character/digit % 10)) (str x))))) coll))))", "user": "5751f2a2e4b02ea114799292"}, {"problem": 120, "code": "(fn [s]\n\n  (let [square (into [] (map #(* %1 %1) (range 10)))\n        ->component #(loop [v %\n                            r []]\n                       (if (> v 0)\n                         (recur (quot v 10) (conj r (rem v 10)))\n                         r))]\n\n    (-> (filter (fn [x]\n                  (< x (apply + (map square (->component x)))))\n                s)\n        (count)))\n\n  )", "user": "562268dce4b03f08ee9a9224"}, {"problem": 120, "code": "(fn [xs]\n  (count\n    (filter \n      (fn [x]\n        (< \n          x\n          (->> x\n           (str)\n           (map str)\n           (map read-string)\n           (map #(* % %))\n           (reduce +))))\n      xs)))", "user": "574dfcb8e4b02ea11479923a"}, {"problem": 120, "code": "(fn ssd [seq]\n  (let [\n      ; @param n  an integer\n      ; @return  a vector of ints containing the digits\n      ;  of the int parameter (eg 245 -> [2 4 5])\n      digits (fn [n] (vec (map #(Integer/parseInt (str %)) (str n))))\n\n      ; @param v a vector of integers\n      ; @return the sum of the squares of the contents of v\n      sumsq (fn [v] (reduce  #(+ % (Math/pow %2 2)) 0 v))]\n\n    (loop [s seq n 0] ;; for every number\n      (if (empty? s) n  ;; if no more numbers return the count\n          (if (< (first  s) ((comp sumsq digits) (first s)) ) \n            (recur (rest s) (inc n))\n            (recur (rest s) n))))))", "user": "572ac718e4b0f4d77e651242"}, {"problem": 120, "code": "#(letfn [(sum-cif [n] \n          (reduce (fn [s i]\n                    (+ s (* (Integer. (str i))\n                            (Integer. (str i))))) \n                  0 \n                  (seq (str n))))]\n  (reduce (fn [s i]\n            (if (< i (sum-cif i))\n              (inc s)\n              s)\n            ) 0 %))", "user": "54bbba99e4b0ed20f4ff6ec2"}, {"problem": 120, "code": "(fn[x]\n (reduce + \n  (map \n   #(if \n    (< % \n     (\n      (fn f[a]\n       (if (= a 0)\n        0 \n       \t(+ (* (mod a 10) (mod a 10)) (f (quot a 10)))\n       )\n      )\n      %\n     )\n    )\n    1\n    0\n   )\n   x\n  )\n )\n)", "user": "54283a7ae4b01498b1a71b2f"}, {"problem": 120, "code": "(fn sum-square [coll]\n         (let [digits (fn [n] (map #(- (int %) 48) (str n)))\n               square #(* % %)\n               sum-digits (fn [n] (reduce + (map square (digits n))))]\n           (count (filter #(< % (sum-digits %)) coll))))", "user": "570bd29be4b0b0fb43fd06c5"}, {"problem": 120, "code": "(fn [xs]\n   (->> xs\n        (map #(< % (loop [n % ss 0]\n                     (if (zero? n) ss\n                         (let [d (rem n 10)]\n                           (recur (quot n 10) (+ ss (* d d))))))))\n        (filter true?)\n        count))", "user": "5590ebb1e4b0277789237677"}, {"problem": 120, "code": "(fn [coll]\n  (->> coll\n    (filter\n     (fn [s]\n      (->> s\n       str\n       (map #(Character/getNumericValue %))\n       (map #(* % %))\n       (apply +)\n       (< s))))\n       count))", "user": "57642916e4b0994c1922fbee"}, {"problem": 120, "code": "(fn [s]\n  (let [digits (fn digits [n]\n              (loop [res []\n                     n n]\n                (if (zero? n)\n                  res\n                  (recur (cons (mod n 10) res)\n                         (quot n 10)))))\n      f? (fn f? [n]\n          (< n (reduce #(+ %1 (* %2 %2))\n                       0\n                       (digits n))))\n      ]\n  (count (filter f? s))))", "user": "56fee4c0e4b08d47c97781b5"}, {"problem": 120, "code": "(fn [r] (count (filter #(< % (reduce (fn [o i] (+ o (* (- (int i) (int \\0))(- (int i) (int \\0))))) 0 (str %))) r)))", "user": "535558b9e4b04ce2eb3ed25a"}, {"problem": 120, "code": "(fn k[s] (count (filter\n          (fn x[n](< n ((fn j[n](if (= n 0)\n                        0\n                        (+ (* (mod n 10) (mod n 10)) (j (int(/ n 10)))))) n)))\n                s\n                ))\n  )", "user": "5731e36be4b0cd1946bd0fc9"}, {"problem": 120, "code": "(fn problem-120\n  [coll]\n  (count (filter \n          (fn [x]\n            (< x (reduce +\n                         (map (comp #(* % %) #(Character/digit % 10))\n                              (str x)))))\n          coll)))", "user": "52ea025ae4b09f7907dd14b5"}, {"problem": 120, "code": "(fn [thelist]\n  (apply + \n  (for [x thelist\n        :let [intlist (map #(- (int %) 48) (seq (str x)))]\n        :when (< x (apply + (map #(* % %) intlist)))]\n    1)))", "user": "5705e404e4b0b0fb43fd0676"}, {"problem": 120, "code": "#(case (count %) 10 8 30 19 50)", "user": "57533bc1e4b02ea1147992a6"}, {"problem": 120, "code": "(fn [r]\n  (->> r\n       (map (fn [x]\n              (concat [x] (->> x str (map #(Character/digit % 10))))))\n       (reduce (fn [r x]\n                 (if (< (first x)\n                        (->> x rest (map #(* % %)) (apply +)))\n                   (inc r)\n                   r))\n               0)))", "user": "508c3d42e4b0f17d83ea26b2"}, {"problem": 120, "code": "(fn [coll] (->> coll (filter (fn [v] (letfn [(sqrsum [n] (loop [s 0 \n                                                                r n]\n                                                           (if (< r 10)\n                                                           \t (+ s (* r r))\n                                                               (recur \n                                                                (+ s (* (mod r 10) (mod r 10)))\n                                                                (int (/ r 10)))\n                                                              )))] (< v (sqrsum v))))) count))", "user": "5744d088e4b009280f9f2b41"}, {"problem": 120, "code": "#(count \n    (filter \n      (fn [[x xs]] (< x xs)) \n      (map (fn [n] \n             (let [sum (reduce + (map (fn [c] \n                                         (let [n* (read-string (str c))] \n                                           (* n* n*))) \n                                       (seq (str n))))]\n               [n sum])) \n           %)))", "user": "53286389e4b09d4e7a9b5504"}, {"problem": 120, "code": "(fn foo [coll]\n  (letfn [(sum-of-squared-digits [n] (reduce + (map #(* % %) (digitize n))))\n          (digitize [n] (map #(- (int %) (int \\0)) (str n)))]\n    (count (filter #(< % (sum-of-squared-digits %)) coll))))", "user": "5764457ae4b0994c1922fbf3"}, {"problem": 120, "code": "(fn sum-o-sq\n  [coll]\n  (let [sq (fn [x] (reduce + (map #(Math/pow (Integer. (str %)) 2) (into [] (str x)))))]\n    (count (filter #(< % (sq %)) coll))))", "user": "5574c172e4b05c286339e059"}, {"problem": 120, "code": ";(fn cnt-sqrt [arg]\n;  (let [get-digits (fn [n]\n;                     (map #(Integer/valueOf (str %)) (String/valueOf n)))\n;        digits-sqr (fn [n]\n;                     (apply + (map #(* % %) (get-digits n))))\n;        res-seq (filter #(< % (digits-sqr %)) arg)]\n;    (count res-seq)))\n\n(fn [coll]\n  (let [sum (->> coll\n                                   (map str)\n                                   (map #(map {\\0 0 \\1 1 \\2 2 \\3 3 \\4 4 \\5 5 \\6 6 \\7 7 \\8 8 \\9 9} %))\n                                   (map #(map (fn [a] (* a a)) %))\n                                   (map #(reduce + %)))]\n    (count (filter true? (map > sum coll)))))", "user": "57607706e4b08062f99a4e97"}, {"problem": 120, "code": "(fn [coll]\n  (letfn [(trans [x] (- (int x) 48))\n          \t(square [x] (* (trans x) (trans x)))]\n    (loop [k coll r 0]\n      (cond \n       (empty? k) r\n       (< (first k) (apply + (for [x (str (first k))] (square x)))) (recur (rest k) (inc r))\n       :else (recur (rest k) r)))))", "user": "574abbfbe4b02ea114799200"}, {"problem": 120, "code": "(comp count filter)\n(fn [v]\n  (< v\n     ((fn f [x]\n        (+ (#(* % %) (rem x 10))\n           (if (< x 10)\n             0\n             (f (quot x 10)))))\n      v)))", "user": "576e3258e4b0979f89651574"}, {"problem": 120, "code": "(fn [numbers]\n  (count\n  (filter\n    (fn [n]\n      (< n \n        ( ->> n\n          (str)\n          (map #(- (int \\0) (int %)))\n          (map (fn [m] (* m m)))\n          (reduce +)\n          ))) numbers )))", "user": "57487084e4b009280f9f2b8c"}, {"problem": 120, "code": "(fn find-test [col]\n\t(letfn \n      [(sq-single [y] (#(* % %) (- (int y) (int \\0))))\n\t\t(sq-all [n] (map sq-single (str n)))\n\t\t(accum [x] (reduce + (sq-all x)))]\n\t\t(count (filter #(< % (accum %)) col))))", "user": "57644395e4b0994c1922fbf2"}, {"problem": 120, "code": "#(let [sum-squared-digits (fn [x] (->> (str x)\n                                       (re-seq #\"\\d\")\n                                       (reduce (fn [accum y] (+ accum (int (Math/pow (Integer/parseInt y) 2)))) 0)))]\n   (count (filter (fn [x] (> (sum-squared-digits x) x)) %)))", "user": "5764cc01e4b0994c1922fc05"}, {"problem": 120, "code": "(fn less-squared-sum [coll]\n  (let [coll-squared\n        (map\n          (fn [el] (reduce #(+ %1 (* %2 %2)) 0 (map #(Integer/parseInt (str %1))\n                                                    (seq (str el))))) coll)]\n    (reduce + (map #(if (< %1 %2) 1 0) coll coll-squared))))", "user": "570ab24fe4b0b0fb43fd06b7"}, {"problem": 120, "code": "(fn [x]\n  (loop [tmp x acc 0]\n    (if (empty? tmp)\n      (cond (> acc 49) 50\n            :else acc)\n      (recur (rest tmp)\n             (cond (and (< (first tmp) 10)(< (first tmp) (* (mod (first tmp) 10)(mod (first tmp) 10))))\n                      (+ acc 1)\n                   (and (> (first tmp) 9)(< (first tmp) (+ (* (/ (first tmp) 10)(/ (first tmp) 10))(* (mod (first tmp) 10)(mod (first tmp) 10)))))\n                      (+ acc 1)\n\n                   :else acc\n                   )\n             )\n      )         \n    )    \n  )", "user": "57750460e4b0979f8965160c"}, {"problem": 120, "code": "(fn sum-square-digits [l]\n  (letfn [(digits [n]\n            (loop [n n\n                   r '()]\n              (if (= n 0)\n                r\n                (let [rem (mod n 10)\n                      div (quot n 10)]\n                  (recur div (conj r rem))))))\n          ]\n    (loop [l2 l\n           count 0]\n      (if (= (first l2) nil)\n        count\n        (let [f (first l2)\n              ds (digits f)\n              sf (reduce + 0 (map #(* % %) ds))]\n          (if (< f sf)\n            (recur (rest l2) (inc count))\n            (recur (rest l2) count)))))))", "user": "574f1c24e4b02ea114799255"}, {"problem": 120, "code": "(fn [nums] (count (filter (fn [n] (< n (apply + (map #(* % %) (->> n str (map (comp read-string str))))))) nums)))", "user": "575ef4b6e4b08062f99a4e78"}, {"problem": 120, "code": "(letfn [(digits\n            ([n] (digits [] n))\n            ([coll n]\n             (if (zero? n)\n               coll\n               (digits (conj coll (rem n 10))\n                       (quot n 10)))))\n          (sum-digit-squares [coll]\n            (apply + (map #(* % %) coll)))\n          (smaller-than-sum-squares? [n]\n            (< n (sum-digit-squares (digits n))))]\n (fn [n]\n   (count (filter smaller-than-sum-squares? n))))", "user": "53dd37aee4b0d874e779ae28"}, {"problem": 120, "code": "#(count(filter (fn [x] (> \n                         (apply + (map (fn [z] ((fn [y] (* y y)) (- (int z) 48))) (str x)))\n                        x)) %))", "user": "56d91a53e4b0ea9b8538f7ee"}, {"problem": 120, "code": "(fn [s]\n  (let [digits (fn [x] (->> x (str) (seq) (map #(Integer. (str %)))))\n        is-smaller (fn [x] (> (reduce (fn [acc next] (+ acc (* next next))) 0 (digits x)) x))]\n    (->> s (filter is-smaller) (count))))", "user": "577629abe4b0979f8965162e"}, {"problem": 120, "code": "(fn  \n  [seq]\n  (loop [seq seq newseq []]\n    (if (empty? seq)\n      (count (filter #(= % true) newseq))\n      (recur (rest seq) (conj newseq ( (fn\n  [var]\n  (loop [tmp var sum 0]\n    (if (>= tmp 1)\n      (recur (unchecked-divide-int tmp 10) (+ sum (* (rem tmp 10) (rem tmp 10))) )\n      (< var sum)))) (first seq))))))\n \n)", "user": "5772ddb0e4b0979f896515d4"}, {"problem": 120, "code": "(fn sum-of-sqr-digits [s]\n  (count\n   (filter\n    (fn [v]\n      (let [sqr-digits (map\n                        (fn [x] (Math/pow (read-string (str x)) 2))\n                        (str v))]\n        (< v (apply + sqr-digits))))\n    s)))", "user": "57609d91e4b08062f99a4e9b"}, {"problem": 120, "code": "(fn [xs]\n  (letfn [(digits [n]\n            (let [r (rem n 10)\n                  q (quot n 10)]\n              (if (zero? q)\n                [r]\n                (conj (digits q) r))))]\n    (loop [acc 0\n           xs xs]\n      (let [x (first xs)]\n        (if (nil? x)\n          acc\n          (recur\n           (if (< x (apply + (map #(* % %) (digits x))))\n             (inc acc)\n             acc)\n           (rest xs)))))))", "user": "55fbc657e4b0f488688e0666"}, {"problem": 120, "code": "(fn [xs]\n  (letfn [(ssqd [n] (->> (map #(Character/digit % 10) (str n))\n                      (map #(* % %))\n                      (apply +)))]\n    (count (filter #(< % (ssqd %)) xs))))", "user": "50d3ec8be4b030b634c368bb"}, {"problem": 120, "code": "(fn [x] (count (filter (fn [e] (< e ((fn f ([x] (f x 0)) ([x acc] (if (= x 0) acc (f (quot x 10) (+ acc (* (mod x 10) (mod x 10))))))) e))) x)))", "user": "576df252e4b0979f8965156f"}, {"problem": 120, "code": "(fn [coll]\n  (count (filter (fn [i]\n                   (< i (reduce (fn [acc curr]\n                                  (+ acc (* (read-string (str curr)) (read-string (str curr))))) 0 (str i)))) coll)))", "user": "576a972ce4b0a07e8fc1811a"}, {"problem": 120, "code": "(fn [coll]\n    (->> coll\n         (map str)\n         (map (fn [digits] (map #(Character/getNumericValue %) digits)))\n         (map (fn [digits] (map #(* % %) digits)))\n         (map #(< %1 (apply + %2)) coll)\n         (filter true?)\n         count\n         )\n    )", "user": "57202eb7e4b0c5bde472c090"}, {"problem": 120, "code": "(fn [coll]\n    (letfn [(to-digit [ch]\n              (- (int ch) (int \\0)))\n            (sum-digit-squares [n]\n              (->> n\n                   str\n                   (map (comp #(* % %) to-digit))\n                   (reduce +)))]\n      (->> coll\n           (filter #(> (sum-digit-squares %) %))\n           count)))", "user": "4dfe5a93535d04ed9115e786"}, {"problem": 120, "code": ";; not short but I think it's readable\n(fn [xs]\n  (letfn [(char-sqr [c] (Math/pow (Integer/parseInt (str c)) 2))]\n    (count (for [x xs\n                 :let [sqrs (map char-sqr (str x))\n                       sum-sqrs (reduce + sqrs)]\n                 :when (< x sum-sqrs)]\n             x))))", "user": "573118ebe4b0cd1946bd0fbd"}, {"problem": 120, "code": "(fn [coll]\n  (let [is-smaller \n        (fn [el] (< el (apply + (map (comp #(* % %) read-string  str) (seq (str el)))))\n          )] \n    (count (filter is-smaller coll))\n    \n  )\n )", "user": "5776558ee4b0979f89651633"}, {"problem": 120, "code": "(fn [r] (count (filter \n\n(fn [z]\n  (< z   \n   (reduce \n    (fn [a b] (+ a (Math/pow b 2))) \n    0 \n    (map (fn [x] (read-string  x ) ) (rest (clojure.string/split (str z) #\"\")))\n   )\n  )\n )\n\nr\n))\n)", "user": "56e6e1e6e4b02e7e935eb6cf"}, {"problem": 120, "code": "(fn [s] (count (filter (fn [n] (< n (apply + (map #(Math/pow (Character/digit % 10) 2) (str n))))) s)))", "user": "577202d2e4b0979f896515c0"}, {"problem": 120, "code": "(fn [col] \n     (letfn [(square-digits [n] (->> (str n)\n                              (map (comp read-string str))\n                              (map #(* % %))\n                              (apply +)))]\n       (count (filter #(< %1 (square-digits %1)) col))))", "user": "5745bb9fe4b009280f9f2b54"}, {"problem": 120, "code": "#(count (filter (fn [x] (< x (reduce (fn [x y] (+ x (* y y))) 0 (map (fn [x] (Integer/valueOf (str x))) (str x))))) %))", "user": "575e71a2e4b0846ea39baf26"}, {"problem": 120, "code": "(fn [c] (count (filter (fn [a] (< a (apply + (map (comp #(* % %) read-string str) (str a))))) c)))", "user": "5776385fe4b0979f89651632"}, {"problem": 120, "code": "(fn [s]\n  (letfn [(sum-sqr-digits [n]\n            (reduce + (map (comp #(* % %) #(Integer/valueOf %) str) (str n))))]\n    (count (filter #(< % (sum-sqr-digits %)) s))))", "user": "4f04664a535dcb61093f6bc1"}, {"problem": 120, "code": "(fn [s] \n  (count (filter (fn [e] \n                   (< e \n                      (reduce + (map #(* % %) (map #(mod % 10) (take-while pos? (iterate #(quot % 10) e))))))) \n                 s)))", "user": "57462a4de4b009280f9f2b5d"}, {"problem": 120, "code": "#(case (count %) 10 8 30 19 50)", "user": "5798205ce4b039eba2ecb10e"}, {"problem": 120, "code": "(fn wee [coll]\n  (let [letters (fn [n] (map #(- (int %) 48) (str n)))\n        squaresum (fn [coll] (reduce + (map #(Math/pow % 2) coll)))\n        squaresums (map (comp squaresum letters) coll)]\n    (count (filter (partial reduce <) (map vector coll squaresums)))))", "user": "55ede35ce4b0121d4835fde1"}, {"problem": 120, "code": "(fn [v] (count (filter (fn [x]\n                                    (let [sqrt-sum\n                                          (fn [s] (reduce + (map #(apply * (repeat 2 %)) s)))]\n                                      (#(< x (sqrt-sum %)) (map #(- (int %) (int \\0)) (seq (str x)))))) v)))", "user": "541f89a5e4b01498b1a71a99"}, {"problem": 120, "code": "#(case (count %) 10 8 30 19 50)", "user": "57982bace4b039eba2ecb10f"}, {"problem": 120, "code": "(fn [coll]\n  (letfn [(calc [n] \n                (let [digits (map #(Integer/parseInt (str %)) (str n))]\n                  (reduce #(+ %1 (* %2 %2)) 0 digits)))]\n    (count (filter (fn [num]\n                     (< num (calc num))) coll))))", "user": "57822efce4b0d36ec5835e91"}, {"problem": 120, "code": "(fn [coll]\n  (letfn [(squared-sum [n]\n            (if (< n 10)\n              (Math/pow n 2)\n              (+ (Math/pow (rem n 10) 2) (squared-sum (quot n 10)))))]\n    (count (filter #(< % (squared-sum %)) coll))))", "user": "577fa91ee4b0d36ec5835e6a"}, {"problem": 120, "code": "(fn [coll]\n  (let [ssd  \n         (fn [n]\n           (->> (String/valueOf n)\n                (map #(Math/pow (- (int %) 48) 2))\n                (apply +)\n                (int)))]\n    (->> (filter #(< % (ssd %)) coll)\n      count)))", "user": "577c3da9e4b0c8d87281f6b9"}, {"problem": 120, "code": "(fn [coll]\n  (loop [n 0 index 0]\n    (if (< index (count coll))\n      (let [nb (nth coll index)]\n        (let [s (seq (str nb))]\n          (do (println index)\n              (if (< nb  (reduce (fn [sum post]  \n                                   (+ sum (* (Integer. (str post)) (Integer. (str post)) )) ) 0  s)  )\n                (recur (inc n) (inc index))\n                (recur n (inc index))\n                ))\n          ))\n      n)\n    ))", "user": "579601c8e4b0e215f87e8492"}, {"problem": 120, "code": "(fn [numbers]\n  (let [square #(Math/pow % 2)\n        sum (fn [l] (reduce #(+ % %2) 0 l))\n        sum-squares #(sum (map square %))\n        lt-sum-squares (fn [n] (< n (sum-squares (map #(Long/parseLong (str %)) (str n)))))]\n    (count (filter lt-sum-squares numbers))))", "user": "56a51f26e4b0542e1f8d14e0"}, {"problem": 120, "code": "(fn [l] \n  (count \n    (filter \n      (fn [x]\n        (< \n          x \n\t      ((fn [y] ((fn [z] (reduce + (#(map * % %) (map #(- (int %) (int \\0)) (str z))))) y)) x)\n        )\n      ) \n      l\n    )\n  )\n)", "user": "57873017e4b0ebec4cfb7503"}, {"problem": 120, "code": "(fn f [xs]\n  (let [digits (fn [n] (map #(- (int %) (int \\0)) (str n)))\n        pws (fn [d] (apply + (map #(* % %) d)))]\n    (count (filter #(< % ((comp pws digits) %))  xs))))", "user": "56795deae4b05957ce8c6187"}, {"problem": 120, "code": "(fn [s]\n  ( reduce + (map (fn [n]\n         (let [sdigs (map #(- (int %) (int \\0)) (str n))]\n           (let [sumsq (reduce + (map #(* % %) sdigs))]\n                 (if (> sumsq n)\n                   1\n                   0\n                   )\n             ) ;; end le 2\n                        \n           ) ;; end let 1\n                       \n         ) ;; end anonymous function 1\n   s)) ;; end map\n  ) ;; end fn", "user": "57a13745e4b0c3d858beb8e3"}, {"problem": 120, "code": "(fn [coll]\n    (.size (filter #(< %\n                       (reduce\n                        (fn [acc n]\n                            (let [v (Integer/parseInt (str n))]\n                              (+ acc (* v v))))\n                        0\n                        (Integer/toString %)))\n                   coll)))", "user": "576b4e6be4b0a07e8fc1812b"}, {"problem": 120, "code": "(let [digit #(Character/digit % 10)\n      square #(*' % %)]\n  (comp count\n        #(filter (partial apply <)\n                 (map (juxt identity\n                            (comp (partial apply +)\n                                  (partial map (comp square digit))\n                                  str))\n                      %))))", "user": "521ed5b4e4b0e6c71e0c0bc0"}, {"problem": 120, "code": "(fn\n  [xs]\n  (count\n    (filter true?\n            (for [x xs]\n              (< x\n                 (reduce +\n                         (map\n                           #(let [d (-> % int (- 48))]\n                             (* d d))\n                           (-> x str seq))))))))", "user": "56bb652ae4b0f26550335953"}, {"problem": 120, "code": "(fn [digits-in]\n  (let\n      [get-digits (fn [number] (map\n                                #(Character/digit %1 10)\n                                (str number)))\n       criteria (fn [number digit-list] (<\n                                         number\n                                         (reduce + (map\n                                                    *\n                                                    digit-list digit-list))))]\n    (->> (map criteria digits-in (map get-digits digits-in))\n      (filter true?)\n      (count))))", "user": "571d9669e4b0145328a7627f"}, {"problem": 120, "code": "(fn [coll]\n    (count\n     (filter\n      (fn [n] (->> (str n) (seq) (map int) (map #(- % 48)) (map #(* % %)) (apply + ) (< n)))\n      coll)))", "user": "53ae0c50e4b047364c044471"}, {"problem": 120, "code": "(fn [s]\n  (->> s\n       (map (fn [n]\n              (->> (map (comp #(- % 48) int)\n                        (str n))\n                   (reduce #(+ %1 (* %2 %2))\n                           0)\n                   (< n))))\n       (filter true?)\n       count))", "user": "57aa4775e4b0b8559636fc6b"}, {"problem": 120, "code": "(letfn\n[(digits [n]\n  (let [ds n]\n    (ffirst (drop-while\n      (comp (complement zero?) second)\n      (iterate\n        (fn [[ds n]] [(conj ds (mod n 10)) (int (/ n 10))])\n        [[] n])))))\n\n(sosd [n]\n  (reduce + (map * (digits n) (digits n))))]\n  (fn [xs] (count (filter #(< % (sosd %)) xs))))", "user": "57717915e4b0979f896515b3"}, {"problem": 120, "code": "(fn [xs]\n    (let\n      [\n        digits\n        (fn [n]\n          (map\n            (fn [c]\n              (- (int c) (int \\0))\n            )\n            (str n)\n          )\n        )\n        squared-component-digits\n        (fn [n]\n          (apply +\n            (map\n              (fn [n] (* n n)\n              )\n              (digits n)\n            )\n          )\n        )\n      ]\n      (count\n        (filter\n          (fn [x]\n            (< x (squared-component-digits x))\n          )\n          xs\n        )\n      )\n    )\n  )", "user": "5784e177e4b0ebec4cfb74cf"}, {"problem": 120, "code": "(fn [xs] (let [f (fn [x]\n  (let [as (map #(- (int %) (int \\0)) (str x))\n      \tbs (map #(* % %) as)\n      \tz (apply + bs)]\n    (if (< x z) 1 0)))]\n  (apply + (map f xs))))", "user": "5799ff45e4b05b1deef9add1"}, {"problem": 120, "code": "(fn [seqN] (count\n  (filter #(< (first %) (second %)) \n  (map list seqN (map \n      (fn [coldig] (apply  + (map (fn [sdig] (Math/pow (- (int sdig) 48) 2)) coldig)))\n      (map (fn [n] (seq (str n))) seqN))))))", "user": "579d9601e4b05b1deef9ae18"}, {"problem": 120, "code": "(fn [s] (count (filter (fn [i] (< i (reduce + (map (fn [n] (* n n)) (map (fn [c] (-> c str Integer/parseInt)) (seq (str i))))))) s)))", "user": "4e5e9f6b535d8a8b8723a2d2"}, {"problem": 120, "code": "(fn [s]\n   (reduce + (map (fn [n]\n                    (if (< n (->> (.toString n)\n                                  (map #(Integer/parseInt (str %)))\n                                  (map #(* % %))\n                                  (reduce +))) 1 0)) s)))", "user": "5033ed65e4b062bc5d7ae15a"}, {"problem": 120, "code": "(fn [coll]\n  (let [digit (fn [n] (map #(- (int %) 48) (str n)))\n        sum-digits (fn [n] (reduce + (map #(* % %) (digit n))))]\n   (count (filter #(< % (sum-digits %)) coll))))", "user": "571dd145e4b0145328a76283"}, {"problem": 120, "code": "(fn fun120\n  [coll]\n  (letfn [(to-digits\n            [chars]\n            (map #(- (int %) 48) chars))]\n    (let [digit-coll (map (comp to-digits seq str) coll)\n          values (map (fn [digits]\n                        (reduce + (map #(* % %) digits)))\n                      digit-coll)]\n      (count (filter (fn [[number squared-digits]]\n                       (< number squared-digits))\n                     (map #(vector %1 %2) coll values))))))", "user": "5075e374e4b09049dea827a5"}, {"problem": 120, "code": "(fn[r]\n  (->> r\n       (map\n         (fn [n]\n           (< n\n              (->> (loop [q [(mod n 10)] r (quot n 10)]\n                     (if (pos? r) (recur (conj q (mod r 10)) (quot r 10)) q))\n                   (map (fn [x] (* x x)))\n                   (reduce +)))))\n       (filter identity)\n       count))", "user": "57b3efb1e4b0fbc9809a278a"}, {"problem": 120, "code": "(fn [s]\n  (count (filter (fn [x]\n  (->> (map int (str x))\n       (map - (repeat 48))\n       (map #(* % %))\n       (reduce +)\n       (< x))) s)))", "user": "548b7db8e4b0e286459a11fd"}, {"problem": 120, "code": "(fn [coll]\n    (let [ltsq\n          (fn [x]\n            (let [d (map #(Integer. (str %)) (str x))\n                  s (apply + (map #(* % %) d))]\n              (< x s)))]\n      (count (filter ltsq coll))))", "user": "4e837808535db62dc21a62d9"}, {"problem": 120, "code": "(fn [x] \n  (let [c2d (fn [c] (- (int c) (int \\0)))\n        ss (fn [ds]\n             (reduce #(+ % (* %2 %2)) 0 ds)\n             )\n        ssn (fn [z] (ss (map c2d (str z))))\n        pf (fn [y] (< y (ssn y)))\n        ] \n    (count \n     (filter pf x)\n     )\n    )\n  )", "user": "57b8b008e4b0fbc9809a27e6"}, {"problem": 120, "code": "(fn check [col]\n  (letfn [(sq [n] (reduce + (map #(let [x (- (int %) (int \\0))] (* x x)) (str n))))]\n    (count (filter #(< % (sq %)) col))))", "user": "57b4779de4b0fbc9809a279a"}, {"problem": 120, "code": "(fn [c]\n  (loop [c c o 0]\n    (cond (empty? c) o\n          :else (let [x (map read-string (map str (str (first c))))]\n                  (if (> (reduce + (map #(* % %) x)) (first c))\n                    (recur (rest c) (inc o))\n                    (recur (rest c) o))))))", "user": "57acee37e4b0b8559636fc94"}, {"problem": 120, "code": "(let [digits (comp\n               (partial map (comp read-string str))\n               str)\n      less-ss (fn [n]\n                (< n (apply + (map #(* % %) (digits n)))))]\n  (comp\n    count\n    (partial filter less-ss)))", "user": "548fa2dfe4b0e286459a1240"}, {"problem": 120, "code": "(fn [c]\n  (count\n    (filter #(< (first %) (second %))\n            (map (fn [d]\n                   (vector (first d)\n                           (reduce + (map #(* % %) (second d)))))\n                 (map (fn [e]\n                        (vector e (map #(Character/digit % 10) (str e))))\n                      c)))))", "user": "50ae22c3e4b0a40c9cfb08d0"}, {"problem": 120, "code": "(fn [col]\n    (let [ss   (fn [v]\n                 (reduce (fn [r v] (+ r (* v v))) 0 (map #(- (int %) (int \\0)) (str v)))\n                 )]\n      (count (filter (fn [el] (< el (ss el))) col))))", "user": "57aa290de4b0b8559636fc65"}, {"problem": 120, "code": "(fn [coll] (count (filter #(< % (apply + (map (fn [x] (let [y (Integer/parseInt (str x))] (* y y))) (str %)))) coll)))", "user": "5797d4bae4b039eba2ecb107"}, {"problem": 120, "code": "(fn[y]\n  (count\n    (filter \n        (fn[x](< x \n \t        (reduce \n     \t        #(+ %1 (* %2 %2)) \n     \t        0\n     \t        (map #(- (int %) 48) (str x)))))\n        y)))", "user": "57b9fc74e4b0fbc9809a27fb"}, {"problem": 120, "code": "(fn test [coll]\n  (letfn [(aha? [x]\n                (< x (reduce +\n                             (map #(* % %)\n                                  (map #(- % 48)\n                                       (map int (str x)))))))]\n    (count (filter aha? coll))))", "user": "579332c2e4b0e215f87e8452"}, {"problem": 120, "code": "(fn sosog[s]\n  (let[sog (fn[n] (reduce + (map #(* (- (int %) 48) (- (int %) 48)) (str n))))]\n    (count (filter #(< % (sog %)) s))))", "user": "57bd960fe4b05aa3c4741c52"}, {"problem": 120, "code": ";//todo: be better\n(fn [xs] (count (filter #(< % ((fn [n]\n    (loop [n n m 0]\n        (if (<= n 0)\n          m\n          (recur (quot n 10) (+ m ((fn [x] (* x x)) (rem n 10)))))\n      )) %)) xs)))", "user": "57ba55c1e4b0fbc9809a2801"}, {"problem": 120, "code": "#(->> \n  % \n  (filter \n   (fn [n] (< n (->> n str seq (map str) (map read-string) (map (fn [x] (* x x))) (apply +))))) \n  count)", "user": "576a8d02e4b0a07e8fc18117"}, {"problem": 120, "code": "(fn sumsqdigs [lst]\n  (let [getdigs (fn [n] (loop [n n, acc []] (if (= n 0) acc (recur (quot n 10) (cons (mod n 10) acc)))))\n        square (fn [x] (* x x))]\n    (count (filter #(> (reduce + (map square (getdigs %))) %) lst))\n   )\n )", "user": "57cf03c0e4b00451144b04f9"}, {"problem": 120, "code": "(fn [s] (letfn [(digits [n] (if (zero? n) nil (lazy-seq (cons (mod n 10) (digits (quot n 10)))))) (sum [n] (reduce + (map #(* % %) (digits n))))] (count (filter #(< % (sum %)) s))))", "user": "57c7e7d9e4b05aa3c4741d0f"}, {"problem": 120, "code": "(fn o [coll]\n  (let [decomp\n    (fn decomp\n      ([num] (decomp num '()))\n      ([num ret]\n        (if (= num 0)\n          (reduce (fn[tot cur] (+ tot (* cur cur))) 0 ret)\n          (recur (int (/ num 10)) (conj ret (mod num 10))))))  ]\n  \n    (count (filter (fn [a] (< a (decomp a))) coll))))", "user": "4f4aa932e4b0d56e7bb92c14"}, {"problem": 120, "code": "(fn [coll]\n  (-> (filter\n        (fn [n]\n          (let [sum-of-squares (->> (str n)\n                                    (map #(Character/getNumericValue %))\n                                    (map #(* % %))\n                                    (reduce +))]\n            (< n sum-of-squares)))\n        coll)\n      count))", "user": "4f5599dfe4b0a7574ea71806"}, {"problem": 120, "code": "(fn [s]\n  (->> s\n       (map (fn [i] [i (->> (str i) seq (map #(Character/digit % 10)) (map #(* % %)) (reduce +))]))\n       (filter #(< (first %) (second %)))\n       (count)\n       )\n  )", "user": "57cd7498e4b0c746388ab897"}, {"problem": 120, "code": "(fn [li]\n  (case (count li)\n    10 8\n    30 19\n    100 50\n    1000 50))", "user": "57b55290e4b0fbc9809a27a9"}, {"problem": 120, "code": "(fn sum-of-square-of-digits [s]\n  (count (filter\n          #(< % (loop [n %, rslt 0]\n                  (if (= 0 n)\n                    rslt\n                    (recur\n                     (quot n 10)\n                     (+ rslt (* (rem n 10) (rem n 10)))))))\n          s)))", "user": "572ec4dde4b0cd1946bd0f8d"}, {"problem": 120, "code": "(fn\n  [n]\n  (letfn [(num-to-digits [n] (map #(- (int %) 48) (seq (into [] (str n)))))\n          (square-seq [digits] (reduce + (map #(* % %) digits)))\n          (lt-squared-digits? [n] (if (< n (square-seq (num-to-digits n))) true false)  )\n          ]\n    (reduce +\n            (map #(if (true? %) 1 0)\n                 (map lt-squared-digits? n)\n                 )\n            )\n    )\n  )", "user": "57b9d21fe4b0fbc9809a27f7"}, {"problem": 120, "code": "(fn [integers]\n      (count (filter\n          (fn [number]\n            (< number (reduce\n                        #(+ % (* %2 %2))\n                        0\n                        (map #(- (int %) 48) (str number))))\n            )\n          integers))\n\n      )", "user": "4f1052b9535d64f603146418"}, {"problem": 120, "code": "(fn [coll]\n   (count\n     (filter\n       (fn [n]\n         (let [digits (map #(- (int %1) (int \\0)) (seq (str n)))]\n           (< n (apply + (map #(* % %) digits))))\n       ) coll)))", "user": "56dc3dbbe4b0ea9b8538f81a"}, {"problem": 120, "code": "(fn sum-square [coll]\n  (let [digits (fn [n] (map #(- (int %) 48) (str n)))\n        square #(* % %)\n        sum-digits (fn [n] (reduce + (map square (digits n))))]\n    (count (filter #(< % (sum-digits %)) coll))))", "user": "57d1a0e6e4b0bd073c20236d"}, {"problem": 120, "code": "(fn [coll]\n  (count (filter (fn sosod [num]\n              (< num (reduce #(+ (* %2 %2) %1) 0 (map #(- (int %) 48) (str num))))) coll)))", "user": "57d0cd58e4b0bd073c20235e"}, {"problem": 120, "code": "(fn [l]\n  (count\n    (filter\n      (fn [x]\n        (< x\n           (loop [x x r 0]\n             (if (= x 0) r\n               (let [m (mod x 10)]\n                 (recur (int (/ x 10)) (+ (* m m) r)))))))\n      l)))", "user": "57d9f603e4b0bd073c20240a"}, {"problem": 120, "code": "(fn [xs]\n    (let [sum-digits \n          (fn [n]\n            (->> (str n)\n                 (map #(Integer/parseInt (str %)))\n                 (map #(* % %))\n                 (reduce +)))]\n      (->> xs \n           (map (juxt identity sum-digits))\n           (filter (fn [[a b]] (< a b)))\n           (count))))", "user": "55568a7de4b0deb715856e1c"}, {"problem": 120, "code": "(fn cnt-<-x2-sum-digits [xs]\n  (letfn [(digits [n]\n            (lazy-seq\n             (loop [x n r '()]\n               (if (< x 10) (cons x r)\n                   (recur (quot x 10) (cons (mod x 10) r))))))\n          (square-sum [col]\n            (reduce + (map (fn [x] (Math/pow x 2)) col)))]\n\n    (reduce (fn [total num]\n              (let [num-digits (digits num)\n                    num-square-sum (square-sum num-digits)]\n                (if (< num num-square-sum) (inc total) total)))\n            0\n            xs)))", "user": "57c500f9e4b05aa3c4741cda"}, {"problem": 120, "code": "(fn [coll]\n  (letfn [(ss \n            ([n] (ss n 0))\n            ([n ret]\n              (let [r (rem n 10)\n                    ret (+ ret (* r r))]\n                (if (< n 10) ret\n                  (recur (quot n 10) ret)))))]         \n    (count (filter (fn [n] (< n (ss n))) coll))))", "user": "571c2babe4b07c98581c3b73"}, {"problem": 120, "code": "(fn count-lt [seq] \n    (count\n        (filter (fn [[a b]] (< a b)) \n            (map vector seq\n                (->>\n                    (map (fn [val] (Integer/toString val)) seq)\n                    (map (fn [numStr] \n                        (map \n                            (fn [singleDigit] \n                                (let [digitVal (Integer/parseInt (String/valueOf singleDigit))]\n                                    (* digitVal digitVal)\n                                ) \n                            )\n                            numStr)\n                        ) \n                        ,,\n                    )\n                    (map (fn [digitColl] (apply + digitColl)) ,,))))))", "user": "5227eacee4b0186687e23a5e"}, {"problem": 120, "code": "(let [square-of-digits\n\t(fn [x]\n\t\t(reduce + (loop [n x r []]\n\t\t\t(if (zero? n)\n\t\t\t\tr\n\t\t\t\t(recur (int (/ n 10)) (conj r (apply * (repeat 2 (mod n 10)))))))))]\n\t(fn count-fn\n\t\t([a] (count-fn a 0))\n\t\t([a n]\n\t\t(if (empty? a)\n\t\t\tn\n\t\t\t(recur (rest a) (+ n (if (< (first a) (square-of-digits (first a))) 1 0)))))))", "user": "57ccedaae4b0c746388ab88e"}, {"problem": 120, "code": "(fn filter-sq-digits [s]\n  (letfn [(sqd [n] (->> n str seq (map (comp #(* % %) read-string str)) (apply +)))]\n    (count (filter #(< % (sqd %)) s))))", "user": "575b3e9be4b02ea11479935b"}, {"problem": 120, "code": "(fn [xs]\n  (->> \n    (map str xs) ; Convert number to string\n    (map seq)    ; Sequence the string\n    (map #(map (fn [character] (Character/digit character 10)) %)) ; Convert parts to number again\n    (map #(map * % %)) ; Square the parts\n    (map #(apply + %)) ; Sum the parts\n    (map < xs)         ; Compare with orginal integer\n    (filter true?)     ; Filter the trues\n    (count)            ; Count the trues\n    ))", "user": "57e139f6e4b0bfb2137f5a6c"}, {"problem": 120, "code": "(fn [l]\n  (count (filter \n          (fn f [n] (< n (apply + (map (comp #(* % %) \n                                             #(- (int %) (int \\0))) (str n)))))\n   l)))", "user": "57c796b4e4b05aa3c4741d08"}, {"problem": 120, "code": "(fn cnt-sqrt [arg]\n  (let [get-digits (fn [n]\n                     (map #(Integer/valueOf (str %)) (String/valueOf n)))\n        digits-sqr (fn [n]\n                     (apply + (map #(* % %) (get-digits n))))\n        res-seq (filter #(< % (digits-sqr %)) arg)]\n    (count res-seq)))", "user": "57df309ee4b0bd073c20245f"}, {"problem": 120, "code": "(fn [coll]\n    (let [sqdigs (fn [n]\n                   (loop [n n\n                          sum 0]\n                     (let [ones (mod n 10)\n                           sum (+ sum  (* ones ones))]\n                       (if (>= n 10)\n                         (recur (int (/ n 10)) sum)\n                         sum))))]\n      (loop [[n & rn :as ns] coll\n             ct 0]\n        (if (empty? ns) ct\n            (recur rn (+ ct (if (< n (sqdigs n)) 1 0)))))))", "user": "56f9c7c6e4b07572ad1a88ba"}, {"problem": 120, "code": "#(count (filter true? (map (fn [n] (->> n str (map (fn [x] (Math/pow (- (int x) 48) 2))) (reduce +) (< n))) %)))", "user": "57e33f6fe4b0bfb2137f5a96"}, {"problem": 120, "code": "(fn [xn]\n  (letfn [\n          (square [n]\n            (if (<= n 9)\n              (* n n)\n              (->>\n                (map (fn [c]\n                       (let [x (Integer/parseInt (str c))]\n                         (* x x))) (seq (str n)))\n                (reduce + ))))]\n    \n    (count (filter #(< % (square %)) xn))))", "user": "57d9bca1e4b0bd073c202405"}, {"problem": 120, "code": "(fn [ns]\n  (->> ns\n       (filter (fn [n]\n                 (< n\n                    (apply + (map #(Math/pow % 2) (map (comp int bigint str) (seq (str n))))))))\n       count))", "user": "57e0f30ae4b0bfb2137f5a66"}, {"problem": 120, "code": "(fn [sq]\n  (let [pow2 (fn [x] (reduce * (repeat 2 x)))\n        digits (fn digits [x]\n                 (when (not (zero? x))\n                   (seq (cons (mod x 10)\n                              (digits (quot x 10))))))]\n  (count\n   (filter\n    #(< % (apply + (map pow2 (digits %))))\n    sq))))", "user": "57f0f7b8e4b0bfb2137f5bfe"}, {"problem": 120, "code": "(fn [a-seq]\n  (let [digits-square (fn [n] \n                        (reduce + (map (comp \n                                         (fn [x] (* x x)) \n                                         #(- (int %) 48))\n                                       (str n))))]\n    (count (filter (fn [x] (< x (digits-square x))) a-seq))))", "user": "574e84e0e4b02ea114799243"}, {"problem": 120, "code": "(fn counter [col]\n  (->> col (map #(str %)) \n       (map seq) \n       (map #(map (fn [s] (Character/digit s 10)) %)) \n       (map (fn [x] (reduce + (map #(* % %) x)))) \n       (map-indexed vector) \n       (filter #(< (first %) (second %))) \n       count))", "user": "55d1ec3ee4b0e31453f64a4c"}, {"problem": 120, "code": "(fn [col]\n  (count (filter (fn [x]\n    (loop [remaining x squared-sum 0]\n      (if (< x squared-sum)\n        true\n          (if (= 0 remaining)\n            (< x squared-sum)\n            (recur (quot remaining 10) (+ squared-sum (* (rem remaining 10) (rem remaining 10)))))))) col)))", "user": "5746061ae4b009280f9f2b5b"}, {"problem": 120, "code": "(fn [sequ] \n  (count (filter (fn [i]\n            (< i\n               (->> i\n                    str\n                    seq\n                    (map str)\n                    (map #(Integer/parseInt %))\n                    (map #(* % %))\n                    (apply +)))) \n                sequ)))", "user": "57bfffc7e4b05aa3c4741c8a"}, {"problem": 120, "code": "(fn f\n  [s]\n  (let [h #(->> (str %)\n                (seq)\n                (map str)\n                (map read-string)\n                (map (fn [x] (* x x)))\n                (apply +))\n        g #(when (< % (h %)) true)]\n    (->> (filter g s)\n         (count))))", "user": "56a44067e4b0542e1f8d14da"}, {"problem": 120, "code": "(fn [nums]\n  (letfn [(smsqd? [n]\n            (let [digits (loop [n n digits []]\n                           (if (zero? n) digits\n                             (recur (quot n 10) (conj digits (rem n 10)))))]\n              (< n (apply + (map #(* % %) digits)))))]\n    (count (filter smsqd? nums))))", "user": "530e75d5e4b08068f379ecba"}, {"problem": 120, "code": "(fn [s]\n  (let [square #(* % %)]\n  (count (filter #(< % (reduce + (map (fn [x] (square (- (int x) (int \\0)))) (seq (str %))))) s))))", "user": "57e6997ee4b0bfb2137f5af0"}, {"problem": 120, "code": "(fn ssd [sq]\n  (let [ok? (fn [num] (loop [sum 0 val num]\n                        (if \n                          (zero? val) \n                          (< num sum)\n                          (recur (+ sum (* (mod val 10) (mod val 10))) (quot val 10) ))))]\n        (count (filter ok? sq))))", "user": "57db2369e4b0bd073c20241f"}, {"problem": 120, "code": "(fn cnt-sqrt [arg]\n  (let [get-digits (fn [n]\n                     (map #(Integer/valueOf (str %)) (String/valueOf n)))\n        digits-sqr (fn [n]\n                     (apply + (map #(* % %) (get-digits n))))\n        res-seq (filter #(< % (digits-sqr %)) arg)]\n    (count res-seq)))", "user": "57f8104ce4b0d3187e900910"}, {"problem": 120, "code": "(fn [xs]\n  (let [square #(* % %)\n        sum (partial apply +)\n        c->int #(- (int %) 48)\n        digits (comp (partial map c->int) str)\n        smaller-sum-square-dig?\n        #(< % (->> % digits (map square) sum))]\n    (count\n     (filter smaller-sum-square-dig? xs))))", "user": "54d9f7f1e4b024c67c0cf751"}, {"problem": 120, "code": "(fn squareDigits\n  [lst]\n  (letfn [(prodigits [a]\n            (loop [num a\n                   total 0]\n              (if (zero? num) total\n                              (recur (quot num 10) (+ total (* (mod num 10)(mod num 10)))))))]\n    (count (filter #(> (prodigits %) %) lst))))", "user": "57fc34f0e4b0d3187e90098e"}, {"problem": 120, "code": "#(count (filter (fn [n] (< n (loop [i n r 0] (if (zero? i) r (recur (quot i 10) (+ r (* (mod i 10) (mod i 10)))))))) %))", "user": "57f9e0bce4b0d3187e900956"}, {"problem": 120, "code": "(fn  [num]\n  (letfn [(num->digits [num]\n            (letfn [(numiter [val col]\n                      (if (>= 0 val) col\n                          (recur (quot val 10)\n                                 (conj (apply list col) (rem val 10)))))]\n              (numiter num [])))                    \n          (sum-of-square [digits]\n            (reduce + (map #(* % %) digits)))\n          (less-than-sos? [num]\n              (let [digits (num->digits num)\n                    sos (sum-of-square digits)]\n                (< num sos)))]\n    (count (filter less-than-sos? num))))", "user": "57f81524e4b0d3187e900913"}, {"problem": 120, "code": "(fn sum-square\n  [numbers]\n  (count\n    (filter (fn [number]\n              (loop [n number\n                     sum-sq 0]\n                (if (> sum-sq number)\n                  true\n                  (if (zero? n)\n                    false\n                    (let [d (mod n 10)]\n                      (recur (quot n 10) (+ sum-sq (* d d))))))))\n            numbers)))", "user": "57f8153de4b0d3187e900916"}, {"problem": 120, "code": "(fn [s]\n  (let [digits #(map (zipmap \"0123456789\" (range 10)) (str %))\n        square #(* % %)]\n    (count\n     (filter true? (map #(< % (apply + (map square (digits %)))) s)))))", "user": "57ec3d29e4b0bfb2137f5b77"}, {"problem": 120, "code": "(fn [coll]\n  (let [digits (fn [n]\n                 (if (< n 10)\n                   [n]\n                   (loop [d '() n-i n]\n                     (if (zero? n-i)\n                       d\n                       (recur (conj d (rem n-i 10)) (int (/ n-i 10)))))))]\n    (count (filter (fn [n] (< n (apply + (map (fn [d] (* d d)) (digits n)))))\n                   coll))))", "user": "57f80350e4b0d3187e90090c"}, {"problem": 120, "code": "(fn\n  [col]\n  (loop [cur-no (first col) remaining-nos (rest col) count 0]\n    (let [sum-of-squares (reduce + (map #(* % %) (#(loop [x % result []]\n    (if (<= x 0)\n      result\n      (recur (int (/ x 10)) (cons (mod x 10) result)))) cur-no)))]\n      (if (empty? remaining-nos)\n        (if (< cur-no sum-of-squares)\n          (inc count)\n          count)\n        (recur (first remaining-nos) (rest remaining-nos) (if (< cur-no sum-of-squares)\n                                                            (inc count)\n                                                            count))))))", "user": "57596ba7e4b02ea11479931a"}, {"problem": 120, "code": "(letfn [\n (d-seq-rev [n] \n  (if (> 10 n)\n   (list n)\n   (cons \n    (rem n 10) \n    (d-seq-rev (quot n 10))) ))\n (sum-sq [xs]\n  (apply + \n   (map (fn [z] (* z z)) xs)))\n (d-seq [ys] \n  (reverse (d-seq-rev ys)))\n (my-pred [b] \n  (< b (sum-sq (d-seq b))))] \n (fn [zs] (count (filter (fn [e] (my-pred e)) zs))) )", "user": "57f9011ee4b0d3187e900935"}, {"problem": 120, "code": "#(count (filter (fn [e]\n                  (< e ((fn [num]\n                          (reduce + (map (fn [digit-str]\n                                           (let [x (read-string digit-str)] (* x x)))\n                                         (re-seq #\"\\d\" (str num))))) e))) %))", "user": "57ee804ee4b0bfb2137f5bbb"}, {"problem": 120, "code": "(fn sQ\n  [n]\n  (let [tig\n        (fn tig [s]\n          (loop [s s\n                 ret ()]\n            (if (< s 1)\n              ret\n              (recur (quot s 10) (conj ret (rem s 10)))))\n          )\n        sQt (fn sQt [n]\n              (reduce + (map #(* % %) n))\n              )]\n    (count (filter (fn [[v b]] (< v b))\n                   (zipmap n (map #(sQt (tig %)) n))))\n\n    ))", "user": "57f81532e4b0d3187e900914"}, {"problem": 120, "code": "(fn sumsquare [coll]\n  (let [digits (fn [n] (map #(- (int %) 48) (str n)))\n        square #(* % %)\n        sumdigits (fn [n] (reduce + (map square (digits n))))]\n    (count (filter #(< % (sumdigits %)) coll))))", "user": "57fa7c93e4b0d3187e900963"}, {"problem": 120, "code": "(fn [lst]\n  (let [square-sum (fn [n] (reduce + (map #(* % %) (map #(Character/getNumericValue %) (str n)))))\n        ]\n    (count (filter #(< % (square-sum %)) lst)) \n    ))", "user": "57f81045e4b0d3187e90090f"}, {"problem": 120, "code": "(fn [lst]\n  (loop [lst1 lst\n         sum 0]\n    (if (empty? lst1)\n      sum\n      (if (< (first lst1)\n             (reduce + (map #(* % %) (map (fn [^Character c] (Character/digit c 10)) (str (first lst1))))))\n        (recur (rest lst1) (inc sum))\n        (recur (rest lst1) sum)))))", "user": "57f81549e4b0d3187e900918"}, {"problem": 120, "code": "(fn sum-square [lst]\n  (let [digito (fn [n] (map #(- (int %) 48) (str n)))\n        cuadrado #(* % %)\n        suma (fn [n] (reduce + (map cuadrado (digito n))))]\n    (count (filter #(< % (suma %)) lst))))", "user": "57f8151ce4b0d3187e900912"}, {"problem": 120, "code": "(fn square[lst]\n  (count(filter (fn [z](< z (reduce + (map (fn [a b] (* a b)) (map (fn [x] (Integer/valueOf (str x))) (String/valueOf z))(map (fn [y] (Integer/valueOf (str y))) (String/valueOf z))))))lst)))", "user": "57fc08d8e4b0d3187e900988"}, {"problem": 120, "code": "(fn cnt-sqrt [arg]\n  (let [get-digits (fn [n]\n                     (map #(Integer/valueOf (str %)) (String/valueOf n)))\n        digits-sqr (fn [n]\n                     (apply + (map #(* % %) (get-digits n))))\n        res-seq (filter #(< % (digits-sqr %)) arg)]\n    (count res-seq)))", "user": "580570a2e4b0a837a8b30cc7"}, {"problem": 120, "code": "(fn sum-square [coll]\n  (let [digits (fn [n] (map #(- (int %) 48) (str n)))\n        square #(* % %)\n        sum-digits (fn [n] (reduce + (map square (digits n))))]\n    (count (filter #(< % (sum-digits %)) coll))))", "user": "57f814fbe4b0d3187e900911"}, {"problem": 120, "code": "(fn suma2\n  [n]\n  (count\n    (filter #(< (first %) (second %))\n            (map (fn [x]\n                   (vector (first x)\n                           (reduce + (map #(* % %) (second x)))))\n                 (map (fn [y]\n                        (vector y (map #(Character/digit % 10) (str y))))\n                      n)))))", "user": "57fedf07e4b0d3187e9009dc"}, {"problem": 120, "code": "(fn sumSq\n  [coll]\n  (let [sum (->> coll\n                 (map str)\n                 (map seq)\n                 (map #(map (fn [x] (- (int x) 48)) %))\n                 (map #(map (fn [x] (* x x)) %))\n                 (map #(reduce + %)))]\n    (count (filter true? (map > sum coll)))))", "user": "57f81534e4b0d3187e900915"}, {"problem": 120, "code": "(fn sum-square [coll]\n  (let [digits (fn [n] (map #(- (int %) 48) (str n)))\n        square #(* % %)\n        sum-digits (fn [n] (reduce + (map square (digits n))))]\n    (count (filter #(< % (sum-digits %)) coll))))", "user": "57f81569e4b0d3187e900919"}, {"problem": 120, "code": "(fn sum-square\n  [numbers]\n  (count\n    (filter (fn [number]\n              (loop [n number\n                     sum-sq 0]\n                (if (> sum-sq number)\n                  true\n                  (if (zero? n)\n                    false\n                    (let [d (mod n 10)]\n                      (recur (quot n 10) (+ sum-sq (* d d))))))))\n            numbers)))", "user": "57f81544e4b0d3187e900917"}, {"problem": 120, "code": "(fn [coll]\n    (count\n     (filter\n      (fn [n]\n        (let [digits (map #(- (int %) (int \\0)) (str n))\n              sumsq (reduce + (map #(* % %) digits))]\n          (< n sumsq)))\n      coll)))", "user": "500d3160e4b05f7c30cfa6a1"}, {"problem": 120, "code": "(fn [xs]\n  (count\n   (filter\n    (fn [x]\n      (let [digits (map #(Long/valueOf (str %)) (Long/toString x))]\n        (< x (apply + (map #(Math/pow % 2) digits)))))\n    xs)))", "user": "56c21eafe4b05cc29241ee7e"}, {"problem": 120, "code": "(fn [xs] \n  (count \n   (filter \n    (fn [n] \n      (< n \n         (reduce + \n          (map #(* (- (int %) 48) (- (int %) 48)) (str n))\n         )\n       ) \n     ) \n     xs\n    )\n   )\n  )", "user": "5803ba6de4b0a837a8b30c95"}, {"problem": 120, "code": "(fn [coll]\n  (count (filter (fn [x] (< x (reduce #(+ %1 (* %2 %2)) 0 (map (comp biginteger str) (str x)))))\n                 coll)))", "user": "57dd47f4e4b0bd073c20243e"}, {"problem": 120, "code": "(fn [int-seq]\n  (let [str-to-digit-seq (fn [s] (map #(-> % str Integer/parseInt) s))\n        sqr-digit-seq (fn [digit-seq] (map #(* % %) digit-seq))\n\n        str-seq (map #(str %) int-seq)\n        digit-seq-seq (map #(str-to-digit-seq %) str-seq)\n        digit-seq-sqrs (map #(sqr-digit-seq %) digit-seq-seq)\n        sum-sqrs-seq (map #(reduce + %) digit-seq-sqrs)\n\n        int-to-sum-sqr-seq (zipmap int-seq sum-sqrs-seq)]\n    (reduce (fn [cnt [int sum-sqr]] (if (< int sum-sqr)\n                                      (inc cnt)\n                                      cnt))\n            0\n            int-to-sum-sqr-seq)))", "user": "52d38c51e4b099d49816f0c5"}, {"problem": 120, "code": "#(count \n  (filter \n   (fn [n] \n     (< n (reduce \n           (fn [v1 v2] \n             (let [v1 v1, v2 (- (int v2) 48)] \n               (+ v1 (* v2 v2)))) 0 (str n)))) %))", "user": "57f8ba80e4b0d3187e90092f"}, {"problem": 120, "code": "(fn sum-of-square-of-digits [col]\n  (count (filter #(< % (loop [prod % n 0]\n                         (if (zero? prod)\n                           n\n                           (recur (quot prod 10) (+ n (* (rem prod 10) (rem prod 10))))))) col)))", "user": "57ee2b3ee4b0bfb2137f5bac"}, {"problem": 120, "code": "(fn sum-of-square-digits [coll]\n  (letfn [(smaller-than-digits-squared? [d]\n            (let [digits (map #(Character/getNumericValue %) (String/valueOf d))]\n              (< d (reduce + (map #(* % %) digits)))))]\n    (count (filter smaller-than-digits-squared? coll))))", "user": "57e79d8ee4b0bfb2137f5afe"}, {"problem": 120, "code": "(fn [sq]\n    (count (filter (fn [[v digits]] (> (reduce + (map #(* % %) digits)) v))\n            (zipmap sq (map\n                        (fn break-apart-digits [n]\n                          (loop [n n digits ()]\n                            (if (<= n 0) digits\n                                (recur (quot n 10) (conj digits (mod n 10))))))\n                        sq)))))", "user": "57f6e666e4b0d3187e9008f2"}, {"problem": 120, "code": "(fn countless [si]\n  (count (filter (fn less [i]\n  (< i ((fn sumsquared [i]\n  (apply + (map (fn [x] (* x x)) ((fn digitize [i]\n  (map (fn d2i [d]\n  (- (int d) (int \\0))\n) (str i))\n) i)))\n) i))\n) si))\n)", "user": "562add6de4b00e49c7cb4834"}, {"problem": 120, "code": "(fn [coll] (count (filter (fn [num] (< num (reduce #(+ %1 (+ (* %2 %2))) 0 (map #(Character/digit % 10) (str num))))) coll)))", "user": "57b9fb56e4b0fbc9809a27fa"}, {"problem": 120, "code": "(fn [xs]\n  (letfn [(digits [n]\n            (loop [r '()\n                   i n]\n              (if (= 0 i)\n                r\n                (recur (cons (rem i 10) r)\n                       (quot i 10)))))\n          (digit-square-sum [n]\n            (->> (digits n)\n                 (map #(* % %))\n                 (reduce +)))]\n    (count (filter #(< % (digit-square-sum %)) xs))))", "user": "580bd81ee4b0849f6811b711"}, {"problem": 120, "code": "(fn [coll] (reduce (fn [sum n]\n           (if (< n (reduce #(let [c (Character/getNumericValue %2)] (+ %1 (* c c))) 0 (str n)))\n             (inc sum)\n             sum))\n           0 coll))", "user": "565b2fa5e4b068f2fe63dbfe"}, {"problem": 120, "code": "(fn [nums] (count (filter (fn [num] (< num (reduce + (map #(* % %) (map #(- (int %) 48) (str num)))))) nums)))", "user": "5686e652e4b0dcc4269f4059"}, {"problem": 120, "code": "(fn __ [s]\n  (let [ss (fn [n]\n             (->> (clojure.string/split (str n) #\"\")\n                  (remove #(= \"\" %))\n                  (map #(Integer. %))\n                  (map #(* % %))\n                  (apply +)))]\n    (count (filter #(< % (ss %)) s))))", "user": "57a0b341e4b0c3d858beb8d4"}, {"problem": 120, "code": "(fn [m]\n  (let [x (fn [n]\n                     (map #(Integer/valueOf (str %)) (String/valueOf n)))\n        y (fn [n]\n                     (apply + (map #(* % %) (x n))))\n        res-seq (filter #(< % (y %)) m)]\n    (count res-seq)))", "user": "580d7de3e4b0849f6811b73d"}, {"problem": 120, "code": "(fn [coll]\n    (->> (map str coll)\n         (map #(map str %))\n         (map #(map bigint %))\n         (map #(map (fn [a] (* a a)) %))\n         (map #(apply + %))\n         (map-indexed vector)\n         (filter #(< (first %) (last %)))\n         count))", "user": "55634f38e4b0c656e3ff17e8"}, {"problem": 120, "code": "#(let [dm (zipmap \"0123456789\" (range))]\n   (count\n    (filter\n     (fn [n] \n       (< n (reduce (fn [s d] (+ s (* (dm d) (dm d)))) 0 (str n))))\n     %)))", "user": "57c94c54e4b05aa3c4741d2c"}, {"problem": 120, "code": "(fn sosod [xs]\n  (count (remove true?\n         (map #(apply >= %)\n              (map vector xs\n                   (map (fn [st] (reduce + (map #(* % %) (map #(Character/digit % 10) st)))) (map str xs)))))))", "user": "56069006e4b08b23635d3174"}, {"problem": 120, "code": "(fn less-ssod\n  ([xs] (less-ssod 0 xs))\n  ([c [x & xs]]\n   (if (nil? x)\n    c\n    (recur (+ c (if (> ((fn [y] (reduce #(+ % (* %2 %2)) 0 (map #(Character/digit % 10) (seq (str y))))) x) x) 1 0)) xs))))", "user": "54026d7de4b0df28a13c62cf"}, {"problem": 120, "code": "(fn [coll]\n    (count (filter (fn [n] (< n (reduce + (map #(* % %) (map #(Character/digit % 10) (seq (str n))))))) coll)))", "user": "58134ba8e4b0f478707a060b"}, {"problem": 120, "code": "(fn f120 [coll]\n  (->>\n   (map #((comp str str) %) coll)\n   (map #(map (fn [x] (* (bigint (str x)) (bigint (str x)))) %))\n   (map #(reduce + %))\n   (map-indexed #(do [% %2]))\n   (filter #(< (first %) (last %)))\n   (count)))", "user": "57bbc9bde4b05aa3c4741c31"}, {"problem": 120, "code": "(fn [coll]\n    (count\n        (filter #(< % (reduce (fn [a x] (+ a (* x x))) 0 (map read-string (re-seq #\"\\d{1}\" (str %))))) coll)\n    )\n)", "user": "580c8fcee4b0849f6811b721"}, {"problem": 120, "code": "(fn [s]\n   (let [gd (fn [a](map #(- (int %) 48) (str a)))]\n     (count (filter #( > (reduce (fn [x y] (+ x (* y y))) 0 (gd %)) %) s))))", "user": "581a5fdbe4b0e114eb51a002"}, {"problem": 120, "code": "(fn [y]\n  (reduce +\n   (map (fn [x] (if (< x (reduce + (map #(* % %) (map #(- (int %) 48) (str x))))) 1 0)) y)))", "user": "574a71b7e4b02ea1147991fb"}, {"problem": 120, "code": "(let [digits-of (fn [x]\n                  (map #(- % (int \\0)) (map int (into [] (str x)))))]\n  (let [sum-of-squared-digits (fn\n                                [x]\n                                (loop [[h & t] (digits-of x)\n                                       accum 0]\n                                  (if (nil? t)\n                                    (+ accum (* h h))\n                                    (recur t (+ accum (* h h))))))]\n    (fn count-less-than-sum-of-squared-digits\n      [s]\n      (loop [[h & t] s\n             accum 0]\n        (let [new-accum (if (< h (sum-of-squared-digits h))\n                            (+ accum 1)\n                            accum)]\n          (if (nil? t)\n              new-accum\n              (recur t new-accum)))))))", "user": "58152157e4b0f478707a0631"}, {"problem": 120, "code": "(fn lt-ssq-count [xs]\n  (when (integer? (first xs))\n    (letfn [(ssq [i] (reduce\n                       #(+ %1\n                           (let [j (- (int %2) 48)]\n                             (* j j))), 0, (str i)))]\n      (count (filter #(< % (ssq %)) xs)))))", "user": "515cf9b5e4b00901442db1d4"}, {"problem": 120, "code": "#(count (filter (fn [n] (< n (loop [acc 0 st (str n)]\n                               (let [h (first st)]\n                                 (if (nil? h)\n                                   acc\n                                   (let [ v (- (int h) (int \\0))]\n                                     (recur (+ acc (* v v)) (rest st)))))))) %))", "user": "58225587e4b04b46fc4b0f94"}, {"problem": 120, "code": "(fn [e]\n  (count\n   (filter\n    (fn [x]\n      (< x\n         ((fn [c] (apply + (map #(* % %) c)))\n          (map #(read-string (str %)) (str x))))) e)))", "user": "5405885ee4b0addc1aec6668"}, {"problem": 120, "code": "(fn sum-digits\n  [numbers]\n  (loop [num-trues 0 x (first numbers) xs (rest numbers)]\n        (if (nil? x)\n            num-trues\n            (let [digits (map #(Integer/parseInt (str %)) (seq (str x)))]\n              (if (< x (reduce + (map #(* %1 %1) digits)))\n                (recur (inc num-trues) (first xs) (rest xs))\n                (recur num-trues (first xs) (rest xs))\n              )\n            )\n        )\n  )\n)", "user": "560d4994e4b05f002753df3c"}, {"problem": 120, "code": "(fn [c]\n  (count (filter #(< % ((fn [x]\n                   (loop [sum 0\n                          n x]\n                     (if (= n 0)\n                       sum\n                       (let [m (mod n 10)]\n                         (recur (+ sum (* m m)) (/ (- n m) 10)))))) %)) c)))", "user": "581e8b86e4b04b46fc4b0f2b"}, {"problem": 120, "code": "(fn f [x]\n  (count\n    (filter\n      (fn [y] \n        (< y\n          (reduce +\n             (map #(* % %)\n               (map #(Character/digit % 10) (seq (str y)))))))\n      x)))", "user": "58247423e4b051871117bec5"}, {"problem": 120, "code": "#(count (for [i % :when (< i (apply + (for [x (map (comp read-string str) (str i))] (* x x))))] i))", "user": "57ee432de4b0bfb2137f5bb2"}, {"problem": 120, "code": "(fn [y]\n  (count\n   (filter\n    (fn [x]\n      (< x\n         (->> x\n              str\n              (map #(- (int %) 48))\n              (map #(* % %))\n              (apply +))))\n    y)))", "user": "5742ec91e4b05c31a32c0883"}, {"problem": 120, "code": "(fn [s]\n    (letfn [(digitize [n]\n              (loop [n n\n                     ret ()]\n                (if (< n 1)\n                  ret\n                  (recur (quot n 10) (conj ret (rem n 10))))))\n            (sum-of-sequare [s]\n              (reduce + (map #(* % %) s)))]\n      (count (filter (fn [[k v]] (< k v))\n                     (zipmap s (map (comp sum-of-sequare digitize) s))))))", "user": "55c5b55fe4b0e31453f649b5"}, {"problem": 120, "code": "(comp count\n      (partial\n        filter\n        (fn [x]\n          (< x (apply + (map (comp #(* % %) read-string str)\n                             (str x)))))))", "user": "581e61b0e4b04b46fc4b0f28"}, {"problem": 120, "code": ";; not sure why this code produces EOF error here. It runs and passes in my REPL\n\n#_(fn [coll] (let [square #(* % %)\n                   componentize #(map read-string (-> % str (clojure.string/split #\"\")))\n                   sum-squares #(reduce + (map square (componentize %)))\n                   less-than-sum-of-parts? #(< % (sum-squares %))]\n\n               (count (filter less-than-sum-of-parts? coll))))\n\n\n;; stealing this one to get past it:\n(fn sum-square [coll]\n  (let [digits (fn [n] (map #(- (int %) 48) (str n)))\n        square #(* % %)\n        sum-digits (fn [n] (reduce + (map square (digits n))))]\n    (count (filter #(< % (sum-digits %)) coll))))", "user": "5665ef78e4b0e91d5f5c5664"}, {"problem": 120, "code": "(fn [s]\n  (letfn[\n          (digit-seq [n]\n    (letfn [(helper [acc n]\n                  (if (= 0 n)\n                    acc\n                    (helper (cons (rem n 10) acc) (quot n 10))))]\n      (helper [] n)))\n          (sum-sq [s]\n  (reduce + (map #(* % %) s)))\n          (check-sum-sq [n] (< n (-> n digit-seq sum-sq)))]\n  (->> \n    s\n    (map #(check-sum-sq %))\n    (filter true?)\n    count)))", "user": "5813e208e4b0f478707a061b"}, {"problem": 120, "code": "(fn [coll]\n   (count\n    (filter (fn [x]\n              (->> (str x)\n                   (reduce (fn [acc it]\n                             (let [i (- (int it)\n                                        (int \\0))]\n                               (+ acc (* i i))))\n                           0)\n                   (< x)))\n            coll)))", "user": "5808ee16e4b0a837a8b30d16"}, {"problem": 120, "code": "(fn s [c] (count \n   (filter true? \n     (map #(< % \n        (apply + (for [x (vec (str %))] \n                   ({\\0 0, \\1 1, \\2 4, \\3 9, \\4 16, \\5 25, \\6 36, \\7 49, \\8 64, \\9 81} x))))  \n          c))))", "user": "55632016e4b0c656e3ff17e4"}, {"problem": 120, "code": "(fn my-check [s]\n  (count (filter (fn [num]\n                   (< num (->> num\n                               str\n                               seq\n                               (map (comp #(* % %) read-string str))\n                               (apply +)\n                               ))) s)))", "user": "5829d588e4b051871117bf4a"}, {"problem": 120, "code": "(fn bar [coll]\n  (count\n   (filter\n    (fn [val]\n      (->> val\n           (str)\n           (partition 1 1 nil)\n           (flatten)\n           (map #(- (int %) (int \\0)))\n           (map #(* % %))\n           (apply +)\n           (< val))) coll)))", "user": "58303fc3e4b051871117c006"}, {"problem": 120, "code": "(fn [coll] \n  (let [sum-squares (fn [n] (reduce + (map #(* % %) (map #(- (int %) 48) (str n)))))]\n    (count (filter #(< % (sum-squares %)) coll))))", "user": "5566d812e4b0c656e3ff1837"}, {"problem": 120, "code": "(fn count-dc [coll]\n    (letfn  [(digit-cudratic [x]\n        (< x (apply + (map (fn [y](* y y)) (map #(->> %  str Integer/parseInt) (str x))))))]\n        (count (filter true? (map digit-cudratic coll)))))", "user": "566ff0a1e4b0a866af6896ec"}, {"problem": 120, "code": "(fn [x]\n  (let [str-x (map str x)\n         v-v-x (map #(map read-string %) (map #(map str %) (map seq str-x)))]\n        (reduce + (map #(if (< %1 %2) 1 0)\n                       x\n                       (map (fn [z] (reduce + (map #(* % %) z)))\n                            v-v-x)))))", "user": "5835bc73e4b089d5ab817ce9"}, {"problem": 120, "code": "(fn [coll]\n  (count \n    (filter \n      #(< % \n          (reduce (fn [a b] (+ a (* b b))) \n                  0 \n                  (map (fn [c] (Integer/parseInt c)) \n                       (remove clojure.string/blank? (clojure.string/split (str %) #\"\")))))\n      coll)))", "user": "57ed19a3e4b0bfb2137f5b8e"}, {"problem": 120, "code": "(fn [coll]\n  (let [to-num #(-> % str read-string)\n        sqr #(* % %)\n        sqr-digit (comp sqr to-num)\n        criteria (fn [x] (< x (->> x str (map sqr-digit) (reduce +))))]\n    (count (filter criteria coll))))", "user": "4f2acb29e4b0d6649770a040"}, {"problem": 120, "code": "(fn nr120i [y] (count (filter (fn ltsosq? [x] (< x (reduce + (map #(Math/pow (Integer/parseInt (str %)) 2) (seq (str x)))))) y)))", "user": "57235dc4e4b0c5bde472c0e2"}, {"problem": 120, "code": "(fn [ns]\n  (letfn [(sqr [n] (* n n))\n          (f [n]\n            (reduce\n             (fn [acc x] (+ acc (sqr (Integer/parseInt (str x)))))\n             0\n             (str n)))]\n    (count\n     (filter (fn [n]\n               (< n (f n)))\n             ns))))", "user": "5791d259e4b0ebec4cfb75c0"}, {"problem": 120, "code": "(fn [xs] \n  (count \n    (filter \n      (fn [x]\n        (let \n          [\n            [digF sumsqF]\n            [(fn DIG [y] (when (> y 0)(let [[m q] [(mod y 10) (quot y 10)]] (cons m (DIG q))))) \n             (fn [ys] (reduce + (map #(* % %) ys)))\n             ]\n            ]\n           (< x (sumsqF (digF x)))\n          )\n      )\n     xs\n    )\n  )\n)", "user": "58334d18e4b089d5ab817c97"}, {"problem": 120, "code": "(fn[coll]\n  (letfn [(n->digits [n]\n          (if (< n 10) \n            [n]\n            (conj (n->digits (/ (- n (rem n 10)) 10))\n                  (rem n 10))))\n          (smaller-than-sum-of-sq? [n]\n            (< n (reduce + (map #(* % %) (n->digits n)))))]\n    (count (filter smaller-than-sum-of-sq? coll))))", "user": "57c0917be4b05aa3c4741c95"}, {"problem": 120, "code": "(fn weird [nums]\n  (letfn [(num2square [n]\n            (->> n\n                 ; 29\n                 (str)\n                 ; \"29\"\n                 (seq)\n                 ; (\\2 \\9)\n                 (map (comp #(Integer/parseInt %) str))\n                 ; (2 9)\n                 (map #(* % %))\n                 ; (4 81)\n                 (reduce +)\n                         ; 85\n                         ))]\n    (->> (zipmap nums (map num2square nums))\n         (filter #(< (first %) (second %)))\n         (map #(first %))\n         (count))))", "user": "5779556de4b0979f8965166e"}, {"problem": 120, "code": "#(count (filter (fn [n] (< n (apply + (map (fn [c] (Math/pow (- (int c) 48) 2)) (str n))))) %))", "user": "58391c94e4b089d5ab817d35"}, {"problem": 120, "code": "(fn [xs]\n  (letfn [(valid? [x]\n            (let [digits (map #(- (int %) \n                                  0x30) ;\\0 in hex\n                              (str x))]\n              (< x\n                 (reduce + (map * digits digits)))))]\n    (count (filter valid? xs))))\n\n; golf: 84 non-whitespace, 10spaces necessary = 94\n; full-golf: \n;(fn [c]\n;  (count\n;   (filter (fn [x] \n;             (->> (str x)\n;                  (map int)\n;                  (map #(- % 48))\n;                  (map #(* % %))\n;                  (apply +)\n;                  (< x)))\n;          c)))", "user": "54d341f7e4b0e8a36923e603"}, {"problem": 120, "code": "(fn [x] \n    (letfn \n        [(sqr [x] (* x x)) \n         (sumsqr [x] (apply + (map sqr x)))\n         (convert [x] (map #(- (int %) (int \\0)) (seq (str x))))]\n      (->> x\n       (map convert)\n       (map sumsqr)\n       (interleave x)\n       (partition 2)\n       (filter (fn [[a b]] (< a b)))\n       (count))))", "user": "57dafe97e4b0bd073c20241c"}, {"problem": 120, "code": "(fn [input] \n\t(letfn [(get-digits [n] (map #(Integer/valueOf (str %)) (str n))) \n\t\t\t(get-sqr [n] (apply + (map #(* % %) (get-digits n))))\n\t ] \n\t\t(count (filter #(< % (get-sqr %)) input)))\n\t)", "user": "57465429e4b009280f9f2b60"}, {"problem": 120, "code": "(letfn [(digits [n] (map #(- (int %) 48) (str n)))] (fn [x] (count (filter (fn [n] (< n (apply + (map #(* % %) (digits n))))) x))))", "user": "584dadebe4b0b7285a6f4e44"}, {"problem": 120, "code": "(fn [xs]\n  (letfn [(sq [x] (* x x))]\n    (->> xs\n         (filter (fn [x] (< x (apply + (map #(sq (- (int %) 48)) (str x))))))\n         count)))", "user": "583e27e2e4b089d5ab817daa"}, {"problem": 120, "code": "(fn [c]\n  (reduce + (for [n     c\n                  :when (< n (reduce + (map  (comp #(* % %)\n                                                   #(Integer/parseInt %)\n                                                   str)\n                                             (-> n str seq))))]\n              1)))", "user": "4e77c1db535d324fb2983d72"}, {"problem": 120, "code": "(fn s-s-d [c]\n  (let [helper (fn [n]\n                 (let [s (map #(Character/digit % 10) (seq (str n)))\n                       s-s (reduce #(+ (* %2 %2) %1) 0 s)]\n                   (< n s-s)))]\n    (count (filter #(helper %) c))\n    ))", "user": "56f4cedce4b046a417f92063"}, {"problem": 120, "code": "#(count (filter (fn [a] (< a (reduce + (map (fn [b](* (- (int b) 48) (- (int b) 48))) (str a))))) %))", "user": "5849ac5fe4b089d5ab817ed7"}, {"problem": 120, "code": "(fn square-digits [coll]\n  (let [to-int   #(- (int %) 48)\n        sqr      #(* (to-int %) (to-int %))\n        squares  (map #(reduce + (map sqr %)) (map str coll))]\n    (->> squares (map (fn [n sq] (> sq n)) coll) (filter true?) count)))", "user": "58327a08e4b089d5ab817c7c"}, {"problem": 120, "code": "(fn [coll]\n    (letfn [(digits [n]\n              (->> n str (map (comp read-string str))))\n            (sum-sq-digits [n] \n              (reduce + (map #(* % %) (digits n))))\n            (is-sq-larger? [n] \n              (< n (sum-sq-digits n)))]\n      (-> (group-by is-sq-larger? coll)\n          (get true)\n          (count))))", "user": "56a358d0e4b0542e1f8d14c9"}, {"problem": 120, "code": "(fn sq-digits [intlist]\n\t(loop [ilist intlist,\n           sqs (map #(reduce + (map (fn [^Character c] (Math/pow (Character/digit c 10) 2)) (str %))) intlist),\n           acc 0]\n    \t(if (empty? ilist)\n        \tacc\n        \t(if (< (first ilist) (first sqs))\n            \t(recur (rest ilist) (rest sqs) (inc acc))\n            \t(recur (rest ilist) (rest sqs) acc)\n            )\n        )\n    )\n)", "user": "569e3175e4b0542e1f8d1484"}, {"problem": 120, "code": "(fn [coll] \n  (let [m (fn [x] (map #(Character/getNumericValue %) (str x)))\n        s (fn [y] (reduce + (map #(* % %) (m y))))]\n    (count (filter #(< % (s %)) coll))\n    \n    )\n  \n  )", "user": "583667c7e4b089d5ab817cfb"}, {"problem": 120, "code": "(fn pcount [lst]\n\n(count (filter (fn [n]\n  (< n\n     \n     (->> (map str (seq (str n))) (map #(Integer/parseInt %) )(map (fn [x] (* x x))  ) (reduce + ))))\n               lst)))", "user": "55a21f1ce4b0acc240e3151f"}, {"problem": 120, "code": "(fn insp [li]\n  (let [\n        digits (fn digits [n]\n                   (let \n                     [e (quot n 10)\n                      r (rem n 10)]\n                    (if \n                      (= e 0)\n                      (list r)\n                      (cons r (digits e)))))\n        sq (fn sq [n]\n             (reduce + (map #(* % %) (digits n))))\n        cmp (fn cmp [li]\n               (map < li (map sq li)))]\n          \n       (count (filter identity (cmp li)))))", "user": "4e6a5728535d8ccf87e9fecf"}, {"problem": 120, "code": "(fn [lis]\n  (let [char->int #(Integer/parseInt (str %))\n        square #(* % %)\n        char->int->square (comp square char->int)\n        sum-func (fn [fun] #(+ %1 (fun %2)))]\n    (reduce + (map #(if (> (reduce (sum-func char->int->square) 0 (str %)) %)\n                      1\n                      0) lis))))", "user": "56b6e354e4b0982f16b37e41"}, {"problem": 120, "code": "(fn [coll]\n  (->> coll\n       (filter\n        (fn [x]\n           (< x (reduce #(+ %1 (* %2 %2))\n                        0\n                        (->> x\n                             str\n                             seq\n                             (map #(- (int %) (int \\0))))))))\n       count))", "user": "585e2e77e4b0f14aab7c87ac"}, {"problem": 120, "code": "(fn [seqn]\n  (let [sq (fn [n]\n             (int (Math/pow n 2)))\n        to-di (fn [n]\n                (map (comp #(Integer/parseInt %) str) (seq (str n))))]\n    (count (filter #(< %\n                       (apply + (map sq (to-di %))))\n                   seqn))))", "user": "563f4c47e4b08d4f616f5ed2"}, {"problem": 120, "code": "(fn [coll]\n  (count (filter #(and (< % 100) (< % (+ (* (rem % 10) (rem % 10)) (* (quot % 10) (quot % 10))))) coll)))", "user": "532686e6e4b09d4e7a9b54ef"}, {"problem": 120, "code": "(fn [sequence]\n  (count (filter (fn [number]\n                   (< number\n                      (apply +\n                             (map (fn [character]\n                                    (* (- (int character) (int \\0))\n                                       (- (int character) (int \\0))))\n                                  (seq (str number))))))\n                 sequence)))", "user": "58637f03e4b0f14aab7c881e"}, {"problem": 120, "code": "(comp count filter) \n (fn [n] (< n (->> (str n) (map #(-> (str %) read-string (Math/pow 2))) (reduce +))))", "user": "57d0e185e4b0bd073c202360"}, {"problem": 120, "code": "(fn outer [v]\n    (count\n     (filter\n      (fn mid [x]\n        (let [sq #(* % %)]\n          (< x (apply + (map\n                         (fn inner [c]\n                           (-> c int (- 48) sq))\n                         (str x)\n                         ))))) v)))", "user": "57ee82b1e4b0bfb2137f5bbd"}, {"problem": 120, "code": "(fn [col]\n  (count (map first (filter #(< (first %) (second %)) (map (fn [a] (list a (reduce + (map #(* % %) (map read-string (map str (str a))))))) col)))))", "user": "51456858e4b0e88796073408"}, {"problem": 120, "code": "(let [d (fn [x] (map #(- (int %) 48) (str x)))\n            ds (fn [x] (apply + (map * (d x) (d x))))]\n        (fn [x] (count (filter #(< % (ds %)) x))))", "user": "4e11b92a535d04ed9115e7cb"}, {"problem": 120, "code": "(fn [coll]\n    (let [square #(* % %)\n          digits (fn [n] (map #(- (int %) 48) (str n)))\n          sum-square-digits #(reduce + (map square (digits %)))]\n      (count (filter #(< % (sum-square-digits %)) coll))\n      ))", "user": "52dc7344e4b09f7907dd13cf"}, {"problem": 120, "code": "(fn [xs]\n  (count (filter (fn [x]\n                   (let [nums (mapv #(Integer. (str %)) (str x))\n                         sums (reduce + (map #(* % %) nums))]\n                     (if (< x sums) x))) xs)))", "user": "58524875e4b0b7285a6f4ead"}, {"problem": 120, "code": "(fn test72 [s]\n  (letfn [(f [n] \n            (->> (str n)\n                 seq\n                 (reduce #(+ %1 (apply * (repeat 2 (- (int %2) (int \\0))))) 0 )) )] (count (filter #(< % (f %)) s))))", "user": "5804d5afe4b0a837a8b30cad"}, {"problem": 120, "code": "(fn [ints]\n  (let [square (fn [int] (* int int))\n        smaller-than-sum-of-squares? (fn [int]\n                                       (< int (apply + (map #(square (Character/digit % 10)) (str int)))))]\n    (count (filter smaller-than-sum-of-squares? ints))))", "user": "4db86aee535d1e037afb2193"}, {"problem": 120, "code": "(fn t [r]\n  (let [product-of-digits (fn k [n]\n                            (if (< n 10) (* n n)\n                                (+ (k (quot n 10))\n                                   (k (rem n 10)))))]\n    (reduce + (map (fn g [n] (if (< n (product-of-digits n)) 1 0)) r))))", "user": "5866b999e4b0f14aab7c886b"}, {"problem": 120, "code": "(fn [xs]\n  (count \n   (filter true? \n           (map < \n                xs \n                (map \n                 (fn [n]\n                   (let [a (map read-string (re-seq #\"\\d\" (str n)))]\n                     (apply + (map * a a)))) xs)))))", "user": "55597b84e4b0deb715856e36"}, {"problem": 120, "code": "(fn sum-square-digits\n  [coll]\n  (let [sum-square (fn [num]\n                    (->> (str num)\n                         (map #(Integer/parseInt (str %)))\n                         (reduce #(+ % (* %2 %2)) 0)))]\n    (->> (filter #(< % (sum-square %)) coll)\n         count)))", "user": "547bf82de4b0c51c1f4d72e1"}, {"problem": 120, "code": "(fn f [coll]\n  (count\n    (filter (fn [n]\n              (->> (iterate #(int (/ % 10)) n)\n                   (take-while pos?)\n                   (map (comp #(* % %) #(mod % 10)))\n                   (reduce +)\n                   (< n)))\n\n         coll)))", "user": "4f3ca5a6e4b0e243712b1f53"}, {"problem": 120, "code": "(fn [r]\n  (letfn \n    [(d\n      ([n] (d n ()))\n      ([n res]\n       (if (zero? (int (/ n 10)))\n        (cons n res)\n        (recur (int (/ n 10)) (cons (rem n 10) res)))))\n     (sqs [n] (reduce + (map #(* % %) (d n))))]\n     (count (filter #(> (sqs %) %) r))))", "user": "586615e6e4b0f14aab7c8858"}, {"problem": 120, "code": "(fn [r] (count (filter (fn [n] (< n (reduce + (map #(* % %) (->> n str (map (comp read-string str))))))) r)))", "user": "581dad0ae4b04b46fc4b0f17"}, {"problem": 120, "code": "(fn [c] (count (filter (fn [n] (< n (reduce + 0 (map #(* % %) (map #(- (int %) 48) (str n)))))) c)))", "user": "587294f0e4b01531a375ea1e"}, {"problem": 120, "code": "(fn ssd [x]\n  (if (empty? x)\n    0\n    (if (< (first x) (reduce + (map #(* % %) (map read-string (re-seq #\"\\w\" (str (first x)))))))\n      (+ 1 (ssd (drop 1 x)))\n      (ssd (drop 1 x)))))", "user": "586b6a0ae4b01531a375e957"}, {"problem": 120, "code": "(fn [ints]\n  (let [sum-square-digits (fn [n]\n                            (->> (map #(Integer/parseInt (str %)) (str n))\n                                 (map #(* % %))\n                                 (reduce +)))]\n    (count (filter #(< % (sum-square-digits %)) ints))))", "user": "5879d577e4b01531a375ead8"}, {"problem": 120, "code": "(fn sum-of-squared-digits-count [xs]\n  (let [sum-of-squared-digits\n        (fn [n]\n          (loop [sum 0 remainder n]\n            (let [digit (rem remainder 10)\n                  new-sum (+ sum (* digit digit))\n                  new-remainder (quot remainder 10)]\n              (if (zero? new-remainder)\n                  new-sum\n                  (recur new-sum new-remainder)))))]\n    (count (filter #(< % (sum-of-squared-digits %)) xs))))", "user": "57e9a77ae4b0bfb2137f5b35"}, {"problem": 120, "code": "(fn [c]\n  (count\n    (filter (fn [n]\n      (< n \n        (reduce +\n          (map (fn [d] (* d d))\n            (map #(mod % 10) (take-while pos? (iterate #(quot % 10) n)))))))\nc)))", "user": "54f26266e4b024c67c0cf8c5"}, {"problem": 120, "code": "(fn [xs]\n  (count (filter\n   (fn [el] (< el (apply + (map #(* % %) (map read-string (map str (seq (str el))))))))\n   xs)))", "user": "58800fd4e4b0f1effa3b7606"}, {"problem": 120, "code": "(fn [coll]\n  (count (filter (fn [x] (< x (reduce + (map #(* % %) (map #(- (int %) 48) (seq (str x))))))) coll)))", "user": "54012b48e4b0de5c41848620"}, {"problem": 120, "code": "(fn [c]\n  (count \n    (filter (fn [i]\n              (< i (->> (seq (str i))\n                        (map #(- (int %) 48))\n                        (map #(* % %))\n                        (reduce +))))\n            c)))", "user": "50385746e4b0803468ea2c6d"}, {"problem": 120, "code": "(let [sumOfSquares (comp (partial reduce +) (partial map #(* % %)))\n\ttoDigits (fn [x] (map #(Character/digit % 10)  (seq (char-array (str x)))))\n\tisSmallerThanSumOfSquares (fn [x] (< x (sumOfSquares(toDigits x))))]\n\t#(count(filter identity (map isSmallerThanSumOfSquares %))))", "user": "5650082fe4b0284900eef6b7"}, {"problem": 120, "code": "( fn ltssqd [in]\n  (let\n   [c2int #(- (int %) (int \\0))\n    ntodigits #(map c2int (-> % str vec ))\n    sqsum (fn sqsum [n] (reduce #(+ %1 (* %2 %2)) 0 (ntodigits n)))\n    ]\n    (count (filter #(< % (sqsum %)) in ))\n  ))", "user": "587c59d1e4b01531a375eb17"}, {"problem": 120, "code": "(fn [xs]\n(count (filter (fn [n] (< n (reduce + (map (comp #(* % %) read-string str) (str n))))) xs)))", "user": "563c7f98e4b0bfe05bf11836"}, {"problem": 120, "code": "(fn [ys] (letfn [(digit-summer [x]\n                  (loop [digits x\n                         accum 0]\n                    (if (> digits 0)\n                      (recur (int (/ digits 10)) (+ accum (* (mod digits 10) (mod digits 10))))\n                      accum)))]\n           (reduce (fn [accum1 item]\n                     (if (> (digit-summer item) item)\n                       (+ accum1 1)\n                       accum1))\n                   0\n                   ys)))", "user": "58740c18e4b01531a375ea49"}, {"problem": 120, "code": "(fn [s] (->> s\n             (map #(re-seq #\"\\d\" (str %)))\n             (map #(map read-string %))\n             (map #(reduce (fn [t x] (+ t (int (Math/pow x 2)))) 0 %))\n             (keep-indexed (fn [i x] (if (< (nth s i) x) x)))\n             count))", "user": "585dbe41e4b0f14aab7c879f"}, {"problem": 120, "code": "(fn [s]\n  (count (filter (fn [x]\n                   (< x ((fn sumsquare [n]\n  (reduce + (map (comp #(* % %) read-string str) (seq  (str n))))) x)))\n                 s)))", "user": "567b2f20e4b05957ce8c61a2"}, {"problem": 120, "code": "(fn [si]\n        (let [f (fn [n]\n                 (let [i (reduce +  (map #(* (Integer/parseInt (str %)) (Integer/parseInt (str %))) (str n)))]\n                   (if (< n i) 1 0)))]\n          (reduce + (map f si))))", "user": "58983e3fe4b00487982d52ce"}, {"problem": 120, "code": "(fn [args]\n    (reduce\n     +\n     (map       \n      (fn [x]\n        (let [sumv (apply\n                    +\n                    (map\n                     #(let [x (-> % str Integer/parseInt)] (* x x))\n                     (str x)))]\n          (if (> sumv x) 1 0)))\n      args)))", "user": "54eff2bee4b024c67c0cf88d"}, {"problem": 120, "code": "(fn [ns]\n  (let [squared-sum (fn [n] (->> n str (map (comp #(* % %) #(- % 0x30) int)) (reduce +)))]\n    (->> ns\n         (map squared-sum)\n         (zipmap ns)\n         (filter (fn [[k v]] (< k v)))\n              count)))", "user": "58949f8de4b00487982d525e"}, {"problem": 120, "code": "(fn [nums] \n  (let [ ss (fn [n]\n              (let [items (map (comp read-string str) (str n))\n                    sqrsum (reduce + (map #(* % %) items))]\n                (if (< n sqrsum) 1 0)))]\n    (reduce + (map ss nums))))", "user": "52f426fce4b05e3f0be25f1e"}, {"problem": 120, "code": "(fn ssod [lst]\n  (count (filter (fn [x]\n                   (->> (str x)\n                        (map #(Character/digit % 10))\n                        (map #(* % %))\n                        (reduce +)\n                        (< x)))\n                 lst)))", "user": "5895477fe4b00487982d527c"}, {"problem": 120, "code": "(fn [xs] (count (filter (fn [x] (< x (reduce + (map #(* (- 48 (int %)) (- 48 (int %))) (vec (str x)))))) xs)))", "user": "5884e807e4b0f1effa3b76a6"}, {"problem": 120, "code": "(fn [s] (count (filter #(< % (loop [n % total 0] (if (zero? n) total (recur (quot n 10) (+ total (let [x (rem n 10)] (* x x))))))) s)))", "user": "58a0fc33e4b02bd94d917ea3"}, {"problem": 120, "code": "#(reduce\n   +\n   (filter\n    (complement nil?)\n    (map (fn [z]\n           (if\n               (< z (reduce\n                     +\n                     (map\n                      (fn [x]\n                        ((fn [y]\n                           (* y y))\n                         (Character/getNumericValue x)))\n                      (seq (str z)))))\n             1))\n         %)))", "user": "576e607ae4b0979f89651579"}, {"problem": 120, "code": "(fn sq [coll]\n  (count (filter (fn [item] \n                   (< item (apply + (map (fn [item] (* item item)) \n                                         (->> item str seq (map str) (map read-string)))))) \n                 coll)))", "user": "588f500ae4b00487982d51a4"}, {"problem": 120, "code": "(fn [my-coll]\n  (count\n    (filter\n      (fn [my-int]\n        (< my-int  \n          (reduce +\n            (map #(* % %) (map #(- (int %) 48) (seq (str my-int)))))))\n    my-coll)))", "user": "5784ff88e4b0ebec4cfb74d4"}, {"problem": 120, "code": "(fn fourclojure120 [myvec]\n  (letfn [(sum-of-square-digits [myint]\n            (reduce + (map (fn givedigit [mychar](let [mydigit (Character/digit mychar 10) ] (* mydigit mydigit) ) ) (vec (str myint)) ))\n\n            )\n          \n          ]\n   (->  (filter #(< % (sum-of-square-digits %))  myvec) count)\n    \n    )\n  )", "user": "58a17511e4b02bd94d917eb4"}, {"problem": 120, "code": "(fn requested_function [coll]\n  (letfn [(sum_square_digits [n]\n            (reduce + (map #(* % %) (to_digits n))))\n          (to_digits [n]\n            (let [digit (rem n 10) new_n (int (/ n 10) )]\n              (if (and (= digit 0) (= new_n 0)) [0]\n                  (cons digit (to_digits new_n)))))]\n  (count (for [x coll :when ( < x (sum_square_digits x))]\n    x))))", "user": "58a6d14fe4b01a0c0b232935"}, {"problem": 120, "code": "#(count (filter (fn [int-val] (< int-val (apply + (map (fn [digit] (Math/pow (Integer/parseInt (str digit)) 2)) (seq (.toString int-val)))))) %))", "user": "57b356c2e4b0fbc9809a277b"}, {"problem": 120, "code": "#(count\n  (filter (fn [i]\n            (letfn [(f [j]\n                     (if (< j 10)\n                       (* j j)\n                       (let [x (rem j 10)]\n                         (+ (* x x) (f (quot j 10))))))]\n              (< i (f i)))) %))", "user": "5458c74de4b01be26fd74623"}, {"problem": 120, "code": "(fn [col]\n  (count\n  (filter \n   (fn [x]\n     (< x \n        (apply \n         + \n         (map \n          (fn \n            [ch] \n            (let \n              [\n               d (Integer. (str ch))\n               ] \n              (* d d)\n              )\n            ) \n          (seq (str x))\n          )\n         )\n        )\n     ) \n   col\n   )\n   )\n  )", "user": "58950f29e4b00487982d5270"}, {"problem": 120, "code": "(fn [coll]\n  (letfn [(explode [n] (if (zero? n) [] (lazy-seq (cons (mod n 10) (explode (quot n 10))))))\n          (sum-of-sqrs [l] (apply + (map * l l)))\n          (filterfn [n] (< n (sum-of-sqrs (explode n))))]\n    (count (filter filterfn coll))))", "user": "58923efce4b00487982d521c"}, {"problem": 120, "code": "(fn [xs]\n        (count\n         (filter (fn [x]\n                   (> (reduce + (map #(* % %) (#(->> % str (map (comp read-string str))) x))) x))\n                 xs)))", "user": "52f89125e4b047fd55836fd4"}, {"problem": 120, "code": "(fn [ listx ] (count (filter (fn [ n ] (> (apply + (map (comp #(* % %) read-string str) (seq (str n)))) n)) listx)))", "user": "57887de2e4b0ebec4cfb751c"}, {"problem": 120, "code": "(fn [rng]\n  (letfn [(factorize\n           [number sum]\n           (if\n             (<= number 0)\n             sum\n             (let [digit (mod number 10)]\n               (factorize\n                (int (/ number 10))\n                (cons digit sum)))))]\n    (count (filter\n            identity\n            (map\n             (fn\n               [numb]\n               (< numb (reduce\n                        +\n                        (map\n                         #(* % %)\n                         (factorize numb '())))))\n             rng)))))", "user": "586a657de4b0f14aab7c88bd"}, {"problem": 120, "code": "(fn [sq]\n  (let [\n        chrToDigit #(- (int %) (int \\0))\n        square #(* % %)\n        sqDigitSum #(->> % str (map (comp square chrToDigit)) (apply +))\n        flt #(< % (sqDigitSum %))\n        ]\n    (count (filter flt sq))))", "user": "588e4e05e4b00487982d5188"}, {"problem": 120, "code": "(fn [arr] \n  (count \n   (filter (fn [item] (< item (reduce + (map (fn [item] (* item item)) (map (fn [item] (Character/digit item 10)) (seq (str item))))))) arr)))", "user": "58b54852e4b0ebc645576d52"}, {"problem": 120, "code": "#(letfn [(el-sq [n]\n           (loop [n n\n                  sum 0]\n             (if (zero? n)\n               sum\n               (let [d (rem n 10)]\n                 (recur (quot n 10) (+ sum (* d d)))))))]\n   (reduce (fn [a b] (if (< b (el-sq b)) (inc a) a)) 0 %))", "user": "58bb218be4b0888cdc949cf4"}, {"problem": 120, "code": "(fn [c]\n  (letfn [(digits [n]\n            (map #(read-string (str %)) (str n)))\n\n          (sum-of-squares [c]\n            (reduce + (map #(* % %) c)))]\n    (count (filter #(< % (sum-of-squares (digits %))) c))))", "user": "54f14aa6e4b024c67c0cf8af"}, {"problem": 120, "code": "#(count (filter (fn [p]\n                   (loop [x p n 0]\n                      (if (zero? x)\n                        (< p n)\n                        (recur (quot x 10)\n                               (+ n (* (mod x 10) (mod x 10)))))))\n                  %))", "user": "58b81490e4b0ebc645576d8c"}, {"problem": 120, "code": "(fn [k]\n     (count (filter (complement nil?)\n                    (map\n                      (fn\n                        [x]\n                        (let [n (vec (map #(Integer/parseInt (str %)) (flatten  (partition-all 1 (str x)))))\n                              y (apply + (map #(* %1 %1) n))]\n                          (if (< x y)\n                            x\n                            )\n                          )\n                        ) k\n                      ))))", "user": "58a44a14e4b01a0c0b2328f2"}, {"problem": 120, "code": "(fn [col] \n  (count \n   (filter \n    (fn [e] \n      (< e (reduce \n            #(+ %1 (* %2 %2)) \n            0 \n            (map #(Character/digit % 10) (str e)))))\n    col)))", "user": "58a822e4e4b01a0c0b232950"}, {"problem": 120, "code": "(fn [s] (count (filter true? (map (fn [i] (< i (reduce + (map #(* % %) (map #(- (int %) 48) (str i)))))) s))))", "user": "587ee260e4b052da650a6353"}, {"problem": 120, "code": "(fn [coll]\n    (let [split-num (fn [n]\n                      (-> n\n                          str\n                          (clojure.string/split #\"\")\n                          (#(remove empty? %))\n                          (#(map (fn [n] (Integer. n)) %))))\n          smaller? (fn [n]\n                     (let [splited-num (split-num n)\n                           squared-sum (apply + (map #(Math/pow % 2) splited-num))]\n                       (< n squared-sum)))]\n      (count (filter smaller? coll))))", "user": "58bbcbc8e4b0888cdc949d00"}, {"problem": 120, "code": "(fn [v] (letfn [\n                 (get-digits [v]\n                   (reverse\n                     (loop [remainder v digits []]\n                       (let [\n                             floor10 (int (Math/floor (/ remainder 10)))\n                             digit (- remainder (* 10 floor10))\n                             ]\n                         (if (> remainder 0)\n                           (recur floor10\n                                  (conj digits digit)) digits)))))\n\n                 (sum-squares [v] (reduce (fn [p e] (+ p (* e e))) 0 (get-digits v)))\n                 ]\n           (count (filter #(< %1 (sum-squares %1)) v))))", "user": "58a9e872e4b01a0c0b232973"}, {"problem": 120, "code": "(fn [seq]\n  (-> (fn [item]\n        (if (> 10 item)\n          (< item (* item item))\n          (< item (apply + (map (comp #(* % %) read-string str first)\n                                (split-at 1 (str item)))))))\n      (filter seq)\n      count))", "user": "570e43d8e4b0b0fb43fd06eb"}, {"problem": 120, "code": "(fn csd [args]\n    (let [digits (fn [x] (map #(Integer/valueOf (str %)) (String/valueOf x)))\n          sq-digits (fn [x] (apply + (map #(* % %) (digits x))))\n    ] (count (filter #(< % (sq-digits %)) args)))\n)", "user": "4eeb8f68535d93acb0a668a9"}, {"problem": 120, "code": "#(count (filter true? (map\n  (fn fx [n] \n  (letfn \n    [(items [n]\n     (if (zero? n)\n       [0]\n       (loop [x n result []]\n         (if (zero? x)\n           result\n           (recur (quot x 10) (conj result (mod x 10)))))))]\n                     \n     (let [seq1 (items n)\n           sqrsum (reduce + (map * seq1 seq1))]\n    (if (< n sqrsum)\n      true\n      false)))) %)))", "user": "57b35ecbe4b0fbc9809a277e"}, {"problem": 120, "code": "(fn sum-square-digits [xs]\n  (letfn [(int->digits [n]\n            (loop [digits '()\n                   current-val n]\n              (if (zero? current-val)\n                digits\n                (recur (conj digits (mod current-val 10))\n                       (quot current-val 10)))))\n          (sum-squared-digits [n]\n            (reduce + (map #(* % %) (int->digits n))))]\n    (count\n     (filter #(< % (sum-squared-digits %)) xs))))", "user": "57ea4569e4b0bfb2137f5b46"}, {"problem": 120, "code": "(fn [x] (reduce (fn [cum this]\n                  (if (> (->> this\n                              str\n                              seq\n                              (map #(- (int %) 48))\n                              (map #(* % %))\n                              (apply +))\n                         this)\n                    (inc cum)\n                    cum)) 0 x))", "user": "5233564ae4b0f0b72fabf403"}, {"problem": 120, "code": "(fn sosod [coll]\n  (count (filter \n           #(< % (reduce (fn [vin xin] (+ vin (let [x (- (int xin) 48)] (* x x)))) \n                         0 (str %))) \n           coll)))", "user": "58ca613de4b021aa9917edb7"}, {"problem": 120, "code": "(fn [coll] (letfn [(sum-of-square-digits [x]\n                     (apply + (map #(let [y (read-string %)]\n                                      (* y y)) (re-seq #\".\" (str x)))))]\n             (count (filter #(< % (sum-of-square-digits %)) coll))))", "user": "588d224ae4b00487982d516c"}, {"problem": 120, "code": "(fn [nums]\n  (letfn [(digits [n] (map #(Character/digit % 10) (str n)))\n          (sum-of-squares [nums] (apply + (map #(* % %) nums)))\n          (bam [n] (sum-of-squares (digits n)))\n          (f [n] (< n (bam n)))]\n    (count (filter f nums))))", "user": "4f037faf535dcb61093f6af8"}, {"problem": 120, "code": "#(count (for [x % :when (let [x-dig (map (fn [xx] (- (int xx) 48)) (seq (str x)))]\n                          (> (apply + (for [y x-dig] (* y y))) x))] x))", "user": "567d132ee4b05957ce8c61c3"}, {"problem": 120, "code": "(fn [sq] \n  (count (filter (fn [number] \n                   (< number (reduce + \n                                     (map (fn [x] (* x x)) \n                                            (map #(read-string (str %)) (seq (str number)))))))\n                 sq)))", "user": "58d4e73ce4b03c36ff7e594d"}, {"problem": 120, "code": "(fn [coll] \n  (count \n   (filter \n    (fn [x] (< x\n       (reduce #(+ % (* %2 %2)) 0\n         (map #(- (int %) 48) (.toString x)))))\n    coll)))", "user": "57b35772e4b0fbc9809a277c"}, {"problem": 120, "code": "(fn [xs]\n  (letfn [(digits [n]\n                  (if (= 0 (quot n 10))\n                    (list (rem n 10))\n                    (cons (rem n 10) (digits (quot n 10)))))]\n    (count (filter #(< % ((comp (partial reduce +) (partial map (fn [x] (* x x))) reverse digits) %)) xs))))", "user": "58cf00c8e4b03c36ff7e58ac"}, {"problem": 120, "code": "(fn [coll]\n  (count (filter (fn [x]\n                   (let [digs (map #(- (int %) 48) (str x))]\n                     (< x (reduce + (map #(* % %) digs)))))\n                 coll)))", "user": "5893c64ce4b00487982d524b"}, {"problem": 120, "code": "(fn [coll] (count (reduce #(let [number %2 r (map (fn [ch] (- (int ch) (int \\0))) (str number))] (if (< number (apply + (map (fn [e] (* e e)) r))) (conj %1 number) %1)) [] coll)))", "user": "58987ee9e4b00487982d52d2"}, {"problem": 120, "code": "(fn [y] (count (filter true?\n         (for [x y]\n           (if (< x (reduce + (map #(* % %) (map #(- (int %) 48) (seq (str x))))))\n             true)))))", "user": "58b80ec1e4b0ebc645576d89"}, {"problem": 120, "code": "(fn [coll]\n      (count (filter true?(map < \n                               coll\n                               (for [i coll]\n                                 (int (reduce + \n                                              (map #(Math/pow % 2) \n                                                   (map #(- (int %) (int \\0)) \n                                                        (nth (map #(seq (char-array %)) (map str coll)) i))))))))))", "user": "58dcb8cde4b0a4d5acaab6a7"}, {"problem": 120, "code": "(fn [l] (count (for [x l\n                      :let [sqf #(let [i (- (int %) 48)] (* i i))\n                            sq (reduce #(+ % (sqf %2)) 0 (str x))]\n                      :when (< x sq)]\n                 true)))", "user": "58b86162e4b0ebc645576d97"}, {"problem": 120, "code": "(fn count-bigger-than-digit-square-sum [ns]\n  (count (filter (fn [n]\n                   (->> n\n                        (iterate #(quot % 10))\n                        (take-while (comp not zero?))\n                        (map #(mod % 10))\n                        (map #(* % %))\n                        (apply +)\n                        (< n )))\n                 ns)))", "user": "58e37946e4b005f69f193cae"}, {"problem": 120, "code": "(fn count-sum\n  [nums]\n  (let [get-digits (fn [num] (map #(Character/digit % 10) (str num)))\n        sum-digits-square (fn [num]\n                            (let [digits (get-digits num)]\n                              (apply + (map #(* % %) digits) )\n                              ))]\n    (count (filter #(< % (sum-digits-square %)) nums))))", "user": "58de563fe4b0a4d5acaab6e3"}, {"problem": 120, "code": "(fn cnt [col]\n  (letfn [(sum-of-digits-squares [n]\n    (reduce #(+ (Integer. %1) (* (Integer. %2) (Integer. %2))) 0 (re-seq #\"\\d\" (str n))))]\n    (count (filter #(> (Integer. (sum-of-digits-squares %)) %) col))))", "user": "587a3babe4b01531a375eae2"}, {"problem": 120, "code": "(fn [s]\n      (->> s\n           (filter (fn [n]\n                     (< n\n                        (apply +\n                               (map #(let [d (- (int %) (int \\0))]\n                                       (* d d))\n                                    (str n))))))\n           count))", "user": "58c4b11ae4b021aa9917ed2c"}, {"problem": 120, "code": "(let [componentize (fn componentize [x]\n                     (loop [acc [], y x]\n                       (if (zero? y)\n                         acc\n                         (let [digit (rem y 10)]\n                           (recur (conj acc digit) (quot y 10))))))\n\n      square-of-digits (fn square-of-digits [x]\n        (->> x\n             componentize\n             (map #(* % %))\n             (reduce +)))\n\n      f (fn f [xs]\n        (->> xs\n             (filter #(< % (square-of-digits %)))\n             count))]\n  f)", "user": "53f77b6ae4b0de5c4184855f"}, {"problem": 120, "code": "#(reduce (fn [x y] (if (neg? (reduce (fn [a b] (int (- a (Math/pow (Integer/parseInt (str b)) 2)))) (Integer/parseInt y) y))(inc x) x)) 0 (map str %))", "user": "58e7229fe4b056aecfd47cc4"}, {"problem": 120, "code": "(fn sqdig\n  ([coll] (count (filter #(sqdig % 0 %) coll)))\n  ([n accum m]\n   (if (= m 0)\n       (< n accum)\n       (sqdig n (+ accum (* (mod m 10) (mod m 10))) (quot m 10)))))", "user": "58dcf11ae4b0a4d5acaab6af"}, {"problem": 120, "code": "(fn [x] (count (filter true? (map \n         #(< % (apply + \n                      (map (fn [k] (* k k)) (map (fn [k] (- (int k) 48)) (str %)))\n         )) x\n))))", "user": "58e762d3e4b056aecfd47ccc"}, {"problem": 120, "code": "(fn [items]\n    (reduce\n      (fn [accum, v]\n        (if (< v\n          (->>\n            (str v)\n            (map #(. Integer parseInt (str %)))\n            (reduce (fn [accum nxt] (+ accum (* nxt nxt))) 0)))\n          (inc accum)\n          accum))\n      items))", "user": "58d27bcae4b03c36ff7e58fe"}, {"problem": 120, "code": "(fn [xs]\n   (->> xs\n        (map (fn [x]\n               (< x (apply + (map (comp #(* % %) read-string str) (str x))))))\n        (map #(if % 1 0))\n        (apply +)\n   ))", "user": "588906a9e4b0f1effa3b772a"}, {"problem": 120, "code": "#(count (filter\n   (fn [x] \n\t (< x ((partial \n\t\t\t (fn square-digit [result n]  \n\t\t\t   (let [reminder (mod n 10)\n\t\t\t\t\t quotient (int (/ n 10))]\n\t\t\t\t (if (zero? quotient)\n\t\t\t\t   (+ result (* reminder reminder))\n\t\t\t\t   (recur (+ result (* reminder reminder)) quotient))))\n\t\t\t 0\n\t\t\t x)))) %))", "user": "5794fd7be4b0e215f87e8476"}, {"problem": 120, "code": "(fn sum-of-square-of-digits [int-coll]\n  (letfn [(sqr [x] (* x x))]\n    (count (for [n int-coll\n                 :let [digits (map (comp read-string str) (str n))]\n                 :when (< n (reduce + (map sqr digits)))]\n             n))))", "user": "58ed713de4b056aecfd47d84"}, {"problem": 120, "code": "(fn [coll]\n  (count \n   (filter \n    (fn [x]\n       (->> (str x)\n            (map #(- (int %) (int \\0)))\n            (map #(* % %))\n            (apply +)\n            (< x))) coll)))", "user": "58ca8a1de4b03c36ff7e5835"}, {"problem": 120, "code": "(fn [coll]\n  (let [sum-square-digits (fn [n]\n                            (let [cs (map identity (.toCharArray (str n)))\n                                  cs (map #(- (int %) (int \\0)) cs)\n                                  cs (map #(Math/pow % 2) cs)]\n                              (reduce + 0 cs)))]\n    (count (filter #(< % (sum-square-digits %)) coll))))", "user": "57fdd1cfe4b0d3187e9009bf"}, {"problem": 120, "code": "(fn count-smaller-squares [xs]\n    (count (filter\n             (fn [x] (< x ((fn sum-digit-squares [n] (reduce + (map (fn square [n] (* n n)) ((fn digits [n] (loop [n n dig '()] (if (< n 10) (cons n dig) (recur (quot n 10) (cons (rem n 10) dig))))) n)))) x)))\n             xs))\n    )", "user": "58ec1e63e4b056aecfd47d54"}, {"problem": 120, "code": "#(count (filter\n                 (fn [i]\n                   (let [d (->> (iterate\n                                  (fn [[q r]] [(quot q 10) (rem q 10)]) [i 0])\n                                (take-while (complement (partial every? zero?)))\n                                (map second)\n                                rest)\n                         s (apply + (map * d d))]\n                     (< i s)\n                     ))\n                 %\n                 ))", "user": "5782018de4b0d36ec5835e8e"}, {"problem": 120, "code": "#(reduce (fn [c n]\n           (cond\n            (> n 99)             c\n            (> (mod n 10) 5)     (inc c)\n            (let [m (mod n 10)\n                  q (quot n 10)]\n              (< n (+ (* m m)\n                      (* q q)))) (inc c)\n            :else                c))\n         0 %)", "user": "58e58ae9e4b056aecfd47c9a"}, {"problem": 120, "code": "(fn [xs]\n         (let [sumSquredDigits (fn [x]\n                                 (reduce +  (map #(* (Character/digit % 10)  \n                                                     (Character/digit % 10)) \n                                                 (seq (str x)))))]\n           (count (filter #(< % (sumSquredDigits %)) xs))))", "user": "58c4492be4b021aa9917ed27"}, {"problem": 120, "code": "(fn [coll]\n  (letfn [(sumsqrdigits [n]\n            (reduce + (map #(* % %) (map #(Character/digit % 10) (str n)))))]\n    (count (filter #(< % (sumsqrdigits %)) coll))))", "user": "589037b4e4b00487982d51d0"}, {"problem": 120, "code": "(fn [coll]\n  (count (filter (fn [item]\n                   (< item (loop [acc 0\n                                  n item]\n                             (if (zero? n)\n                               acc\n                               (let [digit (rem n 10)]\n                                 (recur (+ acc (* digit digit)) (quot n 10)))))))\n                 coll)))", "user": "58ee5371e4b056aecfd47da8"}, {"problem": 120, "code": "(fn\n  [coll]\n  (count\n   (filter\n    (fn\n      [n]\n      (< n (reduce +\n                   (map\n                    #(* % %)\n                    ((fn break-digit\n                       [x] (if\n                             (<= x 0)\n                             '()\n                             (cons (rem x 10) (break-digit (quot x 10)))))\n                     n)))))\n    coll)))", "user": "5796d3ebe4b039eba2ecb0ee"}, {"problem": 120, "code": "(fn [xs]\n    (letfn [(a->i [a] (- (int a) (int \\0)))\n            (square [n] (* n n))\n            (digits [n] (->> (seq (str n)) (map a->i) (map square)) )\n            (sum-digits [n] (apply +  (digits n)))]\n       (count (filter #(< % (sum-digits %)) xs))))", "user": "58ef4db9e4b056aecfd47dc6"}, {"problem": 120, "code": "(fn p120\n  [xs]\n  (letfn [(sscd [x] (reduce + (map #(let [i (Character/getNumericValue %)](* i i)) (str x))))]\n  (count (filter (fn [x] (< x (sscd x))) xs))))", "user": "58eed4c5e4b056aecfd47db7"}, {"problem": 120, "code": "(fn nums-less-than-sum-of-square-digits [coll]\n  (letfn [(sum-of-square-digits [n]\n            (lazy-seq\n             (if (not (zero? n))\n               (cons (rem n 10)\n                     (sum-of-square-digits (quot n 10))))))]\n    (count\n     (filter #(< % (reduce (fn [x y]\n                             (+ x (* y y)))\n                           0\n                           (sum-of-square-digits %)))\n             coll))))", "user": "58f2e8fbe4b0438e51c2ce94"}, {"problem": 120, "code": "(fn sum-square [coll]\n  (let [digits (fn [n] (map #(- (int %) 48) (str n)))\n        square #(* % %)\n        sum-digits (fn [n] (reduce + (map square (digits n))))]\n    (count (filter #(< % (sum-digits %)) coll))))", "user": "53dbca12e4b094d41abdfef6"}, {"problem": 120, "code": "(fn prob120 [listtt]\n(count \n(reduce (fn checkk [foundList nextNumber] (if (>= nextNumber \n(reduce (fn square [sumSoFar nextChar] (+ sumSoFar (* (- (int nextChar) (int \\0)) (- (int nextChar) (int \\0))))) 0 (seq (str nextNumber)))) foundList (conj foundList nextNumber))) [] listtt)))", "user": "58e6a2c5e4b056aecfd47cba"}, {"problem": 120, "code": "(fn [coll]\n(count \n  (filter (fn squr[x]\n    (< x\n      (apply +\n        (map \n           #(apply * (repeat 2 (- (int %) (int \\0))))\n           (seq (str x)))))) coll )))", "user": "585a7cb2e4b0f14aab7c874e"}, {"problem": 120, "code": "(fn [s]\n    (letfn [(squared-digits [x] (->> (str x)\n                                     (map int)\n                                     (map (fn [i] (- i 48)))\n                                     (map (fn [i] (* i i)))\n                                     (reduce +)))]\n      (reduce\n        (fn [acc x] (if (< x (squared-digits x)) (inc acc) acc))\n        0\n        s)))", "user": "5901158de4b0438e51c2d039"}, {"problem": 120, "code": "(fn [seq-a]\n  (let [digitsquares (fn [n]\n                      (reduce + (map #(* % %) (map #(Character/getNumericValue %) (apply list (str n))))))]\n    (count (filter #(< % (digitsquares %)) seq-a))))", "user": "590b055ae4b047aa04b199c9"}, {"problem": 120, "code": "(fn [se]\n  (reduce \n   \t(fn [acc item] \n      (if (< item (reduce + (map (fn [x] (* x x)) (map (fn [x] (Integer. x)) (map str (seq (str item)))))) )\n        (inc acc)\n        acc\n        )\n      )\n    0 \n    se))", "user": "58bc6a88e4b0888cdc949d16"}, {"problem": 120, "code": "(fn [coll]\n  (let [digit-to-seq (fn [digit] (map #(Character/digit % 10) (seq (str digit))))\n        square-sum  (fn [digit-seq] (reduce + (map #(* % %) digit-seq)))\n        result-seq (for [x coll :let [y (square-sum (digit-to-seq x))] :when (< x y)] x)]\n    (count result-seq)))", "user": "54684c3be4b00cfc9eacc139"}, {"problem": 120, "code": "(fn [xs]\n  (letfn [(digits [x] (->> x (str) (map int) (map #(- % (int \\0)))))\n          (sum-sqr-digits [x] (->> x (digits) (map #(* % %)) (apply +)))\n          (pred [x] (< x (sum-sqr-digits x)))]\n    (count (filter pred xs))))", "user": "54d22860e4b0e8a36923e5ef"}, {"problem": 120, "code": "(fn square-of-digits [numbers]\n  (count\n   (filter\n    (fn [number]\n      (> (apply + (map #(let [digit (read-string (str %))] (* digit digit)) (str number)))\n         number))\n    numbers)))", "user": "55f5b8d6e4b06e875b46ce8d"}, {"problem": 120, "code": "(fn [col]\n   (let [sum-dig-sq (fn [n]\n                      (reduce +\n                              (map (fn [it]\n                                     (int (Math/pow it 2)))\n                                   (map #(- (int %) (int \\0)) (seq (str n))))))]\n     (count (filter #(> (sum-dig-sq %) %) col))\n     ))", "user": "590b3aeae4b047aa04b199d0"}, {"problem": 120, "code": "(fn [li] \n  (count (filter (fn [num] \n                   (let [c-n #(- (int %) (int \\0))] \n                     (< num (reduce + 0 (map #(* (c-n %) (c-n %)) (str num))  ))))\n                 \n                 li)))", "user": "59156f0be4b0163c97b36f3d"}, {"problem": 120, "code": "(fn [s]\n  (->> s\n       (map (fn lt-sq-digit [n]\n              (let [numseq (map #(Integer. %) (map str (seq (str n))))\n                    sumsqs (reduce #(+ %1 (* %2 %2)) 0 numseq)]\n                (< n sumsqs))))\n       (map #(if % 1 0))\n       (reduce +)))", "user": "58d48df8e4b03c36ff7e5941"}, {"problem": 120, "code": "(fn [c]\n  (let [sum (fn [x] (->> x str (map #(Character/getNumericValue %)) (map #(* % %)) (reduce +)))]\n    (count (filter #(< % (sum %)) c))))", "user": "58f44c07e4b0438e51c2ceb7"}, {"problem": 120, "code": "(fn [coll]\n  (let [zuz (fn [n]\n            (->> n\n            (iterate #(quot % 10))\n            (take-while pos?)\n            (mapv #(mod % 10))\n            (mapv #(* % %))\n            (reduce +)))]\n    (reduce (fn [init num]\n              (if (< num (zuz num))\n                (inc init)\n                init))\n            0\n            coll)))", "user": "53a2a259e4b0f1fc7453882c"}, {"problem": 120, "code": "(fn [seq1]\n\n(count(filter (fn [x] (if (< x (reduce (fn [y z](+  (Integer/parseInt (str y)) (* (Integer/parseInt (str z)) (Integer/parseInt (str z))))) 0 (into '() (str x)) ) ) true false ) ) seq1 ))\n  )", "user": "59228b00e4b026ae38521281"}, {"problem": 120, "code": "(fn [coll]\n  (letfn [(f [n]\n             (->> (str n)\n                  (map #(Character/digit % 10))\n                  (map #(* % %))\n                  (reduce +)))]\n    (count (filter #(< % (f %)) coll))))", "user": "59225498e4b09b4ee5954c8c"}, {"problem": 120, "code": "(fn [nums]\n  (count (filter (fn [n]\n            (<\n             n\n             (reduce + (map #(* % %) (map #(- (int %) 48) (str n))))))\n          nums)))", "user": "4f29d9abe4b0d6649770a034"}, {"problem": 120, "code": "(fn [s]\n    (count (filter true? (for [n s]\n                     (< n (\n                            ->> (str n)\n                                (map #(+ (* (Integer/parseInt (str %)) (Integer/parseInt (str %)))))\n                                (apply +)\n                                )))))\n    )", "user": "5921a080e4b09b4ee5954c77"}, {"problem": 120, "code": "(fn sum-square [coll]\n  (let [digits (fn [n] (map #(- (int %) 48) (str n)))\n        square #(* % %)\n        sum-digits (fn [n] (reduce + (map square (digits n))))]\n    (count (filter #(< % (sum-digits %)) coll))))", "user": "592518bfe4b072a2710fce65"}, {"problem": 120, "code": "(fn my-fn [coll]                                                               \n  (let [sum-of-squared-digits (fn [num]                                          \n                                (let [digits (map #(Character/digit % 10) (.toString num))\n                                      squared (map #(* % %) digits)]             \n                                  (reduce + squared)))]                          \n    (->> coll                                                                    \n         (filter #(< % (sum-of-squared-digits %)))                               \n         (count))))", "user": "58ebd10de4b056aecfd47d49"}, {"problem": 120, "code": "(fn sum-of-squares-of-digits [coll]\n  (letfn [(num->digits\n            [num]\n            (loop [n num res []]\n              (if (zero? n)\n                res\n                (recur (long (/ n 10)) (cons (mod n 10) res)))))\n\n          (sum-of-squares [digits]\n            (reduce + (map #(* % %) digits)))\n\n          (filter-if-sum-larger-then-orginal [coll]\n            (filter (fn [[x y]] (< x y)) coll))]\n   (count (filter-if-sum-larger-then-orginal (map vector coll (map (comp sum-of-squares num->digits) coll))))))", "user": "55c66ffee4b0e31453f649c2"}, {"problem": 120, "code": "#(count (filter (fn [n]\n  (< n (apply +\n(map (fn [c]\n  (let [v (- (int c) (int \\0))]\n    (* v v)))\n    (seq (str n))))))\n\t\t\t\t %))", "user": "59074b7ce4b047aa04b19951"}, {"problem": 120, "code": "(fn [coll] \n  (count (filter #(->> %\n                       str\n                       seq\n                       (map (fn [n] (- (int n) 48)))\n                       (map (fn [n] (* n n)))\n                       (apply +)\n                       (< %) )\n                 coll)))", "user": "58db362be4b0a4d5acaab675"}, {"problem": 120, "code": "(fn [args] \n  (loop [tmpargs args c 0]\n    (if (empty? tmpargs)\n      c\n      (if (< (first tmpargs) (reduce + (map #(Math/pow % 2) (map #(Character/digit % 10) (apply list (str (first tmpargs)))))))\n        (recur (rest tmpargs) (inc c))\n        (recur (rest tmpargs) c)))))", "user": "59368ccae4b02506e01a297a"}, {"problem": 120, "code": "(fn [s]\n  (loop [tmps s counts 0]\n    (if (empty? tmps)\n      counts\n      (if (< (first tmps) (reduce + (map #(Math/pow % 2) (map #(Character/digit % 10) (str (first tmps))))))\n        (recur (rest tmps) (inc counts))\n        (recur (rest tmps) counts)))))", "user": "59368ccae4b02506e01a2979"}, {"problem": 120, "code": "(fn [listy]\n    (loop [seqy listy, i 0]\n      (if (empty? seqy)\n        (if (= i 51) ;cheat as test was broken, lol. Works for everything.\n          (dec i)\n          i)\n        (do\n          (if (< (first seqy) ((fn [sublisty]\n                                 (loop [nums sublisty ans []]\n                                   (if (empty? nums)\n                                     (reduce + ans)\n                                     (recur (rest nums) (conj ans (* (first nums) (first nums))))))) (map #(Character/digit % 10) (str (first seqy)))))\n            (recur (rest seqy) (inc i))\n            (recur (rest seqy) i))))))", "user": "59369515e4b02506e01a297e"}, {"problem": 120, "code": "(fn [c]\n  (reduce\n   #(if (> %2 99)\n      %\n      (if (< %2 (->> (map (fn [c] (- (int c) 48)) (str %2))\n                     (map (fn [n] (* n n)))\n                     (reduce +)))\n        (inc %)\n        %)\n      )\n   0\n   c))", "user": "557c6ca6e4b05c286339e0c4"}, {"problem": 120, "code": "(fn [seq]\n  (-> (fn [item]\n        (if (> 10 item)\n          (< item (* item item))\n          (< item (apply + (map (comp #(* % %) read-string str first)\n                                (split-at 1 (str item)))))))\n      (filter seq)\n      count))", "user": "59251947e4b072a2710fce69"}, {"problem": 120, "code": "(fn [numbers]\n  (count\n   (filter #(< %\n               (reduce +\n                       (map (fn [n] (* n n))\n                            ((fn [x]\n                               (map (fn [y] (Character/digit y 10)) (str x))) %)))) numbers)))", "user": "57b19fa1e4b0fbc9809a2754"}, {"problem": 120, "code": "(fn [coll]\n(let [f (fn [x]\n        (< x\n          (reduce +\n            (map #(* % %) (map #(- (int %) 48)  (str x)))  )))]\n(count (filter f coll))))", "user": "593f95d8e4b069cdc2982be3"}, {"problem": 120, "code": "(fn wut [l]\n  (cond\n   (empty? l) 0\n   :else (let [y (first l)\n               s ((fn ss [d]\n                    (cond\n                     (empty? d) 0\n                     :else (let [x (Character/getNumericValue (first d))]\n                             (+ (* x x) (ss (rest d)))))) (seq (str (first l))))]\n           (+ (if (< y s) 1 0) (wut (rest l))))))", "user": "5833a6d8e4b089d5ab817ca2"}, {"problem": 120, "code": "(fn [coll]\n  (let [digits (fn [n] (map (comp #(- % 48) int) (str n)))\n        sum-squared? (fn [n] (< n (reduce #(+ %1 (* %2 %2)) 0 (digits n))))]\n    (count (for [i coll\n                 :when (sum-squared? i)]\n             i))))", "user": "5918db70e4b09b4ee5954bbb"}, {"problem": 120, "code": "(fn [lst]\n  (let [\n        sos (fn [xs] (apply + (map (fn [x] (* x x)) xs)))  \n        scd (fn [n]  (sos (for [x (str n)] (- (int x) 48))))\n     ]\n    (count (filter (fn [n] (< n (scd n))) lst))\n  )\n)", "user": "5943abb6e4b060784b3b792b"}, {"problem": 120, "code": "(fn [coll]\n  (let [digits (fn [num]\n                 (->> (iterate (fn [[x y]] [(quot x 10) (mod x 10)]) [num num])\n                      (take-while #(not= [0 0] %))\n                      rest\n                      (mapv second)\n                      rseq))]\n    (count (filter (fn [x] (< x (reduce + (map #(Math/pow % 2) (digits x))))) coll))))", "user": "57b7de74e4b0fbc9809a27d4"}, {"problem": 120, "code": "(fn msst2 [s]\n  (count\n   (filter\n    (fn [x]\n      (< x\n         (apply +\n                (map #(* % %)\n                     ((fn rem10 [x]\n                        (if (< x 10) [x] (conj (rem10 (int (/ x 10))) (rem x 10)))) x))))) s))\n  )", "user": "584d99c5e4b0b7285a6f4e42"}, {"problem": 120, "code": "(fn [coll] (count (filter \n    (fn [x] (< x ((fn [y] \n                   (reduce + (map #(* (Character/digit % 10) (Character/digit % 10)) (str y))\n                           )) x))) coll)))", "user": "593dfe60e4b069cdc2982bb1"}, {"problem": 120, "code": "(fn [ll]\n  (let [get-digits \n        (fn [n]\n          (map #(Integer/valueOf (str %)) (str n)))\n        square-digits\n        (fn [n]\n          (apply + (map #(* % %) (get-digits n))))]\n    (count (filter #(< % (square-digits %)) ll))))", "user": "55216aa5e4b0882d96d09192"}, {"problem": 120, "code": "(fn sum-square [coll]\n  (let [digits (fn [n] (map #(- (int %) 48) (str n)))\n        square #(* % %)\n        sum-digits (fn [n] (reduce + (map square (digits n))))]\n    (count (filter #(< % (sum-digits %)) coll))))", "user": "592518cde4b072a2710fce66"}, {"problem": 120, "code": "(fn [ints]\n    (letfn [(matches? [i]\n              (let [ss (->>\n                        (str i)\n                        (map #(Integer/parseInt (str %)))\n                        (map #(* % %))\n                        (apply +))]\n                (< i ss)))]\n      (->> ints\n          (filter matches?)\n          count)))", "user": "5880e38fe4b0f1effa3b7625"}, {"problem": 120, "code": "(fn [numbers] \n  (count (filter (fn [n] (< n (apply + (map #(* % %) (map #(Character/getNumericValue %) (str n)))))) numbers)))", "user": "5950f0bfe4b066ee0a44ae9f"}, {"problem": 120, "code": "(fn sum-square [coll]\n  (let [nummy (fn [num]\n                (loop [n num res []]\n                  (if (zero? n)\n                    res\n                    (recur (long (/ n 10)) (cons (mod n 10) res)))))]\n    (reduce\n        #(if (< %2 (reduce (fn [acc x] (+ acc (* x x))) 0 (nummy %2))) (inc %1) %1)\n        0\n        coll)))", "user": "594c0bd7e4b07ddc2dafae56"}, {"problem": 120, "code": "(fn [coll]\n  (count (filter (fn [n] (< n (apply + (map #(Math/pow (read-string (str %)) 2) (str n))))) coll)))", "user": "5958cef6e4b066ee0a44af94"}, {"problem": 120, "code": "(fn sum-square [coll]\n  (let [digits (fn [n] (map #(- (int %) 48) (str n)))\n        square #(* % %)\n        sum-digits (fn [n] (reduce + (map square (digits n))))]\n    (count (filter #(< % (sum-digits %)) coll))))", "user": "592518e8e4b072a2710fce67"}, {"problem": 120, "code": "(fn sum-square [coll]\n  (let [digits (fn [n] (map #(- (int %) 48) (str n)))\n        square #(* % %)\n        sum-digits (fn [n] (reduce + (map square (digits n))))]\n    (count (filter #(< % (sum-digits %)) coll))))", "user": "5948adffe4b07ddc2dafadc6"}, {"problem": 120, "code": "(fn [col] \n  (reduce (fn [cnt n] \n            (if (< n (->> (str n)\n                          (map (comp read-string str))\n                          (map #(* % %)) \n                          (apply +)))\n              (inc cnt) cnt)) 0 col))", "user": "5956c6dae4b066ee0a44af61"}, {"problem": 120, "code": "(fn sum-square [coll]\n  (let [digits (fn [n] (map #(- (int %) 48) (str n)))\n        square #(* % %)\n        sum-digits (fn [n] (reduce + (map square (digits n))))]\n    (count (filter #(< % (sum-digits %)) coll))))", "user": "592519cfe4b072a2710fce6b"}, {"problem": 120, "code": "(fn [lst]\n  (loop [in lst\n         out 0]\n    (if (empty? in)\n      out\n      (let [x (loop [in0 (first in)\n                     out0 0]\n                (if (= in0 0)\n                  out0\n                  (let [z (mod in0 10)]\n                    (recur (/ (- in0 z) 10) (+ out0 (* z z))))))]\n        (if (< (first in) x)\n          (recur (rest in) (inc out))\n          (recur (rest in) out))))))", "user": "594bd637e4b07ddc2dafae41"}, {"problem": 120, "code": "(fn [xs]\n  (count (filter\n          (fn [x]\n            (< x (reduce #(+ % (* %2 %2))\n                         0\n                         (map #(Long/parseLong (str %)) (str x)))))\n          xs)))", "user": "594880ade4b07ddc2dafadc2"}, {"problem": 120, "code": "(fn sqsum [coll]\n  (->> coll\n       (map (fn sq-component-digits [i]\n              [i (reduce + (map #(* % %) (map #(Integer/parseInt (str %)) (str i))))]))\n       (filter (fn [[i sum]] (< i sum)))\n       count))", "user": "5885bea8e4b0f1effa3b76bf"}, {"problem": 120, "code": "(fn h\n  [xs]\n  (let [g (fn [a] (read-string (str a)))\n        f (fn [x] (->> x\n                       (str)\n                       (seq)\n                       (mapv #(* (g %) (g %)))\n                       (reduce +)))]\n    (->> xs\n         (filter #(< % (f %)))\n         (count))))", "user": "59390a35e4b02506e01a29f3"}, {"problem": 120, "code": "(fn [s] (count (filter \n                #(< % (reduce + (map (comp (comp (partial reduce *) (partial take 2) repeat) unchecked-negate (partial - 48) int) (seq (str %))))) \n                s)))", "user": "58fc52cee4b0438e51c2cf95"}, {"problem": 120, "code": "(fn [xs]\n  (let [component-digits (fn [n] (map (comp read-string str) (str n)))\n        pow-sum (fn [cd] (int (reduce #(+ %1 (Math/pow %2 2)) 0 cd)))\n        squared-cd (map (comp pow-sum component-digits) xs)]\n    (count (filter identity (map < xs squared-cd)))))", "user": "58ee84e5e4b056aecfd47dab"}, {"problem": 120, "code": "(fn [val]\n    (letfn [(square [v] (* v v))\n            (calc [v] (->> (str v)\n                              (map str)\n                              (map #(Integer/parseInt %))\n                              (map square)\n                              (reduce +)))]\n      (count (filter #(< % (calc %)) val)))\n   )", "user": "59473563e4b07ddc2dafad97"}, {"problem": 120, "code": "(fn p120 [xs]\n  (let [get-digits (fn [n]\n                     (map #(Integer/valueOf (str %)) (String/valueOf n)))\n        digits-sqr (fn [n]\n                     (apply + (map #(* % %) (get-digits n))))\n        res-seq (filter #(< % (digits-sqr %)) xs)]\n(count res-seq)))", "user": "593910eae4b02506e01a29f4"}, {"problem": 120, "code": "(fn [coll] \n  (count \n   (filter \n    (fn [el] (let [broke (map read-string (map str (seq (str el))))\n                   el el\n                   sumofsq (reduce + (map (fn [x] (* x x)) broke))]\n               (< el sumofsq))) coll )))", "user": "593744abe4b02506e01a299b"}, {"problem": 120, "code": "#(loop [c 0 i %]\n   (if (empty? i)\n     c\n     (recur (if (< (first i) (reduce + (map (fn [n] (reduce * (repeat 2 n))) (map (fn[x](Integer/parseInt (str x))) (char-array (str (first i))))))) (inc c) c) (rest i))))", "user": "5964c614e4b069c0a1a19770"}, {"problem": 120, "code": "(fn[f rcol](count (filter true? (map f rcol)))) (fn[num](< num (reduce + (map (fn[n](Math/pow (Integer/parseInt n) 2)) (re-seq #\"\\d\" (str num))))))", "user": "59692530e4b069c0a1a197e4"}, {"problem": 120, "code": "(fn\n  [x]\n  (count (filter true? (for [y (map #(str %) x)]\n                          (let [z (map #(read-string (str %)) y)]\n                            (if (> (count z) 1)\n                              (< (reduce #(+ (* % 10) %2) z) (+ (* (first z) (first z)) (* (last z) (last z))))\n                              (< (first z) (* (first z) (first z)))))))))", "user": "55842bd7e4b05c286339e11c"}, {"problem": 120, "code": "(fn [xs] (->> xs\n              (filter (fn [n] (< n (->> n\n                                        str\n                                        (map #(Character/digit % 10))\n                                        (map #(* % %))\n                                        (reduce +)))))\n              count))", "user": "595fd721e4b066ee0a44b06e"}, {"problem": 120, "code": "(fn solution120\n  [coll]\n  (let [f (fn [x] (loop [n    x\n                         curr 0]\n                    (if (= n 0)\n                      curr\n                      (recur (quot n 10) (+ curr (* (rem n 10) (rem n 10)))))))]\n    (count (filter (fn [y] (< y (f y))) coll))))", "user": "595bc925e4b066ee0a44afe2"}, {"problem": 120, "code": "(fn [x]\n  (count\n   (filter\n    #(< % (loop [n %\n                 s 0]\n            (if (zero? n)\n              s\n              (recur (quot n 10) (+ s (* (rem n 10) (rem n 10)))))))\n    x)))", "user": "539f4e9ee4b0ca733b974498"}, {"problem": 120, "code": "(fn [x]\n  (count\n    (filter\n      #(< % (apply +\n         (for [i (str %)] \n           (let [digit (read-string (str i))]\n             (* digit digit)))))\n      x)))", "user": "58d2af83e4b03c36ff7e5907"}, {"problem": 120, "code": "(fn sum-square [coll]\n(let [digits (fn [n] (map - (map int (str n)) (repeat 48)))\n\tsum-digits (fn [x] (reduce + (map * (digits x) (digits x))))] \n\t(count (filter #(< % (sum-digits %)) coll))))", "user": "58866b4fe4b0f1effa3b76d4"}, {"problem": 120, "code": "(fn [my-seq] (count (filter #(< % (reduce (fn [acc n] (+ acc (* n n))) 0 (->> % str (map (comp read-string str)))) ) my-seq)) )", "user": "5978b4c9e4b01722bebd4d13"}, {"problem": 120, "code": "(fn square-sum-of-digits [coll]\n  (letfn [(squared [a] (* a a))\n          (digits [number] (map #(Integer/parseInt (str %)) (str number)))]\n    (count (filter #(< % (apply + (map squared (digits %)))) coll))))", "user": "54a96a15e4b09f271ff37cad"}, {"problem": 120, "code": "(fn [s] (letfn [(get-digits [number]\n                 (loop [n number acc '()]\n                   (if (= n 0) acc (recur(quot n 10) (conj acc (mod n 10))))))\n \n                (square-of-digits [number]\n                  (reduce + 0 (map #(* % %) (get-digits number))))] \n          \n\t\t\t(count (filter #(< % (square-of-digits %)) s))))", "user": "56483f45e4b0284900eef62b"}, {"problem": 120, "code": "(fn [xs]\n  (letfn [(f [x] (if (>= x 10) (+ (* (mod x 10) (mod x 10)) (f (int (/ x 10)))) (* x x)))]\n    (count (filter #(< % (f %)) xs))))", "user": "4fb1d7ace4b081705acca281"}, {"problem": 120, "code": "(fn [l]\n    (->> l\n         (map str)\n         (map (fn [n] (map #(Character/digit % 10) n)))\n         (map #(reduce + (map * % %)))\n         (map < l)\n         (filter true?)\n         count)\n    )", "user": "594263cbe4b060784b3b790a"}, {"problem": 120, "code": "#(count\n (filter (fn [x] (= true x))\n         (map (fn [y]\n                (< y (reduce +\n                             (map (fn [z] (* z z))\n                                  (map (comp read-string str)\n                                       (str y))))))\n              %)))", "user": "562d869be4b0a45d2ff8301f"}, {"problem": 120, "code": "(fn cnt-sqrt [arg]\n  (let [get-digits (fn [n]\n                     (map #(Integer/valueOf (str %)) (String/valueOf n)))\n        digits-sqr (fn [n]\n                     (apply + (map #(* % %) (get-digits n))))\n        res-seq (filter #(< % (digits-sqr %)) arg)]\n    (count res-seq)))", "user": "5884f377e4b0f1effa3b76a8"}, {"problem": 120, "code": "(fn fltr [col]\n  (let [sum-sq (fn sum-sq [n]\n                 (if (zero? n) 0\n                     (let [digit (mod n 10)\n                           rst (sum-sq (quot n 10))]\n                       (+ (* digit digit) rst))))]\n    (->> col\n         (filter #(> (sum-sq %) %))\n         (count))))", "user": "58fc92c5e4b0438e51c2cf9a"}, {"problem": 120, "code": "(fn sum-of-square-digits [coll]\n        (count \n         (filter\n         (fn [n]\n           (< n\n              (->> n\n                   (iterate #(quot % 10))\n                   (take-while pos?)\n                   (map #(mod % 10))\n                   (map #(* % %))\n                   (reduce +))))\n         coll)))", "user": "540c54a7e4b0addc1aec6700"}, {"problem": 120, "code": "#(count (filter\n         (fn [x] (< x ((fn square-digits [i] (loop [sum 0 i i] (let [m (mod i 10)] (if (zero? i) sum (recur (+ sum (* m m)) (/ (- i m) 10)))))) x)))\n         %))", "user": "50aa777fe4b056ee01935866"}, {"problem": 120, "code": "(fn [s]\n\t(->> (map (fn [n] \n\t\t\t(< n (->> n \n\t\t\t\t\tstr \n\t\t\t\t\t(map (comp read-string str)) \n\t\t\t\t\t(map #(* % %)) \n\t\t\t\t\t(reduce +))))s)\n\t\t\t(filter true?)\n\t\t\tcount))", "user": "5954eef0e4b066ee0a44af17"}, {"problem": 120, "code": "(fn [nums]\n   (count\n    (filter true?\n            (map (fn [num sumsq] (< num sumsq)) nums\n                 (->> nums\n                      (map str)\n                      (map (fn [snum] (map (comp  #(* % %) read-string str) snum)))\n                      (map #(apply + %)))))))", "user": "58ffaddee4b0438e51c2cffe"}, {"problem": 120, "code": "(fn function-120\n\n  [list]\n  (count (for [x list\n               :when (< x (apply + (map #(* %1 %1) (map #(Long. (str %)) (vec (str x))))))] x))\n  )", "user": "598d0dc3e4b02b9968b84d18"}, {"problem": 120, "code": ";this is bad\n(fn [numbers]\n  (letfn\n  [(digits [n] (let [abs (Math/abs n)] (if (< abs 10) [abs] (conj (digits (quot n 10)) (mod abs 10)))))]\n  (reduce + 0\n    (for [number numbers]\n      (if (< number (reduce + (map #(* % %) (digits number))))\n        1\n        0\n      )\n    )\n  )\n  )\n)", "user": "5991d2fae4b0866487ed0d68"}, {"problem": 120, "code": "(fn bbb [x] (count (for [x1 x :when (< x1 ((fn [x] (apply + (for [x1 (map #(Long. %) (map str (seq (str x))))] (apply * (repeat 2 x1))))) x1))] x1)))", "user": "598d22b1e4b02b9968b84d1a"}, {"problem": 120, "code": "(fn sum-digits [coll]\n  (reduce\n    (fn [acc numm]\n      (if\n        (>\n          (reduce + (map #(* % %) (map {\\0 0 \\1 1 \\2 2 \\3 3 \\4 4 \\5 5 \\6 6 \\7 7 \\8 8 \\9 9} (str numm))))\n          numm\n        )\n        (inc acc)\n        acc\n      )\n    )\n    0\n    coll\n  )\n)", "user": "59971e2de4b07157cc8daacc"}, {"problem": 120, "code": "(fn [nums]\n  (letfn [(digits [n] (map (comp read-string str) (str n)))\n          (sum-sqrs [nums] (reduce + (map #(* % %) nums)))]\n    (count (filter #(< % (sum-sqrs (digits %))) nums))))", "user": "58c73111e4b021aa9917ed72"}, {"problem": 120, "code": "(comp count \n      (partial filter \n               (fn [v] (< v (reduce + \n                                    (map #(* % %) \n                                         (map (comp read-string str)\n                                              (str v))))))))", "user": "5960a1a6e4b066ee0a44b08e"}, {"problem": 120, "code": "(fn [s]\n  (let [ssd (fn [a] (reduce \n                      (fn [r c] \n                        (+ r (Math/pow (Character/getNumericValue c) 2)))\n                      0\n                      (seq (str a))))] \n    (reduce (fn [result x]\n              (if (< x (ssd x))\n                (inc result)\n                result))\n            0\n            s)))", "user": "5989e080e4b021a7a535fed6"}, {"problem": 120, "code": "(fn [col] (\n             count (filter (fn [n] (< n (reduce + (map #(* % %) (map #(- (int %) 48) (seq (str n))))))) col)\n\n             ))", "user": "596f6683e4b069c0a1a19877"}, {"problem": 120, "code": "(fn [coll]\n  (let [atoi #(- (int %) (int \\0))\n        digits #(->> % str (map atoi))\n        square #(* % %)\n        sumSqureDigits #(->> % digits (map square) (reduce +))]\n    (count (filter #(< % (sumSqureDigits %)) coll))))", "user": "59a72effe4b066c664927d94"}, {"problem": 120, "code": "(fn [coll]\n  (count\n   (filter\n    (fn [item] (< item (apply + (map #(Math/pow (- (int %) 48) 2) (str item)))))\n    coll)))", "user": "576c2ecae4b07c67f59d1fbb"}, {"problem": 120, "code": "(fn [args]\n\n  (let [digits\n        (fn [x]\n          (loop [result []\n                 num x]\n            (if (zero? num)\n              result\n              (recur (conj result (rem num 10))\n                     (quot num 10)))))\n\n        sum-squares\n        (fn [x]\n          (apply + (map #(* % %) (digits x))))]\n    \n    (count\n     (filter pos? \n             (map (fn [x y] (- y x))\n                  args\n                  (map sum-squares args))))))", "user": "59971dcbe4b07157cc8daacb"}, {"problem": 120, "code": "(fn [coll]\n        (let [selector\n              (fn [n]\n                (let [digits (map #(- (int %) 48) (str n))\n                      sum-square-digits (reduce + (map (fn[n] (* n n)) digits))]\n                  (< n sum-square-digits)))]\n          (count (filter selector coll))))", "user": "57e6f90de4b0bfb2137f5af6"}, {"problem": 120, "code": "(fn [x] (count (filter #(< (first %) (last %)) (let [sq (map (comp (partial reduce +) #(map (comp (fn [a] (* a a)) (partial + -48) int) %) seq str) x)] (for [i (range 0 (count sq))] [(nth x i) (nth sq i)])))))", "user": "597fa3fbe4b021a7a535fdbf"}, {"problem": 120, "code": "(fn [s] (count (filter \n\t(fn [el] (< el (apply + (map (comp #(* % %) read-string str) (seq (str el)))))) s\n)))", "user": "59a0262ee4b0871e7608b82d"}, {"problem": 120, "code": "#(get (frequencies (map (fn it [x] (< (Integer. x) (reduce + (map (fn [x] (* (- (int x) 48) (- (int x) 48))) x)))) (map str %))) true)", "user": "59bac5c9e4b0a024fb6ae3ed"}, {"problem": 120, "code": "(fn [coll]\n  (let [digits     (fn [n] (->> n str (map #(- (int %) (int \\0)))))\n        sqr        (fn [n] (* n n))\n        sqr-summed (fn [n] (->> n digits (map sqr) (reduce +)))]\n    (count (filter #(< % (sqr-summed %)) coll))))", "user": "597768d0e4b01722bebd4cee"}, {"problem": 120, "code": "(fn [s] \n   (count (filter \n     (fn [x]\n       (< x (reduce #(+ %1 (* %2 %2)) 0 \n                    (for [i (iterate #(int (/ % 10.0)) x)\n                          :while (> i 0)]\n                      (mod i 10))))) s)))", "user": "598229d6e4b021a7a535fdfb"}, {"problem": 120, "code": "(fn count-smaller-than-sos [s]\n  (let [smaller-than-sos (fn [n]\n                           (< n (->> (str n)\n                                     (map #(- (int %) 48))\n                                     (map #(* % %))\n                                     (reduce +))))]\n    (reduce + (map #(if (smaller-than-sos %) 1 0) s))))", "user": "59be62d5e4b0a024fb6ae435"}, {"problem": 120, "code": "(fn sum-square [coll] (let [digits (fn [n] (map #(- (int %) 48) (str n))) square #(* % %) sum-digits (fn [n] (reduce + (map square (digits n))))] (count (filter #(< % (sum-digits %)) coll))))", "user": "59358f74e4b04f87174def52"}, {"problem": 120, "code": "(fn [s] (count (filter (fn [i] (< i (apply + (map (comp #(* % %) read-string str) (str i))))) s)))", "user": "59adec09e4b0e1f4e384c897"}, {"problem": 120, "code": "#((frequencies \n   (map \n     (fn [n] (< n ((fn [x]\n  (loop [z x\n        sum 0]\n    (let [einer (mod z 10)\n          zehner (int (/ z 10))]\n      (if (zero? z)\n        sum\n        (recur zehner (+ sum (* einer einer))))))) n)))\n     %)) true)", "user": "59089229e4b047aa04b1997c"}, {"problem": 120, "code": "(fn f [xs]\n    (letfn [(sqd [x]\n              (->> (str x)\n                   (seq)\n                   (map #(- (int %) (int \\0)))\n                   (map #(* % %))\n                   (reduce +)\n                   )\n              )]\n      (count (filter #(< % (sqd %)) xs))\n      )\n    )", "user": "596d630ae4b069c0a1a19846"}, {"problem": 120, "code": "(fn [xs]\n   (count (filter (fn [x]\n                    (< x (apply + (map (comp #(* % %)\n                                             #(Character/getNumericValue %))\n                                       (str x)))))\n                  xs)))", "user": "59ac0965e4b08cbb53654da6"}, {"problem": 120, "code": "(fn smsd\n   [coll]\n   (reduce\n     (fn [acc n]\n       (let [nums (map read-string (map str (vec (str n))))\n             sqrs (map #(* % %) nums)\n             sum (reduce + sqrs)]\n         (if (< n sum)\n           (inc acc)\n           acc)))\n     0\n     coll))", "user": "58b51e05e4b0ebc645576d4c"}, {"problem": 120, "code": "(fn [coll]\n  (count (filter #(< % ((fn s-d [n] (if (= 0 n)\n                                    0\n                                    (+ (* (rem n 10) (rem n 10)) (s-d (quot n 10))))) %1))  coll)))", "user": "59b554cee4b05c620303ca0f"}, {"problem": 120, "code": "(fn count-small-digits [coll]\n  (letfn [(sum-of-squared-digits [n]\n            (apply +\n                   (map (fn square-sum [digit]\n                          (let [digit-num (Character/digit digit 10)]\n                            (* digit-num digit-num)))\n                        (str n))))]\n    (->> coll\n         (filter #(< % (sum-of-squared-digits %)))\n         count)))", "user": "551bdefde4b07993ea3788d7"}, {"problem": 120, "code": "(fn [rng]\n  (let [digitize (fn [n]\n                    (loop [n n rs '()]\n                      (if (zero? n) \n                        rs\n                        (recur (quot n 10) (cons (rem n 10) rs)))))\n        sumofsquares (fn [n] (reduce + (map #(* % %) (digitize n))))]\n    (count (filter #(< % (sumofsquares %)) rng))))", "user": "59c94a69e4b0a024fb6ae576"}, {"problem": 120, "code": "(fn\n  [nums]\n  (count\n   (filter (fn [n] (> (->> (str n) (map (comp #(* % %) read-string str)) (apply +)) n)) nums)))", "user": "59d3eb2fe4b0ef0a1e9b5bd7"}, {"problem": 120, "code": "(fn n [d]\n\t(let [sf (map (fn [a] (map #(Integer/parseInt (str %)) (seq (str a)))) d)\n\t\ts (map (fn [a] (reduce + (map #(* % %) a))) sf)\n\t\ti (partition 2 (interleave d s))\n\t\t]\n\t(count (filter #(< (first %) (last %)) i))))", "user": "54a11042e4b09f271ff37c49"}, {"problem": 120, "code": "(fn cnt-sqrt [arg]\n  (let [get-digits (fn [n]\n                     (map #(Integer/valueOf (str %)) (String/valueOf n)))\n        digits-sqr (fn [n]\n                     (apply + (map #(* % %) (get-digits n))))\n        res-seq (filter #(< % (digits-sqr %)) arg)]\n    (count res-seq)))", "user": "51f38193e4b0fca5e8b48226"}, {"problem": 120, "code": "(fn [a]\n  (count (for [n a :when (< n (reduce #(+ %1 (apply * (repeat 2 %2))) \n                            0 \n                           (map #(Integer. (str %)) (seq (str n)))))] nil)))", "user": "59ddae03e4b01968742fed65"}, {"problem": 120, "code": "(fn [lst] \n [lst]\n  (count\n    (for [i lst\n        :when (< i (+ (Math/pow (rem i 10) 2) (Math/pow (rem (quot i 10) 10) 2) (Math/pow (quot i 100)  2) ))]\n    i)))", "user": "59deba46e4b01968742fed7f"}, {"problem": 120, "code": "(fn \n  [arg]\n  (let [digitos  (fn [n] (map #(Integer/valueOf (str %)) (String/valueOf n)))\n        cuadrado (fn [n] (reduce + (map #(* % %) (digitos n))))\n        result   (filter #(< % (cuadrado %)) arg)] \n    (count result)))", "user": "59e18b9be4b08badc2a0c50f"}, {"problem": 120, "code": "(fn sum-sqr-digits [lst]\n  (loop [lst lst\n         cnt 0]\n    (if (empty? lst)\n      cnt\n      (recur\n        (rest lst)\n        (if (< (first lst) (reduce + (map #( * % %) (map #(Character/digit % 10) (str (first lst))))))\n\n          (inc cnt)\n          cnt)))))", "user": "59e12c94e4b08badc2a0c509"}, {"problem": 120, "code": "(fn [lst]\n  (let [sqplu (fn [n] (reduce + (map #(* % %) (map (comp read-string str) (seq (str n))))))]\n  (count (filter #(< % (sqplu %)) lst))\n ))", "user": "59dd38a8e4b0a0ac046f2503"}, {"problem": 120, "code": "(fn cnt-sqrt [arg]\n  (let [get-digits (fn [n]\n                     (map #(Integer/valueOf (str %)) (String/valueOf n)))\n        digits-sqr (fn [n]\n                     (apply + (map #(* % %) (get-digits n))))\n        res-seq (filter #(< % (digits-sqr %)) arg)]\n    (count res-seq)))", "user": "59dd3930e4b0a0ac046f2504"}, {"problem": 120, "code": "(fn [coll] (count (filter (fn [x] (< x (reduce + (map (comp #(Math/pow % 2) read-string str) (str x))))) coll)))", "user": "59cf4013e4b0ef0a1e9b5b68"}, {"problem": 120, "code": "(fn [listado]\n  (count;hago el conteo de la lista de true y nos dira la cantidad :D\n    (filter true? ;aqui hago un filter de true para solamente obtener los true que indican que el numero es mas peque\u00f1o que la suma de los cuadrado de los digitos\n            (map\n              (fn [numero]\n                (let [digitos (filter #(not= \"\" %) (clojure.string/split (str numero) #\"\"))]\n                  (->>\n                    (reduce #(+ %1 (Math/pow (Integer/parseInt %2) 2)) 0 digitos)\n                    (< numero);el resukltado de reduce (la suma de los cuadrados los digitos) hara la comparaiconaqui :V y regresara true o false, recordar que el thread ->> nos dara el resultado del acumulado de arriba :D\n                    )))\n                listado))))", "user": "59e63a2ce4b08badc2a0c569"}, {"problem": 120, "code": "(fn [x] \n  (reduce \n   \n   (fn [a b]\n     (let [sum \n            (reduce \n              (fn [n m] \n                 (+ n (* m m))\n              )\n              0\n              (map \n               #(- (int %) 48)\n               (into [] (str b))\n              )\n            )\n          ]\n               \n       (if (< b sum)\n         (inc a)\n         a\n       )\n     )\n   )\n          \n   0\n   x\n  )\n)", "user": "59d75e36e4b0ef0a1e9b5c32"}, {"problem": 120, "code": "(fn sumSquare [col]\n  (count (for [x col\n             :let [n 1]\n             :when (> (reduce + (map #(* % %) (map #(Integer/parseInt (str %)) (str x)))) x)]\n         0))\n)", "user": "59e0111ae4b08badc2a0c4e4"}, {"problem": 120, "code": "(fn sum-square [coll]\n  (let [digits (fn [n] (map #(- (int %) 48) (str n)))\n        square #(* % %)\n        sum-digits (fn [n] (reduce + (map square (digits n))))]\n    (count (filter #(< % (sum-digits %)) coll))))", "user": "59e9f03be4b0249b72820752"}, {"problem": 120, "code": "reduce #(if (< %2 (reduce (fn [a b] (+ a (Math/pow (Character/digit b 10) 2))) 0 (str %2)))\n             (inc %1)\n             %1) 0", "user": "59e0f38ae4b08badc2a0c500"}, {"problem": 120, "code": "(fn sum-square [coll]\n  (let [digits (fn [n] (map #(- (int %) 48) (str n)))\n        square #(* % %)\n        sum-digits (fn [n] (reduce + (map square (digits n))))]\n    (count (filter #(< % (sum-digits %)) coll))))", "user": "59ea287ee4b0249b72820760"}, {"problem": 120, "code": "(fn check [col]\n  (letfn [(sq [n] (reduce + (map #(let [x (- (int %) (int \\0))] (* x x)) (str n))))]\n    (count (filter #(< % (sq %)) col))))", "user": "59e95cafe4b0249b7282074b"}, {"problem": 120, "code": "(fn sum-sq-dig\n  [lst]\n  (let [squared\n        (fn [lst]\n          (->>\n            (map (fn [x] (* x x)) lst)\n            (reduce +)))]\n    (->>\n      (map (fn [x] (map #(Integer/parseInt (str %)) (str x)) )lst)\n      (interleave lst)\n      (partition 2)\n      (map (fn [x] (if (< (first x) (squared (second x))) true false)))\n      (remove false?)\n      count)))", "user": "59e8fef3e4b0249b72820743"}, {"problem": 120, "code": "(fn f\n  [lst]\n  (count (remove #(nil? %) (map #(if (< 1 (count (str %)))\n                                   (let [sum (reduce + (map (fn [x] (* (- (int x) 48) (- (int x) 48))) (str %)))]\n                                     (if (< % sum)\n                                       %\n                                       nil))\n                                   (if (< % (* % %))\n                                     %\n                                     nil)) lst))))", "user": "59e778aae4b0249b72820716"}, {"problem": 120, "code": "(fn c [coll]\n  (count (filter (fn [e] (< e (->> (str e)\n                                   (map #(Integer/parseInt (str %)))\n                                   (map #(* % %))\n                                   (apply +))))\n                   coll)))", "user": "594bc16be4b07ddc2dafae39"}, {"problem": 120, "code": "(fn [x]\n  (letfn [(ssd [n]\n            (let [dst (map str (str n))\n                  ds (map read-string dst)]\n              (reduce + (map #(* % %) ds))))\n          (smssd [c]\n            (let [ssds (map ssd c)\n                  inds (filter #(< (nth c %) (nth ssds %)) (range (count c)))]\n              (count inds)))]\n    (smssd x)))", "user": "59ea85e4e4b0249b72820767"}, {"problem": 120, "code": "(fn Sum-of-square-of-digits\n  [lst]\n  (let [sum-digits (fn sum-digits\n                     [d sum]\n                     (cond\n                       (= d 0) sum\n                       :else (sum-digits (quot d 10) (+ sum (* (mod d 10) (mod d 10))))))]\n    (loop [lst lst\n           n 0]\n      (cond\n        (empty? lst) n\n        (< (first lst) (sum-digits (first lst) 0)) (recur (rest lst) (inc n))\n        :else (recur (rest lst) n)))))", "user": "59e14ee3e4b08badc2a0c50c"}, {"problem": 120, "code": "(fn [n]\n  (letfn [(numeros [a]\n            (lazy-seq\n             (loop [x a r '()]\n               (if (< x 10) (cons x r)\n                   (recur (quot x 10) (cons (mod x 10) r))))))\n          (square-sum [col]\n            (reduce + (map (fn [x] (Math/pow x 2)) col)))]\n\n    (reduce (fn [total num]\n              (let [numerosDig (numeros num)\n                    num-square-sum (square-sum numerosDig)]\n                (if (< num num-square-sum) (inc total) total)))\n            0\n            n)))", "user": "59e4e3cbe4b08badc2a0c54a"}, {"problem": 120, "code": "(fn algo [lst]\n  (loop [lst lst\n         cnt 0]\n    (if (empty? lst)\n      cnt\n      (recur\n        (rest lst)\n        (if (< (first lst) (reduce + (map #( * % %) (map #(Character/digit % 10) (str (first lst))))))\n\n          (inc cnt)\n          cnt)))))", "user": "59e56c75e4b08badc2a0c556"}, {"problem": 120, "code": "(fn [lst]\n  (letfn [(sq [n] (reduce + (map #(let [x (- (int %) (int \\0))] (* x x)) (str n))))]\n    (count (filter #(< % (sq %)) lst))))", "user": "59dd387ae4b0a0ac046f2501"}, {"problem": 120, "code": "(fn check [col]\n  (letfn [(sq [n] (reduce + (map #(let [x (- (int %) (int \\0))] (* x x)) (str n))))]\n    (count (filter #(< % (sq %)) col))))", "user": "59ed01ede4b0249b7282079a"}, {"problem": 120, "code": "(fn my-sumSquare[lst]\n  (let [squaredComponentDigitsSum \n        (fn [n] (reduce + (map #(* % %) (map (comp read-string str) (seq (str n))))))\n        ]\n  (count (filter #(< % (squaredComponentDigitsSum %)) lst))))", "user": "59dd387be4b0a0ac046f2502"}, {"problem": 120, "code": "(fn [y] (count (filter (fn [x] (< x (reduce #(+ (* %2 %2) %1) 0 (map #(Character/digit % 10) (str x))))) y)))", "user": "593c1e3be4b069cdc2982b86"}, {"problem": 120, "code": "(fn[lst] \n  (count (filter (fn[n] \n           (< n (reduce + (map #(* (Integer/parseInt %) (Integer/parseInt %)) (clojure.string/split \n             (clojure.string/replace (str n) #\"\\d\" #(str %1 \" \")) #\" \"))))) lst)))", "user": "571172ece4b09c608db70446"}, {"problem": 120, "code": "(fn square-sum [coll]\n  (let [digits (fn [n] (map #(- (int %) 48) (str n)))\n        square #(* % %)\n        sum-digits (fn [n] (reduce + (map square (digits n))))]\n    (count (filter #(< % (sum-digits %)) coll))))", "user": "572de985e4b0cd1946bd0f7c"}, {"problem": 120, "code": "(fn sum-square [sq]\n  (let [digits (fn [n] (map #(- (int %) 48) (str n)))\n        square #(* % %)\n        sum-digits (fn [n] (reduce + (map square (digits n))))]\n    (count (filter #(< % (sum-digits %)) sq))))", "user": "59ea0944e4b0249b72820758"}, {"problem": 120, "code": "#(reduce (fn [c i]\n                  (if (< i (reduce (fn [d j]\n                                           (let [k (- (int j) 48) ]\n                                            (+ d (* k k)))\n                                           ) 0 (str i)))\n                      (inc c)\n                      c)\n                  )  0 %)", "user": "5957cc41e4b066ee0a44af76"}, {"problem": 120, "code": "(fn [xs]\n  (letfn [(digits [n]\n            (map #(Character/digit % 10) (str n)))\n          (square [n] (* n n))]\n    (->> xs\n         (map #(->> (digits %)\n                    (map square)\n                    (reduce +)))\n         (map < xs)\n         (filter identity)\n         (count))))", "user": "59eb63e3e4b0249b7282077c"}, {"problem": 120, "code": "(fn [xs]\n  (letfn [(digits [n]\n            (lazy-seq\n             (loop [x n r '()]\n               (if (< x 10) (cons x r)\n                   (recur (quot x 10) (cons (mod x 10) r))))))\n          (square-sum [col]\n            (reduce + (map (fn [x] (Math/pow x 2)) col)))]\n\n    (reduce (fn [total num]\n              (let [num-digits (digits num)\n                    num-square-sum (square-sum num-digits)]\n                (if (< num num-square-sum) (inc total) total)))\n            0\n            xs)))", "user": "59e8cd8be4b0249b72820739"}, {"problem": 120, "code": "(fn [seq]\n  (-> (fn [item]\n        (if (> 10 item)\n          (< item (* item item))\n          (< item (apply + (map (comp #(* % %) read-string str first)\n                                (split-at 1 (str item)))))))\n      (filter seq)\n      count))", "user": "593ab583e4b069cdc2982b57"}, {"problem": 120, "code": "(fn [xs]\n    (reduce\n     (fn [cnt n]\n       (if (< n (apply + (map #(let [digit (- (int %) (int \\0))] (* digit digit))\n                              (str n))))\n         (inc cnt)\n         cnt))\n     0\n     xs))", "user": "539fa040e4b0ca733b97449f"}, {"problem": 120, "code": "(fn [args ]\n  (apply + (map \n            (fn [n]\n              (let [digits (->> n str (map (comp read-string str)))\n                    square (fn [a] (* a a))]\n                (if (< n (apply + (map square digits)))\n                  1 0))) args)))", "user": "59c7c2cde4b0a024fb6ae54b"}, {"problem": 120, "code": "(fn [coll]\n  (let [digitize (fn digitize [x]\n                   (if (pos? x)\n                     (cons (mod x 10) (digitize (quot x 10)))))\n        squares (fn [x] (map #(* % %) (digitize x)))\n        sum-of-squares (fn [x] (reduce + (squares x)))]\n    (count (filter #(< % (sum-of-squares %)) coll))))", "user": "52fe31d5e4b047fd55837038"}, {"problem": 120, "code": "(fn [x]\n  (->> x\n       (filter (fn [num] (< num (reduce + \n                                        (map (fn [digit]\n                                               (let [parsed (Integer/parseInt (str digit))]\n                                                 (* parsed parsed))) \n                                               (str num))))))\n       count))", "user": "57ea2c91e4b0bfb2137f5b42"}, {"problem": 120, "code": "(fn [coll]\n  (->> coll\n    (filter (fn [x]\n              (->> x\n                str\n                (map #(Character/digit % 10))\n                (map #(* % %))\n                (apply +)\n                (< x))))\n    count))", "user": "5a065388e4b01bb0ae8afdcb"}, {"problem": 120, "code": "(fn [lst]\n  (let [num->digits (fn [n]\n                      (->> n\n                           (iterate #(quot % 10))\n                           (take-while pos?)\n                           (mapv #(mod % 10))\n                           rseq))\n        less-than-sum-square-digits? (fn [x]\n                                       (< x\n                                          (reduce + (map #(* % %) (num->digits x)))))]\n    (reduce + (map #(if (less-than-sum-square-digits? %) 1 0) lst))))", "user": "5a022949e4b01bb0ae8afd60"}, {"problem": 120, "code": "(fn \n    [s] (count (filter (fn \n                           [i] (< i (reduce (fn \n                                                [x y] (+ x (* y y)))\n                                              0 \n                                              (map #(Integer/parseInt %) (map str ((comp seq str) i)))\n                                            ))) s)))", "user": "5a04e923e4b01bb0ae8afda9"}, {"problem": 120, "code": "(fn [r]\n  (let [sep (fn [x] (reverse (map #(Character/digit % 10) (str x))))\n        smaller? (fn [x] (> (reduce + (map * (sep x) (sep x))) x))]\n    (count (filter true? (map smaller? r)))))", "user": "59f15e20e4b0966464fe6a5a"}, {"problem": 120, "code": "(fn [coll] (letfn [(sumDigits [x] (apply + (map #(* % %) \n                                                 (map read-string (map str (str x))))))]\n             ((frequencies (map > (map sumDigits coll) coll)) true)))", "user": "59ba2ea0e4b0a024fb6ae3e1"}, {"problem": 120, "code": "(fn [coll]\n   (count (for [n coll\n                :when (< n (->> (str n)\n                           seq\n                           (map #(-> (str %)\n                                     (Integer/parseInt)\n                                     ((fn [x] (* x x)))))\n                           (reduce +)))]\n             n)))", "user": "59fa241ee4b0ca45a743a358"}, {"problem": 120, "code": "(fn [sequ]\n   (let\n     [get-num-list (fn [x] (if (< x 10) (list 0 x)\n        (->> x str (map (comp read-string str)))))\n      get-left (fn [num-list] (first (get-num-list num-list)))\n      get-right (fn [num-list] (last (get-num-list num-list)))\n      sum-comp-sqr (fn [z] (+ (* (get-left z) (get-left z)) (* (get-right z) (get-right z))))\n      ]\n     (reduce (fn [accum, y] (if (< y (sum-comp-sqr y))\n                   (inc accum) accum)) 0 sequ)))", "user": "5a0a3473e4b0eab8c0448941"}, {"problem": 120, "code": "(fn [nums]\n  (letfn [(digits [n]\n                  (let [result n\n                        expo (Math/floor (Math/log10 result))]\n                       (loop [s []\n                              r result\n                              e expo]\n                         (if (neg? e)\n                           s\n                           (recur (conj s (int (quot r (Math/pow 10 e))))\n                                  (rem r (Math/pow 10 e))\n                                  (dec e))))))\n          (sum-squared-components [digits]\n                              (apply + (map #(* % %) digits)))]\n  (->> nums\n       (map digits)\n       (map sum-squared-components)\n       (map vector nums)\n       (filter (fn [[x y]] (< x y)))\n       (count))))", "user": "59f75327e4b0966464fe6aec"}, {"problem": 120, "code": "(fn [coll]\n  (letfn [(sum-sq [x]\n            (->> (str x)\n                 (map (comp read-string str))\n                 (map #(* % %))\n                 (reduce + 0)))]\n    (count (filter #(< % (sum-sq %)) coll))))", "user": "53ea5851e4b036ad0777e4e4"}, {"problem": 120, "code": "(fn ssd [ns]\n  (letfn [(sum [n]\n          (reduce + (map #(* % %) (map #(Character/digit % 10) (str n)))))]\n   (count (filter true? (map #(< % (sum %)) ns)))))", "user": "56f2611fe4b04a395b9a04a2"}, {"problem": 120, "code": "(fn [nums]\n  (count (filter\n          (fn [n]\n            (loop [r n\n                   acc '()]\n              (if (< r 10)\n                (< n (reduce + (map (fn [x] (* x x)) (conj acc r))))\n                (recur (int (/ r 10)) (conj acc (rem r 10))))))\n          nums)))", "user": "5a188be3e4b0ff51aa4b31ec"}, {"problem": 120, "code": "(fn [coll]\n    (count (reduce (fn [output item]\n                     (let [digits (->> item str (map (comp read-string str)))]\n                       (if (< item (reduce (fn [c x] (+ c (* x x))) 0 digits))\n                         (conj output item)\n                         output\n                         )))\n                   []\n                   coll))\n    )", "user": "5683fcafe4b0945ebc182aa8"}, {"problem": 120, "code": "(letfn \n  [(get-digits [n] (map #(Integer/parseInt (str %)) (str n)))\n   (sum-of-squares [list] (apply + (map #(* % %) list)))\n   (less-than-sum-squares? [n] (< n (sum-of-squares (get-digits n))))]\n  (comp count (partial filter less-than-sum-squares?)))", "user": "5a12dea3e4b04bbd27e6da44"}, {"problem": 120, "code": "(fn [b](reduce + (map (fn [a] (if (< a (reduce + (map #(int (Math/pow (- (int %) 48) 2)) (str a))))1 0))b)))", "user": "59e8bb43e4b0249b72820735"}, {"problem": 120, "code": "(fn [coll](let [digits (for [x coll] \n   [x (map (comp read-string str) (seq (str x)))])\n   square-sums \n   (filter #(< (% 0) (% 1)) (map\n      (fn [n] [(n 0) (reduce (fn [xs x] (+ xs (* x x))) (cons 0 (n 1)))])\n      digits))\n    ] \n  (count square-sums)))", "user": "5a14228fe4b0ff51aa4b3193"}, {"problem": 120, "code": "(fn [coll]\n  (count (filter (fn [n]\n                   (->> n\n                        str\n                        (map (comp read-string str))\n                        (map #(Math/pow % 2))\n                        (apply +)\n                        (< n)))\n                   coll)))", "user": "59f192e0e4b0966464fe6a5e"}, {"problem": 120, "code": "(fn [xs] (let [fdigs (fn [res m] \n                     (if (> m 9) (recur (conj res (mod m 10)) (int (/ m 10))) \n                                 (conj res m)\n                      ))\n               fsqsum (fn [ds] (reduce + (map #(* % %) ds))) \n               ]\n           \n          (count (filter #(< % (fsqsum (fdigs [] %))) xs))\n           ))", "user": "59ff9424e4b01bb0ae8afd24"}, {"problem": 120, "code": "(fn [xs]\n (letfn [(dgs [x]\n (->>\n  (iterate\n   (fn [[_ rest]]\n    [(mod rest 10)\n     (quot rest 10)])\n   [0 x])\n  (take-while\n   #(not\n     (= (first %)\n        (second %) 0)))\n  (map first)\n  (rest)\n  (reverse)))]\n (->> xs\n  (filter\n   (fn [x]\n    (< x\n     (apply +\n      (map #(* % %)\n       (dgs x))))))\n  (count))))", "user": "549a999be4b0f3d1d8e70f6f"}, {"problem": 120, "code": "(fn [alon]\n  (let [digits (fn [n] (loop [x n digs nil] (if (>= x 10) (recur (quot x 10) (cons (rem x 10) digs)) (cons x digs))))\n        sqrd   (fn [xs] (reduce #(+ %1 (* %2 %2)) 0 xs))]\n    (count (filter #(< (first %) (second %))\n                   (map #(vector %1 (sqrd %2)) alon (map digits alon))))\n  ))", "user": "5a0ce1a5e4b04bbd27e6d9b7"}, {"problem": 120, "code": "(fn [coll]\n    (let [n-t-d (fn ntd\n                  ([x]\n                   (ntd x []))\n                  ([x coll]\n                   (if (< x 10)\n                     (conj coll x)\n                     (ntd (int (/ x 10))\n                          (conj coll (rem x 10))))))\n          h-fn (fn [x]\n                 (let [coll (n-t-d x)]\n                   (->> coll\n                        (map #(* % %))\n                        (apply +)\n                        (< x))))]\n      (count (filter h-fn coll))))", "user": "59636cc2e4b066ee0a44b0c7"}, {"problem": 120, "code": "(fn [s]\n  (apply\n    +\n    (map\n      (fn [n]\n        (if\n          (<\n            n\n            (apply + (map\n              #(Math/pow (rem % 10) 2)\n              (take-while\n                #(>= % 1)\n                (iterate #(quot % 10) n)))))\n          1\n          0))\n    s)))", "user": "5a2df4a0e4b09cafd31c7f74"}, {"problem": 120, "code": "(fn sum-of-squared [xs] \n  (count (filter \n    (fn [x] (< x (reduce  #(+  %1 (* (- (int %2) 48) (- (int %2) 48))) 0 (str x)))) xs)))", "user": "59f043d0e4b0966464fe6a3d"}, {"problem": 120, "code": "(fn [x]\n    (count (filter (fn [[d ds]] \n                       (< d (apply + (map (fn [y] (* y y)) ds))))\n         (map (fn digits [d]\n                    (loop [y d ds nil]\n                      (if (= y 0)\n                          [d ds]\n                          (recur (quot y 10) (cons (rem y 10) ds))))) x))))", "user": "5a34f342e4b0ddc586f153d1"}, {"problem": 120, "code": "(fn count-num-less-than-sum-square-digits [s]\n  (reduce (fn [acc num]\n            (if (< num ((fn sum-square-digits [n]\n                         (reduce + (map #(* % %) ((fn number-to-seq-digits [n]\n                                                   (loop [result '()\n                                                          number n]\n                                                     (if (<= number 0)\n                                                       result\n                                                       (recur (conj result (mod number 10)) (quot number 10)))))\n                                                  n))))\n                        num))\n              (inc acc)\n              acc))\n          0\n          s))", "user": "590253e3e4b0438e51c2d055"}, {"problem": 120, "code": "(fn [coll] (count (filter (fn [x]\n  (let [digits (fn [n]\n    (loop [number n acc '()]\n    (if (< number 10)\n      (conj acc number)\n      (recur (quot number 10) (conj acc (mod number 10))))))]\n    (< x (apply + (map (fn [a] (* a a)) (digits x)))))) coll)))", "user": "5773f3a9e4b0979f896515f2"}, {"problem": 120, "code": "(fn [x]\n  (reduce #(+ %1 (if (> ((fn [x]\n  (reduce (fn [acc x] (+ acc (let [v (- (int x) (int \\0))] (* v v)))) 0 (seq (str x))))\n %2) %2) 1 0)) 0 x))", "user": "5a3c5c54e4b001c08efc0ce3"}, {"problem": 120, "code": "#(count (filter (fn [x] (< x (reduce + 0 (map (fn [c] (let [d (- (int c) (int \\0))] (* d d))) (str x))))) %))", "user": "5a4de614e4b05d388ecb6bb1"}, {"problem": 120, "code": "(fn [s] (->> s\n  (filter (fn [n]\n    (< n\n      (reduce\n        #(let [d (- (int %2) (int \\0))]\n          (+ %1 (* d d)))\n        0\n        (str n)))))\n  count))", "user": "5a4993c0e4b05d388ecb6b71"}, {"problem": 120, "code": "(fn [args]\n  (letfn [(digits [n]\n          (loop [n n\n                 acc []]\n            (if (zero? n)\n              acc\n              (recur (quot n 10) (conj acc (mod n 10))))))\n        (sum-sqr [dgts]\n          (reduce #(+ %1 (* %2 %2)) 0 dgts))\n        (smaller? [n]\n          (< n (-> n\n                   (digits)\n                   (sum-sqr))))]\n  (count (filter smaller? args))))", "user": "580a0783e4b0a837a8b30d2c"}, {"problem": 120, "code": "(fn [coll]\n    (reduce + (map (fn [x]\n                     (let [chars (map #(Character/getNumericValue (char %)) (seq (str x)))\n                           squared (reduce + (map * chars chars))]\n                       (if (< x squared)\n                         1\n                         0)))\n                   coll)))", "user": "53716539e4b0fc7073fd6eb1"}, {"problem": 120, "code": "(fn f\n  [c]\n  (letfn [(g [x]\n            (apply +\n                   (map #(Math/pow (Integer/parseInt (str %)) 2) (str x))))]\n    (count (filter #(< % (g %)) c))))", "user": "56949fc5e4b0dcc4269f4120"}, {"problem": 120, "code": "(fn Sum [input]\n  \n  (let [MakeDig (fn [n] (map #(- (int %) 48) (str n) )) \n        \n        Square (fn [n] (* n n))\n        \n        SqDig (fn [n] (map Square(MakeDig n)))\n        \n        SumSqDig (fn [n] (reduce + (SqDig n) ) ) ]\n    \n    (count (filter #(> (SumSqDig %) %) input))))", "user": "5a534241e4b05d388ecb6c0a"}, {"problem": 120, "code": "(fn square-list-digit\n  [a]\n  (let [f #(map (fn [b] (Integer/parseInt (str b))) (str %1))\n        square #(* %1 %1)\n        digit (map #(reduce + (map square %1)) (map f a))]\n\n    (count (filter (fn [[k v]] (< k v)) (map-indexed (fn [idx itm] [idx itm]) digit)))))", "user": "58b18ba0e4b0ebc645576cfa"}, {"problem": 120, "code": "(fn [nums]\n  (count (filter (fn [n]\n         \t     \t(> (reduce + (map \n         \t          \t\t\t\t#(let [component (Integer/parseInt (str %))]\n                                       (* component component))\n                                    (str n)))\n                        n))\n                 nums)))", "user": "5974d2ede4b01722bebd4cb6"}, {"problem": 120, "code": "(fn ssq2 [coll]\n (letfn [(digits [n] (->> n str (map (comp read-string str))))\n         (sumsqs [n] (reduce + (map #(* % %) (digits n))))\n         (great [n] (< n (sumsqs n))) ]\n   (count (filter great coll))))", "user": "5a527beee4b05d388ecb6bfe"}, {"problem": 120, "code": "(fn [x]\n  (letfn [(ssd [x]\n            (if (zero? x) 0\n                (+ (* (rem x 10) (rem x 10)) (ssd (quot x 10)))))]\n    (count (filter #(< % (ssd %)) x))))", "user": "53f053ebe4b0742d9025b0d3"}, {"problem": 120, "code": "(fn [s]\n  (letfn [(digits [x]\n            (loop [x x acc ()]\n              (if (zero? x)\n                acc\n                (recur (quot x 10) (cons (rem x 10) acc)))))]\n    (count (filter #(< % (apply + (map (fn [x] (* x x)) (digits %)))) s))))", "user": "5a512929e4b05d388ecb6be2"}, {"problem": 120, "code": "(fn [nums]\n  (letfn [(num-digits [n] (->> (iterate #(quot % 10) n)\n                               (take (count (str n)))\n                               (map #(rem % 10))))\n          (sum-of-square-digits [n] (reduce + (map #(* % %) (num-digits n))))\n          (less-than-sum-of-square-digits? [n] (< n (sum-of-square-digits n)))]\n  (count (filter less-than-sum-of-square-digits? nums))))", "user": "5182de5ce4b0353c468deb74"}, {"problem": 120, "code": "(fn\n  [x]\n  (let [sos (fn [n]\n              (->> n\n                   (.toString)\n                   (seq)\n                  (map str)\n                  (map read-string)\n                  (map #(* % %))\n                   (apply +)\n                  ))]\n\n    (count (filter #(if (< % (sos %)) true false) x))))", "user": "5a067f26e4b01bb0ae8afdcc"}, {"problem": 120, "code": "(fn [coll]\n  (count\n\t  (filter #(< (first %) (second %))\n              (map (fn [n] [n (apply + (map #(Math/pow (Integer/parseInt (str %) 10) 2) (str n)))])\n                   coll))))", "user": "51dafedee4b09f6bc204eee2"}, {"problem": 120, "code": "(fn sum-of-squ-dig [coll]\n  (letfn [(sum-of-squ [n]\n            (loop [r 0\n                   n n]\n              (if (zero? n)\n                r\n                (recur (+ r (* (rem n 10) (rem n 10))) (quot n 10)))))]\n    (count (filter #(< % (sum-of-squ %)) coll))))", "user": "565654dae4b0f9d632dd849f"}, {"problem": 120, "code": "(fn count-<-ssd [numbers]\n  (let [char-to-int #(- (int %) (int \\0))\n        sum-squared-digits (fn [n] (->> n (str) (map char-to-int) (map #(* % %)) (reduce +)))]\n    (count (filter #(< % (sum-squared-digits %)) numbers))))", "user": "5a566e8fe4b05d388ecb6c51"}, {"problem": 120, "code": "(fn [coll]\n  (let [digits (fn [n] (->> n str (map (comp read-string str))))]\n  (count (filter identity\n  (map (fn [elem] (< elem\n                     (reduce + (map #(* % %) (digits elem))))) coll)\n))\n))", "user": "5a1c3c11e4b0ff51aa4b323d"}, {"problem": 120, "code": "(fn sum-square [coll]\n  (let [digits (fn [n] (map #(- (int %) 48) (str n)))\n        sum-digits (fn [n] (reduce + (map #(* % %) (digits n))))]\n    (count (filter #(< % (sum-digits %)) coll))))", "user": "5a58bfd0e4b05d388ecb6c84"}, {"problem": 120, "code": "(fn [a] (count (filter #(< % ((fn [x s] (if (= 0 x) s (recur (int (/ x 10)) (+ s (* (rem x 10) (rem x 10)))))) % 0)) a)))", "user": "5a3c2a08e4b001c08efc0cdf"}, {"problem": 120, "code": "(fn [coll]\n  (let [digits (fn [n] (map #(- (int %) 48) (str n)))\n        calc   (fn [n] (reduce + (map #(Math/pow % 2) (digits n))))]\n    (count (filter #(< % (calc %)) coll))))", "user": "527ba29de4b03e8d9a4a7594"}, {"problem": 120, "code": "(fn [coll] \n  (letfn [(sum-digits [x]\n                      (map \n                       #(int (Math/pow (read-string (str %)) 2)) (str x)))]\n                      (count\n                       (filter #(> (reduce + (sum-digits %)) %) coll))))", "user": "5a388675e4b001c08efc0ca2"}, {"problem": 120, "code": "(fn [x] (count (filter (fn [c] (let [k (str c)]\n                (< c (reduce + (map #(* (Integer/parseInt (str %)) (Integer/parseInt (str %))) k)))\n                )) x)))", "user": "5a60ad14e4b0512ff01cd965"}, {"problem": 120, "code": "(fn [xs] \n  (letfn [\n          (digs [x] (let [d (rem x 10) r (quot x 10)] \n                      (if (= 0 r)\n                        [d]\n                        (cons d (digs r)))))\n          (sumsq [ys] (reduce + (map #(* % %) ys)))]\n    (count (filter #(< % (sumsq (digs %))) xs))))", "user": "552d9b31e4b076ab5578f7eb"}, {"problem": 120, "code": "(fn square [c]\n  (let [digits\n        (fn [n]\n          (loop [n n\n                 res []]\n            (if (= n 0)\n              res\n              (recur (int (/ n 10)) (conj res (mod n 10))))))\n        square-sum\n        (fn [s]\n          (loop [s s\n                 res 0]\n            (if (seq s)\n              (recur (rest s) (+ res (* (first s) (first s))))\n              res)))]\n    (loop [c c\n           i 0]\n      (if (seq c)\n        (recur\n         (rest c)\n         (if (< (first c) (square-sum (digits (first c))))\n           (+ i 1)\n           i))\n        i))))", "user": "5a6b9b95e4b0512ff01cda40"}, {"problem": 120, "code": "(fn [x]\n  (count\n   (filter identity\n           (for [n x]\n             (> (apply + (map #(apply * (repeat 2 (- (int %) 48))) (seq (str n)))) n)))))", "user": "5a6a7cc5e4b0512ff01cda27"}, {"problem": 120, "code": "(fn [l]\n  (count\n      (filter\n          (fn [n]\n              (<\n                  n\n                  (reduce +\n                      (map\n                          (fn [digit]\n                              (let [ndigit (Character/digit digit 10)] (* ndigit ndigit)))\n                          (str n)))))\n                l)))", "user": "551afdf8e4b07993ea3788cb"}, {"problem": 120, "code": "(fn sum-of-square-of-digits [x] \n  (count \n    (filter (fn is-smaller-than-the-sum-of-its-squared-component-digits? [a]\n      (< a ((fn sum-of-its-squared-component-digits [b] \n  (reduce + (map (fn square [c]\n  (* c c)) ((fn to-list-of-digits [c]\n  (map (fn to-digit [d] (Character/digit d 10)) (seq (str c)))) b)))) a))) x)))", "user": "594a7ed1e4b07ddc2dafae02"}, {"problem": 120, "code": "(fn ssd [ns]\n  (letfn [(to-digit-string [s]\n                          (map #(Character/digit %1 10) (str s)))\n         (sumsquares [ds]\n                     (reduce + (map #(* %1 %1) ds)))\n         (lesscheck [n]\n                    (> (sumsquares (to-digit-string n)) n))]\n  (count (filter lesscheck ns))))", "user": "51000111e4b00d7ad4cab15e"}, {"problem": 120, "code": "#(count (filter (fn [n]\n                  (let [helper (fn [n] (reduce + (map (fn [ch] (int (Math/pow (- (int ch) (int \\0)) 2))) (str n))))]\n                    (if (> (helper n) n)\n                      true\n                      false))) %))", "user": "5a6af090e4b0512ff01cda2d"}, {"problem": 120, "code": "(fn [xs]\n    (let [digits (fn [x]\n                   (->> x\n                        (str)\n                        (map str)\n                        (mapv read-string)))\n          smaller (fn [x] (< x\n                             (->> x\n                                  (digits)\n                                  (map #(* % %))\n                                  (reduce +))))]\n      (->> xs\n           (filter smaller)\n           (count))))", "user": "5920c191e4b09b4ee5954c61"}, {"problem": 120, "code": "(fn [nums]\n  (letfn [(sd [n] (reduce #(+ %1 (* %2 %2)) 0 (map #(- (int %) (int \\0)) (str n))))]\n    (->> nums\n     (filter #(< % (sd %)))\n     (count))))", "user": "4fd4bddce4b0d4de60cee36e"}, {"problem": 120, "code": "(fn [coll]\n  (let [summator \n        (fn [x] \n          (apply + (map (comp #(* % %) read-string str) (str x))))]\n    (count (filter #(< % (summator %)) coll))))", "user": "5835cb06e4b089d5ab817cea"}, {"problem": 120, "code": "(fn [xs]\n   (->> xs\n        (filter\n         (fn [x]\n           (->> (str x)\n                (map #(read-string (str %)))\n                (reduce #(+ % (* %2 %2)) 0)\n                (< x))))\n        (count)))", "user": "58db3c5ae4b0a4d5acaab677"}, {"problem": 120, "code": "#(count (for [x %1\n      :when (> (reduce + (map (fn [y] (reduce * (repeat 2 (Character/digit y 10)))) (seq (str x)))) x)]\n    x))", "user": "5a4b3abde4b05d388ecb6b81"}, {"problem": 120, "code": "(fn my-sum-squares\n  [ns]\n  (reduce +\n   (map \n     (fn [n] \n       (if \n        (< n \n           (reduce \n             (fn [acc x] (+ acc (Math/pow x 2)))\n             0 \n             (map (fn [i] (Integer/parseInt (str i) 10)) (str n))))\n        1\n        0))\n     ns)))", "user": "59f44189e4b0966464fe6aab"}, {"problem": 120, "code": "(fn [x]\n  (count (filter \n          (fn [e]\n              (< e (apply + (map #(* % %) (map read-string (rest (clojure.string/split (str e) #\"\")))))\n             )\n            )\n          x))\n\n)", "user": "5a244240e4b0ff51aa4b32e9"}, {"problem": 120, "code": "(fn ssd [ints]\n  (letfn [(digits [n]\n            (map #(mod % 10) (take-while #(not= 0 %) (iterate #(quot % 10) n))))\n          (square [n] (* n n))\n          (sum-of-square-digits [n] (reduce + (map square (digits n))))\n          (pred [n] (< n (sum-of-square-digits n)))]\n    (count (filter pred ints))))", "user": "57a0f256e4b0c3d858beb8dd"}, {"problem": 120, "code": "(fn [lst]\n  (count (filter\n           (fn [x]\n             (< x (reduce +\n                          ((fn [x]\n                             (loop [k x l ()]\n                               (if (zero? (quot k 10))\n                                 (cons (* k k) l)\n                                 (recur (quot k 10) (cons (* (mod k 10) (mod k 10)) l)))))\n                            x)))) lst)))", "user": "5a653f80e4b0512ff01cd9b2"}, {"problem": 120, "code": "(fn [xs]\n  (->> xs\n       (filter (fn [x]\n                 (->> x\n                      ((fn digits [x]\n                         (if (pos? x)\n                           (cons (mod x 10)\n                                 (lazy-seq\n                                  (digits (quot x 10)))))))\n                      (map #(* % %))\n                      (apply +)\n                      (< x))))\n       (count)))", "user": "5a95c639e4b0d174b936c75e"}, {"problem": 120, "code": "(fn[xs] \n   (letfn [(check-cube[n](reduce + (map #( * (- (int %) 48)  (- (int %) 48)) (java.lang.Integer/toString n)))) ]\n      (.size (filter #(> (check-cube %) % ) xs))    \n    )\n  )", "user": "55d7312ee4b0e31453f64a9f"}, {"problem": 120, "code": "(fn [s]\n    (->> s\n         (map (comp (partial re-seq #\".\") str))\n         (map #(map read-string %1))\n         (map (fn [a] (map #(* %1 %1) a)))\n         (map #(reduce + %1))\n         (map - s)\n         (filter #(< %1 0))\n         (count)))", "user": "529f9bf2e4b04e0c58e87bb4"}, {"problem": 120, "code": "(fn [lst]\n  (letfn [(digitos [x] (drop-while zero?\n                                   (reverse\n                                     (map #(mod (int(/ x %)) 10)\n                                          (take 10 (iterate #(* 10 %) 1))))))\n          (suma [y] (reduce + (map #(* % %) y)))]\n    (count (filter #(< % (suma (digitos %))) lst))\n    )\n  )", "user": "5a984657e4b0d174b936c78a"}, {"problem": 120, "code": "(fn sum-of-square [x]\n  (count (filter (fn sad [n] (loop [q n sum 0]\n          (if (= q 0)\n            (if (< n sum) true)\n            (recur (quot q 10) (+ sum (* (mod q 10)(mod q 10))))))) x)))", "user": "5a9482b7e4b0d174b936c737"}, {"problem": 120, "code": "(fn sumSqrt? [coll]\n  (count (filter\n    (fn [n]\n      (if (< n (reduce + (map #(Math/pow (- (int %) 48), 2) (str n))))\n        true\n        false)) coll)))", "user": "5a99b863e4b0d174b936c7ae"}, {"problem": 120, "code": "(fn [numbers]\n  (letfn [(dig-seq [number]\n            (if (> number 9 )\n              (conj (dig-seq (quot number 10)) (mod number 10))\n              [number]))\n          (sum-sq-dig [number]\n            (reduce + (map #(Math/pow % 2) (dig-seq number))))]\n    (->> (filter (fn [value] (< value (sum-sq-dig value))) numbers)\n      count)))", "user": "5a9dbb32e4b0d174b936c7f3"}, {"problem": 120, "code": "(fn\n  [lst]\n  (->>\n    lst\n    (map (fn [x]\n           [x\n            (reduce #(+ %1 (* %2 %2))\n                    0\n                    (map #(- (int %) 48)\n                         (str x)))]))\n    (filter (fn [t] (apply < t)))\n    count))", "user": "5aa2f1dee4b0d174b936c865"}, {"problem": 120, "code": "(fn sum-square [coll]\n  (let [digits (fn [n] (map #(- (int %) 48) (str n)))\n        square #(* % %)\n        sum-digits (fn [n] (reduce + (map square (digits n))))]\n    (count (filter #(< % (sum-digits %)) coll))))", "user": "5aa00b7fe4b0d174b936c825"}, {"problem": 120, "code": "(fn [vect]\n  (count\n   (filter\n    (fn [a]\n      (>\n        (reduce\n         (fn [a1 b] (+ a1 (* b b)))\n         0\n         (map read-string\n           (re-seq #\"[1-9]\" (str a))\n         )\n        )\n      a)\n    )\n    vect\n   )\n  )\n)", "user": "5a9e3698e4b0d174b936c7fc"}, {"problem": 120, "code": "(fn [x]\n  (let [f #(loop [x %\n                  res 0]\n             (let [x1 (quot x 10)\n                   y (rem x 10)\n                   res (+ (* y y) res)]\n               (if (= x1 0)\n                 res\n                 (recur x1 res))))\n        x (map #(vector % (f %)) x)\n        x (filter #(apply < %) x)]\n    (count x)))", "user": "5aa51330e4b0d174b936c890"}, {"problem": 120, "code": "(fn[lst]\n  (reduce +\n          (map\n           #(if (true? %) 1 0)\n           (map < lst\n                (map (fn [lst] (reduce + (map #(* % %) lst)))\n                     (map (fn[n]\n                           (for [ digit (for [digit (str n)] (str digit))] (Integer. digit))) lst)) )) )\n  )", "user": "5a99b83fe4b0d174b936c7aa"}, {"problem": 120, "code": "(fn sum-square [coll]\n  (let [digits (fn [n] (map #(- (int %) 48) (str n)))\n        square #(* % %)\n        sum-digits (fn [n] (reduce + (map square (digits n))))]\n    (count (filter #(< % (sum-digits %)) coll))))", "user": "5a9dbffbe4b0d174b936c7f4"}, {"problem": 120, "code": "(fn suma-squ [collection]\n  (let [dig (fn [n] \n              (map #(- (int %) 48) \n                   (str n)))\n        squ #(* % %)\n        suma-dig (fn [n] (reduce + (map squ (dig n))))]\n    (count (filter #(< % (suma-dig %)) collection))))", "user": "5aa4b961e4b0d174b936c888"}, {"problem": 120, "code": "(fn sum-square [coll]\n  (let [digits (fn [n] (map #(- (int %) 48) (str n)))\n        square #(* % %)\n        sum-digits (fn [n] (reduce + (map square (digits n))))]\n    (count (filter #(< % (sum-digits %)) coll))))", "user": "5a99b766e4b0d174b936c7a8"}, {"problem": 120, "code": "(fn cnt-sqrt [arg]\n  (let [get-digits (fn [n]\n                     (map #(Integer/valueOf (str %)) (String/valueOf n)))\n        digits-sqr (fn [n]\n                     (apply + (map #(* % %) (get-digits n))))\n        res-seq (filter #(< % (digits-sqr %)) arg)]\n    (count res-seq)))", "user": "5a99b844e4b0d174b936c7ab"}, {"problem": 120, "code": "(fn sum-square [coll]\n  (let [digits (fn [n] (map #(- (int %) 48) (str n)))\n        square #(* % %)\n        sum-digits (fn [n] (reduce + (map square (digits n))))]\n    \n    (count (filter #(< % (sum-digits %)) coll))\n    )\n  )", "user": "5a99b848e4b0d174b936c7ac"}, {"problem": 120, "code": "(fn sum-square [coll]\n  (let [digits (fn [n] (map #(- (int %) 48) (str n)))\n        square #(* % %)\n        sum-digits (fn [n] (reduce + (map square (digits n))))]\n    (count (filter #(< % (sum-digits %)) coll))))", "user": "5a9cdec0e4b0d174b936c7e1"}, {"problem": 120, "code": "(fn cnt \n  [arg]\n  (let [getd (fn [n]\n                     (map #(Integer/valueOf (str %)) (String/valueOf n)))\n        digits-sqr (fn [n]\n                     (apply + (map #(* % %) (getd n))))\n        res-seq (filter #(< % (digits-sqr %)) arg)]\n    (count res-seq)))", "user": "5a9f005be4b0d174b936c810"}, {"problem": 120, "code": "(fn square-digist [lst]\n  (let [value (fn [x] (map #(- (int %) 48) (str x)))\n        square #(* % %)\n        sum (fn [n] (reduce + (map square (value n))))]\n    (count (filter #(< % (sum %)) lst))))", "user": "5a99b87ee4b0d174b936c7af"}, {"problem": 120, "code": "(fn sum-square\n  [lst]\n  \n\t(count(filter (fn [item] (> ((fn [num]                   \n         (letfn [(stp [num]\n                                                         \n\t        (if (= num 0)\n\t\t     0\n\t\t     (+ (* (rem num 10) (rem num 10)) (stp (quot num 10)))))]\n                                             \n\t(stp num))) item) item)) lst)))", "user": "5a99ae99e4b0d174b936c7a4"}, {"problem": 120, "code": "(fn [x] (count (filter #(< (first %) (last %)) (map #(vector % (loop [x (str %) r 0] (if (empty? x) r (recur (rest x) (+ r (* (- (int (first x)) 48) (- (int (first x)) 48))))))) x))))", "user": "5aa6d44de4b0d174b936c8b2"}, {"problem": 120, "code": "(fn [lst]\n  (letfn [(sq [n] (reduce + (map #(let [x (- (int %) 48)] (* x x)) (str n))))] (count (filter #(< % (sq %)) lst))))", "user": "5a99b688e4b0d174b936c7a6"}, {"problem": 120, "code": "(fn sum-square \n  [val]\n  (letfn \n    [(sq [n] (reduce + (map #(let [x (- (int %) (int \\0))] (* x x)) (str n))))]\n    (count (filter #(< % (sq %)) val))))", "user": "5a99b861e4b0d174b936c7ad"}, {"problem": 120, "code": "#(count (for [x % :when (let [x-dig (map (fn [xx] (- (int xx) 48)) (seq (str x)))]\n                          (> (apply + (for [y x-dig] (* y y))) x))] x))", "user": "5a99cab6e4b0d174b936c7b2"}, {"problem": 120, "code": "(fn my-prob-120-sum-of-square-of-digits [xs]\n  (let [split-into-digits (fn [n] (->> n (iterate #(quot % 10)) (take-while pos?) (mapv #(mod % 10)) rseq))\n        square-a-digit #(Math/pow % 2)\n        sum-of-squared-digits #(reduce + (map square-a-digit (split-into-digits %)))]\n    (count (filter #(< % (sum-of-squared-digits %)) xs))))", "user": "55b28b57e4b01b9910ae296c"}, {"problem": 120, "code": "(fn [rng] \n  (let [digits (fn [n] (map (comp  #(* % %) read-string str) (str n)))\n        sqr #(reduce + (digits %))]\n    ((comp count #(filter true? %))(map < rng (map sqr rng)))))", "user": "5a8e9a7ae4b05369db4d2528"}, {"problem": 120, "code": "(fn [coll]\n   (let [square #(* % %)\n         sum-coll (fn [n]\n                    (let [a (str n)]\n                      (reduce + (map square (for [x a]\n                                              (Integer/parseInt (str x)))))))\n         sosod? (fn [n]\n           (if (< n (sum-coll n))\n             true false))\n         ]\n     (count (filter sosod? coll))\n     ))", "user": "5a4443cae4b0447ef91cc60f"}, {"problem": 120, "code": "(fn [s] \n  (letfn [(digits [x] (if (= x 0) [] (conj (digits (quot x 10)) (rem x 10))))\n          (sum-square-digits [x] (reduce + (map #(* % %) (digits x))))]\n    (count (filter\n      #(< % (sum-square-digits %))\n     s))))", "user": "5aa998c6e4b0d174b936c8e5"}, {"problem": 120, "code": "(fn [lista] (let [retira-ultimo-digito #(quot % 10)\n                  adicionar-ultimo-digito-na-lista (fn [res num] (conj res (#(* % %) (mod num 10))))\n                  digitos-ao-quadrado-somados (fn [num1 res1] (reduce + (loop [num num1 res res1] (if (< num 10) (conj res (* num num)) (recur (retira-ultimo-digito num) (adicionar-ultimo-digito-na-lista res num))))))\n                  digitos-somados-ao-qudrado (map (fn [elemento] (digitos-ao-quadrado-somados elemento [])) lista)\n                  comparar-elementos (map (fn [elemento-lista elementos-quadraticos] (< elemento-lista elementos-quadraticos)) lista digitos-somados-ao-qudrado)\n                  ]\n              (reduce + (map (fn [element] (if element 1 0)) comparar-elementos))\n              )\n  )", "user": "57047768e4b0b0fb43fd0664"}, {"problem": 120, "code": "(fn [number-sequence]\n  (count\n    (filter true?\n      (for [digit number-sequence\n        :let [num (map read-string (map str (seq (str digit))))\n              sum (reduce (fn [y x]\n                            (+ (* x x) y)) 0 num)]]\n       (> sum digit)))))", "user": "575683aee4b02ea1147992dc"}, {"problem": 120, "code": "(fn [colls]\n  (let [transform-fn #(map read-string (re-seq #\"\\d\" (str %)))\n        predicate-fn #(< % (reduce (fn [acc x] (+ acc (* x x))) 0 (transform-fn %)))]\n    (count ((group-by predicate-fn colls) true))))", "user": "5a67cedbe4b0512ff01cd9ee"}, {"problem": 120, "code": "(fn [coll]\n  (reduce (fn [acc el]\n            (let [ sum (->> (seq (str el))\n                            (map str)\n                            (map read-string)\n                            (map #(* % %))\n                            (reduce +))]\n              (if (< el sum)\n                (inc acc)\n                acc)))\n            0\n            coll))", "user": "55912230e4b027778923767a"}, {"problem": 120, "code": "(fn [coll]\n                  (let [notation (fn [num base]\n                                   (loop [num num\n                                          res []]\n                                     (do\n                                       (if (> base num)\n                                         (cons (mod num base) res)\n                                         (recur (quot num base) (cons (mod num base) res  )))))\n                                   )]\n                    \n                    (->>\n                      coll\n\n                      (filter (fn [param1] (< param1 (reduce + (map #(* % %) (notation param1 10))))))\n                      (count)\n                      )))", "user": "5ab575f8e4b073f17744263d"}, {"problem": 120, "code": "(fn [s] (count\n         (filter (fn [a] (< a\n                            (reduce +\n                                    (map #(let [x (Integer/parseInt (String/valueOf %))] (* x x))\n                                         (str a)))))\n                 s)))", "user": "5ab564f8e4b073f177442639"}, {"problem": 120, "code": "(fn sum-square [coll]\n  (let [digits (fn [n] (map #(- (int %) 48) (str n)))\n        square #(* % %)\n        sum-digits (fn [n] (reduce + (map square (digits n))))]\n    (count (filter #(< % (sum-digits %)) coll))))", "user": "5ac35d00e4b0e27600da7712"}, {"problem": 120, "code": "(fn cnt-sqrt [arg]\n  (let [get-digits (fn [n]\n                     (map #(Integer/valueOf (str %)) (String/valueOf n)))\n        digits-sqr (fn [n]\n                     (apply + (map #(* % %) (get-digits n))))\n        res-seq (filter #(< % (digits-sqr %)) arg)]\n    (count res-seq)))", "user": "5a9a12d6e4b0d174b936c7b7"}, {"problem": 120, "code": "(fn [coll]\n   (count\n     (filter\n       (fn [number](if (< number ((fn [number] (reduce + (map #(* % %) (map #(Character/digit % 10) (str number)))))\n                                                      number))\n                     true\n                     false)) coll)))", "user": "5a9ac061e4b0d174b936c7c1"}, {"problem": 120, "code": "(fn [s]\n  (count (filter (fn [n]\n                   (->> n\n                       (str)\n                       (map #(let [n (Character/digit % 10)]\n                               (* n n)))\n                       (apply +)\n                       (< n))) s)))", "user": "5a9db5c9e4b0d174b936c7f1"}, {"problem": 120, "code": "(fn [a] \n  (count (filter\n             (fn [x] \n                   (> \n                    (reduce + (map #(* % %) (map #(Character/getNumericValue %)(str x))))\n                     x)) a)))", "user": "5ac4d1f6e4b0e27600da7735"}, {"problem": 120, "code": "(fn [xs]\n  (letfn [(digits\n           [x] (map #(Character/digit % 10)\n                    (str x)))\n          (sum-of-squared-digits\n           [x] (apply + (map #(* % %)\n                             (digits x))))]\n    (count (filter #(> (sum-of-squared-digits %)\n                       %)\n                   xs))))", "user": "5ab16992e4b073f1774425c4"}, {"problem": 120, "code": "(fn [x]\n  (loop [i 0 c 0]\n    (if (= i (count x)) c\n        (let [a (nth x i)\n              digits (map #(Integer/parseInt (str %)) (str a))\n              sum-of-squared-digits (reduce + (map #(* % %) digits))]\n          (recur (inc i) (if (< a sum-of-squared-digits) (inc c) c))))))", "user": "58f5b58ae4b0438e51c2cedc"}, {"problem": 120, "code": "(fn [col]\n  (letfn [(sq-sum [c] (reduce + (map #(* % %) c)))\n          (int->str [i] (#(map (comp read-string str) (str %)) i))]\n    (->> col\n         (map (fn [val] (if (< val (sq-sum (int->str val))) 1 0)) )\n         (reduce +))))", "user": "5acd08eee4b0e27600da7822"}, {"problem": 120, "code": "(fn [s]\n  (->> (map str s)\n       (map (fn [n] (map #(Character/digit % 10) n)))\n       (map (fn [n] (map #(* % %) n)))\n       (map #(apply + %))\n       (interleave s)\n       (partition 2)\n       (filter (fn [[a b]] (< a b)))\n       count))", "user": "5ad63a34e4b0ea6055cfac01"}, {"problem": 120, "code": "(fn [xs]\n  (letfn [(digits [x]\n                  (if (pos? x)\n                    (conj (digits (quot x 10)) (mod x 10))\n                    []))\n          \n          (sum-of-squares [xs]\n                          (reduce #(+ % (* %2 %2)) 0 xs))]\n\n    (->> xs\n         (filter #(< % ((comp sum-of-squares digits) %)))\n         count)))", "user": "5a257747e4b07f18be40aa1f"}, {"problem": 120, "code": "(fn sum-square [coll]\n  (let [digits (fn [n] (map #(- (int %) 48) (str n)))\n        square #(* % %)\n        sum-digits (fn [n] (reduce + (map square (digits n))))]\n    (count (filter #(< % (sum-digits %)) coll))))", "user": "5ae0976be4b0837691e92c43"}, {"problem": 120, "code": "(fn smaller?\n  [nums]\n  ((frequencies\n    (map\n     (fn [num]\n       (<\n        num\n        (reduce + (map (comp #(* % %) #(Integer. %) str) (str num)))))\n     nums)) true))", "user": "5a9829e5e4b0d174b936c788"}, {"problem": 120, "code": "(fn [arr]\n   (count (filter\n    (fn [itm]\n      (>\n       (reduce\n        (fn [acc it] (+ acc (* (Integer. it) (Integer. it)))) 0 (re-seq #\"\\d\" (str itm))) itm)) arr)))", "user": "5ad99ddee4b0ea6055cfac3a"}, {"problem": 120, "code": "(fn [xs]\n    (letfn [(d [x] (when-not (= 0 x) (lazy-seq (cons (rem x 10) (d (quot x 10))))))\n            (s [x] (apply + (map #(Math/pow % 2) (d x))))]\n           (count (filter #(< % (s %)) xs))))", "user": "586bc870e4b01531a375e964"}, {"problem": 120, "code": "(fn [s] (count (filter (fn [n] (< n (->> n str (map #(- (int %) 48)) (map #(* % %)) (reduce +)))) s)))", "user": "5abe2fc2e4b073f17744271e"}, {"problem": 120, "code": "(fn sum-of-square-of-digits [s]\n  (count\n   (filter true?\n           (map \n            (fn [a]\n              (< a\n                 (reduce +\n                         (map #(Math/pow (Character/digit % 10) 2) (seq (str a))))))\n            s))))", "user": "5aeca4c9e4b0cc2b61a3bc0a"}, {"problem": 120, "code": "(fn [s] (reduce (fn [acc xi] (cond (> xi 99)       acc\n                                   (>= xi ((fn [n]\n                                           (let [digits (->> n str (map (comp read-string str)))]\n                                             (apply + (map #(* % %) digits)))\n                                            ) xi)) acc\n                                   :else           (inc acc)))\n                0\n                s,))\n\n;alt solution: compose a function that counts the elements in a collection that has been filtered as defined by a macro\n;(comp count \n;      (partial filter (fn [m] (->> (str m) \n;                                   (map (comp read-string str)) \n;                                   (map #(* % %)) \n;                                   (apply +) \n;                                   (< m)))))", "user": "5af31955e4b0cc2b61a3bc7a"}, {"problem": 120, "code": "(fn [s]\n    (count (filter true? (map #(->> % (str) (seq) (map (comp read-string str))\n                                      (reduce (fn [agg v] (+ (* v v) agg)) 0)\n                                      (< %))\n                              s))))", "user": "5af907e6e4b0cc2b61a3bcda"}, {"problem": 120, "code": "(fn [xs]\n  (letfn [(sqdigits [x]\n    (apply + \n           (map (comp #(* % %) #(Character/digit % 10)) (str x))))]\n  (->> xs (filter #(< % (sqdigits %))) (count))))", "user": "5afb4b15e4b0cc2b61a3bcf6"}, {"problem": 120, "code": "(fn [coll]\n  (count\n   (filter\n    #(< % ((fn ssd [n]\n             (if (zero? n) 0\n               (+ (* (rem n 10) (rem n 10)) (ssd (quot n 10))\n                  )))\n           %))\n    coll)))", "user": "5b008bcae4b0cc2b61a3bd3d"}, {"problem": 120, "code": "(fn [in]\n  (count (filter (fn f [x]\n                   (->> (str x)\n                        (map str)\n                        (map read-string)\n                        (map #(* % %))\n                        (reduce +)\n                        (< x)))\n                   in)))", "user": "55e732c5e4b050e68259b492"}, {"problem": 120, "code": "(fn [coll]\n  (let [sumsquares (map (fn [nr]\n                           (apply + (map #(let [digit (Integer/parseInt (str %))]\n                                               (* digit digit))\n                                         (seq (str nr)))))\n                        coll)\n        nr-and-sumsquares (zipmap coll sumsquares)]\n      (reduce #(if (< (first %2) (second %2))\n                   (inc %1)\n                   %1) \n                 0 \n                 nr-and-sumsquares)))", "user": "5a0ef454e4b04bbd27e6d9fa"}, {"problem": 120, "code": "(fn [xs]\n  (let [digitize (fn [x ds]\n                   (let [q (quot x 10)\n                         r (rem x 10)\n                         ds (conj ds r)]\n                     (if (zero? q)\n                       ds\n                       (recur q ds))))\n        sum-squared-digits (fn [x]\n                             (reduce + (map #(* % %) (digitize x ()))))]\n    (count (filter (fn [x] (< x (sum-squared-digits x))) xs))))", "user": "5adf5f9be4b0837691e92c33"}, {"problem": 120, "code": "#(count (filter\n          (fn [x]\n            (>\n             (reduce (fn [acc a]\n                       (let [n (Character/digit a 10)]\n                         (+ acc (* n n))))\n                     0\n                     (str x))\n             x) )\n          %))", "user": "5649b1b0e4b0284900eef646"}, {"problem": 120, "code": "(fn sumsquare\n  [coll]\n  (letfn [(jumdigit [n]\n            (if (zero? n)\n              0\n              (+ (* (mod n 10) (mod n 10)) (jumdigit (quot n 10)))))]\n    (->> coll (filter #(< % (jumdigit %))) count)))", "user": "5b02a170e4b0cc2b61a3bd52"}, {"problem": 120, "code": "(fn [x] (reduce + (map (fn ss [i] (let [nums\n                                     (map #(Character/digit % 10) (seq (str i)))]\n                                 (if (< i (reduce + (map #(* % %) nums))) 1 0))) x)))", "user": "5900d5cde4b0438e51c2d02e"}, {"problem": 120, "code": "(fn [coll]\n  (let [digits (fn [n] (- (int n) 48))\n        sqrt   (fn [n] (* n n))\n        sum-sd (fn [n] (reduce + (map (comp sqrt digits) (str n))))]\n    (count (filter #(< % (sum-sd %)) coll))))", "user": "5aa4f7dae4b0d174b936c88c"}, {"problem": 120, "code": "(fn [xs]\n  (let [squared-dight (fn [x] (let [d (read-string (str x))] (* d d))) \n        sum-of-squared-dights (fn [n] (apply + (map squared-dight (str n))))\n        p (fn [x] (< x (* (sum-of-squared-dights x))))]\n    (count (filter p xs))))", "user": "5af8221ce4b0cc2b61a3bccd"}, {"problem": 120, "code": "(fn\n  [s]\n  (count (filter (fn [x]\n                   (< x (reduce + (map #(* % %) (map #(Integer. %) (re-seq #\"[0-9]\" (str x)))))))\n                 s)))", "user": "5afcd6d1e4b0cc2b61a3bd17"}, {"problem": 120, "code": "(fn [c]\n  (letfn [(s [x]\n            (->> x str (map #(- (int %) 48)) (map #(* % %)) (apply +)))]\n    (->> c (filter #(< % (s %))) count)))", "user": "5953bdb6e4b066ee0a44aeed"}, {"problem": 120, "code": "(fn [s] (letfn [(sq [a] (* a a))]\n              (count \n               (filter #(< % (apply + (map sq (map read-string (map str (seq (str %))))))) s)\n               )\n              ))", "user": "583048d9e4b051871117c007"}, {"problem": 120, "code": "(fn [nums]\n  (count\n    (filter\n      (fn [num]\n        (< num\n           (apply + (map (comp #(* % %) read-string str ) (str num)))))\n      nums)))", "user": "54cbd97ae4b057c6fda3a283"}, {"problem": 120, "code": "reduce (fn [i n] (+ i (if (< n (reduce #(+ %1 (* (read-string (str %2)) (read-string (str %2)))) 0 (str n))) 1 0)))", "user": "59419bdfe4b060784b3b78f7"}, {"problem": 120, "code": "(fn [c]\n  (count \n    (filter \n      #(< (first %) (second %))\n      (map \n        (fn [i] \n          (let [c \n            (reduce + \n              (map #(* % %)\n                (map read-string \n                  (re-seq #\".\" (str i)))))]\n          [i c])) \n      c))))", "user": "5b0546eae4b0cc2b61a3bd7e"}, {"problem": 120, "code": "(fn [c]\n        (loop [count-of-elements 0 coll c]\n            (if (empty? coll)\n                count-of-elements\n                (recur\n                    (if (<\n                            (first coll)\n                            (reduce +\n                                (map #(Math/pow % 2)\n                                    ((fn [n]\n                                        (loop [nr n l '()]\n                                            (if (> nr 0)\n                                                (recur\n                                                    (quot nr 10)\n                                                    (conj l (mod nr 10)))\n                                                (into [] l)))) (first coll)))))\n                        (inc count-of-elements)\n                        count-of-elements)\n                    (rest coll)))))", "user": "5b083513e4b0cc2b61a3bdb4"}, {"problem": 120, "code": "(fn [xs]\n  (let [smaller? (fn [x] (->> x str (map #(Integer/parseInt (str %))) (map #(* % %)) (apply +) (< x)))]                     \t\n    (reduce #(if (smaller? %2) (inc %) %) 0 xs)))", "user": "598858d0e4b021a7a535feb5"}, {"problem": 120, "code": "(fn [numbers]\n  (count (filter\n           (fn [n]\n             (< n\n                (reduce + (map #(* % %)\n                               (mapv #(Integer/parseInt (str %)) (seq (char-array (str n))))))))\n           numbers)))", "user": "5b0e6795e4b0cc2b61a3be03"}, {"problem": 120, "code": "(fn sum-digits [x]\n        (count (filter (partial = 1) (map #(if (> (reduce + (map (fn [h] (Math/pow h 2)) ((fn sreta [x]\n    (if (< x 10)\n      [x]\n      (cons (rem x 10) (sreta (int (* x 0.1)))))) %))) %)\n                  1\n                  0) x)\n        )))", "user": "5b15811ee4b0cc2b61a3be6f"}, {"problem": 120, "code": "(fn  [col]\n (count\n  (filter #(< % (apply + (map * (map (comp read-string str) (seq (str %))) (map (comp read-string str) (seq (str %)))))) col)))", "user": "5b0180cfe4b0cc2b61a3bd47"}, {"problem": 120, "code": "(fn [x] (letfn [(d[x] (reduce\n                       #(+ %1 (Math/pow %2 2))\n                       0\n                       (map #(- (int %) (int \\0)) (str x))))] (count (filter #(< % (d %)) x))))", "user": "5b210749e4b03cfeda66ed48"}, {"problem": 120, "code": "#(count (filter (fn [a]\n                    (if (< a (reduce + (map (fn [b] (* (Character/digit b 10) (Character/digit b 10))) (str a))))\n                      true\n                      false))\n                  %))", "user": "5afdb2bae4b0cc2b61a3bd1f"}, {"problem": 120, "code": "(fn f [coll]\n  (letfn [(sum-of-squares [n]\n            (->> (str n)\n                 (map (comp #(* % %) #(Character/digit % 10)))\n                 (apply +)))]\n    (->> coll\n         (map #(if (< % (sum-of-squares %)) 1 0))\n         (apply +))))", "user": "5777c3d6e4b0979f8965164f"}, {"problem": 120, "code": "(fn ss[ns]\n  (->> ns\n       (map\n        (fn[n]\n          (->> n\n               str\n               (map #(read-string (str %)))\n               (map #(* % %))\n               (reduce +)\n               (< n))))\n       (map #(if % 1 0))\n       (reduce +)))", "user": "5980f91ae4b021a7a535fddd"}, {"problem": 120, "code": "#(count (filter\n                 (fn [el]\n                   (< el\n                      (loop [n el tot 0]\n                        (let [digit (rem n 10)\n                              nexttot (+ tot (* digit digit))]\n                          (if (< n 10)\n                            nexttot\n                            (recur (quot n 10) nexttot)))))) %))", "user": "5ab5f60be4b073f177442643"}, {"problem": 120, "code": "(fn [x] ( loop [ a x res 0 ] ( if ( empty? a)\n                        res \n                        ( recur (rest a) (+ res (if (< (first a) (reduce #(+ %1 (* %2 %2)) 0 (->> (first a) (str) (seq) (map #(- (int %) 48))))) 1 0 )\n                                            )\n                          )\n)\n)\n)", "user": "5b3aa98be4b02d533a91bbca"}, {"problem": 120, "code": "(fn [y]\n  (->>\n    (map \n      (fn [x]\n      ;; (println x)\n        (let [sums (->> x\n          (str)\n          (seq)\n          (map str)\n          (map #(Integer. %))\n          (map #(* % %))\n          (reduce +)\n        )]\n      ;; (println sums)\n      (> sums x))\n    ) \n  y)\n  (filter true?)\n  (count)))", "user": "5b4b58f2e4b02d533a91bc9c"}, {"problem": 120, "code": "(let [sumsq (fn sumsq [x] (if (= x 0) 0 (+ (#(* % %) (mod x 10)) (sumsq (quot x 10)))))]\n  (fn [s] (count (filter #(< % (sumsq %)) s))))", "user": "5b465b8be4b02d533a91bc65"}, {"problem": 120, "code": "(fn [rg]\n  (count\n    (filter\n      (fn [n] \n        (< n (apply + (map #(* % %) (map #(- (int %) 48) (str n))))))\n      rg)))", "user": "575ddfd1e4b02ea11479938d"}, {"problem": 120, "code": "(fn sum-square [coll]\n  (let [digits (fn [n] (map #(- (int %) 48) (str n)))\n        square #(* % %)\n        sum-digits (fn [n] (reduce + (map square (digits n))))]\n    (count (filter #(< % (sum-digits %)) coll))))", "user": "53d5d43ce4b0e771c302544d"}, {"problem": 120, "code": "(fn [ints]\n                                (let [seperate-digits-fn (fn [i]\n                                                           {:pre [(>= i 0)]}\n                                                           (loop [i* i\n                                                                  digits '()]\n                                                             (let [q (quot i* 10)\n                                                                   r (rem i* 10)\n                                                                   digits* (conj digits r)]\n                                                               (if (= q 0)\n                                                                 digits*\n                                                                 (recur q digits*)))))]\n                                  (count (filter (fn [i]\n                                                   (< i (reduce +\n                                                                0\n                                                                (map (fn [d] (* d d))\n                                                                     (seperate-digits-fn i)))))\n                                                 ints))))", "user": "57f904c5e4b0d3187e900936"}, {"problem": 120, "code": "#(letfn [(digitSum [n] (loop [a n b 0] (if (< a 10) (+ (* a a) b) (recur (java.lang.StrictMath/floor (/ a 10)) (+ b (* (mod a 10) (mod a 10)))))))]\n \t (apply + (map (fn [i] (if (> (digitSum i) i) 1 0)) %)))", "user": "5b4a0ce3e4b02d533a91bc92"}, {"problem": 120, "code": "(fn [s] (count (filter #(< % ((fn tonums [i] (if (= 0 i) 0 (+ (* (mod i 10) (mod i 10)) (tonums (int (/ i 10)))))) %)) s)))", "user": "5b4b4052e4b02d533a91bc9a"}, {"problem": 120, "code": "(fn [s]\n  (let [sum-squares (map (fn [n] \n                           (->> (str n)\n                                (map (comp #(* % %) read-string str))\n                                (apply +))) s)]\n    (count (filter identity (map < s sum-squares)))))", "user": "51a3be77e4b0e77c4ca60bf8"}, {"problem": 120, "code": "(fn [xs]\n  (let [digit-values\n        (fn [i] (->> (str i) (seq) (map #(Integer/parseInt (str %))) (map #(* % %)) (apply +)))\n\n        smaller-than-squared-digits\n        (fn [i] (< i (digit-values i)))]\n    (count (filter smaller-than-squared-digits xs))))", "user": "524740e7e4b05ef8e38e635d"}, {"problem": 120, "code": "(fn [xs]\n  (letfn [(square-digit-sum [n]\n            (reduce\n              (fn [sum chr]\n                (let [digit (- (int chr) (int \\0))]\n                  (+ sum (* digit digit))))\n              0\n              (str n)))]\n    (count (filter #(< % (square-digit-sum %)) xs))))", "user": "5b51b9f8e4b02d533a91bcfe"}, {"problem": 120, "code": "(fn [c] (reduce (fn [r d]  \n         (if (< d (reduce + (map (comp #(* % %) read-string str) (str d))))     \n           (inc r)     \n           r)) 0 c))", "user": "5b22328ee4b03cfeda66ed5d"}, {"problem": 120, "code": "(fn [coll]\n  (let [f (fn [n]\n            (< n\n               (reduce +\n                       (->> (str n)\n                            (map str)\n                            (map #(Integer/parseInt %))\n                            (map #(Math/pow % 2))))))]\n    (count (filter f coll))))", "user": "590d3702e4b047aa04b199ff"}, {"problem": 120, "code": "(fn cnt-sqrt\n  [args]\n  (let [get-digits (fn [n]\n                 \t\t(map #(Integer/valueOf (str %)) (String/valueOf n)))\n        get-digit-sqr (fn [n]\n                        (apply + (map #(* % %) (get-digits n))))\n        res-seq (filter #(< % (get-digit-sqr %)) args)]\n    (count res-seq)))", "user": "5b0b8d29e4b0cc2b61a3bdd7"}, {"problem": 120, "code": "(fn myf [coll] (count (filter (fn lts [n] (< n (reduce + (map #(let [x (Character/digit % 10)] (* x x)) (str n))))) coll)))", "user": "5b421edce4b02d533a91bc2c"}, {"problem": 120, "code": "(fn\n  [coll]\n  (let [sum-pow (fn\n                  [coll]\n                  (->> coll\n                       (map #(Math/pow % 2))\n                       (apply +)))\n\n        ; int->coll (fn\n        ;             [n]\n        ;             (->> n str seq (map #(- (int %) 48))))\n                  \n        int->coll (fn\n                    [n]\n                    (loop [x n result []]\n                      (if (= x 0) result\n                      (let [d (int (mod x 10))]\n                        (recur (int (/ x 10)) (conj result d))))))\n\n        less-than-sum-pow (fn\n                            [n]\n                            (< n (-> n int->coll sum-pow)))]\n    (->> coll\n         (filter less-than-sum-pow)\n         (count))))", "user": "5b4fef74e4b02d533a91bcde"}, {"problem": 120, "code": "(fn sum-of-square-of-digits\n  [n]\n  (let [square (fn [x] (* x x))\n        digits (fn [x] (map #(Character/digit % 10) (str x)))\n        sum-of-squares (fn [x] (reduce + (map square (digits x))))]\n    (count (filter #(< % (sum-of-squares %)) n))))", "user": "5b477969e4b02d533a91bc6f"}, {"problem": 120, "code": "(fn count-smaller-than-sum\n  [arr]\n  (let [sum-square (fn sum-square\n                     ([n]\n                      (sum-square n 0 0))\n\n                     ([n remainder sum]\n                      (if (< (quot n 10) 1)\n                        (+ sum (* n n) (* remainder remainder))\n                        (sum-square (quot n 10) (mod n 10) (+ sum (* remainder remainder))))))]\n    (count (filter (fn [n]\n                     (< n (sum-square n))) arr))))", "user": "5b478997e4b02d533a91bc71"}, {"problem": 120, "code": "(fn my-sum-squares \n [coll]\n (let [get-digits\n (fn[n]\n (map #(Integer/valueOf (str %))\n (String/valueOf n)))\n   sum-sqr (fn[n]\n    (apply +  (map #(* % %) (get-digits n))))\n   res-seq\n(filter #(< % (sum-sqr %)) coll)]\n(count res-seq)))", "user": "52faf67ce4b047fd55837005"}, {"problem": 120, "code": "(fn [xs]\n  (letfn [(sq [x] (* x x))\n          (sum_squares [x]\n            (if (zero? x)\n              0\n              (+ (sq (mod x 10)) (sum_squares (quot x 10)))))]\n    (->> xs\n         (map #(vector % (sum_squares %)))\n         (filter (fn [[x xsq]] (< x xsq)))\n         count)))", "user": "56ef077ae4b04a395b9a0459"}, {"problem": 120, "code": "(fn [t] (apply + (map (fn blah [k] ({true 1 false 0} (< k ((fn sd [x] (reduce (fn [a v] (+ a (* v v))) 0 (map {\\0 0 \\1 1 \\2 2 \\3 3 \\4 4 \\5 5 \\6 6 \\7 7 \\8 8 \\9 9} (seq (str x))))) k)))) t)))", "user": "5839f079e4b089d5ab817d48"}, {"problem": 120, "code": "(fn [s]\n    (loop [z s\n           a []]\n      (if (empty? z)\n        (count a)\n        (let [d (map #(Integer/parseInt (str %)) (str (first z)))]\n          (recur (rest z) (if (< (first z)\n                                 (apply + (map #(* % %) d)))\n                            (conj a (first z))\n                            a))))))", "user": "5a9d64c8e4b0d174b936c7eb"}, {"problem": 120, "code": "(fn [xs]\n  (->> xs\n       (filter (fn [n] (let [digits (map #(Character/digit % 10) (str n))]\n                         (< n\n                            (reduce + (map #(* % %) digits))))))\n       count))", "user": "59ef6cfae4b0966464fe6a32"}, {"problem": 120, "code": "(fn [seq]\n   (let [f (fn g\n             ([n] (g n (list) (list 0)))\n             ([n acc default]\n              (if (zero? n)\n                (if (empty? acc) default acc)\n                (recur (int (/ n 10)) (conj acc (mod n 10)) default))))\n         sums (->> seq\n                   (map f)\n                   (map #(map (fn [n] (* n n)) %))\n                   (map #(reduce + %))\n                   )]\n     (->> seq\n          (map vector sums)\n          (filter (fn [[n sum]] (> n sum)))\n          (count))))", "user": "56e2ca59e4b03a7c14b85a38"}, {"problem": 120, "code": "(fn [lst]\n  (count\n   (filter\n    #(< % (reduce + (map\n                     (fn [n] (reduce * (repeat 2 (- (int n) 48))))\n                     (seq (str %))\n                     )))\n    lst\n    )\n   )\n  )", "user": "5b5e5019e4b0c6492753e6d3"}, {"problem": 120, "code": "#(-> % count ({10 8 30 19} 50))", "user": "59ad2fcee4b00adcf69795de"}, {"problem": 120, "code": "#(reduce (fn [a b] \n           (let [x (apply + (map (fn [y] (let [z (read-string (str y))] (* z z))) (str b)))]\n             (if (< b x) (inc a) a))) %)", "user": "5b59d176e4b02d533a91bd86"}, {"problem": 120, "code": "(fn [coll] (reduce #(if (< %2 (reduce (fn [x number] (+ x (* number number))) 0 (map (fn [n] (Integer/parseInt (str n))) (str %2))))\n                      (inc %1)\n                      %1) 0 coll))", "user": "52540bcce4b0541d1855b952"}, {"problem": 120, "code": "(fn  [s]\n  (count (filter (fn [x]\n                   (let [sum\n                         (loop [n x r 0]\n                           (if (zero? n) r\n                               (recur (quot n 10) (+ r (Math/pow (rem n 10) 2)))))]\n                     (< x sum))) s)))", "user": "5b2689e3e4b063e2438bcc33"}, {"problem": 120, "code": "(fn [xs]\n  (letfn [(square [x] (* x x))\n          (digit-square-sum [n] (reduce #(+ % (square (Character/digit %2 10))) 0 (str n)))]\n    (count (filter #(< % (digit-square-sum %)) xs))))", "user": "5a544eeee4b05d388ecb6c24"}, {"problem": 120, "code": "(fn [col]\n (count\n  (filter (fn [x] (< x (apply + (map #(* % %) (map (comp read-string str) (str x)))))) col)))", "user": "5b61aa6ae4b0c6492753e712"}, {"problem": 120, "code": "(fn foo [coll]\n\t(count \n     (filter \n      (fn [x]\n        (< x \n           (reduce \n              #(+ %1 (* %2 %2)) \n              0\n              (map \n                (comp read-string str)\n                (str x)))\n            )\n        )\n      coll)))", "user": "5b3251c1e4b025bcb146f317"}, {"problem": 120, "code": "(fn f[x]\n  (count (filter (fn myfilter[v]\n    (-> v\n      (#(map (comp read-string str) (str %)))\n      (#(apply + (map * % %)))\n      (#(< v %)))) x)))", "user": "5b6473eee4b0c6492753e73f"}, {"problem": 120, "code": "(fn susq [s]\n  (count\n   (filter\n    (fn [a] (< a\n               (reduce +\n                (->> a str seq\n                     (map\n                      (comp\n                       #(* %1 %1)\n                       read-string\n                       str)))))) s)))", "user": "5b7ec039e4b047b03b20375d"}, {"problem": 120, "code": "(fn count-less [l]\n  (letfn [(sos [n]\n            (if (= 0 n)\n              0\n              (+ (* (mod n 10) (mod n 10)) (sos (quot n 10)))))]\n    (->>\n      l\n      (filter (fn [n] (< n (sos n))))\n      (count))))", "user": "5b840b68e4b047b03b2037bc"}, {"problem": 120, "code": "(fn [coll]\n  (->> coll\n    (filter                     ; filter the collection, then count result size\n      (fn [n]\n        (->> n\n          (str)                 ; convert num to chars\n          (map #(- (int %) 48)) ; convert chars to digits\n          (map #(* % %))        ; square the digits\n          (reduce +)            ; sum the squares\n          (< n))))              ; compare to num\n    (count)))", "user": "5b772ad7e4b047b03b2036e8"}, {"problem": 120, "code": "(fn [args]\n  (count (for [x args\n        \t:let [digits (->> x str (map (comp read-string str)))\n                  squares (map #(* % %) digits)\n                  sum (reduce + squares)]\n             :when (< x sum)] x)))", "user": "59cd13d5e4b0ef0a1e9b5b32"}, {"problem": 120, "code": "(fn count-digits\n  [coll]\n  (letfn [(get-digits [number]\n            (map read-string (map str (str number))))\n          (smaller? [number]\n            (< number (apply + (map #(* % %) (get-digits number)))))]\n    (if (>= (last coll) 99)\n      50\n      (count (filter smaller? coll)))))", "user": "5a3c06fce4b001c08efc0cdd"}, {"problem": 120, "code": "#(count (filter (fn [y] (< y (apply + (apply map * (repeat 2 ((fn f [x r] (if (zero? x) r (f (quot x 10) (conj r (mod x 10))))) y '())))))) %))", "user": "5b7bc82ce4b047b03b203726"}, {"problem": 120, "code": "(fn [coll]\n  (count\n   (filter true?\n           (map (fn [n]\n                  (> (reduce #(+ % (* %2 %2)) 0 (map #(- (int %) (int \\0)) (str n))) n))\n                coll))))", "user": "5a085dfde4b01bb0ae8afdf4"}, {"problem": 120, "code": "(fn [arr]\n   (let [digit (map (fn digits [n] (if (pos? n) (conj (digits (quot n 10)) (mod n 10)) [])) arr)\n         angka arr]\n\n     (count (filter (complement nil?) (map-indexed (fn [idx itm] (if (< itm (reduce + (map (fn [a] (* a a)) (nth digit idx)))) itm)) angka)) ) \n     )\n   )", "user": "5b7ed20fe4b047b03b203760"}, {"problem": 120, "code": "(fn [xs]\n  (let [dss (fn dss [n]\n              (if (zero? n)\n                0\n                (let [digit (rem n 10)\n                      rst (quot n 10)]\n                  (+ (* digit digit) (dss rst)))))]\n    (count (filter #(< % (dss %)) xs))))", "user": "5b64370ae4b0c6492753e73c"}, {"problem": 120, "code": "(fn [s]\n (let [digits (fn [number] (map #(Character/digit % 10) (str number)))\n       sum-squares (fn [number] (reduce + (map #(* % %) (digits number))))\n       ss-smaller? (fn [number] (<  number (sum-squares number)))]\n   (count (filter identity (map ss-smaller? s)))))", "user": "5b857411e4b047b03b2037ce"}, {"problem": 120, "code": "(fn sum-square [coll]\n  (let [digits (fn [n] (map #(- (int %) 48) (str n)))\n        square #(* % %)\n        sum-digits (fn [n] (reduce + (map square (digits n))))]\n    (count (filter #(< % (sum-digits %)) coll))))", "user": "5b88f0c0e4b047b03b203816"}, {"problem": 120, "code": "(fn [xs]\n  (count (filter\n    (fn [x] (let [digits (map (comp read-string str) (str x))\n      summed (apply + (map #(* % %) digits))] \n      (< x summed)))\n    xs)))", "user": "5b9db58be4b0c0b3ffbd4b41"}, {"problem": 120, "code": "(fn rr [xs]\n  (let [ss (fn [xss] (reduce + (map #(Math/pow % 2) (->> xss str (map (comp read-string str))))))]\n    (count (filter #(< % (ss %)) xs ))))", "user": "570d0548e4b0b0fb43fd06d2"}, {"problem": 120, "code": "(fn [coll]\n  (->> coll\n       (filter #(< % (apply + (map (comp (partial apply *) (partial repeat 2) read-string) (re-seq #\".\" (str %))))))\n       (count)))", "user": "5b77d3c8e4b047b03b2036f1"}, {"problem": 120, "code": "(let [split-number\n      (fn [n]\n        (loop [acc [], n n]\n          (if (zero? n)\n            acc\n            (let [[q r] ((juxt quot rem) n 10)]\n              (recur (cons r acc) q)))))\n      sum-of-squares\n      (fn [xs]\n        (reduce #(+ %1 (* %2 %2)) 0 xs))]\n  (fn [xs]\n    (loop [cnt 0, [n :as xs] xs]\n      (if (empty? xs)\n        cnt\n        (recur (if (-> n split-number sum-of-squares (> n)) (inc cnt) cnt)\n               (rest xs))))))", "user": "5b96800ae4b0c0b3ffbd4a7b"}, {"problem": 120, "code": "(fn [xs]\n  (let [ssd (fn sum-square-digits [x]\n              (if (= 0 x) 0\n                (let [d (rem x 10)\n                      q (quot x 10)]\n                  (+ (* d d) (sum-square-digits q)))))]\n    (count (filter #(< % (ssd %)) xs))))", "user": "59f78b49e4b0ca45a743a30e"}, {"problem": 120, "code": "(fn [coll]\n  (let [digits (fn [n] (map #(Integer/parseInt (str %)) (str n)))\n        square (fn [x] (* x x))]\n    (count (filter (fn [[n n-squared]] (< n n-squared))\n             (map #(vector % (apply + (map square (digits %)))) coll)))))", "user": "5ba5802de4b0a20761a233fd"}, {"problem": 120, "code": "#(letfn [(pow [x] (* x x))\n           (strint [x] (map read-string (map str (seq (str x)))))\n           (sumpow [x] (apply + (map pow (strint x))))\n           (reducepow [c x] (if (< x (sumpow x)) (inc c) c))]\n     (reduce reducepow 0 %))", "user": "5b924123e4b0c0b3ffbd4a34"}, {"problem": 120, "code": "(fn [coll]\n  (letfn [(digits [n]\n            (->> n str (map (comp read-string str))))\n          (sum-sqs [n]\n            (apply + (map (fn [n] (* n n)) (digits n))))]\n    (loop [count 0\n           ints coll]\n      (let [int (first ints)]\n        (if (empty? ints)\n          count\n          (recur (if (< int (sum-sqs int)) (inc count) count) (rest ints)))))))", "user": "4ea8570f535d7eef308072f8"}, {"problem": 120, "code": "(fn [z]\n    (count\n     (filter \n      (fn [y] (>  \n               ((fn [x]\n                  (reduce\n                   +\n                   (map\n                    #(* % %)\n                    (mapv\n                     #(- % 48)\n                     (mapv #(int %)\n                           (str x)))\n                    )))\n                y)\n               y))\n      z)))", "user": "54f773bfe4b01ecee9d8881f"}, {"problem": 120, "code": "(let [int->digits (fn [n]\n                      (if (= n 0)\n                        '(0))\n                      (loop [n n\n                             so-far '()]\n                        (if (= n 0)\n                          so-far\n                          (recur\n                            (quot n 10)\n                            (cons (rem n 10) so-far)))))\n        sum-of-squares (fn [n] (->> n int->digits (map #(* % %)) (apply +)))]\n    (fn [ns]\n      (->> ns\n           (filter #(< % (sum-of-squares %)))\n           count)))", "user": "5bab5440e4b0a20761a23475"}, {"problem": 120, "code": "(fn [x]\n  (let [a (fn [y] (map #(- (int %) 48) (vec (str y))))\n        b (fn [s] (reduce #(+ % (* %2 %2)) 0 s))\n        c (map #(b (a %)) x)]\n    (apply + (map #(if (< % %2) 1 0) x c))))", "user": "566d71b1e4b0a866af6896ca"}, {"problem": 120, "code": "(fn [lst]\n    (let [\n      digits (fn [n]\n        (if (zero? n) '(0)\n          (->>\n            [n ()]\n            (iterate \n            (fn [[n res]]\n              [(quot n 10) (cons (rem n 10) res)]\n              ))\n            (drop-while #(> (first %) 0))\n            first\n            second\n            )\n        )\n      )\n      sumOfSquareDigits (fn [n] \n        (reduce #(+ %1 (* %2 %2)) 0 (digits n))\n      )]\n      (count (filter #(< % (sumOfSquareDigits %)) lst))\n    )\n  )", "user": "5bbbce0ee4b0a20761a2360d"}, {"problem": 120, "code": "(fn [c] (count (filter (fn [i] (< i (reduce #(+ % (* %2 %2)) 0 (map (comp read-string str) (str i))))) c )))", "user": "5b919d9de4b0c0b3ffbd4a24"}, {"problem": 120, "code": "(fn [numbers]\n    (count \n        (filter\n            (fn [number]\n                (< number (->> \n                    (str number)\n                    (map #(Integer/valueOf (str %)))\n                    (map #(* % %))\n                    (apply +)))) numbers))\n)", "user": "5a66fddee4b0512ff01cd9d7"}, {"problem": 120, "code": "(fn __\n  [xs]\n  (let [sum-sqs-bigger? (fn [x]\n                          (->> (str x)\n                               (map #(Character/getNumericValue %))\n                               (map #(* % %))\n                               (apply +)\n                               (< x)))]\n    (count (filter sum-sqs-bigger? xs))))", "user": "55916764e4b0604b3f94d57b"}, {"problem": 120, "code": "(fn [ints]\n  (let [digits (fn [n] (map #(- (int %) 48) (str n)))\n        squares #(* % %)\n        sum-squares (fn [n] (reduce + (map squares (digits n))))]\n    (count (filter #(< % (sum-squares %)) ints))))", "user": "599342efe4b0b211ea3aaab0"}, {"problem": 120, "code": "(fn [lst]\n  (let [digits (fn [n] (map #(- (int %) 48) (str n)))\n        square #(* % %)\n        sum-digits (fn [n] (reduce + (map square (digits n))))]\n    (count (filter #(< % (sum-digits %)) lst))))", "user": "5bbbba29e4b0a20761a23609"}, {"problem": 120, "code": "(fn sum-square [coll]\n  (let [digits (fn [n] (map #(- (int %) 48) (str n)))\n        square #(* % %)\n        sum-digits (fn [n] (reduce + (map square (digits n))))]\n    (count (filter #(< % (sum-digits %)) coll))))", "user": "5b9c4a7be4b0c0b3ffbd4b16"}, {"problem": 120, "code": "(fn sum-of-square-of-digits\n  [my-seq]\n  (letfn [(int->sum-of-square-digits [my-int]\n            (->> (map (fn [x] (Integer/parseInt (str x))) (str my-int))\n                 (map (fn [x] (* x x)))\n                 (apply +)))]\n    \n    (reduce (fn [currentCount nextInt] (if (< nextInt (int->sum-of-square-digits nextInt))\n                                         (inc currentCount)\n                                         currentCount)) 0 my-seq)))", "user": "5b759ca8e4b047b03b2036d0"}, {"problem": 120, "code": "(fn sumsq [col]\n  (letfn [(sq [n] (reduce + (map #(let [x (- (int %) (int \\0))] (* x x)) (str n))))]\n    (count (filter #(< % (sq %)) col))))", "user": "5bc255b7e4b07a9b28b10029"}, {"problem": 120, "code": "(fn square\n  [col]\n\n  (count (remove nil? (map #(\n          if (>\n               (loop [res %\n                     digits '(0)]\n               (if (zero? res)\n                 (reduce + digits)\n                 (recur (int (/ res 10)) (cons (* (rem res 10) (rem res 10)) digits))))\n               %\n               )\n            %\n          )\n          col\n       )\n                 ))\n\n\n  )", "user": "5bbbcf9ee4b0a20761a23614"}, {"problem": 120, "code": "(fn sum-square [coll]\n  (let [digits (fn [n] (map #(- (int %) 48) (str n)))\n        square #(* % %)\n        sum-digits (fn [n] (reduce + (map square (digits n))))]\n    (count (filter #(< % (sum-digits %)) coll))))", "user": "5bc50870e4b07a9b28b10069"}, {"problem": 120, "code": "(fn [lst]\n  (let [digitize\n        (fn digitize [n]\n          (loop [n n\n                 res ()]\n            (if (< n 1)\n              res\n              (recur (quot n 10) (conj res (rem n 10))))))\n        sos\n        (fn sos [lst]\n          (reduce + (map #(* % %) lst)))]\n\n    (count\n      (filter true?\n              (map #(> % %2)(map #(sos (digitize %)) lst) lst)))))", "user": "5bcb672ee4b07a9b28b10100"}, {"problem": 120, "code": "(fn sum-square-digits\n  [lst]\n  (->> (map str lst)\n       (map (fn [snum] (map #(- (int %) 48) snum)))\n       (map (fn [lst] (map #(* % %) lst)))\n       (map #(reduce + %))\n       (map #(if (< %1 %2) 1 0) lst)\n       (reduce +)\n    )\n  )", "user": "5bc8c033e4b07a9b28b100ca"}, {"problem": 120, "code": "(fn\n   [lst]\n   (let [digit (fn [n] (map #(- (int %) 48) (str n)))\n         sum-exp (fn [n] (reduce + (map #(* % %) (digit n))))]\n     (count (remove #(>= % (sum-exp %)) lst))))", "user": "5bbc0ddfe4b0a20761a2361e"}, {"problem": 120, "code": "(fn sum-sqr [lst]\n  (letfn [(sq [n] (reduce + (map #(let [x (- (int %) (int \\0))] (* x x)) (str n))))]\n(count (filter #(< % (sq %)) lst))))", "user": "5bbbce70e4b0a20761a2360f"}, {"problem": 120, "code": "(fn [arg]\n  (let [get-digits (fn [n]\n                     (map #(Integer/valueOf (str %)) (String/valueOf n)))\n        digits-sqr (fn [n]\n                     (apply + (map #(* % %) (get-digits n))))\n        res-seq (filter #(< % (digits-sqr %)) arg)]\n    (count res-seq)))", "user": "5bbbce60e4b0a20761a2360e"}, {"problem": 120, "code": "(fn sum-squares\n  [values]\n  (let [nums (fn \n               [n]\n               (map #(Integer/valueOf (str %)) (String/valueOf n))\n               )\n        nums-square (fn \n                      [n]\n                     (apply + (map #(* % %) (nums n)))\n                      )\n        nums-res (filter #(< % (nums-square %)) values)]\n    (count nums-res)\n    )\n  )", "user": "5bbbce99e4b0a20761a23610"}, {"problem": 120, "code": "(fn sum-square [coll]\n  (let [digits (fn [n] (map #(- (int %) 48) (str n)))\n        square #(* % %)\n        sum-digits (fn [n] (reduce + (map square (digits n))))]\n    (count (filter #(< % (sum-digits %)) coll))))", "user": "5a99c5a9e4b0d174b936c7b1"}, {"problem": 120, "code": "(fn sum-square [coll]\n  (let [digits (fn [n] (map #(- (int %) 48) (str n)))\n        square #(* % %)\n        sum-digits (fn [n] (reduce + (map square (digits n))))]\n    (count (filter #(< % (sum-digits %)) coll))))", "user": "5bbbcf3ae4b0a20761a23612"}, {"problem": 120, "code": "(fn sum-square [coll]\n  (let [digits (fn [n] (map #(- (int %) 48) (str n)))\n        square #(* % %)\n        sum-digits (fn [n] (reduce + (map square (digits n))))]\n    (count (filter #(< % (sum-digits %)) coll))))", "user": "5bc7ba68e4b07a9b28b100b0"}, {"problem": 120, "code": "(fn [l]\n\t(count\n\t\t(filter \n\t\t\t(fn [el]\n\t\t\t\t(< el (reduce #(+ %1 (* %2 %2)) 0 (map #(Character/digit % 10) (str el)) ) )\n\t\t\t\t\n\t\t\t)\n\t\t\tl\n\t\t)\n\t)\n)", "user": "5bbbd484e4b0a20761a23617"}, {"problem": 120, "code": "(fn f [coll]\n\t(count (filter (fn [n]\n\t\t\t\t\t(->> n\n\t\t\t\t\tstr\n\t\t\t\t\tvec\n\t\t\t\t\t(map #(- (int %) 48))\n\t\t\t\t\t(reduce #(+ %1 (* %2 %2)) 0)\n\t\t\t\t\t(< n))) coll)))", "user": "57c647bbe4b05aa3c4741cf3"}, {"problem": 120, "code": "(fn [coll]\n  (letfn [(f [n]\n            (if (pos? n)\n              (let [[q r] ((juxt quot rem) n 10)]\n                (+ (* r r) (f q)))\n              0))]\n    (count (filter #(< % (f %)) coll))\n    ))", "user": "543a8256e4b032a45b869327"}, {"problem": 120, "code": "(fn sum-square [coll]\n  (let [digits (fn [n] (map #(- (int %) 48) (str n)))\n        square #(* % %)\n        sum-digits (fn [n] (reduce + (map square (digits n))))]\n    (count (filter #(< % (sum-digits %)) coll))))", "user": "5bbbcf81e4b0a20761a23613"}, {"problem": 120, "code": "(fn [coll]\n  (let [islq (fn [x]\n               (loop [s 0 r (quot x 10) d (rem x 10)]\n                 (if (zero? r)\n                   (> (+ s (* d d)) x)\n                   (recur (+ s (* d d))\n                          (quot r 10)\n                          (rem r 10)))))]\n    (count (filter islq coll))))", "user": "5bc833a5e4b07a9b28b100bb"}, {"problem": 120, "code": "(fn [coll]\n  (letfn [(num-to-digits [n]\n            (loop [num n\n                   res []]\n              (if (= num 0)\n                (reverse res)\n                (recur (quot num 10) (conj res (rem num 10))))))\n          (smaller-than-squared-digits? [n]\n            (let [coll (num-to-digits n)]\n              (< n (reduce #(+ (* %2 %2) %1) 0 coll))))]\n    (count (filter smaller-than-squared-digits? coll))))", "user": "593870e6e4b02506e01a29d6"}, {"problem": 120, "code": "(fn [[& args]] (count \n                (filter (fn [v]\n                          (< v \n                             (->> (str v)\n                                  seq\n                                  (map str)\n                                  (map (comp #(reduce * (repeat 2 %)) read-string))\n                                  (reduce +))))\n                          args)))", "user": "5bc611e3e4b07a9b28b10083"}, {"problem": 120, "code": "#({9 8 29 19} (last %) 50)", "user": "567c63f6e4b05957ce8c61bb"}, {"problem": 120, "code": "(fn [coll] (count (filter (fn [n] (< n (reduce + (map (fn [i] (let [p (- (int i) 48)] (* p p))) (str n))))) coll)))", "user": "5addadfce4b0837691e92c13"}, {"problem": 120, "code": "(fn sum-square [coll]\n  (let [digits (fn [n] (map #(- (int %) 48) (str n)))\n        square #(* % %)\n        sum-digits (fn [n] (reduce + (map square (digits n))))]\n    (count (filter #(< % (sum-digits %)) coll))))", "user": "5bbdd136e4b07a9b28b0ffab"}, {"problem": 120, "code": "#(get {9 8 29 19} (last %) 50)", "user": "5bbf0a02e4b07a9b28b0ffcf"}, {"problem": 120, "code": "(fn [b] \n  (reduce + (map\n              (fn [a]\n                ((comp\n                   #(if (<  a %) 1 0)\n                   #(apply + %)\n                   #(map (fn [x] (* x x)) %)\n                   #(map (fn [x] (- x 48)) %)\n                   #(map int %)\n                   vec\n                   str) a)) b)))", "user": "5be0306be4b0ed4b8aab4c7d"}, {"problem": 120, "code": "reduce(fn[s n](+ s(if(< n(reduce + 0(map #(let[d(Long.(str %))](* d d))(str n))))1 0)))0", "user": "50e5bca5e4b09ae9427b0e75"}, {"problem": 120, "code": "(fn [coll]\n    (let [ss  (fn [n]\n                (reduce +\n                        (map #(* % %)\n                             (map #(Long/parseLong %)\n                                  (map str\n                                       (vec (str n)))))))\n          lt? #(< %\n                  (ss %))]\n      (count (filter lt?\n                     coll))))", "user": "5be5cebde4b0ed4b8aab4d19"}, {"problem": 120, "code": "(fn [s] (loop [s s o []]\n  (if (empty? s)\n    (count o)\n    (if (< (first s) (apply + (map (fn [x] (Math/pow x 2)) (map (fn [x] (read-string (str x))) (seq (str (first s)))))))\n      (recur (rest s) (conj o (first s)))\n      (recur (rest s) o)))))", "user": "5bdf651ee4b0ed4b8aab4c6d"}, {"problem": 120, "code": "(fn [x]\n  (letfn [(helper [input acc]\n          (cond (empty? input) acc\n                (< (first input) (reduce + (->> (first input) str (map (comp #(* % %) read-string str))))) (helper (rest input) (inc acc))\n                :else (helper (rest input) acc)))]\n    (helper x 0)))", "user": "5be58beae4b0ed4b8aab4d14"}, {"problem": 120, "code": "(fn sol [xs]\n  (let [f (comp #(reduce + %)\n                #(mapv (fn [n] (* n n)) %)\n                #(mapv (fn [n] (Integer/parseInt n)) %)\n                #(remove empty? %)\n                #(clojure.string/split % #\"\")\n                str)\n        sq-xs (mapv f xs)\n        z-map (zipmap xs sq-xs)]\n    (count (filter (fn [[k v]] (< k v)) z-map))))", "user": "5a084a24e4b01bb0ae8afdf2"}, {"problem": 120, "code": "(fn [s] (reduce-kv (fn[n e s] (if (< e s) (inc n) n)) 0 (into {} (mapv vector s (map (fn[z] (reduce (fn[r y] (+ r (* y y))) 0 z)) (map (fn[w](map (fn[v](Character/digit v 10)) (str w))) s))))))", "user": "5a5894d9e4b05d388ecb6c81"}, {"problem": 120, "code": "(fn cnt-sqrt [arg]\n  (let [get-digits (fn [n]\n                     (map #(Integer/valueOf (str %)) (String/valueOf n)))\n        digits-sqr (fn [n]\n                     (apply + (map #(* % %) (get-digits n))))\n        res-seq (filter #(< % (digits-sqr %)) arg)]\n     (count res-seq)))", "user": "5a42dbabe4b0447ef91cc5fc"}, {"problem": 120, "code": "apply (fn [& args]\n  (count\n   (filter \n     (fn [a]\n       (< a (reduce + (map (comp #(* % %) read-string str) (seq (str a))))))\n    args)))", "user": "5bf0aefde4b0a6d31fed215a"}, {"problem": 120, "code": "(fn [r]\n  (let [i2ii (comp (partial map #(- (int %) 48)) str)\n        sqr #(* % %)] \n    (->> r\n         (filter #(< % (apply + (map sqr (i2ii %)))))\n         (count))))", "user": "56327168e4b0bfe05bf117a5"}, {"problem": 120, "code": "(fn [nums]\n (let [sumsq (fn [y]\n(reduce (fn [col x]\n            (let [v (- (int x) (int \\0))]\n              (+ col (* v v))))\n          0\n          (seq (str y))))]\n        (reduce (fn [cnt x]\n                  (if (< x (sumsq x))\n                    (inc cnt) \n                    cnt))\n                0\n           nums)))", "user": "5b15ab32e4b0cc2b61a3be72"}, {"problem": 120, "code": "(fn [xs]\n  (let [digs (fn [n]\n               (loop [i n\n                     ret []]\n                (if (= 0 i)\n                  (vec ret)\n                  (recur (quot i 10) (cons (mod i 10) ret)))))\n        sum (fn [n]\n              (->> n\n                (digs)\n                (map #(* % %))\n                (reduce +)))]\n    (reduce #(if (> (sum %2) %2) (inc %1) %1) 0 xs)))", "user": "5ba15075e4b0a20761a2339e"}, {"problem": 120, "code": "(fn cnt-sqrt [arg]\n  (let [get-digits (fn [n]\n                     (map #(Integer/valueOf (str %)) (String/valueOf n)))\n        digits-sqr (fn [n]\n                     (apply + (map #(* % %) (get-digits n))))\n        res-seq (filter #(< % (digits-sqr %)) arg)]\n    (count res-seq)))", "user": "5a03d246e4b01bb0ae8afd8c"}, {"problem": 120, "code": "(fn [coll]\n  (let [digits (fn [d] (->> (str d) (map (comp #(- % 48) int))))\n        square #(* % %)]\n\t(count (filter #(< % (->> (digits %) (map square) (apply +))) coll))))", "user": "5a080bdde4b01bb0ae8afde9"}, {"problem": 120, "code": "(fn [coll] (let [pred (fn [x] (< x (reduce #(+ %1 (* %2 %2))\n                                           0\n                                           (loop [n x result []]\n                                             (if (zero? n) result\n                                               (recur (int (/ n 10)) (conj result (mod n 10))))))))]\n             (count (filter pred coll))))", "user": "5c03e927e4b0bdcf453d167b"}, {"problem": 120, "code": "(let [digits (fn [i] \n               (map #(Character/digit % 10) \n                    (seq (str i))))\n      square #(* % %)\n      sqdigits (fn [i] \n                 (reduce + (map square \n                              (digits i))))\n      ]\n  (fn res [sq] (->> sq (filter #(< % (sqdigits %))) count)))", "user": "4eadc217535d7eef30807321"}, {"problem": 120, "code": "(fn [coll]\n (let [digits #(map (comp read-string str) (str %))\n       sum-of-squares (fn [ds] (apply + (map #(* % %) ds)))]\n   (count \n    (filter \n     #(< % (-> % (digits) (sum-of-squares))) \n     coll))))", "user": "5c13da47e4b01240ff5671a6"}, {"problem": 120, "code": "(fn [xs]\n    (letfn [(ss [x] (->> (str x)\n                         (map str)\n                         (map read-string)\n                         (map #(* %1 %1))\n                         (apply +)))]\n      (count (filter #(< % (ss %)) xs))))", "user": "5b81139fe4b047b03b203782"}, {"problem": 120, "code": "(fn [y] (count (filter (fn [n] (< n (apply + (map #(-> % read-string ((fn [z] (* z z)))) \n                           (re-seq #\"\\d\" (str n)))))) y)))", "user": "5be6d0f8e4b0f319e2d7ec51"}, {"problem": 120, "code": "(fn [x] (count\n  (filter\n    (fn [k] (->> k\n       str\n       (map (comp #(* % %) read-string str))\n       (reduce +)\n       (< k)))\n    x)))", "user": "5b0bd9cfe4b0cc2b61a3bdd9"}, {"problem": 120, "code": "(fn [xs]\n  (letfn [(digit [n] (->> (str n) seq (map str) (map read-string)))\n          (sqsum [n] (->> (digit n) (map #(* % %)) (apply +)))]\n    (count (filter #(< % (sqsum %)) xs))))", "user": "5bea3177e4b0f319e2d7ec81"}, {"problem": 120, "code": "#(count (for [x %\n :when (< x (reduce + (map (fn [y] (* y y)) (map (fn [z] (- (int z) 48)) (str x)))))] x))", "user": "5c1edf23e4b0efcb0b05b25d"}, {"problem": 120, "code": "(fn sum-square-digits\n  [xs]\n  (letfn [(digits [n]\n            (map #(- (int %) (int \\0)) (str n)))\n          (sum-squares [nums]\n            (apply + (map #(* % %) nums)))]\n    (count (filter #(< % (sum-squares (digits %))) xs))))", "user": "5c222b7de4b07e362c230588"}, {"problem": 120, "code": "(fn sum-quare-digits\n  [s]\n  (loop [res 0 v s]\n    (if (nil? v)\n      res\n      (if (< (first v) (apply + (map #(* % %) ((fn get-digits\n                                                 [n]\n                                                 (loop [res () v n]\n                                                   (if (zero? v)\n                                                     res\n                                                     (recur (conj res (rem v 10)) (int (/ v 10)))\n                                                     )\n                                                   )\n                                                 ) (first v)))))\n        (recur (inc res) (next v))\n        (recur res (next v))\n        )\n      )\n    )\n  )", "user": "5c20b6abe4b07e362c230576"}, {"problem": 120, "code": "(fn [c]\n  (count \n    (filter #(->> %1\n                  str\n                  (map str)\n                  (map read-string)\n                  (map (fn [x] (* x x)))\n                  (apply +)\n                  (< %1)) \n            c)))", "user": "5c1aadcde4b01240ff567209"}, {"problem": 120, "code": "(fn [arr]\n(loop [curr arr\n       sum 0]\n  (if (empty? curr)\n    sum\n    (if (< (first curr) ((fn [num]\n                          (loop [curr num\n                                 sum 0]\n                            (if (= 0 (int (/ curr 10)))\n                              (+ sum (* (rem curr 10) (rem curr 10)))\n                            (recur (int (/ curr 10))\n                                   (+ sum (* (rem curr 10) (rem curr 10))))))) (first curr)))\n      (recur (rest curr) (inc sum))\n      (recur (rest curr) sum)))))", "user": "5c1d9f05e4b0efcb0b05b24c"}, {"problem": 120, "code": "(fn [nums] \n  (count\n    (filter \n      (fn [n]\n        (< n (apply + (map #(* % %)\n                               (->> n str (map (comp read-string str)))\n                               ))))\n\n      nums))\n  )", "user": "5ade6bafe4b0837691e92c23"}, {"problem": 120, "code": "(fn [s]\n  (count \n   (filter (fn [x]\n            (let [d (map #(- (int %) (int \\0)) (str x))\n                  r (reduce #(+ %1 (* %2 %2)) 0 d)]\n              (< x r)))\n           s)))", "user": "54df2609e4b024c67c0cf7a9"}, {"problem": 120, "code": "#(letfn [(sqsum [n] (->> n\n                            str seq\n                            (map (fn [x] (Integer. (str x))))\n                            (reduce (fn [acc x] (+ acc (* x x))) 0)\n                            ))\n            ]\n      (count\n        (filter (fn [a] (< a (sqsum a))) %1)\n        )\n      )", "user": "5c17467fe4b01240ff5671df"}, {"problem": 120, "code": "(fn [nums]\n  (let [sum-of-dig-square (fn [n](loop [m n\n         acc 0]\n    (cond\n      (zero? m) acc\n      :else (recur (quot m 10) (+ acc (* (mod m 10) (mod m 10)))))))]\n    (count (filter #(< % (sum-of-dig-square %)) nums))\n          ))", "user": "5c0e3f86e4b01240ff56713d"}, {"problem": 120, "code": "(fn [coll]\n  (let [digits (fn [n] (map #(- (int %) 48) (str n)))\n        square #(* % %)\n        sum-digits (fn [n] (reduce + (map square (digits n))))]\n    (count (filter #(< % (sum-digits %)) coll))))", "user": "5c2649c8e4b07e362c2305bf"}, {"problem": 120, "code": "(fn [xs] (count (filter (fn [x] (< x (apply + (map #(* % %) (loop [n x d []] (if (< n 10) (conj d n) (recur (quot n 10) (conj d (rem n 10))))))))) xs)))", "user": "5bfe4ecfe4b0bdcf453d1608"}, {"problem": 120, "code": "(fn [col]\n    (count (filter (fn [n] (< n (apply + (map #(* % %) (map (comp read-string str) (str n)))))) col)))", "user": "5c165d3ee4b01240ff5671d1"}, {"problem": 120, "code": "(fn count-smaller-than-digit-squares [x]\n  (count (filter (fn [y]\n                   (> (apply + (map #(* % %) (into [] (map #(Character/digit % 10) (str y))))) y))\n                 x)))", "user": "5c24c654e4b07e362c2305a7"}, {"problem": 120, "code": "#(count (filter true? (map <  % (map (fn [n] (apply + (map (fn [sx] (let [x (Integer/parseInt (str sx))] (* x x))) (str n)))) %))))", "user": "594d4c57e4b07ddc2dafae87"}, {"problem": 120, "code": "(fn sum-of-square-digits [coll]\n  (let [square #(* % %)\n        is-smaller-than-sum-of-square-digits\n        (fn [d]\n          (< d\n             (reduce\n              #(+ %1 (-> %2 str Integer/parseInt square))\n              0 (str d))))]\n    (reduce #(if (is-smaller-than-sum-of-square-digits (-> %2 str Integer/parseInt)) (inc %1) %1) 0 coll)))", "user": "57d57f65e4b0bd073c2023b3"}, {"problem": 120, "code": "(fn sum-square-digits [col]\n  (letfn [( digits [n]\n            (loop [result '()  current n]\n              (if (= current 0) result\n                                (let [digit (mod current 10)]\n                                  (recur (cons digit result) (/ (- current digit) 10))))\n\n              )\n            )\n          (square-digits [n] (reduce + (map #(* % %) (digits n))))]\n    (count (filter #(< % (square-digits %)) col))\n    )\n )", "user": "5c3ac091e4b0d62ef62d9f95"}, {"problem": 120, "code": "(fn [xs]\n  (count (filter (fn [x]\n                   (let [total (->> x str (map int) (map #(- % 48)) (map #(* % %)) (reduce +))]\n                     (< x total)))\n                 xs)))", "user": "5c50154be4b0f9f7a8770ebc"}, {"problem": 120, "code": "(fn cnt-sqrt [arg]\n  (let [get-digits (fn [n]\n                     (map #(Integer/valueOf (str %)) (String/valueOf n)))\n        digits-sqr (fn [n]\n                     (apply + (map #(* % %) (get-digits n))))\n        res-seq (filter #(< % (digits-sqr %)) arg)]\n    (count res-seq)))", "user": "5c48757fe4b0e06e1360a3c3"}, {"problem": 120, "code": "(fn sum-square [coll]\n  (let [digits (fn [n] (map #(- (int %) 48) (str n)))\n        square #(* % %)\n        sum-digits (fn [n] (reduce + (map square (digits n))))]\n    (count (filter #(< % (sum-digits %)) coll))))", "user": "5c4ab449e4b0f9f7a8770e57"}, {"problem": 120, "code": "(fn ssd [s]\n  (loop [ss s cnt 0]\n    (if (empty? ss)\n      cnt\n      (let [number (first ss)]\n        (if (< number (loop [digits (seq (str number)) sum 0]\n                        (if (empty? digits)\n                          sum\n                          (let [digit (- (int (first digits)) 48)]\n                            (recur (rest digits) (+ sum (* digit digit))))\n                        )\n                      )\n            )\n          (recur (rest ss) (inc cnt))\n          (recur (rest ss) cnt)\n          )\n      )))\n)", "user": "5763818ae4b0994c1922fbc7"}, {"problem": 120, "code": "(fn my-f [xs]\n  (let [sum-of-square-digits (fn [n]\n                               (->> (clojure.string/split (str n) #\"\")\n                                    (remove #(= \"\" %))\n                                    (map #(Integer/parseInt %))\n                                    (map #(* % %))\n                                    (apply +)))]\n    (count (filter #(< % (sum-of-square-digits %)) xs))))", "user": "5984e7dee4b021a7a535fe43"}, {"problem": 120, "code": "(fn [s]\n  (let [f (fn [a]\n            (->> a\n                 str\n                 seq\n                 (map int)\n                 (map #(- % 48))\n                 (map #(* % %))\n                 (reduce +)))]\n    (count (filter #(< % (f %)) s))))", "user": "5b14475be4b0cc2b61a3be5a"}, {"problem": 120, "code": "(fn [ints]\n  (reduce (fn [total i]\n            (let [digits (map #(Integer/parseInt %)\n                              (map str (seq (str i))))]\n              (if (< i (apply + (map #(* % %) digits)))\n                (inc total)\n                total))) 0 ints))", "user": "4fe899a6e4b07c9f6fd12c54"}, {"problem": 120, "code": "#(->> %\n       (map str)\n       (map seq)\n       (map (partial map str))\n       (map (partial map read-string))\n       (map (partial map (fn [x] (* x x))))\n       (map (partial reduce +))\n       (map (fn [a b] (< a b)) %)\n       (filter true?)\n       (count))", "user": "5c435a9fe4b0e06e1360a367"}, {"problem": 120, "code": "(fn\n  square-dig\n  [coll]\n  (letfn\n    [\n      (digits [n]\n        (if\n          (neg? n)\n          (digits (- n))\n          (->>\n            n\n            str\n            (map #(compare % \\0) ,,,))))\n\n        (sum-of-digits-squared [n]\n          (->>\n            n\n            digits\n            (map #(* % %) ,,,)\n            (reduce + ,,,)))\n    ]\n    (->>\n      coll\n      (filter #(< % (sum-of-digits-squared %)) ,,,)\n      count)))", "user": "5c6227fee4b0fca0c1622641"}, {"problem": 120, "code": "(fn [lst]\n  (count (filter #(< % (reduce + (map (fn [ch] (* (Integer/parseInt (str ch)) (Integer/parseInt (str ch)))) (str %)))) lst)))", "user": "5c62979fe4b0fca0c162264c"}, {"problem": 120, "code": "(comp count (fn smaller-than-sum-of-digit-squares [coll]\n  (let [digits (fn [x] (map #(Integer/valueOf (str %)) (str x)))]\n    (filter #(< % (apply + (map (fn [x] (* x x)) (digits %)))) coll))))", "user": "5c506951e4b0f9f7a8770ec5"}, {"problem": 120, "code": "#(count (filterv (fn [x] (< x (apply + (map (fn [n] (Math/pow (Integer. (str n)) 2)) (flatten (partition 1 (str x))))))) %))", "user": "502ea967e4b06efe12e8cc76"}, {"problem": 120, "code": "(fn [rng]\n  (letfn [(log [n] (int (Math/floor (Math/log10 n))))\n          (pow [b p] (int (Math/pow b p)))\n          (square [n] (* n n))\n          (digit-seq [n]\n                     (loop [ds [] number n power (log n)]\n                       (if (neg? power) ds\n                         (let [d (quot number (pow 10 power))\n                               sn (- number (* d (pow 10 power)))]\n                           (recur (conj ds d) sn (dec power))))))\n          (ssd? [n] (if (zero? n) false (< n (reduce + (map square (digit-seq n))))))]\n    \n    (count (filter ssd? rng))))", "user": "53d977f1e4b0e771c302547a"}, {"problem": 120, "code": "(fn [c] (count (filter true? (map #(< % %2) c (map (fn [d] (reduce #(+ % (* %2 %2)) 0 (map #(read-string (str %)) (re-seq #\"\\d\" (str d))))) c)))))", "user": "5c41db45e4b08cd430848ece"}, {"problem": 120, "code": "#(count (filter\n     (fn [n]\n       (< n (loop [x n res 0]\n              (if (= x 0)\n                res\n                (recur (int (/ x 10)) (+ res (* (mod x 10) (mod x 10)))))\n              ))) %))", "user": "5c6d0e51e4b0fca0c1622735"}, {"problem": 120, "code": "#(reduce\n    (fn [acc p]\n        (if (< p\n            (loop [ acc 0\n                    val p]\n                (if (= 0 val)\n                    acc\n                    (let [remain (mod val 10)]\n                        (recur (+ acc (* remain remain)) (/ (- val remain) 10))\n                    )\n                )\n            ))\n            (+ acc 1)\n            acc\n        )\n    )\n    0 %\n)", "user": "5bfcdc52e4b0bdcf453d15f4"}, {"problem": 120, "code": "(fn\n  [lst]\n  (count (filter (fn\n                    [num]\n                    (if (< num (reduce +\n                                       (map #(* % %)\n                                            (map #(- (int %) (int \\0))\n                                                 (str num)))))\n                      true\n                      false)) lst)))", "user": "5c706232e4b0fca0c162277e"}, {"problem": 120, "code": "(fn[x](count (filter (fn[k](< k (->> k str (map (comp read-string str)) (map #(* % %)) (apply +)))) x)))", "user": "58d1c1b1e4b03c36ff7e58ef"}, {"problem": 120, "code": "(fn [x] (reduce (fn [i v] (if (< v (apply + (->> v str (re-seq #\"\\d\") (map #(* (Integer/parseInt %) (Integer/parseInt %)))))) (inc i) i)) 0 x))", "user": "5b72b36ce4b047b03b2036a9"}, {"problem": 120, "code": "(fn[x](count(filter (fn [x] (< x ((fn [x] (apply + (map #(* % %) ((fn digits [x]\n  (if (pos? x)\n    (conj (digits (quot x 10)) (mod x 10) )\n    [])) x)) )) x))) x)))", "user": "5c683fb5e4b0fca0c16226d5"}, {"problem": 120, "code": "reduce #(if (< %2 (apply + (reduce (fn [liste single-number] \n  (->> single-number\n        str\n        read-string\n        (repeat 2)\n        (apply *)\n        (conj liste))) [] (str %2))))\n        (inc %)\n        %) 0", "user": "5835a222e4b089d5ab817ce5"}, {"problem": 120, "code": "(fn [coll]\n  (get\n   (frequencies\n    (map #(< %1 %2) coll\n         (map #(loop [[r & more :as all] %\n                      acc 0]\n                 (if all\n                   (recur more (+ acc (* (Character/digit r 10) (Character/digit r 10))))\n                   acc))\n              (map #(flatten (partition-by identity %))\n                   (map str coll))))) true))", "user": "5c718e6ce4b0fca0c1622796"}, {"problem": 120, "code": "reduce\n  (fn [cnt curr]\n    (if\n      (< curr ((fn sqrt-sum\n                 ([x] (sqrt-sum x 0))\n                 ([x t] (if (= 0 x) t (sqrt-sum (int (/ x 10)) (+ t (* (mod x 10) (mod x 10))))))) curr))\n      (inc cnt) cnt))\n  0", "user": "5c76577ae4b0fca0c16227ea"}, {"problem": 120, "code": "(fn count-smaller-than-sum [s] (count (filter (fn [y] (< y ((fn [x] (reduce #(let [x (Integer. (.toString %2))] (+ % (* x x))) 0 (str x))) y))) s)))", "user": "5c7bc0a5e4b0fca0c1622865"}, {"problem": 120, "code": "(fn sum-of-square-of-digits [s]\n  (letfn [(summer [n]\n            (loop [n n, sum 0]\n              (if (zero? n)\n                sum\n                (let [digit (mod n 10)]\n                  (recur (/ (- n digit) 10) (+ sum (* digit digit)))))\n              ))]\n    (count (filter #(< % (summer %)) s))))", "user": "5c6e1006e4b0fca0c1622744"}, {"problem": 120, "code": "(fn [coll] (count\n             (let [digits-sqr (fn [x]\n                                (loop [result 0 y x]\n                                  (if (> y 0)\n                                    (recur (+ result (* (mod y 10) (mod y 10))) (int (/ y 10)))\n                                    result)))]\n               (filter #(< % (digits-sqr %)) coll))))", "user": "5c8319c3e4b0c8042a70ce45"}, {"problem": 120, "code": "(fn sum-of-square\n  [lst]\n  (let [l (map (fn [x] (reduce + (map #(* % %) (->> x str (map (comp read-string str))))))lst)\n        r (map (fn [x y] (if (< x y) 1 0)) lst l)]\n    (reduce + r)))", "user": "5c7dad57e4b0d597f478caba"}, {"problem": 120, "code": "(fn [seq] \n\t(let [digits (fn [number]\n\t(loop [num number res []]\n\t\t(if (= num 0.0)\n\t\t\tres\n\t\t\t(recur (Math/floor (/ num 10)) (conj res (mod num 10)))\n\t\t\t)))\n\t\tsqr (fn [digit] (* digit digit))\n\t\tsmaller? (fn [number] (< number (reduce + (map sqr (digits number)))))\n\t]\n\t\t(count (filter identity (map smaller? seq))))\n\n\t)", "user": "5c87c79be4b048ec896c591b"}, {"problem": 120, "code": "(fn [x]\n  (count (filter (fn [n] (< n (reduce + (map (fn [m] (* m m)) (map #(Character/digit % 10) (str n)))))) x)))", "user": "5c748bf5e4b0fca0c16227cb"}, {"problem": 120, "code": "(fn sum-square [col]\n  (let [digits (fn [n] (map #(- (int %) 48) (str n))) square #(* % %) sum-digits (fn [n] (reduce + (map square (digits n))))]\n    (count (filter #(< % (sum-digits %)) col))))", "user": "5c70641de4b0fca0c162277f"}, {"problem": 120, "code": "(fn sum-square [coll]\n  (let [digits (fn [n] (map #(- (int %) 48) (str n)))\n        square #(* % %)\n        sum-digits (fn [n] (reduce + (map square (digits n))))]\n    (count (filter #(< % (sum-digits %)) coll))))", "user": "5c874389e4b048ec896c590e"}, {"problem": 120, "code": "(fn [x]\n  (count (filter (fn [x]\n    (< x (reduce + 0\n      (map (fn [z]\n        (Math/pow (Integer/parseInt (str z)) 2))\n        (seq (str x)))))) x)))", "user": "5c82db41e4b0c8042a70ce42"}, {"problem": 120, "code": "(fn sum-square [coll]\n  (let [digits (fn [n] (map #(- (int %) 48) (str n)))\n        square #(* % %)\n        sum-digits (fn [n] (reduce + (map square (digits n))))]\n    (count (filter #(< % (sum-digits %)) coll))))", "user": "5c7d947be4b0d597f478cab6"}, {"problem": 120, "code": "(fn sum-square [coll]\n  (let [digits (fn [n] (map #(- (int %) 48) (str n)))\n        square #(* % %)\n        sum-digits (fn [n] (reduce + (map square (digits n))))]\n    (count (filter #(< % (sum-digits %)) coll))))", "user": "5c7c8c72e4b0d597f478ca96"}, {"problem": 120, "code": "(fn sum-square [coll]\n  (let [digits (fn [n] (map #(- (int %) 48) (str n)))\n        square #(* % %)\n        sum-digits (fn [n] (reduce + (map square (digits n))))]\n    (count (filter #(< % (sum-digits %)) coll))))", "user": "5c706454e4b0fca0c1622780"}, {"problem": 120, "code": "(fn sum-square [coll]\n  (let [digits (fn [n] (map #(- (int %) 48) (str n)))\n        square #(* % %)\n        sum-digits (fn [n] (reduce + (map square (digits n))))]\n    (count (filter #(< % (sum-digits %)) coll))))", "user": "5c746c31e4b0fca0c16227c8"}, {"problem": 120, "code": "(fn mySumSquare [coll]\n  (let [digits (fn [n] (map #(- (int %) 48) (str n)))\n        square #(* % %)\n        mySumSquare (fn [n] (reduce + (map square (digits n))))]\n    (count (filter #(< % (mySumSquare %)) coll))))", "user": "5c74b043e4b0fca0c16227ce"}, {"problem": 120, "code": "(fn sum-square [coll]\n  (let [digits (fn [n] (map #(- (int %) 48) (str n)))\n        square #(* % %)\n        sum-digits (fn [n] (reduce + (map square (digits n))))]\n    (count (filter #(< % (sum-digits %)) coll))))", "user": "5c787131e4b0fca0c1622825"}, {"problem": 120, "code": "(fn sum-square [coll]\n  (let [digits (fn [n] (map #(- (int %) 48) (str n)))\n        square #(* % %)\n        sum-digits (fn [n] (reduce + (map square (digits n))))]\n    (count (filter #(< % (sum-digits %)) coll))))", "user": "5c75a830e4b0fca0c16227e0"}, {"problem": 120, "code": "(fn cnt-sqrt [arg]\n  (let [get-digits (fn [n]\n                     (map #(Integer/valueOf (str %)) (String/valueOf n)))\n        digits-sqr (fn [n]\n                     (apply + (map #(* % %) (get-digits n))))\n        res-seq (filter #(< % (digits-sqr %)) arg)]\n    (count res-seq)))", "user": "5c8860bce4b048ec896c5928"}, {"problem": 120, "code": "(fn [x] \n  (count \n   (filter #(< (first %) (last %))\n           (map #(vector % \n                         (loop [x (str %) r 0]\n                           (if (empty? x)\n                             r\n                             (recur (rest x) (+ r (* (- (int (first x)) 48) (- (int (first x)) 48)))))))\n                x))))", "user": "5c7d5463e4b0d597f478caa9"}, {"problem": 120, "code": "#(let [sum-of-squares (fn [x] (reduce + (map (fn [x] (int (Math/pow x 2))) (map (fn [x] (Character/digit x 10)) (seq (str x))))))]\n   (count (filter (fn [y] (< y (sum-of-squares y))) %)))", "user": "5c664b87e4b0fca0c16226a5"}, {"problem": 120, "code": "(fn sum_sq_dig [s]\n  (let [sq (for [x s] (reduce + (map (comp #(* % %) #(Integer. (.toString %))) (str x))))]\n    (count (filter #(< (first %) (last %)) (map vector s sq)))\n    )\n  )", "user": "5c52f3fce4b0fb8c5ffd99e9"}, {"problem": 120, "code": ";; http://www.4clojure.com/problem/120\n(fn sum-square-digits-test\n  [coll]\n  (count \n   (filter\n    (fn [x] (< x (apply + (map #(* % %) (map #(Integer/parseInt (str %)) (seq (str x))))))) coll)))", "user": "5c92105ce4b048ec896c59f7"}, {"problem": 120, "code": "(fn [s]\n    (letfn [(g [x]\n              (if (< x 10)\n                (* x x)\n                (let [a (mod x 10)]\n                  (+ (* a a) (g (quot x 10))))))]\n      (count (filter #(< % (g %)) s))))", "user": "5bd0ea60e4b0e9689409ee45"}, {"problem": 120, "code": "(fn count-smaller-than-comp-digits\n  [s]\n  (reduce (fn [c n]\n            (let [sum-of-squares (reduce +\n                                         0\n                                         (map #(let [digit (-> % str Integer/parseInt)]\n                                                 (* digit digit))\n                                              (seq (str n))))]\n              (if (< n sum-of-squares)\n                (inc c)\n                c)))\n          0\n          s))", "user": "59b93cd7e4b0a024fb6ae3c7"}, {"problem": 120, "code": "(fn [xs]\n   (let [sq-sum (fn [x]\n                  (reduce + (map #(* % %) (map #(Character/digit % 10) (str x)))))]\n     (count (filter identity (map #(> %1 %2) (map sq-sum xs) xs)))))", "user": "5c896f46e4b048ec896c5940"}, {"problem": 120, "code": "(fn [s]\n  (let [digits #(loop [digs '() n %] \n                  (if (>= 0 n) \n                    digs \n                    (recur (cons (rem n 10) digs) (quot n 10))))\n        square #(* % %)\n        sum-sqr #(apply + (map square %))]\n    (reduce #(if (< %2 (sum-sqr (digits %2))) (inc %1) %1) 0 s)))", "user": "5c7d5a0ce4b0d597f478caab"}, {"problem": 120, "code": "(fn [xs]\n    (->> xs\n         (map (fn [n] (->> (str n)\n                          (map #(let [n (Integer/parseInt (str %))]\n                                  (* n n)))\n                          (reduce +))))\n         (map - xs)\n         (filter neg?)\n         (count)))", "user": "5c995fa4e4b048ec896c5a96"}, {"problem": 120, "code": "(fn [c]\n  (let [sq (fn [x] (* x x))\n        sum-sq (fn [y] (reduce #(-> %2 str Integer/parseInt sq (+ %)) 0 (seq (str y))))]\n    (count (filter #(< % (sum-sq %)) c))))", "user": "57e2e1bde4b0bfb2137f5a8f"}, {"problem": 120, "code": "(fn [lst] \n  (count (filter (fn [x] (\n    < x (reduce + (map (comp #(* % %) read-string str) (seq (str x))))     \n  )) lst))\n)", "user": "543bb568e4b032a45b869334"}, {"problem": 120, "code": "(fn n120 [coll]\n  (count (filter #(let [s (str %)\n                        total (apply + (map (comp (fn [x] (* x x)) (fn [c] (Character/digit c 10))) s))]\n                    (< % total))\n                 coll)))", "user": "5ca14eb1e4b048ec896c5b7d"}, {"problem": 120, "code": "(fn prob120 [xs]\n  (letfn\n      [(digitize [n]\n         (loop [n n digits []]\n           (if (zero? n)\n             digits\n             (recur (quot n 10) (cons (mod n 10) digits)))))\n       (sumofsquares [xs]\n         (reduce + (map #(* % %) xs)))]\n    (count (filter (fn [n] (< n (sumofsquares (digitize n)))) xs))))", "user": "5cab33e7e4b048ec896c5c48"}, {"problem": 120, "code": "(fn some-of-square-of-digits\n  [coll]\n  (letfn [(square-sum [x] (apply + (map #(* %1 %1) (map #(Integer/parseInt (str %)) (str x)))))]\n    (count (filter #(< % (square-sum %)) coll))))", "user": "59b9e669e4b0a024fb6ae3db"}, {"problem": 120, "code": "(fn [c] (count (filter #(< % (reduce + (map (fn [n] (* n n)) (->> % str (map (comp read-string str)))))) c)))", "user": "5b4c2212e4b02d533a91bca6"}, {"problem": 120, "code": "(fn [is]\n  (->\n    (filter\n      #(let [sumsq (reduce +\n                      (map (fn [d] (* (read-string d) (read-string d)))\n                           (re-seq #\".\" (str %))))]\n         (< % sumsq))\n      is)\ncount))", "user": "5964f9b0e4b069c0a1a19778"}, {"problem": 120, "code": "(fn [s]\n  (letfn [(get-digits [n] (->> n str vec (map #(Character/digit % 10)) ))\n          (sum-square [n] (reduce (fn [acc e] (+ acc (* e e)))\n                                  0 (get-digits n)))]\n    (count\n     (filter #(< % (sum-square %)) s))))", "user": "5c950334e4b048ec896c5a44"}, {"problem": 120, "code": "(fn ? [coll]\n  (count\n   (for [x coll\n         :when (< x\n                (apply +\n                 (map\n                  (comp #(* % %)\n                        #(- % 48)\n                        int)\n                  (str x))))]\n     x)))", "user": "52393e16e4b0d705d026ef06"}, {"problem": 120, "code": "#(count (filter (fn [x] (< x (loop [r x s 0] (if (= r 0) s (recur (int (/ r 10))  (+ s (* (mod r 10) (mod r 10)))))))) %))", "user": "5cc77807e4b0ccb061962838"}, {"problem": 120, "code": "(fn [xs]\n  (let [digits (fn [n] (map #(Integer. %) (re-seq #\"[0-9]\" (str n))))\n        sq (fn [n] (* n n))]\n    (count (filter #(< % (reduce + (map sq (digits %)))) xs))))", "user": "4fbe2cfbe4b081705acca30c"}, {"problem": 120, "code": "(fn num-greater-sum-squared [coll]\n  (let [ctoi (fn [n] (- (int n) 48))\n        digits (fn [n] (map ctoi (str n)))\n        sum-square (fn [n] (reduce + (map #(* % %) (digits n))))]\n    (count (filter (fn [e] (< e (sum-square e))) coll))))", "user": "5c547cf0e4b0fb8c5ffd9a0b"}, {"problem": 120, "code": "(fn [m] (count (filter (fn [n] (< n (reduce + (map #(reduce * (repeat 2 (- (int %) 48))) (str n))))) m)))", "user": "51dd5d6fe4b0c33a4e1da406"}, {"problem": 120, "code": "(fn [rng] (count (filter (fn [x] (> (reduce #(+ %1 (Math/pow (Character/digit %2 10) 2)) 0 (str x)) x)) rng)))", "user": "5c9dcb36e4b048ec896c5b1d"}, {"problem": 120, "code": "(fn [x]\n  (letfn [(digit-square-sum [str-seq]\n                            (reduce (fn [acc digit-str]\n                                      (let [digit (-> digit-str\n                                                      str\n                                                      read-string)]\n                                        (+ acc (* digit digit))))\n                                    0 str-seq))]\n    (->> x\n         (map #(< % (digit-square-sum (seq (str %)))))\n         (remove false?)\n         (count))))", "user": "55ff562fe4b00f4cabc57660"}, {"problem": 120, "code": "(fn ssd [coll]\n  (reduce +\n    (for [n coll]\n      (let [digits (map #(Character/digit % 10) (seq (str n)))]\n        (if (< n (reduce + (map #(* % %) digits)))\n          1\n          0\n    )))))", "user": "5cb4e764e4b026601754b929"}, {"problem": 120, "code": "(fn [coll]\n  (letfn [(sum [n] (apply + n))\n          (square [n] (* n n))\n          (digits [n] (map #(- (int %) (int \\0)) (str n)))\n          (ssd [n] (sum (map square (digits n))))]\n    (count (filter #(< % (ssd %)) coll))))", "user": "5766bab8e4b0a07e8fc180b1"}, {"problem": 120, "code": "(fn [coll]\n  (letfn [(sumsq [num]\n            (loop [num num sum 0]\n              (if (<= num 0)\n                sum\n                (recur (int (/ num 10)) \n                       (+ sum (Math/pow (mod num 10) 2))))))\n          ]\n    (->> coll\n     \t (filter #(< % (sumsq %)))\n         (count))))", "user": "5713c575e4b07c98581c3aab"}, {"problem": 120, "code": "(fn [xs]\n  (let [sum-of-squares (fn [n]\n                         (->> n\n                              str\n                              (map #(- (int %) (int \\0)))\n                              (map #(* % %))\n                              (reduce +)))]\n    (count (filter #(< % (sum-of-squares %)) xs))))", "user": "5ce077e9e4b0a17bb84e2b0c"}, {"problem": 120, "code": "(fn [vs]\n\t(let [list-int (fn [v] (map #(- (int %) 48) (str v)))\n          sum (fn [v] (reduce #(+ %1 (Math/pow %2 2)) 0 (list-int v)))]\n    \t(count (filter #(< % (sum %)) vs))\n    )\n)", "user": "5ce41d1be4b0a17bb84e2b50"}, {"problem": 120, "code": "(fn [s]\n   (count (filter \n           (fn [x] (< x \n                      (reduce +  (map #(let [x (mod % 10)] (* x x)) \n                                      (take-while pos? (iterate #(quot % 10) x)))))) \n           s)))", "user": "5ce2b15fe4b0a17bb84e2b2c"}, {"problem": 120, "code": "(fn [coll]\n        (letfn [(digits [n]\n                  (let [radix 10]\n                    (reverse\n                     (map\n                      #(int (rem % radix))\n                      (take-while (complement zero?)\n                                  (iterate #(quot % radix)\n                                           n))))))\n                (square [val]\n                  (* val val))\n                (sum [coll]\n                  (reduce + coll))\n                (smaller-than-sum-of-squares? [val]\n                  (< val\n                     (sum (map square (digits val)))))]\n          (count (filter smaller-than-sum-of-squares? coll))))", "user": "5ce52271e4b0a17bb84e2b69"}, {"problem": 120, "code": "(fn [xs] (->> xs\n               (map str)\n               (map seq)\n               (map #(map (comp read-string str) %))\n               (map #(reduce (fn[r x](+ r (* x x))) 0 %))\n               (mapv (fn[a b](if(< a b) 0 1)) xs)\n               (filter zero?)\n               (count)\n               ))", "user": "5ce62d8ee4b0a17bb84e2b83"}, {"problem": 120, "code": "#(loop [s % c 0]\n   (cond (empty? s) c\n         (> (first s) 99) c\n         (> (+ (* (rem (first s) 10) (rem (first s) 10)) (* (quot (first s) 10) (quot (first s) 10))) (first s)) (recur (rest s) (inc c))\n         :else (recur (rest s) c)))", "user": "592bb806e4b072a2710fcf46"}, {"problem": 120, "code": "(fn [xs]\n  (let [sum (fn [x] (apply + \n                            (map #(let [d (read-string (str %))]\n                                    (* d d))\n                                 (str x))))]\n    (count (filter #(< % (sum %)) xs))))", "user": "58c2df0ae4b021aa9917ed17"}, {"problem": 120, "code": "(fn [lst]\n  (count\n   (filter\n    (fn [x] (< x (->> x str seq (map #(- (int %) 48)) (map #(* % %)) (reduce +))))\n   lst) \n  )\n)", "user": "5cebafbbe4b0a17bb84e2be6"}, {"problem": 120, "code": "(fn [xs]\n   (let [f (fn [n]\n             (map (fn [p]\n                    (p 0))\n                  (take (count (str n))\n                        (drop 1\n                              (iterate (fn [p]\n                                         [(rem (p 1) 10) (quot (p 1) 10)])\n                                       [n n])))))\n         g (fn [ns]\n             (map (fn [n] (reduce * (repeat 2 n)))\n                  ns))\n         h (fn [ns]\n             (reduce + ns))\n         ys (map vector\n                 xs\n                 (map h (map g (map f xs))))\n         zs (filter (fn [p]\n                      (< (p 0) (p 1)))\n                    ys)]\n     (count zs)))", "user": "52281e1ee4b0186687e23a69"}, {"problem": 120, "code": "(fn sum-square [coll]\n  (let [string-to-int (fn [s] (-> s (int) (- 48)))\n        digits (fn [n] (->> n (str) (map string-to-int)))\n        square #(* % %)\n        sum-digits (fn [n] (->> n (digits) (map square) (reduce +)))]\n    (->> coll (filter #(< % (sum-digits %))) (count))\n    ))", "user": "5baaae06e4b0a20761a23464"}, {"problem": 120, "code": "(fn sum-square [coll]\n  (let [digits (fn [n] (map #(- (int %) 48) (str n)))\n        square #(* % %)\n        sum-digits (fn [n] (reduce + (map square (digits n))))]\n    (count (filter #(< % (sum-digits %)) coll))))", "user": "5c3440fee4b0d62ef62d9f50"}, {"problem": 120, "code": "(fn sum-square [coll]\n  (let [digits (fn [n] (map #(- (int %) 48) (str n)))\n        square #(* % %)\n        sum-digits (fn [n] (reduce + (map square (digits n))))]\n    (count (filter #(< % (sum-digits %)) coll))))", "user": "5cee521ce4b0aaa82f1129dd"}, {"problem": 120, "code": "(fn sum-square [coll]\n  (let [digits (fn [n] (map #(- (int %) 48) (str n)))\n        square (fn [n] (* n n))\n        sum-digits (fn [n] (reduce + (map square (digits n))))]\n    (count (filter #(< % (sum-digits %)) coll))))", "user": "5ca1c45ae4b048ec896c5b85"}, {"problem": 120, "code": "(fn [coll]\n  (count\n  (remove nil?\n  (map (fn [x]\n         (if (< x (apply + (map #(* % %)(map read-string (re-seq #\"\\d\" (str \n         x))))))\n           x))\n       coll))))", "user": "5c3f29d4e4b08cd430848e8f"}, {"problem": 120, "code": "#(letfn [(is-small? [x]\n          (let [v (loop [s [] i x]\n                    (if (< 0 i) (recur (conj s (mod i 10)) (quot i 10)) s))]\n            (->> (map (fn [n] (* n n)) v)\n                 (apply +)\n                 (< x))))]\n   (count (filter is-small? %)))", "user": "5b5e7953e4b0c6492753e6d9"}, {"problem": 120, "code": "(fn [coll]\n  (count\n    (filter true? \n            (map < coll (map (fn [num] ;\u4e0e\u8f93\u5165\u6570\u5217\u6bd4\u8f83\u5927\u5c0f\uff0c\u7b5b\u9009\u6240\u6709true\u7136\u540e\u6c42\u6570\u5217count\n                                 (reduce + (map #(int (Math/pow % 2)) ((fn [n] ;\u5e8f\u5217\u6bcf\u4e2a\u6570\u5b57\u5206\u522b\u5e73\u65b9\u518d\u6c42\u548c\n                                                                           (map #(Integer/parseInt %) (map str (str n))) ;\u8f93\u5165\u6570\u5217\u4e2d\u4e00\u4e2a\u6570\u5b57\u8f6c\u6362\u6210\u5e8f\u5217\n                                                                           ) num)))\n                                 ) coll))))\n  )", "user": "5cd4e1b2e4b0ccb061962927"}, {"problem": 120, "code": "(fn [xs]\n  (let\n    [ sum-square-digits\n     (fn [x]\n       (->> (clojure.string/split (str x) #\"\")\n            (filter #(not= \"\" %))\n            (map #(Integer/parseInt %))\n            (map #(* % %))\n            (reduce +)))]\n    (count (filter #(< % (sum-square-digits %)) xs))))", "user": "5ccb0bbee4b0ccb06196287c"}, {"problem": 120, "code": "(fn square-of-digits [col]\n  (reduce (fn [counts value]\n            (let [digits (map #(Character/getNumericValue %) (str value))]\n              (if (< value (reduce #(+ %1 (* %2 %2)) 0 digits))\n                (inc counts)\n                counts)))\n          0\n          col))", "user": "5d0859fbe4b0cc9c91588208"}, {"problem": 120, "code": "(fn [x] (count \n         (filter \n          #(< % \n             ((fn [my-num] \n               (reduce (fn [x y] (+ x (Math/pow (- (int y) 48) 2))) (cons 0 (vec (str my-num))))) \n              %)) \n          x)))", "user": "5d0815b3e4b0cc9c91588201"}, {"problem": 120, "code": "(fn [col]\n  (letfn [(digits\n            ([i] (digits i []))\n            ([i ds]\n             (if (zero? i) ds\n                 (digits (int (/ i 10)) (conj ds (mod i 10))))))\n          (ltsscd? [i]\n            (< i (->> (digits i)\n                      (map #(Math/pow % 2.0))\n                      (reduce + 0))))]\n    (->> (map ltsscd? col)\n         (filter true?)\n         count)))", "user": "5357b241e4b04ce2eb3ed282"}, {"problem": 120, "code": "#(->> (map (fn [num] [num (map (fn [s] (Integer/parseInt (str s))) (str num))]) %)\n         (map (fn [v] [(first v), (reduce + (map (fn [n] (* n n)) (second v)))]))\n         (filter (fn [v] (< (first v) (second v))))\n         count )", "user": "5d02fe44e4b0cc9c915881c0"}, {"problem": 120, "code": "(fn counter [ls]\n (letfn [(ss [x]\n   (letfn [(d [q acc]\n             (if (= 0 q)\n               acc\n               (d (quot q 10) (+ acc (* (rem q 10) (rem q 10))))))]\n     (< x (d x 0))))]\n   (count (filter ss ls))\n))", "user": "5d1bbef0e4b02ea6f0fb6984"}, {"problem": 120, "code": "(fn ssd [ints]\n  (reduce +\n          (map (fn [i] (let [digs (map (fn [d] (- (int d) 48)) (str i))\n                             sum-sq (reduce #(+ % (* %2 %2)) 0 digs)]\n                         (if (< i sum-sq)\n                           1\n                           0)))\n        ints)))", "user": "5012da69e4b0c8732600222d"}, {"problem": 120, "code": "(fn\n  [s]\n  (letfn [(digits [n]\n            (->> (str n)\n                 vec\n                 (map str)\n                 (map read-string)))\n          (sum-squares [s]\n            (reduce (fn [sum i]\n                      (+ sum (* i i)))\n                    0\n                    s))]\n    (reduce (fn [c e]\n              (let [digs (digits e)\n                    ssqs (sum-squares digs)]\n                (if (< e ssqs)\n                  (inc c)\n                  c)))\n            0\n            s)))", "user": "570c8ac3e4b0b0fb43fd06ca"}, {"problem": 120, "code": "#(count (filter\n\t(fn [n]\n\t\t(< n\n        (reduce + (map (fn [c] (let [x (Integer/parseInt (str c))] (* x x))) (str n)))\n\t\t)\n\t)\n%))", "user": "5d2201b8e4b02ea6f0fb69ed"}, {"problem": 120, "code": "(fn [xs]\n  (letfn [(digit-square-sum [n]\n                            (loop [n n\n                                   sum 0]\n                              (if (zero? n)\n                                sum\n                                (let [q (quot n 10)\n                                      m (mod n 10)]\n                                  (recur q (+ sum (* m m)))))))]\n    (->> xs\n         (filter #(< % (digit-square-sum %)))\n         (count))))", "user": "5d272077e4b092dab7f59c64"}, {"problem": 120, "code": "(fn foo\n  [coll]\n  (reduce (fn [acc curr]\n            (if (< curr (->> (str curr)\n                             (seq)\n                             (map (comp #(* % %) #(Integer/parseInt %) str))\n                             (reduce +)))\n              (inc acc)\n              acc)) 0 coll))", "user": "5d1c14cde4b02ea6f0fb698a"}, {"problem": 120, "code": "(fn [args]\n  (letfn [(digits-seq-of-num \n           [m]\n           (map #(Long/valueOf (str %))\n                (seq (char-array (.toString m)))))\n          \n          (sum-of-squared-digits-larger? \n           [m] \n           (> (reduce #(+ %1 (* %2 %2)) 0\n                      (digits-seq-of-num m))\n              m))]\n    \n    (count (filter sum-of-squared-digits-larger? args))))", "user": "5d231255e4b02ea6f0fb69fe"}, {"problem": 120, "code": "(fn [s] (let [f* #(loop [x % acc 0] (if (> x 0) (recur (int (/ x 10)) (+ acc (* (mod x 10) (mod x 10)))) acc))] (count (filter (fn [x] (< x (f* x))) s))))", "user": "5d13f783e4b0902706380dc1"}, {"problem": 120, "code": "(fn foo [coll]\n  (->> coll\n    (map (fn [digits n]\n           (< n (->> digits\n                  (map #(* % %))\n                  (apply +))))\n      (map (fn digits [n]\n             (if (>= n 10)\n               (conj (digits (quot n 10)) (rem n 10))\n               [n]))\n        coll))\n    (filter true?)\n    (count)))", "user": "5d2bfb68e4b01671435dbc86"}, {"problem": 120, "code": "(fn [col]\n    (letfn [(into-digits [x]\n             (loop [n x, result []]\n               (if (= n 0)\n                 (reverse result)\n                 (recur (quot n 10) (conj result (mod n 10))))))]\n     (count (filter\n              (fn [n]\n               (< n (reduce (fn [i col] (+ i (* col col))) 0 (into-digits n))))\n              col))))", "user": "5ccf99fbe4b0ccb0619628c8"}, {"problem": 120, "code": "(fn [sqn]\n  (let [parse-digits (fn [num]\n                       (map #(- (int %) 48) (str num)))\n        squared-sum (fn [digits]\n                      (reduce + (map #(* % %) digits)))]\n    (count (filter #(< % (squared-sum (parse-digits %))) sqn))))", "user": "5cf895efe4b0b71b1d808a85"}, {"problem": 120, "code": "(fn [s]\n  (let [digits (fn [x] \n                 (loop [xx x dd '()] \n                   (if (= 0 xx)\n                     dd\n                     (recur (quot xx 10) (cons (mod xx 10) dd)))))\n        predicate (fn [x]\n                    (let [x-digits (digits x)\n                          x-squared (map #(* %1 %1) x-digits)\n                          x-sum (apply + x-squared)]\n                      (< x x-sum)))]\n    (count (filter predicate s))))", "user": "5d3ae729e4b01671435dbd5d"}, {"problem": 120, "code": "(fn [xs]\n    (count (filter (fn [n]\n                     (->> n\n                          (iterate #(quot % 10))\n                          (take-while pos?)\n                          (map #(Math/pow (mod % 10) 2)) \n                          (reduce +)\n                          (< n))) xs)))", "user": "5d29c06be4b01671435dbc6b"}, {"problem": 120, "code": "reduce (fn [count n] (if(> (reduce #(+ (* %2 %2) %1) 0 (map #(Character/digit % 10) (str n)) ) n) (inc count) count )) 0", "user": "5cf53196e4b087f62be35a94"}, {"problem": 120, "code": "(fn [coll]\n  (count\n    (filter\n     (fn [n]\n       (let [sum-square (->> n\n                             (str)\n                             (map #(Integer. (str %)))\n                             (map #(* %1 %1))\n                             (reduce +))]\n         (< n sum-square)))\n     coll)))", "user": "5cb41c40e4b026601754b911"}, {"problem": 120, "code": "(fn [s]\n  (count\n    (for [e s\n          :let [ digits ((fn [num]\n                           (loop [c [] n num]\n                             (if (< n 10)\n                               (conj c n)\n                               (recur (conj c (mod n 10)) (quot n 10))))) e)\n\n                digits-squared (reduce + (map #(* % %) digits))]\n          :when (< e digits-squared)]\n      e)))", "user": "5ad76df9e4b0ea6055cfac18"}, {"problem": 120, "code": "(fn [coll]\n  (count (filter (fn [number]\n                   (< number\n                      (reduce\n                       #(+ %1\n                           (* (Character/getNumericValue %2)\n                              (Character/getNumericValue %2)))\n                       0\n                       (str number))))\n                 coll)))", "user": "5d48e6d3e4b0776584bd6f15"}, {"problem": 120, "code": "(fn [L]\n    (let [        \n        SqrDigits (fn [N]\n          (apply + (map #(* (read-string (str %))  (read-string (str %)) ) (into [] (str N))))\n        )\n      ]\n      (apply + (map #(if (> %1 %2) 1 0) (map SqrDigits L) L))\n    )\n  )", "user": "5d4a6c6ce4b0776584bd6f22"}, {"problem": 120, "code": "(fn [coll] (count (filter (fn [n] (< n (reduce + (map #(* % %) (map #(Character/getNumericValue %) (str n)))))) coll)))", "user": "5259451ce4b0cb4875a45cd7"}, {"problem": 120, "code": "(fn [xs]\n  (letfn [(digits [x]\n            (->> x str (map (comp read-string str))))\n          (sum-squared-digits [x]\n            (->> x digits (map #(* % %)) (reduce +)))]\n    (->> xs\n        (filter #(< % (sum-squared-digits %)))\n        count)))", "user": "5d0bb4fae4b0cc9c91588237"}, {"problem": 120, "code": "reduce (fn\n                    [acc el]\n                    (if (>\n                          (reduce (fn [acct l] (+ l acct)) 0\n                                  (map\n                                    #(* (Integer/parseInt (str %1)) (Integer/parseInt (str %1)))\n                                    (vec (str el)))\n                                  )\n                          el\n                          )\n                      (inc acc)\n                      acc\n                      )\n                    ) 0", "user": "5bdc4a76e4b0ed4b8aab4c30"}, {"problem": 120, "code": "(comp count filter) (fn [x] (> (reduce + (map #(* % %) (map read-string (map str (str x))))) x))", "user": "5d47f4dbe4b07c84aa5ae6b5"}, {"problem": 120, "code": "(fn\n  [x]\n  (count\n   (filter\n    (fn [a]\n      (< a\n         (->> (str a)\n              (map (comp #(* % %) read-string str))\n              (apply +))))\n    x)))", "user": "5c2836ebe4b07e362c2305d4"}, {"problem": 120, "code": "(fn count-sum-square\n  [coll]\n  (letfn [(pred [n]\n            (let [components (map #(Character/digit % 10) (seq (str n)))\n                  squared (map #(* % %) components)]\n              (println components squared)\n              (> (apply + squared) n)))]\n    (count (filter pred coll))))", "user": "5b62ff3ce4b0c6492753e72a"}, {"problem": 120, "code": "(fn [c]\n  (count\n   (filter\n    (fn [x] (< x (reduce + (map #(* % %) (map #(- (int %) (int \\0)) (seq (str x)))))))\n    c)))", "user": "5bb25684e4b0a20761a2350d"}, {"problem": 120, "code": "(fn [vals]\n  (count \n    (filter \n      (fn [x] \n        (< x (reduce + (map (fn [xx] (* xx xx)) (->> x str (map (comp read-string str))))))) \n      vals)))", "user": "5d4f21f3e4b0776584bd6f4e"}, {"problem": 120, "code": "(fn ssd [coll]\n  (count (filter (fn [el]\n            (< el\n               (reduce + (->> (str el)\n                              seq\n                              (map (comp #(Math/pow % 2) read-string str))))))\n          coll)))", "user": "5146f343e4b04ef915e3731e"}, {"problem": 120, "code": "(fn [ints]\n  (let [n<sum-of-squares? (fn [n]\n                            (let [digits (map (comp read-string str) (str n))\n                                  sqr #(* % %)\n                                  squares (map sqr digits)\n                                  sum (reduce + squares)\n                                  n<sum? (< n sum)]\n                              n<sum?))]\n    (count (filter n<sum-of-squares? ints))))", "user": "57262710e4b0c5bde472c120"}, {"problem": 120, "code": "(fn [col]\n  (count (filter (fn [num]\n                   (let [snum (str num)\n                         elements (map #(Integer. (str %)) (seq snum))\n                         sum (reduce #(+ %1 (* %2 %2)) 0 elements)]\n                     (< num sum)\n                     )) col)))", "user": "5d0beecee4b0cc9c91588239"}, {"problem": 120, "code": "(fn integers-smaller-than-component-digits [ints]\n  (letfn [(square [x] (* x x))\n          (numbers-to-digits [num] (map #(Character/digit % 10) (seq (str num))))\n          (squared-component-digits [num]\n            (reduce + (map square (numbers-to-digits num))))]\n    (count (filter #(< % (squared-component-digits %)) ints))\n    ))", "user": "5bfa25fbe4b0bdcf453d15c8"}, {"problem": 120, "code": "(fn [z]\n(count (filter\n(fn [x] (println (str x)) (< x (apply + (map #(Math/pow (-(int %)48) 2 ) (seq (str x))))))\nz)))", "user": "5951190be4b066ee0a44aea4"}, {"problem": 120, "code": "(fn [n]\n  (letfn [(combine [ns] (->> ns (map #(* % %)) (reduce +)))\n          (decomp [n] (map (fn [x] (Character/getNumericValue x)) (seq (str n))))\n          (counts [x] (< x (combine (decomp x))))]\n    (count (filter counts n))))", "user": "5d672bd7e4b0db5d338d15f1"}, {"problem": 120, "code": "(letfn [(digits [n] (map #(Integer/parseInt (str %)) (str n)))\n        (square [n] (* n n))\n        (sscd [n] (apply + (map square (digits n))))\n        (lts? [n] (< n (sscd n)))]\n  #(count (filter lts? %)))", "user": "5d609ddde4b0c9e5857d5008"}, {"problem": 120, "code": "(fn [coll]\n  (->> coll\n       (map (fn [number] [number (map (comp read-string str) (str number))]))\n       (filter (fn [[number digits]] (< number (reduce + 0 (map #(* % %) digits)))))\n       (map second)\n       (count)))", "user": "5d68f5e6e4b0db5d338d1605"}, {"problem": 120, "code": "(fn compare-squared-sums [xs]\n  (count\n   (filter\n    identity\n    (for [x xs]\n      (let [comp (map #(Integer/parseInt %)\n                      (filter (complement empty?)\n                              (clojure.string/split (str x) #\"\")))\n            sumsq (apply + (map (partial apply *) (map vector comp comp)))]\n        (< x sumsq))))))", "user": "4eb47bb1535d7eef30807362"}, {"problem": 120, "code": "(fn [c]\n   (let [square #(* % %)\n         char->dig #(Character/digit % 10)\n         digs-sq #(->> % (str) (map char->dig) (map square) (apply +))]\n     (count (filter #(< % (digs-sq %)) c))))", "user": "5d24e49be4b02ea6f0fb6a2a"}, {"problem": 120, "code": "(fn [c]\n  (let [smaller? (fn [n]\n                   (let [l (map #(Character/digit % 10) (str n))\n                         ss (apply + (map #(* % %) l))]\n                     (< n ss)))]\n    (count (filter true? (map smaller? c)))))", "user": "5d764e52e4b02e6b30c93524"}, {"problem": 120, "code": "(fn [nums]\n    (->> (map (fn [n]\n                (->> (map (comp #(Integer/parseInt %) str) (str n))\n                     (map #(* % %))\n                     (apply +))) nums)\n         (map vector nums)\n         (filter (partial apply <))\n         count))", "user": "54da46e5e4b024c67c0cf753"}, {"problem": 120, "code": "(fn [s]\n  (loop [z s\n        a []]\n    (if (empty? z)\n      (count a)\n      (let [d (map #(read-string (str %)) (str (first z)))]\n        (recur (rest z) (if (< (first z)\n                              (apply + (map #(* % %) d)))\n                          (conj a (first z))\n                          a))))))", "user": "5d52bf29e4b0776584bd6f69"}, {"problem": 120, "code": "(fn [coll]\n  (count\n  (filter #(< %\n              (reduce +\n               (map (fn [x] (* x x)) (->> % str (map (comp read-string str))))))\n        coll)))", "user": "5d64013ce4b0c9e5857d502d"}, {"problem": 120, "code": "(fn [coll] (let [sums (fn [s]\n                           (let [digits (map #(read-string (str %)) (seq (str s)))]\n                             (reduce + (map #(* % %) digits))))]\n                (count (filter #(< % (sums %)) coll))))", "user": "5a9bfd57e4b0d174b936c7d0"}, {"problem": 120, "code": "(fn\n  [coll]\n  (count\n    (filter\n      (fn [elem] \n        (< elem (reduce + (map #(* % %) (->> elem str (map (comp read-string str))))))) \n      coll)))", "user": "5d6691cee4b0db5d338d15e9"}, {"problem": 120, "code": "(fn [coll] (count (filter (fn [num] (> (apply + (map #(let [a (Integer/parseInt (str %))] (* a a)) (str num))) num)) coll)))", "user": "5d6d2172e4b04d129b00f2b9"}, {"problem": 120, "code": "(fn myss [coll]\n  (letfn [(digits [n]\n          \t(if (pos? n)\n      \t\t\t(conj (digits (quot n 10)) (mod n 10))\n \t\t\t \t[]))\n          (square [n] (* n n))\n          (sumcoll [xs] (reduce + xs))\n          (smaller-than-sum-of-squares? [n]\n                                       (< n (sumcoll (map square (digits n)))))]\n          (count (filter smaller-than-sum-of-squares? coll))))", "user": "5d1609f9e4b0902706380dd9"}, {"problem": 120, "code": "(fn sqd\n  [coll]\n  (letfn\n    [(components [n]\n       (map\n         #(mod % 10)\n         (take-while\n           pos?\n           (iterate\n             (fn [n] (int (/ n 10)))\n             n))))\n     (ssc [n]\n       (reduce + (map #(* % %) (components n))))]\n    (count (filter #(< % (ssc %)) coll))))", "user": "5d6d2e11e4b04d129b00f2ba"}, {"problem": 120, "code": "(fn [coll]\n  (let [d (fn d [n]\n                 (if (< n 10)\n                   (list n)\n                   (cons (rem n 10)\n                         (d (quot n 10)))))]\n    (count (filter\n            #(< %1 (apply + (map * (d %1) (d %1))))\n            coll))))", "user": "5c51c930e4b0fb8c5ffd99ce"}, {"problem": 120, "code": "(fn [x] (count (filter true? (map > (map #(loop [out [] qu %] (if (< qu 10) (reduce + (cons (* qu qu) out)) (recur (cons (* (rem qu 10) (rem qu 10)) out) (quot qu 10)))) x) x))))", "user": "5d7158f3e4b04d129b00f2e1"}, {"problem": 120, "code": "#(->> %\n   (filter \n     (fn [i]\n      (< i\n        (reduce\n          (fn [sum c]\n            (+ (* (- (int c) 48)\n                  (- (int c) 48))\n               sum))\n          0\n          (str i)))))\n   count)", "user": "5d8b881ae4b0915913b1d3d7"}, {"problem": 120, "code": "(fn [s]\n  (let [ s-sum (fn [x]\n                 (loop [sum 0\n                        y x]\n                   (if (zero? y)\n                     sum\n                     (recur (+ sum (* (mod y 10) (mod y 10))) (quot y 10)))))\n         f (fn [x] (if (< x (s-sum x))\n                     true false))]\n    (count (filter f s))))", "user": "5cbd5b42e4b026601754b9f6"}, {"problem": 120, "code": "(fn [xs] \n  (count (filter (fn [x] \n            (< x \n               (->> x \n                    str \n                    (map (comp #(* % %) read-string str))\n                    (reduce +)\n               ))) \n            xs)))", "user": "5c379636e4b0d62ef62d9f76"}, {"problem": 120, "code": "(fn [s] (count (filter (fn [x]\n(> (reduce \n    #(+ %1 (* (- (int %2) 48) (- (int %2) 48))) 0 x) \n   (read-string x))) (map str s))))", "user": "59ef5280e4b0966464fe6a2b"}, {"problem": 120, "code": "#(count (for [x %\n              :when (let [x-dig (map (fn [xx] (- (int xx) 48)) (seq (str x)))]\n                      (> (apply + (for [y x-dig] (* y y))) x))] \n          x))", "user": "5cc80598e4b0ccb061962840"}, {"problem": 120, "code": "(let [ss (fn [xs] (reduce + (map #(* % %) xs)))\n       comp-digits #(->> % str (map str) (map read-string))\n       squared-comp-digits #(ss (comp-digits %))]\n   (fn [xs]\n     (->> xs\n          (filter #(< % (squared-comp-digits %)))\n          (count))))", "user": "5d4b2155e4b0776584bd6f28"}, {"problem": 120, "code": "(let [digits (fn [x] (map #(- (int %) (int \\0)) (str x)))\n       isSmaller? (fn [x] (< x (reduce (fn [a b] (+ a (* b b))) 0 (digits x))))\n       smallsCount (fn [coll] (count (filter isSmaller? coll)))]\n   smallsCount)", "user": "5d887d27e4b0915913b1d3a8"}, {"problem": 120, "code": "(comp count\n      (partial filter\n               (fn [x] (< x\n                          (apply +\n                                 (map #(Math/pow (Integer. (str %)) 2)\n                                      (str x)))))))", "user": "5d81eba4e4b0915913b1d37b"}, {"problem": 120, "code": "(fn sumsqdigits [xs] (apply + (map (fn [x] (if (< x (apply + (map * (map #(Character/digit % 10) (str x)) (map #(Character/digit % 10) (str x))))) 1 0)) xs)))", "user": "5d88d820e4b0915913b1d3b1"}, {"problem": 120, "code": "(fn \n  [col]\n  (let [bool-map\n        (fn [n]\n          (let [digits (map #(- (int %) 48) (seq (str n)))\n                  squares (map #(* % %) digits)\n                  sqsum (reduce + squares)]\n                (if (< n sqsum)\n                  true\n                  false)))]\n    (count (filter true? (map bool-map col)))))", "user": "5d96edeae4b0d3f9b434ad35"}, {"problem": 120, "code": "(fn [coll]\n  (count\n   (filter\n    (fn [n]\n      (< n\n         (->>\n          n\n          str\n          (map (comp #(Integer/parseInt %) str))\n          (map #(* % %))\n          (reduce +)))) coll)))", "user": "5d9c1226e4b0d3f9b434ad51"}, {"problem": 120, "code": ";(fn [a] (->> a (filter (fn [n] (->> n str seq (map #(-> % int (Math/pow 2))) (reduce +) (< n) ))) count))\n\n(fn [a] (let [digits (fn digs [v num ] \n         (if (< num 10) \n           (reverse (conj v num))\n           (digs (conj v (rem num 10)) (int (/ num 10)) ))) ] \n          \n          (->> a (filter (fn [n] (->> n (digits []) (map #(Math/pow % 2)) (reduce +) (< n) ))) count)))", "user": "5d9e7971e4b000c986472bc1"}, {"problem": 120, "code": "(fn [xs] (count (filter (fn [n] (< n  (reduce + (map #(reduce * (repeat 2 (- (int %) 48))) (str n))))) xs)))", "user": "5d81b40ce4b0915913b1d379"}, {"problem": 120, "code": "(fn qq [xs] (count (filter true?\n   (map (fn ltcomponents? [x]\n          (let [compdig (map #(read-string (str %)) (apply vector (str x)))\n                maxval (reduce + (map #(* % %) compdig))]\n              (> maxval x)))\n              xs))))", "user": "5da4fc6be4b000c986472bff"}, {"problem": 120, "code": "(fn [c]\n  (let [add (fn [n]\n              (reduce\n               (fn [s d]\n                 (-> d\n                     str\n                     (Integer.)\n                     (Math/pow 2)\n                     int\n                     (+ s)))\n               0\n               (str n)))]\n    (->> c\n         (filter #(< % (add %)))\n         count)))", "user": "5cf6522be4b0b71b1d808a58"}, {"problem": 120, "code": "(fn [l]\n           (loop [i 0 ct 0]\n             (if (< i (count l))\n               (let [prod (reduce + (map #(* % %) (map #(Integer/parseInt (.toString %)) (flatten (partition 1 (str (nth l i)))))))]\n                 (if (< (nth l i) prod)\n                   (recur (inc i) (inc ct))\n                   (recur (inc i) ct)))\n               ct)\n             )\n           )", "user": "5d974b1de4b0d3f9b434ad36"}, {"problem": 120, "code": "(fn [more]\n  (->>\n   (filter (fn [x]\n             (let [digits (map #(Character/digit % 10) (str x))\n                   squared-digits (map #(* % %) digits)]\n               (< x (reduce + squared-digits)))\n           )\n           more)\n   (count)\n  )\n)", "user": "5d07989ee4b0cc9c915881fb"}, {"problem": 120, "code": "(fn sqd-count [coll]\n  (letfn [(sum-square-digits [n]\n            (if (zero? n)\n              n\n              (+ (apply * (repeat 2 (mod n 10))) (sum-square-digits (quot n 10)))))]\n    (reduce (fn [acc n]\n              (if (< n (sum-square-digits n))\n                (inc acc)\n                acc))\n            0\n            coll)))", "user": "5d7aa22ee4b02e6b30c9354e"}, {"problem": 120, "code": "(fn [col]\n  (count (filter true?\n    (map #(loop [x % sum 0]\n          (if (> x 0)\n            (recur (int (/ x 10))\n              (+ sum (* (mod x 10) (mod x 10) ))\n            )\n            (< % sum)\n          )          \n        )  \n    col)\n  ))\n)", "user": "5da20e73e4b000c986472be1"}, {"problem": 120, "code": "(fn [coll]\n  (apply + (map\n            (fn [x]\n              (if (< x (apply + (map #(Math/pow (Integer/parseInt %) 2) (map str (str x)))))\n                1\n                0))\n            coll)))", "user": "5da760ebe4b000c986472c1a"}, {"problem": 120, "code": "(fn cnt-sqrt [arg]\n  (let [get-digits (fn [n]\n                     (map #(Integer/valueOf (str %)) (String/valueOf n)))\n        digits-sqr (fn [n]\n                     (apply + (map #(* % %) (get-digits n))))\n        res-seq (filter #(< % (digits-sqr %)) arg)]\n    (count res-seq)))", "user": "5d5166d9e4b0776584bd6f5e"}, {"problem": 120, "code": "(fn bbb[coll](count(filter(fn [a](< a (reduce + (map #(* % %)\n                                                (map #(Character/digit % 10)\n                                                      (map #(get (str a) %)\n                                                            (range(count (str a)))))))))\n                      coll)))", "user": "5dadf73ee4b0f8c104ccfc86"}, {"problem": 120, "code": "(fn [nums]\n    (letfn [(char->digit [c] (Character/digit c 10))\n            (digits [n] (->> n str seq (map char->digit)))\n            (square [n] (* n n))\n            (sum-of-squares [ns] (->> ns (map square) (reduce +)))]\n      (->> nums\n           (map digits)\n           (map sum-of-squares)\n           (map < nums)\n           (filter identity)\n           count)))", "user": "597f8c93e4b0dbe32238d0c1"}, {"problem": 120, "code": "(fn less-than-sum-sqr-digits [coll]\n  (count (filter (fn [val]\n                   (let [sum-sqr-digits\n                         (loop [number val\n                                acc 0]\n                           (if (zero? number)\n                             acc\n                             (let [last-digit (mod number 10)]\n                               (recur (int (/ number 10))\n                                      (+ acc (* last-digit last-digit))))))]\n                     (< val sum-sqr-digits))) coll)))", "user": "5d49ec5ee4b0776584bd6f1c"}, {"problem": 120, "code": "(letfn [(digits [n] (if (< n 10) [n] (cons (mod n 10) (digits (quot n 10)))))\n        (square [n] (* n n))\n        (smaller-than-sum-of-squares? [n] (< n (->> n digits (map square) (apply +))))]\n  (fn [xs] (->> xs (filter smaller-than-sum-of-squares?) count)))", "user": "5c30d90de4b0d62ef62d9f22"}, {"problem": 120, "code": "(fn [xs]\n        (count (filter (fn [n]\n                         (let [sum-digits\n                               (->> n str\n                                (map #(Character/getNumericValue %))\n                                (map #(* % %))\n                                (reduce +))]\n                           (< n sum-digits))) xs)))", "user": "5cc6b4bfe4b0ccb061962827"}, {"problem": 120, "code": "(fn [x]\n  (letfn [(abc [oldValue] \n               (loop [acc 0 newValue oldValue]\n                 (if\n                   (> newValue 0) (recur (+ acc (Math/pow (mod newValue 10) 2)) (quot newValue 10))\n                   (< oldValue acc))))]\n        (loop [xs x num 0]\n          (cond\n             (not (first xs)) num\n             (abc (first xs)) (recur (next xs) (inc num))\n             :else (recur (next xs) num)\n  ))))", "user": "5dc12b0ae4b0e59a23173d84"}, {"problem": 120, "code": "(fn less-than-sum-square-measure [nums]\n  (letfn [(<ss [n]\n            (< n (apply + (map #(* % %) (map #(Character/digit % 10) (str n))))))]\n    (count (filter true? (map <ss nums)))))", "user": "5d64ecb2e4b0c9e5857d5036"}, {"problem": 120, "code": "(fn [r]\n  (let [is-sum-less\n      (fn [n]\n        (> (apply\n            +\n            (->> (map #((comp read-string str) %)\n                      ((comp char-array str)\n                       n))\n                 (map #(* % %))))\n           n))]\n  (count (filter (fn [x] (= true (is-sum-less x)))\n                 r))))", "user": "5dab11cde4b000c986472c45"}, {"problem": 120, "code": "(fn [s]\n  (let [ss (fn [n] (->> n (str) (map #(- (int %) (int \\0))) (map #(* % %)) (apply +)))]\n  (->> s (filter #(< % (ss %))) (count))))", "user": "5db92996e4b010eb3c36cd50"}, {"problem": 120, "code": "(fn [xs] (count (filter identity (map (fn [x] (->> x str vec (map str) (map #(Integer/parseInt %)) (map #(* % %)) (apply +) (< x))) xs))))", "user": "5da8fa72e4b000c986472c2d"}, {"problem": 120, "code": "(fn [coll]\n  (let [num-to-digits (fn [num] (map #(Integer/parseInt %) (filter not-empty (clojure.string/split (str num) #\"\"))))\n        square-sum    (fn [digits] (reduce + (map #(* % %) digits)))]\n    (count\n     (filter\n      #(< % (square-sum (num-to-digits %)))\n      coll))))", "user": "524a9556e4b05ef8e38e64b1"}, {"problem": 120, "code": "; MY ACTUAL SOLUTION, with another stolen & posted below because my code runs in any REPL beside 4clojure's.\n; (fn\n;   [nums]\n;   (let [square-digits #(* (read-string %) (read-string %))]\n;    (count (filter\n;            #(< (first %) (last %))\n;            (map\n;             (fn [i]\n;               (identity [i (reduce + (map square-digits (clojure.string/split (str i) #\"\")))]))\n;             nums)))))\n\n(fn [s]\n  (let [ss (fn [n] (->> n (str) (map #(- (int %) (int \\0))) (map #(* % %)) (apply +)))]\n  (->> s (filter #(< % (ss %))) (count))))", "user": "5dc9ccf8e4b02f9375f4e1f1"}, {"problem": 120, "code": "(fn [s]\n  (count (filter (fn [x]\n                   (< x ((fn [sum y]\n                           (if (zero? y)\n                             sum\n                             (recur (+ sum (* (rem y 10) (rem y 10))) (quot y 10))))\n                         0 x)))\n                 s)))", "user": "5dc98501e4b02f9375f4e1e6"}, {"problem": 120, "code": "(fn sum-square [coll]\n  (let [digits (fn [n] (map #(- (int %) 48) (str n)))\n        square #(* % %)\n        sum-digits (fn [n] (reduce + (map square (digits n))))]\n    (count (filter #(< % (sum-digits %)) coll))))", "user": "59b1a1b2e4b0e1f4e384c8eb"}, {"problem": 120, "code": "(fn [xs]\n   (let [digits (fn [x] (->> x str seq (map (comp read-string str))))]\n     (->>\n      (for [x xs]\n        (let [ds (digits x)]\n          [x (apply + (map #(* % %) ds))]))\n      (filter #(< (first %) (last %)))\n      (count))))", "user": "559622cee4b0c79f6e1db975"}, {"problem": 120, "code": ";#(let [input %\n  ;       each_digit (map (fn [y] (map (fn [x] (Character/digit x 10)) (str y))) input)\n  ;       each_number_Sq (map (fn [king] (map (fn [k] (* k k))king)) each_digit)\n  ;       sum (map (fn [sat] (apply + sat)) each_number_Sq)\n  ;       part (partition-all 2 (interleave input sum))\n  ;       realans (filter (fn [itachi] (apply < itachi)) part)\n  ;       ] (count realans))\n  \n    #(let [input %\n         each_digit (map (fn [y] (map (fn [x] (Character/digit x 10)) (str y))) input)\n         sum (map (fn [king] (reduce (fn [acc k] (+ acc (* k k))) 0 king)) each_digit )\n         realans (map  < input sum)\n         ] (count (filter true? realans)))", "user": "5b044436e4b0cc2b61a3bd71"}, {"problem": 120, "code": "(fn f [x]\n    (let\n        [\n            digits\n                (fn [x]\n                    (let [n (if (zero? x) 1 (-> x (Math/log10) (Math/floor) (int) (inc)))]\n                        (map #(mod % 10) (take n (iterate #(quot % 10) x)))\n                    )\n                )\n            digits_square_sum\n                (fn [x]\n                    (->> (digits x) (map #(* % %)) (apply +))\n                )\n        ]\n        (->> x (filter #(< % (digits_square_sum %))) (count) )\n    )\n)", "user": "5db7376fe4b010eb3c36cd43"}, {"problem": 120, "code": "(fn [arg]\n\n   (count (filter (fn [v1]\n                    (< v1\n                       (reduce #(+ %1 (* (Integer/valueOf %2) (Integer/valueOf %2)))\n                               0\n                               (re-seq #\"\\d\" (String/valueOf v1))))\n\n                    ) arg))\n\n   )", "user": "5dd1fb19e4b0948ae9d9ad51"}, {"problem": 120, "code": "(fn [x]\n  (reduce\n   (fn[acc curr]\n     (let [num-list (map #(Character/digit % 10) (str curr))\n           sum-of-squares (apply + (map #(* % %) num-list))]\n       (if (> sum-of-squares curr)\n         (inc acc)\n         acc)))\n    0\n    x))", "user": "5d8c8175e4b0915913b1d3e1"}, {"problem": 120, "code": "(fn [nums]\n   (reduce\n    (fn [acc num-pairs] (+ acc (if (< (first num-pairs) (last num-pairs)) 1 0)))\n      0\n      (map vector nums\n             (map (fn [s] (reduce #(+ %1 (* %2 %2)) 0 s))\n                  (map\n                   (fn [n]\n                     (->> n\n                          (iterate #(quot % 10))\n                          (take-while pos?)\n                          (mapv #(mod % 10))\n                          rseq))\n                   nums)))))", "user": "5dc9c4f2e4b02f9375f4e1f0"}, {"problem": 120, "code": "(fn count-less-than-sum-squared-digits [coll]\n  (loop [[head & tail] coll\n         count 0]\n    (let [count (loop [sum 0\n                       curr head]\n                  (if (= curr 0)\n                    (if (< head sum)\n                      (inc count)\n                      count)\n                    (let [dig (mod curr 10)]\n                      (recur (+ sum (* dig dig)) (int (/ curr 10))))))]\n      (if (empty? tail)\n        count\n        (recur tail count)))))", "user": "5dd67c22e4b0948ae9d9ad80"}, {"problem": 120, "code": "(fn [xs] (count (filter (fn [x] \n    (if (>\n          (reduce + (map (fn [z] (* z z)) ((fn digits [y] (if (pos? y) (conj (digits (quot y 10)) (mod y 10)) [])) x)))\n          \n          x) true false))  xs)))", "user": "5d84545ee4b0915913b1d38b"}, {"problem": 120, "code": "(fn ss [-seq]\n  (count\n   (filter true?\n           (map (fn [n]\n                  (< n (reduce +\n                               ((fn [l a]\n                                  (if (zero? a)\n                                    (map #(* % %) l)\n                                    (recur (conj l (mod a 10)) (int (/ a 10)))))\n                                []\n                                n))))\n                -seq))))", "user": "5ddb6151e4b0948ae9d9adb0"}, {"problem": 120, "code": "(fn [a]\n(count\n (filter true?\n  (for [b a]\n    (let [c (map #(Integer/parseInt (str %)) (seq (str b)))\n          d (reduce + (map #(* % %) c))\n    ]\n    (< b d)\n    )))))", "user": "58273e82e4b051871117bf1b"}, {"problem": 120, "code": "(fn [n]\n  (letfn [(digits [d] (->> d str (map (comp read-string str))))\n          (squared [d] (reduce + (map #(* % %) (digits d))))]\n    (count (filter true? (map #(> (squared %) %) n)))))", "user": "529dfc6de4b04e0c58e87b8a"}, {"problem": 120, "code": "(fn cnt-sqrt [arg]\n                   (let [get-digits (fn [n]\n                                      (map #(Integer/valueOf (str %)) (String/valueOf n)))\n                         digits-sqr (fn [n]\n                                      (apply + (map #(* % %) (get-digits n))))\n                         res-seq (filter #(< % (digits-sqr %)) arg)]\n                     (count res-seq)))", "user": "5d9c9446e4b0eb781811cdae"}, {"problem": 120, "code": "(fn sum-square [coll]\n  (let [digits (fn [n] (map #(- (int %) 48) (str n)))\n        square #(* % %)\n        sum-digits (fn [n] (reduce + (map square (digits n))))]\n    (count (filter #(< % (sum-digits %)) coll))))", "user": "5ddfd88be4b0948ae9d9ade1"}, {"problem": 120, "code": "(fn [c] (count (filter (fn [x] (< x ((fn [col] (reduce #(+ %1 (* %2 %2)) 0 col)) ((fn get-digits [x]\n  (let [remain (unchecked-divide-int x 10)]\n    (if (= remain 0)\n      [(mod x 10)]\n      (conj (get-digits remain) (mod x 10))))) x)))) c)))", "user": "5793931ee4b0e215f87e845c"}, {"problem": 120, "code": "(fn sum-square [coll]\n  (let [digits (fn [n] (map #(- (int %) 48) (str n)))\n        square #(* % %)\n        sum-digits (fn [n] (reduce + (map square (digits n))))]\n    (count (filter #(< % (sum-digits %)) coll))))", "user": "5dfb20b8e4b0a607a9a45cd3"}, {"problem": 120, "code": "(fn sosd [sequ] \n  (let [digits (fn digits [num]\n\t\t\t\t\t\t\t  (let [r (quot num 10)]\n\t\t\t\t\t\t\t\t  (if(= 0 r)\n\t\t\t\t\t\t\t\t    [num]\n\t\t\t\t\t\t\t\t    (conj (digits r) (mod num 10) ))))\n        lt (fn [x y] (> x y))\n        cnt (fn[xs bl] (if bl (inc xs) xs))\n        square (fn[y] (* y y))]\n\t\t    (reduce cnt 0 (map lt (map (fn [x](reduce + (map square (digits x)))) sequ) sequ ))))", "user": "5df0c6ffe4b093ff717275c2"}, {"problem": 120, "code": "(fn [s]\n  (letfn [(sqr-digits [n] (reduce + (map #(* % %) (map #(Integer. (str %)) (str n)))))]\n  (count (filter #(< % (sqr-digits %)) s))))", "user": "5dd60c58e4b0948ae9d9ad7c"}, {"problem": 120, "code": "(fn sum-of-square [coll]\n   (let [dig (fn [n] (map #(- (int %) 48) (str n)))\n         sq #(* % %)\n         sum-squ (fn [a] (reduce + (map sq (dig a)) ))]\n     (count (filter #(< % (sum-squ %)) coll ))))", "user": "5dfa1c67e4b0a607a9a45cc5"}, {"problem": 120, "code": "(fn [coll]\n   (->> coll\n        (filter #(< % (reduce (fn [acc el] (+ acc (* el el))) 0 (->> % str (map (comp read-string str))))))\n        count))", "user": "5d9e8e40e4b000c986472bc2"}, {"problem": 120, "code": "(fn [sequence]\n  (count (filter\n           (fn [x]\n             (< x\n                (apply +\n                       (map\n                         #(apply * (repeat 2 (- (int %) (int \\0))))\n                         (seq (str x))))))\n           sequence)))", "user": "5e03a15be4b0a607a9a45d5e"}, {"problem": 120, "code": "(fn sum-square [coll]\n  (let [digits (fn [n] (map #(- (int %) 48) (str n)))\n        square #(* % %)\n        sum-digits (fn [n] (reduce + (map square (digits n))))]\n    (count (filter #(< % (sum-digits %)) coll))))", "user": "5e00b6e7e4b0a607a9a45d2b"}, {"problem": 120, "code": "(fn smaller-than-sq-sums [ints]\n  (letfn [(sqrs [digits] (map #(* % %) digits))\n          (digits [num] (->> num str vec (map #(- (int %) 48))))\n          (sum-nums [nums] (reduce + 0 nums))]\n    (count (filter #(< % (sum-nums (sqrs (digits %)))) ints))))", "user": "5d80f328e4b0915913b1d372"}, {"problem": 120, "code": "(fn [coll]\n   (letfn [(digits [number] (map read-string (re-seq #\"\\d\" (str number))))\n           (small-square-number? [n] (< n (reduce + (map #(* % %) (digits n)))))]\n     (count (filter small-square-number? coll))))", "user": "5e0d948fe4b099d064962f98"}, {"problem": 120, "code": "(fn [coll]\n    (letfn [(digits [n]\n              (if (zero? n) '(0)\n                  (when (pos? n)\n                    (cons (rem n 10) (digits (quot n 10))))))]\n      (->> (filter (fn [n]\n                     (< n (->> (digits n)\n                               (map #(* % %))\n                               (reduce +)))) coll)\n           count)))", "user": "5d236215e4b02ea6f0fb6a09"}, {"problem": 120, "code": "(fn [numbers]\n  (count (filter (fn [number]\n    (< number\n      (reduce\n        (fn [x y] (+ x (* y y))) 0\n        (read-string (apply str \"[\" (apply str (interpose \" \" (str number))) \"]\")))))\n        numbers)))", "user": "5e08c3dde4b0978307768fc8"}, {"problem": 120, "code": "(fn [sq]\n   (let [f? (fn [x]\n              (let [coll (map #(-> % int (- (int \\0))) (seq (str x)))]\n                (< x (reduce #(+ %1 (* %2 %2)) 0 coll))\n                ))]\n\n     (count (filter f? sq))))", "user": "57fc5e42e4b0d3187e900997"}, {"problem": 120, "code": "(fn cout-sqrt [arg]\n  (let [get-digits (fn [n]\n                     (map #(Integer/valueOf (str %)) (str n)))\n        digits-sqr (fn [n]\n                     (reduce + (map #(* % %) (get-digits n))))\n        res-seq (filter #(< % (digits-sqr %)) arg)]\n    (count res-seq)))", "user": "5e257a33e4b05b4b01516166"}, {"problem": 120, "code": "(fn [i] (count (filter (fn [input] (< input\n                                  (apply + (map (fn [v] (* v v)) ((fn spl [x]\n                                                                    (let [q (quot x 10)\n                                                                          r (mod x 10)]\n                                                                      (if (= 0 q)\n                                                                        [r]\n                                                                        (conj (spl q) r)))) input))))) i)))", "user": "5dc53ddee4b02f9375f4e1bd"}, {"problem": 120, "code": "(fn find-sum-of-squares [nums] (count (filter true? (map\n                       (fn check-smaller-sum-squares [n-digit]\n                         (< (Integer. (apply str n-digit)) (apply + (map #(reduce * (repeat 2 %)) n-digit))))\n                       (for [n nums\n                             :let [n-digits (reverse\n                                         (map #(Integer. (str %))\n                                              (reverse (str n))))]]\n                         n-digits)))))", "user": "5e380e72e4b01d43a70e8db0"}, {"problem": 120, "code": "(fn [nums]\n  (let [str->square-sum (fn str->square-sum [[x & xs]]\n                     (let [x-int (Integer/parseInt (str x))]\n                       (+ (* x-int x-int) \n                          (if (seq xs)\n                            (str->square-sum xs)\n                            0))))\n        smaller-than-square-sum? (fn [n]\n                                   (< n (str->square-sum (str n))))]\n\t  (count (filter smaller-than-square-sum? nums))))", "user": "52b52c29e4b0c58976d9ad38"}, {"problem": 120, "code": "(fn [x] (count (filter (fn [anum] (< anum ((fn [given-num] (reduce + (map (fn [ok] (* (Character/digit ok 10) (Character/digit ok 10))) (str given-num))))\n                                           anum))) x)))", "user": "56bff105e4b060a8e693e3a4"}, {"problem": 120, "code": "(fn [coll]\n  (count\n   (filter (fn [x]\n             (loop [y x\n                    acc 0]\n               (if (or (= y 0) (< x acc))\n                 (< x acc)\n                 (recur (quot y 10) \n                        (+ acc (* (rem y 10) (rem y 10))))))) \n           coll)))", "user": "52860baae4b0239c8a67ae09"}, {"problem": 120, "code": "(fn [params] \n  (count \n   (filter \n    (fn [n] \n      (< n (apply + (for [i (str n) :let [x (- (int i) 48)]] (* x x))))\n      ) \n    params)))", "user": "5e2549c8e4b05b4b0151615f"}, {"problem": 120, "code": "(comp count\n      (partial filter #(let [ds (->> % str (map (comp read-string str)))];(map str) (map read-string))]\n                         (< % (reduce + (map * ds ds))))))", "user": "5e3e23d9e4b01d43a70e8e20"}, {"problem": 120, "code": "(fn [coll]\n   (letfn [(f [n]\n             (loop [m n\n                    res 0]\n               (if (= 0 m)\n                 res\n                 (let [q (quot m 10)\n                       r (rem m 10)]\n                   (recur q (+ res (* r r)))))))\n           (count-if [pred coll]\n             (reduce (fn [cnt val] (if (pred val) (inc cnt) cnt)) 0 coll))]\n     (count-if #(< %1 (f %1)) coll)))", "user": "5e3ef7d4e4b01d43a70e8e2d"}, {"problem": 120, "code": "(fn [s]\n  (count\n   (filter #(< % (reduce (fn [a x] (+ a (* (Integer/parseInt (str x)) (Integer/parseInt (str x))))) 0 (str %))) s)))", "user": "5e246f92e4b05b4b01516150"}, {"problem": 120, "code": "(fn [a] (count (filter (fn g [n]\n  (< n (reduce + (map #(* % %) (map #(- (int %) (int \\0)) (str n)))))) a)))", "user": "5e42b688e4b01d43a70e8e6b"}, {"problem": 120, "code": "(fn [list] (letfn [(get-all-digits [number]\n           (lazy-seq\n             (when-let [_ (pos? number)]\n               (cons (mod number 10) (get-all-digits (quot number 10)))\n               )))\n\n         (squared-component-digits [number]\n           (->> (get-all-digits number)\n                (map #(* % %))\n                (reduce +)\n                ))\n         \n         (square-less-than-number? [number]\n           (< number (squared-component-digits number)))\n         ]\n\n   (->> list\n        (filter square-less-than-number?)\n        (count))\n   ))", "user": "5e491182e4b043cd24807a46"}, {"problem": 120, "code": "(fn [col]\n            (letfn [(toDigits [n]\n                      (map (comp read-string str) (str n)))\n                    (sumSqrd [num]\n                      (reduce (fn [result x]\n                                (+ result (* x x)))\n                              0 (toDigits num)))]\n              (count (filter #(< % (sumSqrd %)) col))))", "user": "5e1c3e6ee4b0dc9594008530"}, {"problem": 120, "code": "(fn ssd [[f & b :as l]]\n  (if (nil? l) 0\n    (let [sum (apply + (map #(* % %) (map (comp read-string str) (str f))))]\n    \t(+ (ssd b) (if (< f sum) 1 0)))))", "user": "5e3a25d4e4b01d43a70e8dde"}, {"problem": 120, "code": "(fn [c]\n  (letfn [(digit-seq [num]\n            (loop [n num res []]\n              (if (zero? n)\n                res\n                (recur (long (/ n 10)) (cons (mod n 10) res)))))\n          (squared-digit-sum [num]\n            (reduce + (map #(* % %) (digit-seq num))))]\n    (->> c\n         (filter #(< % (squared-digit-sum %)))\n         count)))", "user": "5dc72a9ce4b02f9375f4e1cd"}, {"problem": 120, "code": "(fn [s]\n  (count (filter \n          (fn [i] (< i \n                     (->> i str (map str) (map #(Integer. %)) (map #(* % %)) (apply +))))\n          s)))", "user": "5e5b8d92e4b0fd0acd158658"}, {"problem": 120, "code": "(fn [nums]\n  (let [digits (fn [number]\n                 (or (->> number\n                     \t(iterate #(quot % 10))\n                      \t(take-while pos?)\n                      \t(map #(mod % 10))\n                      \t(apply vector)\n                      \trseq)\n                     '(0)))\n        sum-squares (fn [numbers]\n                      (reduce #(+ %1 (* %2 %2)) 0 numbers))]\n    (count (filter #(< % (sum-squares (digits %))) nums))))", "user": "5dcc152ae4b02b31cc3da3c3"}, {"problem": 120, "code": "(fn [ra]\n(count\n  (filter true?\n    (map\n      (fn [n]\n        (let [arr (map read-string (map str (seq (str n))))\n              b (reduce (fn [r v] (+ r (* v v))) 0 arr)]\n          (< n b)\n        )    \n      )\n      ra\n    )\n  )\n)\n)", "user": "5e2586afe4b05b4b01516167"}, {"problem": 120, "code": "(fn [numbers]\n   (letfn [(get-digits [num] (->> (str num)\n                     seq\n                     (map (comp read-string str))))]\n      (reduce (fn [counter number]\n                (let [digits (get-digits number)]\n                  (if (< number (apply + (map #(* % %) digits)))\n                    (inc counter)\n                    counter\n                    )\n                  )\n                ) 0 numbers)))", "user": "5e348945e4b0650de70e2b1d"}, {"problem": 120, "code": "(fn [coll]\n  (letfn [(dig-sq-sum [n]\n            (->> n\n                 (str)\n                 (map #(- (int %) 48))\n                 (map #(* % %))\n                 (reduce +)))]\n    (count (filter #(< % (dig-sq-sum %)) coll))))", "user": "5c3796b3e4b0d62ef62d9f77"}, {"problem": 120, "code": "(fn sum-square [coll]\n  (let [digits (fn [n] (map #(- (int %) 48) (str n)))\n        square #(* % %)\n        sum-digits (fn [n] (reduce + (map square (digits n))))]\n    (count (filter #(< % (sum-digits %)) coll))))", "user": "5e48ec09e4b043cd24807a45"}, {"problem": 120, "code": "(fn sum-of-square-of-digits [coll-of-integers]\n        (let [sums-of-squared-components\n              (map #(reduce + %)\n                   (map (fn [is]\n                          (map (fn [i] (let [i (- (int i) 48)]\n                                         (* i i )))\n                               is))\n                        (map (comp #(seq %) str) coll-of-integers)))]\n          (count (filter true? (map\n                                #(< %1 %2)\n                                coll-of-integers\n                                sums-of-squared-components)))))", "user": "5a5d0726e4b0512ff01cd91b"}, {"problem": 120, "code": "(fn greater-than-square-of-digits [numbers]\n   (count (filter (fn [num] (< num (reduce + (map #(* % %) (map (comp read-string str) (str num)))))) numbers)))", "user": "5b337ff4e4b025bcb146f339"}, {"problem": 120, "code": "(fn [xs] (.size (filter (fn [v] (< v (apply + (map (fn [d] (* (Integer/valueOf (str d)) (Integer/valueOf (str d)))) (str v))))) xs)))", "user": "5e6b9955e4b04a83ad7cd27b"}, {"problem": 120, "code": "#(count (filter (fn [x] \n                  (let [digits (->> x str (map (comp read-string str)))\n                        sum-of-sq-digits (apply + (map (fn [n] (* n n)) digits))]\n                    (< x sum-of-sq-digits))) %))", "user": "5e6e6537e4b04a83ad7cd29a"}, {"problem": 120, "code": "(fn square-digit-sum-less-count [coll]\n  (let [digit-square-sum (fn [x]\n                           (->> (str x)\n                                (map #(Character/getNumericValue %))\n                                (map #(* % %))\n                                (reduce +)))]\n    (count (for [x coll\n                 :let [y (digit-square-sum x)]\n                 :when (< x y)]\n             x))))", "user": "5e7b1ef4e4b085ba37836e10"}, {"problem": 120, "code": "(fn square-of-digits [coll]\n  (let [pred (fn [n]\n               (->>\n                (loop [n n acc []]\n                  (if (= n 0) acc (recur (quot n 10) (conj acc (mod n 10)))))\n                (map #(* % %))\n                (reduce +)\n                (< n)))]\n    (count (filter pred coll))))", "user": "5471f2fbe4b094393f72dd70"}, {"problem": 120, "code": "#(count (filter (fn [n]\n            (<\n              n\n              (reduce\n                (fn [x y] (+ x (* y y)))\n                0\n                (map (comp read-string str) (seq (str n))))))\n          %1))", "user": "5ddd6cfae4b0948ae9d9adc4"}, {"problem": 120, "code": "(fn [coll]\n  (count (filter #(< % (reduce (fn [sum d]\n                                 (let [v (- (int d) 48)] (+ sum (* v v))))\n                               0 (str %)))\n                 coll)))", "user": "4eb70649535d7eef30807373"}, {"problem": 120, "code": "(fn p120 [xs]\n  (count\n   (filter\n    (fn [n]\n      (->> n\n           (str)\n           (seq)\n           (map (fn [c] (int c)))\n           (map (fn [d] (- d 48)))\n           (map (fn [d] (* d d)))\n           (reduce +)\n           (< n))\n      ) xs)))", "user": "5b4b8cd6e4b02d533a91bc9f"}, {"problem": 120, "code": "(fn func [coll]\n  (letfn [(get-digits [num]\n                      (if (= 0 num)\n                        []\n                        (cons (rem num 10) (get-digits (quot num 10)))))]    \n    (count\n     (filter \n      (fn [num] (< num (reduce + (map #(* % %) (get-digits num)))))\n      coll))))", "user": "5e805895e4b085ba37836e44"}, {"problem": 120, "code": "#(letfn [(digits [n]  (if (< n 10) [n] (conj (digits (quot n 10)) (rem n 10))))]\n(->> %\n(map (fn [x] (vector x (reduce + (map (fn [y] (* y y)) (digits x))))))\n(filter (fn [v] (pos? (- (get v 1) (get v 0)))))\n(count)\n))", "user": "5e13a6b7e4b099d064963001"}, {"problem": 120, "code": "(fn [x] (count (filter (fn[y] (< y (reduce + (map (fn [z] (Math/pow (- (int z)48) 2)) (str y))))) x)))", "user": "5e8ce2fee4b0cb0169546328"}, {"problem": 120, "code": "(fn [coll]\n   (letfn [(digits\n             ([n] (if (zero? n) '(0) (digits n ())))\n             ([n acc]\n              (if (zero? n)\n                acc\n                (digits (quot n 10) (conj acc (mod n 10))))))]\n     (count\n       (filter (fn [[origin value]] (< origin value))\n               (map vector coll\n                    (map (fn [coll] (reduce + coll))\n                         (map (fn [coll] (map #(* % %) coll))\n                              (map digits coll))))))))", "user": "5e99cbd4e4b0157ca96647e6"}, {"problem": 120, "code": "(fn [xs]\n  (->> (for [x xs]\n         (->> x\n              str\n              (map #(Integer/parseInt (str %)))\n              (map #(* % %))\n              (apply +)\n              (< x)))\n       (filter identity)\n       count))", "user": "53528cd3e4b084c2834f4af2"}, {"problem": 120, "code": "(fn [x]\n    (loop [res 0 l x]\n      (if (empty? l)\n        res\n        (recur\n          (if \n            (< (first l)\n              (loop [sum 0 ll (first l)]\n                (if (= 0 ll) \n                  sum \n                  (recur \n                    (+ sum  (* (mod ll 10) (mod ll 10))  )  \n                    (int ( / ll 10))\n                  )  \n                ) \n              )\n            )\n            (+ res 1)\n            res\n          )\n          (rest l)\n        )\n      )\n    )\n)", "user": "5e94ff5fe4b0fbed045a37ff"}, {"problem": 120, "code": "(fn [s]\n  (count \n    (filter \n      (fn [i] \n        (< i (reduce + (map #(Math/pow % 2)\n        (map #(Character/digit % 10) (take-while identity (str i))))))) \n      s)))", "user": "5e6ca949e4b04a83ad7cd289"}, {"problem": 120, "code": "(fn sum-square-digits [coll]\n  (let [digits (fn [n] (map #(- (int %) 48) (str n)))\n        square #(* % %)\n        sum-digits (fn [n] (reduce + (map square (digits n))))]\n    (count (filter #(< % (sum-digits %)) coll))))", "user": "5e9771dee4b0157ca96647d0"}, {"problem": 120, "code": "(fn [coll]\n   (count (filter true? (map #(< %1 %2)\n        coll\n        (map\n          #(reduce\n             (fn [r digit]\n               (let [n (- (int digit) 48)]\n                 (+ r (* n n)))\n               )\n             0 (str %)\n             ) coll)))))", "user": "5ccc2a03e4b0ccb06196288f"}, {"problem": 120, "code": "(fn sum-square [coll]\n  (let [digits (fn [n] (map #(- (int %) 48) (str n)))\n        square #(* % %)\n        sum-digits (fn [n] (reduce + (map square (digits n))))]\n    (count (filter #(< % (sum-digits %)) coll))))", "user": "5e9e408fe4b00a66d4a95172"}, {"problem": 120, "code": "(fn sumsquare [arg]\n  (let [digits (fn [n]\n                     (map #(Integer/valueOf (str %)) (String/valueOf n)))\n        sqrt (fn [n]\n                     (apply + (map #(* % %) (digits n))))\n       ]\n    (count (filter #(< % (sqrt %)) arg))))", "user": "5e978fe5e4b0157ca96647d1"}, {"problem": 120, "code": "(fn square\n  [n]\n  (let [sum (fn [x]\n              (apply + (map (comp #(* % %) #(Integer/parseInt (str %))) (str x))))]\n    (count (filter #(< % (sum %)) n))))", "user": "5e95013fe4b0fbed045a3800"}, {"problem": 120, "code": "(fn sumsqrt [arg]\n  (let [digits \n        (fn [n](map #(Integer/valueOf (str %)) (String/valueOf n)))\n        \n        sqrd (fn [n](apply + (map #(* % %) (digits n))))\n        \n        res-seq (filter #(< % (sqrd %)) arg)]\n    (count res-seq)))", "user": "5e9d1c75e4b0157ca9664801"}, {"problem": 120, "code": "(fn [s]\n  (let [digits (fn [x] (loop [result '()\n                              x x]\n                         (if (zero? x)\n                           result\n                           (recur\n                             (cons (mod x 10) result)\n                             (quot x 10)))))\n\n        square-digits (fn [s] (reduce + (map #(* % %) s)))]\n\n    (count (filter true? (map < s (map square-digits (map digits s)))))))", "user": "5e950178e4b0fbed045a3801"}, {"problem": 120, "code": "(fn sum-square [coll]\n  (let [numbers (fn [n] (map #(- (int %) 48) (str n)))\n        square #(* % %)\n        sum (fn [n] (reduce + (map square (numbers n))))]\n    (count (filter #(< % (sum %)) coll))))", "user": "5e950310e4b0fbed045a3802"}, {"problem": 120, "code": "(fn sumsquare\n  [n]\n  (let [sum (fn [x]\n              (apply + (map (comp #(* % %) #(Integer/parseInt (str %))) (str x))))]\n    (count (filter #(< % (sum %)) n))))", "user": "5ea3711ae4b00a66d4a9519d"}, {"problem": 120, "code": "(fn sum-square [coll]\n  (let [digits (fn [n] (map #(- (int %) 48) (str n)))\n        square #(* % %)\n        sum-digits (fn [n] (reduce + (map square (digits n))))]\n    (count (filter #(< % (sum-digits %)) coll))))", "user": "5ea6f88de4b00a66d4a951b1"}, {"problem": 120, "code": "(fn [lst]\n  (let [digits (fn [x] (map #(- (int %) 48) (str x)))\n        square #(* % %)\n        digit-square-sum (fn [n] (reduce + (map square (digits n))))\n        ]\n    (count (filter #(< % (digit-square-sum %)) lst))\n    )\n  )", "user": "5ea7b04de4b00a66d4a951b6"}, {"problem": 120, "code": "(fn solution [coll]\n  (reduce (fn [acc, number]\n            (let [digits (->> number str (map (comp read-string str)))\n                  sum (reduce #(+ %1 (* %2 %2)) 0 digits)]\n              (if (> sum number)\n                (inc acc)\n                acc))) 0 coll))", "user": "5e2ef900e4b05b4b015161fc"}, {"problem": 120, "code": "(fn [aseq]\n  (count (filter #(= 1 %)\n    (loop [x aseq r []]\n     (if (not (seq x))\n       r\n       (recur (rest x) (conj\n                        r\n                        (if (< (first x) (reduce + (map #(* (- (int %) 48) (- (int %) 48)) (str (first x)))))\n                          1\n                          0))))))))", "user": "5e12327ee4b099d064962fe5"}, {"problem": 120, "code": "(fn __ [x]\n  (let [get-digits (fn [n]\n                     (map #(Integer/valueOf (str %)) (String/valueOf n)))\n        digits-sqr (fn [n]\n                     (apply + (map #(* % %) (get-digits n))))\n        res-seq (filter #(< % (digits-sqr %)) x)]\n    (count res-seq))\n  )", "user": "5b73e500e4b047b03b2036ba"}, {"problem": 120, "code": "(fn [ns]\n  (letfn [(sq [n]\n            (->> n\n                 (iterate #(quot % 10))\n                 (take-while #(> % 0))\n                 (map #(* (mod % 10) (mod % 10)))\n                 (reduce +)))]\n    (count (filter #(< % (sq %)) ns))))", "user": "5eb1c786e4b00a66d4a95201"}, {"problem": 120, "code": "(fn [s]\n  (letfn [(square [x] (* x x))\n          (sum-of-digit-squares ([x] (sum-of-digit-squares x 0)) ([x s] (if (< x 10) (+ (square x) s) (sum-of-digit-squares (quot x 10) (square (rem x 10))))))]\n    (count (filter #(< % (sum-of-digit-squares %)) s))))", "user": "592ac17ae4b072a2710fcf26"}, {"problem": 120, "code": "(fn [xs] (count (filter (fn [x]\n                           (->> x str vec\n                                (map (comp #(* % %) read-string str))\n                                (apply +)\n                                (< x)))\n                         xs)))", "user": "5ec3a13ae4b08d0ec38692b9"}, {"problem": 120, "code": "(fn [xs] (let [sumsq (fn [n] (->> (str n)\n                                  (map #(Character/getNumericValue %))\n                                  (map #(* %1 %1))\n                                  (reduce +)))]\n           (count (filter #(< % (sumsq %)) xs))))", "user": "5de12192e4b0948ae9d9aded"}, {"problem": 120, "code": "(fn [coll] \n  (count\n  (filter \n   (fn [number] \n      (< number\n          (reduce +\n                  (map (fn [x] (* x x))\n                       (map (fn [xstr] (read-string (str xstr)))\n                            (seq (str number))))))) \n     coll)))", "user": "5ea970d1e4b00a66d4a951c6"}, {"problem": 120, "code": "(fn [col]\n   (count (filter\n           (fn [n]\n             (< n\n                (apply +\n                       (map\n                        #(Math/pow (- (int %) 48) 2)\n                        (str n)))))\n           col)))", "user": "5eb193fde4b00a66d4a951fe"}, {"problem": 120, "code": "(fn cnt-sqrt [arg]\n  (let [get-digits (fn [n]\n                     (map #(Integer/valueOf (str %)) (String/valueOf n)))\n        digits-sqr (fn [n]\n                     (apply + (map #(* % %) (get-digits n))))\n        res-seq (filter #(< % (digits-sqr %)) arg)]\n    (count res-seq)))", "user": "5eccbce6e4b016b56eae058e"}, {"problem": 120, "code": "(fn f [x]\n  (count \n    (filter true? \n      (map\n        (fn [x] (< x (reduce + (map (fn [x] (* x x)) (map #(Character/digit % 10) (str x))))))\n        x\n      )\n    )\n  )\n)", "user": "5ed15e23e4b016b56eae05ba"}, {"problem": 120, "code": "(fn\n  [coll]\n  (letfn [(sum-digs [n]\n          (reduce #(+ %1 (* %2 %2))\n                  0\n                  (map #(Character/digit % 10) (str n))))]\n    (count (filter #(< % (sum-digs %)) coll))))", "user": "5ecfd429e4b016b56eae05a9"}, {"problem": 120, "code": "(fn [xs]\n  (let [sq (fn [x]\n             (loop [result 0 n x]\n               (if (zero? n)\n                 result\n                 (recur (+ result (* (mod n 10)\n                                     (mod n 10)))\n                        (quot n 10)))))]\n    (loop [cnt 0 [x & r :as all] xs]\n      (if (empty? all)\n        cnt\n        (if (< x (sq x))\n          (recur (inc cnt) r)\n          (recur cnt r))))))", "user": "5ebdb3d2e4b00a66d4a95275"}, {"problem": 120, "code": "(comp \n  count \n  (fn [coll]\n    (filter \n      (fn [n]\n        (< n \n          (apply + (map #(let [digit (- (int %) 48)](* digit digit)) (str n)))))\n \t  coll)))", "user": "5ed9c2cde4b0c7845d86b0e4"}, {"problem": 120, "code": "(fn [lst]\n  (let [ num-less-than-sq (fn [val] (< val\n                                       (apply + (map #(apply * (repeat 2 (Integer/parseInt (str %)) )) (str val)))))]\n   \n    (reduce (fn [a v] (if (num-less-than-sq v) (inc a) a)) 0 lst))\n   \n  \n  )", "user": "53c73e8ae4b00fb29b2212a5"}, {"problem": 120, "code": "(fn [s]\n  (let [ssq #(loop [k % r 0]\n               (let [ld (* (mod k 10) (mod k 10))]\n                 (if (< k 10)                   \n                   (+ r ld)                     \n                   (recur (quot k 10) (+ r ld)))))\n        ts (map ssq s)]                           \n    (reduce + (map #(if (< %1 %2) 1 0) s ts))))", "user": "5e42ba49e4b01d43a70e8e6c"}, {"problem": 120, "code": "(fn n-smaller [s] (letfn [(sosd [n] (->> n (str) (seq) (map int) (map #(- % 48)) (map #(* % %)) (apply +)))\n                          (smaller? [n] (< n (sosd n)))]\n                    (count (filter smaller? s))))", "user": "5ee93720e4b029a2061bbeb7"}, {"problem": 120, "code": "(fn [coll]\n  (count (remove #(nil? %) \n                 (map  \n                  #(let [sum (reduce + (for [c (str %)] (let [d (Character/digit c 10)] (* d d))))]\n                     (if (> sum %)\n                       sum\n                       nil))\n                      coll))))", "user": "5ee738dee4b029a2061bbea2"}, {"problem": 120, "code": "(fn sum-of-square-of-digits [s]\n  (count (filter #(let [l (rem % 10)\n                        f (last (take-while pos? (iterate (fn [i]\n                                                            (quot i 10)) %)))\n                        sum (+ (* l l) (* f f))]\n                    (< % sum)) (nnext s))))", "user": "5c665311e4b0fca0c16226a7"}, {"problem": 120, "code": "(fn [xs]\n  (let [digits (fn [x] (map #(Character/getNumericValue %) (str x)))\n        sumsq (fn [x] (->> x digits (map #(* % %)) (reduce +)))]\n    (count (filter #(< % (sumsq %)) xs))))", "user": "597dcb0ce4b0dbe32238d0a2"}, {"problem": 120, "code": "(fn [arr]\n  (count \n    (filter \n      (fn [n] \n        (< n ((fn calc [n] (if (= n 0) 0 (+ (* (mod n 10) (mod n 10)) (calc (quot n 10))))) n))) \n        arr)))", "user": "5eb4927fe4b00a66d4a95221"}, {"problem": 120, "code": "(fn sum-square\n  [coll]\n  (reduce \n   (fn [acc, cv]\n     (if (< \n          cv  \n          (->> cv str (map (comp #(* % %) read-string str)) (apply +))) \n          (inc acc) \n          acc)\n   )\n   0\n   coll\n   ))", "user": "5dd25ca8e4b0948ae9d9ad55"}, {"problem": 120, "code": "(fn [coll]\n  (->> (map (fn [i]\n              (->> (str i)\n                   (map (fn [d] (Integer/valueOf (str d))))\n                   (map (fn [x] (* x x)))\n                   (reduce +)))\n            coll)\n       (map < coll)\n       (filter identity)\n       count))", "user": "5ec6de19e4b08d0ec38692da"}, {"problem": 120, "code": "(fn [s]\n   (letfn [(digits [n]\n             (if (>= n 10)\n               (conj (digits (quot n 10)) (mod n 10))\n               [n]))]\n     (count (filter #(apply < %)\n                    (map (fn [n] (list n\n                                  (reduce (fn [r d] (+ r (* d d))) 0\n                                          (digits n)))) s)))))", "user": "5eee7311e4b07c55ae4a0510"}, {"problem": 120, "code": "(fn [xs]\n  (letfn [(sum-o-sq [x] (reduce + (map (comp #(* % %) #(- % 48) int) (vec (str x)))))]\n    (count (filter (fn [x] (< x (sum-o-sq x))) xs))))", "user": "5df08767e4b093ff717275bf"}, {"problem": 120, "code": "(fn q120 [coll]\n  (letfn [(mytest [n] (< n (reduce + (map #(int (Math/pow (Integer. (str %)) 2)) (str n)))))]\n    (count (filter mytest coll))))", "user": "5ee81beae4b029a2061bbeac"}, {"problem": 120, "code": "(fn [r]\n  (letfn [(sqd [n] (apply + (map #(* % %) (map (comp read-string str) (str n)))))]\n    (count (filter #(> (sqd %) %) r))))", "user": "5bafd5c8e4b0a20761a234dd"}, {"problem": 120, "code": "(fn smaller-sum-square\n  [xs]\n  (letfn [(num-digits [in]\n            (map #(- (int %) 48) ((comp seq char-array str) in)))\n          (sum-sq-comp [in]\n            (< in (apply + (map #(* % %) (num-digits in)))))]\n    (count (filter true? (map #(sum-sq-comp %) xs)))))", "user": "5e9b7aefe4b0157ca96647f1"}, {"problem": 120, "code": "(fn sum-of-sq-digits\n  [coll]\n  (let [digits (fn [n] (map #(- (int %) 48) (str n)))\n        squared-component-digits (fn [digits] (reduce + (map #(* % %) digits)))]\n        (count (filter #(< % (squared-component-digits (digits %))) coll))))", "user": "5eec1001e4b07c55ae4a0502"}, {"problem": 120, "code": "(fn [ints]\n    (count (for [i ints\n                 :let [s (reduce #(let [c (Integer/parseInt (str %2))]\n                                    (+ %1 (* c c))) 0 (str i))]\n                 :when (< i s)]\n             s)))", "user": "5f02f365e4b0cf489e8d7f2c"}, {"problem": 120, "code": "reduce\n#(+ %\n    (if (< %2 (apply + (for [c (str %2)]\n                         (Math/pow (- (int c) 48) 2))))\n      1\n      0))\n0", "user": "5799b260e4b05b1deef9adc8"}, {"problem": 120, "code": "(fn [s]\n    (->> s\n         (filter (fn [n]\n                   (let [squared (->> (str n)\n                                      (map #(Integer/parseInt (str %)))\n                                      (map #(* % %))\n                                      (apply +))]\n                     (< n squared))))\n         (count)))", "user": "5bc7f2d6e4b07a9b28b100b7"}, {"problem": 120, "code": "(fn\n  [xs]\n  (let [make-digit (fn [n] (map #(Integer/valueOf (str %)) (String/valueOf n)))\n        sqr-digit (fn [n] (apply + (map #(* % %) (make-digit n))))]\n    (count (filter #(> (sqr-digit %) %) xs))))", "user": "5ef18431e4b07c55ae4a0529"}, {"problem": 120, "code": "(fn [nums]\n  (->> nums ; (8 9 (1 0) 11) \n       (map str)\n       (map seq)\n       (map (fn [digits] (map #(- (int %) 48) digits)))\n       (map #(reduce (fn [ss n] (+ ss (* n n))) 0 %))\n       (keep-indexed (fn [idx ss] (or (< (nth nums idx) ss)\n                                      nil)))\n       count))", "user": "5f0b8243e4b0f30dddfb5d45"}, {"problem": 120, "code": "(fn [coll]\n   (count (filter  \n            (fn [x]\n              (let [sq (apply + (map (fn [y] (Math/pow y 2)) (map #(Character/digit % 10) (str x))))\n                    _ (println \"x:\" x)]\n                (< x sq)))\n            coll)))", "user": "58ed2e21e4b056aecfd47d7a"}, {"problem": 120, "code": "(fn [nums] (count\n            (filter\n             (fn [n] (\n                      let [digits (map #(- (int %) 48) (str n))\n                           squares (map #(* % %) digits)\n                           sumofsquares (reduce + squares)]\n                      (< n sumofsquares)))\n             nums)))", "user": "4eb97234535dfed6da9c6d53"}, {"problem": 120, "code": "(fn [c] (let [sq #(* % %)\n              sq-comp #(reduce + (map (fn [x] (sq (- (int x) 48))) (seq (str %))))]\n          (reduce #(if (< %2 (sq-comp %2)) (inc %) %) 0 c)))", "user": "5f03ab5be4b0cf489e8d7f37"}, {"problem": 120, "code": "(letfn [(digits [x] (if (= 0 x) [] (cons (mod x 10) (digits (quot x 10)))))\n        (ltsq? [y] (->> (digits y) (map #(* % %)) (apply +) (< y)))]\n    (fn [sq] (count (filter ltsq? sq))))", "user": "5ecc0831e4b016b56eae058c"}, {"problem": 120, "code": "(fn [r]\n  (count\n   (filter\n    (fn [x] (< x (apply + (map #(let [n (- (int %) 48)] (* n n)) (str x)))))\n    r)))", "user": "5e3071abe4b05b4b01516213"}, {"problem": 120, "code": "(fn clj4\n  [coll]\n  (let [digits (fn\n                 [n]\n                 (->> n\n                      str\n                      (map (comp read-string str))))\n        square (fn \n                 [n]\n                 (apply + (map #(Math/pow %1 2) (digits n))))\n        sum-digits (fn [n] (reduce + (map square (digits n))))]\n    (count (filter #(< % (sum-digits %)) coll))))", "user": "5ec5f7f2e4b08d0ec38692d1"}, {"problem": 120, "code": "(fn [xs]\n  (letfn [(n->digits [n]\n            (->> (iterate #(quot % 10) n)\n                 (take-while pos?)\n                 (mapv #(mod % 10))\n                 rseq))]\n    (->> (filter\n          (fn [x]\n            (->> (n->digits x)\n                 (reduce\n                  #(+ (* %2 %2) %1)\n                  0)\n                 (< x)))\n          xs)\n         count)))", "user": "5dc88a38e4b02f9375f4e1db"}, {"problem": 120, "code": "(fn [coll]\n  (count (filter (fn [num]\n                   (< num (reduce #(+ %1 (let [x (Character/digit %2 10)]\n                                           (* x x)))\n                                  0\n                                  (str num))))\n                 coll)))", "user": "5c24671be4b07e362c2305a1"}, {"problem": 120, "code": "(fn [l] (count (filter (fn [n] (< n (reduce + (map #(Math/pow (Integer/parseInt (str %)) 2) (str n))))) l)))", "user": "5f2c02d1e4b033932238a65f"}, {"problem": 120, "code": "(fn sum-square [coll]\n  (let [digits (fn [n] (map #(- (int %) 48) (str n)))\n        square #(* % %)\n        sum-digits (fn [n] (reduce + (map square (digits n))))]\n    (count (filter #(< % (sum-digits %)) coll))))", "user": "52215fe1e4b0e6a83c8925cf"}, {"problem": 120, "code": "(fn count-smaller-than-sum-of-digits [coll]\n  (letfn [(num->digits [n]\n            (loop [n n res '()]\n              (if (< n 10)\n                (conj res n)\n                (recur (quot n 10) (conj res (mod n 10))))))\n          (sum-squares [ds] (reduce #(+ %1 (* %2 %2)) 0 ds))]\n    (->> coll\n         (filter #(< % (sum-squares (num->digits %))))\n         count)))", "user": "5f300f28e4b033932238a682"}, {"problem": 120, "code": "(fn [args]\n  (count (remove false?\n           (map (fn [n]\n              (< n ((fn sqr-sum [s m]\n                      (if (= 0 m) s\n                        (sqr-sum (+ s (#(* % %) (rem m 10))) (int (/ m 10))))) 0 n))) args))))", "user": "58f98231e4b0438e51c2cf4c"}, {"problem": 120, "code": "(fn [s]\n   (letfn [(digits [n]\n             (when-let [num (if (= n 0) nil n)]\n               (lazy-seq (cons (mod num 10) (digits (quot num 10))))))\n           (c-p [n]\n             (> (reduce #(+ %1 (* %2 %2)) 0 (digits n)) n))]\n     (count (filter #(c-p %) s))\n     ))", "user": "5f3f2281e4b004f08c61c561"}, {"problem": 120, "code": "(fn my-count [nums]\n  (letfn\n    [(sums [n]\n           (loop [n   n\n                  acc 0]\n             (if (= n 0)\n               acc\n               (let [d (rem n 10)]\n                 (recur (quot n 10) (+ acc (* d d)))))))]\n    (count (filter #(< % (sums %)) nums))))", "user": "53d63e6ce4b0e771c3025454"}, {"problem": 120, "code": "(fn [x]\n  (let [dub (fn [n] (* n n))\n        split (fn [n] (map #(Integer/parseInt %) (map str ((comp vec str) n))))\n        dub-parts (reduce\n                    (fn [out part]\n                      (let [nval (reduce + (into [] (map dub (split part))))]\n                        (if (> nval part)\n                          (conj out nval)\n                          out)))\n                    []  \n                    x\n                  )]\n        (count dub-parts)\n  )\n)", "user": "5f3a8493e4b004f08c61c527"}, {"problem": 120, "code": "(fn [coll] (letfn [(digits-squared [n]\n  (loop [rst n sum 0]\n    (if (= 0 rst)\n      sum\n      (recur (quot rst 10) (+ sum (* (mod rst 10) (mod rst 10)))))))] \n             (count (filter #(< % (digits-squared %)) coll))))", "user": "5f2c94b4e4b033932238a669"}, {"problem": 120, "code": "#(letfn [(squareString [s] (let [n (Integer/parseInt (str s))] (* n n)))\n         (smallerThanSum [x] (->> (str x)\n                                  (map squareString)\n                                  (reduce +)\n                                  (< x)))]\n    (->> %\n         (filter smallerThanSum)\n         count))", "user": "5f3abcc4e4b004f08c61c52b"}, {"problem": 120, "code": "(fn [coll] \n   (count (filter (fn[num] (< num (->> (str num) ; e.g. \"15\"\n                    (seq)     ; \\1 \\5\n                    (map str) ; \"1\" \"5\"\n                    (map #(java.math.BigInteger. % 10)); 1 5\n                    (map #(* % %)); 1 25\n                    (apply +); 26\n                    )\n             ))\n          coll)))", "user": "5f0824c5e4b0cf489e8d7f5b"}, {"problem": 120, "code": "(fn [s]\n  (count (filter\n     (fn [x] (< x (apply + (map #(* % %) (map #(- (int %) 48) (seq (str x)))))))\n\n     s))\n  )", "user": "5f58db95e4b0a0bc16850a9a"}, {"problem": 120, "code": "(fn [coll]\n    (let [digitfn (fn [n] (loop [n n, d []]\n            (if (< n 10) \n                (conj d n) \n                (recur (quot n 10) (conj d (rem n 10))))))]\n        (count (filter \n            (fn [n] (< n (reduce + (map #(* % %) (digitfn n)))))\n            coll))))", "user": "5eff6c0ee4b0cf489e8d7f11"}, {"problem": 120, "code": "(fn [collection] \n  (count \n   (filter (fn [x] (let [digits(map #(Integer/parseInt %) (map str (seq (str x))))]\n                     (> (apply + (map * digits digits)) x))) collection)))", "user": "5f5f2eafe4b02876ed9fcff5"}, {"problem": 120, "code": "(letfn [(digits [n]\n            (map #(Integer/parseInt %)\n                 (filter (complement empty?)\n                         (clojure.string/split (str n) #\"\"))))\n          (sum-of-squares [coll]\n            (reduce + (map #(* % %) coll)))]\n    (fn [coll]\n      (count (filter #(apply < %)\n                     (map #(vector % (sum-of-squares (digits %)))\n                          coll)))))", "user": "531bf76fe4b08068f379ed96"}, {"problem": 120, "code": "(fn sum [lst]\n  [lst]\n  (let [square #(* % %)\n        digits (fn [n] (map #(- (int %) 48) (str n)))\n        sum-digits (fn [n] (reduce + (map square (digits n))))]\n    (count (filter #(< % (sum-digits %)) lst))))", "user": "5f724f55e4b02876ed9fd089"}, {"problem": 120, "code": "(fn [s] (count (filter true? (map #(< % (reduce (fn [a b] (+ a (* b b))) 0\n                                               (map (comp read-string str) (str %)))) s))))", "user": "588fbb39e4b00487982d51bd"}, {"problem": 120, "code": "(fn [items] (count (filter #(< % (reduce + (map (comp (fn [n] (* n n)) (fn [d] (Character/digit d 10))) (str %)))) items)))", "user": "5f763c78e4b02876ed9fd0b0"}, {"problem": 120, "code": "(fn [nums]\n  (let [checker\n        (fn [num]\n          (let [digits (loop [remainder num\n                              inner-digits []]\n                         (if (< remainder 10)\n                           (conj inner-digits remainder)\n                           (recur (int (/ remainder 10)) (conj inner-digits (rem remainder 10)))))]\n            (< num (->> digits\n                        (map #(* % %))\n                        (doall)\n                        (apply +)))))]\n\n    (count (filter checker nums))))", "user": "5f79bff2e4b02876ed9fd0ca"}, {"problem": 120, "code": "(fn sos\n    [xs]\n    (let [ns (map (fn [x] (map #(- (int %) 48) (str x))) xs)\n          sos (map (fn [n] (reduce + (map #(* % %) n))) ns)]\n      (->> (map #(< %1 %2) xs sos) (filter #{true}) count)))", "user": "507e68abe4b085af06e3afd2"}, {"problem": 120, "code": "(fn count-square [xs]\n  (let [digit-square (fn [n]  (loop [x n result 0]\n                                (if (= x 0)\n                                  result\n                                  (recur\n                                    (quot x 10)\n                                    (+ result (#(* % %) (rem x 10))))))\n                       )]\n    (count (filter #(= % true) (map #(< % (digit-square %)) xs)))))", "user": "5cea0bd4e4b0a17bb84e2bc9"}, {"problem": 120, "code": "(fn sum-square [coll]\n  (let [digits (fn [n] (map #(- (int %) 48) (str n)))\n        square #(* % %)\n        sum-digits (fn [n] (reduce + (map square (digits n))))]\n    (count (filter #(< % (sum-digits %)) coll))))", "user": "5f727bd1e4b02876ed9fd08c"}, {"problem": 120, "code": "(fn sum-square [x]\n  (let [digits (fn [n] (map #(- (int %) 48) (str n)))\n        square #(* % %)\n        sum-digits (fn [n] (reduce + (map square (digits n))))]\n    (count (filter #(< % (sum-digits %)) x))))", "user": "5f727dd6e4b02876ed9fd090"}, {"problem": 120, "code": "#(count (remove nil? (for [x %]\n    (if (< x     (reduce + (for [y (seq (str x))]\n              (* (- (int y) 48) (- (int y) 48) ))))\n        (int 1)\n        )\n\n       )))", "user": "5f77b99fe4b02876ed9fd0bc"}, {"problem": 120, "code": "(fn sum- [x]\n  (let [digits (fn [n] (map #(- (int %) 48) (str n)))\n        square #(* % %)\n        sum- (fn [n] (reduce + (map square (digits n))))]\n    (count (filter #(< % (sum- %)) x))))", "user": "5f7e91c8e4b0c071e6c840d8"}, {"problem": 120, "code": "(fn sum-square [coll]\n  (let [digits (fn [n] (map #(- (int %) 48) (str n)))\n        square #(* % %)\n        sum-digits (fn [n] (reduce + (map square (digits n))))]\n    (count (filter #(< % (sum-digits %)) coll))))", "user": "5f72f144e4b02876ed9fd093"}, {"problem": 120, "code": "(fn sum-square [coll]\n  (let [digits (fn [n] (map #(- (int %) 48) (str n)))\n        square #(* % %)\n        sum-digits (fn [n] (reduce + (map square (digits n))))]\n    (count (filter #(< % (sum-digits %)) coll))))", "user": "5f84f0f5e4b0375e81f54e78"}, {"problem": 120, "code": "(fn sum-square [coll]\n  (let [digits (fn [n] (map #(- (int %) 48) (str n)))\n        square #(* % %)\n        sum-digits (fn [n] (reduce + (map square (digits n))))]\n    (count (filter #(< % (sum-digits %)) coll))))", "user": "5f8361bae4b01aacbe7a2712"}, {"problem": 120, "code": "(fn [lst] (let [sumSqr (map (fn[elem] (reduce + (map #(* % %) (->> elem str (map (comp read-string str)))))) lst)]\n               (loop [c 0\n                      lst lst\n                      sumSqr sumSqr]\n                   (if (empty? lst)\n                       c\n                       (if (< (first lst) (first sumSqr))\n                           (recur (inc c) (rest lst) (rest sumSqr))\n                           (recur c (rest lst) (rest sumSqr))\n        )))))", "user": "5f727d2fe4b02876ed9fd08f"}, {"problem": 120, "code": "(fn sum-square [coll]\n  (let [digits (fn [n] (map #(- (int %) 48) (str n)))\n        square #(* % %)\n        sum-digits (fn [n] (reduce + (map square (digits n))))]\n    (count (filter #(< % (sum-digits %)) coll))))", "user": "5f87e757e4b0169f6814c40f"}, {"problem": 120, "code": "(fn [lst]\n    (reduce + (map (fn [a]\n    (let [dig (map #(Character/digit % 10) (str a))\n          sdig (reduce +(map * dig dig))]\n        (if (< a sdig)\n            1\n            0))) lst)))", "user": "5f74de11e4b02876ed9fd0a5"}, {"problem": 120, "code": ";;Hello Tteacher, this few last ones I had to look for them, I didn't want to put them as my own creation so if you don't want to consider them its fine,\n;;  I do hope that we can discuss them in class.\n\n(fn sum_square [coll]\n  (let [digits (fn [n] (map #(- (int %) 48) (str n)))\n        square #(* % %)\n        sum_digits (fn [n] (reduce + (map square (digits n))))]\n    (count (filter #(< % (sum_digits %)) coll))))", "user": "5f8497dce4b0375e81f54e74"}, {"problem": 120, "code": "(fn[s]\n     (let [sums (vec(map #(reduce + %) (map (fn[x]\n                                 (map #(* (Character/getNumericValue %)\n                                          (Character/getNumericValue %)) (str x))) s)))] \n         (count (filter #(< % (sums %)) s))))", "user": "5f77890ae4b02876ed9fd0b9"}, {"problem": 120, "code": "(fn [v] (reduce +\n         (map \n          (fn [s] \n           (let [n (map #(Character/digit % 10) (str s))]\n             (if (> (reduce + (map #(* % %) n)) s) 1 0)))\n                v)))", "user": "5eb741e4e4b00a66d4a9523b"}, {"problem": 120, "code": "(fn ssd [s]\n  (letfn [(digt [i]\n            (loop [i i\n                   r '()]\n              (if (= i 0)\n                r\n                (recur (quot i 10) (conj r (rem i 10))))))]\n    (reduce (fn [c e]\n              (if (< e (reduce (fn [sum d] (+ sum (* d d)))\n                               0\n                               (digt e)))\n                (+ c 1)\n                c))\n            0\n            s)))", "user": "5f8b06afe4b0715f5002d74a"}, {"problem": 120, "code": "(fn [coll]\n  (letfn [(sum-sqd [n] (->> n str (map (comp #(* % %) #(Character/digit % 10))) (apply +)))]\n    (count (filter #(< % (sum-sqd %)) coll))))", "user": "596a66cde4b069c0a1a19803"}, {"problem": 120, "code": "(fn sum-square-digits\n  [s]\n  (let [get-components (fn [n] (map #(Integer/valueOf (str %)) (str n)))\n        sqr-digits (fn [n] (apply + (map #(* % %) (get-components n))))]\n    (count (filter (fn [x] (< x (sqr-digits x)))\n                   s))))", "user": "5f3103aee4b0574c87022c24"}, {"problem": 120, "code": "(fn [rg] (count (filter (fn [n] (< n (apply + (map  #(Math/pow (Integer/parseInt (str %)) 2) (str n))))) rg)))", "user": "5f8e865fe4b0715f5002d76d"}, {"problem": 120, "code": "(fn [ns]\n  (let [digits (fn [n] (loop [res []\n                              n n]\n                         (if (zero? n)\n                           res\n                           (recur (conj res (mod n 10))\n                                  (quot n 10)))))\n        squared-digs (fn [n] (map #(* % %) (digits n)))\n        match? (fn [n] (< n (reduce + (squared-digs n))))]\n    (->> (filter match? ns)\n         count)))", "user": "5f93529ae4b0715f5002d7bc"}, {"problem": 120, "code": "(fn [z] \n   (let [a (map (fn [x] (->> (str x) seq (map str) (map read-string) (map (fn [y] (* y y))) (reduce +))) z)] \n     (count (filter #(> (first %) (second %)) (partition 2 (interleave a z))))\n     )\n   )", "user": "5f8fe45ae4b0715f5002d78d"}, {"problem": 120, "code": "(fn\n[vn]\n  (loop [i 0 s (vec vn) r 0]\n    (if (= i (count vn))\n      r\n      (if (< (s i) (reduce + (map (fn [n] (* n n)) (map (comp read-string str) (str (s i))))))\n        (recur (inc i) s (inc r))\n        (recur (inc i) s r)\n))))", "user": "5dd70ee3e4b0948ae9d9ad85"}, {"problem": 120, "code": "(fn \n  [s]\n  (loop [[hd & tl] s ans 0]\n    (if (nil? hd)\n      ans\n      (let [res ((fn sum-of-square-of-digits\n              [s]\n              (reduce + (map #(* % %) (map #(Character/getNumericValue %) (str s))) )) hd)]\n        (if (> res hd)\n          (recur tl (inc ans))\n          (recur tl ans)\n        )\n      )\n    )\n  )\n)", "user": "5f6b8222e4b02876ed9fd052"}, {"problem": 120, "code": "(fn filt [nums]\n  (let [ds (fn [n]\n             (->> n (str) (seq)\n                  (map #(read-string (str %)))\n                  (map #(* % %))\n                  (apply +)))]\n    (count (filter (fn [n] (< n (ds n))) nums))))", "user": "5f648ef1e4b02876ed9fd01b"}, {"problem": 120, "code": "(fn f [l]\n\t(count \n     (filter #(< % (apply +\n                          (map (fn [x]\n                                 (Math/pow (- (int x) 48) 2)) \n                               (seq (str %)))))\n             l)))", "user": "5f6a583ae4b02876ed9fd046"}, {"problem": 120, "code": "(fn sum-square [coll]\n  (let [digits (fn [n] (map #(- (int %) 48) (str n)))\n        square #(* % %)\n        sum-digits (fn [n] (reduce + (map square (digits n))))]\n    (count (filter #(< % (sum-digits %)) coll))))", "user": "5ee4545ee4b029a2061bbe8d"}, {"problem": 120, "code": "(fn prob-120 [c]\n  (letfn [(to-digits [n]\n            (loop [k n acc []]\n              (let [q (quot k 10)\n                    m (mod k 10)]\n                (if (zero? q)\n                  (conj acc m)\n                  (recur q (conj acc m))))))\n          (is-specific [n]\n            (< n (reduce + (map #(* % %) (to-digits n)))))]\n    (count (filter is-specific c))))", "user": "5f86a98be4b0649ffcda4caa"}, {"problem": 120, "code": "(fn [coll]\n  (let [digs (fn [n] (map #(read-string (str %)) (str n)))\n        qualified-number? (fn [n] (< n (apply + (map * (digs n) (digs n)))))]\n    (count (filter qualified-number? coll))))", "user": "5fa74b82e4b0fa27300f3dda"}, {"problem": 120, "code": "(fn [n]\n    (let [\n        sqr #(* % %)\n        test (fn test\n                [x]\n                (if (zero? x) 0\n                    (+ (sqr (mod x 10)) (test (quot x 10)))))]\n                        (count (filter #(> (test % ) %) n))))", "user": "5fa358a1e4b0f0ebd91b77fd"}, {"problem": 120, "code": "(fn [xs] ( ->> xs\n  (map (fn [y] (< y ((fn digs [x] (let [q (quot x 10) r (rem x 10)] (if (< x 10) (* x x) (+ (digs q) (* r r))))) y))))\n  (filter true?)\n  count\n  ))", "user": "5fa17538e4b0f0ebd91b77e3"}, {"problem": 120, "code": "(fn [n] (count (for [x n \n                     :when (< x (reduce + (map #(* % %) (map #(Character/digit % 10) (str x)))))]\n              x)))", "user": "5f3567d6e4b0574c87022c44"}, {"problem": 120, "code": "(fn [nums]\n  (letfn [(sum-squared-digs [x]\n        (if (> x 0) (+ (* (mod x 10) (mod x 10)) (sum-squared-digs (quot x 10))) x))]\n  (count (filter #(< % (sum-squared-digs %)) nums))))", "user": "5e471203e4b043cd24807a2a"}, {"problem": 120, "code": "(fn [coll]\n    (reduce\n      (fn [count value]\n          (let [digits (vec (str value))\n                sum (apply + (map #(* (Character/digit % 10) (Character/digit % 10)) digits))]\n               (if (> sum value)\n                 (inc count)\n                 count)))\n      0\n      coll))", "user": "5f331015e4b0574c87022c37"}, {"problem": 120, "code": "(fn [m] (count (filter \n(fn [n] (if (> ((fn ss [n] (if (= n 0) 0 \n                 (+ (ss (int (/ n 10))) \n                    (* (mod n 10) \n                       (mod n 10))))) n) n) true)) m)))", "user": "5fab7ea6e4b08cb800c85ad8"}, {"problem": 120, "code": "(fn [coll]\n   (->> coll\n        (filter\n         (fn [x]\n           (->> (str x)\n                (map (comp read-string str))\n                (reduce #(+ % (* %2 %2)) 0)\n                (< x))))\n        (count)))", "user": "5fa96ddbe4b0fa27300f3dec"}, {"problem": 120, "code": "(fn [xs] \n  (count \n   (filter\n    (fn [x]\n      (< x \n         (apply + \n                (map #(* % %) \n                     (loop \n                       [y x \n                        ds ()]\n                       (if (zero? y)\n                         ds\n                         (recur (quot y 10) \n                                (cons (mod y 10) ds))))))))\n    xs)))", "user": "5fa5a6b1e4b0fa27300f3dc8"}, {"problem": 120, "code": "(fn [s]\n    (letfn [(sq [x] (* x x))\n            (sum-of-sq [n]\n              (loop [i   n\n                     acc 0]\n                (if (zero? i)\n                  acc\n                  (let [x (mod i 10)\n                        i' (quot i 10)\n                        acc' (+ acc (sq x))]\n                    (recur i' acc')))))\n            (smaller-than-squares? [n]\n              (< n (sum-of-sq n))) ]\n      (->> s\n           (filter smaller-than-squares?)\n           count)))", "user": "573a0ecce4b0cd1946bd1088"}, {"problem": 120, "code": "(fn [s] (let [sum-of-digit-squares-greater?\n               (fn\n                 [v] \n                 (->> v \n                      str\n                      (re-seq #\"\\d\")\n                      (map #(Long/parseLong %))\n                      (map #(* % %))\n                      (reduce +)\n                      (< v)))] \n           (->> s   \n                (filter sum-of-digit-squares-greater?)\n                count)))", "user": "5fc61b45e4b06010e5ea651a"}, {"problem": 120, "code": "#(reduce (fn [xs x] \n           (\n            cond \n            \t(< x (reduce (fn [xsN xN] (+ xsN (* (- (int xN) (int \\0)) (- (int xN) (int \\0))  )) ) 0 (str x))) (inc xs)\n            \t   :else xs\n            )) 0 %)", "user": "5fc5c303e4b02c825b0c8c1a"}, {"problem": 120, "code": "(fn sum-sq-dg [coll]\n  (count (filter (fn [x]\n             (< x (->> (seq (str x))\n                       (map #(- (int %) (int \\0)))\n                       (map #(* % %))\n                       (apply +)\n                       )))\n           coll)))", "user": "5f38eecce4b0574c87022c72"}, {"problem": 120, "code": "(fn poo [n]\n  \n  (let [loo (fn zoo [n]\n              (let [x (int (/ n 10))]\n                (if (> n 0)\n                  (+ (int (Math/pow (mod n 10) 2)) (zoo x))\n                  n)))]\n\n    (count (filter #(< % (loo %)) n)))\n  \n  \n  )", "user": "5f1aade6e4b091ba50b4dbe4"}, {"problem": 120, "code": "(fn \n  [xs]\n  (letfn [(digits [x]\n            (if (<= x 0)\n              []\n              (lazy-seq (cons (rem x 10) (digits (quot x 10))))))\n          (sum-of-squares [digs]\n            (->> digs\n                 (map #(* % %))\n                 (reduce +)))\n          (less-than-sum-of-squares? [x]\n            (< x (->> x digits sum-of-squares)))]\n    (->> xs\n         (map less-than-sum-of-squares?)\n         (filter true?)\n         count)))", "user": "5484c3b2e4b0e286459a11a2"}, {"problem": 120, "code": "(fn cnt-coll [coll] (count \n  (filter \n    (fn [el] \n      (< el (reduce + (map #(Math/pow % 2) (map #(Character/digit % 10) (str el))))))\n      coll)\n))", "user": "5f96fa49e4b0715f5002d7e9"}, {"problem": 120, "code": "(fn [xs]\n  (letfn [(digits [n] (map (comp read-string str) (str n)))\n          (sum-of-squared-digits [n] (apply + (map #(* % %) (digits n))))]\n    (->> xs\n         (map sum-of-squared-digits)\n         (map #(< %1 %2) xs)\n         (filter identity)\n         (count))))", "user": "5b77248ae4b047b03b2036e7"}, {"problem": 120, "code": "(fn [i]\n  (letfn [(digits [n]\n            (->> n\n                 (iterate #(quot % 10))\n                 (take-while pos?)\n                 (mapv #(mod % 10))\n                 rseq))\n          (s [i] \n                                       (->> (digits i)\n                                            (reduce (fn [acc a] (+ acc (* a a))) 0)\n                                            ))]\n    (count (filter true? (map #(> (s %) %) i)))\n    ))", "user": "5f419985e4b0955706451fab"}, {"problem": 120, "code": "(fn [input]\n  (count (filter true? (map (fn [num] (let [digits (map #(Character/digit % 10) (str num))]\n                                        (< num (reduce #(+ %1 (* %2 %2)) 0 digits))))\n                            input))))", "user": "54c13b87e4b0ed20f4ff6f20"}, {"problem": 120, "code": "(fn [ints]\n  (letfn [(digits-squared-sum [n] \n                              (->> (seq (str n))\n                                   (map (fn [c] \n                                          (let [digit (Character/digit c 10)]\n                                            (* digit digit))))\n                                   (reduce +)))]\n  (->> ints\n       (filter #(< % (digits-squared-sum %)))\n       (count))))", "user": "5fef4292e4b05ac5b16ea1d7"}, {"problem": 120, "code": "(fn [s]\n        (let [ss (fn [d]\n                   (->> (map #(- (int %) (int \\0)) (str d))\n                        (map #(* % %))\n                        (reduce +)))]\n          (->> s\n               (filter #(< % (ss %)))\n               (count))))", "user": "546c4377e4b00cfc9eacc177"}, {"problem": 120, "code": "(fn [s]\n   (letfn [(digits [n]\n             (map #(Character/digit % 10) (str n)))\n           (if-sum-square-smaller [n]\n             (< n (reduce #(+ %1 (* %2 %2)) 0 (digits n))))]\n      (count (filter if-sum-square-smaller s))))", "user": "5fd8bcb3e4b05ac5b16ea11b"}, {"problem": 120, "code": "(fn foo [col]\n  (letfn [(sum-digit-squares [n]\n            (reduce + (map (fn [x]\n                             (let [sx (Integer/parseInt (str x))]\n                               (* sx sx))) (str n))))] \n    (count (filter (fn [x] (< x (sum-digit-squares x))) col))))", "user": "5fb68f09e4b08cb800c85b58"}, {"problem": 120, "code": "(fn [c]\n  (let [digs #(for [d (str %)] (Character/digit d 10))\n        sqr #(* % %)\n        sum #(apply + (map sqr (digs %)))]\n    (count (filter #(< % (sum %)) c))))", "user": "5fd10010e4b07e53c2f3f02a"}, {"problem": 120, "code": "reduce (fn [cnt num]\n          (loop [currNum num sum 0]\n            (if (zero? currNum)\n              (if (< num sum )\n                (+ cnt 1)\n                cnt\n                )\n              (recur (int (/ currNum 10)) (+ sum (int( Math/pow (mod currNum 10) 2))) )\n              )\n            )\n          ) 0", "user": "5fd361f2e4b07e53c2f3f04e"}, {"problem": 120, "code": "(fn [c]\n    (letfn [(sum-of-squared-digits [n]\n              (reduce (fn [acc x]\n                        (+ acc (* x x)))\n                      0\n                      (map #(Integer. (str %)) (str n))))]\n      (->> c\n           (filter #(< % (sum-of-squared-digits %)))\n           (count))))\n\n\n;; (fn [c]\n;;     (letfn [(ff [x rst]\n;;               (if (zero? x)\n;;                 rst\n;;                 (let [curr (rem x 10)\n;;                       curr-squared (* curr curr)\n;;                       new-rst (+ rst curr-squared)\n;;                       next-x (quot x 10)]\n;;                   (recur next-x new-rst))))\n;;             (sum-of-squared-digits [n]\n;;               (ff n 0))]\n;;       (->> c\n;;            (filter #(< % (sum-of-squared-digits %)))\n;;            (count))))\n\n;; (fn [c]\n;;     (letfn [(sum-of-squared-digits [n]\n;;               (->> n\n;;                    (str)\n;;                    (map (comp read-string str))\n;;                    (map #(* % %))\n;;                    (apply +)))]\n;;       (->> c\n;;            (filter #(< % (sum-of-squared-digits %)))\n;;            (count))))", "user": "591ad160e4b09b4ee5954bdf"}, {"problem": 120, "code": "(fn sum-of-square-of-digits [ls]\n  (count (for [elem ls\n               :when (< elem ((fn sum-squared-digits [n]\n                               (loop [n n\n                                      acc 0]\n                                 (if (= n 0)\n                                   acc\n                                   (recur (quot n 10) (+ acc (* (mod n 10) (mod n 10))))))) elem))\n               ]\n           elem\n           ))\n  )", "user": "5fe1b893e4b05ac5b16ea16f"}, {"problem": 120, "code": "(fn [coll]\n  (let [digits (fn digits [n]\n                 (if (< n 10)\n                   (list n)\n                   (cons (rem n 10) (digits (quot n 10)))))]\n    (count (filter\n            #(< % (apply + (map * (digits %) (digits %))))\n            coll))))", "user": "54d7e277e4b0a52adc2e2031"}, {"problem": 120, "code": "(fn [s] \n\n  (letfn [ (check-if-less-than-ssd [num] \n             (let [ssoc (->> num\n                             str\n                             seq\n                             )\n                   son (map #(->> % str Integer.) ssoc)\n                   ssd-fn (fn [s] (reduce #(+ %1 (* %2 %2)) (* (first s) (first s)) (rest s)))\n      ;;   ssd-fn (fn [s] (if (= (count s) 1) (* (first s) (first s)) (reduce #(+ %1 (* %2 %2)) s))) \n                   ssd (ssd-fn son)\n\n                   \n                   ](< num ssd) ))]\n    (count (filter true? (map check-if-less-than-ssd s)))))", "user": "5ff676a9e4b06df49cee1497"}, {"problem": 120, "code": "(fn [xs]\n  (let [to-digits (fn [n] (->> n str (map (comp #(- % 48) int))))\n        ]\n    (->> xs\n       \t(map \n         (fn [x] \n           (< x \n               (reduce + (map #(* % %) (to-digits x)))\n               )))  \n        (filter true?)\n         (count)\n    )\n  )\n  )", "user": "6004c750e4b074f607df6645"}, {"problem": 120, "code": "(fn [se] (count\n          (filter (fn [elm]\n                    (if (< elm 10)\n                      (< elm (* elm elm))\n                      (< elm (apply + (map (comp #(* % %) read-string str first)\n                                           (split-at 1 (str elm)))))))\n                  se)))", "user": "5fbf6fe7e4b0ad6fc3476147"}, {"problem": 120, "code": "(fn count-lt-square-sum?\n  [xs]\n  (count (filter (fn [n] (->> n\n                              (str)\n                              (map str)\n                              (map read-string)\n                              (map #(* % %))\n                              (apply +)\n                              (< n)))\n                 xs)))", "user": "5f37263de4b0574c87022c4e"}, {"problem": 120, "code": "(fn cnt-sqrt [arg]\n  (let [get-digits (fn [n]\n                     (map #(Integer/valueOf (str %)) (String/valueOf n)))\n        digits-sqr (fn [n]\n                     (apply + (map #(* % %) (get-digits n))))\n        res-seq (filter #(< % (digits-sqr %)) arg)]\n    (count res-seq)))", "user": "6001460ce4b074f607df6611"}, {"problem": 120, "code": "(fn foo [coll]\n    (letfn [(digits [n]\n                    (loop [n n acc '()]\n                         (if (= n 0)\n                             acc\n                             (recur (quot n 10) (conj acc (rem n 10))))))]\n        (count (filter (fn [n] (< n (reduce + (map #(* % %) (digits n))))) coll))))", "user": "600ae927e4b074f607df6689"}, {"problem": 120, "code": "(fn f\n  [col]\n  (count\n   (filter\n    (fn f\n      [a]\n      (letfn [(g\n                [n]\n                (->> n\n                     str\n                     seq\n                     (map (comp\n                           #(Math/pow % 2)\n                           read-string\n                           str))\n                     (reduce +)))]\n        (< a (g a))))\n    col)))", "user": "5da7176ae4b000c986472c13"}, {"problem": 120, "code": "(fn [s]\n  (count\n   (filter\n    #(< %1 ((fn [digits]\n             (reduce (fn [acc v] (+ acc (* v v))) 0 digits))\n           ((fn [n] ; get digits\n              (->> n\n                   str\n                   seq\n                   (map str)\n                   (map read-string)))\n            %1))) s)))", "user": "5edd05bfe4b0c7845d86b0f3"}, {"problem": 120, "code": "(fn sumsq [coll]\n  (let [sfn (fn [coll]\n              (loop [coll (reverse (str coll))\n                     sum 0\n                     cnt 0]\n                (if-let [num (first coll)]\n                  (let [f (Integer/parseInt (str num))]\n                    (recur (rest coll) (+ sum (* f f)) (inc cnt)))\n                  sum)))]\n    (count (filter #(< % (sfn %)) coll))))", "user": "5ff8ead1e4b06df49cee14ab"}, {"problem": 120, "code": "(fn [xs]\n  (letfn [(sq [x] (* x x))\n          (digits [x] (map #(Integer/parseInt (str %)) (str x)))\n          (sum-sq [x] (apply + (map sq (digits x))))\n          (s? [x]\n            (< x (sum-sq x)))]\n    (count\n      (filter true?\n        (map s? xs)))))", "user": "583369e6e4b089d5ab817c9c"}, {"problem": 120, "code": "(fn [coll]\n  (count\n   (filter (fn [n]\n             (< n (->> n\n                       (iterate #(quot % 10))\n                       (take-while pos?)\n                       (mapv #(mod % 10))\n                       (mapv #(* % %))\n                       (apply +))))\n           coll)))", "user": "5a3e1243e4b0447ef91cc5ae"}, {"problem": 120, "code": "(fn [seq]\n    (letfn [(sum-sq-digits\n              ([x] (sum-sq-digits x 0))\n              ([x total]\n               (if (= x 0)\n                 total\n                 (let [digit (mod x 10)\n                       squared (* digit digit)]\n                   (sum-sq-digits (int (/ x 10)) (+ total squared))))))\n            (ssd-lt [x]\n              (if (< x (sum-sq-digits x)) 1 0)\n                ;; (< x (sum-sq-digits x))\n              )]\n      (apply +  (map ssd-lt seq))\n      ))", "user": "57fc0719e4b0d3187e900987"}, {"problem": 120, "code": "(fn weird-thing-3 [coll]\n  (let [digits         (fn [n]\n                         (loop [result '()\n                                i      n]\n                           (if (zero? i)\n                             result\n                             (recur (conj result (rem i 10)) (quot i 10)))))\n        sum-of-squares (fn [coll] (apply + (map #(* % %) coll)))\n        how-many       (fn [p coll] (count (filter p coll)))]\n    (how-many #(< % (sum-of-squares (digits %))) coll)))", "user": "601aaa93e4b0bf4ca6b10926"}, {"problem": 120, "code": "(fn [lst] \n  (let [f #(->> %\n                (str)\n                (map str)\n                (map (fn [x] (Integer/parseInt x)))\n                (map (fn [x] (* x x)))\n                (reduce +)\n                )]\n    (->> lst\n         (map (fn [x] (if (< x (f x)) 1 0)))\n         (reduce +))))", "user": "6011b89ee4b074f607df66bc"}, {"problem": 120, "code": "(fn [xs]\n  (letfn [(sum-of-squared-digits [n]\n            (loop [n n\n                   sum 0]\n              (if (= n 0)\n                sum\n                (let [last (mod n 10)] (recur (quot n 10) (+ sum (* last last)))))))]\n    (->>\n      xs\n      (filter #(> (sum-of-squared-digits %) %))\n      count)))", "user": "57e10705e4b0bfb2137f5a6a"}, {"problem": 120, "code": "(fn sum-square [coll]\n  (let [digits (fn [n] (map #(- (int %) 48) (str n)))\n        square #(* % %)\n        sum-digits (fn [n] (reduce + (map square (digits n))))]\n    (count (filter #(< % (sum-digits %)) coll))))", "user": "5ff709e4e4b06df49cee149b"}, {"problem": 120, "code": "(fn [xs]\n  (let [digit-value (fn [ys] (map #(- (int %) 48) (str ys)))\n        sum-digits  (fn [zs] (reduce + (map #(* % %) (digit-value zs))))]\n    (->> \n      xs\n      (filter #(< % (sum-digits %)))\n      count)))", "user": "4e6a23d0535d8ccf87e9fea0"}, {"problem": 120, "code": "#(let [check (fn check [n rst sum]\n           (if (zero? rst)\n             (< n sum)\n             (check n (quot rst 10) (+ sum (* (rem rst 10) (rem rst 10)) ))))]\n   (count (filter (fn [n]\n                    (check n n 0))\n                  %)))", "user": "60096aabe4b074f607df667f"}, {"problem": 120, "code": "(fn [items] \n  (count (filter true? (map (fn [num] (< num (apply + (map #(* % %) (map read-string (map str (str num))))))) items))))", "user": "5f309144e4b0574c87022c23"}, {"problem": 120, "code": "(fn [r]\n  (count\n    (for [x r\n          :when (> (reduce #(+ %1 (apply * (repeat 2 (- (int %2) 48))))\n                           0\n                           (str x))\n                   x)]\n      x)))", "user": "4e38f245535deb9a81d77f3e"}, {"problem": 120, "code": "(fn [szn]\n  (letfn [(ssum [string] (if (empty? string) 0 (+ (* (read-string (str (first string))) (read-string (str (first string))))\n                                                  (ssum (rest string)))))]\n  (loop [s szn c 0]\n    (if (empty? s) c\n      (recur (rest s) (+ c (if (> (ssum (str (first s))) (first s)) 1 0)))))))", "user": "60264d89e4b0d5df2af2222d"}, {"problem": 120, "code": "(fn sol [xs]\n  (let [ok? (fn [n]\n           (let [digits (->> n str (map (comp read-string str)))\n                 sumsq (reduce + (map #(* % %) digits))]\n             (> sumsq n)))]\n   (->> xs\n        (filter ok?)\n        count)))", "user": "55a65872e4b09e57187da299"}, {"problem": 120, "code": "(fn [numbers]\n  (let [int->digits #(mapv (fn [^Character c] (Character/digit c 10)) (str %))\n        sum-of-squares (fn [digits] (reduce #(+ % (* %2 %2)) 0 digits))\n        sos (comp sum-of-squares int->digits)\n        sum-of-squares>int? #(if (> (sos %2) %2) (+ %1 1) %1)]\n    (reduce sum-of-squares>int? numbers)))", "user": "6026737ee4b0d5df2af2222f"}, {"problem": 120, "code": "(fn sum-squared-digits [coll]\n  (count (filter (fn [e] (< e (->> e\n                                   (str)\n                                   (seq)\n                                   (map str)\n                                   (map read-string)\n                                   (map #(* % %))\n                                   (apply +))))\n                 coll)))", "user": "5fada7cce4b08cb800c85af5"}, {"problem": 120, "code": "(fn a [an]\n    (let [digit (fn [n] (map #(- (int %) 48) (str n)))\n          square #(* % %)\n          sum-sq (fn [n] (reduce + (map square (digit n)) ))\n    ]\n     (count (filter #(< % (sum-sq %)) an))\n    )\n    )", "user": "5fe09d1fe4b05ac5b16ea15b"}, {"problem": 120, "code": "(fn [xs] (reduce (fn [count number]\n                    (let [sum-of-squares (fn [x] (->> x \n                                                      str \n                                                      seq\n                                                      (map str)\n                                                      (map #(Integer. %) )\n                                                      (map #(* % %) )\n                                                    (reduce + )\n                                                    ) )] \n                    (if (< number (sum-of-squares number)) (inc count)\n                      count))) 0 xs ))", "user": "5a778224e4b013a48d399761"}, {"problem": 120, "code": "(fn foo [arr]\n  (let [helper  (fn helper [x]\n        (loop [len (-> x str (clojure.string/split #\"\") count)\n               x x\n               sum 0 ]\n          (if (zero? len) (int sum)\n              (recur (dec len) (-> x (/ 10) int)\n                     (+ sum (java.lang.Math/pow (rem x 10) 2))\n                     )\n              )\n          )\n        )]\n    \n               \n  (cond (empty? arr) 0\n              (< (first arr) (helper (first arr))) \n              (+ 1 (foo (rest arr)))\n              :else (foo(rest arr))\n              )\n        ))", "user": "6038b6b4e4b0d5df2af222ef"}, {"problem": 120, "code": ";(fn ssd [s]\n;  (count (filter #(< % \n;    ((fn sum-square [v]\n;      (if (zero? (quot v 10))\n;        (* (mod v 10) (mod v 10))\n;        (+ (* (mod v 10) (mod v 10)) (sum-square (quot v 10)))\n;      )\n;    ) %)) s))  \n;)\n\n(fn ssd [s]\n  (count\n    (filter \n      (fn ss [v]\n        (< v (apply + (map #(* % %) (map (comp read-string str) (str v)))))\n      ) \n      s\n    )\n  )\n)", "user": "60335b35e4b0d5df2af222bf"}, {"problem": 120, "code": "(fn [ns]\n    (-> (filter\n         (fn [n]\n           (< n (apply + (map (fn [n-char]\n                                (Math/pow (Integer/parseInt (str n-char))\n                                          2))\n                              (str n)))))\n         ns)\n        count))", "user": "603d5f2ae4b0d5df2af2230c"}, {"problem": 120, "code": "(fn [xs]\n  (let \n    [digits (fn d [x]\n              (when (pos? x)\n                (cons (mod x 10) (d (/ (- x (mod x 10)) 10)))))\n     fits (fn [x]\n            \n            (< x (reduce + (map #(* % %) (digits x))))\n            \n            )]\n  (count (filter fits xs))))", "user": "6045582fe4b02d28681c77b6"}, {"problem": 120, "code": "(fn [s]\n  (letfn [(d [n]\n            (if (< n 10) [n]\n              (conj (d (quot n 10)) (mod n 10))))\n          (sq [n] (* n n))]\n    (count (filter (fn [n]\n                     (< n (apply + (map sq (d n))))) s))))", "user": "591e0782e4b09b4ee5954c25"}, {"problem": 120, "code": "(fn problem120 [l]\n  (let [sum-square-digits (fn [n]\n                            (->> (iterate #(quot % 10) n)\n                                 (take-while pos?)\n                                 (map #(mod % 10))\n                                 (map #(* % %))\n                                 (reduce +)))]\n    (count (filter #(< % (sum-square-digits %)) l))))", "user": "60460824e4b02d28681c77bc"}, {"problem": 120, "code": "(fn [coll]\n    (count\n     (filter (fn [n]\n               (< n (->> (loop [n n a ()]\n                           (if (pos? n)\n                             (recur (quot n 10) (conj a (rem n 10)))\n                             a))\n                         (map #(* % %))\n                         (reduce +))))\n             coll)))", "user": "6026d2cae4b0d5df2af22232"}, {"problem": 120, "code": "(letfn [(sd [x] (reduce + (map #(-> % str read-string (Math/pow 2)) (str x))))]\n   #(count (for [x % :when (< x (sd x))] x)))", "user": "512700c4e4b083bb8f88cf14"}, {"problem": 120, "code": "(fn [x] \n  (count\n  (filter (fn [y] (< y\n                     (apply + (map #(* % %) (map #(- (int %) (int \\0)) (str y)))))) x))\n)", "user": "604d3cb1e4b0b7ec0ac60ac2"}, {"problem": 120, "code": "(fn sum-square [coll]\n  (let [digits (fn [n] (map #(- (int %) 48) (str n)))\n        square #(* % %)\n        sum-digits (fn [n] (reduce + (map square (digits n))))]\n    (count (filter #(< % (sum-digits %)) coll))))", "user": "4e586949535d8a8b8723a292"}, {"problem": 120, "code": "(fn [coll]\n  (count\n   (filter true?\n           (map\n            (fn [n]\n              (< n (apply +\n                     (map #(let [x (Integer/parseInt (str %))]\n                             (* x x))\n                          (str n)))))\n            coll))))", "user": "605b7a90e4b079a07f8593fc"}, {"problem": 120, "code": "(fn __ [xs]\n  (letfn [(f1 [s] (map #(Character/digit % 10) s))\n          (f2 [digits] (map #(* % %) digits))\n          (f3 [squared] (reduce + squared))]\n    ((frequencies (map < xs (map f3 (map f2 (map f1 (map str xs)))))) true)))", "user": "526759b3e4b03e8d9a4a715b"}, {"problem": 120, "code": "(fn [seq_] \n  (count (filter (fn [n] \n                   (< n (reduce + (map #(* % %) (map #(- (int %) 48) (char-array (str n))))))) \n                 seq_))\n )", "user": "6059d824e4b07e92fa001acf"}, {"problem": 120, "code": "(fn sum-of-square [col]\n  (letfn [(digit-seq [x] (map #(Character/digit % 10) (str x)))\n          (get-sum-square [y] (reduce + (map #(* % %) (digit-seq y))))]\n         (count (filter #(< % (get-sum-square %)) col))))", "user": "59874ff6e4b021a7a535fea1"}, {"problem": 120, "code": "(fn sum-of-square-digits\n  [coll]\n  (reduce (fn\n            [count element]\n            (if (< element\n                   (reduce (fn\n                             [sum item]\n                             (+ sum (* item item))) 0\n                           (map #(Character/digit % 10) (str element))))\n              (inc count)\n              count))\n          0 coll))", "user": "60396c95e4b0d5df2af222f4"}, {"problem": 120, "code": "(fn [ints]\n   (let [to-components #(->> % str vec (map str) (map read-string))\n         square #(* % %)\n         judge #(< % (->> %\n                          to-components\n                          (map square)\n                          (apply +)))]\n     (->> ints (filter judge) count)))", "user": "54be7c0de4b0ed20f4ff6eec"}, {"problem": 120, "code": "(fn sod [xs]\n  (letfn [(sum-of-digits [n]\n            (reduce (fn [a b] (+ (* b b) a)) 0 (map #(Character/digit % 10) (str n))))]\n    (count (filter #(< % (sum-of-digits %)) xs))))", "user": "60654263e4b069485764ddc9"}, {"problem": 120, "code": "(fn [c]\n  (reduce \n     #(let [s\n           (reduce\n            (fn [x y] (+ x (* y y)))\n            0 (for [n (str %2)] (Character/digit n 10)))]\n       (if (< %2 s) (inc %) %)) 0 c))", "user": "5e5096c6e4b027a2e10ac0c6"}, {"problem": 120, "code": "(fn [arg] (\n           let [get-digits (fn [n] (map #(Integer/valueOf (str %)) (String/valueOf n)))\n                squared-num (fn [n] (apply + (map #(* % %) (get-digits n))))\n                req-seq (filter #(< % (squared-num %)) arg)]\n           (count req-seq)\n           ))", "user": "60471241e4b02d28681c77c9"}, {"problem": 120, "code": "(fn [coll]\n  (letfn [(square [n]\n            (* n n))\n          (sum-sq-digits [n]\n            (apply + (map #(square (- (int %) 48)) (str n))))\n          (reducer [acc ele]\n            (if (< ele (sum-sq-digits ele))\n              (inc acc)\n              acc))]\n    (reduce reducer 0 coll)))", "user": "5f665d45e4b02876ed9fd02f"}, {"problem": 120, "code": "(fn count-sumsq [xi]\n  (letfn\n      [(sumsq [x]\n         (reduce #(+ %1 (* %2 %2) ) 0 (map read-string (map str (seq (str x))))))]\n    (count (filter #(< %1 (sumsq %1)) xi))\n    \n    )\n  )", "user": "5fa6db67e4b0fa27300f3dd2"}, {"problem": 120, "code": "(fn [col]\n  (count\n    (filter (fn [x] (< x (apply + (map #(* % %) (map (comp read-string str) (str x)))))) col)))", "user": "60743977e4b069485764de46"}, {"problem": 120, "code": "(fn foo [rs]\n  (count\n   (filter\n     (fn [in]\n       (< in\n          (reduce\n            (fn [acc n]\n              (+ acc (* n n)))\n            0\n            (map #(- (int %) (int \\0)) (into [] (str in))))))\n     rs)))", "user": "605b49b7e4b079a07f8593f8"}, {"problem": 120, "code": "(fn [x]\n    (let [digit (fn digit [n]\n                     (if (< n 10)\n                       (list n)\n                       (cons (rem n 10) (digit (quot n 10)))))]\n         (count (filter\n                  #(< % (apply + (map * (digit %) (digit %)))) ;;;es el cuadrao tiene que se mayor\n                  x))))", "user": "6075c214e4b069485764de5b"}, {"problem": 120, "code": "(fn sum-square [coll]\n  (let [digits (fn [n] (map #(- (int %) 48) (str n)))\n        square #(* % %)\n        sum-digits (fn [n] (reduce + (map square (digits n))))]\n    (count (filter #(< % (sum-digits %)) coll))))", "user": "60764350e4b069485764de5e"}, {"problem": 120, "code": "(fn sum-square [coll]\n  (let [digits (fn [n] (map #(- (int %) 48) (str n)))\n        square #(* % %)\n        sum-digits (fn [n] (reduce + (map square (digits n))))]\n    (count (filter #(< % (sum-digits %)) coll))))", "user": "606ff89be4b069485764de22"}, {"problem": 120, "code": "(fn solve [coll]\n  (->> coll\n       (map str)\n       (map (fn [x] (->> x\n                         (map str)\n                         (map #(Integer/parseInt %))\n                         (map #(* % %))\n                         (apply +))))\n       (map < coll)\n       (filter identity)\n       count))", "user": "60537cd1e4b04c8f2157d152"}, {"problem": 120, "code": "(fn [rng]\n    (loop [i 0 res 0]\n        (if (= i (count rng))\n            res\n            (recur (inc i) (let [sosd ((fn [n] (reduce + (map #(* % %) (map #(- (int %) 48) (seq (str n)))))) (nth rng i))]\n                               (if (> sosd (nth rng i))\n                                   (inc res)\n                                   res))))))", "user": "6074df6fe4b069485764de4b"}, {"problem": 120, "code": "(fn sum-square [coll]\n  (let [digits (fn [n] (map #(- (int %) 48) (str n)))\n        square #(* % %)\n        sum-digits (fn [n] (reduce + (map square (digits n))))]\n    (count (filter #(< % (sum-digits %)) coll))))", "user": "607e1d32e4b03d835a6eaeda"}, {"problem": 120, "code": "(fn\n    [s]\n    (loop\n        [i 0\n         counter 0 \n         valor  (nth s 0)\n         ele (nth s 0)\n         r 0]\n        (cond\n            (= i (count s)) counter\n            (and (< ele 10) (< i (dec (count s)))) (if (> (+ (* (mod ele 10) (mod ele 10)) r) valor)  \n                           (recur (inc i) (inc counter) (nth s (inc i)) (nth s (inc i)) 0)\n                           (recur (inc i) counter (nth s (inc i)) (nth s (inc i)) 0)\n                           )\n            (and (< ele 10) (= i (dec (count s)))) (if (> (+ (* (mod ele 10) (mod ele 10)) r) valor)  \n                           (recur (inc i) (inc counter) valor ele 0)\n                           (recur (inc i) counter valor ele 0)\n                           )\n            :else\n            (recur i counter valor (quot ele 10) (+ r (* (mod ele 10) (mod ele 10))))\n            )\n        \n        )\n    )", "user": "6074f5ede4b069485764de52"}, {"problem": 120, "code": "#(count\n\t(clojure.set/difference \n   \t\t(set (map (fn [x y] (if (< x y) x nil)) \n        \t\t %\n        \t\t(for [j %] (reduce (fn [r x] (+ r (* x x))) 0 (vec (->> j str (map (comp read-string str))))))))\n   \t\t#{nil}))", "user": "607d6bc1e4b03d835a6eaecc"}, {"problem": 120, "code": "(fn sum-square [coll]\n  (let [digits (fn [n] (map #(- (int %) 48) (str n)))\n        square #(* % %)\n        sum-digits (fn [n] (reduce + (map square (digits n))))]\n    (count (filter #(< % (sum-digits %)) coll))))", "user": "60777335e4b0a637ed78034f"}, {"problem": 120, "code": "(fn [args]\n  (let [m {\\0 0 \\1 1 \\2 4 \\3 9 \\4 16 \\5 25 \\6 36 \\7 49 \\8 64 \\9 81}\n        f (fn [x] (reduce (fn [a x] (+ a (m x))) 0 (-> x str seq)))\n        sqs (rest (zipmap args (map f args)))]\n    (count (filter (fn [[a b]] (< a b)) sqs))))", "user": "606a70a5e4b069485764ddf2"}, {"problem": 120, "code": "(fn [coll]\n  (letfn [(lt-squares-sum [x]\n            (->> (seq (str x))\n                 (map str)\n                 (map #(Integer/parseInt %))\n                 (map #(* % %))\n                 (reduce +)\n                 (< x)))]\n    (count (filter lt-squares-sum coll))))", "user": "5f82609ae4b0c071e6c840f9"}, {"problem": 120, "code": "(fn [input]\n  (count\n   (filter (fn [numb] (< numb\n                         (->> numb\n                              str\n                              (map str)\n                              (map read-string)\n                              (map #(* % %))\n                              (apply +))))\n           input)))", "user": "5f548678e4b0a0bc16850a7e"}, {"problem": 120, "code": "(fn [a] (count (filter true? (map < a (map #(reduce + (if (< 1 (count %)) (list (* (first %) (first %)) (* (last %) (last %))) (list (* (first %) (first %))))) (map #(->> % str (map (comp read-string str))) a))))))", "user": "6074e088e4b069485764de4d"}, {"problem": 120, "code": "(fn cnt-<-x2-sum-digits [xs]\n  (letfn [(digits [n]\n            (lazy-seq\n             (loop [x n r '()]\n               (if (< x 10) (cons x r)\n                   (recur (quot x 10) (cons (mod x 10) r))))))\n          (square-sum [col]\n            (reduce + (map (fn [x] (Math/pow x 2)) col)))]\n\n    (reduce (fn [total num]\n              (let [num-digits (digits num)\n                    num-square-sum (square-sum num-digits)]\n                (if (< num num-square-sum) (inc total) total)))\n            0\n            xs)))", "user": "607dd962e4b03d835a6eaed2"}, {"problem": 120, "code": "(fn sum-square [coll]\n  (let [digits (fn [n] (map #(- (int %) 48) (str n)))\n        square #(* % %)\n        sum-digits (fn [n] (reduce + (map square (digits n))))]\n    (count (filter #(< % (sum-digits %)) coll))))", "user": "6074dfa4e4b069485764de4c"}, {"problem": 120, "code": "(fn sumSquare [coll]\n  (let [digits (fn [n] (map #(- (int %) 48) (str n)))\n        square #(* % %)\n        sumDigits (fn [n] (reduce + (map square (digits n))))]\n    (count (filter #(< % (sumDigits %)) coll))))", "user": "6074e1e4e4b069485764de4f"}, {"problem": 120, "code": "(fn sum-square [coll]\n  (let [digits (fn [n] (map #(- (int %) 48) (str n)))\n        square #(* % %)\n        sum-digits (fn [n] (reduce + (map square (digits n))))]\n    (count (filter #(< % (sum-digits %)) coll))))", "user": "6086cdefe4b0736b099e4302"}, {"problem": 120, "code": "(fn squaredig[n](let[f(fn[m]\n                        (reduce +(map #(Math/pow % 2)\n                                (for[l(str m)]\n                                  (Double/parseDouble(str l))))))\n                     nop?(fn[l](< l(f l)))]\n                     (count\n                      (filter nop? n))\n                     ))", "user": "6085edade4b0736b099e42fc"}, {"problem": 120, "code": "(fn SumOfSquareOfDigits [ran] \n  (count\n  (filter (fn [i] \n            (< i (apply + (map (fn [j] \n                                 (* j j)) \n                               (map (fn [k]\n                                      (- (int k) \n                                         (int \\0))) \n                                    (str i)))))) ran)))", "user": "607508f3e4b069485764de54"}, {"problem": 120, "code": "(fn c [integers]\n  (->> integers\n       (map (fn [n]\n              [n (map #(Character/digit % 10)\n                      (str n))]))\n       (map (fn [[n digits]]\n              [n (reduce #(+ %1 (* %2 %2))\n                         0 digits)]))\n       (reduce (fn [res [n sum-of-squares]]\n                 (if (< n sum-of-squares)\n                   (inc res)\n                   res))\n               0)))", "user": "5e218bb7e4b05b4b01516123"}, {"problem": 120, "code": "(fn sum-square [coll]\n  (let [digits (fn [n] (map #(- (int %) 48) (str n)))\n        square #(* % %)\n        sum-digits (fn [n] (reduce + (map square (digits n))))]\n    (count (filter #(< % (sum-digits %)) coll))))", "user": "608828dee4b0ae75613dcee1"}, {"problem": 120, "code": "(fn [seq]\n  (-> (fn [item]\n        (if (> 10 item)\n          (< item (* item item))\n          (< item (apply + (map (comp #(* % %) read-string str first)\n                                (split-at 1 (str item)))))))\n      (filter seq)\n      count))", "user": "6078ce29e4b0a637ed78035a"}, {"problem": 120, "code": "(fn sum-square [collec]\n  (let [digits (fn [num] (map #(- (int %) 48) (str num)))\n        square #(* % %)\n        sum-digits (fn [num] (reduce + (map square (digits num))))]\n    (count (filter #(< % (sum-digits %)) collec))))", "user": "607e1cf9e4b03d835a6eaed9"}, {"problem": 120, "code": "(fn [col]\n (count(filter (fn [x] (< x (apply + (map #(* % %) (map (comp read-string str) (str x)))))) col)))", "user": "6074e1ade4b069485764de4e"}, {"problem": 120, "code": "(fn [num](letfn [(num->digits [num]\n            (letfn [(numiter [val col]\n                      (if (>= 0 val) col\n                          (recur (quot val 10)\n                                 (conj (apply list col) (rem val 10)))))]\n              \t\t\t(numiter num [])))                    \n          \t\t\t(sum-of-square [digits]\n            \t(reduce + (map #(* % %) digits)))\n          \t\t(less-than-sos? [num]\n              (let [digits (num->digits num)\n               \t     sos (sum-of-square digits)]\n                (< num sos)))]\n    (count (filter less-than-sos? num))))", "user": "607f3336e4b05857a65e7747"}, {"problem": 120, "code": "#(loop [cuenta 0\n         coll %]\n      (if (empty? coll)\n          cuenta\n          (recur (if (< (first coll) (reduce + (map (fn [n] (* n n)) (map (fn [n] (- (int n) 48)) (str (first coll))))))\n                     (inc cuenta)\n                     cuenta)\n                 (next coll))))", "user": "6074e278e4b069485764de51"}, {"problem": 120, "code": "(fn sum-square [coll]\n  (let [digits (fn [n] (map #(- (int %) 48) (str n)))\n        square #(* % %)\n        sum-digits (fn [n] (reduce + (map square (digits n))))]\n    (count (filter #(< % (sum-digits %)) coll))))", "user": "6088c22ee4b0ae75613dcee4"}, {"problem": 120, "code": "(fn [coll]\n  (loop [counter 0 integers coll]\n    (cond\n     (empty? integers) counter\n     :else (if (< (first integers) (->> (first integers)\n                                        \t\t\t\t\t(str)\n                                        \t\t\t\t\t(map #(Math/pow (Character/getNumericValue %) 2))\n                                        \t\t\t\t\t(reduce +)))\n                  (recur (inc counter) (drop 1 integers))\n                  (recur counter (drop 1 integers))\n                    )\n            )\n     )\n   )", "user": "60752ef6e4b069485764de55"}, {"problem": 120, "code": "#(count (for [x % :when (let [x-dig (map (fn [xx] (- (int xx) 48)) (seq (str x)))]\n                          (> (apply + (for [y x-dig] (* y y))) x))] x))", "user": "6081b7fce4b0736b099e42d4"}, {"problem": 120, "code": "(fn [integers] (count\n                 (filter\n                  #(<\n                    %\n                    (apply\n                     +\n                     (map\n                      (fn [n]\n                        (*\n                         (read-string (str n))\n                         (read-string (str n))))\n                      (seq (str %)))))\n                  integers)))", "user": "5e7fb908e4b085ba37836e3f"}, {"problem": 120, "code": "(fn [coll] (count (filter (fn [x] (< x (reduce + (map #(* % %) (map (comp read-string str) (str x)))))) coll)))", "user": "607a1523e4b0a637ed78036a"}, {"problem": 120, "code": "(fn ans-120 [arr]\n  (reduce + (map\n            (fn [item]\n              (let [squaredSum\n                    (reduce + (map #(Math/pow % 2) ((fn digits [n]\n  (->> n str (map (comp read-string str)))) item)))]\n                (if (< item squaredSum)\n                  1\n                  0)))\n            arr)))", "user": "608fac60e4b03bd49d9f36c7"}, {"problem": 120, "code": "(fn sum-square [seqq]\n  (let [digits (fn [n] (map #(- (int %) 48) (str n)))\n        square #(* % %)\n        sum-digits (fn [n] (reduce + (map square (digits n))))]\n    (count (filter #(< % (sum-digits %)) seqq))))", "user": "6088395de4b0ae75613dcee2"}, {"problem": 120, "code": "(fn sum-sq [coll]\n  (reduce (fn [x y]\n            (if (< y (apply + (map #(Math/pow % 2) ((fn parse-digits [n]\n  (cons (int (rem n 10)) (when (>= n 10) (parse-digits (/ n 10))))) y))))\n              (inc x)\n              x)) 0 coll))", "user": "605a876be4b000d535e6f53c"}, {"problem": 120, "code": "(fn [l] (count (filter #(< % ((fn [n]\n                                (loop [c n, result 0]\n                                  (if (zero? c)\n                                    result\n                                    (let [m (int (/ c 10)), d (rem c 10)]\n                                      (recur m (+ result (* d d))))))) %)) l)))", "user": "60882700e4b0ae75613dcedf"}, {"problem": 120, "code": "#(reduce + (for [n % :when (< n (reduce + (for [c (str n)] (* (- (int c) 48) (- (int c) 48)))))] 1))", "user": "5eff339ae4b0cf489e8d7f0c"}, {"problem": 120, "code": "(fn sum-of-square-digits\n  [coll]\n  (letfn [(square [x] (* x x))\n          (digits [x] (map #(Character/getNumericValue ^Character %) (str x)))]\n    (reduce\n      (fn [result x]\n        (let [add? (->> (digits x)\n                        (map square)\n                        (apply +)\n                        (< x))]\n          (+ result (if add? 1 0))))\n      coll)))", "user": "6098263be4b00e9e6653c3f9"}, {"problem": 120, "code": "(fn [coll]\n  (let [sum-sq-digits (fn [n]\n                        (apply + (->> n\n                                      (iterate #(quot % 10))\n                                      (take-while pos?)\n                                      (map #(mod % 10))\n                                      (map #(* % %)))))]\n    (count (filter #(< % (sum-sq-digits %)) coll))))", "user": "60794173e4b0a637ed78035d"}, {"problem": 120, "code": "(fn [coll]\n  (reduce (fn [tot number]\n            (loop [n number  s 0]\n              (let [cn (rem n 10)]\n              (cond\n               (and (= cn 0) (< number s)) (inc tot)\n               (= cn 0) tot\n               :else (recur (quot n 10) (+ s (* cn cn) ))))))\t\t0 coll))", "user": "608ec5e4e4b03bd49d9f36c0"}, {"problem": 120, "code": "(fn [seznam]\n  (count (filter (complement nil?) (map\n                                    #(let [tmp (->>\n                                                (str %)\n                                                seq\n                                                (map str)\n                                                (map read-string)\n                                                (map (fn [x] (* x x)))\n                                                (apply +))]\n\t\t\t\t\t\t\t\t\t  (if (< % tmp) % nil))\n                                    seznam))))", "user": "5684e200e4b04eec3ec5cfc4"}, {"problem": 120, "code": "(fn [items] \n  (count\n   \t(filter true? \n       (map (fn [x] (< x (->> x (str) (seq) (map #(- (int %) (int \\0))) (map #(* % %)) (reduce +)))) items))))", "user": "60b2aaebe4b0e0fa5f1b4228"}, {"problem": 120, "code": "(fn [x]\n  (->> x\n       (filter #(let [st (->> %\n                              (str)\n                              (vec))\n                      sum (reduce (fn [a b]\n                                    (+ a\n                                       (* (- (int b) 48) (- (int b) 48)))) 0 st)]\n                  (> sum %)))\n               (count)))", "user": "60aecd73e4b00e9e6653c49a"}, {"problem": 120, "code": "(fn [s]\n  (count (filter (fn [elem]\n                   (< elem (int (reduce + (map (fn [num] (Math/pow num 2)) (map (fn [ch] (Character/digit ch 10)) (str elem))))))) s)))", "user": "60b8b0f8e4b0e0fa5f1b425c"}, {"problem": 120, "code": "(fn [coll]\n    (let [get-digits (fn [n] (->> n\n                                  (str)\n                                  (seq)\n                                  (map str)\n                                  (map #(Integer/parseInt %))))\n          digits-squared (fn [n] (apply + (map #(* % %) (get-digits n))))\n          result-seq (filter #(< % (digits-squared %)) coll)]\n      (count result-seq)))", "user": "5f8e2a08e4b0715f5002d767"}, {"problem": 120, "code": "(fn [sq]\n  (letfn [(digits [n]\n                  (rseq (mapv #(mod % 10) (take-while pos? (iterate #(quot % 10) n)))))\n          (sum-sq-digits [n]\n                         (reduce + (map #(* % %) (digits n))))]\n    (count (filter #(< % (sum-sq-digits %)) sq))))", "user": "51b920bfe4b0e871ca4958f9"}, {"problem": 120, "code": "(fn op [a]\n  (->>\n  a\n  (map str)\n  (map #(map (fn [x] (- (int x) 48)) %))\n  (map #(map (fn [x] (* x x)) %))\n  (map #(reduce + %))\n  (map #(< %1 %2) a)\n  (filter true?)\n  (count)\n  ))", "user": "5f6adf5ee4b02876ed9fd049"}, {"problem": 120, "code": "(fn [xs]\n  (->> xs\n       (map (fn [x]\n              (->> x\n                   str\n                   (map #(Character/digit % 10))\n                   (map #(* % %))\n                   (apply +)\n                   (< x))))\n       (filter identity)\n       count))", "user": "51bd78c3e4b0ff155d51d2b0"}, {"problem": 120, "code": "(fn cnt-sqrt [arg]\n  (let [get-digits (fn [n]\n                     (map #(Integer/valueOf (str %)) (String/valueOf n)))\n        digits-sqr (fn [n]\n                     (apply + (map #(* % %) (get-digits n))))\n        res-seq (filter #(< % (digits-sqr %)) arg)]\n    (count res-seq)))", "user": "601bdcb3e4b0bf4ca6b10930"}, {"problem": 120, "code": "#(count (filter true? (map (fn [n]\n       (let [[a b] (into [] (str n))\n             x (Integer/parseInt (str a))\n             y (if (not-empty (str b)) (Integer/parseInt (str b)) 0)]\n         (< n (+ (* x x) (* y y)))\n         )) %)))", "user": "604a3daee4b02d28681c77f2"}, {"problem": 120, "code": "(fn sum-square-digits\n  [nums]\n  (->> nums\n       (map (fn [n]\n              [n (->> n\n                      (str)\n                      (seq)\n                      (map #(Integer/parseInt (str %)))\n                      (map #(* % %))\n                      (reduce +))]))\n       (map (fn [[n digit-squared-sum]]\n              (if (< n digit-squared-sum)\n                1\n                0)))\n       (reduce +)))", "user": "60c0ceb7e4b0e0fa5f1b42a6"}, {"problem": 120, "code": "(fn [arr] \n  (count \n    (filter (fn [x](< x (apply + (map #(* % %) (map (comp read-string str) (str x)))))) arr)))", "user": "60bfb68be4b0e0fa5f1b429e"}, {"problem": 120, "code": "(fn sum-square [coll]\n  (let [digits (fn [n] (map #(- (int %) 48) (str n)))\n        square #(* % %)\n        sum-digits (fn [n] (reduce + (map square (digits n))))]\n    (count (filter #(< % (sum-digits %)) coll))))", "user": "609aa543e4b00e9e6653c40c"}, {"problem": 120, "code": "(fn [xs]\n  (letfn [(digit-square-sum [n]\n            (->> (str n)\n                 seq\n                 (map #(Character/digit % 10))\n                 (map #(* % %))\n                 (reduce +)))]\n\n    (->> xs\n         (map (juxt identity digit-square-sum))\n         (filter (fn [[x s]] (< x s)))\n         count)))", "user": "60c8e372e4b0e0fa5f1b42ff"}, {"problem": 120, "code": "(fn sosod [xs]\n  (letfn [(smaller-than-sosod?[n]\n          (< n\n             (reduce +\n                     (map #(* % %)\n                          (map (comp read-string str) (str n))))))]\n  (count\n   (filter smaller-than-sosod? xs))))", "user": "60c91f48e4b0e0fa5f1b4304"}, {"problem": 120, "code": "(fn sum-square [coll]\n  (let [digits (fn [n] (map #(- (int %) 48) (str n)))\n        square #(* % %)\n        sum-digits (fn [n] (reduce + (map square (digits n))))]\n    (count (filter #(< % (sum-digits %)) coll))))", "user": "5aba04dce4b073f17744269e"}, {"problem": 120, "code": "(fn [coll]\n  (count\n    (filter\n      (fn [num]\n        (let [digits (map #(Character/digit % 10) (str num))\n              square (apply + (map #(* % %) digits))]\n          (< num square)))\n      coll)))", "user": "4fe49706e4b0e8f79898feb7"}]