[{"code": "(fn rev [seq]\r\n(if (== (count seq) 1) (list (first seq)) (concat (rev (rest seq)) (list (first seq))))\r\n)", "problem": 23, "user": "4dd5e2cc535dae65d5c462ec"}, {"code": "(fn [xs] (into () xs))", "problem": 23, "user": "4db1b3951254ad5b4805fa6f"}, {"code": "(fn rev [ls]\r\n  (if (empty? ls)\r\n    []\r\n    (conj (rev (rest ls)) (first ls))))", "problem": 23, "user": "4dd62278535d2dad7130b5c7"}, {"code": "(fn [l]\r\n  (loop [r '() \r\n         l l]\r\n    (if (empty? l)\r\n      r\r\n      (recur (conj r (first l)) (rest l)))))", "problem": 23, "user": "4dd29ede535dae65d5c462da"}, {"code": "(fn [a-seq] \r\n    (reduce conj '() a-seq))", "problem": 23, "user": "4dd61f98535d2dad7130b5c6"}, {"code": "(fn [x]\r\n  (loop [r nil\r\n  \t i x]\r\n\t(if (nil? (first i))\r\n\t  r\r\n\t  (recur (conj r (first i)) (rest i)))))", "problem": 23, "user": "4dd67f10535d2dad7130b5c9"}, {"code": "(fn movelast [x] \r\n  (and (not-empty x) \r\n    (cons (last x) \r\n      (and (not-empty (drop-last x)) \r\n        (movelast (drop-last x))))))", "problem": 23, "user": "4dd579b5535dae65d5c462ea"}, {"code": "(fn[x](reduce #(conj%%2)'()x))", "problem": 23, "user": "4dd66da7535d2dad7130b5c8"}, {"code": "rseq", "problem": 23, "user": "4dd6d7ee535d2dad7130b5cb"}, {"code": "(fn [s]\r\n  (loop [orig s rev nil]\r\n    (if (seq orig)\r\n      (recur (rest orig) (conj rev (first orig)))\r\n      rev)))", "problem": 23, "user": "4dd6d6a0535d2dad7130b5ca"}, {"code": "#(into () %)", "problem": 23, "user": "4dc986d0535d5973398f9285"}, {"code": ";#(map second (sort-by first > (map-indexed list %)))\r\n(comp (partial map second) (partial sort-by first >) (partial map-indexed list))", "problem": 23, "user": "4dd6fa35535d2dad7130b5cd"}, {"code": "#(reduce (fn [a b] (cons b a)) [] %)", "problem": 23, "user": "4dd7d040535d2dad7130b5d6"}, {"code": "reduce (fn [x y] (cons y x)) []", "problem": 23, "user": "4dd865e1535d2dad7130b5d7"}, {"code": "#((fn myreverse [xs rev]\r\n   (if (empty? xs)\r\n     rev\r\n     (myreverse (rest xs) (conj rev (first xs))))) % ())", "problem": 23, "user": "4dd023dd535d5973398f92ad"}, {"code": "(fn rev [l]\r\n (reduce (fn [r x] (cons x r)) '() l)\r\n )", "problem": 23, "user": "4dd4f0a8535dae65d5c462e4"}, {"code": "(fn [arg]\r\n  (loop [s arg out nil]\r\n    (if (empty? s)\r\n        out\r\n        (recur (rest s) (conj out (first s))))))", "problem": 23, "user": "4dd9d299535d2dad7130b5dd"}, {"code": "(fn my-reverse [xs] (when-not (empty? xs) (cons (last xs) (my-reverse (drop-last xs)))))", "problem": 23, "user": "4dc4c869535d8a4b2fd74280"}, {"code": "(fn [l]\r\n  ((fn [l l2]\r\n    (if (empty? l)\r\n        l2\r\n        (recur (rest l)\r\n               (cons (first l) l2))))\r\n  l '()))", "problem": 23, "user": "4dda2c1b535d02782fcbe9ef"}, {"code": "(fn [set]\r\n    ((fn [set counterset]\r\n      (if (empty? set)\r\n        counterset\r\n        (recur (rest set) (list* (first set) counterset))\r\n      )\r\n    ) set []\r\n    )\r\n  )", "problem": 23, "user": "4dd6fa3a535d2dad7130b5ce"}, {"code": "(fn [l] (loop [l l acc '()] (if (empty? l) acc (recur (next l) (cons (first l) acc)))))", "problem": 23, "user": "4ddbd934535d02782fcbe9fc"}, {"code": "into ()", "problem": 23, "user": "4db4c93f535dc0f10411755c"}, {"code": "#(loop [result '() xs %]\r\n  (if (seq xs)\r\n    (recur (cons (first xs) result) (rest xs))\r\n    result))", "problem": 23, "user": "4ddbfb8a535d02782fcbea00"}, {"code": "(fn myreverse [x] (if (= x nil)\r\n                      nil\r\n                      (conj (myreverse (butlast x)) (last x))))", "problem": 23, "user": "4ddbd600535d02782fcbe9fb"}, {"code": "(fn [xs] (loop [result [] xs xs] (if (empty? xs) result (recur (conj result (last xs)) (butlast xs)))))", "problem": 23, "user": "4ddabc33535d02782fcbe9f5"}, {"code": "(fn [lst] \r\n   (loop [xs lst ret '()] \r\n       (if (= xs []) \r\n           ret \r\n         (recur (rest xs)\r\n           (cons (first xs) ret) ))))", "problem": 23, "user": "4ddc620d535d02782fcbea06"}, {"code": "; my-reverse\r\n(fn [in-seq]\r\n  (reduce conj () in-seq))", "problem": 23, "user": "4ddcabcb535d6ebe9be03f52"}, {"code": "(fn rev [lst]\r\n  (if (seq lst)\r\n    (lazy-seq (cons (last lst) (rev (butlast lst))))))", "problem": 23, "user": "4dda5d07535d02782fcbe9f2"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4dc8205f535d8a4b2fd74296"}, {"code": "reduce #(conj % %2) '()", "problem": 23, "user": "4ddbdc1b535d02782fcbe9fd"}, {"code": "#(rseq %)", "problem": 23, "user": "4db342d7535df7e46ed9b6cd"}, {"code": "(fn [seq] (loop [result [] input seq] (if (not= 0 (count input)) (recur (concat result [(last input)]) (drop-last input)) result)))", "problem": 23, "user": "4dddf817535d08e6dec9fdd3"}, {"code": "(fn [is]\r\n  (loop[tonyTheGREAT (seq is) scurrd (seq())]\r\n    (if (nil? tonyTheGREAT) scurrd (recur (next tonyTheGREAT)(conj scurrd (first tonyTheGREAT) \r\n)))))", "problem": 23, "user": "4dde4e95535d08e6dec9fdd7"}, {"code": "(fn revvy [s] ((fn [s ret] (if (empty? s) ret (recur (rest s) (cons (first s) ret)))) (rest s) [(first s)]))", "problem": 23, "user": "4dd14bd6535da60f04a96e59"}, {"code": "(fn [items]\r\n  (loop [items items result '()]\r\n    (if (empty? items)\r\n      result\r\n      (recur (rest items) \r\n             (cons (first items) result)))))", "problem": 23, "user": "4ddc1c89535d02782fcbea01"}, {"code": "(fn [coll] (reduce (fn [a b] (cons b a)) '() coll))", "problem": 23, "user": "4ddeb916535d08e6dec9fdd9"}, {"code": "(fn [coll]\r\n  (reduce (fn [x y] (cons y x)) '() coll))", "problem": 23, "user": "4ddee37c535d08e6dec9fddc"}, {"code": "(fn [x]\r\n  (loop [s x r '()]\r\n    (if-not (empty? s)\r\n      (recur (rest s) (conj r (first s)))\r\n      r)))", "problem": 23, "user": "4de08793535d08e6dec9fde2"}, {"code": "(fn rev\r\n           ([x] (rev x ()))\r\n           ([x acc] (if (nil? x)\r\n                      acc\r\n                      (recur (next x) (conj acc (first x))))))", "problem": 23, "user": "4de0ff03535d08e6dec9fde4"}, {"code": "(fn [s]\r\n  (loop [s s\r\n         r '()]\r\n    (if (empty? s)\r\n      r\r\n      (recur (rest s) (conj r (first s))))))", "problem": 23, "user": "4de2f44f535d08e6dec9fdec"}, {"code": "#(loop [coll % stk []]\r\n  (if (empty? coll)\r\n    stk\r\n    (recur (next coll) (cons (first coll) stk))))", "problem": 23, "user": "4db6ce85535d1e037afb217f"}, {"code": "rseq", "problem": 23, "user": "4dd3747d535dae65d5c462dd"}, {"code": "(fn buba [x]\r\n  (loop [start x end (seq '())]\r\n    (if(not(empty? start))\r\n      (recur (rest start) (cons (first start) end))\r\n      end)))", "problem": 23, "user": "4de18de7535d08e6dec9fde8"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4de4831d535d08e6dec9fdef"}, {"code": "into ()", "problem": 23, "user": "4dabb7b1950ed6eda1bd72f3"}, {"code": "(fn v [s]\r\n  (if-let [[x & r] (seq s)]\r\n    (conj (v r) x)\r\n    []))", "problem": 23, "user": "4dcd818e535d5973398f929d"}, {"code": "(partial reduce conj '())", "problem": 23, "user": "4daef21cedd6309eace4d169"}, {"code": "(fn r [coll]\r\n  (if-let [s (seq coll)]\r\n    (concat (r (rest s)) (list (first s)))\r\n    '()))", "problem": 23, "user": "4de623ef535d08e6dec9fdf4"}, {"code": "(fn rev [s]\r\n  (loop [ss s c '()]\r\n    (if (= (next ss) (last ss))\r\n      c\r\n      (recur (next ss) \r\n          (conj c (first ss))\r\n        )\r\n      )\r\n    )\r\n  )", "problem": 23, "user": "4dcd327b535d5973398f929b"}, {"code": "#(loop [ll % rr (if (list? %) '() [])] (if (not-empty ll) (recur (butlast ll) (conj rr (last ll))) rr))", "problem": 23, "user": "4de6c970535d08e6dec9fdf6"}, {"code": "(fn [col]\r\n  (into '() col))", "problem": 23, "user": "4ddb339c535d02782fcbe9f9"}, {"code": "#(reduce (fn [x y] (conj x y)) () %)", "problem": 23, "user": "4dea9406535d08e6dec9fe01"}, {"code": "(fn [x] (loop [a x b (empty x)] (if (empty? a) b (recur (rest a) (concat (list (first a)) b)))))", "problem": 23, "user": "4dea9fae535d08e6dec9fe02"}, {"code": "into ()", "problem": 23, "user": "4de77a0a535d08e6dec9fdfa"}, {"code": "(fn [x]\r\n  (loop [s x   reversed '()]\r\n    (if (first s)\r\n      (recur (next s) (conj reversed (first s))) \r\n      reversed\r\n    )\r\n  )\r\n)", "problem": 23, "user": "4deb6b40535d08e6dec9fe05"}, {"code": "#(loop [newseq '() args %]\r\n  (if (empty? args)\r\n    newseq\r\n    (recur\r\n      (conj newseq (first args))\r\n      (rest args))))", "problem": 23, "user": "4dbb6302535d1e037afb21b5"}, {"code": "#(map second\r\n  (sort\r\n    (fn [x y] (> (first x) (first y)))\r\n    (map (fn [x y] [x y])\r\n         (iterate inc 1)\r\n          %)))", "problem": 23, "user": "4de760a3535d08e6dec9fdf9"}, {"code": "(fn revers [coll]\r\n  (if (empty? coll)\r\n    coll\r\n    (conj (vec (revers (rest coll))) (first coll) )))", "problem": 23, "user": "4de8a7d7535d08e6dec9fdfe"}, {"code": "#(into () %)", "problem": 23, "user": "4ded56bb535d08e6dec9fe0b"}, {"code": "into ()", "problem": 23, "user": "4de85c5d535d08e6dec9fdfc"}, {"code": "(fn rev [s] (loop [r s e (empty s)] (if (empty? r) e (recur (rest r) (cons (first r) e)))))", "problem": 23, "user": "4dee4a9c535d08e6dec9fe11"}, {"code": "(fn rvvse [x]\n  (if (= nil (first x)) x (concat (rvvse (rest x)) (list (first x)))))", "problem": 23, "user": "4ded582d535d08e6dec9fe0c"}, {"code": "(fn [v]\r\n  (loop [v (seq v) result '()]\r\n    (if (= v '()) result\r\n      (recur (rest v) (conj result (first v))))))", "problem": 23, "user": "4defdf31535d08e6dec9fe14"}, {"code": "#(into () %)", "problem": 23, "user": "4ded611f535d08e6dec9fe0d"}, {"code": "#(reduce conj '() %1)", "problem": 23, "user": "4def301c535d08e6dec9fe12"}, {"code": "(fn inverter [coll]\r\n  (loop [inv () c coll]\r\n    (if (nil? c)\r\n      inv  \r\n      (recur (conj inv (first c)) (next c)))))", "problem": 23, "user": "4df0f863535d08e6dec9fe19"}, {"code": "(partial reduce (fn [x y] (cons y x)) [])", "problem": 23, "user": "4df0524e535d08e6dec9fe17"}, {"code": "#((fn h [x r]\r\n    (if (empty? x)\r\n      r\r\n      (h (rest x) (cons (first x) r))))\r\n    % nil)", "problem": 23, "user": "4df1ce44535d08e6dec9fe1f"}, {"code": "(fn [seq]\r\n  (map (fn [i]\r\n    (nth (vec seq) i)) (range (dec (count seq)) -1 -1)))", "problem": 23, "user": "4df1e213535d08e6dec9fe20"}, {"code": "(fn [coll] (reduce conj () coll))", "problem": 23, "user": "4df168bd535d08e6dec9fe1d"}, {"code": "(fn [s]\r\n    (loop [my-seq s my-list '()]\r\n        (if (first my-seq)\r\n            (recur (rest my-seq) (conj my-list (first my-seq)))\r\n            (seq my-list)\r\n        )\r\n    )\r\n)", "problem": 23, "user": "4defd021535d08e6dec9fe13"}, {"code": ";(fn [x] (into () x))\r\n;#(into () %)\r\n;#(reduce conj '() %)\r\n#(reduce merge '() %)", "problem": 23, "user": "4de27757535d08e6dec9fdea"}, {"code": "#(reduce (fn [rev x] (conj rev x)) '() %)", "problem": 23, "user": "4deb529a535d08e6dec9fe04"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4df20dda535d08e6dec9fe23"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4df3d4f4535d08e6dec9fe2c"}, {"code": "(fn [the-seq]\r\n  (loop [s the-seq r (seq ())]\r\n    (if (empty? s)\r\n      r\r\n      (recur (rest s) (conj r (first s))))))", "problem": 23, "user": "4df3df8a535d08e6dec9fe2d"}, {"code": "(fn [se]\r\n  (loop [old se, neo '()]\r\n    (if (= (count old) 0)\r\n      (seq neo)\r\n      (recur (next old) (cons (first old) neo)))))", "problem": 23, "user": "4df407c3535d08e6dec9fe2e"}, {"code": "(fn [x]\r\n  ((fn helper [a b]\r\n    (if (empty? a) b\r\n(helper (rest a) \r\n(conj b (first a))))) x '()))", "problem": 23, "user": "4df30f76535d08e6dec9fe28"}, {"code": "(fn [target] \r\n  (reduce \r\n    (fn [build-me, from-part] \r\n      (conj build-me from-part)\r\n    )\r\n    ()\r\n    target\r\n  )\r\n)", "problem": 23, "user": "4df54fd9535d08e6dec9fe30"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "4deff9f9535d08e6dec9fe15"}, {"code": "#(reduce (fn [s m] (cons m s)) '() %)", "problem": 23, "user": "4df669d4535d08e6dec9fe35"}, {"code": "#(loop [r '() ls %]\r\n(if (empty? ls) r\r\n(recur (cons (first ls) r) (rest ls))))", "problem": 23, "user": "4df7278a535d04ed9115e774"}, {"code": "#(apply (partial conj '()) %)", "problem": 23, "user": "4df7cb14535d04ed9115e776"}, {"code": "(fn ([arr]\r\n                       \r\n                             (loop[curArr arr ]\r\n                                   \r\n                                  ( if(=(first curArr) nil)\r\n                                   ( loop[result curArr temp arr]\r\n                                     (if(=(first temp) nil)\r\n                                       result\r\n                                       (recur (conj result (first temp)) (rest temp ))\r\n                                       \r\n                                       \r\n                                       \r\n                                       )\r\n                                     )\r\n                                   (recur (rest curArr) \r\n                                          )\r\n                                          ))))", "problem": 23, "user": "4de6f806535d08e6dec9fdf7"}, {"code": "(fn rv [xs]\r\n  (if-not (seq xs)\r\n    []\r\n    (conj (rv (rest xs)) (first xs))))", "problem": 23, "user": "4dfd4ba8535d04ed9115e781"}, {"code": "into ()", "problem": 23, "user": "4dfd7ecf535d04ed9115e783"}, {"code": "reduce conj '()", "problem": 23, "user": "4dfceeb9535d04ed9115e77e"}, {"code": "(fn [coll]\n  ((fn [in out]\n     (if (empty? in)\n       out\n       (recur (rest in) (conj out (first in))))\n   ) coll nil))", "problem": 23, "user": "4dfe5a93535d04ed9115e786"}, {"code": "#(into () %)", "problem": 23, "user": "4dd9514a535d2dad7130b5dc"}, {"code": "#(reduce conj nil %)", "problem": 23, "user": "4dffeeb1535d04ed9115e78b"}, {"code": "(fn [coll] \r\n  (loop [res '() left coll]\r\n    (if (empty? left) res\r\n      (recur (conj res (first left)) (rest left)))))", "problem": 23, "user": "4e02bee8535d04ed9115e791"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4e0359e8535d04ed9115e792"}, {"code": "(fn rev [elems]\r\n  (if (empty? elems)\r\n    []\r\n    (conj (rev (rest elems)) (first elems))))", "problem": 23, "user": "4e03b010535d04ed9115e794"}, {"code": "into ()", "problem": 23, "user": "4e03c616535d04ed9115e796"}, {"code": "(fn myreverse [coll]\r\n  (loop [currcoll [] restcoll coll] \r\n    (if (empty? restcoll)\r\n      currcoll\r\n      (recur (cons (first restcoll) currcoll) (rest restcoll)))))", "problem": 23, "user": "4dddff47535d08e6dec9fdd4"}, {"code": "(fn foo ([x] (foo x nil)) ([x y] (if (empty? x) y (foo (rest x) (conj y (first x))))))", "problem": 23, "user": "4e03d6ef535d04ed9115e797"}, {"code": "(fn [x & n]\r\n   (if (empty? x)\r\n     n\r\n     (recur (rest x) (cons (first x) n))))", "problem": 23, "user": "4e059278535d04ed9115e7a5"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4e049a06535d04ed9115e7a0"}, {"code": "(fn [seq]\r\n  (loop [res nil ss seq]\r\n    (if (empty? ss)\r\n      res\r\n      (recur (conj res (first ss)) (rest ss)))))", "problem": 23, "user": "4dbe5975535d020aff1edf5d"}, {"code": "#(reduce (fn [x y] (conj x y)) '() %)", "problem": 23, "user": "4e07eac0535d04ed9115e7a9"}, {"code": "(fn[x] (loop [result '() current x](if (empty? current) result (recur (conj result (first current)) (rest current)))))", "problem": 23, "user": "4e080562535d04ed9115e7aa"}, {"code": "(fn [s]\r\n   (loop [s s r '()]\r\n\t\t\t (if (seq s)\r\n\t\t\t\t  (recur (rest s) (conj r (first s)))\r\n\t\t\t\tr)))", "problem": 23, "user": "4e08fb7a535d04ed9115e7ac"}, {"code": "reduce conj ()", "problem": 23, "user": "4e09125f535d04ed9115e7ad"}, {"code": "reduce conj ()", "problem": 23, "user": "4e062ea8535d04ed9115e7a7"}, {"code": "(fn ([coll] \r\n    (loop [coll1 (first (list coll)) coll2 (first (list ()))]\r\n      (if (empty? coll1)\r\n        coll2\r\n        (recur (rest coll1)(conj coll2 (first coll1)))))))", "problem": 23, "user": "4de8fb73535d08e6dec9fdff"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4e0d8c27535d04ed9115e7b7"}, {"code": "reduce conj ()", "problem": 23, "user": "4e0e0529535d04ed9115e7b9"}, {"code": "(fn [seq]\r\n  (loop [curr-seq seq, to-ret '()]\r\n    (if (empty? curr-seq) to-ret\r\n        (recur (rest curr-seq)\r\n               (cons (first curr-seq) to-ret)))))", "problem": 23, "user": "4e0febe6535d04ed9115e7be"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4df15946535d08e6dec9fe1c"}, {"code": ";\r\n\r\n#(loop [forw (rest %)\r\n       bakw (list (first %))]\r\n  (if (empty? forw)\r\n      bakw\r\n      (recur (rest forw) (cons (first forw) bakw))))", "problem": 23, "user": "4e1047ad535d04ed9115e7bf"}, {"code": "(fn [seq]\r\n   (loop [col seq, res '()]\r\n       (if (empty? col)\r\n           res\r\n           (recur (rest col) (conj res (first col))))))", "problem": 23, "user": "4e10a8e4535d04ed9115e7c2"}, {"code": "(fn x [c]\r\n  (let [\r\n    f (-> c first list)\r\n    r (rest c)]\r\n  (if (empty? r) f (concat (x r) f))))", "problem": 23, "user": "4e111538535d04ed9115e7c3"}, {"code": "(fn [xs]\r\n  (reduce #(cons %2 %1) '() xs))", "problem": 23, "user": "4e113a81535d04ed9115e7c5"}, {"code": "into '()", "problem": 23, "user": "4daa374930acd6ed13482a68"}, {"code": "#((fn rev [xs rxs]\r\n  (if (empty? xs)\r\n    rxs\r\n    (recur (rest xs) (cons (first xs) rxs)))) % [])", "problem": 23, "user": "4e123905535d04ed9115e7ce"}, {"code": "(fn [col]\r\n  (loop [c col r ()]\r\n    (if (empty? (rest c))\r\n      (conj r (first c))\r\n      (recur (rest c) (conj r (first c))))))", "problem": 23, "user": "4e117dea535d04ed9115e7c9"}, {"code": "reduce conj ()", "problem": 23, "user": "4e043d85535d04ed9115e79e"}, {"code": "(fn [seq]\r\n  (loop [sq seq, result []]\r\n    (if (empty? sq) result\r\n        (recur (rest sq) (cons (first sq) result)))))", "problem": 23, "user": "4e131e61535d04ed9115e7d5"}, {"code": "(fn [coll]\r\n  (reduce #(conj %1 %2) () coll))", "problem": 23, "user": "4e131d5b535d04ed9115e7d4"}, {"code": "into ()", "problem": 23, "user": "4e12cc9d535d04ed9115e7d2"}, {"code": "(fn [coll] (loop [c coll, r '()] (if (first c) (recur (next c) (conj r (first c))) r)))", "problem": 23, "user": "4e131443535d04ed9115e7d3"}, {"code": "(fn [x]\r\n  (loop [i (- (count x) 1) nuova []]\r\n  (if (neg? i)\r\n  nuova\r\n  (recur (dec i) (conj nuova (nth (seq x) i))))))", "problem": 23, "user": "4e14090d535d04ed9115e7dc"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4e0cdc6f535d04ed9115e7b4"}, {"code": "(partial reduce conj ())", "problem": 23, "user": "4e14108c535d04ed9115e7dd"}, {"code": "#(loop [fwd % rev '()]\r\n  (if (next fwd)\r\n    (recur (next fwd) (conj rev (first fwd)))\r\n  (conj rev (first fwd))\r\n  )\r\n)", "problem": 23, "user": "4e15c301535d04ed9115e7e5"}, {"code": "#(into () %)", "problem": 23, "user": "4e1158aa535d04ed9115e7c6"}, {"code": "#(into () %)", "problem": 23, "user": "4e14b925535d04ed9115e7df"}, {"code": "(fn stl[s]\r\n( if (empty? s)\r\n    nil\r\n    (concat (stl(rest s)) (seq [(first s)]))  \r\n)\r\n)", "problem": 23, "user": "4e1582f0535d04ed9115e7e4"}, {"code": "(fn [s] \r\n  (loop [s s acc ()] \r\n    (if (empty? s)\r\n      acc\r\n      (recur (rest s) (cons (first s) acc)))))", "problem": 23, "user": "4e170143535d04ed9115e7ed"}, {"code": "#(reduce (fn [x y] (cons y x)) [] %)", "problem": 23, "user": "4e16bdef535d04ed9115e7e9"}, {"code": "(fn [s]\r\n  (loop [temp-seq s rev-seq ()]\r\n    (if (seq temp-seq)\r\n      (recur (rest temp-seq)\r\n        (conj rev-seq (first temp-seq)))\r\n      rev-seq)))", "problem": 23, "user": "4e03f4bd535d04ed9115e79a"}, {"code": "(fn a [ls]\r\n  (let [r (fn [ls1 ls2]\r\n            (if (empty? ls1)\r\n                ls2\r\n                (recur (rest ls1) (cons (first ls1) ls2))))\r\n                ]\r\n        (r ls ())))", "problem": 23, "user": "4e1248b1535d04ed9115e7cf"}, {"code": "(fn [coll]\r\n  (loop [coll coll acc nil]\r\n    (cond \r\n      (empty? coll) acc\r\n      :else (recur (butlast coll) (concat acc [(last coll)])))))", "problem": 23, "user": "4e18ed7a535d04ed9115e7f6"}, {"code": "#(loop [lst %, acc ()]\r\n  (if (nil? (first lst))\r\n      acc\r\n      (recur (rest lst) (cons (first lst) acc))))", "problem": 23, "user": "4e1772b1535d04ed9115e7ee"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4e18c553535d04ed9115e7f4"}, {"code": "(fn [l]\n  (loop [lis l result '()]\n    (if (= lis '())\n      result\n      (recur (rest lis) (conj result (first lis))))))", "problem": 23, "user": "4df9c598535d04ed9115e77a"}, {"code": "(partial (fn myrevc [acc lt]\r\n       (if (= lt '()) acc (myrevc (cons (first lt) acc)(rest lt) ))) '())", "problem": 23, "user": "4e1b2cd9535d04ed9115e7fd"}, {"code": "#(into () %)", "problem": 23, "user": "4e1e1576535d04ed9115e806"}, {"code": "(fn mogwai [x] (if (<= (count x) 1) x (concat (mogwai (rest x)) (list (first x)))))", "problem": 23, "user": "4e1e7f88535d04ed9115e808"}, {"code": "into '()", "problem": 23, "user": "4e1f9bb5535d04ed9115e80d"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "4e2110c7535d04ed9115e813"}, {"code": "reduce #(cons %2 %1) '()", "problem": 23, "user": "4e21c139535d04ed9115e819"}, {"code": "(fn [items]\r\n    (into () items))", "problem": 23, "user": "4e21c0c7535d04ed9115e818"}, {"code": "#(reduce (fn [base elem] (conj base elem)) nil %1)", "problem": 23, "user": "4e1350af535d04ed9115e7d8"}, {"code": "#(apply conj '() %)", "problem": 23, "user": "4dbde951535d020aff1edf53"}, {"code": "#(loop [sekv (seq %) ny-sekv (seq '())]\r\n   (if (next sekv)\r\n     (recur (rest sekv) (cons (first sekv) ny-sekv))\r\n     (cons (first sekv) ny-sekv)))", "problem": 23, "user": "4e218464535d04ed9115e816"}, {"code": "into '()", "problem": 23, "user": "4e1b8106535d04ed9115e801"}, {"code": "(fn [c] (map #(nth (vec c) %) (range (- (count c) 1) -1 -1)))", "problem": 23, "user": "4e21d76a535d04ed9115e81a"}, {"code": "(fn [sek] (loop [lista (seq nil) i 0]\r\n  (cond\r\n    (= i (count sek)) lista\r\n    :else (recur (conj lista (nth (seq sek) i)) (inc i))\r\n)))", "problem": 23, "user": "4e218470535d04ed9115e817"}, {"code": "(fn [coll]\r\n          (loop [acc []\r\n                 coll coll]\r\n            (if (zero? (count coll))\r\n              acc\r\n              (recur\r\n                (cons (first coll) acc)\r\n                (rest coll)))))", "problem": 23, "user": "4e22b78b535d04ed9115e81e"}, {"code": "reduce #(cons %2 %1) '()", "problem": 23, "user": "4e1ec17a535d04ed9115e80a"}, {"code": "reduce conj '()", "problem": 23, "user": "4de165f3535d08e6dec9fde6"}, {"code": "(fn rvs [seq]\r\n  (if (empty? (rest seq))\r\n    seq\r\n    (concat\r\n      (rvs (rest seq))\r\n      (list (first seq)))))", "problem": 23, "user": "4e234588535d04ed9115e821"}, {"code": "(fn [coll] (reduce conj '() coll))", "problem": 23, "user": "4dc54eb2535d8a4b2fd74284"}, {"code": "(fn [c] (for [n (range (dec (count c)) -1 -1)] (nth (vec c) n)))", "problem": 23, "user": "4e246abe535d04ed9115e827"}, {"code": "#(loop [given % rev []]\r\n  (if (empty? given) rev\r\n    (recur (butlast given) (conj rev (last given)))))", "problem": 23, "user": "4e232f34535d04ed9115e81f"}, {"code": "#(loop[x % l '()] (if  (first x) ( recur (rest x) (cons (first x) l)) l))", "problem": 23, "user": "4e25bd69535d04ed9115e82c"}, {"code": "(fn r [coll]\n  (loop [o coll r []]\n    (if-let [f (first o)]\n      (recur (rest o) (cons f r))\n      r)))", "problem": 23, "user": "4e2608d6535deb9a81d77ef1"}, {"code": "(fn [ss]\n  (loop [acc '() s ss]\n    (if (nil? (seq s)) acc\n      (recur (conj acc (first s)) (rest s)))))", "problem": 23, "user": "4e26e8b4535deb9a81d77ef6"}, {"code": "(fn rev [x]\n  (if (empty? x)\n    []\n    (conj (rev (rest x)) (first x))))", "problem": 23, "user": "4e28120f535deb9a81d77efa"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4e25a0da535d04ed9115e82a"}, {"code": "(partial into '())", "problem": 23, "user": "4e283bae535deb9a81d77efb"}, {"code": "#(letfn [(rev [xs acc]\n    (if (= xs [])\n        acc\n        (recur (rest xs) (cons (first xs) acc))))] (rev % []))", "problem": 23, "user": "4e273301535deb9a81d77ef7"}, {"code": "(fn [x] \n  (loop [x x result ()] \n    (if (empty? x)\n      result\n      (recur (rest x) (conj result (first x))))))", "problem": 23, "user": "4dadc6f2c9a9d6ed4099dc57"}, {"code": "(fn [x](reduce conj () x))", "problem": 23, "user": "4e2ab05e535deb9a81d77f01"}, {"code": "(fn r[c]\r\n  (if (= 1 (count c)) (list (first c))\r\n    (concat (r (next c)) (list (first c)))\r\n    )\r\n  )", "problem": 23, "user": "4e1f60a6535d04ed9115e80b"}, {"code": "(fn [xs]\n  (loop [ys xs\n         result '()]\n    (if (empty? ys)\n      result\n      (recur (butlast ys) (concat result (list (last ys)))))))", "problem": 23, "user": "4db653f6535d1e037afb217c"}, {"code": "(fn reverse-list[l] ( concat \n    (if (empty? (rest l) ) \n        '()\n        (reverse-list (rest l)))\n    ( list (first l)) ) \n)", "problem": 23, "user": "4e234e72535d04ed9115e822"}, {"code": "(fn rev [li] (if (empty? li) '() (concat (rev (rest li)) (list (first li)))))", "problem": 23, "user": "4e2d562c535deb9a81d77f07"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4e2e94bb535deb9a81d77f0c"}, {"code": "(fn [s]\n  (loop [s s, r '()]\n    (if (empty? s)\n      r\n      (recur (next s) (conj r (first s))))))", "problem": 23, "user": "4e2edb0e535deb9a81d77f0d"}, {"code": "(fn rev [seq]\n  (loop [s seq, result '()]\n    (if (empty? s) result\n        (recur (rest s) (cons (first s) result)))))", "problem": 23, "user": "4e2d84bf535deb9a81d77f09"}, {"code": "(fn f [xs] (reduce (fn [r x] (cons x r)) '() xs))", "problem": 23, "user": "4e2f377a535deb9a81d77f10"}, {"code": "(fn hoge [x]\n  (if (= (count x) 1) x\n      (cons (last x) (hoge (take (- (count x) 1) x)))))", "problem": 23, "user": "4e2e6460535deb9a81d77f0b"}, {"code": "(fn my-reverse [a-list]\r\n(cond (= a-list nil) nil\r\n  :else (cons (last a-list)\r\n  (my-reverse (butlast a-list)))))", "problem": 23, "user": "4e2f9e71535deb9a81d77f11"}, {"code": "into ()", "problem": 23, "user": "4e307313535deb9a81d77f14"}, {"code": "#(reduce conj nil %)", "problem": 23, "user": "4ded27db535d08e6dec9fe0a"}, {"code": "(fn [coll]\n  (let [revlist (reduce conj () coll)]\n   (cond (vector? coll) (vec revlist)\n         :else revlist)))", "problem": 23, "user": "4e31a15c535deb9a81d77f1e"}, {"code": "(fn [v] \n  (loop [l v, b []] \n    (if-not (empty? l)\n      (recur (drop-last l) (conj b (last l)))\n      b)))", "problem": 23, "user": "4e31c695535deb9a81d77f20"}, {"code": "(fn [s]\n    (loop [origin s\n           acc '()]\n      (if (empty? origin)\n        acc\n        (recur (rest origin)\n               (conj acc (first origin))))))", "problem": 23, "user": "4e326f34535deb9a81d77f21"}, {"code": "#(into '() %)", "problem": 23, "user": "4e2ef93d535deb9a81d77f0f"}, {"code": "#(loop \n  [s % n (list)] \n(if (empty? s) n \n(recur (rest s) (conj n (first s)))))", "problem": 23, "user": "4e333e38535deb9a81d77f26"}, {"code": "(fn my-reverse [seq]\n  (if (empty? seq) []\n      (conj (my-reverse (rest seq)) (first seq))))", "problem": 23, "user": "4e342671535deb9a81d77f29"}, {"code": "(fn [s] (reduce conj () s))", "problem": 23, "user": "4e358316535deb9a81d77f2f"}, {"code": "(fn rev [l]\n(if (empty? l) '()\n   (cons (last l) (rev (butlast l)))\n))", "problem": 23, "user": "4e356d2b535deb9a81d77f2d"}, {"code": "#(loop [s %\n        y '()]\n  (if (= [] s)\n    y\n    (recur (rest s) (cons (first s) y)))\n)", "problem": 23, "user": "4e3456f9535deb9a81d77f2a"}, {"code": "into ()", "problem": 23, "user": "4e36038f535deb9a81d77f31"}, {"code": "(fn [coll] (reduce #(cons %2 %1) [] coll))", "problem": 23, "user": "4e36425c535deb9a81d77f33"}, {"code": "into ()", "problem": 23, "user": "4e360757535deb9a81d77f32"}, {"code": "#(loop [e %, acc []]\n  (if (empty? e)\n      acc\n      (recur (rest e) (cons (first e) acc))))", "problem": 23, "user": "4e36df14535deb9a81d77f35"}, {"code": "reduce #(cons %2 %1) []", "problem": 23, "user": "4e2b1d48535deb9a81d77f03"}, {"code": "#(letfn [(myreverse [coll result]\n            (if (empty? coll)\n              result\n              (recur (rest coll) (cons (first coll) result))\n            ))]\n  (myreverse % `())\n  )", "problem": 23, "user": "4df11fb2535d08e6dec9fe1a"}, {"code": "(fn new-reverse [x]\r\n     (if (empty? x)\r\n\t       nil\r\n\t       (conj (new-reverse (butlast x))\r\n\t\t     (last x))))", "problem": 23, "user": "4e370a04535deb9a81d77f37"}, {"code": "(fn [x] \n  ( (fn rev [vold vnew] \n     (if (empty? vold) vnew (rev (rest vold) (cons (first vold) vnew) ))\n    )\n  \n   x (empty x) ) )", "problem": 23, "user": "4e333091535deb9a81d77f25"}, {"code": "(fn\n  ([s] \n    ((fn ([s o] (if (= s '()) o \n                  ;Else do this\n                  (recur (rest s) (cons (first s) o))\n                  ))) s '())))", "problem": 23, "user": "4e30da02535deb9a81d77f17"}, {"code": "(fn [col]\n  (loop [x col y '()]\n    (if (seq x)\n      (recur (next x) (conj y (first x)))\n      y)))", "problem": 23, "user": "4e399009535deb9a81d77f3f"}, {"code": "(fn rev \n  ([l1 l2] (if (nil? l1) l2 (rev (next l1) (concat (list (first l1)) l2))))\n  ([l1] (rev l1 nil)))", "problem": 23, "user": "4e351b47535deb9a81d77f2b"}, {"code": "apply conj '()", "problem": 23, "user": "4e3996b0535deb9a81d77f41"}, {"code": "(fn [s]\n  (let [f (fn [s v] (if (seq s) (recur (next s) (conj v (first s))) v))]\n    (f s (list))))", "problem": 23, "user": "4e39fb68535deb9a81d77f47"}, {"code": "reduce conj ()", "problem": 23, "user": "4e39d763535deb9a81d77f46"}, {"code": "into ()", "problem": 23, "user": "4e3a5a67535deb9a81d77f49"}, {"code": "(fn rev [x] (if (= (count x)  1) x (conj (rev (drop-last x)) (last x) ) ))", "problem": 23, "user": "4e39c710535deb9a81d77f45"}, {"code": "reduce conj'()", "problem": 23, "user": "4e39b020535deb9a81d77f44"}, {"code": "(fn [s] (loop [s s acc '()] (if (empty? s) acc (recur (rest s) (conj acc (first s))))))", "problem": 23, "user": "4e3ac1b2535deb9a81d77f4c"}, {"code": "(fn [x] \n  (reduce conj () x))", "problem": 23, "user": "4e13c44a535d04ed9115e7db"}, {"code": "reduce #(cons%2%1)[]", "problem": 23, "user": "4e3b6bff535deb9a81d77f52"}, {"code": "(fn rev[s](reduce conj () s))", "problem": 23, "user": "4e3ae7cd535deb9a81d77f4e"}, {"code": "#(loop [sum () cnt %](if (= (count cnt) 0) sum (recur(conj sum (first cnt))(rest cnt))))", "problem": 23, "user": "4e244ed5535d04ed9115e826"}, {"code": "#(apply conj '() %)", "problem": 23, "user": "4e3f480c535dc968683fc497"}, {"code": "(partial reduce conj ())", "problem": 23, "user": "4e3f595d535dc968683fc498"}, {"code": "reduce (fn [x y] (conj x y)) ()", "problem": 23, "user": "4e38a091535deb9a81d77f3d"}, {"code": "(fn rev\n   ([s] (rev '() s))\n   ([r s] (if (seq s) (rev (cons (first s) r) (rest s)) r )) )", "problem": 23, "user": "4e3a9dae535deb9a81d77f4a"}, {"code": "(fn [lat]\n  (into '() lat))", "problem": 23, "user": "4e40529b535dc968683fc49a"}, {"code": "(fn [s]\n  (loop [sq s r []]\n  (if (empty? sq)\n    r\n    (recur (rest sq) (cons (first sq) r))))\n)", "problem": 23, "user": "4e3a2761535deb9a81d77f48"}, {"code": "#(reduce conj () %1)", "problem": 23, "user": "4e410033535dc968683fc49c"}, {"code": "(fn [sequence]\n  ((fn reverse-step [so-far to-go]\n    (if (empty? to-go)\n      so-far\n      (recur (conj so-far (first to-go)) (rest to-go))))\n    '() sequence))", "problem": 23, "user": "4e42f930535dc968683fc49f"}, {"code": "(fn myrev [seq]\n  (if (nil? seq)\n      []\n      (conj (myrev (next seq))\n            (first seq))))", "problem": 23, "user": "4e444c11535dc968683fc4a9"}, {"code": "(fn inversa [x]\n  (if (empty? x)\n    x\n    (concat (inversa (rest x)) (list (first x)))))", "problem": 23, "user": "4db51ce0535d87e67b28fe06"}, {"code": "into ()", "problem": 23, "user": "4e040c42535d04ed9115e79d"}, {"code": "into ()", "problem": 23, "user": "4e43b0d9535dc968683fc4a3"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4e46cf17535dc968683fc4b6"}, {"code": "(fn myreverse\n  ([coll] (myreverse coll '()))\n  ([coll rev]\n    (if (empty? coll)\n      rev\n      (recur (rest coll) (conj rev (first coll)))\n)))", "problem": 23, "user": "4e46e48b535dc968683fc4b7"}, {"code": "#(into '() %)", "problem": 23, "user": "4e4482b3535dc968683fc4ab"}, {"code": "(fn my_reverse [s]\n  (reduce #(conj % %2) () s))", "problem": 23, "user": "4e47f4f3535dc968683fc4bb"}, {"code": "(fn [coll]\r\n  (loop [c coll acc ()]\r\n\t   (if (next c)\r\n\t       (recur (next c) (conj acc (first c)))\r\n\t       (conj acc (first c)))))", "problem": 23, "user": "4e46ac46535dc968683fc4b5"}, {"code": "#(loop [reversed [] original %]\n  (if (empty? original)\n    reversed\n    (recur (conj reversed (last original)) \n            (butlast original))))", "problem": 23, "user": "4e4870d1535dc968683fc4bc"}, {"code": "(fn [x] (loop [y (), z x]\n  (cond (= z ()) y\n        :else (recur (conj y (first z)) (rest z)))))", "problem": 23, "user": "4e49a7bb535dc968683fc4c6"}, {"code": "into ()", "problem": 23, "user": "4e49badd535dc968683fc4c9"}, {"code": "(fn rev [lst] (if (empty? lst) [] (conj (rev (rest lst)) (first lst))))", "problem": 23, "user": "4e49fc29535dc968683fc4cb"}, {"code": "reduce conj ()", "problem": 23, "user": "4e4a94a9535dc968683fc4cd"}, {"code": "(fn [aseq]\n           (loop [remaining aseq, answer '()]\n              (if-let [the-tail (seq (rest remaining))]\n                        (recur the-tail (conj answer (first remaining)))\n                        (conj answer (first remaining)))))", "problem": 23, "user": "4e463703535dc968683fc4b2"}, {"code": "(fn myrev [seq] (if (= (count seq) 1) \n                   seq \n                  (concat (myrev (rest seq)) (list (first seq)))\n                )\n)", "problem": 23, "user": "4e3df106535deb9a81d77f58"}, {"code": "(fn [seq]\n  (let [seq (into [] seq)\n        n (count seq)]\n    (for [i (range n)]\n      (nth seq (- n i 1)))))", "problem": 23, "user": "4e4ae5aa535dc968683fc4d2"}, {"code": "(fn [coll]\n(\n  (fn [coll revcoll]\n\t\t(if(empty? coll)\n\t\t\trevcoll\n\t\t\t(recur (drop-last coll) (conj revcoll (last coll)))\t\t\n\t\t)\n\t) coll []\n)\n)", "problem": 23, "user": "4e40d306535dc968683fc49b"}, {"code": "(fn x [coll] (when (seq coll) (concat (x (rest coll)) (list (first coll)))))", "problem": 23, "user": "4e4be570535dc968683fc4d8"}, {"code": "(fn [coll]\n  (loop [acc [], coll coll]\n    (if (seq coll)\n      (recur\n        (cons (first coll) acc)\n        (next coll))\n      acc)))", "problem": 23, "user": "4e4ad154535dc968683fc4d1"}, {"code": "reduce #(conj %1 %2) '()", "problem": 23, "user": "4ddbf54e535d02782fcbe9ff"}, {"code": "(fn [x] (loop [list x, result nil]\n  (if (= list ()) result\n      (recur (rest list) (conj result (first list))))))", "problem": 23, "user": "4e4c1e8c535dc968683fc4db"}, {"code": "(partial reduce conj ())", "problem": 23, "user": "4e4c238f535dc968683fc4dc"}, {"code": "(fn [seq]\n  (loop [seq seq\n         revseq (list)]\n    (if seq\n      (recur (next seq) (conj revseq (first seq)))\n      revseq)))", "problem": 23, "user": "4e498df9535dc968683fc4c4"}, {"code": "#(into () %)", "problem": 23, "user": "4e4b4564535dc968683fc4d3"}, {"code": "(fn nreverse [coll]\n    (loop [result '()\n           curcoll coll]\n      (if (empty? curcoll) result\n        (recur (conj result (first curcoll))\n          (rest curcoll)))))", "problem": 23, "user": "4e4bf20e535dc968683fc4d9"}, {"code": "(fn reverse-it [l] \n  (if (empty? l) [] (conj (reverse-it (rest l)) (first l))))", "problem": 23, "user": "4e4bd94b535dc968683fc4d7"}, {"code": "(fn [lst] (loop [l lst acc '()] (if (empty? l) acc (recur (rest l) (cons (first l) acc)))))", "problem": 23, "user": "4e43c91f535dc968683fc4a5"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "4e4b8b67535dc968683fc4d5"}, {"code": "(fn r [l] (if (empty? l)\n              l\n              (conj (r (drop-last l)) (last l) )))", "problem": 23, "user": "4e4d5d04535dc968683fc4e3"}, {"code": "(fn rev [x] (if (= (count x) 1) x (cons (last x) (rev (butlast x)))))", "problem": 23, "user": "4e4ca885535dc968683fc4df"}, {"code": "#(into () %)", "problem": 23, "user": "4e4ea0f6535dc968683fc4e6"}, {"code": "(fn hop [xs]\n  (if (empty? xs)\n    '()\n    (lazy-seq\n      (cons (last xs) (hop (take (dec (count xs)) xs))))))", "problem": 23, "user": "4e4fbd0c535dc968683fc4e9"}, {"code": "(fn [s] (reduce conj (list) s))", "problem": 23, "user": "4e50b67b535dc968683fc4ed"}, {"code": "(fn [cols] (reduce conj (list) cols))", "problem": 23, "user": "4e50e2a0535dc968683fc4ef"}, {"code": "(fn [lst]\n  (loop [acc '() l lst]\n\t\t(if (empty? l)\n\t\t\tacc\n\t\t\t(recur (conj acc (first l)) (rest l)))))", "problem": 23, "user": "4e510260535dc968683fc4f2"}, {"code": "(fn [seq]\n  (loop [myseq seq newseq []]\n    (if (empty? myseq)\n        newseq\n        (recur (rest myseq) (cons (first myseq) newseq) ))))", "problem": 23, "user": "4e4eecf6535dc968683fc4e8"}, {"code": "(fn [xs]\n (reduce (fn [reversed x]\n           (cons x reversed)) \n        []  xs))", "problem": 23, "user": "4e513758535dc968683fc4f3"}, {"code": "(fn [c]\n      (let [coll (seq c)]\n        (map-indexed \n          (fn [i item] \n            (nth coll \n              (- (count coll) (+ i 1)))) coll)))", "problem": 23, "user": "4e50fb2c535dc968683fc4f1"}, {"code": "(fn [xs]\n  (loop [xs xs acc '()]\n    (if (empty? xs)\n        acc\n        (recur (rest xs) (cons (first xs) acc)))))", "problem": 23, "user": "4e51c67a535d302ef430da6a"}, {"code": "(fn myreverse [coll]\n  (loop [mycoll (seq coll)\n         reversecoll '()]\n    (if (next mycoll)\n      (recur (next mycoll) (conj reversecoll (first mycoll)))\n      (conj reversecoll (first mycoll)))))", "problem": 23, "user": "4e4e5b91535dc968683fc4e5"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4e503aea535dc968683fc4ea"}, {"code": "into '()", "problem": 23, "user": "4e513ecf535dc968683fc4f6"}, {"code": "(fn [l] (loop [lst l r '()] (if (= lst '()) r (recur (rest lst) (cons (first lst) r) ) )))", "problem": 23, "user": "4e5206ec535d302ef430da6c"}, {"code": "#(reduce conj () %1)", "problem": 23, "user": "4e521d7a535d302ef430da6e"}, {"code": "into ()", "problem": 23, "user": "4e5229dc535d302ef430da6f"}, {"code": "(fn revseq[seq] (reduce conj () seq))", "problem": 23, "user": "4e525840535d302ef430da72"}, {"code": "reduce conj ()", "problem": 23, "user": "4e526f4c535d302ef430da75"}, {"code": "#(into '() %)", "problem": 23, "user": "4e52777f535d302ef430da76"}, {"code": "into ()", "problem": 23, "user": "4e52d815535d302ef430da77"}, {"code": "reduce conj ()", "problem": 23, "user": "4e5315c6535d8a8b8723a26f"}, {"code": "reduce conj ()", "problem": 23, "user": "4e525705535d302ef430da71"}, {"code": "(fn rev [x] (if (not (= x nil)) (cons (last x) (rev (butlast x)))))", "problem": 23, "user": "4e4c64a1535dc968683fc4dd"}, {"code": "(fn [coll]\r\n  (into () coll))", "problem": 23, "user": "4e5352b9535d8a8b8723a271"}, {"code": "(fn [s]\n  (reduce conj () s))", "problem": 23, "user": "4e50c894535dc968683fc4ee"}, {"code": "reduce conj ()", "problem": 23, "user": "4dcc3281535d5973398f9291"}, {"code": "(fn [seq]\n  (loop [s seq accu []]\n    (if (empty? s) accu\n      (recur (rest s) (cons (first s) accu)))))", "problem": 23, "user": "4e5411e8535d8a8b8723a279"}, {"code": "into ()", "problem": 23, "user": "4e399685535deb9a81d77f40"}, {"code": "#(into () %)", "problem": 23, "user": "4e53bf5e535d8a8b8723a275"}, {"code": "#(let [helper (fn [acc s]\n  (if (empty? s)\n    acc \n    (recur (cons (first s) acc) (rest s))))]\n  (helper '() %))", "problem": 23, "user": "4e521cef535d302ef430da6d"}, {"code": "#(reduce\n  (fn [s b] (conj s b))\n  '() %)", "problem": 23, "user": "4e5676b2535d8a8b8723a282"}, {"code": "(fn rev\n    ([n]\n        (rev n '()))\n    ([n acc]\n        (if  (empty? n)   acc\n             (recur (rest n) (conj acc (first n))))))", "problem": 23, "user": "4e51fccf535d302ef430da6b"}, {"code": "#(loop [l %, r ()]\n  (if (empty? l) r\n    (recur (rest l) (cons (first l) r))))", "problem": 23, "user": "4e57afc5535d8a8b8723a288"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "4e57ecc4535d8a8b8723a28b"}, {"code": "(fn [x] (reduce conj () x))", "problem": 23, "user": "4e584cf2535d8a8b8723a28f"}, {"code": "(fn [s] (map last (take-while seq (iterate drop-last s))))", "problem": 23, "user": "4e584256535d8a8b8723a28e"}, {"code": "(fn [seq]\n (map #(nth (into [] seq) %) (range (- (count seq) 1) -1 -1)))", "problem": 23, "user": "4e5867d1535d8a8b8723a291"}, {"code": "(fn[a-seq]\n  (loop [rev '() ss a-seq]\n    (if (empty? ss)\n      rev\n      (recur (conj rev (first ss)) (rest ss)))))", "problem": 23, "user": "4e58bcd4535d8a8b8723a296"}, {"code": "reduce conj '()", "problem": 23, "user": "4e58dd23535d8a8b8723a298"}, {"code": "(fn [l]\n  (let [l2 (empty l)\n        rev-helper (fn [a b]\n                     (if (empty? a) b\n                       (recur (rest a) (cons (first a) b))))]\n  (rev-helper l l2)))", "problem": 23, "user": "4e4b911f535dc968683fc4d6"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4e58ef07535d8a8b8723a299"}, {"code": "#(into () %)", "problem": 23, "user": "4e588e84535d8a8b8723a294"}, {"code": "(partial apply conj '())", "problem": 23, "user": "4e5914e0535d8a8b8723a29b"}, {"code": "#(loop [xs % rev '()]\n  (if xs\n    (recur (next xs)\n           (conj rev (first xs)))\n    rev))", "problem": 23, "user": "4e593dac535d8a8b8723a29c"}, {"code": "(fn my-reverse [s]                                                                          \n        (loop [s s r []]                                                                            \n           (if (empty? s)                                                                           \n               r                                                                                    \n               (recur (rest s) (cons (first s) r)))))", "problem": 23, "user": "4e360072535deb9a81d77f30"}, {"code": "(fn [s] (reduce #(cons %2 %) [] s))", "problem": 23, "user": "4e599577535d8a8b8723a29f"}, {"code": "(fn [xs] (reduce conj () xs))", "problem": 23, "user": "4e54aa01535d8a8b8723a27c"}, {"code": "(fn rev\n    ([ls]\n\t   (if (empty? ls)\n\t       []\n\t       (rev ls [])))\n\t  ([ls acc]\n\t       (if (empty? (rest ls))\n\t\t   (cons (first ls) acc)\n\t\t   (recur (rest ls) (cons (first ls) acc)))))", "problem": 23, "user": "4e5a2403535d8a8b8723a2a7"}, {"code": "reduce conj ()", "problem": 23, "user": "4e597b2c535d8a8b8723a29d"}, {"code": "(fn [l]\n  (loop [from l into '()]\n    (if (seq from) (recur (rest from) (conj into (first from)))\n        into)))", "problem": 23, "user": "4e5a66d3535d8a8b8723a2ad"}, {"code": "#(into() %)", "problem": 23, "user": "4e570f47535d8a8b8723a287"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4e589bdc535d8a8b8723a295"}, {"code": "(partial into ())", "problem": 23, "user": "4e5b192e535d8a8b8723a2b3"}, {"code": "(fn [x] (reduce conj '() x))", "problem": 23, "user": "4e580746535d8a8b8723a28c"}, {"code": "(fn [coll]\n    (loop [revcoll nil coll coll]\n      (if (seq coll)\n        (recur (conj revcoll (first coll)) (rest coll))\n        revcoll)))", "problem": 23, "user": "4e5be681535d8a8b8723a2bc"}, {"code": "reduce #(cons %2 %1) '()", "problem": 23, "user": "4e5bff2b535d8a8b8723a2bd"}, {"code": "(fn rev-seq [x]\r\n  (loop [theseq x\r\n        revseq (list)]\r\n    (if (empty? theseq)\r\n      revseq\r\n      (recur (rest theseq) (concat (list (first theseq)) revseq)))))", "problem": 23, "user": "4e5ac5a4535d8a8b8723a2b0"}, {"code": "(fn [elems]\n  (loop [reversed '() l elems]\n      (if (empty? l)\n          reversed\n          (recur (conj reversed (first l)) (rest l)))))", "problem": 23, "user": "4e5c3612535d8a8b8723a2be"}, {"code": "(fn rev ([xs] (rev xs '()))\n  ([xs acc] \n    (if (seq xs) \n      (rev (rest xs) (conj acc (first xs))) \n      acc)))", "problem": 23, "user": "4e5c4cc6535d8a8b8723a2bf"}, {"code": "#(loop [c % r []]\r\n    (if-not c\r\n    r\r\n      (recur (next c) (cons (first c) r))))", "problem": 23, "user": "4e5a3891535d8a8b8723a2aa"}, {"code": "(fn f [s]\n  (if (empty? s) \n    []\n    (concat (f (rest s)) [(first s)])))", "problem": 23, "user": "4e5c801e535d8a8b8723a2c1"}, {"code": "(fn [s]\n  (reduce conj '() s))", "problem": 23, "user": "4e5c845e535d8a8b8723a2c2"}, {"code": "(fn [xs]\n  (reduce (fn [acc x]\n            (conj acc x)) () xs))", "problem": 23, "user": "4dada6d4c9a9d6ed2c99dc57"}, {"code": "(fn [n]\n  (loop [sq n acc '()]\n    (if (empty? sq)\n      acc\n      (recur (rest sq) (conj acc (first sq))))))", "problem": 23, "user": "4e5d2dc5535d8a8b8723a2ca"}, {"code": "reduce conj '()", "problem": 23, "user": "4e5cddd6535d8a8b8723a2c5"}, {"code": "(fn [xs]\n  (loop [xs xs ys []]\n    (if (empty? xs)\n        ys\n        (recur (rest xs) (cons (first xs) ys)))))", "problem": 23, "user": "4e5d0e96535d8a8b8723a2c8"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4dad938fc9a9d6ed1b99dc57"}, {"code": "#(into () %)", "problem": 23, "user": "4e55ea0c535d8a8b8723a281"}, {"code": "(fn [coll]\n           (loop [coll coll\n              res '()]\n              (if (seq coll)\n                  (recur (rest coll) (conj res (first coll)))\n                  res)))", "problem": 23, "user": "4e3bccb1535deb9a81d77f55"}, {"code": "(fn rev [l] (conj (if (= (count l) 1) [] (rev (rest l))) (first l)))", "problem": 23, "user": "4e5e9f6b535d8a8b8723a2d2"}, {"code": "(fn [coll]\n  \"Write a function which reverses a sequence.\"\n  (loop [coll coll\n         acc (list)]\n    (if (empty? coll)\n      acc\n      (recur (rest coll) (conj acc (first coll))))))", "problem": 23, "user": "4e5eb843535d8a8b8723a2d4"}, {"code": "#(into () %)", "problem": 23, "user": "4e5f08c7535d8a8b8723a2da"}, {"code": "(fn [ls]\n  (loop [l ls rev ()]\n    (if (empty? l)\n        rev\n        (recur (rest l) (cons (first l) rev)))))", "problem": 23, "user": "4e5f034b535d8a8b8723a2d9"}, {"code": "(fn [list] (cond (= list [1 2 3 4 5]) [5 4 3 2 1]\n                 (= list (sorted-set 5 7 2 7)) '(7 5 2)\n                 (= list [[1 2][3 4][5 6]]) [[5 6][3 4][1 2]]\n                 ))", "problem": 23, "user": "4e0dee88535d04ed9115e7b8"}, {"code": "#(loop [in % out []]\n  (if (empty? in)\n    out\n    (recur (rest in) (concat [(first in)] out))))", "problem": 23, "user": "4e5fe31a535d8ccf87e9fe50"}, {"code": "(fn [s]\n  (reduce conj () s)\n)", "problem": 23, "user": "4e570b60535d8a8b8723a286"}, {"code": "into '()", "problem": 23, "user": "4e5ecd65535d8a8b8723a2d6"}, {"code": "#(into () %)", "problem": 23, "user": "4e44510b535dc968683fc4aa"}, {"code": "(fn rev [x]\n  (cond   (empty? x) '()\n\t\t\ttrue (concat (rev (rest x)) (list (first x)))))", "problem": 23, "user": "4e5fda32535d8ccf87e9fe4e"}, {"code": "(fn rev [seq]\n  (if (or (empty? seq) \n          (= (count seq) 1))\n                seq\n      (cons (last seq) (rev (butlast seq)))))", "problem": 23, "user": "4e223bd6535d04ed9115e81c"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "4e615cd2535d8ccf87e9fe58"}, {"code": "#(into () %)", "problem": 23, "user": "4e61bb60535d8ccf87e9fe5c"}, {"code": "(fn my-reverse [col] (if (empty? col) nil (conj (my-reverse (butlast col)) (last col))))", "problem": 23, "user": "4e62294c535d8ccf87e9fe5f"}, {"code": "(fn temp\n  ([l] (temp l '()))\n  ([l r]\n    (let [x (first l) y (next l) z (conj r x)]\n        (if y (recur y z) z)\n    )\n  )\n)", "problem": 23, "user": "4e44358f535dc968683fc4a8"}, {"code": "#(into '() %)", "problem": 23, "user": "4e634eb9535d8ccf87e9fe63"}, {"code": "(fn [x] (into () x))", "problem": 23, "user": "4e63957b535d8ccf87e9fe65"}, {"code": "(fn reverse-seq                                                                                                                                             \n  [coll]                                                                                                                                                      \n  (loop [*lst (empty coll) n 0 *coll coll]                                                                                                                    \n    (if (= n (count coll))                                                                                                                                    \n      *lst                                                                                                                                                    \n      (recur (cons (first *coll) *lst) (inc n) (rest *coll)))))", "problem": 23, "user": "4e3bcccd535deb9a81d77f56"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4e6472b7535d8ccf87e9fe6c"}, {"code": "reduce conj()", "problem": 23, "user": "4e1c2e16535d04ed9115e804"}, {"code": "(fn reverseNew [s]\n  (if (= s ())\n    s\n    (concat (reverseNew (rest s)) [(first s)])\n  )\n)", "problem": 23, "user": "4e6537f1535d8ccf87e9fe70"}, {"code": "(fn [sequ] (reduce (fn [r m] (cons m r)) [] sequ))", "problem": 23, "user": "4e5c538c535d8a8b8723a2c0"}, {"code": "#(loop [r [] s % i (count %)]\n  (if (< i 1)\n    r (recur (conj r (last s)) (butlast s) (dec i))))", "problem": 23, "user": "4e1fe800535d04ed9115e811"}, {"code": "#(reduce (fn [i e] (conj i e)) () (vec %))", "problem": 23, "user": "4e65f9d4535d8ccf87e9fe73"}, {"code": "(partial\n  #(if (empty? %2)\n    %1\n    (recur (conj %1 (first %2)) (rest %2)))\n  '())", "problem": 23, "user": "4e6093c9535d8ccf87e9fe54"}, {"code": "(fn myreverse [seq]\n     (if (empty? seq)\n       seq\n       (concat (myreverse (rest seq)) (list (first seq)))\n     ))", "problem": 23, "user": "4e653558535d8ccf87e9fe6f"}, {"code": "(fn [xs]\n  (loop [old-seq xs\n        new-seq '()]\n    (if (empty? old-seq)\n      new-seq\n      (recur (rest old-seq) (conj new-seq (first old-seq))))))", "problem": 23, "user": "4e667f67535d8ccf87e9fe77"}, {"code": "#(loop [x nil y %]\n  (if (empty? y)\n    x\n    (recur (cons (first y) x) (rest y))))", "problem": 23, "user": "4e4aaf49535dc968683fc4ce"}, {"code": "(fn [sequence]\n  (loop [remaining sequence\n         acc '()]\n    (if (empty? remaining)\n      acc\n    (recur (rest remaining) (conj acc (first remaining))))))", "problem": 23, "user": "4e657c05535d8ccf87e9fe72"}, {"code": "#(loop [l1 %1\r\n       r1 '()]\r\n  (if (empty? l1)\r\n    r1\r\n    (recur (rest l1) (cons (first l1) r1))))", "problem": 23, "user": "4e5bdc2b535d8a8b8723a2bb"}, {"code": "reduce #(conj %1 %2) nil", "problem": 23, "user": "4e67b0aa535d8ccf87e9fe80"}, {"code": "(fn roflreverse [initial-seq]\n  (loop [seq initial-seq out ()]\n    (if (= seq ())\n      out\n      (recur (rest seq) (conj out (first seq))))))", "problem": 23, "user": "4e55958a535d8a8b8723a27e"}, {"code": "#(loop [l %1 acc '()]\n  (if (empty? l)\n    acc\n    (recur (rest l) (conj acc (first l)))))", "problem": 23, "user": "4e68b46c535d8ccf87e9fe87"}, {"code": "#(loop [a % b ()] (if a (recur (next a) (cons (first a) b)) b))", "problem": 23, "user": "4e68be01535d8ccf87e9fe88"}, {"code": "(fn f [lst]\n  (when lst\n    (cons (last lst)\n          (f (butlast lst)))))", "problem": 23, "user": "4e68dbd5535d8ccf87e9fe8f"}, {"code": "(fn [coll]\n  (loop [result nil coll coll]\n    (if-let [n (seq coll)]\n      (recur (cons (first n) result) (rest coll))\n      result)))", "problem": 23, "user": "4e68c434535d8ccf87e9fe89"}, {"code": "(fn [s]\n  (loop [rev '() orig s]\n    (if (empty? orig)\n       rev\n      (recur (conj rev (first orig)) (rest orig)))))", "problem": 23, "user": "4e68fad4535d8ccf87e9fe93"}, {"code": "(fn my-reverse [lst]\r\n        (letfn [(rec [lst acc]\r\n                    (if (= (first lst) nil)\r\n                        acc\r\n                        (rec (rest lst) (cons (first lst) acc))))]\r\n          (rec lst nil)))", "problem": 23, "user": "4e68fe94535d8ccf87e9fe94"}, {"code": "#(into () %)", "problem": 23, "user": "4e028764535d04ed9115e790"}, {"code": "(fn [x]\n    (loop [p x q nil]\n        (if (nil? p) \n            (if (sequential? x) (into (empty x) q) q)\n            (recur (next p) (cons (first p) q)))))", "problem": 23, "user": "4e699b20535d8ccf87e9fe9d"}, {"code": "into '()", "problem": 23, "user": "4e6a0667535d8ccf87e9fe9e"}, {"code": "#(reduce (fn [a b] (cons b a)) [] %)", "problem": 23, "user": "4e6a2ee0535d8ccf87e9fea8"}, {"code": "(fn [xs]\n  (loop [coll xs rev []]\n    (if (empty? coll)\n      rev\n      (recur (rest coll) (cons (first coll) rev)))))", "problem": 23, "user": "4e6a2e83535d8ccf87e9fea7"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4e6a3930535d8ccf87e9feb0"}, {"code": "#(loop [s %, acc '()]\n  (if (= s '())\n    acc\n    (recur (rest s) (conj acc (first s)))))", "problem": 23, "user": "4e6a2f93535d8ccf87e9feaa"}, {"code": "reduce conj ()", "problem": 23, "user": "4e6a412e535d8ccf87e9feb6"}, {"code": "reduce #(cons %2 %1)nil", "problem": 23, "user": "4e6a4038535d8ccf87e9feb5"}, {"code": "(fn [seq]\n  (into () seq))", "problem": 23, "user": "4e6a3985535d8ccf87e9feb1"}, {"code": "(fn [l]\n  (map \n    (fn [i] (nth (seq l) (- (count (seq l)) i 1)))\n    (range 0 (count (seq l)))))", "problem": 23, "user": "4e6a48da535d8ccf87e9febe"}, {"code": "(fn retrograde [xs]\n  ((fn impl [xs acc]\n    (if (empty? xs)\n      acc\n      (impl (rest xs) (cons (first xs) acc))))\n    xs '()))", "problem": 23, "user": "4e691c79535d8ccf87e9fe97"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4e6a4541535d8ccf87e9feb8"}, {"code": "(fn [c] (reduce #(cons %2 %) [] c))", "problem": 23, "user": "4e6a48d5535d8ccf87e9febd"}, {"code": "#(vals\n  (reduce conj {}\n    (map-indexed (fn [a b] [a b]) %)))", "problem": 23, "user": "4e6a521c535d8ccf87e9fec8"}, {"code": "reduce conj ()", "problem": 23, "user": "4e6a5168535d8ccf87e9fec6"}, {"code": "(fn L [x]\n  (if (first x) \n    (concat (L (rest x)) (list (first x)))\n    '()\n  )\n)", "problem": 23, "user": "4e6a33fc535d8ccf87e9feac"}, {"code": "(fn rev-seq [s]\n  (loop [s0 s r ()]\n    (if (empty? s0)\n      r\n      (recur (rest s0) (conj r (first s0))))))", "problem": 23, "user": "4e6a2503535d8ccf87e9fea2"}, {"code": "#(reduce (fn [a b] (conj a b)) '() %)", "problem": 23, "user": "4e6a5f5c535d8ccf87e9fed6"}, {"code": "#(into () %1)", "problem": 23, "user": "4e6a5158535d8ccf87e9fec5"}, {"code": "(fn [l] \n  (loop [initial l\n        final []]\n          (if (empty? initial)\n              final\n              (recur \n                (rest initial) \n                (cons (first initial) \n                final)))))", "problem": 23, "user": "4e6a60cd535d8ccf87e9fed7"}, {"code": "#(into '() %)", "problem": 23, "user": "4e6a5a32535d8ccf87e9fed0"}, {"code": "reduce #(cons %2 %1) '()", "problem": 23, "user": "4e6a7fa0535d8ccf87e9feed"}, {"code": "(fn revMe [coll] (if (empty? (rest coll)) (vec coll) (conj (revMe (rest coll)) (first coll))))", "problem": 23, "user": "4e6a79ca535d8ccf87e9feeb"}, {"code": "(partial reduce conj ())", "problem": 23, "user": "4e6a4954535d8ccf87e9fec0"}, {"code": "into '()", "problem": 23, "user": "4e6a947f535d8ccf87e9fef7"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4e6a6d12535d8ccf87e9fee2"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4e50ee51535dc968683fc4f0"}, {"code": "reduce conj ()", "problem": 23, "user": "4e6ab9cb535d8ccf87e9fefe"}, {"code": "(fn [xs]  \n  ((fn [xs sx]\n    (if (not (seq xs))\n      sx\n      (recur (next xs) (cons (first xs) sx)))) xs nil))", "problem": 23, "user": "4e6a97a9535d8ccf87e9fef8"}, {"code": "reduce conj nil", "problem": 23, "user": "4e6b3fc8535d8ccf87e9ff0f"}, {"code": "(fn [xs]\n  ((fn [xs, res]\n    (if \n      (empty? xs)\n      res\n      (recur\n        (rest xs)\n        (conj res (first xs))))) xs '()))", "problem": 23, "user": "4e6a559e535d8ccf87e9fecd"}, {"code": "(fn [s] \n    (reduce conj () s))", "problem": 23, "user": "4e6a6af5535d8ccf87e9fedf"}, {"code": "(fn [i]\n  (let [s (seq i)\n        is (range (- (count s) 1) -1 -1)]\n    (map (fn [e i] (nth s i)) s is)))", "problem": 23, "user": "4e6a4ab9535d8ccf87e9fec2"}, {"code": "#(loop [c % x '()]\n(if (nil? c) x (recur (next c) (conj x (first c)))))", "problem": 23, "user": "4e6cf61a535de274dd8d818c"}, {"code": "(fn [set]\n  (reduce conj () set))", "problem": 23, "user": "4e6b998a535d8ccf87e9ff1c"}, {"code": "#(into '() %)", "problem": 23, "user": "4e6b04ae535d8ccf87e9ff09"}, {"code": "(fn rev [x] (if (= (count x) 1)\n             x\n             (conj  (rev (butlast x)) (last x) ) ))", "problem": 23, "user": "4e6cf521535de274dd8d818b"}, {"code": "reduce #(cons %2 %1) []", "problem": 23, "user": "4e6b91e4535d8ccf87e9ff1a"}, {"code": "(fn [a-seq] (reduce conj '() a-seq))", "problem": 23, "user": "4e6dc95a535d5021c1a895f1"}, {"code": "(fn [c] (reduce #(conj % %2) () c))", "problem": 23, "user": "4e6dd0f5535d5021c1a895f3"}, {"code": "#(loop [coll % res ()]\n  (if (empty? coll)\n  res\n  (recur (rest coll) (cons (first coll) res))))", "problem": 23, "user": "4e6dc5f5535d5021c1a895f0"}, {"code": "#(loop [col % acc '()]\n  (if (empty? col)\n    acc\n  (recur (rest col) (conj acc (first col)))))", "problem": 23, "user": "4e6a11ee535d8ccf87e9fe9f"}, {"code": "(fn [s]\n  (reduce conj nil s))", "problem": 23, "user": "4e6dd51b535d5021c1a895f6"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4e6defcc535d5021c1a895f8"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4e31a101535deb9a81d77f1d"}, {"code": "reduce conj ()", "problem": 23, "user": "4e6dfe57535d5021c1a895fc"}, {"code": "(fn [l]\n  (reduce conj '() l)\n)", "problem": 23, "user": "4e6e10d8535d5021c1a895fd"}, {"code": "(fn [x] (reduce conj () x))", "problem": 23, "user": "4e692c0d535d8ccf87e9fe99"}, {"code": "#(reduce conj '() (apply list %))", "problem": 23, "user": "4e6e4127535d5021c1a89605"}, {"code": "(fn rev [L]\n  (loop [r () \n         s L]       \n    (if (= () s) r\n        (recur (conj r (first s)) (rest s)))))", "problem": 23, "user": "4e6e3a1e535d5021c1a89602"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4e6e3aac535d5021c1a89603"}, {"code": "(fn [x] (reduce #(cons %2 %1) '() x))", "problem": 23, "user": "4e6def42535d5021c1a895f7"}, {"code": "(fn myreverse [n] (if (= nil n) nil (concat (list (last n)) (myreverse (butlast n))) ))", "problem": 23, "user": "4e6e6630535d5021c1a89609"}, {"code": "(partial (fn [n s]\n           (if (empty? s)\n             n\n             (recur (conj n (last s)) (butlast s))))\n          [])", "problem": 23, "user": "4e6ebd4a535d5021c1a89610"}, {"code": "(fn [coll]\n  (loop\n    [inp coll res (empty coll)]\n    (if (empty? inp)\n      res\n      (recur (drop-last inp) (concat res (take-last 1 inp))))))", "problem": 23, "user": "4e6e97ca535d5021c1a8960c"}, {"code": "#(reduce conj () %1)", "problem": 23, "user": "4e678231535d8ccf87e9fe7e"}, {"code": "(fn [seq] \n (reduce conj () seq) \n)", "problem": 23, "user": "4e6daa22535d5021c1a895ef"}, {"code": "reduce #(cons %2 %1) []", "problem": 23, "user": "4e68323a535d8ccf87e9fe86"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4e6e7018535d5021c1a8960b"}, {"code": "into '()", "problem": 23, "user": "4e6f4cbc535d5021c1a8961a"}, {"code": "(fn [s]\n  ((fn [x r]\n    (if (= '() x)\n      r\n      (recur (rest x) (conj r (first x)))))\n  s '()))", "problem": 23, "user": "4e6f7178535d5021c1a8961c"}, {"code": "#(reduce (fn [ac i] (concat [i] ac)  ) [] %)", "problem": 23, "user": "4e6f8d36535d5021c1a89621"}, {"code": "(fn my-reverse [s]\n  (if (empty? s) s\n    (cons (last s) (my-reverse (butlast s)))))", "problem": 23, "user": "4e6a4950535d8ccf87e9febf"}, {"code": ";(fn [lst] \n;  (map first \n;    (sort-by first > (map-indexed (fn [x i] (list i x)) lst ))))\n#(into () %)", "problem": 23, "user": "4e6eff83535d5021c1a89615"}, {"code": "(fn [coll]\r\n  (reduce conj () coll))", "problem": 23, "user": "4e6a6b83535d8ccf87e9fee0"}, {"code": "(fn foo\n  ([coll] \n    (if (nil? coll)\n      nil\n      (cons (last coll) (foo (butlast coll))))))", "problem": 23, "user": "4e6fe3a6535d5021c1a89629"}, {"code": "reduce #(cons %2 %1) []", "problem": 23, "user": "4e6ed7e4535d5021c1a89613"}, {"code": "#(reduce (fn [coll x] (cons x coll)) [] %)", "problem": 23, "user": "4e6df3c9535d5021c1a895fa"}, {"code": "reduce conj '()", "problem": 23, "user": "4e6e1756535d5021c1a895fe"}, {"code": "#((fn rev [s rs] (if (= (rest s) '()) (conj rs (first s)) (rev (rest s) (conj rs (first s))))) % '())", "problem": 23, "user": "4e70b881535d5021c1a8963f"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4e70c0b1535d5021c1a89640"}, {"code": "#(do (loop [s %, r ()]\n        (if (= s ())\n          r\n          (recur (rest s)\n                     (concat (list (first s)) r)))))", "problem": 23, "user": "4e6a368e535d8ccf87e9feae"}, {"code": "apply conj ()", "problem": 23, "user": "4e704293535d5021c1a89634"}, {"code": "(fn [c]\n  (reduce (fn [a, e] (cons e a)) '() c))", "problem": 23, "user": "4e690d86535d8ccf87e9fe96"}, {"code": "(fn rev [list] \n  (if (= list [])\n    []\n    (conj (rev (rest list)) (first list))))", "problem": 23, "user": "4e7023f8535d5021c1a89631"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4e705861535d5021c1a89635"}, {"code": "(fn [s]\n  ((fn [x w]\n  (if (empty? x)\n      w\n      (recur (rest x) (cons (first x) w))))\n   s nil))", "problem": 23, "user": "4e6a73d0535d8ccf87e9fee7"}, {"code": "(fn foo\n  ([input] (foo input '()))\n  ([input result]\n    (if (empty? input)\n      result\n      (recur (rest input) (conj result (first input))))))", "problem": 23, "user": "4e5d1912535d8a8b8723a2c9"}, {"code": "into ()", "problem": 23, "user": "4e6e4210535d5021c1a89606"}, {"code": "(fn reverte [lst] (reduce conj() lst))", "problem": 23, "user": "4e6a4641535d8ccf87e9feb9"}, {"code": "into ()", "problem": 23, "user": "4e7115b3535d5021c1a89647"}, {"code": "(fn [x] (reduce conj () x))", "problem": 23, "user": "4e7030be535d5021c1a89632"}, {"code": "(fn [s]\n    (apply conj () s))", "problem": 23, "user": "4e71cc2e535d5021c1a89652"}, {"code": "(fn [seq]\n  (loop [s seq r ()]\n    (if (empty? s)\n       r\n       (recur (rest s) (cons (first s) r)))))", "problem": 23, "user": "4e71e7b7535d5021c1a89654"}, {"code": "(fn my-rev\n  ([li] (my-rev li '()))\n  ([li ag]\n    (if (= (count li) 0)\n      ag\n      (my-rev (rest li) (conj ag (first li))))))", "problem": 23, "user": "4e72175d535d5021c1a89658"}, {"code": "(fn [l]\n  ((fn _rev [l r]\n   (if (= 0 (count l))\n    r\n    (_rev (rest l) (conj r (first l))))\n   ) l ()))", "problem": 23, "user": "4e720985535d5021c1a89655"}, {"code": "#(into () %)", "problem": 23, "user": "4e726914535d5021c1a89661"}, {"code": "(fn [s] \n  (loop [x s xs '()]\n    (if (empty? x) \n      xs\n      (recur (rest x) (cons (first x) xs)))))", "problem": 23, "user": "4daf907aedd6309eace4d17b"}, {"code": "into ()", "problem": 23, "user": "4e53319d535d8a8b8723a270"}, {"code": "(partial reduce #(cons %2 %1) [])", "problem": 23, "user": "4e6fa38b535d5021c1a89622"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4e72a717535d5021c1a89665"}, {"code": "into ()", "problem": 23, "user": "4e71da4d535d5021c1a89653"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4e725d20535d5021c1a8965e"}, {"code": "into ()", "problem": 23, "user": "4e72ac47535d5021c1a89666"}, {"code": "into ()", "problem": 23, "user": "4e6b07dd535d8ccf87e9ff0a"}, {"code": "reduce conj nil", "problem": 23, "user": "4e71920f535d5021c1a8964e"}, {"code": "(fn my-reverse\n       ([col] (my-reverse col '()))\n       ([col rcol]\n         (if (nil? col)\n           rcol\n           (my-reverse (next col) (conj rcol (first col)))\n         )\n       )\n       \n       \n     )", "problem": 23, "user": "4e73debb535d7a570dd295b7"}, {"code": "(fn [coll]\n  (if (vector? coll)\n\t  (for [x (range (- (count coll) 1) -1 -1)] (get coll x))\t\n\t  (loop [lst '() xs coll]\n\t    (if (seq xs)\n\t      (recur (conj lst (first xs)) (rest xs)) \n\t      lst))))", "problem": 23, "user": "4e6a4edd535d8ccf87e9fec4"}, {"code": "#(loop [c % acc '()]\n  (if (empty? c)\n      acc\n      (recur (next c) (conj acc (first c)))))", "problem": 23, "user": "4e6acc33535d8ccf87e9ff05"}, {"code": "#(reduce (fn [coll x] (conj coll x)) () %)", "problem": 23, "user": "4e6f1b7a535d5021c1a89618"}, {"code": "(fn [coll] \n    (map #(nth (vec coll) %) (range (dec (count coll)) -1 -1)))", "problem": 23, "user": "4e739e13535dff18050a9c76"}, {"code": "(fn f [s] (if (empty? s) () (cons (last s) (f (take (- (count s) 1) s)))))", "problem": 23, "user": "4e72430c535d5021c1a8965d"}, {"code": "reduce conj ()", "problem": 23, "user": "4e6799cc535d8ccf87e9fe7f"}, {"code": "(fn shallow-reverse1\n  ([lst] (shallow-reverse1 lst nil))\n  ([lst tail]\n     (if (first lst) (recur (next lst) (cons (first lst) tail)) tail)))", "problem": 23, "user": "4e71705e535d5021c1a89649"}, {"code": "(fn r[s]\n   (into '() s)\n)", "problem": 23, "user": "4e6ac49d535d8ccf87e9ff01"}, {"code": "(fn [n] (loop [list n rv []] (if (empty? list) rv (recur (drop-last list) (conj rv (last list))))))", "problem": 23, "user": "4e75334b535d7a570dd295be"}, {"code": "#(loop [c % v []] (if (nil? c) v (recur (next c) (cons (first c) v))))", "problem": 23, "user": "4e735545535d6912a4457f75"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4e76ba46535d324fb2983d6d"}, {"code": "(fn my-reverse \n  ([x] (my-reverse x nil))\n\t([x result] (if (empty? x) result (my-reverse (rest x) (cons (first x) result)))))", "problem": 23, "user": "4e75d6b6535d7a570dd295c6"}, {"code": "(fn my-reverse [seq]\n  (if (empty? seq) '()\n      (concat (my-reverse (rest seq))\n            (list (first seq)))))", "problem": 23, "user": "4e7542b5535d7a570dd295c0"}, {"code": "(fn [l]\n  (reduce #(concat [%2] %1) [] l))", "problem": 23, "user": "4e6a2f51535d8ccf87e9fea9"}, {"code": "(fn [c]\n  (reduce conj () c)\n  )", "problem": 23, "user": "4db7da66535d1e037afb2187"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4e776206535d324fb2983d70"}, {"code": "into ()", "problem": 23, "user": "4e781a2e535d324fb2983d74"}, {"code": "into ()", "problem": 23, "user": "4e773be8535d324fb2983d6e"}, {"code": "reduce conj ()", "problem": 23, "user": "4e765170535d324fb2983d69"}, {"code": "(fn shittyreverse [x] (if (= x '()) '() (conj (vec (shittyreverse (rest x))) (first x))))", "problem": 23, "user": "4e663855535d8ccf87e9fe76"}, {"code": "(fn [x] \n    (map #(nth (into [] x) %) (map #(* -1 %) (range (* -1 (- (count x) 1)) 1))))", "problem": 23, "user": "4e78dc98535db95036265724"}, {"code": "(fn [col] (loop [c col, result [], cnt (count col)] (if (= cnt 0) result (recur (rest c) (conj result (nth (apply list col) (- cnt 1))) (dec cnt)))))", "problem": 23, "user": "4e794004535db169f9c796a1"}, {"code": "#(apply conj () %)", "problem": 23, "user": "4e79a143535db169f9c796a2"}, {"code": "reduce #(cons %2 %1) '()", "problem": 23, "user": "4e707db6535d5021c1a8963a"}, {"code": "into ()", "problem": 23, "user": "4da3e51330acd6ed10482a68"}, {"code": "into ()", "problem": 23, "user": "4e79f28b535db169f9c796a8"}, {"code": "(fn it [s]\n  (if (empty? s)\n     []\n     (concat (it (rest s)) [(first s)])))", "problem": 23, "user": "4e7a5395535db169f9c796ab"}, {"code": "(fn my-reverse\n  [lst]\n  (if (empty? lst)\n    lst\n    (conj (my-reverse (butlast lst)) (last lst))))", "problem": 23, "user": "4e7a479b535db169f9c796aa"}, {"code": "(fn rev [x]\n  (if (empty? x) []\n    (conj (rev (rest x)) (first x))))\n; into ()", "problem": 23, "user": "4e4aceff535dc968683fc4d0"}, {"code": "#(apply conj '() (seq %))", "problem": 23, "user": "4e739795535dff18050a9c75"}, {"code": "#((fn foo [lst rev]\n  (if (empty? lst)\n    rev\n    (foo (rest lst) (cons (first lst) rev)))) % '())", "problem": 23, "user": "4e7b7e0d535db169f9c796b3"}, {"code": "into '()", "problem": 23, "user": "4e5a460f535d8a8b8723a2ab"}, {"code": "#(loop [sq % newseq []] (if (empty? sq) newseq (recur (butlast sq) (conj newseq (last sq)))))", "problem": 23, "user": "4e721857535d5021c1a8965a"}, {"code": "reduce conj ()", "problem": 23, "user": "4e7bc07c535db169f9c796b9"}, {"code": "(fn rv [coll]\n  (if (= (count coll) 1)\n    coll\n  (cons (last coll) (rv (drop-last coll)))))", "problem": 23, "user": "4e759734535d7a570dd295c4"}, {"code": "(fn [s]\n  (let [fn-aux (fn [s rs]\n                 (if (seq s)\n                    (recur (rest s) (cons (first s) rs))\n                     rs))]\n       (fn-aux s '())))", "problem": 23, "user": "4e7c4290535db169f9c796bc"}, {"code": "reduce (fn [result elt] (cons elt result)) ()", "problem": 23, "user": "4e7c8fd1535db169f9c796be"}, {"code": "(fn rev [lst]\n  (if (= 1 (count lst)) lst\n      (concat (rev (rest lst)) (list (first lst)))))", "problem": 23, "user": "4e7b6e49535db169f9c796b1"}, {"code": "(fn reverseMe[col & newCol]\n        (if (empty? col)\n            newCol\n             (let [letztes (first col)]\n              (recur (rest col) (conj newCol letztes)))))", "problem": 23, "user": "4e7ada51535db169f9c796ae"}, {"code": "(fn mr  [l] \n\n   (if (empty? l)\n     l\n   \n     (cons (last l) (mr (butlast l)) )\n     )\n\n\n  \n   )", "problem": 23, "user": "4e78c208535db95036265722"}, {"code": "reduce conj ()", "problem": 23, "user": "4e5fb634535d8ccf87e9fe4a"}, {"code": "#(loop [coll % stk []]\r\n  (if (empty? coll)\r\n    stk\r\n    (recur (next coll) (cons (first coll) stk))))", "problem": 23, "user": "4e79ff2a535db169f9c796a9"}, {"code": "(fn aa [x]\n  (loop [dep x rep (list)]\n(if (empty? dep) rep (recur (rest dep) (conj rep (first dep))))))", "problem": 23, "user": "4e36e647535deb9a81d77f36"}, {"code": "(fn [col]\n  ((fn [ccol rcol]\n    (if (empty? ccol)\n      rcol\n      (recur (rest ccol) (conj rcol (first ccol))))) col '()))", "problem": 23, "user": "4e7d9257535db169f9c796dd"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "4e6ea1f5535d5021c1a8960e"}, {"code": "into '()", "problem": 23, "user": "4e7db3b4535db169f9c796e1"}, {"code": "(fn [x] \n  ((fn r [i o]\n    (if \n      (empty? i) o\n      (r (rest i) (cons (first i) o)))) x ()))", "problem": 23, "user": "4e7db08d535db169f9c796e0"}, {"code": "(fn this\n  [some-seq]\n  (if (seq some-seq)\n    (conj (this (drop-last some-seq))\n          (last some-seq))))", "problem": 23, "user": "4e6ac7a8535d8ccf87e9ff03"}, {"code": "(fn [s1]\n  (loop [org s1 acc '()]\n    (if (= (first org) nil)\n        acc\n        (recur (rest org) \n               (conj acc (first org))))))", "problem": 23, "user": "4e7dbe0c535db169f9c796e3"}, {"code": "(fn dood\n    ([l] (dood l ()))\n\t  ([l r] \n\t\t (if (seq l)\n\t\t     (dood (rest l) (conj r (first l)))\n\t\t     r)))", "problem": 23, "user": "4e6cf2be535de274dd8d818a"}, {"code": "into ()", "problem": 23, "user": "4e7dd982535db169f9c796ee"}, {"code": "(fn [col]\n  (into '() col))", "problem": 23, "user": "4e7d4544535db169f9c796d0"}, {"code": "(fn [lst]\n      (loop [ls lst rlst ()]\n        (if (empty? ls) rlst\n          (recur (rest ls) (cons (first ls) rlst)))))", "problem": 23, "user": "4e7d1c22535db169f9c796c5"}, {"code": "into ()", "problem": 23, "user": "4e7dfab0535db169f9c796f9"}, {"code": "(fn [s] (into '() s))", "problem": 23, "user": "4e6f8af8535d5021c1a89620"}, {"code": "(fn rev [x]\n  (reduce conj () x))", "problem": 23, "user": "4e7ddc71535db169f9c796ef"}, {"code": "(fn rev [xs] \n  (if (= 1 (count xs)) xs\n    (conj (vec (rev (rest xs))) (first xs))))", "problem": 23, "user": "4e7dfd48535db169f9c796fa"}, {"code": "into '()", "problem": 23, "user": "4e7e2ea0535db169f9c79707"}, {"code": "#(reduce (fn [f s] (cond (seq? f) (conj f s) :else (conj '() f s))) %)", "problem": 23, "user": "4e7e33a3535db169f9c79708"}, {"code": "(fn [s]\n  (loop [source s target ()]\n    (if (= source '())\n      (seq target)\n      (recur (rest source)\n             (conj target (first source))))))", "problem": 23, "user": "4e7e3504535db169f9c79709"}, {"code": "(fn [x]\n         (loop [lst x result '()]\n               (if (seq lst)\n                 (recur (rest lst) (conj result (first lst)))\n                 result)))", "problem": 23, "user": "4e7e241a535db169f9c79705"}, {"code": "(fn [s]\n  (letfn [(rever [sq rev]\n            (let [f (first sq)\n                  back (rest sq)]\n              (if f\n                (recur back (cons f rev))\n                rev)))]\n    (rever s [])))", "problem": 23, "user": "4e7e032b535db169f9c796fc"}, {"code": "(fn rev [xs] \n  (loop [\n    xs xs\n    a nil]\n    (if (empty? xs) a\n(recur (rest xs) (cons (first xs) a)))))", "problem": 23, "user": "4e7e55ab535db169f9c79711"}, {"code": "(fn [elems]\n  (loop [recur-so-far (list (first elems)), e (rest elems)]\n\t\t(if (not (= '() (rest e)))\n\t\t\t(recur (cons (first e) recur-so-far) (rest e))\n\t\t\t(cons (first e) recur-so-far))))", "problem": 23, "user": "4e641bfd535d8ccf87e9fe67"}, {"code": "(fn [coll]\n  (loop [rcoll '(), coll coll]\n    (if (seq coll)\n      (recur (cons (first coll) rcoll) (rest coll))\n      rcoll)))", "problem": 23, "user": "4e7e4d5c535db169f9c7970f"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4e7e93f5535db169f9c7971a"}, {"code": "into'()", "problem": 23, "user": "4e7eff9e535db966e863cc38"}, {"code": "(fn [seq]\n  (vals (zipmap (iterate dec 0) seq)))", "problem": 23, "user": "4e7f32ee535db966e863cc3a"}, {"code": "reduce conj '()", "problem": 23, "user": "4e7f4147535db966e863cc3d"}, {"code": "(fn [x]\n  (loop [coll x rev nil]\n    (if (empty? coll)\n      rev\n      (recur (rest coll) (conj rev (first coll))))))", "problem": 23, "user": "4e7f51eb535db966e863cc3f"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "4e6a61d8535d8ccf87e9fed8"}, {"code": "(fn [coll] \n  (loop [vcoll (vec coll), acc nil] \n    (if (empty? vcoll)\n      acc \n      (recur (next vcoll) (cons (first vcoll) acc)))))", "problem": 23, "user": "4e7f7e48535db966e863cc42"}, {"code": "#(into () %)", "problem": 23, "user": "4e7f8f85535db966e863cc44"}, {"code": "(fn [coll]\n  (reduce conj () coll))", "problem": 23, "user": "4e7e8694535db169f9c79718"}, {"code": "(fn  [initial-l]\r\n      (loop [rev-lst '(), l initial-l]\r\n        (if (first l)\r\n          (recur (cons (first l) rev-lst) (next l))\r\n          rev-lst)))", "problem": 23, "user": "4dda61dd535d02782fcbe9f3"}, {"code": "(fn [seq] (reduce #(conj %1 %2) '() seq))", "problem": 23, "user": "4e7e05a6535db169f9c796fe"}, {"code": "#(loop [result (list (first %)) coll (rest %)]\n  (if (empty? coll)\n    result\n    (recur (conj result (first coll)) (drop 1 coll))))", "problem": 23, "user": "4e71a12c535d5021c1a8964f"}, {"code": "(fn [coll]\n  (loop [coll coll result []]\n    (if (empty? coll)\n      result\n      (recur (butlast coll) (conj result (last coll))))))", "problem": 23, "user": "4e80aa10535db62dc21a62b1"}, {"code": "reduce conj ()", "problem": 23, "user": "4e5bbadb535d8a8b8723a2b9"}, {"code": "reduce (fn [s n] (conj s n)) ()", "problem": 23, "user": "4e80d71b535db62dc21a62b7"}, {"code": "(fn foo\r\n  ([coll] (foo coll []))\r\n  ([coll result]\r\n    (if (empty? coll)\r\n      result\r\n      (recur (drop-last coll) (conj result (last coll)))\r\n    )\r\n  )\r\n)", "problem": 23, "user": "4e7f3891535db966e863cc3b"}, {"code": "(fn [coll]\n  (loop [c coll, r '()]\n    (if c\n      (recur (next c) (conj r (first c)))\n      r)))", "problem": 23, "user": "4e7dcdb5535db169f9c796e9"}, {"code": "into ()", "problem": 23, "user": "4db1f7d223724b71670a9c07"}, {"code": "(fn [initial-x]\r\n  (loop [y [], x initial-x]\r\n    (if (seq x)\r\n      (recur (cons (first x) y) (rest x))\r\n      y)))", "problem": 23, "user": "4e81e29b535db62dc21a62bd"}, {"code": "into ()", "problem": 23, "user": "4db85bdd535d1e037afb218d"}, {"code": "into ()", "problem": 23, "user": "4db858d1535d1e037afb218c"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4e823f41535db62dc21a62c8"}, {"code": "into '()", "problem": 23, "user": "4e823ed7535db62dc21a62c7"}, {"code": "reduce (fn [rev x] (cons x rev)) ()", "problem": 23, "user": "4e80e0f2535db62dc21a62b8"}, {"code": "(fn [l]\n  (reduce conj '() l))", "problem": 23, "user": "4e82c062535db62dc21a62cc"}, {"code": "into ()", "problem": 23, "user": "4e82f85d535db62dc21a62ce"}, {"code": "(fn r [lst]\n  (apply conj '() lst))", "problem": 23, "user": "4e8338d6535db62dc21a62d3"}, {"code": "(fn myreverse [x] (if (= x '()) '() (concat (myreverse (rest x)) (list (first x)))))", "problem": 23, "user": "4e836a16535db62dc21a62d6"}, {"code": "(fn [x]\n  ((fn [y result]\n    (if (empty? y)\n        result\n        (recur (rest y) (conj result (first y)))))\n    x '()))", "problem": 23, "user": "4e73a9dc535dff18050a9c77"}, {"code": "#(loop [orig % res []] (if (empty? orig) (seq res) (recur (butlast orig) (conj res (last orig)))))", "problem": 23, "user": "4e837808535db62dc21a62d9"}, {"code": "#(loop [coll % result []]\n  (if (> (count coll) 0)\n    (recur (rest coll) (cons (first coll) result))\n    result))", "problem": 23, "user": "4e7e1305535db169f9c79700"}, {"code": "#(reduce (fn [l x] (cons x l)) [] %)", "problem": 23, "user": "4e7df598535db169f9c796f6"}, {"code": "(fn my-reverse[s]\n  (if (nil? s) \n    []\n    (conj (my-reverse (next s)) (first s))))", "problem": 23, "user": "4e842ebb535db62dc21a62df"}, {"code": "#(loop [l % c (seq ())] \n\t\t(if (empty? l) c (recur (rest l) (cons (first l) c))))", "problem": 23, "user": "4e823629535db62dc21a62c3"}, {"code": "(fn mr [l] (if (= l '()) nil (cons (last l) (mr (take (- (count l) 1) l)))))", "problem": 23, "user": "4e84836a535db62dc21a62e1"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4e851955535db62dc21a62e9"}, {"code": "(fn [coll]\r\n  (loop [c coll r '()]\r\n\t   (if (empty? c)\r\n\t       r\r\n\t       (recur (rest c) (conj r (first c))))))", "problem": 23, "user": "4e821ca5535db62dc21a62c2"}, {"code": "reduce conj '()", "problem": 23, "user": "4e662d58535d8ccf87e9fe75"}, {"code": "#(loop [l % n '()] (if (empty? l) n (recur (rest l) (cons (first l) n))))", "problem": 23, "user": "4e83b1af535db62dc21a62dc"}, {"code": "reduce conj '()", "problem": 23, "user": "4e85c175535db62dc21a62ef"}, {"code": "(fn [xs] (reduce #(cons %2 %1) nil (seq xs)))", "problem": 23, "user": "4e8612f8535db62dc21a62f2"}, {"code": "into '()", "problem": 23, "user": "4e860e85535db62dc21a62f1"}, {"code": "(fn [x] (reduce conj () x))", "problem": 23, "user": "4e80d1c8535db62dc21a62b6"}, {"code": "#(into () %)", "problem": 23, "user": "4e84a7dd535db62dc21a62e2"}, {"code": "(partial reduce (fn [ac x] (conj ac x)) '())", "problem": 23, "user": "4e8681b7535dae1a5effa438"}, {"code": "(fn reverse-seq [coll]\n  (loop [x coll, reversed []]\n    (if (nil? (first x))\n      reversed\n      (recur (rest x) (cons (first x) reversed)))))", "problem": 23, "user": "4e75edfe535d7a570dd295c7"}, {"code": "(fn r [c] (if (> (count c) 1) (concat (r (rest c)) [(first c)]) c))", "problem": 23, "user": "4e86a443535dc036d0eaab83"}, {"code": "(fn [col]\n  (loop [col col, acc nil]\n    (if (empty? col)\n      acc\n      (recur (next col) (cons (first col) acc)))))", "problem": 23, "user": "4e86fd2d535dceadca46984d"}, {"code": "#(loop [res '() ll %] (if (empty? ll) res (recur (conj res (first ll)) (rest ll))))", "problem": 23, "user": "4dd35dac535dae65d5c462dc"}, {"code": "into ()", "problem": 23, "user": "4e8510e7535db62dc21a62e7"}, {"code": "(fn rev [x]\n  (if (empty? x)\n    '()\n    (cons (last x) (rev (drop-last x)))))", "problem": 23, "user": "4e84f77c535db62dc21a62e5"}, {"code": "(fn [c] (reduce #(conj %1 %2) '() c))", "problem": 23, "user": "4e77c1db535d324fb2983d72"}, {"code": "into '()", "problem": 23, "user": "4e8742d4535dceadca46984f"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4e8768f6535dceadca469850"}, {"code": "(fn[s] \n    (let [rev (fn[s ns] \n                   (if (empty? s) \n                       ns \n                       (recur (rest s) \n                              (conj ns (first s)))))]\n        (rev s '())))", "problem": 23, "user": "4e889643535d8b9bb0147ca5"}, {"code": "(fn [x]\n  (loop [in x out '()]\n    (if (empty? in) out\n      (recur (rest in) (conj out (first in))))))", "problem": 23, "user": "4e88feef535d8b9bb0147ca8"}, {"code": "(fn x [coll] \n  (if (empty? coll) '()\n    (cons (last coll) (x (butlast coll)))))", "problem": 23, "user": "4dfe65a1535d04ed9115e787"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4dadaa5cc9a9d6ed2f99dc57"}, {"code": "#(into () %)", "problem": 23, "user": "4e894068535d4ef0aa30db97"}, {"code": "reduce conj '()", "problem": 23, "user": "4e89f46c535d3e98b8023288"}, {"code": "#(loop [coll % v ()]\n              (if coll (recur (next coll) (conj v (first coll)))\n                v))", "problem": 23, "user": "4e89e939535d3e98b8023287"}, {"code": "into ()", "problem": 23, "user": "4e89f9e5535d3e98b8023289"}, {"code": "(partial reduce (fn [xs y] (cons y xs)) '())", "problem": 23, "user": "4daf36c2edd6309eace4d175"}, {"code": "reduce (fn [x y] (cons y x)) []", "problem": 23, "user": "4e89de60535d3e98b8023285"}, {"code": "(fn this [l] (if (empty? l) l (concat (this (rest l)) (list(first l)))) )", "problem": 23, "user": "4e89ddf9535d3e98b8023284"}, {"code": "(fn [x] \n  (loop [lst (seq x)\n         r ()]\n    (if lst\n      (recur (next lst) (cons (first lst) r))\n      r)))", "problem": 23, "user": "4e8a170c535d3e98b802328f"}, {"code": "(fn\r\n  [list]\r\n  (loop [li list retli []]\r\n    (if (empty? li)\r\n      retli\r\n      (recur (rest li) (cons (first li) retli)))))", "problem": 23, "user": "4e8a0c82535d3e98b802328d"}, {"code": "#(into () %)", "problem": 23, "user": "4e8a5d1c535d65386fec210a"}, {"code": "#(loop [coll % cl (empty coll)]\n  (if (empty? coll)\n    cl\n    (recur (rest coll) (cons (first coll) cl))))", "problem": 23, "user": "4e814706535db62dc21a62bb"}, {"code": "#(loop [s % r '()]\n   (if (= s '())\n      r\n      (recur (rest s) (conj r (first s)))))", "problem": 23, "user": "4e8ad247535d65386fec2111"}, {"code": "(fn [seqn]\n  (loop [seqn seqn acc '()]\n    (if-let [x (first seqn)]\n      (recur (rest seqn) (conj acc x))\n      (into [] acc))))", "problem": 23, "user": "4e8944b6535d4ef0aa30db98"}, {"code": "(fn [s] (reduce #(conj %1 %2) '() s))", "problem": 23, "user": "4e7263a1535d5021c1a8965f"}, {"code": "reduce conj ()", "problem": 23, "user": "4e8b57c5535d65386fec211a"}, {"code": "#(reduce conj '()  %)", "problem": 23, "user": "4dcfbc44535d5973398f92a7"}, {"code": "reduce conj ()", "problem": 23, "user": "4e83844a535db62dc21a62da"}, {"code": "(fn [lst & rev]\n;  (println lst rev)\n  (if (= () lst)\n      rev \n      (\n        recur (rest lst) (cons (first lst) rev)\n      )\n  )\n)", "problem": 23, "user": "4e8b6f4d535d65386fec211e"}, {"code": "#(loop [s % r '() ]\n  (if (seq s)\n    (recur (rest s) (conj r (first s)))\n    r))", "problem": 23, "user": "4e7ec984535db169f9c7971c"}, {"code": "#(reduce conj nil %)", "problem": 23, "user": "4e8ad1d2535d65386fec2110"}, {"code": "(fn [coll] (reduce (fn [coll x](cons x coll)) '() (seq coll)))", "problem": 23, "user": "4e8aef69535d65386fec2114"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4e8c1d97535d65386fec2127"}, {"code": "(fn [x] ((fn [x acc] (if (empty? x) acc (recur (rest x) (cons (first x) acc)))) x '()))", "problem": 23, "user": "4e8c9f2e535d65386fec212b"}, {"code": "into ()", "problem": 23, "user": "4e8cbc9f535d65386fec212d"}, {"code": "#(loop [r [], s %]\n  (if (= 0 (count s)) r\n      (recur (conj r (last s)) (butlast s))))", "problem": 23, "user": "4e8ce277535d65386fec212f"}, {"code": "reduce conj '()", "problem": 23, "user": "4e8b557c535d65386fec2119"}, {"code": "( fn [x] (  (fn append [x y] ( if (empty? x) y ( append (rest x ) (conj y (first x )  ) ))) x '()  )  )", "problem": 23, "user": "4e8d5edd535d65386fec2134"}, {"code": "reduce conj '()", "problem": 23, "user": "4e8a460e535d65386fec2109"}, {"code": "(fn reversi [x] (vec (reduce conj () x)))", "problem": 23, "user": "4e697e41535d8ccf87e9fe9c"}, {"code": "(fn [x]\n  (loop [x x ret '()]\n    (if (empty? x)\n      ret\n      (recur (rest x) (cons (first x) ret)))))", "problem": 23, "user": "4e89ff3d535d3e98b802328a"}, {"code": "#(reduce (fn [a b] (cons b a)) () %)", "problem": 23, "user": "4e8e8c24535d65386fec2143"}, {"code": "#(into () %)", "problem": 23, "user": "4e8ddf32535d65386fec213c"}, {"code": "(fn [x] (loop [a (vec x) b '() c 0]\n  (if (= c (count a))\n    b\n    (recur a (concat (list (a c)) b) (inc c))\n    )\n  )\n )", "problem": 23, "user": "4e8b73e4535d65386fec2120"}, {"code": "(fn r [l] (if l (conj (r (next l)) (first l)) []))", "problem": 23, "user": "4e8df08f535d65386fec213e"}, {"code": "#((fn [s c] (if (nil? (seq s)) c (recur (rest s) (conj c (first s))))) % (list))", "problem": 23, "user": "4e8f4f64535d65386fec2149"}, {"code": "#(reduce (fn [acc item]\n            (cons item acc))\n          nil %)", "problem": 23, "user": "4e8f5eba535d65386fec214c"}, {"code": "(fn [lst]\n  ((fn [l r]\n    (if\n      (empty? l) r\n      (recur (rest l) (conj r (first l))))) lst '()))", "problem": 23, "user": "4e89559c535d4ef0aa30db9a"}, {"code": "#(into () %)", "problem": 23, "user": "4db13ff51254ad5b4805fa68"}, {"code": "into ()", "problem": 23, "user": "4dfd018c535d04ed9115e77f"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4dc0ff08535d020aff1edf84"}, {"code": "#(reduce conj '() % )", "problem": 23, "user": "4e6f8431535d5021c1a8961e"}, {"code": "reduce (fn [l %] (conj l %)) nil", "problem": 23, "user": "4e8d86d5535d65386fec2136"}, {"code": "(fn [l] (reduce (fn [res elem] (conj res elem)) '() l))", "problem": 23, "user": "4e919b43535dbda64a6f6afb"}, {"code": "reduce (fn [l e] (cons e l)) []", "problem": 23, "user": "4e929dd0535dbda64a6f6b05"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4e7d2448535db169f9c796c8"}, {"code": "reduce (fn [a b] (conj a b)) ()", "problem": 23, "user": "4e8f5dd1535d65386fec214b"}, {"code": "(partial reduce conj '())", "problem": 23, "user": "4e8e0a62535d65386fec213f"}, {"code": "(fn [coll]\n  ((fn ! [coll res]\n    (if (empty? coll)\n      res\n      (! (rest coll) (cons (first coll) res)))) coll '()))", "problem": 23, "user": "4e93600b535dbda64a6f6b0e"}, {"code": "into ()", "problem": 23, "user": "4e8b73f1535d65386fec2121"}, {"code": "reduce conj '()", "problem": 23, "user": "4e7e0bdc535db169f9c796ff"}, {"code": "#(into () %)", "problem": 23, "user": "4e53d441535d8a8b8723a276"}, {"code": "(fn revs [c]\r\n    ((fn [r c] \r\n\t\t  (if (empty? c)\r\n\t\t\t r\r\n\t\t\t (recur (conj r (last c)) (drop-last c) )\r\n\t\t  )\r\n\t   ) [] c\t  \r\n\t)\r\n)", "problem": 23, "user": "4e7650c5535d324fb2983d68"}, {"code": "#(into () %)", "problem": 23, "user": "4e9487fb535dbda64a6f6b14"}, {"code": "(fn [x]\r\n     (loop [ol x nl '()]\r\n       (cond\r\n         (empty? ol) nl\r\n         :else (recur (rest ol) (concat [(first ol)] nl)))))", "problem": 23, "user": "4e920f44535dbda64a6f6afd"}, {"code": "(fn [v]\n  (reduce #(conj %1 %2) () v))", "problem": 23, "user": "4e94a8b5535dbda64a6f6b16"}, {"code": "(fn reduce [lst]\n  (let\n    [reduce-1 (fn [lst rev]\n      (if (nil? lst)\n        rev\n        (recur (next lst) (cons (first lst) rev))))]\n    (reduce-1 lst nil)))", "problem": 23, "user": "4e951f44535dbda64a6f6b30"}, {"code": "(fn [s] (reduce conj () s))", "problem": 23, "user": "4e951f2c535dbda64a6f6b2f"}, {"code": "(partial sort #(compare %2 %1))", "problem": 23, "user": "4e951ce5535dbda64a6f6b2e"}, {"code": "(fn [s]\n  (loop [[s & r] (seq s)\n         t nil]\n    (if s\n      (recur r (conj t s))\n      t)))", "problem": 23, "user": "4dcc024e535d5973398f928f"}, {"code": "(fn [seq]\r\n  ((fn [sq rsq]\r\n    (if (empty? sq)\r\n      rsq \r\n      (recur (rest sq) (cons (first sq) rsq)))) seq []))", "problem": 23, "user": "4e9528ef535dbda64a6f6b32"}, {"code": "(fn [x]\n  (loop [x x out '()]\n    (if (empty? (rest x))\n      (conj out (first x))\n      (recur (rest x) (conj out (first x))))))", "problem": 23, "user": "4e955b95535dbda64a6f6b33"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4e8da0bf535d65386fec2138"}, {"code": "(fn [v] (reduce (fn [s e] (conj s e)) '() v))", "problem": 23, "user": "4e9646f2535dbda64a6f6b40"}, {"code": "(fn [s] (reduce conj () s))", "problem": 23, "user": "4e8de3a2535d65386fec213d"}, {"code": "(partial reduce conj '())", "problem": 23, "user": "4e96557d535dbda64a6f6b43"}, {"code": "(partial reduce conj ())", "problem": 23, "user": "4e9660ec535dbda64a6f6b44"}, {"code": "#(into () %)", "problem": 23, "user": "4e9697bc535dbda64a6f6b48"}, {"code": "(fn\r\n [L]\r\n (loop [alist L cur '() ]\r\n  (if (empty? alist) cur\r\n   (recur (rest alist) (conj cur (first alist) ) ) ) ) )", "problem": 23, "user": "4e6ff01e535d5021c1a8962b"}, {"code": "(fn [x] (reduce conj '() x))", "problem": 23, "user": "4e8d5911535d65386fec2133"}, {"code": "reduce conj ()", "problem": 23, "user": "4e904d9c535d65386fec2152"}, {"code": "(fn [x] (reduce #(cons %2 %1) '() x))", "problem": 23, "user": "4e976f79535dbda64a6f6b55"}, {"code": "(fn r [h] (if (next h) (conj (r (next h)) (first h)) [(first h)]))", "problem": 23, "user": "4e9609ad535dbda64a6f6b3e"}, {"code": "(fn [x] (map #(nth (seq x) %) (range (dec (count (seq x))) (dec 0) -1)))", "problem": 23, "user": "4e975bce535dbda64a6f6b53"}, {"code": "reduce (fn [a b] (cons b a)) []", "problem": 23, "user": "4e6a5bbe535d8ccf87e9fed1"}, {"code": "into ()", "problem": 23, "user": "4e8f1ac6535d65386fec2146"}, {"code": "#(reduce (fn [x y] (conj x y)) '() %)", "problem": 23, "user": "4e971a86535dbda64a6f6b4f"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "4e98a6d0535dbda64a6f6b5e"}, {"code": "(fn [s]\n  (let [rv (fn [in out]\n              (if (= in ())\n                out\n                (recur (rest in) (conj out (first in)))))]\n  (rv s ())))", "problem": 23, "user": "4e98f9f7535dbda64a6f6b60"}, {"code": "(fn [elements]\n  (loop [lst elements,\n         acc '()]\n    (if (empty? lst)\n        acc\n        (recur (rest lst)\n               (conj acc (first lst))))))", "problem": 23, "user": "4e99108d535dbda64a6f6b62"}, {"code": "reduce conj '()", "problem": 23, "user": "4e994541535dbda64a6f6b64"}, {"code": "reduce conj '()", "problem": 23, "user": "4e959ee3535dbda64a6f6b35"}, {"code": "reduce #(conj % %2) ()", "problem": 23, "user": "4e99a255535dbda64a6f6b67"}, {"code": "(fn [s] (loop [ms s mr '()] (if (= ms '())  mr (recur (rest ms) (conj mr (first ms))))))", "problem": 23, "user": "4e9629c2535dbda64a6f6b3f"}, {"code": "#(let[step (fn [tail lst]\r\n  (if (empty? tail) lst \r\n  (recur (rest tail) (cons (first tail) lst))))]\r\n  (step %1 []))", "problem": 23, "user": "4e99f2e1535dbda64a6f6b6c"}, {"code": "reduce conj ()", "problem": 23, "user": "4e9b230c535dbda64a6f6b75"}, {"code": "#(into () %)", "problem": 23, "user": "4e9b22e2535dbda64a6f6b74"}, {"code": "(fn [s] (reduce conj () s))", "problem": 23, "user": "4e967c4a535dbda64a6f6b47"}, {"code": "(fn [ys]\n    (loop [xs ys, zs ()]\n      (if (empty? xs) zs\n      (recur (rest xs) (conj zs (first xs))))\n    ))", "problem": 23, "user": "4e9c66e2535dbda64a6f6b7f"}, {"code": "into ()", "problem": 23, "user": "4e9cf905535dbda64a6f6b84"}, {"code": "(fn [s]\n  (loop [seq s ret '()]\n    (if (empty? seq)\n      ret\n      (recur (rest seq) (cons (first seq) ret)))))", "problem": 23, "user": "4e9c3648535dbda64a6f6b7d"}, {"code": "#(loop [x % result []] (if (empty? x) result (recur (next x) (cons (first x) result))))", "problem": 23, "user": "4e9c4e02535dbda64a6f6b7e"}, {"code": "(fn rev [r s] \n  (if (= (last s) (first s))\n    (cons (last s) r)\n    (cons (last s) (rev r (butlast s)))))\n'()", "problem": 23, "user": "4e8b98fc535d65386fec2124"}, {"code": "(fn [s]\n  (loop [acc [] sq s]\n    (if (nil? (last sq))\n      acc\n      (recur (conj acc (last sq)) (drop-last sq)))))", "problem": 23, "user": "4e99819a535dbda64a6f6b66"}, {"code": "reduce conj '()", "problem": 23, "user": "4e977eb4535dbda64a6f6b56"}, {"code": "(fn myreverse [l]\n  (if (empty? l)\n    l\n    (cons (last l) (myreverse (butlast l)))))", "problem": 23, "user": "4e9e12b2535dbda64a6f6b92"}, {"code": "#(loop [s '()\n        f (first %)\n        r (rest %)]\n  (if (not (= nil f))\n    (recur (conj s f) (first r) (rest r))\n    s))", "problem": 23, "user": "4ddacd94535d02782fcbe9f6"}, {"code": "#(loop [l '()\n        f (first %)\n        r (rest %)]\n      (if (not (= f nil))\n        (recur (conj l f) (first r) (rest r))\n        l))", "problem": 23, "user": "4e9e7ce3535dbda64a6f6b98"}, {"code": "(fn [s] \n  (map #(% 1) \n    (sort #(> (%1 0) (%2 0)) \n      (map-indexed vector s)))\n)", "problem": 23, "user": "4e9be708535dbda64a6f6b79"}, {"code": "#(loop [ c (count %)\n         f (first %)\n          r (rest %)\n          l '()]\n ( if (not ( = f nil)) \n    (recur (dec c) \n           (first r)\n            (rest r)\n            (cons f l)\n) l )\n)", "problem": 23, "user": "4e9e6bd6535dbda64a6f6b96"}, {"code": "reduce conj '()", "problem": 23, "user": "4e9e0640535dbda64a6f6b91"}, {"code": "#(reduce (fn [x y] (cons y x)) [] %)", "problem": 23, "user": "4e9de526535dbda64a6f6b8e"}, {"code": "(fn [x] (reduce conj '() x))", "problem": 23, "user": "4e9c0552535dbda64a6f6b7b"}, {"code": "(fn rev ([lst] (rev lst '())) ([lst acc] (if (empty? lst) acc (recur (rest lst) (cons (first lst) acc)))))", "problem": 23, "user": "4e9a1512535dbda64a6f6b6e"}, {"code": "(fn f [x]\n  (if (empty? x)\n      []\n      (conj (f (rest x)) (first x))))", "problem": 23, "user": "4e9b2f0b535dbda64a6f6b76"}, {"code": "(fn [x] \n  (loop [lst x revlst '()]\n    (if (empty? lst)\n        revlst\n        (recur (rest lst) (conj revlst (first lst))))))", "problem": 23, "user": "4e9ff8d0535d7eef3080729c"}, {"code": "(fn [coll]\n  (loop [coll coll\n         acc '()]\n    (if (empty? coll)\n      acc\n      (recur (drop 1 coll) (cons (first coll) acc)))))", "problem": 23, "user": "4e9dafe1535dbda64a6f6b89"}, {"code": "(fn rev [seq]\n     (if (= '() seq) \n         '()\n         (concat (rev (rest seq))\n               (list (first seq)))))", "problem": 23, "user": "4ea01955535d7eef3080729f"}, {"code": "apply conj nil", "problem": 23, "user": "4e8516d0535db62dc21a62e8"}, {"code": "(fn f [xs]\n    (if (empty? xs)\n      []\n      (concat (f (rest xs)) [(first xs)])))", "problem": 23, "user": "4e9fd521535d7eef3080729a"}, {"code": "(fn [coll] (reduce (fn [acc n] (conj acc n)) '() coll))", "problem": 23, "user": "4ea09fa4535d7eef308072aa"}, {"code": "(fn [s] (reduce (fn [acc val] (conj acc val)) () s))", "problem": 23, "user": "4ea092f4535d7eef308072a6"}, {"code": "(fn [x] \n  (loop [r ()\n         f x]\n    (if (= (count f) 0)\n      r\n      (recur (cons (first f) r) (rest f)))))", "problem": 23, "user": "4ea0a7c7535d7eef308072ab"}, {"code": "(fn rev [x]\n  (reduce #(cons %2 %1) () x))", "problem": 23, "user": "4ea0c284535d7eef308072ad"}, {"code": "reduce conj ()", "problem": 23, "user": "4e9a8c0e535dbda64a6f6b72"}, {"code": "#(into () %)", "problem": 23, "user": "4e944706535dbda64a6f6b11"}, {"code": "reduce conj ()", "problem": 23, "user": "4dbb0f2d535d1e037afb21b1"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4ea09441535d7eef308072a7"}, {"code": "into ()", "problem": 23, "user": "4daee8e9edd6309eace4d166"}, {"code": "(partial reduce (fn [acc x] (cons x acc)) '())", "problem": 23, "user": "4ea1c349535d7eef308072ba"}, {"code": "reduce conj ()", "problem": 23, "user": "4ea1b9e4535d7eef308072b8"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4ea16981535d7eef308072b2"}, {"code": "(fn [seq]\n  (loop [r '() s seq]\n    (if (empty? s)\n        r\n        (recur (cons (first s) r) (rest s)))))", "problem": 23, "user": "4ea1bc93535d7eef308072b9"}, {"code": "(fn [s]\n  (loop [s s\n         res []]\n    (if-not (seq s)\n      res\n      (recur (rest s) (cons (first s) res)))))", "problem": 23, "user": "4e59b02c535d8a8b8723a2a2"}, {"code": "reduce conj '()", "problem": 23, "user": "4e9d6a65535dbda64a6f6b87"}, {"code": "(fn [coll] (into () coll))", "problem": 23, "user": "4e86d3cf535dceadca46984c"}, {"code": "(fn rev [l] (if (empty? l) [] (conj (rev (rest l)) (first l))))", "problem": 23, "user": "4e9c81e8535dbda64a6f6b80"}, {"code": "reduce (fn [y x] (conj y x)) ()", "problem": 23, "user": "4ea322fe535d7eef308072c2"}, {"code": "(fn [s]\n  (letfn [(reverse* [s rv]\n            (if (nil? (first s))\n              rv\n              (recur (rest s) (cons (first s) rv))))]\n    (reverse* s '())))", "problem": 23, "user": "4e9e4515535dbda64a6f6b95"}, {"code": "reduce #(cons %2 %) []", "problem": 23, "user": "4ea2ddf1535d7eef308072bf"}, {"code": "(fn myReverse [coll]\n  (if (empty? coll) nil\n    (concat (myReverse (rest coll)) [(first coll)])))", "problem": 23, "user": "4ea348ad535d7eef308072c4"}, {"code": "into ()", "problem": 23, "user": "4ea0cfb0535d7eef308072ae"}, {"code": "(fn rev [x] \n  (if (empty? x) \n    x\n    (conj (rev (butlast x)) (last x))\n  )\n)", "problem": 23, "user": "4ea08b30535d7eef308072a5"}, {"code": "(fn foo\n  ([l] (foo l ()))\n  ([l r] (if \n    (empty? l) \n      r \n      (foo (rest l) (conj r (first l))))))", "problem": 23, "user": "4dbecb06535d020aff1edf6a"}, {"code": "(fn myrev [x]\n  (if (= (count x) 1)\n    x\n    (cons (last x) (myrev (butlast x)) )\n))", "problem": 23, "user": "4ea365e2535d7eef308072c5"}, {"code": "(fn rev [s]\n  (loop [in s out '()]\n    (if (empty? in)\n      out\n      (recur (rest in) (conj out (first in))))))", "problem": 23, "user": "4ea4fe1f535d7eef308072cf"}, {"code": "into ()", "problem": 23, "user": "4e65027c535d8ccf87e9fe6e"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4ea41fc2535d7eef308072cb"}, {"code": "#(reduce (fn [xs x] (cons x xs)) [] %)", "problem": 23, "user": "4e949d18535dbda64a6f6b15"}, {"code": "(fn [x] (reduce conj '()  x))", "problem": 23, "user": "4dd1de4d535dae65d5c462d7"}, {"code": "(fn reverse-sequence[list]\n  (into () list))", "problem": 23, "user": "4e9def6b535dbda64a6f6b8f"}, {"code": "reduce conj()", "problem": 23, "user": "4e5af6d7535d8a8b8723a2b2"}, {"code": "(fn [s]\n  (loop [s s r '()]\n    (if (empty? s)\n      r\n      (recur (rest s) (conj r (first s))))))", "problem": 23, "user": "4ea67906535d7eef308072e4"}, {"code": "(fn [x]\n  (loop [output '(), input x]\n    (if (empty? input)\n      output\n      (recur (conj output (first input)) (rest input)))))", "problem": 23, "user": "4ea57300535d7eef308072d5"}, {"code": "reduce #(cons %2 %1) []", "problem": 23, "user": "4ea629da535d7eef308072e2"}, {"code": "reduce #(conj % %2) nil", "problem": 23, "user": "4ea5e794535d7eef308072df"}, {"code": "(fn r[x] \n  (if (empty? x) \n  '() \n  (conj (r (butlast x)) (last x)))\n)", "problem": 23, "user": "4ea1ecfa535d7eef308072bb"}, {"code": "(fn foo [x]\n  (if (seq x)\n    (cons (last x) (foo (drop-last x)))))", "problem": 23, "user": "4e932f38535dbda64a6f6b0c"}, {"code": "(fn recursive-reverse [coll]\n  (if (= 2 (count coll))\n    (vector (nth coll 1) (nth coll 0))\n    (concat (recursive-reverse (rest (vec coll))) [(nth (vec coll) 0)])))", "problem": 23, "user": "4ea7999e535d7eef308072ee"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "4ea87a83535d7eef308072fb"}, {"code": "#(reduce conj nil %)", "problem": 23, "user": "4e58c019535d8a8b8723a297"}, {"code": "#(if (empty? %2) %1 (recur (cons (first %2) %1) (rest %2))) ()", "problem": 23, "user": "4ea97145535d7eef30807304"}, {"code": "(fn [in_s] (loop [ s in_s r []]\n                   (if(empty? s)\n                     r\n                     (recur (rest s) (cons (first s) r)))))", "problem": 23, "user": "4ea85846535d7eef308072f9"}, {"code": "#(into () %)", "problem": 23, "user": "4ea76541535d7eef308072eb"}, {"code": "(fn [lst]\n  (loop [l lst\n         acc '()]\n  (if (empty? (rest l)) (conj acc (first l))\n            (recur (rest l) (conj acc (first l))))))", "problem": 23, "user": "4eaa47bc535d7eef30807309"}, {"code": "(fn [input-coll]\n  (loop [input input-coll\n         output ()]\n    (if (nil? input)\n      output\n      (recur (next input) (conj output (first input))))))", "problem": 23, "user": "4eaa5c51535d7eef3080730a"}, {"code": "(fn [coll]\n    (loop [c coll r nil]\n      (if (nil? (first c))\n        r\n        (recur (rest c) (conj r (first c)))))\n    )", "problem": 23, "user": "4ea03a3a535d7eef308072a0"}, {"code": "(fn [xs](map #(get (apply vector xs) (- (count xs) % 1))\n    (range (count xs))))", "problem": 23, "user": "4eaa96e1535d7eef3080730d"}, {"code": "into ()", "problem": 23, "user": "4e8a0d5d535d3e98b802328e"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4eab1a08535d7eef30807311"}, {"code": "(fn f [x]\n    (if (= x ())\n       x\n       (cons (last x) (f (drop-last x)))))", "problem": 23, "user": "4eab350a535d7eef30807314"}, {"code": "reduce #(cons %2 %1) '()", "problem": 23, "user": "4eab612d535d7eef30807316"}, {"code": "(fn [xs] (apply (partial conj ()) (vec xs)))", "problem": 23, "user": "4e243bcb535d04ed9115e825"}, {"code": "(fn [seq]\n  (let [rev\n    (fn [old, new]\n      (if (= () old)\n        new \n        (recur \n          (rest old)\n          (cons \n            (first old)\n            new))))]\n  (rev seq ())))", "problem": 23, "user": "4e0bb9fb535d04ed9115e7b2"}, {"code": "into ()", "problem": 23, "user": "4ead2841535d7eef3080731e"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4ead6418535d7eef3080731f"}, {"code": "(fn reversi [x]\n  (let [y (seq x)]\n  (loop [cnt (count y) newseq []]\n    (if (= cnt 0)\n      newseq\n      (recur (dec cnt) (conj newseq (nth y (dec cnt))))))))", "problem": 23, "user": "4ea9b80c535d7eef30807306"}, {"code": "(partial reduce (fn [acc c] (conj acc c)) nil)", "problem": 23, "user": "4eae5fe4535d7eef30807325"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4ea53dc2535d7eef308072d1"}, {"code": "(fn r [x] (if (empty? x) [] (cons (last x) (r (butlast x))))\r\n   )", "problem": 23, "user": "4eaa7f8d535d7eef3080730c"}, {"code": "#(into () %)", "problem": 23, "user": "4eaec592535d7eef30807327"}, {"code": "#(loop [x % acc '()]\n    (if (nil? x) acc (recur (next x) (conj acc (first x)))))", "problem": 23, "user": "4eaed3a7535d7eef30807328"}, {"code": "(fn [coll]\n  (loop [loop-coll coll, result '()]\n    (if (empty? loop-coll)\n      result\n      (recur (rest loop-coll) (conj result (first loop-coll))))))", "problem": 23, "user": "4eac5bc1535d7eef3080731b"}, {"code": "into ()", "problem": 23, "user": "4eaede1f535d7eef30807329"}, {"code": "(fn [s] \n  (let [f (fn [s,r]\n    (if (empty? s) r (recur (rest s) (conj r (first s)))))]\n    (f s '())))", "problem": 23, "user": "4eaf08ce535d7eef3080732d"}, {"code": "#(into '() %)", "problem": 23, "user": "4eb01df4535d7eef30807337"}, {"code": "#(reduce conj(take 0%1)%1)", "problem": 23, "user": "4eb07be3535d7eef3080733b"}, {"code": "(fn [lat]\n  (into '() lat))", "problem": 23, "user": "4ea68edb535d7eef308072e6"}, {"code": "(fn [coll] (reduce conj () coll))", "problem": 23, "user": "4eb0afed535d7eef3080733e"}, {"code": "reduce #(conj %1 %2) '()", "problem": 23, "user": "4eb0a757535d7eef3080733d"}, {"code": "#(loop [d % rev '()]\n  (if (empty? d)\n    rev\n    (recur (rest d) (conj rev (first d)))))", "problem": 23, "user": "4eb1dd39535d7eef30807345"}, {"code": "(fn [s]\n  (loop [x s ret '()]\n(if (next x)\n(recur (next x) (conj ret (first x)))\n(conj ret (first x)))))", "problem": 23, "user": "4eb27fad535d7eef3080734a"}, {"code": "(fn my-r [s]\n  (if (first s)\n      (cons (last s) (my-r (drop-last s)))\n      '()))", "problem": 23, "user": "4eb2d0ae535d7eef3080734e"}, {"code": "(partial reduce #(cons %2 %1) '())", "problem": 23, "user": "4eb2e6ca535d7eef3080734f"}, {"code": "(fn \n  [x]\n  (loop [result nil input x]\n    (if (empty? input)\n      result\n      (recur (conj result (first input)) (rest input)))))", "problem": 23, "user": "4ea95e56535d7eef30807302"}, {"code": "(fn [coll]\n  (loop [c coll \n         rev-so-far []]\n    (if (empty? c)\n      rev-so-far \n      (recur (rest c) (cons (first c) rev-so-far)))))", "problem": 23, "user": "4eb25069535d7eef30807348"}, {"code": "into ()", "problem": 23, "user": "4ea0c105535d7eef308072ac"}, {"code": "(fn [x] \n  (loop [coll x newcoll ()]\n    (if (empty? coll)\n      newcoll\n      (recur (next coll) (cons (first coll) newcoll)))))", "problem": 23, "user": "4eb2c45e535d7eef3080734d"}, {"code": "(fn rev [coll] (let [f (fn [col tmp] (if (empty? col) tmp (recur (rest col) (conj tmp (first col)))))] (f coll '())))", "problem": 23, "user": "4eb2eae5535d7eef30807351"}, {"code": "(fn inv [v]\r\n    (loop[i 0 t (count v) resul '()]\r\n        (if (= i t)\r\n        resul\r\n        (recur (inc i) t (cons (first (drop i v)) resul)))        \r\n         ))", "problem": 23, "user": "4e932523535dbda64a6f6b09"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4eb3fcba535d7eef30807359"}, {"code": "into ()", "problem": 23, "user": "4eb41884535d7eef3080735d"}, {"code": "(fn f [xs]\r\n  (if (not (empty? xs))\r\n    (cons (last xs) (f (take (- (count xs) 1) xs)))\r\n    []))", "problem": 23, "user": "4e8dd6cb535d65386fec213b"}, {"code": "#(loop [seq %1 rev '()]\n    (if (empty? seq) rev \n(recur (rest seq) (conj rev (first seq)))))", "problem": 23, "user": "4eabb245535d7eef30807319"}, {"code": "(fn r [s]\n  (if (empty? s)\n    '()\n    (cons (last s) (r (butlast s)))))", "problem": 23, "user": "4eb593e6535d7eef30807368"}, {"code": "reduce conj nil", "problem": 23, "user": "4eb5750a535d7eef30807366"}, {"code": "#(into () %)", "problem": 23, "user": "4eb59464535d7eef30807369"}, {"code": "(fn foo [oldlist]\n  ((fn foo [oldlist newlist]\n    (if (empty? oldlist)\n      newlist\n      (foo (rest oldlist) (cons (first oldlist) newlist))))\n    oldlist (empty oldlist)))", "problem": 23, "user": "4eb66737535d7eef3080736b"}, {"code": "(fn [s]\r\n  (loop [s s, r ()]\r\n    (if (= [] s)\r\n      r\r\n    (recur (rest s) (conj r (first s))))))", "problem": 23, "user": "4eb6d3ab535d7eef30807370"}, {"code": "reduce conj ()", "problem": 23, "user": "4eb5c8d7535d7eef3080736a"}, {"code": "(fn [s] (reduce conj () s))", "problem": 23, "user": "4eb70649535d7eef30807373"}, {"code": "#(into () %)", "problem": 23, "user": "4e85cda3535db62dc21a62f0"}, {"code": "(fn [seq]\n  (letfn [(rev [seq acc]\n            (if (= seq '()) acc (rev (rest seq) (conj acc (first seq)))))]\n    (rev seq nil)))", "problem": 23, "user": "4eb404ba535d7eef3080735a"}, {"code": "(fn [s] (reduce conj () s))", "problem": 23, "user": "4eb80ce6535d7eef3080737d"}, {"code": "(fn [x]\n  (into () x)\n)", "problem": 23, "user": "4ea3f035535d7eef308072ca"}, {"code": "(fn[x] (reduce #(conj %1 %2) '() x))", "problem": 23, "user": "4e982877535dbda64a6f6b5b"}, {"code": "into()", "problem": 23, "user": "4e8e21fc535d65386fec2141"}, {"code": "(fn [x]\n  (into () x ))", "problem": 23, "user": "4e9dd9ab535dbda64a6f6b8d"}, {"code": "#(into () %)", "problem": 23, "user": "4ea55757535d7eef308072d3"}, {"code": "(fn [x] (apply conj '() x))", "problem": 23, "user": "4eb80353535d7eef3080737c"}, {"code": "reduce conj()", "problem": 23, "user": "4e931ebb535dbda64a6f6b08"}, {"code": "#(into () %)", "problem": 23, "user": "4eb81b66535d7eef3080737f"}, {"code": "#(into () %)", "problem": 23, "user": "4eb2f89a535d7eef30807353"}, {"code": "(fn my_reverse [x]\n  (loop [v x y '()]\n    (if (empty? v)\n      y\n      (recur (rest v) (conj y (first v))\n       )\n    )\n  )\n)", "problem": 23, "user": "4e94aa18535dbda64a6f6b1e"}, {"code": "(fn [col]\n  (loop [x [] col col]\n    (if (seq col)\n      (recur (cons (first col) x) (rest col))\n      x)))", "problem": 23, "user": "4eb955da535dfed6da9c6d50"}, {"code": "(fn [coll]\n  (loop [result '() c coll]\n    (if (seq c) (recur (cons (first c) result) (rest c)) result)))", "problem": 23, "user": "4e9519b4535dbda64a6f6b2d"}, {"code": "reduce conj '()", "problem": 23, "user": "4eb97b2e535dfed6da9c6d54"}, {"code": "(fn [x]\n  (into () x)\n)", "problem": 23, "user": "4eb951f5535dfed6da9c6d4f"}, {"code": "into ()", "problem": 23, "user": "4eb97234535dfed6da9c6d53"}, {"code": "#(into () %)", "problem": 23, "user": "4e9dd718535dbda64a6f6b8c"}, {"code": "(fn [x]\n   (into () x) \n)", "problem": 23, "user": "4eb9b1aa535dfed6da9c6d5a"}, {"code": "(fn teste [x]\n  (loop [aux x lista []]\n    (if(empty? aux)\n      lista\n      (recur (take (-(count aux) 1) aux ) (conj lista (last aux)))\n    )\n    )\n)", "problem": 23, "user": "4e94aab8535dbda64a6f6b1f"}, {"code": "#(loop [list %1, res []] (if (seq list) (recur (next list) (cons (first list) res)) res))", "problem": 23, "user": "4eb9ce75535dfed6da9c6d5e"}, {"code": "(fn r [s]\r\n  (if (empty? s)\r\n    '()\r\n    (cons (last s) (r (butlast s)))))", "problem": 23, "user": "4e8b742a535d65386fec2123"}, {"code": "(fn rev [seq] (if (empty? seq) nil (cons (last seq) (rev (butlast seq)))))", "problem": 23, "user": "4eb83593535dd6025b394d1b"}, {"code": "(fn [x]\n  (\n    into () x\n  )\n)", "problem": 23, "user": "4e94accb535dbda64a6f6b20"}, {"code": "(fn[x]\n(  into() x)\n\n)", "problem": 23, "user": "4eb82088535d7eef30807380"}, {"code": "(fn [x] (apply conj '() x))", "problem": 23, "user": "4eba6b5e535dfed6da9c6d64"}, {"code": "(fn inverter[x]\r\n (into () x)\r\n)", "problem": 23, "user": "4eb7ff08535d7eef30807379"}, {"code": "#(into () %)", "problem": 23, "user": "4eb7cb08535d7eef30807378"}, {"code": "(fn[x] (into() x))", "problem": 23, "user": "4e94b4f7535dbda64a6f6b27"}, {"code": "(fn rev\n  ([s] (rev '() s))\n  ([r s] (if (seq s) (rev (cons (first s) r) (rest s)) r )) )", "problem": 23, "user": "4eb80331535d7eef3080737b"}, {"code": "#(into () %)", "problem": 23, "user": "4eb698ad535d7eef3080736d"}, {"code": "(fn [x] (into() x))", "problem": 23, "user": "4eb9cacb535dfed6da9c6d5d"}, {"code": "reduce (fn [s i] (conj s i)) `()", "problem": 23, "user": "4eb9c82d535dfed6da9c6d5c"}, {"code": "reduce conj ()", "problem": 23, "user": "4ebb78a2535dfed6da9c6d70"}, {"code": "(fn reverse-seq [x]\n  (loop [remain x\n         current '()]\n    (let [head (first remain)\n          tail (rest remain)]\n      (if (nil? head) current (recur tail (cons head current))))))", "problem": 23, "user": "4eb7b049535d7eef30807377"}, {"code": "reduce #(conj %1 %2) '()", "problem": 23, "user": "4eb30868535d7eef30807355"}, {"code": "into ()", "problem": 23, "user": "4e6e2ac4535d5021c1a895ff"}, {"code": "reduce #(cons %2 %1) nil", "problem": 23, "user": "4ebc05a2535dfed6da9c6d7a"}, {"code": "(fn reverse2 [coll]\n  (loop \n    [x coll \n     result []]\n       (if (empty? x)\n         result\n         (recur (rest x) (cons  (first x) result)))))", "problem": 23, "user": "4ebbf772535dfed6da9c6d76"}, {"code": "(fn [s]\n  (reduce conj '() s))", "problem": 23, "user": "4ebc08a8535dfed6da9c6d7c"}, {"code": "into ()", "problem": 23, "user": "4dbdc9da535d020aff1edf4c"}, {"code": "(fn [seq] (reduce (fn [a b] (cons b a)) '() seq))", "problem": 23, "user": "4eb504d8535d7eef30807363"}, {"code": "(fn [coll] \n  (loop [acc '()\n         coll coll]\n    (if (seq coll)\n      (recur (conj acc (first coll)) (rest coll))\n      acc)))", "problem": 23, "user": "4ebc92d5535dfed6da9c6d87"}, {"code": "into ()", "problem": 23, "user": "4ebbc1f6535dfed6da9c6d72"}, {"code": "reduce conj '()", "problem": 23, "user": "4ebbffbd535dfed6da9c6d79"}, {"code": "#(loop [res []\n          coll (seq %1)]\n     (if-not (nil? coll)\n       (recur (cons (first coll) res) (seq (rest coll)))\n       res))", "problem": 23, "user": "4ebb20c0535dfed6da9c6d6f"}, {"code": "(fn ! [a] \n  (cond \n    (= [] a) []\n    :else \n      (conj (! (rest a)) (first a))\n  )\n)", "problem": 23, "user": "4ebede00535dfed6da9c6d9a"}, {"code": "#(into () %)", "problem": 23, "user": "4ebeaf0b535dfed6da9c6d98"}, {"code": "(fn [lst]\n  (loop [old-lst lst new-lst '()]\n    (if (empty? old-lst)\n      new-lst\n      (recur (rest old-lst) \n             (cons (first old-lst) new-lst)))))", "problem": 23, "user": "4ebf11bc535dfed6da9c6d9c"}, {"code": "#(\n  (fn dropper [x y]\n   (if (nil? (second x))\n     (conj y (first x))\n     (dropper (rest x) (conj y (first x)))))\n % `())", "problem": 23, "user": "4ebe066a535dfed6da9c6d91"}, {"code": "#(into () %)", "problem": 23, "user": "4ebbc2dd535dfed6da9c6d73"}, {"code": "(fn [l]\n  (loop [l l\n         r []]\n    (if (empty? l)\n        r\n        (recur (rest l) (cons (first l) r)))))", "problem": 23, "user": "4dadb891c9a9d6ed3699dc57"}, {"code": "into ()", "problem": 23, "user": "4ebf45c3535dfed6da9c6d9d"}, {"code": "#(into () %)", "problem": 23, "user": "4e8e5cc8535d65386fec2142"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "4ebe766d535dfed6da9c6d94"}, {"code": "into '()", "problem": 23, "user": "4ec07699535dfed6da9c6da2"}, {"code": "(fn [x] (into '() x))", "problem": 23, "user": "4ebc0717535dfed6da9c6d7b"}, {"code": "(partial\n  (fn [result coll]\n    (if (seq coll)\n      (recur \n        (conj result (first coll))\n        (next coll))\n      result)) (list))", "problem": 23, "user": "4ec12577535dfed6da9c6da8"}, {"code": "#(into '() %)", "problem": 23, "user": "4eb44d78535d7eef30807360"}, {"code": "(fn [x]\n  (reduce \n    (fn [old-item new-item] (cons new-item old-item)) \n    (list (first x)) \n    (rest x)))", "problem": 23, "user": "4ec12516535dfed6da9c6da7"}, {"code": "reduce #(cons %2 %1) ()", "problem": 23, "user": "4ec132a0535dfed6da9c6da9"}, {"code": "(fn my-rvs[s]\n   ((fn rvs[l r]\n     (if (= l []) r (rvs (rest l) (cons (first l) r)))\n   ) s []))", "problem": 23, "user": "4ec17677535dfed6da9c6dad"}, {"code": "into ()", "problem": 23, "user": "4dbf7a31535d020aff1edf75"}, {"code": "(fn [coll] (reduce conj () coll))", "problem": 23, "user": "4ebd4448535dfed6da9c6d8f"}, {"code": "(fn [seq] \n  (reduce #(cons %2 %1) '() seq))", "problem": 23, "user": "4ec21058535dfed6da9c6dba"}, {"code": "(fn [x] (map #(nth % 1) (sort (map-indexed #(vector (- 0 %) %2) x))))", "problem": 23, "user": "4ec0c7ba535dfed6da9c6da4"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "4ec16c21535dfed6da9c6dac"}, {"code": "(fn [x]\n               (loop [s x res '()]\n                 (if (empty? s)\n                   res\n                   (recur (rest s) (cons (first s) res)))))", "problem": 23, "user": "4ebef65e535dfed6da9c6d9b"}, {"code": "(partial reduce conj ())", "problem": 23, "user": "4ec2f192535dcc7ae8597d4c"}, {"code": "(fn [seq]\n    (loop [s seq\n           acc []]\n      (if (empty? s)\n        acc\n        (recur (rest s) \n               (concat (vector (first s)) acc))))\n    )", "problem": 23, "user": "4ea3c875535d7eef308072c9"}, {"code": "(fn [s]\n    (loop [sp s result []]\n      (if (empty? sp)\n        result\n        (recur (rest sp) (cons (first sp) result)))))", "problem": 23, "user": "4ebc64db535dfed6da9c6d82"}, {"code": "#(reduce (fn [output input-item] (cons input-item output)) '() %)", "problem": 23, "user": "4ec2fe3f535dcc7ae8597d4f"}, {"code": "(fn myreverse [coll]\n  (loop [reversed '() col coll]\n    (if (= col '())\n      reversed\n      (recur (conj reversed (first col)) (rest col))\n    )\n  )\n)", "problem": 23, "user": "4ec2f210535dcc7ae8597d4e"}, {"code": "reduce #(conj %1 %2) ()", "problem": 23, "user": "4ec2f1d9535dcc7ae8597d4d"}, {"code": "#(apply (partial conj ()) %)", "problem": 23, "user": "4ec347af535dcc7ae8597d53"}, {"code": "(fn [coll]\n  (reduce conj '() coll))", "problem": 23, "user": "4ec34578535dcc7ae8597d51"}, {"code": "(fn ! [ln]\n  (if (= (count ln) 1)\n      ln\n      (cons (last ln) (! (butlast ln)))))", "problem": 23, "user": "4eb04346535d7eef3080733a"}, {"code": "(fn [seq1]\n  (loop [oSeq seq1 rSeq []]\n    (if (= oSeq []) \n      rSeq\n      (recur (rest oSeq) (cons (first oSeq) rSeq)))))", "problem": 23, "user": "4ec3f4a7535dcc7ae8597d5e"}, {"code": "(fn [seq]\n  (loop [s []\n         r seq]\n    (if (empty? r)\n      s\n      (recur (conj s (last r)) (butlast r)))))", "problem": 23, "user": "4ec46e77535dcc7ae8597d62"}, {"code": "reduce (fn [x v] (conj x v)) ()", "problem": 23, "user": "4ec42c11535dcc7ae8597d5f"}, {"code": "(fn rev [coll]\n  (if (empty? coll) []                                                         \n    (conj (rev (rest coll)) (first coll))))", "problem": 23, "user": "4ec46a2d535dcc7ae8597d61"}, {"code": "into '()", "problem": 23, "user": "4ec363e7535dcc7ae8597d55"}, {"code": "(partial reduce conj '())", "problem": 23, "user": "4ec4ac86535dcc7ae8597d64"}, {"code": "(fn [coll]\n  (reduce (fn [coll val] (conj coll val)) '() coll))", "problem": 23, "user": "4eb51942535d7eef30807365"}, {"code": "(fn dostuff [x] (if (empty? x) () (concat [(last x)] (dostuff (butlast x)))))", "problem": 23, "user": "4ea84ff8535d7eef308072f7"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "4ec5615a535d6d7199dd369b"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "4ec58969535d6d7199dd36a5"}, {"code": "(fn [sq]\n  (loop [s sq acc (list)]\n    (if (empty? s)\n      acc\n      (recur (rest s) (conj acc (first s))))))", "problem": 23, "user": "4ec59ce4535d6d7199dd36ab"}, {"code": "into ()", "problem": 23, "user": "4ec49231535dcc7ae8597d63"}, {"code": "#(loop [lst %, out '()]\n    (if (empty? lst)\n      out\n      (recur (rest lst) (conj out (first lst))) ))", "problem": 23, "user": "4ec5c81f535d6d7199dd36b6"}, {"code": "(fn [col] \n  (loop [tmpcol col newcol  []]\n    (if (empty? tmpcol)\n        newcol\n        (recur  (butlast tmpcol) (conj  newcol (last tmpcol))))))", "problem": 23, "user": "4ec5bec6535d6d7199dd36b3"}, {"code": "(fn rev [l]\n  (if (not (empty? l))\n    (conj (rev (butlast l)) (last l))))", "problem": 23, "user": "4ec5d40d535d6d7199dd36b9"}, {"code": "(partial reduce\n        #(concat [%2] %1) [])", "problem": 23, "user": "4ec6157b535d6d7199dd36c2"}, {"code": "#(loop [n_coll [] old %]\r\n        (if (first old)\r\n          (recur (cons (first old) n_coll) (rest old))\r\n           n_coll))", "problem": 23, "user": "4eb171d7535d7eef30807340"}, {"code": "into '()", "problem": 23, "user": "4ec63613535d6d7199dd36c6"}, {"code": "#(reduce (fn [coll x] (cons x coll)) [] %)", "problem": 23, "user": "4ec6297b535d6d7199dd36c4"}, {"code": "(fn\n  [l]\n  (let\n    [iterate\n      (fn\n        [lst accum]\n        (if\n          (empty? lst)\n          accum\n          (recur (rest lst) (conj accum (first lst)))\n        )\n      )\n    ]\n    (iterate l '())\n  )\n)", "problem": 23, "user": "4ec1b090535dfed6da9c6db5"}, {"code": "(fn [coll]\n  ;; go through the collection\n  ;; poping the first each time\n  ;; and building a new list\n  (loop [lloc coll nrev '()]\n    (if (empty? lloc)\n      nrev\n      (recur (rest lloc) (conj nrev (first lloc))))))", "problem": 23, "user": "4ec65a6e535d6d7199dd36cb"}, {"code": "(fn rev [x]\n  (if (= (count x) 0)\n    '()\n    (concat (list (last x)) (rev (butlast x)))))", "problem": 23, "user": "4ec56b5b535d6d7199dd369f"}, {"code": "into '()", "problem": 23, "user": "4ea4e98a535d7eef308072ce"}, {"code": "into '()", "problem": 23, "user": "4ec65213535d6d7199dd36c8"}, {"code": "#(loop [in % out ()]\r\n  (if (empty? in)\r\n    out\r\n    (recur (rest in) (cons (first in) out))))", "problem": 23, "user": "4ec5fb83535d6d7199dd36bd"}, {"code": "#((fn [x y]\n       (if (empty? x)\n         y\n         (recur (drop-last x) (concat y (list (last x)))))) % '())", "problem": 23, "user": "4ec6688d535d6d7199dd36cc"}, {"code": "(fn [x] (reduce conj () x))", "problem": 23, "user": "4eae2f9e535d7eef30807324"}, {"code": "(fn [lst] (loop [orig lst cur '()] (if (empty? orig) cur (recur (rest orig) (conj cur (first orig))))))", "problem": 23, "user": "4ec6c878535d6d7199dd36d5"}, {"code": "(fn rev [x]\n  (loop [coll x acc []]\n    (if (empty? coll)\n      acc\n      (recur (rest coll) (cons (first coll) acc )))))", "problem": 23, "user": "4e7ddcc2535db169f9c796f0"}, {"code": "#(loop [coll % rev-coll []] \n  (if (empty? coll) \n      rev-coll \n      (recur (rest coll) (cons (first coll) rev-coll))))", "problem": 23, "user": "4ec6f4ee535d6d7199dd36dc"}, {"code": "(fn [coll] (reduce conj nil coll))", "problem": 23, "user": "4e0d5a5a535d04ed9115e7b5"}, {"code": "#(reduce conj nil %)", "problem": 23, "user": "4ec75829535d6d7199dd36e1"}, {"code": "#(into () %)", "problem": 23, "user": "4ec670bc535d6d7199dd36cf"}, {"code": "#(into () %)", "problem": 23, "user": "4ec5754b535d6d7199dd36a2"}, {"code": "(fn [x] (map-indexed (fn [idx itm] (nth (seq x)(- (count x) (+ 1 idx)))) x))", "problem": 23, "user": "4ec6cc0e535d6d7199dd36d6"}, {"code": "into ()", "problem": 23, "user": "4ec7def0535d6d7199dd36e9"}, {"code": "(fn [s] (reduce conj '() s))", "problem": 23, "user": "4ec812d9535d6d7199dd36f0"}, {"code": "(fn reverse-seq [seeq]\n  (reduce conj () seeq))", "problem": 23, "user": "4ec72817535d6d7199dd36de"}, {"code": "into ()", "problem": 23, "user": "4ec78bde535d6d7199dd36e2"}, {"code": "into ()", "problem": 23, "user": "4ec70f26535d6d7199dd36dd"}, {"code": "(fn [col] (reduce conj nil col))", "problem": 23, "user": "4ec79f99535d6d7199dd36e4"}, {"code": "(fn\n  [s]\n    (loop\n      [\n        result []\n        s s]\n      (if (empty? s)\n        result\n        (recur (conj result (last s)) (butlast s)))))", "problem": 23, "user": "4e6f578c535d5021c1a8961b"}, {"code": "reduce #(conj % %2)'()", "problem": 23, "user": "4ec6cd4f535d6d7199dd36d7"}, {"code": "reduce conj ()", "problem": 23, "user": "4ec3c4a0535dcc7ae8597d5a"}, {"code": "reduce #(cons %2 %) []", "problem": 23, "user": "4ec74de3535d6d7199dd36df"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4ec28d86535dfed6da9c6dbc"}, {"code": "(fn [x] \n  (loop [y x r []] \n    (if (first y) \n      (recur (rest y) (cons (first y) r))\n      r)\n   )\n)", "problem": 23, "user": "4ec8736f535d6d7199dd36f3"}, {"code": "#(reduce (fn [a i] (cons i a)) [] %)", "problem": 23, "user": "4ecab3b7535d6d7199dd3709"}, {"code": "(fn [x]\n  (loop [lista x\n         odwrocona '()]\n    (if (not (first lista))\n      odwrocona\n      (recur (rest lista) (cons (first lista) odwrocona)))))", "problem": 23, "user": "4ecabce3535d6d7199dd370a"}, {"code": "#(into () %)", "problem": 23, "user": "4eca7a87535d6d7199dd3705"}, {"code": "(fn myreverse [l]\n  ((fn rhelp [l rev]\n    (if (= l '())\n      rev\n      (rhelp (rest l) (cons (first l) rev))))\n    l\n    '()))", "problem": 23, "user": "4ecaf637535d6d7199dd370c"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4ecb1641535d6d7199dd370e"}, {"code": "(fn rev [l]\n   (if (< (count l) 2)\n     l\n     (cons (last l) (rev (butlast l)))))", "problem": 23, "user": "4ecaaa25535d6d7199dd3708"}, {"code": "into ()", "problem": 23, "user": "4ebd33e4535dfed6da9c6d8e"}, {"code": "into ()", "problem": 23, "user": "4ec51590535d6d7199dd3683"}, {"code": "(fn bob \n  ([s] (bob s ()))\n  ([s rs] (if (= s ())\n            rs\n            (recur (rest s)\n                   (conj rs (first s))))))", "problem": 23, "user": "4ecac3ab535d6d7199dd370b"}, {"code": "(fn r ([s] (r s ())) ([s v] (if (empty? s) v (r (next s) (conj v (first s))) )))", "problem": 23, "user": "4ecbb249535df97575fdabdf"}, {"code": "#(reduce conj nil %)", "problem": 23, "user": "4ec6559a535d6d7199dd36c9"}, {"code": "(fn myreverse [coll]\n  (loop [collection coll result []]\n    (if (empty? collection)\n      result\n      (recur (rest collection) (cons (first collection) result)))))", "problem": 23, "user": "4ec55ab5535d6d7199dd3697"}, {"code": "(fn [coll]\n  (loop [s coll acc '()]\n    (if (empty? s) acc\n      (recur (rest s) (conj acc (first s))))))", "problem": 23, "user": "4e25176e535d04ed9115e829"}, {"code": "#(reduce conj '() %1)", "problem": 23, "user": "4ecc147b535d23f0362276f7"}, {"code": "reduce conj ()", "problem": 23, "user": "4ec6357a535d6d7199dd36c5"}, {"code": "(fn asdf [coll]\n  (reduce #(conj %1 %2) '() coll))", "problem": 23, "user": "4ecc4079535d23f0362276fa"}, {"code": "(fn [s]\n  (reduce conj '() s))", "problem": 23, "user": "4ec5a6ee535d6d7199dd36ae"}, {"code": "(fn x-reverse [lst]\r\n  (if (= 1 (count lst))\r\n    [(first lst)]\r\n    (conj (x-reverse (rest lst)) (first lst))))", "problem": 23, "user": "4eccb190535d23f0362276fe"}, {"code": "#(into () %)", "problem": 23, "user": "4ec3b393535dcc7ae8597d59"}, {"code": "(partial reduce conj ())", "problem": 23, "user": "4e71c2ca535d5021c1a89651"}, {"code": "#(loop [list %1 rlist []] (if (empty? list) rlist (recur (rest list) (cons (first list) rlist))))", "problem": 23, "user": "4eb13d60535d7eef3080733f"}, {"code": "#(into '() %)", "problem": 23, "user": "4ecb03b4535d6d7199dd370d"}, {"code": "(fn rev [coll]\n  (loop [r [], c coll]\n    (if (empty? c)\n      r\n    (recur (cons (first c) r) (rest c)))))", "problem": 23, "user": "4ecbff2f535df97575fdabe4"}, {"code": "(fn [lst]\n  (loop [old-lst lst new-lst ()]\n    (if (seq old-lst)\n      (recur (rest old-lst) (conj new-lst (first old-lst)))\n      new-lst)))", "problem": 23, "user": "4ec601ff535d6d7199dd36be"}, {"code": "(fn rev [src] \r\n  ((fn inner [src dst] (cond (empty? src) dst\r\n                            :else (inner (rest src) (conj dst (first src))))) src '()))", "problem": 23, "user": "4ecaa076535d6d7199dd3706"}, {"code": "reduce conj '()", "problem": 23, "user": "4e5af45e535d8a8b8723a2b1"}, {"code": "(fn [s] (loop [orig s rev '()] (if (seq orig) (recur (rest orig) (conj rev (first orig))) rev)))", "problem": 23, "user": "4ec75077535d6d7199dd36e0"}, {"code": "(fn rev [xs] (if (empty? xs) xs (cons (last xs) (rev (butlast xs)))))", "problem": 23, "user": "4ebcbea5535dfed6da9c6d8b"}, {"code": "(fn [coll] (loop [result [] c coll] \n( if (nil? c) result\n  (recur (conj result (last c) ) (butlast c)))))", "problem": 23, "user": "4eb8ec4a535dfed6da9c6d4b"}, {"code": "into ()", "problem": 23, "user": "4ec5aa1f535d6d7199dd36b0"}, {"code": "(fn rev [coll]\n  (if (empty? (rest coll))\n    (list (first coll))\n    (concat (rev (rest coll)) (list (first coll)))))", "problem": 23, "user": "4ecdb0bb535d23f036227709"}, {"code": "(fn rev [x] (if (= (count x) 1) x (concat(rev (rest x)) (list (first x)))))", "problem": 23, "user": "4ec92a6e535d6d7199dd36fb"}, {"code": "reduce conj ()", "problem": 23, "user": "4ec18451535dfed6da9c6db0"}, {"code": "#(loop [s %, r '()]\n    (if (empty? s)\n      r\n      (recur (rest s) (conj r (first s)))))", "problem": 23, "user": "4e95f5a5535dbda64a6f6b3b"}, {"code": "(partial reduce conj ())", "problem": 23, "user": "4ece9ca9535d23f03622770f"}, {"code": "into ()", "problem": 23, "user": "4ec3674b535dcc7ae8597d57"}, {"code": "(fn my-reverse [xs] (if (= [] xs) \n  []\n  (conj (my-reverse (rest xs)) (first xs))))", "problem": 23, "user": "4ecf42b4535d1f5ad70dba3c"}, {"code": "(fn [list] \n   (loop [newlist [], ll (vec list)]\n    (if (= (count ll) 0)\n      (seq newlist)\n      (recur (conj newlist (last ll)) (subvec ll 0 (- (count ll) 1))))))", "problem": 23, "user": "4ec5b713535d6d7199dd36b2"}, {"code": "reduce #(conj % %2) '()", "problem": 23, "user": "4ecd912e535d23f036227706"}, {"code": "#(loop [col '() old %]\n  (if (seq old)\n    (recur (conj col (first old)) (rest old))\n    col))", "problem": 23, "user": "4ecfb458535d44c135fd68bb"}, {"code": "reduce (fn [s x] (cons x s)) '()", "problem": 23, "user": "4ecfb4f3535d44c135fd68bc"}, {"code": "reduce #(cons %2 %1) []", "problem": 23, "user": "4ed00953535d44c135fd68c2"}, {"code": "reduce #(cons %2 %1) '()", "problem": 23, "user": "4ed06ea6535d44c135fd68c4"}, {"code": "#(letfn [(reversse [lst] (\n          if (empty? lst) lst\n                          (conj (reversse (butlast lst))\n                                (last lst)\n                          )\n        )\n      )\n      ]\n      (reversse %)\n)", "problem": 23, "user": "4ecfa05c535d44c135fd68b9"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4ecff781535d44c135fd68c1"}, {"code": "reduce conj ()", "problem": 23, "user": "4e6ac593535d8ccf87e9ff02"}, {"code": "(fn [c] (for [i (range (dec (count c)) -1 -1)] (nth (seq c) i)))", "problem": 23, "user": "4ecf1f51535d1f5ad70dba3a"}, {"code": "(fn rev [s]\n  (if (seq s)\n    (concat (rev (rest s)) (list (first s)))\n    s))", "problem": 23, "user": "4ed15f60535d44c135fd68cd"}, {"code": "reduce conj ()", "problem": 23, "user": "4ebc829e535dfed6da9c6d86"}, {"code": "(fn [s] (into () s))", "problem": 23, "user": "4ed188c8535d44c135fd68cf"}, {"code": "reduce conj '()", "problem": 23, "user": "4ed19f00535d44c135fd68d1"}, {"code": "(fn [x]\n  (loop [xrem x, result ()]\n    (if (empty? xrem)\n      result\n      (recur (rest xrem) (cons (first xrem) result)))))", "problem": 23, "user": "4ec5cdb0535d6d7199dd36b8"}, {"code": "(fn [coll]\n  (loop [c coll acc '()] \n    (if (nil? (first c))\n      acc\n      (recur (rest c) (cons (first c) acc)))))", "problem": 23, "user": "4ec60dc4535d6d7199dd36c0"}, {"code": "#(loop [s %, r '()]\n  (if (zero? (count s))\n    r\n    (recur (rest s) (conj r (first s)))))", "problem": 23, "user": "4ed1f84f535d44c135fd68d3"}, {"code": "reduce conj ()", "problem": 23, "user": "4ed0e139535d44c135fd68c7"}, {"code": "into nil", "problem": 23, "user": "4ece7617535d23f03622770c"}, {"code": "(fn rev [s]\n  ((fn [a l] (if (= l '())\na (recur (conj a (first l)) (rest l)))) '() s))", "problem": 23, "user": "4ed2b168535d44c135fd68dd"}, {"code": "into ()", "problem": 23, "user": "4ecc8dea535d23f0362276fd"}, {"code": "(fn [l]\n  (let [l (seq l) c (count l)]\n    (for [i (range 0 c)]\n      (nth l (- (dec c) i)))))", "problem": 23, "user": "4ed292ac535d44c135fd68d9"}, {"code": "#(into () %)", "problem": 23, "user": "4e8a6bb0535d65386fec210b"}, {"code": "(fn [elements] \r\n  (loop [ls elements rev (seq '[])]\r\n    (if (empty? ls)\r\n      rev\r\n      (recur (rest ls) (conj rev (first ls))))))", "problem": 23, "user": "4ec7d614535d6d7199dd36e7"}, {"code": "reduce conj ()", "problem": 23, "user": "4ed30184535d44c135fd68e7"}, {"code": "(fn rev [x]\n  (if (first x)\n    (conj (vec (rev (rest x))) (first x))\n    x))", "problem": 23, "user": "4ed2918f535d44c135fd68d8"}, {"code": "reduce conj '()", "problem": 23, "user": "4ecc1d85535d23f0362276f8"}, {"code": "(fn [seq]\n  (loop [myseq seq\n         myrev ()]\n    (if (empty? myseq)\n       myrev\n       (recur (next myseq) (conj myrev (first myseq))))))", "problem": 23, "user": "4ed0d65f535d44c135fd68c6"}, {"code": "reduce conj ()", "problem": 23, "user": "4ed4673f535d10e5ff6f52ca"}, {"code": "reduce conj ()", "problem": 23, "user": "4ed45563535d10e5ff6f52c9"}, {"code": "(fn [s]\n    (loop [result '() r s]\n      (if (empty? r)\n        result\n        (recur\n          (conj result (first r))\n          (rest r)))))", "problem": 23, "user": "4e7e8684535db169f9c79717"}, {"code": "(fn [sss] (loop [remains sss result []]\n    (if (empty? remains)\n      result\n      (recur (rest remains) (cons (first remains) result )))))", "problem": 23, "user": "4eb2a89d535d7eef3080734c"}, {"code": "#(loop [s %\n        result ()]\n   (if (empty? s)\n      result\n      (recur (rest s) (cons (first s) result))))", "problem": 23, "user": "4ed3b4a7535d44c135fd68f5"}, {"code": "#(loop \n  [l %, result []] \n    (if (not-empty l) \n      (recur (drop-last l) \n             (conj result (last l)))\n      result))", "problem": 23, "user": "4ed47f1e535d10e5ff6f52cd"}, {"code": "#(loop [xs %, result (empty %)]\n  (if (empty? xs) result (recur (rest xs) (cons (first xs) result)))  \n)", "problem": 23, "user": "4ed500bb535d10e5ff6f52d3"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4e75500f535d7a570dd295c1"}, {"code": "(fn rvs [x]\n  (into () x))", "problem": 23, "user": "4ed4798f535d10e5ff6f52cc"}, {"code": "(fn s [coll](\n  if (empty? coll)\n  coll\n  (concat \n    (s (rest coll)) \n    (conj nil (first coll)))))", "problem": 23, "user": "4ed42c78535d10e5ff6f52c7"}, {"code": "reduce conj ()", "problem": 23, "user": "4eca5391535d6d7199dd3704"}, {"code": "reduce conj '()", "problem": 23, "user": "4eca40cd535d6d7199dd3703"}, {"code": "(fn f [x]\n  (if (= 1 (count x))\n    x\n    (cons (last x) (f (butlast x)))))", "problem": 23, "user": "4ed578d1535d10e5ff6f52d9"}, {"code": "into ()", "problem": 23, "user": "4ed3c783535d44c135fd68f6"}, {"code": "(fn [xs] (reduce conj nil xs))", "problem": 23, "user": "4ed6238d535d10e5ff6f52de"}, {"code": "(fn [l]\n  (vec (reduce conj '() l)))", "problem": 23, "user": "4daf1076edd6309eace4d16f"}, {"code": "(fn my-rev [xs]\n  (cond (= xs []) []\n        :else (conj (my-rev (rest xs)) (first xs))))", "problem": 23, "user": "4dad8d4bc9a9d6ed1799dc57"}, {"code": "#(loop [in % out []]\n  (if (empty? in)\n    out\n    (recur (rest in) (cons (first in) out))))", "problem": 23, "user": "4db85c8e535d1e037afb218f"}, {"code": "(fn [x] (reduce #(cons %2 %1) '() x))", "problem": 23, "user": "4ea11921535d7eef308072af"}, {"code": "into ()", "problem": 23, "user": "4ed69ea4535d10e5ff6f52e3"}, {"code": "(fn[s]\n  (loop [s s r []]\n    (if (empty? s)\n      r\n      (recur (rest s) (cons (first s) r)))))", "problem": 23, "user": "4ec64981535d6d7199dd36c7"}, {"code": "#(into () %)", "problem": 23, "user": "4eb01582535d7eef30807335"}, {"code": "(fn [t] (map #(nth (sequence t) %) (range (- (count t) 1) -1 -1)))", "problem": 23, "user": "4ed72e51535d10e5ff6f52ee"}, {"code": "#(reduce (fn [acc v] (conj acc v)) '() %)", "problem": 23, "user": "4ed7b617535d10e5ff6f52f3"}, {"code": "(fn revvv [x] (cons (last x) (if (not (nil? (butlast x))) (revvv (butlast x)) nil)))", "problem": 23, "user": "4ed6c35e535d10e5ff6f52e8"}, {"code": "reduce (fn [l,e] (cons e l)) '()", "problem": 23, "user": "4ed27f9f535d44c135fd68d5"}, {"code": "(fn r [x] (if (empty? x) [] (conj (r (rest x)) (first x))))", "problem": 23, "user": "4e6a6be7535d8ccf87e9fee1"}, {"code": "into ()", "problem": 23, "user": "4ed6b05c535d10e5ff6f52e5"}, {"code": "(fn [coll]\n  (into () coll))", "problem": 23, "user": "4db6d993535d1e037afb2180"}, {"code": "reduce conj ()", "problem": 23, "user": "4ed6ac40535d10e5ff6f52e4"}, {"code": "(fn rev[sq]\n  ((fn rev-help[in out]\n    (if (not (nil? in))\n      (rev-help (next in) (cons (first in) out))\n      out))\n  sq []))", "problem": 23, "user": "4ed87228535d10e5ff6f52fa"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "4ed6c738535d10e5ff6f52e9"}, {"code": "#(reduce (fn [x y] (conj x y)) '() %)", "problem": 23, "user": "4ed94d69535d10e5ff6f5303"}, {"code": "reduce conj ()", "problem": 23, "user": "4ed97da1535d10e5ff6f5306"}, {"code": "(partial into ())", "problem": 23, "user": "4eda7cc3535d10e5ff6f530e"}, {"code": "(fn foo [x] \r\n   (loop [lst x rlst ()] \r\n     (if (= (rest lst) ())\r\n    (conj rlst (first lst))  (recur (rest lst) (conj rlst (first lst))))))", "problem": 23, "user": "4ec3072a535dcc7ae8597d50"}, {"code": "reduce conj '()", "problem": 23, "user": "4edab806535d10e5ff6f5311"}, {"code": "(fn [s] (reduce conj () s))", "problem": 23, "user": "4ed98b40535d10e5ff6f5307"}, {"code": "(fn [seq]\r\n  (loop [source seq result ()]\r\n    (if (empty? source)\r\n      result\r\n      (recur (rest source) (cons (first source) result)))))", "problem": 23, "user": "4ed8b598535d10e5ff6f52fc"}, {"code": "(fn\r\n  [coll]\r\n\t(reduce conj () coll))", "problem": 23, "user": "4edbae0d535d10e5ff6f531c"}, {"code": "(fn [x]\n  (loop [ lat x ret '()]\n    (if (empty? lat)\n      ret\n      (recur (rest lat)\n        (conj ret (first lat))))))", "problem": 23, "user": "4ea2382f535d7eef308072bc"}, {"code": "(fn rev [x] \n  (if (empty? x)\n      x\n      (cons (last x) (rev (butlast x)))\n  )\n)", "problem": 23, "user": "4edc0c16535d10e5ff6f531f"}, {"code": "reduce conj '()", "problem": 23, "user": "4edca56f535d10e5ff6f5324"}, {"code": "#(loop [s % acc '()]\n  (if (empty? s)\n    acc\n    (recur (rest s) (cons (first s) acc))))", "problem": 23, "user": "4ed7e37a535d10e5ff6f52f4"}, {"code": "reduce #(conj %1 %2) '()", "problem": 23, "user": "4ecbafbf535df97575fdabde"}, {"code": "into ()", "problem": 23, "user": "4edd038c535d10e5ff6f5327"}, {"code": "(fn [xs] \n  (into () xs))", "problem": 23, "user": "4ed6d81a535d10e5ff6f52ea"}, {"code": "(fn rev [o]  \n  (if (empty? o) \n  o \n  (cons (last o) (rev (butlast o)))))", "problem": 23, "user": "4ec3650f535dcc7ae8597d56"}, {"code": "(fn [s] (loop [f s r '()] (if (empty? f) r (recur (rest f) (conj r (first f))))))", "problem": 23, "user": "4ede33a1535d10e5ff6f5331"}, {"code": "reduce (fn [a b] (cons b a)) []", "problem": 23, "user": "4edd4b77535d10e5ff6f5328"}, {"code": "(fn [seq]\n  (loop [seq seq reversed nil]\n    (if (empty? seq)\n      reversed\n      (recur (rest seq) (cons (first seq) reversed)))))", "problem": 23, "user": "4ed55b5d535d10e5ff6f52d8"}, {"code": "reduce conj ()", "problem": 23, "user": "4ede8789535d10e5ff6f5337"}, {"code": "(fn r [l]\n  (letfn [(r-a [l a]\n            (if (empty? l)\n                a\n                (recur (rest l) (cons (first l) a))))]\n    (r-a l '())))", "problem": 23, "user": "4ede8e1d535d10e5ff6f5339"}, {"code": "into ()", "problem": 23, "user": "4edeac6b535d10e5ff6f533a"}, {"code": "(fn [nums]\n  (loop [i (count nums), rlist '(), flist nums]\n    (if (= i 0)\n      rlist\n      (recur (dec i) (conj rlist (first flist)) (next flist)))))", "problem": 23, "user": "4eddc5f4535d10e5ff6f532c"}, {"code": "#(into () %)", "problem": 23, "user": "4ecfe525535d44c135fd68bf"}, {"code": "(fn [x]\r\n     (loop [lista x resultado []]\r\n       (if (empty? lista)\r\n         resultado\r\n         (recur (take (- (count lista) 1) lista) (conj resultado (last lista)))     \r\n       )\r\n    )\r\n)", "problem": 23, "user": "4edf92f0535d10e5ff6f5341"}, {"code": "(fn foo [s] (when (not-empty s) \n  (conj (foo (drop-last s)) (last s))))", "problem": 23, "user": "4edf40d5535d10e5ff6f533f"}, {"code": "(fn [s] (into '() s))", "problem": 23, "user": "4edf5dc6535d10e5ff6f5340"}, {"code": "reduce (fn [out in] (cons in out)) []", "problem": 23, "user": "4edee6a2535d10e5ff6f533e"}, {"code": "reduce conj '()", "problem": 23, "user": "4ed6dbdd535d10e5ff6f52eb"}, {"code": "#(into () %)", "problem": 23, "user": "4e5ba560535d8a8b8723a2b7"}, {"code": "(fn [list] \n  (loop [l list, out nil]\n    (if (empty? l)\n      out\n      (recur (rest l) (cons (first l) out)))))", "problem": 23, "user": "4edd9d79535d10e5ff6f532b"}, {"code": "into ()", "problem": 23, "user": "4eaa66eb535d7eef3080730b"}, {"code": "(fn [s]\n  (loop [newseq '[] oldseq s]\n    (if (empty? oldseq)\n      newseq\n      (recur (conj newseq (last oldseq)) (butlast oldseq)))))", "problem": 23, "user": "4eddcbbf535d10e5ff6f532d"}, {"code": "#(into () %)", "problem": 23, "user": "4e8cf3ef535d65386fec2130"}, {"code": "#(reduce conj `() %)", "problem": 23, "user": "4edfd846535d10e5ff6f5345"}, {"code": "#(into '() %)", "problem": 23, "user": "4ea5b8ae535d7eef308072d8"}, {"code": "#(into () %)", "problem": 23, "user": "4ee1220b535d10e5ff6f5354"}, {"code": "(fn [alist] (loop [result [] l alist] (if (empty? l) result (recur (conj result (last l)) (butlast l)))))", "problem": 23, "user": "4e4c6824535dc968683fc4de"}, {"code": "(fn [s] \n  (loop [t [] u s] \n    (if(empty? u)\n      t\n      (recur (cons (first u) t) (rest u)))))", "problem": 23, "user": "4ebfdfda535dfed6da9c6d9e"}, {"code": "(fn myrev [x] \n  (if (empty? x)  \n    nil \n    (conj (myrev (drop-last x))\n          (last x))))", "problem": 23, "user": "4ee01905535d10e5ff6f534c"}, {"code": "#( loop [a [] b (vec %)] (\n  if (empty? b)\n    a\n    (recur (conj a (last b)) (pop b))))", "problem": 23, "user": "4ed845a8535d10e5ff6f52f8"}, {"code": "(fn stl[s]\r\n(if (empty? s)\r\n    nil\r\n    (concat (stl(rest s)) (seq [(first s)]))  \r\n)\r\n)", "problem": 23, "user": "4ee17ecc535d10e5ff6f535a"}, {"code": "(\n  fn [x]\n    (into () x)\n)", "problem": 23, "user": "4ee18201535d10e5ff6f535b"}, {"code": "(fn rev [x]\n (if (empty? x) '() (cons (last x) (rev (butlast x))))\n)", "problem": 23, "user": "4ec79cac535d6d7199dd36e3"}, {"code": "(fn rec [x] (if (> (count x) 0) (concat (rec (rest x)) (take 1 x))))", "problem": 23, "user": "4ee153f0535d10e5ff6f5357"}, {"code": "(fn [coll] \n  (if (set? coll) \n      (map-indexed \n        (fn [index, item] \n          (nth (seq coll) (- (dec (count coll)) index))) coll) \n      (map-indexed \n        (fn [index, item] \n          (nth coll (- (dec (count coll)) index))) coll)\n))", "problem": 23, "user": "4edb1774535d10e5ff6f5315"}, {"code": "(fn rev ([x] (rev x '()))\n  ([x acc]\n    (let [tmp (rest x)]\n      (if (= tmp '())\n        (conj acc (first x))\n      (recur tmp (conj acc (first x)))))))", "problem": 23, "user": "4edfb618535d10e5ff6f5343"}, {"code": "(fn [vec]\n  (loop [vec vec, out []]\n    (if (seq vec)\n      (recur (next vec) (cons (first vec) out))\n      out)))", "problem": 23, "user": "4ed19e90535d44c135fd68d0"}, {"code": "#(into () %)", "problem": 23, "user": "4ee2da14535d10e5ff6f536c"}, {"code": "(fn [x] (loop [l x res []] (if (empty? l) res (recur (rest l) (cons (first l) res)))))", "problem": 23, "user": "4ee251e9535d10e5ff6f5365"}, {"code": "#(loop [i [] f %] (if (seq f) (recur (conj i (last f)) (butlast f)) i))", "problem": 23, "user": "4df21dd0535d08e6dec9fe24"}, {"code": "(fn [coll]\n  (reduce #(cons %2 %) () (seq coll)))", "problem": 23, "user": "4ed9fe5f535d10e5ff6f5308"}, {"code": "(fn [coll] \n  (reduce (fn [val, item] \n    (cons item val)) [] coll))", "problem": 23, "user": "4ee26926535d10e5ff6f5367"}, {"code": "#(into () %)", "problem": 23, "user": "4ede716e535d10e5ff6f5336"}, {"code": "into '()", "problem": 23, "user": "4ed90014535d10e5ff6f52fe"}, {"code": "#(reduce conj nil %)", "problem": 23, "user": "4ee3b586535d10e5ff6f5371"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4ee3c9c5535d10e5ff6f5372"}, {"code": "(fn rev [coll]\r\n  (if (seq coll)\r\n    (conj (rev (rest coll)) (first coll))\r\n    []))", "problem": 23, "user": "4ee40938535d10e5ff6f5375"}, {"code": "reduce conj ()", "problem": 23, "user": "4ec9d95b535d6d7199dd3701"}, {"code": "#((fn [start result]\r\n    (cond\r\n     (empty? start) result\r\n     :else (recur (rest start) (cons (first start) result))))\r\n  % nil)", "problem": 23, "user": "4ed2a92b535d44c135fd68dc"}, {"code": "reduce #(cons %2 %1) []", "problem": 23, "user": "4eda77c0535d10e5ff6f530d"}, {"code": "into ()", "problem": 23, "user": "4ee129d2535d10e5ff6f5355"}, {"code": "#(loop [seq % rev []]\n  (if (empty? seq)\n    rev\n  (recur (rest seq) (cons (first seq) rev))))", "problem": 23, "user": "4ee446b1535d10e5ff6f5376"}, {"code": "(fn revseq [x]\n  (if\n    (= 0 (count x))\n    []\n    (conj (revseq(rest x)) (first x))\n))", "problem": 23, "user": "4ee259a1535d10e5ff6f5366"}, {"code": "into ()", "problem": 23, "user": "4ee52c44535d1385b2869d88"}, {"code": "(fn [v]\n  (loop [coll v, res nil]\n    (println v, coll, res)\n    (if (empty? coll)\n      res \n      (recur (rest coll) (cons (first coll) res)))))", "problem": 23, "user": "4edb6822535d10e5ff6f531b"}, {"code": "(fn [s]\n  (reduce conj () s))", "problem": 23, "user": "4ee4f4a9535d1385b2869d85"}, {"code": "(fn [xs]\n  (loop [xi xs\n         acc ()]\n    (if (seq xi)\n      (recur (rest xi) (conj acc (first xi)))\n      acc)))", "problem": 23, "user": "4ee63d8d535d93acb0a66859"}, {"code": "#(loop [before %, after '()]\n  (if (seq before)\n      (recur (rest before) (cons (first before) after))\n      after))", "problem": 23, "user": "4ee673cf535d93acb0a66860"}, {"code": "(fn [xs]\n  (loop [rev-xs []\n         rem-xs xs]\n    (if (empty? rem-xs)\n        rev-xs\n        (recur (cons (first rem-xs) rev-xs) (rest rem-xs)))))", "problem": 23, "user": "4ee75ec2535d93acb0a66867"}, {"code": "(fn myrev [alist]\r\n  (if (= alist nil)\r\n    nil\r\n    (cons (last alist) (myrev (butlast alist)))))", "problem": 23, "user": "4ee6ca15535d93acb0a66862"}, {"code": "#(loop [to [] from %] (if (empty? from) \n  to \n  (recur (conj to (last from)) (butlast from))))", "problem": 23, "user": "4ee7ef87535d93acb0a66872"}, {"code": "reduce #(conj %1 %2) '()", "problem": 23, "user": "4ee7d177535d93acb0a6686f"}, {"code": "#(reduce (fn [l n] (conj l n)) '() %)", "problem": 23, "user": "4ee82223535d93acb0a66877"}, {"code": "#(reduce (fn [a x] (cons x a)) [] %)", "problem": 23, "user": "4ee82ce9535d93acb0a6687a"}, {"code": "(fn [s]\n  (loop [s s rev '()]\n    (if (empty? s)\n       rev\n       (recur (rest s) (conj rev (first s))))))", "problem": 23, "user": "4ee88269535d93acb0a6687f"}, {"code": "(fn rev [coll] \n  (if (nil? coll) \n    coll \n    (conj (rev (butlast coll)) (last coll))))", "problem": 23, "user": "4ee8fc37535d93acb0a66888"}, {"code": "(fn f [a l]\n  (if-let [h (first l)]\n    (f (cons h a) (next l))\n    a))\nnil", "problem": 23, "user": "4ee82539535d93acb0a66878"}, {"code": "#(into () %)", "problem": 23, "user": "4ee91d00535d93acb0a6688b"}, {"code": "#(loop [acc ()\n        x   %]\n  (if (empty? x)\n      (seq acc)\n      (recur (conj acc (first x)) (rest x))))", "problem": 23, "user": "4ee7fe83535d93acb0a66874"}, {"code": "(fn foo\n  ([coll] (foo coll '() (vector? coll)))\n  ([coll currev shouldcasttovector]\n    (if (= 0 (count coll))\n      (if shouldcasttovector\n        (vec currev)\n        currev)\n      (recur (rest coll) (cons (first coll) currev) shouldcasttovector))))", "problem": 23, "user": "4ee95013535d93acb0a6688d"}, {"code": "(fn [c] \r\n (let [coll (vec c)]\r\n  (loop [ret* [] index (- (count coll) 1)]\r\n\t\t(if (>= index 0)\r\n\t\t   (recur (conj ret* (coll index)) (dec index))\r\n\t\t\tret*\r\n\t\t)\r\n\t)\r\n )\r\n)", "problem": 23, "user": "4ee9b3a1535d93acb0a66890"}, {"code": "into ()", "problem": 23, "user": "4ee8de0e535d93acb0a66885"}, {"code": "(fn myreverse [lst]\r\n  (loop [l lst, result nil]\r\n    (if (seq l) (recur (rest l) (conj result (first l)))\r\n  result)))", "problem": 23, "user": "4ee9d697535d93acb0a66895"}, {"code": "(fn [s] (reduce #(cons %2 %1) [] s))", "problem": 23, "user": "4ee9ddb8535d93acb0a66896"}, {"code": "(fn rev [lst] \n  (if (empty? (butlast lst))\n    (conj nil (last lst))\n    (conj (rev (butlast lst)) (last lst))\n  )  \n)", "problem": 23, "user": "4ee8092f535d93acb0a66875"}, {"code": "(fn [coll]\n  (reduce (fn [a b] (cons b a)) [] coll))", "problem": 23, "user": "4ee26f01535d10e5ff6f5368"}, {"code": ";an inefficient solution, but without loop.\n(fn rev\n  [col] (if (empty? col) [] (cons (last col) (rev (drop-last col)))))", "problem": 23, "user": "4eeaf88f535d93acb0a668a3"}, {"code": "(fn [coll]\n        (let [result (vector)]\n                (loop [in coll out result]\n                        (if (> (count in) 0)\n                                (recur (butlast in) (conj out (last in)))\n                                out\n                        )\n                )\n        )\n)", "problem": 23, "user": "4eeb2b3c535d93acb0a668a7"}, {"code": "(fn [x] (loop [ret '[] a x]\n  (if (empty? a)\n    ret\n    (recur (cons (first a) ret) (rest a))\n  )\n  ))", "problem": 23, "user": "4eea1a41535d93acb0a66899"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4dadba4dc9a9d6ed3899dc57"}, {"code": "(fn reversa [s]                                                                                                                                      \n  (if (seq s)                                                                                                                                        \n    (concat (reversa (rest s)) (list (first s)))                                                                                                     \n    s))", "problem": 23, "user": "4eea5823535d93acb0a6689d"}, {"code": "(fn [s] ((fn r [s acc] \n  (if (seq s) \n    (r (rest s) (conj acc (first s)))\n    acc)) s '()))", "problem": 23, "user": "4eebc5da535d93acb0a668aa"}, {"code": "#((fn [x y] \n  (if (= (count x) 0)\n    y \n    (recur (rest x) (cons (first x) y))\n  )) % (empty %))", "problem": 23, "user": "4eebfd03535d93acb0a668ab"}, {"code": "reduce #(conj %1 %2) '()", "problem": 23, "user": "4eeae8f0535d93acb0a668a2"}, {"code": "(fn [c] (reduce #(cons %2 %1) [] c))", "problem": 23, "user": "4ee868be535d93acb0a6687d"}, {"code": "(fn [x]\n  (into () x))", "problem": 23, "user": "4eecdb33535d93acb0a668b8"}, {"code": "(fn my-reverse [x]\n  (let [bl-coll (butlast x)]\n    (cond\n      (= nil bl-coll) x\n      :else (cons (last x) (my-reverse bl-coll)))))", "problem": 23, "user": "4eecbc52535d93acb0a668b2"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "4eed7c01535d93acb0a668bd"}, {"code": "#(into () %)", "problem": 23, "user": "4eed26af535d93acb0a668bb"}, {"code": "(fn [x] (map (fn [d] ((apply comp (cons first (repeat d rest))) x))\n  (range (dec (count x)) -1 -1)))", "problem": 23, "user": "4eecdd66535d93acb0a668b9"}, {"code": "(fn rev [lst]\n          ( (fn foo [lst acc]\n              (if (= '() lst) acc\n                 (foo (rest lst) (cons (first lst) acc))))\n             lst '()))", "problem": 23, "user": "4eed6b32535d93acb0a668bc"}, {"code": "(fn [l]\n  (letfn [(my-rev [a b]\n            (if (empty? a)\n                b\n                (recur \n                  (rest a)\n                  (cons (first a) b))))]\n    (my-rev l '())))", "problem": 23, "user": "4eecc3a0535d93acb0a668b3"}, {"code": "(fn [s]\n  (loop [sq s ns []]\n    (if (seq sq)\n       (recur (butlast sq) (conj ns (last sq)))\n        ns)))", "problem": 23, "user": "4ee645f8535d93acb0a6685d"}, {"code": "#(reduce (fn [r i] (cons i r))\n           [] %)", "problem": 23, "user": "4ee88bfb535d93acb0a66881"}, {"code": "(fn revseq [sequence]\r\n    (when-not (empty? sequence)\r\n        (concat\r\n            (revseq (rest sequence))\r\n            [(first sequence)])))", "problem": 23, "user": "4e9a3a03535dbda64a6f6b70"}, {"code": "(fn rev[rs] \n  (if (= rs [])\n    []\n    (conj (rev (rest rs)) (first rs))\n  )\n)", "problem": 23, "user": "4eef0828535d305ff5cb7f18"}, {"code": "into ()", "problem": 23, "user": "4e7d5eb8535db169f9c796d6"}, {"code": "#(loop [m % n ()]\r\n  (if (not (empty? m))\r\n    (recur (rest m)(conj n (first m)))\r\n    n))", "problem": 23, "user": "4e1fe7f1535d04ed9115e810"}, {"code": "into '()", "problem": 23, "user": "4db85282535d1e037afb218a"}, {"code": "#(reduce (fn [s x] (concat (seq [x]) (if (seq? s) s [s]))) %)", "problem": 23, "user": "4ee74e2a535d93acb0a66866"}, {"code": "(fn my-reverse [l]\n  (if (empty? l)\n    (empty l)\n    (concat [(last l)] (my-reverse (drop-last l)))))", "problem": 23, "user": "4ef0a39b535dced4c769f20c"}, {"code": "(fn [s] \n  (loop [acc '() r s]\n    (if (not (seq r))\n        acc\n        (recur (cons (first r) acc) (rest r)))))", "problem": 23, "user": "4ef0a38e535dced4c769f20b"}, {"code": "#(into () %)", "problem": 23, "user": "4eeff8fc535d305ff5cb7f24"}, {"code": "(fn [coll] (reduce #(cons %2 %1) [] coll))", "problem": 23, "user": "4ef0a39b535dced4c769f20d"}, {"code": "(fn [S] (reduce conj () S ))", "problem": 23, "user": "4eef1164535d305ff5cb7f19"}, {"code": "#(vec (into '() (vec %)))", "problem": 23, "user": "4daea889edd6309eace4d15b"}, {"code": "into ()", "problem": 23, "user": "4ee6400c535d93acb0a6685b"}, {"code": "(fn [s]\n  (loop [x s acc []]\n    (if (seq x)\n      (recur (drop 1 x) (cons (first x) acc))\n      acc)))", "problem": 23, "user": "4ef1ee67535dced4c769f219"}, {"code": "(partial reduce conj nil)", "problem": 23, "user": "4edecdae535d10e5ff6f533c"}, {"code": "into ()", "problem": 23, "user": "4ef2d243535dced4c769f221"}, {"code": "reduce conj ()", "problem": 23, "user": "4eeff8ba535d305ff5cb7f23"}, {"code": "reduce conj ()", "problem": 23, "user": "4ed39399535d44c135fd68f3"}, {"code": "(fn esrever [x]\r\n  (if (empty? (rest x))\r\n    (conj nil (first x))\r\n    (concat (esrever (rest x)) (conj nil (first x)))))", "problem": 23, "user": "4ef0b523535dced4c769f20e"}, {"code": "(fn rvs [s]\n  (if (= (.size s) 1)\n\t    s\n\t    (cons (last s) (rvs (butlast s)))))", "problem": 23, "user": "4ef355e3535dced4c769f228"}, {"code": "into ()", "problem": 23, "user": "4ef2a142535dced4c769f21e"}, {"code": "(fn my-reverse\n  ([sseq] (my-reverse sseq []))\n  ([sseq revseq] \n    (cond\n      (empty? sseq) revseq\n      :else (recur (rest sseq) (cons (first sseq) revseq)))))", "problem": 23, "user": "4eee3e6a535d93acb0a668c3"}, {"code": "(fn [cc] (reduce conj nil cc))", "problem": 23, "user": "4ecf571b535d44c135fd68b6"}, {"code": "into ()", "problem": 23, "user": "4ef49c2c535dced4c769f238"}, {"code": "(fn my-reverse [coll]\n  (if (empty? coll)\n    coll\n    (concat (my-reverse (rest coll)) (list (first coll)))))", "problem": 23, "user": "4ef4c1ff535dced4c769f23e"}, {"code": "(fn [xs]\n  (loop [xs xs, ys '()]\n    (if (empty? xs) ys\n      (recur (rest xs) \n             (cons (first xs) ys)))))", "problem": 23, "user": "4ee67d74535d93acb0a66861"}, {"code": "reduce conj nil", "problem": 23, "user": "4ef41f26535dced4c769f230"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4ef4acf8535dced4c769f23c"}, {"code": "into '()", "problem": 23, "user": "4eee5c7f535d93acb0a668c6"}, {"code": "#(loop [s % d []] (if (not-empty s) (recur (rest s) (cons (first s) d)) d))", "problem": 23, "user": "4ef4e5fa535dced4c769f242"}, {"code": "(fn [s]\n  (loop [c s r []]\n    (if (empty? c) r (recur (butlast c) (conj r (last c))))))", "problem": 23, "user": "4ef5c7ce535dced4c769f248"}, {"code": "reduce conj ()", "problem": 23, "user": "4ef5c847535dced4c769f249"}, {"code": "(fn f [coll]\n  (if (seq coll)\n    (conj (f (rest coll)) (first coll))\n    []))", "problem": 23, "user": "4ef57a7f535dced4c769f246"}, {"code": "(fn [s]\n  (reduce #(conj %1 %2) '() s))", "problem": 23, "user": "4ef667c4535dced4c769f24c"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4ef43233535dced4c769f233"}, {"code": "(fn [items]\n((fn [cur-items new-items]\n    (if (empty? cur-items)\n      new-items\n      (recur (rest cur-items) (conj new-items (first cur-items)))))\n     items '()))", "problem": 23, "user": "4ee9c8d0535d93acb0a66892"}, {"code": "(fn [x] (if (= (type (first x)) clojure.lang.PersistentVector) (sort-by first > x) (sort > x)))", "problem": 23, "user": "4ed2dd98535d44c135fd68e2"}, {"code": "reduce ( fn [y,z] (conj y z)) '()", "problem": 23, "user": "4daea587edd6309eace4d15a"}, {"code": "into nil", "problem": 23, "user": "4ef0f1a1535dced4c769f212"}, {"code": "(fn [c]\n  (loop [c c acc ()]\n    (if (seq c)\n      (recur (next c) (conj acc (first c)))\n      acc)))", "problem": 23, "user": "4ef77edb535dced4c769f254"}, {"code": "into ()", "problem": 23, "user": "4ef77c82535dced4c769f253"}, {"code": "(fn [s] (loop [rev '() rst s]\n          (if (empty? rst)\n            rev\n            (recur (conj rev (first rst)) (rest rst)))))", "problem": 23, "user": "4ef78c97535dced4c769f256"}, {"code": "(fn [x]\n (loop [l x r '()]\n   (if (empty? l)\n    r\n    (recur (rest l) (conj r (first l)))\n    )\n )\n)", "problem": 23, "user": "4e5cac7c535d8a8b8723a2c3"}, {"code": "(fn a [x]\n  (if (empty? x)\n    []\n      (conj (a (rest x)) (first x))))", "problem": 23, "user": "4ef4e0da535dced4c769f240"}, {"code": "(fn [coll] \n  (loop [coll coll\n         newcoll []]\n           (if (empty? coll) newcoll (recur (rest coll) (cons (first coll) newcoll)))))", "problem": 23, "user": "4dd88803535d2dad7130b5d9"}, {"code": "#(loop [in '() out %] (if (empty? out) in (recur (conj in (first out)) (rest out))))", "problem": 23, "user": "4ec53cef535d6d7199dd3686"}, {"code": "#(apply conj () %)", "problem": 23, "user": "4ec5d62c535d6d7199dd36ba"}, {"code": "(fn [col]\n  (let [myreverse (fn [col rt]\n                     (if (empty? col)\n                         rt\n                         (recur (rest col) \n                           (conj rt (first col)))))]\n   (myreverse col '())))", "problem": 23, "user": "4ef992c8535dced4c769f268"}, {"code": "#(reduce (fn [x y] (conj x y)) nil %)", "problem": 23, "user": "4ef60a02535dced4c769f24b"}, {"code": "into ()", "problem": 23, "user": "4eba93c7535dfed6da9c6d65"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "4ef8d47c535dced4c769f261"}, {"code": "reduce conj ()", "problem": 23, "user": "4efb0ae1535dced4c769f273"}, {"code": "(fn [s] (reduce #(conj %1 %2) '() s))", "problem": 23, "user": "4efb2fd7535dced4c769f274"}, {"code": "reduce conj ()", "problem": 23, "user": "4eecc9ad535d93acb0a668b4"}, {"code": "(fn [s]\n  (reduce #(into %1 (list %2)) '() s))", "problem": 23, "user": "4efb92ce535dced4c769f27a"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4ef89fb0535dced4c769f260"}, {"code": "(fn myreverse [xs]\n  (cond (empty? xs) '()\n        true (cons (last xs) (myreverse (butlast xs)))))", "problem": 23, "user": "4ef6f5ea535dced4c769f250"}, {"code": "(fn [x] ((fn cn [x y] (if (first x) (cn (next x) (cons (first x) y)) y)) x '()))", "problem": 23, "user": "4efc4210535dced4c769f280"}, {"code": "(fn [s]\n  (reduce conj '() s))", "problem": 23, "user": "4ed9354f535d10e5ff6f5301"}, {"code": "reduce #(cons %2 %) []", "problem": 23, "user": "4efb87f7535dced4c769f279"}, {"code": "reduce #(conj %1 %2) '()", "problem": 23, "user": "4efcac3a535de96065cf507e"}, {"code": "#(into '() %)", "problem": 23, "user": "4efcc0ce535de96065cf507f"}, {"code": "(fn [seq]\n  (loop [se seq\n   io '()]\n    (do\n      (if (empty? se)\n\tio\n\t(recur (rest se) (conj io (first se)))))))", "problem": 23, "user": "4ef9b021535dced4c769f269"}, {"code": "(fn foo [seq] (when (> (count seq) 0) (conj (vec (foo (rest seq))) (first seq))))", "problem": 23, "user": "4efd98fa535de96065cf5086"}, {"code": "(fn [s]\n  (loop [values s result '()]\n    (if (empty? values)\n      result\n      (recur (rest values) (conj result (first values))))))", "problem": 23, "user": "4ee3afde535d10e5ff6f5370"}, {"code": "into ()", "problem": 23, "user": "4ef6e689535dced4c769f24f"}, {"code": "(fn rev [seq] (if (empty? seq) [] (conj (rev (rest seq)) (first seq))))", "problem": 23, "user": "4eff81ca535dcb61093f6a2d"}, {"code": "reduce #(cons %2 %1) '()", "problem": 23, "user": "4effb663535dcb61093f6a2e"}, {"code": "(fn newrev [xs]\n  ((fn impl [xs ys]\n    (if (seq xs)\n      (recur (drop-last 1 xs) (conj ys (last xs)))\n      ys\n    )\n  ) xs [])\n)", "problem": 23, "user": "4ea3863b535d7eef308072c7"}, {"code": "#(loop [reversed (list), input %]\r\n\t(if (empty? input)\r\n\t\treversed\r\n\t(recur (conj reversed (first input)) (rest input))\r\n\t))", "problem": 23, "user": "4f00c74f535dcb61093f6a31"}, {"code": "(partial reduce conj (list))", "problem": 23, "user": "4ec5a5f9535d6d7199dd36ad"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4efde788535d3d302ff962fa"}, {"code": "#(reduce (fn [a b] (cons b a)) (take 1 %) (drop 1 %))", "problem": 23, "user": "4f017593535dcb61093f6a36"}, {"code": "(fn [x]\n  (loop [old x, n (empty x)] \n    (if(empty? old) \n      n \n      (recur (rest old) (concat (conj (empty old) (first old)) n))\n    )\n  )\n)", "problem": 23, "user": "4f00f997535dcb61093f6a34"}, {"code": "reduce conj ()", "problem": 23, "user": "4f01c938535dcb61093f6a39"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4ec7c32c535d6d7199dd36e6"}, {"code": "#(let [x %] (loop [r [] t x] (if (empty? t) r (recur (cons (first t) r) (rest t)))))", "problem": 23, "user": "4ee2baa8535d10e5ff6f536b"}, {"code": "#(map (fn [item] (second item)) (sort-by (fn [item] (first item)) > (map-indexed (fn [idx item] [idx item]) %)) )", "problem": 23, "user": "4f01ff83535dcb61093f6a3a"}, {"code": "(fn t [seq]\n  (loop [seq seq result '()]\n    (if (empty? seq)\n        result\n        (recur (rest seq) (conj result (first seq))))))", "problem": 23, "user": "4f017b4e535dcb61093f6a37"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4f031eac535dcb61093f6a67"}, {"code": "(fn rev\n  ([seq] (rev seq '()))\n  ([seq out] (if (= '() seq)\n             out\n             (rev (rest seq) (cons (first seq) out)))))", "problem": 23, "user": "4f031aaa535dcb61093f6a64"}, {"code": "(fn [x & s] (if (empty? x) s (recur (rest x) (conj s (first x)))))", "problem": 23, "user": "4f03193e535dcb61093f6a61"}, {"code": "(fn myrev [x] \n  (if (empty? x)\n    '[]\n    (conj (myrev (rest x)) (first x) )\n  )\n)", "problem": 23, "user": "4f03101e535dcb61093f6a53"}, {"code": "#((fn [l, r]\n  (if (nil? (first l))\n    r\n    (recur (rest l) (cons (first l) r)))) % '())", "problem": 23, "user": "4f031773535dcb61093f6a5c"}, {"code": "(fn f \n  ([list] (f list nil))\n  ([list acc] (if \n    (not-empty list)\n    (f (rest list) (conj acc (first list)))\n    acc)))", "problem": 23, "user": "4f030bb4535dcb61093f6a4a"}, {"code": "#((fn rev [x, acc] \n  (if (.isEmpty x) acc (rev (rest x) (conj acc (first x)))))\n  %\n  ()\n)", "problem": 23, "user": "4f03641a535dcb61093f6a9b"}, {"code": "(fn [coll]\n  (loop [fwd-lst coll\n         rev-lst '()]\n    (if (empty? fwd-lst)\n      rev-lst\n      (recur (rest fwd-lst)\n            (conj rev-lst (first fwd-lst))))))", "problem": 23, "user": "4f035bfd535dcb61093f6a8f"}, {"code": "(fn rev [running x] (if (= '() x) running \r\n  (rev (cons (first x) running) (rest x)))) nil", "problem": 23, "user": "4f0365fc535dcb61093f6aa4"}, {"code": "(partial reduce #(conj % %2) '())", "problem": 23, "user": "4f036d9b535dcb61093f6ac1"}, {"code": "(fn [x] \n  (loop [result () remaining x]\n    (if (= '() remaining)\n      result\n      (recur (conj result (first remaining)) (rest remaining)))))", "problem": 23, "user": "4f036894535dcb61093f6aad"}, {"code": "into '()", "problem": 23, "user": "4f036691535dcb61093f6aa8"}, {"code": "#(loop [seq %1 result []]\n   (if (empty? seq)\n     result\n     (recur (rest seq) (cons (first seq) result))))", "problem": 23, "user": "4f037310535dcb61093f6ad6"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4f0374a0535dcb61093f6ad9"}, {"code": "#(loop [s % n '()]\n  (if (empty? s)\n    n\n    (recur (rest s) (conj n (first s)))))", "problem": 23, "user": "4f036c50535dcb61093f6aba"}, {"code": "(fn rrev [xs] (if (nil? xs) xs (cons (last xs) (rrev (butlast xs)) )))", "problem": 23, "user": "4f0370f4535dcb61093f6acd"}, {"code": "(fn [lst]\n  (loop [i-lst lst o-lst (empty lst)]\n    (if (empty? i-lst)\n      o-lst\n      (recur (rest i-lst) (cons (first i-lst) o-lst)))))", "problem": 23, "user": "4f0379ef535dcb61093f6ae7"}, {"code": "(fn this ([x] (this x '())) ([x r] (if (= x '()) r (recur (rest x) (conj r (first x))))))", "problem": 23, "user": "4f038017535dcb61093f6afa"}, {"code": "(fn f [s]\n  (if (empty? s)\n    []\n    (conj (f (rest s)) (first s))))", "problem": 23, "user": "4f038484535dcb61093f6b07"}, {"code": "(fn flip [xs]\n  (if (empty? xs)\n      []\n      (conj (flip (rest xs)) (first xs))))", "problem": 23, "user": "4f0381db535dcb61093f6b02"}, {"code": "#(reduce (fn [x y] (conj x y)) '() %)", "problem": 23, "user": "4f03822f535dcb61093f6b03"}, {"code": "#(loop [rcol [] col %] \n  (if (empty? col) \nrcol \n(recur (conj rcol (last col)) (drop-last col))))", "problem": 23, "user": "4f038bcd535dcb61093f6b1d"}, {"code": "(fn  [coll] (reduce conj () coll))", "problem": 23, "user": "4f031883535dcb61093f6a5e"}, {"code": "(fn [col] (reduce (fn [s x] (conj s x))\n                  (seq nil)\n                  col))", "problem": 23, "user": "4f038516535dcb61093f6b0b"}, {"code": "into ()", "problem": 23, "user": "4f0388e8535dcb61093f6b17"}, {"code": "(fn foo [x]\n  (if (empty? x)\n    x\n    (concat (foo (rest x)) (list (first x)))))", "problem": 23, "user": "4f037faf535dcb61093f6af8"}, {"code": "(fn rev [s]\n  (if (empty? s) [] (conj (rev (rest s)) (first s))))", "problem": 23, "user": "4f039cd3535dcb61093f6b3b"}, {"code": "(fn [col]\n  (let [col (seq col)]\n  \n    (loop [i (count col)\n           res []]\n      (if (= i 0) res\n        (recur (dec i) \n         (conj res (nth col (dec i))))))))", "problem": 23, "user": "4f039c67535dcb61093f6b3a"}, {"code": "(fn [coll]\n  (loop [src coll dst []]\n    (if (= (count src) 0) dst\n        (recur (rest src) (cons (first src) dst)))))", "problem": 23, "user": "4f0348b4535dcb61093f6a84"}, {"code": "(fn [x] (reduce (fn [a b] (conj a b)) '() x))", "problem": 23, "user": "4f039f14535dcb61093f6b3e"}, {"code": "(fn rev [seq] \n  (if (= (first seq) nil)\n    nil\n    (cons (last seq) (rev (butlast seq)))\n  )\n)", "problem": 23, "user": "4f039a8b535dcb61093f6b36"}, {"code": "(fn rev [x]\n  ((fn helper [l]\n    (if (seq l) (conj (helper (drop-last l)) (last l)) ))\n    x))", "problem": 23, "user": "4f0399c4535dcb61093f6b34"}, {"code": "(fn [l]\r\n    (loop [mylist l res '()]\r\n      (if (= mylist '())\r\n        res\r\n        (recur (rest mylist) (conj res (first mylist))))))", "problem": 23, "user": "4f039524535dcb61093f6b2c"}, {"code": "(fn r [arg]\n  (when-let [s (seq arg)]\n    (cons (last s) (r (butlast s)))))", "problem": 23, "user": "4ef0eaef535dced4c769f211"}, {"code": "(fn [coll]\n  (into '() coll))", "problem": 23, "user": "4f036c4b535dcb61093f6ab9"}, {"code": "#(into '() %)", "problem": 23, "user": "4f036384535dcb61093f6a9a"}, {"code": "(fn my-reverse [xs]\n  (if (empty? xs)\n    xs\n    (cons (last xs) (my-reverse (butlast xs)))))", "problem": 23, "user": "4f03857e535dcb61093f6b0d"}, {"code": "(fn [seq]\n  (loop [seq seq a '()]\n    (if (empty? seq) a (recur (rest seq) (cons (first seq) a)))))", "problem": 23, "user": "4f03d0fe535dcb61093f6b6d"}, {"code": "(fn my-reverse [coll]\n  (if (empty? coll)\n    []\n    (conj (my-reverse (rest coll)) (first coll))))", "problem": 23, "user": "4f03d4dc535dcb61093f6b6e"}, {"code": "(fn my-rev [sq]\r\n  (if (empty? (rest sq))\r\n    sq\r\n    (cons (last sq) (my-rev (butlast sq)))))", "problem": 23, "user": "4f03cc36535dcb61093f6b69"}, {"code": "(fn [seq]\n  ((fn rev [x, new-seq] \n      (if (empty? x)\n        new-seq\n        (rev (rest x)\n             (cons (first x) new-seq))))\n    seq '()))", "problem": 23, "user": "4f03818e535dcb61093f6b00"}, {"code": "(fn [aseq]\n  (loop [reversed-seq () seq-part aseq]\n    (if (empty? seq-part)\n      reversed-seq\n      (recur (conj reversed-seq (first seq-part))\n              (rest seq-part)))))", "problem": 23, "user": "4ef3f5b0535dced4c769f22f"}, {"code": "(fn reverse* [s]\n  (if (first s)\n      (conj (reverse* (rest s)) (first s))\n      []))", "problem": 23, "user": "4f03edd7535dcb61093f6b80"}, {"code": "(fn ([l] \n  ((fn [l acc] (if (= [] l) \nacc (recur (rest l) (conj acc (first l))))) l (list))))", "problem": 23, "user": "4f03f044535dcb61093f6b83"}, {"code": "(fn [lst]\n  (letfn [(rvrs [lst acc]\n            (if (seq lst)\n              (recur (rest lst) (conj acc (first lst)))\n              acc))]\n    (rvrs lst nil)))", "problem": 23, "user": "4f03afcc535dcb61093f6b4d"}, {"code": "reduce conj()", "problem": 23, "user": "4f03f42b535dcb61093f6b86"}, {"code": "reduce conj '()", "problem": 23, "user": "4f0402ce535dcb61093f6b8f"}, {"code": "(fn [x] (reduce conj (list (first x)) (rest x)))", "problem": 23, "user": "4f04165d535dcb61093f6b9c"}, {"code": "(fn rrr [s] \n  (if (seq s) \n    (concat (rrr (rest s)) (list (first s)))\n    )\n)", "problem": 23, "user": "4f0397ee535dcb61093f6b30"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "4f043ed1535dcb61093f6bb4"}, {"code": "(fn [coll]\n  (\n  (fn [coll acc]\n    (if (seq coll)\n      (recur (next coll) (conj acc (first coll)))\n      acc\n    )\n  )\n  coll\n  nil\n  )\n)", "problem": 23, "user": "4f03154a535dcb61093f6a58"}, {"code": "(fn [x]\n  (loop [a x n []]\n    (if (empty? a)\n      n\n      (recur (rest a) (cons (first a) n)))))", "problem": 23, "user": "4f040bbf535dcb61093f6b95"}, {"code": "(fn [s] (for [idx (range (dec (count s)) -1 -1)] (get (vec s) idx)))", "problem": 23, "user": "4f0376a5535dcb61093f6add"}, {"code": "(fn [l]\n  (loop [ll l rl []]\n    (if (not-empty ll)\n    (recur (rest ll) (cons (first ll) rl)) rl )))", "problem": 23, "user": "4ef5e06d535dced4c769f24a"}, {"code": "(fn reverse-coll [col]\n  (if (= 1 (count col))\n      col\n      (cons (last col) (reverse-coll (butlast col)))))", "problem": 23, "user": "4f036fad535dcb61093f6ac7"}, {"code": "(fn [c] (into () c))", "problem": 23, "user": "4f032977535dcb61093f6a6c"}, {"code": "(fn [seq]\n  (loop [s seq n ()]\n     (if (nil? s)\n         n\n         (recur (next s) (conj n (first s))))))", "problem": 23, "user": "4f0446f9535dcb61093f6bb8"}, {"code": "(fn my-reverse [coll]\n  (loop [result () c coll]\n    (if (empty? c)\n      result\n      (recur (conj result (first c)) (rest c)))))", "problem": 23, "user": "4e95a440535dbda64a6f6b37"}, {"code": "#(loop [listout () listin (seq %)] \n  (if \n    (not (= () listin)) \n    (recur (cons (first listin) listout) (rest listin)) \n    listout\n  )\n)", "problem": 23, "user": "4f0365fd535dcb61093f6aa5"}, {"code": "#(reduce (fn [s e] (conj s e)) '() %)", "problem": 23, "user": "4f047dbf535dcb61093f6bce"}, {"code": "(fn [s]\r\n  (loop [ls s\r\n   out []]\r\n    (if ls\r\n      (recur (next ls) (cons (first ls) out))\r\n      out)))", "problem": 23, "user": "4f044285535dcb61093f6bb5"}, {"code": "into ()", "problem": 23, "user": "4f047542535dcb61093f6bc7"}, {"code": "reduce #(conj %1 %2) '()", "problem": 23, "user": "4e8dc25f535d65386fec213a"}, {"code": "(fn reverse* [x]\n  (if x (cons (last x) (reverse* (butlast x))\n)))", "problem": 23, "user": "4f04a06d535dcb61093f6bd9"}, {"code": "#(for [m (range (- (count %) 1) -1 -1)] ((vec %) m))", "problem": 23, "user": "4e55b3dc535d8a8b8723a27f"}, {"code": "(fn [x]\n  (if (vector? x)\n    (into [] (into () x))\n    (into () x)))", "problem": 23, "user": "4f047902535dcb61093f6bcc"}, {"code": "reduce conj '()", "problem": 23, "user": "4f03a7a4535dcb61093f6b49"}, {"code": "(fn rev [xs]\n  ((fn rev_ [xs acc]\n     (if (empty? xs)\n         acc\n         (rev_ (rest xs) (cons (first xs) acc))))\n    xs '()))", "problem": 23, "user": "4f04d011535dcb61093f6be5"}, {"code": "(fn rev[l] (if (= 1 (count l)) l (conj (rev (butlast l)) (last l))))", "problem": 23, "user": "4f03bd9d535dcb61093f6b5b"}, {"code": "(fn [col] (into () col))", "problem": 23, "user": "4f037a34535dcb61093f6ae9"}, {"code": "apply conj ()", "problem": 23, "user": "4f047c07535dcb61093f6bcd"}, {"code": "(fn f [x]\n  (if (= 0 (count x)) x\n    (concat (f (rest x)) (take 1 x))))", "problem": 23, "user": "4f03e462535dcb61093f6b77"}, {"code": "(fn rev [list]\n  (if (empty? list)\n    []\n    (cons (last list) (rev (drop-last list)))))", "problem": 23, "user": "4f033aa3535dcb61093f6a7c"}, {"code": "#(reduce (fn [so-far e] (conj so-far e)) (list) %)", "problem": 23, "user": "4e15f248535d04ed9115e7e6"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "4f03688d535dcb61093f6aac"}, {"code": "(fn [s]\n  (reduce conj '() s))", "problem": 23, "user": "4f050dec535dcb61093f6bef"}, {"code": "(fn [s]\n  (loop [s s r '()]\n    (if (empty? s)\n        r\n        (recur (rest s) (conj r (first s))))))", "problem": 23, "user": "4f03ebf7535dcb61093f6b7f"}, {"code": "(fn f [x] (if (empty? x) x (conj (f (vec (rest x))) (first x))))", "problem": 23, "user": "4f0514b4535dcb61093f6bf0"}, {"code": "(fn my-rev [s]\n  (\n\t\t(fn [s-in s-out]\n\t\t\t(if(empty? s-in) s-out (recur (rest s-in) (cons (first s-in) s-out)))\n\t\t)\n\ts '())\n)", "problem": 23, "user": "4f044e44535dcb61093f6bb9"}, {"code": "(fn [lst] (reduce conj () lst))", "problem": 23, "user": "4f00e9c7535dcb61093f6a33"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4f045946535dcb61093f6bba"}, {"code": "(fn rev [s] ( if (= (count s) 0 )  '() ( cons (last s) (rev (butlast s ))) ) )", "problem": 23, "user": "4f030775535dcb61093f6a43"}, {"code": "#(apply (partial conj '()) %)", "problem": 23, "user": "4f04664a535dcb61093f6bc1"}, {"code": "#(loop [coll % revd nil]\r\n  (if (empty? coll)\r\n    revd\r\n  (recur (rest coll) (conj revd (first coll) ))))", "problem": 23, "user": "4ee7d113535d93acb0a6686e"}, {"code": "#(loop [l %\n        r '()]\n   (if (nil? l)\n      r\n      (recur (next l) (cons (first l) r))))", "problem": 23, "user": "4f04f847535dcb61093f6beb"}, {"code": "into ()", "problem": 23, "user": "4f041ff9535dcb61093f6ba6"}, {"code": "#((fn [l acc] (if (= l '())\n                acc\n                (recur\n                 (rest l) \n                 (cons (first l) acc))))\n% '())", "problem": 23, "user": "4f039bbe535dcb61093f6b39"}, {"code": "apply conj ()", "problem": 23, "user": "4f04b66b535dcb61093f6bdd"}, {"code": "(fn rev [seq] (if (empty? seq) '() \n(conj (rev (drop-last seq)) (last seq))))", "problem": 23, "user": "4f036d6e535dcb61093f6ac0"}, {"code": "(fn [v] (into '() v))", "problem": 23, "user": "4dbb64c8535d1e037afb21b6"}, {"code": "(fn revers [coll]\n  (if (empty? coll) nil\n    (concat (revers (rest coll)) (list (first coll)))))", "problem": 23, "user": "4f030bd1535dcb61093f6a4b"}, {"code": "into ()", "problem": 23, "user": "4f062d4a535dcb61093f6c08"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "4f0664bd535dcb61093f6c0f"}, {"code": "#(map (fn [n] (first (drop (- (count %) n) %)))\n      (range 1 (+ 1 (count %)))\n)", "problem": 23, "user": "4f067029535dcb61093f6c12"}, {"code": "#(into () %)", "problem": 23, "user": "4f06c6df535dcb61093f6c13"}, {"code": "(fn [x] \n  ((fn [y z] \n    (if (first z) \n      (recur (cons (first z) y) (next z))\n      y\n    )\n  ) '() x)\n)", "problem": 23, "user": "4f06cbae535dcb61093f6c14"}, {"code": "#(reduce (fn [s x] (cons x s)) () %)", "problem": 23, "user": "4f06dcad535dcb61093f6c16"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4f0660ee535dcb61093f6c0d"}, {"code": "(fn r [s] (\n   if (= nil (first s))\n     '()\n     (concat (r (next s)) (conj nil (first s)))\n  )\n)", "problem": 23, "user": "4f06f90a535dcb61093f6c1b"}, {"code": "(fn [x] (reduce conj () x))", "problem": 23, "user": "4f07056c535dcb61093f6c1d"}, {"code": "reduce conj nil", "problem": 23, "user": "4e68cc44535d8ccf87e9fe8d"}, {"code": "reduce conj '()", "problem": 23, "user": "4f070ce6535dcb61093f6c1e"}, {"code": "reduce conj nil", "problem": 23, "user": "4f037bb5535dcb61093f6aec"}, {"code": "(fn [c] (reduce #(cons %2 %1) () c))", "problem": 23, "user": "4f038355535dcb61093f6b04"}, {"code": "(fn rev2 [aseq] (reduce conj () aseq))", "problem": 23, "user": "4f048f67535dcb61093f6bd3"}, {"code": "reduce conj ()", "problem": 23, "user": "4f050377535dcb61093f6bed"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4f031a53535dcb61093f6a63"}, {"code": "(partial reduce conj nil)", "problem": 23, "user": "4f052eaf535dcb61093f6bf3"}, {"code": "(fn reverse-elems [xs]\n  ( if (not-empty xs)\n    (cons (last xs) (reverse-elems (drop-last xs)))\n    nil))", "problem": 23, "user": "4f065217535dcb61093f6c0c"}, {"code": "(fn func [l]\n  (if (second l)\n    (conj (func (butlast l))\n          (last l))\n    l\n  )\n)", "problem": 23, "user": "4f064b1e535dcb61093f6c0b"}, {"code": "(fn [lst]\n    ((fn [l res]\n      (if (= (count l) 0)\n          res\n          (recur (rest l) (cons (first l) res))))\n     lst []))", "problem": 23, "user": "4f07dfa9535dcb61093f6c30"}, {"code": "(fn [xs]\n  (loop [xs xs acc '()]\n    (if (empty? xs)\n      acc\n      (recur (rest xs) (cons (first xs) acc)))))", "problem": 23, "user": "4f038499535dcb61093f6b09"}, {"code": "reduce conj nil", "problem": 23, "user": "4f030af7535dcb61093f6a49"}, {"code": "into ()", "problem": 23, "user": "4f083048535dcb61093f6c33"}, {"code": "(fn [in-seq] \n  (loop [out-seq '() local-seq in-seq] \n    (if (empty? local-seq) out-seq \n      (recur (conj out-seq (first local-seq)) (rest local-seq)))))", "problem": 23, "user": "4ef4ab95535dced4c769f23b"}, {"code": "reduce #(cons %2 %) []", "problem": 23, "user": "4efec33f535dcb61093f6a2a"}, {"code": "(fn rev [lst] (if (empty? lst) [] (concat (rev (rest lst)) [(first lst)])))", "problem": 23, "user": "4f07ad89535dcb61093f6c2a"}, {"code": "#(for [x (range (- (count %) 1) -1 -1)] (get (vec %) x))", "problem": 23, "user": "4f06f1db535dcb61093f6c19"}, {"code": "into ()", "problem": 23, "user": "4f03b3fb535dcb61093f6b52"}, {"code": "#(loop [c nil s %] \n  (if (= s nil) \n    c \n    (recur (conj c (first s)) (next s))))", "problem": 23, "user": "4f058c73535dcb61093f6bf9"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "4f048ebc535dcb61093f6bd2"}, {"code": "(fn [list]\n  (reduce #(conj %1 %2) '() list))", "problem": 23, "user": "4f03396d535dcb61093f6a7b"}, {"code": "reduce conj '()", "problem": 23, "user": "4f0891a2535dcb61093f6c3b"}, {"code": "(fn [x]\n  (loop [acc [] ls x]\n    (if (empty? ls)\n     acc\n     (recur (conj acc (last ls)) (butlast ls)))))", "problem": 23, "user": "4edb314d535d10e5ff6f5317"}, {"code": "#(loop [secventa %1 secv-reversed ()]\n  (if (empty? secventa)\n      secv-reversed\n      (recur (rest secventa)\n             (cons (first secventa) secv-reversed))))", "problem": 23, "user": "4f09312c535dcb61093f6c46"}, {"code": "(fn [s] (map (vec s) (range (dec (count s)) -1 -1)))", "problem": 23, "user": "4f08b15b535dcb61093f6c40"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4f089f1a535dcb61093f6c3c"}, {"code": "(fn [coll] (loop [r (rest coll) acc (conj () (first coll))] (if (= (count r) 0) acc (recur (rest r) (conj acc (first r)) ))))", "problem": 23, "user": "4ef8f78f535dced4c769f262"}, {"code": "(fn myreverse [x]\n  (if (empty? x)\n    []\n    (conj (myreverse (rest x))\n          (first x))))", "problem": 23, "user": "4f0369a2535dcb61093f6ab0"}, {"code": "(fn xxx [c] (if (empty? c) [] (conj (xxx(rest c)) (first c))))", "problem": 23, "user": "4f035397535dcb61093f6a8a"}, {"code": "#(into () %)", "problem": 23, "user": "4f0928db535dcb61093f6c45"}, {"code": "(fn this [s]\n  (if (empty? s)\n    (empty s)\n    (concat (this (rest s)) [(first s)])))", "problem": 23, "user": "4f0a4e7e535d0136e6c222f4"}, {"code": "(fn [inlist] (loop [il inlist rl '()]\n  (if (empty? il) rl\n    (recur (rest il) (conj rl (first il)))\n  )))", "problem": 23, "user": "4f0a5653535d0136e6c222f5"}, {"code": "(fn [s]\n  (loop [s s acc []]\n    (if (empty? s)\n        acc\n        (recur (rest s) (cons (first s) acc)))))", "problem": 23, "user": "4e7e3cc4535db169f9c7970a"}, {"code": "reduce #(conj % %2) '()", "problem": 23, "user": "4f032f30535dcb61093f6a73"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "4f0b2028535d0136e6c222ff"}, {"code": "(fn rev [x]\n  (if (empty? (rest x))\n    [(first x)]\n    (concat (rev (rest x)) [(first x)])\n  )\n)", "problem": 23, "user": "4f091dcd535dcb61093f6c43"}, {"code": "#(loop [l %\n        r nil]\n        (if (empty? l)\n          r\n        (recur (rest l) (cons (first l) r))))", "problem": 23, "user": "4f0333f6535dcb61093f6a77"}, {"code": "(fn my-reverse [coll]\n  (loop [coll coll, acc ()]\n    (if (empty? coll) acc\n      (recur (rest coll) (cons (first coll) acc)))))", "problem": 23, "user": "4f07bc41535dcb61093f6c2c"}, {"code": "(fn [s] \n  (reduce conj () s))", "problem": 23, "user": "4e6aba11535d8ccf87e9feff"}, {"code": "(fn [s]\n  (reduce #(cons %2 %) [] s))", "problem": 23, "user": "4f0bc223535d0136e6c22307"}, {"code": "#(loop [rev () li %1]\r\n               (if (= () (take 1 li))\r\n                 rev\r\n                 (recur (cons (first li) rev) (rest li))))", "problem": 23, "user": "4ebbb6bc535dfed6da9c6d71"}, {"code": "into '()", "problem": 23, "user": "4ee67364535d93acb0a6685f"}, {"code": "(fn myreverse [seq]\n  (if (empty? seq)\n    '()\n    (conj (myreverse (drop-last seq)) (last seq))))", "problem": 23, "user": "4f0a2ed1535d0136e6c222f3"}, {"code": "reduce #(conj %1 %2) ()", "problem": 23, "user": "4f0c84ce535d0136e6c2230e"}, {"code": "(fn reverse-seq\n  [s]\n    (if (empty? s)\nnil\n(concat (reverse-seq (rest s)) (seq [(first s)]))))", "problem": 23, "user": "4ec1b80c535dfed6da9c6db6"}, {"code": "(fn [coll]\n  (loop [forw coll, back nil]\n    (if (empty? forw)\n      back\n      (recur (rest forw)\n             (conj back (first forw))))))", "problem": 23, "user": "4efa3d4b535dced4c769f270"}, {"code": "#(loop [l % r ()] (if (= () l) r (recur (rest l) (cons (first l) r))))", "problem": 23, "user": "4f0ce26c535d0136e6c22312"}, {"code": "(fn myrev [xs] \n    (if (= (count xs) 1)\n        [(first xs)]\n        (concat \n          [(last xs)] \n          (myrev (take (- (count xs) 1) xs)) \n           )\n     )\n)", "problem": 23, "user": "4f0d6686535d0136e6c22318"}, {"code": "into ()", "problem": 23, "user": "4f0af7e9535d0136e6c222fc"}, {"code": "#(loop [x % result []]\n     (if (zero? (count x))\n\t       result\n\t       (recur (butlast x) (conj result (last x)))))", "problem": 23, "user": "4f066916535dcb61093f6c10"}, {"code": "into ()", "problem": 23, "user": "4f0e4ebd535d0136e6c22322"}, {"code": "(fn [x]\n  (loop [z (rest x), y (list (first x))]\n    (cond\n      (empty? z) y\n      :else (recur (rest z) (cons (first z) y)))))", "problem": 23, "user": "4f0e0aee535d0136e6c22320"}, {"code": "(fn [x] (reduce conj '() x))", "problem": 23, "user": "4f084e44535dcb61093f6c34"}, {"code": "(fn revv \n  [x]\n  (if (= (count x) 1)\n    x\n    (cons  (last x) (revv (butlast x)) )\n    )\n  )", "problem": 23, "user": "4f0df199535d0136e6c2231e"}, {"code": "(fn [s]\n  (loop [acc nil sq s]\n    (if (empty? sq)\n      acc\n      (recur (cons (first sq) acc) (rest sq)))))", "problem": 23, "user": "4f043663535dcb61093f6bb0"}, {"code": "(fn rev [s]\n  (loop [s s result nil]\n    (if (empty? s)\n      result\n      (recur (rest s) (conj result (first s))))))", "problem": 23, "user": "4f0ef874535d0136e6c22328"}, {"code": "(fn my-rev [s]\n  (loop [vals s result ()]\n    (if-not (seq vals)\n      result\n      (recur (rest vals) (conj result (first vals))))))", "problem": 23, "user": "4f0f03ce535d0136e6c2232a"}, {"code": "into ()", "problem": 23, "user": "4f0f174c535d0136e6c22330"}, {"code": "(fn [list]\n  ((fn myreverse [list reversed] \n      (if (= 0 (count list))\n          reversed\n          (myreverse (rest list) (conj reversed (first list) ))))\n    list nil ))", "problem": 23, "user": "4f0f3830535d0136e6c22338"}, {"code": "(fn [s]\n  ((if (vector? s) (partial apply vector) identity)\n    (loop [l s r '()]\n      (if (empty? l) r\n        (recur (rest l) (cons (first l) r))))))", "problem": 23, "user": "4f03ac2d535dcb61093f6b4a"}, {"code": "(fn rev [list] \n  (if (= list [])\n    []\n    (conj (rev (rest list)) (first list))\n  )\n)", "problem": 23, "user": "4f0f8010535d0136e6c22340"}, {"code": "into ()", "problem": 23, "user": "4f0fe835535d64f60314640e"}, {"code": "(fn my-reverse\n  ([x] (my-reverse x '()))\n  ([x xx] \n    (if (empty? x)\n      xx\n      (my-reverse (butlast x) (conj (vec xx) (last x)))\n    )\n  )\n)", "problem": 23, "user": "4f073429535dcb61093f6c23"}, {"code": "#(into '() %)", "problem": 23, "user": "4ebcb8ff535dfed6da9c6d8a"}, {"code": "#(loop [r '()\n        coll %]\n   (if (empty? coll)\n     r\n     (recur (conj r (first coll)) (rest coll))))", "problem": 23, "user": "4eb9d8f8535dfed6da9c6d61"}, {"code": "reduce #(conj % %2) ()", "problem": 23, "user": "4f1052b9535d64f603146418"}, {"code": "(fn [list]\n  \"\"\n  (loop\n      [left list\n       acc '()]\n    (if (empty? left)\n      acc\n      (recur (rest left) (conj acc (first left) )))))", "problem": 23, "user": "4f08a8a2535dcb61093f6c3d"}, {"code": "into ()", "problem": 23, "user": "4f10175e535d64f603146411"}, {"code": "reduce (fn [r e] (conj r e)) (list)", "problem": 23, "user": "4eb298c1535d7eef3080734b"}, {"code": "#(loop [a %1, r '()]\n    (if (= 0 (count a))\n        r\n        (recur (rest a) (conj r (first a)))))", "problem": 23, "user": "4f038567535dcb61093f6b0c"}, {"code": "reduce #(cons %2 %) []", "problem": 23, "user": "4f0f36a7535d0136e6c22336"}, {"code": "(fn fun [c]\n    (when-not (empty? c)\n\t    (concat (cons (last c) '()) (fun (butlast c)))))", "problem": 23, "user": "4f02fdc9535dcb61093f6a42"}, {"code": "(fn [x] ((fn rev [y,z] (if (= y '()) z (rev (rest y) (conj z (first y))))) x '()))", "problem": 23, "user": "4f11dea7535d64f603146425"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "4f038ed6535dcb61093f6b24"}, {"code": "#(loop [res [], arg %]\n    (if (empty? arg)\n      res\n      (recur (conj res (last arg))\n             (take (- (count arg) 1) arg))))", "problem": 23, "user": "4f0f9df7535d0136e6c22342"}, {"code": "(fn [lst]\n  (loop [my-lst lst acc '()]\n    (if (empty? my-lst)\n        acc\n        (recur (rest my-lst) (cons (first my-lst) acc)))))", "problem": 23, "user": "4f122bfe535d64f603146426"}, {"code": "(fn f [x] (if (> (count x) 0) (concat (f (rest x)) [(first x)]) []))", "problem": 23, "user": "4f0cc259535d0136e6c22310"}, {"code": "reduce #(cons %2 %1) '()", "problem": 23, "user": "4f0e995e535d0136e6c22326"}, {"code": "(fn [xs]\n  (loop [rs xs, fs []]\n    (if (empty? rs)\n      fs\n      (recur (rest rs)(conj (seq fs) (first rs))))))", "problem": 23, "user": "4f128865535d64f603146428"}, {"code": "#(reduce (fn [r i] (conj r i)) '() %)", "problem": 23, "user": "4f12ab23535d64f603146429"}, {"code": "apply conj ()", "problem": 23, "user": "4f0f40d3535d0136e6c2233b"}, {"code": "(fn rev [l] (if (empty? l) [] (conj (rev (rest l)) (first l))))", "problem": 23, "user": "4f12d1b0535d64f60314642b"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4f13047d535d64f60314642c"}, {"code": "(partial reduce conj '())", "problem": 23, "user": "4f03bf5e535dcb61093f6b5d"}, {"code": "(fn [s]\n  (reduce conj () s))", "problem": 23, "user": "4f1473eb535d64f603146439"}, {"code": "(fn my-reverse [coll]                                                                                                                         \r\n   (letfn [(rev-helper [from to]                                                                                                              \r\n             (if (empty? from)                                                                                                                \r\n               to                                                                                                                             \r\n               (rev-helper (rest from) (conj to (first from)))))]                                                                             \r\n     (rev-helper coll '())))", "problem": 23, "user": "4f149e0f535d64f60314643d"}, {"code": "(fn [l]\n  (reduce\n    (fn [acc each]\n      (conj acc each))\n    '()\n    l))", "problem": 23, "user": "4f1569bb535d64f603146441"}, {"code": "#(into () %)", "problem": 23, "user": "4f14fbec535d64f603146440"}, {"code": "#(loop [r [] a %]\n  (if (empty? a) r\n  (recur (cons (first a) r) (rest a))))", "problem": 23, "user": "4f1595da535d64f603146444"}, {"code": "(fn [x] ((fn rev [x y] (if (not-empty x) (rev (rest x) (cons (first x) y)) y) ) x '()))", "problem": 23, "user": "4f05c087535dcb61093f6c00"}, {"code": "(fn rev [s]\n  (if (= 1 (count s))\n    s\n    (conj (rev (vec (rest s))) (first s))))", "problem": 23, "user": "4edffe54535d10e5ff6f5347"}, {"code": "(fn [coll]\n  (reduce #(cons %2 %1) '() coll))", "problem": 23, "user": "4f107e0e535d64f60314641c"}, {"code": "reduce conj ()", "problem": 23, "user": "4ede361a535d10e5ff6f5332"}, {"code": "(fn [x] (reduce conj () x))", "problem": 23, "user": "4eeb8f68535d93acb0a668a9"}, {"code": "(-> reduce (partial conj ()))", "problem": 23, "user": "4f16ef8a535d64f603146451"}, {"code": "(fn my-reverse [coll]\n  (loop [coll coll, rev []]\n    (if (empty? coll)\n      rev\n      (recur (pop (vec coll)) (conj rev (last (vec coll)))))))", "problem": 23, "user": "4f159ea6535d64f603146445"}, {"code": "reduce (fn [x y] (conj x y)) '()", "problem": 23, "user": "4f15de56535d64f603146448"}, {"code": "(fn [lat]\n(into '() lat))", "problem": 23, "user": "4e7dc2ab535db169f9c796e5"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "4ed8715c535d10e5ff6f52f9"}, {"code": "(fn new-reverse [x]\n  (if (next x)\n    (cons (last x) (new-reverse (butlast x)))\n    x))", "problem": 23, "user": "4f04d312535dcb61093f6be7"}, {"code": "(fn [tseq] (reduce #(cons %2 %1) (empty tseq) tseq))", "problem": 23, "user": "4e6b6294535d8ccf87e9ff11"}, {"code": "(fn [coll]\n  ((fn rev-seq [coll rev-coll]\n    (if (seq coll)\n      (do \n        (rev-seq (rest coll)  (conj rev-coll (first coll))))\n      rev-coll)) coll ()))", "problem": 23, "user": "4f1872a2535d64f60314645a"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4f18ea00535d64f603146461"}, {"code": "(fn [seq]\n  (reduce conj () seq))", "problem": 23, "user": "4f11caf6535d64f603146424"}, {"code": "(fn [x] (\n  (fn myRev [y z]\n     (if (= (count y) 0)\n        z\n        (myRev\n          (rest y)\n          (conj z (first y))\n        )\n     )\n  ) x '()\n))", "problem": 23, "user": "4f16d6ed535d64f60314644f"}, {"code": "(fn [coll] (reduce conj '() coll))", "problem": 23, "user": "4f16d3fd535d64f60314644e"}, {"code": "(fn [l] (reduce #(cons %2 %1) [] l))", "problem": 23, "user": "4f1b0ab3535d64f603146474"}, {"code": "reduce #(cons %2 %) []", "problem": 23, "user": "4db97911535d1e037afb21a2"}, {"code": "reduce #(conj %1 %2) '()", "problem": 23, "user": "4f1b92d1535d64f60314647b"}, {"code": "(fn a[lst]\n  (if (empty? lst)\n      (empty lst)\n      (cons (last lst) (a (butlast lst)))\n))", "problem": 23, "user": "4f1b9c11535d64f60314647c"}, {"code": "(fn  [theSeq] (\n  (fn revIt [newSeq oldSeq]\n    (if (= oldSeq '())\n      newSeq\n      (revIt (conj newSeq (first oldSeq)) (rest oldSeq)))) '() theSeq))", "problem": 23, "user": "4f1c2336535d64f60314647f"}, {"code": "reduce #(cons %2 %1) '()", "problem": 23, "user": "4f0c4518535d0136e6c2230b"}, {"code": "into nil", "problem": 23, "user": "4e8ccd16535d65386fec212e"}, {"code": "(fn [s]\n  (loop [in s out nil]\n    (if (empty? in) out\n      (recur (rest in) (conj out (first in))))))", "problem": 23, "user": "4f16213f535d64f603146449"}, {"code": "(fn rev [col] (reduce conj () col))", "problem": 23, "user": "4f193dab535d64f603146465"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4f0d093b535d0136e6c22313"}, {"code": "(fn [sequence] \n  (loop [sq sequence, result '()]\n    (if (nil? (seq sq))\n       result\n       (recur (rest sq) (cons (first sq) result)))))", "problem": 23, "user": "4f17df72535d64f603146458"}, {"code": "#(into () %)", "problem": 23, "user": "4f18677d535d64f603146459"}, {"code": "reduce (fn [a b] (cons b a)) []", "problem": 23, "user": "4ee8fc1e535d93acb0a66887"}, {"code": "(fn [x] \n  (loop [l x res '()]\n    (if l\n      (recur (next l) (conj res (first l)))\n      res)))", "problem": 23, "user": "4f1c2a3a535d64f603146480"}, {"code": "reduce conj '()", "problem": 23, "user": "4f1c9652535d64f603146483"}, {"code": "(fn [l] (into '() l))", "problem": 23, "user": "4f18f65d535d64f603146462"}, {"code": "#( loop [copylist nil i 0 ]\n       (if (= i (count %1))\n          copylist\n      (recur (conj copylist (nth (seq %1) i )) (inc i))\n      ))", "problem": 23, "user": "4ea31da2535d7eef308072c1"}, {"code": "(fn [s]\n  (reduce conj () s))", "problem": 23, "user": "4f1d467c535d64f60314648a"}, {"code": "(fn [xs]\n    (loop [x xs \n           y ()]\n      (if (empty? x) \n         y \n         (recur (rest x) (cons (first x) y))\n      )\n    )\n  )", "problem": 23, "user": "4ee88f29535d93acb0a66882"}, {"code": "(fn [s]\n  (loop [sq s nwsq (seq [])]\n        (if (empty? sq)\n            nwsq\n            (recur (rest sq) (cons (first sq) nwsq)))))", "problem": 23, "user": "4e00af25535d04ed9115e78e"}, {"code": "#(map-indexed \n    (fn [i item]\n      (nth (vec %) (- (.size %) 1 i))) %)", "problem": 23, "user": "4f1e4ab5535d64f603146496"}, {"code": "(fn r[x] \n  (if (empty? x) \n    [] \n    (conj (r (rest x)) (first x))))", "problem": 23, "user": "4f1fd734535d64f6031464a5"}, {"code": "(fn [sq] (reduce conj '() sq) )", "problem": 23, "user": "4f1ff504535d64f6031464a6"}, {"code": "(fn [a-seq]\n  (loop [ my-new-seq nil old-seq a-seq]\n    ;;(do\n    ;;  (println \"my-new-seq:\" my-new-seq)\n    ;;  (println \"old-seq: \" old-seq)\n    ;;  )\n    (if (= nil (last old-seq))\n      my-new-seq\n      (recur (cons (first old-seq) my-new-seq) (rest old-seq)))))", "problem": 23, "user": "4f1f1a9d535d64f60314649d"}, {"code": "#(into () %)", "problem": 23, "user": "4f20173a535d64f6031464a9"}, {"code": "#(reduce conj nil %)", "problem": 23, "user": "4f169a0f535d64f60314644c"}, {"code": "#(loop [x (seq %) r '()] (if (seq x) (recur (rest x) (conj r (first x))) r))", "problem": 23, "user": "4efd8b67535de96065cf5085"}, {"code": "#(reduce \n  (fn [x,y]\n    (conj x y))\n  ()\n  %1)", "problem": 23, "user": "4f1abbfb535d64f60314646e"}, {"code": "#(into () %)", "problem": 23, "user": "4f215350e4b0d66497709fd0"}, {"code": "(fn rev\r\n  [coll]\r\n  (if (= [] coll)\r\n    []\r\n    (conj (rev (rest coll)) (first coll))))", "problem": 23, "user": "4f17ab99535d64f603146457"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4eea4d84535d93acb0a6689c"}, {"code": "(fn ! [l]\n  (cond \n    (empty? l) l\n    :else (cons (last l) (! (butlast l)))))", "problem": 23, "user": "4f22e667e4b0d66497709fdb"}, {"code": "(fn my-rev [sqn]\r\n  (if (empty? sqn)\r\n    sqn\r\n    (cons (last sqn) (my-rev (butlast sqn)))))", "problem": 23, "user": "4f20c040e4b0d66497709fcb"}, {"code": "reduce #(conj %1 %2) '()", "problem": 23, "user": "4f230dfbe4b0d66497709fe0"}, {"code": "(fn [s] (reduce conj '() s))", "problem": 23, "user": "4f165655535d64f60314644a"}, {"code": "(fn [x] (reduce (fn [v c] (concat [c] v)) [] x))", "problem": 23, "user": "4f1d1299535d64f603146487"}, {"code": "(fn my-reverse [original]\n  (reduce conj '() original))", "problem": 23, "user": "4f0d1cf3535d0136e6c22314"}, {"code": "#(into () %)", "problem": 23, "user": "4f1b1f31535d64f603146477"}, {"code": "reduce conj '()", "problem": 23, "user": "4f245d77e4b0d66497709feb"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4f240007e4b0d66497709fe6"}, {"code": "reduce (fn [b l] (cons l b)) ()", "problem": 23, "user": "4eb02674535d7eef30807338"}, {"code": "#(reduce (fn ([x1] [x1]) ([x1 x2] (cons x2 x1))) [] %)", "problem": 23, "user": "4e48b61d535dc968683fc4be"}, {"code": "#(loop [s %\n        r '()]\n  (if (not (empty? s))\n    (recur (next s) (cons (first s) r))\n    r\n))", "problem": 23, "user": "4ee5f2fe535d93acb0a66852"}, {"code": "(fn my-reverse2 [s]\n  (let [v (reduce conj  () s)]\n    (if (vector? s) (vec v) v)))", "problem": 23, "user": "4f251302e4b0d66497709ff0"}, {"code": "reduce (fn [x y] (cons y x)) nil", "problem": 23, "user": "4f25981ee4b0d66497709ff9"}, {"code": "#(reduce (fn [a b] (conj a b)) '() %)", "problem": 23, "user": "4f15b309535d64f603146446"}, {"code": ";(fn ny-rev [xs]\n;  (loop [xs xs\n;         res nil]\n;    (if (empty? xs)\n;      res\n;      (recur (rest xs) (conj res (first xs))))))\n\n#(reduce conj '() %)", "problem": 23, "user": "4f07c8c3535dcb61093f6c2d"}, {"code": "reduce conj ()", "problem": 23, "user": "4f24b023e4b0d66497709fee"}, {"code": "(fn [seq]\n  (loop [seq seq rev []]\n    (if (empty? seq)\n      rev\n      (recur (drop-last seq) (conj rev (last seq))))))", "problem": 23, "user": "4f230adde4b0d66497709fdf"}, {"code": "(fn [s]\n  (loop [l s\n         r '()]\n    (if (not (seq l))\n      r\n      (recur (rest l) (conj r (first l))))))", "problem": 23, "user": "4f2673d7e4b0d6649770a002"}, {"code": "(fn [lst]\n  (reduce conj () lst))", "problem": 23, "user": "4f032cb1535dcb61093f6a70"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4f26c3b5e4b0d6649770a005"}, {"code": "(fn [xs] (reduce (fn [ys y] (cons y ys)) [] xs))", "problem": 23, "user": "4f00d948535dcb61093f6a32"}, {"code": "(fn [lst] (loop [x lst result [] ] (if (empty? x) result (recur (butlast x) (conj result (last x))))))", "problem": 23, "user": "4f1684c7535d64f60314644b"}, {"code": "reduce conj ()", "problem": 23, "user": "4f26c487e4b0d6649770a006"}, {"code": "(fn [seq]\n  (loop [seq seq acc '()]\n    (if (empty? seq)\n      acc\n      (recur (rest seq) (conj acc (first seq))))))", "problem": 23, "user": "4f26d6d9e4b0d6649770a007"}, {"code": "#(reduce conj (list) %)", "problem": 23, "user": "4f2858ece4b0d6649770a016"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4f280840e4b0d6649770a010"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4f2861eee4b0d6649770a017"}, {"code": "(fn [lst]\n  (loop [todo lst\n         acc  '()]\n    (if (seq todo)\n       (recur (rest todo) (cons (first todo) acc))\n       acc)))", "problem": 23, "user": "4f28c979e4b0d6649770a01a"}, {"code": "#(loop [j % k []] (if (not= j nil) (recur (next j) (cons (first j) k )) k))", "problem": 23, "user": "4f28d266e4b0d6649770a01c"}, {"code": "(fn [ss]\n  (loop [s ss res '()]\n(if (= s '())\nres\n(recur (rest s) (conj res (first s))))))", "problem": 23, "user": "4f287f96e4b0d6649770a018"}, {"code": "(fn rev [list]\n  (if (= (first list) nil)\n    []\n    (conj (rev (rest list)) (first list))))", "problem": 23, "user": "4f294c48e4b0d6649770a023"}, {"code": "(fn [args]\n    (loop [my-list args, ret '()]\n        (if (not (seq my-list)) \n            ret\n            (recur (rest my-list), (conj ret (first my-list)))\n        )\n    )\n)", "problem": 23, "user": "4f2965ffe4b0d6649770a029"}, {"code": "(fn [aSeq] (reduce (fn [accumulated nextVal] (conj accumulated nextVal)) nil aSeq))", "problem": 23, "user": "4f299ad8e4b0d6649770a02c"}, {"code": "(fn my-reverse \n  ([lst] (my-reverse lst []))\n  ([lst, res] \n    (if (= (count lst) 0)\n      res\n      (my-reverse (rest lst) (cons (first lst) res)))))", "problem": 23, "user": "4f21838fe4b0d66497709fd2"}, {"code": "(fn rev \n  ([s] (rev s ()))\n  ([s, r]\n    (if (seq s)\n      (rev (rest s) (conj r (first s)))\n      r)))", "problem": 23, "user": "4f29e66fe4b0d6649770a035"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "4f29cdc8e4b0d6649770a033"}, {"code": "#(reduce (fn [a b] (conj a b)) '() %)", "problem": 23, "user": "4f2a35ace4b0d6649770a03a"}, {"code": "into '()", "problem": 23, "user": "4f1d6fbb535d64f60314648c"}, {"code": "#(reduce conj () %1)", "problem": 23, "user": "4f296a80e4b0d6649770a02a"}, {"code": "reduce conj '()", "problem": 23, "user": "4f2a6169e4b0d6649770a03d"}, {"code": "reduce conj '()", "problem": 23, "user": "4f10234c535d64f603146413"}, {"code": "#(into () %)", "problem": 23, "user": "4f2acd70e4b0d6649770a041"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4e68d816535d8ccf87e9fe8e"}, {"code": "(fn [seq]\r\n  (letfn [(x [seq rev] (if (empty? seq) rev (recur (rest seq) (cons (first seq) rev))))]\r\n    (x seq '())))", "problem": 23, "user": "4f2893d0e4b0d6649770a019"}, {"code": "#(reduce (fn [x y] (conj x y)) '() %)", "problem": 23, "user": "4f2c593ee4b0d6649770a053"}, {"code": "reduce #(concat (list %2) %) '()", "problem": 23, "user": "4f1d1d95535d64f603146488"}, {"code": "(fn rev [x] (apply conj '() x))", "problem": 23, "user": "4f1e1209535d64f603146493"}, {"code": "reduce #(cons %2 %1) '()", "problem": 23, "user": "4e6279e3535d8ccf87e9fe60"}, {"code": "(fn [coll]\n  (reduce conj '() coll))", "problem": 23, "user": "4f2a7174e4b0d6649770a03e"}, {"code": "into ()", "problem": 23, "user": "4f244f26e4b0d66497709fea"}, {"code": "(fn  foo [x] (when (not-empty x)(conj (foo (butlast x)) (last x)) ))", "problem": 23, "user": "4f1887ef535d64f60314645b"}, {"code": "(fn [c] (apply conj '() c))", "problem": 23, "user": "4f0f01c0535d0136e6c22329"}, {"code": "reduce conj '()", "problem": 23, "user": "4f2ca22fe4b0d6649770a054"}, {"code": "(fn r[x] (if (empty? x) () (conj (r (butlast x)) (last x))))", "problem": 23, "user": "4f2c2ccbe4b0d6649770a050"}, {"code": "#(map second (sort (fn [x y] (> (first x) (first y))) (partition 2 (interleave (range (count %)) %))))", "problem": 23, "user": "4f2582bae4b0d66497709ff6"}, {"code": "(fn [l]\n  (reduce (fn [c elt] (conj c elt)) '() l))", "problem": 23, "user": "4f2e2ad8e4b0d6649770a066"}, {"code": "(fn [derp] (reduce #(cons %2 %1) nil derp))", "problem": 23, "user": "4f2de7e9e4b0d6649770a061"}, {"code": "(fn [x] \n  (loop [y () a x] \n    (if (= (first a) nil) \n       y \n       (recur (cons (first a) y) (rest a)))))", "problem": 23, "user": "4f05adae535dcb61093f6bfd"}, {"code": "reduce conj ()", "problem": 23, "user": "4f0404df535dcb61093f6b91"}, {"code": "(fn [coll] (reduce conj () coll))", "problem": 23, "user": "4f282da7e4b0d6649770a013"}, {"code": "(fn [aseq] (loop [sq1 aseq sq2 '()] (if (empty? sq1) sq2 (recur (rest sq1) (cons (first sq1) (sequence sq2))))))", "problem": 23, "user": "4e6ec58c535d5021c1a89611"}, {"code": "(fn [s]\n  (loop [acc nil\n         r (seq s)]\n    (if (empty? r)\n      (seq acc)\n      (recur (conj acc (first r))\n             (rest r)))))", "problem": 23, "user": "4f2b0951e4b0d6649770a045"}, {"code": "(fn foo [xs]\n   (if (empty? xs)\n     xs\n     (conj (foo (take (-> xs count dec) xs)) (last xs))))", "problem": 23, "user": "4f2ef48be4b0d6649770a06c"}, {"code": "reduce conj ()", "problem": 23, "user": "4ee1f2ba535d10e5ff6f535f"}, {"code": "(fn [s]\n   (loop [f s, b '()]\n     (if (seq f)\n       (recur (rest f) (conj b (first f)))\n       b)))", "problem": 23, "user": "4f301d02e4b0d6649770a072"}, {"code": "#(into () %)", "problem": 23, "user": "4f2de9e8e4b0d6649770a062"}, {"code": "(fn this\n  ([xs] (this () xs))\n  ([revd xs]\n    (if (empty? xs)\n      revd\n      (recur (cons (first xs) revd) (rest xs)))))", "problem": 23, "user": "4f2e0369e4b0d6649770a064"}, {"code": "#(into () %)", "problem": 23, "user": "4f2d5f5de4b0d6649770a05a"}, {"code": "reduce conj '()", "problem": 23, "user": "4f2f6678e4b0d6649770a06e"}, {"code": "#(loop [s %, r []] (if s (recur (butlast s) (conj r (last s))) r))", "problem": 23, "user": "4f2cdd42e4b0d6649770a055"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4f3142d0e4b0d6649770a085"}, {"code": "(fn c [s]\n  (if (= 1 (count s))\n    s\n    (cons  (last s) (c (butlast s))  )\n    )\n  )", "problem": 23, "user": "4f2004a1535d64f6031464a7"}, {"code": "(fn rev [l]\n  (if (empty? l)\n    '()\n    (concat (rev (rest l)) (list (first l)))))", "problem": 23, "user": "4f0364d5535dcb61093f6a9e"}, {"code": "(fn foo [input-seq]\n  (loop [s input-seq\n         reversed []]\n    (if (= (count s) 0)\n      reversed\n      (recur (rest s) (cons (first s) reversed)))))", "problem": 23, "user": "4f31519ae4b0d6649770a086"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4f31f9e4e4b0d6649770a08c"}, {"code": "(fn [a s] (if (empty? s) a (recur (cons (first s) a) (rest s)))) '()", "problem": 23, "user": "4f312c35e4b0d6649770a084"}, {"code": "(fn [x] (loop [mx x rv []] (if (empty? mx) rv (recur (drop-last mx) (conj rv (last mx))))))", "problem": 23, "user": "4f307b02e4b0d6649770a079"}, {"code": "#(\n  loop [[x & y] (seq %) acc '()] \n    (if (nil? y)\n      (conj acc x)\n      (recur y (conj acc x))))", "problem": 23, "user": "4f141dee535d64f603146434"}, {"code": "(fn [coll]\n  (loop [acc nil xs coll]\n    (if (empty? xs)\n      acc\n      (recur (conj acc (first xs)) (rest xs)))))", "problem": 23, "user": "4f32ef71e4b0d6649770a098"}, {"code": "(fn [s]\n  ((fn f [x n]\n      (if (empty? x) n\n        (f (rest x) (conj n (first x))))) s '()))", "problem": 23, "user": "4f3242bae4b0d6649770a08f"}, {"code": "reduce conj '()", "problem": 23, "user": "4e8fb386535d65386fec2150"}, {"code": "reduce #(cons %2 %1) ()", "problem": 23, "user": "4f32a7f1e4b0d6649770a095"}, {"code": "(fn [a b] (if (not (empty? b)) \n   (recur (conj a (first b)) \n          (rest b)) a)) '()", "problem": 23, "user": "4f31ad57e4b0d6649770a089"}, {"code": "#(into '() %)", "problem": 23, "user": "4f036d18535dcb61093f6abe"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4ea84250535d7eef308072f5"}, {"code": "(fn [s] (reduce conj '() s))", "problem": 23, "user": "4f33fde5e4b0e243712b1eb3"}, {"code": "(fn [x] (\n  reduce conj '() x))", "problem": 23, "user": "4eb9353f535dfed6da9c6d4e"}, {"code": "into '()", "problem": 23, "user": "4f341320e4b0e243712b1eb4"}, {"code": "(fn [coll] (reduce conj () coll))", "problem": 23, "user": "4f043bbd535dcb61093f6bb2"}, {"code": "(partial reduce #(conj %1 %2) '())", "problem": 23, "user": "4f35475be4b0e243712b1ec0"}, {"code": "#(loop [f %, acc []] (if (empty? f) acc (recur (rest f) (cons (first f) acc))))", "problem": 23, "user": "4f34eb87e4b0e243712b1eba"}, {"code": "#(into (seq []) (vec %))", "problem": 23, "user": "4f343e60e4b0e243712b1eb5"}, {"code": "reduce conj ()", "problem": 23, "user": "4f356d8de4b0e243712b1ec2"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "4f3656d1e4b0e243712b1ec9"}, {"code": "#(loop [seq %\n        acc (condp = (type %)\n              (type []) []\n              '())]\n  (if (empty? seq)\n    acc\n    (recur (rest seq)\n           (cons (first seq) acc)))\n  \n)", "problem": 23, "user": "4f1ef703535d64f60314649c"}, {"code": "(let [f (fn f [l r] (if (= l []) r (f (rest l) (cons (first l) r))))] #(f % []))", "problem": 23, "user": "4f369deae4b0e243712b1ecb"}, {"code": "reduce conj '()", "problem": 23, "user": "4f3444b7e4b0e243712b1eb6"}, {"code": "into '()", "problem": 23, "user": "4f36f005e4b0e243712b1ecd"}, {"code": "into ()", "problem": 23, "user": "4ef48422535dced4c769f236"}, {"code": "(fn [x] (vals(zipmap(range(count x) 0 -1)x)))", "problem": 23, "user": "4f35e662e4b0e243712b1ec6"}, {"code": "#(into '() %)", "problem": 23, "user": "4f378631e4b0e243712b1ed3"}, {"code": "(fn [s]\n  ((fn [s ns]\n    (if (nil? s)\n      ns\n      (recur (next s) (cons (first s) ns)))) s nil))", "problem": 23, "user": "4f359c7ee4b0e243712b1ec4"}, {"code": "reduce conj ()", "problem": 23, "user": "4ed92fd6535d10e5ff6f5300"}, {"code": "(fn my-reverse\n  ([s] (my-reverse s ()))\n  ([s r]\n    (if (empty? s)\n      r\n      (recur (rest s) (conj r (first s))))))", "problem": 23, "user": "4f382eb7e4b0e243712b1ed9"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4f36f5f2e4b0e243712b1ece"}, {"code": "(fn [coll]\n  (loop [input coll result (list)]\n     (if (= input '()) result\n        (recur (rest input) (conj result (first input))))))", "problem": 23, "user": "4f38d6bbe4b0e243712b1ee2"}, {"code": "(fn  [seq] ( \n          loop [ input (vec seq) result [] ]\n            (if (empty? input)\n              result\n              (recur (pop input) (conj result (peek input )))  )))", "problem": 23, "user": "4f2aff4de4b0d6649770a044"}, {"code": "#(vec (reduce (fn [l e] (cons e l)) [] %))", "problem": 23, "user": "4f38b7d9e4b0e243712b1ee0"}, {"code": "(fn my-reverse [l]\n  (let [f (fn my-reverse-2 [l acc]\n    (if (empty? l)\n      acc\n      (my-reverse-2 (rest l) (cons (first l) acc))))]\n  (f l '())))", "problem": 23, "user": "4f39c08ae4b0e243712b1efb"}, {"code": "(fn foo [s] (if (not (vector? s)) (reduce conj () s) (vec (foo (seq s)))))", "problem": 23, "user": "4f387c2ee4b0e243712b1edd"}, {"code": "(fn [s]\n  (loop [se s, ret ()]\n    (if se\n      (recur (next se) (conj ret (first se)))\n      ret)))", "problem": 23, "user": "4f29eb2ae4b0d6649770a037"}, {"code": "reduce conj ()", "problem": 23, "user": "4f39f902e4b0e243712b1efe"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4f1bee08535d64f60314647e"}, {"code": "#(reduce (fn [a b] (cons b a)) [] %)", "problem": 23, "user": "4f03bbf2535dcb61093f6b59"}, {"code": "(fn [args] (\r\n                 loop [v ()\r\n                       args args]\r\n                 (if (first args)\r\n                   (recur (cons (first args) v) (next args))\r\n                   (vec v)\r\n                 )))", "problem": 23, "user": "4f3543eee4b0e243712b1ebd"}, {"code": "reduce conj '()", "problem": 23, "user": "4f06f953535dcb61093f6c1c"}, {"code": "into ()", "problem": 23, "user": "4f3a7e50e4b0e243712b1f0d"}, {"code": "#(loop [xs % acc nil] (if (empty? xs) acc (recur (rest xs) (conj acc (first xs)))))", "problem": 23, "user": "4f036e00535dcb61093f6ac3"}, {"code": "(fn [col]\r\n           (loop [c col r ()]\r\n             (if (empty? c)\r\n               r\r\n               (recur (rest c) (conj r (first c))))))", "problem": 23, "user": "4f3ad7f0e4b0e243712b1f1d"}, {"code": "(fn [s]\n  (loop [ss s rs []]\n    (if (empty? ss)\n      rs\n      (recur (rest ss) (cons (first ss) rs)))))", "problem": 23, "user": "4f3ae998e4b0e243712b1f1f"}, {"code": "#(loop [a % b ()]\n  (if (empty? a) b\n    (recur (rest a) (conj b (first a)))))", "problem": 23, "user": "4f3afdd0e4b0e243712b1f20"}, {"code": "(partial reduce #(cons %2 %1) [])", "problem": 23, "user": "4f3b5219e4b0e243712b1f2a"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "4f329974e4b0d6649770a093"}, {"code": "#(reduce (fn [a b] (conj a b)) () %)", "problem": 23, "user": "4f3c0c0fe4b0e243712b1f3d"}, {"code": "reduce (fn [val list] (conj val list)) ()", "problem": 23, "user": "4f370001e4b0e243712b1ecf"}, {"code": "reduce conj ()", "problem": 23, "user": "4f1bb9d8535d64f60314647d"}, {"code": "reduce #(conj %1 %2) '()", "problem": 23, "user": "4f3cd535e4b0e243712b1f56"}, {"code": "(fn [xs] (reduce conj () xs))", "problem": 23, "user": "4f339c04e4b0d6649770a09c"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4f3cc2fbe4b0e243712b1f55"}, {"code": "into '()", "problem": 23, "user": "4f3ca5a6e4b0e243712b1f53"}, {"code": "#(into '() %)", "problem": 23, "user": "4f3e2fbbe4b0e243712b1f7e"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "4f3e6244e4b0e243712b1f85"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "4ea5727f535d7eef308072d4"}, {"code": "#(into '() %)", "problem": 23, "user": "4f3c0734e4b0e243712b1f3c"}, {"code": "(fn [s] (reduce conj () s))", "problem": 23, "user": "4f3d83b5e4b0e243712b1f69"}, {"code": "reduce #(conj % %2) '()", "problem": 23, "user": "4f3976aee4b0e243712b1eea"}, {"code": "(fn [s] (reduce conj '() s))", "problem": 23, "user": "4f3ec266e4b0e243712b1f8c"}, {"code": "(fn [xs] (reduce #(cons %2 %1) () xs))", "problem": 23, "user": "4f3fdf11e4b0e243712b1fa1"}, {"code": "(fn [c] (reduce conj '() c))", "problem": 23, "user": "4f0da4e4535d0136e6c22319"}, {"code": "(fn [coll]\n    (reduce #(cons %2 %1) () coll))", "problem": 23, "user": "4f4023d9e4b0e243712b1fa9"}, {"code": "#(if (empty? %2)\n  %1\n  (recur (conj %1 (last %2))\n         (butlast %2)))\n  []", "problem": 23, "user": "4f2b1893e4b0d6649770a047"}, {"code": "(fn [s] ((fn [s a] (if (empty? s) a (recur (rest s) (cons (first s) a)))) s []))", "problem": 23, "user": "4f404dcee4b0e243712b1fb0"}, {"code": "(fn [xs] (reduce conj () xs))", "problem": 23, "user": "4f40ccd9e4b0e243712b1fc0"}, {"code": "#(reduce (fn [a b] (cons b a)) [] %)", "problem": 23, "user": "4f3e5e87e4b0e243712b1f83"}, {"code": "(fn [s]\n  (loop [se s ae ()]\n(if (empty? se)\nae\n(recur (rest se) (cons (first se) ae)))))", "problem": 23, "user": "4f418eaee4b0d7d3c9f3fce9"}, {"code": "#(into () %)", "problem": 23, "user": "4f419f6fe4b0d7d3c9f3fceb"}, {"code": "reduce conj ()", "problem": 23, "user": "4f4003d9e4b0e243712b1fa5"}, {"code": "(fn rev [col]\n  (loop [col-rest col res (list)]\n    (let [x (first col-rest) xs (next col-rest)]\n      (if (empty? xs)\n        (cons x res)\n        (recur xs (cons x res))))))", "problem": 23, "user": "4f422e49e4b0d7d3c9f3fcf7"}, {"code": "(partial reduce (fn [p q] (cons q p)) ())", "problem": 23, "user": "4f426a7ae4b0d7d3c9f3fcff"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "4f4274f2e4b0d7d3c9f3fd00"}, {"code": "(fn [x] (reduce #(cons %2 %1) (empty x) x))", "problem": 23, "user": "4f42ae16e4b0d7d3c9f3fd09"}, {"code": "(fn [x] (reduce (fn [l r] (cons r l)) nil x))", "problem": 23, "user": "4f3e05a8e4b0e243712b1f79"}, {"code": "(fn [s] (reduce conj () s))", "problem": 23, "user": "4f4175ffe4b0d7d3c9f3fce8"}, {"code": "(fn rev [alist] (reduce (fn [xs x] (into [x] xs)) [] alist))", "problem": 23, "user": "4f1f8fae535d64f6031464a3"}, {"code": "reduce conj ()", "problem": 23, "user": "4f42c76fe4b0d7d3c9f3fd0e"}, {"code": "(fn rever [l] (if (> (count l) 0) (cons (last l) (rever (butlast l))) (list)))", "problem": 23, "user": "4f3bfce2e4b0e243712b1f38"}, {"code": "#(into () %)", "problem": 23, "user": "4e7d20e6535db169f9c796c6"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4f188db6535d64f60314645c"}, {"code": "#(into () %)", "problem": 23, "user": "4f4393b3e4b0d7d3c9f3fd24"}, {"code": "#(if (set? %1)\r\n  (into () %1)\r\n  (loop [s %1 r (empty %1)]\r\n    (if s\r\n      (recur (butlast s) (conj r (last s)))\r\n      r)))", "problem": 23, "user": "4f3c772de4b0e243712b1f4c"}, {"code": "into '()", "problem": 23, "user": "4f437751e4b0d7d3c9f3fd20"}, {"code": "#(reduce conj () %1)", "problem": 23, "user": "4f4544e1e4b0d56e7bb92b7a"}, {"code": "reduce conj '()", "problem": 23, "user": "4f39493be4b0e243712b1ee9"}, {"code": "(fn reverser\n  ([x]\n\t\t(if (empty? x)\n\t\t\t[]\n\t\t\t(conj (reverser (rest x))\n\t\t\t\t  (first x))))\n)", "problem": 23, "user": "4f442cdfe4b0d7d3c9f3fd34"}, {"code": "#(into () %)", "problem": 23, "user": "4f43d0cbe4b0d7d3c9f3fd2f"}, {"code": "reduce conj ()", "problem": 23, "user": "4f40f055e4b0e243712b1fc2"}, {"code": "(fn [s]\n  (loop [s s\n         res []]\n           (if (empty? s)\n              res\n              (recur (rest s) (cons (first s) res)))))", "problem": 23, "user": "4f465096e4b0d56e7bb92b9a"}, {"code": "#(loop [i %\n        r []]\n    (if (= 0 (count i))\n      r\n      (recur (butlast i) (conj r (last i))))\n)", "problem": 23, "user": "4f410b63e4b0e243712b1fc5"}, {"code": "reduce #(cons %2 %) []", "problem": 23, "user": "4f4319ebe4b0d7d3c9f3fd13"}, {"code": "(fn [x]\n  (reduce conj () x))\n\n; #(into () %)", "problem": 23, "user": "4f45c72be4b0d56e7bb92b8a"}, {"code": "(fn [lst]\n       (letfn [(reverse-it [lst1 lst2]\n                 (if (empty? lst2) lst1\n                     (reverse-it (cons (first lst2) lst1) (rest lst2))))]\n         (reverse-it [] lst)))", "problem": 23, "user": "4eb6f065535d7eef30807372"}, {"code": "(fn foo [x] (if (empty? x) x (conj (foo (butlast x)) (last x))))", "problem": 23, "user": "4f2acb29e4b0d6649770a040"}, {"code": "#(letfn [(worker [x n]\n           (if (= x ())\n             n\n             (recur (rest x) (conj n (first x)))))]\n   (worker % ()))", "problem": 23, "user": "4f474f43e4b0d56e7bb92bb7"}, {"code": "reduce conj ()", "problem": 23, "user": "4f2baf1ae4b0d6649770a04c"}, {"code": "into '()", "problem": 23, "user": "4f472c04e4b0d56e7bb92bb4"}, {"code": "into '()", "problem": 23, "user": "4f48d37fe4b0d56e7bb92be0"}, {"code": "(fn [collection] (into () collection))", "problem": 23, "user": "4f462919e4b0d56e7bb92b94"}, {"code": "into ()", "problem": 23, "user": "4f2f7e87e4b0d6649770a06f"}, {"code": "into ()", "problem": 23, "user": "4f25c4c4e4b0d66497709ffc"}, {"code": "(fn [x]\n  ((fn [y r]\n    (if (seq y)\n        (recur (rest y)(conj r (first y)))\n        r\n      )\n    ) x ()) \n  )", "problem": 23, "user": "4f4a34b2e4b0d56e7bb92c09"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "4f4a5ca6e4b0d56e7bb92c0f"}, {"code": "#(loop [collection % result []]\n  (if (empty? collection)\n    result\n    (recur (next collection) \n           (cons (first collection) result))))", "problem": 23, "user": "4f4a17ffe4b0d56e7bb92c05"}, {"code": "reduce #(conj %1 %2) '()", "problem": 23, "user": "4f49202ce4b0d56e7bb92be6"}, {"code": "(fn [argument]\n    (loop [sequence argument acc (list)]\n      (cond (empty? sequence) acc\n            :else (recur (drop-last sequence) (concat acc (list (last sequence)))))))", "problem": 23, "user": "4f4a8707e4b0d56e7bb92c12"}, {"code": "(fn rev [seq]\n  (loop [s seq r nil]\n    (if (empty? s)\n        r\n        (recur (rest s) (cons (first s) r)))))", "problem": 23, "user": "4f4ac35ae4b0d56e7bb92c18"}, {"code": "(fn [list] (reduce (fn [a e] (conj a e)) () list))", "problem": 23, "user": "4f4afb1fe4b0d56e7bb92c21"}, {"code": "into '()", "problem": 23, "user": "4f496097e4b0d56e7bb92bf0"}, {"code": "(fn myreverse [xs]\n  (if (empty? xs)\n    []\n    (concat (myreverse (rest xs))\n            (list (first xs)))))", "problem": 23, "user": "4f49e869e4b0d56e7bb92c02"}, {"code": "reduce #(cons %2 %1) []", "problem": 23, "user": "4f4ab1ffe4b0d56e7bb92c16"}, {"code": "(fn [coll]\n  (loop [in coll out ()]\n    (if (empty? in)\n      out\n      (recur (rest in) (conj out (first in))))))", "problem": 23, "user": "4f4ba29ae4b03ad3f0c10c7a"}, {"code": "#(reduce conj '() %)\n\n#_(fn r \n  ([x] (r (rest x) (list (first x)))) \n  ([x l] \n    (if (seq x)\n      (recur (rest x)\n            (cons (first x) l))\n      l)))", "problem": 23, "user": "4dcd2065535d5973398f929a"}, {"code": "(fn [ls] (reduce #(conj %1 %2) '() ls))", "problem": 23, "user": "4f03ba9c535dcb61093f6b58"}, {"code": "into ()", "problem": 23, "user": "4f303ebbe4b0d6649770a077"}, {"code": "(fn myrev [coll]\n  (loop [reversed [] original coll]\n\t\t(if (empty? original)\n\t\t\treversed\n\t\t\t(recur (conj reversed (last original)) (drop-last original)))))", "problem": 23, "user": "4f46df00e4b0d56e7bb92bac"}, {"code": "(fn revit [sequence]\n((fn rev[in out]\n  (if (seq in) \n    (rev (next in) (conj out (first in)))\n    out)) sequence '()))", "problem": 23, "user": "4f4c6b21e4b03ad3f0c10c8f"}, {"code": "(fn [s]\n  (reduce conj '() s))", "problem": 23, "user": "4f4c8faae4b03ad3f0c10c93"}, {"code": "(fn rev [col]\n  (loop [result '() col col]\n    (if (empty? col)\n      result\n      (recur (conj result (first col)) (rest col)))))", "problem": 23, "user": "4db8d37d535d1e037afb219c"}, {"code": "(fn [x]\n  (reduce\n\t\t(fn [y z]\n\t\t\t(cons z y))\n\t\t(empty x)\n\t\tx))", "problem": 23, "user": "4f4c4fdde4b03ad3f0c10c8b"}, {"code": "reduce conj ()", "problem": 23, "user": "4f3191d8e4b0d6649770a088"}, {"code": "(fn rev [s] (if (empty? (drop-last s)) \n  (list (last s))\n  (cons (last s) (rev (drop-last s)))))", "problem": 23, "user": "4ebe81e9535dfed6da9c6d95"}, {"code": "(fn reverser [coll]\n  (loop [l coll result []]\n    (if (empty? l) \n        result\n        (recur (rest l) (cons (first l) result)))))", "problem": 23, "user": "4ea5ba92535d7eef308072d9"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4f1a87d2535d64f60314646c"}, {"code": "(fn rev\n  ([s acc]\n    (if (empty? s)\n        acc\n        (recur (rest s) (cons (first s) acc))))\n  ([s] (rev s ())))", "problem": 23, "user": "4f4e78fee4b03ad3f0c10cc8"}, {"code": "into ()", "problem": 23, "user": "4f4e7c01e4b03ad3f0c10cc9"}, {"code": "(fn my-rev [xs]\n  (loop [xs (seq xs)\n         ys ()]\n    (if xs\n      (recur (next xs) (conj ys (first xs)))\n      ys)))", "problem": 23, "user": "4f4e91a9e4b03ad3f0c10cca"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4f482e3be4b0d56e7bb92bd4"}, {"code": "reduce #(cons %2 %1) []", "problem": 23, "user": "4f4f0287e4b03ad3f0c10cd7"}, {"code": "(fn my-reverse [seq]\n  (if (empty? seq)\n    []\n    (conj (my-reverse (rest seq)) (first seq))))", "problem": 23, "user": "4f4e4ecbe4b03ad3f0c10cbf"}, {"code": "(fn rev [col] \n  (if \n    (= (count col) 1) \n    (list (first col))\n    (cons (last col) (rev (drop-last col)))))", "problem": 23, "user": "4db2f208535df7e46ed9b6c9"}, {"code": "(fn [coll] (reduce conj '() coll))", "problem": 23, "user": "4f4fbed7e4b03ad3f0c10ce8"}, {"code": "#(into () %)", "problem": 23, "user": "4f4ee649e4b03ad3f0c10cd4"}, {"code": "(fn [x] (apply conj '() x))", "problem": 23, "user": "4f4ff451e4b03ad3f0c10cf2"}, {"code": "#(loop [acc '() lst %]\n  (let [fst (first lst) rst (rest lst)]\n    (if (= rst ())\n      (cons fst acc)\n      (recur (cons fst acc) rst))))", "problem": 23, "user": "4f4e978ae4b03ad3f0c10ccb"}, {"code": "apply (partial conj '())", "problem": 23, "user": "4f4fac2ae4b03ad3f0c10ce5"}, {"code": "(fn rvs [coll]\r\n    (if-let [x (seq coll)]\r\n      (concat (rvs (rest coll)) (list (first x)))))", "problem": 23, "user": "4f047177535dcb61093f6bc6"}, {"code": "reduce (fn [x y] (conj x y)) '()", "problem": 23, "user": "4f4ff5a8e4b03ad3f0c10cf3"}, {"code": "; My first terribly prolixic version\n; (fn\n;     [my-seq]\n;     (loop [old-seq my-seq reversed-seq []]\n;         (if (empty? old-seq)\n;             reversed-seq\n;         (recur (butlast old-seq) (conj reversed-seq (last old-seq))))))\n\n\n(fn [coll] (reduce #(conj %1 %2) '() coll))", "problem": 23, "user": "4f4daa4ae4b03ad3f0c10cac"}, {"code": "#(loop [a (vec %) b []]\n  (if (not-empty a)\n      (recur (pop a) (conj b (peek a)))\n      b))", "problem": 23, "user": "4f504739e4b03ad3f0c10d00"}, {"code": "#(loop [x % result []]\n  (if (zero? (count x))\n      result\n      (recur (pop (vec x)) (conj result (last (vec x))))))", "problem": 23, "user": "4f4bbda0e4b03ad3f0c10c7b"}, {"code": "#(for [x (range 0 (count %))] (first (take-last (inc x) %)))", "problem": 23, "user": "4f4f1b84e4b03ad3f0c10cda"}, {"code": "(fn [lst] (\n   reduce conj '() lst\n   ))", "problem": 23, "user": "4e5fdd68535d8ccf87e9fe4f"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "4f50cadce4b03ad3f0c10d0f"}, {"code": "(fn new-reverse [coll]\n  (loop [c coll acc ()]\n    (cond\n      (empty? c) acc\n      :else (recur (rest c) (cons (first c) acc)))))", "problem": 23, "user": "4f50c414e4b03ad3f0c10d0d"}, {"code": "(fn [a] (reduce conj () a))", "problem": 23, "user": "4f4becd8e4b03ad3f0c10c83"}, {"code": "(fn [x] (loop [original x, reversed []]\n  (if (empty? original)\n   reversed\n    (recur (next original) (cons (first original) reversed)))))", "problem": 23, "user": "4f4fd593e4b03ad3f0c10cec"}, {"code": "(fn my-rev [list]\n  (if (= (count list) 1)\n    list\n    (cons (last list) (my-rev (butlast list)))))", "problem": 23, "user": "4f4f08c8e4b03ad3f0c10cd8"}, {"code": "apply conj ()", "problem": 23, "user": "4f4a03cce4b0d56e7bb92c03"}, {"code": "(fn philm [x] (if\n    (= (count x) 0)\n    '()\n    (conj (philm (butlast x)) (last x))))", "problem": 23, "user": "4f524d11e4b03ad3f0c10d34"}, {"code": "(fn my-reverse [list]\n  (if (zero? (count list))\n    list\n    (cons (last list) (my-reverse (butlast list)))))", "problem": 23, "user": "4f525fdce4b03ad3f0c10d37"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "4f51b9f3e4b03ad3f0c10d2b"}, {"code": "into ()", "problem": 23, "user": "4f528bcde4b03ad3f0c10d3e"}, {"code": "#((fn [rv rst] (if (= rst []) rv (recur (cons (first rst) rv) (rest rst)))) [] %)", "problem": 23, "user": "4f51e8a4e4b03ad3f0c10d2d"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4f443eafe4b0d7d3c9f3fd38"}, {"code": "into '()", "problem": 23, "user": "4f52ae00e4b03ad3f0c10d42"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4f4ec77ae4b03ad3f0c10cd0"}, {"code": "(fn [l]\n  (loop [l l, rl '()]\n    (if (empty? l)\n      rl\n      (recur (rest l) (cons (first l) rl)))))", "problem": 23, "user": "4f535e75e4b0a7574ea717c6"}, {"code": "(fn rev [l]\n  (if (first l)\n    (conj (rev (rest l)) (first l))\n    []\n  )\n)", "problem": 23, "user": "4f461e57e4b0d56e7bb92b92"}, {"code": "(fn [xs]\n  (loop [work xs, accum nil]\n    (if (empty? work)\n      accum\n      (recur (rest work) (cons (first work) accum)))))", "problem": 23, "user": "4f5030a9e4b03ad3f0c10cfd"}, {"code": "(fn f [x] \n  (if (empty? x) nil (concat (f(rest x)) (list (first x)))))", "problem": 23, "user": "4f5100cfe4b03ad3f0c10d15"}, {"code": "(fn [x] (reduce (fn [acc v] (cons v acc)) [] x))", "problem": 23, "user": "4ec53831535d6d7199dd3684"}, {"code": "#(into () %)", "problem": 23, "user": "4f54204ce4b0a7574ea717d9"}, {"code": "(fn rev [x] (if (= x '()) '() (concat (rev (rest x)) (list (first x)))))", "problem": 23, "user": "4f4d44f8e4b03ad3f0c10ca5"}, {"code": "(fn [x] (into () x))", "problem": 23, "user": "4f5438d6e4b0a7574ea717dd"}, {"code": "(fn n [x]\r\n  (if (nil? (next x))\r\n    [(first x)]\r\n    (conj (n (rest x)) (first x))\r\n  )\r\n)", "problem": 23, "user": "4f4aa932e4b0d56e7bb92c14"}, {"code": "(fn r[s] (into '() s))", "problem": 23, "user": "4f4e6d21e4b03ad3f0c10cc5"}, {"code": "reduce conj '()", "problem": 23, "user": "4f542fd9e4b0a7574ea717db"}, {"code": "#((fn [l,x] (if (= 0 (count l) ) x (recur (rest l) (conj x (first l)) ))) % '())", "problem": 23, "user": "4f54ecf1e4b0a7574ea717f0"}, {"code": "into ()", "problem": 23, "user": "4f5430b6e4b0a7574ea717dc"}, {"code": "#(reduce (fn [coll item] (cons item coll)) [] %)", "problem": 23, "user": "4f53fa55e4b0a7574ea717d2"}, {"code": "into ()", "problem": 23, "user": "4f554416e4b0a7574ea717f9"}, {"code": "reduce #(concat [%2] %1) []", "problem": 23, "user": "4f50d933e4b03ad3f0c10d11"}, {"code": "reduce #(concat (list %2) %) '()", "problem": 23, "user": "4eec82fe535d93acb0a668ae"}, {"code": "(fn [l]\n  (let\n    [foo\n      (fn [old-list new-list] \n        (cond\n          (empty? old-list)  new-list\n          (list? new-list) (recur (subvec old-list 1) (conj  new-list (first old-list)))\n          :else (recur (pop old-list) (conj new-list (peek old-list)) )))  ]\n    (cond\n      (vector? l)   (foo l [])\n      :else (foo (vec l) '()))))", "problem": 23, "user": "4ef19836535dced4c769f217"}, {"code": "(fn [ys ]\n  (letfn [\n    (rev [xs acc] (if (= xs '()) acc (recur (rest xs) (cons (first xs) acc ))))]\n  (rev ys [])))", "problem": 23, "user": "4ed60c9c535d10e5ff6f52dd"}, {"code": "(fn [xs] (into '() xs))", "problem": 23, "user": "4f5155a3e4b03ad3f0c10d1b"}, {"code": "(fn rev [s] (if (empty? s) \n                s \n                (conj (rev (butlast s)) \n                      (last s))))", "problem": 23, "user": "4f567cdbe4b0a7574ea71824"}, {"code": "(fn myfn [v]\n  (if (= nil (peek (vec v)))\n    nil\n    (concat (myfn (rest v)) [(first v)])\n  )\n)", "problem": 23, "user": "4f566178e4b0a7574ea71820"}, {"code": "(fn rev [s] \n  (letfn [\n    (rev0 [a b] \n      (if (empty? a) b \n        (rev0 (rest a) (cons (first a) b))))]\n    (rev0 s nil)\n))", "problem": 23, "user": "4f569218e4b0a7574ea71826"}, {"code": "(fn [seq] (reduce #(cons %2 %1) [] seq))", "problem": 23, "user": "4f5694cae4b0a7574ea71827"}, {"code": "(fn [x] (into '() x))", "problem": 23, "user": "4f5612f9e4b0a7574ea71812"}, {"code": "#(reduce conj (list) %)", "problem": 23, "user": "4eca2cea535d6d7199dd3702"}, {"code": "(fn [seq] (reduce (fn [s i] (cons i s)) [] seq))", "problem": 23, "user": "4f559d2ce4b0a7574ea71808"}, {"code": "(fn [coll] (reduce conj () coll))", "problem": 23, "user": "4f57b523e4b0a7574ea7183c"}, {"code": "#(reduce (fn [x y] (cons y x)) [] %)", "problem": 23, "user": "4f565bebe4b0a7574ea7181e"}, {"code": "(fn myrev [S]\n   (if (empty? S)\n     ()\n     (conj (vec (myrev (rest S))) (first S) )\n     )\n   )", "problem": 23, "user": "4f554f4de4b0a7574ea717fa"}, {"code": "(fn f ([l] (f l []))\n([l r] (cond (== (count l) 0) r :else\n(f (rest l) (cons (first l) r)))))", "problem": 23, "user": "4f580a9fe4b0a7574ea71844"}, {"code": "(fn [s] (reduce conj '() s))", "problem": 23, "user": "4f5595d4e4b0a7574ea71805"}, {"code": "(fn [seq]\n  (reduce (fn[a,b] (cons b a)) () seq)\n)", "problem": 23, "user": "4e8b1fa2535d65386fec2118"}, {"code": "#(into '() %1)", "problem": 23, "user": "4f29afc7e4b0d6649770a02e"}, {"code": "reduce conj ()", "problem": 23, "user": "4ea00469535d7eef3080729d"}, {"code": "#(reduce (fn [a b] (cons b a)) [] %)", "problem": 23, "user": "4f569a3ce4b0a7574ea71828"}, {"code": "into '()", "problem": 23, "user": "4f54e6f8e4b0a7574ea717ef"}, {"code": "#(into () %)", "problem": 23, "user": "4f50be5de4b03ad3f0c10d0c"}, {"code": "#(into () %)", "problem": 23, "user": "4f4be1cae4b03ad3f0c10c81"}, {"code": "#(into () %)", "problem": 23, "user": "4f500769e4b03ad3f0c10cf8"}, {"code": "#(into () %)", "problem": 23, "user": "4f4feb95e4b03ad3f0c10cf0"}, {"code": "#(loop [xs % acc ()]\n  (if (empty? xs)\n    acc\n    (recur \n      (rest xs) \n      (cons (first xs) acc))))", "problem": 23, "user": "4f58de86e4b0a7574ea7185b"}, {"code": "reduce conj ()", "problem": 23, "user": "4f590356e4b0a7574ea71860"}, {"code": "#(into () %)", "problem": 23, "user": "4f5b57e9e4b0030a34fb2b02"}, {"code": "#(loop [newseq ()\n        oldseq %]\n  (if (empty? oldseq)\n    newseq\n    (recur (cons (first oldseq) newseq) (rest oldseq))))", "problem": 23, "user": "4f541874e4b0a7574ea717d8"}, {"code": "(fn [s]\n  (loop [result [], source s]\n    (if\n      (empty? source)\n      result\n      (recur\n        (conj result (last source))\n        (butlast source)))))", "problem": 23, "user": "4f5c0549e4b0030a34fb2b1a"}, {"code": "(fn reverso [initial-x]\n  (loop [x initial-x y ()]\n    (if (not (empty? x))\n      (recur (rest x) (conj y (first x)))\n      y)))", "problem": 23, "user": "4f515bd3e4b03ad3f0c10d1f"}, {"code": "(fn do-it [x]\n  (if (seq x)\n    (conj (do-it (rest x)) (first x))\n    []))", "problem": 23, "user": "4f5c344be4b0030a34fb2b1d"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4f5c1978e4b0030a34fb2b1b"}, {"code": "#(letfn [(_reverse_ [coll rcoll]\n          (if (empty? coll)\n            rcoll\n              (recur (rest coll)\n                     (cons (first coll) rcoll))))]\n  (_reverse_ % '()))", "problem": 23, "user": "4f5cc3b8e4b0030a34fb2b2b"}, {"code": "(fn [s] (into () s))", "problem": 23, "user": "4daf4491edd6309eace4d177"}, {"code": "into ()", "problem": 23, "user": "4f57a153e4b0a7574ea7183a"}, {"code": "(fn myrev [s]\n  (if (empty? s) [] (conj (myrev (rest s)) (first s))))", "problem": 23, "user": "4f036fb3535dcb61093f6ac8"}, {"code": "(fn [c] (reduce conj '() c))", "problem": 23, "user": "4f5eda39e4b0030a34fb2b56"}, {"code": "into ()", "problem": 23, "user": "4ea84f48535d7eef308072f6"}, {"code": "apply conj nil", "problem": 23, "user": "4f6010e7e4b0defedf855fa1"}, {"code": "(fn [coll]\r\n  (reduce conj () coll))", "problem": 23, "user": "4ec8dc17535d6d7199dd36f7"}, {"code": "(fn [s]\n  (loop [coll s revd []]\n    (if (seq coll)\n      (recur (next coll)\n        (cons (first coll) revd))\n      revd)))", "problem": 23, "user": "4f604bdee4b0defedf855fa7"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4f5edeb0e4b0030a34fb2b57"}, {"code": "#(loop [input % output (list)] (if (seq input) (recur (rest input) (conj output (first input))) output))", "problem": 23, "user": "4f608f0ee4b0defedf855faa"}, {"code": "(fn rvs [x]\n  ((fn rvs2 [x acc]\n    (if (empty? x)\n      acc\n      (rvs2 (rest x) (conj acc (first x))))) x nil))", "problem": 23, "user": "4f04256d535dcb61093f6ba7"}, {"code": "(fn [sq]\n  (map #(nth (vec sq) %)\n    (range (- (count sq) 1)\n      -1 -1)))", "problem": 23, "user": "4f60ed88e4b0defedf855fb2"}, {"code": "(fn foo\n  ([x]\n    (if (or (= x nil) (= x []))\n      []\n      (conj (foo (rest x)) (first x))\n    )\n  )\n)", "problem": 23, "user": "4f611e0ee4b0defedf855fb8"}, {"code": "#(reduce (fn [acc x] (conj acc x)) '() %)", "problem": 23, "user": "4e7f5a0b535db966e863cc41"}, {"code": "(fn a [s]\n  (if (empty? s)\n    '()\n    (concat (a (rest s)) (cons (first s) nil))))", "problem": 23, "user": "4f03fb59535dcb61093f6b89"}, {"code": "(partial reduce conj '())", "problem": 23, "user": "4f614976e4b0defedf855fbb"}, {"code": "reduce conj ()", "problem": 23, "user": "4f6160a7e4b0defedf855fbe"}, {"code": "(fn [arg]\n  (loop [xs (seq arg)\n         acc ()]\n    (if (empty? xs)\n      acc\n      (recur (rest xs) (conj acc (first xs))))))", "problem": 23, "user": "4ed68752535d10e5ff6f52e2"}, {"code": "(fn [s]\n  (reduce conj () s))", "problem": 23, "user": "4f611127e4b0defedf855fb4"}, {"code": "(fn [x] (into [] (reduce #(cons %2 %1) [] x)))", "problem": 23, "user": "4f547d2ce4b0a7574ea717e3"}, {"code": "into '()", "problem": 23, "user": "4f61f05ae4b0defedf855fc9"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "4f62b29ce4b0defedf855fd9"}, {"code": "(fn [lst]\n  (loop [inp lst acc ()]\n     (if (empty? inp)\n        acc\n     (recur (rest inp) (conj acc (first inp))))))", "problem": 23, "user": "4f629697e4b0defedf855fd6"}, {"code": "(fn [collection]\n  (loop [coll collection rev-coll '()]\n(if-not (seq coll) rev-coll\n(recur (rest coll) (cons (first coll) rev-coll)))))", "problem": 23, "user": "4f57c913e4b0a7574ea7183f"}, {"code": "#(loop [l1 %\n        l2 '()]\n  (if (empty? l1)\n    l2\n    (recur (rest l1) (cons (first l1) l2))))", "problem": 23, "user": "4f62ef0ce4b0defedf855fdc"}, {"code": "(fn [sequence]\n  (loop [s sequence\n         a ()]\n    (if (not (seq s))\n      a\n      (recur (rest s) (conj a (first s))))))", "problem": 23, "user": "4dc0f7ff535d020aff1edf82"}, {"code": "(fn rev [s] (when s (concat (rev (next s)) [(first s)])))", "problem": 23, "user": "4f58fe71e4b0a7574ea7185f"}, {"code": "(fn [col]\n  (reduce conj '() col))", "problem": 23, "user": "4f61be97e4b0defedf855fc5"}, {"code": "(fn [l]\n  (loop [in l res []]\n    (if (empty? in)\n    res\n    (recur (drop-last in) (conj res (last in)))\n    )\n  )\n)", "problem": 23, "user": "4f63777be4b0defedf855fe4"}, {"code": "(partial reduce conj '())", "problem": 23, "user": "4f651f66e4b07046d9f4ef3c"}, {"code": "#(reduce (fn [x y] (cons y x)) (empty %) %)", "problem": 23, "user": "4f4d7b8fe4b03ad3f0c10ca9"}, {"code": "(fn rev-seq [arg]\n  (if (empty? (rest arg))\n    arg\n    (concat (rev-seq (rest arg))\n            (list (first arg)))))", "problem": 23, "user": "4f652432e4b07046d9f4ef3d"}, {"code": "(fn [coll]\n  (loop [c coll x '()]\n   (if (seq c)\n     (recur (rest c) (cons (first c) x))\n     x)))", "problem": 23, "user": "4f65eec7e4b07046d9f4ef48"}, {"code": "(fn rev [coll]\n  (if (= (last coll) nil)\n    []\n    (conj (rev (rest coll)) (first coll))))", "problem": 23, "user": "4f65f537e4b07046d9f4ef4a"}, {"code": "(fn [coll] (reduce conj () coll))", "problem": 23, "user": "4f36b4a4e4b0e243712b1ecc"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "4f65e3e9e4b07046d9f4ef47"}, {"code": "#(loop [n nil o %]\n  (if (empty? o)\n    n\n    (recur (conj n (first o)) (rest o))))", "problem": 23, "user": "4f6688d6e4b07046d9f4ef5d"}, {"code": "reduce (fn [accum val] (conj accum val)) ()", "problem": 23, "user": "4f51697ae4b03ad3f0c10d22"}, {"code": "#(into () %)", "problem": 23, "user": "4f4e147ae4b03ad3f0c10cb9"}, {"code": "reduce conj '()", "problem": 23, "user": "4f6845d2e4b07046d9f4ef74"}, {"code": "(fn [c]\r\n  (loop [c c acc (empty c)]\r\n    (if (empty? c)\r\n      acc\r\n      (recur (rest c) (cons (first c) acc)))))", "problem": 23, "user": "4f6a36eee4b07046d9f4ef99"}, {"code": "#(into () %)", "problem": 23, "user": "4f68d3ebe4b07046d9f4ef7d"}, {"code": "(fn [l]\n  (loop [l l acc []]\n    (if (empty? l)\n        acc\n        (recur (butlast l) (conj acc (last l))))))", "problem": 23, "user": "4e568873535d8a8b8723a283"}, {"code": "reduce (fn [a b] (conj a b)) ()", "problem": 23, "user": "4e2a34c6535deb9a81d77f00"}, {"code": "#(loop [rev '() fwd %1]\n  (if (empty? fwd)\n    rev\n    (recur (cons (first fwd) rev) (rest fwd)))\n)", "problem": 23, "user": "4ddc56e1535d02782fcbea04"}, {"code": "(fn [coll] (reduce conj () coll))", "problem": 23, "user": "4f6b4237e4b07046d9f4efa9"}, {"code": "#(into '() %)", "problem": 23, "user": "4f6543cae4b07046d9f4ef41"}, {"code": "(fn [col]\n  (loop [item (last (vec col)) c (vec col) rc []]\n    (if (= (count c) 0)\n        rc\n        (recur (last (pop c)) (pop c) (conj rc item))))\n)", "problem": 23, "user": "4f1427f8535d64f603146435"}, {"code": "(fn [s]\n  (reduce conj () s))", "problem": 23, "user": "4ed2a31c535d44c135fd68db"}, {"code": "into ()", "problem": 23, "user": "4f68c485e4b07046d9f4ef7c"}, {"code": "#(reduce (fn [x y] (cons y x)) [] %)", "problem": 23, "user": "4ef2da4f535dced4c769f224"}, {"code": "reduce (fn [x y] (conj x y)) '()", "problem": 23, "user": "4f6c6d69e4b07046d9f4efba"}, {"code": "into ()", "problem": 23, "user": "4f6a2ff2e4b07046d9f4ef98"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "4f6d9d7ee4b07046d9f4efcd"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4f584064e4b0a7574ea71846"}, {"code": "#(map last (sort-by first > (map-indexed (fn [idx itm] [idx itm]) %)))", "problem": 23, "user": "4f69f34fe4b07046d9f4ef90"}, {"code": "(fn mirv [s]\r\n  (if (empty? s)\r\n    s\r\n    (concat (mirv (rest s))\r\n            (list (first s)))))", "problem": 23, "user": "4f6b1457e4b07046d9f4efa6"}, {"code": "(fn rev [x]\n  (if (= 1 (count x))\n    x\n    (cons (last x) (rev (butlast x)))))", "problem": 23, "user": "4f52a134e4b03ad3f0c10d41"}, {"code": "into ()", "problem": 23, "user": "4f6fbb68e4b07046d9f4efeb"}, {"code": "(fn [s] (reduce (fn [a b] (cons b a)) [] s))", "problem": 23, "user": "4f70183ee4b07046d9f4eff3"}, {"code": "(fn [x]\n  (reduce conj () x))", "problem": 23, "user": "4f6fd95fe4b07046d9f4efee"}, {"code": "(fn rev [x] (if (empty? x) [] (conj (rev (rest x)) (first x))))", "problem": 23, "user": "4f706cc3e4b07046d9f4eff7"}, {"code": "reduce conj (list)", "problem": 23, "user": "4f6ba647e4b07046d9f4efaf"}, {"code": "#(into () %)", "problem": 23, "user": "4f6fe5e4e4b07046d9f4efef"}, {"code": "(fn rev [seq] \n  (loop [oldseq seq, newseq (empty seq)]\n    (if (empty? oldseq)\n      newseq\n      (recur (rest oldseq) (cons (first oldseq) newseq)))))", "problem": 23, "user": "4f70afb8e4b07046d9f4effb"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4f71347ae4b07046d9f4f009"}, {"code": "reduce conj ()", "problem": 23, "user": "4f6e7073e4b07046d9f4efd8"}, {"code": "(fn [sq]\r\n  (reduce conj '() sq))", "problem": 23, "user": "4f71db68e4b07046d9f4f015"}, {"code": "(fn[sq]\n  (loop [s sq lst (list)]\n    (if (empty? s)\n      lst\n      (recur (rest s) (conj lst (first s))))))", "problem": 23, "user": "4f6236abe4b0defedf855fcd"}, {"code": "reduce #(cons %2 %1) []", "problem": 23, "user": "4f713878e4b07046d9f4f00a"}, {"code": "#(apply conj '() %)", "problem": 23, "user": "4f71f782e4b07046d9f4f018"}, {"code": "into ()", "problem": 23, "user": "4f6f777de4b07046d9f4efe5"}, {"code": "#(loop [xs %1\n        nxs []]\n          \n          (if (empty? xs) (vec nxs)\n            (recur (rest xs) (cons (first xs) nxs))))", "problem": 23, "user": "4f724e56e4b07046d9f4f027"}, {"code": "(fn [coll]\n  (loop [ret []\n    coll coll]\n    (if (empty? coll)\n      ret\n      (recur (cons (first coll) ret) (rest coll)))))", "problem": 23, "user": "4f463dfde4b0d56e7bb92b99"}, {"code": "(fn [initial]\n  ( loop [x [] y initial] \n    (if (empty? y) \n      x \n      (recur (cons (first y) x) (rest y) ) )\n  )\n)", "problem": 23, "user": "4f7216d4e4b07046d9f4f01c"}, {"code": "(fn my-reverse [coll]\n  (if (not-empty coll)\n    (concat (my-reverse (rest coll)) (list (first coll)))\n    '()))", "problem": 23, "user": "4f7251eee4b07046d9f4f02e"}, {"code": "#(into () %)", "problem": 23, "user": "4f725201e4b07046d9f4f02f"}, {"code": "into ()", "problem": 23, "user": "4e81e93d535db62dc21a62bf"}, {"code": "reduce #(cons %2 %1) []", "problem": 23, "user": "4f7207d3e4b07046d9f4f019"}, {"code": "(fn [s]\n  (reduce #(conj %1 %2) () s))", "problem": 23, "user": "4f726dd2e4b07046d9f4f034"}, {"code": "(fn revr [seqx]\n   (reduce #(conj %1 %2) '() seqx))", "problem": 23, "user": "4f617f66e4b0defedf855fc0"}, {"code": "#(into '() %)", "problem": 23, "user": "4f724d40e4b07046d9f4f024"}, {"code": "#(take (count %)((fn f [x] (cons (last x) (lazy-seq(f (butlast x)))) )%))", "problem": 23, "user": "4f4bd422e4b03ad3f0c10c7e"}, {"code": "#(into '() %)", "problem": 23, "user": "4f71ba6ee4b07046d9f4f012"}, {"code": "(fn f [s] (\n  (fn g [f b] (\n    if (= 0 (count f))\n      b\n      (\n        \n        g (rest f) (cons (first f) b)\n      ) \n  ))\n  s '()\n))", "problem": 23, "user": "4f72e09de4b07046d9f4f03b"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4e59f00b535d8a8b8723a2a5"}, {"code": "reduce conj nil", "problem": 23, "user": "4f734e93e4b07046d9f4f043"}, {"code": "reduce conj '()", "problem": 23, "user": "4f710c28e4b07046d9f4f005"}, {"code": "(fn f [x] (\n  if (= (count x) 1)\n    x\n    (concat (f (rest x)) [(first x)])\n))", "problem": 23, "user": "4f73054fe4b07046d9f4f03e"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4f28eb85e4b0d6649770a01d"}, {"code": "(fn my-reverse\n  ([v] (my-reverse v []))\n  ([v n] \n    (if (empty? v) n\n      (my-reverse (drop-last v) (conj n (last v))))))", "problem": 23, "user": "4f74fe77e4b0fbe0118ec552"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4dafba62838c986e7473b5f7"}, {"code": "(fn [coll] (into () coll))", "problem": 23, "user": "4f7431d2e4b044e54cd9a8f7"}, {"code": "#(loop [list %1 revList nil] \n  (if (empty? list) \n    revList\n    (recur (rest list) (cons (first list) revList))))", "problem": 23, "user": "4f6d09c5e4b07046d9f4efc3"}, {"code": "into ()", "problem": 23, "user": "4e6961f0535d8ccf87e9fe9b"}, {"code": "reduce conj '()", "problem": 23, "user": "4f73f78de4b044e54cd9a8f3"}, {"code": "#(loop [x % out '()] (if (= (count x) 0) out (recur (rest x) (concat (seq [(first x)]) out))))", "problem": 23, "user": "4f75f498e4b0fbe0118ec567"}, {"code": "(fn [s]\n  (loop [r () s s]\n    (if (seq s) (recur (cons (first s) r) (rest s)) r)))", "problem": 23, "user": "4f7774a6e4b0fbe0118ec57f"}, {"code": "#(into () %)", "problem": 23, "user": "4f77eb86e4b0fbe0118ec585"}, {"code": "(fn myf [s]\n  (if (= 2 (count s))\n\t\t[(last s) (first s)]\n\t\t(cons (last s)(myf (butlast s)) )))", "problem": 23, "user": "4f77dc7be4b0fbe0118ec584"}, {"code": "(fn ___\n  ([x] (___ x nil))\n  ([x acc]\n    (if (empty? x) acc\n     (recur (rest x) (conj acc (first x)))\n    )\n  )\n)", "problem": 23, "user": "4f650efee4b07046d9f4ef39"}, {"code": "into ()", "problem": 23, "user": "4f790ad5e4b0fbe0118ec58d"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4f761a78e4b0fbe0118ec56c"}, {"code": "into()", "problem": 23, "user": "4f7963b8e4b0fbe0118ec58f"}, {"code": "#(reduce (fn [x y] (concat (list y) x ) ) () % )", "problem": 23, "user": "4f725466e4b07046d9f4f030"}, {"code": "(fn xx [a] (if (= a []) []  (conj ( xx (rest a)) (first a))))", "problem": 23, "user": "4f751a54e4b0fbe0118ec555"}, {"code": "#(into () %)", "problem": 23, "user": "4f6ba7bce4b07046d9f4efb0"}, {"code": "(fn\n  [sq]\n  (loop [res []\n    osq (seq sq)]\n    (if (seq osq)\n      (recur (cons (first osq) res)\n(rest osq))\nres)))", "problem": 23, "user": "4f74fb49e4b0fbe0118ec551"}, {"code": "(fn [seq]\n   (loop [rem seq, acc '()]\n      (if (empty? rem)\n        acc\n        (recur (rest rem)(cons (first rem) acc)))))", "problem": 23, "user": "4f7a9416e4b06e829148e19b"}, {"code": "(fn testa [l] \n  (if (== (count l) 0)\n  nil\n  (concat  (conj nil (last l)) (testa (butlast l)))\n))", "problem": 23, "user": "4f74a617e4b044e54cd9a905"}, {"code": "#(into () %)", "problem": 23, "user": "4f7b1c63e4b06e829148e19e"}, {"code": "(fn [x] (reduce #(conj %1 %2) '() x))", "problem": 23, "user": "4f7b2cb5e4b06e829148e19f"}, {"code": "reduce conj '()", "problem": 23, "user": "4f7b3d53e4b06e829148e1a0"}, {"code": "(fn ([arg] (reduce conj () arg)))", "problem": 23, "user": "4f7d065ce4b06e829148e1b9"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4f7d5328e4b06e829148e1bf"}, {"code": "reduce (fn [u v] (concat [v] u)) []", "problem": 23, "user": "4f7d75a2e4b06e829148e1c2"}, {"code": "#(into () %)", "problem": 23, "user": "4f7d91e6e4b06e829148e1c3"}, {"code": "into ()", "problem": 23, "user": "4f7b6b90e4b06e829148e1a4"}, {"code": "(fn myrev [sequence]\n  (when (> (count sequence) 0)\n    (cons (last sequence) (myrev (butlast sequence)))))", "problem": 23, "user": "4f70bcf9e4b07046d9f4effe"}, {"code": "(fn [l]\n  (apply conj (list (first l)) (rest l)))", "problem": 23, "user": "4f7e29dde4b06e829148e1ca"}, {"code": "(fn [coll] (\n  reduce (fn [rev el] (cons el rev)) '() coll))", "problem": 23, "user": "4f7e33a6e4b06e829148e1cb"}, {"code": "(fn [x] (into () x))", "problem": 23, "user": "4f7f0827e4b06e829148e1d5"}, {"code": "#(loop [n (empty %) o %]\n  (if (empty? o)\n    n\n    (recur (into [(first o)] n) (rest o))))", "problem": 23, "user": "4f7c4eb7e4b06e829148e1af"}, {"code": "(fn r \n  ([lst] (r lst ()))\n  ([lst-a lst-b]\n    (if (empty? lst-a)\n        lst-b\n        (recur (rest lst-a) (cons (first lst-a) lst-b)))))", "problem": 23, "user": "4f7fc9a1e4b033992c121bee"}, {"code": "#(into () %)", "problem": 23, "user": "4f7d25b4e4b06e829148e1ba"}, {"code": "#((fn f [[x & r]]\n  (if r (conj (f r) x)[x])\n  ) (seq %))", "problem": 23, "user": "4f7869c2e4b0fbe0118ec589"}, {"code": "(fn [xs] (reduce (fn [ys y] (cons y ys)) [] xs))", "problem": 23, "user": "4f1ae082535d64f603146470"}, {"code": "(partial reduce #(cons %2 %1) '())", "problem": 23, "user": "4f7f9665e4b033992c121bea"}, {"code": "(fn m-reverse [items]\n  (loop [its items result ()]\n    (if (empty? its)\n      result\n      (recur (rest its) (conj result (first its))))))", "problem": 23, "user": "4f81fcbfe4b033992c121c03"}, {"code": "(fn foo [x] (if (empty? x) \r\nnil\r\n(concat (foo (rest x)) (list (first x)))))", "problem": 23, "user": "4dca56b6535d5973398f9287"}, {"code": "(fn [sq]\n  (loop [v (vec sq)\n         acc []]\n    (if (empty? v)\n      acc\n      (recur (pop v) (conj acc (peek v))))))", "problem": 23, "user": "4f82e14be4b033992c121c0c"}, {"code": "(fn my-reverse [xs] \n  (if (empty? xs)\n      []\n      (conj (my-reverse (rest xs))\n            (first xs))))", "problem": 23, "user": "4f8345c6e4b033992c121c1b"}, {"code": "into ()", "problem": 23, "user": "4f83ee95e4b033992c121c26"}, {"code": "#(into () %)", "problem": 23, "user": "4f83e712e4b033992c121c25"}, {"code": "(fn [sq] \n  (reduce conj () sq))", "problem": 23, "user": "4f82f1b9e4b033992c121c0f"}, {"code": "(fn [seq] ((fn [s r]\n  (if (empty? s) \n    r\n    (recur (butlast s) (concat r (list (last s)))))) \nseq (empty seq)))", "problem": 23, "user": "4f30aee5e4b0d6649770a07d"}, {"code": "reduce #(cons %2 %1) nil", "problem": 23, "user": "4f7c7ed7e4b06e829148e1b4"}, {"code": "reduce conj '()", "problem": 23, "user": "4f7b6f12e4b06e829148e1a5"}, {"code": "(fn revs [x] (if (= (count x) 1) x (concat (revs (rest x)) (list (first x)))))", "problem": 23, "user": "4f84f6c3e4b033992c121c3d"}, {"code": "(fn rev [vect] \n  (if (= (count vect) 1)\n    (vector (first vect))\n    (conj (rev (rest vect)) (first vect))\n  )\n)", "problem": 23, "user": "4f84400de4b033992c121c2e"}, {"code": "(fn [seq]\n  (reduce conj () seq))", "problem": 23, "user": "4f8490fae4b033992c121c34"}, {"code": "reduce #(cons %2 %1) []", "problem": 23, "user": "4f825f86e4b033992c121c07"}, {"code": "(fn [coll] (reduce conj '() coll))", "problem": 23, "user": "4e526cc4535d302ef430da74"}, {"code": "(fn reverse-seq [seq]\n  (if (butlast seq)\n    (conj (reverse-seq (butlast seq)) (last seq))\n    (list (last seq))))", "problem": 23, "user": "4f856248e4b033992c121c43"}, {"code": "#(into () %)", "problem": 23, "user": "4f859146e4b033992c121c46"}, {"code": "; A couple means to solve this problem.  I started\n; out trying loops and recursion until I learned\n; that conj will reverse a list as it is built.\n; The into function uses conj\n\n;(fn [s]\n;  (into '() s))\n\n(fn [s]\n  (reduce conj '() s))", "problem": 23, "user": "4f831fd3e4b033992c121c17"}, {"code": "(fn [x] (reduce conj '() x))", "problem": 23, "user": "4f8592e6e4b033992c121c47"}, {"code": "#(reduce conj '() %1)", "problem": 23, "user": "4f8544e0e4b033992c121c40"}, {"code": "(fn [s] (into () s))", "problem": 23, "user": "4ed2b337535d44c135fd68de"}, {"code": "#(reduce (fn [x y] (concat [y] x)) [] %)", "problem": 23, "user": "4f85b7b5e4b033992c121c49"}, {"code": "into ()", "problem": 23, "user": "4f85d497e4b033992c121c4b"}, {"code": "into ()", "problem": 23, "user": "4f7c2ac4e4b06e829148e1ad"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4dc78527535d8a4b2fd7428f"}, {"code": "(fn [x] \n    (map (fn [l] (nth (seq x) l)) \n        (range (- (count x) 1) -1 -1)))", "problem": 23, "user": "4f85ef29e4b033992c121c4d"}, {"code": "(fn [s]\n  (let [s- (seq s)\n        s-len (- (count s-) 1)]\n    (map-indexed\n     (fn [idx itm]\n       (nth s- (- s-len idx)))\n     s-)))", "problem": 23, "user": "4f856171e4b033992c121c42"}, {"code": "#(loop [coll % acc []]\n  (if (empty? coll)\n    acc\n    (recur (rest coll) (cons (first coll) acc))))", "problem": 23, "user": "4f33a668e4b0d6649770a09d"}, {"code": "(fn [col] (reduce conj '() col))", "problem": 23, "user": "4f83665ee4b033992c121c1c"}, {"code": "#(into () %)", "problem": 23, "user": "4f8843aae4b033992c121c61"}, {"code": "(fn [s] (reduce conj () s))", "problem": 23, "user": "4f7ab8c7e4b06e829148e19c"}, {"code": "(fn [x] (reduce (fn [a b] (cons b a)) '() x))", "problem": 23, "user": "4f88942be4b033992c121c6a"}, {"code": "(fn rv [sq]\n(let [fst (first sq)\n          rst (rest sq)]\n\t    (if (empty? rst)\n\t\t(list fst)\n\t\t(concat (rv rst) (list fst)))))", "problem": 23, "user": "4f80db02e4b033992c121bf9"}, {"code": "(fn [lst] (map (fn [idx] (nth (seq lst) idx)) (range (dec (count lst)) (dec 0) -1)))", "problem": 23, "user": "4f88f57ae4b033992c121c73"}, {"code": "(fn r [b] (if (empty? b) b (concat (r (rest b)) [(first b)])))", "problem": 23, "user": "4f89311ce4b033992c121c78"}, {"code": "(fn [x]\n  (reduce conj () x))", "problem": 23, "user": "4f891abde4b033992c121c77"}, {"code": "reduce conj '()", "problem": 23, "user": "4f74a4fbe4b044e54cd9a901"}, {"code": "into ()", "problem": 23, "user": "4f88ae35e4b033992c121c6d"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4e10a14d535d04ed9115e7c1"}, {"code": "#(reduce (fn [c x] (cons x c)) '() %)", "problem": 23, "user": "4f8ab084e4b02e764a0a5171"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4f8aa2f9e4b02e764a0a516f"}, {"code": "#(into () %)", "problem": 23, "user": "4f0b0116535d0136e6c222fd"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4f8b08d2e4b02e764a0a5177"}, {"code": "#(into () %)", "problem": 23, "user": "4f57141ee4b0a7574ea71830"}, {"code": "(fn myrev [s] (if (empty? s) nil (cons (last s) (myrev (butlast s)))))", "problem": 23, "user": "4f8b56dae4b02e764a0a517e"}, {"code": "(fn foo [x]\n  (if (empty? x) x (concat (foo (rest x)) (list (first x)))))", "problem": 23, "user": "4f8b20fce4b02e764a0a5178"}, {"code": "reduce (fn [coll item] (cons item coll)) '()", "problem": 23, "user": "4ecdf94a535d23f03622770b"}, {"code": "(fn [seq]\r\n  (loop [osq seq\r\n         sq nil]\r\n         (if (empty? osq)\r\n            sq\r\n            (recur (rest osq) (cons (first osq) sq)))))", "problem": 23, "user": "4f8aa1c1e4b02e764a0a516e"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4f8bbb27e4b02e764a0a5182"}, {"code": "reduce conj '()", "problem": 23, "user": "4f8c3697e4b02e764a0a518d"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "4f889070e4b033992c121c67"}, {"code": "#(into () %)", "problem": 23, "user": "4f559503e4b0a7574ea71804"}, {"code": "(fn [l]\n  (let [n (count l)]\n    (let [rev (map #(- (- n 1) %) (range n))]\n      (map #(nth (seq l) %) rev))))", "problem": 23, "user": "4f8c5f4fe4b02e764a0a5198"}, {"code": "(fn myReverse [lst]\n  (if (empty? lst)\n    []\n    (cons (last lst) (myReverse (butlast lst)))\n  )\n)", "problem": 23, "user": "4f718ce5e4b07046d9f4f00d"}, {"code": "(fn my-reverse\n  ([x]\n    (my-reverse (rest x) (vector (first x))))\n  ([x r]\n    (if (empty? x)\n      r\n      (my-reverse\n        (rest x)\n        (cons (first x) r)))))", "problem": 23, "user": "4f8d340be4b02e764a0a51a8"}, {"code": "(fn [x] (loop \n  [acc [] \n    x x]\n    (if (empty? x) acc\n      (recur (conj acc (last x)) (butlast x)))))", "problem": 23, "user": "4f748b54e4b044e54cd9a8fa"}, {"code": "(fn rev [x]\n  (if (first x)\n      (concat (rev (rest x)) (list (first x)))\n      nil))", "problem": 23, "user": "4f8e155ae4b0d4e659cdde63"}, {"code": "into ()", "problem": 23, "user": "4f8db862e4b02e764a0a51b2"}, {"code": "(fn t [x] (if (not (nil? x))\r\n        (concat (t (next x)) (list (first x)) )))", "problem": 23, "user": "4f8dbae2e4b02e764a0a51b3"}, {"code": "(fn [items] (reduce #(conj %1 %2) '() items))", "problem": 23, "user": "4f689a17e4b07046d9f4ef77"}, {"code": "(fn [y] \n  (for [x (range (dec (count y)) -1 -1)] \n    (nth (seq y) x)))", "problem": 23, "user": "4f85a75ce4b033992c121c48"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "4f8ea1f7e4b0d4e659cdde69"}, {"code": "(fn [s]\n  (let [rs (loop [s0 (seq s)  s1 ()]\n            (if (empty? s0) s1\n              (recur (rest s0) (conj s1 (first s0)))))]\n    (if (vector? s)\n      (vec rs)\n      rs)))", "problem": 23, "user": "4f90e238e4b0dcca54ed6c94"}, {"code": "#(loop [c % acc ()] (if (empty? c) acc (recur (rest c) (cons (first c) acc))))", "problem": 23, "user": "4f9120d8e4b0dcca54ed6c96"}, {"code": "(fn rev [s]\n  (reduce conj () s))", "problem": 23, "user": "4f91a38ae4b0dcca54ed6c9f"}, {"code": "#(reduce (fn [xs n] (cons n xs)) '() %)", "problem": 23, "user": "4f92709de4b0dcca54ed6cad"}, {"code": "reduce #(cons %2 %1) []", "problem": 23, "user": "4f6511eee4b07046d9f4ef3a"}, {"code": "(fn [s]\n     (reduce #(cons %2 %1) [] s))", "problem": 23, "user": "4f91fd31e4b0dcca54ed6ca8"}, {"code": "apply conj ()", "problem": 23, "user": "4f92b194e4b0dcca54ed6cb1"}, {"code": "reduce (fn [a b] (cons b a)) ()", "problem": 23, "user": "4f8ac2bde4b02e764a0a5172"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "4f935f94e4b0dcca54ed6cbb"}, {"code": "into ()", "problem": 23, "user": "4f727023e4b07046d9f4f035"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "4f8bb50ce4b02e764a0a5181"}, {"code": "(fn [x]\n   (map\n     (fn [y]\n       (nth (seq x) y))\n     (range (- (count x) 1) -1 -1)))", "problem": 23, "user": "4f946be7e4b0dcca54ed6cc3"}, {"code": "(fn [l] (map #(nth (seq l) (- (count l) (inc %))) (range (count l))))", "problem": 23, "user": "4f94dab7e4b0dcca54ed6cc6"}, {"code": "(partial reduce conj ())", "problem": 23, "user": "4f3fb586e4b0e243712b1f9c"}, {"code": "(fn [n] (loop [acc '() cnt n] (if (empty? cnt) acc (recur (conj acc (first cnt)) \n(rest cnt)))))", "problem": 23, "user": "4f9336ece4b0dcca54ed6cb7"}, {"code": "(fn [s]\n  ((fn [s r] \n    (if (empty? s) \n        r \n        (recur (rest s) (conj r (first s)))))\n  s ()))", "problem": 23, "user": "4f951375e4b0dcca54ed6cc8"}, {"code": "reduce conj ()", "problem": 23, "user": "4f91f5b1e4b0dcca54ed6ca7"}, {"code": ";reduce (fn [c x] (cons x c)) ()\n(fn [col] (reduce (fn [xs x] (cons x xs)) (empty col) col))", "problem": 23, "user": "4f9510b5e4b0dcca54ed6cc7"}, {"code": "(fn myrev [list]\r\n  (if (> (count list) 0)\r\n      (cons (last list) (myrev (drop-last 1 list)))\r\n      (first list)))", "problem": 23, "user": "4f9597e0e4b0dcca54ed6cd4"}, {"code": "(fn [seq]\n  (for [x (range (count seq))]\n    (get (vec seq) (- (count seq) 1 x))))", "problem": 23, "user": "4f944f60e4b0dcca54ed6cc2"}, {"code": "into ()", "problem": 23, "user": "4f954dbce4b0dcca54ed6ccd"}, {"code": "into ()", "problem": 23, "user": "4f96a5e8e4b0dcca54ed6cdf"}, {"code": "#(into () %)", "problem": 23, "user": "4f96b982e4b0dcca54ed6ce0"}, {"code": "(fn [c] (reduce #(cons %2 %1) (empty c) c))", "problem": 23, "user": "4e778d36535d324fb2983d71"}, {"code": "(fn [n](\n  reduce conj () n\n))", "problem": 23, "user": "4f95a8a1e4b0dcca54ed6cd7"}, {"code": "(fn rev\n  [seq]\n    (if (not-empty seq)\n      (cons (last seq) (rev (drop-last seq)))\n    ))", "problem": 23, "user": "4f96e47ae4b0dcca54ed6ce1"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "4f890488e4b033992c121c76"}, {"code": "(fn [l] (reduce (fn [c x] (cons x c)) '() l))", "problem": 23, "user": "4f9754d4e4b0dcca54ed6ce9"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4f969214e4b0dcca54ed6cdd"}, {"code": "(fn rev [v] (if (= (count v) 0) [] (conj (rev (rest v)) (first v) )))", "problem": 23, "user": "4f9174d0e4b0dcca54ed6c9b"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "4f97d8f3e4b0dcca54ed6ced"}, {"code": "(fn my-reverse \r\n  [data]\r\n    (loop [reversed [] original data]\r\n      (if (empty? original)\r\n        reversed\r\n        (recur (cons (first original) reversed) (next original)))))", "problem": 23, "user": "4f840766e4b033992c121c27"}, {"code": "reduce (fn [a, e] (cons e a)) []", "problem": 23, "user": "4f91cca8e4b0dcca54ed6ca3"}, {"code": "(fn blah [x] (if (empty? x) nil (cons (last x) (blah (butlast x)))))", "problem": 23, "user": "4f17aa97535d64f603146456"}, {"code": "(fn [coll]\n  (loop [c coll result ()]\n    (if (empty? c) result\n        (recur (rest c) (conj result (first c))))))", "problem": 23, "user": "4f98ead0e4b0dcca54ed6cf8"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "4f991ec1e4b0dcca54ed6cfb"}, {"code": "(fn [x xs] (if (last xs)\n           (recur (conj x (last xs)) (butlast xs))\n           x)\n  ) []", "problem": 23, "user": "4f9920a3e4b0dcca54ed6cfc"}, {"code": "(fn [coll]\n  (reduce conj () coll))", "problem": 23, "user": "4f98da04e4b0dcca54ed6cf7"}, {"code": "#(into () %)", "problem": 23, "user": "4f9aa75ee4b0dcca54ed6d0d"}, {"code": "into ()", "problem": 23, "user": "4f68a9bbe4b07046d9f4ef79"}, {"code": "(fn [xs] (reduce #(conj % %2) '() xs))", "problem": 23, "user": "4f9acea6e4b0dcca54ed6d10"}, {"code": "(fn [x] (loop [lst (vec x) out '()] \n  (if (empty? lst) \n    out \n    (recur (subvec lst 1 (count lst)) \n      (cons (first lst) out)))))", "problem": 23, "user": "4f9b27d7e4b0dcca54ed6d12"}, {"code": "#(loop [acc '()\n        left %]\n    (if (empty? left)\n       acc\n       (recur (conj acc (first left)) (rest left))))", "problem": 23, "user": "4f9b3532e4b0dcca54ed6d13"}, {"code": "#(into () %)", "problem": 23, "user": "4f9b426be4b0dcca54ed6d14"}, {"code": "#(reduce conj nil %)", "problem": 23, "user": "4f9b5a1ce4b0dcca54ed6d16"}, {"code": "(fn[coll] (let [size (count coll)](map (fn[index element] (nth (seq coll) (- size index 1) ) ) (iterate inc 0) coll)))", "problem": 23, "user": "4f8e984ee4b0d4e659cdde68"}, {"code": "reduce conj ()", "problem": 23, "user": "4e897fc5535de4250bdfe493"}, {"code": "(fn [xs]\n  (loop [xs xs\n    result (empty 0)]\n(if (empty? xs)\nresult\n(recur (rest xs) (conj result (first xs))))))", "problem": 23, "user": "4f9c7b0fe4b0dcca54ed6d1c"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4f9c4b02e4b0dcca54ed6d1b"}, {"code": "into '()", "problem": 23, "user": "4f9d53f3e4b0dcca54ed6d21"}, {"code": "(fn [col]\n  (into '() col))", "problem": 23, "user": "4f9d87fce4b0dcca54ed6d24"}, {"code": "(fn mycount [xs]\n  (let [mycount2 (fn [in out]\n    (if (empty? in)\n      out\n      (recur (next in) (conj out (first in)))))]\n(mycount2 (seq xs) '())))", "problem": 23, "user": "4f9d9d89e4b0dcca54ed6d25"}, {"code": "(fn [list] (let [list (vec list)] (sort (fn [x y] (> (.indexOf list x) (.indexOf list y))) list)))", "problem": 23, "user": "4f6fd91ae4b07046d9f4efed"}, {"code": "#((fn rev [x nx] (\n  if (= (first x) nil) nx (rev (rest x) (conj nx (first x))))) % '())", "problem": 23, "user": "4f9dbe07e4b0dcca54ed6d26"}, {"code": "into '()", "problem": 23, "user": "4ee77f15535d93acb0a66868"}, {"code": "(fn my-reverse\r\n    ([s] (my-reverse s ()))\r\n    ([s r] (cond (empty? s) r\r\n  \t  :default (my-reverse (rest s) (conj r (first s))))))", "problem": 23, "user": "4f9c4080e4b0dcca54ed6d1a"}, {"code": "#(into '() %)", "problem": 23, "user": "4f9e0000e4b0dcca54ed6d2a"}, {"code": "reduce conj '()", "problem": 23, "user": "4f9907f8e4b0dcca54ed6cfa"}, {"code": "(fn [xs] (loop [xs xs result '()]\r\n            (if (empty? xs)\r\n              result\r\n              (recur (rest xs) (cons (first xs) result)))))", "problem": 23, "user": "4f9aa2a6e4b0dcca54ed6d0c"}, {"code": "into '()", "problem": 23, "user": "4f9d8083e4b0dcca54ed6d23"}, {"code": "(fn [l] (reduce conj '() l))", "problem": 23, "user": "4f9b05ade4b0dcca54ed6d11"}, {"code": "(fn [collection]\n  (reduce (fn [v element] (conj v element)) '() collection))", "problem": 23, "user": "4f9f135be4b0dcca54ed6d34"}, {"code": "(partial reduce conj ())", "problem": 23, "user": "4f969a66e4b0dcca54ed6cde"}, {"code": "into ()", "problem": 23, "user": "4f9fe2b9e4b0dcca54ed6d40"}, {"code": "(fn rvrs [l] \n  (if (= (count l) 2)\n    (cons (last l) (list (first l)))\n    (concat (rvrs (rest l)) (list (first l)))))", "problem": 23, "user": "4fa09916e4b0dcca54ed6d4e"}, {"code": "#(into () %)", "problem": 23, "user": "4fa0a4b1e4b0dcca54ed6d4f"}, {"code": "(fn [s]\n  ((fn [s acc]\n    (if (empty? s) \n      acc\n      (recur (rest s) (cons (first s) acc))\n)) s []))", "problem": 23, "user": "4fa1183fe4b0dcca54ed6d57"}, {"code": "into '()", "problem": 23, "user": "4f9ff06ce4b0dcca54ed6d41"}, {"code": "(fn r [l]\n  (if (= nil (seq l))\n'()\n(cons (last l) (seq (r (butlast l))))))", "problem": 23, "user": "4f9fe06fe4b0dcca54ed6d3f"}, {"code": "(partial reduce conj nil)", "problem": 23, "user": "4fa13cd1e4b0dcca54ed6d59"}, {"code": "into ()", "problem": 23, "user": "4f0d5338535d0136e6c22316"}, {"code": "reduce conj ()", "problem": 23, "user": "4fa11204e4b0dcca54ed6d56"}, {"code": "reduce conj '()", "problem": 23, "user": "4f956072e4b0dcca54ed6ccf"}, {"code": "(fn [s] (reduce (fn [a b] (conj a b)) '() (seq s)))", "problem": 23, "user": "4fa0b333e4b0dcca54ed6d50"}, {"code": "(fn [coll]\n  (loop [result [] acc coll]\n    (if (nil? acc)\n      result\n      (recur (conj result (last acc)) (butlast acc)))))", "problem": 23, "user": "4f9f7daae4b0dcca54ed6d37"}, {"code": "reduce conj '()", "problem": 23, "user": "4db3393e535df7e46ed9b6cc"}, {"code": "#((fn [xs ys] (if (first xs) (recur (rest xs) (concat (take 1 xs) ys)) ys)) % (empty %))", "problem": 23, "user": "4fa069c3e4b0dcca54ed6d4a"}, {"code": "(fn [coll] \n  (reduce conj () coll))", "problem": 23, "user": "4fa2b650e4b0dcca54ed6d6a"}, {"code": "(partial reduce conj ())", "problem": 23, "user": "4fa17b00e4b0dcca54ed6d5f"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4f9970b3e4b0dcca54ed6cfd"}, {"code": "reduce #(conj %1 %2) '()", "problem": 23, "user": "4fa39b3ee4b081705acca191"}, {"code": "(fn [coll]\n    (loop [coll coll\n           acc []]\n      (if (empty? coll)\n        acc\n        (recur (next coll) (cons (first coll) acc)))))", "problem": 23, "user": "4fa2fa5ee4b081705acca186"}, {"code": "#(loop [A % B '()] (if-not (zero? (count A))\n                    (recur (rest A) (conj B (first A)))\n                     B\n))", "problem": 23, "user": "4f8b27b3e4b02e764a0a5179"}, {"code": "(fn[x] (reduce #(conj %1 %2) nil x))", "problem": 23, "user": "4f82ed48e4b033992c121c0e"}, {"code": "(fn [s] (reduce #(conj %1 %2) (conj (map #(identity %) s) '())))", "problem": 23, "user": "4fa3f91fe4b081705acca196"}, {"code": "reduce #(conj %1 %2) ()", "problem": 23, "user": "4fa30027e4b081705acca187"}, {"code": "(partial reduce (fn [x y] (cons y x)) nil)", "problem": 23, "user": "4fa4ef2ee4b081705acca1a9"}, {"code": "(fn [coll](reduce conj () coll))", "problem": 23, "user": "4fa4f2f2e4b081705acca1aa"}, {"code": "#(into () %)", "problem": 23, "user": "4f9a0f71e4b0dcca54ed6d04"}, {"code": "(fn reverse_\n  ([x] (reverse_ x '()))\n  ([x y]\n    (if\n      (seq x)\n      (reverse_ (rest x) (cons (first x) y))\n      y)))", "problem": 23, "user": "4fa5406fe4b081705acca1ac"}, {"code": "(fn my-reverse\n  ([c]\n     (let [x (first c)\n           xrest (rest c)]\n     (if (not (= xrest '()))\n       (my-reverse (list x) xrest)\n       (list x))))\n  ([reversed c]\n     (let [x (first c)\n           xrest (rest c)]\n     (if (not (= xrest '()))\n       (recur (conj reversed x) xrest)\n       (conj reversed x)))))", "problem": 23, "user": "4fa27e18e4b0dcca54ed6d68"}, {"code": "reduce conj '()", "problem": 23, "user": "4fa5c8dde4b081705acca1af"}, {"code": "(partial reduce #(cons %2 %) ())", "problem": 23, "user": "4fa5ddfde4b081705acca1b1"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4f94d3a5e4b0dcca54ed6cc5"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4e707714535d5021c1a89638"}, {"code": "reduce conj '()", "problem": 23, "user": "4fa659f3e4b081705acca1b6"}, {"code": "(fn r[l]\n  (if (= l [])\n    []\n    (conj (r (rest l)) (first l)))\n)", "problem": 23, "user": "4fa67030e4b081705acca1b7"}, {"code": "#(into () %)", "problem": 23, "user": "4fa6440ee4b081705acca1b5"}, {"code": "reduce conj ()", "problem": 23, "user": "4fa58500e4b081705acca1ae"}, {"code": "#(loop [from %1 to (list)]\n  (if (seq from) (recur (next from)\n                        (cons (first from) to))\n      to))", "problem": 23, "user": "4fa6d532e4b081705acca1be"}, {"code": "(fn reversi [x]\n  (if (= x '()) \n    x\n    (concat (reversi (rest x)) (list (first x)))\n  )\n)", "problem": 23, "user": "4fa7ef54e4b081705acca1ca"}, {"code": "(partial\n  (fn [accum x] (if (seq x) (recur (conj accum (first x)) (next x)) accum))\n  '())", "problem": 23, "user": "4fa820fde4b081705acca1ce"}, {"code": "(fn [x]\n  (loop [x x res ()]\n    (let [head (first x) tail (rest x)]\n      (if head (recur tail (conj res head)) res))))", "problem": 23, "user": "4fa82277e4b081705acca1d0"}, {"code": "(fn r \r\n  ([xs]\r\n    (if (empty? xs) []\r\n      (conj (r (rest xs))(first xs))\r\n    )\r\n  )\r\n)", "problem": 23, "user": "4fa7b013e4b081705acca1c8"}, {"code": "(fn [xs] (reduce (fn [x y] (cons y x)) [] xs))", "problem": 23, "user": "4fa6a491e4b081705acca1bc"}, {"code": "into (list)", "problem": 23, "user": "4fa96e80e4b081705acca1df"}, {"code": "#(into '() %)", "problem": 23, "user": "4fa68ed4e4b081705acca1bb"}, {"code": "(fn [coll]\n  (loop [from coll to nil]\n    (if (empty? from)\n      to\n      (recur (rest from) (cons (first from) to)))))", "problem": 23, "user": "4fa982fae4b081705acca1e0"}, {"code": "reduce conj ()", "problem": 23, "user": "4fa99ee1e4b081705acca1e4"}, {"code": "(fn [coll]\n  (let [coll1 (vec coll)]\n    (loop [target (empty coll) i 0]\n      (if (= i (count coll1))\n        target\n        (recur (cons (get coll1 i) target) (inc i))))))", "problem": 23, "user": "4faa5735e4b081705acca1ee"}, {"code": "(fn rev [a-seq]\n  (when-not (empty? a-seq)\n    (lazy-cat (rev (drop 1 a-seq)) [(first a-seq)])))", "problem": 23, "user": "4faa8de0e4b081705acca1f8"}, {"code": "reduce conj '()", "problem": 23, "user": "4f8dc9dce4b02e764a0a51b6"}, {"code": "(fn rev [lst]\n  (loop [A lst, result nil]\n    (if (empty? A)\n      result\n      (recur (rest A) (cons (first A) result)))))", "problem": 23, "user": "4faa9593e4b081705acca1f9"}, {"code": "(fn [xs] (reduce #(cons %2 %1) [] xs))", "problem": 23, "user": "4f4d0a52e4b03ad3f0c10c9d"}, {"code": "(fn [coll]\n  (reduce conj () coll))", "problem": 23, "user": "4fab336be4b081705acca216"}, {"code": "reduce conj ()", "problem": 23, "user": "4faa7f87e4b081705acca1f6"}, {"code": "(fn myrev [lstt]\n  ((fn myrevacc [lst acc]\n    (if\n      (empty? lst)\n      acc\n      (myrevacc (rest lst) (cons (first lst) acc)))) lstt '()))", "problem": 23, "user": "4fab0c0ae4b081705acca20d"}, {"code": "#(loop [xs %, ys ()] (if-let [[x & more] (seq xs)] (recur more (cons x ys)) ys))", "problem": 23, "user": "4fac1d77e4b081705acca223"}, {"code": "(letfn [(rev [lst]\n(if (not (first lst))\n[]\n(conj (rev (rest lst)) (first lst))))]\nrev)", "problem": 23, "user": "4fabb1dce4b081705acca21a"}, {"code": "into ()", "problem": 23, "user": "4fab31a8e4b081705acca215"}, {"code": "#((fn rev [x y]\n  (if (empty? x) y\n    (rev (rest x) (cons (first x) y))))\n  % '())", "problem": 23, "user": "4fac81cee4b081705acca22b"}, {"code": "(fn [s]\n  (loop [s2 s t '()]\n    (if (seq s2)\n      (recur (rest s2) (conj t (first s2)))\n      t)))", "problem": 23, "user": "4fac80d1e4b081705acca22a"}, {"code": "reduce #(concat [%2] %1) []", "problem": 23, "user": "4faae01ae4b081705acca206"}, {"code": "(fn foo [s]\n  (loop [i []\n         r s]\n        (if (empty? r) i\n         (recur (cons (first r) i)\n                (rest r)))))", "problem": 23, "user": "4facd2fae4b081705acca22f"}, {"code": "reduce (fn [x y] (cons y x)) []", "problem": 23, "user": "4faccddae4b081705acca22e"}, {"code": "#(if (empty? %2) %1 (recur (conj %1 (first %2)) (rest %2))) '()", "problem": 23, "user": "4fad041ee4b081705acca231"}, {"code": "(fn myreverse [xs] (if (empty? (rest xs)) (vector (first xs)) (conj (myreverse (rest xs)) (first xs))))", "problem": 23, "user": "4fabc896e4b081705acca21f"}, {"code": "#(->> (interleave (range (count %)) %)\n      (apply array-map)\n      (sort (fn [x y] (> (key x) (key y))))\n      vals)", "problem": 23, "user": "4faac363e4b081705acca200"}, {"code": "(fn reverser \r\n  ([seq] (reverser seq '())) \r\n  ([seq acc]\r\n    (if (empty? seq)\r\n    acc\r\n    (reverser (rest seq) (concat (list (first seq)) acc)))))", "problem": 23, "user": "4fad33e8e4b081705acca236"}, {"code": "(fn my-reverse [s]\n  (cond\n\t\t(= 1 (count s)) (vec s)\n\t\t:else (conj (my-reverse (rest s)) (first s))\n\t)\n)", "problem": 23, "user": "4faacc04e4b081705acca201"}, {"code": "into nil", "problem": 23, "user": "4fad20cfe4b081705acca235"}, {"code": "reduce conj ()", "problem": 23, "user": "4f8386c5e4b033992c121c1d"}, {"code": "(fn [l]\n  (reduce conj '() l))", "problem": 23, "user": "4e137349535d04ed9115e7d9"}, {"code": "(fn my-reverse [coll] (if                                                                                                                                                                            \n                              (== 1 (count coll))                                                                                                                                                           \n                              (list (first coll))                                                                                                                                                           \n                              (concat (my-reverse (rest coll)) (list (first coll)))))", "problem": 23, "user": "4f03ba15535dcb61093f6b56"}, {"code": "(fn rvs [coll]\r\n  (if (empty? coll)\r\n    (list)\r\n    (conj (rvs (butlast coll)) (last coll))))", "problem": 23, "user": "4facff22e4b081705acca230"}, {"code": "#(loop [c % out '()]\n  (if (empty? c) out (recur (rest c) (conj out (first c)))))", "problem": 23, "user": "4fadbc3fe4b081705acca23f"}, {"code": "#(loop [s % r '()]\n  (if (empty? s)\n    r\n    (recur (rest s) (conj r (first s)))))", "problem": 23, "user": "4fae258de4b081705acca246"}, {"code": "(fn rev [seq]\n  (if (empty? (rest seq))\n    seq\n    (concat (rev (rest seq)) (take 1 seq)))\n)", "problem": 23, "user": "4fad9da0e4b081705acca23c"}, {"code": "(fn rev [lst] (if (empty? lst) '() (cons (last lst) (rev (butlast lst)))))", "problem": 23, "user": "4fac031be4b081705acca221"}, {"code": "#(vec\n  (loop [o % n '()]\n    (if-not (empty? o)\n      (recur (rest o) (conj n (first o)))\n      n)))", "problem": 23, "user": "4f0324d2535dcb61093f6a69"}, {"code": "into '()", "problem": 23, "user": "4f99cfc2e4b0dcca54ed6d02"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4faf897be4b081705acca257"}, {"code": "#(loop [coll %1 seed '()]\n  (if (empty? coll)\n      seed\n      (recur\n          (next coll)\n          (cons (first coll) seed))))", "problem": 23, "user": "4fab259ae4b081705acca212"}, {"code": "(fn [coll]\n  (vec (reduce conj (seq nil) coll)))", "problem": 23, "user": "4f9a7dc0e4b0dcca54ed6d0b"}, {"code": "reduce conj ()", "problem": 23, "user": "4fad89f0e4b081705acca23b"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4fb04ee2e4b081705acca264"}, {"code": "#(loop [seq [] rem %]\n  (if (= rem '())\n    seq\n    (recur (conj seq (last rem))\n      (drop-last rem))))", "problem": 23, "user": "4faec810e4b081705acca24e"}, {"code": "(fn [l] (reduce #(concat [%2] %1) [] l))", "problem": 23, "user": "4fad77a6e4b081705acca23a"}, {"code": "(fn foo[x](\n  if (first x) (concat (foo(rest x)) [(first x)])\n  (empty x))\n)", "problem": 23, "user": "4fb069b1e4b081705acca266"}, {"code": "reduce #(cons %2 %1) ()", "problem": 23, "user": "4f5d0f25e4b0030a34fb2b33"}, {"code": "(fn f [xs]\n        (map\n          (fn [y] \n            (\n              (fn enth [z n]\n                (second\n                  (first\n                    (filter\n                      (fn [a] \n                        (= \n                          (first a\n                          ) \n                          n\n                        )\n                      )\n                      (map vector \n                        (range\n                          (count xs\n                          )\n                        )\n                        xs\n                      )\n                     )\n                    )\n                  )\n                )\n                xs\n                (-\n                  (-\n                    (count xs) \n                    1\n                  )\n                  y\n                )\n              )\n              )\n              (range (count xs))\n              \n            )\n           )", "problem": 23, "user": "4fb1325de4b081705acca276"}, {"code": "(fn [s] (reduce conj () s))", "problem": 23, "user": "4f8cb9b2e4b02e764a0a51a6"}, {"code": "(fn my-rev [list]\r\n  (cond\r\n   (= [] list) []\r\n   :else (conj (my-rev (rest list)) (first list))))", "problem": 23, "user": "4fb18b0be4b081705acca27c"}, {"code": "(fn [s] (reduce conj '() s))", "problem": 23, "user": "4fb2101ce4b081705acca284"}, {"code": "(fn rev [coll]\n  (if (empty? coll)\n    []\n    (conj (rev (rest coll)) (first coll))))", "problem": 23, "user": "4fb12b35e4b081705acca275"}, {"code": "(fn rv\n    ([seq] (rv seq ()))\n    ([seq rev]\n      (if (empty? seq)\n          rev\n          (recur (rest seq) (conj rev (first seq))))))", "problem": 23, "user": "4fab0b6be4b081705acca20c"}, {"code": "#(reduce (fn [x y] (concat [y] x)) [] %)", "problem": 23, "user": "4faf2f4ce4b081705acca251"}, {"code": "(fn [lst]\n  (loop [lst lst acc (list)]\n    (if (= lst '())\n      acc\n      (recur (rest lst) (cons (first lst) acc)))))", "problem": 23, "user": "4f9a0064e4b0dcca54ed6d03"}, {"code": "reduce conj '()", "problem": 23, "user": "4fb37882e4b081705acca2a0"}, {"code": "reduce conj '()", "problem": 23, "user": "4fb2b1a1e4b081705acca292"}, {"code": "#(reduce (fn [x y] (conj x y)) '() %)", "problem": 23, "user": "4f05ea25535dcb61093f6c02"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4ec9549d535d6d7199dd36fe"}, {"code": "(fn [xs]\n  ((fn r [xs rxs]\n    (if (empty? xs)\n      rxs\n      (r (rest xs) (cons (first xs) rxs))))\n  xs '()))", "problem": 23, "user": "4fb4099be4b081705acca2a9"}, {"code": "reduce #(cons %2 %) '()", "problem": 23, "user": "4fa9da14e4b081705acca1e7"}, {"code": "#(reduce (fn [x y] (cons y x)) [] %)", "problem": 23, "user": "4fb3b865e4b081705acca2a2"}, {"code": "#(loop [lst % ret '()]\r\n   (if (seq lst)\r\n     (recur (rest lst) (cons (first lst) ret))\r\n     ret))", "problem": 23, "user": "4e7dec83535db169f9c796f3"}, {"code": "into ()", "problem": 23, "user": "4fb50599e4b081705acca2b7"}, {"code": "reduce conj '()", "problem": 23, "user": "4fb510b5e4b081705acca2b8"}, {"code": "into ()", "problem": 23, "user": "4fb4303fe4b081705acca2ac"}, {"code": "(fn myreverse [l] \n  (when-not (empty? l) \n    (conj \n      (myreverse (butlast l)) \n      (last l)\n    )\n  )\n)", "problem": 23, "user": "4fb3fec7e4b081705acca2a7"}, {"code": "(fn [s] (loop [s s rev '()] (if (empty? s) rev (recur (rest s) (conj rev (first s))))))", "problem": 23, "user": "4fb4f42ae4b081705acca2b4"}, {"code": "(fn rev [acc s]\n  (if (empty? s)\n\t\tacc\n\t\t(rev\n\t\t\t(cons (first s) acc)\n\t\t\t(rest s)))) []", "problem": 23, "user": "4fb57e06e4b081705acca2bf"}, {"code": "(fn rev\n  [xs] \n  (println \"rev\" xs)\n  (if (empty? xs)\n    (vector)\n    (conj (rev (rest xs))  (first xs))))", "problem": 23, "user": "4f6bab49e4b07046d9f4efb1"}, {"code": "(fn[x] \r\n  (keep-indexed (fn [i v] (nth (seq x) (- (- (count x) i) 1))) x) \r\n  )", "problem": 23, "user": "4fb4ca71e4b081705acca2b0"}, {"code": "(fn [s] (map last (take (count s) (iterate (fn [x] (drop-last x)) s))))", "problem": 23, "user": "4fb6918ae4b081705acca2c9"}, {"code": "(fn [coll]\n  (reduce #(cons %2 %) (empty coll) coll))", "problem": 23, "user": "4fb73af2e4b081705acca2d0"}, {"code": "apply conj ()", "problem": 23, "user": "4fb54e50e4b081705acca2bb"}, {"code": "(fn [s]\n  (reduce #(cons %2 %1) [] s))", "problem": 23, "user": "4f284db6e4b0d6649770a014"}, {"code": "into ()", "problem": 23, "user": "4dae0510c9a9d6ed4b99dc57"}, {"code": "(fn [x]\r\n  (loop [x x\r\n         y []]\r\n    (if (empty? x)\r\n      y\r\n      (recur (drop-last x) (conj y (last x)))\r\n      )))", "problem": 23, "user": "4fb79872e4b081705acca2d2"}, {"code": "reduce (fn [a b] (cons b a)) []", "problem": 23, "user": "4fb86dc9e4b081705acca2d8"}, {"code": "(fn [in-seq]\r\n  (loop [the-seq in-seq\r\n         out-seq '()]\r\n    (if (empty? the-seq)\r\n      out-seq\r\n      (recur (rest the-seq) (cons (first the-seq) out-seq)))))", "problem": 23, "user": "4fabbb97e4b081705acca21d"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4fb48013e4b081705acca2ae"}, {"code": "(fn [coll] (reduce #(conj %1 %2) () coll))", "problem": 23, "user": "4fb91026e4b081705acca2d9"}, {"code": "reduce conj '()", "problem": 23, "user": "4fb0a1e0e4b081705acca269"}, {"code": "#(into () %)", "problem": 23, "user": "4fb045dfe4b081705acca263"}, {"code": "(fn [col list]\n    (if (empty? list) \n      col\n      (recur (conj col (first list)) (next list)))) '()", "problem": 23, "user": "4f045d0e535dcb61093f6bbc"}, {"code": "#(\n  (fn r [l v] (if (empty? l) v (r (rest l) (cons (first l) v))))\n% '())", "problem": 23, "user": "4e83bb61535db62dc21a62dd"}, {"code": "(fn rvrs ([coll] (rvrs coll '())) ([coll rvrsd] (if (empty? coll) rvrsd (recur (rest coll) (cons (first coll) rvrsd)))))", "problem": 23, "user": "4fb85651e4b081705acca2d7"}, {"code": "into ()", "problem": 23, "user": "4faafccde4b081705acca209"}, {"code": "#(reduce conj nil %)", "problem": 23, "user": "4fbbcf0ce4b081705acca2ee"}, {"code": "into ()", "problem": 23, "user": "4fbb7010e4b081705acca2e7"}, {"code": "(fn rev [lst]\r\n(if (empty? lst)\r\n'()\r\n(concat (rev (rest lst)) (list (first lst)))))", "problem": 23, "user": "4fbbb6ede4b081705acca2ed"}, {"code": "(fn [xs] (reduce conj nil xs))", "problem": 23, "user": "4fb65f2fe4b081705acca2c7"}, {"code": "reduce #(cons %2 %1) []", "problem": 23, "user": "4fbce33de4b081705acca2fb"}, {"code": "(fn[x](loop[cnt 0 acc []](if (= cnt (count x)) acc (recur (inc cnt)(cons (nth (to-array x) cnt) acc)))))", "problem": 23, "user": "4f32135ae4b0d6649770a08e"}, {"code": "#(into () %)", "problem": 23, "user": "4fb18c7be4b081705acca27d"}, {"code": "(fn [s]\n  (loop [s s\n         acc '()]\n    (if (empty? s)\n      acc\n      (recur (rest s) (cons (first s) acc)))))", "problem": 23, "user": "4fbd24d2e4b081705acca2ff"}, {"code": "(fn [x] (reduce (fn [s a] (concat [a] s)) [] x))", "problem": 23, "user": "4f7e07f4e4b06e829148e1c9"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "4fbcbd50e4b081705acca2f9"}, {"code": "(fn [what]\n  (condp = what\n    [1 2 3 4 5] [5 4 3 2 1]\n    (sorted-set 5 7 2 7) '(7 5 2)\n    [[1 2][3 4][5 6]] [[5 6][3 4][1 2]]))", "problem": 23, "user": "4ee85476535d93acb0a6687c"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4f7c0ab8e4b06e829148e1ac"}, {"code": "(fn rev [l]\n  (if (empty? l)\n      '() \n       (concat (rev (rest l)) (list (first l)))))", "problem": 23, "user": "4fbe2cfbe4b081705acca30c"}, {"code": "#(reduce (fn [a e] (conj a e)) () %)", "problem": 23, "user": "4fbe400be4b081705acca30e"}, {"code": "#(reduce (fn[x,y] (cons y x)) [] %)", "problem": 23, "user": "4fb3dd1ee4b081705acca2a5"}, {"code": "(fn [s]\n  ((fn do-rev [s c]\n    (if \n      (empty? s) c\n      (do-rev (rest s) (cons (first s) c)))) s '()))", "problem": 23, "user": "4f8c50f9e4b02e764a0a5195"}, {"code": "into ()", "problem": 23, "user": "4fbd12a5e4b081705acca2fd"}, {"code": "(fn my-reverse [s] (cond \n  (nil? s) nil\n:else (cons (last s) (my-reverse (butlast s)))))", "problem": 23, "user": "4fbe6386e4b081705acca311"}, {"code": "#(reduce (fn [accum item] (cons item accum)) [] %)", "problem": 23, "user": "4fa4bdeee4b081705acca1a2"}, {"code": "#(loop [myseq %1 out_seq []]\n  (if (empty? myseq)\n    out_seq\n    (recur (butlast myseq) (conj out_seq (last myseq)))\n  ))", "problem": 23, "user": "4fbd6210e4b081705acca303"}, {"code": "#(into () %)", "problem": 23, "user": "4fbd8b64e4b081705acca307"}, {"code": "#(into () %)", "problem": 23, "user": "4fbef9a6e4b081705acca316"}, {"code": "(fn [list]\n  (reduce conj '() list))", "problem": 23, "user": "4fb804f7e4b081705acca2d6"}, {"code": "reduce conj ()", "problem": 23, "user": "4fbfbd4fe4b081705acca31c"}, {"code": "#(loop [s % acc ()] (if (= s ()) acc (recur (rest s) (cons (first s) acc))))", "problem": 23, "user": "4fbfe9a4e4b081705acca31f"}, {"code": "(fn [se]\n  ((fn [re nw]\n     (if (not (empty? re))\n       (recur (rest re)\n              (cons (first re) nw))\n       nw))\n     se '()))", "problem": 23, "user": "4fbe42b7e4b081705acca30f"}, {"code": "reduce (fn [x y] (conj x y)) '()", "problem": 23, "user": "4fc01b32e4b081705acca321"}, {"code": "(fn rev [xs]\n  (loop [ys '() rs xs]\n    (if (empty? rs) \n      ys \n      (recur (conj ys (first rs)) (rest rs)))))", "problem": 23, "user": "4fc04d75e4b081705acca324"}, {"code": "(fn [l] (reduce #(cons %2 %1) () l))", "problem": 23, "user": "4fc0853ae4b081705acca327"}, {"code": "(fn [s] (reduce #(conj %1 %2) () s))", "problem": 23, "user": "4fc0f5b8e4b081705acca329"}, {"code": "#(map first\n    (sort (fn [[_ a] [_ b]] (> a b))\n      (map list % (range))))", "problem": 23, "user": "4fc13433e4b081705acca32b"}, {"code": "(fn\n  rev  [xs]\n  (if (= 1 (count xs))\n    (list (first xs))\n    (concat (rev (rest xs))\n            (list (first xs)))))", "problem": 23, "user": "4fbd292fe4b081705acca300"}, {"code": "into ()", "problem": 23, "user": "4faa6184e4b081705acca1f1"}, {"code": "(fn[x] \n  (loop [ res () l x] \n    (if (empty? l)\n     res \n    (recur (conj res (first l)) (rest l))))\n)", "problem": 23, "user": "4fc18846e4b081705acca331"}, {"code": "#(loop [res [] v %]\r\n  (if (= v ()) res\r\n    (recur (cons (first v) res) (rest v))))", "problem": 23, "user": "4fa85ae4e4b081705acca1d3"}, {"code": "#(into () %)", "problem": 23, "user": "4fbdcb87e4b081705acca30a"}, {"code": "#(into () %)", "problem": 23, "user": "4fc34787e4b081705acca33e"}, {"code": "(fn [x](vec (rest (butlast (take-nth (dec (count x)) (take (* (count x) (count x)) (cycle x)))))))", "problem": 23, "user": "4fb42570e4b081705acca2ab"}, {"code": "reduce #(cons %2 %1) '[]", "problem": 23, "user": "4fc0b183e4b081705acca328"}, {"code": "(fn rv [xs]\n  (if (not-empty xs)\n  (into [(last xs)]\n        (rv (butlast xs)))))", "problem": 23, "user": "4fba0877e4b081705acca2dd"}, {"code": "(fn [xs]\n  (loop [ys xs, rs '()]\n    (if (empty? ys) \n        rs \n        (recur (rest ys) (cons (first ys) rs)))))", "problem": 23, "user": "4fc40b0be4b081705acca344"}, {"code": "reduce conj nil", "problem": 23, "user": "4fc4eadee4b081705acca353"}, {"code": "(fn rev [s]\r\n     (if (= (count s) 1)\r\n       s\r\n       (concat (rev (rest s)) (list (first s)))))", "problem": 23, "user": "4fc50441e4b081705acca36f"}, {"code": "(fn list-reverse [lst]\n  (reduce conj '() lst))", "problem": 23, "user": "4fc52278e4b081705acca37c"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4fb2f9b2e4b081705acca294"}, {"code": "(fn myreverse [inlist]\n  (if (= (count inlist) 1)\n    inlist\n    (concat (myreverse (rest inlist))\n            (list (first inlist)))))", "problem": 23, "user": "4fc50bcbe4b081705acca375"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "4fc3a72ae4b081705acca342"}, {"code": "(fn [lst]\n  (loop [lst lst, rev (empty lst)]\n    (if (empty? lst)\n      rev\n      (recur (rest lst) (cons (first lst) rev))\n)))", "problem": 23, "user": "4fae4c11e4b081705acca248"}, {"code": "#(reduce (fn [a b] (cons b a)) [] %)", "problem": 23, "user": "4fc4dca8e4b081705acca350"}, {"code": "#(reduce conj '() %1)", "problem": 23, "user": "4fc5e24ee4b0ee37620e1801"}, {"code": "#(if (vector? %)\n   (reduce\n     (fn [a c] (into (empty %)\n                 (concat (list c) a)))\n     (empty %)\n     %)\n   (reduce conj () %))", "problem": 23, "user": "4fc6104ae4b0ee37620e1808"}, {"code": "(fn [seq]\n  ((fn rev [init result]\n    (if (= (count init) 0)\n      result\n      (rev (rest init) (concat [(first init)] result))\n    )\n  ) seq [])\n)", "problem": 23, "user": "4fc4fe59e4b081705acca36a"}, {"code": "(fn sol0023-reduce\n  [coll]\n  (reduce conj '() coll))", "problem": 23, "user": "4fc6305de4b0ee37620e180b"}, {"code": "(fn [coll] \n  (reduce conj () coll))", "problem": 23, "user": "4fc5eb7fe4b0ee37620e1803"}, {"code": "(fn [xs]\n  ((fn rseq1 [xs rs]\n      (if (empty? xs)\n          rs\n          (rseq1 (rest xs) (conj rs (first xs)))))\n  xs ()\n  ))", "problem": 23, "user": "4fc5ee4fe4b0ee37620e1804"}, {"code": "reduce conj ()", "problem": 23, "user": "4db1b5841254ad5b4805fa70"}, {"code": "(fn [coll]\n  ((fn [coll res]\n    (if (nil? coll)\n        res\n        (recur (next coll)\n               (cons (first coll) res))))\n   coll nil))", "problem": 23, "user": "4fb1d907e4b081705acca282"}, {"code": "(fn [l]\n  (loop [a l b '()] \n          (cond (empty? a) b\n            :else (recur (rest a) (cons (first a) b)))))", "problem": 23, "user": "4fbd1ebbe4b081705acca2fe"}, {"code": "(fn [coll] (reduce conj '() coll))", "problem": 23, "user": "4fc4f668e4b081705acca362"}, {"code": "#(into '() %)", "problem": 23, "user": "4fc5019ae4b081705acca36d"}, {"code": "#(loop [l %,r '()] (if (empty? l) r (recur (rest l) (cons (first l) r))))", "problem": 23, "user": "4fc0221ce4b081705acca322"}, {"code": "(fn roflreverse [initial-seq]\n  (loop [seq initial-seq out ()]\n    (if (= seq ())\n      out\n      (recur (rest seq) (conj out (first seq))))))", "problem": 23, "user": "4fc2e302e4b081705acca33a"}, {"code": "(fn [coll]\n  (loop [c coll, res ()] ;; use a list to have conj add at start\n    (if (empty? c) \n      res\n      (recur (rest c) (conj res (first c))))))", "problem": 23, "user": "4fc7db47e4b0ee37620e182a"}, {"code": "#(into () %)", "problem": 23, "user": "4f148418535d64f60314643a"}, {"code": "(fn RVS [X] (if (empty? X) nil (cons (last X) (RVS (butlast  X))   )  ))", "problem": 23, "user": "4fc7b079e4b0ee37620e1827"}, {"code": "(fn rev \n  ([coll] (rev coll ()))\n  ([coll result]\n    (if (empty? coll)\n      result\n      (recur (rest coll) (cons (first coll) result)))))", "problem": 23, "user": "4fbb9d80e4b081705acca2ea"}, {"code": "into '()", "problem": 23, "user": "4fa05b99e4b0dcca54ed6d47"}, {"code": "(fn invert [l]\n    (letfn [(inv [acc l]\n              (if (empty? l)\n                acc\n                (inv (cons (first l) acc) (rest l))))]\n      (inv '() l)))", "problem": 23, "user": "4fc8ce6ce4b0ee37620e183c"}, {"code": "(fn invert [x]\r\n  (if (= (count x) 1)\r\n    x\r\n    (concat (invert (rest x)) (list (first x)))))", "problem": 23, "user": "4fc8b012e4b0ee37620e1838"}, {"code": "(fn [coll] (reduce #(cons %2 %1) '() coll))", "problem": 23, "user": "4fc66c43e4b0ee37620e1812"}, {"code": "reduce conj nil", "problem": 23, "user": "4fc8c8d8e4b0ee37620e183b"}, {"code": "(fn my-rev [x]\n  (loop [s x r ()]\n    (if (next s) (recur (next s) (conj r (first s))) (conj r (first s)))))", "problem": 23, "user": "4fc68fc4e4b0ee37620e1816"}, {"code": "(fn foo [xs]\n  (when (seq xs)\n    (into [] (concat (foo (rest xs)) [(first xs)]))))", "problem": 23, "user": "4fc8f1fee4b0ee37620e183f"}, {"code": "#(reduce (fn [nlst vflst] (cons vflst nlst)) '() %)", "problem": 23, "user": "4fc4f040e4b081705acca35a"}, {"code": "into nil", "problem": 23, "user": "4fbacdbae4b081705acca2e5"}, {"code": "(fn rev [xs] (if (empty? xs) xs (cons (last xs) (rev (butlast xs)))))", "problem": 23, "user": "4fc92595e4b0ee37620e1843"}, {"code": "#(into () %)", "problem": 23, "user": "4fc7b8f5e4b0ee37620e1828"}, {"code": "(fn [s] \n  (loop [R '() S s]\n    (if (empty? S)\n      R\n      (recur (conj R (first S)) (rest S)))))", "problem": 23, "user": "4fc52d79e4b081705acca386"}, {"code": "(fn [x] (reduce conj '() x))", "problem": 23, "user": "4fc9cba3e4b0ee37620e1849"}, {"code": "(fn rev [v]\n  (reduce #(cons %2 %1) [] v))", "problem": 23, "user": "4fca1cd6e4b0ee37620e184c"}, {"code": "#(into '() %)", "problem": 23, "user": "4fca2a13e4b0ee37620e184d"}, {"code": "#(loop [s % r '()]\n  (if (empty? s) r\n    (recur (rest s)\n          (conj r (first s)))))", "problem": 23, "user": "4fcaa4bae4b0ee37620e1854"}, {"code": "(fn myreverse [v]\n    (if (empty? v)\n      v\n      (conj (-> v rest myreverse vec) (first v))\n      )\n    )", "problem": 23, "user": "4fcad14ce4b0ee37620e1856"}, {"code": "(partial reduce conj '())", "problem": 23, "user": "4fcaf7a4e4b0ee37620e1857"}, {"code": "(fn rev[x] (cond (= x nil) nil :else (cons (last x) (rev (butlast x)))))", "problem": 23, "user": "4fc565e3e4b0ee37620e17f4"}, {"code": "(fn rev [coll]\r\n    (if (empty? coll)\r\n        coll\r\n        (cons (last coll) (rev (drop-last coll)) )\r\n    )\r\n)", "problem": 23, "user": "4fc56e68e4b0ee37620e17f5"}, {"code": "(fn [xs]\n  (sort-by #(- (.indexOf (vec xs) %)) xs))", "problem": 23, "user": "4fca4c37e4b0ee37620e184f"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4f826548e4b033992c121c08"}, {"code": "(fn rec [c]\n  (if (empty? c)\n    []\n    (conj (rec (rest c)) (first c))))", "problem": 23, "user": "4fcc103fe4b0ee37620e185f"}, {"code": "(fn [x]\n  (loop [fw x bw nil]\n    (if (empty? fw) bw\n        (recur (rest fw) (conj bw (first fw))))))", "problem": 23, "user": "4fcbc18ae4b0ee37620e185c"}, {"code": "(fn [ l ] \n  ( #(if (empty? %1) %2 (recur (rest %1) (cons (first %1) %2) ) ) l (empty l)))", "problem": 23, "user": "4fc43a8ee4b081705acca346"}, {"code": "(fn myrev [l]\n  (cond\n    (empty? l) []\n    :else (lazy-cat (myrev (rest l)) [(first l)])))", "problem": 23, "user": "4daf4d2fedd6309eace4d178"}, {"code": "(fn [seq] (reduce (fn [x y] (cons y x)) '() seq))", "problem": 23, "user": "4fcc6cb3e4b0ee37620e1861"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4fccd906e4b0ee37620e186c"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4e970e6a535dbda64a6f6b4e"}, {"code": "(fn [x] (\n  letfn [ (a [y t]\n    (if (= 1 t) \n        y\n        (cons (last y) (a (butlast y) (dec t)))\n    )) ]\n  (a x (count x))))", "problem": 23, "user": "4fccdc75e4b0ee37620e186d"}, {"code": "reduce conj '()", "problem": 23, "user": "4fb23582e4b081705acca28a"}, {"code": "(fn [s]\n  (reduce conj () s))", "problem": 23, "user": "4eb99b3d535dfed6da9c6d57"}, {"code": "into ()", "problem": 23, "user": "4faa6e19e4b081705acca1f2"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4fc67081e4b0ee37620e1813"}, {"code": "#(map second\n  (sort (map vector\n    (range (count %) 0 -1)\n    %)))", "problem": 23, "user": "4fce5474e4b0d4b2a7a9d451"}, {"code": "#(letfn [(myrseq [result coll]\n            (if-let [i (first coll)]\n              (recur (conj result i) (next coll))\n              result))]\n  (myrseq '() %))", "problem": 23, "user": "4fcd5958e4b065de69964ca7"}, {"code": "#(reduce (fn [a b] (cons b a)) '() %)", "problem": 23, "user": "4fcd0990e4b0ee37620e1874"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "4fceb350e4b03432b189f403"}, {"code": "(fn rev [xs]\n  (if (empty? xs)\n      xs\n\t    (conj (rev (butlast xs)) (last xs))))", "problem": 23, "user": "4fccb31be4b0ee37620e1868"}, {"code": "reduce conj ()", "problem": 23, "user": "4fc3b0d4e4b081705acca343"}, {"code": "(fn [x] (\n  (fn myrev [x y] (\n    if (= '() x) y (myrev (rest x) (conj y (first x)))\n    )) x '()\n))", "problem": 23, "user": "4fcf5292e4b03432b189f40e"}, {"code": "(fn [x]\n  (loop [x x\n         acc []]\n    (if (= x ())\n      acc\n      (recur (drop-last x) (conj acc (last x))))))", "problem": 23, "user": "4fcb5d1fe4b0ee37620e1858"}, {"code": "(fn [x] (reduce conj () x))", "problem": 23, "user": "4fcf7170e4b03432b189f412"}, {"code": "#(into () %)", "problem": 23, "user": "4fcd155de4b065de69964ca3"}, {"code": "reduce conj ()", "problem": 23, "user": "4fc93728e4b0ee37620e1844"}, {"code": "(fn f23\n  ([s] (f23 s (list)))\n  ([s v] (if (empty? s)\n           v\n           (recur (rest s) (conj v (first s))))))", "problem": 23, "user": "4f61c3cfe4b0defedf855fc6"}, {"code": "(fn r [l] \n  (if (empty? l)\n[]\n  (conj (r (rest l)) (first l))\n))", "problem": 23, "user": "4fcebce4e4b03432b189f404"}, {"code": "(fn [x] (loop [ll x, rl '()]\n          (if (empty? ll)\n               rl\n               (recur (rest ll) (conj rl (first ll))))))", "problem": 23, "user": "4fd0cb0ee4b04c3a95aa0407"}, {"code": "(fn [c]\n  (loop [l ()\n         s c]\n    (if (seq s)\n        (recur (cons (first s) l) (rest s))\n        l)))", "problem": 23, "user": "4fd0d058e4b04c3a95aa0408"}, {"code": "(fn[x](into () x))", "problem": 23, "user": "4fd0b0bde4b04c3a95aa0406"}, {"code": "reduce #(cons %2 %) ()", "problem": 23, "user": "4fba7d1ee4b081705acca2e0"}, {"code": "reduce #(cons %2 %) []", "problem": 23, "user": "4fd11132e4b04c3a95aa0409"}, {"code": "(fn [x] (into () x))", "problem": 23, "user": "4fce75cfe4b03432b189f400"}, {"code": "reduce conj '()", "problem": 23, "user": "4fd2529ae4b04c3a95aa041f"}, {"code": "(fn reverser [x] \n  (if (= (count x) 1)\n    x\n    (cons (last x) (reverser (drop-last x)))))", "problem": 23, "user": "4fd24729e4b04c3a95aa041e"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4fd22e70e4b04c3a95aa041c"}, {"code": "(fn [se]\n  (loop [seq se acc '()]\n    (if (empty? seq) acc\n        (recur (rest seq) \n                (cons (first seq) acc)))))", "problem": 23, "user": "4fd16778e4b04c3a95aa040f"}, {"code": "#(for [x (range 0 (count %1))] (nth (seq %1) (- (- (count %1) x) 1)))", "problem": 23, "user": "4fcc70b3e4b0ee37620e1862"}, {"code": "into ()", "problem": 23, "user": "4ee6166e535d93acb0a66854"}, {"code": "(fn [seq & n] (let [nw (if n n (list))]\n  (if (first seq) (recur (rest seq) (conj nw (first seq))) nw)))", "problem": 23, "user": "4fd3b3d9e4b0d4de60cee362"}, {"code": "(fn [x]\r\n    ((fn z [x acc]\r\n       (if (= x '())\r\n         acc\r\n         (z (rest x) (conj acc (first x)))\r\n       )) x '()))", "problem": 23, "user": "4fd153cee4b04c3a95aa040e"}, {"code": "(fn myreverse [lst] (\r\n  if (nil? lst)\r\n  '()\r\n  (concat (myreverse (next lst)) [(first lst)])\r\n))", "problem": 23, "user": "4fd459cfe4b0d4de60cee36b"}, {"code": "(fn [a] (loop [res [] x a]\n  (if (empty? x)\n    res\n    (recur (cons (first x) res) (rest x)))))", "problem": 23, "user": "4fd2e5d8e4b04c3a95aa0427"}, {"code": "#(into '() (list* %))", "problem": 23, "user": "4fd4599fe4b0d4de60cee36a"}, {"code": "reduce conj '()", "problem": 23, "user": "4fd308e8e4b04c3a95aa042a"}, {"code": "#(->> % (reduce conj ()))", "problem": 23, "user": "4fadbb17e4b081705acca23e"}, {"code": "#(loop [items % reversed []]\n  (if (empty? items)\nreversed\n(recur (drop-last items) (conj reversed (last items)))))", "problem": 23, "user": "4fc6d2c1e4b0ee37620e181b"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "4fc5d1c3e4b0ee37620e17ff"}, {"code": "(fn rev [x]\n  (cond\n    (empty? x) x\n    (empty? (rest x)) x\n    :else (concat (rev (rest x)) (list (first x)))))", "problem": 23, "user": "4fd51da9e4b0d4de60cee371"}, {"code": "(fn [s]\n  (reduce (fn [reversed n] (conj reversed n))\n          '()\n          s))", "problem": 23, "user": "4fd54f80e4b0d4de60cee374"}, {"code": "reduce #(conj % %2) ()", "problem": 23, "user": "4fd2789ee4b04c3a95aa0422"}, {"code": "(fn [arr] (\r\n  loop [\r\n    rev-a '()\r\n    a (seq arr)]\r\n  (if (nil? a) ; if I have an empty sequence\r\n    rev-a ; return rev-a\r\n    (recur ; else, loop with arr[1:],arr[1] + rev-a\r\n      (cons (first a) rev-a )\r\n      (next a)))))", "problem": 23, "user": "4f98c161e4b0dcca54ed6cf5"}, {"code": "#(reduce (fn [x,y] (cons y x)) () %)", "problem": 23, "user": "4fd73610e4b0dab7d829f37e"}, {"code": "(fn [coll]\n  (loop [col coll res nil]\n    (if (seq col)\n      (recur (next col) (conj res (first col)))\n      res)))", "problem": 23, "user": "4fd7962ee4b0dab7d829f385"}, {"code": "into ()", "problem": 23, "user": "4fd6028ce4b0d4de60cee37b"}, {"code": "#(reduce (fn [coll x] (conj coll x)) nil %)", "problem": 23, "user": "4fd1971ae4b04c3a95aa0412"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4fd718cee4b0dab7d829f37d"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "4fa9c945e4b081705acca1e5"}, {"code": "into nil", "problem": 23, "user": "4dac61e18cc9d6edb9beb0b3"}, {"code": "(fn [l]\n  (reduce (fn [m x] (cons x m))\n          '() l))", "problem": 23, "user": "4f934325e4b0dcca54ed6cb8"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4fd58082e4b0d4de60cee377"}, {"code": "#(apply conj () %)", "problem": 23, "user": "4fb1159fe4b081705acca273"}, {"code": "reduce #(conj %1 %2) ()", "problem": 23, "user": "4fd29d7ce4b04c3a95aa0424"}, {"code": "(fn rev [x] (if (empty? x) x (conj (rev (butlast x)) (last x))))", "problem": 23, "user": "4fd8544be4b0dab7d829f390"}, {"code": "#(reduce conj '() (seq %))", "problem": 23, "user": "4fd96694e4b05e33b9224f37"}, {"code": "(fn my-rev [lst]\n        (if (seq lst)\n            (conj (my-rev (rest lst))\n                    (first lst))\n            []))", "problem": 23, "user": "4fb591aee4b081705acca2c0"}, {"code": "#(into () %)", "problem": 23, "user": "4fd9ee7de4b05e33b9224f3f"}, {"code": "(fn [x]\n  (loop [r []\n         l x]\n    (if-not (empty? l)\n      (recur (conj r (last l)) (butlast l))\n      r\n      )))", "problem": 23, "user": "4fd1fa71e4b04c3a95aa0418"}, {"code": "(fn [S] \n  (reduce conj '() S))", "problem": 23, "user": "4fda016ae4b05e33b9224f42"}, {"code": "(fn [x]\r\n  (reduce conj '() (for [item x] item)))", "problem": 23, "user": "4fd9f5dbe4b05e33b9224f41"}, {"code": "(fn [s] (loop [s (seq s) r '()] (if s (recur (next s) (conj r (first s))) r)))", "problem": 23, "user": "4db0ef131254ad5b4805fa64"}, {"code": "reduce conj ()", "problem": 23, "user": "4fda01cde4b05e33b9224f43"}, {"code": "#(cond (vector? %) (vec (reduce conj () %)) \n    :else (reduce conj () %))", "problem": 23, "user": "4faa7c76e4b081705acca1f5"}, {"code": "#(into '() %)", "problem": 23, "user": "4fdc3065e4b05e33b9224f6b"}, {"code": "(partial reduce conj '())", "problem": 23, "user": "4e726575535d5021c1a89660"}, {"code": "#(reduce conj '() (seq %))", "problem": 23, "user": "4f30896ce4b0d6649770a07b"}, {"code": "reduce (fn[x y](conj x y)) '()", "problem": 23, "user": "4fd15334e4b04c3a95aa040d"}, {"code": "#(reduce (fn [a b] (cons b a)) [] %)", "problem": 23, "user": "4fdd27f3e4b05e33b9224f78"}, {"code": "#(into () %)", "problem": 23, "user": "4f9fb08ae4b0dcca54ed6d3c"}, {"code": "#((fn rew [x t] (if (empty? t) x (rew (cons (first t) (butlast x)) (rest t)))) % %)", "problem": 23, "user": "4fca2ef0e4b0ee37620e184e"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4f030cff535dcb61093f6a4d"}, {"code": "#(into () %)", "problem": 23, "user": "4fde156ce4b05e33b9224f83"}, {"code": "(fn r [l]\n  (if (= l '())\n    l\n    (conj (r (take (dec (count l)) l)) (last l))))", "problem": 23, "user": "4fde492be4b05e33b9224f8a"}, {"code": "#(into '() %)", "problem": 23, "user": "4fd6f4d8e4b0dab7d829f37b"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4e5a5ecb535d8a8b8723a2ac"}, {"code": "#(into () %)", "problem": 23, "user": "4fdfd165e4b05e33b9224fa3"}, {"code": "(fn r [xs] (if (empty? xs) [] (conj (r (rest xs)) (first xs))))", "problem": 23, "user": "4fc638a6e4b0ee37620e180c"}, {"code": "#(reduce (fn [x y] [] (cons y x)) [] %)", "problem": 23, "user": "4fde0365e4b05e33b9224f7f"}, {"code": "(partial reduce (fn [rval item] (conj rval item)) '())", "problem": 23, "user": "4fdfe6a5e4b05e33b9224fa6"}, {"code": "#(loop [i % new-coll '()]\r\n  (if (first i) (recur (rest i) (cons (first i) new-coll))\r\n                new-coll))", "problem": 23, "user": "4fdbc075e4b05e33b9224f61"}, {"code": "(fn my-rev [x]\r\n  (let [k ()]\r\n    (if (vector? x)\r\n      (vec (into k x))\r\n      (into k x))))", "problem": 23, "user": "4fd0af0ee4b04c3a95aa0405"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4fdf2b50e4b05e33b9224f93"}, {"code": "(fn [lst] (loop [l lst rl '()]\n  (if (empty? l)\n  rl\n  (recur (next l) (cons (first l) rl)))))", "problem": 23, "user": "4fd7f892e4b0dab7d829f38d"}, {"code": "into '()", "problem": 23, "user": "4fdf566fe4b05e33b9224f99"}, {"code": "(fn [s] (apply conj '() s))", "problem": 23, "user": "4e70a7c1535d5021c1a8963c"}, {"code": "(fn [coll]\n  (loop [c coll\n        acc []]\n      (if (seq c)\n        (recur (rest c) (cons (first c) acc))\n        acc)))", "problem": 23, "user": "4fe13ad7e4b0dd6cd5ce3632"}, {"code": "#(into () %)", "problem": 23, "user": "4fe183a0e4b0dd6cd5ce3635"}, {"code": "(fn [s] (reduce (fn [v n] (cons n v)) '() s))", "problem": 23, "user": "4fe1a734e4b0dd6cd5ce3637"}, {"code": "(fn [ s ] (into () s) )", "problem": 23, "user": "4fdf750be4b05e33b9224f9c"}, {"code": "#(into () %)", "problem": 23, "user": "4fdf9a9ae4b05e33b9224f9f"}, {"code": "(fn [col]\n  (reduce conj '() col))", "problem": 23, "user": "4fe2501ae4b0dd6cd5ce3644"}, {"code": "#(loop [coll %1 mylist []]\n  \t(if (empty? coll)\n\t\t\tmylist\n\t\t\t(recur (rest coll) (cons (first coll) mylist))))", "problem": 23, "user": "4f753535e4b0fbe0118ec558"}, {"code": "(fn rev\n  ([items] (rev items ()))\n  ([items output]\n    (if (= items ())\n      output\n      (rev (rest items) (conj output (first items))))))", "problem": 23, "user": "4fd9d162e4b05e33b9224f3c"}, {"code": "reduce conj '()", "problem": 23, "user": "4fe4c09ee4b0e8f79898febb"}, {"code": "(fn [coll]\n  (reduce conj () coll))", "problem": 23, "user": "4f92884de4b0dcca54ed6caf"}, {"code": "(fn rev [items] (\n  if (empty? items)\n    items\n  (\n    cons (last items) (rev (butlast items)) \n  )\n))", "problem": 23, "user": "4fe4cefce4b0e8f79898febd"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4f56d6f3e4b0a7574ea7182c"}, {"code": "(fn my-reverse [coll]\n  (loop [coll coll\n         result ()]\n    (if (empty? coll)\n      result\n      (recur (rest coll) (conj result (first coll))))))", "problem": 23, "user": "4fe54ee8e4b0e8f79898fec3"}, {"code": "(fn [x] (reduce conj () x))", "problem": 23, "user": "4ec56864535d6d7199dd369d"}, {"code": "#(loop [list2 '()\r\n        list (concat [] %)] \r\n    (if (empty? list) \r\n        list2\r\n        (recur (concat [(first list)] list2) (next list))))", "problem": 23, "user": "4fe588b6e4b0e8f79898fec5"}, {"code": "(fn name [x] (if (nil? (next x)) [(first x)] (conj (name (next x)) (first x))))", "problem": 23, "user": "4fe5895be4b0e8f79898fec6"}, {"code": "(fn getReverse [x]\n  (if (= nil (second x))\n    (conj [] (first x))\n    (conj (getReverse (rest x)) (first x))))", "problem": 23, "user": "4fe610fde4b0e8f79898fece"}, {"code": "#(into () %)", "problem": 23, "user": "4fe5c35ce4b0e8f79898fec9"}, {"code": "#(loop [in % out '()] (if (empty? in) out (recur (rest in) (cons (first in) out))))", "problem": 23, "user": "4e6a63fd535d8ccf87e9feda"}, {"code": "#(into () %)", "problem": 23, "user": "4fe6c2ace4b0e8f79898fed8"}, {"code": "(fn [x]\n     (loop [x x\n            acc '()]\n       (if (= x [])\n         acc\n         (recur (vec (rest x)) (conj acc (first x))))))", "problem": 23, "user": "4fe72924e4b0e8f79898fedb"}, {"code": "(fn [x]\n  (loop [lst x ret '()]\n      (if (empty? lst) ret\n          (recur (rest lst) (conj ret (first lst))))))", "problem": 23, "user": "4fdf5403e4b05e33b9224f98"}, {"code": "into ()", "problem": 23, "user": "4fdec88fe4b05e33b9224f8e"}, {"code": "(fn [coll]\n  (into '() coll))", "problem": 23, "user": "4fe84c74e4b07c9f6fd12c3c"}, {"code": "reduce #(cons %2 %1) '()", "problem": 23, "user": "4fe83efbe4b07c9f6fd12c3b"}, {"code": "(fn [seq] (reduce (fn [col arg] (cons arg col)) [] seq))", "problem": 23, "user": "4fbf2818e4b081705acca317"}, {"code": "#(into () %)", "problem": 23, "user": "4fe88f78e4b07c9f6fd12c45"}, {"code": "reduce conj '()", "problem": 23, "user": "4fe8a1f8e4b07c9f6fd12c5f"}, {"code": "(fn foo [s]\r\n  (loop [i 0 myseq s]\r\n    (if (< (count s) (inc i))\r\n      myseq\r\n      (recur (inc i) (cons (nth (if (set? s) (seq s) s) i) (butlast myseq))))))", "problem": 23, "user": "4fe1597fe4b0dd6cd5ce3633"}, {"code": "(fn rev\n  ([seq] (rev seq '()))\n  ([seq newseq]\n     (if (= 0 (count seq))\n      newseq\n      (rev (rest seq) (conj newseq (first seq))))))", "problem": 23, "user": "4fe89efae4b07c9f6fd12c5b"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "4fe8b19fe4b07c9f6fd12c70"}, {"code": "(fn [x]\n  (loop [o '() i x]\n      (if (empty? i) o\n            (recur (cons (first i) o) (drop 1 i) )\n          )\n       )\n   )", "problem": 23, "user": "4fd11a93e4b04c3a95aa040a"}, {"code": "(fn my-reverse [coll]\r\n  (letfn [(my-reverse- [coll acc]\r\n                       (if (seq coll)\r\n                         (recur (rest coll) (cons (first coll) acc))\r\n                         acc))]\r\n    (my-reverse- coll [])))", "problem": 23, "user": "4e7e4a1f535db169f9c7970c"}, {"code": "(fn rev [s]\n  ((fn rev-iter [s-in s-out]\n    (if (empty? s-in)\n      s-out\n      (rev-iter (rest s-in) (cons (first s-in) s-out)))) s '()))", "problem": 23, "user": "4fe8e771e4b0547ebccb2431"}, {"code": "(fn [coll]\n  (loop [[r & more :as all] (seq coll)\n         acc '()]\n    (if all\n      (recur more (cons r acc))\n      acc)))", "problem": 23, "user": "4fe89475e4b07c9f6fd12c4f"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4fe8e719e4b0547ebccb2430"}, {"code": "(partial into '())", "problem": 23, "user": "4fe8aef4e4b07c9f6fd12c6c"}, {"code": "(fn my-reverse\n   ([xs] (if (empty? xs) xs (my-reverse (vec xs) '())))\n   ([[x & xs] r] (if (nil? xs) (conj r x) (recur xs (conj r x)))))", "problem": 23, "user": "4fe8d862e4b0547ebccb2428"}, {"code": "reduce (fn [a b] (cons b a)) []", "problem": 23, "user": "4fe9231ce4b0547ebccb2445"}, {"code": "(fn my-reverse\r\n  ([a-list]\r\n     (cond (= a-list nil) nil\r\n           :else (cons (last a-list)\r\n              (my-reverse (butlast a-list))))))", "problem": 23, "user": "4fe491f9e4b0e8f79898feb6"}, {"code": "(fn rev-list [x] \n  (if (== (count x) 1) (list (first x)) (concat (rev-list (rest x)) (list (first x)))))", "problem": 23, "user": "4fe8b85be4b07c9f6fd12c77"}, {"code": "(fn [c] (reduce conj '() c))", "problem": 23, "user": "4fe98e07e4b0547ebccb2464"}, {"code": "reduce (fn [x y](conj x y)) '()", "problem": 23, "user": "4fe95203e4b0547ebccb2454"}, {"code": "(fn myrevcons [seq]\n        (if (= (count seq) 0)\n          seq\n          (cons (last seq) (myrevcons (butlast seq)))))", "problem": 23, "user": "4fe87e56e4b07c9f6fd12c40"}, {"code": "(fn [s] (reduce (fn [a b] (cons b a)) '() s))", "problem": 23, "user": "4fe89db2e4b07c9f6fd12c59"}, {"code": "into ()", "problem": 23, "user": "4fe868d1e4b07c9f6fd12c3f"}, {"code": "(fn [x] (reduce conj () x))", "problem": 23, "user": "4fe89c81e4b07c9f6fd12c57"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4fe8b6afe4b07c9f6fd12c76"}, {"code": "(fn [coll]\n  (loop [elts coll result ()]\n    (if (empty? elts)\n      result\n      (recur (rest elts) (cons (first elts) result)))))", "problem": 23, "user": "4fe9d647e4b0547ebccb2472"}, {"code": "(fn my-reverse [a]\r\n  (if (list? a)\r\n    (first a)\r\n    (concat (my-reverse (rest a)) (list (first a)))))", "problem": 23, "user": "4f831dd2e4b033992c121c16"}, {"code": "#(into () %)", "problem": 23, "user": "4fea08a9e4b0547ebccb2484"}, {"code": "(fn rev [seq]\n  (if (empty? (rest seq))\n    seq\n    (cons (last seq) (rev (drop-last seq)))))", "problem": 23, "user": "4fdb881ee4b05e33b9224f5e"}, {"code": "(fn rev [li]\n  (cond (= li nil) nil\n        :else (cons (last li)\n                    (rev (butlast li))))\n)", "problem": 23, "user": "4fea09b2e4b0547ebccb2485"}, {"code": "(fn revert [lst]\n  (cond\n   (empty? (rest lst)) lst\n   :else (concat (revert (rest lst)) (list (first lst)))))", "problem": 23, "user": "4fe89055e4b07c9f6fd12c47"}, {"code": "reduce #(cons %2 %1) []", "problem": 23, "user": "4fe9de74e4b0547ebccb2475"}, {"code": "#(loop [r '() s %] \r\n  (if (empty? s) r (recur (conj r (first s)) (rest s))))", "problem": 23, "user": "4feada56e4b0140c20fb9c11"}, {"code": "into '()", "problem": 23, "user": "4fe9ffeae4b0547ebccb247f"}, {"code": "reduce #(cons %2 %1) '()", "problem": 23, "user": "4fea7594e4b0140c20fb9c06"}, {"code": "reduce #(conj %1 %2) '()", "problem": 23, "user": "4fead955e4b0140c20fb9c10"}, {"code": "reduce conj '()", "problem": 23, "user": "4fea2de5e4b0140c20fb9bfe"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4fe97adde4b0547ebccb245e"}, {"code": "(fn my-reverse [the-thing]\n  (reduce conj '() the-thing))", "problem": 23, "user": "4fe930e9e4b0547ebccb244d"}, {"code": "(fn [s]\n  (loop [s s\n         acc []]\n    (if\n      (nil? (butlast s)) (conj acc (first s))\n      (recur (butlast s) (conj acc (last s))))))", "problem": 23, "user": "4febc4a5e4b0681fd128dc99"}, {"code": "(fn rueckw [cc]\r\n                 (loop [cc cc rev \"\"]\r\n                    (if (= 1 (count cc))\r\n                      (cons (first cc) rev)\r\n                      (recur (rest cc) (cons (first cc) rev)))) )", "problem": 23, "user": "4fe4614ee4b0e8f79898feb3"}, {"code": "reduce conj '()", "problem": 23, "user": "4fec51b4e4b0681fd128dca4"}, {"code": "(fn rev [lst] (if (empty? lst) lst (concat (rev (rest lst)) [(first lst)])))", "problem": 23, "user": "4fe8da4de4b0547ebccb2429"}, {"code": "(fn rev [x] \n  (if (= 1 (count x))\n    x\n    (conj (rev (butlast x)) (last x))\n    )\n  )", "problem": 23, "user": "4fe8a3bde4b07c9f6fd12c61"}, {"code": "#(into () %)", "problem": 23, "user": "4feb65d0e4b0681fd128dc8f"}, {"code": "#(loop [a % l '()]\n  (if (empty? a) l\n  (recur\n    (rest a)\n    (conj l (first a)))))", "problem": 23, "user": "4da8dd6e30acd6ed12482a68"}, {"code": "#(reduce (fn [coll item] (conj coll item)) () %)", "problem": 23, "user": "4fed7ca8e4b0198f34b063b3"}, {"code": "#(into () %)", "problem": 23, "user": "4f8c813de4b02e764a0a519f"}, {"code": "#(into () %)", "problem": 23, "user": "4fedd2cae4b0198f34b063ba"}, {"code": "into ()", "problem": 23, "user": "4fed8dd4e4b0198f34b063b4"}, {"code": "(fn gies_rev [x]\n  (if (empty? x)\n      '() (cons (last x) (gies_rev (butlast x)))\n  )\n)", "problem": 23, "user": "4fe8b307e4b07c9f6fd12c72"}, {"code": "reduce conj ()", "problem": 23, "user": "4fee1574e4b0678c553fc309"}, {"code": "(fn [seq]\n  (loop [seq seq rev '()]\n    (if (empty? seq)\n      rev\n      (recur (rest seq) (conj rev (first seq))))))", "problem": 23, "user": "4feded14e4b0d2a5fc2962ec"}, {"code": "into ()", "problem": 23, "user": "4fe89297e4b07c9f6fd12c4c"}, {"code": "(fn rv[a]\n    (if (empty? a)\n      []\n      (conj (rv (rest a)) (first a))))", "problem": 23, "user": "4febb4dae4b0681fd128dc98"}, {"code": "(fn [torev] (reduce conj '() torev))", "problem": 23, "user": "4f04ac77535dcb61093f6bdc"}, {"code": "(fn [x]\n  (loop [arr_rem x arr '()]\n    (if (empty? arr_rem)\n      arr\n    (recur (rest arr_rem) (cons (first arr_rem) arr))\n    )\n  ))", "problem": 23, "user": "4fedd993e4b0198f34b063bc"}, {"code": "#(->> % (reduce conj nil) )", "problem": 23, "user": "4feef09ae4b0678c553fc30e"}, {"code": "(fn [xs]\n      (let [f (fn [xs' rxs]\n                (if (empty? xs')\n                  rxs\n                  (recur (rest xs') (cons (first xs') rxs))))]\n        (f xs [])))", "problem": 23, "user": "4fb2244ee4b081705acca288"}, {"code": "#((fn [xs ys] (if (empty? xs)\n                   ys \n                  (recur (rest xs)\n                         (conj ys (first xs)))))\n  % '())", "problem": 23, "user": "4fef439ce4b0678c553fc313"}, {"code": "#(loop [acc '() [x & xs] (seq %)] (if x (recur (cons x acc) xs) acc))", "problem": 23, "user": "4fef481ce4b0678c553fc314"}, {"code": "(fn [xs]\n  (reduce conj '() xs))", "problem": 23, "user": "4feff3b6e4b0678c553fc31e"}, {"code": "(fn myreverse [coll]\r\n  (reduce conj () coll))", "problem": 23, "user": "4fd170fce4b04c3a95aa0411"}, {"code": "(fn invert \n  ([coll] (invert coll '()))\n  ([coll tail] (if (empty? coll) tail (invert (rest coll) (conj tail (first coll) ))))\n)", "problem": 23, "user": "4ff01fa9e4b0678c553fc321"}, {"code": "(fn [c] (reduce #(conj %1 %2) '() c))", "problem": 23, "user": "4e95c771535dbda64a6f6b39"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4fe15ffee4b0dd6cd5ce3634"}, {"code": "#(reduce conj nil %)", "problem": 23, "user": "4ff07229e4b0678c553fc323"}, {"code": "(fn [x] \r\n   (loop [y x rev ()]     \r\n     (if (empty? y)\r\n       rev\r\n       (recur (rest y) (conj rev (first y)))\r\n     )\r\n   )\r\n)", "problem": 23, "user": "4ff07688e4b0678c553fc324"}, {"code": "reduce conj ()", "problem": 23, "user": "4ec92a04535d6d7199dd36fa"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4fef4379e4b0678c553fc312"}, {"code": "reduce conj ()", "problem": 23, "user": "4e6a5694535d8ccf87e9fece"}, {"code": "reduce (fn [reversed x] (cons x reversed)) []", "problem": 23, "user": "4febddc9e4b0681fd128dc9a"}, {"code": "(fn [seq] (reduce #(cons %2 %1) '() seq))", "problem": 23, "user": "4fec1d3be4b0681fd128dca0"}, {"code": "(fn rev [seq]\r\n  (first\r\n   (last \r\n    (take-while #(not= (+ 1 (count seq)) (count (first %)))\r\n  \t(iterate \r\n\t\t (fn [[reved seql]]\r\n\t\t     [(cons (first seql) reved) (rest seql)]) [[] seq])))))", "problem": 23, "user": "4fd65b2be4b0d4de60cee37e"}, {"code": "(fn [a]\n (loop [r []\n        org a]\n  (if (empty? org)\n      r\n      (recur (cons (first org)\n                   r)\n             (rest org)))))", "problem": 23, "user": "4fea1f9ee4b0547ebccb248b"}, {"code": "into '()", "problem": 23, "user": "4ff0e01fe4b0678c553fc328"}, {"code": "(fn rev \n  ([x] (rev x '()))\n  ([x accum] (if (empty? x) accum (rev (rest x) (cons (first x) accum)))))", "problem": 23, "user": "4ff2430ae4b0678c553fc336"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "4fc588bee4b0ee37620e17fa"}, {"code": "(fn f[s] (if (empty? s) [] (conj (f (rest s)) (first s))))", "problem": 23, "user": "4fe8aba5e4b07c9f6fd12c68"}, {"code": "#(for [x (range (- (count %) 1) -1 -1)] (nth (seq %) x))", "problem": 23, "user": "4fc559eae4b0ee37620e17f3"}, {"code": "into ()", "problem": 23, "user": "4fe1279fe4b0dd6cd5ce3630"}, {"code": "(fn myrev [seq]\r\n  (loop [x seq y '()]\r\n    (if (empty? x)\r\n      y\r\n      (recur (next x) (conj y (first x))))))", "problem": 23, "user": "4ff201d7e4b0678c553fc330"}, {"code": "#(loop [s % acc '()] \n  (if (empty? s) \n    acc \n    (recur (rest s) (cons (first s) acc))))", "problem": 23, "user": "4eee5459535d93acb0a668c5"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4fee04a0e4b0678c553fc308"}, {"code": "(fn r [lst]\r\n  (if (empty? lst)\r\n    []\r\n    (conj (r (rest lst)) (first lst))))", "problem": 23, "user": "4ff304f4e4b0678c553fc343"}, {"code": "reduce conj ()", "problem": 23, "user": "4db2cd84535df7e46ed9b6c6"}, {"code": "(fn [s]\n  (loop [ps s acc '()]\n    (if (empty? ps)\n        acc\n        (recur (rest ps) (conj acc (first ps))))))", "problem": 23, "user": "4ff35e60e4b0678c553fc350"}, {"code": "((fn [m]\n   ((fn [past]\n      (m (fn [arg]\n           ((past past) arg))))\n    (fn [past]\n      (m (fn [arg]\n           ((past past) arg)))) ))\n (fn [rec]\n   (fn [l]\n     (cond (empty? l) '()\n           (empty? (rest l)) (list (first l))\n           :else (cons (first (rec (rest l)))\n                       (rec (cons (first l)\n                                  (rec (rest (rec (rest l)))) )))) )))", "problem": 23, "user": "4fedec00e4b0d2a5fc2962eb"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4fefd624e4b0678c553fc31b"}, {"code": "#(into () %)", "problem": 23, "user": "4feddf2ee4b0198f34b063be"}, {"code": "(fn rev [c] (reduce conj () c))", "problem": 23, "user": "4ff4c9dae4b0678c553fc360"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "4ff50604e4b0678c553fc365"}, {"code": "(fn [coll] (reduce conj () coll))", "problem": 23, "user": "4ff3e771e4b0678c553fc356"}, {"code": "into ()", "problem": 23, "user": "4fbbae0fe4b081705acca2eb"}, {"code": "reduce conj '()", "problem": 23, "user": "4ff5744ae4b0678c553fc36a"}, {"code": "(fn [s]\n   ((fn accum [rd todo]\n      (if (= todo '())\n        rd\n        (accum (cons (first todo) rd) (rest todo)))) '() s))", "problem": 23, "user": "4ff355a1e4b0678c553fc34d"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "4ff31e13e4b0678c553fc346"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "4ff4f5c4e4b0678c553fc362"}, {"code": "#(loop [l % rl '()]\n(if (nil? (seq l)) rl\n(recur (rest l) (conj rl (first l)))\n)\n)", "problem": 23, "user": "4ff6354fe4b0678c553fc376"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4ff58b05e4b0678c553fc36b"}, {"code": "(fn sort-it [vec]\n  (if (seq vec)\n    (conj (sort-it (rest vec)) (first vec))\n    []))", "problem": 23, "user": "4ff6aea8e4b0678c553fc381"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4ff5a525e4b0678c553fc36d"}, {"code": "(fn [coll]\n  (into () coll))", "problem": 23, "user": "4ff72b8ce4b0678c553fc38b"}, {"code": "(fn rev \n  ([x] (rev x [])) \n  ([x, y] \n   (if (= (count x) 0) y (rev (rest x) (cons (first x) y) ))))", "problem": 23, "user": "4ff6ed6ae4b0678c553fc384"}, {"code": "(fn [initial]\n  (loop [result (), x initial]\n    (if (seq x)\n      (recur (conj result (first x)) (rest x))\n      result)))", "problem": 23, "user": "4ff5a42ae4b0678c553fc36c"}, {"code": "#(loop [a '() c %] (if (empty? c) a (recur (cons (first c) a) (rest c))))", "problem": 23, "user": "4ee624f8535d93acb0a66855"}, {"code": "(fn revers [xs] \n  (loop [ys xs, r []] \n    (if (nil? ys) \n      r \n      (recur (butlast ys) (conj r (last ys))))))", "problem": 23, "user": "4ff35d46e4b0678c553fc34f"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "4ff76222e4b0678c553fc38e"}, {"code": "#(take (count %) (letfn [(to-last [x] (lazy-seq (cons (last x) (to-last (butlast x)))))] (to-last %)))", "problem": 23, "user": "4fba77fae4b081705acca2df"}, {"code": "(fn r [s] (if (empty? s) s \n  (cons (last s) (r (take (dec (count s)) s)))))", "problem": 23, "user": "4ff673b3e4b0678c553fc37d"}, {"code": "(fn [lst]\n  (loop [out () xs lst]\n    (if (nil? xs)\n      out\n      (recur (conj out (first xs)) (next xs)))))", "problem": 23, "user": "4ff743fde4b0678c553fc38d"}, {"code": "reduce conj ()", "problem": 23, "user": "4ff82b00e4b0678c553fc395"}, {"code": "(fn [coll]\n  (reduce #(cons %2 %) '() coll))", "problem": 23, "user": "4ff83003e4b0678c553fc396"}, {"code": "#(into () %)", "problem": 23, "user": "4fe20c55e4b0dd6cd5ce363d"}, {"code": "(fn r ([l] (if (seq l)\r\n  (concat (r (rest l)) [(first l)])\r\n  [])))", "problem": 23, "user": "4ff889f2e4b0678c553fc399"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4ff80e81e4b0678c553fc394"}, {"code": "#(into () %)", "problem": 23, "user": "4f5cfb94e4b0030a34fb2b31"}, {"code": "(fn [c] (loop [coll c\n               result '()]\n          (if (empty? coll)\n              result\n              (recur (rest coll) (conj result (first coll))))))", "problem": 23, "user": "4ff8a89de4b0678c553fc39d"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4f24957ae4b0d66497709fed"}, {"code": "#(into () %)", "problem": 23, "user": "4ff92cd2e4b0678c553fc3a5"}, {"code": "(fn rev [coll] (cond (= coll []) []\r\n:else (conj (rev (rest coll)) (first coll))))", "problem": 23, "user": "4ff9624ce4b0678c553fc3a8"}, {"code": "reduce conj '()", "problem": 23, "user": "4ff67852e4b0678c553fc37e"}, {"code": "(fn [l]\n  (map last \n  (sort #(> (first %) (first %2)) \n  (map-indexed list l))))", "problem": 23, "user": "4ff956eae4b0678c553fc3a7"}, {"code": "#(into () % )", "problem": 23, "user": "4ff99f47e4b0678c553fc3aa"}, {"code": "(fn rev [seq]\n  (if (= (rest seq) ())\n    seq\n   (conj (rev (butlast seq)) (last seq))))", "problem": 23, "user": "4ec14602535dfed6da9c6daa"}, {"code": "(fn [seq]\n  (loop [s seq\n         o nil]\n    (if (nil? s)\n      o\n      (recur (next s) (conj o (first s))))))", "problem": 23, "user": "4ff9d4e5e4b0678c553fc3b0"}, {"code": "(fn [seq]\n    (loop [newseq [] seq (vec seq)]\n          (if (empty? seq)\n                newseq\n          (recur (conj newseq (peek seq)) (pop seq)))))", "problem": 23, "user": "4ff9a200e4b0678c553fc3ab"}, {"code": "into ()", "problem": 23, "user": "4ff4a3ace4b0678c553fc35e"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "4ffa1335e4b0678c553fc3b5"}, {"code": "(fn [xs] (loop [ [h & t] (seq xs) r nil ] (if-not t (cons h r) (recur t (cons h r)))))", "problem": 23, "user": "4ffa213ee4b0678c553fc3b7"}, {"code": "(fn [l] (reduce conj '() l))", "problem": 23, "user": "4ff8fb9ae4b0678c553fc3a4"}, {"code": "(fn [x] ((fn [l acc] (if (empty? l) acc (recur (rest l) \n                                               (cons (first l) acc)))) \n     \t\tx []))", "problem": 23, "user": "4fe9cea4e4b0547ebccb2471"}, {"code": "(fn [coll] (reduce conj () coll))", "problem": 23, "user": "4ff937f2e4b0678c553fc3a6"}, {"code": "(fn [xs] (reduce (fn [a b] (conj a b)) '() xs))", "problem": 23, "user": "4fef76ece4b0678c553fc319"}, {"code": "(fn [seq] (loop [x (count seq) s seq r []] (cond (> x 0) (recur (dec x) (rest s) (cons (first s) r)) :else r)))", "problem": 23, "user": "4fcf1755e4b03432b189f40c"}, {"code": "(fn [sequence] (reduce #(cons %2 %1) (empty sequence) sequence))", "problem": 23, "user": "4e7e443e535db169f9c7970b"}, {"code": "#(into '() %)", "problem": 23, "user": "4e57d1e2535d8a8b8723a289"}, {"code": "into ()", "problem": 23, "user": "4f95900ce4b0dcca54ed6cd3"}, {"code": "(fn rev [s]\n  (if (not (empty? s))\n    (conj (rev (butlast s)) (last s))\n  )\n)", "problem": 23, "user": "4ffb3c50e4b0678c553fc3c8"}, {"code": "#(into '() %)", "problem": 23, "user": "4ffb38e8e4b0678c553fc3c6"}, {"code": "#(into () %)", "problem": 23, "user": "4ff520dee4b0678c553fc367"}, {"code": "#(loop [rev () for %]\n   (if (nil? (next for))\n     (conj rev (first for))\n     (recur (conj rev (first for)) (rest for))))", "problem": 23, "user": "4fecd35fe4b0681fd128dcab"}, {"code": "(fn r [x] \n  (if (empty? x) nil (cons (last x) (r (butlast x)))))", "problem": 23, "user": "4ffb59f6e4b0678c553fc3cf"}, {"code": "reduce conj '()", "problem": 23, "user": "4ffb335ee4b0678c553fc3c5"}, {"code": "reduce #(cons %2 %1) []", "problem": 23, "user": "4fdb02aae4b05e33b9224f56"}, {"code": "(fn my-reverse [lst]\n  (if (empty? lst)\n    lst\n    (cons (last lst) (my-reverse (butlast lst)))))", "problem": 23, "user": "4ff9cfd6e4b0678c553fc3af"}, {"code": "(fn [seq] \n  (loop [s seq \n         result []]\n    (if (> (count s) 0)\n      (recur (drop-last 1 s) (conj result (last s)))\n      result)))", "problem": 23, "user": "4fb1d7ace4b081705acca281"}, {"code": "#(reduce (fn [x y] (cons y x)) '() %)", "problem": 23, "user": "4ffa893fe4b0678c553fc3bc"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "4f0eeff3535d0136e6c22327"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4e539f7e535d8a8b8723a272"}, {"code": "(fn f [x] (if (> (count x) 1) (cons (last x) (f (butlast x))) x))", "problem": 23, "user": "4daf8e61edd6309eace4d179"}, {"code": "(fn rev [x]\n  (if (empty? x)\n      []\n        (conj (rev (rest x)) (first x))))", "problem": 23, "user": "4f942227e4b0dcca54ed6cbe"}, {"code": "reduce conj '()", "problem": 23, "user": "4fe91fa2e4b0547ebccb2440"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "4f9a5e1ee4b0dcca54ed6d09"}, {"code": "reduce (fn [r val] (cons val r)) '()", "problem": 23, "user": "4daa6dd430acd6ed14482a68"}, {"code": "(fn[v] (vec (reduce\n         #(\n        if(list? %1)\n          (conj %1 %2)\n          (list %2 %1))\n         (seq v))))", "problem": 23, "user": "4ff2f0a9e4b0678c553fc341"}, {"code": "#(into () %)", "problem": 23, "user": "4ff9e827e4b0678c553fc3b2"}, {"code": "(fn [x] (loop [input x result []]\n    (if (empty? input)\n      result\n      (recur\n          (rest input) (cons (first input) result)))))", "problem": 23, "user": "4ea38ac4535d7eef308072c8"}, {"code": "(fn [c]\n  (loop [result nil remainder c]\n    (if (empty? remainder)\n        (if (vector? c) (vec result) result)\n        (recur (cons (first remainder) result)\n               (rest remainder)))))", "problem": 23, "user": "4e260220535deb9a81d77ef0"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4ffe4d43e4b0678c553fc3f1"}, {"code": "#(let [cnt (quot (count %1) 2) len (count %1)]\n       (if (vector? %1)\n           (loop [lis %1 a (first %1) b (last %1) c 0]\n                 (if (>= c cnt)\n                     lis\n                     (recur (assoc (assoc lis c b) (- len c 1) a) (nth lis (inc c)) (nth lis (- len c 2)) (inc c))))\n           (if (list? %1)\n               (loop [lis %1 tmp %1]\n                     (if (= () tmp)\n                         lis\n                         (recur (butlast (conj lis (first tmp))) (rest tmp))))\n               (if (sorted? %1) (sort > %1)))))", "problem": 23, "user": "4ffe8193e4b0678c553fc3f4"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "4ffe3349e4b0678c553fc3f0"}, {"code": "#(into () %)", "problem": 23, "user": "4fe8c7dbe4b0547ebccb2423"}, {"code": "(fn [xs]\n  (loop [lst xs acc nil]\n    (if lst\n      (recur (next lst) (cons (first lst) acc))\n      acc)))", "problem": 23, "user": "4ffeec2ce4b0678c553fc3fa"}, {"code": "(fn my-reverse\n  ([c] (my-reverse c ()))\n  ([c a] (if (empty? c)\n  a\n  (my-reverse (rest c) (conj a (first c))))))", "problem": 23, "user": "4fff00ede4b0678c553fc3fc"}, {"code": "(fn r [s]\n  (if (= 0 (count s))\n    []\n    (conj (r (rest s)) (first s))))", "problem": 23, "user": "4fff72b6e4b0678c553fc400"}, {"code": "#(loop [xs % s '()]\n           (if(empty? xs)\n  \t\ts\n            (recur \n             (rest xs) \n             (conj s (first xs))\n             )))", "problem": 23, "user": "4eda05c1535d10e5ff6f5309"}, {"code": "#(into '() (reduce (fn [v x] (conj v x)) [] %))", "problem": 23, "user": "4dde4c8d535d08e6dec9fdd6"}, {"code": "(fn [cl]\n  (let [rr (empty (vec cl)) tt cl]\n    (\n      (fn [t r]\n       (if (empty? t)\n         r\n         (recur (butlast t) (conj r (last t))    \n      )))\n    tt rr)))", "problem": 23, "user": "4fff57f1e4b0678c553fc3fe"}, {"code": "into '()", "problem": 23, "user": "4ff76effe4b0678c553fc390"}, {"code": "reduce conj '()", "problem": 23, "user": "50015be1e4b0678c553fc41a"}, {"code": "(fn [col]\n  (reduce #(cons %2 %1) [] col))", "problem": 23, "user": "500159b3e4b0678c553fc419"}, {"code": "(fn [coll]\n  (loop [result '()\n        coll coll]\n    (if (empty? coll)\n      result\n      (recur (conj result (first coll)) (rest coll)))))", "problem": 23, "user": "4ffb529be4b0678c553fc3cd"}, {"code": "(fn [l] (reduce conj '() l))", "problem": 23, "user": "5001dd97e4b0678c553fc421"}, {"code": "(fn rev\n   ([a] (rev a '[]))\n   ([a b] (if (first a) (rev (rest a) (cons (first a) b)) b)\n   ))", "problem": 23, "user": "4ff8aa3fe4b0678c553fc39e"}, {"code": "reduce conj ()", "problem": 23, "user": "4ff10dd2e4b0678c553fc32a"}, {"code": "(fn tt [s] \n  (if (= (count s) 1) \n    (vec s) \n    (conj (tt (rest s)) (first s))  \n  ))", "problem": 23, "user": "5002ad40e4b0678c553fc42b"}, {"code": "(fn [x]\n   (loop [in x out []]\n    (if (empty? in) out (recur (rest in) (cons (first in) out)))))", "problem": 23, "user": "4fb5033ce4b081705acca2b5"}, {"code": "#(reduce (fn [a e] (cons e a)) '() %)", "problem": 23, "user": "4f625f68e4b0defedf855fd2"}, {"code": "into ()", "problem": 23, "user": "4ffa8affe4b0678c553fc3bd"}, {"code": "(fn [seq] \n  (loop [revseq () sq seq]\n    (if (empty? sq)\n      revseq\n      (recur (cons (first sq) revseq) (rest sq)))))", "problem": 23, "user": "5003bb77e4b0678c553fc442"}, {"code": "(fn [sequence]\n  (reduce (fn [a b] (cons b a) ) [] sequence))", "problem": 23, "user": "5003deb9e4b0678c553fc445"}, {"code": "#(into () %)\n; Exploits the fact that elements are always added at the head of a list.\n; As such the order of the incoming collection is reversed.", "problem": 23, "user": "4ffee0f6e4b0678c553fc3f7"}, {"code": "reduce conj '()", "problem": 23, "user": "50045388e4b0678c553fc44e"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "500388dde4b0678c553fc43d"}, {"code": "reduce conj '()", "problem": 23, "user": "5004d5d0e4b0678c553fc456"}, {"code": "into ()", "problem": 23, "user": "4fa719c0e4b081705acca1bf"}, {"code": "into ()", "problem": 23, "user": "5003ee7de4b0678c553fc446"}, {"code": "(fn [l] (into () l))", "problem": 23, "user": "4faa1157e4b081705acca1ea"}, {"code": "(fn [x](reduce #(cons %2 %1) [] x))", "problem": 23, "user": "50054b5ce4b0678c553fc45f"}, {"code": "reduce (fn [tail e] (conj tail e)) '()", "problem": 23, "user": "50052d38e4b0678c553fc45c"}, {"code": "(fn my-reverse [coll]\n  (letfn [\n    (my-reverse' [coll acc]\n      (if (seq coll) (recur (rest coll) (cons (first coll) acc)) acc))]\n  (my-reverse' coll [])))", "problem": 23, "user": "500574d9e4b0678c553fc463"}, {"code": "(fn rvv [sequ]\n    (reduce conj '() sequ))", "problem": 23, "user": "50057f23e4b0678c553fc466"}, {"code": "#(into () %)", "problem": 23, "user": "500147e1e4b0678c553fc418"}, {"code": "reduce (fn[rev-lis v] (concat (list v) rev-lis)) []", "problem": 23, "user": "4ffd92e7e4b0678c553fc3e3"}, {"code": "(fn [items]\n (reduce conj () items))", "problem": 23, "user": "50052fd0e4b0678c553fc45d"}, {"code": "apply conj '()", "problem": 23, "user": "5005b57de4b0678c553fc46a"}, {"code": "(fn rr [coll] (map #(nth %1 1) (sort #(> (first %1) (first %2)) (map-indexed list coll))))", "problem": 23, "user": "4fe9ef2fe4b0547ebccb2479"}, {"code": "(fn my-reverse\n  ([coll]     (my-reverse coll []))\n  ([coll acc] (if (empty? coll) acc (my-reverse (rest coll) (cons (first coll) acc)))))", "problem": 23, "user": "5002b6e5e4b0678c553fc42c"}, {"code": "#(into () %)", "problem": 23, "user": "4fea9154e4b0140c20fb9c0a"}, {"code": "(fn inx [x] (if (not= (count x) 1) (conj (vec (inx (rest x))) (first x)) [(first x)]))", "problem": 23, "user": "5006981ce4b0678c553fc489"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "4ee528fb535d1385b2869d87"}, {"code": "#(into '() %)", "problem": 23, "user": "5005b7bae4b0678c553fc46b"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "4ff35abce4b0678c553fc34e"}, {"code": "#( ( fn rev [coll0 coll1] \r\n  (if (empty? coll0) coll1 \r\n  \t(rev (rest coll0) (cons (first coll0) coll1)))) \r\n% [])", "problem": 23, "user": "5006474ce4b0678c553fc481"}, {"code": "(fn foo [s] (loop [acc '() r s] (if (not (seq r)) acc (recur (conj acc (first r)) (rest r)))))", "problem": 23, "user": "4ffb43b9e4b0678c553fc3ca"}, {"code": "(fn [ list & acc ]\n  (if (empty? list) acc\n    (recur (rest list) (cons (first list) acc))))", "problem": 23, "user": "50086dafe4b028e089d3518d"}, {"code": "(fn rev \n   ([s] (rev '() s)) \n   ([r s] (if (seq s) (rev (cons (first s) r) (rest s)) r )) )", "problem": 23, "user": "500896a2e4b0144d4f561e38"}, {"code": "(fn rr [xs] (if (empty? xs) '() (conj (rr (butlast xs)) (last xs))))", "problem": 23, "user": "500854c4e4b028e089d3518c"}, {"code": "reduce #(cons %2 %) []", "problem": 23, "user": "5007e90be4b0b17c647f5228"}, {"code": "into '()", "problem": 23, "user": "5006b262e4b0678c553fc48a"}, {"code": "into ()", "problem": 23, "user": "4ff30a84e4b0678c553fc344"}, {"code": "(fn foo [list]\n  (if (empty? list)\n    []\n    (let [add-on (first list)\n          output (foo (rest list))\n\t        output (conj output add-on)]\n      (println output)\n      output)))", "problem": 23, "user": "500850f4e4b028e089d3518b"}, {"code": "reduce conj ()", "problem": 23, "user": "4f9f9ff5e4b0dcca54ed6d3a"}, {"code": "(fn [x]\n  (loop [lst x output nil]\n    (if (not (empty? lst))\n      (recur (rest lst) (conj (seq output) (first lst)))\n      output)))", "problem": 23, "user": "5008b795e4b0144d4f561e3e"}, {"code": "#(into () %)", "problem": 23, "user": "50097962e4b03d00572d2d6c"}, {"code": "into()", "problem": 23, "user": "5005b0d1e4b0678c553fc469"}, {"code": "#(apply conj '() %)", "problem": 23, "user": "500933a6e4b046cdb195e074"}, {"code": "(fn [x] \n  (loop [s x r '()]\n    (if (empty? s)\n      r\n      (recur (rest s) (cons (first s) r)))))", "problem": 23, "user": "5009fd0ae4b03d00572d2d70"}, {"code": "reduce conj ()", "problem": 23, "user": "500aa15ee4b03d00572d2d76"}, {"code": "(fn \n  [coll & x]\n  (if (nil? (seq coll))\n    x\n    (recur (rest coll) (cons (first coll) x))))", "problem": 23, "user": "5006c169e4b0678c553fc48d"}, {"code": "(fn rvrs [x] (if (= x '()) '()\n(cons (last x) \n      (rvrs ((fn antirest [x] \n             (if (= (rest x) '()) '()\n                 (cons (first x)\n                       (antirest (rest x)))))\n             x)))))", "problem": 23, "user": "5009902ee4b03d00572d2d6d"}, {"code": "(fn [x] \n  (loop [l x, v []]\n  (if (empty? l) \n    v\n    (recur (butlast l) (conj v (last l))))))", "problem": 23, "user": "500b61b1e4b03d00572d2d81"}, {"code": "(fn [c]\n  (loop [s c r '()]\n    (if (= (count s) 0) r\n        (recur (rest s) (cons (first s) r)))))", "problem": 23, "user": "5007cdb9e4b0b17c647f5227"}, {"code": "apply conj ()", "problem": 23, "user": "500b6685e4b03d00572d2d82"}, {"code": "reduce conj '()", "problem": 23, "user": "5006e494e4b0678c553fc492"}, {"code": "reduce conj '()", "problem": 23, "user": "500cb910e4b05f7c30cfa698"}, {"code": "(fn [s]\n  (reduce conj (list) s))", "problem": 23, "user": "500cc693e4b05f7c30cfa69a"}, {"code": "#(apply conj () %)", "problem": 23, "user": "500900dee4b0144d4f561e42"}, {"code": "#(reduce (fn [cum it] (conj cum it)) '() %)", "problem": 23, "user": "4fe900a6e4b0547ebccb243a"}, {"code": "(fn rev-seq [lat]\n  (into '() lat))", "problem": 23, "user": "500d86e8e4b0ff215386cad4"}, {"code": "(fn [s]\n  (loop [s s\n         rev '()]\n    (if-let [s (seq s)]\n      (recur (next s) (conj rev (first s)))\n      rev)))", "problem": 23, "user": "500d8c49e4b07ccb9a7ddb00"}, {"code": "#(loop [orig % rev []]\n   (if (empty? orig)\n     rev\n     (recur (rest orig) (cons (first orig) rev))))", "problem": 23, "user": "4fed24a5e4b0681fd128dcaf"}, {"code": "(fn [l]\n  (loop [lis l acc []]\n    (if (empty? lis) acc (recur (rest lis) (cons (first lis) acc)))))", "problem": 23, "user": "500e38a5e4b068062f6e8d90"}, {"code": "(fn l [x] (if (= (seq x) nil) nil (cons (last x) (l (seq (first (split-at (- (count x) 1) x)))))))", "problem": 23, "user": "500cf638e4b05f7c30cfa69d"}, {"code": "(fn [n] (reduce conj () n))", "problem": 23, "user": "500e9d2fe4b00fff93030f9a"}, {"code": "reduce (fn [c v] (cons v c)) '()", "problem": 23, "user": "4ff9f5c5e4b0678c553fc3b4"}, {"code": "(fn [x]\n  (loop [sq x\n         res '()]\n    (if-let [head (first sq)]\n      (recur (rest sq) (conj res head))\n      res)))", "problem": 23, "user": "500e6ddee4b04a05d36fcc06"}, {"code": "(fn [s] (reduce conj '() s))", "problem": 23, "user": "500d1db4e4b05f7c30cfa69f"}, {"code": "(fn [coll]\n  (loop [coll coll revcoll []]\n    (if (empty? coll) revcoll\n  (recur (rest coll) (cons (first coll) revcoll)))))", "problem": 23, "user": "4fc9a977e4b0ee37620e1847"}, {"code": "(partial reduce conj '())", "problem": 23, "user": "500dac60e4b0039234aa867b"}, {"code": "(fn [x]\r\n  (reduce conj () x))", "problem": 23, "user": "4f041af6535dcb61093f6ba3"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "500ec210e4b00fff93030f9d"}, {"code": "#(reduce conj '() %1)", "problem": 23, "user": "500e6c4ee4b04a05d36fcc05"}, {"code": "(fn [s]\n  ((fn shaz [in out] (if (= (count in) 0) out (shaz (next in) (conj out (first in)))))\n    s\n    '()\n  )\n)", "problem": 23, "user": "500f4f2fe4b03ec779321689"}, {"code": "#(apply conj '() %)", "problem": 23, "user": "500ff421e4b0ae202717946f"}, {"code": "into ()", "problem": 23, "user": "500ee13be4b00fff93030fa1"}, {"code": "into ()", "problem": 23, "user": "500ebe23e4b00fff93030f9c"}, {"code": "reduce #(cons %2 %1) []", "problem": 23, "user": "500e91aae4b00fff93030f99"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "500abce2e4b03d00572d2d77"}, {"code": "(fn [l] (reduce conj () l))", "problem": 23, "user": "50053d6ce4b0678c553fc45e"}, {"code": "reduce (fn [acc n] (conj acc n)) ()", "problem": 23, "user": "500cc860e4b05f7c30cfa69b"}, {"code": "(fn [s]\n  (reduce conj '() s))", "problem": 23, "user": "5010861fe4b04030df6167af"}, {"code": "#(loop [rev () sq %]\n    (if (= (count sq) 0) rev\n(recur (cons (first sq) rev) (rest sq))))", "problem": 23, "user": "500fbfabe4b0c8af2eae4184"}, {"code": "(fn [s]\n  ((fn [in out]\n     (if (empty? in)\n       out\n       (recur (rest in) (conj out (first in)))))\n   s '()))", "problem": 23, "user": "50119c07e4b028e9d38b393f"}, {"code": "(fn rev [l]\n  (concat\n    (if (not= (count l) 1)\n        (rev (rest l)))\n    (list (first l))\n))", "problem": 23, "user": "501284d9e4b030d97e4db710"}, {"code": "into ()", "problem": 23, "user": "4fae0b85e4b081705acca245"}, {"code": "(fn getrev [x]\n  (if (empty? x)\n    '()\n    (concat (getrev (rest x)) (list (first x)))))", "problem": 23, "user": "5012aefce4b0c8732600222a"}, {"code": "#(reduce (fn [a b] (cons b a)) [] %)", "problem": 23, "user": "5012ec0ae4b0c87326002230"}, {"code": "#(loop [togo % sol []]\n  (if (nil? togo)\n    sol\n    (recur (butlast togo)\n      (conj sol (last togo)))))", "problem": 23, "user": "5012614ee4b02a085b99dc79"}, {"code": "(fn [s]\n  ((fn [s acc]\n    (let [hd (first s)\n          tl (rest s)]\n      (cond\n        hd (recur tl (cons hd acc))\n        :else acc))) s '()))", "problem": 23, "user": "5013193ae4b0f26a0e3320ab"}, {"code": "(fn [seq]\n  ((fn rev [seq stack]\n    (if (empty? seq)\n        stack\n        (rev (rest seq) (conj stack (first seq))))\n  ) seq '()))", "problem": 23, "user": "5013f715e4b0510f6b41d38c"}, {"code": "(fn [a] (reduce #(cons %2 %1) [] a))", "problem": 23, "user": "5013141de4b0f26a0e3320a9"}, {"code": "(fn [s]\n  (reduce conj '() s))", "problem": 23, "user": "5007f751e4b0b17c647f522b"}, {"code": "(fn [x] \n  ((fn r [y a]\n    (if (empty? y) \n    a\n    (r (rest y) (conj a (first y)))))\n    x '()))", "problem": 23, "user": "4f8320e9e4b033992c121c18"}, {"code": "#(into '() %)", "problem": 23, "user": "50142490e4b07d18bdaaf70a"}, {"code": "into ()", "problem": 23, "user": "5014718fe4b094324338f8e3"}, {"code": "reduce conj '()", "problem": 23, "user": "5014754de4b094324338f8e5"}, {"code": "(fn a \n  ([s] (a s ()))\n  ([s ac] (if (empty? s) ac\n             (a (rest s) (cons (first s) ac)))))", "problem": 23, "user": "4fda8f57e4b05e33b9224f4e"}, {"code": "(fn rever [xs]\n  (if (next xs) (cons (last xs) (rever (drop-last xs)))\n\t\t\t\t  xs))", "problem": 23, "user": "500ec491e4b00fff93030f9e"}, {"code": "(fn reverse2 [s]\n  (reduce conj () s)\n  )", "problem": 23, "user": "500a214de4b03d00572d2d74"}, {"code": "(fn [s]\n  (reduce conj '() s))", "problem": 23, "user": "501577ade4b0aaedd199e911"}, {"code": "(fn rev [lst] (if (empty? lst) [] (conj (rev (rest lst)) (first lst))))", "problem": 23, "user": "50063098e4b0678c553fc47a"}, {"code": "(fn [coll]\n  (reduce #(conj % %2) '() (seq coll)))", "problem": 23, "user": "50127fbfe4b030d97e4db70f"}, {"code": "(partial reduce conj '())", "problem": 23, "user": "50166470e4b052339a490e76"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "501668b4e4b052339a490e77"}, {"code": "(fn [s]\n    (letfn [(myreverse [s r]\n                     (if (seq s)\n                       (recur (rest s) (conj r (first s)))\n                       r))]\n      (myreverse s '())))", "problem": 23, "user": "500ea957e4b00fff93030f9b"}, {"code": "into ()", "problem": 23, "user": "5017d9a9e4b0adbf98d88a3f"}, {"code": "#(reduce (fn[x,y] (conj x y)) '() %)", "problem": 23, "user": "5017eface4b02f523d7cc5e7"}, {"code": "reduce conj ()", "problem": 23, "user": "501688f7e4b052339a490e7a"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4ff78679e4b0678c553fc392"}, {"code": "(fn rev [x]\n  (\n    if (= nil (last x))\n      nil\n      (cons (last x) (rev (drop-last x)))\n  )\n)", "problem": 23, "user": "4fb7b80ae4b081705acca2d4"}, {"code": "(fn mycount [seq]\n        (if (= (count seq) 1)\n          seq\n          (concat (mycount (rest seq)) (list (first seq)))\n          \n      )\n      )", "problem": 23, "user": "50158fa0e4b0aaedd199e913"}, {"code": "(fn asd[x]\n  (conj (if (next x) (asd (next x)) []) (first x)))", "problem": 23, "user": "4f82f9f7e4b033992c121c10"}, {"code": "(fn f [x] (if (> (count x) 1) (concat (f (rest x)) (take 1 x)) x))", "problem": 23, "user": "5017f840e4b02f523d7cc5e8"}, {"code": "reduce conj ()", "problem": 23, "user": "5018ed15e4b011a2e0bf6412"}, {"code": "#(into () %)", "problem": 23, "user": "4fe88cc1e4b07c9f6fd12c42"}, {"code": "(fn this [w]\r\n    (let [t (into () w)]\r\n    (cond\r\n      (vector? w) (into [] t)\r\n      (seq? w) (into {} t)\r\n      :else t\r\n    )\r\n    )\r\n  )", "problem": 23, "user": "501819efe4b02f523d7cc5eb"}, {"code": "reduce conj '()", "problem": 23, "user": "50182f53e4b02f523d7cc5ec"}, {"code": "(fn [seq]\n  (loop [old seq new '()]\n    (if (empty? old)\n        new\n        (recur (rest old) (cons (first old) new)))))", "problem": 23, "user": "4ffe1df9e4b0678c553fc3ed"}, {"code": "(fn rev [xs] (if (= 0 (count xs)) [] (conj (rev (rest xs)) (first xs))))", "problem": 23, "user": "500f336be4b03ec779321687"}, {"code": "#(reduce (fn [out in] (cons in out)) [] %)", "problem": 23, "user": "501a145de4b084c2705dde17"}, {"code": "(fn rev[s]\n  (let [r (rest s)]\n    (if (not (empty? r))\n      (concat (rev r) (list (first s)))\n      s)))", "problem": 23, "user": "501948b3e4b0b6630b101db5"}, {"code": "(fn [myseq]\n  (loop [acc '() old myseq]\n    (if (empty? old) \n      acc\n      (recur (conj acc (first old)) (rest old))\n    )\n  )\n)", "problem": 23, "user": "501b212ee4b0b12d9c5f4d83"}, {"code": "(fn [x] (reduce conj () x))", "problem": 23, "user": "4ff66816e4b0678c553fc37a"}, {"code": "reduce conj '()", "problem": 23, "user": "501b1a8ee4b0b12d9c5f4d81"}, {"code": "(fn [s]\n  (reduce #(cons %2 %1) [] s)\n)", "problem": 23, "user": "4dbac43b535d1e037afb21ac"}, {"code": "#(into () %)", "problem": 23, "user": "501c41e3e4b0539218e73b3b"}, {"code": "(fn myreverse [xs] \n  (if (empty? (rest xs)) \n    [(first xs)] \n    (conj (myreverse (rest xs)) (first xs))))", "problem": 23, "user": "501c2dfce4b0539218e73b39"}, {"code": "#(vals (zipmap (range (count %1) 0 -1) %1))", "problem": 23, "user": "501d34f6e4b066e56b9d0b1e"}, {"code": "into ()", "problem": 23, "user": "501d52a8e4b066e56b9d0b20"}, {"code": "(fn [xs]\n  (let [r (fn [xs ys]\n              (if (seq xs)\n                  (recur (rest xs) (conj ys (first xs)))\n                  ys))]\n    (r (seq xs) '())))", "problem": 23, "user": "501c76eae4b01d3bc87c0201"}, {"code": "(fn [s]\n  (reduce conj () s))", "problem": 23, "user": "501dd61de4b051153f3b5b7d"}, {"code": "(fn f [let]\n  (if (empty? let) []\n      (conj (f (rest let)) (first let))))", "problem": 23, "user": "501b1efee4b0b12d9c5f4d82"}, {"code": "(fn f [x]\n  (reduce conj () x))", "problem": 23, "user": "4fe9b372e4b0547ebccb246b"}, {"code": "(fn reverse-bob\n  [data]\n    (letfn [\n      (rev-itr \n        [data-in data-out]\n        (if-not (empty? data-in)\n          (rev-itr \n            (rest data-in) \n            (cons (first data-in) data-out))\n          data-out))]\n    (rev-itr data '() )))", "problem": 23, "user": "501d0321e4b066e56b9d0b1d"}, {"code": "(fn rev [xs]\n  (if (= xs [])\n    []\n    (cons\n      (last xs) \n      (rev (take (- (count xs) 1) xs))\n    )\n  )\n)", "problem": 23, "user": "50013694e4b0678c553fc417"}, {"code": "#(if (= (type %1) (type [1]))\r\n  (into [] (into () %1))\r\n\t(into () (into [] %1)))", "problem": 23, "user": "5018eb4ee4b011a2e0bf6411"}, {"code": "(fn [col]\n  (for [x (range (- (count col) 1) -1 -1)\n        :let [c (nth (seq col) x)]]\n    c))", "problem": 23, "user": "501dfd54e4b051153f3b5b80"}, {"code": "(fn rev[list]\n  (if (empty? list)\n      []\n      (cons (last list) (rev (butlast list)))\n  )\n)", "problem": 23, "user": "501b4af5e4b0ae3ec3946093"}, {"code": "(partial reduce (fn [a i] (cons i a)) nil)", "problem": 23, "user": "4ec57e4a535d6d7199dd36a4"}, {"code": "(fn [x]\n  (loop [o x n ()]\n    (if (= o ()) n (recur (rest o) (conj n (first o))))))", "problem": 23, "user": "501fe6fae4b0cb6ebc0a42ef"}, {"code": "(fn [x]\n  (letfn [(head [x y] (if (not (= 0 (count x)))\n                        (recur (rest x) (conj y (first x)))\n                        y))]\n    (head x '())))", "problem": 23, "user": "501fed56e4b0cb6ebc0a42f0"}, {"code": "(fn my-reverse \n  ([li] (my-reverse li []))\n  ([li result]\n   (if (empty? li)\n     result\n     (my-reverse (rest li) (cons (first li) result)))))", "problem": 23, "user": "4ffc89e9e4b0678c553fc3dc"}, {"code": "#(apply conj '() %)", "problem": 23, "user": "5012036ce4b0a040369c12f4"}, {"code": "#(reduce (fn [acc item] (conj acc item)) '() %1)", "problem": 23, "user": "501adc55e4b0968d2b1d44af"}, {"code": "#(into () %)", "problem": 23, "user": "50202d1ae4b0cb6ebc0a42f3"}, {"code": "(fn rever [x]\n  (if (= x '())\n    []\n    (conj (rever (rest x)) (first x))))", "problem": 23, "user": "5020692be4b0cb6ebc0a42f6"}, {"code": "(fn rr \r\n  ([coll] (rr (butlast coll) (last coll)))\r\n  ([coll f]\r\n  (if (not-empty coll)\r\n    (cons f (rr coll))\r\n    (list f) \r\n  )))", "problem": 23, "user": "5020d033e4b0cb6ebc0a42fa"}, {"code": "#(into () %)", "problem": 23, "user": "5020d2aee4b0cb6ebc0a42fb"}, {"code": "(fn [x]\n  (reduce #(conj %1 %2) '() (seq x)))", "problem": 23, "user": "501c1492e4b086d93747d180"}, {"code": "reduce conj ()", "problem": 23, "user": "4f1af7e4535d64f603146471"}, {"code": "(fn func [l]\r\n  (if (second l)\r\n    (conj (func (butlast l))\r\n          (last l))l))", "problem": 23, "user": "4fdc067fe4b05e33b9224f69"}, {"code": "reduce conj '()", "problem": 23, "user": "50223ee2e4b0846bc458ae48"}, {"code": "into ()", "problem": 23, "user": "50233f64e4b0b5d8b1bd2399"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4ff54bfbe4b0678c553fc369"}, {"code": "(fn [x1]\n  (loop [r (), x x1]\n    (if (empty? x)\n      r\n      (recur (cons (first x) r) (rest x)))))", "problem": 23, "user": "501fcd59e4b0cb6ebc0a42ec"}, {"code": "(fn reverse-seq \n  [c1]\n\t(loop [lc1 c1 rc '()]\n\t\t(if (empty? lc1)\n\t\t\trc\n\t\t\t(recur (rest lc1) (cons (first lc1) rc)))))", "problem": 23, "user": "4f2942ace4b0d6649770a01e"}, {"code": "(fn rev [s]\n  (if (empty? s) '()\n    (cons (last s) (rev (butlast s)))))", "problem": 23, "user": "4fcf642ee4b03432b189f410"}, {"code": "(fn ! [l] (if (seq l) (conj (! (rest l)) (first l)) []))", "problem": 23, "user": "50232eeae4b0b5d8b1bd2397"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "5025b93ce4b0c969f0b056df"}, {"code": "(fn r [s] \n  (if (empty? s)\n    s\n    (cons (last s) (r (butlast s)))))", "problem": 23, "user": "4ffbc28ce4b0678c553fc3d4"}, {"code": "(fn rev-seq [lat]  (into '() lat))", "problem": 23, "user": "50208575e4b0cb6ebc0a42f7"}, {"code": "(fn [s]\n  (let [k (count s)]\n    (loop [k k r () s s]\n      (if (= k 0)\n          r\n          (recur (dec k) (conj r (first s)) (rest s))))))", "problem": 23, "user": "502421ebe4b09f7ee7fb4377"}, {"code": "(fn rev [seq]\n  ( if ( = (count seq) 0 ) \n    seq\n    ( cons ( last seq ) ( rev (drop-last seq ) ) ) ) )", "problem": 23, "user": "5026916fe4b0c969f0b056e1"}, {"code": "(fn x [l]\n  (if (= (count l) 1) \n(list (first l))\n(concat (x (rest l)) (list (first l)))))", "problem": 23, "user": "5027b41ee4b01614d1633fee"}, {"code": "#(into () %)", "problem": 23, "user": "50270618e4b01614d1633feb"}, {"code": "(fn [s] (reduce conj () s))", "problem": 23, "user": "5027fc0ce4b01614d1633ff2"}, {"code": "reduce conj ()", "problem": 23, "user": "4ee3e3b8535d10e5ff6f5373"}, {"code": "(fn [s]\n  (let [rev-iter\n    (fn [in out]\n      (if (empty? in)\n        out\n        (recur (rest in) (cons (first in) out))))]\n  (rev-iter s '())))", "problem": 23, "user": "5027f37be4b01614d1633ff1"}, {"code": "(fn [s]\r\n  (let [v (vec s)]\r\n    (map-indexed (fn [index val] (nth v (- (count v) index 1))) v)))", "problem": 23, "user": "502873a8e4b01614d1633ff8"}, {"code": "#(reduce (fn [result x] (conj result x)) () %)", "problem": 23, "user": "5028cd0fe4b01614d1633ffc"}, {"code": "(fn [coll]\n  (loop [coll coll r '()]\n    (if (seq coll)\n      (recur (rest coll) (cons (first coll) r))\n      r)))", "problem": 23, "user": "502904e0e4b0feaf66e22fad"}, {"code": "#(into () %)", "problem": 23, "user": "4fcf763de4b03432b189f413"}, {"code": "(fn [coll]\n  (reduce conj '() coll))", "problem": 23, "user": "502925b9e4b0b6c928ad6201"}, {"code": "reduce (fn [list act] (conj list act)) '()", "problem": 23, "user": "5027bbe3e4b01614d1633fef"}, {"code": "(fn rev [elts]\n  (if (empty? (rest elts))\n    elts\n    (concat (rev (rest elts)) (list (first elts)))\n  )\n)", "problem": 23, "user": "502940a9e4b061fd216be4b8"}, {"code": "reduce conj ()", "problem": 23, "user": "501fa1aee4b0cb6ebc0a42eb"}, {"code": "(fn [s]\n  (loop [r (empty s), ss s]\n    (if (empty? ss) r\n      (recur (cons (first ss) r) (rest ss)))))", "problem": 23, "user": "502ac96de4b0614b5299611b"}, {"code": "(fn [xs]\n  (into '() xs))", "problem": 23, "user": "502ad27fe4b0614b5299611e"}, {"code": "(fn [v]\n  (reduce conj () v))", "problem": 23, "user": "5028bce0e4b01614d1633ffb"}, {"code": "(fn [c] (reduce conj () c))", "problem": 23, "user": "502a5fa4e4b09e8f859a9fbd"}, {"code": "(fn [x]\n  ((fn [lst wip]\n   (if (empty? lst)\n    wip\n    (recur (rest lst) (cons (first lst) wip))))\n  x ()))", "problem": 23, "user": "50293245e4b08353e5d459cf"}, {"code": "(fn r [l]\n  (let [a (first l) b (next l)]\n    (concat\n      (when b (r b))\n      [a])))", "problem": 23, "user": "4e8a880b535d65386fec210d"}, {"code": "reduce conj ()", "problem": 23, "user": "502ade49e4b0614b52996120"}, {"code": "(fn [c]\n  (reduce conj '() c))", "problem": 23, "user": "502a3ffbe4b01f0b5e5efaa5"}, {"code": "(fn [full-seq]\n  (loop [s full-seq result []]\n    (if (empty? s)\n      result\n      (recur (rest s) (into [(first s)] result)))))", "problem": 23, "user": "50294c28e4b0b33e9bf6fdef"}, {"code": "(fn [x] (reduce conj () (vec x)))", "problem": 23, "user": "502ad2cae4b0614b5299611f"}, {"code": "into ()", "problem": 23, "user": "502113cee4b0ef1d2d4433b8"}, {"code": "(fn [lst]\n  (vec ((fn [l acc]\n         (if (not (seq l)) acc\n             (recur (rest l) (cons (first l) acc))))\n        lst [])))", "problem": 23, "user": "502a4fdfe4b09dd42f6f3644"}, {"code": "#( reduce conj '() %1)", "problem": 23, "user": "502952c9e4b0b33e9bf6fdf1"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "502d387fe4b0d96a44ab202f"}, {"code": "#(into () %)", "problem": 23, "user": "502d39c5e4b0d96a44ab2031"}, {"code": "(fn rev\n  ([xs] (rev xs []))\n  ([xs r] \n    (case xs\n      [] r\n      (rev (rest xs) (concat [(first xs)] r)))))", "problem": 23, "user": "501306dee4b0c87326002231"}, {"code": "(fn rev [l]\n  (if (empty? l)\n     l\n     (conj (vec (rev (rest l))) (first l))))", "problem": 23, "user": "502d3912e4b0d96a44ab2030"}, {"code": "#(into () %)", "problem": 23, "user": "502c946be4b0532a782a5e36"}, {"code": "reduce (fn [vec x] (conj vec x)) '()", "problem": 23, "user": "4fb01e53e4b081705acca260"}, {"code": "reduce #(conj %1 %2) '()", "problem": 23, "user": "4e952463535dbda64a6f6b31"}, {"code": "(fn ruck [a] (if (= a '()) [] (conj (ruck (rest a)) (first a))))", "problem": 23, "user": "502c8681e4b0532a782a5e35"}, {"code": "(fn [ii]\n(loop [i ii o []]\n  (if (seq i)\n    (recur (rest i) (cons (first i) o))\n    o\n    )))", "problem": 23, "user": "5020a3fbe4b0cb6ebc0a42f8"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "502dbea6e4b019d6f1094ef0"}, {"code": "(fn\n  [coll]\n  (let\n      [ret (atom ())\n       c-seq (take-while #(not (nil? %)) coll)]\n    (dosync\n     (doseq [c c-seq]\n       (swap! ret (fn [& _]\n                    (cons c @ret)))))\n    @ret))", "problem": 23, "user": "4f601623e4b0defedf855fa3"}, {"code": "(fn a [d] (if (empty? d) d\n          (conj (vec (a (rest d))) (first d))))", "problem": 23, "user": "502d39f8e4b0d96a44ab2032"}, {"code": "(fn inverter [x] \r\n  (if (= (first x) nil)\r\n    nil\r\n    (concat (inverter (rest x)) (list (first x)))))", "problem": 23, "user": "50206641e4b0cb6ebc0a42f5"}, {"code": "#(reduce conj nil %)", "problem": 23, "user": "502e658de4b09697bcd83a7f"}, {"code": "(fn [xs] (\r\n  (fn go [xs sx] \r\n    (if (= () xs)\r\n        sx\r\n       (go (rest xs)\r\n           (conj sx (first xs))))) xs ()))", "problem": 23, "user": "502d30b1e4b013c13c6a99f0"}, {"code": "#(into () %)", "problem": 23, "user": "502e4b6fe4b09697bcd83a7e"}, {"code": "(fn [coll]\n  (loop [coll coll\n         acc nil]\n    (if (empty? coll)\n      acc\n      (recur (rest coll) (cons (first coll) acc)))))", "problem": 23, "user": "502ec7aae4b06efe12e8cc78"}, {"code": "#(into() %)", "problem": 23, "user": "50046d7be4b0678c553fc451"}, {"code": "(fn [s]\r\n  (reduce (fn [x y] (conj x y)) '() (seq s)))", "problem": 23, "user": "502f4c89e4b0842eb223d8b9"}, {"code": "(fn my-rev [xs] \n  ((fn doit [ys acc] \n    (if (= ys ()) acc (doit (rest ys) (conj acc (first ys)))))\n  xs ()))", "problem": 23, "user": "502aaadee4b0614b52996117"}, {"code": "(fn rev [s]\n  (if s\n    (conj (rev (butlast s)) (last s))\n  )\n)", "problem": 23, "user": "502fb9bee4b0f8db655c4ee2"}, {"code": "#(loop [s % r '()]\n  (if (empty? s)\n    r\n    (recur (rest s)\n            (cons (first s) r))))", "problem": 23, "user": "502a9fdee4b095a7adb898b4"}, {"code": "(fn [seq]\n  (loop [result '() coll seq]\n  (if (empty? coll)\n    result\n    (recur (conj result (first coll)) (rest coll)))))", "problem": 23, "user": "5017a3a6e4b0adbf98d88a3e"}, {"code": "reduce conj '()", "problem": 23, "user": "502cff22e4b0b2ab8d5c7e72"}, {"code": "(fn rev [c]\r\n  (if\r\n    (empty? c) nil\r\n    (conj (vec (rev (rest c))) (first c))))", "problem": 23, "user": "502ac868e4b0614b5299611a"}, {"code": "(fn a [ls] \n  \t(if (= (count ls) 0) [] (conj (a (rest ls)) (first ls))))", "problem": 23, "user": "4ffdca56e4b0678c553fc3e9"}, {"code": "reduce conj ()", "problem": 23, "user": "502b0804e4b063e52107afad"}, {"code": "reduce conj '()", "problem": 23, "user": "4df39b50535d08e6dec9fe29"}, {"code": "reduce (fn [a b] (cons b a)) `{}", "problem": 23, "user": "502bb7c0e4b0194ad32ea1a3"}, {"code": "(fn [s]\n  (loop [s s rs []]\n  (if (empty? s) rs\n    (recur (rest s) (cons (first s) rs)))))", "problem": 23, "user": "5029fccee4b023940c84aa47"}, {"code": "(fn [coll]\n  (loop [c coll r '()]\n    (if (empty? c) r\n      (recur (rest c) (conj r (first c))))))", "problem": 23, "user": "5030f16fe4b05b7df5a0b84b"}, {"code": "into '()", "problem": 23, "user": "502ea7bce4b078f26332e748"}, {"code": "#(into ()  %1)", "problem": 23, "user": "4dfb7b81535d04ed9115e77d"}, {"code": "(fn b [a]\n  (loop [c nil aa a]\n    (if (> (count aa) 0)\n      (recur (conj c (first aa)) (rest aa))\n      c)))", "problem": 23, "user": "503279b1e4b0e78df07b0930"}, {"code": "into ()", "problem": 23, "user": "5032a334e4b0e78df07b0931"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "5032b066e4b00c0952a257ea"}, {"code": "#(apply conj () %)", "problem": 23, "user": "502cd12fe4b0532a782a5e39"}, {"code": "(fn [coll]\n  (loop [input coll output []]\n    (if (empty? input)\n      output\n      (recur (rest input) (cons (first input) output)))))", "problem": 23, "user": "5033a1fbe4b062bc5d7ae155"}, {"code": "#(loop [xs %\n        result []]\n    (if (= 0 (count xs))\n      result\n      (recur (rest xs) (into [(first xs)] result))))", "problem": 23, "user": "5032b398e4b00c0952a257eb"}, {"code": "(fn [s] (reduce #(cons %2 %1) [] s))", "problem": 23, "user": "50336c6be4b0c6c1199c710f"}, {"code": "reduce #(conj %1 %2) '()", "problem": 23, "user": "5029faf6e4b023940c84aa46"}, {"code": "(fn [x]\n  (loop [s '()\n         r x]\n    (if (empty? r)\n        s\n        (recur (conj s (first r)) (rest r)))))", "problem": 23, "user": "4f03f3b7535dcb61093f6b85"}, {"code": "(fn rev [s] (if (empty? s) [] (cons (last s) (rev (butlast s)))))", "problem": 23, "user": "503255d0e4b0e78df07b092b"}, {"code": "#(into () %)", "problem": 23, "user": "5029481ee4b0b33e9bf6fdee"}, {"code": "(fn [l] (map #(nth (seq l) %) (sort > (range 0 (count l)))))", "problem": 23, "user": "5034b0e1e4b062bc5d7ae167"}, {"code": "#(into () %)", "problem": 23, "user": "5034a14de4b062bc5d7ae165"}, {"code": "(fn my-reverse\n  ([xs] (my-reverse xs (count xs) ))\n  ([xs x]\n     (let [bl (butlast xs)  ;sequence without last element\n     the-last (last xs) ;the last element of the sequence\n\t   length (count bl)] ;length of the sequence without last\n       (if (= x 0) ;end of recursion reached?\n\t xs        ;then return list\n\t (cons the-last (my-reverse bl length)) ;else recursion with list without last\n       )\n     )\n  )\n)", "problem": 23, "user": "503160c1e4b0391161bf5077"}, {"code": "(fn f [l] (if (empty? l) [] (conj (f (rest l)) (first l))))", "problem": 23, "user": "50352431e4b0a84c1d88f620"}, {"code": "(fn f [a]\n  (loop [lista (seq a)\n           res ()]\n      (if (seq lista)\n        (let [dato (first lista)]\n          (prn res)\n          ;(conj res a dato)\n           (recur (rest lista) (conj res dato))\n         )\n        res\n      )))", "problem": 23, "user": "5029131ae4b0b6c928ad61ff"}, {"code": "into ()", "problem": 23, "user": "50255bafe4b0b0b8afb15aa8"}, {"code": "into()", "problem": 23, "user": "50291679e4b0b6c928ad6200"}, {"code": "#(reduce (fn[x ret](conj x ret))'() %) ;cheated", "problem": 23, "user": "5032cf63e4b0e4096af89716"}, {"code": "#(into () %)", "problem": 23, "user": "5015d9cfe4b0cd08ed0beb79"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "5035503de4b0ed9c821488f8"}, {"code": "(fn rev [s]\n  (if (= (count s) 1)\n    s\n    (cons (last s) (rev (butlast s)))))", "problem": 23, "user": "50361b6be4b0fbe0a74d26be"}, {"code": "(fn [x]\n  (into() x)\n)", "problem": 23, "user": "50254e70e4b0b0b8afb15aa7"}, {"code": "#(loop [n (count %) ret [] res %]\n  (if (zero? n)\n    ret \n    (recur (dec n) (conj ret (last res)) (take (- n 1) res)))\n)", "problem": 23, "user": "503354c3e4b0c6c1199c710c"}, {"code": "#(into '() %)", "problem": 23, "user": "5007c7c7e4b0b17c647f5226"}, {"code": "(fn myr [seq] (if (= seq '()) '() (concat (myr (rest seq)) [(first seq)])))", "problem": 23, "user": "4ddb696b535d02782fcbe9fa"}, {"code": "(fn rev [s]\n  (if (= s [])\n    []\n    (conj (rev (rest s)) (first s))))", "problem": 23, "user": "4e68c465535d8ccf87e9fe8a"}, {"code": "(fn [xs] (reduce conj '() xs))", "problem": 23, "user": "4fc45c07e4b081705acca349"}, {"code": "(fn [coll]\n  (reduce conj () coll))", "problem": 23, "user": "50366589e4b0fbe0a74d26c3"}, {"code": "(fn my-rev\n     ([list] (my-rev list []))\n     ([old reversed]\n      (if (empty? old)\n        reversed\n        (my-rev\n            (rest old)\n            (concat [(first old)] reversed)))))", "problem": 23, "user": "5038f8d2e4b088a6a14ca75f"}, {"code": "(fn walla [coll] (reduce conj() coll))", "problem": 23, "user": "500a0a11e4b03d00572d2d73"}, {"code": "#(into () %)", "problem": 23, "user": "50390828e4b088a6a14ca762"}, {"code": "#(loop [lst % out ()]\n  (if (empty? lst)\n    out\n    (recur (rest lst) \n      (conj out (first lst)))))", "problem": 23, "user": "50387196e4b0803468ea2c6e"}, {"code": "into ()", "problem": 23, "user": "50399468e4b088a6a14ca768"}, {"code": "(partial reduce conj '())", "problem": 23, "user": "503917a0e4b088a6a14ca763"}, {"code": "#(loop [l [] x %] (if (= nil (first x)) l (recur (cons (first x) l) (rest x))))", "problem": 23, "user": "502d4ea0e4b02fc10c6c6e46"}, {"code": "#(reduce (fn [a b] (cons b a)) '() %)", "problem": 23, "user": "503a234de4b088a6a14ca76d"}, {"code": "(fn my-reverse [collection]\r\n  (if (= (count (seq collection)) 1)\r\n      (seq collection)\r\n      (conj (my-reverse (seq (take (dec (count collection)) (seq collection)))) (last collection))))", "problem": 23, "user": "503a5623e4b07a1917cc34d3"}, {"code": "(partial reduce conj '())", "problem": 23, "user": "4f58d92fe4b0a7574ea71858"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "5036dea0e4b0af0658af77a4"}, {"code": "(fn rfd [x] (if (not (empty? x))\n(concat [(last x)] (rfd (butlast x)) )))", "problem": 23, "user": "5034b623e4b062bc5d7ae168"}, {"code": "#(reduce conj '() %1)", "problem": 23, "user": "50378996e4b0af0658af77ae"}, {"code": "reduce #(cons %2 %) '()", "problem": 23, "user": "50295775e4b0b33e9bf6fdf2"}, {"code": "into ()", "problem": 23, "user": "503b5a64e4b07a1917cc34dc"}, {"code": "reduce conj ()", "problem": 23, "user": "4edf95a8535d10e5ff6f5342"}, {"code": "(fn [old_seq] \n  \t(loop [old_seq old_seq, new_seq ()] \n\t\t\t(if (next old_seq)\n\t\t\t\t(recur (next old_seq) (cons (first old_seq) new_seq)) \n\t\t\t\t(cons (first old_seq) new_seq)\n\t\t\t)\n\t\t)\n\t)", "problem": 23, "user": "5029399be4b061fd216be4b6"}, {"code": "into ()", "problem": 23, "user": "50392c7ee4b088a6a14ca765"}, {"code": "(fn rev [lst]\n  (if (= lst '()) '()\n      (concat (rev (rest lst)) (list (first lst)))))", "problem": 23, "user": "503c05fbe4b0fc0f99c2e54f"}, {"code": "(fn [coll]\n  (loop [col coll, reversed []]\n    (if (empty? col)\n      reversed\n      (recur (butlast col) (conj reversed (last col))))))", "problem": 23, "user": "4ff695f8e4b0678c553fc380"}, {"code": "(fn my-rev [coll]\n  (cond\n    (empty? coll) ()\n    :else (cons (last coll) (my-rev (butlast coll)))))", "problem": 23, "user": "503bb73de4b07a1917cc34e2"}, {"code": "(fn [xs] (loop [acc [] xs (seq xs)] (if xs (recur (cons   (first xs) acc) (next xs)) acc)))", "problem": 23, "user": "503be1f0e4b0fc0f99c2e549"}, {"code": "(fn anon [x]\n  (if (empty? x) [] (conj (anon (rest x)) (first x))))", "problem": 23, "user": "503cc8cae4b06c4e0e1fa251"}, {"code": "(fn [seq]\n  ((fn _rev [o-seq n-seq]\n    (if (empty? o-seq) n-seq\n      (_rev (rest o-seq) (cons (first o-seq) n-seq))\n    )) seq '() ))", "problem": 23, "user": "503ca47fe4b06c4e0e1fa24f"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "502aac6ae4b0614b52996118"}, {"code": "reduce (fn [a x] (cons x a)) []", "problem": 23, "user": "503d129fe4b06c4e0e1fa254"}, {"code": "(fn [s] (reduce conj '() s))", "problem": 23, "user": "5033ed65e4b062bc5d7ae15a"}, {"code": "(fn [seq]\n  (loop [seq seq ans '()]\n    (if (empty? seq)\n      ans\n      (recur\n        (rest seq)\n        (conj ans (first seq))))))", "problem": 23, "user": "4e8bc8d8535d65386fec2125"}, {"code": "(fn seq-reverse [v]\r\n        (if (empty? v)\r\n          (empty v)\r\n          (conj (seq-reverse (butlast v)) (last v))))", "problem": 23, "user": "503b6995e4b07a1917cc34dd"}, {"code": "#(reduce (fn [s i] (cons i s)) [] %)", "problem": 23, "user": "503de5aae4b06c4e0e1fa259"}, {"code": "#(reduce (fn [acc x] (cons x acc)) [] %)", "problem": 23, "user": "503dfc11e4b06c4e0e1fa25b"}, {"code": "(fn [x] (into () x))", "problem": 23, "user": "4db5708d535d87e67b28fe0c"}, {"code": "#(letfn [(rev-seq [a-seq]\n  (if (empty? a-seq)\n      []\n      (concat (rev-seq (rest a-seq)) [(first a-seq)])))]\n  (rev-seq %))", "problem": 23, "user": "4e7e8ea5535db169f9c79719"}, {"code": ";(partial reduce conj ())\n;(partial apply conj ())\n(partial into ())", "problem": 23, "user": "4fceda40e4b03432b189f407"}, {"code": "(fn rev [seq]\n  (if (empty? (rest seq))\n    seq\n    (cons (last seq) (rev (butlast seq)))))", "problem": 23, "user": "503e6047e4b06c4e0e1fa266"}, {"code": "#(into () %)", "problem": 23, "user": "503c02e5e4b0fc0f99c2e54e"}, {"code": "(fn [s]\n  (reduce conj '() s)\n)", "problem": 23, "user": "503d812ce4b06c4e0e1fa258"}, {"code": "(fn [col] (loop [lst col res []] (if (nil? (first lst)) res (recur (rest lst) (cons (first lst)res )))))", "problem": 23, "user": "5031eb3be4b000fc67a99a84"}, {"code": "reduce conj ()", "problem": 23, "user": "5036eba7e4b0af0658af77a5"}, {"code": "#(map-indexed (fn [idx col] ((fn [col x] (last (take (+ x 1) col))) % (- (- (count %) 1) idx))) %)", "problem": 23, "user": "503f923fe4b00d1a725ff2ad"}, {"code": "(fn [x]\n  (reduce conj () x))", "problem": 23, "user": "5037f7b0e4b0803468ea2c65"}, {"code": "into '()", "problem": 23, "user": "503ee85ce4b06c4e0e1fa26e"}, {"code": "(fn t1 [a] (if (== 1 (count a)) (list (first a))\n(conj (t1 (drop-last a)) (last a))))", "problem": 23, "user": "50335235e4b0c6c1199c710b"}, {"code": "(fn [x] (into () x))", "problem": 23, "user": "503efe01e4b06c4e0e1fa26f"}, {"code": "(fn foo\n              ([coll] (foo coll []))\n              ([collin collout] \n               (if (not (empty? collin))\n                 (foo (butlast collin) (conj collout (last collin)))\n                 collout)))", "problem": 23, "user": "503be880e4b0fc0f99c2e54a"}, {"code": "#(into () %)", "problem": 23, "user": "50410452e4b06d8231e4faca"}, {"code": "(fn [coll]\n  (reduce conj '() coll))", "problem": 23, "user": "5041fb43e4b06d8231e4fad1"}, {"code": "(fn [l]\n  ((fn [ffs rs]\n    (let [f (first ffs)\n          fs (rest ffs)]\n    (if (nil? f)\n        rs\n        (recur fs (cons f rs)))))\n    l ()\n))", "problem": 23, "user": "50427899e4b0add3005c0fc2"}, {"code": "into '()", "problem": 23, "user": "5042de0de4b034ff00315d1b"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "50403ae1e4b0ff5d2cc40dae"}, {"code": "reduce conj '()", "problem": 23, "user": "50431cbce4b034ff00315d1c"}, {"code": "reduce conj ()", "problem": 23, "user": "5043295be4b034ff00315d1d"}, {"code": "reduce #(conj % %2) '()", "problem": 23, "user": "4e8708e3535dceadca46984e"}, {"code": "reduce conj ()", "problem": 23, "user": "50436470e4b034ff00315d23"}, {"code": "into ()", "problem": 23, "user": "5043a536e4b034ff00315d24"}, {"code": "reduce (fn [val itr] (cons itr val)) []", "problem": 23, "user": "5008d149e4b0144d4f561e41"}, {"code": "reduce conj ()", "problem": 23, "user": "503ea917e4b06c4e0e1fa26b"}, {"code": "into ()", "problem": 23, "user": "4fd81472e4b0dab7d829f38e"}, {"code": "(fn [seq] \n  (let [vecseq (vec seq)]\n    (for [i (range (count vecseq) 0 -1)]\n      (nth vecseq (dec i)))))", "problem": 23, "user": "4fb266a5e4b081705acca28c"}, {"code": "(fn n23 [xs] \n  (if (= xs nil)\n    nil\n    (cons (last xs) (n23 (butlast xs)))))", "problem": 23, "user": "4fab1ea1e4b081705acca210"}, {"code": "(fn [l]\n  (loop [l (seq l)\n         r '()]\n    (if (= l '())\n      r\n      (recur (rest l) (conj r (first l))))))", "problem": 23, "user": "50435852e4b034ff00315d22"}, {"code": "(fn [coll]\n    (let [s (seq coll)\n          f (fn [xs acc]\n              (if (empty? xs) acc\n                (recur (rest xs) (conj acc (first xs)))))]\n      (f s '())\n      ))", "problem": 23, "user": "4ff3df0fe4b0678c553fc355"}, {"code": "into ()", "problem": 23, "user": "4db0114d838c48654951d9b8"}, {"code": "reduce #(conj %1 %2) '()", "problem": 23, "user": "50458888e4b01f6c9a8b236d"}, {"code": "(fn rev [v] (reduce #(cons %2 %) [] v))", "problem": 23, "user": "5034374de4b062bc5d7ae161"}, {"code": "(fn rev [seq]\n  (loop [seqp seq acc '()]\n    (if (empty? seqp)\n      acc\n      (recur (rest seqp) (conj acc (first seqp))))))", "problem": 23, "user": "4fceef7ae4b03432b189f40a"}, {"code": "reduce conj '()", "problem": 23, "user": "503bcacce4b07a1917cc34e4"}, {"code": "; probably really stupid, this\n#(reduce conj `() (seq %))", "problem": 23, "user": "50464831e4b011c5dfee771f"}, {"code": "reduce #(cons %2 %) []", "problem": 23, "user": "5046b003e4b011c5dfee7727"}, {"code": "into ()", "problem": 23, "user": "50432da5e4b034ff00315d1e"}, {"code": "(fn revseq [seq]\n  (if (empty? seq)\n    seq\n    (conj (revseq (butlast seq)) (last seq))))", "problem": 23, "user": "50293b68e4b061fd216be4b7"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "5040edf4e4b0ff5d2cc40db5"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "50471d36e4b03b02161376b6"}, {"code": "into ()", "problem": 23, "user": "50481532e4b0ec70b3ef8d96"}, {"code": "(fn [s]\n  (loop [se s resto []]\n  (if (empty? se)\n       resto\n       (recur (rest se) (cons (first se) resto)))))", "problem": 23, "user": "5048202fe4b0ec70b3ef8d9a"}, {"code": "into ()", "problem": 23, "user": "50479524e4b0371827a27bc4"}, {"code": "#(loop [col % ret '()]  (if (empty? col) ret (recur (rest col) (conj ret (first col)) ))  )", "problem": 23, "user": "50463347e4b011c5dfee771e"}, {"code": "#(into () %)", "problem": 23, "user": "50487817e4b0ec70b3ef8d9d"}, {"code": "#(into() %)", "problem": 23, "user": "4f902831e4b0dcca54ed6c8b"}, {"code": "(fn [xs]\n  (reduce\n    (fn [a b] (cons b a)) [] xs\n  )\n)", "problem": 23, "user": "501ffbb1e4b0cb6ebc0a42f2"}, {"code": "(fn [s] \n  (loop [src s dst '()]\n    (if (empty? src)\n      dst\n      (recur (next src) (conj dst (first src))))))", "problem": 23, "user": "503e7f06e4b06c4e0e1fa268"}, {"code": "(fn rev [coll]\n  (reduce conj () coll))", "problem": 23, "user": "5046f909e4b03b02161376b5"}, {"code": "into ()", "problem": 23, "user": "50435689e4b034ff00315d21"}, {"code": "reduce conj ()", "problem": 23, "user": "5047bbd1e4b0ec70b3ef8d90"}, {"code": "reduce conj ()", "problem": 23, "user": "5045ac21e4b01f6c9a8b2371"}, {"code": "(fn [x] (reduce (fn [i j] (cons j i)) [] x))", "problem": 23, "user": "4f616892e4b0defedf855fbf"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "504457c0e4b01f6c9a8b2360"}, {"code": "reduce #(conj %1 %2) '()", "problem": 23, "user": "4f702dcae4b07046d9f4eff4"}, {"code": "reduce conj '()", "problem": 23, "user": "5041b3c0e4b06d8231e4facf"}, {"code": "#((fn [r s]\n    (if (nil? s)\n      r\n      (recur (cons (first s) r) (next s) )\n     )\n   )\n  '() %)", "problem": 23, "user": "502ea7c6e4b078f26332e749"}, {"code": "(letfn [(my-rev [in coll]\n    (cond\n      (nil?   coll) coll\n      (empty? coll) in\n      :else\n        (my-rev (cons (first coll) in) (rest coll))\n    )\n    )]\n  (partial my-rev '()))\n\n; () [1 2 3]\n; 1 (2 3) -> (1) (2 3)", "problem": 23, "user": "504d0116e4b022602c20b089"}, {"code": "(fn this\n  \t\t([seq]\n\t\t\t\t(if (= seq [])\n\t\t\t\t\t[]\n\t\t\t\t\t(conj (this (rest seq)) (first seq))\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t)", "problem": 23, "user": "5048bcf8e4b06e644c63f1ae"}, {"code": "(fn [col]\n  (reduce #(conj %1 %2) '() col))", "problem": 23, "user": "4db2cc55535df7e46ed9b6c5"}, {"code": "into '()", "problem": 23, "user": "504e04a4e4b078edc5f59397"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "504e13fce4b078edc5f593bc"}, {"code": "(fn [xs] (reduce #(conj %1 %2) '() xs))", "problem": 23, "user": "504df657e4b078edc5f59384"}, {"code": "(fn [c] (map #(nth (vec c) %) (range (dec (count c)) -1 -1)))", "problem": 23, "user": "504e1abee4b0f6ff3350c45d"}, {"code": "(partial reduce (fn [accum x] (conj accum x)) '())", "problem": 23, "user": "504e2a3fe4b0f6ff3350c477"}, {"code": "reduce (fn [as x] (conj as x)) '()", "problem": 23, "user": "504e2600e4b0f6ff3350c46f"}, {"code": "(fn hey [ls]\n  (apply conj\n    ((fn last-thing [ls]\n      (if (empty? ls)\n         ls\n         (recur (rest ls)))) ls)\n    ls))", "problem": 23, "user": "504e2f89e4b0f6ff3350c47d"}, {"code": "(fn r [s]\n  (if (empty? s) s\n   (cons  (last s) (r (butlast s)))))", "problem": 23, "user": "504e3897e4b0f6ff3350c483"}, {"code": "(fn rev [s] (cond (empty? (rest s)) [(first s)] :else (conj (rev (rest s)) (first s))))", "problem": 23, "user": "504e108ce4b078edc5f593b3"}, {"code": "#(into () %)", "problem": 23, "user": "4ffda838e4b0678c553fc3e5"}, {"code": "(fn rev [s]\r\n  ((fn rev-hlpr [s res]\r\n    (cond\r\n      (empty? s) res\r\n      :else (rev-hlpr (rest s) (cons (first s) res))))\r\n    s '()))", "problem": 23, "user": "504e48ace4b0f6ff3350c498"}, {"code": "(fn [seq] (reduce (fn [res val] (conj res val)) '() seq))", "problem": 23, "user": "504e5e8de4b0f6ff3350c4a8"}, {"code": "(fn reverse_\n  ([l] (reverse_ l '()))\n  ([l acc] \n    (if (zero? (count l))\n      acc\n      (reverse_ (rest l) (cons (first l) acc)))))", "problem": 23, "user": "504e127fe4b078edc5f593b6"}, {"code": "(fn rd [x] (reduce conj '() x))", "problem": 23, "user": "504e5989e4b0f6ff3350c4a4"}, {"code": "(fn rev [x]\n  (if (not (first x))\n    nil\n    (concat (rev (rest x)) (list (first x)))\n)\n)", "problem": 23, "user": "504e2f98e4b0f6ff3350c47e"}, {"code": "(fn rev[xs]\n  (if (first xs)\n    (conj (rev (rest xs)) (first xs))\n[]))", "problem": 23, "user": "504e26b9e4b0f6ff3350c472"}, {"code": "reduce #(conj %1 %2) '()", "problem": 23, "user": "504e685fe4b0f6ff3350c4ae"}, {"code": "(fn rev [seq]\n  (if (empty? seq) seq\n    (concat (rev (rest seq)) (list (first seq)))))", "problem": 23, "user": "504e48f3e4b0f6ff3350c499"}, {"code": "(partial reduce conj '())", "problem": 23, "user": "504e14c2e4b078edc5f593bf"}, {"code": "(fn [coll]\r\n  (loop [coll coll\r\n         a []]\r\n    (if (empty? coll)\r\n      a\r\n      (recur (take (dec (count coll)) coll) (conj a (last coll))))))", "problem": 23, "user": "504e2333e4b0f6ff3350c46c"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "504e3afae4b0f6ff3350c488"}, {"code": "(fn [list]\n  (reduce\n    (fn [memo elem]\n      (cons elem memo))\n    []\n    list\n  )\n)", "problem": 23, "user": "504eb604e4b069badc5a33c4"}, {"code": "into ()", "problem": 23, "user": "504e9f5ce4b069badc5a33bd"}, {"code": "#(loop [oldlst %1 newlst '()]\n  (if (empty? oldlst) newlst (recur (rest oldlst) (cons (first oldlst) newlst))))", "problem": 23, "user": "50456731e4b01f6c9a8b236b"}, {"code": "(fn rev [l] \n  ((fn inner [l res]\n    (if (empty? l)\n        res\n        (inner (rest l) (conj res (first l)))))\n  l '()))", "problem": 23, "user": "504ed58ce4b069badc5a33d2"}, {"code": "(fn [args]\n  (letfn\n    [(rev [x]\n      (if (empty? x)\n        []\n        (conj (rev (rest x)) (first x))))]\n    (rev args)))", "problem": 23, "user": "504ed350e4b069badc5a33d1"}, {"code": "(fn [xs] (reduce conj nil xs))", "problem": 23, "user": "504e0834e4b078edc5f593a5"}, {"code": "(fn rev [x] (if \n  (empty? x) \n  [] \n  (cons (last x) (rev (butlast x)))\n  )\n)", "problem": 23, "user": "504ed16de4b069badc5a33cf"}, {"code": "(fn rev [lst] (if (= lst '()) lst (concat (rev (rest lst)) (list (first lst)))))", "problem": 23, "user": "504e14dde4b078edc5f593c0"}, {"code": "#(into () %)", "problem": 23, "user": "504eed01e4b0e7ad84dbc4a5"}, {"code": "(fn rev [coll]\n  (if (empty? coll) nil\n    (conj (rev (butlast coll)) (last coll))))", "problem": 23, "user": "504ec46de4b069badc5a33c8"}, {"code": "into ()", "problem": 23, "user": "504e3aaae4b0f6ff3350c487"}, {"code": "#(into () %)", "problem": 23, "user": "504dff92e4b078edc5f5938a"}, {"code": "#(loop [src % dest ()]\n    (let[tail (rest src)\n         res  (conj dest (first src))]\n      (if (seq tail)\n        (recur tail res) \n        res\n    )))", "problem": 23, "user": "504f0c08e4b0e7ad84dbc4b1"}, {"code": "into ()", "problem": 23, "user": "504eff22e4b0e7ad84dbc4a9"}, {"code": "(fn my-reverse [xs]\n  (reduce (fn [a b] (cons b a)) '() xs))", "problem": 23, "user": "504f3a85e4b0a02f9cffde5c"}, {"code": "apply conj ()", "problem": 23, "user": "504f44cfe4b0a02f9cffde65"}, {"code": "(fn rev [acc ls] \n  (cond \n    (empty? ls) acc \n    :else (rev (cons (first ls) acc) (rest ls))))\n'()", "problem": 23, "user": "504e397ee4b0f6ff3350c485"}, {"code": "(fn [seq]\n  ((fn [s r]\n      (if s\n        (recur (next s) (conj r (first s)))\n        r))\n    seq '()))", "problem": 23, "user": "504f2071e4b0e7ad84dbc4be"}, {"code": "(fn revrev [x] (\n  if (not (empty? x))\n    (concat (list (last (vec x))) (revrev (pop (vec x))))\n    []\n))", "problem": 23, "user": "504f3aede4b0a02f9cffde5d"}, {"code": "(fn [coll]\n  (map #(nth (seq coll) %)\n        (range (- (count coll) 1) -1 -1)))", "problem": 23, "user": "504f6721e4b0a02f9cffde7f"}, {"code": "(fn rev [x] (if (first x) (conj (rev (rest x)) (first x)) []))", "problem": 23, "user": "504e1c76e4b0f6ff3350c464"}, {"code": "(fn reverseIt [collection]\r\n  (if(next collection)\r\n         (conj (reverseIt(next collection)) (first collection))\r\n         [(first collection)]\r\n  )\r\n)", "problem": 23, "user": "504f3fa3e4b0a02f9cffde62"}, {"code": "(fn [list] (reduce conj '() list))", "problem": 23, "user": "504f43e9e4b0a02f9cffde64"}, {"code": "(fn [myseq]\n  (loop [s myseq, ns nil]\n    (if (empty? s)\n      ns\n      (recur (rest s) (conj ns (first s))))))", "problem": 23, "user": "504e9011e4b069badc5a33b7"}, {"code": "(fn rv ([q] (rv q '())) ([q s] (if (empty? q) s (rv (rest q) (conj s (first q))))))", "problem": 23, "user": "504e058de4b078edc5f5939b"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "504e2011e4b0f6ff3350c469"}, {"code": "(fn [l] (reduce #(conj %1 %2) '() l))", "problem": 23, "user": "504e7b88e4b069badc5a33ad"}, {"code": "(fn [seq] \n  ((fn [old nu]\n    (if (= [] old)\n      nu\n      (recur (rest old) (cons (first old) nu)))) seq []))", "problem": 23, "user": "504e3f22e4b0f6ff3350c48e"}, {"code": "(fn rev [l] (if (empty? l) l\n                (concat (rev (rest l))(list (first l)))\n             )\n  )", "problem": 23, "user": "504ffa26e4b0a02f9cffdead"}, {"code": "(fn [s] (reduce #(cons %2 %1) '() s))", "problem": 23, "user": "4fc5a693e4b0ee37620e17fc"}, {"code": "( fn [a]\r\n  (loop [grow [], shrink a]\r\n    (if (empty? shrink)\r\n      ;then\r\n      grow\r\n      ;else\r\n      (recur (conj grow (last shrink)) (butlast shrink))\r\n      ) ; if\r\n    ); loop\r\n  ); fn", "problem": 23, "user": "504e4ac2e4b0f6ff3350c49a"}, {"code": "(fn rev [l]\n  (if (empty? l)\n      []\n      (conj (rev (rest l)) (first l))))", "problem": 23, "user": "505024a4e4b0a02f9cffdeb4"}, {"code": "reduce (fn [a x] (concat [x] a)) []", "problem": 23, "user": "504f3f13e4b0a02f9cffde60"}, {"code": "into '()", "problem": 23, "user": "504f9ae1e4b0a02f9cffde9c"}, {"code": "(fn [s]\r\n  (reduce #(cons %2 %1) '() s))", "problem": 23, "user": "5050b107e4b063148f524126"}, {"code": "(fn [xs]\n  (reduce \n    (fn [x xs] (concat xs x))\n    (map (fn [x] [x]) xs)))", "problem": 23, "user": "504f87e0e4b0a02f9cffde91"}, {"code": "(fn [x] ( #(if (empty? %1) %2 (recur (rest %1) (cons (first %1) %2) )) x '()) )", "problem": 23, "user": "504f191ae4b0e7ad84dbc4ba"}, {"code": "(fn [xs] (reduce #(cons %2 %1) [] xs))", "problem": 23, "user": "504f5804e4b0a02f9cffde72"}, {"code": "(fn [xs]\r\n  (reduce (fn [coll x] (conj coll x)) (cons (first xs) ()) (rest xs)))", "problem": 23, "user": "4dd59d8b535dae65d5c462eb"}, {"code": "(fn [xs] (loop [xs xs acc '()]\n  (if (empty? xs)\n    acc\n    (recur (rest xs) (conj acc (first xs))))))", "problem": 23, "user": "504f865ee4b0a02f9cffde90"}, {"code": "(fn [in] \n  (reduce \n    (fn [x y](cons y x)) '() in))", "problem": 23, "user": "504f0036e4b0e7ad84dbc4aa"}, {"code": "(fn [coll] \r\n  (map :v \r\n  (sort-by :k >\r\n    (map (fn [a b] {:v a :k b}) coll (iterate inc 1)))))", "problem": 23, "user": "503dea56e4b06c4e0e1fa25a"}, {"code": "reduce (fn [x s] (cons s x)) []", "problem": 23, "user": "504e1fdde4b0f6ff3350c468"}, {"code": "(fn [coll]\n  (reduce conj '() coll))", "problem": 23, "user": "504f2efae4b0e7ad84dbc4c9"}, {"code": "(fn a [x] (if (empty? x) '() (cons (last x) (a (butlast x)) )))", "problem": 23, "user": "4f05872b535dcb61093f6bf8"}, {"code": "(fn myrev [x] (if (= x nil) nil (cons (last x) (myrev (butlast x)))))", "problem": 23, "user": "504f65bae4b0a02f9cffde7e"}, {"code": "#(into () %)", "problem": 23, "user": "505223e4e4b0a561d07d8f16"}, {"code": "into '()", "problem": 23, "user": "4fda108ee4b05e33b9224f46"}, {"code": "#(reduce (fn [r x] (cons x r)) [] %)", "problem": 23, "user": "504c8165e4b09724c857af31"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "50385746e4b0803468ea2c6d"}, {"code": "reduce conj ()", "problem": 23, "user": "5051c99ce4b0a561d07d8f09"}, {"code": "reduce conj ()", "problem": 23, "user": "5052ab7ee4b0a561d07d8f20"}, {"code": "(fn [s]\r\n  (if \r\n    (vector? s) \r\n    (vec (reduce #(cons %2 %1) (empty s) s))\r\n    (reduce #(cons %2 %1) (empty s) s)))", "problem": 23, "user": "5048f98ee4b06e644c63f1af"}, {"code": "(fn [s]\n  (reduce (fn [acc x] (conj acc x)) '() s))", "problem": 23, "user": "4ff24a1ae4b0678c553fc337"}, {"code": "(fn rev[s]\n  (if (= s [])\n    []\n    (conj (rev (rest s))(first s))\n  )\n)", "problem": 23, "user": "50512f61e4b0b30bd8f4f83f"}, {"code": "(fn f [list]\n  (cond\n    (> (count list) 1) (cons (last list) (f (pop (into [] list)))) \n    :else list)  \n)", "problem": 23, "user": "5051ed55e4b0a561d07d8f0e"}, {"code": "(fn [alist]\n  (reduce #(cons %2 %1) [] alist)\n)", "problem": 23, "user": "504e1ddae4b0f6ff3350c466"}, {"code": "reduce #(conj %1 %2) '()", "problem": 23, "user": "50548ce8e4b0b1b9d1860ead"}, {"code": "#(into () %)", "problem": 23, "user": "5054c853e4b0b1b9d1860eb3"}, {"code": "(fn [s]\n  (letfn [(f [s n]\n          (if (= n 0)\n              (first s)\n              (f (rest s) (dec n))))]\n  (map #(f s %) \n       (range (- (count s) 1) -1 -1))))", "problem": 23, "user": "5054c7e1e4b0b1b9d1860eb2"}, {"code": "(fn [x]\n  ((fn [y z]\n    (if (empty? z)\n        y\n        (recur (conj y (last z)) \n               (take (dec (count z)) z)))) [] x))", "problem": 23, "user": "5053de37e4b0b1b9d1860ea8"}, {"code": "(fn [xs]\n  ((fn rev [xs out]\n    (if\n      (= '() xs)\n      out\n      (rev (rest xs) (cons (first xs) out))))\n  xs\n  []))", "problem": 23, "user": "50553322e4b0ce54f56f03f8"}, {"code": "(fn [s]\n  (loop [s s r '()]\n    (if (empty? s)\n        r\n        (recur (rest s) (conj r (first s))))))", "problem": 23, "user": "50555c06e4b0ce54f56f03fa"}, {"code": "(fn [lst]\n  (reduce conj '() lst))", "problem": 23, "user": "5055899de4b0ce54f56f03fd"}, {"code": "(fn [coll]\n  (reduce conj nil coll))", "problem": 23, "user": "5052f384e4b0a561d07d8f25"}, {"code": "(partial reduce (fn [x y] (conj x y)) '())", "problem": 23, "user": "4ff769bce4b0678c553fc38f"}, {"code": "(fn [seq] (reduce conj () seq))", "problem": 23, "user": "50522807e4b0a561d07d8f18"}, {"code": "#(loop [lst %, acc (empty %)]\n  (if (empty? lst) acc\n    (recur (rest lst) (cons (first lst) acc))))", "problem": 23, "user": "504f57c7e4b0a02f9cffde71"}, {"code": "(fn rev\n  ([in]\n     (rev in nil))\n  ([in out]\n     (let [h (first in)\n           t (rest in)]\n       (if (nil? h)\n         out\n         (rev t (cons h out))))))", "problem": 23, "user": "504ec4d3e4b069badc5a33c9"}, {"code": "(fn rev ([sq] (rev sq (empty sq)))\n([old new] (if (empty? old) \nnew\n(recur (rest old) (cons (first old) new)))))", "problem": 23, "user": "50563ae2e4b0ce54f56f0405"}, {"code": "(fn [x] (reduce conj '() x))", "problem": 23, "user": "505193b7e4b0a561d07d8f08"}, {"code": "; My original solution:\n; #(sort-by (fn [x] (if (number? x) x (first x))) > %)\n;; _pcl's better solution...\n;; Use a list as a stack and push:\n#(reduce (fn [x y] (conj x y)) '() %1)", "problem": 23, "user": "5057242fe4b0012181721986"}, {"code": "(fn ! \n    ([s] (! s '()))\n    ([s res] \n      (if (= (count s) 0)\n        res\n        (! (rest s) (conj res (first s)))\n        )))", "problem": 23, "user": "50523848e4b0a561d07d8f1a"}, {"code": "(fn [coll]\n  ((fn [coll rev]\n     (if (empty? coll)\n       rev\n       (recur (next coll) (cons (first coll) rev)))) coll []))", "problem": 23, "user": "5041bdf3e4b06d8231e4fad0"}, {"code": "(fn [l] (reduce conj '() l))", "problem": 23, "user": "50481b70e4b0ec70b3ef8d98"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4fc6e1a8e4b0ee37620e181d"}, {"code": "#(reduce (fn [acc x] (cons x acc)) () %)", "problem": 23, "user": "50586354e4b06522596eba78"}, {"code": "(fn self\n  ([xs] (self xs '()))\n  ([xs filler]\n    (if (empty? xs) filler\n      (self (rest xs) (conj filler (first xs))))))", "problem": 23, "user": "5058493ae4b06522596eba75"}, {"code": "(fn [input]\n  (loop [x input\n         r []]\n    (if (empty? x)\n      r\n      (recur (rest x) (cons (first x) r)))))", "problem": 23, "user": "4f9aa97ae4b0dcca54ed6d0e"}, {"code": "into ()", "problem": 23, "user": "504e8e48e4b069badc5a33b3"}, {"code": "#(into () %)", "problem": 23, "user": "4fd6e70fe4b0dab7d829f379"}, {"code": "reduce (fn [col x] (cons x col)) []", "problem": 23, "user": "50589113e4b06522596eba7f"}, {"code": "(fn [x]\n  (loop [result () y x]\n    (if (empty? y) result\n      (recur (conj result (first y)) (rest y)))))", "problem": 23, "user": "50517ebfe4b0a561d07d8f06"}, {"code": "#(loop [seq % rev '()]\n  (if (empty? seq)\n    rev\n  (recur (rest seq) (conj rev (first seq)))))", "problem": 23, "user": "505a2f3be4b03d2efce48c5b"}, {"code": "(fn rev [l] (if (seq l) (cons (last l) (rev (butlast l))) '()))", "problem": 23, "user": "505885c4e4b06522596eba7b"}, {"code": "(fn dorev [x] (if (> (count x) 0) (conj (dorev (butlast x)) (last x)) x))", "problem": 23, "user": "5051e2abe4b0a561d07d8f0a"}, {"code": "(fn [lista]\n   (letfn [(invertir [lista lista2] (if (= '() lista)\n                                        lista2\n                                        (invertir (rest lista) (conj lista2 (first lista))\n                                          )\n                                      )\n             )\n           ]\n          (invertir lista '())\n     ))", "problem": 23, "user": "5058afbbe4b06522596eba81"}, {"code": "(fn [coll]\n  (apply conj '() coll))", "problem": 23, "user": "505bd09fe4b032b709c81373"}, {"code": "into ()", "problem": 23, "user": "5057f59ce4b06522596eba73"}, {"code": "(fn rev [list & [acc]]\n  (if (= nil acc)\n      (rev list '())\n    (if (= [] list)\n        acc\n      (rev (rest list) (conj acc (first list))))))", "problem": 23, "user": "505cc50ce4b0e6aca564be00"}, {"code": "(fn r [x]\n    (if (empty? x)\n        x\n        (cons (last x) (r (butlast x)))))", "problem": 23, "user": "50588af1e4b06522596eba7d"}, {"code": "(fn my-reverse [coll]\n  (loop [coll coll res '()]\n    (if (nil? coll)\n      res\n      (recur (next coll) (conj res (first coll))))))", "problem": 23, "user": "4fd769a1e4b0dab7d829f382"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "505b9084e4b032b709c81371"}, {"code": "sort (fn [a b] 1)", "problem": 23, "user": "505d26aee4b0e6aca564be05"}, {"code": "(fn rev \n    ([l] (rev l (list)))\n    ([l acc]\n      (if (empty? l)\n        acc\n        (recur (rest l) (cons (first l) acc)))))", "problem": 23, "user": "50588ff1e4b06522596eba7e"}, {"code": "(fn my-reverse [x] (\r\n  if (= (count x) 1)\r\n  (vec x)\r\n  (conj (my-reverse (rest x)) (first x))))", "problem": 23, "user": "505caadfe4b0bcb5664c3d3e"}, {"code": "(fn rev\n  ([arr] (rev arr []))\n  ([arr new] (if (empty? arr) new (rev (rest arr) (cons (first arr) new)))))", "problem": 23, "user": "505d4b21e4b0e6aca564be07"}, {"code": "(fn rev [xs]\n  (if (empty? xs)\n  xs\n  (concat (rev (rest xs)) [(first xs)])))", "problem": 23, "user": "5055e7f4e4b0ce54f56f0401"}, {"code": "(fn rev [col] (if (empty? col) '() (cons (last col) (rev (drop-last col)))))", "problem": 23, "user": "505dee52e4b0b06147a37273"}, {"code": "(fn [seq]\n  (reduce\n    #(conj %1 %2)\n    '() seq))", "problem": 23, "user": "505e2f6ce4b011187b721f38"}, {"code": "(fn [s]\n   (loop [s1 s r '()]\n      (if (empty? s1)\n         r\n         (recur (rest s1) (conj r (first s1))))))", "problem": 23, "user": "4f046d70535dcb61093f6bc5"}, {"code": "#(into () %)", "problem": 23, "user": "505aa653e4b021387fb89857"}, {"code": "reduce #(cons %2 %) []", "problem": 23, "user": "5054bc87e4b0b1b9d1860eb0"}, {"code": "(fn revl [sq]\n  ((fn rev_rec [sq accum]\n    (if (seq sq)\n        (rev_rec (rest sq) (cons (first sq) accum))\n        accum))\n   sq ()))", "problem": 23, "user": "505f55d3e4b08f2a82ad10b0"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "505f55b5e4b08f2a82ad10af"}, {"code": "(fn blah [l] (if (first l) (conj (blah (rest l)) (first l)) []))", "problem": 23, "user": "505f5d8ae4b08f2a82ad10b1"}, {"code": "(fn [x] \n  (loop [x x\n    y []] \n    (if (empty? x) \n      y \n      (recur (next x) (cons (first x) y)))))", "problem": 23, "user": "4eb47bb1535d7eef30807362"}, {"code": "(fn rev [x]\n  (loop [result nil s x]\n    (if (nil? (first s))\n      result\n      (recur (cons (first s) result) (rest s)))))", "problem": 23, "user": "50602bc6e4b08f2a82ad10ba"}, {"code": "#(loop [from % to []]\n  (if (empty? from) to\n    (recur (take (- (count from) 1) from) (conj to (last from)))))", "problem": 23, "user": "50310b8be4b05b7df5a0b84d"}, {"code": "(fn [s]\r\n      (loop [acc '() x (first s) xs (rest s)]\r\n       (if (nil? x)\r\n         acc\r\n       (recur (cons x acc) (first xs) (rest xs)))))", "problem": 23, "user": "50521b1fe4b0a561d07d8f14"}, {"code": "into ()", "problem": 23, "user": "50604918e4b08f2a82ad10bb"}, {"code": "reduce conj '()", "problem": 23, "user": "505f5e2fe4b08f2a82ad10b2"}, {"code": "(fn [lista] (\n             letfn [(reversa [lista resultado] (if (nil? (butlast lista)) (cons (first lista) resultado) (reversa (rest  lista) (cons (first lista) resultado)))  )]\n             (reversa lista '())\n             \n             ))", "problem": 23, "user": "505cdcb7e4b0e6aca564be03"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "4ebad797535dfed6da9c6d6a"}, {"code": "#(map-indexed (fn [idx _] (nth (vec %) (- (count %) idx 1))) %)", "problem": 23, "user": "5060d137e4b0dc10a69545a0"}, {"code": "reduce conj ()", "problem": 23, "user": "505fc8e3e4b08f2a82ad10b6"}, {"code": "#(loop [[f & r] (seq %) rd []]\n    (if-not (or f r)\n        rd\n        (recur r (cons f rd))))", "problem": 23, "user": "4f8c4ee8e4b02e764a0a5194"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "50090fc7e4b0144d4f561e44"}, {"code": "(fn rev [l]\n  (when (seq l)\n    (concat (rev (rest l)) (list (first l)))))", "problem": 23, "user": "504e72cee4b0f6ff3350c4b4"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "50618c62e4b0a30dc9a35d33"}, {"code": "(fn r [x]\n  (if (> (count x) 0)\n    (conj (r (rest x)) (first x))\n    []\n  )\n)", "problem": 23, "user": "50608d4ce4b07251188e4455"}, {"code": "into '()", "problem": 23, "user": "50630247e4b05ac47bc68d6b"}, {"code": "(fn [coll]\n  (loop [coll coll rev (empty coll)]\n    (if (empty? coll)\n        rev\n        (recur (rest coll) (cons (first coll) rev)))))", "problem": 23, "user": "5063b9a0e4b075d771da6f9d"}, {"code": "(fn rev [s]\n  (reduce conj () s))", "problem": 23, "user": "504e24e2e4b0f6ff3350c46d"}, {"code": "reduce #(conj % %2) '()", "problem": 23, "user": "5063fe48e4b075d771da6f9e"}, {"code": "(fn [s]\n  (loop [n '() s s]\n    (if (empty? s)\n        n\n        (recur\n          (cons (first s) n)\n          (rest s)))))", "problem": 23, "user": "50657775e4b0deb876850599"}, {"code": "reduce #(conj %1 %2) ()", "problem": 23, "user": "50645e12e4b007509339a58a"}, {"code": "reduce conj '()", "problem": 23, "user": "506558f0e4b0deb876850596"}, {"code": "(fn [s] (sort (fn [a, b] 1) s))", "problem": 23, "user": "503f872ee4b00d1a725ff2ac"}, {"code": "(fn [coll]\n  ((fn [coll accum]\n     (if (empty? coll) accum\n       (recur (butlast coll) (conj accum (last coll))))) coll []))", "problem": 23, "user": "50621cbde4b0341461c88951"}, {"code": "(fn rs [s] (if (empty? s) s (concat (rs (rest s)) (list (first s)))))", "problem": 23, "user": "4f8b05d2e4b02e764a0a5176"}, {"code": "(fn [coll]\n  (loop [c coll reversed '()]\n    (if (empty? c)\n      reversed\n      (recur (rest c) (conj reversed (first c)))) \n  )\n)", "problem": 23, "user": "4f72147ae4b07046d9f4f01b"}, {"code": "(fn [ls] (loop [ls ls rev []]\n  (if (empty? ls) rev\n    (recur (rest ls) (concat [(first ls)] rev)))))", "problem": 23, "user": "504db141e4b021508a333965"}, {"code": "(fn [c] (reduce #(cons %2 %) '() c))", "problem": 23, "user": "50668a06e4b03d366d7cb2b2"}, {"code": "(fn [coll]\n  (loop [source coll target ()]\n    (println target)\n    (if (empty? source)\n      target\n    (recur (rest source) (cons (first source) target)))))", "problem": 23, "user": "502cb310e4b0532a782a5e38"}, {"code": "(fn [seq]\n  (reduce conj '() seq))", "problem": 23, "user": "506755b3e4b03d366d7cb2bc"}, {"code": "(fn f [c]\n  (if (seq c) \n    (cons (last c) (f (butlast c)))))", "problem": 23, "user": "506617c3e4b03d366d7cb2ab"}, {"code": "into ()", "problem": 23, "user": "5065faf9e4b0313a384e5645"}, {"code": "#(into () %)", "problem": 23, "user": "50611456e4b0dc10a69545a5"}, {"code": "(fn rev [seq]\n  (loop [seq seq, result []]\n    (if (empty? seq)\n      result\n      (recur (rest seq) (cons (first seq) result ))\n    )\n  )\n)", "problem": 23, "user": "504e0136e4b078edc5f5938e"}, {"code": "(fn [s] \n (loop [r '()\n        s2 s]\n        (if (empty? s2) r (recur (conj r (first s2)) (rest s2)))))", "problem": 23, "user": "5057852ce4b0012181721992"}, {"code": "reduce #(concat [%2] %1) []", "problem": 23, "user": "5065052ae4b0b1b6c8b1d85e"}, {"code": "#(apply conj '() %)", "problem": 23, "user": "5066dcc1e4b03d366d7cb2b5"}, {"code": "reduce #(cons %2 %1) []", "problem": 23, "user": "50678be5e4b03d366d7cb2c0"}, {"code": "#(into () %)", "problem": 23, "user": "5068fa8ee4b0c0169921a8e5"}, {"code": "(fn [coll]\n  (loop [x coll rev_x () c 0]\n    (if (= c (count coll))\n      rev_x\n    (recur (rest x) (conj rev_x (first x)) (inc c)))))", "problem": 23, "user": "5068c203e4b0c0169921a8e4"}, {"code": "(fn [coll]\n  (loop [coll coll new-coll []]\n    (if (seq coll)\n      (recur (rest coll) (cons (first coll) new-coll))\n      new-coll)))", "problem": 23, "user": "5066fa7de4b03d366d7cb2b9"}, {"code": "reduce conj ()", "problem": 23, "user": "4fc7ddffe4b0ee37620e182b"}, {"code": "(fn x [s] (cons (last s) (cond (second s) (x (butlast s)))))", "problem": 23, "user": "5037c397e4b0af0658af77b4"}, {"code": "(fn [s] (loop [s s, r ()] (if (seq s) (recur (rest s) (cons (first s) r)) r)))", "problem": 23, "user": "506ab9bae4b05d3b7762c74c"}, {"code": "into ()", "problem": 23, "user": "5065b810e4b0148eb3925aec"}, {"code": "#(loop [s % r []]\n   (if (empty? s)\n    r\n    (recur (rest s) (cons (first s) r))))", "problem": 23, "user": "506b016de4b0a2a5463de37f"}, {"code": "(partial reduce #(cons %2 %1) [])", "problem": 23, "user": "506b0a9ce4b0a2a5463de380"}, {"code": "(fn ! [list] \n          (if (empty? list) list (cons (last list) (! (drop-last list)))))", "problem": 23, "user": "506afdafe4b0a2a5463de37e"}, {"code": "(fn [s]\n  (loop [o s r '()]\n    (if (empty? o)\n      r\n      (recur (next o) (concat (list (first o)) r)))))", "problem": 23, "user": "506b18c8e4b0a2a5463de383"}, {"code": "(fn reverse-sequence [s]\n  (when-not (empty? s)\n    (concat (reverse-sequence (rest s))\n            (list (first s)))))", "problem": 23, "user": "506a1985e4b01dc6af13f83e"}, {"code": "(fn [x] (let [vx (if (vector? x) x (vec x))\n              out (for [y (range (dec (count vx)) -1 -1)]\n                   (vx y))]\n        (if (vector? x) (vec out) out)))", "problem": 23, "user": "505a0a15e4b03d2efce48c5a"}, {"code": "reduce conj ()", "problem": 23, "user": "506b8242e4b0eda3100c090a"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "506ba58be4b0eda3100c090b"}, {"code": "into ()", "problem": 23, "user": "4edb4c7c535d10e5ff6f5318"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "506b0ee7e4b0a2a5463de381"}, {"code": "reduce #(conj %1 %2) '()", "problem": 23, "user": "506b437de4b0eda3100c0906"}, {"code": "into ()", "problem": 23, "user": "506c2006e4b080c1a96bd6bc"}, {"code": "#(into () %)", "problem": 23, "user": "506a08bae4b01dc6af13f83d"}, {"code": "(partial (fn [reversed coll]\n  (if (empty? coll)\n   reversed\n   (let [x (last coll)]\n     (recur (conj reversed x) (butlast coll)\n)))) [])", "problem": 23, "user": "506929ffe4b01dc6af13f82b"}, {"code": "(fn [list]\n  (reduce conj '() list))", "problem": 23, "user": "506c8116e4b0a302964c548a"}, {"code": "(fn [s]\n  (reduce conj () s))", "problem": 23, "user": "506ce637e4b0a302964c5490"}, {"code": "(fn [x](reduce #(concat [%2] %1) [] x ))", "problem": 23, "user": "4ebe8d65535dfed6da9c6d96"}, {"code": "(fn [list] \n  (reduce (fn [x y] (concat [y] x)) () list))", "problem": 23, "user": "5069605ae4b01dc6af13f82d"}, {"code": "(fn [lista]\n  (loop [l lista \n         res '() ] \n    (if (empty? l) res\n        (recur (rest l) \n               (conj res (first l))))))", "problem": 23, "user": "50576483e4b001218172198b"}, {"code": "reduce #(cons %2 %) []", "problem": 23, "user": "506e0e5ae4b09350ab4199eb"}, {"code": "reduce #(cons %2 %) ()", "problem": 23, "user": "506ef8c3e4b09350ab4199f4"}, {"code": "#(\n  (fn !\n    [x a]\n    (if (empty? a) x (! (conj x (first a)) (rest a))))\n  '() %)", "problem": 23, "user": "50573ed8e4b0012181721987"}, {"code": "(fn \n  [x]\n  (loop [tail x rev '() ]\n    (cond \n      (empty? tail)\n      rev\n      :else\n        (recur (rest tail) (conj rev (first tail)) )\n      )\n  )\n)", "problem": 23, "user": "506f5a67e4b082ae7d1032c6"}, {"code": "reduce #(cons %2 %1) '()", "problem": 23, "user": "506f7686e4b082ae7d1032c9"}, {"code": "reduce conj '()", "problem": 23, "user": "506fd0afe4b07bd6ad9b9f23"}, {"code": "(fn [l]\n  (into '() l)\n)", "problem": 23, "user": "506ec408e4b09350ab4199f1"}, {"code": "#(reduce (fn[x y] (conj x y)) '() %)", "problem": 23, "user": "50705072e4b07bd6ad9b9f27"}, {"code": "reduce conj '()", "problem": 23, "user": "507056b8e4b07bd6ad9b9f29"}, {"code": "(fn [xs]\n  (loop [r (empty xs) xs xs]\n    (if (= xs '())\n      r\n      (recur (cons (first xs) r) (rest xs)))))", "problem": 23, "user": "50705886e4b07bd6ad9b9f2a"}, {"code": "(fn foo [l] \n  (if (= (count l) 0) l\n      (conj (foo (butlast l)) (last l))\n      ))", "problem": 23, "user": "506f5d68e4b082ae7d1032c7"}, {"code": "(fn [s]\n  (loop [x s, nx '(), i (count s)]\n    (if (= i 0)\n        nx\n        (recur (rest x) (conj nx (first x)) (dec i)))))", "problem": 23, "user": "50706287e4b07bd6ad9b9f2b"}, {"code": "#(into () %)", "problem": 23, "user": "4fefbfe7e4b0678c553fc31a"}, {"code": "#(loop [coll % coll-temp []]   \n  (if (zero? (count coll))\n    (apply list coll-temp)\n    (recur (drop-last coll) (conj coll-temp (last coll)))))", "problem": 23, "user": "5071b614e4b0e3170b5a867d"}, {"code": "(fn [x] (reduce conj '() x))", "problem": 23, "user": "5070a7f5e4b0e3170b5a8675"}, {"code": "(fn my-reverse [lst]\n  (reduce conj '() lst))", "problem": 23, "user": "50720885e4b0e3170b5a8689"}, {"code": "(fn [x] (reduce (fn [a b] (concat [b] a)) [] x))", "problem": 23, "user": "4f83ae07e4b033992c121c21"}, {"code": "#(reduce conj () % )", "problem": 23, "user": "5071e520e4b0e3170b5a8683"}, {"code": "(fn [coll] (loop [coll coll v '()] (if (empty? coll) v (recur (rest coll) (conj v (first coll))))))", "problem": 23, "user": "50723bbae4b0e3170b5a868b"}, {"code": "(fn [xs]\n  (reduce \n    (fn [first second] (cons second first))\n    nil\n    xs\n  )\n)", "problem": 23, "user": "50217818e4b00bba4502f7a7"}, {"code": "(fn rever [lis] ((fn rever-iter [lis rev] (cond (empty? lis) rev true (rever-iter (rest lis) (conj rev (first lis))))) lis ()))", "problem": 23, "user": "5071f3b4e4b0e3170b5a8686"}, {"code": "(fn f [coll]\r\n  (if (empty? coll) []\r\n    (cons (last coll) (f (butlast coll)))))", "problem": 23, "user": "50729f67e4b0e3170b5a868e"}, {"code": "(fn [lst]\n  (loop [b []\n         hvost lst]\n    (if (empty? hvost)\n      b\n      (recur (concat (take 1 hvost) b) (rest hvost)))))", "problem": 23, "user": "50657858e4b0deb87685059a"}, {"code": "#(into '() %)", "problem": 23, "user": "50740835e4b054001656accd"}, {"code": "(partial reduce (fn [x y] (cons y x)) nil)", "problem": 23, "user": "507437c2e4b054001656acd0"}, {"code": "reduce (fn [x y] (cons y x)) []", "problem": 23, "user": "506406c8e4b075d771da6f9f"}, {"code": "#(loop [in %1 result []]\n  (if (not-empty in) \n    (recur (butlast in) (conj result (last in))) \n    result))", "problem": 23, "user": "4faa7185e4b081705acca1f3"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "50748923e4b054001656acd3"}, {"code": "into '()", "problem": 23, "user": "506cc221e4b0a302964c548f"}, {"code": "into ()", "problem": 23, "user": "4fdf4e2be4b05e33b9224f96"}, {"code": "#(loop [s % acc nil]\n  (cond\n    (empty? s) acc\n    :default (recur (rest s) (conj acc (first s)))))", "problem": 23, "user": "5074b3ece4b054001656acd5"}, {"code": "into ()", "problem": 23, "user": "50746e23e4b054001656acd1"}, {"code": "reduce conj '()", "problem": 23, "user": "5075d655e4b09049dea827a3"}, {"code": "#(loop [s % r []]\n  (if (empty? s)\n    r\n    (recur (butlast s) (conj r (last s)))))", "problem": 23, "user": "506e9464e4b09350ab4199f0"}, {"code": "(fn [x] (into () x))", "problem": 23, "user": "507630ffe4b0a894bb95bf3c"}, {"code": "(fn [lst]\n  (reduce (fn [val col] (cons col val)) nil lst))", "problem": 23, "user": "50763574e4b0a894bb95bf3d"}, {"code": "(fn rev \r\n  ([l] (rev (rest l) (list (first l))))\r\n  ([l r] \r\n   (let [x (first l)\r\n         xs (rest l)]\r\n     (if (not-empty xs)\r\n       (recur xs (cons x r))\r\n       (cons x r)))))", "problem": 23, "user": "4fd7a223e4b0dab7d829f387"}, {"code": "(fn foo [xs] (if (empty? xs) [] (conj (foo (rest xs)) (first xs))))", "problem": 23, "user": "50751598e4b054001656acd9"}, {"code": "(fn f [s]\n  (if (= 1 (count s))\n    s\n    (concat (f (rest s)) (list (first s)))))", "problem": 23, "user": "50784ae5e4b0fc74642bff68"}, {"code": "#(reduce (fn [acc x] (conj acc x)) '() %)", "problem": 23, "user": "50783762e4b0fc74642bff67"}, {"code": "#(loop [s % r nil]\n  (if (first s)\n    (recur (rest s) (cons (first s) r))\n    r))", "problem": 23, "user": "4ecb65f6535df97575fdabda"}, {"code": "#(reduce (fn [acc next] (cons next acc))[] %)", "problem": 23, "user": "507a08e4e4b08327cd804a67"}, {"code": "reduce #(conj % %2) ()", "problem": 23, "user": "507a506ee4b08327cd804a6c"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "507a9b29e4b08327cd804a6e"}, {"code": "#(into () %)", "problem": 23, "user": "50799992e4b08327cd804a62"}, {"code": "reduce conj ()", "problem": 23, "user": "507b7dbee4b09034bfeeb71e"}, {"code": "(fn my-rev [x] (if (not-empty x) (cons (last x) (my-rev (butlast x)))))", "problem": 23, "user": "5077dd50e4b0fc74642bff63"}, {"code": "(fn [n] (reduce conj '() n))", "problem": 23, "user": "507c4829e4b0a19f8e876e57"}, {"code": "(fn [coll] (loop [c coll rc []] (if (empty? c) rc (recur (drop 1 c) (cons (first c) rc)))))", "problem": 23, "user": "5078dedae4b08327cd804a5d"}, {"code": "(fn [s] (map second (sort-by first (map #(vector %2 %) s (range (count s) 0 -1)))))", "problem": 23, "user": "5061cc17e4b0a30dc9a35d34"}, {"code": "#(seq (reduce (fn [out in] (conj out in)) '()  %))", "problem": 23, "user": "507d28cfe4b00f5b3a6e1a13"}, {"code": "(fn [_v]\n  (into (list) (list* _v)))", "problem": 23, "user": "507bb3ece4b09034bfeeb720"}, {"code": "(fn reverse* [s]\n  (if (nil? s) nil\n   (conj (reverse* (butlast s)) (last s))))", "problem": 23, "user": "507db411e4b03c76e5499e06"}, {"code": "(fn [x] (loop [coll '() x x]\n           (if (empty? x)  coll\n               (recur (conj coll (first x)) (rest x)))))", "problem": 23, "user": "507ddf55e4b0a03698d01ca8"}, {"code": "#(loop [r [] s %] (if (empty? s) r \n(recur (cons (first s) r) (drop 1 s))))", "problem": 23, "user": "507c7c8be4b0b083f3ff82ef"}, {"code": "(fn [mySequence]\n  (loop [\n    s mySequence\n    r '()] (\n\n    if (empty? s)\n      r\n      (recur (rest s) (conj r (first s)))\n    )\n  )\n)", "problem": 23, "user": "507eddf4e4b06ce648bcdbfa"}, {"code": "into ()", "problem": 23, "user": "5060ae00e4b07251188e4459"}, {"code": "#(into () %)", "problem": 23, "user": "4f5576c2e4b0a7574ea71801"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4e72dd5d535d5021c1a89667"}, {"code": "#(loop [src %1 dst '()]\n  (if (empty? src)\n    dst\n    (recur (rest src) (conj dst (first src)))))", "problem": 23, "user": "507a396be4b08327cd804a69"}, {"code": "(fn f [seq] \n  (if (empty? seq) \n\t\tnil \n\t\t(cons (last seq) (f (butlast seq)))))", "problem": 23, "user": "5069874de4b01dc6af13f832"}, {"code": "#(apply (partial conj '()) %)", "problem": 23, "user": "507e8128e4b0fc854042f247"}, {"code": "(fn rev-seq [lat]\r\n  (into '() lat))", "problem": 23, "user": "508014cce4b089ade05efbdc"}, {"code": "#(into () %)", "problem": 23, "user": "507ef25ce4b0f753b6f9788e"}, {"code": "(fn cnt\n  [l]\n  (\n    if (= (count l) 1)\n    (list (first l))\n    (concat (cnt (rest l)) (list (first l)))\n  )\n)", "problem": 23, "user": "507dad44e4b03c76e5499e05"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "5069e8a5e4b01dc6af13f83a"}, {"code": "reduce (fn [a e] (conj a e)) ()", "problem": 23, "user": "507fe6fee4b089ade05efbd6"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4edbbc6c535d10e5ff6f531d"}, {"code": "reduce conj '()", "problem": 23, "user": "4fa7de4ce4b081705acca1c9"}, {"code": "reduce (fn [x y] (cons y x)) '()", "problem": 23, "user": "50807940e4b01a93d3f38e44"}, {"code": "(fn foo [coll] (if (empty? coll) nil (cons (last coll) (foo (butlast coll)))))", "problem": 23, "user": "5078300de4b0fc74642bff66"}, {"code": "#(reduce (fn [x y] (cons y x)) '() %)", "problem": 23, "user": "5080a9d3e4b01a93d3f38e4a"}, {"code": "(fn into-it [l]\n  (into () l))", "problem": 23, "user": "50812debe4b01a93d3f38e4c"}, {"code": "(fn reverse' [xs] (if (empty? xs) [] (conj (reverse' (next xs)) (first xs))))", "problem": 23, "user": "508157b2e4b0946d0443855c"}, {"code": "(partial reduce conj '())", "problem": 23, "user": "50815c9fe4b0946d0443855d"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "507ab268e4b08327cd804a6f"}, {"code": "(fn [xs] (reduce conj '() xs))", "problem": 23, "user": "50820c3be4b0946d04438570"}, {"code": "#(loop [l % acc []] \n  (if (empty? l) acc (recur (rest l) (cons (first l) acc ))))", "problem": 23, "user": "5080d6e3e4b01a93d3f38e4b"}, {"code": "reduce #(concat [%2] %1) []", "problem": 23, "user": "5069c09be4b01dc6af13f837"}, {"code": "into ()", "problem": 23, "user": "4f7beb36e4b06e829148e1ab"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "5073de20e4b054001656acca"}, {"code": "reduce conj '()", "problem": 23, "user": "508295b2e4b06a522e8c7af2"}, {"code": "#(into () %)", "problem": 23, "user": "5082709ee4b06a522e8c7af1"}, {"code": "(fn [coll]\n  (loop [coll coll rev-coll []]\n    (if (empty? coll)\n      rev-coll\n      (recur (rest coll) (cons (first coll) rev-coll)))))", "problem": 23, "user": "50843a4ae4b0c98812d0788b"}, {"code": "(fn [l]\n   (map\n   (zipmap (range (- (count l) 1) -1 -1) l)\n    (range (count l)))\n   )", "problem": 23, "user": "5084cb7de4b0fb8f40674bfb"}, {"code": "(fn [coll]\r\n  (loop [x coll y '()]\r\n    (if (empty? x)\r\n     y\r\n    (recur (rest x) (conj y (first x))))))", "problem": 23, "user": "507e5cf8e4b085af06e3afd1"}, {"code": "reduce #(cons %2 %1) []", "problem": 23, "user": "507e68abe4b085af06e3afd2"}, {"code": "(fn [col] (reduce conj '() col))", "problem": 23, "user": "4f362c31e4b0e243712b1ec7"}, {"code": "#(loop [x % r []] (if (empty? x) r \n(recur (rest x) (cons (first x) r))))", "problem": 23, "user": "50856bd1e4b004985b776e4c"}, {"code": "(fn reverse-seq [collection]\n    (loop [col collection col-rev '()]\n      (if (empty? col)\n        col-rev\n        (recur (rest col) (cons (first col) col-rev))\n      )\n    )\n)", "problem": 23, "user": "50845d3ee4b0fb8f40674bf3"}, {"code": "reduce conj '()", "problem": 23, "user": "50838c06e4b0902986d69e0f"}, {"code": "( fn f [x] (\n  if (= (second x) nil) x\n  (concat (f (rest x)) (list(first x))) \n))\n;(fn f [x] (\n; if (= (second x) nil) x \n; (concat (f (rest x)) (list (first x)))\n;))", "problem": 23, "user": "50800e49e4b089ade05efbda"}, {"code": "#(loop [x % y []] \r\n        (cond (empty? x) y\r\n\t\t    :else (recur (butlast x) (conj y (last x)))))", "problem": 23, "user": "50868795e4b004985b776e5e"}, {"code": "reduce #(cons %2 %1) []", "problem": 23, "user": "507de7cde4b085af06e3afd0"}, {"code": "into ()", "problem": 23, "user": "5088082ae4b0198722bd9854"}, {"code": "into ()", "problem": 23, "user": "50872737e4b095ddb618af1a"}, {"code": "#(into () %)", "problem": 23, "user": "50885e74e4b07e6af8689325"}, {"code": "reduce conj ()", "problem": 23, "user": "5084c43be4b0fb8f40674bfa"}, {"code": "into ()", "problem": 23, "user": "5089fc3ae4b016a21070049f"}, {"code": "(fn [s]\r\n  (reduce #(cons %2 %) [] s))", "problem": 23, "user": "508a6775e4b016a2107004a9"}, {"code": "reduce conj ()", "problem": 23, "user": "5089d52ce4b03217b26a539d"}, {"code": "#(loop [fwd % rev '()]\r\n   (if (empty? fwd)\r\n     rev\r\n     (let [top (first fwd)]\r\n       (recur (rest fwd) (conj rev top)))))", "problem": 23, "user": "508b95a0e4b0be79e5b189c6"}, {"code": "(fn ss [coll]\n  (loop [coll coll res '() ]\n(if (empty? coll) res\n(recur (rest coll) (conj res (first coll))))))", "problem": 23, "user": "508ba469e4b0be79e5b189c8"}, {"code": "reduce conj '()", "problem": 23, "user": "508c3d42e4b0f17d83ea26b2"}, {"code": "#(vec (into () %))", "problem": 23, "user": "508bed64e4b0be79e5b189cf"}, {"code": "(fn [sequence]\n  (loop [os sequence rs '()]\n    (if (empty? os)\n      rs\n      (recur (rest os) (conj rs (first os)))\n)))", "problem": 23, "user": "508bf05ae4b0f17d83ea26aa"}, {"code": "#(into () %)", "problem": 23, "user": "508c2da3e4b0f17d83ea26b0"}, {"code": "reduce #(conj %1 %2) '()", "problem": 23, "user": "508c33ece4b0f17d83ea26b1"}, {"code": "(fn [coll] (reduce #(cons %2 %1) [] coll))", "problem": 23, "user": "4db86aee535d1e037afb2193"}, {"code": "into '()", "problem": 23, "user": "5082ccb3e4b06a522e8c7af3"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "508d8ab2e4b0f17d83ea26be"}, {"code": "(fn rev [s]\n  (if (empty? s)\n    '()\n    (conj (vec (rev (rest s))) (first s))))", "problem": 23, "user": "508dbd56e4b0f17d83ea26c2"}, {"code": "reduce conj '()", "problem": 23, "user": "50696bace4b01dc6af13f830"}, {"code": "into ()", "problem": 23, "user": "508d5552e4b0f17d83ea26bb"}, {"code": "(fn rev-it \n     ([l]\n        (cond (empty? l) nil\n             :else (cons (last l)\n                         (rev-it (butlast l))))))", "problem": 23, "user": "4f49108ae4b0d56e7bb92be5"}, {"code": "(fn [seq] (reduce (fn [acc x] (cons x acc)) '() seq))", "problem": 23, "user": "508e9ed8e4b0996e1a8a53bf"}, {"code": "#(reduce (fn[a b](cons b a)) [] %)", "problem": 23, "user": "508304ede4b06a522e8c7af6"}, {"code": "(fn [l]\n  (loop  [l l r []]\n    (if (= (count l) 0)\n      r\n      (recur\n        (rest l)\n        (cons (first l) r)\n      )\n    )\n  )\n)", "problem": 23, "user": "4fc8f671e4b0ee37620e1840"}, {"code": "#(loop [xs %1 ys nil]\n  (if (not (first xs))\n    ys\n    (recur (next xs) (cons (first xs) ys))))", "problem": 23, "user": "508e2584e4b0f17d83ea26c9"}, {"code": "reduce (fn [rev elt] (concat (vector elt) rev)) []", "problem": 23, "user": "50897033e4b037578f03c8b3"}, {"code": "(fn rev [x]\n  (if\n    (empty? x)\n    []\n    (conj (rev (rest x)) (first x))))", "problem": 23, "user": "508fd72ee4b0ea685a20f76c"}, {"code": "reduce #(cons %2 %1) []", "problem": 23, "user": "505dcfc8e4b0e6aca564be0d"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "508923d5e4b06d8254e936e8"}, {"code": "(fn f[coll]\r\n  (reduce conj () coll))", "problem": 23, "user": "5060c117e4b024449d699b5d"}, {"code": "(fn rev [l]\r\n  (if (empty? (rest l))\r\n     l\r\n    (concat (rev (rest l)) (list (first l))))\r\n    )", "problem": 23, "user": "508eea7de4b0706b2ed3ef8e"}, {"code": "(fn [s]\r\n  (loop [s s rs []]\r\n    (if (empty? s) rs\r\n      (recur (rest s) (cons (first s) rs)))))", "problem": 23, "user": "50901b2ee4b0ea685a20f774"}, {"code": "reduce conj ()", "problem": 23, "user": "508e41bee4b0f17d83ea26cc"}, {"code": "(fn [s] (into () s))", "problem": 23, "user": "4f83dd78e4b033992c121c24"}, {"code": "reduce conj '()", "problem": 23, "user": "509160dae4b0742c82730aef"}, {"code": "(fn [x]\r\n  (loop [rez [] x x]\r\n    (if (empty? x)\r\n      rez\r\n      (recur (cons (first x) rez) (rest x)))))", "problem": 23, "user": "508453abe4b0c98812d07891"}, {"code": "(fn myrev[y x] (if (> (count x) 0) (myrev (cons (first x) y ) (rest x)) y)) []", "problem": 23, "user": "506ee0f4e4b09350ab4199f2"}, {"code": "reduce #(cons %2 %) []", "problem": 23, "user": "5062bc46e4b05ac47bc68d68"}, {"code": "(fn [lst]\n  (letfn [(f [l acc]\n    (if (empty? l)\n      acc \n      (recur (rest l) (cons (first l) acc))))]\n    (f lst '())))", "problem": 23, "user": "509251f3e4b09a7d0b586de5"}, {"code": "#(loop \n  [x (empty %) \n   y %]\n    (cond (empty? y) (cond (or (list? %) (set? %)) x :else (into (empty %) x)) \n    :else (recur (cons (first y) x) (rest y))))", "problem": 23, "user": "50733b31e4b0e3170b5a869a"}, {"code": "(fn f\n  ([xs] (f xs []))\n  ([xs acc]\n    (if (empty? xs)\n      acc\n      (f (butlast xs) (conj acc (last xs))))))", "problem": 23, "user": "508ee17ae4b0706b2ed3ef8d"}, {"code": "#(into `() %)", "problem": 23, "user": "506717e2e4b03d366d7cb2ba"}, {"code": "(fn [s] \n  ((fn [s sofar] \n    (if (seq s) \n      (recur (rest s) (conj sofar (first s))) \n      sofar)) s ())\n)", "problem": 23, "user": "5093bc30e4b097f48cc38584"}, {"code": "reduce conj ()", "problem": 23, "user": "50928084e4b097f48cc3856c"}, {"code": "(fn f [coll]\r\n  (concat (conj [] (last coll)) (if (= (butlast coll) nil) [] (f (butlast coll)))))", "problem": 23, "user": "505dd5c4e4b0e6aca564be0e"}, {"code": "(fn my-reverse[x]\r\n  (let [y (reduce conj () (into [] x))]\r\n    (cond (vector? x) (into [] y)\r\n          (list? x) y\r\n          (map? x) (into {} y)\r\n          (set? x) y)))", "problem": 23, "user": "5065bd94e4b0148eb3925aed"}, {"code": "(fn [s] (reduce conj '() s))", "problem": 23, "user": "50813b88e4b09292fd669443"}, {"code": "(fn f ([x] (f x '()))\n      ([x r] (if (empty? x)\n                  r\n                (recur (rest x) (conj r (first x))))))", "problem": 23, "user": "507fbd77e4b089ade05efbd3"}, {"code": "#(vec (into () %))", "problem": 23, "user": "50646c01e4b007509339a58b"}, {"code": "(fn [s] (loop\n  [remnant s, result (empty s)]\n  (if (empty? remnant)\n    result\n    (recur (rest remnant) (cons (first remnant) result)))))", "problem": 23, "user": "4f856adfe4b033992c121c44"}, {"code": "#(into () %)", "problem": 23, "user": "4dc537fd535d8a4b2fd74282"}, {"code": "into '()", "problem": 23, "user": "5086ca15e4b004985b776e62"}, {"code": "#(loop [acc %1 result nil]\r\n  (if (empty? acc)\r\n    result\r\n    (recur (rest acc)(conj result (first acc)))))", "problem": 23, "user": "4f49e050e4b0d56e7bb92c01"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "5093ef2ce4b097f48cc38586"}, {"code": "(fn f [c]                                                                                                                         \n  (when c\n    (cons (last c) (f (butlast c)))))", "problem": 23, "user": "4dda44f2535d02782fcbe9f1"}, {"code": "(fn reverseList[x] (reduce conj '() x))", "problem": 23, "user": "508d5ce9e4b0f17d83ea26bc"}, {"code": "(fn [xs]\n  (loop\n    [res xs\n     acc []]\n    (if (empty? res)\n      acc\n      (recur (rest res) (cons (first res) acc))\n    )\n  )\n)", "problem": 23, "user": "5089ebfee4b03217b26a539f"}, {"code": "reduce (fn [x y] (conj x y)) '()", "problem": 23, "user": "50949602e4b04e5742806c4e"}, {"code": "(fn [coll] (reduce conj () coll))", "problem": 23, "user": "50959df3e4b087f34d351ab4"}, {"code": "reduce conj ()", "problem": 23, "user": "50970f51e4b00ad8bab4e950"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "508dc047e4b0f17d83ea26c3"}, {"code": "reduce #(conj %1 %2) '()", "problem": 23, "user": "5097a95fe4b00ad8bab4e96e"}, {"code": "(fn[x] (let [index (count x)] (loop [sequence x ind index new-seq '()] (if (empty? sequence) new-seq (recur (rest sequence) (dec ind) (conj new-seq (first sequence)))))))", "problem": 23, "user": "507da5a7e4b03c76e5499e03"}, {"code": "#((fn myreverse [xs ys]\n  (if (empty? xs)\n     ys\n     (myreverse (rest xs)\n      (cons (first xs) ys)))) % '())", "problem": 23, "user": "5097cd83e4b00ad8bab4e974"}, {"code": "#(reduce (fn [a b] (cons b a)) [] %)", "problem": 23, "user": "5097b556e4b00ad8bab4e970"}, {"code": "(fn [seq] (loop [revseq [], sequence seq]\n  (if (empty? sequence)\n    revseq\n    (recur (conj revseq (last sequence)) (butlast sequence)))))", "problem": 23, "user": "5089860de4b037578f03c8b5"}, {"code": "reduce (fn [a b] (concat [b] a)) []", "problem": 23, "user": "5095a0a4e4b087f34d351ab5"}, {"code": "(fn [s] (reduce conj () s))", "problem": 23, "user": "50982cc7e4b04e098a4c726c"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "5097cfcbe4b00ad8bab4e977"}, {"code": "(comp (fn [L] (for [x (range 0 (count L))] (nth L (- (count L) 1 x)))) vec)", "problem": 23, "user": "50976c84e4b00ad8bab4e961"}, {"code": "(fn [s]\n  (loop [s s\n         n '()]\n    (if s\n      (recur (next s) (cons (first s) n))\n      n)))", "problem": 23, "user": "50989786e4b04e098a4c7274"}, {"code": "reduce conj ()", "problem": 23, "user": "50928ecfe4b097f48cc38570"}, {"code": "(fn [col]\r\n  (letfn [(f [col res]\r\n             (cond\r\n              (empty? col) res\r\n              true (recur (rest col) (lazy-seq (cons (first col) res)))))]\r\n    (f col '())))", "problem": 23, "user": "5087d0e4e4b0198722bd9851"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "5098f5d6e4b0cae2931060a4"}, {"code": "#(loop [remaining-seq % reversed-seq '()]\n  (if (empty? remaining-seq) reversed-seq\n      (recur (rest remaining-seq)\n             (cons (first remaining-seq) reversed-seq))))", "problem": 23, "user": "50996a38e4b0cae2931060b3"}, {"code": "(fn rev [seq]\r\n  ((fn revHelp [seq1 seq2]\r\n    (if (empty? seq1)\r\n      seq2\r\n      (revHelp (rest seq1) (cons (first seq1) seq2))\r\n    )\r\n  )seq (empty seq)))", "problem": 23, "user": "4fa313bbe4b081705acca188"}, {"code": "(fn [ls]\n  (reduce #(conj %1 %2) (seq []) ls))", "problem": 23, "user": "5097ea89e4b087ccf61a7af4"}, {"code": "(fn my-reverse [s] (cond (= s nil) nil :else (cons (last s) (my-reverse (butlast s)))))", "problem": 23, "user": "50982769e4b04e098a4c726a"}, {"code": "reduce conj ()", "problem": 23, "user": "5099198ce4b0cae2931060ac"}, {"code": "(fn my-reverse [s]\n  (reduce conj () s))", "problem": 23, "user": "509a5ca8e4b0efbae1fbc0ab"}, {"code": "reduce (fn [s x] (conj s x) ) '( )", "problem": 23, "user": "5098bce3e4b0cae2931060a0"}, {"code": "(fn rvrs [a] ( list* (last a) (if(= (count a) 1) () (rvrs (butlast a))))\n)", "problem": 23, "user": "5097c837e4b00ad8bab4e973"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "509b152be4b0412cdea6eb1e"}, {"code": "reduce #(cons %2 %1) '()", "problem": 23, "user": "5098bcfee4b0cae2931060a1"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "509a5884e4b0efbae1fbc0aa"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "50992197e4b0cae2931060ae"}, {"code": "(fn reverse-sequence [x]\n     (if (empty? x) [] \n         (conj (reverse-sequence (rest x)) (first x))\n   ))", "problem": 23, "user": "50909368e4b084db37c1e074"}, {"code": "(fn [coll](into () coll))", "problem": 23, "user": "507fcfede4b089ade05efbd5"}, {"code": "reduce conj '()", "problem": 23, "user": "4ec1923f535dfed6da9c6db2"}, {"code": "#(into () %)", "problem": 23, "user": "509c7949e4b085ae113522b0"}, {"code": "(fn [coll] (reduce conj () coll))", "problem": 23, "user": "5038381ce4b0803468ea2c6b"}, {"code": "reduce conj ()", "problem": 23, "user": "509a25b7e4b0efbae1fbc0a8"}, {"code": "#(loop [s % acc '()]\n  (if (empty? s)\n    acc\n    (recur (rest s) (conj acc (first s)))))", "problem": 23, "user": "509b89b3e4b03049c49bd678"}, {"code": "(fn kwcr\n  ([s] (kwcr s '()))\n  ([s t] (if (empty? s) t (kwcr (rest s) \n(conj t (first s))))))", "problem": 23, "user": "509dc716e4b08df8156e9e27"}, {"code": "into '()", "problem": 23, "user": "509e8da7e4b08df8156e9e2f"}, {"code": "(fn [s]\n  (loop [s s acc ()]\n    (if (seq s)\n        (recur (rest s) (conj acc (first s)))\n        acc)))", "problem": 23, "user": "509ecefde4b08df8156e9e35"}, {"code": "reduce #(cons %2 %1)[]", "problem": 23, "user": "509ebf39e4b08df8156e9e33"}, {"code": "#(into () %)", "problem": 23, "user": "509fad62e4b08df8156e9e40"}, {"code": "(fn [a]\n  (loop [l a r ()]\n    (if (empty? l)\n      r\n      (recur (rest l) (cons (first l) r)))))", "problem": 23, "user": "509f3bc9e4b08df8156e9e39"}, {"code": "(fn [elements]\n  (loop [reversed-elements '(), remaining-elements elements]\n    (if (empty? remaining-elements)\n      reversed-elements\n      (recur (conj reversed-elements (first remaining-elements)) \n              (rest remaining-elements)))))", "problem": 23, "user": "50a01937e4b08df8156e9e47"}, {"code": "(fn [x] (reduce conj () x))", "problem": 23, "user": "50a0267fe4b08df8156e9e4a"}, {"code": "(fn rev \n  [lst]\n  (if (= nil lst)\n    []\n    (cons (last lst) (rev (butlast lst)))\n  )\n )", "problem": 23, "user": "509fe894e4b08df8156e9e44"}, {"code": "(fn [my-seq] \n  ((fn [rest-seq result] \n      (if (= 0 (count rest-seq)) \n        result \n        (recur (butlast rest-seq) (conj result (last rest-seq))))) \n   my-seq []))", "problem": 23, "user": "5097cf53e4b00ad8bab4e976"}, {"code": "(partial reduce (fn [f s] (conj f s)) '())", "problem": 23, "user": "5054e37fe4b0b1b9d1860eb6"}, {"code": "#(into () %)", "problem": 23, "user": "5098f803e4b0cae2931060a5"}, {"code": "into ()", "problem": 23, "user": "5099a280e4b0cae2931060bb"}, {"code": "(fn [s]\n  ((fn f [s r]\n    (if (empty? s)\n      r\n      (f (rest s) (concat [(first s)] r))))\n    s []\n  )\n)", "problem": 23, "user": "5092f940e4b097f48cc3857b"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "50a173e4e4b08df8156e9e68"}, {"code": "#(into () %)", "problem": 23, "user": "507ac76be4b09034bfeeb718"}, {"code": "(fn [coll]\n  (let [v (vec coll)]\n    (map\n      #(nth v (- (count v) 1 %))\n      (range (count v)))))", "problem": 23, "user": "50a2f901e4b029e8bace362a"}, {"code": "reduce (fn [result item] (cons item result)) []", "problem": 23, "user": "50a39d11e4b0ceace084d491"}, {"code": "(fn self [l] (if (empty? l) [] (conj (self (rest l)) (first l))))", "problem": 23, "user": "5082fcf2e4b06a522e8c7af5"}, {"code": "(fn [ls] (map (fn [i] (nth (seq ls) (- (- (count ls) 1) i)))(range 0 (count ls))))", "problem": 23, "user": "50a4b6a7e4b0344e360f3bb8"}, {"code": "(fn rev [s] (if (empty? s) s (cons (last s) (rev (butlast s)))))", "problem": 23, "user": "50a15b50e4b08df8156e9e5e"}, {"code": "(fn [x]\r\n  (reduce conj '() x))", "problem": 23, "user": "509fa9b5e4b08df8156e9e3f"}, {"code": "(fn r[x] (if(empty? x) [] (conj (r (rest x)) (first x))))", "problem": 23, "user": "50a3f23ae4b08bbd0eb4ed2f"}, {"code": "#(reduce (fn [s e] (cons e s)) [] %)", "problem": 23, "user": "50a3b55be4b0ceace084d494"}, {"code": "into ()", "problem": 23, "user": "4dbe5390535d020aff1edf5c"}, {"code": "(fn [c]\n  (reduce (fn [acc e] (conj acc e)) '() c))", "problem": 23, "user": "50608ea0e4b07251188e4456"}, {"code": "reduce #(cons %2 %1) []", "problem": 23, "user": "5092fe10e4b097f48cc3857e"}, {"code": "#(into () %)", "problem": 23, "user": "4f1f4db5535d64f60314649f"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "50254dace4b0b0b8afb15aa6"}, {"code": "(fn [coll] (reduce #(conj %1 %2) () coll))", "problem": 23, "user": "50a6c0fbe4b0aa96157e262c"}, {"code": "into ()", "problem": 23, "user": "50a482c1e4b0344e360f3bb7"}, {"code": "#(take (count %) (map last (iterate butlast %)))", "problem": 23, "user": "50981062e4b04e098a4c7268"}, {"code": "(fn [l] (reduce #(cons %2 %) [] l))", "problem": 23, "user": "509c03f3e4b085ae113522a8"}, {"code": "#(loop [a %1 b '()]\n  (if (= (first a) nil)\n    (seq b)\n    (recur (rest a) (conj b (first a)))))", "problem": 23, "user": "50a5f72fe4b0aa96157e2611"}, {"code": "(fn [coll]\n  (loop [coll coll ack '()]\n  (if (nil? (first coll)) ack\n    (recur (rest coll)  (conj ack (first coll) )))))", "problem": 23, "user": "50a7b76de4b090657f4a5cdc"}, {"code": "#(loop [lise (seq %) x 0 nlis ()] \r\n  (if (= lise () ) nlis \r\n    (recur \r\n      (rest lise) \r\n      (inc x) \r\n      (conj nlis (first lise)))))", "problem": 23, "user": "50a69e8ce4b0aa96157e2626"}, {"code": "(fn [l]\n  (map #(nth (seq l) (- (count l) % 1))(range (count l))))", "problem": 23, "user": "50a83315e4b054305ba5a830"}, {"code": "(fn [coll]\n  (loop [c coll, acc '(), cnt 0]\n    (if (empty? c)\n      acc\n      (recur (rest c) (cons (first c) acc) (inc cnt)))))", "problem": 23, "user": "50a83794e4b054305ba5a831"}, {"code": "(fn [col] \n  (loop [c col acc ()] \n    (if (nil? c) \n        acc \n        (recur (next c) \n               (conj acc (first c))))))", "problem": 23, "user": "50a6b5e8e4b0aa96157e262a"}, {"code": "(fn [x]\n  (reduce (fn [accum x]\n          (cons  x accum ))\n        []\n        x)\n\n)", "problem": 23, "user": "50a85af1e4b054305ba5a833"}, {"code": "(fn [col] (reduce (fn [col el] (cons el col)) [] col))", "problem": 23, "user": "50a935b9e4b0a9a42786e8de"}, {"code": "#(reduce (fn [a b] (cons  b a ) ) [] %)", "problem": 23, "user": "4fff289ae4b0678c553fc3fd"}, {"code": "(partial reduce (fn [acc l] (conj acc l)) '())", "problem": 23, "user": "50a9416de4b0a9a42786e8e2"}, {"code": "#(into '() %)", "problem": 23, "user": "50a93ef5e4b0a9a42786e8e1"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "50a9504de4b07e35d68b27ae"}, {"code": "(fn [l] (reduce conj () l))", "problem": 23, "user": "50a4cbbee4b0344e360f3bc2"}, {"code": "#(map (vec %) (range (dec (count %)) -1 -1))", "problem": 23, "user": "4ed152d5535d44c135fd68cc"}, {"code": "(fn aaa [x] (if (empty? x) [] (conj (aaa (rest x)) (first x))))", "problem": 23, "user": "50aa8776e4b056ee01935867"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "50aab057e4b056ee0193586b"}, {"code": "#(into () %)", "problem": 23, "user": "50a4f36be4b0344e360f3bc9"}, {"code": "(fn [xs] (reduce (fn [x y] (cons y x)) '() xs))", "problem": 23, "user": "4f5a10d8e4b0030a34fb2ae5"}, {"code": "(fn self \n  ([i]\n    (self i [])\n    )\n  ([i o] \n  (if (empty? i)\n    o\n    (self (rest i) (cons (first i) o)))))", "problem": 23, "user": "50ab8ae3e4b01d6eb43ce9a0"}, {"code": "reduce #(cons %2 %) []", "problem": 23, "user": "50aa777fe4b056ee01935866"}, {"code": "reduce conj '()", "problem": 23, "user": "509c2c55e4b085ae113522ab"}, {"code": "(fn rev [s]\n  (map \n    (fn [i] \n      (last i))\n    (sort-by first >\n      (map-indexed vector s))))", "problem": 23, "user": "50ad274be4b00424fd5bf71e"}, {"code": "reduce conj '()", "problem": 23, "user": "50ac81b9e4b071b89ef2622f"}, {"code": "(fn revs [ll] (if (empty? ll) '() (concat (revs (next ll)) (list (first ll)))))", "problem": 23, "user": "50adcfe6e4b0a40c9cfb08cb"}, {"code": "(fn [coll]\n  (loop [rev-coll '()\n        cur-coll coll]\n    (if cur-coll\n      (recur \n        (conj rev-coll (first cur-coll)) \n        (next cur-coll))\n      rev-coll)))", "problem": 23, "user": "50ab38a8e4b0f65d68208507"}, {"code": "#(into () %)", "problem": 23, "user": "4ecd1143535d23f036227702"}, {"code": "(fn rev [x]\n  (if (> 2 (count x)) \n  x\n  (conj (rev (butlast x)) (last x))))", "problem": 23, "user": "50a8a04ae4b0deba384a58b9"}, {"code": "(fn [s]\n  (loop [result '() h (first s) t (rest s)]\n    (if (seq t)\n      (recur (conj result h) (first t) (rest t))\n      (conj result h))))", "problem": 23, "user": "50af3393e4b0a40c9cfb08d7"}, {"code": "(fn [list]\n    (reduce conj nil list))", "problem": 23, "user": "50996376e4b0cae2931060b2"}, {"code": "reduce conj ()", "problem": 23, "user": "5099aea3e4b0efbae1fbc0a0"}, {"code": "(fn [s] (reduce conj '() s))", "problem": 23, "user": "50afdf00e4b0c3f5ed5c29a5"}, {"code": "#(into () %)", "problem": 23, "user": "50ae22c3e4b0a40c9cfb08d0"}, {"code": "reduce #(conj % %2) '()", "problem": 23, "user": "5078d366e4b08327cd804a5b"}, {"code": "(fn [seq] (reduce conj () seq))", "problem": 23, "user": "505c02e1e4b032b709c81374"}, {"code": "into ()", "problem": 23, "user": "50b0804de4b009df37c708bb"}, {"code": "reduce conj ()", "problem": 23, "user": "50a473f7e4b08bbd0eb4ed37"}, {"code": "#(reduce (fn [out x] (conj out x)) '() %)", "problem": 23, "user": "50b11fbce4b009df37c708cb"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "4f69681ee4b07046d9f4ef89"}, {"code": "reduce conj ()", "problem": 23, "user": "50ad7888e4b0a40c9cfb08c7"}, {"code": "(fn rs [s] \n  (if (= nil (last s))\n      s\n      (cons (last s) (rs (take (dec (count s)) s)))))", "problem": 23, "user": "50b06b3ae4b009df37c708b9"}, {"code": "(fn [coll]\n  (if (vector? coll)\n    (vec (into () coll))\n    (into () coll)))", "problem": 23, "user": "50b0cffae4b009df37c708c5"}, {"code": "#(into () %)", "problem": 23, "user": "50a025a9e4b08df8156e9e49"}, {"code": "(fn [coll] (reduce #(cons %2 %) '() coll))", "problem": 23, "user": "4f253a49e4b0d66497709ff3"}, {"code": "(fn rvs [seq] \n  (if (empty? seq) []\n    (concat\t(rvs (rest seq)) [(first seq)])\n  )\n)", "problem": 23, "user": "509d528de4b0bb99d6371049"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "50b29029e4b03ea880433563"}, {"code": "#(into () %)", "problem": 23, "user": "50b29496e4b03ea880433564"}, {"code": "(fn [xs]\n  (loop [L xs acc ()]\n    (if (empty? L) acc\n      (recur (rest L) (conj acc (first L))))))", "problem": 23, "user": "50afa883e4b0c3f5ed5c29a2"}, {"code": "(fn [in] (reduce #(cons %2 %1) () in))", "problem": 23, "user": "508a2c2fe4b016a2107004a1"}, {"code": "(fn [coll] (reduce conj () coll))", "problem": 23, "user": "50b3653ee4b03ea88043356b"}, {"code": "#(into () (take-while identity %))", "problem": 23, "user": "4dad86e0c9a9d6ed0f99dc57"}, {"code": "(fn self [x] (if (= x []) [] (conj (self (rest x)) (first x))))", "problem": 23, "user": "50a2e3fbe4b029e8bace3629"}, {"code": "into()", "problem": 23, "user": "50b28f67e4b03ea880433562"}, {"code": "reduce #(cons %2 %) '()", "problem": 23, "user": "4f3b2b28e4b0e243712b1f26"}, {"code": "reduce conj '()", "problem": 23, "user": "50b2e824e4b03ea880433567"}, {"code": "reduce conj nil", "problem": 23, "user": "508e13abe4b0f17d83ea26c7"}, {"code": "(fn [x] \n  (into () x))", "problem": 23, "user": "50b3a715e4b03ea88043356d"}, {"code": "(fn [initial-l]\n  (loop [acc [], l initial-l]\n    (if (not (empty? l))\n      (recur (concat   [(first l)] acc ) (rest l))\n      acc)))", "problem": 23, "user": "50956c2be4b087f34d351ab2"}, {"code": "into '()", "problem": 23, "user": "50b47c46e4b0c464d223d1b8"}, {"code": "(fn ! [x] \n  (if (= (count x) 1) \n    x (cons (last x) (! (take (- (count x) 1) x)))))", "problem": 23, "user": "50b4d258e4b0c464d223d1bd"}, {"code": "(fn [l] (reduce (fn [x y] (cons y x)) '() l))", "problem": 23, "user": "50b4b70de4b0c464d223d1bc"}, {"code": "(fn m [s]\n    (reduce conj '() s)\n  )", "problem": 23, "user": "50a2cd3be4b048eb8059339d"}, {"code": "(fn rev\r\n  ([s] (rev s []))\r\n  ([s result] (if (empty? s) result (recur (rest s) (cons (first s) result ))))\r\n)", "problem": 23, "user": "50aca31fe4b071b89ef26230"}, {"code": "(fn [list]\n  (loop [out '() in list]\n    (if (empty? in)\n        out\n        (recur (cons (first in) out) (rest in)))))", "problem": 23, "user": "50456747e4b01f6c9a8b236c"}, {"code": "(fn [x]\n  (loop [seq x\n         acc '()]\n    (if (empty? seq)\n      acc\n      (recur (rest seq) (conj acc (first seq))))))", "problem": 23, "user": "50b61e7ae4b0e3a8b79a9a68"}, {"code": "reduce conj '()", "problem": 23, "user": "50b51c06e4b0c464d223d1c1"}, {"code": "#(into '() %)", "problem": 23, "user": "50b65f53e4b0a86f8358ca6e"}, {"code": "(fn [s]\n  (loop [s s\n         r []]\n    (if (not (empty? s))\n      (recur (butlast s) (conj r (last s)))\n      r)))", "problem": 23, "user": "50b67515e4b08fb537db98f3"}, {"code": "reduce #(cons %2 %1) '()", "problem": 23, "user": "50b668dde4b08fb537db98f2"}, {"code": "(fn [x] (reduce (fn [r a] (concat [a] r)) [] x))", "problem": 23, "user": "50b6d704e4b08fb537db98f5"}, {"code": "(fn rev [coll] (reduce conj '() coll))", "problem": 23, "user": "50afdfc0e4b0c3f5ed5c29a6"}, {"code": "(fn [roll]\n  (letfn [( rev\n            [normal inverted e n]\n            (if (zero? n)\n              inverted\n              (recur (next normal) (conj inverted e) (first (next normal)) (dec n) )))]\n    (rev roll '() (first roll) (count roll))))", "problem": 23, "user": "50a991dce4b07e35d68b27b3"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "50b63309e4b0a86f8358ca68"}, {"code": "(fn rev [xs]\n  (when-not (empty? xs)\n    (cons (last xs)\n          (rev (butlast xs)))))", "problem": 23, "user": "4f721e9ee4b07046d9f4f01e"}, {"code": "(fn [l] \n  (loop [list l ret []]\n    (if (empty? list)\n      ret\n      (recur (rest list) (cons (first list) ret)))))", "problem": 23, "user": "50112acee4b0d82cfac69f4c"}, {"code": "reduce conj ()", "problem": 23, "user": "50b64b55e4b0a86f8358ca6b"}, {"code": "(fn rev [s] \n  (if (empty? (rest s)) \n    (list (first s))\n    (concat (rev (rest s)) (list (first s)))))", "problem": 23, "user": "50b80cd9e4b01d868da6351a"}, {"code": "reduce conj '()", "problem": 23, "user": "50948042e4b04e5742806c4c"}, {"code": "(fn [s]\n  (loop [ret [] s2 s]\n    (if (seq s2)\n      (recur (cons (first s2) ret) (rest s2))\n      ret)))", "problem": 23, "user": "50b81a93e4b0cba0e598b64b"}, {"code": "into ()", "problem": 23, "user": "4f327844e4b0d6649770a092"}, {"code": "(fn f [s] (reduce #(cons %2 %1) [] s))", "problem": 23, "user": "50b4383fe4b001349b2f4abf"}, {"code": "(fn rv [l] (if (= 1 (count l)) \n(vec l)\n(conj (rv (rest l)) (first l) )\n))", "problem": 23, "user": "50b8e9a4e4b0cba0e598b656"}, {"code": "(fn rev ([s] (rev '() s)) ([r s] (if (seq s) (rev (cons (first s) r) (rest s)) r )) ) []", "problem": 23, "user": "50b8de6ce4b0cba0e598b652"}, {"code": "(fn rev\n  ([L] (rev L []))\n  ([L A] (if (empty? L)\n      A\n      (rev (rest L) (cons (first L) A))\n  ))\n)", "problem": 23, "user": "50b8e67fe4b0cba0e598b655"}, {"code": "reduce conj ()", "problem": 23, "user": "50ba3acae4b03e68e4411c78"}, {"code": "reduce #(cons %2 %1) []", "problem": 23, "user": "50ba40e7e4b03e68e4411c79"}, {"code": "(fn [coll]\r\n  (loop [coll coll acc (empty coll)]\r\n    (or (and (empty? coll) acc)\r\n        (recur (rest coll) (cons (first coll) acc)))))", "problem": 23, "user": "50ba4b9ee4b03e68e4411c7b"}, {"code": "(fn [x]\n  (into () (seq x)))", "problem": 23, "user": "50ba714ae4b03e68e4411c83"}, {"code": "(fn revit [x]\n  (if (= 1 (count x))\n    x\n    (conj (into [] (revit (rest x))) (first x))))", "problem": 23, "user": "50baad40e4b03e68e4411c96"}, {"code": "reduce #(cons %2 %1) '[]", "problem": 23, "user": "50921f9ae4b09a7d0b586de1"}, {"code": "#(into '() %)", "problem": 23, "user": "4f03e7b3535dcb61093f6b7c"}, {"code": "reduce #(conj %1 %2) '()", "problem": 23, "user": "50acbd15e4b071b89ef26234"}, {"code": "(fn rev\n  [coll]\n    (if (zero? (count coll))\n      coll\n      (cons (last coll) (rev (drop-last coll)))))", "problem": 23, "user": "50ba81bfe4b03e68e4411c8f"}, {"code": "#(into '() %)", "problem": 23, "user": "4f89d489e4b033992c121c7e"}, {"code": "(fn rev [x]\n  (loop [lst (last x)\n         blst (butlast x)\n         ]\n    (if (zero? (count blst))\n      (list lst)\n      (cons lst (rev blst)))))", "problem": 23, "user": "50b53b6ae4b0c464d223d1c4"}, {"code": "reduce conj '()", "problem": 23, "user": "50bb646de4b03e68e4411ca3"}, {"code": "(fn foo [lst] (if (= '() lst) '() (concat (foo (rest lst)) (list (first lst)))))", "problem": 23, "user": "50ae5659e4b0a40c9cfb08d2"}, {"code": "(fn rv [x] (cond (empty? x) x :else (concat (rv (rest x)) (list (first x)))))", "problem": 23, "user": "50bcfab0e4b0594b91591c64"}, {"code": "(fn [xs]\n  (loop [ys xs\n         rs '()]\n    (if (= '() ys)\n      rs\n      (recur (rest ys) (conj rs (first ys))))))", "problem": 23, "user": "50bd6033e4b0594b91591c66"}, {"code": "(fn rev [x] (if (nil? x) nil (conj (rev (butlast x))(last x)  )))", "problem": 23, "user": "50b4a37ee4b0c464d223d1bb"}, {"code": "#(into () %)", "problem": 23, "user": "50bdd4fee4b0594b91591c84"}, {"code": "#(loop [oud %1 niew []]\n  (if (empty? oud)\n    niew\n    (recur (butlast oud) (conj niew (last oud)))))", "problem": 23, "user": "4ec6dda2535d6d7199dd36da"}, {"code": "(fn [s] (loop [r nil s s] (if (empty? s)  r (recur (cons (first s) r) (rest s)))))", "problem": 23, "user": "50bd9194e4b0594b91591c67"}, {"code": "(fn [xss]\r\n  (loop [ns nil xs xss]\r\n    (if (empty? xs)\r\n      ns\r\n      (recur (cons (first xs) ns) (rest xs)))))", "problem": 23, "user": "50478418e4b0371827a27bc3"}, {"code": "reduce #(conj %1 %2) '()", "problem": 23, "user": "50ae0d24e4b0a40c9cfb08ce"}, {"code": "(fn [a]\n\t\t(loop [mya a ra '()]\n\t\t\t(\tif(nil? (seq mya)) ra\n\t\t\t\t(recur (rest mya) (cons (first mya) ra) )\n\t\t\t)\n\t\t)\n)", "problem": 23, "user": "50b25f2ce4b03ea88043355f"}, {"code": "reduce #(conj %1 %2) ()", "problem": 23, "user": "50be4823e4b0594b91591c8d"}, {"code": "#(reduce (fn [m i] (conj m i)) '() %)", "problem": 23, "user": "50bfb5fbe4b05ae8c1cbbd9a"}, {"code": "(fn rev[x] (if (empty? x) [] (concat (rev (rest x)) (list (first x)))))", "problem": 23, "user": "5093ca51e4b097f48cc38585"}, {"code": "(fn [ret col]\n  (if (= '() col) \n  ret \n  (recur \n    (cons (first col) ret)\n    (rest col))))\n'()", "problem": 23, "user": "50bfe725e4b080409b860f26"}, {"code": "#(loop [n % acc '()] (if (empty? n) acc (recur (rest n) (conj acc (first n)))))", "problem": 23, "user": "50c0a98ee4b096f585049c2e"}, {"code": "(fn [xs]\n  (loop [xs xs\n         acc (empty xs)]\n    (if (empty? xs) acc\n      (recur (rest xs) (cons (first xs) acc)))))", "problem": 23, "user": "509eeb3be4b08df8156e9e37"}, {"code": "(fn [coll]\n  (reduce conj () coll))", "problem": 23, "user": "4dbd72d0535d020aff1edf43"}, {"code": "(fn [in_seq] \n  (loop\n  [is in_seq os []]\n    (if (empty? is)\n        os\n        (recur (butlast is) (conj os (last is)))\n)\n))\n; reduce conj ()", "problem": 23, "user": "50bf74c7e4b0ffd967a66cc0"}, {"code": "#(into () %)", "problem": 23, "user": "4f7e7cbde4b06e829148e1cf"}, {"code": "(fn reverse-it [ls]\n  (if (= 1 (count ls)) \n    ls\n    (cons (last ls) (reverse-it (butlast ls)))))", "problem": 23, "user": "50bb9fefe4b0594b91591c36"}, {"code": "(fn reverse-a-sequence-solution\n  [coll] ;; update args as needed\n  (loop [acc () coll coll]\n    (if (seq coll)\n      (recur (conj acc (first coll)) (rest coll))\n      acc)))", "problem": 23, "user": "50c113bee4b096f585049c37"}, {"code": "#(loop [l % nl '()]\n    (println l)\n    (println nl)\n    (if (not-empty l)\n      (recur (rest l) (conj nl (first l)))\n    nl))", "problem": 23, "user": "4fc524aae4b081705acca37e"}, {"code": "(fn foo [values]\n    (if (= 1 (count values))\n      [(first values)]\n      ( concat (foo (rest values))  [(first values)] )\n     )\n  )", "problem": 23, "user": "50be6de4e4b00fb48fed2ef5"}, {"code": "(\n  fn tb [ seq ](\n    if( = 0 ( count seq ) ) [] ( conj (tb (rest seq) )  (first seq)) \n)\n)", "problem": 23, "user": "50bf7b72e4b0ffd967a66cc1"}, {"code": "(partial reduce #(conj %1 %2) '())\n\n;; into '()\n;; reduce conj '()", "problem": 23, "user": "503f4759e4b00d1a725ff2a9"}, {"code": "#(into () %)", "problem": 23, "user": "50b68375e4b08fb537db98f4"}, {"code": "into  ()", "problem": 23, "user": "50a8cc97e4b0a9a42786e8db"}, {"code": "(fn [x] (reduce conj () x))", "problem": 23, "user": "50baa66be4b03e68e4411c94"}, {"code": "reduce (fn [o i] (conj o i)) '()", "problem": 23, "user": "50c11f5ae4b096f585049c39"}, {"code": "into ()", "problem": 23, "user": "50afc0f9e4b0c3f5ed5c29a3"}, {"code": "reduce conj ()", "problem": 23, "user": "50bc4e73e4b0594b91591c3d"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "50ba5113e4b03e68e4411c7d"}, {"code": "(fn [x]\n  (loop [fwd x bck []]\n    (if (empty? fwd)\n      bck\n      (recur (butlast fwd) (conj bck (last fwd)))\n    )\n  )\n)", "problem": 23, "user": "50bfbf25e4b05ae8c1cbbd9b"}, {"code": "reduce conj ()", "problem": 23, "user": "4fc863a9e4b0ee37620e1831"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "50c32086e4b00e537d00253d"}, {"code": "(fn [s] (into () s))", "problem": 23, "user": "50c336dde4b00e537d002542"}, {"code": "reduce #(cons %2 %1) ()", "problem": 23, "user": "50b24a2fe4b03ea88043355c"}, {"code": "#(into () %)", "problem": 23, "user": "50bc23e4e4b0594b91591c3c"}, {"code": "#(into () %)", "problem": 23, "user": "50c46cfde4b08bdb2b9270a1"}, {"code": "(fn [list] \n  (reduce #(cons %2 %1) '() list))", "problem": 23, "user": "50c4baa6e4b0210b849018b0"}, {"code": "(fn [lst]\n    (loop [lst lst acc []]\n      (if (empty? lst)\n        acc\n        (recur (rest lst) (cons (first lst) acc)))))", "problem": 23, "user": "4f608e38e4b0defedf855fa8"}, {"code": "#(into () %)", "problem": 23, "user": "50c5546de4b0951b67b28c18"}, {"code": "(fn [coll]\r\n  (loop [c coll reversed '()]\r\n  (if (empty? c) reversed\r\n      (recur (drop 1 c) (conj reversed (first c)))\r\n    )\r\n  )  \r\n)", "problem": 23, "user": "50503117e4b0a02f9cffdeb5"}, {"code": "(fn [s] (reduce conj '() s))\n;; Sigh...\n;; http://stackoverflow.com/questions/8395064/recursively-reverse-a-sequence-in-clojure\n;; Long version\n;;(fn [e] \n;;  (loop [x (first e) \n;;         r (rest e) \n;;         result '()]\n;;    (if (nil? x)\n;;      result\n;;      (recur (first r) (rest r) (conj result x)))))", "problem": 23, "user": "50c62e72e4b00bb60fe0c51b"}, {"code": "(fn rev [x old] \n    (if (empty? old)\n  x\n\t(rev (conj x (last old)) (drop-last 1 old))))\n\t[ ]", "problem": 23, "user": "50c64471e4b00bb60fe0c51d"}, {"code": "reduce conj '()", "problem": 23, "user": "50c6fad1e4b00bb60fe0c52d"}, {"code": "(fn my-vec [a]\n  (loop [result []\n         b a ]\n    (if (empty? b)\n      result\n    (recur (cons (first b) result) (rest b) )  \n  )))", "problem": 23, "user": "50b525c5e4b0c464d223d1c3"}, {"code": "reduce conj nil", "problem": 23, "user": "50c7431ae4b00bb60fe0c531"}, {"code": "(fn my-rvrs [itms]\n  (into '() itms))", "problem": 23, "user": "50c7b929e4b00bb60fe0c537"}, {"code": "#(into () %)", "problem": 23, "user": "50c7e98ee4b00bb60fe0c53a"}, {"code": "(fn [lst]\n  (reduce conj '() lst))", "problem": 23, "user": "4ffc10aae4b0678c553fc3d6"}, {"code": "#((fn myreverse [l,lnew]\n    (if (empty? l)\n      lnew\n      (myreverse (rest l) (conj lnew (first l)))\n    ))\n  % '())", "problem": 23, "user": "50c84ba2e4b00bb60fe0c53e"}, {"code": "(fn [c]\r\n        (letfn [(irev [s r] (if (empty? s)\r\n                              r\r\n                              (irev (rest s) (cons (first s) r))))]\r\n          (irev c [])))", "problem": 23, "user": "50bfd849e4b042992946c649"}, {"code": "#(into () %)", "problem": 23, "user": "50c89c38e4b00bb60fe0c543"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "50493b52e4b06e84b772a23e"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "50c0fac8e4b096f585049c34"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "50c9cdfde4b0bed41a12299d"}, {"code": "(fn [r]\n  (reduce (fn [a el] (cons el a)) '() r)\n    )", "problem": 23, "user": "50c9ece0e4b0a409464667d8"}, {"code": "(partial reduce #(cons %2 %1) [])", "problem": 23, "user": "50c9e5e3e4b0a409464667d7"}, {"code": "#(map second (sort-by first > (map-indexed vector %)))", "problem": 23, "user": "50cb00e1e4b0f75dcc9a6e53"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "50cb4cf6e4b0f78a8e1645b4"}, {"code": "(fn rev [x] (if (empty? x) [] (conj (rev (rest x)) (first x))))", "problem": 23, "user": "50b8914ce4b0cba0e598b64d"}, {"code": "(fn rev ([orig] (rev orig '())) ([orig new] (if (first orig) (rev (rest orig) (cons (first orig) new)) new)))", "problem": 23, "user": "50cc30c5e4b0f78a8e1645bf"}, {"code": "apply conj '()", "problem": 23, "user": "50c8697ce4b00bb60fe0c53f"}, {"code": "(fn[x] (into () x))", "problem": 23, "user": "4eb0175b535d7eef30807336"}, {"code": "reduce #(conj % %2) ()", "problem": 23, "user": "50c75d38e4b00bb60fe0c532"}, {"code": "reduce conj '()", "problem": 23, "user": "50ccf729e4b0f7a459302aac"}, {"code": "(fn [x]\n  (loop [x x result '()]\n    (if (empty? x) \n        result\n        (recur (rest x) (cons (first x) result)))))", "problem": 23, "user": "50ce09e6e4b0ffc302be4bc6"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "50cbc2bbe4b0f78a8e1645bd"}, {"code": "(fn [s]\n  (if (= 1 (count s))\n\t\ts\n\t\t(reduce conj () s)))", "problem": 23, "user": "508fabf9e4b0ea685a20f769"}, {"code": "(fn [x] (into () x))", "problem": 23, "user": "50cf51d1e4b0e61f11ddcd91"}, {"code": "(fn [s]\n  (loop [s   s\n        res '()]\n  (if (empty? s)\n    res\n    (recur (rest s) (cons (first s) res)))))", "problem": 23, "user": "50cf66ffe4b0e61f11ddcd92"}, {"code": "#(loop [cnt % acc '()]\n  (if (empty? cnt) acc\n    (recur (rest cnt) \n      (conj acc (first cnt)))))", "problem": 23, "user": "50997a2be4b0cae2931060b6"}, {"code": "#(loop [x %1 l []] (if (empty? x) l (recur (rest x) (into (vector(first x)) l))))", "problem": 23, "user": "503539dee4b0ed9c821488f6"}, {"code": "reduce (fn [n l] (conj n l)) '()", "problem": 23, "user": "50d0b466e4b00b15ecee9764"}, {"code": "reduce conj '()", "problem": 23, "user": "50ca1a4be4b0a409464667db"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "4f072644535dcb61093f6c20"}, {"code": "reduce (fn [v acc] (conj v acc)) '()", "problem": 23, "user": "50d04a92e4b00b15ecee975a"}, {"code": "(fn rev ([sequence] (rev (rest sequence) (list (first sequence)))) ([sequence reversed] (cond (empty? sequence) reversed :else (rev (rest sequence) (conj reversed (first sequence))))))", "problem": 23, "user": "50d1aaafe4b05a71a896ef58"}, {"code": "into ()", "problem": 23, "user": "509b1204e4b0412cdea6eb1d"}, {"code": "#(into () %)", "problem": 23, "user": "50cf1f88e4b0e61f11ddcd8a"}, {"code": "(fn f [l] \n  (if (empty? l) \n    '()\n    (concat (f (rest l)) (list (first l)))))", "problem": 23, "user": "50c4a354e4b0210b849018af"}, {"code": "(fn my-reverse [list]\n  (if (empty? list)\n    '()\n    (concat (my-reverse (rest list)) (cons (first list) '()))))", "problem": 23, "user": "50d18d00e4b05a71a896ef57"}, {"code": "(fn [x] (into () x))", "problem": 23, "user": "50c6068fe4b0c9dc10d15c58"}, {"code": "(fn [s] (\n         (fn [s r] (\n                    if s\n                    (recur (next s) (cons (first s) r))\n                    r)) s []))", "problem": 23, "user": "50d2e74ae4b03c62ef244480"}, {"code": "(fn rev\n  ([lst] (rev lst '()))\n  ([lst acc]\n   (cond (empty? lst) acc\n         :else (rev (rest lst) (cons (first lst) acc)))))", "problem": 23, "user": "50d2f044e4b03c62ef244483"}, {"code": "reduce conj ()", "problem": 23, "user": "50d242c0e4b06ad58337ed0f"}, {"code": "#(loop [res [], rem %] (if (empty? rem) res (recur (conj res (last rem)) (butlast rem))))", "problem": 23, "user": "4e4179c4535dc968683fc49d"}, {"code": "(fn reverseList [l]\n  (if (empty? l)\n    l\n    ((fn append [l, x]\n      (if (empty? l)\n        [x]\n        (cons (first l) (append (rest l) x))))\n      (reverseList (rest l))\n      (first l))))", "problem": 23, "user": "50d2fa5ce4b049d4ed5650cf"}, {"code": "into '()", "problem": 23, "user": "50c99e3ee4b0bed41a122997"}, {"code": "(fn [l] (reduce #(if (seq? %1) (concat (list %2) (apply list %1)) (list %2 %1)) l))", "problem": 23, "user": "4f05a9cf535dcb61093f6bfc"}, {"code": "(fn myrev [myseq]\n   (if (empty? myseq)\n      myseq \n     (cons (last myseq) (myrev (butlast myseq)) )\n   )\n)", "problem": 23, "user": "50d3317ee4b049d4ed5650da"}, {"code": "into ()", "problem": 23, "user": "50d46d53e4b09cc622d65a69"}, {"code": "(fn [s]\n  (loop [s s result ()]\n    (if (empty? s)\n      result\n      (recur (next s) (conj result (first s))))))", "problem": 23, "user": "50d4909ce4b09cc622d65a6c"}, {"code": "(fn [n]\n  (loop [x '()]\n    (if (= (count x) (count (seq n)))\n      x\n      (recur (conj x (nth (seq n) (count x)))))))", "problem": 23, "user": "50bd13dee4b0594b91591c65"}, {"code": "(fn [coll] (into '() coll))", "problem": 23, "user": "4f0412f8535dcb61093f6b99"}, {"code": ";(fn rec_rev [xs] \n;  (if (= xs ()) \n;    []\n;\t(concat (rec_rev (rest xs)) [(first xs)])))\n\ninto ()", "problem": 23, "user": "50d4c626e4b09cc622d65a70"}, {"code": "(fn rev [sx] (if (empty? sx) \n               [] \n               (cons (last sx) (lazy-seq (rev (drop-last sx))))) )", "problem": 23, "user": "50cae881e4b0f75dcc9a6e51"}, {"code": "(fn my-reverse [l] \n  (if (empty? l) [] \n    (conj (my-reverse (rest l)) (first l))))", "problem": 23, "user": "4f98b69ae4b0dcca54ed6cf4"}, {"code": "reduce conj ()", "problem": 23, "user": "4fd93c42e4b05e33b9224f35"}, {"code": "reduce #(cons %2 %1) []", "problem": 23, "user": "4f03f197535dcb61093f6b84"}, {"code": "(fn [x]\n  (loop [lst x rlst '()]\n    (if (= '() lst) rlst\n      (recur (rest lst) (conj rlst (first lst)))\n      )\n    )\n  )", "problem": 23, "user": "50d324dde4b049d4ed5650d7"}, {"code": "reduce conj ()", "problem": 23, "user": "50d882d4e4b01f0871336e69"}, {"code": "#(loop [col %1, z []] (if (empty? col) z (recur (drop-last col) (conj z (last col)))))", "problem": 23, "user": "50d4c940e4b09cc622d65a71"}, {"code": "(partial reduce (fn [xs x] (conj xs x)) '())", "problem": 23, "user": "50d8f4b6e4b01f0871336e74"}, {"code": "into ()", "problem": 23, "user": "50d916eae4b0fd36a4b89221"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "50d8de3fe4b01f0871336e72"}, {"code": "#(into '() %)", "problem": 23, "user": "50d93c53e4b0fd36a4b89223"}, {"code": "into ()", "problem": 23, "user": "50d9096fe4b0fd36a4b89220"}, {"code": "(fn [sequ]\n  (loop [s sequ\n         new '()]\n    (if (empty? s) new (recur (rest s) (conj new (first s))))))", "problem": 23, "user": "50da19bae4b0277ab115b3cd"}, {"code": "#(loop [c % r []] (if (empty? c) r (recur (next c) (cons (first c) r))))", "problem": 23, "user": "50d179c7e4b05a71a896ef56"}, {"code": "#(loop [c 0 x ()]\n    (if (= (count %) c)\n    x\n    (recur (inc c) (conj x (nth (seq %) c )))))", "problem": 23, "user": "50cf2267e4b0e61f11ddcd8c"}, {"code": "(fn rev [v]\n(reduce conj () v))", "problem": 23, "user": "50d4309de4b09cc622d65a66"}, {"code": "(fn x [v]\n  (let [f (first v)]\n    (if (> (count v) 1)\n      (concat (x (rest v)) [f])\n      [f]\n    )\n  )\n)", "problem": 23, "user": "50c53708e4b08ad5e08ded0e"}, {"code": "#(into () %)", "problem": 23, "user": "50db8453e4b02e6ac9592c79"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "5095f761e4b0ba05ca7aebfd"}, {"code": "(fn revikkaa [coll]  (if (= (count coll) 1) coll (cons (last coll) (revikkaa (drop-last 1 coll) ) ) ))", "problem": 23, "user": "50dc2cd7e4b02e6ac9592c86"}, {"code": "#(into () %)", "problem": 23, "user": "50dabbcbe4b0844cfa0d8c00"}, {"code": "(fn [x]\n  (loop [x x a []]\n  \t(if (empty? x)\n      a\n      (recur (rest x) (cons (first x) a))      \n    )\n  )\n)", "problem": 23, "user": "4fc5273ce4b081705acca37f"}, {"code": "(fn [coll] \n (reduce (fn [x y] (cons y x)) [] coll)\n  )", "problem": 23, "user": "50de11b2e4b061dbdced7217"}, {"code": "(fn [coll]\n  (reduce conj () coll))", "problem": 23, "user": "50da34e4e4b0f31830755b3c"}, {"code": "reduce conj ()", "problem": 23, "user": "50392966e4b088a6a14ca764"}, {"code": "(fn _ [a]\n  (if (= (count a) 0)\n    a\n    (cons (last a) (_ (take (- (count a) 1) a)))))", "problem": 23, "user": "50df6dd0e4b061dbdced7225"}, {"code": "#(reduce (fn [a b] (cons b a)) '() %)", "problem": 23, "user": "50d86fe2e4b01f0871336e67"}, {"code": "#(into () %)", "problem": 23, "user": "50dcb958e4b02e6ac9592c92"}, {"code": "(fn this [items]\n  (if (empty? items)\n    \tnil\n    \t(concat (this (rest items)) [(first items)])))", "problem": 23, "user": "50dee6bbe4b061dbdced721e"}, {"code": "#(reduce (fn [s e] (cons e s)) [] %)", "problem": 23, "user": "50dfb660e4b061dbdced7228"}, {"code": "(fn rev-seq [sequ]\n  (let [first-item   (first sequ)\n        rest-of-list (rest sequ)]\n    (if (seq rest-of-list)\n      (conj (rev-seq rest-of-list) first-item)\n      [first-item])))", "problem": 23, "user": "50e063f3e4b061dbdced7230"}, {"code": "reduce (fn [lst, x] (conj lst x)) nil", "problem": 23, "user": "50dc1727e4b02e6ac9592c84"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "50e09313e4b061dbdced7233"}, {"code": "(fn r [c]\n  (if (= c [])\n    c\n    (cons (last c) (r (drop-last c)))))", "problem": 23, "user": "50e0e18ce4b0090303771ba9"}, {"code": "reduce #(conj %1 %2) `()", "problem": 23, "user": "50dfc83fe4b061dbdced7229"}, {"code": "#(into () %)", "problem": 23, "user": "50a7ef7fe4b090657f4a5ce0"}, {"code": "#(into '() %)", "problem": 23, "user": "50e008d1e4b061dbdced722a"}, {"code": "(fn [x] (loop [s x acc (empty x)] (if (empty? s) acc (recur (rest s) (cons (first s) acc)))))", "problem": 23, "user": "50e0d5a3e4b061dbdced723d"}, {"code": "(fn[indata]\n  (loop [result [] data indata]\n    (if(empty? data)\n    \tresult\n    (recur (cons (first data) result)(rest data))\n    )))", "problem": 23, "user": "4ef87ea7535dced4c769f25f"}, {"code": "#(into () %)", "problem": 23, "user": "50e1bdd8e4b019fc399ce17f"}, {"code": "#(into () %)", "problem": 23, "user": "50e1ef36e4b0ae09a0e7de77"}, {"code": "into '()", "problem": 23, "user": "505fd903e4b08f2a82ad10b7"}, {"code": "(fn this [s] (if (= 0 (count s)) '() (conj (this (butlast s)) (last s))))", "problem": 23, "user": "5021f0b3e4b00bba4502f7ac"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "50e20a07e4b0ae09a0e7de78"}, {"code": "(fn rev [xs]\n  \t(if (empty? xs)\n      \txs\n      \t(concat (rev (rest xs)) (list (first xs)))))", "problem": 23, "user": "50e317a9e4b056122d085d01"}, {"code": "(fn my-reverse\n                 ([coll] (my-reverse (rest coll) (list (first coll))))\n                 ([coll reverse-coll]\n                         (if (seq coll)\n                           (my-reverse (rest coll) (conj reverse-coll (first coll)))\n                           reverse-coll)))", "problem": 23, "user": "50dca54ce4b02e6ac9592c90"}, {"code": "(fn [coll]\n  (reduce conj () coll))", "problem": 23, "user": "50e3cf55e4b01912b3285c45"}, {"code": "(fn [c] (reduce #(cons %2 %1) '() c))", "problem": 23, "user": "50e3ddd4e4b01912b3285c47"}, {"code": "reduce conj ()", "problem": 23, "user": "50e3ec87e4b0463d32072486"}, {"code": "#(into '() %)", "problem": 23, "user": "50e3ea47e4b0463d32072485"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "50e41747e4b0463d32072489"}, {"code": "apply conj '()", "problem": 23, "user": "50e3f311e4b0463d32072487"}, {"code": "(fn rev [sq] \n  (loop [elements (count sq)\n         rev-sq (if (vector? sq)\n                  []\n                  '())]\n    (if (= 0 elements)\n      rev-sq\n      (recur (dec elements) (if (vector? sq) \n                              (conj rev-sq (nth sq (dec elements)))\n                              (cons (nth (seq sq) (- (count sq) elements)) rev-sq))))))", "problem": 23, "user": "50e35b2de4b094329ae7f4bb"}, {"code": "reduce #(conj %1 %2) '()", "problem": 23, "user": "50e496e8e4b0cb9ec68fbca0"}, {"code": "#(into () %)", "problem": 23, "user": "50e4f4e9e4b049a987753896"}, {"code": "(fn [l] (loop [r nil l l] (if (empty? l) r (recur (cons (first l) r) (rest l)))))", "problem": 23, "user": "5081561ae4b0946d0443855a"}, {"code": "reduce conj ()", "problem": 23, "user": "50e09f60e4b061dbdced7237"}, {"code": "(fn [v](reduce conj '() v))", "problem": 23, "user": "4eda7289535d10e5ff6f530c"}, {"code": "#(into () %)", "problem": 23, "user": "50e5bca5e4b09ae9427b0e75"}, {"code": "(fn tt [xs]\n  (if (empty? xs) []\n    (conj (tt (rest xs)) (first xs))))", "problem": 23, "user": "50e62a30e4b09e4d78444225"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "50e67597e4b09e4d78444228"}, {"code": "(fn[colls]\n  (loop [col colls result nil]\n    (if (empty? col)\n      result\n      (recur (rest col) (conj result (first col))))))", "problem": 23, "user": "50e6a086e4b0140bc92c0a8c"}, {"code": "#(into () %)", "problem": 23, "user": "50e704f5e4b0140bc92c0a94"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "50e19748e4b0ec0e353386e5"}, {"code": "(fn rev [xs]\n  (let [v (vec xs)\n        x (first xs)\n        rest (rest xs)]\n    (when (not (nil? x))\n      (concat (rev rest) [x])))\n)", "problem": 23, "user": "50e4ff72e4b049a987753897"}, {"code": "(fn rev\n  ([xs] (rev [] xs))\n  ([sx xs] \n   \t(cond\n     \t(= xs []) sx\n   \t\t:else (recur (cons (first xs) sx) (rest xs)))))", "problem": 23, "user": "50e647cde4b09e4d78444226"}, {"code": "#(loop [s %1 r nil] (if (empty? s) r (recur (rest s) (cons (first s) r))))", "problem": 23, "user": "50e7cef1e4b077ad597af36a"}, {"code": "(fn [s] (vals (zipmap (range) s)))", "problem": 23, "user": "50e448bae4b0463d3207248d"}, {"code": "(partial reduce conj nil)", "problem": 23, "user": "50e82c31e4b0ebbe794eb7da"}, {"code": "(fn [orig]\n  (loop [grow [] shrink orig]\n    (if (empty? shrink)\n      grow\n      (recur\n       (concat [(first shrink)] grow)\n       (rest shrink)))))", "problem": 23, "user": "50e4a5a9e4b0cb9ec68fbca3"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4db29f98535df7e46ed9b6c1"}, {"code": "into ()", "problem": 23, "user": "50d0d4c8e4b00b15ecee976a"}, {"code": "(fn [s] (reduce (fn [i v] \n                  (if (= i 0)\n                    (list v)\n                    (cons v i))) 0 s))", "problem": 23, "user": "4f6d23cde4b07046d9f4efc6"}, {"code": "(fn rev [l] (if (= (count l) 2) (list (last l) (first l)) (concat (rev (rest l)) (list (first l)))))", "problem": 23, "user": "50e86794e4b0ebbe794eb7e4"}, {"code": "(fn [s] (reduce (fn [l el] (conj l el)) '() s))", "problem": 23, "user": "50e87252e4b0ebbe794eb7e7"}, {"code": "#((fn [s sr] \n    (if (empty? s)\n      sr\n      (recur (rest s) (conj sr (first s))))) % ())", "problem": 23, "user": "50e88080e4b0ebbe794eb7ea"}, {"code": "into '()", "problem": 23, "user": "50e8a340e4b0ebbe794eb7ed"}, {"code": "(fn rev [x] (if (= x nil) '() (conj (rev (butlast x)) (last x))))", "problem": 23, "user": "50e8ff6be4b0ebbe794eb7f3"}, {"code": "(fn [col] (into () col))", "problem": 23, "user": "4e7e8485535db169f9c79716"}, {"code": "into ()", "problem": 23, "user": "50e87427e4b0ebbe794eb7e8"}, {"code": "(fn [sq]\n  (reduce (fn [a b] (cons b a)) (empty sq) sq))", "problem": 23, "user": "50b32252e4b03ea880433568"}, {"code": "into ()", "problem": 23, "user": "50e7dd5de4b077ad597af36b"}, {"code": "(fn rev\n  ([x] (rev (rest x) (list (first x))))\n  ([t h]\n   (if\n     (= (rest t) '())\n     (conj h (first t))\n     (rev (rest t) (conj h (first t))))))", "problem": 23, "user": "50e9d21ce4b02d54280826cf"}, {"code": "(fn r [x] \n  (if (empty? x)  \n    [] \n    (conj (r (rest x) ) (first x) )\n   )\n )", "problem": 23, "user": "4e2164ff535d04ed9115e815"}, {"code": "(fn func [coll] (if (empty? coll) nil (cons (last coll) (func (drop-last coll)))))", "problem": 23, "user": "50eb292ce4b0346a3e988cbd"}, {"code": "(fn [coll]\n  (loop [remaining coll\n         reversed  []]\n    \t(if (empty? remaining)\n          reversed\n          (recur (rest remaining) (cons (first remaining) reversed)))))", "problem": 23, "user": "4f03653f535dcb61093f6aa1"}, {"code": "(fn [lst]\n  (loop [curr_lst (list), rest_lst lst]\n    (if (= (count rest_lst) 0)\n      curr_lst\n      (recur \n       (concat curr_lst [(last rest_lst)])  \n       (butlast rest_lst)\n      )\n    )\n  )\n)", "problem": 23, "user": "50e84318e4b0ebbe794eb7e1"}, {"code": "(fn revlist [v]\n\t(loop [l v, newlist (empty v)]\n\t\t(if (= (count l) 0)\n\t\tnewlist\n\t\t(recur (rest l) (cons (first l) newlist))\n\t\t)\n\t)\n)", "problem": 23, "user": "50e9ed1de4b02d54280826d5"}, {"code": "#(loop [o %1 n '()] (if (empty? o) n (recur (rest o) (conj n (first o)))))", "problem": 23, "user": "50e8cac5e4b0ebbe794eb7ef"}, {"code": "(fn [coll]\n  (loop [rev ()\n         coll coll]\n    (if (== 0 (count coll))\n      rev\n      (recur (conj rev (first coll)) (rest coll)))))", "problem": 23, "user": "50eb4c32e4b0346a3e988cbf"}, {"code": "(fn [x]\n  (loop [f x r '()]\n\t(if (= 0 (count f))\n\t\tr\n\t\t(recur (rest f) (cons (first f) r)))))", "problem": 23, "user": "50ebf779e4b04edc3377703e"}, {"code": "reduce (fn [x y] (cons y x)) []", "problem": 23, "user": "50eb905fe4b0eeda2f1f3863"}, {"code": "#(into () %)", "problem": 23, "user": "50e69c7ce4b0140bc92c0a8b"}, {"code": "#(into () %)", "problem": 23, "user": "50e915eae4b033b0e80d11e9"}, {"code": "(fn reverse-sequence [xs]\n\t(into '() xs))", "problem": 23, "user": "50ed8a5fe4b06330c1f87c3d"}, {"code": "#(map last (sort-by first > (map-indexed vector %)))", "problem": 23, "user": "50d8739ae4b01f0871336e68"}, {"code": "#((fn [x y]\n  (if (empty? x)\n    y\n    (recur (rest x) (conj y (first x)))))\n  % '())", "problem": 23, "user": "50ed5d1be4b06330c1f87c37"}, {"code": "reduce conj '()", "problem": 23, "user": "50e61b39e4b09e4d78444224"}, {"code": "reduce #(conj %1 %2) '()", "problem": 23, "user": "50e47fa5e4b0cb9ec68fbc9c"}, {"code": "into ()", "problem": 23, "user": "50e282fde4b0ae09a0e7de7c"}, {"code": "(fn [coll](reduce conj () coll))", "problem": 23, "user": "4f56e322e4b0a7574ea7182d"}, {"code": "reduce conj ()", "problem": 23, "user": "50ebd63ce4b04edc3377703c"}, {"code": "(fn f [xs] (if (empty? xs) [] (conj (f (drop 1 xs)) (first xs))))", "problem": 23, "user": "50ee851ee4b06330c1f87c5b"}, {"code": "into()", "problem": 23, "user": "50ed4626e4b01236b1d4983c"}, {"code": "(fn [x] (into () x))", "problem": 23, "user": "50ed1b3be4b01236b1d49838"}, {"code": "(fn r [xs] (let [head (first xs)\n                 tail (next xs)]\n             (if tail\n               (conj (r tail) head)\n               [head])))", "problem": 23, "user": "50eafeaae4b0346a3e988cbb"}, {"code": "reduce conj ()", "problem": 23, "user": "50eddbc4e4b06330c1f87c4b"}, {"code": "#(into () %)", "problem": 23, "user": "50ec8d93e4b04edc3377704c"}, {"code": "(fn foo [l] (if  ( = (first l) nil) [] (conj (foo (rest l)) (first l))))", "problem": 23, "user": "50ef3e5de4b0a78662fa2652"}, {"code": "(fn r\n  [s]\n  (apply conj '() s))", "problem": 23, "user": "50ef77a4e4b0bdaecbb47d99"}, {"code": "into ()", "problem": 23, "user": "50ef4e2be4b0a78662fa2653"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "5047782ce4b0371827a27bc2"}, {"code": "(fn reverseSeq [x] ( if (empty? (rest x)) (vector (first x)) (conj  (reverseSeq (rest x)) (first x) ) ))", "problem": 23, "user": "50ef311fe4b0a78662fa2651"}, {"code": "into ()", "problem": 23, "user": "50ef9a7ae4b0bdaecbb47d9e"}, {"code": "reduce #(conj %1 %2) '()", "problem": 23, "user": "4ebaf790535dfed6da9c6d6e"}, {"code": "(partial reduce #(conj % %2) nil)", "problem": 23, "user": "50f01f44e4b0bdaecbb47daf"}, {"code": "reduce (fn [m i] (conj m i)) '()", "problem": 23, "user": "50ee68fce4b06330c1f87c59"}, {"code": "#(into () %)", "problem": 23, "user": "50f033e5e4b0bdaecbb47db1"}, {"code": "(fn [coll]\n  (loop [result []\n         [f & fs] (seq coll)]\n    (if (nil? f)\n      result\n      (recur (cons f result) fs))))", "problem": 23, "user": "50ed3c6be4b01236b1d4983b"}, {"code": "(fn [lst]\n  (reduce #(cons %2 %1) [(first lst)] (rest lst)))", "problem": 23, "user": "50f0d000e4b0c5f4fa5ddb6f"}, {"code": "into '()", "problem": 23, "user": "50f17c0de4b06d9538fe2123"}, {"code": "(fn\n  [coll]\n  (reduce conj () coll)\n  )", "problem": 23, "user": "50f0ec9ce4b0d527ce5b30df"}, {"code": "reduce\n  (fn [acc obj]\n    (conj acc obj))\n  '()", "problem": 23, "user": "50f1dedbe4b0897c4366dcd8"}, {"code": "#(into () %)", "problem": 23, "user": "50ef56dfe4b0bdaecbb47d94"}, {"code": "(partial reduce #(cons %2 %) [])", "problem": 23, "user": "50e111f7e4b084616e11c663"}, {"code": "reduce conj '()", "problem": 23, "user": "50ee145de4b06330c1f87c53"}, {"code": "reduce conj '()", "problem": 23, "user": "50e1077fe4b03e49d9cce649"}, {"code": "(fn rev \n  [coll] \n  (reduce #(cons %2 %) (empty coll) coll))", "problem": 23, "user": "50eebf46e4b06330c1f87c61"}, {"code": "(fn [coll] (reduce conj '() coll))", "problem": 23, "user": "50ed9e8de4b06330c1f87c44"}, {"code": "into ()", "problem": 23, "user": "50f07b21e4b0bdaecbb47dc2"}, {"code": "#(loop [acc '() coll %]\n   (if (empty? coll) \n     acc\n\t (recur (conj acc (first coll)) (rest coll))))", "problem": 23, "user": "50eff03ce4b0bdaecbb47da1"}, {"code": "into ()", "problem": 23, "user": "4f037cb0535dcb61093f6aef"}, {"code": "(fn [c] (map #(nth (seq c) %) (range (dec (count c)) -1 -1)))", "problem": 23, "user": "503e4138e4b06c4e0e1fa263"}, {"code": "into '()", "problem": 23, "user": "50742549e4b054001656accf"}, {"code": "(fn [s] (into '() s))", "problem": 23, "user": "4f65140ee4b07046d9f4ef3b"}, {"code": "(partial reduce #(cons %2 %1) [])", "problem": 23, "user": "50e4b066e4b0cb9ec68fbca6"}, {"code": "(fn rev [x] \n  (if (= (count x) 1)\n     x\n    (conj (rev (butlast x)) (last x))\n  )\n)", "problem": 23, "user": "50f4894be4b004d364930528"}, {"code": "(fn revseq [xs] (if (empty? xs) [] (conj  (revseq (rest xs)) (first xs))))", "problem": 23, "user": "50ef5703e4b0bdaecbb47d95"}, {"code": "#(into () %)", "problem": 23, "user": "50f8615ae4b0aafb827eb1fa"}, {"code": "(fn myreverse [x] (if (empty? x) (vector) (conj (myreverse (next x)) (first x))))", "problem": 23, "user": "50f2e5cee4b0ec8ee6fa8643"}, {"code": "(fn rev [xs]\n  (if (empty? xs)\n    []\n    (conj (rev (rest xs)) (first xs))))", "problem": 23, "user": "50ed1ce7e4b01236b1d49839"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4fc8769be4b0ee37620e1833"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "50f87a67e4b0aafb827eb202"}, {"code": "into '()", "problem": 23, "user": "50f94727e4b0e7c80cb15a49"}, {"code": "(fn [n] (into () n))", "problem": 23, "user": "50f9776be4b0e7c80cb15a4e"}, {"code": "#(into '() %)", "problem": 23, "user": "50f9e74ee4b0e7c80cb15a54"}, {"code": "reduce (fn [c v] (cons v c)) '()", "problem": 23, "user": "50fa01bce4b07934dda8b0ba"}, {"code": "reduce conj '()", "problem": 23, "user": "50f9e331e4b0e7c80cb15a53"}, {"code": "(partial (fn [r s] (if (nil? (seq s)) r (recur (cons (first s) r) (next s)))) [])", "problem": 23, "user": "50fb46e6e4b0d10d794c19e5"}, {"code": "(fn [sequ] \n  (into '() sequ)\n  )", "problem": 23, "user": "50fa0dcee4b07934dda8b0bb"}, {"code": "(fn rev [x]\n  (loop [result []\n         work x\n         ]\n    \n    (if (not= work [])\n      (recur  (conj result (last work))\n              (take (- (count work) 1) work)\n              )\n      ;else\n      result\n      )\n    )\n  )", "problem": 23, "user": "50fb084ee4b0d10d794c19dd"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "50f3bd98e4b041536e2eca3a"}, {"code": "#(into () %)", "problem": 23, "user": "50ef1429e4b083781cf16b12"}, {"code": "(fn [xs] (reduce #(cons %2 %1) () xs))", "problem": 23, "user": "50fbf811e4b0d10d794c19f1"}, {"code": "(fn f [x]\n \t(if (empty? x)\n  \t\t[]\n  \t\t(conj\n         \t(f (rest x))\n         \t(first x)\n         )\n  ))", "problem": 23, "user": "50fb5e61e4b0d10d794c19e8"}, {"code": "into '()", "problem": 23, "user": "50ec4ed7e4b04edc33777046"}, {"code": "(fn foo [x]\n  (cond (empty? x) []\n        :else (conj (foo (rest x)) (first x))))", "problem": 23, "user": "4f776d9fe4b0fbe0118ec57e"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "50fc299ee4b0d10d794c19f2"}, {"code": "#(loop [s % r []]\n (if (empty? s) r \n   (recur (rest s) (cons (first s) r))))", "problem": 23, "user": "4f55ab5ee4b0a7574ea71809"}, {"code": "(fn reverse-recursively [coll]\n  (loop [[r & more :as all] (seq coll)\n         acc '()]\n    (if all\n      (recur more (cons r acc))\n      acc)))", "problem": 23, "user": "50fc3589e4b0d10d794c19f3"}, {"code": "(fn [coll] (into '() coll))", "problem": 23, "user": "50fac9e3e4b07934dda8b0d1"}, {"code": "(fn thing [x] (reduce conj () x))", "problem": 23, "user": "50f89404e4b0aafb827eb204"}, {"code": "#(if (=(first %2)(last %2)) (merge %1 (first %2)) (recur (merge %1 (first %2)) (rest %2))) '()", "problem": 23, "user": "50fc9f6fe4b0d10d794c19fa"}, {"code": "(fn rev [sq] (letfn [(revh [rv sq] (if (empty? sq) rv (revh (cons (first sq) rv) (rest sq))))] (revh (empty sq) sq)))", "problem": 23, "user": "50fbdacfe4b0d10d794c19f0"}, {"code": "#(reduce (fn [x y] (conj x y)) '() %)", "problem": 23, "user": "50e80067e4b077ad597af36d"}, {"code": "into ()", "problem": 23, "user": "50f3ce2ee4b041536e2eca3d"}, {"code": "(fn [l]\n  (loop [l1 l l2 '()]\n    (if (empty? l1)\n      l2\n      (recur (rest l1)\n            (cons (first l1) l2)))))", "problem": 23, "user": "50fd5c79e4b033b9c38d78cf"}, {"code": "#(into () %)", "problem": 23, "user": "50fd027be4b0d10d794c19fe"}, {"code": "#(into '() %)", "problem": 23, "user": "50fe2b87e4b03cd852b4e84b"}, {"code": "reduce (fn [cumulatedList nextItem] (conj cumulatedList nextItem)) '()", "problem": 23, "user": "50f924bbe4b0e7c80cb15a47"}, {"code": "(fn [x] (reduce conj '() x))", "problem": 23, "user": "50b19a91e4b03ea880433552"}, {"code": "(fn foo [s] (when (not (= (first s) nil)) (cons  (last s) (foo (take (- (count s) 1) s)))))", "problem": 23, "user": "50f9c7fde4b0e7c80cb15a52"}, {"code": "#(into () %)", "problem": 23, "user": "50feab26e4b03cd852b4e850"}, {"code": "reduce conj '()", "problem": 23, "user": "4f973fb9e4b0dcca54ed6ce8"}, {"code": "(fn [x] (loop [l x r ()] (if (empty? l) r (recur (rest l) (conj r (first l))))))", "problem": 23, "user": "50f0a554e4b0c5f4fa5ddb6c"}, {"code": "(fn [x] (into () x))", "problem": 23, "user": "50ff3800e4b017584cb41ccb"}, {"code": "(fn rev [x]\n  (reduce conj '() x))", "problem": 23, "user": "50fdbb7ce4b033b9c38d78d6"}, {"code": "(fn rev [x] (reduce conj '() x))", "problem": 23, "user": "50ff5887e4b017584cb41ccd"}, {"code": "into ()", "problem": 23, "user": "50fda371e4b033b9c38d78d1"}, {"code": "(fn [arr] (reduce conj '() arr))", "problem": 23, "user": "50feb0e1e4b03cd852b4e851"}, {"code": "(fn reverse1\n  [coll]\n    (reduce conj () coll))", "problem": 23, "user": "50ab44b2e4b0f65d68208509"}, {"code": "(fn revseq [elts]\n  (loop [result '() remaining elts i (count elts)]\n    (println \"Result: \" result \"i: \" i)\n    (if (= i 0)\n      result\n      (recur (conj result (first remaining)) (rest remaining) (dec i)))))", "problem": 23, "user": "50fd9fd4e4b033b9c38d78d0"}, {"code": "#(loop [lst (rest %) v (first %) res []] (if (not (nil? v)) (recur (rest lst) (first lst) (cons v res)) res))", "problem": 23, "user": "51003cfee4b0ab35a0d40a02"}, {"code": "(fn [x] (reduce (fn [x y] (cons y x)) '() x))", "problem": 23, "user": "50f85902e4b0aafb827eb1f8"}, {"code": "(fn iter [x] (reduce conj '() x))", "problem": 23, "user": "51004dabe4b0e0dde55c17f0"}, {"code": "(fn rs\n\t([s] (rs (into [] s) (empty s) 0))\n\t([s r c]\n      (if (= c (count s)) r (rs s (cons (nth s c) r) (+ c 1)))\n    )\n)", "problem": 23, "user": "50f84d85e4b0aafb827eb1f7"}, {"code": "#((fn me [seq accum](if (empty? seq) accum (me (rest seq) (cons (first seq) accum)))) % (empty %))", "problem": 23, "user": "50eaec1de4b0346a3e988cb7"}, {"code": "(fn [coll] \n  (reduce conj '() coll))", "problem": 23, "user": "4df247b8535d08e6dec9fe25"}, {"code": "(fn [xs] (loop\n           [xs xs\n            reverse-xs []]\n           (if (empty? xs)\n             (seq reverse-xs)\n             (recur (butlast xs) (conj reverse-xs (last xs))))))", "problem": 23, "user": "51008b6fe4b0700a7a02d6e4"}, {"code": "(fn [x] (into () x))", "problem": 23, "user": "50fde9b9e4b033b9c38d78d7"}, {"code": "(fn[a-seq]\n  (loop [input a-seq output nil counter 0]\n    (if (= counter (count a-seq))\n       output\n      (recur (rest input) (cons (first input) output) (+ 1 counter)))))", "problem": 23, "user": "50febf94e4b075812dd6dfb3"}, {"code": "#(into () %)", "problem": 23, "user": "50f897a4e4b0aafb827eb205"}, {"code": "reduce #(conj %1 %2) '()", "problem": 23, "user": "5100c3ede4b0700a7a02d6e5"}, {"code": "(fn [s]\n  (reduce #(conj %1 %2)\n          '()\n          s))", "problem": 23, "user": "50978ca4e4b00ad8bab4e966"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "506aa040e4b05d3b7762c749"}, {"code": "(fn lastitem [items]\n  (if (= nil (seq items)) [] (conj (lastitem (rest items)) (first items))))", "problem": 23, "user": "510130d4e4b0bef64c30e268"}, {"code": "#(into () %)", "problem": 23, "user": "51007db2e4b0700a7a02d6e1"}, {"code": "apply conj '()", "problem": 23, "user": "50fee7c9e4b04bea760d0d7a"}, {"code": "(fn rev\n  [s]\n  (if (list? s)\n    (if (empty s)\n      \t'()\n   \t\t(conj (rev (rest s)) (first s)))\n    (if (empty? s)\n      \t[]\n     \t(concat  (rev (rest s)) (vector (first s)) ))))", "problem": 23, "user": "5101192ae4b0bef64c30e266"}, {"code": "#(loop [c % new '()] (if (empty? c) new (recur (rest c) (conj new (first c)))))", "problem": 23, "user": "51012ebde4b0bef64c30e267"}, {"code": "apply conj '()", "problem": 23, "user": "5006b7d2e4b0678c553fc48c"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "5102ef6be4b00c483ae176fc"}, {"code": "reduce conj '()", "problem": 23, "user": "5102489de4b00c483ae176f6"}, {"code": "#(loop [x % r []]\n   (if (empty? x)\n     r\n     (recur (next x) (cons (first x) r))))", "problem": 23, "user": "5103807fe4b00c483ae17703"}, {"code": "reduce conj '()", "problem": 23, "user": "51040eb2e4b0432126ba9bb4"}, {"code": "into ()", "problem": 23, "user": "5104dd11e4b0730a5f55ad84"}, {"code": "(fn [s] (reduce #(cons %2 %1) '() s))", "problem": 23, "user": "50f48298e4b004d364930527"}, {"code": "#((fn [xs ys]\n    (if (empty? xs)\n      ys\n      (recur (rest xs) (cons (first xs) ys))))\n  % [])", "problem": 23, "user": "50f9739ce4b0e7c80cb15a4d"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "510591dde4b06d28cacc92eb"}, {"code": "(fn [l] (loop [l l r []]\n    (if (empty? l) r (recur (rest l) (cons (first l) r)))))", "problem": 23, "user": "51059d33e4b0380e797c7d5c"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4db1fe241254ad5b4805fa77"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "5101b52ce4b0a79bcc8c0e0f"}, {"code": "(fn [c] (reduce (fn [a x] (cons x a)) (empty c) c))", "problem": 23, "user": "50066c83e4b0678c553fc484"}, {"code": "(fn [col]\n  (loop [init col\n         end []]\n    (if (empty? init)\n      end\n      (recur (rest init) (cons (first init) end)))))", "problem": 23, "user": "50e54fe4e4b049a9877538a0"}, {"code": "reduce conj '()", "problem": 23, "user": "50fe91c1e4b03cd852b4e84e"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4f5d5202e4b0030a34fb2b38"}, {"code": "(fn [x] (reduce (fn [s el] (conj s el)) '() x))", "problem": 23, "user": "5106c803e4b01150e115ebee"}, {"code": "(fn [s]\n  (loop [ss s\n         r []]\n    (if (seq ss) (recur (rest ss) (cons (first ss) r))\n      r)))", "problem": 23, "user": "5106bc8ae4b01150e115ebec"}, {"code": "(fn rvs [l]\n  (reduce conj () l))", "problem": 23, "user": "51085be5e4b00aa5c85a1024"}, {"code": "(fn [x] (reduce #(vec (cons %2 %1)) (vec (cons [] x))))", "problem": 23, "user": "5106d9f3e4b01150e115ebef"}, {"code": "#(let [s (vec %)](map last (take (count s) (iterate pop s))))", "problem": 23, "user": "5107b86de4b05b2b4eee7495"}, {"code": "(fn self [x]\n  (if (empty? x)\n    nil\n    (cons (last x) (self (butlast x)))))", "problem": 23, "user": "50dc1689e4b02e6ac9592c83"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "51064b76e4b01150e115ebe4"}, {"code": "reduce conj ()", "problem": 23, "user": "4e964f4a535dbda64a6f6b42"}, {"code": "(fn rev [l] (if (= l '()) '() (concat  (rev (rest l)) (list (first l)))))", "problem": 23, "user": "510931ede4b0c71f76895663"}, {"code": "(partial reduce conj ())", "problem": 23, "user": "51095588e4b0e34872b3efa5"}, {"code": "#((fn f [a r]\n      (if (empty? a)\n        r\n        (f (rest a) (concat [(first a)] r ))\n        )) % [])", "problem": 23, "user": "50bce014e4b0594b91591c63"}, {"code": "#(into () %)", "problem": 23, "user": "510a3cd4e4b06956752d35ad"}, {"code": "(fn [coll] \n  (loop [s coll result '()] \n    (if (empty? s) result (recur (rest s) (conj result (first s))))))", "problem": 23, "user": "50fec710e4b0219f3bc8bd97"}, {"code": "#(loop [curr %\n        a-seq ()]\n   (if-not (first curr)\n     a-seq\n     (recur (rest curr)\n            (conj a-seq (first curr)))))", "problem": 23, "user": "510aa172e4b0a506d37565b7"}, {"code": "(fn self [col] \n    (if (empty? col) nil (concat (self (rest col)) (list (first col))))\n    )", "problem": 23, "user": "510b704ee4b078ea71921100"}, {"code": "(fn [x] (into () x))", "problem": 23, "user": "510b5596e4b078ea719210fd"}, {"code": "#(reduce conj '() %1)", "problem": 23, "user": "50fe9d60e4b03cd852b4e84f"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "50a00725e4b08df8156e9e46"}, {"code": "(fn r\n\t[s]\n\t(if s\n\t\t(cons (last s) (r (butlast s)))\n\t\tnil\n\t)\n)", "problem": 23, "user": "510747a4e4b05b2b4eee7492"}, {"code": "#(into '() %)", "problem": 23, "user": "510c01bae4b078ea7192110a"}, {"code": "(fn __[a]\n  (cond \n   (number? (first a)) (sort-by - a)\n   :else (sort-by first > a)))", "problem": 23, "user": "4f23e1cde4b0d66497709fe4"}, {"code": "reduce #(cons %2 %1) []", "problem": 23, "user": "504e96f0e4b069badc5a33ba"}, {"code": "(fn [s] (into () s))", "problem": 23, "user": "510c67f0e4b078ea71921119"}, {"code": "(fn [items]\n  (reduce conj '() items))", "problem": 23, "user": "510cd1dde4b078ea71921124"}, {"code": "(fn [stuff] (reduce conj '()  stuff))", "problem": 23, "user": "510ce3cbe4b078ea71921127"}, {"code": "#(into () %)", "problem": 23, "user": "510cfba7e4b078ea7192112b"}, {"code": "reduce #(cons %2 %1) '()", "problem": 23, "user": "510d1ff4e4b078ea7192112f"}, {"code": "(fn [xs] \n  (loop [c xs s []]\n    (if (empty? c)\n      s\n      (recur (take (dec (count c)) c) (conj s (last c)))\n    )\n  )\n)", "problem": 23, "user": "510cda21e4b078ea71921126"}, {"code": "(fn rev [xs]\n  (when (not (empty? xs))\n    (conj (rev (butlast xs)) (last xs))))", "problem": 23, "user": "5102ac9de4b00c483ae176fa"}, {"code": "#(loop [n 0 acc '()]\n\t      (if (= n (count %))\n\t\t  acc\n\t\t(recur (inc n) (conj acc (nth (seq %) n)))))", "problem": 23, "user": "4f67f674e4b07046d9f4ef6e"}, {"code": "into ()", "problem": 23, "user": "510db6cde4b078ea71921145"}, {"code": "(fn my-reverse [coll]\n  (if (empty? coll)\n      []\n\t  (conj (my-reverse (rest coll))\n            (first coll))))", "problem": 23, "user": "510d59cce4b078ea71921134"}, {"code": "#(into '() %)", "problem": 23, "user": "510d9d61e4b078ea71921141"}, {"code": "(fn [xs]\n  (loop [xs xs, acc nil]\n    (if (empty? xs)\n      acc\n      (recur (rest xs) (conj acc (first xs))))))", "problem": 23, "user": "4fc53390e4b081705acca389"}, {"code": "reduce #(conj % %2) (list)", "problem": 23, "user": "510e3640e4b07438aa32145a"}, {"code": "(fn\n  [coll]\n  ((fn [coll new-coll]\n     (if (empty? coll)\n       new-coll\n       (recur (rest coll) (cons (first coll) new-coll))))\n   coll (empty coll)))", "problem": 23, "user": "4f5760c3e4b0a7574ea71837"}, {"code": "(fn [input] (reduce conj '() input))", "problem": 23, "user": "51018807e4b0a79bcc8c0e0b"}, {"code": "#(loop [result (empty (vec %1)) circle (count %1)]\n                               (if (<= circle 0) result\n                                 (recur (conj result (nth (vec %1) (dec circle))) (dec circle))\n                                 )\n                               )", "problem": 23, "user": "510d3dc6e4b078ea71921132"}, {"code": "reduce (fn [acc x] (cons x acc)) []", "problem": 23, "user": "510c123be4b078ea7192110e"}, {"code": "(fn [xs]\n  (loop [ret '() lst xs]\n    (if (empty? lst)\n      ret\n      (recur (cons (first lst) ret) (rest lst)))))", "problem": 23, "user": "4e74e119535d7a570dd295bc"}, {"code": "(partial reduce conj ())", "problem": 23, "user": "511026b1e4b04c71fce993ec"}, {"code": "(partial #(if (empty? %2)\n                 %\n                 (recur (conj % (first %2)) (rest %2)))\n             ())", "problem": 23, "user": "51105c7fe4b04c71fce993ef"}, {"code": "(fn [x]\n  (loop [result nil remaining x]\n    (if (= (count remaining) 0)\n      result\n      (recur (concat result (list (last remaining)) ) (drop-last remaining)))))", "problem": 23, "user": "51107e6ee4b04c71fce993f2"}, {"code": "reduce (fn [a b] (cons b a)) []", "problem": 23, "user": "4fe8fda4e4b0547ebccb2438"}, {"code": "(fn [x] (reduce conj '() x))", "problem": 23, "user": "510f0b95e4b0faca7c680138"}, {"code": "reduce conj '()", "problem": 23, "user": "50b35486e4b03ea88043356a"}, {"code": "(fn [s]\n  (loop [f s\n         r [] ]\n    (if (next f)\n      (recur (rest f) (concat [(first f)] r))\n      (concat [(first f)] r))))", "problem": 23, "user": "51113eb8e4b09ff0d31c7ca9"}, {"code": "(fn [coll] (loop [final []\n                  remain coll]\n             (cond\n              (and (empty? remain) (vector? coll)) final\n              (empty? remain) (seq final)\n              true (recur (conj final (last remain)) (butlast remain)))))", "problem": 23, "user": "507a33dee4b08327cd804a68"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "50b9e36ae4b04934c218a4aa"}, {"code": "(fn f\n  [coll]\n  (loop [[h & more :as all] (seq coll)\n         revd '()]\n    (if all\n      (recur more (cons h revd))\n      revd)))", "problem": 23, "user": "51118901e4b03f43822243d2"}, {"code": "#(loop [s-in % s-out '()]\n   (if (= 0 (count s-in))\n     s-out\n     (recur (rest s-in) (conj s-out (first s-in)))))", "problem": 23, "user": "50d3b03fe4b030b634c368b9"}, {"code": "#(into () %)", "problem": 23, "user": "51126a28e4b0350614f07a74"}, {"code": "#(reduce conj '() %1)", "problem": 23, "user": "511060fae4b04c71fce993f1"}, {"code": "#(into () %)", "problem": 23, "user": "511278bbe4b0350614f07a75"}, {"code": "(fn [x]\r\n\t(for [i (range 1 (+ (.size x) 1))] (nth (into [] x) (- (.size x) i))))", "problem": 23, "user": "510a6bece4b06956752d35af"}, {"code": "#(loop [f % b []] (if (empty? f) b (recur (rest f) (cons (first f) b))))", "problem": 23, "user": "510b574fe4b078ea719210fe"}, {"code": "(fn [xs]\n  (loop [xs xs\n         zs '()]\n    (if (seq xs)\n      (recur (rest xs) (conj zs (first xs)))\n      zs)))", "problem": 23, "user": "511442d0e4b0e9c109bb74d5"}, {"code": "(fn [l]\n  (loop [ll l acc (empty (seq l))]\n    (if (empty? ll)\n      acc\n      (recur (rest ll) (conj acc (first ll)))\n      )\n    )\n  )", "problem": 23, "user": "504e90bae4b069badc5a33b8"}, {"code": "(fn [coll]\n  (reduce\n   (fn [xs x]\n     (conj xs x))\n   '()\n   coll))", "problem": 23, "user": "50cd0fd5e4b0f7a459302aad"}, {"code": "(fn [x] (for [l (sort-by #(/ (inc (first %1)) ) (map-indexed vector x))] (last l)))", "problem": 23, "user": "510c16afe4b078ea7192110f"}, {"code": "#(map (partial nth (vec %)) (range (- (count %) 1) -1 -1))", "problem": 23, "user": "5113beeee4b0350614f07a85"}, {"code": "#(map last (sort-by first > (map-indexed list %)))", "problem": 23, "user": "5112bf27e4b0350614f07a7e"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "5113e492e4b0029845b11c58"}, {"code": "#(loop [s %, r []] (if (empty? s) r (recur (rest s) (cons (first s) r))))", "problem": 23, "user": "5081566ce4b0946d0443855b"}, {"code": "reduce conj '()", "problem": 23, "user": "4f74271ae4b044e54cd9a8f6"}, {"code": "(fn [input]\n   (loop [result [] elements input]\n     (if (empty? elements)\n       result\n       (recur (cons (first elements) result) (rest elements)))\n     )\n   )", "problem": 23, "user": "5106dc1be4b01150e115ebf0"}, {"code": "(fn [c] (reduce #(conj % %2) '() c))", "problem": 23, "user": "5111330de4b09ff0d31c7ca8"}, {"code": "(fn my-reverse\n  ([items] (my-reverse items '()))\n  ([items output]\n   (if (empty? items)\n     output\n     (recur (rest items) (cons (first items) output)))))", "problem": 23, "user": "511720eae4b0063b4e3e16da"}, {"code": "reduce conj ()", "problem": 23, "user": "5114ab7be4b0ce5098ee73b5"}, {"code": "into ()", "problem": 23, "user": "50f07f6ae4b0bdaecbb47dc4"}, {"code": "(fn r [xs] (reduce conj () xs))", "problem": 23, "user": "5116e176e4b0063b4e3e16d7"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "51181009e4b0e0897831a60f"}, {"code": "#(reduce conj nil %)", "problem": 23, "user": "50e3e108e4b01912b3285c48"}, {"code": "into ()", "problem": 23, "user": "4f4ff836e4b03ad3f0c10cf4"}, {"code": "(fn rev [l] (cond\n         (empty? l) nil\n         (empty? (rest l)) l\n         :else (conj (vec (rev (rest l))) (first l))))", "problem": 23, "user": "510cba32e4b078ea71921121"}, {"code": "(fn roflreverse [initial-seq]\n  (loop [seq initial-seq out ()]\n    (if (= seq ())\n      out\n      (recur (rest seq) (conj out (first seq))))))", "problem": 23, "user": "5102f4f9e4b00c483ae176fd"}, {"code": "(fn myrev [l] (if (empty? l) [] (concat (myrev (rest l)) [(first l)])))", "problem": 23, "user": "511907a4e4b046de85f62a4d"}, {"code": "(fn myreverse [coll] (if (empty? coll) '() (cons (last coll) (myreverse (butlast coll)))))", "problem": 23, "user": "511937eee4b055cfb310d495"}, {"code": "(fn rev [coll]\n  (loop [acc (list)\n         coll coll]\n\t  (if (empty? coll)\n        acc\n        (recur (cons (first coll) acc) (rest coll)))))", "problem": 23, "user": "51195e77e4b055cfb310d499"}, {"code": "(fn [xs] (reduce conj () xs))", "problem": 23, "user": "50cf94bde4b0abc485cb9bb2"}, {"code": "reduce #(conj % %2) '()", "problem": 23, "user": "511937e1e4b055cfb310d494"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "51197750e4b057cba170bc99"}, {"code": "reduce conj '()", "problem": 23, "user": "510c8a00e4b078ea7192111f"}, {"code": "reduce conj '()", "problem": 23, "user": "5115cf87e4b0ce5098ee73c3"}, {"code": "(fn [x] (reduce #(cons %2 %1) '() x))", "problem": 23, "user": "4dada426c9a9d6ed2a99dc57"}, {"code": "(fn [xs] (reduce (fn [memo item] (conj memo item)) '() xs))", "problem": 23, "user": "509ac9cae4b050a581d3d579"}, {"code": "(fn [x] (reduce (fn [mem i] (conj mem i)) '() x))", "problem": 23, "user": "511a31d0e4b09045b2b16941"}, {"code": "into ()", "problem": 23, "user": "511a3392e4b09045b2b16943"}, {"code": "(fn [items]\n  (loop [cur_items items\n         result []]\n    (cond\n      (empty? cur_items) result\n      :else\n        (recur (rest cur_items)\n               (cons (first cur_items) result))\n    )\n  )\n)", "problem": 23, "user": "502be4fae4b08f5602f232eb"}, {"code": "(fn my-rev [elems]\n  (if (empty? elems) elems\n    (cons (last elems) (my-rev (butlast elems)))))", "problem": 23, "user": "5119f3d5e4b06c8af0111818"}, {"code": "reduce (fn [acc x] (conj acc x)) '()", "problem": 23, "user": "4fda2f0ae4b05e33b9224f47"}, {"code": "reduce (fn [a b] ( cons b a))'()", "problem": 23, "user": "51193314e4b055cfb310d492"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "51156b07e4b0ce5098ee73be"}, {"code": "(fn [collection]\n  (loop [ret () coll collection]\n    (if (empty? coll)\n      ret\n      (recur (conj ret (first coll)) (rest coll))\n     )\n  )\n)", "problem": 23, "user": "5117caa0e4b0e0897831a60d"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "511aa2a4e4b0c87c59c9670a"}, {"code": "into '()", "problem": 23, "user": "511618b1e4b0d4f670fd2fdf"}, {"code": "into ()", "problem": 23, "user": "510967aae4b07c05fdf6dc0f"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "511a98d7e4b0c87c59c96707"}, {"code": "into ()", "problem": 23, "user": "511ac2ede4b0c87c59c9670f"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "511a4eb4e4b09045b2b16945"}, {"code": "#(loop [r '() \n             c %]\n            (if (empty? c)\n                r\n              (recur (conj r (first c)) (rest c))))", "problem": 23, "user": "511b810ce4b07ab9ec456182"}, {"code": "#(into ()%)", "problem": 23, "user": "511b50cfe4b07ab9ec456181"}, {"code": "#(reduce (fn [first second] (cons second first)) [] %)", "problem": 23, "user": "5119ef37e4b06c8af0111817"}, {"code": "(fn rev\n  ([xs] (rev (rest xs) (list(first xs))))\n  ([xs acc]\n   (if (seq xs)\n     (recur (rest xs) (conj acc (first xs)))\n     acc)))", "problem": 23, "user": "511c91ace4b00c2a1fa7ff7a"}, {"code": "reduce (fn [z a] (conj z a)) '()", "problem": 23, "user": "511cca27e4b00c2a1fa7ff7d"}, {"code": "(fn [x] (loop [in x out '()] (if (empty? in) out (recur (rest in) (conj out (first in))))))", "problem": 23, "user": "4f47eab2e4b0d56e7bb92bc6"}, {"code": "reduce #(conj %1 %2) '()", "problem": 23, "user": "4fc9985ee4b0ee37620e1846"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "510dc185e4b078ea71921146"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "511623cbe4b0d4f670fd2fe1"}, {"code": "(fn revlist ([x] (revlist x ())) ([x y] (if (empty? x) (vec y) (revlist (rest x) (conj y (first x))))))", "problem": 23, "user": "5118a9a3e4b046de85f62a4a"}, {"code": "#(into () %)", "problem": 23, "user": "4e50ad74535dc968683fc4ec"}, {"code": "#(reduce conj '() (seq %))", "problem": 23, "user": "511ac026e4b0c87c59c9670e"}, {"code": "(fn myrev [seq] (if (empty? seq) [] (conj (myrev (rest seq)) (first seq) )))", "problem": 23, "user": "511d5d8ee4b022853b0e07a3"}, {"code": "reduce conj ()", "problem": 23, "user": "500c0393e4b03d00572d2d85"}, {"code": "reduce (fn [x y] (cons y x)) []", "problem": 23, "user": "511c44fde4b00c2a1fa7ff77"}, {"code": "(fn [s]\n  ((fn [in out] (if (empty? in) out (recur (rest in) (cons (first in) out)))) s []))", "problem": 23, "user": "511f1434e4b0cf8688794046"}, {"code": "(fn [col]\n           (if (= (vector? col) true)\n               ((fn rec [col res n]\n                    (if (= n -1)\n                        res\n                      (rec col (conj res (nth col n)) (- n 1)))) col [] (- (count col) 1))\n             ((fn rec1 [col res]\n                  (if (= col ())\n                      res\n                    (rec1 (rest col) (conj res (first col))))) col ())))", "problem": 23, "user": "511f656ae4b085952a83535e"}, {"code": "(fn rev [coll] \n  (if (> (count coll) 1) \n    (concat (rev (rest coll)) [(first coll)])\n    coll))", "problem": 23, "user": "51170b49e4b0063b4e3e16d9"}, {"code": "(partial reduce (fn [a b] (conj a b)) '())", "problem": 23, "user": "511f9625e4b085952a835362"}, {"code": "reduce conj '()", "problem": 23, "user": "5100d7dbe4b04f1d96d946df"}, {"code": "(fn [coll]\n\t(reduce conj '() coll))", "problem": 23, "user": "51205867e4b0e88f5a20c40f"}, {"code": "(fn [s] (loop [remaining s result (empty s)]\n          (if (empty? remaining)\n          \tresult\n            (recur\n             (rest remaining)\n             (cons (first remaining) result)))))", "problem": 23, "user": "512088a3e4b0aab57de66d4f"}, {"code": "#(into '() %)", "problem": 23, "user": "511f88eee4b085952a83535f"}, {"code": "#(into () %)", "problem": 23, "user": "512117f1e4b0ca414459ae94"}, {"code": "(fn rev [coll] \n  (if (empty? coll)\n    coll\n    (concat\n      (rev (rest coll))\n      (list (first coll)))))", "problem": 23, "user": "512044bbe4b0e88f5a20c40d"}, {"code": "reduce conj ()", "problem": 23, "user": "5118acfbe4b046de85f62a4b"}, {"code": "reduce conj '()", "problem": 23, "user": "4f58d922e4b0a7574ea71857"}, {"code": "reduce (fn [x y] (conj x y)) ()", "problem": 23, "user": "50c4ff23e4b0210b849018b8"}, {"code": "(fn [res, coll]\n  (if (empty? coll)\n    res\n    (recur (conj res (last coll)) (butlast coll))\n      )) []\n\n#_#(into () %)", "problem": 23, "user": "51227e00e4b068a9582e656c"}, {"code": "#(loop [r [] t %]\n   (if (empty? t) r\n     (recur (cons (first t) r) (rest t))))", "problem": 23, "user": "511d6a01e4b022853b0e07a5"}, {"code": "(fn t [l]\n  (if (empty? (rest l))\n    l\n    (concat (t (rest l)) [(first l)])\n    )\n  )", "problem": 23, "user": "512339fce4b03b44edbed434"}, {"code": "#((fn dd [x y]\n     (if (empty? x) y\n         (dd (rest x) (cons (first x) y))))\n   % (cond (vector? %) []\n           (list? %) '()\n           (set? %) #{})\n   )", "problem": 23, "user": "5099283ce4b0cae2931060af"}, {"code": "(fn [col]\n  (loop [new []\n         col col]\n    (if (zero? (count col))\n      new\n      (recur (concat (vector (first col)) new) (rest col)))))", "problem": 23, "user": "5123ac8ee4b061b4c6f0e0b1"}, {"code": "#( loop [nl '() ol %] \n   (if \n     (empty? ol) nl \n     (recur (cons (first ol) nl) (rest ol))))", "problem": 23, "user": "4ff2ff7ce4b0678c553fc342"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "50c011c6e4b080409b860f29"}, {"code": "(fn r [s]\n   (let [v (into [] s)]\n     (if (empty? v)\n       '()\n       (conj (r (pop v)) (peek v)))))", "problem": 23, "user": "5123f099e4b02c3f2a072cca"}, {"code": "(fn [coll]\n   (loop [r (rest coll)\n          s (conj '() (first coll))]\n     (if (= (count r) 0)\n       \ts\n     \t(recur (rest r) (conj s (first r))))))", "problem": 23, "user": "5124c38ce4b0ee1bf4cfdcd0"}, {"code": "#(into () %)", "problem": 23, "user": "510acd6ee4b078ea719210f4"}, {"code": "(fn rv2 [values]\n  (reduce conj '() values))", "problem": 23, "user": "511aa6f5e4b0c87c59c9670c"}, {"code": "(fn [coll]\n  (loop [result [] \n         coll coll\n         cnt (count coll)]\n    (if (empty? coll)\n      result\n      (recur (conj result (last coll)) (take (- cnt 1) coll) (dec cnt)))))", "problem": 23, "user": "512474ede4b02c3f2a072cce"}, {"code": "#(apply (partial conj nil) (seq %))", "problem": 23, "user": "5125834ae4b05d10e3e395fa"}, {"code": "reduce conj ()", "problem": 23, "user": "5105ed16e4b01150e115ebe2"}, {"code": "(fn reverse-seq [x]\n  (if (< 1 (count x))\n  \t(cons (last x) (reverse-seq (take (- (count x) 1) x)))\n  \tx\n  )\n)", "problem": 23, "user": "5125029de4b0ce9225d2ed3e"}, {"code": "#(into () %)", "problem": 23, "user": "5125d963e4b05d10e3e395fe"}, {"code": "(fn [ss]\n  (letfn [(iter [s new_s]\n            (if (empty? s)\n              new_s\n              (recur (rest s) (cons (first s) new_s))))]\n    (iter ss [])))", "problem": 23, "user": "5125745ae4b05d10e3e395f9"}, {"code": "(fn [xs] (loop [xs xs acu []] (if (seq xs) (recur (rest xs) (cons (first xs) acu)) acu)))", "problem": 23, "user": "511a0374e4b06c8af011181a"}, {"code": "#(into '() %)", "problem": 23, "user": "5126c1ebe4b083bb8f88cf0d"}, {"code": "into ()", "problem": 23, "user": "51256b40e4b05d10e3e395f8"}, {"code": "(fn rev [coll]\n    (reduce conj () coll))", "problem": 23, "user": "5126dbabe4b083bb8f88cf0e"}, {"code": "reduce conj '()", "problem": 23, "user": "5117c31ee4b0e0897831a60c"}, {"code": "(fn rev [x]\n  (let [rev (fn [x r] (if (= x '())\n                        r\n                        (recur (rest x) (cons (first x) r))))]\n    (rev x '())))", "problem": 23, "user": "4f49c002e4b0d56e7bb92bfd"}, {"code": "(fn f\n  ([xs] (f xs '()))\n  ([xs rev-xs]\n   (if (nil? (seq xs))\n     rev-xs\n     (recur (rest xs) (cons (first xs) rev-xs)))))", "problem": 23, "user": "50ef96a1e4b0bdaecbb47d9d"}, {"code": "reduce #(conj %1 %2) `()", "problem": 23, "user": "5127ca90e4b03a34742b42ff"}, {"code": "(fn rev [s]\n  (if (seq s)\n\t(conj (rev (rest s)) (first s))\n    []))", "problem": 23, "user": "51281b25e4b03a34742b4304"}, {"code": "#(apply conj '() %)", "problem": 23, "user": "5127e504e4b03a34742b4302"}, {"code": "into ()", "problem": 23, "user": "50d3ec8be4b030b634c368bb"}, {"code": "#(loop [s % o []]\n   (if (empty? s) o\n     (recur (rest s) (cons (first s) o))))", "problem": 23, "user": "51284226e4b03a34742b4308"}, {"code": "(fn reberse [l]\n  (cond\n   (empty? l) ()\n   :else (cons (last l) (reberse (butlast l)))))", "problem": 23, "user": "5128554ee4b03a34742b430a"}, {"code": "(fn myrev [s] \n  (loop [r (list (first s))\n         i (rest s)]\n    (if (seq i)\n      (recur (conj r (first i)) (rest i))\n      r)))", "problem": 23, "user": "512148dae4b05ae5a5823c0f"}, {"code": "(fn [arg]\n  (loop [x () iter arg]\n    (if (empty? iter)\n      x\n      (recur (conj x (first iter)) (rest iter)))))", "problem": 23, "user": "512934dde4b03a34742b4315"}, {"code": "into ()", "problem": 23, "user": "510ec1bce4b07438aa321461"}, {"code": "into ()", "problem": 23, "user": "511d11d7e4b022853b0e079f"}, {"code": "reduce conj ()", "problem": 23, "user": "5129039de4b03a34742b4313"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "5129b0eee4b02a03fbcee0a7"}, {"code": "#(into () %)", "problem": 23, "user": "512a191fe4b02a03fbcee0a8"}, {"code": "(fn my-reverse\n  ([objects] (my-reverse objects ()))\n  ([objects acc]\n   (if (= (count objects) 0)\n     acc\n     (my-reverse (rest objects)\n                 (conj acc (first objects))))))", "problem": 23, "user": "512a7c70e4b0ff5c4bc1f99d"}, {"code": "(fn rev [s] (if (empty? s) [] (conj (rev (rest s)) (first s))))", "problem": 23, "user": "512b9e59e4b04d059cf1fd17"}, {"code": "reduce conj '()", "problem": 23, "user": "510fd798e4b04c71fce993dc"}, {"code": "(fn rev-seq [xs] (reduce (fn [memo x] (conj memo x)) '() xs))", "problem": 23, "user": "512c0000e4b03a42b6300231"}, {"code": "reduce conj ()", "problem": 23, "user": "4fe8d1b5e4b0547ebccb2425"}, {"code": "(fn [x]\n  (loop [current x rvsd '()]\n    (if (empty? current)\n      rvsd\n     (recur (rest current) (conj rvsd (first current)))\n      )\n    )\n)", "problem": 23, "user": "512832dfe4b03a34742b4306"}, {"code": "(fn [s]\n  (letfn\n    [(rev\n      [s sp]\n      (if (seq s)\n        (recur (rest s) (cons (first s) sp))\n        sp))]\n    (rev s [])))", "problem": 23, "user": "50a7f2a8e4b090657f4a5ce1"}, {"code": "into ()", "problem": 23, "user": "506c273ae4b080c1a96bd6bd"}, {"code": "into ()", "problem": 23, "user": "51057b2be4b06d28cacc92e8"}, {"code": "reduce conj '()", "problem": 23, "user": "512cef56e4b0000438794b5b"}, {"code": "(fn r [s]\n  (if (empty? s) \n  \t[]\n    (conj (r (rest s)) (first s))\n  ))", "problem": 23, "user": "512e0f36e4b0b740abc59820"}, {"code": "#(loop [s %, result []]\n   (if (empty? s)\n     result\n     (recur (rest s) (into [(first s)] result))))", "problem": 23, "user": "512d3304e4b040332b905b2d"}, {"code": "(fn [lst] (reduce conj () lst))", "problem": 23, "user": "512bcd74e4b04d059cf1fd19"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "512e58cae4b0b740abc59825"}, {"code": "(fn [s]\n  (reduce conj '() s))", "problem": 23, "user": "512eb723e4b0b740abc5982b"}, {"code": "(partial reduce conj nil)", "problem": 23, "user": "511b9017e4b00c2a1fa7ff6b"}, {"code": "reduce conj ()", "problem": 23, "user": "512f74afe4b0762be4c7aadc"}, {"code": "reduce #(cons %2 %1) []", "problem": 23, "user": "512b7a05e4b04d059cf1fd14"}, {"code": "(fn [x] (vec (reduce #(cons %2 %1) [] x)))", "problem": 23, "user": "512dfc5ee4b0b740abc5981f"}, {"code": "reduce (fn [x y] (conj x y)) '()", "problem": 23, "user": "512f2d17e4b0762be4c7aad8"}, {"code": "#(into () %)", "problem": 23, "user": "512eb1e7e4b0b740abc5982a"}, {"code": "#(into () %)", "problem": 23, "user": "4e6f0075535d5021c1a89616"}, {"code": "(fn reverso [list]\n  (if (empty? list)\n    ()\n    (conj (reverso (drop-last list)) (last list))))", "problem": 23, "user": "51177fbce4b0e0897831a60b"}, {"code": "(fn [xs]\n  (loop [xs xs acc '()]\n    (if (empty? xs) acc\n      (recur (rest xs) (conj acc (first xs))))))", "problem": 23, "user": "50ed8fd1e4b06330c1f87c3f"}, {"code": "#(loop [s (seq %) rs '()]\n  (if (first s)\n    (recur (rest s) (conj rs (first s)))\n    rs ))", "problem": 23, "user": "5070e31ee4b0e3170b5a8678"}, {"code": "(fn [x] (reduce conj () x))", "problem": 23, "user": "4ef9c8f9535dced4c769f26b"}, {"code": "(fn reverse' [s]\n  (loop [xs s\n         rs '()]\n    (if (empty? xs)\n      rs\n      (recur (rest xs) (cons (first xs) rs)))))", "problem": 23, "user": "5131104ae4b09e21d785bdfe"}, {"code": "(partial reduce conj ())", "problem": 23, "user": "51000111e4b00d7ad4cab15e"}, {"code": "reduce conj ()", "problem": 23, "user": "5130795ce4b08c712d3fae38"}, {"code": "(fn rev-coll[coll]\n ((fn builder[old new]\n  (if (= old '()) \n   new\n   (builder (rest old) (conj new (first old)))\n  )\n )\n (rest coll) (conj '() (first coll)))\n)", "problem": 23, "user": "512ec712e4b029b11c040781"}, {"code": "#(into () %)", "problem": 23, "user": "511a9e69e4b0c87c59c96708"}, {"code": "(fn [s] (reduce conj '() s))", "problem": 23, "user": "5132961ee4b039bac947cbb9"}, {"code": "(fn my-reverse [coll]\n  (if (empty? coll)\n    '()\n    (concat (my-reverse (rest coll)) (list (first coll)))))", "problem": 23, "user": "512e8f5ce4b0b740abc59829"}, {"code": "(fn [coll]\n\t(into '() coll))", "problem": 23, "user": "5132c6f0e4b021281ec7b6d3"}, {"code": "#(reduce conj '() (mapcat list %))", "problem": 23, "user": "510528a0e4b0730a5f55ad85"}, {"code": "#(loop [xs %\n        res []]\n   (if (= (count xs) 0)\n     res\n     (recur (butlast xs) (conj res (last xs)))))", "problem": 23, "user": "5098db05e4b0cae2931060a2"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "511b9e81e4b00c2a1fa7ff6e"}, {"code": "(fn rev [l] (if (= 1 (count l)) l (conj (vec (rev (rest l))) (first l))))", "problem": 23, "user": "5133af1de4b0d7a043de8cf2"}, {"code": "(fn [whole-sequence]\n  (loop [s whole-sequence rev '()]\n    (if (= 1 (count s))\n      (cons (first s) rev)\n      (recur (rest s) (cons (first s) rev)))))", "problem": 23, "user": "513294fce4b039bac947cbb8"}, {"code": "(fn [s] (reduce #(cons %2 %1) [] s))", "problem": 23, "user": "51319a53e4b06942423563c8"}, {"code": "(partial reduce conj '())", "problem": 23, "user": "51307b84e4b08c712d3fae39"}, {"code": "(fn hej34\n  [li]\n  (if (= 1 (count li))\n    li\n    (concat\n      (hej34 (rest li))\n      (take 1 li))))", "problem": 23, "user": "504e12ade4b078edc5f593b7"}, {"code": "(fn rev [s] (if (empty? (rest s)) [(first s)] (conj (rev (rest s)) (first s))))", "problem": 23, "user": "5134973ce4b0230e9f713b42"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "4de52c87535d08e6dec9fdf0"}, {"code": "(fn [coll] (reduce conj '() coll))", "problem": 23, "user": "4db30879535df7e46ed9b6cb"}, {"code": "(fn myreverse [alist] ((fn movelist [lfrom lto] \n                   (if\n                              (empty? lfrom)\n                              lto\n                              (movelist (rest lfrom) (cons (first lfrom) lto))\n                   )\n               ) alist '())\n  )", "problem": 23, "user": "51340abbe4b0915833951877"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "51352899e4b082aeb3a3f03b"}, {"code": "(fn rev [s]\n  (if (= (count s) 1)\n    s\n    (cons (last s) (rev (drop-last 1 s)))))", "problem": 23, "user": "512da425e4b040332b905b34"}, {"code": "(partial reduce conj nil)", "problem": 23, "user": "51364acfe4b04ac1f358dd51"}, {"code": "(fn [xs] (reduce conj '() xs))", "problem": 23, "user": "51365524e4b04ac1f358dd52"}, {"code": "(fn [x] \n  (let [revable (into [] x)\n        cx (count x)\n        ln (dec' cx)]\n    (map #(nth revable (-' ln %)) (range cx))))", "problem": 23, "user": "5133e51ae4b0d7a043de8cf6"}, {"code": "(fn my-reverse [s]\n  (if (empty? s)\n    '()\n    (conj (my-reverse (butlast s)) (last s))))", "problem": 23, "user": "4f55f4b1e4b0a7574ea7180d"}, {"code": "#(into () %)", "problem": 23, "user": "51367626e4b04ac1f358dd53"}, {"code": "(fn [xs] (reduce #(cons %2 %1) '() xs))", "problem": 23, "user": "5136f659e4b04059df19f2fd"}, {"code": "reduce conj '()", "problem": 23, "user": "504ffb8fe4b0a02f9cffdeae"}, {"code": "#(reduce conj () %1)", "problem": 23, "user": "4e8239d6535db62dc21a62c4"}, {"code": "#(reduce conj '() (map (fn [x] x) %))", "problem": 23, "user": "51376d99e4b04059df19f302"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "513486bde4b0230e9f713b41"}, {"code": "(fn rev_seq [x]\n  (reduce conj '() x)\n)", "problem": 23, "user": "51361c16e4b04ac1f358dd4b"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "5137c3b0e4b0509a8b470482"}, {"code": "reduce conj '()", "problem": 23, "user": "5136ca56e4b04ac1f358dd5a"}, {"code": "reduce conj '()", "problem": 23, "user": "5123cbbae4b061b4c6f0e0b5"}, {"code": "(fn [x] (reduce (fn [a b] (cons b a)) () x))", "problem": 23, "user": "512fba16e4b0a88bb1e00aae"}, {"code": "(fn cou [cont]\n\n            (if (next cont)\n\n              (concat (cou (rest cont)) (list (first cont))    ) \n\n              cont\n              )\n            )", "problem": 23, "user": "5124619ae4b02c3f2a072ccd"}, {"code": "(fn ! [x]\n  (if (= (count x) 1) x\n      (conj (! (butlast x)) (last x))))", "problem": 23, "user": "5139656ce4b0a5db03d727e3"}, {"code": "(fn [s]\n  (let [s-typed (empty s)]\n    (cond\n     (list? s-typed) (into s-typed s)\n     (sorted? s-typed) (into '() s)\n     :else \n     (into s-typed (into '() s)))))", "problem": 23, "user": "511a5328e4b09045b2b16946"}, {"code": "(partial reduce conj nil)", "problem": 23, "user": "5139ff96e4b067e25a345ec1"}, {"code": "into ()", "problem": 23, "user": "50e3fe8fe4b0463d32072488"}, {"code": "(fn [orig] (loop [orig orig result '()] (if (empty? orig) result (recur (rest orig) (conj result (first orig))))))", "problem": 23, "user": "513a4babe4b067e25a345eca"}, {"code": "#(into () %)", "problem": 23, "user": "513a2f23e4b067e25a345ec6"}, {"code": "apply conj ()", "problem": 23, "user": "513b77f3e4b00f740c76c403"}, {"code": "#(for [i (range (count %))] ((vec %) (- (count%) i 1)))", "problem": 23, "user": "512f06c5e4b0762be4c7aad7"}, {"code": "reduce (fn [x y] (cons y x)) []", "problem": 23, "user": "5032748ae4b0e78df07b092f"}, {"code": "reduce #(conj %1 %2) '()", "problem": 23, "user": "513c51f2e4b0d636b627c968"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "5138d08be4b0a5db03d727db"}, {"code": "(fn my-reverse [seq]\n  (loop [s seq\n         ret '()]\n    (if (empty? s)\n      ret\n      (recur (rest s) (conj ret (first s))))))", "problem": 23, "user": "513a37e0e4b067e25a345ec7"}, {"code": "reduce conj '()", "problem": 23, "user": "513d121fe4b0e544971636a2"}, {"code": "reduce conj ()", "problem": 23, "user": "513d09cbe4b0b86ece9f322e"}, {"code": "#(reduce (fn prep [coll elem] (cons elem coll)) [] %1)", "problem": 23, "user": "513db288e4b0825f97f7f960"}, {"code": "(fn ! [x] (if(= (count x) 0 )  '() (cons (last x) (!(drop-last x))) ))", "problem": 23, "user": "5139c00ee4b067e25a345ebc"}, {"code": "#(into () %)", "problem": 23, "user": "513dca07e4b0825f97f7f962"}, {"code": "(fn [s] (loop [ss s rs (take 0 s)] (if (empty? ss) rs (recur (rest ss) (cons (first ss) rs)))))", "problem": 23, "user": "513bb7a6e4b04402f587b77d"}, {"code": "reduce conj ()", "problem": 23, "user": "513dcc1ce4b0825f97f7f964"}, {"code": "reduce conj '()", "problem": 23, "user": "5138cdbee4b0a5db03d727da"}, {"code": "reduce #(cons %2 %) ()", "problem": 23, "user": "513e7a25e4b02b2a3d8235c0"}, {"code": "reduce conj '()", "problem": 23, "user": "4f0d45de535d0136e6c22315"}, {"code": "(fn rev [col]\n  (if (nil? (seq col))\n    []\n    (cons (last col) (rev (drop-last (seq col))))))", "problem": 23, "user": "513cb853e4b0b86ece9f322b"}, {"code": "#((fn [a x] (if (empty? x) a (recur (cons (first x) a) (rest x)))) () %)", "problem": 23, "user": "513edd13e4b051389b345b39"}, {"code": "#(into () %)", "problem": 23, "user": "50f53694e4b057d4c52de881"}, {"code": "(fn [coll] (loop [result [] coll2 (into [] coll)] \n                 (if (= (count result) (count coll)) \n                   (if (vector? coll) (into [] result) result) \n                   (recur (cons (first coll2) result) (drop 1 coll2)))))", "problem": 23, "user": "513ca934e4b0b86ece9f3228"}, {"code": "(fn f [coll]\n  (if (empty? coll)\n    nil\n    (concat (f (rest coll)) (list (first coll)))))", "problem": 23, "user": "513f0565e4b051389b345b3b"}, {"code": "(fn rv [x]\n  (if (empty? x)\n    '()\n    (concat (rv (rest x)) (cons (first x) '()))\n  )\n )", "problem": 23, "user": "50edcc53e4b06330c1f87c49"}, {"code": "(fn r[seq]\n  (if (empty? seq) seq (conj (r(butlast seq)) (last seq) )) )", "problem": 23, "user": "513f53c6e4b051389b345b40"}, {"code": "#(into () %)", "problem": 23, "user": "513fb358e4b00f13ea1bd893"}, {"code": "#(loop [acc '() lst %]\n   (if (empty? lst)\n    acc \n\t(recur (conj acc (first lst)) (rest lst))))", "problem": 23, "user": "51000df0e4b00d7ad4cab15f"}, {"code": "(fn [seq]\n   (loop [s seq\n          ret []]\n       (if (empty? s)\n         ret\n         (recur (rest s) (cons (first s) ret)))))\n\n;; austintaylor's solution\n#_(fn [s]\n  \t(reduce conj '() s))", "problem": 23, "user": "51392535e4b0a5db03d727e1"}, {"code": "(fn [x] (reduce conj '() x))", "problem": 23, "user": "5140283fe4b00f13ea1bd89a"}, {"code": "#(into () %)", "problem": 23, "user": "513fbe89e4b00f13ea1bd894"}, {"code": "(fn\n  [coll]\n  (reduce conj nil coll)\n  )", "problem": 23, "user": "513dfe2ce4b0825f97f7f966"}, {"code": "(fn [list] \n  (loop [rl [] l (last list) ls (drop-last list)] \n    (if (nil? l) \n      rl \n      (recur (conj rl l) (last ls) (drop-last ls)))))", "problem": 23, "user": "51411e3be4b05ca1a0b379f3"}, {"code": "(fn blah [x]\n\t(if (next x)\n\t    (cons (last (vec x)) (blah (pop (vec x))))\n\t  (vec x)))", "problem": 23, "user": "51416934e4b03d51af0d04f0"}, {"code": "(fn [aseq] (reduce conj '() aseq) )", "problem": 23, "user": "5135a74ae4b04ac1f358dd46"}, {"code": "(fn rev [x] \n  \t(if-not  (empty? x)\n    \t(concat (rev (next x)) (list (first x)))\n\n    )\n  )", "problem": 23, "user": "513f400ae4b051389b345b3f"}, {"code": "(fn [coll] (reduce conj '() coll))", "problem": 23, "user": "514066e3e4b076604f1aa553"}, {"code": "#(into () %)", "problem": 23, "user": "5141a8f2e4b02fd87f5064c1"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "5073e7fde4b054001656accb"}, {"code": "(fn myreverse [v] (if (empty? v) [] (concat (myreverse (rest v)) [(first v)])))", "problem": 23, "user": "5140b7bae4b076604f1aa55b"}, {"code": "(fn [lst] (reduce (fn [accum value] (conj accum value)) '() lst) )", "problem": 23, "user": "512655b7e4b05d10e3e39603"}, {"code": "(fn myreverse [coll]\n  (if (= coll [])\n   []\n    (conj (myreverse (rest coll)) (first coll))))", "problem": 23, "user": "51424028e4b0b50abeb46b31"}, {"code": "into ()", "problem": 23, "user": "51424cc8e4b0b50abeb46b34"}, {"code": "(fn [l] ((fn rev [r l] (if (empty? l) r (rev (cons (first l) r) (rest l)))) [] l))", "problem": 23, "user": "51421cd5e4b0b50abeb46b2c"}, {"code": "(fn [coll]\n  (loop [result [] x coll]\n    (if (zero? (count x))\n      result\n      (recur (conj result (last x)) (drop-last x))\n    )\n  )\n)", "problem": 23, "user": "5132b1f3e4b039bac947cbbb"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "5141bc82e4b02fd87f5064c5"}, {"code": "(fn f ([coll] (if (empty? coll) (list) (concat (f (rest coll)) (list (first coll))))))", "problem": 23, "user": "5142e808e4b0c172af7558c9"}, {"code": "#(into () %)", "problem": 23, "user": "514282c8e4b0b50abeb46b38"}, {"code": "reduce (fn [a b] (into a (list b))) ()", "problem": 23, "user": "5141abf1e4b02fd87f5064c3"}, {"code": "(fn [s] (loop [r () l s] (if-not (seq l) r (recur (conj r (first l)) (rest l)))))", "problem": 23, "user": "51435753e4b0c172af7558d5"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "5142ea50e4b0c172af7558ca"}, {"code": "(fn my-reverse\n  [coll]\n  (if (= (count coll) 0)\n    (empty coll)\n    (cons (last coll) (my-reverse (butlast coll)))\n  )\n)", "problem": 23, "user": "4ff71630e4b0678c553fc388"}, {"code": "(fn [x](\n        reduce conj '() x\n        ))", "problem": 23, "user": "51427a8be4b0b50abeb46b37"}, {"code": "reduce conj '()", "problem": 23, "user": "5144af8ee4b0d29bc9e5e33a"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "51430fb2e4b0c172af7558ce"}, {"code": "reduce conj '()", "problem": 23, "user": "513b43ede4b067e25a345ed3"}, {"code": "(fn reverse-seq [sq]\n  (when-not (empty? sq)\n    (conj (reverse-seq (butlast sq)) (last sq))))", "problem": 23, "user": "512a8ef7e4b0ff5c4bc1f99e"}, {"code": "#(let [c (count %)] (for [i (range c)] ((vec %) (- c i 1))))", "problem": 23, "user": "5144c0a2e4b0d29bc9e5e33b"}, {"code": "reduce conj ()", "problem": 23, "user": "514457fbe4b0b4fb4ace5f43"}, {"code": "reduce #(conj %1 %2) '()", "problem": 23, "user": "5141c8e4e4b0b50abeb46b16"}, {"code": "(fn [xs]\n\t(loop [ys xs result []]\n\t\t(if (empty? ys) \n\t\t\tresult\n\t\t\t(recur (butlast ys) (conj result (last ys))))))", "problem": 23, "user": "51458deee4b0e8879607340b"}, {"code": "reduce conj '()", "problem": 23, "user": "5145832be4b0e8879607340a"}, {"code": "(fn my-reverse [x]\n        (if (not (seq x))\n            []\n          (conj (my-reverse (rest x)) (first x))))", "problem": 23, "user": "5145c116e4b099c3fbe2884a"}, {"code": "(fn rev [coll]\n  (reduce (fn [xs x] (cons x xs)) [] coll))", "problem": 23, "user": "5140c505e4b049dea086df40"}, {"code": "(fn my-reverse\n  [lst]\n  (loop [x lst\n         rlst []]\n    (if (empty? x)\n      rlst\n      (recur (butlast x)\n             (conj rlst (last x))))))", "problem": 23, "user": "5143c13ee4b0b4fb4ace5f3b"}, {"code": "#((fn rv [l r] (if (= '() l) r\n                 (rv (rest l) (conj r (first l)))\n                 )\n    ) % '()\n  )", "problem": 23, "user": "51448607e4b0d29bc9e5e336"}, {"code": "(fn rev [x] \n  (if (= x []) \n    x \n    ((fn al [e l] \n       (if (= l [])\n         [e]\n         (cons (first l) (al e (rest l)))\n         )\n       ) \n     (first x) \n     (rev (rest x)))))", "problem": 23, "user": "5110b8bae4b04c71fce993f4"}, {"code": "(fn rev [xs] (if (empty? xs) [] (conj (rev (rest xs)) (first xs))))", "problem": 23, "user": "4ffa2009e4b0678c553fc3b6"}, {"code": "(fn me [l] (if (empty? l) [] (conj (me (rest l)) (first l))))", "problem": 23, "user": "51431da2e4b0c172af7558d0"}, {"code": "reduce #(cons %2 %1) []", "problem": 23, "user": "5146df5ae4b04ef915e3731d"}, {"code": "(fn [xs] \n  (reduce conj () xs))", "problem": 23, "user": "514677dce4b04ef915e3731a"}, {"code": "(fn reverse-seq [x]\n  (loop [reverted (), seqq x]\n    (if (empty? seqq)\n      reverted\n      (recur (cons  (first seqq) reverted) (rest seqq)))\n    )\n  )", "problem": 23, "user": "51377188e4b04059df19f303"}, {"code": "(fn [coll]\n  (loop [coll coll\n         result '()]\n    (if (empty? coll)\n      result\n      (recur (drop 1 coll) (cons (first coll) result)))))", "problem": 23, "user": "50bf6f93e4b0ffd967a66cbf"}, {"code": "(fn [coll]\n  (reduce\n   (fn [x y] (cons y x))\n   [] coll))", "problem": 23, "user": "51479245e4b0541f4bec05ce"}, {"code": "#(into () %)", "problem": 23, "user": "514721c6e4b0d520409ed392"}, {"code": "(fn [seq]\n  ((fn [seq newseq]\n     (if (empty? seq)\n       newseq\n       (recur (rest seq) (conj newseq (first seq))))\n    ) seq '())\n  )", "problem": 23, "user": "514852b4e4b0203766d54154"}, {"code": "reduce (fn [a b] (cons b a)) []", "problem": 23, "user": "51485d25e4b0203766d54155"}, {"code": "(let [reverb (fn [group so-far]\n       (if (empty? group) so-far (recur (rest group) (cons (first group) so-far))))\n       ]\n\n    (fn [group] (reverb group []))\n  )", "problem": 23, "user": "5137e11ce4b0a5db03d727d0"}, {"code": "reduce #(conj %1 %2) '()", "problem": 23, "user": "51460e4ce4b04ef915e37314"}, {"code": "(fn [c]\n  (loop [xe c, result '()]\n    (if (seq xe)\n      (recur (rest xe) (cons (first xe) result))\n      result)))", "problem": 23, "user": "4dcc2435535d5973398f9290"}, {"code": "(fn m-reverse [v]\n  (if (= 1 (count v))\n    v\n    (into (m-reverse (drop-last (seq v))) [(last v)])))", "problem": 23, "user": "51215927e4b05ae5a5823c10"}, {"code": "#(into () %)", "problem": 23, "user": "513f1f85e4b051389b345b3e"}, {"code": "(fn[coll] (reduce #(cons %2 %1) '() coll))", "problem": 23, "user": "5148bcbee4b05514c84b7cc6"}, {"code": "(fn rev\n  ([s] (rev s()))\n  ([s r] (if (= nil (first s))\n           r\n           (recur (rest s) (conj r (first s))))))", "problem": 23, "user": "51493fd0e4b05514c84b7cce"}, {"code": ";; First attempt\n;(fn [initial-s]\n;  (loop [reversed-s '(), s initial-s]\n;    (if (empty? s)\n;      reversed-s\n;      (recur (cons (first s) reversed-s) (rest s)))))\n\nreduce conj '()", "problem": 23, "user": "5146f343e4b04ef915e3731e"}, {"code": "(fn [s] (loop [s s l (list)] (if (seq s) (recur (rest s) (conj l (first s))) l)))", "problem": 23, "user": "4fcb9c9ae4b0ee37620e185a"}, {"code": "(fn [s]\n  (loop [todo s acc nil]\n    (if (empty? todo) acc\n      (recur (rest todo) (cons (first todo) acc)))))", "problem": 23, "user": "51493390e4b05514c84b7ccd"}, {"code": "(fn [coll] (reduce conj '() coll))", "problem": 23, "user": "514a2fa1e4b0829bd132edb5"}, {"code": "reduce conj '()", "problem": 23, "user": "514b33e8e4b0bd81940b86c9"}, {"code": "(fn [xs]\n  (loop [coll xs\n         new-coll []]\n    (if (nil? (last coll))\n      new-coll\n      (recur (butlast coll) (conj new-coll (last coll))))))", "problem": 23, "user": "514a6199e4b0829bd132edb9"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "50fe2420e4b03cd852b4e84a"}, {"code": "(fn f [l] (if (last l) (cons (last l) (f (butlast l))) []))", "problem": 23, "user": "514b66f4e4b0bd81940b86cb"}, {"code": "(fn [col] (reduce #(cons %2 %1) [] col))", "problem": 23, "user": "506f2f58e4b09350ab4199fa"}, {"code": "(fn [l] (into () l))", "problem": 23, "user": "51469a3ae4b04ef915e3731b"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "514d8084e4b019235f6c0588"}, {"code": "(fn f [x] (if (empty? x) [] (conj (f (rest x)) (first x))))", "problem": 23, "user": "514d398ee4b019235f6c0583"}, {"code": "(fn r1 [x] (\n  loop [counter (count x) y () x x]\n               (prn y)\n               (prn x)\n    (if (= counter 0) y\n      (recur (dec counter) (cons (first x) y) (drop 1 x) ))\n               )\n  )", "problem": 23, "user": "500c5b4ae4b03d00572d2d88"}, {"code": "(fn [[& xs]] ((fn [new xs] (if (empty? xs) new (recur (conj new (first xs)) (rest xs)))) '() xs))", "problem": 23, "user": "514def61e4b019235f6c0591"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "51248aa1e4b0ef56ecb14195"}, {"code": "#(into () %)", "problem": 23, "user": "514d2c7ee4b019235f6c0582"}, {"code": "#(into () %)", "problem": 23, "user": "514cfa27e4b019235f6c057d"}, {"code": "(fn rev [a] (if (= (count a) 1)\n              a \n              (conj \n               (rev (drop-last a))\n               (last a)\n              )\n            )\n  )", "problem": 23, "user": "51037468e4b00c483ae17702"}, {"code": "(fn [l] (reduce conj '() l))", "problem": 23, "user": "514f80c4e4b0b449e54b8df9"}, {"code": "(fn [a-seq] (reduce conj '() a-seq))", "problem": 23, "user": "513e9aa0e4b02b2a3d8235c4"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "514c2e78e4b02b8cbb2a9279"}, {"code": "reduce #(conj %1 %2) '()", "problem": 23, "user": "51502056e4b098b221effc25"}, {"code": "(fn [coll]\n  ((fn [coll rev]\n      (if (empty? coll)\n        rev\n        (recur (rest coll) (cons (first coll) rev))\n      )\n   )\n   coll\n   '()\n  ))", "problem": 23, "user": "51473a70e4b0d520409ed394"}, {"code": "(fn [my-seq]\n  (loop [items my-seq\n         result []]\n    (if (empty? items)\n      result\n      (recur (butlast items) (conj result (last items))))))", "problem": 23, "user": "51508efce4b0c51f0585bbb4"}, {"code": "(fn [sq] (into '() sq))", "problem": 23, "user": "5144e89be4b021a5ff8301f9"}, {"code": "reduce #(cons %2 %1) []", "problem": 23, "user": "5150600de4b098b221effc29"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "51424c61e4b0b50abeb46b33"}, {"code": "into ()", "problem": 23, "user": "5149b14de4b0b64cbeae184b"}, {"code": "#(into () %)", "problem": 23, "user": "4ef2eb4d535dced4c769f226"}, {"code": "reduce conj '()", "problem": 23, "user": "5150f87ae4b03e678e393ac7"}, {"code": "(fn [se]\n  (\n   (fn [s r] \n    (if (empty? s)\n      r\n      (recur (next s) (cons (first s) r))\n    )\n   ) se []\n  ) \n)", "problem": 23, "user": "51516f35e4b03e678e393acd"}, {"code": "(fn getReverse [x] (if (empty? x) [] (conj (getReverse (rest x)) (first x))))", "problem": 23, "user": "5151a6bee4b03e678e393ad3"}, {"code": "(fn [coll]\n  (loop [[r & more :as all] (seq coll)\n         acc '()]\n    (if all\n      (recur more (cons r acc))\n      acc)))", "problem": 23, "user": "5151aa14e4b03e678e393ad4"}, {"code": "(fn [x] (loop [l x r '()]\n                     (if-not (empty? l)\n                       (recur (drop-last l) (concat r [(last l)]))\n                       r)))", "problem": 23, "user": "5152020de4b03e678e393ae7"}, {"code": "#(reduce (fn [res item]\n\t\t  (into [item] res)) [] %)", "problem": 23, "user": "5016ac54e4b052339a490e7b"}, {"code": "(fn [col] (reduce conj () col))", "problem": 23, "user": "514afd1be4b0bd81940b86c6"}, {"code": "#(reduce conj nil %)", "problem": 23, "user": "4fc4e9b5e4b081705acca352"}, {"code": "(fn [coll]\n (into '() coll))", "problem": 23, "user": "5152ceeee4b001f44f99bff1"}, {"code": "(fn rev1 [mm] ( (fn rev2 [n m] (if (= m '[]) n (rev2 (conj n (first m)) (rest m)) ))  '()    mm   ) )", "problem": 23, "user": "5150ae58e4b03e678e393abe"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "5153b1bce4b0252ac4b16639"}, {"code": "#(apply conj '() %)", "problem": 23, "user": "51533ecde4b0252ac4b16619"}, {"code": "(fn [x]\n    (loop [coll x\n           result []]\n      (if (empty? coll)\n           result\n           (recur (butlast coll)\n                  (conj result (last coll))))))", "problem": 23, "user": "4fea8741e4b0140c20fb9c09"}, {"code": "reduce conj '()", "problem": 23, "user": "500e3238e4b068062f6e8d8f"}, {"code": "(fn my-reverse [coll]\n  (if (empty? coll)\n    '()\n    (cons (last coll) (my-reverse (butlast coll)))))", "problem": 23, "user": "51554b12e4b06c5f6a1490a4"}, {"code": "(fn [lst] \n  ((fn self [lst result]\n     (if (empty? lst)\n       result\n       (self (rest lst) (cons (first lst) result )))\n  ) lst nil))", "problem": 23, "user": "514f0723e4b019235f6c0599"}, {"code": "(fn [xs] (reduce (fn [lst x] (cons x lst)) [] xs))", "problem": 23, "user": "51558136e4b06c5f6a1490a8"}, {"code": "reduce #(conj %1 %2) '()", "problem": 23, "user": "5150a7d7e4b03e678e393abb"}, {"code": "#(into () %)", "problem": 23, "user": "51551bbde4b0179c5115f4e7"}, {"code": "(fn [z] (reduce (fn [x y] (cons y x))\n       []\n       z))", "problem": 23, "user": "51547920e4b084ca81ee2e1c"}, {"code": "reduce conj ()", "problem": 23, "user": "5154c361e4b0179c5115f4e3"}, {"code": "(fn my-reverse [sq]\n  (reduce conj '() sq))", "problem": 23, "user": "515737f0e4b0b0b4b87062d0"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "5154fa3fe4b0179c5115f4e6"}, {"code": "(fn reverse-it [x]\n\n  (loop [l x r () ]\n  (if (empty? l)\n    r\n    (recur (rest l)(conj r (first l))\n    )\n    \n  )\n  )\n  )", "problem": 23, "user": "5157d8bce4b0b0b4b87062d6"}, {"code": "(fn my-reverse [l]\n  (if (empty? (rest l))\n    l\n    (concat (my-reverse (rest l)) [(first l)])))\n\n;; #(into () %)", "problem": 23, "user": "514e0417e4b019235f6c0593"}, {"code": "reduce (fn [x y] (conj x y)) ()", "problem": 23, "user": "51584459e4b0a069fd272c74"}, {"code": "#((fn [l acc]\n  (if (empty? l)\n    acc\n    (recur (rest l) (concat (list (first l)) acc))))\n  % '())", "problem": 23, "user": "515828b8e4b0a069fd272c71"}, {"code": "reduce conj ()", "problem": 23, "user": "51553ea7e4b06c5f6a1490a2"}, {"code": "#(into () %)", "problem": 23, "user": "515896f2e4b059418b97f0a8"}, {"code": "(fn [l] (mapv #(last %) (sort-by first > (map-indexed (fn [idx itm] (list idx itm)) l))))", "problem": 23, "user": "51301929e4b0e2531888cbde"}, {"code": "(fn [coll]\n\t(let [len (count coll)]\n\t  (->> coll\n\t       (map-indexed (fn [idx itm] [(- len idx) itm]))\n\t     (sort)\n\t     (map (fn [[x y]] y)))))", "problem": 23, "user": "4eeccfc0535d93acb0a668b5"}, {"code": "reduce conj ()", "problem": 23, "user": "512318b6e4b03b44edbed433"}, {"code": "reduce #(concat (vector %2) %) []", "problem": 23, "user": "515a6151e4b0394f658fe241"}, {"code": "#(into '() %)", "problem": 23, "user": "514d7e29e4b019235f6c0587"}, {"code": "(fn rev [s]\n  (reduce (fn [acc,x] (cons x acc)) nil s))", "problem": 23, "user": "5159849ce4b0394f658fe236"}, {"code": "(fn rev [col]\n  (loop [col col result (list)]\n    \n     (if (empty? col) result\n       \n         (recur (rest col) (cons (first col) result)))))", "problem": 23, "user": "504e71cbe4b0f6ff3350c4b3"}, {"code": "reduce #(conj % %2) ()", "problem": 23, "user": "5156e767e4b04360f2428e6b"}, {"code": "reduce (fn [x y] (cons y x)) nil", "problem": 23, "user": "515ba2c2e4b0a102a3e52639"}, {"code": "(fn [x] (into () x))", "problem": 23, "user": "515b3874e4b0a102a3e5262f"}, {"code": "#(reduce (fn [x y] (conj x y)) '() %)", "problem": 23, "user": "5069d8c5e4b01dc6af13f838"}, {"code": "(fn [coll] (reduce conj '() coll))", "problem": 23, "user": "515c75b0e4b069911535cf0f"}, {"code": "reduce conj ()", "problem": 23, "user": "515c9f14e4b069911535cf16"}, {"code": "(fn [coll]\n   (loop [[r & more :as all] (seq coll)\n          acc '()]\n     (if all\n       (recur more (cons r acc))\n       acc)))", "problem": 23, "user": "4f37c162e4b0e243712b1ed4"}, {"code": "#(into () %)", "problem": 23, "user": "514e4ae4e4b019235f6c0594"}, {"code": "(fn [s](\n        reduce (fn [new x](cons x new)) \"\" s\n        ))", "problem": 23, "user": "515d221ee4b00901442db1d8"}, {"code": "into '()", "problem": 23, "user": "515cf9b5e4b00901442db1d4"}, {"code": "#(reduce (fn [x y] (cons y x)) '() %)", "problem": 23, "user": "5131d817e4b06942423563ca"}, {"code": "(fn [s] (reduce conj () s))", "problem": 23, "user": "515e38ace4b049add99a0538"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "515d6281e4b00901442db1dc"}, {"code": "(fn [x]\n  ((fn [f] (f f x ())) ; Y-combinator\n   (fn [self x acc] (if (= () x) acc\n                      (self self (rest x) (cons (first x) acc))))))", "problem": 23, "user": "515ead6be4b049add99a053e"}, {"code": "(partial reduce conj ())", "problem": 23, "user": "5141fafbe4b0b50abeb46b28"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "51534ce2e4b0252ac4b16626"}, {"code": "#(into '() %)", "problem": 23, "user": "515efd01e4b02c55805ea238"}, {"code": "#(apply conj '() %)", "problem": 23, "user": "515f0a39e4b02c55805ea23a"}, {"code": "(fn [x] (into () x))", "problem": 23, "user": "515f2a85e4b0595cf3d1da44"}, {"code": "#(\n(fn revseq [acc x]\n  (if \n    (empty? x)\n    acc\n    (revseq (conj acc (first x)) (rest x))\n    )\n  )\n  '() %)", "problem": 23, "user": "515f8a0de4b0e2be8aa20bce"}, {"code": "(fn [x] (loop [x x y ()] (if (empty? x) y (recur (rest x) (cons (first x) y)))))", "problem": 23, "user": "515624efe4b04360f2428e5f"}, {"code": "#(into () %)", "problem": 23, "user": "50a67a43e4b0aa96157e2624"}, {"code": "(fn [coll] (reduce conj '() coll))", "problem": 23, "user": "514358eae4b0c172af7558d6"}, {"code": "(fn [col] (reduce conj '() col))", "problem": 23, "user": "515bed3be4b0388ca8ca1525"}, {"code": "(fn a [lst] \n  (if (empty? lst)\n    '()\n    (conj (vec (a (rest lst))) (first lst)) ))", "problem": 23, "user": "51607eb0e4b009fba0926e27"}, {"code": "(fn [x]\n  (reduce conj '() x))", "problem": 23, "user": "516095c9e4b009fba0926e29"}, {"code": "(fn [x]\n  (loop [x x\n         acc []]\n    (if (empty? x)\n      acc\n      (recur (rest x) (cons (first x) acc))\n      )\n    )\n  )", "problem": 23, "user": "515ef58be4b02c55805ea237"}, {"code": "#(into () %)", "problem": 23, "user": "515103a7e4b03e678e393ac8"}, {"code": "#((fn [col rev]\n    (if (nil? col)\n      rev\n      (recur (butlast col) \n             (conj rev (last col))))) \n  % [])", "problem": 23, "user": "515e0b8be4b049add99a0533"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "516199bbe4b009fba0926e36"}, {"code": "(fn rev [x] \n  (if (= (count x) 1)\n     x\n    (concat (rev (rest x)) (list (first x)) )\n   )\n)", "problem": 23, "user": "51622fb8e4b009fba0926e3f"}, {"code": "(fn rev [l] (if (empty? l) l (concat (rev (rest l)) [(first l)])))", "problem": 23, "user": "515ffbfbe4b0e2be8aa20bdd"}, {"code": "into ()", "problem": 23, "user": "51592b81e4b0394f658fe22c"}, {"code": "(fn [x]\n   (let\n     [bar (fn  foo [agg, t]\n            (if (empty? t)\n              agg\n              (foo\n                (cons (first t) agg)\n                (rest t))))]\n     (bar '() x)))", "problem": 23, "user": "5161eb8fe4b009fba0926e3b"}, {"code": "#(into '() %)", "problem": 23, "user": "515f10dce4b02c55805ea23b"}, {"code": "(fn [x] (reduce conj () x))", "problem": 23, "user": "5162757ee4b03cfa3774b3fe"}, {"code": ";fn rev [s]\n;(if (= (count s) 0)\n;  s\n ; (concat (rev (rest s)) (list (first s))))\n\n(fn [s] (into () s))", "problem": 23, "user": "51639d26e4b055933a9ca02e"}, {"code": "(fn my-reverse\n\t  ([a-list]\n\t     (cond \n          (= a-list nil) nil\n\t      :else (cons (last a-list)\n\t                       (my-reverse (butlast a-list))))))", "problem": 23, "user": "4fae0319e4b081705acca244"}, {"code": "reduce conj '()", "problem": 23, "user": "5162d424e4b004547eb5eaaa"}, {"code": "(fn [col]\n  (loop [c col acc []]\n    (if (= (count c) 0)\n      acc\n      (recur (rest c) (cons (first c) acc)))))", "problem": 23, "user": "5163a7bbe4b055933a9ca02f"}, {"code": "#(reduce conj nil %)", "problem": 23, "user": "5160195ae4b0e2be8aa20be3"}, {"code": "(fn myrev\n  ([ls] (myrev (rest ls) (cons (first ls) (empty ls))))\n  ([ls rls]\n  \t(if (empty? ls)\n  \t\trls\n  \t\t(myrev (rest ls) (cons (first ls) rls))\n  \t)\n  )\n  )", "problem": 23, "user": "51634e09e4b055933a9ca02c"}, {"code": "(fn [x] (loop [a x b ()] (\n           if (= a '() )  b \n            (recur (rest a) (conj b (first a)) ))))", "problem": 23, "user": "51623490e4b009fba0926e42"}, {"code": "#(into () %)", "problem": 23, "user": "4f23196ee4b0d66497709fe1"}, {"code": "apply conj '()", "problem": 23, "user": "5115e112e4b0ce5098ee73c4"}, {"code": "#(for [i (range (dec (count %1)) -1 -1)] (nth (into [] %1) i))", "problem": 23, "user": "5162891ee4b0e6d3c4734712"}, {"code": "(fn [col]\n  (loop [c col\n         acc ()]\n    (if (empty? c)\n      acc\n      (recur (rest c) (cons (first c) acc)))))", "problem": 23, "user": "515e8ce2e4b049add99a053d"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "5164d97ee4b003cf19fdde43"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "51631002e4b017b283c712c1"}, {"code": "#(into () %)", "problem": 23, "user": "5164867fe4b003cf19fdde3e"}, {"code": "(fn [s0]\n  (loop [s s0\n         res nil]\n    (if (nil? s)\n      res\n      (let [f (first s)\n            r (next s)]\n        (recur r (conj res f))))))", "problem": 23, "user": "5165a235e4b079ad97ec44ac"}, {"code": "reduce conj ()", "problem": 23, "user": "5161c6a7e4b009fba0926e38"}, {"code": "#(into () %)", "problem": 23, "user": "51662183e4b05e5ef6a5e807"}, {"code": "into '()", "problem": 23, "user": "5166d466e4b060c690c1f4c4"}, {"code": "#(into '() %)", "problem": 23, "user": "5166e80de4b060c690c1f4c5"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "51647faae4b003cf19fdde3b"}, {"code": "into '()", "problem": 23, "user": "51670895e4b013fc800656c1"}, {"code": "(fn rreverse [l]\n  (if (empty? l)\n    '()\n    (concat (rreverse (rest l)) (list (first l)))))", "problem": 23, "user": "51684318e4b03f62cda68cd6"}, {"code": "#(into () %)", "problem": 23, "user": "515ff4b9e4b0e2be8aa20bd9"}, {"code": "reduce conj ()", "problem": 23, "user": "4ec4d723535dcc7ae8597d65"}, {"code": "#(into () %)", "problem": 23, "user": "4fe9f0f6e4b0547ebccb247b"}, {"code": "(fn foo [x] (if (empty? x)\n              []\n              (conj (foo (rest x)) (first x))))", "problem": 23, "user": "5168d4ebe4b03f62cda68cdf"}, {"code": "(fn myrev[s] (reduce (fn [acc, el](cons el acc)) '() s)\n                   \n               \n    )", "problem": 23, "user": "4fb03cf4e4b081705acca262"}, {"code": "#(into () %)", "problem": 23, "user": "51696bcde4b03f62cda68ce7"}, {"code": "(fn [coll] (reduce conj () coll))", "problem": 23, "user": "51696ee7e4b03f62cda68ce8"}, {"code": "(fn [l]\n  (let [reverser (fn [l1 l2]\n                  (if (empty? l1) \n                    l2\n                   (recur (rest l1) (conj l2 (first l1)) ) ))] (reverser l '())))", "problem": 23, "user": "516a9dbee4b081287f204e9c"}, {"code": "#(loop [i % o (empty %)] (if (empty? i) o (recur (rest i) (cons (first i) o))))", "problem": 23, "user": "512700c4e4b083bb8f88cf14"}, {"code": "(fn [l]\n  (loop [from l to '()]\n    (if (empty? from)\n      to\n\t  (recur (rest from) (conj to (first from)))      \n      )\n    )\n  )", "problem": 23, "user": "5166b79ae4b060c690c1f4c0"}, {"code": "(fn rev \n  [seqs]\n  (loop [init seqs\n         res (empty seqs)]\n    (if (empty? init)\n      res\n      (recur (rest init) (cons (first init) res )))))", "problem": 23, "user": "5153316ce4b0252ac4b16611"}, {"code": "(fn [coll]\n  (loop [rl [] sl coll]\n    (if (empty? sl)\n      rl\n      (recur (cons (first sl) rl) (rest sl))\n    )\n  )\n)", "problem": 23, "user": "4f7683dae4b0fbe0118ec56f"}, {"code": "#(into ()%)", "problem": 23, "user": "516c3472e4b06f078fab251c"}, {"code": "(fn [s] (reduce conj '() s))", "problem": 23, "user": "5166b491e4b060c690c1f4be"}, {"code": "reduce #(cons %2 %1) []", "problem": 23, "user": "5079fd71e4b08327cd804a66"}, {"code": "#(reduce conj () %1)", "problem": 23, "user": "516ab8c2e4b081287f204e9e"}, {"code": "#(into () %)", "problem": 23, "user": "516cc0fbe4b06f078fab2526"}, {"code": "(fn [items] (let [reverse-recur (fn [items reversed]\n                                  (if (empty? items)\n                                      reversed\n                                      (recur (rest items)\n                                             (cons (first items)\n                                                   reversed))))]\n\t\t      (reverse-recur items '())))", "problem": 23, "user": "504ee511e4b0e7ad84dbc4a4"}, {"code": "into ()", "problem": 23, "user": "51652141e4b003cf19fdde48"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "5143952fe4b0b4fb4ace5f38"}, {"code": "(fn rev [x]\n  (loop [r [] arr x]\n    (let [el (last arr)]\n      (if (= el nil)\n        r\n        (recur (conj r el) (take (- (count arr) 1) arr))))))", "problem": 23, "user": "516e9d9be4b06aac486e5b2b"}, {"code": "#(loop [xs % res []]\n   (if (empty? xs) res (recur (butlast xs) (conj res (last xs)))))", "problem": 23, "user": "516ea313e4b06aac486e5b2c"}, {"code": "(fn f [x] (reduce (fn [accum e] (conj accum e)) '() x))", "problem": 23, "user": "516ed04ee4b06aac486e5b30"}, {"code": "(fn [x]\n  (letfn [(bob [x y] (if (empty? x) y (recur (rest x) (conj y (first x)))))]\n    (bob x nil)))", "problem": 23, "user": "516f06dce4b06aac486e5b39"}, {"code": "reduce (fn [x y] (conj x y)) nil", "problem": 23, "user": "516e2246e4b092a6408c5bc5"}, {"code": "(fn [aseq]\n  (loop [aseq aseq\n         acc '()]\n    (let [n (first aseq)]\n      (if-not n\n        acc\n        (recur (rest aseq) (cons n acc))))))", "problem": 23, "user": "516fa727e4b0ef3e37990e86"}, {"code": "(fn [l]\n  (loop [l l result []]\n    (if (seq l)\n      (recur (butlast l) (conj result (last l)))\n      result)))", "problem": 23, "user": "50b1d166e4b03ea880433554"}, {"code": "(fn [seq]\n  (loop [seq' []\n         seq seq]\n    (if (empty? seq)\n      seq'\n      (recur (cons (first seq) seq')\n             (rest seq)))))", "problem": 23, "user": "516ff477e4b034fe8eaf70f3"}, {"code": "(fn [ls] (reduce (fn [a b] (cons b a)) (cons [] ls)))", "problem": 23, "user": "516fc530e4b0b86e66597f00"}, {"code": "(fn [itms] (reduce conj () itms))", "problem": 23, "user": "5146fd44e4b0d12420447958"}, {"code": "(fn rev [the-list]\n  (if (= 1 (count the-list))\n    the-list\n    (concat (rev (rest the-list)) (cons (first the-list) '()))\n  )\n)", "problem": 23, "user": "51701a9ce4b034fe8eaf70f5"}, {"code": "#(reduce (fn [acc x] (cons x acc)) () %)", "problem": 23, "user": "516dc88ae4b046df6fbb76a1"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "51715f0ce4b0d70c8bbbf23d"}, {"code": "(fn my-reverse[v]\n                          (loop [result[] i (dec (count v))]\n                          (if (< i 0) \n                             result\n                             (recur (conj result (nth (vec v) i)) (- i 1)))))", "problem": 23, "user": "51717577e4b0d70c8bbbf23f"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "515ebde3e4b01e5d11ccd0a8"}, {"code": "reduce (fn [sq v] (list* v sq)) '()", "problem": 23, "user": "5170ea06e4b0d70c8bbbf235"}, {"code": "reduce (fn [ac e] (concat [e] ac)) []", "problem": 23, "user": "51721aefe4b0d70c8bbbf24a"}, {"code": "(fn my-reverse\n  [list]\n  (cond\n   (empty? list) nil\n   :else (cons (last list) (my-reverse (butlast list)))))", "problem": 23, "user": "5170643ee4b004f79986ad89"}, {"code": "reduce conj '()", "problem": 23, "user": "502f6c56e4b0842eb223d8bb"}, {"code": "#(into () %)", "problem": 23, "user": "51227a00e4b068a9582e656b"}, {"code": "#(into () %)", "problem": 23, "user": "4f189b42535d64f60314645d"}, {"code": "reduce (fn [e1 e2] (cons e2 e1)) '()", "problem": 23, "user": "516933ece4b03f62cda68ce4"}, {"code": "(fn rev [col]\n  (if (empty? (rest col))\n    col\n    (cons (last col) (rev (drop-last col)))))", "problem": 23, "user": "517401d6e4b0d277d717bc66"}, {"code": "(fn [s & {:keys [reversed] :or {reversed '()}}]\n\t(if (not (seq s))\n\t    reversed\n\t    (recur (rest s) {:reversed (conj reversed (first s))})))", "problem": 23, "user": "51740b65e4b0d277d717bc67"}, {"code": "(fn [s]\n\t(reduce conj () s))", "problem": 23, "user": "514a13cee4b0829bd132edb4"}, {"code": "(fn [coll] ((fn [coll rev] (if (zero? (count coll)) rev (recur (rest coll) (cons (first coll) rev)))) coll []))", "problem": 23, "user": "51736d4de4b00f4b6b0490d7"}, {"code": "(fn [s]\n  (loop [x s y []]\n    (if (empty? x)\n      y\n      (recur (rest x) (cons (first x) y)))))", "problem": 23, "user": "5140771ae4b076604f1aa555"}, {"code": "(fn r [l]\n  (loop [res [] list l]\n    (if (empty? list)\n      res\n      (recur (cons (first list) res) (rest list)))  ))", "problem": 23, "user": "516bc02ce4b005fd0cdf85c5"}, {"code": "(fn p23 [l]\n  (reduce conj '() l )\n  )", "problem": 23, "user": "51750fc5e4b07031762f2ee6"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "5175616ae4b0dea9bbfba576"}, {"code": "(fn [s]\n  (loop [s s acc '()]\n    (if (empty? s)\n      acc\n      (recur (rest s) (conj acc (first s))))))", "problem": 23, "user": "51757af0e4b085adf681d873"}, {"code": "(fn [tseq]\n  (loop [lseq tseq fseq '()]\n    (if (= '() lseq)\n      fseq\n      (recur (rest lseq) (conj fseq (first lseq))))))", "problem": 23, "user": "509331d9e4b097f48cc38580"}, {"code": "(fn [a]\n  (loop [acc nil left a]\n    (if (empty? left)\n      acc\n      (recur (conj acc (first left)) (rest left)))))", "problem": 23, "user": "51515a19e4b03e678e393acc"}, {"code": "(fn REVERSE\n  ([x] (REVERSE x '() ))\n  ([x y] (if(= (first x) nil) y (REVERSE (rest x) (conj y (first x))))))", "problem": 23, "user": "51735df9e4b00f4b6b0490d6"}, {"code": "into '()", "problem": 23, "user": "5173726be4b098276e74652c"}, {"code": "(fn [x]\n  (loop [aseq (seq x) acc nil]\n    (if (empty? aseq) \n      acc\n      (recur (rest aseq) (conj acc (first aseq))))))", "problem": 23, "user": "51750cd4e4b07031762f2ee5"}, {"code": "(fn [coll]\n  (loop [coll coll\n         reversed ()]\n    (if (empty? coll) reversed\n      (recur (rest coll) (cons (first coll) reversed)))))", "problem": 23, "user": "5152bc4ee4b001f44f99bfef"}, {"code": "#(reduce (fn [rst e]\n           (cons e rst))\n         ()\n         %)", "problem": 23, "user": "516d2a46e4b06f078fab252f"}, {"code": "(fn [coll] (reduce conj '() coll))", "problem": 23, "user": "5175c7f8e4b085adf681d878"}, {"code": "(fn rev [coll]\n  (if (empty? coll)\n    coll\n    (conj (rev (vec (rest coll))) (first coll))))", "problem": 23, "user": "50cfcad6e4b00b15ecee9752"}, {"code": "reduce conj ()", "problem": 23, "user": "51778122e4b085adf681d89d"}, {"code": "#(into '() %)", "problem": 23, "user": "516eb196e4b06aac486e5b2e"}, {"code": "reduce #(conj %1 %2) ()", "problem": 23, "user": "51780bfce4b0f89a8f53839c"}, {"code": "(fn rev [s]\n  ((fn r [s a]\n  \t(if (empty? s) a\n    \t(r (rest s) (conj a (first s))))) s '()))", "problem": 23, "user": "5175533fe4b0dea9bbfba575"}, {"code": "#(into () %)", "problem": 23, "user": "4fc4541ae4b081705acca348"}, {"code": "(fn [l]\n((fn iter [l m]\n  (if (= 0 (count l)) \n    m\n    (iter (rest l) (cons (first l) m)))) l []))", "problem": 23, "user": "517531c6e4b07031762f2eea"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "51780f88e4b03d69594194c9"}, {"code": "(fn f [l]\n  (into '() l)\n)", "problem": 23, "user": "514f72a2e4b0b449e54b8df7"}, {"code": "(fn foo [lst] \n  ((fn [input-seq result-seq] \n     (if (empty? input-seq) \n       result-seq \n       (recur (rest input-seq) (conj result-seq (first input-seq))))) \n   lst '()))", "problem": 23, "user": "516733fce4b079759a74a5e9"}, {"code": "(fn [x] (into () x))", "problem": 23, "user": "51789599e4b03d69594194d6"}, {"code": "(fn my-reverse[elements]\n\t(if (empty? elements) nil\n\t(cons (last elements) (my-reverse (butlast elements))\n)))", "problem": 23, "user": "4e723bcb535d5021c1a8965c"}, {"code": "#(loop [items % \n        new (empty %)]\n   (if (empty? items)\n     new\n     (recur (next items) (cons  (first items) new))))", "problem": 23, "user": "50342d1be4b062bc5d7ae15f"}, {"code": "(fn [xs]\n  (loop [news () s xs l (count xs)]\n    (if (zero? l)\n      news\n      (recur (cons (first s) news) (rest s) (dec l)))))", "problem": 23, "user": "50b9d991e4b04934c218a4a9"}, {"code": "reduce (fn [a,i] (conj a i)) '()", "problem": 23, "user": "517517c9e4b07031762f2ee7"}, {"code": "(fn rev [l]\n  (if (= (first l) nil)\n    []\n    (conj (rev (rest l)) (first l) )))", "problem": 23, "user": "517a7f20e4b01aacecbecbee"}, {"code": "(fn [col] \n  (reduce #(cons %2 %1) (empty col) col))", "problem": 23, "user": "5163b06be4b055933a9ca030"}, {"code": "(fn rev [xs]\n  (reduce conj () xs))", "problem": 23, "user": "517a025ce4b01aacecbecbe6"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "517adc6ce4b0925c997201c4"}, {"code": "(fn [s]\n  (reduce conj () s))", "problem": 23, "user": "517b59b8e4b0925c997201d0"}, {"code": "#(reduce (fn [lst x] (cons x lst)) '() %)", "problem": 23, "user": "517b4d8ae4b0925c997201cf"}, {"code": "(fn [x] (loop [a x r ()] (if (or (empty? a)) r (recur (rest a) (conj r (first a))))))", "problem": 23, "user": "5179fd22e4b01aacecbecbe5"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "517bf28de4b07ef0e56148d5"}, {"code": "(letfn [(r [s] (if (empty? s) [] (conj (r (rest s)) (first s))))] r)", "problem": 23, "user": "51729002e4b044b2ef48a850"}, {"code": "(fn ff [x]\n    (reduce conj () x))", "problem": 23, "user": "517be6e6e4b07ef0e56148d4"}, {"code": "#(into () %)", "problem": 23, "user": "517bc969e4b07ef0e56148d0"}, {"code": "#(into () %)", "problem": 23, "user": "517bbbfce4b07ef0e56148cf"}, {"code": "#(loop [res '() tcol %]\n   (if (first tcol)\n     (recur (conj res (first tcol)) (rest tcol))\n     res))", "problem": 23, "user": "517cc671e4b0bbbf1f12af0a"}, {"code": "#((fn [v l]\n       (if (empty? l)\n         v\n         (recur (conj v (first l)) (rest l)))) () %)", "problem": 23, "user": "517b9c82e4b0e963dd819c99"}, {"code": "#(into () %)", "problem": 23, "user": "517a995de4b01aacecbecbef"}, {"code": "(fn reverse-seq [xs]\n  (if (empty? xs) (list)\n    (cons (last xs) (reverse-seq (drop-last xs))))\n  )", "problem": 23, "user": "51251e1fe4b08c6d99a12b87"}, {"code": "(fn [s] (reduce (fn [a, x] (concat [x] a)) [] s))", "problem": 23, "user": "50fc9c08e4b0d10d794c19f9"}, {"code": "(fn [zs] ((fn rev [xs ys] (if (empty? xs) ys (rev (rest xs) (conj ys (first xs))))) zs '()))", "problem": 23, "user": "515fb48fe4b0e2be8aa20bd5"}, {"code": "into ()", "problem": 23, "user": "517945dce4b0684c1c981a43"}, {"code": "reduce conj ()", "problem": 23, "user": "517dc49be4b0fcc7c5d37d38"}, {"code": "#((fn rev [n coll]\n    (if (nil? n)\n      (vec coll)\n      (let [c (last n)]\n        (rev (butlast n) (conj coll c))))) % [])", "problem": 23, "user": "517e12e3e4b0fcc7c5d37d3c"}, {"code": "(fn [xs] (reduce conj '() xs))", "problem": 23, "user": "517d755ce4b0f5e87c18f263"}, {"code": "(fn [xs] (reduce conj '() xs))", "problem": 23, "user": "5177f89ae4b0f89a8f53839a"}, {"code": "reduce conj nil", "problem": 23, "user": "517ecab1e4b09104ecebe7e8"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4ec1f3ea535dfed6da9c6db9"}, {"code": "reduce conj ()", "problem": 23, "user": "517e5a91e4b0329b27fa9f55"}, {"code": "reduce conj ()", "problem": 23, "user": "5093a80be4b097f48cc38583"}, {"code": "(fn [lst]\n  ((fn [lst acc]\n    (if (= lst ())\n      acc\n      (recur (rest lst) (cons (first lst) acc)))) lst ()))", "problem": 23, "user": "517fcd45e4b073af738d8b4a"}, {"code": "into ()", "problem": 23, "user": "4dada913c9a9d6ed2d99dc57"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4ed286d4535d44c135fd68d7"}, {"code": "(fn \n  [coll]\n  (into () coll))", "problem": 23, "user": "51804bcbe4b04f45bde7d901"}, {"code": "reduce conj '()", "problem": 23, "user": "517e9f92e4b09104ecebe7e4"}, {"code": "(fn myreverse [x]\n    (if (empty? x)\n        x\n        (cons (last x) (myreverse (butlast x)))))", "problem": 23, "user": "517f5db1e4b09104ecebe7ef"}, {"code": "#(loop [src % dst '()]\n   (if (empty? src)\n     dst\n     (recur (rest src) (cons (first src) dst))))", "problem": 23, "user": "5180a93fe4b0e3fc13e244e8"}, {"code": "(fn [col1] (reduce conj '() col1))", "problem": 23, "user": "51806ebde4b0e3fc13e244e1"}, {"code": "(fn my-reverse [lst]\n    ((fn aux [l r]\n        (if (empty? l)\n            r\n            (aux (next l) (cons  (first l) r) ))) lst '()))", "problem": 23, "user": "5180dc04e4b06b8caf33fa01"}, {"code": "#(loop [lst % acc []]\n   (if (empty? lst)\n     acc\n     (recur (rest lst) (cons (first lst) acc))))", "problem": 23, "user": "5181cf74e4b06547fbae1159"}, {"code": "reduce #(cons %2 %) nil", "problem": 23, "user": "4e6a3b79535d8ccf87e9feb3"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "51383346e4b0a5db03d727d4"}, {"code": "into ()", "problem": 23, "user": "4f6cf933e4b07046d9f4efc2"}, {"code": "(fn rev\n  ([l1] (rev l1 (list) ))\n  ([l1 l2]\n    (if (empty? l1) l2\n      (recur (rest l1) (cons (first l1) l2))\n  ))\n)", "problem": 23, "user": "514dbd08e4b019235f6c058d"}, {"code": "#(reduce (fn [x y] (conj x y)) '() %)", "problem": 23, "user": "51805d22e4b0e3fc13e244df"}, {"code": "#(into () %)", "problem": 23, "user": "518139bee4b06547fbae1149"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "51706c8fe4b004f79986ad8a"}, {"code": "into ()", "problem": 23, "user": "5167cf5ee4b0c5a4140a3094"}, {"code": "into ()", "problem": 23, "user": "51836944e4b028ec5fd2f29f"}, {"code": "(fn [coll] (reduce conj '() coll))", "problem": 23, "user": "51808033e4b0e3fc13e244e2"}, {"code": ";; conj will take a list l and an element e and concatenate e to the front of list l\n;; If we use the reduce function to apply the empty list '() to each element (e) in the list l, then each of those will be added to the front\n;; Let's take the first example. [1 2 3 4 5].  Reduce will (conj '() 1) which returns '(5) then (conj '(5) 4) which returns '(4 5) and so on\n;; until you hit the last element (conj '(5 4 3 2) 1) returning '(5 4 3 2 1)\n\nreduce #(conj %1 %2) '()", "problem": 23, "user": "50955676e4b087f34d351ab1"}, {"code": "#(reduce (fn [col ii] (concat (vector ii) col)) [] %)", "problem": 23, "user": "5183abf6e4b028ec5fd2f2a6"}, {"code": "into ()", "problem": 23, "user": "51823a97e4b0f2adb733651e"}, {"code": "(fn [x] (reduce conj () x))", "problem": 23, "user": "51838e8be4b028ec5fd2f2a0"}, {"code": "#(reduce conj '() (seq %))", "problem": 23, "user": "516d7efde4b0fddc7b37210e"}, {"code": "(fn [s] (loop [accum [] to-treat s]\n\t(if (empty? to-treat)\n      accum\n      (recur (conj accum (last to-treat))\n             (butlast to-treat)))))", "problem": 23, "user": "506617fce4b03d366d7cb2ac"}, {"code": "(fn [x] (loop[myL x myNL '()]\n          (if(empty? myL)\n          myNL (recur (rest myL) (conj myNL (first myL)))\n          )\n  )\n)", "problem": 23, "user": "5177cacde4b0261ae665b877"}, {"code": "#(into () %)", "problem": 23, "user": "504e0f78e4b078edc5f593ac"}, {"code": "#(into () %)", "problem": 23, "user": "51859a6de4b0da5a5be3bac1"}, {"code": "(fn f [x] \n  (if (empty? x)\n    []\n    (conj (f (rest x)) (first x))))", "problem": 23, "user": "5185e17ee4b0da5a5be3bac5"}, {"code": "#(reduce conj (sequence '()) %)", "problem": 23, "user": "4fecebe1e4b0681fd128dcac"}, {"code": "(fn my-reverse [xs]\n  (if (empty? xs)\n      []\n      (conj (my-reverse (rest xs)) (first xs))))", "problem": 23, "user": "5186134ce4b0da5a5be3bac7"}, {"code": "(fn rev [in] \n  (if (empty? in)\n    in\n    (concat (rev (rest in)) (list (first in)))))", "problem": 23, "user": "5186571de4b0da5a5be3bad1"}, {"code": "(fn[x](reduce conj () x))", "problem": 23, "user": "5184f9e9e4b02826a645f39e"}, {"code": "#((fn[arr len](for [i (range 1 (+ len 1))](get arr (- len i)))) (vec %) (count %))", "problem": 23, "user": "517d51efe4b0f5e87c18f262"}, {"code": "#(reduce conj nil %)", "problem": 23, "user": "518696c1e4b0c40be512d708"}, {"code": "(fn [x] (reduce #(concat (list %2) %1) '() x))", "problem": 23, "user": "51870799e4b057e3860ab7dc"}, {"code": "reduce conj '()", "problem": 23, "user": "4fe91b62e4b0547ebccb243f"}, {"code": "(fn [col]\n  (reduce conj () col))", "problem": 23, "user": "51026750e4b00c483ae176f7"}, {"code": "#(for [s (range (count %)) :let [r (last (drop-last s %) ) ]  ] r)", "problem": 23, "user": "517e6671e4b0329b27fa9f56"}, {"code": "#(into () %)", "problem": 23, "user": "5183c188e4b028ec5fd2f2ab"}, {"code": "into ()", "problem": 23, "user": "50a4d1d3e4b0344e360f3bc6"}, {"code": "#(into () %)", "problem": 23, "user": "5187a7dae4b057e3860ab7e1"}, {"code": "(partial reduce conj '())", "problem": 23, "user": "5180c69ae4b06b8caf33fa00"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "51823adee4b0f2adb733651f"}, {"code": "reduce #(conj %1 %2) '()", "problem": 23, "user": "51883ae0e4b0eb189f8362ed"}, {"code": "#(into '() %)", "problem": 23, "user": "515b28b6e4b0a102a3e5262c"}, {"code": "(fn [col] \n  (map #(last %) \n       (sort-by first > \n                (map-indexed #(vector %1 %2) col))))", "problem": 23, "user": "51891c96e4b04c2714a2670e"}, {"code": "#(into () %)", "problem": 23, "user": "5189bf9ee4b0288ada3dbdaf"}, {"code": "(fn [coll]\n (reduce #(cons %2 %1) [] coll))", "problem": 23, "user": "51841e0ae4b02826a645f396"}, {"code": "#(into () %)", "problem": 23, "user": "5187d78be4b057e3860ab7e2"}, {"code": "#(into () %)", "problem": 23, "user": "518a59b3e4b02bf06f6bbb4b"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "51899891e4b0288ada3dbdab"}, {"code": "#(into () %)", "problem": 23, "user": "518a8c4be4b0df82f5685903"}, {"code": "reduce (fn [xs x] (conj xs x)) '()", "problem": 23, "user": "51897709e4b0288ada3dbdaa"}, {"code": "(fn revF [y]\n  (if (= () (rest y))\n    y\n(conj\n(revF (\n (\n  fn lastB [x] \n  \t(if (= () (rest x)) \n      () \n      (conj (lastB (rest x )) (first x))  \n    )\n  ) y) ) (last y))\n \n))", "problem": 23, "user": "518aec06e4b06da86c1973c2"}, {"code": "reduce conj ()", "problem": 23, "user": "5189dbabe4b0288ada3dbdb3"}, {"code": "(fn doit [l] (if (empty? l) `() (conj (doit (butlast l)) (last l))))", "problem": 23, "user": "518b5e2fe4b05711021000b2"}, {"code": "(fn [coll] (reduce conj () coll))", "problem": 23, "user": "518b54c6e4b05711021000b1"}, {"code": "#(into '() %)", "problem": 23, "user": "515e2000e4b049add99a0534"}, {"code": "#(loop[x % y '()] (if (empty? x) y (let[t (conj y (first x))] (recur (drop 1 x) t))))", "problem": 23, "user": "517e25c6e4b0329b27fa9f51"}, {"code": "into ()", "problem": 23, "user": "5188c487e4b0bdff0e072d55"}, {"code": "(fn [s]\n  (reduce conj '() s))", "problem": 23, "user": "518bd05ee4b0f028e99addf2"}, {"code": ";#(into () %)\n#(loop [result (empty %1)\n        col %1 ]\n   (if (empty? col)\n     result\n     (recur (concat (list (first col)) result) (rest col))\n     ))", "problem": 23, "user": "518ccf6be4b05e6c8537e386"}, {"code": "reduce conj ()", "problem": 23, "user": "518b761ae4b0f028e99addee"}, {"code": "#(into () %)", "problem": 23, "user": "516c0a7de4b005fd0cdf85cb"}, {"code": "into ()", "problem": 23, "user": "4f29651ce4b0d6649770a028"}, {"code": "(fn [c] (loop [col c rev (empty c)] (if (empty? col) rev (recur (rest col) (cons (first col) rev)))) )", "problem": 23, "user": "51771cb1e4b085adf681d895"}, {"code": "reduce conj '()", "problem": 23, "user": "518ec633e4b0cd6ff516769e"}, {"code": "reduce conj ()", "problem": 23, "user": "518e6966e4b051adb72789ec"}, {"code": "(fn [x] (into '() x))", "problem": 23, "user": "518cdbd6e4b05e6c8537e387"}, {"code": "#(into () %)", "problem": 23, "user": "518f9e14e4b08646f171ca07"}, {"code": "reduce conj ()", "problem": 23, "user": "518644bce4b0da5a5be3baca"}, {"code": "(fn [s] \n  (loop [s2      s\n         result '()]\n    (if (empty? s2)\n      result\n      (recur (rest s2) (cons (first s2) result)))))", "problem": 23, "user": "51909ee5e4b0af8891cc8d37"}, {"code": "(fn [s] (reduce conj () s))", "problem": 23, "user": "5191a9e6e4b0d428d29dc1b5"}, {"code": "(fn [x]\n(loop [cnt (count x) acc (list* x) new '()]\n  (if (zero? cnt)\n      new\n        (recur (dec cnt) (rest acc) (conj new (first acc)))\n    \n    )\n  ))", "problem": 23, "user": "519218ebe4b08962174cf737"}, {"code": "#(into () %)", "problem": 23, "user": "51909098e4b0af8891cc8d36"}, {"code": "(fn this [s]\n  (if (empty? s)\n    []\n    (conj (this (rest s)) (first s))\n   )\n )", "problem": 23, "user": "5191e91de4b08962174cf733"}, {"code": "#(into () %)", "problem": 23, "user": "51919dfae4b06bf878d046ae"}, {"code": "#(into () %)", "problem": 23, "user": "5154b16be4b0179c5115f4e2"}, {"code": "reduce #(cons %2 %) nil", "problem": 23, "user": "51131da8e4b0350614f07a83"}, {"code": "sort #(compare %2 %1)", "problem": 23, "user": "5143824ae4b0b4fb4ace5f36"}, {"code": "(fn [lst]\n  (loop [l1 lst l2 []]\n    (if (empty? l1)\n      l2\n      (recur (rest l1) (concat [(first l1)] l2))\n      )))", "problem": 23, "user": "519136e9e4b0f8ef0be96c01"}, {"code": "(fn [xs]\n  (loop [s xs, result []]\n    (if (empty? s) result\n    (recur (rest s) (cons (first s) result))))\n  )", "problem": 23, "user": "50a8bb65e4b0deba384a58bd"}, {"code": "(fn [xs]\n  (loop [ys xs acc '()]\n    (if (empty? ys)\n        acc\n      (recur (rest ys) (conj acc (first ys))))))", "problem": 23, "user": "519451d1e4b0142f60b4aedd"}, {"code": "(fn rev\n  ([lst new]\n     (if (= 0 (count lst))\n       new\n       (rev (take (- (count lst) 1) lst) (conj new (last lst)))))\n  ([lst]\n     (rev lst [])))", "problem": 23, "user": "5193db52e4b04df54c09802a"}, {"code": "(fn rev [coll]\n  (reduce conj () coll))", "problem": 23, "user": "5194675fe4b0142f60b4aedf"}, {"code": "#(into '() %)", "problem": 23, "user": "51933b41e4b0c663c5d86ca2"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "51937eb3e4b04df54c098022"}, {"code": "#(loop [s % t []]\n  (if (empty? s)\n    t\n    (recur (rest s) (cons (first s) t))\n    )\n  )", "problem": 23, "user": "5194243be4b0142f60b4aed9"}, {"code": "reduce (fn[a b] (conj a b)) '()", "problem": 23, "user": "51950793e4b09df09a77a3e4"}, {"code": "(fn [xs] (reduce conj '() xs))", "problem": 23, "user": "5188c249e4b0bdff0e072d54"}, {"code": "#(into () %)", "problem": 23, "user": "5195fadee4b04c0af7ff3c11"}, {"code": "(fn [x] (into () x))", "problem": 23, "user": "5195e114e4b04c0af7ff3c09"}, {"code": "(fn fonk [lst] (if (nil? lst) nil (cons (last lst) (fonk (butlast lst)))))", "problem": 23, "user": "51960b79e4b04c0af7ff3c13"}, {"code": "(fn [coll] (reduce (fn [rcoll x] (list* x rcoll)) [] coll))", "problem": 23, "user": "5112bbdde4b0350614f07a7c"}, {"code": "(fn [s] (reduce conj () s))", "problem": 23, "user": "5196749be4b04c0af7ff3c20"}, {"code": "#(into () %)", "problem": 23, "user": "514a762ae4b00c7db5067428"}, {"code": "into ()", "problem": 23, "user": "519126d5e4b0f8ef0be96bff"}, {"code": "#(reduce conj nil %)", "problem": 23, "user": "5196568fe4b04c0af7ff3c1c"}, {"code": "#(into () %)", "problem": 23, "user": "5195b8cce4b04c0af7ff3c08"}, {"code": "(fn [s] (reduce conj '() s))", "problem": 23, "user": "506b40ade4b0eda3100c0905"}, {"code": "(partial reduce conj '())", "problem": 23, "user": "51980f7ce4b068aa333628f7"}, {"code": "(fn rev [coll] (if (empty? coll) [] (conj (rev (next coll)) (first coll))))", "problem": 23, "user": "5197f674e4b068aa333628f6"}, {"code": "reduce conj ()", "problem": 23, "user": "50377d53e4b0af0658af77ad"}, {"code": "(fn [seq] (reduce conj () seq))", "problem": 23, "user": "51761580e4b085adf681d880"}, {"code": "#(into () %)", "problem": 23, "user": "517d1018e4b0f5e87c18f25e"}, {"code": "(fn [x]\n  (loop [s x result (seq '())]\n    (if (= nil (first s))\n      result\n      (recur (rest s) (conj result (first s))))))", "problem": 23, "user": "518c5236e4b087e178201de0"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "4f409e29e4b0e243712b1fb6"}, {"code": "(fn [x] (map (fn [y] (nth (vec x) y)) (range (- (count x) 1) -1 -1)))", "problem": 23, "user": "519291c1e4b08962174cf74b"}, {"code": "(fn list-reverse [x]\n  (if (empty? x) '() (cons (last x) (list-reverse (butlast x)))))", "problem": 23, "user": "519938f7e4b0aa09cbc0b844"}, {"code": "reduce #(cons %2 %1) '()", "problem": 23, "user": "4fa78336e4b081705acca1c4"}, {"code": "(fn f [x] (concat (if (= 1 (count x)) (rest x) (f (rest x))) (take 1 x)))", "problem": 23, "user": "519964cbe4b0aa09cbc0b849"}, {"code": "(fn [coll] (reduce conj () coll))", "problem": 23, "user": "5199ca05e4b022efe2b3ba88"}, {"code": "(fn rever [seq]\n  (reduce conj () seq))", "problem": 23, "user": "519a5880e4b022efe2b3ba93"}, {"code": "#(into () %)", "problem": 23, "user": "519a97e8e4b029e3e1d2cc5a"}, {"code": "(fn [xs]\n  (reduce conj () xs))", "problem": 23, "user": "519b231ee4b0ac1b7dced6a2"}, {"code": "reduce conj '()", "problem": 23, "user": "519b2570e4b0ac1b7dced6a3"}, {"code": "(fn [v] (reduce #(cons %2 %1) '() v))", "problem": 23, "user": "51990df9e4b068aa333628fc"}, {"code": "(fn recursive-reverse [coll]\n(if (= 0 (count coll))\n[]\n(concat (recursive-reverse (drop 1 coll)) (take 1 coll))))", "problem": 23, "user": "519a6868e4b022efe2b3ba96"}, {"code": "into '()", "problem": 23, "user": "519bb38de4b0b0d59c754b78"}, {"code": "(fn [x]\n  (let [myreverse (fn [x accum]\n                    (if (seq x)\n                      (recur (next x) (cons (first x) accum))\n                      accum))]\n    (myreverse x ())))", "problem": 23, "user": "519be011e4b0a1d87b00344e"}, {"code": "(fn [xs] (reduce #(conj % %2) '() xs))", "problem": 23, "user": "519b7d76e4b02a926d9a436e"}, {"code": "(partial reduce #(cons %2 %1) ())", "problem": 23, "user": "516385cee4b055933a9ca02d"}, {"code": "(fn rev [ls] (let [revx (fn revx [xs ys] (if (empty? xs) ys (revx (rest xs) (conj ys (first xs)))))] (revx ls '())))", "problem": 23, "user": "519ca227e4b0a1d87b003460"}, {"code": "(fn [coll] (reduce #(cons %2 %1) [] coll))", "problem": 23, "user": "519b9361e4b07adb65ca4548"}, {"code": "(fn [x]\t\n\t(for [n (range (count x))]\t\t\n\t\t(nth (seq x) (- (count x) (+ n 1)))))", "problem": 23, "user": "51794ec2e4b0684c1c981a45"}, {"code": "(fn reverse' [s]\n  (if-let [s' (seq s)]\n    (let [parts (split-at 1 s')]\n      (concat (reverse' (last parts)) (first parts)))\n    s))", "problem": 23, "user": "4dade9e9c9a9d6ed4799dc57"}, {"code": "#(loop [in %, acc []] (if (seq in) (recur (rest in) (cons (first in) acc)) acc))", "problem": 23, "user": "519d66d2e4b037b32803f9b2"}, {"code": "(fn rev [x]\n  (println \"x: \" x)\n  (println \"first: \" (first x))\n  (if (empty? x)\n    '()\n    (concat (rev (drop 1 x)) (take 1 x))\n    )\n  )", "problem": 23, "user": "5194f482e4b05be8c43d2385"}, {"code": "(fn [x]\n  (loop [x x\n         y (empty x)]\n    (if (empty? x)\n      y\n      (recur (rest x)\n             (cons (first x) y)))))", "problem": 23, "user": "519db0ede4b037b32803f9b9"}, {"code": "#(into () %)", "problem": 23, "user": "519e8fb6e4b0acf32bc6a431"}, {"code": "#(loop [rev () src %] (if (= src '()) rev (recur (conj rev (first src)) (rest src))))", "problem": 23, "user": "5192ce1de4b0024e2d75f7d2"}, {"code": ";#(reduce (fn [x y] (concat [y] [x])) [] %)\n\n(fn ! [l] (if (= l []) [] (concat (! (rest l)) [(first l)] ) ))", "problem": 23, "user": "519e70d5e4b0acf32bc6a42c"}, {"code": "into ()", "problem": 23, "user": "5188c611e4b0bdff0e072d56"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "514c2d05e4b02b8cbb2a9278"}, {"code": "#(reduce (fn [x y] (conj x y)) '() %)", "problem": 23, "user": "5167cf82e4b0c5a4140a3095"}, {"code": "#(into () %)", "problem": 23, "user": "51a05bede4b0b292b01ee3f4"}, {"code": "#(into () %)", "problem": 23, "user": "51a16660e4b00957e520db73"}, {"code": "(fn rev[x]\n  (if (= 1 (count x))\n    x\n    (cons (last x) (rev (butlast x)))))", "problem": 23, "user": "51a16b08e4b00957e520db74"}, {"code": "(fn a [x]\n   (if (seq x)\n   (cons (last x) (a (drop-last x)))\n   '())\n   )", "problem": 23, "user": "5191045ee4b0f8ef0be96bf3"}, {"code": "(partial \n (fn foo [res s1] \n   (if \n     (= s1 '()) \n     res\n     (foo (conj res (first s1)) (rest s1))\n\t)\n  )\n '()\n )", "problem": 23, "user": "51a0e0b7e4b0b292b01ee3fb"}, {"code": "(fn [s] \n  (let [helper (fn [s r]\n                 (if (empty? s)\n                   r\n                   (recur (rest s) (into [(first s)] r ))))]\n  (helper s [])\n )\n)", "problem": 23, "user": "51a24c6ae4b00957e520db7a"}, {"code": "(fn [coll]\n  (loop [coll coll\n         acc (empty coll)]\n    (if (empty? coll)\n      acc\n      (recur (rest coll)\n             (cons (first coll) acc)))))", "problem": 23, "user": "505a3706e4b021387fb89855"}, {"code": "(fn [coll]\n  (loop [new '() old coll]\n    (if (empty? old)\n      new\n      (recur (cons (first old) new) (rest old)))))", "problem": 23, "user": "51991a89e4b068aa333628fd"}, {"code": "(fn [col]\n      (loop [x col\n             result []]\n        (if (empty? x)\n          result\n          (recur (rest x) (cons (first x) result)))))", "problem": 23, "user": "50608236e4b07251188e4454"}, {"code": "reduce #(conj %1 %2) '()", "problem": 23, "user": "51406cc5e4b076604f1aa554"}, {"code": "(fn [coll] (reduce #(cons %2 %1) [] coll))", "problem": 23, "user": "5192dd39e4b0c663c5d86c9e"}, {"code": "(fn [x] (reduce conj () x))", "problem": 23, "user": "51a3c9cde4b0e77c4ca60bf9"}, {"code": "(letfn [(R [coll]\n           (if (empty? coll) []\n             (conj (R (rest coll)) (first coll))))]\n  R)", "problem": 23, "user": "51a4416ae4b0def3c5c5868c"}, {"code": "(fn [c] (reduce conj '() c))", "problem": 23, "user": "50f69a3ce4b0035e89151844"}, {"code": "#(into () %)", "problem": 23, "user": "51a34135e4b0ab315a23ba63"}, {"code": "(fn [s]\n  (loop [l s acc (list)]\n    (if (empty? l)\n      acc\n      (recur (rest l) (conj acc (first l))))))", "problem": 23, "user": "51a4b5dee4b0def3c5c58697"}, {"code": "(fn r [s]\n  (if (seq s)\n    (conj\n      (r (rest s))\n      (first s))\n    []\n    ))", "problem": 23, "user": "51a10b2ce4b0b292b01ee3fe"}, {"code": "#(into () %)", "problem": 23, "user": "51a0cefbe4b0b292b01ee3f8"}, {"code": "#(into () %)", "problem": 23, "user": "51a584c7e4b051b01d55f44e"}, {"code": "#(into () %)", "problem": 23, "user": "51a477eee4b0def3c5c58692"}, {"code": "(fn [x](\n        loop [x x\n              acc ()]\n        (if (= () x)\n          acc\n          (recur (rest x) (cons (first x) acc)))))", "problem": 23, "user": "51a49b21e4b0def3c5c58694"}, {"code": "(fn [col]\n  (loop [c col\n         r (list)]\n    (if-not (seq c)\n      r\n      (recur (rest c) (conj r (first c))))))", "problem": 23, "user": "51030edbe4b00c483ae17700"}, {"code": "(fn [x] (loop [y x z '()] (if (empty? y) z (recur (rest y) (conj z (first y))))))", "problem": 23, "user": "51a61484e4b0740bfd1afd1e"}, {"code": "#(map (vec %) (range (dec (count %)) -1 -1))", "problem": 23, "user": "4e5e391c535d8a8b8723a2d0"}, {"code": "(fn re [x]\n  (when (not (= x nil))\n    (cons (last x) (re (butlast x)))))", "problem": 23, "user": "51a671d4e4b0740bfd1afd21"}, {"code": "reduce (fn [acc x] (cons x acc)) '()", "problem": 23, "user": "519dbf26e4b037b32803f9bd"}, {"code": "into ()", "problem": 23, "user": "51316a63e4b0431ba07e7feb"}, {"code": "(fn rev [ls] ((fn revHelper [soFar xs] (if (empty? xs) soFar (revHelper (cons (first xs) soFar) (rest xs)))) nil ls))", "problem": 23, "user": "51a75902e4b0da5f497bde82"}, {"code": "(fn [sq] (map second (sort-by first (map-indexed (fn [index item] [(- index) item]) sq))))", "problem": 23, "user": "51a4767fe4b0def3c5c58691"}, {"code": "(fn [coll]\n  (reduce (fn [reversed element]\n            (conj reversed element)) '() coll))", "problem": 23, "user": "519697a2e4b04c0af7ff3c21"}, {"code": "(fn r\n  ([l] (r l []))\n  ([l acc]\n   (if (empty? l)\n     acc\n     (r (rest l) (cons (first l) acc)))))", "problem": 23, "user": "518c0f4ee4b0f028e99addf7"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "51a78d8be4b0da5f497bde86"}, {"code": "(fn [x] (loop [old x new ()] (if (= old ()) new (recur (rest old) (conj new (first old))))))", "problem": 23, "user": "51a7f74be4b08d8ec191b802"}, {"code": "#(loop [reversed '()\n         remaining %1]\n\t(if (= 0 (count remaining))\n      reversed\n      (recur (conj reversed (first remaining)) (rest remaining)) ))", "problem": 23, "user": "51a865dfe4b08d8ec191b80f"}, {"code": "(fn my-reverse [aseq]\n  (loop [aseq aseq\n         acc '()]\n    (cond\n     (nil? aseq) acc\n     :else (recur (next aseq) (cons (first aseq) acc)))))", "problem": 23, "user": "50414e3ce4b06d8231e4facd"}, {"code": "into ()", "problem": 23, "user": "51a768e0e4b0da5f497bde84"}, {"code": "reduce conj '()", "problem": 23, "user": "51a88e7fe4b08d8ec191b813"}, {"code": "into ()", "problem": 23, "user": "5137fb22e4b0a5db03d727d3"}, {"code": "#(into () %)", "problem": 23, "user": "51a8ab8ee4b08d8ec191b819"}, {"code": "(fn [x] (into () x))", "problem": 23, "user": "51a87d28e4b08d8ec191b811"}, {"code": "(fn my-reverse [xs]\n        (letfn [(internal [xs acc]\n                          (if (empty? xs)\n                              acc\n                            (recur (rest xs) (cons (first xs) acc))))]\n               (internal xs nil)))", "problem": 23, "user": "51a8f0c6e4b08d8ec191b821"}, {"code": "(fn [s]\n  (if (vector? s)\n    (loop [s s ns []]\n      (if (empty? s)\n        ns\n        (recur (butlast s) (conj ns (last s)))))\n    (loop [s s ns '()]\n      (if (empty? s)\n        ns\n        (recur (rest s) (conj ns (first s)))))))", "problem": 23, "user": "51a132cee4b0b292b01ee3ff"}, {"code": "(fn [s]\n  (into () s))", "problem": 23, "user": "51a8ef91e4b08d8ec191b820"}, {"code": "#(reduce (fn [newCol value] (conj newCol value)) '() %1)", "problem": 23, "user": "518637c9e4b0da5a5be3bac8"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "51793056e4b0684c1c981a41"}, {"code": "#(into () %)", "problem": 23, "user": "51a9dbc9e4b04e3dc0c27b1e"}, {"code": "into ()", "problem": 23, "user": "51a417dde4b0def3c5c58688"}, {"code": "(fn [xs]\n  (reduce (fn [accum nxt] (conj accum nxt)) '() xs))", "problem": 23, "user": "51aa2b4fe4b04e3dc0c27b21"}, {"code": "reduce (fn [xs e] (conj xs e)) ()", "problem": 23, "user": "4ec96da2535d6d7199dd36ff"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "51a3cc45e4b0e77c4ca60bfb"}, {"code": "reduce conj '()", "problem": 23, "user": "5065dd94e4b0313a384e5643"}, {"code": "(fn [s]\n  (loop [temp s\n         rev '()]\n    (if (empty? temp)\n      rev\n      (recur (rest temp) (cons (first temp) rev)))))", "problem": 23, "user": "4e09392a535d04ed9115e7ae"}, {"code": "(fn [x] (into () x))", "problem": 23, "user": "517d4ba3e4b0f5e87c18f261"}, {"code": "#(into () %)", "problem": 23, "user": "4f74fed2e4b0fbe0118ec553"}, {"code": "reduce #(cons %2 %1) []", "problem": 23, "user": "51aa4eede4b04e3dc0c27b25"}, {"code": "(fn [c]\n   ((fn [a b] ; b is the new seq being built \n      (if a\n        (recur (next a) (conj b (first a)))\n        b)) c '()))", "problem": 23, "user": "51aa5434e4b04e3dc0c27b26"}, {"code": "(fn rev [x] \n  (\n    if (= x '()) \n      '()\n      (conj (rev (drop-last x)) (last x))\n   )\n)", "problem": 23, "user": "51ab1718e4b04e3dc0c27b2f"}, {"code": "#(reduce conj '() %1)", "problem": 23, "user": "5183f5d7e4b02826a645f393"}, {"code": "#(loop [acc [] col %] (if (empty? col) acc (recur (conj acc (last col)) (drop-last col))))", "problem": 23, "user": "51a1659de4b00957e520db72"}, {"code": "(fn rev [x & [acc]]\n   (if (seq x)\n       (let [tail (or acc [])]\n         (rev (rest x) (cons (first x) tail)))\n      acc))", "problem": 23, "user": "51a4d53ae4b0def3c5c58699"}, {"code": "(fn f [s] (if (seq s) (cons (last s) (f (butlast s))) s))", "problem": 23, "user": "506cad7de4b0a302964c548e"}, {"code": "into '()", "problem": 23, "user": "516db4f6e4b046df6fbb76a0"}, {"code": "(fn rr [x] (if (empty? x) [] (concat (rr (rest x)) [(first x)] ) ))", "problem": 23, "user": "51ac61c8e4b09397d510976b"}, {"code": "into ()", "problem": 23, "user": "51ac73e5e4b09397d510976d"}, {"code": "into ()", "problem": 23, "user": "51ac8717e4b09397d5109773"}, {"code": "(fn [coll] (map last (sort-by #(first %) #(compare %2 %) (map-indexed vector coll))))", "problem": 23, "user": "51a54fb4e4b0def3c5c586a3"}, {"code": "(fn rev [xs]\n  (reduce #(cons %2 %1) [] xs))", "problem": 23, "user": "51ac6360e4b09397d510976c"}, {"code": "(fn myreverse [given]\n  (for [item (apply (partial sorted-map-by #(compare %2 %1)) (interleave (range (count given)) given))]\n    (val item)))", "problem": 23, "user": "51a7b4fee4b0da5f497bde8b"}, {"code": "#(into () %)", "problem": 23, "user": "51ac36c1e4b09397d5109765"}, {"code": "(fn [coll] (reduce conj '() coll))", "problem": 23, "user": "4f49bca5e4b0d56e7bb92bfb"}, {"code": "#(into () %)", "problem": 23, "user": "5190772de4b09156e89b2a0a"}, {"code": "reduce #(cons %2 %1) []", "problem": 23, "user": "510b0480e4b078ea719210fa"}, {"code": "(fn rev [X]\n  (if (empty? X) []\n    (conj (rev (rest X)) (first X))))", "problem": 23, "user": "51ad0ab8e4b09397d510977b"}, {"code": "(fn rev [xs]\n  (if (empty? xs)\n    xs\n    (conj (rev (butlast xs)) (last xs))\n   ))", "problem": 23, "user": "51ad20eee4b09397d510977e"}, {"code": "(fn [coll]\n  (reduce #(cons %2 %1) [] coll))", "problem": 23, "user": "508e26c2e4b0f17d83ea26ca"}, {"code": "into '()", "problem": 23, "user": "51ad54cee4b09397d5109781"}, {"code": "(fn rev-s [s]\n  (\n   (fn rev [ss result]\n     (if (nil? (first ss)) result (rev (rest ss) (cons (first ss) result)))) s ()\n   )\n  )", "problem": 23, "user": "51aa2ad6e4b04e3dc0c27b20"}, {"code": "(fn [x] (reduce conj '() x))", "problem": 23, "user": "4e68ed35535d8ccf87e9fe92"}, {"code": "(fn my-reverse\n\t[some-seq]\n  \t(reduce \n   \t\t(fn [acc element]\n   \t\t\t(cons element acc))\n     \t[] some-seq))", "problem": 23, "user": "51af4cf6e4b0c53cf2e68a4c"}, {"code": "(fn [x] (into () x))", "problem": 23, "user": "51aee76ce4b09397d5109796"}, {"code": "into ()", "problem": 23, "user": "51af978fe4b0c53cf2e68a50"}, {"code": "reduce #(cons %2 %1) []", "problem": 23, "user": "51aeb1f4e4b09397d5109794"}, {"code": "(fn [what] (reduce (fn [l, x] (conj l x)) '() what))", "problem": 23, "user": "51b0436ae4b0c53cf2e68a60"}, {"code": "(fn [seq] \n  (loop [s seq\n         a '()]\n    (if (empty? s) \n      a\n      (recur (rest s) \n             (conj a (first s))))))", "problem": 23, "user": "51b07b99e4b0c53cf2e68a66"}, {"code": "(fn [coll]\n(reduce conj '() coll))", "problem": 23, "user": "51b0359ae4b0c53cf2e68a5f"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "51b091e9e4b0c53cf2e68a68"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "51afa3d9e4b0c53cf2e68a51"}, {"code": "#(into '() %)", "problem": 23, "user": "51b01309e4b0c53cf2e68a57"}, {"code": "(fn [x] (into () x))", "problem": 23, "user": "51a82498e4b08d8ec191b80b"}, {"code": "(fn [l] \n  (loop [l l temp '()]\n  (if (seq l)\n    (recur (rest l) (conj temp (first l)))\n    temp)))", "problem": 23, "user": "51b10ebde4b0c53cf2e68a74"}, {"code": "reduce (fn [x y] (conj x y)) '()", "problem": 23, "user": "51b1b344e4b0c53cf2e68a87"}, {"code": "reduce conj ()", "problem": 23, "user": "4ee5dbdb535d93acb0a66851"}, {"code": "(fn [x] (reduce #(conj %1 %2) '() x))", "problem": 23, "user": "51b0fc95e4b0c53cf2e68a72"}, {"code": "#(into '() %)", "problem": 23, "user": "51b1ef95e4b02f8f128bb95e"}, {"code": "(fn [s] (reduce conj () s))", "problem": 23, "user": "51a8b576e4b08d8ec191b81a"}, {"code": "reduce #(cons %2 %) []", "problem": 23, "user": "51b2e850e4b026427ecf067b"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "51b38769e4b026427ecf067f"}, {"code": "(fn [x] (reduce (fn [res, y] (conj res y)) '() x))", "problem": 23, "user": "51b3a2c8e4b0f094dd986fa6"}, {"code": "(fn rever [lat] (if (= [] lat) [] (conj (rever (rest lat)) (first lat))))", "problem": 23, "user": "514cc029e4b019235f6c057c"}, {"code": "into '()", "problem": 23, "user": "51b3f109e4b0f094dd986fa9"}, {"code": "(fn [s] (loop [x s\n               r ()]\n    \t\t(if (= nil (first x))\n           \tr\n           \t(recur (rest x) (conj r (first x))))))", "problem": 23, "user": "51ab8589e4b04e3dc0c27b37"}, {"code": "#(reduce conj (seq nil) %)", "problem": 23, "user": "50d4593ee4b09cc622d65a68"}, {"code": "(fn [as]\n  (loop [res () s as]\n    (if s\n      (recur (conj res (first s)) (next s))\n      res)))", "problem": 23, "user": "51b3b22ce4b0f094dd986fa7"}, {"code": "(fn [coll]\n  (loop [s coll r '()]\n    (if (seq s)\n      (recur (next s) (cons (first s) r) )\n      r\n)))", "problem": 23, "user": "51b08df5e4b0c53cf2e68a67"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4f2c3ef8e4b0d6649770a051"}, {"code": "apply conj nil", "problem": 23, "user": "50b65966e4b0a86f8358ca6c"}, {"code": "reduce #(conj %1 %2) '()", "problem": 23, "user": "51b5e86ae4b0f094dd986fd2"}, {"code": "#(into () %1)", "problem": 23, "user": "518ad8fce4b06da86c1973c1"}, {"code": "into ()", "problem": 23, "user": "51af872ae4b0c53cf2e68a4e"}, {"code": "(fn [sq] (loop [sq sq \n\t\t\t   return '()] \n\t\t       (println \"bar\")\n\t\t       (if (= 0 (count sq))\n\n\t\t\t   return\n\t\t\t (do\n\t\t\t     (println \"foo\")\n\t\t\t     (recur (rest sq)\n\t\t\t\t    (conj return (first sq)))))))", "problem": 23, "user": "50a5b7e9e4b0aa96157e2610"}, {"code": "(fn myrev\n  [xs] (if (empty? xs)\n         nil\n         (concat (myrev (rest xs)) (list (first xs)))))", "problem": 23, "user": "51b6cfd6e4b02e5820733413"}, {"code": "(fn [x] (into () x))", "problem": 23, "user": "51b70902e4b04fc00976d47b"}, {"code": "#(into () %)", "problem": 23, "user": "5197d144e4b068aa333628f0"}, {"code": "(fn o-rev [col]\n  (if (empty? col) []\n      (conj (o-rev (rest col)) (first col))))", "problem": 23, "user": "4f5f2665e4b0030a34fb2b5d"}, {"code": "(fn rev0 [x]\n  (reduce conj '() x))", "problem": 23, "user": "51b73a91e4b0d906fcd71d33"}, {"code": "#(into () %)", "problem": 23, "user": "5097ddfce4b087ccf61a7af0"}, {"code": "(fn my-r2 [l]\n  (if (= 0 (count l))\n    l\n    (concat (list (last l)) (my-r2 (take (- (count l) 1) l)))))", "problem": 23, "user": "51b76227e4b0d906fcd71d35"}, {"code": "(fn r\n  ([a] (r a '()))\n  ([a b]\n   (if (empty? a) b\n     (let [h (first a) t (rest a)]\n       (recur t (cons h b))))))", "problem": 23, "user": "51b793d3e4b0d906fcd71d38"}, {"code": "(fn [s] (loop [torev s, acc []]\n          (if (empty? torev)\n            acc\n            (recur\n             (rest torev)\n             (cons (first torev) acc)\n             )\n            )\n          )\n  )", "problem": 23, "user": "51b6f4f9e4b04fc00976d479"}, {"code": "(fn [s] \n    (loop [rv () rm s]\n      (if (empty? rm)\n        rv\n        (recur (conj rv (first rm)) (rest rm)))))", "problem": 23, "user": "51672d15e4b079759a74a5e7"}, {"code": "#(into () %)", "problem": 23, "user": "51b09276e4b0c53cf2e68a69"}, {"code": "(fn [x] (loop [sq x rev []] (if (empty? sq) rev (recur (rest sq) (cons (first sq) rev)))))", "problem": 23, "user": "51b77c9be4b0d906fcd71d37"}, {"code": "into ()", "problem": 23, "user": "505d70e8e4b0e6aca564be09"}, {"code": "reduce conj ()", "problem": 23, "user": "51b7b521e4b0d906fcd71d3a"}, {"code": "(fn [vect] \n    (reduce #(cons %2 %1)\n            []\n            vect))", "problem": 23, "user": "51789dfae4b03d69594194d7"}, {"code": "(fn [ls] \n  (reduce #(conj %1 %2) '() ls))", "problem": 23, "user": "51b8e8b3e4b050a1176cd6a0"}, {"code": "(fn [coll]\n  (reduce #(conj %1 %2) () coll))", "problem": 23, "user": "51b8e0dce4b050a1176cd69f"}, {"code": "(fn [xs]\n    (loop [acc ()\n           xs xs]\n      (if (empty? xs)\n        acc\n        (recur (conj acc (first xs))\n               (rest xs)))))", "problem": 23, "user": "51b91b08e4b0e871ca4958f8"}, {"code": "(fn [xs]\n  (loop [res '() ys xs]\n    (if (empty? ys)\n      res\n      (recur (conj res (first ys)) (rest ys)))))", "problem": 23, "user": "51b920bfe4b0e871ca4958f9"}, {"code": "#(into () %)", "problem": 23, "user": "51ba59e4e4b0fe3ecfb4642d"}, {"code": "reduce conj '()", "problem": 23, "user": "51ae350fe4b09397d5109790"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "51bb970be4b0fe3ecfb4644e"}, {"code": "#(into () %)", "problem": 23, "user": "51b18685e4b0c53cf2e68a86"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "51bc1d76e4b0fe3ecfb46450"}, {"code": "(fn my-rev [x]\n  (if (empty? x) x\n    (concat (my-rev (rest x)) (list (first x)))))", "problem": 23, "user": "51bc2f6ae4b0fe3ecfb46452"}, {"code": "(fn [s]\n  (loop [result []\n         s s]\n    (if (seq s)\n      (recur (concat [(first s)] result) (rest s))\n      result)))", "problem": 23, "user": "4fa340b4e4b081705acca18c"}, {"code": "#(into () %)", "problem": 23, "user": "51bc6d54e4b0fe3ecfb4645c"}, {"code": "(fn [coll] \n  (loop [c coll ret []] \n    (if (empty? c) \n      ret \n      (recur (rest c) (cons (first c) ret))\n      )))", "problem": 23, "user": "4f99bf3ee4b0dcca54ed6d01"}, {"code": "(fn my-reverse [lst]\n  (loop [input lst result []]\n    (if (= input ())\n      result\n      (recur (rest input) (cons (first input) result)))))", "problem": 23, "user": "51baff1be4b0fe3ecfb46443"}, {"code": "#(reduce (fn [acc x] (cons x acc)) (empty %1) %1)", "problem": 23, "user": "51bd1a0de4b0df1216cefd93"}, {"code": "#(into () %)", "problem": 23, "user": "51bcf091e4b0df1216cefd91"}, {"code": "(fn [coll]\n  (reduce (fn [r i] (cons i r)) () coll))", "problem": 23, "user": "504e0517e4b078edc5f5939a"}, {"code": "#(seq (reduce conj '() %))", "problem": 23, "user": "51bd5796e4b0ff155d51d2aa"}, {"code": "(fn [s] (reduce conj nil s))", "problem": 23, "user": "51b89503e4b050a1176cd69a"}, {"code": "(fn [sq] (reduce conj () sq))", "problem": 23, "user": "51bd8c53e4b0ff155d51d2b2"}, {"code": "(fn [coll] \n  (reduce \n   (fn [memo item] (conj memo item)) \n   '()\n   coll))", "problem": 23, "user": "51be0600e4b0ff155d51d2b9"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "519462b6e4b0142f60b4aede"}, {"code": "#(into () %)", "problem": 23, "user": "51be0a2ce4b0ff155d51d2ba"}, {"code": "#(into () %)", "problem": 23, "user": "51bec919e4b013aa0d74b800"}, {"code": "reduce #(cons %2 %1) '[]", "problem": 23, "user": "51beb32ae4b013aa0d74b7fd"}, {"code": "#(into () %)", "problem": 23, "user": "51bee4afe4b013aa0d74b809"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "51b5a6e0e4b0f094dd986fce"}, {"code": "(fn rev-seq [x]\n  (into '() x))", "problem": 23, "user": "51bf0ccee4b013aa0d74b811"}, {"code": "reduce #(conj %1 %2) '()", "problem": 23, "user": "51b86a0fe4b09e0e347b2e78"}, {"code": "(fn r [s] \n  (if (empty? s) s\n  \t(cons \n   \t\t(last s) \n   \t\t(r (drop-last s))\n\t)\n  )\n)", "problem": 23, "user": "51b9d1f0e4b0e871ca49590b"}, {"code": "(fn rev [aseq] (if (empty? aseq) '() (concat (rev (rest aseq)) (list (first aseq)))))", "problem": 23, "user": "51bf4560e4b013aa0d74b817"}, {"code": "into ()", "problem": 23, "user": "51b90b88e4b050a1176cd6a2"}, {"code": "#(vec (apply conj '() %))", "problem": 23, "user": "5143a51be4b0b4fb4ace5f39"}, {"code": "#(reduce (fn[x, y] (conj x y)) () %)", "problem": 23, "user": "51b9dc12e4b0e871ca49590c"}, {"code": "#(reduce (fn [a x] (cons x a)) () %)", "problem": 23, "user": "51ba4482e4b0fe3ecfb4642b"}, {"code": "(fn tmp [s]\n  (if (= s '())\n    '()\n    (concat (tmp (rest s)) (list (first s)))))", "problem": 23, "user": "51c1229be4b0c9c822882944"}, {"code": "(fn myReverse [x] (if (empty? x) x (concat (myReverse (rest x)) [(first x)] )))", "problem": 23, "user": "51c214bce4b0d204dbe2ca1c"}, {"code": "#(loop [i % j []]\n       (if (empty? i)\n         (seq j)\n         (recur (rest i) (cons (first i) j))))", "problem": 23, "user": "51bd255ce4b0df1216cefd94"}, {"code": "#(loop [i % j []]\n       (if (empty? i)\n         (seq j)\n         (recur (rest i) (cons (first i) j))))", "problem": 23, "user": "51b213c2e4b02f8f128bb962"}, {"code": "(fn my-reverse [col]\n  (loop [restseq col\n         accvec []]\n  (if (empty? restseq)\n                accvec\n                (recur (rest restseq) (cons (first restseq) accvec)))))", "problem": 23, "user": "51aa7298e4b04e3dc0c27b28"}, {"code": "(fn woot [x]\n  (if (= 1 (count x))\n    x\n    (concat (woot (rest x)) (list (first x))))\n  )", "problem": 23, "user": "51c2fc7de4b0d204dbe2ca2e"}, {"code": "(fn [arg]\n  (loop [out [] cont arg]\n    (if (empty? cont) out (recur (conj out (last cont)) (take (- (count cont) 1) cont)))))", "problem": 23, "user": "51c342e9e4b0851ac09658f3"}, {"code": "reduce conj '()", "problem": 23, "user": "4f5dae33e4b0030a34fb2b41"}, {"code": "#(reduce (fn [x y] (conj x y)) '() %)", "problem": 23, "user": "51b8e020e4b050a1176cd69e"}, {"code": "(fn [sq] ((fn [reversed sq] (if(empty? sq) reversed (recur (conj reversed (first sq)) (rest sq)))) '() sq))", "problem": 23, "user": "51c3c6a6e4b0851ac09658f8"}, {"code": "into '()", "problem": 23, "user": "51c330a9e4b0851ac09658f2"}, {"code": "(fn [coll]\n  (loop [r (rest coll) result (conj () (first coll))]\n    (if (empty? r)\n      result\n      (recur (rest r) (conj result (first r))))))", "problem": 23, "user": "51b9f5a6e4b0e871ca49590e"}, {"code": "#(loop [c % r ()]\n   (if (seq c)\n       (recur (rest c) (cons (first c) r))\n     r))", "problem": 23, "user": "51ab1da1e4b04e3dc0c27b30"}, {"code": "(fn my-reverse\n\t([x] (my-reverse x []))\n\t([x y] (if (empty? x) y (my-reverse (drop-last x) (conj y (last x))))))", "problem": 23, "user": "51c09719e4b0c9c82288293c"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "51c611c4e4b03a28d42333bf"}, {"code": "(fn [x] (reduce (fn [l r] (conj l r))  '() x))", "problem": 23, "user": "516cdef4e4b06f078fab2527"}, {"code": "(fn [c]\n  (loop [x c result (list)]\n    (if (empty? x)\n      result\n      (recur (rest x) (conj result (first x))))))", "problem": 23, "user": "5042bb9ae4b034ff00315d16"}, {"code": "#(into () %)", "problem": 23, "user": "51ab734ee4b04e3dc0c27b34"}, {"code": "(fn [coll] (reduce conj () coll))", "problem": 23, "user": "51c6d415e4b07ef393169e3a"}, {"code": "#(into '() %)", "problem": 23, "user": "4f6b9d0ae4b07046d9f4efad"}, {"code": "(fn [col] (reduce (fn [result elem] (conj result elem)) '() col))", "problem": 23, "user": "51c73959e4b07ef393169e3e"}, {"code": "#(reduce (fn [x y] (into [y] x)) (cons [(first %)] (drop 1 %)))", "problem": 23, "user": "50d6d7eee4b0159555a1fc76"}, {"code": "reduce #(cons %2 %) ()", "problem": 23, "user": "51c27b6ce4b0d204dbe2ca21"}, {"code": "#(into () %)", "problem": 23, "user": "51a7ff35e4b08d8ec191b804"}, {"code": "reduce conj ()", "problem": 23, "user": "51c9c6cde4b09ce160bef5b1"}, {"code": "(fn [s] \n  (loop [rs [] is s]\n    (if (= [] is) rs\n      (recur (cons (first is) rs) (rest is)))))", "problem": 23, "user": "4f038b62535dcb61093f6b1c"}, {"code": "(fn [lst]\n  (reduce (fn [memo vl] (cons vl memo)) '() lst))", "problem": 23, "user": "51c76864e4b07ef393169e3f"}, {"code": "reduce (fn [x y] (conj x y)) '()", "problem": 23, "user": "51c9d8a6e4b09ce160bef5b3"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "51c0bfdbe4b0c9c82288293f"}, {"code": "reduce conj ()", "problem": 23, "user": "51c8301ee4b07ef393169e4d"}, {"code": "#(into () %)", "problem": 23, "user": "51ca82e9e4b08b1cbd0d9488"}, {"code": "#(if(vector? %)\n   (loop[x (- (count %) 1),y %]\n   (if (== x -1)\n     (subvec y (/ (count y) 2))\n     (recur (dec x) (conj y (nth y x)))))\n   '(7 5 2))", "problem": 23, "user": "51c4690fe4b06b70b3e207e1"}, {"code": "#(let [l (seq %1)] (for [n (range (- (count l) 1) -1 -1)] (nth l n)))", "problem": 23, "user": "4f72f71be4b07046d9f4f03d"}, {"code": "reduce #(conj % %2) '()", "problem": 23, "user": "51ca15bfe4b09ce160bef5b8"}, {"code": "#(sort-by (zipmap % (range (count %) 0 -1)) %)", "problem": 23, "user": "51aab611e4b04e3dc0c27b2d"}, {"code": "reduce conj '()", "problem": 23, "user": "51c9a705e4b09ce160bef5ab"}, {"code": "#(loop [coll %\n        result []]\n   (if-not (first coll)\n     result\n     (recur (butlast coll)\n            (conj result (last coll)))))", "problem": 23, "user": "51caca2ae4b068dadb8f2226"}, {"code": "(fn [coll]\n  (into () coll))", "problem": 23, "user": "51baa1cae4b0fe3ecfb46438"}, {"code": "(fn f [l] (case l [] [] (conj (f (rest l))(first l))))", "problem": 23, "user": "51cbc435e4b08d8387cbeddd"}, {"code": "#(map (vec %) (range (dec (count %)) -1 -1))", "problem": 23, "user": "51cbdee1e4b08d8387cbede1"}, {"code": "(fn reverse-seq [n]\n   (if-not (empty? n )\n    (lazy-seq\n     (cons (last n)\n          (reverse-seq (butlast n))))))", "problem": 23, "user": "51cacda3e4b068dadb8f2227"}, {"code": "(fn[coll] (reduce conj '() coll))", "problem": 23, "user": "4f294dffe4b0d6649770a024"}, {"code": "reduce conj '()", "problem": 23, "user": "51cc5f20e4b02254fc794870"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "51cc6680e4b02254fc794872"}, {"code": "(fn rev [ss] (if ss (cons (last ss), (rev(butlast ss))) nil))", "problem": 23, "user": "51c1d159e4b0d204dbe2ca18"}, {"code": "#(reduce (fn [x y] (conj x y)) '() %)", "problem": 23, "user": "514fd753e4b0b449e54b8e00"}, {"code": "#( reduce conj () % )", "problem": 23, "user": "51ccc179e4b02254fc794879"}, {"code": "#((fn revseq [nl ol]\n              (println nl ol)\n                                      (if (empty? ol)\n                                        nl\n                                        (revseq (conj nl (first ol)) (rest ol)))) (list) %)", "problem": 23, "user": "51ccc92ce4b02254fc79487a"}, {"code": "(fn [s] (reduce conj '() s))", "problem": 23, "user": "51cd45e0e4b02254fc794887"}, {"code": "(fn my-reverse [xs]\n  (loop [a xs\n         b []]\n    (if (empty? a)\n      b\n      (recur (butlast a) (conj b (last a) ) ))))", "problem": 23, "user": "4ead1bb3535d7eef3080731d"}, {"code": "(fn zz [l]\n  (if (empty? l)\n    (vector )\n    (conj (zz (rest l)) (first l))))", "problem": 23, "user": "51cdec45e4b0e42293a2254f"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "51c858c3e4b07ef393169e55"}, {"code": "(fn [coll] (reduce (fn [acc e] (cons e acc)) (list) coll))", "problem": 23, "user": "51cdd3f0e4b0e42293a2254b"}, {"code": "into '()", "problem": 23, "user": "504e05b8e4b078edc5f5939c"}, {"code": "#(reduce (fn[x,y](cons y x)) {} %)", "problem": 23, "user": "51cec7b1e4b0e42293a2255b"}, {"code": "#(into () %)", "problem": 23, "user": "51cec903e4b0e42293a2255c"}, {"code": "(fn rseq'\n  ([coll] (rseq' coll '()))\n  ([coll acc]\n   (if-let [[x & xs] (seq coll)]\n\t (recur xs (cons x acc))\n     acc)))", "problem": 23, "user": "51cf0993e4b0e42293a2256a"}, {"code": "reduce conj '()", "problem": 23, "user": "51cf99bce4b0e42293a22576"}, {"code": "(fn [x]\n  (loop [l x\n         r nil]\n    (if-not (empty? l)\n      (recur (rest l) (conj r (first l)))\n      r\n    )\n  )\n)", "problem": 23, "user": "51ce3cd0e4b0e42293a22553"}, {"code": "(fn re [coll]\n  ((fn [result coll]\n     (if (empty? coll) result\n       (recur (cons (first coll) result) (rest coll)))) '() coll))", "problem": 23, "user": "51b3d998e4b0f094dd986fa8"}, {"code": "reduce #(conj %1 %2) '()", "problem": 23, "user": "51ca7906e4b08b1cbd0d9487"}, {"code": "(fn myreverse [myseq]\n    (if(empty? myseq)\n        []\n        (conj (myreverse (rest myseq)) (first myseq))\n    )\n)", "problem": 23, "user": "51d1111ce4b067c36548635f"}, {"code": "into ()", "problem": 23, "user": "51d08d67e4b067c365486351"}, {"code": "(fn [s] (->> (zipmap (iterate dec 0) s) (into (sorted-map)) (vals)))", "problem": 23, "user": "51c19873e4b0d204dbe2ca0d"}, {"code": "#(reduce (fn [l x] (cons x l)) () %)", "problem": 23, "user": "51cc5cb3e4b02254fc79486f"}, {"code": "(fn [coll] \n  (reduce (fn [c e] (cons e c))\n          (empty coll)\n          coll))", "problem": 23, "user": "51d19c24e4b0cfcf579466c3"}, {"code": "(fn [xs] (reduce (fn [acc x] (cons x acc)) '() xs))", "problem": 23, "user": "50a3fbc4e4b08bbd0eb4ed31"}, {"code": "(fn [L1 & L2] (if (empty? L1) L2 (recur (rest L1) (conj (if L2 L2 '()) (first L1)))))", "problem": 23, "user": "51cf126ae4b0e42293a2256b"}, {"code": "reduce conj ()", "problem": 23, "user": "51cbaf14e4b08d8387cbedda"}, {"code": "#(into () %)", "problem": 23, "user": "51d22261e4b0d13b04db0d95"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "51b9b5ace4b0e871ca495908"}, {"code": "#(into () %)", "problem": 23, "user": "51d26b0ae4b0d13b04db0d97"}, {"code": "(fn reverze [a]\n  (loop [xs a sx '()]\n    (if (empty? xs)\n      sx\n      (recur (rest xs) (conj sx (first xs))))))", "problem": 23, "user": "51d1e840e4b0d13b04db0d91"}, {"code": "(fn [l] (loop [res '() lst l] (if (= lst '()) res (recur (cons (first lst) res) (rest lst)))))", "problem": 23, "user": "51bdc609e4b0ff155d51d2b3"}, {"code": "reduce conj ()", "problem": 23, "user": "51c80dd0e4b07ef393169e4a"}, {"code": "reduce (fn [x y] (conj x y)) '()", "problem": 23, "user": "51d2ecb7e4b099f3b6acddf3"}, {"code": "(fn rev [lst]\n  (if (empty? lst)\n    '()\n    (cons (last lst) (rev (drop-last lst)))))", "problem": 23, "user": "51d1db6ce4b0d13b04db0d90"}, {"code": "(fn [seq]\n  (into '() seq))", "problem": 23, "user": "51d1875be4b0cfcf579466c0"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "51d28e15e4b0d13b04db0d9b"}, {"code": "(fn [x] (reduce conj '() x))", "problem": 23, "user": "51d381b5e4b099f3b6acde01"}, {"code": "#(into () %)", "problem": 23, "user": "51d4331ce4b013d740b70ddc"}, {"code": "(fn[x] (loop [xs x result []]\n    (if (not (empty? xs))\n      (recur (rest xs) (cons (first xs) result ))\n      result)))", "problem": 23, "user": "51d10b1fe4b067c36548635e"}, {"code": "into ()", "problem": 23, "user": "51d287f5e4b0d13b04db0d9a"}, {"code": "#(loop [values %\n        result []]\n   (if (empty? values)\n     result\n     (recur (drop-last values) (concat result (list (last values))))))", "problem": 23, "user": "51d360d1e4b099f3b6acddff"}, {"code": "(fn rev [s]\n  (let [l (vec s)]\n    (if (= 1 (count l))\n      l\n      (conj (rev (rest l)) (first l)))))", "problem": 23, "user": "51d4ed02e4b013d740b70dec"}, {"code": "(fn rev [s]\n  (if (empty? s)\n    s\n    (cons (last s) (rev (butlast s)))))", "problem": 23, "user": "504dffe2e4b078edc5f5938b"}, {"code": "reduce #(cons %2 %1) '()", "problem": 23, "user": "51d662fce4b0154f82ab92ef"}, {"code": "#(loop [acc '()\n        o %]\n   (cond (empty? o) acc\n         :else (recur (conj acc (first o)) (next o))))", "problem": 23, "user": "51d67516e4b0154f82ab92f0"}, {"code": "(fn myre [x] (if (empty? x) x (concat (myre (rest x)) (list (first x)) )))", "problem": 23, "user": "51d5f2bee4b01da06753aa97"}, {"code": "#(into '() %1)", "problem": 23, "user": "51d46133e4b013d740b70de2"}, {"code": "#(into () %)", "problem": 23, "user": "51cd0dc6e4b02254fc79487d"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "51d7efc3e4b0154f82ab9302"}, {"code": "#(loop [col % result '()]\n    (if (empty? col)\n      result\n      (recur (rest col) (cons (first col) result))))", "problem": 23, "user": "51d5af00e4b01da06753aa93"}, {"code": "(fn [s]\n    (reduce conj '() s))", "problem": 23, "user": "501f36dde4b0cb6ebc0a42e4"}, {"code": "(fn myreverse [x]\n  (if (empty? x)\n    x\n    (concat\n     \t(myreverse (rest x))\n     \t(list (first x))\n     )\n    )\n  )", "problem": 23, "user": "51d96ad0e4b02ceefd94774f"}, {"code": "(fn [coll & reversed] (if reversed (if (empty? (rest coll)) (conj reversed (last coll)) (recur (butlast coll) (conj reversed (last coll)))) (recur (butlast coll) [(last coll)])))", "problem": 23, "user": "4f985527e4b0dcca54ed6cf1"}, {"code": "#(reduce conj '() (vec %))", "problem": 23, "user": "51da52dbe4b02ceefd947763"}, {"code": "(fn \n  [coll]\n  (loop [coll coll\n         acc '()]\n    (if (empty? coll)\n      acc\n      (recur (rest coll) (cons (first coll) acc)))))", "problem": 23, "user": "51da565ae4b02ceefd947765"}, {"code": "(fn [coll]\n  (if (list? coll)\n    (reduce conj () coll)\n    (if (vector? coll)\n      (vec (reduce conj () (seq coll))\n           )\n      (reduce conj () (seq coll)))))", "problem": 23, "user": "51da7e49e4b02ceefd947768"}, {"code": "reduce conj '()", "problem": 23, "user": "51d49b75e4b013d740b70de6"}, {"code": "(fn [s] (reduce (fn [a b] (cons b a)) [] s))", "problem": 23, "user": "51da261ce4b02ceefd94775d"}, {"code": "(fn ! [seq] \n  (if (= 1 (count seq))\n    seq\n    (cons (last seq) (! (butlast seq)))\n   )\n )", "problem": 23, "user": "51db8244e4b0e067a9bbadc7"}, {"code": "(fn [s]\n  (for [i (range (count s))\n        :let [r (nth (vec s) (- (dec (count s)) i))]]\n        r))", "problem": 23, "user": "51ce1320e4b0e42293a22551"}, {"code": "(fn r [s] (if (empty? s) nil (conj (r (butlast s)) (last s))))", "problem": 23, "user": "51dba0d0e4b0e067a9bbadca"}, {"code": "reduce #(cons %2 %1) []", "problem": 23, "user": "51db9e1ee4b0e067a9bbadc9"}, {"code": "(fn [l] (into '() l))", "problem": 23, "user": "51d1ef6ee4b0d13b04db0d92"}, {"code": "(fn [my-seq]\n   (loop [my-seq my-seq acc '()]\n     (if (empty? my-seq)\n       acc\n       (recur (rest my-seq) (conj acc (first my-seq))))))", "problem": 23, "user": "4ede0511535d10e5ff6f5330"}, {"code": "#(into () %)", "problem": 23, "user": "4fc503bfe4b081705acca36e"}, {"code": "(fn my-reverse [s]\n    (reduce conj '() s)\n  )", "problem": 23, "user": "51dc0ed1e4b09c47a74ce105"}, {"code": "(fn [lst] (loop [nlst lst\n                 result '()] \n            (if (empty? nlst)\n              result\n              (recur (rest nlst) (conj result (first nlst))))))", "problem": 23, "user": "51da5552e4b02ceefd947764"}, {"code": "(fn my-rseq [coll]\n  (loop [coll coll, res ()]\n    (if (empty? coll)\n      res\n      (recur (rest coll) (conj res (first coll))))))", "problem": 23, "user": "51dc80b7e4b09c47a74ce10f"}, {"code": "(fn [seq] (into '()seq))", "problem": 23, "user": "51ac7e9be4b09397d510976f"}, {"code": "#(into () %)", "problem": 23, "user": "51dbba34e4b0e067a9bbadce"}, {"code": "#(into () %)", "problem": 23, "user": "51d11f5de4b067c365486360"}, {"code": "(fn [coll]\n  (loop [new-coll []\n         cur-coll coll]\n    (if-let [last (last cur-coll)]\n      (recur (conj new-coll last) (butlast cur-coll))\n      new-coll)))", "problem": 23, "user": "51db1abae4b094966a2cd685"}, {"code": "(fn [data] (loop [d data\n                  x '()]\n             (if (empty? d)\n               x\n               (recur (rest d) (cons (first d) x)))))", "problem": 23, "user": "50214ffae4b0ef1d2d4433bc"}, {"code": "(fn [l] (reduce #(conj %1 %2) '() l))", "problem": 23, "user": "51db27dbe4b094966a2cd688"}, {"code": "#(loop [s %\n        reversed ()]\n   (if (empty? s)\n     reversed\n     (recur (rest s) (cons (first s) reversed))))", "problem": 23, "user": "4ec6a616535d6d7199dd36d2"}, {"code": "#(into () %)", "problem": 23, "user": "51dc1190e4b09c47a74ce106"}, {"code": "#(into '() %)", "problem": 23, "user": "51dd55dae4b0c33a4e1da404"}, {"code": "(fn reverse-sequence [sequence] (into '() sequence))", "problem": 23, "user": "51daa721e4b02ceefd94776f"}, {"code": "reduce conj ()", "problem": 23, "user": "51d5ff4ce4b01da06753aa98"}, {"code": "#(into () %)", "problem": 23, "user": "51dfb9e2e4b01188f0627531"}, {"code": "(fn [elems]\n  (loop [i (dec(count elems)) acc []]\n    (if (< i 0)\n      acc\n      (recur (dec i) (conj acc (nth (seq elems) i))))))", "problem": 23, "user": "51df505be4b01188f062752a"}, {"code": "reduce conj ()", "problem": 23, "user": "51e00020e4b01188f0627534"}, {"code": "into ()", "problem": 23, "user": "51d9eb05e4b02ceefd947755"}, {"code": "(fn [x]\r\n (loop [tmp x result '()]\r\n  (if (= (first tmp) nil)\r\n   result\r\n   (recur (rest tmp) (conj result (first tmp))))))", "problem": 23, "user": "51dd634ee4b0c33a4e1da407"}, {"code": "(fn [coll]\n  (loop [src coll result []]\n    (if (empty? src) \n      result\n      (recur (drop-last src) (conj result (last src)) ))))", "problem": 23, "user": "50e90813e4b033b0e80d11e7"}, {"code": "into ()", "problem": 23, "user": "51dd9370e4b0c33a4e1da40c"}, {"code": "(fn rev ([ c ] (if (last c) (concat (list (last c)) (rev (drop-last c))))))", "problem": 23, "user": "51e1a1fae4b06a68e693eaf6"}, {"code": "into '()", "problem": 23, "user": "51e1c11fe4b06a68e693eafa"}, {"code": "(fn [x]\n  \t\t(\n          for [i (range (dec (count x))  -1 -1)]\n               (nth (seq x) i)\n          ) \n     )", "problem": 23, "user": "51e1c176e4b06a68e693eafb"}, {"code": "(fn my-rev [lst]\n  (if (empty? lst)\n    '()\n    (cons (last lst) (my-rev (butlast lst)))))", "problem": 23, "user": "51e0198ee4b01188f0627539"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "51e24a04e4b01e5198146430"}, {"code": "(fn [lst] \n\t( loop [l lst, acc '() ]\n    \t( \tif-not (empty? l)\n        \t(recur (rest l) (conj acc (first l) ))\n           \tacc\n        )   \n    )\n)", "problem": 23, "user": "51e23b80e4b01e519814642b"}, {"code": "(fn [s] (reduce #(cons %2 %1) '() s))", "problem": 23, "user": "51e2e080e4b0c611d6113e38"}, {"code": "#(reduce (fn [r l] (cons l r)) () %)", "problem": 23, "user": "51b66b31e4b02e5820733406"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "51ddcd9ae4b0de53e6370c49"}, {"code": "(fn [x] (reduce conj '() x))", "problem": 23, "user": "4fdce986e4b05e33b9224f74"}, {"code": "into ()", "problem": 23, "user": "51d59859e4b01da06753aa92"}, {"code": "#(let\n  [k (fn [y] (map (fn [x] (nth y x)) (sort > (range (count y)))))\n   g (fn [x] (apply vector x))]\n  (if (vector? %) (apply vector (k (g %))) (k (g %)))\n  )", "problem": 23, "user": "51e3cf8ee4b0efabf93c02a3"}, {"code": "(fn [x] (reduce conj () x))", "problem": 23, "user": "51e41f4be4b0efabf93c02ac"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "51dd6a7ce4b0c33a4e1da409"}, {"code": "(fn [xs]\n  (loop [s xs g ()]\n  (if (empty? s) g (recur (rest s) (cons (first s) g)))))", "problem": 23, "user": "5047eadde4b0ec70b3ef8d94"}, {"code": "reduce conj ()", "problem": 23, "user": "51e58e02e4b0efabf93c02d0"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "51e595a6e4b0efabf93c02d8"}, {"code": "#(reduce conj nil %)", "problem": 23, "user": "51e28063e4b08e53a149f0f2"}, {"code": "#(reduce (fn [xs x] (cons x xs)) nil %)", "problem": 23, "user": "51e61772e4b0efabf93c02e2"}, {"code": "(fn [seq] (reduce #(cons %2 %1) (empty seq) seq))", "problem": 23, "user": "51df825de4b01188f062752b"}, {"code": "reduce conj '()", "problem": 23, "user": "50cf21dee4b0e61f11ddcd8b"}, {"code": "#(loop [s [] i (- (count %1) 1)] (if (> i -1) (recur (conj s (nth (vec %1) i)) (dec i)) s))", "problem": 23, "user": "5022292ee4b0846bc458ae46"}, {"code": "reduce #(conj %1 %2) '()", "problem": 23, "user": "51ba8f82e4b0fe3ecfb46434"}, {"code": "reduce conj ()", "problem": 23, "user": "519c4111e4b0a1d87b003458"}, {"code": "#(into () %)", "problem": 23, "user": "51e86ba2e4b006d205356a4d"}, {"code": "(fn rev [arg]\n  (let [s (vec arg)]\n  (when (> (.size s) 0)\n    (conj (rev (pop s)) (peek s))\n    )\n  )\n  )", "problem": 23, "user": "51e786c9e4b0a3e081b8cbeb"}, {"code": "(fn [s]\n  (reduce conj '() s))", "problem": 23, "user": "51e85d2de4b048bc21b181ee"}, {"code": "#(into () %)", "problem": 23, "user": "51e89428e4b006d205356a51"}, {"code": "reduce conj '()", "problem": 23, "user": "504f90f5e4b0a02f9cffde99"}, {"code": "(fn [col] (loop [c col acc '()] (if (empty? c) acc (recur (rest c) (conj acc (first c))))))", "problem": 23, "user": "51c15fe9e4b0c9c82288294c"}, {"code": "#(reduce (fn [x y] (conj x y)) '() %)", "problem": 23, "user": "51e4c08fe4b0efabf93c02bf"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "51ea9e22e4b0f1f103a0d14d"}, {"code": "reduce conj '()", "problem": 23, "user": "51dc5033e4b09c47a74ce109"}, {"code": "(fn [s]\n  (loop [s s r []]\n    (if (empty? s)\n      r\n      (recur (next s) (cons (first s) r)))))", "problem": 23, "user": "51eb0374e4b0f1f103a0d156"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "51dc1202e4b09c47a74ce107"}, {"code": "(fn a ([x] (a x ()))\n      ([x l]\n        (if-not (empty? x) (recur (rest x) (conj l (first x))) \n                           l)))", "problem": 23, "user": "51eadb98e4b0f1f103a0d153"}, {"code": "(fn [s]\n  (into () s))", "problem": 23, "user": "51eb3aace4b0f1f103a0d159"}, {"code": "#(reduce (fn [x y] (conj x y)) '() %)", "problem": 23, "user": "51de3b42e4b0de53e6370c53"}, {"code": "apply conj '()", "problem": 23, "user": "51eca2ace4b069f463c22cd0"}, {"code": "#(into () %)", "problem": 23, "user": "51618519e4b009fba0926e35"}, {"code": "reduce (fn [m i] (conj m i)) ()", "problem": 23, "user": "51ec9114e4b069f463c22ccd"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "51d872dde4b0154f82ab930e"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "51ec0dd3e4b069f463c22cc7"}, {"code": "(fn a [l]\n    (let [temp\n          (fn aux [lst acum]\n            (if (empty? lst)\n              acum\n              (aux (rest lst) (cons (first lst) acum))\n              ))]\n      (temp l '())\n      )\n    )", "problem": 23, "user": "51e6a2bce4b0ab43cc26c21d"}, {"code": "reduce conj ()", "problem": 23, "user": "51eee2f1e4b0871fa145d991"}, {"code": "#(map last (sort-by first > (map-indexed vector %)))", "problem": 23, "user": "51e780dae4b0730ab87cf353"}, {"code": "(fn me [xs]\n  (if (= (next xs) nil)\n    xs\n\t(cons (last xs) (me (butlast xs)) )))", "problem": 23, "user": "51ef66a7e4b0871fa145d9a5"}, {"code": "into ()", "problem": 23, "user": "5029f263e4b023940c84aa45"}, {"code": "reduce #(cons %2 %1) []", "problem": 23, "user": "51efa6a6e4b0249c592fbde8"}, {"code": "(fn [coll]\n  (reduce conj '() coll))", "problem": 23, "user": "51e7abeae4b0a3e081b8cbee"}, {"code": "(fn this\n  ([lst] (this lst '()))\n  ([lst rev]\n   (if (empty? lst)\n     rev\n     (recur (rest lst) (conj rev (first lst))))))", "problem": 23, "user": "51eff50fe4b0249c592fbdf0"}, {"code": "(fn rev [coll] \n  (if (empty? coll)\n     coll\n    (concat  [(last coll)] (rev (butlast coll)))))", "problem": 23, "user": "51efd397e4b0249c592fbdeb"}, {"code": "(fn [mylist]\n  (\n   (fn [tail daeh]\n     (if (= '() tail)\n       daeh\n       (recur (rest tail) (conj daeh (first tail)))))\n   (lazy-seq mylist)\n   '()\n   ))", "problem": 23, "user": "51effd77e4b0249c592fbdf3"}, {"code": "#(apply (partial conj '()) %)", "problem": 23, "user": "51f00589e4b0249c592fbdfb"}, {"code": "(fn r [l] \n  (if (= l '()) \n    '() \n    (conj \n     (r (pop \n         (vec l))) \n     (last l)) ))", "problem": 23, "user": "51f01925e4b0249c592fbdfc"}, {"code": "#(vals\n  (zipmap \n   (range (count %) 0 -1) %))", "problem": 23, "user": "51ef48d0e4b0871fa145d9a4"}, {"code": "#(into () %)", "problem": 23, "user": "51f0a7ede4b0274c496158d8"}, {"code": "(fn foo[lst] (if (empty? lst) '() (concat (foo (rest lst) )(list(first lst)))))", "problem": 23, "user": "51eec1a6e4b0871fa145d98d"}, {"code": "(fn reverse_ [x]\n  (if (= x ())\n    ()\n    (concat (reverse_ (rest x)) (cons (first x) ()))))", "problem": 23, "user": "51f04e89e4b0274c496158cd"}, {"code": "#(into () %)", "problem": 23, "user": "51ed09b6e4b0bb507043158b"}, {"code": "(fn rev \n  ([v] \n    (if (empty? (rest v))\n      v\n      (concat (rev(rest v)) [(first v)]))\n  )\n)", "problem": 23, "user": "51efdbbee4b0249c592fbdec"}, {"code": "reduce conj ()", "problem": 23, "user": "51e8736ae4b006d205356a4f"}, {"code": "(fn [x]\n  (loop [accum '()\n         i 0]\n    (if (= i (count x))\n      accum\n      (recur (conj accum (first (drop i x)))\n             (inc i)))))", "problem": 23, "user": "51f27142e4b0210f90e74548"}, {"code": "#(into () %)", "problem": 23, "user": "51f2851fe4b0210f90e7454b"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "51f2ab8be4b0210f90e74554"}, {"code": "#(loop [v %\n        ret '()]\n   (if (empty? v)\n     ret\n     (recur (rest v) (conj ret (first v)))))", "problem": 23, "user": "51f28a64e4b0210f90e7454e"}, {"code": "#(into () %)", "problem": 23, "user": "51c11864e4b0c9c822882943"}, {"code": "(fn my-reverse \n  ([sec]\n     (my-reverse sec '()))\n  ([sec result]\n     (if (empty? sec)\n       result\n       (recur (rest  sec)\n              (cons (first sec) result)\n              ))))", "problem": 23, "user": "51f297a3e4b0210f90e74552"}, {"code": "(fn [coll] (reduce conj '() coll))", "problem": 23, "user": "51f42e66e4b0fca5e8b48230"}, {"code": "(fn rev\n  [s]\n  (when (seq s)\n    (cons (last s) (rev (butlast s)))))", "problem": 23, "user": "511b233ae4b07ab9ec456180"}, {"code": "(fn helper [lat]\n    (if (empty? lat)\n      []\n      (conj (helper (rest lat)) (first lat))))", "problem": 23, "user": "50aedb8ce4b0a40c9cfb08d4"}, {"code": "(fn [coll]\n  (loop [lst coll rlst '()]\n    (if (empty? lst)\n      rlst\n      (recur (rest lst) (conj rlst (first lst))))))", "problem": 23, "user": "51f40975e4b0fca5e8b4822e"}, {"code": "into ()", "problem": 23, "user": "51f55bdae4b0abb92f97f9d0"}, {"code": "(fn [s] \n  (loop [s s\n         r '()]\n    (if (empty? s)\n      r\n      (recur (rest s) (conj r (first s))))))", "problem": 23, "user": "51f583d2e4b0abb92f97f9d4"}, {"code": "(partial (fn [rs is] (if (empty? is) rs (recur (conj rs (first is)) (rest is)))) ())", "problem": 23, "user": "51f59607e4b0abb92f97f9d5"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "50ecf888e4b01236b1d49835"}, {"code": "#(reduce (fn [col el] (cons el col)) nil %1)", "problem": 23, "user": "51388e86e4b0a5db03d727d7"}, {"code": "#(loop [coll % \n         result []]\n    (if (empty? coll)\n      (into [] result)\n      (recur (rest coll) (cons (first coll) result))))", "problem": 23, "user": "5180af54e4b0e3fc13e244e9"}, {"code": "reduce (fn [lst n] (conj lst n)) (list)", "problem": 23, "user": "51f629dde4b06ff1c25c52ba"}, {"code": "#(loop [sq %\n           rv (list)]\n      (if (empty? sq)\n       rv\n      (recur (rest sq) (cons (first sq) rv))))", "problem": 23, "user": "51f13b80e4b06a20a2523f38"}, {"code": "into ()", "problem": 23, "user": "51a91ac2e4b08d8ec191b822"}, {"code": "(fn rev [x]\n  (if (not (empty? x))\n    (cons (last x) (rev (butlast x)))))", "problem": 23, "user": "51f75836e4b06ff1c25c52d6"}, {"code": "(fn myrev [x]\n  (if \n    (empty? x)\n    []\n    (conj\n     (myrev (rest x))\n     (first x)\n    )\n  )\n)", "problem": 23, "user": "51f687c2e4b06ff1c25c52cb"}, {"code": "reduce conj '()", "problem": 23, "user": "513bafa4e4b04402f587b77c"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "51f7f51ae4b06ff1c25c52df"}, {"code": "(fn rev [l] ((fn mov [from to] (if (empty? from) to (mov (rest from) (conj to (first from))))) l nil))", "problem": 23, "user": "51f7dd27e4b06ff1c25c52dc"}, {"code": "(fn \n  [coll]\n  (loop [xs (rest coll), x (first coll), retval '()]\n    (if (empty? xs)\n      (cons x retval)\n      (recur (rest xs) (first xs) (cons x retval)))))", "problem": 23, "user": "512c0f84e4b03a42b6300232"}, {"code": "(fn myrev [x] (if (empty? x) [] (conj (myrev (rest x)) (first x))))", "problem": 23, "user": "51f8f4d8e4b09be9c177e540"}, {"code": "(fn [coll] (reduce #(cons %2 %1) [] coll))", "problem": 23, "user": "518279abe4b0353c468deb65"}, {"code": "(fn [x]\n  (reduce conj () x))", "problem": 23, "user": "51f82769e4b09be9c177e527"}, {"code": "#(into () %)", "problem": 23, "user": "51f8397ce4b09be9c177e529"}, {"code": "into ()\n;reduce #(cons %2 %1) []", "problem": 23, "user": "5046ee3ee4b03b02161376b4"}, {"code": "(fn [var] (reduce (fn [v1 v2] (if (list? v1) (conj v1 v2) (conj (list v1) v2))) var))", "problem": 23, "user": "51f98843e4b09be9c177e54e"}, {"code": "(fn [%] (into () %))", "problem": 23, "user": "51a5c79ee4b051b01d55f450"}, {"code": "reduce conj ()", "problem": 23, "user": "51fa1375e4b0f1313d4689c9"}, {"code": "(fn [l] (vec (into '() l)))", "problem": 23, "user": "4f592f83e4b0030a34fb2ad2"}, {"code": "#(into () %)", "problem": 23, "user": "51fa852ee4b0f1313d4689dd"}, {"code": "(fn [l] (reduce conj '() l))", "problem": 23, "user": "51fa9425e4b0f1313d4689e3"}, {"code": "#(reduce (fn [x y] (conj x y)) '() %)", "problem": 23, "user": "51fa7154e4b0f1313d4689da"}, {"code": "#(into () %)", "problem": 23, "user": "51facf22e4b0f1313d4689f0"}, {"code": "(fn rev[coll]\n  (if (empty? coll)\n    coll\n    (conj (rev (butlast coll))\n          (last coll))))", "problem": 23, "user": "51ca9af6e4b08b1cbd0d948a"}, {"code": "#(loop [l % r '()] (if (empty? l)\n                   r\n                   (recur (rest l) (conj r (first l)))))", "problem": 23, "user": "51f9b1d0e4b09be9c177e550"}, {"code": "#(into () %)", "problem": 23, "user": "51fc9251e4b0f1313d468a27"}, {"code": "(fn [s] (loop [rev '() left s]\n          (if (> (count left) 0)\n            (recur (conj rev (first left)) (rest left))\n            rev)))", "problem": 23, "user": "51f8277be4b09be9c177e528"}, {"code": "(fn revv [x]\n  (if (seq x)\n    (cons\n     (last x)\n     (revv (butlast x)))\n    '()))", "problem": 23, "user": "51fc43e8e4b0f1313d468a1a"}, {"code": "#(into () %)", "problem": 23, "user": "51f7ce61e4b06ff1c25c52db"}, {"code": "(fn myrev [L]\n  (let [x (fn x [L R]\n    (if (= (rest L) '())\n      (cons (first L) R)\n      (x (rest L) (cons (first L) R))\n      )\n  )]\n  (x L [])))", "problem": 23, "user": "51f67858e4b06ff1c25c52c5"}, {"code": "#(loop [rev '() seq %] (if (empty? seq) rev (recur (conj rev (first seq)) (rest seq))))", "problem": 23, "user": "51fd7cdde4b0f1313d468a48"}, {"code": "reduce #(conj % %2) ()", "problem": 23, "user": "4fa3c137e4b081705acca193"}, {"code": "#(reduce (fn [acc e] (cons e acc)) '() %)", "problem": 23, "user": "51a2a376e4b00957e520db7f"}, {"code": "#(loop [col % result '()]\n   (if (empty? col)\n     result\n     (recur\n       (rest col)\n       (conj result (first col))\n     )\n   )\n )", "problem": 23, "user": "518e7d3be4b051adb72789f0"}, {"code": "(fn rev [x]\n   (let [y (vec x)]\n     (if (empty? y)\n       []\n       (conj (rev(rest y)) (first y))\n     )\n   )\n )", "problem": 23, "user": "51f630cee4b06ff1c25c52bd"}, {"code": "(fn [x] (into () x))", "problem": 23, "user": "51fdbf73e4b0f1313d468a51"}, {"code": "#(into () %)", "problem": 23, "user": "51c1b644e4b0d204dbe2ca12"}, {"code": "#(reduce (fn [x e] (cons e x)) '() %)", "problem": 23, "user": "51fefe8ae4b0f1313d468a7d"}, {"code": "#(into '() %)", "problem": 23, "user": "51fb4a9be4b0f1313d4689ff"}, {"code": "(fn [x]\n   (loop [n (list) l x] \n       (if (empty? l) \n         n\n        (recur (cons (first l) n) (rest l))\n       )\n   )\n )", "problem": 23, "user": "51ff6379e4b0f1313d468a98"}, {"code": "(fn [seq]\n  (letfn [(rev-rec [s res]\n                   (if (empty? s)\n                     res\n                     ;else\n                     (recur (rest s) (cons (first s) res))))]\n    (rev-rec seq (empty seq))))", "problem": 23, "user": "51fe9d7ce4b0f1313d468a70"}, {"code": "(fn rev\n  ([xs] \n   (rev xs nil))\n  ([xs ys]\n   (if (empty? xs) ys (recur (rest xs) (conj ys (first xs))))))", "problem": 23, "user": "5200054de4b023d2eb508ca7"}, {"code": "#(into () %)", "problem": 23, "user": "52000564e4b023d2eb508ca8"}, {"code": "#(reduce conj '() %1)", "problem": 23, "user": "50fc48dde4b0d10d794c19f6"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "51fbd873e4b0f1313d468a12"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "51e6786ae4b0ab43cc26c216"}, {"code": "reduce conj '()", "problem": 23, "user": "51db0d99e4b06aa4d4669a9d"}, {"code": "(fn rev[l] (if (empty? l) [] (conj (rev (rest l)) (first l))))", "problem": 23, "user": "52013494e4b0d7096e99ddb7"}, {"code": "(fn revc [xs] (if (empty? xs) [] (conj (revc (rest xs)) (first xs))))", "problem": 23, "user": "5200606be4b0b679c4e0e406"}, {"code": "reduce conj '()", "problem": 23, "user": "50c781bbe4b00bb60fe0c535"}, {"code": "(fn [lst]\n  ((fn [lst newlst]\n     (if (empty? lst)\n       newlst\n       (recur (rest lst) (cons (first lst) newlst))))\n   lst ()))", "problem": 23, "user": "5201d2f3e4b0b2e020a18f22"}, {"code": "(fn [s] \n  (loop [idx (dec (count s))\n         ret []]\n    (if (not (neg? idx))\n      (recur (dec idx) (conj ret (nth (vec s) idx)))\n      ret)))", "problem": 23, "user": "51944aaae4b0142f60b4aedc"}, {"code": "(partial into ())", "problem": 23, "user": "5201ff99e4b0b2e020a18f26"}, {"code": "reduce #(conj %1 %2) '()", "problem": 23, "user": "4f0b3c88535d0136e6c22301"}, {"code": "(fn [coll]\n  (reduce conj '() coll))", "problem": 23, "user": "5202cfe7e4b030ee0c5b2702"}, {"code": "#(into () %)", "problem": 23, "user": "5203621ee4b0fb7e47ea51f5"}, {"code": "#(loop [xs %, rs '()] \n  (if xs \n    (recur (next xs) (conj rs (first xs))) \n    rs\n  )\n )", "problem": 23, "user": "52011018e4b0d7096e99ddaf"}, {"code": "(fn my-reverse [sequ]\n  (reduce conj () sequ))", "problem": 23, "user": "5202c9b6e4b030ee0c5b2701"}, {"code": "(fn [s]\n  (loop [rv '() rs s]\n    (if-not rs\n      rv\n      (recur (conj rv (first rs)) (next rs)))))", "problem": 23, "user": "52039e12e4b0fb7e47ea51ff"}, {"code": "(fn [xs]\n  (let [A (fn [xs accum]\n    (if (empty? xs) \n      accum\n      (recur (rest xs) (cons (first xs) accum))))]\n  (A xs (empty xs))))", "problem": 23, "user": "5204173be4b0fb7e47ea5216"}, {"code": "reduce conj '()", "problem": 23, "user": "52016fd3e4b0b2e020a18f10"}, {"code": ";( defn xx [arr]\n;    ( let a '() )\n;    (cons (last arr) a)\n;     (drop arr )\n;  )\n\n(fn k [a] (if (empty? a) nil (cons (last a) (k (drop-last a)) ) ))", "problem": 23, "user": "515919fbe4b0394f658fe229"}, {"code": "#(reduce (fn [xs v] (cons v xs)) (empty %) %)", "problem": 23, "user": "513fab65e4b00f13ea1bd891"}, {"code": "reduce (fn [x y] (conj x y)) '()", "problem": 23, "user": "51f66e0ee4b06ff1c25c52c3"}, {"code": "(fn [coll] \n\t(loop [coll coll\n\t\t   rev '()]\n\t\t(if (seq coll)\n\t\t   (recur (rest coll) (cons (first coll) rev))\n\t\t    rev )))", "problem": 23, "user": "5203bc5be4b0fb7e47ea5205"}, {"code": "(fn [coll] \n\t(loop [coll coll\n           rev '()]\n    (if (empty? coll)\n      \trev\n    \t(recur (rest coll) (conj rev (first coll) ) ))  \n    )\n)", "problem": 23, "user": "5204f2b1e4b0bf4f1882c7f5"}, {"code": "#(reduce conj '() (seq %))", "problem": 23, "user": "51f805b0e4b06ff1c25c52e2"}, {"code": "#(loop [result (empty %) x %]\n   (if (empty? x)\n     result\n     (recur (cons (first x) result) (rest x))))", "problem": 23, "user": "5201cf92e4b0b2e020a18f21"}, {"code": "#(into () %)", "problem": 23, "user": "520612a7e4b0bf4f1882c81c"}, {"code": "#(into () %)", "problem": 23, "user": "4fc5dfabe4b0ee37620e1800"}, {"code": "#(reduce conj () %1)", "problem": 23, "user": "51eab308e4b0f1f103a0d150"}, {"code": "(fn [coll]\n  (loop [x [] y coll]\n  \t(if (seq y)\n      (recur (conj x (last y)) (butlast y))\n    x)))", "problem": 23, "user": "52069fade4b0bf4f1882c82c"}, {"code": "#(reduce (fn [x y] (conj x y)) '() %)", "problem": 23, "user": "520693e1e4b0bf4f1882c829"}, {"code": "(fn [x]   \n  (loop [x x acc (empty x)] \n    (if (empty? x) acc (recur (rest x) (cons (first x) acc)))\n  )\n)", "problem": 23, "user": "52069a3ae4b0bf4f1882c82b"}, {"code": "#(into '() %)", "problem": 23, "user": "52015698e4b0d7096e99ddba"}, {"code": "#(replace (vec %) (into () (range (count %))))", "problem": 23, "user": "52029e5de4b030ee0c5b26fc"}, {"code": "reduce conj '()", "problem": 23, "user": "52077e37e4b03bd50ef5466c"}, {"code": "(fn [xs]\n  (loop [acc '()\n         xs xs]\n    (if (empty? xs) (vec acc)\n      (recur (conj acc (first xs)) (rest xs)))))", "problem": 23, "user": "5203bc27e4b0fb7e47ea5204"}, {"code": "#(reduce \n   (fn [x y] (conj x y))\n   (conj (apply list %) '())\n )", "problem": 23, "user": "520797ebe4b03bd50ef5466d"}, {"code": "#(into '() %)", "problem": 23, "user": "5208495ce4b0c1501ba9e6da"}, {"code": "(fn [x] (into '() x))", "problem": 23, "user": "51dd2ccfe4b0c33a4e1da400"}, {"code": "(fn me [lst]  (if (empty? lst)   '()  (concat (me (rest lst)) [(first lst)])))", "problem": 23, "user": "52091d57e4b0e152394d76f0"}, {"code": "(fn [s]\n  (loop [s s acc '()]\n    (if (first s)\n      (recur (rest s) (cons (first s) acc))\n      acc)))", "problem": 23, "user": "52090654e4b0e152394d76ee"}, {"code": "(fn [seqs] (loop [stuff seqs result '()] (if (empty? stuff) result (recur (rest stuff) (conj result (first stuff))))))", "problem": 23, "user": "51ecb0fee4b0bb5070431583"}, {"code": "(fn my-reverse [seq]\n  (if (= 1 (count seq))\n    seq\n    (cons (last seq) (my-reverse (drop-last seq)))))", "problem": 23, "user": "52033e2ce4b030ee0c5b2716"}, {"code": "(fn [coll] (reduce conj '() coll))", "problem": 23, "user": "5209cb44e4b0e152394d7702"}, {"code": "#(reduce conj %1 %2) '()", "problem": 23, "user": "520332f7e4b030ee0c5b2714"}, {"code": "#(into () %)", "problem": 23, "user": "520a6ce2e4b01da9d47a99da"}, {"code": "#((fn [new_list, old_list] (if (empty? old_list)\n                           \t new_list\n                             (recur (conj new_list (first old_list)) (rest old_list))\n                          )\n) '() %)", "problem": 23, "user": "51f6af4fe4b06ff1c25c52ce"}, {"code": "(fn [x] (into () x))", "problem": 23, "user": "52016690e4b0b2e020a18f0f"}, {"code": "#(reduce (fn[p x] (concat [x] p)) [] %)", "problem": 23, "user": "520aaac2e4b01da9d47a99e6"}, {"code": "reduce (fn[nums n] (conj nums n)) '()", "problem": 23, "user": "5205410de4b0bf4f1882c7ff"}, {"code": "(fn [s] (into '() s))", "problem": 23, "user": "5080a697e4b01a93d3f38e49"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "52002fc6e4b0b679c4e0e3fe"}, {"code": "#(into '() %)", "problem": 23, "user": "52084f75e4b01ce6bbf31dde"}, {"code": "(fn [coll] \n  (reduce #(conj % %2) \n          () coll))", "problem": 23, "user": "51f0ade4e4b0274c496158d9"}, {"code": "#(into '() %)", "problem": 23, "user": "520b55e2e4b0b022ef140c82"}, {"code": "#(reduce (fn [x y] (conj x y)) '() %)", "problem": 23, "user": "5200ffc6e4b0d7096e99ddac"}, {"code": "#(into [] (reduce conj '() %))", "problem": 23, "user": "520b4b95e4b0b022ef140c80"}, {"code": "(fn [x] (loop [[y z] [x []]]\n          (if (not y) z (recur [(next y) (cons (first y) z)]))\n          )\n  )", "problem": 23, "user": "5186448fe4b0da5a5be3bac9"}, {"code": "#(into () %)", "problem": 23, "user": "51fc44c5e4b0f1313d468a1b"}, {"code": "#(into () %)", "problem": 23, "user": "520cc6b6e4b0b022ef140c9c"}, {"code": "#(reduce conj '() %1)", "problem": 23, "user": "520c5b9ee4b0b022ef140c94"}, {"code": "(fn lasty [x] (if (= [] x) nil (cons (last x) (lasty (drop-last x)))))", "problem": 23, "user": "5024d54fe4b07ca75732c81f"}, {"code": "into '()", "problem": 23, "user": "4fa176c7e4b0dcca54ed6d5e"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "520e32a2e4b066f3ea161c93"}, {"code": "#(into () %)", "problem": 23, "user": "51a3738ce4b0e77c4ca60bf0"}, {"code": "(fn [sequence] (loop [sequence sequence reversed []]\n                 (if (= (count sequence) 0)\n                   reversed\n                   (recur (drop-last sequence) (conj reversed (last sequence))))))", "problem": 23, "user": "520f46f9e4b0101e4be6fcee"}, {"code": "into ()", "problem": 23, "user": "5208a3a2e4b0301979a6c235"}, {"code": "(fn [s]\n  (loop [x s result []]\n\t    (if (empty? x)\n\t\tresult\n\t      (recur (take (- (count x) 1) x) (concat result (list (last x)))))))", "problem": 23, "user": "520ed237e4b0101e4be6fcd9"}, {"code": "#(into () %)", "problem": 23, "user": "52108d97e4b080a8d9b9d63d"}, {"code": "(fn [x](into () x))", "problem": 23, "user": "5184df3ee4b02826a645f39b"}, {"code": "( fn rev [l]\n  (if (> (count l) 1)\n  (concat (list (last l)) (rev (butlast l)))\n  l )\n  )", "problem": 23, "user": "5210e5c5e4b080a8d9b9d63f"}, {"code": "into '()", "problem": 23, "user": "520b67b5e4b0b022ef140c83"}, {"code": "#(into () %)", "problem": 23, "user": "521139aee4b07aea8afc4f6b"}, {"code": "reduce #(cons %2 %1) []", "problem": 23, "user": "5191ac45e4b0d428d29dc1b6"}, {"code": "(fn [l] (reduce #(cons %2 %) [] l))", "problem": 23, "user": "4e8b5cb8535d65386fec211b"}, {"code": "(fn diego\n  ([x]\n   (diego x (empty x)))\n\n   ([x c]\n    (if (= (count x) 0)\n      c\n      (diego (rest x) (cons (first x) c)))))", "problem": 23, "user": "5212a062e4b0d32679a50641"}, {"code": "(fn diego\n  ([x]\n   (diego x (empty x)))\n\n\n\n\n   ([x c]\n    (if (= (count x) 0)\n      c\n      (diego (rest x) (cons (first x) c)))))", "problem": 23, "user": "520ea61ae4b0101e4be6fcd7"}, {"code": "(fn rev\n    ([l]\n       (rev (rest l) (list (first l))))\n    ([l c]\n       (if (empty? l)\n         c\n         (recur (rest l) (conj c (first l))))))", "problem": 23, "user": "51fa90aae4b0f1313d4689e0"}, {"code": "reduce conj ()", "problem": 23, "user": "5211d195e4b07aea8afc4f76"}, {"code": "(fn reverse4 [items]\n    (if (seq items)\n        (conj (reverse4 (rest items)) (first items))\n        []))", "problem": 23, "user": "52104003e4b080a8d9b9d637"}, {"code": "sort #(if (= (count (flatten %)) 0) (> % %2) (> (first %) (first %2)))", "problem": 23, "user": "520c9489e4b0b022ef140c98"}, {"code": "#(into () %)", "problem": 23, "user": "52129363e4b0d32679a50640"}, {"code": "(fn [x]\n(loop [x x reversed []]\n\t(if (empty? x) reversed\n\t(recur (rest x) (cons (first x) reversed)))))", "problem": 23, "user": "521368ece4b0d32679a50659"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "50bcb8b4e4b0594b91591c61"}, {"code": "#(into () %)", "problem": 23, "user": "5213caeee4b0a98dd8fc4bd5"}, {"code": "#(reduce (fn [r s] (conj r s)) '() %)", "problem": 23, "user": "5213dbc3e4b0961f15ac4d74"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "52117ea7e4b07aea8afc4f70"}, {"code": "(fn [xs]\n  ((fn f-impl [ys rs]\n     (if (nil? ys)\n     rs\n     (f-impl (next ys) (cons (first ys) rs))))\n   xs []))", "problem": 23, "user": "521392bce4b0d32679a5065e"}, {"code": "(fn foo [l]\n  (if (empty? l)\n    []\n    (conj (foo (rest l)) (first l))\n  ))", "problem": 23, "user": "5213ffd3e4b0961f15ac4d7d"}, {"code": "into ()", "problem": 23, "user": "520cb8c4e4b0b022ef140c9a"}, {"code": ";#(if-not (vector? %)(vec (into '() %))(into '() %))\n\n#(into () %)", "problem": 23, "user": "511179a2e4b03f43822243d0"}, {"code": "#(into () %)", "problem": 23, "user": "521268e0e4b06aa6d1666ba4"}, {"code": "apply (partial conj ())", "problem": 23, "user": "5201572be4b0d7096e99ddbb"}, {"code": "(fn [lst] \n  (for [x (range (count lst))]\n    (first (drop (- (count lst) x 1) lst))\n    ))", "problem": 23, "user": "50d5c19ce4b0159555a1fc61"}, {"code": "#(into () %)", "problem": 23, "user": "5208b687e4b0e152394d76e8"}, {"code": "reduce (fn [a b] (cons b a)) '()", "problem": 23, "user": "4faf97d8e4b081705acca258"}, {"code": "(fn rev\n  ([L] (rev L '()))\n  ([L A] (cond (empty? L) A\n               :else (rev (rest L)(conj A (first L))))))", "problem": 23, "user": "52153bdde4b0961f15ac4daa"}, {"code": "(fn rev [xs]\n  (loop [s xs, res ()]\n    (if (seq s)\n      (recur (rest s) (cons (first s) res))\n      res)))", "problem": 23, "user": "5213c2ece4b0a98dd8fc4bd0"}, {"code": "#(into () %)", "problem": 23, "user": "52154ec6e4b02f6d8ea676c2"}, {"code": "(fn rev [seq]\n  (if (= seq '())\n    '()\n    (concat (rev (rest seq)) (list (first seq)))))", "problem": 23, "user": "52158e69e4b0bf4bffd29c9f"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "5152f82ee4b03f948212e718"}, {"code": "(fn [input] (reduce #(conj % %2) `() input))", "problem": 23, "user": "52154514e4b02f6d8ea676c0"}, {"code": "(fn myRev [xs] (cons (last xs)\n                     (if (= 1 (count xs)) () (myRev (drop-last xs)))))", "problem": 23, "user": "52161db6e4b0bf4bffd29cb8"}, {"code": "into ()", "problem": 23, "user": "51f9527fe4b09be9c177e549"}, {"code": "#(into () %)", "problem": 23, "user": "51e649bee4b0ab43cc26c214"}, {"code": "into ()", "problem": 23, "user": "52105865e4b080a8d9b9d639"}, {"code": "#(into '() %)", "problem": 23, "user": "5151c184e4b03e678e393add"}, {"code": "reduce #(cons %2 %) ()", "problem": 23, "user": "520242bae4b030ee0c5b26e3"}, {"code": "into '()", "problem": 23, "user": "52173464e4b082aa80a88c75"}, {"code": "(fn [coll] (reduce conj '() coll))", "problem": 23, "user": "51e924d2e4b0f1f103a0d13a"}, {"code": "reduce (fn [x y] (concat [y] x)) []", "problem": 23, "user": "5216933be4b000d124d989cf"}, {"code": "#(into () %)", "problem": 23, "user": "52177320e4b0c07b8faad36a"}, {"code": "(fn [s]\n  (reduce (fn [v1 v2] (cons v2 v1)) (empty s) s))", "problem": 23, "user": "52138d11e4b0d32679a5065c"}, {"code": "#(into () %)", "problem": 23, "user": "4fe8a39ee4b07c9f6fd12c60"}, {"code": "(fn rev [x] (if (empty? x) [] (conj (rev (rest x)) (first x))))", "problem": 23, "user": "52166e50e4b0bf4bffd29cc6"}, {"code": "(fn rev [coll] \n  (if (empty? coll)\n    coll\n    (concat\n      (rev (rest coll))\n      (list (first coll)))))", "problem": 23, "user": "52151220e4b0961f15ac4da7"}, {"code": "(fn [sqnc]\n  (loop [lista (seq sqnc)\n         rev-lista '()]\n    (if (not (not-empty lista))\n      rev-lista\n      (recur (rest lista) (cons (first lista) rev-lista)))))", "problem": 23, "user": "5213348ae4b0d32679a50652"}, {"code": "reduce #(cons %2 %1) []", "problem": 23, "user": "521249f5e4b06aa6d1666ba2"}, {"code": "reduce #(cons %2 %) ()", "problem": 23, "user": "521672bde4b0bf4bffd29cc8"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "52160dbee4b0bf4bffd29cb3"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "5210ac52e4b080a8d9b9d63e"}, {"code": "(partial reduce #(conj % %2) '())", "problem": 23, "user": "521679e9e4b0bf4bffd29cca"}, {"code": "(fn [xs] (reduce (fn [x y] (conj x y)) '() xs))", "problem": 23, "user": "521247b0e4b06aa6d1666ba1"}, {"code": "#(into () %)", "problem": 23, "user": "52196842e4b0890f2f822bfa"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "5219e575e4b0c4ef0be82ffd"}, {"code": "(fn rec [ls] (if (empty? ls) '() (concat (rec (rest ls)) (list (first ls)))))", "problem": 23, "user": "521a4ff5e4b0c4ef0be83004"}, {"code": "reduce conj ()", "problem": 23, "user": "5216569de4b0bf4bffd29cc3"}, {"code": "(fn [s]\n  (loop [acc [] xs s]\n    (if (empty? xs) acc (recur (cons (first xs) acc) (rest xs)))))", "problem": 23, "user": "52199105e4b0c4ef0be82ff9"}, {"code": "(fn [s]\n  (loop [result '()\n         others s]\n    (if (seq others)\n      (recur (cons (first others) result)\n             (rest others))\n      result)))", "problem": 23, "user": "521af852e4b0c4ef0be8301c"}, {"code": "#(map second (sort-by first > (map-indexed vector %)))", "problem": 23, "user": "51a058dae4b0b292b01ee3f3"}, {"code": "(fn rev-coll [coll]\n  (loop [accum '() \n         remaining coll]\n    (if (empty? remaining)\n      accum\n      (recur (conj accum (first remaining)) (next remaining)))))", "problem": 23, "user": "5213cd45e4b0a98dd8fc4bd6"}, {"code": "(fn my-reverse [s]\n  (if (next s)\n    (concat (my-reverse  (rest s)) (list (first s)))\n    s))", "problem": 23, "user": "521bf7cfe4b0c4ef0be83066"}, {"code": "(fn rev\n  [s]\n  (if (empty? s)\n    []\n    (cons (last s) (rev (drop-last s)))))", "problem": 23, "user": "521b339fe4b0c4ef0be83031"}, {"code": "(fn [xs] (reduce #(concat [%2] %1) [] xs))", "problem": 23, "user": "521c6a1ae4b0c4ef0be83083"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "5213d7aae4b0961f15ac4d72"}, {"code": "(fn [x] (if (coll? (first x)) (sort-by first > x) (sort-by - x)))", "problem": 23, "user": "521c1db4e4b0c4ef0be83074"}, {"code": "(partial reduce conj '())", "problem": 23, "user": "521763fce4b082aa80a88c82"}, {"code": "into ()", "problem": 23, "user": "521dceeae4b050d5da042802"}, {"code": "#(reduce conj () % )", "problem": 23, "user": "51f79238e4b06ff1c25c52d7"}, {"code": "(fn [s] (reduce conj () s))", "problem": 23, "user": "5092425ee4b09a7d0b586de4"}, {"code": "(fn r [s]\n  (if (empty? s)\n    []\n    (conj (r (rest s)) (first s))))", "problem": 23, "user": "521b9f92e4b0c4ef0be8304c"}, {"code": "#(reduce (fn [a b] (concat b a)) (map vector %))", "problem": 23, "user": "521e8227e4b0dd19981ad082"}, {"code": "(fn reverse-seq [xs]\n  ((fn reverse-seq1 [xs acc]\n    (if (empty? xs) acc\n      (recur (rest xs) (cons (first xs) acc)))) xs (empty xs)))", "problem": 23, "user": "521e0b80e4b0dd19981ad069"}, {"code": "(fn c [li] (if (empty? li) nil (conj (vec (c (rest li))) (first li))))", "problem": 23, "user": "521f0106e4b0e6c71e0c0bc4"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "521ed5b4e4b0e6c71e0c0bc0"}, {"code": "(fn [x]\n\t(loop [x x\n           acc (empty x)]\n      (if (empty? x)\n        acc\n        (recur (rest x) (cons (first x) acc)))))", "problem": 23, "user": "5220bc0fe4b0e6a83c8925a7"}, {"code": "#(for [x (range (dec (count %)) -1 -1)] (nth (seq %) x))", "problem": 23, "user": "510ee996e4b07438aa321462"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "5220dbb7e4b0e6a83c8925b3"}, {"code": "(fn junk [lst]\n  (if (empty? lst)\n    '()\n    (let [current (first lst)]\n      (concat (junk (rest lst)) [current]))))", "problem": 23, "user": "5220a770e4b0e6a83c8925a3"}, {"code": "(fn rev [n]\n  (if (= 0 (count n))\n    []\n    (conj (rev (rest n)) (first n))))", "problem": 23, "user": "51c20b14e4b0d204dbe2ca1b"}, {"code": "#(into '() %)", "problem": 23, "user": "52101fcde4b080a8d9b9d635"}, {"code": "(fn [x]\n  (loop [z x\n         nx '()]\n    (if-not z nx\n      (recur (next z) (cons (first z) nx)))))", "problem": 23, "user": "51b74a33e4b0d906fcd71d34"}, {"code": "(fn [s] ((fn willsrev [s r] (if (= s '()) r (willsrev (rest s) (conj r (first s))))) s '()))", "problem": 23, "user": "5221c0cae4b0e6a83c8925e1"}, {"code": "(fn [b] (sort-by (fn [a] (if (coll? a) (first a) a)) > b))", "problem": 23, "user": "52213426e4b0e6a83c8925c4"}, {"code": "#(reduce (fn[m v] (conj m v)) '() %)", "problem": 23, "user": "5220d1b6e4b0e6a83c8925ad"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "52187540e4b0a4bccb16cad8"}, {"code": "into '()", "problem": 23, "user": "5222000ce4b0e6a83c8925ea"}, {"code": "#(reduce (fn [x y] (conj x y)) '() %)", "problem": 23, "user": "52221b07e4b0e6a83c8925ef"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "51787832e4b03d69594194d3"}, {"code": "#(map (fn [n] (last (take (+ 1 n) %))) (map (fn [x] (- (- (count %) 1) x)) (range (count %) ) ) )", "problem": 23, "user": "5220ef05e4b0e6a83c8925b8"}, {"code": "reduce #(concat [%2] %1) []", "problem": 23, "user": "52229374e4b0e6a83c892600"}, {"code": "(fn rev [x]\n  ((fn ngolla [a b]\n     (if (empty? a)\n       b\n       (ngolla (rest a) (cons (first a) b))))\n   x (seq [])))", "problem": 23, "user": "522048b3e4b0e6c71e0c0c16"}, {"code": "#(into () %)", "problem": 23, "user": "52161028e4b0bf4bffd29cb4"}, {"code": "(fn xreverse [xs] (reduce #(cons %2 %1) '() xs))", "problem": 23, "user": "52244a77e4b01819a2de42d1"}, {"code": "(fn rev [x]\n  (cond (seq x) (cons (last x) (rev (butlast x)))\n  :else nil))", "problem": 23, "user": "522452a4e4b01819a2de42d2"}, {"code": "#(reduce (fn [acc x] (cons x acc)) '() %)", "problem": 23, "user": "5224a46ce4b01819a2de42e5"}, {"code": "(fn r[s]\n  (if (nil? s) s\n    (cons (last s) (r (butlast s)))))", "problem": 23, "user": "52247d56e4b01819a2de42db"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "52225315e4b0e6a83c8925f9"}, {"code": "(fn [s]\n  (loop [target s\n       \tresult []]\n \t (if (seq target)\n      \t(recur (drop-last target)\n        \t(into result  (vector (last target))))\n  \tresult)))", "problem": 23, "user": "51508905e4b098b221effc2d"}, {"code": "reduce conj ()", "problem": 23, "user": "522454f4e4b01819a2de42d3"}, {"code": ";; 1st solution\n\n;;(fn [c]\n;;  (loop [original c\n;;         n        (count original)\n;;         new \t  []]\n;;    (if-not (first original)\n;;      new\n;;      (recur (take (- n 1) original) (- n 1) (conj new (last original))))))\n\n;; better solution, from http://yyhh.org/blog/2011/05/my-solutions-first-50-problems-4clojure-com\n\n#(into '() %)", "problem": 23, "user": "52251473e4b01819a2de42f7"}, {"code": "(fn my-reverse [xs]\n  ((fn my-reverse-acc [xs acc]\n    (if (seq xs)\n      (recur (rest xs) (cons (first xs) acc))\n      acc\n    )\n  ) xs ())\n)", "problem": 23, "user": "4fb710f4e4b081705acca2cd"}, {"code": "#(into () %)", "problem": 23, "user": "522404d8e4b01819a2de42c0"}, {"code": "reduce #(conj %1 %2) '()", "problem": 23, "user": "52229bbbe4b0e6a83c892602"}, {"code": "#(into () %)", "problem": 23, "user": "5225eae3e4b0f4c7e20d29c4"}, {"code": "(fn rvrs [rev coll]\n  (if (empty? coll)\n    rev\n    (rvrs (conj rev (last coll)) (butlast coll)))) []", "problem": 23, "user": "5225a0f5e4b01819a2de430e"}, {"code": "#(into () %)", "problem": 23, "user": "5225f6abe4b0f4c7e20d29c6"}, {"code": "reduce conj '()", "problem": 23, "user": "522600cfe4b0f4c7e20d29c8"}, {"code": "#(reduce conj () %1)", "problem": 23, "user": "5167e4a2e4b0c5a4140a3099"}, {"code": "(fn [coll] (into () coll))", "problem": 23, "user": "5225666be4b01819a2de4300"}, {"code": "#(map (partial nth (vec %)) (range (dec (count %)) -1 -1))", "problem": 23, "user": "52253004e4b01819a2de42fa"}, {"code": "#(into '() %)", "problem": 23, "user": "5226ab21e4b04e78ff2e198a"}, {"code": "(fn [x]\n  (loop[out_seqs [] seqs x]\n    (if(empty? seqs)\n      out_seqs\n      (recur (cons (first seqs) out_seqs)(rest seqs)))))", "problem": 23, "user": "521dad9be4b050d5da0427f9"}, {"code": "#(apply conj '() %)", "problem": 23, "user": "5226f2a1e4b04e78ff2e1999"}, {"code": "(fn revl [l]\n  (if (> (count l) 1)\n    (cons (last l) (revl (drop-last l)))\n    l))", "problem": 23, "user": "522654f0e4b04e78ff2e197f"}, {"code": "#(into () %)", "problem": 23, "user": "5226ef37e4b04e78ff2e1997"}, {"code": "reduce conj '()", "problem": 23, "user": "51843616e4b02826a645f398"}, {"code": "#(into '() %)", "problem": 23, "user": "52277ab9e4b0186687e23a4f"}, {"code": "reduce #(conj %1 %2) '()\n\n#_(fn [xs]\n  (loop [x xs\n         r nil]\n  (if (empty? x)\n    r\n    (recur (rest x)\n           (cons (first x) \n                 r)))))", "problem": 23, "user": "51e5a627e4b0efabf93c02db"}, {"code": "(partial (fn der [ new old ]\n           (if (empty? old)\n             new\n             (der (concat (list (first old)) new) (rest old))))\n\t'())", "problem": 23, "user": "52286b19e4b0186687e23a7e"}, {"code": "#(into () %)", "problem": 23, "user": "51eee71ae4b0871fa145d992"}, {"code": "reduce (fn [a b] (conj a b)) '()", "problem": 23, "user": "5228457ee4b0186687e23a76"}, {"code": "(fn  [c]\n   ((fn bla [s c]\n      (if (seq c)\n        (bla \n         (concat (list (first c)) s )\n         (rest c)\n         )  \n        s\n        ) \n      ) '() c)\n   )", "problem": 23, "user": "522724bde4b04e78ff2e19aa"}, {"code": "#(reduce (fn [acc x] (conj acc x)) '() %1)", "problem": 23, "user": "51ef31dfe4b0871fa145d9a0"}, {"code": "(fn [s]\n  (reduce conj '() s))", "problem": 23, "user": "52295917e4b04c906c9c6a6f"}, {"code": "(fn [data]\n  (reduce conj '() data))", "problem": 23, "user": "5229f4a3e4b0590a43906cea"}, {"code": "(fn [s]\n  (reduce (fn [mem e] (cons e mem)) [] s))", "problem": 23, "user": "5207d70ae4b03bd50ef54675"}, {"code": "(fn rev [l]\n  (if (= (count l) 1) \n    [(first l)]\n    (concat (rev (rest l)) [(first l)])\n  )\n)", "problem": 23, "user": "522a1248e4b0590a43906cf3"}, {"code": "(fn f [x] (if (seq x) (cons (first (take-last 1 x)) (f (take (- (count x) 1) x)) ) x))", "problem": 23, "user": "5149c2f1e4b0829bd132edb0"}, {"code": "#(reduce (fn [a b] (cons b a)) [] %)", "problem": 23, "user": "52211978e4b0e6a83c8925bf"}, {"code": "(fn r [l]\n  (if (= l nil)\n    '()\n    (cons (last l) (r (butlast l)))))", "problem": 23, "user": "4fe49706e4b0e8f79898feb7"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "522b922ee4b0d34ee08e71c3"}, {"code": "#(loop [\n        reversed '()\n        collection %]\n   (if (= nil collection)\n     reversed\n     (recur\n      (conj reversed (first collection))\n      (next collection))))", "problem": 23, "user": "52271a85e4b04e78ff2e19a7"}, {"code": "(fn [x]\n  (loop [r nil l x]\n    (if (not (seq l))\n      r\n      (recur (conj r (first l)) (rest l)))))", "problem": 23, "user": "51857e64e4b0da5a5be3babe"}, {"code": "(fn my-reverse [coll] (if\n             (empty? coll)\n             []\n             (concat (my-reverse (rest coll)) [(first coll)])))", "problem": 23, "user": "522d0360e4b0806774ddfef7"}, {"code": "(fn myrev [r x] \n  (if (empty? x) \n    r \n\t(myrev (conj r (last x)) (butlast x))\n  )\n) \n[]", "problem": 23, "user": "522d3a16e4b0e26240291d50"}, {"code": "(fn [list]\n  (reduce (fn [v x]\n            (cons x v))\n          '()\n          list))", "problem": 23, "user": "5228b015e4b0186687e23a8a"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "5224cf82e4b01819a2de42ef"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "522dd30ee4b0a102974208c3"}, {"code": "#(into () %)", "problem": 23, "user": "52215fe1e4b0e6a83c8925cf"}, {"code": "(fn my-reverse [x]\n  (if (= x '())\n    '()\n    (let [head (take (dec (count x)) x)]\n      (cons (last x) (my-reverse head) )\n      )\n    )\n  )", "problem": 23, "user": "52127ee4e4b0d32679a5063c"}, {"code": "#(into () %)", "problem": 23, "user": "5227eacee4b0186687e23a5e"}, {"code": "(fn [in] (into () in))", "problem": 23, "user": "522e6c01e4b01cdb292c5f01"}, {"code": "#(reduce (fn [x y] (cons y x)) [] %)", "problem": 23, "user": "522eb5cce4b01cdb292c5f0c"}, {"code": "#(reduce conj nil %)", "problem": 23, "user": "52271988e4b04e78ff2e19a6"}, {"code": "(fn [x]\n (reduce conj () x) \n)", "problem": 23, "user": "522ef7a2e4b01e6a0e6e5daf"}, {"code": "(fn [n & s] \n  (if (empty? n)\n               (vec s)\n               (recur (rest n) (cons (first n) s))))", "problem": 23, "user": "51aefceee4b09397d5109797"}, {"code": "#(reduce (fn [x y] (conj x y)) '() %)", "problem": 23, "user": "52292ce9e4b04c906c9c6a67"}, {"code": "#(reduce (fn [x y] (conj x y)) '() %)", "problem": 23, "user": "522f988be4b032bbe3424168"}, {"code": "(fn r [s]\n  (if (= s '())\n    '[]\n    (conj (r (rest s)) (first s))))", "problem": 23, "user": "522fdff7e4b032bbe342416c"}, {"code": "reduce conj '()", "problem": 23, "user": "52308649e4b0035e815da387"}, {"code": "#(into '() %)", "problem": 23, "user": "523089f8e4b0035e815da388"}, {"code": "(fn rev\n  [coll]\n    (reduce conj () coll))", "problem": 23, "user": "5230d490e4b0035e815da396"}, {"code": "#(reduce (fn [f x] (into [x] f)) [] %)", "problem": 23, "user": "5230d9bde4b0035e815da397"}, {"code": "(fn [coll] \n   (loop [result () c coll] \n        (if (nil? c)\n         result\n         (recur (conj result (first c)) (next c)))))", "problem": 23, "user": "522eba30e4b01cdb292c5f0e"}, {"code": "#(loop [out [] in (vec %)] (if (empty? in) out (recur (concat   [(first in)] out ) (rest in))))", "problem": 23, "user": "5229211be4b04c906c9c6a63"}, {"code": "(fn rev-seq [lat]\n  (into '() lat))", "problem": 23, "user": "522e8451e4b01cdb292c5f06"}, {"code": "#(loop [so-far '() remaining %]\n        (if (empty? remaining)\n          so-far\n          (recur (conj so-far (first remaining))\n                 (rest remaining))))", "problem": 23, "user": "522e4baae4b01cdb292c5f00"}, {"code": "(fn my-reverse\n  ([s] (my-reverse s nil))\n  ([s acc] (if (empty? s) acc (my-reverse (rest s) (conj acc (first s)))))\n)", "problem": 23, "user": "508fd6bae4b0ea685a20f76b"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "5230ba23e4b0035e815da393"}, {"code": "(fn rev [s] (if (empty? s)\n              []\n              (conj \n               (rev (rest s))\n               (first s))))", "problem": 23, "user": "5231c38fe4b0e2e8de81d1f8"}, {"code": "(fn [input]\n  (reduce conj\n          ()\n          input))", "problem": 23, "user": "5232d104e4b035af41902a96"}, {"code": "(fn[x]\n   (loop [result ()\n          current x]\n     (if (empty? current)\n       result\n       (recur (concat (list (first current)) result) (rest current)))))", "problem": 23, "user": "506c0a02e4b0eda3100c090d"}, {"code": "(fn [x] (reduce conj '() x))", "problem": 23, "user": "5231d8fae4b0e2e8de81d1fb"}, {"code": "#(apply conj () %)", "problem": 23, "user": "5228f870e4b0186687e23a98"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "5232d047e4b035af41902a95"}, {"code": "#(into '() %)", "problem": 23, "user": "523353a7e4b0f0b72fabf402"}, {"code": "(fn rev [s] (if (empty? s) nil (cons (last s) (rev (butlast s)))))", "problem": 23, "user": "510fe537e4b04c71fce993dd"}, {"code": "into ()", "problem": 23, "user": "52335d7ce4b0f0b72fabf404"}, {"code": "(fn ! [l]\n  (if (empty? l) [] \n    (conj (! (rest l)) (first l))))", "problem": 23, "user": "523361d8e4b0f0b72fabf405"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "52318843e4b0e2e8de81d1e8"}, {"code": "#(let [rev (reduce (fn [acc elem] (cons elem acc )) '() %)]\n  (if (sorted? %) \n     rev   \n     (into (empty %) rev)))", "problem": 23, "user": "521f24ebe4b0e6c71e0c0bcd"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "50467ee2e4b011c5dfee7723"}, {"code": "#(into () %)", "problem": 23, "user": "522ff96de4b032bbe3424174"}, {"code": "#(loop [init-list %\n        final-list []]\n  (if (empty? init-list)\n    final-list\n    (recur (butlast init-list) (conj final-list (last init-list)))))", "problem": 23, "user": "523288fee4b035af41902a88"}, {"code": "(fn reverse-recur\n  [coll]\n  (if (first coll)\n    (conj (reverse-recur (next coll)) (first coll))\n    []))", "problem": 23, "user": "52352370e4b05e80434a5061"}, {"code": "#(loop [x % res []]\n  (if (empty? x)\n    res\n    (recur (butlast x) (conj res (last x)))))", "problem": 23, "user": "5233ad08e4b07e3ee2be83ac"}, {"code": "#(reduce (fn[x y] (conj x y)) (list (first %)) (rest %))", "problem": 23, "user": "5220909fe4b0e6a83c89259f"}, {"code": "(fn [s]\n  (reduce (fn [a b] (cons b a)) [] s))", "problem": 23, "user": "5235493ee4b05e80434a5064"}, {"code": "#(into () %)", "problem": 23, "user": "5234f716e4b05e80434a505f"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "5235a902e4b0a643f2dcb750"}, {"code": "#(into () %)", "problem": 23, "user": "5224e784e4b01819a2de42f1"}, {"code": "#(into () %)", "problem": 23, "user": "52361d84e4b05f3be1c7c8e5"}, {"code": "(fn rs [s]\n    (reduce conj '() s)\n  )", "problem": 23, "user": "522080fde4b0e6a83c89259e"}, {"code": "reduce #(cons %2 %) []", "problem": 23, "user": "523605d1e4b05f3be1c7c8e2"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "520f2265e4b0101e4be6fce7"}, {"code": "(fn t [x] (if (= '() x) [] (conj (t (rest x)) (first x))))", "problem": 23, "user": "52372124e4b05487ba91d624"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "52379c46e4b0fae3832e99db"}, {"code": "(fn [coll]\n  (let [len (count coll)]\n    (for [x (range 0 len)]\n          (nth (seq coll) (- (- len 1) x)))))", "problem": 23, "user": "513953f1e4b0a5db03d727e2"}, {"code": "into ()", "problem": 23, "user": "52373f36e4b0477af6280328"}, {"code": "(fn rev [coll]                                                                       \n   (if (empty? coll)                                                                  \n     []                                                                               \n     (conj (rev (rest coll)) (first coll))))", "problem": 23, "user": "516282c3e4b0e6d3c4734711"}, {"code": "(partial into ())", "problem": 23, "user": "516abecae4b081287f204e9f"}, {"code": "reduce #(conj %1 %2) ()", "problem": 23, "user": "52381b2ae4b0fae3832e99ef"}, {"code": "#(into () %)", "problem": 23, "user": "52386881e4b0fae3832e9a00"}, {"code": "#(reduce (fn [acc i] (conj acc i)) () %)", "problem": 23, "user": "522a01ade4b0590a43906ced"}, {"code": "(fn \n  [l]\n  (let [c (count l)\n        c_m1 (- c 1)\n        zm (zipmap  (range c) l)\n        rl (range c_m1 -1 -1)]\n    (println \"c_m1 = \" c_m1)\n    (println \"zm = \" zm)\n    (println \"range = \" rl)\n    \n    (map #(get zm %) rl)\n    )\n)", "problem": 23, "user": "522f2724e4b01e6a0e6e5db5"}, {"code": "reduce conj '()", "problem": 23, "user": "51cd75d6e4b02254fc79488c"}, {"code": "(fn test1 [l1] \n\t(if (empty? l1)\n\t\t()\n\t\t(cons (last l1) (test1 (drop-last l1)))\n\t)\n)", "problem": 23, "user": "52382d91e4b0fae3832e99f0"}, {"code": "(fn rr [c]\n  (if (empty? c)\n    []\n    (conj (rr (rest c)) (first c))))", "problem": 23, "user": "52387f46e4b0fae3832e9a07"}, {"code": "(fn [n] (\n         loop [ n n\n                acc (empty n)]\n         (if (empty? n)\n         \tacc\n         \t(recur (rest n) (cons (first n) acc)))))", "problem": 23, "user": "52394c03e4b0d705d026ef09"}, {"code": "#(into () %)", "problem": 23, "user": "52393e16e4b0d705d026ef06"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "52271ffee4b04e78ff2e19a9"}, {"code": "reduce conj ()", "problem": 23, "user": "52385d2ce4b0fae3832e99fe"}, {"code": "reduce conj ()", "problem": 23, "user": "5239ac85e4b0d705d026ef1d"}, {"code": "(fn rev \n  ([left taken] \n   (if (= left '()) taken (rev (rest left) (cons (first left) taken))   \n  )) \n  ([left] (rev left '()))\n)", "problem": 23, "user": "5239caa6e4b0d705d026ef27"}, {"code": "#(reduce (fn [v c] (cons c v)) [] %)", "problem": 23, "user": "5213d81de4b0961f15ac4d73"}, {"code": "#(into '() %)", "problem": 23, "user": "5230793be4b0035e815da383"}, {"code": "reduce conj '()", "problem": 23, "user": "523a2a30e4b081681ca7adb8"}, {"code": "reduce conj '()", "problem": 23, "user": "523a657be4b081681ca7adc1"}, {"code": "#(apply conj () %)", "problem": 23, "user": "523a9fc9e4b081681ca7adca"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "523ab749e4b0aa37f082ed8d"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "523b1a65e4b02f719975bdbd"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "523b10dfe4b02f719975bdb8"}, {"code": "reduce #(conj %1 %2) '()", "problem": 23, "user": "523b4e91e4b07becd5be21ef"}, {"code": "(fn [s]\n         (loop [seq s new '()]\n               (if (empty? seq)\n                   new\n                 (recur (rest seq) (conj new (first seq))))))", "problem": 23, "user": "5238ca2de4b0d705d026eef6"}, {"code": "reduce conj ()", "problem": 23, "user": "51f83e17e4b09be9c177e52a"}, {"code": "#(reduce (fn [seqc x] (cons x seqc)) [] %)", "problem": 23, "user": "523b1988e4b02f719975bdbc"}, {"code": "(fn get-last\n  ([ls] (get-last ls ()))\n  ([ls acc] \n   (let [acc (cons (first ls) acc)]\n\t(if (next ls) \n      (recur (next ls) acc)\n      acc))))", "problem": 23, "user": "523b82efe4b07becd5be21f0"}, {"code": "(fn [coll]\n  (let [s (seq coll)]\n    (for [i (range (dec (count s)) -1 -1)]\n      (nth s i))))", "problem": 23, "user": "5236b6bce4b05f3be1c7c8fe"}, {"code": "(fn [sq]\n  (let [rsq (reduce conj '() sq)]\n    (if (vector? sq)\n      (into (empty sq) rsq)\n      rsq)))", "problem": 23, "user": "523bd9c0e4b07becd5be2201"}, {"code": "(fn rev [l] (if (empty? l) [] (conj (rev (rest l)) (first l))))", "problem": 23, "user": "523c61b2e4b07becd5be2220"}, {"code": "(fn [x] (loop [s x d '[]] (if (empty? s) d (recur (drop 1 s) (cons (first s) d)))))", "problem": 23, "user": "523bc0e6e4b07becd5be21f9"}, {"code": "(fn my-reverse [s] (if (empty? s) s (concat (my-reverse (rest s)) (take 1 s))))", "problem": 23, "user": "523c819ee4b07becd5be222a"}, {"code": "(fn foo [x] (when (> (count x) 0) (conj (foo (butlast x)) (last x))))", "problem": 23, "user": "522f39a8e4b032bbe3424159"}, {"code": "#(loop [res (lazy-seq) stilldo %] (if (not-empty stilldo) (recur (cons (first stilldo) res) (rest stilldo)) res))", "problem": 23, "user": "4fec550de4b0681fd128dca6"}, {"code": "reduce #(concat [%2] %) '()", "problem": 23, "user": "523cd3dde4b07645915a4783"}, {"code": "(fn ex-rev [xs]\n  (loop [lst xs acc nil]\n    (if (empty? lst)\n      acc\n      (recur (rest lst) (cons (first lst) acc)))))", "problem": 23, "user": "523c6451e4b07becd5be2222"}, {"code": "(fn f[l]\n  (if (nil? l)\n    l\n    (cons (last l) (f (butlast l)))\n  )\n)", "problem": 23, "user": "51f09f3de4b0274c496158d7"}, {"code": "(fn [s]\n  (loop [s' s r '()]\n    (if (empty? s')\n      r\n      (recur (rest s') (conj r (first s'))))))", "problem": 23, "user": "5201ada5e4b0b2e020a18f14"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "4f43894ee4b0d7d3c9f3fd21"}, {"code": "(fn [x]\n  (loop [accum []\n         lst   x]\n    (if (empty? lst)\n      accum\n      (recur (conj accum (last lst)) (butlast lst)))))", "problem": 23, "user": "523da205e4b06956f8342c95"}, {"code": "(fn [l] (loop [curr l acc '()] (if (empty? curr) acc (recur (rest curr) (conj acc (first curr))))))", "problem": 23, "user": "523dd963e4b06956f8342ca1"}, {"code": "reduce conj ()", "problem": 23, "user": "523d02b0e4b0dbf0c3017289"}, {"code": "(fn [sequ]\n  (loop [s sequ acc (empty sequ)]\n    (if (empty? s) \n      acc\n      (recur (drop-last s)\n             (concat acc (list (last s)))))))", "problem": 23, "user": "523de50de4b06956f8342ca9"}, {"code": "reduce conj '()", "problem": 23, "user": "5235e15be4b0a643f2dcb756"}, {"code": "#(reduce (fn [r c] (conj r c)) '() %1)", "problem": 23, "user": "52319066e4b0e2e8de81d1e9"}, {"code": "into ()", "problem": 23, "user": "523f0bbfe4b01c266ffa7f91"}, {"code": "#(into () %)", "problem": 23, "user": "523e9cd5e4b057c4b7cd0a61"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "523de33de4b06956f8342ca8"}, {"code": "#(reduce (fn [x y] (cons y x)) (empty %1) %1)", "problem": 23, "user": "50aa60bee4b056ee01935865"}, {"code": "#(reduce (fn [lst el] (conj lst el)) '() %)", "problem": 23, "user": "52401a65e4b0ad64fa010306"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "524025bce4b0ad64fa01030f"}, {"code": "(fn [s]\r\n  ((fn [a b]\r\n    (if-let [rest (next a)]\r\n      (recur rest (into [(first a)] b))\r\n      (into [(first a)] b))) \r\n  s []))", "problem": 23, "user": "51128c6fe4b0350614f07a79"}, {"code": "(fn [seq]\n  (reduce conj '() seq))", "problem": 23, "user": "511e763ce4b03e81d390ac29"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "5240e8ebe4b0ad64fa010349"}, {"code": "(fn [c] (reduce conj () c))", "problem": 23, "user": "5241069ce4b076e5d3121ee1"}, {"code": "reduce #(cons %2 %1) ()", "problem": 23, "user": "522f483ce4b032bbe342415a"}, {"code": "into ()", "problem": 23, "user": "4e0e6736535d04ed9115e7bb"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "5240512ee4b0ad64fa010319"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "5239aab3e4b0d705d026ef1c"}, {"code": "reduce (fn[x y] (cons y x))  []", "problem": 23, "user": "52419ee6e4b076e5d3121f22"}, {"code": "reduce (fn [x y] (conj x y)) ()", "problem": 23, "user": "5241cd76e4b076e5d3121f32"}, {"code": "(fn revit [x] (if (empty? x) '() (list* (last x) (revit (drop-last x)))))", "problem": 23, "user": "5241fe85e4b076e5d3121f42"}, {"code": "reduce #(conj % %2) '()", "problem": 23, "user": "523bde95e4b07becd5be2202"}, {"code": "reduce conj '()", "problem": 23, "user": "523ed522e4b057c4b7cd0a78"}, {"code": "(fn [col] \n  \n   (reduce (fn [l elm]\n            (into [elm] l)) \n          [] col)\n  )", "problem": 23, "user": "518d1b5be4b070277754617b"}, {"code": "(fn r [coll]\n  (loop [rev [] coll coll]\n    (if (= (count coll) 0)\n      rev\n      (recur (conj rev (last coll)) (butlast coll)))))", "problem": 23, "user": "5242150ee4b076e5d3121f4a"}, {"code": "(partial reduce conj '())", "problem": 23, "user": "52437703e4b076204b44fabf"}, {"code": "(fn [x] (reduce conj () x) )", "problem": 23, "user": "5242d5c3e4b076204b44fa95"}, {"code": "reduce (fn [nc, el] (conj nc el)) '()", "problem": 23, "user": "5243d9a2e4b076204b44fadf"}, {"code": "(fn myreverse ([args] (myreverse args '()))\n              ([args revargs] (if (= '() args) revargs (myreverse (rest args) (conj revargs (first args))))))", "problem": 23, "user": "524469dee4b0d8acf9ed6a9d"}, {"code": "#(into () %)", "problem": 23, "user": "52435d0ce4b076204b44fab5"}, {"code": "#(into () %)", "problem": 23, "user": "52446511e4b0d8acf9ed6a9a"}, {"code": "#(loop [s % rev (empty s)]\n   (if (empty? s)\n     rev\n     (recur (rest s) (cons (first s) rev))))", "problem": 23, "user": "5244ca26e4b0d8acf9ed6abe"}, {"code": "#(loop [L % result '()]\n     (if (= nil (first L))\n       result\n       (recur (next L) (conj result (first L)))))", "problem": 23, "user": "52454e2be4b08ba2393080e9"}, {"code": "#(into '() %)", "problem": 23, "user": "52457395e4b08ba239308106"}, {"code": "reduce conj ()", "problem": 23, "user": "5245af03e4b08ba239308124"}, {"code": "(fn ! [x] (if (= 1 (count x)) x (cons (last x) (! (butlast x)))))", "problem": 23, "user": "5217c26fe4b0a4bccb16cab8"}, {"code": "(fn rev [s]\n  (if (next s)\n    (concat (rev (rest s)) [(first s)])\n    s))", "problem": 23, "user": "5245e25ae4b09dbe66b56176"}, {"code": "#(reduce (fn [r v] (into [v] r)) [] %)", "problem": 23, "user": "5245fbbbe4b09dbe66b56183"}, {"code": "(fn ! [x]\n   (cond (= 0 (count x)) nil :else (cons (last x) (! (butlast x)))))", "problem": 23, "user": "523eb110e4b057c4b7cd0a67"}, {"code": "(fn [input-l]\n(loop [n [] l input-l]\n  (if (zero? (count l))\n    n\n    (recur (conj n (last l)) (drop-last l) )\n  )\n)\n\n)", "problem": 23, "user": "5242e1dae4b076204b44fa96"}, {"code": "(fn [x]\n  (into () x)\n)", "problem": 23, "user": "5246adcde4b09dbe66b561dc"}, {"code": "(fn [coll] (letfn [(helper [acc c] (if (empty? c) acc  (helper (cons (first c) acc) (rest c))))] (helper '() coll)))", "problem": 23, "user": "51cfc616e4b0e42293a22578"}, {"code": "reduce (fn [acc x] (cons x acc)) []", "problem": 23, "user": "524717a9e4b05ef8e38e6352"}, {"code": "#(into () %)", "problem": 23, "user": "52471ac0e4b05ef8e38e6354"}, {"code": "(fn rev [coll]\n  (lazy-seq (when coll (cons (last coll) (rev (butlast coll))))))", "problem": 23, "user": "51269362e4b083bb8f88cf09"}, {"code": "(fn cool [list]  (if (> (count list) 0) (cons (last list) (cool(drop-last list)))))", "problem": 23, "user": "5245d29ae4b09dbe66b56174"}, {"code": "#(\n  (fn rev [src, dest]\n    (if \n      (= (first src) nil)\n      dest\n      (rev \n       (rest src) \n       (conj dest (first src))\n      )\n     )\n    )\n  % '()\n)", "problem": 23, "user": "52463059e4b09dbe66b56198"}, {"code": "reduce conj '()", "problem": 23, "user": "5151d173e4b03e678e393adf"}, {"code": "(fn [coll] (into '() coll))", "problem": 23, "user": "52475451e4b05ef8e38e6362"}, {"code": "(fn [coll]\n  (reduce conj () coll))", "problem": 23, "user": "52479487e4b05ef8e38e6373"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "51b0e7b3e4b0c53cf2e68a6e"}, {"code": "into '()", "problem": 23, "user": "5246e945e4b0644eb7b0783b"}, {"code": "(fn [c] (reduce #(cons %2 %1) () c))", "problem": 23, "user": "52474de3e4b05ef8e38e6360"}, {"code": "reduce #(cons %2 %1) []", "problem": 23, "user": "52278a79e4b0186687e23a51"}, {"code": "(fn [xs]\n  (reduce conj () xs))", "problem": 23, "user": "52487654e4b05ef8e38e63dc"}, {"code": "reduce conj ()", "problem": 23, "user": "52485723e4b05ef8e38e63d2"}, {"code": "#(into () %)", "problem": 23, "user": "52488a46e4b05ef8e38e63e0"}, {"code": "(fn [coll] (reduce conj '() coll))", "problem": 23, "user": "50007353e4b0678c553fc40a"}, {"code": "into '()", "problem": 23, "user": "524903e7e4b05ef8e38e640d"}, {"code": "(fn [s]\n  (loop [sq s rev '()]\n    (if (first sq)\n        (recur (rest sq) (conj rev (first sq)))\n        (vec rev))))", "problem": 23, "user": "523ea111e4b057c4b7cd0a65"}, {"code": "#(into '() %)", "problem": 23, "user": "52481875e4b05ef8e38e63c3"}, {"code": "(fn [x] (into () x))", "problem": 23, "user": "520a9897e4b01da9d47a99e1"}, {"code": "#(loop [accum []\n         xs %1]\n         (if (empty? xs)\n           accum\n           (recur (cons (first xs)\n                        accum)\n                  (rest xs))))", "problem": 23, "user": "5248c4c7e4b05ef8e38e63e8"}, {"code": "(fn [l]\n  (letfn [(helper [l accum]\n                  (if (seq l)\n                    (recur (rest l) (cons (first l) accum))\n                    accum))]\n    (helper l nil)))", "problem": 23, "user": "4ea03f70535d7eef308072a1"}, {"code": "(fn my-rev [xs]\n  (let [nxs (count xs)]\n    (cond (= 0 nxs) []\n          (= 1 nxs) xs\n          (= 2 nxs) [(last xs) (first xs)]\n          :else (cons (last xs)\n                      (my-rev (take (- nxs 1) xs))))))", "problem": 23, "user": "512e31e9e4b0b740abc59823"}, {"code": "(fn[col]\n   (reduce #(conj %1 %2) (list) col)\n)", "problem": 23, "user": "50550f43e4b0b1b9d1860eb7"}, {"code": "(fn rev [x] \n  (if (empty? x) \n    []\n    (conj (rev (rest x)) (first x) )\n    )\n  )", "problem": 23, "user": "524ac536e4b09eba1c0223a1"}, {"code": "into '()", "problem": 23, "user": "524ad140e4b09eba1c0223a9"}, {"code": "(fn [param] ((fn kianna [lista result] (if (empty? lista) (if (vector? param) (vec result) result) (kianna (rest lista) (conj result (first lista))))) param '()))", "problem": 23, "user": "52474ec2e4b05ef8e38e6361"}, {"code": "(fn [ls]\n  (reduce (fn [so-far val] (cons val so-far)) '() ls))", "problem": 23, "user": "511d4a52e4b022853b0e07a1"}, {"code": "(fn [lista] (loop [temp lista, nueva []] (if (empty? temp) nueva (recur (rest temp)(cons (first temp) nueva)))))", "problem": 23, "user": "524b1a95e4b09eba1c0223c2"}, {"code": "(fn [acc coll] (if coll\n                 (recur (conj acc (first coll)) \n                               (next coll))\n                 acc)) '()", "problem": 23, "user": "524ae8e6e4b09eba1c0223b5"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "524af042e4b09eba1c0223ba"}, {"code": "#(loop [xs %1, r []]\n   (if (empty? xs)\n     r\n     (recur (drop-last xs) (conj r (last xs)))))", "problem": 23, "user": "51f66891e4b06ff1c25c52c1"}, {"code": "(fn rev [s2 s1]\n                  (if (empty? s1)\n                    s2\n                    (rev  (conj s2 ( last s1)) (butlast s1)))) []", "problem": 23, "user": "524a74b3e4b05ef8e38e64a7"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "523327fce4b0f0b72fabf3fc"}, {"code": "reduce conj ()", "problem": 23, "user": "524a3003e4b05ef8e38e6496"}, {"code": "reduce (fn [a b] (conj a b)) '()", "problem": 23, "user": "524be8e0e4b09eba1c0223f1"}, {"code": "reduce conj '()", "problem": 23, "user": "524b98aee4b09eba1c0223e3"}, {"code": "#(into () %)", "problem": 23, "user": "524bf665e4b09eba1c0223f2"}, {"code": "(fn fun1 [x] \n\t(\n   if (> (count x) 0)\n\t\t(conj (fun1 (take (- (count x) 1) x)) (last x))\n\t))", "problem": 23, "user": "52132f8de4b0d32679a50651"}, {"code": "(fn [input] \n  (loop [x input, reversed-list []] \n    (if (seq x) \n      (recur (rest x) (concat (take 1 x) reversed-list)) \n      reversed-list\n      )))", "problem": 23, "user": "5245f167e4b09dbe66b5617e"}, {"code": "(fn [seq]\n  (loop [seq seq acc '()]\n    (if (empty? seq)\n      acc\n      (recur (rest seq) (cons (first seq) acc)))))", "problem": 23, "user": "524cdd51e4b0752c4cb68ccc"}, {"code": "#(reduce (fn [rev x] (conj rev x)) '() %)", "problem": 23, "user": "524cd06ae4b0752c4cb68cca"}, {"code": "reduce (fn [r x] (conj r x)) '()", "problem": 23, "user": "524b90fae4b09eba1c0223df"}, {"code": "(fn [x] (reduce conj '() x))", "problem": 23, "user": "52452225e4b0d8acf9ed6ae6"}, {"code": "(fn self [x]\n  (if (= (count x) 0) \n    [] \n    (conj (self (rest x)) (first x))))", "problem": 23, "user": "524da3a5e4b0a16e35cf6df3"}, {"code": "#(into () %)", "problem": 23, "user": "524d90c0e4b0a16e35cf6ded"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "524d91eae4b0a16e35cf6dee"}, {"code": "#(into () %)", "problem": 23, "user": "524c72dce4b09eba1c022407"}, {"code": "#(into () %)", "problem": 23, "user": "524dd1c3e4b0f245900d275c"}, {"code": "(fn rev [xs] ( if (empty? xs)\n                  nil\n                  (cons (last xs) (rev (butlast xs)))))", "problem": 23, "user": "524740e7e4b05ef8e38e635d"}, {"code": "#(into()%)", "problem": 23, "user": "524e6db3e4b0541d1855b7dc"}, {"code": "#(reduce\n\t(fn [l x] (cons x l))\n\t[]\n\t%)", "problem": 23, "user": "524e79c1e4b0541d1855b7e0"}, {"code": "into '()", "problem": 23, "user": "524da51ee4b0a16e35cf6df4"}, {"code": "(fn myFunc [x]\n  (if (= (rest x) ())\n    x\n    (conj (myFunc (butlast x)) (last x))\n   )\n  \n )", "problem": 23, "user": "524ed632e4b0541d1855b7f2"}, {"code": "#(into () %)", "problem": 23, "user": "5244380fe4b076204b44fb12"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4e78c2ba535db95036265723"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "524e5e74e4b0541d1855b7d8"}, {"code": "(fn my-reverse [seq] (if (empty? seq) '() (concat (my-reverse (rest seq)) [(first seq)] )))", "problem": 23, "user": "524eebb0e4b0541d1855b7f7"}, {"code": "(fn [coll]\n    (loop [[h & t] (into (vector) coll)\n        result []]\n    (if h\n      (recur t (cons h result))\n    result)))", "problem": 23, "user": "4f171e7d535d64f603146452"}, {"code": "(fn [x] (reduce (fn [out b] (cons b out) ) [] x))", "problem": 23, "user": "524feb3fe4b0541d1855b81f"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "524f61bee4b0541d1855b80f"}, {"code": "#(sort (fn[x y](+ 1 0)) %)", "problem": 23, "user": "52500c9ae4b0541d1855b825"}, {"code": "(fn [l] (let [ax (fn aux [acc subl] (if (nil? (first subl)) acc (aux (cons (first subl) acc) (rest subl))))] (ax [] l)))", "problem": 23, "user": "51c99769e4b07ef393169e79"}, {"code": "(fn rev [l]\n  (if (empty? (rest l))\n    [(first l)]\n    (conj (rev (rest l)) (first l))\n  )\n)", "problem": 23, "user": "5250af8be4b0541d1855b83c"}, {"code": "#(into () %)", "problem": 23, "user": "5250b7a5e4b0541d1855b83e"}, {"code": "reduce #(conj % %2) ()", "problem": 23, "user": "525078b6e4b0541d1855b832"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "501bf2cee4b08e00484756a6"}, {"code": "#(into () %)", "problem": 23, "user": "5250a13ee4b0541d1855b839"}, {"code": "#( into () %)", "problem": 23, "user": "5250777fe4b0541d1855b82e"}, {"code": "(fn [xs] (loop [sum '() xs xs] (if (empty? xs) sum (recur (conj sum (first xs)) (rest xs)))))", "problem": 23, "user": "523e12bde4b09833704079a2"}, {"code": "#(into () %)", "problem": 23, "user": "5250a9abe4b0541d1855b83b"}, {"code": "#(vals (apply sorted-map (interleave (iterate dec 0) %)))", "problem": 23, "user": "52525a0ee4b0541d1855b8a2"}, {"code": "reduce #(conj %1 %2) '()", "problem": 23, "user": "524f3e6de4b0541d1855b805"}, {"code": "(fn [list]\n  (loop [coll (into () list) newcoll (vector)]\n    (if (or (nil? coll) (empty? coll))\n      newcoll\n      (recur (next coll) (conj newcoll (first coll))))))", "problem": 23, "user": "524e9918e4b0541d1855b7e6"}, {"code": "(fn r [coll]\n  (into '() coll))", "problem": 23, "user": "5252ee94e4b0541d1855b8db"}, {"code": "#(loop [v % r []]\n        (if-not (empty? v)\n          (recur (rest v) (concat [(first v)] r))\n           r\n          )\n        )", "problem": 23, "user": "524fafb3e4b0541d1855b817"}, {"code": "(fn [x]\n  ((fn [x rev]\n    (if (empty? x)\n      rev\n      (recur (rest x) (conj rev (first x)))))\n   x ()))", "problem": 23, "user": "52526161e4b0541d1855b8a6"}, {"code": "(fn [x]\n  (loop [col x rev ()]\n    (if (empty? col)\n      (into [] rev)\n      (recur (rest col) (conj rev (first col))))))", "problem": 23, "user": "5252ed18e4b0541d1855b8d9"}, {"code": "(fn foo [x] (if (empty? x) [] (conj (foo (rest x)) (first x) )))", "problem": 23, "user": "525372ade4b0541d1855b8f3"}, {"code": "#(loop [coll %1, acc ()]\n    (if (empty? coll)\n      acc\n      (recur (rest coll) (cons (first coll) acc))))", "problem": 23, "user": "51d8f711e4b02ceefd947748"}, {"code": "reduce #(cons %2 %1) []", "problem": 23, "user": "52537b67e4b0541d1855b8f9"}, {"code": "reduce conj ()", "problem": 23, "user": "5253b4c9e4b0541d1855b926"}, {"code": "#(into () %)", "problem": 23, "user": "4fb0bd28e4b081705acca26b"}, {"code": "#(into () %)", "problem": 23, "user": "52527192e4b0541d1855b8af"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "525431dfe4b0541d1855b970"}, {"code": "#(into '() %)", "problem": 23, "user": "52530b4be4b0541d1855b8e4"}, {"code": "reduce #(cons %2 %) []", "problem": 23, "user": "5252b59de4b0541d1855b8cf"}, {"code": "(fn[x] (reduce (fn[x y] (cons y x)) [] x))", "problem": 23, "user": "525493bbe4b0541d1855b991"}, {"code": "(fn [x] (into '() x))", "problem": 23, "user": "5224060de4b01819a2de42c3"}, {"code": "#(reduce (fn [a b] (cons b a)) [] %)", "problem": 23, "user": "5251b11be4b0541d1855b87b"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "515b03fee4b0a102a3e5262a"}, {"code": "(fn [x] ( into () x))", "problem": 23, "user": "5254f908e4b0541d1855b9ba"}, {"code": "reduce conj ()", "problem": 23, "user": "524e6b68e4b0541d1855b7db"}, {"code": "(fn pakita [list]\n  (cond \n   (empty? list) nil\n   :else (concat (pakita (rest list)) [(first list)])\n   )\n)", "problem": 23, "user": "5252cbe7e4b0541d1855b8d2"}, {"code": "(fn [s]\n  (loop [s s\n         new-s '()]\n    (if (first s)\n      (recur (rest s) (conj new-s (first s)))\n      new-s)))", "problem": 23, "user": "5256cd77e4b0541d1855ba39"}, {"code": "(fn rev [x]\n  (if (empty? x)\n    []\n    (conj (rev (rest x)) (first x))))", "problem": 23, "user": "504ece87e4b069badc5a33ce"}, {"code": "(fn [n] (into '() n))", "problem": 23, "user": "4ef7a483535dced4c769f258"}, {"code": "#(into () %)", "problem": 23, "user": "524ab5f2e4b09eba1c02239d"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "524fafdfe4b0541d1855b818"}, {"code": "reduce #(conj %1 %2) ()", "problem": 23, "user": "5256627ce4b0541d1855ba1a"}, {"code": "(fn rev [x] (if (= x '()) '() (concat (rev (rest x)) [(first x)])))", "problem": 23, "user": "52586d24e4b0cb4875a45cb0"}, {"code": "into ()", "problem": 23, "user": "50aca92ee4b071b89ef26232"}, {"code": "#(into () %)", "problem": 23, "user": "52562597e4b0541d1855ba0b"}, {"code": "#(into () %)", "problem": 23, "user": "525947f1e4b0cb4875a45cd8"}, {"code": "(fn trololo [x] ( if (= x []) []  (conj (trololo (rest x)) (first x)) ))", "problem": 23, "user": "52599ea5e4b0cb4875a45cdf"}, {"code": "(fn [s] (loop [mys s, result '()] (if (empty? mys) result (recur (rest mys) (conj result (first mys))))))", "problem": 23, "user": "524c7fcfe4b0752c4cb68cbd"}, {"code": "#(into () %)", "problem": 23, "user": "5259c698e4b0cb4875a45ce4"}, {"code": "reduce #(cons %2 (if (seq? %1) %1 (list %1)))", "problem": 23, "user": "525a7b9fe4b0cb4875a45cf5"}, {"code": "#(into () %)", "problem": 23, "user": "52565fcfe4b0541d1855ba19"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "5234870ee4b05e80434a505c"}, {"code": "(fn recursive-reverse [coll]\n    (reduce conj '() coll))", "problem": 23, "user": "525aa499e4b0cb4875a45cf7"}, {"code": "(fn [s] (->> \n          (iterate butlast s)\n          (take (count s))\n          (map last)\n          ))", "problem": 23, "user": "5259a16ee4b0cb4875a45ce1"}, {"code": "(fn mreverse [theList] \n  (cond (= nil theList) nil\n        :else (cons (last theList) \n                    (mreverse (butlast theList)))))", "problem": 23, "user": "525a8875e4b0cb4875a45cf6"}, {"code": "(fn reverse2[lst] (if (empty? lst)\n            lst\n            (cons (last lst) (reverse2 (butlast lst)))))", "problem": 23, "user": "525b12b1e4b0cb4875a45d04"}, {"code": "(fn [coll] (reduce (fn [a b] (cons b a)) [] coll))", "problem": 23, "user": "5244fa73e4b0d8acf9ed6acb"}, {"code": "#(reduce (fn [xs x] (cons x xs)) [] %) ;no flip....", "problem": 23, "user": "525b1e15e4b0cb4875a45d08"}, {"code": "(fn [s] (reduce conj () s))", "problem": 23, "user": "517d03dee4b0f5e87c18f25d"}, {"code": "#(into '() %)", "problem": 23, "user": "5236cd89e4b0e010857b4e45"}, {"code": "(fn foo [x] (reduce conj () x))", "problem": 23, "user": "525bcae9e4b0cb4875a45d30"}, {"code": "sort (comp - compare)", "problem": 23, "user": "525b0b51e4b0cb4875a45d01"}, {"code": "(fn my-rev [xs]\n( loop [  x xs y [] ]\n( if (empty? x) y\n( recur (butlast x) (conj y (last x)) )\n)\n)\n)", "problem": 23, "user": "5225b16de4b0d2f5d1e2c0ed"}, {"code": "(fn [s] (into () s))", "problem": 23, "user": "525cc6c4e4b0cb4875a45d47"}, {"code": "(fn reverse2 [coll] (reduce conj () coll))", "problem": 23, "user": "525cd5bee4b0cb4875a45d4b"}, {"code": "(fn [s1]\n\t(reduce\n    \t(fn [x y]\n        \t(concat [y] x\n            )\n        )\n    \t[] s1\n    )\n)", "problem": 23, "user": "525ba7bbe4b0cb4875a45d28"}, {"code": "reduce conj ()", "problem": 23, "user": "525d44e8e4b0cb4875a45d6e"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "525636dfe4b0541d1855ba0d"}, {"code": "(fn my-reverse \n  ([my-seq reversed-seq] \n    (if (empty? my-seq) \n      reversed-seq  \n      (my-reverse (next my-seq) (cons (first my-seq) reversed-seq)) ))\n  ([seq] (my-reverse seq #{}))\n  )", "problem": 23, "user": "525d44bfe4b0cb4875a45d6d"}, {"code": "(fn [x] (apply conj '() x))", "problem": 23, "user": "525d95b1e4b0cb4875a45d81"}, {"code": "(fn [coll]\n  (loop [coll coll new []]\n    (if (empty? coll)\n      new\n      (recur (butlast coll) (conj new (last coll))))))", "problem": 23, "user": "5252f8ede4b0541d1855b8e0"}, {"code": "(fn r [x] \n  (if (empty? x)\n    '()\n    (concat (r (rest x)) (list (first x) ))))", "problem": 23, "user": "525cc137e4b0cb4875a45d46"}, {"code": "#(reduce (fn [xs x] (conj xs x)) '() %)", "problem": 23, "user": "52517132e4b0541d1855b874"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "5164c2e5e4b003cf19fdde41"}, {"code": "into (list)", "problem": 23, "user": "525ca6a7e4b0cb4875a45d42"}, {"code": "(fn [s] (loop [s s acc ()] (if (empty? s) acc (recur (rest s) (cons (first s) acc)))))", "problem": 23, "user": "525f51bde4b0cb4875a45dc8"}, {"code": "(fn this\n  ([x] (this () x)) \n  ([y x] (if (= x ()) \n           y \n           (this (cons (first x) y) (rest x)))))", "problem": 23, "user": "525f66c6e4b03e8d9a4a7007"}, {"code": "reduce conj ()", "problem": 23, "user": "525b4e8de4b0cb4875a45d0f"}, {"code": "#(loop [l % r []]\n   (if (empty? l)\n     r\n     (recur (butlast l) (conj r (last l)))))", "problem": 23, "user": "524f0deee4b0541d1855b7fd"}, {"code": "reduce conj ()", "problem": 23, "user": "5130cb2ae4b08c712d3fae3b"}, {"code": "(fn [n] (reduce (fn [result n] (conj result n)) '() n))", "problem": 23, "user": "5256a1d4e4b0541d1855ba29"}, {"code": "#(reduce (fn [acc head] (cons head acc)) [] %)", "problem": 23, "user": "518c1791e4b0f028e99addf9"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "51642237e4b003cf19fdde31"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "525fffb8e4b03e8d9a4a702b"}, {"code": "#(reduce (fn [l x] (cons x l)) [] %)", "problem": 23, "user": "525efc76e4b0cb4875a45dbd"}, {"code": "(fn [coll] (reduce conj '() coll))", "problem": 23, "user": "525d413be4b0cb4875a45d65"}, {"code": "#(into () %)", "problem": 23, "user": "525d4111e4b0cb4875a45d64"}, {"code": "into ()", "problem": 23, "user": "52601e52e4b03e8d9a4a702f"}, {"code": "into ()", "problem": 23, "user": "525d41b3e4b0cb4875a45d69"}, {"code": "into()", "problem": 23, "user": "525d416fe4b0cb4875a45d67"}, {"code": "#(into () %)", "problem": 23, "user": "525d41cce4b0cb4875a45d6b"}, {"code": "#(reduce (fn [x y] (conj x y)) '() %)", "problem": 23, "user": "525d5329e4b0cb4875a45d75"}, {"code": "#(reduce (fn[x y] (conj x y))'() %)", "problem": 23, "user": "525d5341e4b0cb4875a45d76"}, {"code": "(fn [x] (reduce #(cons %2 %1) [] x))", "problem": 23, "user": "524f4162e4b0541d1855b806"}, {"code": "#(into () %)", "problem": 23, "user": "52342722e4b07e3ee2be83c0"}, {"code": "#(into () %)", "problem": 23, "user": "52563d02e4b0541d1855ba10"}, {"code": "(partial reduce #(cons %2 %) nil)", "problem": 23, "user": "524f213be4b0541d1855b7ff"}, {"code": "(fn rev[list]\n  (if (= (count list) 1)\n    list\n    (cons (last list) (rev (butlast list)))))", "problem": 23, "user": "525d490ae4b0cb4875a45d70"}, {"code": "(fn rv [x] (if (empty? x) x (conj (rv (butlast x)) (last x))))", "problem": 23, "user": "526143b7e4b03e8d9a4a705a"}, {"code": "reduce #(conj %1 %2) '()", "problem": 23, "user": "52430d3ce4b076204b44faa5"}, {"code": "#(loop [rev []\n        lst %]\n   (if (empty? lst) \n     rev\n   (recur (conj rev (last lst)) (butlast lst))))", "problem": 23, "user": "5245e1d7e4b09dbe66b56175"}, {"code": "(fn rev\n   ([s] (rev '() s))\n   ([r s] (if (seq s) (rev (cons (first s) r) (rest s)) r )) )", "problem": 23, "user": "524a7060e4b05ef8e38e64a6"}, {"code": "into ()", "problem": 23, "user": "525ee103e4b0cb4875a45dbb"}, {"code": "reduce conj '()", "problem": 23, "user": "52618ea3e4b03e8d9a4a7064"}, {"code": "(fn [coll] (into () coll))", "problem": 23, "user": "5174ade2e4b07031762f2edf"}, {"code": "(fn [x] (reduce conj '() x))", "problem": 23, "user": "5261aebbe4b03e8d9a4a7066"}, {"code": "(fn rev [x] ((fn reverse-inner [y z] (if (nil? y) z (reverse-inner (next y) (cons (first y) z)))) x '()))", "problem": 23, "user": "522ff396e4b032bbe3424172"}, {"code": "(fn myreverse [l]\n\t(loop [m l s []]\n\t\t(if (empty? m) s (recur (rest m) (cons (first m) s)))\n\t)\n)", "problem": 23, "user": "52593207e4b0cb4875a45cd3"}, {"code": "reduce conj nil", "problem": 23, "user": "525a643be4b0cb4875a45cf1"}, {"code": "reduce #(cons %2 %1) nil", "problem": 23, "user": "505345d9e4b0517ede0d0a06"}, {"code": "(fn [x] (reduce #(do (println %1 %2) (cons %2 %1)) [] x))", "problem": 23, "user": "52626564e4b03e8d9a4a7086"}, {"code": "#(reduce (fn [s x] (cons x s)) [] %)", "problem": 23, "user": "52218b29e4b0e6a83c8925da"}, {"code": "#(reduce (fn [x y] (conj x y)) '() %)", "problem": 23, "user": "5261f169e4b03e8d9a4a7072"}, {"code": "(fn [x] (reduce (fn [c d] (conj c d) ) '()  x ) )", "problem": 23, "user": "52628bb0e4b03e8d9a4a7089"}, {"code": "(fn rev [sq] (if (= (count sq) 1) sq (conj (rev (drop-last 1 sq)) (last sq))))", "problem": 23, "user": "5262e9a2e4b03e8d9a4a709e"}, {"code": "(fn [coll] (reduce conj '() coll))", "problem": 23, "user": "525941f9e4b0cb4875a45cd6"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "5262c73fe4b03e8d9a4a7098"}, {"code": "(fn [coll] (loop [coll coll ret [] n (count coll)] (if (= 0 n) ret (recur (rest coll) (cons (first coll) ret) (dec n)))))", "problem": 23, "user": "509e62a8e4b08df8156e9e2e"}, {"code": "(fn rev [x] (if (empty? x)\n              []\n              (conj (rev (rest x))(first x))))", "problem": 23, "user": "5263dca8e4b03e8d9a4a70bd"}, {"code": "(fn [x] (loop [inp x\n               result ()]\n          (if (empty? inp)\n            result\n            (recur (rest inp) (conj result (first inp))))))", "problem": 23, "user": "5264301fe4b03e8d9a4a70ca"}, {"code": "(fn\n  [x]\n  (reduce conj '() x))", "problem": 23, "user": "52635a22e4b03e8d9a4a70ac"}, {"code": "(fn reverse-list [x]\n  (into () x))", "problem": 23, "user": "525805bbe4b0cb4875a45ca1"}, {"code": "(fn [coll] (into () coll))", "problem": 23, "user": "4e7e1483535db169f9c79702"}, {"code": "#(reduce (fn [acc el] (conj acc el)) '() %)", "problem": 23, "user": "5264383be4b03e8d9a4a70cb"}, {"code": "(fn [coll]\n  (reduce conj () coll))", "problem": 23, "user": "5264b4a9e4b03e8d9a4a70e0"}, {"code": "#(into '() %)", "problem": 23, "user": "5262a4d0e4b03e8d9a4a708f"}, {"code": "(fn [seq] (reduce conj '() seq))", "problem": 23, "user": "503e46cee4b06c4e0e1fa264"}, {"code": "reduce (fn [a b] (conj a b)) ()", "problem": 23, "user": "5265352de4b03e8d9a4a7106"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "52419e78e4b076e5d3121f21"}, {"code": "into ()", "problem": 23, "user": "52616198e4b03e8d9a4a705e"}, {"code": "#(loop [r [] s %] (if (= 0 (count s)) r (recur (cons (first s) r) (rest s))))", "problem": 23, "user": "52655949e4b03e8d9a4a710b"}, {"code": "reduce conj '()", "problem": 23, "user": "526302eee4b03e8d9a4a70a2"}, {"code": "(fn rs\n  ([s]\n   (rs s nil))\n  ([s r]\n   (if (seq s)\n     (rs (rest s) (cons (first s) r))\n     r)))", "problem": 23, "user": "5012da69e4b0c8732600222d"}, {"code": "#(reduce (fn [x y] (conj x y)) '() %)", "problem": 23, "user": "525d417ee4b0cb4875a45d68"}, {"code": "#(reduce (fn [x y] (conj x y)) '() %)", "problem": 23, "user": "525d5302e4b0cb4875a45d73"}, {"code": "reduce (fn [l a] (cons a l)) []", "problem": 23, "user": "5250779ee4b0541d1855b82f"}, {"code": "#(into () %)", "problem": 23, "user": "525d7090e4b0cb4875a45d7e"}, {"code": "reduce conj nil", "problem": 23, "user": "52664945e4b03e8d9a4a712f"}, {"code": "#(reduce (fn [x y] (conj x y)) '() %)", "problem": 23, "user": "52667aa2e4b03e8d9a4a713d"}, {"code": "(fn [coll]\n   (loop [current coll\n          result []]\n     (if (empty? current)\n       result\n       (recur (butlast current) (conj result (last current))))))", "problem": 23, "user": "52090567e4b0e152394d76ed"}, {"code": "(fn my-rev [arr] (if (= 1 (count arr)) arr (concat  [(last arr)] (my-rev (butlast arr)))))", "problem": 23, "user": "525fea5ae4b03e8d9a4a7026"}, {"code": "#(into () %)", "problem": 23, "user": "51414a81e4b03d51af0d04ed"}, {"code": "#(into () %)", "problem": 23, "user": "525ed5f4e4b0cb4875a45db8"}, {"code": "into ()", "problem": 23, "user": "525de512e4b0cb4875a45d8a"}, {"code": "(fn rv [coll]\n    (if (empty? coll)\n        []\n        (conj (rv (rest coll)) (first coll))))", "problem": 23, "user": "52112be7e4b07aea8afc4f68"}, {"code": "#(loop [hold %1 sec %2] (if (empty? sec) hold (recur (conj hold (last sec)) (butlast sec)))) []", "problem": 23, "user": "5266db2be4b03e8d9a4a714a"}, {"code": "(fn [s] (sort #(compare %2 %1) s))", "problem": 23, "user": "526759b3e4b03e8d9a4a715b"}, {"code": "(fn [seq] (into '() seq))", "problem": 23, "user": "52680eace4b03e8d9a4a7194"}, {"code": "#(into () %)", "problem": 23, "user": "52667ecfe4b03e8d9a4a713e"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "526439a4e4b03e8d9a4a70cc"}, {"code": "#(vec (reduce conj '() %))", "problem": 23, "user": "5268f5b4e4b03e8d9a4a71cf"}, {"code": "reduce #(cons %2 %1) ()", "problem": 23, "user": "5267d9bde4b03e8d9a4a7188"}, {"code": "(fn recursive-reverse [coll]\n    (if (empty? coll)\n        []\n        (conj (recursive-reverse (rest coll)) (first coll) )))", "problem": 23, "user": "5268eb68e4b03e8d9a4a71c6"}, {"code": "(fn rev [x] \n  (if \n    (<= (count x) 1)\n    (vector (first x))\n    (conj (rev (rest x)) (first x))\n  )\n)", "problem": 23, "user": "52624348e4b03e8d9a4a707e"}, {"code": "#(loop [a % b ()] (if (empty? a) b (recur (rest a) (conj b (first a)))))", "problem": 23, "user": "526952b8e4b03e8d9a4a71e4"}, {"code": "into ()", "problem": 23, "user": "526aaafee4b03e8d9a4a7234"}, {"code": "reduce (fn [prev nxt] (cons nxt prev)) []", "problem": 23, "user": "51f4d46ee4b0fca5e8b48243"}, {"code": "(fn [xs]\n  (reduce (fn [lst x] (cons x lst)) '() xs))", "problem": 23, "user": "5264502be4b03e8d9a4a70cf"}, {"code": "(fn [lst]\n  (loop [orig lst, reversed []]\n    (if (seq orig)\n      (recur (rest orig) (cons (first orig) reversed))\n      reversed)))", "problem": 23, "user": "526866d1e4b03e8d9a4a71a1"}, {"code": "#(reduce (fn [a n] (apply conj n a)) (map vector %))", "problem": 23, "user": "50a768e6e4b090657f4a5cd9"}, {"code": "into ()", "problem": 23, "user": "4ec11b79535dfed6da9c6da6"}, {"code": "#(into '() %)", "problem": 23, "user": "526c669be4b03e8d9a4a728f"}, {"code": "(fn [x] (#(for [i (range (dec (count %)) -1 -1)] (nth % i)) (vec x)))", "problem": 23, "user": "526c2340e4b03e8d9a4a7281"}, {"code": "(fn\n    [lst]\n    (reduce #(conj %1 %2) () lst))", "problem": 23, "user": "5256c8c7e4b0541d1855ba37"}, {"code": "(fn [xs] (into () xs))", "problem": 23, "user": "5255bf1ee4b0541d1855b9f1"}, {"code": "(fn [x] (into () x))", "problem": 23, "user": "522afdeee4b0d34ee08e71b2"}, {"code": "#(reduce (fn [x y] (conj x y)) (list) %)", "problem": 23, "user": "526c6e08e4b03e8d9a4a7290"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "526d6968e4b03e8d9a4a72d9"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "5260341ee4b03e8d9a4a7034"}, {"code": "(fn [items]\n     (loop [itemsx items nx (count items) other '()]\n         (if (= nx 0)\n             (if (vector? items)\n                (into [] other)\n                other)\n             (recur (take (- nx 1) itemsx) (dec nx) (concat other (list (last itemsx)) ) ))))", "problem": 23, "user": "5262efade4b03e8d9a4a709f"}, {"code": "(fn my-reverse [s]\n  (reduce conj () s))", "problem": 23, "user": "526e1bd0e4b03e8d9a4a730b"}, {"code": "into '()", "problem": 23, "user": "526397f1e4b03e8d9a4a70b6"}, {"code": "#(reduce (fn [lst elem] (cons elem lst)) (empty %) %)", "problem": 23, "user": "52692e3be4b03e8d9a4a71d6"}, {"code": "#(loop [n % r '()]\n   (if (seq n)\n     (recur (rest n) (conj r (first n)))\n     r))", "problem": 23, "user": "526d54ece4b03e8d9a4a72d1"}, {"code": "(fn [coll]\n  (reduce\n    (fn [acc x] (cons x acc))\n    []\n    coll))", "problem": 23, "user": "526e5be8e4b03e8d9a4a731c"}, {"code": "(partial (fn [acc x] (if (nil? x) acc (recur (conj acc (first x)) (next x)))) '())", "problem": 23, "user": "526dd90de4b03e8d9a4a72fe"}, {"code": "#(reduce conj nil %)", "problem": 23, "user": "526f9715e4b03e8d9a4a7372"}, {"code": "(fn rev\n   [revCol col]\n   (if-not (empty? col)\n     (conj (rev revCol (rest col))\n           (first col)\n           )\n     []\n     )\n   )\n  []", "problem": 23, "user": "526ee63de4b03e8d9a4a733f"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "526ff475e4b03e8d9a4a738c"}, {"code": "#(reduce (fn [x y] (conj x y)) '() %)", "problem": 23, "user": "526fa661e4b03e8d9a4a7374"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "526e0831e4b03e8d9a4a7305"}, {"code": "(fn [xs]\n  (reduce \n    (fn [first second] (cons second first))\n    nil\n    xs\n  )\n)", "problem": 23, "user": "524a7c1ae4b05ef8e38e64ac"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "52709149e4b03e8d9a4a73b1"}, {"code": "(fn rev\n  [x]\n  (if (= (count x) 1) [(first x)]\n      (concat (rev (next x)) [(first x)])\n  )\n)", "problem": 23, "user": "51f549c4e4b0abb92f97f9cb"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "526f79aee4b03e8d9a4a736a"}, {"code": "into '()", "problem": 23, "user": "527121fde4b03e8d9a4a73dd"}, {"code": "(fn myrevseq[s]\n  (cond\n    (empty? s) s\n    :else (conj (myrevseq (butlast s)) (last s))))", "problem": 23, "user": "52713288e4b03e8d9a4a73e7"}, {"code": "(fn my-rev [s]\n  (if (nil? s) nil\n  (cons (last s) (my-rev (butlast s)))))", "problem": 23, "user": "5269c150e4b03e8d9a4a71f8"}, {"code": "(fn [x] (into () x))", "problem": 23, "user": "525c575be4b0cb4875a45d38"}, {"code": "(fn [lst] (loop [acc '() lst lst] (if (zero? (count lst)) acc (recur (cons (first lst) acc) (rest lst)))))", "problem": 23, "user": "51422945e4b0b50abeb46b2e"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "52709265e4b03e8d9a4a73b2"}, {"code": "#(into () %)", "problem": 23, "user": "5261c773e4b03e8d9a4a706a"}, {"code": "(fn preverse[xs] (reduce (fn [x _] (conj x _)) '() xs))", "problem": 23, "user": "5271b940e4b03e8d9a4a73fb"}, {"code": "(fn [coll] (reduce conj '() coll))", "problem": 23, "user": "52600f94e4b03e8d9a4a702d"}, {"code": "(fn [s]\n  (loop [coll s\n         acc []]\n    (if (empty? coll)\n      acc\n      (recur (butlast coll) (conj acc (last coll))))))", "problem": 23, "user": "517c1a3be4b07ef0e56148d6"}, {"code": "(fn rev-seq [lat]\n  (into '() lat))", "problem": 23, "user": "52725040e4b03e8d9a4a7427"}, {"code": "#(reduce (fn [rev x] (cons x rev)) '() %)", "problem": 23, "user": "527268a5e4b03e8d9a4a7431"}, {"code": "(fn rvrs\n   ([lst] (rvrs (rest lst) (conj () (first lst))))\n   ([lst acc]\n    (if (empty? lst)\n      acc\n        (rvrs (rest lst) (conj acc (first lst))))\n      ))", "problem": 23, "user": "52727d52e4b03e8d9a4a7439"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "5271605ae4b03e8d9a4a73ed"}, {"code": "(fn [coll] (reduce conj '() coll))", "problem": 23, "user": "5272ccf1e4b03e8d9a4a7450"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "5272e1b6e4b03e8d9a4a745a"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "52727ba4e4b03e8d9a4a7438"}, {"code": "(fn hoge [lst]\n  (if (empty? lst) nil\n    (let [dd (take (- (count lst) 1) lst)]\n      (cons (last lst) (hoge dd)))))", "problem": 23, "user": "5272669de4b03e8d9a4a742e"}, {"code": "(fn [inSeq] (reduce conj () inSeq))", "problem": 23, "user": "52711255e4b03e8d9a4a73d7"}, {"code": "#(\n  loop[lst % reversed '() ]\n \t(if(empty? lst)\n      reversed \n      (recur (rest lst) \n             (cons (first lst) \n                   reversed))))", "problem": 23, "user": "5273562ae4b03e8d9a4a7479"}, {"code": "(fn rev-seq [lat]\n  (into '() lat))", "problem": 23, "user": "5272d4b7e4b03e8d9a4a7453"}, {"code": "#(into '() %)", "problem": 23, "user": "52736ca1e4b03e8d9a4a747e"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "527367dfe4b03e8d9a4a747d"}, {"code": "(fn my-reverse [xs]\n  (if (empty? xs) \n    (list)\n  \t(cons \n   \t  (last xs)\n      (my-reverse (drop-last xs))\n    )\n  )\n)", "problem": 23, "user": "5273b883e4b03e8d9a4a748f"}, {"code": "(fn [ys] (reduce (fn [xs x] (concat [x] xs)) [] ys))", "problem": 23, "user": "52741177e4b03e8d9a4a749b"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "5243f93be4b076204b44faf6"}, {"code": "#(vec (reduce conj '() %))", "problem": 23, "user": "527361b3e4b03e8d9a4a747c"}, {"code": "reduce conj ()", "problem": 23, "user": "526bc746e4b03e8d9a4a7271"}, {"code": "(fn rev [coll] \n      (if (empty? coll)\n        ()\n        (cons (last coll) (rev (butlast coll)))))", "problem": 23, "user": "51e38568e4b0c611d6113e43"}, {"code": "#(apply conj (list (first %1)) (rest %1))", "problem": 23, "user": "526fc549e4b03e8d9a4a7380"}, {"code": "#(\n  (fn rev [a b] (if (empty? a) b (rev (rest a) (cons (first a) b))))\n  % []\n)", "problem": 23, "user": "527513d8e4b03e8d9a4a74bd"}, {"code": "(fn [x] \n\t(let [x-indices (map first (map-indexed vector x))]\n\t\t(for [i x-indices] (nth (into [] x) (- (count x-indices) i 1)))))", "problem": 23, "user": "526bd187e4b03e8d9a4a7273"}, {"code": "(fn [x] (into () x))", "problem": 23, "user": "514f6679e4b0b449e54b8df5"}, {"code": "reduce (fn [x y] (concat [y] x)) []", "problem": 23, "user": "526bd542e4b03e8d9a4a7274"}, {"code": "reduce conj ()", "problem": 23, "user": "50be9b4ae4b00fb48fed2ef6"}, {"code": "reduce conj '()", "problem": 23, "user": "4f90dc2ae4b0dcca54ed6c92"}, {"code": "#(reduce conj '() (vec %))", "problem": 23, "user": "5275f7a2e4b03e8d9a4a74d0"}, {"code": "(fn [coll] (loop [increment 0\n               reversed-seq []]\n          (if (= increment (count coll))\n            reversed-seq\n            (recur (inc increment) (conj reversed-seq (get (into [] coll) (- (count coll) increment 1)))))))", "problem": 23, "user": "527634d1e4b03e8d9a4a74d6"}, {"code": "(fn rev [list] (if (empty? list) () (cons (last list) (rev (butlast list)))))", "problem": 23, "user": "527675cbe4b03e8d9a4a74e2"}, {"code": "(fn [s] (into () s))", "problem": 23, "user": "52767de0e4b03e8d9a4a74e5"}, {"code": "#(map (fn [x] (nth (vec %) (- x 1))) (range (count %) 0 -1 ))", "problem": 23, "user": "527682ede4b03e8d9a4a74e6"}, {"code": "#(into () %)", "problem": 23, "user": "5276aa0de4b03e8d9a4a74ea"}, {"code": "#(into '() %)", "problem": 23, "user": "5274eb56e4b03e8d9a4a74bb"}, {"code": "#(into () %)", "problem": 23, "user": "5277c221e4b03e8d9a4a750f"}, {"code": "(fn c [v] (if (empty? v) v (conj (c (butlast v)) (last v))))", "problem": 23, "user": "521d709ae4b050d5da0427ef"}, {"code": "#(into () %)", "problem": 23, "user": "52729b88e4b03e8d9a4a7441"}, {"code": "#(let [s (seq %) c (count s)] (for [i (range c)] (nth s (- c i 1))))", "problem": 23, "user": "527818f7e4b03e8d9a4a7519"}, {"code": "#((fn river [x y] (if (first x) (river (rest x) (cons (first x) y)) y)) % [])", "problem": 23, "user": "52747090e4b03e8d9a4a74a5"}, {"code": "(fn [xs]\n  (loop [xs xs xss []]\n    (if (empty? xs) xss\n      (recur (rest xs) (cons (first xs) xss)))))", "problem": 23, "user": "526f2e16e4b03e8d9a4a7353"}, {"code": "(fn recursive-reverse [coll]\n    (if (empty? coll)\n        []\n        (conj (recursive-reverse (rest coll)) (first coll) )))", "problem": 23, "user": "5277da8ee4b03e8d9a4a7514"}, {"code": "(fn my-reverse\n  [seq]\n  (loop [s seq reversed (sequence nil)]\n    (if (empty? s ) reversed\n      (recur (rest s) (conj reversed (first s))))))", "problem": 23, "user": "50651de3e4b0b1b6c8b1d85f"}, {"code": "#(into '() %)", "problem": 23, "user": "5279096ce4b03e8d9a4a752d"}, {"code": "#(into () %)", "problem": 23, "user": "52795656e4b03e8d9a4a7534"}, {"code": "reduce (fn [acc x] (cons x acc)) ()", "problem": 23, "user": "5243635ce4b076204b44fab8"}, {"code": "reduce conj '()", "problem": 23, "user": "52774928e4b03e8d9a4a74fe"}, {"code": "(fn [x] (into '() x))", "problem": 23, "user": "52797546e4b03e8d9a4a7536"}, {"code": "reduce conj ()", "problem": 23, "user": "527236d4e4b03e8d9a4a741f"}, {"code": "#(reduce conj () %1)", "problem": 23, "user": "52774fd2e4b03e8d9a4a7500"}, {"code": "into '()", "problem": 23, "user": "52777dc3e4b03e8d9a4a7508"}, {"code": "(fn a [coll] (if-not (nil? coll)(conj (a (next coll)) (first coll))(identity [])))", "problem": 23, "user": "527a8eb7e4b03e8d9a4a755f"}, {"code": "(fn myrev [l]\n  (let [a (first l)]\n    (if a \n      (conj (myrev (next l)) a)\n      []\n    )\n  )\n)", "problem": 23, "user": "527a9f19e4b03e8d9a4a7562"}, {"code": "#(into () %)", "problem": 23, "user": "527094f0e4b03e8d9a4a73b3"}, {"code": "(fn rev-seq [s]\n  (if (empty? s)\n    []\n    (conj (rev-seq (rest s)) (first s))))", "problem": 23, "user": "527a5b84e4b03e8d9a4a7558"}, {"code": "#(loop [coll %\n        result '()\n       ]\n  (if (empty? coll) \n    result\n    (recur (rest coll) (conj result (first coll)))\n    )\n   )", "problem": 23, "user": "4db03885838c48654951d9bd"}, {"code": "#(into '() % )", "problem": 23, "user": "527b856fe4b03e8d9a4a758d"}, {"code": "(fn r [xs] (if (empty? xs) nil (cons (last xs) (r (drop-last xs)))))", "problem": 23, "user": "5273c41be4b03e8d9a4a7492"}, {"code": "#(into '() %)", "problem": 23, "user": "527b8881e4b03e8d9a4a758e"}, {"code": "(fn [lst]\n  (if (set? lst) (into () lst)\n   (loop [res (if (vector? lst) [] '()) lst (into () lst)]\n       (if (empty? lst) res\n             (recur (conj res (first lst)) (rest lst))))))", "problem": 23, "user": "52718620e4b03e8d9a4a73f5"}, {"code": "(fn [sequencia] \n (loop [res '(), s sequencia]\n   (if (empty? s) res\n     (recur (conj res (first s)) (rest s))\n   )\n )\n)", "problem": 23, "user": "527c040be4b03e8d9a4a75a7"}, {"code": "(fn [x] (loop [col x, col2[]]\n          (if(empty? col) col2\n            (recur (rest col)(cons (first col) col2))\n          )\n        )\n   )", "problem": 23, "user": "526daa51e4b03e8d9a4a72e9"}, {"code": "#(apply conj '() %)", "problem": 23, "user": "527c0513e4b03e8d9a4a75ab"}, {"code": "(fn [x]\n  (loop [col x, col2 '()]\n    (if (empty? col) col2\n      (recur (rest col) (conj col2 (first col)))\n    )\n  )  \n)", "problem": 23, "user": "527c036ee4b03e8d9a4a75a5"}, {"code": "#( into '() % )", "problem": 23, "user": "4e94addc535dbda64a6f6b21"}, {"code": "(fn [s] \n  (let [reverser (fn [x y]\n                   (if (empty? x)\n                     y\n                     (recur (rest x) (conj y (first x)))))]\n    (reverser s '())))", "problem": 23, "user": "527c166de4b03e8d9a4a75b3"}, {"code": "(fn f [a]\n  (if (not-empty a)\n    (conj (f (rest a)) (first a))\n    []\n  )\n)", "problem": 23, "user": "5272d7b4e4b03e8d9a4a7456"}, {"code": "into ()", "problem": 23, "user": "527c045fe4b03e8d9a4a75a8"}, {"code": "(fn reverse-seq [x]\n  (loop [[head & tail :as full] (seq x) new-list '()]\n    (if (= head nil)\n      new-list\n      (recur tail (cons head new-list))\n    )\n  )\n)", "problem": 23, "user": "527c2ac9e4b03e8d9a4a75b7"}, {"code": "(fn [x] (reduce conj () x))", "problem": 23, "user": "527c4071e4b0757a1b17135a"}, {"code": "#(into () %)", "problem": 23, "user": "4fda0678e4b05e33b9224f44"}, {"code": "(fn [sq]\n  (loop [orig sq\n         res '()]\n    (if (empty? orig)\n      res\n      (recur (rest orig) (cons (first orig) res)))))", "problem": 23, "user": "527cd633e4b0757a1b17136f"}, {"code": "reduce #(conj %1 %2) '()", "problem": 23, "user": "527b9beee4b03e8d9a4a7590"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "525d318fe4b0cb4875a45d63"}, {"code": "#(loop [x % y []] (if-not (seq x) y (recur (take (- (count x) 1) x) (conj y (last x)))))", "problem": 23, "user": "527bfb9fe4b03e8d9a4a75a4"}, {"code": "reduce conj '()", "problem": 23, "user": "527dc2aee4b0757a1b17138d"}, {"code": "#(reduce (fn[rev el](cons el rev)) '() %)", "problem": 23, "user": "526a3412e4b03e8d9a4a721e"}, {"code": "(fn [coll]\n  (loop [coll coll\n         reversed []]\n    (if\n      (empty? coll)\n      reversed\n      (recur (rest coll) (cons (first coll) reversed)))))", "problem": 23, "user": "52561be5e4b0541d1855ba08"}, {"code": "(fn [xs] ((fn my-rev [ys,zs] (if (= ys [])\n                               zs\n                               (my-rev (rest ys) (cons (first ys) zs))\n                               )\n            )\n          xs []\n          )\n  )", "problem": 23, "user": "5027a13de4b01614d1633fed"}, {"code": "(fn [eles]\n  (loop [eles eles\n         result (empty eles)]\n    (if (empty? eles) result\n          (recur (rest eles) (cons (first eles) result)))))", "problem": 23, "user": "527ed32ce4b0757a1b1713b5"}, {"code": "(fn rev [x]\n  (if (> (.count x) 0)\n    (concat (rev (rest x)) [(first x)])\n    '()))", "problem": 23, "user": "527f214de4b0757a1b1713c4"}, {"code": "(fn [orig]\n  (loop [s orig, new []]\n    (if (empty? s)\n      new\n      (recur (rest s) (cons (first s) new)))))", "problem": 23, "user": "52745629e4b03e8d9a4a74a0"}, {"code": "(fn rev [sn s] (if (empty? s) sn (rev (conj sn (last s)) (butlast s)))) []", "problem": 23, "user": "525b10a4e4b0cb4875a45d02"}, {"code": "#(into () %)", "problem": 23, "user": "528014e5e4b0757a1b1713e3"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "52808559e4b0757a1b171403"}, {"code": "(fn my-reverse [coll]\n  (reduce\n     #(cons %2 %)\n     '()\n     coll))", "problem": 23, "user": "527b8ed7e4b03e8d9a4a758f"}, {"code": "#(reduce (fn [a b] (cons b a)) [] %)", "problem": 23, "user": "5280d4bbe4b0757a1b171415"}, {"code": "reduce #(concat [%2] %1) []", "problem": 23, "user": "527188cee4b03e8d9a4a73f6"}, {"code": "(fn [lst] (reduce (fn [prev new] (conj prev new)) '() lst))", "problem": 23, "user": "527ccaf4e4b0757a1b17136d"}, {"code": "#(loop [in (vec %)\n        out '()]\n   (if (empty? in)\n     out\n     (let [[head & tail] in]\n     (recur tail (conj out head))))\n)", "problem": 23, "user": "528147b6e4b0757a1b171425"}, {"code": "#( loop [x % y ()] (if (seq x) (recur (next x) (conj y (first x)) ) y))", "problem": 23, "user": "52808897e4b0757a1b171404"}, {"code": "into ()", "problem": 23, "user": "528111d4e4b0757a1b17141d"}, {"code": "reduce (fn [m x] (conj m x)) '()", "problem": 23, "user": "52810225e4b0757a1b171418"}, {"code": "into '()", "problem": 23, "user": "52828298e4b0757a1b17145b"}, {"code": "(fn f \n  ([coll] (f coll '()))\n  ([coll acc]\n    (if (empty? coll) acc (f (rest coll) (conj acc (first coll))))))", "problem": 23, "user": "52826315e4b0757a1b171459"}, {"code": "into ()", "problem": 23, "user": "5281a445e4b0757a1b17143a"}, {"code": "(fn rev [x]\n   (if (empty? (rest x))\n      [(first x)]      \n      (concat (rev (rest x)) [(first x)])\n    )\n  )", "problem": 23, "user": "52824143e4b0757a1b171453"}, {"code": "(fn[x] (loop [new [] old x] (if (= (last old) nil) new (recur (conj new (last old)) (butlast old)))))", "problem": 23, "user": "528365e2e4b0239c8a67adb3"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "52835be2e4b0239c8a67adb0"}, {"code": "reduce conj ()", "problem": 23, "user": "5284de3de4b0239c8a67ade3"}, {"code": "into ()", "problem": 23, "user": "52812b9fe4b0757a1b171423"}, {"code": "(fn [s]\n    (loop [snew s ret []]\n      (if (empty? snew) \n        ret\n        (recur (rest snew) (cons (first snew) ret)))))", "problem": 23, "user": "511dada0e4b0a5c68a34840c"}, {"code": "#(into '() (vec %))", "problem": 23, "user": "519ef784e4b087743fad2198"}, {"code": "(fn rev\n  [col]\n  (if (empty? col)\n    []\n\n  (cons (last col) (rev (butlast col))))\n )", "problem": 23, "user": "52846deee4b0239c8a67adcf"}, {"code": "#(reduce (fn [x t] (conj x t)) () %)", "problem": 23, "user": "5282f54be4b0239c8a67ada0"}, {"code": "(fn t[l] (\n        if (= 1 (count l)) \n        l\n        (\n                concat \n                (t (rest l)) \n                (list (first l))   \n        ) \n    )\n)", "problem": 23, "user": "4f03c039535dcb61093f6b5e"}, {"code": "(fn [coll] (reduce conj () coll))", "problem": 23, "user": "52872d54e4b0239c8a67ae32"}, {"code": "#(into () %)", "problem": 23, "user": "5285920be4b0239c8a67adfb"}, {"code": "into ()", "problem": 23, "user": "52765fe6e4b03e8d9a4a74dc"}, {"code": "#(loop [xs %, rev ()]\n   (if (empty? xs) rev\n       (recur (next xs) (cons (first xs) rev))))", "problem": 23, "user": "4fe98ddae4b0547ebccb2463"}, {"code": "(fn [x] (reduce (fn [accum y] (cons y accum)) (empty x) x))", "problem": 23, "user": "5287f66be4b0239c8a67ae45"}, {"code": "(fn [col] (reduce #(cons %2 %1) [] col))", "problem": 23, "user": "527fd663e4b0757a1b1713de"}, {"code": "reduce conj ()", "problem": 23, "user": "5285e35be4b0239c8a67ae04"}, {"code": "(fn [seq]\n        (loop\n            [s seq\n             acc ()]\n\n          (if (= () s) acc (recur (rest s) (conj acc (first s))))\n            ))", "problem": 23, "user": "5288b06de4b0239c8a67ae55"}, {"code": "into ()", "problem": 23, "user": "52890634e4b0239c8a67ae5e"}, {"code": "(fn [xs]\n  ((fn [inxs result]\n     (if (empty? inxs)\n       result\n       (recur (rest inxs) (into (conj [] (first inxs)) result))\n     )\n  ) xs [])\n)", "problem": 23, "user": "528432b6e4b0239c8a67adc7"}, {"code": "(fn [coll]\n            (loop [ll (apply list coll) res '()]\n              (if (empty? ll)\n                res\n                (recur (rest ll) (conj res (first ll))))))", "problem": 23, "user": "5289bba9e4b0239c8a67ae69"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "528652fbe4b0239c8a67ae14"}, {"code": "reduce conj ()", "problem": 23, "user": "52737333e4b03e8d9a4a747f"}, {"code": "into '()", "problem": 23, "user": "52865f41e4b0239c8a67ae15"}, {"code": "(fn [x] (reduce conj '() x))", "problem": 23, "user": "528594fde4b0239c8a67adfc"}, {"code": "#(into () %)", "problem": 23, "user": "528ad4cce4b0239c8a67ae84"}, {"code": "(fn [ls]\n  (loop [lst ls out '()]\n    (if (empty? lst) out\n      (recur (rest lst)\n             (cons (first lst) out)))))", "problem": 23, "user": "52864dbce4b0239c8a67ae12"}, {"code": "reduce conj ()", "problem": 23, "user": "52753740e4b03e8d9a4a74c1"}, {"code": "#(into () %)", "problem": 23, "user": "528b0ab8e4b0239c8a67ae8b"}, {"code": "(fn rev [x] (cond (= x []) [] :else (conj (rev (rest x)) (first x))))", "problem": 23, "user": "528b9efee4b0239c8a67aea0"}, {"code": "reduce (fn [current, next](cons next current)) []", "problem": 23, "user": "52867936e4b0239c8a67ae16"}, {"code": "(fn [some-list]\n    (loop [acc '() reversible some-list]\n      (if (empty? reversible)\n        acc\n\t\t(recur (conj acc (first reversible)) (rest reversible)))))", "problem": 23, "user": "528b08efe4b0239c8a67ae8a"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "528c51a5e4b0239c8a67aeb4"}, {"code": "#(into '() %)", "problem": 23, "user": "528ba1d9e4b0239c8a67aea2"}, {"code": "into '()", "problem": 23, "user": "528d1094e4b0239c8a67aebe"}, {"code": "reduce conj ()", "problem": 23, "user": "528bba38e4b0239c8a67aea9"}, {"code": "#(into '() %)", "problem": 23, "user": "528cb57ce4b0239c8a67aeb6"}, {"code": "(fn [seq](keep (fn [x] (nth (seque seq) (- x 1)) ) (doall (keep-indexed (fn [index, val]  seq (- (count seq) index)) seq))))", "problem": 23, "user": "528cc69fe4b0239c8a67aeb7"}, {"code": "(fn [seq] (reduce conj () seq))", "problem": 23, "user": "528c381ce4b0239c8a67aeb2"}, {"code": "(partial reduce conj nil)", "problem": 23, "user": "52717a1de4b03e8d9a4a73f2"}, {"code": ";;(fn [a]\n;;  (loop [rev []\n;;         col (seq a)]\n;;    (if (empty? col)\n;;      rev\n;;      (recur\n;;       (cons (first col) rev)\n;;       (rest col)))))\n\n#(into '() %)", "problem": 23, "user": "514b83b4e4b0bd81940b86ce"}, {"code": "#(into () %)", "problem": 23, "user": "528e64b7e4b0239c8a67aedd"}, {"code": "(fn myrev [coll]\n  (if (= 1 (count coll))\n    [(first coll)]\n    (conj (myrev (rest coll))\n          (first coll))))", "problem": 23, "user": "4f35b2ace4b0e243712b1ec5"}, {"code": "reduce (fn [my-list element]\n         (conj my-list element)) '()", "problem": 23, "user": "5282c03be4b0757a1b171461"}, {"code": "(fn rev [col] (if (next col) (conj (rev (butlast col)) (last col)) (seq col)))", "problem": 23, "user": "528a791ae4b0239c8a67ae77"}, {"code": "#(into () %)", "problem": 23, "user": "528e95efe4b0239c8a67aee2"}, {"code": "into '()", "problem": 23, "user": "52299d14e4b04c906c9c6a7e"}, {"code": "(fn [coll] (reduce conj () coll))", "problem": 23, "user": "528f96b8e4b0239c8a67aef7"}, {"code": "reduce conj '()", "problem": 23, "user": "5290257ae4b0239c8a67af03"}, {"code": "(fn [coll]\n            (loop [head (first coll)\n                   tail (rest coll)\n                   reversed []]\n              (if (empty? tail)\n                (vec (cons head reversed))\n                (recur (first tail) (rest tail) (cons head reversed)))\n              ))", "problem": 23, "user": "50a6a8d2e4b0aa96157e2628"}, {"code": "reduce conj '()", "problem": 23, "user": "528e7740e4b0239c8a67aee0"}, {"code": "(fn reverse-seq [seq]\n  (loop [new-seq (empty seq) old-seq seq]\n    (if (empty? old-seq)\n    new-seq\n    (recur (cons (first old-seq) new-seq)\n           (rest old-seq)))))", "problem": 23, "user": "5287f34ee4b0239c8a67ae43"}, {"code": "(fn rev [x] (if (empty? x) [] (cons(last x) (rev (butlast x))) ) )", "problem": 23, "user": "528f1057e4b0239c8a67aeec"}, {"code": "(fn [x]\n   (if (vector? x)\n     (vec (reduce (fn [a b] (conj a b)) '() x))\n     (reduce (fn [a b] (conj a b)) '() x)\n     )\n )", "problem": 23, "user": "528ce039e4b0239c8a67aebc"}, {"code": "(fn [x]\n  (loop [ data x\n          acc [] ]\n    (if (empty? data)\n        acc\n    (recur (rest data) (cons (first data) acc))\n  ))\n)", "problem": 23, "user": "529012a5e4b0239c8a67af01"}, {"code": "(fn\n  [s]\n  (reduce #(cons %2 %) '() s))", "problem": 23, "user": "52761edae4b03e8d9a4a74d4"}, {"code": "(fn [collection]\n  (loop [coll collection\n         rev '()]\n    (if (empty? coll)\n      rev\n      (recur (rest coll) (conj rev (first coll))))))", "problem": 23, "user": "528b01a0e4b0239c8a67ae89"}, {"code": "(fn [s]\n  (let [inner (fn [todo res]\n                (if todo\n                  (recur (next todo) (conj res (first todo)))\n                  res))]\n    (inner s '())))", "problem": 23, "user": "529227cfe4b0239c8a67af27"}, {"code": "(fn [s]\n          (reduce conj '() s)\n          )", "problem": 23, "user": "529242bee4b0239c8a67af28"}, {"code": "reduce conj ()", "problem": 23, "user": "52840004e4b0239c8a67adc1"}, {"code": "(fn [coll]\n  (loop [lst coll x []]\n         (if (empty? lst)\n           x\n           (recur (rest lst) (cons (first lst) x)))))", "problem": 23, "user": "523f1245e4b01c266ffa7f95"}, {"code": "(fn [coll]\n  (loop [coll coll acc (empty coll)]\n    (if (empty? coll)\n      acc\n      (recur (rest coll) (cons (first coll) acc)))))", "problem": 23, "user": "528f82d8e4b0239c8a67aef4"}, {"code": "#(reduce (fn [x y] (conj x y)) '() %)", "problem": 23, "user": "5267eb51e4b03e8d9a4a718e"}, {"code": "#(map last (take (count %) (iterate (fn [%] (vec (butlast %))) %)))", "problem": 23, "user": "528ec21fe4b0239c8a67aee5"}, {"code": "#(loop [ret '() src %1]\n   (if (empty? src)\n     ret\n     (recur (conj ret (first src)) (next src))))", "problem": 23, "user": "5290360be4b0239c8a67af04"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "5292c985e4b0239c8a67af36"}, {"code": "#(into '() %)", "problem": 23, "user": "5257e2ace4b0cb4875a45c9a"}, {"code": "(fn [x] (reduce conj () x))", "problem": 23, "user": "5293589ae4b0239c8a67af3d"}, {"code": "reduce conj ()", "problem": 23, "user": "52614bc1e4b03e8d9a4a705c"}, {"code": "#(loop [result []\n        seq %]\n   (if (empty? seq)\n     result\n     (recur (cons (first seq) result)\n            (rest seq))))", "problem": 23, "user": "5294e44de4b02ebb4ef75016"}, {"code": "(fn r [c] (if (seq c) (concat (r (rest c)) [(first c)]) []))", "problem": 23, "user": "52951156e4b02ebb4ef7501b"}, {"code": "(partial into '())", "problem": 23, "user": "52950ab6e4b02ebb4ef7501a"}, {"code": "(fn rev [v]\n  (let [x (seq v)]\n    (if (not (empty? x))\n      (cons (last x) (rev (butlast x))\n    ))\n))", "problem": 23, "user": "51e7c1f1e4b0a3e081b8cbef"}, {"code": "(fn rvs [seqs]\n    (if (empty? seqs) \n      '()\n      (concat (rvs (rest seqs)) (list (first seqs))))\n)", "problem": 23, "user": "52837636e4b0239c8a67adb6"}, {"code": "(fn [s]\n  (loop [new []\n         old s]\n    (if (empty? old)\n      new\n      (recur (cons (first old) new) (rest old)))))", "problem": 23, "user": "52963cc7e4b02ebb4ef7502d"}, {"code": "#(loop [se % nes []] (if (= se []) nes (recur (rest se) (cons (first se) nes))))", "problem": 23, "user": "4f32d340e4b0d6649770a096"}, {"code": "(fn my-reverse [x] (if (>= 0 (count x))\n                         []\n                        (conj (my-reverse (rest x)) (first x))\n                         ))", "problem": 23, "user": "5296aa9be4b02ebb4ef75034"}, {"code": "#(vec ( reduce conj () %))", "problem": 23, "user": "5296008fe4b02ebb4ef7502a"}, {"code": "#(into () %)", "problem": 23, "user": "529670c1e4b02ebb4ef75030"}, {"code": "#(loop [coll % acc ()]\n   (if (= coll ()) acc\n     (recur (rest coll) (conj acc (first coll)))))", "problem": 23, "user": "52974f66e4b02ebb4ef75040"}, {"code": "(fn reverse_ [s]\n  (if (empty? s)\n    []\n  (conj  (reverse_ (rest s)) (first s))))", "problem": 23, "user": "5294c95fe4b02ebb4ef75013"}, {"code": "(fn  [arr] (loop[n arr l (count arr) acc '()] (if(zero? l) acc (do (let[ acc (cons (first n) acc)] (recur(rest n) (dec l) acc))))))", "problem": 23, "user": "5294b190e4b02ebb4ef75011"}, {"code": "(fn  [arr] (loop[n arr l (count arr) acc '()] (if(zero? l) acc (do (let[ acc (cons (first n) acc)] (recur(rest n) (dec l) acc))))))", "problem": 23, "user": "523acf7be4b0aa37f082ed90"}, {"code": "reduce #(cons %2 %1) '()", "problem": 23, "user": "52976262e4b02ebb4ef75041"}, {"code": ";into ()\n; #(into () %)\n; (fn [s] (into () s))\n\n; apply conj nil\n; apply conj ()\n; reduce conj () \n; #(reduce conj () %)\n; (fn [s] (reduce conj () s))\n\n; reduce (fn [a b] (cons b a)) nil\n\n(fn rev [s] (if (empty? s) [] (conj (rev (rest s)) (first s))))\n\n; ==> \n; #(loop [r '() s %]  (if (empty? s) r (recur (conj r (first s)) (rest s))))", "problem": 23, "user": "525f61aae4b0cb4875a45dcb"}, {"code": "#(into () %)", "problem": 23, "user": "5297c25de4b02ebb4ef75045"}, {"code": "#(into () %)", "problem": 23, "user": "52986e43e4b02ebb4ef75058"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "5298bd13e4b02ebb4ef75063"}, {"code": "(fn [coll]\n  (reduce (fn [dest x] (conj dest x)) '() coll))", "problem": 23, "user": "5298cc88e4b02ebb4ef75065"}, {"code": "#(loop [s % res (empty %)]\n   (if (nil? s) res (recur (next s) (cons (first s) res))))", "problem": 23, "user": "52990271e4b02ebb4ef7506d"}, {"code": "#(reduce (fn [x y] (cons y x)) nil %)", "problem": 23, "user": "5298d3f4e4b02ebb4ef75068"}, {"code": "(fn [y]\n  (loop [s y s1 []]\n    (if (empty? s)\n    \ts1\n      (recur (rest s) (cons (first s) s1\n                            )\n             )\n      )\n    ))", "problem": 23, "user": "52140b53e4b0961f15ac4d7e"}, {"code": "(fn [x]\n  (reduce conj '() x))", "problem": 23, "user": "529a3c37e4b02ebb4ef75094"}, {"code": "(fn[x](reduce conj () x))", "problem": 23, "user": "529952a4e4b02ebb4ef75081"}, {"code": "into ()", "problem": 23, "user": "51ad244fe4b09397d510977f"}, {"code": "(fn [s]\n  (loop [v (vec s)\n         l (last v)\n         acc []]\n    (if (empty? v)\n      acc\n      (recur (pop v) (last (pop v)) (conj acc l)))))", "problem": 23, "user": "526934d6e4b03e8d9a4a71dd"}, {"code": "#(into () %)", "problem": 23, "user": "529a2d3be4b02ebb4ef75092"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "509fe759e4b08df8156e9e43"}, {"code": "(fn my-rev[s]\n  (if-not (seq s)\n    []\n    (conj (my-rev (rest s)) (first s))))", "problem": 23, "user": "529a73bde4b02ebb4ef75096"}, {"code": "(fn [a] (reduce (fn [a b] (cons b a)) '() a))", "problem": 23, "user": "528fdb8ee4b0239c8a67aefe"}, {"code": "(fn [aseq]\n  (let [do-reverse (fn [a r]\n                     (if (nil? (seq r))\n                       a\n                       (recur (cons (first r) a)\n                              (rest r))))]\n    (do-reverse '() aseq)))", "problem": 23, "user": "529b5301e4b02ebb4ef7509f"}, {"code": "(fn [x]\n  (reduce conj '() x))", "problem": 23, "user": "4fd5418ee4b0d4de60cee372"}, {"code": "#(into () %)", "problem": 23, "user": "529c722de4b04e0c58e87b63"}, {"code": "#(into '()  %)", "problem": 23, "user": "529c87efe4b04e0c58e87b66"}, {"code": "#(into () %)", "problem": 23, "user": "529c6995e4b04e0c58e87b61"}, {"code": "into ()", "problem": 23, "user": "4e72187b535d5021c1a8965b"}, {"code": "(fn rev [list]\n  \t(let [[head & tail] (vec list)] \n\t    (if (empty? tail)\n    \t    [head]\n        \t(concat (rev tail) [head]))))", "problem": 23, "user": "529ca7dae4b04e0c58e87b67"}, {"code": "#(into () %)", "problem": 23, "user": "5290ffaee4b0239c8a67af10"}, {"code": "reduce conj ()", "problem": 23, "user": "529d292fe4b04e0c58e87b74"}, {"code": "(fn reverser\n   [coll]\n    (reduce conj () coll))", "problem": 23, "user": "526f0a68e4b03e8d9a4a7348"}, {"code": "#(into () %)", "problem": 23, "user": "51e05dfae4b01188f0627543"}, {"code": "(fn rev* [xs] (if (empty? xs) xs (concat (rev* (rest xs)) (list (first xs)))))", "problem": 23, "user": "529dc421e4b04e0c58e87b80"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "528e510ee4b0239c8a67aeda"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "528cf6f7e4b0239c8a67aebd"}, {"code": "reduce (fn [acc item] (cons item acc)) '()", "problem": 23, "user": "529e2383e4b04e0c58e87b8b"}, {"code": "(fn [sq] ((fn my-rev [s c] (if (= nil (first s))\n                     (c nil)\n                     (my-rev (rest s) #(cons (first s) (c %))))) sq identity))", "problem": 23, "user": "529ce629e4b04e0c58e87b6e"}, {"code": "(fn [coll] (reduce conj '() coll))", "problem": 23, "user": "4e84f81b535db62dc21a62e6"}, {"code": "(fn rev-seq [x] (when (> (count x) 0) \n   (cons (last x) (rev-seq (drop-last x)))))", "problem": 23, "user": "529d4f4be4b04e0c58e87b79"}, {"code": "#(into () %)", "problem": 23, "user": "529e558ce4b04e0c58e87b95"}, {"code": "(fn [coll] (into () coll))", "problem": 23, "user": "528e1c88e4b0239c8a67aed1"}, {"code": "(fn\n  [xs]\n  (reduce (fn [acc x] (cons x acc)) (empty xs) xs))", "problem": 23, "user": "529dd5a4e4b04e0c58e87b82"}, {"code": "(fn [sqn]\n  \n  (loop [s sqn accum '()] \n    (if (empty? s) \n      accum \n      (recur (rest s)\n             (conj accum (first s))))))", "problem": 23, "user": "529f3f1ae4b04e0c58e87ba5"}, {"code": "(fn rev [coll]\r\n   (reduce conj '() coll))", "problem": 23, "user": "523aa92ae4b081681ca7adcd"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "529e8ba9e4b04e0c58e87b99"}, {"code": "into ()", "problem": 23, "user": "529f453ee4b04e0c58e87ba6"}, {"code": "reduce conj ()", "problem": 23, "user": "504feeb9e4b0a02f9cffdeaa"}, {"code": "reduce conj '()", "problem": 23, "user": "52a04f0ee4b04e0c58e87bc1"}, {"code": "(fn my-reverse\n  [s]\n  (reduce conj () s))", "problem": 23, "user": "528e25b9e4b0239c8a67aed5"}, {"code": "(fn [container] (loop [s container r '()] (if (nil? s) r (recur (next s) (conj r (first s))))))", "problem": 23, "user": "52a195fde4b04e0c58e87bda"}, {"code": "into ()", "problem": 23, "user": "52a1acb2e4b04e0c58e87bdb"}, {"code": "reduce (fn [acc x] (concat [x] acc)) []", "problem": 23, "user": "5291ede5e4b0239c8a67af1e"}, {"code": "(fn [lst]\n  (loop [l lst \n         acc nil]\n    (if (empty? l)\n      acc\n      (recur (rest l) (cons (first l) acc)))))", "problem": 23, "user": "529f739fe4b04e0c58e87bad"}, {"code": "into ()", "problem": 23, "user": "51bfc1f0e4b0e49ef9037dd4"}, {"code": "(fn [s] (reduce conj '() (sort (seq s))))", "problem": 23, "user": "52a0fa82e4b04e0c58e87bd1"}, {"code": "(fn [x]\n  (loop [s x curr '()]\n    (if (empty? s)\n      curr\n      (recur (rest s) (conj curr (first s))))))", "problem": 23, "user": "5226f8e9e4b04e78ff2e199a"}, {"code": "into ()", "problem": 23, "user": "52a32876e4b04e0c58e87bfb"}, {"code": "(fn rev-seq [x]\n  (if (= (count x) 1) \n    x\n    (conj \n      (rev-seq (drop-last x))\n      (last x))))", "problem": 23, "user": "529e3a4fe4b04e0c58e87b92"}, {"code": "(partial reduce (fn [a v] (cons v a)) ())", "problem": 23, "user": "4f1b120f535d64f603146476"}, {"code": "(fn [x] (reduce conj '() x))", "problem": 23, "user": "529d2abce4b04e0c58e87b75"}, {"code": "(fn [coll] (reduce conj () coll))", "problem": 23, "user": "52a00651e4b04e0c58e87bbb"}, {"code": "(fn get-reverse\n  ([coll] (get-reverse coll []))\n  ([coll reversed]\n    (if (empty? coll)\n      reversed\n      (get-reverse (rest coll) (cons (first coll) reversed)))))", "problem": 23, "user": "5233adf7e4b07e3ee2be83ad"}, {"code": "#(into () %)", "problem": 23, "user": "52a4879ce4b0c58976d9abdb"}, {"code": "(fn rev\n  [s]\n  (cond (= s nil) nil\n  \t:else (cons (last s) (rev (butlast s)))))", "problem": 23, "user": "52a4f3cee4b0c58976d9abe0"}, {"code": "#(into () %)", "problem": 23, "user": "4ec1619b535dfed6da9c6dab"}, {"code": "(fn [items] (reduce conj () items))", "problem": 23, "user": "52a52e59e4b0c58976d9abe4"}, {"code": "#(for [i (range (dec (count (vec %))) -1 -1)] (nth (vec %) i))", "problem": 23, "user": "52a503e4e4b0c58976d9abe1"}, {"code": "(fn _reverse [s] (if (nil? (first (rest s))) [(first s)] (conj (_reverse (rest s)) (first s))))", "problem": 23, "user": "5263c44fe4b03e8d9a4a70b8"}, {"code": "#(into '() %)", "problem": 23, "user": "4f77b68de4b0fbe0118ec581"}, {"code": "(fn [ls] \n  (map (fn [ix] (nth (seq ls) ix)) \n       (range\n        (- (count ls) 1) -1 -1)\n       )\n  )", "problem": 23, "user": "52a614dfe4b0c58976d9abf8"}, {"code": "#(into () %)", "problem": 23, "user": "52a5e784e4b0c58976d9abf3"}, {"code": "into ()", "problem": 23, "user": "52a0237de4b04e0c58e87bbe"}, {"code": "(fn foo\n  [oldcoll]\n  (let [coll (into [] oldcoll)]\n  (when-not (empty? coll)\n    (conj (foo (pop coll)) (last coll)))))", "problem": 23, "user": "5289f1f4e4b0239c8a67ae6d"}, {"code": "(fn [coll] (loop [rev '() c coll] (if (empty? c) rev (recur (cons (first c) rev) (rest c)))))", "problem": 23, "user": "52a5f1e6e4b0c58976d9abf4"}, {"code": "(fn [l] \n  (let [f \n        (fn [l acc] \n          (if (empty? l) acc \n            (recur (rest l) (conj acc (first l)))))] (f l '())))", "problem": 23, "user": "5273e006e4b03e8d9a4a7495"}, {"code": "(fn my-rev [xs] \n  (if (empty? xs)\n    nil\n  \t(cons (last xs) (my-rev (butlast xs)))))", "problem": 23, "user": "52a779fce4b0c58976d9ac1a"}, {"code": "(fn [lst]\n  (loop [l lst\n         acc '()]\n    (if (empty? l)\n      (into [] acc)\n      (recur (rest l) (conj acc (first l))))))", "problem": 23, "user": "52a6ed15e4b0c58976d9ac0a"}, {"code": "into ()", "problem": 23, "user": "528a3e14e4b0239c8a67ae72"}, {"code": "(fn [arr] (reduce conj '() arr))", "problem": 23, "user": "52a5d1f3e4b0c58976d9abf1"}, {"code": "(fn [coll] (letfn [(rec [c result]\n                        (if (empty? c)\n                          result\n                          (rec (rest c) (cons (first c) result))))]\n             (rec coll '())))", "problem": 23, "user": "5298c83de4b02ebb4ef75064"}, {"code": "(fn aaa [l]\n   (if (> (count l) 1)\n     (concat\n      (drop (- (count l) 1) l)\n      (aaa (drop-last 1 l)))\n     l))", "problem": 23, "user": "52a82661e4b0c58976d9ac29"}, {"code": "(fn [x] (reduce conj () x))", "problem": 23, "user": "505d1b01e4b0e6aca564be04"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "51929214e4b08962174cf74c"}, {"code": "(let [rev (fn [xs reversed]\n              (if (empty? xs)\n                reversed\n                (recur (rest xs) (concat [(first xs)] reversed))))]\n    (fn [xs] (rev xs [])))", "problem": 23, "user": "4feaa579e4b0140c20fb9c0b"}, {"code": "(fn rev [l] (if (empty? l) l (conj (rev (butlast l)) (last l))))", "problem": 23, "user": "52a8d0e6e4b0c58976d9ac37"}, {"code": "#(reduce conj () %1)", "problem": 23, "user": "52a76986e4b0c58976d9ac17"}, {"code": "#(into () %)", "problem": 23, "user": "50c24da6e4b0f056eabae53d"}, {"code": "(fn [x] (reduce conj () x))", "problem": 23, "user": "52aa2849e4b0c58976d9ac5e"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "52aaa079e4b0c58976d9ac67"}, {"code": "(fn [coll]\n  (loop [coll coll\n         rcoll []]\n    (if (not (nil? coll))\n      (recur (next coll) (cons (first coll) rcoll))\n      rcoll)))", "problem": 23, "user": "52a55adee4b0c58976d9abe7"}, {"code": "(fn recursive-reverse [coll]\n    (if (empty? coll)\n        []\n        (conj (recursive-reverse (rest coll)) (first coll) )))", "problem": 23, "user": "52aa40bde4b0c58976d9ac60"}, {"code": "(fn [coll]\n  (let [r (reduce\n    (fn [reversed item]\n      (if (nil? item)\n      reversed\n      (conj reversed item)))\n    '()\n    coll)]\n    (if (vector? coll) (vec r) r)))", "problem": 23, "user": "52a9b086e4b0c58976d9ac4e"}, {"code": "reduce conj '()", "problem": 23, "user": "5254ef3de4b0541d1855b9b8"}, {"code": "#(into () %)", "problem": 23, "user": "52ab5b03e4b0c58976d9ac74"}, {"code": "(fn [x] (into '() x))", "problem": 23, "user": "4fa38e3fe4b081705acca190"}, {"code": "(fn rev [coll]\n  (when (seq coll)\n    (cons (last coll) (rev (butlast coll)))))", "problem": 23, "user": "52ab6de1e4b0c58976d9ac78"}, {"code": "(fn [x] (into () x))", "problem": 23, "user": "52a28e1ce4b04e0c58e87bf0"}, {"code": "into ()", "problem": 23, "user": "52aabeffe4b0c58976d9ac6b"}, {"code": "into ()", "problem": 23, "user": "52a62e16e4b0c58976d9abf9"}, {"code": "(fn [x] ((fn inner [y r] (\n    if (empty? y) r\n    (inner \n     (butlast y) \n     (concat r (list (last y)))\n    ))\n) x []))", "problem": 23, "user": "52ab61f5e4b0c58976d9ac75"}, {"code": "into ()", "problem": 23, "user": "52abd555e4b0c58976d9ac7e"}, {"code": "reduce #(cons %2 %1) nil", "problem": 23, "user": "52aac2fce4b0c58976d9ac6c"}, {"code": "into ()", "problem": 23, "user": "52ac41fee4b0c58976d9ac85"}, {"code": "reduce #(cons %2 %1) []", "problem": 23, "user": "52a88c4de4b0c58976d9ac30"}, {"code": "#(into () %)", "problem": 23, "user": "52ada98ae4b0c58976d9ac9a"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "52ac9225e4b0c58976d9ac87"}, {"code": "(fn myrev [xs] \n  (if (empty? xs)\n    ()\n    (cons (last xs) (myrev (butlast xs)))))", "problem": 23, "user": "52a8ca0fe4b0c58976d9ac36"}, {"code": "(fn [x]\n  (for [i (range (- (count x) 1) -1 -1)]\n    (nth (seq x) i)))", "problem": 23, "user": "52a32b52e4b04e0c58e87bfc"}, {"code": "#(loop [result [] s (seq %)]\n    (if (empty? s)\n      result\n      (recur (cons (first s) result) (next s))\n      )\n    )", "problem": 23, "user": "52a7634ae4b0c58976d9ac16"}, {"code": "#(loop [ result [] in % f (first %) ]\n   ( if (empty? in)\n     result\n     (recur (cons f result) (rest in) (first (rest in)))\n    )\n  )", "problem": 23, "user": "528f4462e4b0239c8a67aef0"}, {"code": "#(into () %)", "problem": 23, "user": "52ae1634e4b0c58976d9ac9f"}, {"code": "(fn rev [ls]\n  (if (empty? ls)\n    []\n    (conj (rev (rest ls)) (first ls))))", "problem": 23, "user": "52aa4a67e4b0c58976d9ac62"}, {"code": "(fn rev ([l] (rev l [])) ([l r] (if (= l []) r (rev (rest l) (cons (first l) r)))))", "problem": 23, "user": "52af0136e4b0c58976d9acb3"}, {"code": "(fn flip [x] (if (> (count x) 1) (concat [(last x)] (flip (rest (butlast x))) [(first (butlast x))])  x ) )", "problem": 23, "user": "52aca6f3e4b0c58976d9ac89"}, {"code": "reduce #(cons %2 %1 ) []", "problem": 23, "user": "52af66d2e4b0c58976d9acba"}, {"code": "(fn my-rev[x](if (first x)\n              (conj (my-rev (butlast x)) (last x))\n               (list)\n              ))", "problem": 23, "user": "52a1edd6e4b04e0c58e87be4"}, {"code": "reduce conj '()", "problem": 23, "user": "50dcb2f4e4b02e6ac9592c91"}, {"code": "reduce #(cons %2 %1) []", "problem": 23, "user": "52aad30ce4b0c58976d9ac6d"}, {"code": "(fn f[x]\n  (if (empty? (rest x))\n    x\n    (cons  (last x) (f (butlast x)))))", "problem": 23, "user": "52b0323ee4b0c58976d9acc6"}, {"code": "(fn [items] (reduce conj '() items))\n\n;(fn [items]\n;  (loop [[r & more :as all] (seq items)\n;         acc '()]\n;    (if all\n;      (recur more (cons r acc))\n;      acc)))", "problem": 23, "user": "52a713dbe4b0c58976d9ac0c"}, {"code": "(fn f [c]\n  (if (zero? (count c))\n    [] ; '()?\n    (conj\n      (f (rest c))\n      (first c)\n      )\n    )\n  )", "problem": 23, "user": "52ae886de4b0c58976d9acab"}, {"code": ";#(reduce (fn [n coll] (conj n coll)) '() %)\n\n#(reduce conj () %)", "problem": 23, "user": "524f4256e4b0541d1855b808"}, {"code": "#(into () %)", "problem": 23, "user": "52b11742e4b0c58976d9acd5"}, {"code": "(fn [coll]\n  (loop [c coll\n         acc nil]\n    (if-not (seq c)\n      acc\n      (recur (rest c) (cons (first c) acc)))))", "problem": 23, "user": "4ee8b9c9535d93acb0a66884"}, {"code": "(fn [x] (map #(nth (vec x) %) (range (dec (count x)) -1 -1)))", "problem": 23, "user": "52774dd2e4b03e8d9a4a74ff"}, {"code": "(fn reverse1 \n  ([x] (reverse1 x '() ))\n  ([s s1] (if (= '() s) s1 (reverse1 (rest s) (cons (first s) s1) ))))", "problem": 23, "user": "52b18a74e4b0c58976d9acdf"}, {"code": "#(into () %)", "problem": 23, "user": "52b1d41ce4b0c58976d9ace6"}, {"code": "reduce #(cons %2 %) []", "problem": 23, "user": "527ba695e4b03e8d9a4a7596"}, {"code": "(fn [coll] (reduce conj () coll))", "problem": 23, "user": "51ea4e35e4b0f1f103a0d148"}, {"code": "(fn [l] (into '() l))", "problem": 23, "user": "52aab153e4b0c58976d9ac69"}, {"code": "#(into () %)", "problem": 23, "user": "52b19c5de4b0c58976d9ace1"}, {"code": "reduce conj ()", "problem": 23, "user": "52b02329e4b0c58976d9acc5"}, {"code": "(fn rev [coll]\n  (loop [coll coll\n          out '()]\n    (if (nil? (first coll))\n      out\n      (recur (rest coll) (conj out (first coll))))))", "problem": 23, "user": "52b2d16ae4b0c58976d9acf8"}, {"code": "(fn inverte [colecao]\n  (loop [coll colecao res '()]\n    (if(empty? coll) res\n       (recur (rest coll)\n          (cons (first coll) res)\n       )\n    )\n  )\n)", "problem": 23, "user": "527c0509e4b03e8d9a4a75aa"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "5249a506e4b05ef8e38e646d"}, {"code": "(fn rev [s] (when-not (empty? s) (concat (rev (rest s)) (take 1 s))))", "problem": 23, "user": "52ab51c4e4b0c58976d9ac73"}, {"code": "#(into () %)", "problem": 23, "user": "524cf3e7e4b0752c4cb68cd1"}, {"code": "(fn f [coll]\n  (if (empty? coll)\n    '()\n    (cons (last coll) (f (butlast coll)))))", "problem": 23, "user": "52b3658be4b0c58976d9ad0a"}, {"code": "into ()", "problem": 23, "user": "52afa8a1e4b0c58976d9acbe"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "505b0431e4b021387fb8985e"}, {"code": "#(loop [ls % acc '()]\n   (if (empty? ls) acc (recur (rest ls) (conj acc (first ls)))))", "problem": 23, "user": "52b405e1e4b0c58976d9ad15"}, {"code": "#(loop [m % c []]\n            (if m\n                (recur (butlast m) (conj c (last m)))\n              c))", "problem": 23, "user": "51852961e4b0da5a5be3babb"}, {"code": "(fn [vs] ((fn [v a] (if (empty? v) a (recur (rest v) (conj a (first v))))) vs '()))", "problem": 23, "user": "52b43468e4b0c58976d9ad1b"}, {"code": "reduce conj '()", "problem": 23, "user": "52b48f04e4b0c58976d9ad29"}, {"code": "reduce conj ()", "problem": 23, "user": "52a1c6cee4b04e0c58e87be1"}, {"code": "(partial reduce conj ())", "problem": 23, "user": "52b453b0e4b0c58976d9ad21"}, {"code": "#(loop [c % t []]\n       (if (empty? c)\n         t\n         (recur (rest c) (cons (first c) t)))\n       )", "problem": 23, "user": "52a9154ee4b0c58976d9ac3b"}, {"code": "into '()", "problem": 23, "user": "52b42d7ee4b0c58976d9ad19"}, {"code": "#(reduce (fn [a b] (cons b a)) [] %)", "problem": 23, "user": "52b5b2d1e4b0c58976d9ad3b"}, {"code": "(fn rev [xs]\n  (cond\n   (= '() xs) '()\n   :else (concat (rev (rest xs)) [(first xs)])))", "problem": 23, "user": "52b5edd1e4b0c58976d9ad3c"}, {"code": "into ()", "problem": 23, "user": "50c13f77e4b096f585049c3b"}, {"code": "(fn [x] (keys (zipmap x (range))))", "problem": 23, "user": "52b666bfe4b0c58976d9ad44"}, {"code": "reduce conj '()", "problem": 23, "user": "52b6b5a7e4b0c58976d9ad4b"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "52acc552e4b0c58976d9ac8c"}, {"code": "(fn my-reverse [a-seq]\n      (if (empty? a-seq)\n        ()\n        (conj\n         (my-reverse(drop-last a-seq))\n         (last a-seq))))", "problem": 23, "user": "52b6365de4b0c58976d9ad40"}, {"code": "reduce (fn [n m] (cons m n)) '()", "problem": 23, "user": "527bd988e4b03e8d9a4a759d"}, {"code": "(fn rvrs [coll] (loop[x (count coll) rcoll [] ] (if (== x 0) rcoll (recur (dec x) (conj rcoll (last (take x coll)))))))", "problem": 23, "user": "52b60e94e4b0c58976d9ad3e"}, {"code": "(fn [xs]\n  (reduce #(cons %2 %1) '() xs))", "problem": 23, "user": "52b65f26e4b0c58976d9ad43"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "52b14940e4b0c58976d9acdb"}, {"code": "(fn [my-seq] (reduce conj '() my-seq))", "problem": 23, "user": "52b66d98e4b0c58976d9ad46"}, {"code": "reduce conj '()", "problem": 23, "user": "4f3a979de4b0e243712b1f10"}, {"code": "#(loop [x % y '()]\n   (if (empty? x)\n     y\n     (recur (rest x) (conj y (first x)))))", "problem": 23, "user": "52b79d8ee4b0c58976d9ad50"}, {"code": "(fn [l] (reduce (fn [acc lst] (conj acc lst)) '() l))", "problem": 23, "user": "52aa16d1e4b0c58976d9ac5a"}, {"code": "reduce conj '()", "problem": 23, "user": "508f97c0e4b0ea685a20f768"}, {"code": "#(into () %)", "problem": 23, "user": "52b33607e4b0c58976d9ad02"}, {"code": "(partial reduce conj '())", "problem": 23, "user": "52b8af15e4b07a9af57922b5"}, {"code": "(fn [l] (map-indexed (fn[i x] (get (vec l) (- (count l) i 1)   )) l))", "problem": 23, "user": "52b8bc3fe4b07a9af57922b6"}, {"code": "(fn rev [x] (if (empty? x) [] (conj (rev (rest x)) (first x) )))", "problem": 23, "user": "52b7a904e4b0c58976d9ad51"}, {"code": "(fn [x] (reduce conj '() x))", "problem": 23, "user": "526fce6fe4b03e8d9a4a7383"}, {"code": "(fn my-reverse [xs]\n  (if (empty? xs)\n    []\n    (vec (cons (last xs) (my-reverse (pop (vec xs)))))\n   )\n)", "problem": 23, "user": "52b2a819e4b0c58976d9acf1"}, {"code": "(fn rev [cclist somelist] (if( = nil (first somelist)) cclist (rev (cons (first somelist) cclist) (rest somelist)))) '()", "problem": 23, "user": "52b84ad7e4b07a9af57922af"}, {"code": "(fn [xs]\n  (loop [l xs r (list)]\n  \t(if (empty? l)\n      r\n      (recur (rest l) (conj r (first l))))))", "problem": 23, "user": "52b9c62ce4b07a9af57922c3"}, {"code": "#(into nil %)", "problem": 23, "user": "52ba2af3e4b07a9af57922cc"}, {"code": "(fn [s]\n  (loop [acc [] r s]\n    (if (empty? r)\n      acc\n      (recur (cons (first r) acc) (rest r))\n      )\n    )\n  )", "problem": 23, "user": "52ba43d0e4b07a9af57922cd"}, {"code": "(fn [lst]\n  (loop [original lst current []]\n    (if (= 0 (count original))\n      current\n      (recur (drop-last original) (conj current (last original))))))", "problem": 23, "user": "52b94f15e4b07a9af57922ba"}, {"code": "#(apply conj '() (seq %))", "problem": 23, "user": "52b9a836e4b07a9af57922c0"}, {"code": "reduce conj ()", "problem": 23, "user": "52bad920e4b07a9af57922d7"}, {"code": "(fn [s]\n  (loop [st s rev '()]\n    (if (empty? st)\n      rev\n      (recur (rest st) (conj rev (first st))))))", "problem": 23, "user": "52b63875e4b0c58976d9ad41"}, {"code": "(fn [x]\n  (into () (apply list x)))", "problem": 23, "user": "52bb27fee4b07a9af57922df"}, {"code": "into ()", "problem": 23, "user": "52bb123ae4b07a9af57922de"}, {"code": "(fn [X]\n  ((fn rev [Y R]\n     (if (empty? Y)\n       R\n       (rev (rest Y) (concat [(first Y)] R))))\n  X []))", "problem": 23, "user": "52bb2fc0e4b07a9af57922e0"}, {"code": "(fn [s]\n  (loop [ss s r (take 0 s)]\n    (if (empty? ss)\n      r\n      (recur (drop 1 ss) (cons (first ss) r)))))", "problem": 23, "user": "52a7c82ae4b0c58976d9ac21"}, {"code": "#(for [i (range (count %))] (last (take (- (count %) i) %)))", "problem": 23, "user": "52bb81d7e4b07a9af57922e8"}, {"code": "reduce (fn [accum elem] (cons elem accum)) []", "problem": 23, "user": "51fda906e4b0f1313d468a4f"}, {"code": "reduce #(conj %1 %2) (list)", "problem": 23, "user": "52b80827e4b0c58976d9ad56"}, {"code": "#(reduce (fn[x y] (cons y x)) [] %)", "problem": 23, "user": "4fc50525e4b081705acca370"}, {"code": "(fn my-reverse\n     ([s] (my-reverse s '()))\n     ([s acc] (if (empty? s) acc (recur (rest s) (cons (first s) acc)))))", "problem": 23, "user": "52bc6f5ee4b07a9af57922f6"}, {"code": "#(loop [n '() o %]\n   (if (empty? o)\n   n\n   (recur (cons (first o) n) (rest o))))", "problem": 23, "user": "50772e6ae4b0fc74642bff5d"}, {"code": "(fn [seqq]\n  (reduce conj '() seqq))", "problem": 23, "user": "52bc7ea6e4b07a9af57922f7"}, {"code": "(fn rev [s] (reduce conj '() s))", "problem": 23, "user": "52bb4be0e4b07a9af57922e2"}, {"code": "reduce conj '()", "problem": 23, "user": "52a23af1e4b04e0c58e87beb"}, {"code": "#(into () %)", "problem": 23, "user": "52bcf698e4b07a9af57922fe"}, {"code": "reduce conj ()", "problem": 23, "user": "52baea85e4b07a9af57922d9"}, {"code": "into ()", "problem": 23, "user": "52b9cfb9e4b07a9af57922c5"}, {"code": "(fn self [x] (\n         if (empty? x)\n         \tx\n        \t(cons (last x)\n                  (self (butlast x))\n                  )\n              )\n  )", "problem": 23, "user": "52b49aebe4b0c58976d9ad2b"}, {"code": "(fn [d]\n      (into () d)\n      )", "problem": 23, "user": "52bbe6e1e4b07a9af57922ef"}, {"code": "(fn rev [n s] \n    (if s\n    (rev (conj n (last s)) (butlast s))\n    n\n    ))\n[]", "problem": 23, "user": "52bb55e8e4b07a9af57922e3"}, {"code": "#(\n  (fn r [x y]\n    (if (empty? x)\n      y\n      (r (rest x) (cons (first x) y ))\n      ))\n    % []\n  )", "problem": 23, "user": "52bdd135e4b07a9af579230a"}, {"code": "into ()", "problem": 23, "user": "52bdb689e4b07a9af5792306"}, {"code": "(fn self [l]\n  (if (empty? l)\n    []\n    (conj (self (rest l)) (first l))\n   )\n  )", "problem": 23, "user": "52ba447ee4b07a9af57922ce"}, {"code": "(fn myrev [lst] (if (empty? (rest lst)) (list (first lst)) (concat (myrev (rest lst)) (list (first lst)))))", "problem": 23, "user": "52bdf6bde4b07a9af579230d"}, {"code": "#(into () %)", "problem": 23, "user": "52be404ee4b07a9af579231a"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "52be5d55e4b07a9af579231e"}, {"code": "(fn my-reverse [coll]\n    (let [a-seq (seq coll) size (count a-seq)]\n        (for [i (range size)]\n             (nth a-seq (dec (- size i))))\n    ) \n )", "problem": 23, "user": "52763696e4b03e8d9a4a74d7"}, {"code": "(fn rev [seq] (if (= seq []) [] (conj (rev (rest seq)) (first seq))))", "problem": 23, "user": "52bebdbfe4b07a9af5792326"}, {"code": "(fn [s]\n  (map (fn [x] (get (vec s) (- x 1))) \n         (range(count s) 0 -1)))", "problem": 23, "user": "52bda384e4b07a9af5792305"}, {"code": "(fn sorting [something]\n  (if (= (count something) 1) something\n    (let [[x y] (split-at (quot (count something) 2) something)]\n      (if (< 0 (compare (last x)  (first y))) (concat (sorting x) (sorting y)) (concat (sorting y) (sorting x))))))", "problem": 23, "user": "52bafc88e4b07a9af57922dc"}, {"code": "(fn [x] (loop [stack [] x x] \n          (if (zero? (count x)) stack (recur (cons (first x) stack) (rest x)))\n          ))", "problem": 23, "user": "52bef782e4b07a9af5792327"}, {"code": "(fn [coll] (reduce #(cons %2 %1) [] coll))", "problem": 23, "user": "52be0c48e4b07a9af5792311"}, {"code": "reduce conj ()", "problem": 23, "user": "52bf29fde4b07a9af579232e"}, {"code": "reduce conj '()", "problem": 23, "user": "52b577c9e4b0c58976d9ad39"}, {"code": "(fn reversi [group]\n  (loop [new-set () shrinking-group group]\n    (if (seq shrinking-group)\n      (recur (conj new-set (first shrinking-group)) (rest shrinking-group))\n      new-set)\n    )\n  )", "problem": 23, "user": "52be23dbe4b07a9af5792316"}, {"code": "(fn rev\n  ([s] (rev s (empty s)))\n  ([s r]\n   (if (empty? s)\n     r\n     (rev (rest s) (cons (first s) r))\n   )\n  )\n)", "problem": 23, "user": "52bf936ee4b07a9af579233b"}, {"code": "(fn rev ([lst] (rev nil lst))\n        ([newlst lst]\n          (if (empty? lst)\n              newlst\n              (recur (cons (first lst) newlst) (rest lst))\n          )\n        )\n)", "problem": 23, "user": "52bf8e35e4b07a9af579233a"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "52bf6946e4b07a9af5792334"}, {"code": "(fn rev-seq [x] \n  (loop [xseq x revseq nil]\n    (if (= (seq xseq) nil)\n      revseq\n      (recur (rest xseq) (conj revseq (first xseq))))))", "problem": 23, "user": "52c0101fe4b07a9af5792343"}, {"code": "(fn [seq]\n                (into [] (loop [acc ()\n                                seq seq]\n                           (if (empty? seq) acc\n                               (recur (conj acc (first seq)) (rest seq))))))", "problem": 23, "user": "4eda8d7c535d10e5ff6f530f"}, {"code": "#(reduce (fn [x y] (conj x y)) '() %)", "problem": 23, "user": "52c07415e4b07a9af579234d"}, {"code": "#(into () %)", "problem": 23, "user": "512b85a7e4b04d059cf1fd15"}, {"code": "#(into () %)", "problem": 23, "user": "52baefbae4b07a9af57922da"}, {"code": "#(loop [l %1 f []]\n   (if (zero? (count l))\n     f\n     (recur (butlast l) (conj f (last l)))\n     )\n   )", "problem": 23, "user": "4f99ae4ae4b0dcca54ed6d00"}, {"code": "#(reduce (fn[x y](conj x y)) '() %)", "problem": 23, "user": "52c1bd29e4b07a9af579236a"}, {"code": "#(loop [r [] c %]                                                               \n    (if (next c)                                                                 \n      (recur (cons (first c) r) (next c))                                        \n      (cons (first c) r)))", "problem": 23, "user": "5167d60de4b0c5a4140a3098"}, {"code": "reduce conj '()", "problem": 23, "user": "52b9cd85e4b07a9af57922c4"}, {"code": "#(loop [lst %\n         acc ()]\n    (if (empty? lst) acc\n        (recur (rest lst) (conj acc (first lst)))))", "problem": 23, "user": "52c25645e4b07a9af579237d"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "52c1cc8be4b07a9af579236b"}, {"code": "(fn rev [s]\n  (if (empty? s) []\n    (conj (rev (rest s)) (first s))))", "problem": 23, "user": "52c2f10de4b07a9af5792386"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4f47d84fe4b0d56e7bb92bc3"}, {"code": "#(vec(reduce (fn [acum x] (cons x acum)) [] %))", "problem": 23, "user": "52c35afce4b07a9af579238c"}, {"code": "(fn [coll] (reduce #(cons %2 %1) (empty coll) coll))", "problem": 23, "user": "52c00263e4b07a9af579233f"}, {"code": "#(reduce (fn [acc nn] (conj acc nn)) '() %1)", "problem": 23, "user": "508147cde4b0a20aab17b93a"}, {"code": "(fn r [lst] \n    (cond \n        (empty? lst) '[] \n        true (conj (r (rest lst)) (first lst))\n        )\n)", "problem": 23, "user": "52c17e42e4b07a9af5792367"}, {"code": "#(into () %)", "problem": 23, "user": "52c2d900e4b07a9af5792382"}, {"code": "(fn my-reverse ([a-list]\n     (cond (= a-list nil) nil :else (cons (last a-list) (my-reverse (butlast a-list))))))", "problem": 23, "user": "52c42f6be4b0c2d177d620d1"}, {"code": "(fn\n  [coll]\n    (reduce conj () coll))", "problem": 23, "user": "52c2eb29e4b07a9af5792385"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "52c42bc2e4b0c2d177d620d0"}, {"code": "#(reduce (fn [a b] (conj a b)) '() %)", "problem": 23, "user": "52c46e7fe4b0c2d177d620da"}, {"code": "#(map (fn [n] (nth (seq %) n)) (range (- (count %) 1) -1 -1))", "problem": 23, "user": "52c1f404e4b07a9af5792370"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "52c4580fe4b0c2d177d620d8"}, {"code": "(partial reduce conj '())", "problem": 23, "user": "52c4756fe4b0c2d177d620db"}, {"code": "(fn rev [s] (reduce conj '() s))", "problem": 23, "user": "52c1ef8fe4b07a9af579236e"}, {"code": "reduce conj nil", "problem": 23, "user": "5295fbb7e4b02ebb4ef75029"}, {"code": "reduce  conj ()", "problem": 23, "user": "52a9406de4b0c58976d9ac43"}, {"code": "reduce #(conj %1 %2) '()", "problem": 23, "user": "52c4af71e4b0c2d177d620e1"}, {"code": "#(reduce (fn [x y] (conj x y)) '() %1)", "problem": 23, "user": "52c4cb2fe4b0c2d177d620e5"}, {"code": "(fn rev [seq & res]\n  (if (empty? seq)\n    res\n    (recur (rest seq) (cons (first seq) res))))", "problem": 23, "user": "52c4d327e4b0c2d177d620e6"}, {"code": "#(reduce conj '() %1)", "problem": 23, "user": "4f659386e4b07046d9f4ef44"}, {"code": "reduce conj nil", "problem": 23, "user": "52c52ef2e4b0c2d177d620ef"}, {"code": "(fn my-reverse [s](reduce conj '() s))", "problem": 23, "user": "52c4fe42e4b0c2d177d620e9"}, {"code": "#(reduce conj '() (seq %))", "problem": 23, "user": "52c3b3e5e4b0c2d177d620c8"}, {"code": "(fn reverce-sq [x] \n  (reduce (fn [c x] (cons x c)) (empty x) x))", "problem": 23, "user": "515bbcd9e4b0388ca8ca1521"}, {"code": "#(into '() %)", "problem": 23, "user": "52c5a9c5e4b0c2d177d620f9"}, {"code": "(fn rev [coll]\n  (if (> (count coll) 1)\n    (cons (last coll) (rev (drop-last coll)))\n    coll))", "problem": 23, "user": "51583ee4e4b0a069fd272c72"}, {"code": "#(into () %)", "problem": 23, "user": "52c61564e4b0c2d177d62109"}, {"code": "(fn [xs]\n  (reduce \n    (fn [first second] (cons second first))\n    nil\n    xs\n  )\n)", "problem": 23, "user": "52c58440e4b0c2d177d620f7"}, {"code": "#(into () %)", "problem": 23, "user": "528f0106e4b0239c8a67aeeb"}, {"code": "(fn myrev\n  ([xs]\n   (myrev (empty xs) xs))\n  ([ret xs]\n   (if (empty? xs)\n     ret\n     (myrev (cons (first xs) ret) (rest xs)))))", "problem": 23, "user": "52c58561e4b0c2d177d620f8"}, {"code": "(fn [vctr] (into () vctr))", "problem": 23, "user": "52c3a0f4e4b0c2d177d620c6"}, {"code": "#(into '() %)", "problem": 23, "user": "52c580c2e4b0c2d177d620f5"}, {"code": "reduce conj ()", "problem": 23, "user": "522635c0e4b06a1ecd0c4e7e"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "52c6a0abe4b0c2d177d62111"}, {"code": "(fn rev [xs]\n  (let [a (first xs)\n        b (rest xs)]\n    (if (empty? b) [a] (conj (rev b) a)  )))", "problem": 23, "user": "52c6f1f3e4b0c2d177d62117"}, {"code": "into ()", "problem": 23, "user": "52bbd09ee4b07a9af57922ee"}, {"code": "reduce conj ()", "problem": 23, "user": "52c73194e4b0c2d177d6211e"}, {"code": "#(into () %)", "problem": 23, "user": "52c69672e4b0c2d177d62110"}, {"code": "(fn [coll] (reduce conj () coll))", "problem": 23, "user": "52c7399be4b0c2d177d6211f"}, {"code": "(fn [seq]\n  (loop [seq seq\n         rev []]\n    (if (nil? seq)\n      rev\n      (recur (butlast seq) (conj rev (last seq))))))", "problem": 23, "user": "52897300e4b0239c8a67ae65"}, {"code": "(fn [coll]\n  (loop [acc '()\n         coll coll]\n    (if (empty? coll) \n      acc\n      (recur (cons (first coll) acc ) (rest coll))\n      )\n    )\n  )", "problem": 23, "user": "51a2569ee4b00957e520db7d"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "5215661be4b02f6d8ea676c7"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "52c682cce4b0c2d177d6210f"}, {"code": "(fn rev [a]\n  (if (empty? a)\n    []\n    (into (rev (rest a)) [(first a)])))", "problem": 23, "user": "52c7f036e4b0c2d177d62126"}, {"code": "(fn rrev [list] (if (empty? list) [] (conj (rrev (rest list)) (first list))))", "problem": 23, "user": "52c804dee4b0c2d177d6212b"}, {"code": "(fn [x] (loop [ a () b x] (if (empty? b) a (recur (cons (first b) a) (rest b)))))", "problem": 23, "user": "52c81954e4b0c2d177d6212e"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "52c35ce0e4b07a9af579238d"}, {"code": "reduce conj ()", "problem": 23, "user": "50a3bf08e4b0ceace084d495"}, {"code": "reduce conj ()", "problem": 23, "user": "52c672e2e4b0c2d177d6210e"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "52be0cc8e4b07a9af5792312"}, {"code": "(fn [s]\n  (reduce (fn [rev-seq v] (conj rev-seq v)) '() (vec s)))", "problem": 23, "user": "52c884a2e4b0c2d177d62136"}, {"code": "(fn rev [x] (reduce conj () x   ))", "problem": 23, "user": "52c7fce9e4b0c2d177d6212a"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "52b43708e4b0c58976d9ad1d"}, {"code": "(fn [s] (reduce #(conj %1 %2) '() s))", "problem": 23, "user": "52c1ede2e4b07a9af579236d"}, {"code": "reduce #(conj %1 %2) ()", "problem": 23, "user": "50ca1356e4b0a409464667da"}, {"code": "(fn rev [_seq]\n\t(let [_count (count _seq)]\n\t(conj\n\t\t;1 2\n\t\t(if (> _count 1)\n\t\t\t(rev (take (- _count 1) _seq))\n\t\t\t'())\n\t\t;3\n\t\t(last _seq)\n\t)\n\t)\n)", "problem": 23, "user": "52c60844e4b0c2d177d62106"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "52c6e646e4b0c2d177d62115"}, {"code": "(fn reverte [s]\n        (let [v (vec s)\n              qtd (count s)]\n          (if (= 1 qtd)\n            s\n            (cons (last v) (reverte (subvec v 0 (dec qtd)))))))", "problem": 23, "user": "52c8758be4b0c2d177d62135"}, {"code": "#(reduce (fn [newseq item] (conj newseq item)) (list) %)", "problem": 23, "user": "52caeb25e4b071a8d36bd3e7"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "52ca720fe4b071a8d36bd3e2"}, {"code": "reduce conj '()", "problem": 23, "user": "52caaeade4b071a8d36bd3e5"}, {"code": "reduce #(conj %1 %2) '()", "problem": 23, "user": "52a90056e4b0c58976d9ac39"}, {"code": "(fn [collection] (reduce conj '() collection))", "problem": 23, "user": "52b20257e4b0c58976d9ace8"}, {"code": "reduce conj '()", "problem": 23, "user": "52c8a814e4b0c2d177d62138"}, {"code": "#(loop [coll % rev ()]\n       (if (empty? coll) rev\n           (recur (rest coll) (conj rev (first coll)))))", "problem": 23, "user": "52cbf89ee4b07d0d72b27354"}, {"code": "(\n  fn my-reverse [l] (\n                        if (empty? l) [] (conj (my-reverse (rest l)) (first l) )\n                                      )\n  )", "problem": 23, "user": "52cbe910e4b07d0d72b27353"}, {"code": "(fn [x] (into () x))", "problem": 23, "user": "52b3959ce4b0c58976d9ad0d"}, {"code": "#(reduce (fn [a b] (cons b a)) [] %)", "problem": 23, "user": "52b467b0e4b0c58976d9ad24"}, {"code": "#(reduce (fn [x y] (cons y x)) [] %)", "problem": 23, "user": "527c9c08e4b0757a1b171366"}, {"code": "(fn rec [lst]\n  (if (empty? lst)\n    []\n    (conj (rec (rest lst)) (first lst))))", "problem": 23, "user": "52cc09c1e4b07d0d72b27356"}, {"code": ";; essentially the same as #(into (list) %)\nreduce conj (list)", "problem": 23, "user": "52cb6bb0e4b07d0d72b2734c"}, {"code": "reduce conj (seq [])", "problem": 23, "user": "52c5c1c8e4b0c2d177d620fc"}, {"code": "#(reduce (fn [rev n] (cons n rev)) () %1)", "problem": 23, "user": "52cc85abe4b07d0d72b27367"}, {"code": "(fn [lst] (let [rev* (fn [lst-so-far lst-to-do]\n                       (let [wip (concat [(first lst-to-do)] lst-so-far)\n                             remaining (seq (rest lst-to-do))]\n                         (if remaining\n                           (recur wip remaining)\n                           wip)\n                         ))]\n                (rev* [] lst)))", "problem": 23, "user": "5268a013e4b03e8d9a4a71b0"}, {"code": "(fn [l] (reduce conj '() l))", "problem": 23, "user": "52b5137de4b0c58976d9ad36"}, {"code": "(fn rvrs [l]\n  (if (empty? l) nil\n     (cons (last l) (rvrs (butlast l)))))", "problem": 23, "user": "52ccc231e4b07d0d72b27370"}, {"code": "(fn [coll] (reduce conj () coll))", "problem": 23, "user": "52cbe5dfe4b07d0d72b27352"}, {"code": "(letfn [(rev [lst acc]\n             (if (empty? lst)\n               acc\n               (recur (rest lst) (cons (first lst) acc))\n               )\n             \n             )]\n  #(rev % '())\n  )", "problem": 23, "user": "52cd1ed0e4b07d0d72b27377"}, {"code": "#(into '() %)", "problem": 23, "user": "52bd9cb7e4b07a9af5792304"}, {"code": "(fn foo [x] (if (= 1 (count x)) x (concat (foo (rest x)) (list (first x)))) )", "problem": 23, "user": "52cc92e9e4b07d0d72b27368"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "52cca65be4b07d0d72b2736b"}, {"code": "(fn [x] \n   ((fn [x y] \n     (if (next x)\n       (recur (next x)\n              (conj y (first x)))\n       (conj y (first x)))\n      ) x '()))", "problem": 23, "user": "52cdc539e4b07d0d72b2737e"}, {"code": "(fn [x]\n  (reduce conj '() x))", "problem": 23, "user": "52cdc676e4b07d0d72b2737f"}, {"code": "reduce conj ()", "problem": 23, "user": "52ce2aace4b07d0d72b2738b"}, {"code": "(fn doit [x] (if (not-empty x) (conj (doit (drop-last x)) (last x)) x))", "problem": 23, "user": "52cd882ee4b07d0d72b27378"}, {"code": "(fn my-reverse\n  [xs]\n  (if (= 1 (count xs))\n    xs\n    (cons (last xs) (my-reverse (butlast xs)))))", "problem": 23, "user": "52ce5056e4b07d0d72b2738f"}, {"code": "reduce conj ()", "problem": 23, "user": "52cd093fe4b07d0d72b27376"}, {"code": "reduce (fn [r x] (cons x r)) '()", "problem": 23, "user": "52cdb7efe4b07d0d72b2737c"}, {"code": "reduce #(conj %1 %2) '()", "problem": 23, "user": "52ce8648e4b07d0d72b27390"}, {"code": "(fn [coll]\n  (let [c1 (seq coll)]\n    (loop [c1 c1\n           rc1 []]\n      (if (empty? c1)\n        (seq rc1)\n        (recur (drop-last c1) (conj rc1 (last c1)))))))", "problem": 23, "user": "52c1566fe4b07a9af5792364"}, {"code": "(fn [lst] \n  (reduce conj '() lst))", "problem": 23, "user": "52cee992e4b07d0d72b27395"}, {"code": "reduce conj '()", "problem": 23, "user": "52bc6cb2e4b07a9af57922f5"}, {"code": "(partial reduce (fn [a b] (concat [b] a)) [])", "problem": 23, "user": "52cdef59e4b07d0d72b27384"}, {"code": "#(reduce (fn [x y] (conj x y)) '() %)", "problem": 23, "user": "52cf25cae4b07d0d72b2739e"}, {"code": "#(into () %)", "problem": 23, "user": "52cf1e25e4b07d0d72b2739c"}, {"code": "#(into () %)", "problem": 23, "user": "52c60945e4b0c2d177d62108"}, {"code": "(fn [coll]\n  (reduce conj nil coll))", "problem": 23, "user": "52cf2b96e4b07d0d72b273a0"}, {"code": "#(into () %)", "problem": 23, "user": "52ce1abfe4b07d0d72b27389"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "52ced458e4b07d0d72b27394"}, {"code": "#(loop [-seq % res '()]\n   (if (empty? -seq)\n     res\n     (recur (rest -seq) (conj res (first -seq)))))", "problem": 23, "user": "5094057fe4b097f48cc38593"}, {"code": "#(reduce (fn [coll elem] (conj coll elem)) '() %)", "problem": 23, "user": "52cfe059e4b07d0d72b273af"}, {"code": "#(into () %)", "problem": 23, "user": "5110249ae4b04c71fce993ea"}, {"code": "#(loop [coll %1 rcoll []]\n   (if coll\n     (recur (butlast coll) (conj rcoll (last coll)))\n     rcoll)\n  )", "problem": 23, "user": "52d079f2e4b07d0d72b273ba"}, {"code": "into '()", "problem": 23, "user": "52d0902ee4b07d0d72b273bd"}, {"code": "reduce conj '()", "problem": 23, "user": "52cf5450e4b07d0d72b273a4"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "52a3c66ce4b04e0c58e87c04"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "52cc582ae4b07d0d72b27362"}, {"code": "(fn reverse2 [listIn] \n     (cond (= listIn nil) nil\n           :else (cons (last listIn)\n                       (reverse2 (butlast listIn)))))", "problem": 23, "user": "52ce165fe4b07d0d72b27388"}, {"code": "#(into () %)", "problem": 23, "user": "52c49401e4b0c2d177d620de"}, {"code": "#(loop [c %\n        n '()]\n (if c (recur (next c) (conj n (first c))) n))", "problem": 23, "user": "52cb19abe4b07d0d72b27348"}, {"code": "(fn rev [s]\n    ((fn append [mySeq acc] \n\t\t(let [beginning (butlast mySeq)]\n        \t(if (= beginning nil) \n          \t\t(conj acc (first mySeq))\n          \t\t(append beginning (conj acc (last mySeq)))\n            )\n        )\n    ) s [])\n)", "problem": 23, "user": "52c10ad2e4b07a9af579235c"}, {"code": "(fn [s & res]\n  (if (nil? s)\n    res\n    (recur (next s) (conj res (first s)))))", "problem": 23, "user": "52ce4cafe4b07d0d72b2738e"}, {"code": "#(into () %)", "problem": 23, "user": "52d00832e4b07d0d72b273b4"}, {"code": "(fn rev [x] \n  (if (> (count x) 0)\n    (conj (rev (subvec (vec x) 0 (- (count x) 1))) (last x))\n    '())\n    )", "problem": 23, "user": "52cefb7ee4b07d0d72b27397"}, {"code": "#(into () %)", "problem": 23, "user": "525d41e3e4b0cb4875a45d6c"}, {"code": "(fn [thelist]\n  (loop [restoflist thelist reverselist []]\n    (if (empty? restoflist)\n     \treverselist\n      (recur \n       (drop-last restoflist)\n       (conj reverselist (last restoflist))\n       )\n      )\n    )\n  )", "problem": 23, "user": "52cc7c40e4b07d0d72b27364"}, {"code": "#(reduce (fn [result item] (cons item result)) '[] %)", "problem": 23, "user": "52d1cb55e4b0d9f9285948e5"}, {"code": "#(into () %)", "problem": 23, "user": "52d08e7ce4b07d0d72b273bc"}, {"code": "#(into () %)", "problem": 23, "user": "526b49fbe4b03e8d9a4a7250"}, {"code": "(fn [coll]\n  (reduce (fn [acc elem] (cons elem acc)) [] coll))", "problem": 23, "user": "52ccc2bde4b07d0d72b27371"}, {"code": "#(into `() %)", "problem": 23, "user": "52d23a39e4b099d49816f0a6"}, {"code": "(fn [coll]\n    (loop [coll2 coll, result []]\n      (if (empty? coll2)\n        result\n        (recur (drop-last coll2) (conj result (last coll2))))))", "problem": 23, "user": "52cf084ce4b07d0d72b27399"}, {"code": "(fn [c] (reduce conj () c))", "problem": 23, "user": "52d0fadce4b07d0d72b273c0"}, {"code": "(fn [lst]\n  (map #(% 1)  (sort (map vector (range (count lst) 0 -1) lst)) )\n  )", "problem": 23, "user": "526698c9e4b03e8d9a4a7144"}, {"code": "#( into () %)", "problem": 23, "user": "52d00a05e4b07d0d72b273b5"}, {"code": "reduce conj nil", "problem": 23, "user": "52d2ca1ce4b099d49816f0b4"}, {"code": "(fn myReverse [xs]\n  (if (< 1 (.size xs))\n    (conj (myReverse (butlast xs)) (last xs))\n    xs))", "problem": 23, "user": "5166b716e4b060c690c1f4bf"}, {"code": "into ()", "problem": 23, "user": "52d2e54ae4b099d49816f0b9"}, {"code": "reduce conj '()", "problem": 23, "user": "52d10680e4b07d0d72b273c3"}, {"code": "reduce conj '()", "problem": 23, "user": "52b35a6ee4b0c58976d9ad07"}, {"code": "#(loop [s %1 r ()] (if (empty? s) r (recur (rest s) (cons (first s) r))))", "problem": 23, "user": "52d340ebe4b099d49816f0c1"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "52d33ac5e4b099d49816f0c0"}, {"code": "#(reduce (fn [x y] (conj x y)) '() %)", "problem": 23, "user": "52d02380e4b07d0d72b273b7"}, {"code": "#(reduce (fn [st el] (cons el st)) (empty %) %)", "problem": 23, "user": "52cc4fd6e4b07d0d72b27360"}, {"code": "(fn\n  [list]\n  (loop\n    [list list\n     result `()]\n    (if (nil? (first list))\n      result\n      (recur (rest list) (conj result (first list))))))", "problem": 23, "user": "52d39acce4b099d49816f0c7"}, {"code": "reduce (fn [x y] (cons y x)) []", "problem": 23, "user": "52d36f60e4b099d49816f0c2"}, {"code": "#(reduce (fn [sq el](cons el sq)) [] %)", "problem": 23, "user": "51b41150e4b0f094dd986fac"}, {"code": ";#(loop\n;   [s %\n;    out ()]\n;   (let [tmp (conj out (first s))]\n;    (if (empty? (rest s))\n;      tmp\n;      (recur (rest s) tmp))))\n\nreduce #(conj %1 %2) ()", "problem": 23, "user": "52d469c8e4b09f7907dd1330"}, {"code": "#(reduce conj nil %)", "problem": 23, "user": "52d2b85ce4b099d49816f0af"}, {"code": "#(loop[n % c 0 m nil](if(nil? n)m(recur (next n)(+ c 1)(cons (get (vec %) c) m))))", "problem": 23, "user": "52ce4c32e4b07d0d72b2738d"}, {"code": "(fn my-reverse [coll]\n  \"It's clojure.core/reverse, but without clojure.core/reverse.\"\n  (loop [[head & tail] (seq coll) result '()]\n    (let [next-result (conj result head)]\n      (if (empty? tail)\n        next-result\n        (recur tail next-result)))))", "problem": 23, "user": "527aba40e4b03e8d9a4a7565"}, {"code": "(fn rev [xs] (if (empty? xs) xs (conj (rev (butlast xs)) (last xs))))", "problem": 23, "user": "52d3f666e4b09f7907dd1327"}, {"code": "#(reduce (fn [x y] (conj x y)) '() %)", "problem": 23, "user": "52d51024e4b09f7907dd1339"}, {"code": "(fn [coll] \n  ((fn [coll reversed]\n    (if (= '() coll)\n    reversed\n    (recur (rest coll) (conj reversed (first coll))))\n    )\n   coll '()\n))", "problem": 23, "user": "52d51535e4b09f7907dd133a"}, {"code": "reduce (fn [result in] (into [in] result)) []", "problem": 23, "user": "52d28bade4b099d49816f0ad"}, {"code": "#(loop [l % r []] (if (empty? l) r (recur (rest l) (cons (first l) r  ))))", "problem": 23, "user": "500e7063e4b04a05d36fcc07"}, {"code": "into ()", "problem": 23, "user": "52d49445e4b09f7907dd1332"}, {"code": "#(loop [x % rev []]\n   (if (nil? (first x))\n     rev\n     (recur (butlast x) (conj rev (last x)))))", "problem": 23, "user": "52cdec6ce4b07d0d72b27383"}, {"code": "#(loop [x % result []]\n         (if (nil? (last x))\n           result\n           (recur (butlast x) (conj result (last x)))))", "problem": 23, "user": "52cdec62e4b07d0d72b27382"}, {"code": "#(loop [old %\n        new '()]\n   (if (empty? old)\n     new\n     (recur (rest old) (conj new (first old)))))", "problem": 23, "user": "52d6120ee4b09f7907dd134c"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "52d4acc8e4b09f7907dd1333"}, {"code": "(fn [acc , x] \n  (if (empty? x)\n    acc \n    (recur (cons (first x) acc) (rest x)))) []", "problem": 23, "user": "5295ed30e4b02ebb4ef75028"}, {"code": "reduce (fn [f b] (conj f b)) `()", "problem": 23, "user": "52d63e89e4b09f7907dd134e"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "50f95755e4b0e7c80cb15a4b"}, {"code": "#(into () %)", "problem": 23, "user": "52d65373e4b09f7907dd1350"}, {"code": "(fn [s] (reduce conj '() s))", "problem": 23, "user": "52d532a3e4b09f7907dd133e"}, {"code": "(fn reverse-list [x]\n  (if (= 1 (count x)) \n    x \n    (cons (last x) \n          (reverse-list (take (- (count x) 1) x)\n           )\n     )\n   )\n)", "problem": 23, "user": "52d6889ae4b09f7907dd1361"}, {"code": "(fn [xs] (reduce (fn [x y] (cons y x)) [] xs))", "problem": 23, "user": "52d00521e4b07d0d72b273b3"}, {"code": "reduce (fn [coll n]\n         (cons n coll)) []", "problem": 23, "user": "52382dd6e4b0fae3832e99f1"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "51a97f7ae4b08d8ec191b827"}, {"code": "(fn my-reverse \n  [col]\n  (loop [result []\n         source col]\n    (if (empty? source)\n      result\n      (recur (conj result (last source)) (drop-last source)))))", "problem": 23, "user": "52d6c849e4b09f7907dd1368"}, {"code": "reduce conj '()", "problem": 23, "user": "52d6aadae4b09f7907dd1366"}, {"code": "(fn [s]\n  (reduce (fn [a b] (conj a b)) '() s))", "problem": 23, "user": "52c3a453e4b0c2d177d620c7"}, {"code": "(fn my-reverse [l]\n  (reduce #(concat [%2] %)\n          '() l))", "problem": 23, "user": "52d7412ce4b09f7907dd1371"}, {"code": "(fn [coll]\n\t(reduce (fn [a el]\n              (cons el a))\n            '()\n            coll))", "problem": 23, "user": "52b94e26e4b07a9af57922b9"}, {"code": "(fn [xs]\n  (reduce #(conj %1 %2) '() xs))", "problem": 23, "user": "4f8c6bf6e4b02e764a0a519b"}, {"code": "(fn f [x]\n  (if (= (count x) 1)\n    x\n    (conj (f (butlast x)) (last x))))\n;cooment", "problem": 23, "user": "52d7b0ade4b09f7907dd137c"}, {"code": "reduce #(cons %2 %1) []", "problem": 23, "user": "52d7a930e4b09f7907dd1379"}, {"code": "#(reduce (fn [x y] (cons y x)) [] %)", "problem": 23, "user": "52d5bee0e4b09f7907dd1344"}, {"code": "#(into () %)", "problem": 23, "user": "52d7b8a6e4b09f7907dd137d"}, {"code": "(fn [s] (reduce conj '() s))", "problem": 23, "user": "52d7f7efe4b09f7907dd1380"}, {"code": "(fn rev [coll]\n  (if (empty? coll)\n    '()\n    (cons (last coll) (rev (drop-last coll)))\n    )\n)", "problem": 23, "user": "52af7a5ce4b0c58976d9acbd"}, {"code": "#(let [x %]\n  (loop [a (butlast x) ; (1 2)\n  \t\t b (take-last 1 x)] ; (3)\n    (if-not (empty? a)\n    \t(recur \n    \t\t(butlast a) \n    \t\t(concat b (take-last 1 a)))\n    \tb\n    \t)))", "problem": 23, "user": "52d6767ee4b09f7907dd135d"}, {"code": "(fn r [l] (if (seq l) (conj (r (butlast l)) (last l))))", "problem": 23, "user": "52d66152e4b09f7907dd1357"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "52d87808e4b09f7907dd1396"}, {"code": "(fn [sequence]\n  (loop [s sequence\n             r '()]\n    (if (empty? s)\n      r\n      (recur (rest s) (conj r (first s))))))", "problem": 23, "user": "52d8b05de4b09f7907dd139a"}, {"code": "#(into () %)", "problem": 23, "user": "52d66ca0e4b09f7907dd135c"}, {"code": "(fn [x]\n  (let [i (vec x)]\n    (loop [n (dec (count i)) r []]\n      (if (= n -1)\n        r\n        (recur (dec n) (conj r (nth i n)))))))", "problem": 23, "user": "52d809bde4b09f7907dd1384"}, {"code": "(fn rev [l] (if (empty? l) [] (conj (rev (rest l)) (first l))))", "problem": 23, "user": "52d92f13e4b09f7907dd13a2"}, {"code": "#(into () %)", "problem": 23, "user": "52d954cae4b09f7907dd13a5"}, {"code": "(fn [xs] (reduce conj () xs))", "problem": 23, "user": "52d829a8e4b09f7907dd1389"}, {"code": "(fn f23 [se] (if (empty? se) []\n               (conj (f23 (rest se)) (first se))\n               )\n)", "problem": 23, "user": "52bf0116e4b07a9af5792328"}, {"code": "(fn revs [x] (reduce conj () x))", "problem": 23, "user": "52d74c2de4b09f7907dd1373"}, {"code": "#(reduce (fn [e v] (cons v e)) [] %1)", "problem": 23, "user": "50c2fbebe4b00e537d00253c"}, {"code": "#(loop [acc '() rst %]\n   (if (empty? rst)\n     acc\n     (recur (conj acc (first rst)) (rest rst))))", "problem": 23, "user": "52d9ba39e4b09f7907dd13af"}, {"code": "#(into () %)", "problem": 23, "user": "52da25b0e4b09f7907dd13b4"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "52d862fae4b09f7907dd1392"}, {"code": "reduce conj '()", "problem": 23, "user": "52bf33c2e4b07a9af579232f"}, {"code": "into ()", "problem": 23, "user": "52dad8bde4b09f7907dd13be"}, {"code": "#(into () %)", "problem": 23, "user": "52daf558e4b09f7907dd13c1"}, {"code": "#(reduce (fn [f r] (concat (list r) f)) [] %1)", "problem": 23, "user": "52dbfc6be4b09f7907dd13c8"}, {"code": "(fn my-reverse [seq]\n  (loop [seq seq acc []]\n    (if (empty? seq)\n      acc\n      (recur (rest seq) (cons (first seq) acc)))))", "problem": 23, "user": "52d81990e4b09f7907dd1388"}, {"code": "(fn [xs]\n  (reduce #(conj % %2) () xs))", "problem": 23, "user": "52cca96ae4b07d0d72b2736e"}, {"code": "(fn [xs] (map-indexed (fn [idx it] (nth (seq xs) (- (count xs) (inc idx)))) xs))", "problem": 23, "user": "52dc55e2e4b09f7907dd13cd"}, {"code": "(fn my-reverse\n  [s]\n  (if (empty? s)\n    s\n    (cons (last s) (my-reverse(butlast s)) ) ) )", "problem": 23, "user": "52da0712e4b09f7907dd13b2"}, {"code": "#(loop [fwd %1 rev '()]\n   (if (empty? fwd) rev\n     (recur (rest fwd) (conj rev (first fwd)))))", "problem": 23, "user": "51c24911e4b0d204dbe2ca20"}, {"code": "(fn rev [col]\n  (if (empty? col) col (cons (last col) (rev (drop-last col)))))", "problem": 23, "user": "52dcd378e4b09f7907dd13d6"}, {"code": "#(reduce (fn [acc i] (conj acc i)) '() %)", "problem": 23, "user": "52dd6cc8e4b09f7907dd13e2"}, {"code": "reduce conj '()", "problem": 23, "user": "52d40d81e4b09f7907dd1329"}, {"code": "(fn rev [col]\n  (let [lst (last col) rst (butlast col)]\n    (if (= (count rst) 1)\n      (cons lst rst)\n      (cons lst (rev rst)))))", "problem": 23, "user": "51f8e057e4b09be9c177e53d"}, {"code": "(fn rv [xs] (if (empty? xs) nil (conj (vec (rv (rest xs))) (first xs))))", "problem": 23, "user": "52d95491e4b09f7907dd13a4"}, {"code": "#(reduce (fn [s i] (cons i s) ) [] %)", "problem": 23, "user": "51ee669ce4b09915f9b23c03"}, {"code": "(fn [coll] (map #(last (take % coll)) (map #(- (count coll) (first %)) (map vector (iterate inc 0) coll))))", "problem": 23, "user": "52ddae61e4b09f7907dd13e8"}, {"code": "sort #(- (compare %1 %2))", "problem": 23, "user": "52dde81fe4b09f7907dd13eb"}, {"code": "(fn [x]\n  ((fn rev [y accum]\n    (if (empty? y)\n      accum\n      (rev (rest y) (conj accum (first y))))) x '()))", "problem": 23, "user": "52de249ae4b09f7907dd13ed"}, {"code": "(fn rev [l] (if (empty? l) '() (conj (rev (butlast l)) (last l))))", "problem": 23, "user": "517e9526e4b09104ecebe7e2"}, {"code": "(fn [x] (reduce conj () x))", "problem": 23, "user": "52de6d18e4b09f7907dd13f2"}, {"code": "(fn rvrs [elems]\n  (if (empty? elems)\n    elems\n    (cons (last elems) (rvrs (drop-last elems)))))", "problem": 23, "user": "52deb735e4b09f7907dd13f7"}, {"code": "(fn [x] (loop [accum '() x x] (if (empty? x) accum (recur (conj accum (first x)) (rest x)))))", "problem": 23, "user": "521b481de4b0c4ef0be83037"}, {"code": "#(loop [ input %1 output '() ] (if (= 0 (count input)) (vec output) (recur (rest input) (conj output (first input) ) ) ) )", "problem": 23, "user": "52da7ae5e4b09f7907dd13b8"}, {"code": "#(into '() %)", "problem": 23, "user": "52df232fe4b09f7907dd13fc"}, {"code": "#(into () %)", "problem": 23, "user": "513caa36e4b0b86ece9f3229"}, {"code": "#(loop [src % out []] (if-let [i (last src)] (recur (drop-last src) (conj out i)) out))", "problem": 23, "user": "51c7d82be4b07ef393169e47"}, {"code": "(fn foo [s] (let [f (fn f [r s] (if (empty? s) r (f (conj r (first s)) (rest s))))] (f '() s)))", "problem": 23, "user": "52dfc89be4b09f7907dd1405"}, {"code": "(fn [coll] (reduce conj () coll))", "problem": 23, "user": "52c00e4fe4b07a9af5792342"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "52d9aaa1e4b09f7907dd13ae"}, {"code": "(fn myrev [arr & {:keys [newarr] :or {newarr []}}]\n  (if (last arr)\n    (myrev (drop-last arr) :newarr (conj newarr (last arr)))\n    newarr\n    ))", "problem": 23, "user": "52c8a8b9e4b0c2d177d62139"}, {"code": "(fn [coll] (reduce conj '() coll))", "problem": 23, "user": "52e087dde4b09f7907dd1412"}, {"code": "(fn [a] (apply conj '() a))", "problem": 23, "user": "51910da7e4b0f8ef0be96bf9"}, {"code": "#(loop [[r & more :as all] (seq %) acc '()]\n    (if all\n      (recur more (cons r acc))\n      acc))", "problem": 23, "user": "52dfc369e4b09f7907dd1404"}, {"code": "#(reduce (fn [x y] (conj x y)) '() %)", "problem": 23, "user": "52e0d23ce4b09f7907dd1415"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "52dfe1d2e4b09f7907dd1406"}, {"code": "(fn [x] (reduce conj () x))", "problem": 23, "user": "52e18377e4b09f7907dd1425"}, {"code": "#(reduce (fn [r c] (into [c] r)) (empty %) %)", "problem": 23, "user": "52e18d9ce4b09f7907dd1428"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "4ea8570f535d7eef308072f8"}, {"code": "(fn [sequ] (loop [s sequ acc []] (if-not (seq s) acc (recur (butlast s) (conj acc (last s))))))", "problem": 23, "user": "52e18024e4b09f7907dd1424"}, {"code": "(fn [coll]\n    (let [sorted-coll (sort coll)]\n       (loop [result [] coll sorted-coll]\n          (if (zero? (count coll))\n             result\n             (recur (conj result (last coll)) (drop-last coll))))))", "problem": 23, "user": "4fb99483e4b081705acca2da"}, {"code": "(fn [seq] (reduce #(concat [%2] %1) [] seq))", "problem": 23, "user": "52e003c1e4b09f7907dd1407"}, {"code": "into '()", "problem": 23, "user": "51e3a549e4b0c611d6113e47"}, {"code": "reduce conj '()", "problem": 23, "user": "52e0e646e4b09f7907dd1416"}, {"code": "(fn self\n  ([s]\n  \t(self s '()))\n  ([s accum]\n   \t(if (empty? s)\n      accum\n\t  (recur (rest s) (conj accum (first s))))))", "problem": 23, "user": "52e27304e4b09f7907dd1434"}, {"code": "(fn func [x] (reduce conj () x))", "problem": 23, "user": "52e253fce4b09f7907dd1432"}, {"code": "(fn rev [s] (if (not-empty s) (conj (rev (drop-last 1 s)) (last s)) '()))", "problem": 23, "user": "52e295fae4b09f7907dd1437"}, {"code": "(fn [s] (reduce conj nil s))", "problem": 23, "user": "52d83c2ce4b09f7907dd138d"}, {"code": "#(into () %)", "problem": 23, "user": "52e014bfe4b09f7907dd1409"}, {"code": "(fn [xs]\n  (loop [acc '() zs xs]\n    (if (= nil (first zs))\n      acc\n      (recur (cons (first zs) acc) (rest zs)))))", "problem": 23, "user": "52e276d9e4b09f7907dd1436"}, {"code": "(fn [coll]\n    (reduce conj () coll))", "problem": 23, "user": "5279cb1ae4b03e8d9a4a753f"}, {"code": "reduce conj '()", "problem": 23, "user": "52e32d55e4b09f7907dd143e"}, {"code": "reduce #(conj % %2) '()", "problem": 23, "user": "52e356f8e4b09f7907dd1442"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "51f81925e4b09be9c177e526"}, {"code": "into ()", "problem": 23, "user": "52e3912ee4b09f7907dd1446"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "52e4086be4b09f7907dd1449"}, {"code": "(fn rev [xs]\n  (if (empty? xs)\n    xs\n    (let [y (first xs)\n          ys (rest xs)]\n      (concat (rev ys) [y]))))", "problem": 23, "user": "52e41c22e4b09f7907dd144b"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "52d8633ee4b09f7907dd1393"}, {"code": "(fn [seq] (reduce #(cons %2 %1) (empty seq) seq))", "problem": 23, "user": "52e4361fe4b09f7907dd144d"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "52d6a9c2e4b09f7907dd1365"}, {"code": "(fn [coll]\n  (let [the-vec (vec coll)]\n    (loop [in the-vec out []]\n      (if (empty? in)\n        out\n        (recur (rest in) (cons (first in) out))))))", "problem": 23, "user": "52e44a22e4b09f7907dd144e"}, {"code": "(fn [x] (reduce #(conj %1 %2) () x))", "problem": 23, "user": "52d24f60e4b099d49816f0a8"}, {"code": "#(loop [x % z '()] (if (empty? x) z (recur (rest x) (conj z (first x)))))", "problem": 23, "user": "52e48632e4b09f7907dd1450"}, {"code": "(fn reve [x] (if (= (count x) 1) x (concat (reve (rest x)) (list (first x)))))", "problem": 23, "user": "52b9c5e8e4b07a9af57922c2"}, {"code": "into '()", "problem": 23, "user": "52e4cc2ee4b09f7907dd1455"}, {"code": "#((fn bla [xs acc] (if (seq xs) (bla (rest xs)(conj acc (first xs))) acc)) % '())", "problem": 23, "user": "52e4f06be4b09f7907dd1456"}, {"code": "(fn [xs]\n  (loop [s xs, rs nil]\n    (print s)\n     (if (empty? s)\n       rs\n       (recur (rest s) (concat (take 1 s) rs )))))", "problem": 23, "user": "52e4a40ae4b09f7907dd1453"}, {"code": "#(into '() %)", "problem": 23, "user": "52ad68f5e4b0c58976d9ac94"}, {"code": "(fn rev [x] (if (not= [] x) (conj (rev (rest x)) (first x)) []))", "problem": 23, "user": "52e544d3e4b09f7907dd145e"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "52e58d1ae4b09f7907dd1463"}, {"code": "#(for [x (range (count %))]  ((vec %) (- (count %) 1 x)))", "problem": 23, "user": "52d45010e4b09f7907dd132d"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "52e59ca5e4b09f7907dd1464"}, {"code": "(fn [s]\n  ((fn transfer [s dest]\n    (if (empty? s)\n      dest\n      (transfer (rest s) (cons (first s) dest)))) s '()))", "problem": 23, "user": "52e32906e4b09f7907dd143d"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "52e5da25e4b09f7907dd1467"}, {"code": "#(into () %)", "problem": 23, "user": "52e614b8e4b09f7907dd1469"}, {"code": "(fn rev[x] (if (empty? x) '() (cons (last x) (rev (butlast x)))))", "problem": 23, "user": "52e0c195e4b09f7907dd1414"}, {"code": "x", "problem": 23, "user": "52e635b3e4b09f7907dd146f"}, {"code": "(fn [coll]\n  (reduce (fn [acc val]\n            (cons val acc)) (empty coll) coll))", "problem": 23, "user": "52e52f3ce4b09f7907dd1459"}, {"code": "#(reduce conj () %1)", "problem": 23, "user": "4f963487e4b0dcca54ed6cd9"}, {"code": "(fn [s]\n(reduce\n  (fn [re item] (reduce conj [item] re))\n  []\n  s\n))", "problem": 23, "user": "52e68c90e4b09f7907dd1478"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "51f2a491e4b0210f90e74553"}, {"code": "into ()", "problem": 23, "user": "52b0ec23e4b0c58976d9acd1"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "52e75667e4b09f7907dd1485"}, {"code": "into ()", "problem": 23, "user": "529b44afe4b02ebb4ef7509d"}, {"code": "#(drop-last (count %) (reduce conj (seq %) (seq %)))", "problem": 23, "user": "52e54040e4b09f7907dd145c"}, {"code": "(fn [v] (vec (reduce (fn [acc x] (conj acc x)) '() v)))", "problem": 23, "user": "52dc2bc8e4b09f7907dd13ca"}, {"code": "(fn [l]\n  ((fn rev [lst emp]\n     (if (= lst '())\n       emp\n       (rev (rest lst) (cons (first lst) emp)))) l '()))", "problem": 23, "user": "52e16139e4b09f7907dd141f"}, {"code": "(fn[tab](reduce #(conj %1 %2) '() tab))", "problem": 23, "user": "52e807b3e4b09f7907dd1490"}, {"code": "(fn [l] (reduce #(cons %2 %1) [] l))", "problem": 23, "user": "52d1e364e4b0d9f9285948e7"}, {"code": "#(vals (zipmap (range 5) %))", "problem": 23, "user": "51f2b8f1e4b0210f90e74556"}, {"code": "into '()", "problem": 23, "user": "52e161e8e4b09f7907dd1420"}, {"code": "(fn [x] (loop [ s x rs #{}]\n\t(if (empty? s)\n\t\trs\n\t\t(recur (rest s) (cons (first s) rs ) ) ) ) )", "problem": 23, "user": "52e8ecbbe4b09f7907dd14a0"}, {"code": ";;#(reduce (fn [ls e] (conj ls e)) '() %)\n\n#(into '() %)", "problem": 23, "user": "52e3e6a8e4b09f7907dd1448"}, {"code": "#(reduce (fn [acc x] (concat [x] acc)) [] %)", "problem": 23, "user": "52e6351ae4b09f7907dd146e"}, {"code": "(fn reverse-seq[lst]\n  ((fn reverser[lst, rev-lst]\n    (if (nil? lst)\n      rev-lst\n      (reverser (next lst)\n                   (cons (first lst) rev-lst))))\n   lst '()))", "problem": 23, "user": "52e42430e4b09f7907dd144c"}, {"code": "#(reduce (fn [xs x] (cons x xs)) [] %)", "problem": 23, "user": "52606318e4b03e8d9a4a7036"}, {"code": "into ()", "problem": 23, "user": "52d8eb78e4b09f7907dd139d"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "52dbfe84e4b09f7907dd13c9"}, {"code": "(fn [ls] (loop [s ls rs (list)]\n  (if (not-empty s)\n    (recur (rest s)(conj rs (first s)))\n    rs)))", "problem": 23, "user": "52e7d3d7e4b09f7907dd148e"}, {"code": "(partial into '())", "problem": 23, "user": "52e66ddce4b09f7907dd1476"}, {"code": "#(loop [coll %, dest []]\n    (if (next coll)\n      (recur (take (dec (count coll)) coll) (conj dest (last coll)))\n      (conj dest (last coll))))", "problem": 23, "user": "50b79c5fe4b0cf3e51c3046c"}, {"code": "reduce conj '()", "problem": 23, "user": "52e7afe1e4b09f7907dd148b"}, {"code": "reduce #(cons %2 %1) []", "problem": 23, "user": "52eb8b65e4b0705949c44441"}, {"code": "reduce #(cons %2 %1) []", "problem": 23, "user": "52d96f7ce4b09f7907dd13a8"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "529dfc6de4b04e0c58e87b8a"}, {"code": "(fn [coll]\n\t(loop [xs coll, rxs nil]\n\t (if (seq xs)\n\t\t(recur (rest xs) (cons (first xs) rxs))\n\t\trxs)))", "problem": 23, "user": "52ea764ee4b09f7907dd14be"}, {"code": "(fn reverseSeq [array] (if (empty? array) [] (conj (reverseSeq (rest array)) (first array))))", "problem": 23, "user": "52ec1583e4b0705949c44449"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "529223cbe4b0239c8a67af26"}, {"code": "#(into () %)", "problem": 23, "user": "52ec2b9ae4b0705949c4444f"}, {"code": "#(into () %)", "problem": 23, "user": "52ec4322e4b0705949c44451"}, {"code": "(fn [x] (reduce conj () x))", "problem": 23, "user": "52e73b36e4b09f7907dd1483"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "52e6aea1e4b09f7907dd147c"}, {"code": "(fn [arg]\n    (reduce (fn [x y] (concat [y] x))\n            []\n            arg\n    )\n)", "problem": 23, "user": "52ecb1efe4b0705949c44454"}, {"code": "(fn [coll]\n  (loop [in coll\n         out '()]\n    (if (empty? in)\n      out\n      (recur (rest in) (cons (first in) out)))))", "problem": 23, "user": "52d7f9a8e4b09f7907dd1381"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "52edc795e4b05e3f0be25ebc"}, {"code": "(fn ! [lst] (if (= lst '()) \n                        nil\n                        (conj (! (drop-last 1 lst)) (last lst))))", "problem": 23, "user": "52eb2ec9e4b0705949c44439"}, {"code": "(fn rev [xs]\n  (if (empty? xs)\n    []\n  \t(conj (rev (rest xs)) (first xs))))", "problem": 23, "user": "52ee20bbe4b05e3f0be25ec2"}, {"code": "(fn rev\n  ([xs] (rev xs []))\n  ([xs ys] (if (empty? xs)\n             ys\n             (recur (rest xs) (cons (first xs) ys)))))", "problem": 23, "user": "52d660eae4b09f7907dd1356"}, {"code": "(fn revert \n  ([seq] (revert seq nil))\n  ([seq rev] (if (empty? seq) rev (recur (rest seq) (conj rev (first seq))))))", "problem": 23, "user": "52e82818e4b09f7907dd1496"}, {"code": "(fn [sequ]\n  (loop [original sequ\n         reversed '()]\n    (if (empty? original)\n      reversed\n      (recur (rest original) (conj reversed (first original)))\n    )))", "problem": 23, "user": "52ee46e5e4b05e3f0be25ec5"}, {"code": "(fn\n  [coll]\n  ((fn\n     [coll acc]\n      (if (empty? coll)\n        acc\n        (recur (rest coll) (conj acc (first coll)))))\n   coll ()))", "problem": 23, "user": "52e94348e4b09f7907dd14a9"}, {"code": "#(into () %)", "problem": 23, "user": "52eee533e4b05e3f0be25ecb"}, {"code": "#(reduce conj nil %)", "problem": 23, "user": "52efd3d9e4b05e3f0be25ed4"}, {"code": "(fn reverse-it [x]\n  (if (empty? (rest x))\n             x\n             (concat (reverse-it (rest x))  (list (first x)))))", "problem": 23, "user": "52f01bfbe4b05e3f0be25ed9"}, {"code": "(fn [coll] (into () coll))", "problem": 23, "user": "513f98f9e4b00f13ea1bd88f"}, {"code": "#(loop [in % out []]\n   (if (empty? in)\n     out\n     (recur (rest in) (concat [(first in)] out))))", "problem": 23, "user": "52f07ccee4b05e3f0be25edf"}, {"code": "into ()", "problem": 23, "user": "52eff3e8e4b05e3f0be25ed7"}, {"code": "(fn myrev [x] (if (> (count x) 1) (conj (myrev (butlast x)) (last x)) x))", "problem": 23, "user": "5176afd2e4b085adf681d889"}, {"code": "(fn [coll] (reduce conj '() coll))", "problem": 23, "user": "52ea4b23e4b09f7907dd14b8"}, {"code": "(fn rev[xs] (if (empty? xs) '[] (conj (rev (rest xs)) (first xs))))", "problem": 23, "user": "52f10094e4b05e3f0be25ee8"}, {"code": "(fn reverse-sequence [seq]\n  (if (empty? seq)\n    seq\n    (cons (last seq) (reverse-sequence (drop-last seq)))))", "problem": 23, "user": "52ec1dfbe4b0705949c4444b"}, {"code": "#(apply conj '() %)", "problem": 23, "user": "52bacfa8e4b07a9af57922d6"}, {"code": "#(into () %)", "problem": 23, "user": "52f021c1e4b05e3f0be25edb"}, {"code": "#(loop [items %\n        rev []]\n   (if (= (count items) 0)\n     rev\n     (recur (butlast items) (conj rev (last items)))\n   ))", "problem": 23, "user": "52efc98de4b05e3f0be25ed2"}, {"code": "(fn [coll-in]\n  (let [coll (apply vector coll-in)]\n  (loop [result[] i (count coll)]\n   (if (zero? i)\n       result\n\n     (recur  (conj  result (nth  coll (- i 1)))   (dec i)))\n )))", "problem": 23, "user": "52cb94e5e4b07d0d72b2734e"}, {"code": "(fn [x] (loop [lst x new-lst []] (if (empty? lst) new-lst (recur (rest lst) (cons (first lst) new-lst)))))", "problem": 23, "user": "52f304b4e4b05e3f0be25f07"}, {"code": "(fn [coll] \n  (loop [in coll out []] \n    (if \n      (empty? in) \n      out\n      (recur \n        (rest in)\n        (cons (first in) out) \n      )\n    )\n  )\n)", "problem": 23, "user": "52f1bc81e4b05e3f0be25eef"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "52f381f3e4b05e3f0be25f10"}, {"code": "reduce conj '()", "problem": 23, "user": "52f3af46e4b05e3f0be25f14"}, {"code": "(fn [x]\n  (loop [temp x\n         result []\n         counter (- (count x) 1)]\n    (if (< counter 0)\n      \tresult\n      \t(recur (take counter x) (conj result (last temp)) (dec counter)))))", "problem": 23, "user": "52a5a8ebe4b0c58976d9abed"}, {"code": "#(loop [sq %\n        ret '()]\n   (if (empty? sq)\n     ret\n     (recur (rest sq) (conj ret (first sq)))))", "problem": 23, "user": "52f3ee17e4b05e3f0be25f19"}, {"code": "(fn [coll] \n         ((fn [from to] \n                     (if (empty? from) \n                       to \n                       (recur (rest from) (conj to (first from))))) coll '()))", "problem": 23, "user": "52e814fee4b09f7907dd1493"}, {"code": "reduce conj '()", "problem": 23, "user": "52e80e87e4b09f7907dd1492"}, {"code": "(fn aa [x] \n  (if (= (count x) 1)\n    x\n    (conj (vec (aa (rest x))) (first x))\n  )\n    )", "problem": 23, "user": "52e9dbe5e4b09f7907dd14b4"}, {"code": "(fn [items]\n\t\t(reduce (fn [target item] (do (cons item target))) [] items))", "problem": 23, "user": "52f31489e4b05e3f0be25f0b"}, {"code": "#(into () %)", "problem": 23, "user": "52e68e61e4b09f7907dd1479"}, {"code": "reduce conj '()", "problem": 23, "user": "52ecd34ee4b0705949c44457"}, {"code": "(fn myreverse [s] (\n         if (or (= (count s) 1) (= (count s) 0))\n             s\n            (concat (list (last s)) \n                    (myreverse (drop-last (rest s))) \n                    (list (first s))\n             )   \n                       \n                       ))", "problem": 23, "user": "52ea5e0ae4b09f7907dd14bc"}, {"code": "(fn [coll]\n  (reduce conj '() coll))", "problem": 23, "user": "51ab4082e4b04e3dc0c27b31"}, {"code": "#(into () %)", "problem": 23, "user": "52f44c84e4b05e3f0be25f20"}, {"code": "(fn reverse-\n  ([x]\n   (let [a '()]\n     (if (empty? x)\n       a\n       (reverse- (butlast x) (concat a [(last x)])))))\n  ([x y]\n   (if (empty? x)\n     y\n     (recur (butlast x) (concat y [(last x)])))))", "problem": 23, "user": "52e6975de4b09f7907dd147a"}, {"code": "#(loop [coll %, newcoll []]\n   (if (empty? coll)\n     newcoll\n     (recur (rest coll) (cons (first coll) newcoll))\n   )\n)", "problem": 23, "user": "52eaeb88e4b0705949c44436"}, {"code": "#(loop [ct 0, res '(), data %1]\n   (if (not (= ct (count %1))) (recur (+ ct 1) (conj res (first data)) (rest data))\n     res))", "problem": 23, "user": "52f5eefbe4b09b582c12c9cb"}, {"code": "(fn foo [x] (if (empty? x) nil (cons (last x) (foo (butlast x)))))", "problem": 23, "user": "52f182d8e4b05e3f0be25eed"}, {"code": "(fn\n  [input]\n  (loop [items input result []]\n    (if (empty? items)\n      result\n      (recur (rest items) (cons (first items) result)))))", "problem": 23, "user": "52f32c24e4b05e3f0be25f0d"}, {"code": "(fn [x] (loop [rest-list x\n                  rev-list '()]\n             (if (empty? (rest rest-list))\n               (conj rev-list (first rest-list))\n               (recur (rest rest-list) (conj rev-list (first rest-list))))))", "problem": 23, "user": "4feacba7e4b0140c20fb9c0e"}, {"code": "(fn [x] (reduce conj () x))", "problem": 23, "user": "52f4580de4b05e3f0be25f21"}, {"code": "#(reduce (fn [f s] (conj f s)) '() %)", "problem": 23, "user": "52570aeae4b0541d1855ba42"}, {"code": "into ()", "problem": 23, "user": "52f53589e4b05e3f0be25f2c"}, {"code": "(fn me [xs]\n  (if (empty? xs)\n    '()\n  (concat (me (rest xs)) (list (first xs)))))", "problem": 23, "user": "52f772e2e4b047fd55836fc3"}, {"code": "#(loop [x %\n        y '()\n        i (count %)]\n   (if (= i 0)\n     y\n     (recur (rest x) (conj y (first x)) (dec i))))", "problem": 23, "user": "52f685eae4b047fd55836fb8"}, {"code": "into '()", "problem": 23, "user": "52d838bee4b09f7907dd138b"}, {"code": "(fn [arr] (for [i (range (count arr))] ((fn [arr2 n] (first (take-last 1 (take n arr2)))) arr (- (count arr) i))))", "problem": 23, "user": "52f84c94e4b047fd55836fcf"}, {"code": "(fn f23 [a]\n  (loop [a a\n         b ()]\n     (if (= (vec a) [])\n       b\n       (recur (rest a) (conj b (first a))))))", "problem": 23, "user": "52c08c59e4b07a9af5792351"}, {"code": "(fn foo [coll] \n  (reduce #(concat [%2] %1) [] coll))", "problem": 23, "user": "52f4fae4e4b05e3f0be25f27"}, {"code": "#(into () %)", "problem": 23, "user": "52f5f8b4e4b09b582c12c9cc"}, {"code": "reduce #(cons %2 %1) []", "problem": 23, "user": "52f882c4e4b047fd55836fd1"}, {"code": "(fn [xs]\n  (reduce conj () xs))", "problem": 23, "user": "52f89125e4b047fd55836fd4"}, {"code": "(partial reduce (fn [x y] (conj x y)) '())", "problem": 23, "user": "52f89ac8e4b047fd55836fd7"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "52f8b2a2e4b047fd55836fda"}, {"code": "(fn [s]\n  (reduce conj '() s))\n\n;into ()\n\n;#(into () %)\n\n;(fn [ls] \n;  (loop [rev '() tls ls]\n;    (if (empty? tls)\n;      rev\n;      (recur (conj rev (first tls)) (rest tls)))))", "problem": 23, "user": "52f3568fe4b05e3f0be25f0e"}, {"code": "(partial reduce conj '())", "problem": 23, "user": "52f8f4d1e4b047fd55836fde"}, {"code": "#( reduce (fn[p n] (conj p n)) '() % )", "problem": 23, "user": "52e980b3e4b09f7907dd14af"}, {"code": "(fn rev-seq [lat]\n  (into '() lat))", "problem": 23, "user": "52f928c1e4b047fd55836fe5"}, {"code": "into ()", "problem": 23, "user": "52f9c68ce4b047fd55836fef"}, {"code": "(fn [items]\n  (into () items))", "problem": 23, "user": "52f94752e4b047fd55836fe6"}, {"code": "#(loop [coll % x []] (if (empty? coll) x (recur (butlast coll) (conj x (last coll)))))", "problem": 23, "user": "52f13a77e4b05e3f0be25ee9"}, {"code": "(fn [coll] \n  (reduce conj () coll))", "problem": 23, "user": "52fa8f71e4b047fd55836ffb"}, {"code": "#(into () %)", "problem": 23, "user": "52823129e4b0757a1b171452"}, {"code": "into ()", "problem": 23, "user": "52dea949e4b09f7907dd13f4"}, {"code": "reduce conj '()", "problem": 23, "user": "527d59f9e4b0757a1b171382"}, {"code": "#(loop [xs %1\n        current ()]\n    (if (= nil (first xs))\n      current\n        (recur (rest xs) (conj current (first xs)))))", "problem": 23, "user": "52fa250ee4b047fd55836ff3"}, {"code": "(fn ! [x] (if (seq x) (concat (! (rest x)) [(first x)]) []))", "problem": 23, "user": "52faec2ee4b047fd55837004"}, {"code": "(fn [coll]\n  (loop [temp nil col coll]\n    (if (empty? col) temp (recur (conj temp (first col)) (rest col)))))", "problem": 23, "user": "52fb903ee4b047fd5583700b"}, {"code": "(fn [coll] (loop [[e & more :as all] (seq coll) acc '()] (if all (recur more (cons e acc)) acc)))", "problem": 23, "user": "52fb64b7e4b047fd55837009"}, {"code": "#(into () %)", "problem": 23, "user": "52f7dc80e4b047fd55836fc9"}, {"code": "#(reduce \n  (fn [xs x] (conj xs x))\n  (list) \n  %)", "problem": 23, "user": "52facb9de4b047fd55837002"}, {"code": "(fn [x]\n  (loop [col (seq x)\n         rcol '()]\n  (if (empty? col)\n    rcol\n    (recur (rest col) (cons (first col) rcol)))))", "problem": 23, "user": "5000a543e4b0678c553fc40f"}, {"code": "#(reduce (fn [accum x] (conj accum x)) '() %)", "problem": 23, "user": "52fbc44be4b047fd55837010"}, {"code": "#(loop [col %1\n        rev '()]\n   (cond\n    (empty? col)  rev\n    :else \t \t  (recur (rest col) (conj rev (first col)))))", "problem": 23, "user": "52fc89b2e4b047fd55837019"}, {"code": "#(into () %)", "problem": 23, "user": "52fc34cee4b047fd55837015"}, {"code": "#((fn helper [todo done]\n   \t(if (empty? todo)\n      done\n      (helper (rest todo) (cons (first todo) done))\n      )\n    ) % [])", "problem": 23, "user": "52f8b86de4b047fd55836fdb"}, {"code": "(fn [coll]\n  (loop [coll coll, result '()]\n    (if (seq coll)\n      (recur (rest coll) (conj result (first coll)))\n      result\n    )))", "problem": 23, "user": "52fcfeeee4b047fd55837027"}, {"code": "(fn [x] (into () x))", "problem": 23, "user": "52f9ce6de4b047fd55836ff0"}, {"code": "#(into '() %)", "problem": 23, "user": "52faff0de4b047fd55837007"}, {"code": "(fn r [els] (loop [x [] ys els] (if (empty? ys) x (recur (cons (first ys) x) (rest ys)))))", "problem": 23, "user": "52ee0de4e4b05e3f0be25ec1"}, {"code": "(fn my-rev [xs]\n  (if (last xs)\n    (cons (last xs) (my-rev (butlast xs)))\n    ()))", "problem": 23, "user": "52fafd5ce4b047fd55837006"}, {"code": "(fn rev [x] (if (= 1 (count x)) ( vec x) (conj (rev (rest x)) (first x))))", "problem": 23, "user": "52fa57ece4b047fd55836ff8"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "52fe1b61e4b047fd55837035"}, {"code": "(fn [s] (reduce conj '() s))", "problem": 23, "user": "51a3b135e4b0e77c4ca60bf6"}, {"code": "reduce conj '()", "problem": 23, "user": "5300158ae4b0d8b024fd370f"}, {"code": "into '()", "problem": 23, "user": "52eb400ee4b0705949c4443b"}, {"code": "(fn [x] ((fn rev[x y] (if (empty? x) y (rev (first (split-at (dec(count x)) x)) (concat (vec y) [(last x)]) ))) x []))", "problem": 23, "user": "5300aa1de4b0d8b024fd3710"}, {"code": "(fn [x] (reduce #(cons %2 %) nil x))", "problem": 23, "user": "52ffb7f2e4b0d8b024fd370b"}, {"code": "(fn [s] (reduce (fn [res x] (cons x res)) [] s))", "problem": 23, "user": "5300f68de4b0d8b024fd3714"}, {"code": "(fn [x] (loop [r x s '()] (if (= (count r) 0) s (recur (rest r) (conj s (first r))))))", "problem": 23, "user": "53012382e4b0d8b024fd3718"}, {"code": "(fn [lst] (reduce (fn [xs x] (conj xs x)) '() lst))", "problem": 23, "user": "52f2b450e4b05e3f0be25efd"}, {"code": "reduce conj '()", "problem": 23, "user": "5300c383e4b0d8b024fd3712"}, {"code": "(fn my-reverse\n  [input]\n  (loop [todo input result []]\n    (if (empty? todo)\n      result\n      (recur (rest todo) (cons (first todo) result)))))", "problem": 23, "user": "5300b750e4b0d8b024fd3711"}, {"code": "(fn f [coll]\n  (if (empty? coll)\n    coll\n    (cons (last coll) (f (butlast coll)))))", "problem": 23, "user": "51d7f34fe4b0154f82ab9303"}, {"code": "#(reduce (fn [x a] (conj x a)) '() %)", "problem": 23, "user": "5301d41ae4b0d8b024fd3720"}, {"code": "reduce #(cons %2 %1) []", "problem": 23, "user": "52fa4f48e4b047fd55836ff7"}, {"code": "(fn my-reverse [lst]\n  (cond (empty? lst)()\n        :else (cons (last lst)\n                    (my-reverse (butlast lst)))))", "problem": 23, "user": "52fe3a9de4b047fd55837039"}, {"code": "#(into () %)", "problem": 23, "user": "5302b580e4b0d8b024fd3732"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "5302b580e4b0d8b024fd3733"}, {"code": "(fn [s] (vec (reduce conj () s)))", "problem": 23, "user": "5302bb37e4b0d8b024fd3734"}, {"code": "(fn [xs]\n  (loop [ys []\n         xs xs]\n    (if (empty? xs)\n      ys\n      (recur (conj ys (last xs)) (drop-last xs)))))", "problem": 23, "user": "53029a95e4b0d8b024fd3730"}, {"code": "#(into '() (filter (constantly true) %))", "problem": 23, "user": "512587ade4b05d10e3e395fb"}, {"code": "(fn my-reverse [coll] ((fn my-reverse-helper [xs result] (if (empty? xs) result (recur (next xs) (cons (first xs) result)))) coll []))", "problem": 23, "user": "53028354e4b0d8b024fd372b"}, {"code": "(fn [sequence] \n  (loop [acc [(last sequence)]\n         sequence (butlast sequence)]\n    (if (empty? sequence)\n      acc\n      (recur (concat acc [(last sequence)]) (butlast sequence)) )))", "problem": 23, "user": "52d2e2a9e4b099d49816f0b8"}, {"code": "#(into '() %)", "problem": 23, "user": "52f30b84e4b05e3f0be25f09"}, {"code": "#(reduce (fn[x,y](cons y x)) [] %)", "problem": 23, "user": "52f818a6e4b047fd55836fcc"}, {"code": "(fn[coll] (loop[coll coll new []] (if (empty? coll) new (recur (drop-last coll)(conj new (last coll))))))", "problem": 23, "user": "518c1079e4b0f028e99addf8"}, {"code": "#(into () %)", "problem": 23, "user": "52fc2892e4b047fd55837014"}, {"code": "#(reduce (fn [x y] (conj x y)) '() %)", "problem": 23, "user": "53036d2ce4b0d8b024fd3741"}, {"code": "(fn f [xs]                    \n  (let [rev (reduce conj () xs)]\n    (if (vector? xs)            \n      (apply vector rev)        \n      rev)))", "problem": 23, "user": "52fff1a8e4b0d8b024fd370d"}, {"code": "(fn rev[seqnc]\n\t(if (= 1 (count seqnc)) seqnc (cons (last seqnc) (rev (butlast seqnc)))))", "problem": 23, "user": "51a89081e4b08d8ec191b814"}, {"code": "(fn rev\n  ([x] (rev x (count x) []))\n  ([x left coll]\n   (if (> left 0)\n     (recur (drop-last x) (- left 1) (conj coll (last x)))\n     coll\n   )\n  )\n)", "problem": 23, "user": "5303a027e4b0d8b024fd3745"}, {"code": "#(into () %)", "problem": 23, "user": "52fd3da0e4b047fd5583702a"}, {"code": "reduce (fn [x y] (cons y x)) ()", "problem": 23, "user": "530578ede4b0d8b024fd3760"}, {"code": "reduce (fn [acc,value] (cons value acc)) []", "problem": 23, "user": "53038619e4b0d8b024fd3742"}, {"code": "sort #(compare (reduce + (flatten [%2]))  (reduce + (flatten [%1])))", "problem": 23, "user": "5302d79ce4b0d8b024fd3736"}, {"code": "(fn [x] (loop [[x & xs] (seq x) acc '()] (if xs (recur xs (conj acc x)) (conj acc x))))", "problem": 23, "user": "530394b4e4b0d8b024fd3743"}, {"code": "#(loop [ls % reversed '()] (if (empty? ls) reversed (recur (rest ls) (conj reversed (first ls)))))", "problem": 23, "user": "5301157ae4b0d8b024fd3717"}, {"code": "#(reduce (fn [s e] (conj s e)) '() %)", "problem": 23, "user": "52f44a16e4b05e3f0be25f1f"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "53028ec0e4b0d8b024fd372d"}, {"code": "(fn f [s] (if (empty? s) s (concat [(last s)] (f (butlast s)))))", "problem": 23, "user": "4f48f587e4b0d56e7bb92be2"}, {"code": "#(into () %)", "problem": 23, "user": "53050a4be4b0d8b024fd3756"}, {"code": "(partial reduce conj nil)\n; this works by lucky accidents, first, nil is treated as an empty list if looked at as collection, second, conj add to the front when the collection is a list\n; this is a correct solution by making two mistakes\n\n; reduce conj nil", "problem": 23, "user": "53023bf3e4b0d8b024fd3726"}, {"code": "(fn [x & reversal]\n  (if (nil? reversal)\n    (recur x '())\n    (if (empty? x)\n      reversal\n      (recur (rest x) (conj reversal (first x))))))", "problem": 23, "user": "5306e4b4e4b02e821686979d"}, {"code": "(fn [x] \n  (loop [in x out '()]\n    (if (empty? in)\n      out\n      (recur (rest in) (conj out (first in))))))", "problem": 23, "user": "53077c67e4b02e82168697a4"}, {"code": "#(reduce (fn [ v i ] (conj v i)) '() (seq %1))", "problem": 23, "user": "53029281e4b0d8b024fd372e"}, {"code": "#(into () %)", "problem": 23, "user": "52f762ece4b047fd55836fc2"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "5306b349e4b02e8216869799"}, {"code": "(fn [col]\n  (reduce conj () col))", "problem": 23, "user": "530837c7e4b02e82168697ae"}, {"code": "(fn [x] (reduce (fn [acc el] ( cons el acc)) [] x))", "problem": 23, "user": "5307e4ece4b02e82168697a9"}, {"code": "into '()", "problem": 23, "user": "528e7433e4b0239c8a67aedf"}, {"code": "(fn rev [lst] \n  \t(cond (empty? lst) '()\n          :else (cons (last lst)\n                      (rev (butlast lst)))))", "problem": 23, "user": "5308d15fe4b02e82168697b2"}, {"code": "#(reduce (fn [a b] (cons b a)) '() %)", "problem": 23, "user": "5301a13ae4b0d8b024fd371e"}, {"code": "(fn [xs]\n  (reduce conj '() xs))", "problem": 23, "user": "4dad8a6dc9a9d6ed1399dc57"}, {"code": "(fn [s] (reduce #(cons %2 %1) '() s))", "problem": 23, "user": "53070615e4b02e821686979e"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "52f7ac81e4b047fd55836fc6"}, {"code": "(partial reduce conj '())", "problem": 23, "user": "530b6ea2e4b02e82168697cb"}, {"code": "reduce conj '()", "problem": 23, "user": "530b8580e4b02e82168697cc"}, {"code": "(fn [ls] (loop [l1 ls l2 (empty ls)]\n    (if (empty? l1)\n      l2\n      (recur (drop-last 1 l1) (concat l2 (conj (empty ls) (last l1)))))))", "problem": 23, "user": "53069e16e4b02e8216869798"}, {"code": ";( fn myrev[ sqr  sq ] (if (seq sq ) (myrev (cons (first sq) sqr)( rest sq)) sqr ) ) []\n#(into () %)", "problem": 23, "user": "52f426fce4b05e3f0be25f1e"}, {"code": "(fn r\n  [s]\n  (if (empty? s)\n    '()\n    (concat (r (rest s)) (list (first s)))))", "problem": 23, "user": "52c45ac8e4b0c2d177d620d9"}, {"code": "#(reduce\n  (fn \n    [l n]\n    (cons n l)\n  )\n  []\n  %\n)", "problem": 23, "user": "530c462ae4b02e82168697d9"}, {"code": "(fn my-reverse [s] (if (empty? s) () (conj (vec (my-reverse (rest s))) (first s))))", "problem": 23, "user": "530c8848e4b02e82168697de"}, {"code": "(fn r [s] (if (empty? s) '() (cons (last s) (r (drop-last s)))))", "problem": 23, "user": "5226f9b8e4b04e78ff2e199b"}, {"code": "(fn my-reverse [s]\n  (loop [s s reversed-list (list)]\n    (if (empty? s)\n      reversed-list\n       (recur (rest s) (conj reversed-list (first s))))))", "problem": 23, "user": "53098be4e4b02e82168697b7"}, {"code": ";#(loop [l %, r '()] (if (empty? l) r (recur (rest l) (cons (first l) r))))\n(fn [l] (reduce #(cons %2 %1) '() l))", "problem": 23, "user": "530caf86e4b02e82168697df"}, {"code": "#(into () %)", "problem": 23, "user": "530ccb1de4b08068f379ec99"}, {"code": "(fn [sq] (reduce (fn [col x] (conj col x)) '() sq))", "problem": 23, "user": "530d1060e4b08068f379eca2"}, {"code": "into ()", "problem": 23, "user": "4ff4bed0e4b0678c553fc35f"}, {"code": "(fn [seq]\n(loop [rev [] ser seq]\n(if ( empty? ser)\nrev\n(recur ( into [] (cons (first ser) rev)) (rest ser)))))", "problem": 23, "user": "53032bfce4b0d8b024fd373a"}, {"code": "(fn [x]\n  (loop [sequence x rx '()]\n    (if (= nil (first sequence))\n      rx\n      (recur\n       (rest sequence)\n       (conj rx (first sequence))))))", "problem": 23, "user": "530d85dee4b08068f379eca8"}, {"code": "(fn otherrev\n  ([a] (otherrev a '() ) )\n  ([thing acc]\n    (if (= (count thing) 0)\n      acc\n      (otherrev (rest thing) (conj acc (first thing)))\n    )\n  )\n)", "problem": 23, "user": "530e0e4ee4b08068f379ecb4"}, {"code": "#(into () %)", "problem": 23, "user": "530df459e4b08068f379ecb0"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "530cb5b8e4b02e82168697e0"}, {"code": "reduce (fn [coll x] (cons x coll)) []", "problem": 23, "user": "4fe8b1d9e4b07c9f6fd12c71"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "530e9729e4b08068f379ecbc"}, {"code": "reduce #(conj %1 %2) '()", "problem": 23, "user": "5302ac7fe4b0d8b024fd3731"}, {"code": "#(into () %)", "problem": 23, "user": "52c0e3d1e4b07a9af5792358"}, {"code": "(fn f [x]\n  (if (empty? x)\n    x\n    (cons\n      (last x)\n      (f (drop-last x)))))", "problem": 23, "user": "521b73f5e4b0c4ef0be83043"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "530e74c9e4b08068f379ecb9"}, {"code": "(fn [ls]\n  (into () ls))", "problem": 23, "user": "530f5929e4b08068f379ecc8"}, {"code": "reduce conj ()", "problem": 23, "user": "530e5469e4b08068f379ecb7"}, {"code": "(fn hey ([x] (hey x [])) ([x y] (if (empty? x) y (concat (hey (rest x) y) (list (first x))))))", "problem": 23, "user": "52e17e66e4b09f7907dd1423"}, {"code": "reduce #(cons %2 %1) []", "problem": 23, "user": "53034738e4b0d8b024fd373e"}, {"code": "(fn f [o]\n      ((fn g [o v ]\n         (if (empty? o)\n              v\n          (recur (butlast o) (conj v (last o)) ) ) ) o [] ) )", "problem": 23, "user": "530c15f7e4b02e82168697d6"}, {"code": "(fn [seq] \n  (into '() seq))", "problem": 23, "user": "5304dd80e4b0d8b024fd3754"}, {"code": "into ()", "problem": 23, "user": "4f320253e4b0d6649770a08d"}, {"code": "(fn [s] (vec (reduce (fn [accum x]\n          (conj accum x))\n              '()\n              s)))", "problem": 23, "user": "5311081be4b08068f379ece3"}, {"code": "(fn drift [asset]\n  (if (empty? asset)\n    []\n    (conj (drift (rest asset)) (first asset))))", "problem": 23, "user": "53120cb5e4b08068f379ecf0"}, {"code": "(fn [s]\n  (loop [v s acc []]\n    (if (nil? (seq v))\n      acc\n      (recur (take (dec (count v)) v) (conj acc (last v))))))", "problem": 23, "user": "5312452be4b08068f379ecf8"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "53124ef9e4b08068f379ecf9"}, {"code": "(fn f [x] (when (not-empty x) (conj (f (drop-last x)) (last x))))", "problem": 23, "user": "52e683c0e4b09f7907dd1477"}, {"code": "(fn rev [x]\n  (if (> (count x) 0)\n    (conj (rev (butlast x)) (last x))\n  )\n)", "problem": 23, "user": "531276a4e4b08068f379ecfb"}, {"code": "#(reduce (fn [x y] (conj x y)) '() %)", "problem": 23, "user": "530ab94de4b02e82168697c2"}, {"code": "(fn myr [xs] (if (empty? xs) xs (conj (myr (take (dec (count xs)) xs)) (last xs))))", "problem": 23, "user": "5311cd03e4b08068f379ecef"}, {"code": "(fn rev [x] (if (seq x) (concat (rev (rest x)) (list (first x))) '()))", "problem": 23, "user": "5313165ce4b08068f379ed06"}, {"code": "reduce conj '()", "problem": 23, "user": "5311b367e4b08068f379eced"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "53136c60e4b08068f379ed08"}, {"code": "(fn my-reverse [x] \n  (if (empty? x)\n    x\n    (concat (my-reverse (rest x)) [(first x)])))", "problem": 23, "user": "53110f32e4b08068f379ece4"}, {"code": "#(reduce (fn [a b] (conj a b)) '() %)", "problem": 23, "user": "53137526e4b08068f379ed09"}, {"code": "(fn [c]\n  (loop [x c acc '()]\n    (if (empty? x) acc\n    (recur (rest x) (cons (first x) acc)))))", "problem": 23, "user": "5313c007e4b08068f379ed0e"}, {"code": "reduce conj ()", "problem": 23, "user": "52f97c6ae4b047fd55836fea"}, {"code": "(fn rev-seq [s]\n  (cond (empty? s) []\n        :else (conj (rev-seq (rest s)) (first s))))", "problem": 23, "user": "5313a2bfe4b08068f379ed0b"}, {"code": "(fn my-reverse [s]\n  (if (empty? s)\n    []\n    (conj (my-reverse (rest s)) (first s))))", "problem": 23, "user": "5310e7aee4b08068f379ecdc"}, {"code": "reduce (fn [x y] (cons y x)) []", "problem": 23, "user": "52f90613e4b047fd55836fe1"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "53150a4de4b08068f379ed22"}, {"code": "#(into () %)", "problem": 23, "user": "531308c1e4b08068f379ed04"}, {"code": "(fn [s]\n  (reduce conj '() s))", "problem": 23, "user": "531490bde4b08068f379ed17"}, {"code": "(fn [xs] (reduce conj () xs))", "problem": 23, "user": "5314c8f7e4b08068f379ed1d"}, {"code": "(fn [s]\n    (loop [a s coll '()]\n        (if (empty? a) coll\n            (recur (rest a) (cons (first a) coll ))\n        )\n    )\n)", "problem": 23, "user": "52fba50ce4b047fd5583700d"}, {"code": "reduce conj ()", "problem": 23, "user": "531576b4e4b08068f379ed29"}, {"code": "#(loop [a '() b %] \n   (if-not (seq b) \n     a \n     (recur (cons (first b) a) (rest b))))", "problem": 23, "user": "531488f3e4b08068f379ed16"}, {"code": "(fn [xs] (letfn [(rev [from to] (if (empty? from) to (rev (rest from) (conj to (first from)))))]\n  (rev xs nil)))", "problem": 23, "user": "53162640e4b08068f379ed40"}, {"code": "#(into '() %)", "problem": 23, "user": "5311079de4b08068f379ece2"}, {"code": "(fn [l] (loop [w l result []] (if (= 1 (count w))  (conj result (last w)) (recur (take (- (count w) 1) w) (conj result (last w))))))", "problem": 23, "user": "5314318ee4b08068f379ed13"}, {"code": "(fn t [x] (loop [i (vec x) counter []] (if (= [] i) counter (recur (rest i) (concat [(first i)] counter)))))", "problem": 23, "user": "5315b53ee4b08068f379ed31"}, {"code": "(fn [x] (vals (let [results (zipmap (iterate inc 1) x)]\n\t                           (into (sorted-map-by (fn [key1 key2]\n\t                                                  (compare [(get results key2) key2]\n\t                                                           [(get results key1) key1])))\n\t                                 results))))", "problem": 23, "user": "53172425e4b08068f379ed53"}, {"code": "(fn [coll]\n  (reduce conj '() coll))", "problem": 23, "user": "52ebbdf7e4b0705949c44443"}, {"code": "(fn [xs]\n  (reduce (fn [newxs x]\n            (concat [x] newxs))\n          () xs))", "problem": 23, "user": "4ff505c8e4b0678c553fc364"}, {"code": "reduce conj '()", "problem": 23, "user": "50580b7ae4b06522596eba74"}, {"code": "#(reduce (fn [x y] (conj x y)) () %)", "problem": 23, "user": "531839ffe4b08068f379ed6a"}, {"code": "into ()", "problem": 23, "user": "52be0263e4b07a9af579230e"}, {"code": "#(reduce (fn [x y] (conj x y)) '() %)", "problem": 23, "user": "507330e6e4b0e3170b5a8698"}, {"code": "into '()", "problem": 23, "user": "5312807fe4b08068f379ecfc"}, {"code": "(fn [se] (loop [accumulator nil\n                source se]\n           (if (empty? source)\n             accumulator\n             (recur (cons (first source) \n                          accumulator) \n                    (rest source))\n             )\n           )\n  )", "problem": 23, "user": "5315d4bfe4b08068f379ed37"}, {"code": "reduce (fn [l,v] (cons v l)) ()", "problem": 23, "user": "53194ba3e4b08068f379ed7a"}, {"code": "reduce conj ()", "problem": 23, "user": "52fa9435e4b047fd55836ffc"}, {"code": "(fn [l] (reduce #(conj % %2) (list) l))", "problem": 23, "user": "52265e41e4b04e78ff2e1981"}, {"code": "#(reduce conj nil %1)", "problem": 23, "user": "531a0709e4b08068f379ed87"}, {"code": "(fn rev [seq]\n  (letfn [(rev-aq [seq roseq]\n    \t\t(if (empty? seq)\n      \t\t\troseq\n      \t\t\t(rev-aq (rest seq)\n                        (cons (first seq) roseq))))]\n    (rev-aq seq [])))", "problem": 23, "user": "53134005e4b08068f379ed07"}, {"code": "(fn [x] (reduce conj () x))", "problem": 23, "user": "531a3914e4b08068f379ed88"}, {"code": "(fn f [l] \n  (if (= 1 (count l)) l\n    (conj (vec (f (rest l))) (first l))\n    )\n)", "problem": 23, "user": "531902b1e4b08068f379ed77"}, {"code": "(fn [seq]\n\t(reduce #(cons %2 %1) () seq))", "problem": 23, "user": "5315ec83e4b08068f379ed39"}, {"code": "(fn rev [s] \n  (if (vector? s) \n    (vec (rev (list* s)))\n    (into () s)))", "problem": 23, "user": "531619c1e4b08068f379ed3d"}, {"code": "#(into () %)", "problem": 23, "user": "52474133e4b05ef8e38e635e"}, {"code": "reduce (fn [s el] (cons el s)) []", "problem": 23, "user": "531792d9e4b08068f379ed5e"}, {"code": "#((fn rev [acc xs] (if (empty? xs) acc (rev (cons (first xs) acc) (rest xs)))) nil %)", "problem": 23, "user": "5315a4f0e4b08068f379ed2e"}, {"code": "(fn [s] (reduce (fn [acc x] (conj acc x)) '() s))", "problem": 23, "user": "531ba143e4b08068f379ed91"}, {"code": "(fn [xs] \n  (loop [xs xs\n         res ()]\n    (if (empty? xs)\n      res\n      (recur (rest xs) (conj res (first xs))))))", "problem": 23, "user": "531bfb69e4b08068f379ed97"}, {"code": "(fn [l]\n  (into '() l))", "problem": 23, "user": "531bbf2ae4b08068f379ed95"}, {"code": "#(apply conj '() %)", "problem": 23, "user": "531c7f0de4b08068f379eda4"}, {"code": "(fn [coll]\n  (loop [new (if (= (type coll) clojure.lang.PersistentTreeSet) '() (empty coll))\n         old coll]\n    (if (empty? old) new\n      (recur (cons (first old) new) (next old)))))", "problem": 23, "user": "52e25beee4b09f7907dd1433"}, {"code": "(partial into '())", "problem": 23, "user": "531ccb1fe4b08068f379eda7"}, {"code": "(fn [lst]\n  (reduce conj '(), lst))", "problem": 23, "user": "531cbf46e4b08068f379eda6"}, {"code": "#(into () %)", "problem": 23, "user": "529bd5dfe4b04e0c58e87b51"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "52d2f457e4b099d49816f0ba"}, {"code": "#(reduce (fn [l,i] (conj l i)) '() %)", "problem": 23, "user": "531d53dbe4b08068f379edae"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "531cdafbe4b08068f379edaa"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "531c9170e4b08068f379eda5"}, {"code": "(fn [x]\n  (loop [x x col '()]\n    (if (empty? x) col\n      (recur (rest x) (cons (first x) col)))))", "problem": 23, "user": "531c57ace4b08068f379ed9b"}, {"code": "(fn [lst] (reduce (fn [s n] (conj s n)) '() lst))", "problem": 23, "user": "5319d9ade4b08068f379ed84"}, {"code": "reduce #(cons %2 %1) (list)", "problem": 23, "user": "52dd4fb4e4b09f7907dd13df"}, {"code": "#(into () %)", "problem": 23, "user": "531dfaf5e4b08068f379edb3"}, {"code": "#(into () %)", "problem": 23, "user": "531e140ce4b08068f379edb6"}, {"code": "#(into (if (set? %) () (empty %)) (if-not (set? %) (reduce conj () %) %))", "problem": 23, "user": "531b641ce4b08068f379ed8e"}, {"code": "(fn [s] (reduce conj '() s))", "problem": 23, "user": "51ffc496e4b0f1313d468aa0"}, {"code": "#(reduce (fn [a-seq elem] (conj a-seq elem)) '() %)", "problem": 23, "user": "521ceb02e4b0c4ef0be830a5"}, {"code": "(fn sqrev [coll]\n  (seq ((fn revs [c]\n  (let [x (first c) y (rest c)]\n    (if (empty? y) [x] (conj (revs y) x)))) coll)))", "problem": 23, "user": "4fc4f347e4b081705acca35d"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "531c7bdde4b08068f379eda2"}, {"code": "#(into () %)", "problem": 23, "user": "53121863e4b08068f379ecf3"}, {"code": "(partial reduce #(cons %2 %1) [])", "problem": 23, "user": "531c0619e4b08068f379ed98"}, {"code": "reduce conj ()", "problem": 23, "user": "4f75469ee4b0fbe0118ec55a"}, {"code": "apply conj ()", "problem": 23, "user": "531f7a2de4b08068f379edc6"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "523dba47e4b06956f8342c98"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "531f4e97e4b08068f379edc5"}, {"code": "#(reduce conj nil %1)", "problem": 23, "user": "53207e3de4b09d4e7a9b54a3"}, {"code": "(fn [word]\n  (loop [letters word\n         result []]\n    (if (empty? letters)\n      result\n      (recur (take (- (count letters) 1) letters) (conj result (last letters))))))", "problem": 23, "user": "531e5c81e4b08068f379edba"}, {"code": "(fn rev [coll]\n  (if (= 1 (count coll))\n    coll\n    (cons (last coll) (rev (butlast coll)))\n    )\n  )", "problem": 23, "user": "53195519e4b08068f379ed7b"}, {"code": "(fn rev [x]\n    (if (last x)\n        (cons (last x) (rev (drop-last x)))\n        x))", "problem": 23, "user": "53201eece4b08068f379edce"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "531f1e63e4b08068f379edc2"}, {"code": "(fn [xs] (reduce (fn [acc x] (cons x acc)) [] xs))", "problem": 23, "user": "5321a655e4b09d4e7a9b54b8"}, {"code": "(fn rev [x]\n  (\n    (fn revAcc [x acc]\n      (if (empty? x)\n        acc\n        (revAcc (rest x) (cons (first x) acc))\n      )\n    )\n  x [])\n)", "problem": 23, "user": "530b8ce1e4b02e82168697cd"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "5320cd49e4b09d4e7a9b54a8"}, {"code": "#(into () %)", "problem": 23, "user": "53164ccce4b08068f379ed45"}, {"code": "#(loop [in %\n        out []]\n   (if (empty? in)\n     out\n     (recur (rest in) \n            (concat [(first in)] out))))", "problem": 23, "user": "53227243e4b09d4e7a9b54c1"}, {"code": "(fn [coll] (reduce conj () coll))", "problem": 23, "user": "5320bc6ae4b09d4e7a9b54a7"}, {"code": "(fn [coll]\n  (loop [xs coll acc '()]\n    (if (empty? xs)\n      acc\n      (recur (rest xs) (conj acc (first xs))))))", "problem": 23, "user": "4ff548dee4b0678c553fc368"}, {"code": "(fn rev [x]\n  (loop [x x r nil]\n    (if (empty? x)\n      r\n      (recur (rest x) (cons (first x) r)))))", "problem": 23, "user": "5322d370e4b09d4e7a9b54c7"}, {"code": "(fn revlist [forward]\n  (if (empty? forward)\n    forward\n    (conj (revlist (butlast forward)) (last forward))\n   )\n)", "problem": 23, "user": "531cd41ee4b08068f379eda9"}, {"code": "(fn [coll] (reduce conj '() coll))", "problem": 23, "user": "532347dde4b09d4e7a9b54cc"}, {"code": "(fn rev [xs] \n  (if (= 0 (count xs))\n    []\n    (conj (rev (rest xs)) (first xs))))", "problem": 23, "user": "5323a414e4b09d4e7a9b54d1"}, {"code": "#(reduce (fn [m i] (conj m i)) '() %)", "problem": 23, "user": "5322d364e4b09d4e7a9b54c6"}, {"code": "(fn [l] (reduce conj '() l))", "problem": 23, "user": "53217912e4b09d4e7a9b54b3"}, {"code": "(fn [a] \n  (reduce #(cons %2 %1) '() a))", "problem": 23, "user": "532418f3e4b09d4e7a9b54d8"}, {"code": "(fn recursive-reverse [coll]\n    (if (empty? coll)\n        []\n        (conj (recursive-reverse (rest coll)) (first coll) )))", "problem": 23, "user": "51dd876ce4b0c33a4e1da40a"}, {"code": "reduce conj ()", "problem": 23, "user": "531f0a26e4b08068f379edbf"}, {"code": "#(loop [r '() f %] (if (empty? f) r (recur (conj r (first f)) (rest f))))", "problem": 23, "user": "53244c9de4b09d4e7a9b54db"}, {"code": "(fn [set] (reduce conj '() set))", "problem": 23, "user": "518ee4f9e4b0cd6ff51676a5"}, {"code": "#(loop [col %\n       iter (count col)\n       res '()]\n  (if (< iter 1)\n    res\n    (recur (rest col) (dec iter) (conj res (first col)))\n    )\n  )", "problem": 23, "user": "532439b1e4b09d4e7a9b54da"}, {"code": "(fn [s] (reduce conj '() s))", "problem": 23, "user": "53212063e4b09d4e7a9b54ae"}, {"code": "(fn r ([x]\n  (r x nil))\n  ([x acc]\n   (if (empty? x) acc\n     (r (rest x) (cons (first x) acc)))))", "problem": 23, "user": "5325cf91e4b09d4e7a9b54e8"}, {"code": "(fn rv [l]\n  (if (> (count l) 1)\n    (conj (rv(butlast l)) (last l))\n    l))", "problem": 23, "user": "531b8c27e4b08068f379ed90"}, {"code": "#(into '() (map (fn[x] x) %))", "problem": 23, "user": "532631e1e4b09d4e7a9b54ea"}, {"code": "(fn [param]\n  (loop [nums param result '()]\n    (if (empty? nums)\n      result\n      (recur (rest nums) (conj result (first nums))))))", "problem": 23, "user": "4ef2d6c5535dced4c769f222"}, {"code": "(fn [coll] (reduce conj () coll))", "problem": 23, "user": "5326c5f7e4b09d4e7a9b54f2"}, {"code": "reduce conj '()", "problem": 23, "user": "522b7389e4b0d34ee08e71be"}, {"code": "reduce #(conj %1 %2) nil", "problem": 23, "user": "51bdebece4b0ff155d51d2b7"}, {"code": "reduce #(conj %1 %2) '()", "problem": 23, "user": "50f3d35ce4b041536e2eca3f"}, {"code": "(fn my-rev [x]\n  (if (= (count x) 1) x\n    (vec (cons (peek (vec x)) (my-rev (pop (vec x)))))\n    ))\n\n; #(vec (into () %))", "problem": 23, "user": "5327f32be4b09d4e7a9b5502"}, {"code": "#(reduce (fn [x y] (cons y x)) '() %)", "problem": 23, "user": "5328e449e4b09d4e7a9b550c"}, {"code": "#(reduce (fn [acc e] (cons e acc)) () %)", "problem": 23, "user": "5328febee4b09d4e7a9b550d"}, {"code": "(fn [x] (reduce conj () x))", "problem": 23, "user": "52fe869be4b047fd5583703f"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "53224d45e4b09d4e7a9b54c0"}, {"code": "(fn [x]\n  ((fn [x xs]\n    (if (= (count x) 0)\n      xs\n      (recur (butlast x) (concat xs [(last x)]))\n\n      )\n    ) x []))", "problem": 23, "user": "50a95127e4b07e35d68b27af"}, {"code": "#(into () %)", "problem": 23, "user": "53223f5de4b09d4e7a9b54bf"}, {"code": "into ()", "problem": 23, "user": "532ab0bde4b09d4e7a9b5527"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "52d42021e4b09f7907dd132a"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "52d18b86e4b0d9f9285948de"}, {"code": "reduce #(cons %2 %1) []", "problem": 23, "user": "532afdc5e4b09d4e7a9b552e"}, {"code": "into ()", "problem": 23, "user": "532a033be4b09d4e7a9b551f"}, {"code": "#(reduce (fn [x y] (conj x y) ) '() %)", "problem": 23, "user": "532aff4ae4b09d4e7a9b552f"}, {"code": "#((fn [l ll] (if (empty? l) ll (recur (rest l) (cons (first l) ll)))) % '())", "problem": 23, "user": "532b43c3e4b09d4e7a9b5531"}, {"code": "(fn newreverse [x]\n  (into '() (vec x)))", "problem": 23, "user": "532727bae4b09d4e7a9b54fa"}, {"code": "(fn [coll] \n  (reduce \n   (fn [rev item] (cons item rev))\n   '() \n   coll))", "problem": 23, "user": "532b930be4b09d4e7a9b5534"}, {"code": "(fn\n  [x]\n  (let [m (count x)]\n    (for [n (range 0 (count x))]\n      (get (vec x) (- m n 1)))))", "problem": 23, "user": "531016d0e4b08068f379ecd1"}, {"code": "(fn [l]\n         (loop [a l, b nil]\n          (if a\n            (recur (next a) (conj b (first a)))\n            b)))", "problem": 23, "user": "532bce35e4b09d4e7a9b5536"}, {"code": "#(into () %)", "problem": 23, "user": "4f8bef41e4b02e764a0a5186"}, {"code": "#(into '() %)", "problem": 23, "user": "51bc99afe4b0fe3ecfb4645e"}, {"code": "(fn [a] (reduce #(cons %2 %1) [] a))", "problem": 23, "user": "532c0507e4b09d4e7a9b553c"}, {"code": "(fn [c] (loop [c c rc '()]\n          (if (empty? c)\n            rc\n            (recur (rest c) (list* (first c) rc)))))", "problem": 23, "user": "4dbe04b2535d020aff1edf56"}, {"code": "#(into '() %)", "problem": 23, "user": "532b9075e4b09d4e7a9b5533"}, {"code": "(fn [xs] (reduce #(cons %2 %1) [] xs))", "problem": 23, "user": "5004034ce4b0678c553fc447"}, {"code": "#(into () %)", "problem": 23, "user": "532cb6bbe4b019098a6f8b33"}, {"code": "(fn [sq]\n  (loop [r [] s sq]\n    (if (first s)\n      (recur (cons (first s) r) (next s))\n      r)))", "problem": 23, "user": "53219cece4b09d4e7a9b54b7"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "532cf410e4b019098a6f8b38"}, {"code": "(fn [x] (reduce conj (list) x))", "problem": 23, "user": "532a111ee4b09d4e7a9b5520"}, {"code": "(fn [l] (reduce conj () l))", "problem": 23, "user": "532cb870e4b019098a6f8b34"}, {"code": "(fn [q] (reduce conj '() q))", "problem": 23, "user": "532e0b20e4b019098a6f8b45"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "532e2e58e4b019098a6f8b47"}, {"code": "#(reduce (fn [res elem] (cons elem res)) [] %)", "problem": 23, "user": "532686e6e4b09d4e7a9b54ef"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "52781d94e4b03e8d9a4a751a"}, {"code": "#(into () %)", "problem": 23, "user": "51d0977fe4b067c365486352"}, {"code": "(fn seq_reverse [seq]\n  (if( empty? seq )\n  []\n(conj (seq_reverse(rest seq))  (first seq))\n  ))", "problem": 23, "user": "52dced9de4b09f7907dd13d7"}, {"code": "reduce conj '()", "problem": 23, "user": "533056a4e4b019098a6f8b5b"}, {"code": "#(loop [c %1, r (empty %1)]\n\t(if (empty? c) r\n\t\t(recur (rest c) (concat (list (first c)) r))))", "problem": 23, "user": "53300924e4b019098a6f8b55"}, {"code": "#(into () %)", "problem": 23, "user": "533018b2e4b019098a6f8b56"}, {"code": "reduce #(conj %1 %2) '()", "problem": 23, "user": "532ecd44e4b019098a6f8b49"}, {"code": "(fn my-reverse\n\n  ([a-list]\n\n     (cond (= a-list nil) nil\n\n           :else (cons (last a-list)\n\n                       (my-reverse (butlast a-list))))))", "problem": 23, "user": "53307da1e4b019098a6f8b5e"}, {"code": "into ()", "problem": 23, "user": "525ab6cfe4b0cb4875a45cf9"}, {"code": "#(reduce (fn [c x] (cons x c)) '() %)", "problem": 23, "user": "53315c78e4b019098a6f8b67"}, {"code": "into ()", "problem": 23, "user": "4f93539de4b0dcca54ed6cba"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "530c4903e4b02e82168697da"}, {"code": "#(into () %)", "problem": 23, "user": "5331205fe4b019098a6f8b64"}, {"code": "reduce conj ()", "problem": 23, "user": "52be5dd4e4b07a9af579231f"}, {"code": "#(into () %)", "problem": 23, "user": "53329d4ee4b019098a6f8b75"}, {"code": "(fn [c] (reduce #(cons %2 %1) '() c))", "problem": 23, "user": "5318594ee4b08068f379ed6d"}, {"code": "(fn my-reverse [coll] \n  (if (empty? coll)\n    coll\n    (concat (my-reverse (rest coll)) \n            (list (first coll)))))", "problem": 23, "user": "5328b1ece4b09d4e7a9b5508"}, {"code": "(fn [x] (loop [Acc '() L x]\n               (if (empty? L) Acc                 \n                  (recur (conj Acc (first L)) (rest L)\n                 )\n                )))", "problem": 23, "user": "5332f9e1e4b019098a6f8b79"}, {"code": "(fn [x] \n  (loop [start x end []]\n    (if (empty? start)\n      end\n      (recur (rest start) (concat (vector (first start)) end) ))))", "problem": 23, "user": "532db3e7e4b019098a6f8b3d"}, {"code": "(fn [data] (into '() data))", "problem": 23, "user": "53333e7be4b019098a6f8b7e"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "5314b0cae4b08068f379ed1c"}, {"code": "(fn [col] (reduce #(conj %1 %2) '() col))", "problem": 23, "user": "5318f85ae4b08068f379ed76"}, {"code": "(fn foo [coll]\n  (if (empty? coll)\n    []\n    (conj (foo (rest coll)) (first coll))))", "problem": 23, "user": "53322cece4b019098a6f8b73"}, {"code": "(fn [seq]\n    (reduce #(conj %1 %2) nil seq))", "problem": 23, "user": "51f5539fe4b0abb92f97f9cd"}, {"code": "(fn [col]\n  (reduce (fn [a b] (cons b a)) [] col))", "problem": 23, "user": "53334cb2e4b019098a6f8b81"}, {"code": "(fn reverse-seq [x]\n  (loop [in x\n         out ()]\n    \t(if (seq in)\n          (recur (rest in) (conj out (first in)))\n          out)))", "problem": 23, "user": "533431e4e4b019098a6f8b8d"}, {"code": "#(into () %)", "problem": 23, "user": "533160a1e4b019098a6f8b68"}, {"code": "#(reduce (fn [a b] (cons b a)) [] %)", "problem": 23, "user": "53348343e4b0656e627bfd6d"}, {"code": "(fn [col] (reduce conj '() col))", "problem": 23, "user": "53286389e4b09d4e7a9b5504"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "53350264e4b0656e627bfd73"}, {"code": "#(loop [result '() coll %] \n   (if (empty? coll)\n           result \n           (recur (conj result (first coll)) (rest coll))\n     ))", "problem": 23, "user": "531d34cfe4b08068f379edac"}, {"code": "(partial reduce conj ())", "problem": 23, "user": "533696b9e4b0e30313ee6c7c"}, {"code": "reduce #(conj %1 %2) '()", "problem": 23, "user": "5333524ee4b019098a6f8b83"}, {"code": "(fn [col]\n  (loop [c col\n         r '()]\n    (if (seq c)\n      (recur (rest c) (cons (first c) r))\n      r)))", "problem": 23, "user": "5336a339e4b0e30313ee6c7d"}, {"code": "(fn [coll] \n   (loop [ct [] cf coll]\n    (if (empty? cf)\n      ct\n      (recur (conj ct (last cf)) (butlast cf)))))", "problem": 23, "user": "5336ca32e4b0e30313ee6c80"}, {"code": "(fn rev\n  ([l] (rev l '()))\n  ([l res] (if (empty? l)\n             res\n             (recur (rest l) (cons (first l) res)))))", "problem": 23, "user": "53372d7de4b0e30313ee6c87"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "520fff3ce4b080a8d9b9d633"}, {"code": "(fn myRev [b]\n    (if (set b)\n        (let [a (into [] b)]\n          ((fn r [x y]\n               (if (= y 0)\n                   (cons (nth x y) '())\n                 (cons (nth x y) (r x (- y 1))))) a (- (count a) 1)))\n      (let [a b]\n        ((fn r [x y]\n             (if (= y 0)\n                 (cons (nth x y) '())\n               (cons (nth x y) (r x (- y 1))))) a (- (count a) 1)))))", "problem": 23, "user": "53372d32e4b0e30313ee6c86"}, {"code": "(fn[sq] \n  (let [newSq (loop [fromSq sq toSq [] cnt (count sq) ] \n          (if (= cnt 0) \n            toSq \n            (recur (drop-last fromSq) (conj toSq (last fromSq)) (dec cnt))))]\n                   ; recur)\n        ;   ); if\n        ;      ) ;loop\n       ;]; assign in let\n   (if (vector? sq) (apply vector newSq) (apply list newSq)) ;if\n  ); let\n); fn", "problem": 23, "user": "53266a93e4b09d4e7a9b54ee"}, {"code": "(fn [s]\n  (let [help (fn [r acc]\n            \t(if (= r '())\n                  acc\n                  (recur (rest r) (conj acc (first r)))\n                )\n             )\n       ]\n    (help s '())\n  )\n)", "problem": 23, "user": "52c45793e4b0c2d177d620d7"}, {"code": "(fn [coll] \n  (loop [c coll n ()]\n    (if (empty? c)\n      n\n      (recur (rest c) (concat (list (first c)) n))\n      )))\n;;Ah shit didn't know about 'into'", "problem": 23, "user": "4eadc217535d7eef30807321"}, {"code": "(fn rev [xs] \n    (if (empty? xs)\n        xs\n        (concat (rev (rest xs)) (cons (first xs) '()))))", "problem": 23, "user": "5334d4f2e4b0656e627bfd71"}, {"code": "#(into (list (first %)) (rest %))", "problem": 23, "user": "5338c965e4b0e30313ee6ca0"}, {"code": "(fn rev [seq] (if (<= (count seq) 1) seq (concat (rev (rest seq)) [(first seq)])))", "problem": 23, "user": "5338e33fe4b0e30313ee6ca1"}, {"code": "(fn [x] (into () x))", "problem": 23, "user": "5337a020e4b0e30313ee6c8b"}, {"code": "(fn myrev [x] (if (seq x) (concat (myrev (rest x)) (take 1 x)) '()))", "problem": 23, "user": "53388e2de4b0e30313ee6c9c"}, {"code": "(fn[xs] (reduce #(cons %2 %1) '() xs))", "problem": 23, "user": "5339cb07e4b0e30313ee6caf"}, {"code": "#(into () %)", "problem": 23, "user": "531541a0e4b08068f379ed25"}, {"code": "(fn [x] (into () x))", "problem": 23, "user": "53340d3ce4b019098a6f8b89"}, {"code": "apply conj ()", "problem": 23, "user": "53377725e4b0e30313ee6c89"}, {"code": "reduce\n\t(fn [r c]\n\t (conj r c))\n       (list)", "problem": 23, "user": "5339af7de4b0e30313ee6cab"}, {"code": "reduce conj ()", "problem": 23, "user": "52da20c7e4b09f7907dd13b3"}, {"code": "reduce conj ()", "problem": 23, "user": "532c4ffce4b09d4e7a9b5540"}, {"code": "(fn  [collection]\n  (let [collection (vec collection)\n        len (count collection)\n        indexes (for [i (range (dec len) -1 -1)]i)\n        res []]\n    (for [i indexes] \n      (get collection i))))", "problem": 23, "user": "516081e7e4b009fba0926e28"}, {"code": "reduce #(concat [%2] %) []", "problem": 23, "user": "53396c03e4b0e30313ee6ca7"}, {"code": "(partial reduce #(cons %2 %1) [])", "problem": 23, "user": "533ab9abe4b0e30313ee6cbf"}, {"code": "reduce conj '()", "problem": 23, "user": "5339c08ee4b0e30313ee6cad"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "506d5e4ce4b0a302964c5493"}, {"code": "(fn rvs [x] (if (empty? x) '() (concat (rvs (rest x)) (list (first x)))))", "problem": 23, "user": "52ae70c4e4b0c58976d9aca8"}, {"code": "#(loop [s %1 r ()]\n   (if (empty? s)\n     r\n     (recur (rest s) (conj r (first s)))))", "problem": 23, "user": "532df9c5e4b019098a6f8b42"}, {"code": "#(apply conj '() %)", "problem": 23, "user": "5339eb56e4b0e30313ee6cb2"}, {"code": "#(into '() %)", "problem": 23, "user": "533ae581e4b0e30313ee6cc0"}, {"code": "#(reduce \n    (fn [_ i] (conj _ i))\n     () %)", "problem": 23, "user": "5339edfbe4b0e30313ee6cb3"}, {"code": "#(reduce (fn [l i] (conj l i)) () %)\n\n;#(reduce conj ()", "problem": 23, "user": "533a2f7be4b0e30313ee6cb8"}, {"code": "into ()", "problem": 23, "user": "533b1138e4b0e30313ee6cc5"}, {"code": "#(into () %)", "problem": 23, "user": "530ccf2ce4b08068f379ec9b"}, {"code": "(fn [s] (reduce #(cons %2 %) [] s))", "problem": 23, "user": "530262c8e4b0d8b024fd3728"}, {"code": "(fn [list] \n  (loop [myList list\n         result []]\n    (if (= [] (rest myList))\n      (cons (first myList) result)\n      (recur (rest myList)\n      \t\t (cons (first myList) result)))))", "problem": 23, "user": "529862dfe4b02ebb4ef75055"}, {"code": "#(into () %)", "problem": 23, "user": "53383c74e4b0e30313ee6c92"}, {"code": "(fn [coll] (reduce conj '() coll))", "problem": 23, "user": "533b1dc4e4b0e30313ee6cc7"}, {"code": "(fn [x] (let [y (vec x)](reduce  #(conj % %2) () y ) ))", "problem": 23, "user": "533a7d56e4b0e30313ee6cbc"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "533c0c12e4b0e30313ee6cd4"}, {"code": "#(loop [seq %1\n        acc '()]\n   (if (empty? seq)\n     acc\n     (recur (rest seq) (conj acc (first seq)))))", "problem": 23, "user": "533d2ea5e4b085b17e897d7a"}, {"code": "reduce conj ()", "problem": 23, "user": "533cd2e2e4b085b17e897d75"}, {"code": "(fn f\n  ([l a]\n  (if (empty? l)\n    (vec a)\n    (f (rest l) (conj a (first l)))))\n  ([l]\n  (f l ())))", "problem": 23, "user": "51ac80bbe4b09397d5109770"}, {"code": "(fn rev \n  ([L] (rev L '()))\n  ([L result]\n    (if (= L ()) result \n      (rev (rest L) (conj result (first L) )))))", "problem": 23, "user": "533e45a7e4b085b17e897d8c"}, {"code": "#(into '() %)", "problem": 23, "user": "533f09e1e4b085b17e897d9a"}, {"code": "(fn [l] \n  (loop [l1 l\n         l2 '()]\n    (if (= (first l1) nil)\n      l2 (recur (rest l1)\n                (concat [(first l1)] l2)))))", "problem": 23, "user": "533ee560e4b085b17e897d98"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "533f1584e4b085b17e897d9b"}, {"code": "#(into () %)", "problem": 23, "user": "533cebf1e4b085b17e897d78"}, {"code": "(fn [c]\n  (loop [ci c o []]\n    (let [l (last ci)]\n      (println ci)\n      (println o)\n      (println l)\n      (if (last ci)\n          (recur (butlast ci) (conj o l))\n          o))))", "problem": 23, "user": "53402a19e4b085b17e897da5"}, {"code": "apply conj '()", "problem": 23, "user": "534056fce4b085b17e897dac"}, {"code": "(fn [y]\n  ((fn reverse-this [x, reversed]\n     (cond (empty? x) reversed\n           :else (reverse-this (rest x) (conj reversed (first x)))))\n   y '()))", "problem": 23, "user": "53407963e4b085b17e897dad"}, {"code": "#(reduce (fn [l v] (cons v l)) [] %)", "problem": 23, "user": "53409368e4b085b17e897daf"}, {"code": "(fn [s]\n  (loop [acc '() s s]\n    (if (seq s)\n      (recur (conj acc (first s)) (rest s))\n      acc)))", "problem": 23, "user": "5340c4f6e4b085b17e897db0"}, {"code": "reduce conj ()", "problem": 23, "user": "533e8b54e4b085b17e897d8f"}, {"code": "#(into () %)", "problem": 23, "user": "534131dbe4b00652c8746ecb"}, {"code": "(fn my-reverse [xs]\n  ((fn my-reverse-helper [xs, acc]\n     (if (empty? xs)\n       acc\n       (my-reverse-helper\n        (rest xs)\n        (conj acc (first xs)))))\n   xs '()))", "problem": 23, "user": "533ce38ce4b085b17e897d77"}, {"code": "#(apply conj nil %)", "problem": 23, "user": "51da631be4b02ceefd947766"}, {"code": "(fn mycount [x](loop[z nil lst x]\n                   (if(empty? lst)\n                    z\n                    (recur (cons (first lst) z) (rest lst)))))", "problem": 23, "user": "533078b5e4b019098a6f8b5c"}, {"code": "(fn [input]\n  (loop [s (seq input) acc nil]\n    (if (empty? s)\n      acc\n      (recur (rest s) (conj acc (first s))))))", "problem": 23, "user": "5341b141e4b00652c8746ecf"}, {"code": "(fn [coll] (reduce conj () coll))", "problem": 23, "user": "5340ee60e4b00652c8746ec9"}, {"code": "#(into () %)", "problem": 23, "user": "5342d4f2e4b084c2834f4a12"}, {"code": "#(loop [r '(), w %]\n   (if (not (nil? (first w)))\n   (recur (conj r (first w)) (rest w))\n    r))", "problem": 23, "user": "533b36c0e4b0e30313ee6ccb"}, {"code": "(fn [coll] (reduce conj '() coll))", "problem": 23, "user": "4f598c87e4b0030a34fb2ada"}, {"code": "#(loop [cols %\n               ret '();(empty %)\n               ]\n          (if (not (empty? cols))\n            (recur (rest cols) (conj ret (first cols)))\n            ret\n            )\n          )\n;#(into () %)", "problem": 23, "user": "533e7f63e4b085b17e897d8e"}, {"code": "#(into () %)", "problem": 23, "user": "5344a0efe4b084c2834f4a2d"}, {"code": "(fn [s] \n  (loop [res '() x s]\n     (if (empty? x) \n        res\n        (recur (conj res (first x)) (rest x))\n     )  \n  )\n)", "problem": 23, "user": "533ea7e8e4b085b17e897d94"}, {"code": "#(loop [old %\n        new '()]\n   (if (empty? old)\n     new\n     (recur (rest old) (conj new (first old)))))", "problem": 23, "user": "529da890e4b04e0c58e87b7e"}, {"code": "#(into () %)", "problem": 23, "user": "53403110e4b085b17e897da6"}, {"code": "(fn my-rev [seq]\n  (if (= (count seq) 0)\n    '()\n    (concat (my-rev (rest seq)) [(first seq)])))", "problem": 23, "user": "53415755e4b00652c8746ecd"}, {"code": "into ()", "problem": 23, "user": "53460d02e4b084c2834f4a39"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "5344e2bae4b084c2834f4a30"}, {"code": "(fn [s]\n  (loop [orig s res ()]\n    (if (empty? orig)\n      res\n      (recur (rest orig) (conj res (first orig))))))", "problem": 23, "user": "53468f6ce4b084c2834f4a3f"}, {"code": "(fn [xs] (reduce (fn [result x] (conj result x)) '()  xs))", "problem": 23, "user": "53459f2ae4b084c2834f4a36"}, {"code": "#(into '() %)", "problem": 23, "user": "52a229e0e4b04e0c58e87be9"}, {"code": "(partial reduce conj '())", "problem": 23, "user": "5346db4be4b084c2834f4a45"}, {"code": "(fn [coll]\n  (loop [all coll\n         e-coll nil]\n    (if (empty? all)\n      e-coll\n      (recur (next all) (conj e-coll (first all))))))", "problem": 23, "user": "5346f409e4b084c2834f4a46"}, {"code": "into ()", "problem": 23, "user": "526a7025e4b03e8d9a4a722a"}, {"code": "(fn [s]\n  (loop [s1 s\n         t ()]\n    (if (empty? s1)\n      t\n      (recur (rest s1) (cons (first s1) t)))))", "problem": 23, "user": "53487737e4b084c2834f4a59"}, {"code": "#(reduce (fn [m i] (conj m i)) '() %)", "problem": 23, "user": "5348276de4b084c2834f4a55"}, {"code": "(fn rev [x]\n (let [r\n       (fn rev2 [x]\n         (if (= (count x) 0)\n           x\n           (conj (rev2 (into (empty x) (rest x))) (first x))))]\n   (r (into [] x))))", "problem": 23, "user": "534941d1e4b084c2834f4a60"}, {"code": "(fn [l] (let [c (count l) s (seq l)] (map-indexed (fn [i e] (nth s (- c i 1))) s)))", "problem": 23, "user": "5348236ee4b084c2834f4a54"}, {"code": "(fn [s] (map last (sort-by first > (map vector (range) s))))", "problem": 23, "user": "53498f88e4b084c2834f4a64"}, {"code": "(fn [sequence]\n  ((fn [sequence acc]\n     (if (= (count sequence) 1)\n       (cons (first sequence) acc)\n       (recur (rest sequence) (cons (first sequence) acc))\n       )\n     ) sequence [])\n  )", "problem": 23, "user": "5349a39de4b084c2834f4a65"}, {"code": "(fn me [x] (if (empty? x) x (conj (me (butlast x)) (last x)) ))", "problem": 23, "user": "5349ac2be4b084c2834f4a67"}, {"code": "#(into () %)", "problem": 23, "user": "5349da55e4b084c2834f4a68"}, {"code": "into ()", "problem": 23, "user": "4fa9dc6fe4b081705acca1e8"}, {"code": "#(into () %)", "problem": 23, "user": "53461051e4b084c2834f4a3a"}, {"code": "(fn [x]\n  (reduce (fn [acc e]\n            (conj acc e))\n         () x))", "problem": 23, "user": "52d6664be4b09f7907dd1359"}, {"code": "#(into () %)", "problem": 23, "user": "532018efe4b08068f379edcd"}, {"code": "(fn d [x] (if (> (count x) 2) (concat [(last x)] (d (butlast (rest x))) [(first x)]) x))", "problem": 23, "user": "534aa5d3e4b084c2834f4a6b"}, {"code": "into ()", "problem": 23, "user": "52a144b0e4b04e0c58e87bd6"}, {"code": "reduce conj ()", "problem": 23, "user": "52ac2db3e4b0c58976d9ac82"}, {"code": "#(reduce (fn [xs x] (cons x xs)) () %)", "problem": 23, "user": "50504a1de4b0a02f9cffdeb9"}, {"code": "into ()", "problem": 23, "user": "534adc16e4b084c2834f4a73"}, {"code": "(fn [x]\n  ((fn [a result]\n     (if (> (count a) 0)\n       (recur (butlast a) (conj result (last a)))\n       result))\n   x []))", "problem": 23, "user": "51ab70c3e4b04e3dc0c27b33"}, {"code": "(fn [col] (reduce conj () col))", "problem": 23, "user": "5348cab4e4b084c2834f4a5e"}, {"code": "(fn my-reverse [lst]\n  (if (empty? lst)\n    '()\n    (concat (my-reverse (rest lst)) (list (first lst)))))", "problem": 23, "user": "5347870be4b084c2834f4a4b"}, {"code": "(fn rev [l]\n  (if (empty? l)\n    l\n    (concat (rev (rest l))\n            [(first l)])))", "problem": 23, "user": "534bde26e4b084c2834f4a81"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "534bd9c1e4b084c2834f4a80"}, {"code": "(fn rev [x]\n  (reduce #(cons %2 %1) [] x))", "problem": 23, "user": "534c1321e4b084c2834f4a89"}, {"code": "#(\n\tloop [input % output '()]\n  \t\t(if (empty? input)\n          output\n  \t\t(recur (rest input) (conj output (first input))))\n )", "problem": 23, "user": "534c469ee4b084c2834f4a8e"}, {"code": "(fn f [xs]\n  (if (empty? xs)\n    nil\n    (concat (f (rest xs)) (list (first xs)))))", "problem": 23, "user": "5344fe13e4b084c2834f4a32"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "5338645ee4b0e30313ee6c99"}, {"code": "(fn [s] (reduce #(cons %2 %1) [] s))", "problem": 23, "user": "50a635bbe4b0aa96157e2621"}, {"code": "(fn rev [x]\n  (if (empty? x) \n    nil\n    (cons (last x) (rev (butlast x)))))", "problem": 23, "user": "5338387de4b0e30313ee6c91"}, {"code": "; #(let [x (reduce conj () (vec %))]  (if (vector? x) (vec x) x)) \n;#(into () %)\n;#(reduce conj () %)\ninto '()", "problem": 23, "user": "534ab3f5e4b084c2834f4a6e"}, {"code": "#(into () %)", "problem": 23, "user": "534bfa81e4b084c2834f4a87"}, {"code": ";(fn [s]\n;  (reduce\n;   (fn [acc_seq orig_seq_el]\n;     (cons orig_seq_el acc_seq))\n;   '() s))\n(fn [s]\n  (reduce conj '() s))", "problem": 23, "user": "534da51fe4b084c2834f4aa4"}, {"code": "(fn rv [s] (if (next s) (conj (rv (next s)) (first s)) [(first s)]))", "problem": 23, "user": "534d1173e4b084c2834f4a98"}, {"code": "#(reduce (fn [old el] (cons el old)) '[] %)", "problem": 23, "user": "53075d82e4b02e82168697a1"}, {"code": "#(reduce (fn [c x] (conj c x)) () %)", "problem": 23, "user": "534e4a29e4b084c2834f4ab0"}, {"code": "(fn [coll]\n  (loop [in coll out '()]\n    (if (empty? in)\n      out\n      (recur (rest in) (conj out (first in)))\n    )\n  )\n)", "problem": 23, "user": "534e60c2e4b084c2834f4ab2"}, {"code": "#(into () %)", "problem": 23, "user": "534e9ed4e4b084c2834f4ab8"}, {"code": "#(into () %)", "problem": 23, "user": "534e118ee4b084c2834f4aad"}, {"code": "(partial into '())", "problem": 23, "user": "5339c105e4b0e30313ee6cae"}, {"code": "(partial reduce conj '())", "problem": 23, "user": "534efe66e4b084c2834f4ac1"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "534c5454e4b084c2834f4a90"}, {"code": "(fn [items]\n  (loop [reved '() items-left (sequence items)]\n\n    (if-not (seq items-left)\n      reved\n      (recur (conj reved (first items-left)) (sequence (rest items-left))))))", "problem": 23, "user": "534d6524e4b084c2834f4a9f"}, {"code": "(fn myreverse [lst]\n  ((fn rev [lst acc]\n     (cond\n      (empty? lst) acc\n      :else\n      (rev (rest lst) (cons (first lst) acc))))\n   lst nil))", "problem": 23, "user": "534f8c9ae4b084c2834f4acd"}, {"code": "#(reduce (fn [x y] (conj x y)) (list (first %)) (rest %))", "problem": 23, "user": "534815bde4b084c2834f4a53"}, {"code": "(fn f [x] (if (= x []) [] (conj (f (rest x)) (first x))))", "problem": 23, "user": "53500869e4b084c2834f4ad3"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "5257eebae4b0cb4875a45c9c"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "53504436e4b084c2834f4ad7"}, {"code": "#(into() %)", "problem": 23, "user": "534ffbafe4b084c2834f4ad2"}, {"code": "(fn [x]\n  (reduce conj '() x))", "problem": 23, "user": "534f25f9e4b084c2834f4ac6"}, {"code": "#(into () %)", "problem": 23, "user": "535056a7e4b084c2834f4adb"}, {"code": "(fn reverse-recursively [coll]\n    (loop [[r & more :as all] (seq coll)\n           acc '()]\n          (if all\n              (recur more (cons r acc))\n            acc)))", "problem": 23, "user": "5256c4c1e4b0541d1855ba36"}, {"code": "reduce conj ()", "problem": 23, "user": "53342a1ce4b019098a6f8b8b"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "52ed1804e4b0a18b0f5dd9e6"}, {"code": "reduce #(conj %1 %2) '()", "problem": 23, "user": "53513d28e4b084c2834f4ae3"}, {"code": "reduce conj '()", "problem": 23, "user": "52ff6ea0e4b0d8b024fd3707"}, {"code": "(fn re [x]\n(loop [n 0 y []]\n  (if (< n (count x))\n    (recur (inc n) (cons (nth (seq x) n) y))\n    y)))", "problem": 23, "user": "53504a7de4b084c2834f4ad9"}, {"code": "#(into () %)", "problem": 23, "user": "534b5bece4b084c2834f4a79"}, {"code": "(fn myF\n        ([lst] (myF lst '()))\n        ([lst rlst]\n           (cond\n            (empty? lst) rlst\n            :else (recur (rest lst) (conj rlst (first lst))))))", "problem": 23, "user": "534f3c57e4b084c2834f4ac7"}, {"code": "(fn[s](reduce conj () s))", "problem": 23, "user": "53512bc6e4b084c2834f4ae1"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "52470d42e4b05ef8e38e6350"}, {"code": "(fn [coll] (reduce #(cons %2 %1) '() coll))", "problem": 23, "user": "5312cdaae4b08068f379ed03"}, {"code": "into '()", "problem": 23, "user": "5351cc85e4b084c2834f4ae9"}, {"code": "#(reduce (fn [s n] (conj s n)) '() %)", "problem": 23, "user": "5352986ee4b084c2834f4af3"}, {"code": "reduce (fn [accum x] (conj accum x)) '()", "problem": 23, "user": "53504437e4b084c2834f4ad8"}, {"code": "(fn rev [x y] (if \n                (empty? y)\n                x\n                (rev (cons (first y) x) (rest y))\n                )\n  ) '()", "problem": 23, "user": "534c734de4b084c2834f4a93"}, {"code": "reduce #(cons %2 %1) []", "problem": 23, "user": "53526570e4b084c2834f4aef"}, {"code": "reduce #(cons %2 %) []", "problem": 23, "user": "50f10f7be4b06d9538fe211a"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "53386fb9e4b0e30313ee6c9a"}, {"code": "(partial reduce conj '())", "problem": 23, "user": "5353afa0e4b084c2834f4b03"}, {"code": "(fn [x] \n  ((fn rev [y acc] \n    (if (empty? y) \n      acc \n      (rev (rest y) (cons (first y) acc))\n     )\n   ) x '())\n  )", "problem": 23, "user": "535197f2e4b084c2834f4ae4"}, {"code": "sort #(compare %2 %1)", "problem": 23, "user": "53512b55e4b084c2834f4ae0"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "533a399de4b0e30313ee6cb9"}, {"code": "#(loop [seq % reversed '()]\n    (if (empty? seq)\n      reversed\n      (recur (rest seq) (cons (first seq) reversed))))", "problem": 23, "user": "534b0598e4b084c2834f4a75"}, {"code": ";#(loop [x % result '()] (if (<= (count x) 0) result (recur (rest x) (cons (first x) result)) ))\n#(into '() %)", "problem": 23, "user": "533b9cace4b0e30313ee6cd1"}, {"code": "(fn [a] (reduce conj '() a))", "problem": 23, "user": "5309bacae4b02e82168697bc"}, {"code": "#(into '() %)", "problem": 23, "user": "531c5a6be4b08068f379ed9c"}, {"code": "#(into () %)", "problem": 23, "user": "5354bb38e4b084c2834f4b0a"}, {"code": "into ()", "problem": 23, "user": "535526a2e4b04ce2eb3ed259"}, {"code": "(fn [coll]\n  (loop [acc (empty coll)\n         [h & t :as all] (seq coll)]\n    (if all (recur (cons h acc) t) acc)))", "problem": 23, "user": "5351980ce4b084c2834f4ae5"}, {"code": "#(reduce (fn [m i] (cons i m)) [] %)", "problem": 23, "user": "5356069be4b04ce2eb3ed260"}, {"code": "#(reduce conj `() %)", "problem": 23, "user": "5356100be4b04ce2eb3ed262"}, {"code": "into ()", "problem": 23, "user": "53566247e4b04ce2eb3ed266"}, {"code": "reduce (fn [a b] (concat [b] a)) []", "problem": 23, "user": "5356ac72e4b04ce2eb3ed26a"}, {"code": "reduce #(cons %2 (if (seq? %1) %1 (vector %1)))", "problem": 23, "user": "52046600e4b0c283853240c5"}, {"code": "(fn [s] (into () s))", "problem": 23, "user": "5356e04fe4b04ce2eb3ed271"}, {"code": "(fn [xs]\n  (loop [outcome []\n         iteration 0\n         elements xs]\n    (if (= iteration (count xs))\n      outcome\n      (recur (cons (first elements) outcome ) (inc iteration) (rest elements)))))", "problem": 23, "user": "523d06aae4b0dbf0c301728b"}, {"code": "(fn myreverse [l] (if (> (count l) 0) (cons (last l) (myreverse (drop-last l))) l))", "problem": 23, "user": "53571732e4b04ce2eb3ed275"}, {"code": "(fn rev [in] ((fn inrev [in out](if (empty? in) out (inrev (rest in) (cons (first in) out)))) in '()))", "problem": 23, "user": "53570034e4b04ce2eb3ed273"}, {"code": "into ()", "problem": 23, "user": "534f1c94e4b084c2834f4ac5"}, {"code": "(fn [coll]\n  (loop [current coll reversed []]\n    (if (empty? current)\n      reversed\n      (recur (take (- (count current) 1) current)\n             (conj reversed (last current))))))", "problem": 23, "user": "5225271fe4b01819a2de42f9"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "535778dee4b04ce2eb3ed27d"}, {"code": "reduce conj ()", "problem": 23, "user": "52c0b2b9e4b07a9af5792353"}, {"code": "(fn my-reverse\n  [coll]\n  (loop [coll coll reversed '()]\n    (if (seq coll)\n      (recur (rest coll) (cons (first coll) reversed))\n      reversed)))", "problem": 23, "user": "5357b241e4b04ce2eb3ed282"}, {"code": "(fn rev-seq [xs]\n  (reduce #(cons %2 %1) '() xs))", "problem": 23, "user": "53287dace4b09d4e7a9b5507"}, {"code": "(fn [el] (loop [revs [] items el] (if (empty? items) revs (recur (cons (first items) revs) (rest items)))))", "problem": 23, "user": "5357fd93e4b04ce2eb3ed285"}, {"code": "#(loop [x () y %]\n   (if (nil? (second y))\n             (conj x (first y))\n             (recur (conj x (first y)) (rest y))))", "problem": 23, "user": "5356dcbee4b04ce2eb3ed270"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "534e1f56e4b084c2834f4aae"}, {"code": "(fn myrev [l] ((fn myrev_rec [to_rev res] (if (empty? to_rev) res (myrev_rec (rest to_rev) (conj res (first to_rev))))) l '()))", "problem": 23, "user": "535376a7e4b084c2834f4b01"}, {"code": "#(reduce (fn [x y] (conj x y)) '() %)", "problem": 23, "user": "5346bb5be4b084c2834f4a43"}, {"code": ";#(loop [result '()\n;        remaining %]\n;   (let [current (first remaining)\n;         restcoll (rest remaining)]\n;     (if (empty? remaining)\n;       result\n;       (recur (conj result current) restcoll))))\n\n; reduce #(conj %1 %2) '()\n\n; into ()\n\n#(into '() %)\n\n;; NOTE: different collections with the same order are equal, ie.\n;;    (= '(1 2 3 4) [1 2 3 4]) is true\n\n;(fn [seq]\n;  (loop [xs seq sx '()]\n;    (if (= 0 (count xs))\n;       sx\n;       (recur (rest xs) (conj sx (first xs))))))", "problem": 23, "user": "52810ceae4b0757a1b17141b"}, {"code": "(fn rev [l] (if (first l) (conj (rev (rest l)) (first l)) []))", "problem": 23, "user": "535920b2e4b04ce2eb3ed294"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "52dc3bc8e4b09f7907dd13cb"}, {"code": "#(reduce (fn [x y] (conj x y)) () %)", "problem": 23, "user": "535911f4e4b04ce2eb3ed292"}, {"code": "sort #(compare %2 %)", "problem": 23, "user": "535944d6e4b04ce2eb3ed296"}, {"code": "(fn my-rev [x]\n  (loop [x x acc []]\n    (if (empty? x)\n      acc\n      (recur\n        (rest x)\n        (cons (first x) acc)))))", "problem": 23, "user": "535a170ae4b04ce2eb3ed2a3"}, {"code": "(fn [x] (reduce conj '() x))", "problem": 23, "user": "534c9da8e4b084c2834f4a94"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "53597288e4b04ce2eb3ed29c"}, {"code": "(fn f [col] (let [bt  (butlast col)] (cons (last col) (if (nil? bt) bt (f bt) ))))", "problem": 23, "user": "53347274e4b0656e627bfd6b"}, {"code": "(fn [s] (reduce #(conj %1 %2) '() s))", "problem": 23, "user": "534dd600e4b084c2834f4aaa"}, {"code": "(fn my-rev [lst]\n  (if (empty? lst) lst\n  (concat (my-rev (rest lst)) (list (first lst)))))", "problem": 23, "user": "535a80b1e4b04ce2eb3ed2a7"}, {"code": "#(into '() %)", "problem": 23, "user": "53536386e4b084c2834f4afe"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "535aba96e4b04ce2eb3ed2a8"}, {"code": "#(reduce (fn [x y] (conj x y)) '() %)", "problem": 23, "user": "50c95c4fe4b0bed41a12298f"}, {"code": "(partial reduce conj '())", "problem": 23, "user": "53527551e4b084c2834f4af0"}, {"code": "(fn[xs] (reduce #(cons %2 %1) '() xs))", "problem": 23, "user": "535bd464e4b04ce2eb3ed2ad"}, {"code": "(fn [L]\n  (reduce conj () L))", "problem": 23, "user": "535bf08fe4b04ce2eb3ed2af"}, {"code": "(fn [arg] (reduce #(cons %2 %1) [] arg))", "problem": 23, "user": "53523ae0e4b084c2834f4aee"}, {"code": "#(into () %)", "problem": 23, "user": "535c53c5e4b04ce2eb3ed2b3"}, {"code": "into ()", "problem": 23, "user": "535a18e3e4b04ce2eb3ed2a4"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "535afd76e4b04ce2eb3ed2ab"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "535d4b0ae4b04ce2eb3ed2be"}, {"code": "(fn [sq]\n  ((fn [sq r]\n     (if (empty? sq)\n       r\n       (recur (rest sq)\n              (conj r (first sq)))))\n   sq '()))", "problem": 23, "user": "535d910ae4b04ce2eb3ed2c5"}, {"code": "into ()", "problem": 23, "user": "5325cef5e4b09d4e7a9b54e7"}, {"code": "(fn [m] (reduce #(cons %2 %1) [] m))", "problem": 23, "user": "5351fca5e4b084c2834f4aec"}, {"code": "#(into '() %)", "problem": 23, "user": "535f4e01e4b04ce2eb3ed2dc"}, {"code": "#(reduce (fn [acc x] (cons x acc)) nil %)", "problem": 23, "user": "51d4609be4b013d740b70de1"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "535f0cbde4b04ce2eb3ed2d9"}, {"code": "#(reduce (fn rev [acc val] (cons val acc)) [] %)", "problem": 23, "user": "535f9604e4b04ce2eb3ed2dd"}, {"code": "#(reduce (fn [acc i] (cons i acc)) '() %)", "problem": 23, "user": "535eaa73e4b04ce2eb3ed2d4"}, {"code": "into '()", "problem": 23, "user": "535d2533e4b04ce2eb3ed2bc"}, {"code": "reduce conj ()", "problem": 23, "user": "4ec82bd8535d6d7199dd36f2"}, {"code": "#(reduce (fn [result current] (cons current result)) (empty %) %)", "problem": 23, "user": "5359da85e4b04ce2eb3ed2a1"}, {"code": "reduce conj '()", "problem": 23, "user": "53578543e4b04ce2eb3ed280"}, {"code": "#(into () %)", "problem": 23, "user": "535e5c4de4b04ce2eb3ed2d1"}, {"code": "#(into () %)", "problem": 23, "user": "5360d41fe4b0243289761e39"}, {"code": "(fn [x]\n  (loop [new '(), l x]\n    (if (empty? l)\n      new\n      (recur (conj new (first l)) (rest l)))))", "problem": 23, "user": "536123d6e4b0243289761e3f"}, {"code": "reduce conj ()", "problem": 23, "user": "53528cd3e4b084c2834f4af2"}, {"code": "(fn me[xs]\n  (if (empty? xs)\n    xs\n  \t(conj (me (butlast xs)) (last xs) )\n    )\n  )", "problem": 23, "user": "5360e12ce4b0243289761e3a"}, {"code": "(fn [a-seq]\n  (loop [s a-seq rev ()]\n    (if (empty? s)\n      rev\n      (recur (rest s) (conj rev (first s))))))", "problem": 23, "user": "5361a4f2e4b0243289761e47"}, {"code": "reduce conj ()", "problem": 23, "user": "536102efe4b0243289761e3e"}, {"code": "(fn rev [s]\n  (if (seq s)\n    (concat (rev (rest s)) (vector (first s)))\n    s))", "problem": 23, "user": "53480973e4b084c2834f4a52"}, {"code": "(fn myreverse [x] (if (nil? x) x (cons (last x) (myreverse (butlast x)))))", "problem": 23, "user": "536234a5e4b0243289761e4d"}, {"code": "(fn kreverse [lst]\n  (if (empty? lst)\n    '()\n    (conj (kreverse (take (- (count lst) 1) lst)) (last lst))))", "problem": 23, "user": "534ff8a6e4b084c2834f4ad1"}, {"code": "(fn [s]\n   (into '() s))", "problem": 23, "user": "53489329e4b084c2834f4a5b"}, {"code": "(fn rev [coll] (if (empty? coll) [] (conj (rev (rest coll)) (first coll))))", "problem": 23, "user": "53629381e4b0243289761e54"}, {"code": "(fn [coll]\n  (reduce (fn [acc item]\n            (cons item acc))\n          nil\n          coll))\n; probably fastest, faster than (into () coll) even.", "problem": 23, "user": "53576356e4b04ce2eb3ed27a"}, {"code": "(fn rev [coll]\n  (if (empty? coll)\n    []\n    (cons (last coll) (rev (butlast coll)))))", "problem": 23, "user": "536254a5e4b0243289761e50"}, {"code": "(fn r [l] (if (not (seq l)) '() (concat (r (rest l)) (list (first l)))))", "problem": 23, "user": "53638ed2e4b0243289761e5b"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "5363d593e4b0243289761e5d"}, {"code": "(fn [col] (reduce conj () col))", "problem": 23, "user": "5363d242e4b0243289761e5c"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "5363f11be4b0243289761e5f"}, {"code": "(fn [coll](into '() coll))", "problem": 23, "user": "522b1993e4b0d34ee08e71b6"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "53653538e4b0243289761e6a"}, {"code": "#(into () %)", "problem": 23, "user": "523630eee4b05f3be1c7c8e8"}, {"code": "(fn [coll]\n        (loop [coll coll\n               reversed '()]\n          (if (empty? coll)\n            reversed\n            (recur (rest coll) (cons (first coll) reversed)))))", "problem": 23, "user": "536581e4e4b0243289761e6d"}, {"code": "(fn rev \n  ([ls] (if (empty? ls) ls (concat (rev (rest ls)) (take 1 ls)))))", "problem": 23, "user": "5364697ce4b0243289761e62"}, {"code": "reduce conj ()", "problem": 23, "user": "535f295fe4b04ce2eb3ed2da"}, {"code": "#(reduce (fn [s i] (cons i s)) () %1)", "problem": 23, "user": "4f085a31535dcb61093f6c35"}, {"code": "(fn rev [coll] (if (empty? coll) [] (conj (rev (rest coll)) (first coll))))", "problem": 23, "user": "5367ca98e4b0243289761e86"}, {"code": "(fn [sequen]\n  ((fn [acc rest-sequen]\n    (let \n      [tail (rest rest-sequen)\n          head (first rest-sequen)]\n\n      (if (nil? head)\n        acc\n        (recur (conj acc head) tail))))\n   '() sequen ;starting parameters for inner function\n   ))", "problem": 23, "user": "4fafd067e4b081705acca259"}, {"code": "reduce conj ()", "problem": 23, "user": "52a93d48e4b0c58976d9ac42"}, {"code": "(fn [xs]\n  (reduce conj '() xs))", "problem": 23, "user": "53684a2fe4b0243289761e8c"}, {"code": "(fn rev [l] (if (= (count l) 1) l (cons (last l) (rev (first (partition (- (count l) 1) l))))))", "problem": 23, "user": "5368a275e4b0243289761e8f"}, {"code": "#(into '() %)", "problem": 23, "user": "5368c802e4b0243289761e91"}, {"code": "(fn [coll] (reduce conj '() coll))", "problem": 23, "user": "53663e82e4b0243289761e73"}, {"code": "(fn rev\n\t([s] (rev s (empty s)))  \t\n  \t([s acc] (if (empty? s) acc (rev (rest s) (cons (first s) acc)))))", "problem": 23, "user": "4f805b4be4b033992c121bf2"}, {"code": "(fn rev [items] (if (empty? items)\n                    items\n                    (cons (last items) (rev (take (dec (count items)) items)))\n                    ))", "problem": 23, "user": "5368fedee4b0243289761e93"}, {"code": "(fn [x] (into '() x))", "problem": 23, "user": "535943b3e4b04ce2eb3ed295"}, {"code": "#(into '() %)", "problem": 23, "user": "53658ce7e4b0243289761e6e"}, {"code": "#(into () % )", "problem": 23, "user": "534d639ae4b084c2834f4a9e"}, {"code": "(fn my-reverse [lst] \n  (reduce (fn [acc el] \n            (conj acc el))\n          ()\n          lst))", "problem": 23, "user": "53695439e4b0243289761e9a"}, {"code": "reduce conj ()", "problem": 23, "user": "536973e5e4b0243289761e9e"}, {"code": "(fn [in-seq]\n  (loop [[first & rest] (seq in-seq)\n         result '()]\n    (if (nil? first)\n      result\n      (recur rest (conj result first)))))", "problem": 23, "user": "535d2e21e4b04ce2eb3ed2bd"}, {"code": "(fn my-reverse [col]\n        (loop [col col\n               new-col '()]\n          (if (empty? col)\n            new-col\n            (recur (rest col) (conj new-col (first col))))))", "problem": 23, "user": "5369d072e4b0243289761ea1"}, {"code": "into ()", "problem": 23, "user": "4ec53f8c535d6d7199dd368b"}, {"code": "#(into () %)", "problem": 23, "user": "524b0645e4b09eba1c0223bf"}, {"code": "#(loop [out [] in %] (if (empty? in) out (recur (conj out (last in)) (butlast in))))", "problem": 23, "user": "536a37efe4b0243289761eaa"}, {"code": "reduce #(conj %1 %2) '()", "problem": 23, "user": "536aa86de4b0243289761eb1"}, {"code": "#(into () %)", "problem": 23, "user": "536bc59fe4b0243289761ec3"}, {"code": "reduce conj '()", "problem": 23, "user": "51cb5c3de4b08d8387cbedd7"}, {"code": "#(into () %)", "problem": 23, "user": "536bd4dee4b0fc7073fd6e30"}, {"code": "(fn [coll]\n  (loop [old-list coll new-list []]\n    (if (empty? old-list)\n      new-list\n      (recur (rest old-list) (cons (first old-list) new-list)))))", "problem": 23, "user": "534d5ab7e4b084c2834f4a9c"}, {"code": "#(reduce (fn [a b] (conj a b)) '() %)", "problem": 23, "user": "536be89ee4b0fc7073fd6e32"}, {"code": "#(reduce (fn [rev item] (cons item rev)) '() %)", "problem": 23, "user": "536aba0be4b0243289761eb2"}, {"code": "#(into () %)", "problem": 23, "user": "536bb179e4b0243289761ec1"}, {"code": "#(reduce (fn [n c] (cons c n)) nil %)", "problem": 23, "user": "5356d00ee4b04ce2eb3ed26f"}, {"code": "(fn myreverse [x]\t(if (= x '())\n                     '()\n                   (concat (myreverse (rest x)) [(first x)])))", "problem": 23, "user": "536b5feee4b0243289761eba"}, {"code": "(fn [col]\n  (loop [x (count col)\n         result []]\n    (if (> x 0)\n      (recur (dec x) (conj result (nth (vec col) (- x 1))))\n      result)))", "problem": 23, "user": "4f7cbf4ae4b06e829148e1b7"}, {"code": "(partial reduce conj '())", "problem": 23, "user": "536c92eae4b0fc7073fd6e43"}, {"code": "(fn [lst]\n  (reduce #(cons %2 %1) [] lst))", "problem": 23, "user": "536c7470e4b0fc7073fd6e3e"}, {"code": "(fn [xs]\n  (loop [xs xs, acc '()]\n    (if (empty? xs)\n      acc\n      (recur (rest xs) (cons (first xs) acc)))))", "problem": 23, "user": "536ca4bde4b0fc7073fd6e49"}, {"code": "(fn [xs]\n  (loop [x xs y '()]\n    (if (empty? x)\n      y\n      (recur (rest x)\n             (cons (first x) y)))))", "problem": 23, "user": "53664e3be4b0243289761e74"}, {"code": "#(into () %)", "problem": 23, "user": "5369172ce4b0243289761e96"}, {"code": "(fn my-rev [col]\n      (if (= 1 (count col))\n        (list (first col))\n        (concat (my-rev (rest col)) [(first col)])\n        )\n      )", "problem": 23, "user": "536827f1e4b0243289761e8a"}, {"code": "(fn [s] (reduce conj '() s))", "problem": 23, "user": "536c1531e4b0fc7073fd6e36"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "536d83cee4b0fc7073fd6e5e"}, {"code": "into ()", "problem": 23, "user": "536b2048e4b0243289761eb7"}, {"code": "(fn [c] (reduce (fn [acc i] (cons i acc)) (empty c) c))", "problem": 23, "user": "536de1c3e4b0fc7073fd6e64"}, {"code": "reduce #(cons %2 %1) []", "problem": 23, "user": "53691dc7e4b0243289761e97"}, {"code": "#(reduce (fn [acc e] (conj acc e)) '() %)", "problem": 23, "user": "4fe9ea87e4b0547ebccb2476"}, {"code": "reduce (fn[v e] (cons e v)) []", "problem": 23, "user": "536e86b0e4b0fc7073fd6e72"}, {"code": "(fn my-reverse [coll]\n  (loop [coll coll r ()]\n    (if (empty? coll)\n      r\n      (recur (rest coll)\n             (cons (first coll) r)))))", "problem": 23, "user": "5369a4b1e4b0243289761e9f"}, {"code": "#(into () %)", "problem": 23, "user": "536ecd9fe4b0fc7073fd6e76"}, {"code": "(fn [seq]\n  (loop [out '() in seq]\n    (if (empty? in)\n      out\n      (recur (conj out (first in)) (rest in)))))", "problem": 23, "user": "536eb396e4b0fc7073fd6e74"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "536f62aee4b0fc7073fd6e7c"}, {"code": "#(apply conj '() %)", "problem": 23, "user": "4ff69377e4b0678c553fc37f"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "536f5900e4b0fc7073fd6e7b"}, {"code": "into ()", "problem": 23, "user": "52c24561e4b07a9af579237b"}, {"code": "reduce conj '()", "problem": 23, "user": "535e518ee4b04ce2eb3ed2cf"}, {"code": "(fn\n  [items]\n  (loop [remaining-items items\n         final-items [] ]\n    (if (empty? remaining-items)\n      final-items\n      (let [final-items (conj final-items (last remaining-items))]\n        (recur (butlast remaining-items) final-items)\n        ))))", "problem": 23, "user": "536f9436e4b0fc7073fd6e82"}, {"code": "(fn r [s]\n  (into () s ))", "problem": 23, "user": "536c35c3e4b0fc7073fd6e3a"}, {"code": "#(into () %)", "problem": 23, "user": "53705e2de4b0fc7073fd6e96"}, {"code": "reduce #(cons %2 %) ()", "problem": 23, "user": "536e0930e4b0fc7073fd6e66"}, {"code": "into ()", "problem": 23, "user": "536c7f32e4b0fc7073fd6e40"}, {"code": "(fn [s] (apply conj '() s))", "problem": 23, "user": "536f2faee4b0fc7073fd6e79"}, {"code": "reduce conj ()", "problem": 23, "user": "52eaba10e4b09f7907dd14c2"}, {"code": "reduce conj '()", "problem": 23, "user": "5370ef22e4b0fc7073fd6ea0"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "5364ab34e4b0243289761e64"}, {"code": "(fn [nums]\n  (loop [nums nums\n         res '()]\n    (if (nil? nums)\n      (vec res)\n      (recur (next nums) (cons (first nums) res)))))", "problem": 23, "user": "4e8a8720535d65386fec210c"}, {"code": "(fn [items]\n  (loop [items items\n         acc '()]\n    (if (empty? items)\n      acc\n      (recur (rest items) (conj acc (first items))))))", "problem": 23, "user": "5371a0fce4b0493c815db700"}, {"code": "(fn [x]\n  (map-indexed \n    (fn [i _] (nth (seq x) (- (count x) 1 i)))\n    (seq x)))", "problem": 23, "user": "5370612be4b0fc7073fd6e97"}, {"code": "#(loop[lst % nst nil] (if (nil? lst) nst (recur (next lst) (cons  (first lst) nst ))))", "problem": 23, "user": "4e8849c5535d8b9bb0147ca4"}, {"code": "#(map second  (sort-by > (zipmap (range) %)))", "problem": 23, "user": "529f5a23e4b04e0c58e87baa"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "53722b80e4b0493c815db707"}, {"code": "#(into () %)", "problem": 23, "user": "51dd5d6fe4b0c33a4e1da406"}, {"code": "reduce conj '()", "problem": 23, "user": "52caee42e4b071a8d36bd3e8"}, {"code": "(fn [full-list]\n  (loop [rv [] src full-list]\n    (if (= src ())\n      rv\n      (recur (cons (first src) rv) (rest src)))))", "problem": 23, "user": "534f13b2e4b084c2834f4ac4"}, {"code": "(fn rev [x]\n  (if (empty? x) \n    []\n    (conj (rev (rest x)) (first x))))", "problem": 23, "user": "53713ebee4b0fc7073fd6ead"}, {"code": ";; Returns a seq of the items in the collection in reverse order.\n(fn rev [collection]\n  (if (empty? collection)\n    []\n  \t(conj (rev (rest collection)) (first collection))))", "problem": 23, "user": "53713ed9e4b0fc7073fd6eaf"}, {"code": "reduce (fn [a b] (cons b a)) '()", "problem": 23, "user": "5371bee2e4b0493c815db701"}, {"code": "(fn [xs] (reduce (fn [accum x]\n                   (conj accum x))\n                 '()\n                 xs))", "problem": 23, "user": "4f5c68c6e4b0030a34fb2b23"}, {"code": "(fn [coll]\n    (reduce conj '() coll))", "problem": 23, "user": "5317d78ee4b08068f379ed63"}, {"code": "reduce #(cons %2 %1) []", "problem": 23, "user": "53572767e4b04ce2eb3ed277"}, {"code": "#(into () %)", "problem": 23, "user": "53730973e4b06d7f452d9e05"}, {"code": "(fn rev [col]\n  (if (= 1 (count col))\n    col\n    (cons (last col)\n          (rev (butlast col)))))", "problem": 23, "user": "5225fa79e4b0f4c7e20d29c7"}, {"code": "reduce conj ()", "problem": 23, "user": "532c9dc9e4b019098a6f8b30"}, {"code": "(fn [s] (reduce conj '() s))", "problem": 23, "user": "53736ffce4b06d7f452d9e11"}, {"code": "#(into () %)", "problem": 23, "user": "534c1c64e4b084c2834f4a8a"}, {"code": "(fn [x] (reduce conj () x))", "problem": 23, "user": "5372eaf2e4b06d7f452d9e03"}, {"code": "into ()\n\n#_#(reduce (fn [a i] (cons i a)) () %)\n\n#_#(loop [acc ()\n        xs %]\n   (if (first xs)\n     (recur (cons (first xs) acc )\n              (rest xs))\n     acc))", "problem": 23, "user": "5371167fe4b0fc7073fd6ea7"}, {"code": "(fn [coll] (reduce #(conj %1 %2) '() coll))", "problem": 23, "user": "537393b2e4b06d7f452d9e14"}, {"code": "#(reduce (fn [a, b] (cons b a)) [] %)", "problem": 23, "user": "53712c03e4b0fc7073fd6ea9"}, {"code": "reduce conj ()", "problem": 23, "user": "53737e6ce4b06d7f452d9e13"}, {"code": "into()", "problem": 23, "user": "5373066be4b06d7f452d9e04"}, {"code": "(fn [s]\n  (loop [s s acc nil]\n    (if (empty? s)\n      acc\n      (recur (rest s) (conj acc (first s))))))", "problem": 23, "user": "536673a8e4b0243289761e76"}, {"code": "(fn reverse-seq\n  [seq]\n  (loop [rem seq\n         reversed ()]\n    (if (empty? rem)\n      reversed\n      (recur (rest rem) (conj reversed (first rem))))))", "problem": 23, "user": "53733312e4b06d7f452d9e0a"}, {"code": "(fn ireverse [s]\n\t(reduce conj () s))", "problem": 23, "user": "5374adc3e4b06d7f452d9e27"}, {"code": "(fn [coll]\n  (loop [s () coll coll]\n    (if (seq coll)\n      (recur (conj s (first coll)) (rest coll))\n      s)))", "problem": 23, "user": "5370d152e4b0fc7073fd6e9d"}, {"code": "(fn [x] (reduce conj '() x))", "problem": 23, "user": "53749685e4b06d7f452d9e23"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "53737909e4b06d7f452d9e12"}, {"code": "(fn [x] (reduce conj '() x))", "problem": 23, "user": "536d179be4b0fc7073fd6e52"}, {"code": "(fn [x] (reduce #(conj %1 %2) '() x))", "problem": 23, "user": "53736f65e4b06d7f452d9e0f"}, {"code": ";;(fn rev [seqq]\n;;  (if (= (count seqq) 1)\n ;;   seqq\n ;;   (conj (rev (pop seqq)) (peek seqq))\n;;    )\n;;  )\n (fn rr [coll] (reduce conj () coll))", "problem": 23, "user": "5362a936e4b0243289761e55"}, {"code": "(fn [x]\n  (loop [x x\n         r []]\n    (if (seq x)\n      (recur (rest x) (cons (first x) r))\n      r\n      )\n  ))", "problem": 23, "user": "50d8a50de4b01f0871336e6d"}, {"code": "reduce conj ()", "problem": 23, "user": "536be48ee4b0fc7073fd6e31"}, {"code": "reduce conj '()", "problem": 23, "user": "53756f8be4b06839e8705e14"}, {"code": "(fn f [x] \n  (if (empty? x)\n    []\n    (conj (f (rest x))\n           (first x))))", "problem": 23, "user": "5375b852e4b06839e8705e17"}, {"code": "(fn [x] (into () x))", "problem": 23, "user": "5375d846e4b06839e8705e18"}, {"code": "(fn [x] (reduce conj () x))", "problem": 23, "user": "536dcc51e4b0fc7073fd6e62"}, {"code": "into '()", "problem": 23, "user": "4f92de49e4b0dcca54ed6cb2"}, {"code": "#(loop [sequ % answer []]\n\t(if (empty? sequ)\n\t\tanswer\n\t\t(recur (rest sequ) (cons (first sequ) answer))\n\t)\n)", "problem": 23, "user": "537610eee4b06839e8705e1a"}, {"code": "(fn [col] \n  (reduce conj '() col))", "problem": 23, "user": "53762466e4b06839e8705e1e"}, {"code": "#(loop [x % rev ()] (if (empty? x) rev (recur (drop 1 x) (conj rev (first x)))))", "problem": 23, "user": "5376190de4b06839e8705e1c"}, {"code": "(fn rev-me\n  [coll]\n  (if (empty? coll)\n    coll\n    (vec (cons (last coll) (rev-me (butlast coll))))))", "problem": 23, "user": "53703300e4b0fc7073fd6e90"}, {"code": "(fn [xs] (loop [ys xs, acc ()]\n           (if (seq ys)\n             (recur (rest ys) (cons (first ys) acc))\n             acc)))", "problem": 23, "user": "53720c5ce4b0493c815db704"}, {"code": "reduce (fn [a b] (cons b a)) []", "problem": 23, "user": "53767991e4b06839e8705e25"}, {"code": "; This is the first problem I've done for which my initial solution feels truly clojure-y.\nreduce conj '()", "problem": 23, "user": "536b9d8ae4b0243289761ebe"}, {"code": "(fn rev [x] \n  (if (empty? x)\n    nil\n    (conj (rev (butlast x)) (last x) )))", "problem": 23, "user": "5376966ae4b06839e8705e27"}, {"code": "(fn [seq]\n  (reduce (fn [x y] (concat [y] x)) [] seq))", "problem": 23, "user": "5376d1cfe4b06839e8705e2a"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "5377a23ce4b06839e8705e39"}, {"code": "(partial reduce conj ())", "problem": 23, "user": "536d260be4b0fc7073fd6e55"}, {"code": "(fn [xs]\n  (reduce (fn [coll x] (cons x coll)) (empty xs) xs))", "problem": 23, "user": "53779a26e4b06839e8705e38"}, {"code": "#(loop [my-sequence % reversed-sequence '()]\n   (if (empty? my-sequence)\n     reversed-sequence\n     (recur (rest my-sequence) (conj reversed-sequence (first my-sequence)) )))", "problem": 23, "user": "521af66be4b0c4ef0be8301b"}, {"code": "reduce conj '()", "problem": 23, "user": "536e5b68e4b0fc7073fd6e6d"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "5379306fe4b06839e8705e50"}, {"code": "(fn R [V] (if (empty? V) [] (conj (R (rest V)) (first V))))", "problem": 23, "user": "536c77f1e4b0fc7073fd6e3f"}, {"code": "#( loop [acc [] s %] (if (empty? s) acc (recur (cons (first s) acc) (rest s) )))", "problem": 23, "user": "536c1119e4b0fc7073fd6e34"}, {"code": "#(into () (vec %))", "problem": 23, "user": "53792653e4b06839e8705e4e"}, {"code": "reduce conj ()", "problem": 23, "user": "5370b386e4b0fc7073fd6e9b"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "52d019ede4b07d0d72b273b6"}, {"code": "reduce conj ()", "problem": 23, "user": "53778b90e4b06839e8705e36"}, {"code": "(fn [s]\n  (reduce #(conj %1 %2) '() s))", "problem": 23, "user": "5370f8ede4b0fc7073fd6ea2"}, {"code": "reduce conj ()", "problem": 23, "user": "53765e1ae4b06839e8705e23"}, {"code": "#(reduce (fn [v i] (cons i v)) [] %)", "problem": 23, "user": "52cda397e4b07d0d72b2737a"}, {"code": "(fn [x] (let [revr (fn revr [x y] \n                     (if (= x '())\n                       y\n                       (revr\n                        (rest x)\n                        (cons (first x) y)\n                        )\n                       )\n                     )]\n          (revr x '())\n          )\n  )", "problem": 23, "user": "537a620be4b06839e8705e5f"}, {"code": "(fn rever [x  y ] (if (empty? y) x (rever (cons (first y) x ) (rest y)))) nil", "problem": 23, "user": "537a1012e4b06839e8705e5c"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "532be28ae4b09d4e7a9b5539"}, {"code": "(fn [x]\n  (loop [s x rev []]\n    (if (empty? s)\n      rev\n      (recur (rest s) (cons (first s) rev)))))", "problem": 23, "user": "53791ab7e4b06839e8705e4d"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "537b1083e4b06839e8705e64"}, {"code": "(fn my-reverse\n  [xs]\n  (if (empty? xs)\n    xs\n    (let [f (first xs)\n          r (rest xs)]\n      (concat (my-reverse r) (vector f)))))", "problem": 23, "user": "5360f043e4b0243289761e3c"}, {"code": "#(reduce (fn [a b] (cons b a)) nil %)", "problem": 23, "user": "537b9b0ce4b06839e8705e6b"}, {"code": "(partial reduce conj '())", "problem": 23, "user": "53613db8e4b0243289761e41"}, {"code": "(partial reduce #(cons %2 %1) '())", "problem": 23, "user": "537bde5de4b06839e8705e73"}, {"code": "(fn recursive-reverse [coll]\n    (if (empty? coll)\n        []\n        (conj (recursive-reverse (rest coll)) (first coll) )))", "problem": 23, "user": "537bb9efe4b06839e8705e6e"}, {"code": "(fn [items]\n  (reduce #(cons %2 %1) [] items)  \n)", "problem": 23, "user": "4e749e84535d7a570dd295b9"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "4f849f76e4b033992c121c36"}, {"code": "(fn foo [x]\n (if (empty? x) [] (conj (foo (rest x)) (first x))))", "problem": 23, "user": "537cd1dce4b06839e8705e7e"}, {"code": "#(reduce (fn [x y] (cons y x)) '() %)", "problem": 23, "user": "536f96e3e4b0fc7073fd6e83"}, {"code": "(fn [seq] (loop [reverse-list []\n                remaining-list seq]\n           (if (empty? remaining-list)\n             reverse-list\n             (recur (cons (first remaining-list) reverse-list)\n                    (rest remaining-list)))))", "problem": 23, "user": "537d366de4b06839e8705e87"}, {"code": "(fn sol [l]\n    (loop [l   l \n           res []]\n      (if (seq l)\n        (recur (rest l) (cons (first l) res))\n        res)))", "problem": 23, "user": "5374cbf4e4b06d7f452d9e29"}, {"code": "#(into () %)", "problem": 23, "user": "537d4a69e4b06839e8705e8a"}, {"code": "(fn [col]\n  (reduce conj '() col))", "problem": 23, "user": "53790dc6e4b06839e8705e4c"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "537e59ffe4b06839e8705ea3"}, {"code": "#((fn rev [l e]\n    (if (empty? l) (list e)\n      (cons e (rev (butlast l) (last l))))) (butlast %) (last %))", "problem": 23, "user": "537e745ae4b06839e8705ea6"}, {"code": "(fn rv [l]\n  (if (empty? l)\n    l\n    (concat (rv (rest l)) (cons (first l) '()))))", "problem": 23, "user": "531bad96e4b08068f379ed93"}, {"code": "(fn rev [sequence]\n  (reduce\n    (fn [res elem] (concat [elem] res))\n    []\n    sequence\n  )\n)", "problem": 23, "user": "537d9b39e4b06839e8705e8f"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "537d6d44e4b06839e8705e8c"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "4f7426fde4b044e54cd9a8f5"}, {"code": "#(into () %)", "problem": 23, "user": "537e860ae4b06839e8705ea7"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "537f4652e4b06839e8705eb1"}, {"code": "(fn [coll] (into () coll))", "problem": 23, "user": "537f6df1e4b06839e8705eb5"}, {"code": "sort #(compare %2 %)", "problem": 23, "user": "52e55e16e4b09f7907dd1460"}, {"code": "(fn[x] (reduce conj '() x))", "problem": 23, "user": "525cc912e4b0cb4875a45d48"}, {"code": "into ()", "problem": 23, "user": "511ffbabe4b0e88f5a20c40c"}, {"code": "reduce conj '()", "problem": 23, "user": "537fa02ce4b06839e8705ebc"}, {"code": "into ()", "problem": 23, "user": "537e4259e4b06839e8705e9e"}, {"code": "#(reduce conj nil %)", "problem": 23, "user": "536c99c5e4b0fc7073fd6e46"}, {"code": "(fn my-reverse [xs]\n  (loop [in-strm (seq xs) out-strm ()]\n    (if (= in-strm nil) out-strm (recur (next in-strm) (cons (first in-strm) out-strm)))))", "problem": 23, "user": "53800d99e4b06839e8705ebd"}, {"code": "#(reduce conj nil %)", "problem": 23, "user": "53809b34e4b06839e8705ec3"}, {"code": "reduce conj ()", "problem": 23, "user": "53806e5be4b06839e8705ec1"}, {"code": "(fn [L] (map nth (repeat (seq L)) (range (dec (count L)) -1 -1)))", "problem": 23, "user": "53811c2de4b06839e8705ec8"}, {"code": "#(into () %)", "problem": 23, "user": "5376f0d0e4b06839e8705e2c"}, {"code": "#(reduce (fn [a b] (conj a b)) () %)", "problem": 23, "user": "53820087e4b06839e8705ecf"}, {"code": "(fn [s]\n  (letfn\n    [(helper [s result]\n         (if \n          (empty? s)\n           result\n          (recur (drop-last s) (conj result (last s)))))]\n     (helper s [])))", "problem": 23, "user": "53813189e4b06839e8705ec9"}, {"code": "(fn my-reverse\n  ([a-list]\n   (if (= (count a-list) 0)\n     nil\n     (cons (last a-list)(my-reverse (butlast a-list))))))", "problem": 23, "user": "537cf454e4b06839e8705e82"}, {"code": "(fn [seq] (reduce (fn [list thing] (conj list thing)) '() seq))", "problem": 23, "user": "537ca19be4b06839e8705e7a"}, {"code": "(fn rev [s] (if (empty? s) nil (concat (rev (rest s)) [(first s)])))", "problem": 23, "user": "5382668fe4b06839e8705ed3"}, {"code": "(fn [arg]\n  (loop [li arg\n         res (empty arg)]\n    (if (empty? li)\n      res\n      (recur (rest li) (cons (first li) res)))))", "problem": 23, "user": "537881a4e4b06839e8705e46"}, {"code": "(fn [x] (into () x))", "problem": 23, "user": "536a52f1e4b0243289761eac"}, {"code": "into ()", "problem": 23, "user": "5383865ce4b06839e8705edf"}, {"code": "(fn \n  [items]\n  (let [items (seq items)]\n\n    (loop [nitems []\n           i (count items)]\n      (if (= i 0)\n        nitems\n        (recur\n         (conj nitems (nth items (- i 1)))\n         (dec i))))\n    )\n  )", "problem": 23, "user": "5383c054e4b06839e8705ee8"}, {"code": "reduce (fn [x xs] (conj x xs)) '()", "problem": 23, "user": "5327c591e4b09d4e7a9b54ff"}, {"code": "(fn [x] (vec (into '() x)))", "problem": 23, "user": "5383cc0ae4b06839e8705ee9"}, {"code": "into '()", "problem": 23, "user": "511688d5e4b0b3e208dba05a"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "53834ed3e4b06839e8705edb"}, {"code": "(fn [x] (loop [x (vec x) i 0 y [] ] (if (>= i (count x)) y (recur x (inc i) (cons (nth x i) y)))))", "problem": 23, "user": "5383521fe4b06839e8705edc"}, {"code": "(fn rev [x] (letfn [(hlp [x ls] (if (empty? x) ls (hlp (next x) (cons (first x) ls))))] (hlp x '())))", "problem": 23, "user": "537f8e7be4b06839e8705eb8"}, {"code": "(fn _reverse\n  [x]\n    (reduce conj () x))", "problem": 23, "user": "5383ee9ee4b06839e8705eeb"}, {"code": "reduce conj ()", "problem": 23, "user": "537f9e34e4b06839e8705ebb"}, {"code": "#(into () %)", "problem": 23, "user": "52f28593e4b05e3f0be25ef9"}, {"code": "#(into '() %)", "problem": 23, "user": "5384e2cee4b06839e8705ef7"}, {"code": "(fn rev [sequ]\n  (if (empty? sequ) []\n    (conj \n     (rev (rest sequ)) \n     (first sequ)\n    )\n  )\n)", "problem": 23, "user": "53854a04e4b06839e8705eff"}, {"code": "(fn my-reverse [c & a]\n  (let [acc (conj (first a) (first c))]\n    (if (next c)\n      (my-reverse (next c) acc)\n      acc)))", "problem": 23, "user": "538557aee4b06839e8705f02"}, {"code": "(fn [elems]\n  (reduce (fn [result e]\n            (cons e result)) '() elems))", "problem": 23, "user": "536f871de4b0fc7073fd6e7f"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "538538b2e4b06839e8705efe"}, {"code": "reduce conj '()", "problem": 23, "user": "513b10e3e4b067e25a345ed0"}, {"code": "reduce #(cons %2 %1) '()", "problem": 23, "user": "5384197fe4b06839e8705eed"}, {"code": "#(reduce conj nil %)", "problem": 23, "user": "5385785ae4b06839e8705f04"}, {"code": "(fn [c] (reduce (fn [a i] (cons i a)) '() c))", "problem": 23, "user": "4f294bbbe4b0d6649770a022"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "5385eaa3e4b06839e8705f09"}, {"code": "(fn [initial-x](loop [x initial-x, result nil](if (empty? x) result (recur (rest x) (cons (first x) result)))))", "problem": 23, "user": "5385ee97e4b06839e8705f0a"}, {"code": "reduce conj ()", "problem": 23, "user": "538505d1e4b06839e8705efa"}, {"code": "#(reduce (fn [rs e] (conj rs e)) '() %)", "problem": 23, "user": "53858d5be4b06839e8705f06"}, {"code": "#(into () %)", "problem": 23, "user": "53871d06e4b06839e8705f19"}, {"code": "(fn [collection]\n     (loop[col collection res []]\n        ( if(empty? col)\n            res\n            (recur (rest col) (concat  (vector (first col)) res))))\n\n\n     )", "problem": 23, "user": "53862316e4b06839e8705f0e"}, {"code": "#(into () %)", "problem": 23, "user": "538754b1e4b06839e8705f1c"}, {"code": "#(into () %)", "problem": 23, "user": "53874820e4b06839e8705f1b"}, {"code": "#(reduce conj '() %1)", "problem": 23, "user": "53864493e4b06839e8705f10"}, {"code": "(fn rev [xs]\n  (if (empty? xs)\n    '[]\n    (conj (rev (rest xs))\n            (first xs))))", "problem": 23, "user": "53879e89e4b06839e8705f23"}, {"code": "(fn rev-list\n  [s]\n  (loop [lst s\n         new-lst ()]\n    (if (empty? lst)\n      new-lst\n      (recur (rest lst) (conj new-lst (first lst))))))", "problem": 23, "user": "538510c2e4b06839e8705efb"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "534eecaee4b084c2834f4abf"}, {"code": "#(loop [coll % acc []]\n    (if (empty? coll)\n      acc\n      (recur (butlast coll) (conj acc (last coll)))\n      ))", "problem": 23, "user": "53886d2fe4b0640c7a9a589d"}, {"code": "(fn my-reverse [seqn]\n  (if (not (seq seqn))\n    []\n    (conj (my-reverse (rest seqn)) (first seqn))))", "problem": 23, "user": "53889587e4b0640c7a9a589e"}, {"code": "#(loop [new-list []\n         list (seq %1)]\n    (if (empty? list)\n      new-list\n      (recur (cons (first list) new-list)\n             (rest list))))", "problem": 23, "user": "53838742e4b06839e8705ee0"}, {"code": "(fn rev [coll] (reduce (fn [x y] (conj x y) ) '() coll))", "problem": 23, "user": "537bca8be4b06839e8705e71"}, {"code": "#(into () %)", "problem": 23, "user": "53890b11e4b0640c7a9a58ad"}, {"code": "(fn my-reverse\n  ([s] (my-reverse s '()))\n  ([s r]\n   (if (seq s)\n     (recur (rest s) (conj r (first s)))\n     r)))", "problem": 23, "user": "514a3fa5e4b0829bd132edb6"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "5388d50fe4b0640c7a9a58a7"}, {"code": "#(map (fn [x] (:itm x)) (sort-by :idx (map-indexed (fn [idx itm] {:idx (* idx -1) :itm itm}) %)))", "problem": 23, "user": "538a2930e4b0640c7a9a58b7"}, {"code": "#(loop \n   [x % r []] \n   (if (empty? x) \n       r \n       (recur (butlast x) (conj r (last x)))))", "problem": 23, "user": "537943c0e4b06839e8705e52"}, {"code": "into ()", "problem": 23, "user": "538a8d28e4b0640c7a9a58ba"}, {"code": "#(reduce (fn [x y] (conj x y)) '() %)", "problem": 23, "user": "538b1644e4b0640c7a9a58c0"}, {"code": "(fn myReverse [aSeq]\n  (reduce #(cons %2 %) '() (seq aSeq)  ))", "problem": 23, "user": "5379ed48e4b06839e8705e5a"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "52503747e4b0541d1855b828"}, {"code": "#(reduce (fn [acc x] (cons x acc)) '() %)", "problem": 23, "user": "538bd264e4b0640c7a9a58c8"}, {"code": "(fn [s]\n  (loop [s s rs []]\n    (if (= (count s) 1)\n      (cons (first s) rs)\n      (recur (rest s) (cons (first s) rs)))))", "problem": 23, "user": "538be6afe4b0640c7a9a58c9"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "529c585ae4b04e0c58e87b60"}, {"code": "reduce conj '()", "problem": 23, "user": "53410c24e4b00652c8746eca"}, {"code": "(fn [s]\n  (loop [s s r '()]\n    (if (= nil (first s))\n      r\n      (recur (rest s) (conj r (first s))))))", "problem": 23, "user": "538cc422e4b0b51d73faae63"}, {"code": "(fn [sequ]\n  (loop [s sequ rev []]\n\t(if (empty? s)\n    \trev\n    (recur (rest s) (cons (first s) rev))\n      )\n    )\n  )", "problem": 23, "user": "53863845e4b06839e8705f0f"}, {"code": "(fn [coll]\n  (loop [c coll\n         rc (empty coll)]\n    (if (empty? c)\n      rc\n      (recur (rest c) (cons (first c) rc)))))", "problem": 23, "user": "50310713e4b05b7df5a0b84c"}, {"code": "(fn f5 [x]\n  (into () x))", "problem": 23, "user": "535aee3be4b04ce2eb3ed2aa"}, {"code": "(fn [x]\n  (loop [newseq '()\n         x x]\n    (if (empty? x)\n      newseq\n      (recur (conj newseq (first x)) (rest x)))))", "problem": 23, "user": "538d464ee4b0b51d73faae69"}, {"code": "(fn rev [x] (if (empty? (rest x)) x (conj (rev (drop-last x)) (last x))))", "problem": 23, "user": "538c3424e4b0b51d73faae58"}, {"code": "reduce conj '()", "problem": 23, "user": "53858594e4b06839e8705f05"}, {"code": "(fn my-reverse\n  [col]\n  (reduce conj '() col))", "problem": 23, "user": "538d64cae4b0b51d73faae6d"}, {"code": "#(into () %)", "problem": 23, "user": "538d7e2ee4b0b51d73faae70"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "538d8bb8e4b0b51d73faae71"}, {"code": "(fn [s] (loop [ss s n []]\n          (let [l (last ss)]\n            (if (nil? l)\n              n\n              (recur (butlast ss) (conj n l))))))", "problem": 23, "user": "538d0d66e4b0b51d73faae66"}, {"code": "(fn gg [c]\n  (loop [result (empty c) coll c]\n    (if (empty? coll)\n        result\n        (recur (cons (first coll) result)\n               (rest coll)))))", "problem": 23, "user": "538c9144e4b0b51d73faae5d"}, {"code": "#(into () %)", "problem": 23, "user": "538de891e4b0b51d73faae78"}, {"code": "(fn [l] \n  ((fn rec [s res] (if (< (count s) 1) res (rec (rest s) (conj res (first s))))) l '()))", "problem": 23, "user": "53050c04e4b0d8b024fd3757"}, {"code": "(fn [coll] (reduce conj '() coll))", "problem": 23, "user": "538e1331e4b0b51d73faae7f"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "538e5b3fe4b0b51d73faae84"}, {"code": "#(into () %)", "problem": 23, "user": "53847a4ce4b06839e8705ef3"}, {"code": "(fn [s] (\n    (fn [t u] (\n         if (empty? t)\n               u\n               (recur (rest t) (conj u (first t)))\n    )) s '()\n))", "problem": 23, "user": "538de1ede4b0b51d73faae77"}, {"code": "#(reduce (fn [x y] (conj x y)) '() %)", "problem": 23, "user": "538fe131e4b0b51d73faae91"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "5390110de4b0b51d73faae94"}, {"code": "(fn [coll] (sort (fn [x y] (compare y x)) coll))", "problem": 23, "user": "5382b433e4b06839e8705ed7"}, {"code": "(fn [ls]\n  (reduce (fn [rev el]\n            (cons el rev))\n          [] ls))", "problem": 23, "user": "5390952be4b0b51d73faae9c"}, {"code": "reduce conj ()", "problem": 23, "user": "515d6f49e4b00901442db1dd"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "53906b89e4b0b51d73faae99"}, {"code": "reduce conj ()", "problem": 23, "user": "538d73c1e4b0b51d73faae6f"}, {"code": "(fn rev [s]  (if (empty? s)    []    (conj     (rev (rest s))     (first s)    )  ))", "problem": 23, "user": "530bf87ee4b02e82168697d5"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "52a3a7ebe4b04e0c58e87c02"}, {"code": "(fn  my-rev [sequence]\n  (loop [s (seq sequence), ns (list)]\n    (cond (empty? s) ns\n         :else (recur (rest s) (conj ns (first s))))))", "problem": 23, "user": "538e36c7e4b0b51d73faae81"}, {"code": "into '()", "problem": 23, "user": "5383668ee4b06839e8705edd"}, {"code": "#(reduce (fn [s e] (concat [e] s)) [] %)", "problem": 23, "user": "5392b849e4b0b51d73faaeb1"}, {"code": "(fn [sq] \n  (loop [a sq\n         r []]\n    (if (empty? a)\n      r\n      (recur (drop-last a) (conj r (last a))))))", "problem": 23, "user": "53710c09e4b0fc7073fd6ea5"}, {"code": "(fn [l]\n(loop [r '() x (first l) ls (rest l)]\n\t(if (empty? ls) \n\t\t(conj r x) \n\t\t(do (println (str r \", \" x \", \" ls)) (recur (conj r x) (first ls) (rest ls)))\n\t)\n)\n)", "problem": 23, "user": "5384bbf8e4b06839e8705ef5"}, {"code": "(fn revprime [l]\n  (if (= 1 (count l))\n    l\n    (conj (vec (revprime (rest l))) (first l))))", "problem": 23, "user": "539378fbe4b0b51d73faaebd"}, {"code": "(fn [coll] (reduce conj '() coll))", "problem": 23, "user": "5393a2e1e4b0b51d73faaebf"}, {"code": "#(reduce (fn [reversed x] (cons x reversed)) () %)", "problem": 23, "user": "53940789e4b0b51d73faaec3"}, {"code": "(fn [coll]\n  (reduce (fn [result x] (cons x result)) [] coll))", "problem": 23, "user": "5189a51ae4b0288ada3dbdad"}, {"code": "(fn [li] \n   (map-indexed \n      (fn [i x] \n        (nth (vec li) (- (count li) i 1)) \n        )\n    li)\n  )", "problem": 23, "user": "5394265ee4b0b51d73faaec6"}, {"code": "#(into () %)", "problem": 23, "user": "539432c9e4b0b51d73faaec7"}, {"code": "(fn [col] (into () col))", "problem": 23, "user": "5394162be4b0b51d73faaec5"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "5393653be4b0b51d73faaebc"}, {"code": "reduce conj ()", "problem": 23, "user": "53948e96e4b0b51d73faaecc"}, {"code": "into ()", "problem": 23, "user": "5394aa77e4b0b51d73faaecd"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "5394c22ae4b0b51d73faaed0"}, {"code": "(fn _ [s] \n   (if (first s)\n     (concat (_ (rest s)) [(first s)])\n     nil))", "problem": 23, "user": "538d4926e4b0b51d73faae6a"}, {"code": "(fn\n  [coll]\n  (loop [original coll\n         result (sequence '())]\n    \n    (if (empty? original)\n      result\n      (recur (rest original)\n             (conj result (first original)))\n    )\n  )\n)", "problem": 23, "user": "53951c75e4b0b51d73faaed4"}, {"code": "#(into '() %)", "problem": 23, "user": "538d49e1e4b0b51d73faae6b"}, {"code": "(fn [s]\n  (loop [s s\n         result []]\n    (if (nil? s)\n    result\n    (recur (next s) (cons (first s) result)))))", "problem": 23, "user": "5374ad7de4b06d7f452d9e26"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "5395de6ae4b0b51d73faaedc"}, {"code": "#(into () %)", "problem": 23, "user": "53959edde4b0b51d73faaed8"}, {"code": "(fn [x]\n  (for [y (range (- (count x) 1) -1  -1)]\n        (get (vec x) y))\n)", "problem": 23, "user": "5396c9a8e4b0b51d73faaee4"}, {"code": "(fn rev-seq-wrapper [s] \n  (\n   (fn rev-seq [[f & r] rev]\n     (if (= nil f)\n       rev\n       (if (= nil r)\n         (cons f rev)\n         (recur r (cons f rev))))) (into [] s) []))", "problem": 23, "user": "5395a79be4b0b51d73faaed9"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "539755d9e4b0b51d73faaee8"}, {"code": "into ()", "problem": 23, "user": "53976599e4b0b51d73faaeea"}, {"code": "(fn reverse-recursively [coll]\n  (loop [[r & more :as all] (seq coll)\n         acc '()]\n    (if all\n      (recur more (cons r acc))\n      acc)))", "problem": 23, "user": "53979a87e4b0b51d73faaef0"}, {"code": "(partial reduce #(cons %2 %1) [])", "problem": 23, "user": "53978ea3e4b0b51d73faaeeb"}, {"code": "(fn [s]\n  (loop [result []\n         s s]\n    (if (seq s)\n      (recur (cons (first s) result) (rest s))\n      result)))", "problem": 23, "user": "52bc0dade4b07a9af57922f1"}, {"code": "reduce conj ()", "problem": 23, "user": "507516d0e4b054001656acda"}, {"code": "(fn reverse-seq \n  [s]\n  (cond\n   \t(= s nil) nil\n   \t:else (cons (last s) (reverse-seq (butlast s)))))", "problem": 23, "user": "52b71bd2e4b0c58976d9ad4d"}, {"code": "(fn rv [s]\n  (if (not (empty? s))\n    (conj (rv (rest s)) (first s))\n    []\n))", "problem": 23, "user": "53981cbce4b0b51d73faaef5"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "53973e7be4b0b51d73faaee6"}, {"code": "reduce (fn [a b] (conj a b)) '()", "problem": 23, "user": "52c98e7ae4b0c2d177d6213d"}, {"code": "(fn r [ x] (if-not (seq x) x (concat (r (rest x)) [(first x)])))", "problem": 23, "user": "5398305fe4b0b51d73faaef6"}, {"code": "(fn [coll] (reduce #(conj %1 %2) '() coll))", "problem": 23, "user": "5398d89ae4b0b51d73faaf01"}, {"code": "(fn rev [coll]\n  (lazy-seq\n   (if (empty? coll)\n     nil\n     (cons (last coll)\n           (rev (drop-last 1 coll))))))", "problem": 23, "user": "5398123ee4b0b51d73faaef3"}, {"code": "(fn rev [l]\n  (if (empty? l) nil\n   (concat (rev (next l)) (list (first l)))))", "problem": 23, "user": "53997239e4b0b51d73faaf07"}, {"code": "(fn [xs]\n  (reduce conj () xs))", "problem": 23, "user": "5392bfdee4b0b51d73faaeb2"}, {"code": "(fn rev [coll] (if-let [s (seq coll)] (conj (rev (rest s)) (first s)) []))", "problem": 23, "user": "539a2901e4b0b51d73faaf0f"}, {"code": "(fn [l]\n  (reduce (fn [result element]\n             (cons element result))\n             '()\n             l))", "problem": 23, "user": "538c6db7e4b0b51d73faae5a"}, {"code": "(fn [coll]\n  (reduce conj '() coll))", "problem": 23, "user": "539ad6b7e4b0b51d73faaf18"}, {"code": "#(into () %)", "problem": 23, "user": "537e104ce4b06839e8705e9a"}, {"code": "reduce conj ()", "problem": 23, "user": "536e5055e4b0fc7073fd6e6b"}, {"code": "(fn [ary] (reduce conj () ary))", "problem": 23, "user": "5398e3dde4b0b51d73faaf02"}, {"code": "(fn [s] (reduce conj () s))", "problem": 23, "user": "539b5fcee4b0b51d73faaf1e"}, {"code": "(fn [xs]\n  (loop [acc ()\n         xs xs]\n    (if (seq xs)\n      (recur (cons (first xs) acc)\n             (rest xs))\n      acc)))", "problem": 23, "user": "539c20a4e4b0b51d73faaf25"}, {"code": "(fn r1 [a-seq] \n  (if (empty? a-seq)\n    a-seq\n    (concat (r1 (rest a-seq)) (list (first a-seq)))))", "problem": 23, "user": "536e56dbe4b0fc7073fd6e6c"}, {"code": "(fn rev [par]\n  (let [head (first par) tail (rest par)]\n  ((fn aux [par s]\n     (let [head (first par) tail (rest par)]\n      (if-not (zero? (count tail))\n        (aux tail (cons head s))\n        (cons head s))))\n   tail (list head))))", "problem": 23, "user": "53908e6be4b0b51d73faae9a"}, {"code": "(fn [col & res] (if (seq col) (recur (rest col) (conj res (first col))) res))", "problem": 23, "user": "539c64cde4b0b51d73faaf2a"}, {"code": "(fn [coll]\n  (reduce conj () coll))", "problem": 23, "user": "5391ab43e4b0b51d73faaea6"}, {"code": "(fn [x] (cond (= x [1 2 3 4 5]) [5 4 3 2 1]\n              (= x #{2 5 7}) '(7 5 2)\n              (= x [[1 2][3 4][5 6]]) [[5 6][3 4][1 2]]))", "problem": 23, "user": "5397ecf6e4b0b51d73faaef2"}, {"code": "(fn [coll] (reduce conj nil coll))", "problem": 23, "user": "539cacbde4b0b51d73faaf2f"}, {"code": "(fn [count x] (if (= x ()) count (recur (conj count (first x)) (rest x)))) ()", "problem": 23, "user": "539c9d7ee4b0b51d73faaf2d"}, {"code": "into ()", "problem": 23, "user": "53752b27e4b06839e8705e12"}, {"code": "#(reduce (fn [x y] (conj x y)) '() %)", "problem": 23, "user": "539b4268e4b0b51d73faaf1c"}, {"code": "(fn [x]\n  ((fn [s rs]\n    (if (empty? s)\n      rs\n      (recur (rest s) (cons (first s) rs)))) x nil))", "problem": 23, "user": "52bf0de2e4b07a9af579232a"}, {"code": "#(into () %)", "problem": 23, "user": "539d4db6e4b0b51d73faaf34"}, {"code": "reduce conj '()", "problem": 23, "user": "539d4cdae4b0b51d73faaf33"}, {"code": "(fn myrev \n ([lst]\n  (myrev lst [])\n  )\n ([lst accum]\n   (if (empty? lst)\n     accum\n   (myrev (butlast lst) (conj accum (last lst)))\n  )\n  )\n  )", "problem": 23, "user": "53979319e4b0b51d73faaeec"}, {"code": "#(loop [s %, res nil]\n   (if (first s)\n     (recur (rest s) (conj res (first s)))\n     res))", "problem": 23, "user": "539ddf25e4b0b51d73faaf3e"}, {"code": "(fn [v]\n  (let [rev (fn [old new]\n              (if (seq old)\n                (recur (pop old) (conj new (peek old)))\n                new))]\n    (rev (vec v) [])))", "problem": 23, "user": "50b63c5ee4b0a86f8358ca69"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "539ec9f9e4b0ca733b974491"}, {"code": "(fn [l] (reduce conj '() l))", "problem": 23, "user": "539eb153e4b0ca733b97448e"}, {"code": "reduce conj '()", "problem": 23, "user": "539e79d2e4b0ca733b974489"}, {"code": "(fn [my_list]\n  (let [iter (fn [in_list out_list]\n               (if (empty? in_list)\n                 out_list\n                 (recur (rest in_list) (conj out_list (first in_list)))\n                )\n              )\n        ]\n     (iter my_list '())\n   )\n)", "problem": 23, "user": "533c9661e4b085b17e897d72"}, {"code": "reduce conj ()", "problem": 23, "user": "539f45dce4b0ca733b974497"}, {"code": "(fn [l] (loop [a l b []] (if (empty? a) b (recur (rest a) (cons (first a) b)))))", "problem": 23, "user": "4ea5b810535d7eef308072d7"}, {"code": "(fn [xs] \n  (reduce (fn [reversed x] \n            (cons x reversed) \n          ) \n          (empty xs)\n          xs\n  ) \n)", "problem": 23, "user": "539ac065e4b0b51d73faaf16"}, {"code": "into ()", "problem": 23, "user": "539f4e9ee4b0ca733b974498"}, {"code": "#(reduce (fn [x y] (conj x y)) '() %)", "problem": 23, "user": "53a009d2e4b0ca733b9744a5"}, {"code": "(fn [coll] (reduce conj '() coll))", "problem": 23, "user": "53a028eae4b0ca733b9744a7"}, {"code": "into ()", "problem": 23, "user": "539c54b3e4b0b51d73faaf27"}, {"code": "#(into () %)", "problem": 23, "user": "53a065c2e4b0ca733b9744ad"}, {"code": "#(into () %)\n;#(reduce conj () %)\n;(fn [x] (reduce #(conj %1 %2) '() x))", "problem": 23, "user": "53a074a4e4b0ca733b9744af"}, {"code": "#(into () %)", "problem": 23, "user": "53a09a1ee4b0ca733b9744b2"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "53a068cbe4b0ca733b9744ae"}, {"code": "(fn myRev [l] (if (= l []) [] (conj (myRev (rest l)) (first l))))", "problem": 23, "user": "53a0acebe4b0ca733b9744b4"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "53a0ce51e4b0ca733b9744b6"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "531f26d0e4b08068f379edc3"}, {"code": "reduce #(conj % %2) '()", "problem": 23, "user": "51a4d802e4b0def3c5c5869a"}, {"code": "(fn [s]\n  (loop [result () remain s]\n    (if (empty? remain)\n      result\n      (recur (cons (first remain) result) (rest remain)))))", "problem": 23, "user": "539cb777e4b0b51d73faaf30"}, {"code": "(fn [coll] (reduce #(cons %2 %1) () coll))", "problem": 23, "user": "53a1b5c8e4b0ca733b9744c1"}, {"code": "into '()", "problem": 23, "user": "52d885afe4b09f7907dd1398"}, {"code": "#(loop [coll %1 rcoll '()]\n    (if (empty? coll)\n      rcoll\n      (recur (butlast coll) (concat rcoll (take-last 1 coll)))))", "problem": 23, "user": "539f3397e4b0ca733b974496"}, {"code": "#(reduce conj '() %1)", "problem": 23, "user": "53a10187e4b0ca733b9744b9"}, {"code": "(fn [lst] (#( if (empty? %1) %2 (recur (rest %1) (conj %2 (first %1)) )) lst ()))", "problem": 23, "user": "539c9e26e4b0b51d73faaf2e"}, {"code": "(fn my-reverse\n  [coll]\n  (if (empty? coll)\n    []\n    (if (= (count coll) 1)\n      (list (first coll)) \n      (concat (my-reverse (rest coll)) (list (first coll))))))", "problem": 23, "user": "539e717fe4b0ca733b974488"}, {"code": "#(into () %)", "problem": 23, "user": "53a2e6abe4b0f1fc7453882f"}, {"code": "(fn [list] (into '() list))", "problem": 23, "user": "53a2a259e4b0f1fc7453882c"}, {"code": "reduce (fn [a b] (cons  b a )) []", "problem": 23, "user": "52f0ea04e4b05e3f0be25ee6"}, {"code": "(fn [seq]\n  (loop [seq seq\n         finalseq '()]\n    (if (= 0 (count seq))\n      finalseq\n      (recur (rest seq) (conj finalseq (first seq))))))", "problem": 23, "user": "53a36fd7e4b0f1fc74538834"}, {"code": "(fn reverse2 ([x] (reverse2 () x)) ([aux x] (if (empty? x) aux (recur (conj aux (first x)) (rest x)))))", "problem": 23, "user": "53a2ec2be4b0f1fc74538830"}, {"code": "(fn [coll]\n  (reduce #(cons %2 %1) '() coll))", "problem": 23, "user": "538e864ee4b0b51d73faae87"}, {"code": "#(into () %)", "problem": 23, "user": "53a198cae4b0ca733b9744bf"}, {"code": "reduce conj ()", "problem": 23, "user": "53a12b57e4b0ca733b9744ba"}, {"code": "#(reduce conj '() %)", "problem": 23, "user": "53a3edfce4b0f1fc7453883b"}, {"code": "#(loop [o % n []] (if (= nil o)\n                    n \n                    (recur (next o) (cons (first o) n))))", "problem": 23, "user": "53a442a6e4b0b62ce300572d"}, {"code": "into ()", "problem": 23, "user": "53a47cf1e4b0b62ce3005730"}, {"code": "(fn [s]\n  (loop [init_s s r '()]\n    (if (empty? init_s)\n      r\n      (recur (rest init_s) (conj r (first init_s))))))", "problem": 23, "user": "52fac708e4b047fd55836fff"}, {"code": "#(if (coll? (first %)) (sort-by first > %) (sort > %))", "problem": 23, "user": "53a2be95e4b0f1fc7453882d"}, {"code": "(fn [s] (reduce conj '() s))", "problem": 23, "user": "53a511aae4b0b62ce3005735"}, {"code": "(fn [xs] \n  (reduce conj nil xs))", "problem": 23, "user": "52e657e4e4b09f7907dd1472"}, {"code": "(fn [seq]\n  (reduce (fn [x y] (conj x y)) () seq))", "problem": 23, "user": "53a55de5e4b0b62ce3005739"}, {"code": "#(reduce conj () %)", "problem": 23, "user": "53a26cede4b0f1fc7453882a"}, {"code": "(fn [mylist] (into () mylist))", "problem": 23, "user": "53a5c7ffe4b0ef122a8689c4"}, {"code": "#(map last (take (count %) (iterate butlast %)))", "problem": 23, "user": "53a5737ee4b0b62ce300573a"}, {"code": "(fn [l] (reduce (fn [a b] (cons b a)) [] l))", "problem": 23, "user": "5396c94be4b0b51d73faaee3"}, {"code": "reduce conj ()", "problem": 23, "user": "533b1611e4b0e30313ee6cc6"}, {"problem": 23, "code": "into '()", "user": "53a7771ee4b047364c04441b"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "53a07aa7e4b0ca733b9744b0"}, {"problem": 23, "code": "(fn [items]\n  (into '() items))", "user": "53a7637de4b047364c044419"}, {"problem": 23, "code": "#(loop [x % y []]\n   (if (empty? x)\n     y\n     (recur (rest x) (cons (first x) y))))", "user": "537310e0e4b06d7f452d9e07"}, {"problem": 23, "code": "reduce #(cons %2 %) []", "user": "53a739b0e4b0ef122a8689d0"}, {"problem": 23, "code": "(fn [l]\n     (loop [li l, reversed (list)]\n           (if (empty? li)\n             reversed\n             (recur (rest li) (conj reversed (first li))))))", "user": "4f867b25e4b033992c121c51"}, {"problem": 23, "code": "(fn [coll]\n         (loop [c coll newcoll []]\n           (if (empty? c)\n             newcoll\n             (recur (rest c) (cons (first c) newcoll))\n             )\n           )\n         )", "user": "53a6a599e4b0ef122a8689cc"}, {"problem": 23, "code": "reduce #(cons %2 %1) []", "user": "538e29d1e4b0b51d73faae80"}, {"problem": 23, "code": "apply conj ()", "user": "4ff0c419e4b0678c553fc327"}, {"problem": 23, "code": "reduce conj '()", "user": "4f041de1535dcb61093f6ba5"}, {"problem": 23, "code": "reduce conj ()", "user": "53a881c5e4b047364c044428"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "53a987dde4b047364c044438"}, {"problem": 23, "code": "#(reduce (fn [x y] (conj x y)) '() %)", "user": "53a8d9efe4b047364c04442d"}, {"problem": 23, "code": "(fn rev [s]\n  (if (= 1 (count s))\n    s\n    (conj (rev (butlast s)) (last s))))", "user": "53a9db09e4b047364c04443b"}, {"problem": 23, "code": "reduce conj ()", "user": "53aa1528e4b047364c04443f"}, {"problem": 23, "code": "#(loop [lst %\n        res []]\n   (if (empty? lst)\n     res\n     (recur (rest lst) (cons (first lst) res))))", "user": "53a7dc5be4b047364c044422"}, {"problem": 23, "code": "#(into () %)", "user": "53a19dece4b0ca733b9744c0"}, {"problem": 23, "code": "#(reduce (fn [r e] (cons e r)) [] %)", "user": "53aa67e0e4b047364c044442"}, {"problem": 23, "code": "(fn [x]\n  ((fn [lst acc]\n     (if (= lst '())\n       acc\n       (recur (rest lst) (cons (first lst) acc))))\n  x (list)))", "user": "53aaaf7ae4b047364c044444"}, {"problem": 23, "code": "(fn [coll]\n  (loop [fwd (seq coll)\n         rev ()]\n    (if (empty? fwd)\n      (if (vector? coll)\n        (into [] rev)\n        rev)\n      (recur (rest fwd) (cons (first fwd) rev)))))", "user": "53a7e3b9e4b047364c044423"}, {"problem": 23, "code": "reduce conj '()", "user": "53a83877e4b047364c044425"}, {"problem": 23, "code": "(fn [lst]\n  (loop [acc '()\n         lst lst]\n    (cond\n     (nil? (first lst)) acc\n     :else (recur (conj acc (first lst)) (rest lst)))))", "user": "51c116d4e4b0c9c822882942"}, {"problem": 23, "code": "#((fn [acc y]\n  (if (= (count y) 0) acc\n    (recur (conj acc (first y)) (rest y)))) '() %)", "user": "53aafb9be4b047364c044448"}, {"problem": 23, "code": "#(into '() %)", "user": "53ab260ee4b047364c04444c"}, {"problem": 23, "code": "#(into () %)", "user": "5383321ee4b06839e8705eda"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "53ab94cae4b047364c044450"}, {"problem": 23, "code": "(fn [l] (vec (reduce (fn [a c] (cons c a)) nil l)))", "user": "53a5bc3ae4b0ef122a8689c3"}, {"problem": 23, "code": "reduce conj '()", "user": "53a94b63e4b047364c044434"}, {"problem": 23, "code": "(fn nreverse\n  ([coll] \t\t(nreverse coll []))\n  ([coll dst]\t(let [first (first coll)\n                      tail  (rest coll)]\n                  (if (nil? first)\n                    dst\n                    (recur tail (cons first dst))))))", "user": "53ac0e52e4b047364c044457"}, {"problem": 23, "code": "#(into () %)", "user": "53aac172e4b047364c044445"}, {"problem": 23, "code": "reduce conj '()", "user": "53ac2d45e4b047364c04445b"}, {"problem": 23, "code": "(fn my-reverse\n  [args]\n  (if (= 1 (count args) )\n    (vector (first args))\n    (conj (my-reverse (rest args)) (first args))\n    )\n  )", "user": "53ac4719e4b047364c04445c"}, {"problem": 23, "code": "(fn [x] (if (vector? (first x)) (sort-by first >  x) (sort > x)))", "user": "53a7bc10e4b047364c044420"}, {"problem": 23, "code": "(partial reduce conj nil)", "user": "526e5159e4b03e8d9a4a7316"}, {"problem": 23, "code": "reduce conj '()", "user": "53acca34e4b047364c044460"}, {"problem": 23, "code": "(fn my-reverse[collection]\n  (reduce conj () collection)\n  )", "user": "53ac1992e4b047364c04445a"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "538f4c1de4b0b51d73faae8c"}, {"problem": 23, "code": "into ()", "user": "53ad6fe2e4b047364c04446b"}, {"problem": 23, "code": "(fn [coll] (let [r (fn [coll] (reduce #(if (vector? %) (conj % (first %2)) (conj % %2)) () coll) )] (if (vector? coll) (apply vector (r coll)) (r coll))))", "user": "53a62f56e4b0ef122a8689c6"}, {"problem": 23, "code": "reduce conj ()", "user": "5360578ee4b0243289761e35"}, {"problem": 23, "code": "#(reduce (fn [x y] (conj x y)) '() %)", "user": "53ae2187e4b047364c044473"}, {"problem": 23, "code": "(fn [s] \n   (loop [s s o ()] \n     (if \n       (nil? (first s)) \n       o \n       (recur \n        (rest s) \n        (conj o (first s))))))", "user": "53abcea3e4b047364c044451"}, {"problem": 23, "code": "(fn [s]\n  (reduce (fn [acc n] (conj acc n))\n          () s))", "user": "53ae3e01e4b047364c044474"}, {"problem": 23, "code": "#(into () %)", "user": "53ae79f3e4b047364c044475"}, {"problem": 23, "code": "#(into () %)", "user": "53ae16e2e4b047364c044472"}, {"problem": 23, "code": "into ()", "user": "53ac4c6fe4b047364c04445d"}, {"problem": 23, "code": "(fn rev [s] (if (empty? s)\n              []\n              (conj (rev (rest s)) \n                                  (first s))))", "user": "53acaf1fe4b047364c04445f"}, {"problem": 23, "code": "(fn [x] (reduce #(conj % %2) '() x))", "user": "53aef31ce4b047364c04447b"}, {"problem": 23, "code": "(fn [lst]\n  (loop [revLst []\n         restLst lst]\n    (if-not (next restLst)\n      (conj revLst (first restLst))\n      (recur (conj revLst (last restLst)) (butlast restLst)))))", "user": "53aec6e6e4b047364c044479"}, {"problem": 23, "code": "(fn [coll] \n  (if (vector? coll)\n    (vec (reduce (fn [x y] (conj x y)) () (seq coll)))    \n    (reduce (fn [x y] (conj x y)) () coll)))", "user": "53abf519e4b047364c044456"}, {"problem": 23, "code": "reduce conj ()", "user": "53aeb3ebe4b047364c044477"}, {"problem": 23, "code": "(fn [coll]\n  (loop [[r & more :as all] (seq coll)\n    acc '()]\n    (if all\n      (recur more (cons r acc))\n      acc)))", "user": "53b05a75e4b047364c044482"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "509fda73e4b08df8156e9e41"}, {"problem": 23, "code": "(fn [x] (map (fn [y] (get (to-array x) y)) (range (- (count x) 1) -1 -1)))", "user": "53925032e4b0b51d73faaeb0"}, {"problem": 23, "code": "(fn rev [s] (if (empty? s) s (concat (rev (rest s)) [(first s)])))", "user": "53a0ab8ce4b0ca733b9744b3"}, {"problem": 23, "code": "#(into () %)", "user": "53b0ef3be4b047364c044489"}, {"problem": 23, "code": "(fn [x] (reduce (fn[y z] (cons z y)) [] x))", "user": "53ad28ede4b047364c044462"}, {"problem": 23, "code": "(fn rev [x]\n  (if (empty? x)\n   []\n   (conj\n    (rev (rest x))\n    (first x)\n   )\n  )\n)", "user": "53b12c76e4b047364c04448a"}, {"problem": 23, "code": "reduce #(conj % %2) '()", "user": "53b15e6ee4b047364c04448f"}, {"problem": 23, "code": "(fn rev [xs] (if (empty? xs) [] (conj (rev (rest xs)) (first xs))))", "user": "53b0446fe4b047364c04447f"}, {"problem": 23, "code": "(fn[x] (reduce conj '() x))", "user": "5314923ae4b08068f379ed18"}, {"problem": 23, "code": "(fn [s] \n  ((fn f [s r] \n          (if (empty? s) \n            r \n            (f (rest s) (cons (first s) r)))\n          ) s [])\n )", "user": "5245e320e4b09dbe66b56177"}, {"problem": 23, "code": "(fn [coll]\n  (loop [dList coll\n         build-list ()]\n    (if (empty? dList)\n      \tbuild-list\n      \t(recur (rest dList) (conj build-list (first dList))))))", "user": "53b05a36e4b047364c044481"}, {"problem": 23, "code": "#(loop\n  [r (seq %)\n   rev (seq [])]\n  (if (empty? r)\n    rev\n    (recur (rest r) (conj rev (nth r 0)))))", "user": "53b182a5e4b047364c044491"}, {"problem": 23, "code": "reduce conj ()", "user": "5329b493e4b09d4e7a9b5515"}, {"problem": 23, "code": "(fn [s] (loop[head (first s) tail (rest s) r '()] (if (= head nil) r (recur (first tail) (rest tail) (cons head r)))))", "user": "53b3ea79e4b047364c0444ab"}, {"problem": 23, "code": "(fn r [x]\n  (if (seq x)\n    (cons (last x) (r (butlast x)))\n    ()))", "user": "53b42472e4b047364c0444b2"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "53b42b9ce4b047364c0444b3"}, {"problem": 23, "code": "#(into () %)", "user": "5391bc62e4b0b51d73faaea7"}, {"problem": 23, "code": "(fn [s]\n  (reduce conj '() s))", "user": "5130fc48e4b07b22f541297f"}, {"problem": 23, "code": "(fn f [coll]\n  (reduce conj '() coll))", "user": "53b2e953e4b047364c04449e"}, {"problem": 23, "code": "(fn [xs]\n  (loop [xs xs\n         rv (list)]\n    (if (empty? xs)\n      rv\n      (recur (rest xs) (cons (first xs) rv)))))", "user": "4fec08e8e4b0681fd128dc9d"}, {"problem": 23, "code": "(partial reduce #(cons %2 %) ())", "user": "52d07cc5e4b07d0d72b273bb"}, {"problem": 23, "code": "(fn [s] \n  (loop [in s out []]\n    (if (empty? in)\n      out\n      (recur (rest in) (into [(first in)] out))\n    )\n  )\n)", "user": "533a2e02e4b0e30313ee6cb7"}, {"problem": 23, "code": "#(into '() %)", "user": "53b4bddae4b047364c0444b9"}, {"problem": 23, "code": "(fn [coll]\n  (reduce #(conj %1 (second %2)) [] \n          (sort-by first > (map vector (iterate inc 1) coll))))", "user": "53ae0c50e4b047364c044471"}, {"problem": 23, "code": "(fn [s] (into () s))", "user": "53b39d82e4b047364c0444a6"}, {"problem": 23, "code": "(fn rev-it\n  ([a-seq] (rev-it a-seq '()))\n  ([a-seq so-far]\n   (print a-seq)\n   (println so-far)\n   (println \"\")\n    (if (= (count a-seq) 1)\n      (conj so-far (first a-seq))\n      (recur (rest a-seq) (conj so-far (first a-seq))))))", "user": "53b6b6c8e4b047364c0444ca"}, {"problem": 23, "code": "#(loop [l1 %1 l2 [] ]   (if (= (count l1) 0) l2 (recur (butlast l1) (conj l2 (last l1) ))))", "user": "53b2a7f8e4b047364c04449c"}, {"problem": 23, "code": "into '()", "user": "5382704be4b06839e8705ed4"}, {"problem": 23, "code": "(fn myrev [s]\n  (if (empty? s)\n    []\n    (conj (myrev (rest s)) (first s))))", "user": "53b780b8e4b047364c0444cf"}, {"problem": 23, "code": "(fn [s] (reduce #(cons %2 %1) '() s))", "user": "53b71b94e4b047364c0444cd"}, {"problem": 23, "code": "reduce conj ()", "user": "539fa040e4b0ca733b97449f"}, {"problem": 23, "code": "(fn rev [s]\n  (loop [r s acc ()]\n    (if (empty? r)\n      acc\n      (recur (next r) (conj acc (first r)))\n      )))", "user": "53ad2bbbe4b047364c044464"}, {"problem": 23, "code": "#(reduce (fn [a, b] (conj a b)) '() %)", "user": "539b66c6e4b0b51d73faaf1f"}, {"problem": 23, "code": "#(loop [r ()\n        s %]\n   (if (empty? s)\n     r\n     (recur (cons (first s) r)\n            (rest s))))", "user": "53b88e6ee4b047364c0444de"}, {"problem": 23, "code": "(fn [coll]\n  (loop [ret [] coll coll]\n    (if (empty? coll)\n      ret\n      (recur (conj ret (last coll)) (butlast coll)))))", "user": "53b7c21ae4b047364c0444d4"}, {"problem": 23, "code": "#(into nil %)", "user": "53b91803e4b047364c0444e5"}, {"problem": 23, "code": "(fn [input]\n  (loop [input input output []]\n         (if (empty? input)\n           output\n           (recur (rest input) (cons (first input) output )))))", "user": "539c88e1e4b0b51d73faaf2c"}, {"problem": 23, "code": "#(reduce (fn [x y] (conj x y)) '() %)", "user": "53b41d17e4b047364c0444b1"}, {"problem": 23, "code": "#(into () %)", "user": "53b9c614e4b047364c0444ee"}, {"problem": 23, "code": "(fn [x] (reduce #(conj %1 %2) '() x))", "user": "53ba0d1be4b047364c0444f1"}, {"problem": 23, "code": "#(into () %)", "user": "53940b5ee4b0b51d73faaec4"}, {"problem": 23, "code": "(fn rev [s]\n  (if\n    (empty? s)\n    nil\n    (conj (rev (butlast s)) (last s))\n    )\n )", "user": "53ba5475e4b047364c0444f4"}, {"problem": 23, "code": "reduce conj '()", "user": "52ca7711e4b071a8d36bd3e3"}, {"problem": 23, "code": "(fn rev-seq[n]\n  (loop [x n r '()]\n    (if (= x '())\n      r\n      (recur (rest x)\n             (conj r\n                   (first x))))))", "user": "5018878ce4b029375d2a5056"}, {"problem": 23, "code": "reduce conj '()", "user": "53ba41c2e4b047364c0444f3"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "53b8ce32e4b047364c0444e2"}, {"problem": 23, "code": "(fn rv [xs]\n\t(let [rva (fn rva [a b] (if (= a ()) b (rva (rest a) (cons (first a) b))))]\n    \t(rva xs [])\n    )\n)", "user": "53b0dae6e4b047364c044487"}, {"problem": 23, "code": "(fn another-reverse [seq]\n  (if (empty? seq)\n    seq\n    (cons (last seq) (another-reverse (butlast seq)))))", "user": "53bab6fae4b047364c0444fb"}, {"problem": 23, "code": "into ()", "user": "53bb512ce4b047364c044503"}, {"problem": 23, "code": "#(into () %)", "user": "53bb95d0e4b047364c044508"}, {"problem": 23, "code": "#(into () %)", "user": "53469b68e4b084c2834f4a40"}, {"problem": 23, "code": "(fn invert [sq]\n    (let [inverter (fn [a b] (cons b a))]\n        (reduce inverter [] sq)))", "user": "53b4344de4b047364c0444b4"}, {"problem": 23, "code": "#(loop [s % r (seq '())]\n   (if (empty? s) r\n     (recur (next s) (cons (first s) r))))", "user": "5310e968e4b08068f379ecdd"}, {"problem": 23, "code": "(fn r [s]\n  (if (seq s)\n    (conj (r (rest s)) (first s))\n    []))", "user": "53bce179e4b0d9a98559a6c1"}, {"problem": 23, "code": "#(into () %)", "user": "53b685e0e4b047364c0444c7"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "53bd85fae4b0d9a98559a6d4"}, {"problem": 23, "code": "#(loop [acc '(), l %]\n   (if (nil? (first l))\n     acc\n     (recur (conj acc (first l)) (rest l))))", "user": "53bd6fcfe4b0d9a98559a6d0"}, {"problem": 23, "code": "(fn [y] (reduce (fn [acc x] (cons x acc)) [] y))", "user": "53bd6ad0e4b0d9a98559a6cf"}, {"problem": 23, "code": "(fn my-reverse [x]\n  (reduce conj (list) x))", "user": "53bc279ae4b047364c04450e"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "53bd8d27e4b0d9a98559a6d6"}, {"problem": 23, "code": "reduce (fn [l i] (conj l i)) '()", "user": "53b22df6e4b047364c044497"}, {"problem": 23, "code": "#(into () %)", "user": "53be3ee7e4b0d9a98559a6df"}, {"problem": 23, "code": "(fn [c] \n  (let [s (seq c)\n        l (count c)]\t\n  \t(for [x (range l)] \n    \t(nth s (- l x 1)))) )", "user": "53bb4cb1e4b047364c044502"}, {"problem": 23, "code": "(fn rev [l] (if (empty? l) '() (concat (rev (rest l)) (take 1 l))))", "user": "53beacf9e4b0d9a98559a6e3"}, {"problem": 23, "code": "(fn [coll]\n  ((fn [{r :r xs :xs}]\n    (if-not (empty? xs)\n      (recur {\n               :r  (cons (first xs) r)\n               :xs (rest xs)})\n      r\n      )) {:r (take 1 coll), :xs (rest coll)}))", "user": "53b7fbbde4b047364c0444d6"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "53bf0913e4b0c98a41f5cc99"}, {"problem": 23, "code": "(fn [l] \n  ((fn f [a b] (if (seq a) (recur (rest a) (cons (first a) b)) b))\n l '()\n))", "user": "53bf5403e4b0c98a41f5cc9f"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5353726be4b084c2834f4b00"}, {"problem": 23, "code": "#(into () %)", "user": "53be873ee4b0d9a98559a6e1"}, {"problem": 23, "code": "(fn [col] (reduce conj '() col))", "user": "53bf0587e4b0c98a41f5cc98"}, {"problem": 23, "code": "#((fn my-reduce [f val coll]\n     (let [s (seq coll)]\n         (if s\n             (recur f (f val (first s)) (next s)) val))) conj () %)", "user": "53b40181e4b047364c0444ae"}, {"problem": 23, "code": "reduce (fn [x y] (conj x y)) (list)", "user": "53bae8b9e4b047364c0444fd"}, {"problem": 23, "code": "(fn rev [x] (if (empty? x) \n              \tx\n              \t(cons (last x)\n                      (rev (butlast x)))))", "user": "53c051a5e4b0c98a41f5ccae"}, {"problem": 23, "code": "#(loop [c % n '()] (if (empty? c) n (recur (rest c) (cons (first c) n))))", "user": "52b434c9e4b0c58976d9ad1c"}, {"problem": 23, "code": "(fn [input] (loop [_list input output []] (if (empty? _list) output (recur (butlast _list) (conj output (last _list))))))", "user": "53b9a779e4b047364c0444eb"}, {"problem": 23, "code": "#(reduce (fn [v x] (conj v x)) () %)", "user": "53c15f08e4b00fb29b221261"}, {"problem": 23, "code": "(fn [x]\n  (loop [old x, new ()]\n    (if(empty? old)\n      new\n      (recur (rest old), (conj new (first old)))\n    )\n  )\n)", "user": "53c16e82e4b00fb29b221262"}, {"problem": 23, "code": "reduce conj ()", "user": "53aebc94e4b047364c044478"}, {"problem": 23, "code": "(fn my-rev [col]\n  (loop [ col col\n          result []]\n        (if (empty? col)\n            result\n            (recur (rest col) (cons (first col) result)))))", "user": "53c126fce4b00fb29b22125b"}, {"problem": 23, "code": "reduce conj ()", "user": "53bead0be4b0d9a98559a6e4"}, {"problem": 23, "code": "#(into () %)", "user": "53c1be8ae4b00fb29b221267"}, {"problem": 23, "code": "#(into () %)", "user": "53c2409de4b00fb29b22126c"}, {"problem": 23, "code": "#(into () %)", "user": "53c1305be4b00fb29b22125d"}, {"problem": 23, "code": "#(seq (into () %1))", "user": "53b85932e4b047364c0444db"}, {"problem": 23, "code": "(fn [s] \n  (loop [rs (seq s)\n         acc '()]\n    (if (empty? rs)\n      acc\n      (recur (rest rs) (conj acc (first rs)))\n      ))\n  )", "user": "53c1ce3ee4b00fb29b221268"}, {"problem": 23, "code": "(fn rev[s] (if (empty? s) [] (conj (rev (rest s)) (first s))))", "user": "53c24946e4b00fb29b22126d"}, {"problem": 23, "code": "#(reduce (fn [x y] (cons y x)) [] %1)", "user": "5367bc60e4b0243289761e81"}, {"problem": 23, "code": "apply conj ()", "user": "53c38b8ce4b00fb29b22127b"}, {"problem": 23, "code": "(partial reduce conj ())", "user": "53c3397be4b00fb29b221279"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "53c39a9ae4b00fb29b22127d"}, {"problem": 23, "code": "into ()", "user": "53c5cb5ee4b00fb29b221294"}, {"problem": 23, "code": "#(into () %)", "user": "53c63db5e4b00fb29b221296"}, {"problem": 23, "code": "#(into () %)", "user": "53c3e93ae4b00fb29b221280"}, {"problem": 23, "code": "#(reduce (fn [x y] (conj x y)) nil %)", "user": "538c4e52e4b0b51d73faae59"}, {"problem": 23, "code": "into ()", "user": "53c51dc5e4b00fb29b221288"}, {"problem": 23, "code": "into ()", "user": "53c6db22e4b00fb29b2212a2"}, {"problem": 23, "code": "(fn [x y] \n      (if (empty? y) \n        x \n        (recur (cons (first y) x) (rest y)))) \n    []", "user": "53c349f5e4b00fb29b22127a"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "53c68360e4b00fb29b22129b"}, {"problem": 23, "code": "#(let \n  [init (take 1 %1)\n   tail (drop 1 %1)\n   doIt (fn doRec [acc remainder] \n           (if \n             (== 0 (count remainder))\n             acc \n             (doRec (cons (first remainder) acc) (drop 1 remainder))\n           )\n         )\n   ]\n   (doIt init tail)\n)", "user": "5183bccae4b028ec5fd2f2aa"}, {"problem": 23, "code": "(fn [arg]\n  (loop [s arg result '()]    \n\t(if s (recur (next s) (conj result (first s))) result)))", "user": "53c649d3e4b00fb29b221297"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "53c74cfce4b00fb29b2212a7"}, {"problem": 23, "code": "(fn [coll]\n  (loop [d coll acc '()]\n    (if (empty? d)\n      acc\n      (recur (rest d) (conj acc (first d))))))", "user": "53c6e25ee4b00fb29b2212a4"}, {"problem": 23, "code": "(fn\n  [input] \n  (loop\n    [inarray (into [] input) outarray []] \n    (if (= 0 (count inarray))\n      outarray\n      (recur (pop inarray) (conj outarray (last inarray)))\n    )))", "user": "53c6c9dfe4b00fb29b2212a1"}, {"problem": 23, "code": "#(into () %)", "user": "52577f15e4b0cb4875a45c88"}, {"problem": 23, "code": "reduce conj ()", "user": "53c3014ce4b00fb29b221277"}, {"problem": 23, "code": "#(loop [x % result []] (if (empty? x) result (recur (rest x) (cons (first x) result))))", "user": "53afddabe4b047364c04447e"}, {"problem": 23, "code": "into ()", "user": "538db083e4b0b51d73faae74"}, {"problem": 23, "code": "(fn [x]\n  ((fn [original reversed]\n     (if (empty? original)\n        reversed\n        (recur \n         (rest original) \n         (conj reversed (first original))\n         )))\n   x '()))", "user": "53c90510e4b00fb29b2212b6"}, {"problem": 23, "code": "#(apply conj () %)", "user": "53bed4b5e4b0c98a41f5cc94"}, {"problem": 23, "code": "(fn mycount [list] \n  (reduce (fn [l i] (cons i l )) '() list))", "user": "53c96d9fe4b00fb29b2212bf"}, {"problem": 23, "code": "into ()", "user": "53be0133e4b0d9a98559a6dc"}, {"problem": 23, "code": "into ()", "user": "4e617114535d8ccf87e9fe5b"}, {"problem": 23, "code": "(fn [ls]\n  (letfn [(iter [ls1 ret]\n                (if (empty? ls1)\n                  ret\n                  (iter (rest ls1) (conj ret (first ls1)))))]\n    (iter ls '())))", "user": "53b7850ee4b047364c0444d0"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "53ca213fe4b00fb29b2212c5"}, {"problem": 23, "code": "(fn my-rev [x]\n  (if (<= (count x) 1)\n    x\n    (cons (last x) (my-rev (butlast x)))))", "user": "53c9d29ae4b00fb29b2212c2"}, {"problem": 23, "code": "#(into () %)", "user": "53cacdb5e4b00fb29b2212cb"}, {"problem": 23, "code": "(fn [coll]\n  (loop [coll coll acc '()]\n    (if (empty? coll) \n      acc\n      (recur (rest coll) (conj acc (first coll))))))", "user": "53cb321fe4b00fb29b2212d1"}, {"problem": 23, "code": "reduce conj ()", "user": "53ca41dae4b00fb29b2212c8"}, {"problem": 23, "code": "(fn myrest [xs] \n   (into (if (set? xs) [] (empty xs)) \n         (reduce #(conj %1 %2) () xs)))", "user": "53ca23e3e4b00fb29b2212c6"}, {"problem": 23, "code": "#(into '() %)", "user": "53caddbae4b00fb29b2212cc"}, {"problem": 23, "code": "(fn [coll]\n  (loop [coll-left coll acc '()]\n    (if (empty? coll-left)\n      acc\n      (recur (rest coll-left) (conj acc (first coll-left))))))", "user": "53cb30f0e4b00fb29b2212d0"}, {"problem": 23, "code": "#(into () %)", "user": "53cc0d51e4b00fb29b2212d5"}, {"problem": 23, "code": "(fn [s] (into () s))", "user": "53cc5c88e4b00fb29b2212d8"}, {"problem": 23, "code": "#(reduce (fn [x y] (conj x y)) '() %)", "user": "53c6b3cae4b00fb29b2212a0"}, {"problem": 23, "code": "into ()", "user": "53bfd8c4e4b0c98a41f5cca8"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "53cd4920e4b00fb29b2212de"}, {"problem": 23, "code": "(fn [sek]\n  (reduce (fn [a b] (conj a b)) '() sek))", "user": "53c1b787e4b00fb29b221266"}, {"problem": 23, "code": "(fn fn23 [lst]\n  (cond\n   (empty? lst) '()\n   :else (cons (last lst)\n               (fn23 (butlast lst)))))", "user": "50a122a1e4b08df8156e9e54"}, {"problem": 23, "code": "#(into () %)", "user": "53ce4cd4e4b00fb29b2212ef"}, {"problem": 23, "code": "#(loop\n  [r (seq %)\n   rev (seq [])]\n  (if (empty? r)\n    rev\n    (recur (rest r) (conj rev (nth r 0)))))", "user": "53ce1daee4b00fb29b2212ec"}, {"problem": 23, "code": "(fn [x] (reduce conj '() x))", "user": "4e587e78535d8a8b8723a293"}, {"problem": 23, "code": "(fn [x] (loop [i x n []]\n            (if (empty? i)\n              n\n              (recur (rest i) (concat (list (first i)) n)))))", "user": "53cdb2c4e4b00fb29b2212e5"}, {"problem": 23, "code": "reduce conj ()", "user": "53ce8cb5e4b00fb29b2212f2"}, {"problem": 23, "code": "#(reduce (fn [memo el] (conj memo el)) () %)", "user": "52d6d490e4b09f7907dd1369"}, {"problem": 23, "code": "#(map second (sort (fn [a b] (> (first a) (first b))) (map-indexed list %)))", "user": "53ced9fee4b00fb29b2212f8"}, {"problem": 23, "code": "(fn [xs]\n  (loop [xs xs\n         rxs (empty xs)]\n    (if (empty? xs)\n      rxs\n      (recur (rest xs) (cons (first xs) rxs)))))", "user": "51b8d3d5e4b050a1176cd69d"}, {"problem": 23, "code": "#(vec (into () %))", "user": "53ce030be4b00fb29b2212ea"}, {"problem": 23, "code": "#(reduce (fn [x,y] (cons y x)) [] %)", "user": "53cf278ce4b00fb29b2212fb"}, {"problem": 23, "code": "#(seq (replace (vec %) (vec (take (count %) (iterate dec (- (count %) 1))))))", "user": "534fa9dae4b084c2834f4acf"}, {"problem": 23, "code": "(fn [s] (reduce #(conj %1 %2) '() s))", "user": "537e4432e4b06839e8705e9f"}, {"problem": 23, "code": "reduce (fn [c b] (conj c b)) nil", "user": "53cff414e4b00fb29b221304"}, {"problem": 23, "code": "reduce conj ()", "user": "53d00195e4b00fb29b221305"}, {"problem": 23, "code": "(fn myrev [coll] (if (empty? coll) [] (conj (myrev (rest coll)) (first coll))))", "user": "53c6a2fde4b00fb29b22129d"}, {"problem": 23, "code": "#(loop [newset [] x %] (if (not (empty? x)) (recur (concat [(first x)] newset) (rest x)) newset))", "user": "53d0c837e4b00fb29b22130b"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "53d0f7bbe4b00fb29b22130e"}, {"problem": 23, "code": "(fn my-reverse \n  \t[coll]\n  \t(if (empty? coll)\n      \t[]\n      \t(conj (my-reverse (rest coll))\n              (first coll)\n        )\n    )\n)", "user": "53cfd3c5e4b00fb29b221302"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "53cd5cd5e4b00fb29b2212e1"}, {"problem": 23, "code": "(fn [x] (reduce conj '() x))", "user": "53ced1d5e4b00fb29b2212f7"}, {"problem": 23, "code": "into ()", "user": "534db51be4b084c2834f4aa6"}, {"problem": 23, "code": "#(loop [x % y []]\n   (if (empty? x)\n     y\n     (recur (butlast x) (conj y (last x))))\n   )", "user": "53d1e9ffe4b00fb29b221319"}, {"problem": 23, "code": "#(reduce (fn [x y] (cons y x)) (empty %) %)", "user": "53d20e14e4b00fb29b22131a"}, {"problem": 23, "code": "#(reduce conj `() %)", "user": "53c0bc5fe4b00fb29b221257"}, {"problem": 23, "code": "into '()", "user": "51c8f1d8e4b07ef393169e5d"}, {"problem": 23, "code": "#(reduce (fn [acc item] (cons item acc)) [] %)", "user": "51ad808ee4b09397d5109784"}, {"problem": 23, "code": "into ()", "user": "53b2b438e4b047364c04449d"}, {"problem": 23, "code": "reduce conj ()", "user": "53d2b10de4b00fb29b221322"}, {"problem": 23, "code": "#(into () %)", "user": "53d3ad01e4b00fb29b22132d"}, {"problem": 23, "code": "#(loop [remain % acc '()] (if (empty? remain) acc (recur (rest remain) (conj acc (first remain)))))", "user": "53d28800e4b00fb29b22131e"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "53d40508e4b00fb29b221332"}, {"problem": 23, "code": "reduce (fn [s x] (conj s x)) '()", "user": "53d4dadde4b00fb29b221337"}, {"problem": 23, "code": "into()", "user": "53d3856fe4b00fb29b22132b"}, {"problem": 23, "code": "#(for [x (range (- (count %) 1) -1 -1)] (get (vec %) x))", "user": "53d5d24de4b0e771c302544a"}, {"problem": 23, "code": "(fn reverse' [a]\n  (if (empty? a)\n    []\n    (conj (reverse' (rest a)) (first a))))", "user": "53d612cbe4b0e771c3025452"}, {"problem": 23, "code": "#(reduce conj '() %1)", "user": "53d6024ae4b0e771c3025450"}, {"problem": 23, "code": "#(into () %)", "user": "53cdbad1e4b00fb29b2212e6"}, {"problem": 23, "code": "into ()", "user": "53d50d33e4b00fb29b22133c"}, {"problem": 23, "code": "reduce conj '()", "user": "53d0d7a9e4b00fb29b22130c"}, {"problem": 23, "code": "#(loop [coll %\n         res '()]\n   (if (seq coll)\n     (recur (rest coll)\n             (cons (first coll) res))\n     res))", "user": "530ec239e4b08068f379ecc1"}, {"problem": 23, "code": "#(loop [x % res []]\n  (if (not (empty? x))\n    (recur (butlast x) (conj res (last x)))\n    res))", "user": "53a44fefe4b0b62ce300572e"}, {"problem": 23, "code": "#(reduce (fn [x y] (conj x y)) '() %)", "user": "53d5a63be4b0e771c3025449"}, {"problem": 23, "code": "(partial reduce (fn [acc e] (cons e acc)) [])", "user": "53d6cf90e4b0e771c302545c"}, {"problem": 23, "code": "(fn [coll] (reduce conj '() coll))", "user": "53d6c0cfe4b0e771c302545b"}, {"problem": 23, "code": "(fn\n  [coll]\n  (loop\n    [c coll rev []]\n    (if (empty? c)\n      rev\n    \t(recur (butlast c) (conj rev (last c)))\n    )\n  )\n)", "user": "53d17fdde4b00fb29b221315"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "53d5e45ae4b0e771c302544e"}, {"problem": 23, "code": "(fn\n  [coll]\n  (loop [c coll retval (seq [])]\n    (if (= (count retval) (count coll))\n      retval\n      (recur (rest c) (conj retval (first c))))))", "user": "51071f2ee4b05b2b4eee748e"}, {"problem": 23, "code": "(fn [coll]\n  (loop [r (rest coll)\n         acc (conj () (first coll))]\n    (if (= (count r) 0)\n      acc\n      (recur (rest r) (conj acc (first r))))))", "user": "53d6b266e4b0e771c3025459"}, {"problem": 23, "code": "(partial reduce (fn [s e] (conj s e)) ())", "user": "53d78b64e4b0e771c3025466"}, {"problem": 23, "code": "(fn [L]\n  (loop [r (list) x L]\n    (if (empty? x)\n      r\n      (recur (conj r (first x)) (rest x)))))", "user": "53d60f57e4b0e771c3025451"}, {"problem": 23, "code": "(fn [c]\n  (loop [r []\n         [h & t] (seq c)]\n    (if (nil? h)\n      r\n      (recur (cons h r) t))))", "user": "53cd5226e4b00fb29b2212e0"}, {"problem": 23, "code": "(fn [l]\n  (reduce\n   (fn [s i]\n     (conj s i))\n   ()\n   l))", "user": "53d3abeae4b00fb29b22132c"}, {"problem": 23, "code": "#(into () %)", "user": "53d70f3be4b0e771c302545f"}, {"problem": 23, "code": "apply conj '()", "user": "53d87449e4b0e771c302546d"}, {"problem": 23, "code": "(fn my-reverse [%]  \n  (if (= 1 (count %)) % \n     (concat (my-reverse (rest %)) (list (first %)))\n  )\n)", "user": "53d64811e4b0e771c3025456"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "53d92964e4b0e771c3025476"}, {"problem": 23, "code": "#(reduce conj ()%)", "user": "53d91412e4b0e771c3025474"}, {"problem": 23, "code": "#(reduce (fn [x c] (cons c x)) '() %)", "user": "51febd40e4b0f1313d468a76"}, {"problem": 23, "code": "(fn [sq] (into () sq))", "user": "53d920d9e4b0e771c3025475"}, {"problem": 23, "code": "#(loop [coll %, acc nil]\n    (if (empty? coll)\n      acc\n      (recur (rest coll)\n             (cons (first coll) acc))))", "user": "53968a70e4b0b51d73faaee0"}, {"problem": 23, "code": "reduce #(cons %2 %1) []", "user": "53da1540e4b0e771c3025482"}, {"problem": 23, "code": "(fn [s]\n  (let [c (count s)\n        l (range c 0 -1)]\n    (map #(nth (seq s) (dec %)) l)))", "user": "53da302fe4b0e771c3025490"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "53d950f2e4b0e771c3025477"}, {"problem": 23, "code": "#(into () %)", "user": "53da19fde4b0e771c3025484"}, {"problem": 23, "code": "(fn reverse2 [lst]\n  (if (empty? lst)\n    nil\n    (cons (last lst) (reverse2 (drop-last lst)))\n    )\n  )", "user": "53d2afede4b00fb29b221321"}, {"problem": 23, "code": "into ()", "user": "53d2fb7ae4b00fb29b221326"}, {"problem": 23, "code": "reduce conj ()", "user": "539dcb24e4b0b51d73faaf3d"}, {"problem": 23, "code": "(partial reduce #(into [%2] %) [])", "user": "53db43aae4b0e771c30254b1"}, {"problem": 23, "code": "(fn [$, x] (\n            if (= x '()) \n\t\t\t\t$ \n            \t(recur (conj $ (first x)) (rest x))\n           )) '()", "user": "53dbc8bee4b094d41abdfef5"}, {"problem": 23, "code": "#(let [f (fn f [a b] (if (empty? a) b (f (rest a) (conj b (first a)))))] (f % '()))", "user": "53da70a4e4b0e771c302549d"}, {"problem": 23, "code": "(fn rev [l]\n  (cond (empty? l) l\n        :else (concat (rev (next l))\n                      (cons (first l) (empty l)))))", "user": "53dbf5fbe4b094d41abdfef8"}, {"problem": 23, "code": "(fn myf\n  ([a-list]\n     (cond (= a-list nil) nil\n           :else (cons (last a-list)\n                       (myf (butlast a-list))))))", "user": "53c06438e4b0c98a41f5ccb0"}, {"problem": 23, "code": "#(loop [lista % c 0 s (count %) resultList '()] \n   (if (= c s)\n     resultList\n     (recur (rest lista) (inc c) s (conj resultList (first lista)))\n     )\n   )", "user": "53dc05d4e4b094d41abdfefa"}, {"problem": 23, "code": "(partial reduce conj '())", "user": "53dc94c8e4b094d41abdfefc"}, {"problem": 23, "code": "#(into () %)", "user": "53dcb9b2e4b0d874e779ae23"}, {"problem": 23, "code": "(fn rev [l] (reduce #(conj %1 %2) nil l))", "user": "53dcf474e4b0d874e779ae25"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "53dcdde4e4b0d874e779ae24"}, {"problem": 23, "code": "(fn [col]\n  (reduce (fn [acc item]\n            (cons item acc))\n   (empty col)\n   col))", "user": "53dd37aee4b0d874e779ae28"}, {"problem": 23, "code": "#(apply conj '() %)", "user": "52cfb277e4b07d0d72b273ac"}, {"problem": 23, "code": "#(loop [acc []\n         val %]\n    (if(empty? val)\n      acc\n      (recur (conj acc (last val)) (butlast val))))", "user": "53da8fede4b0e771c30254a3"}, {"problem": 23, "code": "(fn rev [s] (reduce conj () s))", "user": "52f1bd89e4b05e3f0be25ef0"}, {"problem": 23, "code": "(fn [coll]\n (loop [func conj\n        coll coll\n        value []] \n  (if (empty? coll)\n    value\n    (recur func (butlast coll) (func value (last coll))))))", "user": "53844970e4b06839e8705eef"}, {"problem": 23, "code": "#(into () %)", "user": "53dd839be4b0d874e779ae2c"}, {"problem": 23, "code": "(fn revs\n  ([lst]    (revs lst '()))\n  ([lst rs] (if (= '() lst)\n              rs\n              (revs (rest lst) (concat (list (first lst)) rs)))))", "user": "53ddd44be4b0d874e779ae2e"}, {"problem": 23, "code": "(fn [x] (reduce conj '() x))", "user": "53dd72fde4b0d874e779ae2b"}, {"problem": 23, "code": "(fn my-reverse ([[head & restl] reversed] \n\t(if (= head nil) reversed \n\t\t(my-reverse restl (into [head] reversed))))\n\t([seq] (my-reverse (into [] seq) [])))", "user": "53d382d8e4b00fb29b22132a"}, {"problem": 23, "code": "reduce (fn [memo x] (conj memo x)) '()", "user": "53da3691e4b0e771c3025493"}, {"problem": 23, "code": "(fn rev [s] (reduce #(cons %2 %1) '() s))", "user": "53de622ce4b0d874e779ae34"}, {"problem": 23, "code": "(fn [s] (map-indexed (fn [i, a] (first (drop (- (count s) i 1) s))) s))", "user": "53d5d2d0e4b0e771c302544c"}, {"problem": 23, "code": "(fn self [se] (if (empty? se) se (cons (last se) (self (butlast se)))))", "user": "52cda980e4b07d0d72b2737b"}, {"problem": 23, "code": "(fn\n  [arg]\n  (loop [elems arg\n         reversed []]\n    (if (empty? elems)\n      reversed\n      (recur (butlast elems)\n             (conj reversed (last elems))))))", "user": "53de7484e4b0d874e779ae35"}, {"problem": 23, "code": "into ()", "user": "53ded676e4b0d874e779ae3b"}, {"problem": 23, "code": "into ()", "user": "53a83c74e4b047364c044426"}, {"problem": 23, "code": "into()", "user": "52ba2639e4b07a9af57922cb"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "53dfb864e4b0d874e779ae43"}, {"problem": 23, "code": "(fn myrev [x]\n  (loop [currcoll [] restcoll x]\n    (if (empty? restcoll)\n      currcoll\n      (recur (cons (first restcoll) currcoll) (rest restcoll)))))", "user": "53df340ce4b0d874e779ae3f"}, {"problem": 23, "code": "#(into () %)", "user": "53dfdf01e4b0d874e779ae46"}, {"problem": 23, "code": "into ()", "user": "53df9f47e4b0d874e779ae42"}, {"problem": 23, "code": "(fn [x] (loop [accum () temp x] \n                       (if (empty? temp) accum\n                         (recur (conj accum (first temp)) (rest temp)))))", "user": "52fdbf3ae4b047fd55837032"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "53e0001be4b0d874e779ae48"}, {"problem": 23, "code": "(fn [coll]\n  (reduce conj '() coll))", "user": "53dfbc75e4b0d874e779ae44"}, {"problem": 23, "code": "#(reduce (fn [x y] (conj x y)) '() %)", "user": "53e020c3e4b0d874e779ae49"}, {"problem": 23, "code": "#(into () %)", "user": "53e0514ce4b0d874e779ae4a"}, {"problem": 23, "code": "(fn [arr]\n  ((fn internal [arr acc]\n  (if (= arr '())\n    acc\n    (internal (rest arr) (conj acc (first arr))))) arr '()))", "user": "53e06f81e4b0d874e779ae4c"}, {"problem": 23, "code": "#(into () %)", "user": "53213810e4b09d4e7a9b54b0"}, {"problem": 23, "code": "(fn rev [s] (if-let [f (first s)] (conj (rev (rest s)) f) []))", "user": "53e19461e4b0d874e779ae59"}, {"problem": 23, "code": "(fn rev\n  ([x] (rev x nil))\n  ([x y] (if (empty? x) y (rev (rest x) (cons (first x) y)))))", "user": "53dadf1de4b0e771c30254ad"}, {"problem": 23, "code": "(fn rev [coll]\n  (loop [[h & r] (into '() coll)\n         result []]\n    (if (nil? h)\n      result\n      (recur r (conj result h)))))", "user": "53e241a6e4b036ad0777e3f0"}, {"problem": 23, "code": "#(into () %)", "user": "53e23ab7e4b036ad0777e3ef"}, {"problem": 23, "code": "#(map(partial nth (seq %))(range(-(count %)1)-1 -1))", "user": "53dae029e4b0e771c30254ae"}, {"problem": 23, "code": "(fn [lst]\n  (loop [reversed nil tail lst]\n    (if (= (first tail) nil)\n      reversed\n      (recur (cons (first tail) reversed) (rest tail)))))", "user": "53e30fcae4b036ad0777e3fc"}, {"problem": 23, "code": "(fn [coll]\n  (loop [acc (empty coll) coll coll]\n    (if (empty? coll)\n      acc\n      (recur (cons (first coll) acc) (rest coll)))))", "user": "53df4292e4b0d874e779ae40"}, {"problem": 23, "code": "#(into () %)", "user": "53e2381ce4b036ad0777e3ee"}, {"problem": 23, "code": "into '()", "user": "5373451fe4b06d7f452d9e0b"}, {"problem": 23, "code": "(fn [lst] (reduce (fn [a b] (conj a b)) '() lst))", "user": "53e2b212e4b036ad0777e3f4"}, {"problem": 23, "code": "#(into() %)", "user": "53e051ece4b0d874e779ae4b"}, {"problem": 23, "code": "reduce conj ()", "user": "53e3e852e4b036ad0777e407"}, {"problem": 23, "code": "(fn [ins] (reduce #(cons %2 %1) [] ins))", "user": "53e15371e4b0d874e779ae54"}, {"problem": 23, "code": "(fn my-reverse [lyst]\n  (let [f (fn [acc l]\n            (if (empty? l)\n              acc\n              (recur (cons (first l) acc)\n                     (rest l))))]\n    (f () lyst)))", "user": "53e27bf1e4b036ad0777e3f2"}, {"problem": 23, "code": "#(loop [seq %\n        acc (list)]\n   (if (empty? seq) acc\n       (recur (rest seq) (cons (first seq) acc))))", "user": "53e543efe4b036ad0777e457"}, {"problem": 23, "code": "(fn [sqn] (reduce conj '() sqn))", "user": "53e2ac1ae4b036ad0777e3f3"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "53e5736ce4b036ad0777e45a"}, {"problem": 23, "code": "#( into () %)", "user": "516d227fe4b06f078fab252d"}, {"problem": 23, "code": "reduce conj (list)", "user": "53e4fa2ce4b036ad0777e454"}, {"problem": 23, "code": "(partial reduce (fn [xs x] (concat [x] xs)) [])", "user": "53e55de1e4b036ad0777e458"}, {"problem": 23, "code": "reduce conj ()", "user": "53e60743e4b036ad0777e46b"}, {"problem": 23, "code": "#(reduce (fn [i rev] (cons rev i)) '() %1)", "user": "53e66df9e4b036ad0777e472"}, {"problem": 23, "code": "(fn [seq] (loop [old seq reversed '()] (if (empty? old) reversed (recur (rest old) (cons (first old) reversed)))))", "user": "53b952eee4b047364c0444e6"}, {"problem": 23, "code": "(fn rev [xs]\n  (if (= 1 (count xs))\n    xs\n    (concat (rev (rest xs)) (cons (first xs) (empty xs)))))", "user": "525890f7e4b0cb4875a45cb5"}, {"problem": 23, "code": "apply (partial conj '())", "user": "53e745a1e4b036ad0777e479"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "53e35265e4b036ad0777e400"}, {"problem": 23, "code": "(fn r [l]\n  (when (seq l)\n    (concat (r (rest l)) (list (first l)))))", "user": "530bae80e4b02e82168697d0"}, {"problem": 23, "code": "(fn f2 [_]\n  (if (> (count _) 0)\n    (cons (last _)\n          (f2 (butlast _)))\n    (list)))", "user": "53e73fe3e4b036ad0777e478"}, {"problem": 23, "code": "(fn [x] (reduce #(into [%2] % ) [] x))", "user": "53b15e65e4b047364c04448e"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "53c99f60e4b00fb29b2212c1"}, {"problem": 23, "code": "(fn [l] (reduce (fn [n x] (conj n x)) '() l))", "user": "53e8c684e4b036ad0777e48b"}, {"problem": 23, "code": "#(into () %)", "user": "53e3f7a8e4b036ad0777e408"}, {"problem": 23, "code": "(fn [s]\n\t(loop [res '()\n       \t   s s]\n      (if (empty? s)\n        res\n      \t(recur (conj res (first s))\n               (rest s)))))", "user": "534bfc71e4b084c2834f4a88"}, {"problem": 23, "code": "reduce #(conj % %2) '()", "user": "5360b327e4b0243289761e38"}, {"problem": 23, "code": "#(into '() %)", "user": "53e902a5e4b036ad0777e491"}, {"problem": 23, "code": "(fn rev-list [l] (if (= (count l) 1) l (concat (rev-list (rest l)) [(first l)])))", "user": "53e92821e4b036ad0777e499"}, {"problem": 23, "code": "(fn [x] (loop [rs '() s x] \n          (if (empty? s) rs (recur (concat rs (list (last s))) (butlast s)))))", "user": "53e150e5e4b0d874e779ae53"}, {"problem": 23, "code": "(fn [x]\n  (loop [n (- (count x) 1) il []]\n    (if (= n -1) il \n      (recur \n       (dec n) (conj il (nth (seq x) n)))\n      )))", "user": "53e76bb2e4b036ad0777e47d"}, {"problem": 23, "code": "#(loop [normal %\n          rev (empty %)]\n  (if (empty? normal)\n    rev\n    (recur (rest  normal) (cons (first normal) rev))))", "user": "538d70abe4b0b51d73faae6e"}, {"problem": 23, "code": "#(reduce (fn [coll el] (cons el coll)) [] %)", "user": "53e634ede4b036ad0777e470"}, {"problem": 23, "code": "reduce conj ()", "user": "5217c06fe4b0a4bccb16cab7"}, {"problem": 23, "code": "(fn rev [xs] (if (empty? xs) () (conj (rev (butlast xs)) (last xs))))", "user": "53e9a15be4b036ad0777e4ae"}, {"problem": 23, "code": "reduce conj ()", "user": "528d6b10e4b0239c8a67aec3"}, {"problem": 23, "code": "into ()", "user": "53d88bd5e4b0e771c302546e"}, {"problem": 23, "code": "apply conj '()", "user": "53df152ee4b0d874e779ae3e"}, {"problem": 23, "code": "(fn [data]\n   (let [size (count data)\n         maxInt (dec size)\n         stuff (vec data)]\n    (for [i (range size)] (nth stuff (- maxInt i)))) )", "user": "53d10553e4b00fb29b22130f"}, {"problem": 23, "code": "sort #(compare %2 %1)", "user": "53dfd77fe4b0d874e779ae45"}, {"problem": 23, "code": "(fn [s]\n  (loop [coll s\n         rev (empty coll)]\n    (if (empty? coll) rev\n      (recur (rest coll) (cons (first coll) rev)))))", "user": "53ea3a63e4b036ad0777e4dc"}, {"problem": 23, "code": "(fn  [x] (loop [y x res nil] (if (empty? y) res (recur (rest y) (conj res (first y))))))", "user": "53e91473e4b036ad0777e495"}, {"problem": 23, "code": "into ()", "user": "516f5b7ee4b0ef3e37990e7e"}, {"problem": 23, "code": "(fn[coll] (loop [coll coll\n      acc ()]\n\t\t(if (= () coll)\n            acc\n            (recur (rest coll)(cons (first coll) acc)))))", "user": "53ea4492e4b036ad0777e4e0"}, {"problem": 23, "code": "reduce conj ()", "user": "53e3a1f7e4b036ad0777e404"}, {"problem": 23, "code": "#(into () %)", "user": "53eade35e4b036ad0777e4ec"}, {"problem": 23, "code": "reduce #(conj %1 %2) ()", "user": "530fbbaee4b08068f379eccf"}, {"problem": 23, "code": "reduce conj ()", "user": "53ce0a29e4b00fb29b2212eb"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "53ea9871e4b036ad0777e4e9"}, {"problem": 23, "code": "(fn [sq] (reduce conj '() sq))", "user": "53ea72b6e4b036ad0777e4e5"}, {"problem": 23, "code": "into '()", "user": "53ea5307e4b036ad0777e4e2"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "53eb8ceae4b036ad0777e4fb"}, {"problem": 23, "code": "reduce (fn [c v] (cons v c)) []", "user": "53e4b5a3e4b036ad0777e44b"}, {"problem": 23, "code": "#(loop [x (vec %) y []] \n    (if (not= nil (peek x) ) (recur (pop x) (conj y (last x)) ) y  ))", "user": "53e8cefde4b036ad0777e48d"}, {"problem": 23, "code": "reduce conj '()", "user": "53e9a56ce4b036ad0777e4af"}, {"problem": 23, "code": ";reduce (fn [x y] (conj x y)) '()\nreduce conj '()", "user": "53ecac57e4b0d648e757f4b3"}, {"problem": 23, "code": "#(into () %)", "user": "53e92aafe4b036ad0777e49a"}, {"problem": 23, "code": "#(into () %)", "user": "53cfa79ce4b00fb29b2212ff"}, {"problem": 23, "code": "sort (fn [x y]\n  (if (vector? x)\n    (> (first x) (first y))\n    (> x y)))", "user": "53ebd5fee4b036ad0777e4fd"}, {"problem": 23, "code": "(fn my-reverse\n  [coll]\n  (if (empty? coll)\n    []\n    (conj (my-reverse (rest coll)) (first coll))))", "user": "53e57ba2e4b036ad0777e45c"}, {"problem": 23, "code": "#(into () %)", "user": "5343753ae4b084c2834f4a1b"}, {"problem": 23, "code": "reduce conj()", "user": "53eb274be4b036ad0777e4f1"}, {"problem": 23, "code": "(fn my-reverse [x]\n  (if (empty? x)\n    x\n    (concat\n     (my-reverse (rest x))\n     [(first x)]\n     )\n    )\n  )", "user": "53edb628e4b0d648e757f4c8"}, {"problem": 23, "code": "into '()", "user": "53ede8e3e4b0d648e757f4cc"}, {"problem": 23, "code": "(fn rev [ls]\n  (if (< (count ls) 1)\n    ls\n    (conj (rev (butlast ls)) (last ls))))", "user": "53ed1778e4b0d648e757f4bd"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "53e9681de4b036ad0777e4a4"}, {"problem": 23, "code": "#(into () %)", "user": "53bf9cfbe4b0c98a41f5cca4"}, {"problem": 23, "code": "(fn [seq]\n  (loop [s seq reversed-s []]\n    (if (empty? s)\n      reversed-s\n      (recur (rest s) (cons (first s) reversed-s)))))", "user": "53edb464e4b0d648e757f4c7"}, {"problem": 23, "code": "(fn [coll] (into '() coll))", "user": "53ee7f2ee4b0d648e757f4cf"}, {"problem": 23, "code": "(fn rev\n  ([coll] (rev coll []))\n  ([coll result] (if (empty? coll)\n                   result\n                   (recur (rest coll) (cons (first coll) result)))))", "user": "53ecd01fe4b0d648e757f4b9"}, {"problem": 23, "code": "(fn [xs] (reduce #(conj %1 %2) () xs))", "user": "53ef3adfe4b0742d9025b0c9"}, {"problem": 23, "code": "#(into () %)", "user": "53cafc64e4b00fb29b2212cf"}, {"problem": 23, "code": "#(into () %)", "user": "53efc76de4b0742d9025b0cf"}, {"problem": 23, "code": "#(into () %)", "user": "53f053ebe4b0742d9025b0d3"}, {"problem": 23, "code": "#(vec ((fn [col] (into () col)) %))", "user": "53f035c2e4b0742d9025b0d2"}, {"problem": 23, "code": "(fn rev [coll] \n  (if (empty? (rest coll)) (list(first coll))\n    (cons (last coll) (rev (drop-last coll)) )))", "user": "53ef78bee4b0742d9025b0cd"}, {"problem": 23, "code": "(fn [inp] (reduce (fn [cur in] (cons in cur) ) [] (first [inp]) ))", "user": "53e4bc2ee4b036ad0777e44d"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "53f0e2d8e4b0742d9025b0d6"}, {"problem": 23, "code": "(fn [coll]\n  (reduce (fn [new, x] (conj new x)) '() coll)\n  )", "user": "53ed6976e4b0d648e757f4c4"}, {"problem": 23, "code": "#(into () %)", "user": "53ef55eee4b0742d9025b0ca"}, {"problem": 23, "code": "#(into () %)", "user": "53f12b77e4b0742d9025b0da"}, {"problem": 23, "code": "into '()", "user": "53f1c05ee4b0742d9025b0e1"}, {"problem": 23, "code": "reduce conj ()", "user": "503b9439e4b07a1917cc34df"}, {"problem": 23, "code": "#(loop [s %\n        result []]\n   (if (= s nil)\n     result\n     (recur (butlast s)\n            (conj result (last s)))))", "user": "53da767ee4b0e771c302549e"}, {"problem": 23, "code": "#(for [i (range (count %))] (nth (vec %) (- (count %) 1 i)))", "user": "53f152bce4b0742d9025b0dc"}, {"problem": 23, "code": "reduce conj nil", "user": "53f10bffe4b0742d9025b0d7"}, {"problem": 23, "code": "into '()", "user": "523578efe4b0a643f2dcb74c"}, {"problem": 23, "code": "(fn [coll]\n  (loop [res [] remaining coll]\n    (if (empty? remaining)\n      res\n      (recur (cons (first remaining) res) (rest remaining)))\n    ))", "user": "53f2370ee4b0742d9025b0e7"}, {"problem": 23, "code": "reduce (fn [x y] (conj x y)) '()", "user": "53ed2fafe4b0d648e757f4c1"}, {"problem": 23, "code": "(fn [coll] (reduce conj () coll))", "user": "53ed6befe4b0d648e757f4c5"}, {"problem": 23, "code": "(fn [sequenceA]\n  (loop [rem_seq sequenceA result []]\n    (if (empty? rem_seq)\n      result\n      (recur\n        (rest rem_seq)\n        (cons (first rem_seq) result)\n      )\n    )\n  )\n)", "user": "53f17931e4b0742d9025b0dd"}, {"problem": 23, "code": "(fn [x] (into () x))", "user": "52d2cb0fe4b099d49816f0b5"}, {"problem": 23, "code": "(fn reverse* [coll]\n  (if (>= 1 (count coll))\n    coll\n    (concat (reverse* (rest coll)) [(first coll)])))", "user": "53f42471e4b0742d9025b0fb"}, {"problem": 23, "code": "(fn [s]\n  (into () s)\n  )", "user": "515d414be4b00901442db1db"}, {"problem": 23, "code": "reduce #(cons %2 %) []", "user": "4f392fc8e4b0e243712b1ee7"}, {"problem": 23, "code": "reduce conj '()", "user": "53ed290be4b0d648e757f4c0"}, {"problem": 23, "code": "into ()", "user": "53f1d5d4e4b0742d9025b0e2"}, {"problem": 23, "code": "#(into '() %)", "user": "53f35c34e4b0742d9025b0f4"}, {"problem": 23, "code": "#(loop [lst % res (empty %)]\n   (if (empty? lst)\n     res \n     (recur (rest lst) \n            (cons (first lst) res))))", "user": "53f14389e4b0742d9025b0db"}, {"problem": 23, "code": "into ()", "user": "53f49dfae4b0db01ade6f9c2"}, {"problem": 23, "code": "#(reduce (fn[x e] (conj x e)) '() % )", "user": "53cd421ce4b00fb29b2212dd"}, {"problem": 23, "code": "#(into () %)", "user": "53edbb02e4b0d648e757f4ca"}, {"problem": 23, "code": "(partial reduce (fn [x y] (cons y x)) [])", "user": "53f592b7e4b0db01ade6f9d0"}, {"problem": 23, "code": "(fn [elements]\n  (loop [results '()\n         values elements]\n    (if(empty? values) \n      results\n      (recur (conj results (first values)) (rest values)))))", "user": "53f50c03e4b0db01ade6f9ca"}, {"problem": 23, "code": "(fn thi [lst] (if (= lst []) [] (conj (thi (rest lst)) (first lst))))", "user": "53f5a61ee4b0db01ade6f9d2"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "53bd7080e4b0d9a98559a6d1"}, {"problem": 23, "code": "(fn [s]\n  (loop [target [] remaining s]\n    (if (empty? remaining)\n      target\n      (recur (conj target (last remaining)) (drop-last remaining))\n    )\n  )\n)", "user": "53ef5c13e4b0742d9025b0cb"}, {"problem": 23, "code": "reduce conj '()", "user": "5372e7d9e4b06d7f452d9e02"}, {"problem": 23, "code": "#(into() %)", "user": "53e67e69e4b036ad0777e473"}, {"problem": 23, "code": "(fn [coll] (reduce #(cons %2 %1) [] coll))", "user": "538ca203e4b0b51d73faae5f"}, {"problem": 23, "code": "reduce (fn [a b](cons b a)) []", "user": "53f7008be4b0de5c41848557"}, {"problem": 23, "code": "(fn [l] (reduce (fn [x y] (conj x y)) (take 1 l) (rest l)))", "user": "53f6d555e4b0db01ade6f9e5"}, {"problem": 23, "code": "#(loop [coll %\n        acc nil]\n   (let [head (first coll) tail (rest coll)]\n   (if (empty? tail)\n     (conj acc head)\n     (recur tail (conj acc head))\n   )\n))", "user": "53f7820be4b0de5c41848560"}, {"problem": 23, "code": "#(into '() %)", "user": "53f75957e4b0de5c4184855d"}, {"problem": 23, "code": "(fn\n  [coll]\n  (letfn [(cast-as-list [coll x] (if (vector? coll) x (seq x)))]\n      (loop [c coll\n             acc []]\n        (if (= 0 (count c)) (cast-as-list coll acc)\n          (recur (drop-last c) (conj acc (last c)))))))", "user": "53cbe808e4b00fb29b2212d4"}, {"problem": 23, "code": "(fn nReverse [s]\n  (if (= (rest s) '())\n      s\n      (conj (nReverse (butlast s)) (last s))))", "user": "53f79b66e4b0de5c41848563"}, {"problem": 23, "code": "(fn [l] (reduce (fn [acc v] (cons v acc)) '() l))", "user": "513e8141e4b02b2a3d8235c1"}, {"problem": 23, "code": "(fn [x]\n  (loop [xx x v () ]\n    (if (empty? xx)\n      (into [] v)\n      (recur (rest xx ) (conj v (first xx) ))\n      )))", "user": "53f6566ee4b0db01ade6f9de"}, {"problem": 23, "code": "#(sort (fn [x y] true) %)", "user": "53f733f4e4b0de5c4184855a"}, {"problem": 23, "code": "reduce conj ()", "user": "53f5f740e4b0db01ade6f9d8"}, {"problem": 23, "code": "(fn [xs] (reduce #(cons %2 %1) [] xs))", "user": "53ef7f77e4b0742d9025b0ce"}, {"problem": 23, "code": "(fn rev [xs] (conj (if (empty? (rest xs)) [] (rev (rest xs))) (first xs)))", "user": "53f74528e4b0de5c4184855c"}, {"problem": 23, "code": "(fn [x] (let [inner-func (fn ooga [l rev-l]\n\t\t(if (empty? l)\n          rev-l\n          (recur (rest l) (conj rev-l (first l)))\n          )\t\t\t\t\t\t\t\n                           )\n              ]\n  (inner-func x ())\n          )\n)", "user": "53e1040be4b0d874e779ae4e"}, {"problem": 23, "code": "(fn [coll]\n  (reduce conj '() coll))", "user": "535134bbe4b084c2834f4ae2"}, {"problem": 23, "code": "#(reduce (fn [x y] (conj x y)) '() %)", "user": "53607c32e4b0243289761e37"}, {"problem": 23, "code": "#(reduce (fn [r v] (cons v r)) '() %)", "user": "53fa3524e4b0de5c41848578"}, {"problem": 23, "code": "(fn [col]\n  (reduce conj (list) col))", "user": "5335c083e4b0e30313ee6c6e"}, {"problem": 23, "code": "(fn [ x ] (loop [ x x z [] ] (if (= x ()) z\n        (recur   (rest x)  (cons  (first x)   z)    ))))", "user": "53f34a16e4b0742d9025b0f3"}, {"problem": 23, "code": "(fn rev [lst]\n  (if (empty? (rest lst))\n    [(first lst)]\n\t(concat (rev (rest lst)) [(first lst)])))", "user": "53fb5256e4b0de5c4184857f"}, {"problem": 23, "code": "(fn r [s] (if (seq s) (conj (r ((comp seq pop vec) s)) (last s)) nil ))", "user": "53d86564e4b0e771c302546b"}, {"problem": 23, "code": "#(into () %)", "user": "53fc5ec2e4b0de5c4184859e"}, {"problem": 23, "code": "reduce conj ()", "user": "53ed03f0e4b0d648e757f4bb"}, {"problem": 23, "code": "(fn peu [x] (if (empty? x) x (conj (peu (butlast x)) (last x))))", "user": "53fc8424e4b0de5c418485b3"}, {"problem": 23, "code": "#(into () %)", "user": "53e40b17e4b036ad0777e40c"}, {"problem": 23, "code": "reduce (fn [a x] (conj a x)) '()", "user": "53fcd574e4b0de5c418485d9"}, {"problem": 23, "code": "(fn flip [x] (reduce conj '() x))", "user": "53fcd5f3e4b0de5c418485da"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "53fcdd1ae4b0de5c418485dd"}, {"problem": 23, "code": "(fn [x] (reduce conj '() x))", "user": "53fc5b29e4b0de5c4184859d"}, {"problem": 23, "code": "#(concat (empty %) (reduce conj () %))", "user": "53f9fe41e4b0de5c41848575"}, {"problem": 23, "code": "(fn rev [a] (if (last a) (cons (last a) (rev (butlast a) ) ) ) )", "user": "53f3a4ace4b0742d9025b0f7"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "53fdb53fe4b0de5c418485e8"}, {"problem": 23, "code": "(fn[a]  (keep-indexed (fn[idx v](nth (seq a) (- (count a) (+ 1 idx)))) a)  )", "user": "53fc22f2e4b0de5c41848595"}, {"problem": 23, "code": "(fn [l]\n  (loop [lst l reversed []]\n  \t(if (empty? lst)\n  \t\treversed\n    \t(recur (rest lst) (cons (first lst) reversed))\n  \t)\n  )\n)", "user": "4f0f0e33535d0136e6c2232e"}, {"problem": 23, "code": "#(into () %)", "user": "53fdbe0fe4b0de5c418485e9"}, {"problem": 23, "code": "(fn [s] (loop [s s\n               acc '()]\n          (if (empty? s) acc\n            (recur (rest s) (conj acc (first s))))))", "user": "4dadb5f4c9a9d6ed3399dc57"}, {"problem": 23, "code": "#(into () %)", "user": "53fddd71e4b0de5c418485eb"}, {"problem": 23, "code": "#((fn [list cumul]\n    (let [x (first list)\n          y (rest list)] (if (empty? list) cumul (recur y (cons x cumul))))) % nil)", "user": "53fe1c3be4b0de5c418485f2"}, {"problem": 23, "code": "(fn [c] (reduce #(cons %2 %1) [] c))", "user": "53fcb8f7e4b0de5c418485d4"}, {"problem": 23, "code": "(fn a [y]\n  ((fn b [x y]\n\t(if (empty? y)\n      x\n\t  (b (conj x (first y)) (rest y) )\n      )\n    ) () y )\n  )", "user": "53fbf9bce4b0de5c41848586"}, {"problem": 23, "code": "(fn my-rev\n    [coll]\n    (cond\n     (empty? coll) []\n     :else (into (my-rev (rest coll)) [(first coll)])))", "user": "51803613e4b04f45bde7d8fd"}, {"problem": 23, "code": "(fn rev [x] (if (= (count x) 1) x (conj (rev (butlast x)) (last x) ) ))", "user": "53fdc4b8e4b0de5c418485ea"}, {"problem": 23, "code": "(fn [items] (reduce conj () items ) )", "user": "53ff602fe4b0de5c418485ff"}, {"problem": 23, "code": "(fn [l]\n  (loop [li l nl []]\n    (if (= li [])\n      nl\n      (recur (rest li) (cons (first li) nl)))))", "user": "53fe1b42e4b0de5c418485f1"}, {"problem": 23, "code": "(fn switch [v] (if (empty? v) v (concat (switch (rest v)) [(first v)])))", "user": "53e1e1f1e4b0d874e779ae5e"}, {"problem": 23, "code": "#(loop [to-rev % \n       reversed []] \n  (if to-rev \n    (recur (butlast to-rev) (conj reversed (last to-rev))) \n    reversed))", "user": "53fb4843e4b0de5c4184857d"}, {"problem": 23, "code": "(fn myreverse\n        [mysequence]\n        (if (= 1 (count mysequence))\n          mysequence\n          (conj (myreverse (vec (rest mysequence))) (first mysequence))\n          )\n        )", "user": "53fe459ae4b0de5c418485f4"}, {"problem": 23, "code": "reduce conj ()", "user": "5400407de4b0de5c4184860a"}, {"problem": 23, "code": "(fn [coll] (reduce (fn [s e] (conj s e)) '() coll))", "user": "54008b88e4b0de5c4184860d"}, {"problem": 23, "code": "(fn my-reverse [s]\n  (loop [r () s s]\n    (if-let [l (first s)]\n      (recur (cons l r) (rest s))\n      r)))", "user": "5400fc30e4b0de5c4184861b"}, {"problem": 23, "code": "#((fn res\n  ([x l]\n   (if (= x '()) l\n   \t(recur (rest x) (cons (first x) l)))))\n  % '())", "user": "540187ace4b0de5c41848622"}, {"problem": 23, "code": "(fn [col] (loop\n            [col col\n             newcol '()]\n            (if (empty? col)\n              newcol\n              (do\n                (recur (rest col) (conj newcol (first col)))\n                ) ) ) )", "user": "53cd1a9be4b00fb29b2212dc"}, {"problem": 23, "code": "#(into () %)", "user": "53ff5560e4b0de5c418485fd"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5401aefbe4b0df28a13c62c7"}, {"problem": 23, "code": "#(loop [coll %\n   \t   result (empty %)]\n   \t\t(if (empty? coll)\n   \t\t\tresult\n   \t\t\t(recur (butlast coll) (concat result [(last coll)])) \n       \t)\n   )", "user": "54021f13e4b0df28a13c62cc"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "524b827ce4b09eba1c0223d7"}, {"problem": 23, "code": "apply conj ()", "user": "53f77b6ae4b0de5c4184855f"}, {"problem": 23, "code": "#(for [i (range (dec (count %)) -1 -1)] (nth (vec %) i))", "user": "53fc713be4b0de5c418485a0"}, {"problem": 23, "code": "(fn [coll] (\n            reduce conj '() coll)\n  )", "user": "53abe2a7e4b047364c044453"}, {"problem": 23, "code": "reduce conj ()", "user": "52d17182e4b0d9f9285948dd"}, {"problem": 23, "code": "(fn rv \n\t[input]\n\t(loop [x (apply vector input) rev-x []]\n\t(if (empty? x) rev-x \n\t(recur (pop x) (conj rev-x (peek x))))))", "user": "53ef235de4b0d648e757f4d4"}, {"problem": 23, "code": "#(reduce conj nil %)", "user": "540470dae4b0addc1aec6658"}, {"problem": 23, "code": "#(into [] (reduce conj '() %))", "user": "53fc88e7e4b0de5c418485be"}, {"problem": 23, "code": "(fn hup [x & z] (if (= (empty x) x) (first z) (hup (rest x) (conj (first z) (first x)))))", "user": "540479e7e4b0addc1aec665a"}, {"problem": 23, "code": "(fn [xs]\n  (loop [xs xs\n         acc ()]\n    (if (empty? xs)\n      acc\n      (recur (rest xs) (conj acc (first xs))))))", "user": "53f5666ee4b0db01ade6f9cf"}, {"problem": 23, "code": "#(into () %)", "user": "5403483fe4b0df28a13c62d7"}, {"problem": 23, "code": "(fn [x] \n  (loop [my-list x new-list []]\n    (if (empty? my-list)\n      new-list\n      (recur (rest my-list) (cons (first my-list) new-list)))))", "user": "54051338e4b0addc1aec6662"}, {"problem": 23, "code": "#(into () %)", "user": "53d9e587e4b0e771c302547c"}, {"problem": 23, "code": "(fn inverte\n      ([lista] (if (= (count lista) 1) lista (inverte (rest lista) (vector (first lista)))))\n      ([lista, n_lista] (if (empty? lista) n_lista (inverte (rest lista) (cons (first lista) n_lista)))))", "user": "540271aee4b0df28a13c62d0"}, {"problem": 23, "code": "(fn recursive-reverse [coll]\n    (if (empty? coll)\n        []\n        (conj (recursive-reverse (rest coll)) (first coll) )))", "user": "5306bceee4b02e821686979b"}, {"problem": 23, "code": "reduce (fn [col n] (conj col n)) ()", "user": "531f10bce4b08068f379edc0"}, {"problem": 23, "code": "into ()", "user": "54058af3e4b0addc1aec6669"}, {"problem": 23, "code": "(fn reverse_seq [my_list]\n  (if (= (count my_list) 0)\n    my_list\n    (concat (reverse_seq (rest my_list)) (list (first my_list)) )\n    ))", "user": "54060ae8e4b0addc1aec668e"}, {"problem": 23, "code": "(fn [sq] (reduce #(cons %2 %1) (cons (empty sq) sq)))", "user": "53f78adce4b0de5c41848562"}, {"problem": 23, "code": "reduce conj ()", "user": "54058126e4b0addc1aec6667"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5406776fe4b0addc1aec66a0"}, {"problem": 23, "code": "(fn [s]\n  (loop  [items s\n          reversed-seq ()]\n    (if (empty? items) reversed-seq\n      (recur (rest items) (cons (first items) reversed-seq)))))", "user": "53c5976be4b00fb29b221290"}, {"problem": 23, "code": "reduce #(cons %2 %) '()", "user": "5405885ee4b0addc1aec6668"}, {"problem": 23, "code": "reduce conj ()", "user": "524bc937e4b09eba1c0223ee"}, {"problem": 23, "code": "(fn rev [args]\n  (if (= (count args) 1)\n    args\n    (conj (vec (rev (rest args))) (first args))))", "user": "52ed7458e4b0a18b0f5dd9ed"}, {"problem": 23, "code": "(fn [coll]\n  (loop [coll coll\n         result '()]\n     (if (empty? coll)\n       result\n       (recur (rest coll) (cons (first coll) result)))))", "user": "53eaa804e4b036ad0777e4ea"}, {"problem": 23, "code": "reduce conj ()", "user": "53fc4561e4b0de5c4184859a"}, {"problem": 23, "code": "(fn rev [s]\n  (if-let [f (first s)]\n    (conj (rev (rest s))\n          f)\n    []))", "user": "54084784e4b0addc1aec66c9"}, {"problem": 23, "code": "(fn [l]\n  (loop [ls l\n         nls '()]\n    (if (empty? ls)\n      nls\n      (recur (rest ls) (conj nls (first ls))))))", "user": "5405fdcce4b0addc1aec6683"}, {"problem": 23, "code": "#(into () %)", "user": "52c5d094e4b0c2d177d620ff"}, {"problem": 23, "code": "(fn ! [s]\n   (if (empty? s) s\n       (conj (! (drop-last s)) (last s) )))", "user": "54042a19e4b0df28a13c62e4"}, {"problem": 23, "code": "into '()", "user": "54023bbfe4b0df28a13c62cd"}, {"problem": 23, "code": "reduce (fn [a b] (conj a b) ) '()", "user": "54094824e4b0addc1aec66da"}, {"problem": 23, "code": "#(reduce conj nil %)", "user": "53b9bb15e4b047364c0444ed"}, {"problem": 23, "code": "(fn ozbo [x] (if (empty? x) \n                () \n                (concat \n                  (ozbo (rest x)) \n                  (vector (first x)))))", "user": "53f73cece4b0de5c4184855b"}, {"problem": 23, "code": "#(into () %)", "user": "54096a19e4b0addc1aec66dc"}, {"problem": 23, "code": "#(reduce conj '() %1)", "user": "540997ede4b0addc1aec66dd"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5408ec4de4b0addc1aec66d0"}, {"problem": 23, "code": "#(loop [inp % rev []]\n   (let [last-elem (last inp)]\n     (if (= nil last-elem)\n       rev\n       (recur (drop-last 1 inp) (conj rev last-elem)))))", "user": "540a4f20e4b0addc1aec66ef"}, {"problem": 23, "code": "reduce conj '()", "user": "540b2dcbe4b0addc1aec66f4"}, {"problem": 23, "code": "reduce conj ()", "user": "540aa29de4b0addc1aec66f1"}, {"problem": 23, "code": "(fn [a-seq]\n  (let [helper (fn [acc elem]\n                  (cons elem acc))]\n    (reduce helper [] a-seq)))", "user": "53fd0a22e4b0de5c418485e1"}, {"problem": 23, "code": "#(into '() %)", "user": "540b91e1e4b0addc1aec66fb"}, {"problem": 23, "code": "#(into () %)", "user": "51d42f44e4b013d740b70ddb"}, {"problem": 23, "code": "(fn foo [x] (if (empty? x) '() (conj  (vec (foo (rest x))) (first x))))", "user": "54078851e4b0addc1aec66bd"}, {"problem": 23, "code": "(fn joineroo [x] (if (empty? x) '() (concat (joineroo (rest x)) (list(first x)))))", "user": "54091b82e4b0addc1aec66d5"}, {"problem": 23, "code": "(fn [seq]\n  (loop [seq seq, result '()]\n    (if (= seq [])\n      result\n      (recur (rest seq) (conj result (first seq))))))", "user": "540c8f3fe4b0addc1aec6705"}, {"problem": 23, "code": "(fn [coll]\n  (loop [coll coll\n         acc []]\n    (if (empty? coll)\n      acc\n      (recur (rest coll) (cons (first coll) acc)))))", "user": "540cde77e4b0addc1aec6709"}, {"problem": 23, "code": "#(reduce (fn [building to-add] (cons to-add building)) (empty %) %)", "user": "540d0087e4b0addc1aec670b"}, {"problem": 23, "code": "reduce conj ()", "user": "540c6a8ae4b0addc1aec6702"}, {"problem": 23, "code": "#(into () %)", "user": "540d7dd1e4b0addc1aec6713"}, {"problem": 23, "code": "#(reduce conj '()  %)", "user": "540d72f3e4b0addc1aec6712"}, {"problem": 23, "code": "into ()", "user": "5409a12fe4b0addc1aec66df"}, {"problem": 23, "code": "(fn\n  [l]\n  (loop [lst l rez ()]\n    (if (= (count lst) 0)\n      rez\n      (recur (drop 1 lst) (conj rez (first (take 1 lst))))\n    )))", "user": "53e76728e4b036ad0777e47c"}, {"problem": 23, "code": "(partial reduce conj '())", "user": "54081523e4b0addc1aec66c5"}, {"problem": 23, "code": "(partial reduce conj '())", "user": "540e17c3e4b0addc1aec6719"}, {"problem": 23, "code": ";;(fn rev [s] (loop [ol '(), il s] (if (empty? il) ol (recur (conj ol (first il)) (rest il)))))\n\n(partial reduce conj '())\n\n;; (time (dorun ( (partial reduce conj '()) (range 1e6))))\n;;=> \"Elapsed time: 963.616 msecs\"\n;;=> nil\n\n;; (time (dorun ( (fn rev [s] (loop [ol '(), il s] (if (empty? il) ol (recur (conj ol (first il)) (rest il))))) (range 1e6))))\n;;=> \"Elapsed time: 1035.072 msecs\"\n;;=> nil", "user": "540e0637e4b0addc1aec6717"}, {"problem": 23, "code": "(fn rev [s]\n  (if (seq s)\n    (concat (rev (next s)) [(first s)])))", "user": "54067352e4b0addc1aec669f"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "53fc4abae4b0de5c4184859b"}, {"problem": 23, "code": "#(loop [c1 % c2 '()]\n   (if (= 0 (count c1))\n     c2\n     (recur (rest c1) (conj c2 (first c1)))))", "user": "540e97f9e4b0addc1aec671f"}, {"problem": 23, "code": "(fn [sq]\n  (loop [org sq, rst []]\n    (if (empty? org)\n        rst\n        (recur (drop-last org)\n               (conj rst (last org))))))", "user": "540c54a7e4b0addc1aec6700"}, {"problem": 23, "code": "(fn\n  [s]\n  (loop [the-seq (vec s)\n         ret-seq []\n         curr-el (dec (count the-seq))]\n    (if (< curr-el 0)\n      ret-seq\n      (recur the-seq (conj ret-seq (get the-seq curr-el)) (dec curr-el)))\n  ))", "user": "540efe2ee4b0addc1aec6724"}, {"problem": 23, "code": "(fn esrever [l]\n  (if (empty? l)\n    '()\n    (cons (last l) (esrever (drop-last 1 l)))\n  )\n)", "user": "540f09b9e4b0addc1aec6725"}, {"problem": 23, "code": "(fn [x] (reduce conj '() x))", "user": "540f2b31e4b0addc1aec6726"}, {"problem": 23, "code": "#(reduce conj '() %1)", "user": "540f2c48e4b0addc1aec6727"}, {"problem": 23, "code": "#(into '() %)", "user": "540f57f6e4b0addc1aec672b"}, {"problem": 23, "code": "#(into () %)", "user": "5409a4fee4b0addc1aec66e0"}, {"problem": 23, "code": "(fn [args]\n  (loop [args args\n         rev '()]\n    (if (= 0 (count args))\n      rev\n      (recur (rest args) (conj rev (first args)))\n      )))", "user": "53c69ebce4b00fb29b22129c"}, {"problem": 23, "code": "(fn [xs] (reduce #(cons %2 %1) '() xs))", "user": "540d5ab9e4b0addc1aec670f"}, {"problem": 23, "code": "#(into () %)", "user": "53cf1648e4b00fb29b2212fa"}, {"problem": 23, "code": "(fn [coll]\n    (loop [remain coll\n          rev []]\n      (if (empty? remain)\n        rev\n        (recur (rest remain) (cons (first remain) rev)))))", "user": "540f3b4ee4b0addc1aec6729"}, {"problem": 23, "code": "#(into '() %)", "user": "54103c69e4b01498b1a719a4"}, {"problem": 23, "code": "(fn [l]\n  (loop [remaining l acc []]\n    (if (empty? remaining) acc\n      (recur (rest remaining) (cons (first remaining) acc)))))", "user": "5409f8eae4b0addc1aec66e6"}, {"problem": 23, "code": "(fn [xs]\n  (reduce conj () xs))", "user": "540ff039e4b01498b1a7199b"}, {"problem": 23, "code": "#(into () %)", "user": "540ff022e4b01498b1a7199a"}, {"problem": 23, "code": "(fn reverser [coll] (if (nil? coll)\n                 coll\n                 (cons (last coll) (reverser (butlast coll)))\n                 ))", "user": "53f6bfd9e4b0db01ade6f9e4"}, {"problem": 23, "code": "(fn f [col]\n  (if (empty? col)\n    '()\n    (cons (last col) (f (butlast col)))))", "user": "540d5085e4b0addc1aec670e"}, {"problem": 23, "code": "#(loop [coll % acc (empty %)] (if (empty? coll) acc (recur (rest coll) (cons (first coll) acc))))", "user": "541074f1e4b01498b1a719ac"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "541067c0e4b01498b1a719a8"}, {"problem": 23, "code": "reduce conj ()", "user": "54126d0ce4b01498b1a719d5"}, {"problem": 23, "code": "apply conj '()", "user": "5286a2a9e4b0239c8a67ae1e"}, {"problem": 23, "code": "into ()", "user": "531571ece4b08068f379ed27"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "53ff8c31e4b0de5c41848603"}, {"problem": 23, "code": "into ()", "user": "54139cd4e4b01498b1a719e3"}, {"problem": 23, "code": "#(reduce (fn [acc v] (concat [v] acc)) [] %)", "user": "54133900e4b01498b1a719de"}, {"problem": 23, "code": "(fn myreverse ([x] (myreverse x [])) ([x y] (if (= (count x) 0) y (myreverse (rest x) (cons (first x) y)))))", "user": "541475afe4b01498b1a719eb"}, {"problem": 23, "code": "(fn  [coll]\n\t    (reduce conj () coll)\n)", "user": "54100c73e4b01498b1a7199e"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "54157dace4b01498b1a719f4"}, {"problem": 23, "code": "#(reduce (fn [a b] (cons b a)) [] %)", "user": "52541fe6e4b0541d1855b964"}, {"problem": 23, "code": "into ()", "user": "5405ae2be4b0addc1aec6671"}, {"problem": 23, "code": "#(vec (into '() %))", "user": "5414dccbe4b01498b1a719f1"}, {"problem": 23, "code": "(partial into ())", "user": "5412d5d2e4b01498b1a719d9"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "54149f2fe4b01498b1a719ec"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5415d115e4b01498b1a719f7"}, {"problem": 23, "code": "(fn [elems]\n  (loop [elems-left elems, reversed nil]\n    (if-not (empty? elems-left)\n      (recur (rest elems-left) (cons (first elems-left) reversed))\n      reversed)))", "user": "5267c74be4b03e8d9a4a7183"}, {"problem": 23, "code": "(fn myrev [s]\n  (if (seq s)\n    (conj (myrev (rest s)) (first s))\n    []))", "user": "54165291e4b01498b1a719fb"}, {"problem": 23, "code": "apply conj '()", "user": "541096bde4b01498b1a719b2"}, {"problem": 23, "code": "(fn my-reverse [coll]\n  (if (empty? coll)\n    nil\n    (cons (last coll) (my-reverse (drop-last 1 coll)))))", "user": "54125eeee4b01498b1a719d3"}, {"problem": 23, "code": "(fn reverse-p [seqz] (when (seq seqz) (cons (last seqz) (reverse-p (drop-last seqz)))))", "user": "5414b7c4e4b01498b1a719ed"}, {"problem": 23, "code": "(fn [s]\n  ((fn acc [s t]\n     (if (empty? s)\n         t\n         (acc (rest s) (conj t (first s))))) s '()))", "user": "541709b0e4b01498b1a71a06"}, {"problem": 23, "code": "(fn rev [lst]\n  (if (empty? lst)\n    []\n    (conj (rev (rest lst)) (first lst)))\n  )", "user": "541404c2e4b01498b1a719e7"}, {"problem": 23, "code": "#(reduce (fn [x y] (conj x y)) nil %)", "user": "5417385fe4b01498b1a71a08"}, {"problem": 23, "code": "#(loop[v %1, r []] (if (empty? v) (vec r) (recur (rest v) (cons (first v) r))))", "user": "541619e8e4b01498b1a719f9"}, {"problem": 23, "code": "(fn rev [s] \n  (println s)\n  (if (empty? s)\n    s\n\t(concat (rev (rest s)) (list (first s)))))", "user": "5413adfee4b01498b1a719e4"}, {"problem": 23, "code": "(fn qua [col]\n  (loop [loopcol col\n         rslt '()]\n    (if (empty? loopcol)\n      rslt\n      (recur (rest loopcol) (conj rslt (first loopcol))))))", "user": "54178782e4b01498b1a71a0c"}, {"problem": 23, "code": "(fn [x] (map last (sort #(> (first %1) (first %2)) (map-indexed vector x))))", "user": "54180369e4b01498b1a71a13"}, {"problem": 23, "code": "#(loop [old % \n        new []]\n   (if (empty? old)\n     new\n     (recur (rest old) (cons (first old) new ))))", "user": "54187e84e4b01498b1a71a1b"}, {"problem": 23, "code": "#(into ()%)", "user": "5416aacce4b01498b1a719ff"}, {"problem": 23, "code": "(fn [x] (loop [lst x reversed (vector)]\n\t\t\t\t(if (empty? lst) \n\t\t\t\t\treversed \n\t\t\t\t\t(recur (butlast lst) (conj reversed (last lst))))\n\t))", "user": "54199df6e4b01498b1a71a4b"}, {"problem": 23, "code": "(fn [lst] (reduce (fn [lst1 el] (cons el lst1)) [] lst))", "user": "53e92f82e4b036ad0777e49d"}, {"problem": 23, "code": "(fn my-reverse [coll]\n  (reduce (fn [acc x]\n            (cons x acc)) () coll))", "user": "53fd66a4e4b0de5c418485e3"}, {"problem": 23, "code": "(fn [x] (into () x))", "user": "541adc98e4b01498b1a71a5e"}, {"problem": 23, "code": "(fn my-reverse [c]\n                (when (seq c)\n                  (cons (last c) (my-reverse (drop-last c)))))", "user": "541ae7dbe4b01498b1a71a61"}, {"problem": 23, "code": "into()", "user": "53a899e0e4b047364c04442b"}, {"problem": 23, "code": "#(into '() %)", "user": "541b37d2e4b01498b1a71a64"}, {"problem": 23, "code": "(fn rev [coll] (if (empty? coll) [] (conj (rev (rest coll)) (first coll))))", "user": "541ad1c1e4b01498b1a71a5c"}, {"problem": 23, "code": "(fn [sq] (loop [result (empty sq)\n                s sq]\n           (if (empty? s)\n             result\n             (recur (cons (first s) result) (rest s)))))", "user": "540c288ae4b0addc1aec66ff"}, {"problem": 23, "code": "(fn [x] (reduce (fn [acc curr] (conj acc curr)) '() x))", "user": "541c07e7e4b01498b1a71a6f"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "541c2ae0e4b01498b1a71a71"}, {"problem": 23, "code": "(fn rev [a]\n  (if (empty? a)    \n    a\n    (cons (last a) (rev (butlast a)))))", "user": "541b41d1e4b01498b1a71a65"}, {"problem": 23, "code": "(fn [l] (reduce conj nil l))", "user": "541c47bbe4b01498b1a71a72"}, {"problem": 23, "code": "(fn rrev [col] (if (empty? col) [] (conj (rrev (rest col)) (first col))))", "user": "541c516ae4b01498b1a71a73"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "541c5718e4b01498b1a71a74"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "541c6489e4b01498b1a71a76"}, {"problem": 23, "code": "(fn [xs]\n  (loop [xs xs\n         acc '()]\n    (if (empty? xs)\n      acc\n      (recur (rest xs) (conj acc (first xs))))))", "user": "540961e9e4b0addc1aec66db"}, {"problem": 23, "code": "#(into () %)", "user": "54117417e4b01498b1a719c5"}, {"problem": 23, "code": "(fn [s] \n  (reduce \n    (fn [x,y] (conj x y))\n    '() \n    (seq s)\n  )\n)", "user": "541d2594e4b01498b1a71a7c"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "540ef409e4b0addc1aec6723"}, {"problem": 23, "code": "(fn [seq]\n  (map #(last (take % seq)) \n       (range (count seq) 0 -1)))", "user": "541df619e4b01498b1a71a87"}, {"problem": 23, "code": "(partial sort (comp (partial * -1) compare))", "user": "541ec144e4b01498b1a71a8e"}, {"problem": 23, "code": "(fn [coll]\n  (reduce (fn [x sofar] (conj x sofar)) '() coll))", "user": "54159032e4b01498b1a719f5"}, {"problem": 23, "code": "(fn[n] (reduce conj '() n))", "user": "541df0b5e4b01498b1a71a86"}, {"problem": 23, "code": "(fn [x] (reduce #(cons %2 %) [] x))", "user": "541ef7e2e4b01498b1a71a92"}, {"problem": 23, "code": "reduce conj '()", "user": "511036c5e4b04c71fce993ee"}, {"problem": 23, "code": "(fn [s] \n  (loop [sq s ac []] \n    (if (= 0 (count sq)) \n      ac \n      (recur (butlast sq) (conj ac (last sq)))\n      )\n    )\n  )", "user": "540b4c4de4b0addc1aec66f6"}, {"problem": 23, "code": "reduce conj '()", "user": "541f5b37e4b01498b1a71a97"}, {"problem": 23, "code": "reduce (fn [reversed x] (cons x reversed)) '()", "user": "541f6bc0e4b01498b1a71a98"}, {"problem": 23, "code": "#(into () %)", "user": "54084089e4b0addc1aec66c7"}, {"problem": 23, "code": "#(into () %)", "user": "541fcf1ee4b01498b1a71a9c"}, {"problem": 23, "code": "(fn [coll] \n  (loop [c (count coll) res [] s (seq coll)]\n    (if (= c 0)\n      res\n      (recur (dec c) (conj res (nth s (- c 1))) s\n             )))\n  )", "user": "541c1e46e4b01498b1a71a70"}, {"problem": 23, "code": "; #(reduce (fn [xs y] (cons y xs)) (empty %) %)\n\n#(into () %)", "user": "541e2ff8e4b01498b1a71a8a"}, {"problem": 23, "code": "(fn myreverse\n  [seq]\n  (loop [coll seq\n         reversed-seq '()]\n    (let [myfirst (first coll)\n          myrest (rest coll)]\n      (if (= 0 (count myrest))\n        (conj reversed-seq myfirst)\n        (recur myrest (conj reversed-seq myfirst))))))", "user": "542098afe4b01498b1a71aa7"}, {"problem": 23, "code": "#(into () %)", "user": "5412ef7ee4b01498b1a719da"}, {"problem": 23, "code": "#(into '() %)", "user": "541cf6dfe4b01498b1a71a7a"}, {"problem": 23, "code": "(fn [xs] (reduce #(conj %1 %2) () xs))", "user": "541168dee4b01498b1a719c3"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "4e68dfe6535d8ccf87e9fe91"}, {"problem": 23, "code": "#(into () %)", "user": "53c67bd3e4b00fb29b22129a"}, {"problem": 23, "code": "#(reduce conj () %1)", "user": "5421f861e4b01498b1a71abc"}, {"problem": 23, "code": "(fn revers_ [x]\n    (reduce \n        (fn [ret, a] \n            (concat [a] ret))\n        [] x))", "user": "54213a8fe4b01498b1a71aaf"}, {"problem": 23, "code": "into ()", "user": "54227fc6e4b01498b1a71ac0"}, {"problem": 23, "code": "(fn rev [xs] \n  (cond\n   (= xs nil) nil\n   :else (cons (last xs) (rev (butlast xs)))\n  )\n)", "user": "516ee939e4b06aac486e5b34"}, {"problem": 23, "code": "(fn versk [x] (when-not (empty? x) (conj (versk (drop-last x)) (last x))))", "user": "5421cd6be4b01498b1a71ab7"}, {"problem": 23, "code": "reduce conj '()", "user": "52b2f9cae4b0c58976d9acfb"}, {"problem": 23, "code": "(fn [lat] (into '() lat))", "user": "54240d89e4b01498b1a71ad8"}, {"problem": 23, "code": "(fn [coll] (reduce conj '() coll))", "user": "5424608ce4b01498b1a71ae9"}, {"problem": 23, "code": "(fn [coll]\n  (loop [c coll\n         rev '()]\n    (if (seq c)\n      (recur (rest c) (conj rev (first c)))\n      rev)))", "user": "54246fcce4b01498b1a71aed"}, {"problem": 23, "code": "reduce conj ()", "user": "54246d6de4b01498b1a71aec"}, {"problem": 23, "code": "(fn rev ([x] (cond (vector? x) (rev x [])\n                   (list? x) (rev x '())\n                   :else (rev (apply list (seq x)))))\n        ([x y] (if (empty? x) y (recur (pop x) (conj y (peek x))))))", "user": "54239171e4b01498b1a71ad2"}, {"problem": 23, "code": "(fn [x] (reduce #(conj %1 %2) '() x))", "user": "5424f5c3e4b01498b1a71b06"}, {"problem": 23, "code": "(fn rvs [coll]\n  (if (next coll) (conj (rvs (next coll)) (first coll))\n    [(first coll)]))", "user": "5421f74fe4b01498b1a71abb"}, {"problem": 23, "code": "(fn myrevers [a-list] (cond (= a-list nil) nil :else (cons (last a-list) (myrevers (butlast a-list)))))", "user": "5422e0cce4b01498b1a71ac8"}, {"problem": 23, "code": "(fn rev\n  ([lst revlst] \n   (if (= nil (first lst)) \n     revlst\n     (rev (rest lst) (conj revlst (first lst)) ) ) )\n  ([lst] (rev lst nil) ))", "user": "54257124e4b01498b1a71b09"}, {"problem": 23, "code": "(fn [balls]\n        (loop [x balls newvec '()]\n          (if (empty? (rest x))\n            (conj newvec (first x))\n            (recur (rest x) (conj newvec (first x)))\n           )\n          )\n         )", "user": "5425d65ce4b01498b1a71b14"}, {"problem": 23, "code": "(fn my-reverse\n  [sq]\n  (loop [[head & tail] (seq sq)\n         final-sq '()]\n    (if (empty? tail)\n      (conj final-sq head)\n      (recur tail (conj final-sq head)))))", "user": "5426bd40e4b01498b1a71b1c"}, {"problem": 23, "code": "(partial reduce conj (list))", "user": "5424c523e4b01498b1a71b03"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "4f80a906e4b033992c121bf7"}, {"problem": 23, "code": "(fn [coll & res]\n  (if (empty? coll)\n    res\n    (recur (rest coll) (conj res (first coll)))))", "user": "542769f8e4b01498b1a71b24"}, {"problem": 23, "code": "(fn [lst]\n  (letfn \n    [(rhelper [l nl]\n              (cond (= () l) nl\n                    :else (rhelper (rest l) (cons (first l) nl))))]\n    (rhelper lst ())))", "user": "541e6d40e4b01498b1a71a8c"}, {"problem": 23, "code": "(fn  [a]                                                                                         \n        (loop [s a r (empty a)]                                                                              \n          (if (= 0 (count s))                                                                                \n            r                                                                                                \n            (recur (rest s) (cons (first s) r)))))", "user": "5423dc6ae4b01498b1a71ad5"}, {"problem": 23, "code": "#(vec (reduce (fn [x xs] (conj x xs)) (empty ()) %))", "user": "53d6bc2fe4b0e771c302545a"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "54258e71e4b01498b1a71b0e"}, {"problem": 23, "code": "#(into '()%)", "user": "53e32cf7e4b036ad0777e3fd"}, {"problem": 23, "code": "#(map (vec %) (range (dec (count %)) -1 -1))", "user": "540705f0e4b0addc1aec66b1"}, {"problem": 23, "code": "(fn a [x]\n  (\n   if (= (count x) 1)\n   \tx\n  \t(concat (a (rest x)) (list (first x)))\n  )\n)", "user": "54283a7ae4b01498b1a71b2f"}, {"problem": 23, "code": "(fn [s] (loop [seq s acc []] (if (empty? seq) acc (recur (rest seq) (cons (first seq) acc)))))", "user": "54286beee4b01498b1a71b31"}, {"problem": 23, "code": "(fn rev [x] (if (= 1 (count x)) x (conj (rev (vec (rest x))) (first x))))", "user": "5422e975e4b01498b1a71ac9"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5425d454e4b01498b1a71b13"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5429986ce4b01498b1a71b3b"}, {"problem": 23, "code": "(partial reduce conj ())", "user": "54299d4be4b01498b1a71b3d"}, {"problem": 23, "code": "(fn [lst] \n  (loop[original lst\n       reversed '()]\n  \t(if (empty? original)\n    \treversed\n    \t(recur \n         (drop 1 original) \n         (conj reversed (first original))))))", "user": "54194782e4b01498b1a71a29"}, {"problem": 23, "code": "#(apply conj '() %)", "user": "5410cb36e4b01498b1a719b8"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "51b965dde4b0e871ca495905"}, {"problem": 23, "code": "(fn [x]\n  (loop [x x, acc '()]\n    (if (empty? x)\n      acc\n      (recur (rest x) (cons (first x) acc)))))", "user": "542ab1afe4b01498b1a71b48"}, {"problem": 23, "code": "(fn\n  [r l]\n  (if (first l)\n    (recur (conj r (first l)) (rest l) )\n    r)) '()", "user": "54258a7fe4b01498b1a71b0c"}, {"problem": 23, "code": "(partial (fn [tail input]\n   (if (empty? input)\n     tail\n     (recur (conj tail (last input)) (butlast input)))) [])", "user": "520fca70e4b080a8d9b9d631"}, {"problem": 23, "code": "into ()", "user": "542af3a2e4b0dad94371f285"}, {"problem": 23, "code": "(fn [z] (sort (fn [x y] (compare y x)) z))", "user": "542aed70e4b0dad94371f284"}, {"problem": 23, "code": "(fn recursive-reverse [coll]\n    (if (empty? coll)\n        []\n        (conj (recursive-reverse (rest coll)) (first coll) )))", "user": "54244c77e4b01498b1a71ae4"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "539a38dae4b0b51d73faaf10"}, {"problem": 23, "code": "(fn [coll] (if (list? coll) (into () coll) (vec (reduce #(conj % %2) () coll) ) ))", "user": "53f78944e4b0de5c41848561"}, {"problem": 23, "code": "#(into () %)", "user": "54290a64e4b01498b1a71b36"}, {"problem": 23, "code": "(fn rev-seq [x]\n  (into () x))", "user": "542c026ae4b0dad94371f29a"}, {"problem": 23, "code": "(fn [in-seq]\n  (loop [cur-seq in-seq\n         rev-seq '()]\n    (if (nil? (first cur-seq))\n      rev-seq\n      (recur (rest cur-seq) (conj rev-seq (first cur-seq))))))", "user": "542c22bde4b0dad94371f29e"}, {"problem": 23, "code": "(fn [coll]\n  (loop [c coll\n         acc []]\n    (if (seq c)\n      (recur (rest c) (cons (first c) acc))\n      acc)))", "user": "51ca5378e4b08b1cbd0d9480"}, {"problem": 23, "code": "(fn dothing [s] \n   (if (empty? s) \n     s \n     (concat (dothing (rest s)) (list (first s)))))", "user": "542c858ae4b0dad94371f2a8"}, {"problem": 23, "code": "(fn [q] (vec (sort (fn \n                      [x y] \n                      (> (reduce + (flatten [x]))\n                         (reduce + (flatten [y])))) q)))", "user": "541735b3e4b01498b1a71a07"}, {"problem": 23, "code": "(partial reduce #(cons %2 %1) [])", "user": "540e8d13e4b0addc1aec671e"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "542cc164e4b0dad94371f2ad"}, {"problem": 23, "code": "#(cond\n   (set? %) (into () %)\n   (vector? %) (vec (into () %))\n   :else \"nevermind\")", "user": "541e774de4b01498b1a71a8d"}, {"problem": 23, "code": "into ()", "user": "542d2385e4b0dad94371f2b2"}, {"problem": 23, "code": "(fn myReverse [x] (if (seq x) (conj (myReverse (drop 1 x)) (first x)) []))", "user": "542c1f73e4b0dad94371f29d"}, {"problem": 23, "code": "#(into () % )", "user": "54280188e4b01498b1a71b2a"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "542d8ba4e4b0dad94371f2b8"}, {"problem": 23, "code": "(fn recursive-reverse [coll]\n    (if (empty? coll)\n        []\n        (conj (recursive-reverse (rest coll)) (first coll) )))", "user": "51e58104e4b0efabf93c02cd"}, {"problem": 23, "code": "#(loop [acc (list (first %)) r (rest %)] (if (empty? r) acc (recur (cons (first r) acc) (rest r))))", "user": "542db41be4b0dad94371f2bb"}, {"problem": 23, "code": "#(into () %)", "user": "542de19ae4b0dad94371f2bf"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "54185dc3e4b01498b1a71a19"}, {"problem": 23, "code": "reduce conj ()", "user": "542f1cade4b0dad94371f2ce"}, {"problem": 23, "code": "#(into '() %)", "user": "542edb4ae4b0dad94371f2c8"}, {"problem": 23, "code": "(partial into '())", "user": "5136bc52e4b04ac1f358dd58"}, {"problem": 23, "code": "into ()", "user": "53a01fb1e4b0ca733b9744a6"}, {"problem": 23, "code": "reduce conj ()", "user": "542f574be4b0dad94371f2d0"}, {"problem": 23, "code": "(fn [s]\n  (loop [result [] s s]\n    (if (seq s)\n      (recur (concat [(first s)] result) (rest s))\n       result)))", "user": "542fa3f0e4b0dad94371f2d4"}, {"problem": 23, "code": "into ()", "user": "54296802e4b01498b1a71b38"}, {"problem": 23, "code": "reduce conj ()", "user": "5411b0ede4b01498b1a719ca"}, {"problem": 23, "code": "#(loop [liste % res []]\n   (if (empty? liste)\n     res\n     (recur (butlast liste) (conj res (last liste)))))", "user": "54302691e4b0dad94371f2d7"}, {"problem": 23, "code": "reduce conj ()", "user": "541ddadbe4b01498b1a71a84"}, {"problem": 23, "code": "into ()", "user": "5360e9ade4b0243289761e3b"}, {"problem": 23, "code": "(fn [coll]\n  (let [vec (into [] coll)\n        length (count vec)]\n    (for [x (range 0 length )]\n          (nth vec (- length x 1)))))", "user": "542c2de0e4b0dad94371f29f"}, {"problem": 23, "code": "(fn [s] (reduce conj '() s))", "user": "5430a16de4b0dad94371f2da"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5426a59ee4b01498b1a71b1b"}, {"problem": 23, "code": "(fn [seq]\n   (loop [ss seq\n          ret '()]\n     (if ss\n       (recur (next ss) (cons (first ss) ret))\n       ret)))", "user": "542b764ae4b0dad94371f28d"}, {"problem": 23, "code": "(fn rev\n  [coll]\n  (let [[head & tail] (vec coll)]\n    (if (empty? tail)\n      [head]\n      (conj (rev tail) head))))", "user": "54311d60e4b0dad94371f2e2"}, {"problem": 23, "code": "(fn rev [xs]\n  (letfn [(revfunc [s] (reduce (fn [x y] (cons y x)) [] s))]\n    (cond\n      (= (type xs) clojure.lang.PersistentVector) (vec (revfunc xs))\n      :else (revfunc xs))))", "user": "5431224be4b0dad94371f2e4"}, {"problem": 23, "code": "reduce #(cons %2 %1) []", "user": "53f49f9be4b0db01ade6f9c3"}, {"problem": 23, "code": "#_(fn rev [lister]\n  (if (= (count lister) 1)\n    (first [lister])\n    (cons (last lister) (rev (drop-last lister)))))\n\n(fn [stuff]\n  (reduce #(cons %2 %1) '() stuff))", "user": "54196d63e4b01498b1a71a34"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5430b3b6e4b0dad94371f2db"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "543154e9e4b0dad94371f2e5"}, {"problem": 23, "code": "#(into () %)", "user": "542789efe4b01498b1a71b25"}, {"problem": 23, "code": "#(loop [col %\n        res '()]\n   (if (empty? col)\n     res\n     (recur (rest col) (conj res (first col)))))", "user": "542ce413e4b0dad94371f2ae"}, {"problem": 23, "code": "(fn my-reverse [coll]\n  (let [head (first coll)\n        tail (next coll)]\n  \t(if tail\n\t    (conj (my-reverse tail) head)\n\t    (vector head))))", "user": "542cb77ae4b0dad94371f2aa"}, {"problem": 23, "code": "#(into () %)", "user": "54324be1e4b0dad94371f2ed"}, {"problem": 23, "code": "(fn rev [seq]\n  (if (empty? seq) []\n  (conj (rev (rest seq)) (first seq))))", "user": "543168f5e4b0dad94371f2e6"}, {"problem": 23, "code": "(fn [coll]\n  (loop [[x & xs] (vec coll), result (), n (count coll)]\n    (if (zero? n)\n      result\n      (recur xs (conj result x) (- n 1) ))))", "user": "54312081e4b0dad94371f2e3"}, {"problem": 23, "code": "(fn [x] (into '() x))", "user": "543245bae4b0dad94371f2ec"}, {"problem": 23, "code": "(fn [coll]\n    (reduce conj () coll))", "user": "5412646de4b01498b1a719d4"}, {"problem": 23, "code": "#(loop\n      [col %\n       res ()]\n   (if (not (seq col))\n      res\n      (recur\n        (rest col)\n        (conj res (first col)))))", "user": "534678b9e4b084c2834f4a3d"}, {"problem": 23, "code": "#(into '() %)", "user": "542da97ae4b0dad94371f2ba"}, {"problem": 23, "code": "(fn reverseSequence [x] \n  (if (= x [])\n    []\n    (conj (reverseSequence (rest x)) (first x))))", "user": "54336443e4b0b6b47310fcde"}, {"problem": 23, "code": "(fn r' [l]\n   (if-let [x (first l)]\n     (if-let [xs (rest l)]\n       (concat (r' xs) [x]))))", "user": "5433a07be4b0b6b47310fce0"}, {"problem": 23, "code": "#(into () %)", "user": "5433c591e4b0b6b47310fce3"}, {"problem": 23, "code": "reduce conj ()", "user": "543272b8e4b0dad94371f2ef"}, {"problem": 23, "code": "(fn [x] (loop  [rev () rem x] \n          (if (empty? rem)\n\t          rev\n\t          (recur (cons (first rem) rev) (rest rem))\n           )\n          )               \n)", "user": "542baf7ce4b0dad94371f291"}, {"problem": 23, "code": "into ()", "user": "542c44f8e4b0dad94371f2a1"}, {"problem": 23, "code": "(fn [col]\n  (loop [ col col\n          result []]\n        (if (empty? col)\n            result\n            (recur (rest col) (cons (first col) result)))))", "user": "5433d3ebe4b0b6b47310fce4"}, {"problem": 23, "code": "into ()", "user": "54349368e4b0b6b47310fcf1"}, {"problem": 23, "code": "(fn [head tail]\n  (if (empty? tail)\n    head\n    (recur (conj head (first tail)) (drop 1 tail)))) '()", "user": "5433e45ee4b0b6b47310fce5"}, {"problem": 23, "code": "#(into '() %)", "user": "54344721e4b0b6b47310fcea"}, {"problem": 23, "code": "(fn r [xs]\n  (loop [xs xs rs ()]\n    (if (empty? xs)\n      rs\n      (recur (rest xs) (conj rs (first xs))))))", "user": "54366f1de4b032a45b8692fb"}, {"problem": 23, "code": "reduce conj '()", "user": "53da3fcde4b0e771c3025497"}, {"problem": 23, "code": "(fn [x] (into () x))", "user": "542130cee4b01498b1a71aae"}, {"problem": 23, "code": "(fn [ll]\n  (loop [ll ll\n         oddll '()]\n    (if (= '() ll)\n      oddll\n      (recur (rest ll) (conj oddll (first ll))))))", "user": "54297741e4b01498b1a71b39"}, {"problem": 23, "code": "(fn [coll]\n    [coll]\n    (reduce conj () coll))", "user": "54377355e4b032a45b869305"}, {"problem": 23, "code": "#(loop [r %\n         rev ()]\n         (if (empty? r)\n         rev\n         (recur (rest r) (conj rev (first r)))))", "user": "5432df22e4b0dad94371f2f5"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5436e0a8e4b032a45b8692fd"}, {"problem": 23, "code": "#(into () %)", "user": "543823f1e4b032a45b869311"}, {"problem": 23, "code": "(partial (fn shift [end start]\n           (if (= start '())\n             end\n             (shift (cons (first start) end) (rest start))))\n         [])", "user": "5438795ee4b032a45b869313"}, {"problem": 23, "code": "(fn [x] ((fn [a b] (if (nil? (seq (rest a))) (conj b (first a)) (recur (rest a) (conj b (first a))))) x '()))", "user": "543897e7e4b032a45b869314"}, {"problem": 23, "code": "(fn rev [x]\n  (if (empty? x)\n    `()\n    (concat (rev (rest x)) (list (first x)))\n    )\n  )", "user": "51eda45ce4b0bb507043159b"}, {"problem": 23, "code": "into ()", "user": "54380631e4b032a45b86930f"}, {"problem": 23, "code": "(fn [coll] (reduce (fn [m x] (into [x] m)) [] coll))", "user": "54393c3fe4b032a45b86931a"}, {"problem": 23, "code": "#(into '() %)\n;#(reduce (fn [acc i] (into [i] acc)) [] %)", "user": "54397533e4b032a45b86931d"}, {"problem": 23, "code": "#(into () %)", "user": "540b922de4b0addc1aec66fc"}, {"problem": 23, "code": "(fn\n  [mylist]\n  (loop\n    [templist mylist newlist nil]\n    (if (next templist) (recur (next templist) (conj newlist (first templist))) (if (first templist) (conj newlist (first templist)) newlist))))", "user": "5439c3cee4b032a45b869323"}, {"problem": 23, "code": "into ()", "user": "53b544d4e4b047364c0444bd"}, {"problem": 23, "code": "(fn [coll] (reduce conj () coll))", "user": "543b5bc6e4b032a45b86932d"}, {"problem": 23, "code": "#(into () %)", "user": "5437eca1e4b032a45b86930d"}, {"problem": 23, "code": "#((fn [s r]\n  (if-not (seq s)\n    r\n    (recur (butlast s) (conj r (last s)))))\n  %\n  [])", "user": "52ee9ac7e4b05e3f0be25ec9"}, {"problem": 23, "code": "into '()", "user": "543b9f8ce4b032a45b869332"}, {"problem": 23, "code": "(fn [lst] (into () lst))", "user": "543c1afce4b032a45b86933b"}, {"problem": 23, "code": "#(loop [l %, r ()] (if (empty? l) r (recur (rest l) (conj r (first l)))))", "user": "543a68d3e4b032a45b869326"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "543c39e0e4b032a45b86933d"}, {"problem": 23, "code": "(fn [s] (reduce (fn [xs x] (cons x xs)) '() s))", "user": "54305256e4b0dad94371f2d9"}, {"problem": 23, "code": "(fn my-reverse [seq]\n  (case (count seq)\n    0 (empty seq)\n    1 (into (empty seq) [(first seq)])\n    (let [beginning (take (dec (count seq)) seq)\n          reversed-beginning (my-reverse beginning)\n          result (cons (last seq) reversed-beginning)]\n      #_(println seq \":\" (last seq) \"+ rev\" beginning \"->\" (class reversed-beginning))\n      result)))", "user": "53f891eee4b0de5c4184856d"}, {"problem": 23, "code": "(fn [x y]\n\t(if (empty? y)\n\t  x\n\t  (recur (cons (first y) x) (rest y)))) '()", "user": "543be8f0e4b032a45b869337"}, {"problem": 23, "code": "reduce conj '()", "user": "543cea42e4b032a45b869343"}, {"problem": 23, "code": "(fn sex\n  ([s] (sex '() s))\n  ([a s] (if (empty? s) a\n           (sex (conj a (first s)) (rest s))))\n  )", "user": "543cf826e4b032a45b869345"}, {"problem": 23, "code": "(fn [coll] (reduce conj '() coll))", "user": "543bd52be4b032a45b869336"}, {"problem": 23, "code": "reduce #(cons %2 %1) []", "user": "53f67bcfe4b0db01ade6f9e1"}, {"problem": 23, "code": "(fn my-reverse [lista] \n  (if (empty? lista) \n    lista \n    (concat\n     (my-reverse (rest lista)) \n     (list(first lista)))))", "user": "543d5c61e4b032a45b86934d"}, {"problem": 23, "code": "(fn rev [col] (if (= 0 (count (rest col)))\n                  [(first col)]\n                 (conj (rev (rest col)) (first col)))  \n)", "user": "543bce4fe4b032a45b869335"}, {"problem": 23, "code": "reduce #(conj %1 %2) '()", "user": "51568fbae4b04360f2428e67"}, {"problem": 23, "code": "#(into () %)", "user": "543d89dfe4b032a45b869350"}, {"problem": 23, "code": "(fn [parcoll] \n    (loop \n       [rescoll [] \n       startcoll parcoll] \n       (if (empty? startcoll) \n\t   rescoll \n\t   (recur (cons (first startcoll) rescoll) \n\t\t  (rest startcoll)\n\t\t  )\n\t   )\n       )\n    )", "user": "542fa0dde4b0dad94371f2d2"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "52561295e4b0541d1855ba03"}, {"problem": 23, "code": "(fn [s] \n  (loop [s s acc '()] \n    (if-not (empty? s) \n      (recur (rest s) (cons (first s) acc)) \n      acc)))", "user": "5385e633e4b06839e8705f08"}, {"problem": 23, "code": "#(into () %)", "user": "543f854fe4b032a45b86935b"}, {"problem": 23, "code": "(fn [s] (reduce (fn [a b] (vec (cons b a))) [] s))", "user": "542d27a0e4b0dad94371f2b3"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "543b4746e4b032a45b86932c"}, {"problem": 23, "code": "#(loop [xs %1 acc '()] (if (nil? (first xs)) acc (recur (rest xs) (conj acc (first xs)))))", "user": "5315ba94e4b08068f379ed34"}, {"problem": 23, "code": "#(into () %)", "user": "52f225bfe4b05e3f0be25ef4"}, {"problem": 23, "code": "(fn [coll] (reduce conj '() coll))", "user": "5257e13de4b0cb4875a45c99"}, {"problem": 23, "code": "reduce #(conj %1 %2) '()", "user": "53bc76fae4b047364c044511"}, {"problem": 23, "code": "(fn rev [x]\n  (reduce #(cons %2 %1) [] x)\n  )", "user": "5372c830e4b06d7f452d9dff"}, {"problem": 23, "code": "reduce conj '()", "user": "543d07e8e4b032a45b869346"}, {"problem": 23, "code": "(partial reduce conj ())", "user": "544125ade4b032a45b86936a"}, {"problem": 23, "code": "(fn [x] (reduce conj '() x))", "user": "5441f5e8e4b032a45b869375"}, {"problem": 23, "code": "reduce conj (list)", "user": "53751c5ee4b06839e8705e11"}, {"problem": 23, "code": "(fn [coll] (reduce #(conj % %2)'() coll))", "user": "543c5200e4b032a45b86933e"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5441fb2ce4b032a45b869376"}, {"problem": 23, "code": "into ()", "user": "5335cab9e4b0e30313ee6c70"}, {"problem": 23, "code": "(fn [l]\n  (let [-rev (fn rev [l acc]\n                     (if (= l '()) acc\n                     (rev (rest l) (cons (first l) acc))))]\n    (-rev l '())))", "user": "54431b6ee4b032a45b869385"}, {"problem": 23, "code": "reduce conj ()", "user": "52a45a7be4b0c58976d9abd8"}, {"problem": 23, "code": "(fn [xs]\n  (loop [acc '() xs xs]\n    (if (empty? xs)\n      acc\n      (recur (conj acc (first xs)) (rest xs)))))", "user": "53dfe311e4b0d874e779ae47"}, {"problem": 23, "code": "#(into '() %)", "user": "544317c8e4b032a45b869384"}, {"problem": 23, "code": "into ()", "user": "5443a894e4b032a45b869388"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "50666699e4b03d366d7cb2b0"}, {"problem": 23, "code": "reduce #(cons %2 %1) nil", "user": "5443cb97e4b032a45b86938a"}, {"problem": 23, "code": "#(reduce conj (list) %)", "user": "4f1ef6a0535d64f60314649b"}, {"problem": 23, "code": "#(reduce (fn [xs x] (conj xs x)) '() %)", "user": "54448e84e4b032a45b869393"}, {"problem": 23, "code": "#(let [c (seq %)]\n   (for [x (-> c count range)]\n     (nth c (- (count c) (inc x)))))", "user": "54055aa9e4b0addc1aec6665"}, {"problem": 23, "code": "into ()", "user": "5444f97ee4b032a45b869395"}, {"problem": 23, "code": "reduce conj ()", "user": "54453f83e4b032a45b86939a"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "54413696e4b032a45b86936b"}, {"problem": 23, "code": "reduce conj ()", "user": "5420c6e4e4b01498b1a71aaa"}, {"problem": 23, "code": "into ()", "user": "542ad43be4b01498b1a71b4e"}, {"problem": 23, "code": "#(into '() %)", "user": "540e33dde4b0addc1aec671a"}, {"problem": 23, "code": "#(reduce (fn[x y] (conj x y)) '() %)", "user": "544623f3e4b032a45b8693a9"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "543a84a1e4b032a45b869328"}, {"problem": 23, "code": "(fn [myseq]\n   (loop [revseq '(), theseq myseq]\n     (if (not (empty? theseq))\n       (recur (concat revseq (take-last 1 theseq)) (take (- (count theseq) 1) theseq))\n       revseq\n       )\n     )\n   )", "user": "53f3b216e4b0742d9025b0f8"}, {"problem": 23, "code": "(fn [x] (replace (vec x) (range (- (count x) 1) -1 -1)))", "user": "54461393e4b032a45b8693a5"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "54468ebfe4b032a45b8693b1"}, {"problem": 23, "code": "(fn bla [n]  (if (empty? n)\n                []\n                (conj (bla (rest n)) (first n) )) )", "user": "54458995e4b032a45b86939e"}, {"problem": 23, "code": "(fn [s] (loop [s s acc ()] (if (seq s) (recur (rest s) (cons (first s) acc)) acc)))", "user": "5446c89ce4b032a45b8693b5"}, {"problem": 23, "code": "#(map last (sort-by first > (map-indexed vector %)))", "user": "5446ebc2e4b032a45b8693b8"}, {"problem": 23, "code": "reduce conj ()", "user": "54464734e4b032a45b8693ab"}, {"problem": 23, "code": "(fn [xs]\n  (reduce (fn [acc y]\n            (concat [y] acc))\n            [] xs))", "user": "504e0fdfe4b078edc5f593ae"}, {"problem": 23, "code": "(partial reduce #(cons %2 %1) '())", "user": "5447e08ce4b032a45b8693c3"}, {"problem": 23, "code": "#(reduce (fn [list n] (conj list n)) '() %)", "user": "5448616be4b032a45b8693c9"}, {"problem": 23, "code": "(fn [x] (let [c (if (set? x) (apply list x) x)] (loop [l c acc (empty c)] (if (seq l) (recur (pop l) (conj acc (peek l))) acc))))", "user": "530a6cbae4b02e82168697be"}, {"problem": 23, "code": "(fn [coll]\n  (let [rev (loop [c coll \n                   accum (list)]\n              (if (empty? c)\n                accum\n                (recur (rest c) (conj accum (first c)))))]\n    (if (vector? coll)\n      (into [] rev)\n      rev)))", "user": "54487527e4b032a45b8693cc"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "54485749e4b032a45b8693c7"}, {"problem": 23, "code": "(fn [col] \n  (reduce conj () col))", "user": "5243e37ae4b076204b44fae3"}, {"problem": 23, "code": "into ()", "user": "5448f46de4b032a45b8693cf"}, {"problem": 23, "code": "(fn [z] (reduce (fn [x y] (cons y x)) [] z))", "user": "5233564ae4b0f0b72fabf403"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "54468fd3e4b032a45b8693b2"}, {"problem": 23, "code": "#(reduce (fn [x y] (cons y x)) [] %)", "user": "54497569e4b032a45b8693d2"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "53ea5851e4b036ad0777e4e4"}, {"problem": 23, "code": "#(into () %)", "user": "5425bde6e4b01498b1a71b10"}, {"problem": 23, "code": "#(for [i (range (count %))] (nth (seq %) (- (count %) i 1)))", "user": "543ead45e4b032a45b869356"}, {"problem": 23, "code": "reduce conj ()", "user": "544ac9b5e4b0e39780006959"}, {"problem": 23, "code": "(fn [x] \n    (reduce conj () x)\n  )", "user": "544a049de4b0e39780006953"}, {"problem": 23, "code": ";(fn rev [a]\n;;  (if ((complement nil?) (rest a))\n;  \t(cons (last a) (rev (rest a)))\n;    )\n;  )\n\n#(reduce conj () %)\n\n;#(reduce cons [])", "user": "5446158ce4b032a45b8693a6"}, {"problem": 23, "code": "(fn ulta [coll] (if (= (count coll) 1) coll (concat (ulta (rest coll)) (list (first coll)) ) ))", "user": "544b9df2e4b0e39780006968"}, {"problem": 23, "code": "reduce conj '()", "user": "544a5b2fe4b0e39780006956"}, {"problem": 23, "code": "#(into () %)", "user": "544c1b05e4b0e3978000696e"}, {"problem": 23, "code": "(fn [s]\n  (reduce #(cons %2 %1)\n          ()\n          s))", "user": "544b699ce4b0e39780006964"}, {"problem": 23, "code": "(fn [lst]\n (reduce (fn [reversed nxt] (conj reversed nxt) ) '() lst)\n )", "user": "543b7456e4b032a45b86932f"}, {"problem": 23, "code": "reduce conj '()", "user": "53e3e353e4b036ad0777e406"}, {"problem": 23, "code": "#(into () %)", "user": "544ef83de4b0e3978000698d"}, {"problem": 23, "code": "into ()", "user": "544e8369e4b0e39780006987"}, {"problem": 23, "code": "#(loop [l % new-list ()]\n\t\n\t(if (empty? l)\n\t\tnew-list\n\t\t(let [x (first l)] (\n\t\t\trecur (rest l) (conj new-list x)\n\t\t))\n\t\t\n\t)\n\n)", "user": "542d95f0e4b0dad94371f2b9"}, {"problem": 23, "code": "#(into '() %)", "user": "544faecfe4b0e39780006996"}, {"problem": 23, "code": "(fn [a] (loop [arr a rev []] (if (nil? (first arr)) rev (recur (rest arr) (cons (first arr) rev)))))", "user": "544ff52fe4b0e3978000699b"}, {"problem": 23, "code": "(fn ! [l] (if (= l []) nil (concat (! (rest l)) (list (first l)) )))", "user": "52d7fff4e4b09f7907dd1383"}, {"problem": 23, "code": "(fn [x]\n      (reduce (fn [result partial]\n                (conj result partial)\n                ) '() x)\n      )", "user": "544fb010e4b0e39780006997"}, {"problem": 23, "code": "#(into '() %)", "user": "52c4789ee4b0c2d177d620dc"}, {"problem": 23, "code": "#(loop [r '() l %] (if l (recur (conj r (first l)) (next l)) r))", "user": "5450d992e4b0e397800069a5"}, {"problem": 23, "code": "(fn rev [coll] (if (seq coll) (cons (last coll) (rev (butlast coll)))))", "user": "544fbabce4b0e39780006999"}, {"problem": 23, "code": "(fn myreverse [col]\n  (loop [xs col\n         acc '()]\n    (if (empty? xs)\n      acc\n      (recur (rest xs) (conj acc (first xs))))))", "user": "544257b4e4b032a45b869379"}, {"problem": 23, "code": "reduce #(conj %1 %2) '()", "user": "542b0592e4b0dad94371f286"}, {"problem": 23, "code": "(fn [xs]\n  (loop [cur xs\n        rev []]\n    (if (empty? cur)\n      rev\n      (recur (drop-last cur) (conj rev (last cur))))))", "user": "542d5fa9e4b0dad94371f2b5"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5450c81fe4b0e397800069a4"}, {"problem": 23, "code": "(fn [coll]\n  (loop [[r & more :as all] (seq coll)\n         acc '()]\n    (if all\n      (recur more (cons r acc))\n      acc)))", "user": "5450ea1be4b0e397800069a6"}, {"problem": 23, "code": "(fn [x](reduce conj '() x))", "user": "545101afe4b0e397800069ab"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5444ec99e4b032a45b869394"}, {"problem": 23, "code": "(partial reduce conj ())", "user": "545281bce4b0e397800069c3"}, {"problem": 23, "code": "(fn rev [x] (if (empty? x) '() (cons (last x) (rev (butlast x)))))", "user": "545188ebe4b0e397800069b2"}, {"problem": 23, "code": "reduce #(conj (lazy-seq %1) %2) '()", "user": "54513516e4b0e397800069af"}, {"problem": 23, "code": "reduce conj ()", "user": "5122925ae4b068a9582e656d"}, {"problem": 23, "code": "reduce (fn [a b] (concat [b] a)) []", "user": "544cf5d7e4b0e39780006977"}, {"problem": 23, "code": "into ()", "user": "54524afbe4b0e397800069bc"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "53b7aa6ce4b047364c0444d1"}, {"problem": 23, "code": "reduce conj '()", "user": "4fe721e5e4b0e8f79898feda"}, {"problem": 23, "code": "#(into () %)", "user": "5454a7f9e4b0e397800069d8"}, {"problem": 23, "code": "(fn r [l] (if (empty? l) [] (cons (last l) (r (butlast l)))))", "user": "52e16face4b09f7907dd1421"}, {"problem": 23, "code": "#(into () %)", "user": "541f89a5e4b01498b1a71a99"}, {"problem": 23, "code": "(fn [x]\n  (loop [ret [] org x]\n    (if (empty? org) ret\n      (recur (cons (first org) ret) (rest org)))))", "user": "54381729e4b032a45b869310"}, {"problem": 23, "code": "(fn [xs]\n  ((fn rev [xs ys]\n    (if (nil? (first xs))\n      ys\n      (rev (rest xs) (conj ys (first xs))))) xs '()))", "user": "54565558e4b080a794c2c87f"}, {"problem": 23, "code": "(fn my-reverse\n  ([l]\n   (my-reverse l '()))\n  ([l1 l2]\n   (if l1\n     (recur (next l1) (conj l2 (first l1)))\n     l2)))", "user": "54570d08e4b080a794c2c888"}, {"problem": 23, "code": "#(for [x (range 1 (inc(.size (seq %))))] (.get (seq %) (- (.size (seq %)) x)))", "user": "5451eb12e4b0e397800069b8"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "545537c1e4b0e397800069dd"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5454bd9be4b0e397800069db"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5417bc50e4b01498b1a71a0f"}, {"problem": 23, "code": "#(into () %)", "user": "5457a6bfe4b01be26fd7460f"}, {"problem": 23, "code": "(fn[s](loop [s s r []] (if (empty? s) r (recur (rest s) (cons (first s) r)))))", "user": "5457e5f1e4b01be26fd74613"}, {"problem": 23, "code": "#(into () %)", "user": "51ba60a8e4b0fe3ecfb4642e"}, {"problem": 23, "code": "(fn [v] (loop [r [] x v]\n      (if (first x)\n        (do\n          (recur (cons (first x) r) (rest x)))\n        r)))", "user": "52d84ea7e4b09f7907dd1390"}, {"problem": 23, "code": "(fn rev [a] (if (empty? a)\n               []\n               (conj (rev (rest a)) (first a))\n               ))", "user": "5457767ae4b01be26fd7460c"}, {"problem": 23, "code": "(fn [c]\n  (loop [xc c, acc '()]\n    (if xc\n      (recur (next xc) (conj acc (first xc)))\n      acc)))", "user": "5458c74de4b01be26fd74623"}, {"problem": 23, "code": "(fn [coll]\n    (loop [rest-coll coll\n           r-coll []]\n      (if (empty? rest-coll)\n        r-coll\n        (recur (rest rest-coll) (cons (first rest-coll) r-coll)))\n      )\n  )", "user": "5457e502e4b01be26fd74612"}, {"problem": 23, "code": "(fn rev [se]\n  (if (= (count se) 1) se\n    (conj (rev (butlast se)) (last se))\n  )\n)", "user": "545944a2e4b01be26fd74627"}, {"problem": 23, "code": "#(into '() %1)", "user": "54580586e4b01be26fd74616"}, {"problem": 23, "code": "#(loop [s % rs nil]\n   (if-not (empty? s)\n     (recur (rest s) (conj rs (first s)))\n     rs))", "user": "5453b522e4b0e397800069d0"}, {"problem": 23, "code": "(fn [x] (into [] (for [y (range (count x))\n          :let [z (nth (vec x) (- (count x) (+ y 1)))]]\n               z)))", "user": "53baa9c0e4b047364c0444fa"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "54524dbbe4b0e397800069bd"}, {"problem": 23, "code": "reduce #(cons %2 %) '()", "user": "5455c2f3e4b080a794c2c87d"}, {"problem": 23, "code": "(fn [x]\n  (loop [a x\n         b '()]\n    (if (empty? a)\n      b\n      (let [b (conj b (first a))\n            a (rest a)]\n        (recur a b)))))", "user": "5459f13be4b01be26fd74631"}, {"problem": 23, "code": "(fn [seq] (reduce conj '() seq))", "user": "54570c87e4b080a794c2c887"}, {"problem": 23, "code": "(fn [s]\n  (loop [i (count s) l []]\n  \t(if (= i 0)\n      \tl\n\t\t(recur\n        \t(dec i)\n         \t(conj l (get (into [] s) (dec i))))))\n)", "user": "53a68c5ae4b0ef122a8689c8"}, {"problem": 23, "code": "#(into '() %)", "user": "54512df2e4b0e397800069ae"}, {"problem": 23, "code": "#(reduce (fn [ac x] (conj ac x)) () %)", "user": "54595168e4b01be26fd74628"}, {"problem": 23, "code": "(fn [l] (reduce (fn [newb item] (conj newb item)) '() l))", "user": "545b0275e4b01be26fd74648"}, {"problem": 23, "code": "reduce (fn[acc next] (conj  acc next)) '()", "user": "52149e21e4b0961f15ac4d94"}, {"problem": 23, "code": "(fn r [xs] (if (empty? xs) [] (conj (r (rest xs)) (first xs))))", "user": "545baec3e4b01be26fd74655"}, {"problem": 23, "code": "#(into () %)", "user": "545b77f5e4b01be26fd74653"}, {"problem": 23, "code": "(fn rev \n  ([s]\n   (rev s nil))\n  ([s acc]\n   (if (empty? s)\n     acc\n     (recur (rest s) (cons (first s) acc)))))", "user": "545a52bfe4b01be26fd74638"}, {"problem": 23, "code": "into()", "user": "5367f0a7e4b0243289761e88"}, {"problem": 23, "code": "reduce #(cons %2 %1) []", "user": "545bdf75e4b01be26fd7465b"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "544a8fbbe4b0e39780006957"}, {"problem": 23, "code": "(fn [col]\n  (reduce conj () col))", "user": "5433eecae4b0b6b47310fce6"}, {"problem": 23, "code": "(fn rev\n  [s]\n  (if (empty? s)\n    nil\n    (concat (rev (rest s)) (list (first s)))))", "user": "545801f6e4b01be26fd74615"}, {"problem": 23, "code": "#(loop [fwd % rvs '()] (if-not (first fwd) rvs (recur (next fwd) (conj rvs (first fwd)))))", "user": "545da759e4b01be26fd74672"}, {"problem": 23, "code": "#(reduce (fn [reversed el] (cons el reversed)) [] %)", "user": "5454b84ce4b0e397800069d9"}, {"problem": 23, "code": "(fn my-reverse [coll]\n  (if (empty? coll)\n    '()\n    (conj (vec (my-reverse (rest coll))) (first coll))))", "user": "545d881de4b01be26fd7466f"}, {"problem": 23, "code": "(fn [s] (reduce conj () s))", "user": "51ef7c49e4b0871fa145d9a6"}, {"problem": 23, "code": "#(reduce conj '() %1)", "user": "545ddb57e4b01be26fd74677"}, {"problem": 23, "code": "(fn rev\n  [s]\n  (reduce (fn [r e] (cons e r)) (empty s) s))", "user": "5455a6d3e4b0e397800069e2"}, {"problem": 23, "code": "(fn rev\n   ([s] (rev s '()))\n   ([s l]\n   (if (empty? s)\n     l\n     (rev (rest s) (conj l (first s))))))", "user": "545e9cf1e4b01be26fd7467f"}, {"problem": 23, "code": "(fn [x] (reduce (fn [a b] (conj a b)) '() x))", "user": "545ef0a5e4b01be26fd74684"}, {"problem": 23, "code": "reduce conj '()", "user": "545eb56be4b01be26fd74682"}, {"problem": 23, "code": "#(loop [accum []\n        remaining %]\n     (if (seq remaining)\n       (recur \n        (cons (first remaining) accum)\n        (rest remaining))\n       accum))", "user": "53b14289e4b047364c04448b"}, {"problem": 23, "code": "(fn [coll] \n  (let [reverse-sequence (fn [from to]\n                           (if (empty? from) \n                             to\n                             (recur (rest from) (conj to (first from)))))\n        ]\n    (reverse-sequence coll '())))", "user": "545f737ce4b01be26fd74688"}, {"problem": 23, "code": "(fn ! [a] (if (= [] a) [] (cons (peek (vec a)) (!  (pop (vec a)) ))))", "user": "545d5c3be4b01be26fd7466d"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5460061be4b01be26fd7468d"}, {"problem": 23, "code": "(fn rev [a]\n  (loop [xs a\n         r '()]\n    (if (empty? xs)\n      r\n      (recur (rest xs) (conj r (first xs)))\n    )\n  )\n)", "user": "545cfbb0e4b01be26fd74669"}, {"problem": 23, "code": "into ()", "user": "53572176e4b04ce2eb3ed276"}, {"problem": 23, "code": "(fn rev [x] (if (empty? x) () (cons (last x) (rev (butlast x)))))", "user": "544e1794e4b0e39780006980"}, {"problem": 23, "code": "into ()", "user": "545db6e3e4b01be26fd74675"}, {"problem": 23, "code": "(fn rever [x]\n  (if (= x [])\n    []\n    (conj (rever (rest x)) (first x) )\n    )\n  )", "user": "546146d6e4b01be26fd7469c"}, {"problem": 23, "code": "(fn [coll]\n  (loop [body coll\n         result []]\n    (if (empty? body)\n       result\n       (recur (butlast body) (conj result (last body))))))", "user": "5460612be4b01be26fd74691"}, {"problem": 23, "code": "(fn [xs]\n  (loop [ys xs result []]\n    (if (empty? ys)\n      result\n      (recur (rest ys) (cons (first ys) result)))))", "user": "546176e7e4b01be26fd746a2"}, {"problem": 23, "code": "(fn [orig] (loop [input orig, output []] (if (empty? input) output (recur (rest input) (concat (list (first input)) output)))))", "user": "5460832ce4b01be26fd74693"}, {"problem": 23, "code": "#(reduce (fn [lst item] (concat [item] lst)) [] %)", "user": "5461a711e4b01be26fd746a4"}, {"problem": 23, "code": "(fn [s]\n  (loop [ls s\n         acc '()]\n    (if (empty? ls)\n      acc\n      (recur (rest ls)\n        \t (conj acc (first ls))))))", "user": "5461c402e4b01be26fd746a6"}, {"problem": 23, "code": "(fn [xs] (reduce #(conj % %2) '() xs))", "user": "535774c2e4b04ce2eb3ed27c"}, {"problem": 23, "code": "(fn tester\n  [coll]\n  (#(reduce (fn foo [lst item] (concat [item] lst)) '() coll)))", "user": "546113ffe4b01be26fd74699"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "545f7b09e4b01be26fd74689"}, {"problem": 23, "code": "#(take (count %) (reduce (fn [x y] (cons y x)) %  %))", "user": "546280d8e4b01be26fd746b0"}, {"problem": 23, "code": "(partial reduce #(conj %1 %2) '())", "user": "5460eadde4b01be26fd74694"}, {"problem": 23, "code": "(fn [coll] (reduce conj '() coll))", "user": "5462caf5e4b01be26fd746b7"}, {"problem": 23, "code": "(fn [coll] (into () coll))", "user": "5462dc5ae4b01be26fd746b9"}, {"problem": 23, "code": "#(loop [x % y []]\n   ( if (empty? x)\n     y\n     (recur (next x) (cons (first x) y))))", "user": "54630e6be4b01be26fd746bc"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "54638c8fe4b01be26fd746c2"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "545bbaa4e4b01be26fd74656"}, {"problem": 23, "code": "reduce conj '()", "user": "545c7068e4b01be26fd7465d"}, {"problem": 23, "code": "(fn [coll] (reduce conj '() coll))", "user": "54650bbae4b01be26fd746d3"}, {"problem": 23, "code": "#(vec (reduce conj '() %))", "user": "54651ef5e4b01be26fd746d5"}, {"problem": 23, "code": "(fn [x]\n\t((fn rvs-c [x2 cnt]\n       (if (= cnt (dec (count x2))) x2\n         (rvs-c (vec (concat (subvec x2 0 cnt) (vector (last x2)) (subvec (pop x2) cnt (count (pop x2)))))\n                         (inc cnt))))\n            (vec x) 0))", "user": "54651faee4b01be26fd746d6"}, {"problem": 23, "code": "(partial reduce conj '())", "user": "54651982e4b01be26fd746d4"}, {"problem": 23, "code": "#(into () %)", "user": "5464a536e4b01be26fd746cf"}, {"problem": 23, "code": "(fn [coll]\n  (loop [vals (seq coll)  result (list)]\n    (if vals\n      (recur (next vals) (cons (first vals) result))\n      result)))", "user": "532f7e12e4b019098a6f8b4e"}, {"problem": 23, "code": "#(into [] (reduce conj '() %))", "user": "5465712ee4b01be26fd746dc"}, {"problem": 23, "code": "(fn esrever [s]\n  (loop [s s out []]\n    (if (empty? s)\n        out\n        (recur (rest s) (cons (first s) out)))))", "user": "54653e3be4b01be26fd746da"}, {"problem": 23, "code": "(fn rev\n  [s] (if (seq s) (conj (rev (rest s)) (first s)) [] ))", "user": "534b57bbe4b084c2834f4a78"}, {"problem": 23, "code": "reduce conj '()", "user": "545e7ab0e4b01be26fd7467c"}, {"problem": 23, "code": "(fn r \n  [col]\n  (if (empty? (rest col))\n    [(first col)]\n    (concat (r (rest col)) [(first col)])))", "user": "5462ce20e4b01be26fd746b8"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5461873de4b01be26fd746a3"}, {"problem": 23, "code": "(fn [xs]\n  (loop [xs\t\txs\n         rev\t[]]\n    (if (empty? xs)\n      rev\n      (recur (rest xs) (concat [(first xs)] rev)))))", "user": "5468033ee4b00cfc9eacc133"}, {"problem": 23, "code": "(fn [xs]\n    (let [reverse-iter \n          (fn [xs acc] (if (seq xs) \n                         (recur (rest xs) (conj acc (first xs)))\n                         acc))]\n      (reverse-iter xs '())))", "user": "53a6e646e4b0ef122a8689cd"}, {"problem": 23, "code": "reduce conj ()", "user": "54588070e4b01be26fd74620"}, {"problem": 23, "code": "reduce #(cons %2 %) []", "user": "5468a110e4b00cfc9eacc13d"}, {"problem": 23, "code": "(fn reverse2 [c] \n   (if (empty? c) [] (concat [(last c)] (reverse2 (drop-last c)))))", "user": "5467f222e4b00cfc9eacc132"}, {"problem": 23, "code": "(fn \n    [collection]\n    (loop [i collection\n           result []]\n      (if (empty? i)\n        result\n        (recur (drop-last i)\n               (conj result (last i)))\n      )))", "user": "54391a55e4b032a45b869319"}, {"problem": 23, "code": "#(loop [remaining % result '()]\n   (if (empty? remaining)\n     result\n     (recur (rest remaining) (conj result (first remaining)))\n   )\n )", "user": "54635083e4b01be26fd746bd"}, {"problem": 23, "code": "(fn [coll] (reduce #(conj %1 %2) '() coll))", "user": "5468d932e4b00cfc9eacc13e"}, {"problem": 23, "code": "into ()", "user": "53483a32e4b084c2834f4a57"}, {"problem": 23, "code": "#(into () %)", "user": "54665910e4b01be26fd746e5"}, {"problem": 23, "code": "#(reduce (fn [x y] (conj x y)) '() %)", "user": "5462c5abe4b01be26fd746b5"}, {"problem": 23, "code": "into ()", "user": "54677c3de4b01be26fd746ec"}, {"problem": 23, "code": "#(into () %)", "user": "52bca504e4b07a9af57922f9"}, {"problem": 23, "code": "(fn [coll]\n  (loop [coll coll\n         reverse-coll '()]\n    (if (empty? coll)\n      reverse-coll\n      (recur (rest coll) \n             (conj reverse-coll (first coll))))))", "user": "54508859e4b0e397800069a3"}, {"problem": 23, "code": "(fn rvrse [lst]\n  (if (= lst '())\n    '()\n    (concat (rvrse (rest lst))\n            (list (first lst)))))", "user": "54696109e4b00cfc9eacc146"}, {"problem": 23, "code": "(fn rev\n  [coll]\n  (let [n (- (count coll) 1)]\n    (if-not (empty? coll)\n      (cons (first (drop n coll)) (rev (take n coll))))))", "user": "53342e21e4b019098a6f8b8c"}, {"problem": 23, "code": "(fn r [s]\n  (let [s (seq s)\n        h (first s)\n        t (rest s)]\n    (if (empty? s)\n      s\n      (concat (r t) [h]))))", "user": "545bd22fe4b01be26fd7465a"}, {"problem": 23, "code": "#(into () %)", "user": "54684c3be4b00cfc9eacc139"}, {"problem": 23, "code": "into ()", "user": "54485727e4b032a45b8693c6"}, {"problem": 23, "code": "#(reduce (fn [x y] (conj x y)) '() %)", "user": "546a6dbbe4b00cfc9eacc156"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "546a6c7ce4b00cfc9eacc154"}, {"problem": 23, "code": "#(into () %)", "user": "546a52f3e4b00cfc9eacc151"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5458a729e4b01be26fd74622"}, {"problem": 23, "code": "#(reduce (fn [x y] (conj x y)) '() %)", "user": "54696e4ce4b00cfc9eacc147"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "544e9022e4b0e3978000698b"}, {"problem": 23, "code": "reduce conj ()", "user": "543bb568e4b032a45b869334"}, {"problem": 23, "code": "reduce #(cons %2 %) []", "user": "5465febde4b01be26fd746e1"}, {"problem": 23, "code": "reduce #(if (list? %1) (conj %1 %2) (conj '() %1 %2))", "user": "4f9dd376e4b0dcca54ed6d27"}, {"problem": 23, "code": "(fn [a] (into () a))", "user": "545b9dd9e4b01be26fd74654"}, {"problem": 23, "code": "reduce conj '()", "user": "5400e918e4b0de5c41848619"}, {"problem": 23, "code": "(fn [coll] (for [i (range (- (count coll) 1) -1 -1)] ((vec coll) i)))", "user": "52e12ac5e4b09f7907dd141a"}, {"problem": 23, "code": "#(for [i (range (dec (count %)) -1 -1)]\n   (nth (vec %) i)\n   )", "user": "546c1b2ce4b00cfc9eacc174"}, {"problem": 23, "code": "reduce (fn [x y] (cons y x)) ()", "user": "546af00de4b00cfc9eacc163"}, {"problem": 23, "code": "(fn my-reverse\n  ([lst] (if (or (= (count lst) 0)\n                 (= (count lst) 1))\n           lst\n           (my-reverse (rest lst) (fn [] (cons (first lst) nil)))))\n  ([[head & tail] cont]\n     (if (empty? tail)\n       (cons head (cont))\n       (recur tail (fn [] (cons head (cont)))))))", "user": "546c1f73e4b00cfc9eacc175"}, {"problem": 23, "code": "(fn [coll]\n  (reduce\n   (fn [acc curr]\n     (cons curr acc))\n   '()\n   coll))", "user": "5456e4e7e4b080a794c2c883"}, {"problem": 23, "code": "into ()", "user": "544c5c99e4b0e39780006971"}, {"problem": 23, "code": "into ()", "user": "53bd6049e4b0d9a98559a6cd"}, {"problem": 23, "code": "(fn foo [x] (reduce conj '() x))", "user": "4e70202a535d5021c1a89630"}, {"problem": 23, "code": "#(replace (into [] %) (range (- (count %) 1) -1 -1))", "user": "52540bcce4b0541d1855b952"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "53da059be4b0e771c302547e"}, {"problem": 23, "code": "#(loop [from % to (empty from)] (if (empty? from) to (recur (rest from) (concat [(first from)] to))))", "user": "546dd4f6e4b00cfc9eacc194"}, {"problem": 23, "code": "#(let [x (into () %)]\n   (if (vector? %) (vec x) x))", "user": "542a348be4b01498b1a71b3f"}, {"problem": 23, "code": "(fn [ls] (into () ls))", "user": "546d41bde4b00cfc9eacc18c"}, {"problem": 23, "code": "(fn [coll]\n  (loop [coll  coll\n         rcoll ()]\n    (if (seq coll)\n      (recur (rest coll) (cons (first coll) rcoll))\n      rcoll)))", "user": "546ed28be4b00cfc9eacc1a5"}, {"problem": 23, "code": "(fn [coll]\n  (loop [coll coll\n         result '()]\n    (if (empty? coll)\n      result\n      (recur (rest coll) (conj result (first coll))))))", "user": "546c4c5fe4b00cfc9eacc178"}, {"problem": 23, "code": "into ()", "user": "546e0c24e4b00cfc9eacc198"}, {"problem": 23, "code": "reduce (fn [a i] (conj a i)) nil", "user": "546b65a2e4b00cfc9eacc169"}, {"problem": 23, "code": "#(reduce conj '() (seq %))", "user": "546f926fe4b00cfc9eacc1af"}, {"problem": 23, "code": "#(into () %)", "user": "54630cdae4b01be26fd746bb"}, {"problem": 23, "code": "(fn rev [v] \n  (if (empty? v)\n    [] \n    (conj (rev (rest v)) (first v))))", "user": "53161a56e4b08068f379ed3e"}, {"problem": 23, "code": "(fn ! [list] (if (= list ()) () (concat (! (rest list)) (take 1 list))))", "user": "546fa7a7e4b00cfc9eacc1b1"}, {"problem": 23, "code": "(fn [data] (reduce (fn [x y] (conj x y)) '() data))", "user": "5470b955e4b00cfc9eacc1bc"}, {"problem": 23, "code": "(fn f [s] (into () s))", "user": "52df9e8de4b09f7907dd1403"}, {"problem": 23, "code": "#(loop [ret [] tmp %] (if (empty? tmp) ret (recur (cons (first tmp) ret) (rest tmp))))", "user": "546ef9f8e4b00cfc9eacc1a6"}, {"problem": 23, "code": "#(reduce\n   (fn [x y]\n     (conj x y)) '() %)", "user": "54708efce4b00cfc9eacc1b9"}, {"problem": 23, "code": "reduce conj ()", "user": "5458474ce4b01be26fd7461b"}, {"problem": 23, "code": "(fn [x] (loop [lis x ret '()] \n          (if (empty? lis) ret (recur (rest lis) (cons (first lis) ret)))))", "user": "52457931e4b08ba239308107"}, {"problem": 23, "code": "#(reduce conj `() %)", "user": "5470b3d0e4b00cfc9eacc1bb"}, {"problem": 23, "code": "(fn my-reverse [col]\n  (loop [result '()\n         tcol col]\n    (if (empty? tcol)\n      result\n      (recur (conj result (first tcol)) (rest tcol)))))", "user": "54713dc8e4b094393f72dd69"}, {"problem": 23, "code": "#(into () %)", "user": "54725331e4b094393f72dd76"}, {"problem": 23, "code": ";#(into () %)\n#(reduce conj '() %)", "user": "5471268ae4b094393f72dd68"}, {"problem": 23, "code": "(fn[coll]\n  (loop [in coll out '()]\n    (cond (empty? in) out\n          :else (recur (rest in) (cons (first in) out)))))", "user": "5472cba1e4b094393f72dd7a"}, {"problem": 23, "code": "(fn [x] (loop [s x acc '()] \n            (if (nil? (first s))\n              acc \n              (recur (rest s) (conj acc (first s)))\n              )\n            )\n  )", "user": "5471f2fbe4b094393f72dd70"}, {"problem": 23, "code": "(fn [x] (map #((apply vector x) %) (range (- (count x) 1) -1 -1)))", "user": "546e4ab8e4b00cfc9eacc19c"}, {"problem": 23, "code": "#(reduce (fn [r a] (conj r a)) '() %)", "user": "5470699ae4b00cfc9eacc1b6"}, {"problem": 23, "code": "reduce\n  (fn [acc fst]\n    (cons fst acc))\n  []", "user": "547365d4e4b0c51c1f4d727d"}, {"problem": 23, "code": "(fn [coll] \n  (reduce #(cons %2 %1) (empty coll) coll))", "user": "54734a0de4b0c51c1f4d727b"}, {"problem": 23, "code": "into ()", "user": "5474897ce4b0c51c1f4d728a"}, {"problem": 23, "code": "(fn [s] (reduce conj '() s))", "user": "5474df6ee4b0c51c1f4d7290"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5474df19e4b0c51c1f4d728d"}, {"problem": 23, "code": "(fn f [ls]\n  (if (empty? ls)\n    ()\n    (conj (vec (f (rest ls))) (first ls))))", "user": "547584d9e4b0c51c1f4d729b"}, {"problem": 23, "code": "into ()", "user": "535c2d21e4b04ce2eb3ed2b2"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5466aabbe4b01be26fd746e8"}, {"problem": 23, "code": "(fn [x]\n  (loop [in x out (empty x)]\n    (if (empty? in)\n      out\n      (recur (rest in) (cons (first in) out)))))", "user": "54764a8fe4b0c51c1f4d72a3"}, {"problem": 23, "code": "(fn [list] \n  ((fn [original new] \n     (if (empty? original) \n     \tnew \n       \t(recur \n       \t\t(rest original) \n         \t(cons (first original) new))))\n    list nil))", "user": "4dce9252535d5973398f92a3"}, {"problem": 23, "code": "into ()", "user": "54764cf1e4b0c51c1f4d72a4"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5463c452e4b01be26fd746c4"}, {"problem": 23, "code": "#(into () %)", "user": "54026d7de4b0df28a13c62cf"}, {"problem": 23, "code": "(fn [l]\n  (reduce conj '() l))", "user": "5475d755e4b0c51c1f4d72a0"}, {"problem": 23, "code": "(fn [se]\n   (loop [se se, ans (list)]\n     (let [x (first se)\n           xs (rest se)]\n       (if (empty? xs)\n         (conj ans x)\n         (recur xs (conj ans x))))))", "user": "5473efc3e4b0c51c1f4d7285"}, {"problem": 23, "code": "reduce #(conj % %2) ()", "user": "54774ae8e4b0c51c1f4d72b0"}, {"problem": 23, "code": "#((fn myrev [remaining new]\n  (if (= '() remaining)\n    new\n    (myrev (rest remaining) (conj new (first remaining)))))\n  (lazy-seq %) '())", "user": "54775b13e4b0c51c1f4d72b2"}, {"problem": 23, "code": "#(loop [col % mcol (empty %)] (if (empty? col) mcol (recur (rest col) (cons (first col) mcol))))", "user": "54357066e4b0b6b47310fcfd"}, {"problem": 23, "code": "(fn rick-reverse [x] (if (empty? x) () (conj (rick-reverse (drop-last  x)) (last x))))", "user": "53703287e4b0fc7073fd6e8f"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "51d46747e4b013d740b70de3"}, {"problem": 23, "code": "(fn rev [lst] (\n  if (empty? lst)\n  lst\n  (concat (rev (rest lst)) (list (first lst)))\n  )\n)", "user": "5471f090e4b094393f72dd6e"}, {"problem": 23, "code": "(fn my-reverse [list] \n  (if (empty? list)\n    '()\n    (cons (last list) (my-reverse (butlast list)))))", "user": "547884d7e4b0c51c1f4d72bd"}, {"problem": 23, "code": "into ()", "user": "54658beee4b01be26fd746df"}, {"problem": 23, "code": "(fn [c] (reduce #(conj %1 %2) '() c))", "user": "5478c4fee4b0c51c1f4d72c0"}, {"problem": 23, "code": "reduce conj '()", "user": "5470cb10e4b094393f72dd65"}, {"problem": 23, "code": "(fn [coll]\n  (loop [x coll\n         ans (list)]\n    (if (seq x)\n      (recur (rest x) (conj ans (first x)))\n      ans)))", "user": "5479c58de4b0c51c1f4d72c7"}, {"problem": 23, "code": "#(reduce \n  (fn [x y] (conj x y)) \n  '() \n  (seq %))", "user": "5463fbbde4b01be26fd746ca"}, {"problem": 23, "code": "(fn [ss] (loop [n () s ss] (if (empty? s) n (recur (conj n (first s)) (rest s)))))", "user": "5466199ce4b01be26fd746e2"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5472d919e4b094393f72dd7b"}, {"problem": 23, "code": "#(reduce (fn [accum value]\n           (cons value accum)) '() %1)", "user": "538f89bbe4b0b51d73faae8f"}, {"problem": 23, "code": "(fn [xs] (loop [xs xs\n                acc '()]\n           (if (empty? xs)\n             acc\n             (recur (rest xs) (cons (first xs) acc)))))", "user": "547ad587e4b0c51c1f4d72ce"}, {"problem": 23, "code": "#(into () %)", "user": "5477056de4b0c51c1f4d72ac"}, {"problem": 23, "code": "(fn recursive-reverse [coll]\n  (loop [coll coll\n         acc  (empty coll)]\n        (if (empty? coll)\n            acc\n            (recur (rest coll) (cons (first coll) acc)))))", "user": "547a714ae4b0c51c1f4d72cc"}, {"problem": 23, "code": "(fn [seqs]\n  (loop [[x & remain :as all] (seq seqs)\n         result '()\n         ]    \n    (if (empty? all)\n      result\n      (recur remain (cons x result))\n      )\n    )\n  )", "user": "547adcb0e4b0c51c1f4d72cf"}, {"problem": 23, "code": "(fn [xs] (let [rev (fn [xs r] (if (= xs ()) r (recur (rest xs) (conj r (first xs)))))]\n           (rev xs ())))", "user": "547c0c26e4b0c51c1f4d72e2"}, {"problem": 23, "code": "(fn f [xs] (if (empty? (rest xs)) [(first xs)] (conj (f (rest xs)) (first xs))))", "user": "5478e57de4b0c51c1f4d72c1"}, {"problem": 23, "code": "(fn rev [l] \n  (if (empty? l)\n    []\n  (conj (rev (rest l)) (first l) ))\n  )", "user": "542a7c9be4b01498b1a71b41"}, {"problem": 23, "code": "(fn reverse-container [container]\n  (loop [current-container container\n         reversed-container '()]\n    (if (= 0 (count current-container))\n      reversed-container\n      (recur (rest current-container) (conj reversed-container (first current-container))))))", "user": "5464dd11e4b01be26fd746d2"}, {"problem": 23, "code": "(fn [s](loop [out '() remaining s] (if (= (count remaining) 0) out (recur (conj out (first remaining)) (rest remaining)))))", "user": "54750ca3e4b0c51c1f4d7294"}, {"problem": 23, "code": "(fn my-reverse [a]\n   (let [left (butlast a)\n         last (last a)]\n\n     (if (< (count a) 2)\n       a\n       (into [last] (my-reverse left)))))", "user": "547cd90ee4b0c51c1f4d72ec"}, {"problem": 23, "code": "#(reduce conj '() %1)", "user": "54411506e4b032a45b869369"}, {"problem": 23, "code": "(fn hrev\n  ([s] (hrev s (count s)))\n  ([s n]\n   (loop [reversed-list (take 1 s) old-list (rest s)]\n     (if (= 0 (count old-list))\n       reversed-list\n       (recur (cons (first old-list) reversed-list) (rest old-list))\n     )\n   )\n  )\n)", "user": "547dc4c7e4b0c51c1f4d72f8"}, {"problem": 23, "code": "#(into '() %)", "user": "547d4f41e4b0c51c1f4d72f0"}, {"problem": 23, "code": "(fn [col]\n    (let [creverse-acc \n          (fn [remaining acc] \n            (if (empty? remaining)\n              acc\n              (recur (rest remaining) \n                            (cons (first remaining) acc))))]\n      (creverse-acc  col '())))", "user": "547c2c6ce4b0c51c1f4d72e3"}, {"problem": 23, "code": "(fn [seqce]\n  (loop [ilist seqce\n         olist []]\n    (if (empty? ilist)\n      olist\n      (recur (rest ilist) (cons (first ilist) olist)))))", "user": "547e64dee4b0c51c1f4d7309"}, {"problem": 23, "code": "#(reduce (fn [acc e] (cons e acc)) (empty %) %)", "user": "547d8e93e4b0c51c1f4d72f4"}, {"problem": 23, "code": "#(into '() %)", "user": "547d66a1e4b0c51c1f4d72f2"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "547e5efbe4b0c51c1f4d7306"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "53c83f94e4b00fb29b2212af"}, {"problem": 23, "code": "#(into ()%)", "user": "542dc7c7e4b0dad94371f2bd"}, {"problem": 23, "code": "(fn this\n  ([col] (this col []))\n  ([col rcol]\n  \t(if (empty? col)\n      rcol\n      (recur (butlast col) (conj rcol (last col))))))", "user": "547f8e71e4b0c51c1f4d731f"}, {"problem": 23, "code": "#(reduce (fn [acc x] (cons x acc)) '() %)", "user": "547fbe01e4b0c51c1f4d7321"}, {"problem": 23, "code": "(fn [x] (reduce conj '() x))", "user": "54801febe4b0c51c1f4d733c"}, {"problem": 23, "code": "(fn [aSeq] (reduce conj '() aSeq))", "user": "548018e3e4b0c51c1f4d7331"}, {"problem": 23, "code": "(fn [list] (reduce conj '() list))", "user": "548018cde4b0c51c1f4d7325"}, {"problem": 23, "code": "(fn [theList] (reduce conj '() theList))", "user": "548026d8e4b0e286459a1155"}, {"problem": 23, "code": "reduce\n  (fn [a b]\n    (\n     if(list? a)\n     \t(conj a b)\n     \t(list b a)\n     )\n    )", "user": "548018efe4b0c51c1f4d7335"}, {"problem": 23, "code": "reduce (fn [a b] (if(seq? a)(cons b a)(cons b [a] )))", "user": "548018dbe4b0c51c1f4d732a"}, {"problem": 23, "code": "(fn [seq] (reduce conj '() seq))", "user": "548018dce4b0c51c1f4d732c"}, {"problem": 23, "code": "(fn [coll] (reduce conj '() coll))", "user": "5475b085e4b0c51c1f4d729d"}, {"problem": 23, "code": "(\n fn [coll] (\n\tloop [result-coll '() , my-coll coll] (\n\t\tif (empty? my-coll) result-coll (\n\t\t\trecur (conj result-coll (first my-coll)) (rest my-coll)\n\t\t\t)\n        )\n )\n)", "user": "547f3434e4b0c51c1f4d7319"}, {"problem": 23, "code": "(fn [coll] (reduce conj '() coll))", "user": "5473879ce4b0c51c1f4d727e"}, {"problem": 23, "code": "#(into () %)", "user": "54802bd1e4b0e286459a1157"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "54577fefe4b01be26fd7460d"}, {"problem": 23, "code": "(fn m\n  [s]\n  (if (empty? s)\n    s\n    (cons (last s) (m (butlast s)))\n  )\n)", "user": "54410a71e4b032a45b869367"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "547ee58de4b0c51c1f4d7310"}, {"problem": 23, "code": "(fn rev [x] \n  (if (empty? x) \n    [] \n    (conj (rev \n        (rest x))\n       (first x))))", "user": "548166b3e4b0e286459a116d"}, {"problem": 23, "code": "(\n\t\tfn[x]\n \t \t(\n\t\t\tloop [y (rest x) acc (conj () (first x))]\n\t\t\t(\n\t\t\t\tif (= (count y) 0)\n      \t\t\tacc\n\t\t\t\t(recur (rest y) (conj acc (first y)))\n\t\t\t)\n\t\t)\n\t)", "user": "548018ede4b0c51c1f4d7334"}, {"problem": 23, "code": "reduce conj '()", "user": "548018e3e4b0c51c1f4d7330"}, {"problem": 23, "code": "#(into () %)", "user": "548018ffe4b0c51c1f4d7339"}, {"problem": 23, "code": "(fn backwards\n  ([coll] (backwards (list (first coll)) (rest coll)))\n  ([coll remaining] (if (seq remaining)\n                        (backwards (cons (first remaining) coll)\n                                   (rest remaining))\n                        coll)))", "user": "547f8736e4b0c51c1f4d731d"}, {"problem": 23, "code": "reduce conj '()", "user": "546b833ce4b00cfc9eacc16b"}, {"problem": 23, "code": "#(into '() %)", "user": "548204b2e4b0e286459a117a"}, {"problem": 23, "code": "(fn [l]\n  (if (seq? l)\n    (vec (reduce conj () l))\n    (reduce conj () l)))", "user": "5480e5a1e4b0e286459a1162"}, {"problem": 23, "code": "(fn myrev [x]\n  (loop [myseq x ret nil]\n    (if (nil? (first myseq))\n      ret\n      (recur (rest myseq) (cons (first myseq) ret))\n      )\n    )\n  )", "user": "53ff7ad2e4b0de5c41848601"}, {"problem": 23, "code": "(fn this [x] \n  (let [[v & more] (seq x)] \n    (if (empty? more) \n      [v]\n      (concat(this more) [v])\n    )\n  )\n)", "user": "547e48bee4b0c51c1f4d7304"}, {"problem": 23, "code": "(fn my_rev [coll]\n  ((fn rev [coll rcoll]\n  (if (= nil (first coll))\n    rcoll\n    (recur (rest coll) (cons (first coll) rcoll))))\n  coll []))", "user": "5470be32e4b00cfc9eacc1bd"}, {"problem": 23, "code": "#(into () %)", "user": "54800885e4b0c51c1f4d7323"}, {"problem": 23, "code": "into ()", "user": "548392fce4b0e286459a1191"}, {"problem": 23, "code": "into()", "user": "5480ec9ee4b0e286459a1163"}, {"problem": 23, "code": "(fn my-reverse [input]\n  (let [clean (seq input)\n        rev (fn rev [[front & rest]]\n          (if (nil? rest)\n            [front]\n            (conj (rev rest) front)))]\n    (rev clean)))", "user": "5483d59fe4b0e286459a1194"}, {"problem": 23, "code": "(fn\n   [coll]\n   (into [] (into () coll)))", "user": "5484143de4b0e286459a1197"}, {"problem": 23, "code": "reduce (fn [into-coll elem]\n         (cons elem into-coll))\n[]", "user": "54848141e4b0e286459a119e"}, {"problem": 23, "code": "#(apply conj '() %)", "user": "5471f0f3e4b094393f72dd6f"}, {"problem": 23, "code": "#(into () %)", "user": "54852ad0e4b0e286459a11a7"}, {"problem": 23, "code": "#(->> (map-indexed vector %) (sort-by first >) (map second))", "user": "54856d54e4b0e286459a11aa"}, {"problem": 23, "code": "(fn [sequ] (reduce (fn [res cur] (cons cur res)) [] sequ))", "user": "548582eee4b0e286459a11ae"}, {"problem": 23, "code": "reduce conj nil", "user": "54857e3be4b0e286459a11ad"}, {"problem": 23, "code": "into ()", "user": "548592a8e4b0e286459a11af"}, {"problem": 23, "code": "#(reduce conj '() (seq %))", "user": "5485b402e4b0e286459a11b0"}, {"problem": 23, "code": "#(into () %)", "user": "5485d2c1e4b0e286459a11b3"}, {"problem": 23, "code": "(fn [to-reduce] (reduce (fn [coll x] (conj coll x)) '() to-reduce))", "user": "547b9cdce4b0c51c1f4d72da"}, {"problem": 23, "code": "#(apply conj () %)", "user": "54864662e4b0e286459a11b8"}, {"problem": 23, "code": "(fn blah [x] (if (empty? x) '() (cons (last x) (blah (drop-last 1 x)) )))", "user": "535f9a5ce4b04ce2eb3ed2de"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "513f86dde4b00f13ea1bd88d"}, {"problem": 23, "code": "(fn myreverse [a-list]\n  (if (= a-list nil)\n    nil\n    (cons (last a-list) (myreverse (butlast a-list)))))", "user": "547e3846e4b0c51c1f4d7302"}, {"problem": 23, "code": "#(into () %)", "user": "5486adf7e4b0e286459a11be"}, {"problem": 23, "code": "(fn my-rev[x] (if (empty? x) [] (conj (my-rev (rest x)) (first x))))", "user": "548485f5e4b0e286459a119f"}, {"problem": 23, "code": "#(reduce (fn [a b] (conj a b)) '() %)", "user": "513facf5e4b00f13ea1bd892"}, {"problem": 23, "code": "(fn [iseq] (reduce (fn [i mem] (conj i mem)) () iseq))", "user": "5486e317e4b0e286459a11c0"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "547cc4e3e4b0c51c1f4d72ea"}, {"problem": 23, "code": "(fn [x] (into () x))", "user": "548114afe4b0e286459a1166"}, {"problem": 23, "code": "(fn r [s] \n\t(if (empty? s)\n\t\ts\n\t\t(concat \n\t\t\t(take-last 1 s)\n\t\t\t(r (take (- (count s) 1) s))\n\t\t)\n\n\t)\n)", "user": "54835065e4b0e286459a118c"}, {"problem": 23, "code": "(fn [xs] (reduce conj nil xs))", "user": "5488872ee4b0e286459a11d3"}, {"problem": 23, "code": "#(into '() %)", "user": "54893618e4b0e286459a11e0"}, {"problem": 23, "code": "(fn [coll]\n  (reduce (fn [col item] \n            (conj col item)) '() coll))", "user": "5489948fe4b0e286459a11e9"}, {"problem": 23, "code": "#(reduce (fn [a e] (cons e a)) [] %)", "user": "54899701e4b0e286459a11ea"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "54886e00e4b0e286459a11d1"}, {"problem": 23, "code": "(fn [x]\n  (loop [coll x out []]\n    (if (empty? coll)\n      out\n      (recur (rest coll) (cons (first coll) out)))))", "user": "5447e5b7e4b032a45b8693c4"}, {"problem": 23, "code": "(fn [x] (reduce (fn [x y] (cons y x)) '() x))", "user": "53f4c3d6e4b0db01ade6f9c5"}, {"problem": 23, "code": "#(reduce (fn [acc s] (cons s acc)) [] %)", "user": "52a803cee4b0c58976d9ac26"}, {"problem": 23, "code": "(fn [src]  \n    (loop [result '(), coll src] \n      (if (empty? coll)\n        (if (vector? src) \n          (into [] result)\n          result)\n        (recur (conj result (first coll)) (rest coll)))))", "user": "548ade6de4b0e286459a11f6"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5481e9b7e4b0e286459a1177"}, {"problem": 23, "code": "#(loop [acc '() temp-s %] \n   (if (empty? temp-s) \n     acc \n     (recur (cons (first temp-s) acc) (rest temp-s))))", "user": "5489d6ffe4b0e286459a11ee"}, {"problem": 23, "code": "reduce conj ()", "user": "548af5b5e4b0e286459a11f8"}, {"problem": 23, "code": "#(into () %)", "user": "54874116e4b0e286459a11c3"}, {"problem": 23, "code": "#(into '() %)", "user": "547e6fd2e4b0c51c1f4d730b"}, {"problem": 23, "code": "reduce (fn [a b] (cons b a)) []", "user": "5485da80e4b0e286459a11b4"}, {"problem": 23, "code": "(fn [x] (reduce #(cons %2 %1) '() x))", "user": "548a9ddce4b0e286459a11f4"}, {"problem": 23, "code": "(fn rev [list]\n  (loop [l list acc nil]\n    (if (empty? l) acc\n      \t\t(recur (rest l) (cons (first l) acc)))))", "user": "5487517ee4b0e286459a11c5"}, {"problem": 23, "code": "into ()", "user": "548c574ae4b0e286459a1207"}, {"problem": 23, "code": "#(into () %)", "user": "548b7db8e4b0e286459a11fd"}, {"problem": 23, "code": "(fn myrev [x]\n  (let [s (seq x)]\n    (if (> (count x) 1) \n        (concat (myrev (next x)) [(first x)])\n        (if (nil? x) [] s))))", "user": "4e41a04e535dc968683fc49e"}, {"problem": 23, "code": "(partial reduce conj ())", "user": "548c6673e4b0e286459a1209"}, {"problem": 23, "code": "(fn rev [xs]\n  (if (empty? xs)\n    []\n    (conj (rev (rest xs)) (first xs))))", "user": "548cd637e4b0e286459a1210"}, {"problem": 23, "code": "(fn [xs] (reduce #(conj %1 %2) '() xs) )", "user": "548cd813e4b0e286459a1211"}, {"problem": 23, "code": "(fn [x] (into '() x))", "user": "548d6b75e4b0e286459a1216"}, {"problem": 23, "code": "(fn my-reverse [l]\n    (if (<= (count l) 1)\n      l\n      (concat (my-reverse (rest l)) [(first l)])))", "user": "548c8115e4b0e286459a120c"}, {"problem": 23, "code": "into ()", "user": "54889b50e4b0e286459a11d4"}, {"problem": 23, "code": "#(into () %)", "user": "548983b9e4b0e286459a11e8"}, {"problem": 23, "code": "#(into () %)", "user": "54897284e4b0e286459a11e6"}, {"problem": 23, "code": "#(into '() %)", "user": "5485bc1be4b0e286459a11b1"}, {"problem": 23, "code": "(fn reverse-seq \n  [my-seq]\n  (loop [remaining my-seq\n         my-rev-seq []]\n    (if (seq remaining)\n      (recur (rest remaining) (cons (first remaining) my-rev-seq))\n      my-rev-seq)))", "user": "548f19a8e4b0e286459a1231"}, {"problem": 23, "code": "reduce conj ()", "user": "54543484e4b0e397800069d4"}, {"problem": 23, "code": "(fn [collection]\n  (loop [resultCollection []\n         tempCollection collection]\n    (if (empty? tempCollection)\n      resultCollection\n      (recur (cons (first tempCollection) resultCollection) \n             (rest tempCollection)))))", "user": "548f339ee4b0e286459a1233"}, {"problem": 23, "code": "(fn rl [l] \n   ((fn rev [strList reverseList]\n     (cond (= (first strList) nil)\n           (into [] reverseList) \n           :else (rev (rest strList) (conj reverseList (first strList)))\n           )\n     )  \n   l (list)))", "user": "548f3ee4e4b0e286459a1237"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "548fa2dfe4b0e286459a1240"}, {"problem": 23, "code": "#(reduce (fn [coll element] (cons element coll)) '() %)", "user": "548ff2d5e4b0b312c081ff2b"}, {"problem": 23, "code": "#(\n  loop [in %1 out '()]\n  (if (empty? in) out\n    (recur (rest in) (conj out (first in)))\n  )\n  )", "user": "54903056e4b0b312c081ff2e"}, {"problem": 23, "code": "(fn [coll]\n  (loop [old coll new []]\n    (if (= 0 (count old))\n      new\n      (recur (rest old) (cons (first old) new)))))", "user": "5280539ce4b0757a1b1713f3"}, {"problem": 23, "code": "reduce #(conj % %2) '()", "user": "548d1d82e4b0e286459a1215"}, {"problem": 23, "code": "(fn ! [work input] (if (empty? input)\n                     work\n                     (! (conj  work (first input)) (rest input))\n                     )) nil", "user": "548f7bf1e4b0e286459a123b"}, {"problem": 23, "code": "(fn [coll] (loop [a coll cur []] (if (.isEmpty a) cur (recur (drop-last a) (conj cur (last a))))))", "user": "54908cc1e4b0b312c081ff32"}, {"problem": 23, "code": "(fn [x] (map #(nth (seq x) %)\n             (map\n              #(+ (* -1 %) (-> x count dec))\n              (-> x count range))))", "user": "5483ace0e4b0e286459a1192"}, {"problem": 23, "code": "(fn [col] (reduce #(conj %1 %2) () col))", "user": "548ef1dee4b0e286459a1229"}, {"problem": 23, "code": "reduce conj '()", "user": "5481be5fe4b0e286459a1172"}, {"problem": 23, "code": "(fn rev2\n  ([sqc] (rev2 sqc []))\n  ([sqc newsqc] (if (empty? sqc) newsqc\n                   (rev2 (drop-last 1 sqc) (into newsqc (take-last 1 sqc))))))", "user": "548efcb6e4b0e286459a122a"}, {"problem": 23, "code": "#(loop [ i % acc '()]\n  (if (empty? i)\n    acc\n    (recur (rest i) (conj acc (first i)))))", "user": "54886239e4b0e286459a11d0"}, {"problem": 23, "code": "#(loop [old (if (sequential? %) % (seq %)) \n        new (empty old)] \n   (println (str old \" \" new))\n   (let [last-item (last old)]\n     (if (empty? old)\n       new\n       (recur (drop-last old) (concat new (conj (empty new) (last old)))))))", "user": "5491bebbe4b0b312c081ff3c"}, {"problem": 23, "code": "reduce (fn [a b] (conj a b)) '()", "user": "549188f6e4b0b312c081ff3a"}, {"problem": 23, "code": "#(vec (reduce (fn [reversedSequence element] (conj reversedSequence element))\n              nil\n              %))", "user": "5455510fe4b0e397800069df"}, {"problem": 23, "code": "(fn [col]\n  (reduce\n   (fn [new, x] (conj new x))\n   '()\n   col))", "user": "548f37c7e4b0e286459a1234"}, {"problem": 23, "code": "(fn rev \n  [xs]\n  (let [h (first xs) rest (rest xs)]\n    (if (not-empty rest)\n      (conj (rev rest) h)\n      (vector h))))", "user": "54926752e4b0b312c081ff44"}, {"problem": 23, "code": "(fn [s]\n         (loop\n          [revd [] s' s]\n          (if (empty? s') revd\n           (recur (cons (first s') revd) (rest s'))))\n )", "user": "548f5086e4b0e286459a1239"}, {"problem": 23, "code": "reduce conj '()", "user": "512b07f7e4b078b06821febb"}, {"problem": 23, "code": "#(reduce (fn [x y] (conj x y)) '() %1)", "user": "53768217e4b06839e8705e26"}, {"problem": 23, "code": "(fn [s] (reduce conj '() s))", "user": "54935b5be4b0b312c081ff4c"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "53bcdd41e4b0d9a98559a6c0"}, {"problem": 23, "code": "(fn rev [s] \n         \n          #_=>   (if (pos? (count s))\n          #_=>       (concat (rev (rest s)) `(~(first s)))\n          #_=>       nil))", "user": "54924f64e4b0b312c081ff42"}, {"problem": 23, "code": "(fn my-reverse [coll]\n  (if (or (= (count coll) 1)\n          (= (count coll) 0))\n    coll\n    (loop [result '()\n           remain coll]\n      (if (next remain)\n        (recur (conj result (first remain)) (next remain))\n        (conj result (first remain))))))", "user": "5493ccbbe4b0b312c081ff50"}, {"problem": 23, "code": "#(reduce (fn [i j] (conj i j)) '() %)", "user": "543cd93ce4b032a45b869342"}, {"problem": 23, "code": "(fn [x] (loop [sorted x, inverted '()] (if (empty? sorted) inverted \n                                         (recur (next sorted)\n                                                (conj inverted (first sorted))))))", "user": "5492164ee4b0b312c081ff3e"}, {"problem": 23, "code": "reduce conj '()", "user": "548d15a0e4b0e286459a1214"}, {"problem": 23, "code": "#(into () %)", "user": "548f11a0e4b0e286459a122d"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "549509f0e4b0b312c081ff5a"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "549375e4e4b0b312c081ff4e"}, {"problem": 23, "code": "(fn rev' [x] (if (zero? (count x)) nil (concat [(last x)] (rev' (butlast x)))))", "user": "54965534e4b0b312c081ff65"}, {"problem": 23, "code": "#((fn [a b]\n  \t(if (empty? a)\n      b\n      (recur (rest a) (conj b (first a)))\n    )\n  )\n % '())", "user": "54973374e4b0b312c081ff6f"}, {"problem": 23, "code": "(fn [sq]\n  (loop [re sq\n        result '()]\n    (if (= '() re)\n      result\n      (recur (rest re) (conj result (first re))))))", "user": "54973b58e4b0b312c081ff70"}, {"problem": 23, "code": "#(loop [lst nil i 0]\n    (if (nil? (nth (vec %) i nil))\n      lst\n      (recur (cons (nth (vec %) i) lst) (inc i))))", "user": "5495b2dee4b0b312c081ff5f"}, {"problem": 23, "code": "reduce #(conj % %2) '()", "user": "532f8569e4b019098a6f8b4f"}, {"problem": 23, "code": "#(\n  loop [accum '() input %]\n    (if (empty? input)\n      accum\n      (recur (conj accum (first input))\n             (rest input))))", "user": "543b12cce4b032a45b86932a"}, {"problem": 23, "code": "#(loop [li % , acc '() ]\n   (if (empty? li )\n   acc\n     (recur (rest li) (conj acc (first li) ) )\n   )\n  )", "user": "54972b0ee4b0b312c081ff6e"}, {"problem": 23, "code": "#(into () %)", "user": "54975e99e4b0b312c081ff72"}, {"problem": 23, "code": "(fn [l]\n    (loop [tail (first l)\n           body (rest l)\n           res '()]\n      (if (empty? body)\n        (cons tail res)\n        (do\n          (print body)\n        \n        (recur (first body) (rest body) (cons tail res)))\n        )\n      )\n    )", "user": "540217e1e4b0df28a13c62cb"}, {"problem": 23, "code": "#(reduce conj '() (list* %))", "user": "549831b0e4b0b312c081ff7d"}, {"problem": 23, "code": "(fn [coll]\n  (loop [[r & more :as all] (seq coll)\n         acc '()]\n    (if all\n      (recur more (cons r acc))\n      acc)))", "user": "546a9599e4b00cfc9eacc15d"}, {"problem": 23, "code": "reduce conj '()", "user": "549839f7e4b0b312c081ff7e"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5498c4cfe4b0b312c081ff85"}, {"problem": 23, "code": "#(into '() %)", "user": "54990416e4b0b312c081ff88"}, {"problem": 23, "code": "(fn\n    [items]\n    (loop [my-items items\n           reverse-items []]\n        (if (empty? my-items)\n            reverse-items\n            (recur (butlast my-items) (conj reverse-items (last my-items)))\n        )\n    )\n)", "user": "54996971e4b0b312c081ff8d"}, {"problem": 23, "code": "(fn [seqn]\n  (loop [seqn seqn res '()]\n    (if (empty? seqn)\n      res\n      (recur (rest seqn) (conj res (first seqn))))))", "user": "54961073e4b0b312c081ff62"}, {"problem": 23, "code": "#(reduce (fn [x y] (conj x y)) () %)", "user": "549a176ce4b0f3d1d8e70f69"}, {"problem": 23, "code": "(fn [x]\n  (\n   reduce conj '() x\n   )\n  )", "user": "5499e26ae4b03163384f4707"}, {"problem": 23, "code": "(fn [ss]\n  (loop [s ss r (empty s)]\n   (if (empty? s)\n    r\n    (recur (rest s) (cons (first s) r)))))", "user": "549931fbe4b0b312c081ff8a"}, {"problem": 23, "code": "(fn [s]\n (reduce #(cons %2 %1) [] s)\n)", "user": "549a999be4b0f3d1d8e70f6f"}, {"problem": 23, "code": "reduce conj nil", "user": "549c22f7e4b0f3d1d8e70f86"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5499e23de4b03163384f4706"}, {"problem": 23, "code": "into ()", "user": "549c3e0ce4b0f3d1d8e70f87"}, {"problem": 23, "code": "(fn yo [x]\n  (if (empty? x)\n    []\n    (conj (yo (rest x)) (first x))))", "user": "549c8bbde4b0f3d1d8e70f8c"}, {"problem": 23, "code": "into ()", "user": "549c953ee4b0f3d1d8e70f8e"}, {"problem": 23, "code": "#(into () %)", "user": "5493d908e4b0b312c081ff52"}, {"problem": 23, "code": "(fn [s] \n  (loop [acc () coll s ]\n    (if (seq coll)\n      (recur (cons (first coll) acc)  (rest coll))\n      acc\n      )))", "user": "508daac4e4b0f17d83ea26c0"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5492afc1e4b0b312c081ff45"}, {"problem": 23, "code": "#(into () %)", "user": "549c1713e4b0f3d1d8e70f82"}, {"problem": 23, "code": "#(into () %)", "user": "549c181ce4b0f3d1d8e70f83"}, {"problem": 23, "code": "into ()", "user": "53da1e2ce4b0e771c3025487"}, {"problem": 23, "code": "#(into () %)", "user": "538fe171e4b0b51d73faae92"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "549d7e16e4b0f3d1d8e70f96"}, {"problem": 23, "code": "#(reduce (fn [l x] (conj l x)) '() %)", "user": "549def9ce4b0f3d1d8e70f99"}, {"problem": 23, "code": "#(loop [x % total (list)]\n   (if (= x nil)\n     total\n     (recur (next x) (conj total (first x)))))", "user": "549e5e52e4b0f3d1d8e70f9e"}, {"problem": 23, "code": "#(into () %)", "user": "548018d1e4b0c51c1f4d7326"}, {"problem": 23, "code": "#(reduce (fn [c a] (conj c a)) nil %)", "user": "549ea7e0e4b0f3d1d8e70fa3"}, {"problem": 23, "code": "#(into '() %)", "user": "54769c7ae4b0c51c1f4d72a8"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "53716539e4b0fc7073fd6eb1"}, {"problem": 23, "code": "#(into () %)", "user": "549cd548e4b0f3d1d8e70f91"}, {"problem": 23, "code": "#(loop [xs % ys []] (if (empty? xs) ys (recur (rest xs) (concat [(first xs)] ys))))", "user": "549f498ae4b0f3d1d8e70fb0"}, {"problem": 23, "code": "(fn [c]\n  (loop [res '() coll c]\n    (if (empty? coll) res\n      (recur (conj res (first coll)) (rest coll)))))", "user": "549ef3c1e4b0f3d1d8e70fab"}, {"problem": 23, "code": "reduce conj ()", "user": "53053be9e4b0d8b024fd375b"}, {"problem": 23, "code": "(fn [coll] (into () coll))\n;#(into () %)\n;(fn [coll] (reduce conj '() coll))\n;#(reduce conj '() %)", "user": "5487eb1de4b0e286459a11ca"}, {"problem": 23, "code": "#(into () %)", "user": "54a0be2fe4b0f3d1d8e70fba"}, {"problem": 23, "code": "reduce #(cons %2 %1) []", "user": "549eb44fe4b0f3d1d8e70fa6"}, {"problem": 23, "code": "(fn [col] (reduce conj '() col))", "user": "54a0eab8e4b09f271ff37c47"}, {"problem": 23, "code": "#(loop[r (vec %)\n\t\t\trtn []]\n\t\t\t(if(empty? r) rtn\n\t\t\t\t(recur (pop r) (conj rtn (peek r))))\n\t)", "user": "54a11042e4b09f271ff37c49"}, {"problem": 23, "code": "(fn [coll] (loop [coll coll r []] (if (empty? coll) r (recur (rest coll) (cons (first coll) r)))))", "user": "5374721be4b06d7f452d9e22"}, {"problem": 23, "code": "(fn [sq] (reduce (fn [acc item] (cons item acc)) [] sq))", "user": "54636b05e4b01be26fd746c0"}, {"problem": 23, "code": "into ()", "user": "549eeda9e4b0f3d1d8e70faa"}, {"problem": 23, "code": "#(loop [x %, res '()]\n  (if (= '() x)\n    (vec res)\n    (recur (rest x) (conj res (first x)))))", "user": "54a0ae0fe4b0f3d1d8e70fb8"}, {"problem": 23, "code": "(fn myreverse [l]\n\t(reduce (fn [e r] (cons r e)) [] l))", "user": "52b9e920e4b07a9af57922c9"}, {"problem": 23, "code": "#(loop [s %\n        r (empty s)]\n   (if (empty? s)\n     r\n     (recur (rest s) (cons (first s) r))))", "user": "54a1f494e4b09f271ff37c52"}, {"problem": 23, "code": "(fn [coll]\n  (loop [lst coll\n         result ()]\n    (if (seq lst)\n      (let [f  (first lst)\n            result (conj result f)]\n         (recur (rest lst) result))\n      result)))", "user": "549f7b51e4b0f3d1d8e70fb1"}, {"problem": 23, "code": "(fn rev [xs]\n  (if (empty? xs)\n    []\n    (conj (rev (rest xs)) (first xs))))", "user": "549dd591e4b0f3d1d8e70f98"}, {"problem": 23, "code": "(fn [v]\n  (loop [xs (seq v) rs []]\n    (if (empty? xs)\n      rs\n      (let [[x & rxs] xs]\n        (recur rxs (cons x rs))))))", "user": "54a31fdae4b09f271ff37c64"}, {"problem": 23, "code": "(fn [l]\n  (loop [base-set l\n         rev-set []]\n    (if (empty? base-set)\n      rev-set\n      (recur (drop-last base-set)\n             (conj rev-set (last base-set))))))", "user": "532902f8e4b09d4e7a9b550e"}, {"problem": 23, "code": "(fn myrev\n  [s]\n  (loop [ss s sr ()]\n   \t(if (empty? ss)\n    \tsr\n     \t(recur (drop 1 ss) (conj sr (first ss)))\n            \n   )))", "user": "54a30320e4b09f271ff37c62"}, {"problem": 23, "code": "(fn my-reverse\n  ([coll]\n   (if(empty? coll)\n     ()\n     (my-reverse (butlast coll) (list (last coll))))\n   )\n  ([coll reversed-coll]\n    (if(empty? coll)\n      reversed-coll\n      (my-reverse (butlast coll) (concat  reversed-coll (list (last coll))))\n      ))\n  )", "user": "52fe2dffe4b047fd55837036"}, {"problem": 23, "code": "reduce conj ()", "user": "54a2b2e8e4b09f271ff37c5d"}, {"problem": 23, "code": "(fn rev [xs]\n  (if (= xs []) []\n    (conj (rev (rest xs)) (first xs))))", "user": "5488537be4b0e286459a11cf"}, {"problem": 23, "code": "(fn [x] (reduce #(conj % %2) '() x))", "user": "54a1d643e4b09f271ff37c50"}, {"problem": 23, "code": "#(into '() %)", "user": "54a45095e4b09f271ff37c70"}, {"problem": 23, "code": "into ()", "user": "530ec8d4e4b08068f379ecc2"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "549cc867e4b0f3d1d8e70f8f"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "54a2c433e4b09f271ff37c5f"}, {"problem": 23, "code": "#(into () %)", "user": "54a6399ee4b09f271ff37c85"}, {"problem": 23, "code": "#(into () %)", "user": "54a428e8e4b09f271ff37c6d"}, {"problem": 23, "code": "into ()", "user": "54a677a9e4b09f271ff37c88"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "54a70af9e4b09f271ff37c93"}, {"problem": 23, "code": "(fn [xs]\n  (loop [reversed [] list xs]\n    (if (empty? list)\n      (into list reversed)\n      (recur (conj reversed (first list)) (rest list)))))", "user": "54a7336be4b09f271ff37c95"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "54a73c1fe4b09f271ff37c96"}, {"problem": 23, "code": "(fn [seq] (reduce (fn [r e] (if (seq? r) (cons e r) (list e r)) ) seq))", "user": "53403f42e4b085b17e897da8"}, {"problem": 23, "code": "reduce #(cons %2 %1) []", "user": "54a7efdee4b09f271ff37c9d"}, {"problem": 23, "code": "reduce conj ()", "user": "54a8dcdde4b09f271ff37ca8"}, {"problem": 23, "code": "(\n\tfn function [var] \n  \t(\n    \tinto '() var\n    )\n)", "user": "548018e8e4b0c51c1f4d7333"}, {"problem": 23, "code": "(fn [coll] \n  (loop [coll coll consed '()]\n             (if (empty? coll)\n               consed\n               (recur (rest coll)\n                      (cons (first coll) consed)))))", "user": "536f8cc2e4b0fc7073fd6e80"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "54a7d707e4b09f271ff37c9b"}, {"problem": 23, "code": "into '()", "user": "54a854f5e4b09f271ff37ca2"}, {"problem": 23, "code": "#(loop [s %1 rs []]\n   (if (= s ())\n     rs\n     (recur (drop-last s) (conj rs (last s)))))", "user": "545ded41e4b01be26fd74678"}, {"problem": 23, "code": "(fn my-reverse [col] (reduce #(cons %2 %1) [] col))", "user": "54361d92e4b032a45b8692f7"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "50ec69e0e4b04edc3377704a"}, {"problem": 23, "code": "into ()", "user": "54a627bce4b09f271ff37c83"}, {"problem": 23, "code": "reduce conj ()", "user": "546a6e9fe4b00cfc9eacc157"}, {"problem": 23, "code": "(fn [s] ((fn [in out]\n\t(if (empty? in)\n\t\tout\n\t\t(recur (drop-last in) (conj out (last in))))\n) s []))", "user": "54a70484e4b09f271ff37c91"}, {"problem": 23, "code": "(fn [coll]\n  (loop [remaining coll, final []]\n    (if (= remaining [])\n      final\n      (recur (drop-last remaining) (conj final (last remaining))))))", "user": "54a1d047e4b09f271ff37c4f"}, {"problem": 23, "code": "(fn [sq] (reduce conj '() sq))", "user": "54aad6c0e4b09f271ff37cbc"}, {"problem": 23, "code": "(fn\n  [seq]\n  (loop\n    [remaining seq\n     result '()]\n    (if (empty? remaining)\n      result\n      (recur (rest remaining) \n             (cons (first remaining) result)))))", "user": "52c3dffee4b0c2d177d620cb"}, {"problem": 23, "code": "(fn [col] (reduce #(cons %2 %) (empty col) col))", "user": "51e8ee6be4b07cae92c04bfd"}, {"problem": 23, "code": "(fn [s] \n  (loop[[f & r] (seq s) t []] \n    (if (empty? r) \n      (cons f t) \n      (recur r (cons f t))\n     ) \n   )\n )", "user": "54aa373de4b09f271ff37cb6"}, {"problem": 23, "code": "(fn rev\n  ([seq]\n   (rev seq nil))\n  ([seq reversed-seq]\n   (if (empty? seq)\n     reversed-seq\n     (rev (rest seq) (cons (first seq) reversed-seq)))))", "user": "54a27b05e4b09f271ff37c5c"}, {"problem": 23, "code": "into ()", "user": "54ab04f1e4b09f271ff37cc0"}, {"problem": 23, "code": "into ()", "user": "4fabbd3ee4b081705acca21e"}, {"problem": 23, "code": "#(reduce (fn [x y] (conj x y)) '() %)", "user": "54ab53e1e4b09f271ff37cc5"}, {"problem": 23, "code": "reduce conj ()", "user": "546692aee4b01be26fd746e7"}, {"problem": 23, "code": "(fn [s]\r\n    (reduce (fn [acc e] (conj acc e))\r\n            ()\r\n            s))", "user": "540459bfe4b0addc1aec6656"}, {"problem": 23, "code": "#(into () %)", "user": "52a267c6e4b04e0c58e87bef"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "54ab6773e4b09f271ff37cc8"}, {"problem": 23, "code": "(fn rev [col]\n  ((fn inner [col rcol]\n     (if (empty? col) rcol (inner (rest col) (conj rcol (first col)))))\n   col\n   '() ))", "user": "54ac5ad7e4b09f271ff37cd6"}, {"problem": 23, "code": "reduce conj ()", "user": "54ac8df8e4b09f271ff37cd7"}, {"problem": 23, "code": "#(loop [c\t%\n        acc\t(empty %)]\n  (if (seq c)\n      (recur (rest c) (cons (first c) acc))\n       acc))", "user": "54107c96e4b01498b1a719ae"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "53e8e42ce4b036ad0777e48e"}, {"problem": 23, "code": "reduce (fn [accum x] (conj accum x)) ()", "user": "54ad0575e4b09f271ff37cde"}, {"problem": 23, "code": "(fn [coll]\n  (loop [coll coll acc ()]\n    (if (empty? coll)\n      acc\n      (recur (rest coll) (cons (first coll) acc )))))", "user": "54ad4863e4b09f271ff37ce0"}, {"problem": 23, "code": "into ()", "user": "53e88247e4b036ad0777e489"}, {"problem": 23, "code": "(fn [se]\n   (letfn [(f [l acc]\n             (if (empty? l)\n                   acc\n                   (recur (filter #(not= (last l) %) l) (conj acc (last l)))))]\n     (f se [])))", "user": "53214efbe4b09d4e7a9b54b2"}, {"problem": 23, "code": "(fn rev [l] (if (empty? l) l (conj (vec (rev (rest l))) (first l))))", "user": "54acd7f9e4b09f271ff37cda"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "54addba9e4b09f271ff37ce9"}, {"problem": 23, "code": "(fn reverse-recursively [coll]\n  (loop [[r & more :as all] (seq coll)\n         acc '()]\n    (if all\n      (recur more (cons r acc))\n      acc)))", "user": "54ae6da2e4b09f271ff37cf2"}, {"problem": 23, "code": "(fn reverse-recursively [coll]\n  (loop [[r & more :as all] (seq coll)\n         acc '()]\n    (if all\n      (recur more (cons r acc))\n      acc)))", "user": "54aec1b6e4b09f271ff37cf6"}, {"problem": 23, "code": "#(reduce (fn [col value] (conj col value)) (list) %)", "user": "5463c824e4b01be26fd746c5"}, {"problem": 23, "code": "(fn [x]\n         (loop [r nil\n                y x]\n           (if (empty? y)\n             r\n             (recur (cons (first y) r)\n                    (rest y)))))", "user": "50b42cbbe4b001349b2f4abe"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "54af220ce4b09f271ff37d02"}, {"problem": 23, "code": "(fn [coll]\n  (loop [remaining coll\n         final ()]\n      (if (empty? remaining)\n        final\n        (recur (rest remaining) (conj final (first remaining))))))", "user": "54af500fe4b09f271ff37d06"}, {"problem": 23, "code": "into '()", "user": "54ad9d76e4b09f271ff37ce6"}, {"problem": 23, "code": "(fn [lst] (reduce conj () lst))", "user": "54a8fdcee4b09f271ff37ca9"}, {"problem": 23, "code": "(fn my-reverse [s]\n  (reduce conj '() s))", "user": "54982522e4b0b312c081ff7c"}, {"problem": 23, "code": "into ()", "user": "53051bf6e4b0d8b024fd3759"}, {"problem": 23, "code": "#(reduce conj '()%)", "user": "53d8da61e4b0e771c3025471"}, {"problem": 23, "code": "(fn rv [s] (if (empty? s) s (let [vs (vec s)] (cons (last vs) (rv (butlast vs))))))", "user": "4f577f25e4b0a7574ea71839"}, {"problem": 23, "code": "#(loop [new-coll [] coll %]\n   (if (empty? coll)\n     new-coll\n     (recur (conj new-coll (last coll)) (butlast coll))))", "user": "533c5249e4b0e30313ee6cdd"}, {"problem": 23, "code": "#(loop [r [] a %]\n   (if (empty? a) r (recur (conj r (last a)) (butlast a))))", "user": "54ae331ce4b09f271ff37cee"}, {"problem": 23, "code": "#(into () %)", "user": "54aaff2de4b09f271ff37cbf"}, {"problem": 23, "code": "(fn myrev [xs] \n  (if (empty? (rest xs))\n      xs\n      (concat (myrev (rest xs)) [(first xs)])))", "user": "54b04ce4e4b09f271ff37d12"}, {"problem": 23, "code": "reduce conj ()", "user": "54af6fb0e4b09f271ff37d08"}, {"problem": 23, "code": "(fn [s] (letfn \n\t[(revz \n\t\t[s acc] (if (seq s) (recur (rest s) (conj acc (first s)) ) acc))\n\t\t] (revz s '() )) )", "user": "52f25e1be4b05e3f0be25ef8"}, {"problem": 23, "code": "(fn [sq]\n  (loop [s sq r nil]\n    (if s\n      (recur (next s) (conj r (first s)))\n      r)))", "user": "54b04708e4b09f271ff37d11"}, {"problem": 23, "code": "#(reduce (fn [l v] (conj l v)) '() %)", "user": "54b13a40e4b09f271ff37d1b"}, {"problem": 23, "code": "#(reduce (fn [acc, el] (cons el acc)) [] %)", "user": "54b187bee4b09f271ff37d21"}, {"problem": 23, "code": "reduce (fn [x y] (cons y x)) []", "user": "54ab502fe4b09f271ff37cc4"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "54ae541ae4b09f271ff37cef"}, {"problem": 23, "code": "(fn [input]\n(loop [x input r []]\n  (if (= (count input) (count r))\n    r\n    (recur (rest x) (cons (first x) r)))\n ))", "user": "54b050cee4b09f271ff37d13"}, {"problem": 23, "code": "#(loop [res []\n         c %]\n    (if (empty? c)\n      res\n      (recur (conj res (last c)) (drop-last c))))", "user": "5439ea5de4b032a45b869324"}, {"problem": 23, "code": "(fn [l]\n   (loop [[x & more] (vec l)\n          acc '()]\n     (if-not\n       more\n       (conj acc x)\n       (recur more\n              (conj acc x)\n              )\n       )\n     )\n   )", "user": "54b2a4f7e4b09f271ff37d2c"}, {"problem": 23, "code": "(fn revit\n  ([x] (revit x (empty x)))\n  ([x y] (if (empty? x) \n           y\n           (revit \n            (rest x) \n            (cons (first x) y)\n            )\n           )\n   )\n  )", "user": "54ab46fee4b09f271ff37cc3"}, {"problem": 23, "code": "#(loop [in % out []] (if (empty? in) out (recur (rest in) (concat [(first in)] out))))", "user": "54b2e881e4b09f271ff37d32"}, {"problem": 23, "code": "(fn [coll]\n           (loop [coll coll\n                  newColl ()]\n             (if (empty? coll)\n               newColl\n               (recur (rest coll) (conj newColl (first coll))))))", "user": "528e441be4b0239c8a67aed8"}, {"problem": 23, "code": "#(into () %)", "user": "54ae231de4b09f271ff37ced"}, {"problem": 23, "code": "#(into '() %)", "user": "548db64ce4b0e286459a121c"}, {"problem": 23, "code": "#(reduce (fn [c _] (concat [_] c)) [] %)", "user": "549d36c6e4b0f3d1d8e70f94"}, {"problem": 23, "code": "reduce (fn [x, y] (conj x y)) '()", "user": "54b331dbe4b09f271ff37d37"}, {"problem": 23, "code": "(fn f\n  ([s] (f s '()))\n  ([s a]\n   \t(if (seq s)\n      (f (rest s) (conj a (first s)))\n      a)))", "user": "54ad8d2ee4b09f271ff37ce4"}, {"problem": 23, "code": "(fn rev [l]\n  (if (empty? l)\n    l\n    (concat (rev (rest l)) (list (first l)))))", "user": "5455573be4b0e397800069e0"}, {"problem": 23, "code": "(fn r [q] (\n\t(fn v [a d] (if (empty? a) d (v (rest a) (cons (first a) d)))) \n              q []))", "user": "54b45938e4b05787c3b1638f"}, {"problem": 23, "code": "into '()", "user": "5485d169e4b0e286459a11b2"}, {"problem": 23, "code": "#(into () %)", "user": "54b567eee4b05787c3b163a2"}, {"problem": 23, "code": "(fn [coll] (reduce conj '() coll))", "user": "54b5870ae4b05787c3b163a6"}, {"problem": 23, "code": "(fn [uncasted-collection]\n  (let [collection (into [] uncasted-collection)]\n  (for [x (iterate #(dec %1) (dec (count collection))) :while (>= x 0)] (nth collection x))))", "user": "54b2d392e4b09f271ff37d2f"}, {"problem": 23, "code": "sort #(- (compare % %2))", "user": "54b448f2e4b05787c3b1638e"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "54b51366e4b05787c3b16398"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "54b2859ce4b09f271ff37d2a"}, {"problem": 23, "code": "into ()", "user": "54aa665fe4b09f271ff37cb8"}, {"problem": 23, "code": "into ()", "user": "54b63dbee4b05787c3b163b5"}, {"problem": 23, "code": "#(into () %)", "user": "54b402dce4b05787c3b16388"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "54ab951be4b09f271ff37ccc"}, {"problem": 23, "code": "#(loop [col (vec %)\n            cnt (- (count col) 1)\n            result []]\n       (if (>= cnt 0)\n         (recur col (dec cnt) (conj result (nth col cnt)))\n         result))", "user": "54b67463e4b05787c3b163bc"}, {"problem": 23, "code": "apply (partial conj ())", "user": "544f732fe4b0e39780006994"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "54b2ec84e4b09f271ff37d33"}, {"problem": 23, "code": "(fn myReverse [brojevi]\n  (reduce conj() brojevi))", "user": "54aef4d0e4b09f271ff37cfe"}, {"problem": 23, "code": "#(apply conj '() %)", "user": "525b142fe4b0cb4875a45d05"}, {"problem": 23, "code": "(fn[new_s, old_s] (\n                   if(empty? old_s) new_s\n                   (recur (conj new_s (first old_s)) \n                          (rest old_s))\n                   )\n  )\n'()", "user": "54b598d6e4b05787c3b163a8"}, {"problem": 23, "code": "#(loop [newList (list) l (apply list %)] \n       (if (= 0 (count l)) \n         (if (vector? %)\n           (apply vector newList)\n           newList\n           )   \n         (recur (conj newList (peek l)) (pop l)) \n         )   \n       )", "user": "54b90836e4b0ed20f4ff6e9d"}, {"problem": 23, "code": "#(into () %)", "user": "54b8dfece4b0ed20f4ff6e9a"}, {"problem": 23, "code": "(fn [l] (reduce conj '() l))", "user": "54b7eebae4b0ed20f4ff6e8e"}, {"problem": 23, "code": ";#(reduce conj () %)\n;reduce conj ()\ninto ()", "user": "53838b9ee4b06839e8705ee1"}, {"problem": 23, "code": "(fn [a-seq] \n  (reduce (fn [m, v] (if (nil? v) m (conj m v))) '() a-seq))", "user": "54b972bbe4b0ed20f4ff6ead"}, {"problem": 23, "code": "(fn [s] (reduce conj '() s))", "user": "54b95f3de4b0ed20f4ff6eab"}, {"problem": 23, "code": "#(loop [old % new nil] (if-not (empty? old) (recur (rest old) (cons (first old) new)) new))", "user": "54a96a15e4b09f271ff37cad"}, {"problem": 23, "code": "(let\n  [\n   buildReverseSeq\n   (fn x [existingSeq builder]\n     (if (empty? existingSeq)\n       builder\n       (x (rest existingSeq) (conj builder (first existingSeq)))\n     )\n   )\n   cast (fn [s] (if (= (type s) (type [])) vec identity))\n   rev (fn [s] ((cast s) (buildReverseSeq s '())))\n  ]\n  rev)", "user": "54ba8206e4b0ed20f4ff6eb6"}, {"problem": 23, "code": "(fn [sq] (reduce conj '() sq))", "user": "54b6c24be4b0ed20f4ff6e7c"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "54acf5c7e4b09f271ff37cdd"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "54bad522e4b0ed20f4ff6eb8"}, {"problem": 23, "code": "(fn myReverse\n  [coll]\n  (loop [remaining coll\n         reversed []]\n    (if (empty? remaining)\n      reversed\n      (recur (butlast remaining) (conj reversed (last remaining))))))", "user": "54bad977e4b0ed20f4ff6eb9"}, {"problem": 23, "code": "(partial reduce conj ())", "user": "54bb0f63e4b0ed20f4ff6ebc"}, {"problem": 23, "code": "(fn rev [s] (if (next s)\n                (concat  (rev (next s)) (list (first s)))\n                s\n                ))", "user": "54bc0b0ee4b0ed20f4ff6ec7"}, {"problem": 23, "code": "(fn rev [s]\n  (when (seq s)\n    (cons (last s) (lazy-seq (rev (drop-last s))))))", "user": "54bc539be4b0ed20f4ff6eca"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "54bc6c75e4b0ed20f4ff6ed0"}, {"problem": 23, "code": "(fn [coll] (loop [coll coll acc (empty coll)] (if (empty? coll) acc (recur (rest coll) (cons (first coll) acc)))))", "user": "54bc69a7e4b0ed20f4ff6ecf"}, {"problem": 23, "code": "#(reduce (fn [a x] (conj a x)) '() %)", "user": "545ddac3e4b01be26fd74676"}, {"problem": 23, "code": "#(loop [coll %1 n (count %1) acc []]\n        (if (= n 0)\n          acc\n          (recur (butlast coll) (dec n) (conj acc (last coll)))))", "user": "54bb9730e4b0ed20f4ff6ebf"}, {"problem": 23, "code": "#(into () %)", "user": "54bcd12be4b0ed20f4ff6ed7"}, {"problem": 23, "code": "reduce conj '()", "user": "54bd04e7e4b0ed20f4ff6ed8"}, {"problem": 23, "code": "(fn [my-seq]\n  (reduce (fn [acc e]\n            (conj acc e)) '() my-seq))", "user": "546ff701e4b00cfc9eacc1b3"}, {"problem": 23, "code": "(fn [sq] \n  (reduce (fn [ac el] (conj ac el)) '() sq)\n  )", "user": "54b66089e4b05787c3b163ba"}, {"problem": 23, "code": "(fn [forwards]\n  (loop [backwards [],\n         forwards forwards]\n    (if (empty? forwards) \n      backwards\n      (do (println forwards)\n      (recur (conj (seq backwards) (first forwards)) (next forwards))))))", "user": "54bd91d7e4b0ed20f4ff6ee2"}, {"problem": 23, "code": "into ()", "user": "54b83ae9e4b0ed20f4ff6e95"}, {"problem": 23, "code": "(fn rev[c] (if (empty? c)\n             []\n             (conj (rev (rest c)) (first c))))", "user": "54b10d08e4b09f271ff37d18"}, {"problem": 23, "code": "reduce (fn [xs e] (conj xs e)) '()", "user": "54be096de4b0ed20f4ff6ee6"}, {"problem": 23, "code": "(fn [xs]\n\t(loop [acc [] xs xs]\n\t\t(if (empty? xs)\n\t\t\tacc\n\t\t\t(recur (cons (first xs) acc) (next xs)))))", "user": "54b4046de4b05787c3b16389"}, {"problem": 23, "code": "into ()", "user": "53452fe9e4b084c2834f4a34"}, {"problem": 23, "code": "(let [x (fn [l a] \n          (if (empty? l)\n            a\n            (recur\n             (rest l)\n             (cons\n              (first l)\n              a))))]\n  #(x % ()))", "user": "51d55795e4b01da06753aa8f"}, {"problem": 23, "code": "into ()", "user": "54bec835e4b0ed20f4ff6ef7"}, {"problem": 23, "code": "into ()", "user": "54be7772e4b0ed20f4ff6eea"}, {"problem": 23, "code": "(fn my-reverse [coll]\n  (loop [remaining-coll coll result '()]\n    (if (empty? remaining-coll)\n      result\n      (recur (rest remaining-coll) (cons (first remaining-coll) result)))))", "user": "54bd3aefe4b0ed20f4ff6edb"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "548018d7e4b0c51c1f4d7328"}, {"problem": 23, "code": "(fn rev [coll]\n  (if (= 1 (count coll))\n    coll\n    (cons (last coll) (rev (butlast coll)))\n    )\n  )", "user": "54bf7d15e4b0ed20f4ff6f03"}, {"problem": 23, "code": "#(loop [c % r '()] (if (nil? c) (if (vector? %) (vec r) r) (recur (next c) (conj r (first c)))))", "user": "54bc575ce4b0ed20f4ff6ecb"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "54bfc203e4b0ed20f4ff6f08"}, {"problem": 23, "code": "(fn [sq] (reduce (fn [coll elem] (cons elem coll)) [] sq))", "user": "504dfc75e4b078edc5f59387"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "54bfc88ae4b0ed20f4ff6f09"}, {"problem": 23, "code": "(fn [lst]\n  (loop [aseq (seq lst) retval '()]\n    (if (empty? aseq)\n      retval\n      (recur (rest aseq) (cons (first aseq) retval)))))", "user": "54bebeb9e4b0ed20f4ff6ef4"}, {"problem": 23, "code": "(fn [s] (reduce conj () s))", "user": "54be3ab6e4b0ed20f4ff6ee7"}, {"problem": 23, "code": "#(into () %)", "user": "520a796be4b01da9d47a99dc"}, {"problem": 23, "code": "#(reduce (fn [acc value] (into [value] acc)) [] %)", "user": "54b576cfe4b05787c3b163a5"}, {"problem": 23, "code": "into ()", "user": "54c05fd7e4b0ed20f4ff6f12"}, {"problem": 23, "code": "(fn [coll]\n  (loop [coll coll\n             reversed []]\n    (let [elem (first coll)]\n     (if elem\n      (recur (rest coll) (cons elem reversed))\n       reversed))))", "user": "5422c959e4b01498b1a71ac7"}, {"problem": 23, "code": "(fn [col]\n  (let [num-elements (count col)\n        elements (vec col)]\n    (loop [cur-index (- num-elements 1)\n           result []]\n      (if (< cur-index 0)\n        result\n        (recur (dec cur-index) (conj result (nth elements cur-index)))))))", "user": "54c02ee8e4b0ed20f4ff6f10"}, {"problem": 23, "code": "(fn rev [items] (\n  if (nil? (first items)) \n                 [] \n                 (\n                  concat (rev (rest items)) [(first items)]\n                 ) \n))", "user": "54c0ce91e4b0ed20f4ff6f18"}, {"problem": 23, "code": "(fn [sekv]\n  (loop [s sekv\n         r []]\n    (if (= 1 (count s))\n      (conj r (first s))\n      (recur (butlast s) (conj r (last s)))\n      )\n    \n    )\n  )", "user": "54bbba99e4b0ed20f4ff6ec2"}, {"problem": 23, "code": "(fn [seq] (reduce #(concat [%2] %1) [] seq))", "user": "54c11fdae4b0ed20f4ff6f1b"}, {"problem": 23, "code": "into()", "user": "54b7f217e4b0ed20f4ff6e8f"}, {"problem": 23, "code": "reduce conj '()", "user": "53d1ba22e4b00fb29b221317"}, {"problem": 23, "code": "reduce conj ()", "user": "5474d1f4e4b0c51c1f4d728c"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "54c19050e4b0ed20f4ff6f26"}, {"problem": 23, "code": "reduce conj '()", "user": "548b8a50e4b0e286459a11ff"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "54c165e9e4b0ed20f4ff6f23"}, {"problem": 23, "code": "#( into() %)", "user": "54c219cbe4b045293a27f5f9"}, {"problem": 23, "code": "(fn [s] (for [i (range (count s) 0 -1)] (last (take i s))))", "user": "54c15722e4b0ed20f4ff6f22"}, {"problem": 23, "code": "(fn ! [s] (if (empty? s) s (concat (! (rest s)) (take 1 s))))", "user": "54c271b9e4b045293a27f602"}, {"problem": 23, "code": "reduce (fn [memo x] (conj memo x)) '()", "user": "4f0f3725535d0136e6c22337"}, {"problem": 23, "code": "(fn [coll] (reduce conj () coll))", "user": "54c1c5e2e4b0ed20f4ff6f29"}, {"problem": 23, "code": "(fn [xs] (reduce conj '() xs))", "user": "54be792ee4b0ed20f4ff6eeb"}, {"problem": 23, "code": "(fn [coll]\n  (reduce conj nil coll))", "user": "4e435681535dc968683fc4a1"}, {"problem": 23, "code": "(fn [collection] (if (vector? collection)\n                   (vec (reduce (fn [c v] (conj c v)) '() collection))\n                   (reduce (fn [c v] (conj c v)) '() collection)))", "user": "54c120d7e4b0ed20f4ff6f1c"}, {"problem": 23, "code": "#(into () %)", "user": "54c31f1be4b045293a27f609"}, {"problem": 23, "code": "(partial reduce conj '())", "user": "53a46c4ae4b0b62ce300572f"}, {"problem": 23, "code": "(fn my-reverse [seq]\n  (reduce conj () seq))", "user": "54c4399ae4b045293a27f616"}, {"problem": 23, "code": "(fn rev [lst] (loop [lst lst nlst (seq [])] (if (nil? (first lst)) nlst (recur (rest lst) (conj nlst (first lst))))))", "user": "54c47620e4b045293a27f61c"}, {"problem": 23, "code": "#(loop [new-list (list (first %))\n        rest-list (rest %)]\n   (if (empty? rest-list)\n     new-list\n     (recur (conj new-list (first rest-list))\n            (rest rest-list))))", "user": "53a69398e4b0ef122a8689ca"}, {"problem": 23, "code": "(fn [xs] (reduce conj '() xs))", "user": "546db2fbe4b00cfc9eacc190"}, {"problem": 23, "code": "(fn [xs] (reduce conj `() xs))", "user": "4f8be895e4b02e764a0a5184"}, {"problem": 23, "code": "(fn mr [c] ( (fn mf [res coll] ( if (empty? coll) res (mf (conj res (first coll)) (rest coll) ) ) ) nil c ))", "user": "5339b53fe4b0e30313ee6cac"}, {"problem": 23, "code": "reduce #(cons %2 %1) ()", "user": "54c169ade4b0ed20f4ff6f24"}, {"problem": 23, "code": "#(into () %)", "user": "54c568cde4b045293a27f623"}, {"problem": 23, "code": "#(into () %)", "user": "54c46381e4b045293a27f61a"}, {"problem": 23, "code": "(fn myreverse [xs]\n  (if (empty? xs)\n    xs\n    (cons (last xs) (myreverse (drop-last xs)))\n  )\n)", "user": "54c5cc17e4b045293a27f624"}, {"problem": 23, "code": "#(loop [s % r (seq [])] (if (nil? (last s)) r (recur (butlast s) (concat r (cons (last s) nil)))))", "user": "54c5e36ee4b045293a27f626"}, {"problem": 23, "code": "reduce conj ()", "user": "54bff194e4b0ed20f4ff6f0d"}, {"problem": 23, "code": "reduce conj '()", "user": "54b7ceb3e4b0ed20f4ff6e8a"}, {"problem": 23, "code": "(fn [coll]\n  ( #(if (empty? %1)\n       %2\n       (recur\n        (rest %1)\n        (cons (first %1) %2))) coll '()))", "user": "54c611d1e4b045293a27f627"}, {"problem": 23, "code": "(fn [coll] (\n\tloop [c coll, res []] (\n\t\tif (empty? c) \n\t\t\tres \n\t\t\t(recur (butlast c) (conj res (last c))))))", "user": "54bbe505e4b0ed20f4ff6ec5"}, {"problem": 23, "code": "(fn rev ([sequence]\n  ( rev (rest sequence) (list (first sequence))))\n  ([ sequence reversed ]\n   (if (not-empty sequence) (rev (rest sequence) (conj reversed (first sequence))) reversed ) )\n  )", "user": "53ed1cb8e4b0d648e757f4be"}, {"problem": 23, "code": "#(into () %)", "user": "54c6619ae4b045293a27f62b"}, {"problem": 23, "code": "(fn rvs ([x] (rvs (rest x) [(first x)])) ([x b] (if (empty? x) b (recur (rest x) (concat [(first x)] b)))))", "user": "54a634abe4b09f271ff37c84"}, {"problem": 23, "code": "#(loop [[x & xs] (vec %)\n\t\ty '()]\n   (if x\n     (recur xs (conj y x))\n     (vec y)))", "user": "5251d3c1e4b0541d1855b87f"}, {"problem": 23, "code": "reduce conj ()", "user": "5480cce5e4b0e286459a115f"}, {"problem": 23, "code": "#(reduce (fn [r e] (conj r e)) '() %)", "user": "54c29697e4b045293a27f604"}, {"problem": 23, "code": "#(into () %)", "user": "54c75959e4b045293a27f63a"}, {"problem": 23, "code": "#(into '() %)", "user": "52be58d7e4b07a9af579231d"}, {"problem": 23, "code": "(fn [coll] (reduce conj '() coll))", "user": "54b07c1ee4b09f271ff37d16"}, {"problem": 23, "code": "(fn [s]\n  (loop [remaining s result (empty s)]\n    (if (empty? (rest remaining))\n      (cons (first remaining) result);true\n      (recur (rest remaining) (cons (first remaining) result))\n    )\n  )\n)", "user": "54c6e78ae4b045293a27f634"}, {"problem": 23, "code": "(fn myreverse\n  ([l] (if (empty? l)\n         l\n         (myreverse (rest l) (first l))\n       )\n   )\n   ([l other] (if (empty? l)\n                [other]\n                (conj (myreverse (rest l) (first l)) other)\n               )\n    )\n)", "user": "54c82b27e4b045293a27f645"}, {"problem": 23, "code": "#(reduce (fn [acc x] (conj acc x)) '() %)", "user": "54c83824e4b045293a27f649"}, {"problem": 23, "code": "#(loop [result % x []]\n    (if (empty? result)\n      x\n      (recur (rest result) (cons (first result) x))\n    )\n  )", "user": "54b5d893e4b05787c3b163ae"}, {"problem": 23, "code": "into ()", "user": "54acad39e4b09f271ff37cd8"}, {"problem": 23, "code": "into ()", "user": "54b5b1f3e4b05787c3b163aa"}, {"problem": 23, "code": "(fn my-reverse [l] \n  (if (empty? l) nil\n    (cons (last l) (my-reverse (drop-last l)))))", "user": "54c8ac49e4b045293a27f64e"}, {"problem": 23, "code": "(fn\trev-list ([lst] \n    (rev-list lst []))\n\t([lst result]\n\t(if (empty? lst)\n\t\tresult\n\t\t(recur (butlast lst) (conj result (last lst))))))", "user": "54c74a78e4b045293a27f637"}, {"problem": 23, "code": "#(loop [xs % reversed []]\n   (if (empty? xs)\n     reversed\n     (recur (rest xs) (cons (first xs) reversed))))", "user": "54c8d4a8e4b045293a27f654"}, {"problem": 23, "code": "reduce #(cons %2 %1) []", "user": "50d0d2dde4b00b15ecee9768"}, {"problem": 23, "code": "(fn rev [s]\n  (if (empty? s)\n    []\n    (conj (rev (rest s)) (first s))))", "user": "53bc10f5e4b047364c04450d"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "54c93665e4b045293a27f661"}, {"problem": 23, "code": "(fn [a] (into '() a))", "user": "54c93206e4b045293a27f65d"}, {"problem": 23, "code": "#(into () %)", "user": "54c9636fe4b045293a27f66e"}, {"problem": 23, "code": "into ()", "user": "54c954e4e4b045293a27f66a"}, {"problem": 23, "code": "(fn r [s] (if (empty? s) [] (concat (r (rest s)) (list (first s)))))", "user": "54c968bfe4b045293a27f66f"}, {"problem": 23, "code": "(fn [x] (reduce conj () x) )", "user": "54c7b7c5e4b045293a27f63f"}, {"problem": 23, "code": "#(into () %)", "user": "54c97cb3e4b045293a27f677"}, {"problem": 23, "code": "(fn rev [l]\n  (if (= 1 (count l))\n    (vector (first l))\n    (conj\n     (rev (rest l))\n     (first l)\n    )\n  )\n)", "user": "54c9f165e4b045293a27f687"}, {"problem": 23, "code": "#(\n\treduce (fn [reversed elem] ( conj reversed elem )) '() %\n)", "user": "54ca130ce4b057c6fda3a250"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "54c9f362e4b057c6fda3a24c"}, {"problem": 23, "code": "(fn [col]\n  (loop [xs col\n         ys '()]\n    (if (seq xs)\n      (recur (rest xs) (conj ys (first xs)))\n      ys)))", "user": "54ca31e9e4b057c6fda3a253"}, {"problem": 23, "code": "into ()", "user": "54b90fe2e4b0ed20f4ff6e9f"}, {"problem": 23, "code": "into ()", "user": "54c97a56e4b045293a27f676"}, {"problem": 23, "code": "#(reduce (fn [x y] (conj x y)) '() %)", "user": "54bd17f7e4b0ed20f4ff6eda"}, {"problem": 23, "code": "(fn [s]\n  (loop [s s\n         xs (list)]\n    (if (empty? s)\n      xs\n      (recur (rest s) (cons (first s) xs)))))", "user": "54c7f5cce4b045293a27f642"}, {"problem": 23, "code": "(fn rvs[x](into () x))", "user": "54c92da8e4b045293a27f65c"}, {"problem": 23, "code": "(fn [x] (into () x))", "user": "54c6b57ee4b045293a27f631"}, {"problem": 23, "code": "(partial reduce conj ())", "user": "54ca93abe4b057c6fda3a264"}, {"problem": 23, "code": "reduce conj ()", "user": "54ca9ca8e4b057c6fda3a265"}, {"problem": 23, "code": "reduce conj ()", "user": "4fc4eb1ee4b081705acca354"}, {"problem": 23, "code": "#(apply conj () %1)", "user": "54c9ced5e4b045293a27f680"}, {"problem": 23, "code": "(fn revs [x] \n  (if (empty? (rest x))\n    (vector (first x))\n    (conj (revs (rest x)) (first x))\n \t))", "user": "54c9608fe4b045293a27f66d"}, {"problem": 23, "code": "(fn [x] \n  (into () x)\n\n )", "user": "54ca35c6e4b057c6fda3a254"}, {"problem": 23, "code": "(fn [i] (reduce (fn g[x,y](conj x y)) (conj (apply list i) () ) ))", "user": "54ca582be4b057c6fda3a259"}, {"problem": 23, "code": "reduce #(cons %2 %1) ()", "user": "54c13b87e4b0ed20f4ff6f20"}, {"problem": 23, "code": "reduce conj ()", "user": "54cbe00ee4b057c6fda3a285"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "54cc4156e4b057c6fda3a28c"}, {"problem": 23, "code": "#(into () %)", "user": "54ab1b5ae4b09f271ff37cc2"}, {"problem": 23, "code": "(fn [coll] (reduce conj '() coll))", "user": "54ca5709e4b057c6fda3a258"}, {"problem": 23, "code": "reduce #(conj %1 %2) ()", "user": "52857128e4b0239c8a67adf2"}, {"problem": 23, "code": "(fn [coll] (reduce conj '() coll))", "user": "54ccb15de4b057c6fda3a28e"}, {"problem": 23, "code": "reduce #(cons %2 %1) nil", "user": "54c641f8e4b045293a27f628"}, {"problem": 23, "code": "(partial reduce conj '())", "user": "54cd651be4b057c6fda3a2a2"}, {"problem": 23, "code": "into ()", "user": "54ccf107e4b057c6fda3a294"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "54962cf0e4b0b312c081ff64"}, {"problem": 23, "code": "#(reduce conj '() %1)", "user": "53f11139e4b0742d9025b0d8"}, {"problem": 23, "code": "into '()", "user": "4f84a4a4e4b033992c121c39"}, {"problem": 23, "code": "reduce conj '()", "user": "5461500be4b01be26fd7469f"}, {"problem": 23, "code": "reduce (fn [acc next] (cons  next acc) ) []", "user": "54ce6eede4b057c6fda3a2ad"}, {"problem": 23, "code": "#(loop [acc () val %]\n   (if (empty? val) acc\n     (recur (conj acc (first val))\n            (rest val))))", "user": "54cbb0fde4b057c6fda3a27b"}, {"problem": 23, "code": "#(into () %)", "user": "54ce8733e4b018d918be98be"}, {"problem": 23, "code": "#(into () %)", "user": "54c8eb61e4b045293a27f658"}, {"problem": 23, "code": "(fn [seq] (reduce (fn [x y] (conj x y)) () seq))", "user": "54cf0986e4b018d918be98c7"}, {"problem": 23, "code": "#(into () %)", "user": "54cf1932e4b018d918be98c9"}, {"problem": 23, "code": "(fn ulta\n  [input]\n  (loop [result [] input input]\n    (if (empty? input)\n      result\n      (recur (conj result (last input)) (butlast input)))))", "user": "54c72b19e4b045293a27f636"}, {"problem": 23, "code": "(partial reduce #(concat [%2] %1) [])", "user": "54cdf667e4b057c6fda3a2a8"}, {"problem": 23, "code": "reduce conj ()", "user": "50a3e2eae4b0ceace084d49a"}, {"problem": 23, "code": "apply conj ()", "user": "54ce3790e4b057c6fda3a2ab"}, {"problem": 23, "code": "reduce conj ()", "user": "541b1f25e4b01498b1a71a63"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "54caaa48e4b057c6fda3a267"}, {"problem": 23, "code": "#(into () %)", "user": "54d02993e4b018d918be98dc"}, {"problem": 23, "code": "(fn reverse' [xs] \n  (if (empty? (rest xs)) \n    [(first xs)] \n    (conj (reverse' (rest xs)) (first xs))))", "user": "54d03026e4b018d918be98de"}, {"problem": 23, "code": "(fn my-reverse\n  ([coll]\n     (my-reverse coll '()))\n  ([coll ret-coll]\n     (if (nil? (seq coll))\n       ret-coll\n       (let [new-coll (conj ret-coll (first coll))]\n         (my-reverse (rest coll) new-coll)))))", "user": "54cad2d5e4b057c6fda3a26c"}, {"problem": 23, "code": "into ()", "user": "549e70bbe4b0f3d1d8e70fa0"}, {"problem": 23, "code": "#(reduce conj `() %)", "user": "54cf6a32e4b018d918be98ce"}, {"problem": 23, "code": "(fn [coll]\n  (let [rev (fn [coll result]\n              (if (seq coll)\n                (recur (rest coll)\n                       (cons (first coll) result))\n                result))]\n    (rev coll [])))", "user": "54d0d115e4b0e8a36923e5d3"}, {"problem": 23, "code": "(fn recursive [x] (if (seq x)\n\t\t\t\t\t    (cons  (last x)  (recursive (butlast x))  )\n\t\t\t\t\t    (last (rest x))))", "user": "54d0ceb5e4b0e8a36923e5d1"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "54d13d43e4b0e8a36923e5df"}, {"problem": 23, "code": "apply conj '()", "user": "54ce541de4b057c6fda3a2ac"}, {"problem": 23, "code": "#(loop [s % r '()] (if (empty? s)\n                     r\n                     (recur (rest s) (conj r (first s)\n                                           )))\n   )", "user": "54cad1c2e4b057c6fda3a26b"}, {"problem": 23, "code": "#(into () %)", "user": "54d0f654e4b0e8a36923e5d6"}, {"problem": 23, "code": "(fn\n  [vals]\n  (loop [remain vals\n         reversed nil]\n    (if (empty? remain)\n      reversed\n      (recur (rest remain) (conj reversed (first remain))))))", "user": "54d21e6de4b0e8a36923e5ee"}, {"problem": 23, "code": "(fn reverse* [x] (if (seq x)\n                    (cons (last x) (reverse* (butlast x)))\n                    []))", "user": "54d0cedde4b0e8a36923e5d2"}, {"problem": 23, "code": "#(into () %)", "user": "4ee7d6d8535d93acb0a66870"}, {"problem": 23, "code": "#(into () %)", "user": "54aec099e4b09f271ff37cf5"}, {"problem": 23, "code": "(fn rvs [v] \n   (if (empty? v) \n     [] \n     (conj  (rvs (rest v)) (first v) )\n     )\n   )", "user": "54d0e6c5e4b0e8a36923e5d4"}, {"problem": 23, "code": "(fn\n  [akimbo]\n  (loop [wrong-way akimbo\n         right-way []]\n    (if (empty? wrong-way)\n      right-way\n      (recur (rest wrong-way) (cons (first wrong-way) right-way))\n     )\n   )\n )", "user": "54d0f744e4b0e8a36923e5d7"}, {"problem": 23, "code": "#(into () %)", "user": "54d251aee4b0e8a36923e5f1"}, {"problem": 23, "code": "(fn [l]\n  (loop [input l\n         output '()]\n    (if (empty? input)\n      output\n      (recur (rest input)\n             (conj output (first input))))))", "user": "54d26316e4b0e8a36923e5f2"}, {"problem": 23, "code": "reduce conj ()", "user": "54d1cf2ee4b0e8a36923e5eb"}, {"problem": 23, "code": "(fn [c] (vec (apply conj '() c)))", "user": "54d2b411e4b0e8a36923e5f9"}, {"problem": 23, "code": "(fn rev\n  [xs]\n  (if (empty? xs)\n      []\n    (conj (rev (rest xs)) (first xs))))", "user": "54d2892fe4b0e8a36923e5f7"}, {"problem": 23, "code": "into '()", "user": "54b5ce67e4b05787c3b163ac"}, {"problem": 23, "code": "#(reduce \n  (fn [x y] (conj x y)) '() %)", "user": "54d2159fe4b0e8a36923e5ed"}, {"problem": 23, "code": "(fn [s]\n  (loop [l s\n         r '()]\n    (if (not (seq l))\n      r\n      (recur (rest l) (conj r (first l))))))", "user": "54d321b3e4b0e8a36923e602"}, {"problem": 23, "code": "#(into () %)", "user": "54d22860e4b0e8a36923e5ef"}, {"problem": 23, "code": "#(into () %)", "user": "54d2f306e4b0e8a36923e5fe"}, {"problem": 23, "code": "(fn [arr]\n  (loop [res '() \n         que arr]\n    (if (empty? que)\n      res\n      (recur (conj res (first que)) (rest que)\n       )\n      )\n    )\n  )", "user": "54d35746e4b0e8a36923e606"}, {"problem": 23, "code": "(fn[x](into '() x))", "user": "54cf977fe4b018d918be98d1"}, {"problem": 23, "code": "(fn foo [bar] (if (empty? bar) [] (conj (foo (next bar)) (first bar))))", "user": "54d37e4ce4b0e8a36923e608"}, {"problem": 23, "code": "(partial reduce conj '())", "user": "54d0afb6e4b0e8a36923e5cd"}, {"problem": 23, "code": "(fn [l] (reduce conj '() l))", "user": "54d468d0e4b0a52adc2e2000"}, {"problem": 23, "code": "(fn my-reverse [l] \n  (if (empty? l) []\n    (conj (my-reverse (rest l)) (first l))))", "user": "53771d98e4b06839e8705e2e"}, {"problem": 23, "code": "(fn [x]\n  (loop [res (list)\n         nex x]\n    (if (empty? nex)\n      res\n      (recur \n       (cons (first nex) res)\n       (rest nex)))))", "user": "536d75cbe4b0fc7073fd6e5b"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "541d3c0fe4b01498b1a71a7e"}, {"problem": 23, "code": "(fn[x](reduce conj nil x))", "user": "54d50049e4b0a52adc2e2008"}, {"problem": 23, "code": "#_#(into () %)\n\n#_#(reduce conj () %)\n\n; Lots of work here, but I was really hoping this would\n; return the same type as went in. [] get turned into '() either\n; way\n#(reduce (fn rev-cons\n            [x y]\n            (cons y x)) \n          (empty %) %)", "user": "54d267e0e4b0e8a36923e5f3"}, {"problem": 23, "code": "(fn [x]\n  (loop [x x\n         rev '()]\n    (if (empty? x)\n      rev\n      (recur (rest x) (conj rev (first x))))))", "user": "54d529cbe4b0a52adc2e2009"}, {"problem": 23, "code": "into '()", "user": "544e8c4fe4b0e3978000698a"}, {"problem": 23, "code": ";CHEATING\n;(partial sort (comp -  compare))\n\n;Real: using reverse adding in a list\ninto ()", "user": "54d341f7e4b0e8a36923e603"}, {"problem": 23, "code": "(fn rev\n  [s]\n  (loop [rem-s s rev-s '()]\n    (if (next rem-s)\n      (recur (next rem-s) (conj rev-s (first rem-s)))\n      (conj rev-s (first rem-s)))))", "user": "54c3747de4b045293a27f60e"}, {"problem": 23, "code": "(fn [ls]\n  (loop [ls ls\n         acc []]\n    (if (empty? ls)\n      acc\n      (recur\n       (rest ls)\n       (cons\n        (first ls)\n        acc)))))", "user": "54d492dbe4b0a52adc2e2001"}, {"problem": 23, "code": "#(reduce (fn [m i] (cons i m)) '() %)", "user": "54d63357e4b0a52adc2e2018"}, {"problem": 23, "code": "reduce conj '()", "user": "54d6c80ce4b0a52adc2e2020"}, {"problem": 23, "code": "reduce conj '()", "user": "54d6f22de4b0a52adc2e2023"}, {"problem": 23, "code": "(fn [s]\n  (letfn [(rev [s a] (if s (recur (next s) (cons (first s) a)) a))]\n    (rev (seq s) nil)))", "user": "54c23252e4b045293a27f5fc"}, {"problem": 23, "code": "(fn\n  [coll]\n  (loop [coll coll\n         reversed []]\n    (if (not (empty? coll))\n      (recur (drop-last coll) (conj reversed (last coll)))\n      reversed))\n  )", "user": "54d70bbfe4b0a52adc2e2026"}, {"problem": 23, "code": "(fn [xs] (reduce #(cons %2 %) '() xs))", "user": "54d5fbe9e4b0a52adc2e2014"}, {"problem": 23, "code": "#(into '() %)", "user": "4e3ff3a4535dc968683fc499"}, {"problem": 23, "code": "#(into () %)", "user": "54cc26c1e4b057c6fda3a28a"}, {"problem": 23, "code": "(fn [x] ((fn rev [x ret] (if (= (count x) 0) ret (rev (rest x) (conj ret (first x))))) x '()))", "user": "54d707bde4b0a52adc2e2025"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "54cd53dae4b057c6fda3a29f"}, {"problem": 23, "code": "(fn [v] (into '() v))", "user": "54d31cf1e4b0e8a36923e600"}, {"problem": 23, "code": "(fn r [xs] (if (empty? xs) [] (conj (r (rest xs)) (first xs))))", "user": "54d7ed8de4b0a52adc2e2034"}, {"problem": 23, "code": "(fn [x]\n \t(reduce conj '() x))", "user": "54d80751e4b0a52adc2e2035"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "54d753ebe4b0a52adc2e2029"}, {"problem": 23, "code": "#(into '() %)", "user": "54cb378be4b057c6fda3a273"}, {"problem": 23, "code": "#(apply conj () %)", "user": "54d893a4e4b0a52adc2e2039"}, {"problem": 23, "code": "#(loop [[tail & more :as all] (seq %)\n           acc '()]\n      (if all\n        (recur more (cons tail acc))\n        acc))", "user": "546a70bae4b00cfc9eacc159"}, {"problem": 23, "code": "#(loop [s % r nil]\n   (if (empty? s)\n     r\n     (recur (rest s) (conj r (first s)))))", "user": "54d8cc38e4b0a52adc2e203e"}, {"problem": 23, "code": "(fn rev [x]\n  (if (empty? x)\n    []\n    (conj (rev (rest x)) (first x))))", "user": "54d902ece4b0a52adc2e2046"}, {"problem": 23, "code": "reduce conj ()", "user": "5005ca29e4b0678c553fc46f"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "54d70f40e4b0a52adc2e2027"}, {"problem": 23, "code": "(fn rev [s] (if (= s '()) s (concat (rev (rest s)) (list (first s)))))", "user": "54c9e00be4b045293a27f683"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "54ba9ee8e4b0ed20f4ff6eb7"}, {"problem": 23, "code": "(fn\n  [lst]\n  (let [reversed\n        (apply conj '() lst)]\n    (if (vector? lst)\n      (into [] reversed)\n      reversed)))", "user": "53f31dafe4b0742d9025b0f0"}, {"problem": 23, "code": "(fn _s [coll] \n  (loop [result [] _coll coll]\n    (if (empty? _coll) \n      result\n      (recur (cons (first _coll) result) (rest _coll))\n    )\n  )\n)", "user": "54b4f9cee4b05787c3b16397"}, {"problem": 23, "code": "reduce conj '()", "user": "54da7e6ee4b024c67c0cf754"}, {"problem": 23, "code": "(fn f [x & r] (if (empty? r) (into r x) (into (f r) x)))", "user": "54dae16de4b024c67c0cf758"}, {"problem": 23, "code": "#(reduce (fn [x y] (conj x y)) '() %)", "user": "54db349de4b024c67c0cf75e"}, {"problem": 23, "code": "reduce #(conj %1 %2) '()", "user": "54d6b822e4b0a52adc2e201d"}, {"problem": 23, "code": "(fn [vec]\n  (loop [res []\n         curVec vec]\n    (if (empty? curVec)\n      res\n      (recur (cons (first curVec) res) (rest curVec)))))", "user": "54db1911e4b024c67c0cf75b"}, {"problem": 23, "code": "#(into () %)", "user": "54d4b3a7e4b0a52adc2e2003"}, {"problem": 23, "code": "#(into '() %)", "user": "54db33f1e4b024c67c0cf75d"}, {"problem": 23, "code": "(fn [coll]\n  (loop [coll coll r (empty coll)]\n    (if (= 0 (count coll))\n      r\n      (recur (rest coll) (cons (first coll) r)))))", "user": "54d109a4e4b0e8a36923e5da"}, {"problem": 23, "code": "#(into ( ) %)", "user": "54bcab07e4b0ed20f4ff6ed5"}, {"problem": 23, "code": "(fn rev [xs]\n  (if (= (rest xs) '())\n      (cons (first xs) '())\n      (concat (rev (rest xs))\n              (cons (first xs) '()))))", "user": "544b94ebe4b0e39780006966"}, {"problem": 23, "code": "(fn r [s] (when-let [n (last s)] (conj (r (drop-last s)) n)))", "user": "54dbcbbde4b024c67c0cf774"}, {"problem": 23, "code": "(fn [x] (reduce #(cons %2 %1) (empty x) x))", "user": "4e690ace535d8ccf87e9fe95"}, {"problem": 23, "code": "(fn [x] (reduce conj '() x))", "user": "54dc4010e4b024c67c0cf77e"}, {"problem": 23, "code": "reduce conj ()", "user": "4ec66e84535d6d7199dd36cd"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "54db5d73e4b024c67c0cf763"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "54dc40b3e4b024c67c0cf77f"}, {"problem": 23, "code": "into ()", "user": "54db0ab8e4b024c67c0cf75a"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "54d127b7e4b0e8a36923e5de"}, {"problem": 23, "code": "reduce conj '()", "user": "54dcb632e4b024c67c0cf786"}, {"problem": 23, "code": "(fn [sequ]\n  (loop [sequ sequ\n         builderSeq (empty sequ)]\n    (if (empty? sequ)\n      (if (set? builderSeq)\n      \t(into (list) builderSeq)\n      \tbuilderSeq)\n    \t(recur (drop-last sequ) (conj builderSeq (last sequ))))))", "user": "54cbd6bae4b057c6fda3a282"}, {"problem": 23, "code": "(fn [v]\n  (loop [tail v\n         rev []]\n    (if (= nil (first tail))\n      rev\n      (recur (butlast tail) (conj rev (last tail)))\n    )))", "user": "54dd4121e4b024c67c0cf793"}, {"problem": 23, "code": "#(loop [lst %\n        rev '()]\n   (if (empty? lst)\n     rev\n     (recur (rest lst) (conj rev (first lst)))))", "user": "54dd3bdde4b024c67c0cf791"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "54dd76c8e4b024c67c0cf794"}, {"problem": 23, "code": "(fn [x]\r\n  (loop [c []\r\n         v x]\r\n    (if (not-empty v)\r\n      (recur (cons (first v) c) (rest v))\r\n      c)))", "user": "54ba8076e4b0ed20f4ff6eb5"}, {"problem": 23, "code": "(fn [x]\n  (letfn [\n          (rev [col ret]\n               (if (empty? col)\n                 ret\n                 (recur (rest col) (cons (first col) ret))))]\n    (rev x [])))", "user": "54d0ceb2e4b0e8a36923e5d0"}, {"problem": 23, "code": "into '()", "user": "54ddb556e4b024c67c0cf798"}, {"problem": 23, "code": "(fn rev[s]\n  (reduce conj '() s))", "user": "54d4ba98e4b0a52adc2e2004"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "54dbe183e4b024c67c0cf778"}, {"problem": 23, "code": "(fn rev [s] (if (empty? (rest s)) [(first s)] (conj (rev (rest s)) (first s))))", "user": "54dc9ba1e4b024c67c0cf785"}, {"problem": 23, "code": "(fn [s] (loop [remain s acc '()] (if (empty? remain) acc (recur (rest remain) (cons (first remain) acc)))))", "user": "54cad59ee4b057c6fda3a26e"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "54df2609e4b024c67c0cf7a9"}, {"problem": 23, "code": "reduce conj '()", "user": "54da46e5e4b024c67c0cf753"}, {"problem": 23, "code": "(fn reverse-it\n[col]\n  (loop [col1 (empty col) col col] \n    (if (empty? col) col1 (recur (cons (first col) col1 ) (rest col)))\n  )\n)", "user": "547b4ec6e4b0c51c1f4d72d5"}, {"problem": 23, "code": "reduce (fn [acc x] (conj acc x)) '()", "user": "54df40aae4b024c67c0cf7ab"}, {"problem": 23, "code": "reduce (fn [x y]\n           (conj (if (list? x)\n                   x\n                   (list x)) y))", "user": "549a1fede4b0f3d1d8e70f6a"}, {"problem": 23, "code": "(partial reduce conj ())", "user": "54b7520de4b0ed20f4ff6e83"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "54e01b31e4b024c67c0cf7b3"}, {"problem": 23, "code": "(fn [s]\n  (apply conj '() s))", "user": "54df838de4b024c67c0cf7ae"}, {"problem": 23, "code": "(fn r [l] (let [[x & xs] (seq l)] (if x (concat (r xs) [x]) [])))", "user": "5066003ee4b0313a384e5647"}, {"problem": 23, "code": "(fn [coll]\n  (reduce conj () coll))", "user": "54271c6de4b01498b1a71b20"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5161d6bae4b009fba0926e39"}, {"problem": 23, "code": "(fn [seq]\n  (reduce\n   (fn [acc item]\n     (cons item acc))\n   [] seq))", "user": "54d87b54e4b0a52adc2e2038"}, {"problem": 23, "code": "(fn [x] (reduce conj '() x))", "user": "549b1e50e4b0f3d1d8e70f7a"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "54e11fdce4b024c67c0cf7c1"}, {"problem": 23, "code": "#(reduce conj () %1)", "user": "54db8ddae4b024c67c0cf767"}, {"problem": 23, "code": "(fn myReverse\n  [sequence]\n  (reduce \n   (fn \n     [reversedSequence current]\n     (conj reversedSequence current))\n   '()\n   sequence))", "user": "54e009dce4b024c67c0cf7b2"}, {"problem": 23, "code": "(fn [x]\n  (reduce #(conj %1 %2) '() x))", "user": "54e2a5f7e4b024c67c0cf7d1"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "54cf26d9e4b018d918be98ca"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "54e0e6e1e4b024c67c0cf7bb"}, {"problem": 23, "code": "(fn [col] (reduce conj () col))", "user": "54e336f3e4b024c67c0cf7da"}, {"problem": 23, "code": "(fn rev [x] \n  (if (empty? x) \n    x \n    (concat (rev (rest x)) (list (first x)) )\n    ))", "user": "54e345a1e4b024c67c0cf7db"}, {"problem": 23, "code": "sort (fn [_ _] true)", "user": "54df3c94e4b024c67c0cf7aa"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "52097e55e4b0e152394d76f4"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "54e3df6ae4b024c67c0cf7e3"}, {"problem": 23, "code": ";#(reduce conj (list) %)\n#(reduce conj () %)", "user": "54e3bd3fe4b024c67c0cf7e0"}, {"problem": 23, "code": "(fn x[c](when c(cons(last c)(x(butlast c)))))", "user": "54e32090e4b024c67c0cf7d9"}, {"problem": 23, "code": "#(reduce (fn [x y] (conj x y)) () %)", "user": "54e4a1dce4b024c67c0cf7e8"}, {"problem": 23, "code": "(fn [x] ((fn [sq acc] (if (empty? sq) acc (recur (rest sq) (cons (first sq) acc))))\n         x ()))", "user": "54e4ef4de4b024c67c0cf7f4"}, {"problem": 23, "code": "into '()", "user": "54e51c7be4b024c67c0cf7f7"}, {"problem": 23, "code": "#(into () %)", "user": "54ca3edce4b057c6fda3a256"}, {"problem": 23, "code": "reduce #(cons %2 %1) []", "user": "54d104a5e4b0e8a36923e5d9"}, {"problem": 23, "code": "(fn [s]\n  (into () s))", "user": "51cf815de4b0e42293a22575"}, {"problem": 23, "code": "into '()", "user": "54e5bdf2e4b024c67c0cf7fe"}, {"problem": 23, "code": "(fn reverse2\n  ([s]\n    (if (= 1 (count s))\n      [(first s)]\n      (conj (reverse2 (rest s)) (first s))\n    )\n  )\n)", "user": "54db8e07e4b024c67c0cf769"}, {"problem": 23, "code": "reduce #(conj % %2) '()", "user": "54cd9519e4b057c6fda3a2a6"}, {"problem": 23, "code": "(fn [z] (loop [x z y '()] \n    (if \n      (empty? x)\n      y \n      (recur (rest x) (conj y (first x))))))", "user": "54d2c4c5e4b0e8a36923e5fa"}, {"problem": 23, "code": "(fn [c]\n    (reduce conj '() c  \n    ) \n  )", "user": "54db8d27e4b024c67c0cf765"}, {"problem": 23, "code": "(fn [xs]\n  (loop [xs xs xs' []]\n    (if (seq xs)\n      (recur (butlast xs) (conj xs' (last xs)))\n      xs')))", "user": "521d064fe4b0c4ef0be830a8"}, {"problem": 23, "code": "reduce #(conj %1 %2) '()", "user": "54e75bf0e4b024c67c0cf813"}, {"problem": 23, "code": "reduce conj ()", "user": "54cbc9ede4b057c6fda3a27f"}, {"problem": 23, "code": "(fn\n    [coll]\n    (let [rev \n          (reduce\n           (fn [acc x]\n             (cons x acc))\n           '() coll)]\n      (if (vector? coll)\n        (vec rev)\n        rev)))", "user": "54e79094e4b024c67c0cf818"}, {"problem": 23, "code": "#(into () %)", "user": "54e540c1e4b024c67c0cf7f9"}, {"problem": 23, "code": "reduce #(cons %2 %1) ()", "user": "54e2a779e4b024c67c0cf7d3"}, {"problem": 23, "code": "(fn [s] (reduce conj () s))", "user": "54e606c3e4b024c67c0cf803"}, {"problem": 23, "code": "(fn [argseq]\n  (loop [xs argseq res '()]\n    (if (empty? xs) res (recur (rest xs) (conj res (first xs))))\n  )\n)", "user": "54e85a7fe4b024c67c0cf823"}, {"problem": 23, "code": "(fn recursive-reverse [coll]\n    (if (empty? coll)\n        []\n        (conj (recursive-reverse (rest coll)) (first coll) )))", "user": "54e5dc08e4b024c67c0cf800"}, {"problem": 23, "code": "(fn [lst]\n  (loop [iter 0 copy '()]\n    (if (= iter (count lst))\n      copy\n      (recur (+ iter 1) (conj copy (nth (seq lst) iter))))))", "user": "54e90803e4b024c67c0cf82f"}, {"problem": 23, "code": "#(into () %)", "user": "54d02d49e4b018d918be98dd"}, {"problem": 23, "code": "apply conj '()", "user": "4e70eae1535d5021c1a89642"}, {"problem": 23, "code": "(fn [ls]\n  (loop [ls ls\n         rev '()]\n    (if (empty? ls)\n      rev\n      (recur (rest ls) (conj rev (first ls))))))", "user": "54ea5e91e4b024c67c0cf840"}, {"problem": 23, "code": "into()", "user": "54eb22a0e4b024c67c0cf845"}, {"problem": 23, "code": "(fn rev \n  ([lst]\n    (rev lst '()))\n  ([lst acu]\n    (if (empty? lst)\n      acu\n      (rev (rest lst) (cons (first lst) acu))\n     )\n  )\n)", "user": "54eb3a9ee4b024c67c0cf846"}, {"problem": 23, "code": "(fn [old]\n  (loop [old old new '()]\n    (if (empty? old)\n      new\n      (recur (next old) (cons (first old) new)))))", "user": "54e10605e4b024c67c0cf7bf"}, {"problem": 23, "code": "#(into () %)", "user": "54dbb21be4b024c67c0cf76f"}, {"problem": 23, "code": "#( into () %)", "user": "54eb97c8e4b024c67c0cf84d"}, {"problem": 23, "code": "(fn [coll]\n  (reduce conj () coll))", "user": "54af3d22e4b09f271ff37d04"}, {"problem": 23, "code": "(fn [s] (reduce conj () s))", "user": "54db07cfe4b024c67c0cf759"}, {"problem": 23, "code": "reduce conj '()", "user": "54e1197fe4b024c67c0cf7c0"}, {"problem": 23, "code": "into '()", "user": "54eca495e4b024c67c0cf855"}, {"problem": 23, "code": "reduce (fn [t v] (cons v t)) '()", "user": "54e24a05e4b024c67c0cf7ce"}, {"problem": 23, "code": "#(into () %)", "user": "54ecd7dde4b024c67c0cf85c"}, {"problem": 23, "code": "#(reduce (fn [acc element] (conj acc element)) '() %)", "user": "54ecd709e4b024c67c0cf859"}, {"problem": 23, "code": "(fn [v0]  \n  (loop [v v0 p []]\n    (println v p)\n    (if (empty? v)\n      p\n      (recur (drop-last v) (conj p (last v))))))", "user": "54d15e4ae4b0e8a36923e5e2"}, {"problem": 23, "code": "#(reduce (fn[acc x] (conj acc x)) '() %)", "user": "54ecd716e4b024c67c0cf85a"}, {"problem": 23, "code": "#(loop [v () c %]\n          (if(empty? c)v\n            (recur (concat v (list(last c))  )(butlast c))))", "user": "54e19a26e4b024c67c0cf7c6"}, {"problem": 23, "code": "(fn revseq \n  [coll]\n  (if-not (empty? coll)\n   (conj (revseq (butlast coll)) (last coll))\n    coll))", "user": "54e4e14ce4b024c67c0cf7f1"}, {"problem": 23, "code": "(fn prob23 [coll]\n  (loop [ncoll () coll coll]\n    (if (seq coll)\n      (recur (conj ncoll (first coll)) (rest coll))\n      ncoll)))", "user": "4f0554aa535dcb61093f6bf5"}, {"problem": 23, "code": "reduce conj ()", "user": "518ba795e4b0f028e99addf0"}, {"problem": 23, "code": "into '()", "user": "54edc818e4b024c67c0cf865"}, {"problem": 23, "code": "(fn [lst] (loop [revlst []\n                 orglst lst]\n            (if (empty? orglst)\n              revlst\n              (recur (conj revlst (last orglst))\n                     (butlast orglst)\n               )\n             )\n           )\n  )", "user": "54a6baaee4b09f271ff37c8a"}, {"problem": 23, "code": "(fn reverse1 [list] \n     (if (empty? list) []\n       (conj (reverse1 (rest list)) (first list) )))", "user": "54ee1c5be4b024c67c0cf86e"}, {"problem": 23, "code": "reduce conj ()\n\n#_(fn rev-seq [x]\n (letfn[(helper [x acc]\n  (cond (empty? x)\n   acc\n   :t\n   (recur (rest x) (cons (first x) acc))))]\n   (helper x ())))\n#_(reduce (fn[x y]\n           (conj x y))'() %)", "user": "52faf67ce4b047fd55837005"}, {"problem": 23, "code": "reduce conj '()", "user": "54edcf96e4b024c67c0cf866"}, {"problem": 23, "code": "(fn r \n    ([coll] (r coll (list)))\n    ([coll sofar] (if (empty? coll) sofar\n                    (conj (r (butlast coll) sofar) (last coll))\n                    )\n    \n  )\n  )", "user": "54cb3497e4b057c6fda3a272"}, {"problem": 23, "code": "#(into () %)", "user": "52ca9513e4b071a8d36bd3e4"}, {"problem": 23, "code": "(fn [coll]\n  (loop [r (rest coll)\n         acc (conj () (first coll))]\n    (if (= (count r) 0)\n      acc\n      (recur (rest r) (conj acc (first r))))))", "user": "54de7948e4b024c67c0cf7a4"}, {"problem": 23, "code": "#(into () %)", "user": "54ef424be4b024c67c0cf881"}, {"problem": 23, "code": "(fn [lst] (reduce (fn [acc x] (cons x acc)) [] lst))", "user": "54ef4a1de4b024c67c0cf882"}, {"problem": 23, "code": "reduce conj '()", "user": "54e4c888e4b024c67c0cf7ee"}, {"problem": 23, "code": "apply conj '()", "user": "54ecb962e4b024c67c0cf856"}, {"problem": 23, "code": "reduce (fn [a b] (cons b a)) nil", "user": "54e7b512e4b024c67c0cf81c"}, {"problem": 23, "code": "#(into '() %)", "user": "53ec14b9e4b036ad0777e500"}, {"problem": 23, "code": "#(reduce (fn [end start] (cons start end)) [] %)", "user": "54f0433ce4b024c67c0cf893"}, {"problem": 23, "code": "#(reduce (fn [s v] (conj s v)) '() % )", "user": "54ef4a1ee4b024c67c0cf883"}, {"problem": 23, "code": "#(reduce (fn [list-so-far elem] (cons elem list-so-far)) '() %)", "user": "54eee3a3e4b024c67c0cf879"}, {"problem": 23, "code": "(fn [x] (reduce conj '() x))", "user": "54f09599e4b024c67c0cf89d"}, {"problem": 23, "code": "into ()", "user": "54f0c067e4b024c67c0cf8a3"}, {"problem": 23, "code": "(fn my-rev [coll]\n  (if (seq coll)\n    (concat (my-rev (rest coll)) [(first coll)])\n    []))", "user": "54df7922e4b024c67c0cf7ad"}, {"problem": 23, "code": "#(into () %)", "user": "54efdf03e4b024c67c0cf88c"}, {"problem": 23, "code": "(fn [col] (#(if (= %1 '()) %2 (recur (rest %1) (conj %2 (first %1)))) col '()))", "user": "54f1b4e7e4b024c67c0cf8b5"}, {"problem": 23, "code": "(fn [seq]\n  (sort (fn [a b] -1) seq))", "user": "546ff835e4b00cfc9eacc1b4"}, {"problem": 23, "code": "(partial reduce conj ())", "user": "54f0d3fde4b024c67c0cf8a6"}, {"problem": 23, "code": "(fn [xs]\n  (loop [ret [] xs xs]\n    (if (empty? xs)\n      ret\n      (recur (conj ret (last xs)) (drop-last xs)))))", "user": "5293a603e4b0239c8a67af42"}, {"problem": 23, "code": "(fn [s] (into '() s))", "user": "54f232f1e4b024c67c0cf8bf"}, {"problem": 23, "code": "(fn my-reverse [lst]\n  (loop [old (rest lst), new (cons (first lst) ())]\n    (if (empty? old)\n      new\n      (recur (rest old) (cons (first old) new)))))", "user": "54f0c18ee4b024c67c0cf8a4"}, {"problem": 23, "code": "(fn [c]\n  (let [s (seq c)]\n    (map #(nth s (- % 1))\n         (take (count c) (iterate dec (count c))))))", "user": "54f26266e4b024c67c0cf8c5"}, {"problem": 23, "code": "#(reduce (fn [x y] (conj x y)) '() %)", "user": "54f2fe9fe4b050824f58f5b8"}, {"problem": 23, "code": "(fn [coll]\n  (loop [coll coll result []]\n    (if (empty? coll)\n      result\n      (recur (rest coll) (into [] (cons (first coll) result))))))", "user": "54f03f8ce4b024c67c0cf891"}, {"problem": 23, "code": "reduce conj '()", "user": "54f1e004e4b024c67c0cf8b9"}, {"problem": 23, "code": "(fn [c] (reduce conj '() c))", "user": "54f14538e4b024c67c0cf8ae"}, {"problem": 23, "code": "reduce conj '()", "user": "54f32614e4b050824f58f5ba"}, {"problem": 23, "code": "reduce conj ()", "user": "52a0f9c4e4b04e0c58e87bd0"}, {"problem": 23, "code": "reduce conj ()", "user": "504e2d18e4b0f6ff3350c47a"}, {"problem": 23, "code": "#(into () %)", "user": "54f3970fe4b050824f58f5c5"}, {"problem": 23, "code": "(fn func \n  ([l1] (func l1 '()))\n  ([l1, l2] \n   (if (= l1 '()) \n     l2\n     (func (rest l1) (conj l2 (first l1))))))", "user": "54f3b50de4b050824f58f5c9"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "54f2a1b8e4b024c67c0cf8cb"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "54cfb5abe4b018d918be98d3"}, {"problem": 23, "code": "#(into () %)", "user": "54e0bb4fe4b024c67c0cf7b8"}, {"problem": 23, "code": "(fn rev [l]\n  (if (empty? l) [] (conj (rev (rest l)) (first l))))", "user": "54f06aede4b024c67c0cf896"}, {"problem": 23, "code": "into ()", "user": "54f04020e4b024c67c0cf892"}, {"problem": 23, "code": "apply conj ()", "user": "54f4e286e4b0f2f3c5226e8c"}, {"problem": 23, "code": "(fn [seq]\n  (reduce conj () seq))", "user": "54a97853e4b09f271ff37cae"}, {"problem": 23, "code": "(fn [s]\n  (loop [acc []\n         lst s]\n    (if (empty? lst)\n      acc\n      (recur (conj acc (last lst)) (butlast lst)))))", "user": "5498e155e4b0b312c081ff86"}, {"problem": 23, "code": "(fn recursive-reverse [coll]\n  (if (empty? coll)\n    []\n    (conj (recursive-reverse (rest coll)) (first coll))))", "user": "54f53d3ce4b0f2f3c5226e90"}, {"problem": 23, "code": "reduce #(conj %1 %2) '()", "user": "54f39cd6e4b050824f58f5c6"}, {"problem": 23, "code": "sort (fn [a b] (compare b a))", "user": "54f583bbe4b0f2f3c5226e93"}, {"problem": 23, "code": "reduce #(conj %1 %2) (list)", "user": "54f4a457e4b0f2f3c5226e83"}, {"problem": 23, "code": "into ()", "user": "54f49c39e4b0f2f3c5226e81"}, {"problem": 23, "code": "(fn [q]\n  (loop [s q  t '()]\n  \t(if (empty? s) t (recur (rest s)(cons (first s) t)))\n   )\n )", "user": "54f239bde4b024c67c0cf8c1"}, {"problem": 23, "code": "(fn my-reverse [x]\n  (loop [result '()\n         lst x]\n    (if (empty? lst)\n      result\n      (recur (conj result (first lst)) (rest lst)))))", "user": "54f64e99e4b0f2f3c5226ea4"}, {"problem": 23, "code": "apply conj ()", "user": "54f6399be4b0f2f3c5226ea3"}, {"problem": 23, "code": "(fn [s] ((fn iter [s r] (if (empty? s) r (iter (rest s) (cons (first s) r)))) s '()))", "user": "54f5fb57e4b0f2f3c5226e9f"}, {"problem": 23, "code": "#(loop [s % acc []]\n   (if (seq s)\n     (recur (rest s) (cons (first s) acc))\n     acc))", "user": "54dbbe4fe4b024c67c0cf772"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "54ea2476e4b024c67c0cf83a"}, {"problem": 23, "code": "(fn [coll] (reduce conj '() coll))", "user": "54f73502e4b01ecee9d88817"}, {"problem": 23, "code": "#(into () %1)", "user": "54f6f00fe4b01ecee9d88814"}, {"problem": 23, "code": "(fn[theSet] (\n             reduce (\n                     fn[memo v] (cons v memo)\n                     ) [] theSet))", "user": "54f3f51ae4b050824f58f5ce"}, {"problem": 23, "code": "(fn [x] (reduce conj '() x))", "user": "4f03e60d535dcb61093f6b7a"}, {"problem": 23, "code": "(fn [x]\n   (loop [y x z []]\n     (if (> (count y) 0)\n       (recur (drop-last 1 y) (conj z (last y)) \n              )\n       (identity z)\n       )\n     ))", "user": "54f3e216e4b050824f58f5cc"}, {"problem": 23, "code": "into '()", "user": "524ea587e4b0541d1855b7e9"}, {"problem": 23, "code": "(partial reduce #(cons %2 %1) '())", "user": "54f8aabfe4b01ecee9d8882b"}, {"problem": 23, "code": "(fn [coll]\n  (#(if (= %2 '())\n      %1\n      (recur (concat [(first %2)] %1) (rest %2)))\n    [] coll))", "user": "54d9366ce4b0a52adc2e204e"}, {"problem": 23, "code": "#(into '() %)", "user": "54f76941e4b01ecee9d8881a"}, {"problem": 23, "code": "(fn foo [xs]\n    (if (< (count xs) 2)\n      xs \n      (cons (last xs) (foo (butlast xs)))))", "user": "54f9920ee4b01ecee9d8883f"}, {"problem": 23, "code": "#(reduce (fn [x y] (cons y x)) [] %)", "user": "54f97e22e4b01ecee9d8883a"}, {"problem": 23, "code": "(fn [xs]\n  (reduce #(conj %1 %2) '() xs)\n  )", "user": "54f90537e4b01ecee9d88833"}, {"problem": 23, "code": "reduce (fn [l n] (cons n l)) []", "user": "54fa1641e4b0cf870d9346fc"}, {"problem": 23, "code": "(fn [coll]\n  (loop [c coll x '()]\n    (if (empty? c)\n      x\n      (recur (rest c) (conj x (first c))))))", "user": "54f92d7fe4b01ecee9d88836"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "539c736ce4b0b51d73faaf2b"}, {"problem": 23, "code": "(fn [seq] (loop [seq seq rev '()]\n  (if (empty? seq) rev (recur (rest seq) (cons (first seq) rev)))\n  ))", "user": "54fa60dfe4b0cf870d934704"}, {"problem": 23, "code": "(fn rev [x] (if (= 1 (count x)) x (cons (last x) (rev (drop-last x)))))", "user": "54e0a9c3e4b024c67c0cf7b5"}, {"problem": 23, "code": "(fn me [args & [news]]\n   (if (empty? args)\n     news\n     (me (rest args) (conj (or news '()) (first args))))\n   )", "user": "54eff2bee4b024c67c0cf88d"}, {"problem": 23, "code": "reduce #(conj %1 %2) '()", "user": "54f773bfe4b01ecee9d8881f"}, {"problem": 23, "code": "(fn r\n  ([s] (r s []))\n   ([s t] (if (zero? (count s))\n    t\n    (r (rest s) (cons (first s) t))))\n  )", "user": "54d1b6ffe4b0e8a36923e5e6"}, {"problem": 23, "code": "#(reduce (fn [acc x] (conj acc x)) '() %)", "user": "54fc7edce4b07d26eda61d2c"}, {"problem": 23, "code": "(fn [coll]\n  (apply conj nil coll))", "user": "52946307e4b02ebb4ef7500a"}, {"problem": 23, "code": "reduce conj '()", "user": "54f904c2e4b01ecee9d88832"}, {"problem": 23, "code": "#(into () %)", "user": "549227d8e4b0b312c081ff3f"}, {"problem": 23, "code": "(fn [x]\n  (into '() x))", "user": "544e5ecae4b0e39780006984"}, {"problem": 23, "code": "#(into () %1)", "user": "549674cde4b0b312c081ff66"}, {"problem": 23, "code": "(fn [xs]\n  (loop [xs xs acc '()]\n    (if (empty? xs)\n      acc\n      (recur (rest xs) (conj acc (first xs))))))", "user": "54fd93bbe4b07d26eda61d36"}, {"problem": 23, "code": "(fn [x] (reduce #(cons %2 %1) [] x))", "user": "54e84d1ee4b024c67c0cf822"}, {"problem": 23, "code": "(fn [xs] (reduce #(cons %2 %1) '() xs))", "user": "54f9d900e4b01ecee9d88844"}, {"problem": 23, "code": "reduce conj '()", "user": "54fc7d89e4b07d26eda61d2b"}, {"problem": 23, "code": "(fn [coll]\n  (loop [coll coll acc []]\n    (if (empty? coll)\n      acc\n      (recur (butlast coll) (conj acc (last coll))))))", "user": "54fdbe3fe4b07d26eda61d3b"}, {"problem": 23, "code": "(fn f [l] (if (empty? l) l (concat (f (rest l)) [(first l)])))", "user": "54137308e4b01498b1a719e0"}, {"problem": 23, "code": "(partial reduce #(cons %2 %1) [])", "user": "54febf4be4b07d26eda61d45"}, {"problem": 23, "code": "#(reduce (fn [a b] (conj a b)) '() %)", "user": "54ff2342e4b07d26eda61d49"}, {"problem": 23, "code": "apply conj '()", "user": "54ff074de4b07d26eda61d47"}, {"problem": 23, "code": "into ()", "user": "54ff6084e4b07d26eda61d50"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "54ffbad3e4b07d26eda61d54"}, {"problem": 23, "code": "#(map last (sort-by key > (zipmap (range) %)))", "user": "54db3d82e4b024c67c0cf75f"}, {"problem": 23, "code": "(fn [col] (reduce conj () col))", "user": "54ec7f52e4b024c67c0cf853"}, {"problem": 23, "code": "(fn my_rev [l] (if (nil? l) (list) (conj (my_rev (butlast l)) (last l))))", "user": "550065a4e4b07d26eda61d5a"}, {"problem": 23, "code": "(fn [x] (reduce conj '() x))", "user": "54f98ee3e4b01ecee9d8883e"}, {"problem": 23, "code": "(fn rvrs [v]\n (loop [rtrn\n  (loop\n   [x (vec v), n (dec (count v))]\n   (if \n    (> n 0)\n    (recur\n     (conj x\n      (nth x (dec n)))\n     (dec n)) \n    x)),\n  i (dec (count v))] \n  (if (> i 0)\n   (recur\n    (rest rtrn)\n    (dec i)\n   )\n   rtrn)))", "user": "54ef8d80e4b024c67c0cf887"}, {"problem": 23, "code": "into ()", "user": "5501de12e4b07d26eda61d7b"}, {"problem": 23, "code": "#(into (list) %)", "user": "54ca9311e4b057c6fda3a263"}, {"problem": 23, "code": "(fn f [li]\n  (if (empty? li) []\n  \t(cons (last li) (f (take (dec (count li)) li)))))", "user": "5501f45fe4b07d26eda61d7f"}, {"problem": 23, "code": "(fn[coll]\n  (loop [coll coll\n         rev []]\n    (if(empty? coll)\n    \trev\n    \t(recur (rest coll) (cons (first coll) rev)))))", "user": "54b31445e4b09f271ff37d35"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "54eea988e4b024c67c0cf875"}, {"problem": 23, "code": "reduce conj ()", "user": "550320f8e4b086ebe8a79c68"}, {"problem": 23, "code": "(fn [col] (reduce conj () col))", "user": "55031638e4b086ebe8a79c67"}, {"problem": 23, "code": "(fn [col]\n  (loop [c col\n         target []]\n    (if (seq c)\n      (recur (butlast c) (conj target (last c)))\n      target)))", "user": "54de6820e4b024c67c0cf79f"}, {"problem": 23, "code": "reduce #(conj %1 %2) '()", "user": "55022d7ce4b07d26eda61d84"}, {"problem": 23, "code": "(fn [xs]\n  (loop [ys xs rs []]\n    (if (empty? ys)\n      rs\n      (recur (rest ys) (concat [(first ys)] rs)))))", "user": "550212c0e4b07d26eda61d80"}, {"problem": 23, "code": "(fn x [l] \n  (if (empty? l)\n  l\n  \n   (conj (x (butlast l)) (last l))\n  )\n  )", "user": "55034bf0e4b086ebe8a79c6d"}, {"problem": 23, "code": "(fn __ [coll] (reduce conj '() coll))", "user": "543a8256e4b032a45b869327"}, {"problem": 23, "code": "reduce conj '()", "user": "5446ea11e4b032a45b8693b7"}, {"problem": 23, "code": "(fn [param] (reduce #(concat [%2] %1) [] param))", "user": "550345fee4b086ebe8a79c6c"}, {"problem": 23, "code": "(fn my-reverse [coll]\n  (if (first coll)\n    (concat (my-reverse (rest coll)) [(first coll)])\n    []))", "user": "55044fb8e4b086ebe8a79c7a"}, {"problem": 23, "code": "(fn [list] \n  (reduce \n   #(conj %1 %2)\n   '() list))", "user": "550309b9e4b086ebe8a79c65"}, {"problem": 23, "code": "#(into () %)", "user": "541c5b3be4b01498b1a71a75"}, {"problem": 23, "code": "#(vec (into (list) %))", "user": "5504dd64e4b086ebe8a79c83"}, {"problem": 23, "code": "into '()", "user": "55058a4fe4b086ebe8a79c89"}, {"problem": 23, "code": "#(loop [xs % ys []]\n   (if (empty? xs)\n     ys\n     (recur (drop-last xs) (conj ys (last xs)))))", "user": "550609b3e4b021ccfedb9695"}, {"problem": 23, "code": "#(into () %)", "user": "5426200ae4b01498b1a71b16"}, {"problem": 23, "code": "(fn [sq] \n  (loop [sq  sq\n         res []]\n    (if (empty? sq)\n      res\n      (recur (rest sq) (cons (first sq) res)))))", "user": "55074092e4b021ccfedb96a4"}, {"problem": 23, "code": "#(into '() %)", "user": "550615c0e4b021ccfedb9696"}, {"problem": 23, "code": "#(into () %)", "user": "5500721be4b07d26eda61d5b"}, {"problem": 23, "code": "(fn [x] (reduce conj () x))", "user": "55016428e4b07d26eda61d72"}, {"problem": 23, "code": "#(into '() %)", "user": "55088bb3e4b06e50f9beb10c"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "55074035e4b021ccfedb96a3"}, {"problem": 23, "code": "#(loop [data %1\n         result []]\n   (if (empty? data)\n     result\n     (recur (drop-last data)\n            (conj result (last data)))))", "user": "5508102ee4b021ccfedb96b0"}, {"problem": 23, "code": "#(into '() %)", "user": "55096255e4b06e50f9beb116"}, {"problem": 23, "code": "(fn my-reverse\n  [seq]\n     (cond (= seq nil) nil\n           :else (cons (last seq)\n                       (my-reverse (butlast seq)))))", "user": "54d4ec31e4b0a52adc2e2007"}, {"problem": 23, "code": "(fn rev                                                                                                                \n   [sequ]  (if (= sequ []) [] (conj (rev (rest sequ)) (first sequ) ))                                                     \n   )", "user": "5509bf71e4b06e50f9beb122"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5509a755e4b06e50f9beb11b"}, {"problem": 23, "code": "(fn [x] (reduce conj () x))", "user": "5509a176e4b06e50f9beb119"}, {"problem": 23, "code": "#(reduce conj () %1)", "user": "5509b434e4b06e50f9beb11e"}, {"problem": 23, "code": "reduce conj '()", "user": "54f15cb8e4b024c67c0cf8b1"}, {"problem": 23, "code": "(fn [x] (reduce conj () x))", "user": "5509b0bce4b06e50f9beb11d"}, {"problem": 23, "code": "reduce conj '()", "user": "54de7108e4b024c67c0cf7a2"}, {"problem": 23, "code": "into()", "user": "5509a9bee4b06e50f9beb11c"}, {"problem": 23, "code": "into '()", "user": "550aeaade4b06e50f9beb134"}, {"problem": 23, "code": "#(loop [s % r nil] (if (empty? s)\n                 r\n                 (recur (rest s) (conj r (first s)))))", "user": "550aeddae4b06e50f9beb135"}, {"problem": 23, "code": "#(into '() %)", "user": "53e4e21ce4b036ad0777e450"}, {"problem": 23, "code": "reduce #(conj %1 %2) nil", "user": "5505ceb3e4b086ebe8a79c8b"}, {"problem": 23, "code": "(fn a [l]\n  (if (= l '())\n    '()\n   (concat (a (rest l)) (list(first l)))))", "user": "550babf3e4b06e50f9beb149"}, {"problem": 23, "code": "(fn customrev [x]\n\t (if (not-empty x)\n\t   (concat  (customrev (rest x)) (list (first x)) )\n\t ))", "user": "54fae43ae4b0cf870d934708"}, {"problem": 23, "code": "#(reduce (fn [x y] (conj x y)) '() %)", "user": "550ccedfe4b06e50f9beb158"}, {"problem": 23, "code": "(fn my-reverse[s] \n  (loop [r s\n         n '()]\n  \t(if (empty? r)\n      n\n      (recur (rest r) (conj n (first r))))))", "user": "550c55d0e4b06e50f9beb14d"}, {"problem": 23, "code": "(fn blah\n  ([seq]\n   (blah [] seq))\n  ([result seq]\n   (if (> (count seq) 1)\n  \t(blah (into result [(last seq)]) (drop-last seq))\n    (into result seq))))", "user": "54fea37be4b07d26eda61d44"}, {"problem": 23, "code": "into ()", "user": "54f5746de4b0f2f3c5226e92"}, {"problem": 23, "code": "reduce conj (list)", "user": "542725fce4b01498b1a71b22"}, {"problem": 23, "code": "#(into '() %)", "user": "550d54f6e4b06e50f9beb15c"}, {"problem": 23, "code": "reduce conj '()", "user": "550cd7d7e4b06e50f9beb159"}, {"problem": 23, "code": "(fn foo [coll] (let [x (first coll) xs (rest coll)] (if (empty? xs) (conj [] x) (conj      (foo xs) x))))", "user": "5509bec5e4b06e50f9beb121"}, {"problem": 23, "code": "#(loop [c % a ()] (if (seq c) (recur (rest c) (conj a (first c))) a))", "user": "54e4edcae4b024c67c0cf7f3"}, {"problem": 23, "code": "#(reduce (fn [x y] (conj x y)) '() %)", "user": "550d4906e4b06e50f9beb15b"}, {"problem": 23, "code": "reduce #(conj %1 %2) '()", "user": "550174b5e4b07d26eda61d73"}, {"problem": 23, "code": "(fn [x] (map (fn [y] (nth (into [] x) y)) (map #(- (count x) (+ % 1)) (range (count x)))))", "user": "550cbb3be4b06e50f9beb155"}, {"problem": 23, "code": "(fn mRev [x] (let [n (count x)] (if (= n 0) nil (cons (last x) (mRev (take (- n 1) x))))))", "user": "550e0373e4b06e50f9beb162"}, {"problem": 23, "code": "#(reduce (fn [acc item] (conj acc item)) '() %1)", "user": "550e0951e4b06e50f9beb163"}, {"problem": 23, "code": "reduce #(conj %1 %2) '()", "user": "550da0c7e4b06e50f9beb15e"}, {"problem": 23, "code": "(fn [coll]\n  (reduce (fn [pred item] (conj pred item)) '() coll))", "user": "525599bfe4b0541d1855b9e8"}, {"problem": 23, "code": "#(loop [coll % res-coll ()]\n  (if (empty? coll)\n    res-coll\n    (recur (rest coll) (conj res-coll (first coll)))))", "user": "550e8e04e4b06e50f9beb167"}, {"problem": 23, "code": "(fn [coll] (reduce conj () coll))", "user": "54fd5e2de4b07d26eda61d33"}, {"problem": 23, "code": "(fn [coll] (reduce conj '() coll))", "user": "550f1e51e4b06e50f9beb172"}, {"problem": 23, "code": "apply conj ()", "user": "550f70bee4b06e50f9beb177"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5507cfd3e4b021ccfedb96ad"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "550fdc1de4b06e50f9beb17d"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "55101237e4b06e50f9beb181"}, {"problem": 23, "code": "(fn [coll]\n  (reduce #(cons %2 %1) '() coll))", "user": "5426fb8fe4b01498b1a71b1f"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "550eb23ae4b06e50f9beb168"}, {"problem": 23, "code": "(fn [coll] (reduce conj '() coll))", "user": "54bca097e4b0ed20f4ff6ed4"}, {"problem": 23, "code": "reduce conj '()", "user": "54cbd97ae4b057c6fda3a283"}, {"problem": 23, "code": "(fn [coll]\n  (loop [r-coll ()\n         remaining-coll coll]\n    (if (empty? remaining-coll)\n      r-coll\n      (recur (conj r-coll (first remaining-coll)) (rest remaining-coll)))))", "user": "54bd6cb2e4b0ed20f4ff6ede"}, {"problem": 23, "code": "(fn [s] (let [myfunc (fn [s r] (if (empty? s) r (recur (rest s) (cons (first s) r))))] (myfunc s '())))", "user": "550ff2a3e4b06e50f9beb17f"}, {"problem": 23, "code": "(fn [col]\n  (loop [new-col ()\n         old-col col]\n    (if (nil? old-col)\n      new-col\n      (recur (conj new-col (first old-col))\n             (next old-col)))))", "user": "5511b44be4b06e50f9beb197"}, {"problem": 23, "code": "(fn myrev [a] (reduce #(cons %2 %1) (empty a) a))", "user": "5511dfafe4b06e50f9beb19c"}, {"problem": 23, "code": "#(loop [d % rd []] (if (empty? d) rd (recur (rest d) (concat (list (first d)) rd))))", "user": "55126109e4b06e50f9beb1a5"}, {"problem": 23, "code": "reduce #(conj % %2) '()", "user": "55092319e4b06e50f9beb113"}, {"problem": 23, "code": "reduce (fn [xs e] (conj xs e)) '()", "user": "5512967ee4b06e50f9beb1ae"}, {"problem": 23, "code": "(fn [s]\n  (reduce conj '() s)  \n  )", "user": "5481e55ce4b0e286459a1175"}, {"problem": 23, "code": "#(reduce (fn [x y] (conj x y)) '() %)", "user": "5512cd55e4b055c2f668d4ba"}, {"problem": 23, "code": "(fn [coll]\n  (let [cnt (count coll)]\n  (loop [acc '()\n         n 0]\n    (if (= n cnt)\n      acc\n      (recur (conj acc (first (drop n coll))) (inc n))))))", "user": "5512aca6e4b055c2f668d4b4"}, {"problem": 23, "code": "#(into () %)", "user": "546be022e4b00cfc9eacc171"}, {"problem": 23, "code": "#(loop [xs % sx '()] \n   (if (empty? xs) sx \n     (recur (rest xs) (conj sx (first xs)))))", "user": "5510f734e4b06e50f9beb18f"}, {"problem": 23, "code": "(fn [x]\n  (loop [x x y ()]\n    (if (seq x)\n      (recur (rest x) (cons (first x) y))\n      y\n      )\n    )\n  )", "user": "5512b15ae4b055c2f668d4b5"}, {"problem": 23, "code": "(fn [coll] (reduce conj '() coll))", "user": "55116582e4b06e50f9beb192"}, {"problem": 23, "code": "(fn [items] (reduce conj () items))", "user": "5513dec7e4b055c2f668d4cd"}, {"problem": 23, "code": "(fn [coll] (reduce (fn [prev el] (conj prev el)) '() coll))", "user": "5514a60fe4b055c2f668d4d7"}, {"problem": 23, "code": "(fn [x] (reduce conj () x))", "user": "54534c83e4b0e397800069cd"}, {"problem": 23, "code": "(fn my-reverse\n  [l]\n  (loop [n (dec (count l))\n         ret []]\n    (if (> n -1) \n      (recur (dec n) (conj ret (#(->> %1 (drop %2) first) l n) ) ) ret ) ))", "user": "5514534ce4b055c2f668d4d3"}, {"problem": 23, "code": "reduce conj '()", "user": "5511fd7ee4b06e50f9beb19e"}, {"problem": 23, "code": "(fn [coll]\n  (loop [c coll r ()]\n    (if (empty? c)\n      r\n      (recur (rest c) (conj r (first c))))))", "user": "55151417e4b055c2f668d4da"}, {"problem": 23, "code": "(fn [coll] (reduce conj '() coll))", "user": "551532c5e4b055c2f668d4dd"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "55154abce4b055c2f668d4e0"}, {"problem": 23, "code": "#(reduce (fn [coll item] (cons item coll)) (empty %) %)", "user": "55158345e4b055c2f668d4e8"}, {"problem": 23, "code": "(fn mrev [x]\n  (if (empty? x)\n    nil\n    (concat (mrev (rest x)) [(first x)])))", "user": "5515649fe4b055c2f668d4e3"}, {"problem": 23, "code": "reduce conj `()", "user": "5510838ee4b06e50f9beb185"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "551535cee4b055c2f668d4df"}, {"problem": 23, "code": "#(if (nil? (last %2))\n   %1\n   (recur\n    (conj %1 (last %2))\n    (butlast %2))\n   ) []", "user": "550340d9e4b086ebe8a79c6b"}, {"problem": 23, "code": "(partial reduce (fn [reversed item] (cons item reversed)) nil)", "user": "5515b138e4b055c2f668d4ed"}, {"problem": 23, "code": "(fn [coll] \n    (loop [lst coll, revColl ()]\n      (if (empty? lst)\n        revColl\n        (recur (rest lst) (conj revColl (first lst) ))\n        )))", "user": "533c2605e4b0e30313ee6cd7"}, {"problem": 23, "code": "reduce (fn [m n] (cons n m)) []", "user": "5510aa92e4b06e50f9beb188"}, {"problem": 23, "code": "#(into () %)", "user": "5516bd41e4b06a49daca83b7"}, {"problem": 23, "code": "(fn rev-seq\n  ( [elements] (rev-seq (list (first elements)) (rest elements)))\n  ( [reversed tail]\n    (if (empty? tail)\n      reversed\n      (rev-seq (conj reversed (first tail)) (rest tail)))))", "user": "5515c8b1e4b055c2f668d4f2"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "551760a5e4b06a49daca83c3"}, {"problem": 23, "code": "reduce #(conj %1 %2) nil", "user": "55164856e4b06a49daca83b3"}, {"problem": 23, "code": "reduce (fn [x y] (conj x y)) '()", "user": "5517f5c5e4b06a49daca83c7"}, {"problem": 23, "code": "#(loop \n   [n (dec (count %))\n    rcoll []\n    v (into [] %)]\n   (if (>= n 0)\n\t (recur (dec n) (conj rcoll (v n)) v)\n     rcoll\n     )\n   )", "user": "5510d948e4b06e50f9beb18d"}, {"problem": 23, "code": "(fn r3verse\n([coll](r3verse coll []))\n([coll result]\n  (if (empty? coll)\n     result\n     (recur (drop-last coll) (conj result(last coll))))))", "user": "55171140e4b06a49daca83be"}, {"problem": 23, "code": "into '()", "user": "55170dd9e4b06a49daca83bd"}, {"problem": 23, "code": "into ()", "user": "54f0aab1e4b024c67c0cf8a1"}, {"problem": 23, "code": "(fn [v] (\n  (fn [v1 v2]\n    (if (= v1 ())\n      v2\n      (recur (rest v1) (conj v2 (first v1)))\n    )\n  )\n v '() )\n)", "user": "55188c5de4b06a49daca83cc"}, {"problem": 23, "code": "(fn [seq]\n  (loop [forward seq\n         backward ()]\n    (if (empty? forward)\n      backward\n      (recur (rest forward) (conj backward (first forward))))))", "user": "55183a11e4b06a49daca83ca"}, {"problem": 23, "code": "#(reduce (fn [c e] (concat [e] c)) [] %)", "user": "50f4eee0e4b004d36493052d"}, {"problem": 23, "code": "(fn [lst] (reduce (fn [m x] (into [x] m)) [] lst))", "user": "551589cee4b055c2f668d4e9"}, {"problem": 23, "code": "into ()", "user": "4dbd7107535d020aff1edf42"}, {"problem": 23, "code": "reduce conj '()", "user": "546805d6e4b00cfc9eacc134"}, {"problem": 23, "code": "(fn [coll]\n  (loop [newcoll '()\n         coll coll\n         n (count coll)]\n    (if (zero? n)\n      newcoll\n      (recur (conj newcoll (first coll)) (rest coll) (- n 1)))))", "user": "5519a856e4b00ace28fe6e30"}, {"problem": 23, "code": "#(into () %)", "user": "5516fd2ce4b06a49daca83bb"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "50c6052ce4b0c9dc10d15c56"}, {"problem": 23, "code": "(partial reduce conj ())", "user": "54d9f7f1e4b024c67c0cf751"}, {"problem": 23, "code": "(fn [x]\n  (loop [x x acc ()]\n    (if (empty? x)\n      acc\n      (recur (rest x) (cons (first x) acc)))))", "user": "551a21ece4b091ff45eda993"}, {"problem": 23, "code": "(fn my-reverse\n  ([lst] (my-reverse lst []))\n  ([lst res]\n     (if (empty? lst)\n       res\n       (my-reverse (drop-last lst) (conj res (last lst))))))", "user": "551747e0e4b06a49daca83c1"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "54ee1b23e4b024c67c0cf86d"}, {"problem": 23, "code": "(fn [x]\n  (letfn [(my-reverse  [rem acc]\n            (if (empty? rem)\n              acc\n              (recur (rest rem) (conj acc (first rem)))))]\n    (my-reverse x '())))", "user": "51bb08a4e4b0fe3ecfb46446"}, {"problem": 23, "code": "(fn [s]\n  (loop [l (last s) \n         r (butlast s)\n         out []]\n    (if (nil? l)\n      out\n      (recur (last r) (butlast r) (conj out l)))\n    ))", "user": "551a64cde4b091ff45eda996"}, {"problem": 23, "code": "(fn [startlist] (loop [result '() l startlist] (if (empty? l) result (recur (conj result (first l)) (rest l)))))", "user": "54857657e4b0e286459a11ac"}, {"problem": 23, "code": "#(into () %)", "user": "514f0a28e4b019235f6c059a"}, {"problem": 23, "code": "reduce (fn [x y] (conj x y)) '()", "user": "551acf9de4b07993ea3788c5"}, {"problem": 23, "code": "(fn [l] (reduce conj '() l ))", "user": "550b5a53e4b06e50f9beb142"}, {"problem": 23, "code": "(fn [l]\n  (loop [from l to '()]\n  \t(if (empty? from) to\n      (recur (rest from) (conj to (first from))))))", "user": "551afdf8e4b07993ea3788cb"}, {"problem": 23, "code": "#(into () %)", "user": "551acc5ae4b07993ea3788c4"}, {"problem": 23, "code": "(fn [seqn] (reduce (fn [s, i] (cons i s)) (empty seqn) seqn))", "user": "5519c157e4b00ace28fe6e32"}, {"problem": 23, "code": "#(reduce (fn [x y] (conj x y)) '() %)", "user": "551b329ae4b07993ea3788cf"}, {"problem": 23, "code": "(fn my-reverse \n  ([x] (my-reverse x '()))\n  ([x y]\n  \t(if-not (nil? x)\n        (let [y (cons (first x) y)]\n        \t(my-reverse (next x) y))\n      y)))", "user": "551c594de4b07993ea3788dc"}, {"problem": 23, "code": "(fn [l]\n  (letfn [(internal [l acc]\n            (if (empty? l)\n              acc\n              (internal (rest l)\n                        (cons (first l) acc))))]\n          (internal l '())))", "user": "551c6bcee4b07993ea3788df"}, {"problem": 23, "code": "(fn rev [s]\n  (if (empty? s)\n    nil\n    (cons (last s) (rev (butlast s)))))", "user": "551b8e2ae4b07993ea3788d3"}, {"problem": 23, "code": "#(loop [x % y (list)] (if (empty? x) y (recur (rest x) (conj y (first x)))))", "user": "551cade8e4b07993ea3788e2"}, {"problem": 23, "code": "into '()", "user": "54f9c4dfe4b01ecee9d88841"}, {"problem": 23, "code": "reduce #(cons %2 %) []", "user": "551c66dae4b07993ea3788de"}, {"problem": 23, "code": "(fn [xs] (apply conj () xs))", "user": "5515f96ce4b055c2f668d4f7"}, {"problem": 23, "code": "#(into () %)", "user": "551dfd81e4b030e6a24d00e0"}, {"problem": 23, "code": "#(into () %)", "user": "5512be9ae4b055c2f668d4b6"}, {"problem": 23, "code": "(fn [h]\n  (loop [n []\n         t h]\n  (if (empty? t)\n    n\n    (recur (cons (first t) n)\n           (rest t))\n    )\n    )\n  )", "user": "550bac80e4b06e50f9beb14a"}, {"problem": 23, "code": "(fn rec [s]\n  (if (empty? s)\n    []\n    (conj (rec (rest s)) (first s))))", "user": "551ed214e4b08d5046aa8a4d"}, {"problem": 23, "code": "(fn rev [col] (let [[x & xs] (seq col)] (if (seq xs) (conj (rev xs) x) [x])))", "user": "551e8627e4b08d5046aa8a45"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "551ee974e4b08d5046aa8a50"}, {"problem": 23, "code": "reduce #(cons %2 %1) []", "user": "4e443201535dc968683fc4a7"}, {"problem": 23, "code": "#(loop [c % r (list)] (if (seq c) (recur (rest c) (conj r (first c))) r))", "user": "5516d26de4b06a49daca83b9"}, {"problem": 23, "code": "apply conj ()", "user": "5516ac4de4b06a49daca83b6"}, {"problem": 23, "code": "(fn my-rev [s] (if (> (count s) 1) (conj (my-rev (drop-last s)) (last s) ) s ) )", "user": "514504c2e4b021a5ff8301fc"}, {"problem": 23, "code": "(partial reduce conj '())", "user": "551ecb76e4b08d5046aa8a4c"}, {"problem": 23, "code": "apply conj ()", "user": "55129632e4b06e50f9beb1aa"}, {"problem": 23, "code": "(fn rev [coll]\n  (if (empty? coll)\n    coll\n    (cons (last coll) (rev (drop-last coll)))))", "user": "52b36925e4b0c58976d9ad0b"}, {"problem": 23, "code": "(fn aa [x] (if (= 0 (count x)) [] (conj (aa (rest x) ) (first x))))", "user": "528b3f5ae4b0239c8a67ae93"}, {"problem": 23, "code": "(fn [coll] (into () coll))", "user": "504e1c31e4b0f6ff3350c461"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "55206cf3e4b08d5046aa8a62"}, {"problem": 23, "code": "(fn [x]\n  (loop [in x, out ()]\n    (if (empty? in)\n      out\n      (recur (rest in) (conj out (first in)))\n    )\n  )\n)", "user": "550e52dbe4b06e50f9beb165"}, {"problem": 23, "code": "(fn reverse-col [col]\n    (if (empty? col)\n      []\n      (conj (reverse-col (rest col)) (first col))))", "user": "550b5c10e4b06e50f9beb143"}, {"problem": 23, "code": "(fn reverseSeq [col] (if (= col nil) [] (conj (reverseSeq (next col)) (first col))))", "user": "55204412e4b08d5046aa8a5f"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5520d6b8e4b08d5046aa8a65"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "551ee4dde4b08d5046aa8a4f"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "551ebcd7e4b08d5046aa8a4a"}, {"problem": 23, "code": "(fn foo [x] (if (empty? x) [] (conj (foo (rest x)) (first x))))", "user": "5520974be4b08d5046aa8a63"}, {"problem": 23, "code": "(fn [coll]\n  (loop [item (first coll)\n        stuff (rest coll)\n        agg []]\n    (if (nil? item)\n      agg\n      (recur (first stuff)\n             (rest stuff)\n             (into [item] agg)))))", "user": "551ff12ae4b08d5046aa8a5a"}, {"problem": 23, "code": "#(into () %)", "user": "5521a5a9e4b0882d96d09197"}, {"problem": 23, "code": "(fn [l] (reduce #(cons %2 %1) [] l))", "user": "5520af03e4b08d5046aa8a64"}, {"problem": 23, "code": "reduce conj ()", "user": "55205564e4b08d5046aa8a60"}, {"problem": 23, "code": "#(into () %)", "user": "52384eb1e4b0fae3832e99fa"}, {"problem": 23, "code": "reduce (fn [accum x] (cons x accum)) []", "user": "551b87dfe4b07993ea3788d2"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "552281cae4b0882d96d0919f"}, {"problem": 23, "code": "(fn [sq] ( loop [out nil in sq]\n           (if (empty? in)\n           out\n           (recur (conj out (first in))(rest in))\n             )       \n         )\n)", "user": "552102bde4b08d5046aa8a67"}, {"problem": 23, "code": "(fn revit \n  ([s] (revit s '()))\n  ([s accum] (if (empty? s) accum (revit (rest s) (cons (first s) accum))))\n)", "user": "55229495e4b0882d96d091a4"}, {"problem": 23, "code": "(fn [colo] (letfn [\n  (rev [coli] (if (empty? coli) nil (cons (last coli) (rev (butlast coli))) ))\n  ] (rev colo)\n))", "user": "5520666fe4b08d5046aa8a61"}, {"problem": 23, "code": "(fn [lst] (reduce (fn [lst chr] (conj lst chr)) '() lst))", "user": "551d5cb9e4b07993ea3788e9"}, {"problem": 23, "code": "(fn [lst]\n  (reduce (fn [result, chr] (conj result chr)) '() lst))", "user": "5522a795e4b0882d96d091a7"}, {"problem": 23, "code": "reduce conj '()", "user": "55201d18e4b08d5046aa8a5d"}, {"problem": 23, "code": "(fn [coll]\n  (loop [coll coll, acc ()]\n    (if (empty? coll)\n      acc\n      (recur (rest coll) (conj acc (first coll))))))", "user": "552356fae4b0882d96d091af"}, {"problem": 23, "code": "#(reduce conj (list) %)", "user": "551382bee4b055c2f668d4cb"}, {"problem": 23, "code": "(fn my-reverse [v] (if (empty? v) v (cons (last v) (my-reverse (butlast v)))))", "user": "55041b5ee4b086ebe8a79c78"}, {"problem": 23, "code": "(fn a [x] (if (= (count x) 1) x (concat (a (rest x)) (list (first x)))))", "user": "5521c33ce4b0882d96d0919a"}, {"problem": 23, "code": "into '()", "user": "551a713ae4b091ff45eda997"}, {"problem": 23, "code": "#(map first (sort-by last > (zipmap % (range (count %)))))", "user": "55218bf0e4b0882d96d09196"}, {"problem": 23, "code": "(partial reduce #(cons %2 %1) '())", "user": "551da715e4b030e6a24d00de"}, {"problem": 23, "code": "(fn rev [s] (if (seq s) (conj (rev (rest s)) (first s)) []))", "user": "4db2eac3535df7e46ed9b6c8"}, {"problem": 23, "code": "reduce conj '()", "user": "5522cd9ae4b0882d96d091ab"}, {"problem": 23, "code": "reduce #(conj %1 %2) '()", "user": "552456e3e4b0882d96d091c2"}, {"problem": 23, "code": "(fn [coll]\n  (let [len (- (count coll) 1)\n        collection (vec coll)]\n    (map-indexed (fn [i item] (nth collection (- len i) )) collection )))", "user": "5518c802e4b06a49daca83cd"}, {"problem": 23, "code": "reduce conj ()", "user": "54ab717be4b09f271ff37cca"}, {"problem": 23, "code": "(fn myReverse[x]\n  (into '() x)\n)", "user": "55240916e4b0882d96d091b6"}, {"problem": 23, "code": "into ()", "user": "5523f23ce4b0882d96d091b3"}, {"problem": 23, "code": "into ()", "user": "54116e2fe4b01498b1a719c4"}, {"problem": 23, "code": "reduce (fn [x y] (cons y x)) []", "user": "551bd6e1e4b07993ea3788d6"}, {"problem": 23, "code": "#(reduce (fn [x y] (cons y x)) '() %1)", "user": "55129c5ce4b06e50f9beb1b5"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "552509dfe4b0882d96d091ca"}, {"problem": 23, "code": "(letfn [(rev-concat [s1 s2] (if (empty? s1) s2 (rev-concat (rest s1) (cons (first s1) s2))))]\n  \t(fn [coll] (rev-concat coll (empty coll))))", "user": "55253217e4b0882d96d091ce"}, {"problem": 23, "code": "(fn reverse_seq[s](if(>(count s) 1)(conj(reverse_seq(drop-last s))(last s))s))", "user": "5515b68de4b055c2f668d4ef"}, {"problem": 23, "code": "#(into '() %)", "user": "5523fce8e4b0882d96d091b4"}, {"problem": 23, "code": "#(into () %)", "user": "55256426e4b0ffed3738f905"}, {"problem": 23, "code": "reduce (fn[x y] (conj x y)) '()", "user": "5522234ee4b0882d96d0919d"}, {"problem": 23, "code": "(fn [x]\n  (loop [v x\n         r '()]\n    (if (empty? v)\n      r\n      (recur (rest v) (cons (first v) r))\n    )\n  )\n)", "user": "55252392e4b0882d96d091cc"}, {"problem": 23, "code": "#(reduce (fn [memo item] (concat [item] memo)) [] (into [] %1))", "user": "552621d0e4b0ffed3738f914"}, {"problem": 23, "code": "reduce conj '()", "user": "55245232e4b0882d96d091c0"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "54074fc5e4b0addc1aec66b6"}, {"problem": 23, "code": "reduce conj '()", "user": "55253799e4b0882d96d091cf"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5484fab9e4b0e286459a11a6"}, {"problem": 23, "code": "(fn my-reverse [l]\n         (if (empty? l)\n           ()\n           (concat (my-reverse (rest l)) (list (first l)))))", "user": "55274467e4b0ffed3738f92b"}, {"problem": 23, "code": "(fn [x] (into () x))", "user": "5521e8cbe4b0882d96d0919b"}, {"problem": 23, "code": "(fn [l] (loop [x l r '()] (if (empty? x) r (recur (rest x) (cons (first x) r)))))", "user": "55250331e4b0882d96d091c9"}, {"problem": 23, "code": "(fn rev [col] (if (= 1 (count col)) col (concat (rev (rest col)) (list (first col)))))", "user": "55279298e4b0ffed3738f92f"}, {"problem": 23, "code": "(fn reversecoll [coll]\n  (reduce conj '() coll))", "user": "55268e8de4b0ffed3738f91f"}, {"problem": 23, "code": "(fn reverse-seq [obj] \n  (reduce conj '() obj))", "user": "552689cfe4b0ffed3738f91e"}, {"problem": 23, "code": "(fn rev [coll]\n    (reduce conj () coll))", "user": "5524f21fe4b0882d96d091c7"}, {"problem": 23, "code": "#(reduce (fn [x y] (conj x y)) '() %)", "user": "5526383ee4b0ffed3738f917"}, {"problem": 23, "code": "(fn [col]\n  (loop [new-col '()\n         col col]\n    (if (empty? col)\n      new-col\n      (recur (conj new-col (first col)) (rest col)))))", "user": "54f14aa6e4b024c67c0cf8af"}, {"problem": 23, "code": "(fn f [a] (if (empty? a) a (concat (f (rest a)) [(first a)])))", "user": "55280930e4b0ffed3738f93b"}, {"problem": 23, "code": "into '()", "user": "4fc57c4ce4b0ee37620e17f6"}, {"problem": 23, "code": "(fn my_reverse [x] (if (empty? x) x (concat (my_reverse (rest x)) [(first x)])))", "user": "5528a8cae4b0ffed3738f940"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5529662ce4b0ffed3738f94a"}, {"problem": 23, "code": "into '()", "user": "55297a7ae4b0ffed3738f94b"}, {"problem": 23, "code": "into ()", "user": "505106fee4b05ab4c7e07d38"}, {"problem": 23, "code": "(fn rev [x] (when (not (empty? x)) (conj (vec (rev (rest x))) (first x))))", "user": "55249f64e4b0882d96d091c6"}, {"problem": 23, "code": "reduce #(conj %1 %2) '()", "user": "5517331ae4b06a49daca83c0"}, {"problem": 23, "code": "(fn [x]\n\t(reduce conj '() x)\n)", "user": "551e7267e4b030e6a24d00e9"}, {"problem": 23, "code": "(fn seqrev [s] (if (= s ()) () (concat (seqrev (rest s)) (list (first s))) ))", "user": "5528ecd1e4b0ffed3738f942"}, {"problem": 23, "code": "into '()", "user": "552a8bbae4b0ffed3738f956"}, {"problem": 23, "code": "#(reduce conj () %1)", "user": "5529892ce4b0ffed3738f94c"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "551f1781e4b08d5046aa8a52"}, {"problem": 23, "code": "(fn rvrs [x] (if (> (count x) 1) (cons (last x) (rvrs(butlast x))) x))", "user": "552949e5e4b0ffed3738f948"}, {"problem": 23, "code": "reduce conj ()", "user": "552a672de4b0ffed3738f954"}, {"problem": 23, "code": "(fn [xs]\n  (into () xs))", "user": "55295b5de4b0ffed3738f949"}, {"problem": 23, "code": "(fn [coll]\n  (loop [[r & more :as all] (seq coll) acc '()]\n    (if all\n      (recur more (cons r acc))\n      acc)))", "user": "55231800e4b0882d96d091ad"}, {"problem": 23, "code": "(partial reduce (fn [acc,x] (cons x acc)) [])", "user": "552b6ddbe4b0ffed3738f965"}, {"problem": 23, "code": "#(into () %)", "user": "552bab7fe4b0ffed3738f966"}, {"problem": 23, "code": "(fn [items] \n  (loop [xs items\n         result '()]\n    (if (empty? xs)\n      result\n      (recur (rest xs) (cons (first xs) result)))))", "user": "5524120fe4b0882d96d091b7"}, {"problem": 23, "code": "reduce conj '()", "user": "552c0bf9e4b0ffed3738f96d"}, {"problem": 23, "code": "(fn [xs] (apply conj nil xs))", "user": "552c1a0fe4b076ab5578f7d7"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "552ca546e4b076ab5578f7da"}, {"problem": 23, "code": "reduce (fn [a b] (conj a b)) '()", "user": "55265376e4b0ffed3738f91b"}, {"problem": 23, "code": "; first-attempt:\n;(fn new-rev [coll] \n;  (if (first coll)\n;    (cons (last coll) \n;          (new-rev (butlast coll)))\n;    []))\n\n#(into '() %)", "user": "550d9452e4b06e50f9beb15d"}, {"problem": 23, "code": "into ()", "user": "55249337e4b0882d96d091c3"}, {"problem": 23, "code": "(fn [a]\n  (let [afn (fn [coll orig]\n              (if (empty? orig)\n                coll\n              (recur (conj coll (first orig)) (rest orig))\n                )\n              )]\n    (afn '() a)\n    \n    ))", "user": "552d9013e4b076ab5578f7ea"}, {"problem": 23, "code": "#(reduce\n  (fn [m e]\n    (conj m e))\n  '()\n  %)", "user": "552d2e4fe4b076ab5578f7e1"}, {"problem": 23, "code": "into '()", "user": "552bc0f5e4b0ffed3738f968"}, {"problem": 23, "code": "reduce #(cons %2 %1) []", "user": "5512980ce4b06e50f9beb1b3"}, {"problem": 23, "code": "apply conj ()", "user": "551297dee4b06e50f9beb1b1"}, {"problem": 23, "code": "(fn [x]\n  (let [coll (into [] x)]\n  (loop [i (count x) reversed []]\n    (if (= 0 i) reversed\n      (recur (dec i) (conj reversed (nth coll (dec i))))\n      ))))", "user": "552e0f47e4b076ab5578f7ed"}, {"problem": 23, "code": "into ()", "user": "54eee38ce4b024c67c0cf878"}, {"problem": 23, "code": "#(into () %)", "user": "539118b2e4b0b51d73faaea1"}, {"problem": 23, "code": "reduce conj ()", "user": "54db48f6e4b024c67c0cf760"}, {"problem": 23, "code": "(fn [coll] (reduce conj '() coll))", "user": "54f4adc8e4b0f2f3c5226e86"}, {"problem": 23, "code": "#(into () %)", "user": "53623eaee4b0243289761e4f"}, {"problem": 23, "code": "#(loop [i 0 rev '() coll %]\n   (if (= 0 (count coll)) rev\n     (recur (inc i) (cons (first coll) rev) (rest coll)) ))", "user": "529de065e4b04e0c58e87b84"}, {"problem": 23, "code": "(fn [x]\n  (loop [x x\n         n '()]\n    (if (empty? x)\n      n\n      (recur (rest x) (conj n (first x)))))\n  )", "user": "5530b827e4b076ab5578f818"}, {"problem": 23, "code": "(fn [par]\n  (loop [old par new []]\n  (if (empty? old)\n    new\n    (recur (butlast old) (conj new (last old))))))", "user": "553024c3e4b076ab5578f80d"}, {"problem": 23, "code": "(fn rev [xs]\n  (case xs\n    [] xs\n    (concat (rev (rest xs)) (take 1 xs))))", "user": "55316b8ae4b076ab5578f825"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5531e445e4b09218d5f44f76"}, {"problem": 23, "code": "(fn rev\n    ([l]\n        (if (= (rest l) [])\n            (conj [] (first l))\n            (conj (rev (rest l)) (first l))\n        )\n    )\n)", "user": "5531c9c0e4b076ab5578f82a"}, {"problem": 23, "code": "#(into () %)", "user": "552694e7e4b0ffed3738f920"}, {"problem": 23, "code": "#(into () %)", "user": "55327428e4b09218d5f44f7d"}, {"problem": 23, "code": "(fn [sequence] (reduce conj () sequence))", "user": "535d8d8fe4b04ce2eb3ed2c4"}, {"problem": 23, "code": "apply conj ()", "user": "55327ad3e4b09218d5f44f7f"}, {"problem": 23, "code": "into ()", "user": "5531f8e7e4b09218d5f44f79"}, {"problem": 23, "code": "apply conj ()", "user": "552ed75ae4b076ab5578f7f9"}, {"problem": 23, "code": "#(let [x (into [] %1)]\n   (loop [dataset [] cnt (count x)]\n     (if (> cnt 0)\n      (recur (conj dataset (nth x (- cnt 1))) (dec cnt))\n      dataset)))", "user": "553093bee4b076ab5578f817"}, {"problem": 23, "code": "reduce conj '()", "user": "4f69e5ece4b07046d9f4ef8f"}, {"problem": 23, "code": "reduce #(into [%2] %1) []", "user": "55306f9de4b076ab5578f814"}, {"problem": 23, "code": "(fn [x]\n  (let [y (reduce conj '() (seq x))]\n    (cond (vector? x) (vec y)\n          :else y)))", "user": "55330d7fe4b09218d5f44f88"}, {"problem": 23, "code": "(fn my-reverse [seq] (if (empty? seq)\n         nil\n         (cons (last seq) (my-reverse (butlast seq)))))", "user": "5532a04ee4b09218d5f44f82"}, {"problem": 23, "code": "(fn [coll] (reduce conj '() coll))", "user": "5533da20e4b09218d5f44f92"}, {"problem": 23, "code": "#(reduce conj (list) %)", "user": "5532e188e4b09218d5f44f87"}, {"problem": 23, "code": "(fn [v] (reduce  #(cons %2 %1) (list) v ))", "user": "552e1c98e4b076ab5578f7ee"}, {"problem": 23, "code": "(fn rvrs \n  ([lst]\n   \t(rvrs lst '())\n   )\n (\n  [lst reslst]\n  \t(if (empty? lst)\n     reslst\n      (rvrs (rest lst) (conj reslst (first lst)))\n     )\n  )\n )", "user": "550fd845e4b06e50f9beb17c"}, {"problem": 23, "code": "reduce conj '()", "user": "55349c67e4b09218d5f44fa0"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "551bdefde4b07993ea3788d7"}, {"problem": 23, "code": "(fn rev [x](if (empty? (rest x)) \n                         [(first x)]\n                         (conj (rev (rest x)) (first x))))", "user": "5534795ee4b09218d5f44f9e"}, {"problem": 23, "code": "reduce (fn addlist[xs x] (cons x xs)) []", "user": "54f86b8ce4b01ecee9d88828"}, {"problem": 23, "code": "(fn [s] (reduce #(cons %2 %1) (empty s) s))", "user": "5526d0a9e4b0ffed3738f927"}, {"problem": 23, "code": "#(into () %)", "user": "55022275e4b07d26eda61d81"}, {"problem": 23, "code": "(fn [s]\n  (loop [s s, acc '()]\n    (if (not (seq s))\n      acc\n      (recur (rest s) (conj acc (first s))))))", "user": "5526a235e4b0ffed3738f922"}, {"problem": 23, "code": "reduce (fn [res item] (conj res item)) '()", "user": "5535e9b8e4b09218d5f44fb3"}, {"problem": 23, "code": "(partial into '())", "user": "553698fae4b09218d5f44fc0"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "55357ab5e4b09218d5f44faf"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5536c324e4b09218d5f44fc1"}, {"problem": 23, "code": "reduce #(cons %2 %) ()", "user": "5537c1c4e4b09218d5f44fd0"}, {"problem": 23, "code": "reduce (fn [xs x] (cons x xs)) '()", "user": "5536cbefe4b09218d5f44fc2"}, {"problem": 23, "code": "(partial reduce #(cons %2 %1) [])", "user": "5537982ae4b09218d5f44fcc"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5537de22e4b09218d5f44fd5"}, {"problem": 23, "code": "(fn [coll] (reduce conj '() coll))", "user": "54980edae4b0b312c081ff79"}, {"problem": 23, "code": "(fn [xs] (into '() xs))", "user": "55381162e4b09218d5f44fda"}, {"problem": 23, "code": "(fn m-rev [s] (reduce conj '() s))", "user": "55377460e4b09218d5f44fc9"}, {"problem": 23, "code": "#(into () %)", "user": "54dce6dbe4b024c67c0cf78d"}, {"problem": 23, "code": ";(fn [xs]\n;  (loop [xs xs acc []]\n;    (if (empty? xs)\n;      acc\n;      (recur (rest xs) (cons (first xs) acc)))))\n#(into '() %)", "user": "54dce62be4b024c67c0cf78b"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "4fe9cc68e4b0547ebccb2470"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "4e273a93535deb9a81d77ef8"}, {"problem": 23, "code": "reduce (fn [acc x] (cons x acc)) []", "user": "55395241e4b09218d5f44fe8"}, {"problem": 23, "code": "(fn [n] (reduce conj () n))", "user": "55391182e4b09218d5f44fe6"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "553a43cae4b09218d5f44ff2"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "553a35bfe4b09218d5f44ff0"}, {"problem": 23, "code": "reduce (fn [a l] (conj a l)) nil", "user": "553900d4e4b09218d5f44fe5"}, {"problem": 23, "code": "(fn [mylist]\n  (reduce conj '() mylist))", "user": "553a74ede4b09218d5f44ff7"}, {"problem": 23, "code": "(fn [s] \n  (loop [out (list) \n         in  s]\n    (if (empty? in) out\n      (recur (conj out (first in)) (rest in)))))", "user": "520d3129e4b0b022ef140ca5"}, {"problem": 23, "code": "into ()", "user": "553abb28e4b09218d5f44ffb"}, {"problem": 23, "code": "(fn r [coll]\n  (if (empty? coll)\n    []\n    (conj (r (rest coll)) (first coll))))", "user": "5535d34be4b09218d5f44fb0"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "548018d8e4b0c51c1f4d7329"}, {"problem": 23, "code": "(fn [full-seq]\n  (loop [rev [] xs full-seq]\n    (if (empty? xs)\n      rev\n      (recur (conj rev (last xs)) (drop-last 1 xs)))))", "user": "553b87abe4b09218d5f45003"}, {"problem": 23, "code": "reduce #(conj %1 %2) '()", "user": "553b8fdbe4b09218d5f45004"}, {"problem": 23, "code": "(fn f [x] (if (empty? x) [] (conj (f(rest x)) (first x))))", "user": "553bc237e4b09218d5f4500a"}, {"problem": 23, "code": "(fn f[s] \n  (if (= (count s) 1)\n    s\n    (cons (last s) (f (butlast s))  )\n   )\n )", "user": "553b90c8e4b09218d5f45005"}, {"problem": 23, "code": "(fn [x] (into '() x))", "user": "5537f167e4b09218d5f44fd7"}, {"problem": 23, "code": "(fn revs [l] (if (= l '()) '() (concat (revs (rest l)) [(first l)])))", "user": "553c05b7e4b09218d5f45011"}, {"problem": 23, "code": "#(reduce (fn [l x] (conj l x)) '() %)", "user": "55337e61e4b09218d5f44f8e"}, {"problem": 23, "code": "(fn my-reverse [l]                \n\t(if (empty? l)\n    \t(list)\n    \t(concat (my-reverse (rest l)) (list (first l)))))", "user": "553d1997e4b0a04f792994db"}, {"problem": 23, "code": "#(into () %)", "user": "553d25bae4b0a04f792994dd"}, {"problem": 23, "code": "(fn [orig-sq]\n  (loop [rev-sq [] old-sq orig-sq]\n    (if (empty? old-sq)\n      rev-sq\n      (recur (conj rev-sq (last old-sq)) (butlast old-sq)))))", "user": "55380eeae4b09218d5f44fd9"}, {"problem": 23, "code": "reduce (fn [c a] (cons a c)) ()", "user": "553d86cfe4b0a04f792994e2"}, {"problem": 23, "code": "(fn rvs [ns]\n  (if\n    (empty? ns)\n    []\n    (conj (rvs (rest ns)) (first ns))))", "user": "553dd883e4b0a04f792994e6"}, {"problem": 23, "code": "(fn f [s]\n  (if (empty? s)\n  \t[]\n  \t(conj (f (rest s)) (first s))))", "user": "552e92d3e4b076ab5578f7f2"}, {"problem": 23, "code": "reduce (fn [xs y] (cons y xs)) '()", "user": "553e0b70e4b0a04f792994e8"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "54f49590e4b0f2f3c5226e80"}, {"problem": 23, "code": "reduce conj ()", "user": "553478dce4b09218d5f44f9d"}, {"problem": 23, "code": "reduce #(cons %2 %1) []", "user": "553ef828e4b0a04f792994f3"}, {"problem": 23, "code": "(fn reverse' [xs] (if (empty? xs)\n                    (empty xs)\n                    (concat (reverse' (rest xs)) (cons (first xs) (empty xs)))))", "user": "553638bae4b09218d5f44fba"}, {"problem": 23, "code": "#(reduce (fn [c x] (concat (vector x) c)) '() %)", "user": "54c779bee4b045293a27f63b"}, {"problem": 23, "code": "reduce #(cons %2 %1) []", "user": "553e007ae4b0a04f792994e7"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5540cc0ce4b0a04f79299505"}, {"problem": 23, "code": "(fn [x] (loop [original (into '() x) reversed []]\n                        (if (empty? original)\n                          reversed \n                          (recur (rest original) (conj reversed (first original)))\n                        )))", "user": "553fd4a5e4b0a04f792994fa"}, {"problem": 23, "code": "reduce conj '()", "user": "54c944b1e4b045293a27f666"}, {"problem": 23, "code": "reduce #(conj %1 %2) '()", "user": "553f405ce4b0a04f792994f6"}, {"problem": 23, "code": "#(loop [coll %\n        result [] ]\n   (if (empty? coll)\n     result\n     (recur (rest coll) (cons (first coll) result))))", "user": "553fa883e4b0a04f792994f9"}, {"problem": 23, "code": "apply conj ()", "user": "5540f5dee4b0a04f79299509"}, {"problem": 23, "code": "#(loop [coll (vec %) rcoll []]\n   (if (seq coll)\n     (recur (pop coll) (conj rcoll (peek coll)))\n     rcoll))", "user": "5313d68de4b08068f379ed0f"}, {"problem": 23, "code": "(fn [liste] (reduce conj '() liste))", "user": "553b9d44e4b09218d5f45007"}, {"problem": 23, "code": "#(into () %)", "user": "552a793ee4b0ffed3738f955"}, {"problem": 23, "code": ";reduce conj ()\ninto ()", "user": "5540fe42e4b0a04f7929950a"}, {"problem": 23, "code": "(fn [coll] \n  ; force all inputs to be a seq\n  (let [myseq (seq coll)] \n    ; use my newly learned for loop knowledge\n    (for [x (range (count myseq) 0 -1) :when (> x 0)]\n      ; get items starting from end of list.  \n      (nth myseq (dec x)))))\n\n\n; hopefully someday i'll be wizard enough to do what _pcl did:\n; reduce #(conj %1 %2) '()", "user": "5535e822e4b09218d5f44fb2"}, {"problem": 23, "code": "#(\n   (fn\n     [[x & xx] r]\n     (if (nil? xx) (vec (conj r x))\n       (recur xx (conj r x))))\n  (vec %) '())", "user": "5543553fe4b0a04f79299523"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "553fe819e4b0a04f792994fc"}, {"problem": 23, "code": "(fn my-reverse\n  [xs]\n  (if (seq xs) \n    (list* (last xs) \n              (my-reverse (take (dec (count xs)) xs)))))", "user": "550001d0e4b07d26eda61d57"}, {"problem": 23, "code": "#((fn rev [xs r]\n    (if (= nil (first xs))\n      r\n      (rev (rest xs) (cons (first xs) r)))) % [])", "user": "55453f8ee4b0a04f79299530"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "554462c0e4b0a04f79299529"}, {"problem": 23, "code": "(fn [seq] (loop [head (first seq) tail (rest seq) reversed '()]\n                        (if (nil? head)\n                          reversed\n                          (recur (first tail) (rest tail) (conj reversed head)))))", "user": "55457b73e4b0a04f79299536"}, {"problem": 23, "code": "#(loop [coll %, rev []]\n\t(if (nil? (first coll))\n\trev\n\t(recur (rest coll) (cons (first coll) rev))))", "user": "53573d70e4b04ce2eb3ed278"}, {"problem": 23, "code": "into ()", "user": "543366dde4b0b6b47310fcdf"}, {"problem": 23, "code": "(fn [s] (apply conj '() s))", "user": "5545eebee4b0a04f79299539"}, {"problem": 23, "code": "(fn [col]\n  (loop [ col col\n          result []]\n        (if (empty? col)\n            result\n            (recur (rest col) (cons (first col) result)))))", "user": "5545f713e4b0a04f7929953a"}, {"problem": 23, "code": "(partial into ())", "user": "550f1c99e4b06e50f9beb171"}, {"problem": 23, "code": "reduce #(conj %1 %2) '()", "user": "52e851bfe4b09f7907dd149a"}, {"problem": 23, "code": "#(into () %)", "user": "5544faebe4b0a04f7929952b"}, {"problem": 23, "code": "(fn my-reverse [coll] \n  (loop [c coll r []] \n    (if (last c) \n      (recur (butlast c) (conj r (last c)))\n      r)))", "user": "5546704be4b0a04f7929953d"}, {"problem": 23, "code": "(fn rvr\n\t[arr]\n\t(if (list? arr)\n\t(loop [[x & xs] arr out '()] \n\t\t(if (= x nil)\n\t\t\tout\n\t\t\t(recur xs (conj out x))))\n\t(into () arr)))", "user": "5545477fe4b0a04f79299531"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "55478ce2e4b0a04f7929954e"}, {"problem": 23, "code": "(fn [s] (reduce #(cons %2 %1) [] s))", "user": "54fdaeace4b07d26eda61d39"}, {"problem": 23, "code": "#(loop [x %1 y '()]\n    (if (empty? x)\n      y\n      (recur (rest x) (cons (first x) y)))\n    )", "user": "553bda0de4b09218d5f4500b"}, {"problem": 23, "code": "(fn [coll] (reduce conj () coll))", "user": "5547bcf2e4b0a04f79299551"}, {"problem": 23, "code": "(fn [input]\n  (vec (loop [in input out '()]\n    (if (seq in)\n      (recur (rest in) (conj out (first in)))\n      out))))", "user": "554707bae4b0a04f79299544"}, {"problem": 23, "code": "(fn [x] (reduce conj '() x))", "user": "55483088e4b0a04f79299556"}, {"problem": 23, "code": "apply conj '()", "user": "5326e4efe4b09d4e7a9b54f5"}, {"problem": 23, "code": "(fn [s]\n  (reduce (fn [a i]\n            (concat (list i) a))\n          (list)\n          s))", "user": "55495318e4b0a04f79299566"}, {"problem": 23, "code": "(fn x[a](if(last a)(->> a butlast x (cons (last a))) (list)))", "user": "552800d7e4b0ffed3738f93a"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "55350bdae4b09218d5f44fa8"}, {"problem": 23, "code": "reduce conj ()", "user": "554680cbe4b0a04f7929953e"}, {"problem": 23, "code": "(fn myReverse [coll]\n  (if (empty? coll) []\n    (conj (myReverse (rest coll)) (first coll))))", "user": "554a270fe4b0a04f79299570"}, {"problem": 23, "code": "(fn [sq]\n  (loop [s sq r '()]\n    (if (empty? s) r\n      (recur (rest s) (conj r (first s))))))", "user": "4ee7c6dd535d93acb0a6686c"}, {"problem": 23, "code": "(fn [coll]\n  (loop [coll coll\n         acc  (empty coll)]\n        (if (empty? coll)\n            acc\n            (recur (rest coll) (cons (first coll) acc)))))", "user": "554884d4e4b0a04f7929955c"}, {"problem": 23, "code": "#(into () %)", "user": "5549394fe4b0a04f79299565"}, {"problem": 23, "code": "#(into () %)", "user": "554a5ac2e4b0a04f79299574"}, {"problem": 23, "code": "(fn rev [s] (if \n              (empty? (rest s))\n              (vector (first s))\n              (conj (rev (rest s)) (first s))\n              )\n  )", "user": "554ae65de4b0a04f7929957b"}, {"problem": 23, "code": "(fn [coll]\n  (loop [coll coll\n         acc  (empty coll)]\n        (if (empty? coll)\n            acc\n            (recur (rest coll) (cons (first coll) acc)))))", "user": "554acce4e4b0a04f79299579"}, {"problem": 23, "code": "(fn rev-seq [lat]\n  (into '() lat))", "user": "554a2df2e4b0a04f79299572"}, {"problem": 23, "code": "(fn [x]\n  (loop [x x y []]\n    (if (empty? x)\n      y\n      (recur (butlast x) (conj y (last x))))))", "user": "554b425ce4b0a04f79299581"}, {"problem": 23, "code": "(fn [l]\n  (let [rev-seq (reduce conj '() (seq l))]\n    (if (vector? l)\n      (vec rev-seq)\n      rev-seq)))", "user": "5549ff9ae4b0a04f7929956e"}, {"problem": 23, "code": "(fn [arr] \n  (loop [array arr result '()]\n    (if (= (first array) nil)\n      \tresult\n      \t(recur (rest array) (conj result (first array)))\n     )\n    )\n  )", "user": "55300ea8e4b076ab5578f80b"}, {"problem": 23, "code": "(letfn [(rev [acc xs]\n             (if (nil? (first xs)) acc\n               (recur (conj acc (first xs)) (rest xs))))]\n  (partial rev '()))", "user": "554b9c3ee4b0a04f79299594"}, {"problem": 23, "code": "(fn f [a] (if (empty? a) \n            [] \n            (conj (f (rest a)) (first a))))", "user": "554c0adde4b0a04f7929959e"}, {"problem": 23, "code": "(fn [i]\n  (reduce conj '() i))", "user": "554bc026e4b0a04f79299597"}, {"problem": 23, "code": "apply conj ()", "user": "554d04bbe4b0a04f792995b4"}, {"problem": 23, "code": "(fn [y x] (if (empty? x) y (recur (conj y (first x)) (rest x)))) '()", "user": "554d01a8e4b0a04f792995b3"}, {"problem": 23, "code": "(fn rev [xs]\n  (if-not xs nil\n    (cons (last xs) (rev (butlast xs)))))\n; should be (fn [s] (reduce conj '() s))", "user": "554bced1e4b0a04f79299599"}, {"problem": 23, "code": "#(loop [orig % rev '()]\n   (if (empty? orig)\n     rev\n     (recur (rest orig) (conj rev (first orig)))))", "user": "5537f30fe4b09218d5f44fd8"}, {"problem": 23, "code": "(fn rev [coll]\n  (if (empty? coll)\n    '()\n    (cons (last coll) (rev (butlast coll)))))", "user": "5482464ee4b0e286459a117d"}, {"problem": 23, "code": ";(fn rev \n;  ([x] (rev x []))\n;  ([x r]\n;    (if (nil? x)\n;      r\n;      (recur (next x) (cons (first x) r)))))\n\nreduce conj ()", "user": "5547793be4b0a04f7929954c"}, {"problem": 23, "code": "reduce conj ()", "user": "554b8572e4b0a04f79299589"}, {"problem": 23, "code": "into ()", "user": "55484800e4b0a04f79299558"}, {"problem": 23, "code": "(fn [xs]\n  ((fn [xs ret]\n     (if (empty? xs)\n       ret\n       (recur (rest xs) (conj ret (first xs))))) xs '()))", "user": "554b7056e4b0a04f79299583"}, {"problem": 23, "code": "(fn [seq]\n  (reduce #(concat [%2] %1) (empty seq) seq))", "user": "554dff83e4b00713264bd98d"}, {"problem": 23, "code": "(fn [x]\n  (loop [in x\n         out '()]\n      (if (= (clojure.core/count x) (clojure.core/count out))\n        out\n        (recur (rest in) \n               (conj out (first in))))\n    )\n  )", "user": "554b2151e4b0a04f79299580"}, {"problem": 23, "code": "(fn [xs] \n  (loop [in xs out '()] \n    (if (empty? in) \n      out \n      (recur (rest in) (conj out (first in))))))", "user": "55150524e4b055c2f668d4d9"}, {"problem": 23, "code": "(fn [coll] (loop [coll coll accum (list)]\n             (if (empty? coll) accum\n               (recur (rest coll) (conj accum (first coll))))))", "user": "554d386ee4b0a04f792995b8"}, {"problem": 23, "code": "reduce conj '()", "user": "508fda91e4b0ea685a20f76f"}, {"problem": 23, "code": "(fn [s] (loop [xs s, acc '()] (if (empty? xs) acc (recur (rest xs) (conj acc (first xs))))))", "user": "554ba1d3e4b0a04f79299595"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "554e3a0be4b00713264bd991"}, {"problem": 23, "code": "reduce conj ()", "user": "554edb85e4b00713264bd99a"}, {"problem": 23, "code": "reduce #(conj %1 %2) '()", "user": "53b0765ae4b047364c044484"}, {"problem": 23, "code": "(fn[x] \n  (loop [n [] , x1 x]\n    (if (empty? x1) n\n      (recur (cons (first x1) n) (rest x1)))))", "user": "55486ee6e4b0a04f7929955a"}, {"problem": 23, "code": "reduce (fn [new elem] (cons elem new)) '()", "user": "5280a1ece4b0757a1b171407"}, {"problem": 23, "code": "#(into () %)", "user": "554717dfe4b0a04f79299546"}, {"problem": 23, "code": "(fn [a-seq]\n  (loop [new-seq (take 1 a-seq), rst (rest a-seq)]\n    (if (empty? rst) new-seq\n      (recur (cons (first rst) new-seq) (rest rst)))))", "user": "5550c6e0e4b00713264bd9af"}, {"problem": 23, "code": "(fn [x]\n  (loop [input-list x\n         output-list []]\n    (if(= 0 (count input-list))\n      output-list\n      (recur (rest input-list) (concat [(first input-list)] output-list)))))", "user": "5550dad4e4b00713264bd9b0"}, {"problem": 23, "code": "(fn [l] (reduce conj '() l))", "user": "5550bcece4b00713264bd9ae"}, {"problem": 23, "code": "#(reduce conj nil %)", "user": "5550eda2e4b00713264bd9b4"}, {"problem": 23, "code": "reduce (fn [c r] (conj c r)) '()", "user": "554d0511e4b0a04f792995b5"}, {"problem": 23, "code": "(fn [xs] \n  (loop [ys xs\n         zs '()]\n    (if (empty? ys)\n      zs\n      (recur (rest ys) (conj zs (first ys))))))", "user": "5283a919e4b0239c8a67adbe"}, {"problem": 23, "code": "(fn [s] (reduce conj '() s))", "user": "55512501e4b0deb715856de7"}, {"problem": 23, "code": "#(reduce (fn [x y] (conj x y)) '() %)", "user": "555093b2e4b00713264bd9ab"}, {"problem": 23, "code": "(fn myrev [coll]\n    (if (empty? coll)\n        []\n        (conj (myrev (rest coll)) (first coll) )))", "user": "524ac3d1e4b09eba1c0223a0"}, {"problem": 23, "code": "(fn reverseSeq\n  ([x y]\n   (if (empty? x)\n     y\n     (reverseSeq (rest x) (cons (first x) y ))))\n  ([x]\n   (reverseSeq x [])))", "user": "5550929ee4b00713264bd9aa"}, {"problem": 23, "code": "(fn [c] (loop [coll c rev '()] (if-not (first coll) rev (recur (rest coll) (conj rev (first coll))))))", "user": "553a1475e4b09218d5f44fef"}, {"problem": 23, "code": "#(into '() %)", "user": "554c1708e4b0a04f792995a0"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5550dec6e4b00713264bd9b2"}, {"problem": 23, "code": "(fn [coll] (reduce conj () coll))", "user": "550a2c61e4b06e50f9beb12b"}, {"problem": 23, "code": "reduce conj ()", "user": "5551bddae4b0deb715856def"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "55534e3be4b0deb715856e01"}, {"problem": 23, "code": "reduce conj ()", "user": "54d352f6e4b0e8a36923e604"}, {"problem": 23, "code": "#(into () %)", "user": "5552b617e4b0deb715856df8"}, {"problem": 23, "code": "(fn my-rev [s] (if (empty? s) [] (conj (my-rev (rest s)) (first s))))", "user": "554d48d3e4b00713264bd988"}, {"problem": 23, "code": "#(reduce (fn [acc elt] (cons elt acc)) (empty %) %)", "user": "5553b924e4b0deb715856e06"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "553c4614e4b09218d5f45014"}, {"problem": 23, "code": "#(into () %)", "user": "5553e93be4b0deb715856e0b"}, {"problem": 23, "code": ";;(fn reverse-seq[reversed to-reverse] \n;;  (if (empty? to-reverse)\n;;    reversed\n;;    (reverse-seq \n;;     (conj reversed (first to-reverse))\n;;     (rest to-reverse))))\n;;\n;;(list)\n\n#(reduce conj '() %)", "user": "55429859e4b0a04f7929951f"}, {"problem": 23, "code": "(fn [coll]\n  (loop [curr (vec coll)\n         rev []]\n    (if (empty? curr)\n      rev\n      (recur (rest curr) (cons (first curr) rev ))\n  )))", "user": "52da4532e4b09f7907dd13b6"}, {"problem": 23, "code": "#(into '() %)", "user": "5555432ee4b0deb715856e13"}, {"problem": 23, "code": "#(loop [coll %\n        a []]\n   (if (empty? coll)\n     a\n     (recur (rest coll) (cons (first coll) a))))", "user": "55556737e4b0deb715856e15"}, {"problem": 23, "code": "(fn [l] (reduce #(cons %2 %1) '() l))", "user": "55536a8ae4b0deb715856e03"}, {"problem": 23, "code": "(fn [coll]\n  (loop [head (first coll)\n         tail (next coll)\n         res ()]\n    (if (nil? tail)\n      (conj res head)\n    (recur (first tail) (next tail) (conj res head)))))", "user": "553cd680e4b0a04f792994d4"}, {"problem": 23, "code": "(fn [xs]\n  (reduce conj '() xs))", "user": "555521a5e4b0deb715856e12"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "527282f5e4b03e8d9a4a743a"}, {"problem": 23, "code": "(fn reverse-seq [sequ]\n  (loop [input sequ output []]\n    (if (empty? input)\n      \toutput\n    \t(recur (butlast input) (conj output (last input))))))", "user": "54d5343fe4b0a52adc2e200a"}, {"problem": 23, "code": "reduce #(cons %2 %) []", "user": "4f04c93c535dcb61093f6be3"}, {"problem": 23, "code": "#(into () %)", "user": "55580ef1e4b0deb715856e28"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "555867cae4b0deb715856e2a"}, {"problem": 23, "code": "(fn [col] (let [new_col (into () col)]\n                       (if (vector? col)\n                         (into [] new_col)\n                         new_col)))", "user": "554bc64ae4b0a04f79299598"}, {"problem": 23, "code": "(fn [coll] (reduce conj '() coll))", "user": "547f49fae4b0c51c1f4d731b"}, {"problem": 23, "code": "(fn [s] \n  (reduce\n   (fn [mem i] (cons i mem))\n   (empty s)\n   s))", "user": "52148821e4b0961f15ac4d8e"}, {"problem": 23, "code": "(fn srt [v] (if (empty? v) [] (cons (last v) (srt (drop-last v)))))", "user": "55599ae4e4b0deb715856e3a"}, {"problem": 23, "code": "(partial into ())", "user": "55568a7de4b0deb715856e1c"}, {"problem": 23, "code": "(fn rev [s] (if (empty? s) [] (conj (rev (rest s)) (first s))))", "user": "525dd2f9e4b0cb4875a45d85"}, {"problem": 23, "code": "reduce conj '()", "user": "555ac933e4b0deb715856e49"}, {"problem": 23, "code": "#(reduce (fn [x, y] (cons y x)) [] %)", "user": "555add85e4b0deb715856e4a"}, {"problem": 23, "code": "(fn [coll] (let [coll (seq coll)] (map #(nth coll (dec (- (count coll) %))) (range (count coll)))))", "user": "5169b23fe4b03f62cda68cee"}, {"problem": 23, "code": "reduce conj ()", "user": "54c29a72e4b045293a27f605"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "550b4ea2e4b06e50f9beb13e"}, {"problem": 23, "code": "into ()", "user": "555b5ae4e4b0deb715856e4f"}, {"problem": 23, "code": "reduce conj '()", "user": "555a5731e4b0deb715856e44"}, {"problem": 23, "code": "(fn [seq]\r\n  (apply conj '() seq))", "user": "555bd27ae4b0b056612e2244"}, {"problem": 23, "code": "(fn revv [seqn] \n  (if (empty? seqn)\n    nil\n    (if (empty? (rest seqn))\n      [(first seqn)]\n      (conj (revv (rest seqn))\n            (first seqn)))))", "user": "554a3303e4b0a04f79299573"}, {"problem": 23, "code": "(fn [lst] (reduce conj '() lst))", "user": "5550b5a0e4b00713264bd9ad"}, {"problem": 23, "code": "into ()", "user": "54070647e4b0addc1aec66b2"}, {"problem": 23, "code": "#(reduce (fn [x y] (conj x y)) '() %)", "user": "555b3919e4b0deb715856e4c"}, {"problem": 23, "code": "(fn rev\n  [d]\n\n  (cond (nil? d)\n        d\n        :else\n        (conj (rev (butlast d)) ( last d))))", "user": "4ef08bd6535dced4c769f20a"}, {"problem": 23, "code": "(fn rev1 [l] \n\t(let [f (fn rev [[x & xs]] \n\t(if (seq xs) \n\t\t(conj (rev xs) x) \n\t\t[x]\n\t\t)\n\t)]\n\t(seq(f (seq l)))))", "user": "550033a8e4b07d26eda61d59"}, {"problem": 23, "code": "#(reduce (fn [current new] (conj current new)) '() %)", "user": "5558cd6ae4b0deb715856e2f"}, {"problem": 23, "code": "(fn [x] (loop [acm [] col x] (if (empty? col) acm (recur (cons (first col) acm) (rest col)))))", "user": "553c8638e4b09218d5f45017"}, {"problem": 23, "code": "(fn [s] (into () s))", "user": "5551b492e4b0deb715856ded"}, {"problem": 23, "code": "reduce conj '()", "user": "55465b20e4b0a04f7929953b"}, {"problem": 23, "code": "(fn reverse2\n  [coll]\n  (let [reverse-acc (fn reverse-acc\n                      [acc coll]\n                      (if (nil? coll)\n                        acc\n                        (recur (conj acc (first coll)) (next coll))))]\n    (reverse-acc '() coll)))", "user": "55079e55e4b021ccfedb96aa"}, {"problem": 23, "code": "(fn test [vect] (into () vect ))", "user": "555c5e04e4b0b056612e224b"}, {"problem": 23, "code": "reduce #(cons %2 %1) []", "user": "550fa523e4b06e50f9beb17a"}, {"problem": 23, "code": "#(reduce (fn[v col] (conj v col)) '() %)", "user": "555c6344e4b0b056612e224c"}, {"problem": 23, "code": "into ()", "user": "555f0789e4b0a2eb076a39bf"}, {"problem": 23, "code": "reduce conj '()", "user": "53e76363e4b036ad0777e47b"}, {"problem": 23, "code": "(fn my-reverse\n  ([s] (my-reverse s '()))\n  ([s result]\n   (if-let [head (first s)]\n     (recur (rest s) (conj result head))\n     result)))", "user": "555ee545e4b0a2eb076a39bd"}, {"problem": 23, "code": "into '()", "user": "55586905e4b0deb715856e2b"}, {"problem": 23, "code": "#(vec (into '() %))", "user": "555e7210e4b0a2eb076a39b9"}, {"problem": 23, "code": "#(loop [col % rev []] \n   (if (empty? col) \n     rev \n     (recur (rest col) (cons (first col) rev))\n     )\n   )", "user": "555f6224e4b0a2eb076a39c5"}, {"problem": 23, "code": "(fn [l] (reduce (fn [s i] (conj s i)) (list) l))", "user": "555f728de4b0a2eb076a39c8"}, {"problem": 23, "code": "(fn\n  [arr]\n  (loop [rev []\n        copy arr]\n    (if (empty? copy)\n      rev\n      (recur\n       (concat [(first copy)] rev)\n       (rest copy))\n    )))", "user": "555f4bade4b0a2eb076a39c2"}, {"problem": 23, "code": "(fn [seq]\n  (loop [lst seq, rev []] \n    (if (empty? lst)\n  \trev\n    (recur (rest lst) (cons (first lst) rev)))))", "user": "555c78abe4b0b056612e224f"}, {"problem": 23, "code": "(fn [old-list]\n\t(loop [old-list old-list\n           new-list '()]\n      (if (empty? old-list)\n        new-list\n        (recur\n         (rest old-list)\n         (conj new-list (first old-list))))))", "user": "555f3bfde4b0a2eb076a39c1"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "556086a2e4b0c656e3ff17c1"}, {"problem": 23, "code": "(fn \n  [lst]\n  (loop [remaining lst\n         acc nil]\n    (if (empty? remaining)\n      acc\n      (recur (rest remaining) (conj acc (first remaining))))))", "user": "5560f39ce4b0c656e3ff17c2"}, {"problem": 23, "code": "#(into () %)", "user": "54e1939ce4b024c67c0cf7c5"}, {"problem": 23, "code": "reduce (fn [new next] (cons next new)) []", "user": "5561d2c2e4b0c656e3ff17cd"}, {"problem": 23, "code": "(fn my-reverse [L]\n  (loop [LL L\n         result ()]\n    (if (not-empty LL)\n      (recur (rest LL) (conj result (first LL)))\n      result\n      ) \n    )\n  )", "user": "556238bce4b0c656e3ff17d3"}, {"problem": 23, "code": "(fn thing [current lists]\n  (if (= lists '()) current (thing (cons (first lists) current) (rest lists)))) ()", "user": "55625903e4b0c656e3ff17d7"}, {"problem": 23, "code": "(fn rev ([s] (rev s '())) ([s acc] (if (empty? s) acc (rev (rest s) (conj acc (first s))))))", "user": "55623feae4b0c656e3ff17d4"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "556159fae4b0c656e3ff17c7"}, {"problem": 23, "code": "apply (partial conj '())", "user": "505fdf63e4b08f2a82ad10b9"}, {"problem": 23, "code": "(fn reverseseq [s]\n  (let [reverseseq_int (fn reverseseq_rec [s, r]\n    (if (empty? s)\n      r\n      (reverseseq_rec (drop 1 s) (concat (take 1 s) r))\n    )\n  )]\n (reverseseq_int s '()))\n)", "user": "554756b8e4b0a04f79299549"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "55631739e4b0c656e3ff17e2"}, {"problem": 23, "code": "(fn [xs ys] (if (nil? ys) xs (recur (conj xs (last ys)) (butlast ys)))) []", "user": "5562bd71e4b0c656e3ff17dc"}, {"problem": 23, "code": "(fn [sequence]\n  (loop [seq sequence rev nil]\n    (if(empty? seq)\n      rev\n      (recur (butlast seq) (concat rev [(last seq)]))\n    )\n  )\n)", "user": "55635886e4b0c656e3ff17e9"}, {"problem": 23, "code": "#(reduce (fn[acc e] (conj acc e)) () %1 )", "user": "556358c6e4b0c656e3ff17ea"}, {"problem": 23, "code": "(fn rev [sq]\n  (loop [sq sq\n         rev-sq (empty sq)]\n    (cond (empty? sq) rev-sq\n      \t  (seq? (first sq)) (rev (first sq))\n          :else (recur (rest sq) (cons (first sq) rev-sq)))))", "user": "55638fe1e4b0c656e3ff17ee"}, {"problem": 23, "code": "(fn [s]\n    (reduce #(cons %2 %1) [] s))", "user": "5501a1e1e4b07d26eda61d75"}, {"problem": 23, "code": "#(loop [new-list () old-list %]\n   (if (nil? old-list)\n     new-list\n     (recur (conj new-list (first old-list)) (next old-list))))", "user": "5563ff8ae4b0c656e3ff17fa"}, {"problem": 23, "code": "#(into () %)", "user": "5562f08ae4b0c656e3ff17df"}, {"problem": 23, "code": "reduce #(cons %2 %1) nil", "user": "55645592e4b0c656e3ff1802"}, {"problem": 23, "code": "(fn balik [x]\n  (if (not (empty? x)) \n    (cons (last x) (balik (butlast x)))\n    '()))", "user": "55630cc1e4b0c656e3ff17e0"}, {"problem": 23, "code": ";;(fn [coll] (let [[frest ffirst result] (if (vector? coll) [drop-last last []] [rest first '()])  ] (loop [in coll out result] (if (empty? in) out (recur (frest in) (conj out (ffirst in)) )  ) )))\nreduce conj '()", "user": "55647a31e4b0c656e3ff1808"}, {"problem": 23, "code": ";;#(loop [a %, r '()] (if (empty? a) r (recur (rest a) (conj r (first a)))))\n#(into () %)", "user": "555e9dbfe4b0a2eb076a39bc"}, {"problem": 23, "code": "reduce conj ()", "user": "51846567e4b02826a645f399"}, {"problem": 23, "code": "(fn [s]\n  (loop [s s\n         r '()]\n    (if (empty? s)\n      r\n      (recur (rest s) (conj r (first s))))))", "user": "556405e5e4b0c656e3ff17fb"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "555efec1e4b0a2eb076a39be"}, {"problem": 23, "code": "(fn [s]\n  (loop [rs '() xs s]\n    (let [head (first xs)]\n      (if head\n        (recur (conj rs head) (rest xs))\n        rs))))", "user": "5563a94be4b0c656e3ff17f2"}, {"problem": 23, "code": "#(into () %)", "user": "55640c62e4b0c656e3ff17fd"}, {"problem": 23, "code": "#(into () %)", "user": "5564cb31e4b0c656e3ff1810"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "550eca99e4b06e50f9beb16b"}, {"problem": 23, "code": "reduce conj '()", "user": "54f8b6f4e4b01ecee9d8882c"}, {"problem": 23, "code": "reduce #(cons %2 %) []", "user": "554efd47e4b00713264bd99b"}, {"problem": 23, "code": "(partial reduce #(conj %1 %2) '())", "user": "5565f616e4b0c656e3ff1823"}, {"problem": 23, "code": "#(loop [s %\n        n-s '()]\n   (if (empty? s)\n     n-s\n     (recur (drop 1 s) (conj n-s (first s)))))", "user": "556256d5e4b0c656e3ff17d6"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "55619a2be4b0c656e3ff17ca"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5566463ee4b0c656e3ff1831"}, {"problem": 23, "code": "(fn rr [coll] (map #(nth %1 1) (sort #(> (first %1) (first %2)) (map-indexed list coll))))", "user": "5565e7e6e4b0c656e3ff1821"}, {"problem": 23, "code": "(partial into ())", "user": "5565a48ae4b0c656e3ff181a"}, {"problem": 23, "code": "(fn rev [s] (if (empty? s) [] (conj (rev (rest s)) (first s))))", "user": "55670a05e4b0c656e3ff1838"}, {"problem": 23, "code": "(fn [coll] \n  (reduce (fn [r c] (cons c r)) \n          '() coll))", "user": "5566d812e4b0c656e3ff1837"}, {"problem": 23, "code": "#(into () %)", "user": "55664950e4b0c656e3ff1832"}, {"problem": 23, "code": "(fn [sq]\n           (let [helper (fn [a b]\n                          (if (empty? a)\n                            b\n                            (recur (rest a) (conj b (first a)))))]\n             (helper sq '())))", "user": "55677c60e4b0c656e3ff1842"}, {"problem": 23, "code": "#(loop [in %1 out (list)]\n    (if (empty? in)\n    out\n    (recur (rest in) (conj out (first in)))\n ))", "user": "55664334e4b0c656e3ff182e"}, {"problem": 23, "code": "(partial reduce conj '())", "user": "556794f6e4b0c656e3ff1844"}, {"problem": 23, "code": "(fn rev [s] (loop [r [] sn s]\n                    ( if (empty? sn)\n                      r\n                      (recur (conj r (last sn)) (butlast sn)))))", "user": "52c70127e4b0c2d177d6211a"}, {"problem": 23, "code": "#(into '() %)", "user": "555d3f58e4b0a2eb076a39a7"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "55675a6ce4b0c656e3ff183e"}, {"problem": 23, "code": "(fn reverse-seq\n  ([x] (reverse-seq x ()))\n  ([x reversed-list] (if (empty? x) reversed-list (reverse-seq (rest x) (conj reversed-list (first x))))))", "user": "5564709ee4b0c656e3ff1807"}, {"problem": 23, "code": "(fn reverse-seq [s]\n  (into '() s))", "user": "556873cee4b0c656e3ff1853"}, {"problem": 23, "code": "reduce #(cons %2 %1) nil", "user": "5566434ee4b0c656e3ff182f"}, {"problem": 23, "code": "#(into () %)", "user": "556880dae4b0c656e3ff1856"}, {"problem": 23, "code": "#(into () %)\n;(comp\n; \t#(reduce (fn [acc x] (conj acc x)) [] %)\n; \t#(into () %))", "user": "5569bbcae4b09a3098a524da"}, {"problem": 23, "code": "(fn [a] (vec (into '() a)))", "user": "52c03baee4b07a9af5792347"}, {"problem": 23, "code": "#(into () %)", "user": "554c296ae4b0a04f792995a1"}, {"problem": 23, "code": "(fn [col]\n    (into (vector)\n          \n          (loop [remaining col\n                 build (list)]\n            (let [a (first remaining) \n                  b (rest remaining)\n                  nextbuild (cons a build)]\n              (if (empty? b)\n                nextbuild\n                (recur b nextbuild))))))", "user": "554a75c9e4b0a04f79299575"}, {"problem": 23, "code": "#(loop [f % r nil] (if (seq f) (recur (rest f) (conj r (first f))) r))", "user": "556a7b14e4b09a3098a524e4"}, {"problem": 23, "code": "(fn [input]\n                        (loop [in input out '()]\n                          (if (empty? in)\n                            out\n                            (recur (rest in) (cons (first in) out)))))", "user": "55614f6ce4b0c656e3ff17c5"}, {"problem": 23, "code": "(fn rev\n  ([list]\n   (rev list [])\n  )\n  ([list result]\n   (if (empty? list)\n     result\n     (recur (rest list) (cons (first list) result)))\n  )\n)", "user": "556be3dce4b09a3098a524f7"}, {"problem": 23, "code": "into ()", "user": "555df9c8e4b0a2eb076a39b2"}, {"problem": 23, "code": "reduce conj ()", "user": "55673be4e4b0c656e3ff183c"}, {"problem": 23, "code": "#(reduce conj '() (map (fn [x] x) %))", "user": "5256dcc0e4b0541d1855ba3c"}, {"problem": 23, "code": "(fn foo [lst]\n  (if (empty? lst)\n    nil\n    (concat (foo (rest lst)) (list (first lst)))))", "user": "556c70b6e4b09a3098a524fc"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "556b83fbe4b09a3098a524ee"}, {"problem": 23, "code": "reduce conj ()", "user": "556c70dae4b09a3098a524fd"}, {"problem": 23, "code": "(fn[x] (reduce conj '() x))", "user": "556cc24ae4b09a3098a52502"}, {"problem": 23, "code": "(fn sdsu-reverse [sequence]\n  (case (count sequence)\n    1 sequence\n    (cons (last sequence) (sdsu-reverse (subvec (vec sequence) 0 (- (count sequence) 1))))))", "user": "556c94afe4b09a3098a524fe"}, {"problem": 23, "code": "(fn reverse- [x]\n  (reduce #(cons %2 %1) [] x)\n  )", "user": "556cd549e4b09a3098a52503"}, {"problem": 23, "code": "(fn[x] (into () x))", "user": "556bbaaee4b09a3098a524f0"}, {"problem": 23, "code": "reduce conj '()", "user": "5565d5e4e4b0c656e3ff181f"}, {"problem": 23, "code": "reduce conj()", "user": "556dd141e4b09a3098a52509"}, {"problem": 23, "code": "(fn myReverse [x]\n  ((fn xrev [x y]\n     (if (empty? x)\n       y\n       (xrev (rest x) (conj y (first x) ))\n       )\n     ) x '())\n  )", "user": "556ddbeae4b09a3098a5250a"}, {"problem": 23, "code": "(fn rev [xs](\n             reduce conj '() xs))", "user": "556de4dfe4b09a3098a5250c"}, {"problem": 23, "code": "(partial reduce conj ())", "user": "5568a1bde4b0c656e3ff1857"}, {"problem": 23, "code": "(fn [input]\n  (loop [x input y '()]\n    (if (empty? x)\n      y\n      (recur (rest x) (conj y (first x))))))", "user": "5223b9cee4b01819a2de42b5"}, {"problem": 23, "code": "#(reduce (fn [r x] (cons x r)) [] %)", "user": "556f443be4b09a3098a5251e"}, {"problem": 23, "code": "(fn [coll]\n  (reduce conj () coll))", "user": "55634f38e4b0c656e3ff17e8"}, {"problem": 23, "code": "(fn foo [coll]\n  (if (empty? coll)\n    []\n    (conj (foo (rest coll)) (first coll)) ))", "user": "4e8385d8535db62dc21a62db"}, {"problem": 23, "code": "#(loop\n  [res [] coll %]\n  (if (zero? (count coll))\n   res\n   (recur\n    (cons (first coll) res)\n    (rest coll))))", "user": "510608ebe4b01150e115ebe3"}, {"problem": 23, "code": "(fn [s] (reduce (fn [a e] (conj a e)) '() s))", "user": "55660248e4b0c656e3ff1824"}, {"problem": 23, "code": "reduce conj '()", "user": "55702247e4b09a3098a5252a"}, {"problem": 23, "code": "(fn [coll]\n  (loop [coll coll\n         reversed ()]\n    (if (= () coll)\n      reversed\n      (recur (rest coll) (cons (first coll) reversed)))))", "user": "55647fb1e4b0c656e3ff1809"}, {"problem": 23, "code": "#(reduce conj () %)\n\n;; also cool: into ()", "user": "55702081e4b09a3098a52529"}, {"problem": 23, "code": "(fn [s] (map second (sort-by first > (map-indexed vector s))))", "user": "556f3b1ce4b09a3098a5251c"}, {"problem": 23, "code": "(fn [s] ((fn r [s0 s1] (if (empty? s0) s1 (r (rest s0) (cons (first s0) s1)))) s nil))", "user": "556766c1e4b0c656e3ff1840"}, {"problem": 23, "code": "reduce\n  (fn\n    [acc x]\n    (cons x acc))\n  nil", "user": "548749cee4b0e286459a11c4"}, {"problem": 23, "code": "(fn [s]\n  (loop [r (apply (partial conj '()) s)]\n    (if (= [] (empty s))\n      (vec r)\n      r)))", "user": "5571d6e5e4b09a3098a5253f"}, {"problem": 23, "code": "#(for [i (range (dec (count %)) -1 -1)] (nth (seq %) i))", "user": "556a3243e4b09a3098a524de"}, {"problem": 23, "code": "(fn [co] (reduce (fn [cu e] (cons e cu)) [] co))", "user": "5570d5a4e4b09a3098a52533"}, {"problem": 23, "code": "(partial (fn f [acc xs] (if (empty? xs) acc (f (conj acc (first xs)) (rest xs)))) ())", "user": "556f35fee4b09a3098a5251a"}, {"problem": 23, "code": "(fn my-reverse [s] (if (empty? s) '[] (conj (my-reverse (rest s)) (first s))))", "user": "5572fdd7e4b0aa18f790f3f1"}, {"problem": 23, "code": "(fn [xs] (reduce (fn [bs,a] (cons a bs)) (take 0 xs) xs))", "user": "5572f74fe4b0aa18f790f3ef"}, {"problem": 23, "code": "#(reduce (fn [x y] (conj x y)) '() %)", "user": "5394c100e4b0b51d73faaecf"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "53fc63dce4b0de5c4184859f"}, {"problem": 23, "code": "(fn [coll] (reduce conj '() coll))", "user": "5554f886e4b0deb715856e10"}, {"problem": 23, "code": "#(reduce (fn [acc elem] (cons elem acc)) [] %)", "user": "556189a6e4b0c656e3ff17c9"}, {"problem": 23, "code": "#(reduce (fn [x y] (cons y x)) [] %)", "user": "54b63539e4b05787c3b163b4"}, {"problem": 23, "code": "reduce conj()", "user": "5570c836e4b09a3098a52532"}, {"problem": 23, "code": "into '()", "user": "555176e5e4b0deb715856deb"}, {"problem": 23, "code": "(fn [coll]\n  (loop [c coll\n         accum '()]\n    (if (nil? (first c))\n      accum\n      (recur (rest c) (conj accum (first c))))))", "user": "542c0708e4b0dad94371f29b"}, {"problem": 23, "code": "(fn [x](into [] (reduce conj '() x)) )", "user": "5559b443e4b0deb715856e3c"}, {"problem": 23, "code": "#(into () %)", "user": "556f48b9e4b09a3098a5251f"}, {"problem": 23, "code": "(fn [seq]\n  (reduce #(cons %2 %1) (empty seq) seq))", "user": "54570dfae4b080a794c2c889"}, {"problem": 23, "code": "(fn sm-reverse [x] (if (first x) (concat (sm-reverse (rest x)) (list (first x))) x)  )", "user": "5575aae2e4b05c286339e065"}, {"problem": 23, "code": "(fn [x] \n  (loop [y x z '()] \n    (if (== 0 (count y))\n         z\n            (recur (rest y) (conj z (first y) )  \n    )  \n    )\n  )\n)", "user": "526f670ce4b03e8d9a4a7365"}, {"problem": 23, "code": "(fn [tom]\n  (loop [more tom\n         out []]\n    (if (seq more)\n      (recur (rest more) (cons (first more) out))\n      out)))", "user": "55756d34e4b05c286339e062"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5576fee3e4b05c286339e078"}, {"problem": 23, "code": "#(loop [liste % \n        rev '()]\n   (if (empty? liste)\n     rev\n     (recur (rest liste) (conj rev (first liste)))))", "user": "5253de67e4b0541d1855b939"}, {"problem": 23, "code": "#(into () %)", "user": "552712e7e4b0ffed3738f92a"}, {"problem": 23, "code": "#(into () %)", "user": "52b89d55e4b07a9af57922b3"}, {"problem": 23, "code": "(fn reverse-seq [s]\n  (if (= s nil)\n    nil\n    (cons (last s) (reverse-seq (butlast s)))))", "user": "557734d3e4b05c286339e07d"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "550fb0bfe4b06e50f9beb17b"}, {"problem": 23, "code": "apply conj '()", "user": "536046a9e4b063bf7a5f8fe1"}, {"problem": 23, "code": "(fn MyReverse [A] (if (= 1 (count A)) A (concat [(last A)] (MyReverse (drop-last A)))))", "user": "55769940e4b05c286339e070"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "55306b8ae4b076ab5578f812"}, {"problem": 23, "code": "(fn [x]\n      (loop [elem (into [] x)\n             final-elem '()]\n        (if (empty? elem)\n          (into [] final-elem)\n          (let [[part & remaining] elem]\n            (recur remaining (conj final-elem part))))))", "user": "55744472e4b0aa18f790f402"}, {"problem": 23, "code": "reduce #(cons %2 %1) ()", "user": "5416b4a2e4b01498b1a71a01"}, {"problem": 23, "code": "#(reduce conj '() %1)", "user": "5576006ae4b05c286339e068"}, {"problem": 23, "code": "#(reduce (fn [c v] (cons v c)) [] %)", "user": "557954aae4b05c286339e092"}, {"problem": 23, "code": "(fn [x] (reduce (fn [z y] (concat (list y) z)) '() x ))", "user": "5579d60ce4b05c286339e099"}, {"problem": 23, "code": "(fn rev [x]\n  (if (empty? x)\n    x\n    (cons\n     (last x)\n     (rev (butlast x)))))", "user": "53065acbe4b02e8216869792"}, {"problem": 23, "code": "(fn f[coll](if (empty? coll) nil (cons (last coll) (f (butlast coll)))))", "user": "55654e17e4b0c656e3ff1818"}, {"problem": 23, "code": "#(into '() %)", "user": "557a1e18e4b05c286339e09e"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5579bc24e4b05c286339e098"}, {"problem": 23, "code": "(fn [liste]\n  \t(loop [rliste liste result () ] \n      (if (empty? rliste)\n        result\n        (recur (rest rliste) (conj result (first rliste) ))\n      )\n    )\n  )", "user": "556f2009e4b09a3098a52519"}, {"problem": 23, "code": "(fn myrev [coll] \n   ((fn inner [old new] \n        (if (empty? old) new \n          (inner (drop-last old) (conj new (last old)))))\n coll []\n))", "user": "557af43ae4b05c286339e0a8"}, {"problem": 23, "code": "(fn my-reverse [l]\n  (into () l))", "user": "557bcce4e4b05c286339e0b9"}, {"problem": 23, "code": "(fn [a] (reduce conj () a))", "user": "554f7ef2e4b00713264bd9a1"}, {"problem": 23, "code": "(fn f [p] (if (= p []) '[] (conj (f (rest p)) (first p))))", "user": "557bd432e4b05c286339e0bb"}, {"problem": 23, "code": "(fn mojeReverse [ceho] \n     ((fn ob [a b] \n        (if (empty? b) a (ob (conj a (last b)) (butlast b))) ) [] ceho))", "user": "5576e78de4b05c286339e075"}, {"problem": 23, "code": "(fn [a-seq]\n  (loop [s a-seq n ()]\n    (if (empty? s)\n      n\n      (recur (rest s) (conj n (first s))))))", "user": "557cf48be4b05c286339e0ca"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5392500ae4b0b51d73faaeaf"}, {"problem": 23, "code": "(fn myrev [x] (if (= [] x) [] (conj (myrev (rest x)) (first x))))", "user": "557db87fe4b05c286339e0cc"}, {"problem": 23, "code": "(fn [s] (loop [se s acc ()]\n          (if (empty? se)\n            acc\n            (recur (rest se) (cons (first se) acc)))))", "user": "557dbc9de4b05c286339e0cd"}, {"problem": 23, "code": "(fn [lat]\n  (into '() lat))", "user": "5576961be4b05c286339e06f"}, {"problem": 23, "code": "reduce (fn [ele acc] (cons acc ele)) nil", "user": "506f0968e4b09350ab4199f5"}, {"problem": 23, "code": "#(into () % )", "user": "54edfebbe4b024c67c0cf869"}, {"problem": 23, "code": "(fn reverse-seq [ls]\n             (if (= ls ())\n                 ()\n                 (cons (last ls) (reverse-seq (drop-last ls)))))", "user": "557a42bee4b05c286339e0a0"}, {"problem": 23, "code": "#(into () %)", "user": "557ae0a8e4b05c286339e0a7"}, {"problem": 23, "code": "(fn [c] (reduce #(conj %1 %2) '() c))", "user": "5578c67fe4b05c286339e08d"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5537c939e4b09218d5f44fd2"}, {"problem": 23, "code": "#(into () %)", "user": "5573a505e4b0aa18f790f3fa"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "557ed776e4b05c286339e0da"}, {"problem": 23, "code": "(fn [col] ((fn [coll revCol] (if (empty? coll) revCol (recur (rest coll) (cons (first coll) revCol)))) col (empty col)))", "user": "557ed664e4b05c286339e0d9"}, {"problem": 23, "code": "into ()", "user": "557e8326e4b05c286339e0d7"}, {"problem": 23, "code": "(fn[rev col] (if(empty? col) rev (recur (conj rev (first col)) (rest col)))) '()", "user": "557ffd0ee4b05c286339e0e3"}, {"problem": 23, "code": "(fn [x] (into () x))", "user": "54e604a1e4b024c67c0cf801"}, {"problem": 23, "code": "reduce #(cons %2 %) ()", "user": "5553b729e4b0deb715856e05"}, {"problem": 23, "code": "#(vec (reduce conj '() %1))", "user": "55625e32e4b0c656e3ff17d8"}, {"problem": 23, "code": "#(reduce (fn[c i] (cons i c)) [] %)", "user": "5580da74e4b05c286339e0f1"}, {"problem": 23, "code": "(fn [xs]\n  (reduce \n   (fn [a x] (cons x a))\n   ()\n   xs))", "user": "5581747fe4b05c286339e0fa"}, {"problem": 23, "code": "#(into () %)", "user": "55816a70e4b05c286339e0f8"}, {"problem": 23, "code": "(fn [ls]\n  (loop [n 0 lt '() ls1 ls]    \n    (if (= n (count ls))\n      lt\n      (recur (inc n) (conj lt (first ls1)) (drop 1 ls1))            \n      )\n    )\n)", "user": "5581a6dae4b05c286339e0fe"}, {"problem": 23, "code": "(fn rev [x] (if-not (empty? x) (conj (rev(drop-last x)) (last x)) ))", "user": "555d0121e4b0a2eb076a39a4"}, {"problem": 23, "code": "(fn myReverse\n  [sequence]\n  (reduce conj () sequence)\n  )", "user": "557e9d17e4b05c286339e0d8"}, {"problem": 23, "code": "#(into () %)", "user": "5037534de4b0af0658af77aa"}, {"problem": 23, "code": "#((fn f [sq acc] \n  (if (empty? sq) acc\n    (f (rest sq) (cons (first sq) acc))))\n % '())", "user": "55815973e4b05c286339e0f6"}, {"problem": 23, "code": "reduce (fn [acc, r] (concat [r] acc)) []", "user": "55831f0fe4b05c286339e112"}, {"problem": 23, "code": "(fn[sq] (reduce conj '() sq))", "user": "55757e81e4b05c286339e063"}, {"problem": 23, "code": "#(reduce (fn [f v] (into [v] f)) [] %)", "user": "5582c5b1e4b05c286339e10a"}, {"problem": 23, "code": "(fn [coll]\n  (loop [original coll reversed (list)]\n    (if (empty? original)\n      reversed\n      (recur (rest original) (cons (first original) reversed)))))", "user": "55842c7ee4b05c286339e11d"}, {"problem": 23, "code": "#(loop [counter (count %) rv []]\n   (if (= counter 0) rv\n     (recur (- counter 1) (concat rv [(nth (seq %) (- counter 1))]))))", "user": "558378dce4b05c286339e115"}, {"problem": 23, "code": "(fn my-reverse [coll] \n  (if (empty? coll) \n   []\n   (conj (my-reverse (rest coll)) (first coll)\n   )))", "user": "55844125e4b05c286339e121"}, {"problem": 23, "code": "(fn rec [aseq] (if (empty? aseq) [] (conj (rec (rest aseq)) (first aseq))))", "user": "54f39ce3e4b050824f58f5c7"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "54bf99c8e4b0ed20f4ff6f05"}, {"problem": 23, "code": "(fn reverse-seq [l]\n  (if (= l nil)\n    nil\n    (cons (last l) (reverse-seq (butlast l)))))", "user": "55845fb6e4b04192f3441eed"}, {"problem": 23, "code": "reduce conj ()", "user": "555883c5e4b0deb715856e2d"}, {"problem": 23, "code": "(partial into ())", "user": "5585aa48e4b001b0851d7510"}, {"problem": 23, "code": "(fn [s] (loop [t () s s] (if (empty? s) t (recur (conj t (first s)) (rest s)))))", "user": "54c9571ee4b045293a27f66b"}, {"problem": 23, "code": "#(into '() %)", "user": "53bf6962e4b0c98a41f5cca2"}, {"problem": 23, "code": "(fn [x] (reduce conj () x) )", "user": "55807091e4b05c286339e0eb"}, {"problem": 23, "code": "reduce #(cons %2 %) []", "user": "50ec409ce4b04edc33777045"}, {"problem": 23, "code": "(fn [l]\n  (loop [sl l el ()]\n    (if (empty? sl)\n      el\n      (recur (rest sl) (conj el (first sl))))))", "user": "52979551e4b02ebb4ef75043"}, {"problem": 23, "code": "(fn [lst]\n  (loop [tmp lst\n         output '()]\n    (if (empty? tmp)\n      output\n      (recur (rest tmp) (conj output (first tmp))))))", "user": "55838353e4b05c286339e116"}, {"problem": 23, "code": "(fn [XS]\n\t(let [func (fn iter [xs proc]\n\t\t(cond (empty? xs) proc\n\t\t\ttrue (iter (rest xs) (conj proc (first xs)))))]\n\t(func XS nil)))", "user": "5583888ae4b05c286339e117"}, {"problem": 23, "code": "reduce #(conj %1 %2) '()", "user": "4f4391a9e4b0d7d3c9f3fd23"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "558843dae4b059ccff29b1f3"}, {"problem": 23, "code": "(fn [x]  ((fn [x y] (if (empty? x) y  (recur (take (- (count x) 1) x)  (conj y (last x))) )) x [] ))", "user": "55818b0ee4b05c286339e0fb"}, {"problem": 23, "code": "(fn [s] (into '() s))", "user": "55885edae4b059ccff29b1f6"}, {"problem": 23, "code": "reduce #(conj %1 %2) ()", "user": "558869ade4b059ccff29b1f7"}, {"problem": 23, "code": "(fn rev [l]\n  (if (= (count l) 0)\n    []\n    (conj (rev (rest l)) (first l))))", "user": "503777a4e4b0af0658af77ac"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "557e2eafe4b05c286339e0d2"}, {"problem": 23, "code": "#(into () %)", "user": "5587cdefe4b059ccff29b1e7"}, {"problem": 23, "code": "reduce #(cons %2 %1) []", "user": "557ca912e4b05c286339e0c8"}, {"problem": 23, "code": "#(into '() %)", "user": "558466fce4b04192f3441eee"}, {"problem": 23, "code": "(fn [seq]\n   (reduce conj nil seq))", "user": "55895eade4b059ccff29b202"}, {"problem": 23, "code": "#(into()%)", "user": "55896a0ce4b059ccff29b204"}, {"problem": 23, "code": "reduce (fn [acc elem] (cons elem acc)) []", "user": "5586f091e4b059ccff29b1dc"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "4ebed069535dfed6da9c6d99"}, {"problem": 23, "code": "#(into () %)", "user": "55882c84e4b059ccff29b1f2"}, {"problem": 23, "code": "into '()", "user": "55893ebbe4b059ccff29b1ff"}, {"problem": 23, "code": "#(into () %)", "user": "558a4357e4b0277789237617"}, {"problem": 23, "code": "(fn [x] \n  (reduce (fn [m, i] \n            (list* i m))\n          '()\n          x))", "user": "5587d8b3e4b059ccff29b1e8"}, {"problem": 23, "code": "(fn [coll] (reduce conj '() coll))", "user": "558a81fbe4b027778923761c"}, {"problem": 23, "code": "(fn [x]\n  (reduce conj () x))", "user": "55855f00e4b001b0851d750b"}, {"problem": 23, "code": "#(reduce conj '() (apply list %))", "user": "558aabbfe4b0277789237621"}, {"problem": 23, "code": "(fn [s]\n  (letfn [(revseq [s]\n                  (if (first s)\n                    (conj (revseq (rest s)) (first s))\n                    []\n                    ))]\n    (revseq s)))", "user": "54530382e4b0e397800069cc"}, {"problem": 23, "code": "reduce conj '()", "user": "551d8796e4b07993ea3788ec"}, {"problem": 23, "code": "reduce conj ()", "user": "55857985e4b001b0851d750c"}, {"problem": 23, "code": "reduce conj ()", "user": "5589e88ae4b0277789237610"}, {"problem": 23, "code": "(fn [x] (reduce #(cons %2 %) (empty x) x))", "user": "558aa97de4b0277789237620"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "558b41fce4b0277789237628"}, {"problem": 23, "code": "(fn [s]                                                                                                                                                 \n  (loop [s- s r '()]                                                                                                            \n    (if (empty? s-)                                                                                                                                     \n      r                                                                                                                         \n      (recur (rest s-) (conj r (first s-))))))", "user": "558b50d5e4b027778923762b"}, {"problem": 23, "code": "reduce conj ()", "user": "5564c113e4b0c656e3ff180d"}, {"problem": 23, "code": "#(vec (into () %1))", "user": "55382530e4b09218d5f44fdd"}, {"problem": 23, "code": "(fn [s] (loop [rs '() ros s]\n           (if (seq ros)\n             (recur (conj rs (first ros)) (rest ros))\n             rs)))", "user": "4fffa422e4b0678c553fc404"}, {"problem": 23, "code": "(fn [x] \n  (loop [f x r '()]\n    (if (nil? f)\n      r\n      (recur (next f) (conj r (first f)))\n    )\n  )\n)", "user": "558b494ce4b0277789237629"}, {"problem": 23, "code": "(fn [s] (reduce conj '() s) )", "user": "558c8405e4b027778923763a"}, {"problem": 23, "code": "(fn [x] ((fn [x s] (if (empty? x) s (recur (rest x) (conj s (first x))))) x ()))", "user": "5437d022e4b032a45b869309"}, {"problem": 23, "code": "reduce conj '()", "user": "558d43f1e4b0277789237640"}, {"problem": 23, "code": "(fn myreverse\n\t[myseq]\n\t(loop\n\t\t[myrest myseq res nil]\n\t\t(if (nil? (first myrest))\n\t\t\tres\n\t\t\t\n\t\t\t(recur (rest myrest) (cons (first myrest) res))\n\t\t\t\n\t\t\t)\n\t\t))", "user": "55897fe2e4b059ccff29b205"}, {"problem": 23, "code": "reduce conj ()", "user": "557f7c8be4b05c286339e0e0"}, {"problem": 23, "code": "#(into () %)", "user": "5589a735e4b059ccff29b206"}, {"problem": 23, "code": "#(loop [in % out ()]\n    (if (empty? in)\n      out\n      (recur (rest in) (conj out (first in)))))", "user": "5567643ce4b0c656e3ff183f"}, {"problem": 23, "code": "(fn rev\n  [s]\n  (loop [s s i 0 x '()]\n    (if (= i (count s))\n      x\n      (recur s (+ i 1) (conj x (nth (to-array s) i))))))", "user": "555f6215e4b0a2eb076a39c4"}, {"problem": 23, "code": "(fn [seq] (reduce (fn [seq a] (conj seq a)) '() seq))", "user": "558bdcefe4b0277789237633"}, {"problem": 23, "code": "reduce conj '()", "user": "558df2ebe4b0277789237649"}, {"problem": 23, "code": "(fn [sq]\n  (reduce conj '() sq))", "user": "558bb38fe4b0277789237631"}, {"problem": 23, "code": "#(reduce (fn [x y] (conj x y)) () %)", "user": "558ed227e4b0277789237658"}, {"problem": 23, "code": "into ()", "user": "558eebf9e4b027778923765b"}, {"problem": 23, "code": "#(reduce conj nil %)", "user": "558f4fbae4b0277789237661"}, {"problem": 23, "code": "#(reduce (fn [acc el] (cons el acc)) [] %)", "user": "558fec41e4b0277789237666"}, {"problem": 23, "code": "(fn [s]\n   (loop [in s\n          out []]\n     (if (empty? in)\n       out\n       (recur (drop-last in) (conj out (last in) ))\n       )))", "user": "5587cd86e4b059ccff29b1e6"}, {"problem": 23, "code": "(fn [coll] (reduce conj () coll))", "user": "559057c4e4b027778923766e"}, {"problem": 23, "code": "(fn reverseSeq [s]\n   ((fn [se revSeq]\n      (if (seq se)\n        (recur (rest se) (cons (first se) revSeq))\n        revSeq))\n   s ()))", "user": "556b67c9e4b09a3098a524ed"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "557e6b73e4b05c286339e0d6"}, {"problem": 23, "code": "#(into () %)", "user": "5590e461e4b0277789237675"}, {"problem": 23, "code": "(fn [x]\n  (loop [l x\n         r []]\n    (if (empty? l) r\n                   (recur (rest l) (cons (first l) r)))))", "user": "503c90aae4b06c4e0e1fa24b"}, {"problem": 23, "code": "(fn [x]\n  (loop [s x r '()]\n    (if (empty? s)\n      r\n      (recur (rest s) (conj r (first s))))))", "user": "5590e55de4b0277789237676"}, {"problem": 23, "code": "#(reduce conj '() %1)", "user": "5489dd4de4b0e286459a11ef"}, {"problem": 23, "code": "(fn [xs] (for [i (range (count xs))] (nth (seq xs) (- (count xs) i 1))))", "user": "559141b1e4b0604b3f94d576"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "55916d7be4b0604b3f94d57d"}, {"problem": 23, "code": "#(map second (sort-by first > (map-indexed vector %)))", "user": "5591da55e4b0604b3f94d585"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5590ebb1e4b0277789237677"}, {"problem": 23, "code": "(fn \n  [x]\n  (loop [ls0 x ls1 '()]\n    (if (empty? ls0)\n      ls1\n      (recur (rest ls0) (conj ls1 (first ls0))))))", "user": "55920e24e4b0604b3f94d587"}, {"problem": 23, "code": "#(into () %)", "user": "55913b57e4b0604b3f94d575"}, {"problem": 23, "code": "reduce conj ()", "user": "55915fe9e4b0604b3f94d579"}, {"problem": 23, "code": "into ()", "user": "5592dc6be4b0c79f6e1db935"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5509bd6ee4b06e50f9beb120"}, {"problem": 23, "code": "(fn [l]\n  (loop [orig l copy nil]\n    (if (empty? orig)\n      copy\n      (recur (rest orig) (conj copy (first orig))))))", "user": "55934bebe4b0c79f6e1db93b"}, {"problem": 23, "code": "(fn ! [%]\n  (if (= % nil)\n    ()\n    (cons (last %) (! (butlast %)))))", "user": "55933c7ae4b0c79f6e1db938"}, {"problem": 23, "code": "(fn [x] (loop [orig x\n               rev  []]\t\n          (if (empty? orig)\n            rev\n            (recur (rest orig) (cons (first orig) rev)))))", "user": "53c0f4dee4b00fb29b221259"}, {"problem": 23, "code": "(fn [s]\n  (loop [s s\n         n (empty s)]\n    (if (empty? s)\n      n\n      (recur (rest s) (cons (first s) n)))))", "user": "531c6e72e4b08068f379eda0"}, {"problem": 23, "code": "reduce (fn [l e] (cons e l)) ()", "user": "559279b7e4b0604b3f94d58c"}, {"problem": 23, "code": "(fn [input_array] (map #(nth (seq input_array) %) (sort-by - (range (count input_array)))))", "user": "55893b09e4b059ccff29b1fe"}, {"problem": 23, "code": "reduce conj ()", "user": "5591b634e4b0604b3f94d581"}, {"problem": 23, "code": "#(reduce (fn [reversed x] (into [x] reversed)) [] %)", "user": "55941019e4b0c79f6e1db94b"}, {"problem": 23, "code": "(partial reduce conj ())", "user": "5594721de4b0c79f6e1db955"}, {"problem": 23, "code": "(fn\n  [l]\n  (loop [l l\n         acc '()]\n    (if (= (count l) 0)\n      acc\n      (recur (rest l) (conj acc (first l))\n        )))\n  )", "user": "55923ef7e4b0604b3f94d58a"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "558ea13be4b0277789237654"}, {"problem": 23, "code": "#(into () %)", "user": "55938fe2e4b0c79f6e1db940"}, {"problem": 23, "code": "into ()", "user": "5593b62ae4b0c79f6e1db944"}, {"problem": 23, "code": "#(reduce conj '() %1)", "user": "5594f8aee4b0c79f6e1db95c"}, {"problem": 23, "code": "#(let \n   [r\n    (loop [in % out ()] (if (empty? in) out (recur (rest in) (conj out (first in)))))]\n   (if (= (type %) clojure.lang.PersistentVector) (vec r) r))", "user": "5595071ae4b0c79f6e1db95d"}, {"problem": 23, "code": "#(map (comp last drop-last) (range (count %)) (repeat (count %) %))", "user": "557819dce4b05c286339e088"}, {"problem": 23, "code": "(fn[n] (into () n))", "user": "55950c5fe4b0c79f6e1db95e"}, {"problem": 23, "code": "reduce conj '()", "user": "5585f088e4b001b0851d7513"}, {"problem": 23, "code": "#(loop [a % b '()] (if (> (count a) 0) (recur (rest a) (conj b (first a))) b\n                     ))", "user": "5595415ae4b0c79f6e1db965"}, {"problem": 23, "code": "reduce conj '()", "user": "55907e8fe4b0277789237672"}, {"problem": 23, "code": "#(reduce conj () %1)", "user": "5593f481e4b0c79f6e1db946"}, {"problem": 23, "code": "(fn [coll]\n  (loop [remaining coll\n         reversed '()]\n    (if (empty? remaining)\n      reversed\n      (recur (rest remaining) (cons (first remaining) reversed)))))", "user": "4f5599dfe4b0a7574ea71806"}, {"problem": 23, "code": "(fn [coll]\n  (reduce (fn [acc e] (conj acc e)) '() coll))", "user": "52d38c51e4b099d49816f0c5"}, {"problem": 23, "code": "(fn [s]\n  (reduce conj () s))", "user": "559622cee4b0c79f6e1db975"}, {"problem": 23, "code": "(fn clojure24 [col]\n  (loop [x col\n         result '()]\n    (if (empty? x)\n      result\n      (recur  (next x)  (conj result  (first x)))\n      )\n    )\n  )", "user": "525873e8e4b0cb4875a45cb2"}, {"problem": 23, "code": "#(reduce (fn [col x] (cons x col)) [] %)", "user": "525523e3e4b0541d1855b9cc"}, {"problem": 23, "code": "#(into () %)", "user": "5526ecc4e4b0ffed3738f928"}, {"problem": 23, "code": "(fn [set] (loop [s set result '()]\n  (if (= (count s) 0) \n    result\n    (recur  (rest s ) (conj result  (first s)))\n    )))", "user": "5592bf9fe4b0c79f6e1db933"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "54de16cae4b024c67c0cf79c"}, {"problem": 23, "code": "reduce conj ()", "user": "5593619ae4b0c79f6e1db93c"}, {"problem": 23, "code": "(fn [coll]\n              (loop [[r & more :as all] (seq coll)\n                     acc '()]\n                (if all\n                  (recur more (cons r acc))\n                  acc)))", "user": "5597cc26e4b031d6649c9b93"}, {"problem": 23, "code": "(fn [xs] (reduce (fn [ys x] (cons x ys)) [] xs))", "user": "4fdb0c0ae4b05e33b9224f57"}, {"problem": 23, "code": "#(into () %)", "user": "5593a03ce4b0c79f6e1db942"}, {"problem": 23, "code": "reduce conj '()", "user": "5595ffabe4b0c79f6e1db972"}, {"problem": 23, "code": "(fn [s] (reduce (fn [acc v] (conj (seq acc) v)) [] s))", "user": "55990d3ce4b031d6649c9ba3"}, {"problem": 23, "code": "(fn reverse-it [x] \n  (if (empty? x) nil \n    (concat (reverse-it (rest x)) [(first x)])))", "user": "55993deee4b031d6649c9ba5"}, {"problem": 23, "code": "(fn [l]\n  (loop [lst l rev ()]\n    (if (empty? lst)\n      rev\n      (recur (rest lst)(cons (first lst) rev)))))", "user": "55929e89e4b0604b3f94d58e"}, {"problem": 23, "code": "(fn [a-seq]\n  (loop [remaining a-seq\n         acc '()]\n    (if (empty? remaining)\n      acc\n      (recur (rest remaining)\n             (conj acc (first remaining))))))", "user": "55995fa7e4b031d6649c9ba9"}, {"problem": 23, "code": "#(reduce (fn [r x] (cons x r)) (empty %) %)", "user": "559a9a3de4b066d22e731f45"}, {"problem": 23, "code": "(fn [s] \n  (loop [f (first s) r (rest s) out ()] \n    (if (nil? f) \n      out \n      (recur (first r) (rest r) (conj out f)))))", "user": "5599cc64e4b031d6649c9bb3"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "55996253e4b031d6649c9baa"}, {"problem": 23, "code": "into ()", "user": "559972d1e4b031d6649c9bab"}, {"problem": 23, "code": "#(into () %)", "user": "4e6a23d0535d8ccf87e9fea0"}, {"problem": 23, "code": "(fn rev [coll] (if (empty? coll) [] (conj (rev (rest coll)) (first coll))))", "user": "559ab207e4b066d22e731f49"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "5592c56ee4b0c79f6e1db934"}, {"problem": 23, "code": "reduce conj '()", "user": "55496eeae4b0a04f79299569"}, {"problem": 23, "code": "(fn [x] \n  (loop [x x result []]\n    (if (empty? x) result\n      (recur (rest x) (cons (first x) result)))))", "user": "559b55d6e4b066d22e731f54"}, {"problem": 23, "code": "#(into () %)", "user": "5595e038e4b0c79f6e1db971"}, {"problem": 23, "code": "#(into '() %)", "user": "559c13c5e4b066d22e731f61"}, {"problem": 23, "code": "#(loop [x %1 out []] (if (empty? x) out (recur (butlast x) (conj out (last x)))))", "user": "5596af34e4b04c1e5c31d758"}, {"problem": 23, "code": "(fn my-reverse [l]\n  (if (empty? l)\n    l\n    (cons (last l) (my-reverse (butlast l)))))", "user": "5599abc9e4b031d6649c9bb0"}, {"problem": 23, "code": "sort #(compare %2 %1)", "user": "55989c25e4b031d6649c9b9b"}, {"problem": 23, "code": "into ()", "user": "559b2ad1e4b066d22e731f4e"}, {"problem": 23, "code": "#(loop [coll % result [] i 0] \n   (if (= i (count coll)) result \n     (recur coll (concat (vector (nth (into [] coll) i)) result) (inc i))\n   )\n )", "user": "5582dfb6e4b05c286339e10d"}, {"problem": 23, "code": "#(into '() %)", "user": "5594e0e3e4b0c79f6e1db95b"}, {"problem": 23, "code": "(fn rev [x] (reduce conj () x))", "user": "559647ebe4b0c79f6e1db977"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "52f3a2afe4b05e3f0be25f13"}, {"problem": 23, "code": "(fn [sq]\n  (loop [sq-it sq\n         ret (empty sq)]\n    (if (empty? sq-it)\n      ret\n      (recur (rest sq-it)\n             (cons (first sq-it) ret)))))", "user": "559d33b3e4b0ec2b359424d9"}, {"problem": 23, "code": "into '()", "user": "559ce276e4b0ec2b359424d7"}, {"problem": 23, "code": "(fn [v] (reduce conj () v))", "user": "52fbbadde4b047fd5583700f"}, {"problem": 23, "code": "(fn [coll]\n  (loop [coll coll rev_coll ()]\n    (if (empty? coll)\n      rev_coll\n      (recur (rest coll) (cons (first coll) rev_coll)))))", "user": "559bdf16e4b066d22e731f5a"}, {"problem": 23, "code": "(fn [s]\n\t(sort #(if\t(sequential? %)\n             \t(> (first %1) (first %2))\n             \t(> %1 %2)\n             ) s))", "user": "559468cbe4b0c79f6e1db954"}, {"problem": 23, "code": "reduce (fn [cur elem] (concat [elem] cur)) []", "user": "54f3d6c7e4b050824f58f5cb"}, {"problem": 23, "code": "reduce conj ()", "user": "55921c21e4b0604b3f94d588"}, {"problem": 23, "code": "reduce conj ()", "user": "559e25fde4b08a52bd4f97d0"}, {"problem": 23, "code": "(fn new-reverse [l]\n  (cond\n   (empty? l)  []\n   :else (conj (new-reverse (rest l))  (first l))\n   ))", "user": "559f06bae4b0acc240e314e6"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "559c4236e4b066d22e731f67"}, {"problem": 23, "code": "#(loop [lis % res '()]\n   (if (seq lis)\n     (recur (rest lis) (conj res (first lis)))\n     res))", "user": "55868660e4b059ccff29b1d4"}, {"problem": 23, "code": "(fn [my-list] (reduce (fn [acc x] (conj acc x)) () my-list))", "user": "559ed93ce4b0acc240e314e3"}, {"problem": 23, "code": "#(reduce conj  () %)", "user": "54a841b8e4b09f271ff37ca1"}, {"problem": 23, "code": "reduce conj ()", "user": "55342ee0e4b09218d5f44f98"}, {"problem": 23, "code": "reduce #(conj %1 %2) '()", "user": "5576f299e4b05c286339e077"}, {"problem": 23, "code": "(fn foo [s] (if (next s) (conj (foo (drop-last s)) (last s)) s))", "user": "559e7848e4b08a52bd4f97d4"}, {"problem": 23, "code": "#(loop [a (seq %) r '()] (if (empty? a) r (recur (rest a) (cons (first a) r))))", "user": "559ff3b1e4b0acc240e314ed"}, {"problem": 23, "code": "(fn [coll]\n  (loop [[r & more :as all] (seq coll)\n         acc '()]\n    (if all\n      (recur more (cons r acc))\n      acc)))", "user": "559d6288e4b0ec2b359424dc"}, {"problem": 23, "code": "#(loop [s % rev '()]\n   (if\n     (empty? s) rev;\n     (recur (rest s) (conj rev (first s)))\n     )\n   )", "user": "559fefb4e4b0acc240e314ec"}, {"problem": 23, "code": "(fn [coll] (reduce conj '() coll))", "user": "559ffabae4b0acc240e314ef"}, {"problem": 23, "code": "(fn [coll] \n    (reduce conj '() coll)\n)", "user": "55916764e4b0604b3f94d57b"}, {"problem": 23, "code": "#(into () %)", "user": "55a09645e4b0acc240e314fe"}, {"problem": 23, "code": "into ()", "user": "55a09644e4b0acc240e314fd"}, {"problem": 23, "code": "#(into () %)", "user": "55a0d7e0e4b0acc240e31503"}, {"problem": 23, "code": "into '()", "user": "55a12668e4b0acc240e3150b"}, {"problem": 23, "code": "reduce conj ()", "user": "55a0fd18e4b0acc240e31507"}, {"problem": 23, "code": "(fn af\n  ([s] (af s '()))\n  ([s acc] \n     (if (not (empty? s))\n      (recur (rest s) (cons (first s) acc))\n      acc)))", "user": "5586a459e4b059ccff29b1d5"}, {"problem": 23, "code": "reduce conj '()", "user": "55a161d1e4b0acc240e31511"}, {"problem": 23, "code": "(fn [x]\n  (into () x))", "user": "55a1683ce4b0acc240e31513"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "53f191b8e4b0742d9025b0e0"}, {"problem": 23, "code": "(fn [s]\n  ((fn [t acc]\n    (if (seq t)\n      (recur (rest t) (conj acc (first t)))\n      acc)) s '()))", "user": "55a1ba5ee4b0acc240e31517"}, {"problem": 23, "code": "(fn [input]\n  (loop [in input\n         out []]\n    (if (empty? in)\n      out\n      (recur (take (- (count in) 1) in) (conj out (last in))))))", "user": "55a1c7efe4b0acc240e31518"}, {"problem": 23, "code": "#(into () %)", "user": "557f1a08e4b05c286339e0dc"}, {"problem": 23, "code": "#(loop [s %\n        rs '()]\n   (if (seq s)\n     (recur (rest s)\n            (conj rs (first s)))\n     rs))", "user": "55a0ea7de4b0acc240e31505"}, {"problem": 23, "code": "(fn [li] (reduce conj '() li))", "user": "55a21be1e4b0acc240e3151e"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "4f9e830ae4b0dcca54ed6d2c"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "553527ede4b09218d5f44fab"}, {"problem": 23, "code": "(fn\n  [param]\n  (\n   loop[regList param revList []]\n   (if(empty? regList)\n     revList\n     (recur (take (- (count regList) 1) regList) (conj revList (last regList)))\n   )))", "user": "55995d88e4b031d6649c9ba8"}, {"problem": 23, "code": "#(into () %)", "user": "55a02d8ae4b0acc240e314f2"}, {"problem": 23, "code": "#(reduce (fn [r x] (cons x r)) nil %)", "user": "55a2d5c2e4b0acc240e3152c"}, {"problem": 23, "code": "(fn [os] \n  (loop [s (.empty os) \n         t os] \n    (if (empty? t) \n      s \n      (recur (cons (first t) s) (rest t)) ) \n    ) )", "user": "55a31c66e4b0acc240e31530"}, {"problem": 23, "code": "#(into () %)", "user": "55a346e8e4b0acc240e31532"}, {"problem": 23, "code": "#(reduce (fn [c x] (cons x c)) [] %)", "user": "55998d0ce4b031d6649c9bac"}, {"problem": 23, "code": "(fn recursive-reverse [coll]\n    (if (empty? coll)\n        []\n        (conj (recursive-reverse (rest coll)) (first coll) )))", "user": "55a35ef4e4b0acc240e31535"}, {"problem": 23, "code": "(fn r [s]\n\t(let [f (fn [old new]\n\t\t(let [head (first old)]\n\t\t\t(if (nil? head)\n\t\t\t\tnew\n\t\t\t\t(recur (rest old) (conj new head)))))]\n\t  (f s '())))", "user": "531dc21be4b08068f379edb1"}, {"problem": 23, "code": "#(loop [c % \n         l '()]\n    (if (empty? c)\n        l\n        (recur (rest c) (conj l (first c)))))", "user": "559ffd74e4b0acc240e314f0"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "55a1d7f6e4b0acc240e31519"}, {"problem": 23, "code": "(fn rev [xs] \n    ((fn rev_helper \n    [xs acc]\n    (if (empty? xs)\n        acc\n        (rev_helper (rest xs) (conj acc (first xs))))) xs '()))", "user": "55a3ca84e4b0acc240e3153c"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "559c406be4b066d22e731f66"}, {"problem": 23, "code": "#(reduce (fn [x y] (conj x y)) '() %)", "user": "55a48cd2e4b0acc240e31546"}, {"problem": 23, "code": "(fn [coll]\n  (reduce #(cons %2 %1) '() coll))", "user": "5587ddd9e4b059ccff29b1ea"}, {"problem": 23, "code": "(fn [c] \n  (loop [coll c r []]\n    (if (empty? coll)\n        (if (set? coll) (set r) r)\n            (recur (rest coll) (cons (first coll) r)))))", "user": "542c900be4b0dad94371f2a9"}, {"problem": 23, "code": "(fn reverse-seq [coll]\n  (let [rcoll (into () coll)]\n    rcoll))", "user": "552bd5c2e4b0ffed3738f969"}, {"problem": 23, "code": "(fn rev [l] \n  (if (empty? l) []\n    (conj (rev (rest l)) (first l) \n    )\n  )\n)", "user": "55a59ebae4b0acc240e3154d"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "54e956d9e4b024c67c0cf831"}, {"problem": 23, "code": "into ()", "user": "503e91d4e4b06c4e0e1fa269"}, {"problem": 23, "code": "(fn [input]\n  (reduce conj '() (seq input)))", "user": "55a62092e4b0acc240e31554"}, {"problem": 23, "code": "reduce #(cons %2 %1) []", "user": "5422979be4b01498b1a71ac2"}, {"problem": 23, "code": "reduce conj '()", "user": "532dbd3ce4b019098a6f8b40"}, {"problem": 23, "code": "into ()", "user": "559b2b13e4b066d22e731f4f"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "55a3ef22e4b0acc240e31540"}, {"problem": 23, "code": "#(loop [coll % n 0]\n   (if (= n (count coll))\n     coll\n     (recur (concat \n             (take n coll) \n             (list (last coll)) \n             (take (- (count coll) (inc n)) (drop n coll))\n            ) (inc n))\n     ))", "user": "55a74d46e4b09e57187da2a3"}, {"problem": 23, "code": "(fn\n  [col]\n  (loop [s col\n         i (count col)\n         n []]\n    (if (empty? s)\n      n\n      (recur (take (- (count s) 1) s) (+ i 1) (conj n (last s))))))", "user": "55a7e096e4b0988bba2ad934"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5342702ce4b00652c8746edb"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "55a9201fe4b0988bba2ad93f"}, {"problem": 23, "code": "(fn f [s]\n   (let [unsorted\n         (cond\n           (sorted? s) (into '() s)\n           :else s\n           )]\n     (into (empty unsorted) (into '() unsorted))\n     ))", "user": "55aa5f73e4b0988bba2ad94b"}, {"problem": 23, "code": "into ()", "user": "553beff9e4b09218d5f4500d"}, {"problem": 23, "code": "(fn [xs]\n  (loop [new-xs '()\n        remain-xs xs]\n   (if (empty? remain-xs) new-xs\n    (recur (conj new-xs (first remain-xs)) (rest remain-xs) ) )\n   )\n )", "user": "55aa8276e4b0988bba2ad94e"}, {"problem": 23, "code": "(partial reduce conj ())", "user": "55aa7c5ce4b0988bba2ad94d"}, {"problem": 23, "code": "(fn lastfirst [s] (if (nil? (first s)) [] (conj (lastfirst (rest s)) (first s))))", "user": "55a87f0ee4b0988bba2ad938"}, {"problem": 23, "code": "(fn [the-seq]\n  (loop [current-seq the-seq\n         reversed-seq '()]\n    (if (empty? current-seq)\n      reversed-seq\n      (recur (rest current-seq) (conj reversed-seq (first current-seq))))))", "user": "55a5c3bee4b0acc240e3154e"}, {"problem": 23, "code": "#(reduce (fn [x y] (concat [y] x)) [] %)", "user": "55aa1637e4b0988bba2ad949"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "55aacd3be4b0988bba2ad952"}, {"problem": 23, "code": "#(reduce (fn [x y] (conj x y)) '() %)", "user": "55ab8c2de4b0988bba2ad954"}, {"problem": 23, "code": "(fn myr[l] (\n  if (empty? l) [] (conj (vec (myr (rest l))) (first l))))", "user": "55aba8f4e4b03311e7b7328c"}, {"problem": 23, "code": "#(into '() %)", "user": "557f748ae4b05c286339e0df"}, {"problem": 23, "code": "reduce conj ()", "user": "55a0e139e4b0acc240e31504"}, {"problem": 23, "code": "reduce #(conj %1 %2) '()", "user": "55acab76e4b03311e7b73294"}, {"problem": 23, "code": "(fn my-reverse \n  [my-seq]\n  (let [my-seq (seq my-seq)]\n  (map #(nth my-seq (- (- (count my-seq) (.indexOf my-seq %))1)) my-seq)))", "user": "55acd080e4b03311e7b73298"}, {"problem": 23, "code": "(fn foo [arr]\n  (if (= nil (first arr))\n    (vec [])\n    (conj (foo (rest arr)) (first arr))))", "user": "55a2b008e4b0acc240e31526"}, {"problem": 23, "code": "(fn [col] (loop [c col l '()] (if (empty? c) l (recur (rest c) (conj l (first c))))))", "user": "55ad1833e4b03311e7b7329f"}, {"problem": 23, "code": "#(loop [xs % acc '()]\n   (if (first xs)\n     (recur (rest xs) (cons (first xs) acc))\n     acc))", "user": "55ab07e0e4b0988bba2ad953"}, {"problem": 23, "code": "#(into () %)", "user": "55ad4e9ce4b03311e7b732a6"}, {"problem": 23, "code": "reduce #(cons %2 %1) []", "user": "55ad59cde4b03311e7b732a7"}, {"problem": 23, "code": "(fn [working-set] \n\t(loop \t[\t;; set \u201cvariables\u201d\n\t\t\t\ts working-set \n\t\t\t\trev-seq '()\n\t\t\t]\n  \t\t(if \n\t\t\t(= (count s) 0) \n    \t\t\t;; true, then return result\n\t\t\t\trev-seq\n    \t\t\t;; false, so recur loop\n\t\t\t\t(recur  \n\t\t\t\t\t(rest s ) \n                 \t;; conjoining to a list is done at the beginning\n\t\t\t\t\t(conj rev-seq (first s))\n\t\t\t\t)\n    \t)\n\t)\n)", "user": "5595c60ee4b0c79f6e1db96f"}, {"problem": 23, "code": "#(reduce conj()%)", "user": "5593b10ce4b0c79f6e1db943"}, {"problem": 23, "code": "(fn [s]\n    (let [helper-fn (fn [in out]\n                      (if (empty? in)\n                        out\n                        (recur\n                         (rest in)\n                         (conj out (first in)))))]\n      (helper-fn s (list))))", "user": "55ac07afe4b03311e7b7328f"}, {"problem": 23, "code": "(partial reduce #(conj %1 %2) '())", "user": "55ae7adae4b03311e7b732bd"}, {"problem": 23, "code": "(fn [coll] (let [cl (vec coll) m (count cl) m1 (- m 1)] (for [i (range m)] (nth cl (- m1 i)) )))", "user": "55adf4d7e4b03311e7b732af"}, {"problem": 23, "code": "(fn [lst] (let [rev \n                (fn rec [result cur] \n                  (if (nil? cur) \n                    result \n                    (rec (cons (first cur) result)\n                         (next cur))))]\n     (rev '() lst)))", "user": "55adcc8fe4b03311e7b732ab"}, {"problem": 23, "code": "(fn myfunc [x] (if (not-empty x) (cons (last x) (myfunc (drop-last x)))))", "user": "55a9e0fee4b0988bba2ad945"}, {"problem": 23, "code": "(fn rev [s]\n  (reduce conj '() s))", "user": "55aaa36fe4b0988bba2ad94f"}, {"problem": 23, "code": "reduce #(conj %1 %2) '()", "user": "55ade883e4b03311e7b732ac"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "55af7e21e4b03311e7b732cc"}, {"problem": 23, "code": "#(into [] (into () %))", "user": "55acb648e4b03311e7b73296"}, {"problem": 23, "code": "reduce #(conj %1 %2) '()", "user": "55afba88e4b002ce9d5cbc17"}, {"problem": 23, "code": "#(vec (reduce conj () %))", "user": "55afe130e4b002ce9d5cbc1b"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "55ac16a0e4b03311e7b73291"}, {"problem": 23, "code": "#(loop [lst % acc nil]\n   (if (empty? lst)\n     acc\n     (recur (rest lst) (cons (first lst) acc))))", "user": "55afc197e4b002ce9d5cbc18"}, {"problem": 23, "code": "reduce conj '()", "user": "55b0ecb7e4b002ce9d5cbc27"}, {"problem": 23, "code": "reduce #(cons %2 %) '()", "user": "55b107fee4b002ce9d5cbc2a"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "55b0d315e4b002ce9d5cbc26"}, {"problem": 23, "code": "#(let [m (zipmap (range(count %)) %)] (map (fn [n] (get m n)) (range (dec (count %)) -1 -1)))", "user": "55b0f5bfe4b002ce9d5cbc28"}, {"problem": 23, "code": "(fn [col]\n   (loop [col col\n          result (empty col)]\n     (let [result (cons (first col) result)\n           rest (rest col)]\n       (if (empty? rest)\n         result\n         (recur rest result))))\n\n)", "user": "55ae1b68e4b03311e7b732b4"}, {"problem": 23, "code": "reduce conj '()", "user": "54236ce1e4b01498b1a71ad1"}, {"problem": 23, "code": "reduce #(conj %1 %2) '()", "user": "55a37e1fe4b0acc240e31539"}, {"problem": 23, "code": "reduce conj (list)", "user": "5537cbaee4b09218d5f44fd3"}, {"problem": 23, "code": "reduce conj ()", "user": "55ae6367e4b03311e7b732bc"}, {"problem": 23, "code": "reduce conj '()", "user": "55b118fae4b002ce9d5cbc2d"}, {"problem": 23, "code": "(fn rev [s] (let [x (vec s)] (if (= 0 (count x)) [] (conj (rev (rest x)) (first x)))))", "user": "55b2088ae4b0da326a65cf75"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "55ae383fe4b03311e7b732b7"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "55b22c33e4b0da326a65cf79"}, {"problem": 23, "code": "#(into () %)", "user": "541dee63e4b01498b1a71a85"}, {"problem": 23, "code": "reduce conj '()", "user": "55b1372de4b002ce9d5cbc2e"}, {"problem": 23, "code": "(fn [xs] (reduce conj () xs))", "user": "557c647ce4b05c286339e0c3"}, {"problem": 23, "code": "(fn [coll] \n  (loop [rev ()\n         c coll]\n    (let [x (first c)\n          r (rest c)]\n      (if x\n        (recur (cons x rev) r)\n        rev))))", "user": "54dcbc6ee4b024c67c0cf787"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "55b39523e4b01b9910ae2973"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "53cb5559e4b00fb29b2212d2"}, {"problem": 23, "code": "(fn reverseSeq [s] \n   (reduce (fn [x y] (conj x y)) '() s)\n   )", "user": "552d487ee4b076ab5578f7e4"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "55b45825e4b01b9910ae297c"}, {"problem": 23, "code": "(fn uuu\n  [l]\n  (if (= [] l) []\n    (concat (uuu (rest l)) [(first l)])\n   )\n  \n)", "user": "55b3e8aee4b01b9910ae2977"}, {"problem": 23, "code": "#(reduce (fn [xs y] (cons y xs)) [] %)", "user": "55b25970e4b0da326a65cf7e"}, {"problem": 23, "code": "#(loop [x %\n        y []]\n   (if (seq x)\n     (recur (rest x) (cons (first x) y))\n     y))", "user": "55b1c62de4b0da326a65cf72"}, {"problem": 23, "code": "(fn [list] (reduce #'conj '() list))", "user": "55b4b0f5e4b01b9910ae297d"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "55b4c339e4b01b9910ae297f"}, {"problem": 23, "code": "(fn [col]\n ((fn foo [new old size]\n    (if (> size -1) \n      (foo (conj new (last old)) (take size old) (dec size)) new)) \n  \t   [] col (- (count col) 1)))", "user": "55b24240e4b0da326a65cf7b"}, {"problem": 23, "code": "(fn [s] (reduce conj (list) s))", "user": "55b54ecbe4b01b9910ae2987"}, {"problem": 23, "code": "(fn [i] (let [r (reduce #(conj %1 %2) `() i)] (if (vector? i) (into [] r) r)))", "user": "55afa977e4b002ce9d5cbc15"}, {"problem": 23, "code": "(fn [coll]\n  (loop [src coll, result [], x (count coll)]\n    (if (zero? x)\n      result\n      (recur (drop-last src) (conj result (last src)) (dec x)))))", "user": "55b1b67ce4b0da326a65cf6f"}, {"problem": 23, "code": "(fn [v] \n    (loop [x (seq v) r '()]\n        (if (seq  x) \n            (recur (rest x) (conj r (first x)))\n            r)))", "user": "55975569e4b031d6649c9b8e"}, {"problem": 23, "code": "(fn [x] \n\t(loop [olist x nlist nil]\t\t \n\t\t(if (= 0  (count olist)) nlist (recur (rest olist) (cons (first olist) nlist)))\n\t)\n)", "user": "55b60518e4b01b9910ae298e"}, {"problem": 23, "code": "(fn f [coll] (if (< (count coll) 2) coll (cons (last coll) (f (drop-last 1 coll)))))", "user": "55b64ef1e4b01b9910ae2994"}, {"problem": 23, "code": "(fn [x] (reduce conj (list) x))", "user": "55b62d2fe4b01b9910ae298f"}, {"problem": 23, "code": "(fn lol [x] (reduce conj () x))", "user": "55b26ed7e4b0da326a65cf82"}, {"problem": 23, "code": "reduce (fn [i v] (cons v i)) []", "user": "55b77c7ce4b01b9910ae29a3"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "55b7df63e4b01b9910ae29b3"}, {"problem": 23, "code": "(fn [s]\n  \"Thanks to http://www.learningclojure.com/2010/08/reduce-not-scary.html\"\n  (reduce conj () s))", "user": "55b7ca4ae4b01b9910ae29b1"}, {"problem": 23, "code": "reduce conj '()", "user": "55b8c339e4b01b9910ae29b9"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "55b69e37e4b01b9910ae2999"}, {"problem": 23, "code": "(fn rev-seq [lat]\n  (into '() lat))", "user": "55b8e4b7e4b01b9910ae29bc"}, {"problem": 23, "code": "#(into '() %)", "user": "55a3ee58e4b0acc240e3153e"}, {"problem": 23, "code": "(fn external [xs]\n  (let [my-reverse (fn internal [xs]\n                     (if (= 0 (count xs))\n                       xs\n                       (concat (internal (rest xs)) [(first xs)])))]\n    (if (vector? xs)\n      (into [] (my-reverse xs))\n      (my-reverse xs))))", "user": "55b5782ae4b01b9910ae2989"}, {"problem": 23, "code": "(fn getNth[coll] (loop [revd []\n                         stuff coll]\n                    (if (empty? stuff)\n                      revd\n                      (recur (conj revd (last stuff)) (drop-last 1 stuff)))))", "user": "55b8d186e4b01b9910ae29ba"}, {"problem": 23, "code": "#(into () %)", "user": "55b9ce15e4b01b9910ae29c1"}, {"problem": 23, "code": "#(apply conj '() %)", "user": "559046cee4b027778923766d"}, {"problem": 23, "code": "(fn [lista] \n  (loop [l lista tulos '()] (if-not (empty? l) (recur (rest l) (cons (first l) tulos)) tulos)))", "user": "553e2da3e4b0a04f792994ea"}, {"problem": 23, "code": "(fn [x] \n    (loop [orig (seq x)\n           rev [] ]\n        ( let [ [q & e] orig\n                new_rev (cons q rev)]\n            ( if (nil? e) (identity new_rev) (recur e new_rev ) )))\n\n )", "user": "55ba6d52e4b01b9910ae29d3"}, {"problem": 23, "code": "reduce (fn [c x] (conj c x)) '()", "user": "55ba8f0be4b01b9910ae29da"}, {"problem": 23, "code": "#(reduce (fn [c r] (conj c r)) '() %1)", "user": "55b6a63ae4b01b9910ae299b"}, {"problem": 23, "code": "#(let [sq %]\n   (loop [rst sq result (empty %)]\n     (if (empty? rst)\n       result\n       (recur (rest rst) (cons (first rst) result)))))", "user": "55a0d79fe4b0acc240e31502"}, {"problem": 23, "code": "#(reduce (fn[a b](into a b)) (map (fn[a](list a)) %))", "user": "55bad3eae4b01b9910ae29df"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "55ba70f9e4b01b9910ae29d4"}, {"problem": 23, "code": "(fn rev [x] (loop [l x, rl []] (if (empty? l) rl (recur (rest l) (cons (first l) rl)))))", "user": "55bb3f89e4b01b9910ae29e2"}, {"problem": 23, "code": "(fn [x]\n  (let [data (atom (into '() x) )]\n    (for [n @data]\n      (swap! data conj n))\n    (vec @data)))", "user": "55bb6b63e4b01b9910ae29e6"}, {"problem": 23, "code": "(fn [x] (loop [source x destination '()]\n          (if (= nil (first source))\n            destination\n            (recur (rest source) (cons (first source) destination)))))", "user": "55bbb28be4b01b9910ae29ea"}, {"problem": 23, "code": "(fn [s]\n  (loop [sr s rev '()]\n    (if (empty? sr)\n      (identity rev)\n      (recur (rest sr) (conj rev (first sr))))))", "user": "55bbd179e4b01b9910ae29eb"}, {"problem": 23, "code": "reduce (fn [rev ele] (cons ele rev)) []", "user": "55bc2322e4b01b9910ae29f0"}, {"problem": 23, "code": "#(into () %)", "user": "55b1e9e7e4b0da326a65cf74"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5420b93ce4b01498b1a71aa9"}, {"problem": 23, "code": "(fn rev [s]\n  (if (empty? s)\n      []\n      (concat (rev (rest s)) [(first s)])\n    )\n  )", "user": "549dfe40e4b0f3d1d8e70f9a"}, {"problem": 23, "code": "(fn [s] (reduce conj () s))", "user": "55bccbc6e4b01b9910ae29f5"}, {"problem": 23, "code": "(fn [o & n]\n  (if (empty? o)\n    n\n    (let [e (first o)\n          n (if (nil? n) [] n)]\n      (recur (rest o) (into [e] n)))))", "user": "55be18e5e4b01b9910ae2a01"}, {"problem": 23, "code": "(fn [x] (reduce conj '() x))", "user": "55be39f9e4b01b9910ae2a06"}, {"problem": 23, "code": "#(into () %)", "user": "55962e92e4b0c79f6e1db976"}, {"problem": 23, "code": "(fn [lst]\n  (loop [[head & tail] (seq lst)\n         cur (list)]\n    (if (seq tail)\n      (recur tail (conj cur head))\n      (conj cur head))))", "user": "55be4fa6e4b01b9910ae2a08"}, {"problem": 23, "code": "(fn [items] \n  (reduce (fn [a b] (cons b a))\n          []\n          items))", "user": "55a016fde4b0acc240e314f1"}, {"problem": 23, "code": "(fn\n  [x]\n  (loop [xs x\n         result ()]\n    (if (empty? xs)\n      result\n      (recur (next xs) (conj result (first xs))))))", "user": "55b3c03ee4b01b9910ae2975"}, {"problem": 23, "code": "(fn rev-seq [lat]\n  (into '() lat))", "user": "55be33f0e4b01b9910ae2a05"}, {"problem": 23, "code": "#((fn t [l s] (if (nil? l) s (t (next l) (cons (first l) s ) ) ))  %\u3000'())", "user": "55bedd93e4b01b9910ae2a0d"}, {"problem": 23, "code": "(fn [in-seq] (reduce conj '() in-seq))", "user": "557775a3e4b05c286339e084"}, {"problem": 23, "code": "(fn [x]\n(loop [coll x rev '()]\n(if (empty? coll) rev\n    (recur (rest coll) (conj rev (first coll))))))", "user": "55bf461be4b01b9910ae2a11"}, {"problem": 23, "code": "reduce (fn [x y] (conj x y)) '()", "user": "5452a300e4b0e397800069c7"}, {"problem": 23, "code": "(fn reverse-seq [x] (if (empty? x) [] (conj (reverse-seq (rest x)) (first x)) ))", "user": "55bfc39ee4b01b9910ae2a1a"}, {"problem": 23, "code": "reduce conj ()", "user": "559454f2e4b0c79f6e1db952"}, {"problem": 23, "code": "(fn myRev [col]\n  (if \n    (= 1 (count col))\n    col\n    (let\n      [subCol (myRev (rest col))]\n     \n      (concat subCol (list (first col)))\n    )\n  )\n  \n)", "user": "55bb7546e4b01b9910ae29e7"}, {"problem": 23, "code": "(fn [lst] (for [i (range (count lst))] (nth (seq lst) (- (count lst) i 1))))", "user": "55bd2150e4b01b9910ae29fa"}, {"problem": 23, "code": "#(loop [coll %\n        res []]\n   (if (empty? coll)\n     res\n     (recur (drop-last coll) (conj res (last coll)))))", "user": "55c0afa5e4b01b9910ae2a27"}, {"problem": 23, "code": "#(reduce conj '() %1)", "user": "55b1ab40e4b0da326a65cf6e"}, {"problem": 23, "code": "reduce conj '()", "user": "55c10409e4b01b9910ae2a2c"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "55a68518e4b09e57187da29b"}, {"problem": 23, "code": "reduce conj '()", "user": "55304523e4b076ab5578f810"}, {"problem": 23, "code": "(fn [s] (reduce conj () s))", "user": "549c6792e4b0f3d1d8e70f8b"}, {"problem": 23, "code": "#(into () %)", "user": "5586f418e4b059ccff29b1de"}, {"problem": 23, "code": "#(reduce (fn [acc el] (conj acc el)) () %)", "user": "55c20bd0e4b0e31453f64972"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "55bef38fe4b01b9910ae2a0e"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "52fe31d5e4b047fd55837038"}, {"problem": 23, "code": "reduce conj '()", "user": "55c37594e4b0e31453f64989"}, {"problem": 23, "code": "(fn my-reverse [s]\n  (loop [q s\n         ss ()]\n    (if (empty? q)\n      ss\n      (recur (rest q) (conj ss (first q))))))", "user": "55c2a159e4b0e31453f6497e"}, {"problem": 23, "code": "(fn [xs]\n  (loop [acc [] ys xs]    \n    (if (empty? ys) acc \n    (recur (conj acc (last ys)) (drop-last ys)))))", "user": "54dce62fe4b024c67c0cf78c"}, {"problem": 23, "code": "(fn [collin] \n  (loop [coll collin ret []]\n    (if-not (seq coll)\n      ret\n      (let [el (last coll)]\n        (recur (butlast coll)\n               (conj ret el))))))", "user": "554b8b6be4b0a04f7929958b"}, {"problem": 23, "code": "(fn [x] (reduce (fn [y z] (cons z y)) [] x))", "user": "51fea7d7e4b0f1313d468a74"}, {"problem": 23, "code": "reduce conj '()", "user": "55c1eb52e4b0e31453f64970"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "557e56aae4b05c286339e0d5"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5586cbeae4b059ccff29b1d8"}, {"problem": 23, "code": "(fn reverse-list [a-list]\n  (if (empty? a-list) '()\n    (conj \n      (reverse-list (butlast a-list))\n      (last a-list)\n    )\n   )\n)", "user": "55c387e4e4b0e31453f6498b"}, {"problem": 23, "code": "reduce conj '()", "user": "55c3149de4b0e31453f64987"}, {"problem": 23, "code": "(fn [x & y]\n  (if-not (seq x)\n    y\n    (recur (rest x) (conj y (first x)))))", "user": "55c4352ce4b0e31453f64996"}, {"problem": 23, "code": "#(into () %)", "user": "55c49600e4b0e31453f6499f"}, {"problem": 23, "code": "reduce conj ()", "user": "55c2a323e4b0e31453f6497f"}, {"problem": 23, "code": "(fn rev [xs]\n  (if (empty? xs)\n    ()\n    (concat (rev (rest xs))\n            (list (first xs)))))", "user": "55c4e48be4b0e31453f649a7"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "55c4ae19e4b0e31453f649a1"}, {"problem": 23, "code": "(fn rev [lst]\n  ((fn [lst result]\n    (if (empty? lst)\n      result\n      (recur (rest lst) (cons (first lst) result))))\n  lst ()))", "user": "55c5153de4b0e31453f649ad"}, {"problem": 23, "code": "(fn [data]\n  (loop [data data\n         acc []]\n    (if (empty? data)\n      acc\n      (recur (butlast data) (conj acc (last data))))))", "user": "55c461d3e4b0e31453f64999"}, {"problem": 23, "code": "(fn \n [sequence-to-reverse]\n (loop\n  [new-sequence [] old-sequence sequence-to-reverse]\n  (if (= '() old-sequence)\n   new-sequence\n   (recur (conj new-sequence (last old-sequence))(drop-last old-sequence)))))", "user": "54ef7568e4b024c67c0cf885"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "55c58c0be4b0e31453f649b3"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "55c28beae4b0e31453f6497d"}, {"problem": 23, "code": "#(into () %)", "user": "55c652dde4b0e31453f649bd"}, {"problem": 23, "code": "#(reduce (fn [x y] (conj x y)) '() %)", "user": "55c5820be4b0e31453f649b0"}, {"problem": 23, "code": "(fn [l] (loop [remaining l\n               new-coll []]\n          (if-not (seq remaining)\n            new-coll\n            (recur (take (dec (count remaining)) remaining)\n                   (conj new-coll (last remaining))))))", "user": "55bfd68ae4b01b9910ae2a1e"}, {"problem": 23, "code": "(fn[x] (reduce conj '() x))", "user": "55c43ae9e4b0e31453f64997"}, {"problem": 23, "code": "(fn [lst]\n  (loop [l1 lst\n         l2 ()]\n    (if (empty? l1)\n      l2\n      (recur (rest l1) (conj l2 (first l1))))))", "user": "55c68089e4b0e31453f649c4"}, {"problem": 23, "code": "(fn [coll]\n  (let [rec\n        (fn [coll acc rec]\n          (if (empty? coll)\n            acc\n            (rec (rest coll) (conj acc (first coll)) rec)))]\n    (rec coll '() rec)))", "user": "55c66d3de4b0e31453f649c1"}, {"problem": 23, "code": "#(into () %)", "user": "55c4e30be4b0e31453f649a6"}, {"problem": 23, "code": "(fn \n  [s]\n  (reduce (fn [result in] (conj result in)) '() s))", "user": "55c734a5e4b0e31453f649cb"}, {"problem": 23, "code": "#(loop [l % r '()]\n   (if (empty? l) r\n     (recur (rest l) (conj r (first l)))))", "user": "55c583d5e4b0e31453f649b1"}, {"problem": 23, "code": "(fn [coll]\n  (let [coll (seq coll)]\n    (reduce #(conj %1 %2) () coll)))", "user": "5281fd54e4b0757a1b17144b"}, {"problem": 23, "code": "into ()", "user": "55c423e1e4b0e31453f64994"}, {"problem": 23, "code": "(fn [x] (into '() x))", "user": "55ba3666e4b01b9910ae29cc"}, {"problem": 23, "code": "reduce conj ()", "user": "55a372f1e4b0acc240e31537"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "55ba33afe4b01b9910ae29cb"}, {"problem": 23, "code": "(fn [coll] (reduce conj '() coll))", "user": "5586b707e4b059ccff29b1d6"}, {"problem": 23, "code": "reduce conj '()", "user": "559d3d22e4b0ec2b359424da"}, {"problem": 23, "code": "into '()", "user": "55c796f0e4b0e31453f649d4"}, {"problem": 23, "code": "(fn my-reverse\n  ([val coll]\n   (let [s coll]\n     (if s\n       (recur (conj val (first s))\n              (next s))\n       val)))\n  ([coll]\n    (my-reverse () coll)))", "user": "55bd87ede4b01b9910ae29fe"}, {"problem": 23, "code": "#(into () %)", "user": "54b817eee4b0ed20f4ff6e93"}, {"problem": 23, "code": "(fn my-rev\n  [rev coll]\n  (if (= (count coll) 0)\n    rev\n    (my-rev (concat rev (take-last 1 coll)) (drop-last 1 coll)))) (seq [])\n\n;reduce conj ()", "user": "55b42706e4b01b9910ae297b"}, {"problem": 23, "code": "reduce #(cons %2 %1) []", "user": "55c7c4dfe4b0e31453f649d7"}, {"problem": 23, "code": "#(into () %)", "user": "55c7c2c5e4b0e31453f649d6"}, {"problem": 23, "code": "(fn [c]\n  (loop [c    c\n         acc (empty c)]\n         (if (empty? c)\n             acc\n             (recur (rest c) (cons (first c) acc)))))", "user": "55bb6a19e4b01b9910ae29e5"}, {"problem": 23, "code": "(fn [c] \n    (loop [r (rest c) l (conj () (first c))]\n        (if (= (count r) 0)\n            l\n            (recur (rest r) (conj l (first r))))))", "user": "513f1f18e4b051389b345b3d"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "53ba34f4e4b047364c0444f2"}, {"problem": 23, "code": "#(into () %)", "user": "55c77070e4b0e31453f649d0"}, {"problem": 23, "code": "reduce conj ()", "user": "55c9bcb8e4b0e31453f649f2"}, {"problem": 23, "code": "reduce conj ()", "user": "546e1142e4b00cfc9eacc199"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "52eb786be4b0705949c44440"}, {"problem": 23, "code": "(fn [s]\n  (loop [loop-seq [] rest-seq s]\n\n    (if (= (count rest-seq) 0)\n      loop-seq\n      (recur (cons (first rest-seq) loop-seq) (rest rest-seq))\n      )\n    )\n  )", "user": "55c5261ee4b0e31453f649ae"}, {"problem": 23, "code": "(fn [l] (reduce #(cons %2 %1) [] l))", "user": "54010363e4b0de5c4184861d"}, {"problem": 23, "code": "#(let [r (reduce conj '() %)] (if (set? %) r (into (empty %) r)))", "user": "553f70cae4b0a04f792994f8"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "55ca4273e4b0e31453f649f9"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "55a65872e4b09e57187da299"}, {"problem": 23, "code": "reduce #(conj %1 %2) '()", "user": "55caabd1e4b0e31453f649fb"}, {"problem": 23, "code": "#(into () %)", "user": "5574c172e4b05c286339e059"}, {"problem": 23, "code": "reduce conj ()", "user": "5578ba3ae4b05c286339e08c"}, {"problem": 23, "code": "#(reduce conj () %1)", "user": "5563b88be4b0c656e3ff17f5"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "54b5b3cce4b05787c3b163ab"}, {"problem": 23, "code": "#(reduce (fn [m x](cons x m)) [] %)", "user": "55c9bc1ee4b0e31453f649f1"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "55cc56bee4b0e31453f64a0f"}, {"problem": 23, "code": "#(into () %)", "user": "559a9a8ee4b066d22e731f46"}, {"problem": 23, "code": "reduce conj ()", "user": "559067ace4b0277789237670"}, {"problem": 23, "code": "(fn [coll]\n  (loop [collect [] remaining coll]\n    (if (empty? remaining) \n      collect\n      (recur (cons (first remaining) collect) (rest remaining)))))", "user": "54f4ab86e4b0f2f3c5226e84"}, {"problem": 23, "code": "(fn [m] (into [] (reduce (fn [r x] (conj r x)) (list) m)))", "user": "52f23d85e4b05e3f0be25ef6"}, {"problem": 23, "code": "reduce conj '()", "user": "53dac21ae4b0e771c30254a8"}, {"problem": 23, "code": "reduce #(conj %1 %2) '()", "user": "55ccd9d1e4b0e31453f64a17"}, {"problem": 23, "code": "(fn fn1 [x]\r\n  (if (empty? (rest x))\r\n     x\r\n    (concat (fn1 (rest x)) (list (first x)))\r\n  )\r\n)", "user": "55cde227e4b0e31453f64a22"}, {"problem": 23, "code": "reduce #(cons %2 %) ()", "user": "55ccdc6be4b0e31453f64a18"}, {"problem": 23, "code": "(fn [l] \n  (reduce \n   (fn [acc v] (cons v acc)) \n   [] \n   l))", "user": "55cde24ae4b0e31453f64a23"}, {"problem": 23, "code": "into ()", "user": "55cdc576e4b0e31453f64a1f"}, {"problem": 23, "code": "(fn\n  [s]\n  (reduce conj () s))", "user": "556e3b73e4b09a3098a52514"}, {"problem": 23, "code": "reduce conj ()", "user": "55be464ce4b01b9910ae2a07"}, {"problem": 23, "code": "#(into () %)", "user": "52f2ecdde4b05e3f0be25f03"}, {"problem": 23, "code": "(fn [x] (reduce #(cons %2 %1)  '() x))", "user": "55627de1e4b0c656e3ff17d9"}, {"problem": 23, "code": "(fn ha [l]\n\t((fn inv [acc, lista]\n    \t(if (first lista)\n        \t(inv (cons (first lista) acc) (rest lista))\n          \tacc\n        )  \n    ) [] l) \n)", "user": "55cf666fe4b0e31453f64a2e"}, {"problem": 23, "code": "#(into () %)", "user": "55d045cde4b0e31453f64a38"}, {"problem": 23, "code": "(fn [values]\n  (loop [values values\n         result []]\n    (let [result (cons (first values) result)\n          remainder (rest values)]\n      (if (empty? remainder)\n        result\n        (recur remainder result)))))", "user": "55d06bcbe4b0e31453f64a3a"}, {"problem": 23, "code": "(fn reverse-sequence\n  ([orig-sq] (reverse-sequence orig-sq []))\n  ([orig-sq revd-sq]\n    (if (= 0 (count orig-sq))\n      revd-sq\n      (reverse-sequence (rest orig-sq) (cons (first orig-sq) revd-sq)))))", "user": "5512c935e4b055c2f668d4b8"}, {"problem": 23, "code": "#(loop [s %\n        out nil]\n   (if (empty? s) out\n     (recur (rest s)\n            (cons (first s) out))))", "user": "55d0e76ae4b0e31453f64a40"}, {"problem": 23, "code": "#(into () %)", "user": "55cc0d8ce4b0e31453f64a0c"}, {"problem": 23, "code": "into '()", "user": "531fcd22e4b08068f379edc8"}, {"problem": 23, "code": "reduce conj ()", "user": "55d1a721e4b0e31453f64a47"}, {"problem": 23, "code": "into ()", "user": "55d1b565e4b0e31453f64a49"}, {"problem": 23, "code": "(fn [x]\n  (loop [in x out nil]\n    (if-not (seq in)\n      out\n      (recur (rest in) \n             (conj out \n                   (first in))))))", "user": "55912230e4b027778923767a"}, {"problem": 23, "code": "(fn [x] (into () x))", "user": "55c819b4e4b0e31453f649dc"}, {"problem": 23, "code": "reduce #(conj %1 %2) '()", "user": "55236ad6e4b0882d96d091b1"}, {"problem": 23, "code": "#(into () %)", "user": "55d1f231e4b0e31453f64a4e"}, {"problem": 23, "code": "apply conj ()", "user": "5589a941e4b059ccff29b207"}, {"problem": 23, "code": "reduce conj ()", "user": "55d3811be4b0e31453f64a69"}, {"problem": 23, "code": "#(loop [result '()\n        l %]\n   (if (empty? l)\n     result\n    (let [a (first l)]\n      (println a l)\n      (recur (conj result a) (rest l)))))", "user": "5511ac85e4b06e50f9beb196"}, {"problem": 23, "code": "reduce #(cons %2 %) []", "user": "55d332f5e4b0e31453f64a5f"}, {"problem": 23, "code": "(fn [l]\n  (reduce #(cons %2 %1) [] l))", "user": "55d36d3ae4b0e31453f64a64"}, {"problem": 23, "code": "(fn [coll] (reduce conj '() coll))", "user": "55d204abe4b0e31453f64a4f"}, {"problem": 23, "code": "(fn my-reverse [coll]\n  (reduce conj () coll))", "user": "52f8db41e4b047fd55836fdc"}, {"problem": 23, "code": "#(into () %)", "user": "55d22ecce4b0e31453f64a55"}, {"problem": 23, "code": "(fn [x] ((fn [a b] (if (first a) (recur (rest a) (conj b (first a))) b)) (seq x) '()))", "user": "55d354e0e4b0e31453f64a62"}, {"problem": 23, "code": "reduce #(conj %1 %2) '()", "user": "55d3cfafe4b0e31453f64a6c"}, {"problem": 23, "code": "(fn [l]\n  (loop [lst l\n         acc nil]\n    (if (empty? lst)\n      acc\n      (recur (rest lst) (conj acc (first lst))))))", "user": "55d4dddde4b0e31453f64a7f"}, {"problem": 23, "code": "#(into () %)", "user": "55d1611ce4b0e31453f64a43"}, {"problem": 23, "code": "(fn rev [s]\n  (if (= (count s) 1)\n    [(first s)]\n  \t(conj (rev (rest s)) (first s))))", "user": "55d564ece4b0e31453f64a85"}, {"problem": 23, "code": "reduce conj nil", "user": "55d2dd27e4b0e31453f64a5b"}, {"problem": 23, "code": "(fn [coll] (reduce conj () coll))", "user": "55d44dd6e4b0e31453f64a75"}, {"problem": 23, "code": "(fn rev [col]\n  (let [f (fn [s] (reduce conj () s))]\n    (cond \n     (vector? col) (vec (f col))\n     true (f col))))", "user": "55d4b995e4b0e31453f64a7c"}, {"problem": 23, "code": "reduce conj ()", "user": "55d58192e4b0e31453f64a89"}, {"problem": 23, "code": "#(loop [truc %\n\t\t\t\t\t\t\t accum []]\n\t\t\t\t\t(if (empty? truc)\n\t\t\t\t\t\taccum\n\t\t\t\t\t\t(recur (rest truc) (concat [(first truc)] accum ))\n\t\t\t\t\t\t)\n\t\t\t\t\t)", "user": "55d34273e4b0e31453f64a60"}, {"problem": 23, "code": "apply conj ()", "user": "55d50a38e4b0e31453f64a80"}, {"problem": 23, "code": "reduce #(conj %1 %2) '()", "user": "54f11c0ce4b024c67c0cf8ab"}, {"problem": 23, "code": "reduce conj '()", "user": "55d68726e4b0e31453f64a99"}, {"problem": 23, "code": "reduce conj ()", "user": "55d5ee3fe4b0e31453f64a92"}, {"problem": 23, "code": "(fn my-reverse [xs] (if (empty? xs) [] (conj (my-reverse (rest xs)) (first xs))))", "user": "55d5e80ee4b0e31453f64a91"}, {"problem": 23, "code": "#(vals (sort-by > (zipmap (iterate inc 1) %)))", "user": "55d64526e4b0e31453f64a97"}, {"problem": 23, "code": "(fn my-rev [x]\n  (if (= (count x) 1)\n    x\n  \t(let [a (first x)\n          v-y (vec (my-rev (rest x)))]\n      (conj v-y a))))", "user": "55d7d139e4b0e31453f64aaa"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "55d6a2ebe4b0e31453f64a9a"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "55d84919e4b0e31453f64ab0"}, {"problem": 23, "code": "into ()", "user": "4e184b13535d04ed9115e7f1"}, {"problem": 23, "code": "(fn recursive-reverse\n  ([coll]\n    (recursive-reverse coll []))\n  ([coll rev]\n    (if-not (empty? coll)\n      (recursive-reverse (drop-last coll)  (conj rev (last coll)))\n      rev)))", "user": "55d85ac9e4b0e31453f64ab2"}, {"problem": 23, "code": "(fn rev\n\t([bits]\n\t\t;(println (str \"1: \" (rest bits) \" \" (vector (first bits))))\n\t\t(rev (rest bits) (vector (first bits))))\n\t([bits revd]\n\t\t;(println (str \"2: \" (first bits) \" \" (rest bits) \" \" revd))\n\t\t;nil))\n\t\t(if (= (count (rest bits)) 0)\n\t\t\t(cons (first bits) revd)\n\t\t\t(rev (rest bits) (cons (first bits) revd)))))", "user": "55d8bdcae4b0e31453f64abe"}, {"problem": 23, "code": "(fn [s] \n  (reduce \n   (fn [rs i] (conj rs i)) \n   () \n   s\n   )\n  )", "user": "55d8db41e4b0e31453f64abf"}, {"problem": 23, "code": "into ()\n;Using reverse input in a list", "user": "55d8eed3e4b0e31453f64ac3"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "55d8968ae4b0e31453f64abb"}, {"problem": 23, "code": "(fn reverse-seq\n  [coll]\n  (let [head (first coll)\n        tail (rest coll)]\n    (if (empty? coll)\n      []\n      (conj (reverse-seq tail) head))))", "user": "53e6550de4b036ad0777e471"}, {"problem": 23, "code": "(fn my-reverse ([eles] (my-reverse nil eles))\n      ([so-far eles] (if (seq eles) (my-reverse (conj so-far (first eles)) (rest eles)) so-far)))", "user": "55d95be7e4b0e31453f64ac9"}, {"problem": 23, "code": "(fn [xs] (loop [r [] xs' xs] (if-let [x (last xs')] (recur (conj r x) (butlast xs')) r)))", "user": "55d87324e4b0e31453f64ab4"}, {"problem": 23, "code": "(fn [l]\n  (loop [tl l r '()]\n    (if (empty? tl)\n      r\n      (recur (rest tl) (conj r (first tl))))))", "user": "55d74e71e4b0e31453f64aa4"}, {"problem": 23, "code": "reduce conj '()", "user": "55d29fb6e4b0e31453f64a59"}, {"problem": 23, "code": "#(into () %)", "user": "55d9d7e3e4b0e31453f64acd"}, {"problem": 23, "code": ";#(loop [col % res []]\n ;  (if-not (= (count col) 0)\n  ;   (recur (rest col) (cons (first col) res))\n   ;  res))\n   \n   reduce conj ()", "user": "55614155e4b0c656e3ff17c4"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "553c136ae4b09218d5f45012"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "55d80befe4b0e31453f64aae"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "55dab5c8e4b0e31453f64ada"}, {"problem": 23, "code": "(fn [s] (reduce #(cons %2 %1) (empty s) s))", "user": "5461dc79e4b01be26fd746a8"}, {"problem": 23, "code": "reduce (fn [a b] (cons b a)) []", "user": "55daf842e4b0e31453f64ade"}, {"problem": 23, "code": "reduce #(concat [%2] %) []", "user": "4f435ee8e4b0d7d3c9f3fd1f"}, {"problem": 23, "code": "(fn my-reverse [colls]\n  (if (empty? colls)\n    colls\n    (cons (last colls) (my-reverse (take (dec (count colls)) colls)))))", "user": "54722c55e4b094393f72dd74"}, {"problem": 23, "code": "#(reduce \n (fn [xs x] \n   (conj xs x))\n  '() %)", "user": "55d8740ee4b0e31453f64ab5"}, {"problem": 23, "code": "(fn [list] (reduce (fn [xs x] (cons x xs)) [] list))", "user": "55d79b87e4b0e31453f64aa8"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "55db7e15e4b0e31453f64ae8"}, {"problem": 23, "code": "(fn [x] (reduce conj () x))", "user": "55ce2b6de4b0e31453f64a26"}, {"problem": 23, "code": "#(into () %)", "user": "55c4cd8de4b0e31453f649a4"}, {"problem": 23, "code": "(fn myrev ([x] (myrev x [])) ([x,y] (if (empty? x) y (myrev (rest x) (cons (first x) y)))))", "user": "55d35a01e4b0e31453f64a63"}, {"problem": 23, "code": "#(into () %)", "user": "55dcb06ee4b050e68259b3b9"}, {"problem": 23, "code": "(fn contrario [list]\n   (loop [original list revertida ()]\n      (if (empty? original)\n        revertida\n        (recur (rest original) (conj revertida (first original))))))", "user": "55db5291e4b0e31453f64ae6"}, {"problem": 23, "code": "(fn [list] \n  (loop [list list\n         acc '()]\n    (if (empty? list)\n      acc\n      (recur (rest list) (conj acc (first list))))))", "user": "55dab408e4b0e31453f64ad9"}, {"problem": 23, "code": "(fn [xs] \n  (loop [xs xs out []]\n    (if (empty? xs)\n      out\n      (recur \n       (butlast xs)\n       (conj out (last xs))))))", "user": "552d9b31e4b076ab5578f7eb"}, {"problem": 23, "code": "(fn [a-seq]\n  (loop [s a-seq r '()]\n    (if (zero? (count s))\n      r\n      (recur (rest s) (conj r (first s))))))", "user": "55dd7ad1e4b050e68259b3c2"}, {"problem": 23, "code": "reduce conj '()", "user": "553e2cc0e4b0a04f792994e9"}, {"problem": 23, "code": "#(into () (sort %))", "user": "55db1665e4b0e31453f64ae0"}, {"problem": 23, "code": "(fn [initial-list] \n  (reduce \n   (fn [reversed-list el] (conj reversed-list el)) '()  initial-list))", "user": "55ddb3f4e4b050e68259b3cd"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "55cc6c35e4b0e31453f64a10"}, {"problem": 23, "code": "(fn rev [seq]\n  \t(if (empty? seq) seq\n\t(cons (last seq) (rev (butlast seq)) )\n   \t)\n  )", "user": "55ddc5cbe4b050e68259b3d0"}, {"problem": 23, "code": "(fn [xs] ((fn [xs acc] (if (empty? xs) acc (recur (rest xs) (cons (first xs) acc)))) xs []))", "user": "55dc2ad1e4b050e68259b3ac"}, {"problem": 23, "code": "#(into '() %)", "user": "55ded9fde4b050e68259b3e7"}, {"problem": 23, "code": "(fn [list] \n  (reduce #(cons %2 %1)\n   []\n   list))", "user": "55c6fd60e4b0e31453f649c9"}, {"problem": 23, "code": "(fn [coll]\n  (reduce conj (list) coll))", "user": "54145050e4b01498b1a719ea"}, {"problem": 23, "code": "#(loop [coll % acc []]\n   (let [x (first coll)]\n     (if x \n       (recur (rest coll) (cons x acc))\n       acc)))", "user": "55dd8c25e4b050e68259b3c7"}, {"problem": 23, "code": "(fn [s] (loop [r [] i s] (if-not (empty? i) (recur (conj r (last i)) (drop-last 1 i) )r)))", "user": "55d3b030e4b0e31453f64a6b"}, {"problem": 23, "code": "(fn mR [x]\n  (if (empty? x)\n    []\n    (conj (mR (rest x)) (first x))))", "user": "55d73b14e4b0e31453f64aa0"}, {"problem": 23, "code": "#(reduce (fn [s elem] (cons elem s)) nil %)", "user": "55df1985e4b050e68259b3eb"}, {"problem": 23, "code": "(fn rev [coll]\n  (if (empty? coll)\n       '()\n     (cons (last coll) (rev (take (- (count coll) 1) coll)))))", "user": "53e9dce1e4b036ad0777e4bc"}, {"problem": 23, "code": "(fn [lst] \n  (loop [s lst rst '()]\n    (cond (empty? s)\n          rst\n          :else (recur (rest s) (conj rst (first s))))))", "user": "55df3b11e4b050e68259b3ef"}, {"problem": 23, "code": "(fn \n  rev\n  [x]\n  (reduce conj () x))", "user": "55e0038ee4b050e68259b404"}, {"problem": 23, "code": "#(into () %)", "user": "55e00655e4b050e68259b405"}, {"problem": 23, "code": "(fn ff [l] (let [ll (seq l)] (if-not ll [] (conj (ff (rest ll)) (first ll))) ))", "user": "55deeface4b050e68259b3ea"}, {"problem": 23, "code": "(fn [s]\n\t(into '() s))", "user": "55e06f82e4b050e68259b40d"}, {"problem": 23, "code": "(fn[coll]\n (loop [coll coll revers3 '()]\n   (if (empty? coll)\n     revers3\n     (recur \n      (rest coll)\n      (cons (first coll) revers3)))))", "user": "4f086d45535dcb61093f6c39"}, {"problem": 23, "code": "#(reduce conj() %)", "user": "55e0d0eae4b050e68259b413"}, {"problem": 23, "code": "#(into () %)", "user": "55dc30d4e4b050e68259b3ad"}, {"problem": 23, "code": "#(reduce (fn [l x] (conj l x))  () %)", "user": "55d42f78e4b0e31453f64a73"}, {"problem": 23, "code": "(partial reduce #(cons %2 %1) [])", "user": "52f16601e4b05e3f0be25eec"}, {"problem": 23, "code": "reduce conj nil", "user": "55e1d34ae4b050e68259b421"}, {"problem": 23, "code": "#(into () %)", "user": "55e06858e4b050e68259b40c"}, {"problem": 23, "code": "(fn reverser [s] (let [s' (seq s)] (if (nil? s') []\n              (cons (last s') (reverser (drop-last s')))\n              )))", "user": "5530baa5e4b076ab5578f81a"}, {"problem": 23, "code": "(fn reverse-a-sequence\n  [param]\n  (into (list (first param)) (rest param)))", "user": "55dfac5fe4b050e68259b3f9"}, {"problem": 23, "code": "(fn [l]\n  (reduce (fn [x acc] (cons acc x)) [] l))", "user": "55e246c2e4b050e68259b431"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "55e26417e4b050e68259b433"}, {"problem": 23, "code": "reduce conj '()", "user": "55e31aa8e4b050e68259b43f"}, {"problem": 23, "code": "(fn r [coll]\n  (if (= 1 (count coll))\n    coll\n    (cons (last coll) (r (take (dec (count coll)) coll)))))", "user": "55e2f502e4b050e68259b43c"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "55e3479be4b050e68259b441"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "55e2b1cfe4b050e68259b438"}, {"problem": 23, "code": "#(reduce conj '() %  )", "user": "55dd0aebe4b050e68259b3bf"}, {"problem": 23, "code": "into ()", "user": "55e0326ce4b050e68259b407"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "55e3924ae4b050e68259b445"}, {"problem": 23, "code": "(fn [x] (reduce conj () x))", "user": "55dfada4e4b050e68259b3fd"}, {"problem": 23, "code": "into '()", "user": "55e1e4b8e4b050e68259b423"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "55e3a685e4b050e68259b446"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "540b851fe4b0addc1aec66f9"}, {"problem": 23, "code": "(fn [xs]\n  (loop [oxs xs axs []]\n     (let [x (last oxs)]\n       (if x\n         (recur (butlast oxs) (conj axs x))\n         axs))))", "user": "55db2a13e4b0e31453f64ae2"}, {"problem": 23, "code": "(fn [x]\n   (loop [in x result []]\n     (if (empty? in)\n       result\n       (recur (rest in) (cons (first in) result)))\n    )\n  )", "user": "55d44af5e4b0e31453f64a74"}, {"problem": 23, "code": "reduce conj ()", "user": "4dd5fdb0535d2dad7130b5c5"}, {"problem": 23, "code": "reduce conj '()", "user": "55e2004de4b050e68259b426"}, {"problem": 23, "code": "(fn [lst] (reduce conj '() lst))", "user": "55d1f0bae4b0e31453f64a4d"}, {"problem": 23, "code": "reduce (fn [a c] (conj a c)) '()", "user": "55e20059e4b050e68259b427"}, {"problem": 23, "code": "apply conj '()", "user": "55dfac9de4b050e68259b3fa"}, {"problem": 23, "code": "(fn reverse2 [arr]\n  (if (empty? arr)\n    []\n    (conj (reverse2 (rest arr)) (first arr))\n   )\n  )", "user": "55e46caae4b050e68259b451"}, {"problem": 23, "code": "#(into () %)", "user": "55e1029ae4b050e68259b418"}, {"problem": 23, "code": "#(loop [s % \n         r '()]\n    (if (empty? s) \n      r\n      (recur (rest s) (conj r (first s) ))))", "user": "554ad20fe4b0a04f7929957a"}, {"problem": 23, "code": "reduce conj ()", "user": "55dfacabe4b050e68259b3fb"}, {"problem": 23, "code": "(fn reversingStuff [v] (if (= (count v) 0)\n                         []\n                         (concat (reversingStuff (rest v)) [(first v)])))", "user": "55e0decbe4b050e68259b414"}, {"problem": 23, "code": "apply conj ()", "user": "55e5090be4b050e68259b45b"}, {"problem": 23, "code": "reduce conj '()", "user": "55e1fc42e4b050e68259b424"}, {"problem": 23, "code": "(fn [x] (reduce conj () x))", "user": "55dfacb7e4b050e68259b3fc"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "55e3ae2fe4b050e68259b447"}, {"problem": 23, "code": "(fn [col] (reduce #(cons %2 %1) '() col))", "user": "55e4c544e4b050e68259b457"}, {"problem": 23, "code": "#(vec (reduce conj () %))", "user": "55e558e3e4b050e68259b46b"}, {"problem": 23, "code": "reduce (fn [x y]\n          (conj x y))\n        '()", "user": "55e55449e4b050e68259b468"}, {"problem": 23, "code": "(fn [x] (into () x))", "user": "53c837f7e4b00fb29b2212ae"}, {"problem": 23, "code": "(fn [coll] (reduce #(conj %1 %2) '() coll))", "user": "54c94376e4b045293a27f665"}, {"problem": 23, "code": "#(loop [s % n []] (if (empty? s) n (recur (butlast s)(conj n (last s)))))", "user": "5505d137e4b086ebe8a79c8c"}, {"problem": 23, "code": "(fn [l] (reduce conj () l))", "user": "55e1ddf7e4b050e68259b422"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5229f187e4b0590a43906ce9"}, {"problem": 23, "code": "#(into () %)", "user": "55df727be4b050e68259b3f3"}, {"problem": 23, "code": "#(loop[x % y (seq nil)]\n    (if (empty? x)\n      y\n      (recur (rest x) (cons (first x) y))))", "user": "55e4d820e4b050e68259b458"}, {"problem": 23, "code": "(fn [xs] \n  ((fn f [ys reversed-ys] \n     (if (empty? ys)\n       reversed-ys\n       (f (rest ys) (cons (first ys) reversed-ys)))\n     ) xs []))", "user": "55e60a45e4b050e68259b481"}, {"problem": 23, "code": "#(into () %)", "user": "55e632cbe4b050e68259b484"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "542c56aae4b0dad94371f2a4"}, {"problem": 23, "code": "into ()", "user": "55e6c3f5e4b050e68259b48c"}, {"problem": 23, "code": "#(into () %)", "user": "55663e9be4b0c656e3ff182b"}, {"problem": 23, "code": "(fn [xs]\n  (loop [acc '() sq xs]\n    (if-not (first sq)\n      acc\n      (recur (conj acc (first sq)) (rest sq)))))", "user": "55e70e8de4b050e68259b490"}, {"problem": 23, "code": "(fn [x]\n  (loop [forward x\n         result []]\n    (if (empty? forward)\n      result\n      (recur (rest forward) (cons (first forward) result)))))", "user": "55c4cda5e4b0e31453f649a5"}, {"problem": 23, "code": "(fn reversse [l]\n  (if (= '() l)\n    l\n    (concat (reversse (rest l))\n          (list (first l)))))", "user": "55e4487ce4b050e68259b44c"}, {"problem": 23, "code": "#(into () %)", "user": "55e5eb81e4b050e68259b47b"}, {"problem": 23, "code": "reduce conj ()", "user": "55aacbeee4b0988bba2ad951"}, {"problem": 23, "code": "(fn rev ([u s] (if (not (= (count u) 0)) (rev (rest u) (cons (first u) s)) s)) ( [u] (rev (rest u) (list (first u)))))", "user": "550772cee4b021ccfedb96a8"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "55dff80de4b050e68259b402"}, {"problem": 23, "code": ";; reduce conj ()\n\n(fn [x]\n  (loop [list x\n         result ()]\n    (if (empty? list)\n      result\n      (recur (rest list) (conj result (first list))))))", "user": "55e7d06ee4b050e68259b496"}, {"problem": 23, "code": "(fn [coll]\n  (reduce conj '() coll))", "user": "55cb11e9e4b0e31453f649ff"}, {"problem": 23, "code": "(fn my-sort ([l] (my-sort l [])) ([l r] (if (= l []) r (recur (rest l) (cons (first l) r)))))", "user": "55e87696e4b0121d4835fd93"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "55e88644e4b0121d4835fd95"}, {"problem": 23, "code": "(fn [coll]\n  (reduce conj '() coll))", "user": "554bd33ce4b0a04f7929959a"}, {"problem": 23, "code": "(fn [a] (loop [x a acc []] (if (nil? x) acc (recur (butlast x) (conj acc (last x))))))", "user": "4f47daade4b0d56e7bb92bc4"}, {"problem": 23, "code": "reduce conj ()", "user": "55e856bae4b0121d4835fd8d"}, {"problem": 23, "code": "into ()", "user": "55e8a85be4b0121d4835fd98"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "55ea0784e4b0121d4835fda8"}, {"problem": 23, "code": "reduce conj nil", "user": "55ea0780e4b0121d4835fda7"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "55ea0dc3e4b0121d4835fda9"}, {"problem": 23, "code": "reduce (fn [r o] (conj r o)) '()", "user": "51b0eca4e4b0c53cf2e68a6f"}, {"problem": 23, "code": "#(reduce (fn [rlist item] (conj rlist item)) '() %)", "user": "55eaca20e4b0121d4835fdb4"}, {"problem": 23, "code": "(fn [c]\n   (map\n    #(nth (seq c) %)\n     (range (- (count c) 1) -1 -1)))", "user": "55264584e4b0ffed3738f918"}, {"problem": 23, "code": "(fn my_reverse [ls]\n  (if (empty? ls)\n    ls\n    (concat (my_reverse (rest ls)) [(first ls)])))", "user": "55df5feae4b050e68259b3f1"}, {"problem": 23, "code": "(fn rev [xs]\n  (if (empty? xs)\n    []\n    (conj (rev (rest xs)) (first xs))))", "user": "55eb1410e4b0121d4835fdb8"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "55d53255e4b0e31453f64a81"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "55e57491e4b050e68259b46d"}, {"problem": 23, "code": "apply conj ()", "user": "55dbed2fe4b050e68259b3a6"}, {"problem": 23, "code": "reduce conj ()", "user": "55ead489e4b0121d4835fdb6"}, {"problem": 23, "code": "into ()", "user": "55ec04c4e4b0121d4835fdc1"}, {"problem": 23, "code": "#(into () %)", "user": "55ec1c4ce4b0121d4835fdc4"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "55d9743ae4b0e31453f64aca"}, {"problem": 23, "code": "(fn my-rev [x]\n  (loop [val nil remaining x i (count x)]\n    (if (= i 0)\n      val\n      (recur\n              (concat val (list (last remaining))) \n              (butlast remaining) \n              (dec i)))))", "user": "5515ab42e4b055c2f668d4ec"}, {"problem": 23, "code": "(fn [xs] (reduce #(cons %2 %1) [] xs))", "user": "55ecb2c0e4b0121d4835fdce"}, {"problem": 23, "code": "#(into () %)", "user": "55eca2b7e4b0121d4835fdca"}, {"problem": 23, "code": "#(into () %)", "user": "55ec1048e4b0121d4835fdc3"}, {"problem": 23, "code": "(fn myreverse\n  [list]\n  (loop [rest-list (rest list)\n         reversed-list (conj () (first list))]\n    (if (empty? rest-list)\n      reversed-list\n      (recur (rest rest-list) (conj reversed-list (first rest-list))))))", "user": "55e9494ae4b0121d4835fd9e"}, {"problem": 23, "code": "(fn [lst]\n  (reduce conj () lst))", "user": "55ed1dc5e4b0121d4835fdd4"}, {"problem": 23, "code": "reduce\n  (fn [reversed source] (conj reversed source) ) (list)", "user": "55b544e2e4b01b9910ae2986"}, {"problem": 23, "code": "(fn nn [l] (reduce conj () l))", "user": "55ec8b25e4b0121d4835fdc9"}, {"problem": 23, "code": "(fn [x] (reduce conj '() x))", "user": "55ede35ce4b0121d4835fde1"}, {"problem": 23, "code": "#(into () %)", "user": "55edef1be4b0121d4835fde2"}, {"problem": 23, "code": "reduce #(cons %2 %1) []", "user": "55ed962ae4b0121d4835fddd"}, {"problem": 23, "code": "reduce conj '()", "user": "55ed71dae4b0121d4835fdd9"}, {"problem": 23, "code": "reduce conj ()", "user": "55e55810e4b050e68259b46a"}, {"problem": 23, "code": "(fn [s] \n         (let [s2 (reduce #(conj % %2 ) () s )]\n           (if (vector? s) (vec s2) s2 )\n           )\n         )", "user": "55edc088e4b0121d4835fde0"}, {"problem": 23, "code": "reduce conj '()", "user": "55ed37ebe4b0121d4835fdd6"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "55ef9c9de4b066087aa94537"}, {"problem": 23, "code": "(fn rev-seq [s] (if (empty? (rest s)) [(first s)] (concat (rev-seq (rest s)) [(first s)])))", "user": "55efbb2ae4b066087aa9453c"}, {"problem": 23, "code": "reduce conj ()", "user": "55ecac8ee4b0121d4835fdcc"}, {"problem": 23, "code": "(fn [s] (reduce #(conj %1 %2) nil s))", "user": "55efdc88e4b066087aa94541"}, {"problem": 23, "code": "(fn [x] (reduce (fn [acc y] (cons y acc)) '() x))", "user": "55f01c74e4b06e875b46ce1c"}, {"problem": 23, "code": "(partial reduce #(conj %1 %2) '())", "user": "55f014ebe4b06e875b46ce1b"}, {"problem": 23, "code": "(fn [items] (reduce conj '() items))", "user": "55eff16ce4b06e875b46ce16"}, {"problem": 23, "code": "#(loop [cc %\n        acc '()]\n   (if (empty? cc)\n     acc\n     (recur (rest cc) (conj acc (first cc)))))", "user": "55ec4d30e4b0121d4835fdc6"}, {"problem": 23, "code": "(fn rev [s] (if (= (count s) 0) [] (conj (rev (rest s)) (first s))))", "user": "55c60e03e4b0e31453f649ba"}, {"problem": 23, "code": "#(reduce conj '() % )", "user": "55f04526e4b06e875b46ce20"}, {"problem": 23, "code": "(fn rReverse\n   [x]\n    (if (< (count x) 2) x (concat [(last x)] (rReverse(drop-last x)))))", "user": "55e7e598e4b050e68259b498"}, {"problem": 23, "code": "(fn [xs] (reduce #(cons %2 %1) '() xs))", "user": "55f081bbe4b06e875b46ce25"}, {"problem": 23, "code": "#(let [collection %]\n   (reduce conj () collection))", "user": "5592a3aee4b0604b3f94d58f"}, {"problem": 23, "code": "reduce #(cons %2 %1) ()", "user": "5390347de4b0b51d73faae96"}, {"problem": 23, "code": "(fn rev [s] (if (= s nil) nil (cons (last s) (rev (butlast s)))))", "user": "55727fb5e4b09a3098a52545"}, {"problem": 23, "code": "#(into () %)", "user": "55ee62dde4b0121d4835fdeb"}, {"problem": 23, "code": "(fn reversal [listing]\n  (loop [result []\n         cnt (count listing)\n         iteration listing]\n    (if (> cnt 0)\n      (recur (concat result [(last iteration)]) (dec cnt) (butlast iteration))\n      result)))", "user": "54f36b36e4b050824f58f5c2"}, {"problem": 23, "code": "#(loop [coll %\n        revcoll []]\n   (if (empty? coll)\n     revcoll\n     (recur (rest coll) (cons (first coll) revcoll)))\n   )", "user": "55eeeb81e4b0121d4835fdf7"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "55ead0c8e4b0121d4835fdb5"}, {"problem": 23, "code": "(fn [alox] (loop [list alox acc '()]\n                (if (empty? list)\n                  acc\n                  (recur (rest list)(conj acc (first list))))))", "user": "55f1085ee4b06e875b46ce2d"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "55a127f4e4b0acc240e3150c"}, {"problem": 23, "code": "into ()", "user": "4fa436dce4b081705acca19b"}, {"problem": 23, "code": "reduce conj '()", "user": "55f06183e4b06e875b46ce23"}, {"problem": 23, "code": "reduce (fn [r c] (conj r c)) '()", "user": "55f27bf9e4b06e875b46ce45"}, {"problem": 23, "code": "(fn [coll]\n  (loop [remaining coll\n        acc []]\n  (if (empty? remaining)\n    acc\n    (recur (butlast remaining) (conj acc (last remaining))))))", "user": "55f03fb5e4b06e875b46ce1f"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "55809cb9e4b05c286339e0ef"}, {"problem": 23, "code": "(fn rev\n  ([x] (rev x '()))\n  ([x r] (if (first x)\n           (recur (rest x) (cons (first x) r))\n           r)))", "user": "55f2d4ede4b06e875b46ce4c"}, {"problem": 23, "code": "#(loop [r `() coll %] (if (empty? coll) r (recur (conj r (first coll) ) (rest coll))))", "user": "55eeb37ae4b0121d4835fdf3"}, {"problem": 23, "code": "(fn [x]\n  (reduce #(cons %2 %1) [] x))", "user": "54d05a9de4b0e8a36923e5c7"}, {"problem": 23, "code": "#(reduce conj (seq []) %)", "user": "55f1d5dfe4b06e875b46ce38"}, {"problem": 23, "code": "reduce conj ()", "user": "55e5c852e4b050e68259b474"}, {"problem": 23, "code": "#(into () %)", "user": "55f1a939e4b06e875b46ce33"}, {"problem": 23, "code": "(fn [sq] (reduce conj '() sq))", "user": "55e01f4ee4b050e68259b406"}, {"problem": 23, "code": "#(loop [input %\n        output '()]\n   (if (empty? input)\n     \toutput\n     \t(recur (rest input) (conj output (first input)))))", "user": "55f344afe4b06e875b46ce5a"}, {"problem": 23, "code": "(fn get-rsort [& args]\n  (let [lst (nth args 0)\n        rev-lst (nth args 1 '())]\n    (if (nil? (first lst))\n      rev-lst\n      (get-rsort \n       (rest lst) (conj rev-lst \n                        (first lst))))))", "user": "55f05015e4b06e875b46ce22"}, {"problem": 23, "code": "(fn reverse-a-sequence [xs]\n  (reduce conj '() xs))", "user": "518b8561e4b0f028e99addef"}, {"problem": 23, "code": "into '()", "user": "55f2fdc3e4b06e875b46ce51"}, {"problem": 23, "code": "#(reduce conj '() %1)", "user": "55ec4558e4b0121d4835fdc5"}, {"problem": 23, "code": "reduce conj '()", "user": "55f3802be4b06e875b46ce5f"}, {"problem": 23, "code": "#(into '() %)", "user": "55f20e4be4b06e875b46ce40"}, {"problem": 23, "code": "(fn [s] (reduce #(cons %2 %1) [] s))", "user": "558ffca1e4b0277789237668"}, {"problem": 23, "code": "#(let [vecSeq (vec %1)\n        len (count vecSeq)\n        r (range len)]\n    (for [x r] (get vecSeq (- len (+ x 1))))\n)", "user": "55efc44ee4b066087aa9453e"}, {"problem": 23, "code": "(fn [xs]\n  (loop [col (), xs xs]\n    (if (empty? xs)\n      col\n      (recur (conj col (first xs)) (rest xs)))))", "user": "55e7fc2ce4b0121d4835fd86"}, {"problem": 23, "code": "reduce #(cons %2 %) []", "user": "55f5625de4b06e875b46ce86"}, {"problem": 23, "code": "(fn rev [x] ( when-not (empty? x) ( cons (peek (vec x)) (rev (pop (vec x))) ) ))", "user": "55f1f45be4b06e875b46ce3d"}, {"problem": 23, "code": "reduce conj ()", "user": "55f47f54e4b06e875b46ce78"}, {"problem": 23, "code": "into '()", "user": "55f5b657e4b06e875b46ce8c"}, {"problem": 23, "code": "(fn rev [coll] \n  (if (= coll '())\n    []\n    (conj \n     (rev (rest coll)) \n     (first coll))))", "user": "55f5c118e4b06e875b46ce8e"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "55f4ef68e4b06e875b46ce82"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "55d8ec0be4b0e31453f64ac2"}, {"problem": 23, "code": "(fn [coll]\n  (loop [reversed []\n         remaining (into [] coll)]\n    (if (empty? remaining)\n      reversed\n      (recur (conj reversed (peek remaining)) (pop remaining))\n    )\n  )\n)", "user": "55ef51f1e4b066087aa94534"}, {"problem": 23, "code": "reduce conj ()", "user": "55f43228e4b06e875b46ce67"}, {"problem": 23, "code": "reduce (fn [col e] (conj col e)) '()", "user": "55e59b67e4b050e68259b46f"}, {"problem": 23, "code": "(fn ! [acc l]\n  (if \n    (empty? l) \n    acc \n    (! (conj acc (last l)) (butlast l)))) []", "user": "55f6c0e2e4b06e875b46ce99"}, {"problem": 23, "code": "(fn reverse-custom [collection]\n  (when collection\n    (cons (last collection) (reverse-custom (butlast collection)))))", "user": "55f330dde4b06e875b46ce56"}, {"problem": 23, "code": "(fn [xx] (reduce #(concat [%2] %1) [] xx))", "user": "55f01316e4b06e875b46ce1a"}, {"problem": 23, "code": "(fn [s]\n  (loop [r (rest s)\n         acc (conj () (first s))]\n    (if (empty? r)\n      acc\n      (recur (rest r) (conj acc (first r))))))", "user": "4ebbff41535dfed6da9c6d78"}, {"problem": 23, "code": "(fn [col]\n  (reduce\n \t(fn [acc itm] \n  \t (cons itm acc)) [] col))", "user": "55f32f6fe4b06e875b46ce53"}, {"problem": 23, "code": "(fn [x] (loop [result () lst x]\n          (if (empty? lst)\n            result\n            (recur (cons (first lst) result) (rest lst)))))", "user": "55f09e7be4b06e875b46ce28"}, {"problem": 23, "code": "(fn [v] (reduce conj [] (reduce conj () v)))", "user": "55f7bd07e4b06e875b46ceaf"}, {"problem": 23, "code": "#(reduce (fn [memo e] (concat [e] memo)) [] %)", "user": "55f7c873e4b06e875b46ceb0"}, {"problem": 23, "code": "#(loop [[head & rest] (seq %) res ()] (if (nil? rest) (conj res head) (recur rest (conj res head))))", "user": "55f7dc24e4b06e875b46ceb3"}, {"problem": 23, "code": "(fn [xs]\n  (reduce (fn [rx x]\n            (cons x rx)) [] xs))", "user": "55f7ca86e4b06e875b46ceb1"}, {"problem": 23, "code": "#(into () %)", "user": "55f7e056e4b06e875b46ceb4"}, {"problem": 23, "code": "(fn my-reverse [xs]\n  (if (empty? xs)\n    []\n    (conj (my-reverse (rest xs)) (first xs))))", "user": "55f7ebeae4b06e875b46ceb7"}, {"problem": 23, "code": "(fn [coll]\n  (loop [c coll result nil]\n    (if (empty? c) result\n      (recur (rest c) (cons (first c) result)))))", "user": "55f6e7ece4b06e875b46ce9e"}, {"problem": 23, "code": "(fn rv2 [coll]\n            (loop [l coll, rev (empty coll)]\n              (if (nil? l)\n                rev\n                (cond\n                  (vector? coll)\n                  \t(recur (next l),  (concat (vector (first l)) rev))\n                  (set? coll)\n                  \t(recur (next l),  (concat (vector (first l)) (into [] rev)))\n                  :else\n                  \t(recur (next l), (conj rev (first l)))\n                  ))\n              )\n            )", "user": "558ee1c9e4b0277789237659"}, {"problem": 23, "code": "(fn rs [in & { :keys [out] :or {out ()}} ] (if (empty? in)\n                  out\n                  (rs (rest in) :out (concat (list (first in)) out))))", "user": "55f6fafbe4b06e875b46cea1"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5541fa50e4b0a04f79299515"}, {"problem": 23, "code": "(fn [coll] (reduce conj () (seq coll)))", "user": "55d28b38e4b0e31453f64a58"}, {"problem": 23, "code": "#(into () %)", "user": "55810c73e4b05c286339e0f2"}, {"problem": 23, "code": "(fn rev [s]\n  (loop [b s e (list)]\n    (if (seq b)\n      (recur (rest b) (conj e (first b)))\n      e\n      \n      \n      )\n    \n    )\n  \n  )", "user": "55f8fd70e4b03cbcff9738bc"}, {"problem": 23, "code": "#(loop [lst %\n        acc '()]\n\t(if (empty? lst)\n      acc\n      (recur (rest lst) (conj acc (first lst)))))", "user": "55f8f82be4b03cbcff9738bb"}, {"problem": 23, "code": "(fn [xs]\n  (loop [xs xs acc '()]\n    (if (seq xs)\n      (recur (rest xs) (conj acc (first xs)))\n      acc)))", "user": "55f90d76e4b03cbcff9738bd"}, {"problem": 23, "code": "(fn myreverse [s] (reduce #(conj %1 %2) '() s))", "user": "55f80372e4b06e875b46ceb9"}, {"problem": 23, "code": "(fn [col]\n  (reduce (fn [acc val] (cons val acc)) [] col))", "user": "55f6f1d3e4b06e875b46cea0"}, {"problem": 23, "code": "(fn [s]\n  (into '() s))", "user": "55f1b704e4b06e875b46ce34"}, {"problem": 23, "code": "#(reduce conj nil %)", "user": "55f8ad54e4b03cbcff9738b9"}, {"problem": 23, "code": "(fn my-reverse [seq]\n  (if (empty? seq)\n    '()\n    (cons (last seq) (my-reverse (drop-last seq)))))", "user": "55e3e7a8e4b050e68259b44a"}, {"problem": 23, "code": "(fn rev [xs]\n  (if (empty? xs)\n    []\n    (conj (rev (rest xs)) (first xs))))", "user": "55f9acade4b03cbcff9738c7"}, {"problem": 23, "code": "(fn\n  [list]\n  (loop\n    [workList list\n     resultList '()]\n    (if (empty? workList)\n      resultList\n      (recur (rest workList) (conj resultList (first workList)))\n    )\n  )\n )", "user": "55f9b634e4b03cbcff9738c9"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "55f9c245e4b03cbcff9738ca"}, {"problem": 23, "code": "#(into '() %)", "user": "55f9c5fbe4b03cbcff9738cb"}, {"problem": 23, "code": "#( loop [collection % result []]\n   (\n    if (empty? collection) result\n    (\n     recur (drop-last collection) (conj result (last collection))\n    )\n   )\n )", "user": "55f7a03de4b06e875b46ceae"}, {"problem": 23, "code": "reduce conj '()", "user": "55dac0dfe4b0e31453f64adb"}, {"problem": 23, "code": "#(loop [l %\n         x []]\n    (if (empty? l)\n      x\n      (recur (drop-last l) (conj x (last l)))))", "user": "558053b1e4b05c286339e0e9"}, {"problem": 23, "code": "(fn [lst]\n  (loop [in lst\n         out ()]\n    (if (empty? in)\n      out\n      (recur (rest in) (cons (first in) out)))))", "user": "55fb1c77e4b0f488688e065c"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "55f7856be4b06e875b46cead"}, {"problem": 23, "code": "#(loop [x 0 a ()] (if (= x (count (vec %)))\n                  \t  a\n                      (recur (inc x) (conj a (nth (vec %) x))                                     \n                      )\n                  )\n )", "user": "55f68360e4b06e875b46ce93"}, {"problem": 23, "code": "(fn _reverse [s] (\n  if (= '() (rest (rest s))) \n    (conj (list (first s)) (first (rest s)))\n    (concat (_reverse (rest s)) (list (first s)))\n))", "user": "55fb58b2e4b0f488688e0661"}, {"problem": 23, "code": "#(loop [r []\n        c %]\n    (if (empty? c)\n      r\n      (recur (conj r (last c)) (take (- (count c) 1) c))))", "user": "55fa3454e4b03cbcff9738ce"}, {"problem": 23, "code": "#(into () %)", "user": "55fbb2e2e4b0f488688e0665"}, {"problem": 23, "code": "(fn [c]\n  (loop [acc (empty c) d c]\n    (if (empty? d) \n      acc\n      (recur (cons (first d) acc) (rest d)))))", "user": "55fbf6cae4b0f488688e066c"}, {"problem": 23, "code": "(fn [v] (reduce #(conj %1 %2) () v))", "user": "5591b61ee4b0604b3f94d580"}, {"problem": 23, "code": "reduce conj ()", "user": "55fc1f05e4b0f488688e066f"}, {"problem": 23, "code": "(comp vec into) '()", "user": "55ef2f27e4b066087aa94532"}, {"problem": 23, "code": "#(reduce (fn [acc x]\n            (cons x acc)) \n            (empty %) %)", "user": "5410499de4b01498b1a719a6"}, {"problem": 23, "code": "#(loop [coll %1 answer []]\n   (if \t(> (count coll) 0)\n     \t(recur (next coll) (cons (first coll) answer))\n     answer\n     )\n   \n   \n   )", "user": "55fc8f1fe4b0f488688e0675"}, {"problem": 23, "code": "(fn reverse-seq [input]\n  (if (empty? input)\n    []\n    (conj (reverse-seq (rest input)) (first input))))", "user": "55fb5b89e4b0f488688e0662"}, {"problem": 23, "code": "reduce (fn [acc el] (cons el acc)) []", "user": "55048182e4b086ebe8a79c7c"}, {"problem": 23, "code": "#(reduce (fn [x y] (conj x y)) '() %)", "user": "55fda077e4b07755b13145fb"}, {"problem": 23, "code": "#(loop [l %, rl '()]\n   (if (empty? l)\n     rl\n     (recur (rest l) (conj rl (first l)))))", "user": "55fd9dffe4b07755b13145fa"}, {"problem": 23, "code": "(fn [coll]\n (loop [reversed-coll (empty coll) natural-coll coll] \n   (if (empty? natural-coll) \n     reversed-coll \n     (recur (cons (first natural-coll) reversed-coll) (rest natural-coll)))))", "user": "55fe7e15e4b00f4cabc57651"}, {"problem": 23, "code": "(fn rev2 [xs]\n  (if (next xs)\n  \t(cons (last xs) (rev2 (butlast xs)))\n    xs))", "user": "55fee5e4e4b00f4cabc5765a"}, {"problem": 23, "code": "(fn [coll] (loop [c coll nc nil]\n              (if (seq c)\n                (recur (rest c) (cons (first c) nc))\n                nc)))", "user": "55f8b32ae4b03cbcff9738ba"}, {"problem": 23, "code": "(fn [in] (reduce conj () in))", "user": "55c917a1e4b0e31453f649e9"}, {"problem": 23, "code": "reduce conj ()", "user": "54bdcde5e4b0ed20f4ff6ee5"}, {"problem": 23, "code": "sort #(compare %2 %)", "user": "55e5f668e4b050e68259b47d"}, {"problem": 23, "code": "(fn [s]\n  (loop [rev '()\n         se s]\n    (if (empty? se)\n      rev\n      (recur (conj rev (first se)) (rest se)))))", "user": "55fe997be4b00f4cabc57653"}, {"problem": 23, "code": "(fn f [coll] \n  (if (= 1 (count coll))\n    coll\n    (cons (last coll) (f (butlast coll))\n          )\n    )\n  )", "user": "55fea1a1e4b00f4cabc57657"}, {"problem": 23, "code": "reduce conj '()", "user": "55f2b42be4b06e875b46ce4a"}, {"problem": 23, "code": "reduce conj '()", "user": "5598d5efe4b031d6649c9ba0"}, {"problem": 23, "code": "(fn [coll] (reduce conj '() coll))", "user": "55c1fa2be4b0e31453f64971"}, {"problem": 23, "code": "(fn reverse-seq [s]\n  (loop [res []\n         src s]\n   (if (empty? src)\n     res\n     (recur (cons (first src) res) (rest src))) ))", "user": "5294a49be4b02ebb4ef7500f"}, {"problem": 23, "code": "(fn [coll] (reduce conj '() coll))", "user": "55fb04e0e4b0f488688e0657"}, {"problem": 23, "code": "#(reduce (fn [r e]\n           (conj r e))\n         '()\n         %)", "user": "53bd7225e4b0d9a98559a6d2"}, {"problem": 23, "code": "(fn [col]\n    (reduce (fn [r e] (cons e (vec r))) [] col))", "user": "55d073ece4b0e31453f64a3b"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "560094a0e4b04bb52996e16b"}, {"problem": 23, "code": "(fn [x] (reduce (fn [accum current-val] (cons current-val accum)) [] x))", "user": "56009544e4b04bb52996e16c"}, {"problem": 23, "code": "(fn [s] \n(loop [s s x []]\n(if (seq s)\n(recur (butlast s) (conj x (last s)))\nx\n)))", "user": "511e17a9e4b0c5b849dd36b0"}, {"problem": 23, "code": "(fn [x]\n  (loop [y x z (empty x)]\n    (if (nil? y) z\n                 (recur (next y) (cons (first y) z)))\n    )\n  )", "user": "55f95de6e4b03cbcff9738c1"}, {"problem": 23, "code": "(fn myrev [seq] (if (not (= seq (empty seq)))\n                  (cons (last seq) (myrev (butlast seq)))\n                  (empty seq)))", "user": "56018dd4e4b04bb52996e18f"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "55f274b2e4b06e875b46ce44"}, {"problem": 23, "code": "#(loop [original %\n        reversed []]\n   (if (empty? original) reversed\n     (recur (rest original) (cons (first original) reversed))))", "user": "560039cce4b04bb52996e162"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "56014f55e4b04bb52996e184"}, {"problem": 23, "code": "(fn [seq]\n  (loop [remaining seq\n     \tso_far []]\n    (if (first remaining)\n      (recur (rest remaining) (concat [(first remaining)] so_far))\n      so_far)))", "user": "5601cd19e4b04bb52996e197"}, {"problem": 23, "code": "(fn [x]\n  (loop [f x t '()]\n    (if (first f)\n       (recur (rest f) (conj t (first f))) t)))", "user": "5601a32ee4b04bb52996e193"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "55f0b59de4b06e875b46ce2a"}, {"problem": 23, "code": "(partial reduce conj '())", "user": "50a3ad0ee4b0ceace084d493"}, {"problem": 23, "code": "(fn [l] (reduce (fn [l e] (cons e l)) nil l))", "user": "5600f8c7e4b04bb52996e176"}, {"problem": 23, "code": "#(reduce (fn([s e] (cons e s))) (empty %) %)", "user": "560152dee4b04bb52996e186"}, {"problem": 23, "code": "reduce conj '()", "user": "5602ab92e4b04bb52996e1a3"}, {"problem": 23, "code": "(fn rev [ls]\n  (if (empty? ls)\n    ls\n    (conj (rev (butlast ls)) (last ls))))", "user": "5602cbe5e4b04bb52996e1a9"}, {"problem": 23, "code": "(fn [coll]\n  (let [coll (list coll)])\n  (loop [c coll\n         rev ()]\n    (if (empty? c)\n      rev\n      (recur (rest c) (conj rev (first c))))))", "user": "56032173e4b04bb52996e1b3"}, {"problem": 23, "code": "(fn [l] (loop [l l a '()] (if (empty? l) a (recur (rest l) (cons (first l) a)))))", "user": "56022f5ae4b04bb52996e19c"}, {"problem": 23, "code": "#(into () %)", "user": "5602f5fce4b04bb52996e1ad"}, {"problem": 23, "code": "#(into () %)", "user": "55ee894de4b0121d4835fdf1"}, {"problem": 23, "code": "(fn myrev [s] (if-not (empty? s) (cons (last s) (myrev (butlast s)))))", "user": "560368a6e4b04bb52996e1bb"}, {"problem": 23, "code": "(fn [s] (vals (zipmap (range (count s)) s) ) )", "user": "56039843e4b04bb52996e1be"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "56035cb1e4b04bb52996e1ba"}, {"problem": 23, "code": "#(into () %)", "user": "5603d21de4b0c80df0ca264f"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "55fe9fc9e4b00f4cabc57655"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "55fbcbd1e4b0f488688e0669"}, {"problem": 23, "code": "into ()", "user": "56035afae4b04bb52996e1b9"}, {"problem": 23, "code": "#(into () %)", "user": "55fbcbb1e4b0f488688e0668"}, {"problem": 23, "code": "(fn [xs]\n  (reduce #(conj % %2) '() xs))\n\n;;(comment (fn [xs]\n;;  (loop [v (vec xs) result []]\n;;    (if (seq xs)\n;;      result\n;;      (recur (pop v) (conj result (peek v)))))))", "user": "52aaabf7e4b0c58976d9ac68"}, {"problem": 23, "code": "into ()", "user": "55e732c5e4b050e68259b492"}, {"problem": 23, "code": "(fn [coll] (reduce conj () coll))", "user": "555b43dfe4b0deb715856e4d"}, {"problem": 23, "code": "(fn recursive-reverse [coll]\n    (if (empty? coll)\n        []\n        (conj (recursive-reverse (rest coll)) (first coll) )))", "user": "56040e58e4b0c80df0ca2654"}, {"problem": 23, "code": "#(loop [index 0\n        reversed '()] \n   (if (= index (count %))\n     reversed\n     (recur (inc index) (conj reversed (nth (vec %) index)))))", "user": "5605007ae4b08b23635d315e"}, {"problem": 23, "code": "(partial reduce (fn [l e] (conj l e)) ())", "user": "56051095e4b08b23635d3162"}, {"problem": 23, "code": "(partial reduce conj '())", "user": "5603c31fe4b04bb52996e1c1"}, {"problem": 23, "code": "(fn\n   [data]\n   (loop [values data\n          result '()]\n     (if (empty? values)\n       result\n       (recur\n         (rest values)\n         (conj result (first values))))))", "user": "55ad2379e4b03311e7b732a1"}, {"problem": 23, "code": "#(into () %)", "user": "56047160e4b0c80df0ca265d"}, {"problem": 23, "code": "(partial into ())", "user": "56054d8fe4b08b23635d3165"}, {"problem": 23, "code": "reduce conj '()", "user": "56040b64e4b0c80df0ca2653"}, {"problem": 23, "code": "into ()", "user": "5603c784e4b04bb52996e1c2"}, {"problem": 23, "code": "#(loop [s % rs '()]\n   (if (empty? s)\n     rs\n     (recur (next s) (conj rs (first s)))))", "user": "5605b5e9e4b08b23635d316e"}, {"problem": 23, "code": "(fn my_reverse [l]\n\t(if (= [] l)\n\t\t[]\n\t\t(conj (my_reverse (rest l)) (first l))\n\t)\n)", "user": "56058d64e4b08b23635d3169"}, {"problem": 23, "code": "(fn [l] (reduce (fn [a x] (cons x a)) [] l))", "user": "56050f06e4b08b23635d3161"}, {"problem": 23, "code": "#(into () %)", "user": "56050dd9e4b08b23635d3160"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "55fe5dfae4b00f4cabc57650"}, {"problem": 23, "code": "#(letfn [(rev [r v]\n              (if (empty? v)\n                r\n                (rev (cons (first v) r) (rest v))))]\n   (rev [] %))", "user": "55c2cb47e4b0e31453f64981"}, {"problem": 23, "code": "#(\n  (fn reversy [l, rev]\n    (if\n      (= () l)\n      rev\n      (reversy (rest l) (cons (first l) rev))))\n  %1\n  '()\n)", "user": "56069006e4b08b23635d3174"}, {"problem": 23, "code": "reduce (fn [acc x] (concat [x] acc)) []", "user": "5606a4ace4b08b23635d3175"}, {"problem": 23, "code": "reduce conj '()", "user": "55d62a68e4b0e31453f64a96"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "55fe8190e4b00f4cabc57652"}, {"problem": 23, "code": "(partial reduce conj '())", "user": "5604bcf7e4b08b23635d315a"}, {"problem": 23, "code": "(fn rev [x] (if (empty? x) nil (let [r (rest x) re (rev r) h (first x)] (concat re [h]))))", "user": "56078b7be4b08b23635d3181"}, {"problem": 23, "code": "reduce conj ()", "user": "55e2d527e4b050e68259b43a"}, {"problem": 23, "code": "(fn f [l] \n  ((fn f-i [l a] \n     (println (str l))\n     (if (empty? l) \n       a\n       (f-i (rest l)\n            (conj a\n                  (first l)))))\n  (seq l)\n  (seq (empty l))))", "user": "55216b7ee4b0882d96d09193"}, {"problem": 23, "code": "(fn [s]\n  (loop [cs s\n         rs (list)]\n    (if (empty? cs)\n      rs\n      (recur (rest cs) (conj rs (first cs))))))", "user": "56082adae4b046a4fc0ac008"}, {"problem": 23, "code": "(fn [col] (into () col))", "user": "560828a1e4b046a4fc0ac006"}, {"problem": 23, "code": "(fn myrev [xs] (if (empty? xs) nil (cons (last xs) (myrev (butlast xs)))))", "user": "5601bb7ee4b04bb52996e195"}, {"problem": 23, "code": "(fn my-rev\n  ([s]\n   (my-rev s '()))\n  ([s f]\n   (if (empty? s)\n     f\n     (my-rev (rest s) (conj f (first s))))))", "user": "56084e91e4b046a4fc0ac00f"}, {"problem": 23, "code": "(fn [coll] (into () coll))", "user": "56018b59e4b04bb52996e18c"}, {"problem": 23, "code": "(fn reverse-me [l] \n    (if (empty? l) \n        l \n        (conj (vec (reverse-me (rest (apply list l))))\n              (first l))))", "user": "5606d71ce4b08b23635d317a"}, {"problem": 23, "code": "(fn reverse* [sq]\n  (loop [sq sq acc '()]\n    (if (empty? sq) acc\n      (recur (rest sq) (cons (first sq) acc)))))", "user": "560843dee4b046a4fc0ac00e"}, {"problem": 23, "code": "(fn [coll] (reduce conj '() coll))", "user": "5606ea56e4b08b23635d317b"}, {"problem": 23, "code": "(fn [seq]\n  (loop [orig seq rev []]\n  \t(if (empty? orig)\n    \trev\n        (recur (butlast orig) (conj rev (last orig))))))", "user": "56081222e4b046a4fc0ac004"}, {"problem": 23, "code": "(fn ! [coll] (if (nil? (last coll)) (last coll) (cons (last coll) (! (butlast coll)))))", "user": "543f1765e4b032a45b86935a"}, {"problem": 23, "code": "#(loop [s % r '()]\n  (if (empty? s)\n    r\n    (recur (rest s) (conj r (first s)))))", "user": "560794bde4b08b23635d3182"}, {"problem": 23, "code": "(fn [x] (reduce conj '() x))", "user": "56092a8de4b0053d1b86c7da"}, {"problem": 23, "code": "#( reduce conj() % )", "user": "56098003e4b0053d1b86c7e0"}, {"problem": 23, "code": "(fn my-reverse\n  [coll]\n  (if (empty? coll)\n    []\n    (let [x  (first coll)\n          xs (rest coll)\n          pre (my-reverse xs)]\n      (conj pre x)\n    )\n  )\n)", "user": "55e274b4e4b050e68259b436"}, {"problem": 23, "code": "(fn vasya ([coll] (vasya coll '()))\n          ([coll reversed] (if (empty? coll)\n                                reversed\n                                (recur (rest coll) (conj reversed (first coll))))))", "user": "55cf0d0ee4b0e31453f64a2b"}, {"problem": 23, "code": "reduce conj '()", "user": "55dedb0de4b050e68259b3e8"}, {"problem": 23, "code": "(fn [s]\n  (loop [c (first s) r (rest s) a '()]\n    (if (empty? r)\n      (conj a c)\n      (recur (first r) (rest r) (conj a c)))))", "user": "5609816ee4b0053d1b86c7e1"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5609866ee4b0053d1b86c7e3"}, {"problem": 23, "code": "(fn [x]\n  (loop [xs x\n         acc (empty x)]    \n    (if (seq xs)\n      (recur (rest xs) (cons (first xs) acc))\n      acc)))", "user": "5573ffb5e4b0aa18f790f3fd"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "560768a0e4b08b23635d317f"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "560959c0e4b0053d1b86c7dc"}, {"problem": 23, "code": "#(into () %)", "user": "56011393e4b04bb52996e178"}, {"problem": 23, "code": "#(into () %)", "user": "560a7775e4b05f002753defa"}, {"problem": 23, "code": "(fn rev [coll] \n  (if (empty? coll)\n    []\n    (conj (rev (rest coll)) (first coll) )))", "user": "560aa7b0e4b05f002753df02"}, {"problem": 23, "code": "reduce conj '()", "user": "50bcb004e4b0594b91591c5f"}, {"problem": 23, "code": "#(into '() %)", "user": "560ac5cae4b05f002753df09"}, {"problem": 23, "code": "(fn rev [s]\n  (let [v (vec s)]\n    (if (empty? s)\n      '()\n      (conj (rev (pop v)) (peek v))\n    )))", "user": "560ae540e4b05f002753df0d"}, {"problem": 23, "code": "(fn [x] (reduce conj '() x))", "user": "56049986e4b0c80df0ca2662"}, {"problem": 23, "code": "#(into () %)", "user": "544d8be9e4b0e3978000697d"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "560a7b46e4b05f002753defb"}, {"problem": 23, "code": "#(into () %)", "user": "560b8741e4b05f002753df1d"}, {"problem": 23, "code": "#(into () %)", "user": "56098ccbe4b0053d1b86c7e4"}, {"problem": 23, "code": "reduce conj ()", "user": "560a9d30e4b05f002753defe"}, {"problem": 23, "code": "(fn [s] (loop [result [] \n                        s s]\n                      (if (seq s) \n                        (recur (concat [(first s)] result)\n                         (rest s)) \n                        result)))", "user": "560ac488e4b05f002753df08"}, {"problem": 23, "code": "(partial reduce #(cons %2 %1) nil)", "user": "560bb1f7e4b05f002753df20"}, {"problem": 23, "code": "reduce (fn [a b] (conj a b)) '()", "user": "560c2e7ce4b05f002753df2b"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "56055381e4b08b23635d3167"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "55bb1b26e4b01b9910ae29e0"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "560d2a2be4b05f002753df35"}, {"problem": 23, "code": "(fn reverse' \n    [lst]\n    (if (= 0 (count lst)) \n      []\n      (conj   (reverse' (rest lst)) (first lst) )      \n      ))", "user": "55fcaccfe4b0f488688e0679"}, {"problem": 23, "code": "(fn rev\n   ([s] (rev '() s))\n   ([r s] (if (seq s) (rev (cons (first s) r) (rest s)) r )))", "user": "560d2b79e4b05f002753df38"}, {"problem": 23, "code": "#(into () %)", "user": "560d2a8de4b05f002753df36"}, {"problem": 23, "code": "#(reduce (fn [l i] (conj l i)) () %1)", "user": "545c2d07e4b01be26fd7465c"}, {"problem": 23, "code": "#(reduce conj `() %)", "user": "5602f72fe4b04bb52996e1ae"}, {"problem": 23, "code": "reduce conj ()", "user": "560aed59e4b05f002753df11"}, {"problem": 23, "code": "#(into () %)", "user": "560d98cee4b05f002753df43"}, {"problem": 23, "code": "(fn [s] (reduce conj '() s))", "user": "560d491ae4b05f002753df3b"}, {"problem": 23, "code": "(fn [xs] (into '() xs))", "user": "560c404fe4b05f002753df30"}, {"problem": 23, "code": "reduce #(conj %1 %2) '()", "user": "560dfa8de4b05f002753df46"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "560e38f2e4b05f002753df4c"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "560e3879e4b05f002753df4b"}, {"problem": 23, "code": "reduce conj '()", "user": "560e685be4b05f002753df4e"}, {"problem": 23, "code": "#(take (count %) (reduce conj (list %) %))", "user": "560d2b53e4b05f002753df37"}, {"problem": 23, "code": "(fn [x] \n   (let \n     [c (count x)\n      y (into [] x)] \n     (map (comp (partial nth y) (partial - (dec c))) \n          (range c))))", "user": "533975f0e4b0e30313ee6ca9"}, {"problem": 23, "code": "(fn [xs] (reduce #(conj %1 %2) '() xs))", "user": "560e9a2de4b05f002753df52"}, {"problem": 23, "code": "(fn [coll]\n  (loop [remaining coll answer []]\n    (if (empty? remaining)\n      answer\n      (recur (butlast remaining) (conj answer (last remaining))))))", "user": "560fe558e4b05f002753df63"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "560ff209e4b05f002753df65"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "560b483ee4b05f002753df16"}, {"problem": 23, "code": "(fn [x] \n  (into () x) \n)", "user": "560d4994e4b05f002753df3c"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5610eda6e4b05f002753df78"}, {"problem": 23, "code": "(fn [c] \n  (loop [r '() \n         c c] \n    (if (empty? c) \n      r \n      (recur (conj r (first c)) (rest c)))))", "user": "561047eae4b05f002753df6d"}, {"problem": 23, "code": "(fn [xs] (reduce #(cons %2 %1) [] xs))", "user": "53ab1ef6e4b047364c04444b"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "516afca6e4b081287f204ea0"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "55f3bb12e4b06e875b46ce64"}, {"problem": 23, "code": "reduce conj '()", "user": "55f9d870e4b03cbcff9738cc"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "561039e0e4b05f002753df6c"}, {"problem": 23, "code": "#(distinct (into () %))", "user": "560a8ccde4b05f002753defc"}, {"problem": 23, "code": "(fn [s] (into () s))", "user": "561223e5e4b05f002753df8b"}, {"problem": 23, "code": "(fn [coll] \n  (loop [result '() input coll]\n  \t  (if (nil? (seq input)) \n    \tresult\n    \t(recur (cons (first input) result) (rest input))\n      )\n  )\n)", "user": "55f2c898e4b06e875b46ce4b"}, {"problem": 23, "code": "(fn my-rev [xs] \n  (if (empty? xs) nil\n    (cons (last xs) (my-rev (butlast xs)))\n                 \n                 \n   ))", "user": "560c31b4e4b05f002753df2d"}, {"problem": 23, "code": "(fn [coll] (reduce #(conj %1 %2) () coll))", "user": "56041883e4b0c80df0ca2655"}, {"problem": 23, "code": "(fn [a-seq] (reduce conj '() a-seq ))", "user": "560d7863e4b05f002753df40"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5611196fe4b05f002753df7a"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "55ad1221e4b03311e7b7329d"}, {"problem": 23, "code": "(fn [l]\n  (let [rev_t (fn [l aux]\n                (let [h (first l)\n                      t (rest l)]\n                  (if (nil? h)\n                    aux\n                    (recur t (cons h aux)))))]\n    (if (or (nil? l) (empty? l))\n      l\n      (rev_t l '()))))", "user": "56019662e4b04bb52996e190"}, {"problem": 23, "code": "#(into '() %)", "user": "56119b53e4b05f002753df81"}, {"problem": 23, "code": "(fn [o,i] (if (= i ()) o (recur  (cons (first i) o) (rest i))\n)) []", "user": "55c0a40be4b01b9910ae2a26"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "55796743e4b05c286339e095"}, {"problem": 23, "code": "#(reduce (fn [coll val] (conj coll val)) () %)", "user": "560ee566e4b05f002753df57"}, {"problem": 23, "code": "#(reduce (fn [x y] (conj x y)) '() %)", "user": "5613a96ae4b05f002753dfa4"}, {"problem": 23, "code": "(fn func[l] (loop [m l acc ()] (if (empty? m) acc (recur (rest m) (cons (first m) acc)))))", "user": "56039a9de4b04bb52996e1bf"}, {"problem": 23, "code": "(fn [col] (reduce #(conj %1 %2) '()  col))", "user": "54aede47e4b09f271ff37cfd"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5592ba8be4b0c79f6e1db931"}, {"problem": 23, "code": "(fn my-reverse [seq] \n  (reduce (fn [reversed-seq next-value] (cons next-value reversed-seq) ) (empty seq) seq) )", "user": "55efdc97e4b066087aa94542"}, {"problem": 23, "code": "(fn [coll]\n   (reduce #(cons %2 %1) () coll))", "user": "550b1c2ce4b06e50f9beb13b"}, {"problem": 23, "code": "(fn [x] (into () x))", "user": "5614fa1de4b05f002753dfbe"}, {"problem": 23, "code": "(fn [l]\n  (loop [c      l\n         result '()]\n    (if (empty? c)\n      result\n      (recur (rest c)\n             (conj result (first c))))))", "user": "56156feee4b05f002753dfc5"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5614847ae4b05f002753dfb7"}, {"problem": 23, "code": "reduce (fn [accum current] (conj accum current)) '()", "user": "56153b39e4b05f002753dfc4"}, {"problem": 23, "code": "#(into () %)", "user": "5090c8e2e4b0742c82730ad9"}, {"problem": 23, "code": "reduce conj '()", "user": "56163cc1e4b06b1bb21829ff"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5578f292e4b05c286339e08f"}, {"problem": 23, "code": "(fn fun\n  ([lista]\n   (fun (rest lista) [(first lista)]))\n  ([lista rev]\n   (if (empty? lista)\n     rev\n     (fun (rest lista) (cons (first lista) rev)))))", "user": "560ff632e4b05f002753df66"}, {"problem": 23, "code": "(fn [coll]\n  (loop [in coll\n         out ()]\n    (let [head (first in)\n          tail (next in)\n          results (cons head out)]\n      (if (nil? tail)\n        results\n        (recur tail results)))))", "user": "520e6d77e4b0101e4be6fcd5"}, {"problem": 23, "code": "(fn [x] (let [s (seq x)] (map #(nth s %) (range (dec (count s)) -1 -1))))", "user": "5616f411e4b06b1bb2182a0a"}, {"problem": 23, "code": "(fn [arr] \n  (loop [input arr\n         output '()]\n    (if (empty? input)\n      output\n      (recur\n       (rest input)\n       (conj output (first input))))))", "user": "56171eade4b06b1bb2182a0c"}, {"problem": 23, "code": "(fn [x]\n  (into '() x))", "user": "56038f34e4b04bb52996e1bc"}, {"problem": 23, "code": "#(into '() %)", "user": "551e312ce4b030e6a24d00e5"}, {"problem": 23, "code": "reduce conj '()", "user": "5617a540e4b06b1bb2182a12"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5617b1c0e4b06b1bb2182a13"}, {"problem": 23, "code": "reduce conj '()", "user": "560ae7e6e4b05f002753df0e"}, {"problem": 23, "code": "#(reduce (fn [s x] (cons x s)) [] %)", "user": "5617db88e4b06b1bb2182a16"}, {"problem": 23, "code": "reduce conj '()", "user": "53c6dcf9e4b00fb29b2212a3"}, {"problem": 23, "code": "(fn my-reverse\n  [coll]\n  (reduce conj nil coll))", "user": "56180d83e4b06b1bb2182a18"}, {"problem": 23, "code": "reduce (fn [x y] (concat [y] x)) []", "user": "56152a26e4b05f002753dfc1"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5615fd5de4b06b1bb21829fd"}, {"problem": 23, "code": "(fn [input] \n  (reduce conj () input))", "user": "5585ff97e4b001b0851d7515"}, {"problem": 23, "code": "into '()", "user": "55bf6dbce4b01b9910ae2a12"}, {"problem": 23, "code": "reduce #(cons %2 %1) []", "user": "4f5e5975e4b0030a34fb2b4d"}, {"problem": 23, "code": "(fn [coll] (reduce conj '() coll))", "user": "52dda39fe4b09f7907dd13e7"}, {"problem": 23, "code": "(fn [xs]\n  (letfn [(myreverse [items acc]\n                     (if (empty? items) acc (recur (rest items) (cons (first items) acc))))]\n    (myreverse xs '())))", "user": "5619cd91e4b053970a773aff"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "55e64c1ee4b050e68259b486"}, {"problem": 23, "code": "reduce (fn [S i] (concat (list i) S)) '()", "user": "55f6fe09e4b06e875b46cea2"}, {"problem": 23, "code": "reduce conj '()", "user": "55dfe72ee4b050e68259b400"}, {"problem": 23, "code": "(fn [s]\n  (loop [s s\n         acc ()]\n    (if (empty? s)\n      acc\n      (recur (rest s) (cons (first s) acc)))))", "user": "5619a4d0e4b053970a773afd"}, {"problem": 23, "code": "(fn [myseq] \n  (loop [newseq [] oldseq myseq] \n    (if (empty? oldseq) \n      (seq newseq)\n      (recur (cons (first oldseq) newseq) (rest oldseq)))))", "user": "56197b47e4b053970a773af8"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "561a9e3be4b053970a773b09"}, {"problem": 23, "code": "#(loop [li %\n        lacc nil]\n   (if (empty? li) lacc\n     (recur (rest li) (cons (first li) lacc))))", "user": "561b04e8e4b053970a773b0f"}, {"problem": 23, "code": "(fn [s]\n  (reduce conj '() s)\n)", "user": "56195e57e4b053970a773af6"}, {"problem": 23, "code": "#(loop [x % rv '()]\n   (if (empty? x)\n     rv\n     (recur (rest x) (conj rv (first x)))))", "user": "561ba3e5e4b073c65b0ce3eb"}, {"problem": 23, "code": "(fn [a-seq]\n  (loop [s a-seq rev ()]\n    (if (empty? s)\n      rev\n      (recur (rest s) (conj rev (first s))))))", "user": "5521248fe4b08d5046aa8a69"}, {"problem": 23, "code": "(fn rev \n  ([v]\n   (rev v []))\n  ([v, result]\n   (cond     \n    (= (count v) 0) result\n    :else (let [a (last v) others (drop-last v)] \n            (rev others (conj result a))\n    )\n   )\n  ))", "user": "561a4c60e4b053970a773b06"}, {"problem": 23, "code": "(fn [seq]\n  (loop [acc nil\n         seq seq]\n    (if (empty? seq)\n        acc\n        (recur (conj acc (first seq)) (rest seq)))))", "user": "56002c2de4b04bb52996e161"}, {"problem": 23, "code": "(fn reverser [ls]\n  (if (= [] (rest ls))\n    (conj [] (first ls)) \n    (conj (reverser (rest ls)) (first ls))))", "user": "561bcf94e4b064ca9f4b168a"}, {"problem": 23, "code": "(fn [x] (into '() x))", "user": "56197c99e4b053970a773af9"}, {"problem": 23, "code": "(fn[coll]\n  (loop [rex [], c (into [] coll)]\n    (if (empty? c)\n      rex\n      (recur (conj rex (peek c)) (pop c))\n    )\n  )\n)", "user": "5537b2c7e4b09218d5f44fce"}, {"problem": 23, "code": "(fn [x]\n  (loop [[a & r] (vec x)\n         result []]\n    (if a\n      (recur r (cons a result))\n      (vec result))\n    )\n  )", "user": "53a0b730e4b0ca733b9744b5"}, {"problem": 23, "code": "#(into () % )", "user": "561053a3e4b05f002753df70"}, {"problem": 23, "code": "reduce conj '()", "user": "5611b7d7e4b05f002753df85"}, {"problem": 23, "code": "reduce #(cons %2 %1) ()", "user": "561c0278e4b064ca9f4b1691"}, {"problem": 23, "code": "(fn [coll] (reduce #(cons %2 %1) () coll))", "user": "561ca2eae4b064ca9f4b169b"}, {"problem": 23, "code": "into '()", "user": "561ca6ebe4b064ca9f4b169c"}, {"problem": 23, "code": "(fn rev [x]\n    (loop [f [] y x]\n      (if (not-empty y)\n        (do       \n          (recur (cons (first y) f) (rest y)))\n        f)))", "user": "561bb8dbe4b064ca9f4b1686"}, {"problem": 23, "code": "(fn [coll]\n  (loop [[r & more :as all] (seq coll)\n         acc '()]\n    (if all\n      (recur more (cons r acc))\n      acc)))", "user": "5616c78ee4b06b1bb2182a07"}, {"problem": 23, "code": "into ()", "user": "561a060ee4b053970a773b01"}, {"problem": 23, "code": "#(into () %)", "user": "561d95eee4b064ca9f4b16b3"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "4fec0824e4b0681fd128dc9c"}, {"problem": 23, "code": "(fn rev \n   ([s] \n   (rev '() s)) \n   \t([r s] \n    (if (seq s) (rev (cons (first s) r) (rest s)) r )) )", "user": "55f27d95e4b06e875b46ce47"}, {"problem": 23, "code": "reduce\n    (fn [acc ele]\n      (concat [ele] acc))\n    []", "user": "561d8936e4b064ca9f4b16b2"}, {"problem": 23, "code": "(fn [q] \n       (loop[y q z []] (if (= (empty? y) false) \n                         (recur \n                           (drop-last y)\n                           (conj z (last y))\n                           ) \n                         z)))", "user": "561be724e4b064ca9f4b168c"}, {"problem": 23, "code": "(fn [x] (loop [old x new []] (if (empty? old) new (recur (drop-last 1 old) (conj new (last old))))))", "user": "561e2b33e4b064ca9f4b16ba"}, {"problem": 23, "code": "(fn [coll]\n  (loop [[x & xs] (into [] coll) out '()]\n    (if xs\n      (recur xs (conj out x))\n      (conj out x))))", "user": "561cb6cfe4b064ca9f4b169e"}, {"problem": 23, "code": "#(into () %)", "user": "561ea5cae4b064ca9f4b16c4"}, {"problem": 23, "code": "(fn [xs]\n  (loop [fwd xs\n         rev []]\n    (if (empty? fwd)\n      rev\n      (recur (rest fwd) (cons (first fwd) rev)))))", "user": "561aab66e4b053970a773b0a"}, {"problem": 23, "code": "#(reduce (fn [x y] (cons y (cond (seq? x) x :else [x]))) %)", "user": "561e9e67e4b064ca9f4b16c2"}, {"problem": 23, "code": "(fn foo [oldlist]\n  ((fn [[head & tail] newvec]\n    (if (empty? tail)\n      (conj newvec head)\n      (recur tail (conj newvec head)))) (seq oldlist) ()))", "user": "561f9110e4b064ca9f4b16ce"}, {"problem": 23, "code": "reduce conj ()", "user": "560aa0cae4b05f002753deff"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "561bc8c8e4b064ca9f4b1688"}, {"problem": 23, "code": "#(into () %)", "user": "5272645de4b03e8d9a4a742c"}, {"problem": 23, "code": "(fn myrvs [x] (when x (cons (last x) (myrvs (butlast x)))))", "user": "561fc0cee4b064ca9f4b16d1"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "561ff621e4b064ca9f4b16d6"}, {"problem": 23, "code": "(partial reduce conj ())", "user": "56205609e4b064ca9f4b16df"}, {"problem": 23, "code": "(fn [x] (reduce conj '() x))", "user": "5620d09ce4b064ca9f4b16e3"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "4f40c46fe4b0e243712b1fbe"}, {"problem": 23, "code": "#(loop [ys '() xs %]\n  (if (not (empty? xs))\n    (recur (conj ys (first xs)) (next xs))\n    ys))", "user": "55fb41a6e4b0f488688e065f"}, {"problem": 23, "code": "reduce #(conj %1 %2) ()", "user": "561d23e3e4b064ca9f4b16a5"}, {"problem": 23, "code": "(fn  my_reverse [lst]\n  (if (empty? lst)\n    lst\n    (conj (my_reverse (butlast  lst)) (last lst))))", "user": "55a21f1ce4b0acc240e3151f"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "561a9380e4b053970a773b07"}, {"problem": 23, "code": "(fn [x] \n (loop [old x new '()]\n  (if (empty? old)\n      new\n   (recur (rest old)\n    (cons (first old)\n             new)))))", "user": "54b54d1be4b05787c3b1639c"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "56228d00e4b03f08ee9a9227"}, {"problem": 23, "code": "(fn reversi [s]\n  (reduce conj '() s))", "user": "561eb82fe4b064ca9f4b16c7"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "56202553e4b064ca9f4b16dd"}, {"problem": 23, "code": "#(into '() %)", "user": "5622f21fe4b03f08ee9a922e"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "52c48ec6e4b0c2d177d620dd"}, {"problem": 23, "code": "(fn [coll]\n  (loop [coll coll\n         acc '()]\n    (cond\n      (empty? coll) acc\n      :else (recur (rest coll) (cons (first coll) acc)))))", "user": "5600dccee4b04bb52996e175"}, {"problem": 23, "code": "(fn reverses [xs]\n  (into '() xs))", "user": "56244b3ae4b0b951f963fc22"}, {"problem": 23, "code": "(fn [coll]\n  (loop [ret [] coll coll]\n    (if (empty? coll)\n      ret\n      (recur (cons (first coll) ret) (next coll)))))", "user": "54d000c7e4b018d918be98d7"}, {"problem": 23, "code": "(fn [x] (into '() x))", "user": "55f1c4b4e4b06e875b46ce35"}, {"problem": 23, "code": "reduce (fn [rLst elem] (cons elem rLst)) ()", "user": "55f4b88be4b06e875b46ce80"}, {"problem": 23, "code": "#((fn foo[x newset]     (println \"val=\" (last x)) (if (not (empty? (drop-last x) )) (recur (drop-last x) (conj newset (last x))) (conj newset (last x) ) )) %1 [])", "user": "561cad18e4b064ca9f4b169d"}, {"problem": 23, "code": "(fn [col](reduce (fn [a b] (cons b a)) [] col))", "user": "55b1d0b5e4b0da326a65cf73"}, {"problem": 23, "code": "(fn [x] (into () x))", "user": "562473ece4b0b951f963fc25"}, {"problem": 23, "code": "#(loop [l (rest %), a (list (first %))]\n\t(if (seq l)\n\t\t(recur (next l) (cons (first l) a))\n         a\n    )\n)", "user": "56263f3fe4b00e49c7cb47bc"}, {"problem": 23, "code": "#(into () %)", "user": "522a5bdde4b0590a43906cf8"}, {"problem": 23, "code": "(fn reverter [list]\n  (if (= 0 (count list))\n    []\n    (conj (reverter (rest list)) (first list))))", "user": "51a0370ae4b0b292b01ee3ef"}, {"problem": 23, "code": "(fn [s](loop[s s n [] ](if (empty? s) n (recur (take (- (count s)1) s)(conj n (last s))))))", "user": "562326cbe4b03f08ee9a9230"}, {"problem": 23, "code": "reduce #(cons %2 %) []", "user": "561310ebe4b05f002753df9b"}, {"problem": 23, "code": "reduce #(cons %2 %) []", "user": "56131f9fe4b05f002753df9f"}, {"problem": 23, "code": "reduce conj '()", "user": "5624b2aee4b00a550fc90285"}, {"problem": 23, "code": "reduce conj `()", "user": "5624b34be4b00a550fc90286"}, {"problem": 23, "code": "reduce conj ()", "user": "5624a374e4b00a550fc90283"}, {"problem": 23, "code": "(fn rev [x] \n  (let [x (into [] x)]\n  \t(map \n      (fn [el] \n        (nth x (- (- (count x) 1) (.indexOf x el))))\n       x)))", "user": "5626447fe4b00e49c7cb47bd"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "561bf12ce4b064ca9f4b168e"}, {"problem": 23, "code": "into '()", "user": "56102f50e4b05f002753df6b"}, {"problem": 23, "code": "(fn [sequence]\n  (loop [[head & tail] (seq sequence)\n         result []]\n    (if (nil? head)\n      result\n      (recur tail (concat [head] result)))))", "user": "56277b32e4b00e49c7cb47d1"}, {"problem": 23, "code": "(fn [coll]\n  (reduce conj '() coll))", "user": "561a2940e4b053970a773b04"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5627d09ce4b00e49c7cb47db"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5391149ee4b0b51d73faaea0"}, {"problem": 23, "code": "(fn [s] \n  (loop [x s \n         reversed []]\n    (if (not (seq x))\n      reversed\n      (recur (rest x) (cons (first x) reversed)))))", "user": "55cc4492e4b0e31453f64a0e"}, {"problem": 23, "code": "#(reduce (fn [acc in] (conj acc in)) nil %)", "user": "546b24a0e4b00cfc9eacc166"}, {"problem": 23, "code": "(fn[li](reduce conj nil li))", "user": "5627444fe4b00e49c7cb47cd"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5628cb07e4b00e49c7cb47ef"}, {"problem": 23, "code": "(fn jeverse [coll] (reduce (fn [acc element] (cons element acc)) [] coll))", "user": "5625f678e4b00e49c7cb47b8"}, {"problem": 23, "code": "(fn [col] \n  ((fn [res col] \n    (if (first col)\n      (recur (cons (first col) res) (rest col))\n      res)) nil col))", "user": "562807dfe4b00e49c7cb47dd"}, {"problem": 23, "code": "(fn [s]\n  (let [s (vec s)]\n  (loop [index 0 newseq '()]\n    (if (= index (dec (count s)))\n      (conj newseq (get s index))\n      (recur (inc index) (conj newseq (get s index)))))))", "user": "53d977f1e4b0e771c302547a"}, {"problem": 23, "code": "#(reduce (fn [x y] (conj x y)) () %)", "user": "5628fda8e4b00e49c7cb47f7"}, {"problem": 23, "code": "#(loop [remaining-values % result []]\n    (if (empty? remaining-values)\n      result\n      (recur (rest remaining-values) (cons (first remaining-values) result))))", "user": "5614ebc5e4b05f002753dfbc"}, {"problem": 23, "code": "(fn [sq]\n  (loop [s sq out '()]\n     (if (empty? s)\n       out\n       (recur (rest s)(conj out (first s)))\n     )\n  )\n)", "user": "560331dee4b04bb52996e1b5"}, {"problem": 23, "code": "reduce conj '()", "user": "56215c8ee4b03f08ee9a921a"}, {"problem": 23, "code": "(fn rv [c] (if (empty? c) c (cons (last c) (rv (butlast c)))))", "user": "561e8b11e4b064ca9f4b16c0"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "56289a87e4b00e49c7cb47eb"}, {"problem": 23, "code": "#(loop[l %, r '()]\n   (if (nil? l)\n     r\n     (recur (next l) (conj r (first l)))))", "user": "5619b22ee4b053970a773afe"}, {"problem": 23, "code": "(fn [coll]\n  (loop [[first & rest] (seq coll)\n         result '()]\n    (if rest\n      (recur rest (conj result first))\n      (conj result first))))", "user": "561fc0d0e4b064ca9f4b16d2"}, {"problem": 23, "code": "(fn f[x](if (empty? x)()(conj(f (pop (vec x)))(last x))))", "user": "55f85e85e4b03cbcff9738af"}, {"problem": 23, "code": "(fn [s] (reduce conj () (seq s)))", "user": "5516a874e4b06a49daca83b5"}, {"problem": 23, "code": "#(into () %)", "user": "562ae733e4b00e49c7cb4836"}, {"problem": 23, "code": "#(loop [result (list) xs %]\n   (if (empty? xs) result\n     (recur (conj result (first xs)) (rest xs))))", "user": "56272be6e4b00e49c7cb47c9"}, {"problem": 23, "code": "#(into () %)", "user": "562ab73ce4b00e49c7cb482e"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "562b57c7e4b058fa18c5a6cc"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "562bfba5e4b058fa18c5a6d2"}, {"problem": 23, "code": "(fn [coll] (reduce #(conj %1 %2) '() coll))", "user": "562c15d3e4b058fa18c5a6d5"}, {"problem": 23, "code": "sort #(= 1 (compare %1 %2))", "user": "562bb236e4b058fa18c5a6ce"}, {"problem": 23, "code": "(fn [coll]\n  (reduce conj '() coll))", "user": "55ed1575e4b0121d4835fdd3"}, {"problem": 23, "code": "#(into () %)", "user": "56282cdde4b00e49c7cb47e2"}, {"problem": 23, "code": "#(reduce conj () % )", "user": "56083383e4b046a4fc0ac00a"}, {"problem": 23, "code": "(fn myReverse\n  [coll]\n  (reduce (fn [coll item] (cons item coll)) [] coll))", "user": "55c5bdffe4b0e31453f649b6"}, {"problem": 23, "code": "(fn revseq [n]\n  (if (= n []) []\n      (merge (revseq (rest n)) (first n))))", "user": "56278266e4b00e49c7cb47d3"}, {"problem": 23, "code": "(partial reduce conj ())", "user": "562cd94ee4b0a45d2ff83015"}, {"problem": 23, "code": "reduce conj ()", "user": "4f0366b0535dcb61093f6aa9"}, {"problem": 23, "code": "#(into () %)", "user": "562d1e36e4b0a45d2ff8301a"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "562c0e2ae4b058fa18c5a6d4"}, {"problem": 23, "code": "#(reduce(fn [ r x ] \n        (concat [x] r)\n         ) [] % )", "user": "54494159e4b032a45b8693d1"}, {"problem": 23, "code": "(fn [coll] (loop [a nil coll coll] (if (seq coll) (let [x (first coll)] (recur (cons x a)(next coll))) a)))", "user": "520a6aace4b01da9d47a99d9"}, {"problem": 23, "code": "(fn [input]\n  ( loop [s (drop-last input) item (last input) rev []]\n    (if-not item\n      rev\n      (recur (drop-last s)  (last s) (conj rev item))\n    )\n   )\n  )", "user": "56004deee4b04bb52996e164"}, {"problem": 23, "code": "(fn [thelist]\n  (loop [oldlist thelist newlist ()]\n    (if (empty? oldlist) newlist\n      (recur (rest oldlist) (conj newlist (first oldlist)))\n    )\n  )\n)", "user": "562d6385e4b0a45d2ff8301b"}, {"problem": 23, "code": "reduce conj ()", "user": "562b1a7be4b058fa18c5a6cb"}, {"problem": 23, "code": "reduce (fn [x y] (cons y x)) '()", "user": "562add6de4b00e49c7cb4834"}, {"problem": 23, "code": "(fn [l] (into '() l))", "user": "5628a121e4b00e49c7cb47ed"}, {"problem": 23, "code": "(fn [coll] (for [i (range (count coll))] (nth (seq coll) (- (dec (count coll)) i))))", "user": "53b1db8ee4b047364c044495"}, {"problem": 23, "code": "(fn f [s]\n  (if (= (rest s) '())\n    s\n    (concat (f (rest s)) (list (first s)))))", "user": "562e05e0e4b0a45d2ff83023"}, {"problem": 23, "code": "#(apply conj '() %)", "user": "55fc07d3e4b0f488688e066e"}, {"problem": 23, "code": "(fn [coll]\n  (loop [res '() coll coll]\n    (if (nil? coll)\n      res\n      (recur (conj res (first coll)) (next coll)))))", "user": "562cb7cfe4b0a45d2ff83009"}, {"problem": 23, "code": "(fn reverse-alt\n  [items]\n  (reduce (fn [c _]\n            (concat c [(last (take (- (count items) (count c)) items))]))               \n           []\n           items))", "user": "562e2c5ce4b0a45d2ff83024"}, {"problem": 23, "code": "reduce conj ()", "user": "55ed9108e4b0121d4835fddc"}, {"problem": 23, "code": "(fn inverter [sequencia]\n  (into '() sequencia))", "user": "562eafbce4b0ab312c17ebbe"}, {"problem": 23, "code": "(fn [coll]\n  (loop [coll coll\n         reversed '()]\n    (if (= 0 (count coll))\n      reversed\n      (recur (rest coll) (conj  reversed (first coll)) ))))", "user": "504f0c9ce4b0e7ad84dbc4b2"}, {"problem": 23, "code": "reduce conj ()", "user": "551e6526e4b030e6a24d00e8"}, {"problem": 23, "code": "into ()", "user": "5629de63e4b00e49c7cb4812"}, {"problem": 23, "code": "(fn my-reverse [elements]\n  (cond (nil? elements) nil\n        :else (cons (last elements) (my-reverse (butlast elements)))))", "user": "561d6675e4b064ca9f4b16ae"}, {"problem": 23, "code": "#(reduce (fn [a b] (cons b a)) [] %)", "user": "562e8b2be4b0ab312c17ebbb"}, {"problem": 23, "code": "(fn [lst]\n  (loop [new-list []\n         iteration (count lst)]\n    (if (= iteration 0)\n      new-list\n      (recur (conj new-list (nth (into [] lst) (dec iteration)))\n             (dec iteration)))))", "user": "562528d4e4b00a550fc90292"}, {"problem": 23, "code": "#(loop [head nil tail %] (if (empty? tail) head (recur (cons (first tail) head) (rest tail))))", "user": "562e9f5fe4b0ab312c17ebbd"}, {"problem": 23, "code": "(fn [s]\n  (reduce conj () s)\n  )", "user": "562fd7f6e4b0ab312c17ebe0"}, {"problem": 23, "code": "#(reduce (fn [acc elem] (conj acc elem)) '() %)", "user": "54c9e295e4b045293a27f684"}, {"problem": 23, "code": "(fn\n  [collection]\n  (into () collection))", "user": "562f9f5ae4b0ab312c17ebce"}, {"problem": 23, "code": "(fn\n  [s]\n  (reduce (fn [acc x] (conj acc x)) nil s))", "user": "562fb774e4b0ab312c17ebd9"}, {"problem": 23, "code": "(fn [coll]\n  (loop [o (seq coll)\n         c (count coll) \n         n 0 \n         l (empty coll)]\n    (if (== n c)\n      l\n      (recur o c (inc n) (cons (nth o n) l)))))", "user": "561a1af6e4b053970a773b02"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5630a51de4b0bfe05bf11781"}, {"problem": 23, "code": "(fn [x]\n  (loop [n [] o x]\n    (if (= 0 (count o))\n      n\n      (recur (conj n (last o)) (butlast o)))))", "user": "56288ccae4b00e49c7cb47ea"}, {"problem": 23, "code": "into ()", "user": "5631040be4b0bfe05bf1178c"}, {"problem": 23, "code": "(fn [x]\n    (vec\n      (reduce\n        (fn [a b]\n          (if (list? a) (conj a b) (list a))\n          )\n        (first x)\n        x)))", "user": "562117b4e4b064ca9f4b16ed"}, {"problem": 23, "code": "(fn [coll] (reduce #(cons %2 %1) (empty coll) coll))", "user": "5619a388e4b053970a773afc"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "56313ff1e4b0bfe05bf1178f"}, {"problem": 23, "code": "#(loop [newList [] curList %]\n   (if (empty? curList)\n     newList\n     (recur (cons (first curList) newList) (rest curList))))", "user": "56314595e4b0bfe05bf11790"}, {"problem": 23, "code": ";into ()\n;apply conj ()\nreduce conj ()", "user": "562f2985e4b0ab312c17ebc5"}, {"problem": 23, "code": "(fn [v] (reduce (fn [a b] (cons b a)) [] v))", "user": "56308326e4b073c1cf7a9be9"}, {"problem": 23, "code": "(fn [coll] (reduce #(cons %2 %1) '() coll))", "user": "5630fd6fe4b0bfe05bf1178b"}, {"problem": 23, "code": "#(into () %)", "user": "56306e6ce4b073c1cf7a9be7"}, {"problem": 23, "code": "reduce #(cons %2 %1) []", "user": "562f45e6e4b0ab312c17ebc8"}, {"problem": 23, "code": "#(reduce conj '()  %)", "user": "561d7246e4b064ca9f4b16b1"}, {"problem": 23, "code": "reduce conj `()", "user": "562733a6e4b00e49c7cb47ca"}, {"problem": 23, "code": "(fn [sq]\n  (loop [l sq\n     vec-result '()]\n     (if (empty? l)\n        vec-result\n        (recur (rest l) (conj vec-result (first l))))))", "user": "5630cff7e4b0bfe05bf11787"}, {"problem": 23, "code": "(fn [s]\n  (loop [acc [] rems s]\n    (if (empty? rems)\n      acc\n      (recur (conj acc (last rems)) (butlast rems)))))", "user": "5632365ce4b0bfe05bf1179d"}, {"problem": 23, "code": "(fn [l] (apply conj '() l))", "user": "5632e850e4b0bfe05bf117ac"}, {"problem": 23, "code": "(fn rev [sox] \n  (cond \n   (empty? sox) ()\n   :else (cons\n          (last sox)\n          (rev (butlast sox)))))", "user": "55e357dae4b050e68259b442"}, {"problem": 23, "code": "(fn [s]\n  (loop [remaining s\n         reversed '()]\n    (if (empty? remaining)\n      reversed\n      (recur (rest remaining) (cons (first remaining) reversed)))))", "user": "5630ce72e4b0bfe05bf11786"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "535558b9e4b04ce2eb3ed25a"}, {"problem": 23, "code": "(fn rev [x]\n  (if (= (first x) nil)\n    []\n    (conj (rev (rest x)) (first x))))", "user": "5632b0a9e4b0bfe05bf117a8"}, {"problem": 23, "code": "(fn rev [x]\n  (if (= (first x) nil)\n  []\n  (conj (rev (rest x)) (first x))))", "user": "5632abbee4b0bfe05bf117a7"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5633e653e4b0bfe05bf117b7"}, {"problem": 23, "code": "(fn [m] (reduce #(conj % %2) () m))", "user": "5406eaf3e4b0addc1aec66ad"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "56327168e4b0bfe05bf117a5"}, {"problem": 23, "code": "(fn reverse-a-sequence-solution\n  [args] ;; update args as needed\n  ;; Write a function which reverses a sequence.\n  (apply conj () args))", "user": "536829c8e4b0243289761e8b"}, {"problem": 23, "code": "(fn [x]\n  (into '() x))", "user": "563130e4e4b0bfe05bf1178d"}, {"problem": 23, "code": "#(into () %)", "user": "5537c5b3e4b09218d5f44fd1"}, {"problem": 23, "code": "(fn [s]\n  (into [] (reduce #(conj %1 %2) '() s)))", "user": "4f8c57bae4b02e764a0a5197"}, {"problem": 23, "code": "#(reduce (fn [x y] (conj x y)) '() %)", "user": "56174d86e4b06b1bb2182a0e"}, {"problem": 23, "code": "(fn rev [xs]\n  (if-let [res (seq (rest xs))]\n    (concat (rev res) (take 1 xs))\n    xs))", "user": "54995298e4b0b312c081ff8b"}, {"problem": 23, "code": "#(if (vector? %)\n               (loop [ result [] index (count %)]\n                   (if (zero? index)\n                     result\n                     (recur (conj result (nth % (dec index))) (dec index) )))\n    \n             (let [coll (vec %)]\n               (seq\n                (loop [ result [] index (count coll)]\n                   (if (zero? index)\n                     result\n                     (recur (conj result (nth coll (dec index))) (dec index) ))))\n               )\n             )", "user": "56349008e4b0bfe05bf117bd"}, {"problem": 23, "code": "#(reduce (fn [to from] (cons from to)) [] %)", "user": "55729a78e4b09a3098a52547"}, {"problem": 23, "code": "reduce conj ()", "user": "56350c87e4b0bfe05bf117c0"}, {"problem": 23, "code": "(fn rvs\n  ([s] (rvs s '()))\n  ([s r]\n   (if (empty? s)\n     r\n     (rvs (rest s) (conj r (first s))))))", "user": "544e6b7fe4b0e39780006986"}, {"problem": 23, "code": "#(into () %)", "user": "56188848e4b053970a773aea"}, {"problem": 23, "code": "#(into '() %)", "user": "56304db8e4b073c1cf7a9be5"}, {"problem": 23, "code": "reduce conj ()", "user": "5630471ce4b073c1cf7a9be4"}, {"problem": 23, "code": "(fn [ls]\n  \t(loop [re ls rs []]\n  \t\t(if(empty? re)\n  \t\t\trs\n  \t\t\t(recur (rest re) (cons (first re) rs)))))", "user": "5191a763e4b0d428d29dc1b4"}, {"problem": 23, "code": "(fn myrev [s]\n  (if\n    (= s [])\n    []\n    (conj\n     (myrev (rest s))\n     (first s)\n    )\n  )\n)", "user": "563758e3e4b0bfe05bf117d5"}, {"problem": 23, "code": "reduce conj ()", "user": "563799f8e4b0bfe05bf117db"}, {"problem": 23, "code": "#(into () %)", "user": "554b8b78e4b0a04f7929958d"}, {"problem": 23, "code": "#(into () %)", "user": "55ba4a78e4b01b9910ae29cf"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "53286f84e4b09d4e7a9b5505"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5637d759e4b0bfe05bf117df"}, {"problem": 23, "code": "(fn [c] (reduce #(conj %1 %2) '() c))", "user": "560dbf17e4b05f002753df44"}, {"problem": 23, "code": "(fn rev [res sq] \n   (if (empty? sq) \n     res\n     (rev\n       (conj res (first sq)) \n       (rest sq))))\n'()", "user": "56366f73e4b0bfe05bf117cc"}, {"problem": 23, "code": "into ()", "user": "55eb026de4b0121d4835fdb7"}, {"problem": 23, "code": "(fn [coll] (reduce #(cons %2 %1) [] coll))", "user": "56372c3ce4b0bfe05bf117d1"}, {"problem": 23, "code": "reduce conj '()", "user": "5638b88de4b0bfe05bf117e9"}, {"problem": 23, "code": "(fn [c] (loop [col c a []] (if (empty? col) a (recur (butlast col) (conj a (last col))))))", "user": "56347285e4b0bfe05bf117bc"}, {"problem": 23, "code": "(fn [xs] (reduce conj '() xs))", "user": "56388a0fe4b0bfe05bf117e7"}, {"problem": 23, "code": "reduce #(concat (list %2) %1) '()", "user": "56372798e4b0bfe05bf117d0"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "56252effe4b00a550fc90294"}, {"problem": 23, "code": "(fn rev [l]\n  (if (empty? l) (list)\n  (concat (rev (rest l)) (list (first l)))))", "user": "56393681e4b0bfe05bf117f2"}, {"problem": 23, "code": "#(reduce conj `() %)", "user": "56283825e4b00e49c7cb47e4"}, {"problem": 23, "code": "(fn rev [l]\n  (if (= l [])\n    []\n    (conj (rev (rest l)) (first l))))", "user": "5638f61ce4b0bfe05bf117ed"}, {"problem": 23, "code": "(fn [x] (reduce conj () x))", "user": "56399b7ee4b0bfe05bf117f5"}, {"problem": 23, "code": "(fn [x]\n  (reduce (fn [acc e] (conj acc e)) '() x))", "user": "562d869be4b0a45d2ff8301f"}, {"problem": 23, "code": "sort #(compare %2 %1)", "user": "563a30d7e4b0bfe05bf117f9"}, {"problem": 23, "code": ";#(reduce (fn [a b] (conj a b)) '() %)\nreduce conj '()", "user": "5604ae27e4b0c80df0ca2663"}, {"problem": 23, "code": "(fn inverse [s]\n  (cond\n   (empty? s) []\n   :else (conj (inverse (rest s)) (first s))))", "user": "563b236ce4b0bfe05bf1180b"}, {"problem": 23, "code": "#(reduce (fn [c x] (conj c x)) '() %)", "user": "563b1553e4b0bfe05bf1180a"}, {"problem": 23, "code": "(fn rev [x] (reduce (fn red [y z] (conj y z)) '() x))", "user": "563b559ee4b0bfe05bf1180d"}, {"problem": 23, "code": "#(into [] (reduce (fn [agg src] (conj agg src)) nil %))", "user": "55c13e73e4b01b9910ae2a2f"}, {"problem": 23, "code": "(fn [coll] (reduce conj '() coll))", "user": "563747e9e4b0bfe05bf117d2"}, {"problem": 23, "code": "(fn [x] (loop [cnt (count x) lst '()] (if (zero? cnt) lst (recur (dec cnt) (cons (nth (seq x) (- (count x) cnt)) lst)))))", "user": "56367c51e4b0bfe05bf117cd"}, {"problem": 23, "code": "(fn [s] (reduce (fn [v i] (conj v i)) '() s))", "user": "55fee436e4b00f4cabc57659"}, {"problem": 23, "code": "(fn myrev [myseq] \n (seq (reduce conj () myseq)))", "user": "563b5dc9e4b0bfe05bf1180f"}, {"problem": 23, "code": "#(reduce conj nil %)", "user": "55c49394e4b0e31453f6499e"}, {"problem": 23, "code": "#(->> % (interleave (range)) (partition 2) (sort-by first >) (map second))", "user": "563cf9e5e4b0bfe05bf11844"}, {"problem": 23, "code": "(fn f [s] (if (empty? (rest s)) s (concat (f (rest s)) (list (first s)))))", "user": "563d1802e4b0bfe05bf11847"}, {"problem": 23, "code": "(fn [coll] (reduce conj '() coll))", "user": "563da418e4b0bfe05bf11852"}, {"problem": 23, "code": "reduce conj ()", "user": "53bbae20e4b047364c044509"}, {"problem": 23, "code": ";#(reverse %)\n\n      (fn [coll]\n        (loop [out []\n              in coll]\n            (if (empty? in)\n              out\n              (recur (conj out (last in))\n                     (drop-last in)))))", "user": "5633bb9de4b0bfe05bf117b4"}, {"problem": 23, "code": "(fn [x]\n  (loop [lis x retval '()]\n    (if (= 0 (count lis))\n      retval\n      (recur (rest lis) (conj retval (first lis))))))", "user": "563c48e7e4b0bfe05bf11832"}, {"problem": 23, "code": "(fn [col] \n  ((fn [col rev]\n    (if (empty? col) rev\n      (recur (rest col) (cons (first col) rev))))\n  col [] ))", "user": "563cce5be4b0bfe05bf1183f"}, {"problem": 23, "code": "(fn cock [lst] \n  (if \n    (= 1 (count lst)) lst\n    (cons (last lst) (cock (butlast lst)))))", "user": "563ce002e4b0bfe05bf11841"}, {"problem": 23, "code": "(fn [s] (loop [l s rev nil]\n          (if (empty? l) rev\n          (recur (rest l) (conj rev (first l))))))", "user": "563ddefee4b0bfe05bf11857"}, {"problem": 23, "code": "#(into () %)", "user": "563e7a33e4b0da801c4e466d"}, {"problem": 23, "code": "reduce conj ()", "user": "563e3c43e4b0da801c4e4669"}, {"problem": 23, "code": "(fn [x] (vec (reduce (fn [r i] (conj r i)) () x)))", "user": "563e1c0ee4b0da801c4e4665"}, {"problem": 23, "code": "#((fn f[l acc i]\n  (if (= -1 i)\n    acc\n    (f l (conj acc (nth l i)) (dec i)))) (seq %) [] (- (.length (vec (seq %))) 1))", "user": "563d4600e4b0bfe05bf1184c"}, {"problem": 23, "code": "apply conj '()", "user": "563f2eaae4b08d4f616f5ed1"}, {"problem": 23, "code": "(fn [s] \n  (loop [s s\n         acc (empty s)] \n          (if (empty? s)\n        \tacc\n         \t(recur (rest s) (cons (first s) acc))\n         )\n    )\n)", "user": "563a3cc2e4b0bfe05bf117fa"}, {"problem": 23, "code": "(fn my-reverse\n  [s]\n  (loop [head s\n         result '()]\n    (if (empty? head)\n      result\n      (recur (rest head) (conj result (first head))))))", "user": "563f1493e4b08d4f616f5ecf"}, {"problem": 23, "code": "(fn [y] (reduce (fn [col x] (cons x col)) [] y))", "user": "52179e00e4b0ea2f1c31c8d3"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "563ebc00e4b08d4f616f5eca"}, {"problem": 23, "code": "(fn [col] (reduce conj () col))", "user": "52d68ed2e4b09f7907dd1362"}, {"problem": 23, "code": "#(into () %)", "user": "563c0d4ce4b0bfe05bf11831"}, {"problem": 23, "code": "(fn reverse-seq [num]\n  (into '() num))", "user": "5634995fe4b0bfe05bf117be"}, {"problem": 23, "code": "#(reduce (fn [col x] (conj col x)) '() %)", "user": "564054a9e4b08d4f616f5edf"}, {"problem": 23, "code": "reduce conj '()", "user": "564066dee4b08d4f616f5ee2"}, {"problem": 23, "code": "(fn reverse' [coll]\n  (reduce (fn [accum item]\n            (cons item accum))\n          []\n          coll))", "user": "563fc1f2e4b08d4f616f5ed7"}, {"problem": 23, "code": "(fn my-reverse [li]\n  (if (empty? li)\n    li\n    (conj (my-reverse (drop-last li)) (last li))\n  )\n)", "user": "551c02fbe4b07993ea3788d8"}, {"problem": 23, "code": "(fn[s](sort #(compare %2 %1) s))", "user": "5639e878e4b0bfe05bf117f7"}, {"problem": 23, "code": "reduce conj '()", "user": "563ac0cfe4b0bfe05bf11805"}, {"problem": 23, "code": "reduce conj ()", "user": "563ed73ae4b08d4f616f5ecb"}, {"problem": 23, "code": "(fn [xs] (reduce conj '() xs))", "user": "562c0787e4b058fa18c5a6d3"}, {"problem": 23, "code": "(fn [x] \n  (loop [source x dest []] \n    (if (empty? source) \n      dest \n      (recur (drop-last 1 source) (conj dest (last source))))))", "user": "563e022be4b0da801c4e4664"}, {"problem": 23, "code": "#(loop [coll %       \n       result []]\n  (if (empty? coll)\n    result\n    (recur (rest coll) (cons (first coll) result))))", "user": "55e1cf24e4b050e68259b420"}, {"problem": 23, "code": "#(into () %)", "user": "53c7da9ce4b00fb29b2212ad"}, {"problem": 23, "code": "(fn [s]\n  (reduce conj '() s))", "user": "54fce8bde4b07d26eda61d30"}, {"problem": 23, "code": "reduce conj '()", "user": "563d3fc8e4b0bfe05bf1184b"}, {"problem": 23, "code": "(fn rev [seq]\n  (into '() seq))", "user": "564045a8e4b08d4f616f5edd"}, {"problem": 23, "code": "(fn f [s] (if (first s) (conj (f (rest s)) (first s)) []))", "user": "56416320e4b08d4f616f5efb"}, {"problem": 23, "code": "#(loop [col %1 lst '()]\n   (if (empty? col)\n     lst\n     (recur (rest col) (cons (first col) lst))))", "user": "5600591de4b04bb52996e166"}, {"problem": 23, "code": "(partial reduce conj '())", "user": "5641418fe4b08d4f616f5ef7"}, {"problem": 23, "code": "(fn [coll]\n  (into '() coll))", "user": "56407cdee4b08d4f616f5ee4"}, {"problem": 23, "code": "(fn rvrs [x] (into () (vec x)))", "user": "5641f0ede4b08d4f616f5f11"}, {"problem": 23, "code": "(fn [list]\n    (loop [body (butlast list), tip (last list), rev []]\n      (if (nil? tip)\n        rev\n        (recur (butlast body) (last body) (conj rev tip)))))", "user": "563d1648e4b0bfe05bf11846"}, {"problem": 23, "code": "into ()", "user": "54fe5523e4b07d26eda61d41"}, {"problem": 23, "code": "(fn [l] (reduce conj nil l))", "user": "563b9acbe4b0bfe05bf11827"}, {"problem": 23, "code": "#(reduce (fn [a b] (cons b a)) [] %)", "user": "564127a9e4b08d4f616f5ef3"}, {"problem": 23, "code": "#(into () %)", "user": "54cec2a9e4b018d918be98c1"}, {"problem": 23, "code": "(fn [alist]\n  (loop [nlst (list)\n         olst alist]\n    (if (empty? olst)\n      nlst\n      (recur (conj nlst (first olst))\n        \t   (rest olst)) )))", "user": "5642b939e4b08d4f616f5f1b"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "564302b5e4b08d4f616f5f21"}, {"problem": 23, "code": "#(loop [sq  % \n         acc ()]\n    (if (empty? sq)\n      acc\n      (recur (rest sq) (conj acc (first sq)))))", "user": "563772a9e4b0bfe05bf117d7"}, {"problem": 23, "code": "#(loop [c % r []]\n   (if (empty? c)\n     r\n     (recur (drop-last c) (conj r (last c)))))", "user": "5641686de4b08d4f616f5efc"}, {"problem": 23, "code": "reduce #(conj %1 %2) ()", "user": "56436194e4b0018b46ad8bf2"}, {"problem": 23, "code": "(fn [coll] (loop [s0 coll s1 '()] (if (= 0 (count s0)) s1 (recur (rest s0) (#(conj %1 %2) s1 (first s0))))))", "user": "551e2cade4b030e6a24d00e4"}, {"problem": 23, "code": "reduce conj ()", "user": "564452d1e4b0018b46ad8c0d"}, {"problem": 23, "code": "#(reduce (fn [result input] (conj result input)) () %)", "user": "56444fb1e4b0018b46ad8c0c"}, {"problem": 23, "code": "reduce conj '()", "user": "56449e4de4b0284900eef5f9"}, {"problem": 23, "code": "(fn [col]\n  (loop [items col\n         final ()]\n    (if (empty? items)\n      final\n      (recur (rest items) (cons (first items) final)))))", "user": "50738138e4b054001656acc9"}, {"problem": 23, "code": "(fn [xs]\n  (loop [xs xs\n         ys nil]\n    (if (seq xs)\n      (recur (rest xs)\n             (cons (first xs) ys))\n      ys)))", "user": "5644bf88e4b0284900eef5fc"}, {"problem": 23, "code": "(fn c\n  [arr]\n  (let [x (first arr) tail (rest arr)]\n    (if x\n      (conj (c tail) x)\n      [])))", "user": "56451201e4b0284900eef600"}, {"problem": 23, "code": "(fn reversegue [x] (if (= x nil) '() (conj (reversegue (butlast x)) (last x))))", "user": "56441e72e4b0018b46ad8c09"}, {"problem": 23, "code": "#((fn f [l m] (if (= l '())\n            m\n            (f (rest l) (conj m (first l))))) % '())", "user": "559248c0e4b0604b3f94d58b"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "564502afe4b0284900eef5ff"}, {"problem": 23, "code": "(fn [s]\n  (loop [acc []\n         my-list s]\n    (if (empty? my-list)\n      acc\n      (recur (conj acc (last my-list)) (drop-last my-list)))))", "user": "564583f0e4b0284900eef607"}, {"problem": 23, "code": "#(reduce conj () %1)", "user": "5645a7d6e4b0284900eef608"}, {"problem": 23, "code": "(fn [x]\n    (loop [to-go x result '()]\n       (if (empty? to-go)\n            result\n          (recur (rest to-go) (conj result (first to-go))))))", "user": "56427910e4b08d4f616f5f19"}, {"problem": 23, "code": "#(reduce (fn [result, item] (concat [item] result)) () % )", "user": "564633a1e4b0284900eef60f"}, {"problem": 23, "code": "(fn [c] (loop [l c acc []] (if (empty? l) acc (recur (rest l) (cons (first l) acc)))))", "user": "563249dee4b0bfe05bf1179f"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "56466fb1e4b0284900eef613"}, {"problem": 23, "code": "(fn kebalik [ns] \n  (if (empty? ns)\n    '()\n    (conj (kebalik (butlast ns)) (last ns))))", "user": "5643ba10e4b0018b46ad8bff"}, {"problem": 23, "code": "#(into() %)", "user": "5641854ae4b08d4f616f5efe"}, {"problem": 23, "code": "(fn [x]\n  (loop [finale '() x x]\n    (if (empty? x)\n      finale\n      (recur (cons (first x) finale) (rest x)))))", "user": "55b738cfe4b01b9910ae29a1"}, {"problem": 23, "code": "(fn [col] (reduce conj '() col))", "user": "5646dff3e4b0284900eef615"}, {"problem": 23, "code": "#(into () %)", "user": "56442758e4b0018b46ad8c0a"}, {"problem": 23, "code": "(fn rev [ls]\n  (if\n    (next ls) ;; Is there more than one element?\n    (cons (last ls) (rev (butlast ls)))\n    ls\n    )\n  )", "user": "564716e6e4b0284900eef616"}, {"problem": 23, "code": "(fn [coll]\n\t(loop \n\t\t[premier (last coll) autres (butlast coll) resultat []]\n\t\t(if (nil? premier)\n\t\t\tresultat\n\t\t\t(do\n\t\t\t\t(println premier)\n\t\t\t\t(recur (last autres) (butlast autres) (conj resultat premier))\n\t\t\t)\n\t\t)\n\t)\n)", "user": "56438342e4b0018b46ad8bf4"}, {"problem": 23, "code": "(fn [x] (reduce conj '() x))", "user": "561c57b9e4b064ca9f4b1697"}, {"problem": 23, "code": "#(loop [col % rev []] (if (empty? col) rev (recur (rest col) (cons (first col) rev))))", "user": "52725fa4e4b03e8d9a4a742b"}, {"problem": 23, "code": "reduce conj ()", "user": "5647dc44e4b0284900eef624"}, {"problem": 23, "code": "reduce #(conj % %2) ()", "user": "56441634e4b0018b46ad8c08"}, {"problem": 23, "code": "#(loop [coll %\n        result []]\n  (if (seq coll)\n    (recur (drop-last coll) (conj result (last coll)))\n    result))", "user": "55577fcce4b0deb715856e24"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "55b2505be4b0da326a65cf7d"}, {"problem": 23, "code": "(fn [x] (reduce conj '() x))", "user": "564857c2e4b0284900eef62e"}, {"problem": 23, "code": "(partial reduce conj ())", "user": "56472ff8e4b0284900eef618"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "56488119e4b0284900eef632"}, {"problem": 23, "code": "reduce #(cons %2 %1) []", "user": "56472c77e4b0284900eef617"}, {"problem": 23, "code": "#(loop [coll % rcoll []] (if (empty? coll) rcoll (recur (rest coll) (cons (first coll) rcoll))))", "user": "56487cf2e4b0284900eef631"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "51671557e4b013fc800656c4"}, {"problem": 23, "code": "reduce conj '()", "user": "545a2da7e4b01be26fd74634"}, {"problem": 23, "code": "(fn reayat [n]\n  (loop [n n\n         res []]\n    (cond (empty? n) res\n      :else (recur (vec (seq (rest n))) (vec (seq (cons (first n) res)))))))", "user": "56449c90e4b0284900eef5f8"}, {"problem": 23, "code": "(fn [s] (reduce conj '() s))", "user": "5637557ce4b0bfe05bf117d4"}, {"problem": 23, "code": "(fn rv [ls]\n  (if (nil? ls)\n    '()\n    (conj (rv (butlast ls)) (last ls))))", "user": "5649542fe4b0284900eef63f"}, {"problem": 23, "code": "(fn [col] (sort #(compare %2 %1) col ))", "user": "5649615be4b0284900eef641"}, {"problem": 23, "code": "(fn [orig-lst] \n  (loop [lst orig-lst res '()]\n    (if (empty? lst)\n      res\n      (recur (rest lst) (conj res (first lst))))))", "user": "4ec7e048535d6d7199dd36ea"}, {"problem": 23, "code": "(fn rev [a-seq] ( if (empty? a-seq) \n                  a-seq\n                  (cons (last a-seq) (rev (butlast a-seq)))\n                  ))", "user": "5640803be4b08d4f616f5ee6"}, {"problem": 23, "code": "(fn [s]\n  (loop [s s n '()]\n    (if (empty? s)\n      n\n      (recur (rest s) (conj n (first s))))))", "user": "563d12f9e4b0bfe05bf11845"}, {"problem": 23, "code": ";; This would have been much better. \n\n;; (fn [coll] (reduce conj () coll))\n\n;; Got confused about conj/cons and adding \n;; elements to the front vs behind. \n;; I was sure I tried with (conj) first. Alas.\n\n(fn [coll]\n  (reduce (fn [a b] (cons b a)) [] coll))", "user": "5646276de4b0284900eef60e"}, {"problem": 23, "code": "(fn [s]\n    (loop [l ()\n           s2 s]\n      (if (seq s2)\n        (recur (conj l (first s2)) (rest s2))\n        l)))", "user": "5643a11ee4b0018b46ad8bfb"}, {"problem": 23, "code": "reduce conj ()", "user": "5640b135e4b08d4f616f5ee8"}, {"problem": 23, "code": "(fn rec-rev [coll]\n  (if (empty? coll)\n    []\n    (conj (rec-rev (rest coll)) (first coll))))", "user": "560c3190e4b05f002753df2c"}, {"problem": 23, "code": "#(into [] (reduce conj '() %))", "user": "562a3c6ae4b00e49c7cb481b"}, {"problem": 23, "code": "(fn reverser-fn [coll]\n  (loop [reversed-coll [] items coll]\n    (if (empty? items)\n      reversed-coll\n      (recur (conj reversed-coll (last items)) (take (dec (count items)) items))\n    )))", "user": "564b1ff8e4b0284900eef663"}, {"problem": 23, "code": "#(loop [s % r ()]\n   (if (empty? s)\n     r\n     (recur (rest s) (cons (first s) r))))", "user": "564b3730e4b0284900eef665"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "56351709e4b0bfe05bf117c2"}, {"problem": 23, "code": "apply conj '()", "user": "564348e1e4b08d4f616f5f26"}, {"problem": 23, "code": "(fn [lst]\n  (reduce\n   (fn [rev x]\n     (cons x rev)\n   ) \n   (empty lst) lst)\n  )", "user": "56433d34e4b08d4f616f5f23"}, {"problem": 23, "code": "#(into () %)", "user": "564bbb15e4b0284900eef66d"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "564652b1e4b0284900eef611"}, {"problem": 23, "code": "(fn [coll]\n  (loop [orig coll, rev '()]\n    (if (nil? orig) rev\n      (recur (next orig) (conj rev (first orig)))\n      )))", "user": "564b495de4b0284900eef667"}, {"problem": 23, "code": "(fn[sequence]\n  (map #(get (vec sequence) %) (range (dec (count sequence)) -1 -1)))", "user": "564c7501e4b0284900eef671"}, {"problem": 23, "code": "reduce conj ()", "user": "564ca1b2e4b0284900eef675"}, {"problem": 23, "code": "#(reduce (fn [a b] (cons b a)) [] %)", "user": "564a560ae4b0284900eef654"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "564cc881e4b0284900eef677"}, {"problem": 23, "code": "(fn rev [l] (\n             (fn cp [d, s] (if (empty? s) d\n                             (cp (cons (first s) d) (rest s))))\n             (empty l) l))", "user": "4df9d3b0535d04ed9115e77b"}, {"problem": 23, "code": "(fn [x]\n   (loop [elms x acc '()]\n\t (if (= 0 (count elms))\n\t\tacc\n\t (recur (rest elms) (conj acc (first elms) )))))", "user": "564cc055e4b0284900eef676"}, {"problem": 23, "code": "(fn [s] (apply conj '() (seq s)))", "user": "564d02cde4b0284900eef679"}, {"problem": 23, "code": "(fn [s] (loop [s s n 0 total (count s) ans []]\n          (if (= n total) \n            ans \n            (recur s (inc n) total (into ans (vector (nth (seq s) (- (count s) n 1))))))))", "user": "56483f45e4b0284900eef62b"}, {"problem": 23, "code": "(fn [collection] (reduce #(cons %2 %1) '() collection))", "user": "564e1bbbe4b0284900eef696"}, {"problem": 23, "code": "(fn [x] (reduce conj () x))", "user": "564c8e99e4b0284900eef674"}, {"problem": 23, "code": "#(into () %)", "user": "564d3169e4b0284900eef67c"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "564eef5ee4b0284900eef6a3"}, {"problem": 23, "code": "reduce (fn [cl el] (cons el cl)) []", "user": "564da567e4b0284900eef682"}, {"problem": 23, "code": "(fn [x]\n  (loop [orig x\n         rev []]\n    (if (empty? orig) rev\n        (recur (take (dec (count orig)) orig) (conj rev (last orig))))))", "user": "564f5774e4b0284900eef6ac"}, {"problem": 23, "code": "reduce conj ()", "user": "56504dc2e4b0284900eef6bc"}, {"problem": 23, "code": "(fn [coll]\n  (loop [r (), c coll]\n    (if (empty? c) r (recur (cons (first c) r) (rest c)))))", "user": "4f2d90ece4b0d6649770a05f"}, {"problem": 23, "code": "reduce conj ()", "user": "56448dc1e4b0284900eef5f6"}, {"problem": 23, "code": "(fn [coll]\n  (->> coll\n    (map-indexed vector)\n    (sort-by #(- (first %)))\n    (map second)))", "user": "56508624e4b0284900eef6bf"}, {"problem": 23, "code": "reduce conj ()", "user": "5650b8a0e4b0284900eef6c3"}, {"problem": 23, "code": "reduce conj ()", "user": "52b091b4e4b0c58976d9accc"}, {"problem": 23, "code": "(fn xreverse [s]\n  (reduce #(cons %2 %1) '() s)\n  )", "user": "564ecc9ee4b0284900eef6a1"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "563dfc02e4b0da801c4e4662"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5628e9f4e4b00e49c7cb47f2"}, {"problem": 23, "code": "#(into () %)", "user": "56430277e4b08d4f616f5f20"}, {"problem": 23, "code": "(fn [seq] (reduce conj '() seq))", "user": "54d1f84ae4b0e8a36923e5ec"}, {"problem": 23, "code": "#(reduce (fn [acc, el] (conj acc el)) '() %)", "user": "564faadce4b0284900eef6b2"}, {"problem": 23, "code": "#(loop [in % out '()] (if (empty? in) out (recur (rest in) (conj out (first in)))))", "user": "564f128de4b0284900eef6a4"}, {"problem": 23, "code": "(fn [s] (reduce (fn [x y] (conj x y)) '() s))", "user": "5651de3ee4b0f9d632dd845b"}, {"problem": 23, "code": "#(loop [s % a '()] (if (seq s) (recur (next s) (conj a (first s))) a ))", "user": "56521a26e4b0f9d632dd845f"}, {"problem": 23, "code": "(fn [collection]\n  (loop [coll collection ret []]\n      (if (empty? coll)\n          ret\n          (recur (butlast coll) (conj ret (last coll))))))", "user": "55cd95b4e4b0e31453f64a1e"}, {"problem": 23, "code": "apply conj '()", "user": "55c3c1b0e4b0e31453f6498c"}, {"problem": 23, "code": "reduce #(conj %1 %2) '()", "user": "5642f094e4b08d4f616f5f1f"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "56525c0ee4b0f9d632dd8465"}, {"problem": 23, "code": "(fn [x] (into () (seq x)))", "user": "564d936ee4b0284900eef681"}, {"problem": 23, "code": "(fn [x] (reduce #(cons %2 %1) '() x))", "user": "5652f23ce4b0f9d632dd846b"}, {"problem": 23, "code": "(fn my-reverse [arr]\n  (let [reverse-inner (fn this [arr, accumulator]\n                        (if (= 0 (count arr)) accumulator\n                                              (this (rest arr)\n                                                             (cons (first arr) accumulator))\n                                              )\n                        )\n        ] (reverse-inner arr [])\n    )\n  )", "user": "56530a1ce4b0f9d632dd846c"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "56126d71e4b05f002753df90"}, {"problem": 23, "code": "reduce #(cons %2 %1) (empty identity)", "user": "4fc77f5ae4b0ee37620e1821"}, {"problem": 23, "code": "reduce #(cons %2 %1) []", "user": "565370bce4b0f9d632dd8472"}, {"problem": 23, "code": "into ()", "user": "56537f9be4b0f9d632dd8473"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5652dd89e4b0f9d632dd8469"}, {"problem": 23, "code": "reduce conj '()", "user": "53f5c402e4b0db01ade6f9d4"}, {"problem": 23, "code": "reduce conj '()", "user": "56405959e4b08d4f616f5ee1"}, {"problem": 23, "code": "apply conj ()", "user": "56548885e4b0f9d632dd8483"}, {"problem": 23, "code": "(fn myreverse [x]\n  (if (not (empty? x))\n    (conj (myreverse (rest x)) (first x))\n    []))", "user": "56548fd3e4b0f9d632dd8485"}, {"problem": 23, "code": "into ()", "user": "5654d0e1e4b0f9d632dd848c"}, {"problem": 23, "code": "#(loop[x %, r [], i (count %)]\n   (if (= i 0)\n     r\n     (recur (butlast x) (conj r (last x)) (- i 1))))", "user": "5654e8ade4b0f9d632dd848e"}, {"problem": 23, "code": "#(into () %)", "user": "5654a0fce4b0f9d632dd8486"}, {"problem": 23, "code": "reduce #(cons %2 %1) []", "user": "565540d2e4b0f9d632dd8494"}, {"problem": 23, "code": "#(into () %)", "user": "53d0c3c9e4b00fb29b22130a"}, {"problem": 23, "code": "(fn [coll] (into () coll))", "user": "558159b3e4b05c286339e0f7"}, {"problem": 23, "code": "(fn [xs] \n  (reduce #(conj %1 %2) '() xs))", "user": "56547b51e4b0f9d632dd8481"}, {"problem": 23, "code": "(fn reorder [x]\n    (println x)\n    (if (= 1 (count x))\n      x\n    (conj (reorder (vec (rest x))) (first x))) \n      )", "user": "5654cb2de4b0f9d632dd848b"}, {"problem": 23, "code": "(fn [x]\n  (loop [reverse-list []\n         destruct-list x]\n    (if (not-empty destruct-list)\n    (recur (conj reverse-list (last destruct-list)) (butlast destruct-list))\n    reverse-list)))", "user": "56491d05e4b0284900eef63a"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "56560a21e4b0f9d632dd849c"}, {"problem": 23, "code": "reduce conj ()", "user": "56561119e4b0f9d632dd849d"}, {"problem": 23, "code": "(fn reverse-seq [ls] (if (empty? (rest ls)) (vector (first ls)) (concat (reverse-seq (rest ls)) [(first ls)])) )", "user": "5654e024e4b0f9d632dd848d"}, {"problem": 23, "code": "(fn [xs] (loop [a nil x xs] (if (empty? x) a (recur (cons (first x) a) (rest x)))))", "user": "5632d1b3e4b0bfe05bf117a9"}, {"problem": 23, "code": "#(loop [coll %1, rcoll nil]\n   (if (nil? (first coll))\n      rcoll\n     (recur (rest coll) (conj rcoll (first coll)))))", "user": "5653a3e6e4b0f9d632dd8476"}, {"problem": 23, "code": "(fn rvs[mp]\n(if (next mp)\n  (conj (rvs (rest mp)) (first mp))\n  (conj [] (first mp))))", "user": "564d55bce4b0284900eef67e"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "565791b0e4b0f9d632dd84aa"}, {"problem": 23, "code": "reduce (fn [x y] (cons y x)) []", "user": "564e719ee4b0284900eef69b"}, {"problem": 23, "code": "(fn [a] (reduce #(cons %2 %1) (list (first a)) (rest a)))", "user": "563f24f9e4b08d4f616f5ed0"}, {"problem": 23, "code": "(fn [coll] \n  (reduce conj '() coll))", "user": "56582025e4b0f9d632dd84b1"}, {"problem": 23, "code": "(fn rev [coll]\n  (if (nil? coll)\n    nil\n    (let [h (first coll)\n          t (next coll)\n          rt (rev t)]\n      (into (vec rt) [h]))))", "user": "56557d2de4b0f9d632dd8498"}, {"problem": 23, "code": "(fn rev [coll] \n  (if (empty? coll) []\n  \t(conj (rev (rest coll)) (first coll))\n   )\t\n  )", "user": "56586acae4b0f9d632dd84b4"}, {"problem": 23, "code": "#(reduce (fn [r e] (conj r e)) '() %)", "user": "5658acabe4b0f9d632dd84b7"}, {"problem": 23, "code": "#(into () %)", "user": "56532ff4e4b0f9d632dd846e"}, {"problem": 23, "code": "#(letfn [(rev [col]\n                                          (cons (last col) (lazy-seq\n                                                            (let [the-rest (butlast col)]\n                                                              (if (not (empty? the-rest))\n                                                                (rev the-rest))))))]\n                                  (rev %))", "user": "5658c357e4b00d3155796111"}, {"problem": 23, "code": "(fn [x] (loop [a x b []] (if (= a []) b (recur (rest a) (cons (first a) b)))))", "user": "5657fc1ae4b0f9d632dd84ad"}, {"problem": 23, "code": "#( (fn myreverse [coll res] (if (empty? coll) () (cons (last coll) (myreverse (butlast coll) res)))) %1 [])", "user": "5658d775e4b00d3155796114"}, {"problem": 23, "code": "reduce conj '()", "user": "56041d21e4b0c80df0ca2656"}, {"problem": 23, "code": "reduce #(conj %1 %2) '()", "user": "55a03d7de4b0acc240e314f4"}, {"problem": 23, "code": "reduce conj ()", "user": "5658eaa0e4b00d3155796115"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "565953a8e4b068f2fe63dbea"}, {"problem": 23, "code": "#(into () %)", "user": "56588f4ee4b0f9d632dd84b6"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5659ce78e4b068f2fe63dbf0"}, {"problem": 23, "code": "(fn [s]\n   (reduce (fn [a b] (concat [b] a)) [] s))", "user": "565233f2e4b0f9d632dd8461"}, {"problem": 23, "code": "(fn [coll]\n         (loop [new-seq '() \n                coll coll]\n           (if (nil? (first coll))\n             new-seq\n             (recur (cons (first coll) new-seq) (rest coll)))))", "user": "55507a1ae4b00713264bd9a7"}, {"problem": 23, "code": "(fn rev ([s] (if (= nil s) nil (rev (butlast s) [(last s)])))([s x] (if\n(= nil s) x (rev (butlast s) (conj x (last s))))))", "user": "5658c25fe4b00d3155796110"}, {"problem": 23, "code": "#(reduce (fn [a b] (concat [b] a)) [] %)", "user": "4f6de600e4b07046d9f4efd1"}, {"problem": 23, "code": "(fn [sq]\n  (reduce #(cons %2 %) (empty sq) sq))", "user": "565a3e25e4b068f2fe63dbfb"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "56497a73e4b0284900eef642"}, {"problem": 23, "code": "reduce conj ()", "user": "5659a77ce4b068f2fe63dbee"}, {"problem": 23, "code": "reduce (fn [x y] (cons y x)) []", "user": "50e896a5e4b0ebbe794eb7eb"}, {"problem": 23, "code": "#(into () %)", "user": "565a38e9e4b068f2fe63dbf9"}, {"problem": 23, "code": "#(reduce (fn [acc x]\n           (cons x acc))\n         (empty %) %)", "user": "565a280be4b068f2fe63dbf7"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5649d538e4b0284900eef647"}, {"problem": 23, "code": "(fn r [s]\n  (if (empty? s)\n    s\n    (cons (last s) (r (drop-last s)))))", "user": "560ff7d9e4b05f002753df67"}, {"problem": 23, "code": "(fn my-reverse [s] \n  (reduce (fn [acc item] (conj acc item)) \n          () \n          s))", "user": "565b818ce4b068f2fe63dc05"}, {"problem": 23, "code": "reduce #(cons %2 %) []", "user": "544285dde4b032a45b869380"}, {"problem": 23, "code": "#(reduce into (map list %))", "user": "56598476e4b068f2fe63dbec"}, {"problem": 23, "code": "(partial reduce #(conj %1 %2) '())", "user": "55dd7f72e4b050e68259b3c4"}, {"problem": 23, "code": "#(reduce (fn [x y] (conj x y)) '() %)", "user": "565c89b1e4b068f2fe63dc15"}, {"problem": 23, "code": "(fn [coll]\n  (reduce (fn [l r] (conj l r)) (list) coll))", "user": "565b941ce4b068f2fe63dc07"}, {"problem": 23, "code": "#((fn [acc rmn] (if (empty? acc) rmn (recur (rest acc) (cons (first acc) rmn)))) % [])", "user": "5659679ae4b068f2fe63dbeb"}, {"problem": 23, "code": "reduce conj '()", "user": "564f84f4e4b0284900eef6b0"}, {"problem": 23, "code": "sort-by #(if (number? %) % (first %)) >", "user": "55aa67eae4b0988bba2ad94c"}, {"problem": 23, "code": "into ()", "user": "565560ace4b0f9d632dd8496"}, {"problem": 23, "code": "#(loop [l []\n        e %]\n   (if (empty? e)\n     l\n     (recur (cons (first e) l) (rest e))))", "user": "55ff562fe4b00f4cabc57660"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "55344b75e4b09218d5f44f99"}, {"problem": 23, "code": "apply conj nil", "user": "5393185ae4b0b51d73faaeb7"}, {"problem": 23, "code": "#(reduce (fn [x y] (conj x y)) `() %)", "user": "565c8052e4b068f2fe63dc14"}, {"problem": 23, "code": "(fn [s] (loop [a s r (vec nil)] (if (empty? a) r (recur (butlast a) (conj r (last a))))))", "user": "565dcec9e4b068f2fe63dc29"}, {"problem": 23, "code": "(fn [coll]\n  (loop [stack coll\n         reversed-stack []]\n    (if (empty? stack)\n      reversed-stack\n      (recur (rest stack) (into [(first stack)] reversed-stack)))))", "user": "562c2fc2e4b058fa18c5a6d7"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "565dddfae4b068f2fe63dc2b"}, {"problem": 23, "code": "(fn reversed\n  [coll]\n  (let [fst (first coll)\n         rst (rest coll)]\n    (if (empty? rst)\n      (seq [fst])\n      (concat (reversed rst) (seq [fst])))))", "user": "565d8dcfe4b068f2fe63dc26"}, {"problem": 23, "code": "(fn [origlist]\n  (loop [list origlist rev '()]\n    (if (= list '())\n      rev\n      (recur (rest list) (cons (first list) rev)))))", "user": "565eb771e4b068f2fe63dc36"}, {"problem": 23, "code": "(fn f [l]\n  (if (empty? l)\n    []\n    (conj (f (rest l)) (first l))))", "user": "565e0934e4b068f2fe63dc30"}, {"problem": 23, "code": "(fn myrev [xs]\n  (apply conj '() (seq xs)))", "user": "565ee190e4b068f2fe63dc38"}, {"problem": 23, "code": "(fn[x](into() x))", "user": "56452e17e4b0284900eef602"}, {"problem": 23, "code": "reduce conj ()", "user": "565c3f15e4b068f2fe63dc0c"}, {"problem": 23, "code": "(fn [arg1]\n(cond\n(and (= arg1 [1 2 3 4 5])) [5 4 3 2 1]\n(and (= arg1 (sorted-set 5 7 2 7))) (quote (7 5 2))\n(and (= arg1 [[1 2] [3 4] [5 6]])) [[5 6] [3 4] [1 2]]\n))", "user": "565f2461e4b068f2fe63dc3b"}, {"problem": 23, "code": "(fn [x] (reduce #(cons %2 %1) [] x))", "user": "565f525ce4b068f2fe63dc3e"}, {"problem": 23, "code": "#(loop [l %, r '()]\n   (if (nil? l)\n     r\n     (recur (next l) (conj r (first l)))))", "user": "565f9aece4b068f2fe63dc42"}, {"problem": 23, "code": "#(into () %)", "user": "565fad48e4b068f2fe63dc43"}, {"problem": 23, "code": "#(into () %)", "user": "55024f3ae4b07d26eda61d87"}, {"problem": 23, "code": "(fn my-reverse [s]\r\n  (if (empty? s)\r\n    []\r\n    (conj (my-reverse (rest s)) (first s))))", "user": "56602649e4b068f2fe63dc47"}, {"problem": 23, "code": "into '()", "user": "55278187e4b0ffed3738f92d"}, {"problem": 23, "code": "reduce #(cons %2 %1) []", "user": "56603e5fe4b068f2fe63dc4a"}, {"problem": 23, "code": "#(into () %)", "user": "56605ddbe4b068f2fe63dc4c"}, {"problem": 23, "code": "(fn my-reverse\n  ([ls out]\n  (if (= (count ls) 0)\n    out\n    (my-reverse (rest ls) (conj out (first ls)))))\n  ([ls] (my-reverse ls '())))", "user": "56607bbfe4b068f2fe63dc58"}, {"problem": 23, "code": "(fn [sq]\n  (loop [sqc sq, acc '()]\n    (if (empty? sqc)\n      acc\n      (recur (rest sqc) (conj acc (first sqc))))))", "user": "566096bee4b068f2fe63dc59"}, {"problem": 23, "code": "(fn [x] (reduce conj () x))", "user": "5661292fe4b068f2fe63dc63"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "565faf46e4b068f2fe63dc44"}, {"problem": 23, "code": "into ()", "user": "530e9bd6e4b08068f379ecbe"}, {"problem": 23, "code": "; #(reduce (fn [rv e] (conj rv e)) () %)\n(fn my-rev [sq] \n  (loop [rv () s sq]\n     (if (empty? s)\n       rv\n       (recur (cons (first s) rv) (rest s)))))", "user": "5661e09ae4b068f2fe63dc70"}, {"problem": 23, "code": "reduce conj '()", "user": "559ff9eee4b0acc240e314ee"}, {"problem": 23, "code": "(fn test\n  [a] \n  (reduce conj '() a)\n )", "user": "56620138e4b068f2fe63dc71"}, {"problem": 23, "code": "#(loop [l % remain (count %) new '()]\n   (if (> remain 0)\n     (recur (rest l) (dec remain) (conj new (first l)))\n     new))", "user": "5662a5eee4b0e91d5f5c564b"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5662d47fe4b0e91d5f5c564d"}, {"problem": 23, "code": "reduce conj ()", "user": "56627acde4b0e91d5f5c5648"}, {"problem": 23, "code": "#(into () %)", "user": "5662ca50e4b0e91d5f5c564c"}, {"problem": 23, "code": "(fn [coll] (into () coll))", "user": "565fe434e4b068f2fe63dc45"}, {"problem": 23, "code": "#(reduce (fn [x y] (cons y x)) [] %)", "user": "566470b9e4b0e91d5f5c5658"}, {"problem": 23, "code": "(fn \n  [x]\n  (loop [x x\n         res ()]\n    (if (empty? x)\n      res\n      (recur (rest x) (cons (first x) res))\n    )\n   )\n )", "user": "5650ac8be4b0284900eef6c2"}, {"problem": 23, "code": "(fn [x] (reduce conj '() x))", "user": "5656e039e4b0f9d632dd84a3"}, {"problem": 23, "code": "(fn [avs]\n  (loop [mavs (sort (set avs))\n         result []]\n    (if (empty? mavs)\n      (seq result)\n      (recur (drop-last mavs)\n             (conj result (last mavs))))))", "user": "5646bb8fe4b0284900eef614"}, {"problem": 23, "code": "(fn [coll]\n  (reduce #(cons %2 %1) [] coll))", "user": "5169d422e4b051e2a73aba53"}, {"problem": 23, "code": "#(into () %)", "user": "563afd5ae4b0bfe05bf11809"}, {"problem": 23, "code": "reduce #(cons %2 %1) nil", "user": "5666500ee4b0e91d5f5c566d"}, {"problem": 23, "code": "(fn [arg1]\n(cond\n(and (= arg1 [1 2 3 4 5])) [5 4 3 2 1]\n(and (= arg1 (sorted-set 5 7 2 7))) (quote (7 5 2))\n(and (= arg1 [[1 2] [3 4] [5 6]])) [[5 6] [3 4] [1 2]]\n))", "user": "5666bf34e4b04acd4f672dc2"}, {"problem": 23, "code": "(fn [a] (loop [a a\n               b '()]\n          (if (empty? a) b\n            (recur (rest a) (cons (first a) b)))))", "user": "56671a4de4b04acd4f672dca"}, {"problem": 23, "code": "into ()", "user": "566734c4e4b04acd4f672dcc"}, {"problem": 23, "code": "(fn [collection]\n  (loop\n    [coll collection\n     rvscoll ()]\n    (if (empty? coll)\n      rvscoll\n      (recur (rest coll)(conj rvscoll (first coll))))))", "user": "56618424e4b068f2fe63dc67"}, {"problem": 23, "code": "reduce conj '()", "user": "56662275e4b0e91d5f5c566a"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "566733d6e4b04acd4f672dcb"}, {"problem": 23, "code": "reduce conj '()", "user": "56677192e4b04acd4f672dd5"}, {"problem": 23, "code": "(fn [rs s] (if (= (count s) 0) rs (recur (cons (first s) rs) (rest s)))) []", "user": "56671996e4b04acd4f672dc9"}, {"problem": 23, "code": "sort (fn [x y] (pos? (compare x y)))", "user": "5666c2dbe4b04acd4f672dc3"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5667fb28e4b04acd4f672dde"}, {"problem": 23, "code": "#(loop [coll %\n        acc '()]\n   (if (empty? coll)\n     acc\n     (recur (rest coll) (conj acc (first coll)))))", "user": "56685a73e4b04acd4f672de5"}, {"problem": 23, "code": "(fn rv [xs]\n  (reduce (fn [i d] (concat [d] i))[] xs)\n  )", "user": "56686edce4b04acd4f672dea"}, {"problem": 23, "code": "(fn [coll] (reduce conj '() coll))", "user": "56689103e4b04acd4f672df0"}, {"problem": 23, "code": "#(loop [new '() old %]\n   (if (empty? old)\n   new\n   (recur (conj new (first old)) (rest old))))", "user": "566899f4e4b04acd4f672df4"}, {"problem": 23, "code": "#(into '() %)", "user": "56688cd5e4b04acd4f672def"}, {"problem": 23, "code": "#(into () %)", "user": "565b2fa5e4b068f2fe63dbfe"}, {"problem": 23, "code": "into ()", "user": "566639f4e4b0e91d5f5c566b"}, {"problem": 23, "code": "(fn [lat]\n  (into '() lat))", "user": "566888e4e4b04acd4f672ded"}, {"problem": 23, "code": "reduce (fn [r n] (cons n r)) []", "user": "53f52215e4b0db01ade6f9cc"}, {"problem": 23, "code": "(fn rev [s] (if (empty? s) [] (conj (rev (rest s)) (first s))))", "user": "5669dcd9e4b04acd4f672e01"}, {"problem": 23, "code": "(fn [xs] (into () xs))", "user": "5668dcc6e4b04acd4f672df8"}, {"problem": 23, "code": "#(loop [x %1\n        y ()]\n   (if (empty? x) y (recur (rest x) (cons (first x) y ))))", "user": "566a3a26e4b0a866af689699"}, {"problem": 23, "code": "(fn [s]\n  (loop [s s result '()]\n    (if (nil? (first s))\n      result\n      (recur (next s) (conj result (first s))))))", "user": "566a6e38e4b0a866af68969b"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "54c6ad6ae4b045293a27f62f"}, {"problem": 23, "code": "#(reduce (fn [x y] (conj x y)) '() %)", "user": "55ddcc52e4b050e68259b3d2"}, {"problem": 23, "code": "(fn [s]\n  (reduce #(conj %1 %2) '() s)\n  )", "user": "549ffeade4b0f3d1d8e70fb2"}, {"problem": 23, "code": "reduce conj '()", "user": "5661b0a9e4b068f2fe63dc6f"}, {"problem": 23, "code": "(fn [xs] (last ((fn [xs] (let [rs (atom ())] (map (fn [x] (swap! rs conj x)) xs))) xs)))", "user": "5667d635e4b04acd4f672ddb"}, {"problem": 23, "code": "#(into () %)", "user": "5668aad0e4b04acd4f672df5"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "566b2cb1e4b0a866af6896aa"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5669eb9ae4b04acd4f672e02"}, {"problem": 23, "code": "#(into () %)", "user": "566b7a77e4b0a866af6896af"}, {"problem": 23, "code": "#(reduce (fn [n i] (conj n i)) '() %)", "user": "566b5c14e4b0a866af6896ae"}, {"problem": 23, "code": "#(into () %)", "user": "56658570e4b0e91d5f5c565f"}, {"problem": 23, "code": "#(reduce (fn [reversed next] (concat [next] reversed)) () %)", "user": "566cf904e4b0a866af6896c5"}, {"problem": 23, "code": "#(loop [ret [], curr %]\n                 (if (= (count curr) 0)\n                ret\n                (recur (conj ret (last curr)) (butlast curr))))", "user": "566cd399e4b0a866af6896c3"}, {"problem": 23, "code": "(fn my-reverse [aseq]\n  (loop [result [] coll (seq aseq)]\n    (if (nil? (last coll)) result\n      (recur (conj result (last coll)) (drop-last coll)))))", "user": "566e5e8de4b0a866af6896d9"}, {"problem": 23, "code": "(fn [x] (loop [l x res ()]\n          (if (seq l)\n            (recur (rest l) (conj res (first l)))\n            res)))", "user": "566bd453e4b0a866af6896b7"}, {"problem": 23, "code": "into ()", "user": "566064cae4b068f2fe63dc50"}, {"problem": 23, "code": "reduce #(conj % %2) '()", "user": "566fa059e4b0a866af6896ea"}, {"problem": 23, "code": "(fn rev [xs]\n  (when xs\n    (cons (last xs) (rev (butlast xs)))))", "user": "56540485e4b0f9d632dd847a"}, {"problem": 23, "code": "(fn recur-reverse [l]\n  (if (empty? l)\n  []\n  (conj (recur-reverse (rest l)) (first l))))", "user": "566c728be4b0a866af6896bc"}, {"problem": 23, "code": "(fn [y]\n  ((fn f [[x & xs]]\n     (if (nil? xs)\n       [x]\n       (into (f xs) [x])))\n   (seq y)))", "user": "56483562e4b0284900eef629"}, {"problem": 23, "code": "(fn [coll] \n  (loop [coll coll reversed '()] \n    (if (empty? coll) \n      reversed \n      (recur (rest coll) (conj reversed (first coll))))))", "user": "56708d8ce4b0a866af6896f6"}, {"problem": 23, "code": "(fn my-reverse [coll]\n  (let [[x & x-r] (lazy-seq coll)]\n    (loop [x-n (list x) x-r x-r]\n      (if (empty? x-r)\n        x-n\n        (let [[y-1 & y-r] x-r]\n          (recur (cons y-1 x-n) y-r))))))", "user": "56714922e4b05957ce8c6107"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "55c5b55fe4b0e31453f649b5"}, {"problem": 23, "code": "(fn [coll]\n  (loop [idx 0\n         c (vec coll)]\n    (let [cnt (count coll)\n          r-idx (dec (- cnt idx))]\n    (if (> idx (/ cnt 2))\n      c\n      (recur (inc idx)\n             (assoc c idx (nth c r-idx) r-idx (nth c idx)))))))", "user": "51441ce7e4b0b4fb4ace5f41"}, {"problem": 23, "code": "(fn [xs]\n (->>\n  xs\n  (map-indexed\n    #(vector(- %1)%2))\n  (into (sorted-map))\n  vals))", "user": "566dd178e4b0a866af6896d1"}, {"problem": 23, "code": "(fn [xss] \n  (loop [xs xss\n         acc []]\n    (if-not (seq xs)\n      acc\n      (recur (rest xs) \n             (cons (first xs) \n                   acc)))))", "user": "5671ccb5e4b05957ce8c610d"}, {"problem": 23, "code": "(fn [l]\n   (letfn [(rev [lst str]\n             (if (nil? (first lst))\n               str\n               (rev (rest lst) (conj str (first lst)))))             ]\n     (rev l '())))", "user": "5670ef43e4b0a866af6896fc"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5672f58fe4b05957ce8c611a"}, {"problem": 23, "code": "(fn \n ([coll]\n  (loop [rev '() c coll] \n    (if (zero? (count c))\n      rev \n      (recur\n         (cons (first c) rev)\n         (drop 1 c))\n      )\n    )))", "user": "56689295e4b04acd4f672df1"}, {"problem": 23, "code": "into ()", "user": "5673c886e4b05957ce8c6123"}, {"problem": 23, "code": "(fn [data]\n      (reduce conj () data))", "user": "5640eb50e4b08d4f616f5eec"}, {"problem": 23, "code": "(fn [s]\n  (loop [acc []\n         r s]\n    (if (empty? r) acc\n      (recur (cons  (first r) acc) (rest r)))))", "user": "56742817e4b05957ce8c612d"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5674477ce4b05957ce8c6134"}, {"problem": 23, "code": "(fn [x]\n  (loop [in x out nil]\n    (if (empty? in) out (recur (rest in) (cons (first in) out)))))", "user": "564a5a09e4b0284900eef656"}, {"problem": 23, "code": "#(into () %)", "user": "567478fbe4b05957ce8c613a"}, {"problem": 23, "code": "#(reduce (fn [a b] (cons b a)) '() %)", "user": "56748b2ce4b05957ce8c613d"}, {"problem": 23, "code": "(fn my-reverse [lst]\n  (loop [xs (seq lst)\n         result '()]\n    (if-let [x (first xs)]\n      (recur (rest xs) (conj result x))\n      result)))", "user": "566b57e9e4b0a866af6896ad"}, {"problem": 23, "code": "#(into () %)", "user": "566e5a03e4b0a866af6896d8"}, {"problem": 23, "code": "reduce conj ()", "user": "56669819e4b0e91d5f5c5674"}, {"problem": 23, "code": "into ()", "user": "567447a2e4b05957ce8c6135"}, {"problem": 23, "code": "(fn rev-seq [ss]\n  ((fn rv-inner [h t]\n    (if (> (count h) 0)\n      (do (println h)\n          (rv-inner (butlast h) (conj t (last h))))\n      t)) ss []))", "user": "5674f874e4b05957ce8c6144"}, {"problem": 23, "code": "apply conj '()", "user": "56754c4be4b05957ce8c6149"}, {"problem": 23, "code": "#(reduce (fn [a s] (conj a s)) '() %)", "user": "5675a817e4b05957ce8c614a"}, {"problem": 23, "code": "into ()", "user": "55e8a2b4e4b0121d4835fd97"}, {"problem": 23, "code": "(fn [sequ] (reduce #(cons %2 %1) [] sequ))", "user": "567476bde4b05957ce8c6139"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "565da79be4b068f2fe63dc28"}, {"problem": 23, "code": "(fn [s] (loop [acum [] s s]\n          (cond\n             (empty? s) acum\n             :else (recur (conj acum (last s)) (butlast s)))))", "user": "55efb51ee4b066087aa9453b"}, {"problem": 23, "code": "(fn rv [ls] (if (empty? ls) [] (conj (rv (rest ls)) (first ls)) ))", "user": "5675f2f4e4b05957ce8c6153"}, {"problem": 23, "code": "#(loop [k % l []] (if (empty? k) l (recur (rest k) (cons (first k) l))))", "user": "5547b72be4b0a04f79299550"}, {"problem": 23, "code": "(fn rev [xs]\n  (if (seq xs)\n    (concat (rev (rest xs)) (list (first xs)))\n    '()))", "user": "56761ab1e4b05957ce8c6154"}, {"problem": 23, "code": "reduce (fn [a x] (cons x a)) []", "user": "566669d8e4b0e91d5f5c566f"}, {"problem": 23, "code": "#(loop [_first (first %) _rest (rest %) result []]                                                                                                                                                                                                   \n                    (if (nil? _first)                                                                                                                                                                                                                                \n                        result                                                                                                                                                                                                                                       \n                        (recur (first _rest) (rest _rest) (cons _first result))                                                                                                                                                                                      \n                    )                                                                                                                                                                                                                                                \n                )", "user": "56667178e4b0e91d5f5c5671"}, {"problem": 23, "code": "#(into () %)", "user": "55e81430e4b0121d4835fd88"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "56765beae4b05957ce8c6156"}, {"problem": 23, "code": "(fn [coll]\n  (loop [xs coll\n         res []]\n    (let [item (first xs)\n          tail (rest xs)] \n      (if-not (nil? item)\n        (recur tail (cons item res))\n        res))))", "user": "5675cdf1e4b05957ce8c614d"}, {"problem": 23, "code": "(fn [col]\n  (reduce #(conj %1 %2) nil col))", "user": "56732c84e4b05957ce8c611c"}, {"problem": 23, "code": "(fn [xs] ((fn [xs1 xs2] (if (nil? (first xs1)) xs2 (recur (rest xs1) (cons (first xs1) xs2)))) xs []))", "user": "5673998ce4b05957ce8c6121"}, {"problem": 23, "code": "reduce (fn [acc val] (conj acc val)) '()", "user": "5676cdf9e4b05957ce8c615b"}, {"problem": 23, "code": "(fn [coll]\n  (let [f (fn [lst rev]\n            (if (empty? lst)\n                rev\n                (recur (rest lst) (conj rev (first lst)))))]\n    (f coll '())))", "user": "567695c2e4b05957ce8c6157"}, {"problem": 23, "code": "apply conj ()", "user": "56771b31e4b05957ce8c6163"}, {"problem": 23, "code": "into ()", "user": "56706f01e4b0a866af6896f2"}, {"problem": 23, "code": "reduce conj ()", "user": "567798afe4b05957ce8c6169"}, {"problem": 23, "code": "(fn [coll] (reduce conj '() coll))", "user": "55b66ebce4b01b9910ae2996"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5676af21e4b05957ce8c6158"}, {"problem": 23, "code": "#(map (fn [x] (nth (seq %) (- (count %) x 1))) (range (count %)))", "user": "5677f5dee4b05957ce8c616e"}, {"problem": 23, "code": "into '()", "user": "563a79e5e4b0bfe05bf117fe"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "56781ab6e4b05957ce8c6171"}, {"problem": 23, "code": "(fn r[arr] (concat\n           (take-last 1 arr)\n           (if (< 1 (count arr)) (r\n            (take (- (count arr) 1) arr)))))", "user": "5677f9ffe4b05957ce8c616f"}, {"problem": 23, "code": "#(into '() %)", "user": "567952b3e4b05957ce8c6185"}, {"problem": 23, "code": "reduce conj '()", "user": "52860baae4b0239c8a67ae09"}, {"problem": 23, "code": "(fn [coll] (reduce (fn [accum x] (cons x accum)) [] coll))", "user": "567874f3e4b05957ce8c617c"}, {"problem": 23, "code": "#(loop [col % rcol '()]\n   (if (empty? col)\n     rcol\n     (recur (rest col) (conj rcol (first col)))))", "user": "56795deae4b05957ce8c6187"}, {"problem": 23, "code": "reduce conj ()", "user": "56798d83e4b05957ce8c618b"}, {"problem": 23, "code": "(fn\n  [coll]\n  (reduce conj () coll))", "user": "566f7749e4b0a866af6896e9"}, {"problem": 23, "code": "#(map (vec %) (range (- (count (vec %)) 1) -1 -1))", "user": "566caad9e4b0a866af6896c0"}, {"problem": 23, "code": "#(reduce (fn [acc x] (concat [x] acc)) [] %)", "user": "567af6e2e4b05957ce8c61a0"}, {"problem": 23, "code": "reduce conj ()", "user": "56781f16e4b05957ce8c6173"}, {"problem": 23, "code": "(fn [l] (reduce #(conj %1 %2) nil l))", "user": "567b39b6e4b05957ce8c61a3"}, {"problem": 23, "code": "(fn [l]\n  (into '() l)\n )", "user": "567b62fce4b05957ce8c61a6"}, {"problem": 23, "code": "#(reduce conj ()  %)", "user": "54aa2462e4b09f271ff37cb4"}, {"problem": 23, "code": "#(into () %)", "user": "5427b477e4b01498b1a71b27"}, {"problem": 23, "code": "(fn [s]\n  (loop [s s\n         r []]\n    (if (empty? s)\n      r\n      (recur (rest s) (cons (first s) r)))))", "user": "55a9fe1ce4b0988bba2ad947"}, {"problem": 23, "code": "(fn [coll]\n  (loop [result '()\n        left-coll coll]\n    (if (empty? left-coll)\n      result\n      (recur (conj result (first left-coll)) (rest left-coll)))))", "user": "567b4641e4b05957ce8c61a5"}, {"problem": 23, "code": "(fn [s]\n         (loop [ss s n (count s) rs '()]\n           (if (= 0 n)\n             rs\n             (recur (rest ss) (dec n) (conj rs (first ss))))))", "user": "5679a4d0e4b05957ce8c618d"}, {"problem": 23, "code": "apply conj '()", "user": "567c63f6e4b05957ce8c61bb"}, {"problem": 23, "code": "#(into () %)", "user": "567c7fefe4b05957ce8c61bc"}, {"problem": 23, "code": "(fn [xlist]\n  (loop [list xlist result []]\n    (if (= (count list) 0)\n      result\n      (recur (drop-last list) (conj result (last list))))))", "user": "567b903be4b05957ce8c61a8"}, {"problem": 23, "code": "reduce #(cons %2 %1) nil", "user": "508f4343e4b0ea685a20f767"}, {"problem": 23, "code": "(fn [coll] (into '() coll))", "user": "567c2322e4b05957ce8c61af"}, {"problem": 23, "code": "(fn rev [s] (if (empty? s) s (conj (rev (butlast s)) (last s))))", "user": "55293c48e4b0ffed3738f946"}, {"problem": 23, "code": "reduce #(conj %1 %2) '()", "user": "567cef8ce4b05957ce8c61c1"}, {"problem": 23, "code": "(fn [list]\n  (reduce conj () list))", "user": "52ff7424e4b0d8b024fd3708"}, {"problem": 23, "code": "reduce conj ()", "user": "567d132ee4b05957ce8c61c3"}, {"problem": 23, "code": "(fn [li]\n  (letfn [(move [li1, li2]\n    (if (= (count li2) 0)\n      li1\n      (move (cons (first li2) li1) (rest li2))))]\n  \t(move [] li)))", "user": "566812f0e4b04acd4f672de1"}, {"problem": 23, "code": "(fn [coll] (vec (into () coll)))", "user": "567d18c9e4b05957ce8c61c4"}, {"problem": 23, "code": "(fn rev [list]\n  (loop [remain list new-list '()]\n    (if (empty? remain)\n      new-list\n      (recur (rest remain) (conj new-list (first remain)))\n      )\n    )\n  )", "user": "567e418fe4b0feffd0d18eb1"}, {"problem": 23, "code": "#(into '() %)", "user": "567931e9e4b05957ce8c6184"}, {"problem": 23, "code": "reduce #(cons %2 %1) []", "user": "567a680ee4b05957ce8c6198"}, {"problem": 23, "code": "(fn rev [s]\n  (if (empty? (rest s))\n    s\n    (conj (rev (butlast s)) (last s))))", "user": "567debb5e4b05957ce8c61ce"}, {"problem": 23, "code": "(fn rr [coll] (map #(nth %1 1) (sort #(> (first %1) (first %2)) (map-indexed list coll))))", "user": "567ea95de4b0feffd0d18eb6"}, {"problem": 23, "code": "(fn [s] \n  (loop [s s n '()]\n    (if (first s)\n      (recur (rest s) (conj n (first s)))\n      n)))", "user": "5647ffdae4b0284900eef626"}, {"problem": 23, "code": "#(loop [s %\n        r '()\n       ]\n  (if (seq s)\n\t(recur (rest s) (conj r (first s)))\n    r\n  )\n)", "user": "567b9ff7e4b05957ce8c61a9"}, {"problem": 23, "code": "(fn [seq']\n  (loop [xs seq'\n         result []]\n    (let [head (first xs)\n          tail (rest xs)]\n      (if (empty? tail)\n        (conj result head)\n        (recur tail (cons head result))))))", "user": "567bf820e4b05957ce8c61ad"}, {"problem": 23, "code": "#(reduce (fn [reversed-list value] (cons value reversed-list)) [] %)", "user": "4f4fc570e4b03ad3f0c10cea"}, {"problem": 23, "code": "#(reduce (fn [acc n] (cons n acc)) () %)", "user": "5151a2c4e4b03e678e393ad1"}, {"problem": 23, "code": "reduce #(conj %1 %2) (list)", "user": "56747b46e4b05957ce8c613b"}, {"problem": 23, "code": "(fn [lst]\n  (loop [rev []\n         rem lst]\n    (if (empty? rem)\n      rev\n      (recur (cons (first rem) rev) (rest rem))\n      )\n    )\n  )", "user": "56804d03e4b0966858e4d8ec"}, {"problem": 23, "code": "(fn [coll]\n  (loop [t-coll [] coll coll]\n    (if (= coll nil)\n      t-coll\n      (recur (concat (vector (first coll)) t-coll)\n             (next coll)))))", "user": "567ea403e4b0feffd0d18eb5"}, {"problem": 23, "code": "#(into () %)", "user": "567d70b6e4b05957ce8c61c8"}, {"problem": 23, "code": "reduce conj ()", "user": "565fe49ee4b068f2fe63dc46"}, {"problem": 23, "code": "reduce (fn [acc x] (conj acc x)) nil", "user": "567ffd69e4b0966858e4d8e7"}, {"problem": 23, "code": "(fn rev [seq] (if (empty? seq) '() (concat (rev (rest seq)) [(first seq)])))", "user": "56800ba1e4b0966858e4d8e8"}, {"problem": 23, "code": "(fn [x] (loop [data x rev_data nil]\n          (if-not (first data)\n            rev_data\n            (recur (drop 1 data) (conj rev_data (first data))))))", "user": "567f034be4b0feffd0d18eba"}, {"problem": 23, "code": "(fn rev-seq [lat]\n  (into '() lat))", "user": "567ae5e1e4b05957ce8c619e"}, {"problem": 23, "code": "(fn tmp [a-seq]\n  (if (first a-seq)\n    (concat (tmp (rest a-seq)) [(first a-seq)] )\n    '()))", "user": "5680104ae4b0966858e4d8ea"}, {"problem": 23, "code": "(fn rev [seq]\n  (if (empty? seq)\n    []\n    (conj (rev (rest seq)) (first seq))))", "user": "5681afaae4b0945ebc182a87"}, {"problem": 23, "code": "reduce conj ()", "user": "55cfd041e4b0e31453f64a33"}, {"problem": 23, "code": "(fn [x]\n  (loop [res []\n         left x]\n    (println left)\n    (if (empty? left)\n      res\n      (recur (conj res (last left)) (butlast left)))))", "user": "56646a7fe4b0e91d5f5c5657"}, {"problem": 23, "code": "#(into () %)", "user": "5681009ae4b0966858e4d8f7"}, {"problem": 23, "code": "(partial reduce conj '())", "user": "5665fca4e4b0e91d5f5c5667"}, {"problem": 23, "code": "#(loop [in % out (empty %)]\n   (if (empty? in)\n     out\n     (recur (next in) (cons (first in) out))\n   )\n)", "user": "56814cbce4b0945ebc182a81"}, {"problem": 23, "code": "(fn myrev\n  ([coll revcoll]\n   (if (empty? coll)\n     revcoll\n     (myrev (rest coll) (conj revcoll (first coll)))))\n  ([coll]\n   (myrev coll '())))", "user": "56822f37e4b0945ebc182a8d"}, {"problem": 23, "code": "reduce conj ()", "user": "555c38d9e4b0b056612e2249"}, {"problem": 23, "code": "#(apply (partial conj ()) %)", "user": "568227fee4b0945ebc182a8a"}, {"problem": 23, "code": "(fn f [coll] \n  (if (empty? coll) coll \n    (concat \n     (f (rest coll)) \n     [(first coll)]\n     )\n    )\n  )", "user": "5680fff3e4b0966858e4d8f6"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "52658b29e4b03e8d9a4a710c"}, {"problem": 23, "code": "(fn [col]\n  (reduce conj () col))", "user": "567abc97e4b05957ce8c619d"}, {"problem": 23, "code": "(fn [xs]\n  (loop [s xs\n         acc '()]\n    (if (not (next s))\n      (cons (first s) acc)\n      (recur (next s) (cons (first s) acc)))))", "user": "5682d5b4e4b0945ebc182a95"}, {"problem": 23, "code": "#(into () %)", "user": "55cbd29be4b0e31453f64a0a"}, {"problem": 23, "code": "(fn [xs]\n  (reduce (fn [m x] (conj m x)) (list) xs))", "user": "5681fe64e4b0945ebc182a88"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "56810479e4b0966858e4d8f8"}, {"problem": 23, "code": "#(loop [x % r []] \n   (if (empty? x)\n   \t r\n     (recur (rest x) (cons (first x) r))))", "user": "56815e2fe4b0945ebc182a84"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5683f51de4b0945ebc182aa6"}, {"problem": 23, "code": "#(reduce (fn [reversed-seq first-element] (conj reversed-seq first-element))\n         '()\n         %)", "user": "5683fc85e4b0945ebc182aa7"}, {"problem": 23, "code": "(fn reverse-seqn [seqn]\n  (reduce conj () seqn))", "user": "5683e0c6e4b0945ebc182aa3"}, {"problem": 23, "code": "(fn recursive-reverse [coll]\n    (if (empty? coll)\n        []\n        (conj (recursive-reverse (rest coll)) (first coll) )))", "user": "56844e4be4b062072dfb8acb"}, {"problem": 23, "code": "#(let [x (into () %)] (if (vector? %) (vec x) x))", "user": "55664bb5e4b0c656e3ff1833"}, {"problem": 23, "code": "apply conj '()", "user": "568242bfe4b0945ebc182a8f"}, {"problem": 23, "code": "(fn my-reverse [l]\n      (if (= 2 (count l))\n\t  (list (second l) (first l))\n          (concat (my-reverse (rest l)) (list (first l)))\n      )\n)", "user": "568513c4e4b04eec3ec5cfc5"}, {"problem": 23, "code": "#(loop [coll %1 out '[]]\n    (if (empty? coll)\n      (seq out)\n      (recur (butlast coll)(conj out (last coll)))))", "user": "5684e200e4b04eec3ec5cfc4"}, {"problem": 23, "code": "into ()", "user": "546a6fd8e4b00cfc9eacc158"}, {"problem": 23, "code": "reduce (fn [a _] (conj a _)) ()", "user": "56629e86e4b0e91d5f5c564a"}, {"problem": 23, "code": "(fn [seq]\n  (loop [seq seq acc ()]\n    (if (empty? seq)\n      acc\n      (recur (rest seq) (conj acc (first seq))))))", "user": "5685e9fde4b04eec3ec5cfd1"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5686640ae4b0dcc4269f4050"}, {"problem": 23, "code": "#(into () %)", "user": "566efb2be4b0a866af6896e2"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "5686b7c7e4b0dcc4269f4057"}, {"problem": 23, "code": "(fn [seq]\n   (loop\n    [s seq\n     acc '()]\n    (if (empty? (rest s))\n      (conj acc (first s))\n      (recur (rest s)\n              (conj acc\n                    (first s))\n      )\n     )\n    )\n  )", "user": "56416212e4b08d4f616f5efa"}, {"problem": 23, "code": "(fn rev[x]\n  (if\n    (empty? (rest x))\n    (vector (first x))\n    (conj (rev (rest x)) (first x))\n    ))", "user": "56874171e4b0dcc4269f405c"}, {"problem": 23, "code": "(fn [coll]\n  (loop [col coll output '()]\n    (if (nil? (first col))\n      output\n      (recur (rest col) (conj output (first col))))))", "user": "56877fcbe4b0dcc4269f405e"}, {"problem": 23, "code": "(fn [r v]\n  (if (> (count v) 0)\n    (recur (conj r (last v)) (take (dec (count v)) v))\n    r)) []", "user": "564dc062e4b0284900eef68c"}, {"problem": 23, "code": "(fn inv [a-seq]\n  (if (or (empty? a-seq) \n          (empty? (rest a-seq) ))  \n    a-seq\n    (conj (vec (inv (rest a-seq)))\n          (first a-seq))))", "user": "56795625e4b05957ce8c6186"}, {"problem": 23, "code": "(fn f [x] (if (= [] x) nil (concat (f (rest x)) [(first x)] )))", "user": "5686e652e4b0dcc4269f4059"}, {"problem": 23, "code": "#(into() %)", "user": "5687e398e4b0dcc4269f4062"}, {"problem": 23, "code": "(fn [m]\n  (loop [a m b []]\n    (if (empty? a)\n      b\n      (recur (rest a) (cons (first a) b)))))", "user": "5683d2a9e4b0945ebc182aa0"}, {"problem": 23, "code": "(fn reverseN [s] (if (empty? s) s (concat (reverseN (rest s)) (list (first s)))))", "user": "568820e8e4b0dcc4269f4067"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "545bc5a8e4b01be26fd74658"}, {"problem": 23, "code": "reduce (comp conj) '()", "user": "5688a147e4b0dcc4269f406e"}, {"problem": 23, "code": "(fn my-reverse [x]\n  (letfn [(reverse-helper [a b]\n                          (if (empty? a)\n                            b\n                            (recur (rest a) (cons (first a) b))))]\n    (reverse-helper x [])))", "user": "5688a01be4b0dcc4269f406d"}, {"problem": 23, "code": "(fn my-reverse [seq]\n  (reduce (fn [acc next] (conj acc next)) '() seq))", "user": "56889672e4b0dcc4269f406c"}, {"problem": 23, "code": "#(into () %)", "user": "536d24ece4b0fc7073fd6e54"}, {"problem": 23, "code": "into ()", "user": "5687fe58e4b0dcc4269f4065"}, {"problem": 23, "code": "#(reduce conj '() %1)", "user": "5683eaa0e4b0945ebc182aa4"}, {"problem": 23, "code": "(fn [coll] (loop [coll coll rvcoll []]\n             (if (empty? coll) rvcoll\n               (recur (butlast coll) (conj rvcoll (last coll))))))", "user": "56885c32e4b0dcc4269f4068"}, {"problem": 23, "code": "(fn [coll]\n  (reduce conj () coll))", "user": "55ee7977e4b0121d4835fdee"}, {"problem": 23, "code": "(fn ! [inp] (if (= [] inp) (list) (conj (! (drop-last inp)) (last inp))))", "user": "56066e82e4b08b23635d3173"}, {"problem": 23, "code": "reduce conj nil", "user": "56897739e4b0dcc4269f407d"}, {"problem": 23, "code": "reduce #(cons %2 %1) []", "user": "55a2ef1ae4b0acc240e3152d"}, {"problem": 23, "code": "#(reduce (fn [x y] (conj x y)) '() %)", "user": "5689911be4b0dcc4269f407f"}, {"problem": 23, "code": "(fn [coll] (reduce #(cons %2 %1) [] coll))", "user": "56481722e4b0284900eef628"}, {"problem": 23, "code": "(fn reverse-seq [xs]\n  (reduce conj '() xs))", "user": "5689fd03e4b0dcc4269f4088"}, {"problem": 23, "code": "(fn n [s]\n  (if (empty? s)\n    s\n  \t(let [f (first s)\n        r (rest s)]\n      (concat (n r) [f]))))", "user": "568a743ee4b0dcc4269f408e"}, {"problem": 23, "code": "(fn foo \n  ([plist] \n   \t(foo plist (list))\n   )\n  ([plist reversed] \n   (if (not-empty plist)\n     (foo (rest plist) (conj reversed (first plist)))\n     reversed\n   )\n  )\n)", "user": "566df171e4b0a866af6896d2"}, {"problem": 23, "code": "reduce conj ()", "user": "4f9123e1e4b0dcca54ed6c97"}, {"problem": 23, "code": "(fn [s]\n  (loop [in s out '()]\n    (if (empty? in)\n      out\n      (recur (rest in) (conj out (first in))))\n  )\n)", "user": "567257d7e4b05957ce8c6110"}, {"problem": 23, "code": "#(loop [lst (into [] %) rlst []]\n\t       (if (empty? lst)\n    \t     rlst\n        \t (recur (pop lst) (conj rlst (peek lst)))))", "user": "5688d6a8e4b0dcc4269f4071"}, {"problem": 23, "code": "reduce conj '()", "user": "568b781be4b0dcc4269f40a5"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "567c48e6e4b05957ce8c61b8"}, {"problem": 23, "code": "(fn  [seq]\n  (loop [new-seq ()\n         old-seq (vec seq)\n         ]\n    (if (= (count old-seq) (count new-seq))\n      new-seq\n      (recur (conj new-seq (get old-seq (count new-seq))) old-seq)\n      )\n    ))", "user": "5640fb97e4b08d4f616f5eef"}, {"problem": 23, "code": "(fn [xs]\n  (loop [rev '()\n         processed xs]\n    (if (empty? processed)\n      rev\n      (recur (cons (first processed) rev) (rest processed)))))", "user": "55dbc7cde4b050e68259b3a4"}, {"problem": 23, "code": "(fn rev [l]\n   (cond\n    (empty? l) '()\n    :otherwise (conj (vec (rev (rest l))) (first l))\n   )\n )", "user": "568b0142e4b0dcc4269f40a0"}, {"problem": 23, "code": "(fn [xs]\n  (reduce\n   (fn [rev-xs x]\n     (cons x rev-xs))\n   '()\n   xs))", "user": "568c4bc8e4b0dcc4269f40b2"}, {"problem": 23, "code": "reduce conj '()", "user": "4ddf597a535d08e6dec9fddf"}, {"problem": 23, "code": "reduce conj ()", "user": "568cdedce4b0dcc4269f40bb"}, {"problem": 23, "code": "(partial\n (fn [res coll]\n   (if (empty? coll)\n     res\n     (recur (cons(first coll) res)\n            (rest coll)))) \n [])", "user": "568d2ca5e4b0dcc4269f40c0"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "56784adbe4b05957ce8c6176"}, {"problem": 23, "code": "#(let [s (seq %)] (for [i (range (count s))] (nth s (- (dec (count s)) i))))", "user": "568d4742e4b0dcc4269f40c2"}, {"problem": 23, "code": "(fn [xs] (loop [ys (empty xs) zs xs]\n    (if (empty? zs)\n      ys\n      (recur (concat (conj (empty zs) (first zs)) ys) (rest zs))\n    )))", "user": "568c2d96e4b0dcc4269f40af"}, {"problem": 23, "code": "reduce #(conj %1 %2) '()", "user": "568c74d8e4b0dcc4269f40b5"}, {"problem": 23, "code": "(fn [v]\n  (loop [in v out []]\n    (if (empty? in)\n      out\n    (recur (butlast in) (conj out (last in))))))", "user": "51be00cae4b0ff155d51d2b8"}, {"problem": 23, "code": "(fn [sqnc]\n  (loop [orig sqnc\n         new (empty sqnc)]\n    (if (empty? orig)\n      new\n      (recur (rest orig) (cons (first orig) new)))))", "user": "566f3e18e4b0a866af6896e7"}, {"problem": 23, "code": "reduce conj '()", "user": "568d99e3e4b0dcc4269f40c8"}, {"problem": 23, "code": "#(sort (fn [a b] (- (compare a b))) %)", "user": "568c92c6e4b0dcc4269f40b8"}, {"problem": 23, "code": "(fn [coll] (loop [coll coll reversed '()] (if (= coll '()) reversed (recur (rest coll) (cons (first coll) reversed)))))", "user": "568bb02de4b0dcc4269f40a8"}, {"problem": 23, "code": "(partial reduce #(conj %1 %2) nil)", "user": "52e5f810e4b09f7907dd1468"}, {"problem": 23, "code": "#(into () %)", "user": "566b5150e4b0a866af6896ac"}, {"problem": 23, "code": "reduce conj ()", "user": "55f85b93e4b03cbcff9738ae"}, {"problem": 23, "code": "into ()", "user": "568e450fe4b0dcc4269f40d0"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "568eae43e4b0dcc4269f40d9"}, {"problem": 23, "code": "(fn [s] ( reduce conj () s ))", "user": "56791447e4b05957ce8c6183"}, {"problem": 23, "code": "(fn [x]\n  ((fn my-rev [x acc]\n     (if (empty? x)\n       acc\n       (my-rev (next x) (conj acc (first x)))))\n    x '()))", "user": "568f0db0e4b0dcc4269f40dd"}, {"problem": 23, "code": "(fn my-reverse [lst]\n  (if (empty? lst)\n      []\n      (conj (my-reverse (rest lst)) (first lst))))", "user": "568e1871e4b0dcc4269f40cc"}, {"problem": 23, "code": "#(loop [c [] s %] (if (empty? s) c (recur (cons (first s) c) (rest s))))", "user": "56743413e4b05957ce8c612e"}, {"problem": 23, "code": "(fn [coll] (reduce conj '() coll))", "user": "562fbf87e4b0ab312c17ebdb"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "56902dfae4b0dcc4269f40ea"}, {"problem": 23, "code": "reduce conj '()", "user": "5552780ce4b0deb715856df4"}, {"problem": 23, "code": "(fn cntfn [s] (reduce conj '() s))", "user": "566b8946e4b0a866af6896b0"}, {"problem": 23, "code": "reduce (fn [a b] (cons b a)) ()", "user": "56912f93e4b0dcc4269f40ef"}, {"problem": 23, "code": "(fn [x] (reduce conj () x))", "user": "5673881fe4b05957ce8c6120"}, {"problem": 23, "code": "reduce conj ()", "user": "4ff8487be4b0678c553fc397"}, {"problem": 23, "code": "(fn [arg]\n    (into '() arg))", "user": "5691ef12e4b0dcc4269f40f8"}, {"problem": 23, "code": "(fn [s]\n  (reduce #(cons %2 %1) (empty s) s))", "user": "54e6762be4b024c67c0cf809"}, {"problem": 23, "code": "reduce conj ()", "user": "5002c798e4b0678c553fc42d"}, {"problem": 23, "code": "#(loop [s %, r '()]\n\t(if (empty? s)\n\tr\n\t(recur (rest s) (conj r (first s)))))", "user": "568cea39e4b0dcc4269f40bc"}, {"problem": 23, "code": "(fn [coll] (loop [coll coll acc '()] (if (empty? coll) acc (recur (rest coll) (conj acc (first coll))))))", "user": "4e268c6e535deb9a81d77ef4"}, {"problem": 23, "code": "(fn \n  [lst]\n  (reduce (fn [x a] (conj x a)) '() lst))", "user": "5693383fe4b0dcc4269f4100"}, {"problem": 23, "code": "reduce conj ()", "user": "569381a5e4b0dcc4269f4104"}, {"problem": 23, "code": "(fn [x] \n  (loop [r '(), l x] \n    (if (empty? l)\n      r\n      (recur (conj r (first l)) (rest l))\n      )\n  ) \t\n  )", "user": "568d381ee4b0dcc4269f40c1"}, {"problem": 23, "code": "into ()", "user": "52e1c276e4b09f7907dd142b"}, {"problem": 23, "code": "into ()", "user": "5694a50fe4b0dcc4269f4121"}, {"problem": 23, "code": "reduce conj ()", "user": "5130c26fe4b08c712d3fae3a"}, {"problem": 23, "code": "reduce conj ()", "user": "56879ea4e4b0dcc4269f405f"}, {"problem": 23, "code": "#(into () %)", "user": "5673f804e4b05957ce8c6126"}, {"problem": 23, "code": "#(into () %)", "user": "5694eeb1e4b0dcc4269f4124"}, {"problem": 23, "code": "(fn [l]\n  (loop [o l r '()]\n    (if (pos? (count o))\n      (recur (rest o) (cons (first o) r))\n      r)))", "user": "54a80855e4b09f271ff37c9e"}, {"problem": 23, "code": "(fn [nums]\n  (loop [reversed '()\n         others nums]\n    (if (seq others)\n      (recur (conj reversed (first others)) (rest others))\n      reversed)))", "user": "56175cf9e4b06b1bb2182a0f"}, {"problem": 23, "code": "reduce (fn [a b] (concat [b] a)) []", "user": "5695b589e4b0dcc4269f412a"}, {"problem": 23, "code": "#(into () %)", "user": "558826fee4b059ccff29b1ef"}, {"problem": 23, "code": "reduce (fn [x y] (conj x y)) ()", "user": "56949fc5e4b0dcc4269f4120"}, {"problem": 23, "code": "(fn me [xs] (if (next xs) (conj (me (next xs)) (first xs)) [(first xs)]))", "user": "56946d43e4b0dcc4269f411e"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "56962e91e4b0dcc4269f412f"}, {"problem": 23, "code": "(partial reduce (fn [a b] (cons b a)) '())", "user": "56967bc0e4b0dcc4269f4131"}, {"problem": 23, "code": "(fn [lst] (reduce conj '() lst))", "user": "5694290fe4b0dcc4269f4110"}, {"problem": 23, "code": "(fn [coll]\n  (reduce\n   (fn [c n]\n     (conj c n))\n   '()\n   coll\n   ))", "user": "5696ed98e4b0dcc4269f4137"}, {"problem": 23, "code": "reduce conj ()", "user": "5657fed1e4b0f9d632dd84ae"}, {"problem": 23, "code": "(fn [l]\n  (loop [in l out '()]\n    (if (empty? in)\n      out\n      (recur (rest in) (conj out (first in))))))", "user": "56972819e4b0e0b3d3318caa"}, {"problem": 23, "code": "#(into () %)", "user": "568bde71e4b0dcc4269f40ab"}, {"problem": 23, "code": "#(into () %)", "user": "569783bde4b0e0b3d3318cab"}, {"problem": 23, "code": "(fn [x]\n  (loop [l x acc '()]\n    (if (empty? l)\n      acc\n      (recur (rest l) (conj acc (first l)))\n    )\n  )\n )", "user": "56979bb7e4b0e0b3d3318cac"}, {"problem": 23, "code": "#(reduce conj '() %1)", "user": "56193c6ee4b053970a773af2"}, {"problem": 23, "code": "reduce conj '()", "user": "5591cc56e4b0604b3f94d582"}, {"problem": 23, "code": "(fn [x] ((fn [f r] (  if (empty? r)  f (recur (cons (first r) f) (rest r)))) [] x))", "user": "569951e4e4b0542e1f8d143e"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "569a29e1e4b0542e1f8d1444"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "569a60c7e4b0542e1f8d1445"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "569ac9a7e4b0542e1f8d144c"}, {"problem": 23, "code": "(fn [x] (reduce conj '() x))", "user": "56992162e4b0542e1f8d143c"}, {"problem": 23, "code": "(fn [x] (reduce #(conj %1 %2) '() x))", "user": "569ad037e4b0542e1f8d144f"}, {"problem": 23, "code": "#(loop [l % out '()] \n   (if (empty? l)\n     out\n     (recur (rest l) (conj out (first l)))))", "user": "569b84f8e4b0542e1f8d1453"}, {"problem": 23, "code": "reduce (fn [k v] (cons v k)) []", "user": "569adec2e4b0542e1f8d1450"}, {"problem": 23, "code": "#(into () %)", "user": "569aca1ee4b0542e1f8d144d"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "569c07b9e4b0542e1f8d145d"}, {"problem": 23, "code": "reduce conj ()", "user": "569c40cee4b0542e1f8d1462"}, {"problem": 23, "code": "#(into () %)", "user": "56990b68e4b0542e1f8d143a"}, {"problem": 23, "code": "(fn\n       [in]\n       (cond\n         \n         (= (class in) (class [1])) (into [] (into '() in))\n         :else (into '() (into [] in))\n       ))", "user": "5683b67ce4b0945ebc182a9f"}, {"problem": 23, "code": "reduce (fn [result, input] (conj result input)) '()", "user": "56899934e4b0dcc4269f4080"}, {"problem": 23, "code": "reduce conj ()", "user": "569b4ff7e4b0542e1f8d1451"}, {"problem": 23, "code": "reduce #(cons %2 %) '()", "user": "569da949e4b0542e1f8d147e"}, {"problem": 23, "code": "(fn [s]\n  (loop [s s\n         r '()]\n    (if (empty? s)\n      r\n      (recur (rest s) (cons (first s) r)))))", "user": "569b885de4b0542e1f8d1455"}, {"problem": 23, "code": "(fn [coll]\n     (loop [[head & tail] (seq coll)\n          result '()]\n     (if (empty? tail)\n       (conj result head) \n       (recur tail (conj result head)))))", "user": "55a31e3fe4b0acc240e31531"}, {"problem": 23, "code": "(fn reverse-seq [coll]\n  (when-let [elem (first coll)]\n    (concat (reverse-seq (rest coll)) [elem])))", "user": "5693a53ee4b0dcc4269f4106"}, {"problem": 23, "code": "reduce (fn [a b]  (into [] (cons b a ))) []", "user": "5692e1dfe4b0dcc4269f40ff"}, {"problem": 23, "code": "(fn [x](map last (sort-by first > (map-indexed (fn [idx itm] [idx itm]) x) )))", "user": "55c2367ee4b0e31453f64978"}, {"problem": 23, "code": "(fn [c]\t\n  (reduce (fn [acc n] (cons n acc)) '() c))", "user": "56936547e4b0dcc4269f4101"}, {"problem": 23, "code": "(fn [seq] (reduce #(cons %2 %1) [] seq))", "user": "562d15a6e4b0a45d2ff83019"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "569ed6a8e4b0542e1f8d1489"}, {"problem": 23, "code": "reduce #(conj % %2) '()", "user": "569ed695e4b0542e1f8d1488"}, {"problem": 23, "code": "#(reduce (fn [acc a] (cons a acc)) '() %1)", "user": "56824e1be4b0945ebc182a91"}, {"problem": 23, "code": "(fn toll [l]\n  (if\n    (= (count l) 1)\n    l\n    (conj (toll (into [] (rest l))) (first l))\n    )\n  )", "user": "569f8736e4b0542e1f8d1495"}, {"problem": 23, "code": "; recursive solution, must output as vector for conj trick to work?\n(fn recursereverse [sqn] (if (= 0 (count sqn)) [] (conj (recursereverse (rest sqn)) (first sqn))))", "user": "569f99cce4b0542e1f8d1497"}, {"problem": 23, "code": "reduce conj ()", "user": "55bf785ee4b01b9910ae2a14"}, {"problem": 23, "code": "reduce conj ()", "user": "569f33c7e4b0542e1f8d148f"}, {"problem": 23, "code": "reduce conj ()", "user": "50c385a8e4b00e537d00254d"}, {"problem": 23, "code": "into ()", "user": "569e2551e4b0542e1f8d1483"}, {"problem": 23, "code": "reduce (fn [a b] (conj a b)) '()", "user": "569fe597e4b0542e1f8d149b"}, {"problem": 23, "code": "(fn [coll]\n  (let [reversed (reduce conj '() coll)]\n    (if (or (list? coll) (not (sequential? coll)))\n      reversed\n      (into (empty coll) reversed))))", "user": "56a0a85fe4b0542e1f8d14a5"}, {"problem": 23, "code": "(fn [coll]\n  (reduce conj () coll))", "user": "5297dcc5e4b02ebb4ef75047"}, {"problem": 23, "code": "#(loop [items % results '()] (if (empty? items) results (recur (rest items) (conj results (first items)))))", "user": "569ef93de4b0542e1f8d148b"}, {"problem": 23, "code": "(fn rev\n  [seq]\n  (if (empty? seq)\n    seq\n    (apply conj '() seq)))", "user": "569bda8ee4b0542e1f8d145a"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "56a0ac99e4b0542e1f8d14a6"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "56a1b854e4b0542e1f8d14b2"}, {"problem": 23, "code": "#(into () %)", "user": "569ce6fee4b0542e1f8d146c"}, {"problem": 23, "code": "#(into () %)", "user": "568fecc6e4b0dcc4269f40e6"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "559e38b2e4b08a52bd4f97d2"}, {"problem": 23, "code": "(fn [l]\n  (loop [arg l ret '()]\n    (if (empty? arg)\n      ret\n      (recur (rest arg) (conj ret (first arg))))))", "user": "56a1227fe4b0542e1f8d14ac"}, {"problem": 23, "code": "(fn [m] (loop [r [] v m]\n           (if (empty? v)\n              r\n              (recur (conj r (last v)) (drop-last v)))))", "user": "569ff6dbe4b0542e1f8d149c"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "56a28726e4b0542e1f8d14c2"}, {"problem": 23, "code": "(fn [sq] (reduce #(conj %1 %2) '() sq))", "user": "56903cb9e4b0dcc4269f40eb"}, {"problem": 23, "code": "(fn [coll]\n  (loop [coll coll rev '()]\n     (if (empty? coll)\n       rev\n       (recur (rest coll) (conj rev (first coll))))))", "user": "5167e8ace4b0c5a4140a309a"}, {"problem": 23, "code": "(fn [xs] (reduce conj '() xs))", "user": "569f491de4b0542e1f8d1490"}, {"problem": 23, "code": "(fn mrseq [sq]\n  (if (= 1 (count sq))\n    sq\n    (concat (mrseq (rest sq)) [(first sq)])\n  )\n)", "user": "56a2777be4b0542e1f8d14bf"}, {"problem": 23, "code": "(fn [sqn]\n  (loop [sqn sqn output []]\n    (if (empty? sqn)\n      output\n      (recur (rest sqn) (cons (first sqn) output)))))", "user": "5689bd04e4b0dcc4269f4082"}, {"problem": 23, "code": "#(into () %)", "user": "56869344e4b0dcc4269f4053"}, {"problem": 23, "code": "#(reduce (fn [accum, x] (conj accum x)) '() %)", "user": "56a38a4ce4b0542e1f8d14cc"}, {"problem": 23, "code": "(fn [items]\n  (loop [loop_items items acc '()]\n    (if (empty? loop_items)\n      acc\n      (recur (rest loop_items) (conj acc (first loop_items)))\n      )\n    )\n  )", "user": "56826c2fe4b0945ebc182a92"}, {"problem": 23, "code": "(fn [ x ]\n  \n  (into '() x)\n  \n  );END: fn", "user": "56a358d0e4b0542e1f8d14c9"}, {"problem": 23, "code": "(fn [x]\n (loop [s x v (empty x)]\n \t  (if (empty? s)\n    \t v \n\t     (recur (rest s)\n                (cons (first s) v)))))", "user": "56012cd7e4b04bb52996e17d"}, {"problem": 23, "code": "(fn [coll]\n  (loop [acc (list)\n         remaining coll]\n    (if (empty? remaining)\n      acc\n      (recur (conj acc (first remaining)) (rest remaining)))))", "user": "51a7bf26e4b0da5f497bde8c"}, {"problem": 23, "code": "(fn rp [s]\n  (if (> (count s) 0)\n    (concat [(last s)] (rp (butlast s)))\n    s))", "user": "56a51f26e4b0542e1f8d14e0"}, {"problem": 23, "code": "into '()", "user": "565f8fd2e4b068f2fe63dc41"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5695e96ae4b0dcc4269f412c"}, {"problem": 23, "code": "(fn [coll]\n  (into () coll))\n  ;(loop[[x & xs] coll\n  ;      acc ()]\n  ;\t(if (nil? x)\n  ;    acc \n  ;    (recur\n  ;     xs\n  ;     (cons x acc)))))", "user": "56a45fcee4b0542e1f8d14dc"}, {"problem": 23, "code": "(fn [x] \n  (loop [l [],c x ]\n    (if (empty? c) \n      l\n      (recur (conj l (last c)) (take (dec (count c)) c)))))", "user": "56a6051fe4b0542e1f8d14e5"}, {"problem": 23, "code": "#(loop [ret () x %] (if (empty? x) ret (recur (conj ret (first x)) (rest x))))", "user": "56887bcbe4b0dcc4269f406a"}, {"problem": 23, "code": "reduce (fn [x xs] (conj x xs)) ()", "user": "55e20451e4b050e68259b428"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "553b0d95e4b09218d5f44fff"}, {"problem": 23, "code": "reduce conj '()", "user": "56a4ec0ee4b0542e1f8d14dd"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "56a72c0de4b0542e1f8d14f7"}, {"problem": 23, "code": "(fn [coll]\n  (loop [coll coll, acc []]\n    (if (empty? coll)\n      acc\n      (recur (next coll)\n             (cons (first coll) acc)))))", "user": "55d1ec3ee4b0e31453f64a4c"}, {"problem": 23, "code": "(fn [coll]\n    (->> coll (into '())))", "user": "56a79eb0e4b07966d5a8a05d"}, {"problem": 23, "code": "(fn r [l] (if (empty? l) l (concat (r (rest l)) (list (first l)))))", "user": "56a75810e4b0542e1f8d14fc"}, {"problem": 23, "code": "(fn [coll]\n  (loop [todo coll coll '()]\n    (if-let [h (first todo)]\n      (recur (rest todo) (conj coll h))\n      coll)))", "user": "56a76f36e4b07966d5a8a05b"}, {"problem": 23, "code": "reduce conj ()", "user": "56a7d7afe4b07966d5a8a065"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "56a09fc3e4b0542e1f8d14a4"}, {"problem": 23, "code": "(fn\n  [coll]\n  (loop [store '()\n         items coll]\n    (if (> (count items) 0)\n      (recur (conj store (first items)) (rest items))\n      store)))", "user": "56a79421e4b07966d5a8a05c"}, {"problem": 23, "code": "(fn [coll]\n  (reduce\n   (fn [rcoll value]\n     (conj rcoll value))\n   '()\n   coll\n   ))", "user": "565d6d34e4b068f2fe63dc23"}, {"problem": 23, "code": "#(loop [coll %\n         acc  (empty coll)]\n        (if (empty? coll)\n            acc\n            (recur (rest coll) (cons (first coll) acc))))", "user": "56165702e4b06b1bb2182a02"}, {"problem": 23, "code": "(fn [li]\n    (#(if (empty? %1) %2 (recur (rest %1) (into [(first %1)] %2)))\n      li []))", "user": "56503470e4b0284900eef6ba"}, {"problem": 23, "code": "(fn [coll] \n  (reduce into '()\n    (map list coll)))", "user": "5243233fe4b076204b44faac"}, {"problem": 23, "code": "(fn [l] (reduce (fn [p n] (concat [n] p)) [] l))", "user": "56a946bbe4b07966d5a8a075"}, {"problem": 23, "code": "(fn i \n \n  ([from to]\n  \t(if (empty? from)\n    \tto\n    \t(i (rest from) (conj to (first from)))))\n  ([from]\n   (i from '())))", "user": "56aa448ce4b07966d5a8a083"}, {"problem": 23, "code": "#(loop [res [] dat %]\n      (if (empty? dat)\n        res\n        (recur (conj res (last dat)) (drop-last dat))))", "user": "5638d2d1e4b0bfe05bf117eb"}, {"problem": 23, "code": "#(loop [coll % result '()] (if (empty? coll) result (recur (rest coll) (conj result (first coll)))))", "user": "56a69451e4b0542e1f8d14ec"}, {"problem": 23, "code": "(fn my-reverse [c]\n  (loop [c c acc '()]\n    (if (seq c) (recur (rest c) (conj acc (first c))) acc)))", "user": "569ab3e2e4b0542e1f8d144a"}, {"problem": 23, "code": "#(into () %)", "user": "56aad332e4b03c432f187337"}, {"problem": 23, "code": "(fn [a-coll] (reduce #(conj %1 %2) '() a-coll))", "user": "5688e403e4b0dcc4269f4072"}, {"problem": 23, "code": "(fn [seq] \n   (reduce (fn [reversed-seq first-element] (conj reversed-seq first-element)) '() seq))", "user": "55c0f842e4b01b9910ae2a2b"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "56a7ef10e4b07966d5a8a067"}, {"problem": 23, "code": "(fn [d] (reduce #(conj %1 %2) '() d))", "user": "55f9b2b6e4b03cbcff9738c8"}, {"problem": 23, "code": "(fn rv [s]\n  (reduce conj () s))", "user": "4fd9cc7ee4b05e33b9224f3a"}, {"problem": 23, "code": "into ()", "user": "56ac81ace4b03c432f187347"}, {"problem": 23, "code": "(fn r [l]\n  (if (empty? l)\n    l\n    (concat (r (rest l)) (list (first l)))))", "user": "56acca9ae4b03c432f18734c"}, {"problem": 23, "code": "(fn rev [coll]\n  (loop [[r & more :as all] (seq coll)\n         acc '()]\n    (if all\n      (recur more (cons r acc))\n      acc)))", "user": "56acc4b9e4b03c432f18734b"}, {"problem": 23, "code": "into ()", "user": "56aca340e4b03c432f187349"}, {"problem": 23, "code": "sort #(compare %2 %1)", "user": "563cdfdfe4b0bfe05bf11840"}, {"problem": 23, "code": "(fn [seq & tot]\n  (let [x (first seq) xs (rest seq) total (or tot [])]\n    (if (not-empty xs)\n      (recur xs (cons x total))\n      (cons x total))))", "user": "55fc838be4b0f488688e0674"}, {"problem": 23, "code": "(fn [theseq] (reduce conj () theseq))", "user": "569db01de4b0542e1f8d147f"}, {"problem": 23, "code": "#(into () %)", "user": "56a9f5c4e4b07966d5a8a07d"}, {"problem": 23, "code": "(fn f [v]\n  (loop [v v\n         acc []]\n    (if (empty? v)\n      acc\n      (recur (rest v) (cons (first v) acc)))))", "user": "55fbc657e4b0f488688e0666"}, {"problem": 23, "code": "#(reduce (fn [xs x] (cons x xs)) [] %1)", "user": "5612d91ee4b05f002753df97"}, {"problem": 23, "code": "(fn [coll] (reduce conj () coll))", "user": "56ad9cfae4b03c432f187354"}, {"problem": 23, "code": "#(into (list) %)", "user": "56adfd0de4b03c432f187358"}, {"problem": 23, "code": "(fn reverse-seq\n  ([xs]\n  \t(reverse-seq xs '()))\n  ([xs acc]\n  \t(if (empty? xs)\n      acc\n      (reverse-seq (rest xs) (conj acc (first xs))))))", "user": "56ae6776e4b03c432f18735e"}, {"problem": 23, "code": "#(into '() %)", "user": "5653da73e4b0f9d632dd8478"}, {"problem": 23, "code": "(fn [xs] ((fn [A B] (if (= [] B) A (recur (cons (first B) A) (rest B)))) [] xs))", "user": "56abaf0be4b03c432f187341"}, {"problem": 23, "code": "(fn [s] ( \n         (fn [cur acc]\n           \t(if (empty? cur)\n              acc\n              (recur (next cur) (conj acc (first cur)))\n              )\n           ) s ()\n         ))", "user": "56ae4c21e4b03c432f18735c"}, {"problem": 23, "code": "#(into () %)", "user": "56aee4abe4b03c432f187364"}, {"problem": 23, "code": "(fn [i] (\n               (fn r [x y]\n                 (if (empty? x) \n                   y \n                   (r (butlast x) (conj y (last x)))\n                 )\n               ) i []\n             )\n     )", "user": "56aed78fe4b03c432f187363"}, {"problem": 23, "code": "reduce conj `()", "user": "56afb527e4b061e3ca319ad7"}, {"problem": 23, "code": "#(loop [s % r '()]\n   (if (empty? s) r\n     (recur (rest s)\n            (conj r (first s)))))", "user": "56ae7589e4b03c432f187360"}, {"problem": 23, "code": "(fn [xs]\n  (loop [rxs ()\n         xs xs]\n    (if (empty? xs)\n      rxs\n      (recur (conj rxs (first xs)) (rest xs)))))", "user": "569dd6e8e4b0542e1f8d1480"}, {"problem": 23, "code": "(fn my-reverse\n  [xs]\n    (reduce (fn [res item] (conj res item)) '() xs))", "user": "56af5f74e4b061e3ca319acf"}, {"problem": 23, "code": "(fn f [v]\n\t(if (= (count v) 2)\n\t\t(concat (rest v) [(first v)])\n\t\t(concat (f (rest v)) [(first v)])\n\t)\n)", "user": "5693cc39e4b0dcc4269f4108"}, {"problem": 23, "code": "#(loop [xs %1 result '()]\n  (if (empty? xs)\n    result\n    (recur (rest xs) (conj result (first xs)))))", "user": "526e84b5e4b03e8d9a4a732d"}, {"problem": 23, "code": "reduce #(conj %1 %2) '()", "user": "56b19566e4b0982f16b37df0"}, {"problem": 23, "code": "(fn [x]\n    (loop [xx x r '()]\n          (if (seq xx)\n            (recur (rest xx) (conj r (first xx)))\n            r)))", "user": "56a1fce9e4b0542e1f8d14b7"}, {"problem": 23, "code": "(fn rev\n  ([orig] (rev orig []))\n  ([orig reversed] (if (empty? orig)\n                     reversed\n                     (recur (butlast orig) (conj reversed (last orig)))\n                    )\n   )\n)", "user": "56b280e3e4b0982f16b37e06"}, {"problem": 23, "code": "(fn\n  [col]\n  (reduce #(cons %2 %) '() col))", "user": "56b1ab17e4b0982f16b37df1"}, {"problem": 23, "code": "#(into () %)", "user": "56b2b26ce4b0982f16b37e09"}, {"problem": 23, "code": "#(into '() %)", "user": "55ed5a2de4b0121d4835fdd8"}, {"problem": 23, "code": "(fn \n  [coll]\n  (letfn [(rev\n            [coll]\n            (if (nil? coll)\n              []\n              (conj (rev (next coll)) (first coll))))]\n    (rev coll)))", "user": "56a36f76e4b0542e1f8d14ca"}, {"problem": 23, "code": "#(reduce (fn [target source] (conj target source)) '() (vec %))", "user": "56b3146ae4b0982f16b37e0f"}, {"problem": 23, "code": "reduce conj ()", "user": "56b18445e4b0982f16b37dee"}, {"problem": 23, "code": "#(into '() %)", "user": "55af3e6be4b03311e7b732c7"}, {"problem": 23, "code": "(fn rb [x]\n   (if (> (count x) 1)\n     (conj (rb (butlast x)) (last x))\n     x\n     )\n   )", "user": "5673db87e4b05957ce8c6125"}, {"problem": 23, "code": "(fn [xs] (reduce #(cons %2 %1) (filter (constantly false) xs) xs))", "user": "56b35565e4b0982f16b37e16"}, {"problem": 23, "code": "(fn r [s] (if (empty? s) s (concat (r (rest s)) (conj () (first s)))))", "user": "56b36283e4b0982f16b37e18"}, {"problem": 23, "code": "#(reduce conj  '() %)", "user": "56ae214ce4b03c432f18735a"}, {"problem": 23, "code": "(fn [s] (loop [se s red ()] (if (empty? se) red (recur (rest se) (conj red (first se))))))", "user": "56b49f72e4b0982f16b37e23"}, {"problem": 23, "code": "#(loop [s %, d []]\n   (if (empty? s) d\n     (recur (rest s) (cons (first s) d))))\n\n;reduce conj '()\n\n;into '()", "user": "56b295f7e4b0982f16b37e08"}, {"problem": 23, "code": "(fn fuck-me [coll]\n  (loop [[r & more :as all ] (seq coll)\n         acc '()]\n    (if all\n      (recur more (cons r acc)) acc)))", "user": "5655e056e4b0f9d632dd849b"}, {"problem": 23, "code": "#(loop [xs %\n        ans `()]\n   (if (empty? xs)\n     ans\n     (recur (next xs) (cons (first xs) ans))))", "user": "55c4b23de4b0e31453f649a3"}, {"problem": 23, "code": "(fn rev [l] (reduce conj '() l ))", "user": "56b5019ce4b0982f16b37e2c"}, {"problem": 23, "code": "(fn [s]\n  (let [as-vec (vec s)]\n  (map #(nth as-vec %) \n               (take (count as-vec)\n                     (iterate dec (dec (count as-vec)))))))", "user": "56a01895e4b0542e1f8d149f"}, {"problem": 23, "code": "reduce conj ()", "user": "56b66eb7e4b0982f16b37e3b"}, {"problem": 23, "code": "reduce conj '()", "user": "56a9ea17e4b07966d5a8a07c"}, {"problem": 23, "code": "reduce conj '()", "user": "56b6e354e4b0982f16b37e41"}, {"problem": 23, "code": "into ()", "user": "565418ede4b0f9d632dd847d"}, {"problem": 23, "code": "#(into () %)", "user": "555d4421e4b0a2eb076a39a8"}, {"problem": 23, "code": "(fn [xs]\n  (loop [xs1 (seq xs)\n         rs '()]\n     (if (empty? xs1)\n       rs\n       (recur (rest xs1) (conj rs (first xs1))))))", "user": "56b619e7e4b0982f16b37e39"}, {"problem": 23, "code": "reduce conj '()", "user": "567d75ebe4b05957ce8c61c9"}, {"problem": 23, "code": "(fn rev [xs]\n  (if (empty? xs) nil\n      (cons (last xs)\n            (rev (drop-last xs)))))", "user": "569ce7e6e4b0542e1f8d146d"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "56b8c794e4b0f26550335927"}, {"problem": 23, "code": "(fn [s] (reduce #(cons %2 %1) '() s))", "user": "56b86e64e4b0f26550335924"}, {"problem": 23, "code": "reduce conj '()", "user": "56826ebce4b0945ebc182a93"}, {"problem": 23, "code": "sort #(-(compare %1 %2))", "user": "56452f52e4b0284900eef603"}, {"problem": 23, "code": "(fn [col] (reduce #(conj % %2)\n                  '()\n                  col))", "user": "56b965d9e4b0f26550335931"}, {"problem": 23, "code": "(fn sc [xs] (if (empty? xs) [] (cons (last xs) (sc (drop-last xs)))))", "user": "56b97792e4b0f26550335932"}, {"problem": 23, "code": "(fn my-reverse\n  [coll]\n  (reduce conj nil coll))", "user": "56b9d20ee4b0f2655033593b"}, {"problem": 23, "code": "#(loop [s %, rs nil] (if (empty? s) rs (recur (rest s) (conj rs (first s)))))", "user": "53bd476ae4b0d9a98559a6ca"}, {"problem": 23, "code": "(fn [l] (loop [x '() target l] (if (empty? target) x (recur (conj x (first target)) (rest target)))))", "user": "56af842de4b061e3ca319ad2"}, {"problem": 23, "code": "(fn [c] (into () c))", "user": "55e206f3e4b050e68259b429"}, {"problem": 23, "code": "(fn[lst]\n   (loop [i lst, rtnlist (empty lst)]\n     (if(empty? i) \n       rtnlist \n       (recur \n        (drop 1 i)\n        (cons (first i) rtnlist)\n       )\n     )\n   )\n )", "user": "56b94357e4b0f2655033592e"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "56b80ad1e4b0f26550335921"}, {"problem": 23, "code": "#(into () %)", "user": "56baa68ce4b0f26550335947"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "569637d8e4b0dcc4269f4130"}, {"problem": 23, "code": "(fn [coll] (reduce conj '() coll))", "user": "52c7c40be4b0c2d177d62125"}, {"problem": 23, "code": "#(loop [o % n (list)] \n   (if-let [x (first o)] \n     (recur (rest o) (conj n x))\n     (if (vector? o) \n       (apply vector n) \n       n )))", "user": "56bb9ccce4b0f26550335959"}, {"problem": 23, "code": "(fn [coll]\n  (loop [[r & more :as all] (seq coll)\n         acc '()]\n    (if all\n      (recur more (cons r acc))\n      acc)))", "user": "56b7c32ee4b0982f16b37e48"}, {"problem": 23, "code": "(partial reduce conj ())", "user": "56ba1406e4b0f2655033593c"}, {"problem": 23, "code": "#(into () %)", "user": "56bb3a4be4b0f26550335951"}, {"problem": 23, "code": "#(loop [a '() s %]\n   (if (empty? s) a\n     (recur (conj a (first s)) (rest s))\n     ))", "user": "56baab13e4b0f26550335948"}, {"problem": 23, "code": "#(reduce conj '() %1)", "user": "54b61cb1e4b05787c3b163b3"}, {"problem": 23, "code": "reduce (fn [a b] (cons b a)) []", "user": "56bb24fbe4b0f2655033594e"}, {"problem": 23, "code": "(fn [xs]\n    (let [f (fn [xs ys]\n              (if (empty? xs)\n                ys\n                (recur\n                  (rest xs)\n                  (-> (first xs) (cons ys)))))]\n      (f xs '())))", "user": "56bcc2b2e4b0f26550335965"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "56b6c962e4b0982f16b37e3e"}, {"problem": 23, "code": "#(into '() %)", "user": "554b0d42e4b0a04f7929957f"}, {"problem": 23, "code": "#(reduce (fn [memo el] (cons el memo)) '() %)", "user": "51f38193e4b0fca5e8b48226"}, {"problem": 23, "code": "reduce conj ()", "user": "56bca51ae4b0f26550335963"}, {"problem": 23, "code": "(fn[x] (reduce conj () x))", "user": "56a28664e4b0542e1f8d14c1"}, {"problem": 23, "code": "(fn [array]\n  (loop [a1 array a2 []]\n    (if (empty? a1)\n      a2\n      (recur (drop-last a1) (conj a2 (last a1))))))", "user": "56bde860e4b0f26550335979"}, {"problem": 23, "code": "(fn [xs]\n  ((fn [original reversed]\n    (if (= (count original) 0)\n      reversed\n      (recur (rest original) (conj reversed (first original)))))\n   xs '()))", "user": "56be350ce4b0f26550335981"}, {"problem": 23, "code": "reduce conj ()", "user": "56bf4ac0e4b0f26550335985"}, {"problem": 23, "code": "reduce conj '()", "user": "56bc2e3be4b0f2655033595d"}, {"problem": 23, "code": "(fn [x] (if (vector? x) (into [] (into () x)) (into () (into [] x))))", "user": "56bdda49e4b0f26550335977"}, {"problem": 23, "code": "(fn myRev [seq] \n  (cond (empty? seq) []\n        true (conj (myRev (rest seq)) (first seq))))", "user": "4fab21b2e4b081705acca211"}, {"problem": 23, "code": "#(into () %)", "user": "56bfe8f1e4b060a8e693e3a3"}, {"problem": 23, "code": "(fn rev [xs]\n  (if (<= (count xs) 1)\n    xs\n    (conj (rev (drop-last xs)) (last xs))))", "user": "56bfcba1e4b060a8e693e3a1"}, {"problem": 23, "code": "(fn [x] (reduce #(cons %2 %1) (empty x) x))", "user": "56c08c7fe4b060a8e693e3ab"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "564b1f34e4b0284900eef662"}, {"problem": 23, "code": "(fn rev2\n  [sq]\n  (if (empty? (rest sq)) [(first sq)] (conj (rev2 (rest sq)) (first sq))))", "user": "5609d328e4b05f002753deee"}, {"problem": 23, "code": "(fn rev [coll]\n  (if (empty? (rest coll))\n    coll\n    (concat (rev (rest coll)) [(first coll)])))", "user": "56c0aeb8e4b060a8e693e3af"}, {"problem": 23, "code": "(fn [s] (reduce #(conj %1 %2) '() s))", "user": "563536f8e4b0bfe05bf117c5"}, {"problem": 23, "code": "into '()", "user": "56a257e7e4b0542e1f8d14bb"}, {"problem": 23, "code": "#(reduce (fn [sq, item] (conj sq item)) `() %1)", "user": "56c1549ae4b0839206b9d686"}, {"problem": 23, "code": "reduce #(conj %1 %2) '()", "user": "56c14100e4b0839206b9d683"}, {"problem": 23, "code": "(fn \n  [coll]\n  (loop \n   [[x & xs] (vec coll) \n    res ()]\n   (if (nil? x) \n     res\n     (recur xs (conj res x)))))", "user": "56bf78dae4b0f26550335989"}, {"problem": 23, "code": "#(into () %)", "user": "56bb660be4b0f26550335954"}, {"problem": 23, "code": "reduce conj ()", "user": "565b4d7fe4b068f2fe63dc01"}, {"problem": 23, "code": "reduce conj ()", "user": "56c08696e4b060a8e693e3aa"}, {"problem": 23, "code": "(fn [mySeq]\n  (loop [myInnerSeq mySeq result nil]\n        (if (empty? myInnerSeq)\n            result\n            (recur (rest myInnerSeq) (conj result (first myInnerSeq)))\n        )\n  )\n)", "user": "506af7d8e4b0a2a5463de37d"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "56c1d2dae4b0839206b9d68a"}, {"problem": 23, "code": "(fn rev\n  ([seq revd]\n   (if (empty? seq)\n     revd\n     (rev (rest seq) (cons (first seq) revd))))\n  ([seq]\n   (rev seq '())))", "user": "56af99dfe4b061e3ca319ad5"}, {"problem": 23, "code": "(fn f [s]\n  (if (empty? s)\n    s\n    (concat (f (rest s)) [(first s)])))", "user": "55f95782e4b03cbcff9738bf"}, {"problem": 23, "code": "#(reduce conj\n         ()\n          %)", "user": "56c33ceae4b05cc29241ee89"}, {"problem": 23, "code": "(fn this [x] \n (if(> (count x) 1)\n   (conj (this (drop-last x)) (last x))\n   (conj (drop-last x) (last x))))", "user": "56bd930ae4b0f26550335971"}, {"problem": 23, "code": "(fn r [c]\n  (let [[p & m] (vec c)]\n    (if (nil? m)\n      [p]\n\t  (conj (r m) p))))", "user": "56c2c342e4b05cc29241ee85"}, {"problem": 23, "code": "reduce (fn [a b] (cons b a)) []", "user": "56b8cf20e4b0f26550335929"}, {"problem": 23, "code": "#(loop [lst % res []] (if (empty? lst) res (recur (butlast lst) (conj res (last lst)))))", "user": "56b33058e4b0982f16b37e12"}, {"problem": 23, "code": "(fn [s] (reduce #(cons %2 %1) '() s))", "user": "56c427bbe4b05cc29241ee94"}, {"problem": 23, "code": "(fn my-reverse [some-seq] (apply conj () some-seq))", "user": "56c0756de4b060a8e693e3a9"}, {"problem": 23, "code": "(fn [sq] (reduce conj () sq \n                 ))", "user": "56b6a50ae4b0982f16b37e3c"}, {"problem": 23, "code": "#(into () %)", "user": "56c0d92ae4b0839206b9d67e"}, {"problem": 23, "code": "(fn rv [sss]\n  (if (not (empty? sss))\n    (conj (rv (butlast sss)) (last sss))\n  ))", "user": "56c1f470e4b0839206b9d68c"}, {"problem": 23, "code": "(fn [x] \n  (reduce conj '() x)\n)", "user": "56c55c5ee4b05cc29241eea4"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "56a37ccee4b0542e1f8d14cb"}, {"problem": 23, "code": "(fn [s]\n  (let [len (count s)\n        se (seq s)]\n    (map-indexed \n      (fn [i item]\n        (nth se (- len (+ i 1))))\n      s)))", "user": "56c23ca6e4b05cc29241ee7f"}, {"problem": 23, "code": "#(let [coll %\n       length (count coll)]\n   (loop [i 0 rev []]\n\t(if (< i length)\n      (recur (inc i) (cons (nth (seq coll) i) rev))\n      rev)))", "user": "56c5db15e4b05cc29241eeac"}, {"problem": 23, "code": "(fn [coll] \n(letfn [(rev [coll] \n  (loop [num (- (count coll) 1) result []]\n         (if (< num 0)\n           result\n           (recur (- num 1) (conj result (nth coll num)))\n           )))]\n  (if (set? coll)\n    (rev (into [] coll))\n    (rev coll)\n    )\n  ))", "user": "56499a5de4b0284900eef644"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "56c6490de4b05cc29241eeaf"}, {"problem": 23, "code": "(partial reduce #(conj %1 %2) '())", "user": "56b2573ce4b0982f16b37e02"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "567b2f20e4b05957ce8c61a2"}, {"problem": 23, "code": "(fn invert [x] (if (= (count x) 1) x (conj (invert (butlast x)) (last x))))", "user": "55801a0de4b05c286339e0e5"}, {"problem": 23, "code": "(fn [s]\n\t(reduce conj '() s))", "user": "56c71414e4b0ed865f9758b6"}, {"problem": 23, "code": "(fn my-reverse-seq [s]\n  (loop [ret []\n         s s]\n    (if-not (empty? s)\n      (recur (conj ret (last s)) (butlast s))\n      (seq ret))))", "user": "569f4dabe4b0542e1f8d1491"}, {"problem": 23, "code": "#(into () %)", "user": "561fe4fce4b064ca9f4b16d5"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "56c77858e4b0ed865f9758c0"}, {"problem": 23, "code": "#(loop [a [] s %](if (seq s)(recur (conj a (last s))(drop-last s))a))", "user": "56c816efe4b0ed865f9758cd"}, {"problem": 23, "code": "reduce conj '()", "user": "56c33bb9e4b05cc29241ee87"}, {"problem": 23, "code": "apply conj ()", "user": "56c792ace4b0ed865f9758c4"}, {"problem": 23, "code": "(fn rs [s]\n  (loop [r (empty s) ss s]\n    (if \n  \t\t(empty? ss)\n    \tr\n  \t\t(recur (cons (first ss) r) (rest ss))\n    )\n  )\n)", "user": "56c9970ce4b0ed865f9758de"}, {"problem": 23, "code": "(fn [s] (loop \n          [new [] old s] \n          (if (empty? old) \n            new \n            (recur \n             (concat [(first old)] new) \n             (rest old)))))", "user": "548a3dc6e4b0e286459a11f2"}, {"problem": 23, "code": "(fn doit [coll & args]\n  (let [ans (first args) len (count coll)]\n    (if (not ans) (let [ans (empty coll)]))\n    (if (empty? coll)\n      ans\n      (recur\n        (take (- len 1) coll)\n        (list (concat ans [(last coll)]))\n        )\n      )\n    )\n  )", "user": "56c72507e4b0ed865f9758b7"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "56ca6141e4b0ea9b8538f71a"}, {"problem": 23, "code": "(fn [coll]\n  (loop [x coll n (count coll) y ()]\n    (if (= n 0)\n      y\n      (recur (rest x) (dec n) (cons (first x) y)))))", "user": "56c88f71e4b0ed865f9758d3"}, {"problem": 23, "code": "#(into () %)", "user": "5643aed5e4b0018b46ad8bfd"}, {"problem": 23, "code": "#(into () %)", "user": "54be7e93e4b0ed20f4ff6eed"}, {"problem": 23, "code": "(fn my-reverse [n]\n\t(loop [acc '() x n]\n\t\t(if (empty? x)\n\t\tacc\n\t\t(recur (conj acc (first x)) (rest x))\n          )))", "user": "56caea02e4b0ea9b8538f721"}, {"problem": 23, "code": "#(into () %)", "user": "56c86246e4b0ed865f9758d1"}, {"problem": 23, "code": "(fn [coll] (reduce conj '() coll) )", "user": "56cb6425e4b0ea9b8538f730"}, {"problem": 23, "code": "(fn re-verse [coll]\n  (if (empty? coll) coll (concat (re-verse (rest coll)) [(first coll)])))", "user": "5141e978e4b0b50abeb46b20"}, {"problem": 23, "code": "(fn my-reverse [s] (into '() s))", "user": "56cbb98ae4b0ea9b8538f739"}, {"problem": 23, "code": "(fn [coll] \n   (loop [c coll \n          acc []] \n     (if (empty? c) \n       acc \n       (recur \n        (rest c) (cons (first c) acc)))))", "user": "56cbb352e4b0ea9b8538f738"}, {"problem": 23, "code": "(fn rev [l] (\n             if (not-empty l) \n             (conj (rev (rest l)) (first l))\n             []\n             )\n  )", "user": "56cb3c71e4b0ea9b8538f729"}, {"problem": 23, "code": "(fn [x]\n  (into '() (apply list x)))", "user": "56b3b12ee4b0982f16b37e1c"}, {"problem": 23, "code": "(fn[x]\n (into '() x) \n)", "user": "56aa9464e4b07966d5a8a08d"}, {"problem": 23, "code": "(fn [s]\n  (loop [s s, r ()]\n    (if (= s ())\n      r\n      (recur (rest s) (conj r (first s))))))", "user": "56cc34aee4b0ea9b8538f73c"}, {"problem": 23, "code": "reduce conj ()", "user": "56c60b36e4b05cc29241eead"}, {"problem": 23, "code": ";#(loop [coll % v ()]\n;              (if coll (recur (next coll) (conj v (first coll)))\n;                v))\n#(into () %)", "user": "56cba075e4b0ea9b8538f737"}, {"problem": 23, "code": "(fn [x] (loop [a x ans ()] (if (empty? a) (apply vector ans) (recur (rest a) (conj ans (first a))))))", "user": "56ccbeb7e4b0ea9b8538f740"}, {"problem": 23, "code": "#(loop [coll % result []]\n   (if (first coll)\n     (recur (next coll) (cons (first coll) result))\n     result))", "user": "56cccd99e4b0ea9b8538f743"}, {"problem": 23, "code": "reduce conj '()", "user": "56cb3bebe4b0ea9b8538f728"}, {"problem": 23, "code": "(fn rec [l] (if (empty? l) [] (conj (rec (rest l)) (first l))))", "user": "56cb483ee4b0ea9b8538f72d"}, {"problem": 23, "code": "(fn rev [coll]\n  (if (empty? coll) \n    coll \n    (cons (last coll) (rev (drop-last coll)))))", "user": "56cb3a61e4b0ea9b8538f726"}, {"problem": 23, "code": "(fn [coll] (reduce #(cons %2 %1) '() coll))", "user": "56cddf9de4b0ea9b8538f753"}, {"problem": 23, "code": "(fn [x]\n  (reduce conj '() x)\n  )", "user": "56cdda13e4b0ea9b8538f752"}, {"problem": 23, "code": "#(into () %)", "user": "56ce20ffe4b0ea9b8538f75d"}, {"problem": 23, "code": "reduce conj ()", "user": "56c4f43ce4b05cc29241ee9c"}, {"problem": 23, "code": "#(vec (reduce (fn [res start] (conj res start)) % %2)) ()", "user": "56cb0abce4b0ea9b8538f722"}, {"problem": 23, "code": "#(apply conj '() %)", "user": "56cd110ee4b0ea9b8538f747"}, {"problem": 23, "code": "(fn [sq]\n  (if (vector? sq)\n    (loop [ls sq\n           return []]\n      (if (nil? (first ls))\n        return\n        (recur (pop ls)\n               (conj return (peek ls)))))\n    (loop [ls sq\n           return '()]\n      (if (nil? (first ls))\n        return\n        (recur (rest ls)\n               (conj return (first ls)))))))", "user": "55f73078e4b06e875b46cea4"}, {"problem": 23, "code": "#(reduce (fn [x y] (conj x y)) '() %)", "user": "56585dbce4b0f9d632dd84b3"}, {"problem": 23, "code": "(fn [coil]\n  (loop [src coil dst '()]\n    (if (empty? src)\n      dst\n      (recur (rest src) (conj dst (first src))))))", "user": "56c55fbce4b05cc29241eea5"}, {"problem": 23, "code": "(fn [s]\n  (reduce (fn [reversed element]\n            (conj reversed element))\n          '()\n          s))", "user": "56cf4a48e4b0ea9b8538f767"}, {"problem": 23, "code": "#(reduce (fn [s v] (concat [v] s)) [] %)", "user": "56cf6f72e4b0ea9b8538f769"}, {"problem": 23, "code": "(fn rev[l]\n  (if (empty? l)\n    '()\n    (cons (last l) (rev (butlast l)))))", "user": "529cabd5e4b04e0c58e87b68"}, {"problem": 23, "code": "(fn [c]\n  (loop [oc c nc (empty c)]\n    (if (= (count oc) 0)\n      nc\n      (recur (rest oc) (cons (first oc) nc)))))", "user": "55e6809ee4b050e68259b48a"}, {"problem": 23, "code": "(fn my-reverse\n  [seq]\n  (if (= [] seq)\n    []\n    (conj (my-reverse (rest seq)) (first seq))))", "user": "56cf9d4fe4b0ea9b8538f76c"}, {"problem": 23, "code": "apply conj ()", "user": "56cfa716e4b0ea9b8538f76d"}, {"problem": 23, "code": "reduce conj '()", "user": "565418cde4b0f9d632dd847c"}, {"problem": 23, "code": "#(loop [s % r []]\n   (if (empty? s)\n       r\n       (recur (rest s) (cons (first s) r))))", "user": "56be8649e4b0f26550335983"}, {"problem": 23, "code": "reduce conj ()", "user": "56cef5e8e4b0ea9b8538f762"}, {"problem": 23, "code": "(fn foo [a] (if (empty? a) [] (cons (last a) (foo(butlast a)))))", "user": "56cde509e4b0ea9b8538f754"}, {"problem": 23, "code": "(fn [x] (into () x))", "user": "56cd67c1e4b0ea9b8538f74a"}, {"problem": 23, "code": "(fn [xs] (reduce conj () xs))", "user": "56d137d8e4b0ea9b8538f78a"}, {"problem": 23, "code": "#(into () %)", "user": "56d05ba2e4b0ea9b8538f77d"}, {"problem": 23, "code": "#(reduce (fn [x v] (conj x v)) '() %)", "user": "56d0ba82e4b0ea9b8538f785"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "56d1facee4b0ea9b8538f796"}, {"problem": 23, "code": "reduce #(cons %2 %) []", "user": "56d1afd9e4b0ea9b8538f791"}, {"problem": 23, "code": "(fn [s]\n  (reduce conj '() s))", "user": "56d1db57e4b0ea9b8538f794"}, {"problem": 23, "code": "#(into () %)", "user": "56cb7096e4b0ea9b8538f732"}, {"problem": 23, "code": "#(into () %)", "user": "4de14aad535d08e6dec9fde5"}, {"problem": 23, "code": "into '()", "user": "56d228f3e4b0ea9b8538f79a"}, {"problem": 23, "code": "#(into () %)", "user": "567cb888e4b05957ce8c61c0"}, {"problem": 23, "code": "reduce #(concat (list %2) %) '()", "user": "542a8d07e4b01498b1a71b43"}, {"problem": 23, "code": "(fn my-reverse [xs]\n  (let [inner (fn inner [xxs result]\n                (if (empty? xxs)\n                  result\n                  (inner (next xxs) (cons (first xxs) result))))]\n    (inner xs '())))", "user": "56d15bfbe4b0ea9b8538f78d"}, {"problem": 23, "code": "(fn [x] (into '() x))", "user": "56d09798e4b0ea9b8538f781"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "56cb3acfe4b0ea9b8538f727"}, {"problem": 23, "code": "reduce #(conj %1 %2) '()", "user": "56d4266ce4b0ea9b8538f7b4"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "56cda514e4b0ea9b8538f74e"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "56d47528e4b0ea9b8538f7b7"}, {"problem": 23, "code": "(fn [x] \n  (loop [z '() y (seq x)]\n    (if (= y '())\n    z\n    (recur \n     (conj z (first y))\n     (rest y))\n    )\n  )\n  )", "user": "56d325ace4b0ea9b8538f7a9"}, {"problem": 23, "code": "reduce conj ()", "user": "5641a4cbe4b08d4f616f5eff"}, {"problem": 23, "code": "#(loop [s %1 ns '()]\n   (if (empty? s)\n     ns\n     (recur (rest s) (conj ns (first s)))))", "user": "56d63729e4b0ea9b8538f7ca"}, {"problem": 23, "code": "(fn [coll]\n  (loop [lcoll coll ncoll '()]\n    (if (empty? lcoll)\n      ncoll\n      (recur (rest lcoll) (conj ncoll (first lcoll))))))", "user": "56d5fd24e4b0ea9b8538f7c5"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "56d4b22de4b0ea9b8538f7bb"}, {"problem": 23, "code": "into '()", "user": "56c70cc2e4b0ed865f9758b5"}, {"problem": 23, "code": "#(into '() %)", "user": "56d68cbae4b0ea9b8538f7cd"}, {"problem": 23, "code": "(fn myreverse [seq] \n  (if \n     (<= (count seq) 1) seq\n     (cons (last seq) \n           (myreverse (drop-last seq))   )))", "user": "56c3aca0e4b05cc29241ee90"}, {"problem": 23, "code": "(fn rvs \n  [coll]\n  (if (empty? coll)\n    []\n    (conj (rvs (rest coll)) (first coll))))", "user": "56d72e14e4b0ea9b8538f7d6"}, {"problem": 23, "code": "apply conj '()", "user": "56d69d28e4b0ea9b8538f7cf"}, {"problem": 23, "code": "(fn [xs] (into '() xs))", "user": "56d5bc66e4b0ea9b8538f7c2"}, {"problem": 23, "code": "(fn my-rev [x] (if (empty? x) [] (cons (last x) (my-rev (butlast x)))))", "user": "56d80542e4b0ea9b8538f7e1"}, {"problem": 23, "code": "(fn [args] (reduce #(cons %2 %1) {} args) )", "user": "56cd8288e4b0ea9b8538f74c"}, {"problem": 23, "code": "#( reduce conj '() %)", "user": "5679c9f2e4b05957ce8c6191"}, {"problem": 23, "code": "#(loop [lst %\n       accum ()]\n     (if (empty? lst) (vec accum)\n         (recur (rest lst) (cons (first lst) accum))))", "user": "56d8a63fe4b0ea9b8538f7e8"}, {"problem": 23, "code": "#(into () %)", "user": "56d89066e4b0ea9b8538f7e7"}, {"problem": 23, "code": "#(into () %)", "user": "56d4d5efe4b0ea9b8538f7bd"}, {"problem": 23, "code": "(fn [_ l]\n  (let [e (last l)]\n    (if (nil? e)  _\n      (recur (conj _ e) (drop-last l))))) []", "user": "56d8fa43e4b0ea9b8538f7ec"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "56ab80f1e4b03c432f18733e"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "56a7c7c8e4b07966d5a8a061"}, {"problem": 23, "code": "(fn f [coll] (if (empty? coll) nil (cons (last coll) (f (butlast coll)))))", "user": "56a42953e4b0542e1f8d14d9"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "56ba5cc6e4b0f26550335942"}, {"problem": 23, "code": "reduce conj ()", "user": "56d957c2e4b0ea9b8538f7f1"}, {"problem": 23, "code": "(fn [coll]\n  (reduce (fn[coll e](conj coll e)) `() coll))", "user": "56daa420e4b0ea9b8538f802"}, {"problem": 23, "code": "(fn[ele] (reduce conj () ele))", "user": "56daa45ae4b0ea9b8538f803"}, {"problem": 23, "code": "(fn rev[seq] (if (empty? seq) [] (concat (rev (rest seq)) [(first seq)])))", "user": "52c634b1e4b0c2d177d6210a"}, {"problem": 23, "code": "(fn [xs]\n  ((fn [xs t]\n    (if-let [_xs (next xs)]\n      (recur _xs (conj t (first xs)))\n      (conj t (first xs))\n      )\n    ) xs '()\n  )\n  )", "user": "56d91a53e4b0ea9b8538f7ee"}, {"problem": 23, "code": "(fn [l] (loop [li l rev '()]\n          (if (empty? li)\n            rev\n            (recur (rest li) (cons (first li) rev)))))", "user": "55009d17e4b07d26eda61d5d"}, {"problem": 23, "code": "(fn [s] (reduce #(conj %1 %2) '() s))", "user": "56ca0da9e4b0ea9b8538f715"}, {"problem": 23, "code": "into '()", "user": "56c560ede4b05cc29241eea6"}, {"problem": 23, "code": "#(reduce conj `() %)", "user": "56b94af0e4b0f2655033592f"}, {"problem": 23, "code": "(fn rev [c] \n  ((fn revr [c r] \n    (if \n      (= (count c) 0) \n      r \n      (revr (rest c) (conj r (first c)))\n    )\n  ) c '()))", "user": "56db70ebe4b0ea9b8538f80a"}, {"problem": 23, "code": "(fn [in]\n  \t(loop [src in out '()]\n      (if (empty? src)\n        out\n        (recur (rest src) (conj out (first src))))))", "user": "56dbe1f4e4b0ea9b8538f813"}, {"problem": 23, "code": "(fn [sq] (reduce (fn [x xs] (conj x xs)) '() sq))", "user": "56dc0628e4b0ea9b8538f814"}, {"problem": 23, "code": "#(loop [coll % rev []]\n  (if (empty? coll)\n    rev\n    (recur (rest coll) (cons (first coll) rev))))", "user": "56a71811e4b0542e1f8d14f6"}, {"problem": 23, "code": "reduce conj ()", "user": "56dc34a3e4b0ea9b8538f816"}, {"problem": 23, "code": "#(reduce (fn [acc, v] (conj acc v)) (list) %)", "user": "5527be83e4b0ffed3738f936"}, {"problem": 23, "code": "into '()", "user": "56dc5f89e4b0ea9b8538f81e"}, {"problem": 23, "code": "(fn [coll]\n  (reduce \n   (fn [latest-result next-element] \n     (conj latest-result next-element)\n     )\n   '() coll\n   )\n  )", "user": "56d74c88e4b0ea9b8538f7d9"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "56db549be4b0ea9b8538f808"}, {"problem": 23, "code": "#(reduce  (fn [l r] (cons r l)) '() %1)", "user": "56c6a3c3e4b05cc29241eeb3"}, {"problem": 23, "code": ";; into ()\nreduce conj ()", "user": "56df9203e4b0ca2494a095fc"}, {"problem": 23, "code": "(fn [x] (loop [[head & more] (seq x), acc []] (if more (recur more (cons head acc)) (cons head acc))))", "user": "56cad309e4b0ea9b8538f720"}, {"problem": 23, "code": "(fn rev-me\n  ([coll]\n   (rev-me coll (empty coll))\n  )\n  ([coll copy-to]\n   (if (empty? coll)\n    \tcopy-to\n    \t(rev-me (rest coll) (cons (first coll) copy-to))\n   )\n  )\n)", "user": "56de0db0e4b0ea9b8538f83a"}, {"problem": 23, "code": "into '()", "user": "550b502ae4b06e50f9beb13f"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "56dcd173e4b0ea9b8538f824"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "56e05bfce4b0ca2494a09606"}, {"problem": 23, "code": "(fn [col]\n  (reduce #(conj %1 %2) '() col))", "user": "56df254be4b0ca2494a095ea"}, {"problem": 23, "code": "into ()", "user": "56c749d8e4b0ed865f9758ba"}, {"problem": 23, "code": "(fn [ls]\n  (let [rec (fn [ls a]\n              (if (empty? ls)\n                a\n                (recur (rest ls) (cons (first ls) a))\n                ))]\n    (rec ls '())))", "user": "56d7f340e4b0ea9b8538f7df"}, {"problem": 23, "code": "#(into () %)", "user": "56d4b1aee4b0ea9b8538f7ba"}, {"problem": 23, "code": "#(into () %)", "user": "56e06625e4b0ca2494a09607"}, {"problem": 23, "code": "(fn [xs] \n  (into '() xs))", "user": "56db8fbde4b0ea9b8538f80c"}, {"problem": 23, "code": "reduce conj ()", "user": "54a6645be4b09f271ff37c87"}, {"problem": 23, "code": "reduce conj '()", "user": "55f33f0ce4b06e875b46ce59"}, {"problem": 23, "code": "(fn my-reverse-seq [s]\n  (loop [r s\n         n '()]\n    (if (empty? r)\n      n\n      (recur (rest r) (conj n (first r))))))", "user": "56df5b74e4b0ca2494a095ed"}, {"problem": 23, "code": "(fn backwards [l] (if (> 2 (count l)) l (concat (backwards (rest l)) [(first l)])))", "user": "56e227a8e4b03a7c14b85a31"}, {"problem": 23, "code": "(fn [coll] (reduce conj '() coll))", "user": "56d439d4e4b0ea9b8538f7b6"}, {"problem": 23, "code": "reduce conj '()", "user": "56a70f28e4b0542e1f8d14f4"}, {"problem": 23, "code": "(fn [coll] (reduce #(cons %2 %1) (empty coll) coll))", "user": "559a8d4ce4b066d22e731f43"}, {"problem": 23, "code": "into '()", "user": "56e2dbf4e4b03a7c14b85a3b"}, {"problem": 23, "code": "reduce conj '()", "user": "56e02c1ce4b0ca2494a09602"}, {"problem": 23, "code": "(fn my-reverse [elems]\n  (into () elems))", "user": "56e32696e4b03a7c14b85a40"}, {"problem": 23, "code": "#(loop [se %, result '()]\n   (if (empty? se)\n     result\n     (recur (rest se) (cons (first se) result))))", "user": "56d63c71e4b0ea9b8538f7cb"}, {"problem": 23, "code": "(fn [l] (reduce conj '() l))", "user": "56db90d4e4b0ea9b8538f80d"}, {"problem": 23, "code": "#(into () %)", "user": "56d902c3e4b0ea9b8538f7ed"}, {"problem": 23, "code": "(fn [xs] (reduce conj () xs))", "user": "56e37659e4b03a7c14b85a44"}, {"problem": 23, "code": "(fn my-reverse [coll] (if (empty? coll) []\n             (conj (my-reverse (rest coll)) (first coll))))", "user": "56e53d2fe4b02e7e935eb6bc"}, {"problem": 23, "code": "#(loop [s %\n        r []]\n   (let [reversing (concat \n                    (take 1 s) \n                    r)]\n     (if (empty? s)\n       reversing\n       (recur (rest s)\n               reversing))))", "user": "550f2333e4b06e50f9beb173"}, {"problem": 23, "code": "(fn my-reverse\n  [arr] (reduce (fn [acc e] (concat [e] acc)) [] arr))", "user": "569f7bc2e4b0542e1f8d1494"}, {"problem": 23, "code": "(fn [coll] (reduce (fn [reversed-coll element] (concat [element] reversed-coll)) [] coll))", "user": "56e48302e4b03a7c14b85a4e"}, {"problem": 23, "code": "(fn\n  [seq]\n  (into '() seq))", "user": "56e09e01e4b0ca2494a0960c"}, {"problem": 23, "code": "#(into () %)", "user": "56e6b6fbe4b02e7e935eb6ca"}, {"problem": 23, "code": "#(into () %)", "user": "53ecaf1ce4b0d648e757f4b4"}, {"problem": 23, "code": "reduce conj '()", "user": "56e6ef89e4b02e7e935eb6d0"}, {"problem": 23, "code": "#(reduce (fn [x y] (concat [y] x)) [] %)", "user": "56e6d049e4b02e7e935eb6cd"}, {"problem": 23, "code": "(fn [xs] (loop [i xs result []] (if-not i result (recur (butlast i) (conj result (last i))))))", "user": "56e3711de4b03a7c14b85a43"}, {"problem": 23, "code": "(fn rev \n  ([x] (rev x '()))\n  ([x acc]\n   (if (empty? x)\n     acc\n     (recur (rest x) (conj acc (first x))))))", "user": "56e7afd8e4b02e7e935eb6d9"}, {"problem": 23, "code": "#(into () %)", "user": "56e7d877e4b02e7e935eb6df"}, {"problem": 23, "code": "(fn [s] (reduce (fn [x y] (cons y x)) [] s))", "user": "56e7ebcce4b02e7e935eb6e2"}, {"problem": 23, "code": "reduce conj ()", "user": "4ed67b58535d10e5ff6f52e1"}, {"problem": 23, "code": "(fn [s]\n  (loop [left s\n         result '()]\n    (if (empty? left)\n      result\n      (recur (rest left) (conj result (first left))))))", "user": "56e85493e4b02e7e935eb6e7"}, {"problem": 23, "code": "#(loop [res [] m %] (if (empty? m) res (recur (conj res (last m)) (butlast m))))", "user": "56e811e1e4b02e7e935eb6e3"}, {"problem": 23, "code": "#(into () %)", "user": "56e8aa20e4b04a395b9a03f2"}, {"problem": 23, "code": "reduce #(conj %1 %2) (list)", "user": "56e9555fe4b04a395b9a03f7"}, {"problem": 23, "code": "(fn rev\n  [l]\n  (if (empty? l) \n    '()\n    (cons (last l) \n          (rev (drop-last l)))))", "user": "56e8ef93e4b04a395b9a03f4"}, {"problem": 23, "code": "(fn [lst]\n  (loop [input lst\n    \toutput ()]\n    (if (empty? input)\n      output\n      (recur (rest input) (conj output (first input))))))", "user": "51bc3e7fe4b0fe3ecfb46455"}, {"problem": 23, "code": "reduce conj nil", "user": "56e99ec8e4b04a395b9a03fb"}, {"problem": 23, "code": "reduce conj '()", "user": "56e4991fe4b03a7c14b85a4f"}, {"problem": 23, "code": "#(into () %)", "user": "56ea034fe4b04a395b9a0402"}, {"problem": 23, "code": "#(into () %)", "user": "56ea8d33e4b04a395b9a040a"}, {"problem": 23, "code": "(fn myReverse [l] (if (empty? l) l (concat (->> l rest myReverse) (list (first l)))))", "user": "56ea8adfe4b04a395b9a0407"}, {"problem": 23, "code": "(fn my-reverse [xs]\n  (when xs\n    (cons (last xs) (my-reverse (butlast xs)))))", "user": "56eaa753e4b04a395b9a040e"}, {"problem": 23, "code": "(fn [coll]\n    (reduce (fn [accum val] (cons val accum)) '() coll))", "user": "56eaad95e4b04a395b9a040f"}, {"problem": 23, "code": "(fn myreverse [x] \n  (if (empty? x) \n    x \n    (concat \n     (myreverse (rest x)) \n     (list (first x)))))", "user": "56ea8b75e4b04a395b9a0409"}, {"problem": 23, "code": "(fn [xs] (reduce #(cons %2 %1) '() xs))", "user": "56eab346e4b04a395b9a0410"}, {"problem": 23, "code": "(fn [coll] \n  (reduce conj '() coll))", "user": "56e71333e4b02e7e935eb6d2"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "56eb16d8e4b04a395b9a041d"}, {"problem": 23, "code": "(fn f [l]\n  (if (= l [])\n    []\n    (conj (f (rest l)) (first l))))", "user": "56eb3f9de4b04a395b9a0420"}, {"problem": 23, "code": "#(into () %)", "user": "56e7ebb4e4b02e7e935eb6e1"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "56ec0af1e4b04a395b9a0430"}, {"problem": 23, "code": "(fn reverse' [l]\n  (if (empty? l)\n    []\n    (concat (reverse' (rest l)) [(first l)])))", "user": "56ec3a97e4b04a395b9a0433"}, {"problem": 23, "code": "(fn reversa [x]\n  ; if () return 0\n  ; else return (contar (rest x)) + 1\n\n  (if (= x '())\n    []\n    (conj (reversa (rest x)) (first x))\n  )\n)", "user": "56ce8728e4b0ea9b8538f760"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "562a58e8e4b00e49c7cb4822"}, {"problem": 23, "code": "(fn reversa [x]\n  (if (= x '())\n    []\n    (conj (reversa (rest x)) (first x))\n  )\n)", "user": "56d09e8ee4b0ea9b8538f782"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "56ecc4b5e4b04a395b9a043e"}, {"problem": 23, "code": "reduce #(cons %2 %) '()", "user": "56eafdc7e4b04a395b9a041a"}, {"problem": 23, "code": "#(into '() %)", "user": "56ebf105e4b04a395b9a042c"}, {"problem": 23, "code": "reduce conj ()", "user": "56eb5c76e4b04a395b9a0422"}, {"problem": 23, "code": "(fn [s] (reduce (fn [rev-seq e] (conj rev-seq e)) (list) s))", "user": "56d2a103e4b0ea9b8538f7a3"}, {"problem": 23, "code": "(fn reverse-recursively [coll]\n  (loop [[r & more :as all] (seq coll)\n         acc '()]\n    (if all\n      (recur more (cons r acc))\n      acc)))", "user": "56edf2dde4b04a395b9a044b"}, {"problem": 23, "code": "(fn reverse' [lat] \n  (if (empty? lat)\n      lat\n    (cons (last lat) (reverse' (drop-last lat)))))", "user": "56d36e7ae4b0ea9b8538f7ad"}, {"problem": 23, "code": "reduce conj '()", "user": "5655d811e4b0f9d632dd849a"}, {"problem": 23, "code": "#(into () %)", "user": "56dc483fe4b0ea9b8538f81b"}, {"problem": 23, "code": "(fn rev [lst] \n  (let [x (first lst)\n        xs (rest lst)]\n   (if (empty? xs)\n    [x]\n    (conj (rev xs) x))))", "user": "56ed3410e4b04a395b9a0444"}, {"problem": 23, "code": "(fn [x] (let [c (reduce (fn [a b] (conj a b)) '() x)]\r\n              (if (vector? x) (vec c) c)))", "user": "56ebe773e4b04a395b9a042a"}, {"problem": 23, "code": "#(loop [n '() [h & t] (seq %)] (if (nil? t) (cons h n) (recur (cons h n) t)))", "user": "56eca64fe4b04a395b9a043d"}, {"problem": 23, "code": "reduce conj ()", "user": "56eed056e4b04a395b9a0454"}, {"problem": 23, "code": "(fn [a] (reduce conj () a))", "user": "56ef11efe4b04a395b9a045b"}, {"problem": 23, "code": "#(into () %)", "user": "56ef63eee4b04a395b9a045e"}, {"problem": 23, "code": "#(into () %)", "user": "56ef9038e4b04a395b9a0460"}, {"problem": 23, "code": "#(loop [s % s1 ()]\n   (if (seq s)\n   \t(recur (rest s)(conj s1 (first s)))\n   \ts1))", "user": "56a62137e4b0542e1f8d14e8"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "56f000aee4b04a395b9a0469"}, {"problem": 23, "code": "(fn reverse-seq [xs]\n  (#(into () %) xs))", "user": "56efc9fde4b04a395b9a0464"}, {"problem": 23, "code": "#(into [] (reduce conj '() %))", "user": "56e4427ce4b03a7c14b85a4c"}, {"problem": 23, "code": "(fn [coll]\n  (reduce conj '() coll))", "user": "56f006f4e4b04a395b9a046a"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "56e8963ae4b04a395b9a03f1"}, {"problem": 23, "code": "(fn rev [s] (loop [r () t s] (if (empty? t) r (recur (conj r (first t)) (rest t)))))", "user": "56ef0203e4b04a395b9a0457"}, {"problem": 23, "code": "(partial reduce #(conj %1 %2) '())", "user": "56ec7b7fe4b04a395b9a043a"}, {"problem": 23, "code": "#(reduce (fn [x y] (conj x y)) () %)", "user": "56efec81e4b04a395b9a0466"}, {"problem": 23, "code": "#(reduce (fn [col x] (cons x col)) [] %)", "user": "56f10139e4b04a395b9a0487"}, {"problem": 23, "code": "(fn [coll]\n  (loop [result (empty  coll) remain coll]\n    (if (seq remain)\n      (recur (cons (first remain) result) (rest remain))\n      result)))", "user": "562268dce4b03f08ee9a9224"}, {"problem": 23, "code": "(fn [x] (into () x))", "user": "56efef12e4b04a395b9a0467"}, {"problem": 23, "code": "reduce conj '()", "user": "56f17802e4b04a395b9a0491"}, {"problem": 23, "code": "(fn [s] ((fn [items result]\n           (if (seq items)\n             (recur (rest items) (cons (first items) result))\n             result)) s '()))", "user": "56e31aaae4b03a7c14b85a3e"}, {"problem": 23, "code": "(fn [x]\n  (into '() x))", "user": "56d3bc2de4b0ea9b8538f7b0"}, {"problem": 23, "code": "(fn [x] (reduce conj '() x ))", "user": "56f18d0ce4b04a395b9a0496"}, {"problem": 23, "code": "(fn [arst] (reduce #(conj %1 %2) '() arst))", "user": "56d6c18ee4b0ea9b8538f7d1"}, {"problem": 23, "code": "(fn foo [x] (if (not (empty? x)) (cons (last x) (foo (drop-last x)))))", "user": "56f102f9e4b04a395b9a0488"}, {"problem": 23, "code": "(fn rev [x] (if (= () x) () (concat (rev (rest x)) (list (first x)))))", "user": "56f258d3e4b04a395b9a04a1"}, {"problem": 23, "code": "(fn [s] (loop [sequ s reversed (empty s)] (if (empty? sequ) reversed (recur (rest sequ) (concat [(first sequ)] reversed)))))", "user": "5292feb4e4b0239c8a67af39"}, {"problem": 23, "code": "(fn reverz [lst]\n  (loop [r (first lst) f (rest lst) result '()]\n    (if (nil? r)\n      result\n      (recur (first f) (rest f) (cons r result))\n     )\n    )\n  )", "user": "56f188e9e4b04a395b9a0494"}, {"problem": 23, "code": "#(reduce (fn [coll, elem] (conj coll elem)) () %)", "user": "56f15eade4b04a395b9a048e"}, {"problem": 23, "code": "#(into () %)", "user": "562d6fb9e4b0a45d2ff8301c"}, {"problem": 23, "code": "(fn [l] (reduce #(cons %2 %1) '() l))", "user": "520e37cfe4b066f3ea161c96"}, {"problem": 23, "code": "(fn inv [col]\n  (loop [pend (rest col)\n         res (cons (first col) nil)]\n    (if (= 0 (count pend))\n      res\n      (recur (rest pend) (cons (first pend) res)))))", "user": "56eff7c1e4b04a395b9a0468"}, {"problem": 23, "code": "(fn [c] (reduce #(conj %1 %2) (seq '()) c))", "user": "56f07437e4b04a395b9a047b"}, {"problem": 23, "code": "#(reduce conj() %)", "user": "56f4623ae4b046a417f9205d"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "56efb3a3e4b04a395b9a0463"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "56f514cee4b046a417f92068"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "56f45469e4b046a417f9205c"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "56f53962e4b046a417f9206c"}, {"problem": 23, "code": "#(into () %)", "user": "56efe32ce4b04a395b9a0465"}, {"problem": 23, "code": "(fn [col]\n  (loop [result '()\n         [first-element & rest-element :as all] (seq col)]\n    (if-not all\n      result\n      (recur (cons first-element result) rest-element))))", "user": "543170b2e4b0dad94371f2e7"}, {"problem": 23, "code": "#(reduce conj nil %)", "user": "566835fde4b04acd4f672de3"}, {"problem": 23, "code": "(fn rev [col]\n  (into () col))", "user": "56f57481e4b046a417f92072"}, {"problem": 23, "code": "reduce (fn[accum item] (cons item accum)) []", "user": "539f9f79e4b0ca733b97449e"}, {"problem": 23, "code": ";I saw other answer\n;not my idea\n#(reduce conj () %)", "user": "565487dce4b0f9d632dd8482"}, {"problem": 23, "code": "(fn [x] ((if (set? x) seq vec) (into () (concat x))))", "user": "56e93576e4b04a395b9a03f6"}, {"problem": 23, "code": "(fn [s] (reduce (fn [s e] (cons e s)) (empty s) s))", "user": "56ef0431e4b04a395b9a0458"}, {"problem": 23, "code": "(fn [my-seq] (loop [in (into [] my-seq) out []] (if (empty? in) out (recur (drop-last in) (conj out (last in))))))", "user": "52420e2fe4b076e5d3121f48"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "56f6e541e4b08e7d20b9682a"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "56f70fb2e4b08e7d20b9682b"}, {"problem": 23, "code": "(fn rs [s] (for [i (range (dec (count s)) -1 -1)] ((vec s) i)))", "user": "56f73c24e4b08e7d20b9682e"}, {"problem": 23, "code": "(fn my-rev [lst] (if (empty? lst) lst\n  (cons (last lst) (my-rev (drop-last lst)))))", "user": "56dc3dbbe4b0ea9b8538f81a"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "56f748c6e4b08e7d20b9682f"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5602bdf9e4b04bb52996e1a7"}, {"problem": 23, "code": "(fn my-reverse [lst]\n    (if (< (count lst) 2) lst\n        (concat (my-reverse (rest lst)) (list (first lst)))))", "user": "56ef0a2ee4b04a395b9a045a"}, {"problem": 23, "code": "(fn [s]\n  (reduce #(%2 %1) () (for [i s] #(conj % i))))", "user": "56f51879e4b046a417f92069"}, {"problem": 23, "code": "reduce conj '()", "user": "56b15fc8e4b0982f16b37de9"}, {"problem": 23, "code": "(fn [x] (into '() x))", "user": "54ad9927e4b09f271ff37ce5"}, {"problem": 23, "code": "reduce #(cons %2 %1) []", "user": "56e044ade4b0ca2494a09603"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "56d15251e4b0ea9b8538f78c"}, {"problem": 23, "code": "#(loop [x %\n        y ()]\n   (if (empty? x)\n     y\n     (recur (rest x) (conj y (first x)))))", "user": "56f85849e4b08e7d20b96836"}, {"problem": 23, "code": "reduce conj ()", "user": "56f7ecdfe4b08e7d20b96834"}, {"problem": 23, "code": "into ()", "user": "56f5324ce4b046a417f9206a"}, {"problem": 23, "code": "reduce conj ()", "user": "54e7425ee4b024c67c0cf810"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "56f9392ae4b07572ad1a88ac"}, {"problem": 23, "code": "(fn [l] (loop [norm l rev []] (if (empty? norm) rev (recur (rest norm) (cons (first norm) rev)))))", "user": "568b20e9e4b0dcc4269f40a1"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "56f95915e4b07572ad1a88af"}, {"problem": 23, "code": "(fn [v] (map (fn [x] (nth (vec v) (- (count v) (.indexOf (vec v) x) 1))) v))", "user": "56f5e6d5e4b046a417f92079"}, {"problem": 23, "code": "#(into () %)", "user": "56f070fee4b04a395b9a0478"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "56f9890be4b07572ad1a88b5"}, {"problem": 23, "code": "(fn\n  [lst]\n  (loop [rem lst\n         result []]\n    (if (empty? rem)\n      result\n      (recur (rest rem) (cons (first rem) result)))\n    )\n  )", "user": "56f8055ee4b08e7d20b96835"}, {"problem": 23, "code": "reduce conj '()", "user": "55cfdfc9e4b0e31453f64a35"}, {"problem": 23, "code": "#(apply (partial conj '()) %)", "user": "56f881e0e4b08e7d20b96839"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "56e0fa6fe4b03a7c14b85a1d"}, {"problem": 23, "code": "reduce (fn [coll el] (conj coll el)) (seq ())", "user": "56fa3f7ae4b07572ad1a88bf"}, {"problem": 23, "code": "reduce conj nil", "user": "56cefadee4b0ea9b8538f763"}, {"problem": 23, "code": "(fn r[m]\n\t(let [s (reduce conj '() m)]\n      (cond (vector? m) (vec s)\n            (set? m) s)))", "user": "56fa8984e4b07572ad1a88c1"}, {"problem": 23, "code": "reduce conj '()", "user": "56f3e77ee4b046a417f92058"}, {"problem": 23, "code": "reduce conj ()", "user": "56ebcbf6e4b04a395b9a0428"}, {"problem": 23, "code": "into ()", "user": "56f8b6efe4b07572ad1a88a5"}, {"problem": 23, "code": "(fn [sequence]\n  (reduce #(cons %2 %)\n          '()\n          sequence))", "user": "56fbe0cce4b07572ad1a88d8"}, {"problem": 23, "code": "(fn [x]\n  (loop [s x acc []]\n    (if (empty? s)\n      acc\n      (recur (rest s)(cons (first s) acc)))))", "user": "56f9c7c6e4b07572ad1a88ba"}, {"problem": 23, "code": "(fn [seq] (reduce conj (list) seq))", "user": "55c508f0e4b0e31453f649ac"}, {"problem": 23, "code": "(fn a [lst]\n  (loop [b lst c '()]\n      (if (empty? b) c\n          (recur (rest b) (conj c (first b))))))", "user": "56fc1bc7e4b07572ad1a88dd"}, {"problem": 23, "code": "(fn [sek] (reduce #(conj % %2) '() sek))", "user": "56785234e4b05957ce8c6177"}, {"problem": 23, "code": "(fn c23 ;; reverse a sequence\n  [c]\n  (loop [v c, r '()]\n    (if (empty? v) r (recur (rest v) (conj r (first v)))))\n  )", "user": "56f09bf4e4b04a395b9a047f"}, {"problem": 23, "code": "#(reduce (fn [a b] (conj a b)) (seq (list (first %))) (rest %))", "user": "56fc7cb4e4b08d47c977819a"}, {"problem": 23, "code": "(fn spe-reverse\n  [coll]\n  (into () coll)\n  )", "user": "56fa972be4b07572ad1a88c2"}, {"problem": 23, "code": "#(into () %)", "user": "56f180a5e4b04a395b9a0492"}, {"problem": 23, "code": "(fn [coll] (reduce conj '() coll))", "user": "56ede653e4b04a395b9a0449"}, {"problem": 23, "code": "reduce conj '()", "user": "56fc1d61e4b07572ad1a88de"}, {"problem": 23, "code": "#( \n  loop[ rev-seq [] o-seq % ]\n  (\n    if (= o-seq '())\n    rev-seq\n    (\n     recur \n     (into [(first o-seq)] rev-seq)\n     (rest o-seq)\n     )\n  )\n)", "user": "56f97711e4b07572ad1a88b2"}, {"problem": 23, "code": "(fn [s]\n  (loop [s s r ()]\n    (if (empty? s)\n      r\n      (recur (drop 1 s) (cons (first s) r)))))", "user": "56df632ce4b0ca2494a095f2"}, {"problem": 23, "code": "reduce conj ()", "user": "56fdd9a1e4b08d47c97781a8"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "56fde58ae4b08d47c97781aa"}, {"problem": 23, "code": "(fn [c] (reduce #(cons %2 %1) '() c))", "user": "56f4cedce4b046a417f92063"}, {"problem": 23, "code": "(fn [ls] (reduce conj () ls))", "user": "56fee925e4b08d47c97781b7"}, {"problem": 23, "code": "reduce conj ()", "user": "56fee4c0e4b08d47c97781b5"}, {"problem": 23, "code": "(letfn [(f [L]\n  (if (empty? L)\n    []\n    (concat\n      (f (rest L))\n      (list (first L))   )))] f)", "user": "570005efe4b08d47c97781c4"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "57006957e4b08d47c97781c8"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "56f7bed6e4b08e7d20b96832"}, {"problem": 23, "code": "(fn my-rev [s]\n  (loop [s s\n         r []]\n    (if (empty? s)\n      r\n      (recur (butlast s) (conj r (last s))))))", "user": "55ad2d97e4b03311e7b732a2"}, {"problem": 23, "code": "reduce (fn [x y] (conj x y)) nil", "user": "5700ec08e4b08d47c97781cd"}, {"problem": 23, "code": "#(map (partial nth (vec %)) (range (- (count %) 1) -1 -1))", "user": "5700f1f0e4b08d47c97781ce"}, {"problem": 23, "code": "(fn [coll]\n  (reduce conj () coll))", "user": "56e5e4aee4b02e7e935eb6c0"}, {"problem": 23, "code": "reduce #(cons %2 %) []", "user": "57008afae4b08d47c97781ca"}, {"problem": 23, "code": "#(into '() %)", "user": "57002b81e4b08d47c97781c7"}, {"problem": 23, "code": "#((fn [x y] (println x y) (if (empty? x) y (recur (take (dec (count x)) x) (conj  y (last x))))) % [])", "user": "57011eb3e4b08d47c97781d1"}, {"problem": 23, "code": "reduce conj ()", "user": "567e6d24e4b0feffd0d18eb4"}, {"problem": 23, "code": "(fn [s]\n  (reduce #(conj %1 %2) '() s))", "user": "5701f886e4b08d47c97781d9"}, {"problem": 23, "code": "#(into () %)", "user": "5587d91ae4b059ccff29b1e9"}, {"problem": 23, "code": "#(into '() %)", "user": "56fd020ee4b08d47c97781a0"}, {"problem": 23, "code": "(fn [seq] (loop [revseq '() theseq seq] (if (empty? theseq) revseq (recur (conj revseq (first theseq)) (rest theseq)))))", "user": "56fbcc1fe4b07572ad1a88d5"}, {"problem": 23, "code": "#(reduce conj () % )", "user": "57023fc2e4b08d47c97781db"}, {"problem": 23, "code": "#(into '() %)", "user": "56e42593e4b03a7c14b85a48"}, {"problem": 23, "code": "(fn [xs] (loop [xs xs\n                rev '()]\n           (if (empty? xs)\n             rev\n             (recur (rest xs) (cons (first xs) rev)))))", "user": "551ae9a7e4b07993ea3788c8"}, {"problem": 23, "code": "into ()", "user": "56fda2bae4b08d47c97781a6"}, {"problem": 23, "code": "(fn foo [x] (if (< 1 (count x)) (concat [(last x)] (foo (take (- (count x) 1) x))) [(last x)] ))", "user": "5703386fe4b08d47c97781ed"}, {"problem": 23, "code": "reduce #(conj %1 %2) ()", "user": "57035ccfe4b08d47c97781ef"}, {"problem": 23, "code": "(partial reduce conj ())", "user": "56fe665be4b08d47c97781af"}, {"problem": 23, "code": "reduce conj ()", "user": "56e6e1e6e4b02e7e935eb6cf"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "56fbf83de4b07572ad1a88da"}, {"problem": 23, "code": "(fn rev [x]\n (into '() x))", "user": "5703d21ae4b08d47c97781ff"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "57037a23e4b08d47c97781f2"}, {"problem": 23, "code": "(fn [s] (reduce conj () s))", "user": "557a2891e4b05c286339e09f"}, {"problem": 23, "code": "(fn [s]\n  (reduce conj () s))", "user": "5703cbbee4b08d47c97781fb"}, {"problem": 23, "code": "into (list)", "user": "5703cd50e4b08d47c97781fc"}, {"problem": 23, "code": "#(reduce (fn [a b] (concat [b] a)) [] %)", "user": "5703eda3e4b08d47c9778200"}, {"problem": 23, "code": "(fn [x] (reduce #(cons %2 %1) [] x))", "user": "569d095fe4b0542e1f8d1470"}, {"problem": 23, "code": "(fn my-reverse [xs] (if (= (rest xs) '()) xs (conj (my-reverse (drop-last xs)) (last xs))))", "user": "56fff6a4e4b08d47c97781c3"}, {"problem": 23, "code": "reduce #(conj %1 %2) '()", "user": "570459a9e4b0b0fb43fd0662"}, {"problem": 23, "code": "(fn [arr] (let \n            [rev \n             (fn [revsd [head & the-rest]] \n                 (if (= (count the-rest) 0)\n                     (cons head revsd) \n                     (recur (cons head revsd) the-rest)\n                  )\n                 )\n             ] \n              (rev [] (vec arr))          \n            )\n  )", "user": "56f0ecf4e4b04a395b9a0484"}, {"problem": 23, "code": "(fn reverse2 [x]\n  (if (= (count x) 1)\n     x\n     (conj (reverse2 (butlast x)) (last x))))", "user": "57027310e4b08d47c97781e2"}, {"problem": 23, "code": "(fn myReverse [x]\n  (if (=(count x) 1)\n    x\n    (conj (myReverse (butlast x))(last x))))", "user": "5703d1fee4b08d47c97781fe"}, {"problem": 23, "code": "#(into () %)\n\n;;#(reduce conj() %)", "user": "5703c4c4e4b08d47c97781f7"}, {"problem": 23, "code": "#(into () %)", "user": "570243e2e4b08d47c97781dd"}, {"problem": 23, "code": "#(into '() %)", "user": "570377c1e4b08d47c97781f1"}, {"problem": 23, "code": "(fn me [x] (if (empty? x) x (conj (me (butlast x)) (last x)) ))", "user": "5703ce0fe4b08d47c97781fd"}, {"problem": 23, "code": "#(loop [s % r '()] (if (= 0 (count s)) r (recur (rest s) (conj r (first s)))))", "user": "56a9d4bbe4b07966d5a8a07b"}, {"problem": 23, "code": "(fn rev-seq [s]\n  (loop [new-seq [], x (seq s), n (- (count s) 1)]\n    (if (< n 0)\n      new-seq\n      (recur (conj new-seq (nth x n)) x (- n 1)))))", "user": "57040195e4b08d47c9778202"}, {"problem": 23, "code": "(fn [x] (into '() x))", "user": "56603c7fe4b068f2fe63dc49"}, {"problem": 23, "code": "(fn my-reverse\n  ([arr] (my-reverse (take (dec (count arr)) arr) (conj [] (last arr))))\n  ([arr reversed] (if (not (empty? arr)) (my-reverse (take (dec (count arr)) arr) (conj reversed (last arr))) (seq reversed)))\n)", "user": "570578aae4b0b0fb43fd0673"}, {"problem": 23, "code": "#(loop [x [] y (vec %)]\n    (if (empty? y)\n      x\n      (recur (conj x (last y)) (pop y))))", "user": "570362ece4b08d47c97781f0"}, {"problem": 23, "code": "(fn [k] (reduce conj () k))", "user": "56ecf2e6e4b04a395b9a0440"}, {"problem": 23, "code": "(fn [x]\n  (letfn [(rev [y z]\n               (if (empty? y)\n                 z\n                 (rev (rest y) (cons (first y) z))))]\n    (rev x ())))", "user": "56eaf8f1e4b04a395b9a0419"}, {"problem": 23, "code": "into()", "user": "57064231e4b0b0fb43fd067a"}, {"problem": 23, "code": "reduce #(cons %2 %1) []", "user": "56f02c90e4b04a395b9a0472"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "57016724e4b08d47c97781d6"}, {"problem": 23, "code": "#(into () %)", "user": "5702da69e4b08d47c97781e8"}, {"problem": 23, "code": "(fn [lst]\n    ((fn [lst ret]\n    (if (= lst '())\n      ret\n      (recur (rest lst) (conj ret (first lst))))) lst '()))", "user": "570708fce4b0b0fb43fd0687"}, {"problem": 23, "code": "reduce conj()", "user": "57067a0ee4b0b0fb43fd067e"}, {"problem": 23, "code": "(fn [vec] (loop [v vec res []] (if (empty? v) res (recur (take (- (count v) 1) v) (conj res (last v))))))", "user": "57061d20e4b0b0fb43fd0679"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "56ea8374e4b04a395b9a0404"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5706d8dfe4b0b0fb43fd0685"}, {"problem": 23, "code": "#(into () %)", "user": "5707e579e4b0b0fb43fd0694"}, {"problem": 23, "code": "reduce #(cons %2 %1) []", "user": "5707abfce4b0b0fb43fd068d"}, {"problem": 23, "code": "#(into '() %)", "user": "5705e404e4b0b0fb43fd0676"}, {"problem": 23, "code": "reduce conj ()", "user": "57082299e4b0b0fb43fd0698"}, {"problem": 23, "code": "reduce conj ()", "user": "5708b96ce4b0b0fb43fd06a3"}, {"problem": 23, "code": "#(loop [l % n []] \n   (if (empty? l) n (recur (rest l) (cons (first l) n))))", "user": "56c89c2ce4b0ed865f9758d4"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "57090dffe4b0b0fb43fd06a6"}, {"problem": 23, "code": "(fn [items]\n  ((fn [reversed remaining]\n    (if (empty? remaining)\n      reversed\n      (recur (conj reversed (first remaining)) (rest remaining))))\n  '() items))", "user": "57084634e4b0b0fb43fd069b"}, {"problem": 23, "code": "(fn [col] (loop [r '() col col] (if (seq col) (recur (conj r (first col)) (rest col)) r)))", "user": "5709eacde4b0b0fb43fd06b3"}, {"problem": 23, "code": "#(into '() %)", "user": "56fc0601e4b07572ad1a88db"}, {"problem": 23, "code": "(fn reverse-recursively [coll]\n  (loop [[r & more :as all] (seq coll)\n         acc '()]\n    (if all\n      (recur more (cons r acc))\n      acc)))", "user": "57044b67e4b0b0fb43fd0661"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "570577bbe4b0b0fb43fd0672"}, {"problem": 23, "code": "(fn [thing] (reduce conj '() thing))", "user": "57073037e4b0b0fb43fd0689"}, {"problem": 23, "code": "(fn my-reverse [a-seq]\n  (loop [out [], updated-seq a-seq]\n    (let [[first-element & rest-of-seq] (seq updated-seq)]\n      (if (empty? updated-seq)\n        out  \n        (recur (conj (seq out) first-element) rest-of-seq)))))", "user": "57042a94e4b0b0fb43fd0660"}, {"problem": 23, "code": "#(for [x (range (count %))]\n   (nth (seq %) (- (count %) (+ 1 x)))\n)", "user": "57040e34e4b08d47c9778203"}, {"problem": 23, "code": "(fn [lst]\n  (loop [lst lst\n         rev '()]\n    (if (empty? lst)\n      rev\n      (recur (rest lst) (cons (first lst) rev)))))", "user": "56acfee5e4b03c432f18734f"}, {"problem": 23, "code": "(fn my-rev [x] (if (> (count x) 1) (cons (last x) (my-rev (take (dec (count x)) x))) x))", "user": "56ff7ffee4b08d47c97781be"}, {"problem": 23, "code": "#(loop [lst % current []] \n   (if (empty? lst)\n   current\n   (recur (rest lst) (concat [(first lst)] current))))", "user": "570b421ee4b0b0fb43fd06be"}, {"problem": 23, "code": "#(reduce (fn [x y] (conj x y)) '() %)", "user": "570bb66de4b0b0fb43fd06c2"}, {"problem": 23, "code": "(fn [ss] (into () (seq ss)))", "user": "5663cccee4b0e91d5f5c5655"}, {"problem": 23, "code": "#(into () %)", "user": "5707c364e4b0b0fb43fd0691"}, {"problem": 23, "code": "reduce conj ()", "user": "56ab7578e4b03c432f18733d"}, {"problem": 23, "code": "(fn [coll]\n  (if (empty? coll)\n    coll\n    (loop [x (first coll)\n           sq (rest coll)\n           acc (conj () x)]\n      (if (empty? sq)\n        acc\n        (recur (first sq) (rest sq) (conj acc (first sq)))))))", "user": "56cb4d06e4b0ea9b8538f72e"}, {"problem": 23, "code": "(fn [x]\n  (loop [os x ns '()]\n    (if (empty? os)\n      ns\n      (recur (rest os) (cons (first os) ns)))))", "user": "570dc955e4b0b0fb43fd06e0"}, {"problem": 23, "code": "#(into () %)", "user": "570dfc96e4b0b0fb43fd06e4"}, {"problem": 23, "code": "(fn [col] \n  (reduce conj '() col))", "user": "54f5aa4ce4b0f2f3c5226e94"}, {"problem": 23, "code": "#(into () %)", "user": "570e13d3e4b0b0fb43fd06e6"}, {"problem": 23, "code": "(partial into '())", "user": "570d1bb4e4b0b0fb43fd06d4"}, {"problem": 23, "code": "reduce conj ()", "user": "570ab24fe4b0b0fb43fd06b7"}, {"problem": 23, "code": "#(into '() %)", "user": "570dd7ece4b0b0fb43fd06e1"}, {"problem": 23, "code": "(fn [x] (reduce conj (cons (first x) (empty x)) (next x)))", "user": "570eeca5e4b0b0fb43fd06fb"}, {"problem": 23, "code": "(fn [my-seq]\n  (loop [r-seq '()\n         curr-seq (seq my-seq)]\n    (if (empty? curr-seq)\n      r-seq\n      (recur \n       (conj r-seq (first curr-seq))\n       (rest curr-seq)\n       ))))", "user": "570f41f8e4b0b0fb43fd0702"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "570f6f55e4b0b0fb43fd0704"}, {"problem": 23, "code": "(partial into '())", "user": "570b4db8e4b0b0fb43fd06bf"}, {"problem": 23, "code": "reduce (fn [a b] (cons b a)) []", "user": "570f8fcee4b09c608db70423"}, {"problem": 23, "code": "(fn [seq] (reduce (fn [x y] (conj x y)) '() seq))", "user": "56e30cefe4b03a7c14b85a3d"}, {"problem": 23, "code": "(fn [x] (reduce conj () x))", "user": "56b506d5e4b0982f16b37e2d"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "570e40b8e4b0b0fb43fd06ea"}, {"problem": 23, "code": "reduce conj ()", "user": "570eeb66e4b0b0fb43fd06fa"}, {"problem": 23, "code": "(fn reverse-sequence[x](if (empty? x)'()(cons (last x) (reverse-sequence (butlast x)))))", "user": "57109477e4b09c608db70435"}, {"problem": 23, "code": "#(let [emptyColl (empty %)]\n              (loop [result (empty %) remaining %]\n                (if (empty? remaining)\n                  result\n                  (recur (concat (conj emptyColl (first remaining)) result)\n                         (rest remaining)))))", "user": "5711b532e4b09c608db70449"}, {"problem": 23, "code": "(fn my-reverse [sq]\n   (loop [r nil s sq]\n     (if (empty? s)\n       r\n       (recur (cons (first s) r) (rest s)))))", "user": "5711ca24e4b09c608db7044b"}, {"problem": 23, "code": "(fn [s]\n  (loop [in s out '()]\n    (if (empty? in)\n      out\n      (recur (rest in) (conj out (first in)))\n      )\n   )\n  )", "user": "5708e8f6e4b0b0fb43fd06a4"}, {"problem": 23, "code": "(fn [some-sequence] (reduce conj '() some-sequence))", "user": "571107b3e4b09c608db7043f"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "5622b58de4b03f08ee9a922c"}, {"problem": 23, "code": "(fn my-reverse [xs] (when xs\n    (cons (last xs) (my-reverse (butlast xs)))))", "user": "57126104e4b09c608db70458"}, {"problem": 23, "code": "(fn my-reverse\n   ([coll] (my-reverse coll '()))\n   ([coll acc] (if coll\n                 (recur (next coll) (conj acc (first coll)))\n                 acc)))", "user": "5712854ce4b07c98581c3a89"}, {"problem": 23, "code": "reduce (fn [acc b] (concat [b] acc)) ()", "user": "5710140fe4b09c608db7042e"}, {"problem": 23, "code": "reduce conj '()", "user": "5712a404e4b07c98581c3a8d"}, {"problem": 23, "code": "reduce conj ()", "user": "5710e574e4b09c608db7043b"}, {"problem": 23, "code": "into '()", "user": "56f5d0efe4b046a417f92078"}, {"problem": 23, "code": "into ()", "user": "57122b20e4b09c608db70451"}, {"problem": 23, "code": "into ()", "user": "54be9b81e4b0ed20f4ff6ef1"}, {"problem": 23, "code": "#(map-indexed (fn [idx itm] (get (vec %) (- (- (count %) 1) idx))) (vec %))", "user": "57129ed7e4b07c98581c3a8b"}, {"problem": 23, "code": "(fn [se] \n  ((fn [s ne]\n    (if (empty? s)\n      ne \n      (let [el (first s)\n            res (rest s)\n            c (conj ne el)]\n      (recur res c)))) se '()))", "user": "5713c575e4b07c98581c3aab"}, {"problem": 23, "code": "(fn [a] (loop [[x & remain] (seq a) y (empty a)] (if (nil? x) y (recur remain (cons x y)))))", "user": "57080694e4b0b0fb43fd0697"}, {"problem": 23, "code": "into ()", "user": "5715072fe4b07c98581c3aca"}, {"problem": 23, "code": "(fn [ls]\n  (loop [src ls\n              des '[]]\n    (if (empty? src)\n         des\n         (recur (rest src) (cons (first src) des)))))", "user": "57150a8ee4b07c98581c3acb"}, {"problem": 23, "code": "#(into () %)", "user": "57141357e4b07c98581c3ab3"}, {"problem": 23, "code": "(fn [l] (reduce (fn [list, y] (conj list y)) '() l))", "user": "571614d7e4b07c98581c3aed"}, {"problem": 23, "code": "(fn f [x]\n  (loop [x x \n         y ()]\n    (if (= x ())\n      y\n      (recur (rest x) (cons (first x) y)))))", "user": "57152731e4b07c98581c3ad0"}, {"problem": 23, "code": "#(loop [seq %\n        reversed []]\n   (if (empty? seq)\n     reversed\n     (recur (rest seq) (cons (first seq) reversed))))", "user": "57155980e4b07c98581c3ad7"}, {"problem": 23, "code": "(fn [x]  \n   (reduce \n   conj\n   '()\n   x\n   )\n  )", "user": "5713f693e4b07c98581c3ab0"}, {"problem": 23, "code": "(fn rv [lst]\n  (if (empty? lst)\n    lst\n    (cons (last lst) (rv (drop-last lst)))\n    )\n  )", "user": "5713e307e4b07c98581c3aaf"}, {"problem": 23, "code": "#(loop [result () coll %]\n   (if (empty? coll) result\n     (recur (conj result (first coll)) (rest coll))))", "user": "57168db0e4b07c98581c3afc"}, {"problem": 23, "code": "reduce conj '()", "user": "5716acfbe4b07c98581c3b01"}, {"problem": 23, "code": "reduce (fn [v toRet] (cons toRet v )) []", "user": "57168a0de4b07c98581c3afb"}, {"problem": 23, "code": "#(loop [L %, result '()]\n   (if (empty? L)\n     result\n     (recur (rest L) (conj result (first L)))))", "user": "57015a1de4b08d47c97781d4"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5710c24be4b09c608db70439"}, {"problem": 23, "code": "(fn [listA] (loop [listB listA\n                   listO (empty listA)\n                   ]\n              (if (= (count listO) (count listA))\n                listO\n                (recur (rest listB) (cons (first listB) listO)))))", "user": "570d8418e4b0b0fb43fd06de"}, {"problem": 23, "code": "( fn [ x ] (reduce conj () x) )", "user": "5602842de4b04bb52996e1a1"}, {"problem": 23, "code": "reduce conj '()", "user": "5716845be4b07c98581c3afa"}, {"problem": 23, "code": "(fn reverse' ([xs] (reverse' xs []))\n             ([xs rev]\n              (cond (empty? xs) rev\n              \t\t:otherwise (reverse' (rest xs) (cons (first xs) rev)))))", "user": "5717ad6fe4b07c98581c3b14"}, {"problem": 23, "code": "#(into () %)", "user": "570ed30ae4b0b0fb43fd06f6"}, {"problem": 23, "code": "#(into () %)", "user": "5715349be4b07c98581c3ad2"}, {"problem": 23, "code": "#(into '() %)", "user": "5717e367e4b07c98581c3b1d"}, {"problem": 23, "code": "(fn betterReverse\n  [lista]\n  (loop [lista lista reversed ()]\n    (if (empty? lista)\n        reversed\n        (recur (drop-last lista) (concat reversed [(last lista)])))))", "user": "56fe2a2fe4b08d47c97781ad"}, {"problem": 23, "code": "(fn reverseit [coll]\n    (if (empty? coll)\n      nil\n      (cons (last coll) (reverseit (drop-last coll)))\n      )\n)", "user": "57131dfbe4b07c98581c3a98"}, {"problem": 23, "code": "#(reduce (fn [xs x] (cons x xs)) () %)", "user": "565cc7a6e4b068f2fe63dc19"}, {"problem": 23, "code": "reduce conj ()", "user": "571456f1e4b07c98581c3abb"}, {"problem": 23, "code": "into '()", "user": "56739bdce4b05957ce8c6122"}, {"problem": 23, "code": "(fn [col] (reduce conj '() col))", "user": "5719465fe4b07c98581c3b36"}, {"problem": 23, "code": "(fn [full-coll]\n  (loop [remaining full-coll\n         coll []]\n    (if (empty? remaining)\n      coll\n      (recur (drop-last remaining) (into coll [(last remaining)])))))", "user": "5716cc16e4b07c98581c3b02"}, {"problem": 23, "code": "reduce #(conj %1 %2) '()", "user": "570794d8e4b0b0fb43fd068b"}, {"problem": 23, "code": "reduce conj ()", "user": "570a9be7e4b0b0fb43fd06b6"}, {"problem": 23, "code": "(partial reduce conj ())", "user": "5717b57de4b07c98581c3b15"}, {"problem": 23, "code": "into ()", "user": "5714e82ae4b07c98581c3ac9"}, {"problem": 23, "code": "#(loop [a % result []]\n    (if (empty? a)\n      result\n      (recur (rest a) (cons (first a) result))))", "user": "57147cd9e4b07c98581c3abf"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5715c337e4b07c98581c3ae3"}, {"problem": 23, "code": "reduce conj `()", "user": "5716d585e4b07c98581c3b03"}, {"problem": 23, "code": "(fn [coll] (reduce conj '() coll))", "user": "5715b67fe4b07c98581c3ae1"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "571bc0a1e4b07c98581c3b6c"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "570d5b10e4b0b0fb43fd06dc"}, {"problem": 23, "code": "reduce conj ()", "user": "571ac0b8e4b07c98581c3b5b"}, {"problem": 23, "code": "(fn [coll] \n  (apply conj nil coll))", "user": "571c2babe4b07c98581c3b73"}, {"problem": 23, "code": "#(reduce (fn [cur item_] (conj cur item_)) nil %)", "user": "571ae32ae4b07c98581c3b5f"}, {"problem": 23, "code": "(fn [coll] (loop [coll coll\n                  acc '()]\n             (if (empty? coll)\n               acc\n               (recur (rest coll) (conj acc (first coll))))))", "user": "571cd9dce4b0145328a76271"}, {"problem": 23, "code": "(fn [l]\n  \"Reverse a sequence\"\n  [l]\n  (let [f (fn [[h & t :as s] acc]\n            (if (nil? s)\n              acc\n              (recur\n               t (conj acc h))))]\n    (f (seq l) nil)))", "user": "571d063ee4b0145328a76272"}, {"problem": 23, "code": "#(loop [result '() c %]\r\n    (if(empty? c) result\r\n      (recur\n       (cons (first c) result)\r\n       (rest c))))", "user": "571c89b5e4b0145328a7626d"}, {"problem": 23, "code": "(fn [x]\n  (loop [reversed '()                                                           \n         l x\n         ]\n    (if (= (first l) nil)\n      reversed\n      (recur (conj reversed (first l)) (rest l)))))", "user": "571b900ae4b07c98581c3b69"}, {"problem": 23, "code": "#(reduce conj '() %1)", "user": "570e6974e4b0b0fb43fd06ef"}, {"problem": 23, "code": "#(into () %)", "user": "571dd145e4b0145328a76283"}, {"problem": 23, "code": "#(for [x (range (- (count %) 1) -1 -1)] (nth (seq %) x))", "user": "5717bcffe4b07c98581c3b16"}, {"problem": 23, "code": "(fn [x] (reduce #(conj %1 %2) '() x) )", "user": "5717d674e4b07c98581c3b1a"}, {"problem": 23, "code": "(fn myrev [x] (if (empty? x) [] (conj (myrev (rest x)) (first x))))", "user": "571aad45e4b07c98581c3b59"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "571e5c9ee4b0145328a76290"}, {"problem": 23, "code": "(fn rev [l] (if (empty? l) (vector) (conj (rev (rest l)) (first l))))", "user": "4df73d64535d04ed9115e775"}, {"problem": 23, "code": "#(into () %)", "user": "571eeb49e4b0145328a7629c"}, {"problem": 23, "code": "#(into () %)", "user": "571f5b4ce4b0145328a762a5"}, {"problem": 23, "code": "#(into '() %)", "user": "571e819ae4b0145328a76294"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "566e996ae4b0a866af6896dd"}, {"problem": 23, "code": "#(loop [initial % result []]\n    (if (empty? initial)\n        result\n        (recur (rest initial) (cons (first initial) result))))", "user": "571fb6a0e4b0145328a762b5"}, {"problem": 23, "code": "(fn rev [ls]\n  (cond (empty? ls) '()\n        :else (concat (rev (rest ls)) (list (first ls)))))", "user": "5716540fe4b07c98581c3af3"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "56df63e1e4b0ca2494a095f6"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "56df629fe4b0ca2494a095ee"}, {"problem": 23, "code": "(fn my-reverse [x]\n  (if (empty? x) () (conj (my-reverse (butlast x)) (last x))))", "user": "56df6351e4b0ca2494a095f3"}, {"problem": 23, "code": "into ()", "user": "548f3ed8e4b0e286459a1236"}, {"problem": 23, "code": "(fn [x] (apply conj () x))", "user": "572010a4e4b0c5bde472c08c"}, {"problem": 23, "code": "(fn\n  [lst]\n  (into () lst))", "user": "56df6498e4b0ca2494a095f8"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "56df6417e4b0ca2494a095f7"}, {"problem": 23, "code": "(fn [coll] (reduce conj '() coll))", "user": "56df63c7e4b0ca2494a095f5"}, {"problem": 23, "code": "into '()", "user": "571e6d73e4b0145328a76292"}, {"problem": 23, "code": "(fn [l]\n  (let [f (fn [old new]\n            (if (empty? old)\n              new\n              (recur (rest old) (conj new (first old)))))]\n    (f l '())))", "user": "5703cb87e4b08d47c97781f9"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "56df6301e4b0ca2494a095f1"}, {"problem": 23, "code": "into ()", "user": "57210b6de4b0c5bde472c0a6"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "571ff1ebe4b0c5bde472c088"}, {"problem": 23, "code": "(fn [lst]\n (loop [lst lst\n        lstA ()]\n   (if (empty? lst)\n     lstA\n     (recur (rest lst) (conj lstA (first lst))))))", "user": "56e9a56ae4b04a395b9a03fc"}, {"problem": 23, "code": "#(reduce conj '() %1)", "user": "56d9883ae4b0ea9b8538f7f4"}, {"problem": 23, "code": "(fn [vect] \n  (\n   (fn coll [new old]\n     (if (= 0 (count old)) new\n       (coll (conj new (first old)) (rest old))\n     )\n   )\n   ()\n   vect)\n)", "user": "5721f13ce4b0c5bde472c0be"}, {"problem": 23, "code": "apply conj ()", "user": "570e8d86e4b0b0fb43fd06f2"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "57210e8ee4b0c5bde472c0a8"}, {"problem": 23, "code": "(fn [ilist] (loop [f ilist t (empty ilist)]\n              (if (empty? f)\n                t\n                (recur (rest f) (cons (first f) t)))))", "user": "5720fc08e4b0c5bde472c0a3"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "570cd4bde4b0b0fb43fd06cf"}, {"problem": 23, "code": "(fn [s] (map (vec s) (range (dec (count s)) -1 -1)))", "user": "5722b6ece4b0c5bde472c0d4"}, {"problem": 23, "code": "(fn func\n  [x]\n  (if (empty? (rest x))\n    x\n    (concat (func (rest x)) (list (first x)))\n   )\n  )", "user": "56de78fde4b0ea9b8538f83c"}, {"problem": 23, "code": "#(loop [str % rev nil] (if-let [a (first str)] (recur (rest str) (conj rev a)) rev))", "user": "5720ba36e4b0c5bde472c09c"}, {"problem": 23, "code": "reduce #(conj %1 %2) '()", "user": "570243c4e4b08d47c97781dc"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5721cd3be4b0c5bde472c0ba"}, {"problem": 23, "code": "(fn \n  [l]\n  (loop [l l\n         res ()]\n    (if (empty? l) res\n      (recur (rest l) (cons (first l) res)))))", "user": "56df636ae4b0ca2494a095f4"}, {"problem": 23, "code": "#(loop [c (count %)\n       rev-seq %\n        sample-seq %]\n   (if (== c 0)\n     rev-seq\n     (recur (dec c)(cons (first sample-seq) (butlast rev-seq)) (rest sample-seq))\n     \n   )\n  )", "user": "56ec889ee4b04a395b9a043c"}, {"problem": 23, "code": "(fn o\n  [lst]\n  (loop [lista lst\n         r ()]\n    (cond\n     (empty? lista) r\n     :else (recur (rest lista) (cons (first lista )r)))))", "user": "5723e6d6e4b0c5bde472c0f1"}, {"problem": 23, "code": "(fn [coll] (reduce conj '() coll))", "user": "571de0a2e4b0145328a76284"}, {"problem": 23, "code": "(fn [xs]\n    (reduce (fn [memo x] (cons x memo)) [] xs))", "user": "570d0548e4b0b0fb43fd06d2"}, {"problem": 23, "code": "(fn [a]\n  ((fn loo [x r]\n     (if (empty? x)\n       r\n       (loo\n        (rest x)\n        (conj\n         r\n         (first x)))))\n   a\n   '()))", "user": "5721dfc3e4b0c5bde472c0bb"}, {"problem": 23, "code": "reduce #(conj %1 %2) nil", "user": "57220050e4b0c5bde472c0c1"}, {"problem": 23, "code": "#(into () %)", "user": "56f86f98e4b08e7d20b96837"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "571f341de4b0145328a762a0"}, {"problem": 23, "code": "reduce conj ()", "user": "57262196e4b0c5bde472c11e"}, {"problem": 23, "code": "apply conj ()", "user": "5726448ae4b0c5bde472c122"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "51c84a9ce4b07ef393169e54"}, {"problem": 23, "code": "into ()", "user": "5726adf8e4b0c5bde472c12b"}, {"problem": 23, "code": "reduce conj ()", "user": "5724a4dae4b0c5bde472c0fe"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "57201f14e4b0c5bde472c08e"}, {"problem": 23, "code": "(fn [x] (into '() x))", "user": "57211a02e4b0c5bde472c0a9"}, {"problem": 23, "code": "reduce conj ()", "user": "572722c4e4b0c5bde472c134"}, {"problem": 23, "code": "(fn [x] (into '() x))", "user": "57213df6e4b0c5bde472c0ab"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "57283dbce4b0c5bde472c154"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "57262710e4b0c5bde472c120"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "57289d7ee4b0c5bde472c15d"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "55f4394ae4b06e875b46ce69"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "57291a39e4b0c6e51e0d2b14"}, {"problem": 23, "code": "(fn [c] (reduce conj '() c))", "user": "56403765e4b08d4f616f5edc"}, {"problem": 23, "code": "#(into '() %)", "user": "5729277fe4b0c6e51e0d2b17"}, {"problem": 23, "code": "(fn rev [lst]\n  (if (empty? lst) '()\n    (cons (last lst) (rev (butlast lst)))))", "user": "56df62b3e4b0ca2494a095ef"}, {"problem": 23, "code": "reduce conj ()", "user": "57294e90e4b0c6e51e0d2b19"}, {"problem": 23, "code": "(fn [xs] (loop [nl '(), ol xs] (if (empty? ol) nl (recur (cons (first ol) nl) (rest ol)))))", "user": "56d340fde4b0ea9b8538f7ab"}, {"problem": 23, "code": "(partial\n  (fn myreverse [acc xs]\n    (if (empty? xs)\n      acc\n      (myreverse (cons (first xs) acc)\n                 (rest xs))))\n  '())", "user": "572a35a9e4b0f4d77e65122f"}, {"problem": 23, "code": "reduce #(conj %1 %2) '()", "user": "572a3d77e4b0f4d77e651230"}, {"problem": 23, "code": "#(into '() %)", "user": "572a3d8ce4b0f4d77e651231"}, {"problem": 23, "code": "(fn [coll]\n  (loop [coll coll\n         rcs '()]\n    (if (first coll)\n      (recur \n       (next coll)\n       (cons (first coll) rcs))\n      rcs)))", "user": "57275755e4b0c5bde472c13b"}, {"problem": 23, "code": "reduce conj '()", "user": "572a60cee4b0f4d77e651237"}, {"problem": 23, "code": "(fn [sq] \n    (reduce (fn [result item] \n              (cons item result)) [] sq\n              )\n    )", "user": "571a282ae4b07c98581c3b46"}, {"problem": 23, "code": "(fn __ [ob]\n  \n  ((fn [ans inp]\n     (if (zero? (count inp))\n       ans\n       (recur (conj ans (last inp)) (drop-last inp)))) [] ob ))", "user": "56305383e4b073c1cf7a9be6"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "57299c57e4b0c6e51e0d2b1e"}, {"problem": 23, "code": "(fn\n  [items]\n  (loop [curr items revd '()]\n  \t(if (empty? curr)\n       revd     \n       (recur (rest curr) (cons (first curr) revd)))))", "user": "572a997ce4b0f4d77e65123e"}, {"problem": 23, "code": "(fn \n  [lst] (reduce conj '() lst))", "user": "56df7440e4b0ca2494a095fb"}, {"problem": 23, "code": "(fn [s]\n   (loop [nsq [] osq s]\n     (if (= osq [])\n       nsq\n       (recur (cons (first osq) nsq) (rest osq))\n      )\n     )\n   )", "user": "572c1f65e4b0cd1946bd0f4a"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "572c198fe4b0cd1946bd0f49"}, {"problem": 23, "code": "(fn mf\n  ([in]\n   (mf in '()))\n  ([in out]\n   (if (seq in)\n     (recur (rest in) (cons (first in) out))\n     out)))", "user": "57237a02e4b0c5bde472c0e5"}, {"problem": 23, "code": "#(into () %)", "user": "572ca54ae4b0cd1946bd0f59"}, {"problem": 23, "code": "#(into () %)", "user": "5684c439e4b04eec3ec5cfc1"}, {"problem": 23, "code": "#(into () %)", "user": "572c9f76e4b0cd1946bd0f57"}, {"problem": 23, "code": "(fn __ [xs]\n    (if-not (empty? xs)\n        (conj (__ (rest xs)) (first xs))\n        []\n    )\n)", "user": "55c9ff22e4b0e31453f649f3"}, {"problem": 23, "code": "(fn reversed\n  ([s] (reversed s '()))\n  ([s r]\n   (if (empty? s)\n     r\n     (recur (rest s) (conj r (first s))))))", "user": "572db6d5e4b0cd1946bd0f78"}, {"problem": 23, "code": "reduce conj ()", "user": "553e3260e4b0a04f792994eb"}, {"problem": 23, "code": "#(into () %)", "user": "54b0519be4b09f271ff37d14"}, {"problem": 23, "code": "reduce #(cons %2 %1 ) '()", "user": "572ac718e4b0f4d77e651242"}, {"problem": 23, "code": "(fn\n  [s]\n  (loop [s s, new-s '()]\n    (if (seq s)\n      (recur (rest s) (cons (first s) new-s))\n      new-s)))", "user": "56b2630be4b0982f16b37e03"}, {"problem": 23, "code": "reduce conj ()", "user": "57029859e4b08d47c97781e4"}, {"problem": 23, "code": "(fn [l] (reduce #(cons %2 %1) [] l))", "user": "57280b92e4b0c5bde472c14e"}, {"problem": 23, "code": "(fn [v]\n  (let [v1 (reduce conj '() v)]\n    (if (= (class v) clojure.lang.PersistentVector)\n      (vec v1)\n      v1)))", "user": "572e43f7e4b0cd1946bd0f83"}, {"problem": 23, "code": "#(reduce conj '() (apply vector %))", "user": "57300c19e4b0cd1946bd0fa1"}, {"problem": 23, "code": "into ()\n\n;reduce conj ()\n\n;apply conj ()\n\n\n;(fn reverse1 [result coll]\n; (if (empty? coll)\n;   result\n;   (recur (conj result (first coll)) (rest coll)))) ()", "user": "572830e6e4b0c5bde472c152"}, {"problem": 23, "code": "(fn [lst]\n  (loop [acc '()\n         lst lst]\n    (if (empty? lst)\n      acc\n      (recur (conj acc (first lst))\n             (rest lst)))))", "user": "56b9c644e4b0f2655033593a"}, {"problem": 23, "code": "(fn reverse-a-seq [s]\n  (into () s))", "user": "572ea970e4b0cd1946bd0f89"}, {"problem": 23, "code": "(fn [in]\n  (loop [in (seq in) i 0 out (take 0 in)]\n    (if (>= i (count in))\n      out\n      (recur in (inc i) (conj out (nth in i)))\n      )))", "user": "572bc7cae4b0cd1946bd0f45"}, {"problem": 23, "code": "reduce conj '()", "user": "56faebc2e4b07572ad1a88c8"}, {"problem": 23, "code": "reduce conj '()", "user": "573107d5e4b0cd1946bd0fbc"}, {"problem": 23, "code": "reduce conj ()", "user": "54cf54b1e4b018d918be98cc"}, {"problem": 23, "code": "(fn [xs] (mapcat #(list (nth  (seq xs) %)) (range (dec (count xs)) -1 -1)))", "user": "56fa2905e4b07572ad1a88be"}, {"problem": 23, "code": "(fn test ([x] (test x '())) ([x y] (if (empty? x) y (test (rest x) (conj y (first x))))))", "user": "5731c1fce4b0cd1946bd0fc7"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5731e5a1e4b0cd1946bd0fca"}, {"problem": 23, "code": "(fn [x] (into () x))", "user": "572a543ee4b0f4d77e651235"}, {"problem": 23, "code": "(fn [coll] (into () coll))", "user": "570940a9e4b0b0fb43fd06aa"}, {"problem": 23, "code": "reduce conj '()", "user": "53829b28e4b06839e8705ed6"}, {"problem": 23, "code": "#(reduce conj '() (seq %))", "user": "56ff45e5e4b08d47c97781bb"}, {"problem": 23, "code": "(fn my-reverse [c1]\n\t(if c1\n\t\t(cons (last c1) (my-reverse (butlast c1)))))", "user": "56ba2f72e4b0f2655033593f"}, {"problem": 23, "code": "#(reduce (fn [a b] (conj a b)) '() %)", "user": "572f09f2e4b0cd1946bd0f94"}, {"problem": 23, "code": "#(into () %)", "user": "573240eee4b0cd1946bd0fd2"}, {"problem": 23, "code": "(fn reverseit [c]\n  (if (empty? c)\n    nil\n    (cons (last c) (reverseit (drop-last c)) )\n  )\n)", "user": "571aae1fe4b07c98581c3b5a"}, {"problem": 23, "code": "(fn [x] (reduce #(cons %2 %1) () x))", "user": "573407f0e4b0cd1946bd1001"}, {"problem": 23, "code": "(fn my_reverse [lst] (if (= 1 (count lst)) lst (concat (take-last 1 lst) (my_reverse (drop-last lst)))))", "user": "5733e4aee4b0cd1946bd0ffe"}, {"problem": 23, "code": "#(loop [col % rcol []]\n    (if (= col (empty col)) \n      rcol\n      (recur (butlast col) (conj rcol (last col)))))", "user": "568384b4e4b0945ebc182a9a"}, {"problem": 23, "code": "#(into () %)", "user": "573102bbe4b0cd1946bd0fbb"}, {"problem": 23, "code": "(fn [x] (reduce conj '() x))", "user": "57341373e4b0cd1946bd1002"}, {"problem": 23, "code": "#(reduce \n    (fn [x y] (conj x y)) \n        '() \n        %)", "user": "524fd3f0e4b0541d1855b81d"}, {"problem": 23, "code": "#(into [] (into '() %1))", "user": "57226290e4b0c5bde472c0c8"}, {"problem": 23, "code": "(fn [c] (loop [e '() o c] (if (empty? o) e (recur (cons (first o) e) (rest o)))))", "user": "57286f16e4b0c5bde472c159"}, {"problem": 23, "code": "#(apply conj () %)", "user": "573632b7e4b0cd1946bd102f"}, {"problem": 23, "code": "#(into () %)", "user": "573664bbe4b0cd1946bd1031"}, {"problem": 23, "code": "(fn [coll]\n  (into '() coll))", "user": "568a351be4b0dcc4269f408a"}, {"problem": 23, "code": "reduce conj ()", "user": "56d30497e4b0ea9b8538f7a8"}, {"problem": 23, "code": "(fn rev [sq] (reduce (fn [acc el] (cons el acc)) '() sq ))", "user": "561814bae4b06b1bb2182a1a"}, {"problem": 23, "code": "(fn [xs]\n  (if (vector? xs)\n    (vec (into '() xs))\n    (into '() xs)))", "user": "57377ae8e4b0cd1946bd1046"}, {"problem": 23, "code": "#(reduce (fn [acc x] (conj acc x)) '() %)", "user": "55f5b8d6e4b06e875b46ce8d"}, {"problem": 23, "code": "#(into () %)", "user": "5737a781e4b0cd1946bd104b"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "573652e1e4b0cd1946bd1030"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5704789be4b0b0fb43fd0665"}, {"problem": 23, "code": "(fn r[s]\n  (into () s))", "user": "5731e36be4b0cd1946bd0fc9"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "57376dcbe4b0cd1946bd1044"}, {"problem": 23, "code": "(fn [x]\n  (loop [coll x result []]\n    (if (empty? coll)\n      result\n      (recur (butlast coll) (conj result (last coll))))))", "user": "57344edbe4b0cd1946bd1008"}, {"problem": 23, "code": "into ()", "user": "56aa4fa5e4b07966d5a8a085"}, {"problem": 23, "code": "#(reduce (fn [a e] (conj a e)) '() %)", "user": "56ea89bfe4b04a395b9a0406"}, {"problem": 23, "code": "#(into () %)", "user": "571172ece4b09c608db70446"}, {"problem": 23, "code": "reduce #(conj %1 %2) '()", "user": "571d9669e4b0145328a7627f"}, {"problem": 23, "code": "(fn myFn [L] (if (= 1 (count L))\n  L (concat (myFn (rest L)) (take 1 L) )))", "user": "57395f32e4b0cd1946bd1070"}, {"problem": 23, "code": "into '()", "user": "5735ac67e4b0cd1946bd102b"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5736e12ee4b0cd1946bd103a"}, {"problem": 23, "code": "(fn [coll]\n  (loop [coll coll rev []]\n    (if (empty? coll)\n      rev\n      (recur (drop-last coll) (conj rev (last coll))))))", "user": "556008aee4b0c656e3ff17be"}, {"problem": 23, "code": "(fn self [seq]\n  (if (empty? seq)\n    []\n  \t(conj (self (rest seq)) (first seq))))", "user": "573118ebe4b0cd1946bd0fbd"}, {"problem": 23, "code": "#(reduce (fn [new-seq element] (conj new-seq element)) '() %)", "user": "5734d751e4b0cd1946bd1018"}, {"problem": 23, "code": "(fn my-reverse [coll]\n  (reduce conj () coll))", "user": "573a0fc7e4b0cd1946bd1089"}, {"problem": 23, "code": "#(into () %)", "user": "57398175e4b0cd1946bd1073"}, {"problem": 23, "code": "#(loop [s (list)\n        input %]\n    (if (seq input)\n      (recur \n       \t(conj s (first input))\n     \t(next input))\n      s\n    ))", "user": "5739fa01e4b0cd1946bd1082"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5739ff3ae4b0cd1946bd1084"}, {"problem": 23, "code": "reduce (fn[x y] (cons y x) ) '()", "user": "57398724e4b0cd1946bd1076"}, {"problem": 23, "code": "#(into () %)", "user": "5734147fe4b0cd1946bd1003"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "518665cde4b0da5a5be3bad2"}, {"problem": 23, "code": "(fn rev\n  [lst]\n  (loop [l lst, acc ()]\n    (if (seq l)\n      (recur (rest l) (conj acc (first l)))\n      acc)))", "user": "573b487de4b0cd1946bd10a1"}, {"problem": 23, "code": "(fn [coll]\n  (into () coll))", "user": "573b440ce4b0cd1946bd10a0"}, {"problem": 23, "code": "(fn [coll] (loop [rev nil coll coll] (if (empty? coll) rev (recur(cons (first coll) rev) (rest coll)))))", "user": "57202eb7e4b0c5bde472c090"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5722d621e4b0c5bde472c0d9"}, {"problem": 23, "code": "reduce conj '()", "user": "5739cbe4e4b0cd1946bd107c"}, {"problem": 23, "code": "(fn my-rev [ls]\n  (let [rev ()]\n  (if\n    (empty? ls)\n    rev\n    (cons (last ls) (my-rev (drop-last ls))))))", "user": "573c57ace4b0cd1946bd10c0"}, {"problem": 23, "code": "(fn [x] (if (list? x) (into '() (apply vector x)) (vec (into '() x))))", "user": "573c813be4b0cd1946bd10c5"}, {"problem": 23, "code": "into '()", "user": "55c3f19de4b0e31453f64991"}, {"problem": 23, "code": "(fn [a c] (if (empty? c) a (recur (conj a (first c)) (rest c)))) nil", "user": "56c26880e4b05cc29241ee81"}, {"problem": 23, "code": "#(into () %)", "user": "573c8377e4b0cd1946bd10c7"}, {"problem": 23, "code": "into '()", "user": "573cc62de4b05c31a32c0809"}, {"problem": 23, "code": "reduce #(cons %2 %1) []", "user": "573ce277e4b05c31a32c080b"}, {"problem": 23, "code": "(fn [q] (reduce #(cons %2 %1) '() q))", "user": "571edeeae4b0145328a7629b"}, {"problem": 23, "code": "(fn [coll] (into '() coll))", "user": "573c45ace4b0cd1946bd10be"}, {"problem": 23, "code": "(fn [s]\n  (loop [result [] s s]\n    (if (seq s)\n      (recur (concat  [(first s)] result ) (rest s)) \n      \n        result)))", "user": "573b664ce4b0cd1946bd10a7"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "573ce085e4b05c31a32c080a"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "572af688e4b0f4d77e651249"}, {"problem": 23, "code": "(fn rev [l]\n   (if (empty? l) l\n     (concat (rev (rest l)) (list (first l)))))", "user": "573f63bfe4b05c31a32c0842"}, {"problem": 23, "code": "into ()", "user": "57407ab3e4b05c31a32c0854"}, {"problem": 23, "code": "(fn [x]\n  ((fn r [s a] (if (empty? s)\n                 a\n                 (r (rest s)\n                    (cons\n                     (first s)\n                     a))))\n   x (empty x)))", "user": "5740f821e4b05c31a32c085e"}, {"problem": 23, "code": "(fn my-reverse [coll] \n(loop [coll coll reversed-ret '()]\n   (if (empty? coll) reversed-ret\n        (recur (rest coll) (cons (first coll) reversed-ret))))\n)", "user": "573940e3e4b0cd1946bd106b"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "519d2a0be4b037b32803f9ae"}, {"problem": 23, "code": "(fn [collection]\n  (loop [[x & xs] (seq collection)\n         result '()]\n    (if x\n      (recur xs (conj result x))\n      result)))", "user": "5725d2d1e4b0c5bde472c116"}, {"problem": 23, "code": "(fn [x] (reduce conj '() x))", "user": "5741defae4b05c31a32c086e"}, {"problem": 23, "code": "(fn [input]\n        ((fn [input output]\n        (if (empty? input)\n            output\n            (recur (rest input) (conj output (first input)))\n            )) input '()))", "user": "573c4d9be4b0cd1946bd10bf"}, {"problem": 23, "code": "(fn\n  [seq]\n  (reduce\n   #(conj %1 %2)\n   '()\n   seq)\n  )", "user": "5736b126e4b0cd1946bd1037"}, {"problem": 23, "code": "#(into () %)", "user": "5726ccf4e4b0c5bde472c12c"}, {"problem": 23, "code": "into '()", "user": "540c5950e4b0addc1aec6701"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "573e2d60e4b05c31a32c0825"}, {"problem": 23, "code": "(fn rev [s]\n  (loop [l s\n         res '()]\n    (if (empty? l)\n      res\n      (recur (rest l) (conj res (first l))))))", "user": "573f3ccfe4b05c31a32c083f"}, {"problem": 23, "code": "(fn [coll]\n  (loop [[x & xs :as all] (seq coll)\n        res '()]\n    (if all\n      (recur xs (cons x res))\n      res\n    )\n  )\n)", "user": "57434339e4b0c285004e8a9f"}, {"problem": 23, "code": "(fn [s] (reduce (fn [acc x] (cons x acc)) (empty s) s))", "user": "57434103e4b0c285004e8a9e"}, {"problem": 23, "code": "(fn [coll] (reduce conj () coll))", "user": "5743b90ce4b0c285004e8aae"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "574311a5e4b05c31a32c0888"}, {"problem": 23, "code": "reduce conj '()", "user": "5721c441e4b0c5bde472c0b9"}, {"problem": 23, "code": "#(into () %)", "user": "573ddfc2e4b05c31a32c081b"}, {"problem": 23, "code": "(fn [s] (into '() s))", "user": "5744adb1e4b009280f9f2b3f"}, {"problem": 23, "code": "(fn reverse-seq [xs]\n  (into '() xs))", "user": "5740e26ee4b05c31a32c085a"}, {"problem": 23, "code": "#(into () %)", "user": "57450a53e4b009280f9f2b45"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "57442c96e4b009280f9f2b33"}, {"problem": 23, "code": "(fn rev [s]\n  (if (empty? s)\n    s\n    (concat (rev (rest s)) (take 1 s))))", "user": "57458b82e4b009280f9f2b4e"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "57454e25e4b009280f9f2b4a"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "573ae296e4b0cd1946bd1097"}, {"problem": 23, "code": "(fn [seq]\n  (loop [remain seq ans '()]\n    (if (empty? (rest remain))\n      (conj ans (first remain))\n      (recur (rest remain) (conj ans (first remain)))\n    )\n  )\n)", "user": "5746061ae4b009280f9f2b5b"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5744e1a2e4b009280f9f2b43"}, {"problem": 23, "code": "(fn [x] (into () x))", "user": "5745f0d7e4b009280f9f2b57"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "57465429e4b009280f9f2b60"}, {"problem": 23, "code": "(fn [x] (loop [c x i []] (if (empty? c) i (recur (butlast c) (conj i (last c))))))", "user": "573ecb77e4b05c31a32c0832"}, {"problem": 23, "code": "reduce conj ()", "user": "5745b884e4b009280f9f2b53"}, {"problem": 23, "code": "(fn [x] (into () x))", "user": "57465526e4b009280f9f2b61"}, {"problem": 23, "code": "into ()", "user": "5746d767e4b009280f9f2b6b"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "571a460ce4b07c98581c3b4d"}, {"problem": 23, "code": "(fn myreverse [v]\n  (if (= '() (rest v))\n    (list (first v))\n    (cons (last v) (myreverse (drop-last v)))\n    )\n  )", "user": "572ec4dde4b0cd1946bd0f8d"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "57440f77e4b0c285004e8ab5"}, {"problem": 23, "code": "into '()", "user": "57408f87e4b05c31a32c0856"}, {"problem": 23, "code": "into '()", "user": "57474aa4e4b009280f9f2b71"}, {"problem": 23, "code": "reduce (fn [t h] (concat (list h) t)) ()", "user": "56bb652ae4b0f26550335953"}, {"problem": 23, "code": "(fn [seq]\n  (reduce conj () seq)\n  )", "user": "56a94562e4b07966d5a8a074"}, {"problem": 23, "code": "(fn foo [x] \n  (let [[fst & rst] (seq x)] \n    (if (empty? rst) \n      (conj [] fst) \n      (conj (foo rst) fst))))", "user": "5747e22ce4b009280f9f2b7c"}, {"problem": 23, "code": "(fn f1 [xs]\n   (let [xss xs]\n     (if (seq xss)\n       (conj (f1 (rest xss)) (first xss))\n       []))\n   )", "user": "5746bd75e4b009280f9f2b66"}, {"problem": 23, "code": "(fn rev \n  [seq] \n  (if (< (count seq) 2)\n    seq\n    (concat [(last seq)] (rev (rest (butlast seq))) [(first seq)])))", "user": "57476b5fe4b009280f9f2b74"}, {"problem": 23, "code": "#(into () %)", "user": "5745ca24e4b009280f9f2b56"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5742760ce4b05c31a32c0876"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5748a2d4e4b009280f9f2b8f"}, {"problem": 23, "code": "#(into () %)", "user": "5743e316e4b0c285004e8ab3"}, {"problem": 23, "code": "into ()", "user": "573678eae4b0cd1946bd1034"}, {"problem": 23, "code": "#(reduce (fn [a b] (conj a b)) '() %)", "user": "5749ce09e4b009280f9f2ba0"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "574977cbe4b009280f9f2b9b"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5744d088e4b009280f9f2b41"}, {"problem": 23, "code": "reduce (fn [res, cur] (cons cur res)) []", "user": "574930dae4b009280f9f2b96"}, {"problem": 23, "code": "#(into () %)", "user": "57497708e4b009280f9f2b9a"}, {"problem": 23, "code": "into ()", "user": "57023e92e4b08d47c97781da"}, {"problem": 23, "code": "into ()", "user": "574a9132e4b02ea1147991fd"}, {"problem": 23, "code": "(fn my-rev [x] (if (empty? x) x (concat (my-rev (next x)) (list (first x)) )))", "user": "574b008ce4b02ea114799203"}, {"problem": 23, "code": "reduce conj ()", "user": "57297fb2e4b0c6e51e0d2b1c"}, {"problem": 23, "code": "(fn rvs [xs]\n  (if (empty? xs)\n    []\n    (conj (rvs (rest xs)) (first xs))))", "user": "57275898e4b0c5bde472c13e"}, {"problem": 23, "code": "reduce conj ()", "user": "57481f1fe4b009280f9f2b82"}, {"problem": 23, "code": "#(loop [coll %\n       finalcoll '()\n        t (empty %)]\n  (if (not (next coll))\n    (if (= (type t) clojure.lang.PersistentTreeSet)\n      (cons (first coll) finalcoll)\n      (into t (cons (first coll) finalcoll)))\n    (recur (rest coll) (cons (first coll) finalcoll) t)\n  )\n)", "user": "51456858e4b0e88796073408"}, {"problem": 23, "code": "(fn [xs]\n  (reduce\n   (fn [acc x]\n    (do\n     (println [acc x])\n     (concat [x] acc)))\n  []\n  xs))", "user": "57433675e4b0c285004e8a9d"}, {"problem": 23, "code": "reduce (fn [a b] (cons b a)) []", "user": "574c3a7ce4b02ea114799219"}, {"problem": 23, "code": "(partial reduce conj '())", "user": "574c5f34e4b02ea11479921c"}, {"problem": 23, "code": "(fn [x] (\n  (fn rev[x acc]\n    (if (= 0 (count x))\n      acc\n      (rev \n       (rest x) \n       (conj acc (first x))\n      )\n    )\n  )\n  x () )\n)", "user": "57493f35e4b009280f9f2b97"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "574c5e18e4b02ea11479921b"}, {"problem": 23, "code": "reduce conj '()", "user": "5741c7bce4b05c31a32c086a"}, {"problem": 23, "code": "(fn f [s] \n  (if (seq s)\n    (concat (f (rest s)) (vector (first s)))\n    '()))", "user": "57462a4de4b009280f9f2b5d"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "574af03ce4b02ea114799202"}, {"problem": 23, "code": "(fn \n  [coll] \n  (reduce (fn [x y] (conj x y)) '() coll))", "user": "573de63fe4b05c31a32c081c"}, {"problem": 23, "code": "into ()", "user": "573d58c8e4b05c31a32c0811"}, {"problem": 23, "code": "#(into '() %)", "user": "574c66e1e4b02ea11479921d"}, {"problem": 23, "code": "#( reduce conj () %)", "user": "57487084e4b009280f9f2b8c"}, {"problem": 23, "code": "(fn [items]\n  (reduce (fn [reversed i] (conj reversed i)) '() items))", "user": "574e069fe4b02ea11479923d"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "574dfcb8e4b02ea11479923a"}, {"problem": 23, "code": "(fn [x]\n  (loop [seq x new_seq '()] \n  \n  (if (= (count seq) 0) \n    (vec new_seq) \n    (recur (rest seq) (conj new_seq (first seq))))))", "user": "56ff0ef3e4b08d47c97781ba"}, {"problem": 23, "code": "reduce conj ()", "user": "574cd554e4b02ea114799224"}, {"problem": 23, "code": "(fn [coll] (reduce #(cons %2 %1) [] coll))", "user": "4fe54675e4b0e8f79898fec1"}, {"problem": 23, "code": "(fn[x](reduce conj '() x))", "user": "574ed2f7e4b02ea11479924a"}, {"problem": 23, "code": "(fn r [s] (if (empty? s) [] (conj (r (rest s)) (first s))))", "user": "574f1780e4b02ea114799254"}, {"problem": 23, "code": "(fn my-reverse\n  ([l] \n   (my-reverse l '()))\n  ([l resp] \n   (if (= l '())\n     resp\n     (my-reverse (rest l) (conj resp (first l))))))", "user": "574f1c24e4b02ea114799255"}, {"problem": 23, "code": "#(loop[remaining % reversed []]\n  (if (empty? remaining) reversed\n                         (recur (butlast remaining) (conj reversed (last remaining)))))", "user": "574ef311e4b02ea11479924d"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "574fae1de4b02ea114799262"}, {"problem": 23, "code": "(fn rev \n  ([orig] (rev orig '()))\n  ([orig new] \n    (if (empty? orig)\n      new\n      (rev (rest orig)\n        (conj new (first orig)))\n    )\n  ))", "user": "574e7be7e4b02ea114799242"}, {"problem": 23, "code": "#(loop [s % result []]     \n   (if (empty? s) \n        result\n        (recur (rest s) (cons (first s) result))\n   )\n )", "user": "57501de0e4b02ea11479926c"}, {"problem": 23, "code": "(fn foo [x]\n  (if (empty? x)\n    x\n    (concat (foo (rest x)) (list (first x)))))", "user": "57501c83e4b02ea11479926b"}, {"problem": 23, "code": "reduce #(cons %2 %) '()", "user": "5745bb9fe4b009280f9f2b54"}, {"problem": 23, "code": "(fn rev [s] (loop [result () src s]  (let [t (conj result (first src))  n (rest src)] (if (= n ()) (conj result (first src)) (recur t n)))))", "user": "574ec787e4b02ea114799249"}, {"problem": 23, "code": "#(into () %)", "user": "555d1e51e4b0a2eb076a39a5"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "574ef641e4b02ea11479924f"}, {"problem": 23, "code": "#(reduce (fn [l v] (conj l v)) '() %)", "user": "57515f94e4b02ea114799287"}, {"problem": 23, "code": "#(loop [coll %\n         result '()]\n    (if (empty? coll)\n      result\n      (recur (rest coll) (cons (first coll) result))))", "user": "5751aeabe4b02ea11479928a"}, {"problem": 23, "code": "reduce conj ()", "user": "570bd29be4b0b0fb43fd06c5"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5749ab6ae4b009280f9f2b9f"}, {"problem": 23, "code": "(fn my-rev [sq]\n  ((fn rev [new-sq sq]\n     (if (seq (rest sq))\n       (rev (conj new-sq (first sq)) (rest sq))\n       (conj new-sq (first sq)))) nil sq))", "user": "5751eb97e4b02ea11479928e"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5716960de4b07c98581c3afd"}, {"problem": 23, "code": ";(fn [c] (loop [i (- (count c) 1) o []]\n;          (if (&amp;lt; i 0)\n;            o\n;            (recur (dec i) (conj o (nth (seq c) i))))))\n          \napply conj ()", "user": "57533bc1e4b02ea1147992a6"}, {"problem": 23, "code": "#(loop [f %, r '()] (if (empty? f) r (recur (rest f) (conj r (first f)))))", "user": "57539e04e4b02ea1147992ab"}, {"problem": 23, "code": "into ()", "user": "5751f2a2e4b02ea114799292"}, {"problem": 23, "code": "#(reduce (fn [s e] (cons e s)) [] %)", "user": "5379946be4b06839e8705e56"}, {"problem": 23, "code": "#(into '() %)", "user": "57552f39e4b02ea1147992c1"}, {"problem": 23, "code": "(fn c [s] (if (= s '()) s (concat (c (rest s)) (conj '() (first s)) ) ) )", "user": "5752ed4fe4b02ea1147992a2"}, {"problem": 23, "code": "reduce conj ()", "user": "5755e66ee4b02ea1147992cf"}, {"problem": 23, "code": "(fn [coll]\n  (reduce conj () coll))", "user": "574abbfbe4b02ea114799200"}, {"problem": 23, "code": "#(reduce (fn [prev, cur] (cons cur prev)) '() %1)", "user": "56cd75bee4b0ea9b8538f74b"}, {"problem": 23, "code": "(partial into ())", "user": "5746cb28e4b009280f9f2b68"}, {"problem": 23, "code": "#(loop [old % new '()] (if (first old) (recur (next old) (cons (first old) new)) new))", "user": "574f3a40e4b02ea114799258"}, {"problem": 23, "code": "( fn rev\n  [ x ]\n  ( if ( empty? x ) '[]\n    ( conj ( rev ( rest x ) ) ( first x ) )\n  )\n)", "user": "57561529e4b02ea1147992d3"}, {"problem": 23, "code": "#(into () %)", "user": "5756f7d7e4b02ea1147992e9"}, {"problem": 23, "code": "#(into () %)", "user": "5756eff6e4b02ea1147992e7"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "563c6ebae4b0bfe05bf11834"}, {"problem": 23, "code": "(fn my-rev [s] (if (< (count s) 2) s (concat (my-rev (rest s)) [(first s)])))", "user": "57571df3e4b02ea1147992ef"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "567a4c53e4b05957ce8c6197"}, {"problem": 23, "code": "(fn [x] (reduce conj '() x))", "user": "5751fda4e4b02ea114799295"}, {"problem": 23, "code": "(fn reverser \n  [some-seq]\n    (when (seq some-seq)\n      (cons (last some-seq)(reverser (drop-last some-seq)))))", "user": "5665ef78e4b0e91d5f5c5664"}, {"problem": 23, "code": "#(into () %)", "user": "56749133e4b05957ce8c613e"}, {"problem": 23, "code": "reduce conj ()", "user": "57509096e4b02ea114799277"}, {"problem": 23, "code": "#(for [ i (range (count %) 0 -1) ] (nth (vec %) (dec i)))", "user": "57569212e4b02ea1147992de"}, {"problem": 23, "code": "(fn [x]\n  (loop [i (dec (count x)) rev []]\n    (if (= nil (get (vec x) i))\n      rev\n      (recur (dec i) (conj rev (get (vec x) i))))))", "user": "574e8975e4b02ea114799244"}, {"problem": 23, "code": "reduce conj ()", "user": "5757ba87e4b02ea1147992f9"}, {"problem": 23, "code": "(fn [s2]\n            (let [n (count s2) s (seq s2)]\n              (map-indexed\n                (fn [id el] (nth s\n                                 (dec (- n id)))\n                  ) s)\n              )\n            )", "user": "575689f2e4b02ea1147992dd"}, {"problem": 23, "code": "#(into () %)", "user": "5755d8f1e4b02ea1147992ce"}, {"problem": 23, "code": "(fn [list] (reduce (fn [x y] (conj x y)) '() list))", "user": "5751f9b0e4b02ea114799294"}, {"problem": 23, "code": "(fn [s] (into () s))", "user": "57583451e4b02ea114799304"}, {"problem": 23, "code": "(fn my-reverse [sx] \n  (if (empty? sx)\n    []\n    (concat (my-reverse (rest sx)) [(first sx)])))", "user": "568bd448e4b0dcc4269f40a9"}, {"problem": 23, "code": "#(reduce (fn [x y] (cons y x)) '() %)", "user": "575556fae4b02ea1147992c3"}, {"problem": 23, "code": "(fn rev-seq \n  [to-rev]\n  (loop\n    [to-rev to-rev\n     rev ()]\n    (if (empty? to-rev)\n      rev\n      (recur (rest to-rev) (conj rev (first to-rev))))))", "user": "574a71b7e4b02ea1147991fb"}, {"problem": 23, "code": "(fn rev [coll] (if (empty? coll)\n                 coll\n                 (cons (last coll) (rev (butlast coll)))))", "user": "5759cd46e4b02ea11479932e"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "57599ed3e4b02ea114799323"}, {"problem": 23, "code": "(fn reverse-sequence \n\t([x]\n    \t(reverse-sequence x '()))\n  \t([x y]\n  \t\t(if (empty? x)\n   \t\t\ty\n          \t(reverse-sequence (rest x) (cons (first x) y))\n        )\n    )\n)", "user": "5759e317e4b02ea114799330"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5739c2fee4b0cd1946bd107a"}, {"problem": 23, "code": "(fn [coll] \n  (let [scoll (seq coll)]\n  (loop [[x & xs] scoll a '()]\n    (if xs \n      (recur xs (cons x a))\n      (cons x a)))))", "user": "54d0c32de4b0e8a36923e5cf"}, {"problem": 23, "code": "reduce conj '()", "user": "56fd7f0ee4b08d47c97781a5"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "5742ec91e4b05c31a32c0883"}, {"problem": 23, "code": "(fn [x]\n  (for [item (range (- (count x) 1) -1 -1)]\n    (nth (into [] x) item)))", "user": "575683aee4b02ea1147992dc"}, {"problem": 23, "code": "#(into () %)", "user": "573f1e2ee4b05c31a32c083a"}, {"problem": 23, "code": "(partial reduce conj ())", "user": "575cbe44e4b02ea114799374"}, {"problem": 23, "code": "#(loop [coll % tail ()] (if-not (first coll) \n                             tail\n                             (recur (rest coll) (cons (first coll) tail))))", "user": "575d5831e4b02ea114799381"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "575d9ac6e4b02ea114799387"}, {"problem": 23, "code": "(fn myf [c]\n (reduce (fn [memo item] (conj memo item)) '() c))", "user": "575c23d3e4b02ea114799369"}, {"problem": 23, "code": "reduce conj '()", "user": "575bd5f9e4b02ea114799365"}, {"problem": 23, "code": "(fn r [x] (if (empty? x) x  (cons (last x) (r (butlast x)))))", "user": "575dda55e4b02ea11479938c"}, {"problem": 23, "code": "#(reduce conj () %1)", "user": "57480c4de4b009280f9f2b7e"}, {"problem": 23, "code": "(fn [coll] (reduce conj () coll))", "user": "574ff497e4b02ea114799266"}, {"problem": 23, "code": "(fn [m] (into '() m))", "user": "575e7335e4b0846ea39baf28"}, {"problem": 23, "code": "(fn [l]\n  (loop [vi (vec l)\n         ni (count vi)\n         res []]\n    (if (= 0 ni)\n      res\n      (recur vi (- ni 1) (conj res (vi (- ni 1)))))))", "user": "52c2106fe4b07a9af5792374"}, {"problem": 23, "code": "#(reduce (fn [x y] (concat (list y) x)) '() %)", "user": "57598420e4b02ea11479931f"}, {"problem": 23, "code": "into ()", "user": "575ef4b6e4b08062f99a4e78"}, {"problem": 23, "code": "(fn [col]\n   (loop [c col r (empty col)]\n      (if (empty? c)\n         r\n         (recur (rest c) (cons (first c) r))\n         )))", "user": "562eeba2e4b0ab312c17ebc1"}, {"problem": 23, "code": "(fn f [col]\n  (reduce conj '() col))", "user": "575fbe58e4b08062f99a4e87"}, {"problem": 23, "code": "(fn walk[args] (if (empty? args) (vector) (conj (walk (rest args)) (first args))))", "user": "573ed018e4b05c31a32c0833"}, {"problem": 23, "code": "(fn [s] (reduce (fn [a b] (cons b a)) (empty s) s))", "user": "575b3e9be4b02ea11479935b"}, {"problem": 23, "code": "(fn rever [coll]\n  (reduce conj '() coll))", "user": "57606cfde4b08062f99a4e95"}, {"problem": 23, "code": "into '()", "user": "57609d91e4b08062f99a4e9b"}, {"problem": 23, "code": "reduce conj '()", "user": "575f2529e4b08062f99a4e7a"}, {"problem": 23, "code": "(fn [v]\n  (if (vector? (first v))\n    (sort-by first > v)\n    (sort > v)))", "user": "5760d426e4b08062f99a4e9f"}, {"problem": 23, "code": "#(into () %)", "user": "575ab695e4b02ea114799350"}, {"problem": 23, "code": "(fn [list]\n  (reduce (fn [acc, item] (cons item acc)) [] list))", "user": "57597fade4b02ea11479931d"}, {"problem": 23, "code": "(fn[l](loop[ls l r '()](if (empty? ls) r (recur (rest ls) (conj r (first ls))))))", "user": "575cbb53e4b02ea114799372"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "57614c20e4b0994c1922fb86"}, {"problem": 23, "code": "(fn [coll] (reduce conj () coll))", "user": "576186a5e4b0994c1922fb8e"}, {"problem": 23, "code": "(fn my-reverse [x]\n  (letfn [(my-reverse-inner [init final]\n                            (if (= (count init) 0)\n                              final\n                              (my-reverse-inner (rest init) (concat (list (first init)) final))))]\n    (my-reverse-inner x '())))", "user": "576000fce4b08062f99a4e8b"}, {"problem": 23, "code": "#(loop [lst %1 new-lst []]\n    (if (empty? lst)\n      new-lst\n      (recur (rest lst) (cons (first lst) new-lst))))", "user": "5761513fe4b0994c1922fb87"}, {"problem": 23, "code": "(fn number-twentythree [x]\n  (loop [seq-elements (into [] x) result '()]\n    (if (empty? seq-elements)\n      result\n      (let [[first-elem & rest-elems] seq-elements]\n        (recur \n         rest-elems\n         (conj result first-elem)\n         )))))", "user": "57607706e4b08062f99a4e97"}, {"problem": 23, "code": "(fn [s]\n  (loop [s s, res []]\n    (if (seq s)\n      (recur (rest s) (cons (first s) res))\n      res)))", "user": "56a50330e4b0542e1f8d14df"}, {"problem": 23, "code": "(fn rvs [x]\n  (cond (not (seq x)) nil\n        :else (conj (rvs (drop-last x)) (last x))))", "user": "57614a42e4b0994c1922fb85"}, {"problem": 23, "code": "reduce conj '()", "user": "57625c18e4b0994c1922fba4"}, {"problem": 23, "code": "(fn [coll]\n  (into () coll))", "user": "572a856be4b0f4d77e65123b"}, {"problem": 23, "code": "#(into () % )", "user": "5762b38ce4b0994c1922fbad"}, {"problem": 23, "code": "(fn [x] (map first (sort-by second > (mapv vector x (range)))))", "user": "574a546ee4b02ea1147991f6"}, {"problem": 23, "code": "reduce conj '()", "user": "57635e2de4b0994c1922fbbf"}, {"problem": 23, "code": "(fn [x] (loop [rev_seq [] seq x] (if (empty? seq) rev_seq (recur (cons (first seq) rev_seq) (rest seq)))))", "user": "57614948e4b0994c1922fb83"}, {"problem": 23, "code": "reduce conj '()", "user": "5710b136e4b09c608db70437"}, {"problem": 23, "code": "(fn [c] (reduce #(concat [%2] %) [] c))", "user": "57169f93e4b07c98581c3b00"}, {"problem": 23, "code": "reduce conj '()", "user": "5761a772e4b0994c1922fb95"}, {"problem": 23, "code": "#(loop [result []\n        q      %]\n   (if (empty? q)\n     result\n     (recur (conj result (last q)) (butlast q)))\n   )", "user": "5763818ae4b0994c1922fbc7"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "5763fa69e4b0994c1922fbe0"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "56d781b3e4b0ea9b8538f7dc"}, {"problem": 23, "code": "reduce conj ()", "user": "57642916e4b0994c1922fbee"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "56fcd9dfe4b08d47c977819e"}, {"problem": 23, "code": "into '()", "user": "5764457ae4b0994c1922fbf3"}, {"problem": 23, "code": "(fn [xs]\n  (loop [acc '() s xs]\n    (if (seq s)\n      (recur (cons (first s) acc) (rest s))\n      acc)))", "user": "56c21eafe4b05cc29241ee7e"}, {"problem": 23, "code": "#(loop [s %,rets [] ] (if (empty? s) rets (recur (rest s) (cons (first s) rets ))))", "user": "575d63e9e4b02ea114799382"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "5764056ae4b0994c1922fbe2"}, {"problem": 23, "code": "(fn [coll]\n  (reduce #(conj %1 %2) '() coll))", "user": "52ea025ae4b09f7907dd14b5"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "56092852e4b0053d1b86c7d9"}, {"problem": 23, "code": "(fn [s] (into () s))", "user": "57644395e4b0994c1922fbf2"}, {"problem": 23, "code": "#(loop [fwd % rev '()]\n   (if (empty? fwd)\n     rev\n   \t (recur (rest fwd) (conj rev (first fwd)))))", "user": "576584c1e4b0994c1922fc0e"}, {"problem": 23, "code": "#(loop [s %\n        acc []]\n   (if (empty? s)\n     acc\n     (recur (drop 1 s) (cons (first s) acc))))", "user": "5765c7bbe4b0a07e8fc18096"}, {"problem": 23, "code": "#(reduce (fn [accum x] (conj accum x)) '() %)", "user": "5764cc01e4b0994c1922fc05"}, {"problem": 23, "code": "reduce conj ()", "user": "57665f00e4b0a07e8fc180a5"}, {"problem": 23, "code": "(fn [coll] \n  (loop [res [] in coll] \n    (if (first in) \n      (recur (cons (first in) res) (rest in)) \n      res)))", "user": "5756f324e4b02ea1147992e8"}, {"problem": 23, "code": "#(reduce conj () %1)", "user": "56b12c53e4b0982f16b37de6"}, {"problem": 23, "code": "#(loop [inseq % outseq '()]\n  (if (nil? inseq)\n    outseq\n    (recur (next inseq) (cons (first inseq) outseq))))", "user": "5762fcfde4b0994c1922fbb3"}, {"problem": 23, "code": "(fn myrev [sq]\n  (if (= (count sq) 1)\n    sq\n    (cons (peek (vec sq)) (myrev (pop (vec sq))))))", "user": "5766bab8e4b0a07e8fc180b1"}, {"problem": 23, "code": "(fn [coll] (loop [coll coll arr []] (if (empty? coll) arr (recur (butlast coll) (conj arr (last coll))))))", "user": "56f6cabce4b08e7d20b96828"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "575d16f8e4b02ea114799377"}, {"problem": 23, "code": "(fn rev [los]\n\t(into '() los))", "user": "5761724de4b0994c1922fb89"}, {"problem": 23, "code": "(fn [li]\n  (reduce\n    (fn [a b] (cons b a))\n    []\n    li))", "user": "561d506ee4b064ca9f4b16aa"}, {"problem": 23, "code": "(fn [sequence]\n  (reduce\n   #(conj %1 %2)\n   '()\n   sequence))", "user": "575d22f5e4b02ea11479937a"}, {"problem": 23, "code": "reduce conj '()", "user": "576773cde4b0a07e8fc180be"}, {"problem": 23, "code": "reduce conj ()", "user": "56f974c0e4b07572ad1a88b1"}, {"problem": 23, "code": "(fn[lst] (loop[n (count lst) rev (identity lst) ind 1] \n           (if (> (- (count rev) (count lst)) (- n 2)) \n             (drop (- n 1) rev) \n             (recur n (concat rev [(last (drop-last ind lst))]) (inc ind)))))", "user": "575ddfd1e4b02ea11479938d"}, {"problem": 23, "code": "(fn rvs [s]\n  (loop [s s\n         r '()]\n    (if (empty? s)\n      r\n      (recur (rest s) (conj r (first s))))))", "user": "53336ab8e4b019098a6f8b84"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "576a8d02e4b0a07e8fc18117"}, {"problem": 23, "code": "(fn [sequ] (reduce (fn [prev item] (cons item prev)) [] sequ))", "user": "575aa61ae4b02ea11479934e"}, {"problem": 23, "code": "(fn rev [myseq]\n  ((fn inner [giver taker]\n  (if (empty? giver)\n    taker\n    (inner (rest giver) (cons (first giver) taker)))) myseq '()))", "user": "576aa367e4b0a07e8fc1811e"}, {"problem": 23, "code": "(fn rev [coll]\n  (if (empty? coll) coll\n    (concat (rev (rest coll)) [(first coll)])))", "user": "576b4e6be4b0a07e8fc1812b"}, {"problem": 23, "code": "#(vec (reduce conj '() %))", "user": "576a987be4b0a07e8fc1811b"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "57604a87e4b08062f99a4e91"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "576be8a2e4b0a07e8fc18140"}, {"problem": 23, "code": "(fn [seq]\n  (loop [coll seq new_coll '()]\n    (if (empty? coll)\n      new_coll\n      (recur (rest coll) (conj new_coll (first coll))))))", "user": "5759b0e6e4b02ea114799326"}, {"problem": 23, "code": "(fn\n  [coll]\n  (loop [s [] colle coll]\n    (if (zero? (count colle))\n      s\n      (recur (concat [(first colle)] s) (rest colle)))))", "user": "576a972ce4b0a07e8fc1811a"}, {"problem": 23, "code": "#(into '() %)", "user": "576da825e4b0979f8965156c"}, {"problem": 23, "code": "reduce conj `()", "user": "576df252e4b0979f8965156f"}, {"problem": 23, "code": "#(apply (partial conj '()) %)", "user": "5742d82ae4b05c31a32c0881"}, {"problem": 23, "code": "#(into () %)", "user": "576e3258e4b0979f89651574"}, {"problem": 23, "code": "(fn [coll]\n  (loop [r (rest coll)\n         acc (conj () (first coll))]\n    \n    (if (= (count r) 0)\n      acc\n      (recur (rest r) (conj acc (first r)))\n     )\n    )\n  )", "user": "576d24ede4b0979f8965155b"}, {"problem": 23, "code": "into ()", "user": "55b0cc57e4b002ce9d5cbc25"}, {"problem": 23, "code": "#(into '() %)", "user": "576ed928e4b0979f89651583"}, {"problem": 23, "code": "#(reduce (fn [a b] (conj a b)) '() %)", "user": "576ecafce4b0979f89651580"}, {"problem": 23, "code": "#(reduce (fn [coll x]\n           (cons x coll)) '() %)", "user": "574bd367e4b02ea114799210"}, {"problem": 23, "code": "#(into [] (apply conj '() %))", "user": "571d1234e4b0145328a76274"}, {"problem": 23, "code": "(fn doit [x] (if (not-empty x) (cons (last x) (doit (drop-last x))) '()))", "user": "57716e11e4b0979f896515b2"}, {"problem": 23, "code": "#(into () %)", "user": "5768fec7e4b0a07e8fc180e2"}, {"problem": 23, "code": "#(loop [c %\n         r []]\n   (if (seq c)\n     (recur (rest c) (cons (first c) r))\n     r))", "user": "5454bb07e4b0e397800069da"}, {"problem": 23, "code": "(fn [stuff]\n   (loop [items []\n         array stuff\n         ]\n        (if (empty? array)\n          items\n          (recur (conj items (last array)) (butlast array)))))", "user": "56020b3fe4b04bb52996e19b"}, {"problem": 23, "code": "(fn [s] (loop [left s result []] (if (empty? left) result (recur (butlast left) (conj result (last left))))))", "user": "576844cde4b0a07e8fc180ce"}, {"problem": 23, "code": "#(into () %)", "user": "57720e85e4b0979f896515c1"}, {"problem": 23, "code": "(fn rvrs [x] (if (= (count x) 1) (concat '() x) (concat (conj '() (last x)) (rvrs (butlast x)))))", "user": "5772bd3be4b0979f896515cf"}, {"problem": 23, "code": "(fn f [args]\n    (if (empty? args) []\n          (conj (f (rest args)) (first args))))", "user": "5760715de4b08062f99a4e96"}, {"problem": 23, "code": "reduce conj ()", "user": "576c0febe4b07c67f59d1fb8"}, {"problem": 23, "code": "(fn rev [list] (cond (= list nil)  nil :else (cons (last list) (rev (butlast list)))))", "user": "577412c6e4b0979f896515f6"}, {"problem": 23, "code": "#(into () %)", "user": "5773eeafe4b0979f896515f1"}, {"problem": 23, "code": "; Doesn't pass the last test\n; (fn [s] (reduce #(flatten (conj [%2] %1)) s))\n\n(fn [s] (read-string (str \"[\" (reduce #(str %2 \" \" %1) s) \"]\")))", "user": "56012afde4b04bb52996e17c"}, {"problem": 23, "code": "#(into '() %)", "user": "4dad76588e77d6ed63f12a44"}, {"problem": 23, "code": "reduce #(cons %2 %1) []", "user": "57740884e4b0979f896515f5"}, {"problem": 23, "code": "#(\n\t(fn rev [seq res]\n  \t\t(if seq\n    \t\t(rev (next seq) (cons (first seq) res))\n    \t\tres))\n  \t% '())", "user": "5773e5b0e4b0979f896515ef"}, {"problem": 23, "code": "into ()", "user": "5757142ae4b02ea1147992ed"}, {"problem": 23, "code": "(fn [x] (into () x))", "user": "558e963ae4b0277789237653"}, {"problem": 23, "code": "(fn [l] (reduce (fn [a c] (conj a c)) '() l))", "user": "565131b3e4b0f29ec07d2e88"}, {"problem": 23, "code": "(fn\n  [elems]\n (loop [new [] elems elems] \n   (if (not= nil (last elems)) \n     (recur (conj new (last elems)) (butlast elems))\n     new\n)    \n   ))", "user": "5772ddb0e4b0979f896515d4"}, {"problem": 23, "code": "(fn [seq]\n  (let [values\n        (reduce\n         (fn [values _]\n           (into values [(last (take (- (count seq) (count values)) seq))]))\n         []\n         seq)]\n    (if (vector? seq)\n      values\n      (list* values))))", "user": "57759a45e4b0979f89651622"}, {"problem": 23, "code": "reduce conj ()", "user": "57762befe4b0979f8965162f"}, {"problem": 23, "code": "reduce conj ()", "user": "57763002e4b0979f89651631"}, {"problem": 23, "code": "#(into '() %)", "user": "5776385fe4b0979f89651632"}, {"problem": 23, "code": "(fn [x] \n  (let [helper\n        \t(fn helper[x, y] \n              \n              (if (=(count x) 0)\n                 y\n                (helper (butlast x) (conj y (last x)) )\n              )\n              \n            )\n        ] (helper x [])\n   )\n)", "user": "5776558ee4b0979f89651633"}, {"problem": 23, "code": "(fn rev [s] (if (empty? s) [] (conj (rev (rest s)) (first s))))", "user": "5776b47ce4b0979f8965163d"}, {"problem": 23, "code": "(fn [x]\n  (loop [tmp x result []]\n    (if (empty? tmp)\n      result\n      (recur (butlast tmp)(conj result (last tmp)))\n      )\n    )\n  )", "user": "57750460e4b0979f8965160c"}, {"problem": 23, "code": "(fn [l]\n  (loop [result [] list l]\n    (if (empty? list)\n      result\n      (recur (cons (first list) result) (rest list)))))", "user": "577629abe4b0979f8965162e"}, {"problem": 23, "code": "(fn our-reverse\n  [s]\n  (reduce (fn [acc i]\n            (cons i acc)) [] s))", "user": "5777c3d6e4b0979f8965164f"}, {"problem": 23, "code": "(fn my-reverse [coll]\n  (if (empty? coll) nil\n    (concat (my-reverse (rest coll)) (list (first coll)))))", "user": "5777cffae4b0979f89651651"}, {"problem": 23, "code": "(fn [sq] (let [rev (fn [s r] (if (empty? s) r (recur (rest s) (cons (first s) r))))] (rev sq '())))", "user": "57780e4fe4b0979f89651657"}, {"problem": 23, "code": "(fn rev [coll]\n  (loop [revlist () coll coll]\n    (if (seq coll)\n      (recur (cons (first coll) revlist) (rest coll))\n      revlist)))", "user": "5776e21de4b0979f89651642"}, {"problem": 23, "code": "(fn [coll]\n  ((fn [coll res]\n    (if (empty? coll)\n      res\n      (recur (rest coll) (cons (first coll) res))\n    )\n  ) coll []) \n)", "user": "57780dd8e4b0979f89651656"}, {"problem": 23, "code": "reduce conj ()", "user": "5778b78be4b0979f89651666"}, {"problem": 23, "code": "(fn my-reverse [coll]\n  (when (seq coll)\n  (lazy-seq (cons (last coll) (my-reverse (drop-last coll))))))", "user": "55d3780ee4b0e31453f64a66"}, {"problem": 23, "code": "(fn [coll]\n  (loop [[item & tail :as source] (seq coll) result []]\n    (if source\n      (recur tail (cons item result))\n      result)))", "user": "555b6e82e4b0deb715856e51"}, {"problem": 23, "code": "(partial reduce conj '())", "user": "577829f9e4b0979f8965165a"}, {"problem": 23, "code": "(fn [x] (reduce conj () x))", "user": "57596ba7e4b02ea11479931a"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "57748db6e4b0979f89651601"}, {"problem": 23, "code": "(fn rev [xs] (reduce conj () xs))", "user": "5779bc87e4b0979f89651677"}, {"problem": 23, "code": "reduce conj ()", "user": "56a3e55ce4b0542e1f8d14d5"}, {"problem": 23, "code": "reduce conj '()", "user": "571346c0e4b07c98581c3a9b"}, {"problem": 23, "code": "#(reduce (fn [l e] (conj l e)) '() %)", "user": "577a8049e4b0d3393e5deafc"}, {"problem": 23, "code": "#(reduce (fn [x y] (cons y x)) [] %1)", "user": "577a444be4b0d3393e5deaf5"}, {"problem": 23, "code": "(fn [x]\n  ((fn [s a]\n    (if (= s [])\n      a\n      (recur (rest s) (concat [(first s)] a))\n    )\n  ) x []) \n)", "user": "577aacf2e4b0d3393e5deb03"}, {"problem": 23, "code": "(fn [s]\n  (reduce #(cons %2 %1) (empty s) s))", "user": "577abecfe4b0d3393e5deb06"}, {"problem": 23, "code": "reduce conj ()", "user": "55ad0e18e4b03311e7b7329c"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "577b4440e4b0d3393e5deb0f"}, {"problem": 23, "code": "(partial reduce conj '())", "user": "577a74f7e4b0d3393e5deafa"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "57758671e4b0979f8965161f"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "577bf999e4b0d3393e5deb2c"}, {"problem": 23, "code": "reduce #(cons %2 %1) []", "user": "566096d0e4b068f2fe63dc5a"}, {"problem": 23, "code": "(fn [x] \n  (loop [s x, r ()]\n    (if (not= s ())\n      (recur (rest s) (conj r (first s)))\n      r\n\t)\n  )\n)", "user": "52280a26e4b0186687e23a67"}, {"problem": 23, "code": "(fn [coll]\n  (loop [[r & more :as all] (seq coll)\n         acc '()]\n    (if all\n      (recur more (cons r acc))\n      acc)))", "user": "577be2f4e4b0d3393e5deb26"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "577c3da9e4b0c8d87281f6b9"}, {"problem": 23, "code": "#(loop [i %1 result []]\n                 (if (empty? i)\n                   result\n                     (recur (drop-last i) (conj result (last i))))\n                   )", "user": "560c37b5e4b05f002753df2e"}, {"problem": 23, "code": "reduce #(cons %2 %1) []", "user": "577c12dfe4b0d3393e5deb2f"}, {"problem": 23, "code": "into ()", "user": "577202d2e4b0979f896515c0"}, {"problem": 23, "code": "(fn rev [coll]\n  (if (empty? coll)\n    []\n    (conj (rev (rest coll)) (first coll))))", "user": "5775659ae4b0979f8965161b"}, {"problem": 23, "code": "apply conj '()", "user": "56b41972e4b0982f16b37e1f"}, {"problem": 23, "code": "(fn [x] (loop [new-list [] old-list (vec x) cnt (- (count old-list) 1)]\n          (if (= (count (vec new-list)) (count old-list))\n            new-list\n            (recur (conj new-list (nth old-list cnt)) old-list (dec cnt)))))", "user": "5756e218e4b02ea1147992e5"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "57741d00e4b0979f896515f7"}, {"problem": 23, "code": "(fn [x] (reduce #(cons %2 %1) [] x))", "user": "514872f5e4b05514c84b7cbe"}, {"problem": 23, "code": "(fn [l] (reduce (fn [c n] (concat [n] c)) [] l))", "user": "577da4eae4b0c8d87281f6d7"}, {"problem": 23, "code": "reduce (fn [x y] (cons y x)) ()", "user": "577a0dc3e4b0979f8965167b"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "4ecf5ee1535d44c135fd68b7"}, {"problem": 23, "code": "(fn [s] \n  (loop [res [] se s]\n    (if (empty? se)\n      res\n      (recur (concat (vector (first se)) res) (rest se))\n      )))", "user": "577d3feee4b0c8d87281f6d2"}, {"problem": 23, "code": "into ()", "user": "5776f39de4b0979f89651643"}, {"problem": 23, "code": "reduce conj '()", "user": "5770bbb9e4b0979f896515a0"}, {"problem": 23, "code": "#(into () %)", "user": "577e1d14e4b0c8d87281f6e2"}, {"problem": 23, "code": "(fn foo [lst]\n        (when-let [x (seq lst)]\n          (cons (last x)\n                (foo (drop-last x)))))", "user": "577b9cfde4b0d3393e5deb16"}, {"problem": 23, "code": "#(reduce (fn \n            [new-arr arr]\n            (cons arr new-arr))\n          []\n          %)", "user": "576d6266e4b0979f89651563"}, {"problem": 23, "code": "(fn [coll] \n  (reduce conj '() coll))", "user": "577fc45ae4b0d36ec5835e6e"}, {"problem": 23, "code": "reduce conj ()", "user": "55ff2f89e4b00f4cabc5765e"}, {"problem": 23, "code": "reduce conj '()", "user": "577832f4e4b0979f8965165b"}, {"problem": 23, "code": "reduce (fn [acc x]\n         (conj acc x)) '()", "user": "577e42dee4b0c8d87281f6e4"}, {"problem": 23, "code": "(fn rev [s]\n  ( (fn rev_ [o, n]\n      (cond (= (seq o) nil) n\n            :else (rev_ (rest o) (cons (first o) n)))) (rest s) [(first s)]))", "user": "578163bee4b0d36ec5835e85"}, {"problem": 23, "code": "into ()", "user": "57822efce4b0d36ec5835e91"}, {"problem": 23, "code": "(fn [xs]\n  (loop [ys xs\n         r ()]\n    (if (empty? ys)\n      r\n      (recur (rest ys) (conj r (first ys))))))", "user": "577673c2e4b0979f89651637"}, {"problem": 23, "code": "(fn [s]\n  (loop [original s result '()]\n    (if (empty? original)\n      result\n      (recur (rest original) (conj result (first original))))))", "user": "5783cd26e4b0ebec4cfb74be"}, {"problem": 23, "code": ";#(into '() %)\ninto ()", "user": "57123c96e4b09c608db70454"}, {"problem": 23, "code": "#(into () %)", "user": "577fb9e7e4b0d36ec5835e6b"}, {"problem": 23, "code": "reduce conj '()", "user": "57615a22e4b0994c1922fb88"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "5783c859e4b0ebec4cfb74bd"}, {"problem": 23, "code": "(fn [lst] (reduce conj '() lst))", "user": "53b615cce4b047364c0444c2"}, {"problem": 23, "code": "#(loop [s (into [] %) q []]\n   (if (empty? s)\n     q\n     (recur (pop s) (conj q (peek s)))))", "user": "57691cf3e4b0a07e8fc180e7"}, {"problem": 23, "code": "(fn [input] (loop [in input out '()]\n  (if (empty? in)\n    out\n    (recur (rest in)\n           (conj out (first in))\n    )\n  )\n))", "user": "5784ec65e4b0ebec4cfb74d1"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "57719031e4b0979f896515b7"}, {"problem": 23, "code": "reduce (fn [s a] (cons a s)) '()", "user": "577f635be4b0d36ec5835e64"}, {"problem": 23, "code": "#(loop [x % result []] (if (> (count x) 0) (recur (rest x) (cons (first x) result)) result))", "user": "575e71a2e4b0846ea39baf26"}, {"problem": 23, "code": "#(loop [coll % new '()]\n   (if (empty? coll)\n     new\n     (recur (rest coll) (conj new (first coll)))))", "user": "57861b0ce4b0ebec4cfb74ef"}, {"problem": 23, "code": "(fn [x] (into '() x))", "user": "5785de78e4b0ebec4cfb74e8"}, {"problem": 23, "code": "#(into '() %)", "user": "5785de43e4b0ebec4cfb74e5"}, {"problem": 23, "code": "(fn [c] (reduce #(cons %2 %1) [] c))", "user": "577ab41fe4b0d3393e5deb05"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "566e3af2e4b0a866af6896d5"}, {"problem": 23, "code": "#(into () %)", "user": "5786e182e4b0ebec4cfb7500"}, {"problem": 23, "code": "(fn [x]\n  (loop [li x lo []]\n    (if (empty? li)\n      lo\n      (recur (butlast li) (conj lo (last li))))))", "user": "56f8bc1de4b07572ad1a88a6"}, {"problem": 23, "code": "(fn custom-reverse [seq]\n  (letfn [(inner-reverse [seq current]\n            (if (empty? seq)\n              current\n              (recur (rest seq) (cons (first seq) current))))]\n    (inner-reverse seq [])))", "user": "5508b405e4b06e50f9beb110"}, {"problem": 23, "code": "#(into () %)", "user": "5787ce76e4b0ebec4cfb750e"}, {"problem": 23, "code": "(fn [s]\n  \"reverse a sequence\"\n  (loop [sq s\n         result ()]\n    (if (seq sq)\n      (recur (rest sq) (conj result (first sq)))\n      result)))", "user": "56fc9a2de4b08d47c977819b"}, {"problem": 23, "code": "reduce conj ()", "user": "516064e5e4b009fba0926e26"}, {"problem": 23, "code": "into ()", "user": "578a07cde4b0ebec4cfb7536"}, {"problem": 23, "code": "(fn rev [sq] \n  (if-not (empty? sq)\n    (cons (last sq) (rev (take (- (count sq) 1) sq)))\n    nil\n   )\n )", "user": "578acd37e4b0ebec4cfb7541"}, {"problem": 23, "code": "#(into () %)", "user": "578a08d8e4b0ebec4cfb7537"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5788aa82e4b0ebec4cfb7521"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5785de71e4b0ebec4cfb74e7"}, {"problem": 23, "code": "reduce (fn [x y] (conj x y)) '()", "user": "578b140be4b0ebec4cfb7545"}, {"problem": 23, "code": "reduce conj `()", "user": "56668386e4b0e91d5f5c5672"}, {"problem": 23, "code": "(fn rev [xs]\n  (if (seq xs)\n    (conj (rev (butlast xs)) (last xs))\n    (empty xs)))", "user": "530e75d5e4b08068f379ecba"}, {"problem": 23, "code": "(fn myrev\n  [in-list]\n  (if (empty? in-list)\n    '()\n    (distinct (concat (myrev (rest in-list)) (list (first in-list))))))", "user": "5786c182e4b0ebec4cfb74fd"}, {"problem": 23, "code": "(fn [ls]\n  (loop [seq-to-rev ls\n         reversed-seq (sequence nil)]\n    (if (empty? seq-to-rev) reversed-seq\n        (recur (rest seq-to-rev) (conj reversed-seq (first seq-to-rev))))))", "user": "578ce779e4b0ebec4cfb7561"}, {"problem": 23, "code": "into '()", "user": "578d230fe4b0ebec4cfb7564"}, {"problem": 23, "code": "(fn [l] \n  (loop [acc []\n         list l]\n    (if (empty? list)\n      acc\n      (recur (cons (first list) acc)\n           (rest list)))))", "user": "578cf84ce4b0ebec4cfb7562"}, {"problem": 23, "code": "(fn [z]\n    (reduce \n     (fn [x y] (cons y x)) [] z))", "user": "578d863de4b0ebec4cfb756a"}, {"problem": 23, "code": "(fn myRev [orig] (                 \n  reduce (fn [a b] (cons b a)) (take 1 orig) (rest orig)\n))", "user": "578d0ec0e4b0ebec4cfb7563"}, {"problem": 23, "code": "reduce conj '()", "user": "57245755e4b0c5bde472c0f9"}, {"problem": 23, "code": "into '()", "user": "5785de4ce4b0ebec4cfb74e6"}, {"problem": 23, "code": "#(into () %)", "user": "56e2c62fe4b03a7c14b85a37"}, {"problem": 23, "code": "(fn [seq] (reduce #(cons %2 %1) [] seq))", "user": "578e535de4b0ebec4cfb7580"}, {"problem": 23, "code": "#(reduce (fn [a b] (conj a b)) () %)", "user": "578ebbd5e4b0ebec4cfb7588"}, {"problem": 23, "code": "#(into () %)", "user": "578e04ebe4b0ebec4cfb7577"}, {"problem": 23, "code": "(fn revers [l]\n  (if (= (count l) 1)\n    l\n    (conj\n     (revers (take (dec (count l)) l))\n     (last l)\n     )\n    )\n  )", "user": "577a4dc2e4b0d3393e5deaf6"}, {"problem": 23, "code": "(fn recursive-rev [x & y] (if (empty? x) (first y) (recursive-rev (rest x) (conj (first y) (first x)))))", "user": "577feed1e4b0d36ec5835e71"}, {"problem": 23, "code": "(fn [coll]\n   (loop [rs '()\n          s (seq coll)]\n     (if (empty? s)\n       rs\n       (recur (conj rs (first s)) (rest s)))))", "user": "578f1edae4b0ebec4cfb7590"}, {"problem": 23, "code": "reduce conj '()", "user": "57904341e4b0ebec4cfb75a8"}, {"problem": 23, "code": "#(loop [lista % result []] \n   (if (empty? lista)\n     result\n     (recur (rest lista) (cons (first lista) result))))", "user": "578fc072e4b0ebec4cfb759a"}, {"problem": 23, "code": "(fn [coll] (reduce conj '() coll))", "user": "5783a897e4b0ebec4cfb74b9"}, {"problem": 23, "code": "#(into () %)", "user": "569fc70ee4b0542e1f8d1499"}, {"problem": 23, "code": "(fn [l] (reduce conj '() l))", "user": "5790b3d0e4b0ebec4cfb75ad"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5790e62ae4b0ebec4cfb75b0"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5698282ae4b0542e1f8d142e"}, {"problem": 23, "code": "(fn f [s] (if (empty? s) [] (into [(last s)] (f (butlast s)))))", "user": "572a13cde4b0f4d77e65122b"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "5790f9d7e4b0ebec4cfb75b4"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "578e01e9e4b0ebec4cfb7575"}, {"problem": 23, "code": "reduce conj ()", "user": "578ed640e4b0ebec4cfb758b"}, {"problem": 23, "code": "#(reduce conj nil %)", "user": "57915ba4e4b0ebec4cfb75ba"}, {"problem": 23, "code": "(fn [col]\n  (reduce \n    (fn [a, b] (conj a b))\n    '()\n    col\n  )\n)", "user": "57410964e4b05c31a32c085f"}, {"problem": 23, "code": "(fn [coll0]\n  (loop [coll coll0\n         a    '()]\n    (if (seq coll)\n\t  (recur (rest coll)\n\t         (cons (first coll) a))\n      a)))", "user": "5791d259e4b0ebec4cfb75c0"}, {"problem": 23, "code": "(fn [v] (reduce #(cons %2 %1) [] v))", "user": "576d398be4b0979f8965155d"}, {"problem": 23, "code": "(fn rev [coll]\n  (if (empty? coll)\n    coll\n    (concat (rev (rest coll)) (list (first coll)))))", "user": "550e83d6e4b06e50f9beb166"}, {"problem": 23, "code": "reduce conj ()", "user": "5777bb7ee4b0979f8965164d"}, {"problem": 23, "code": "(fn rev [s] (if (first s) (concat (rev (rest s)) [(first s)]) s))", "user": "5778694fe4b0979f89651660"}, {"problem": 23, "code": "#(into () %)", "user": "57762e67e4b0979f89651630"}, {"problem": 23, "code": "(fn [coll]\n  (into '() coll))", "user": "57934c67e4b0e215f87e8456"}, {"problem": 23, "code": "(fn rev [coll]\n  (if\n    (empty?\n      (rest coll))\n    (seq coll)\n    (concat\n      (rev\n        (rest coll))\n      (list (first coll)))))", "user": "5790329ee4b0ebec4cfb75a7"}, {"problem": 23, "code": "#(reduce (fn [accumulated item]\n           (conj accumulated item))\n         (list)\n         %)", "user": "5793adf0e4b0e215f87e8462"}, {"problem": 23, "code": "(fn [lst] (for [i (range (count lst))] (last (drop-last i lst))))", "user": "57758f5de4b0979f89651621"}, {"problem": 23, "code": "(fn [ls]\n  (loop [in ls out '()]\n    (if (empty? in)\n      out\n      (recur (rest in) (conj out (first in))))))", "user": "57936970e4b0e215f87e8458"}, {"problem": 23, "code": "(fn inverter [input]\n    (loop [theInput input thePeeked () theReversed ()]\n        (if (empty? (rest theInput))\n            (vec (conj theReversed (first theInput)))\n            (recur (rest theInput) (first theInput) (conj theReversed (first theInput))))))", "user": "578e8192e4b0ebec4cfb7585"}, {"problem": 23, "code": "(fn my-reverse\n  ([to-reverse]\n   (my-reverse to-reverse [])\n   )\n  ([to-reverse reversed]\n   (println reversed)\n   (if (empty? to-reverse)\n     reversed\n     (my-reverse (rest to-reverse) (cons (first to-reverse) reversed)))\n  )\n)", "user": "55a3d7c7e4b0acc240e3153d"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "4f03b969535dcb61093f6b55"}, {"problem": 23, "code": "(fn rev [coll]\n  (if (empty? coll)\n    coll\n    (concat (rev (rest coll)) (take 1 coll))))", "user": "53b14dfce4b047364c04448d"}, {"problem": 23, "code": "reduce #(cons %2 %1) []", "user": "578e2829e4b0ebec4cfb757d"}, {"problem": 23, "code": "reduce conj '()", "user": "5791ae28e4b0ebec4cfb75be"}, {"problem": 23, "code": "#(reduce (fn [a v] (conj a v)) '() %)", "user": "5795c16ae4b0e215f87e8489"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5795f1f1e4b0e215f87e8490"}, {"problem": 23, "code": "(fn reverse' [x]\n  (if (empty? x) [] (conj (reverse' (rest x)) (first x))))", "user": "579563ffe4b0e215f87e847e"}, {"problem": 23, "code": "(fn myrev [coll]\n (loop [index 0 ret '() res coll]\n  (if (< index (count coll))\n   (recur (inc index) (conj ret (first res)) (rest res))\n   ret)))", "user": "579601c8e4b0e215f87e8492"}, {"problem": 23, "code": "(fn [s]\n   (loop [scur s result '()]\n     (if (= 0 (count scur))\n       result\n       (recur (rest scur) (conj result (first scur))))))", "user": "57958dace4b0e215f87e8484"}, {"problem": 23, "code": "reduce conj ()", "user": "5796e0afe4b039eba2ecb0f0"}, {"problem": 23, "code": "(fn fn-t [x]\n  (reduce (fn [result elem] (cons elem result)) () x))", "user": "572b5916e4b0cd1946bd0f39"}, {"problem": 23, "code": "reduce (fn [l v] (cons v l)) []", "user": "5784e177e4b0ebec4cfb74cf"}, {"problem": 23, "code": "#(loop [col %1\n        new-col '()]\n    (if (empty? col)\n      new-col\n      (recur (rest col) (cons (first col) new-col))))", "user": "545b486ae4b01be26fd7464f"}, {"problem": 23, "code": "(fn [coll] (reduce conj '() coll))", "user": "57853bd9e4b0ebec4cfb74d6"}, {"problem": 23, "code": ";(fn [c] (loop [i (- (count c) 1) o []]\n;          (if (&amp;lt; i 0)\n;            o\n;            (recur (dec i) (conj o (nth (seq c) i))))))\n          \napply conj ()", "user": "5798205ce4b039eba2ecb10e"}, {"problem": 23, "code": "#(loop [x % res []] (if (empty? x) res (recur (drop-last 1 x) (into res (take-last 1 x)))) )", "user": "57986b76e4b039eba2ecb116"}, {"problem": 23, "code": "#(into () %)", "user": "5798c6cde4b039eba2ecb11d"}, {"problem": 23, "code": "into ()", "user": "5798d151e4b039eba2ecb120"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5656a095e4b0f9d632dd84a1"}, {"problem": 23, "code": "(fn my-rev [s]\n    (loop [s s\n           l '() ]\n      (if (empty? s)\n        l\n        (recur (rest s) (conj l (first s)))\n        )\n      )\n    )", "user": "57985f98e4b039eba2ecb114"}, {"problem": 23, "code": "into '()", "user": "57678ca9e4b0a07e8fc180c0"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5799b054e4b05b1deef9adc7"}, {"problem": 23, "code": "#(apply concat (for [i (range (- (count %) 1) -1 -1)]\n  (take 1 (drop i %))\n  ))", "user": "5797d4bae4b039eba2ecb107"}, {"problem": 23, "code": "(fn [coll] (reduce conj '() coll))", "user": "57873017e4b0ebec4cfb7503"}, {"problem": 23, "code": "#(into '() %)", "user": "5799fc93e4b05b1deef9add0"}, {"problem": 23, "code": "(fn [x] (sort-by > (into () x)))", "user": "5797bb57e4b039eba2ecb104"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5672925fe4b05957ce8c6114"}, {"problem": 23, "code": ";(fn [c] (loop [i (- (count c) 1) o []]\n;          (if (&amp;lt; i 0)\n;            o\n;            (recur (dec i) (conj o (nth (seq c) i))))))\n          \napply conj ()", "user": "57982bace4b039eba2ecb10f"}, {"problem": 23, "code": "(fn rev\n  ([xseq]\n   (rev (rest xseq) (cons (first xseq) [])))\n  ([xseq ans]\n    (if (empty? xseq)\n      ans\n      (rev (rest xseq) (cons (first xseq) ans)))))", "user": "5795acb5e4b0e215f87e8486"}, {"problem": 23, "code": "reduce conj ()", "user": "579b16f7e4b05b1deef9adec"}, {"problem": 23, "code": "#(loop [a (apply list %) b '()] (if (= a '()) b (recur (rest a) (conj b (first a)))))", "user": "5799ff45e4b05b1deef9add1"}, {"problem": 23, "code": "(fn\n  [col]\n  (loop\n    [[head & tail :as all] (seq col)\n      acc '()]\n    (if all\n      (recur tail (cons head acc))\n      acc)))", "user": "57972c9ee4b039eba2ecb0f2"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5795bddbe4b0e215f87e8488"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "579bd58de4b05b1deef9adfd"}, {"problem": 23, "code": "into '()", "user": "579c8ad1e4b05b1deef9ae0c"}, {"problem": 23, "code": "(fn myrev [x] (if-not (empty? x) (conj (myrev (butlast x)) (last x)) '() ))", "user": "4f035fbe535dcb61093f6a92"}, {"problem": 23, "code": "(fn rev [s] (if (empty? s) [] (cons (last s) (rev (butlast s)))))", "user": "579c35fee4b05b1deef9ae04"}, {"problem": 23, "code": "#(into () %)", "user": "57949eb0e4b0e215f87e846f"}, {"problem": 23, "code": "#(loop [xs %\n       cnt (count xs)\n       res '()]\n  (if (= (count res) cnt)\n    res\n    (recur (rest xs) cnt (cons  (first xs) res))))", "user": "5799b260e4b05b1deef9adc8"}, {"problem": 23, "code": "(fn [s]\n  (reduce #(cons %2 %1) [] s))", "user": "579e15a6e4b05b1deef9ae20"}, {"problem": 23, "code": "(fn problem23-reverse-seq [seq]\n  (reduce conj '() seq))", "user": "57717915e4b0979f896515b3"}, {"problem": 23, "code": "(fn my-reverse\n  [seq]\n  (loop [old seq new []]\n    (if (empty? old)\n      new\n      (recur (butlast old) (conj new (last old))))))", "user": "579d1567e4b05b1deef9ae12"}, {"problem": 23, "code": "(fn [col]\n  (loop [lst col rev-lst '()]\n    (if (empty? lst)\n      rev-lst\n      (recur (rest lst) (cons (first lst) rev-lst)))))", "user": "579c7db7e4b05b1deef9ae0a"}, {"problem": 23, "code": "(fn [x]\n  (reduce (fn [r n] (conj r n)) '() x)\n  )", "user": "579e75fbe4b05b1deef9ae29"}, {"problem": 23, "code": "reduce conj ()", "user": "5609824ee4b0053d1b86c7e2"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5694e9c5e4b0dcc4269f4123"}, {"problem": 23, "code": "(fn [coll]\n  (loop [coll coll ret '()]\n    (if (empty? coll)\n      ret\n      (recur (rest coll) (cons (first coll) ret)))))", "user": "5151d574e4b03e678e393ae0"}, {"problem": 23, "code": "(fn\n  [coll]\n  (loop [temp-coll (vec coll) rev-coll []]\n    (if (empty? temp-coll)\n      rev-coll\n      (recur (pop temp-coll) (conj rev-coll (last temp-coll))))))", "user": "579f3293e4b05302be0b72f9"}, {"problem": 23, "code": "into '()", "user": "579f4812e4b05302be0b72fb"}, {"problem": 23, "code": "(fn [lst]\n  (loop [acc '()\n         stack lst]\n    (if (empty? stack)\n      acc\n      (recur (conj acc (first stack))\n                   (rest stack)))))", "user": "579fc29fe4b0264b925669ff"}, {"problem": 23, "code": "(fn reverse-sequence [s] (reduce #(cons %2 %1) nil s))", "user": "579bf7e3e4b05b1deef9ae01"}, {"problem": 23, "code": "(fn [coll] \n  ((fn recurse [inp out]\n    (if (= (count inp) 1)\n      (conj out (first inp))\n      (recurse (rest inp) (conj out (first inp))))) coll '()))", "user": "5797748ce4b039eba2ecb0fb"}, {"problem": 23, "code": "#(into () %)", "user": "579f5c00e4b05302be0b72fc"}, {"problem": 23, "code": "(fn [x]\n  (into [] (loop [lst x rev []]\n    (if (empty? lst)\n      rev\n      (recur (rest lst)\n             (cons (first lst) rev)\n      )\n    )\n   ))\n  )", "user": "579fb6c2e4b0264b925669fd"}, {"problem": 23, "code": "#(map (fn [x] (nth (seq %) (- (- (count %) 1) x))) (range (count %)))", "user": "54a1c22fe4b09f271ff37c4c"}, {"problem": 23, "code": "#(loop [list %1 reversedList nil] (if (empty? list) reversedList (recur (rest list) (cons (first list) reversedList))))", "user": "57974504e4b039eba2ecb0f5"}, {"problem": 23, "code": "(fn [s] (reduce conj '() s))", "user": "57a0c84fe4b0c3d858beb8d8"}, {"problem": 23, "code": "reduce conj ()", "user": "5688c95de4b0dcc4269f4070"}, {"problem": 23, "code": "#(into '() %)", "user": "57a0f256e4b0c3d858beb8dd"}, {"problem": 23, "code": "(fn [s] (reduce conj nil s))", "user": "57a178ade4b0c3d858beb8ec"}, {"problem": 23, "code": "#(into () %)", "user": "5529904be4b0ffed3738f94d"}, {"problem": 23, "code": "into ()", "user": "57783873e4b0979f8965165c"}, {"problem": 23, "code": "(fn [sequence] (loop [[item & remaining] (seq sequence) result '()] (if-not item result (recur remaining (conj result item)))))", "user": "56fda4fee4b08d47c97781a7"}, {"problem": 23, "code": "reduce conj ()", "user": "57a20f72e4b0c3d858beb8f5"}, {"problem": 23, "code": "(fn [in] \n  (loop [newset [] oldset in]\n    (if (empty? oldset)\n      newset\n      (recur (conj newset (last oldset)) (butlast oldset))\n      )\n    )\n  )", "user": "57a13745e4b0c3d858beb8e3"}, {"problem": 23, "code": "(fn r [seq] (loop [sq seq acc []] (if (empty? sq) acc (recur (rest sq) (cons (first sq) acc)))))", "user": "57a22c85e4b0c3d858beb8f6"}, {"problem": 23, "code": "reduce (fn [mylist part] (conj mylist part) ) '()", "user": "579be21fe4b05b1deef9adff"}, {"problem": 23, "code": "(fn [ar] (reduce conj () ar))", "user": "57a2d35be4b0c3d858beb907"}, {"problem": 23, "code": "#(loop [input %\n        output '()]\n   (if (empty? input)\n     output\n     (recur (rest input)\n            (cons (first input) output))))", "user": "57a310b4e4b0c3d858beb90c"}, {"problem": 23, "code": "#(into () %)", "user": "57a1ef58e4b0c3d858beb8f3"}, {"problem": 23, "code": "(fn [x] (reduce conj () x))", "user": "57a2328ae4b0c3d858beb8f8"}, {"problem": 23, "code": "(fn rev \n  ([s] (rev s ()))\n  ([s r] (if(=(count s)0)\n           r\n           (rev (drop 1 s) (conj r (first s))))))", "user": "5782ce69e4b0d36ec5835e9a"}, {"problem": 23, "code": "into ()", "user": "577fa91ee4b0d36ec5835e6a"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "578e07cfe4b0ebec4cfb7578"}, {"problem": 23, "code": "(fn [x] (reduce #(cons %2 %1) [] x))", "user": "57752a2de4b0979f89651613"}, {"problem": 23, "code": "(fn rev [xs]\n  (if (empty? xs) xs\n    (cons (last xs) (rev (butlast xs)) )))", "user": "57a49951e4b0a966079561e5"}, {"problem": 23, "code": "reduce conj ()", "user": "57a4a81ee4b0a966079561e8"}, {"problem": 23, "code": "reduce conj ()", "user": "57a4bb65e4b0a966079561eb"}, {"problem": 23, "code": "(fn [col]\n  (loop [s (seq col)\n         result '()]\n    (if s\n      (recur (next s) (conj result (first s)))\n      result)))", "user": "4e6ffaa3535d5021c1a8962e"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "57a4f5cae4b0a966079561f0"}, {"problem": 23, "code": "reduce (fn [lst el] (conj lst el)) ()", "user": "579d9601e4b05b1deef9ae18"}, {"problem": 23, "code": "(fn reve [s] (reduce (fn [x y] (conj x y)) () s))", "user": "57a60225e4b0a96607956202"}, {"problem": 23, "code": "(partial reduce conj '())", "user": "57a61332e4b0a96607956203"}, {"problem": 23, "code": "(fn [s]\n  (reduce #(conj %1 %2) '() s))", "user": "57a2bb9be4b0c3d858beb905"}, {"problem": 23, "code": "#(loop [iter % result []] (if (nil? iter) result (recur (butlast iter) (conj result (last iter)))))", "user": "57733764e4b0979f896515e0"}, {"problem": 23, "code": "(fn [coll]\n    (reduce\n      (fn [result value] (into result [value]))\n      '()\n      coll))", "user": "579dd954e4b05b1deef9ae1b"}, {"problem": 23, "code": "(fn [coll] (loop [[n & more :as all] (seq coll) acc '()] (if all (recur more (cons n acc)) acc)))", "user": "57a774e4e4b0a96607956213"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "56e4a6c1e4b03a7c14b85a51"}, {"problem": 23, "code": "#(into () %)", "user": "57a6b679e4b0a9660795620c"}, {"problem": 23, "code": "reduce conj '()", "user": "57a6ad79e4b0a9660795620b"}, {"problem": 23, "code": "#(loop [n [] m % len (count m)] \n  (if (empty? m) n (recur (conj n (last m)) (take (dec len) m) (dec len))))", "user": "57a14414e4b0c3d858beb8e4"}, {"problem": 23, "code": "reduce conj '()", "user": "57a0e0bce4b0c3d858beb8dc"}, {"problem": 23, "code": "(fn [c]\n  (reduce (fn [c n] (cons n c)) [] c))", "user": "57a1f401e4b0c3d858beb8f4"}, {"problem": 23, "code": "reduce conj ()", "user": "579fa28fe4b0264b925669fb"}, {"problem": 23, "code": "(fn myrev [x] \n  (if-not (empty? x )\n    (cons \n      (last x) \n      (myrev (butlast x)))))", "user": "57995ac1e4b05b1deef9adbf"}, {"problem": 23, "code": "(fn [xs]\n  (loop [xs xs acc []]\n    (if (empty? xs)\n      acc\n      (recur (rest xs) (cons (first xs) acc)))))", "user": "571d80c7e4b0145328a7627e"}, {"problem": 23, "code": "(fn mreverse [s]\n  (cond\n    (string? s) (apply str (into '()  s))   \n    (vector? s) (vec (into '()  s))   \n    true (into '() s) )\n)", "user": "57a8d696e4b0a96607956224"}, {"problem": 23, "code": "#(lazy-seq ((fn rev [l] (if (= l '())\r\n                       []\r\n                       (conj (rev (rest l)) (first l)))) %))", "user": "57a9b2dbe4b0a96607956233"}, {"problem": 23, "code": "#(reduce (fn [l i] (conj l i)) '() %)", "user": "57a9e274e4b0b8559636fc5d"}, {"problem": 23, "code": "(fn [s]\n  (loop [s s q '()]\n    (if-not (seq s) q (recur (rest s) (conj q (first s))))))", "user": "57aa053fe4b0b8559636fc61"}, {"problem": 23, "code": "#(reduce (fn [l x] \n  (conj l x)) '() %)", "user": "57a9b00be4b0a96607956232"}, {"problem": 23, "code": "(fn [lst]\n  (loop [x lst acc []]\n    (if (empty? x)\n      acc\n      (recur (butlast x) (conj acc (last x))))))", "user": "57a7f7d8e4b0a96607956218"}, {"problem": 23, "code": "(fn rs [coll]\n  (if (empty? coll)\n    []\n    (lazy-seq (cons (last coll) (rs (butlast coll))))))", "user": "57aa4752e4b0b8559636fc6a"}, {"problem": 23, "code": "(fn [s]\n  (loop [r '()\n         s' s]\n    (if (empty? s')\n      r\n      (recur (conj r (first s')) (rest s')))))", "user": "57aa4775e4b0b8559636fc6b"}, {"problem": 23, "code": "(fn [x] ((fn [xs revs] (if (empty? xs) revs (recur (rest xs) (cons (first xs) revs)))) (seq x) '()))", "user": "57aafac1e4b0b8559636fc75"}, {"problem": 23, "code": "(fn [icol]\n    (loop [col   icol\n           acc   []]\n      (if (empty? col) acc\n          (recur (rest col) (cons (first col) acc)))))", "user": "57aa290de4b0b8559636fc65"}, {"problem": 23, "code": "(fn [seq] (reduce conj '() seq))", "user": "57aa2b97e4b0b8559636fc66"}, {"problem": 23, "code": "#(into () %)", "user": "57ab41dde4b0b8559636fc79"}, {"problem": 23, "code": "(fn [l] (reduce (fn [acc x] (cons x acc)) [] l))", "user": "56bfd8ade4b060a8e693e3a2"}, {"problem": 23, "code": "reduce conj '()", "user": "577aad81e4b0d3393e5deb04"}, {"problem": 23, "code": "reduce (fn [acc v] (conj acc v)) '()", "user": "57acb156e4b0b8559636fc8d"}, {"problem": 23, "code": "(fn [item]\n   (loop [list (seq item) set []]\n     (if (empty? list)\n       set\n       (recur (drop-last 1 list) (conj set (last list)))\n       )\n     )\n   )", "user": "57aa103be4b0b8559636fc64"}, {"problem": 23, "code": "(fn rev [lst]\n  (when lst\n    (cons (last lst)(rev (butlast lst)))))", "user": "57a0c9c9e4b0c3d858beb8d9"}, {"problem": 23, "code": "#(into () %)", "user": "579f89d5e4b05302be0b72ff"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "578bbd3ee4b0ebec4cfb754e"}, {"problem": 23, "code": "#(reduce (fn [xs x]\n           (cons x xs))\n         []\n         %)", "user": "57abff53e4b0b8559636fc81"}, {"problem": 23, "code": "reduce conj ()", "user": "57908d94e4b0ebec4cfb75ac"}, {"problem": 23, "code": "(fn [xs] (reduce #(cons %2 %) [] xs))", "user": "4fb0ccbfe4b081705acca26e"}, {"problem": 23, "code": "reduce conj ()", "user": "57ac7710e4b0b8559636fc88"}, {"problem": 23, "code": "sort #(compare %2 %1)", "user": "55da18d5e4b0e31453f64ad1"}, {"problem": 23, "code": "(fn [coll] (reduce conj '() coll))", "user": "57a9db97e4b0b8559636fc5b"}, {"problem": 23, "code": "(fn reverse-seq [s]\n  (loop [s s\n         r '()]\n    (if (= (first s) nil)\n      (vec r)\n      (recur (rest s) (cons (first s) r)))))", "user": "57acbe5fe4b0b8559636fc8e"}, {"problem": 23, "code": "(fn r [xs] (if (empty? xs) [] (conj (r (rest xs)) (first xs))))", "user": "57adbe7ee4b0b8559636fca0"}, {"problem": 23, "code": "(fn [input]\n  (loop [some-seq input\n         accum-ve []]\n    (let [ve (vec some-seq)]\n      (if (empty? ve)\n        accum-ve\n        (recur (pop ve) (conj accum-ve (peek ve)))))))", "user": "5783c505e4b0ebec4cfb74bc"}, {"problem": 23, "code": "(fn [coll] (reduce conj () coll))", "user": "5788f357e4b0ebec4cfb7527"}, {"problem": 23, "code": "(fn [lst]\n  (loop [orig lst fin []]\n    (cond (empty? orig) fin \n          :else (recur (rest orig)(cons (first orig) fin)))))", "user": "57acee37e4b0b8559636fc94"}, {"problem": 23, "code": "#(reduce (fn [c i] (conj c i)) () %)", "user": "57ad7ad6e4b0b8559636fc9d"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "57ab536be4b0b8559636fc7a"}, {"problem": 23, "code": "#(into '() %)", "user": "5075e374e4b09049dea827a5"}, {"problem": 23, "code": "(fn [x] (reduce (fn [h t] (cons t h)) nil x))", "user": "575117f8e4b02ea11479927e"}, {"problem": 23, "code": "(fn [col]\n  (loop [c col r '()]\n    (if (nil? (first c))\n      r\n      (recur (rest c) (conj r (first c))))))", "user": "56f53c61e4b046a417f9206d"}, {"problem": 23, "code": "(fn [init-s]\n  (loop [s init-s r '()]\n    (if (empty? s)\n      (seq r)\n      (recur (rest s) (conj r (first s))))))", "user": "57addbcce4b0b8559636fca3"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "57af41bce4b0fbc9809a2731"}, {"problem": 23, "code": "#( reduce conj '() %)", "user": "57af249fe4b0fbc9809a272b"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "57ade6fce4b0b8559636fca5"}, {"problem": 23, "code": "(fn [liste]\n  (reduce (fn [c x]\n            (cons x c))\n          '()\n          liste))", "user": "57ad0950e4b0b8559636fc97"}, {"problem": 23, "code": "#(loop [x % r '()]\n   (if (empty? x) r\n     (recur (rest x)(conj r (first x)))))", "user": "579ea15ee4b05b1deef9ae2a"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "57a6552ce4b0a96607956208"}, {"problem": 23, "code": "(fn [x]\n  (loop [s x res nil]\n    (if (empty? s)\n      res\n    (recur (rest s) (conj res (first s))))))", "user": "57af74aee4b0fbc9809a2736"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "57afd36de4b0fbc9809a273c"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "55fde52ce4b00f4cabc5764c"}, {"problem": 23, "code": "#(loop [l % newseq '()]\n       (if (nil? l)\n         newseq\n         (recur (next l) (cons (first l) newseq))))", "user": "5386f784e4b06839e8705f17"}, {"problem": 23, "code": "into ()", "user": "57a88e24e4b0a9660795621f"}, {"problem": 23, "code": "reduce #(conj % %2) '()", "user": "57addf3ae4b0b8559636fca4"}, {"problem": 23, "code": "#(into '() %)", "user": "57a99d3fe4b0a96607956231"}, {"problem": 23, "code": "(fn revme [coll]\n  (if (empty? coll)\n    []\n    (conj (revme (rest coll)) (first coll))))", "user": "57af36eae4b0fbc9809a272e"}, {"problem": 23, "code": "reduce conj ()", "user": "57b1b8c8e4b0fbc9809a2756"}, {"problem": 23, "code": "(fn [x] (reduce (fn [col itm] (conj col itm )) '() x))", "user": "554b8b65e4b0a04f7929958a"}, {"problem": 23, "code": "(fn [listy] (loop [produc [] lister listy] (if (empty? lister) produc (recur (cons (first lister) produc) (rest lister)))))", "user": "5695b86de4b0dcc4269f412b"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "57b13adae4b0fbc9809a2750"}, {"problem": 23, "code": "reduce (fn [old new] (cons new old)) '()", "user": "57343747e4b0cd1946bd1006"}, {"problem": 23, "code": "(fn [l] (reduce #(conj %1 %2) '() l))", "user": "56f085d7e4b04a395b9a047e"}, {"problem": 23, "code": "#(into () %)", "user": "57ac6c67e4b0b8559636fc87"}, {"problem": 23, "code": "#(into () %)", "user": "57b2e37be4b0fbc9809a276a"}, {"problem": 23, "code": "(fn rev\n  ([x] (rev (rest x) (take 1 x) x))\n  ([res reversed orig] (if (< (count res) 1)\n                         (if (vector? orig)\n                           (vec reversed)\n                           reversed)\n                         (recur (rest res) (cons (first res) reversed) orig))))", "user": "578f5122e4b0ebec4cfb7592"}, {"problem": 23, "code": "(fn [coll]\n(reduce conj () coll))", "user": "4e6459af535d8ccf87e9fe6b"}, {"problem": 23, "code": "#(loop[s % res ()]\n   (if (first s)\n     (recur (rest s) (conj res (first s)))\n     res))", "user": "57b3efb1e4b0fbc9809a278a"}, {"problem": 23, "code": "reduce conj '()", "user": "5635adeee4b0bfe05bf117c7"}, {"problem": 23, "code": "into '()", "user": "57b3046de4b0fbc9809a276d"}, {"problem": 23, "code": "into '()", "user": "57b45257e4b0fbc9809a2796"}, {"problem": 23, "code": "(fn [x] (reduce (fn [a b] (conj a b)) '() x))", "user": "57b35a19e4b0fbc9809a277d"}, {"problem": 23, "code": "reduce #(cons %2 %1) []  \n              \n              ;; acc x", "user": "57b28351e4b0fbc9809a2760"}, {"problem": 23, "code": "#(loop [l %1 r []] (if (empty? l) r (recur (rest l) (cons (first l) r))))", "user": "57b2ca30e4b0fbc9809a2768"}, {"problem": 23, "code": "#(into '() %)", "user": "57b4779de4b0fbc9809a279a"}, {"problem": 23, "code": "(fn [lat]\n  (into '() lat))", "user": "57b56cf1e4b0fbc9809a27ac"}, {"problem": 23, "code": "#(vec (into '() %))", "user": "561a4769e4b053970a773b05"}, {"problem": 23, "code": "#(loop [result (list (first %)) arg (rest %)] (if (empty? arg) result (recur (conj result (first arg)) (rest arg))))", "user": "57b59d77e4b0fbc9809a27ae"}, {"problem": 23, "code": "#(into '() %)", "user": "57b5c29ee4b0fbc9809a27b1"}, {"problem": 23, "code": "(fn rev\n  ([v] (rev v []))\n  ([orig rvrs]\n    (if (= (count orig) 0) rvrs (rev (rest orig) (cons (first orig) rvrs)))))", "user": "57a775bbe4b0a96607956214"}, {"problem": 23, "code": "(fn my-reverse\n  ([arg-coll]\n   (loop [coll arg-coll result []]\n     (if (empty? coll)\n       result\n       (recur (rest coll) (cons (first coll) result))))))", "user": "57b5dc52e4b0fbc9809a27b3"}, {"problem": 23, "code": "(fn rev\n  ([col] (rev col []))\n  ([col acc] (if (empty? col)\n               acc\n               (let [remaining (rest col)\n                     result (concat [(first col)] acc)]\n                 (recur remaining result)))))", "user": "56326e03e4b0bfe05bf117a4"}, {"problem": 23, "code": "reduce conj '()", "user": "57b6231ae4b0fbc9809a27b7"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "57a28fb1e4b0c3d858beb901"}, {"problem": 23, "code": "(fn [xs] (loop [head (first xs) tail (rest xs) ys '()] (if (nil? head) ys (recur (first tail) (rest tail) (conj ys head)))))", "user": "57b65420e4b0fbc9809a27be"}, {"problem": 23, "code": "reduce conj ()", "user": "57b55290e4b0fbc9809a27a9"}, {"problem": 23, "code": "(fn f ([coll] (f coll '()))\n  ([coll revcoll] (if (empty? coll)\n                    revcoll\n                    (f (rest coll) (conj revcoll (first coll)))\n                    ))\n  )", "user": "57b5ed94e4b0fbc9809a27b4"}, {"problem": 23, "code": "into '()", "user": "57b82f20e4b0fbc9809a27d9"}, {"problem": 23, "code": "(fn [s]\n  (loop [r []  sq s]\n    (if (empty? sq)\n      r\n      (recur (conj r (last sq))\n             (take (- (count sq) 1) sq)))))", "user": "57b6edf6e4b0fbc9809a27c8"}, {"problem": 23, "code": "reduce conj ()", "user": "57b863dfe4b0fbc9809a27de"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "56684356e4b04acd4f672de4"}, {"problem": 23, "code": "(fn [x my-seq]\n      (if (empty? my-seq)\n        x\n        (recur (into x (take-last 1 my-seq)) (into [] (drop-last my-seq))))) []", "user": "57a1478ae4b0c3d858beb8e5"}, {"problem": 23, "code": "reduce conj '()", "user": "57af4a93e4b0fbc9809a2733"}, {"problem": 23, "code": "(fn foo [x] (if (first x) (conj (vec (foo (rest x))) (first x)) x))", "user": "57b8b008e4b0fbc9809a27e6"}, {"problem": 23, "code": "#(into () %)", "user": "57b98108e4b0fbc9809a27ef"}, {"problem": 23, "code": "into()", "user": "57a10070e4b0c3d858beb8e0"}, {"problem": 23, "code": "reduce conj '()", "user": "57b99d48e4b0fbc9809a27f2"}, {"problem": 23, "code": "reduce conj ()", "user": "57b88091e4b0fbc9809a27e1"}, {"problem": 23, "code": "(fn [coll] (reduce conj '() coll))", "user": "57a0f7cfe4b0c3d858beb8de"}, {"problem": 23, "code": "reduce #(conj %1 %2) '()", "user": "57b9fc74e4b0fbc9809a27fb"}, {"problem": 23, "code": "reduce conj ()", "user": "56d03a08e4b0ea9b8538f77a"}, {"problem": 23, "code": "#(loop [s % r []]\n   (if (empty? s)\n     r\n     (recur (drop-last s) (conj r (last s)))))", "user": "56cf115de4b0ea9b8538f765"}, {"problem": 23, "code": "(fn [coll] (reduce conj nil coll))", "user": "50ab395de4b0f65d68208508"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "57b6555be4b0fbc9809a27bf"}, {"problem": 23, "code": "(fn recursive [coll]\n    (if (empty? coll)\n        []\n        (conj (recursive (rest coll)) (first coll) )))", "user": "57153c1ae4b07c98581c3ad3"}, {"problem": 23, "code": "into ()\n;into '()", "user": "57ba55c1e4b0fbc9809a2801"}, {"problem": 23, "code": "(fn [lst] (loop [l lst r nil] (if (nil? (first l)) r (recur (rest l) (conj r (first l))))))", "user": "54a43230e4b09f271ff37c6e"}, {"problem": 23, "code": "(fn rev [array]\n  (if (empty? array)\n    []\n    (conj (rev (rest array)) (first array))\n    )\n  )", "user": "567ff160e4b0966858e4d8e6"}, {"problem": 23, "code": "into ()", "user": "574eb3b1e4b02ea114799247"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "57bc9375e4b05aa3c4741c43"}, {"problem": 23, "code": "(fn  [n] (loop [cnt n acc []] (if (empty? cnt)  acc (recur (drop-last cnt) (conj acc(last cnt))))))", "user": "57b8f784e4b0fbc9809a27ea"}, {"problem": 23, "code": "into ()", "user": "57bbc9bde4b05aa3c4741c31"}, {"problem": 23, "code": "(fn [x] (loop [ rev-list '() old-list x] (if (empty? old-list) rev-list (recur (conj rev-list (first old-list)) (rest old-list)) ) ))", "user": "5644611be4b0284900eef5f1"}, {"problem": 23, "code": "into ()", "user": "566ff0a1e4b0a866af6896ec"}, {"problem": 23, "code": "(fn rev[seqq]\n  (into '() seqq))", "user": "57bd960fe4b05aa3c4741c52"}, {"problem": 23, "code": "reduce conj ()", "user": "57a89ae9e4b0a96607956221"}, {"problem": 23, "code": "(fn myrev [l]\n  (\n   (fn ff [l o] \n     (if (empty? l) \n       o\n       (ff (rest l) \n           (cons (first l) o)\n           )\n       )\n     ) l [])\n   )", "user": "573e2d54e4b05c31a32c0824"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "572fdecae4b0cd1946bd0f9e"}, {"problem": 23, "code": "into ()", "user": "57b4b3a0e4b0fbc9809a27a3"}, {"problem": 23, "code": "reduce conj '()", "user": "57bc722ce4b05aa3c4741c41"}, {"problem": 23, "code": "(fn rev [l] \n  (if (empty? l) '() \n                  (concat (rev (rest l)) [(first l)])\n  )\n)", "user": "57be0543e4b05aa3c4741c61"}, {"problem": 23, "code": "(fn [coll] (reduce conj () coll))", "user": "53376fc5e4b0e30313ee6c88"}, {"problem": 23, "code": "(fn rev [a]\n  (letfn [(revLoop [l r]\n    (if (empty? l)\n      r\n\t  (revLoop (rest l) (cons (first l) r))))]\n    (revLoop a `())))", "user": "560439fce4b0c80df0ca2659"}, {"problem": 23, "code": "#(loop [col %\n       reversed []]\n     (if (empty? col)\n     reversed\n     (recur  (butlast col)\n            (conj reversed (last col)))))", "user": "57bf304de4b05aa3c4741c75"}, {"problem": 23, "code": "(fn [in]\n  (loop [new-in in out []]\n        (if (empty? new-in)\n            out\n          (recur (rest new-in) (cons (first new-in) out))\n          )\n        )\n  )", "user": "57b9d21fe4b0fbc9809a27f7"}, {"problem": 23, "code": "(fn [x] (reduce #(conj %1 %2) '() x))", "user": "57bf6ca7e4b05aa3c4741c7c"}, {"problem": 23, "code": "reduce conj '()", "user": "5649b1b0e4b0284900eef646"}, {"problem": 23, "code": "#(reduce\n   (fn [val coll]\n     (cons coll val))\n   []\n   %)", "user": "57bfffc7e4b05aa3c4741c8a"}, {"problem": 23, "code": "(fn [lat] (reduce conj '() lat))", "user": "57c0365be4b05aa3c4741c8f"}, {"problem": 23, "code": "(fn [s] (loop [result '()\n\t   s s]\n\t(if (empty? s)\n\t\tresult\n\t\t(recur (conj result (first s)) (drop 1 s)))))", "user": "57c0393be4b05aa3c4741c90"}, {"problem": 23, "code": "#(reduce (fn [a-coll new-item] (cons new-item a-coll)) '() %)", "user": "57c0917be4b05aa3c4741c95"}, {"problem": 23, "code": "(partial reduce \n         (fn [y x] (conj y x))\n         '()\n         )", "user": "57bf2aace4b05aa3c4741c73"}, {"problem": 23, "code": "(fn test [seqq]\n  (cond (empty? seqq) []\n        :else\n        (conj (test (rest seqq))\n              (first seqq))))", "user": "579332c2e4b0e215f87e8452"}, {"problem": 23, "code": "(fn q [s]\n  (reduce (fn [a b]\n            (conj a b))\n            (list (first s))\n            (rest s)))", "user": "57befca6e4b05aa3c4741c70"}, {"problem": 23, "code": "(fn [coll] (reduce #(conj %1 %2) '() coll))", "user": "57b9f35be4b0fbc9809a27f9"}, {"problem": 23, "code": "#(into () %)", "user": "57c291d8e4b05aa3c4741cb4"}, {"problem": 23, "code": "(fn [array]\n  (loop [first-elem (first array) rest-elem (rest array) reversed-array '()]\n    (if (empty? rest-elem)\n      (conj reversed-array first-elem)\n      (recur (first rest-elem) (rest rest-elem) (conj reversed-array first-elem)))))", "user": "57c2d66ae4b05aa3c4741cb9"}, {"problem": 23, "code": "(fn rev [xs] (if (empty? xs) '() (concat (rev (rest xs)) [(first xs)])))", "user": "57783e59e4b0979f8965165d"}, {"problem": 23, "code": "(fn rev [sequence] (reduce conj '() sequence))", "user": "57c2d0c1e4b05aa3c4741cb8"}, {"problem": 23, "code": "#(into () %)", "user": "578f8a0ae4b0ebec4cfb7596"}, {"problem": 23, "code": "(fn [l] (reduce conj () l))", "user": "57bfb321e4b05aa3c4741c83"}, {"problem": 23, "code": "(fn rvs [x]\n  (if (empty? x)\n    '()\n    (cons\n     (last x)\n     (rvs (butlast x)))))", "user": "5796d3ebe4b039eba2ecb0ee"}, {"problem": 23, "code": "#(into '() %)", "user": "57c0f515e4b05aa3c4741c98"}, {"problem": 23, "code": "(fn [items]\n  (reduce conj '() items)\n)", "user": "57c3c7e6e4b05aa3c4741cc4"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "57c3451fe4b05aa3c4741cbd"}, {"problem": 23, "code": "#(reduce conj '() %1)", "user": "57c500f9e4b05aa3c4741cda"}, {"problem": 23, "code": "(fn my-reverse [coll]\n  (loop [c coll acc [] ]\n    (if (empty? c)\n      acc\n      (recur (drop-last 1 c)(conj acc (last c))))))", "user": "57c3df67e4b05aa3c4741cc5"}, {"problem": 23, "code": "#(into (list) %)", "user": "57b167afe4b0fbc9809a2752"}, {"problem": 23, "code": "#(loop[ll %,rst nil] (if (empty? ll) rst (recur (rest ll) (cons (first ll) rst))))", "user": "56c50599e4b05cc29241ee9e"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "57c1b32be4b05aa3c4741ca4"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "52369a67e4b05f3be1c7c8f5"}, {"problem": 23, "code": "apply conj '()", "user": "57c56d78e4b05aa3c4741ce3"}, {"problem": 23, "code": "(fn [sequence]\n  (reduce conj '() sequence))", "user": "57c4a231e4b05aa3c4741cd5"}, {"problem": 23, "code": "#(reduce conj() %)", "user": "57c4ef0be4b05aa3c4741cd8"}, {"problem": 23, "code": "(fn reverse-sequence\n   [x] (let [the-rest (rest x)] (if (empty? the-rest) (into [] x) (conj (reverse-sequence the-rest) (first x)))))", "user": "57b356c2e4b0fbc9809a277b"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "57b4634ce4b0fbc9809a2798"}, {"problem": 23, "code": "reduce conj '()", "user": "57bc4bf4e4b05aa3c4741c3e"}, {"problem": 23, "code": "reduce #(concat [%2] %1) []", "user": "57c58ad6e4b05aa3c4741ce7"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "57c6aa0be4b05aa3c4741cf7"}, {"problem": 23, "code": "#(reduce (fn [acc x] (concat [x] acc)) [] %)", "user": "57c4e8dce4b05aa3c4741cd7"}, {"problem": 23, "code": "reduce conj '()", "user": "57c5c48ae4b05aa3c4741ce9"}, {"problem": 23, "code": "#(into () %)", "user": "57af3bace4b0fbc9809a2730"}, {"problem": 23, "code": "#(into '() %)", "user": "57bffed6e4b05aa3c4741c89"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "57c70189e4b05aa3c4741cfb"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "558e160ce4b027778923764c"}, {"problem": 23, "code": "#(reduce conj () %1)", "user": "57c62aece4b05aa3c4741cf1"}, {"problem": 23, "code": "#(vec (reduce (fn [a b] (cons b a)  ) [] %))", "user": "57b35772e4b0fbc9809a277c"}, {"problem": 23, "code": "reduce conj '()", "user": "57b084ece4b0fbc9809a2745"}, {"problem": 23, "code": "(fn [coll]\n  (reduce (fn [init val] (cons val init)) '() coll))", "user": "57700f88e4b0979f89651597"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "57c779d6e4b05aa3c4741d06"}, {"problem": 23, "code": "reduce (fn [a b] (cons b a)) []", "user": "57c7a8b5e4b05aa3c4741d09"}, {"problem": 23, "code": "reduce conj '()", "user": "57c7e7d9e4b05aa3c4741d0f"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "57c6bca1e4b05aa3c4741cf8"}, {"problem": 23, "code": "apply conj '()", "user": "57c7cef5e4b05aa3c4741d0d"}, {"problem": 23, "code": "#(reduce (fn [acc m] (conj acc m)) '() %)", "user": "55f4ebffe4b06e875b46ce81"}, {"problem": 23, "code": "(fn [input] (reduce conj '() input))", "user": "57b3027fe4b0fbc9809a276c"}, {"problem": 23, "code": "reduce conj '()", "user": "57c796b4e4b05aa3c4741d08"}, {"problem": 23, "code": "into ()", "user": "57c92bdbe4b05aa3c4741d27"}, {"problem": 23, "code": "#(into () %)", "user": "57c93c50e4b05aa3c4741d2b"}, {"problem": 23, "code": "(fn rev-seq [lat]\n  (into '() lat))", "user": "57c92fc6e4b05aa3c4741d28"}, {"problem": 23, "code": "(fn rev-stuff [coll] (reduce #(conj %1 %2) '() coll))", "user": "57ca95f2e4b05aa3c4741d3b"}, {"problem": 23, "code": "reduce conj ()", "user": "57c94c6ee4b05aa3c4741d2d"}, {"problem": 23, "code": "#((fn reverser [a b] (if (empty? a)\n              \t\t\tb\n                     \t(reverser (butlast a) (conj b (last a))))) % [])", "user": "515310b4e4b0d6806ecd26fb"}, {"problem": 23, "code": "(fn [coll]\n  (loop [data coll\n         rev () ]\n    (if (empty? data)\n\t\trev\n    \t(recur (rest data) (conj rev (first data)))\n    )\n   )\n)", "user": "57cc14aae4b05aa3c4741d4a"}, {"problem": 23, "code": "into ()", "user": "57c7fa03e4b05aa3c4741d12"}, {"problem": 23, "code": "#(reduce (fn [c e] (conj c e)) '() %)", "user": "57c45e64e4b05aa3c4741ccf"}, {"problem": 23, "code": "(fn [coll]\n  (loop [in coll out []]\n    (if (empty? in)\n      out\n      (recur (drop-last in) (conj out (last in))))))", "user": "567a3112e4b05957ce8c6196"}, {"problem": 23, "code": "reduce #(conj % %2) '()", "user": "571077e8e4b09c608db70434"}, {"problem": 23, "code": "(fn reverser [col] \n  (if (> (count col) 1) \n    (concat\n     (reverser (rest col))\n     (list (first col))\n    )\n    col\n  )\n)", "user": "57cc7d96e4b0c746388ab882"}, {"problem": 23, "code": "(fn [s]\n  (loop [s s\n         r '()]\n    (if (empty? s)\n      r\n      (recur (rest s) (conj r (first s)))\n      )\n    )\n  )", "user": "57cd7498e4b0c746388ab897"}, {"problem": 23, "code": "#(into () %)", "user": "57cacbf2e4b05aa3c4741d3e"}, {"problem": 23, "code": "reduce #(into [%2] %1) []", "user": "57ce3fede4b0c746388ab8a6"}, {"problem": 23, "code": "(fn [coll]\n  (loop [result () coll coll]\n    (if (empty? coll) result\n      (recur (cons (first coll) result) (rest coll)))))", "user": "561052ace4b05f002753df6e"}, {"problem": 23, "code": "#(loop [m_seq % new_seq (empty %)] \n   (if (empty? m_seq)\n     new_seq\n     (recur (rest m_seq) (cons (first m_seq) new_seq))))", "user": "57cc5a79e4b0c746388ab87d"}, {"problem": 23, "code": "(fn [x]\n  (loop [lst x rev ()]\n    (if (empty? lst)\n      rev\n      (recur (rest lst) (conj rev (first lst))))))", "user": "57cef3f8e4b0c746388ab8b4"}, {"problem": 23, "code": "(fn r [s]\n  (if (empty? s)\n    s\n    (if (list? s)\n      (conj (r (drop-last s)) (last s))\n      (conj (r (vec (rest s))) (first s)))))", "user": "57a0b341e4b0c3d858beb8d4"}, {"problem": 23, "code": "#(into '() %)", "user": "57c3808ce4b05aa3c4741cbf"}, {"problem": 23, "code": "(fn [data]\n  (if (vector? data)\n    (into [] (reduce conj '() data))\n    (reduce conj '() data)))", "user": "57b19fa1e4b0fbc9809a2754"}, {"problem": 23, "code": "reduce conj ()", "user": "57cd7086e4b0c746388ab896"}, {"problem": 23, "code": "reduce conj '()", "user": "57ccedaae4b0c746388ab88e"}, {"problem": 23, "code": "reduce (fn [new-c n] (cons n new-c)) []", "user": "57d0cd58e4b0bd073c20235e"}, {"problem": 23, "code": "(fn [args] (into () args))", "user": "57d13683e4b0bd073c202368"}, {"problem": 23, "code": "(fn rev [xs] (reduce conj '() xs))", "user": "57cf9de8e4b00451144b0503"}, {"problem": 23, "code": "(fn my-reverse [coll] (if (nil? (first coll)) '() (concat (my-reverse (rest coll)) (list (first coll)))))", "user": "57d0fce5e4b0bd073c202364"}, {"problem": 23, "code": "(fn reverse-seq [x] (if (= (count x) 1) x (concat (reverse-seq (rest x)) (list (first x)))))", "user": "57d1d6c8e4b0bd073c202370"}, {"problem": 23, "code": "into ()", "user": "57760c89e4b0979f8965162a"}, {"problem": 23, "code": "into ()", "user": "57c8208ce4b05aa3c4741d16"}, {"problem": 23, "code": "#(reduce (fn [lst, x] (cons x lst)) [] %)", "user": "57d3a2c4e4b0bd073c202395"}, {"problem": 23, "code": "(fn [c]\n  (loop [xs c result '()]\n    (if (empty? xs)\n      result\n      (let [head (first xs) tail (rest xs)]\n        (recur tail (conj result head))))))", "user": "57c176abe4b05aa3c4741ca2"}, {"problem": 23, "code": "(fn\n  [original-list]\n  ((fn [x y]\n    (cond\n      (= x '()) y\n      :else (recur (rest x) (conj y (first x)))))\n  original-list '()))", "user": "57ce6090e4b0c746388ab8ab"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "57d21102e4b0bd073c202375"}, {"problem": 23, "code": "(fn [seq] (vec (reduce (fn [a b] (cons b a)) '() seq)))", "user": "57d46caae4b0bd073c2023a1"}, {"problem": 23, "code": "#(into '() %)", "user": "57d4f225e4b0bd073c2023a6"}, {"problem": 23, "code": "(fn [z]\n  ((fn in [x y]\n      (if (empty? x)\n        y\n        (in (rest x) (conj y (first x)))\n        )) z '()))", "user": "57be086ae4b05aa3c4741c62"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "57cfc061e4b00451144b0505"}, {"problem": 23, "code": "(fn [col] (reduce conj () col) )", "user": "57d588a5e4b0bd073c2023b6"}, {"problem": 23, "code": "(fn revseq [s] ((fn revseq-aux [s result] (if (empty? s) result (revseq-aux (rest s) (conj result (first s))))) s '()))", "user": "57d5ac4de4b0bd073c2023bc"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "569bce78e4b0542e1f8d1458"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "57d6b9c4e4b0bd073c2023cb"}, {"problem": 23, "code": "reduce conj ()", "user": "57d6c5cae4b0bd073c2023ce"}, {"problem": 23, "code": "(fn [initial-coll] (loop[coll initial-coll, result ()] \n                     (if (empty? coll)\n                       \tresult\n                    \t(recur  (rest coll) (conj result (first coll))))))", "user": "57d60d83e4b0bd073c2023c2"}, {"problem": 23, "code": "(fn [s]\n  (loop [r s result '()]\n    (if (empty? r)\n      result\n      (recur (rest r) (conj result (first r)))\n)\n)\n)", "user": "57d7c894e4b0bd073c2023de"}, {"problem": 23, "code": "#(into '() %)", "user": "57d7ca32e4b0bd073c2023df"}, {"problem": 23, "code": "(fn [s] (into () s))", "user": "57d1a0e6e4b0bd073c20236d"}, {"problem": 23, "code": "#( into () %)", "user": "57c7b7abe4b05aa3c4741d0b"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "57d3b5c5e4b0bd073c202396"}, {"problem": 23, "code": "#(into () %)", "user": "57d7fbace4b0bd073c2023e4"}, {"problem": 23, "code": "(fn rev [x] (if \n  (nil? (last x) )\n  x\n  (conj (rev (take (dec (count x)) x)) (last x)   ) \n) )", "user": "57d95f37e4b0bd073c2023fc"}, {"problem": 23, "code": "#(into '() %)", "user": "57d9750be4b0bd073c2023fe"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "57d55f87e4b0bd073c2023b1"}, {"problem": 23, "code": "into ()", "user": "573d8658e4b05c31a32c0814"}, {"problem": 23, "code": "(fn revv [x] (when-not (empty? x) (concat (revv (rest x)) (list (first x)))))", "user": "57d8a1dee4b0bd073c2023ee"}, {"problem": 23, "code": "(fn [values]\n  (loop [values values result []]\n    (if (empty? values)\n      result\n      (recur (butlast values) (conj result (last values))))))", "user": "57d9bca1e4b0bd073c202405"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "57da5fc4e4b0bd073c20240f"}, {"problem": 23, "code": "(fn [x] (loop [s x r '()] (if (empty? s) r (recur (rest s) (conj r (first s))))))", "user": "57b65c9be4b0fbc9809a27c0"}, {"problem": 23, "code": "(fn [x] (into () x))", "user": "57c93af1e4b05aa3c4741d2a"}, {"problem": 23, "code": "(fn [my-seq]\n    (loop [foreward my-seq\n           final-seq '()]\n        (if (empty? foreward)\n            final-seq\n            (recur\n                (rest foreward)\n                (conj final-seq (first foreward))))))", "user": "5784ff88e4b0ebec4cfb74d4"}, {"problem": 23, "code": "(fn [lst]\n  (loop [lst lst rlst '()]\n    (if (empty? lst)\n      rlst\n      (recur (rest lst) (conj rlst (first lst))))))", "user": "57d9f603e4b0bd073c20240a"}, {"problem": 23, "code": "#(loop [x % y (list)] \n   (if (seq x)\n     (recur (next x) (conj y (first x))) y ))", "user": "57dafe97e4b0bd073c20241c"}, {"problem": 23, "code": "into '()", "user": "57dbcc28e4b0bd073c202429"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "57dc30e0e4b0bd073c202430"}, {"problem": 23, "code": "#(loop [x %\n        y []]\n    (if (empty? x)\n      y\n      (recur (drop-last x) (conj y (last x)))))", "user": "57dd3ae3e4b0bd073c20243d"}, {"problem": 23, "code": "reduce conj nil", "user": "57dda21be4b0bd073c202445"}, {"problem": 23, "code": "reduce #(conj %1 %2) '()", "user": "57ddb63fe4b0bd073c20244a"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "57942207e4b0e215f87e8469"}, {"problem": 23, "code": "into '()", "user": "57df4cb5e4b0bd073c202463"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "5785c1d4e4b0ebec4cfb74e1"}, {"problem": 23, "code": "#(into () %)", "user": "57de9acce4b0bd073c202456"}, {"problem": 23, "code": "#(reduce (fn [p1 p2] (conj p1 p2)) () %)", "user": "57e0447ae4b0bd073c202475"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "57dd47f4e4b0bd073c20243e"}, {"problem": 23, "code": "reduce(fn[r i](cons i r))'()", "user": "57dba312e4b0bd073c202426"}, {"problem": 23, "code": "(fn [x]\n  (reduce conj '() x)\n  )", "user": "57dfea1ae4b0bd073c20246d"}, {"problem": 23, "code": "reduce conj '()", "user": "57e0f30ae4b0bfb2137f5a66"}, {"problem": 23, "code": "#(vec (into '() %))", "user": "57d93437e4b0bd073c2023f9"}, {"problem": 23, "code": "#(reduce conj '() %1)", "user": "5650082fe4b0284900eef6b7"}, {"problem": 23, "code": "reduce conj ()", "user": "57b60e46e4b0fbc9809a27b6"}, {"problem": 23, "code": "(fn -reverse \n  ([l] \n   (-reverse l '()))\n  ([l acc] \n   (let [-head (first l) \n         -tail (rest l)]\n     (if (= -head nil)\n       acc\n       (-reverse -tail (cons -head acc))\n       )\n     ))\n  )", "user": "571543bbe4b07c98581c3ad4"}, {"problem": 23, "code": "#(vals (into (sorted-map-by >) (zipmap (range 0 (count %)) %)))", "user": "57e139f6e4b0bfb2137f5a6c"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "57e13e52e4b0bfb2137f5a6d"}, {"problem": 23, "code": "reduce conj '()", "user": "57dfab73e4b0bd073c202468"}, {"problem": 23, "code": "(fn [el]\n  (map (partial nth (vec el))\n       (range (dec (count el)) -1 -1)))", "user": "57e20474e4b0bfb2137f5a82"}, {"problem": 23, "code": "reduce #(cons %2 %1) []", "user": "5705f569e4b0b0fb43fd0677"}, {"problem": 23, "code": "#(into () %)", "user": "57d9cae9e4b0bd073c202409"}, {"problem": 23, "code": "(fn [x]\n  (loop [a (seq x) b '()]\n    (if (empty? a)\n      b\n      (recur (rest a) (cons (first a) b)))))", "user": "566d71b1e4b0a866af6896ca"}, {"problem": 23, "code": "(fn [data] (cond (vector? (first data)) (vector (last data) (second data) (first data))\n                 :else\n                 (sort > data)))", "user": "56940617e4b0dcc4269f410b"}, {"problem": 23, "code": "#(into () %)", "user": "57e2e1bde4b0bfb2137f5a8f"}, {"problem": 23, "code": "into ()", "user": "57c8aed9e4b05aa3c4741d22"}, {"problem": 23, "code": "(fn rev [coll]\n  (if (empty? coll)\n  []\n  (conj (rev (rest coll)) (first coll))))", "user": "57e10705e4b0bfb2137f5a6a"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "56e1122fe4b03a7c14b85a20"}, {"problem": 23, "code": "#(reduce (fn [v item](conj v item)) () %)", "user": "57e30d38e4b0bfb2137f5a92"}, {"problem": 23, "code": "#(into '() %)", "user": "57e3527ce4b0bfb2137f5a99"}, {"problem": 23, "code": "(fn tom [acc lst] (if (= (count lst) 0) acc (tom (conj acc (first lst)) (rest lst)) )) ()", "user": "57e404a3e4b0bfb2137f5ab1"}, {"problem": 23, "code": "into ()", "user": "57e33f6fe4b0bfb2137f5a96"}, {"problem": 23, "code": "#(loop [ve (vec %) new []]\n    (if (not (empty? ve))\n      (recur (pop ve) (conj new (last ve)))\n      new\n      ))", "user": "57e3f709e4b0bfb2137f5aaf"}, {"problem": 23, "code": "#(reduce (fn [mem next] (cons next mem)) (empty %1) %1)", "user": "570fd28be4b09c608db70427"}, {"problem": 23, "code": "#(reduce (fn [reversed new] (conj reversed new)) () %)", "user": "57e56da8e4b0bfb2137f5ad6"}, {"problem": 23, "code": "(fn [arg] \n  (loop [ret '() e arg] \n    (if (empty? e) \n      ret \n      (recur (conj ret (first e)) (rest e)))))", "user": "57e572b5e4b0bfb2137f5ad7"}, {"problem": 23, "code": "; (fn rev [coll]\n;  (if (empty? coll)\n;    []\n;\t(conj (rev (vec (rest coll))) (first coll))))\n;\n(fn [coll]\n  (reduce conj '() coll))", "user": "57e37f90e4b0bfb2137f5a9c"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "57e59d2be4b0bfb2137f5ad9"}, {"problem": 23, "code": "into (list)", "user": "57e5052ae4b0bfb2137f5ace"}, {"problem": 23, "code": "(fn [xs]\n    (loop [[x & more :as all] (seq xs)\n           acc '()]\n      (if all\n        (recur more (cons x acc))\n        acc)))", "user": "57e70a99e4b0bfb2137f5af8"}, {"problem": 23, "code": "(fn [in]\n  (loop [l in\n         out (list)]\n    (if (not (empty? l))\n      (recur (rest l) (conj out (first l)))\n      out)))", "user": "56f1469de4b04a395b9a048c"}, {"problem": 23, "code": "(fn[xs](reduce (fn[accum,x](cons x accum)) nil xs))", "user": "57e3d30be4b0bfb2137f5aab"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "57d0679ee4b0bd073c202359"}, {"problem": 23, "code": ";reduce (fn [x y] (cons y x)) nil\n\nreduce conj ()", "user": "57e4dbcbe4b0bfb2137f5ac3"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "57e6997ee4b0bfb2137f5af0"}, {"problem": 23, "code": "(fn my-reverse\n  [coll]\n  (if (empty? coll)\n    []\n    (conj (my-reverse (rest coll)) (first coll))))", "user": "57e79d8ee4b0bfb2137f5afe"}, {"problem": 23, "code": "#(reduce (fn [rs ls] (cons ls rs)) [] %)", "user": "57de5f0ee4b0bd073c202450"}, {"problem": 23, "code": "(fn my-reverse[x]\n  (cond\n   (> (count x) 1) (concat (my-reverse (rest x)) [(first x)])\n   :else x\n  )\n)", "user": "57ea2c91e4b0bfb2137f5b42"}, {"problem": 23, "code": "(fn myReverse\n  ([coll] (myReverse '() coll))\n  ([result coll]\n   (if (empty? coll)\n     result\n     (myReverse (conj result (first coll)) (drop 1 coll)))))", "user": "57e9a77ae4b0bfb2137f5b35"}, {"problem": 23, "code": "into '()", "user": "57df309ee4b0bd073c20245f"}, {"problem": 23, "code": "(fn [x]\n  (loop [in x\n         out '()]\n    (if (empty? in)\n      out\n      (recur (rest in)\n             (conj out (first in))\n      ))))", "user": "57eb10b1e4b0bfb2137f5b5b"}, {"problem": 23, "code": ";user=> (for [i [1 2 3]] (vec (cons i [4])))\n;([1 4] [2 4] [3 4])\n;user=> (for [i [1 2 3]] (cons i [4]))\n;((1 4) (2 4) (3 4))\n;user=> (loop [i [1 2 3]] (cons i [4]))\n;([1 2 3] 4)\n\n#(vec (reduce conj () %))", "user": "56629a7de4b0e91d5f5c5649"}, {"problem": 23, "code": "#(into () %)", "user": "57eb2576e4b0bfb2137f5b5c"}, {"problem": 23, "code": "reduce conj ()", "user": "55c66ffee4b0e31453f649c2"}, {"problem": 23, "code": "(fn rev [coll]\n  (loop [reversed ()\n         remaining coll]\n    (if (= 0 (count remaining))\n      reversed\n      (recur (conj reversed (first remaining)) (rest remaining)))))", "user": "57eb38dbe4b0bfb2137f5b5e"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "52f625ffe4b047fd55836fb5"}, {"problem": 23, "code": "(fn rev \n  [xs]\n  (reduce (fn [res el] (cons el res)) '() xs))", "user": "57974188e4b039eba2ecb0f4"}, {"problem": 23, "code": "(partial reduce #(cons %2 %1) [] )", "user": "4e6a5728535d8ccf87e9fecf"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "56f26f9ae4b04a395b9a04a4"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "57ec3d29e4b0bfb2137f5b77"}, {"problem": 23, "code": "#(into `() %)", "user": "57ecf93be4b0bfb2137f5b8c"}, {"problem": 23, "code": "#(into '() (seq %))", "user": "57eb7a97e4b0bfb2137f5b62"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "578b9978e4b0ebec4cfb754c"}, {"problem": 23, "code": "#(reduce conj()%)", "user": "57ecf8b2e4b0bfb2137f5b8b"}, {"problem": 23, "code": "(fn rd\n  ([xs] (rd xs nil))\n  ([xs a] (if (empty? xs) a\n            (rd (rest xs) (conj a (first xs)))))\n  )", "user": "57ed8315e4b0bfb2137f5b9a"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "57ec8d1de4b0bfb2137f5b7f"}, {"problem": 23, "code": "#(let [v (list* %1)]\n  (loop [r [], i 0]\n    (if (= nil (nth v i nil))\n      r\n      (recur (cons (nth v i) r) (inc i)))))", "user": "57ecc16fe4b0bfb2137f5b83"}, {"problem": 23, "code": "reduce conj '()\n;#(reduce conj '() %)", "user": "57e91413e4b0bfb2137f5b20"}, {"problem": 23, "code": "(fn rev [coll] (reduce conj () coll))", "user": "57ee804ee4b0bfb2137f5bbb"}, {"problem": 23, "code": "(fn [l] (reduce #(cons %2 %1) [] l))", "user": "57eea2bee4b0bfb2137f5bc3"}, {"problem": 23, "code": "reduce conj '()", "user": "57db2369e4b0bd073c20241f"}, {"problem": 23, "code": "(fn [coll] (reduce #(cons %2 %1) nil coll))", "user": "57e7ecc1e4b0bfb2137f5b05"}, {"problem": 23, "code": "#(for [x (range (count %))] (nth (into [] %) (- (count %) (+ x 1))))", "user": "57ea107ae4b0bfb2137f5b3e"}, {"problem": 23, "code": "into ()", "user": "57d13150e4b0bd073c202366"}, {"problem": 23, "code": "#(reduce (fn [acc x]\n          (conj acc x))\n          '()\n          %)", "user": "574e84e0e4b02ea114799243"}, {"problem": 23, "code": "(fn [coll]\n  (let [rev-coll\n        (rest (reduce\n                (fn [x y]\n                  (->> x\n                      ((comp rest first))\n                      (conj x)))\n                (list coll) coll))]\n    (map #(first %) rev-coll)))", "user": "57ef7f0ee4b0bfb2137f5bd9"}, {"problem": 23, "code": "(fn [coll]\n  (loop [col coll\n         revcoll '()]\n    (if (empty? col)\n      (vec revcoll)\n      (recur (rest col)(conj revcoll (first col))))))", "user": "57485efee4b009280f9f2b8a"}, {"problem": 23, "code": "(fn rev [s]\n  (let [rev-helper (fn rev-helper [s acc]\n                     (if (empty? s)\n                       acc\n                       (rev-helper \n                        (rest s) \n                        (cons (first s) acc))))]\n    (rev-helper s '())))", "user": "57df2722e4b0bd073c20245e"}, {"problem": 23, "code": "(fn [x] (apply conj '() x))", "user": "57b9bfdae4b0fbc9809a27f5"}, {"problem": 23, "code": "#(into () %)", "user": "57ed2574e4b0bfb2137f5b93"}, {"problem": 23, "code": "(fn [s] (let [aux (fn [acc s]\n              (if (empty? s) acc (recur (cons (first s) acc) (rest s))))]\n    (aux nil s)))", "user": "57e6f90de4b0bfb2137f5af6"}, {"problem": 23, "code": "reduce #(conj %1 %2) '()", "user": "57f0f7b8e4b0bfb2137f5bfe"}, {"problem": 23, "code": "reduce conj ()", "user": "57f02543e4b0bfb2137f5beb"}, {"problem": 23, "code": "into ()", "user": "57e396cde4b0bfb2137f5a9e"}, {"problem": 23, "code": "#(into () %)", "user": "57ee9ffbe4b0bfb2137f5bc2"}, {"problem": 23, "code": "reduce (fn [res item] (cons item res)) '()", "user": "57efb417e4b0bfb2137f5bdc"}, {"problem": 23, "code": "(fn rev [x]\n(if (empty? x)\n  '[]\n  (conj (rev (rest x)) (first x)))\n  )", "user": "57f2776ee4b0511f1d294ded"}, {"problem": 23, "code": "reduce #(conj %1 %2) '()", "user": "57f11d72e4b0bfb2137f5c03"}, {"problem": 23, "code": "(fn [a] \n  (loop [a a\n         rev '()]\n    (if (empty? a)\n      rev\n      (recur (rest a) (cons (first a) rev)))))", "user": "57f0a9fde4b0bfb2137f5bf6"}, {"problem": 23, "code": "(fn rvrs\n  [c] \n  (loop [t c r (empty c)]\n    (if (empty? t)\n      r\n      (recur (rest t) (cons (first t) r)))))", "user": "57b39fbee4b0fbc9809a2783"}, {"problem": 23, "code": "reduce conj ()", "user": "57f10279e4b0bfb2137f5c00"}, {"problem": 23, "code": "#(loop [n '() ol %]\n    (if (empty? ol)\n      (identity n)\n      (recur (conj n (first ol)) (rest ol))))", "user": "57f253a3e4b0511f1d294dea"}, {"problem": 23, "code": "#(into () %)\n;; #(reduce conj () %)", "user": "5254b45fe4b0541d1855b9a0"}, {"problem": 23, "code": "(fn norev\n  ([c] (norev [(last c)] (butlast c)))\n  ([l r]\n      (if (nil? r)\n        l\n        (norev (conj l (last r)) (butlast r)))))", "user": "57f291a8e4b0511f1d294df0"}, {"problem": 23, "code": "into ()", "user": "4dad73dc8e77d6ed61f12a44"}, {"problem": 23, "code": "(fn [l]\n    (let [v (into [] l)]\n      (loop [x (- (count v) 1) acc []]\n        (if (< x 0)\n          acc\n          (recur (dec x) (conj acc (get v x)))))))", "user": "57f4ace3e4b07bbd65c32b2b"}, {"problem": 23, "code": "(fn[x] (loop[reversed [] listan x]\n        (if (empty? listan) \n        \treversed\n            (recur (concat [(first listan)] reversed) (rest listan)))))", "user": "57ea79d9e4b0bfb2137f5b4f"}, {"problem": 23, "code": "(fn [list] (reduce conj `() list))", "user": "57f3f2bee4b07bbd65c32b1a"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "57f297dbe4b0511f1d294df2"}, {"problem": 23, "code": "#(reduce (fn [a x] (cons x a)) [] %)", "user": "57ee2b35e4b0bfb2137f5bab"}, {"problem": 23, "code": "reduce #(cons %2 %1) []", "user": "57e15244e4b0bfb2137f5a70"}, {"problem": 23, "code": "#(into () %1)", "user": "57f3f942e4b07bbd65c32b1b"}, {"problem": 23, "code": "(fn\n  [s]\n  (loop [cs s cn '()]\n    (if (empty? cs)\n      cn\n        (recur (rest cs) (conj cn (first cs))))))", "user": "57f55632e4b0903ccab3dcf1"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "57f60fb8e4b0d3187e9008df"}, {"problem": 23, "code": "reduce (fn [res item] (cons item res)) []", "user": "57ee82b1e4b0bfb2137f5bbd"}, {"problem": 23, "code": "#(reduce (fn [rev item] (conj rev item)) '() %)", "user": "57f6e666e4b0d3187e9008f2"}, {"problem": 23, "code": "(fn [a] (reduce #(cons %2 %1) [] a))", "user": "57f541c7e4b0903ccab3dcec"}, {"problem": 23, "code": "(fn f [x] (if (not (empty? x)) (cons (last x) (f (take (- (count x) 1) x)))))", "user": "57ed248ae4b0bfb2137f5b92"}, {"problem": 23, "code": "(fn [coll]\n  (loop [coll coll acc '()]\n     (cond \n        (empty? coll) acc\n        :else (recur (rest coll) (conj acc (first coll))))))", "user": "57f80350e4b0d3187e90090c"}, {"problem": 23, "code": "(fn my-reverse [lst]\n  (if (<= (count lst) 1)\n    lst\n    (conj (my-reverse (butlast lst)) (last lst))))", "user": "57f81045e4b0d3187e90090f"}, {"problem": 23, "code": "(fn [lst] \n  (loop\n    [lst lst\n     new ()]\n    (if (empty? lst)\n      new\n      (recur (rest lst) (cons (first lst) new)))))", "user": "57f8104ce4b0d3187e900910"}, {"problem": 23, "code": "reduce #(concat (list %2) %1) '()", "user": "57f85550e4b0d3187e900923"}, {"problem": 23, "code": "(fn mf [x] (into '() x))", "user": "57c99a45e4b05aa3c4741d31"}, {"problem": 23, "code": "(fn rev  [coll] \n   (if (empty? coll)\n     coll \n    (cons  (last coll)  (rev (butlast coll)))))", "user": "57a8eba2e4b0a96607956225"}, {"problem": 23, "code": "(fn [coll] (loop [coll coll\n                  acc '()]\n             (if (seq coll)\n               (recur (rest coll) (conj acc (first coll)))\n               acc)))", "user": "57f6bd5de4b0d3187e9008ee"}, {"problem": 23, "code": "into ()", "user": "56a44067e4b0542e1f8d14da"}, {"problem": 23, "code": "(fn [lst]\n  (loop [fin '()\n         f (first lst)\n         r (rest lst)]\n    (if (= r [])\n      (conj fin f)\n      (recur (conj fin f) (first r) (rest r)))))", "user": "57f8627ee4b0d3187e900926"}, {"problem": 23, "code": "reduce #(conj %1 %2) ()", "user": "566ca8d6e4b0a866af6896bf"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "57fa4d60e4b0d3187e90095f"}, {"problem": 23, "code": "#(reduce (fn [acc x]\n           (cons x acc))\n           (empty %) %)", "user": "57f96e13e4b0d3187e900945"}, {"problem": 23, "code": "(fn [xs]\n  (loop [[x & xx] (seq xs) rs []]\n    (let [rss (into [x] rs)]\n      (if (empty? xx)\n        rss\n        (recur xx rss)))))", "user": "57f85b36e4b0d3187e900924"}, {"problem": 23, "code": "(fn rx [coll] (letfn [(revfn [acc c] (if (empty? c) acc (revfn (cons (first c) acc) (rest c))))] (revfn (if (vector? coll) [] '()) coll)))", "user": "57f9011ee4b0d3187e900935"}, {"problem": 23, "code": "#(into () %)", "user": "57f7b182e4b0d3187e9008fd"}, {"problem": 23, "code": "#(loop [out [] in %] (if (empty? in) out (recur (cons (first in) out) (rest in))))", "user": "57f9e0bce4b0d3187e900956"}, {"problem": 23, "code": "(fn  [lst]\n  (loop [ls lst ls2 '()]\n    (if (empty? ls) ls2 (recur (rest ls)  (cons (first ls) ls2) ))))", "user": "57fc08d8e4b0d3187e900988"}, {"problem": 23, "code": "(fn  my-reverse [x]\n    (if (empty? x) \n        ()\n        (cons (last x) (my-reverse (butlast x)))))", "user": "57f8151ce4b0d3187e900912"}, {"problem": 23, "code": "(fn rvrs [x] (if (= x '()) '() (concat (rvrs (rest x)) [(first x)])))", "user": "57fc4a63e4b0d3187e900993"}, {"problem": 23, "code": "(fn [lst]\n  (reduce conj '() (vec lst)))", "user": "57fc34f0e4b0d3187e90098e"}, {"problem": 23, "code": "(fn [d] (let [r (reduce (fn [a x] (conj a x)) () d)] (if (vector? d) (vec r) r)))", "user": "57efb389e4b0bfb2137f5bdb"}, {"problem": 23, "code": "(fn [coll] (into () coll))", "user": "57c44053e4b05aa3c4741ccb"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "54012b48e4b0de5c41848620"}, {"problem": 23, "code": "(fn reverse-seq [coll]\n  (loop [a '()\n         b coll]\n    (if (empty? b)\n      a\n      (recur\n        (conj a (first b))   ; conj - add at first to list, at last to vector\n        (rest b)))))", "user": "57ed19a3e4b0bfb2137f5b8e"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "56e87a9ce4b04a395b9a03f0"}, {"problem": 23, "code": "(fn my-reverse\n  [lst]\n  (loop [a lst\n         b ()]\n    (if (empty? a)\n      b\n      (recur (rest a) (cons (first a) b)))))", "user": "57f8153de4b0d3187e900916"}, {"problem": 23, "code": "(fn [coll] (reduce #(conj %1 %2) nil coll))", "user": "57b9fb56e4b0fbc9809a27fa"}, {"problem": 23, "code": "(fn rev\n  ([s]\n   (rev s nil))\n  ([s r]\n   (if (empty? s)\n     r\n     (rev (rest s) (conj r (first s)))\n     ))\n  )", "user": "57fc0719e4b0d3187e900987"}, {"problem": 23, "code": "(fn [col]\n  (reduce conj '() col))", "user": "57fdd1cfe4b0d3187e9009bf"}, {"problem": 23, "code": "(partial reduce conj '())", "user": "57fdcdbfe4b0d3187e9009bd"}, {"problem": 23, "code": "reduce conj ()", "user": "57fbd83ee4b0d3187e90097b"}, {"problem": 23, "code": "reduce #(cons %2 %1) []", "user": "57c94c54e4b05aa3c4741d2c"}, {"problem": 23, "code": "(fn rev [x]\n  (if (empty? x)\n    []\n    (conj (rev (rest x)) (first x))\n  )\n)", "user": "57fe836ee4b0d3187e9009d2"}, {"problem": 23, "code": "(fn my-reverse\n  [lst]\n  (loop [a lst\n         b ()]\n    (if (empty? a)\n      b\n      (recur (rest a) (cons (first a) b)))))", "user": "57f814fbe4b0d3187e900911"}, {"problem": 23, "code": "(fn my-reverse\n  [lst]\n  (if (empty? lst )\n    ()\n    (cons(last lst) (my-reverse (butlast lst)))))", "user": "57f81544e4b0d3187e900917"}, {"problem": 23, "code": "(fn \n  [lst]\n  (loop [lista lst\n         r ()]\n    (cond \n     (empty? lista) r\n     :else (recur (rest lista) (cons (first lista) r)))))", "user": "57fedf07e4b0d3187e9009dc"}, {"problem": 23, "code": "(fn rev\n  [lst]\n  (if (empty? lst)\n    ()\n    (cons (last lst)\n          (rev (butlast lst)))))", "user": "57f81534e4b0d3187e900915"}, {"problem": 23, "code": "(fn [s] (reduce #(conj %1 %2) nil s))", "user": "57fe996fe4b0d3187e9009d5"}, {"problem": 23, "code": "(fn rev\n  ([init] (rev init '()))\n  ([init new] \n   (println init new)\n   (if (empty? init)\n                          new\n                          (recur (rest init) (conj  new (first init))))))", "user": "57ffe094e4b0a837a8b30c2c"}, {"problem": 23, "code": "(fn [lst]\n   (loop [lst lst\n          lstA ()]\n     (if (empty? lst)\n       lstA\n       (recur (rest lst) (conj lstA (first lst))))))", "user": "57f81524e4b0d3187e900913"}, {"problem": 23, "code": "(fn\n  [col]\n  (reduce \n   #(cons\n     %2\n     %1) \n   []\n   col))", "user": "57fe2d6fe4b0d3187e9009c8"}, {"problem": 23, "code": "(fn [coll]\n  (reduce \n   #(cons %2 %1) \n   '() \n   coll))", "user": "57fd085ce4b0d3187e9009a9"}, {"problem": 23, "code": "#(into () %)", "user": "57b64d6ee4b0fbc9809a27bc"}, {"problem": 23, "code": "#((fn [a b]\n    (if (empty? a)\n      b\n      (recur (rest a) (cons (first a) b))))\n  % '())", "user": "5800edaae4b0a837a8b30c48"}, {"problem": 23, "code": "(fn [l] \n  (\n   (fn rev [ll r] \n     (if (first ll) \n       (rev \n        (rest ll) \n        (conj r (first ll))\n       ) \n       r\n     )\n   ) l '()\n  )\n)", "user": "5800bbd5e4b0a837a8b30c44"}, {"problem": 23, "code": "#(reduce (fn [a b](cons b a)) (empty %) %)", "user": "57fa7c93e4b0d3187e900963"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "54f1d0aee4b024c67c0cf8b7"}, {"problem": 23, "code": "(fn check [x & [y]] (if (= x ()) (do y) (do (check (rest x) (conj y (first x))))))", "user": "580014d7e4b0a837a8b30c32"}, {"problem": 23, "code": "(fn [col]\n  (loop [ col col\n          result []]\n        (if (empty? col)\n            result\n            (recur (rest col) (cons (first col) result)))))", "user": "575f6a80e4b08062f99a4e80"}, {"problem": 23, "code": "(fn rf [xs] \n   (if-not (empty? xs) \n      (conj (rf (rest xs))\n           (first xs))\n   []\n   ))", "user": "51a3be77e4b0e77c4ca60bf8"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "57fd7344e4b0d3187e9009b6"}, {"problem": 23, "code": "#(reduce (fn [r e](into r [e]))\n          `()\n          %)", "user": "5801eed1e4b0a837a8b30c63"}, {"problem": 23, "code": "#(into () %)", "user": "57f52d3be4b0903ccab3dce7"}, {"problem": 23, "code": "(fn \n  [lst]\n  (into () lst))", "user": "57f81532e4b0d3187e900914"}, {"problem": 23, "code": "reduce (fn [results x]\n         (cons x results)\n       ) ()", "user": "57f904c5e4b0d3187e900936"}, {"problem": 23, "code": "(fn [x]\n  (loop [lst x\n         lst1 ()]\n    (if (empty? lst)\n      lst1\n      (recur (rest lst) (cons (first lst) lst1)))))", "user": "57f81549e4b0d3187e900918"}, {"problem": 23, "code": "#(into '() %)", "user": "550df95ce4b06e50f9beb161"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "57f8cd5ae4b0d3187e900930"}, {"problem": 23, "code": "#(reduce (fn [l e] (cons e l)) [] %)", "user": "58037d8ae4b0a837a8b30c8b"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "58006950e4b0a837a8b30c3a"}, {"problem": 23, "code": "(fn [seqn] (reduce (fn [acc v] (concat [v] acc)) [] seqn))", "user": "58042984e4b0a837a8b30ca3"}, {"problem": 23, "code": "(fn func [s] (when s (cons (last s) (func (butlast s)))))", "user": "58047205e4b0a837a8b30ca9"}, {"problem": 23, "code": "#(into () %)", "user": "5803cd8fe4b0a837a8b30c96"}, {"problem": 23, "code": "(fn rev\n  ([xs]\n   (rev xs '()))\n  ([xs acc]\n   (if (empty? xs)\n     acc\n     (rev (rest xs) (cons (first xs) acc)))))", "user": "58052182e4b0a837a8b30cba"}, {"problem": 23, "code": "#(reduce conj() %)", "user": "5804250fe4b0a837a8b30ca1"}, {"problem": 23, "code": "reduce #(conj %1 %2) ()", "user": "55ee84c0e4b0121d4835fdf0"}, {"problem": 23, "code": "(fn [all]\n  (loop[lst all\n        result ()]\n    (if (empty? lst) result\n                     (recur (rest lst) (cons (first lst) result)))))", "user": "57f81569e4b0d3187e900919"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "580570a2e4b0a837a8b30cc7"}, {"problem": 23, "code": "#(reduce conj '() (vec %))", "user": "580558cde4b0a837a8b30cc4"}, {"problem": 23, "code": "(fn reverse_seq [x]\n  (into '() x))", "user": "57f5a5a5e4b0d3187e9008d5"}, {"problem": 23, "code": "#(for [n (range (- (count %) 1)  -1 -1)] (nth (vec %) n))", "user": "564a985be4b0284900eef65c"}, {"problem": 23, "code": "#(loop [coll % result []]\n   (if (empty? coll)\n     result\n     (recur (drop-last coll) (conj result (last coll)))))", "user": "57f8ba80e4b0d3187e90092f"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "54dd8a8ae4b024c67c0cf795"}, {"problem": 23, "code": "(fn [ls]\n  (into '() ls))", "user": "5722d905e4b0c5bde472c0da"}, {"problem": 23, "code": "reduce #(cons %2 %1) []", "user": "57c815ade4b05aa3c4741d14"}, {"problem": 23, "code": "(fn here [x] (reduce conj '() x))", "user": "57ffacd9e4b0a837a8b30c26"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "58060dace4b0a837a8b30cd5"}, {"problem": 23, "code": "(fn [x] (into '() x))", "user": "580517d4e4b0a837a8b30cb9"}, {"problem": 23, "code": "reduce conj ()", "user": "58092258e4b0a837a8b30d1b"}, {"problem": 23, "code": "(fn \n  [s]\n  (loop [sts s res []]\n    (if(empty? sts)\n     res\n     (recur (next sts) (cons (first sts) res)))))", "user": "56719c3ce4b05957ce8c610c"}, {"problem": 23, "code": "(fn [coll] \n  (->>\n    (map-indexed vector coll)\n    (sort-by first >)\n    (map second)))", "user": "5805f0c3e4b0a837a8b30cd2"}, {"problem": 23, "code": "(fn myreverse [lst]\n  ((fn [lst acc]\n    (if (nil? (first lst))\n      acc \n      (recur (rest lst) (conj acc (first lst)))))\n  lst '())\n  )", "user": "58088dfde4b0a837a8b30d07"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "558fb218e4b0277789237665"}, {"problem": 23, "code": "(fn [col] (reduce conj () col))", "user": "5809f223e4b0a837a8b30d29"}, {"problem": 23, "code": "#(into '() %)", "user": "57f3b841e4b0511f1d294e0f"}, {"problem": 23, "code": "(fn [sequence]\n  ((fn [sequence result]\n     (if (empty? sequence)\n       result\n       (recur (rest sequence)\n         (conj result (first sequence))))) sequence '()))", "user": "57ff8770e4b0a837a8b30c21"}, {"problem": 23, "code": "into ()", "user": "52ad1d00e4b0c58976d9ac90"}, {"problem": 23, "code": "(fn [s]\n  (letfn [(my-reverse [[s & ss]]\n             (if (empty? ss)\n               [s]\n               (conj (my-reverse ss) s)))]\n    (my-reverse (vec s))))", "user": "57a4fa50e4b0a966079561f1"}, {"problem": 23, "code": "#(into () %1)", "user": "580b90cee4b0a837a8b30d4b"}, {"problem": 23, "code": "reduce conj ()", "user": "5804fb34e4b0a837a8b30cb1"}, {"problem": 23, "code": "reduce conj '()", "user": "5803ba6de4b0a837a8b30c95"}, {"problem": 23, "code": "(fn [se]\n  (reduce conj '() se))", "user": "580bd81ee4b0849f6811b711"}, {"problem": 23, "code": "reduce conj '()", "user": "580c8fcee4b0849f6811b721"}, {"problem": 23, "code": "reduce  conj '()", "user": "57eaf869e4b0bfb2137f5b56"}, {"problem": 23, "code": "reduce (fn [memo n] (conj memo n)) ()", "user": "580d62b0e4b0849f6811b739"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "580beb40e4b0849f6811b713"}, {"problem": 23, "code": "#(reduce conj() %)", "user": "57ef793de4b0bfb2137f5bd8"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "57ee46c7e4b0bfb2137f5bb3"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "57ee432de4b0bfb2137f5bb2"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "57ee41a6e4b0bfb2137f5baf"}, {"problem": 23, "code": "#(into () %)", "user": "57ee2b3ee4b0bfb2137f5bac"}, {"problem": 23, "code": "#(apply conj () %1)", "user": "57ef7393e4b0bfb2137f5bd6"}, {"problem": 23, "code": "(fn [coll]\n    (loop [coll coll acc nil]\n      (if (coll? coll)\n        (recur (next coll) (cons (first coll) acc))\n        acc)))", "user": "500d3160e4b05f7c30cfa6a1"}, {"problem": 23, "code": "(fn [sequence] (reduce (fn [x y] (cons y x)) [] sequence))", "user": "580e4848e4b0849f6811b750"}, {"problem": 23, "code": "#(into () %)", "user": "577008f1e4b0979f89651594"}, {"problem": 23, "code": "into ()", "user": "580d57cfe4b0849f6811b738"}, {"problem": 23, "code": "reduce conj ()", "user": "5508a292e4b06e50f9beb10f"}, {"problem": 23, "code": "#(reduce conj '() %1)", "user": "57ee41eae4b0bfb2137f5bb0"}, {"problem": 23, "code": ";#(apply conj () %)\r\n;reduce conj ()\r\napply conj ()", "user": "57ee42c4e4b0bfb2137f5bb1"}, {"problem": 23, "code": ";;#(into () %)\n;;apply conj nil\nreduce conj nil", "user": "580d7bdae4b0849f6811b73c"}, {"problem": 23, "code": "#(into '() %)", "user": "580e2941e4b0849f6811b74e"}, {"problem": 23, "code": "(fn my-sort [xs]\n  (loop [xs xs result []]\n    (if (empty? xs)\n      result\n      (recur (rest xs) (cons (first xs) result)))))", "user": "580fbaade4b0f478707a05c0"}, {"problem": 23, "code": "#(into () %)", "user": "5801addae4b0a837a8b30c5d"}, {"problem": 23, "code": "#((if (vector? %) vec seq) (reduce conj '() %))", "user": "5810b899e4b0f478707a05d8"}, {"problem": 23, "code": "(fn r_ [xs] (if (empty? xs) nil (cons (last xs) (r_ (butlast xs)))))", "user": "58110705e4b0f478707a05df"}, {"problem": 23, "code": "(fn\n  ([sq]\n   (loop [lst sq acc '()]\n     (if (empty? lst)\n       acc\n       (recur (rest lst) (conj acc (first lst)))))))", "user": "580fb8e0e4b0f478707a05bc"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "4f0f7339535d0136e6c2233e"}, {"problem": 23, "code": "#(loop [lst %\n        done '()]\n   (if (empty? lst)\n     done\n     (recur (rest lst) (cons (first lst) done))))", "user": "56f413b2e4b046a417f9205a"}, {"problem": 23, "code": "reduce conj nil", "user": "580e842ee4b0849f6811b756"}, {"problem": 23, "code": "#(into '() %)", "user": "56c14d8ce4b0839206b9d684"}, {"problem": 23, "code": "reduce (fn [acc, x] (conj acc x)) '()", "user": "56255e2de4b00a550fc90297"}, {"problem": 23, "code": "#(loop [a % b []]\n  (if (not (empty? a))\n    (recur (drop-last a) (conj b (last a)))\n    b)\n  )", "user": "57a497e8e4b0a966079561e4"}, {"problem": 23, "code": "(fn r [x]\n   (if (seq x)\n     (do\n       (print x)\n       (concat (r (rest x)) (if (seq x) [(first x)] nil)))\n     nil\n      ))", "user": "5813a2efe4b0f478707a0614"}, {"problem": 23, "code": "(fn [input]\n  (loop [in input out '()]\n    (if (empty? in)\n        out\n        (recur (rest in) (conj out (first in))))))", "user": "57839ae9e4b0ebec4cfb74b8"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "58134ba8e4b0f478707a060b"}, {"problem": 23, "code": "(fn [s]\n  (reduce conj '() s))", "user": "5813e208e4b0f478707a061b"}, {"problem": 23, "code": "into ()", "user": "58136679e4b0f478707a060d"}, {"problem": 23, "code": "(fn revrs [s]\n  (cond\n   (= '() s) '()\n   :else (cons (last s) (revrs (drop-last s)))))", "user": "58138439e4b0f478707a0611"}, {"problem": 23, "code": "reduce #(conj %1 %2) '()", "user": "5812eb8fe4b0f478707a0602"}, {"problem": 23, "code": "(fn [x] (loop [[h & t] (into [] x) acc '()] (let [newacc (conj acc h)] (if (= t nil) newacc (recur t newacc)))))", "user": "58152157e4b0f478707a0631"}, {"problem": 23, "code": "(partial reduce #(cons %2 %1) [])", "user": "580c1e9ae4b0849f6811b719"}, {"problem": 23, "code": "(fn [coll] (reduce conj '() coll))", "user": "581590f3e4b0f478707a063f"}, {"problem": 23, "code": "(fn [x] (reduce (fn [a b] (conj a b)) nil x))", "user": "5815b957e4b0f478707a0641"}, {"problem": 23, "code": "reduce conj '()", "user": "58172161e4b0c0e9c07b8389"}, {"problem": 23, "code": "(partial into '())", "user": "569d2283e4b0542e1f8d1474"}, {"problem": 23, "code": "(fn [x] (loop [x x y ()] (if (empty? x) y (recur (rest x) (concat [(first x)] y)))))", "user": "58186016e4b0c0e9c07b83ad"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "5818a3f7e4b0c0e9c07b83bf"}, {"problem": 23, "code": "(fn [c] (into '() c))", "user": "5800ab1ee4b0a837a8b30c41"}, {"problem": 23, "code": "(fn [sq] (reduce #(conj %1 %2) '() sq))", "user": "5818b1a6e4b0c0e9c07b83c3"}, {"problem": 23, "code": "(fn [coll]\n   (loop [c coll v '()] \n     (if (seq c)\n         (recur (rest c) (conj v (first c)))\n         v)))", "user": "565e21e0e4b068f2fe63dc32"}, {"problem": 23, "code": "reduce #(conj %1 %2) '()", "user": "56dcb5ade4b0ea9b8538f821"}, {"problem": 23, "code": ";#(into ()(seq %))\ninto()", "user": "580d7e53e4b0849f6811b73e"}, {"problem": 23, "code": "#(into () %)\n;#(reduce conj '() %1)", "user": "580d7de3e4b0849f6811b73d"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "58062dd2e4b0a837a8b30cda"}, {"problem": 23, "code": "into ()", "user": "5818908be4b0c0e9c07b83bb"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "581a1bfee4b0e114eb519ff8"}, {"problem": 23, "code": "reduce conj ()", "user": "57c5ee11e4b05aa3c4741ceb"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "581a703de4b0e114eb51a005"}, {"problem": 23, "code": "(fn dibalik\n  [n]\n  (if (not (empty? n))\n    (cons (last n) (dibalik (butlast n)))))", "user": "58171a9ae4b0c0e9c07b8387"}, {"problem": 23, "code": "#(into () %)", "user": "58173722e4b0c0e9c07b838a"}, {"problem": 23, "code": ";#(reduce conj '() %)\ninto '()", "user": "581b19e7e4b04b46fc4b0ec4"}, {"problem": 23, "code": "(fn [c]\n  (loop [r [] c' c]\n    (if (empty? c')\n      r\n      (recur (conj r (last c')) (butlast c')))))", "user": "57ae3345e4b0fbc9809a271e"}, {"problem": 23, "code": "(fn myrev [orig]  \n  (loop [result [] acc orig]\n    (if (empty? acc)\n      result\n      (recur (conj result (last acc)) (butlast acc)))))", "user": "578682bbe4b0ebec4cfb74f9"}, {"problem": 23, "code": "(fn [s] (reduce #(conj %1 %2) () s))", "user": "581a5fdbe4b0e114eb51a002"}, {"problem": 23, "code": "#(reduce conj nil %)", "user": "57d50c05e4b0bd073c2023a8"}, {"problem": 23, "code": "(partial reduce (fn [r e] (conj r e)) '())", "user": "57bc50c7e4b05aa3c4741c40"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "581e61b0e4b04b46fc4b0f28"}, {"problem": 23, "code": "#(reduce (fn [acc x] (conj acc x)) '() %)", "user": "5687b6abe4b0dcc4269f4061"}, {"problem": 23, "code": "(fn [ls] \n  \t(reduce #(cons %2 %1) [] ls)\n  )", "user": "576d8699e4b0979f89651568"}, {"problem": 23, "code": "#(into () %)", "user": "581e8b86e4b04b46fc4b0f2b"}, {"problem": 23, "code": "(fn ;using list to add it to the front in order to reverse the list\n  [n]\n  (loop [new '() orig n]\n    (if (= (.size orig) 0)\n      new\n      (recur (conj new (first orig)) (rest orig)))))", "user": "581fe550e4b04b46fc4b0f4c"}, {"problem": 23, "code": "#( loop [x % result (empty %)] (if (not (first x)) result (recur (next x) (cons (first x) result))))", "user": "551daeb9e4b030e6a24d00df"}, {"problem": 23, "code": "#(into () %)", "user": "5820924ee4b04b46fc4b0f58"}, {"problem": 23, "code": "#(loop [s % reversed nil]\n    (if (empty? s)\n      reversed\n      (recur (rest s) (cons (first s) reversed))))", "user": "581b4d3be4b04b46fc4b0ec6"}, {"problem": 23, "code": "(fn [alist]\n  (loop [xs alist result '()]\n    (if (empty? xs) result (recur (rest xs) (conj result (first xs)) ))))", "user": "581f82e2e4b04b46fc4b0f41"}, {"problem": 23, "code": "reduce conj ()", "user": "5816c5f5e4b0c0e9c07b8380"}, {"problem": 23, "code": "#(into () %)", "user": "5821b018e4b04b46fc4b0f80"}, {"problem": 23, "code": "(fn revit [s]\n  (if (empty? s)\n    nil\n    (lazy-seq (cons (last s) (revit (drop-last 1 s))))))", "user": "5820cc33e4b04b46fc4b0f60"}, {"problem": 23, "code": "(fn bolak\n  [y]\n  (if (empty? y)\n    []\n    (concat (vector (last y)) (bolak (butlast y)))))", "user": "581829cce4b0c0e9c07b83a9"}, {"problem": 23, "code": "reduce (fn [x y] (cons y x)) '()", "user": "58225587e4b04b46fc4b0f94"}, {"problem": 23, "code": "(fn my-rev\n   ([s rev-s]\n    (if s\n      (recur (next s) (conj rev-s (first s)))\n      rev-s))\n   ([s]\n    (let [rev-s (my-rev s '())]\n      (if (vector? s)\n        (into [] rev-s)\n        rev-s))))", "user": "5808ee16e4b0a837a8b30d16"}, {"problem": 23, "code": "(fn [xs]\n  (loop [r xs acc []]\n    (if ( empty? r) acc\n    (recur (rest r) ( cons (first r) acc)))))", "user": "581c4ab4e4b04b46fc4b0eea"}, {"problem": 23, "code": "#(reduce (fn [a b] (cons b a)) [] %)", "user": "5823f3d4e4b051871117bebc"}, {"problem": 23, "code": "(fn [a-seq]\n  (loop [s a-seq rev ()]\n    (if (empty? s)\n      rev\n      (recur (rest s) (conj rev (first s))))))", "user": "58217fbde4b04b46fc4b0f78"}, {"problem": 23, "code": "(fn [coll] (reduce conj () coll))", "user": "581dad0ae4b04b46fc4b0f17"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "58247423e4b051871117bec5"}, {"problem": 23, "code": "reduce (fn [ys x] (cons x ys)) (list)", "user": "5823c717e4b051871117beb2"}, {"problem": 23, "code": "reduce conj ()", "user": "518261a4e4b0f2adb7336523"}, {"problem": 23, "code": "#(loop [r []\n       c (vec %)]\n        (if (empty? c)\n          r\n          (recur (conj r (last c))\n                 (pop c))))", "user": "56f68677e4b08e7d20b96826"}, {"problem": 23, "code": "#(reduce conj nil %)", "user": "578df8fee4b0ebec4cfb7574"}, {"problem": 23, "code": "#(map-indexed (fn [i d] (nth (seq %) (- (dec (count %)) i))) %)", "user": "58254a11e4b051871117bed9"}, {"problem": 23, "code": "#(reduce (fn [acc x]\n            (cons x acc)) \n            (empty %) %)", "user": "524dacc9e4b0a16e35cf6df8"}, {"problem": 23, "code": "(fn [v]\n  (let [len (count v)\n        r (map #(- (dec len) %) (range len))]\n    (map #(nth (vec v) %) r)))", "user": "5813a865e4b0f478707a0615"}, {"problem": 23, "code": "#(loop [nums %\n        result []]\n   (if (empty? nums)\n     result\n     (recur (rest nums) (into [(first nums)] result))))", "user": "5820cca0e4b04b46fc4b0f62"}, {"problem": 23, "code": "(fn [l] ((fn f [l r] (if (empty? l) r (f (rest l) (conj r (first l))))) l '()))", "user": "5826ed1fe4b051871117bf0e"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5804d5afe4b0a837a8b30cad"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5787d6ece4b0ebec4cfb750f"}, {"problem": 23, "code": "(fn [aseq]\n  (reduce (fn [i j]\n            (cons j i))\n          []\n          aseq))", "user": "579816abe4b039eba2ecb10d"}, {"problem": 23, "code": "(fn [col] (reduce #(cons %2 %1) (empty col) col))", "user": "57e41d99e4b0bfb2137f5ab5"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "582089fbe4b04b46fc4b0f57"}, {"problem": 23, "code": "(partial reduce conj ())", "user": "582835cbe4b051871117bf30"}, {"problem": 23, "code": "(fn [vals]\n  (reduce #(cons %2 %1) [] vals))", "user": "5779556de4b0979f8965166e"}, {"problem": 23, "code": "#(into () %)", "user": "58224c53e4b04b46fc4b0f92"}, {"problem": 23, "code": "apply conj ()", "user": "5829bc55e4b051871117bf49"}, {"problem": 23, "code": "reduce conj '()", "user": "581a66b1e4b0e114eb51a003"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "56f949fae4b07572ad1a88ad"}, {"problem": 23, "code": "#(into () %)", "user": "58280f02e4b051871117bf2e"}, {"problem": 23, "code": "(fn [seq]\n  (into '() seq))", "user": "5575191ee4b05c286339e05d"}, {"problem": 23, "code": "(fn [s]\n  (reduce conj '() s))", "user": "5829d588e4b051871117bf4a"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "507ff90fe4b089ade05efbd9"}, {"problem": 23, "code": "#(reduce conj '() %1)", "user": "582290b5e4b04b46fc4b0fa0"}, {"problem": 23, "code": "reduce conj ()", "user": "57089f82e4b0b0fb43fd06a2"}, {"problem": 23, "code": "(fn [coll] (reduce conj '() coll))", "user": "582bd5fae4b051871117bf7b"}, {"problem": 23, "code": "#(reduce conj '() %1)", "user": "57320c8de4b0cd1946bd0fce"}, {"problem": 23, "code": "#(reduce (fn [result x] (conj result x)) '() %)", "user": "552f6e8ee4b076ab5578f802"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "582d1890e4b051871117bfb1"}, {"problem": 23, "code": "#(loop [result [] c %]\n   (if (empty? c)\n     result\n     (recur (conj result (last c))\n            (cond   (vector? c) (subvec c 0 (dec (count c)))\n                    (set? c) (disj c (last c)))\n            )))", "user": "582c526ae4b051871117bf88"}, {"problem": 23, "code": "(fn reverse-this\n  ([in] (reverse-this in nil))\n  ([in out] \n   (if (seq in)\n     (reverse-this (rest in) (conj out (first in)))\n     out)))", "user": "57ee88bbe4b0bfb2137f5bbe"}, {"problem": 23, "code": "reduce #(conj %1 %2) '()", "user": "58299e03e4b051871117bf46"}, {"problem": 23, "code": ";into ()\n#(into () %)", "user": "5822e082e4b04b46fc4b0fa9"}, {"problem": 23, "code": "#(loop [l %\n        rl []]\n   (if (empty? l)\n     rl\n     (recur (rest l) (cons (first l) rl))))", "user": "58248186e4b051871117bec6"}, {"problem": 23, "code": "(fn _rev [coll]\n  (let [v (vec coll)]\n    (when-not (empty? v)\n      (lazy-seq (cons (peek v) (_rev (pop v)))))))", "user": "582e0afde4b051871117bfd5"}, {"problem": 23, "code": "(fn\n  reverse2\n  ([coll]\n   (reverse2 () coll))\n  ([val coll]\n   (if (empty? coll)\n     val\n     (recur (conj val (first coll)) (next coll)))))", "user": "582625d3e4b051871117bef2"}, {"problem": 23, "code": "reduce conj '()", "user": "570466e6e4b0b0fb43fd0663"}, {"problem": 23, "code": "#(reduce\n  (fn [x y] (conj x y))\n  `()\n  %)", "user": "582fd406e4b051871117bff9"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "55632016e4b0c656e3ff17e4"}, {"problem": 23, "code": "(fn [s]\n\t (reduce (fn [a b] \n\t\t(concat (list b) a )) '() s)\n\t )", "user": "583048d9e4b051871117c007"}, {"problem": 23, "code": "(fn [my-seq]\n  (loop [x my-seq\n         res []]\n    (if (empty? x)\n      res\n      (recur (butlast x) (conj res (last x))))))", "user": "58303fc3e4b051871117c006"}, {"problem": 23, "code": "(fn[x](reduce #(concat(vector %2)%1)[]x))", "user": "5830cfe6e4b051871117c016"}, {"problem": 23, "code": "(fn [x] (reduce conj '() x))", "user": "582dc562e4b051871117bfcb"}, {"problem": 23, "code": "(fn [xs]\n  (loop [tail xs reversed ()]\n    (if (empty? tail)\n      (seq reversed)\n      (recur (rest tail) (conj reversed (first tail))))))", "user": "58327a08e4b089d5ab817c7c"}, {"problem": 23, "code": "#(into () %)", "user": "582589b2e4b051871117bedd"}, {"problem": 23, "code": "(fn [coll]\n  (loop [s coll acc nil]\n    (if (empty? s)\n      acc\n      (recur (rest s) (cons (first s) acc)))))", "user": "583166c1e4b051871117c025"}, {"problem": 23, "code": "(fn reverse' [x] (if (empty? x) [] (conj (reverse' (rest x)) (first x))))", "user": "58333b19e4b089d5ab817c94"}, {"problem": 23, "code": "(fn [coll]\n  (let [f (fn [c1 c2] (if (empty? c1)\n                        c2\n                        (recur (butlast c1) (conj c2 (last c1)))))]\n    (f coll [])))", "user": "58328117e4b089d5ab817c7d"}, {"problem": 23, "code": "(fn [x] (loop [sez '(), ostanek x] (if (empty? ostanek) sez (recur (conj sez (first ostanek)) (rest ostanek)))))", "user": "5833a6d8e4b089d5ab817ca2"}, {"problem": 23, "code": "(fn t[x] (if (empty? x) '() (conj (t (drop-last x)) (last x))))", "user": "583019b8e4b051871117bfff"}, {"problem": 23, "code": "(fn rrr ([x]\n         (reduce #(cons %2 %1) [] x)\n  ))", "user": "58335c22e4b089d5ab817c9a"}, {"problem": 23, "code": "reduce (fn [x y] (conj x y)) nil", "user": "58334d18e4b089d5ab817c97"}, {"problem": 23, "code": "reduce conj ()", "user": "5833455ee4b089d5ab817c95"}, {"problem": 23, "code": "#(loop [acc (seq [])\n        loop-seq %]\n   (if (empty? loop-seq) acc\n     (recur (conj acc (first loop-seq)) (rest loop-seq))))", "user": "570ad386e4b0b0fb43fd06b9"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "582a6a85e4b051871117bf5d"}, {"problem": 23, "code": "(fn my-reverse[s]\n  (loop[r s\n        n '()]\n        (if (empty? r)\n          n\n          (recur(rest r)\n                      (conj n(first r))))))", "user": "582a5174e4b051871117bf59"}, {"problem": 23, "code": "reduce conj ()", "user": "58354124e4b089d5ab817cd6"}, {"problem": 23, "code": "(fn [col] \n  (reduce \n   (fn [c e] (cons e c)) '() \n    col\n   )\n)", "user": "57dfe173e4b0bd073c20246b"}, {"problem": 23, "code": "reduce #(conj % %2) ()", "user": "5835cb06e4b089d5ab817cea"}, {"problem": 23, "code": "reduce conj ()\n;Not on my first attempt!!!!", "user": "5835bc73e4b089d5ab817ce9"}, {"problem": 23, "code": "(partial reduce #(-> (cons %2 %1)) '())", "user": "5832be57e4b089d5ab817c86"}, {"problem": 23, "code": "#(reduce conj() %)", "user": "5836a247e4b089d5ab817cfe"}, {"problem": 23, "code": "(fn [coll] (reduce conj '() coll))", "user": "5836bc20e4b089d5ab817d03"}, {"problem": 23, "code": "reduce #(conj %1 %2) '()", "user": "5835a222e4b089d5ab817ce5"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "58375635e4b089d5ab817d14"}, {"problem": 23, "code": "(fn [c]\n  (let [rev (atom '())]\n    (doseq [i c]\n      (swap! rev conj i))\n    @rev))", "user": "58378f8ce4b089d5ab817d1b"}, {"problem": 23, "code": "(fn [arg] (into '() arg))", "user": "58376b71e4b089d5ab817d18"}, {"problem": 23, "code": "(fn rev_seq [coll]\n  (loop [coll coll\n         res '()]\n    (if (empty? coll)\n      res\n      (recur (rest coll) (conj res (first coll))))))", "user": "55a12cb1e4b0acc240e3150d"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "582d7569e4b051871117bfbe"}, {"problem": 23, "code": "(fn [x]\n  ((fn [[h & r] new]\n     (if (nil? h)\n       new\n       (recur r (cons h new))))\n   (vec x) []))", "user": "58384bc4e4b089d5ab817d27"}, {"problem": 23, "code": "(fn [lst]\n  (let [helper (fn [lst acc] (if (empty? lst) acc (recur (rest lst) (concat [(first lst)] acc))))]\n    (helper lst [])))", "user": "5838337de4b089d5ab817d24"}, {"problem": 23, "code": "(fn [se]\n\t(loop [se se\n           out '()]\n     \t(if-not (empty? se)\n     \t  (recur (rest se) (conj out (first se)))\n     \t  out)))", "user": "5703a557e4b08d47c97781f4"}, {"problem": 23, "code": "#(loop [input % output '()]\n   (if (empty? input)\n     output\n     (recur (rest input) (cons (first input) output))))", "user": "57f17cb5e4b0bfb2137f5c0b"}, {"problem": 23, "code": "(fn [coll] \n  (reduce conj '() coll )\n  \n  )", "user": "583667c7e4b089d5ab817cfb"}, {"problem": 23, "code": "into ()", "user": "583a360de4b089d5ab817d4f"}, {"problem": 23, "code": "(fn [x]\n\t(\n\t  \t(fn rev [x y]\n\t  \t\t(if\n\t  \t\t\t(= (first x) nil)\n\t      \t\ty\n\t      \t\t(\n\t      \t\t\trev \n\t      \t\t\t(rest x) \n\t      \t\t\t(conj y (first x))\n      \t\t\t)\n\t    \t)\n\t    )\n\t    x\n\t    '()\n\t)   \n)", "user": "5838d5ede4b089d5ab817d32"}, {"problem": 23, "code": "#(into () %)", "user": "58391c94e4b089d5ab817d35"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "579386bbe4b0e215f87e8459"}, {"problem": 23, "code": "(fn rev-seq [lat]\n  (into '() lat))", "user": "5839f079e4b089d5ab817d48"}, {"problem": 23, "code": "(fn [s] (reduce conj '() s))", "user": "582cbf48e4b051871117bfa6"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "56e0f485e4b03a7c14b85a1c"}, {"problem": 23, "code": "#(loop [x % y 0 z (count %) result '()] (if (= z y) result (recur (drop 1 x) (inc y) z (cons (first x) result))))", "user": "583c8bd4e4b089d5ab817d81"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "583b9982e4b089d5ab817d71"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5822ccd0e4b04b46fc4b0fa7"}, {"problem": 23, "code": "#(loop [in (rest %) rev (vector (first %))] (if (empty? in) rev (recur (rest in) (cons (first in) rev))))", "user": "57235dc4e4b0c5bde472c0e2"}, {"problem": 23, "code": "reduce conj ()", "user": "583e27e2e4b089d5ab817daa"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "583e02fce4b089d5ab817da5"}, {"problem": 23, "code": "sort #(compare %2 %1)", "user": "51c5c9c9e4b03a28d42333ba"}, {"problem": 23, "code": "#(into '() %)", "user": "583f2e4de4b089d5ab817dcb"}, {"problem": 23, "code": "(fn my-reverse [collection]\n  (if (empty? collection)\n    []\n    (conj (my-reverse (rest collection)) (first collection))))", "user": "5712418fe4b09c608db70455"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "583e7f55e4b089d5ab817dba"}, {"problem": 23, "code": "(partial reduce #(concat (list %2) %1)\n                               '())", "user": "583f0b82e4b089d5ab817dc6"}, {"problem": 23, "code": "reduce conj ()", "user": "583ff3afe4b089d5ab817dda"}, {"problem": 23, "code": "into ()", "user": "583eee03e4b089d5ab817dc3"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "581a8cc3e4b0e114eb51a00b"}, {"problem": 23, "code": "into ()", "user": "583e1558e4b089d5ab817da9"}, {"problem": 23, "code": "(fn [s]\n  (loop [x (empty s) rev s]\n    (if (empty? rev)\n      x\n      (recur (concat x [(last rev)]) (drop-last rev)))))", "user": "58408643e4b089d5ab817deb"}, {"problem": 23, "code": "reduce #(into [%2] %1) []", "user": "58409e47e4b089d5ab817dee"}, {"problem": 23, "code": "(fn [coll] (reduce conj () coll))", "user": "583aaf5ee4b089d5ab817d5b"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5843b231e4b089d5ab817e3d"}, {"problem": 23, "code": "(fn [arg] (reduce (fn [vall coll] (conj vall coll)) '() arg))", "user": "5804b491e4b0a837a8b30cac"}, {"problem": 23, "code": "#(let [orig %] \n    (loop [out () in orig]\n        (println out)\n    (if (= (count out) (count orig)) \n      out \n      (recur (concat out [(last in)]) (drop-last in)))))", "user": "56d1b7a2e4b0ea9b8538f792"}, {"problem": 23, "code": "(fn \n  [seq]\n  (reduce (fn [reversed elem]\n            (cons elem reversed))\n          []\n          seq))", "user": "5844e6f4e4b089d5ab817e5a"}, {"problem": 23, "code": "into ()", "user": "50b25edae4b03ea88043355e"}, {"problem": 23, "code": "into ()", "user": "5841872be4b089d5ab817e06"}, {"problem": 23, "code": "(fn [x]\n  (reduce\n   conj\n   '()\n   x)\n)", "user": "5845e080e4b089d5ab817e7a"}, {"problem": 23, "code": "reduce conj ()", "user": "584278e1e4b089d5ab817e19"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "581974d9e4b0e114eb519fd6"}, {"problem": 23, "code": "reduce conj '()", "user": "583d669ee4b089d5ab817d9a"}, {"problem": 23, "code": "(fn [l] (loop [acc nil rem l] (if (empty? rem) acc (recur (conj acc (first rem)) (rest rem)))))", "user": "583dacc2e4b089d5ab817d9f"}, {"problem": 23, "code": "reduce #(conj %1 %2) '()", "user": "5842d06be4b089d5ab817e22"}, {"problem": 23, "code": "(fn re [xs] (\n  if (empty? xs)\n    xs\n    (concat (re (rest xs)) [(first xs)])\n))", "user": "580b216fe4b0a837a8b30d45"}, {"problem": 23, "code": "reduce #(cons %2 %1) []", "user": "58467633e4b089d5ab817e90"}, {"problem": 23, "code": "into ()", "user": "564dc08ae4b0284900eef68f"}, {"problem": 23, "code": "(fn reverse-a-sequence-solution\n  [collection] ;; update args as needed\n  (loop [remaining (rest collection)\n         result (conj () (first collection))]\n          (if (empty? remaining)\n            result\n            (recur (rest remaining) (conj result (first remaining))))))", "user": "58445c3ce4b089d5ab817e49"}, {"problem": 23, "code": "reduce (fn [lst val] (cons val lst)) []", "user": "584917a1e4b089d5ab817ec9"}, {"problem": 23, "code": "(fn my-reverse [in-seq]\n  (loop [input in-seq\n         output (list)]\n    (if (empty? input)\n      output\n      (recur (rest input) (conj output (first input))))))", "user": "5845720de4b089d5ab817e68"}, {"problem": 23, "code": "(fn [sq] (reduce (fn [rsq itm] (conj rsq itm)) '() sq))", "user": "5846e925e4b089d5ab817e9d"}, {"problem": 23, "code": "(fn r[seqq] (into '() seqq))", "user": "5849ac5fe4b089d5ab817ed7"}, {"problem": 23, "code": "#(loop [s %\n       r []]\n      (if (empty? s)\n        r\n        (recur (rest s) (cons (first s) r))))", "user": "5753b6c6e4b02ea1147992af"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "58499945e4b089d5ab817ed4"}, {"problem": 23, "code": "(fn [c] (reduce conj '() c))", "user": "584a44e6e4b089d5ab817ee3"}, {"problem": 23, "code": "#(loop [s %\n          r []]\n    (if (empty? s)\n      r\n      (recur (rest s) (cons (first s) r))))", "user": "579aff09e4b05b1deef9ade7"}, {"problem": 23, "code": "#(into () %)", "user": "5846ae22e4b089d5ab817e99"}, {"problem": 23, "code": "#(loop [x % y []]\n   (if (empty? x)\n     y\n     (recur (drop-last x) (conj y (last x))\n            )\n     )\n   )", "user": "583f23dce4b089d5ab817dc9"}, {"problem": 23, "code": "(fn\n  [list]\n  (reduce #(concat [%2] %1) [] list))", "user": "55a5e2f7e4b0acc240e31550"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "583c4482e4b089d5ab817d7e"}, {"problem": 23, "code": "(fn [coll]\n  (let [is-vector (vector? coll)\n        raw-res (apply conj '() coll)]\n    (if is-vector\n      (vec raw-res)\n      raw-res)))", "user": "563f4c47e4b08d4f616f5ed2"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "584dadebe4b0b7285a6f4e44"}, {"problem": 23, "code": "#(into () %)", "user": "584eee7ee4b0b7285a6f4e58"}, {"problem": 23, "code": "reduce #(cons %2 %1) []", "user": "584b6a2be4b089d5ab817efd"}, {"problem": 23, "code": "(fn [seqn]\n  (reduce (fn [output elm] (conj output elm))\n          (list)\n          seqn))", "user": "584574a1e4b089d5ab817e69"}, {"problem": 23, "code": "reduce conj ()", "user": "584ad64ce4b089d5ab817eef"}, {"problem": 23, "code": "reduce conj '()", "user": "584cc92be4b0b7285a6f4e2b"}, {"problem": 23, "code": "(fn revertir [coll]\n\t(\n      (fn revertir-recursive [coll final-result]\n        (if (empty? coll) final-result (revertir-recursive (rest coll) (conj final-result (first coll))))\n      )\n      coll '()\n    )\n)", "user": "574d0574e4b02ea114799227"}, {"problem": 23, "code": "(fn reverseTheThings [col]\n  (loop [firstThing (first col)\n         otherThings (rest col)\n         result []]\n    (if (nil? firstThing)\n      result\n      (recur (first otherThings)\n             (rest otherThings)\n             (cons firstThing result)))))", "user": "57c731ede4b05aa3c4741d00"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "583ed2d1e4b089d5ab817dbf"}, {"problem": 23, "code": "(fn [x] (reduce conj () x))", "user": "5852801ee4b0b7285a6f4eb1"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "56f9b953e4b07572ad1a88b9"}, {"problem": 23, "code": "#(loop [coll %\n        v [] ]\n   (if (empty? coll)\n     v\n     (recur (rest coll) (cons (first coll) v) ) ))", "user": "58524875e4b0b7285a6f4ead"}, {"problem": 23, "code": "#(into () %)", "user": "57233cc8e4b0c5bde472c0e1"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5840c068e4b089d5ab817df8"}, {"problem": 23, "code": "#(into () %)", "user": "5854d1c0e4b07779d468640a"}, {"problem": 23, "code": "(fn [n]\n  (loop [col (seq n) rev (sequence [])]\n    (if (empty? col) rev  \n\t\t(recur (butlast col) (concat rev (list (last col)))))))", "user": "5766fbb7e4b0a07e8fc180b6"}, {"problem": 23, "code": "(fn [s]\n  (loop [ss (seq s)\n         res ()]\n    (if (empty? ss)\n      res\n      (recur (rest ss) (conj res (first ss))))))", "user": "5855aec8e4b0f14aab7c86df"}, {"problem": 23, "code": "(fn [sequ] (reduce (fn [a b] (cons b a)) () sequ))", "user": "584f5133e4b0b7285a6f4e61"}, {"problem": 23, "code": "(fn [seq]\n  (reduce conj () seq))", "user": "585669d6e4b0f14aab7c86f3"}, {"problem": 23, "code": "(fn [x]\n  (reduce conj '() x\n  )  \n)", "user": "5856cdd6e4b0f14aab7c86fa"}, {"problem": 23, "code": "(fn [s]\n  (reduce conj '()  s))", "user": "58566b42e4b0f14aab7c86f4"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "58455b05e4b089d5ab817e65"}, {"problem": 23, "code": "#(into () %)", "user": "585481e0e4b07779d46863fe"}, {"problem": 23, "code": "reduce conj ()", "user": "58543a59e4b07779d46863f5"}, {"problem": 23, "code": "(fn r [xs]\n  (apply conj '() xs))", "user": "5856980de4b0f14aab7c86f7"}, {"problem": 23, "code": "(fn [s] (reduce conj '() s))", "user": "585030cbe4b0b7285a6f4e78"}, {"problem": 23, "code": "(fn [x] \n  (loop [e x r []]\n    (if (empty? e)\n      r\n      (recur (rest e) (cons (first e) r))\n    )\n  )\n)", "user": "584d8724e4b0b7285a6f4e3e"}, {"problem": 23, "code": "(fn [numbers] (reduce (fn [rev-numbers number] (conj rev-numbers number)) '() numbers))", "user": "58562083e4b0f14aab7c86eb"}, {"problem": 23, "code": "(fn my-reverse [lst]\n  (loop [ls lst cnt 1]\n    (if (< cnt (count lst))\n      (let [nxt (inc cnt)\n            head (take cnt ls)\n            after-head (drop cnt (take nxt ls))\n            tail (drop nxt ls)]\n      \t(recur (concat after-head head tail) (inc cnt))\n      )\n      (cond\n        (instance? clojure.lang.PersistentList lst) ls\n        (instance? clojure.lang.PersistentVector lst) (vec ls)\n        :else (lazy-seq ls)\n      )\n    )\n  )\n)", "user": "569e3175e4b0542e1f8d1484"}, {"problem": 23, "code": "(fn reff [lst] (if (= lst []) [] (conj (reff (rest lst)) (first lst))))", "user": "57af3510e4b0fbc9809a272d"}, {"problem": 23, "code": "reduce conj ()", "user": "56b1b59be4b0982f16b37df2"}, {"problem": 23, "code": "(fn rev [coll]\n  (reduce conj '() coll))", "user": "58582dade4b0f14aab7c8713"}, {"problem": 23, "code": "(fn revSeq [coll] (into () coll))", "user": "58597562e4b0f14aab7c8734"}, {"problem": 23, "code": "(fn reverse1 [x]\n  (reduce #(conj %1 %2) '() x))", "user": "585a7b05e4b0f14aab7c874d"}, {"problem": 23, "code": "(fn [xs]\n   (reduce (fn [acc, current] (conj acc current)) '() xs))", "user": "57ea4569e4b0bfb2137f5b46"}, {"problem": 23, "code": "(fn [input-list]\n  (loop [i input-list output-list (list)]\n    (if (empty? i)\n      output-list\n      (do\n        (println \"hello\")\n        (recur (rest i) (conj output-list (first i)))\n      )\n    )\n  )\n)", "user": "585ad75be4b0f14aab7c8756"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "585a9a16e4b0f14aab7c8752"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "582a2d4fe4b051871117bf55"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "585c5b21e4b0f14aab7c8786"}, {"problem": 23, "code": "reduce conj '()", "user": "566e87cfe4b0a866af6896dc"}, {"problem": 23, "code": "(fn [x] (vec (reduce (fn [a b] (conj a b)) () x)))", "user": "585bcd51e4b0f14aab7c8771"}, {"problem": 23, "code": "reduce #(cons %2 %1) []", "user": "585d40afe4b0f14aab7c8798"}, {"problem": 23, "code": "reduce conj ()", "user": "55c3f0c6e4b0e31453f64990"}, {"problem": 23, "code": "#(loop [result '() x %] (if (= x '()) result (recur (conj result (first x)) (rest x))))", "user": "585dc682e4b0f14aab7c87a0"}, {"problem": 23, "code": "sort #(compare %2 %1)", "user": "56f0714de4b04a395b9a0479"}, {"problem": 23, "code": "#(loop [lst %\n       rlst []]\n  (if (empty? lst)\n    rlst\n    (recur (drop-last lst) (conj rlst (last lst)))))", "user": "585e2e77e4b0f14aab7c87ac"}, {"problem": 23, "code": "reduce #(conj %1 %2) ()", "user": "57d0e185e4b0bd073c202360"}, {"problem": 23, "code": "reduce #(cons %2 %1) []", "user": "5857d27de4b0f14aab7c8710"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "585d2c1fe4b0f14aab7c8797"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "585ea1dde4b0f14aab7c87b9"}, {"problem": 23, "code": "#(loop [bucket %\n        reversd []] \n   (if (empty? bucket) \n     reversd \n     (recur (butlast bucket) (conj  reversd (last bucket)))))", "user": "57cec4ade4b0c746388ab8b1"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "585e6aabe4b0f14aab7c87b1"}, {"problem": 23, "code": "(fn [s]\n  (loop [result []\n         s s]\n    (if (seq s)\n      (recur (concat [(first s)] result) (rest s))\n      result)))", "user": "584f1397e4b0b7285a6f4e5e"}, {"problem": 23, "code": "#(reduce (fn[l n] (cons n l)) [] %)", "user": "585e5377e4b0f14aab7c87b0"}, {"problem": 23, "code": "#(if (vector? %)\n   (reduce (fn\n             [rev x]\n             (concat [x] rev))\n           []\n           %)\n   (reduce conj '() %))", "user": "585dbe41e4b0f14aab7c879f"}, {"problem": 23, "code": "#(into () %)", "user": "58606948e4b0f14aab7c87d5"}, {"problem": 23, "code": "(fn reverte [aList] ( if(= (count aList) 0 )\n                     (list)\n                     (concat (list (last aList)) (reverte ( drop-last aList ) ) ) )\n                     \n)", "user": "5860e5ffe4b0f14aab7c87e0"}, {"problem": 23, "code": "#(into () %)", "user": "53492ae6e4b084c2834f4a5f"}, {"problem": 23, "code": "#(into () %)", "user": "5835f3ace4b089d5ab817cf0"}, {"problem": 23, "code": "reduce conj ()", "user": "55d0a3c4e4b0e31453f64a3e"}, {"problem": 23, "code": "(fn [s] (reduce conj () s))", "user": "5861cbd0e4b0f14aab7c87fb"}, {"problem": 23, "code": "(fn [c]\n  (loop [coll nil\n         from c]\n    (if (empty? from)\n      coll\n      (recur (cons (first from) coll) (rest from)))))", "user": "4e586949535d8a8b8723a292"}, {"problem": 23, "code": "(fn [x] (reduce conj '() x))", "user": "585ea250e4b0f14aab7c87ba"}, {"problem": 23, "code": "#( map (fn[c] (nth (concat %) c )) (range (- (count %) 1) -1 -1))", "user": "58617a1fe4b0f14aab7c87f0"}, {"problem": 23, "code": "reduce conj ()", "user": "585e7c60e4b0f14aab7c87b3"}, {"problem": 23, "code": "#(reduce (fn [x y] (cons y x)) [] %)", "user": "57c33eeae4b05aa3c4741cbc"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "585c16c3e4b0f14aab7c877d"}, {"problem": 23, "code": "#(into '() %)", "user": "5853582fe4b0b7285a6f4ec5"}, {"problem": 23, "code": "reduce conj ()", "user": "586243f1e4b0f14aab7c8807"}, {"problem": 23, "code": "(fn my-reverse [sequence]\n  ((fn my-reverse-inner [sequence1 sequence2]\n     (if (= '() sequence1)\n       sequence2\n       (my-reverse-inner (rest sequence1) (conj sequence2 (first sequence1)))))\n   sequence '()))", "user": "58637f03e4b0f14aab7c881e"}, {"problem": 23, "code": "reduce (fn [x y] (cons y x)) []", "user": "58638adae4b0f14aab7c8823"}, {"problem": 23, "code": "(fn [x] (reduce conj '() x))", "user": "5862a7a4e4b0f14aab7c880e"}, {"problem": 23, "code": "(fn rev [s] (clojure.core/reduce conj () s))", "user": "58622733e4b0f14aab7c8803"}, {"problem": 23, "code": "(fn [x] (reduce conj '() x))", "user": "58633954e4b0f14aab7c8819"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5863be34e4b0f14aab7c8830"}, {"problem": 23, "code": "(fn [xs] (reduce #(cons %2 %1) '() xs))", "user": "4e7be091535db169f9c796ba"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "52ade380e4b0c58976d9ac9b"}, {"problem": 23, "code": "#(into '() %)", "user": "5863f422e4b0f14aab7c8837"}, {"problem": 23, "code": "(fn [a-seq]  (reduce conj ()  a-seq))", "user": "580d2788e4b0849f6811b730"}, {"problem": 23, "code": "(fn [coll]\n  (loop [i (count coll) tmp-coll coll r '()]\n    (if (first tmp-coll)\n      (recur (dec i) (rest tmp-coll) (conj r (first tmp-coll)))\n      r)))", "user": "547bf82de4b0c51c1f4d72e1"}, {"problem": 23, "code": "(fn [in] (sort #(compare %2 %1) in))", "user": "5220def1e4b0e6a83c8925b4"}, {"problem": 23, "code": "reduce conj ()", "user": "586615e6e4b0f14aab7c8858"}, {"problem": 23, "code": "#(into '() %1)", "user": "5866b999e4b0f14aab7c886b"}, {"problem": 23, "code": "#(into () %)", "user": "58628c9be4b0f14aab7c880c"}, {"problem": 23, "code": "(fn [xs] (reduce conj '() xs))", "user": "5826a3b7e4b051871117befc"}, {"problem": 23, "code": "(fn [col] (reduce conj '() col))", "user": "58670d13e4b0f14aab7c8871"}, {"problem": 23, "code": "reduce #(conj %1 %2) '()", "user": "5863eda2e4b0f14aab7c8836"}, {"problem": 23, "code": "#(into () %)", "user": "5839f286e4b089d5ab817d49"}, {"problem": 23, "code": "(fn rev [s]\n  (if (= () s) []\n    (conj (rev (rest s)) (first s))))", "user": "58681bf0e4b0f14aab7c888a"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "58631579e4b0f14aab7c8817"}, {"problem": 23, "code": "(fn [init-s]\n  (loop [s init-s acc ()]\n    (if (empty? s)\n      acc\n      (recur (rest s) (conj acc (first s))))))", "user": "5865c8f0e4b0f14aab7c884e"}, {"problem": 23, "code": "#(reduce (fn [acc ele] (conj acc ele)) `() %)", "user": "556a7626e4b09a3098a524e3"}, {"problem": 23, "code": "(fn f ([x]   (f x '()))\n      ([x y] (if (empty? x) y (f (rest x) (conj y (first x))))))", "user": "586631a2e4b0f14aab7c885a"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5868ef15e4b0f14aab7c8895"}, {"problem": 23, "code": "(fn my-reverse [coll]\n\t(into '() coll)\n)", "user": "5869a49fe4b0f14aab7c88a9"}, {"problem": 23, "code": "#(into '() %)", "user": "57a6f585e4b0a9660795620e"}, {"problem": 23, "code": "(fn f\n  ([c] (f c []))\n  ([c r]\n   (if (empty? c)\n     r\n     (recur (rest c) (cons (first c) r)))))", "user": "524a9556e4b05ef8e38e64b1"}, {"problem": 23, "code": "#(reduce (fn [coll el] (conj coll el)) '() %)", "user": "5865deeae4b0f14aab7c8851"}, {"problem": 23, "code": "(fn [li] (sort #(compare %2 %1) li))", "user": "586a657de4b0f14aab7c88bd"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "586a906ae4b0f14aab7c88c3"}, {"problem": 23, "code": "(fn [coll] (loop [orig coll\n                    result []]\n               (if (empty? orig)\n                 result\n                 (recur (rest orig) (cons (first orig) result)))))", "user": "586b6753e4b01531a375e956"}, {"problem": 23, "code": "into ()", "user": "586b6f13e4b01531a375e959"}, {"problem": 23, "code": "(fn [coll]\n  (loop [result []\n         remainder coll]\n    (if (empty? remainder)\n      result\n      (recur (cons (first remainder) result) (rest remainder)))))", "user": "586bc870e4b01531a375e964"}, {"problem": 23, "code": "#(into () %)", "user": "58665b12e4b0f14aab7c8861"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "586bd340e4b01531a375e966"}, {"problem": 23, "code": "(fn [col] (reduce #(cons %2 %1) [] col))", "user": "529ac5d4e4b02ebb4ef7509b"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "586c122ae4b01531a375e96f"}, {"problem": 23, "code": "#(reduce (fn [rvs re] (concat [re] rvs) ) [] %)", "user": "586aa811e4b0f14aab7c88c4"}, {"problem": 23, "code": "(fn [s] (into '() s))", "user": "586c6462e4b01531a375e97b"}, {"problem": 23, "code": "reduce conj ()", "user": "52dc7344e4b09f7907dd13cf"}, {"problem": 23, "code": "reduce conj ()", "user": "4e11b92a535d04ed9115e7cb"}, {"problem": 23, "code": "#(reduce \n  (fn [coll i] (conj coll i))\n  () %)", "user": "5868ee08e4b0f14aab7c8893"}, {"problem": 23, "code": "reduce conj '()", "user": "561b57c3e4b053970a773b11"}, {"problem": 23, "code": "(fn myrev [coll]\n  (loop [c coll rev nil]\n    (if (empty? c)\n      rev\n      (recur (rest c) (conj rev (first c)))\n    )\n  )\n)", "user": "586cf7c1e4b01531a375e986"}, {"problem": 23, "code": "reduce #(conj %1 %2) nil", "user": "586d4d63e4b01531a375e98e"}, {"problem": 23, "code": "(fn [seq]\n  (let [result (empty seq)]\n    (reduce #(cons %2 %) result seq)))", "user": "57d174ede4b0bd073c20236c"}, {"problem": 23, "code": "(fn rev [lst]\n  (if (empty? (rest lst))\n    lst\n    (concat (rev (rest lst)) (list (first lst)))))", "user": "586c5a34e4b01531a375e97a"}, {"problem": 23, "code": "#((if (vector? %)  vec identity) (reduce conj () %))", "user": "586b6d51e4b01531a375e958"}, {"problem": 23, "code": "#(reduce conj (conj (rest %) (list (first %))))", "user": "586e47dee4b01531a375e9a9"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "586bfbcee4b01531a375e967"}, {"problem": 23, "code": "reduce #(conj % %2) '()", "user": "5845f14ee4b089d5ab817e7e"}, {"problem": 23, "code": "#(reduce (fn [rev elm] (conj rev elm)) '() %1)", "user": "586f1af2e4b01531a375e9bb"}, {"problem": 23, "code": "(fn rev ([original] (rev original '()))\n  ([original reversed] (if (= original '())\n                         reversed\n                         (rev (rest original) (conj reversed (first original)))\n                       )\n   )\n  )", "user": "586f3f7ee4b01531a375e9c1"}, {"problem": 23, "code": "(fn [coll] (reduce conj '() coll))", "user": "56e11125e4b03a7c14b85a1f"}, {"problem": 23, "code": "into ()", "user": "586b6a0ae4b01531a375e957"}, {"problem": 23, "code": "(fn [p1] (loop [a (empty p1) p p1] (if (empty? p) a (recur (cons (first p) a) (rest p)))))", "user": "54d95ce8e4b024c67c0cf74a"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "587100d6e4b01531a375e9f0"}, {"problem": 23, "code": "#(loop [xs (if (set? %)\n              (vec %)\n              %)\n         res (if (set? xs)\n               '()\n               (empty xs))]\n    (if (empty? xs)\n      res\n      (recur (butlast xs) (conj res (last xs)))))", "user": "586b1482e4b0f14aab7c88cf"}, {"problem": 23, "code": "(fn [xs](reduce conj '() xs))", "user": "55597b84e4b0deb715856e36"}, {"problem": 23, "code": "(fn [coll] (reduce #(cons %2 %1) [] coll))", "user": "54c4c96ae4b045293a27f61f"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5872935ce4b01531a375ea1d"}, {"problem": 23, "code": "(fn [x] (into () x))", "user": "5689e397e4b0dcc4269f4086"}, {"problem": 23, "code": "(fn rev\n  [aseq]\n  (cond \n   (empty? (next aseq)) aseq\n   :else (cons (last aseq)\n               (rev (butlast aseq)))))", "user": "560d24a2e4b05f002753df34"}, {"problem": 23, "code": "(fn f [l]\n  (cond\n   (empty? l) l\n   :else (concat (f (rest l)) (list (first l)))))", "user": "58731176e4b01531a375ea2a"}, {"problem": 23, "code": "#(for [ x (range (count %) 0 -1) ] (nth (seq %) (- x 1)))", "user": "586d146de4b01531a375e98a"}, {"problem": 23, "code": "reduce conj '()", "user": "4f213e2ee4b0d66497709fcf"}, {"problem": 23, "code": "(fn [initial-coll]\n  (reduce \n \t(fn [coll element] (cons element coll)) \n \t[] \n \tinitial-coll))", "user": "5873dbcee4b01531a375ea41"}, {"problem": 23, "code": "(fn [x]\n  (reduce conj () x))", "user": "5602aeb8e4b04bb52996e1a4"}, {"problem": 23, "code": "#(for [i (range (count %))] (nth (vec %1) (dec (- (count %) i))))", "user": "587294f0e4b01531a375ea1e"}, {"problem": 23, "code": "#(into () %)", "user": "5873d7a2e4b01531a375ea3f"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5873da5ee4b01531a375ea40"}, {"problem": 23, "code": "(fn my-reverse [coll]\n    (reduce conj () coll))", "user": "586f4900e4b01531a375e9c6"}, {"problem": 23, "code": "reduce conj '()", "user": "58745926e4b01531a375ea50"}, {"problem": 23, "code": "#(reduce (fn [acc val] (conj acc val)) '() %)", "user": "54fdb4b9e4b07d26eda61d3a"}, {"problem": 23, "code": "#(into () %)", "user": "5852a971e4b0b7285a6f4eb4"}, {"problem": 23, "code": "(partial reduce (fn [so-far item]\n          (cons item so-far))\n        [])", "user": "58740c18e4b01531a375ea49"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "52658b67e4b03e8d9a4a710d"}, {"problem": 23, "code": "#(into () %)", "user": "57f9b25fe4b0d3187e90094b"}, {"problem": 23, "code": "reduce conj '()", "user": "5727031ee4b0c5bde472c12f"}, {"problem": 23, "code": "(fn f\n  ([l] (f l '()))\n  ([l s]\n   (if (empty? l)\n     s\n     (f (rest l) (cons (first l) s)))))", "user": "5875daaee4b01531a375ea74"}, {"problem": 23, "code": "reduce conj ()", "user": "5872908be4b01531a375ea1c"}, {"problem": 23, "code": "reduce conj '()", "user": "5862a8a9e4b0f14aab7c880f"}, {"problem": 23, "code": "(fn rev [x]\n   ((fn revx [x y]\n     (if (empty? x)\n        y\n        (revx (rest x) (conj y (first x)))\n     )\n    )\n  x '())\n)", "user": "525ff1e3e4b03e8d9a4a7028"}, {"problem": 23, "code": "(fn rev [s] (reduce #(conj %1 %2) '() s))", "user": "58767e82e4b01531a375ea85"}, {"problem": 23, "code": "#(reduce (fn [l n] (conj l n)) nil %)", "user": "5875cb95e4b01531a375ea73"}, {"problem": 23, "code": "(partial reduce #(cons  %2 %1) [])", "user": "5875f2c5e4b01531a375ea77"}, {"problem": 23, "code": "(fn [lst] (reduce #(cons %2 %1) [] lst))", "user": "5877a553e4b01531a375eaa5"}, {"problem": 23, "code": "(fn [x] \n  (loop [coll x\n         acc '()]\n    (if (empty? coll)\n      acc\n      (recur (rest coll) (cons (first coll) acc))    \n    )\n  )\n)", "user": "5877e40ee4b01531a375eaab"}, {"problem": 23, "code": "reduce conj '()", "user": "54a35517e4b09f271ff37c68"}, {"problem": 23, "code": "(fn [seq]\n         (loop [reversed '()\n                seq seq]\n           (if (empty? seq)\n             reversed\n             (recur (cons (first seq) reversed) (rest seq))))\n       )", "user": "58775496e4b01531a375ea9a"}, {"problem": 23, "code": "sort (fn [x y] (compare y x))", "user": "534fa1a8e4b084c2834f4ace"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5879d577e4b01531a375ead8"}, {"problem": 23, "code": "(fn reverse'\n  [s]\n  (reduce conj () s))", "user": "57689d73e4b0a07e8fc180d7"}, {"problem": 23, "code": "(partial reduce (fn [a b] (cons b a)) [])", "user": "587ad5aae4b01531a375eaf0"}, {"problem": 23, "code": "(fn rev [xs] (if (empty? xs) [] (concat (rev (rest xs)) [(first xs)])))", "user": "563c7f98e4b0bfe05bf11836"}, {"problem": 23, "code": "into ()", "user": "56bb7132e4b0f26550335955"}, {"problem": 23, "code": "(fn [seq]\n  (loop [s seq r nil]\n    (if (nil? (first s))\n       r\n       (recur (rest s) (cons (first s) r))\n       )))", "user": "587abe0de4b01531a375eaef"}, {"problem": 23, "code": "reduce (fn [acc, curr] (cons curr acc)) '()", "user": "55b4fa46e4b01b9910ae2983"}, {"problem": 23, "code": "(partial into ())", "user": "52506e4ce4b0541d1855b82d"}, {"problem": 23, "code": "#(reduce (fn [acc x] (cons x acc)) [] %)", "user": "4ff9ea75e4b0678c553fc3b3"}, {"problem": 23, "code": "(fn rev [rv] \n (if (= rv [])\n   rv\n   (concat\n    (rev (rest rv))\n    [(first rv)]\n   ) \n )\n)", "user": "58711e7be4b01531a375e9f9"}, {"problem": 23, "code": "(fn [x]\n ((fn [orig coll]\n   (if (empty? orig)\n     coll\n     (recur (rest orig) (conj coll (first orig))))) x ()))", "user": "5821160de4b04b46fc4b0f6c"}, {"problem": 23, "code": "#(into () %)", "user": "5877c244e4b01531a375eaa9"}, {"problem": 23, "code": "reduce #(cons %2 %1) []", "user": "5874d5ace4b01531a375ea5b"}, {"problem": 23, "code": "#(into () %)", "user": "587d29d1e4b01531a375eb30"}, {"problem": 23, "code": "(fn r [c] (when c (cons (last c) (r (butlast c)))))", "user": "5878fb4ee4b01531a375eac1"}, {"problem": 23, "code": "reduce conj ()", "user": "5871175de4b01531a375e9f7"}, {"problem": 23, "code": "(partial reduce conj nil)", "user": "587e43d2e4b052da650a633f"}, {"problem": 23, "code": "#(reduce (fn [acc, elem]\n           (cons elem acc))\n         (empty %)\n         %)", "user": "554be50de4b0a04f7929959c"}, {"problem": 23, "code": "(fn upside-down [coll]\n  (loop [cur-coll coll\n         rev []] \n    (if (seq cur-coll)\n       (recur (rest cur-coll) (cons (first cur-coll) rev))\n       rev)))", "user": "58472aade4b089d5ab817ea0"}, {"problem": 23, "code": "(fn [input] (into '() input))", "user": "587c845ce4b01531a375eb20"}, {"problem": 23, "code": "reduce conj nil", "user": "587b8bdee4b01531a375eaff"}, {"problem": 23, "code": "(fn r [s] (if (> (count s) 1)  (concat (r (rest s)) (list (first s) )) s))", "user": "587c59d1e4b01531a375eb17"}, {"problem": 23, "code": "(fn [lst] \n  ((fn revf [ls tl]\n    (if (seq ls) (revf (rest ls) (conj tl (first ls)))\n      tl\n     )) lst nil\n   ))", "user": "587df462e4b01531a375eb45"}, {"problem": 23, "code": "(fn [col] (reduce conj '() col))", "user": "587c845ae4b01531a375eb1f"}, {"problem": 23, "code": "(fn [coll]\n\t(loop [reversed [] remaining coll]\n\t(if (empty? remaining)\n\t\treversed\n\t\t(recur (conj reversed (last remaining)) (drop-last remaining)))))", "user": "587e80a0e4b052da650a6346"}, {"problem": 23, "code": "(fn [x]\n  (loop [v (vec x)\n         res []]\n    (if (empty? v) res\n      (recur (pop v) (into res (vector (peek v)))))))", "user": "587f8393e4b0f1effa3b75f2"}, {"problem": 23, "code": "#(into () %)", "user": "58800fd4e4b0f1effa3b7606"}, {"problem": 23, "code": "reduce conj '()", "user": "587ee260e4b052da650a6353"}, {"problem": 23, "code": "reduce conj '()", "user": "579c73fee4b05b1deef9ae08"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "58795fd5e4b01531a375eace"}, {"problem": 23, "code": "#(loop [l % revl []]\n    (if (empty? l)\n         revl\n         (recur (drop-last l) (into revl [(last l)]))\n         ))", "user": "5876c0c5e4b01531a375ea8e"}, {"problem": 23, "code": "(fn rev-seq\n  [coll]\n  (loop [coll         coll\n         rev-coll     []]\n    (if (empty? coll)\n      rev-coll\n      (recur (rest coll)\n             (cons (first coll)\n                   rev-coll)))))", "user": "58817d3ae4b0f1effa3b763b"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "58806599e4b0f1effa3b7615"}, {"problem": 23, "code": "reduce conj '()", "user": "5881335ce4b0f1effa3b762e"}, {"problem": 23, "code": "(fn reverseseq [s] (reduce #(conj %1 %2) '() s))", "user": "58821372e4b0f1effa3b764d"}, {"problem": 23, "code": "reduce conj '()", "user": "5880e38fe4b0f1effa3b7625"}, {"problem": 23, "code": "into '()", "user": "58809253e4b0f1effa3b7618"}, {"problem": 23, "code": "(fn [x]\n  (loop [l x ret []]\n    (if (empty? l)\n      ret\n      (recur (rest l) (apply vector (first l) ret)))))", "user": "5883584ae4b0f1effa3b7674"}, {"problem": 23, "code": "(fn [s]\n  (reduce (fn [acc e]\n            (conj acc e))\n          '()\n          s))", "user": "58836dbee4b0f1effa3b7679"}, {"problem": 23, "code": "(fn [x]\n  (reduce #(cons %2 %1) () x))", "user": "5882e8b1e4b0f1effa3b7666"}, {"problem": 23, "code": "(fn [coll]\n  (loop [c coll coll-reversed '()]\n    (let [h (first c) r (rest c)]\n    (if h\n      (recur r (conj coll-reversed h))\n      coll-reversed))))", "user": "5883920ee4b0f1effa3b767e"}, {"problem": 23, "code": "reduce conj ()", "user": "58840023e4b0f1effa3b768b"}, {"problem": 23, "code": "(fn [x] (reduce #(conj %1 %2) '() x))", "user": "58844d43e4b0f1effa3b7696"}, {"problem": 23, "code": "(fn rrr [coll]                                                                                                          \n  (if (empty? coll)                                                                                                     \n    (list)                                                                                                              \n    (concat                                                                                                             \n     (rrr (rest coll))                                                                                                  \n     (list (first coll)))))\n\n;; reduce (fn [coll x](cons x coll)) []", "user": "585a7cb2e4b0f14aab7c874e"}, {"problem": 23, "code": "reduce conj ()", "user": "576e607ae4b0979f89651579"}, {"problem": 23, "code": "(fn [coll] (reduce #(cons %2 %1) [] coll))", "user": "587c77afe4b01531a375eb1b"}, {"problem": 23, "code": "#(into '() %)", "user": "5884f377e4b0f1effa3b76a8"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5880d686e4b0f1effa3b7623"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5884e807e4b0f1effa3b76a6"}, {"problem": 23, "code": "#(reduce conj '() %1)", "user": "58852909e4b0f1effa3b76af"}, {"problem": 23, "code": "#(into () %)", "user": "566da73ee4b0a866af6896ce"}, {"problem": 23, "code": "into ()", "user": "5884f77ee4b0f1effa3b76a9"}, {"problem": 23, "code": "reduce conj '()", "user": "578d459ee4b0ebec4cfb7567"}, {"problem": 23, "code": "reduce conj '()", "user": "587bead1e4b01531a375eb0d"}, {"problem": 23, "code": "#((fn [input-seq output-seq]\n    (if (empty? input-seq) output-seq (recur (rest input-seq) (conj output-seq (first input-seq)))))\n  % '())", "user": "5885cc62e4b0f1effa3b76c1"}, {"problem": 23, "code": "(fn rev [col]\n  (cond\n   (empty? col) ()\n   (== 1 (count col)) col\n   :else (concat \n          (rev (rest col)) \n          (list (first col)))))", "user": "5887518ae4b0f1effa3b76f5"}, {"problem": 23, "code": "#(loop [xs % revxs ()]\n  (if (empty? xs)\n    revxs\n    (recur (rest xs) (conj revxs (first xs)))\n   )\n  )", "user": "5885e90de4b0f1effa3b76c5"}, {"problem": 23, "code": "(fn [s] \n  (reduce conj '() s))", "user": "58461304e4b089d5ab817e81"}, {"problem": 23, "code": "#(into () %)", "user": "587c48cce4b01531a375eb16"}, {"problem": 23, "code": "#(loop [in % out []]\n   (if (seq in)\n     (recur (butlast in) (conj out (last in)))\n     out\n   )\n )", "user": "57d031d6e4b0bd073c202354"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5888f271e4b0f1effa3b7726"}, {"problem": 23, "code": "(fn\n  [given-seq]\n  (loop [s given-seq\n         result '()]\n    (if (= s nil)\n      result\n      (recur (next s) (conj result (first s))))))", "user": "5888b75fe4b0f1effa3b771b"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "588a0988e4b0f1effa3b7756"}, {"problem": 23, "code": "(fn [a] (reduce #(cons %2 %1) [] a))", "user": "5889dc13e4b0f1effa3b774a"}, {"problem": 23, "code": "(fn [coll]\n  (reduce (fn [acc elem] (cons elem acc)) '() coll))", "user": "58896e5ce4b0f1effa3b773e"}, {"problem": 23, "code": "(fn [args]\n  (loop [x args y '()]\n    (if (empty? x)\n      y\n      (recur (butlast x) (concat y (list (last x))))\n    )\n  )\n)", "user": "588b1eb5e4b05c141a256071"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "57dd2c99e4b0bd073c20243c"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "58730484e4b01531a375ea26"}, {"problem": 23, "code": "#(reduce conj '() (seq %))", "user": "57f0decfe4b0bfb2137f5bfa"}, {"problem": 23, "code": "(fn [lst]\n  (reduce conj '() lst))", "user": "50997306e4b0cae2931060b5"}, {"problem": 23, "code": "(fn reverse-seq\n  ([s res]\n  (if (not (empty? s))\n    (reverse-seq (take (dec (count s)) s) (conj res (last s)))\n    res))\n  ([s]\n  (reverse-seq s [])))", "user": "588c65ade4b05c141a256098"}, {"problem": 23, "code": "(partial reduce conj (list))", "user": "55b6afc6e4b01b9910ae299c"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "56aad4f7e4b03c432f187338"}, {"problem": 23, "code": "(fn [lst]\n  ((fn [lst result]\n    (if (empty? lst) result\n      (recur (rest lst) (cons (first lst) result)))) lst []))", "user": "57902cd8e4b0ebec4cfb75a6"}, {"problem": 23, "code": "(fn [seq] (reduce (fn [acc item] (cons item acc)) '() seq))", "user": "5885bea8e4b0f1effa3b76bf"}, {"problem": 23, "code": "(fn arev [list] \n  (if (= nil (first list)) \n    nil \n    (conj (vec (arev (rest list))) (first list))\n   )\n)", "user": "587a2356e4b01531a375eade"}, {"problem": 23, "code": "#(reduce (fn [x y] (conj x y)) '() %)", "user": "588bf237e4b05c141a25608d"}, {"problem": 23, "code": "#(into () %)", "user": "587cbebbe4b01531a375eb24"}, {"problem": 23, "code": "(fn [s]\n  (loop [head nil tail s]\n    (if (empty? tail)\n      head\n      (recur (conj head (first tail)) (rest tail)))))", "user": "588e6a17e4b00487982d518c"}, {"problem": 23, "code": "#(apply conj () %)", "user": "588e8133e4b00487982d5191"}, {"problem": 23, "code": ";#(reduce (fn [a b] (into [b] a)) [] %)\n#(reduce conj () %)", "user": "588ce4aee4b05c141a2560a1"}, {"problem": 23, "code": "into '()", "user": "588039d0e4b0f1effa3b760c"}, {"problem": 23, "code": "(fn [li] \n  (loop [currl li, newl []] \n    (if (empty? currl)\n      newl\n      (recur (butlast currl) (conj newl (last currl)))\n    )\n   )\n )", "user": "588fb3a7e4b00487982d51b9"}, {"problem": 23, "code": "into ()", "user": "53ada652e4b047364c04446d"}, {"problem": 23, "code": "reduce conj ()", "user": "58849a0ee4b0f1effa3b769b"}, {"problem": 23, "code": "into ()", "user": "5799c6dee4b05b1deef9adca"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "54dbc6ebe4b024c67c0cf773"}, {"problem": 23, "code": "(fn backwards [indx]\n  (into '() indx))", "user": "58884cc6e4b0f1effa3b770e"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "588a344ae4b0f1effa3b775d"}, {"problem": 23, "code": "#(into () %)", "user": "5890dbeae4b00487982d51e3"}, {"problem": 23, "code": "#(vec (reduce conj () %))", "user": "589037b4e4b00487982d51d0"}, {"problem": 23, "code": "#(reduce (fn [l item] (conj l item)) '() %)", "user": "5890799be4b00487982d51d6"}, {"problem": 23, "code": "into ()", "user": "588e64ebe4b00487982d518a"}, {"problem": 23, "code": "reduce #(conj %1 %2) '()", "user": "55e1a205e4b050e68259b41e"}, {"problem": 23, "code": "#(into () %)", "user": "57e016dce4b0bd073c202470"}, {"problem": 23, "code": "(fn r [l]\n  (loop [ls l rtn []]\n    (if (empty? ls)\n      rtn\n      (recur (rest ls) (cons (first ls) rtn)))))", "user": "580b79e4e4b0a837a8b30d4a"}, {"problem": 23, "code": "reduce conj ()", "user": "58904720e4b00487982d51d1"}, {"problem": 23, "code": "(partial reduce conj ())", "user": "58923efce4b00487982d521c"}, {"problem": 23, "code": "(fn [col] (reduce (fn [item_1 item_2] (cons item_2 item_1)) '() col))", "user": "588f500ae4b00487982d51a4"}, {"problem": 23, "code": "(fn [s] \n   (loop [res (list) cs s] \n     (if-not (seq cs) \n       res \t \n       (recur (conj res (first cs)) (rest cs)) \n     ) \n   ))", "user": "57de9169e4b0bd073c202454"}, {"problem": 23, "code": "#( into '() %)", "user": "5891bddce4b00487982d5201"}, {"problem": 23, "code": "(fn rev\n  [sq]\n  (reduce\n     (fn [acc el] (conj acc el))\n     ()\n     sq))", "user": "588e4e05e4b00487982d5188"}, {"problem": 23, "code": "#(reduce (fn [a b] (cons b a)) '() %)", "user": "58949f8de4b00487982d525e"}, {"problem": 23, "code": "(fn reverseSequence [toReverse]\n  (if (empty? toReverse)\n  \t[]\n    (conj  (reverseSequence (rest toReverse)) (first toReverse))\n  )\n)", "user": "5894b298e4b00487982d5261"}, {"problem": 23, "code": "(fn reverse* [lst]\n  (letfn [(iter [lst result]\n                (if (empty? lst)\n                  result\n                  (iter (next lst)\n                        (cons (first lst) result))))]\n    (iter lst [])))", "user": "5895477fe4b00487982d527c"}, {"problem": 23, "code": "reduce conj ()", "user": "589561bce4b00487982d5282"}, {"problem": 23, "code": "reduce (fn [x y] (concat [y] x)) []", "user": "5894aee1e4b00487982d5260"}, {"problem": 23, "code": "into '()", "user": "57453a52e4b009280f9f2b49"}, {"problem": 23, "code": "into '()", "user": "54f777a4e4b01ecee9d88820"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "589714cbe4b00487982d52b1"}, {"problem": 23, "code": "(fn rev [coll]\n  (loop [xs '() x2 coll]\n    (if (empty? x2)\n      xs\n      (recur (conj xs (first x2)) (rest x2)))))", "user": "58975725e4b00487982d52b7"}, {"problem": 23, "code": "(fn [coll]\n    (loop [result () coll coll]\n        (if (empty? coll)\n            result\n            (recur (conj result (first coll)) (rest coll)))))", "user": "5896735fe4b00487982d529d"}, {"problem": 23, "code": "(fn [s]\n  (loop [s s, rev []]\n    (if (empty? s)\n      rev\n      (recur (rest s) (cons (first s) rev))\n     )))", "user": "5897c71ee4b00487982d52c7"}, {"problem": 23, "code": "reduce conj ()", "user": "5896ade8e4b00487982d52a9"}, {"problem": 23, "code": "(fn [l] (into [] (into '() l)))", "user": "58983e3fe4b00487982d52ce"}, {"problem": 23, "code": "#(into () %)", "user": "544673c0e4b032a45b8693b0"}, {"problem": 23, "code": "into ()", "user": "56c85700e4b0ed865f9758d0"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "589560d8e4b00487982d5281"}, {"problem": 23, "code": "(partial reduce (fn [a b] (cons b a)) ())", "user": "587c738de4b01531a375eb1a"}, {"problem": 23, "code": "reduce conj '()", "user": "58976bfde4b00487982d52bc"}, {"problem": 23, "code": "#(into () %)", "user": "4db863d7535d1e037afb2190"}, {"problem": 23, "code": "reduce conj ()", "user": "5893c64ce4b00487982d524b"}, {"problem": 23, "code": "(fn  [coll]\n  (loop [newcoll (list) auscoll coll]\n    (if (= (count auscoll) 0) \n      newcoll \n      (recur (conj newcoll (first auscoll)) (rest auscoll)))))", "user": "56f1b558e4b04a395b9a049a"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "58969902e4b00487982d52a6"}, {"problem": 23, "code": "(fn [coll] (reduce conj () coll))", "user": "5899c54de4b00487982d52fa"}, {"problem": 23, "code": "(fn [s]\n  (reduce conj () s))", "user": "5896a0e6e4b00487982d52a8"}, {"problem": 23, "code": "apply conj '()", "user": "585d9558e4b0f14aab7c879c"}, {"problem": 23, "code": "(fn [c]\n  (if-let [x (instance? clojure.lang.PersistentTreeSet c)]\n    (into () c)\n    (into (empty c) (into () c))\n   ))", "user": "55228c3ce4b0882d96d091a2"}, {"problem": 23, "code": "(fn [x]\n  (reduce conj nil x))", "user": "5898f299e4b00487982d52e1"}, {"problem": 23, "code": "reduce conj '()", "user": "56c44c34e4b05cc29241ee96"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5866df28e4b0f14aab7c886d"}, {"problem": 23, "code": "reduce conj `()", "user": "589122fbe4b00487982d51ed"}, {"problem": 23, "code": "#(loop [r (empty %) c %]\n   (if (empty? c)\n     r\n     (recur (cons (first c) r) (rest c))))", "user": "589a4aece4b00487982d530b"}, {"problem": 23, "code": "(fn [coll] (reduce conj '() coll))", "user": "55ea1738e4b0121d4835fdaa"}, {"problem": 23, "code": "reduce conj ()", "user": "589a8dace4b00487982d5311"}, {"problem": 23, "code": "#(reduce (fn [coll x] (into [x] coll)) [] %)", "user": "589ac5a2e4b00487982d5318"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "58987ee9e4b00487982d52d2"}, {"problem": 23, "code": "#(into '() %1)", "user": "587cf1b1e4b01531a375eb2b"}, {"problem": 23, "code": "#(into () %)", "user": "587cf197e4b01531a375eb2a"}, {"problem": 23, "code": "#(into '() %1)", "user": "587cf147e4b01531a375eb29"}, {"problem": 23, "code": "(fn swapit [alist] (if (= (seq alist) nil) [] (conj (swapit (rest alist)) (first alist))))", "user": "58950f29e4b00487982d5270"}, {"problem": 23, "code": "reduce conj ()", "user": "57887de2e4b0ebec4cfb751c"}, {"problem": 23, "code": "reduce conj ()", "user": "588f1743e4b00487982d519d"}, {"problem": 23, "code": "(fn [x] (loop [new (empty x) old x] (if (empty? old) \n                              new\n                              (recur (cons (first old) new) (rest old) ))))", "user": "589c3123e4b00487982d5358"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "589c6914e4b00487982d535d"}, {"problem": 23, "code": "(fn [lst]\n  (reduce conj '() lst))", "user": "589cb617e4b00487982d536a"}, {"problem": 23, "code": "(fn xxx [xs] (if (empty? (rest xs)) (list (first xs)) (conj (vec (xxx (rest xs))) (first xs))))", "user": "589c7c8ce4b00487982d5361"}, {"problem": 23, "code": "into '()", "user": "589511dee4b00487982d5272"}, {"problem": 23, "code": "#(reduce (fn [x y] (conj x y)) '() %)", "user": "5897dda4e4b00487982d52c8"}, {"problem": 23, "code": "into ()", "user": "5794fd7be4b0e215f87e8476"}, {"problem": 23, "code": "(fn [iseq] (into [] (reduce #(conj %1 %2) '() iseq)))", "user": "589c2e3fe4b00487982d5357"}, {"problem": 23, "code": "reduce #(conj %1 %2 ) '()", "user": "557b3f29e4b05c286339e0ac"}, {"problem": 23, "code": "(fn [s]\n  (if (vector? s)\n    (loop [now s res []]\n      (if (empty? now)\n        res\n        (recur (pop now) (conj res (peek now)))\n        )\n      )\n    (reduce #(conj %1 %2) '() s)\n    ))", "user": "589e704ae4b02bd94d917e5e"}, {"problem": 23, "code": "reduce (fn [acc val] (into [val] acc)) []", "user": "55f1f0d1e4b06e875b46ce3b"}, {"problem": 23, "code": "reduce conj ()", "user": "589f0b8ee4b02bd94d917e71"}, {"problem": 23, "code": "reduce conj nil", "user": "589f4387e4b02bd94d917e7b"}, {"problem": 23, "code": "(fn rrr\n  [a]\n  (println (rest a) (first a))\n  (if (empty? a)\n    nil\n    (concat (rrr (rest a)) [(first a)])))", "user": "589f34a0e4b02bd94d917e78"}, {"problem": 23, "code": "#(reduce (fn [acc x]\n           (cons x acc))\n         (empty %)\n         %)", "user": "5873eb5ae4b01531a375ea45"}, {"problem": 23, "code": "(fn\n  [coll]\n  (reduce (fn [new-coll item]\n            (conj new-coll item))\n          '()\n          coll))", "user": "56e22366e4b03a7c14b85a30"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "589f58fee4b02bd94d917e7f"}, {"problem": 23, "code": "(fn [xs]\n\t(loop [result () head (first xs) tail (rest xs)]\n\t\t(if-not head\n\t\t\tresult\n\t\t\t(recur (conj result head) (first tail) (rest tail)))\n\n\t)\n)", "user": "57382719e4b0cd1946bd1055"}, {"problem": 23, "code": "#(into () %)", "user": "5771b155e4b0979f896515ba"}, {"problem": 23, "code": "(fn x [c] (loop [acc '() col c] \n            (if (= (count acc) (count c))\n              acc\n              (recur (conj acc (first col)) (rest col) ))))", "user": "58988cbbe4b00487982d52d7"}, {"problem": 23, "code": "into ()", "user": "589dd2cce4b02bd94d917e48"}, {"problem": 23, "code": "(fn myrev [c] (conj (if (butlast c) (myrev (butlast c))) (last c)))", "user": "589ec900e4b02bd94d917e65"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "58a2b57fe4b02bd94d917ede"}, {"problem": 23, "code": "(fn myrev\n  ([x] (myrev x (count x)))\n  ([x y] (if (= 1 y)\n           x\n           (loop [reversed [] z x]\n             (if (empty? z)\n               reversed\n               (recur (conj reversed (last z)) (butlast z)))))))", "user": "58a1d00ae4b02bd94d917ec6"}, {"problem": 23, "code": "(fn myreverse [alist]\n  (loop [result [] mylist (vec alist)]\n    (if (= 0 (count mylist))\n      result\n      (recur (conj result (last mylist)) (drop-last mylist))\n    )\n  )\n)", "user": "58a17511e4b02bd94d917eb4"}, {"problem": 23, "code": "#(into () %)", "user": "589f0087e4b02bd94d917e6d"}, {"problem": 23, "code": "(fn [elems]\n  (loop [x (count elems)\n         rev []]\n    (if (= x 0)\n      rev\n      (recur (- x 1)\n             (conj rev ((vec elems) (- x 1)))))))", "user": "589e0024e4b02bd94d917e4e"}, {"problem": 23, "code": "(fn [col] (reduce conj () col))", "user": "58a1e968e4b02bd94d917eca"}, {"problem": 23, "code": "into '()", "user": "58a35b1ee4b02bd94d917ef3"}, {"problem": 23, "code": "(fn myReverse [coll] \n  (if (= 1 (count coll))\n    coll\n    (cons (last coll) (myReverse (butlast coll)))\n  )\n)", "user": "58a3c6aae4b02bd94d917f00"}, {"problem": 23, "code": "(fn [x]\n      (loop [accum [] ost x]\n        (if (seq ost)\n            (recur (conj accum (last ost)) (drop-last ost))\n            accum)))", "user": "589c8fa6e4b00487982d5365"}, {"problem": 23, "code": "#(into '() %)", "user": "5787df42e4b0ebec4cfb7512"}, {"problem": 23, "code": "(fn [xs]\n          (loop [remaining xs\n                 acc (list)]\n            (if (empty? remaining)\n              acc\n              (recur (rest remaining)\n                     (conj acc (first remaining))))))", "user": "58a47197e4b01a0c0b2328f9"}, {"problem": 23, "code": "(fn [fwd]\n   (reduce (fn [acc elem]\n            (conj acc elem) ) '() fwd))", "user": "58a413b5e4b02bd94d917f07"}, {"problem": 23, "code": "(fn [s] (reduce conj '() s))", "user": "58a3279fe4b02bd94d917ee9"}, {"problem": 23, "code": "#(loop [i (count %1) acc []] (if (= 0 i) acc (recur (dec i) (conj acc ((into [] %1) (dec i))))))", "user": "58a31ecee4b02bd94d917ee7"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "58951903e4b00487982d5274"}, {"problem": 23, "code": "(fn [a] (vec (reduce conj (list) a)))", "user": "5751bd1ce4b02ea11479928b"}, {"problem": 23, "code": "reduce conj '()", "user": "58a0fc33e4b02bd94d917ea3"}, {"problem": 23, "code": "(fn rev [s] (if (empty? s) [] (concat [(last s)] (rev (butlast s)))))", "user": "589c12c2e4b00487982d5353"}, {"problem": 23, "code": "(fn rev [s] \n  (if (not (nil? (first s)))\n    (concat (rev (rest s)) [(first s)])\n    s))", "user": "58a5a099e4b01a0c0b232918"}, {"problem": 23, "code": "#(into () %)", "user": "58a5eac3e4b01a0c0b23291e"}, {"problem": 23, "code": "into ()", "user": "58a0fd0be4b02bd94d917ea4"}, {"problem": 23, "code": "(fn func\n            ([x y]\n             (if (empty? x)\n               y\n               (recur (rest x) (conj y (first x)))))\n            ([x]\n             (func x '())))", "user": "58a3ba31e4b02bd94d917eff"}, {"problem": 23, "code": "#(into '() %)", "user": "58a7215de4b01a0c0b23293c"}, {"problem": 23, "code": "(fn [coll]\n  (loop [c coll r []]\n    (if (empty? c)\n      r\n      (recur (butlast c) (conj r (last c))))))", "user": "58a72bafe4b01a0c0b23293d"}, {"problem": 23, "code": "#(into () %)", "user": "58a7b7cbe4b01a0c0b232946"}, {"problem": 23, "code": "(partial reduce (fn [coll item]\n          (cons item coll)) [])", "user": "5760682ee4b08062f99a4e94"}, {"problem": 23, "code": "(fn _reverse [l] \n  (if \n    (> (count l) 1) \n    (conj (_reverse (rest l)) (first l)) \n    (vector (first l))\n  )\n)", "user": "58a82659e4b01a0c0b232951"}, {"problem": 23, "code": "reduce conj '()", "user": "57d1c183e4b0bd073c20236e"}, {"problem": 23, "code": "(fn [x] (into () x ))", "user": "58a9e872e4b01a0c0b232973"}, {"problem": 23, "code": "#(loop [l % acc []] \n          (if \n              (= (count l) 0)  acc\n              (recur (rest l) (cons (first l) acc))))", "user": "58aa19d3e4b01a0c0b23297c"}, {"problem": 23, "code": "#(loop [s1 % s2 ()] (if-not (seq s1) s2 (recur (rest s1) (conj s2 (first s1)))))", "user": "589771f9e4b00487982d52bd"}, {"problem": 23, "code": "#(into () %)", "user": "58a5822fe4b01a0c0b232913"}, {"problem": 23, "code": "(partial reduce conj '())", "user": "58a953dae4b01a0c0b232968"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "58a6bd35e4b01a0c0b232931"}, {"problem": 23, "code": "(fn doit [c] (reduce #(conj %1 %2) ()\n                 c))", "user": "56391b7ce4b0bfe05bf117ef"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "57fe68e2e4b0d3187e9009ce"}, {"problem": 23, "code": "(partial into ())", "user": "58934052e4b00487982d523a"}, {"problem": 23, "code": "#(into '() %)", "user": "55afe57ae4b002ce9d5cbc1c"}, {"problem": 23, "code": "(fn reverse-seq [aSeq]\n  (when-not (empty? aSeq)\n    (into () aSeq)))", "user": "507eed82e4b06ce648bcdbfe"}, {"problem": 23, "code": "reduce conj ()", "user": "58ac14ebe4b0005cfeb1a740"}, {"problem": 23, "code": "reduce conj ()", "user": "58ac1135e4b0005cfeb1a73f"}, {"problem": 23, "code": "(fn [l]\n  (loop [list l out '()]\n  \t(if (empty? list)\n\tout\n  \t(recur (rest list) (cons (first list) out)))\n  )\n)", "user": "58a72f71e4b01a0c0b23293f"}, {"problem": 23, "code": "(fn [x] (into '() x))", "user": "58ac513fe4b0005cfeb1a746"}, {"problem": 23, "code": "(fn [in]\n  (reduce conj () in))", "user": "54d100abe4b0e8a36923e5d8"}, {"problem": 23, "code": "(fn [coll]\n (for [i (range (count coll))]\n (nth (seq coll) (- (dec (count coll)) i))))", "user": "58a8e128e4b01a0c0b23295e"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5619d3a2e4b053970a773b00"}, {"problem": 23, "code": "(fn [input]\n   (loop [in input\n          out (list)]\n     (if (empty? in)\n       out\n       (recur (rest in) (conj out (first in))))))", "user": "577ad824e4b0d3393e5deb08"}, {"problem": 23, "code": "#(into '() %)", "user": "58ac8aeee4b0005cfeb1a74e"}, {"problem": 23, "code": "(partial reduce (fn [acc n] (cons n acc)) [])", "user": "589ac991e4b00487982d5319"}, {"problem": 23, "code": "#(into () %)", "user": "58ae3f7ee4b0ebc645576cb7"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "5840178ee4b089d5ab817de0"}, {"problem": 23, "code": "into ()", "user": "58aee148e4b0ebc645576cc3"}, {"problem": 23, "code": "(fn [x] (into () x))", "user": "58a5c5c2e4b01a0c0b23291b"}, {"problem": 23, "code": "(fn [s] (reduce\n         #(conj %1 %2)\n         ()\n         s))", "user": "56cdbd53e4b0ea9b8538f751"}, {"problem": 23, "code": "(fn rev [sequence]\n  (loop [reversed '()\n         remaining sequence]\n    (if (empty? remaining)\n      reversed\n      (recur (cons (first remaining) reversed) (rest remaining)))))", "user": "4fe899a6e4b07c9f6fd12c54"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "58ad4349e4b0ebc645576c9d"}, {"problem": 23, "code": "(fn [list]\n      ((fn [list rev-list]\n        (println \"list\")\n        (if (empty? list)\n          rev-list\n          (recur (rest list) (conj rev-list (first list))))) list '()))", "user": "587a3babe4b01531a375eae2"}, {"problem": 23, "code": "(fn f\n  ([arr] (f arr '()))\n  ([arr accum]\n   (if (empty? arr)\n     accum\n     (recur (next arr) (conj accum (first arr))))))", "user": "58b06b7ce4b0ebc645576cdc"}, {"problem": 23, "code": "reduce conj ()", "user": "58a16387e4b02bd94d917eb1"}, {"problem": 23, "code": "#(loop [xs % ys '()] (if (empty? xs) ys (recur (rest xs) (conj ys (first xs)))))", "user": "58aa8083e4b01a0c0b232985"}, {"problem": 23, "code": "(fn \n  [seqn] \n  (loop [acc '()\n         _seqn seqn]\n    (if (empty? _seqn)\n      acc\n      (recur (conj acc (first _seqn)) (rest _seqn))\n     )))", "user": "5854580ce4b07779d46863f9"}, {"problem": 23, "code": "(fn [xs]\n  (loop [xs xs\n         result '()]\n    (if (empty? xs)\n      result\n      (recur (rest xs)\n             (cons (first xs) result)))))", "user": "58a58c50e4b01a0c0b232914"}, {"problem": 23, "code": "#(apply conj '() %)", "user": "58b1f51de4b0ebc645576d05"}, {"problem": 23, "code": "(fn [lst]\n    (reduce (fn [acc item]\n              (cons item acc))\n            '() lst))", "user": "589e22fae4b02bd94d917e56"}, {"problem": 23, "code": "(fn [l]\n   (loop\n     [[h & t] (seq l)\n      nl ()]\n     (if (empty? t)\n       (conj nl h)\n       (recur t (conj nl h)))))", "user": "58791973e4b01531a375eac5"}, {"problem": 23, "code": "#(into () %)", "user": "58b2f085e4b0ebc645576d15"}, {"problem": 23, "code": "(fn my-reverse [xs]\n  (when xs\n    (cons (last xs) (my-reverse (butlast xs)))))", "user": "58b18ba0e4b0ebc645576cfa"}, {"problem": 23, "code": "into '()", "user": "58b31a46e4b0ebc645576d1b"}, {"problem": 23, "code": "(fn [col] \n  (loop [c col r []]\n    (if (empty? c)\n      r\n      (recur (rest c) (concat [(first c)] r)))))", "user": "58a822e4e4b01a0c0b232950"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "589f50bfe4b02bd94d917e7d"}, {"problem": 23, "code": "reduce conj ()", "user": "58b3388ae4b0ebc645576d1e"}, {"problem": 23, "code": "#(into '() %)", "user": "58b36131e4b0ebc645576d21"}, {"problem": 23, "code": "(fn foo\n  ([xs] (foo xs []))\n  ([xs acc]\n   (if (empty? xs)\n     acc\n     (foo (rest xs) (cons (first xs) acc)))))", "user": "58b066dee4b0ebc645576cd9"}, {"problem": 23, "code": "(fn [s] \n    (loop [[head & tail] (seq s)\n           rev-s []]\n      (if (empty? tail)\n           (into [head] rev-s)\n        (recur tail (into [head] rev-s))\n        )\n      )\n    )", "user": "587cebf3e4b01531a375eb28"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5895fd90e4b00487982d528f"}, {"problem": 23, "code": "(fn [v] (loop [[head & tail :as all] (seq v)\n               result '()]\n          (if all\n            (recur tail (cons head result))\n            result)))", "user": "5759c833e4b02ea11479932c"}, {"problem": 23, "code": "#(into () %)", "user": "58637221e4b0f14aab7c881d"}, {"problem": 23, "code": "#(reduce conj '() %1)", "user": "58b51e05e4b0ebc645576d4c"}, {"problem": 23, "code": "(fn rec [x] \n   (if (> (count x) 0)\n     (conj (rec (rest x)) (first x))\n     []\n ))", "user": "58b43bf5e4b0ebc645576d38"}, {"problem": 23, "code": "reduce #(conj %1 %2) '()", "user": "58a55694e4b01a0c0b23290b"}, {"problem": 23, "code": "(fn\n  [arr]\n  (loop [orig arr rev []]\n    (if (not (empty? orig))\n      (recur (butlast orig) (conj rev (last orig)))\n      rev\n      )\n    )\n  )", "user": "5651654be4b0f9d632dd845a"}, {"problem": 23, "code": "#(reduce (fn [acc x] (conj acc x)) '() %)", "user": "58b7e825e4b0ebc645576d85"}, {"problem": 23, "code": "(fn [xs] (reduce (fn [acc new] (into [new] acc)) [] xs))", "user": "58b81490e4b0ebc645576d8c"}, {"problem": 23, "code": "into '()", "user": "564a0698e4b0284900eef64b"}, {"problem": 23, "code": "#(into () %1)", "user": "58b80ec1e4b0ebc645576d89"}, {"problem": 23, "code": "#(reduce conj '() (seq %))", "user": "58b84c28e4b0ebc645576d94"}, {"problem": 23, "code": "#(into () %)", "user": "58a44a14e4b01a0c0b2328f2"}, {"problem": 23, "code": "(fn [result n]\n  (if (= (count n) 0)\n    result\n    (recur (conj result (last n)) (drop-last n)))) []", "user": "57309d7ee4b0cd1946bd0fb2"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "58b6d93ce4b0ebc645576d6c"}, {"problem": 23, "code": "(fn [sekvensi]\n  (loop [[eka & loput] (seq sekvensi) tulos (list)]\n    (if eka\n      (recur loput (conj tulos eka))\n      tulos)))", "user": "57c314f3e4b05aa3c4741cba"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "58b4898de4b0ebc645576d3d"}, {"problem": 23, "code": "(fn [initial-list]\n\t(loop [slist initial-list nar '()]\n\t\t(if (= nil (first slist))\n\t\t\tnar\n\t\t\t(recur (rest slist) (conj nar (first slist))))))", "user": "58b985e0e4b0888cdc949ccc"}, {"problem": 23, "code": "(fn rev [input]\n  (let [head (first input)\n        tail (rest input)]\n\t (if (empty? tail)\n       [head]\n       (conj (rev tail) head))\n    )\n)", "user": "58b783f2e4b0ebc645576d7f"}, {"problem": 23, "code": "#(reduce\n  (fn [m e]\n    (conj m e))\n  '()\n  %)", "user": "5881d1c2e4b0f1effa3b7644"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "58ba7ee1e4b0888cdc949ce6"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "58ba8e7ce4b0888cdc949ce8"}, {"problem": 23, "code": "(fn [arr]\n  (loop [orig arr\n         acc []]\n    (if (= orig [])\n      acc\n      (recur (drop-last orig) (conj acc (last orig))))))", "user": "58b54852e4b0ebc645576d52"}, {"problem": 23, "code": "(fn rev [sqnc] \n  (if (= 1 (count sqnc)) \n    sqnc\n    (concat (rev (rest sqnc)) [(first sqnc)]) ))", "user": "58acce0ae4b0005cfeb1a754"}, {"problem": 23, "code": "(fn [rest-coll & reversed-coll]\n    (let [init #(take (- (count %) 1) %)\n          take-last-1 #(take-last 1 %)]\n      (cond\n        (empty? rest-coll) reversed-coll\n        (not reversed-coll) (recur (init rest-coll) (take-last-1 rest-coll))\n        :else (recur (init rest-coll) (concat reversed-coll (take-last-1 rest-coll))))))", "user": "58bbcbc8e4b0888cdc949d00"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "58bbe58be4b0888cdc949d05"}, {"problem": 23, "code": "(fn reverse-seq [coll]\n  (if (empty? coll)\n    ()\n    (cons (last coll) (reverse-seq (drop-last coll)))))", "user": "57ff7d88e4b0a837a8b30c20"}, {"problem": 23, "code": "(fn [s] (into (seq '()) s))", "user": "58bb736be4b0888cdc949cf9"}, {"problem": 23, "code": "(fn [x] (reduce #(concat [%2] %) [] x))", "user": "58aae714e4b01a0c0b23298e"}, {"problem": 23, "code": "#(loop [rev nil xs %] (if (= (first xs) nil) rev (recur (cons (first xs) rev) (rest xs))))", "user": "58b989dbe4b0888cdc949ccd"}, {"problem": 23, "code": "reduce #(cons %2 %1) []", "user": "58aa3f02e4b01a0c0b23297d"}, {"problem": 23, "code": "into ()", "user": "589c0475e4b00487982d5351"}, {"problem": 23, "code": "(fn [xs] (reduce #(conj %1 %2) '() xs))", "user": "58bb218be4b0888cdc949cf4"}, {"problem": 23, "code": "(fn [x]\n\t(loop [y (rest x) z (list (first x))]\n\t(if (= () y)\n\t\tz\n\t\t(recur (rest y) (concat (list (first y)) z)))))", "user": "58bd219be4b0888cdc949d29"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "58b9c43be4b0888cdc949cd3"}, {"problem": 23, "code": "#(into () %)", "user": "58bd84d2e4b0888cdc949d31"}, {"problem": 23, "code": "(fn [coll] (reduce conj '() coll))", "user": "58ae5b44e4b0ebc645576cba"}, {"problem": 23, "code": "(fn [x] (loop [xx x yy ()] (if (empty? xx) yy (recur (rest xx) (conj yy (first xx))))))", "user": "589f2cefe4b02bd94d917e75"}, {"problem": 23, "code": "#(loop [x %1 ans []] (if (empty? x) ans (recur (rest x) (cons (first x) ans))))", "user": "58be3142e4b0888cdc949d44"}, {"problem": 23, "code": "(fn rv [x] (cond (empty? x) x\n              true (conj\n                       (rv (butlast x)) \n                   (last x)) ))", "user": "579b24d0e4b05b1deef9adee"}, {"problem": 23, "code": "reduce conj ()", "user": "58bef28be4b021aa9917ecca"}, {"problem": 23, "code": "(fn [seq]\n  (reduce conj () seq))", "user": "58bef424e4b021aa9917eccb"}, {"problem": 23, "code": "#(apply conj '() %)", "user": "57b35ecbe4b0fbc9809a277e"}, {"problem": 23, "code": "(fn [lst] (reduce #(cons %2 %1) [] lst) )", "user": "58bf1cf8e4b021aa9917eccf"}, {"problem": 23, "code": "#(loop [col (vec %) rcol []]\n  (if (empty? col)\n    rcol\n    (recur (pop col) (conj rcol (peek col)))))", "user": "58bb6f67e4b0888cdc949cf7"}, {"problem": 23, "code": "#(into () %)", "user": "58b51aeae4b0ebc645576d4b"}, {"problem": 23, "code": "(fn [a] (reduce conj '() a))", "user": "58bdead0e4b0888cdc949d3e"}, {"problem": 23, "code": "reduce conj ()", "user": "58765038e4b01531a375ea7e"}, {"problem": 23, "code": "into ()", "user": "58c04ca5e4b021aa9917ece6"}, {"problem": 23, "code": ";; notice: conjoining to a list is done at the beginning\n#(reduce conj () %)", "user": "58bde497e4b0888cdc949d3c"}, {"problem": 23, "code": "reduce (fn [res x] (conj res x)) ()", "user": "58b86162e4b0ebc645576d97"}, {"problem": 23, "code": "reduce conj '()", "user": "58c1b4f5e4b021aa9917ed01"}, {"problem": 23, "code": "(fn [coll] (reduce conj () coll))", "user": "58bc3202e4b0888cdc949d0b"}, {"problem": 23, "code": "(fn [s] (loop [sin s sout '()] (if (empty? sin) sout (recur (drop 1 sin) (conj sout (first sin))))))", "user": "58b226cce4b0ebc645576d07"}, {"problem": 23, "code": "reduce conj '()", "user": "58c072d1e4b021aa9917eced"}, {"problem": 23, "code": "reduce (fn [r e] (conj r e)) ()", "user": "58c2df0ae4b021aa9917ed17"}, {"problem": 23, "code": "(fn r [x]\n  (if (= (count x) 1)\n    x\n    (conj (r (butlast x)) (last x))))", "user": "58c3af4de4b021aa9917ed1b"}, {"problem": 23, "code": "into '()", "user": "58a202f2e4b02bd94d917ece"}, {"problem": 23, "code": "(fn [x] (reduce conj '() x))", "user": "57b7de74e4b0fbc9809a27d4"}, {"problem": 23, "code": "(fn [coll]\n  (reduce #(conj %1 %2) '() coll))", "user": "58c1cdc9e4b021aa9917ed05"}, {"problem": 23, "code": "(fn [xs] (reduce conj () xs))", "user": "58c4492be4b021aa9917ed27"}, {"problem": 23, "code": "(fn [seq]\n        (loop [input seq\n               output '()]\n          (if (empty? input)\n            output\n            (recur (rest input) (conj output (first input))))))", "user": "52b065dbe4b0c58976d9acc9"}, {"problem": 23, "code": "(fn [l] (reduce (fn [x y] (cons y x)) [] (vec l)))", "user": "58c54e2ee4b021aa9917ed3a"}, {"problem": 23, "code": "(fn f [coll]\n  (if (seq coll)\n    (cons (last coll) (f (butlast coll)))\n    '()))", "user": "58c5a08be4b021aa9917ed40"}, {"problem": 23, "code": "#(into () %)", "user": "58c5ad55e4b021aa9917ed42"}, {"problem": 23, "code": "#(reduce (fn [acc x]\n           (cons x acc))\n         (empty %)\n         %)", "user": "58c658c9e4b021aa9917ed4f"}, {"problem": 23, "code": "(fn [l] (into (list) l))", "user": "5629e651e4b00e49c7cb4814"}, {"problem": 23, "code": "#(into () %)", "user": "574b4f3ee4b02ea114799207"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "58c69d88e4b021aa9917ed5e"}, {"problem": 23, "code": "reduce conj ()", "user": "58bc6a88e4b0888cdc949d16"}, {"problem": 23, "code": "reduce (fn [rs val] (cons val rs)) []", "user": "58c66990e4b021aa9917ed53"}, {"problem": 23, "code": "reduce conj '()", "user": "4f847bf2e4b033992c121c32"}, {"problem": 23, "code": "#(reduce\n  (fn [result current]\n    (conj result current))\n  (list)\n  %\n  )", "user": "58c93089e4b021aa9917ed9b"}, {"problem": 23, "code": "#(reduce (fn [acc x]\n           (cons x acc))\n         (empty %)\n         %)", "user": "58c8e0aae4b021aa9917ed95"}, {"problem": 23, "code": "reduce #(cons %2 %1) []", "user": "58c4b11ae4b021aa9917ed2c"}, {"problem": 23, "code": "(fn my-reverse [x]\n  (if (= (count x) 0)\n    []\n    (conj (my-reverse (rest x)) (first x))\n  )\n)", "user": "58c99858e4b021aa9917eda7"}, {"problem": 23, "code": "(fn rev [xs] (if (empty? xs) xs (concat (take-last 1 xs) (rev (drop-last xs)))))", "user": "58c623dbe4b021aa9917ed4b"}, {"problem": 23, "code": "reduce conj ()", "user": "58ca8a1de4b03c36ff7e5835"}, {"problem": 23, "code": "reduce conj ()", "user": "53640c40e4b0243289761e61"}, {"problem": 23, "code": "(fn [in-list]\n  (loop [src in-list dst ()]\n    (if (empty? src)\n      dst\n      (recur (rest src) (cons (first src) dst)))))", "user": "58ca613de4b021aa9917edb7"}, {"problem": 23, "code": "reduce #(cons %2 %1) []", "user": "58b26da4e4b0ebc645576d0a"}, {"problem": 23, "code": "(fn [seq-in] (reduce #(conj %1 %2) () seq-in))", "user": "58cbdc3be4b03c36ff7e5856"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "58969076e4b00487982d52a2"}, {"problem": 23, "code": "reduce conj nil", "user": "56a80d8fe4b07966d5a8a06a"}, {"problem": 23, "code": "(fn reverse-seq [xs] \n  (loop [xs xs\n        ys nil]\n    (if (empty? xs)\n      ys\n      (recur (rest xs) (cons (first xs) ys)))))", "user": "58bfa57ae4b021aa9917ecd8"}, {"problem": 23, "code": "(fn [args]\n    (if (empty? args)\n        []\n        (reduce conj () args)))", "user": "53882352e4b0640c7a9a5898"}, {"problem": 23, "code": "(fn [s] (apply conj nil s))", "user": "56427ec0e4b08d4f616f5f1a"}, {"problem": 23, "code": "(let [listRev (fn [xs] (reduce #(cons %2 %1) '() xs))]\n  #(if (vector? %)\n    ((comp (partial into []) listRev) %)\n    (listRev %)))", "user": "58946fa1e4b00487982d525b"}, {"problem": 23, "code": "reduce conj ()", "user": "58cd65fae4b03c36ff7e5889"}, {"problem": 23, "code": "(fn [elements] (\n    map (\n        fn [y] (nth (seq elements) y)\n    \t) \n    \t(map (\n        \tfn [x] x\n        \t) \n            (take \n            \t(count elements) (iterate dec (- (count elements) 1))\n            )\n        )\n))", "user": "58cea645e4b03c36ff7e58a6"}, {"problem": 23, "code": "(partial reduce #(cons %2 %1) '())", "user": "58cf00c8e4b03c36ff7e58ac"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "58cfbd7ae4b03c36ff7e58ba"}, {"problem": 23, "code": "reduce (fn [a b] (cons b a)) []", "user": "58462eb0e4b089d5ab817e86"}, {"problem": 23, "code": "reduce conj ()", "user": "588d224ae4b00487982d516c"}, {"problem": 23, "code": "(partial reduce conj '())", "user": "58d01845e4b03c36ff7e58c4"}, {"problem": 23, "code": "(fn recurse [coll]\n  (cond (empty? coll) ()\n   (not-empty coll) (cons (last coll) (recurse (butlast coll)))\n    ))", "user": "58cd6c57e4b03c36ff7e588b"}, {"problem": 23, "code": "reduce (fn [a b] (cons b a)) '()", "user": "58d1b2ebe4b03c36ff7e58ec"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "58d1c1b1e4b03c36ff7e58ef"}, {"problem": 23, "code": "into ()", "user": "58cc390ce4b03c36ff7e5866"}, {"problem": 23, "code": "reduce conj '()", "user": "58d27bcae4b03c36ff7e58fe"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "58d26ef7e4b03c36ff7e58fc"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "58d28c70e4b03c36ff7e5901"}, {"problem": 23, "code": "(fn rev [coll]\n   (if (last coll)\n     (cons (last coll)\n           (rev (butlast coll)))))", "user": "58c7131be4b021aa9917ed6d"}, {"problem": 23, "code": "#(reduce (fn [collector item]\n           (cons item collector))\n         [(first %)]\n         (rest %))", "user": "565ddeb9e4b068f2fe63dc2c"}, {"problem": 23, "code": "(fn[x] \n (reduce conj '() x)\n )", "user": "58ce2a80e4b03c36ff7e589d"}, {"problem": 23, "code": "into ()", "user": "58d0e919e4b03c36ff7e58d8"}, {"problem": 23, "code": "(fn rev [xs] (if (empty? xs)\n           []\n           (conj (rev (rest xs)) (first xs))))", "user": "58d2b7b3e4b03c36ff7e5908"}, {"problem": 23, "code": "(fn [x] (into () x))", "user": "585fea4de4b0f14aab7c87d0"}, {"problem": 23, "code": "(fn [x]\n  (loop [x x\n         rev '()]\n    (if (empty? x)\n      rev\n       (recur \n        (rest x)\n        (conj rev (first x))))))", "user": "589772f7e4b00487982d52be"}, {"problem": 23, "code": "(fn ff\n  ([x]\n   (ff x (empty x)))\n  ([x rvt]\n   (if (empty? x)\n   rvt\n   (recur (rest x) (concat (take 1 x) rvt)))))", "user": "58d4e73ce4b03c36ff7e594d"}, {"problem": 23, "code": "(fn [xs] \n  (reduce conj '() xs))", "user": "58d5359ce4b03c36ff7e5959"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "58d00661e4b03c36ff7e58c2"}, {"problem": 23, "code": "(fn [items] (reduce conj (list) items))", "user": "58d533fae4b03c36ff7e5958"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "58d5114de4b03c36ff7e5953"}, {"problem": 23, "code": "reduce conj '()", "user": "573946b6e4b0cd1946bd106d"}, {"problem": 23, "code": "(fn [xs] (reduce conj '() xs))", "user": "58d2bfc8e4b03c36ff7e5909"}, {"problem": 23, "code": "#(into () %)", "user": "56f3d21ae4b046a417f92055"}, {"problem": 23, "code": "#(keys (zipmap % (range 0 (- (count %)) -1)))", "user": "58d6c601e4b03c36ff7e5974"}, {"problem": 23, "code": "(fn [arg]\n  (if (= arg [1 2 3 4 5])\n    [5 4 3 2 1]\n    (if (= arg (sorted-set 5 7 2 7))\n      '(7 5 2)\n      [[5 6][3 4][1 2]])))", "user": "58cc204ce4b03c36ff7e5860"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "58d71ef5e4b03c36ff7e597f"}, {"problem": 23, "code": "reduce conj ()", "user": "57d418b4e4b0bd073c20239a"}, {"problem": 23, "code": "(fn [x] (reduce conj () x))", "user": "58d6caf5e4b03c36ff7e5975"}, {"problem": 23, "code": "#(into '() %1)", "user": "58d737cee4b03c36ff7e5982"}, {"problem": 23, "code": "(fn rev [xs] \n  (if (empty? xs) \n      xs\n      (cons (last xs) (rev (butlast xs)))))", "user": "58d63b99e4b03c36ff7e596b"}, {"problem": 23, "code": "(fn my-reverse [sq]\n  (loop [s sq, acc []]\n    (if (seq s)\n      (recur (butlast s) (conj acc (last s)))\n      acc)))", "user": "58d48df8e4b03c36ff7e5941"}, {"problem": 23, "code": "#(loop [l % acc ()]\n   (if (empty? l) acc\n     (recur (rest l) (conj acc (first l)))))", "user": "58cd4949e4b03c36ff7e5886"}, {"problem": 23, "code": "(fn reverse-func [s] (into '() s))", "user": "58d1fe17e4b03c36ff7e58f5"}, {"problem": 23, "code": "#(reduce (fn [acc elem] (conj acc elem)) '() %)", "user": "58d9d0e1e4b0a4d5acaab64a"}, {"problem": 23, "code": "(fn [x] (reduce conj '() x))", "user": "576ffcb9e4b0979f89651592"}, {"problem": 23, "code": "(partial reduce conj '())", "user": "58cfb517e4b03c36ff7e58b9"}, {"problem": 23, "code": "#(map (vec %) (range (dec (count %)) -1 -1))", "user": "58cba946e4b03c36ff7e584f"}, {"problem": 23, "code": "(fn count-items [col] \n  (loop [c col\n         reversed '()]\n         (if (empty? c)\n         \treversed         \n           (recur (rest c) (conj reversed (first c))))))", "user": "58daae01e4b0a4d5acaab664"}, {"problem": 23, "code": "#(into () %)", "user": "58d810bfe4b03c36ff7e5991"}, {"problem": 23, "code": "reduce (fn [a b](conj a b)) ()", "user": "58dace6ae4b0a4d5acaab66a"}, {"problem": 23, "code": "(fn [x]\n     ((fn [orig rev]\n         (if (empty? orig)\n             rev\n             (recur (take (- (count orig) 1) orig)\n                    (conj rev (last orig)))))\n      x []))", "user": "58dadf46e4b0a4d5acaab66b"}, {"problem": 23, "code": "#(into () %)", "user": "58db7ae7e4b0a4d5acaab67f"}, {"problem": 23, "code": "(fn [x] (map #(nth (vec x) %) (range (- (count x) 1) -1 -1)))", "user": "588906a9e4b0f1effa3b772a"}, {"problem": 23, "code": "(fn [coll]\n    (loop [converted_collection (vec coll)\n           reversed_collection []\n           counter (- (count converted_collection) 1)]\n        (if (= counter 0)\n            (conj reversed_collection (first converted_collection))\n            (recur converted_collection (conj reversed_collection (nth converted_collection counter)) (dec counter)))\n))", "user": "5885eb2de4b0f1effa3b76c6"}, {"problem": 23, "code": "#(reduce (fn [acc x]\n           (cons x acc))\n         (empty %)\n         %)", "user": "5870851de4b01531a375e9e8"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "58bc0531e4b0888cdc949d07"}, {"problem": 23, "code": "(fn [list]\n(loop [l list reversed '()]\n(if (empty? l)\nreversed\n(recur (rest l) (conj reversed (first l))))))", "user": "58dc5773e4b0a4d5acaab69a"}, {"problem": 23, "code": "(fn reverse-sequence [x]\n  (loop [x x\n         reversed ()]\n    (if (= () x)\n      reversed\n      (recur (rest x) (cons (first x) reversed)))))", "user": "58dcb8cde4b0a4d5acaab6a7"}, {"problem": 23, "code": "reduce #(cons %2 %1) []", "user": "58db3c5ae4b0a4d5acaab677"}, {"problem": 23, "code": "(fn [coll]\n  (reduce (fn [r n] (cons n r)) \n          (list)\n          coll))", "user": "58dc81d1e4b0a4d5acaab69e"}, {"problem": 23, "code": "reduce conj '()", "user": "58dcf11ae4b0a4d5acaab6af"}, {"problem": 23, "code": "(fn rv [x]\n  (loop [s x\n         n []]\n    (if (empty? (rest s))\n      (cons (first s) n)\n      (recur (rest s) (cons (first s) n)))))", "user": "58d4f44ee4b03c36ff7e594f"}, {"problem": 23, "code": "(fn rev [x] (if (nil? x) nil (conj (rev (butlast x)) (last x))))", "user": "5568749ae4b0c656e3ff1854"}, {"problem": 23, "code": "reduce (fn [acc v] (conj acc v)) (list)", "user": "4e6a676b535d8ccf87e9fedd"}, {"problem": 23, "code": "into '()", "user": "58ddac2ce4b0a4d5acaab6d6"}, {"problem": 23, "code": "(fn [x] (reduce conj '() x))", "user": "58dbfb24e4b0a4d5acaab690"}, {"problem": 23, "code": "#(loop [v % c []]\n   (if (seq v)\n     (recur (rest v) (cons (first v) c))\n     c))", "user": "58dcae01e4b0a4d5acaab6a4"}, {"problem": 23, "code": "#(into () %)", "user": "58dec7e8e4b0a4d5acaab6ff"}, {"problem": 23, "code": "reduce (fn [acc val]\n         (conj acc val)) '()", "user": "58df05ffe4b0a4d5acaab706"}, {"problem": 23, "code": "reduce #(conj %1 %2) '()", "user": "58dede54e4b0a4d5acaab702"}, {"problem": 23, "code": "#(loop [acc '() lst %]                                                                     \n    (if (empty? lst)                                                                       \n      acc                                                                                   \n      (recur                                                                               \n        (conj acc (first lst))                                                             \n        (rest lst))))", "user": "58dacc7be4b0a4d5acaab669"}, {"problem": 23, "code": "reduce conj ()", "user": "58e0376ce4b0a4d5acaab732"}, {"problem": 23, "code": "#(loop [i % result nil]\n   (if (nil? (first i))\n     result\n     (recur (rest i) (cons (first i) result))))", "user": "57dd651ee4b0bd073c202441"}, {"problem": 23, "code": "(fn [x]\n  (reduce conj () x))", "user": "58e14302e4b005f69f193c78"}, {"problem": 23, "code": "(fn [l] (reduce conj '() l))", "user": "539a4213e4b0b51d73faaf11"}, {"problem": 23, "code": "#(loop [l %\n        acc []]\n   (if (empty? l)\n     acc\n     (recur (rest l) (cons (first l) acc))))", "user": "58e17578e4b005f69f193c7f"}, {"problem": 23, "code": "(fn revit [li]\n         (do\n           (println (str li))\n           (if (> 2 (count li))\n             li\n             (concat (revit (rest li)) (list (first li))))))", "user": "58e18fdae4b005f69f193c80"}, {"problem": 23, "code": "into ()", "user": "58e15bfde4b005f69f193c7a"}, {"problem": 23, "code": ";#(map(take (count %) %))\n;#((sort > %))\n;(sort #(compare %2 %1) coll)\n;(sort (fn [%1 %2 coll](compare %1 %2) coll))\n#(sort (comp - compare) %)", "user": "58dd21a9e4b0a4d5acaab6b3"}, {"problem": 23, "code": "(fn [seq]\n  (loop [seq seq r []]\n    (if-not (empty? seq)\n      (recur (rest seq) (into [(first seq)] r))\n      r)))", "user": "58de563fe4b0a4d5acaab6e3"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "58e0ca7be4b005f69f193c6c"}, {"problem": 23, "code": "(fn my-reverse\n  ([xs] (my-reverse '() xs))\n  ([reversed xs]\n   (if (empty? xs)\n     reversed\n     (recur (conj reversed (first xs)) (rest xs)))))", "user": "58db097fe4b0a4d5acaab66f"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "58e256e1e4b005f69f193c90"}, {"problem": 23, "code": "(fn [coll]\n      (reduce #(cons %2 %1) [] coll))", "user": "58d3d6a3e4b03c36ff7e592b"}, {"problem": 23, "code": "reduce conj ()", "user": "58de94e2e4b0a4d5acaab6f4"}, {"problem": 23, "code": "(fn my-rev\n  [nums]\n  (if (empty? (rest nums))\n    nums\n    (cons (last nums) (my-rev (drop-last nums)))))", "user": "58e45a2ce4b056aecfd47c69"}, {"problem": 23, "code": "(partial reduce #(cons %2 %1) [] )", "user": "58e37946e4b005f69f193cae"}, {"problem": 23, "code": "reduce #(conj %1 %2) '()", "user": "58e4cf92e4b056aecfd47c77"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "58e51bc5e4b056aecfd47c86"}, {"problem": 23, "code": "#(into () %)", "user": "58e52e99e4b056aecfd47c8d"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "58a32c21e4b02bd94d917eeb"}, {"problem": 23, "code": "reduce conj '()", "user": "56ca2f25e4b0ea9b8538f716"}, {"problem": 23, "code": "(fn my-rev\n  [x]\n  (loop [r x\n         z '()]\n    (if (next r)\n      (recur (next r) (conj z (first r)))\n      (conj z (first r)))))", "user": "58e53760e4b056aecfd47c8f"}, {"problem": 23, "code": "(fn [coll]\n  (reduce conj '() coll))", "user": "58e2e11ce4b005f69f193ca0"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "58e58ae9e4b056aecfd47c9a"}, {"problem": 23, "code": "into ()", "user": "58e5fbbae4b056aecfd47ca6"}, {"problem": 23, "code": "(fn [lst]\n  (loop [builder []\n         l lst]\n    (if (empty? l)\n      builder\n      (recur (conj builder (last l)) (butlast l)))))", "user": "58e56154e4b056aecfd47c92"}, {"problem": 23, "code": "(fn rev [lst]\n  (reduce conj `() lst))", "user": "58e63de2e4b056aecfd47cad"}, {"problem": 23, "code": "(fn [x]\n  (reduce conj () x))", "user": "58e5e585e4b056aecfd47ca2"}, {"problem": 23, "code": "reduce conj ()", "user": "58e7229fe4b056aecfd47cc4"}, {"problem": 23, "code": "reduce conj '()", "user": "58e762d3e4b056aecfd47ccc"}, {"problem": 23, "code": "(fn [x] (loop [reversed '() y x] (if (empty? y) reversed (recur (conj reversed (first y)) (rest y)))))", "user": "58e6a2c5e4b056aecfd47cba"}, {"problem": 23, "code": "(fn custom_reverse [list] (\n                         if (= list '())\n                         []\n                         (conj  (custom_reverse (rest list)) (first list))\n                         )\n  )", "user": "58e8014be4b056aecfd47ce1"}, {"problem": 23, "code": "(fn rev [coll]\n\t\t(if (= (next coll) nil)\n\t    (list (first coll))\n\t    (concat\n\t\t\t(rev (next coll))\n\t\t\t(list (first coll)))))", "user": "58e836c9e4b056aecfd47ce8"}, {"problem": 23, "code": "(fn myreverse [coll] (reduce (fn [reversed element] (conj reversed element)) `() coll))", "user": "58e92d62e4b056aecfd47d05"}, {"problem": 23, "code": "#(reduce (fn [a c] (conj a c)) () %)", "user": "58acca5ee4b0005cfeb1a753"}, {"problem": 23, "code": "(fn reverse_ [collection]\n  (cond\n    (= (count collection) 0) (list)\n    (= (count collection) 1) (list (first collection))\n    :else (concat\n        (reverse_ (rest collection))\n        (list (first collection)))))", "user": "58e980dfe4b056aecfd47d0b"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "58e5f995e4b056aecfd47ca5"}, {"problem": 23, "code": "(fn revers\n  ([col] (revers col '() ))\n  ([col rev] (if (seq col) (revers (rest col) (conj rev (first col))) rev) ))", "user": "58dd2c02e4b0a4d5acaab6b8"}, {"problem": 23, "code": "#(loop [restdata % revlist '()]\n   (let [curdata (first restdata)]\n   \t (if (empty? restdata)\n       revlist\n       (recur (rest restdata) (conj revlist curdata)))))", "user": "58ea39c6e4b056aecfd47d19"}, {"problem": 23, "code": "(fn [coll]\n  (loop [coll coll z ()]\n    (if coll\n      (recur (next coll)\n             (conj z (first coll)))\n      z)))", "user": "58ebae90e4b056aecfd47d44"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "58eba5cce4b056aecfd47d41"}, {"problem": 23, "code": "(fn [s]\n    (loop [head (first s) tail (rest s) values '()]\n      (if (empty? tail)\n        (conj values head)\n        (recur (first tail) (rest tail) (conj values head)))))", "user": "58ec1e63e4b056aecfd47d54"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "58e965b3e4b056aecfd47d08"}, {"problem": 23, "code": "reduce conj ()", "user": "58ec8c7ae4b056aecfd47d64"}, {"problem": 23, "code": "reduce conj ()", "user": "58ebd10de4b056aecfd47d49"}, {"problem": 23, "code": "(fn my-reverse [coll]\n  (into '() coll))", "user": "58ed713de4b056aecfd47d84"}, {"problem": 23, "code": "#(into '() %)", "user": "58ed8f4ce4b056aecfd47d86"}, {"problem": 23, "code": "#(reduce (fn [t v] (cons v t)) '() %)", "user": "58edaa3be4b056aecfd47d89"}, {"problem": 23, "code": "reduce conj '()", "user": "58ea778be4b056aecfd47d1e"}, {"problem": 23, "code": "#(loop [seq % out '()]\n   (if (first seq)\n     (recur (rest seq) (conj out (first seq)))\n            out))", "user": "58e667e7e4b056aecfd47cb3"}, {"problem": 23, "code": "(fn rev [s] (if (empty? s) s (cons (last s) (rev (butlast s)))))", "user": "58d96bdce4b0a4d5acaab638"}, {"problem": 23, "code": "(fn [sequence]\n   (loop [s sequence acc []]\n     (if (seq s)\n       (recur (rest s) (cons (first s) acc))\n       acc)))", "user": "58447708e4b089d5ab817e4b"}, {"problem": 23, "code": "(fn [coll] (reduce (fn [acc item] (conj acc item)) '() coll))", "user": "58ee5371e4b056aecfd47da8"}, {"problem": 23, "code": "#(loop [x % r []] (if (empty? x) r (recur (rest x) (concat [(first x)] r))))", "user": "58e6b788e4b056aecfd47cbd"}, {"problem": 23, "code": "#(into '() %)", "user": "58eeea61e4b056aecfd47dbc"}, {"problem": 23, "code": "#(reduce (fn [a b] (cons b a)) [] %)", "user": "58ef0b8ce4b056aecfd47dbf"}, {"problem": 23, "code": "(fn [s]\n  (into '() s))", "user": "58ee9b14e4b056aecfd47db0"}, {"problem": 23, "code": "(fn rev [data]\n  (if (empty? data)\n    data\n    (concat (rev (rest data))  (list (first data)))))", "user": "58ee2c14e4b056aecfd47d9e"}, {"problem": 23, "code": "#(into [] (reduce conj () %))", "user": "58eed4c5e4b056aecfd47db7"}, {"problem": 23, "code": "reduce conj '()", "user": "58ee0bb6e4b056aecfd47d97"}, {"problem": 23, "code": "(fn [list]\n  (loop [unmapped list reversed '()]\n    (if (empty? unmapped)\n      reversed\n      (recur (rest unmapped) (conj reversed (first unmapped))))))", "user": "58f00639e4b056aecfd47ddc"}, {"problem": 23, "code": "#(into [] (reduce conj () %))", "user": "58eb11afe4b056aecfd47d29"}, {"problem": 23, "code": "(fn\n      [sequence]\n      (loop [local-seq (seq sequence)\n             reversed-seq []\n             id (dec (count sequence))]\n        (if (empty? local-seq)\n          reversed-seq\n          (recur (rest local-seq) (conj reversed-seq (first (drop id sequence))) (dec id))\n        )))", "user": "582c203ae4b051871117bf80"}, {"problem": 23, "code": "#(into '() %)", "user": "58d5c245e4b03c36ff7e5964"}, {"problem": 23, "code": "(partial into ())", "user": "5782018de4b0d36ec5835e8e"}, {"problem": 23, "code": "reduce conj ()", "user": "58e48735e4b056aecfd47c6e"}, {"problem": 23, "code": "#(loop [in %1\n         out ()] \n            (if (empty? in)\n              (vec out)\n              (recur (rest in)\n                (conj out \n                  (first in)))))", "user": "5895385fe4b00487982d5279"}, {"problem": 23, "code": "#(loop [in %1 out nil]\n   (if (seq in)\n     (recur (rest in) (conj out (first in)))\n     out))", "user": "58954772e4b00487982d527b"}, {"problem": 23, "code": "#(loop [col % res (list)] (if (empty? col) res (recur (rest col) (conj res (first col)))))", "user": "58f25609e4b08e1cf3471cff"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "58f273d9e4b08e1cf3471d01"}, {"problem": 23, "code": "(fn [S] (reduce #(cons %2 %1) '() S))", "user": "58e7eba2e4b056aecfd47cdf"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "58bcea23e4b0888cdc949d23"}, {"problem": 23, "code": "(fn [x] \n  (loop [s (vec x) finals []]\n   (if (not (empty? s))\n    (recur (subvec s 0 (dec (count s))) (conj finals (get s (dec (count s)))))\n    finals\n    )\n   )\n  )", "user": "58ee51a4e4b056aecfd47da6"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "58f3e4aee4b0438e51c2ceb0"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "58f350d7e4b0438e51c2ce9e"}, {"problem": 23, "code": "#(into () %)", "user": "58f45ea0e4b0438e51c2cebc"}, {"problem": 23, "code": "reduce conj ()", "user": "58f49268e4b0438e51c2cec0"}, {"problem": 23, "code": "(fn [n] (let [n (vec n)\n              nums (range (dec (count n)) -1 -1)] (map #(get n %1) nums)))", "user": "4f528f70e4b03ad3f0c10d3f"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "58f5689de4b0438e51c2ced7"}, {"problem": 23, "code": "#(reduce (fn [x y] (conj x y)) '() %)", "user": "58eac340e4b056aecfd47d24"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "58ef4db9e4b056aecfd47dc6"}, {"problem": 23, "code": "#(into '() %)", "user": "58f75bf8e4b0438e51c2cf13"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "58f2e8fbe4b0438e51c2ce94"}, {"problem": 23, "code": "reduce conj ()", "user": "5567f164e4b0c656e3ff184d"}, {"problem": 23, "code": "#(apply conj '() %)", "user": "589b98fae4b00487982d533c"}, {"problem": 23, "code": "#(loop [coll %\n        result '()]\n   (if (not-empty coll)\n     (recur (rest coll)\n            (conj result (first coll)))\n     result))", "user": "58ed0198e4b056aecfd47d72"}, {"problem": 23, "code": "reduce conj ()", "user": "58f7dfe6e4b0438e51c2cf1f"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "58ef93ece4b056aecfd47dca"}, {"problem": 23, "code": "reduce (fn rev [col, e] (conj col e)) '()", "user": "58ebcabee4b056aecfd47d48"}, {"problem": 23, "code": "(fn [x] (reduce #(cons %2 %1) () x))", "user": "58fb5a03e4b0438e51c2cf77"}, {"problem": 23, "code": "reduce conj '()", "user": "5054d243e4b0b1b9d1860eb5"}, {"problem": 23, "code": "(partial reduce conj ())", "user": "58fb7d7ae4b0438e51c2cf7a"}, {"problem": 23, "code": "#(into () %)", "user": "58f3a2d4e4b0438e51c2ceac"}, {"problem": 23, "code": "(fn [coll] (reduce #(concat [%2] %1) [] coll))", "user": "58fc92c5e4b0438e51c2cf9a"}, {"problem": 23, "code": "(fn backwards [list]\n  (if (empty? list)\n      []\n    (conj (backwards (rest list)) (first list))))", "user": "58fb87efe4b0438e51c2cf7b"}, {"problem": 23, "code": "(fn [c]\n  (reduce (fn[acc x] (cons x acc)) [] c)\n  )", "user": "58ec5e86e4b056aecfd47d5f"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "53dbca12e4b094d41abdfef6"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "56c12aa2e4b0839206b9d682"}, {"problem": 23, "code": "reduce conj ()", "user": "58f90aa2e4b0438e51c2cf41"}, {"problem": 23, "code": "(fn rv [s]\n  (if (empty? s)\n    []\n    (conj (rv (rest s)) (first s))))", "user": "57ffd1a9e4b0a837a8b30c2a"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "52aea49ce4b0c58976d9acad"}, {"problem": 23, "code": "(fn rev [s] (if (not (nil? s))\n              (conj (rev (butlast s)) (last s))))", "user": "58f8d79ee4b0438e51c2cf39"}, {"problem": 23, "code": "#(into () (vec %))", "user": "58fdbf59e4b0438e51c2cfbc"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "58fe40afe4b0438e51c2cfca"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "58fe8b36e4b0438e51c2cfd9"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "58ff76a5e4b0438e51c2cff2"}, {"problem": 23, "code": "reduce conj '()", "user": "58f44c07e4b0438e51c2ceb7"}, {"problem": 23, "code": "(fn [coll]\n  (loop [coll coll\n         acc (list)]\n    (if (empty? coll)\n      acc\n      (recur (rest coll) (conj acc (first coll))))))", "user": "58ffac9de4b0438e51c2cffd"}, {"problem": 23, "code": "(fn [s]\n    (loop [s (seq s)\n           result '()]\n      (if (empty? s)\n        result\n        (recur (rest s) (conj result (first s))))))", "user": "58fff18be4b0438e51c2d00c"}, {"problem": 23, "code": "(fn [input]\n\t(reduce conj '() input))", "user": "58ffbabce4b0438e51c2d002"}, {"problem": 23, "code": "reduce (fn [revs x] (conj revs x)) '()", "user": "58ffbfbbe4b0438e51c2d004"}, {"problem": 23, "code": "#(into '() %)", "user": "590088bfe4b0438e51c2d026"}, {"problem": 23, "code": "#(reduce conj () (sort %))", "user": "58fd4c41e4b0438e51c2cfae"}, {"problem": 23, "code": "(fn [l]  ((fn [s r] (if (empty? s) r (recur (rest s)   (cons (first s) r)))) (apply list l) nil))", "user": "58fdd7b7e4b0438e51c2cfc0"}, {"problem": 23, "code": "(fn [s] (reduce #(cons %2 %1) '() s))", "user": "5901158de4b0438e51c2d039"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "58fd82a8e4b0438e51c2cfb5"}, {"problem": 23, "code": "(fn f\n         ([s1] (f s1 []))\n\t       ([s1 s2]\n            (if (empty? s1)\n              s2\n              (recur (rest s1) (cons (first s1) s2)))))", "user": "59005094e4b0438e51c2d01e"}, {"problem": 23, "code": "(fn [x] (reduce (fn [reversed, i] (concat [i] reversed)) [] x))", "user": "54b8fea9e4b0ed20f4ff6e9c"}, {"problem": 23, "code": "(fn mrev ([c] (into () c)))", "user": "5900d5cde4b0438e51c2d02e"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "59024826e4b0438e51c2d053"}, {"problem": 23, "code": "(fn [lst]\n  (loop [i lst acc '()]\n    (cond (empty? i) acc\n          :t (recur (rest i) (concat [(first i)] acc)))))", "user": "590273e1e4b0438e51c2d059"}, {"problem": 23, "code": "into '()", "user": "5900ad0ce4b0438e51c2d028"}, {"problem": 23, "code": "(fn\n [xs]\n (reduce conj () xs)\n)", "user": "58f774dee4b0438e51c2cf15"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "59035914e4b022d14a2aafaa"}, {"problem": 23, "code": "#(into '() %)", "user": "590368afe4b022d14a2aafac"}, {"problem": 23, "code": "(fn [c] (reduce conj () c))", "user": "58f3c18ee4b0438e51c2cead"}, {"problem": 23, "code": "(fn [xs] (reduce conj '() xs))", "user": "58eadeafe4b056aecfd47d28"}, {"problem": 23, "code": "#(loop [s % rev '()] \n  (if (empty? s)\n    rev\n    (recur (rest s) (conj rev (first s)))\n  )\n)", "user": "59073e0fe4b047aa04b19950"}, {"problem": 23, "code": "(fn rev \n  ([forward backward] \n    (if \n      (= 0 (count forward)) \n      backward \n      (rev \n        (pop forward) \n        (conj backward (peek forward))\n      )\n    )\n  )\n  ([forward] (rev (into [] forward) [])))", "user": "5906d7e9e4b047aa04b1993f"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "59075e3be4b047aa04b19955"}, {"problem": 23, "code": "reduce conj '()", "user": "59032c0fe4b022d14a2aaf9f"}, {"problem": 23, "code": "(fn reverse-the-set\n  [forward-set]\n  (loop [remaining-set forward-set\n         backward-set []]\n    (if (empty? remaining-set)\n      backward-set\n      (recur (rest remaining-set)\n             (cons (first remaining-set) backward-set)))))", "user": "59077d7be4b047aa04b1995b"}, {"problem": 23, "code": "into ()", "user": "5907af21e4b047aa04b19961"}, {"problem": 23, "code": "(fn [x] (reduce #(conj %1 %2) '() x))", "user": "5907f751e4b047aa04b1996c"}, {"problem": 23, "code": "(fn rv [lst] (if (= (count lst) 1) lst (cons (last lst) (rv (butlast lst)))))", "user": "59078134e4b047aa04b1995c"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "59085adfe4b047aa04b19972"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "59074b7ce4b047aa04b19951"}, {"problem": 23, "code": "(fn [coll]\n  (loop [r (rest coll)\n         acc (conj () (first coll))]\n    (if (= (count r) 0)\n      acc\n      (recur (rest r) (conj acc (first r))))))", "user": "59096794e4b047aa04b1999e"}, {"problem": 23, "code": "#(reduce (fn [acc x]\n           (cons x acc))\n         (empty %) %)", "user": "590a30f8e4b047aa04b199ae"}, {"problem": 23, "code": "(fn my-reverse [s]\n    (if (= s '())\n      s\n      (concat (my-reverse (rest s)) (list (first s)))))", "user": "59095df7e4b047aa04b1999b"}, {"problem": 23, "code": "(fn [s] (into () s))", "user": "584948fce4b089d5ab817ecc"}, {"problem": 23, "code": "#(reduce conj '() %1)", "user": "576aea4fe4b0a07e8fc18126"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "572ad0fde4b0f4d77e651244"}, {"problem": 23, "code": "(fn [input-list]\n   (reduce conj '() input-list)\n   )", "user": "5909b3f8e4b047aa04b199a4"}, {"problem": 23, "code": "(fn [l]\n  (reduce (fn [res it] (cons it res)) `() l))", "user": "590b3aeae4b047aa04b199d0"}, {"problem": 23, "code": "(fn [s] (reduce #(cons %2 %1) '() s))", "user": "590b055ae4b047aa04b199c9"}, {"problem": 23, "code": "#(into () %)", "user": "590d0b3fe4b047aa04b199f9"}, {"problem": 23, "code": "reduce conj ()", "user": "58f9fde7e4b0438e51c2cf56"}, {"problem": 23, "code": "#(into () %)", "user": "590d0c31e4b047aa04b199fb"}, {"problem": 23, "code": "(fn refSeq [lst]\n  (loop [orig lst dst '()]\n    (if (= (first orig) nil)\n      (if (list? orig)\n        dst ; i want to control things in list.\n        (vec dst)) ; converrt from list to vector\n      (recur\n       (if (list? orig) (rest orig) (vec (rest orig)))\n       (conj dst (first orig))))))", "user": "590d715ae4b047aa04b19a05"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "590e588ce4b047aa04b19a23"}, {"problem": 23, "code": "#(into () %)", "user": "590f283de4b047aa04b19a35"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "590d0bc8e4b047aa04b199fa"}, {"problem": 23, "code": "(fn [lat]\n  (into '() lat))", "user": "591072e0e4b0163c97b36ebc"}, {"problem": 23, "code": "(fn [coll] (reduce conj '() coll))", "user": "5259451ce4b0cb4875a45cd7"}, {"problem": 23, "code": "(fn [arr]\n    (loop [a arr ret []]\n          (if (empty? a)\n              ret\n              (recur (rest a)\n                     (cons (first a) ret)))))", "user": "58d9772de4b0a4d5acaab63c"}, {"problem": 23, "code": "into ()", "user": "53d5d43ce4b0e771c302544d"}, {"problem": 23, "code": "reduce #(cons %2 %1) []", "user": "5910a43de4b0163c97b36ebf"}, {"problem": 23, "code": "#(into () %)", "user": "58e5180ae4b056aecfd47c82"}, {"problem": 23, "code": "(fn rev [lst] (reduce (fn [elems b] (cons b elems)) [] lst))", "user": "5912477be4b0163c97b36eec"}, {"problem": 23, "code": "(fn recrev [x] (if (= (count x) 1) \n                 x \n                 (conj (recrev (butlast x)) (last x))\n                 )\n  )", "user": "59129074e4b0163c97b36ef1"}, {"problem": 23, "code": "into '()", "user": "58f286e1e4b08e1cf3471d04"}, {"problem": 23, "code": "reduce conj ()", "user": "591326f2e4b0163c97b36efc"}, {"problem": 23, "code": "(fn [x] ( (fn [y a] (if (empty? y) a (recur (rest y) (conj a  (first y)) ))) x nil))", "user": "4f7121cae4b07046d9f4f007"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5913375de4b0163c97b36efe"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "59131299e4b0163c97b36ef9"}, {"problem": 23, "code": "(fn rev [x]\n  (when (not (empty? x))\n        (println x,(butlast x))\n    (conj (rev(butlast x)) (last x))))", "user": "58ffaddee4b0438e51c2cffe"}, {"problem": 23, "code": "(fn rev [s] (if (empty? (rest s)) [(first s)] (conj (rev (rest s)) (first s))))", "user": "569f6ab8e4b0542e1f8d1493"}, {"problem": 23, "code": "(fn [s] (reduce #(conj %1 %2) '() s))", "user": "591315a6e4b0163c97b36efa"}, {"problem": 23, "code": "(fn this [x]\n  (cond\n   (= () x) []\n   :else (conj (this (rest x)) (first x))\n   )\n  )", "user": "59165082e4b09b4ee5954b88"}, {"problem": 23, "code": "#(into () %)", "user": "5916eb48e4b09b4ee5954b95"}, {"problem": 23, "code": "(fn rev [li]\n  (loop [rst li res '()]\n          (if (empty? rst)\n              res\n              (recur (rest rst) (cons (first rst) res)))))", "user": "59156f0be4b0163c97b36f3d"}, {"problem": 23, "code": "(fn [n]\n  (loop [current n\n         new []]\n    (if (= 0 (count current)) \n      (into current new)\n      (recur (rest current) (conj new (first current)))\n    )\n  )\n)", "user": "5822b578e4b04b46fc4b0fa4"}, {"problem": 23, "code": "reduce conj ()", "user": "5907a736e4b047aa04b1995e"}, {"problem": 23, "code": "reduce (fn [lst x] (cons x lst)) []", "user": "5622042ae4b03f08ee9a9221"}, {"problem": 23, "code": "(fn [in] \n   (loop [ret '() \n          i in] \n     (if (= 0 (count i)) \n       ret \n       (recur (concat ret (list (last i))) \n              (take (- (count i) 1) i)))))", "user": "5918db70e4b09b4ee5954bbb"}, {"problem": 23, "code": "(fn[coll](reduce #(conj %1 %2)'()coll))", "user": "59199cc3e4b09b4ee5954bc8"}, {"problem": 23, "code": "(fn [coll]\n  (loop [remaining coll result '()]\n    (if (seq remaining)\n      (recur (rest remaining) (conj result (first remaining)))\n      result)))", "user": "58b0bbc5e4b0ebc645576ce6"}, {"problem": 23, "code": "#(into () %)", "user": "51b20b76e4b02f8f128bb960"}, {"problem": 23, "code": "apply conj '()", "user": "5916412ee4b09b4ee5954b87"}, {"problem": 23, "code": "#(into () %)", "user": "5914614ce4b0163c97b36f23"}, {"problem": 23, "code": "(fn [lst]\n  (into '() lst))", "user": "591ac8ece4b09b4ee5954bdd"}, {"problem": 23, "code": "(fn rr [coll] (map #(nth %1 1) (sort #(> (first %1) (first %2)) (map-indexed list coll))))", "user": "5919d209e4b09b4ee5954bcc"}, {"problem": 23, "code": "(fn [coll] (reduce (fn [acc unit] (cons unit acc)) [] coll))", "user": "57f2bf56e4b0511f1d294df8"}, {"problem": 23, "code": "into '()", "user": "591c2f4ee4b09b4ee5954bfc"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "591cc30be4b09b4ee5954c0a"}, {"problem": 23, "code": "(fn [x] (reduce conj '() x))", "user": "591cbc30e4b09b4ee5954c08"}, {"problem": 23, "code": "reduce #(into [%2] %1) []", "user": "59175adde4b09b4ee5954b9a"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "591ed05de4b09b4ee5954c3a"}, {"problem": 23, "code": "(fn test [sq]\n  (reduce \n    (fn [prev, neu] (conj prev neu))\n        '()sq\n  )\n)", "user": "591d320ee4b09b4ee5954c12"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "591e1eb7e4b09b4ee5954c2b"}, {"problem": 23, "code": "(fn [s]\n  (loop [existing-seq s new-seq ()]\n    (if (empty? existing-seq)\n                   new-seq\n               (recur (rest existing-seq) (conj new-seq (first existing-seq))))))", "user": "5903f0cde4b022d14a2aafb9"}, {"problem": 23, "code": "#(apply (partial conj '()) %)", "user": "591f05b4e4b09b4ee5954c42"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "4f29d9abe4b0d6649770a034"}, {"problem": 23, "code": "(fn reverse-a-sequence-solution\n  [col]\n  (reduce \n    (fn [acc_col val]\n      (cons val acc_col)  \n    ) [] col\n  )\n)", "user": "57fa06c9e4b0d3187e900958"}, {"problem": 23, "code": "(fn [values]\n  (loop [remaining-values values mapped-values '()]\n    (if (empty? remaining-values)\n      mapped-values\n      (recur (rest remaining-values)\n             (conj mapped-values (first remaining-values))))))", "user": "5911aa1de4b0163c97b36ed8"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5921084be4b09b4ee5954c6c"}, {"problem": 23, "code": "(fn rev [col] (if (empty? col) [] (cons (last col) (rev (take (dec (count col)) col)))))", "user": "591e7bd4e4b09b4ee5954c34"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "591f63e6e4b09b4ee5954c47"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "591aceeee4b09b4ee5954bde"}, {"problem": 23, "code": "(fn rev [s] (if (> (count s) 1)\n      (concat (rev (rest s)) [(first s)])  \n      s  \n  )\n)", "user": "592018d2e4b09b4ee5954c55"}, {"problem": 23, "code": "(fn [x]\n  (loop [in x\n         out []]\n    (if (empty? in)\n      out\n      (recur (butlast in) (conj out (last in))))))", "user": "4f6a90f4e4b07046d9f4ef9d"}, {"problem": 23, "code": "#(loop [s % r []] \n   (if (not-empty s) (recur (rest s) (cons (first s) r))\n     r))", "user": "590253e3e4b0438e51c2d055"}, {"problem": 23, "code": "(fn a [s]\n  (if (not (seq s))\n    nil\n    (concat (a (rest s)) [(first s)])))", "user": "5921a080e4b09b4ee5954c77"}, {"problem": 23, "code": "(fn [coll] (reduce conj () coll))", "user": "5921a65be4b09b4ee5954c79"}, {"problem": 23, "code": "(fn [x] (into () x))", "user": "59223307e4b09b4ee5954c86"}, {"problem": 23, "code": "(fn[collection] (loop [reversed '(), x collection] (if (= x '())  reversed (recur (conj reversed (first x)) (rest x)))))", "user": "59228b00e4b026ae38521281"}, {"problem": 23, "code": "(fn [x]\n  (loop [r (rest x)\n        acc (conj () (first x))]\n   (if (= (count r) 0)\n     acc\n     (recur (rest r)(conj acc (first r))))))", "user": "590cb27de4b047aa04b199ee"}, {"problem": 23, "code": "(fn [coll]\n  (loop [coll coll, result '()]\n    (let [head (first coll)]\n      (if (nil? head) \n        result\n        (recur (rest coll) (conj result head))))))", "user": "59225498e4b09b4ee5954c8c"}, {"problem": 23, "code": "(fn [x]\n  (reduce into (partition 1 x)))", "user": "591f5124e4b09b4ee5954c45"}, {"problem": 23, "code": "reduce conj '()", "user": "5922a36ce4b026ae38521285"}, {"problem": 23, "code": "reduce conj '()", "user": "52d9e126e4b09f7907dd13b1"}, {"problem": 23, "code": "(fn [coll] (reduce conj '() coll))", "user": "5911dc6de4b0163c97b36ede"}, {"problem": 23, "code": "#(into '() %)", "user": "591e0782e4b09b4ee5954c25"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "58d2af83e4b03c36ff7e5907"}, {"problem": 23, "code": "(fn [x] (loop [index 0 generatedColl '() currentColl x] (if (= index (count x)) generatedColl (recur (+ 1 index) (list* (first currentColl) generatedColl) (rest currentColl)))))", "user": "5924009ce4b072a2710fce45"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "58e0a760e4b005f69f193c69"}, {"problem": 23, "code": "(fn get-reverse [list]\n   (if (= '() (rest list))\n     ;; (cons\n     ;;  (last list)\n     list\n     (cons\n      (last list)\n      (get-reverse\n       (butlast list)))))", "user": "59273eefe4b072a2710fcec6"}, {"problem": 23, "code": "reduce #(conj %1 %2) '()", "user": "5923554ee4b0a390037439f2"}, {"problem": 23, "code": "#(into '() %)", "user": "59279a89e4b072a2710fced3"}, {"problem": 23, "code": "; into ()\n; reduce conj ()\n; reduce conj nil\n; apply conj nil \n; apply conj '()\n\n; reduce #(cons %2 %1) ()\n\n;;(fn rev [r] (if (empty? r) r \n;;  (cons (last r) (rev (drop-last r)))))\n\n;;(fn rev [r] (if (empty? r) r \n;;   (cons (last r) (rev (butlast r)))))\n\n#(loop [m % s ()] (if (empty? m) s\n  (recur (rest m) (cons (first m) s))))", "user": "591d182ee4b09b4ee5954c10"}, {"problem": 23, "code": "into ()", "user": "5915a0a5e4b09b4ee5954b73"}, {"problem": 23, "code": "(fn my-reverse\n  ([s] (my-reverse s []))\n  ([s r] (if (empty? s) r (recur (butlast s) (conj r (last s))))))", "user": "59234753e4b0a390037439ef"}, {"problem": 23, "code": "(fn [li]\n  (reduce conj () li))", "user": "590935aee4b047aa04b19993"}, {"problem": 23, "code": "reduce conj ()", "user": "59258aa7e4b072a2710fce74"}, {"problem": 23, "code": "(fn rev [seq] (if (= (first seq) nil) nil (conj (rev (take (dec (count seq)) seq)) (last seq))))", "user": "56ffeafee4b08d47c97781c2"}, {"problem": 23, "code": "#(into '() %)", "user": "5929a5f2e4b072a2710fcf09"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5929bdf6e4b072a2710fcf0c"}, {"problem": 23, "code": "#((fn [col\n     rev]\n  (if (nil? (first col))\n    rev\n    (recur (rest col) (conj rev (first col)))\n  )\n) % '())", "user": "5922f8a9e4b026ae3852128f"}, {"problem": 23, "code": "reduce conj ()", "user": "592af53be4b072a2710fcf2b"}, {"problem": 23, "code": "reduce conj ()", "user": "592af6eee4b072a2710fcf2c"}, {"problem": 23, "code": "into '()", "user": "592518e8e4b072a2710fce67"}, {"problem": 23, "code": "(fn rev\n   ([s] (rev '() s)) \n   ([r s] (if (seq s) (rev (cons (first s) r) (rest s)) r )))", "user": "59273d74e4b072a2710fcec4"}, {"problem": 23, "code": "(fn [lat] (into '() lat))", "user": "592519cfe4b072a2710fce6b"}, {"problem": 23, "code": "(fn r [x] (\n           if (empty? x)\n             []\n             (conj (r (rest x)) (first x))\n           )\n  )", "user": "592ac550e4b072a2710fcf27"}, {"problem": 23, "code": "(fn [s]\n  (reduce #(cons %2 %1) nil s))", "user": "592be28ae4b072a2710fcf49"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "592518bfe4b072a2710fce65"}, {"problem": 23, "code": "#(loop [seq [] input %1]\n    (if (= (count input) 0)\n      seq\n      (recur (cons (first input) seq) (rest input))))", "user": "5901731ae4b0438e51c2d03d"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "59251947e4b072a2710fce69"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "592edaf5e4b072a2710fcfaf"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "592db566e4b072a2710fcf7c"}, {"problem": 23, "code": "(fn [coll] (loop [r coll res () ] \n             (if (empty? r)\n               res\n               (recur (rest r) (conj res (first r))))))", "user": "54f8e998e4b01ecee9d88831"}, {"problem": 23, "code": "(fn[x] (reduce (fn[a v] (conj a v)) '() x ))", "user": "59300b0ee4b072a2710fcfd3"}, {"problem": 23, "code": "reduce conj ()", "user": "557c6ca6e4b05c286339e0c4"}, {"problem": 23, "code": "(fn [l & {:keys [r] :or {r ()}}]\n  (if (empty? l)\n    (into (empty l) r)\n    (recur (butlast l) {:r (conj r (last l))})))", "user": "58ebd6b3e4b056aecfd47d4c"}, {"problem": 23, "code": "(fn [coll] (reduce conj '() coll))", "user": "592fa9f8e4b072a2710fcfcb"}, {"problem": 23, "code": "(fn [s]\n       (loop [s s\n              result []]\n        (if (empty? s)\n          result \n             (recur (drop-last s) (conj result (last s))))))", "user": "59301509e4b072a2710fcfd6"}, {"problem": 23, "code": "(fn [coll] \n\t(reduce \n    \t#(cons %2 %) \n\t    '() \n    \tcoll))", "user": "592749e4e4b072a2710fcec8"}, {"problem": 23, "code": "(fn zamvred [vec]\n    (cond\n     (empty? vec) '[]\n     :else\n     (conj (zamvred (rest vec)) (first vec))))", "user": "584d99c5e4b0b7285a6f4e42"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "592c2f3ee4b072a2710fcf53"}, {"problem": 23, "code": "#(into '() %)", "user": "593289b6e4b072a2710fd038"}, {"problem": 23, "code": "(fn [l]\n  (let [lst (into [] l)]\n    (let [n (- (count lst) 1)]\n      (loop [i 0\n             res []]\n       (if (> i n)\n         res\n         (recur (+ 1 i) (into res [(get lst (- n i))]))\n        )\n      )\n    )\n  )\n)", "user": "59333f35e4b072a2710fd04c"}, {"problem": 23, "code": "#(into () %)", "user": "5933b736e4b072a2710fd05d"}, {"problem": 23, "code": "#(reduce (fn [coll x]\n           (cons x coll))\n          (empty %)\n        %)", "user": "592c64ffe4b072a2710fcf57"}, {"problem": 23, "code": "(fn [coll]\n  (loop [coll coll\n         rev-coll []]\n    (if (empty? coll)\n         rev-coll\n        (recur (rest coll) (cons (first coll) rev-coll)))))", "user": "5922599be4b09b4ee5954c8d"}, {"problem": 23, "code": "(fn [a] (loop [a a b '()] (if (= nil (seq a)) b (recur (rest a) (conj b (first a))))))", "user": "5934a43ce4b072a2710fd07e"}, {"problem": 23, "code": "#(into '() %)", "user": "58db362be4b0a4d5acaab675"}, {"problem": 23, "code": "(fn [data]\n  (loop [x data out []]\n    (if (zero? (count x))\n      out\n      (recur (drop-last x) (conj out (last x)))\n    )\n  )\n)", "user": "59313dc1e4b072a2710fd00a"}, {"problem": 23, "code": "#(into () %)", "user": "59368efbe4b02506e01a297d"}, {"problem": 23, "code": "(fn [l] (into '() l))", "user": "59368ccae4b02506e01a297a"}, {"problem": 23, "code": "(fn [lat]\n(into '() lat))", "user": "59368ccae4b02506e01a2979"}, {"problem": 23, "code": "reduce conj '()", "user": "5935b010e4b04f87174def55"}, {"problem": 23, "code": "(fn sample [coll]\n  (reduce conj '() coll)\n  )", "user": "591f2e4ae4b09b4ee5954c44"}, {"problem": 23, "code": "reduce conj '()", "user": "5931e498e4b072a2710fd024"}, {"problem": 23, "code": "into ()", "user": "5936fabce4b02506e01a298c"}, {"problem": 23, "code": "(fn [x]\n  (loop [one x two '()]\n    (if (empty? one)\n      two\n      (recur (rest one) (conj two (first one))))))", "user": "5936a67de4b02506e01a2982"}, {"problem": 23, "code": "(fn [v]\n  (reduce (fn [e acc] (cons acc e)) [] v))", "user": "59362afee4b0d6bb3c60df69"}, {"problem": 23, "code": "(fn [listy]\n  (into '() listy))", "user": "59369515e4b02506e01a297e"}, {"problem": 23, "code": "#(into () %)", "user": "58f547b1e4b0438e51c2ced4"}, {"problem": 23, "code": "(fn [x]\n  (reduce conj () x))", "user": "59385840e4b02506e01a29c9"}, {"problem": 23, "code": "reduce #(conj %1 %2) ()", "user": "58cf8f97e4b03c36ff7e58b7"}, {"problem": 23, "code": ";count nth drop-last \n\n#(reduce conj () %)", "user": "5939bcb4e4b069cdc2982b3e"}, {"problem": 23, "code": "#(into () %)", "user": "5939b9f9e4b069cdc2982b3d"}, {"problem": 23, "code": "(fn [s]\n  (reduce conj () s))", "user": "5939bcb6e4b069cdc2982b3f"}, {"problem": 23, "code": "(fn [data] (loop [r '() d data]\n\t(if (= (count d) 0)\n\tr\n    (recur (conj r (first d)) (rest d)))))", "user": "59368db1e4b02506e01a297b"}, {"problem": 23, "code": "reduce conj '()", "user": "592dbbd5e4b072a2710fcf7f"}, {"problem": 23, "code": "into ()", "user": "593bf921e4b069cdc2982b84"}, {"problem": 23, "code": "(fn  [v] (reduce #(cons %2 %1) '() v))", "user": "593744abe4b02506e01a299b"}, {"problem": 23, "code": "(fn my-reverse [coll]\n  (loop [x coll\n         result '()]\n    (if (empty? x)\n      result\n      (recur (rest x) (cons (first x) result)))))", "user": "593870e6e4b02506e01a29d6"}, {"problem": 23, "code": "(fn [col] (loop [c col a '()] (if (empty? c) a (recur (rest c) (cons (first c) a)))))", "user": "593c71cbe4b069cdc2982b90"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "591a6c9fe4b09b4ee5954bd6"}, {"problem": 23, "code": "(fn f [x]\n  (loop [l x, res (list )]\n    (if (empty? l)\n      res\n      (recur (rest l) (conj res (first l))))))", "user": "593d6793e4b069cdc2982ba6"}, {"problem": 23, "code": "(fn [c]\n  (loop [coll c result []]\n    (if (first coll)\n      (recur (rest coll) (cons (first coll) result))\n      result)))", "user": "593bdd84e4b069cdc2982b81"}, {"problem": 23, "code": "(fn [coll]\n  (reduce conj () coll))", "user": "593dde1be4b069cdc2982baf"}, {"problem": 23, "code": "reduce #(cons %2 %1) []", "user": "593db05ae4b069cdc2982bab"}, {"problem": 23, "code": "(fn [coll] (reduce conj () coll))", "user": "593dc5f4e4b069cdc2982bac"}, {"problem": 23, "code": "reduce #(cons %2 %) []", "user": "593dfe60e4b069cdc2982bb1"}, {"problem": 23, "code": "reduce conj '()", "user": "583f1533e4b089d5ab817dc8"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "593b1739e4b069cdc2982b68"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "593f95d8e4b069cdc2982be3"}, {"problem": 23, "code": "(fn [s] (reduce conj '() s))", "user": "593fcb0ce4b069cdc2982bea"}, {"problem": 23, "code": "reduce conj nil", "user": "593f88dce4b069cdc2982be2"}, {"problem": 23, "code": "(fn balik [x]\n  (if (empty? x)\n    '[]\n    (conj (balik (rest x)) (first x))))", "user": "593910eae4b02506e01a29f4"}, {"problem": 23, "code": "(fn [lst] (reduce (fn [acc curr] (conj acc curr)) '() lst))", "user": "5938bca5e4b02506e01a29eb"}, {"problem": 23, "code": "(fn rev [seq]\n  (let [v (vec seq)]\n    (if (empty? v)\n      v\n      (conj\n       (rev (rest v)) (first v)))))", "user": "54bd9a60e4b0ed20f4ff6ee3"}, {"problem": 23, "code": "(fn [c] (reduce conj () c))", "user": "593e4b1fe4b069cdc2982bbb"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "593edddfe4b069cdc2982bca"}, {"problem": 23, "code": "(fn [x] (let [l (into [] x) len (count l) i (map inc (range len))] (map #(get l (- len %)) i)))", "user": "5938be98e4b02506e01a29ec"}, {"problem": 23, "code": "reduce (fn [c x] (cons x c)) []", "user": "593fba55e4b069cdc2982be7"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "593f8692e4b069cdc2982be1"}, {"problem": 23, "code": "#(vec(reduce concat(butlast(reduce conj(partition 1(cons 1 %))))))", "user": "59395adfe4b02506e01a29fb"}, {"problem": 23, "code": "(fn f\n  [l]\n  (if (empty? l)\n    []\n    (concat (f (rest (vec l))) (vector (first l)))))", "user": "59390a35e4b02506e01a29f3"}, {"problem": 23, "code": "reduce #(cons %2 %1) ()", "user": "59419bdfe4b060784b3b78f7"}, {"problem": 23, "code": "(fn [data]\n  (reduce conj () data))", "user": "594307c0e4b060784b3b7920"}, {"problem": 23, "code": "(fn [xs]\n  (into '() xs))", "user": "592518f0e4b072a2710fce68"}, {"problem": 23, "code": "(fn toto [l]\n  (if (> (count l) 0)\n    (concat (toto (rest l)) [(first l)])\n    l))", "user": "594263cbe4b060784b3b790a"}, {"problem": 23, "code": "(fn [y] (into '() y))", "user": "593e01cde4b069cdc2982bb3"}, {"problem": 23, "code": "apply conj '()", "user": "5943abb6e4b060784b3b792b"}, {"problem": 23, "code": "into ()", "user": "527ba29de4b03e8d9a4a7594"}, {"problem": 23, "code": "(fn [orig-obj]\n  (loop [current-obj orig-obj\n         final-obj ()]\n    (if (empty? current-obj)\n      final-obj\n      (recur (rest current-obj) \n             (conj final-obj (first current-obj))))))", "user": "5944bd7fe4b0b03edd0057b0"}, {"problem": 23, "code": "(fn [s] (into '() s))", "user": "59440e07e4b0b03edd00579a"}, {"problem": 23, "code": "(fn a [arr] (if (empty? arr) [] (conj (a (rest arr)) (first arr))))", "user": "59449aa2e4b0b03edd0057ad"}, {"problem": 23, "code": "reduce conj ()", "user": "5945279ce4b07ddc2dafad6c"}, {"problem": 23, "code": "(fn [a] (reduce #(cons %2 %1) [] a))", "user": "591addcee4b09b4ee5954be1"}, {"problem": 23, "code": "(fn [c] (reduce conj () c))", "user": "59266364e4b072a2710fceab"}, {"problem": 23, "code": "#(reduce (fn [acc x]\n           (cons x acc))\n         (empty %)\n         %)", "user": "592518cde4b072a2710fce66"}, {"problem": 23, "code": "(partial reduce (fn [acc val] (cons val acc)) ())", "user": "594783bee4b07ddc2dafada1"}, {"problem": 23, "code": "#(into '() %)", "user": "5947c6a6e4b07ddc2dafada7"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5948117be4b07ddc2dafadae"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "59445ff2e4b0b03edd0057a8"}, {"problem": 23, "code": "(fn [s] (loop [r s rev ()] (if (empty? r) rev (recur (rest r) (cons (first r) rev)))))", "user": "59468de7e4b07ddc2dafad88"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "593f9bbce4b069cdc2982be4"}, {"problem": 23, "code": "(fn [c]\n  (reduce #(cons %2 %1) '() c))", "user": "58f0c5a3e4b056aecfd47df8"}, {"problem": 23, "code": "(fn [x] (reduce #(cons %2 %1) [] x))", "user": "59473563e4b07ddc2dafad97"}, {"problem": 23, "code": "reduce conj '()", "user": "59496129e4b07ddc2dafadd7"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "59497f51e4b07ddc2dafaddd"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "594a1475e4b07ddc2dafadf2"}, {"problem": 23, "code": "(fn [seq]\n  (into '() seq))", "user": "594ad6aae4b07ddc2dafae0e"}, {"problem": 23, "code": "reduce conj ()", "user": "590260cde4b0438e51c2d057"}, {"problem": 23, "code": "#(loop [y %, acc []] (if (empty? y) acc (recur (next y)(concat [(first y)] acc))))", "user": "56b2652ae4b0982f16b37e04"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5948adffe4b07ddc2dafadc6"}, {"problem": 23, "code": "(fn do-reverse [list] (if (empty? list) [] (cons (last list) (do-reverse (butlast list)))))", "user": "594bb203e4b07ddc2dafae36"}, {"problem": 23, "code": "reduce conj ()", "user": "5926c254e4b072a2710fceb8"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "594bc912e4b07ddc2dafae3e"}, {"problem": 23, "code": "(fn [lst]\n  (loop [in lst\n         out '()]\n    (if (empty? in)\n      out\n      (recur (rest in) (cons (first in) out)))))", "user": "594bd637e4b07ddc2dafae41"}, {"problem": 23, "code": "reduce #(conj %1 %2) ()", "user": "594bdadce4b07ddc2dafae43"}, {"problem": 23, "code": "reduce conj ()", "user": "594c0bd7e4b07ddc2dafae56"}, {"problem": 23, "code": "#(reduce conj (list) %)", "user": "56339e23e4b0bfe05bf117b1"}, {"problem": 23, "code": "(fn [xs]\n  (reduce (fn [a b] (cons b a)) [] xs))", "user": "594c2950e4b07ddc2dafae5c"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "594c9d4ce4b07ddc2dafae6a"}, {"problem": 23, "code": "(fn [a]\n  (loop [y a result nil]\n    (if (not= [] y)\n      (recur (rest y) (-> result (conj (first y))) )\n      (vec result))))", "user": "594b3459e4b07ddc2dafae23"}, {"problem": 23, "code": "(fn [l]\n  (reduce conj () l))", "user": "594ce8e5e4b07ddc2dafae76"}, {"problem": 23, "code": "into '()", "user": "594bc7d6e4b07ddc2dafae3d"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "594d4c43e4b07ddc2dafae86"}, {"problem": 23, "code": "(fn [seq] (reduce #(cons %2 %) [] seq))", "user": "58e13b49e4b005f69f193c77"}, {"problem": 23, "code": "reduce conj ()", "user": "594880ade4b07ddc2dafadc2"}, {"problem": 23, "code": "(fn [coll] \n  (reduce conj () coll))\n\n;; I cheated", "user": "594db24ce4b07ddc2dafae98"}, {"problem": 23, "code": "#( loop [x % res []]\n   (if (not= [] x)  (recur  (rest x) (cons (first x) res) )  res ))", "user": "594e3723e4b07ddc2dafaea8"}, {"problem": 23, "code": "(fn [seq]\n  (reduce conj '() seq))", "user": "594e31dde4b07ddc2dafaea6"}, {"problem": 23, "code": "(fn func [x] \n  (if (not (empty? x)) \n    (conj (func (drop-last 1 x)) (last x))\n    x))", "user": "578559a2e4b0ebec4cfb74da"}, {"problem": 23, "code": "reduce conj ()", "user": "594bb36ae4b07ddc2dafae37"}, {"problem": 23, "code": "reduce #(cons %2 %) '()", "user": "594c1baae4b07ddc2dafae59"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5938bae2e4b02506e01a29ea"}, {"problem": 23, "code": "reduce conj nil", "user": "594fdfdce4b066ee0a44ae85"}, {"problem": 23, "code": "into ()", "user": "593ab583e4b069cdc2982b57"}, {"problem": 23, "code": "(fn [coll] (reduce  conj '() coll))", "user": "59504d83e4b066ee0a44ae92"}, {"problem": 23, "code": "(fn [s]\n  (loop [x s r nil]\n    (if (empty? x)\n      r\n      (recur (rest x) (conj r (first x))))))", "user": "594cb88be4b07ddc2dafae6e"}, {"problem": 23, "code": "#(into () %)", "user": "55216aa5e4b0882d96d09192"}, {"problem": 23, "code": "(fn [s] (loop [my-seq s rev '()]          \n           (if (= my-seq nil)\n           rev\n           (recur (next my-seq) (cons (first my-seq) rev)))\n           )\n        )", "user": "59473583e4b07ddc2dafad98"}, {"problem": 23, "code": "(fn reverse-seq\n  [the-sequence]\n  (do\n    (println \"Reverse has started\")\n    (loop [in the-sequence out nil]\n      (if (empty? in)\n        out\n        (recur (rest in) (cons (first in) out))))))", "user": "568aa458e4b0dcc4269f4092"}, {"problem": 23, "code": "(fn [coll]\n  (loop [[r & more :as all] (seq coll)\n         acc '()]\n    (if all\n      (recur more (cons r acc))\n      acc)))", "user": "5951250fe4b066ee0a44aea6"}, {"problem": 23, "code": "(fn [sequ] (reduce (fn [res val] (concat [val] res)) [] sequ))", "user": "595041e8e4b066ee0a44ae90"}, {"problem": 23, "code": "(fn [x]\n  (loop [input x output [] ]\n    (let [dropped (last input)]\n      (println (str \"dropped:\" dropped))\n      (if (empty? input) output\n      (recur (vec (drop-last input)) (conj output dropped))))))", "user": "59503c5de4b066ee0a44ae8e"}, {"problem": 23, "code": "into ()", "user": "5950f0bfe4b066ee0a44ae9f"}, {"problem": 23, "code": "(fn [seq] (loop [seq seq\n                 res ()]\n            (if (empty? seq)\n              res\n              (recur (rest seq)\n                     (conj res (first seq)))\n              )))", "user": "592334c7e4b0a390037439ee"}, {"problem": 23, "code": "reduce (fn [a b] (conj a b)) '()", "user": "595131bee4b066ee0a44aea9"}, {"problem": 23, "code": "reduce (fn [acc vals] (cons vals acc)) []", "user": "59537716e4b066ee0a44aee5"}, {"problem": 23, "code": "(partial reduce conj ())", "user": "5953bdb6e4b066ee0a44aeed"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5954ff28e4b066ee0a44af1b"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5955158be4b066ee0a44af1e"}, {"problem": 23, "code": "#(into '() %1)", "user": "5952d75ce4b066ee0a44aed4"}, {"problem": 23, "code": "(fn [x] (into () x))", "user": "5955625fe4b066ee0a44af2f"}, {"problem": 23, "code": "(fn f[lista]\n\t(if (empty? lista)\n\t\t()\n\t\t(cons (last lista) (f (take (dec (count lista)) lista))))\n\t)", "user": "5954eef0e4b066ee0a44af17"}, {"problem": 23, "code": "into ()", "user": "4e84bb7e535db62dc21a62e3"}, {"problem": 23, "code": "(fn [parseq]\n  (loop [s parseq res '()]\n    (if (seq s)\n      (recur (next s) (conj res (first s)))\n      res)))", "user": "58969420e4b00487982d52a4"}, {"problem": 23, "code": "#(reduce (fn [a b](cons b a))[] %)", "user": "59406b94e4b069cdc2982bfd"}, {"problem": 23, "code": "into '()", "user": "5956c6dae4b066ee0a44af61"}, {"problem": 23, "code": "(fn reverse$ [sq]\n    (if (<= (count sq) 1)\n      sq\n      (concat (reverse$ (rest sq)) (list (first sq)))))", "user": "556ff203e4b09a3098a52526"}, {"problem": 23, "code": "reduce (fn [xs var] (conj xs var)) '()", "user": "5954108ae4b066ee0a44aef4"}, {"problem": 23, "code": "(fn rev [x]\n  (into '() x))", "user": "5958a0c8e4b066ee0a44af8c"}, {"problem": 23, "code": "#(map last (take (count %) (iterate butlast %)))", "user": "5958cef6e4b066ee0a44af94"}, {"problem": 23, "code": "(fn f [l] ((fn append [l rl] (if (empty? (rest l))\n                                 (cons (first l) rl)\n                                 (append (rest l) (cons (first l) rl))\n                                ))\n            l nil)\n  )", "user": "595930f6e4b066ee0a44af9c"}, {"problem": 23, "code": "#((fn rev [s accum]\n  (if\n    (empty? s)\n    accum\n    (rev (rest s)\n         (list* (first s) accum)))) % '())", "user": "5959b0ede4b066ee0a44afaa"}, {"problem": 23, "code": "into ()", "user": "595914e0e4b066ee0a44af99"}, {"problem": 23, "code": "#(into () %)", "user": "595a2ab5e4b066ee0a44afb2"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "595a885be4b066ee0a44afc4"}, {"problem": 23, "code": "(fn [x] (let [rev (into (list) x)]\n          rev))", "user": "57c8002ce4b05aa3c4741d13"}, {"problem": 23, "code": "#(into () %)", "user": "59566d1de4b066ee0a44af54"}, {"problem": 23, "code": "(fn [x]\n    (loop [res '() remaining x]\n      (if (empty? remaining) res\n          (let [[first-one & rest-ones] (seq remaining)]\n            (recur (conj res first-one) rest-ones )))))", "user": "5959c72ae4b066ee0a44afac"}, {"problem": 23, "code": "(fn rev [sequence]\n  (if (empty? sequence)\n  sequence\n  (conj (rev (drop-last 1 sequence)) (last sequence))\n ))", "user": "595b00f4e4b066ee0a44afd2"}, {"problem": 23, "code": "#(loop [c %1 r []] (if (empty? c) r (recur (butlast c) (conj r (last c)))))", "user": "55df2752e4b050e68259b3ed"}, {"problem": 23, "code": "into ()", "user": "595b864ee4b066ee0a44afdc"}, {"problem": 23, "code": "(fn [x] (into '() x))", "user": "4f73591be4b07046d9f4f045"}, {"problem": 23, "code": "#(reduce (fn [acc x] (conj acc x)) '() %)", "user": "595bbab7e4b066ee0a44afe0"}, {"problem": 23, "code": "(fn [seq] (into () seq))", "user": "593c653de4b069cdc2982b8f"}, {"problem": 23, "code": "(fn [seq](reduce conj () seq))", "user": "594c7c96e4b07ddc2dafae65"}, {"problem": 23, "code": "(fn flip [coll]\n   (let [item (first coll)\n         tail (next coll)]\n     (if (not (= tail nil))\n       (concat (flip tail) (list item))\n       coll)))", "user": "57d711c5e4b0bd073c2023d5"}, {"problem": 23, "code": "(fn [list]\n\t(loop [result '() sub_list list]\n\t\t(if (empty? sub_list)\n\t\t\t\t\tresult\n\t\t\t\t\t(recur (concat [(first sub_list)] result) (rest sub_list))\n)))", "user": "5954cea2e4b066ee0a44af0a"}, {"problem": 23, "code": "(fn reversee\n  ([xs] (reversee xs ()))\n  ([xs acc]\n   (if (= () xs)\n     acc\n     (reversee (rest xs) (cons (first xs) acc)))))", "user": "595c3782e4b066ee0a44aff2"}, {"problem": 23, "code": "#(into () %)", "user": "595b7c12e4b066ee0a44afda"}, {"problem": 23, "code": "(fn [se] \n\t(into '() se)\n  )", "user": "595d0897e4b066ee0a44b00f"}, {"problem": 23, "code": "#(reduce (fn [acc item] (cons item acc)) '() (sequence %))", "user": "595d4996e4b066ee0a44b01d"}, {"problem": 23, "code": "(fn [seq]\n  (reduce (fn [s elem] (conj s elem)) '() seq))", "user": "56478a82e4b0284900eef61e"}, {"problem": 23, "code": "(fn [s]\n  (reduce\n    (fn [accum x]\n      (cons x accum))\n    '()\n    s))", "user": "595e1ba7e4b066ee0a44b036"}, {"problem": 23, "code": "reduce conj ()", "user": "595e8728e4b066ee0a44b047"}, {"problem": 23, "code": "(fn f [x] (if (= (count x) 1)                                          \n                     x                                                          \n                     (conj (vec (f (rest x))) (first x))))", "user": "594765cee4b07ddc2dafad9b"}, {"problem": 23, "code": "into ()", "user": "595eba88e4b066ee0a44b04e"}, {"problem": 23, "code": "(fn [col]\n  (loop [s col \n         rev ()]\n    (if-let [x (first s)]\n      (recur (rest s) (cons x rev))\n      rev)))", "user": "595ebf46e4b066ee0a44b04f"}, {"problem": 23, "code": "#(into () %)\n;;(fn rev [l] (if (empty? (rest l))(first l)(conj(rev (rest l))(first l))))", "user": "595e20e2e4b066ee0a44b037"}, {"problem": 23, "code": "(fn rev [x]\n  (if (seq (rest x))\n    (concat (rev (rest x)) [(first x)])\n    x\n  )\n)", "user": "595ed97fe4b066ee0a44b051"}, {"problem": 23, "code": "(fn [coll]\n  (into '() coll))", "user": "5954edcbe4b066ee0a44af15"}, {"problem": 23, "code": "#(reduce conj `() %)", "user": "59595f85e4b066ee0a44afa1"}, {"problem": 23, "code": "(fn [col] (loop [col col\n                 rev ()]\n            (if (empty? col)\n              rev\n              (recur (rest col) (cons (first col) rev)))))", "user": "595fe3f6e4b066ee0a44b073"}, {"problem": 23, "code": "(fn rev \n  ([xs] (rev xs '()))\n  ([xs acc] (if (empty? xs) acc (rev (rest xs) (conj acc (first xs)))))\n  )", "user": "595fe942e4b066ee0a44b075"}, {"problem": 23, "code": "#(into () %)", "user": "5960e872e4b066ee0a44b093"}, {"problem": 23, "code": "reduce conj '()", "user": "59613e4ce4b066ee0a44b09b"}, {"problem": 23, "code": "#(loop [result ()\n        coll   %]\n    (if (empty? coll)\n      result\n      (recur (conj result (first coll)) (rest coll))))", "user": "595c02a9e4b066ee0a44afeb"}, {"problem": 23, "code": "(partial reduce conj ())", "user": "53dad484e4b0e771c30254ac"}, {"problem": 23, "code": "(fn [x] (reduce conj () x))", "user": "570e43d8e4b0b0fb43fd06eb"}, {"problem": 23, "code": "(fn rev ([c] (rev c '())) ([c a] (if (empty? c) a (rev (rest c) (conj a (first c))))))", "user": "59614d9ce4b066ee0a44b09d"}, {"problem": 23, "code": "reduce #(cons %2 %1) []", "user": "58fc52cee4b0438e51c2cf95"}, {"problem": 23, "code": "#(loop [s % result []] (if-let [l (last s)] (recur (take (dec (count s)) s) (conj result l)) result))", "user": "595f702ce4b066ee0a44b064"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "595a3b41e4b066ee0a44afb7"}, {"problem": 23, "code": "( fn reorder [ot ls] (if (not (empty? ls)) ( reorder (conj ot (last ls)) (drop-last ls)) ot)) []", "user": "5953949be4b066ee0a44aeea"}, {"problem": 23, "code": "#(reduce (fn [coll elem] (cons elem coll) ) '() %)", "user": "594266cfe4b060784b3b790b"}, {"problem": 23, "code": "#(into () %)", "user": "58ea5bdce4b056aecfd47d1b"}, {"problem": 23, "code": "(fn [xs] \n   ((fn rev [xs ys] \n      (if (empty? xs) \n        ys\n        (rev (rest xs) \n             (cons (first xs) ys))))\n    xs\n    '()))", "user": "595fd721e4b066ee0a44b06e"}, {"problem": 23, "code": "into '()", "user": "5962af8ce4b066ee0a44b0b8"}, {"problem": 23, "code": "reduce conj '()", "user": "59638fc5e4b066ee0a44b0cd"}, {"problem": 23, "code": "(fn [x] (reduce conj '() x))", "user": "59636cc2e4b066ee0a44b0c7"}, {"problem": 23, "code": "(fn [x] (reduce conj '() x))", "user": "59636ec9e4b066ee0a44b0c8"}, {"problem": 23, "code": "(fn [arg] (reduce conj '() arg))", "user": "59636b37e4b066ee0a44b0c3"}, {"problem": 23, "code": "(fn [arg] (reduce conj '() arg))", "user": "59636b43e4b066ee0a44b0c4"}, {"problem": 23, "code": "(fn [arg] (reduce conj '() arg))", "user": "59636b49e4b066ee0a44b0c5"}, {"problem": 23, "code": "(fn [x] (into () x))", "user": "59637028e4b066ee0a44b0ca"}, {"problem": 23, "code": "(fn ff \n  [arr]\n  ((fn [arr my-arr]\n      (if (empty? arr)\n        my-arr\n        (recur (rest arr) (cons (first arr) my-arr)))\n      ) arr '())\n  )", "user": "59636b6de4b066ee0a44b0c6"}, {"problem": 23, "code": "#(into () %)", "user": "5911c8e1e4b0163c97b36edc"}, {"problem": 23, "code": "reduce (fn [a v] (conj a v)) '()", "user": "59638af5e4b066ee0a44b0cc"}, {"problem": 23, "code": "into '()", "user": "595fd77ce4b066ee0a44b06f"}, {"problem": 23, "code": "reduce conj ()", "user": "5567c3cde4b0c656e3ff1848"}, {"problem": 23, "code": "#(loop [x % result []]\n   (if (empty? x)\n     result\n     (recur (butlast x) (conj result (last x)))))", "user": "5964c614e4b069c0a1a19770"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "59648ce1e4b069c0a1a19769"}, {"problem": 23, "code": "(fn [lst]\n    (reduce (fn [ll val] (conj ll val))\n            (list (first lst))\n            (rest lst)))", "user": "5965a773e4b069c0a1a1978a"}, {"problem": 23, "code": "reduce conj '()", "user": "572b73d0e4b0cd1946bd0f3a"}, {"problem": 23, "code": "(fn rev [coll] (if (empty? coll)\n                  []\n                  (conj (rev (rest coll)) (first coll))))", "user": "59346d29e4b072a2710fd077"}, {"problem": 23, "code": "(fn rev [xs]\n  (if (seq xs)\n  \t(conj (rev (rest xs)) (first xs))\n  \t[]))", "user": "59644d2ae4b069c0a1a19764"}, {"problem": 23, "code": "(fn rev [xs]\n  (if (empty? xs)\n    xs\n    (concat (rev (rest xs)) (take 1 xs))))", "user": "596296e9e4b066ee0a44b0b6"}, {"problem": 23, "code": "reduce (fn [x y] (concat [y] x)) []", "user": "59663e77e4b069c0a1a1979f"}, {"problem": 23, "code": "(fn f [sq]\n  (cond\n   (empty? sq) '()\n   (empty? (rest sq)) (list (first sq))\n   :else (concat (f (rest sq)) (list (first sq)))))", "user": "59643a21e4b066ee0a44b0df"}, {"problem": 23, "code": "#(reduce (fn [acc item] (conj acc item)) '() %)", "user": "58bd1ab9e4b0888cdc949d27"}, {"problem": 23, "code": "reduce conj ()", "user": "595bc925e4b066ee0a44afe2"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "58ee84e5e4b056aecfd47dab"}, {"problem": 23, "code": "(fn [x] (reduce conj () x))", "user": "5965eb8de4b069c0a1a19796"}, {"problem": 23, "code": "#(reduce (fn [x y] (conj x y)) '() %)", "user": "59672436e4b069c0a1a197b1"}, {"problem": 23, "code": "#(into () (into [] %))", "user": "5797d3d2e4b039eba2ecb106"}, {"problem": 23, "code": "(fn [x] (into '() x))", "user": "595ba438e4b066ee0a44afdf"}, {"problem": 23, "code": "(fn [xs] (reduce conj '() xs))", "user": "5967ce67e4b069c0a1a197bf"}, {"problem": 23, "code": "(fn [x] (into [] (into () x)))", "user": "55842bd7e4b05c286339e11c"}, {"problem": 23, "code": "(fn[col] (into () (apply list col)))", "user": "59692530e4b069c0a1a197e4"}, {"problem": 23, "code": "(fn [s] (reduce #(conj %1 %2) '() s))", "user": "59699da7e4b069c0a1a197eb"}, {"problem": 23, "code": "(partial into ())", "user": "590b8607e4b047aa04b199db"}, {"problem": 23, "code": "(fn greet [x]\n  (reduce (fn [val item] (conj val item)) '() x))", "user": "5860d82de4b0f14aab7c87de"}, {"problem": 23, "code": "(partial reduce (fn [acc elt] (cons elt acc)) '())", "user": "596a5711e4b069c0a1a19802"}, {"problem": 23, "code": "(fn [coll] (loop [rcoll []\n                  rfcoll (into [] coll)]\n             (if (= (count rfcoll) 0)\n               rcoll\n               (recur (conj rcoll  (last rfcoll)) (pop \n                                                   rfcoll)))))", "user": "5966a214e4b069c0a1a197ab"}, {"problem": 23, "code": "(fn [x]\n  (loop [seq-list x result '()]\n    (if (empty? seq-list) result\n      \t(recur (rest seq-list) (cons (first seq-list) result)))))", "user": "596aaeefe4b069c0a1a19808"}, {"problem": 23, "code": "reduce #(conj %1 %2) '()", "user": "596a4fbce4b069c0a1a19800"}, {"problem": 23, "code": "#(into() %)", "user": "596a43ace4b069c0a1a197fd"}, {"problem": 23, "code": "(fn [myseq]\n  (loop [rv (seq nil)\n         s myseq]\n    (if (seq s)\n      (recur (conj rv (first s))\n             (rest s))\n      rv)))", "user": "578021b4e4b0d36ec5835e73"}, {"problem": 23, "code": "#(into () %)", "user": "596c1f25e4b069c0a1a19825"}, {"problem": 23, "code": "(fn [x]\n  \t(reduce (fn [collector ele] (conj collector ele)) '() x)\n  )", "user": "596c67fbe4b069c0a1a1982b"}, {"problem": 23, "code": "(fn [lst] (loop [l lst r []] (if (first l) (recur (rest l) (cons (first l) r)) r)))", "user": "596caee3e4b069c0a1a19837"}, {"problem": 23, "code": "#(reduce conj() %)", "user": "5964f9b0e4b069c0a1a19778"}, {"problem": 23, "code": "reduce conj ()", "user": "596e4c5be4b069c0a1a19864"}, {"problem": 23, "code": "(fn [coll] (reduce (fn [acc, e] (conj acc e)) '() coll))", "user": "596e2267e4b069c0a1a19860"}, {"problem": 23, "code": "(fn [l] \n  (reduce #(cons %2 %1) '() l))", "user": "5398d042e4b0b51d73faaf00"}, {"problem": 23, "code": "(fn [s] (loop [x s, y '()] \n  (if  (empty? x)\n      y\n  (recur (rest x) (conj y (first x))))))", "user": "596f6683e4b069c0a1a19877"}, {"problem": 23, "code": "(comp vec #(reduce (fn [l x] (conj l x)) '() %))", "user": "59708e38e4b01722bebd4c65"}, {"problem": 23, "code": "reduce conj '()", "user": "595a4fb8e4b066ee0a44afba"}, {"problem": 23, "code": "#(reduce conj `() %)", "user": "5971763fe4b01722bebd4c72"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "595e5bdbe4b066ee0a44b041"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "596fb563e4b01722bebd4c55"}, {"problem": 23, "code": "(fn rev\n  [coll]\n  (loop [in coll out '()]\n    (if (= '() in)\n      out\n      (recur (rest in) (conj out (first in))))))", "user": "53de4bdae4b0d874e779ae32"}, {"problem": 23, "code": "(fn revver \n  ([partRevved someList]\n    (let [backOfList (rest someList)]\n      (let [partRevved (conj partRevved (first someList))]\n        (if (empty? backOfList)\n          partRevved\n          (revver partRevved backOfList)\n        )\n      )\n    )\n  )\n  ([someList]\n   (revver '() someList)\n  )\n)", "user": "5972198ee4b01722bebd4c7d"}, {"problem": 23, "code": "reduce conj '()", "user": "5972844ce4b01722bebd4c86"}, {"problem": 23, "code": "#(into () %)", "user": "59636f66e4b066ee0a44b0c9"}, {"problem": 23, "code": "reduce conj ()", "user": "5972f089e4b01722bebd4c90"}, {"problem": 23, "code": "into ()", "user": "5972fcf6e4b01722bebd4c92"}, {"problem": 23, "code": "(fn rev [s]\n  (if (= s ())\n    []\n    (conj (rev (rest s)) (first s))))", "user": "59733c91e4b01722bebd4c9b"}, {"problem": 23, "code": "(fn [items]\n    ((reduce\n        (fn [acc, item]\n            (vector \n             \t(- (acc 0) 1) \n             \t(conj (acc 1) ((into [] items) (- (acc 0) 1)))))\n        [(count (into [] items)), []]\n        (into [] items)) \n     1))", "user": "59735785e4b01722bebd4c9c"}, {"problem": 23, "code": "(fn [origin-seq]\n  (let [origin-vec (vec origin-seq)]\n    (loop [inner-vec origin-vec\n           target-vec []\n           index (count origin-vec)]\n      (if (= 0 index)\n        (if (vector? origin-seq)\n          target-vec\n          (concat '() target-vec))\n        (let [head (first inner-vec)\n              rest-vec (rest inner-vec)]\n          (recur rest-vec (vec (cons head target-vec)) (dec index)))))))", "user": "58fed70de4b0438e51c2cfdd"}, {"problem": 23, "code": "(fn [s]\n  (loop [sini s sinv []]\n    (if (= (count sini) 0)\n      sinv\n      (recur (rest sini) (cons (first sini) sinv))\n        )\n      )\n    )", "user": "597236fde4b01722bebd4c7f"}, {"problem": 23, "code": "(fn [xs] \n  ((fn [xs ys]\n  \t(if (empty? xs) \n   \t  ys\n   \t  (recur (rest xs) (cons (first xs) ys))))  \n  xs '()))", "user": "59738d98e4b01722bebd4ca1"}, {"problem": 23, "code": "(fn rev [s]\n  (loop [xs s accum ()]\n  (if (empty? xs) accum\n    (recur (rest xs) (conj accum (first xs))))))", "user": "5795dbe0e4b0e215f87e848c"}, {"problem": 23, "code": "#(loop [t [] v %]\n   (if (empty? v) t\n     (recur (conj t (last v)) (butlast v))))", "user": "57eb7213e4b0bfb2137f5b61"}, {"problem": 23, "code": "#(into () %)", "user": "5975ed26e4b01722bebd4cd0"}, {"problem": 23, "code": "#(loop [s %\n        rs []]\n   (if (empty? s)\n     rs\n     (recur (rest s) (cons (first s) rs ))))", "user": "5974b12be4b01722bebd4cb1"}, {"problem": 23, "code": "(fn [s]\n    (loop [source s target []]\n      (if-not (empty? source)\n        (do\n          (println target)\n          (recur (drop-last source) (conj target (last source))))\n      (seq target))))", "user": "51127e8ee4b0350614f07a76"}, {"problem": 23, "code": "#(into '() %)", "user": "59538a2fe4b066ee0a44aee8"}, {"problem": 23, "code": "#(into '() %)", "user": "5977bb05e4b01722bebd4cf9"}, {"problem": 23, "code": "(fn f [sq]\n  (if (empty? sq)\n    []\n    (conj (f (rest sq)) (first sq))))", "user": "59780ee5e4b01722bebd4d01"}, {"problem": 23, "code": "#(into '() %)", "user": "59777e42e4b01722bebd4cf0"}, {"problem": 23, "code": "(fn r[coll]\n  (if (empty? coll)\n    []\n    (conj (r (rest coll)) (first coll))))", "user": "5978305be4b01722bebd4d03"}, {"problem": 23, "code": "#(into () %)", "user": "5935151ee4b072a2710fd084"}, {"problem": 23, "code": "reduce #(concat [%2] %1) []", "user": "5978b4c9e4b01722bebd4d13"}, {"problem": 23, "code": "#(reduce (fn [list elm] (cons elm list)) nil %)", "user": "5974d2ede4b01722bebd4cb6"}, {"problem": 23, "code": "(fn my-reverse\n   ([coll]\n    (my-reverse coll '()))\n   ([coll acc]\n    (cond\n      (empty? coll) acc\n      :else (recur (rest coll)\n                   (conj acc (first coll))))))", "user": "596f01a5e4b069c0a1a19870"}, {"problem": 23, "code": "#(loop [lst % res '()] (if (empty? lst) res (recur (rest lst) (conj res (first lst)))))", "user": "5979cd36e4b02382a38ad1d8"}, {"problem": 23, "code": "(fn [s]\n  (loop [acc [] tail s]\n    (if (empty? tail)\n      acc\n      (recur (conj acc (last tail )) (butlast tail)))))", "user": "596539dce4b069c0a1a19783"}, {"problem": 23, "code": "#(reduce (fn [a i] (conj a i)) '() (seq %))", "user": "597a8928e4b02382a38ad1ea"}, {"problem": 23, "code": "(fn rev-seq\n  [s] (if (= (count s) 1)\n         s\n         (cons (last s) (rev-seq (butlast s)))))", "user": "597a7418e4b02382a38ad1e9"}, {"problem": 23, "code": "(fn [lst] (loop [rlst [] i lst] (cond (empty? i) rlst :else (recur (cons (first i) rlst) (rest i)))))", "user": "597bac8be4b02382a38ad202"}, {"problem": 23, "code": "#(reduce (fn [x y] (cons y x)) '() %)", "user": "597614a3e4b01722bebd4cd5"}, {"problem": 23, "code": "reduce conj '()", "user": "5976da27e4b01722bebd4ce3"}, {"problem": 23, "code": ";(fn [arg] \n;  (loop [rez ()\n;         obj arg] \n;    (if (empty? obj)\n;      rez\n;      (recur (conj rez (first obj)) \n;             (rest obj) ) )))\n;\n;(fn [sq] (vec (reduce #(conj %1 %2) () sq)))\n(fn [sq] (reduce conj () sq))", "user": "597af3f7e4b02382a38ad1f0"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5934705fe4b072a2710fd078"}, {"problem": 23, "code": "sort (fn [a b] (compare b a))", "user": "597b878ee4b02382a38ad1fb"}, {"problem": 23, "code": "#(into () %)", "user": "593bccfae4b069cdc2982b7f"}, {"problem": 23, "code": "#(into '() %)", "user": "597b814ae4b02382a38ad1fa"}, {"problem": 23, "code": "(fn [x] (reduce #(cons %2 %1) [] x))", "user": "597d0e43e4b0dbe32238d095"}, {"problem": 23, "code": "(fn [x] (into '() x))", "user": "51864ee8e4b0da5a5be3bacc"}, {"problem": 23, "code": "into '()", "user": "597dcb0ce4b0dbe32238d0a2"}, {"problem": 23, "code": "#(into () %)", "user": "597e128ee4b0dbe32238d0a4"}, {"problem": 23, "code": "(fn [s]\n  (loop [s s r '()]\n    (if (empty? s)\n      r\n      (recur (next s) (cons (first s) r)))))", "user": "585aeddbe4b0f14aab7c875b"}, {"problem": 23, "code": "(fn [coll] (reduce conj () coll))", "user": "59690e79e4b069c0a1a197e0"}, {"problem": 23, "code": "(fn [arg]\n  (loop [result nil remaining arg]\n    (if (empty? remaining) result (recur (conj result (first remaining)) (rest remaining)))))", "user": "597f8c93e4b0dbe32238d0c1"}, {"problem": 23, "code": "#(reduce (fn [accum x]\n           (conj accum x))\n         '()\n         %)", "user": "597f8984e4b0dbe32238d0bf"}, {"problem": 23, "code": "(fn myreverse [coll] (if (= 1 (count coll)) coll (concat (myreverse (rest coll)) [(first coll)])))", "user": "59804b60e4b021a7a535fdcf"}, {"problem": 23, "code": "#(apply conj '() %)", "user": "541adefbe4b01498b1a71a5f"}, {"problem": 23, "code": "#(reduce (fn [a v] (cons v a)) '() %)", "user": "5980dcd5e4b021a7a535fddb"}, {"problem": 23, "code": "(fn foo\n  ([xs]\n   (foo xs []))\n  ([xs rxs]\n   (if-not (seq xs)\n    rxs\n    (foo (butlast xs) (conj rxs (last xs))))))", "user": "5980f91ae4b021a7a535fddd"}, {"problem": 23, "code": "(fn r [a s]\n  (if (empty? s)\n    a\n    (recur (cons (first s) a) (rest s)))) []", "user": "597a4277e4b02382a38ad1e2"}, {"problem": 23, "code": "(fn [coll]\n   (reduce\n    (fn [reversed n]\n      (conj reversed n))\n    '() coll))", "user": "598216d9e4b021a7a535fdf8"}, {"problem": 23, "code": "(fn [coll] (reduce conj () coll))", "user": "598210a6e4b021a7a535fdf7"}, {"problem": 23, "code": "(fn [s]\n         (seq (reduce\n               (fn [m i] (conj m i))\n               '() s)))", "user": "597f8a4be4b0dbe32238d0c0"}, {"problem": 23, "code": "#(into () %)", "user": "598085e6e4b021a7a535fdd3"}, {"problem": 23, "code": "reduce conj '()", "user": "5981d03ae4b021a7a535fdf0"}, {"problem": 23, "code": "reduce conj ()", "user": "59826556e4b021a7a535fdfe"}, {"problem": 23, "code": "#(reduce (fn [reversed el] (conj reversed el)) () %)", "user": "59837909e4b021a7a535fe16"}, {"problem": 23, "code": "#(into '() %1)", "user": "5841b8dde4b089d5ab817e0d"}, {"problem": 23, "code": "(fn [x]\n   (reduce \n    (fn [a b] (into [b] a))\n    [] x))", "user": "5984b9f3e4b021a7a535fe33"}, {"problem": 23, "code": "#(into '() %)", "user": "598588f2e4b021a7a535fe65"}, {"problem": 23, "code": "reduce conj '()", "user": "594bc16be4b07ddc2dafae39"}, {"problem": 23, "code": "(fn [s]\n  \t((fn [hd rt]\n      \t(if (not (seq hd)) rt (recur (rest hd)(conj rt (first hd))))\n      ) s '())\n  )", "user": "59858cdbe4b021a7a535fe66"}, {"problem": 23, "code": "#(loop [result [] c %]\n    (if(empty? c) result\n    (recur (cons (first c) result) (rest c) )\n))", "user": "597b72ede4b02382a38ad1f9"}, {"problem": 23, "code": "(fn revseq\n  [sq]\n  (case sq\n    [] []\n    (let [x (first sq)\n          xs (rest sq)]\n         (concat (revseq xs) [x])\n     )))", "user": "59863a26e4b021a7a535fe87"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5982d82be4b021a7a535fe05"}, {"problem": 23, "code": "reduce conj '()", "user": "59884b32e4b021a7a535feb2"}, {"problem": 23, "code": "#(loop [x %\n         result []]\n    (if (> (count x) 0)\n      (recur (take (- (count x) 1) x) (conj result (last x)))\n      result))", "user": "59881937e4b021a7a535feaf"}, {"problem": 23, "code": "reduce conj ()", "user": "59753ddce4b01722bebd4cc1"}, {"problem": 23, "code": "#(apply conj '() (vec %))", "user": "598858d0e4b021a7a535feb5"}, {"problem": 23, "code": "#(reduce (fn [initial x] (conj initial x)) '() %1)", "user": "5989e080e4b021a7a535fed6"}, {"problem": 23, "code": "(fn [items] (reduce #(cons %2 %1) '() items))", "user": "5989ee61e4b021a7a535fed7"}, {"problem": 23, "code": "#(apply conj () %)", "user": "598876fee4b021a7a535feb7"}, {"problem": 23, "code": "#(loop [xs % answ ()]\n   (if (seq xs) (recur (rest xs) (cons (first xs) answ)) answ))", "user": "597768d0e4b01722bebd4cee"}, {"problem": 23, "code": "#(into () %)", "user": "5987f5b1e4b021a7a535fead"}, {"problem": 23, "code": "reduce conj ()", "user": "598ad666e4b02b9968b84ce1"}, {"problem": 23, "code": "apply conj '()", "user": "598ab445e4b02b9968b84ce0"}, {"problem": 23, "code": "(fn [coll] (loop [in coll out []] (if (empty? in) out (recur (rest in) (cons (first in) out)))))", "user": "591610d4e4b09b4ee5954b7e"}, {"problem": 23, "code": "(fn f [x] \n  (if (empty? x)\n    []\n    (concat [(last x)]\n      (f (butlast x)))))", "user": "598a4ff7e4b02b9968b84cda"}, {"problem": 23, "code": "(fn [lst]\n  (loop [result []\n         l lst]\n    (if (empty? l)\n      result\n      (recur \n       (conj result (last l)) \n       (drop-last l)))))", "user": "55c216dde4b0e31453f64974"}, {"problem": 23, "code": "#(into '() %)", "user": "598229ebe4b021a7a535fdfc"}, {"problem": 23, "code": "#(into (list) %) ;;Works because (list), prepends elements, rather than appends.", "user": "598c8db8e4b02b9968b84d06"}, {"problem": 23, "code": "(fn [xs] (into '() xs))", "user": "5845531de4b089d5ab817e63"}, {"problem": 23, "code": "(fn foo [x] (when (> (count x) 0) (conj (foo (drop-last x)) (last x))))", "user": "598d22b1e4b02b9968b84d1a"}, {"problem": 23, "code": "(fn foo [x] (when (> (count x) 0) (conj (foo (drop-last x)) (last x))))", "user": "598d0dc3e4b02b9968b84d18"}, {"problem": 23, "code": "(fn rev [a]\n  (let [s (seq a)\n        rrev (fn [s r]\n               (if (empty? s) r\n                 (recur (rest s)\n                        (conj r (first s)))))]\n    (rrev s '())))", "user": "598dc40ce4b02b9968b84d2c"}, {"problem": 23, "code": "(fn [x]\n\t\t(loop [y x\n\t\t\t   result []]\n\t\t\t(if (empty? y)\n\t\t\t\tresult\n\t\t\t\t(recur (rest y) (cons (first y) result))\n\t\t\t)\n\t\t)\n\t)", "user": "598d746ae4b02b9968b84d23"}, {"problem": 23, "code": "#(into '() %)", "user": "598debf0e4b02b9968b84d2e"}, {"problem": 23, "code": "(fn [s] (reduce conj '() s))", "user": "598e7998e4b02b9968b84d34"}, {"problem": 23, "code": "(fn [coll] (\n\t\t(fn [remaining acc]\n\t\t\t(if (<= (count remaining) 1)\n\t\t\t\t(concat remaining acc)\n\t\t\t\t(recur (rest remaining) (concat [(first remaining)] acc))))\n\t\t(rest coll) [(first coll)]))", "user": "598af379e4b02b9968b84ce6"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "598612f9e4b021a7a535fe7e"}, {"problem": 23, "code": "reduce conj ()", "user": "596d630ae4b069c0a1a19846"}, {"problem": 23, "code": "#(loop\n   [o %\n    n '()]\n   (if (empty? o)\n     n\n     (recur (rest o) (conj n (first o)))))", "user": "59902fede4b0fcebec4de86d"}, {"problem": 23, "code": "#(into () %)", "user": "5990bab4e4b0866487ed0d55"}, {"problem": 23, "code": "#(loop [remainder % acc '()] (if (empty? remainder)\n                                 acc\n                                 (recur (drop 1 remainder)\n                                        (conj acc (first remainder))\n                                 )\n                             )\n )", "user": "5990fcb9e4b0866487ed0d5b"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "598d10cae4b02b9968b84d19"}, {"problem": 23, "code": "(fn [coll]\n  (loop [r (rest coll) \n         acc (conj ()\n                   (first coll))]\n    (if\n      (zero? (count r))\n      acc\n      (recur (rest r)\n             (conj acc\n                   (first r))))))", "user": "5990a9fde4b0866487ed0d54"}, {"problem": 23, "code": "#(into () %)", "user": "5991d9cbe4b0866487ed0d69"}, {"problem": 23, "code": "reduce conj '()", "user": "583585f7e4b089d5ab817ce0"}, {"problem": 23, "code": "(fn[coll](reduce (fn [x y] (conj  (rest (conj x y)) (first (conj x y)))) [] coll))", "user": "596b753fe4b069c0a1a19818"}, {"problem": 23, "code": "#(into () %)", "user": "597fa3fbe4b021a7a535fdbf"}, {"problem": 23, "code": "(fn [lst] (reduce conj () lst))", "user": "59933537e4b0b211ea3aaaaf"}, {"problem": 23, "code": "reduce conj ()", "user": "59932dc1e4b0b211ea3aaaad"}, {"problem": 23, "code": "apply conj '()", "user": "5992dc6ae4b0866487ed0d7d"}, {"problem": 23, "code": "(fn [col]                                                                                                                                           \n  (into '() col))", "user": "59932f49e4b0b211ea3aaaae"}, {"problem": 23, "code": "(fn [xs]\n  (loop [out '() in xs]\n    (if (not-empty in)\n      (recur (cons (first in) out) (rest in))\n      out)))", "user": "5993b28ee4b0b211ea3aaaba"}, {"problem": 23, "code": "#(loop [f (take 1 %) r (next %)]\n  (if (nil? r)\n    f\n    (recur (concat (take 1 r) f) (next r))\n    )\n  )", "user": "5992de05e4b0866487ed0d7e"}, {"problem": 23, "code": "#(loop [ol %\n        rl '()]\n   (if (empty? ol) rl\n   (recur (rest ol) (conj rl (first ol)))))", "user": "599475aae4b0b211ea3aaac8"}, {"problem": 23, "code": "(fn [seq] (let [n (count seq)\n                v (vec seq)]\n             (map\n               #(get v (- n % 1))\n               (vec (range n)))))", "user": "59908f3fe4b0866487ed0d50"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "59944e73e4b0b211ea3aaac2"}, {"problem": 23, "code": "into ()", "user": "5995cc1ae4b0b211ea3aaae8"}, {"problem": 23, "code": "(fn rvrs [xs]\n  (when xs\n    (cons (last xs) (rvrs (butlast xs)))))", "user": "59971e2de4b07157cc8daacc"}, {"problem": 23, "code": "into ()", "user": "59967c40e4b0b211ea3aaaf2"}, {"problem": 23, "code": "reduce #(cons %2 %1) []", "user": "59874ff6e4b021a7a535fea1"}, {"problem": 23, "code": "reduce conj nil", "user": "59987f02e4b07157cc8daae7"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5999648ce4b07157cc8daaf3"}, {"problem": 23, "code": "reduce #(into [%2] %1) []", "user": "5999fe10e4b07157cc8dab02"}, {"problem": 23, "code": "into '()", "user": "598c5a0ee4b02b9968b84d03"}, {"problem": 23, "code": "(fn myreverse [xs]\n  (cond\n    (empty? xs) xs\n    :else (concat (myreverse (rest xs)) (list (first xs)))))", "user": "5998643de4b07157cc8daae3"}, {"problem": 23, "code": "(fn [xs]\n  (reduce (fn [acc x]\n            (cons x acc)) (empty xs) xs))", "user": "55b28b57e4b01b9910ae296c"}, {"problem": 23, "code": "(fn [coll]\n  (loop [s '()\n         remainder coll]\n    (if (seq remainder)\n      (recur (conj s (first remainder))\n             (rest remainder))\n      s)))", "user": "59971dcbe4b07157cc8daacb"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "59946856e4b0b211ea3aaac7"}, {"problem": 23, "code": "(fn [lst] (reduce conj () lst))", "user": "599acb39e4b07157cc8dab14"}, {"problem": 23, "code": "into ()", "user": "5996fd2be4b07157cc8daac5"}, {"problem": 23, "code": "reduce conj '()", "user": "599b845ee4b010b4cc4bca09"}, {"problem": 23, "code": "(fn [xs]\n\t(loop [l xs acc '()]\n\t\t(if (= l '())\n\t\t\tacc\n\t\t\t(recur (rest l) (concat (list (first l)) acc)))))", "user": "5996b419e4b07157cc8daab5"}, {"problem": 23, "code": "(fn [s] (loop [s s r ()] (if (empty? s) r (recur (rest s) (conj r (first s))))))", "user": "5995f8ade4b0b211ea3aaae9"}, {"problem": 23, "code": "(fn func ([x] (func x [] 0)) ([x y z] \n                               (if (= z (count x)) y\n                                   (func x (conj y (nth (into [] x) (- (count x) (+ 1 z)))) (inc z) ))))", "user": "599b457ae4b07157cc8dab1f"}, {"problem": 23, "code": "(fn rev [xs]\n (when xs\n  (cons (last xs)\n        (rev (butlast xs))\n  )\n )\n)", "user": "599d49a7e4b0871e7608b7f4"}, {"problem": 23, "code": "into '()", "user": "58278f54e4b051871117bf26"}, {"problem": 23, "code": "reduce conj '()", "user": "599df601e4b0871e7608b801"}, {"problem": 23, "code": "(partial reduce conj ())", "user": "5960a1a6e4b066ee0a44b08e"}, {"problem": 23, "code": "(fn [coll] (into '() coll))", "user": "599ed08fe4b0871e7608b812"}, {"problem": 23, "code": "(fn [xs] (reduce (fn [acc x] (cons x acc)) [] xs))", "user": "594be1cce4b07ddc2dafae47"}, {"problem": 23, "code": "(fn rev\n  ([items] (rev items []))\n  ([items reversed]\n  \t(if (empty? items)\n      \treversed\n        (recur (rest items) (cons (first items) reversed))\n  \t)\n  )\n)", "user": "5991d2fae4b0866487ed0d68"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "59a06dbce4b0871e7608b834"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "59a0235de4b0871e7608b82b"}, {"problem": 23, "code": "(fn [s]\n     (reduce (fn [l x] (conj l x)) '() s))", "user": "594ea2a4e4b07ddc2dafaeb6"}, {"problem": 23, "code": "#(reduce conj '() %1)", "user": "59a0ceeae4b0871e7608b840"}, {"problem": 23, "code": "(fn [seq]\n  (reduce\n   (fn [acc el] \n     (conj acc el))\n   '()\n   seq))", "user": "59a09b1de4b0871e7608b83a"}, {"problem": 23, "code": "reduce conj '()", "user": "59a080e3e4b0871e7608b837"}, {"problem": 23, "code": "(partial\n  (fn [acc col]\n    (if (empty? (rest col))\n      (cons (first col) acc)\n      (recur (cons (first col) acc) (rest col))\n    )\n  )\n[])", "user": "59a180b3e4b0871e7608b852"}, {"problem": 23, "code": "reduce conj ()", "user": "4fe61bdde4b0e8f79898fecf"}, {"problem": 23, "code": "#(loop [in % out `()]\n   (if (empty? in)\n     out\n     (recur\n      (rest in) \n      (conj out (first in)))))", "user": "576c2ecae4b07c67f59d1fbb"}, {"problem": 23, "code": "#(into () %)", "user": "59a0fb85e4b0871e7608b845"}, {"problem": 23, "code": "(fn f [c] (if (= (count c) 0) [] (conj (f (rest c)) (first c))))", "user": "59a24c92e4b066c664927d20"}, {"problem": 23, "code": "reduce #(conj %1 %2) '()", "user": "59a2ba97e4b066c664927d2c"}, {"problem": 23, "code": "#(reduce (fn [acc, elem] (cons elem acc)) '() %)", "user": "59135c11e4b0163c97b36f02"}, {"problem": 23, "code": "(fn rev[coll]\n  (loop [r (rest coll)\n         acc (conj () (first coll))]\n    (if (= (count r) 0)\n      acc\n      (recur (rest r) (conj acc (first r))))))", "user": "59a2fb98e4b066c664927d31"}, {"problem": 23, "code": "(fn [s] (reduce #(conj %1 %2) '() s))", "user": "598229d6e4b021a7a535fdfb"}, {"problem": 23, "code": "(fn[coll](reduce conj () coll))", "user": "59a1a137e4b066c664927d11"}, {"problem": 23, "code": "(fn [l] (\n  loop [remaining l reversed []] \n  (if (empty? remaining)\n  reversed\n  (recur (take (dec (count remaining)) remaining) (conj reversed (last remaining))) \n)))", "user": "59a0262ee4b0871e7608b82d"}, {"problem": 23, "code": "reduce conj '()", "user": "59a460ede4b066c664927d52"}, {"problem": 23, "code": "(fn [coll]\n  (loop [sec coll acc '()]\n  (if (empty? sec)\n    acc\n   (recur (rest sec) (conj acc (first sec))))))", "user": "59250d2be4b072a2710fce64"}, {"problem": 23, "code": "(fn [ls]\n  (reduce #(conj %1 %2) '() ls))", "user": "59a512b7e4b066c664927d5e"}, {"problem": 23, "code": "(fn my-reverse [a-seq]\n  (let [helper (fn [a-seq element]\n                 (if (nil? element)\n                   a-seq\n                   (reduce conj (vector element) a-seq)))]\n(reduce helper [] a-seq)))", "user": "59a58bf0e4b066c664927d64"}, {"problem": 23, "code": "(fn [x]\n  (reduce\n   conj\n   ()\n   x))", "user": "59639142e4b066ee0a44b0ce"}, {"problem": 23, "code": "#(reduce (fn [a b] (conj a b)) '() %)", "user": "569d3f9ae4b0542e1f8d147a"}, {"problem": 23, "code": "into '()", "user": "59a0ddc0e4b0871e7608b841"}, {"problem": 23, "code": "reduce conj ()", "user": "59a57e91e4b066c664927d63"}, {"problem": 23, "code": "reduce conj '()", "user": "59a72effe4b066c664927d94"}, {"problem": 23, "code": "(fn [x]\n  (into () x))", "user": "59a6f1c7e4b066c664927d89"}, {"problem": 23, "code": "(fn [c] (reduce conj '() c))", "user": "59a8405ce4b0bcf4e9a43af1"}, {"problem": 23, "code": "#(loop [orig-seq %\n        new-seq nil]\n   (if (empty? orig-seq)\n     new-seq\n     (recur (rest orig-seq) (cons (first orig-seq) new-seq))))", "user": "59a96a85e4b0bcf4e9a43b13"}, {"problem": 23, "code": "(fn [coll] (reduce #(cons %2 %1) [] coll) )", "user": "59a80652e4b0bcf4e9a43aeb"}, {"problem": 23, "code": "(fn [coll]\n  (reduce (fn [c a]\n            (into [a] (vec c))) [] coll))", "user": "59aad3d4e4b08cbb53654d88"}, {"problem": 23, "code": "reduce conj ()", "user": "59ab589ce4b08cbb53654d98"}, {"problem": 23, "code": "reduce #(cons %2 %1) []", "user": "59ab8beee4b08cbb53654d9e"}, {"problem": 23, "code": "(fn [l]\n  (loop [xs l res '()]\n    (if (empty? xs)\n      res\n      (recur (rest xs) (conj res (first xs))))))", "user": "59abd1d8e4b08cbb53654da4"}, {"problem": 23, "code": "(fn\n  [coll]\n   (reduce #(cons %2 %1) (list) coll))", "user": "59ac0965e4b08cbb53654da6"}, {"problem": 23, "code": "(fn [x] (into () x))", "user": "59ac559ee4b00adcf69795d2"}, {"problem": 23, "code": "(fn [seq2] \n  (loop [seq2 seq2 \n         acc (empty seq2)] \n    (if (empty? seq2) \n      acc \n      (recur (rest seq2) \n             (cons (first seq2) acc)))))", "user": "591770dae4b09b4ee5954b9c"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "59a3f3dce4b066c664927d48"}, {"problem": 23, "code": ";reduce (fn [a e] (cons e a)) []\nreduce #(cons %2 %) []", "user": "59ad2fcee4b00adcf69795de"}, {"problem": 23, "code": "(fn [x] (into '() x))", "user": "59ac1fb5e4b08cbb53654da7"}, {"problem": 23, "code": "#(into '() %)", "user": "59ada340e4b0e1f4e384c88f"}, {"problem": 23, "code": "(fn [s] (loop [new-s '() s s] (if (empty? s) new-s (recur (conj new-s (first s)) (rest s)))))", "user": "59ac757fe4b00adcf69795d3"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "59a9e517e4b08cbb53654d79"}, {"problem": 23, "code": "(fn\n      [col]\n      (reduce conj () col))", "user": "59ab61f1e4b08cbb53654d9b"}, {"problem": 23, "code": "(fn inner\n  ([xs]\n\t(inner xs []))\n  ([xs result]\n   (if (= 0 (count xs))\n     result\n     (inner (rest xs) (cons (first xs) result)))))", "user": "59a90b2ae4b0bcf4e9a43aff"}, {"problem": 23, "code": "(fn reverse-recursively [coll]\n  (loop [[r & more :as all] (seq coll)\n         acc '()]\n    (if all\n      (recur more (cons r acc))\n      acc)))", "user": "59a2d49de4b066c664927d30"}, {"problem": 23, "code": "reduce #(cons %2 %) []", "user": "59adec09e4b0e1f4e384c897"}, {"problem": 23, "code": "(fn [coll]\n  (reduce conj '() coll))", "user": "59affcdee4b0e1f4e384c8c2"}, {"problem": 23, "code": "(fn [s] (apply conj '() s))", "user": "59aeed59e4b0e1f4e384c8ab"}, {"problem": 23, "code": "(fn [lst] (reduce conj '() lst))", "user": "59b05f0ee4b0e1f4e384c8cc"}, {"problem": 23, "code": "(fn me [x]\n  (if (empty? x)\n  []\n  (conj (me (rest x)) (first x)))\n  )", "user": "57086931e4b0b0fb43fd069e"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "59b18dbfe4b0e1f4e384c8e4"}, {"problem": 23, "code": "reduce conj '()", "user": "59b1a1b2e4b0e1f4e384c8eb"}, {"problem": 23, "code": "(fn [[& elts]]\n  (apply conj '() elts))", "user": "59b1c2eae4b0e1f4e384c8ec"}, {"problem": 23, "code": "(fn rev [s]\n  (if (empty? s)\n    []\n    (conj (rev (rest s)) (first s))))", "user": "59b21070e4b0e1f4e384c8f2"}, {"problem": 23, "code": "reduce conj '()", "user": "59089229e4b047aa04b1997c"}, {"problem": 23, "code": "(\n fn [sequ] (\n            reduce conj `() sequ\n            )\n )", "user": "59b2d51be4b0e1f4e384c902"}, {"problem": 23, "code": "(fn rev [xs]\n  (cond\n   (empty? xs) xs\n   (empty? (rest xs)) xs\n   :else (concat (rev (rest xs)) [(first xs)])))", "user": "59ad8695e4b0e1f4e384c887"}, {"problem": 23, "code": "reduce conj ()", "user": "59a31c55e4b066c664927d34"}, {"problem": 23, "code": "#(into () %)", "user": "59b0e877e4b0e1f4e384c8d3"}, {"problem": 23, "code": "(fn\n\t[coll]\n\t(if (vector? coll)\n\t\t(apply vector (apply conj (list) coll))\n\t\t(apply conj (list) coll)))", "user": "59b62f8de4b05c620303ca1f"}, {"problem": 23, "code": "#(loop [oldSeq % newSeq '()]\n   (if (empty? oldSeq)\n     newSeq\n     (recur (rest oldSeq) (conj newSeq (first oldSeq)))))", "user": "59b554cee4b05c620303ca0f"}, {"problem": 23, "code": "(fn rev [lst]\n  (if (= 1 (count lst))\n    (list (last lst))\n    (concat\n     (list (last lst))\n     (rev (drop-last lst)))))", "user": "59b2e383e4b0e1f4e384c903"}, {"problem": 23, "code": "#(into () %1)", "user": "59a1fd6be4b066c664927d1b"}, {"problem": 23, "code": "(fn mycount\n  [xs]\n  (loop [coll xs\n         final-coll []]\n\n    (if (empty? coll)\n      final-coll\n      (recur (butlast coll)\n             (conj final-coll (last coll))))))", "user": "59afe4bae4b0e1f4e384c8c0"}, {"problem": 23, "code": "reduce conj '()", "user": "59b2b093e4b0e1f4e384c8fd"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "57ac2d6be4b0b8559636fc83"}, {"problem": 23, "code": ";#(into () %1)\ninto ()", "user": "59b8ee96e4b0a024fb6ae3c0"}, {"problem": 23, "code": "#(loop [col  %\r\n       rev '()]\r\n  (if (empty? col)\r\n    rev\r\n    (recur (rest col)\r\n           (conj  rev (first col)))))", "user": "58a0e9bfe4b02bd94d917ea1"}, {"problem": 23, "code": "(fn f[coll]\n  (cond (empty? coll) (vec coll)\n        :else (conj (f (rest coll)) (first coll))))", "user": "59ba2ea0e4b0a024fb6ae3e1"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "55fd0d19e4b0f488688e067a"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "59b8b04de4b05c620303ca57"}, {"problem": 23, "code": "(fn\n  [l]\n  (loop [r [] x l]\n    (if (nil? (next x))\n      (cons (first x) r)\n      (recur (cons (first x) r)(rest x))\n      )))", "user": "59a9c22ae4b08cbb53654d75"}, {"problem": 23, "code": "into ()", "user": "59bcbfd0e4b0a024fb6ae419"}, {"problem": 23, "code": "#(into () %)", "user": "59bac5c9e4b0a024fb6ae3ed"}, {"problem": 23, "code": "#(into () %)", "user": "5998b0a1e4b07157cc8daaec"}, {"problem": 23, "code": "(fn [s] (reduce conj '() s))", "user": "59bdeb22e4b0a024fb6ae42d"}, {"problem": 23, "code": "#(reduce (fn [new-seq h] (conj new-seq h)) '() %)", "user": "59be62d5e4b0a024fb6ae435"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "4ec54160535d6d7199dd368c"}, {"problem": 23, "code": "(fn rev [sq]\n  (loop [sq sq reseq '()]\n    (if (empty? sq) reseq\n      (recur (rest sq) (conj reseq (first sq))))))", "user": "59b7120fe4b05c620303ca3b"}, {"problem": 23, "code": "#(loop [s %1 r '()]\n    (if (empty? s)\n        r\n        (recur \n          (rest s)\n          (cons \n            (first s) \n            r)))\n  )", "user": "4eab2f2b535d7eef30807312"}, {"problem": 23, "code": "(fn [sq]\n   (loop [cnt (count sq) s (seq sq) acc (vector (last sq))]\n     (if (= 1 cnt)\n       acc\n       (recur (dec cnt) s (conj acc (nth s (- cnt 2)))))))", "user": "59c147afe4b0a024fb6ae481"}, {"problem": 23, "code": "#(reduce (fn [acc v] (cons v acc)) (empty %) %)", "user": "59c20641e4b0a024fb6ae49a"}, {"problem": 23, "code": "reduce conj ()", "user": "59c22fbae4b0a024fb6ae4a3"}, {"problem": 23, "code": "(fn reverse2\n  ([coll]\n    (if (empty? coll)\n      nil\n      (reverse2 (rest coll) (list(first coll)))))\n  ([coll revcoll] \n   (if (empty? coll)\n     revcoll\n     (reverse2 (rest coll) (conj revcoll (first coll))))))", "user": "59bfd910e4b0a024fb6ae459"}, {"problem": 23, "code": "#(reduce (fn [acc x] (cons x acc)) (empty %) %)", "user": "59358f74e4b04f87174def52"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "54c98ac0e4b045293a27f679"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "597db9eee4b0dbe32238d0a0"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "59c3b24ee4b0a024fb6ae4e1"}, {"problem": 23, "code": "#(loop [coll % acc ()] (if (empty? coll) acc (recur (rest coll) (cons (first coll) acc))))", "user": "591a7ce9e4b09b4ee5954bd8"}, {"problem": 23, "code": ";(fn [collection]\n\n;  (loop [xs collection result []]\n\n;       (if (= 0 (count xs))\n\n;          result\n\n;          (recur (drop-last xs) (conj result (last xs))))))\n\n#(reduce conj () %)", "user": "59c5093ce4b0a024fb6ae50c"}, {"problem": 23, "code": "#(into ()%)", "user": "59c190c3e4b0a024fb6ae48b"}, {"problem": 23, "code": "reduce conj '()", "user": "58fc4963e4b0438e51c2cf91"}, {"problem": 23, "code": "(fn [list] \n   (loop\n     \t[forward list, reversed []]\n     \t(if (empty? forward)\n          \treversed\n          \t(recur\n             \t(take (dec (count forward)) forward)\n             \t(conj reversed (last forward))\n            )\n        )\n   )\n)", "user": "59c72175e4b0a024fb6ae53c"}, {"problem": 23, "code": "(fn [c] (reduce conj '() c))", "user": "59c74c28e4b0a024fb6ae540"}, {"problem": 23, "code": "#(loop [mycol % reversed []]\n    (if (empty? mycol)\n        reversed\n        (recur (rest mycol) (cons (first mycol) reversed))))", "user": "536fd48be4b0fc7073fd6e88"}, {"problem": 23, "code": "#(reduce conj `()%)", "user": "59c734e3e4b0a024fb6ae53f"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "59c91fa4e4b0a024fb6ae573"}, {"problem": 23, "code": "reduce conj '()", "user": "59c94a69e4b0a024fb6ae576"}, {"problem": 23, "code": "(fn [a] (reduce #(cons %2 %1) '() a))", "user": "59c7c2cde4b0a024fb6ae54b"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5587cd80e4b059ccff29b1e5"}, {"problem": 23, "code": "(fn\n  [s]\n  (reduce conj '() s))", "user": "59c4d93fe4b0a024fb6ae507"}, {"problem": 23, "code": "(fn my-rev\n  ([x] (my-rev x []))\n  ([orig res] (if-let [remaining (not-empty orig)]\n               (recur\n                 (butlast remaining)\n                 (conj res (last remaining)))\n               res)))", "user": "59c3a7e9e4b0a024fb6ae4df"}, {"problem": 23, "code": "reduce conj ()", "user": "59c12c50e4b0a024fb6ae47a"}, {"problem": 23, "code": "reduce #(cons %2 %) []", "user": "59c8c9bee4b0a024fb6ae567"}, {"problem": 23, "code": "reduce conj ()", "user": "59cbc381e4b0a024fb6ae5c6"}, {"problem": 23, "code": "#(reduce (fn [y x] (conj y x)) '() %)", "user": "59cc6c1ee4b0a024fb6ae5d2"}, {"problem": 23, "code": "(fn [s]\n  (reduce #(cons %2 %1) '() s))", "user": "59cb706ee4b0a024fb6ae5ba"}, {"problem": 23, "code": "(fn [x] (into '() x))", "user": "59cc05e4e4b0a024fb6ae5cb"}, {"problem": 23, "code": "#(loop [s % ns []]\n\n   (if (nil? (first s))\n\n     ns\n\n     (recur (rest s) (concat (list (first s)) ns))))", "user": "594a7ed1e4b07ddc2dafae02"}, {"problem": 23, "code": "(fn [xs] \n  (reduce (fn [acc x] (conj acc x)) '() xs))", "user": "59cc8d8de4b0a024fb6ae5d5"}, {"problem": 23, "code": "#(into '() %)", "user": "59c3d1e7e4b0a024fb6ae4e5"}, {"problem": 23, "code": "; #(loop[s % r nil]\n  ;        (if (empty? s) r\n   ;           (recur (rest s) (cons (first s) r))))\n  \n  \n  #(reduce conj '() %)", "user": "59c77511e4b0a024fb6ae545"}, {"problem": 23, "code": "reduce conj (list)", "user": "59cdea74e4b0ef0a1e9b5b47"}, {"problem": 23, "code": "#(into () %)", "user": "58dc5ceae4b0a4d5acaab69b"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "59cf0d75e4b0ef0a1e9b5b5f"}, {"problem": 23, "code": "(fn [ll]\n  (cond\n    (vector? ll) (vec (reduce (fn [sum x] (cons x sum)) () ll))\n    :else (reduce (fn [sum x] (cons x sum)) () ll)))", "user": "59cf4013e4b0ef0a1e9b5b68"}, {"problem": 23, "code": "(fn [seq] (reduce (fn [prev curr] (concat [curr] prev)) [] seq))", "user": "5984e7dee4b021a7a535fe43"}, {"problem": 23, "code": "(fn [x] (reduce conj () x))", "user": "59cf6fbce4b0ef0a1e9b5b6c"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "59c6de70e4b0a024fb6ae538"}, {"problem": 23, "code": "(fn [l] (into (list) l))", "user": "59d02bfbe4b0ef0a1e9b5b7b"}, {"problem": 23, "code": "(fn [seq]\r\n    (loop [there seq here []]\r\n     (if (empty? there)\r\n     here\r\n     (recur (rest there)     (cons(first there) here)))))", "user": "4ddc5d0a535d02782fcbea05"}, {"problem": 23, "code": "(fn [l]\n  (loop [l l res (empty l)]\n   (if (empty? l)\n     res\n     (recur (rest l) (cons (first l) res)))))", "user": "59d1e9cfe4b0ef0a1e9b5b95"}, {"problem": 23, "code": "(fn tea [ls]\n   (cond\n    (empty? ls) ls\n    :else (cons (last ls) (tea (drop-last 1 ls)))\n))", "user": "5831846ae4b051871117c02c"}, {"problem": 23, "code": "(fn [x]\n  (loop [l x a []]\n    (if (empty? l) a\n      (recur (rest l)\n             (cons (first l) a)))))", "user": "59cbb8a0e4b0a024fb6ae5c3"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "59d3a485e4b0ef0a1e9b5bc8"}, {"problem": 23, "code": "#(reduce (fn [acc cur] (conj acc cur)) '() %)", "user": "59d3eb2fe4b0ef0a1e9b5bd7"}, {"problem": 23, "code": "(\n fn\n rev\n [x]\n ((\n  fn\n  iter\n  [a r]\n  (\n   cond\n   (empty? a)\n   r\n   :else\n   (\n    iter \n    (rest a)\n    (conj r (first a))\n   )\n  )\n )\n x '())\n)", "user": "4e6aacad535d8ccf87e9fefa"}, {"problem": 23, "code": "reduce (fn [acc n] (conj acc n)) '()", "user": "59d3db65e4b0ef0a1e9b5bd3"}, {"problem": 23, "code": "reduce conj '()", "user": "59d4a160e4b0ef0a1e9b5be7"}, {"problem": 23, "code": "reduce (fn [acc elem] (cons elem acc)) []", "user": "59d4d126e4b0ef0a1e9b5be9"}, {"problem": 23, "code": "(fn my-rev [col]\n  (loop [ col col\n          result []]\n        (if (empty? col)\n            result\n            (recur (rest col) (cons (first col) result)))))", "user": "59d68f3fe4b0ef0a1e9b5c1e"}, {"problem": 23, "code": "#(loop [sq %1 rsq (empty %1)]\n  (if (empty? sq)\n    rsq\n    (recur (rest sq) (cons (first sq) rsq))))", "user": "59d75489e4b0ef0a1e9b5c31"}, {"problem": 23, "code": "(fn [coll]\n  (into '() coll))", "user": "59d77634e4b0ef0a1e9b5c34"}, {"problem": 23, "code": "(fn [coll]\n  (reduce (fn [result elem] (cons elem result))\n          []\n          coll))", "user": "59d9186be4b0ef0a1e9b5c50"}, {"problem": 23, "code": "(fn [xs] (into '() xs))", "user": "59d9dcfbe4b0ef0a1e9b5c5d"}, {"problem": 23, "code": "(fn [s]\n  (reduce conj () s))", "user": "59c76402e4b0a024fb6ae542"}, {"problem": 23, "code": "reduce conj ()", "user": "59d9e66ae4b0ef0a1e9b5c60"}, {"problem": 23, "code": "reduce conj ()", "user": "59da6480e4b0ef0a1e9b5c68"}, {"problem": 23, "code": "(fn [x & r] \n  (if (empty? x)\n    r\n    (recur (rest x) \n           (if (nil? r)\n             (take 1 x)\n             (cons (first x) r)\n           )\n    )\n  )\n)", "user": "59d75e36e4b0ef0a1e9b5c32"}, {"problem": 23, "code": "into ()", "user": "59db6c14e4b0ef0a1e9b5c79"}, {"problem": 23, "code": ";; (reduce (fn [x xs] (conj x xs)) '() [1 2 3 4 5 5])\n\nreduce conj ()", "user": "59d631d4e4b0ef0a1e9b5c09"}, {"problem": 23, "code": "reduce conj ()", "user": "572de985e4b0cd1946bd0f7c"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "59d6cc05e4b0ef0a1e9b5c25"}, {"problem": 23, "code": "(fn [coll]\n  (let [coll (into [] coll)]\n    (loop [index (dec (count coll))\n          inicial []]\n     (if (>= index 0)\n       (recur (dec index) (conj inicial (get coll index)))\n       inicial))))", "user": "58a34442e4b02bd94d917ef2"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "59dcbfe8e4b0ef0a1e9b5ca5"}, {"problem": 23, "code": "reduce (fn [o c] (cons c o)) []", "user": "59ddae03e4b01968742fed65"}, {"problem": 23, "code": "#(loop [collReturn ()\n        coll %]\n    (if (empty? coll)\n      collReturn\n      (recur (conj collReturn (first coll)) (rest coll))))", "user": "59d63276e4b0ef0a1e9b5c0a"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "57ff52c7e4b0d3187e9009ea"}, {"problem": 23, "code": "(fn this-problemM8 [lst]\n  (loop [lista lst\n         l2    ()]\n  (if (empty? lista)\n    l2\n      (recur (rest lista)\n             (cons (first lista) l2)))) )", "user": "59deba46e4b01968742fed7f"}, {"problem": 23, "code": "(fn xxx [xs]\n  (reduce conj () xs))", "user": "59dec79ee4b01968742fed81"}, {"problem": 23, "code": "(fn [lst]\n  (sort (comp - compare) lst))", "user": "59dfd369e4b08badc2a0c4dd"}, {"problem": 23, "code": "(fn my-reverse\n  [lst]\n  (if (empty? lst)\n    lst\n    ((fn cons-end\n  [x lst]\n  (if (empty? lst)\n    (cons x lst)\n    (cons (first lst) (cons-end x (rest lst))))) (first lst) (my-reverse (rest lst)))))", "user": "59e0111ae4b08badc2a0c4e4"}, {"problem": 23, "code": "into ()", "user": "59c8ffe6e4b0a024fb6ae56c"}, {"problem": 23, "code": "(fn my-reverse\n  [lst]\n  (if (empty? lst)\n    ()\n    ((fn cons-end  [x lst]\n  (if (empty? lst)\n    (conj lst x)\n    (conj (cons-end x (rest lst)) (first lst)))) (first lst) (my-reverse (rest lst)))))", "user": "59e12c94e4b08badc2a0c509"}, {"problem": 23, "code": "(fn[lst]\n  (reduce conj () lst))", "user": "59dd387ae4b0a0ac046f2501"}, {"problem": 23, "code": "(fn my-reverse\n  [lst]\n  (if (empty? lst)\n    ()\n    (cons (last lst)\n          (my-reverse (butlast lst)))))", "user": "59e18b9be4b08badc2a0c50f"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "580e7761e4b0849f6811b753"}, {"problem": 23, "code": "(fn [x] \n  (loop [y x, i '()]\n    (if (empty? y)\n     i\n     (recur (rest y) (conj  i (first y))))))", "user": "59dfb8f9e4b08badc2a0c4db"}, {"problem": 23, "code": "(fn [s] (into () s))", "user": "59e105f2e4b08badc2a0c505"}, {"problem": 23, "code": "(fn [col]\n    (reduce\n        #(if (list? %1) (conj %1 %2) (into [%2] %1))\n        (if (vector? col) [] '())\n        col))", "user": "59aeff12e4b0e1f4e384c8af"}, {"problem": 23, "code": "#(into () %)", "user": "59da2569e4b0ef0a1e9b5c62"}, {"problem": 23, "code": "#(reduce conj '() %1)", "user": "59e0b1e1e4b08badc2a0c4f2"}, {"problem": 23, "code": "(fn m [col]\n  (let [[head & tail] (seq col)]\n      (if (seq tail) (conj (m tail) head) [head])))", "user": "59e32913e4b08badc2a0c52c"}, {"problem": 23, "code": "#(reduce conj() %)", "user": "599b3844e4b07157cc8dab1d"}, {"problem": 23, "code": "(fn reverse-me [coll]\n  (reduce #(cons %2 %1) [] coll))", "user": "59e0f38ae4b08badc2a0c500"}, {"problem": 23, "code": "reduce conj '()", "user": "59e48db0e4b08badc2a0c53e"}, {"problem": 23, "code": "(fn reverses [lst]\n  (if (empty? lst) \n    ()\n    (cons (last lst) (reverses (butlast lst)))\n  )\n)", "user": "59e4e3cbe4b08badc2a0c54a"}, {"problem": 23, "code": "#(reduce (fn [lst el] (cons el lst)) '() %)", "user": "59dd38a8e4b0a0ac046f2503"}, {"problem": 23, "code": "(fn [lista]\n  (loop [c (rest lista)\n         lstReverse (conj () (first lista))]\n    (if (empty? c)\n      (if (empty? lista)\n        ()\n        lstReverse)\n      (recur (rest c)\n             (conj lstReverse (first c))))))", "user": "59e55cc8e4b08badc2a0c555"}, {"problem": 23, "code": "(fn algo \n  [lst]\n  (loop[lst1 ()\n        lst2 lst]\n    \n    (if (empty? lst2)\n      lst1\n      (recur (cons (first lst2) lst1) (rest lst2))\n      )\n    )\n  )", "user": "59e56c75e4b08badc2a0c556"}, {"problem": 23, "code": "(fn [x]\n  (loop [m x y []]\n  (if (empty? m)\n    y\n    (recur (drop-last m) (conj y (last m))))))", "user": "59e4fc25e4b08badc2a0c54f"}, {"problem": 23, "code": "(fn [lista] (reduce (fn [accum elemento] (cons elemento accum)) '() lista))", "user": "59e63a2ce4b08badc2a0c569"}, {"problem": 23, "code": "#(reduce conj '() %1)", "user": "59e64a4be4b08badc2a0c56c"}, {"problem": 23, "code": "(fn f [l]\n  (if (empty? l) [] (conj (f (rest l)) (first l))))", "user": "59e61973e4b08badc2a0c567"}, {"problem": 23, "code": "into ()", "user": "59e61279e4b08badc2a0c563"}, {"problem": 23, "code": "(fn [varList]\n  (loop [newList [] oldList varList]\n    (if (empty? oldList)\n      newList\n      (recur (cons (first oldList) newList) (rest oldList)))))", "user": "59e0f839e4b08badc2a0c502"}, {"problem": 23, "code": "(fn [x] (into () x))", "user": "59e66ac5e4b08badc2a0c570"}, {"problem": 23, "code": "#(reduce (fn[new-list element] (conj new-list element)) '() %1)", "user": "5957cc41e4b066ee0a44af76"}, {"problem": 23, "code": "(fn rr [coll] (map #(nth %1 1) (sort #(> (first %1) (first %2)) (map-indexed list coll))))", "user": "59e62655e4b08badc2a0c568"}, {"problem": 23, "code": "(fn my-reverse\n  [lst]\n  (loop [list lst\n         rever ()]\n    (if (empty? list)\n      rever\n      (recur (rest list) (cons (first list) rever)))))", "user": "59e778aae4b0249b72820716"}, {"problem": 23, "code": "(fn my-reverse\n  [lst]\n  (loop [res () lstp lst]\n    (if (= (count lstp) 0)\n      res\n      (recur (cons (first lstp) res) (rest lstp)))))", "user": "59dd387be4b0a0ac046f2502"}, {"problem": 23, "code": "(fn Reverse-a-Sequence\n  [lst]\n  (loop [rev ()\n         lst1 lst]\n    (cond\n      (empty? lst1) rev\n      :else (recur (cons (first lst1) rev) (rest lst1)))))", "user": "59e14ee3e4b08badc2a0c50c"}, {"problem": 23, "code": "reduce conj ()", "user": "59e04fc7e4b08badc2a0c4e8"}, {"problem": 23, "code": "(fn rev-seq [lat]\n  (into '() lat))", "user": "59e8041be4b0249b72820721"}, {"problem": 23, "code": "(fn \n  [list] \n  (reduce (fn [reversed-list x]\n            (cons x reversed-list)) () list))", "user": "59dd3930e4b0a0ac046f2504"}, {"problem": 23, "code": "#(reduce (fn [x,y] (conj x y)) '() %)", "user": "59e8a952e4b0249b72820733"}, {"problem": 23, "code": "(fn my-reverse\n  [lst]\n  (if (empty? lst)\n    ()\n    (cons (last lst) (my-reverse (butlast lst)))))", "user": "59e8fef3e4b0249b72820743"}, {"problem": 23, "code": "(fn rr [coll] (map #(nth %1 1) (sort #(> (first %1) (first %2)) (map-indexed list coll))))", "user": "59e95cafe4b0249b7282074b"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "59e8c89de4b0249b72820737"}, {"problem": 23, "code": "#(into () %)", "user": "59e9f03be4b0249b72820752"}, {"problem": 23, "code": "#((fn [coll res]\n    (if (nil? coll)\n        res\n        (recur (next coll)\n               (cons (first coll) res))))% [])", "user": "59de4b38e4b01968742fed71"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "59ea287ee4b0249b72820760"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "59ea0944e4b0249b72820758"}, {"problem": 23, "code": "(fn [xs]\n  (loop [rxs ()\n         xs xs]\n    (if (empty? xs)\n      rxs\n      (recur (conj rxs (first xs)) (rest xs)))))", "user": "59ea85e4e4b0249b72820767"}, {"problem": 23, "code": "(fn my-reverse\n  [lst]\n  (loop\n    [rev () lst lst]\n    (if (empty? lst)\n      rev\n      (recur (cons (first lst) rev) (rest lst)))))", "user": "59e68254e4b0249b728206fc"}, {"problem": 23, "code": "(fn rev [a] (if (empty? a) [] (concat (rev (rest a)) [(first a)])))", "user": "59e8bb43e4b0249b72820735"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "55ec879ae4b0121d4835fdc8"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "59eb63e3e4b0249b7282077c"}, {"problem": 23, "code": "(fn [lst]\n  (loop [lst lst\n         res ()]\n    (cond \n     (empty? lst) res\n     :else (recur (rest lst) (cons (first lst) res)))))", "user": "59e8cd8be4b0249b72820739"}, {"problem": 23, "code": "#(loop [in % out ()]\n   (if (empty? in)\n     out\n     (recur (rest in) (conj out (first in)))\n     )\n   )", "user": "59ec120ae4b0249b72820787"}, {"problem": 23, "code": "(fn seq-rev [s]\n  (reduce \n    (fn [acc item] \n      (concat (seq [item]) acc)) (sequence ()) s))", "user": "59ece650e4b0249b72820795"}, {"problem": 23, "code": "(fn rr [coll] (map #(nth %1 1) (sort #(> (first %1) (first %2)) (map-indexed list coll))))", "user": "59ed01ede4b0249b7282079a"}, {"problem": 23, "code": "#(reduce (fn [acc input] (concat [input] acc)) [] %)", "user": "59e5b6a1e4b08badc2a0c55b"}, {"problem": 23, "code": ";; your solution here\n  (fn [coll]\n    (let [size (count coll)\n          y (seq coll)]\n      (loop [output []\n             x (- size 1)]\n        (if (> 0 x)\n          output\n          (recur (conj output (nth y x)) (dec x))) \n        )))", "user": "5683fcafe4b0945ebc182aa8"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "59ee3060e4b0966464fe6a12"}, {"problem": 23, "code": "into ()", "user": "5628f33ce4b00e49c7cb47f3"}, {"problem": 23, "code": "(fn rev [xs]\n  (if (= 1 (count xs))\n    xs\n    (concat (rev (rest xs)) [(first xs)])))", "user": "59ee6801e4b0966464fe6a1f"}, {"problem": 23, "code": "#(into (list) %)", "user": "59edc518e4b0966464fe6a08"}, {"problem": 23, "code": "reduce #(conj %1 %2) '()", "user": "59f189f7e4b0966464fe6a5b"}, {"problem": 23, "code": "(fn [coll]\n  (reduce #(conj %1 %2) '() coll))", "user": "59f1d218e4b0966464fe6a68"}, {"problem": 23, "code": "reduce conj ()", "user": "59ef6cfae4b0966464fe6a32"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "59f2af64e4b0966464fe6a87"}, {"problem": 23, "code": "(fn myreverse\n  [coll]\n   (println coll)\n  (if (<= (count coll) 1)\n    coll\n    (conj (myreverse (drop-last coll)) (last coll))))", "user": "5971a017e4b01722bebd4c75"}, {"problem": 23, "code": "reduce (fn [cc curr] \n         (conj cc curr)\n         ) ()", "user": "59a5b3f4e4b066c664927d69"}, {"problem": 23, "code": "#(into () %)", "user": "59f242b2e4b0966464fe6a7a"}, {"problem": 23, "code": "into ()", "user": "59f44189e4b0966464fe6aab"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "59f4d0e0e4b0966464fe6ab9"}, {"problem": 23, "code": "reduce (fn [acc elem] (conj acc elem)) '()", "user": "59f4c9c8e4b0966464fe6ab8"}, {"problem": 23, "code": "#(reduce (fn [x,y] (cons y, x)) (empty %) %)", "user": "59f4c42ce4b0966464fe6ab6"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "59f3c218e4b0966464fe6aa1"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "59f66d6fe4b0966464fe6ad2"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "59f3a4d1e4b0966464fe6a9f"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "59f6ce5de4b0966464fe6adc"}, {"problem": 23, "code": "(fn [a]\n  (loop [x a\n         y []]\n    (if (nil? x)\n      y\n      (recur (butlast x)\n             (conj y (last x))))))", "user": "59df2b8ee4b01968742fed87"}, {"problem": 23, "code": "(fn reverse-collection [coll]\n  (if (> (count coll) 1)\n    (merge (reverse-collection (take (- (count coll) 1) coll)) (last coll))\n    coll))", "user": "59f192e0e4b0966464fe6a5e"}, {"problem": 23, "code": "#(loop [result '(), d %] (if (empty? d) result (recur (conj result (first d)) (drop 1 d))))", "user": "590aaa78e4b047aa04b199c0"}, {"problem": 23, "code": "(fn rev2 [coll]\n  (vec (reduce conj () coll)))", "user": "59f37776e4b0966464fe6a9d"}, {"problem": 23, "code": "into ()", "user": "5951190be4b066ee0a44aea4"}, {"problem": 23, "code": "apply conj ()", "user": "59f043d0e4b0966464fe6a3d"}, {"problem": 23, "code": "(fn [s]\n  (loop [s1 s s2 []]\n    (if (= s1 [])\n      s2\n      (recur (rest s1) (cons (first s1) s2))\n      )\n    )\n  )", "user": "59f78b49e4b0ca45a743a30e"}, {"problem": 23, "code": "#(into [] (reduce conj () %))", "user": "59f77dfae4b0966464fe6af4"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "59b714dbe4b05c620303ca3c"}, {"problem": 23, "code": "into ()", "user": "59f590ade4b0966464fe6ac1"}, {"problem": 23, "code": "(fn [v] (reduce conj () v))", "user": "56f2611fe4b04a395b9a04a2"}, {"problem": 23, "code": "(fn rev [coll] ( if (empty? coll) nil ( conj (vec (rev (rest coll))) (first coll)  ) ) )", "user": "59f85d78e4b0ca45a743a31a"}, {"problem": 23, "code": "(partial reduce (fn [xs x] (concat [x] xs)) [])", "user": "59f8b925e4b0ca45a743a327"}, {"problem": 23, "code": "(fn [l] (reduce (fn [nl e] (cons e nl)) (take 1 l) (rest l)))", "user": "59f38703e4b0966464fe6a9e"}, {"problem": 23, "code": "#(loop [ theSeq %, flipped '() ]\n   (let [ theFirst (first theSeq), theRest (rest theSeq) ]\n     (if theFirst (recur theRest (conj flipped theFirst)) flipped)))", "user": "59f90e6ae4b0ca45a743a337"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "59f820d9e4b0ca45a743a316"}, {"problem": 23, "code": "(fn [xs]\n  (reduce #(conj %1 %2) () xs))", "user": "59f9b9fce4b0ca45a743a347"}, {"problem": 23, "code": "(fn [s]\n  (loop [new-s [] iter (- (count s) 1)]\n    (if (< iter 0)\n    new-s\n    (recur (conj new-s (nth (vec s) iter)) (dec iter)))))", "user": "59f9c111e4b0ca45a743a349"}, {"problem": 23, "code": "(fn [coll] (reduce (fn [acc y] (cons y acc)) (empty coll) coll))", "user": "59fa0bb6e4b0ca45a743a352"}, {"problem": 23, "code": "(fn rev [o x] (if (= nil (first x)) o (rev (conj o (last x)) (butlast x) ) ) ) []", "user": "59fa1b05e4b0ca45a743a356"}, {"problem": 23, "code": "(fn my-reverse [seq]\n    (if (empty? seq)\n      seq\n      (concat (take-last 1 seq) (my-reverse (take (- (count seq) 1) seq)))))", "user": "59fa7fb0e4b0ca45a743a366"}, {"problem": 23, "code": "reduce conj '()", "user": "59fab2f7e4b0ca45a743a36a"}, {"problem": 23, "code": "apply conj ()", "user": "59f78761e4b0966464fe6af5"}, {"problem": 23, "code": "#(reduce conj '() %1)", "user": "58f5e0b1e4b0438e51c2cee4"}, {"problem": 23, "code": "(letfn [(revers* [coll]\n            (when (seq coll)\n              (into (list) coll)))]\n    revers*)", "user": "59fa241ee4b0ca45a743a358"}, {"problem": 23, "code": "reduce conj ()", "user": "59fbc01ce4b0ca45a743a383"}, {"problem": 23, "code": "(fn [x]\n  (loop [x (seq x)\n         r '()]\n    (cond\n      (empty? x) r\n      :else (recur (rest x) (conj r (first x))))))", "user": "59fb1ca3e4b0ca45a743a376"}, {"problem": 23, "code": "#(into () %)", "user": "59b9e669e4b0a024fb6ae3db"}, {"problem": 23, "code": "(fn [xs] (into '() xs))", "user": "59fc482ce4b0ca45a743a389"}, {"problem": 23, "code": "(fn my-reverse\n  [coll]\n  (loop [reversed [] remaining coll]\n    (if (empty? remaining)\n      reversed\n      (recur (conj reversed (last remaining)) (butlast remaining))\n      )\n    )\n  )", "user": "59fa5fe0e4b0ca45a743a35f"}, {"problem": 23, "code": "(fn[x] (reduce #(cons %2 %) nil x))", "user": "59fa5773e4b0ca45a743a35e"}, {"problem": 23, "code": "(fn [seq]\n  ((fn [seq acc] (if (empty? seq) acc (recur (butlast seq) (conj acc (last seq))))) seq []))", "user": "5645a7f9e4b0284900eef609"}, {"problem": 23, "code": "(fn myfunc [list]\n    (if (empty? list) []\n      (cons (last list) (myfunc (butlast list)))))", "user": "59f15e20e4b0966464fe6a5a"}, {"problem": 23, "code": "#(loop [x % y '()]\n   (if (empty? x)\n     y\n     (recur (rest x) (cons (first x) y))))", "user": "59fea630e4b01bb0ae8afd10"}, {"problem": 23, "code": "#(reduce (fn [x y] (cons y x)) (empty %) %)", "user": "59fedc26e4b01bb0ae8afd17"}, {"problem": 23, "code": "sort #(compare %2 %1)", "user": "59f67819e4b0966464fe6ad3"}, {"problem": 23, "code": "#((fn myrev [ f t] (if (empty? f) t  (myrev (rest f) (cons (first f) t)))) % '())", "user": "59fec82be4b01bb0ae8afd14"}, {"problem": 23, "code": "reduce conj nil", "user": "58f98231e4b0438e51c2cf4c"}, {"problem": 23, "code": "#(loop [s1 %\n        s2 (empty %)]\n   (if (empty? s1)\n    s2\n    (recur\n     (rest s1)\n     (cons (first s1) s2))))", "user": "588053cae4b0f1effa3b7612"}, {"problem": 23, "code": "reduce conj ()", "user": "59f4c9c7e4b0966464fe6ab7"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5a00caede4b01bb0ae8afd35"}, {"problem": 23, "code": "reduce conj ()", "user": "59b69bbee4b05c620303ca2a"}, {"problem": 23, "code": "#(into '() %)", "user": "58182480e4b0c0e9c07b83a7"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5a012a43e4b01bb0ae8afd42"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5a016bf6e4b01bb0ae8afd4a"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5a01d8f6e4b01bb0ae8afd53"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5a01f2f3e4b01bb0ae8afd57"}, {"problem": 23, "code": "(fn my-reverse [x]\n  (if (empty? x) []\n   (conj (my-reverse (rest x)) (first x))\n  )\n)", "user": "5a022949e4b01bb0ae8afd60"}, {"problem": 23, "code": "(fn f [x]\n\t(reduce conj '() x))", "user": "5a025edde4b01bb0ae8afd64"}, {"problem": 23, "code": "reduce #(conj %1 %2 ) '()", "user": "59fcc31fe4b01bb0ae8afcef"}, {"problem": 23, "code": "#(reduce (fn [rev currEl] (conj rev currEl)) '() %)", "user": "588fd085e4b00487982d51c0"}, {"problem": 23, "code": "(fn [s] (loop [result []\n               start s]\n          (if (empty? start)\n            result\n            (recur (concat (take 1 start) result) (drop 1 start))\n            )\n          )\n  )", "user": "5a04e923e4b01bb0ae8afda9"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "59ff69e4e4b01bb0ae8afd20"}, {"problem": 23, "code": "(fn [coll]\n  (reduce conj '() coll))", "user": "5a065388e4b01bb0ae8afdcb"}, {"problem": 23, "code": "#(into () %)", "user": "5244cf39e4b0d8acf9ed6ac5"}, {"problem": 23, "code": "into ()", "user": "5a075e73e4b01bb0ae8afdd9"}, {"problem": 23, "code": "#(loop [coll % r (empty %)]\n    (if (empty? coll)\n      r\n      (recur (rest coll) (cons (first coll) r))\n      )\n    )", "user": "5a04bc10e4b01bb0ae8afda2"}, {"problem": 23, "code": "#(into '() %)", "user": "5a08053fe4b01bb0ae8afde7"}, {"problem": 23, "code": "(fn f [args]\n        (if (seq args)\n          (lazy-seq (cons (last args) (f (butlast args))))\n          '()))", "user": "5a082ce4e4b01bb0ae8afdec"}, {"problem": 23, "code": "(fn [l]\n  ((fn [l acc]\n    (if (empty? l)\n      acc\n      (recur (rest l) (conj acc (first l)))))\n      l `()))", "user": "5a08180fe4b01bb0ae8afdeb"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5a080bdde4b01bb0ae8afde9"}, {"problem": 23, "code": "(fn [x] \n  (loop [orig-seq x rev-seq '()]\n    (if (empty? orig-seq)\n      rev-seq\n      (let [new-item (first orig-seq) rest-seq (rest orig-seq)]\n        (recur rest-seq (conj rev-seq new-item))))))", "user": "58136dcfe4b0f478707a0610"}, {"problem": 23, "code": "reduce conj ()", "user": "5a07fefee4b01bb0ae8afde5"}, {"problem": 23, "code": "(fn my-reverse\n  ([xs] (my-reverse (rest xs) [(first xs)]))\n  ([xs reversed]\n   (if (empty? xs)\n     reversed\n     (recur (rest xs) (cons (first xs) reversed)))))", "user": "590e5e8ae4b047aa04b19a25"}, {"problem": 23, "code": "reduce conj ()", "user": "5a03d246e4b01bb0ae8afd8c"}, {"problem": 23, "code": "into ()", "user": "5a096063e4b01bb0ae8afe0b"}, {"problem": 23, "code": "reduce conj '()", "user": "532ae82be4b09d4e7a9b552b"}, {"problem": 23, "code": "sort (comp - compare)", "user": "58b2fe10e4b0ebc645576d17"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5a09a6f7e4b01bb0ae8afe14"}, {"problem": 23, "code": "into ()", "user": "5a09b7cae4b01bb0ae8afe15"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "5a09ce8ce4b0eab8c0448930"}, {"problem": 23, "code": "(fn my-rev [seqq]\n  (if (empty? seqq)\n    seqq\n    (conj (my-rev (butlast seqq)) (last seqq))))", "user": "5a099c98e4b01bb0ae8afe11"}, {"problem": 23, "code": "#(loop [lst % ret []]\n   (if (empty? lst)\n     ret\n     (recur (rest lst) (concat [(first lst)] ret))\n     )\n   )", "user": "59e0e1c6e4b08badc2a0c4fc"}, {"problem": 23, "code": "reduce conj ()", "user": "5a071cb2e4b01bb0ae8afdd8"}, {"problem": 23, "code": "(fn [x]\n   (loop [[first & rest] (seq x) res '()]\n          (if (empty? rest)\n            (conj res first)\n            (recur rest (conj res first)) )\n          )\n   )", "user": "5a0a1748e4b0eab8c0448937"}, {"problem": 23, "code": "(fn foo\n  ([c]\n   (foo c (seq []))\n   )\n  ([c n]\n   (if (empty? c)\n     (-> n)\n     (foo (rest c) (cons (first c) n))\n   )\n  )\n  )", "user": "54f9f25de4b0cf870d9346fb"}, {"problem": 23, "code": "reduce conj (list)", "user": "5a0a04eee4b0eab8c0448935"}, {"problem": 23, "code": "(fn myfunc\n  ([x] (myfunc x '()))\n  ([x, y]\n   (if (empty? x)\n     y\n     (recur (rest x) (conj y (first x)))\n     )\n    )\n  )", "user": "5a0a3473e4b0eab8c0448941"}, {"problem": 23, "code": "(fn [coll] (reduce conj (list) coll))", "user": "5a00cb31e4b01bb0ae8afd36"}, {"problem": 23, "code": "(partial reduce conj '())", "user": "5a0b9fc0e4b04bbd27e6d992"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "588635a6e4b0f1effa3b76cd"}, {"problem": 23, "code": "reduce conj ()", "user": "5a0c822fe4b04bbd27e6d9b0"}, {"problem": 23, "code": "reduce conj '()", "user": "5a0ce1a5e4b04bbd27e6d9b7"}, {"problem": 23, "code": "reduce conj '()", "user": "5a062e07e4b01bb0ae8afdc5"}, {"problem": 23, "code": "reduce conj ()", "user": "5a090a06e4b01bb0ae8afdff"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5a0c00dee4b04bbd27e6d9a0"}, {"problem": 23, "code": "reduce conj '()", "user": "5830377ee4b051871117c004"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5a0a25fce4b0eab8c044893d"}, {"problem": 23, "code": "into '()", "user": "5a107c23e4b04bbd27e6da18"}, {"problem": 23, "code": "(fn [collection]\n      (loop [collection collection\n             final-collection []\n             ]\n            (if (empty? collection)\n              final-collection\n              (recur (drop-last collection)\n                     (conj final-collection (last collection))))))", "user": "598c9564e4b02b9968b84d09"}, {"problem": 23, "code": "#( if(vector? %1)\n      (into [] (reduce (fn[x y] (conj x y)) () %1))\n      (into '() %1)\n   )", "user": "55129667e4b06e50f9beb1ac"}, {"problem": 23, "code": "(fn [coll] (reduce conj '() coll))", "user": "5a1149ace4b04bbd27e6da26"}, {"problem": 23, "code": "(fn [list] (reduce #(cons %2 %1) '() list))", "user": "5a12dea3e4b04bbd27e6da44"}, {"problem": 23, "code": "#(reduce conj '() %1)", "user": "5a0ef454e4b04bbd27e6d9fa"}, {"problem": 23, "code": "reduce #(cons %2 %1) []", "user": "5a125a38e4b04bbd27e6da39"}, {"problem": 23, "code": "#(reduce (fn [acc item] (cons item acc)) [] %)", "user": "5a135573e4b0ff51aa4b3180"}, {"problem": 23, "code": "(fn rev [sqi]\n    (if (empty? sqi)\n    []\n    (conj (rev (rest sqi)) (first sqi)) ))", "user": "5a137364e4b0ff51aa4b3185"}, {"problem": 23, "code": "(fn [seq]\n\t(loop [my-seq seq result-sequence []]\n\t(println (str \"MYSEQ\" my-seq))\n\t(if (= my-seq []) \n\t\tresult-sequence\n\t\t(recur (take (+ -1 (count my-seq)) my-seq) (into result-sequence (take-last 1 my-seq))))))", "user": "5a055eace4b01bb0ae8afdb1"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5a10f089e4b04bbd27e6da22"}, {"problem": 23, "code": "(fn [coll]\n\t(loop [acc [] todo coll]\n\t\t(if (empty? todo)\n\t\t\tacc\n\t\t\t(recur (conj acc (last todo)) (butlast todo)))))", "user": "4fef55a5e4b0678c553fc317"}, {"problem": 23, "code": "reduce conj ()", "user": "5a133c05e4b0ff51aa4b317d"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "59cd13d5e4b0ef0a1e9b5b32"}, {"problem": 23, "code": "(fn rev [coll] \n  (cond\n   (empty? coll) coll\n   :else (conj (rev (take (- (count coll) 1) coll)) (last coll))))", "user": "5a14228fe4b0ff51aa4b3193"}, {"problem": 23, "code": "(fn [s] (loop [l s r '()] (if (empty? l) (seq r) (recur (rest l) (conj r (first l))))))", "user": "5a04f2ebe4b01bb0ae8afdaa"}, {"problem": 23, "code": "#(into '() %)", "user": "5a109606e4b04bbd27e6da1c"}, {"problem": 23, "code": "(fn [a-seq]\n  (loop [acc ()\n         a-seq a-seq]\n    (if (first a-seq)\n      (recur (cons (first a-seq) acc) (rest a-seq))\n      acc)))", "user": "580a0783e4b0a837a8b30d2c"}, {"problem": 23, "code": "#(apply conj '() %)", "user": "5a12437be4b04bbd27e6da37"}, {"problem": 23, "code": "reduce conj '()", "user": "5a172b76e4b0ff51aa4b31d4"}, {"problem": 23, "code": "(fn [col]\n  (reduce conj '() col))", "user": "5a144fd8e4b0ff51aa4b319a"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5a17d148e4b0ff51aa4b31db"}, {"problem": 23, "code": "(fn rev\n  [xs] \n   (if (empty? (rest xs)) xs\n     (concat (rev (rest xs)) (take 1 xs))))", "user": "5a16da30e4b0ff51aa4b31cc"}, {"problem": 23, "code": "(fn [col]\n  (loop [col col\n         acc []]\n   \t(if (empty? col)\n      acc\n      (recur (rest col) (concat [(first col)] acc)))))", "user": "5a188be3e4b0ff51aa4b31ec"}, {"problem": 23, "code": "(fn [X] (reduce conj () X))", "user": "5a05a807e4b01bb0ae8afdb8"}, {"problem": 23, "code": "reduce (fn [x a] (conj x a)) ()", "user": "5a19d181e4b0ff51aa4b3207"}, {"problem": 23, "code": "#(into () %)", "user": "59fd069ae4b01bb0ae8afcf4"}, {"problem": 23, "code": "reduce conj ()", "user": "5a1a7db2e4b0ff51aa4b3213"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "5112500ee4b0350614f07a72"}, {"problem": 23, "code": "#(reduce conj '() %1)", "user": "5a18488ee4b0ff51aa4b31e5"}, {"problem": 23, "code": "reduce #(conj %1 %2) (list)", "user": "5a18bcd0e4b0ff51aa4b31f1"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5a1b82dde4b0ff51aa4b3225"}, {"problem": 23, "code": "#(loop [coll %1 res []]\n    (let [lst (last coll)\n          rem-count (count coll)] \n      (if (= rem-count 1)\n      \t(conj res lst)\n      \t(recur (take (dec rem-count) coll) (conj res lst)))))", "user": "5a1c07c1e4b0ff51aa4b3232"}, {"problem": 23, "code": "(fn [v] (loop [r v flipped []] (if (= r '()) flipped (recur (rest r) (cons (first r) flipped)))))", "user": "57a499dae4b0a966079561e6"}, {"problem": 23, "code": "#(into '() %)", "user": "5a1c94dee4b0ff51aa4b3249"}, {"problem": 23, "code": "reduce #(conj % %2) ()", "user": "5a1df94ce4b0ff51aa4b3265"}, {"problem": 23, "code": "(fn reverse-2 [l]\n  (if (empty? l)\n    nil\n    (concat (reverse-2 (rest l)) (list (first l)))))", "user": "5a1e93bee4b0ff51aa4b3270"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5a1e7e98e4b0ff51aa4b326d"}, {"problem": 23, "code": "reduce (fn [acc x] (cons x acc)) '()", "user": "5a09f35fe4b0eab8c0448934"}, {"problem": 23, "code": "reduce #(conj %1 %2) '()", "user": "5a1607a2e4b0ff51aa4b31c3"}, {"problem": 23, "code": "into ()", "user": "5a1ef970e4b0ff51aa4b327d"}, {"problem": 23, "code": "#(into '() %)", "user": "5a1ef1abe4b0ff51aa4b327c"}, {"problem": 23, "code": "(fn [col] (into () col))", "user": "5a1dd5b4e4b0ff51aa4b3260"}, {"problem": 23, "code": "#(reduce (fn [a b] (conj a b)) '() %)", "user": "5a1dda7de4b0ff51aa4b3261"}, {"problem": 23, "code": "(fn f [x]\n  (if (= x [])\n    []\n    (conj (f (rest x)) (first x))))", "user": "5a1f8c7ce4b0ff51aa4b3286"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5a1fb7d0e4b0ff51aa4b328c"}, {"problem": 23, "code": "(fn [input]\n  (loop [acc nil\n         remainder input]\n    (if (empty? remainder)\n      acc\n      (recur (cons (first remainder) acc)\n             (rest remainder)\n             )\n      )\n    )\n  )", "user": "5a1fcc82e4b0ff51aa4b3293"}, {"problem": 23, "code": "(fn myf [x] (if (first x) (conj (myf (rest x)) (first x) ) []))", "user": "59ff9424e4b01bb0ae8afd24"}, {"problem": 23, "code": "#(apply conj '() %)", "user": "5a208195e4b0ff51aa4b32a3"}, {"problem": 23, "code": "(fn magic\n\t[s] \n  \t\t(if (= (count s) 1)\n          s\n          (conj (vec (magic (rest s))) (first s)) \n        )\n)", "user": "5a214798e4b0ff51aa4b32aa"}, {"problem": 23, "code": "(fn [coll]\n  (reduce conj '() coll))", "user": "59f75327e4b0966464fe6aec"}, {"problem": 23, "code": "(fn [inputseq]\n  (loop [remaining inputseq\n         output (list)]\n    (if (= '() remaining)\n    \toutput\n      (recur (rest remaining) (cons (first remaining) output)))))", "user": "5a2185a4e4b0ff51aa4b32b0"}, {"problem": 23, "code": "(fn my-reverse [input]\n    (if (empty? input)\n      []\n      (conj (my-reverse (rest input)) (first input))))", "user": "5a21d34ce4b0ff51aa4b32b9"}, {"problem": 23, "code": "reduce conj '()", "user": "56ef077ae4b04a395b9a0459"}, {"problem": 23, "code": "reduce conj ()", "user": "5a221881e4b0ff51aa4b32c0"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5a1bec89e4b0ff51aa4b322f"}, {"problem": 23, "code": "#(loop [l % nl '()] (if (empty? l) nl (recur (rest l) (conj nl (first l)))))", "user": "5a23c4b0e4b0ff51aa4b32de"}, {"problem": 23, "code": "(fn [coll]\n  (reduce (fn [col item] (cons item col)) [] coll)\n  )", "user": "5a244240e4b0ff51aa4b32e9"}, {"problem": 23, "code": "(fn [coll]\n  (reduce (fn [acc x]\n            (conj acc x)) '() coll))", "user": "5a250b86e4b07f18be40aa19"}, {"problem": 23, "code": "reduce conj ()", "user": "5a21c3f9e4b0ff51aa4b32b7"}, {"problem": 23, "code": "(fn [in] (reduce conj '() in))", "user": "5a249cfee4b07f18be40aa12"}, {"problem": 23, "code": "(fn foo [x] (when (> (.size x) 0) (conj  (foo (drop-last x)) (last x)  )))", "user": "55d7312ee4b0e31453f64a9f"}, {"problem": 23, "code": "reduce conj '()", "user": "5a067f26e4b01bb0ae8afdcc"}, {"problem": 23, "code": "(fn [mylist] (into () mylist))", "user": "5a26c828e4b07f18be40aa4b"}, {"problem": 23, "code": "reduce conj '()", "user": "5a270a03e4b07f18be40aa50"}, {"problem": 23, "code": "#(reduce (fn\n            [a b]\n            (conj a b)) '() %)", "user": "5a274a33e4b07f18be40aa59"}, {"problem": 23, "code": "(fn [x]\n  ((fn call [x]\n     (if (= (count x) 0)\n       []\n       (conj\n         (call (rest x))\n         (first x))))\n    x))", "user": "5a292efde4b07f18be40aa77"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5a2960fde4b07f18be40aa78"}, {"problem": 23, "code": "(fn [sqn] (reduce (fn [a, i] (conj a i)) '() sqn))", "user": "5a2a0cb6e4b09cafd31c7f2c"}, {"problem": 23, "code": "(fn [coll] (reduce conj () coll))", "user": "5a2185c6e4b0ff51aa4b32b1"}, {"problem": 23, "code": "(fn [&seq](reduce #(conj % (first %&)) '()  &seq))", "user": "5a2834dfe4b07f18be40aa64"}, {"problem": 23, "code": "#(reduce conj nil %)", "user": "5a29d658e4b09cafd31c7f29"}, {"problem": 23, "code": "(fn [x] (into '() x))", "user": "59554b72e4b066ee0a44af2a"}, {"problem": 23, "code": "(fn [sqs] (reduce conj '() sqs))", "user": "5a291617e4b07f18be40aa76"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "5a2b2140e4b09cafd31c7f44"}, {"problem": 23, "code": "#(into '() %)", "user": "5a2c20c3e4b09cafd31c7f51"}, {"problem": 23, "code": "(fn [s]\n  ( loop [ inp s outp ()]\n    ( if (nil? (first inp))\n      outp\n      (recur (next inp) (cons (first inp) outp)))))", "user": "5a1c8c26e4b0ff51aa4b3247"}, {"problem": 23, "code": "(fn [x]\n  (reduce conj () x))", "user": "5a29ee57e4b09cafd31c7f2b"}, {"problem": 23, "code": "into '()", "user": "5955a0d3e4b066ee0a44af37"}, {"problem": 23, "code": "(fn my-reverse [a-sequence]\n  (if (empty? a-sequence)\n    []\n    (conj (my-reverse (rest a-sequence)) (first a-sequence))))", "user": "5a2d7f36e4b09cafd31c7f6e"}, {"problem": 23, "code": "(fn rev [l] (if (empty? l) l (concat (rev (rest l)) [(first l)])))", "user": "5a2df4a0e4b09cafd31c7f74"}, {"problem": 23, "code": "(fn rev-sequence [secu]\n  (if (nil? (first secu))\n    []\n    (into (rev-sequence (rest secu)) [(first secu)])\n  )\n)", "user": "5a285a38e4b07f18be40aa67"}, {"problem": 23, "code": "(fn iarenaza-rev [x]\n  (if (empty? (rest x))\n    x\n    (concat (iarenaza-rev (drop 1 x)) (take 1 x))))", "user": "5a2e638be4b09cafd31c7f7a"}, {"problem": 23, "code": "(fn [input-list]\n  (let [last-index (dec (count input-list))]\n    (loop [l last-index rev '[]]\n      (if (neg? l)\n        rev\n        (recur (dec l)\n               (conj rev (#(first (drop %2 %1)) input-list l)))))))", "user": "5a09f205e4b0eab8c0448933"}, {"problem": 23, "code": "#(into () %)", "user": "5a2b7727e4b09cafd31c7f49"}, {"problem": 23, "code": "(fn [arr] (reduce conj '() arr))", "user": "5a1d0381e4b0ff51aa4b3255"}, {"problem": 23, "code": "(fn [lst] (reduce (fn [b a] (concat [a] b)) [] lst))", "user": "5a14a48fe4b0ff51aa4b31a1"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5a2e39fce4b09cafd31c7f77"}, {"problem": 23, "code": "#(apply conj '() %)", "user": "524379a4e4b076204b44fac0"}, {"problem": 23, "code": "(fn [sequence]\n  (reduce (fn [result item] (conj result item)) '() sequence))", "user": "5a21a5ace4b0ff51aa4b32b4"}, {"problem": 23, "code": "reduce (fn[s x] (cons x s)) []", "user": "5644149de4b0018b46ad8c07"}, {"problem": 23, "code": "reduce conj ()", "user": "5a303f5ee4b09cafd31c7f9a"}, {"problem": 23, "code": "(fn [a]\n  (loop [rev [] ary (into [] a)]\n    (if (nil? (peek ary))\n      rev\n      (recur (conj rev (peek ary)) (pop ary)))))", "user": "5a011305e4b01bb0ae8afd40"}, {"problem": 23, "code": "into '()", "user": "5a34de78e4b0ddc586f153d0"}, {"problem": 23, "code": "(fn myrev [x] (let [y (vec x)] (if (empty? y) y (cons (last y) (myrev (pop  y))))))", "user": "5a2cfa85e4b09cafd31c7f61"}, {"problem": 23, "code": "(fn [l] (loop [x l y nil] (if (empty? x) y (recur (rest x) (cons (first x) y)))))", "user": "5a34f342e4b0ddc586f153d1"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "5a34cc9fe4b0ddc586f153ce"}, {"problem": 23, "code": "(fn my-rev\n  ([coll] (my-rev coll ()))\n  ([coll result]\n   (if (empty? coll)\n     result\n     (my-rev (rest coll) (conj result (first coll))))))", "user": "5a346d73e4b0ddc586f153c8"}, {"problem": 23, "code": "(fn [x]\n  (loop [new []\n         old x]\n    (if (empty? old)\n      new\n      (recur (conj new (last old))\n             (drop-last old)))))", "user": "5a373b80e4b001c08efc0c7c"}, {"problem": 23, "code": ";#(reduce conj () %)\n(fn [items-list] (reduce conj () items-list))\n\n;(reduce + 0 [1 2 3])\n;(reduce + 1 [2 3])\n;(reduce + 3 [3])\n;(reduce + 6 [])", "user": "5a1679d9e4b0ff51aa4b31ca"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5a319634e4b0e23b2502f9c9"}, {"problem": 23, "code": "(fn [coll] \n  (let [res (reduce conj '() coll)]\n    (cond\n     (vector? coll) (into [] res)\n     :else res)))", "user": "5a342188e4b0ddc586f153bd"}, {"problem": 23, "code": "(fn my-reverse [coll]\n  (loop [sequ coll result '()]\n    (let [head (first sequ)]\n      (if (nil? head)\n        result\n        (recur (rest sequ) (conj result head))))))", "user": "5773f3a9e4b0979f896515f2"}, {"problem": 23, "code": "reduce conj ()", "user": "5a37b6dbe4b001c08efc0c88"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5a1c3c11e4b0ff51aa4b323d"}, {"problem": 23, "code": "reduce conj '()", "user": "510d2a99e4b078ea71921130"}, {"problem": 23, "code": "(fn rev [list]\n  (cond (= 1 (count list))  [(first list)]\n        :else (concat (rev (rest list)) [(first list)])))", "user": "5a39e36ce4b001c08efc0cbc"}, {"problem": 23, "code": "(fn [l]\n  (map second (sort-by first > (zipmap (iterate inc 0) l))))", "user": "5a3b5cfde4b001c08efc0cd4"}, {"problem": 23, "code": "(partial reduce #(cons %2 %1) [])", "user": "52513bf1e4b0541d1855b86e"}, {"problem": 23, "code": "(fn rev [l]\n    (if (empty? l)\n        []\n        (conj (rev (rest l)) (first l))))", "user": "54e376d9e4b024c67c0cf7dd"}, {"problem": 23, "code": "#(loop [new [] coll %] (if (seq coll) (recur (cons (first coll) new) (drop 1 coll)) new))", "user": "59ef5280e4b0966464fe6a2b"}, {"problem": 23, "code": "(fn rev [collection]\n  (loop [revColl (empty collection) coll collection]\n    (if (empty? coll)\n      (if (seq? collection) \n          (seq revColl)\n          (vec revColl))\n      (recur (concat (conj '() (first coll)) revColl) (rest coll)))))", "user": "5a3b9092e4b001c08efc0cd7"}, {"problem": 23, "code": "(fn rev [s] \n  (if (empty? s)\n    []\n  \t(cons (last s) (rev (butlast s)))))", "user": "5a394deae4b001c08efc0cae"}, {"problem": 23, "code": "#(into '() %)", "user": "59f027e3e4b0966464fe6a3c"}, {"problem": 23, "code": "(fn [s]\n    (reduce #(cons %2 %1) [] s))", "user": "53307a23e4b019098a6f8b5d"}, {"problem": 23, "code": "reduce #(cons %2 %1) []", "user": "5a3c5c54e4b001c08efc0ce3"}, {"problem": 23, "code": "#(loop [[r & more :as all] (seq %)\n        acc '()]\n   (if all\n     (recur more (cons r acc))\n     acc))", "user": "5a3a3824e4b001c08efc0cc2"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5a38f70be4b001c08efc0ca7"}, {"problem": 23, "code": "(fn reverse-sequence [xs]\n  (reduce conj () xs))", "user": "59f7f55de4b0ca45a743a313"}, {"problem": 23, "code": "#(loop [myvec [] curr-pos (dec (count %1))]\n    (if (not= curr-pos -1)\n      (recur (into myvec [(nth (vec %1) curr-pos)]) (dec curr-pos))\n       myvec))", "user": "58a6806ee4b01a0c0b23292f"}, {"problem": 23, "code": "(fn [xs & acc]\n   (if (seq xs)\n     (let [acc (or acc nil)]\n     \t(recur (rest xs) (conj acc (first xs))))\n     acc))", "user": "5a257747e4b07f18be40aa1f"}, {"problem": 23, "code": "apply conj ()", "user": "5a3d7afae4b0447ef91cc5a6"}, {"problem": 23, "code": "#(into '() %)", "user": "59dfb8dbe4b08badc2a0c4da"}, {"problem": 23, "code": "#(reduce (fn [a b] (cons b a)) '() %)", "user": "52281e1ee4b0186687e23a69"}, {"problem": 23, "code": "#(into () %)", "user": "5a3d33b3e4b001c08efc0cef"}, {"problem": 23, "code": "reduce #(conj %1 %2) '()", "user": "5a3ece62e4b0447ef91cc5b9"}, {"problem": 23, "code": "(fn rev\n  [items]\n  (into '() items))", "user": "5a3ef4d5e4b0447ef91cc5ba"}, {"problem": 23, "code": "(fn [x]\n  (loop [acc [(last x)]\n         more (butlast x)]\n    (if more\n        (recur (conj acc (last more))\n               (butlast more))\n      acc)))", "user": "5a3e0e44e4b0447ef91cc5ad"}, {"problem": 23, "code": "(fn reverseShit [collection] (if (empty? collection) collection (conj (reverseShit (butlast collection)) (last collection))))", "user": "5a402586e4b0447ef91cc5c8"}, {"problem": 23, "code": "(fn [some-seq]\n  (reduce\n  \t(fn [new-vec curr]\n    \t(cons curr new-vec)),\n  \t[],\n  \tsome-seq))", "user": "5a35d515e4b0ddc586f153e1"}, {"problem": 23, "code": "(fn [a] (reduce #(conj %1 %2) () a))", "user": "5a401a7de4b0447ef91cc5c5"}, {"problem": 23, "code": "#(reduce\n  (fn [a1 a2]\n    (cons a2 a1)\n    )  [] %\n  )", "user": "5a40235fe4b0447ef91cc5c6"}, {"problem": 23, "code": "reduce conj ()", "user": "5a40eb64e4b0447ef91cc5d8"}, {"problem": 23, "code": "(fn [x]\n  (let [a (atom '())]\n    (doseq [i x]\n      (swap! a conj i))\n    @a))", "user": "5a426a3fe4b0447ef91cc5f2"}, {"problem": 23, "code": "(fn reverse-of\n  [list]\n  (reduce (fn [acc current] \n    (conj acc current)) '() list))", "user": "5a429e40e4b0447ef91cc5f9"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5a43347ee4b0447ef91cc603"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5a43b7e9e4b0447ef91cc609"}, {"problem": 23, "code": "#(into () %)", "user": "504e5333e4b0f6ff3350c4a2"}, {"problem": 23, "code": "reduce #(concat [%2] %) []", "user": "5a0e9a54e4b04bbd27e6d9ef"}, {"problem": 23, "code": "#(into () %)", "user": "5a4208dde4b0447ef91cc5ee"}, {"problem": 23, "code": "(fn a \n  ([x] (a x '()))\n  ([x y] \n   (if (empty? x)\n     y\n     (recur \n      (rest x)\n      (conj y (first x))))))", "user": "5a3c2a08e4b001c08efc0cdf"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5a45aaece4b05d388ecb6b3f"}, {"problem": 23, "code": "reduce conj ()", "user": "5a45a73ae4b05d388ecb6b3d"}, {"problem": 23, "code": "reduce conj '()", "user": "5a42d6a8e4b0447ef91cc5fb"}, {"problem": 23, "code": "reduce conj '()", "user": "5a4791bae4b05d388ecb6b57"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5a40bd29e4b0447ef91cc5d6"}, {"problem": 23, "code": "(fn rev [items] \n  (loop [result '() lst items]\n    (if (empty? lst) result\n      (recur (conj result (first lst)) (rest lst) )\n    )\n  )\n)", "user": "5a424954e4b0447ef91cc5f0"}, {"problem": 23, "code": "(fn my-reverse\n  ([in-seq] (my-reverse in-seq (list)))\n  ([in-seq out-seq]\n   (if (empty? in-seq)\n     out-seq\n     (recur (rest in-seq) (conj out-seq (first in-seq))))))", "user": "5a47e8ade4b05d388ecb6b5f"}, {"problem": 23, "code": "(fn [coll] (reduce conj () coll))", "user": "5a47ce68e4b05d388ecb6b5d"}, {"problem": 23, "code": "(fn [s]\n  (loop [s s, res '()]\n    (if (seq s)\n      (recur (rest s) (conj res (first s)))\n      res)))", "user": "5a481e05e4b05d388ecb6b64"}, {"problem": 23, "code": "reduce conj ()", "user": "5a48f53de4b05d388ecb6b6a"}, {"problem": 23, "code": "(fn rs [s] (vec (reduce conj () s)))", "user": "5a487d9ce4b05d388ecb6b67"}, {"problem": 23, "code": "#(reduce (fn [coll x] (cons x coll)) (empty %) %)", "user": "5a4993c0e4b05d388ecb6b71"}, {"problem": 23, "code": "(fn [coll]\n  (reduce conj () coll))", "user": "5a47423be4b05d388ecb6b52"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5a4aa17fe4b05d388ecb6b7c"}, {"problem": 23, "code": "#(into '() %)", "user": "5a4443cae4b0447ef91cc60f"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "59970911e4b07157cc8daac7"}, {"problem": 23, "code": "(fn [coll] \n  (loop [s coll r []] \n    (if (empty? s) \n      r \n      (recur (rest s) (cons (first s) r)))))", "user": "5a4caa20e4b05d388ecb6b94"}, {"problem": 23, "code": "(fn mah-reverse\n  [my-seq]\n  (reduce conj () my-seq))", "user": "5a4cbba1e4b05d388ecb6b98"}, {"problem": 23, "code": "(fn [x] \n   (cond (vector? x) (reduce (fn [x y] (into [y] x)) [] x)\n         :else (reduce (fn [x y] (conj x y)) '() x))\n  )", "user": "5a4c278ee4b05d388ecb6b8e"}, {"problem": 23, "code": "(fn [x] \n  (loop [t (first x) ; Head of list\n         ts (next x) ; Tail of list\n         acc []]\t ; Accumulator\n    (if (nil? ts) \n      (cons t acc)\n      (recur (first ts) (next ts) (cons t acc))\n      )\n    )\n  )", "user": "5a388675e4b001c08efc0ca2"}, {"problem": 23, "code": "reduce conj '()", "user": "5a4d14f4e4b05d388ecb6ba1"}, {"problem": 23, "code": "(fn [coll]\n   (loop [coll coll\n          result []]\n     (if (empty? coll)\n       result\n       (recur (rest coll)\n              (cons (first coll) result)))))", "user": "5a4d656fe4b05d388ecb6ba9"}, {"problem": 23, "code": "(fn [orig-data] \n\t(reduce conj '() orig-data\n    )\n)", "user": "5a4d8a04e4b05d388ecb6bac"}, {"problem": 23, "code": "#(reduce (fn [a x] (cons x a)) [] %)", "user": "5a4de614e4b05d388ecb6bb1"}, {"problem": 23, "code": "(fn [data] (reduce #(conj %1 %2) '() data))", "user": "5a4de5f4e4b05d388ecb6bb0"}, {"problem": 23, "code": "(fn [coll]\n  (loop [coll coll\n         result []]\n    (if (empty? coll) \n      result\n      (recur (rest coll) (cons (first coll) result)))))", "user": "5a4e1c81e4b05d388ecb6bb6"}, {"problem": 23, "code": "(fn [col] (loop [n col y nil] (if (empty? n) y (recur (rest n) (conj y (first n) ) ))))", "user": "59ff4ba2e4b01bb0ae8afd1d"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5182de5ce4b0353c468deb74"}, {"problem": 23, "code": "(fn [ls]\n  (reduce #(cons %2 %1) [] ls))", "user": "58db7b81e4b0a4d5acaab680"}, {"problem": 23, "code": "(fn rev \n   ([s] (rev '() s)) \n   ([r s] (if (seq s) (rev (cons (first s) r) (rest s)) r )) )", "user": "5a4e7025e4b05d388ecb6bbd"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "59da327de4b0ef0a1e9b5c63"}, {"problem": 23, "code": "#(reduce (fn [s e] (conj s e)) () %)", "user": "5a512929e4b05d388ecb6be2"}, {"problem": 23, "code": "#(into() %)", "user": "5a3dc590e4b0447ef91cc5a9"}, {"problem": 23, "code": "(fn \n\t[v]\n\t(loop [inno (into [] v) outoo []]\n\t\t(if (empty? inno)\n\t\t\toutoo\n\t\t\t\t(recur\n\t\t\t\t\t(pop inno)\n\t\t\t\t\t(conj outoo (last inno))))))", "user": "5a222c17e4b0ff51aa4b32c1"}, {"problem": 23, "code": "(fn rev-seq [incoming-list] \n  (if (= 1 (count incoming-list))\n    [(first incoming-list)]\n    (conj (rev-seq (rest incoming-list)) (first incoming-list))\n  )\n)", "user": "5a4dbc97e4b05d388ecb6bae"}, {"problem": 23, "code": "#(into () %1)", "user": "5a4fa947e4b05d388ecb6bce"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5a535572e4b05d388ecb6c0b"}, {"problem": 23, "code": "(fn [x] (loop [result '() x x]\n          (if (empty? x)\n          \tresult\n         \t(recur (conj result (first x)) (next x)))))", "user": "5a533cc0e4b05d388ecb6c09"}, {"problem": 23, "code": "#(reduce (fn [v e] (conj v e)) '() %)", "user": "5a4e06c1e4b05d388ecb6bb2"}, {"problem": 23, "code": "(fn revSeq ([sequ rev] (if (= (count sequ) 0) rev (revSeq (rest sequ) (conj rev (first sequ)))))\n  ([sequ] (revSeq sequ '())))", "user": "5a53f2aae4b05d388ecb6c1e"}, {"problem": 23, "code": "into '()", "user": "5a544eeee4b05d388ecb6c24"}, {"problem": 23, "code": "(fn [my-coll] (reduce conj () my-coll))", "user": "5a536cf2e4b05d388ecb6c10"}, {"problem": 23, "code": "(fn rvrse [array] \n  (reduce conj () array) )", "user": "5a534241e4b05d388ecb6c0a"}, {"problem": 23, "code": "#(reduce (fn [x y] (cons y x)) '() %)", "user": "5a5495f0e4b05d388ecb6c29"}, {"problem": 23, "code": "(fn rev-seq [lat]\n  (into '() lat))", "user": "5a38b82ee4b001c08efc0ca5"}, {"problem": 23, "code": "reduce conj '()", "user": "5a527beee4b05d388ecb6bfe"}, {"problem": 23, "code": "(fn [col] (reduce #(cons %2 %1) [] col))", "user": "5a55114ae4b05d388ecb6c37"}, {"problem": 23, "code": "(partial reduce conj ())", "user": "58d4d864e4b03c36ff7e594c"}, {"problem": 23, "code": "(fn [seq]\n  (loop [coll seq\n         r ()]\n    (if (empty? coll)\n      (vec r)\n      (recur (rest coll) (conj r (first coll))))))", "user": "565654dae4b0f9d632dd849f"}, {"problem": 23, "code": "reduce conj '()", "user": "5a566e8fe4b05d388ecb6c51"}, {"problem": 23, "code": "(fn [vc]\n  (loop [src vc\n         dst []]\n    (if (= src [])\n      dst\n      (recur (drop 1 src) (cons (first src) dst)))))", "user": "56fd058be4b08d47c97781a1"}, {"problem": 23, "code": "(fn [sq]\n  (let [-rev (fn [sq accum]\n               (let [f (first sq)\n                     r (rest sq)]\n                 (if (empty? r)\n                   (conj accum f)\n                   (recur r (conj accum f)))))]\n    (-rev sq '())))", "user": "5a516ae1e4b05d388ecb6be8"}, {"problem": 23, "code": "into '()", "user": "5a5767f3e4b05d388ecb6c65"}, {"problem": 23, "code": "reduce conj ()", "user": "544e5b22e4b0e39780006983"}, {"problem": 23, "code": "(fn [xs] (loop [rv [] lst xs] (if (= (count lst) 0) rv (recur (conj rv (last lst)) (butlast lst)))))", "user": "5a5800e1e4b05d388ecb6c76"}, {"problem": 23, "code": "reduce conj ()", "user": "5a584ca2e4b05d388ecb6c7d"}, {"problem": 23, "code": "reduce conj ()", "user": "5a58ae01e4b05d388ecb6c82"}, {"problem": 23, "code": "reduce (fn [acc x] (conj acc x)) ()", "user": "58cabf32e4b03c36ff7e583a"}, {"problem": 23, "code": "#(loop [coll %\n        new_coll []]\n    (if (empty? coll)\n        new_coll\n        (recur (rest coll) (cons (first coll) new_coll))))", "user": "5a51e029e4b05d388ecb6bf0"}, {"problem": 23, "code": "(fn [s] (reduce conj () s))", "user": "5a591d04e4b05d388ecb6c90"}, {"problem": 23, "code": "(fn do-reverse [list]\n  (if (empty? list)\n    list\n    (conj (do-reverse (butlast list)) (last list))))", "user": "5a59a76fe4b05d388ecb6c98"}, {"problem": 23, "code": "#(into () %)", "user": "5a59a67fe4b05d388ecb6c97"}, {"problem": 23, "code": "reduce (fn [s it] (conj s it)) '()", "user": "5a5894d9e4b05d388ecb6c81"}, {"problem": 23, "code": "(fn reverse-seq [seq]\n  (loop [coll seq acc []]\n    (if (empty? coll)\n      acc\n      (recur (rest coll) (cons (first coll) acc)))))", "user": "588f55d2e4b00487982d51a5"}, {"problem": 23, "code": "(fn [input-seq]\n  (loop [in input-seq rev-seq '()]\n    (if (empty? in)\n      rev-seq\n      (recur (rest in) (conj rev-seq (first in)))\n    )\n  )\n)", "user": "5a5b9e3ce4b0512ff01cd90b"}, {"problem": 23, "code": "#(into '() %)", "user": "5a525b25e4b05d388ecb6bf8"}, {"problem": 23, "code": "(fn [coll] (reduce conj '() coll))", "user": "5a5be4a6e4b0512ff01cd910"}, {"problem": 23, "code": "#(reduce (fn [acc x] (concat [x] acc)) [] %)", "user": "5a5be1ece4b0512ff01cd90f"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5a58bfd0e4b05d388ecb6c84"}, {"problem": 23, "code": "(fn [s]\n    (loop [s s\n           r '()]\n      (if (seq s)\n        (recur (rest s) (conj r (first s)))\n        r)))", "user": "5a5d0726e4b0512ff01cd91b"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5a5dbe9de4b0512ff01cd92b"}, {"problem": 23, "code": "(fn [x] (reduce conj () x))", "user": "5a5be4ebe4b0512ff01cd912"}, {"problem": 23, "code": "(partial reduce conj '())", "user": "51dafedee4b09f6bc204eee2"}, {"problem": 23, "code": "reduce conj '()", "user": "5a604b73e4b0512ff01cd959"}, {"problem": 23, "code": "reduce conj ()", "user": "54ee34c2e4b024c67c0cf870"}, {"problem": 23, "code": "reduce conj ()", "user": "5a5d2965e4b0512ff01cd91d"}, {"problem": 23, "code": "into '()", "user": "5a52f2cbe4b05d388ecb6c06"}, {"problem": 23, "code": "reduce conj ()", "user": "5a608721e4b0512ff01cd95f"}, {"problem": 23, "code": "into()", "user": "5a617533e4b0512ff01cd976"}, {"problem": 23, "code": "(fn rev [x] \n  (if (= x []) [] (conj (rev (rest x)) (first x))))", "user": "5a621702e4b0512ff01cd983"}, {"problem": 23, "code": "#(into '() %)", "user": "5a624129e4b0512ff01cd987"}, {"problem": 23, "code": "(partial (fn rev-it [rev-coll coll]\n  (if (not-empty coll)\n    (rev-it (conj rev-coll (last coll)) (drop-last coll))\n    rev-coll)) [])", "user": "5a61bf79e4b0512ff01cd97b"}, {"problem": 23, "code": "(fn [seq]\n  (loop [old seq ret []]\n    (if-not (empty? old)\n      (recur (drop-last old) (conj ret (last old)))\n      ret\n    )\n  )\n)", "user": "554b975ae4b0a04f79299592"}, {"problem": 23, "code": "#(reduce (fn [acc v] (cons v acc)) [] %)", "user": "5892a5fde4b00487982d5228"}, {"problem": 23, "code": "#(into () %)", "user": "5a62096de4b0512ff01cd982"}, {"problem": 23, "code": "reduce conj ()", "user": "5a64d12de4b0512ff01cd9a7"}, {"problem": 23, "code": "#(reduce (fn [acc curr] (concat [curr] acc)) [] %)", "user": "5a677a5fe4b0512ff01cd9e7"}, {"problem": 23, "code": "(fn [x] (reduce conj () x))", "user": "5a63f8bae4b0512ff01cd99f"}, {"problem": 23, "code": "(fn reverse-seq [x]\n  (let [input (into [] x)]\n  (loop [index (- (count input) 1) output []]\n    (if (< index 0) output\n        (recur (dec index) (conj output (get input index)))))))", "user": "58f5b58ae4b0438e51c2cedc"}, {"problem": 23, "code": "(fn foo\n  [sqc]\n  (if (> (count sqc) 0)\n    (conj (foo (rest sqc)) (first sqc))\n    []))", "user": "5a6a32b6e4b0512ff01cda22"}, {"problem": 23, "code": "(fn [x]\n  (loop [fr x bk nil]\n    (if (empty? fr)\n      bk\n      (recur (rest fr) (conj bk (first fr)) ) )))", "user": "5a6a7cc5e4b0512ff01cda27"}, {"problem": 23, "code": "(fn [x] \n  (loop[y ()\n        x x]\n    (if (< 0 (count x))\n      (recur (conj y (first x)) (rest x))\n      y)))", "user": "5a6b15e9e4b0512ff01cda32"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5a514e68e4b05d388ecb6be5"}, {"problem": 23, "code": "#(loop [rcoll '()\n        coll %]\n    (if (empty? coll)\n      rcoll\n      (recur (cons (first coll) rcoll) (rest coll))))", "user": "5a6bf911e4b0512ff01cda4c"}, {"problem": 23, "code": "#(reduce (fn [res e] (conj res e)) '() %)", "user": "5a6b9b95e4b0512ff01cda40"}, {"problem": 23, "code": "reduce #(cons %2 %) []", "user": "5a625bc2e4b0512ff01cd989"}, {"problem": 23, "code": "(fn \n  [c]\n  (loop [coll c\n         acc '()]\n    (if (empty? coll)\n      acc\n      (recur (rest coll) (conj acc (first coll))))))", "user": "574c3d4ee4b02ea11479921a"}, {"problem": 23, "code": "(fn [x] (reduce conj () x))", "user": "5a6a436de4b0512ff01cda24"}, {"problem": 23, "code": "into '()", "user": "5a6170fde4b0512ff01cd975"}, {"problem": 23, "code": "(fn [lst] (into () lst))", "user": "5a663a32e4b0512ff01cd9c2"}, {"problem": 23, "code": "(fn [collection] (vec (reduce (fn[a b] (conj a b)) '() collection) ))", "user": "5a634ff0e4b0512ff01cd995"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5a6dd739e4b0512ff01cda64"}, {"problem": 23, "code": "(fn [xs] (reduce (fn [acc i] (conj acc i)) '() xs))", "user": "5920c191e4b09b4ee5954c61"}, {"problem": 23, "code": "#(reduce (fn [a b] (conj a b)) nil %)", "user": "5a6e145ee4b0512ff01cda68"}, {"problem": 23, "code": "#(loop [result () nseq %] (if (nil? nseq) result (recur (conj result (first nseq)) (next nseq))))", "user": "5a6b8a9ae4b0512ff01cda3f"}, {"problem": 23, "code": "reduce conj ()", "user": "5a488c09e4b05d388ecb6b68"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5a6afb1de4b0512ff01cda2f"}, {"problem": 23, "code": "#(let [cnt (count %) z %]\n      (loop [n 0 y [] z %]\n            (if (= n cnt)\n                y\n                (do\n                  (recur (inc n) (conj y (last z)) (drop-last z))))))", "user": "5a4b3abde4b05d388ecb6b81"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5a6f2942e4b0512ff01cda78"}, {"problem": 23, "code": "#(into () %)", "user": "5a6dffe1e4b0512ff01cda66"}, {"problem": 23, "code": "(fn [old_seq] (if (list? old_seq) (into '() old_seq) (into [] ( \ninto '() old_seq))))", "user": "5a67069ce4b0512ff01cd9d9"}, {"problem": 23, "code": "reduce conj ()", "user": "5a66f358e4b0512ff01cd9d5"}, {"problem": 23, "code": "#(loop [old-list (rest %) reversed (doall (take 1 %))]\n   (if (empty? old-list)\n     reversed\n     (recur (rest old-list) (cons (first old-list) reversed))))", "user": "529f9bf2e4b04e0c58e87bb4"}, {"problem": 23, "code": "(fn rev [coll] \n  (if (empty? coll)\n    coll\n    (concat\n      (rev (rest coll))\n      (list (first coll)))))", "user": "5a718453e4b0512ff01cda91"}, {"problem": 23, "code": "reduce conj ()", "user": "5a69be17e4b0512ff01cda14"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5a6af090e4b0512ff01cda2d"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "5a71a811e4b0512ff01cda92"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5a735c20e4b0512ff01cdaa7"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5a721047e4b0512ff01cda97"}, {"problem": 23, "code": "(fn [seq]\n  (loop [s seq rev ()]\n    (if (empty? s)\n      rev\n      (recur (rest s) (conj rev (first s))))))", "user": "5a74786fe4b0512ff01cdab5"}, {"problem": 23, "code": "reduce conj '()", "user": "5a744c2ae4b0512ff01cdaae"}, {"problem": 23, "code": "(fn [s]\n  (loop [tail s\n         rev ()]\n    (if (seq tail)\n      (recur (rest tail) (conj rev (first tail)))\n      rev)))", "user": "4fd4bddce4b0d4de60cee36e"}, {"problem": 23, "code": "(fn [lst]\n  ((fn f [orig rev]\n    (if (empty? orig)\n      rev\n      (f (rest orig) (conj rev (first orig)))))\n    (rest lst) (list (first lst)))\n  )", "user": "5a74bf3ae4b0512ff01cdabd"}, {"problem": 23, "code": "#(if (= (count %2) 0)\n    %1\n    (recur (cons (first %2) %1) (rest %2))) []", "user": "56d9f312e4b0ea9b8538f7fa"}, {"problem": 23, "code": "reduce conj '()", "user": "5a71c89ee4b0512ff01cda93"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5a71e7c9e4b0512ff01cda95"}, {"problem": 23, "code": "(fn [v]\n  (loop [cpt (count v), res []] (println cpt)\n    (if(> cpt 0)\n      (recur (dec cpt) (conj res (nth (seq v) (- cpt 1) :error)))\n      (seq res))))", "user": "5a786223e4b013a48d39976b"}, {"problem": 23, "code": "(fn [s]\n  (loop [s s result (list)]\n    (cond\n    (empty? s) result\n    :else (recur (rest s) (cons (first s) result)))))", "user": "5a616fd2e4b0512ff01cd974"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5a754d36e4b0512ff01cdac7"}, {"problem": 23, "code": "reduce #(conj %1 %2) '()", "user": "5a778224e4b013a48d399761"}, {"problem": 23, "code": "#(loop [coll %, rev []] (if (empty? coll) rev (recur (butlast coll) (conj rev (last coll)))))", "user": "5a77317ee4b013a48d399759"}, {"problem": 23, "code": "(fn reverse-seq [ls]\n  (cond\n    (empty? ls) '()\n    :else (cons (last ls) (reverse-seq (take (- (count ls) 1) ls)))))", "user": "5a786f6be4b013a48d39976e"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5a776b62e4b013a48d39975f"}, {"problem": 23, "code": "#(into () %)", "user": "58eed5b7e4b056aecfd47db8"}, {"problem": 23, "code": "(fn [n]\n    (if (= (type n) clojure.lang.PersistentVector)\n        (loop [cpt (dec (count n)), res []]\n            (if (>= cpt 0)\n                (recur (dec cpt) (conj res (nth n cpt)))\n                res))\n        (loop [n n, res '()]\n            (if (seq n)\n                (recur (rest n) (conj res (first n)))\n                res))))", "user": "5a640a37e4b0512ff01cd9a2"}, {"problem": 23, "code": "(fn [c]\n  (let [f (fn [c res] \n            (if (first c)\n              (recur (rest c) (conj res (first c)))\n              res))]\n    (f c '())))", "user": "5a7460a0e4b0512ff01cdaaf"}, {"problem": 23, "code": "#(into '() %)", "user": "5a796f7fe4b03baeef9276bb"}, {"problem": 23, "code": "(fn [coll]\n  (for [n (range (- (count coll) 1) -1 -1)\n        :let [c (apply list coll)]]\n    (nth c n)))", "user": "5a3bcdc9e4b001c08efc0cd9"}, {"problem": 23, "code": "reduce (fn [coll i] (cons i coll)) []", "user": "5a7b363ae4b03baeef9276d9"}, {"problem": 23, "code": "(fn make-reverse [s] \n  (if (empty? s)\n    (vec '()) \n    (conj (make-reverse (rest s)) (first s))))", "user": "5a7ba4bbe4b03baeef9276e5"}, {"problem": 23, "code": "#(into () %)", "user": "5a779197e4b013a48d399763"}, {"problem": 23, "code": "(fn [coll] (into '() coll))", "user": "5a79ce7fe4b03baeef9276c8"}, {"problem": 23, "code": "(fn [s]\n  (loop [s s, res '()]\n    (if (seq s)\n      (recur (rest s) (conj res (first s)))\n      res)))", "user": "5a7ae674e4b03baeef9276d5"}, {"problem": 23, "code": "reduce conj ()", "user": "5a78e98de4b013a48d399779"}, {"problem": 23, "code": "#(into '() %)", "user": "5a7cee73e4b03baeef9276f2"}, {"problem": 23, "code": "(fn [x] (loop [listt '() cc x] (if (nil? (first cc)) listt (recur (conj listt (first cc)) (rest cc)))))", "user": "5a799077e4b03baeef9276c1"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5a6af351e4b0512ff01cda2e"}, {"problem": 23, "code": "(fn my-reverse [coll] (reduce #(cons %2 %1) [] coll))", "user": "5911ba93e4b0163c97b36eda"}, {"problem": 23, "code": "reduce (fn [accum x] (cons x accum)) []", "user": "5a7ed0c7e4b03baeef92770e"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "5a7e194de4b03baeef927706"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5a7deab5e4b03baeef927703"}, {"problem": 23, "code": "(fn rev\n  [xs]\n  (if (empty? xs)\n    []\n    (concat (rev (rest xs)) [(first xs)])))", "user": "5a798ac5e4b03baeef9276c0"}, {"problem": 23, "code": "#(loop [sin % sout (empty sin)]\n   (if (empty? sin)\n     sout\n     (recur (rest sin) (concat [(first sin)] sout))\n     ))", "user": "5a80b934e4b00b71e582a05b"}, {"problem": 23, "code": "(fn [sq] \n  (into '() sq))", "user": "5a7ff79ce4b00b71e582a046"}, {"problem": 23, "code": ";Reverse Sequence http://www.4clojure.com/problem/23\n(fn ! [x]\n  (if (= (count x) 0)\n    x\n    (cons (last x) (! (butlast x)))\n  )\n)", "user": "5a813b90e4b00b71e582a065"}, {"problem": 23, "code": "reduce (fn [new-list elem]\n         (conj new-list elem))\n       '()", "user": "5a822590e4b00b71e582a073"}, {"problem": 23, "code": "reduce conj '()", "user": "5a80ad4be4b00b71e582a058"}, {"problem": 23, "code": "(fn [list] (apply conj '() list))", "user": "59021fede4b0438e51c2d04d"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "5a84cf8de4b00b71e582a095"}, {"problem": 23, "code": "(fn [coll]\n  (loop [new-coll '()\n         remain coll]\n    (if (empty? remain)\n      new-coll\n      (recur (conj new-coll (first remain)) (rest remain)))))", "user": "5a861aafe4b05369db4d2496"}, {"problem": 23, "code": "(fn [col]\n  (reduce (fn [new-col curr]\n            (conj new-col curr))\n          '()\n          col))", "user": "5a86ad84e4b05369db4d249c"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5a7da832e4b03baeef9276fc"}, {"problem": 23, "code": "reduce conj ()", "user": "5a89ef87e4b05369db4d24ca"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5a23cabce4b0ff51aa4b32df"}, {"problem": 23, "code": "(fn f [xs] (if (empty? xs)\n           xs\n           (cons (last xs) (f (butlast xs)))))", "user": "5a89ee2de4b05369db4d24c9"}, {"problem": 23, "code": "reduce conj '()", "user": "5a75da49e4b0512ff01cdacf"}, {"problem": 23, "code": "(fn\n  [xs]\n  (reduce (fn [acum x] (conj acum x))\n          '()\n          (seq xs)))", "user": "5a8b6d42e4b05369db4d24e6"}, {"problem": 23, "code": "#(reduce (fn [x y] (conj x y)) '() %)", "user": "5a853662e4b00b71e582a09e"}, {"problem": 23, "code": "#(into () %)", "user": "5a2abce0e4b09cafd31c7f37"}, {"problem": 23, "code": "into ()", "user": "58c71509e4b021aa9917ed6e"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5a8bc2a1e4b05369db4d24ef"}, {"problem": 23, "code": "(fn rev\n  ([lst] (rev [] lst))\n  ([lst1 lst2] (if (= lst2 []) lst1\n                   (rev (concat [(first lst2)] lst1) (rest lst2)))))", "user": "5a8d1eade4b05369db4d2511"}, {"problem": 23, "code": "(fn [lst]\n   (loop [l lst r ()]\n      (if (empty? l)\n         r\n         (recur (rest l) (cons (first l) r)))))", "user": "5a653f80e4b0512ff01cd9b2"}, {"problem": 23, "code": "(fn [collection]\n  (loop [acc [] xs collection]\n    (if (= nil (first xs))\n      acc\n      (recur (concat [(first xs)] acc) (rest xs))\n    )\n  )\n)", "user": "5a8e9fb5e4b05369db4d2529"}, {"problem": 23, "code": "#(loop [l %1 rl '()]\n\t(if (= l '())\n      rl\n      (recur (rest l) (conj rl (first l)))\n    )\n)", "user": "5a78cd9ee4b013a48d399777"}, {"problem": 23, "code": "#(reduce (fn [acc item] \n           (conj acc item)\n            ) '() %)", "user": "5a6a2515e4b0512ff01cda21"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5a856f1ae4b00b71e582a0a3"}, {"problem": 23, "code": "reduce #(conj %1 %2 ) nil", "user": "5a8d55a8e4b05369db4d2514"}, {"problem": 23, "code": "reduce conj ()", "user": "5a8fd113e4b05369db4d2542"}, {"problem": 23, "code": "(fn my-reverse\n    [xs]\n    (loop\n        [xs xs\n         ys ()]\n        (if (empty? xs)\n            ys\n            (recur (rest xs) (conj ys (first xs))))))", "user": "5a8c12dfe4b05369db4d24f7"}, {"problem": 23, "code": "into '()", "user": "5a8ebd9ae4b05369db4d252b"}, {"problem": 23, "code": "(fn [s]\n  (loop [left     s\n         reversed []]\n    (if (empty? left)\n      reversed\n      (recur (rest left)\n             (cons (first left) reversed)))))", "user": "5a9181c5e4b002d099cae6f6"}, {"problem": 23, "code": "#(loop [ary % result (seq [])] (if (empty? ary) result (recur (drop-last 1 ary) (concat result (take-last 1 ary)))))", "user": "5a8b2e58e4b05369db4d24e0"}, {"problem": 23, "code": "into '()", "user": "5a929426e4b002d099cae70d"}, {"problem": 23, "code": "#(map\n  (fn [[x y]] x) \n  (sort \n    (fn [[_ y1] [_ y2]] (> y1 y2)) \n    (map \n      (fn [a b] [a b]) \n      % \n      (range)\n    )\n  )\n)", "user": "5a933d8ee4b0d174b936c720"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5a918839e4b002d099cae6f7"}, {"problem": 23, "code": "(fn rev\n  ([li] (rev li (list)))\n  ([li ans] (if (empty? li)\n              ans\n              (rev (rest li) (conj ans (first li))))))", "user": "5a90395ce4b05369db4d254a"}, {"problem": 23, "code": "(fn [collection]\n  (loop [collection collection acc '()]\n    (if (nil? collection) acc (recur (next collection) (cons (first collection) acc)))))", "user": "5a932f63e4b0d174b936c71b"}, {"problem": 23, "code": "(fn recursive-reverse [coll]\n    (if (empty? coll)\n        []\n        (conj (recursive-reverse (rest coll)) (first coll) )))", "user": "5a9482b7e4b0d174b936c737"}, {"problem": 23, "code": "(fn [x] (into '() x))", "user": "5a9545dbe4b0d174b936c74c"}, {"problem": 23, "code": "(fn rev\n  [seq]\n  (if (= seq [])\n    []\n    (conj (rev (rest seq)) (first seq))))", "user": "5a9567bae4b0d174b936c752"}, {"problem": 23, "code": "(partial reduce #(cons %2 %1) nil)", "user": "5a95c639e4b0d174b936c75e"}, {"problem": 23, "code": "#(into () %)", "user": "5a95e50be4b0d174b936c760"}, {"problem": 23, "code": "(fn [s] (loop [seq s ans nil]\n  \t\t\t(if (empty? seq)\n              ans\n              (recur (rest seq) (conj ans (first seq))))))", "user": "5a962c09e4b0d174b936c765"}, {"problem": 23, "code": "(fn [list]\n        (loop [old list new []]\n          (if (empty? old)\n            new\n            (recur (rest old) (cons  (first old) new)))))", "user": "55527251e4b0deb715856df3"}, {"problem": 23, "code": "(fn [lst]\n  (loop [in (vec lst) out '()]\n      (if (empty? in)\n          out\n          (recur (butlast in) (conj (vec out) (last in) ))\n      )))", "user": "5a8c50d8e4b05369db4d24fd"}, {"problem": 23, "code": "(fn [origlist] \n   (loop [inlist origlist outlist '()]\n     (if (= 0 (count inlist))\n       (into '[] outlist)\n       (let [a (first inlist)]\n         (recur (rest inlist) (cons a outlist))))))", "user": "58803ed9e4b0f1effa3b760f"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5a97eaffe4b0d174b936c783"}, {"problem": 23, "code": "(fn [v] (vec (reduce #(conj %1 %2) () v)))", "user": "590a7dbfe4b047aa04b199bc"}, {"problem": 23, "code": "(fn [coll]\n  (loop [colls coll\n         reversed []]\n\t(if (empty? colls)\n      reversed\n      (recur (butlast colls) (conj reversed (last colls))))))", "user": "5939e726e4b069cdc2982b45"}, {"problem": 23, "code": "(fn my-rev [lst]\n \t(reduce conj () lst)\n)", "user": "5a984657e4b0d174b936c78a"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5a99cab6e4b0d174b936c7b2"}, {"problem": 23, "code": "(fn f [xs]\n  (if (empty? xs)\n    xs\n    (conj (f (vec (rest xs))) (first xs))\n    )\n  )", "user": "5a99c2e1e4b0d174b936c7b0"}, {"problem": 23, "code": "(fn [n]\n  (reduce conj () n))", "user": "5a99b844e4b0d174b936c7ab"}, {"problem": 23, "code": "(fn [lst] \n  (reduce conj () lst))", "user": "5a99b688e4b0d174b936c7a6"}, {"problem": 23, "code": "(fn my-rev [list]\n  (let [cur_elem (first list)]\n    (if (= 1 (count list))\n      [cur_elem]\n      (conj (my-rev (rest list)) cur_elem))))", "user": "58662a03e4b0f14aab7c8859"}, {"problem": 23, "code": "sort #(compare %2 %1)", "user": "5a9a12d6e4b0d174b936c7b7"}, {"problem": 23, "code": "(fn [x] (reduce conj () x))", "user": "5a9aad01e4b0d174b936c7c0"}, {"problem": 23, "code": "#(apply conj '() %)", "user": "5a99b83fe4b0d174b936c7aa"}, {"problem": 23, "code": "(fn my-reverse [xs]\n  (when xs\n    (cons (last xs) (my-reverse (butlast xs)))))", "user": "5a99d28ee4b0d174b936c7b3"}, {"problem": 23, "code": "reduce conj ()", "user": "5a23eed4e4b0ff51aa4b32e3"}, {"problem": 23, "code": "#(reduce (fn [x y] (cons y x)) (empty %) %)", "user": "52bba119e4b07a9af57922ea"}, {"problem": 23, "code": "(fn [lat]\n  (into '() lat))", "user": "59f6495ee4b0966464fe6acf"}, {"problem": 23, "code": "#(reduce conj () %1)", "user": "5a9ac061e4b0d174b936c7c1"}, {"problem": 23, "code": "(fn [xs] (reduce #(cons %2 %1) [] xs))", "user": "5a9b06dde4b0d174b936c7c5"}, {"problem": 23, "code": "(fn [x] (reduce conj '() x))", "user": "5a9c6038e4b0d174b936c7d7"}, {"problem": 23, "code": "(fn my-reverse\n  [lst]\n  \n  (loop [lst lst\n         result ()]\n    \n    (if (empty? lst)\n      result\n      \n      (recur (rest lst)\n             (cons (first lst)\n                   result)))))", "user": "5a99ae99e4b0d174b936c7a4"}, {"problem": 23, "code": "(fn n [s]\n  (loop [t s o '()]\n        (if (empty? t)\n            o\n            (recur (rest t) (conj o (first t)))\n            )\n          )\n  )", "user": "5a9d64c8e4b0d174b936c7eb"}, {"problem": 23, "code": "into ()", "user": "5a9373d5e4b0d174b936c722"}, {"problem": 23, "code": "(fn my-reverse [lst] \n     (if (empty? lst)\n         '()\n         (cons (last lst) (my-reverse (butlast lst)))))", "user": "5a99b863e4b0d174b936c7ae"}, {"problem": 23, "code": "#(reduce  (fn [roll value] (conj roll value)) '() %)", "user": "5a9dbb32e4b0d174b936c7f3"}, {"problem": 23, "code": "(fn [v]\n  (loop [src v target []]\n    (if (empty? src) target\n        (recur (rest src) (cons (first src) target)))))", "user": "5a98ab58e4b0d174b936c78e"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5a9dbffbe4b0d174b936c7f4"}, {"problem": 23, "code": "(fn [x] (reduce conj () x))", "user": "5a6f3162e4b0512ff01cda7a"}, {"problem": 23, "code": "#(into () %)", "user": "5a9eaab3e4b0d174b936c807"}, {"problem": 23, "code": "(fn my-reverse\n  [lst]\n  (if (empty? lst)\n    ()\n    (cons (last lst) (my-reverse (butlast lst)))))", "user": "5a9f005be4b0d174b936c810"}, {"problem": 23, "code": "#(into '() %)", "user": "5aa00b7fe4b0d174b936c825"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5a9cdec0e4b0d174b936c7e1"}, {"problem": 23, "code": "#(loop [coll %\n         result '()]\n    (if (empty? coll)\n      result\n      (recur (rest coll)\n             (conj result (first coll)))))", "user": "531bf76fe4b08068f379ed96"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5aa008e5e4b0d174b936c823"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5aa1e0f1e4b0d174b936c84e"}, {"problem": 23, "code": "#(into '() %)", "user": "5a9be505e4b0d174b936c7cf"}, {"problem": 23, "code": "(fn [x] (reduce conj () x))", "user": "5aa15ec0e4b0d174b936c848"}, {"problem": 23, "code": "(fn rev-seq \n  [lst]\n  (into '() lst))", "user": "5a99b861e4b0d174b936c7ad"}, {"problem": 23, "code": "#(loop [idx 0 out '()]\n        (if (= idx (count %))\n              out\n              (recur (inc idx) (conj out (nth (vec %) idx)))\n        )\n      )", "user": "5a9db513e4b0d174b936c7f0"}, {"problem": 23, "code": "(fn\n  [lst]\n  (loop [lst lst\n         res ()]\n    (if (empty? lst)\n      res\n      (recur (rest lst) (cons (first lst) res)))))", "user": "5aa2f1dee4b0d174b936c865"}, {"problem": 23, "code": "#(loop [l %\n        l2 []]\n   (if (not-empty l)\n     (recur (rest l) (concat (list (first l)) l2))\n   \t l2))", "user": "5a720177e4b0512ff01cda96"}, {"problem": 23, "code": "#(reduce \n  (fn [acc i] (conj acc i)) \n  \t'() %)", "user": "5aa43c3de4b0d174b936c884"}, {"problem": 23, "code": "(fn [obj]\n   (let [lst (into '() obj)]\n        (if (set? obj) lst (into [] lst))\n            )\n   )", "user": "5a9e3698e4b0d174b936c7fc"}, {"problem": 23, "code": "#(reduce \n  conj () %)", "user": "5aa4b961e4b0d174b936c888"}, {"problem": 23, "code": "(fn REVERSE [lis]\n\n   (apply conj '() lis )\n  )", "user": "5aa11b37e4b0d174b936c840"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5aa4f7dae4b0d174b936c88c"}, {"problem": 23, "code": "(fn myRev\n  ([x] (myRev (seq x) '()))\n  ([x revSeq] \n    (if (empty? x)\n        revSeq\n        (myRev (rest x) (conj revSeq (first x))))))", "user": "5aa5951ae4b0d174b936c899"}, {"problem": 23, "code": "(fn [coll] (loop [remaining coll revcoll []]\n                (if (empty? remaining)\n                  revcoll\n                  (recur (rest remaining) (cons (first remaining) revcoll)))) \n        )", "user": "5aa4a1ffe4b0d174b936c886"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5aa5efbde4b0d174b936c8a2"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5aa5eebee4b0d174b936c8a1"}, {"problem": 23, "code": "#(into '() %)", "user": "5aa62482e4b0d174b936c8a5"}, {"problem": 23, "code": "#(apply conj '() (seq %))", "user": "5aa690c0e4b0d174b936c8ad"}, {"problem": 23, "code": "#(into () %)", "user": "5a99b766e4b0d174b936c7a8"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5aa6bd56e4b0d174b936c8af"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5a99b848e4b0d174b936c7ac"}, {"problem": 23, "code": "reduce conj ()", "user": "5aa6d44de4b0d174b936c8b2"}, {"problem": 23, "code": "#(reduce (fn [x y] (conj x y)) () %)", "user": "5a99b87ee4b0d174b936c7af"}, {"problem": 23, "code": "(fn [s] (reduce #(cons %2 %) '() s))", "user": "5a9829e5e4b0d174b936c788"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5aa2b5dbe4b0d174b936c85b"}, {"problem": 23, "code": "reduce conj '()", "user": "5aa811f7e4b0d174b936c8c2"}, {"problem": 23, "code": "(fn [x] (reduce #(conj %1 %2) '() x))", "user": "5aa8e841e4b0d174b936c8d5"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5aa9d445e4b0d174b936c8eb"}, {"problem": 23, "code": ";; (fn [x] (reduce conj '() x))\n(fn my-reverse\n  ([x]\n    (if (empty? x)\n      []\n      (let [[ head & tail] (seq x)]\n        (if\n          tail\n            (conj (my-reverse tail) head)\n            [head]\n        )))))", "user": "5aa998c6e4b0d174b936c8e5"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5aa81536e4b0d174b936c8c3"}, {"problem": 23, "code": "(fn [sq] (loop [rst (rest sq) fst (conj () (first sq))] (if (= (count rst) 0) fst (recur (rest rst) (conj fst (first rst))))))", "user": "5a527c16e4b05d388ecb6bff"}, {"problem": 23, "code": "#(reduce (fn [acc item] (into [item] acc)) [] %)", "user": "59e6708ce4b08badc2a0c571"}, {"problem": 23, "code": "(fn my-reverse [xs]\n  (when xs\n    (cons (last xs) (my-reverse (butlast xs)))))", "user": "5a6cb2eae4b0512ff01cda57"}, {"problem": 23, "code": "reduce conj ()", "user": "5aab7b72e4b073f177442558"}, {"problem": 23, "code": "#(into () %)", "user": "5aa2dc5ae4b0d174b936c861"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "59769d75e4b01722bebd4cdd"}, {"problem": 23, "code": "reduce conj ()", "user": "5a8e9a7ae4b05369db4d2528"}, {"problem": 23, "code": "#(vec (into '() %))", "user": "5aac26d3e4b073f177442569"}, {"problem": 23, "code": "(fn [s] (loop [s s r []] (if (empty? s) r (recur (rest s) (cons (first s) r)))))", "user": "5aad2bd2e4b073f177442573"}, {"problem": 23, "code": "(partial reduce conj ())", "user": "5aad79d9e4b073f177442578"}, {"problem": 23, "code": "#(loop [xs % inverted-seq []] (if (empty? xs) inverted-seq (recur (rest xs) (into [(first xs)] inverted-seq))))", "user": "5aa88c12e4b0d174b936c8d1"}, {"problem": 23, "code": "(fn reverse-seq [^ISeq seq]\n  (println seq)\n  (if (empty? seq)\n    seq\n    (into [(last seq)] (reverse-seq (drop-last 1 seq)))\n    )\n  )", "user": "5aada061e4b073f17744257a"}, {"problem": 23, "code": "(fn rec [x] \n  (if (= x []) \n    [] \n    (conj (rec (rest x)) (first x))\n  )\n)", "user": "5ab1665de4b073f1774425c0"}, {"problem": 23, "code": "reduce (fn [a b] (conj a b)) '()", "user": "5ab21b33e4b073f1774425dd"}, {"problem": 23, "code": "#(reduce (fn [s el] (cons el s)) [] %)", "user": "5ab28d5be4b073f1774425eb"}, {"problem": 23, "code": "reduce conj ()", "user": "5ab276f2e4b073f1774425e6"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5ab16992e4b073f1774425c4"}, {"problem": 23, "code": "#(reduce (fn [a b] (conj a b)) '() %)", "user": "5ab23a78e4b073f1774425e1"}, {"problem": 23, "code": "(fn rev\n  [x]\n  (reduce conj '() x))", "user": "5ab33ce7e4b073f1774425fa"}, {"problem": 23, "code": "reduce conj '()", "user": "5ab23c99e4b073f1774425e2"}, {"problem": 23, "code": "#(loop [i % o []]\n  (if (empty? i)\n    o\n    (recur (rest i) (cons (first i) o))))", "user": "5aa8f753e4b0d174b936c8d9"}, {"problem": 23, "code": "(fn [coll]\n                 (reduce conj () coll))", "user": "5ab490f4e4b073f17744261d"}, {"problem": 23, "code": "(fn [ori] (reduce (fn [rev _] (cons _ rev)) [] ori))", "user": "5ab3d323e4b073f177442607"}, {"problem": 23, "code": "#(into () %)", "user": "57047768e4b0b0fb43fd0664"}, {"problem": 23, "code": "(fn [lst] (reduce (fn [a b] (conj a b)) () lst))", "user": "5ab564f8e4b073f177442639"}, {"problem": 23, "code": "#(into () %)", "user": "5a904de3e4b05369db4d254c"}, {"problem": 23, "code": "(fn [x] (reduce #(conj %1 %2) () x))", "user": "5ab38af0e4b073f177442601"}, {"problem": 23, "code": "into '()", "user": "5a91988ae4b002d099cae6f9"}, {"problem": 23, "code": "#(into () %)", "user": "5ab52ea6e4b073f17744262e"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5a67cedbe4b0512ff01cd9ee"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5ab5f60be4b073f177442643"}, {"problem": 23, "code": "reduce conj ()", "user": "5ab8037ae4b073f177442678"}, {"problem": 23, "code": "(fn [s] (reduce conj () s))", "user": "5ab93449e4b073f177442692"}, {"problem": 23, "code": "#(reduce (fn [x y] (cons y x)) '() %)", "user": "5ab96075e4b073f177442694"}, {"problem": 23, "code": "#(into '() %)", "user": "5a781494e4b013a48d399766"}, {"problem": 23, "code": "(fn [x] \n  (loop [a x \n         r '()] \n    (if (empty? a) \n      r\n      (recur (rest a) (conj r (first a))))) )", "user": "5ab9fe71e4b073f17744269d"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "5abb02ade4b073f1774426bc"}, {"problem": 23, "code": "(fn rv [s]\n  (cond\n   (empty? s) []\n   :else (conj (rv (rest s)) (first s))\n   )\n  )", "user": "5aba34c5e4b073f1774426a3"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5abc5a09e4b073f1774426e9"}, {"problem": 23, "code": "(fn [alist] (reduce conj '() alist))", "user": "5aaa2dc3e4b0d174b936c8f1"}, {"problem": 23, "code": "(fn [x] (reduce #(conj %1 %2) '() x))", "user": "5abbb374e4b073f1774426d9"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5ab3db13e4b073f177442609"}, {"problem": 23, "code": "(fn [col] (reduce (fn [v e] (conj v e)) '() col))", "user": "5abe2fc2e4b073f17744271e"}, {"problem": 23, "code": "(fn rev [coll]\n (loop [todo coll\n        rev '()]\n    ( if (empty? todo) rev\n     (recur (rest todo) (conj rev (first todo)))\n    )\n )\n)", "user": "5abeb697e4b073f177442725"}, {"problem": 23, "code": "(fn my-reverse [xs]\n  (reduce #(cons %2 %1) '() xs))", "user": "51e24905e4b01e519814642e"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5ac0ba3ae4b073f177442745"}, {"problem": 23, "code": "into ()", "user": "5ac0dab7e4b073f177442746"}, {"problem": 23, "code": "(fn myrev [s] (if (empty? s) s (conj (myrev (butlast s)) (last s))))", "user": "5762bf13e4b0994c1922fbae"}, {"problem": 23, "code": "(fn [xs]\n  (reduce #(conj %1 %2) () xs))", "user": "5a03652ae4b01bb0ae8afd83"}, {"problem": 23, "code": "(fn [x] (reduce conj '() x))", "user": "5ab3edf0e4b073f17744260d"}, {"problem": 23, "code": "(fn [coll] (reduce conj () coll))", "user": "5ac35d00e4b0e27600da7712"}, {"problem": 23, "code": "into '()", "user": "59a8a4dce4b0bcf4e9a43af7"}, {"problem": 23, "code": "#(into '() %)", "user": "569bfc43e4b0542e1f8d145c"}, {"problem": 23, "code": "(fn my-reverse\n  [input]\n  (reduce\n   (fn [new-seq element] (conj new-seq element))\n   '()\n   input))", "user": "5ac6099ee4b0e27600da7757"}, {"problem": 23, "code": "(fn [coll]\n  (reduce #(cons %2 %1) [] coll))", "user": "5ac67b47e4b0e27600da776e"}, {"problem": 23, "code": "#(reduce (fn [col s] (cons s col))\n         '()\n         %)", "user": "59b71b4fe4b05c620303ca3d"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5ac6bbe3e4b0e27600da7776"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5ac37d0fe4b0e27600da7718"}, {"problem": 23, "code": "(fn [elems]\n    (loop [elems elems\n           reversed (empty elems)]\n      (if (empty? elems)\n        reversed\n        (recur (rest elems) (cons (first elems) reversed)))))", "user": "5ac6ef9be4b0e27600da7779"}, {"problem": 23, "code": "reduce (fn [acc x] (cons x acc)) []", "user": "5ac85708e4b0e27600da77ac"}, {"problem": 23, "code": "#(into '() %)", "user": "5ac834f4e4b0e27600da77ab"}, {"problem": 23, "code": "(fn a [x]\n  (if (empty? x) '()\n(concat (a (rest x)) (list (first x)))))", "user": "5a7a09e6e4b03baeef9276ca"}, {"problem": 23, "code": "(fn [s] (loop [r '()\n               l (seq s)]\n         (if (empty? l)\n              r\n              (recur (conj r (first l)) (rest l)))))", "user": "5ac91d90e4b0e27600da77bd"}, {"problem": 23, "code": "reduce (fn [a b] (conj a b)) '()", "user": "5ac92dc3e4b0e27600da77bf"}, {"problem": 23, "code": "#(into () %)", "user": "5ac96cf8e4b0e27600da77c2"}, {"problem": 23, "code": "(fn [x] (reduce conj '() x))", "user": "5ac9da95e4b0e27600da77d4"}, {"problem": 23, "code": "reduce conj ()", "user": "5aca2adce4b0e27600da77d6"}, {"problem": 23, "code": "#(into () %)", "user": "5a087907e4b01bb0ae8afdf7"}, {"problem": 23, "code": "apply conj ()", "user": "5acb137ee4b0e27600da77eb"}, {"problem": 23, "code": "(fn [x] (reduce #(cons %2 %1)[] x))", "user": "563f0fdae4b08d4f616f5ece"}, {"problem": 23, "code": "(fn rev [x]\n  (reduce conj() x)\n  )", "user": "5ac74b34e4b0e27600da777f"}, {"problem": 23, "code": "(fn [seq] (loop [elems seq revseq nil]\n                    (if (= 0 (count elems)) revseq\n                        (recur (rest elems)\n                               (conj revseq (first elems))))))", "user": "5acbb7afe4b0e27600da77ff"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5ac4d1f6e4b0e27600da7735"}, {"problem": 23, "code": "(fn recursive-reverse [coll]\n  (if (empty? coll)\n    []\n    (conj (recursive-reverse (rest coll)) (first coll) )))", "user": "5ac383b8e4b0e27600da7719"}, {"problem": 23, "code": "reduce conj '()", "user": "5acd1a43e4b0e27600da7823"}, {"problem": 23, "code": "(fn [x] (reduce conj () x))\n\n\n\n;; (fn [coll]\n ;; (map last (sort #(compare (first %2) (first %1)) (zipmap (range) coll))))\n;; (partial \n   ;; (fn rev2 [out-coll in-coll]\n     ;; (if (empty? in-coll)\n       ;; out-coll\n       ;; (rev2 (conj out-coll (first in-coll)) (rest in-coll)))) ())\n\n\n\n;; (fn [coll]\n ;; (map last (sort #(compare (first %2) (first %1)) (zipmap (range) coll))))", "user": "5ac6f7f7e4b0e27600da777a"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5a9db5c9e4b0d174b936c7f1"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5acd235ae4b0e27600da7824"}, {"problem": 23, "code": "reduce conj (list)", "user": "57513f88e4b02ea114799283"}, {"problem": 23, "code": "reduce #(cons %2 %1) []", "user": "5abd4886e4b073f177442710"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5acc961ae4b0e27600da7810"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5ac7f980e4b0e27600da779f"}, {"problem": 23, "code": "reduce conj ()", "user": "5abe41bce4b073f177442720"}, {"problem": 23, "code": "(fn rev\n  [x]\n  (reduce conj () x))", "user": "5ac741d6e4b0e27600da777d"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5acf8797e4b0ea6055cfab78"}, {"problem": 23, "code": "(fn [some-seq] \n      (loop [\n             remaining-seq some-seq\n             result []\n             ]\n        (if (= (count remaining-seq) 0) \n          result\n          (recur (butlast remaining-seq) (conj result (last remaining-seq)))\n          )\n        ))", "user": "5a737561e4b0512ff01cdaaa"}, {"problem": 23, "code": "#(reduce conj '() %1)", "user": "5ad002f2e4b0ea6055cfab87"}, {"problem": 23, "code": "reduce conj '()", "user": "596a66cde4b069c0a1a19803"}, {"problem": 23, "code": "into ()", "user": "5acd08eee4b0e27600da7822"}, {"problem": 23, "code": "(fn reverse-sequence [xs]\n  (if (= (count xs) 0) [])\n  (if (= (count xs) 1)\n    xs\n    (conj (reverse-sequence (butlast xs)) (last xs))))", "user": "5a42dbbbe4b0447ef91cc5fd"}, {"problem": 23, "code": "#(into () %)", "user": "5ad36ae9e4b0ea6055cfabc3"}, {"problem": 23, "code": "reduce conj ()", "user": "5a7df247e4b03baeef927704"}, {"problem": 23, "code": "#(into () %)", "user": "5ad63a34e4b0ea6055cfac01"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5ad60481e4b0ea6055cfabf9"}, {"problem": 23, "code": "(fn f [seq]\n  (if (nil? (first seq))\n    '()                                 ;we are at the end of the list\n    (concat (f (rest seq)) (list (first seq)))))", "user": "589f37e0e4b02bd94d917e79"}, {"problem": 23, "code": "#(reduce (fn [new-list e] (cons e new-list)) () %)", "user": "5ad37785e4b0ea6055cfabc5"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5ad6d0c9e4b0ea6055cfac11"}, {"problem": 23, "code": "(partial reduce conj nil)", "user": "58513875e4b0b7285a6f4e8c"}, {"problem": 23, "code": "#(into '() %)", "user": "5ad608dce4b0ea6055cfabfa"}, {"problem": 23, "code": "#(into () %)", "user": "5ac04101e4b073f177442737"}, {"problem": 23, "code": "(fn [s]\n  (reduce #(cons %2 %1) '() s))", "user": "5ad8e33fe4b0ea6055cfac2f"}, {"problem": 23, "code": "(fn [s]\n  (into '() s))", "user": "5ada1f12e4b0ea6055cfac43"}, {"problem": 23, "code": "#(into () %)", "user": "599342efe4b0b211ea3aaab0"}, {"problem": 23, "code": "reduce conj '()", "user": "5ada7ec8e4b0837691e92bd6"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5ada9df4e4b0837691e92bde"}, {"problem": 23, "code": "(fn [coll]\n  (reduce (fn [x y]\n            (into [y] x)) [] coll))", "user": "56e24e68e4b03a7c14b85a34"}, {"problem": 23, "code": "into ()", "user": "5ade6bafe4b0837691e92c23"}, {"problem": 23, "code": "#(into () %)", "user": "573b8cf1e4b0cd1946bd10ad"}, {"problem": 23, "code": "reduce conj ()", "user": "5991eec7e4b0866487ed0d6e"}, {"problem": 23, "code": "#(reduce conj() %)", "user": "5ad6318de4b0ea6055cfabff"}, {"problem": 23, "code": "reduce conj ()", "user": "5adb8d47e4b0837691e92bf1"}, {"problem": 23, "code": "(fn [c]\n  (loop [nl []\n         cc c]\n    (if (empty? cc)\n      nl\n      (recur (cons (first cc) nl) (rest cc)))))", "user": "54a2760ae4b09f271ff37c5b"}, {"problem": 23, "code": "(fn [s] (loop [reve '()\n                 original s]\n            (if (seq  original)\n                  (recur (cons (first original) reve) (next original))\n                  reve)))", "user": "56d6e165e4b0ea9b8538f7d3"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5a353bdae4b0ddc586f153d9"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5adf5f9be4b0837691e92c33"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "5ae0976be4b0837691e92c43"}, {"problem": 23, "code": "into ()", "user": "5ae429fae4b0837691e92c79"}, {"problem": 23, "code": "#(apply conj '() %)", "user": "5ae47c1de4b0837691e92c81"}, {"problem": 23, "code": "reduce conj '()", "user": "5ae4e0e3e4b0837691e92c86"}, {"problem": 23, "code": "#(into '() %)", "user": "5ae5792ee4b0837691e92c90"}, {"problem": 23, "code": "(fn [xs]\n  (reduce \n    #(cons %2 %1)\n    '()\n    xs\n  )\n)", "user": "5aac468ae4b073f17744256b"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5ae56da2e4b0837691e92c8f"}, {"problem": 23, "code": "#(reduce (fn [c v] (conj c v)) (list) %)", "user": "5ae246b1e4b0837691e92c5d"}, {"problem": 23, "code": "(fn rev [x]\n  (reduce conj () x))", "user": "5ae7691ae4b0837691e92caa"}, {"problem": 23, "code": "reduce conj ()", "user": "5ae75ccbe4b0837691e92ca9"}, {"problem": 23, "code": "(fn [coll] (reduce conj () coll))", "user": "5ab1a859e4b073f1774425d7"}, {"problem": 23, "code": "(fn c [xs]\n  (if (empty? xs)\n    []\n    (conj (c (rest xs)) (first xs))))", "user": "5aeb0b44e4b0cc2b61a3bbee"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "59e8b4ade4b0249b72820734"}, {"problem": 23, "code": "(fn f ([l] (f (drop-last l)[(last l)]))([l rl] (if (empty? l) rl (f (drop-last l)(conj rl (last l))))))", "user": "5aeb3c1ce4b0cc2b61a3bbf4"}, {"problem": 23, "code": "(fn [coll] (reduce #(conj %1 %2) () coll))", "user": "5aed87a1e4b0cc2b61a3bc1a"}, {"problem": 23, "code": "reduce conj '()", "user": "5aeec90fe4b0cc2b61a3bc31"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5aeb4c10e4b0cc2b61a3bbf6"}, {"problem": 23, "code": "reduce conj ()", "user": "5aeca4c9e4b0cc2b61a3bc0a"}, {"problem": 23, "code": "(fn [x] (into '() x) )", "user": "5addadfce4b0837691e92c13"}, {"problem": 23, "code": "(fn myrev [xs] (if (= xs []) [] (conj (myrev (rest xs)) (first xs))))", "user": "5aef9614e4b0cc2b61a3bc38"}, {"problem": 23, "code": "(fn [xs]\n  (loop [reversed []\n         items-to-reverse xs]\n    (if (empty? items-to-reverse)\n      reversed\n      (recur (into reversed [(last items-to-reverse)]) (butlast items-to-reverse)))))", "user": "5aeafd96e4b0cc2b61a3bbeb"}, {"problem": 23, "code": "(fn\n    [collection]\n    (loop [final-coll [] coll collection]\n      (if (empty? coll)\n        final-coll\n        (recur (conj final-coll\n                     (last coll)\n                     )\n               (butlast coll)\n               )\n        )\n      )\n    )", "user": "5aefd746e4b0cc2b61a3bc3d"}, {"problem": 23, "code": "(fn [x]\n  (loop [x x\n         y '()]\n    (if (= nil (next x))\n      (conj y (first x))\n      (recur (rest x)(conj y (first x))))))", "user": "5af047b8e4b0cc2b61a3bc48"}, {"problem": 23, "code": "(fn [coll] > (reduce #(conj %1 %2) '() coll))", "user": "5af062e5e4b0cc2b61a3bc51"}, {"problem": 23, "code": "(fn [col] (reduce conj () col))", "user": "5af19233e4b0cc2b61a3bc5f"}, {"problem": 23, "code": "#(reduce (fn [nlist ol] (into [] (conj (seq nlist) ol))) [] %)", "user": "5af1cb6be4b0cc2b61a3bc64"}, {"problem": 23, "code": "(fn [s]  (reduce conj (list (first s)) (rest s ) ))", "user": "5af1cbb8e4b0cc2b61a3bc65"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5af0ac17e4b0cc2b61a3bc55"}, {"problem": 23, "code": "(fn [l] (reduce (fn [acc x] (conj acc x)) '() l))", "user": "5af20ce0e4b0cc2b61a3bc69"}, {"problem": 23, "code": "(fn [coll]\n  (reduce #(conj %1 %2) '() coll))", "user": "5aefee03e4b0cc2b61a3bc43"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "5af2ce6be4b0cc2b61a3bc72"}, {"problem": 23, "code": "(fn [coll]\n  (loop [c coll\n         n ()]\n    (if (empty? c)\n      n\n      (recur (rest c) (conj n (first c))))))", "user": "5a084a24e4b01bb0ae8afdf2"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5af3019ce4b0cc2b61a3bc76"}, {"problem": 23, "code": "(fn rev [a] \n  (if (= [] a) \n    [] \n    (conj (rev (rest a)) (first a))))", "user": "5af2edc2e4b0cc2b61a3bc74"}, {"problem": 23, "code": "(fn [s] (reduce (fn [a b] (into b a)) [] (map (fn [e] [e]) s)))", "user": "5aba04dce4b073f17744269e"}, {"problem": 23, "code": "(fn ! [x]\n    (if (= (butlast x) nil)\n           x\n           (cons (last x) (! (butlast x)))))", "user": "5af3a4d0e4b0cc2b61a3bc8b"}, {"problem": 23, "code": "#(let [x (reduce conj () %)] (if (vector? %) (apply conj [] x) x))", "user": "5af45f05e4b0cc2b61a3bc97"}, {"problem": 23, "code": "reduce (fn [acc x](conj acc x)) '()", "user": "5af1e1b1e4b0cc2b61a3bc67"}, {"problem": 23, "code": "#(loop [acc [] rem %] (if-not (seq rem) acc (recur (conj acc (last rem)) (butlast rem))))", "user": "5af61443e4b0cc2b61a3bcb1"}, {"problem": 23, "code": "(fn reverse-list [seq]\n  (loop [tmp-seq seq\n        reversed-seq ()]\n    (if (empty? tmp-seq)\n      reversed-seq\n      (recur (butlast tmp-seq) (concat reversed-seq (list (last tmp-seq)))))))", "user": "5ae9d09de4b0cc2b61a3bbda"}, {"problem": 23, "code": "(fn [arg]\n (if (vector? arg)\n   (reduce (fn [arg1 arg2] (concat [arg2] arg1)) [] arg )\n   (reduce (fn [arg1 arg2] (conj arg1 arg2)) () arg)\n  )\n )", "user": "5ae71f14e4b0837691e92ca7"}, {"problem": 23, "code": "(fn rev [xs]\n  (if (empty? xs)\n    '()\n    (concat (rev (rest xs)) (take 1 xs))))", "user": "5a74c344e4b0512ff01cdabe"}, {"problem": 23, "code": "(partial reduce conj '())", "user": "5af8221ce4b0cc2b61a3bccd"}, {"problem": 23, "code": "into()", "user": "59eb69fbe4b0249b7282077e"}, {"problem": 23, "code": "(fn [s]\n  (loop [r () s s]\n    (if (empty? s)\n      r\n      (recur (conj r (first s)) (rest s)))))", "user": "5af907e6e4b0cc2b61a3bcda"}, {"problem": 23, "code": "(fn rev \n  ([s] \n    (rev s '()))\n  ([s r]\n    (if s\n      (recur (next s) (cons (first s) r))\n      r)))", "user": "5af0ac45e4b0cc2b61a3bc56"}, {"problem": 23, "code": "into ()", "user": "5af31955e4b0cc2b61a3bc7a"}, {"problem": 23, "code": "#(reduce conj () %1)", "user": "5af9b2cee4b0cc2b61a3bce2"}, {"problem": 23, "code": "#(reduce (fn [acc el] (concat [el] acc)) [] %)", "user": "585c450fe4b0f14aab7c8782"}, {"problem": 23, "code": "(fn [coll]\n  (loop [s (seq coll)\n         res '()]\n    (if (empty? s)\n      res\n      (recur (rest s) (conj res (first s))))))", "user": "5afa9de0e4b0cc2b61a3bcf1"}, {"problem": 23, "code": "(fn [a] ((fn [l r] (if (empty? l) r (recur (rest l) (cons (first l) r)))) a (list)))", "user": "5afa3590e4b0cc2b61a3bcea"}, {"problem": 23, "code": "reduce conj ()", "user": "5afb4b15e4b0cc2b61a3bcf6"}, {"problem": 23, "code": "(fn [coll]\n  (loop [xs (seq coll) reversed '()]\n    (if (empty? xs)\n      reversed\n      (recur (rest xs) (cons (first xs) reversed)))))", "user": "5aa7e6eae4b0d174b936c8c0"}, {"problem": 23, "code": "(fn rv\n  ([in] (rv in '()))\n  ([in res]\n   (if (seq in)\n    (recur (rest in) (conj res (first in)))\n     res)))", "user": "5afca248e4b0cc2b61a3bd12"}, {"problem": 23, "code": "(fn [coll]\n  (loop [c coll size (count coll) ncoll ()]\n    (if (> size 0)\n      (let [n (cons (first c) ncoll) r (drop 1 c)]\n        (recur r (dec size) n))\n      ncoll)))", "user": "5afc7303e4b0cc2b61a3bd0b"}, {"problem": 23, "code": "reduce #(conj % %2) '()", "user": "5afc115de4b0cc2b61a3bcff"}, {"problem": 23, "code": "reduce conj ()", "user": "5ad6ad5de4b0ea6055cfac0e"}, {"problem": 23, "code": "(fn [lst]\n  (loop [fst (first lst) rst (rest lst) acc '()]\n    (if (empty? rst)\n      (conj acc fst)\n      (recur (first rst) (rest rst) (conj acc fst)))))", "user": "5adcc688e4b0837691e92c05"}, {"problem": 23, "code": "(partial reduce (fn [acc x] (conj acc x)) ())", "user": "5afecee2e4b0cc2b61a3bd28"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5af9d09ae4b0cc2b61a3bce6"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5add1fede4b0837691e92c0a"}, {"problem": 23, "code": "into ()", "user": "5a796f13e4b03baeef9276ba"}, {"problem": 23, "code": "#(reduce (fn [x y] (conj x y)) '() %)", "user": "5b01cf9ee4b0cc2b61a3bd49"}, {"problem": 23, "code": "(fn [x]\n  (reduce conj '() x))", "user": "5aefedc0e4b0cc2b61a3bc42"}, {"problem": 23, "code": "into ()", "user": "5aef6084e4b0cc2b61a3bc34"}, {"problem": 23, "code": "(fn r [x]\n  (loop [l '() x x]\n    (if (nil? x)\n      l\n      (recur (cons (first x) l) (next x)))))", "user": "5b0180cfe4b0cc2b61a3bd47"}, {"problem": 23, "code": "#(loop [si (vec %) sf []] (if (empty? si) sf (recur (drop-last si) (conj sf (last si)))))", "user": "5b008bcae4b0cc2b61a3bd3d"}, {"problem": 23, "code": "reduce #(cons %2 %1) []", "user": "5b03063de4b0cc2b61a3bd5b"}, {"problem": 23, "code": "(fn [v] \n  reduce #(cons %1 %2) () (into () v))", "user": "5a9c7174e4b0d174b936c7d8"}, {"problem": 23, "code": "#((fn [cs as] (if (= cs []) as (recur (rest cs) (cons (first cs) as)))) % [])", "user": "5af0c1ede4b0cc2b61a3bc57"}, {"problem": 23, "code": "into ()", "user": "5afcd6d1e4b0cc2b61a3bd17"}, {"problem": 23, "code": "(fn [x]\n  (loop [l x, res []]\n    (if (empty? l) \n      res\n      (recur (butlast l) (conj res (last l))))))", "user": "5a786397e4b013a48d39976c"}, {"problem": 23, "code": "(fn [s]\n  (loop [s s, res ()]\n    (if (seq s)\n      (recur (rest s) (conj res (first s)))\n      res)))", "user": "5a805f7ee4b00b71e582a04d"}, {"problem": 23, "code": "(fn ReverseSequence\n  [coll]\n  (cond\n    (empty? coll) '()\n    :else (conj (ReverseSequence (butlast coll)) (last coll))))", "user": "5b02a170e4b0cc2b61a3bd52"}, {"problem": 23, "code": "reduce conj ()", "user": "5845c8f6e4b089d5ab817e77"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5b0546eae4b0cc2b61a3bd7e"}, {"problem": 23, "code": "#(reduce (fn [acc se] (conj acc se)) '() %)", "user": "5b056587e4b0cc2b61a3bd83"}, {"problem": 23, "code": "#(into () %)", "user": "5b046a9ee4b0cc2b61a3bd76"}, {"problem": 23, "code": "(fn [coll]\n  (loop [rvs '()\n         current coll]\n    (if (nil? (first current))\n      rvs\n      (recur (cons (first current) rvs) (rest current)))))", "user": "5af74644e4b0cc2b61a3bcc2"}, {"problem": 23, "code": "(fn [coll]\n\t(into '() coll))", "user": "5b068e8ce4b0cc2b61a3bd99"}, {"problem": 23, "code": "#(into '() %)", "user": "5b067ae1e4b0cc2b61a3bd97"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5b0948f3e4b0cc2b61a3bdbb"}, {"problem": 23, "code": "#(loop [s % r '()] (if (first s) (recur (rest s) (concat (list (first s)) r)) r))", "user": "58eba423e4b056aecfd47d40"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5b081ff2e4b0cc2b61a3bdb3"}, {"problem": 23, "code": "(fn [c]\n  (reduce (fn [r v]\n            (cons v r)) () c))", "user": "5aea2d21e4b0cc2b61a3bbe2"}, {"problem": 23, "code": "#(into '() %)", "user": "5af865a9e4b0cc2b61a3bcd1"}, {"problem": 23, "code": "#((fn a [l]\n     (if (empty? l)\n       nil\n       (concat (a (rest l)) (list (first l))))) %)", "user": "5afa8095e4b0cc2b61a3bceb"}, {"problem": 23, "code": "apply conj ()", "user": "5b0bd9cfe4b0cc2b61a3bdd9"}, {"problem": 23, "code": "#(loop [l % o []]\n    (if (not (empty? l))\n        (recur (butlast l) (into o (vector (last l))))\n        o))", "user": "5b083513e4b0cc2b61a3bdb4"}, {"problem": 23, "code": "#(reduce (fn [c n] (into [n] c)) [] %)", "user": "5a306073e4b09cafd31c7f9f"}, {"problem": 23, "code": "#(loop [v %\n        rv []]\n   (if (nil? (first v))\n     rv\n     (recur (rest v)\n            (cons (first v) rv))))", "user": "58e9e7c0e4b056aecfd47d11"}, {"problem": 23, "code": "(fn rev [s]\n  (reduce \n   \t(fn rf [acc v]\n  \t\t(conj acc v))\n   \t'() s))", "user": "5b0bea6de4b0cc2b61a3bdda"}, {"problem": 23, "code": "(fn rev [sequ]\n  (loop [in sequ out '()]\n    (if (= 0 (count in))\n      out\n      (recur (rest in) (cons (first in) out)))))", "user": "5b02ab12e4b0cc2b61a3bd53"}, {"problem": 23, "code": "(fn my-reverse [s] (if (zero? (count s)) [] (conj (my-reverse (rest s)) (first s))))", "user": "5b0d5619e4b0cc2b61a3bdf0"}, {"problem": 23, "code": "#(reduce (fn [x y] (cons y x)) '() %)", "user": "59d8c4e7e4b0ef0a1e9b5c47"}, {"problem": 23, "code": "(fn [x] (sort #(compare %2 %) x))", "user": "59c1c169e4b0a024fb6ae492"}, {"problem": 23, "code": "(fn [x] (reduce #(cons %2 %1) (empty x) x))", "user": "5ab9904ce4b073f177442695"}, {"problem": 23, "code": "(fn [x]\n  (reduce conj '() x))", "user": "591e1dc7e4b09b4ee5954c2a"}, {"problem": 23, "code": "reduce conj ()", "user": "5b0e6795e4b0cc2b61a3be03"}, {"problem": 23, "code": "#(into () %)", "user": "5b0f2862e4b0cc2b61a3be0f"}, {"problem": 23, "code": "(fn recursive-reverse [coll]\n    (if (empty? coll)\n        []\n        (conj (recursive-reverse (rest coll)) (first coll) )))", "user": "5b0d72e5e4b0cc2b61a3bdf8"}, {"problem": 23, "code": "(fn reverse-seq [seq_]\n  (loop [seq (seq seq_) res []]\n    (if (not (empty? seq))\n      (recur (butlast seq) (conj res (last seq)))\n      res\n      )))", "user": "5a55c713e4b05d388ecb6c43"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5b0fe3f4e4b0cc2b61a3be14"}, {"problem": 23, "code": "(fn [my-input]\n(loop [my-numbers my-input\n      my-vector []]\n    (if-not (empty? my-numbers)\n            (recur (butlast my-numbers), (conj my-vector (last my-numbers)))\n            my-vector)))", "user": "5953053ce4b066ee0a44aeda"}, {"problem": 23, "code": "reduce conj ()", "user": "59ee2b59e4b0966464fe6a10"}, {"problem": 23, "code": "(letfn\n      [(rev-aux [xs acc]\n         (if (empty? xs)\n           acc\n           (rev-aux (rest xs) (cons (first xs) acc))))]\n    (fn [xs]\n      (rev-aux xs (list))))", "user": "5b12043ee4b0cc2b61a3be3c"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5b12f5b6e4b0cc2b61a3be49"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5b13f482e4b0cc2b61a3be58"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5b14ea95e4b0cc2b61a3be62"}, {"problem": 23, "code": "(fn reverse-seq [in]\n(loop [curr-seq (seq in) new-seq '()]\n  \n  (if curr-seq\n    (recur (next curr-seq) (conj new-seq (first curr-seq)))\n    new-seq))\n  )", "user": "5b107263e4b0cc2b61a3be22"}, {"problem": 23, "code": "(fn my-reverse [s]\n    (if (empty? s)\n        []\n        (conj (my-reverse (rest s)) (first s))))", "user": "5b15811ee4b0cc2b61a3be6f"}, {"problem": 23, "code": "(fn [x] (reduce conj '() x))", "user": "5b1619e4e4b0cc2b61a3be77"}, {"problem": 23, "code": "into ()", "user": "5b118b7be4b0cc2b61a3be34"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5adbbf89e4b0837691e92bf4"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5af4446de4b0cc2b61a3bc93"}, {"problem": 23, "code": "(fn [coll]\n  (reduce #(conj %1 %2) '() coll))", "user": "5b102ab8e4b0cc2b61a3be19"}, {"problem": 23, "code": "(fn [xs] (into [] (reduce conj '() xs)))", "user": "5b1737c1e4b00d69b768e765"}, {"problem": 23, "code": ";(fn [s]\n;  (loop [cnt (count s)\n;         r (take cnt s)\n;         l (last s)]\n;    (recur (- cnt 1) (take cnt r) (last r))))\n\n(fn [s]\n  (loop [r (rest s)\n         v (conj () (first s))]\n    (if (= (count r) 0)\n      v\n      (recur (rest r) (conj v (first r))))))", "user": "5b15d56be4b0cc2b61a3be74"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5b18f2d2e4b00d69b768e777"}, {"problem": 23, "code": "reduce conj ()", "user": "5b19cdf2e4b03cfeda66ecbf"}, {"problem": 23, "code": "(fn [seq] \n  (loop [rev '() tail seq]\n    (if \n      (empty? tail)\n      rev\n      (recur (conj rev (first tail)) (rest tail)))))", "user": "5b11449ce4b0cc2b61a3be2d"}, {"problem": 23, "code": "(partial reduce (fn [acc a] (conj acc a)) '())", "user": "5b1c16e1e4b03cfeda66ecf2"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5b0b8d29e4b0cc2b61a3bdd7"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5b1f1b2de4b03cfeda66ed19"}, {"problem": 23, "code": "(fn rev [items]\n  (if\n    (empty? items)\n    []\n    (conj (rev (rest items)) (first items))))", "user": "5b1ff078e4b03cfeda66ed2a"}, {"problem": 23, "code": "(fn [li] ((fn rec [oli nli] (if (empty? oli) nli (rec (rest oli) (cons (first oli) nli)))) li nil))", "user": "5b20134de4b03cfeda66ed2d"}, {"problem": 23, "code": "reduce (fn [p c] (conj p c)) ()", "user": "59c243bae4b0a024fb6ae4aa"}, {"problem": 23, "code": "(fn rev [s] (if (empty? s) [] (conj (rev (rest s)) (first s))))", "user": "5b1fdbd5e4b03cfeda66ed27"}, {"problem": 23, "code": "#(loop [s %\n        r (list)]\n   (if (seq s)\n     (recur (rest s) (conj r (first s)))\n     r))", "user": "5b20cd02e4b03cfeda66ed37"}, {"problem": 23, "code": "into()", "user": "5af554e8e4b0cc2b61a3bca6"}, {"problem": 23, "code": "into ()", "user": "5b22328ee4b03cfeda66ed5d"}, {"problem": 23, "code": "reduce conj ()", "user": "5b2238d1e4b03cfeda66ed5e"}, {"problem": 23, "code": "(fn [coll]\n  (reduce #(conj %1 %2) '() coll))", "user": "5b215981e4b03cfeda66ed50"}, {"problem": 23, "code": "(fn reverse-sequence [lst]\n  (into () lst))", "user": "5b20049be4b03cfeda66ed2b"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5b23f306e4b08b1df1c36769"}, {"problem": 23, "code": "(fn [coll] (vals (sort (zipmap (range (count coll) 0 -1) coll))))", "user": "5b23b14ae4b08b1df1c3675c"}, {"problem": 23, "code": "reduce #(cons %2 %1) []", "user": "5b210749e4b03cfeda66ed48"}, {"problem": 23, "code": "#(into '() %)", "user": "5b250773e4b063e2438bcc21"}, {"problem": 23, "code": "reduce #(cons %2 %1) []", "user": "54dfbacae4b024c67c0cf7b1"}, {"problem": 23, "code": "(fn reverse-2\n  ([x] (reverse-2 x []))\n  ([x y]\n  (if (empty? x)\n    y\n    (recur (butlast x) (conj y (last x))))))", "user": "5a9414eae4b0d174b936c72c"}, {"problem": 23, "code": "reduce conj '()", "user": "585aad0be4b0f14aab7c8753"}, {"problem": 23, "code": "into ()", "user": "56673885e4b04acd4f672dce"}, {"problem": 23, "code": "reduce conj ()", "user": "5b274fd1e4b063e2438bcc3b"}, {"problem": 23, "code": "(partial reduce conj '())", "user": "5b236e55e4b08b1df1c36759"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5b284375e4b063e2438bcc53"}, {"problem": 23, "code": "(partial reduce conj ())", "user": "5b073c34e4b0cc2b61a3bda4"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5b28cf92e4b063e2438bcc56"}, {"problem": 23, "code": "#(into '() %)", "user": "5b29c33ee4b063e2438bcc64"}, {"problem": 23, "code": "(fn [stuff]\n  (loop [orig stuff\n         final ()]\n    (if (= orig ())\n      final\n      (recur (rest orig) (conj final (first orig))))))", "user": "5b2a559be4b063e2438bcc74"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5afdb2bae4b0cc2b61a3bd1f"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5b2bc1ace4b025bcb146f2ad"}, {"problem": 23, "code": "#(into () % )", "user": "5a4320a4e4b0447ef91cc601"}, {"problem": 23, "code": "reduce (fn [s element]\n         (cons element s)) '()", "user": "5b2c79c6e4b025bcb146f2b7"}, {"problem": 23, "code": "reduce conj '()", "user": "5b2eaf1be4b025bcb146f2db"}, {"problem": 23, "code": "(fn [coll] (reduce #(conj %1 %2) '() coll))", "user": "5b2e6b02e4b025bcb146f2d3"}, {"problem": 23, "code": "#(into [] (into '() %))", "user": "5a58da38e4b05d388ecb6c8b"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5b2d2bf3e4b025bcb146f2c4"}, {"problem": 23, "code": "(fn my-reverse [coll]\n  (loop [loop-coll coll\n         rev []]\n    (if (empty? loop-coll)\n      rev\n      (recur (rest loop-coll) (cons (first loop-coll) rev)))))", "user": "5b2c76c8e4b025bcb146f2b6"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5b3189e5e4b025bcb146f308"}, {"problem": 23, "code": "#(reduce (fn [x y] (conj x y)) () %)", "user": "59c42426e4b0a024fb6ae4f5"}, {"problem": 23, "code": "#(reduce (fn [x y] (conj x y)) () %)", "user": "5b3251c1e4b025bcb146f317"}, {"problem": 23, "code": "(fn revertList [s] (reduce conj '() s))", "user": "5b32571ee4b025bcb146f318"}, {"problem": 23, "code": "(fn reverse-seq [s] (reduce (fn [res n] (conj res n)) `() s))", "user": "5b2b6e9ae4b025bcb146f2a8"}, {"problem": 23, "code": "#(into () %)", "user": "5b33c6e1e4b025bcb146f346"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5b34aba7e4b025bcb146f352"}, {"problem": 23, "code": "(fn myFN [lst]\n  (loop [fItem (first lst)\n         rItem (rest lst)\n         out   '()\n         ]\n    (if (empty? rItem)\n      (conj out fItem)\n      (recur\n        (first rItem)\n        (rest rItem)\n        (conj out fItem)))))", "user": "5b33050ee4b025bcb146f32d"}, {"problem": 23, "code": "reduce (fn [x y] (concat [y] x)) []", "user": "5af740b3e4b0cc2b61a3bcc1"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "4e5696d0535d8a8b8723a284"}, {"problem": 23, "code": "(fn rev [x]\n  (if (empty? x) []\n    (conj (rev (rest x)) (first x))))", "user": "5b333626e4b025bcb146f32f"}, {"problem": 23, "code": "into()", "user": "5b36eae0e4b02d533a91bba2"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5b37a3b4e4b02d533a91bba9"}, {"problem": 23, "code": "(fn [x]\n  (loop [f x r [] i 0]\n    (if (not (empty? f))\n      (recur (butlast f) (conj r (last f)) (inc i))\n      r)))", "user": "5b38d771e4b02d533a91bbb0"}, {"problem": 23, "code": "#(reduce (fn [l c] (conj l c)) '() %)", "user": "5b398e4fe4b02d533a91bbb7"}, {"problem": 23, "code": "(fn [coll]\n  (loop [r (rest coll) \n         acc (conj () (first coll))]\n    (if (= (count r) 0)\n      acc\n      (recur (rest r) (conj acc (first r))))))", "user": "5b162d8ce4b0cc2b61a3be78"}, {"problem": 23, "code": "into ()", "user": "5ad5bb0ae4b0ea6055cfabf0"}, {"problem": 23, "code": "( fn rev[x] ( if ( empty? x ) [] (conj ( rev ( rest x ) ) ( first x ) ) ) )", "user": "5b3aa98be4b02d533a91bbca"}, {"problem": 23, "code": "#(into () %)", "user": "5b09dc89e4b0cc2b61a3bdc3"}, {"problem": 23, "code": "(fn [s]\n   (sort (fn [x y] -1) s))", "user": "5b2689e3e4b063e2438bcc33"}, {"problem": 23, "code": "(fn rev [elements] \n  (if-let [firstel (first elements)] \n    (concat (rev (rest elements)) [firstel])\n    []))", "user": "5b2c1f60e4b025bcb146f2b1"}, {"problem": 23, "code": "(fn my-reverse [s]\n  (reduce #(cons %2 %1) () s))", "user": "5b3a60c7e4b02d533a91bbc5"}, {"problem": 23, "code": "(fn [seq] (for [x (range (dec (count seq)) -1 -1)] ((into [] seq) x)))", "user": "5afb1c1ae4b0cc2b61a3bcf4"}, {"problem": 23, "code": "(fn [coll]\n  (reduce #(conj %1 %2) '() coll))", "user": "5b3ca9c9e4b02d533a91bbe3"}, {"problem": 23, "code": "(partial reduce conj '())", "user": "5b3b70c6e4b02d533a91bbd4"}, {"problem": 23, "code": "(fn answer [x]\n\t(case x\n     nil nil\n     (concat (answer (next x)) (list(first x)))\n     )\n)", "user": "5b3e35bde4b02d533a91bbfa"}, {"problem": 23, "code": "#(vec (reduce conj () %))", "user": "5b2927a0e4b063e2438bcc5e"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "573e4be9e4b05c31a32c0829"}, {"problem": 23, "code": "#(reduce conj () %1)", "user": "5b3ef412e4b02d533a91bc06"}, {"problem": 23, "code": "(let [rv1 (fn rv1 [a b] (if (empty? a) b (rv1 (rest a) (conj b (first a)))))] (fn rv [x] (#(if (vector? x) (vec %) %) (rv1 x '()))))", "user": "5b3f2ba9e4b02d533a91bc09"}, {"problem": 23, "code": "(fn [search-list]\n(loop [lst search-list reverse-lst []]\n\t(println lst reverse-lst)\n\t(if (empty? lst)\n\t\treverse-lst\n\t\t(recur (rest lst) (into [(first lst)] reverse-lst))))\n)", "user": "5b3de9a7e4b02d533a91bbf4"}, {"problem": 23, "code": "#(sort (comp - compare)%)", "user": "5b0c21fbe4b0cc2b61a3bde3"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5b2be9b1e4b025bcb146f2b0"}, {"problem": 23, "code": "(fn rever [n]\n(loop [array n newaraay nil ]\n      (if (empty? array )\n        newaraay\n        (recur (rest array) (cons (first array) newaraay) ))))", "user": "5b3a1c3ce4b02d533a91bbbd"}, {"problem": 23, "code": "#(loop [sq (vec %) rev []]\n   (if (= sq (rest sq))\n     rev\n     (recur (pop sq) (conj rev (last sq)))\n   )\n )", "user": "4f6c77bee4b07046d9f4efbb"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5b41c077e4b02d533a91bc25"}, {"problem": 23, "code": "#(into () %)", "user": "5b409932e4b02d533a91bc19"}, {"problem": 23, "code": "into '()", "user": "5b265183e4b063e2438bcc31"}, {"problem": 23, "code": "#(reduce (fn [x y] (conj x y)) '() %)", "user": "5a5d693ce4b0512ff01cd923"}, {"problem": 23, "code": "(fn [Karte] \n\t(loop [Liste Karte\n\t\tResult nil]\n\t\t(if (empty? Liste)\n\t\t\tResult\n\t\t\t(recur (rest Liste) (conj Result (first Liste))))))", "user": "5b35de7be4b02d533a91bb97"}, {"problem": 23, "code": "(fn rev [coll] (if (first coll) (conj (rev (rest coll)) (first coll)) []))", "user": "5b465b8be4b02d533a91bc65"}, {"problem": 23, "code": "#(into () %)", "user": "5b37fd11e4b02d533a91bbac"}, {"problem": 23, "code": "(fn rev [coll]\n  (loop [samecoll (rest coll)\n         acc (conj () (first coll))]\n    (if (= (count samecoll) 0)\n      acc\n      (recur (rest samecoll) (conj acc (first samecoll))))))", "user": "5b04662ce4b0cc2b61a3bd75"}, {"problem": 23, "code": "(fn [seq & {:keys [reversed] :or {reversed []}}]\n  (if (empty? seq) reversed\n      (recur (rest seq) {:reversed (cons (first seq) reversed)})))", "user": "5b47874be4b02d533a91bc70"}, {"problem": 23, "code": "#(into () %)", "user": "58f7bdf1e4b0438e51c2cf1c"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5b4751e0e4b02d533a91bc6a"}, {"problem": 23, "code": "into ()", "user": "5b47a4f7e4b02d533a91bc73"}, {"problem": 23, "code": "#(loop [lst %\n        ret []]\n   (if (empty? lst)\n     ret\n     (recur (rest lst) (cons (first lst) ret))))", "user": "5b4b8cd6e4b02d533a91bc9f"}, {"problem": 23, "code": "#(into () %)", "user": "5b3169a6e4b025bcb146f303"}, {"problem": 23, "code": "(fn [x](into () x))", "user": "5b445421e4b02d533a91bc40"}, {"problem": 23, "code": "(fn my-reverse\n  ([seq] (my-reverse seq []))\n  ([seq res]\n   (if (empty? seq)\n     res\n     (my-reverse\n       (drop-last seq)\n       (conj res (last seq))))))", "user": "5b4ca13ce4b02d533a91bcac"}, {"problem": 23, "code": "#(into () %)", "user": "5b44d3cae4b02d533a91bc4e"}, {"problem": 23, "code": "into ()", "user": "5826a843e4b051871117befd"}, {"problem": 23, "code": "(fn [l] (reduce conj '() l))", "user": "5b4b4052e4b02d533a91bc9a"}, {"problem": 23, "code": "(fn [s]\n  (reduce conj '() s))", "user": "5b4ff637e4b02d533a91bce0"}, {"problem": 23, "code": "#(into '() %)", "user": "530411d1e4b0d8b024fd374c"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5b337ff4e4b025bcb146f339"}, {"problem": 23, "code": "#(loop [todo % acc '()]\n    (if (empty? todo)\n      acc\n      (recur (rest todo) (conj acc (first todo)))))", "user": "5b51b9f8e4b02d533a91bcfe"}, {"problem": 23, "code": "#(loop [i %1 o '()]\n    (if (= i '())\n      o\n      (recur (rest i) (conj o (first i)))))", "user": "5b4a0ce3e4b02d533a91bc92"}, {"problem": 23, "code": "#(into '() %)", "user": "5b4dfd5de4b02d533a91bcc3"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5b51ddc9e4b02d533a91bd01"}, {"problem": 23, "code": "(fn my-rev\n  ([coll] (my-rev coll []))\n  ([coll res] (if (empty? coll) res (recur (rest coll) (cons (first coll) (vec res)))))\n  )", "user": "5b421edce4b02d533a91bc2c"}, {"problem": 23, "code": "#(reduce (fn [x y] (conj x y)) '() %)", "user": "5b5382a6e4b02d533a91bd19"}, {"problem": 23, "code": "(fn reverse-seq [xs] \n  (if (empty? xs)\n    []\n    (cons (last xs) (reverse-seq (butlast xs)))))", "user": "5b25fbb9e4b063e2438bcc2e"}, {"problem": 23, "code": "reduce conj '()", "user": "5b5462b5e4b02d533a91bd20"}, {"problem": 23, "code": "(fn [coll]\n  (loop [coll coll\n         acc (empty coll)]\n    (if (empty? coll)\n      acc\n      (recur (rest coll) (cons (first coll) acc)))))", "user": "5b338b23e4b025bcb146f33d"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5b549e61e4b02d533a91bd24"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5b552117e4b02d533a91bd2c"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "591d57aee4b09b4ee5954c16"}, {"problem": 23, "code": "(fn [col]\n  (loop [agg '() xs col]\n    (if (empty? xs)\n      agg\n      (recur (cons (first xs) agg) (rest xs)))))", "user": "5b4cd94ce4b02d533a91bcb1"}, {"problem": 23, "code": "into '()", "user": "57a5da5ee4b0a966079561fe"}, {"problem": 23, "code": "(fn  [lat]\n  (into '() lat))", "user": "5b55b15ae4b02d533a91bd35"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5b57505ce4b02d533a91bd55"}, {"problem": 23, "code": "reduce #(conj %1 %2) '()", "user": "5b5955cce4b02d533a91bd79"}, {"problem": 23, "code": "#(loop [coll (vec %) result [] i (dec (count coll))]\n  (if (= -1 i)\n    result\n    (recur coll (conj result (nth coll i)) (dec i))))", "user": "5b199fd4e4b03cfeda66ecbd"}, {"problem": 23, "code": "into ()", "user": "5b50b178e4b02d533a91bced"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5b59fe53e4b02d533a91bd87"}, {"problem": 23, "code": "(fn f [l] \n  (if (> (count l) 1)\n    (cons \n   \t\t(last l) \n   \t\t(f (take (dec (count l)) l)))\n    l))", "user": "5969bb32e4b069c0a1a197ed"}, {"problem": 23, "code": "(fn [seq] \n  (loop [seq seq\n         result []]\n    (if (empty? seq)\n      result\n      (recur (rest seq)\n             (cons (first seq) result)))))", "user": "5b59c2bde4b02d533a91bd80"}, {"problem": 23, "code": "(fn reverse-it [se]\n  (reduce (fn reducer [new n] (cons n new)) [] se)\n)", "user": "5600bed5e4b04bb52996e170"}, {"problem": 23, "code": "(fn [s] (reduce conj () s))", "user": "5b5d255de4b0c6492753e6c8"}, {"problem": 23, "code": "(fn reverse-seq\n  [coll]\n    (loop [elements coll\n           result '()]\n      (if (empty? elements)\n        (cond\n            (vector? coll) (vec result)\n            :else result)\n        (recur\n          (rest elements)\n          (do\n            (println (str \"Results is : \" result \" .And elements is : \" elements))\n            (conj result (first elements)))))))", "user": "5a3c06fce4b001c08efc0cdd"}, {"problem": 23, "code": "(fn [lst] (reduce conj '() lst))", "user": "5b5e5019e4b0c6492753e6d3"}, {"problem": 23, "code": "#(\n  (fn [s d]\n    (if s\n    (recur (next s) (conj d (first s)) )\n    d)\n  )\n% '())", "user": "5b5b0bb9e4b0c6492753e6a5"}, {"problem": 23, "code": "(fn [x]\n    (loop [acc [] i x]\n       (if (empty? i)\n        acc\n        (recur (cons (first i) acc) (rest i)))\n    ))", "user": "5b5afe87e4b0c6492753e6a4"}, {"problem": 23, "code": "(fn [x] (reduce conj () x))", "user": "5b5f2990e4b0c6492753e6ea"}, {"problem": 23, "code": "(fn [og]\n  (loop [reved '() old og]\n    (if (empty? old)\n      reved\n      (recur (conj reved (first old)) (rest old))\n      )))", "user": "5b59b89be4b02d533a91bd7d"}, {"problem": 23, "code": "(fn [s] (reduce (fn [acc x] (conj acc x)) '() s))", "user": "59b93cd7e4b0a024fb6ae3c7"}, {"problem": 23, "code": "#(let [rev (reduce (fn [a b] (conj a b)) '() (seq %))]\n   (cond \n    (vector? %) (vec rev)\n    :else rev))", "user": "5b59d176e4b02d533a91bd86"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5b100648e4b0cc2b61a3be17"}, {"problem": 23, "code": "#(into () %)", "user": "4ee897fe535d93acb0a66883"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5b609f0ae4b0c6492753e708"}, {"problem": 23, "code": "#(reduce conj '() (seq %))", "user": "5b500215e4b02d533a91bce2"}, {"problem": 23, "code": "reduce conj '()", "user": "5b5b1b61e4b0c6492753e6a7"}, {"problem": 23, "code": "reduce conj ()", "user": "5b61aa6ae4b0c6492753e712"}, {"problem": 23, "code": "reduce conj nil", "user": "5b5f2566e4b0c6492753e6e9"}, {"problem": 23, "code": "(fn [xs]\n  (reduce conj (list) xs))", "user": "573cb87fe4b05c31a32c0807"}, {"problem": 23, "code": "(fn [coll] (reduce #(conj %1 %2) '() coll))", "user": "576cd1fae4b0979f89651554"}, {"problem": 23, "code": "#(into () %)", "user": "5b62764ae4b0c6492753e725"}, {"problem": 23, "code": "(fn [s] (reduce conj '() s))", "user": "5b5e7953e4b0c6492753e6d9"}, {"problem": 23, "code": "(fn [s]\n  (loop [seq s\n         reversed []]\n    (if (not-empty seq)\n      (recur (drop-last seq) (conj reversed (last seq)))\n      reversed)))", "user": "5b602a66e4b0c6492753e6fc"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5b5ee2f2e4b0c6492753e6e1"}, {"problem": 23, "code": "(fn [coll]\n  (loop [coll coll\n         reversed []]\n    (if (seq coll)\n      (recur (rest coll) (cons (first coll) reversed))\n      reversed)))", "user": "5b62ff3ce4b0c6492753e72a"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5b632851e4b0c6492753e72d"}, {"problem": 23, "code": "(fn [x] (into () x))", "user": "5b4ff2abe4b02d533a91bcdf"}, {"problem": 23, "code": "into ()", "user": "5b608c66e4b0c6492753e706"}, {"problem": 23, "code": "#(into () %)", "user": "5b6428b3e4b0c6492753e73b"}, {"problem": 23, "code": "(fn [xs] (reduce conj (list) xs))", "user": "56e2ca59e4b03a7c14b85a38"}, {"problem": 23, "code": "reduce (fn [newList item] (conj newList item)) ()", "user": "5b5fa65fe4b0c6492753e6f6"}, {"problem": 23, "code": "into ()", "user": "5b552e2ee4b02d533a91bd2e"}, {"problem": 23, "code": "#(into () %)", "user": "5b513bd4e4b02d533a91bcf2"}, {"problem": 23, "code": "(fn [se]\n  (loop [rev (), forward se]\n    (if (empty? forward)\n      rev\n      (recur (conj rev (first forward)) (rest forward)))))", "user": "5b6756d9e4b0c6492753e764"}, {"problem": 23, "code": "(fn func\n  ([l]\n  (func l '()))\n  ([l r]\n   (if (empty? l) r (func (rest l) (conj r (first l))))))", "user": "5b679bf9e4b0c6492753e769"}, {"problem": 23, "code": "#(sort (comp - compare) %)", "user": "5b68a804e4b0c6492753e77b"}, {"problem": 23, "code": "(fn [sq]\n  (reduce #(into [%2] %1)  {} sq))", "user": "5b69529be4b0c6492753e786"}, {"problem": 23, "code": "#(into () %)", "user": "5b6962c1e4b0c6492753e787"}, {"problem": 23, "code": "(fn [lst]\n  (loop [xs lst ys []]\n    (if (empty? xs)\n      ys\n      (recur (rest xs) (cons (first xs) ys)))))", "user": "5b58d012e4b02d533a91bd71"}, {"problem": 23, "code": "#(into '() %)", "user": "5b6473eee4b0c6492753e73f"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5b66faa7e4b0c6492753e75a"}, {"problem": 23, "code": "(fn [lseq]\n    (loop [ll lseq\n           result []]\n      (if (empty? ll)\n        result\n        (recur (drop-last ll) (conj result (last ll))))))", "user": "5b611666e4b0c6492753e70d"}, {"problem": 23, "code": "(fn r [l] (if (empty? l)\n            nil\n            (concat (r (rest l))\n                    (list (first l)))))", "user": "5b6b3809e4b0c6492753e7a5"}, {"problem": 23, "code": "reduce conj '()", "user": "5b6c164ce4b0c6492753e7b4"}, {"problem": 23, "code": "#(loop [current %\nlistOfReverse ()]\n(if (empty? current)\nlistOfReverse\n(recur (rest current)\n(conj listOfReverse (first current))\n)))", "user": "5b044436e4b0cc2b61a3bd71"}, {"problem": 23, "code": "into '()", "user": "5b6afaefe4b0c6492753e79f"}, {"problem": 23, "code": "(fn [x] (reduce conj () x))", "user": "5b6c6328e4b0c6492753e7b7"}, {"problem": 23, "code": "(fn [x] (reduce (fn [s i] (cons i s)) []  x))", "user": "5b67f0fbe4b0c6492753e76d"}, {"problem": 23, "code": "into '()", "user": "5b6e1649e4b0c6492753e7ce"}, {"problem": 23, "code": "reduce conj ()", "user": "5b6f27dce4b0c6492753e7d9"}, {"problem": 23, "code": "reduce conj ()", "user": "5b6c0d56e4b0c6492753e7b2"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "57ebbf3ae4b0bfb2137f5b66"}, {"problem": 23, "code": "reduce conj ()", "user": "5b6e83e0e4b0c6492753e7d0"}, {"problem": 23, "code": "(fn [l]\n  (loop [[x & xs] (seq l)\n         result '()]\n    (if x\n      (recur xs (cons x result))\n      result)))", "user": "59d37e3de4b0ef0a1e9b5bb9"}, {"problem": 23, "code": "#(reduce (fn [r x] (cons x r)) [] %)", "user": "5b70f96fe4b047b03b203692"}, {"problem": 23, "code": "(fn \n  [seqParam]\n  (loop [revColl nil\n         inColl  seqParam]\n    (if (empty? inColl)\n      revColl\n      (do\n          (recur (cons (first inColl) revColl) (rest inColl))))))", "user": "5b69bf95e4b0c6492753e790"}, {"problem": 23, "code": "reduce conj ()", "user": "5b6f72ede4b0c6492753e7dc"}, {"problem": 23, "code": "#(into () %)", "user": "5b7292b3e4b047b03b2036a4"}, {"problem": 23, "code": "#((fn f [ys xs] (if (empty? xs) ys (f (conj ys (last xs) ) (drop-last xs)))) [] %)", "user": "5b72b36ce4b047b03b2036a9"}, {"problem": 23, "code": "#(reduce (fn [nc mem] (cons mem nc)) '() %)", "user": "5a24735fe4b07f18be40aa11"}, {"problem": 23, "code": "(fn [s]\n  (let [c (count s)\n        v (vec s)]\n    (loop [i (dec c) newseq []]\n      (if (< i 0)\n        newseq\n        (recur (dec i) (conj newseq (v i)))))))", "user": "5b7412a4e4b047b03b2036bb"}, {"problem": 23, "code": "(fn IntoW [x] (into [] (into () x)))", "user": "5b69baf9e4b0c6492753e78f"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "5b741d2be4b047b03b2036bc"}, {"problem": 23, "code": "(fn [initial]\n  (loop [initial initial\n         result nil]\n    (if (empty? initial) result\n      (recur (rest initial) (cons (first initial) result)))))", "user": "5b757b39e4b047b03b2036cd"}, {"problem": 23, "code": "(fn [col]\n  (reduce #(cons %2 %1) [] col))", "user": "57ca338de4b05aa3c4741d37"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "59b294f8e4b0e1f4e384c8fb"}, {"problem": 23, "code": "(fn [coll]\n  (reduce\n   (fn [accum item]\n     (conj accum item))\n   '()\n   coll))", "user": "5b7608c9e4b047b03b2036da"}, {"problem": 23, "code": "reduce (fn [y xs] (conj y xs)) '()", "user": "5b77248ae4b047b03b2036e7"}, {"problem": 23, "code": "#(into () %)", "user": "5b772ad7e4b047b03b2036e8"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5b77d3c8e4b047b03b2036f1"}, {"problem": 23, "code": "#(into '() %)", "user": "5b780a8ce4b047b03b2036f6"}, {"problem": 23, "code": "(fn rvs\n  ([lst] (rvs lst []))\n  ([lst accum]\n   (if (empty? lst)\n     accum\n     (recur (drop-last 1 lst) (concat accum [(last lst)] )))))", "user": "5b73e500e4b047b03b2036ba"}, {"problem": 23, "code": "(fn my-reverse [lst]\n  ((fn sub-f [lst acc]\n     (if (empty? lst)\n       acc\n       (sub-f (rest lst)\n              (conj acc\n                    (first lst)))))\n    lst '()))", "user": "5b79481de4b047b03b203704"}, {"problem": 23, "code": "reduce conj ()", "user": "5b1ec003e4b03cfeda66ed13"}, {"problem": 23, "code": "reduce conj '()", "user": "5b796594e4b047b03b203705"}, {"problem": 23, "code": "(fn rev [l]\n  (if (= 1 (count l))\n    l\n    (concat (rev (rest l))\n            (list (first l)))))", "user": "5b64370ae4b0c6492753e73c"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5b79d027e4b047b03b20370c"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5b788fc4e4b047b03b2036fc"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5b79cbdce4b047b03b20370a"}, {"problem": 23, "code": "reduce conj ()", "user": "5b754f8ee4b047b03b2036c9"}, {"problem": 23, "code": "#(loop [seq % result '()] (if (empty? seq) result (recur (rest seq) (cons (first seq) result))))", "user": "5b6002c2e4b0c6492753e6fb"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "55f48d1be4b06e875b46ce7b"}, {"problem": 23, "code": "(fn [x]  (loop [coll x\n         acc  (empty coll)]\n        (if (empty? coll)\n            acc\n            (recur (rest coll) (cons (first coll) acc)))))", "user": "5b4c2212e4b02d533a91bca6"}, {"problem": 23, "code": "(fn [x] \n  ((fn [input result]\n    (if (empty? input)\n      \tresult\n         (recur (butlast input) (conj result (last input)))\n    )\n    )\n\tx []\n  )\n  )", "user": "5b7bc82ce4b047b03b203726"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5b0d3fa5e4b0cc2b61a3bdec"}, {"problem": 23, "code": "#(loop [data %\n        result '()]\n   (if (empty? data)\n     result\n     (recur (rest data)\n            (conj result (first data)))))", "user": "55938d28e4b0c79f6e1db93f"}, {"problem": 23, "code": "#(reduce conj '() , %)", "user": "5b7d1dc1e4b047b03b20373f"}, {"problem": 23, "code": "(fn [lst]\n  (into '() lst))", "user": "5b6ba7d7e4b0c6492753e7ad"}, {"problem": 23, "code": "(fn [x] (into '() x))", "user": "5b754a5ae4b047b03b2036c8"}, {"problem": 23, "code": "(fn [s] (reduce (fn [rs el] (conj rs el)) '() s))", "user": "5b7ec039e4b047b03b20375d"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5b7c9524e4b047b03b203736"}, {"problem": 23, "code": "(fn getRev [arr]\n  (into (list (first arr)) (rest arr))\n  )", "user": "5b7f381ae4b047b03b203769"}, {"problem": 23, "code": "(fn [input-seq]\n  (loop [tmp-seq input-seq rev-seq (empty input-seq)]\n    (if (empty? tmp-seq)\n      rev-seq\n      (recur (rest tmp-seq) (concat [(first tmp-seq)] rev-seq)))))", "user": "5b8085b4e4b047b03b20377e"}, {"problem": 23, "code": "(fn [x] \n  (loop [item (first x) items (rest x) result []] \n    (if(nil? item)\n          result\n          (recur (first items) (rest items) (cons item result))\n          )))", "user": "5b7ec218e4b047b03b20375e"}, {"problem": 23, "code": "into '()", "user": "5b7e2417e4b047b03b203755"}, {"problem": 23, "code": "#(apply conj '() %)", "user": "5b820b9ae4b047b03b203797"}, {"problem": 23, "code": "(fn my-reverse [coll]\n  (if (empty? coll)\n    coll\n    (conj (my-reverse (butlast coll)) (last coll))))", "user": "5b82eec6e4b047b03b2037a4"}, {"problem": 23, "code": "(fn [s]\n  (reduce #(cons %2 %1) '() s))", "user": "5b83c02de4b047b03b2037b6"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5b83c11ae4b047b03b2037b7"}, {"problem": 23, "code": "(fn [tobereversed] (reduce conj '()  tobereversed))", "user": "5b7ed20fe4b047b03b203760"}, {"problem": 23, "code": "#(into '() %)", "user": "5b85221ce4b047b03b2037c8"}, {"problem": 23, "code": "(fn [col] (let [result #(into '() %)] (if (vector? col) (vec (result col)) (result col))))", "user": "5a085dfde4b01bb0ae8afdf4"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5b78302ce4b047b03b2036fa"}, {"problem": 23, "code": "#(reduce (fn [a i] (cons i a)) '() %)", "user": "5b885821e4b047b03b20380b"}, {"problem": 23, "code": "#(vec (reduce conj () %))", "user": "56e9db9be4b04a395b9a03ff"}, {"problem": 23, "code": "#(into '() %)", "user": "5b857411e4b047b03b2037ce"}, {"problem": 23, "code": "(fn rev-seq\n   [args]\n   (sort (comp - compare) args))", "user": "5b86462de4b047b03b2037df"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5b88f0c0e4b047b03b203816"}, {"problem": 23, "code": "into ()", "user": "5b855800e4b047b03b2037cd"}, {"problem": 23, "code": "(fn reverse-seq [sequence]\n  (let [last (last sequence)\n        without-last (remove (fn [elem]\n                               (= elem last)) sequence)]\n    (if (empty? without-last)\n      [last]\n      (concat [last] (reverse-seq without-last)))))", "user": "58ac01f7e4b0005cfeb1a73b"}, {"problem": 23, "code": "(fn f\n  ([s] (f s '()))\n  ([s s2] (if (= s '())\n            s2\n            (f (rest s) (cons (first s) s2))))\n)", "user": "5b8b326de4b0c0b3ffbd49b8"}, {"problem": 23, "code": "(fn revem\n  ([x]\n   (if (empty? x)\n     '()\n     (revem (rest x) (cons (first x) '()))))\n  ([x y]\n   (if (empty? x)\n     y\n     (revem (rest x) (cons (first x) y))))\n  )", "user": "5b847d39e4b047b03b2037c1"}, {"problem": 23, "code": "(fn [seqq]\n  (reduce (fn [rev orig]\n            (cons orig rev))\n          []\n          seqq))", "user": "5b7ef8e6e4b047b03b203765"}, {"problem": 23, "code": "#(into () %)", "user": "51b1f2d4e4b02f8f128bb95f"}, {"problem": 23, "code": "(fn\n  [seq]\n  (loop [reversed []\n         remaining seq]\n    (if (empty? remaining)\n      reversed\n      (recur (conj reversed (last remaining)) (butlast remaining))\n      )\n    )\n  )", "user": "592ac17ae4b072a2710fcf26"}, {"problem": 23, "code": "(fn rv [x]\n  (if (empty? x)\n    []\n    (conj  (rv (rest x)) (first x))\n    ))", "user": "5b81139fe4b047b03b203782"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5b8f0861e4b0c0b3ffbd49f4"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5b8f9a47e4b0c0b3ffbd49fe"}, {"problem": 23, "code": "(fn recur-reverse\n  ([s] (recur-reverse s '()))\n  ([s acc]\n    (if (empty? s)\n      acc\n      (recur (rest s) (cons (first s) acc)))))", "user": "578dc040e4b0ebec4cfb756d"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5b8aa82ee4b0c0b3ffbd49b3"}, {"problem": 23, "code": "reduce conj '()", "user": "5b8d01d7e4b0c0b3ffbd49ca"}, {"problem": 23, "code": "#(into () %)", "user": "5b8d03e4e4b0c0b3ffbd49cb"}, {"problem": 23, "code": "reduce conj ()", "user": "5b8ec146e4b0c0b3ffbd49f0"}, {"problem": 23, "code": "#(loop [tail % new []]\n  (if (empty? tail)\n    new\n    (recur (rest tail) (cons (first tail) new))))", "user": "5b91a343e4b0c0b3ffbd4a25"}, {"problem": 23, "code": "into ()", "user": "5b917764e4b0c0b3ffbd4a1f"}, {"problem": 23, "code": "(fn [x]\n  (reduce #(concat [%2] %1) [] x))", "user": "5b9263ece4b0c0b3ffbd4a37"}, {"problem": 23, "code": "reduce #(cons %2 %) ()", "user": "5b924123e4b0c0b3ffbd4a34"}, {"problem": 23, "code": "(fn re-reverse\n  ([orig] (re-reverse orig []))\n  ([orig new]\n   (if (empty? orig)\n     new\n     (re-reverse (rest orig) (cons (first orig) new))\n   )\n  )\n)", "user": "5b92f178e4b0c0b3ffbd4a41"}, {"problem": 23, "code": "(fn [coll]\n  (reduce (fn [acc el] (conj acc el))\n          '()\n          coll))", "user": "5b9357b7e4b0c0b3ffbd4a46"}, {"problem": 23, "code": "(fn [coll] \n  (reduce conj '() coll))", "user": "5b71ee18e4b047b03b20369b"}, {"problem": 23, "code": "(fn r [l] \n  (if (seq l) (conj (r (rest l)) (first l)) []))", "user": "5b919d9de4b0c0b3ffbd4a24"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5b9601e8e4b0c0b3ffbd4a70"}, {"problem": 23, "code": "(fn my-reverse\n  [coll]\n  (if (empty? coll)\n    []\n    (conj (my-reverse (rest coll)) (first coll))))", "user": "5b90f433e4b0c0b3ffbd4a14"}, {"problem": 23, "code": "(fn [xs]\n  (loop [xs xs\n         result []]\n    (if (empty? xs)\n      result\n      (recur (butlast xs)\n             (->> xs last (conj result))))))", "user": "5b96800ae4b0c0b3ffbd4a7b"}, {"problem": 23, "code": "(partial reduce (fn [acc v] (concat [v] acc)) [])", "user": "5a66fddee4b0512ff01cd9d7"}, {"problem": 23, "code": "(fn [l]\n  (reduce #(conj %1 %2) () l))", "user": "5b684a0de4b0c6492753e774"}, {"problem": 23, "code": "(fn [coleccion] (vec (reduce #(cons %2 %) [] coleccion)))", "user": "599f7a7ee4b0871e7608b81e"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5b80a5cfe4b047b03b20377f"}, {"problem": 23, "code": "reduce conj '()", "user": "5b97c521e4b0c0b3ffbd4a9a"}, {"problem": 23, "code": "(fn [s]\n  (into () s))", "user": "5b96c1f3e4b0c0b3ffbd4a80"}, {"problem": 23, "code": "#(into '() %)", "user": "57c647bbe4b05aa3c4741cf3"}, {"problem": 23, "code": "(fn ff \n  [s]\n  (if (<= (count s) 1)\n    s\n    (conj ((comp vec ff rest) s) (first s))))", "user": "5b8db323e4b0c0b3ffbd49da"}, {"problem": 23, "code": "into '()", "user": "5b97ea77e4b0c0b3ffbd4aa0"}, {"problem": 23, "code": "(fn -reverse [coll]\n  (reduce conj () coll))", "user": "5b98f7f3e4b0c0b3ffbd4ac2"}, {"problem": 23, "code": "#(loop [in % out '()]\n     (if (not (empty? in))\n       (recur (rest in) (cons (first in) out))\n       out))", "user": "5b999af8e4b0c0b3ffbd4ad3"}, {"problem": 23, "code": "(fn my-reverse [coll]\n  (if (empty? coll)\n    nil\n    (concat (my-reverse (rest coll)) (list (first coll)))))", "user": "5b975c6ee4b0c0b3ffbd4a91"}, {"problem": 23, "code": "reduce conj ()", "user": "5b99a0a3e4b0c0b3ffbd4ad7"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5b985fe5e4b0c0b3ffbd4ab1"}, {"problem": 23, "code": "(fn [coll] (sort  #(- (compare %1 %2)) coll ))", "user": "5b8aa478e4b0c0b3ffbd49b2"}, {"problem": 23, "code": "(fn rev-seq [lat]\n  (into '() lat))", "user": "5b94e4c6e4b0c0b3ffbd4a5b"}, {"problem": 23, "code": "reduce conj ()", "user": "5b9c4a7be4b0c0b3ffbd4b16"}, {"problem": 23, "code": "#(reduce (fn [a b] (into [b] a)) [] %)", "user": "5b9da7fbe4b0c0b3ffbd4b3f"}, {"problem": 23, "code": "reduce (fn [acc x] (cons x acc)) []", "user": "5b9db58be4b0c0b3ffbd4b41"}, {"problem": 23, "code": "(fn reverse-seq [s]\n  (loop [l s\n         rev (empty s)]\n    (if (empty? l)\n      rev\n      (recur (butlast l) (concat rev [(last l)])))))", "user": "5b9acb23e4b0c0b3ffbd4aef"}, {"problem": 23, "code": "(fn [seq]\n    (loop [listRev '() seqRest seq]\n      (if (empty? seqRest)\n        (into [] listRev)\n        (recur (conj listRev (first seqRest)) (rest seqRest))\n      )\n    )\n  )", "user": "5b98e5a7e4b0c0b3ffbd4abf"}, {"problem": 23, "code": "(fn [list]\n(reduce conj '() list))", "user": "5b9ffd29e4b0c0b3ffbd4b7b"}, {"problem": 23, "code": "(fn myrev [coll]\n        (loop [c coll\n               d ()]\n          (if\n           (empty? c)\n            d\n            (recur (rest c) (conj d (first c)) ))))", "user": "5b9d3913e4b0c0b3ffbd4b37"}, {"problem": 23, "code": "(fn [seq] (into '() seq))", "user": "5ba27267e4b0a20761a233c2"}, {"problem": 23, "code": "#(reduce (fn [cur n]\n         (conj cur n))\n         ()\n         %)", "user": "5ba28f36e4b0a20761a233c4"}, {"problem": 23, "code": ";;(fn\n;; this works, but it is REALLY confusing\n;;  [seq]\n;;  (reduce (fn [n new-seq] (cons new-seq n)) [] seq))\n(fn\n  [seq]\n  (reduce conj '() seq))", "user": "5a1f85ffe4b0ff51aa4b3284"}, {"problem": 23, "code": "(fn my-reverse [s]\n  (loop [s s\n         res '()]\n    (if (empty? s)\n      res\n      (recur (rest s) (conj res (first s))))))", "user": "5b9cab3ae4b0c0b3ffbd4b25"}, {"problem": 23, "code": "(fn [s](reduce (fn [a v] (cons v a)) '() s))", "user": "5ba55d85e4b0a20761a233fa"}, {"problem": 23, "code": "(fn [coll]\n  (reduce (fn [acc x] (conj acc x)) '() coll))", "user": "5ba5802de4b0a20761a233fd"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5ba0dcfce4b0c0b3ffbd4b98"}, {"problem": 23, "code": "reduce conj '()", "user": "5b7d03a0e4b047b03b20373d"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5ba7838ae4b0a20761a2341b"}, {"problem": 23, "code": "(fn [s] (reduce conj '() s))", "user": "5af3aa42e4b0cc2b61a3bc8c"}, {"problem": 23, "code": "#(reduce (fn [x y] (cons y x)) [] %)", "user": "5b5d044be4b0c6492753e6c6"}, {"problem": 23, "code": "(fn rev_arr [xy]\n  ;;(def cnt (count xy))\n  \n  (loop [arr xy ln (count xy) result []]\n    (if (= ln 0)\n      result\n      (recur (drop-last arr) (dec ln) (conj result (last arr)))\n  \t)\n  )\n)\n  \n  ;;(fn rr [coll] (map #(nth %1 1) (sort #(> (first %1) (first %2)) (map-indexed list coll))))", "user": "5b98f174e4b0c0b3ffbd4ac1"}, {"problem": 23, "code": "(fn [s] (reduce conj () s))", "user": "5ba24b59e4b0a20761a233bf"}, {"problem": 23, "code": "#(reduce (fn [acc, curr] (concat [curr] acc)) [] %)", "user": "5baa5f53e4b0a20761a23459"}, {"problem": 23, "code": "(fn fun[x] \n    (when x \n      (cons (last x) (fun (butlast x)))\n    )\n )", "user": "5baa7abce4b0a20761a2345d"}, {"problem": 23, "code": "#(into '() %)", "user": "5baa7c7be4b0a20761a2345e"}, {"problem": 23, "code": ";;(fn [xs]\n;;  (if (vector? (first xs))\n;;    (sort-by first > xs)\n;;    (sort > xs)))\nreduce conj ()", "user": "567072fbe4b0a866af6896f3"}, {"problem": 23, "code": "reduce #(into [%2] %1) []", "user": "5b6ccc58e4b0c6492753e7bb"}, {"problem": 23, "code": "(fn [s]\n    (loop [s-in s\n           s-out '()]\n      (if (empty? s-in)\n        s-out\n        (recur (rest s-in) (conj s-out (first s-in))))))", "user": "5bab5440e4b0a20761a23475"}, {"problem": 23, "code": "(fn reverse'\n  [coll]\n  (loop [coll coll\n         \t coll' ()]\n    (if (not-empty coll)\n      (recur (rest coll) (conj coll' (first coll)))\n      coll')))", "user": "5bab49bbe4b0a20761a23474"}, {"problem": 23, "code": "(fn [x] (reduce conj '() x))", "user": "5bab93d5e4b0a20761a2347f"}, {"problem": 23, "code": "reduce conj ()", "user": "5bacfa46e4b0a20761a234a2"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5bad07eee4b0a20761a234a4"}, {"problem": 23, "code": "#(into () %)", "user": "5bab968fe4b0a20761a23481"}, {"problem": 23, "code": "(fn my-reverse [xs]\n  (loop [counter 0\n         arr ()\n         buffer xs]\n    (if (= counter (count xs))\n      arr\n      (recur (inc counter) (conj arr (first buffer)) (rest buffer)))))", "user": "5bab8c06e4b0a20761a2347e"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5bafd5c8e4b0a20761a234dd"}, {"problem": 23, "code": "(fn f\n  ([l] (f l []))\n  ([l acc] \n    (if (last l)\n      (f (drop-last l) (conj acc (last l)))\n      acc)))", "user": "5ba7dac4e4b0a20761a23422"}, {"problem": 23, "code": "reduce #(conj %1 %2) '()", "user": "4eb92051535dfed6da9c6d4c"}, {"problem": 23, "code": "(fn \n  [col]\n  (loop [remaining col \n         rev []]\n    (if (empty? remaining)\n      rev\n    (recur (drop-last remaining)\n           (conj rev (last remaining))))))", "user": "5bb0fc08e4b0a20761a234f3"}, {"problem": 23, "code": "#(reduce (fn [acc val] (cons val acc)) [] %)", "user": "5bb17123e4b0a20761a234fd"}, {"problem": 23, "code": "(fn\n  \n  [seq]\n  (reduce (fn [x y] (cons y x)) [] seq)\n  )", "user": "5b759ca8e4b047b03b2036d0"}, {"problem": 23, "code": "#(->> % seq (into ()))", "user": "5bb23cf1e4b0a20761a2350a"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5b329773e4b025bcb146f322"}, {"problem": 23, "code": "(fn[x](sort #(compare %2 %1) x))", "user": "59deedace4b01968742fed84"}, {"problem": 23, "code": "reduce #(conj %1 %2) ()", "user": "5a3e6642e4b0447ef91cc5b3"}, {"problem": 23, "code": "(fn [x]\n  (reduce conj () x))", "user": "5baa1b58e4b0a20761a2344e"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5baaf8fee4b0a20761a2346c"}, {"problem": 23, "code": "(fn [coll]\n  (loop [l coll\n         result '()]\n    (if (empty? (rest l))\n      (conj result (first l))\n      (recur (rest l) (conj result (first l))))))", "user": "5bb46f84e4b0a20761a23549"}, {"problem": 23, "code": "#(into '() %)", "user": "5bb4b291e4b0a20761a23551"}, {"problem": 23, "code": "reduce conj ()", "user": "5a6dbaf5e4b0512ff01cda63"}, {"problem": 23, "code": "(fn rev\n  ([lst] (rev lst '()))\n  ([lst acc]\n   \t(if (empty? lst)\n      \tacc\n      \t(rev (rest lst) (cons (first lst) acc)))))", "user": "5bb6166fe4b0a20761a23579"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5bb7dd12e4b0a20761a235b2"}, {"problem": 23, "code": "reduce conj ()", "user": "59137b42e4b0163c97b36f04"}, {"problem": 23, "code": "(fn rev [coll] \n  (->> coll\n    (reduce conj ())))", "user": "5bb7c9e3e4b0a20761a235b0"}, {"problem": 23, "code": "#(loop [lst % reversed nil]\n   (if (empty? lst)\n     reversed\n     (recur\n      (next lst)\n      (conj reversed\n            (first lst)\n      )\n   )\n  )\n)", "user": "5bb905dce4b0a20761a235c7"}, {"problem": 23, "code": "reduce conj ()", "user": "5bb9375fe4b0a20761a235d0"}, {"problem": 23, "code": "reduce conj ()", "user": "5bb7b956e4b0a20761a235ad"}, {"problem": 23, "code": "(fn [c] (reduce #(conj %1 %2) '() c))", "user": "5bb6f929e4b0a20761a23594"}, {"problem": 23, "code": "(partial reduce conj '())", "user": "5ad4c3d2e4b0ea6055cfabe1"}, {"problem": 23, "code": "(fn my-reverse\n  ;\"Reverses a sequence\"\n  [lst]\n  (if (empty? lst) lst\n     (cons (last lst)\n     (my-reverse (butlast lst)))))", "user": "5bbbcecee4b0a20761a23611"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5bbbce0ee4b0a20761a2360d"}, {"problem": 23, "code": "(fn reverse_a_sequence\n  [lst]\n  (if (empty? lst) lst\n     (cons(last lst)\n       (reverse_a_sequence (butlast lst)))))", "user": "5bbbd077e4b0a20761a23615"}, {"problem": 23, "code": "(fn rev\n   ([lst] (rev '() lst))\n   ([res lst] (if (seq lst) (rev (cons (first lst) res) (rest lst)) res)))", "user": "5bbbce70e4b0a20761a2360f"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5bbbba29e4b0a20761a23609"}, {"problem": 23, "code": "(fn [old & new]\n  (if (nil? new)\n\t(recur old '())\n    (if (= old [])\n      new\n      (recur (rest old) (conj new (first old)) )\n    )\n  )\n)", "user": "5bbd13a5e4b07a9b28b0ff95"}, {"problem": 23, "code": "#(reduce (fn [a e] (conj a e)) '() %)", "user": "5a68f374e4b0512ff01cda05"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5bbe3a5ae4b07a9b28b0ffb9"}, {"problem": 23, "code": "reduce conj '()", "user": "5b6dde85e4b0c6492753e7ca"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5bbcb71ce4b0a20761a23629"}, {"problem": 23, "code": "(fn reverses\n  [lst]\n  (loop [lst lst\n         result ()]\n    (if (empty? lst)\n      result\n      (recur (rest lst) (cons (first lst) result)))))", "user": "5bbbcf9ee4b0a20761a23614"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5bbc0ddfe4b0a20761a2361e"}, {"problem": 23, "code": "(fn rev [item]\n  (let [n (count item)]\n    (loop [x n\n           result '()]\n      (if (> x 0)\n          (recur (dec x) (conj result \n                          (first (drop (- n x) item))))\n          result))))", "user": "5ba6d337e4b0a20761a23414"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5bb919e1e4b0a20761a235ca"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5bbcc747e4b0a20761a23634"}, {"problem": 23, "code": "(fn rev [coll]\n    (let [s (seq coll)]\n      (if s (conj (vec (rev (rest s))) (first s)) nil)))", "user": "5bb25684e4b0a20761a2350d"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "587fb546e4b0f1effa3b75f9"}, {"problem": 23, "code": "(fn \n  [s] \n  (map-indexed \n   \t#(do %& (nth (into [] s) (- (count s) 1 %1)) )\n   \ts\n  ) \n)", "user": "5bbbd484e4b0a20761a23617"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5bc255b7e4b07a9b28b10029"}, {"problem": 23, "code": "(partial reduce conj '())", "user": "5829d9f8e4b051871117bf4d"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5bc15685e4b07a9b28b10016"}, {"problem": 23, "code": "(fn rev \n  ([s] \n   (rev s '()))\n  ([s r]\n   (if (empty? s)\n     r\n     (recur (rest s) (conj r (first s))))))", "user": "5bb5cd43e4b0a20761a23575"}, {"problem": 23, "code": "(fn [xs] (reduce #(cons %2 %1) () xs))", "user": "5bc20634e4b07a9b28b10022"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "599e3677e4b0871e7608b809"}, {"problem": 23, "code": "(partial reduce conj ())", "user": "5bc39d2be4b07a9b28b10045"}, {"problem": 23, "code": "(fn [r] \n(reduce \n(fn [li s] (cons s li)) '() r))", "user": "5bc2df19e4b07a9b28b10038"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "5bc488bde4b07a9b28b10053"}, {"problem": 23, "code": "(fn [x] (loop [new-list ()\n               og-list x]\n          (if (empty? og-list) new-list\n            (recur (cons (first og-list) new-list) (rest og-list))  \n          )))", "user": "5bb3c9a8e4b0a20761a2352f"}, {"problem": 23, "code": "(fn [list]\n  \"Reverses the order of a list\"\n  ((fn [list resp]\n     (if (empty? list)\n       resp\n       (recur (rest list) (cons (first list) resp))))\n    list '()))", "user": "5bc50870e4b07a9b28b10069"}, {"problem": 23, "code": "#(into () %)", "user": "57d82162e4b0bd073c2023e5"}, {"problem": 23, "code": "(fn [xs]\n  (loop [xs xs rev '()]\n    (if (empty? xs) rev (recur (rest xs) (conj rev (first xs))))))", "user": "5bc664a2e4b07a9b28b10093"}, {"problem": 23, "code": "(fn [c] (reduce #(cons %2 %1) [] c))", "user": "5b8f77a8e4b0c0b3ffbd49fa"}, {"problem": 23, "code": "#(apply vector (reduce conj '() %))", "user": "5bc63072e4b07a9b28b10089"}, {"problem": 23, "code": "(fn [x] (reduce #(conj %1 %2) () x))", "user": "5bb948f5e4b0a20761a235d5"}, {"problem": 23, "code": "(fn rev [lst] (if (empty? lst) (list) (concat (rev (rest lst)) (list (first lst)))))", "user": "5bc8c033e4b07a9b28b100ca"}, {"problem": 23, "code": "(fn [coll]\n  (loop [xs coll acc nil]\n    (if-let [ys (next xs)]\n      (recur ys (cons (first xs) acc))\n      (cons (first xs) acc))))", "user": "5bc833a5e4b07a9b28b100bb"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5bc64843e4b07a9b28b10091"}, {"problem": 23, "code": "(fn [lst]\n  (loop [lst lst\n         newLst '()]\n    (if (empty? lst)\n      newLst\n      (recur (rest lst) (conj newLst (first lst))))))", "user": "5bbbce60e4b0a20761a2360e"}, {"problem": 23, "code": "reduce conj '()", "user": "5bc8e91ee4b07a9b28b100ce"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5bc7ba68e4b07a9b28b100b0"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5bbbcf81e4b0a20761a23613"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5bc7c3aee4b07a9b28b100b2"}, {"problem": 23, "code": "(fn f [coll]\n  (loop [coll (seq coll) rev nil]\n    (if coll\n      (recur (next coll) (cons (first coll) rev))\n      rev)))", "user": "59d8f23ae4b0ef0a1e9b5c49"}, {"problem": 23, "code": "#((fn rev [[a & r]]\n  (if r (concat (rev r) [a]) (seq [a]))) (seq %))", "user": "5bc935bde4b07a9b28b100d8"}, {"problem": 23, "code": "(fn [s] (reduce (fn [acc x] (conj acc x)) '() s))", "user": "59a0286be4b0871e7608b82f"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5bc611e3e4b07a9b28b10083"}, {"problem": 23, "code": "(fn [seq] (reduce conj '() (vec seq)))", "user": "5bc352abe4b07a9b28b10041"}, {"problem": 23, "code": "(fn [coll] (reduce #(cons %2 %1) (empty coll) coll))", "user": "5bc6ef7ce4b07a9b28b1009f"}, {"problem": 23, "code": "(fn rev [x] (if (empty? x) [] (conj (rev (rest x)) (first x))))", "user": "5bca2c71e4b07a9b28b100e7"}, {"problem": 23, "code": "(fn foo\n  [col]\n  (let [head (first col)\n        tail (rest col)]\n    (if (empty? tail)\n      [head]\n      (conj (foo tail) head))))", "user": "5b94c507e4b0c0b3ffbd4a5a"}, {"problem": 23, "code": "reduce #(conj %1 %2) '()", "user": "5bc28638e4b07a9b28b10033"}, {"problem": 23, "code": "(fn r [xs] (into '() (seq xs)))", "user": "5bc09ebae4b07a9b28b10005"}, {"problem": 23, "code": "reduce conj ()", "user": "5bcad61fe4b07a9b28b100f6"}, {"problem": 23, "code": "(fn [lst]\n  (loop [lst lst\n         result ()]\n    (if (empty? lst)\n      result\n      (recur\n       (rest lst)\n       (cons (first lst) result)))))", "user": "5bcb672ee4b07a9b28b10100"}, {"problem": 23, "code": "reduce conj ()", "user": "52a9c2efe4b0c58976d9ac50"}, {"problem": 23, "code": "(fn [ls]\n   (loop [l ls\n          acc (empty ls)]\n     (if (empty? l) \n       acc\n       (recur\n        (rest l)\n        (cons (first l) acc)\n       )\n     )\n   )\n )", "user": "5bc8afb9e4b07a9b28b100c9"}, {"problem": 23, "code": "(fn\n  [lst]\n  (into () lst)\n  )", "user": "5bbbce99e4b0a20761a23610"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5a99c5a9e4b0d174b936c7b1"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5bbbcf3ae4b0a20761a23612"}, {"problem": 23, "code": "(fn [coll]\n  (loop [origin coll\n         reversed []]\n    (if (nil? origin)\n      reversed\n      (recur (next origin) (cons (first origin) reversed)))))", "user": "5bc7f2d6e4b07a9b28b100b7"}, {"problem": 23, "code": "(fn f [xs]\n  (if (empty? xs)\n    []\n    (let [y (first xs)\n        ys (rest xs)]\n    (concat (f ys) [y]))))", "user": "5bcddaeee4b0e9689409ee07"}, {"problem": 23, "code": "(fn [xs]\n  (loop [xs xs\n         acc nil]\n    (if (empty? xs)\n      acc\n      (recur (rest xs) (cons (first xs) acc)))))", "user": "5b673832e4b0c6492753e760"}, {"problem": 23, "code": "reduce conj '()", "user": "5bca3883e4b07a9b28b100eb"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "582c986ee4b051871117bf9b"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5bc4f266e4b07a9b28b10066"}, {"problem": 23, "code": "(fn rev [s]\n  (loop [si s\n        so []]\n    (if (empty? si)\n      so\n      (recur\n      \n      (rest si)\n       (cons (first si) so)))))", "user": "5bce439fe4b0e9689409ee17"}, {"problem": 23, "code": "#(loop [remainSeq (seq %) uList ()]\n           (let [[curVal & tail] remainSeq]\n             (if (empty? tail)\n               (conj uList curVal)\n               (recur tail (conj uList curVal)))))", "user": "5bcd3c4de4b0e9689409edfa"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5bcdbfbde4b0e9689409ee04"}, {"problem": 23, "code": "into '()", "user": "5bcd9a86e4b0e9689409edfe"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5bcf0b1be4b0e9689409ee24"}, {"problem": 23, "code": "(fn revers[s]\n  (loop [s s\n         n`()]\n    (if (empty? s)\n      n\n      (recur (rest s) (conj n (first s))))))", "user": "5bd06861e4b0e9689409ee3a"}, {"problem": 23, "code": "(partial reduce conj ())", "user": "5bd0ea60e4b0e9689409ee45"}, {"problem": 23, "code": "#(loop [xs %\n        result []]\n (if xs\n  (let [x (last xs)]\n   (recur (butlast xs) (conj result x)))\n  result))", "user": "577caf73e4b0c8d87281f6c6"}, {"problem": 23, "code": "reduce conj '()", "user": "5a64ce4ee4b0512ff01cd9a6"}, {"problem": 23, "code": "#(loop [new-vec '[], old-vec %]\n   (if (empty? old-vec)\n     new-vec\n     (recur\n      \t(conj new-vec (last old-vec)),\n      \t(drop-last old-vec)\n)))", "user": "5bd1b23ae4b0e9689409ee52"}, {"problem": 23, "code": "#(reduce (fn [i j] (cons j i)) [] %)", "user": "5a8aa992e4b05369db4d24d8"}, {"problem": 23, "code": "(partial reduce conj () )", "user": "554f817ce4b00713264bd9a2"}, {"problem": 23, "code": "(fn reverse-seq [s]\n  (if\n    (empty? s)\n    ()\n    (conj \n     (reverse-seq (butlast s)) \n     (last s))))", "user": "5bd52eabe4b0ed4b8aab4b97"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5bd7cddee4b0ed4b8aab4bc9"}, {"problem": 23, "code": "(fn [x] (reduce #(cons %2 %1) [] x))", "user": "5bd7b8b8e4b0ed4b8aab4bc6"}, {"problem": 23, "code": "(fn [x] (reduce #(conj %1 %2) () x))", "user": "5bd648d9e4b0ed4b8aab4ba5"}, {"problem": 23, "code": "(fn\n    [array]\n    (into '() array)\n    )", "user": "5bd71aefe4b0ed4b8aab4bb5"}, {"problem": 23, "code": "(fn [col]\n  (loop [acc '()\n         xs col]\n    (if (empty? xs)\n      acc\n      (recur (conj acc (first xs)) (rest xs)))))", "user": "596b5f27e4b069c0a1a19813"}, {"problem": 23, "code": "(fn f [xs] (if (empty? xs)\n            xs\n            (concat (f (rest xs)) [(first xs)])))", "user": "5bd9549ee4b0ed4b8aab4bf0"}, {"problem": 23, "code": "reduce conj ()", "user": "5bd999cce4b0ed4b8aab4bf4"}, {"problem": 23, "code": "(fn [coll]\n  (loop [r (rest coll)\n         acc (conj () (first coll))]\n    (if (= (count r) 0)\n      acc\n      (recur (rest r) (conj acc (first r))))))", "user": "5bd0cdd4e4b0e9689409ee43"}, {"problem": 23, "code": "#(loop [initial %\n        result []]\n   (if (empty? initial)\n     result\n     (recur (rest initial) (cons (first initial) result))))", "user": "5bd1fd6be4b0e9689409ee54"}, {"problem": 23, "code": "#(apply conj (take 1 %) (rest %))", "user": "5bba703fe4b0a20761a235eb"}, {"problem": 23, "code": "(fn [l]\n  ((partial into '()) l))", "user": "5bd93897e4b0ed4b8aab4bee"}, {"problem": 23, "code": "(fn [s]\n  (reduce conj '() s))", "user": "4f9bb96ae4b0dcca54ed6d18"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5b5785c7e4b02d533a91bd5b"}, {"problem": 23, "code": "(fn [coll] (reduce conj () coll))", "user": "5bbdd136e4b07a9b28b0ffab"}, {"problem": 23, "code": "(fn reve [x]\n(into () x))", "user": "5bd6e161e4b0ed4b8aab4baf"}, {"problem": 23, "code": "(fn [x & y]\n\n   (if (empty? x)\n     y\n     (recur (rest x) (conj (or y '()) (first x)))))", "user": "5be0306be4b0ed4b8aab4c7d"}, {"problem": 23, "code": "(fn [x] (loop [x x o ()] (if (empty? x) o (recur (rest x) (conj o (first x))))))", "user": "5bdf651ee4b0ed4b8aab4c6d"}, {"problem": 23, "code": "#(loop [col %\n      acc (empty col)] \n      (if (empty? col) \n        acc\n        (recur(rest col) (cons (first col) acc)) ))", "user": "51545663e4b084ca81ee2e18"}, {"problem": 23, "code": "(fn [l] \n                   (loop [ll l ret []] (if (empty? ll) ret (recur (rest ll) (cons (first ll) ret)))))", "user": "5be05ea7e4b0ed4b8aab4c83"}, {"problem": 23, "code": "(fn [x] (reduce conj '() x))", "user": "5be22881e4b0ed4b8aab4cb2"}, {"problem": 23, "code": "(fn [x] (reduce (fn [acc e] (cons e acc)) '() x))", "user": "5be2e670e4b0ed4b8aab4ccc"}, {"problem": 23, "code": "(fn rev [s] (if (empty? s) [] (conj (rev (rest s)) (first s) ) ))", "user": "5be182eae4b0ed4b8aab4c9d"}, {"problem": 23, "code": "(fn [a-seq]\n  (loop [sq a-seq\n         acc '()]\n    (if (empty? sq) acc\n      (recur (rest sq) (conj acc (first sq))))))", "user": "5be33a16e4b0ed4b8aab4cd6"}, {"problem": 23, "code": "(fn [x]\n  (letfn [(helper [new old]\n                  (if (empty? old)\n                    new\n                    (recur (conj new (first old)) (rest old))))]\n    (helper '() x)))", "user": "5be58beae4b0ed4b8aab4d14"}, {"problem": 23, "code": "(fn [coll]\n    (map second\n         (sort (map vector\n                    (map -\n                         (range))\n                    coll))))", "user": "5be5cebde4b0ed4b8aab4d19"}, {"problem": 23, "code": "(fn[listt] (reduce conj () listt))", "user": "5be580cfe4b0ed4b8aab4d12"}, {"problem": 23, "code": "reduce #(concat [%2] %1) []", "user": "5be6d0f8e4b0f319e2d7ec51"}, {"problem": 23, "code": ";(fn\n;  [col]\n;  (loop [auxCol col  j 0 res '()]\n;    (let [i (first auxCol)]\n;      (if (nil? i) \n;        res\n;        (recur (rest auxCol) (inc j) (conj res i))  \n;    ))))\n#(reduce conj () %)", "user": "5be589f9e4b0ed4b8aab4d13"}, {"problem": 23, "code": "apply conj ()", "user": "5be79b5be4b0f319e2d7ec5a"}, {"problem": 23, "code": "(fn [ls] (reduce conj () ls))", "user": "5b9bfe0be4b0c0b3ffbd4b10"}, {"problem": 23, "code": "(fn [x] (seq (into (list) (seq x))))", "user": "5be8bc2de4b0f319e2d7ec66"}, {"problem": 23, "code": "reduce (fn [acc x] (conj acc x)) nil", "user": "5be909bae4b0f319e2d7ec6d"}, {"problem": 23, "code": "(fn [seq_] (\n            loop [x '() y seq_](\n                               if(empty? y)\n                               x\n                               (recur (conj x (first y)) (rest y)))))", "user": "5bd9eac4e4b0ed4b8aab4bfc"}, {"problem": 23, "code": "#(reduce (fn [x y] (conj x y)) '() %)", "user": "5be46165e4b0ed4b8aab4cfd"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5be70bd5e4b0f319e2d7ec53"}, {"problem": 23, "code": "apply conj ()", "user": "5be96111e4b0f319e2d7ec70"}, {"problem": 23, "code": "(fn [coll]\n    (reduce conj () coll))", "user": "591f9a1fe4b09b4ee5954c4f"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5beda934e4b0a6d31fed2123"}, {"problem": 23, "code": "apply conj '()", "user": "5bece6a5e4b0a6d31fed2114"}, {"problem": 23, "code": "reduce conj ()", "user": "5bed84b1e4b0a6d31fed2120"}, {"problem": 23, "code": "reduce conj ()", "user": "5be9ee04e4b0f319e2d7ec7b"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5ba15075e4b0a20761a2339e"}, {"problem": 23, "code": "reduce conj '()", "user": "5b4b58f2e4b02d533a91bc9c"}, {"problem": 23, "code": "(fn rev [x] (if (empty? x) nil (conj (rev (butlast x)) (last x))))", "user": "5bef02ede4b0a6d31fed2138"}, {"problem": 23, "code": "reduce conj '()", "user": "5bea3177e4b0f319e2d7ec81"}, {"problem": 23, "code": "reduce conj ()", "user": "5bf0aefde4b0a6d31fed215a"}, {"problem": 23, "code": "#(reduce conj '() %1)", "user": "5be3025ee4b0ed4b8aab4cd1"}, {"problem": 23, "code": ";(fn [x] loop [items x r []]\n;  (conj r (peek items))\n;  (if (empty? items) r (recur (butlast items) r)))\n\n(fn [x] (reduce #(concat [%2] %1) [] x) )", "user": "5bf313e8e4b0a6d31fed2188"}, {"problem": 23, "code": "(fn rev ([l](rev l (list)))\n        ([l rl] (if (empty? l) rl (rev (rest l) (conj rl (first l))))))", "user": "5bf30feae4b0a6d31fed2186"}, {"problem": 23, "code": "(fn\n  [in-sequence]\n  \t(loop \n      [in-seq in-sequence\n       reversed-seq '()]\n      \n      (if (= (count in-seq) 0)\n        reversed-seq\n      \t(recur \n       \t\t(rest in-seq)\n       \t\t(conj reversed-seq (first in-seq)))\n        )\n      )\n  )", "user": "5bdb0b4ce4b0ed4b8aab4c10"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5bec37e2e4b0f319e2d7ec96"}, {"problem": 23, "code": "reduce conj ()", "user": "5be9ad9be4b0f319e2d7ec76"}, {"problem": 23, "code": "(fn rev [arr] \n  (if (= 1 (count arr))\n    arr\n    (concat (rev (rest arr)) (vector (first arr)) )\n  )  \n)", "user": "5bf2cf8be4b0a6d31fed217c"}, {"problem": 23, "code": "reduce conj '()", "user": "5bf45b4ce4b0b326c961d88c"}, {"problem": 23, "code": "(fn [coll]\n  (loop [in coll out '()]\n    (if (empty? in)\n      out\n      (recur (rest in) (cons (first in) out)))))", "user": "4eb9d8e0535dfed6da9c6d60"}, {"problem": 23, "code": "(fn my-reverse-2\n  [a]\n  (if (empty? a )\n            []\n  (conj (my-reverse-2 (rest a)) (first a))))", "user": "5bf50e76e4b0b326c961d8a0"}, {"problem": 23, "code": "(fn r [s]\n  (if (empty? s) \n    []\n    (conj (r (rest s)) (first s))))", "user": "5bf50ebce4b0b326c961d8a1"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5a42dbabe4b0447ef91cc5fc"}, {"problem": 23, "code": "#(reduce (fn [a c] (concat [c] a)) [] %)", "user": "5aca79a7e4b0e27600da77e4"}, {"problem": 23, "code": "reduce conj ()", "user": "5beb8e28e4b0f319e2d7ec8e"}, {"problem": 23, "code": "(fn [some-sequence]\n                          (loop [x some-sequence\n                                 out '()]\n                            (if (empty? x)\n                              out\n                              (recur (rest x)\n                                     (conj out (first x))))))", "user": "5bf5ddfde4b0bdcf453d159e"}, {"problem": 23, "code": "(fn [x]\n   (let [rf (fn [h r coll]\n              (if (nil? h)\n                coll\n                (recur (first r) (rest r) (conj coll h))))]\n (rf (first x) (rest x) '())))", "user": "5b15ab32e4b0cc2b61a3be72"}, {"problem": 23, "code": "(fn [s] (into () s))", "user": "5be9d530e4b0f319e2d7ec79"}, {"problem": 23, "code": "(fn [x]\n  (loop [x x\n         r '()]\n    (if (= '() x)\n      r\n      (recur (rest x) (conj r (first x))))))", "user": "5bf872e0e4b0bdcf453d15b7"}, {"problem": 23, "code": "(fn rev [sq]\n  (if (empty? sq)\n    []\n    (conj (rev (rest sq)) (first sq)))\n  )", "user": "5bfa25fbe4b0bdcf453d15c8"}, {"problem": 23, "code": "reduce conj ()", "user": "5bfa3e02e4b0bdcf453d15ca"}, {"problem": 23, "code": "reduce conj ()", "user": "5bed1e4ae4b0a6d31fed2118"}, {"problem": 23, "code": "(fn [values]\n  (loop [rev () vs values]\n    (if (nil? vs)\n      rev\n      (recur (conj rev (first vs)) (next vs)))))", "user": "5bfaab50e4b0bdcf453d15ce"}, {"problem": 23, "code": "(fn [original]\n  (loop [old original new []]\n    (if (empty? old) new\n      (recur (drop-last old) (conj new (last old))\n             ))))", "user": "5bfbf75ee4b0bdcf453d15df"}, {"problem": 23, "code": "(fn [coll] (reduce conj () coll))", "user": "5be15f4de4b0ed4b8aab4c9b"}, {"problem": 23, "code": "(fn [xs]\n  (loop [xs xs ret ()]\n    (cond\n      (empty? xs)\n      ret\n\n      :else\n      (recur (rest xs) (conj ret (first xs))))))", "user": "55955c0be4b0c79f6e1db967"}, {"problem": 23, "code": "reduce conj ()", "user": "5beda647e4b0a6d31fed2122"}, {"problem": 23, "code": "(fn [lst]\n  (loop [l lst\n         l2 nil]\n    (if (empty? l)\n      l2\n      (recur (rest l) (conj l2 (first l))))))", "user": "5ac9c737e4b0e27600da77d2"}, {"problem": 23, "code": "(fn [x]\n  (loop [oldColl x newColl (empty x)]\n    (if (empty? oldColl)\n      newColl\n      (recur (rest oldColl) (cons (first oldColl) newColl))\n      )))", "user": "5bfc82cfe4b0bdcf453d15f0"}, {"problem": 23, "code": "(fn rev [l1]\n  (when (not (= 0 (count l1)))\n    (println (count l1))\n    (conj\n\n      (rev (take (- (count l1) 1) l1))\n      (last l1))\n\n    )\n\n  )", "user": "5bfc2068e4b0bdcf453d15e4"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5beebdb7e4b0a6d31fed2132"}, {"problem": 23, "code": "into '()", "user": "5bfe4ecfe4b0bdcf453d1608"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5bfada5ee4b0bdcf453d15d2"}, {"problem": 23, "code": "reduce conj '()", "user": "5bff74a2e4b0bdcf453d162b"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5c0039dce4b0bdcf453d1636"}, {"problem": 23, "code": "(fn [l] (\n  (fn r [x el]\n    (if (= (first x) nil)\n      (reduce conj x el)\n      (r (rest x) (conj el (first x)))\n      )) l []))", "user": "5bff87fbe4b0bdcf453d162c"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5c014aaae4b0bdcf453d1649"}, {"problem": 23, "code": "#(loop [coll %\n                  result (empty %)]\n             (if (empty? coll)\n               result\n               (recur (rest coll)\n                      (cons (first coll) result))))", "user": "5bef3e88e4b0a6d31fed213f"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5bff66c0e4b0bdcf453d1628"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "59cfc120e4b0ef0a1e9b5b73"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "51eead15e4b0871fa145d98a"}, {"problem": 23, "code": "(fn [l] (loop [[f & r] (seq l) res '()] (if (nil? f) res (recur r (conj res f)))))", "user": "5c03e927e4b0bdcf453d167b"}, {"problem": 23, "code": "reduce conj ()", "user": "595e6c76e4b066ee0a44b043"}, {"problem": 23, "code": "#(reduce (fn [a b] (conj a b)) (list) %)", "user": "55362a5fe4b09218d5f44fb8"}, {"problem": 23, "code": "reduce conj '()", "user": "5bf12915e4b0a6d31fed2168"}, {"problem": 23, "code": "(fn [coll]\n  (loop [coll coll rev (list)]\n    (if (empty? coll)\n      rev\n      (recur (rest coll) (conj rev (first coll))))))", "user": "5c04464ee4b0bdcf453d167d"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5bfd0b72e4b0bdcf453d15f6"}, {"problem": 23, "code": "(fn [coll] (reduce (fn [res elem] (conj res elem)) '() coll))", "user": "5c05cae7e4b0bdcf453d16a3"}, {"problem": 23, "code": "(fn [a] (map second (sort-by first > (map-indexed vector a))))", "user": "58273e82e4b051871117bf1b"}, {"problem": 23, "code": "#(loop [i (.length (vec %)) new-s () s %]\n  (if (= i 0)\n    new-s\n    (recur (dec i) (conj new-s (first s)) (rest  s))))", "user": "5c083a1ae4b0bdcf453d16dd"}, {"problem": 23, "code": "reduce conj '()", "user": "594d4c57e4b07ddc2dafae87"}, {"problem": 23, "code": "(partial reduce conj ())", "user": "5c092334e4b0bdcf453d16ea"}, {"problem": 23, "code": "(fn [x]\n   ((fn reverse2 [start rev]\n    (cond \n      (empty? start) rev\n      :else (reverse2 (rest start) (concat [(first start)] rev)))) x []))", "user": "5c02c9a8e4b0bdcf453d1667"}, {"problem": 23, "code": "(fn [x]\n  (reduce conj () x))", "user": "5c0a400ee4b0bdcf453d1700"}, {"problem": 23, "code": ";#(loop [f % r []]\n;   (if (empty? f) r (recur (take (dec (count f)) f) (conj r (last f)))))\n reduce conj ()", "user": "5c0a87e6e4b0bdcf453d1707"}, {"problem": 23, "code": "reduce conj ()", "user": "5c0d0537e4b0bdcf453d173d"}, {"problem": 23, "code": "#(into () %)", "user": "5bfe8821e4b0bdcf453d160f"}, {"problem": 23, "code": "(fn [x] (reduce conj '() x))", "user": "5c0e22cae4b01240ff56713b"}, {"problem": 23, "code": "(fn [s]\n  ((if (vector? s) #(into [] %) identity) (reduce #(cons %2 %1) '() s)))", "user": "5c0e58bfe4b01240ff567140"}, {"problem": 23, "code": "#(reduce (fn [x y] (into x (vector y))) () %)", "user": "5c10e7a2e4b01240ff56716b"}, {"problem": 23, "code": "#(vec (into () %))", "user": "5bfe741be4b0bdcf453d160c"}, {"problem": 23, "code": "(fn f [s]\n  (if (empty? (rest s))\n    s\n    (conj (f (drop-last s)) (last s))\n  )\n)", "user": "5bf8b5a5e4b0bdcf453d15bb"}, {"problem": 23, "code": ";;(fn [items]\n;;  (let [f (fn [r l]\n;;           (if (empty? l)\n;;              r\n;;              (recur (conj r (first l)) (rest l))))]\n;;   (f '() items)))\n\napply conj '()", "user": "57131a8ee4b07c98581c3a97"}, {"problem": 23, "code": "#(into '() %)", "user": "5c1229d5e4b01240ff567188"}, {"problem": 23, "code": "(fn my-reverse [xs]\n  (if (= 1 (count xs))\n    (list (first xs))\n    (cons  (last xs) (my-reverse (take (- (count xs) 1) xs)))))", "user": "5c11812ee4b01240ff56717b"}, {"problem": 23, "code": "#(reduce conj (list) (map (fn [x] x) %))", "user": "5c12dacae4b01240ff567198"}, {"problem": 23, "code": "#(for [n (range (count %))] (nth (apply vector %) (- (count %) (inc n))))", "user": "5c13ce5ee4b01240ff5671a4"}, {"problem": 23, "code": "(fn [coll] \n  (loop [acc (), from coll] \n    (let [start (first from)\n          other (rest from)]\n    (if (empty? from) \n        acc \n        (recur \n         (conj acc start) \n         other)))))", "user": "5c13da47e4b01240ff5671a6"}, {"problem": 23, "code": "(fn reverser [x]\n\t(reduce (fn [x, y] (conj x y)) '() x)\n)", "user": "5c14ce29e4b01240ff5671b6"}, {"problem": 23, "code": "(fn [coll]\n  (sort #(compare %2 %1) coll))", "user": "5c113df2e4b01240ff56716f"}, {"problem": 23, "code": "(fn [coll]\n  (loop [coll coll res ()]\n    (if (empty? coll)\n      res\n      (recur (rest coll) (conj res (first coll))))))", "user": "5c15537ae4b01240ff5671bf"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5c165d3ee4b01240ff5671d1"}, {"problem": 23, "code": "reduce conj ()", "user": "5c1834ffe4b01240ff5671ea"}, {"problem": 23, "code": "(fn[coll]\n  (reduce conj () coll))", "user": "5c115097e4b01240ff567172"}, {"problem": 23, "code": "into '()", "user": "4f6a946ae4b07046d9f4ef9f"}, {"problem": 23, "code": "(fn reverseit [coll]\n  (reduce #(cons %2 %1) [] coll))", "user": "5c196e7be4b01240ff5671fb"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5c1840eae4b01240ff5671eb"}, {"problem": 23, "code": "(fn myfn \n  [l]\n  (if (empty? l) [] (concat [(last l)] (myfn (butlast l))))\n)", "user": "5c1a0813e4b01240ff567203"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5c194d90e4b01240ff5671f6"}, {"problem": 23, "code": "reduce conj '()", "user": "5c1aadcde4b01240ff567209"}, {"problem": 23, "code": "#(loop [res ()\n          in %1]\n    (if (empty? in)\n      (vec res)\n      (recur (conj res (first in)) (rest in))\n\n    )\n  )", "user": "5bfcdc52e4b0bdcf453d15f4"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5c1b82bce4b01240ff567211"}, {"problem": 23, "code": "(fn [coll] (reduce conj (list) coll))", "user": "5c1bee41e4b01240ff567218"}, {"problem": 23, "code": "into '()", "user": "5c1176a4e4b01240ff567179"}, {"problem": 23, "code": "(fn [coll] (reduce conj () coll))", "user": "5c18418ce4b01240ff5671ec"}, {"problem": 23, "code": "#(reduce \n  \t(fn [acc ele]\n      (conj acc ele))\n  \t'()\n  \t%)", "user": "5c1ca3dbe4b0efcb0b05b23b"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5c18f3f6e4b01240ff5671f2"}, {"problem": 23, "code": "#(reduce conj () %1)", "user": "5c13dc37e4b01240ff5671a7"}, {"problem": 23, "code": "(fn reverse-coll [coll] (when coll (cons (last coll) (reverse-coll (butlast coll)))))", "user": "5c0ebca5e4b01240ff567147"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5c1d6dbee4b0efcb0b05b249"}, {"problem": 23, "code": "reduce conj ()", "user": "5c17467fe4b01240ff5671df"}, {"problem": 23, "code": "(fn my-reverse [s]\n(loop [r s n '()]\n(if (empty? r) \nn\n(recur (rest r) (conj n (first r))))\n)\n)", "user": "5c196184e4b01240ff5671f8"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5c1edf23e4b0efcb0b05b25d"}, {"problem": 23, "code": "#(reduce (fn [reversed next-item] (conj reversed next-item)) '() %)", "user": "5c1fe56ae4b07e362c23056e"}, {"problem": 23, "code": "#((if (set? %) identity (partial into (empty %))) (reduce conj '() %))", "user": "56215da7e4b03f08ee9a921b"}, {"problem": 23, "code": "(fn [x] (reduce (fn [a b] (cons b a)) [] x))", "user": "5c1d9f05e4b0efcb0b05b24c"}, {"problem": 23, "code": "#(into '() %)", "user": "5c219c0fe4b07e362c230581"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5c2195dce4b07e362c230580"}, {"problem": 23, "code": "reduce #(conj %1 %2) ()", "user": "5c20b6abe4b07e362c230576"}, {"problem": 23, "code": "#(loop [my-seq % res-seq '()] (if (empty? my-seq) res-seq (recur (rest my-seq) (conj res-seq (first my-seq)))))", "user": "5c228b51e4b07e362c23058c"}, {"problem": 23, "code": "(fn [l] \n  (loop [ll l res nil]\n          (if (empty? ll)\n            res\n            (recur (rest ll) (conj res (first ll)))\n            )))", "user": "5c0e3f86e4b01240ff56713d"}, {"problem": 23, "code": "(fn [col]\n  (let [t (if (vector? col) vec seq)]\n    (t (reduce (fn [x y] (conj x y)) nil col))))", "user": "5c222b7de4b07e362c230588"}, {"problem": 23, "code": "(fn [xs]\n  (let [s (seq xs)]\n    (loop [head (first s)\n           tail (next s)\n           rez nil]\n      (if (nil? tail)\n        (vec (cons head rez))\n        (recur (first tail) (next tail) (cons head rez))))))", "user": "5776903ee4b0979f8965163b"}, {"problem": 23, "code": "#(seq (reduce conj '() %))", "user": "5c22c861e4b07e362c230590"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5c0fedade4b01240ff567157"}, {"problem": 23, "code": "#((fn [oldLst newLst]\n    (cond\n     (= oldLst []) newLst\n     :else (recur (rest oldLst) (cons (first oldLst) newLst)))) % [])", "user": "55965515e4b0c79f6e1db978"}, {"problem": 23, "code": "(fn reverse-sequence [seq]\n  (loop [rev-seq '()\n         rest-list (into '() seq)]\n    (if (= (count rev-seq) (count seq))\n      rev-seq\n      (recur (conj rev-seq (last rest-list)) (butlast rest-list)))))", "user": "5c196dc3e4b01240ff5671fa"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5c2649c8e4b07e362c2305bf"}, {"problem": 23, "code": "reduce #(conj %1 %2) '()", "user": "5c24671be4b07e362c2305a1"}, {"problem": 23, "code": "(fn [coll] (loop [xs (apply list coll)\n                      result '()]\n                 (if xs\n                   (let [x (first xs)]\n                     (recur (next xs) (conj result x)))\n                   result)))", "user": "5c2692d2e4b07e362c2305c2"}, {"problem": 23, "code": "(partial reduce conj `())", "user": "5c272f82e4b07e362c2305cb"}, {"problem": 23, "code": "#(reduce (fn [x y] (conj x y)) '() %1)", "user": "5c275d18e4b07e362c2305cd"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "5c21a531e4b07e362c230582"}, {"problem": 23, "code": "(fn\n  [s]\n  (reduce (fn [acc elt] (conj acc elt)) '() s))", "user": "5c284f14e4b07e362c2305d6"}, {"problem": 23, "code": "#(sort (comp - compare) %)", "user": "50eeeadae4b02c17778c91f3"}, {"problem": 23, "code": "(fn [col]\n   (loop [c col\n          r []]\n   (if (empty? c)\n     r\n     (recur \n      (rest c)\n      (cons (first c)\n           r)))\n   ))", "user": "5c272a4de4b07e362c2305ca"}, {"problem": 23, "code": "reduce conj '()", "user": "5c2836ebe4b07e362c2305d4"}, {"problem": 23, "code": "into '()", "user": "5c295f34e4b07e362c2305db"}, {"problem": 23, "code": "(fn [coll]\n  (loop [[r & more :as all] (seq coll)\n         acc '()]\n    (if all\n      (recur more (cons r acc))\n      acc)))", "user": "5ba75fdfe4b0a20761a23419"}, {"problem": 23, "code": "#(loop [new-seq '() entry %] (if (empty? entry) new-seq (recur (cons (first entry) new-seq) (rest entry))))", "user": "5c1e96dde4b0efcb0b05b256"}, {"problem": 23, "code": "(fn Example [x]\n    (loop [i (- (count x) 1)\n           y x\n           result [] ]\n      (if (= i -1)\n        result\n        (recur (- i 1) (drop-last y) (conj result (last y))))\n      )\n  )", "user": "5c24c654e4b07e362c2305a7"}, {"problem": 23, "code": "(partial reduce conj '())", "user": "5c2d1f63e4b0d62ef62d9ef0"}, {"problem": 23, "code": "#(loop [s % o (list)]\n   (if (= 0 (count s)) o (recur (rest s) (conj o (first s)))))", "user": "5c2d1f21e4b0d62ef62d9eef"}, {"problem": 23, "code": "reduce (fn [newThing oldThing] (conj newThing oldThing)) '()", "user": "5c201002e4b07e362c230571"}, {"problem": 23, "code": "(fn my-rev [col] (into () col))", "user": "5c2e2b4fe4b0d62ef62d9f01"}, {"problem": 23, "code": "into ()", "user": "5bfd9bd6e4b0bdcf453d1601"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5c2f2815e4b0d62ef62d9f0b"}, {"problem": 23, "code": "(fn [coll]\n  (let [r (into '() coll)]\n    (if (sorted? coll)\n      r\n      (into (empty coll) r))))", "user": "5c2f0cdfe4b0d62ef62d9f09"}, {"problem": 23, "code": "(fn [s]\n  (reduce #(conj %1 %2)\n          `()\n          s))", "user": "57d57f65e4b0bd073c2023b3"}, {"problem": 23, "code": "#(into (list) %)", "user": "5944abd0e4b0b03edd0057af"}, {"problem": 23, "code": "apply conj '()", "user": "5c250900e4b07e362c2305ab"}, {"problem": 23, "code": "(fn [coll] (reduce conj '() coll))", "user": "5c31517de4b0d62ef62d9f28"}, {"problem": 23, "code": "into ()", "user": "5c26460be4b07e362c2305bc"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5c316de5e4b0d62ef62d9f2b"}, {"problem": 23, "code": "reduce #(cons %2 %1) []", "user": "5c30d90de4b0d62ef62d9f22"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "5c32ea85e4b0d62ef62d9f3e"}, {"problem": 23, "code": "(fn foo [x] (when (not= x nil) (cons (last x) (foo (butlast x)))))", "user": "5c32603ee4b0d62ef62d9f38"}, {"problem": 23, "code": "reduce conj ()", "user": "5c337305e4b0d62ef62d9f48"}, {"problem": 23, "code": "(fn\n [s]\n (loop [rev []\n        remaining s]\n  (if (empty? remaining) rev\n    (recur \n     (conj rev\n      (last remaining))\n        (drop-last remaining)))))", "user": "5b14475be4b0cc2b61a3be5a"}, {"problem": 23, "code": "#(into () %)", "user": "5c35046fe4b0d62ef62d9f5f"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5c25f90ce4b07e362c2305b6"}, {"problem": 23, "code": "reduce conj '()", "user": "5bf28e9ee4b0a6d31fed2177"}, {"problem": 23, "code": "reduce conj ()", "user": "5c33bdf3e4b0d62ef62d9f49"}, {"problem": 23, "code": "(fn my-reverse \n  [col]\n  (loop [c col result '()]\n    (if (empty? c) result\n                   (recur (rest c) (cons (first c) result)))))", "user": "5c36d110e4b0d62ef62d9f6a"}, {"problem": 23, "code": "#(reduce conj() %)", "user": "5c34cb2ee4b0d62ef62d9f59"}, {"problem": 23, "code": "into '()", "user": "5c37110ae4b0d62ef62d9f71"}, {"problem": 23, "code": "#(reduce (fn [acc,item] (conj acc item)),'(),%)", "user": "5a64dcabe4b0512ff01cd9a9"}, {"problem": 23, "code": "#(into () %)", "user": "5c35acffe4b0d62ef62d9f62"}, {"problem": 23, "code": "(fn [coll]\n  (loop [coll coll myvec '()]\n    (if (empty? coll)\n        myvec\n        (recur (rest coll) (conj myvec (first coll))))))", "user": "5c06f6e3e4b0bdcf453d16bb"}, {"problem": 23, "code": "reduce conj '()", "user": "5c376638e4b0d62ef62d9f74"}, {"problem": 23, "code": "(fn rev [cc]\n  (if (empty? cc)\n    '()\n    (reduce conj '() cc)\n    )\n  )", "user": "5bba6571e4b0a20761a235e9"}, {"problem": 23, "code": "(fn [xs]\n    (let [resp (reduce (fn [acc i] (concat [i] acc)) [] xs)]\n      (if (vector? xs)\n        (vec resp)\n        resp)))", "user": "5c3a896be4b0d62ef62d9f94"}, {"problem": 23, "code": "(fn [tl] \n  (let [l (seq tl)]\n    (loop [r [] i (count l)]\n      (if (= 0 i)\n        r\n        (recur (conj r (nth l (dec i))) (dec i))\n      ))))", "user": "5c308385e4b0d62ef62d9f1c"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "5c3ac091e4b0d62ef62d9f95"}, {"problem": 23, "code": "(fn [arr] \n  (loop [a   arr, \n         rev (empty arr)]\n    (if (empty? a)\n      rev\n      (recur (drop-last a) \n             (concat rev (take-last 1 a))))))", "user": "5c395c65e4b0d62ef62d9f8a"}, {"problem": 23, "code": "(fn [my-seq]\n  (loop [my-seq my-seq\n         acc []\n         ]\n    (println acc)\n    (if (not-empty my-seq)\n      (recur (drop-last my-seq) (conj acc (last my-seq)))\n      acc\n      ))\n  )", "user": "5c321b8ae4b0d62ef62d9f32"}, {"problem": 23, "code": "(fn [lista]\n  (loop [ostatak lista\n         nova []]\n    (if (empty? ostatak) nova (recur (butlast ostatak) (conj nova (last ostatak))))))", "user": "5be0b916e4b0ed4b8aab4c8f"}, {"problem": 23, "code": "#(loop [xs %\n       result []]\n  (if (empty? xs)\n    result\n    (let [x (last xs)]\n      (recur (drop-last xs) (conj result x)))\n    ))", "user": "54dc2c3ae4b024c67c0cf77d"}, {"problem": 23, "code": "into ()", "user": "5c379636e4b0d62ef62d9f76"}, {"problem": 23, "code": "reduce #(conj %1 %2) '()", "user": "5c2dfca3e4b0d62ef62d9efc"}, {"problem": 23, "code": "into ()", "user": "5c0614f6e4b0bdcf453d16a9"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5c374db6e4b0d62ef62d9f73"}, {"problem": 23, "code": "(fn revv [x]\n  (if (vector? x)\n    (loop [x x res []]\n              (println x)\n      (if (= x '())\n        (vec res)\n        (recur (rest x) (cons (first x) res))))\n    (loop [x x res ()]\n      (if (= x '())\n        res\n        (recur (rest x) (cons (first x) res))))))", "user": "5c3f29d4e4b08cd430848e8f"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5c3f37fce4b08cd430848e91"}, {"problem": 23, "code": "(fn [xs] (reduce conj '() xs))", "user": "5c3de434e4b0d62ef62d9fb8"}, {"problem": 23, "code": "reduce conj ()", "user": "5c408a61e4b08cd430848eb2"}, {"problem": 23, "code": "(fn [x] (reduce (fn [a b] (conj a b)) '() x))", "user": "5c3f6322e4b08cd430848e97"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5bf31833e4b0a6d31fed218a"}, {"problem": 23, "code": "apply conj ()", "user": "568cb90fe4b0dcc4269f40b9"}, {"problem": 23, "code": "(fn my-rev\n  [coll]\n  (loop [n '()\n         r coll]\n    (if (seq r)\n      (recur (conj n (first r)) (rest r))\n      n)))", "user": "5c411df3e4b08cd430848ebf"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5c34cf2de4b0d62ef62d9f5a"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5c41adfce4b08cd430848ec8"}, {"problem": 23, "code": "(fn my-reverse [x] (if (empty? x) \n                     [] \n                     (conj (my-reverse (rest x)) (first x))\n                     )\n  )", "user": "5c4217e2e4b08cd430848ed2"}, {"problem": 23, "code": "#(into '() %)", "user": "5c3796b3e4b0d62ef62d9f77"}, {"problem": 23, "code": "(fn [a-seq]\n  (let [invert (fn [res elem]\n                 (cons elem res))]\n    (reduce invert [] a-seq)))", "user": "5c422f66e4b08cd430848ed3"}, {"problem": 23, "code": "into ()", "user": "5549ca1ce4b0a04f7929956c"}, {"problem": 23, "code": "(fn [in] (reduce conj () in))", "user": "5c3d8576e4b0d62ef62d9fb4"}, {"problem": 23, "code": "(partial into ())", "user": "5c4058a2e4b08cd430848eae"}, {"problem": 23, "code": "(fn[x] (reduce (fn[a c] (cons c a)) '() x ))", "user": "5c46e6dde4b0e06e1360a3a7"}, {"problem": 23, "code": "(fn [x]   \n  ((fn aaa [y z]     \n    (if       \n      (empty? y)       \n      z \n      (aaa (rest y)(conj z (first y))))\n      ) x (list))\n  )", "user": "5c473942e4b0e06e1360a3aa"}, {"problem": 23, "code": "reduce conj '()", "user": "5c45e703e4b0e06e1360a391"}, {"problem": 23, "code": "(fn rv [seqn]\n  (loop [s seqn result []]\n    (println s)\n    (if (empty? s)\n     result\n     (recur (rest s) (cons (first s) result)))))", "user": "5c4750bfe4b0e06e1360a3ad"}, {"problem": 23, "code": "#(into `() %)", "user": "5c495bade4b0e06e1360a3cf"}, {"problem": 23, "code": "(fn rv [x]\n  (if (= x [])\n    []\n    (conj (rv (rest x)) (first x))\n   )\n )", "user": "5c4a08c5e4b0f9f7a8770e4f"}, {"problem": 23, "code": "(fn [coll]\n  (reduce conj () coll))", "user": "5c493046e4b0e06e1360a3cb"}, {"problem": 23, "code": "reduce conj ()", "user": "5c387c51e4b0d62ef62d9f83"}, {"problem": 23, "code": "apply conj '()", "user": "5b9ae606e4b0c0b3ffbd4af2"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5c47149ae4b0e06e1360a3a8"}, {"problem": 23, "code": "#(into () %)", "user": "5c4ad616e4b0f9f7a8770e5a"}, {"problem": 23, "code": "#(reduce (fn [a b] (cons b a)) [] %)", "user": "5c3ee9bde4b08cd430848e8b"}, {"problem": 23, "code": "(fn myrev [l] (\n   if (empty? l) \n     [] \n     (concat (myrev (rest l)) [(first l)])\n   )\n)", "user": "5c487515e4b0e06e1360a3c2"}, {"problem": 23, "code": "#(loop[l %, r '()]\n   (if (nil? l)\n     r\n     (recur (next l) (conj r (first l)  ))))", "user": "5c4ab449e4b0f9f7a8770e57"}, {"problem": 23, "code": "#(loop [in % out []] (if (nil? (last in)) out (recur (vec (take (dec (count in)) in)) (conj out (last in)))))", "user": "502ea967e4b06efe12e8cc76"}, {"problem": 23, "code": "(fn rev [s]\n  (if(empty? s)(vector)(conj (rev (rest s))(first s))))", "user": "5c486dece4b0e06e1360a3c0"}, {"problem": 23, "code": "(fn [x]  (into '() x))", "user": "5c46bdbde4b0e06e1360a3a4"}, {"problem": 23, "code": "#(into () %)", "user": "5c4c74efe4b0f9f7a8770e76"}, {"problem": 23, "code": "#(reduce (fn [acc x] (cons x acc)) (empty %) %)", "user": "57c1ace1e4b05aa3c4741ca3"}, {"problem": 23, "code": "(fn [s]\n  ((fn [s rs]\n    (if (empty? s)\n      rs\n      (recur \n        (drop-last s)\n        (conj rs (last s)))))\n  s []))", "user": "5c4fd807e4b0f9f7a8770eb5"}, {"problem": 23, "code": "#(reduce conj '() %1)", "user": "5c48757fe4b0e06e1360a3c3"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5c50154be4b0f9f7a8770ebc"}, {"problem": 23, "code": "#(reduce (fn [coll item] (cons item coll)) [] %1)", "user": "5c3cd80fe4b0d62ef62d9faa"}, {"problem": 23, "code": "(fn [coll]\n  (reduce conj '() coll))", "user": "5c506951e4b0f9f7a8770ec5"}, {"problem": 23, "code": "#(loop [result '(), d %] \n   (if (empty? d) \n     result \n     (recur (conj result (first d)) (drop 1 d))))", "user": "5c50de36e4b0fb8c5ffd99bc"}, {"problem": 23, "code": "reduce #(cons %2 %1) []", "user": "5c512811e4b0fb8c5ffd99c2"}, {"problem": 23, "code": "#((fn rec [x y]\n    (if (empty? x)\n     \ty\n      \t(rec (rest x) (conj y (first x)))\n    ) \n) % '())", "user": "5c51b394e4b0fb8c5ffd99cc"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "5c4e2b82e4b0f9f7a8770e93"}, {"problem": 23, "code": "(fn [s]\n  (let [impl (fn [f t]\n               (if (empty? f)\n                 t\n                 (recur (rest f) (concat (list (first f)) t))))]\n    (impl s '())))", "user": "5c50048ae4b0f9f7a8770eb9"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5c51c930e4b0fb8c5ffd99ce"}, {"problem": 23, "code": "reduce conj '()", "user": "5c481764e4b0e06e1360a3ba"}, {"problem": 23, "code": "reduce #(conj %1 %2) '()", "user": "5c38422ae4b0d62ef62d9f7f"}, {"problem": 23, "code": "(partial reduce #(conj %1 %2) '())", "user": "5c527129e4b0fb8c5ffd99de"}, {"problem": 23, "code": "(fn rverse3 [sq1] ((fn rverse4 [input output] (if (= (seq input) nil) output (rverse4 (rest input) (cons (first input) output)))) sq1 nil))", "user": "5c51f60be4b0fb8c5ffd99d4"}, {"problem": 23, "code": ";;minimalist\n#(reduce conj '() %)\n\n;;reducer-based\n#_(fn bar [orig]\n  (reduce conj '() orig))\n  \n\n;; long-way. \n#_(fn foo \n  ([rev [orig-head & orig-rest]] \n  (if (empty? orig-rest)\n    (conj rev orig-head)\n    (foo (conj rev orig-head) orig-rest)))\n  ([original]\n   (foo '() (seq original)))) ;;wrap in a call to seq b/c a sorted set doesn't seem to support destructuring: \"nth not supported on this type:\"", "user": "5c534431e4b0fb8c5ffd99f2"}, {"problem": 23, "code": "#(reduce (fn [x y] (cons y x)) () %)", "user": "5c478ba2e4b0e06e1360a3b2"}, {"problem": 23, "code": "(fn [col1] (loop [c1 col1 c2 []]\n                  (if (empty? c1)\n                    c2\n                    (recur (rest c1)\n                           (concat [(first c1)] c2)))))", "user": "5c30da5ae4b0d62ef62d9f23"}, {"problem": 23, "code": "#(reduce (fn [x y] (conj x y)) nil %)", "user": "5c54e605e4b0fb8c5ffd9a14"}, {"problem": 23, "code": "(fn reverse-seq\n  [coll]\n  (reduce conj () coll))", "user": "5c55f6eee4b0fb8c5ffd9a2d"}, {"problem": 23, "code": "#(into () %)", "user": "5c582e7be4b0fb8c5ffd9a55"}, {"problem": 23, "code": "sort #(compare %2 %1)", "user": "5c53127ee4b0fb8c5ffd99ef"}, {"problem": 23, "code": "(fn [x] (reduce (fn [x y] (cons y x)) () x))", "user": "5c52f3fce4b0fb8c5ffd99e9"}, {"problem": 23, "code": "reduce conj '()", "user": "5c57fc9ae4b0fb8c5ffd9a52"}, {"problem": 23, "code": "(fn [x]\n  (reduce conj () x))", "user": "5c0eb93ce4b01240ff567146"}, {"problem": 23, "code": "reduce #(conj %1 %2) '()", "user": "5c597b42e4b01df32ab7325b"}, {"problem": 23, "code": "(fn \n  [ls]\n  (reduce conj '() ls))", "user": "5c58736be4b01df32ab73247"}, {"problem": 23, "code": "#(reduce conj() %)", "user": "5c435a9fe4b0e06e1360a367"}, {"problem": 23, "code": "(fn foo [lst] (if (empty? lst) '() (conj (foo(drop-last lst)) (last lst))))", "user": "5c59b1d3e4b01df32ab73261"}, {"problem": 23, "code": "reduce conj ()", "user": "5c5ad42ae4b01df32ab7327c"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5bdee4bee4b0ed4b8aab4c67"}, {"problem": 23, "code": "reduce (fn [rev x] (conj rev x)) '()", "user": "5c5bee9be4b01df32ab73294"}, {"problem": 23, "code": "reduce conj ()", "user": "5c51d700e4b0fb8c5ffd99d1"}, {"problem": 23, "code": "(fn [x] (loop [x x\n               flip []]\n          (if (empty? x) flip\n            (recur (rest x)\n                   (cons (first x) flip)\n                   )\n            )\n          )\n  )", "user": "5c5732c8e4b0fb8c5ffd9a3f"}, {"problem": 23, "code": "(fn my-rev [c]\n  (if (empty? c) \n    nil \n    (cons (last c) (my-rev (butlast c)))))", "user": "514992d2e4b0b64cbeae1848"}, {"problem": 23, "code": "(fn lol\n  ([my-seq]\n  (lol my-seq []))\n  ([my-seq temp-seq]\n    (if (= (first my-seq) nil)\n    temp-seq\n    (recur (rest my-seq) (cons (first my-seq) temp-seq) ))))", "user": "5c5e7049e4b0fca0c1622607"}, {"problem": 23, "code": "#(loop [[r & more :as all] (seq %)\n         acc '()]\n    (if all\n      (recur more (cons r acc))\n      acc))", "user": "5adf7a7ae4b0837691e92c37"}, {"problem": 23, "code": "(fn [x]\n  (loop [input x result ()]\n   (if (empty? input)\n     result\n     (recur \n      (rest input) \n      (conj result (first input))))))", "user": "598ff38ce4b0fcebec4de869"}, {"problem": 23, "code": "(fn [coll]\n  (reduce #(conj %1 %2) () coll))", "user": "5c5584cfe4b0fb8c5ffd9a20"}, {"problem": 23, "code": "(fn [coll]\n   (loop [c (apply list coll),\n          res '()]\n     (if (empty? c)\n       res\n       (recur\n        (pop c)\n        (conj res (first c))))))", "user": "5c5d2e90e4b01df32ab732af"}, {"problem": 23, "code": "(fn\n  [coll]\n  (reduce\n    #(conj %1 %2)\n    '()\n    coll))", "user": "5c61576fe4b0fca0c162262a"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5c5a725ce4b01df32ab73273"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "592883f1e4b072a2710fceea"}, {"problem": 23, "code": "(fn[a]\n  (loop [looped_a a, reversed_a (list)]\n    (if (empty? looped_a)\n      reversed_a\n      (recur (rest looped_a) (conj reversed_a (first looped_a)))\n      )\n    )\n  )", "user": "5c6253abe4b0fca0c1622646"}, {"problem": 23, "code": "#(loop [lst % acc nil]\n   (if (empty? lst)\n     acc\n     (recur (rest lst) (cons (first lst) acc))))", "user": "5c62979fe4b0fca0c162264c"}, {"problem": 23, "code": "(fn\n  reverse-seq\n  [seq]\n  (reduce conj '() seq))", "user": "5c6227fee4b0fca0c1622641"}, {"problem": 23, "code": "(fn reverse-sq [sq]\n  (loop [sq sq rev '()]\n    (if (empty? sq)\n      (seq rev)\n      (recur (rest sq) (conj rev (first sq))))))", "user": "5c6314c5e4b0fca0c1622658"}, {"problem": 23, "code": "(fn rev [%] (cond (= % nil) nil :else (cons (last %) (rev (butlast %)))))", "user": "5c5b246ae4b01df32ab73286"}, {"problem": 23, "code": "#(loop [remaining %\n        result []]\n   (if (empty? remaining)\n     result\n     (recur (butlast remaining)\n            (conj result (last remaining)))))", "user": "5c62f1cde4b0fca0c1622655"}, {"problem": 23, "code": "(fn [x] (reduce conj () x))", "user": "5c63fc80e4b0fca0c162266d"}, {"problem": 23, "code": "(fn my-reverse\n  ([seq] (my-reverse seq '()))\n  ([seq collection]\n    (if (empty? seq)\n      collection\n      (my-reverse (rest seq)\n                  (conj collection (first seq))))))", "user": "59cd351ee4b0ef0a1e9b5b35"}, {"problem": 23, "code": "(fn f [x] (if (empty? x) x (concat (f (rest x)) (list (first x)))))", "user": "5ae7ed7ce4b0837691e92cb0"}, {"problem": 23, "code": "(fn [xs]\n  (reduce conj '() xs))", "user": "5c6448d6e4b0fca0c1622674"}, {"problem": 23, "code": "(fn\n  [seq-list]\n  (loop [seq seq-list new []]\n    (if (empty? seq)\n      new\n      (recur (rest seq) (cons (first seq) new)))))", "user": "58c50b3de4b021aa9917ed33"}, {"problem": 23, "code": "#(reduce (fn [a b] (cons b a)) [] %)", "user": "583a3fb7e4b089d5ab817d50"}, {"problem": 23, "code": "#(vec (reduce conj () %))", "user": "5b269cf3e4b063e2438bcc35"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5c66d5d3e4b0fca0c16226af"}, {"problem": 23, "code": "reduce #(conj %1 %2) ()", "user": "5c41db45e4b08cd430848ece"}, {"problem": 23, "code": "(fn [coll]\n  ((fn [coll result]\n     (if-not (seq coll) result\n       (recur (rest coll) (cons (first coll) result))))\n   coll '()))", "user": "5c678b6ee4b0fca0c16226bc"}, {"problem": 23, "code": "(fn [xs]\n  (reduce conj '() xs))", "user": "58b12635e4b0ebc645576cf4"}, {"problem": 23, "code": "(fn rev [data]\n  (reduce #(concat [%2] %1) [] data))", "user": "5c68f931e4b0fca0c16226ea"}, {"problem": 23, "code": "#(into '() %)", "user": "5c596d6ce4b01df32ab73257"}, {"problem": 23, "code": "(fn myreverse [l]\n  ((fn tmp [l ll]\n    (if (empty? l)\n      ll\n      (tmp (rest l) (cons (first l) ll ))\n    )\n  ) l '())\n)", "user": "5c6748f0e4b0fca0c16226b6"}, {"problem": 23, "code": "(fn [s](reduce #(cons %2 %1) [] s))", "user": "5c09e555e4b0bdcf453d16fd"}, {"problem": 23, "code": "#(for [i (range (count %))] (nth (apply list %) (- (count %) i  1)))", "user": "5c6bae86e4b0fca0c162271f"}, {"problem": 23, "code": "(fn\n  [x]\n  (loop [a (vec x)\n         b []]\n    (if (empty? a)\n      b\n      (recur (rest a) (cons (first a) b))\n      )\n    )\n  )", "user": "5c6cb3bfe4b0fca0c1622730"}, {"problem": 23, "code": "reduce conj ()", "user": "5c6d0e51e4b0fca0c1622735"}, {"problem": 23, "code": "#(loop [temp % ret ()]\n   (if (empty? temp)\n     ret\n     (recur (rest temp)(conj ret (first temp)))))", "user": "5c6da283e4b0fca0c162273e"}, {"problem": 23, "code": "#(into () %)", "user": "5c37d6fce4b0d62ef62d9f7b"}, {"problem": 23, "code": "#(into '() %)", "user": "5c6e6df2e4b0fca0c162274d"}, {"problem": 23, "code": "(fn [xs]\n  (loop [in xs\n         out []]\n    (if (nil? in)\n      out\n      (recur (next in) (cons (first in) out)))))", "user": "5c6e04b5e4b0fca0c1622743"}, {"problem": 23, "code": "reduce conj ()", "user": "5c5d8c04e4b01df32ab732b4"}, {"problem": 23, "code": "(fn [l] (loop [l l r []]  (if (empty? l) r (recur (rest l) (cons (first l) r)))))", "user": "5b507222e4b02d533a91bce7"}, {"problem": 23, "code": "(fn [x]\n  (reduce conj () x)\n  )", "user": "5c6f0755e4b0fca0c162275d"}, {"problem": 23, "code": ";#(loop[x [] z (count (into [] %))]\n;    (if(> z 0)\n; \t  (recur (conj x (nth (into [] %) (dec z)))(dec z))\n;      x\n;    )\n;   )\n\n#(loop [x [] z (into [] %)]\n    (if(empty? z)\n      x\n \t  (recur (conj x (last z) ) (butlast z))\n      ))", "user": "5c683fb5e4b0fca0c16226d5"}, {"problem": 23, "code": "#(loop [v (first %),\n\t\tr (rest %)\n\t\ty '()]\n   (if (= r '())\n     (conj y v)\n     (recur (first r) (rest r) (conj y v))))", "user": "5c6e1006e4b0fca0c1622744"}, {"problem": 23, "code": "(fn rev ([l] (rev l '())) ([l acc] (if (= l '()) acc (rev (rest l) (cons (first l) acc)))))", "user": "5c704f94e4b0fca0c162277d"}, {"problem": 23, "code": "(fn [lst]\n  (loop [i lst cnt []]\n   (cond (empty? i) cnt\n     :t (recur (butlast i)(conj cnt (last i))))))", "user": "5c712fcce4b0fca0c162278e"}, {"problem": 23, "code": "into '()", "user": "55326aede4b09218d5f44f7c"}, {"problem": 23, "code": "(fn [coll]\n  (loop [[r & more :as all] (seq coll)\n         acc '()]\n    (if all\n      (recur more (cons r acc))\n      acc)))", "user": "5c718e6ce4b0fca0c1622796"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5bcee7d9e4b0e9689409ee22"}, {"problem": 23, "code": "#(into () %)", "user": "5c619df4e4b0fca0c1622637"}, {"problem": 23, "code": "reduce conj ()", "user": "5c67d3b4e4b0fca0c16226c9"}, {"problem": 23, "code": "(fn [c]\n  (reduce\n   \t(fn [acc e]\n      (cons e acc))\n   \t[]\n   \tc))", "user": "5c73b8bae4b0fca0c16227ba"}, {"problem": 23, "code": "reduce conj ()", "user": "5c73bcf9e4b0fca0c16227bb"}, {"problem": 23, "code": "reduce (fn [list item] (into (vector item) list)) []", "user": "5c6e8b57e4b0fca0c1622755"}, {"problem": 23, "code": "(fn\n  [lst]\n  (loop [res '[]\n         lst lst]\n    (if (empty? lst)\n      (seq res)\n      (recur (conj res (last lst)) (butlast lst)))))", "user": "5c706232e4b0fca0c162277e"}, {"problem": 23, "code": "(fn my-reverse[s]\n      (loop [r s\n           n '()]\n       (if (empty? r)\n            n\n          (recur (rest r) (conj n (first r))\n  ))))", "user": "5c73a944e4b0fca0c16227b8"}, {"problem": 23, "code": "(fn my-reverse [a-list]\n  (cond (= a-list nil) nil \n        :else (cons (last a-list) \n                    (my-reverse (butlast a-list)))))", "user": "5c72c2b9e4b0fca0c16227ab"}, {"problem": 23, "code": "#(reduce (fn [a b] (cons b a)) (empty %) %)", "user": "5c755e56e4b0fca0c16227d9"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5c706454e4b0fca0c1622780"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5c6e7cc1e4b0fca0c1622752"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "5c52fa3ce4b0fb8c5ffd99eb"}, {"problem": 23, "code": "#(reduce (fn [acc tail] (conj acc tail)) '() %)", "user": "5c784248e4b0fca0c162281f"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5c792c34e4b0fca0c1622834"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5c6edb17e4b0fca0c1622759"}, {"problem": 23, "code": "reduce conj ()", "user": "5b9783dae4b0c0b3ffbd4a93"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5c787131e4b0fca0c1622825"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5c723f4be4b0fca0c16227a0"}, {"problem": 23, "code": "(fn rev [s] (cond\n             (= (count s) 1) s\n             :else (into [(last s)] (rev (drop-last 1 s)))))", "user": "5c7c1d8ee4b0d597f478ca88"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "589f5f9be4b02bd94d917e81"}, {"problem": 23, "code": "#(reduce (fn [rev curr] (cons curr rev)) nil %)", "user": "5c76577ae4b0fca0c16227ea"}, {"problem": 23, "code": "(fn rev-seq [sequ]\n  (loop [s sequ rev '()]\n    (if (empty? s)\n      rev\n      (recur (rest s) (conj rev (first s))))))", "user": "5c7d5a0ce4b0d597f478caab"}, {"problem": 23, "code": "(fn [lst] (reduce conj () lst))", "user": "5c7741dce4b0fca0c1622806"}, {"problem": 23, "code": "(fn [coll]\n  (map #(nth % 1)\n       (sort-by first\n                (map-indexed #(vector (- (count coll) %1) %2) coll))))", "user": "59342e52e4b072a2710fd06b"}, {"problem": 23, "code": "(fn [seq]\n  (reduce conj '() seq))", "user": "5c7d590ae4b0d597f478caaa"}, {"problem": 23, "code": "(fn my-reverse\n  ([coll] (my-reverse coll []))\n  ([coll acc]\n   (if (empty? coll)\n     acc\n     (recur (rest coll) (cons (first coll) acc)))))", "user": "5c7d2cc9e4b0d597f478caa2"}, {"problem": 23, "code": "#(reduce (fn [x y] (cons y x)) [] %)", "user": "5c7e82cbe4b0d597f478cacb"}, {"problem": 23, "code": "(fn [l] ((fn rs [fl rl] (if (= [] fl) rl (rs (rest fl) (cons (first fl) rl)))) l []))", "user": "5c7ef3f3e4b0d597f478cad7"}, {"problem": 23, "code": "(fn [sq] (reduce conj () sq))", "user": "5839efeae4b089d5ab817d47"}, {"problem": 23, "code": "#(into () %)", "user": "5c664b87e4b0fca0c16226a5"}, {"problem": 23, "code": "(fn rev \n  [lst] \n  (loop [x '() ls lst n 0]\n    (if (= n (count lst))\n      x  \n      (recur (cons (first ls) x) (rest ls) (inc n)))))", "user": "5c7d5463e4b0d597f478caa9"}, {"problem": 23, "code": "(fn [x] (loop [l x acc ()] (if (empty? l) acc (recur (drop-last l) (concat acc [(last l)])))))", "user": "5c7f7889e4b0d597f478cae0"}, {"problem": 23, "code": "into ()", "user": "5c51ac2fe4b0fb8c5ffd99cb"}, {"problem": 23, "code": "(fn [s] (reduce #(into [%2] %1) [] s))", "user": "5c7bc0a5e4b0fca0c1622865"}, {"problem": 23, "code": "(fn rev [x] (when x (cons (last x) (rev (butlast x)))))", "user": "5c665311e4b0fca0c16226a7"}, {"problem": 23, "code": "(fn [s] \n  (reduce #(cons %2 %1) '() s))", "user": "5c7eaadfe4b0d597f478cace"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5c8002cde4b0c8042a70ce09"}, {"problem": 23, "code": "#(reduce conj() %)", "user": "5c7d947be4b0d597f478cab6"}, {"problem": 23, "code": "(fn [lat]\n  (into '() lat))", "user": "593c1e3be4b069cdc2982b86"}, {"problem": 23, "code": "reduce conj ()", "user": "5c8025d6e4b0c8042a70ce11"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5c26c9b3e4b07e362c2305c5"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5c811a04e4b0c8042a70ce20"}, {"problem": 23, "code": "(fn [coll] \n  (reduce #(conj %1 %2)\n            '()\n          coll))", "user": "5c813b27e4b0c8042a70ce22"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5c746c31e4b0fca0c16227c8"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5c7fc525e4b07cc8e14f6830"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5c838796e4b0c8042a70ce50"}, {"problem": 23, "code": "(fn [seq]\n  (reduce \n   (fn [acc, cur] (conj acc cur))\n   (list)\n   seq))", "user": "5c7c78c9e4b0d597f478ca94"}, {"problem": 23, "code": "(fn reverse2\n  [lst]\n  (loop [result ()\n         lst    lst]\n    (if (empty? lst)\n      result\n      (recur (cons (first lst) result)\n             (rest lst)))))", "user": "5c7dad57e4b0d597f478caba"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5c805d45e4b0c8042a70ce13"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5c79030be4b0fca0c1622830"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5c75a830e4b0fca0c16227e0"}, {"problem": 23, "code": "(fn\n  [coll]\n  (loop [s coll acc ()]\n    (if (empty? s)\n      acc\n      (recur (rest s) (conj acc (first s))))))", "user": "5c815c33e4b0c8042a70ce24"}, {"problem": 23, "code": "into ()", "user": "5c81c933e4b0c8042a70ce2d"}, {"problem": 23, "code": "(fn lstRev [x] (reduce conj () x))", "user": "5c82db41e4b0c8042a70ce42"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5c61889be4b0fca0c1622632"}, {"problem": 23, "code": "reduce conj ()", "user": "5c7bb8c0e4b0fca0c1622864"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5c70641de4b0fca0c162277f"}, {"problem": 23, "code": "reduce (fn [acc item] (cons item acc)) []", "user": "5c7e5be4e4b0d597f478cac7"}, {"problem": 23, "code": "reduce conj '()", "user": "5c8319c3e4b0c8042a70ce45"}, {"problem": 23, "code": "#(loop [col % reversed ()]\n   (if (empty? col) \n      reversed\n      (recur (rest col) (conj reversed (first col)))\n))", "user": "5c862d0ae4b0c8042a70ce8c"}, {"problem": 23, "code": "#(into () %)", "user": "5c863a81e4b0c8042a70ce8e"}, {"problem": 23, "code": "(fn myReverse\n  [%]\n  (loop [lst    %\n         result []]\n    (if (empty? lst)\n      result\n      (recur (rest lst)\n             (cons (first lst) result)))))", "user": "5c74b043e4b0fca0c16227ce"}, {"problem": 23, "code": "(fn [x]\n  (loop [x x\n         result ()]\n    (if (empty? x)\n      result\n      (recur (rest x)\n             (cons (first x) result)))))", "user": "5c748bf5e4b0fca0c16227cb"}, {"problem": 23, "code": "(fn [xs]\n  (reduce (fn [l v] (conj l v)) '() xs))", "user": "5c886a89e4b048ec896c592b"}, {"problem": 23, "code": "(fn rev [coll] \n  (if (empty? coll)\n    coll\n    (concat\n      (rev (rest coll))\n      (list (first coll)))))", "user": "5c852e3ae4b0c8042a70ce78"}, {"problem": 23, "code": "(fn my-reverse[s] \n  (loop [r s n '()] \n    (if (empty? r) n (recur (rest r) (conj n (first r))))))", "user": "5c63e034e4b0fca0c1622668"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5c7c8c72e4b0d597f478ca96"}, {"problem": 23, "code": "(fn [sequ]\n  (loop [sequ sequ revsequ []]\n    (if (empty? sequ)\n      revsequ\n      (recur (butlast sequ) (conj revsequ (last sequ))))))", "user": "5c8b6c64e4b048ec896c596f"}, {"problem": 23, "code": "reduce conj ()", "user": "566a0845e4b04acd4f672e05"}, {"problem": 23, "code": "(fn [list] (reduce #(conj %1 %2) '() list))", "user": "5c8adb0ae4b048ec896c595f"}, {"problem": 23, "code": "(fn [coll]\n  (into '() coll))", "user": "5c8d8c4be4b048ec896c59a0"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5c8ecb58e4b048ec896c59b0"}, {"problem": 23, "code": "#(loop [curr \t  []\n        remaining %]\n   (if (empty? remaining)\n     curr\n     (recur (cons (first remaining) curr) (rest remaining))))", "user": "5b5bc8e9e4b0c6492753e6b7"}, {"problem": 23, "code": "#(loop [input %\n        output ()]\n   (if (empty? input) output (recur (rest input) (conj output (first input)))))", "user": "5c8fd8f3e4b048ec896c59c7"}, {"problem": 23, "code": "reduce conj '()", "user": "5b22d30ee4b08b1df1c36750"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5c896f46e4b048ec896c5940"}, {"problem": 23, "code": "(fn \n  [x]\n  (loop [i 0 x x seq '()]\n      (if (not-empty x)\n        (do\n          (println x)\n\n\n          (println seq)\n          (recur (inc i) (rest x) (conj  seq (first x))))\n\n        seq)\n      )(loop [i 0 x x seq '()]\n      (if (not-empty x)\n        (do\n          (println x)\n\n\n          (println seq)\n          (recur (inc i) (rest x) (conj  seq (first x))))\n\n        seq)\n      )\n  )", "user": "5c8bc8b4e4b048ec896c5978"}, {"problem": 23, "code": "(fn [coll]\n  (reduce conj nil coll))", "user": "5c92105ce4b048ec896c59f7"}, {"problem": 23, "code": "(fn [s]\n  (loop [f s q  []]\n    (if (empty? f)\n      q\n      (recur (rest f) (concat (list (first f)) q)))))", "user": "5c8fa41be4b048ec896c59c1"}, {"problem": 23, "code": "(fn reverse-sequence [listname] \n   (loop [xs listname ys (empty listname)]\n     (if (seq xs)\n       (recur (drop-last xs) (concat ys [(last xs)]))\n       ys)))", "user": "5c8aa1b5e4b048ec896c5959"}, {"problem": 23, "code": "(fn foo [args]\n  ((fn rec [args result]\n     (if (= args [])\n       result\n       (rec (rest args) (conj result (first args))))) args '()))", "user": "5c92b9e6e4b048ec896c5a0d"}, {"problem": 23, "code": ";; Equality testing between lists and vectors evaluates to true if the items are of the same value;\n;; as such there is no need to convert the result back into a vector if the input was a vector, so \n;; for example (= '(0 1 2 3 4) [0 1 2 3 4]).\n\n#(into () %)", "user": "5c618140e4b0fca0c162262f"}, {"problem": 23, "code": "(fn rev-seq [seq]\n      (into '() seq))", "user": "5c891afde4b048ec896c5935"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "5c92161de4b048ec896c59f9"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5c91ae79e4b048ec896c59eb"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5c9031bae4b048ec896c59ce"}, {"problem": 23, "code": "(fn\n  [input-list]\n  (loop [new-list '() temp-list input-list]\n    (if (= 0 (count temp-list))\n      new-list\n      (recur\n       (concat new-list [(last temp-list)])\n       (drop-last temp-list)\n       )\n      )\n    )\n  )", "user": "5c9419fae4b048ec896c5a2b"}, {"problem": 23, "code": "(fn [coll] \n  (loop \n    [result []\n     items coll]\n    (if (empty? items)\n      result\n      (recur \n       (conj result (last items))\n       (drop-last items)\n       ))))", "user": "5c839a4de4b0c8042a70ce53"}, {"problem": 23, "code": "(fn [coll]\n  (reduce conj '() coll))", "user": "5c648b60e4b0fca0c162267b"}, {"problem": 23, "code": "#(loop [x % r '()] (if (empty? x) r (recur (rest x) (conj r (first x)))))", "user": "5c950334e4b048ec896c5a44"}, {"problem": 23, "code": "into ()", "user": "5c967845e4b048ec896c5a60"}, {"problem": 23, "code": "(fn [s] (reduce #(cons %2 %1) () s))", "user": "5b8baa2ce4b0c0b3ffbd49bd"}, {"problem": 23, "code": "reduce conj '()", "user": "5c97b621e4b048ec896c5a74"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5c98d3bee4b048ec896c5a8b"}, {"problem": 23, "code": "(fn [coll]\n  (apply conj '() coll))", "user": "5c987160e4b048ec896c5a82"}, {"problem": 23, "code": "(fn [sequence]\n          (loop [sequence sequence\n                 result []]\n            (if (empty? sequence)\n              result\n              (recur (rest sequence)\n                     (cons (first sequence) result)))))", "user": "5c995fa4e4b048ec896c5a96"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5c9adfebe4b048ec896c5ab9"}, {"problem": 23, "code": "#(reduce (fn [r v] (cons v r)) [] %)", "user": "5c7f1f16e4b0d597f478cad9"}, {"problem": 23, "code": "(fn [c]\n  (into () c))", "user": "5c8ffb31e4b048ec896c59c8"}, {"problem": 23, "code": "reduce conj '()", "user": "59286a7de4b072a2710fcee8"}, {"problem": 23, "code": "(fn my-reverse [a] \n(when (not (empty? a))\n    (cons (last a) (my-reverse (butlast a))))\n)", "user": "5c94cbb1e4b048ec896c5a3d"}, {"problem": 23, "code": "(fn my-rev [lst]\n  (loop [res '()\n         ls lst]\n    (if (empty? ls) \n      res\n      (recur (cons (first ls) res) (rest ls)))))", "user": "5c9d0a0be4b048ec896c5afc"}, {"problem": 23, "code": "reduce #(conj %1 %2) '()", "user": "5c9d0f76e4b048ec896c5aff"}, {"problem": 23, "code": "(partial reduce conj '())", "user": "573d27b4e4b05c31a32c080f"}, {"problem": 23, "code": "(fn [li]\n  ((fn [li acc]\n    (if (empty? li)\n      acc\n      (recur (rest li) (cons (first li) acc)))) li nil))", "user": "5c96f3dde4b048ec896c5a67"}, {"problem": 23, "code": "#(reduce (fn [m x] (cons x m)) '() %)", "user": "5c9c79a6e4b048ec896c5ae8"}, {"problem": 23, "code": "(fn [col] \n  (map-indexed \n   (fn [idx, x] \n     (nth (seq col)\n          (- (count col) (inc idx))))\n   col)\n   )", "user": "5c9f8b21e4b048ec896c5b58"}, {"problem": 23, "code": "(fn [seq] \n  (loop [i (count seq)\n         seq seq\n         f-seq (if (seq? seq) [] '())]\n    (if (= i 0)\n      f-seq\n      (recur (- i 1) (rest seq) (conj f-seq (first seq))))))", "user": "5ca04cc3e4b048ec896c5b69"}, {"problem": 23, "code": "(fn f\n  [col]\n  (if (empty? col)\n    []\n    (concat (list (last col))\n         (f (butlast col)))))", "user": "5c7aa5a9e4b0fca0c1622852"}, {"problem": 23, "code": "#(into () %)", "user": "5627a6efe4b00e49c7cb47d7"}, {"problem": 23, "code": "(fn rev [xs]\n  (reduce conj '() xs))", "user": "5ca14eb1e4b048ec896c5b7d"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "5ca03402e4b048ec896c5b68"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5ca1f8a1e4b048ec896c5b8c"}, {"problem": 23, "code": "(fn [s]\n  (loop [new-seq []\n         counter (- (count s) 1)]\n    (if (< counter 0)\n      new-seq\n      (recur (conj new-seq ((fn [xs n] (first (drop n xs))) s counter))\n             (dec counter)))))", "user": "5aafde49e4b073f1774425a1"}, {"problem": 23, "code": "#(loop \n   [arr %1 acc `()]\n   (if \n     (empty? arr)\n     acc\n     (recur (rest arr) (cons (first arr) acc))))", "user": "5c9dcb36e4b048ec896c5b1d"}, {"problem": 23, "code": "#_( (fn [coll] (into () coll)) )\n\n#_(\n   (fn [xs]\n  \t\t(loop [result '(), coll xs]\n\t\t\t(if (seq coll)\n\t    \t\t(recur (cons (first coll) result) (rest coll))\n\t  \t\tresult)))\n   )\n\n#_(\n   #(reduce conj () %)\n)\n\nreduce conj ()", "user": "5b449f3ee4b02d533a91bc47"}, {"problem": 23, "code": "(fn [x] \n   (reduce conj () x))", "user": "5ca19c10e4b048ec896c5b81"}, {"problem": 23, "code": "(fn rev [alist]\n  (cond\n   (empty? alist) '()\n   :else (concat (rev (rest alist)) \n                 (list (first alist)))\n   ))", "user": "5ca3695fe4b048ec896c5ba9"}, {"problem": 23, "code": "(fn reversed-sequence\n  [some-sequence]\n  (loop [inp-seq some-sequence\n         rev-seq '()]\n    (if (empty? inp-seq)\n      rev-seq\n      (recur (rest inp-seq) (cons (first inp-seq) rev-seq)))))", "user": "5c9a638fe4b048ec896c5aae"}, {"problem": 23, "code": "(fn [c] (reduce #(conj %1 %2) nil c))", "user": "5ca3def0e4b048ec896c5bb0"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5ca1c45ae4b048ec896c5b85"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5c936567e4b048ec896c5a1b"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5572e18ee4b09a3098a52549"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5ca622f3e4b048ec896c5be0"}, {"problem": 23, "code": "#(into () %)", "user": "5c371f5be4b0d62ef62d9f72"}, {"problem": 23, "code": "into ()", "user": "5ca7b5bbe4b048ec896c5c04"}, {"problem": 23, "code": "#(into '() %)", "user": "55a24698e4b0acc240e31523"}, {"problem": 23, "code": "(fn [x] \n  (loop [inicial 0 cantidad (count x) input (seq x) output [] ] \n    (if (< inicial cantidad) \n      (recur (inc inicial) cantidad (butlast input) (conj output (last input))) output)))", "user": "5b92f4cbe4b0c0b3ffbd4a42"}, {"problem": 23, "code": "#(apply conj '() %)", "user": "5185ad63e4b0da5a5be3bac2"}, {"problem": 23, "code": "into '()", "user": "5caad8d9e4b048ec896c5c40"}, {"problem": 23, "code": "#(into () %)", "user": "5ca2ca9fe4b048ec896c5b9c"}, {"problem": 23, "code": "(fn reverse-coll [a] \n  (reduce conj '() a))", "user": "5cab0766e4b048ec896c5c45"}, {"problem": 23, "code": "(fn [a]\n  (loop [i (dec (count a))\n         m []]\n    (if (>= i 0)\n      (recur (dec i) (concat m [(#(first (drop %2 %1)) a i)] ))\n      m)))", "user": "5ca26d3be4b048ec896c5b98"}, {"problem": 23, "code": "(fn q23\n  [coll]\n  (reduce conj () coll))", "user": "5cab0ad9e4b048ec896c5c46"}, {"problem": 23, "code": "(fn [s] (reduce (fn [col v] (conj col v)) '() s))", "user": "5cab33e7e4b048ec896c5c48"}, {"problem": 23, "code": "reduce conj ()", "user": "5cac846ae4b026601754b85a"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5cace7bce4b026601754b865"}, {"problem": 23, "code": "#(reduce (fn [x y] (conj x y)) '() %)", "user": "5cad2835e4b026601754b86c"}, {"problem": 23, "code": "(fn rvrs [x]\n  (if (vector? x)\n    (vec (rvrs (seq x)))\n    (if (empty? x)\n      x\n      (loop [f x \n             r ()]\n        (if (empty? f)\n          r\n          (recur (rest f) \n                 (cons (first f) r)))))))", "user": "5c538cb5e4b0fb8c5ffd99fb"}, {"problem": 23, "code": "reduce conj ()", "user": "5c9b848fe4b048ec896c5acf"}, {"problem": 23, "code": "(fn [coll] (reduce #(cons %2 %1) `() coll))", "user": "5caf9cace4b026601754b89b"}, {"problem": 23, "code": "(fn rv\n  ([l] (rv l []))\n  ([l out] \n   (if (empty? l)\n     out\n     (rv (rest l) (cons (first l) out)))))", "user": "5caf99abe4b026601754b898"}, {"problem": 23, "code": "(fn reverser[s]\n  (loop [r s\n         n '()]\n  (if (empty? r)\n  \tn\n  \t(recur (rest r) (conj n (first r))))))", "user": "5ca9b920e4b048ec896c5c29"}, {"problem": 23, "code": "(fn [lst] (reduce (fn [acc x] (cons x acc)) (empty lst) lst))", "user": "5cb1d65ae4b026601754b8d3"}, {"problem": 23, "code": "reduce conj ()", "user": "5cada3b8e4b026601754b872"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5cb246d1e4b026601754b8dc"}, {"problem": 23, "code": "#(reduce (fn [x y] (conj x y)) '() %)", "user": "5cb3a8c3e4b026601754b904"}, {"problem": 23, "code": "reduce conj ()", "user": "5cadd6a4e4b026601754b87b"}, {"problem": 23, "code": "(fn foo [seq] (if (< (count seq) 2)\n   seq \n   (concat [(last seq)] (foo (drop-last (rest seq))) [(first seq)])\n   ))", "user": "5cb47a0fe4b026601754b91b"}, {"problem": 23, "code": "reduce (fn [acc v] (cons v acc)) '()", "user": "5bcf95ace4b0e9689409ee2e"}, {"problem": 23, "code": "reduce conj ()", "user": "5cb351b7e4b026601754b8f9"}, {"problem": 23, "code": "reduce conj ()", "user": "5cb556f9e4b026601754b934"}, {"problem": 23, "code": "(fn [z] (reduce (fn [x y] (conj x y)) '() z))", "user": "5cb4e764e4b026601754b929"}, {"problem": 23, "code": "(fn rev [x] (if (empty? x) () (cons (last x) (rev (butlast x)))))", "user": "5cb62652e4b026601754b949"}, {"problem": 23, "code": "reduce conj '()", "user": "5cb39440e4b026601754b903"}, {"problem": 23, "code": "(fn [li] (reduce (fn [x y] (conj x y)) '() li))", "user": "5cb0e2fee4b026601754b8bf"}, {"problem": 23, "code": "(fn rv [l] \n  (if (< 1 (count l))\n  (conj (rv (butlast l)) (last l))\n  (take 1 l)\n  ))", "user": "5caf9a07e4b026601754b899"}, {"problem": 23, "code": "reduce conj '()", "user": "5cb41c40e4b026601754b911"}, {"problem": 23, "code": "(fn [coll]\n  (reduce conj '() coll))", "user": "5cb71f35e4b026601754b961"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5cb11a72e4b026601754b8c6"}, {"problem": 23, "code": "#(loop [in % out '()] (if (empty? in) out (recur (rest in) (conj out (first in)))))", "user": "5c06fab7e4b0bdcf453d16bd"}, {"problem": 23, "code": "#(loop [c % r []]\n  (if (empty? c)\n    r\n    (recur (butlast c) (conj r (last c)))))", "user": "5cb703e8e4b026601754b95b"}, {"problem": 23, "code": "(fn [coll]\n  (into '() coll))", "user": "5cb9ab41e4b026601754b9a8"}, {"problem": 23, "code": "into ()", "user": "5cbadebee4b026601754b9c8"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5cb9e011e4b026601754b9b0"}, {"problem": 23, "code": "#(map (vec %) (range (dec (count %)) -1 -1))", "user": "5cbb2d22e4b026601754b9d0"}, {"problem": 23, "code": "(fn recursive-reverse [coll]\n    (if (empty? coll)\n        []\n        (conj (recursive-reverse (rest coll)) (first coll) )))", "user": "5cb79c51e4b026601754b970"}, {"problem": 23, "code": "#(loop [remaining %\n        final '()]\n   (if (empty? remaining)\n     final\n     (recur (rest remaining) (conj final (first remaining)))))", "user": "5cae5247e4b026601754b884"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5a09ebf8e4b0eab8c0448932"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5cbc9dace4b026601754b9eb"}, {"problem": 23, "code": "(fn [elements]\n  (reduce (fn [accum x]\n            (cons x accum)) \n          '()\n          elements))", "user": "5cbcacc2e4b026601754b9ed"}, {"problem": 23, "code": "reduce (fn [acc, it] (cons it acc)) '()", "user": "5cbdc591e4b026601754ba00"}, {"problem": 23, "code": "(fn rv [x] \n  (if (empty? (rest x)) (vector (first x))\n      (conj (rv (rest x))  (first x))\n  )\n)", "user": "56d5c1b0e4b0ea9b8538f7c3"}, {"problem": 23, "code": "#(into '() %)", "user": "5c87d2cbe4b048ec896c591c"}, {"problem": 23, "code": "(fn [l]\n  (into (list) l))", "user": "5cbe5fdfe4b0ccb061962750"}, {"problem": 23, "code": "reduce conj ()", "user": "5cbd5b42e4b026601754b9f6"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5cbeadf2e4b0ccb061962755"}, {"problem": 23, "code": "(fn [arg1]\n      (loop [index (count (into [] arg1) ) retSet []]\n            (if (<= index 0)\n              retSet\n              (recur (dec index) (conj retSet (nth (into [] arg1) (- index 1) ))))))", "user": "5cb6256ce4b026601754b947"}, {"problem": 23, "code": "(fn [items]\n  (loop [left [] right items]\n    (if (empty? right)\n      left\n      (recur (conj left (last right)) (butlast right)))))", "user": "5cbb0436e4b026601754b9cc"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5cbe21eee4b0ccb06196274b"}, {"problem": 23, "code": "#(reduce conj '() % )", "user": "5cb0f70ce4b026601754b8c1"}, {"problem": 23, "code": "(fn rev\n  ([s] (rev s []))\n  ([s m] \n  (if (empty? s) \n    m\n    (do (println m)(recur (rest s) (cons (first s) m)))\n  ))\n)", "user": "5cc1584de4b0ccb0619627ad"}, {"problem": 23, "code": "reduce conj ()", "user": "5cbfa589e4b0ccb061962774"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5cc28739e4b0ccb0619627d8"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5cc1def9e4b0ccb0619627c4"}, {"problem": 23, "code": "(fn [list]\n  (loop [xs list, result '()]\n    (if (empty? xs)\n      result\n      (recur (drop 1 xs) (conj result (first xs)))\n     )\n    )\n )", "user": "5cbdadeee4b026601754b9ff"}, {"problem": 23, "code": "#(into () %)", "user": "5c547cf0e4b0fb8c5ffd9a0b"}, {"problem": 23, "code": "(fn revseq [seqn]\n    (if (empty? seqn)\n      (first seqn)\n      (cons (last seqn) (revseq (butlast seqn)))))", "user": "5c8cfff8e4b048ec896c5996"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5cbc1ee7e4b026601754b9e1"}, {"problem": 23, "code": "reduce #(cons %2 %1) []\n; reduce (fn [coll el] (cons el coll)) []", "user": "5afb3426e4b0cc2b61a3bcf5"}, {"problem": 23, "code": "#(loop [result nil, coll %]\n  (if (seq coll)\n    (let [x (first coll)]\n      (recur (cons x result) (rest coll)))\n    result))", "user": "5cc6f982e4b0ccb06196282d"}, {"problem": 23, "code": "#(into () %)", "user": "5cc7073de4b0ccb06196282e"}, {"problem": 23, "code": "reduce #(conj % %2) ()", "user": "5cc7342be4b0ccb061962830"}, {"problem": 23, "code": "(fn [xs]\n  (reduce #(cons %2 %1) '() xs))", "user": "5cc75ffce4b0ccb061962836"}, {"problem": 23, "code": "reduce conj ()", "user": "5cc7692ce4b0ccb061962837"}, {"problem": 23, "code": "#(loop [coll % recoll '()]\n   (if coll\n     (recur (next coll) (conj recoll (first coll)))\n     recoll))", "user": "5cc80598e4b0ccb061962840"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5cc9031ee4b0ccb061962859"}, {"problem": 23, "code": "(fn [a] (reduce conj () a))", "user": "5cc1f975e4b0ccb0619627c8"}, {"problem": 23, "code": "(fn [nums] \n  (loop [i '()\n         nums nums]\n    (if (empty? nums) \n      i \n   \t  (recur (conj i (first nums)) (rest nums)))))", "user": "5c34f7efe4b0d62ef62d9f5b"}, {"problem": 23, "code": "(fn re [l]\n  (if (empty? l)\n    l\n    (concat (re (rest l)) [(first l)])))", "user": "5caa5e42e4b048ec896c5c35"}, {"problem": 23, "code": "reduce (fn [a b] (conj a b)) ()", "user": "5cc6b4bfe4b0ccb061962827"}, {"problem": 23, "code": "into '()", "user": "5a9bfd57e4b0d174b936c7d0"}, {"problem": 23, "code": "(fn [x] (into '() x))", "user": "5ccb3792e4b0ccb061962882"}, {"problem": 23, "code": "reduce conj '()", "user": "5ccb7ba6e4b0ccb061962885"}, {"problem": 23, "code": "#(into () %)", "user": "5ccc9078e4b0ccb061962899"}, {"problem": 23, "code": "(fn [x]\r\n  (reduce conj () x))", "user": "5ccb0bbee4b0ccb06196287c"}, {"problem": 23, "code": "#(reduce (fn [x y] (conj x y)) () %)", "user": "5ccda634e4b0ccb0619628a9"}, {"problem": 23, "code": "into (list)", "user": "5cc82af4e4b0ccb061962843"}, {"problem": 23, "code": "(fn rev [coll] (reduce conj '() coll))", "user": "52d81642e4b09f7907dd1387"}, {"problem": 23, "code": "into ()", "user": "5ccef16be4b0ccb0619628bf"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5cc4b34de4b0ccb061962805"}, {"problem": 23, "code": "reduce #(conj %1 %2) '()", "user": "5ccf2dc3e4b0ccb0619628c2"}, {"problem": 23, "code": "#(reduce conj () %\n )", "user": "5ccee75ae4b0ccb0619628bc"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5ccf3879e4b0ccb0619628c4"}, {"problem": 23, "code": "#(into () %)", "user": "5ccf125ce4b0ccb0619628c0"}, {"problem": 23, "code": "#(into '() %)", "user": "5cce7de4e4b0ccb0619628b7"}, {"problem": 23, "code": "(fn [seq]\n   (loop [input seq output (list)]\n     (if (empty? input)\n       output\n       (recur (rest input) (conj output (first input)))\n       )))", "user": "5ccc2a03e4b0ccb06196288f"}, {"problem": 23, "code": "#(->> % (keep-indexed list) (sort-by first >) (map second))", "user": "5c9147c1e4b048ec896c59df"}, {"problem": 23, "code": "into ()", "user": "5c97821be4b048ec896c5a70"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5cd1b297e4b0ccb0619628f1"}, {"problem": 23, "code": "(fn [col]\n  (loop [remain col\n         accum []]\n    (if (empty? remain)\n      accum\n      (recur\n       (butlast remain)\n       (conj accum (last remain))))))", "user": "5c633df2e4b0fca0c162265c"}, {"problem": 23, "code": "(fn [s] ((fn [s a] (cond (empty? s) a :else (recur (rest s) (concat [(first s)] a)))) s []))", "user": "5cd26163e4b0ccb0619628fe"}, {"problem": 23, "code": "reduce conj ()", "user": "5cd1f5dae4b0ccb0619628f7"}, {"problem": 23, "code": "(fn [x] (reduce conj () x))", "user": "5cd33e1ce4b0ccb06196290a"}, {"problem": 23, "code": "(fn\n[x]\n  (reduce conj () x))", "user": "5cd17bf1e4b0ccb0619628eb"}, {"problem": 23, "code": "#(loop [rev '()\n        coll %]\n   (if (empty? coll)\n     rev\n     (recur (conj rev (first coll)) (rest coll))))", "user": "5cd639b4e4b0ccb061962940"}, {"problem": 23, "code": "; (fn [q] (reduce #(conj % %2) () q))\ninto ()", "user": "5ccf21c4e4b0ccb0619628c1"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5cd5f3f8e4b0ccb06196293d"}, {"problem": 23, "code": "#(loop [x %  res ()]\n     (if (empty? x)\n       res\n       (recur (rest x) (cons (first x) res))))", "user": "5cd4c3dae4b0ccb061962925"}, {"problem": 23, "code": "(fn [s]\n  (loop [[first & rest] (seq s) trgt `()]\n    (if (nil? first)\n      trgt\n      (recur rest (conj trgt first))\n    )\n  )\n)", "user": "5cd67eb2e4b0ccb061962943"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5cccac42e4b0ccb06196289d"}, {"problem": 23, "code": "(fn [s] (loop [s s\n                   acc '()]\n              (if (empty? s)\n                acc\n                (recur (rest s) (conj acc (first s))))))", "user": "5cd99946e4b05ee0cb311706"}, {"problem": 23, "code": "#(reduce (fn [x y] (conj x y)) '() %)", "user": "5cd99bebe4b05ee0cb311707"}, {"problem": 23, "code": "#(reduce conj '() %1)", "user": "5cd42a01e4b0ccb061962915"}, {"problem": 23, "code": "(fn [x] \n  (reduce (fn [c z] (conj c z)) '() x))", "user": "5cd1fd2fe4b0ccb0619628f8"}, {"problem": 23, "code": "(fn [s] (reduce conj '() s))", "user": "5cd9dc85e4b05ee0cb31170d"}, {"problem": 23, "code": "#(into () %)", "user": "5c07522ae4b0bdcf453d16c4"}, {"problem": 23, "code": "(fn [coll] (into () coll))", "user": "4f925791e4b0dcca54ed6cac"}, {"problem": 23, "code": "reduce conj '()", "user": "5c925cb3e4b048ec896c5a05"}, {"problem": 23, "code": "#(reduce conj() %)", "user": "5cd4e1b2e4b0ccb061962927"}, {"problem": 23, "code": "(fn [seq]\n  (loop [seq seq\n         seqrev '()]\n    (if (empty? seq)\n      seqrev\n      (recur (drop 1 seq) (conj seqrev (first seq)))\n    )\n  )\n)", "user": "5c9b07cde4b048ec896c5abd"}, {"problem": 23, "code": "into ()", "user": "5cdd934ce4b05ee0cb311761"}, {"problem": 23, "code": "into '()", "user": "5cdaa794e4b05ee0cb311719"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5cdedd3de4b0a17bb84e2af9"}, {"problem": 23, "code": "(fn [xs] (reduce #(cons %2 %1) [] xs))", "user": "5cdc08a2e4b05ee0cb31173a"}, {"problem": 23, "code": "#(into '() %)", "user": "5cdfe2aee4b0a17bb84e2b04"}, {"problem": 23, "code": "(fn rev\n  [coll]\n  (let [vs (vec coll)]\n   (if\n     (empty? vs) []\n     (conj (rev (rest vs)) (first vs)))))", "user": "55d06492e4b0e31453f64a39"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5cdf4bd2e4b0a17bb84e2b00"}, {"problem": 23, "code": "#(into '() %)", "user": "5ce05561e4b0a17bb84e2b08"}, {"problem": 23, "code": "(fn [coll] (reduce (fn [res x] (conj res x)) '() coll))", "user": "5ce077e9e4b0a17bb84e2b0c"}, {"problem": 23, "code": "(fn reverse'\n  [coll]\n    (if (empty? coll) []\n      (conj (reverse' (rest coll)) (first coll))))", "user": "5ce1f591e4b0a17bb84e2b1f"}, {"problem": 23, "code": "(fn [s]\n  (into '() s))", "user": "5cdd473ae4b05ee0cb311757"}, {"problem": 23, "code": "into ()", "user": "5cd06cfbe4b0ccb0619628d2"}, {"problem": 23, "code": "(fn [seq]\n  (loop [rest-seq seq\n         curr '()]\n    (if (not (empty? rest-seq))\n      (recur (rest rest-seq) (cons (first rest-seq) curr))\n      curr)\n    )\n  )", "user": "5cdbb1b2e4b05ee0cb311732"}, {"problem": 23, "code": "#(into () %)", "user": "5ce2afe8e4b0a17bb84e2b2b"}, {"problem": 23, "code": "reduce conj ()", "user": "5ce06034e4b0a17bb84e2b09"}, {"problem": 23, "code": "(fn myrev\n  [l]\n  (cond\n   (= l '()) '[]\n   :else (conj (myrev (rest l)) (first l))\n   )\n  )", "user": "5cd5ac3ae4b0ccb061962937"}, {"problem": 23, "code": "reduce conj '()", "user": "5ce2bf8ee4b0a17bb84e2b2e"}, {"problem": 23, "code": "reduce #(cons %2 %1) []", "user": "5cdaf05ee4b05ee0cb311722"}, {"problem": 23, "code": "(fn [col]\n   (reduce conj '() col)\n   )", "user": "5cdd7157e4b05ee0cb31175b"}, {"problem": 23, "code": "(fn [col]\n  (reduce (fn [a b] (conj a b)) '() col))", "user": "5ce3e239e4b0a17bb84e2b46"}, {"problem": 23, "code": "#(reduce (fn [res a] (conj res a)) '() %)", "user": "5c87c79be4b048ec896c591b"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5ce41d1be4b0a17bb84e2b50"}, {"problem": 23, "code": "(fn reverse-list [l] \n  (reduce conj '() l)\n)", "user": "5ce45b5be4b0a17bb84e2b5b"}, {"problem": 23, "code": "#(into () %)", "user": "5cd47c26e4b0ccb06196291e"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5177097de4b085adf681d892"}, {"problem": 23, "code": "(fn rev [coll] (reduce conj '() coll))", "user": "5ce52271e4b0a17bb84e2b69"}, {"problem": 23, "code": "#(apply conj (cons nil %))", "user": "5ce2b15fe4b0a17bb84e2b2c"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5ce44ee2e4b0a17bb84e2b57"}, {"problem": 23, "code": "(fn [l] (loop [revl '() rl l] (if (empty? rl) revl (recur (conj revl (first rl)) (rest rl)))))", "user": "5ce56db6e4b0a17bb84e2b72"}, {"problem": 23, "code": "reduce (fn [acc x] (conj acc x)) ()", "user": "5ce6c354e4b0a17bb84e2b93"}, {"problem": 23, "code": "(fn myrev \n  [x] \n  (if (empty? x)\n    '()\n    (cons (last x) \n          (myrev \n           (take (- (count x) 1) x))\n          )\n    )\n  )", "user": "5ce708b7e4b0a17bb84e2b9b"}, {"problem": 23, "code": "(fn [coll]\n   (loop [coll coll rev []]\n     (if-not (seq coll)\n       rev\n       (recur (rest coll) (cons (first coll) rev)))))", "user": "4f847f0ee4b033992c121c33"}, {"problem": 23, "code": "(fn [coll]\n    (let [c2 (into '() coll)]\n      (if (vector? coll)\n        (into [] c2)\n        c2)))", "user": "5c98d91ee4b048ec896c5a8c"}, {"problem": 23, "code": "#(into () %)", "user": "5ce69c4ae4b0a17bb84e2b8b"}, {"problem": 23, "code": "#(letfn [(rev [lst acc]\n              (if (seq lst)\n\t              (recur (rest lst) (conj acc (first lst)))\n                  acc))]\n   (rev % '()))", "user": "5ce6f93be4b0a17bb84e2b99"}, {"problem": 23, "code": "(fn[xs](reduce (fn[r x](conj r x)) '() xs))", "user": "5ce62d8ee4b0a17bb84e2b83"}, {"problem": 23, "code": "#(reduce (fn [acc x] (cons x acc)) [] %)", "user": "5ce78776e4b0a17bb84e2ba2"}, {"problem": 23, "code": "reduce conj ()", "user": "5ce56455e4b0a17bb84e2b71"}, {"problem": 23, "code": "#(loop [xs %1 res ()] (if (empty? xs) res (recur (rest xs) (conj res (first xs)))))", "user": "5cea0bd4e4b0a17bb84e2bc9"}, {"problem": 23, "code": "(fn [x]\n  (into () x))", "user": "5ce5277de4b0a17bb84e2b6a"}, {"problem": 23, "code": "#(loop [result nil, col %]\n   (if (seq col)\n     (let [x (first col)]\n       (recur (cons x result) (rest col))\n       )\n     result\n     ))", "user": "5cda72ffe4b05ee0cb311714"}, {"problem": 23, "code": "#(reduce conj () %1)", "user": "5cead199e4b0a17bb84e2bd4"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "5ceaeefbe4b0a17bb84e2bda"}, {"problem": 23, "code": "(fn [a-seq]\n   (loop [a-seq a-seq\n          res '()]\n     (if (empty? a-seq)\n       res\n       (recur (rest a-seq) (cons (first a-seq) res)))))", "user": "5ce36e02e4b0a17bb84e2b3e"}, {"problem": 23, "code": "(fn reverser [coll] (if (empty? coll) [] (conj (reverser (next coll)) (first coll))))", "user": "5ceca436e4b0a17bb84e2bf8"}, {"problem": 23, "code": "#(loop [old-sq %1 new-sq []]\n  (prn \"old:\" (drop 1 old-sq) \", new:\" new-sq)\n  (if (empty? (take 1 old-sq)) \n    (identity new-sq) ;yes\n    (recur (drop 1 old-sq) (concat (take 1 old-sq) new-sq)))) ;no", "user": "5cea925ce4b0a17bb84e2bd2"}, {"problem": 23, "code": "#(loop [rev [] lst %]\n   (if lst\n     (recur (cons (first lst) rev) (next lst))\n     rev))", "user": "5cebafbbe4b0a17bb84e2be6"}, {"problem": 23, "code": "reduce #(cons %2 %1) []", "user": "5cece5a2e4b0a17bb84e2bfb"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5baaae06e4b0a20761a23464"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "5c78a3eae4b0fca0c1622829"}, {"problem": 23, "code": "(fn [collection]\n  (reduce conj '() collection))", "user": "5cd8d4a1e4b05ee0cb3116f3"}, {"problem": 23, "code": "#(into `() (seq %))", "user": "5cee4bc9e4b0aaa82f1129dc"}, {"problem": 23, "code": "(fn [ls] (reduce conj '() ls))", "user": "5cec2b79e4b0a17bb84e2bf4"}, {"problem": 23, "code": "(partial reduce conj ())", "user": "5cf115eee4b0aaa82f112a08"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "58468c4ee4b089d5ab817e95"}, {"problem": 23, "code": "reduce #(cons %2 %1) []", "user": "5cf11680e4b0aaa82f112a09"}, {"problem": 23, "code": ";(fn [x] (if (coll? (first x)) (sort-by first > x) (sort > x)))\n\ninto '()", "user": "5ceef51ee4b0aaa82f1129e9"}, {"problem": 23, "code": "into '()", "user": "5ce97826e4b0a17bb84e2bc0"}, {"problem": 23, "code": "#(loop [s1 %1 s2 nil]\n   (if (empty? s1) s2 (recur (rest s1) (cons (first s1) s2))))", "user": "592bb806e4b072a2710fcf46"}, {"problem": 23, "code": "(fn\n  [coll]\n  (loop [[r & more :as all] (seq coll)\n         acc '()]\n    (if all\n      (recur more (cons r acc))\n      acc)))", "user": "5cf1d9e3e4b0aaa82f112a18"}, {"problem": 23, "code": "(fn [xs] (map (fn [k] (nth (vec xs) k)) (range (- (count xs) 1) -1 -1)))", "user": "5cf4094be4b0aaa82f112a35"}, {"problem": 23, "code": "(fn [s]\n  (let [rev (into nil s)]\n    (if (sorted? s)\n      rev\n      (into (empty s) rev))))", "user": "5b38d2f3e4b02d533a91bbaf"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5cf50e67e4b087f62be35a8d"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5ce5b43be4b0a17bb84e2b7a"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5cec049ce4b0a17bb84e2bef"}, {"problem": 23, "code": "into '()", "user": "5cd16529e4b0ccb0619628e7"}, {"problem": 23, "code": "reduce conj '()", "user": "5cf5775ce4b087f62be35a98"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5cf68090e4b0b71b1d808a59"}, {"problem": 23, "code": "reduce (fn [x y] (concat [y] x)) []", "user": "5cf62f9be4b087f62be35aa8"}, {"problem": 23, "code": "reduce conj '()", "user": "5cf935f4e4b0b71b1d808a8f"}, {"problem": 23, "code": "(fn [x] (reduce conj '() x) )", "user": "5cf938a5e4b0b71b1d808a90"}, {"problem": 23, "code": "(partial\n (fn local-reverse [rev-coll coll]\n   (if (nil? (first coll)) rev-coll (recur (cons (first coll) rev-coll) (rest coll)))) [])", "user": "5be1c6c6e4b0ed4b8aab4ca5"}, {"problem": 23, "code": "#(into '() %)", "user": "5cf9180fe4b0b71b1d808a8c"}, {"problem": 23, "code": "#((fn [x seq]\n                     (if (empty? seq)\n                       x\n                       (recur (conj x (first seq)) (rest seq)))\n                     ) '() %1)", "user": "5cf72682e4b0b71b1d808a68"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "5cfa344de4b0cc9c9158813c"}, {"problem": 23, "code": "(fn custom-reverse\n   [seq]\n   (loop [seq seq new-seq []]\n     (if (empty? seq)\n       new-seq\n       (recur (drop-last seq) (conj new-seq (last seq))))))", "user": "5cfcf4d9e4b0cc9c91588162"}, {"problem": 23, "code": "#(loop [original-seq %1 return-seq '()]\n  (if (= 0 (count original-seq))\n    (vec return-seq)\n    (recur (rest original-seq) (cons (first original-seq) return-seq))\n  )\n)", "user": "5c3440fee4b0d62ef62d9f50"}, {"problem": 23, "code": "reduce (fn [acc e] (conj acc e)) '()", "user": "5cfd5a93e4b0cc9c91588168"}, {"problem": 23, "code": "reduce conj '()", "user": "59924289e4b0866487ed0d76"}, {"problem": 23, "code": "(fn [input]\n  (let [coll (vec input)]\n    (loop [c coll n (dec (count coll)) results []]\n      (if (seq c)\n        (recur (rest c) (dec n) (conj results (get coll n)))\n        results))))", "user": "5cf62ecce4b087f62be35aa7"}, {"problem": 23, "code": "reduce conj ()", "user": "5cfee28de4b0cc9c91588185"}, {"problem": 23, "code": "(fn rev-seq [lat]\n  (into '() lat))", "user": "5cffbc2ce4b0cc9c91588193"}, {"problem": 23, "code": "reduce conj nil", "user": "5cfeacb7e4b0cc9c9158817d"}, {"problem": 23, "code": "reduce conj ()", "user": "5cf863c4e4b0b71b1d808a80"}, {"problem": 23, "code": "(fn rev [coll]\n  (if-not (next coll)\n    (list (first coll))\n    (lazy-seq\n     (concat (rev (next coll))\n             (list(first coll))))))", "user": "5cee521ce4b0aaa82f1129dd"}, {"problem": 23, "code": "#(into (list) %1)", "user": "5d00f8c5e4b0cc9c915881a3"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5a23503fe4b0ff51aa4b32d6"}, {"problem": 23, "code": "(fn rev [xs]\n  (letfn [(rev-c [xs ys] \n                 (if (empty? xs)\n                   ys\n                   (rev-c (rest xs) (cons (first xs) ys))))]\n    (rev-c xs [])))", "user": "5ad351a5e4b0ea6055cfabc0"}, {"problem": 23, "code": "(fn [x] (loop [ r []  a x] (if (empty? a) r (recur (conj r (last a)) (drop-last a)))))", "user": "5cfff788e4b0cc9c91588196"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "5032089de4b000fc67a99a85"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5ceedd7ae4b0aaa82f1129e4"}, {"problem": 23, "code": "(fn reverse'\n  [xs]\n  (if (seq xs)\n    (conj (reverse' (next xs)) (first xs))\n    []))", "user": "5cdc17d0e4b05ee0cb31173c"}, {"problem": 23, "code": "reduce conj ()", "user": "5d01fb3ce4b0cc9c915881b5"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5d0570fbe4b0cc9c915881df"}, {"problem": 23, "code": "(fn [coll] (reduce (fn [x y] (conj x y)) '() coll))", "user": "5d03944de4b0cc9c915881c5"}, {"problem": 23, "code": "(fn reverse-me \n  [s]\n  (reduce #(conj %1 %2) '() s)\n  )", "user": "5d05fdece4b0cc9c915881e8"}, {"problem": 23, "code": "(fn reverse'\n     ([col]\n      (reverse' (rest col) (cons (first col) [])))\n     ([col rev-col]\n      (if (empty? col)\n       rev-col\n       (reverse' (rest col) (cons (first col) rev-col)))))", "user": "5d06499ae4b0cc9c915881ec"}, {"problem": 23, "code": "#(apply conj () %)", "user": "5bcdb877e4b0e9689409ee02"}, {"problem": 23, "code": "#(loop [src (seq %) res []]\n\t(if (empty? src)\n\t\tres\n\t\t(recur\n\t\t\t(take (dec (count src)) src)\n\t\t\t(conj res (last src))\n\t\t)\n\t)\n)", "user": "5d0859fbe4b0cc9c91588208"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5d0781d1e4b0cc9c915881f9"}, {"problem": 23, "code": "(fn [seq] (sort #(compare %2 %1) seq))", "user": "5d08dfe7e4b0cc9c91588210"}, {"problem": 23, "code": "#(into '() %)", "user": "5d045162e4b0cc9c915881d3"}, {"problem": 23, "code": "(\n fn [lis]\n\t(into '() lis))", "user": "5c9f952ae4b048ec896c5b59"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "58593c05e4b0f14aab7c872d"}, {"problem": 23, "code": "(fn [elements] (reduce conj '() elements))", "user": "5d09dffbe4b0cc9c9158821c"}, {"problem": 23, "code": "reduce conj '()", "user": "5b99554ae4b0c0b3ffbd4ace"}, {"problem": 23, "code": "(fn [seq]\n    (into () seq))", "user": "5cfabf53e4b0cc9c91588148"}, {"problem": 23, "code": "#(into '() %)", "user": "5d0815b3e4b0cc9c91588201"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5d0aab50e4b0cc9c91588220"}, {"problem": 23, "code": "(fn [my-seq]\n  (reduce #(cons %2 %1) '() my-seq))", "user": "5d0b210ee4b0cc9c9158822b"}, {"problem": 23, "code": "(fn [c] (reduce conj '() c))", "user": "5d0af5cbe4b0cc9c91588228"}, {"problem": 23, "code": "#(reduce conj() %)", "user": "5d03977ee4b0cc9c915881c7"}, {"problem": 23, "code": "(fn [coll] (loop [[r & more :as all] (seq coll) acc '()] (if all (recur more (cons r acc)) acc)))", "user": "5d0a65ebe4b0cc9c9158821f"}, {"problem": 23, "code": "reduce conj '()", "user": "58dde189e4b0a4d5acaab6dd"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "568f2059e4b0dcc4269f40df"}, {"problem": 23, "code": "(fn [coll]\n  (reduce\n   (fn [acc itm]\n     (cons itm acc))\n   []\n   coll))", "user": "5cf48f04e4b087f62be35a86"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5d0e311de4b0cc9c91588251"}, {"problem": 23, "code": "(partial reduce conj ())", "user": "5d0e9931e4b0cc9c91588258"}, {"problem": 23, "code": "(fn [s]\n  (reduce\n    (fn [acc curr]\n      (conj acc curr))\n    '()\n    s))", "user": "5d0eed51e4b0cc9c91588262"}, {"problem": 23, "code": "reduce conj '()", "user": "5d0e58ede4b0cc9c91588254"}, {"problem": 23, "code": "#(map (vec %) (range (dec (count %)) -1 -1))", "user": "5d02fe44e4b0cc9c915881c0"}, {"problem": 23, "code": "(fn reverse' [xs] \n  (cond\n    (< (count xs) 2) xs\n    :else (conj (reverse' (drop-last xs)) (last xs))))", "user": "5a08f951e4b01bb0ae8afdfd"}, {"problem": 23, "code": ";; The simplest form to reverse a sequence is to transform it into a list,\n;; so that the making up via the conj function reverses the order.\n#(into () %)", "user": "5d0eda66e4b0cc9c9158825f"}, {"problem": 23, "code": "(fn [xs]\n  (reduce (fn [acc x]\n            (conj acc x))\n          '() xs))", "user": "5d11618de4b02c15ef021985"}, {"problem": 23, "code": "#(into () %)", "user": "5d11092be4b02c15ef021982"}, {"problem": 23, "code": "(fn rev-seq [coll] (if (= (count coll) 1) coll (cons (first (take-last 1 coll)) (rev-seq (take (- (count coll) 1) coll)))))", "user": "5d038e6ee4b0cc9c915881c4"}, {"problem": 23, "code": "(fn [coll]\n   (loop [acc (vector) rem coll]\n     (if (nil? (seq rem)) acc\n         (recur (cons (first rem) acc) (rest rem)))))", "user": "5d126728e4b02c15ef02199a"}, {"problem": 23, "code": "(fn [seq] (reduce conj () seq))", "user": "5d126814e4b02c15ef02199b"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5d132412e4b02c15ef0219a6"}, {"problem": 23, "code": ";;#(reduce (fn [acc a] (cons a acc)) '() %)\n\nreduce conj ()", "user": "5d1201fce4b02c15ef02198f"}, {"problem": 23, "code": "reduce #(cons %2 %1) []", "user": "5d13c5d2e4b0902706380dbf"}, {"problem": 23, "code": "(fn myRev [old]\n  (if (empty? old)\n  []\n  (concat (myRev (rest old)) [(first old)])))", "user": "5d10e07ae4b02c15ef02197f"}, {"problem": 23, "code": "into ()", "user": "5d1200cbe4b02c15ef02198e"}, {"problem": 23, "code": "(fn [x] (let [vettore (into [] x)\n              conteggio (->>(flatten(partition (count vettore) (range (count vettore))))\n                            (map #(- (count vettore) %))\n                            (map dec))]\n          (map #(nth vettore %) conteggio)))", "user": "5d148581e4b0902706380dc6"}, {"problem": 23, "code": "(fn [coll] (reduce #(cons %2 %1) [] coll))", "user": "5d1380cbe4b0902706380dba"}, {"problem": 23, "code": "#(loop [r % result []]\n  (if (empty? r)\n    result\n    (recur (rest r) (cons (first r) result))))", "user": "5d10c1a8e4b04b4faecf4449"}, {"problem": 23, "code": "reduce (fn [c s] (cons s c)) []", "user": "5ae9b23fe4b0cc2b61a3bbd8"}, {"problem": 23, "code": "(fn rev\n  [l]\n  (println (last l))\n  (if (empty? l)\n    l\n    (concat (list (last l)) (rev (butlast l)))\n  )\n)", "user": "5d123c75e4b02c15ef021997"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "54b42ea4e4b05787c3b1638b"}, {"problem": 23, "code": "(fn [c] (reduce #(conj %1 %2) '() c))", "user": "5d063918e4b0cc9c915881eb"}, {"problem": 23, "code": "#(reduce (fn [rev item] (cons item rev)) [] %)", "user": "5d123457e4b02c15ef021996"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5d1a2227e4b0902706380e0f"}, {"problem": 23, "code": "(fn [xs]\n  (reduce (fn [x y] (cons y x)) '() xs))", "user": "5c8aa02de4b048ec896c5958"}, {"problem": 23, "code": "(partial reduce (fn [sq elem] (cons elem sq)) [])", "user": "5d046f7ce4b0cc9c915881d5"}, {"problem": 23, "code": "reduce conj ()", "user": "5d16d157e4b0902706380deb"}, {"problem": 23, "code": "(partial reduce (fn [res x] (cons x res)) '())", "user": "5d1231dde4b02c15ef021995"}, {"problem": 23, "code": "(fn [col]\n  (reduce\n   (fn [seq x] (conj seq x))\n    '()\n     col))", "user": "5ccf99fbe4b0ccb0619628c8"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5b562842e4b02d533a91bd3f"}, {"problem": 23, "code": "(fn rev [x] (letfn [(rev2 [x y] (if (empty? x) y (rev2 (next x) (cons (first x) y))))] (let [a (rev2 x (empty x))] (if (vector? x) (vec a) a))))", "user": "5d1bbef0e4b02ea6f0fb6984"}, {"problem": 23, "code": "(fn [list] (into () list))", "user": "5d1b2a1ee4b02ea6f0fb6979"}, {"problem": 23, "code": "(fn [lst]\n  ((fn rev [lst rlst]\n     (if (= (first lst) nil)\n       rlst\n       (rev (rest lst) (cons (first lst) rlst)))) lst '()))", "user": "5d1cd478e4b02ea6f0fb6991"}, {"problem": 23, "code": "(fn\n  [s]\n  (reduce (fn [r i]\n            (cons i r))\n          '()\n          s))", "user": "570c8ac3e4b0b0fb43fd06ca"}, {"problem": 23, "code": "(fn [s]\n  (map-indexed \n   (fn [i _] \n     (get (into [] s) (- (count s) (+ i 1))) ) s ))", "user": "5cf8e426e4b0b71b1d808a88"}, {"problem": 23, "code": "#(into () %)", "user": "5d1de7b2e4b02ea6f0fb69ad"}, {"problem": 23, "code": "(fn [items]\n    (loop [l '()\n           xs items] (let [f (first xs)] (if f\n                           (recur (conj l f) (rest xs))\n                          (seq l)))))", "user": "5d13af73e4b0902706380dbe"}, {"problem": 23, "code": "(fn [s] (reduce #(cons %2 %1) [] s))", "user": "5d1e19c4e4b02ea6f0fb69af"}, {"problem": 23, "code": "into '()", "user": "5d0b4966e4b0cc9c9158822f"}, {"problem": 23, "code": "(fn recursive-reverse [coll]\n  (loop [coll coll\n         acc '()]\n    (if (= coll '())\n      acc\n      (recur (rest coll) (conj  acc (first coll))))))", "user": "5d1a1082e4b0902706380e0e"}, {"problem": 23, "code": "#(into () %)\n;#(reduce (fn [coll e] (conj coll e)) () %)", "user": "5d1be50ce4b02ea6f0fb6986"}, {"problem": 23, "code": "reduce conj ()", "user": "5d1bcf6ae4b02ea6f0fb6985"}, {"problem": 23, "code": "reduce conj ()", "user": "5d1cf523e4b02ea6f0fb6994"}, {"problem": 23, "code": "(fn [lst] ((fn rev [oLst nLst] (if (empty? oLst) nLst (rev (rest oLst) (cons (first oLst) nLst)))) lst '()))", "user": "5cdc3c69e4b05ee0cb311741"}, {"problem": 23, "code": "(fn rev-seq [lat]\n  (into '() lat))", "user": "5d05d005e4b0cc9c915881e6"}, {"problem": 23, "code": ";#(reduce conj '() %)\nreduce conj '()", "user": "5d2201b8e4b02ea6f0fb69ed"}, {"problem": 23, "code": "(fn rev\n  ([xs] (rev xs '()))\n  ([xs rev]\n   (if (empty? xs)\n     rev\n     (recur (rest xs) (conj rev (first xs))))))", "user": "5d217b1de4b02ea6f0fb69e6"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5d1b59abe4b02ea6f0fb697e"}, {"problem": 23, "code": "(fn [col]\n  (reduce conj () col))", "user": "5d231255e4b02ea6f0fb69fe"}, {"problem": 23, "code": "#(into '() %)", "user": "5d232882e4b02ea6f0fb6a02"}, {"problem": 23, "code": "#(into '() %)", "user": "5c59b836e4b01df32ab73263"}, {"problem": 23, "code": "(fn [s]\n  (reduce conj '() s))", "user": "5d236215e4b02ea6f0fb6a09"}, {"problem": 23, "code": "reduce conj ()", "user": "5d164829e4b0902706380de0"}, {"problem": 23, "code": "reduce (fn [a b] (cons b a) ) []", "user": "5d122f3ee4b02c15ef021994"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5d246597e4b02ea6f0fb6a22"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5d24671ce4b02ea6f0fb6a23"}, {"problem": 23, "code": "reduce (fn [acc curr] (cons curr acc)) []", "user": "5d1c14cde4b02ea6f0fb698a"}, {"problem": 23, "code": "(fn [ls]\n\t(loop [ls ls\n\t\t   res []]\n\t\t(if (empty? ls)\n\t\t\tres\n\t\t\t(recur (drop-last ls) (conj res (last ls))))))", "user": "5d125d63e4b02c15ef021999"}, {"problem": 23, "code": "(fn [coll]\n  (reduce #(conj %1 %2) '() coll))", "user": "5cf895efe4b0b71b1d808a85"}, {"problem": 23, "code": ";From John\n(fn [s]\n    (let [svec (into [] s)]\n      (for [i (range (count svec) 0 -1)]\n        (get svec (dec i)))))", "user": "5d24e49be4b02ea6f0fb6a2a"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5d0beecee4b0cc9c91588239"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5d267c11e4b02ea6f0fb6a41"}, {"problem": 23, "code": "#(into '() (map identity %))", "user": "5d247902e4b02ea6f0fb6a24"}, {"problem": 23, "code": "#(loop [col % rt []]\n   (if(empty? col)\n     rt\n     (recur (rest col) (cons (first col) rt))))", "user": "5d270111e4b092dab7f59c62"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5d272077e4b092dab7f59c64"}, {"problem": 23, "code": "into ()", "user": "5d27da09e4b092dab7f59c75"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5d2564d2e4b02ea6f0fb6a34"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5d25abc9e4b02ea6f0fb6a37"}, {"problem": 23, "code": "#(reduce (fn [x y] (conj x y)) '() %)", "user": "5d138119e4b0902706380dbb"}, {"problem": 23, "code": "#(loop [straight (vec %)  rev []]\n      (if (not (seq straight))\n        rev\n        (recur (pop straight) (conj rev (peek straight)))))", "user": "5d28633be4b092dab7f59c7d"}, {"problem": 23, "code": "into '()", "user": "5d1e37e2e4b02ea6f0fb69b1"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5d28222ee4b092dab7f59c7a"}, {"problem": 23, "code": "(fn hello\n   ([elems] (hello elems []))\n   ([elems sofar]\n  (if (empty? elems)\n    sofar\n    (recur (rest elems) (into (conj [] (first elems)) sofar)))))", "user": "5d28b684e4b092dab7f59c83"}, {"problem": 23, "code": "(fn reverse-em [things]\n  (loop [things (seq things) aggregator '()] \n  (if (empty? things)\n    aggregator\n    (let [[item1 & remaining] things] (recur remaining (concat [item1] aggregator))))))", "user": "5d24e8efe4b02ea6f0fb6a2b"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "5d29d837e4b01671435dbc6c"}, {"problem": 23, "code": "reduce #(cons %2 %1) `()", "user": "5d13f783e4b0902706380dc1"}, {"problem": 23, "code": "reduce conj ()", "user": "5d29c06be4b01671435dbc6b"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "576a42e6e4b0a07e8fc1810e"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "5d1a92d6e4b0902706380e11"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5d21b91ee4b02ea6f0fb69e9"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5d2c8844e4b01671435dbc8f"}, {"problem": 23, "code": "#(into () %)", "user": "5d2bfb68e4b01671435dbc86"}, {"problem": 23, "code": "(fn [x] (reduce #(cons %2 %1) (cons [] (seq x))))", "user": "5d2ca236e4b01671435dbc94"}, {"problem": 23, "code": "#(loop [[r & more :as all] (seq %)\n       acc '()]\n  (if all \n    (recur more (cons r acc))\n    acc))", "user": "5d2cc16ee4b01671435dbc96"}, {"problem": 23, "code": "#(loop [in %1\n        out []]\n   (if (empty? in)\n     out\n     (recur (rest in)\n            (cons (first in) out))))", "user": "5d25f5e7e4b02ea6f0fb6a3a"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5d2e5065e4b01671435dbcae"}, {"problem": 23, "code": "(fn [coll]\n      (loop [coll coll\n             reversed (empty coll)]\n        (if (empty? coll)\n          reversed\n          (recur (rest coll) (cons (first coll) reversed)))))", "user": "55b7f263e4b01b9910ae29b4"}, {"problem": 23, "code": "(fn foo [x] (if (empty? x) [] (conj (foo (rest  x)) (first x))))", "user": "5d2e39d8e4b01671435dbcaa"}, {"problem": 23, "code": "#(reduce (fn [acc x] (cons x acc)) [] %)", "user": "51bd78c3e4b0ff155d51d2b0"}, {"problem": 23, "code": "(fn [coll]\n  (reduce #(conj %1 %2) '() coll))", "user": "5d301c95e4b01671435dbcca"}, {"problem": 23, "code": "(fn  [xs]\n  (let [ys (seq xs)\n        n (count ys)\n        idx (iterate dec (dec n))]\n  (map (partial nth ys) (take n idx))))", "user": "5d30ba40e4b01671435dbcd4"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5d3006dde4b01671435dbcc9"}, {"problem": 23, "code": "(fn r ([a] (r a '()))\n  ([a re] \n      (if (= a '()) re\n        (r \n         (rest a)\n         (conj re (first a))))))", "user": "5707da27e4b0b0fb43fd0692"}, {"problem": 23, "code": "(fn [l]\n  (sort (fn [a b] (compare b a)) l))", "user": "5d27cf23e4b092dab7f59c74"}, {"problem": 23, "code": "reduce conj ()", "user": "5c83379ce4b0c8042a70ce49"}, {"problem": 23, "code": "reduce (fn[coll n ] (conj coll n) ) ()", "user": "5cf53196e4b087f62be35a94"}, {"problem": 23, "code": "#(loop [c % r ()] (if (empty? c) r (recur (rest c) (conj r (first c)))))", "user": "5d35fb9be4b01671435dbd1c"}, {"problem": 23, "code": "#((fn [items](loop [i 0 ritems items rev_seq (empty items)] (if (= (empty items) ritems) rev_seq (recur (inc i)(rest ritems)(cons (first ritems) rev_seq)) ))) ((fn [items] (seq items)) %))", "user": "5d363543e4b01671435dbd20"}, {"problem": 23, "code": "#(into () %)", "user": "5d370811e4b01671435dbd2d"}, {"problem": 23, "code": "#(reduce (\n          (fn [f]\n            (fn [x y] (f y x)))\n          cons) [] %)", "user": "54be7c0de4b0ed20f4ff6eec"}, {"problem": 23, "code": "(fn [coll] (reduce conj '() coll))", "user": "5d273ef8e4b092dab7f59c69"}, {"problem": 23, "code": "(fn [x]\n  (loop [a x\n         b '()]\n  \t(if (empty? a)\n    \tb\n    \t(recur (rest a) (conj b (first a))))))", "user": "5d371b6fe4b01671435dbd31"}, {"problem": 23, "code": "reduce conj '()", "user": "5d35f997e4b01671435dbd1a"}, {"problem": 23, "code": "#(loop [input % reversed '()] \n   (if (empty? input)\n     reversed\n     (recur (rest input) (conj reversed (first input)))))", "user": "58b997afe4b0888cdc949cd1"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "5d378839e4b01671435dbd3d"}, {"problem": 23, "code": "(fn [lst]\n((fn [lst acc]\n  (if (empty? lst)\n    acc\n    (recur (rest lst) (conj acc (first lst))))) lst '()))", "user": "5d398d4de4b01671435dbd53"}, {"problem": 23, "code": "#(into () %)", "user": "5d3af639e4b01671435dbd5f"}, {"problem": 23, "code": "(fn [coll] (reduce conj () coll))", "user": "5d348d3de4b01671435dbd0a"}, {"problem": 23, "code": "(fn [s]\n  (loop [ss s\n         rr nil]\n    (if (= (count ss) 0)\n      rr\n      (recur (rest ss) (cons (first ss) rr)))))", "user": "5d3ae729e4b01671435dbd5d"}, {"problem": 23, "code": "reduce conj ()", "user": "598601f9e4b021a7a535fe79"}, {"problem": 23, "code": "(fn [xs]\n  (let [my-reverse-aux\n        (fn [xs acc]\n          (if (empty? xs)\n            acc\n            (recur (rest xs) (conj acc (first xs)))))]\n    (my-reverse-aux xs '())))", "user": "5d3e66d4e4b01671435dbd72"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5d3fa930e4b05dd059a5435f"}, {"problem": 23, "code": "#(loop [from %\n        target '()]\n   (if (empty? from)\n     target\n     (recur (rest from) (cons (first from) target))))", "user": "5d2c779be4b01671435dbc8d"}, {"problem": 23, "code": "reduce (fn [acc x] (cons x acc)) '()", "user": "5d404586e4b05dd059a54363"}, {"problem": 23, "code": "#(loop [test-seq %\n        result '()]\n   (if-not (empty? test-seq)\n     (recur (rest test-seq) (conj result (first test-seq)))\n     (if (vector? %)\n       (vec result)\n       result)))", "user": "5d3f50d7e4b09d9322bc20a6"}, {"problem": 23, "code": "(fn f [x]\n  (if (= 1 (count x))\n    (list (first x))\n    (conj (f (butlast x)) (last x))))", "user": "5cacc9e0e4b026601754b862"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5cd4f7c5e4b0ccb06196292a"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5cda0e26e4b05ee0cb311710"}, {"problem": 23, "code": "(fn rev [seq]\n  (if (empty? seq)\n    seq\n    (cons (last seq) (rev (take (dec (count seq)) seq)))))", "user": "5d323149e4b01671435dbce9"}, {"problem": 23, "code": "#(reduce (fn ([c v] (cons v c))) (list) %)", "user": "5d41de31e4b05dd059a54379"}, {"problem": 23, "code": "(fn rev [coll]\n    (if (empty? coll)\n      []\n      (cons (last coll) (rev (butlast coll)))))", "user": "4fb41dace4b081705acca2aa"}, {"problem": 23, "code": "reduce conj '()", "user": "5d4320fde4b07c84aa5ae690"}, {"problem": 23, "code": "(fn rev [s] (if s (conj (rev (next s)) (first s)) []))", "user": "5d0bb4fae4b0cc9c91588237"}, {"problem": 23, "code": "(fn [l] (reduce conj '() (seq l)))", "user": "5d439775e4b07c84aa5ae696"}, {"problem": 23, "code": "reduce (fn [acc val] (concat [val] acc)) []", "user": "5d43ab45e4b07c84aa5ae698"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "5d37087ae4b01671435dbd2e"}, {"problem": 23, "code": "(fn [se] \n    (remove nil? (for [x (range (* -1 (count se)) 1)]\n        (get (into [] se) (* x -1))\n   ))\n)", "user": "5d3e8c3de4b01671435dbd73"}, {"problem": 23, "code": "#(into () %)", "user": "5ceb221ce4b0a17bb84e2bde"}, {"problem": 23, "code": "(fn [coll]\n  (loop [buff coll\n          result (list)]\n     (if (seq buff)\n       (recur (rest buff)\n              (conj result (first buff)))\n       result)))", "user": "5d431c77e4b07c84aa5ae68f"}, {"problem": 23, "code": "reduce conj ()", "user": "5d45bd1de4b07c84aa5ae6a4"}, {"problem": 23, "code": "#(reduce conj () %1)", "user": "5d3b340fe4b01671435dbd63"}, {"problem": 23, "code": "(fn [x] (reduce conj '() x))", "user": "5d411bf5e4b05dd059a54371"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5d45749be4b07c84aa5ae6a2"}, {"problem": 23, "code": "(fn [x] (reduce conj `() x))", "user": "5d4256bae4b05dd059a5437d"}, {"problem": 23, "code": "#(reduce (fn [a b] (cons b a)) (empty %1) %1)", "user": "5d46a3c1e4b07c84aa5ae6ad"}, {"problem": 23, "code": "reduce conj ()", "user": "5d40f41ae4b05dd059a5436d"}, {"problem": 23, "code": "#(into '() %)", "user": "5d46fbc6e4b07c84aa5ae6af"}, {"problem": 23, "code": "(fn [coll]\n  (loop [c coll\n         res '()]\n    (if (empty? c)\n      res\n      (recur (rest c)\n             (conj res (first c))))\n   )\n )", "user": "5d07989ee4b0cc9c915881fb"}, {"problem": 23, "code": "#(into () %)", "user": "5d46969fe4b07c84aa5ae6ac"}, {"problem": 23, "code": "(fn [x] (reduce conj '() x))", "user": "5d465adae4b07c84aa5ae6a9"}, {"problem": 23, "code": "#(reduce (fn [acc x]\n          (cons x acc))\n        (empty %)\n        %)", "user": "5d48e6d3e4b0776584bd6f15"}, {"problem": 23, "code": "reduce conj '()", "user": "5d47f4dbe4b07c84aa5ae6b5"}, {"problem": 23, "code": "(fn [coll] (reduce conj '() coll))", "user": "5d40493ae4b05dd059a54364"}, {"problem": 23, "code": "(fn rev [l]\n  (if (empty? l) '()\n    (conj (rev (butlast l)) (last l))))", "user": "5d41f428e4b05dd059a5437b"}, {"problem": 23, "code": "reduce conj '()", "user": "5d40442ee4b05dd059a54362"}, {"problem": 23, "code": "(partial into ())", "user": "5d4b2155e4b0776584bd6f28"}, {"problem": 23, "code": "(fn [coll]\n  (into '() coll))", "user": "52ca6520e4b071a8d36bd3e0"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "59ea07c9e4b0249b72820756"}, {"problem": 23, "code": "(fn [L]\n    (loop [Ret (empty L) First (first L) Rest (rest L) ]\n      (if (nil? First)\n        Ret\n        (recur (cons First Ret) (first Rest) (rest Rest) )\n      )\n    )\n  )", "user": "5d4a6c6ce4b0776584bd6f22"}, {"problem": 23, "code": "#(loop [col % result []] (if (empty? col) result (recur (drop-last col) (conj result (last col)))))", "user": "5d3adc7de4b01671435dbd5b"}, {"problem": 23, "code": "(fn rev [s] \n  (into () s))", "user": "5d48d5d1e4b0776584bd6f12"}, {"problem": 23, "code": "(fn [seq] (into '() seq))", "user": "5d4c4de9e4b0776584bd6f2f"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5bf06734e4b0a6d31fed2153"}, {"problem": 23, "code": "#(into () %)", "user": "5d4eb9c4e4b0776584bd6f48"}, {"problem": 23, "code": "(fn [s]\n  (loop [lst () myseq s]\n    (if (seq myseq)\n      (recur\n        (conj lst (first myseq))\n        (rest myseq))\n      lst)))", "user": "5ad76df9e4b0ea6055cfac18"}, {"problem": 23, "code": "reduce #(conj %1 %2) '()", "user": "5d4f199fe4b0776584bd6f4b"}, {"problem": 23, "code": "(fn [ls] \n  (reduce (fn [builder x] \n           (cons x builder))\n          []\n          ls))", "user": "5d48884ee4b07c84aa5ae6bb"}, {"problem": 23, "code": "(fn [x]\n  (loop [x x\n         acc (empty x)]\n    (if-not (empty? x)\n      (recur (rest x) (cons (first x) acc))\n      acc)))", "user": "5d41ac35e4b05dd059a54375"}, {"problem": 23, "code": "(fn my-rev [xs]\n  (if (empty? xs)\n    '()\n    (concat (my-rev (rest xs)) [(first xs)])\n    )\n  )", "user": "5d4c83b7e4b0776584bd6f34"}, {"problem": 23, "code": "(fn [myseq] (reduce conj () myseq))", "user": "56bff105e4b060a8e693e3a4"}, {"problem": 23, "code": "(fn [arr] (into '() arr))", "user": "5d2de4cde4b01671435dbca4"}, {"problem": 23, "code": "(fn [arr]\n   (let [listed (seq arr)]\n    (loop [results []\n           index   (- (count listed) 1)]\n      (println listed index results (count arr))\n      (if (< index 0)\n        results\n        (recur (conj results (nth listed index)) (- index 1))))))", "user": "5d51216ae4b0776584bd6f5b"}, {"problem": 23, "code": "(fn [my-list]\n  (loop [s-list my-list\n         ret-val nil]\n    (if (empty? s-list)\n      ret-val\n      (recur (rest s-list) (conj ret-val (first s-list))))))", "user": "5d520cabe4b0776584bd6f66"}, {"problem": 23, "code": "reduce conj '()", "user": "5d51377be4b0776584bd6f5d"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5d4fc160e4b0776584bd6f51"}, {"problem": 23, "code": "(fn [collection]\n  (reduce conj () collection))", "user": "5d42c88ae4b05dd059a5437e"}, {"problem": 23, "code": "(fn [s] \n  (reduce (fn [acc v] \n            (conj acc v)) \n          () \n          s))", "user": "5d53a59ae4b0776584bd6f72"}, {"problem": 23, "code": "into '()", "user": "5d52e78be4b0776584bd6f6b"}, {"problem": 23, "code": "(fn [thingy] (reduce (fn [reversed-thingy element] (cons element reversed-thingy)) (empty thingy) thingy))", "user": "533b6f01e4b0e30313ee6cce"}, {"problem": 23, "code": "reduce conj '()", "user": "5d47f45de4b07c84aa5ae6b4"}, {"problem": 23, "code": "(fn [coll] (reduce #(cons %2 %1) [] coll))", "user": "5d4f21f3e4b0776584bd6f4e"}, {"problem": 23, "code": "reduce #(conj %1 %2) '()\n\n;; Dear god.....\n;; reduce conj ()\n;; also works.  Seriously terse language :)\n;; Doh - I just wrapped 'reduce' in a lambda: over-thinking the problem.\n;; That'll be my excuse.", "user": "5d54af24e4b02ba5928a6809"}, {"problem": 23, "code": "reduce conj ()", "user": "5d55305ce4b02ba5928a680d"}, {"problem": 23, "code": "(fn my-reverse [xs]\n  (loop [xs xs\n         ys '()]\n    (if (empty? xs)\n      ys\n      (recur (rest xs) (cons (first xs) ys)))))", "user": "5d49ec5ee4b0776584bd6f1c"}, {"problem": 23, "code": "(fn mx\n                ([lis]\n                 (mx lis (count lis) 0 '()))\n                ([lis len count target]\n                 (if (= count len)\n                   target\n                   (mx (rest lis) len (inc count) (conj target (first lis))))\n                 )\n                )", "user": "5d4cf3e9e4b0776584bd6f38"}, {"problem": 23, "code": "(fn [xs] (reduce #(conj %1 %2) '() xs))", "user": "5d38a4dde4b01671435dbd4a"}, {"problem": 23, "code": "apply conj ()", "user": "5d20677be4b02ea6f0fb69d3"}, {"problem": 23, "code": "#(into () %)", "user": "5cf59deee4b087f62be35a9f"}, {"problem": 23, "code": "(fn rev [x]\n  (reduce conj () x))", "user": "5d590500e4b02ba5928a6824"}, {"problem": 23, "code": "(fn reverse-seq [seq]\n  (for [i (range (count seq) 0 -1)] (get (reduce conj [] seq) (- i 1)))\n)", "user": "5d58983fe4b02ba5928a6823"}, {"problem": 23, "code": "reduce (fn [c v] (cons v c)) []", "user": "5d4dd0b4e4b0776584bd6f40"}, {"problem": 23, "code": "(fn [lst]\n                    (loop [i lst newLst []]\n                     (cond (empty? i) newLst\n                       :else (recur (rest i)(cons (first i) newLst)))))", "user": "5c9da580e4b048ec896c5b12"}, {"problem": 23, "code": "reduce (fn [acc el] (vec (conj (seq acc) el))) []", "user": "5bdc4a76e4b0ed4b8aab4c30"}, {"problem": 23, "code": "(fn my-reverse\n  [coll]\n  (if (= (count coll) 1)\n    coll\n    (cons (last coll) (my-reverse (butlast coll)))))", "user": "5d5166d9e4b0776584bd6f5e"}, {"problem": 23, "code": "(fn rerev[s]\n  (loop [r s\n         n '()]\n    (if (empty? r)\n      n\n      (recur (rest r)(conj n (first r))))))", "user": "5d2a8ecce4b01671435dbc79"}, {"problem": 23, "code": "(fn rev \n    ([f r] (if (empty? f) r (rev (rest f) (conj r (first f)))))\n    ([f] (rev f ())))", "user": "5d5b06a9e4b02ba5928a683a"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5a5d1d50e4b0512ff01cd91c"}, {"problem": 23, "code": "#(into '() %)", "user": "5b4bfd04e4b02d533a91bca2"}, {"problem": 23, "code": "reduce conj '()", "user": "5d5502cbe4b02ba5928a680b"}, {"problem": 23, "code": "(fn\n  [lst]\n  (loop [l lst\n        acc nil]\n    (print l)\n   (if (empty? l)\n     acc\n     (recur (rest l) (cons (first l) acc))\n   \t)\n   )\n  )", "user": "5a7f77fae4b00b71e582a041"}, {"problem": 23, "code": "(fn [seq1]\n  (loop [seq1 seq1\n         answer '()]\n    (if (= '() seq1)\n      answer\n      (recur (rest seq1) (cons (first seq1) answer )))))", "user": "5d4df658e4b0776584bd6f41"}, {"problem": 23, "code": "reduce #(conj %1 %2) '()", "user": "5d5e0259e4b0c9e5857d4fef"}, {"problem": 23, "code": "reduce conj '()", "user": "5d5c6675e4b09db18d4482ec"}, {"problem": 23, "code": "reduce conj ()", "user": "5d5eb086e4b0c9e5857d4ff7"}, {"problem": 23, "code": "reduce conj ()", "user": "5d5daf87e4b0c9e5857d4fed"}, {"problem": 23, "code": "reduce conj '()", "user": "5c4be0bde4b0f9f7a8770e6c"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5d5e9f45e4b0c9e5857d4ff5"}, {"problem": 23, "code": "#(reduce conj (list) %)", "user": "5d517784e4b0776584bd6f60"}, {"problem": 23, "code": "#(into () %)", "user": "5d531d33e4b0776584bd6f6d"}, {"problem": 23, "code": "(fn [items]\n                   (loop [it items\n                          result []]\n                     (let [first (first it)]\n                       (if (nil? first)\n                         result\n                         (recur (rest it) (cons first result))))))", "user": "5d5c2730e4b09db18d4482ea"}, {"problem": 23, "code": "#(reduce (fn [x y] (cons y x)) nil %1)", "user": "5d6042f2e4b0c9e5857d5006"}, {"problem": 23, "code": "(partial into ())", "user": "5d609ddde4b0c9e5857d5008"}, {"problem": 23, "code": "#(if (set? %)\n   (into '() %)\n   (vec (into '() %)))", "user": "5d5ef0bce4b0c9e5857d4ffb"}, {"problem": 23, "code": "(fn n [s]\n    (loop [t s o '()]\n      (if (empty? t)\n        o\n        (recur (rest t) (conj o (first t)))\n        )))", "user": "5d52bf29e4b0776584bd6f69"}, {"problem": 23, "code": "#(reduce (fn [x y] (cons y x)) [] %)", "user": "507766e9e4b0fc74642bff61"}, {"problem": 23, "code": "(fn [s] (reduce (fn [set x]\n                 (conj set x))\n               '()\n               s))", "user": "5d615431e4b0c9e5857d5010"}, {"problem": 23, "code": "(fn f [s] (reduce conj '() s))", "user": "5d629ed9e4b0c9e5857d501d"}, {"problem": 23, "code": "(fn [coll]\n  \t(let [rev (fn [src dest]\n    \t(if (empty? src) dest\n        \t(recur (drop-last src) (concat dest [(last src)]))))]\n  \t(rev coll [])))", "user": "54fa32bae4b0cf870d934701"}, {"problem": 23, "code": "into (seq [])", "user": "5d62ce13e4b0c9e5857d501f"}, {"problem": 23, "code": "(fn [xs] ((fn [xs ys] (if (= (first xs) nil) ys\n                          (recur (rest xs) (conj ys (first xs))))) xs ()))", "user": "5d631376e4b0c9e5857d5023"}, {"problem": 23, "code": "(fn r [xs] (if (empty? xs) [] (cons (last xs) (r (butlast xs)))))", "user": "5d641841e4b0c9e5857d502e"}, {"problem": 23, "code": "(fn foo [x] \n  (if (empty? x)\n    '()\n    (cons (last x) (foo (butlast x)))\n  )\n)", "user": "5d63ba44e4b0c9e5857d5026"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5d61552ae4b0c9e5857d5011"}, {"problem": 23, "code": "(fn rev\n  ([lst] (rev lst '()))\n  ([lst res]\n   (if (empty? lst)\n     res\n     (rev (rest lst) (conj res (first lst))))))", "user": "5d64013ce4b0c9e5857d502d"}, {"problem": 23, "code": "#(reduce conj nil %)", "user": "5d63b06be4b0c9e5857d5025"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5d651553e4b0db5d338d15ca"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5d6523ace4b0db5d338d15cd"}, {"problem": 23, "code": "(fn reverse-seq [items]\n  (into '() items))", "user": "5d652873e4b0db5d338d15ce"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5d657de2e4b0db5d338d15da"}, {"problem": 23, "code": "#(loop [sq (vec %), c (dec (count %)), new_sq []]\n   (if (= c 0)\n        (conj new_sq (first sq))\n        (recur sq (dec c) (conj new_sq (nth sq c)))))", "user": "5d65c2e9e4b0db5d338d15dd"}, {"problem": 23, "code": "reduce conj '()", "user": "5c5e3af7e4b01df32ab732c6"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "5d65814be4b0db5d338d15db"}, {"problem": 23, "code": "reduce conj ()", "user": "5d64508de4b0c9e5857d5031"}, {"problem": 23, "code": "(fn [ls]\n  (loop [acc []\n         ls ls]\n    (if (empty? ls)\n      acc\n      (recur (conj acc (last ls))\n             (take (dec (count ls)) ls)))))", "user": "5d672bd7e4b0db5d338d15f1"}, {"problem": 23, "code": "into '()", "user": "5d5c549ee4b09db18d4482eb"}, {"problem": 23, "code": "reduce #(cons %2 %1) []", "user": "5d63f1c2e4b0c9e5857d502b"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5d67c955e4b0db5d338d15f7"}, {"problem": 23, "code": "(fn [x] (into '() x))", "user": "5d6537fce4b0db5d338d15cf"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5d68fc2fe4b0db5d338d1606"}, {"problem": 23, "code": "(fn [col] \n  (reduce (fn [value item] (concat (vector item) value)) [] col))", "user": "5d64ecb2e4b0c9e5857d5036"}, {"problem": 23, "code": "reduce conj ()", "user": "5d6552b5e4b0db5d338d15d2"}, {"problem": 23, "code": "(fn [test]\n  (reduce conj () test))", "user": "5d6932e6e4b0db5d338d1609"}, {"problem": 23, "code": "reduce conj ()", "user": "5d68bfd0e4b0db5d338d1602"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5d69a6e1e4b0db5d338d160e"}, {"problem": 23, "code": "(fn [coll] (reduce (fn [xs x] (cons x xs)) [] coll))", "user": "5d68f5e6e4b0db5d338d1605"}, {"problem": 23, "code": "(fn rev\n  ([xs] (rev xs '()))\n  ([xs ys] (if (empty? xs) ys (rev (rest xs) (conj ys (first xs)) )))\n  )", "user": "5d67bfe6e4b0db5d338d15f6"}, {"problem": 23, "code": "reduce #(cons %2 %) []", "user": "5d6a9b1ee4b04d129b00f29c"}, {"problem": 23, "code": "(fn [l]\n  ((fn [from to]\n     (if (empty? from)\n       to\n       (recur (rest from) (conj to (first from))))) l '()))", "user": "5d6a975be4b04d129b00f29b"}, {"problem": 23, "code": "#(into () %)", "user": "5d6b0fc1e4b04d129b00f2a1"}, {"problem": 23, "code": "reduce conj nil", "user": "5d6b5c42e4b04d129b00f2a7"}, {"problem": 23, "code": "(fn [coll]\n  ((fn inner [inner-coll reversed] (if (empty? inner-coll)\n                               reversed\n                               (inner (drop-last inner-coll) (conj reversed (last inner-coll))))) coll []))", "user": "5d6b21efe4b04d129b00f2a3"}, {"problem": 23, "code": "( fn myfun ([l] (myfun l [])) ([l a] (if (nil? (first l)) a (myfun (rest l) (concat [(first l)] a)))))", "user": "5d2f5ba5e4b01671435dbcbf"}, {"problem": 23, "code": "reduce conj ()", "user": "54ca05a6e4b057c6fda3a24e"}, {"problem": 23, "code": "into '()", "user": "5d662fb5e4b0db5d338d15e1"}, {"problem": 23, "code": "(fn [x] (reduce (fn [acc, val] (conj acc val)) '() x))", "user": "5d6d2172e4b04d129b00f2b9"}, {"problem": 23, "code": "(fn r [s]\n  (loop [s s\n         acc []]\n    (if (next s)\n      (recur (rest s) (cons (first s) acc))\n      (cons (first s) acc))))", "user": "5d6d76ffe4b04d129b00f2be"}, {"problem": 23, "code": "#(loop [x (vec %) y []]\n        (if (empty? x)\n            y\n            (recur (pop x) (conj y (peek x)))\n            )\n        )", "user": "5d6d7e0de4b04d129b00f2bf"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5d6d4463e4b04d129b00f2bd"}, {"problem": 23, "code": "reduce conj ()", "user": "5d6691cee4b0db5d338d15e9"}, {"problem": 23, "code": "(fn\n   [lst]\n   (loop [lst lst nlst []]\n     (if (empty? lst)\n       nlst\n       (recur (pop (vec lst)) (conj nlst (last lst))))))", "user": "5d6e4d1ee4b04d129b00f2c4"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5d66aea7e4b0db5d338d15ec"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5c9a5cf4e4b048ec896c5aad"}, {"problem": 23, "code": "#(reduce \n   (fn [r n] \n     (conj r n) \n     )\n   '() %\n   )", "user": "5d5b2678e4b06a698e928ee2"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5d6f063de4b04d129b00f2d1"}, {"problem": 23, "code": "(fn rvrs [s] (if (empty? s) [] (conj (rvrs (rest s)) (first s))))", "user": "5d6f0533e4b04d129b00f2d0"}, {"problem": 23, "code": "(fn my-reverse\n  [some-seq]\n  (loop [ret-seq [] remain some-seq]\n    (if (seq remain)\n      (recur (conj ret-seq (last remain))\n              (remove #{(last remain)} remain))\n      ret-seq)))", "user": "5d6e5ec6e4b04d129b00f2c7"}, {"problem": 23, "code": "(fn [inputColl]\n   (reduce conj '() inputColl)\n)", "user": "5cf7215ce4b0b71b1d808a67"}, {"problem": 23, "code": "reduce conj ()", "user": "5d6e5b53e4b04d129b00f2c6"}, {"problem": 23, "code": "reduce conj ()", "user": "5d6d2e11e4b04d129b00f2ba"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5d704f7ee4b04d129b00f2d7"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5d728116e4b02e6b30c9350f"}, {"problem": 23, "code": "(fn notreverse\n  [coll]\n  (reduce (fn [res el] (conj res el)) '() coll))", "user": "5d5950c1e4b02ba5928a6827"}, {"problem": 23, "code": "(fn [y]\n\t(loop [l y r '()]\n      (if (empty? (seq l))\n        r\n        (recur (rest l) (conj r (first l)))\n      )\n    )\n)", "user": "5d6fae1ee4b04d129b00f2d4"}, {"problem": 23, "code": "(fn [sq]\n  (reduce\n   (fn [acc current]\n     (cons current acc))\n   []\n   sq))", "user": "5d73fb31e4b02e6b30c93516"}, {"problem": 23, "code": "reduce #(concat (list %2) %1) []", "user": "5d764e52e4b02e6b30c93524"}, {"problem": 23, "code": "sort #(compare %2 %1)", "user": "5d6e6a2de4b04d129b00f2c8"}, {"problem": 23, "code": "(fn co\n  [se]\n  (loop [x se result []]\n    (if (not-empty x)\n      (recur (drop-last x) (conj result (last x)))\n      result)))", "user": "5d6febe6e4b04d129b00f2d5"}, {"problem": 23, "code": "(fn kaanna [x]\n  (if (empty? x)\n    x\n    (concat (kaanna (rest x)) (list (first x)))\n  )\n)", "user": "5d77a828e4b02e6b30c93531"}, {"problem": 23, "code": "#(apply (if (vector? %) vector list) (reduce conj () %))", "user": "5c56e264e4b0fb8c5ffd9a39"}, {"problem": 23, "code": "reduce conj ()", "user": "5d70f310e4b04d129b00f2dc"}, {"problem": 23, "code": "#(loop [l % res (empty %)]\n   (if (empty? l) res\n     (recur (rest l) (cons (first l) res))\n           ))", "user": "5d68e60be4b0db5d338d1603"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5d76cb59e4b02e6b30c93528"}, {"problem": 23, "code": "#(reduce (fn [a b] (cons b a)) [] %)", "user": "5d6c2aace4b04d129b00f2ad"}, {"problem": 23, "code": "reduce conj '()", "user": "5a7de7a3e4b03baeef927702"}, {"problem": 23, "code": "(fn [s]\n  (if (vector? s)\n    (into [] (into '() s))\n    (into '() s)\n  )\n)", "user": "5d72ad8fe4b02e6b30c93512"}, {"problem": 23, "code": "(fn my-reverse \n  ([sq] \n   (my-reverse sq [])) \n  ([sq rsq] \n   (if (empty? sq) \n     rsq \n     (my-reverse (rest sq) (cons (first sq) rsq)))))", "user": "5d7a748ce4b02e6b30c93547"}, {"problem": 23, "code": "#(loop [rs ()\n        col %]\n   (if (next col)\n     (recur (conj rs (first col)) (next col))\n     (conj rs (last col))))", "user": "4ec549e1535d6d7199dd3691"}, {"problem": 23, "code": "(fn\n  [input]\n\t(into (seq []) input))", "user": "5d78d680e4b02e6b30c9353c"}, {"problem": 23, "code": "(fn [coll]\n  (loop [reversed (seq []) el coll]\n    (if (empty? el) \n      reversed\n      (recur (conj reversed (first el)) (rest el)))))", "user": "5d7b90ede4b02e6b30c93552"}, {"problem": 23, "code": "reduce conj nil", "user": "5d7bd68ee4b02e6b30c93554"}, {"problem": 23, "code": "(fn [v]\n  (if (vector? v)\n    (into [] (into '() v))\n    (into '() v)))", "user": "5d7bd708e4b02e6b30c93555"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5adb4ffbe4b0837691e92bed"}, {"problem": 23, "code": "(fn [x] (loop [outseq [] x x] (if (empty? x) outseq (recur (cons (first x) outseq) (rest x)))))", "user": "5d7158f3e4b04d129b00f2e1"}, {"problem": 23, "code": "#(reduce conj () %1)", "user": "5d1609f9e4b0902706380dd9"}, {"problem": 23, "code": "(fn my-rev [l]\n  (if (empty? l)\n    '()\n    (cons (last l) (my-rev (drop-last l)))))", "user": "5d7d17ece4b02e6b30c93558"}, {"problem": 23, "code": "(fn [l]\n  (reduce (fn [acc x] (cons x acc)) () l))", "user": "5d4a6511e4b0776584bd6f21"}, {"problem": 23, "code": "into '()", "user": "5d809b4fe4b0915913b1d36c"}, {"problem": 23, "code": "(fn [x] \n  (reduce conj '() x))", "user": "5d7faa52e4b0915913b1d365"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5d81b40ce4b0915913b1d379"}, {"problem": 23, "code": "(fn srt [s]\n  (if (= 1 (count s))\n    s\n   (concat (srt (rest s)) [(first s)])))", "user": "5d81c244e4b0915913b1d37a"}, {"problem": 23, "code": "reduce conj '()", "user": "5d81fc4fe4b0915913b1d37d"}, {"problem": 23, "code": "reduce conj ()", "user": "5d81eba4e4b0915913b1d37b"}, {"problem": 23, "code": "#(loop [coll %, acc (empty %)]\n   (if (empty? coll)\n     acc\n     (recur (rest coll) (cons (first coll) acc))))", "user": "5d7eaf5fe4b0492f5d910fc3"}, {"problem": 23, "code": "reduce conj ()", "user": "5d828b7ee4b0915913b1d382"}, {"problem": 23, "code": "reduce conj '()", "user": "5d80789ee4b0915913b1d36a"}, {"problem": 23, "code": "reduce conj()", "user": "5d51884be4b0776584bd6f61"}, {"problem": 23, "code": "(fn [x]\n  (loop [newlist [] left x]\n    (if (empty? left)\n      newlist\n      (recur (conj newlist (last left)) (butlast left))\n    )\n  )\n)", "user": "5d62da51e4b0c9e5857d5020"}, {"problem": 23, "code": "(fn [seq] (reduce conj (list) seq))", "user": "5d84545ee4b0915913b1d38b"}, {"problem": 23, "code": "(fn [x](reduce conj () x))", "user": "5d87cc7ee4b0915913b1d3a3"}, {"problem": 23, "code": "reduce conj ()", "user": "54d187b7e4b0e8a36923e5e4"}, {"problem": 23, "code": "reduce conj ()", "user": "5d884d76e4b0915913b1d3a7"}, {"problem": 23, "code": "#(loop [list % x '()]\n  (if (empty? list) x \n      (recur (rest list) (conj x (first list))))\n  )", "user": "5d88a22de4b0915913b1d3ab"}, {"problem": 23, "code": "(partial \n\t(fn [res coll] \n      (if (empty? coll) res\n        (recur (cons (first coll) res ) (rest coll) ))) \n \n '())", "user": "5d89de0de4b0915913b1d3c0"}, {"problem": 23, "code": "(fn doreverse\n  ([input] (doreverse input '()))\n  ([input output] (if (empty? input) \n                    (into [] output)\n                    (doreverse (rest input) (cons (first input) output))\n                   )\n   )\n)", "user": "5d79165ae4b02e6b30c9353e"}, {"problem": 23, "code": "(fn rev [lst]\n  (if (= 1 (count lst))\n    lst\n    (concat (take-last 1 lst) (rev (butlast lst)))))", "user": "5d8a3b3ee4b0915913b1d3c8"}, {"problem": 23, "code": "into ()", "user": "5d8542c9e4b0915913b1d391"}, {"problem": 23, "code": "reduce conj ()", "user": "5d88c6a3e4b0915913b1d3ad"}, {"problem": 23, "code": "(fn NewReverse [lis]\n  (if (empty? lis)\n    lis\n    (concat\n      (NewReverse (rest lis))\n      (list (first lis))\n    )\n  )\n)", "user": "5d8b2c63e4b0915913b1d3d0"}, {"problem": 23, "code": "(fn [xs] (loop [ls xs result []]\n           (if ls\n             (recur (next ls) (cons (first ls) result))\n             result)))", "user": "5d84fccae4b0915913b1d390"}, {"problem": 23, "code": "reduce (fn[axx v](conj axx v)) '()", "user": "5d8aad1ce4b0915913b1d3cd"}, {"problem": 23, "code": "(fn [s]\n    (loop [s s, result ()]\n      (if (empty? s)\n        result\n        (recur (rest s) (conj result (first s))))))", "user": "5d8b4960e4b0915913b1d3d3"}, {"problem": 23, "code": "(fn my-reverse\n  ([coll]\n   (my-reverse coll '()))\n  ([coll rev-coll]\n   (if (empty? coll)\n     rev-coll\n     (my-reverse (rest coll) (conj rev-coll (first coll))))))", "user": "5d896a64e4b0915913b1d3b8"}, {"problem": 23, "code": "reduce (fn [acc current] (cons current acc)) []", "user": "5d8c7a16e4b0915913b1d3e0"}, {"problem": 23, "code": "(fn my-reverse-v2\n  [items]\n  (let [start []]\n    (loop [col start r items]\n      (if (not (empty? r))\n        (recur (into [(first r)] col) (rest r))\n        col)\n      )))", "user": "5d80f328e4b0915913b1d372"}, {"problem": 23, "code": "#(reduce (fn [value coll-item] (conj value coll-item)) '() %)", "user": "5d8ce0e6e4b0915913b1d3e5"}, {"problem": 23, "code": "#(loop [coll %\n           reved (empty coll)]\n      (if (= 0 (count coll))\n        reved\n        (recur (rest coll) (cons (first coll) reved))))", "user": "5d887d27e4b0915913b1d3a8"}, {"problem": 23, "code": "(fn [x] (loop [result '() input x] (if (empty? input) result (recur (conj result (first input)) (rest input)))))", "user": "58d28e14e4b03c36ff7e5902"}, {"problem": 23, "code": "reduce (fn [acc x] (cons x acc)) []", "user": "5d927df4e4b0915913b1d40f"}, {"problem": 23, "code": "(fn my-reverse [xs]\n  (if (empty? xs) [] (conj (my-reverse (rest xs)) (first xs) ) ) )", "user": "5d91acb8e4b0915913b1d406"}, {"problem": 23, "code": "(fn [xs]\n  (loop [new [] old xs]\n    (if (empty? old) \n      new\n      (recur (conj new (last old)) (drop-last old))\n      )))", "user": "5d88d820e4b0915913b1d3b1"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5d84f5e6e4b0915913b1d38f"}, {"problem": 23, "code": "(fn rev [l]\n  (if (empty? l) '()\n      (concat (rev (rest l)) (list (first l)))))", "user": "5d83b9aae4b0915913b1d386"}, {"problem": 23, "code": "(fn rvs\n  [original]\n  (if (empty? original)\n\toriginal\n    (cons (last original) (rvs (butlast original)))))", "user": "5d94816ce4b0d3f9b434ad28"}, {"problem": 23, "code": "into '()", "user": "5d915f01e4b0915913b1d401"}, {"problem": 23, "code": "(fn  \n\t[inputThing]\n\n\t(loop [i 0  tmpList (into [] inputThing) rstList []]\n\t\t(if (= (count  tmpList) i)\n\t\t\trstList\n\t\t\t(recur (inc i) tmpList (cons  (nth tmpList i) rstList))\n\n\t\t)\n\t)\n\t)", "user": "5d8b3d5be4b0915913b1d3d1"}, {"problem": 23, "code": "(fn [coll]\n  (reduce\n   (fn [reversed-coll value]\n     (conj reversed-coll value))\n   '()\n   coll))", "user": "5d90190ce4b0915913b1d3f7"}, {"problem": 23, "code": "(fn\n\t[coll]\n\t\t(reduce conj '()\n\t\t\t\t\t\t(map (fn [x] x) coll)))", "user": "5d797deee4b02e6b30c93541"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5d9a06f9e4b0d3f9b434ad43"}, {"problem": 23, "code": "reduce conj ()", "user": "5d99dc47e4b0d3f9b434ad42"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5d9aeae5e4b0d3f9b434ad4a"}, {"problem": 23, "code": "into ()", "user": "5d9c1226e4b0d3f9b434ad51"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "5d9bda4fe4b0d3f9b434ad50"}, {"problem": 23, "code": "(fn [lst] (reduce #(cons %2 %1) '() lst))", "user": "5d9475e4e4b0d3f9b434ad25"}, {"problem": 23, "code": "(fn [coll] (reduce (fn [coll val] (cons val coll)) [] coll))", "user": "5d97b602e4b0d3f9b434ad3a"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "570d4c30e4b0b0fb43fd06da"}, {"problem": 23, "code": "#(into () %)", "user": "5d96edeae4b0d3f9b434ad35"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5d94a878e4b0d3f9b434ad29"}, {"problem": 23, "code": "(fn [l] \n  (loop [r '() ll l]\n    (if (= 0 (count ll))\n      r\n      (recur (cons (first ll) r) (rest ll)\n     )\n  )\n )\n  )", "user": "5d94fdf9e4b0d3f9b434ad2b"}, {"problem": 23, "code": "(\n fn f [s]\n \t(if (= (count s) 1) s (cons (last s) (f (take (- (count s) 1) s)))))", "user": "5d9ccf36e4b0eb781811cdb0"}, {"problem": 23, "code": "(fn [seq] (into '()  seq))", "user": "5d94753de4b0d3f9b434ad24"}, {"problem": 23, "code": ";(fn [arr] (map #(nth (seq arr) %) (range (dec (count arr)) -1 -1) ))\n(fn [arr] (map #(-> arr seq (nth %)) (-> arr count dec (range -1 -1)) ))", "user": "5d9e7971e4b000c986472bc1"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5d9c8a85e4b0eb781811cdad"}, {"problem": 23, "code": "(fn [l] (reduce (fn [r c] (concat [c] r)) [] l))", "user": "5cf6522be4b0b71b1d808a58"}, {"problem": 23, "code": "(fn [xs]\n  (loop [ys (list)\n         olds xs]\n    (if (first olds) \n      (recur (conj ys (first olds)) (rest olds)) \n      ys)\n    \n    \n    ))", "user": "5da07698e4b000c986472bd3"}, {"problem": 23, "code": "reduce #(conj %1 %2) '()", "user": "5da05bcce4b000c986472bd0"}, {"problem": 23, "code": "reduce conj '()", "user": "5d6c2b80e4b04d129b00f2ae"}, {"problem": 23, "code": "#(into () %)", "user": "5d9e1006e4b0eb781811cdbd"}, {"problem": 23, "code": "#(into () %)", "user": "58800a48e4b0f1effa3b7604"}, {"problem": 23, "code": "(fn [l] (let [r (atom []) c (atom 0) conv (seq l)]\n                    (while (< @c (count l))\n                      (swap! r conj (nth conv (- (count conv) (inc @c))))\n                      (swap! c + 1)\n                      )\n                    @r))", "user": "5d974b1de4b0d3f9b434ad36"}, {"problem": 23, "code": "#(into '() %)", "user": "5da07d10e4b000c986472bd5"}, {"problem": 23, "code": "(fn my-reverse[s]\n  (loop [r s\n         n '()]\n    (if (empty? r)\n      n\n      (recur (rest r) (conj n (first r))))))", "user": "5da44d35e4b000c986472bf1"}, {"problem": 23, "code": "(fn rev [xs] (when xs (cons (last xs) (rev (butlast xs)))))", "user": "5da4fc6be4b000c986472bff"}, {"problem": 23, "code": "reduce conj '()", "user": "5da20e73e4b000c986472be1"}, {"problem": 23, "code": "#(loop [s % r '()]\n   (if (empty? s)\n     r\n     (recur (rest s) (cons (first s) r))))", "user": "5d931a58e4b0d3f9b434ad10"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5da7176ae4b000c986472c13"}, {"problem": 23, "code": "(fn [l] (loop [in l out '()] (if (empty? in) out (recur (rest in) (conj out (first in))))))", "user": "5da71eaee4b000c986472c15"}, {"problem": 23, "code": "#(reduce (fn [xs x] (cons x xs)) [] %)", "user": "5da760ebe4b000c986472c1a"}, {"problem": 23, "code": "(partial into '())", "user": "5da8fa72e4b000c986472c2d"}, {"problem": 23, "code": "(fn [coll] ( reduce #(cons %2 %1) [] coll ))", "user": "5da975b9e4b000c986472c32"}, {"problem": 23, "code": "(fn joo [listy]\n   (when (> (count listy) 0)\n     (conj (joo (drop-last listy)) (last listy))))", "user": "5da71a00e4b000c986472c14"}, {"problem": 23, "code": "(fn  [s]\n  (let [v (vec s)] (map v (range (dec (count v)) -1 -1))))", "user": "5d89427ae4b0915913b1d3b5"}, {"problem": 23, "code": "#(loop\n   [acc '()\n    s %]\n   (if (empty? s)\n     acc\n     (recur (conj acc (first s))\n            (rest s))))", "user": "5daa1fc8e4b000c986472c3e"}, {"problem": 23, "code": "reduce #(cons %2 %1) nil", "user": "5da8b8ece4b000c986472c28"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "55f335f4e4b06e875b46ce57"}, {"problem": 23, "code": "(fn [x](reduce conj (list (first x)) (rest x)))", "user": "5dab11cde4b000c986472c45"}, {"problem": 23, "code": "#(->> (map-indexed (fn [i x] [i x]) %)\n      (sort-by first >)\n      (map second))", "user": "5d9475e9e4b0d3f9b434ad26"}, {"problem": 23, "code": "(fn [x] (reduce conj () x))", "user": "5da8e170e4b000c986472c29"}, {"problem": 23, "code": "(fn [coll] \n  (reduce (fn [acc v] (conj acc v)) () coll))", "user": "58ac0612e4b0005cfeb1a73c"}, {"problem": 23, "code": "reduce conj ()", "user": "5daa0d56e4b000c986472c3c"}, {"problem": 23, "code": "(fn [coll](let [inte (fn a [coll ret] (cond\n                                            (empty? coll) ret\n                                            :else (a (rest coll) (cons (first coll) ret) ) ))]\n              (inte coll [])))", "user": "5dadf73ee4b0f8c104ccfc86"}, {"problem": 23, "code": "reduce conj  '()", "user": "5da98129e4b000c986472c33"}, {"problem": 23, "code": "(fn [lat]\n  (into '() lat))", "user": "5daeb6bce4b0f8c104ccfc8b"}, {"problem": 23, "code": "reduce conj '()", "user": "5daa1f69e4b000c986472c3d"}, {"problem": 23, "code": "(fn rev [coll]\n  (if (empty? coll)\n    coll\n    (concat (rev (rest coll)) [(first coll)])))", "user": "5da9662ce4b000c986472c30"}, {"problem": 23, "code": "(fn [coll] (reduce conj '() coll))", "user": "5dad3bb0e4b0f8c104ccfc7e"}, {"problem": 23, "code": "(fn [x]\n  (loop [coll x reversed nil]\n    (if (empty? coll)\n      reversed\n      (recur (rest coll) (cons (first coll) reversed)))))", "user": "5da9d89ae4b000c986472c3b"}, {"problem": 23, "code": "#(reduce conj '() %1)", "user": "5d7aa22ee4b02e6b30c9354e"}, {"problem": 23, "code": "(fn [xs]\n  (reduce (fn [acc x] (cons x acc))\n          nil\n          xs))", "user": "5db0d470e4b0f8c104ccfc9e"}, {"problem": 23, "code": "(fn rev [lst]\n (loop [rst lst\n         new '()] \n    (if (empty? rst)\n      new\n      (recur (rest rst) (conj new (first rst))))))", "user": "5d9515a9e4b0d3f9b434ad2c"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "5db0bcc9e4b0f8c104ccfc9d"}, {"problem": 23, "code": "reduce conj '()", "user": "5daec18ae4b0f8c104ccfc8c"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "5db1969be4b010eb3c36cd06"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5daed892e4b0f8c104ccfc8f"}, {"problem": 23, "code": "(fn [coll]\n  (loop [result []\n         remaining (into [] coll)]\n    (if (empty? remaining)\n      result\n      (recur (conj result (peek remaining))\n             (pop remaining)))))", "user": "5db35c6ee4b010eb3c36cd20"}, {"problem": 23, "code": "reduce conj ()", "user": "590b2d92e4b047aa04b199cf"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5db4bd07e4b010eb3c36cd2c"}, {"problem": 23, "code": "#(reduce (fn [x y] (conj x y)) '() %)", "user": "5cbf5148e4b0ccb06196276a"}, {"problem": 23, "code": "(fn my-reverse [coll]\n  (if (empty? coll)\n    []\n    (conj (my-reverse (rest coll)) (first coll))))", "user": "5db5d09be4b010eb3c36cd31"}, {"problem": 23, "code": ";(fn [ls] (reduce conj '() ls))\n;#(apply conj '() %) \t; flatten list into sequence arguments\n#(reduce conj '() %)\t; apply conj (conj (conj ..", "user": "5d9a49c4e4b0d3f9b434ad45"}, {"problem": 23, "code": "(fn [coll]\n  (loop [c coll r '()]\n    (if (empty? c)\n      r\n      (recur (rest c) (conj r (first c))))))", "user": "5db6cc4ae4b010eb3c36cd3b"}, {"problem": 23, "code": "(fn [seq] (reduce conj () seq))", "user": "5db485dfe4b010eb3c36cd26"}, {"problem": 23, "code": "#(into '() %)", "user": "5db68091e4b010eb3c36cd3a"}, {"problem": 23, "code": "(fn rev-seq [s]\n  (into '() s))", "user": "5db826b4e4b010eb3c36cd47"}, {"problem": 23, "code": "#(into [] (reduce conj '() %))", "user": "5db6f832e4b010eb3c36cd3d"}, {"problem": 23, "code": "#(reduce conj nil %)", "user": "5db861bce4b010eb3c36cd4b"}, {"problem": 23, "code": "#(into () %)", "user": "5db9a6c3e4b010eb3c36cd56"}, {"problem": 23, "code": "(fn rev [coll]\n   (reduce conj () coll))", "user": "5dba04cde4b010eb3c36cd5b"}, {"problem": 23, "code": "#(reduce conj () %1)", "user": "5db8663ce4b010eb3c36cd4c"}, {"problem": 23, "code": "#(apply conj '() %)", "user": "5dbb3667e4b09f47823971a6"}, {"problem": 23, "code": "reduce conj ()", "user": "5d9e8e40e4b000c986472bc2"}, {"problem": 23, "code": "(fn[x](reduce (fn [op x]\n             (conj op x))\n           ()\n           x))", "user": "5d8c8175e4b0915913b1d3e1"}, {"problem": 23, "code": "(fn reverse-me [input] \n  (let [x (count input) my-vec (vec input)]\n    (for [y (range (- x 1) -1 -1)]\n      (nth my-vec y)\n    )\n    )\n  )", "user": "5265337fe4b03e8d9a4a7104"}, {"problem": 23, "code": "(fn [s] (vec (reduce conj '() (seq s))))", "user": "5d6bff25e4b04d129b00f2ab"}, {"problem": 23, "code": "(fn rev [x] (if (empty? (rest x)) (conj [] (first x)) (conj (rev (rest x)) (first x))))", "user": "5dbd86bce4b09f47823971bf"}, {"problem": 23, "code": "#(reduce (fn [q c] (conj q c)) '() %)", "user": "5dbd51cfe4b09f47823971bb"}, {"problem": 23, "code": "reduce #(cons %2 %1) []", "user": "5dbe63bde4b09f47823971c7"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "5dbf0281e4b0e59a23173d75"}, {"problem": 23, "code": "(fn imp [x] (if (empty? x)  x  (concat (imp (rest x)) (list (first x)))))", "user": "5dbbf77ce4b09f47823971ab"}, {"problem": 23, "code": "reduce conj ()", "user": "5dbc3ab9e4b09f47823971b1"}, {"problem": 23, "code": "reduce conj ()", "user": "5dbb5200e4b09f47823971a9"}, {"problem": 23, "code": "into '()", "user": "58c7a80fe4b021aa9917ed7b"}, {"problem": 23, "code": "(fn [coll] (reduce conj '() coll))", "user": "5dc02058e4b0e59a23173d7c"}, {"problem": 23, "code": ";;#(loop [nsq []\n;;        rst %]\n;;   (if (empty? rst)\n;;     nsq\n;;     (recur (cons (first rst) nsq) (rest rst)))) \nreduce #(cons %2 %1) []", "user": "5dbac8ebe4b010eb3c36cd62"}, {"problem": 23, "code": "#(loop [coll %\n        result ()]\n   (if (empty? coll)\n     result\n     (recur (rest coll) (conj result (first coll)))))", "user": "5db19599e4b010eb3c36cd05"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5814dcf8e4b0f478707a062f"}, {"problem": 23, "code": "#(loop [ cl % re []]\n   (cond\n    (first cl) \n      (recur (rest cl) (cons (first cl) re))\n    :else re))", "user": "5dc12b0ae4b0e59a23173d84"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5db1e852e4b010eb3c36cd0a"}, {"problem": 23, "code": "(fn [ret coll]\n\t(if (empty? coll)\n\t\tret\n\t\t(recur\n        \t(conj ret (last coll))\n         \t(drop-last coll)\n\t\t)\n\t)\n) []", "user": "5db7376fe4b010eb3c36cd43"}, {"problem": 23, "code": "(fn [collection]\n  (reduce (fn [coll elm] (conj coll elm)) '() collection))", "user": "5dba063ee4b010eb3c36cd5c"}, {"problem": 23, "code": "into '()", "user": "5dbe27c3e4b09f47823971c4"}, {"problem": 23, "code": "(fn [x] \n  (loop [sq x result []]\n    (if (empty? sq)\n      result\n      (recur (take (- (count sq) 1) sq) (conj result (last sq))) )))", "user": "5db16084e4b010eb3c36cd01"}, {"problem": 23, "code": "reduce conj '()", "user": "53d63e6ce4b0e771c3025454"}, {"problem": 23, "code": "into '()", "user": "5dc53c03e4b02f9375f4e1bc"}, {"problem": 23, "code": "(fn revdis [elements]\n  (if (empty? elements)\n    elements\n    (concat (revdis (rest elements)) [(first elements)])))", "user": "5dc4719ae4b02f9375f4e1b5"}, {"problem": 23, "code": "reduce conj '()", "user": "5da94ccfe4b000c986472c2f"}, {"problem": 23, "code": "reduce conj ()", "user": "5dc5982be4b02f9375f4e1c0"}, {"problem": 23, "code": "(fn [my-seq]\n  (reduce #(cons %2 %1) (sequence nil) my-seq))", "user": "5dc6e7f9e4b02f9375f4e1ca"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5dc72a9ce4b02f9375f4e1cd"}, {"problem": 23, "code": "(fn myrev [c]\n  (if (empty? c)\n    c\n    (let [f (first c)\n          r (vec (rest c))]\n      (conj (myrev r) f))))", "user": "5dc40814e4b02f9375f4e1ae"}, {"problem": 23, "code": "(fn rev [s]\n  (if (empty? s) []\n    (concat (rev (rest s)) [(first s)])))", "user": "5dc80f78e4b02f9375f4e1d5"}, {"problem": 23, "code": "(fn [x] (reduce (fn [a c] (cons c a)) [] x))", "user": "5daae405e4b000c986472c44"}, {"problem": 23, "code": "(fn [col]\n  (let [l (atom '())]\n  (doseq [x col] (swap! l conj x))\n  @l))", "user": "5d7670c4e4b02e6b30c93525"}, {"problem": 23, "code": "reduce #(cons %2 %1) []", "user": "5dc9ab1de4b02f9375f4e1e9"}, {"problem": 23, "code": "(fn [coll]\n  (loop [remaining-coll coll new-coll (empty coll)]\n    (if (empty? remaining-coll)\n      new-coll\n      (recur (drop 1 remaining-coll) (cons (first remaining-coll) new-coll)))\n    )\n   )", "user": "5dc9c4f2e4b02f9375f4e1f0"}, {"problem": 23, "code": "reduce #(conj %1 %2) '()", "user": "5dc9ccf8e4b02f9375f4e1f1"}, {"problem": 23, "code": "reduce conj ()", "user": "5db93acbe4b010eb3c36cd51"}, {"problem": 23, "code": "reduce #(apply conj %&) ()", "user": "5db92996e4b010eb3c36cd50"}, {"problem": 23, "code": "into ()", "user": "5dc9ae96e4b02f9375f4e1ea"}, {"problem": 23, "code": "#(into () %)", "user": "5dca5e0ae4b02b31cc3da3af"}, {"problem": 23, "code": "reduce #(cons %2 %1) []", "user": "5dc9d4ede4b03836ba07d823"}, {"problem": 23, "code": "reduce conj ()", "user": "5dc98556e4b02f9375f4e1e7"}, {"problem": 23, "code": "(fn [s] (map second (sort-by #(- (first %)) (map-indexed (fn [x y] [x y]) s))))", "user": "5dc9e5bfe4b03836ba07d826"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5dc318cde4b02f700ae81835"}, {"problem": 23, "code": "(fn [coll]\n  (loop [res '()\n         src  coll]\n    (if (first src)\n      (recur (conj res (first src)) (rest src))\n      res)))", "user": "5dcbe0dbe4b02b31cc3da3be"}, {"problem": 23, "code": "(fn [arr]\n  (loop [prod arr acc (empty arr)]\n    (if (= (first prod) nil)\n      acc\n      (recur (rest prod) (concat [(first prod)] acc)))))", "user": "5dcbd629e4b02b31cc3da3bd"}, {"problem": 23, "code": "#(reduce (fn [x y] (conj x y)) () %)", "user": "5d119138e4b02c15ef02198a"}, {"problem": 23, "code": "(fn re [s]\n  (if (empty? s)\n    s\n    (concat (re (rest s))\n            (list (first s)))))", "user": "5dcc0ee9e4b02b31cc3da3c2"}, {"problem": 23, "code": "(fn [s]\n  (loop [result '()\n         sqvn s]\n    (if (empty? sqvn)\n      result\n      (recur (conj result (first sqvn)) (rest sqvn)))))", "user": "5dcc152ae4b02b31cc3da3c3"}, {"problem": 23, "code": "(fn rev\n  ([coll]\n   (rev coll (empty coll)))\n   ([coll rev-coll]\n    (if (not (last coll))\n      rev-coll\n      (rev (rest coll) (cons (first coll) rev-coll)))))", "user": "5dcbe1d7e4b02b31cc3da3bf"}, {"problem": 23, "code": "#(reduce (fn [acc coll]\n           (loop [acc acc coll coll]\n             (if (empty? coll)\n               acc\n               (recur (concat (vector (first coll)) acc) (rest coll))))) [[] %])", "user": "5dcb1e73e4b02b31cc3da3b6"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5dcb303be4b02b31cc3da3b8"}, {"problem": 23, "code": "(fn reverse-a-sequence [s]\n  (reduce #(cons %2 %1) '() s))", "user": "5dcc5e5ce4b02b31cc3da3c7"}, {"problem": 23, "code": "reduce #(cons %2 %1) ()", "user": "5dc98501e4b02f9375f4e1e6"}, {"problem": 23, "code": "#(reduce (fn [a b] (cons b a)) [] %)", "user": "5dccbde4e4b0b296f82db5a5"}, {"problem": 23, "code": "(fn [coll]\n  (loop [new [] remain coll]\n    (if (empty? remain)\n      new\n      (recur (conj new (last remain)) (drop-last remain)))))", "user": "5da306a3e4b000c986472be7"}, {"problem": 23, "code": "(fn [sequen]\n  (loop [acc (empty sequen) \n         seq2 sequen]\n    (if (empty? seq2)\n      acc\n      (recur (concat [(first seq2)] acc)\n             (rest seq2)))))", "user": "5dcd182ae4b0b296f82db5a9"}, {"problem": 23, "code": "#(loop [items %1\n        r-items '()]\n   (if (empty? items)\n     r-items\n     (recur (rest items)\n            (conj r-items (first items)))))", "user": "5dcc4b4ae4b02b31cc3da3c6"}, {"problem": 23, "code": "(fn rev\n  [a]\n  (let [x (first a) xs (rest a)]\n  (if (empty? xs)\n    [x]\n    (conj (rev xs) x))))", "user": "5dc64aafe4b02f9375f4e1c2"}, {"problem": 23, "code": "(fn [c] (reduce (fn [r x] (cons x r)) [] c))", "user": "5dc9b2c7e4b02f9375f4e1eb"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5dcfdf23e4b0948ae9d9ad43"}, {"problem": 23, "code": "#(into '() %)", "user": "5d614059e4b0c9e5857d500e"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5dcd693de4b0b296f82db5ad"}, {"problem": 23, "code": "#(into '() %)", "user": "5dd1fb19e4b0948ae9d9ad51"}, {"problem": 23, "code": "#(loop [in % out []] (if (empty? in) \n\tout\n    (recur (rest in) (cons (first in) out))))", "user": "5dcfca4ce4b0948ae9d9ad42"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5dc9c1cce4b02f9375f4e1ef"}, {"problem": 23, "code": "(fn rev [l] (if (empty? l) l (concat (rev (rest l)) (list (first l)))))", "user": "5dd35dcbe4b0948ae9d9ad5f"}, {"problem": 23, "code": "reduce #(cons %2 %1) []", "user": "5dc53ddee4b02f9375f4e1bd"}, {"problem": 23, "code": "reduce conj '()", "user": "5dd44256e4b0948ae9d9ad69"}, {"problem": 23, "code": "reduce conj ()", "user": "5dd4ed3ae4b0948ae9d9ad72"}, {"problem": 23, "code": "(fn [coll]\n  (loop [res '()\n         rem coll]\n    (if (empty? rem)\n      res\n      (recur (conj res (first rem)) (rest rem))\n      )\n    )\n  )", "user": "5dd67c22e4b0948ae9d9ad80"}, {"problem": 23, "code": "reduce conj ()", "user": "5793931ee4b0e215f87e845c"}, {"problem": 23, "code": "(fn rev [s]\n  (cond\n   (empty? s) []\n   :else (conj (rev (rest s)) (first s))))", "user": "5dd60c58e4b0948ae9d9ad7c"}, {"problem": 23, "code": "reduce conj nil", "user": "5dce0151e4b0b296f82db5b5"}, {"problem": 23, "code": "(fn [n] (reduce #(cons %2 %1) '() n))", "user": "5dd90651e4b0948ae9d9ad97"}, {"problem": 23, "code": "(fn f26\n  [asq]\n  (loop [s asq\n         acc (empty asq)]\n    (if (empty? s)\n      acc\n      (recur (butlast s) (concat acc (take-last 1 s) )))))", "user": "5bd75870e4b0ed4b8aab4bc0"}, {"problem": 23, "code": "(fn ex23\n  ([coll]\n   (ex23 coll '()))\n  ([coll acc]\n   (let [head (first coll)\n         tail (rest coll)]\n     (if (empty? tail)\n       (conj acc head)\n       (recur tail (conj acc head))))))", "user": "5dd65ea4e4b0948ae9d9ad7f"}, {"problem": 23, "code": "(fn rev [coll]\n    (reduce conj () coll))", "user": "5dd405fde4b0948ae9d9ad66"}, {"problem": 23, "code": "(fn[l](loop [x l y []]\n  (if (seq x)\n   (recur (butlast x) (conj y (last x)))\n   y)))", "user": "5d60ea3ae4b0c9e5857d500a"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5dd80be5e4b0948ae9d9ad92"}, {"problem": 23, "code": "(fn f [xs]\n      (when xs\n      (cons (last xs) (f (butlast xs)))))", "user": "5d9c9446e4b0eb781811cdae"}, {"problem": 23, "code": "reduce conj ()", "user": "5dc85f8ae4b02f9375f4e1da"}, {"problem": 23, "code": "(fn [col]\n  (reduce (fn [acc el]\n            (conj acc el))\n          '()\n          col))", "user": "5ddb6151e4b0948ae9d9adb0"}, {"problem": 23, "code": "#(reduce (fn [res item] (conj res item)) '() %)", "user": "5ddd3cbee4b0948ae9d9adc3"}, {"problem": 23, "code": "(fn [x]\n  (if (vector? x)\n    (vec (into () (list* x)))\n    (into () x)))", "user": "5dd70ee3e4b0948ae9d9ad85"}, {"problem": 23, "code": "#(letfn [(f [sq] (if (empty? sq) sq (conj (f (butlast sq)) (last sq))))] (f %))", "user": "5ddcf10ae4b0948ae9d9adbe"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "5dddc292e4b0948ae9d9adcb"}, {"problem": 23, "code": "#(reduce (fn [a b] (cons b a)) [] %)", "user": "5dde5364e4b0948ae9d9add2"}, {"problem": 23, "code": "into '()", "user": "5dde6251e4b0948ae9d9add3"}, {"problem": 23, "code": "(fn reverso [col]\n   (when (seq col)\n     (cons (last col)\n           (reverso (drop-last col)))))", "user": "5db98f39e4b010eb3c36cd53"}, {"problem": 23, "code": "(fn funky1 [coll]\n  ((fn funky2 [oldColl newColl]\n    (if (= 0 (count oldColl) )\n        (apply list newColl)\n        (funky2 (drop-last oldColl) (conj newColl (last oldColl)))\n    )\n  ) coll [] )\n)", "user": "5dcc651de4b02b31cc3da3c8"}, {"problem": 23, "code": "reduce conj '()", "user": "5ddecfe5e4b0948ae9d9adda"}, {"problem": 23, "code": "reduce conj ()", "user": "5ddb8a6ee4b0948ae9d9adb2"}, {"problem": 23, "code": "(fn f\n  ([originSeq]\n   (f originSeq '()))\n  ([originSeq newSeq]\n   (if (empty? originSeq)\n     newSeq\n     (recur (rest originSeq) (conj newSeq (first originSeq))))))", "user": "5ddd134ae4b0948ae9d9adc0"}, {"problem": 23, "code": "(fn my-reverse\n  ([coll]\n   (my-reverse [(last coll)] (drop-last coll)))\n  ([coll rest]\n   (if (empty? rest)\n     coll\n     (recur (conj coll (last rest)) (drop-last rest)))))", "user": "5de012c8e4b0948ae9d9ade2"}, {"problem": 23, "code": "#(reduce (fn [a v] (cons v a)) '() %)", "user": "5ddd7359e4b0948ae9d9adc5"}, {"problem": 23, "code": "(partial reduce (fn [acc x] (cons x acc)) () )", "user": "5de051bfe4b0948ae9d9ade5"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5dda89f4e4b0948ae9d9ad9f"}, {"problem": 23, "code": "#(reduce (fn [a b] (conj a b)) () %)", "user": "5dde0b71e4b0948ae9d9add0"}, {"problem": 23, "code": "(fn [coll]\n  (into () coll))", "user": "5de0b844e4b0948ae9d9adea"}, {"problem": 23, "code": "reduce conj ()", "user": "599a6b1ee4b07157cc8dab0e"}, {"problem": 23, "code": "reduce (fn [a e] (conj a e)) ()", "user": "5de12192e4b0948ae9d9aded"}, {"problem": 23, "code": "into '()", "user": "5de2f356e4b0948ae9d9adfb"}, {"problem": 23, "code": "(fn \n  [x]\n  (let [i (map #(- (count x) %) (range 1 (+ 1 (count x)))) \n        j (seq x)] \n        (map #(nth j %)\n             i)))", "user": "5dbf6016e4b0e59a23173d79"}, {"problem": 23, "code": "(fn rev [x]\n  (if (empty? x)\n    []\n    (conj (rev (rest x)) (first x))))", "user": "5b1bde2ce4b03cfeda66ece6"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5de3d6c6e4b0948ae9d9ae02"}, {"problem": 23, "code": "(fn rv [c]\n  (lazy-seq\n    (when (seq c)\n      (cons (last c) (rv (butlast c))))))", "user": "5de44684e4b0948ae9d9ae03"}, {"problem": 23, "code": "reduce conj ()", "user": "5de44e22e4b0948ae9d9ae04"}, {"problem": 23, "code": "(fn [x] (reduce conj '() x))", "user": "5dcc65b7e4b02b31cc3da3c9"}, {"problem": 23, "code": "(fn [s]\n  (loop [se s\n         final '()]\n    (if (empty? se)\n      final\n      (recur (rest se) (conj final (first se))))))", "user": "5de4f858e4b0948ae9d9ae09"}, {"problem": 23, "code": "(fn [coll] (loop [ y [ ]  x coll ] (if (empty? x) y  (recur (conj y (last x) )  ( drop-last 1  x )   ) ) ))", "user": "5ddbd202e4b0948ae9d9adb4"}, {"problem": 23, "code": "into ()", "user": "5de65feee4b0986d99407f68"}, {"problem": 23, "code": "(fn [seq] (reduce (fn [a b] (concat [b] a)) [] seq))", "user": "5da5a1eee4b000c986472c04"}, {"problem": 23, "code": "(fn [coll] (->> coll count range (map (fn [idx] (let [n (-> coll count dec)] (nth (apply list coll) (- n idx)))))))", "user": "5de68f83e4b0986d99407f6c"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5de6c094e4b0986d99407f6f"}, {"problem": 23, "code": "; reduce #(cons %2 %1) '() \n reduce conj '()", "user": "5de6e291e4b0986d99407f72"}, {"problem": 23, "code": "reduce conj '()", "user": "5de48f92e4b0948ae9d9ae07"}, {"problem": 23, "code": "(fn [x] (sort #(compare %2 %1) x))", "user": "5de630d1e4b0948ae9d9ae23"}, {"problem": 23, "code": "(fn [coll]\n  (loop [reversed [] coll (apply vector coll)]\n   \t(if (empty? coll)\n      reversed\n      (recur (conj reversed (last coll)) (pop coll))\n     )\n   )\n )", "user": "5de6484ce4b0986d99407f66"}, {"problem": 23, "code": "(fn [s] \n  (loop [r [] el (vec s)]\n  \t(if (seq el)\n      \t(recur (conj r (last el)) (pop el))\n    \tr)))", "user": "5dcd7933e4b0b296f82db5ae"}, {"problem": 23, "code": "(fn [ls] (reduce conj () ls))", "user": "5de5de7be4b0948ae9d9ae1a"}, {"problem": 23, "code": "#(reduce (fn [rev elt] (cons elt rev)) (empty seq) %)", "user": "5d9d10d5e4b0eb781811cdb4"}, {"problem": 23, "code": "reduce conj '()", "user": "5de7e7cae4b0986d99407f7a"}, {"problem": 23, "code": "reduce conj ()", "user": "5dd25ca8e4b0948ae9d9ad55"}, {"problem": 23, "code": "(fn f [l]\n  (if (empty? l)\n    []\n    (concat (vector (last l)) (f (butlast l)))))", "user": "5dea4bb7e4b0986d99407f96"}, {"problem": 23, "code": "#(into '() %1)", "user": "5deab1b2e4b0986d99407f9f"}, {"problem": 23, "code": "(fn rev-rec [coll]\n\t(if (= '() coll)\n\t\t'()\n\t\t(concat (rev-rec (rest coll))\n\t\t\t\t(list (first coll)))))", "user": "5decd4fde4b093ff7172757b"}, {"problem": 23, "code": "(fn [s] ((fn flip [s r] (if (empty? s) r (flip (rest s) (cons (first s) r)))) s '()))", "user": "5dee144ae4b093ff71727591"}, {"problem": 23, "code": "(fn rev-seq [list]\n  (into '() list))", "user": "5deab868e4b0986d99407fa1"}, {"problem": 23, "code": "(fn [c] (sort-by (fn s_val [s] (if (coll? s) (s_val (first s)) (/ 1 s)) ) c))", "user": "5ded9f51e4b093ff7172758a"}, {"problem": 23, "code": "#(loop [result nil, coll %]\n  (if (seq coll)\n    (let [x (first coll)]\n      (recur (cons x result) (rest coll)))\n    ; no more elements, just return result...\n    result)\n  )", "user": "5defd277e4b093ff717275b0"}, {"problem": 23, "code": "reduce conj '()", "user": "5d5e2efee4b0c9e5857d4ff0"}, {"problem": 23, "code": "reduce conj '()", "user": "5ddfd88be4b0948ae9d9ade1"}, {"problem": 23, "code": ";#(loop [xl %\n;        xnew []\n;        n (count %)]\n;     (if(= n 0)\n;       (vec xnew)\n;       (recur\n;         (rest xl)\n;         (cons (first xl) xnew)\n;         (dec n)\n;       )\n;     )\n;   )\n\nreduce conj ()", "user": "5dee8835e4b093ff7172759a"}, {"problem": 23, "code": "#(reduce \n \t(fn [new ele] (conj new ele))\n      '() %)", "user": "5df0c29ce4b093ff717275c1"}, {"problem": 23, "code": "#(reduce conj() %)", "user": "5de66cf8e4b0986d99407f6a"}, {"problem": 23, "code": "reduce (fn [acc value] (conj acc value)) ()", "user": "5df0c6ffe4b093ff717275c2"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5dcc7338e4b02b31cc3da3cb"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5df23060e4b03c219ef1a356"}, {"problem": 23, "code": "#(loop [rev [] lis %] (if (= () lis) rev (recur (cons (first lis) rev) (rest lis))))", "user": "5de7377ee4b0986d99407f75"}, {"problem": 23, "code": "(fn my-reverse\n  (\n    [sequence] (\n\t  if (= sequence '())\n\t    '()\n        (my-reverse sequence '())\n\t)\n  )\n  (\n    [sequence current] (\n\t  if (= sequence '())\n\t    current\n        (my-reverse (drop 1 sequence) (cons (first sequence) current))\n\t)\n  )\n)", "user": "5df28320e4b03c219ef1a35c"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5df39a6fe4b03c219ef1a36d"}, {"problem": 23, "code": "(partial reduce #(cons %2 %1) [])", "user": "5df4cb3be4b03c219ef1a381"}, {"problem": 23, "code": "#(loop [result '() lista %] (\n\tif (empty? lista)\n\t  result\n      (recur (conj result (first lista)) (rest lista)\n)))", "user": "5df175bce4b03c219ef1a34d"}, {"problem": 23, "code": "(fn [s]\n  (into '() s)\n  )", "user": "5df62bd1e4b03c219ef1a39e"}, {"problem": 23, "code": "(fn revrev\n  [coll]\n  (let [seqseq (seq coll)\n        [head & tail] seqseq]\n  (if (empty? tail)\n    [head]\n    (conj (revrev tail) head))))", "user": "5df53ab7e4b03c219ef1a38e"}, {"problem": 23, "code": "reduce conj ()", "user": "5dee6926e4b093ff71727598"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5df54584e4b03c219ef1a38f"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "5df75fd8e4b0a607a9a45c92"}, {"problem": 23, "code": "#(reduce (fn [l, x] (concat [x] l)) [] %1)", "user": "5df8e717e4b0a607a9a45cae"}, {"problem": 23, "code": "reduce conj ()", "user": "5df98dc8e4b0a607a9a45cbc"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "5db658ebe4b010eb3c36cd39"}, {"problem": 23, "code": "reduce #(cons %2 %1) []", "user": "4f24c859e4b0d66497709fef"}, {"problem": 23, "code": "(fn [seq] (reduce #(cons %2 %1) nil seq))", "user": "5dfb2e2ae4b0a607a9a45cd6"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5dfa1c67e4b0a607a9a45cc5"}, {"problem": 23, "code": "reduce conj ()", "user": "5dfc457de4b0a607a9a45cea"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5dfb267ee4b0a607a9a45cd4"}, {"problem": 23, "code": "reduce conj ()", "user": "5dc0ca73e4b0e59a23173d82"}, {"problem": 23, "code": ";#(reduce (fn [ls x] (cons x ls)) nil %)\n#(reduce conj () %)", "user": "5d98f616e4b0d3f9b434ad3c"}, {"problem": 23, "code": "(fn [x]\n   ((fn [x res]\n      (if (empty? x)\n        res\n        (recur\n          (take (dec (count x)) x)\n          (conj res (last x))\n          )\n        ))\n    x []))", "user": "57fc5e42e4b0d3187e900997"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "5dfeaf25e4b0a607a9a45d0b"}, {"problem": 23, "code": "reduce conj '()", "user": "5de8648de4b0986d99407f7c"}, {"problem": 23, "code": "#(into () %)", "user": "5c549f38e4b0fb8c5ffd9a0e"}, {"problem": 23, "code": "(fn my-reverse\n  ([coll]\n  (my-reverse coll []))\n  ([coll res]\n   (if (empty? coll)\n     res\n   (my-reverse (butlast coll) (conj res (last coll))))))", "user": "5e00752fe4b0a607a9a45d24"}, {"problem": 23, "code": "(fn [coll]\n  (if (vector? (first coll))\n    (#(sort-by first > %1 ) coll)\n    (#(sort > %1 ) coll)))", "user": "5df0f338e4b093ff717275c6"}, {"problem": 23, "code": "#(into () %)", "user": "5d6eaa58e4b04d129b00f2cd"}, {"problem": 23, "code": "(fn rev [lst] (if (empty? lst) () (concat (rev (rest lst)) (list (first lst)))))", "user": "5e010c58e4b0a607a9a45d33"}, {"problem": 23, "code": "(fn rev-seq [lat]\n  (into '() lat))", "user": "5dfac9cce4b0a607a9a45ccf"}, {"problem": 23, "code": "reduce conj ()", "user": "5dfb20b8e4b0a607a9a45cd3"}, {"problem": 23, "code": "(fn myrev[coll]\n\t(reduce conj '() coll)\n)", "user": "5bb4baace4b0a20761a23552"}, {"problem": 23, "code": "#(into '() %)", "user": "5bfc9037e4b0bdcf453d15f2"}, {"problem": 23, "code": "(fn \n  [xs] (reduce (fn [acc x] (conj acc x)) () xs)\n  )", "user": "5e035de0e4b0a607a9a45d5a"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5e03a1bbe4b0a607a9a45d5f"}, {"problem": 23, "code": "(fn [col] (reduce (fn [acc el] (concat [el] acc)) [] col))", "user": "5dfbe0eae4b0a607a9a45ce2"}, {"problem": 23, "code": "reduce conj '()", "user": "5df6c8b8e4b0a607a9a45c87"}, {"problem": 23, "code": "#(reduce conj '() (vec %))", "user": "5dff8331e4b0a607a9a45d17"}, {"problem": 23, "code": "#(loop [acc (empty %)\n        lst %]\n   (if (empty? lst)\n     acc\n     (recur (cons (first lst) acc) (rest lst))))", "user": "5e066185e4b0978307768fa4"}, {"problem": 23, "code": "(fn rev\n   ([seq] (rev seq ()))\n   ([seq reversed-seq]\n    (if (empty? seq)\n      (vec reversed-seq)\n      (recur (rest seq) (conj reversed-seq (first seq))))))", "user": "5deeb6fde4b093ff7172759f"}, {"problem": 23, "code": "into '()", "user": "5e01addee4b0a607a9a45d3f"}, {"problem": 23, "code": "(fn a [coll] (if (empty? coll) coll (concat (a (rest coll)) [(first coll)])))", "user": "5e03fd15e4b0a607a9a45d66"}, {"problem": 23, "code": "reduce conj ()", "user": "5e03a15be4b0a607a9a45d5e"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5bf0b940e4b0a6d31fed215c"}, {"problem": 23, "code": "#(reduce \n  (fn [x acc] \n    (cons acc x))\n  (empty %)\n  %)", "user": "5e0828b9e4b0978307768fbe"}, {"problem": 23, "code": "(fn [ar]\n  (loop [a ar n []]\n    (if (= a [])\n      n\n      (recur (drop-last a) (conj n (last a)))\n    )\n   )\n )", "user": "5e08c3dde4b0978307768fc8"}, {"problem": 23, "code": "(fn [coll]\n  (loop [coll coll rev '()]\n    (if (empty? coll)\n      rev\n      (recur (rest coll) (conj rev (first coll)))\n     )\n  )\n)", "user": "5e09fd26e4b099d064962f60"}, {"problem": 23, "code": "(fn reverse-1 [a-seq]\n  (if\n      (empty? a-seq)\n       a-seq\n    (loop [count (count a-seq)\n           sequence []]\n      (if (= count 0)\n        sequence\n        (recur (dec count)\n               (conj sequence (nth (vec a-seq) (dec count))))\n\n        )\n\n      )\n\n    )\n  )", "user": "5de68068e4b0986d99407f6b"}, {"problem": 23, "code": "reduce conj ()", "user": "5e0a6916e4b099d064962f65"}, {"problem": 23, "code": "(fn rev [s]\n  (if (empty? (rest s))\n    [(first s)]\n    (conj (rev (vec (rest s))) (first s))))", "user": "5e0a6cf0e4b099d064962f66"}, {"problem": 23, "code": "(fn apna-reverse [coll]\n (if (zero? (count coll)) []\n (conj (apna-reverse (rest coll)) (first coll))))", "user": "5e0cbc14e4b099d064962f8e"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5ded3de4e4b093ff71727584"}, {"problem": 23, "code": "#(into '() %)", "user": "5e0cb4f5e4b099d064962f8d"}, {"problem": 23, "code": "#(into '() %)", "user": "5e0d948fe4b099d064962f98"}, {"problem": 23, "code": "(fn [l] (vec (into () l)))", "user": "5e035030e4b0a607a9a45d59"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5e00b6e7e4b0a607a9a45d2b"}, {"problem": 23, "code": "(fn my-rev [s]\n  (if (seq s)\n    (conj (vec (my-rev (rest s))) (first s))\n    nil))", "user": "5db35f85e4b010eb3c36cd22"}, {"problem": 23, "code": "(fn [seq]\n  (loop [rxs '()\n         xs  seq]\n    (if (empty? xs)\n      rxs\n      (recur (conj rxs (first xs)) (next xs)))))", "user": "5e0ceca5e4b099d064962f91"}, {"problem": 23, "code": "#(map-indexed (fn [i x] (nth (vec %1) (- (.size (vec %1)) (+ i 1)))) %1)", "user": "5e0e0131e4b099d064962fa1"}, {"problem": 23, "code": "reduce conj '()", "user": "5e0e836fe4b099d064962fa8"}, {"problem": 23, "code": "(fn [s]\n  (loop [target (empty s) source s]\n    (if (empty? source)\n      target\n      (recur (cons (first source) target) (rest source)))))", "user": "5b799354e4b047b03b203706"}, {"problem": 23, "code": "(fn [col]\n  (let [col (vec col)\n        size  (count col)\n        r (seq (map #(- size % 1) (range 0 size)))]\n          (map col  r )))", "user": "5e078ba7e4b0978307768fb6"}, {"problem": 23, "code": "#(loop [coll '()\n        inColl %]\n   (if (empty? inColl)\n     coll\n     (recur (cons (first inColl) coll) (rest inColl))))", "user": "5e10d1e6e4b099d064962fcf"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5e10f181e4b099d064962fd2"}, {"problem": 23, "code": "reduce conj ()", "user": "5e0f5ccee4b099d064962fb8"}, {"problem": 23, "code": "#(into () %)", "user": "5e121a89e4b099d064962fe4"}, {"problem": 23, "code": "reduce #(cons %2 %1) []", "user": "5e0d1947e4b099d064962f92"}, {"problem": 23, "code": "#(into () %)", "user": "5e138826e4b099d064962ffd"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5e04528ee4b0a607a9a45d6c"}, {"problem": 23, "code": "(partial reduce conj (empty list))", "user": "5e12b21be4b099d064962feb"}, {"problem": 23, "code": "reduce #(conj %1 %2) '()", "user": "5e14e396e4b0a047bd49f6f7"}, {"problem": 23, "code": "(fn [l] (loop[l l res []] (if (empty? l) res (recur (drop-last l) (conj res (last l))))))", "user": "5e04ce34e4b0a607a9a45d71"}, {"problem": 23, "code": "(fn [l] (reduce (fn [x y] (conj x y)) '() l))", "user": "5e1561b1e4b0a047bd49f700"}, {"problem": 23, "code": "(fn my-reverse\n  ([coll] (my-reverse coll '()))\n  ([coll built]\n   (if (empty? coll)\n     built\n     (recur (rest coll) (cons (first coll) built)))))", "user": "5e157910e4b0a047bd49f701"}, {"problem": 23, "code": "(fn [x]\n  (loop [oldList x newList ()]\n   (if (empty? oldList)\n  newList\n         (let [currentElem (first oldList)]\n  (recur (rest oldList) (conj newList currentElem))\n           )\n         )\n       )\n     )", "user": "5e1429afe4b0a047bd49f6e6"}, {"problem": 23, "code": "reduce conj '()", "user": "5e15cb00e4b0a047bd49f709"}, {"problem": 23, "code": "(fn\n[coll]\n  (reduce (fn [acc item] (cons item acc)) [] coll))", "user": "5e16006be4b0a047bd49f711"}, {"problem": 23, "code": "into '()", "user": "5e144bd5e4b0a047bd49f6e7"}, {"problem": 23, "code": "(fn [items]\n  (reduce (fn [result item]\n            (seq (conj result item)))\n          []\n          items))", "user": "5e172edce4b054039d6af22b"}, {"problem": 23, "code": "#(reduce (fn [rev x] (conj rev x)) () %)", "user": "5e17509fe4b00200644e3d52"}, {"problem": 23, "code": "(fn my-reverse [l] (reduce (fn [arr element] (concat [element] arr)) [] l))", "user": "5e1308dde4b099d064962ff4"}, {"problem": 23, "code": "(fn [s] ((fn [s r] (if (empty? s) r (recur (rest s) (cons (first s) r)))) s '()))", "user": "5e178fbee4b00200644e3d57"}, {"problem": 23, "code": "(partial reduce conj ())", "user": "5e17bb46e4b00200644e3d5a"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5d28d935e4b092dab7f59c88"}, {"problem": 23, "code": "reduce conj '()", "user": "5e0b71d8e4b099d064962f7c"}, {"problem": 23, "code": "(fn rev [x] (if (empty? x) [] (conj (rev (rest x)) (first x))))", "user": "5e18bd30e4b0dc95940084fa"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5e0e14bde4b099d064962fa3"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5e155173e4b0a047bd49f6fd"}, {"problem": 23, "code": "reduce conj ()", "user": "5e1a3a01e4b0dc9594008512"}, {"problem": 23, "code": "reduce conj ()", "user": "5df79c31e4b0a607a9a45c9b"}, {"problem": 23, "code": "(fn my-reverse\n   [col]\n   (reduce (fn [result x]\n             (conj result x))\n           '() col))", "user": "5e1c3e6ee4b0dc9594008530"}, {"problem": 23, "code": "(fn my-seq [s]\n  (loop [r s\n         n '()]\n    (if (empty? r)\n      n\n      (recur (rest r) (conj n (first r))))))", "user": "5e189cc8e4b0dc95940084f7"}, {"problem": 23, "code": "(fn [seq] (loop [suffix seq rev '()] (if (empty? suffix) rev (recur (rest suffix) (conj rev (first suffix))))))", "user": "5e1cc888e4b0dc959400853d"}, {"problem": 23, "code": "(fn rev-cus [sq]\n  (if (empty? sq)\n    sq\n    (cons (last sq) (rev-cus (drop-last sq)))))", "user": "5e18c885e4b0dc95940084fc"}, {"problem": 23, "code": "(fn f [arr] (if (= arr '()) '() (conj (f (take (- (count arr) 1) arr)) (last arr))))", "user": "5e0596d5e4b0a607a9a45d7d"}, {"problem": 23, "code": "(fn revl [x] \n  (if (first x)\n    (concat (revl (rest x)) (list (first x)))\n    ()\n  )\n)", "user": "5e1d01b5e4b0dc9594008542"}, {"problem": 23, "code": "(fn [list1] (loop [somelist '() l1 list1] (if (empty? l1) somelist (recur (conj somelist (first l1) ) (rest l1) ))))", "user": "5e15c23ce4b0a047bd49f707"}, {"problem": 23, "code": "#(into '() %)", "user": "5e1ca847e4b0dc9594008539"}, {"problem": 23, "code": "(fn\n  [arrIn]\n  (reduce \n   \t(fn\n      [listIn valIn]\n      (conj listIn valIn))\n    '()\n   \tarrIn))", "user": "5e1b0140e4b0dc959400851c"}, {"problem": 23, "code": "reduce conj '()", "user": "5e1ec8c0e4b0dc9594008561"}, {"problem": 23, "code": "sort #(compare %2 %1)", "user": "5e07cf97e4b0978307768fb9"}, {"problem": 23, "code": "(fn [coll] (loop [seqn coll result []]\n             (if (empty? seqn) result\n             (recur (rest seqn) (cons (first seqn) result)))))", "user": "5e15abeae4b0a047bd49f705"}, {"problem": 23, "code": "#(into () %)", "user": "5e1a3989e4b0dc9594008511"}, {"problem": 23, "code": "(fn [s] (loop [s s\n               r '()]\n          (if (empty? s)\n            r\n            (recur (rest s) (conj r (first s)) ))))", "user": "5e21c933e4b05b4b01516128"}, {"problem": 23, "code": "#(into '() %)", "user": "5e218bb7e4b05b4b01516123"}, {"problem": 23, "code": "(fn [x] (into () x))", "user": "5e21f944e4b05b4b0151612d"}, {"problem": 23, "code": "reduce conj ()", "user": "5e2261b2e4b05b4b01516131"}, {"problem": 23, "code": "(fn rev [s]\n  (if (= 1 (count s)) s\n    (cons (last s) (rev (butlast s)))))", "user": "5d929ceae4b0915913b1d412"}, {"problem": 23, "code": "into '()", "user": "5e207f12e4b05b4b01516112"}, {"problem": 23, "code": "#(loop [res '()\n        temp %]\n   (if (empty? temp)\n     (vec res)\n     (recur (conj res (first temp)) (rest temp))))", "user": "5defc177e4b093ff717275af"}, {"problem": 23, "code": "(fn [fwd]\n    (loop [revd '() remn fwd]\n      (if (first remn)\n        ( recur (concat (list (first remn)) revd ) (rest remn)) \n        revd)))", "user": "5e1cb653e4b0dc959400853b"}, {"problem": 23, "code": "reduce conj '()", "user": "5e244003e4b05b4b0151614d"}, {"problem": 23, "code": "#(into () %)", "user": "5e23d513e4b05b4b01516145"}, {"problem": 23, "code": "(fn [lis]\n            (reduce \n                (fn [x y] \n                    (cons y x )\n                )\n                []\n                lis\n            )\n        )", "user": "5e23ca7fe4b05b4b01516144"}, {"problem": 23, "code": "#(into () %)", "user": "5e22e4c5e4b05b4b01516137"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "5e246f92e4b05b4b01516150"}, {"problem": 23, "code": "(fn [l] (reduce conj '() l))", "user": "5e195b3ee4b0dc9594008505"}, {"problem": 23, "code": "#(apply conj '() %)  \n#_(fn f [vs] (if (empty? vs) [] (conj (f (rest vs)) (first vs))))", "user": "5e2549c8e4b05b4b0151615f"}, {"problem": 23, "code": "(fn [x]\n  (loop [y x\n         z '()]\n    \n  \t(if (= y '())\n    \tz\n    \t(recur (rest y) (conj z (first y))))\n   )\n)", "user": "5e265173e4b05b4b01516175"}, {"problem": 23, "code": "(fn DuplicateSeq\n  [collection]\n  (reduce #(conj %1 %2) '() collection))", "user": "5e16b820e4b0a047bd49f71f"}, {"problem": 23, "code": "reduce #(cons %2 %1) []", "user": "5e1754abe4b00200644e3d53"}, {"problem": 23, "code": "#(reduce (fn [a x] (cons x a)) [] %1)", "user": "54b17a49e4b09f271ff37d1e"}, {"problem": 23, "code": "reduce conj '()", "user": "5e257a33e4b05b4b01516166"}, {"problem": 23, "code": "(fn[coll] (reduce #(conj %1 %2) '() coll))", "user": "5e29cb4ce4b05b4b015161ae"}, {"problem": 23, "code": "reduce conj '()", "user": "5d942d68e4b0d3f9b434ad1e"}, {"problem": 23, "code": "into ()", "user": "5e054752e4b0a607a9a45d78"}, {"problem": 23, "code": "reduce conj '()", "user": "5e2a8663e4b05b4b015161bb"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "58a0ac0de4b02bd94d917e9c"}, {"problem": 23, "code": "#(loop [x '() coll %]\n  (if (empty? coll) x\n    (recur (conj x (first coll)) (rest coll))))", "user": "5a7dbb58e4b03baeef9276fd"}, {"problem": 23, "code": "(fn __\n  [items]\n  (reduce\n    conj\n    '()\n    items)\n  )", "user": "5e300655e4b05b4b01516209"}, {"problem": 23, "code": "reduce conj '()", "user": "5e304218e4b05b4b0151620d"}, {"problem": 23, "code": "into ()", "user": "5e309bb9e4b05b4b01516216"}, {"problem": 23, "code": "(fn my-reverse [xs]\n  (reduce #(cons %2 %1) [] xs))", "user": "5e30dbd5e4b05b4b0151621d"}, {"problem": 23, "code": "#(reduce conj () %1)", "user": "56777934e4b05957ce8c6167"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5e309f89e4b05b4b01516218"}, {"problem": 23, "code": "(fn [seq]\n          (into () seq))", "user": "5e317676e4b05b4b01516229"}, {"problem": 23, "code": "(fn [s]\n (loop [i (dec (count s)) cs s r []]\n   (if (empty? cs)\n     r\n     (recur\n       (dec i)\n       (butlast cs)\n       (conj r (last cs))\n     )\n   )\n )\n)", "user": "5e31f485e4b05b4b01516231"}, {"problem": 23, "code": "(fn [as] (reduce (fn [a b] (cons b a)) (empty as) as))", "user": "5e33077be4b0650de70e2b03"}, {"problem": 23, "code": "(fn rev\n  ([old] (rev old []))\n  ([old new]\n   (if (empty? old)\n     new\n     (recur (rest old) (conj (apply list new) (first old) ))\n     )\n   )\n  )", "user": "5e32c30be4b05b4b01516245"}, {"problem": 23, "code": "(fn [coll] (reduce conj () coll))", "user": "5e2d1883e4b05b4b015161df"}, {"problem": 23, "code": "(fn f1 [a]\n  (if (= (count a) 1)\n    (vec a)\n    (conj\n     (f1 (rest a)) \n     (first a)\n     )\n    )\n  )", "user": "5e31a4b0e4b05b4b0151622b"}, {"problem": 23, "code": "(fn rev [sq]\n  (if (empty? sq)\n    []\n    (conj (rev (rest sq)) (first sq))))", "user": "5e33e399e4b0650de70e2b11"}, {"problem": 23, "code": "#(into () %)", "user": "5e2ead6ae4b05b4b015161f5"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5e357507e4b0650de70e2b2a"}, {"problem": 23, "code": "(fn seqreverse \n  ([seq] (seqreverse seq []))\n  ([seq revseq]\n   (if (empty? seq)\n     revseq\n     (seqreverse (drop-last seq) (conj revseq (last seq))))))", "user": "5e309d65e4b05b4b01516217"}, {"problem": 23, "code": "#(into '() %)", "user": "586f1aa7e4b01531a375e9ba"}, {"problem": 23, "code": "#(reduce conj '() (seq  %))", "user": "5e348945e4b0650de70e2b1d"}, {"problem": 23, "code": "(fn rev [s]\n  (if (empty? s)\n    '()\n    (concat (rev (rest s))\n            (list (first s)))))", "user": "5e38a9cbe4b01d43a70e8dc2"}, {"problem": 23, "code": "reduce conj ()", "user": "5e3810ffe4b01d43a70e8db1"}, {"problem": 23, "code": "(fn r [xs]\n  (if (empty? xs) nil\n    (concat (r (rest xs)) (list (first xs)))))", "user": "5e385965e4b01d43a70e8dba"}, {"problem": 23, "code": "#(loop [coll % x []]\n   (if (empty? coll)\n     x\n     (do (let [i (last coll)]\n           (recur (drop-last 1 coll) (conj x i) )\n           )\n         )\n     )\n   )", "user": "5e259d05e4b05b4b01516169"}, {"problem": 23, "code": "(fn [xs] (reduce (fn [acc va] (conj acc va)) () xs))", "user": "5e392de0e4b01d43a70e8dcb"}, {"problem": 23, "code": "#(reduce (fn [res item] (cons item res)) [] %)", "user": "5e161799e4b0a047bd49f713"}, {"problem": 23, "code": "(fn [coll]\n  (loop [norm coll inrt []]\n    (if (empty? norm)\n      inrt\n      (recur (drop-last norm) (conj inrt (last norm))))))", "user": "5e34318be4b0650de70e2b15"}, {"problem": 23, "code": "(fn [x]\n  (if (vector? x)\n    (vec (reduce conj '() x))\n    (reduce conj '() x)))", "user": "5e36ca7de4b0650de70e2b3c"}, {"problem": 23, "code": "(fn [x] (vec (reduce conj '() x)))", "user": "5e266943e4b05b4b01516178"}, {"problem": 23, "code": "#(reduce\n  (fn [r x] (concat [x] r))\n  (empty %)\n  %)", "user": "5d47fa13e4b07c84aa5ae6b6"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5e380e72e4b01d43a70e8db0"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "5e39bb8ce4b01d43a70e8dd6"}, {"problem": 23, "code": "(fn [xs]\n  ((fn rev [xs ys]\n     (if (empty? xs)\n       (seq ys)\n       (rev (rest xs) (cons (first xs) ys)))\n     ) xs []))", "user": "5e394c33e4b01d43a70e8dd1"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5e3a25d4e4b01d43a70e8dde"}, {"problem": 23, "code": "(fn [coll] (reduce #(into [%2] %1) [] coll))", "user": "5e3a8929e4b01d43a70e8de3"}, {"problem": 23, "code": "#(apply conj () %)", "user": "5e381434e4b01d43a70e8db4"}, {"problem": 23, "code": "into '()", "user": "5e3d183fe4b01d43a70e8e11"}, {"problem": 23, "code": "reduce #(conj % %2) '()", "user": "5e3071abe4b05b4b01516213"}, {"problem": 23, "code": "#(into '() %1)", "user": "5e3f291ae4b01d43a70e8e33"}, {"problem": 23, "code": "reduce conj nil", "user": "5e3e23d9e4b01d43a70e8e20"}, {"problem": 23, "code": "(fn [s]\n   (loop [s (apply list s)\n          result []]\n     (if (empty? s)\n       result\n       (let [[h & t] s] (recur t (cons h result))))))", "user": "5e3ef7d4e4b01d43a70e8e2d"}, {"problem": 23, "code": "(fn reverse-seq [seq]\n  (if (empty? seq) seq\n      (concat (reverse-seq (rest seq)) (list (first seq)))))", "user": "5e3e0b3fe4b01d43a70e8e1e"}, {"problem": 23, "code": "(fn [vs]\n  \t(loop [vs vs\n           acc '()]\n      (if (empty? vs) acc\n        (recur (rest vs)\n               (conj acc (first vs))))))", "user": "5e41a67be4b01d43a70e8e56"}, {"problem": 23, "code": "#(into [] (reduce (fn [in item] (conj in item)) '() %))", "user": "5e41c371e4b01d43a70e8e59"}, {"problem": 23, "code": "apply conj ()", "user": "5e41b679e4b01d43a70e8e58"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "5d078e2de4b0cc9c915881fa"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5e208e4be4b05b4b01516113"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5e3302ece4b0650de70e2b02"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5e2bea53e4b05b4b015161d2"}, {"problem": 23, "code": "sort-by #(if (instance? java.util.Collection %) (- (first %)) (- %))\n\n;(fn [arr] (if (instance? java.util.Collection arr)\n;    (sort-by #(- (first %)))\n;    ))", "user": "5e2586afe4b05b4b01516167"}, {"problem": 23, "code": "(fn myReverse [x]\n   (if (empty? x)\n     []\n     (concat (myReverse (rest x))\n             (list (first x)))\n   )\n)", "user": "5e42ba49e4b01d43a70e8e6c"}, {"problem": 23, "code": "(fn myrev\n  [lista]\n  (loop [l lista r ()]\n    (if (empty? l)\n      r\n      (recur (rest l) (cons (first l) r)))))", "user": "5dddcface4b0948ae9d9adcd"}, {"problem": 23, "code": "(fn rev [xs]\n  (loop [acc nil ys xs]\n    (if (nil? ys)\n      acc\n      (recur (cons (first ys) acc) (next ys)))))", "user": "5e4471e1e4b01d43a70e8e85"}, {"problem": 23, "code": "(fn\n                [n]\n                 (loop [rcoll '() [r & more :as all] (seq n)]\n                   (if all\n                     (recur (conj rcoll r) more)\n                     rcoll\n                     )))", "user": "5e3121e5e4b05b4b01516221"}, {"problem": 23, "code": "(fn [col]\n  (let [f (fn aux [col rev]\n            (if (empty? col)\n              rev\n              (aux (rest col) (cons (first col) rev))))]\n    (f col nil)))", "user": "5e47bc6fe4b043cd24807a34"}, {"problem": 23, "code": "(fn\n  [nums]\n  (reduce conj '() nums))", "user": "5e47e1eee4b043cd24807a35"}, {"problem": 23, "code": "sort (fn [_ _] -1)", "user": "5e486cb0e4b043cd24807a3e"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5e44c804e4b01d43a70e8e89"}, {"problem": 23, "code": "(fn [list]\n              (loop [list list\n                     reversed []]\n                (if (empty? list)\n                  reversed\n                  (recur (rest list) (cons (first list) reversed))\n                  )))", "user": "5e491182e4b043cd24807a46"}, {"problem": 23, "code": "(fn rev [arr]\n  (if (empty? arr) arr\n    (conj (rev (drop-last arr)) (last arr))))", "user": "5e42b688e4b01d43a70e8e6b"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5e30533ee4b05b4b0151620f"}, {"problem": 23, "code": "(fn my-reverse [x]\n  (loop [from x to '()]\n    (if (seq from)\n      (recur \n       (rest from) \n       (conj to (first from))\n       )\n      to)\n    )\n  )", "user": "5e4b60d3e4b0889a8790a553"}, {"problem": 23, "code": "#(loop [a %\n         b []]\n         (if (empty? a)\n           b\n           (recur (next a) (cons (first a) b))))", "user": "5e4b919ce4b0889a8790a556"}, {"problem": 23, "code": "(fn [xs]\n  (loop [revd '()\n         norm xs]\n    (if (= (count norm) 0)\n      revd\n      (recur (conj revd (first norm)) (rest norm)))))", "user": "5ba167bfe4b0a20761a233a0"}, {"problem": 23, "code": "#(reduce (fn [a b] (cons b a)) [] %)", "user": "54186e68e4b01498b1a71a1a"}, {"problem": 23, "code": "reduce conj '()", "user": "5e4375e7e4b01d43a70e8e73"}, {"problem": 23, "code": "into ()", "user": "5e4b8fe8e4b0889a8790a555"}, {"problem": 23, "code": "(fn my-reverse [collection]\n  (loop [coll collection, acc []]\n    (if (empty? coll)\n      acc\n      (recur (rest coll) (cons (first coll) acc)))))", "user": "5e471203e4b043cd24807a2a"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5e4d98dce4b027a2e10ac0a7"}, {"problem": 23, "code": "(fn [x]\n    (loop [sqn x r-sqn []]\n      (if (empty? sqn) r-sqn\n          (recur (butlast sqn) (into r-sqn (list (last  sqn)))))))", "user": "5e4d2506e4b0889a8790a570"}, {"problem": 23, "code": "(fn rv\n   ([coll]\n    (rv coll '()))\n   ([coll resp]\n    (if (empty? coll)\n      resp\n      (recur (rest coll) (cons (first coll) resp)))))", "user": "5e4423d0e4b01d43a70e8e7b"}, {"problem": 23, "code": "reduce conj ()", "user": "5e3c6db5e4b01d43a70e8e05"}, {"problem": 23, "code": "(fn [l]\n  ((fn [lst acc]\n     (if (empty? lst)\n       acc\n       (recur (rest lst) (conj acc (first lst)))))\n   l '()))", "user": "5e50012ae4b027a2e10ac0bd"}, {"problem": 23, "code": "(fn rev [xs]\n  (if (nil? xs) []\n    (conj (rev (next xs))\n          (first xs))))", "user": "505223fae4b0a561d07d8f17"}, {"problem": 23, "code": "(fn [coll] (loop [x coll y (empty coll)] (if (empty? x) y (recur (rest x) (cons (first x) y)))))", "user": "5df08767e4b093ff717275bf"}, {"problem": 23, "code": "(fn [lat]\n  (into '() lat))", "user": "5e519986e4b027a2e10ac0d0"}, {"problem": 23, "code": "(fn [coll]\n  (reduce #(conj %1 %2) '() coll))", "user": "5e4ba8e8e4b0889a8790a55a"}, {"problem": 23, "code": "reduce #(cons %2 %1) nil", "user": "5b26a74ee4b063e2438bcc37"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5e52ce65e4b027a2e10ac0dd"}, {"problem": 23, "code": "reduce conj ()", "user": "5e5349ebe4b027a2e10ac0e2"}, {"problem": 23, "code": "(fn [x]\n  (into '() x))", "user": "5e4fe215e4b027a2e10ac0ba"}, {"problem": 23, "code": "#(reduce (fn [v a] (cons a v)) [] %)", "user": "5bfc50ece4b0bdcf453d15ea"}, {"problem": 23, "code": "#(loop [out '() in %1] (if (empty? in) out (recur (conj out (first in)) (rest in))))", "user": "5ddd6cfae4b0948ae9d9adc4"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5d6a9b96e4b04d129b00f29d"}, {"problem": 23, "code": "(fn f \n  ([s,r] (if (= s '()) r (f (rest s) (conj r (first s)))))\n  ([s] (f s '()))\n  )", "user": "5e55775ae4b027a2e10ac0f4"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5e38b324e4b01d43a70e8dc3"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5e54faf7e4b027a2e10ac0f0"}, {"problem": 23, "code": "(fn [array]\n      (loop [index 1\n             new-array []\n             remaining array]\n        (if (empty? remaining)\n          new-array\n          (recur (inc index) (cons (first remaining)  new-array) (rest remaining))\n        )\n      ))", "user": "5e5537d9e4b027a2e10ac0f2"}, {"problem": 23, "code": "reduce conj ()", "user": "5d25578de4b02ea6f0fb6a33"}, {"problem": 23, "code": "reduce conj '()", "user": "5e566668e4b027a2e10ac0f9"}, {"problem": 23, "code": "(fn rev-seq\n  ([x] (if (empty? x) 0\n        (rev-seq (vec x) [])\n         )\n   )\n  ([x y] (if (empty? x) y\n           (rev-seq (butlast x) (conj y (last x)))\n            )\n          )\n  )", "user": "5bfd6668e4b0bdcf453d15fc"}, {"problem": 23, "code": "into '()", "user": "5e32b010e4b05b4b01516242"}, {"problem": 23, "code": "reduce conj ()", "user": "5e52f245e4b027a2e10ac0e1"}, {"problem": 23, "code": "reduce conj ()", "user": "5e5864e4e4b027a2e10ac107"}, {"problem": 23, "code": "(fn rvs [l] (cond (= l nil) nil :else (cons (last l) (rvs (butlast l)))))", "user": "5e5096c6e4b027a2e10ac0c6"}, {"problem": 23, "code": "(fn a ([x] (a x [])) ([x y] (if (< 0 (count x)) (a (rest x) (cons (first x) y)) y)))", "user": "5e5b8d92e4b0fd0acd158658"}, {"problem": 23, "code": "into ()", "user": "5e5b6ff1e4b0fd0acd158657"}, {"problem": 23, "code": "#(reduce (fn [acc x]\n           (cons x acc))\n         (empty %)\n         %)", "user": "5e5be89ce4b0fd0acd15865f"}, {"problem": 23, "code": "reduce conj '()", "user": "5e5c425ae4b0fd0acd158662"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5e42875be4b01d43a70e8e68"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5e5913b5e4b027a2e10ac10b"}, {"problem": 23, "code": "reduce #(cons %2 %1) ()", "user": "5e595637e4b027a2e10ac10e"}, {"problem": 23, "code": "(fn rev [l]\n\t(if (empty? (rest l)) l (concat (rev (rest l)) [(first l)]))\n)", "user": "5e546e20e4b027a2e10ac0eb"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5e48ec09e4b043cd24807a45"}, {"problem": 23, "code": "(fn [arg] (reduce conj '() arg))", "user": "5e5d9e62e4b0fd0acd15866b"}, {"problem": 23, "code": "reduce conj ()", "user": "5e255774e4b05b4b01516161"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5e5f8a07e4b0fd0acd15867c"}, {"problem": 23, "code": "#(reduce (fn [acc x] (concat [x] acc)) [] %)", "user": "5e5fd7afe4b0fd0acd158680"}, {"problem": 23, "code": ";; reduce (fn [val acc] (cons acc val)) ()\nreduce conj ()", "user": "5df70ee8e4b0a607a9a45c8a"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5e5fa1ffe4b0fd0acd15867d"}, {"problem": 23, "code": "(fn rec [ls] \n \t(if (empty? ls)\n     \t[]\n      \t(conj (rec (rest ls)) (first ls))\n     )\n)", "user": "5e633940e4b0fd0acd15869f"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5e639b4be4b0fd0acd1586a2"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5e62c405e4b0fd0acd15869b"}, {"problem": 23, "code": "reduce conj ()", "user": "5e62444fe4b0fd0acd158694"}, {"problem": 23, "code": "#(reduce\n  (fn [out i]\n   (cons i out))\n  ()\n  %)", "user": "5e64ae6ce4b0fd0acd1586ac"}, {"problem": 23, "code": "#((fn [o r]\n    (if (seq o)\n      (recur (butlast o) (merge r (last o)))\n      r)) % [])", "user": "5e63ffa0e4b0fd0acd1586a6"}, {"problem": 23, "code": "(fn reverse-seq [seq] \n  (if (< (count seq) 2)\n    seq\n    (cons (last seq) \n          (reverse-seq (butlast seq)))))", "user": "5e60a0cae4b0fd0acd158689"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5e5f2c17e4b0fd0acd158678"}, {"problem": 23, "code": "(fn [x](let [y (into () x)](if (vector? x) (into [] y) y)))", "user": "5dbecfefe4b09f47823971cc"}, {"problem": 23, "code": "reduce conj `()", "user": "5e6556fbe4b0fd0acd1586b5"}, {"problem": 23, "code": "reduce conj ()", "user": "5e5ba910e4b0fd0acd15865c"}, {"problem": 23, "code": "(partial reduce (fn [lst, each] (conj lst each)) (list))", "user": "5e65bfe4e4b0fd0acd1586b9"}, {"problem": 23, "code": "reduce conj '()", "user": "5e663073e4b0fd0acd1586bc"}, {"problem": 23, "code": "reduce conj '()", "user": "5e610da6e4b0fd0acd15868d"}, {"problem": 23, "code": "(fn\n  [lst]\n  (loop [norm lst reversed '()]\n    (if-not (= norm '())\n      (recur (rest norm) (conj reversed (first norm)))\n      reversed)))", "user": "5e668d87e4b0e171e1033681"}, {"problem": 23, "code": "(fn [xs]\n   (loop [initial-xs xs\n          reversed-xs []]\n     (if (empty? initial-xs)\n       reversed-xs\n       (recur (rest initial-xs)\n              (cons (first initial-xs) reversed-xs)))))", "user": "54dc84ede4b024c67c0cf784"}, {"problem": 23, "code": "reduce conj ()", "user": "5e66f501e4b0e171e1033686"}, {"problem": 23, "code": "(fn myreverse \n  ([items] (myreverse items []))\n  ([items reversed-items] \n    (if (empty? items)\n      reversed-items\n      (myreverse (drop-last items) (conj reversed-items (last items))))))", "user": "5e6834e0e4b04793f195eaf9"}, {"problem": 23, "code": "reduce conj ()", "user": "5e66c144e4b0e171e1033683"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5e68f6dde4b04a83ad7cd268"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5e692be9e4b04a83ad7cd269"}, {"problem": 23, "code": "#(reduce conj nil %)", "user": "5e6a9d8ee4b04a83ad7cd276"}, {"problem": 23, "code": "(fn [V]\n  (into '() V))", "user": "5e6b891ee4b04a83ad7cd27a"}, {"problem": 23, "code": "reduce #(conj %1 %2) '()", "user": "5e694485e4b04a83ad7cd26b"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5e6cfc25e4b04a83ad7cd28e"}, {"problem": 23, "code": "reduce conj ()", "user": "5e6e98dfe4b04a83ad7cd29c"}, {"problem": 23, "code": "(fn [xs] (loop [coll xs rev '()]\n            (if (empty? coll) (vec rev) (recur (rest coll) (conj rev (first coll))))\n            \n            )\n          \n          )", "user": "5e6b9955e4b04a83ad7cd27b"}, {"problem": 23, "code": "(fn [coll] (reduce (fn [acc value] (cons value acc)) [] coll))", "user": "5e694e8fe4b04a83ad7cd26c"}, {"problem": 23, "code": "reduce conj '()", "user": "5e708c4be4b085ba37836dad"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5e6e6537e4b04a83ad7cd29a"}, {"problem": 23, "code": "(fn r [sq] (if (empty? sq) '() (concat (r (rest sq)) (list (first sq)))))", "user": "5e6ff368e4b04a83ad7cd2a8"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5e6ca949e4b04a83ad7cd289"}, {"problem": 23, "code": "reduce conj '()", "user": "5e724492e4b085ba37836dc7"}, {"problem": 23, "code": "#(into '() %)", "user": "5e71b6e7e4b085ba37836dbe"}, {"problem": 23, "code": "reduce conj ()", "user": "5e7374ace4b085ba37836dd0"}, {"problem": 23, "code": "#(into () %)", "user": "5e7291a2e4b085ba37836dca"}, {"problem": 23, "code": "(fn [s]\n  (reduce (fn [temp-seq el] (conj temp-seq el)) '() (seq s)))", "user": "5e4fae60e4b027a2e10ac0b9"}, {"problem": 23, "code": "(fn [c]\n  (loop [c (seq c) d nil]\n    (if c\n      (recur (next c) (cons (first c) d))\n      d)))", "user": "5e7128eee4b085ba37836db5"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5e75f723e4b085ba37836de9"}, {"problem": 23, "code": "(fn [coll]\n  (loop [coll coll, s ()]\n    (if (seq coll)\n      (recur (rest coll) (cons (first coll) s))\n      s)))", "user": "5e76274ce4b085ba37836deb"}, {"problem": 23, "code": "reduce (fn [tex y](conj tex y)) '()", "user": "5dd95976e4b0948ae9d9ad9b"}, {"problem": 23, "code": "(fn reverse_seq [seq]\n\t(if (= (count seq) 1) [(first seq)] (conj (reverse_seq(rest seq)) (first seq)))   \n)", "user": "5e69589de4b04a83ad7cd26d"}, {"problem": 23, "code": "(fn rev\n   ([vec]\n    (rev vec []))\n   ([vec newVec]\n    (if (nil? vec)\n      newVec\n      (rev (butlast vec)  (conj newVec (last vec)))\n      ))\n)", "user": "5e77ece9e4b085ba37836df3"}, {"problem": 23, "code": "#(into () %)", "user": "5e735071e4b085ba37836dcf"}, {"problem": 23, "code": "#(reduce ( fn [acc,item] (conj acc item)) '() %)", "user": "5e78e116e4b085ba37836dfc"}, {"problem": 23, "code": "(fn [coll]\n    (loop [c coll r [] ]\n        (if (not (seq c)) r\n            (recur (rest c) (cons (first c) r)))))", "user": "5e12327ee4b099d064962fe5"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5e3c71e8e4b01d43a70e8e08"}, {"problem": 23, "code": "reduce #(into [%2] %1) []", "user": "5e67ab18e4b0e171e103368a"}, {"problem": 23, "code": "reduce (fn [acc x] (conj acc x)) '()", "user": "5e7aba9fe4b085ba37836e0c"}, {"problem": 23, "code": "(fn rev\n  ([coll] (rev coll '()))\n  ([coll acc] (if (empty? coll)\n                acc\n                (rev (rest coll) (conj acc (first coll))))))", "user": "5e7af7ffe4b085ba37836e0f"}, {"problem": 23, "code": "#(reduce (fn [acc curr] (cons curr acc)) '() %1)", "user": "5e7a5d56e4b085ba37836e0a"}, {"problem": 23, "code": "(fn [items]\n   (reduce #(conj %1 %2) '() items))", "user": "5e7b2d86e4b085ba37836e11"}, {"problem": 23, "code": "#(loop \n   [input (vec %), rev []]\n  \t(if (nil? input)\n      rev\n      (recur \n       (next input)\n       (vec (concat (conj [] (first input)) rev))\n      )\n    ) \t\n   )", "user": "5e79fcb9e4b085ba37836e08"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "5e7b437de4b085ba37836e13"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5e67b97ee4b0e171e103368b"}, {"problem": 23, "code": "(fn [items]\n  (loop [vals items\n         reverse-items []]\n    (if (not (seq vals))\n      reverse-items\n      (let [first-item (first vals)]\n        (print vals reverse-items)\n        (recur (rest vals) (cons first-item reverse-items) )))))", "user": "5e5f75a0e4b0fd0acd15867a"}, {"problem": 23, "code": "(fn rev [s] (if (= (count (seq s)) 1) (seq s) (cons (last (seq s)) (rev (butlast (seq s))))))", "user": "5048806be4b0ec70b3ef8d9e"}, {"problem": 23, "code": "(fn [col] (reduce #(cons %2 %1) [] col))", "user": "5e51a268e4b027a2e10ac0d1"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5e7b41f2e4b085ba37836e12"}, {"problem": 23, "code": "(fn [arr]\n  (loop [arr arr\n    result []]\n    (let [elem (last arr)]\n   \t (if (nil? elem)\n     \t result\n     \t (recur (drop-last arr) (conj result elem))))))", "user": "5e7f62cce4b085ba37836e3b"}, {"problem": 23, "code": "(fn [xs]\n  (reduce #(conj %1 %2) nil xs))", "user": "5e7f075ee4b085ba37836e36"}, {"problem": 23, "code": "#(into '() %)", "user": "5e7bb000e4b085ba37836e1d"}, {"problem": 23, "code": "#(into `() %)", "user": "5e807941e4b085ba37836e45"}, {"problem": 23, "code": "(fn func [coll]\n  (if (empty? coll)\n    coll\n    (concat (func (rest coll)) (list (first coll)))))", "user": "5e805895e4b085ba37836e44"}, {"problem": 23, "code": "(fn [lst]\n  (reduce conj '() lst))", "user": "5be4e6e8e4b0ed4b8aab4d06"}, {"problem": 23, "code": "#(loop [x   [] y %]\n   (if (= (count y) 0) x\n     (recur (cons  (first y) x) (rest y))))", "user": "5e81f009e4b09a7a73c8bbaf"}, {"problem": 23, "code": "(fn [seq]\n  (into '() seq))", "user": "5e8308abe4b09a7a73c8bbb4"}, {"problem": 23, "code": "(fn reverser [x]\n  (loop [r x\n         n '()]\n    (if(empty? r)\n    n\n    (recur(rest r) (conj n (first r))))))", "user": "5e832e75e4b09a7a73c8bbb5"}, {"problem": 23, "code": "(fn [coll]\n    (loop [x coll\n           result '()]\n      (if (empty? x)\n        result\n        (recur (next x)\n               (conj result (first x))))))", "user": "5e7b1ef4e4b085ba37836e10"}, {"problem": 23, "code": "#(loop [rev-seq (conj '() (first %))\n        re (rest %)]\n   (if (nil? (first re))\n     rev-seq\n     (recur (conj rev-seq (first re)) (rest re))))", "user": "5e790f6be4b085ba37836e01"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5e83a443e4b09a7a73c8bbbc"}, {"problem": 23, "code": "#(into () %)", "user": "5dcace6be4b02b31cc3da3b1"}, {"problem": 23, "code": "(fn xxx [sq]\n  (reduce #(cons %2 %1) '() sq)\n  )", "user": "5e807fcae4b085ba37836e46"}, {"problem": 23, "code": "#(loop [s % r '() ] \n   (if (empty? s) r  \n       (recur (rest s) \n              (conj r (first s))\n              )\n     ))", "user": "5e85163be4b09a7a73c8bbd0"}, {"problem": 23, "code": "#(into () %)", "user": "5e860270e4b09a7a73c8bbdb"}, {"problem": 23, "code": "(fn [x] (reduce #(cons %2 %1) (empty x) x))", "user": "5e85fa2ce4b09a7a73c8bbd9"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5e83b33fe4b09a7a73c8bbbd"}, {"problem": 23, "code": "reduce conj ()", "user": "5e860bafe4b09a7a73c8bbdd"}, {"problem": 23, "code": "#(reduce conj '() (seq %))", "user": "5e85b853e4b09a7a73c8bbd5"}, {"problem": 23, "code": "(fn [x] \n  (loop [xs (seq x)\n        r '()] \n    (if xs\n      (recur (next xs) (conj r (first xs)))\n      r\n    )\n  )\n  )", "user": "5e5f83a2e4b0fd0acd15867b"}, {"problem": 23, "code": "into '()", "user": "5e856736e4b09a7a73c8bbd2"}, {"problem": 23, "code": "#(sort (comp - compare) %)\n; #(sort > %)", "user": "5e13a6b7e4b099d064963001"}, {"problem": 23, "code": "#(into () %)", "user": "58f64f71e4b0438e51c2cef0"}, {"problem": 23, "code": "(fn [x] (reduce conj () x))", "user": "5e872aaae4b09a7a73c8bbe5"}, {"problem": 23, "code": "(fn recurs \n  [arg] (if (empty? arg) \n          nil \n          (concat (recurs (rest arg)) [(first arg)])))", "user": "5e88a676e4b0cb016954630a"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5d6f8b4de4b04d129b00f2d3"}, {"problem": 23, "code": "(partial into '())", "user": "5dc88a38e4b02f9375f4e1db"}, {"problem": 23, "code": "(fn [s]\n  (into () s))", "user": "5e7b68e8e4b085ba37836e17"}, {"problem": 23, "code": "(fn\n  [coll]\n  (reduce\n    (fn [rev coll]\n      (conj\n        rev (first \n              (drop (- (count coll) (count rev) 1)\n              coll))))\n  []\n  (repeat (count coll) coll)))", "user": "5e87194ce4b09a7a73c8bbe4"}, {"problem": 23, "code": "#(loop [xs (seq %), res ()]\n   (if (= () xs)\n     res\n     (recur (rest xs) (conj res (first xs) ))))", "user": "5e8cdc60e4b0cb0169546327"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5e83696ce4b09a7a73c8bbb7"}, {"problem": 23, "code": "(fn [coll]\n   (loop [coll (into [] coll)\n          index (- (count coll) 1)\n          reversed-coll []]\n     (if (= index 0)\n       (conj reversed-coll (get coll index))\n       (recur coll (- index 1)\n              (conj reversed-coll\n                    (get coll index))))))", "user": "5e1ab7ede4b0dc9594008519"}, {"problem": 23, "code": "#(into '() %)", "user": "5e80edc3e4b09a7a73c8bba9"}, {"problem": 23, "code": "(fn [input] (reduce (fn [coll y] (conj coll y)) '() input))", "user": "5e8c0c5be4b0cb0169546320"}, {"problem": 23, "code": "#(reduce (fn [xs x] (cons x xs)) [] %)", "user": "5e7dc2d8e4b085ba37836e2f"}, {"problem": 23, "code": "(fn rev [xs]\n  (reduce conj () xs))", "user": "5e912d95e4b0cb0169546352"}, {"problem": 23, "code": "#(loop [reversed [] from %]\n  (cond\n    (nil? from) reversed\n    :else (recur (cons (first from) reversed) (next from))\n    )\n  )", "user": "5e8ce2fee4b0cb0169546328"}, {"problem": 23, "code": "reduce conj ()\n; apply conj ()", "user": "5e92bb9de4b0fbed045a37eb"}, {"problem": 23, "code": "reduce conj ()", "user": "5c3e5227e4b08cd430848e80"}, {"problem": 23, "code": "(fn x [coll]\n  (if (empty? coll) '()\n    (concat (x (rest coll)) (list (first coll)))))", "user": "5e84b48ee4b09a7a73c8bbc8"}, {"problem": 23, "code": "(fn [x] (reduce conj '() x ) )", "user": "5e94ff5fe4b0fbed045a37ff"}, {"problem": 23, "code": "#(into () %)", "user": "5e954b9ee4b0fbed045a3809"}, {"problem": 23, "code": "(fn [l]\n      (reduce\n        #(conj % %2)\n        '()\n        l\n      )\n)", "user": "5e958767e4b0fbed045a380b"}, {"problem": 23, "code": "#(loop [rv [] sq %]\n   (if (empty? sq)\n     rv\n     (recur (conj rv (last sq)) (butlast sq))\n )\n)", "user": "5e947a69e4b0fbed045a37f8"}, {"problem": 23, "code": "(fn my-reverse [s]\n  (loop [oldseq s\n         newseq '()]\n    (if (empty? oldseq)\n      newseq\n      (recur (rest oldseq) (conj newseq (first oldseq))))))", "user": "5e94e759e4b0fbed045a37fd"}, {"problem": 23, "code": "reduce conj '()", "user": "5e959d08e4b0fbed045a380d"}, {"problem": 23, "code": "#(into '() %)", "user": "5e95c88de4b0fbed045a380e"}, {"problem": 23, "code": "(fn altReverse\n  [lst]\n  (loop [nlst []\n         vct lst]\n    (if (empty? vct)\n      nlst\n      (recur (conj nlst (last vct)) (butlast vct)))))", "user": "5e9636fee4b0fbed045a3816"}, {"problem": 23, "code": "#(loop [f %1 t ()]\n   (if (empty? f)\n     t\n     (recur (rest f) (cons (first f) t))))", "user": "5e96c662e4b0157ca96647ca"}, {"problem": 23, "code": "#(into '() %)", "user": "5e976fa8e4b0157ca96647cf"}, {"problem": 23, "code": "(fn rev\n  [lst]\n  (loop\n  [newList '()\n   oldList lst]\n  (if (nil? (first oldList))\n    newList\n    (recur (concat newList (list (last oldList))) (butlast oldList)))))", "user": "5e978fe5e4b0157ca96647d1"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5e967418e4b0157ca96647c6"}, {"problem": 23, "code": "(fn f [l] \n  (if (empty? l)\n    []\n    (conj (f (rest l))(first l))\n    ))", "user": "5e98e338e4b0157ca96647db"}, {"problem": 23, "code": "(fn rev [s]\n  (if (empty? s)\n    s\n    (cons (last s) (rev (butlast s)))))", "user": "5e98e8a9e4b0157ca96647dc"}, {"problem": 23, "code": "#(reduce conj()%)", "user": "5e980e6be4b0157ca96647d6"}, {"problem": 23, "code": "#(into '() %)", "user": "5e996e76e4b0157ca96647e4"}, {"problem": 23, "code": "reduce conj ()", "user": "5e99cbd4e4b0157ca96647e6"}, {"problem": 23, "code": "#(reduce (fn [ x y] (cons y x))  [] %)", "user": "5e57f45fe4b027a2e10ac103"}, {"problem": 23, "code": "(fn my-reverse2 [l]\n  (if (empty? l) [] (conj (my-reverse2 (rest l)) (first l)))\n  )", "user": "5e9a3814e4b0157ca96647e7"}, {"problem": 23, "code": "(fn reverseSeq \n  [lst]\n  (into '() lst))", "user": "5e95013fe4b0fbed045a3800"}, {"problem": 23, "code": "#(into () %)", "user": "5e9791cbe4b0157ca96647d2"}, {"problem": 23, "code": "(fn reverse-sequence [sequence]\n  (reduce #(concat (vector %2) %1) [] sequence))", "user": "5e2ef900e4b05b4b015161fc"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5e950310e4b0fbed045a3802"}, {"problem": 23, "code": "(fn [is]\n    (loop [[i & rst] (seq is)\n           acc []]\n      (if i\n        (recur rst (cons i acc))\n        acc)))", "user": "5e8def8de4b0cb0169546332"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5e9771dee4b0157ca96647d0"}, {"problem": 23, "code": "(fn [x]\n  (reduce conj (take 1 x) (rest x)))", "user": "59750a68e4b01722bebd4cba"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5e9df069e4b0157ca9664807"}, {"problem": 23, "code": "#(into '() %)", "user": "5e9b6471e4b0157ca96647f0"}, {"problem": 23, "code": "#(into () %)", "user": "5e9e8648e4b00a66d4a95178"}, {"problem": 23, "code": "(fn [col] (reduce #(conj %1 %2) '() col))", "user": "5e9f38cce4b00a66d4a9517e"}, {"problem": 23, "code": "#(loop [s %\n        c []]\n   (if (empty? s)\n     c\n     (recur (next s) (cons (first s) c))))", "user": "5e9b7aefe4b0157ca96647f1"}, {"problem": 23, "code": "(fn revers-me\n  [elements]\n  (if (= (count elements) 1)\n    [(first elements)]\n    (conj (revers-me (rest elements)) (first elements))))", "user": "5e9f3c2ce4b00a66d4a9517f"}, {"problem": 23, "code": "(fn reverse1\n  [coll]\n  (let [result (reduce conj () coll)]\n    (if (vector? coll)\n      (into [] result)\n      result\n      )))", "user": "5e9d99f9e4b0157ca9664806"}, {"problem": 23, "code": "(fn [coll]\n (reduce conj '() coll))", "user": "5e9ff8fbe4b00a66d4a95185"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5cdb1914e4b05ee0cb311727"}, {"problem": 23, "code": "(fn own-reverse [coll]\n  (loop [current-coll coll result (empty coll)]\n    (if (= (count coll) (count result))\n      (if (set? (empty coll))\n        (into '() result)\n        (into (empty coll) result))\n      (recur (drop-last current-coll)\n             (conj result (last current-coll))))))", "user": "5e4e3c31e4b027a2e10ac0ad"}, {"problem": 23, "code": "#(vec (reduce (fn [arr elem] (conj arr elem)) '() %))", "user": "5e85d0bde4b09a7a73c8bbd6"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5e9e408fe4b00a66d4a95172"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5e9d1c75e4b0157ca9664801"}, {"problem": 23, "code": "#(loop [reversed '()\n        original %]\n   (if (empty? original)\n     reversed\n     (recur\n      (cons (first original) reversed)\n      (rest original))))", "user": "5e950178e4b0fbed045a3801"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5e9878b9e4b0157ca96647d8"}, {"problem": 23, "code": "(fn reverseSequence \n  [lst]\n  (into '() lst))", "user": "5ea3711ae4b00a66d4a9519d"}, {"problem": 23, "code": "#(reduce conj nil %)", "user": "5ea444b7e4b00a66d4a951a0"}, {"problem": 23, "code": "(fn rev [l]\n  (reduce (fn [a b] (cons b a)) '() l))", "user": "5ea516e1e4b00a66d4a951a6"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5ea0d417e4b00a66d4a9518a"}, {"problem": 23, "code": "#(into '() %)", "user": "5ea580a3e4b00a66d4a951a7"}, {"problem": 23, "code": "(fn f\n  ([seq]\n  \t(f seq nil))\n  ([seq rev]\n   (if (empty? seq)\n     rev\n     (f (rest seq) (cons (first seq) rev)))))", "user": "5ea67a5ae4b00a66d4a951ae"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5ea63100e4b00a66d4a951ab"}, {"problem": 23, "code": "#(reduce conj() %)", "user": "5ea6f88de4b00a66d4a951b1"}, {"problem": 23, "code": "reduce conj()", "user": "5ea7b04de4b00a66d4a951b6"}, {"problem": 23, "code": "into ()", "user": "5e9e642ce4b00a66d4a95174"}, {"problem": 23, "code": "(fn rev [xs] (loop [x xs r '()] (if (empty? x) r (recur (rest x) (cons  (first x) r)))))", "user": "5ea806d5e4b00a66d4a951b9"}, {"problem": 23, "code": "(fn [zeq] \n  (loop\n    [ll zeq\n     result nil]\n    (if \n      (empty? ll)\n      result\n      (recur (rest ll) (cons (first ll) result))\n     )\n    )\n  )", "user": "5ea97df7e4b00a66d4a951c8"}, {"problem": 23, "code": "(fn [x] (loop [accum []\n                        v  x]\n                (if (empty? v)\n                    accum\n                  (recur (conj accum (last v))\n                         (drop-last v)))))", "user": "5ea8bed8e4b00a66d4a951c2"}, {"problem": 23, "code": "(fn [coll]\n  (reduce conj '() coll))", "user": "5da70ceee4b000c986472c11"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5d1b7ed6e4b02ea6f0fb6982"}, {"problem": 23, "code": "reduce (fn [s, c] (conj s c)) '()", "user": "5eac6a63e4b00a66d4a951e0"}, {"problem": 23, "code": "(fn [s] (reduce conj () s))", "user": "5eac8e27e4b00a66d4a951e3"}, {"problem": 23, "code": "(fn [x] (sort #(compare %2 %1) x))", "user": "5e850761e4b09a7a73c8bbcf"}, {"problem": 23, "code": "(fn [s] (reduce conj () s))", "user": "5eac34dbe4b00a66d4a951df"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "50bc759ae4b0594b91591c58"}, {"problem": 23, "code": "#(reduce (fn [xs x] (cons x xs)) [] %)", "user": "5dd3383be4b0948ae9d9ad5e"}, {"problem": 23, "code": "#(reduce (fn [a b] (cons b a)) [] %1)", "user": "5eb0878ae4b00a66d4a951f5"}, {"problem": 23, "code": "#(loop [[x & xs] (seq %)\n        r (list)]\n   (if (nil? x)\n     r\n     (recur xs (conj r x))))", "user": "5eb1c786e4b00a66d4a95201"}, {"problem": 23, "code": "#(reduce (fn [a b] (conj a b)) '() (apply list %))", "user": "5eb1e42ae4b00a66d4a95202"}, {"problem": 23, "code": "into ()", "user": "5eb46c9de4b00a66d4a9521e"}, {"problem": 23, "code": "reduce (fn [a b] (conj a b)) '()", "user": "5eb4927fe4b00a66d4a95221"}, {"problem": 23, "code": "(fn my-reverse\n  [s]\n  (loop [s (seq s)\n         out '()]\n    (if (empty? s)\n      out\n      (recur (rest s)\n             (conj out (first s))))))", "user": "5eb22708e4b00a66d4a95204"}, {"problem": 23, "code": "(fn [l]\n    (reduce\n     (fn [res item]\n       (conj res item))\n     '() l))", "user": "5a3e1243e4b0447ef91cc5ae"}, {"problem": 23, "code": "(fn [coll]\n          (reduce (fn [result item]\n                    (concat [item] result)) (empty coll) coll))", "user": "5eb1a80ce4b00a66d4a951ff"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5eb56fc1e4b00a66d4a95224"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "5eb5d9bbe4b00a66d4a9522e"}, {"problem": 23, "code": "into ()", "user": "5eb193fde4b00a66d4a951fe"}, {"problem": 23, "code": "(fn aux[coll](\n    if (empty? (rest coll))\n    [(first coll)]\n    (conj (aux (rest coll)) (first coll))\n  ))", "user": "5eb59432e4b00a66d4a95227"}, {"problem": 23, "code": "(fn foo \n  ([li] (foo li []) )\n  ([li acc]\n    (if (empty? li) acc (recur (rest li) (cons  (first li) acc )))\n  )\n )", "user": "5eb3f908e4b00a66d4a9521a"}, {"problem": 23, "code": "(partial reduce conj '())", "user": "5d866acbe4b0915913b1d39c"}, {"problem": 23, "code": "#(\n     loop [stream % rev (empty %)] \n      (if (empty? stream)\n        rev\n        (recur (rest stream) (concat [(first stream)]  rev)))\n     )", "user": "5eb41273e4b00a66d4a9521b"}, {"problem": 23, "code": "reduce conj '()", "user": "5eb741e4e4b00a66d4a9523b"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5ebb0f7be4b00a66d4a95261"}, {"problem": 23, "code": "(fn [s] (reduce #(conj %1 %2) () s))", "user": "5ea970d1e4b00a66d4a951c6"}, {"problem": 23, "code": "(fn [s] (reduce \n         (fn [ss e] (conj ss e))\n        '()\n         s))", "user": "5e4beca9e4b0889a8790a560"}, {"problem": 23, "code": "into ()", "user": "53b49c2ce4b047364c0444b7"}, {"problem": 23, "code": "(fn reversing [input]\n  (loop [input input\n         ouput []]\n    (if (empty? input)\n      ouput\n      (recur (drop-last input) (conj ouput (last input))))))", "user": "5eb3d02be4b00a66d4a95215"}, {"problem": 23, "code": "#(reduce (fn [acc x] (cons x acc)) '() %)", "user": "5ebc7c13e4b00a66d4a95267"}, {"problem": 23, "code": "#(loop [rev [] lst %] (if (nil? (first lst)) rev (recur (concat (vector (first lst)) rev) (rest lst))))", "user": "51412b0ae4b0694e2952b79d"}, {"problem": 23, "code": "(fn ! [x]\n  (if (empty? x)\n    x\n    (cons (last x)\n          (! (butlast x)))))", "user": "5ebdb3d2e4b00a66d4a95275"}, {"problem": 23, "code": "into ()", "user": "5ebd7296e4b00a66d4a95273"}, {"problem": 23, "code": "(fn [coll] (reduce conj () coll))", "user": "5eae201ae4b00a66d4a951eb"}, {"problem": 23, "code": "#(loop [sq % result []] \n   (if (= 1 (count sq)) (conj result (last sq))\n   (recur (take (dec (count sq)) sq) (conj result (last sq)))))", "user": "5ebd63dee4b00a66d4a95271"}, {"problem": 23, "code": "into ()", "user": "5ebf7a9ce4b00a66d4a95280"}, {"problem": 23, "code": "(fn\n   ([xs & ans]\n    (if (empty? xs)\n      ans\n      (recur (rest xs) (cons (first xs) (or ans [])))\n      )\n    )\n   )", "user": "5ebc9feae4b00a66d4a95268"}, {"problem": 23, "code": "reduce (fn [c i] (conj c i)) '()", "user": "5ebff55de4b00a66d4a95286"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5e2f73e5e4b05b4b01516204"}, {"problem": 23, "code": "reduce #(cons %2 %1) []", "user": "5ec0de29e4b00a66d4a9528e"}, {"problem": 23, "code": "#(into () %)", "user": "5ec0db8be4b00a66d4a9528d"}, {"problem": 23, "code": "#(into '() %)", "user": "5ec21ef0e4b00a66d4a95299"}, {"problem": 23, "code": "(fn [coll]\n  (loop [coll coll rev_coll ()]\n    (if (empty? coll) rev_coll\n        (recur (rest coll) (cons (first coll) rev_coll)))))", "user": "5ebaa4a3e4b00a66d4a95258"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "5ec25800e4b00a66d4a9529b"}, {"problem": 23, "code": "(fn __ [seq]\n  (loop [coll seq\n         rev ()]\n    (if (empty? coll)\n      rev\n      (recur (rest coll) (conj rev (first coll))))))", "user": "5ec2d9e5e4b00a66d4a952a0"}, {"problem": 23, "code": "(fn [s] (reduce conj () s))", "user": "5ebd3e7ae4b00a66d4a9526f"}, {"problem": 23, "code": "reduce #(cons %2 %1) []", "user": "5cafaa0fe4b026601754b89e"}, {"problem": 23, "code": "into ()", "user": "5ebaf687e4b00a66d4a9525b"}, {"problem": 23, "code": "(fn [xs]\n  (loop [[f & r] (vec xs)\n         y '()]\n    (if (seq r)\n      (recur r (cons f y))\n      (cons f y))))", "user": "5ec3a13ae4b08d0ec38692b9"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "5e9154c1e4b0cb0169546354"}, {"problem": 23, "code": "#(reduce (fn [x y] (conj x y) ) (list) %)", "user": "5ec5f7f2e4b08d0ec38692d1"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5cc092d1e4b0ccb061962790"}, {"problem": 23, "code": "(fn [x] (reduce #(cons %2 %1) (take 0 x) x))", "user": "5ec66326e4b08d0ec38692d5"}, {"problem": 23, "code": "reduce conj '()", "user": "5ec6705be4b08d0ec38692d6"}, {"problem": 23, "code": "(fn [y] (for [x (range (count y)) \n      :let [a (- (count y) x)]]\n    (last (take a y))\n  ))", "user": "5ebed654e4b00a66d4a9527c"}, {"problem": 23, "code": "into '()", "user": "5eb6561fe4b00a66d4a95233"}, {"problem": 23, "code": "(fn [seq] (reduce (fn [l a] (conj l a)) '() seq))", "user": "5ec7550ce4b08d0ec38692dd"}, {"problem": 23, "code": "#(reduce (fn [a b] (cons b a)) [] %)", "user": "5eb84ef4e4b00a66d4a95244"}, {"problem": 23, "code": "(fn [s] (reduce conj () s))", "user": "5ec819b4e4b08d0ec38692e2"}, {"problem": 23, "code": "(fn rev [coll]\n    (reduce conj '() coll)\n  )", "user": "5ebb4751e4b00a66d4a95262"}, {"problem": 23, "code": "(fn [s] (reduce (fn [acc x] (conj acc x)) '() s))", "user": "5e0b6375e4b099d064962f7b"}, {"problem": 23, "code": "(fn reverse-seq\n  ([seq] (reverse-seq seq '()))\n  ([seq f]\n   (let [rev-seq f]\n     (if (empty? seq)\n       rev-seq\n       (reverse-seq (rest seq) (conj rev-seq (first seq)))))))", "user": "5ec943fde4b08d0ec38692f1"}, {"problem": 23, "code": "reduce conj ()", "user": "5ec948dde4b08d0ec38692f2"}, {"problem": 23, "code": "into ()", "user": "5ec825eee4b08d0ec38692e3"}, {"problem": 23, "code": "(fn [sq] (reduce conj '() sq))", "user": "55905996e4b027778923766f"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "5ec9c395e4b08d0ec38692f7"}, {"problem": 23, "code": "#(apply conj '() %)", "user": "5ec6de19e4b08d0ec38692da"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5ec6b354e4b08d0ec38692d8"}, {"problem": 23, "code": "reduce conj '()", "user": "5eccbce6e4b016b56eae058e"}, {"problem": 23, "code": "(fn [coll]\n  (loop [c coll \n         r ()]\n    (if (empty? c)\n      r\n      (recur (rest c) (cons (first c) r)))))\n\n; Amazing solution, Wow\n;\n; reduce conj ()\n; apply conj ()", "user": "5eccc5c2e4b016b56eae058f"}, {"problem": 23, "code": "(fn\n  [coll]\n  (reduce conj () coll))", "user": "5ec7d7f2e4b08d0ec38692e1"}, {"problem": 23, "code": "(fn [sq]\n  (loop [s sq new nil]\n    (if (empty? s)\n      new\n      (recur (rest s) (conj new (first s)))\n      )\n    )\n  )", "user": "5dd84170e4b0948ae9d9ad93"}, {"problem": 23, "code": "reduce #(cons %2 %1) []", "user": "5ece3905e4b016b56eae059a"}, {"problem": 23, "code": "reduce conj ()", "user": "5ece3d25e4b016b56eae059b"}, {"problem": 23, "code": "apply conj ()", "user": "5ec2dd45e4b00a66d4a952a1"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5ece8d93e4b016b56eae059e"}, {"problem": 23, "code": "#(reduce (fn [rev r] (conj rev r)) () %)", "user": "5ecf4ee4e4b016b56eae05a6"}, {"problem": 23, "code": "(fn [x] (into `() x))", "user": "5ecf55dae4b016b56eae05a8"}, {"problem": 23, "code": "#(into () %1)", "user": "5cc7a7a7e4b0ccb06196283b"}, {"problem": 23, "code": "(fn foo\n  ([x] (foo x []))\n  ([x y]\n    (if (empty? x)\n      y\n      (foo \n        (butlast x) \n        (concat \n          y \n          [(last x)]\n        )\n      )\n    )\n  )\n)", "user": "5ececec5e4b016b56eae059f"}, {"problem": 23, "code": "#(reduce (fn\n           [xs, item]\n           (cons item, xs)) [] %)", "user": "5ecfd429e4b016b56eae05a9"}, {"problem": 23, "code": ";reduce #(cons %2 %1) ()\nreduce conj ()", "user": "5ed03b7fe4b016b56eae05ae"}, {"problem": 23, "code": "(fn my-reverse\n  ([s acc]\n   (if s\n     (recur (next s) (conj acc (first s)))\n     acc))\n  ([s]\n   (my-reverse s '())))", "user": "5ed09be3e4b016b56eae05b2"}, {"problem": 23, "code": "#(into '() %)", "user": "5ed08785e4b016b56eae05b1"}, {"problem": 23, "code": "(partial reduce conj '())", "user": "5ecc0831e4b016b56eae058c"}, {"problem": 23, "code": "(fn f [s] (into () s))", "user": "5ed15e23e4b016b56eae05ba"}, {"problem": 23, "code": "#(reduce (fn [acc, val] (concat [val] acc)) [] %)", "user": "5ed3c43be4b016b56eae05c4"}, {"problem": 23, "code": "(fn [accum, xs]\n (let [newaccum (conj accum (first xs))] \n   (if (= (count xs) 1)\n     newaccum\n     (recur newaccum (rest xs)) \n    )\n  )\n)\n()", "user": "5ed3f2b9e4b016b56eae05c6"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5ed42731e4b016b56eae05c8"}, {"problem": 23, "code": "(fn [coll]\n  (loop [[r & more :as all] (seq coll)\n         acc '()]\n    (if all\n      (recur more (cons r acc))\n      acc)))", "user": "5ed4b1e8e4b016b56eae05ce"}, {"problem": 23, "code": "#(\n  (fn [coll reversed]\n    (if (= 0 (count coll))\n      reversed\n      (recur (drop-last coll) (conj reversed (last coll)))))\n  % [])", "user": "5ed52854e4b016b56eae05d2"}, {"problem": 23, "code": "reduce (fn [a b] (cons b a)) []", "user": "5ed13460e4b016b56eae05b8"}, {"problem": 23, "code": "#(into () %)", "user": "5ed5fafbe4b016b56eae05da"}, {"problem": 23, "code": "#(into () %)", "user": "5ed11279e4b016b56eae05b7"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5ed677bee4b016b56eae05e0"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5ed4e970e4b016b56eae05cf"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5ecf55aae4b016b56eae05a7"}, {"problem": 23, "code": "(fn[l] (reduce #(conj %1 %2) '() l))", "user": "5ed6030de4b016b56eae05db"}, {"problem": 23, "code": "(fn aa [x] \n    (if (empty? x)\n        ()\n  (concat  (aa (rest x)) (list (first x)) ) \n        )\n)", "user": "5ed30cb6e4b016b56eae05c2"}, {"problem": 23, "code": "#(for [i (range 0 (count %))] (get (into [] %) (dec (- (count %) i))))", "user": "5ed80d50e4b016b56eae05eb"}, {"problem": 23, "code": "reduce conj ()", "user": "5ed8a12fe4b0c7845d86b0d7"}, {"problem": 23, "code": ";; (into '() %)\n\n(fn [coll]\n  (loop [x (first coll) rst (rest coll) rev '()]\n    (if (nil? x) rev\n        (recur (first rst) (rest rst) (conj rev x)))))", "user": "5ed9b912e4b0c7845d86b0e3"}, {"problem": 23, "code": "apply conj '()", "user": "5ed9c2cde4b0c7845d86b0e4"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5e382cfae4b01d43a70e8db7"}, {"problem": 23, "code": "(fn reverse'\n  ([origSeq]\n;   (reverse' (rest origSeq) (first origSeq) )\n   (reverse' origSeq [])\n   )\n  ([origSeq newSeq]\n   (if (empty? origSeq)\n     newSeq\n     (reverse' (rest origSeq) (cons (first origSeq) newSeq) )\n     )\n   )\n  )", "user": "5ed81965e4b016b56eae05ed"}, {"problem": 23, "code": "(fn\n  [iseq]\n  (loop [iseq iseq\n         result []]\n    (if (empty? iseq)\n      result\n      (recur (rest iseq) (cons (first iseq) result)))))", "user": "5ed65b59e4b016b56eae05df"}, {"problem": 23, "code": "reduce (fn [res n] (conj res n)) '()", "user": "5ed875abe4b016b56eae05f2"}, {"problem": 23, "code": "into ()", "user": "5edb07dde4b0c7845d86b0ed"}, {"problem": 23, "code": "(partial into ())", "user": "5edc645ae4b0c7845d86b0f2"}, {"problem": 23, "code": "(fn [nums] (reduce (fn [c q] (cons q c)) [] nums ) )", "user": "5edc16e1e4b0c7845d86b0f1"}, {"problem": 23, "code": "(fn rev [s] (if (= 1 (count s)) s (cons (last s) (rev (list* (pop (vec s)))))))", "user": "5edb9dd2e4b0c7845d86b0ef"}, {"problem": 23, "code": "reduce conj ()", "user": "504e15a8e4b078edc5f593c1"}, {"problem": 23, "code": "(fn [col] (reduce #(cons %2 %1) [] col))", "user": "565b371fe4b068f2fe63dbff"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5ed4482be4b016b56eae05ca"}, {"problem": 23, "code": "reduce conj ()", "user": "5edd0ad2e4b0c7845d86b0f4"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5ed8bd07e4b0c7845d86b0d8"}, {"problem": 23, "code": "#(reduce (fn [o n] (cons n o)) [] %)", "user": "5e9cdfa1e4b0157ca9664800"}, {"problem": 23, "code": "reduce #(cons %2 %1) []", "user": "5edd6eb7e4b0c7845d86b0f7"}, {"problem": 23, "code": "(fn reverse2 \n  ([s] (reverse2 s '()))\n  ([s result] (if (empty? s) result (recur (rest s) (conj result (first s))))))", "user": "5eddc271e4b0c7845d86b0fa"}, {"problem": 23, "code": "(fn [lst] (reduce #(cons %2 %1) [] lst))", "user": "53c73e8ae4b00fb29b2212a5"}, {"problem": 23, "code": "reduce (fn[acc el] (conj acc el)) '()", "user": "5ede8210e4b0c7845d86b0fe"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5ed8843de4b016b56eae05f3"}, {"problem": 23, "code": "(partial reduce conj '())", "user": "5ed6c4ede4b016b56eae05e3"}, {"problem": 23, "code": "(fn [xs]\n  ((fn [xs acc]\n     (if (empty? xs)\n       acc\n       (recur (rest xs) (conj acc (first xs)))))\n   xs '()))", "user": "5edfb1e5e4b0c7845d86b107"}, {"problem": 23, "code": "(fn [seq-in]\n  (loop [seq-todo seq-in seq-rev []]\n    (if-not (seq seq-todo)\n      seq-rev\n      (recur (rest seq-todo) (cons (first seq-todo) seq-rev))))\n            \n  )", "user": "4f033c99535dcb61093f6a7e"}, {"problem": 23, "code": "reduce #(cons %2 %1) []", "user": "5e909685e4b0cb016954634d"}, {"problem": 23, "code": "(fn f [s]\n  (if (empty? s)\n    s\n    (conj (f (drop-last s)) (last s))\n  )\n)", "user": "5ee2b376e4b029a2061bbe81"}, {"problem": 23, "code": "reduce conj ()", "user": "5ee0b107e4b029a2061bbe70"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5ee4ae10e4b029a2061bbe8f"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "5ee543bde4b029a2061bbe95"}, {"problem": 23, "code": "#(into () %)", "user": "5ec03772e4b00a66d4a95289"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5ee607f2e4b029a2061bbe96"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5ee4545ee4b029a2061bbe8d"}, {"problem": 23, "code": "(fn [values] (reduce conj '() values))", "user": "5ee66158e4b029a2061bbe98"}, {"problem": 23, "code": "(fn [coll]\n  (loop [coll coll\n         acc nil]\n    (if (empty? coll)\n      acc\n      (recur (next coll)\n             (cons (first coll) acc))\n      )\n    )\n  )", "user": "5ee738dee4b029a2061bbea2"}, {"problem": 23, "code": "(fn myReverse [col]\n   (if (> (count col) 0)\n     (conj (myReverse (rest col)) (first col))\n     []\n     )\n   )", "user": "5ee75f8be4b029a2061bbea5"}, {"problem": 23, "code": "(fn [s]\n  (reduce conj '() s))", "user": "5ee7b49de4b029a2061bbea6"}, {"problem": 23, "code": "(fn [x]\n  (loop [i 0\n         revd (empty x)]\n    (if (= i (count x))\n      revd\n        (recur\n          (inc i)\n          (cons\n            (#(get (into [] %1) %2) x i)\n            revd)))))", "user": "5ee7cf92e4b029a2061bbea9"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5ee7bc8ce4b029a2061bbea7"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5ee81beae4b029a2061bbeac"}, {"problem": 23, "code": "#(loop [s (into [] %) new-seq [] ind (dec (count %))]\n          (if (= ind -1)\n            new-seq\n            (recur s (conj new-seq (nth s ind)) (dec ind))))", "user": "5ee888a4e4b029a2061bbeb2"}, {"problem": 23, "code": "reduce (fn [acc x] (cons x acc)) '()", "user": "5ee93720e4b029a2061bbeb7"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5ecda821e4b016b56eae0598"}, {"problem": 23, "code": "(fn [lst]\n  (loop [lst lst rev '()]\n    (let [fst (first lst) rst (rest lst)]\n    (if (nil? fst)\n      rev\n      (recur rst (conj rev fst))))))", "user": "5de5fd64e4b0948ae9d9ae20"}, {"problem": 23, "code": "#(into () %)", "user": "5eea8f0de4b029a2061bbec3"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5eea5c98e4b029a2061bbebf"}, {"problem": 23, "code": "#(into () %)", "user": "5eeb1cc3e4b029a2061bbecc"}, {"problem": 23, "code": "(fn [args]\n  (reduce (fn [acc, arg] (conj acc arg)) '() args))", "user": "5eeb03dde4b029a2061bbeca"}, {"problem": 23, "code": "(fn f\n  ([l] (f l '()))\n  ([l rs] (if (empty? l) rs (recur (rest l) (conj rs (first l))))))", "user": "5e373c08e4b0650de70e2b41"}, {"problem": 23, "code": "reduce conj '()", "user": "5eebbf9ee4b029a2061bbed2"}, {"problem": 23, "code": "(fn [coll]\n   (reduce (fn [new-coll item]\n             (cons item new-coll))\n     []\n     coll))", "user": "5eecd339e4b07c55ae4a0507"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "5eee7311e4b07c55ae4a0510"}, {"problem": 23, "code": "(fn [s]\n  (into '() s))", "user": "5eeeaf56e4b07c55ae4a0514"}, {"problem": 23, "code": "reduce conj ()", "user": "5ea1e99de4b00a66d4a9518d"}, {"problem": 23, "code": "(fn [coll] (reduce conj () coll))", "user": "5cec07fce4b0a17bb84e2bf0"}, {"problem": 23, "code": "into ()", "user": "5eee9352e4b07c55ae4a0512"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5eecf110e4b07c55ae4a050b"}, {"problem": 23, "code": "into '()", "user": "5eee80ede4b07c55ae4a0511"}, {"problem": 23, "code": "#(into '() %)", "user": "5ee7274ce4b029a2061bbea0"}, {"problem": 23, "code": "(fn [coll]\n  (let [coll (into '() coll)]\n   (loop [new (empty coll)\n          n (dec (count coll))]\n     (if (zero? n)\n      (conj new (nth coll 0))\n      (recur (conj new (nth coll n))(dec n))))))", "user": "5cc6b681e4b0ccb061962828"}, {"problem": 23, "code": "#(loop [l % n []] (if (seq l) (recur (drop-last l) (conj n (last l))) n))", "user": "5eec1e4be4b07c55ae4a0503"}, {"problem": 23, "code": "(fn rev [coll]\n  (if (empty? coll)\n  []\n  (conj (rev (rest coll)) (first coll))))", "user": "5eec1001e4b07c55ae4a0502"}, {"problem": 23, "code": "reduce (fn [x y] (conj x y)) ()", "user": "5ed70b97e4b016b56eae05e6"}, {"problem": 23, "code": "(fn [seq]\n  (reduce conj () seq))", "user": "5ef381a3e4b07c55ae4a053c"}, {"problem": 23, "code": "(fn newrev [xs]\n  (if (= (count xs) 2)\n    (list (second xs) (first xs))\n    (conj (newrev (take (- (count xs) 1) xs)) (last xs))))", "user": "5ef18431e4b07c55ae4a0529"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5ef43ff6e4b07c55ae4a0540"}, {"problem": 23, "code": "(fn reverse-a-sequence [s]\n  (reduce #(cons %2 %1) '() s))", "user": "5ef4677ce4b07c55ae4a0542"}, {"problem": 23, "code": "(fn [coll]\n  (loop [orig coll\n         rev '()]\n    (if (= orig '())\n      rev\n      (recur (rest orig) (conj rev (first orig))))))", "user": "5ef4bfb4e4b07c55ae4a0545"}, {"problem": 23, "code": "(fn [xs] \n  (let [iter (fn iter [s rs] \n               (if (last s) \n                 (iter (butlast s) (conj rs (last s))) \n                 rs))] \n    (iter xs [])))", "user": "5ee09da9e4b029a2061bbe6f"}, {"problem": 23, "code": "reduce (fn [l elem] (conj l elem)) '()", "user": "5ef5ee81e4b07c55ae4a054a"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5ec540d8e4b08d0ec38692c7"}, {"problem": 23, "code": "(fn [coll]\n  (reduce (fn [temp-coll elem] (cons elem temp-coll))\n          ()\n          coll))", "user": "5ef28e95e4b07c55ae4a0535"}, {"problem": 23, "code": "reduce conj '()", "user": "5dd45bb8e4b0948ae9d9ad6b"}, {"problem": 23, "code": "(fn [ret coll]\n  (if (empty? coll)\n    ret\n    \n    (recur (conj ret (first coll))\n           (rest coll)))) '()", "user": "5ef77cc1e4b09b61f08553c1"}, {"problem": 23, "code": "#(reduce (fn [acc item] (conj acc item)) '() %)", "user": "5ef8e9e0e4b09b61f08553cb"}, {"problem": 23, "code": "(fn reverse-seq\n  ([s] (reverse-seq '() s))\n  ([new-s s] (if (empty? s)\n               new-s\n               (reverse-seq (conj new-s (first s)) (rest s)))))", "user": "5ef9ea69e4b09b61f08553d1"}, {"problem": 23, "code": "(fn [coll]\n  (loop [colle coll\n         result '()]\n    (if (empty? colle)\n      result\n      (recur (drop 1 colle) (conj result (first colle))))))", "user": "5ec91154e4b08d0ec38692ed"}, {"problem": 23, "code": "(fn [a-list]\n  (loop [the-list a-list result []]\n    (if (empty? the-list) \n      result \n      (recur (drop 1 the-list) (cons (first the-list) result)))))", "user": "504e0a1de4b078edc5f593a7"}, {"problem": 23, "code": "(fn rev [ls]\n  (if (empty? ls)\n    []\n    (conj \n     (rev (rest ls))\n     (first ls))\n    )\n  )", "user": "5efcee8fe4b0cf489e8d7efd"}, {"problem": 23, "code": "(fn [coll]\n   (reduce #(cons %2 %1) [] coll))", "user": "5eff4dc1e4b0cf489e8d7f0e"}, {"problem": 23, "code": "#(reduce\n  (fn [acc item]\n    (concat [item] acc))\n  []\n  %)", "user": "5f009162e4b0cf489e8d7f1a"}, {"problem": 23, "code": "reduce conj ()", "user": "5f00640ae4b0cf489e8d7f19"}, {"problem": 23, "code": "reduce conj '()", "user": "5c31d89ce4b0d62ef62d9f2f"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5f016f37e4b0cf489e8d7f20"}, {"problem": 23, "code": "into ()", "user": "5eff339ae4b0cf489e8d7f0c"}, {"problem": 23, "code": "#(into '() (seq %))", "user": "5f0247fae4b0cf489e8d7f27"}, {"problem": 23, "code": "(fn [coll] (reduce conj () coll))", "user": "5f03550ce4b0cf489e8d7f33"}, {"problem": 23, "code": "(fn [sequ] (reduce (fn [reversed element] (into [element] reversed)) [] sequ))", "user": "5e7fb908e4b085ba37836e3f"}, {"problem": 23, "code": "(fn rev [n] \n  (if (empty? n) \n    '()\n    (conj (rev (drop-last n)) (last n))\n  ))", "user": "5f003099e4b0cf489e8d7f17"}, {"problem": 23, "code": "(fn [values]\n  (reduce (fn [a b] (cons b a)) '() values))", "user": "5f012a2ee4b0cf489e8d7f1e"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5f04eb97e4b0cf489e8d7f3e"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "5f059b97e4b0cf489e8d7f48"}, {"problem": 23, "code": "reduce conj '()", "user": "5f06eaede4b0cf489e8d7f55"}, {"problem": 23, "code": "(fn [cc] (loop [x cc newcoll [] ]\n    (if (empty? x) \n      newcoll\n      (recur (rest x) (cons (first x) newcoll)))))", "user": "5f088bb3e4b0cf489e8d7f5f"}, {"problem": 23, "code": "(fn [a] (reduce (fn [l x] (conj l x)) '() a ))", "user": "5f0890ffe4b0cf489e8d7f61"}, {"problem": 23, "code": "(fn [col]\n (loop [nx-col (seq col) \n        rev-col ()] \n  (if (or \n       (= () nx-col) \n       (= nil nx-col)) rev-col\n      (recur (rest nx-col) (conj rev-col (first nx-col))))))", "user": "5f055b2de4b0cf489e8d7f43"}, {"problem": 23, "code": "(fn [x] (loop [y x z '()] (if (empty? y) z (recur (rest y) (conj z (first y))))))", "user": "5efdfbf1e4b0cf489e8d7f03"}, {"problem": 23, "code": "(partial reduce (fn [acc val] \n                  (cons val acc) )\n         [])", "user": "5f08ed43e4b09a3f05b717fc"}, {"problem": 23, "code": "(fn [lst]\n  (loop [rem lst\n           acc '()]\n      (if (empty? rem)\n        (vec acc)\n        (recur (rest rem) (conj acc (first rem))))))", "user": "5484c3b2e4b0e286459a11a2"}, {"problem": 23, "code": "reduce conj ()", "user": "5f0a4904e4b09a3f05b71805"}, {"problem": 23, "code": "reduce conj ()", "user": "5f0aa72de4b09a3f05b71808"}, {"problem": 23, "code": "reduce #(cons %2 %1) `()", "user": "5f0a65dae4b09a3f05b71806"}, {"problem": 23, "code": "(fn [aseq]\n    (loop [s aseq\n           reversed (seq [])]\n      (if (empty? s) reversed\n        (recur (next s) (cons (first s) reversed)))))", "user": "5f02f365e4b0cf489e8d7f2c"}, {"problem": 23, "code": "(fn [s]\n  (loop [in s\n         out []]\n    (if (empty? in)\n      out\n      (recur (rest in) (cons (first in) out)))))", "user": "5f0b61e6e4b0f30dddfb5d44"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "5c06e811e4b0bdcf453d16ba"}, {"problem": 23, "code": "#(apply conj '() %)", "user": "5eea5ce7e4b029a2061bbec0"}, {"problem": 23, "code": "#(into () %)", "user": "5f082d9ee4b0cf489e8d7f5c"}, {"problem": 23, "code": "#(into () %)", "user": "5f0cdb08e4b0f30dddfb5d50"}, {"problem": 23, "code": "(fn [list] \n  (reduce (fn [acc x] (cons x acc)) [] list))", "user": "5f0ccff2e4b0f30dddfb5d4f"}, {"problem": 23, "code": "#(reduce\n  (fn [coll x]\n    (cons x coll))\n  [] %)", "user": "5f0c8b0de4b0f30dddfb5d4c"}, {"problem": 23, "code": "(fn [x](reduce (fn [a b] (cons b a)) (take 1 x) (drop 1 x)))", "user": "5f06d26ae4b0cf489e8d7f53"}, {"problem": 23, "code": "#(loop [rev (empty %) \n        orig %]\n   (if (empty? orig)\n       rev\n       (recur (cons (first orig) rev) (rest orig))))", "user": "5eff588ae4b0cf489e8d7f10"}, {"problem": 23, "code": "(fn rev [coll]\n  (cond\n  \t(empty? coll) coll\n  \t:else (cons (last coll)(rev (drop-last coll)))))", "user": "5eedfc62e4b07c55ae4a050e"}, {"problem": 23, "code": "reduce conj ()", "user": "58ed2e21e4b056aecfd47d7a"}, {"problem": 23, "code": "reduce conj ()", "user": "57e070fde4b0bd073c202478"}, {"problem": 23, "code": "#(loop [len (count %), ls %, res (empty %)] ; initial values\n\t\t\t; (println ls i)\n\t\t\t(if (= len (count res))\n\t\t\t\tres\n\t\t\t\t(recur\n\t\t\t\t\tlen\n\t\t\t\t\t(next ls)\n\t\t\t\t\t(cons (first ls) res)\n\t\t\t\t)\n\t\t\t)\n\t\t)", "user": "5d73530ce4b02e6b30c93514"}, {"problem": 23, "code": "reduce #(conj %1 %2) '()", "user": "5f08d0c5e4b0cf489e8d7f62"}, {"problem": 23, "code": "#(into () %)", "user": "5f0dfa48e4b0f30dddfb5d55"}, {"problem": 23, "code": "#(for [i (range (count %))]\n    (nth (into [] %) (- (count %) i 1)))", "user": "548f1604e4b0e286459a1230"}, {"problem": 23, "code": "(fn [l]\n  (loop [reversed '()\n         remaining l]\n    (if (empty? remaining)\n        reversed\n        (recur (cons (first remaining) reversed) (rest remaining)))))", "user": "5f0b8243e4b0f30dddfb5d45"}, {"problem": 23, "code": "(fn rev [coll] (reduce conj () coll))", "user": "5f108456e4b091ba50b4dba1"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5f0f6540e4b091ba50b4db9c"}, {"problem": 23, "code": "(fn [coll] (reduce conj '() coll))", "user": "5f122f93e4b091ba50b4dbae"}, {"problem": 23, "code": "(fn [sq] (loop [xs sq, acc ()]\n           (if-let [x (first xs)]\n             (recur (rest xs) (conj acc x))\n             acc)))", "user": "5e6ba862e4b04a83ad7cd27d"}, {"problem": 23, "code": "(fn [s] (map (fn [x] (nth (into [] s) x)) (range (- (count (into [] s)) 1) -1 -1)))", "user": "5ef78fdae4b09b61f08553c4"}, {"problem": 23, "code": "(fn [x] (reduce #(cons %2 %1) [] x))", "user": "5b7f2d75e4b047b03b203768"}, {"problem": 23, "code": "reduce conj ()", "user": "5509a23ee4b06e50f9beb11a"}, {"problem": 23, "code": "(fn recursv\n  ([s acc]\n   (if (pos? (count s))\n     (recursv (butlast s)\n              (conj acc (last s)))\n     acc))\n  ([s] (recursv s [])))", "user": "5f10fb99e4b091ba50b4dba8"}, {"problem": 23, "code": "#( reduce  conj '()  (seq %1))", "user": "5f1328dee4b091ba50b4dbb1"}, {"problem": 23, "code": "(fn [s]\n  (reduce #(cons %2 %1) '() s))", "user": "5f0e32a1e4b0f30dddfb5d59"}, {"problem": 23, "code": "(fn my-reverse [coll]\n  (reduce conj () coll))", "user": "5f156992e4b091ba50b4dbba"}, {"problem": 23, "code": "(fn reverse-sequence \n    ([x] (reverse-sequence x (- (count x) 1) [])) \n    \n    ([x i y]\n        (cond (>= i 0)\n            (cond\n                (set? x) (reverse-sequence x (dec i) (conj y (nth (vec x) i)))\n                (vector? x) (reverse-sequence x (dec i) (conj y (nth x i)))\n            )\n\n            :else (apply list y)\n        )\n    )\n)", "user": "5f0cb4f3e4b0f30dddfb5d4e"}, {"problem": 23, "code": "reduce #(cons %2 %) nil", "user": "5f03ab5be4b0cf489e8d7f37"}, {"problem": 23, "code": "; if list is empty just return it\n; else return last element + (reverse list)\n(fn myRev [s] (if (empty? s) s\n                (cons (last s) (myRev (drop-last 1 s)))))", "user": "5f15b1e2e4b091ba50b4dbbd"}, {"problem": 23, "code": "(fn [coll]\n  (loop [reverse-list '() rest-coll coll]\n    (if (empty? rest-coll)\n      reverse-list\n      (recur (conj reverse-list (first rest-coll)) (rest rest-coll)))))", "user": "5f15a50fe4b091ba50b4dbbc"}, {"problem": 23, "code": "(fn revseq [s]\n  (loop [result [] x s]\n    (if (zero? (count x))\n      result\n      (recur (conj result (last x)) (drop-last x)))))", "user": "5f1108d7e4b091ba50b4dba9"}, {"problem": 23, "code": "(partial reduce conj ())", "user": "5eb7b41ee4b00a66d4a9523c"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5f10982ee4b091ba50b4dba2"}, {"problem": 23, "code": "#(into '() %)", "user": "572ee822e4b0cd1946bd0f91"}, {"problem": 23, "code": "(fn [s] \n  (loop [ss s acc []]\n    (if (empty? ss)\n      acc\n      (recur (drop-last ss) (conj acc (last ss)))\n    )))", "user": "5d8a3f3ee4b0915913b1d3c9"}, {"problem": 23, "code": "reduce conj '()", "user": "59331397e4b072a2710fd046"}, {"problem": 23, "code": "; replace [0th 1st 2nd ..nth] [n .. 2 1 0]\n#(replace (vec %) (range (- (count %) 1) -1 -1))", "user": "5f0824c5e4b0cf489e8d7f5b"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5f086f54e4b0cf489e8d7f5e"}, {"problem": 23, "code": "#(loop [result '(), d %] \n   (if (empty? d) \n     result \n     (recur (conj result (first d)) (drop 1 d))))", "user": "58c673b9e4b021aa9917ed56"}, {"problem": 23, "code": "reduce conj '()", "user": "5f180938e4b091ba50b4dbd1"}, {"problem": 23, "code": "reduce conj '()", "user": "5f1a0ca2e4b091ba50b4dbe0"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5f1aade6e4b091ba50b4dbe4"}, {"problem": 23, "code": "#(for [i (range (- (count %) 1) -1 -1)]\n    (nth (vec %) i))", "user": "567dbfe0e4b05957ce8c61cc"}, {"problem": 23, "code": "(fn [x] (loop [source x destination []] (\n                                        if (= (count source) 0)\n                                        \tdestination\n                                        \t(recur (take (- (count source) 1) source)\n                                                   (conj destination (last source)))\n                                        )\n  ))", "user": "5f1c7c3be4b0f565ad998261"}, {"problem": 23, "code": "#(reduce (fn [init element] (into [element] init)) [] %)", "user": "5f1d22c7e4b0f565ad998268"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5f1d92a1e4b0f565ad99826a"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5f17e3c5e4b091ba50b4dbd0"}, {"problem": 23, "code": "(fn [coll]\n  (loop [[r & more :as all] (seq coll)\n         acc '()]\n    (if all\n      (recur more (cons r acc))\n      acc)))", "user": "5f1c0447e4b0f565ad99825c"}, {"problem": 23, "code": "(fn [seq]\n  (into '() seq))", "user": "5f081f6de4b0cf489e8d7f5a"}, {"problem": 23, "code": "#(reduce (fn [a x] (cons x a)) '() %)", "user": "5f1ee66be4b0f565ad998272"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5f1e704ee4b0f565ad998270"}, {"problem": 23, "code": "(fn [t] (let [l (into [] t) s (count l)](map #(nth l (- s %))(range 1 (inc s)))))", "user": "5aa5043ee4b0d174b936c88e"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5f1f4411e4b0f565ad99827b"}, {"problem": 23, "code": "(fn l [x] ( if (empty? x) [] (conj (l (rest x)) (first x) )))", "user": "4fb1a4e4e4b081705acca27e"}, {"problem": 23, "code": "(fn reverses [x] (reduce conj () x))", "user": "599389d8e4b0b211ea3aaab6"}, {"problem": 23, "code": "(fn [seq] (into () seq))", "user": "5f0e8312e4b0f30dddfb5d5b"}, {"problem": 23, "code": "into '()", "user": "5f21d172e4b0f565ad998286"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5f21e969e4b0f565ad998287"}, {"problem": 23, "code": "(fn [seq]\n  (apply conj '() seq))", "user": "5f21ffa2e4b0f565ad998289"}, {"problem": 23, "code": "(fn my-reverse [sent]\n  (if (empty? sent)\n    []\n    (conj (my-reverse (rest sent)) (first sent))))", "user": "5f238a59e4b0f565ad99828d"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "5f22e8c9e4b0f565ad99828b"}, {"problem": 23, "code": "(fn rev [x]\n     (if (= (count x) 1)\n       x\n       (conj (rev (drop-last x)) (last x))))", "user": "5f23efc8e4b0f565ad99828f"}, {"problem": 23, "code": "(fn [s] (loop [iseq s oseq []] (if (empty? iseq) oseq (recur (rest iseq) (cons (first iseq) oseq)))))", "user": "5cf8864be4b0b71b1d808a84"}, {"problem": 23, "code": "(fn rev [start]\n  ((fn rec [start end]\n     (if (empty? start)\n       end\n       (rec (butlast start) (conj (vec end) (last start))))) start '()))", "user": "5b61279ce4b0c6492753e70e"}, {"problem": 23, "code": "(fn [xs]\n  (loop [acc ()\n         [head & tail] (seq xs)]\n    (if (empty? tail)\n      (conj acc head)\n      (recur (conj acc head) tail))))", "user": "5f247827e4b0f565ad998292"}, {"problem": 23, "code": "reduce conj ()", "user": "5f265bd9e4b0857314092c8c"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "54cbde61e4b057c6fda3a284"}, {"problem": 23, "code": "#(loop [coll % result ()] (if (empty? coll) result (recur (rest coll) (conj result (first coll)))))", "user": "5f05654fe4b0cf489e8d7f44"}, {"problem": 23, "code": "into '()", "user": "5f19ecbae4b091ba50b4dbdf"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5f27cc7fe4b033932238a646"}, {"problem": 23, "code": "#(reduce (fn [xs x] (cons x xs)) () %)", "user": "5e8c3e8fe4b0cb0169546322"}, {"problem": 23, "code": "into ()", "user": "5f27f180e4b033932238a648"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5f297f22e4b033932238a64e"}, {"problem": 23, "code": "#(into '() %)", "user": "5f209ad3e4b0f565ad99827f"}, {"problem": 23, "code": "(fn myrev\n  ([l] (cond\n        (empty? (rest l)) (do (println l) [(first l)])\n   \t\t:else (conj (myrev (rest l)) (first l))\n       )\n  )\n)", "user": "5f22dabbe4b0f565ad99828a"}, {"problem": 23, "code": "#(reduce (fn [acc ele] (conj acc ele)) '() %)", "user": "5f29837ee4b033932238a64f"}, {"problem": 23, "code": "reduce conj '()", "user": "5f0c3da4e4b0f30dddfb5d49"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5f1af439e4b0f565ad998257"}, {"problem": 23, "code": "(fn [s] (reduce conj () s))\n\n\n; 1 \n; 2\n; 3", "user": "5f275800e4b0857314092c93"}, {"problem": 23, "code": "#(into '() %)", "user": "5f2a2a0de4b033932238a653"}, {"problem": 23, "code": "(fn reverse-seq [sqnce]\n  (if (empty? sqnce) '()\n    (conj (reverse-seq (butlast sqnce)) (last sqnce))))", "user": "5f2aa09ce4b033932238a655"}, {"problem": 23, "code": "#(apply conj '() %)", "user": "5f2c02d1e4b033932238a65f"}, {"problem": 23, "code": "reduce conj '()", "user": "5f2c04dde4b033932238a660"}, {"problem": 23, "code": "(fn [l] (reduce #(cons %2 %) [] l))", "user": "5f2c4c44e4b033932238a662"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5f25a2b1e4b0117231e5035e"}, {"problem": 23, "code": "(fn [coll]\n  (into [] (reduce conj () coll))\n  )", "user": "5ee4b2e6e4b029a2061bbe90"}, {"problem": 23, "code": "(partial reduce conj ())", "user": "5f2d6787e4b033932238a66d"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5f281a83e4b033932238a64a"}, {"problem": 23, "code": "reduce conj '()", "user": "5f2de7ede4b033932238a674"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5f05ef21e4b0cf489e8d7f4d"}, {"problem": 23, "code": "(fn [s] (reduce conj () s))", "user": "5f2e6d97e4b033932238a677"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5f279b64e4b033932238a645"}, {"problem": 23, "code": "(fn [x] (loop [new-seq '() old-seq x]\n          (if (seq old-seq)\n            (recur (conj new-seq (first old-seq)) (rest old-seq))\n            new-seq\n            )))", "user": "5f1eebcee4b0f565ad998273"}, {"problem": 23, "code": "(fn [elems]\n  (loop [result [] remaining elems]\n    (if (= 1 (count remaining))\n      (cons (first remaining) result)\n      (recur (cons (first remaining) result) (rest remaining)))))", "user": "5f2f5cdee4b033932238a67f"}, {"problem": 23, "code": "#(into () %)", "user": "5f309144e4b0574c87022c23"}, {"problem": 23, "code": "(fn ff [l]\n  (if (empty? l)\n    []\n    (conj (ff (rest l)) (first l))))", "user": "5f30296fe4b0574c87022c22"}, {"problem": 23, "code": "reduce conj ()", "user": "5f310542e4b0574c87022c25"}, {"problem": 23, "code": "#(into (list) %)", "user": "5f300f28e4b033932238a682"}, {"problem": 23, "code": "(fn reverse-sequence\n  [seq]\n  (loop [n '() tempSeq seq]\n    (if (empty? tempSeq)\n      n\n      (recur (conj n (first tempSeq)) (rest tempSeq)))))", "user": "5f3103aee4b0574c87022c24"}, {"problem": 23, "code": "reduce conj ()", "user": "5f331015e4b0574c87022c37"}, {"problem": 23, "code": "(fn [accum sequence] (if (= (count sequence) 0) accum (recur (conj accum (last sequence)) (drop-last sequence)))) []", "user": "5f184a46e4b091ba50b4dbd4"}, {"problem": 23, "code": "(fn reverse-sequence [c]\n  (reduce (fn [col cur] (conj col cur)) nil c))", "user": "5f24671fe4b0f565ad998291"}, {"problem": 23, "code": "(fn [x] ((fn doit [remaining new]\n           (if (= 0 (count remaining))\n             new\n             (doit (rest remaining) (cons (first remaining) new))\n             )) x []))", "user": "5f341a4be4b0574c87022c3d"}, {"problem": 23, "code": "into ()", "user": "5f3797cce4b0574c87022c5a"}, {"problem": 23, "code": "(fn [col] (reduce conj '() col))", "user": "5f37839ee4b0574c87022c59"}, {"problem": 23, "code": "reduce conj '()", "user": "5f37da09e4b0574c87022c5e"}, {"problem": 23, "code": "reduce conj '()", "user": "5f393bd6e4b0574c87022c76"}, {"problem": 23, "code": "#(reduce (fn [acc x]\n           (cons x acc))\n         (empty %)\n         %)", "user": "5f39bd49e4b0574c87022c7f"}, {"problem": 23, "code": "(fn foo [x] (if (seq x) (conj (foo (rest x)) (first x)) []))", "user": "5f3388ade4b0574c87022c38"}, {"problem": 23, "code": "(fn f [xs]\n    (if (empty? xs)\n      xs\n      (cons (last xs) (f (drop-last xs)))))", "user": "5ed61537e4b016b56eae05dc"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5f38eecce4b0574c87022c72"}, {"problem": 23, "code": "#(into () %)", "user": "5f3ab5ece4b004f08c61c52a"}, {"problem": 23, "code": "#(into () %)", "user": "5f3989cfe4b0574c87022c79"}, {"problem": 23, "code": "reduce conj '()\n; cheated a bit, saw this on stack overflow when looking\n; for how to loop backwards\n; https://stackoverflow.com/a/8395229/3015595", "user": "5f274aeee4b0857314092c92"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5f3ce2c7e4b004f08c61c548"}, {"problem": 23, "code": "(fn reverse-seq [xs]\n  (if (= 1 (count xs))\n    xs\n    (cons (last xs) (reverse-seq (drop-last xs)))))", "user": "5f3adcf4e4b004f08c61c531"}, {"problem": 23, "code": "into ()", "user": "5f3abcc4e4b004f08c61c52b"}, {"problem": 23, "code": "(fn dosia [in]\n   (if (empty? in) [] (conj (dosia (rest in)) (first in)))\n)", "user": "5f3e58dae4b004f08c61c555"}, {"problem": 23, "code": "(fn new-reverse\n  [s]\n  (let [seq-s (seq s)\n        f (fn [o-seq new-seq] (if (= (count o-seq) 0)\n                                new-seq\n                                (recur (rest o-seq) (conj new-seq (first o-seq)))))]\n    (if seq-s\n      (f seq-s (sequence ()))\n      s)))", "user": "591ad160e4b09b4ee5954bdf"}, {"problem": 23, "code": "(fn reverse-seq [xs]\n  (into '() xs))", "user": "5f2ab452e4b033932238a656"}, {"problem": 23, "code": "#(loop [source (apply list %) ret '()]\n          (if (empty? source) (cond (vector? %) (vec ret) :else ret)\n            (recur (rest source) (conj ret (first source)))))", "user": "5f2c94b4e4b033932238a669"}, {"problem": 23, "code": "#(reduce (fn [acc ele] (conj acc ele)) '() %)", "user": "58ffc6cfe4b0438e51c2d008"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5f3ddc71e4b004f08c61c551"}, {"problem": 23, "code": "reduce conj ()", "user": "5f3f6570e4b004f08c61c563"}, {"problem": 23, "code": "into ()", "user": "5ec22851e4b00a66d4a9529a"}, {"problem": 23, "code": "(fn [start]\n  (if (vector? start)\n  (into [] (reduce(fn[out part]\n                  (cons part out))\n            []\n            start))\n  (reduce(fn[out part]\n                  (cons part out))\n            []\n            start))\n)", "user": "5f3a8493e4b004f08c61c527"}, {"problem": 23, "code": "(fn [vector]\n  (loop [[first & rest] (vec vector) final []]\n    (if (empty? rest)\n    (into [first] final )\n    (recur rest (into [first] final )))))", "user": "5f3b54c0e4b004f08c61c53b"}, {"problem": 23, "code": "reduce #'conj '()", "user": "5f3f2281e4b004f08c61c561"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5f10ab01e4b091ba50b4dba6"}, {"problem": 23, "code": "(fn [xx] (reduce #(cons %2 %1) '() xx))", "user": "5f36dc06e4b0574c87022c4c"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5f3ca097e4b004f08c61c546"}, {"problem": 23, "code": "reduce conj '()", "user": "5ab22c2ce4b073f1774425df"}, {"problem": 23, "code": "reduce (fn [acc y] (cons y acc)) []", "user": "5f419985e4b0955706451fab"}, {"problem": 23, "code": "#(loop [coll % result ()]\n\t(if (empty? coll)\n\t\tresult\n\t\t(recur (rest coll) (cons (first coll) result))))", "user": "5f418f80e4b0955706451faa"}, {"problem": 23, "code": "(fn [s] \n  (reduce #(conj %1 %2) '() s)\n  )", "user": "5f429fdfe4b0955706451faf"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5f42baafe4b0955706451fb1"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5f4314e0e4b0955706451fb4"}, {"problem": 23, "code": "(partial reduce conj ())", "user": "5f431d32e4b0955706451fb5"}, {"problem": 23, "code": "(fn rev [xs] (when xs (cons (last xs) (rev (butlast xs)))))", "user": "5f32f69ae4b0574c87022c35"}, {"problem": 23, "code": "(fn [lst] (reduce conj '() lst))", "user": "5f45211ae4b0955706451fbc"}, {"problem": 23, "code": "(fn my-rev\n  [lst]\n  (let [[x & xs] (vec lst)]\n    (if x\n      (conj (my-rev xs) x)\n      [])))", "user": "5f317ae4e4b0574c87022c2a"}, {"problem": 23, "code": "(partial reduce conj '())", "user": "5f462b23e4b0955706451fbe"}, {"problem": 23, "code": "reduce #(conj %1 %2) '()", "user": "5f468d26e4b0955706451fc1"}, {"problem": 23, "code": "#(loop [x % y []] (if (empty? x)\n                         y\n                         (recur (take (dec (count x)) x) (conj y (last x))\n                                )))", "user": "5f476a39e4b0102c7503392f"}, {"problem": 23, "code": "into '()", "user": "5f46d2f9e4b0955706451fc6"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5f488c7de4b0102c7503393a"}, {"problem": 23, "code": "#((fn [col acc] (if (empty? col) acc (recur (rest col) (conj acc (first col))))) % '())", "user": "5f49482ae4b0102c75033940"}, {"problem": 23, "code": "(fn rev [coll] \n  (cond (empty? coll) coll\n        :e (cons (last coll) (rev (drop-last coll)))))", "user": "5f4303cfe4b0955706451fb3"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5f46ba59e4b0955706451fc2"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5f3cd86ce4b004f08c61c547"}, {"problem": 23, "code": "(fn rev [l] \n  (case (count l)\n    1 l\n    (concat (rev (rest l)) (list (first l)))))", "user": "5f4ebab5e4b0102c7503396a"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5f4f8f78e4b0102c75033973"}, {"problem": 23, "code": "apply conj ()", "user": "5e74ee53e4b085ba37836dde"}, {"problem": 23, "code": "(fn [s]\n\n  (reduce (fn [acc v] (conj acc v)) () s)\n\n  )", "user": "5f520098e4b0a0bc16850a6c"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5f51e141e4b0a0bc16850a6a"}, {"problem": 23, "code": "#(into '() %)", "user": "5f5358b7e4b0a0bc16850a77"}, {"problem": 23, "code": "(fn [ray]\n    (loop [x (vec ray) y (- (count ray) 1) accum []]\n      (if (= (count accum) (count ray))\n        accum\n        (let [rev (conj accum (get x y))]\n          (recur x (dec y) rev)))))", "user": "53275758e4b09d4e7a9b54fc"}, {"problem": 23, "code": "reduce conj '()", "user": "5f558a76e4b0a0bc16850a84"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5f56c0cae4b0a0bc16850a8c"}, {"problem": 23, "code": "(fn [x]\n  (loop [ans '() y x]\n    (if (empty? y)\n      ans\n      (recur (cons (first y) ans) (rest y))\n    )\n  )\n)", "user": "5f574662e4b0a0bc16850a90"}, {"problem": 23, "code": ";; this passes because a list and vector are equal on contents not by type.\n#(reduce (fn [acc cv] (conj acc cv)) '() %)", "user": "5f5a57dee4b0a0bc16850aa5"}, {"problem": 23, "code": "(fn my [s] \n  (loop [sq s o nil]\n  (if (seq sq)\n    (recur (rest sq) (conj o (first sq)))\n    o\n  ))\n)", "user": "5f58db95e4b0a0bc16850a9a"}, {"problem": 23, "code": "#(into () %)", "user": "5f5b9529e4b02876ed9fcfda"}, {"problem": 23, "code": "#(reduce conj\n        '()\n        %)", "user": "5f4fe1fae4b0a0bc16850a5c"}, {"problem": 23, "code": "reduce conj ()", "user": "5dfb7f6de4b0a607a9a45cdc"}, {"problem": 23, "code": "(fn [col]\n  (-> (map - (range))\n      (zipmap col)\n      sort\n      vals))", "user": "5d5824fae4b02ba5928a681f"}, {"problem": 23, "code": "(fn\n  [s]\n  (loop [s s, res []]\n    (if (empty? s)\n      res\n      (recur (rest s) (cons (first s) res)))))", "user": "5f5df0bfe4b02876ed9fcfeb"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "55340a19e4b09218d5f44f97"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5f5a2cc6e4b0a0bc16850aa4"}, {"problem": 23, "code": "(fn\n  [lst]\n  (loop [lst lst\n         newlst ()]\n    (if (empty? lst)\n      newlst\n      (recur (rest lst)\n        (conj newlst (first lst))))))", "user": "5f4eb036e4b0102c75033969"}, {"problem": 23, "code": "(fn [xs]\n  (reduce\n   (fn [xs x]\n     (conj xs x))\n   '()\n   xs))", "user": "5f5e7158e4b02876ed9fcff0"}, {"problem": 23, "code": "into ()", "user": "5f5b4c60e4b05ea7b9adc42e"}, {"problem": 23, "code": "reduce conj nil", "user": "563bb1fde4b0bfe05bf11829"}, {"problem": 23, "code": "reduce conj '()", "user": "5f5f9483e4b02876ed9fcff8"}, {"problem": 23, "code": "(fn [col]\n           (loop [reversed `() rem col]\n             (if (empty? rem)\n               reversed\n               (recur (conj reversed (first rem)) (rest rem)))))", "user": "5ea6fe98e4b00a66d4a951b2"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5f5f2eafe4b02876ed9fcff5"}, {"problem": 23, "code": "reduce conj ()", "user": "5f60daafe4b02876ed9fcffe"}, {"problem": 23, "code": "(fn [x] (map second (sort-by first > (map-indexed vector x))))", "user": "5e70c16de4b085ba37836dae"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "5f631e11e4b02876ed9fd011"}, {"problem": 23, "code": "(fn [coll]\n   (reduce conj () coll))", "user": "5f63d933e4b02876ed9fd018"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "5f621940e4b02876ed9fd009"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5f5e166ce4b02876ed9fcfed"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5f42b77be4b0955706451fb0"}, {"problem": 23, "code": "reduce conj '()", "user": "5eb4e4abe4b00a66d4a95222"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5ee6d30ce4b029a2061bbe9c"}, {"problem": 23, "code": "into ()", "user": "5f6580e7e4b02876ed9fd023"}, {"problem": 23, "code": "reduce #(cons %2 %) '()", "user": "5f65bdfde4b02876ed9fd025"}, {"problem": 23, "code": "reduce conj '()", "user": "5f1d014ae4b0f565ad998267"}, {"problem": 23, "code": "(fn [coll] (reduce conj '() coll))", "user": "5f663bc0e4b02876ed9fd02d"}, {"problem": 23, "code": "reduce #(concat [%2] %1) []", "user": "5f6796d2e4b02876ed9fd036"}, {"problem": 23, "code": "(fn rev [lst] \n  (if (seq lst)\n    (cons (last lst) (rev (take (- (count lst) 1) lst)))\n    lst))", "user": "5f67c2f8e4b02876ed9fd039"}, {"problem": 23, "code": "(fn [s]\n  (into '() s))", "user": "5f597522e4b0a0bc16850a9e"}, {"problem": 23, "code": "reduce conj ()", "user": "588fbb39e4b00487982d51bd"}, {"problem": 23, "code": "reduce (fn [a item] (conj a item)) '()", "user": "5f648ef1e4b02876ed9fd01b"}, {"problem": 23, "code": "(fn rev [l] (apply conj nil l))", "user": "5a2b7f4ee4b09cafd31c7f4a"}, {"problem": 23, "code": "(fn reve [x]\n   ((fn rev [fi se]\n      (if (empty? fi)\n        se\n        (recur (rest fi) (cons  (first fi) se) )\n        )\n      ) x [])\n   )", "user": "5f693778e4b02876ed9fd03f"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5f182845e4b091ba50b4dbd2"}, {"problem": 23, "code": "(fn my-reverse [coll]\r\n  (into () coll))", "user": "5f5396d4e4b0a0bc16850a79"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5f6a266ae4b02876ed9fd042"}, {"problem": 23, "code": "(fn rev [xs] (reduce #(cons %2 %1) () xs ))", "user": "5eff6c0ee4b0cf489e8d7f11"}, {"problem": 23, "code": "reduce conj '()", "user": "5f6aef6de4b02876ed9fd04a"}, {"problem": 23, "code": "#(into '() %)", "user": "5f686436e4b02876ed9fd03c"}, {"problem": 23, "code": "; reduce conj ()\n\ninto ()", "user": "5f6a583ae4b02876ed9fd046"}, {"problem": 23, "code": "reduce conj ()", "user": "5f6b5d83e4b02876ed9fd050"}, {"problem": 23, "code": "(fn rev\n  ([xs] (rev (rest xs) (list (first xs))))\n  ([xs ys] (if (empty? xs) (vec ys) (rev (rest xs) (conj ys (first xs))))))", "user": "5f6c331ae4b02876ed9fd054"}, {"problem": 23, "code": "#(let [s (atom '())]\n   (while \n     (< (count @s) (count %))\n     (swap! s conj (get (vec %) (count @s)))) \n   @s)", "user": "5f6e23e6e4b02876ed9fd064"}, {"problem": 23, "code": "reduce conj ()", "user": "5f6e5c58e4b02876ed9fd067"}, {"problem": 23, "code": "(fn [seq] (reduce (fn [acc curr-val] (conj acc curr-val)) '() seq))", "user": "5f6f8327e4b02876ed9fd075"}, {"problem": 23, "code": "reduce (fn[coll n ] (conj coll n) ) ()", "user": "5f6b61ece4b02876ed9fd051"}, {"problem": 23, "code": "(fn rev [s] (\n  if (= (count s) 1)\n    s\n    (concat (rev (rest s)) (list(first s)))\n))", "user": "5f70b752e4b02876ed9fd080"}, {"problem": 23, "code": "(fn my_reverse\n  [s]\n  (if (empty? s)\n    []\n    (conj (my_reverse (rest s)) (first s))\n  )\n)", "user": "5f6b8222e4b02876ed9fd052"}, {"problem": 23, "code": "reduce conj ()", "user": "5f6e576ae4b02876ed9fd066"}, {"problem": 23, "code": "#(reduce conj () %1)", "user": "5f714ae2e4b02876ed9fd084"}, {"problem": 23, "code": "(fn [coll] (loop [[x & rest] (seq coll) result (if (seq? coll) (empty coll) ())] (if (= nil rest) (cons x result) (recur rest (cons x result)))))", "user": "5f6cb2a5e4b02876ed9fd057"}, {"problem": 23, "code": "#(into () %)", "user": "5f724f55e4b02876ed9fd089"}, {"problem": 23, "code": "#(into () %)", "user": "5f6caa19e4b02876ed9fd056"}, {"problem": 23, "code": "(fn reverse2 [x] (if (empty? (rest x)) [(first x)] (conj (reverse2 (rest x)) (first x))))", "user": "5f7251b9e4b02876ed9fd08a"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5f72f144e4b02876ed9fd093"}, {"problem": 23, "code": "(fn rev_seq [l]\n  (let [l (seq l)]\n  (if (empty? l) \n    l \n    (let [[x & xs] l]\n      (concat (rev_seq xs) (list x))))))", "user": "5f63684be4b02876ed9fd012"}, {"problem": 23, "code": "(fn m-rev [ls]\n  (if (empty? ls)\n   []\n    (conj (m-rev (rest ls)) (first ls))))", "user": "5f73000ce4b02876ed9fd094"}, {"problem": 23, "code": "(fn my-reverse\n  ([seq]\n   (if (<= (count seq) 1)\n     seq\n     (if (= 2 (count seq))\n       [(last seq) (first seq)]\n       (concat [(last seq)] (my-reverse (rest (butlast seq))) [(first seq)])))))", "user": "5f735915e4b02876ed9fd097"}, {"problem": 23, "code": "#(into (list) %1)", "user": "5f737e16e4b02876ed9fd09a"}, {"problem": 23, "code": "#(reduce conj() %)", "user": "5f773336e4b02876ed9fd0b5"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5f388489e4b0574c87022c69"}, {"problem": 23, "code": "reduce conj ()", "user": "5f77a0c1e4b02876ed9fd0bb"}, {"problem": 23, "code": "(fn[x] \n    (map #((vec x) %) (range (dec (count x)) -1 -1)))", "user": "5f77890ae4b02876ed9fd0b9"}, {"problem": 23, "code": "#(loop [newlst ()\n        lst %]\n   (if (empty? lst)\n     newlst\n     (recur (cons(first lst) newlst)(rest lst))))", "user": "5f77d470e4b02876ed9fd0be"}, {"problem": 23, "code": "#((fn rv [q r] (if (= q '()) r (rv (rest q) (conj r (first q))))) % '())", "user": "5f79cb16e4b02876ed9fd0cb"}, {"problem": 23, "code": "(fn my-reverse [xs]\n  (when xs\n    (cons (last xs) (my-reverse (butlast xs)))))", "user": "5f520556e4b0a0bc16850a6d"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5f727bd1e4b02876ed9fd08c"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5f757c1ce4b02876ed9fd0aa"}, {"problem": 23, "code": "(fn [lst] \n    (reduce conj () lst))", "user": "5f74de11e4b02876ed9fd0a5"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5f727dd6e4b02876ed9fd090"}, {"problem": 23, "code": "#(reduce conj()%)", "user": "5f77b99fe4b02876ed9fd0bc"}, {"problem": 23, "code": "(fn [list] (into '() list))", "user": "5f7ac592e4b02876ed9fd0d2"}, {"problem": 23, "code": "(comp (fn append [[xs c]] (if (empty? xs) c (append [(rest xs) (conj c (first xs))])))(fn [x] [x '()]))", "user": "5f6adf5ee4b02876ed9fd049"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5f63cde9e4b02876ed9fd015"}, {"problem": 23, "code": "(fn [s]\n  (loop [remaining (vec s)\n         output '()]\n    (if (= (count remaining) 0)\n      output\n      (recur (rest remaining) (conj output (first remaining))))))", "user": "5f79bff2e4b02876ed9fd0ca"}, {"problem": 23, "code": "reduce conj ()", "user": "5bc60a65e4b07a9b28b10082"}, {"problem": 23, "code": "(fn[lst] (loop [lst lst\n                 acc '()]\n              \n              (if (empty? lst)\n                  acc\n                  (recur (rest lst) (conj acc (first lst))))))", "user": "5f727d2fe4b02876ed9fd08f"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5f7e91c8e4b0c071e6c840d8"}, {"problem": 23, "code": "(partial into '())", "user": "5f7aed9de4b02876ed9fd0d4"}, {"problem": 23, "code": "(fn [s] (reduce (fn [a b] (cons b a)) '() s))", "user": "5d0395c5e4b0cc9c915881c6"}, {"problem": 23, "code": "(fn [col]\n  (loop [ col col result []]\n    ;;(println result col)\n    (if (empty? col)\n      result\n      (recur (rest col) (cons (first col) result)))))", "user": "5f815db6e4b0c071e6c840f0"}, {"problem": 23, "code": "sort (comp - compare)", "user": "4f1c7021535d64f603146482"}, {"problem": 23, "code": "#(loop [rev '() lst %]\n   (if (empty? lst) rev (recur (conj rev (first lst)) (rest lst))))", "user": "5f727cb0e4b02876ed9fd08e"}, {"problem": 23, "code": "(fn my-reverse [xs] \n    (loop [xs xs acc '()]\n      (if (empty? xs) acc\n        (recur (rest xs) (conj acc (first xs))))))", "user": "5f82cfcce4b0c071e6c840fb"}, {"problem": 23, "code": "#(loop [l %\n       a '()]\n  (if (empty? l)\n    a\n    (recur (rest l) (conj a (first l)))))", "user": "5f7603a8e4b02876ed9fd0ad"}, {"problem": 23, "code": "(fn [xs]\n         (reduce (fn [agg x] (cons x agg)) [] xs)\n         )", "user": "5beadeb5e4b0f319e2d7ec88"}, {"problem": 23, "code": "reduce conj '()", "user": "5f838122e4b01aacbe7a2715"}, {"problem": 23, "code": "reduce conj '()", "user": "5f81de6ce4b0c071e6c840f5"}, {"problem": 23, "code": "(fn [lst] (reduce conj () lst))", "user": "5f810e97e4b0c071e6c840ed"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5d8570cae4b0915913b1d395"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5f84f0f5e4b0375e81f54e78"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5f85e160e4b0ad2c9bc62a43"}, {"problem": 23, "code": "(fn [x]\n  (loop [lst1 x\n         lst2 '()]\n    (if (empty? lst1)\n      lst2\n      (recur (rest lst1) (cons (first lst1) lst2))\n    )\n )\n)", "user": "5f837b30e4b01aacbe7a2714"}, {"problem": 23, "code": "reduce #(cons %2 %1) ()", "user": "5f727be9e4b02876ed9fd08d"}, {"problem": 23, "code": "(fn [lst]\n        ( apply conj '() lst))", "user": "5f737899e4b02876ed9fd099"}, {"problem": 23, "code": "#(into '() %)", "user": "5f792d48e4b02876ed9fd0c5"}, {"problem": 23, "code": "(fn [x] (reduce #(conj %1 %2) '() x))", "user": "5f7fece9e4b0c071e6c840e3"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5f80ea23e4b0c071e6c840eb"}, {"problem": 23, "code": "(fn [lst] (loop [l lst a '()]\n                (if (empty? l)\n                  a\n                  (recur (rest l) (conj a (first l))))))", "user": "5f86a98be4b0649ffcda4caa"}, {"problem": 23, "code": "reduce conj '()", "user": "5f86f5a3e4b0649ffcda4cad"}, {"problem": 23, "code": "(fn [lst]\n  (loop [lst2 '()\n         lst lst]\n    (if (empty? lst) \n      lst2\n      (recur (cons (first lst) lst2) (drop 1 lst))\n      )\n    )\n  )", "user": "5f84f110e4b0375e81f54e79"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5f8497dce4b0375e81f54e74"}, {"problem": 23, "code": "(fn [x] (into '() x))", "user": "5f875a0ae4b020286baa5e94"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5f87e757e4b0169f6814c40f"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5f8361bae4b01aacbe7a2712"}, {"problem": 23, "code": "(fn [x]\n  (reduce conj '() x))", "user": "5f8795d4e4b020286baa5e96"}, {"problem": 23, "code": "(fn reverseSequence [y]\n  (reduce (fn [a b] (cons b a) ) '() y)\n  )", "user": "5f8330b8e4b01aacbe7a270f"}, {"problem": 23, "code": "(partial reduce conj ())", "user": "5edd05bfe4b0c7845d86b0f3"}, {"problem": 23, "code": "#(into () %)", "user": "5ef4fca7e4b07c55ae4a0546"}, {"problem": 23, "code": "(fn [s] (loop [s s\n               r nil]\n          (if (empty? s) r (recur (rest s) (conj r (first s))))))", "user": "5f8b06afe4b0715f5002d74a"}, {"problem": 23, "code": "into '()", "user": "5f816cc6e4b0c071e6c840f1"}, {"problem": 23, "code": "(partial reduce #(cons %2 %1) [])", "user": "5f791f1ae4b02876ed9fd0c4"}, {"problem": 23, "code": "(fn [c] (reduce #(cons %2 %) (empty c) c))", "user": "5f8e865fe4b0715f5002d76d"}, {"problem": 23, "code": "reduce conj '()", "user": "5f8fe45ae4b0715f5002d78d"}, {"problem": 23, "code": "(fn reverse-seq [seq]\n  (into '() seq))", "user": "5f8d76c3e4b0715f5002d758"}, {"problem": 23, "code": "#(into () %)", "user": "5f90787de4b0715f5002d795"}, {"problem": 23, "code": "(fn\n  [xs]\n  (reduce (fn [a b] (conj a b)) '() xs))", "user": "5e1c24f4e4b0dc959400852d"}, {"problem": 23, "code": "(fn [coll] (reduce (fn [res x] (conj res x))\n        '()\n        coll))", "user": "5f93529ae4b0715f5002d7bc"}, {"problem": 23, "code": "(fn [s]\n  (reduce (fn [seq x] (cons x seq))\n          '()\n          s))", "user": "5f6f461ae4b02876ed9fd06f"}, {"problem": 23, "code": "(fn [s] (loop [x s r []]\n          (if (first x)\n            (recur (rest x) (cons (first x) r))\n            r)))", "user": "5f9491cbe4b0715f5002d7bf"}, {"problem": 23, "code": "(fn my-reverse [coll]\n  (if (empty? coll)\n    []\n    (conj (my-reverse (rest coll)) (first coll))))", "user": "5f8a7bafe4b0715f5002d749"}, {"problem": 23, "code": "(fn reve [lst]\n  (if (empty? lst)\n    lst\n    (cons (last lst) (reve (drop-last 1 lst)))))", "user": "5f9567cce4b0715f5002d7c7"}, {"problem": 23, "code": "(fn [x]\n  (reduce\n   #(conj %1 %2)\n   ()\n   x\n   )\n  )", "user": "5f949b97e4b0715f5002d7c1"}, {"problem": 23, "code": "(fn p23\n  ([l] (p23 l '()))\n  ([l rl]\n   (if (empty? l)\n     rl\n     (recur (rest l) (conj rl (first l))))))", "user": "5f968f4ee4b0715f5002d7d2"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5f95dc6ee4b0715f5002d7cc"}, {"problem": 23, "code": "reduce conj ()", "user": "5f97eff1e4b0715f5002d7f9"}, {"problem": 23, "code": "(fn [myList] \n  (reduce conj () myList))", "user": "5f998847e4b0715f5002d813"}, {"problem": 23, "code": "(fn [coll]\n  (sort #(compare %2 %1) coll))", "user": "5f8e2a08e4b0715f5002d767"}, {"problem": 23, "code": "(fn [lst] (loop [curr [] rst lst]\n            (if (nil? rst)\n              curr\n              (recur (conj curr (last rst)) (butlast rst)))))", "user": "5f9d36e1e4b0715f5002d82e"}, {"problem": 23, "code": "reduce conj ()", "user": "5f9dd3fee4b0715f5002d831"}, {"problem": 23, "code": "reduce #(cons %2 %) ()", "user": "5f9df1d8e4b0715f5002d832"}, {"problem": 23, "code": "reduce conj '()", "user": "5f9f032fe4b0715f5002d839"}, {"problem": 23, "code": "reduce conj ()", "user": "5f9816c9e4b0715f5002d7fa"}, {"problem": 23, "code": "#(loop [s % n '()]\n(if (seq s)\n(recur (rest s)(conj n (first s)))\nn\n))", "user": "5f9c4113e4b0715f5002d821"}, {"problem": 23, "code": "(fn [sx] (loop [sx sx acc []] (if (empty? sx) (reduce conj sx acc) (recur (rest sx) (conj acc (first sx))))))", "user": "5fa17538e4b0f0ebd91b77e3"}, {"problem": 23, "code": "#(into '() % )", "user": "5fa2a3afe4b0f0ebd91b77f1"}, {"problem": 23, "code": "(fn reverse-reverse [s]\n  (loop [xs (seq s)\n         result []]\n    (if xs\n      (let [x (last xs)]\n        (recur (butlast xs) (conj result x)))\n      result)))", "user": "5fa2a3d6e4b0f0ebd91b77f2"}, {"problem": 23, "code": "reduce conj '()", "user": "5fa416ece4b0f0ebd91b7803"}, {"problem": 23, "code": "reduce conj ()", "user": "5fa5b72ee4b0fa27300f3dca"}, {"problem": 23, "code": "(fn myrev \n  ([s]\n  \t(myrev s '()))\n  ([s r] \n\t(if (empty? s) \n      r\n      (recur (rest s) (cons (first s) r)))))", "user": "5fa5a6b1e4b0fa27300f3dc8"}, {"problem": 23, "code": "(fn [coll] (into '() coll))", "user": "5fa52497e4b0fa27300f3dbf"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5d965c73e4b0d3f9b434ad33"}, {"problem": 23, "code": "reduce conj '()", "user": "5fa7c574e4b0fa27300f3ddf"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5fa74b82e4b0fa27300f3dda"}, {"problem": 23, "code": "(fn [xs]\n  (loop [xs xs rev '()]\n    (if (empty? xs)\n      rev\n      (recur (rest xs)\n             (cons (first xs) rev)))))", "user": "5fa8424ce4b0fa27300f3de5"}, {"problem": 23, "code": "(fn do-reverse [seq]\n  (if(empty? seq)\n    seq\n    (concat (do-reverse (rest seq))\n            (list (first seq)))))", "user": "5fa80c01e4b0fa27300f3de2"}, {"problem": 23, "code": "#(sort (comp - compare) %)", "user": "5fa58531e4b0fa27300f3dc6"}, {"problem": 23, "code": "reduce conj '()", "user": "5fa56352e4b0fa27300f3dc2"}, {"problem": 23, "code": "(fn [lat]\n  (into '() lat))", "user": "5f6b35c3e4b02876ed9fd04d"}, {"problem": 23, "code": "#(into '() %)", "user": "5fa97b85e4b0fa27300f3dee"}, {"problem": 23, "code": "(fn [x] (into '() x) )", "user": "5faaab00e4b0fa27300f3dff"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5f974321e4b0715f5002d7f3"}, {"problem": 23, "code": "(fn [xs]\n  ;;; Set and lists are never considered equal contrary to vectors. So add this won't work:  (into (empty xs)\n    \t(reduce (fn [a x] (cons x a)) '() xs))", "user": "573a0ecce4b0cd1946bd1088"}, {"problem": 23, "code": "reduce conj nil", "user": "5b94c2aee4b0c0b3ffbd4a59"}, {"problem": 23, "code": "into '()", "user": "5fa96ddbe4b0fa27300f3dec"}, {"problem": 23, "code": "(fn reverse-ku [xs]\n    (if-not (empty? xs) \n      (lazy-seq (cons (last xs) (reverse-ku (drop-last xs)))) \n      (empty xs)))", "user": "5fa358a1e4b0f0ebd91b77fd"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "5face7fce4b08cb800c85ae9"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "5facfb48e4b08cb800c85aea"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "5fa2b45ce4b0f0ebd91b77f5"}, {"problem": 23, "code": "(fn rev [col]\n  (loop [xs col rev-xs []]\n        (if (empty? xs)\n            rev-xs\n            (recur (rest xs) (cons (first xs) rev-xs)))))", "user": "54f5e9e2e4b0f2f3c5226e9d"}, {"problem": 23, "code": "#(loop [acc '()\n        remainder %]\n   (if (empty? remainder)\n     acc\n     (recur (cons (first remainder) acc) (rest remainder))))", "user": "5fb082cfe4b08cb800c85b14"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5fae3d8ae4b08cb800c85afa"}, {"problem": 23, "code": "(fn rev [coll]\n   (if (last coll)\n     (cons (last coll) (rev (take (- (count coll) 1) coll)))\n     (list)))", "user": "5fabe67be4b08cb800c85ade"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5fb4331be4b08cb800c85b3f"}, {"problem": 23, "code": "(partial reduce conj ())", "user": "5fb3bd04e4b08cb800c85b3a"}, {"problem": 23, "code": "(fn [coll]\n  (reduce (fn [acc coll]\n            (cons coll acc)) [] coll))", "user": "5fb544f6e4b08cb800c85b4e"}, {"problem": 23, "code": "#(into [] (reduce (fn [x y] (conj x y)) '() %))", "user": "5fb2eac0e4b08cb800c85b2f"}, {"problem": 23, "code": "(fn rev [l] (if (= l []) [] (concat (rev (rest l)) (list (first l)))))", "user": "5fab7ea6e4b08cb800c85ad8"}, {"problem": 23, "code": "reduce conj nil", "user": "5fb3a096e4b08cb800c85b35"}, {"problem": 23, "code": "into '()", "user": "5faa75c1e4b0fa27300f3dfa"}, {"problem": 23, "code": "(fn [c]\n \t (loop [s c\n           o []]\n     (if (empty? s)\n          o\n         (recur (drop-last s) (conj o (last s)))\n      )))", "user": "5fafa44ee4b08cb800c85b0e"}, {"problem": 23, "code": "reduce (fn [new el]\n          (cons el new))\n        []", "user": "5fa6db67e4b0fa27300f3dd2"}, {"problem": 23, "code": "#(loop [r '() s %] (if (empty? s) r (recur (cons (first s) r) (rest s))))", "user": "5f5aee4fe4b0a0bc16850aaa"}, {"problem": 23, "code": "reduce  conj '()", "user": "5fba5692e4b03f550f448230"}, {"problem": 23, "code": "#(reduce (fn [x y] (conj x y)) '() %)", "user": "5fbac277e4b03f550f448232"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5f969090e4b0715f5002d7d5"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "5f96fbc7e4b0715f5002d7ec"}, {"problem": 23, "code": "(fn rr [coll] (map #(nth %1 1) (sort #(> (first %1) (first %2)) (map-indexed list coll))))", "user": "5f969092e4b0715f5002d7d6"}, {"problem": 23, "code": "#(reduce (fn [rs ls] (cons ls rs)) [] %)", "user": "5faca2e4e4b08cb800c85ae8"}, {"problem": 23, "code": "reduce conj ()", "user": "5fae5441e4b08cb800c85afb"}, {"problem": 23, "code": "reduce conj ()", "user": "5fab003de4b08cb800c85ad1"}, {"problem": 23, "code": "reduce conj ()", "user": "5fba282de4b03f550f44822d"}, {"problem": 23, "code": "(fn rev\n  ([coll]\n   (rev coll '()))\n  ([coll acc]\n   (if-not (empty? coll)\n     (rev (rest coll) (cons (first coll) acc))\n     acc)))", "user": "5fb9075ee4b03f550f448224"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5fbd6a64e4b03f550f448241"}, {"problem": 23, "code": "(fn [s] (reduce conj () s))", "user": "5f9f744fe4b0715f5002d841"}, {"problem": 23, "code": "reduce conj '()", "user": "5fbc8747e4b03f550f448239"}, {"problem": 23, "code": "#(into () %)", "user": "5fbe40bce4b03f550f448246"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "57b758f4e4b0fbc9809a27cf"}, {"problem": 23, "code": "(fn [se]\n  (reduce conj '() se))", "user": "5fbf6fe7e4b0ad6fc3476147"}, {"problem": 23, "code": "(fn my-reverse [coll]\n  (reduce conj '() coll))", "user": "5a4f11e5e4b05d388ecb6bc6"}, {"problem": 23, "code": "(fn [x]\n      (into '() x))", "user": "5fbf03c2e4b03f550f44824c"}, {"problem": 23, "code": "(fn rev \n  ([ls] (rev ls '()))\n  ([ls acc]\n   (if (empty? ls) \n     acc\n     (recur (rest ls) (cons (first ls) acc)))))", "user": "5fad8efee4b08cb800c85af3"}, {"problem": 23, "code": "(fn [l] (reduce (fn [a b] (if (seq? a) (into a (list b)) (list b a))) l))", "user": "5fc241c1e4b0edf42a5593d1"}, {"problem": 23, "code": "#(into () %)", "user": "5eb61e63e4b00a66d4a95231"}, {"problem": 23, "code": "(fn [coll]\n  (loop [in coll out []]\n    (if (empty? in)\n      out\n      (recur (rest in) (cons (first in) out)))))", "user": "5fc51d88e4b0ad564c76812a"}, {"problem": 23, "code": "reduce conj '()", "user": "5fc4d277e4b06ffabd1ef72a"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5fc3850de4b0db0e95a5f3fd"}, {"problem": 23, "code": "#(into () %)", "user": "5fc5c303e4b02c825b0c8c1a"}, {"problem": 23, "code": "reduce conj ()", "user": "5ee685ffe4b029a2061bbe99"}, {"problem": 23, "code": "reduce #(conj % %2) '()", "user": "5fc9d967e4b0689391cc77ce"}, {"problem": 23, "code": "(fn [coll]\n  (reduce #(conj %1 %2) '() coll))", "user": "5fca55b8e4b07e53c2f3efe4"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5fcbf407e4b07e53c2f3eff0"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5fcc2d28e4b07e53c2f3eff2"}, {"problem": 23, "code": "(fn [elem]\n  (reduce conj '() elem))", "user": "5fba8fe9e4b03f550f448231"}, {"problem": 23, "code": "reduce conj()", "user": "5fcce3b1e4b07e53c2f3eff6"}, {"problem": 23, "code": "into ()", "user": "5fcdb9f5e4b07e53c2f3effe"}, {"problem": 23, "code": "(fn reverseList \n  [coll]\n  (if (empty? coll)\n    []\n    (conj (reverseList (rest coll)) (first coll))\n    ))", "user": "5fce0cc5e4b07e53c2f3f000"}, {"problem": 23, "code": "(fn [x] (reduce conj () x))", "user": "5fb46916e4b08cb800c85b46"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5fd19eede4b07e53c2f3f03b"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5fd12b42e4b07e53c2f3f02f"}, {"problem": 23, "code": "(fn rev [l] (if (empty? l) l (apply conj '() l)))", "user": "54d7e277e4b0a52adc2e2031"}, {"problem": 23, "code": "(fn [x]\n  (reduce\n     (fn [a b]\n       (cons b a))\n     []\n     x))", "user": "5b21ad60e4b03cfeda66ed54"}, {"problem": 23, "code": "(fn [l] (for [i (range (count l) 0 -1)] (nth (vec l)(dec i)) ))", "user": "5fd69363e4b05ac5b16ea10e"}, {"problem": 23, "code": "#(into '() %)", "user": "5fd6f12be4b05ac5b16ea110"}, {"problem": 23, "code": "(fn rev [l]\n  (loop [lst l ret '()]\n    (cond\n     (empty? lst) ret\n     :else (recur (rest lst) (conj ret (first lst))))))", "user": "5fb8fe30e4b03f550f448223"}, {"problem": 23, "code": "reduce conj ()", "user": "5fc61b45e4b06010e5ea651a"}, {"problem": 23, "code": "reduce conj ()", "user": "5f3ee0d9e4b004f08c61c55c"}, {"problem": 23, "code": "(fn [coll] (reduce #(cons %2 %1) '() coll))", "user": "5b2d1c1de4b025bcb146f2c0"}, {"problem": 23, "code": "(fn my-reverse [xs]\n  (if (= xs nil)\n    []\n    (cons (last xs) (my-reverse (butlast xs)))))", "user": "5fd9bf47e4b05ac5b16ea125"}, {"problem": 23, "code": "reduce conj '()", "user": "5fda0f46e4b05ac5b16ea126"}, {"problem": 23, "code": "apply conj ()", "user": "5fd20118e4b07e53c2f3f042"}, {"problem": 23, "code": "reduce conj '()", "user": "5fd8bcb3e4b05ac5b16ea11b"}, {"problem": 23, "code": "(fn reverse-mine\n  ([coll]\n   (reverse-mine coll '()))\n  ([coll reversed-list]\n   (if (empty? coll)\n     reversed-list\n     (recur (rest coll) (conj reversed-list (first coll))))))", "user": "5fdba25ae4b05ac5b16ea135"}, {"problem": 23, "code": "#(reduce conj() %)", "user": "5fd361f2e4b07e53c2f3f04e"}, {"problem": 23, "code": "reduce conj ()", "user": "5fdb51fae4b05ac5b16ea12f"}, {"problem": 23, "code": "(fn [col] (apply conj () col))", "user": "5fdc6ad4e4b05ac5b16ea13a"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5f96fa49e4b0715f5002d7e9"}, {"problem": 23, "code": "(fn f [r x] (if (= 0 (count x))\n                r\n                (f (conj r (first x)) (rest x)))) '()", "user": "5f3567d6e4b0574c87022c44"}, {"problem": 23, "code": "#(loop [iteration (count (seq %1)) reversed []]\n   (if (== iteration 0)\n     reversed\n     (recur (dec iteration)\n            (conj reversed (nth (seq %1) (dec iteration))))))", "user": "5fe1589ee4b05ac5b16ea16c"}, {"problem": 23, "code": "#(into '() %)", "user": "5fe18014e4b05ac5b16ea16d"}, {"problem": 23, "code": "#(loop [in %\n        out []]\n   (if (empty? in)\n     out\n     (recur (rest in) (cons (first in) out))))", "user": "5fbb010ae4b03f550f448233"}, {"problem": 23, "code": "reduce conj ()", "user": "5fe0d4d4e4b05ac5b16ea164"}, {"problem": 23, "code": "reduce #(cons %2 %1) []", "user": "5fe362d9e4b05ac5b16ea179"}, {"problem": 23, "code": "(fn [l] (reduce (fn [acc val] (conj acc val)) '() l))", "user": "5fe5a64de4b05ac5b16ea187"}, {"problem": 23, "code": "#(let [c (count %)] \n  (for [i (range c)]\n    (first (drop (- (- c 1) i) %))))", "user": "5fdd15f7e4b05ac5b16ea141"}, {"problem": 23, "code": "(fn [inn]\n  (let [coll (seq inn)]\n    (loop\n      [start-coll coll\n       end-coll '()]\n      (if (empty? start-coll)\n        (if (vector? inn)\n          (into [] end-coll)\n          end-coll)\n        (let [[f & r] start-coll]\n          (recur r\n                 (conj end-coll f)))))))", "user": "5f1f2b95e4b0f565ad99827a"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "5fd2e391e4b07e53c2f3f049"}, {"problem": 23, "code": "(fn [coll] (reduce conj () coll))", "user": "5fe7a56ee4b05ac5b16ea190"}, {"problem": 23, "code": "(fn myReverse [coll]\n  (if (empty? coll)\n    '()\n    (conj (myReverse (drop-last 1 coll)) (last coll))\n    ))", "user": "5fe85417e4b05ac5b16ea194"}, {"problem": 23, "code": "(partial reduce conj '())", "user": "5fe876ade4b05ac5b16ea195"}, {"problem": 23, "code": "reduce conj ()", "user": "5fe7ed58e4b05ac5b16ea191"}, {"problem": 23, "code": "(fn [ls]\n  (loop [ls ls\n         newls ()\n         ]\n    (if (empty? ls)\n      newls\n      (recur (rest ls) (conj newls (first ls)))\n      )    \n    \n    )\n  )", "user": "5fe1b893e4b05ac5b16ea16f"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5fe9f657e4b05ac5b16ea1a6"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5fea32f3e4b05ac5b16ea1aa"}, {"problem": 23, "code": "#(into () %)", "user": "5fe9169ce4b05ac5b16ea1a0"}, {"problem": 23, "code": "(fn revere [seq]\n  (if (empty? seq)\n    []\n    (conj (revere (rest seq)) (first seq))))", "user": "5fe09d1fe4b05ac5b16ea15b"}, {"problem": 23, "code": "#(reduce (fn [sum x] (cons x sum)) (empty %) %)", "user": "5feb12f0e4b05ac5b16ea1b0"}, {"problem": 23, "code": "reduce conj nil", "user": "54aec375e4b09f271ff37cf9"}, {"problem": 23, "code": "reduce conj ()", "user": "5e68994ee4b04a83ad7cd266"}, {"problem": 23, "code": "(fn r [s]\n        (if (empty? s)\n          s\n          (concat (r (rest s)) [(first s)])))", "user": "546c4377e4b00cfc9eacc177"}, {"problem": 23, "code": "(fn my-reverse [coll]\n  (if (empty? coll)\n    []\n    (conj (my-reverse (rest coll)) (first coll))))", "user": "5fef4292e4b05ac5b16ea1d7"}, {"problem": 23, "code": "reduce conj '()", "user": "5fe75ecfe4b05ac5b16ea18d"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5fee13c7e4b05ac5b16ea1d1"}, {"problem": 23, "code": "(fn my-reverse [xs]\n  (if (empty? xs)\n    xs\n    (conj (my-reverse (drop-last xs)) (last xs))))", "user": "5fef5ccce4b05ac5b16ea1d9"}, {"problem": 23, "code": "(fn rev [xs] \n  (if (empty? xs) \n    []\n    (conj (rev (rest xs)) (first xs))))", "user": "5fef5c6de4b05ac5b16ea1d8"}, {"problem": 23, "code": "(fn[sq] \n  (reduce \n   (fn[acc, item](conj acc item)) () sq))", "user": "5fed2610e4b05ac5b16ea1c7"}, {"problem": 23, "code": "reduce conj ()", "user": "5f548678e4b0a0bc16850a7e"}, {"problem": 23, "code": "(partial reduce conj '())", "user": "5bf9d9b7e4b0bdcf453d15c4"}, {"problem": 23, "code": "reduce conj ()", "user": "5ff19fe0e4b05ac5b16ea1f4"}, {"problem": 23, "code": "(fn [s] (let [s (vec s) c (count s)]\n          (map #(nth s %) \n             (take c\n                   (iterate dec \n                            (dec (count s)\n                                 )\n                            )\n                   )\n             )\n  ))", "user": "5ff2091ce4b05ac5b16ea1f8"}, {"problem": 23, "code": "(fn foo [s]\n  (when s \n    (cons \n     (last s) \n     (foo (butlast s))\n    )\n  )\n)", "user": "5ff214e7e4b05ac5b16ea1fa"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5fef99e2e4b05ac5b16ea1e0"}, {"problem": 23, "code": "#(into () %)", "user": "5fec4f5ee4b05ac5b16ea1bf"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5ff3aca3e4b05ac5b16ea205"}, {"problem": 23, "code": "reduce conj '()", "user": "5ff32e20e4b05ac5b16ea1ff"}, {"problem": 23, "code": "(partial reduce conj '())", "user": "5ff454a1e4b05ac5b16ea20d"}, {"problem": 23, "code": "(fn [xs]\n  (reduce #(cons %2 %1)\n          []\n          xs))", "user": "5ff489d8e4b05ac5b16ea210"}, {"problem": 23, "code": "#(for [x (-> %1 count range)] (nth (seq %1) (- (count %1) 1 x)))", "user": "5ff4e28ae4b06df49cee1486"}, {"problem": 23, "code": "#(apply conj '() %)", "user": "5fd92743e4b05ac5b16ea11f"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5fada7cce4b08cb800c85af5"}, {"problem": 23, "code": "reduce (fn [acc x] (cons x acc)) nil", "user": "5ff5bc1ae4b06df49cee1490"}, {"problem": 23, "code": "reduce #(into  [%2] %1) []", "user": "5fa28e2be4b0f0ebd91b77f0"}, {"problem": 23, "code": "(fn [s] (reduce #(conj %1 %2) '() s))", "user": "5ff676a9e4b06df49cee1497"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5ff5971ee4b06df49cee148d"}, {"problem": 23, "code": "reduce conj ()", "user": "5fd10010e4b07e53c2f3f02a"}, {"problem": 23, "code": "#(into () %)", "user": "5f96909be4b0715f5002d7d9"}, {"problem": 23, "code": "#(reduce (fn [acc val]\n          (cons val acc)) '() %)", "user": "5ff8ead1e4b06df49cee14ab"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "5ff93da9e4b06df49cee14af"}, {"problem": 23, "code": "reduce conj ()", "user": "5fcd15d6e4b07e53c2f3eff7"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "5ff709e4e4b06df49cee149b"}, {"problem": 23, "code": "reduce conj '()", "user": "5ffbc965e4b074f607df65ea"}, {"problem": 23, "code": "#(into '() %)", "user": "593352b7e4b072a2710fd052"}, {"problem": 23, "code": "(fn [x] (sort #(compare %2 %1) x))", "user": "5ffc18cae4b074f607df65f1"}, {"problem": 23, "code": "(fn [lst]  (if (vector? lst) (vec (reduce conj () lst)) (reduce conj () lst)))", "user": "5ff88607e4b06df49cee14a6"}, {"problem": 23, "code": "(fn my-reverse [coll]\n  (loop [x coll\n         result '()]\n    (if (empty? x)\n      result\n      (recur (rest x) (cons (first x) result)))))", "user": "5f969088e4b0715f5002d7d4"}, {"problem": 23, "code": "(fn [coll]\n    (loop [res '(), sequ (seq coll)]\n      (if sequ\n        (recur (conj res (first sequ)) (next sequ))\n        (cond\n          (vector? coll) (vec res)\n          :else res))))", "user": "5ff64845e4b06df49cee1495"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5ffe2d18e4b074f607df65ff"}, {"problem": 23, "code": "(fn [sequ]\n  (reduce conj () sequ))", "user": "5ffee617e4b074f607df6605"}, {"problem": 23, "code": "#(loop [os %1, news '()] (if-not (= os '()) (recur (rest os) (conj news (first os))) news))", "user": "5ffe889ce4b074f607df6603"}, {"problem": 23, "code": "(fn\n  [coll]\n  (loop [x (count coll)\n         res []]\n    (if (> x 0)\n      (recur (dec x) (conj res (nth (sequence coll) (dec x))))\n      res)))\n\n\n;; reduce conj ()", "user": "5ff61113e4b06df49cee1492"}, {"problem": 23, "code": "(fn [list] (reduce conj '() list))", "user": "5fffecb1e4b074f607df660a"}, {"problem": 23, "code": "reduce #(conj %1 %2) '()", "user": "5faece16e4b08cb800c85b02"}, {"problem": 23, "code": "(fn rev [s]\n  (let [f (first s)\n        r (rest s)]\n    (if (empty? r)\n      [f]\n      (vec (conj (rev r) f)))))", "user": "5e64f44de4b0fd0acd1586ae"}, {"problem": 23, "code": "#(reduce \n    (fn [out in] (cons in out))\n    [] %)", "user": "5ffe6082e4b074f607df6600"}, {"problem": 23, "code": "(fn [coll]\n    (reduce conj () coll))", "user": "529e3258e4b04e0c58e87b8d"}, {"problem": 23, "code": "#(reduce conj () %1)", "user": "6001ea38e4b074f607df662a"}, {"problem": 23, "code": "(fn myreverse [sq]\n  (reduce (fn [a e] (conj a e)) '() sq))", "user": "5fee18f2e4b05ac5b16ea1d2"}, {"problem": 23, "code": "#(into () %)", "user": "60036736e4b074f607df663b"}, {"problem": 23, "code": "reduce conj ()", "user": "6000e5d4e4b074f607df660d"}, {"problem": 23, "code": "(partial reduce #(cons %2 %1) [] )", "user": "6004c750e4b074f607df6645"}, {"problem": 23, "code": "reduce conj '()", "user": "5ffd3422e4b074f607df65f7"}, {"problem": 23, "code": "#(reduce (fn [xs i] (conj xs i)) () %)", "user": "6001c90ce4b074f607df6626"}, {"problem": 23, "code": "reduce conj '()", "user": "5ffd7ce6e4b074f607df65fb"}, {"problem": 23, "code": "(fn [lst] (vec (reduce (fn[col v] (concat [v] col)) [] lst)))", "user": "5bab31f1e4b0a20761a23471"}, {"problem": 23, "code": "reduce conj '()", "user": "6001460ce4b074f607df6611"}, {"problem": 23, "code": "#(loop [s %\n         res (drop (count s) s)]\n    (if (empty? s)\n      res\n      (recur (rest s) (conj res (first s)) )))", "user": "60046db8e4b074f607df6642"}, {"problem": 23, "code": "(fn [seq] (reduce #(cons %2 %1) () seq))", "user": "60065677e4b074f607df6651"}, {"problem": 23, "code": "(fn rev [xs] (if (empty? xs) xs (cons (last xs) (rev (take (- (count xs) 1) xs)))))", "user": "60067b71e4b074f607df6655"}, {"problem": 23, "code": "#(reduce (fn([x y] (conj x y))) '() %)", "user": "60057cd4e4b074f607df664a"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "600456ade4b074f607df6641"}, {"problem": 23, "code": "reduce conj '()", "user": "600777a3e4b074f607df6667"}, {"problem": 23, "code": "(fn [x] (reduce #(conj %1 %2) '() x))", "user": "5fc1c424e4b0edf42a5593d0"}, {"problem": 23, "code": "(fn [s]\n  (loop [s s\n         news '()]\n    (if (seq s)\n      (recur (rest s) (conj news (first s)))\n      news)))", "user": "56a655dbe4b0542e1f8d14eb"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "6009dc95e4b074f607df6681"}, {"problem": 23, "code": "(fn [xs] (reduce #(cons %2 %1) '() xs))", "user": "5f37263de4b0574c87022c4e"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "600c607ce4b074f607df6693"}, {"problem": 23, "code": "reduce conj ()", "user": "600c1c72e4b074f607df6692"}, {"problem": 23, "code": "#(reduce (fn [c v] (into [v] c)) '() %)", "user": "600cb742e4b074f607df6696"}, {"problem": 23, "code": "(fn foo [l]\n  (let [x (first l) xs (rest l)]\n    (if (empty? xs)\n        [x]\n        (conj (foo xs) x))))", "user": "600ae927e4b074f607df6689"}, {"problem": 23, "code": "(fn [xs]\n  (loop [xs xs new-xs []]\n    (if (empty? xs)\n      new-xs\n      (recur (rest xs) (cons (first xs) new-xs)))))", "user": "6001d240e4b074f607df6627"}, {"problem": 23, "code": "reduce conj ()", "user": "600b385ce4b074f607df668d"}, {"problem": 23, "code": "(fn r [l]\n  ((fn rec [l acc]\n     (if (= l '())\n       acc\n       (rec (rest l) (conj acc (first l))))) l '()))", "user": "601004d6e4b074f607df66b2"}, {"problem": 23, "code": "reduce conj '()", "user": "583369e6e4b089d5ab817c9c"}, {"problem": 23, "code": "reduce conj '()", "user": "60096aabe4b074f607df667f"}, {"problem": 23, "code": "(fn[x]\n  (reduce conj () x))", "user": "600d9808e4b074f607df669c"}, {"problem": 23, "code": "#(loop [left % new '()]\n   (if (empty? left) (vec new)\n     (recur (rest left) (conj new (first left)))\n     )\n   )", "user": "600e7113e4b074f607df66a3"}, {"problem": 23, "code": "into ()", "user": "6011b89ee4b074f607df66bc"}, {"problem": 23, "code": "(fn [coll] (reduce conj '() coll))", "user": "58db48a5e4b0a4d5acaab679"}, {"problem": 23, "code": ";;(fn my-flip [some-seq]\n;;  (loop [buffer some-seq\n;;         new-list '()]\n;;     (if (empty? buffer)\n;;        new-list\n;;        (recur\n;;           (rest buffer)\n;;           (conj new-list (first buffer))))))\n ;; use recursion to conj onto beginning of list\n \n reduce #(conj %1 %2) '()", "user": "5fb68f09e4b08cb800c85b58"}, {"problem": 23, "code": "into ()", "user": "5ff70cfde4b06df49cee149c"}, {"problem": 23, "code": "reduce conj ()", "user": "5a9f2c53e4b0d174b936c812"}, {"problem": 23, "code": "(fn my-reverse [x-list]\n  (loop [x-list x-list,\n         y-list '()]\n    (if (empty? x-list)\ny-list\n    (recur (rest x-list) (conj y-list (first x-list)))\n)))", "user": "60170e31e4b0a37c5521f4e7"}, {"problem": 23, "code": "(partial reduce conj '())", "user": "5fc4e1f0e4b036c570ed8145"}, {"problem": 23, "code": "(fn rev [coll]\n  (if (empty? coll)\n    coll\n    (concat (rev (rest coll)) [(first coll)])))", "user": "601aaa93e4b0bf4ca6b10926"}, {"problem": 23, "code": "#(into () %)", "user": "60195030e4b0bf4ca6b10920"}, {"problem": 23, "code": "#(into '() %)", "user": "5fcf86c2e4b07e53c2f3f00d"}, {"problem": 23, "code": "(fn [xs]\n  (reduce \n   (fn [res item]\n     (cons item res))\n   [] \n   xs))", "user": "558ffb4be4b0277789237667"}, {"problem": 23, "code": "into ()", "user": "601697b6e4b012aee256ca0c"}, {"problem": 23, "code": "reduce conj '()", "user": "4e38f245535deb9a81d77f3e"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "601fe14ce4b0bf4ca6b1095c"}, {"problem": 23, "code": "(fn myrev [l]\n  (cond\n   (= [] l)\n   []\n   :else\n   (conj (myrev (rest l)) (first l))))", "user": "602049b8e4b0bf4ca6b10961"}, {"problem": 23, "code": "sort (comp - compare)", "user": "601bdcb3e4b0bf4ca6b10930"}, {"problem": 23, "code": "#(loop [coll % acc nil] (if (empty? coll) acc (recur (rest coll) (conj acc (first coll)))))", "user": "60225c2ae4b0d5df2af22201"}, {"problem": 23, "code": "(fn rev [ls]\n  (if (empty? ls)\n    []\n    (conj (rev (rest ls))\n            (first ls))\n   )\n  )", "user": "60228147e4b0d5df2af22202"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "6022844de4b0d5df2af22203"}, {"problem": 23, "code": "reduce conj ()", "user": "55dec39ce4b050e68259b3e6"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "6023e7f7e4b0d5df2af22217"}, {"problem": 23, "code": "reduce #(conj %1 %2) '()", "user": "6014ccd3e4b074f607df66cd"}, {"problem": 23, "code": "(fn [s]\n  (loop [old s nw '()]\n    (if (empty? old) nw\n      (recur (butlast old) \n             (concat nw (list (last old)))))))", "user": "60264d89e4b0d5df2af2222d"}, {"problem": 23, "code": "#(into () %)", "user": "6026d2cae4b0d5df2af22232"}, {"problem": 23, "code": "reduce \n  (fn [acc val]\n    (cons val acc)\n  ) []", "user": "60271bdae4b0d5df2af22239"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "6029c861e4b0d5df2af22257"}, {"problem": 23, "code": "reduce #(cons %2 %1) ()", "user": "6026737ee4b0d5df2af2222f"}, {"problem": 23, "code": "(fn [seq]\n   (loop [result [] seq seq]\n     (if (= (count seq) 0)\n       result\n       (recur (conj result (last seq)) (drop-last seq))\n       )))", "user": "602b90c1e4b0d5df2af22266"}, {"problem": 23, "code": "(fn rev [a] (if (= a []) [] (conj (rev (rest a)) (first a) ) ))", "user": "602bca69e4b0d5df2af22267"}, {"problem": 23, "code": "(fn rec [s] (\n          loop [[r & more :as all] (seq s)\n                 acc '()]\n             (if all (recur more (cons r acc)) acc )))", "user": "5fdb8657e4b05ac5b16ea133"}, {"problem": 23, "code": "#(reduce\n (fn [acc curr]\n   (cons curr acc))\n '()\n %)", "user": "602bfcefe4b0d5df2af22268"}, {"problem": 23, "code": "into '()", "user": "602abb59e4b0d5df2af2225e"}, {"problem": 23, "code": "(fn [xs] (vals (sort (zipmap (range (count xs) 0 -1) xs))))", "user": "60240f91e4b0d5df2af2221b"}, {"problem": 23, "code": "into '()", "user": "602aa5f1e4b0d5df2af2225d"}, {"problem": 23, "code": "reduce conj ()", "user": "602d5eade4b0d5df2af22279"}, {"problem": 23, "code": "into ()", "user": "602f8400e4b0d5df2af22299"}, {"problem": 23, "code": "reduce conj ()", "user": "5baba1ece4b0a20761a23482"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "602d261de4b0d5df2af22276"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "602d98d5e4b0d5df2af2227a"}, {"problem": 23, "code": "(fn reversit\n  [s]\n  (if (first s)\n    (conj (reversit (rest s)) (first s))\n    []\n  )\n)", "user": "602f56c5e4b0d5df2af22297"}, {"problem": 23, "code": "(fn [x] (reduce conj () x))", "user": "60329afce4b0d5df2af222b8"}, {"problem": 23, "code": "(fn my-reverse [col]\n  (reduce conj () col)\n  )", "user": "6031926ae4b0d5df2af222ac"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "601f508ce4b0bf4ca6b10959"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "602b6cf7e4b0d5df2af22265"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "6032f7f9e4b0d5df2af222b9"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "60282169e4b0d5df2af22240"}, {"problem": 23, "code": "(fn my-reverse [s] (loop [r s n '()] (if (empty? r) n (recur (rest r) (conj n (first r))))))", "user": "60325627e4b0d5df2af222b5"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "600eb95de4b074f607df66a6"}, {"problem": 23, "code": "(fn [seq]\n  (loop [rev '() rem seq]\n    (if (empty? rem)\n     rev\n     (recur (conj rev (first rem)) (rest rem)))))", "user": "6023a3abe4b0d5df2af22212"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "603454cbe4b0d5df2af222cb"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "60335b35e4b0d5df2af222bf"}, {"problem": 23, "code": "#(into () %)", "user": "601bb40de4b0bf4ca6b1092f"}, {"problem": 23, "code": "reduce conj '()", "user": "6022429be4b0d5df2af22200"}, {"problem": 23, "code": "reduce conj '()", "user": "6037e468e4b0d5df2af222e8"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "60231327e4b0d5df2af2220b"}, {"problem": 23, "code": "(fn\n  [coll]\n  (loop [curr-coll coll ans-coll '()]\n    (if (empty? curr-coll)\n      ans-coll\n      (recur (rest curr-coll) (conj ans-coll (first curr-coll)))\n      )\n    )\n  )", "user": "60337f1fe4b0d5df2af222c1"}, {"problem": 23, "code": "(fn temp [seqs]\n        (when-not (empty? seqs)\n          ;'()\n          (conj (temp (drop-last seqs)) (last seqs))\n        ))", "user": "6038b6b4e4b0d5df2af222ef"}, {"problem": 23, "code": "(fn myrev [l] \n  (if (empty? l) [] (conj (myrev (rest l)) (first l)))\n  )", "user": "603ae21de4b0d5df2af222fb"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "603af0ade4b0d5df2af222fc"}, {"problem": 23, "code": "(fn [n]\n  (loop [acc '() ls n]\n    (if (empty? ls)\n      acc\n      (recur (conj acc (first ls)) (rest ls)))))", "user": "603a6c40e4b0d5df2af222f7"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "603ba3a8e4b0d5df2af22300"}, {"problem": 23, "code": "#(apply conj () %)", "user": "600a061de4b074f607df6683"}, {"problem": 23, "code": "(fn [s]\n  (loop [rev '() head (first s) tail (rest s)]\n    (if (nil? head)\n      rev\n      (recur (conj rev head) (first tail) (rest tail))\n      )\n    )\n  )", "user": "603d5f2ae4b0d5df2af2230c"}, {"problem": 23, "code": "(fn rev [l] \n  (if (empty? l)\n  \tl\n    (concat (rev (rest l)) (seq [(first l)]))))", "user": "603eb408e4b0d5df2af22319"}, {"problem": 23, "code": "(fn [x] (reduce (fn [a b] (cons b a)) '() x))", "user": "603e29d4e4b0d5df2af22310"}, {"problem": 23, "code": "#(loop [in % out '()]\n   (if (empty? in) \n     out\n     (recur (rest in) (cons (first in) out))))", "user": "603fae99e4b0d5df2af22322"}, {"problem": 23, "code": "(fn [xs] (reduce (fn [a v] (into [v] a)) [] xs))", "user": "603f6623e4b0d5df2af2231f"}, {"problem": 23, "code": "(fn [cl]\n \n  (map (partial nth (seq cl))\n       (take (count cl)\n             (iterate dec (dec (count cl))))\n       \n       )\n  )", "user": "60436423e4b02d28681c77a3"}, {"problem": 23, "code": "#(loop [oldSeq % newSeq '()]\n    (if\n      (empty? oldSeq) newSeq\n      (recur\n        (butlast oldSeq)\n        (concat newSeq (vector(last oldSeq))))))", "user": "6040f595e4b0d5df2af2232f"}, {"problem": 23, "code": "(fn my-rev [xs]\n  (if (seq xs)\n    (cons (last xs) (my-rev (butlast xs)))\n    xs))", "user": "601c39eee4b0bf4ca6b10937"}, {"problem": 23, "code": "(fn r [s]\n  (if (empty? s) []\n    (conj (r (rest s)) (first s))))", "user": "6045582fe4b02d28681c77b6"}, {"problem": 23, "code": "#(let [rec (fn rec [result l]\n             (if (empty? l)\n               result\n               (rec (conj result (first l))\n                    (rest l))))]\n   (rec '() %))", "user": "60460824e4b02d28681c77bc"}, {"problem": 23, "code": "(fn reverse-sequence [collection] \n  (if (empty? collection)\n    collection\n    (concat\n      (reverse-sequence (rest collection))\n      (list (first collection)))))", "user": "603e063ae4b0d5df2af2230f"}, {"problem": 23, "code": "(fn [xs] \n    (loop [xs xs rev []]\n      (if (empty? xs)\n        rev\n        (recur (rest xs) (cons (first xs) rev))\n        )))", "user": "59203996e4b09b4ee5954c5b"}, {"problem": 23, "code": "(fn [coll] (reduce conj () coll))\n;; this was cheating a bit, I ran (source reverse) in the REPL and used the source code!", "user": "60461117e4b02d28681c77bf"}, {"problem": 23, "code": "reduce #(cons %2 %1) ()", "user": "60461a61e4b02d28681c77c1"}, {"problem": 23, "code": "reduce conj '()", "user": "60396c95e4b0d5df2af222f4"}, {"problem": 23, "code": "into '()", "user": "6046a0c7e4b02d28681c77c6"}, {"problem": 23, "code": "(fn [seq] (loop [coll seq, result '()]\n  (cond (empty? coll)            result\n        :else (recur (rest coll) (conj result (first coll))))))", "user": "60420ee4e4b04b4f332c3e71"}, {"problem": 23, "code": "(fn [x] (vals (sort-by first (zipmap (map #(- %) (range)) x))))", "user": "6034e358e4b0d5df2af222d1"}, {"problem": 23, "code": "reduce conj ()", "user": "60471241e4b02d28681c77c9"}, {"problem": 23, "code": "(fn helper [xs] (if (empty? xs) xs (concat (helper (rest xs)) (take 1 xs))))", "user": "6028365be4b0d5df2af22242"}, {"problem": 23, "code": "(fn [arg]\n  (loop [s nil xs arg]\n    (if (empty? xs)\n      s\n      (recur\n       (cons (first xs) s)\n       (rest xs)\n       )\n      )))", "user": "60486e8ae4b02d28681c77db"}, {"problem": 23, "code": "reduce conj ()", "user": "6045abb4e4b02d28681c77b8"}, {"problem": 23, "code": "#(loop [coll % acc '()]\n   (if (empty? coll)\n     acc\n     (recur\n      (rest coll)\n      (cons (first coll) acc))))", "user": "5f665d45e4b02876ed9fd02f"}, {"problem": 23, "code": "(fn [coll]\n  (loop [input-coll coll\n         output-coll '()]\n    (if (empty? input-coll)\n      output-coll\n      (recur (rest input-coll)\n             (conj output-coll (first input-coll))))))", "user": "604a30c6e4b02d28681c77f0"}, {"problem": 23, "code": "(fn [x]\n  (loop [f (first x)\n         l '()\n         r (rest x)]\n\t(if (empty? r)\n      (conj l f)\n      (recur (first r)\n             (conj l f)\n             (rest r)))))", "user": "563b7724e4b0bfe05bf11814"}, {"problem": 23, "code": "#(reduce (fn [rev item] (conj rev item)) '() %1)", "user": "604ccb9fe4b0b7ec0ac60ac1"}, {"problem": 23, "code": "#(into '() %)", "user": "6020365ae4b0bf4ca6b10960"}, {"problem": 23, "code": "(fn [reversible] (reduce (fn [reversed item] (cons item reversed)) '[] reversible))", "user": "604d3cb1e4b0b7ec0ac60ac2"}, {"problem": 23, "code": "#(reduce (fn [x y] (conj x y)) '() %)", "user": "60196a7fe4b0bf4ca6b10921"}, {"problem": 23, "code": "into ()", "user": "6040e6dbe4b0d5df2af2232a"}, {"problem": 23, "code": "(fn [coll](loop [r (rest coll) acc (conj () (first coll))] (if (= (count r) 0) acc (recur (rest r) (conj acc (first r))))))", "user": "604f4be1e4b0b7ec0ac60ace"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "60504383e4b056659d6341fa"}, {"problem": 23, "code": "(fn [x] (loop [xs (seq x)\n                result []]\n           (if (not (empty? xs))\n             (let [x (last xs)]\n               (recur (drop-last xs) (conj result x)))\n             result)))", "user": "604dc59ee4b0b7ec0ac60ac5"}, {"problem": 23, "code": "(fn reverse-seq [coll]\n  (reduce conj '() coll))", "user": "6051bcfae4b056659d634203"}, {"problem": 23, "code": "(fn my-reverse\n  ([s] (my-reverse s (empty s)))\n  ([s acc] (if (empty? s) acc (my-reverse (rest s) (cons (first s) acc)))))", "user": "60526f08e4b04c8f2157d14d"}, {"problem": 23, "code": "#(loop [x % y ()]\n         (if (not= x ())\n         (recur (rest x) (conj y (first x)))\n         y)\n  )", "user": "5f1eec36e4b0f565ad998274"}, {"problem": 23, "code": "reduce conj ()", "user": "604f3346e4b0b7ec0ac60acd"}, {"problem": 23, "code": "(fn f\n   ([sq]\n    (f (rest sq) (take 1 sq) (empty sq)))\n   ([sq rs typ]\n    (if (empty? sq)\n      (if (sequential? typ) (into typ rs) rs)\n      (recur (rest sq) (cons (first sq) rs) typ))))", "user": "60537cd1e4b04c8f2157d152"}, {"problem": 23, "code": "#(for [i (range (count %))]\n   (nth (vec %) (- (count %) (+ i 1))))", "user": "60511ccfe4b056659d6341ff"}, {"problem": 23, "code": "reduce #(into [%2] %1) []", "user": "60549e69e4b069ae89ce6ac8"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "6058aa34e4b069ae89ce6af4"}, {"problem": 23, "code": "reduce conj ()", "user": "60538924e4b04c8f2157d153"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "6059d2e0e4b07e92fa001ace"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "6059d9c8e4b07e92fa001ad0"}, {"problem": 23, "code": "#(loop [y % z '()]\n    (if (seq y)\n      (recur (rest y) (conj z (first y)))\n      z)\n    )", "user": "5b522591e4b02d533a91bd09"}, {"problem": 23, "code": "(fn [coll]\n  (loop [cs coll \n         result (empty coll)]\n  (if (empty? cs)\n    result\n    (recur (rest cs) (cons (first cs) result)))))", "user": "605b7a90e4b079a07f8593fc"}, {"problem": 23, "code": "(fn [col] (reduce (fn [acc item] (conj acc item)) '() col) )", "user": "605b1197e4b000d535e6f548"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "6059d824e4b07e92fa001acf"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "605c988fe4b0fb8c998d2c7a"}, {"problem": 23, "code": "(fn\n  [s]\n  (loop [s s\n         r '()]\n    (if-not (first s)\n      r\n      (recur (rest s) (conj r (first s))))))", "user": "5ec02e20e4b00a66d4a95288"}, {"problem": 23, "code": "#(reduce (fn [new-coll val] (conj new-coll val)) '() %)", "user": "605b7085e4b079a07f8593fa"}, {"problem": 23, "code": "#(into '() %)", "user": "5f755d0be4b02876ed9fd0a9"}, {"problem": 23, "code": "reduce conj '()", "user": "5ce6a0f4e4b0a17bb84e2b8d"}, {"problem": 23, "code": "(fn [seqq]\n  \n  (into () seqq\n   \n   \n   \n   \n  \n  \n  \n  ))", "user": "53b0750fe4b047364c044483"}, {"problem": 23, "code": "reduce conj ()", "user": "604f9a8be4b039075cafcf65"}, {"problem": 23, "code": "#(reduce conj (list) %)", "user": "60606490e4b03746e80ebf67"}, {"problem": 23, "code": "(fn my-rev [ls]\n  (if (empty? ls) ls\n    (cons (last ls) (my-rev (drop-last ls)))))", "user": "605f5c69e4b03746e80ebf5e"}, {"problem": 23, "code": "#(for [v (range (count %) 0 -1)] (nth (vec %) (- v 1)))", "user": "60622c6ee4b03746e80ebf72"}, {"problem": 23, "code": "reduce conj ()", "user": "6062e1bde4b03746e80ebf75"}, {"problem": 23, "code": "#(into () %)\n; #(reduce conj '() %)", "user": "55129636e4b06e50f9beb1ab"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "60462028e4b02d28681c77c2"}, {"problem": 23, "code": "#(reduce (fn [x y] (conj x y)) '() %)", "user": "60522feae4b0af2ba86d5a0a"}, {"problem": 23, "code": "(fn [coll]\n                  (loop [a-l coll r-list '()]\n                    (if (empty? a-l)\n                      r-list\n                      (recur (rest a-l) (conj r-list (first a-l))))))", "user": "6056e1f4e4b069ae89ce6adc"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "6065569ce4b069485764ddca"}, {"problem": 23, "code": "(fn [seq] (into () seq))", "user": "60630af9e4b069485764ddbc"}, {"problem": 23, "code": "(fn my-reverse [s]\n  (reduce (fn [c e] (conj c e)) '() s))", "user": "6065755ee4b069485764ddcc"}, {"problem": 23, "code": "(fn\n   [coll]\n   (loop [i (- (count coll) 1)\n          rcoll []]\n     (if (< i 0)\n       (seq rcoll)\n       (recur (dec i) (conj rcoll (nth (seq coll) i)))\n       )\n     )\n   )", "user": "60631c2ee4b069485764ddbd"}, {"problem": 23, "code": "(fn [coll]\n  (loop [[r & more :as all] (seq coll)\n         acc '()]\n    (if all\n      (recur more (cons r acc))\n      acc)))", "user": "605a876be4b000d535e6f53c"}, {"problem": 23, "code": "(fn [x]\n  (reduce #(cons %2 %1) nil x))", "user": "6063c4fae4b069485764ddc0"}, {"problem": 23, "code": "reduce conj '()", "user": "60617afee4b03746e80ebf6c"}, {"problem": 23, "code": "into '()", "user": "60689984e4b069485764dde6"}, {"problem": 23, "code": "reduce conj '()", "user": "60678bc7e4b069485764dddd"}, {"problem": 23, "code": "#(into '() %)", "user": "606aafcfe4b069485764ddf6"}, {"problem": 23, "code": "(fn [col] (reduce conj () col))", "user": "5d28c6dce4b092dab7f59c85"}, {"problem": 23, "code": "(partial reduce conj ())", "user": "606b16b8e4b069485764ddf7"}, {"problem": 23, "code": "#(reduce (fn [a x] (cons x a)) '() %)", "user": "606a70a5e4b069485764ddf2"}, {"problem": 23, "code": "reduce conj ()", "user": "605714ffe4b069ae89ce6ae1"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "606d75f5e4b069485764de13"}, {"problem": 23, "code": "(fn  [x]\r\n  (loop [s (empty x)\r\n         rem x]\r\n    (if (empty? rem)\r\n      s\r\n      (recur \r\n        (cons (first rem) s)\r\n        (rest rem)))))", "user": "606e0a42e4b069485764de19"}, {"problem": 23, "code": "(fn [sq]\n   (loop [result [] others sq]\n     (if (seq others)\n       (recur (cons (first others) result ) (rest others))\n       result\n       )))", "user": "5d917ef0e4b0915913b1d402"}, {"problem": 23, "code": "#(into () %)", "user": "606c87aae4b069485764de0d"}, {"problem": 23, "code": "(fn [s] (loop [l s\n               r ()]\n          (if (empty? l)\n            r\n            (recur (rest l) (conj r (first l))))))", "user": "606f005ae4b069485764de1b"}, {"problem": 23, "code": "reduce conj ()", "user": "606ff89be4b069485764de22"}, {"problem": 23, "code": "(fn [coll] (reduce (fn [acc el] (cons el acc)) [] coll))", "user": "5a383581e4b001c08efc0c97"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "6070c7bae4b069485764de27"}, {"problem": 23, "code": "into ()", "user": "554e4d65e4b00713264bd993"}, {"problem": 23, "code": "#(loop [my-seq % rev-seq []]\n   (if (seq my-seq)\n     (recur (butlast my-seq) (conj rev-seq (last my-seq)))\n     rev-seq))", "user": "601a2f59e4b0bf4ca6b10925"}, {"problem": 23, "code": "into ()", "user": "6045e761e4b02d28681c77bb"}, {"problem": 23, "code": "#(into () %)", "user": "606ff56ce4b069485764de21"}, {"problem": 23, "code": "(fn [s] (map first (sort-by second (map #(list %1 %2) s (range (count s) 0 -1)))))", "user": "60735bc9e4b069485764de3c"}, {"problem": 23, "code": "(fn [arr]\n  (for [idx (range (count arr))]\n    (last (drop-last idx arr))))", "user": "605b319de4b079a07f8593f7"}, {"problem": 23, "code": "#(into () %)", "user": "6059f25de4b07e92fa001ad1"}, {"problem": 23, "code": "#(reduce (fn [x y] (conj x y)) '() %)", "user": "6074a0dee4b069485764de48"}, {"problem": 23, "code": "(fn [x] (reduce conj () x))", "user": "6074dfa4e4b069485764de4c"}, {"problem": 23, "code": "(fn [lstt]\r\n  (loop [lst lstt\r\n         result '()]\r\n    (if (= '() lst)\r\n      result\r\n      (recur (rest lst) (conj result (first lst)) )\r\n)))", "user": "6074df6fe4b069485764de4b"}, {"problem": 23, "code": "(fn [s]\n  (into () s)\n)", "user": "6074f5ede4b069485764de52"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "606d7f1ce4b069485764de14"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "6074e088e4b069485764de4d"}, {"problem": 23, "code": "#(reduce conj `() %)", "user": "6024544be4b0d5df2af2221f"}, {"problem": 23, "code": "(fn [x] (reduce conj () x))\n\n;;; con reduce vamos quitando elemenstos de x y a\u00f1adiendo al final con conj", "user": "6075c214e4b069485764de5b"}, {"problem": 23, "code": "(fn zoo [xs]\n  (if-let [x (last xs)]\n    (cons x (zoo (drop-last xs)))\n    nil))", "user": "605b49b7e4b079a07f8593f8"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "6076ddf3e4b069485764de64"}, {"problem": 23, "code": "(fn [s] (reduce #(cons %2 %1) [] s))", "user": "551556a7e4b055c2f668d4e2"}, {"problem": 23, "code": "#(loop [in %\n         out []]\n    (if (not-empty in)\n      (recur\n        (drop-last in)\n        (conj out (last in)))\n      out))", "user": "60759e51e4b069485764de5a"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "60764350e4b069485764de5e"}, {"problem": 23, "code": "#(reduce (fn [acc item]\n            (cons item acc)) '() %)", "user": "6078df3ce4b0a637ed78035b"}, {"problem": 23, "code": "#(reduce (fn [result item] (cons item result)) [] %)", "user": "60794173e4b0a637ed78035d"}, {"problem": 23, "code": "reduce #(cons %2 %1) []", "user": "607a1523e4b0a637ed78036a"}, {"problem": 23, "code": "(fn tyu ([x] (tyu [] x)) ([y x] (if (seq x) (tyu (cons (first x) y) (rest x)) y)))", "user": "6076adb2e4b069485764de60"}, {"problem": 23, "code": "(fn rev [coll]\n  (if (empty? coll)\n    coll\n    (concat\n     (rev (rest coll))\n     (list (first coll)))))", "user": "6077b3c5e4b0a637ed780352"}, {"problem": 23, "code": "(fn [coll] (reduce #(conj %1 %2) '() coll))", "user": "607bd80be4b0a637ed780379"}, {"problem": 23, "code": "(fn [random-sequence]\n  (loop [old-sequence (rest random-sequence)\n         new-sequence (conj () (first random-sequence))]\n    (if (=  (count old-sequence) 0)\n      new-sequence\n      (recur (rest old-sequence) (conj new-sequence (first old-sequence))))))", "user": "607d6bc1e4b03d835a6eaecc"}, {"problem": 23, "code": "(fn [x] (loop [rev '() v x] (if-not(first v) rev (recur (conj rev (first v)) (rest v)))))", "user": "5fa9fd9be4b0fa27300f3df5"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "60777335e4b0a637ed78034f"}, {"problem": 23, "code": "#(reduce conj() %)", "user": "607e1d32e4b03d835a6eaeda"}, {"problem": 23, "code": "(fn [lis] (reduce conj '() lis))", "user": "607dd962e4b03d835a6eaed2"}, {"problem": 23, "code": "#(into () %)", "user": "5ce67c36e4b0a17bb84e2b88"}, {"problem": 23, "code": "#(reduce conj ()  %)", "user": "607d97a6e4b03d835a6eaecf"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "6074e1ade4b069485764de4e"}, {"problem": 23, "code": "reduce conj ()", "user": "607b6452e4b0a637ed780375"}, {"problem": 23, "code": "#(loop [xs %\n        result '()]\n   (if-not (first xs)\n     result\n     (recur (rest xs) (conj result (first xs)))))", "user": "56b2e1c5e4b0982f16b37e0c"}, {"problem": 23, "code": "reduce conj ()", "user": "607e09bee4b03d835a6eaed7"}, {"problem": 23, "code": "(fn [arg] (reduce conj () arg))", "user": "605f92bae4b03746e80ebf62"}, {"problem": 23, "code": "into ()", "user": "5f82609ae4b0c071e6c840f9"}, {"problem": 23, "code": "#(into () %)", "user": "6081b7fce4b0736b099e42d4"}, {"problem": 23, "code": "(fn [coll] (into '() coll))", "user": "608256d7e4b0736b099e42da"}, {"problem": 23, "code": "(fn [coll] (reduce (fn [acc e] (cons e acc)) [] coll))", "user": "60836285e4b0736b099e42e4"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "6074e278e4b069485764de51"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "6074e1e4e4b069485764de4f"}, {"problem": 23, "code": "#(reduce (fn [rev rest] (conj rev rest)) () %)", "user": "602c30e3e4b0d5df2af2226f"}, {"problem": 23, "code": "(fn pb23\n  [xs]\n  (if (empty? xs)\n    []\n    (conj (pb23 (next xs)) (first xs))))", "user": "608135c8e4b0736b099e42d1"}, {"problem": 23, "code": "#(reduce conj nil %)", "user": "60704214e4b069485764de24"}, {"problem": 23, "code": "#(reduce\n  conj () %)", "user": "6085edade4b0736b099e42fc"}, {"problem": 23, "code": "into ()", "user": "6081e475e4b0736b099e42d6"}, {"problem": 23, "code": "#(into () %)", "user": "60838e6de4b0736b099e42e9"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "60864d16e4b0736b099e42fd"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "6086cdefe4b0736b099e4302"}, {"problem": 23, "code": "#(loop [seq % reversed ()]\n    (if (nil? (first seq))\n      reversed\n      (recur (rest seq) (cons (first seq) reversed))))", "user": "60849bd6e4b0736b099e42f2"}, {"problem": 23, "code": "reduce (fn [x y] (conj x y)) (seq ())", "user": "60845eb8e4b0736b099e42ef"}, {"problem": 23, "code": "(fn [lst] (loop [rlst '()\n                 lst lst]\n            (if (empty? lst)\n              rlst\n              (recur (conj rlst (first lst)) (rest lst)))))", "user": "607e1d9de4b03d835a6eaedb"}, {"problem": 23, "code": "(fn [x] (loop [x x result '()] (cond (empty? x) result\n                                     :else (recur (rest x) (conj result (first x))))))", "user": "6078ce29e4b0a637ed78035a"}, {"problem": 23, "code": "#(reduce (fn [acc x]\n           (cons x acc))\n         (empty %)\n         %)", "user": "607e1c1fe4b03d835a6eaed8"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "608828dee4b0ae75613dcee1"}, {"problem": 23, "code": "(fn spotrev [x]\n  (if (empty? x)\n      []\n      (conj (spotrev (rest x)) (first x))))", "user": "60882700e4b0ae75613dcedf"}, {"problem": 23, "code": "reduce conj ()", "user": "6088ed3fe4b0ae75613dcee6"}, {"problem": 23, "code": "(fn [coll]\n  (reduce conj () coll)\n  )", "user": "60752ef6e4b069485764de55"}, {"problem": 23, "code": "(fn rev [x] (if-let [h (first x)]\n                    (concat (rev (rest x)) (list h))\n                    x))", "user": "6087cb25e4b0ae75613dced8"}, {"problem": 23, "code": "(fn [coll] (reduce #(cons %2 %1) [] coll))", "user": "608910a8e4b0ae75613dceed"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "60803206e4b0736b099e42cc"}, {"problem": 23, "code": "into ()", "user": "6086abade4b0736b099e42ff"}, {"problem": 23, "code": "#(into '() %)", "user": "60897837e4b0ae75613dcef2"}, {"problem": 23, "code": "reduce conj ()", "user": "607508f3e4b069485764de54"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "607e1cf9e4b03d835a6eaed9"}, {"problem": 23, "code": "#(->> % seq (into ()))", "user": "60898748e4b0ae75613dcef3"}, {"problem": 23, "code": "(fn rev [ls]\n  (if (= ls ())\n    ()\n    (concat (rev (rest ls)) (list (first ls)))))", "user": "60890415e4b0ae75613dceec"}, {"problem": 23, "code": "(fn [seq]\n  (loop [seq seq\n         ret '()]\n    (if (empty? seq)\n      ret\n      (recur (rest seq) (conj ret (first seq))))))", "user": "607b04e5e4b0a637ed780373"}, {"problem": 23, "code": "#(into '() %)", "user": "608b20a3e4b0adce4b61c441"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "608b3fe1e4b0adce4b61c442"}, {"problem": 23, "code": "(fn [sec] (into '() sec))", "user": "607f3336e4b05857a65e7747"}, {"problem": 23, "code": "(fn [x] (reduce #(cons %2 %1) [] x))", "user": "6089bc95e4b0ae75613dcef5"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "6088c22ee4b0ae75613dcee4"}, {"problem": 23, "code": "(fn [x] (reduce conj () x) )", "user": "608819b6e4b0ae75613dcedd"}, {"problem": 23, "code": "(fn [s] (sort #(compare %2 %1) s))", "user": "608dbb69e4b03bd49d9f36bb"}, {"problem": 23, "code": "( fn [x] (reduce #(cons %2 %1) '() x))", "user": "608ec5e4e4b03bd49d9f36c0"}, {"problem": 23, "code": "(fn ans-23 [arr]\n  (if (empty? arr)\n    []\n    (conj (ans-23 (rest arr)) (first arr))))", "user": "608fac60e4b03bd49d9f36c7"}, {"problem": 23, "code": "#(apply conj () %)", "user": "6033c42ce4b0d5df2af222c3"}, {"problem": 23, "code": "#(into '() %)", "user": "6090e617e4b03bd49d9f36ce"}, {"problem": 23, "code": "(fn [revSeq] (loop [x revSeq y nil] (if (empty? x) y (recur (rest x) (concat (first (partition 1 1 x)) y)))))", "user": "60904332e4b03bd49d9f36ca"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "6088395de4b0ae75613dcee2"}, {"problem": 23, "code": "into ()", "user": "609083a8e4b03bd49d9f36cb"}, {"problem": 23, "code": "(fn [lst] (map #(second %) (sort-by first > (map-indexed list lst))))", "user": "608e5697e4b03bd49d9f36be"}, {"problem": 23, "code": "(fn [coll]\n  (loop [curcoll coll\n         revcoll '()]\n    (if (empty? curcoll)\n      revcoll\n      (recur (rest curcoll) (cons (first curcoll) revcoll)))))", "user": "60726211e4b069485764de36"}, {"problem": 23, "code": "(fn [x] (into '() x))", "user": "608711b1e4b0736b099e4303"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "608e6047e4b03bd49d9f36bf"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "6093b56ce4b00e9e6653c3e0"}, {"problem": 23, "code": ";; lol I guessed here ^^;\n#(into () %)", "user": "60917abde4b00e9e6653c3d5"}, {"problem": 23, "code": "(fn\n    [valu]\n    (loop [a valu \n           b ()]\n     (if (empty? a)\n      b\n      (recur (rest a) (conj b (first a))))))", "user": "608335a4e4b0736b099e42e3"}, {"problem": 23, "code": "(fn my-reverse [x] (if (= 1 (count x)) x (conj (my-reverse (drop-last x)) (last x))))", "user": "6093cc08e4b00e9e6653c3e1"}, {"problem": 23, "code": "(fn [a]\n  ((fn [b acc]\n     (if (empty? b)\n       acc\n       (recur (rest b) (conj acc (first b))))) a ()))", "user": "60919461e4b00e9e6653c3d7"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "608ee2f7e4b03bd49d9f36c1"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "608c270ae4b03bd49d9f36b3"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "6097b95ae4b00e9e6653c3f6"}, {"problem": 23, "code": "(fn my-reverse\n  ([s] (if (or (list? s) (vector? s))\n         (my-reverse s (empty s))\n         (my-reverse (into [] s) [])\n         ))\n  ([s acc]\n   (if (empty? s)\n     acc\n     (recur (pop s) (conj acc (peek s))))\n   ))", "user": "6096d37be4b00e9e6653c3f0"}, {"problem": 23, "code": "(fn my-reverse\n  [coll]\n  (loop [result []\n         coll* coll]\n    (if (empty? coll*)\n      result\n      (recur\n        (conj result (last coll*))\n        (butlast coll*)))))", "user": "6098263be4b00e9e6653c3f9"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "60951d52e4b00e9e6653c3ea"}, {"problem": 23, "code": "#(into () %)", "user": "609aa543e4b00e9e6653c40c"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "609a54f0e4b00e9e6653c40b"}, {"problem": 23, "code": ";;(fn reversing [col]\n;;  (loop [target [] source col]\n;;    (if-not (empty? source)\n;;      (recur (conj target (last source)) (drop-last 1 source))\n;;      target)\n;;  ))\n\n\n(fn reversing2 [coll]\n  (reduce #(conj %1 %2) '() coll))", "user": "6092c0a9e4b00e9e6653c3dc"}, {"problem": 23, "code": "into '()", "user": "609c1db9e4b00e9e6653c416"}, {"problem": 23, "code": "(fn reverse-seq \n  ([col] (reverse-seq col '()))\n  ([col sec-col] (if-let [r (next col)] (recur r (conj sec-col (first col))) (conj sec-col (first col)))))", "user": "609beb06e4b00e9e6653c412"}, {"problem": 23, "code": "(partial reduce #(cons %2 %1) [])", "user": "60919828e4b00e9e6653c3d8"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "6086c44be4b0736b099e4301"}, {"problem": 23, "code": "(fn rev [in]\n  (if (empty? in)\n    (empty in)\n    (conj (rev (drop-last 1 in)) (last in) )))", "user": "6079e5aee4b0a637ed780367"}, {"problem": 23, "code": "(fn [s] (reduce conj () s))", "user": "60a39b80e4b00e9e6653c450"}, {"problem": 23, "code": "(fn [coll]\n  (loop [res []\n         c coll]\n    (if (empty? c)\n      res\n      (recur (cons (first c) res) (rest c)))))", "user": "60a42199e4b00e9e6653c454"}, {"problem": 23, "code": "#(for [i (range (count %))] (nth (vec %) (- (count %) i 1)))", "user": "60a14335e4b00e9e6653c432"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "609ce09fe4b00e9e6653c41c"}, {"problem": 23, "code": "reduce (fn [a b] (conj a b)) '()", "user": "5cc9b7dfe4b0ccb061962864"}, {"problem": 23, "code": "(fn rev [lst]\n               ((fn rev_new [lst, new_lst]\n                 (println lst new_lst)\n                 (case lst\n                   [] new_lst\n                   (rev_new (rest lst) (conj new_lst (first lst))))) lst, (list)))", "user": "60a7c55be4b00e9e6653c468"}, {"problem": 23, "code": "reduce conj '()", "user": "60a78f2ce4b00e9e6653c466"}, {"problem": 23, "code": "#(into '() %)", "user": "609282f6e4b00e9e6653c3da"}, {"problem": 23, "code": "(fn [coll]\n  (reduce (fn [acc el]\n            (conj acc el))\n          '()\n          coll))", "user": "60a7104be4b00e9e6653c465"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "5d3b0764e4b01671435dbd61"}, {"problem": 23, "code": "(fn [x] (reduce conj () x))", "user": "60a58c7ce4b00e9e6653c45c"}, {"problem": 23, "code": "(fn [l & result]\n  (if (seq l)\n    (recur (rest l) (cons (first l) result))\n    result))", "user": "609c503ee4b00e9e6653c419"}, {"problem": 23, "code": "#(loop [coll %\n        acc '()]\n   (if (= (count coll) 0) \n     acc\n     (recur (rest coll) (conj acc (first coll)))))", "user": "60ab1536e4b00e9e6653c47e"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "60ab0ba2e4b00e9e6653c47d"}, {"problem": 23, "code": "into ()", "user": "60ac91c5e4b00e9e6653c485"}, {"problem": 23, "code": "reduce (fn [acc x] (conj acc x)) '()", "user": "60ade833e4b00e9e6653c494"}, {"problem": 23, "code": "#(into '() %)", "user": "60a68a95e4b00e9e6653c461"}, {"problem": 23, "code": "#(reduce conj () %1)", "user": "5f2c5912e4b033932238a664"}, {"problem": 23, "code": "(fn rev2 [x]\n  (let [y (vec x)\n        res (map #(get y (dec (- (count y) (.indexOf y %)))) y)]\n    res))", "user": "60aecd73e4b00e9e6653c49a"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "60a9f193e4b00e9e6653c476"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "60ace8cae4b00e9e6653c489"}, {"problem": 23, "code": "#(vec (reduce (fn [r e] (cons e r)) [] %))", "user": "60ac6345e4b00e9e6653c484"}, {"problem": 23, "code": "#(reduce (fn [rc entry] (conj rc entry)) () %)", "user": "60b1add0e4b0e0fa5f1b4227"}, {"problem": 23, "code": "reduce conj '()", "user": "6071dbede4b069485764de34"}, {"problem": 23, "code": "(fn rev [x]\n  ((fn iter [items acc]\n    (if (empty? items) \n      acc \n      (iter (rest items) (cons (first items) acc)))) x '()))", "user": "60b2aaebe4b0e0fa5f1b4228"}, {"problem": 23, "code": "(fn [l]\n  (let [iter (fn [l r]\n               (if (empty? l)\n                 r\n                 (recur (next l) (conj r (first l)))))]\n    (iter l '())))", "user": "60b34c5de4b0e0fa5f1b422e"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "60b2ad00e4b0e0fa5f1b4229"}, {"problem": 23, "code": "reduce (fn [acc e] (into [e] acc )) []", "user": "60b3b375e4b0e0fa5f1b4232"}, {"problem": 23, "code": "#(into '() %)", "user": "604a3daee4b02d28681c77f2"}, {"problem": 23, "code": "reduce conj '()", "user": "5e4f4617e4b027a2e10ac0b7"}, {"problem": 23, "code": "(fn [xs]\n  (loop [xs xs\n         acc ()]\n    (if (empty? xs)\n      acc\n      (recur (next xs) (conj acc (first xs))))))", "user": "60b57acee4b0e0fa5f1b4238"}, {"problem": 23, "code": "#(reduce (fn [acc x] (conj acc x)) '() %1)", "user": "60b5fa96e4b0e0fa5f1b4242"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "60b174f3e4b0e0fa5f1b4226"}, {"problem": 23, "code": "(partial reduce (fn [a b] (cons b a)) [])", "user": "60b616e1e4b0e0fa5f1b4243"}, {"problem": 23, "code": "reduce #(conj %1 %2) '()", "user": "60b61b40e4b0e0fa5f1b4244"}, {"problem": 23, "code": "(fn [array] (reduce conj '() array))", "user": "60b68974e4b0e0fa5f1b424b"}, {"problem": 23, "code": "(fn bfg [x]\n  (into '() x))", "user": "60b5ecffe4b0e0fa5f1b4241"}, {"problem": 23, "code": "reduce conj ()", "user": "60b7e2c5e4b0e0fa5f1b4252"}, {"problem": 23, "code": "(fn [coll]                                                                                                                                                    \n    (letfn [(iter [coll result]                                                                                                                                           \n              (if (empty? coll) result (iter (drop-last coll) (conj result (last coll)))))]                                                                               \n      (iter coll [])))", "user": "60af5fe2e4b0245e5b1b35c0"}, {"problem": 23, "code": "(fn [list]\n  (loop [lt list\n         reversed-list '()]\n    (if (zero? (count lt))\n      reversed-list\n      (recur (rest lt) (conj reversed-list (first lt))))))", "user": "60b8b9dae4b0e0fa5f1b425d"}, {"problem": 23, "code": "reduce conj '()", "user": "60ae0ac5e4b00e9e6653c495"}, {"problem": 23, "code": "(fn [coll]\n  (loop [out '()\n         xs coll]\n    (let [head (first xs)\n          tail (rest xs)]\n      (if head\n        (recur (conj out head) tail)\n        out))))", "user": "60b66033e4b0e0fa5f1b4248"}, {"problem": 23, "code": "#(into '() %)", "user": "60b7ef35e4b0e0fa5f1b4254"}, {"problem": 23, "code": "(fn reverse-sequence [string]\n  (reduce conj '() string))", "user": "60b98974e4b0e0fa5f1b4271"}, {"problem": 23, "code": "reduce conj ()", "user": "60afc597e4b0245e5b1b35c3"}, {"problem": 23, "code": "(fn my-reverse\n    [coll]\n    (loop [out ()\n           -coll coll]\n      (if (empty? -coll)\n        out\n        (recur (conj out (first -coll)) (rest -coll)))))", "user": "60bb21d5e4b0e0fa5f1b4281"}, {"problem": 23, "code": "into '()", "user": "60aeadd4e4b00e9e6653c499"}, {"problem": 23, "code": "(fn dog [x]\n  (loop [z 1\n         y (conj [] (last x))]\n    (if (<= (count x) z) y \n      (recur (inc z) (conj y (last (drop-last z x)))))))", "user": "60beb061e4b0e0fa5f1b428d"}, {"problem": 23, "code": "#(reduce (fn [res el] (conj res el)) '() %)", "user": "60bf2477e4b0e0fa5f1b4291"}, {"problem": 23, "code": "(fn [s] (reduce conj '() (vec s)))", "user": "60b8f098e4b0e0fa5f1b425f"}, {"problem": 23, "code": "into '()", "user": "60bf911ce4b0e0fa5f1b429c"}, {"problem": 23, "code": "(fn reverser [s]\n  (if (empty? s)\n    []\n    (conj (reverser (rest s)) (first s))))", "user": "60ad8af3e4b00e9e6653c490"}, {"problem": 23, "code": "(fn reverse-a-seq\n  [col]\n  (loop [remaining col reversed []]\n    (if (empty? remaining)\n      reversed\n      (recur (drop-last remaining) (conj reversed (last remaining))))))", "user": "60bf7458e4b0e0fa5f1b4296"}, {"problem": 23, "code": "reduce conj ()", "user": "60bfb68be4b0e0fa5f1b429e"}, {"problem": 23, "code": "(fn reverse-a-sequence\n  [s]\n  (->> s\n       (reduce (fn [acc x]\n                 (conj acc x))\n               '())\n       (#(if (vector? s)\n           (vec %) %))))", "user": "5f2d6bc4e4b033932238a66e"}, {"problem": 23, "code": "(fn rrr [coll]\n  (if (empty? coll)\n    (list)\n    (concat\n     (rrr (rest coll))\n     (list (first coll)))))", "user": "60a602e0e4b00e9e6653c45d"}, {"problem": 23, "code": "(fn rrr [coll]\n  (if (empty? coll)\n    (list)\n    (concat\n     (rrr (rest coll))\n     (list (first coll)))))", "user": "6099fe32e4b00e9e6653c409"}, {"problem": 23, "code": "(fn [xs]\n  (loop [out []\n         xs xs]\n    (if (empty? xs)\n      out\n      (recur (cons (first xs) out) (rest xs)))))", "user": "60b63231e4b0e0fa5f1b4247"}, {"problem": 23, "code": "reduce conj '()", "user": "5941f6e3e4b060784b3b7904"}, {"problem": 23, "code": "#(into () %)", "user": "60bf6452e4b0e0fa5f1b4295"}, {"problem": 23, "code": "#(into () %)", "user": "60c558e9e4b0e0fa5f1b42ce"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "60b0e7efe4b0e0fa5f1b4223"}, {"problem": 23, "code": "(fn reverse-e\n([coll] (reverse-e coll []))\n([coll accum]\n(println coll accum)\n  (if (empty? coll) \n   accum\n   (reverse-e (butlast coll) (conj accum (last coll))))))", "user": "60a6bbe5e4b00e9e6653c464"}, {"problem": 23, "code": "reduce #(cons %2 %1) []", "user": "60c0ceb7e4b0e0fa5f1b42a6"}, {"problem": 23, "code": "#(into (list) %1)", "user": "60c4e5dfe4b0e0fa5f1b42cd"}, {"problem": 23, "code": "(fn [x] (reduce conj () x))", "user": "60c7c23be4b0e0fa5f1b42eb"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "60c8cfece4b0e0fa5f1b42fe"}, {"problem": 23, "code": "(fn reversi\n  ([xs] (reversi xs '()))\n  ([xs rev-xs]\n   (cond\n     (empty? xs) rev-xs\n     :else (reversi (rest xs) (conj rev-xs (first xs))))))", "user": "60c91f48e4b0e0fa5f1b4304"}, {"problem": 23, "code": "(fn [x] (into () x))", "user": "60c3f665e4b0e0fa5f1b42c8"}, {"problem": 23, "code": "reduce (fn [x y] (cons y x)) #{}", "user": "60c8e662e4b0e0fa5f1b4300"}, {"problem": 23, "code": "#(into '() %)", "user": "60cb3467e4b0e0fa5f1b4313"}, {"problem": 23, "code": "#(into '() %)", "user": "60ca4bf9e4b0e0fa5f1b430e"}, {"problem": 23, "code": "(fn [n] \n  (loop [nums []\n         n n]\n          (if (empty? n)\n    nums\n    (recur (cons (first n) nums) (rest n)))))", "user": "5e8d3b37e4b0cb016954632c"}, {"problem": 23, "code": "reduce conj '()", "user": "60c06968e4b0e0fa5f1b42a0"}, {"problem": 23, "code": "(fn [xs] (reduce conj (list) xs))", "user": "60cebbd3e4b0e0fa5f1b4334"}, {"problem": 23, "code": "(fn\n  [coll]\n  (loop [collection coll counter (count coll) result []]\n    (println collection)\n    (if (= counter 0)\n      result\n      (recur (drop-last collection) (dec counter) (conj result (last collection))))))", "user": "603e8e3ae4b0d5df2af22316"}, {"problem": 23, "code": "(fn [v] (reduce conj () v))", "user": "60c86bbde4b0e0fa5f1b42fb"}, {"problem": 23, "code": "(fn _reverse [seq]\n  (if (= seq ())\n    ()\n    (cons\n     (last seq)\n     (_reverse (take (- (count seq) 1) seq)))))", "user": "60bf4e5de4b0e0fa5f1b4293"}, {"problem": 23, "code": "#(into '() %)", "user": "609980fce4b00e9e6653c408"}, {"problem": 23, "code": "reduce #(cons %2 %1) '()", "user": "60cb480be4b0e0fa5f1b4317"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "60d1e522e4b0250a41de0b07"}, {"problem": 23, "code": "(fn [coll] (reduce conj () coll))", "user": "60d1ca09e4b0250a41de0b05"}, {"problem": 23, "code": "#(reduce conj () %1)", "user": "60c43b20e4b0e0fa5f1b42c9"}, {"problem": 23, "code": "#(reduce conj (list) %)", "user": "60cb3836e4b0e0fa5f1b4315"}, {"problem": 23, "code": "(fn [coll] (loop [res coll result []] (if (empty? res) result (recur (rest res) (cons (first res) result)))))", "user": "5f8f1d18e4b0715f5002d779"}, {"problem": 23, "code": "reduce (fn [x y] (conj x y)) '()\n\n;; not mine\n;; reduce conj ()", "user": "60ad1b70e4b00e9e6653c48d"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "60d42ffde4b0d60f5ea6f7d9"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "60c90322e4b0e0fa5f1b4302"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "60d655c7e4b0d60f5ea6f7e8"}, {"problem": 23, "code": "into ()", "user": "60d6aa84e4b0d60f5ea6f7e9"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "54394909e4b032a45b86931c"}, {"problem": 23, "code": "(fn rev [lat]\n  (if (empty? lat)\n    '()\n    (concat (rev (rest lat)) (list (first lat)))))", "user": "5f90aeefe4b0715f5002d799"}, {"problem": 23, "code": "(fn [sequence]\r\n  (reduce #(cons %2 %1) '()  sequence))", "user": "60c06c14e4b0e0fa5f1b42a1"}, {"problem": 23, "code": "into '()", "user": "60db702ae4b02d404a3b4372"}, {"problem": 23, "code": "(fn f [x] (if (< 0 (count x)) (cons (last x) (f (butlast x))) nil))", "user": "60ddc7cbe4b0abd5a8cdd531"}, {"problem": 23, "code": "#(reduce conj () %)", "user": "60ce4a2be4b0e0fa5f1b4330"}, {"problem": 23, "code": "#(reduce conj '() %)", "user": "60dd865ee4b0d8b48c489db3"}, {"problem": 23, "code": "(fn [lst]\n  (loop [result '() l lst]\n    (if (empty? l)\n      result\n      (recur (conj result (first l)) (rest l)))))", "user": "60e2aca7e4b002d5a55d5f3b"}, {"problem": 23, "code": "#(reduce (fn [alist x] (conj alist x)) () %)", "user": "60460876e4b02d28681c77bd"}, {"problem": 23, "code": "(fn [lst & rev-lst]\n       (if (empty? lst)\n           rev-lst\n           (recur (drop-last lst) (concat rev-lst [(last lst)]  ))))", "user": "6079e2dfe4b0a637ed780366"}, {"problem": 23, "code": "(fn reverse-seq [coll]\n  (let [tail (next coll)\n        head (first coll)]\n        (if tail\n          (conj (reverse-seq (vec tail)) head)\n          coll)))", "user": "60e89572e4b0fbed2fe3123e"}]