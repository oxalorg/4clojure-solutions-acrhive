[{"code": "#(not (apply = %&))", "problem": 83, "user": "4db1fe241254ad5b4805fa77"}, {"code": "(fn [& b]\r\n  (every? identity\r\n    (map (partial some identity)\r\n    [b (map not b)])))", "problem": 83, "user": "4dcd818e535d5973398f929d"}, {"code": "(fn [& a] (not (apply = a)))", "problem": 83, "user": "4dad8fe9c9a9d6ed1899dc57"}, {"code": "#(apply not= %&)", "problem": 83, "user": "4db5c722535d87e67b28fe12"}, {"code": "(fn [x & xs]\r\n  ((complement #(every? (fn [y] (= x y)) xs))))", "problem": 83, "user": "4db599e6535d87e67b28fe11"}, {"code": "(fn [& b] (and (not-every? true? b) (not (not-any? true? b))))", "problem": 83, "user": "4dd6fa35535d2dad7130b5cd"}, {"code": "(fn [ & args] (not (or (every? #(= true %) args) (not-any? #(= true %) args))))", "problem": 83, "user": "4dc3780b535da86f151f0c3f"}, {"code": "(fn [& bools] \r\n  (and (true? (some true? bools)) \r\n       (not-every? true? bools)))", "problem": 83, "user": "4dd6d7ee535d2dad7130b5cb"}, {"code": "(fn half-truth [& ts]\r\n  (let [tts (partition 2 1 ts)]\r\n    (if (some #(not= (first %)\r\n                     (second %)) tts)\r\n      true\r\n      false)))", "problem": 83, "user": "4dd62278535d2dad7130b5c7"}, {"code": "(fn [& bs]\r\n  (if (and (some true? bs) (some false? bs))\r\n    true\r\n    false))", "problem": 83, "user": "4dd6d6a0535d2dad7130b5ca"}, {"code": "(fn [& args]\r\n    (and (not-every? true? args) \r\n         (not-every? false? args)))", "problem": 83, "user": "4dd61f98535d2dad7130b5c6"}, {"code": "(fn [& xs]\r\n  (boolean \r\n    (and (some true? xs)\r\n         (some false? xs))))", "problem": 83, "user": "4dbb1126535d1e037afb21b3"}, {"code": "(fn[& args](and (boolean(some identity args))(not-every? identity args)))", "problem": 83, "user": "4ddbd934535d02782fcbe9fc"}, {"code": "(fn half-true-false [& lst]\r\n  (= (some #(= true %) lst)\r\n     (some #(= false %) lst)\r\n     ))", "problem": 83, "user": "4ddc620d535d02782fcbea06"}, {"code": "(fn [x & y] \r\n  (let [z (conj y x)]\r\n\t\t (cond\r\n\t\t   (or (every? identity z)\r\n\t\t       (not-any? identity z)) false\r\n\t\t   :else true)))", "problem": 83, "user": "4db342d7535df7e46ed9b6cd"}, {"code": "(fn h1 [& l]\r\n  (= 2 (count (group-by true? l))))", "problem": 83, "user": "4dadca03c9a9d6ed4199dc57"}, {"code": "(fn my [& args]\r\n  (and (not= (some #{true} args) nil)\r\n             (not-every? true? args)))", "problem": 83, "user": "4dd023dd535d5973398f92ad"}, {"code": "(fn ([x] (and (or x) (not (and x))))\r\n  ([x y] (and (or x y) (not (and x y))))\r\n\t([x y z] (and (or x y z) (not (and x y z))))\r\n\t([x y z a] (and (or x y z a) (not (and x y z a))))\r\n)", "problem": 83, "user": "4dd579b5535dae65d5c462ea"}, {"code": "(fn [b & bs]\r\n  (if (= 1 (count (distinct (cons b bs)))) \r\nfalse true))", "problem": 83, "user": "4dc986d0535d5973398f9285"}, {"code": "(fn [& bs] \r\n  (let [bset (set bs)]\r\n    (and (contains? bset true)\r\n         (contains? bset false))))", "problem": 83, "user": "4ddc1c89535d02782fcbea01"}, {"code": "(fn [& xs]\r\n  (if (reduce #(or %1 %2) xs)\r\n(not (reduce #(and %1 %2) xs)) false))", "problem": 83, "user": "4db1bfe21254ad5b4805fa71"}, {"code": "(fn [& rst]\r\n  (if (and (some identity rst) (not (every? identity rst)))\r\n    true\r\n    false))", "problem": 83, "user": "4de2f44f535d08e6dec9fdec"}, {"code": "(fn foo [& arg]\r\n    (if (= 1 (count arg))\r\n        (not arg)\r\n        (and (reduce #(or %1 %2) false arg) (not (reduce #(and %1 %2) true arg)))))", "problem": 83, "user": "4dddf817535d08e6dec9fdd3"}, {"code": "#(true? (and (some true? %&) (some false? %&)))", "problem": 83, "user": "4db5082e535d87e67b28fe03"}, {"code": "(fn [& coll] (and (not-every? identity coll) (not (nil? (some identity coll)))))", "problem": 83, "user": "4dbbdf86535d3f4042261ece"}, {"code": "#(loop [sawT false sawF false bs %&]\r\n  (cond\r\n    (and sawT sawF) true\r\n    (empty? bs) false\r\n    (first bs) (recur true sawF (rest bs))\r\n    :else (recur sawT true (rest bs))))", "problem": 83, "user": "4ddbfb8a535d02782fcbea00"}, {"code": "(fn [& more] (if(and(some #(= false %) more)(some #(= true %) more)) true false))", "problem": 83, "user": "4de18de7535d08e6dec9fde8"}, {"code": "not=", "problem": 83, "user": "4dce6e41535d5973398f92a2"}, {"code": "(fn [& x]\r\n  (if (or (nil? (get (set x) false))\r\n           (nil? (get (set x) true)))\r\n      false\r\n      true))", "problem": 83, "user": "4ddee37c535d08e6dec9fddc"}, {"code": "(fn [ & coll]\r\n  (and (true? (some true? coll)) (not-every? true? coll)))", "problem": 83, "user": "4dd52e29535dae65d5c462e5"}, {"code": "#(and (not-every? false? %&) (not-every? true? %&))", "problem": 83, "user": "4de77a0a535d08e6dec9fdfa"}, {"code": "(fn[& arg]\r\n  (loop[cur (first arg) cdr(rest arg)]\r\n  (if(empty? cdr)\r\n\t false\r\n\t (if(= cur (first cdr))\r\n\t   (recur (first cdr) (rest cdr))\r\n\t   true))))", "problem": 83, "user": "4dc7f472535d8a4b2fd74293"}, {"code": "(fn [& x] (= (count (set x)) 2))", "problem": 83, "user": "4df1ce44535d08e6dec9fe1f"}, {"code": "(fn [& args] \r\n             (prn args)\r\n              (and (boolean (some true? args)) (boolean (some false? args))))", "problem": 83, "user": "4deb529a535d08e6dec9fe04"}, {"code": "(fn [& coll]\n  (if (and (some (fn [x] x) coll) (not= coll (take (count coll) (repeat true))))\n  true\n  false))", "problem": 83, "user": "4df1e213535d08e6dec9fe20"}, {"code": "not=", "problem": 83, "user": "4dee4a9c535d08e6dec9fe11"}, {"code": "(letfn [(xor [& bs]\r\n  (let [m (group-by identity bs)]\r\n    (boolean (and (m true) (m false)))))]\r\n  xor)", "problem": 83, "user": "4df3d4f4535d08e6dec9fe2c"}, {"code": "(fn [& bools]\r\n   (and (not (every? true? bools)) (true? (some true? bools))))", "problem": 83, "user": "4de623ef535d08e6dec9fdf4"}, {"code": "(fn [& vs ]\r\n   (boolean (and (some true? vs) (not-every? true? vs))))", "problem": 83, "user": "4def301c535d08e6dec9fe12"}, {"code": "(fn [& args]\r\n  (not (or (every? boolean args)\r\n           (every? not args))))", "problem": 83, "user": "4dfd4ba8535d04ed9115e781"}, {"code": "(fn derp [& values]\r\n  (let [r (and (some true? values) (some false? values))]\r\n    (if (nil? r)\r\n      false\r\n      true)))", "problem": 83, "user": "4df407c3535d08e6dec9fe2e"}, {"code": "not=", "problem": 83, "user": "4e03c616535d04ed9115e796"}, {"code": "(fn [& args]\r\n  (and\r\n   (not (nil? (some #(= true %) args))) \r\n   (not-every? #(= true %) args)))", "problem": 83, "user": "4df3df8a535d08e6dec9fe2d"}, {"code": "#(true? (and (some identity %&) (not-every? identity %&)))", "problem": 83, "user": "4df669d4535d08e6dec9fe35"}, {"code": "(fn [& bs] (let [result (and (not (every? true? bs)) (some true? bs))]\r\n    (if (contains? #{false true} result) result false)))", "problem": 83, "user": "4e0e0529535d04ed9115e7b9"}, {"code": "(fn [& xs] (and (not (every? #(= true %) xs))\r\n                 (not (every? #(= false %) xs))\r\n                 (some #(= true %) xs)))", "problem": 83, "user": "4e059278535d04ed9115e7a5"}, {"code": "(fn [& params] (boolean (and (some true? params) (not (every? true? params)))))", "problem": 83, "user": "4dbd0161535d020aff1edf3f"}, {"code": "(fn [& x] (= 2 (count (set x))))", "problem": 83, "user": "4daa374930acd6ed13482a68"}, {"code": "(fn [& rest]\r\n   (if (and (some true? rest)\r\n        (some false? rest))\r\n     true\r\n     false))", "problem": 83, "user": "4e0d8c27535d04ed9115e7b7"}, {"code": "(fn [& args]\r\n  (if (apply = true args)\r\n    false\r\n    (if (some #{true} args)\r\n      true\r\n      false)))", "problem": 83, "user": "4e02bee8535d04ed9115e791"}, {"code": "#(and (boolean (some true? %&)) (not (every? true? %&)))", "problem": 83, "user": "4dac39a28cc9d6edb8beb0b3"}, {"code": "(fn sometrue [& initxs]\r\n  (loop [ts false, fs false, xs initxs]\r\n    (if (empty? xs)\r\n      (and ts fs)\r\n      (recur (or ts (= true (first xs)))\r\n             (or fs (= false (first xs)))\r\n             (rest xs)))))", "problem": 83, "user": "4e123905535d04ed9115e7ce"}, {"code": "(fn [& bs] \r\n  (let [f (filter true? bs)\r\n        cf (count f)]\r\n  (and (> cf 0) (< cf (count bs)))))", "problem": 83, "user": "4dbad895535d1e037afb21ae"}, {"code": "(fn [& bs]\r\n  (let [c (count (filter (fn [b] b) bs))]\r\n    (and (> c 0) (not= c (count bs)))))", "problem": 83, "user": "4db0114d838c48654951d9b8"}, {"code": "not=", "problem": 83, "user": "4dd66da7535d2dad7130b5c8"}, {"code": "#(true? (and (some true? %&) (some false? %&)))", "problem": 83, "user": "4e1158aa535d04ed9115e7c6"}, {"code": "(fn [& xs] (if (and (some true? xs) (some false? xs))\r\n               true false))", "problem": 83, "user": "4e18ed7a535d04ed9115e7f6"}, {"code": "(fn [ & r]\r\n   (not (or (every? false? r) (every? true? r))))", "problem": 83, "user": "4deff9f9535d08e6dec9fe15"}, {"code": "(fn [& coll]\r\n      (if (every? (fn [x] (= x true)) coll)\r\n        false\r\n        (not (every? (fn [x] (= x false)) coll))))", "problem": 83, "user": "4dc29a1d535d020aff1edf96"}, {"code": "(fn myht [ & lt]\r\n    (if (= 2 (count (set lt))) true false))", "problem": 83, "user": "4e1b2cd9535d04ed9115e7fd"}, {"code": "(fn half-truth \r\n  [ & xs]\r\n    (if (some true? xs)\r\n      (if (every? true? xs)\r\n        false\r\n        true)\r\n      false))", "problem": 83, "user": "4e16bdef535d04ed9115e7e9"}, {"code": "not=", "problem": 83, "user": "4e14b925535d04ed9115e7df"}, {"code": "(fn [& x] (and (not (nil? (some identity x))) (not (nil? (some not x)))))", "problem": 83, "user": "4e14108c535d04ed9115e7dd"}, {"code": "(fn [& b]\r\n  (if (and (some true? b)\r\n       (not-every? true? b))\r\n    true\r\n    false))", "problem": 83, "user": "4ddbdc1b535d02782fcbe9fd"}, {"code": "(fn [& x]\r\n   (and (not (not-any? identity x)) (not-every? identity x)))", "problem": 83, "user": "4e1f9bb5535d04ed9115e80d"}, {"code": "(fn [& bools]\r\n  (not (or (every? true? bools)\r\n           (every? false? bools))))", "problem": 83, "user": "4e22b78b535d04ed9115e81e"}, {"code": "(fn [& more]\r\n  (let [expr (and (some true? more) (some false? more))]\r\n    (true? expr)))", "problem": 83, "user": "4ddb339c535d02782fcbe9f9"}, {"code": ";(comp boolean (partial some true?) list)\n\n(fn [& ls]\n  (= 2 (count (set ls))))", "problem": 83, "user": "4de165f3535d08e6dec9fde6"}, {"code": "(fn [& args]\n  (or (and\n    (some true? args)\n    (not (every? true? args))) false))", "problem": 83, "user": "4e28120f535deb9a81d77efa"}, {"code": "(fn [& more] (and (not (nil? (some true? more))) (not (nil? (some false? more)))))", "problem": 83, "user": "4e232f34535d04ed9115e81f"}, {"code": "(fn [first & others]\n    (and\n        (reduce #(or %1 %2) first others)\n        (not (reduce #(and %1 %2) first others))))", "problem": 83, "user": "4e2f9e71535deb9a81d77f11"}, {"code": "not=", "problem": 83, "user": "4e307313535deb9a81d77f14"}, {"code": "(fn [& m]\n  (and (reduce #(or %1 %2) m) (not (reduce #(and %1 %2) m)))\n)", "problem": 83, "user": "4e3456f9535deb9a81d77f2a"}, {"code": "(fn bools\n  ([x] false)\n  ([x y]\n    (if (and x y)\n        false\n        (if (or x y)\n            true\n            false\n        )\n    )\n  )\n  ([x y z]\n    (if (bools x y)\n        true\n        (not z)\n        \n    )   \n    \n  )\n  ([x y z & more]\n    (if (bools x y)\n        true\n        (if (bools z (first more))\n            true\n            (bools (rest more))\n        )\n    )\n  )\n  \n)", "problem": 83, "user": "4e333091535deb9a81d77f25"}, {"code": "(fn [& bools]\n  (loop [x (first bools) xs (rest bools) had_false false had_true false]\n    (if (false? x)\n      (if had_true\n        true\n        (recur (first xs) (rest xs) true had_true))\n      (if (true? x)\n        (if had_false\n          true\n          (recur (first xs) (rest xs) had_false true))\n        false))))", "problem": 83, "user": "4dafa380edd6309eace4d17c"}, {"code": "(fn [& x] \n  (let [y (distinct x)]\n    (if (= (count y) 1)\n        false\n        (or (first y) (last y))\n    )))", "problem": 83, "user": "4db1b5841254ad5b4805fa70"}, {"code": "(fn [ & pms ] (if (apply = pms) false (if (some true? pms) true\nfalse)))", "problem": 83, "user": "4e356d2b535deb9a81d77f2d"}, {"code": "(fn [b & s] (if (true? (some #(not (= % b)) s)) true false ))", "problem": 83, "user": "4e3a9dae535deb9a81d77f4a"}, {"code": "(fn [& args]\n  (boolean\n    (and\n      (some #{true} args)\n      (not (every? true? args)))))", "problem": 83, "user": "4e42f930535dc968683fc49f"}, {"code": "not=", "problem": 83, "user": "4e49badd535dc968683fc4c9"}, {"code": "#(and (not-every? true? %&) (not-every? false? %&))", "problem": 83, "user": "4e4870d1535dc968683fc4bc"}, {"code": "(fn [& bol-list] (not (nil? (and (some #{true} bol-list ) (some #{true} (map false? bol-list )) ))))", "problem": 83, "user": "4dcc5aff535d5973398f9293"}, {"code": "(fn [& booleans]\n  (and (not (reduce #(and % %2) booleans))\n       (reduce #(or % %2) booleans)))", "problem": 83, "user": "4e4ae5aa535dc968683fc4d2"}, {"code": "(fn xor-true [& args]\r\n  (not (or (not-any? identity args) (every? true? args))))", "problem": 83, "user": "4e46ac46535dc968683fc4b5"}, {"code": "#(> (count (set %&)) 1)", "problem": 83, "user": "4e513ecf535dc968683fc4f6"}, {"code": "(fn half-truths [& bs]\n  (if (and (some identity bs) (not (every? identity bs))) true false))", "problem": 83, "user": "4e50b67b535dc968683fc4ed"}, {"code": "not=", "problem": 83, "user": "4e52d815535d302ef430da77"}, {"code": "#(not-every? (partial = %) %&)", "problem": 83, "user": "4e12cc9d535d04ed9115e7d2"}, {"code": "(fn [& c] (if (and (some true? c) (not (every? true? c)))\n              true\n              false))", "problem": 83, "user": "4e399685535deb9a81d77f40"}, {"code": "(fn [& x]\n  (= 2 (count (set x))))", "problem": 83, "user": "4e4ad154535dc968683fc4d1"}, {"code": "#(and (reduce (fn [a b] (or a b)) %&) (not (reduce (fn [a b] (and a b)) %&)))", "problem": 83, "user": "4e43b0d9535dc968683fc4a3"}, {"code": "(fn [& xs] \n  (let [ys (remove #(= false %) xs)]\n    (and (> (count xs ) (count ys)) \n          (not (empty? ys)))))", "problem": 83, "user": "4e513758535dc968683fc4f3"}, {"code": "#(or(and(some true? %&)(some false? %&))false)", "problem": 83, "user": "4e5411e8535d8a8b8723a279"}, {"code": "(fn [& b]\n       (and\n        (reduce #(or %1 %2) false b)\n        (reduce #(not (and %1 %2)) true b)))", "problem": 83, "user": "4e5676b2535d8a8b8723a282"}, {"code": "#(if (and (some true? %&) (not (every? true? %&))) true false)", "problem": 83, "user": "4e36038f535deb9a81d77f31"}, {"code": "(fn half-truth [& coll]\n  (and\n   (= false\n      (reduce (fn [acc x]\n  \t(and acc x))\n              true\n              coll))\n   (= true\n      (reduce (fn [acc x]\n                 (or acc x))\n              false\n              coll))))", "problem": 83, "user": "4e4bd94b535dc968683fc4d7"}, {"code": "(fn [& args]\n  (if (and (some true? args)\n           (not-every? true? args))\n  true false))", "problem": 83, "user": "4e521cef535d302ef430da6d"}, {"code": "(fn[& args]\n  (not (nil? (and (some #(= false %) args) \n                  (some #(= true %) args)))))", "problem": 83, "user": "4e58bcd4535d8a8b8723a296"}, {"code": "#(if (and (some (partial = true) %&)\n          (some (partial = false) %&))\ntrue false)", "problem": 83, "user": "4dbdce65535d020aff1edf4d"}, {"code": "(fn [& args] (let [s (set args)] (= s #{false true})))", "problem": 83, "user": "4e593dac535d8a8b8723a29c"}, {"code": "(fn half-truth [& rest]                                                                     \n  (let [f (frequencies rest)]                                                             \n    (and\n      (> (get f true 0) 0)\n      (not= (get f false 0) 0))))", "problem": 83, "user": "4e360072535deb9a81d77f30"}, {"code": "(fn [& m] \n  (true? (and (some true? m) (some false? m))))", "problem": 83, "user": "4e5c801e535d8a8b8723a2c1"}, {"code": "#( = [false true] (sort (distinct %&)))", "problem": 83, "user": "4e597b2c535d8a8b8723a29d"}, {"code": "(fn [& args] (true? (and (not (every? true? args)) (some true? args))))", "problem": 83, "user": "4e589bdc535d8a8b8723a295"}, {"code": "(fn [& args] (not (= (count (partition-by identity args)) 1)))", "problem": 83, "user": "4db58ccb535d87e67b28fe10"}, {"code": "(fn sm [x & more] \n    (and (not (every? true? (cons x more)))\n         (not (every? false? (cons x more)))))", "problem": 83, "user": "4e5a2403535d8a8b8723a2a7"}, {"code": "(fn [& s]\n  (and (not-every? true? s) (not (every? false? s))))", "problem": 83, "user": "4e55ea0c535d8a8b8723a281"}, {"code": "(fn [& xs]\n  (if (every? true? xs)\n    false\n    (or (some true? xs) false)))", "problem": 83, "user": "4dad938fc9a9d6ed1b99dc57"}, {"code": "(fn [& flags]\n        (if (and\n             (seq (filter true? flags))\n             (seq (filter false? flags)))\n          true\n          false))", "problem": 83, "user": "4e3bccb1535deb9a81d77f55"}, {"code": "(fn [& x] (let [l (count (distinct x))] (= l 2)))", "problem": 83, "user": "4e4b911f535dc968683fc4d6"}, {"code": "(fn [& coll]\n  (if (some #{true} coll) (not-every? #{true} coll) false))", "problem": 83, "user": "4e5f5e14535d8ccf87e9fe47"}, {"code": "(fn [& bools]\n  (if (and (some false? bools)\n           (some true? bools))\n    true\n    false))", "problem": 83, "user": "4dad7adac9a9d6ed0599dc57"}, {"code": "#(and (not-every? true? %&) (not (nil? (some true? %&))))", "problem": 83, "user": "4e588e84535d8a8b8723a294"}, {"code": "(fn [& s]\n  (cond\n    (every? true? s) false\n    (some true? s) true\n    :else false))", "problem": 83, "user": "4e50c894535dc968683fc4ee"}, {"code": "not=", "problem": 83, "user": "4e5ecd65535d8a8b8723a2d6"}, {"code": "(fn [& bools] (if (and (not (every? identity bools)) (some identity bools)) true false))", "problem": 83, "user": "4e5914e0535d8a8b8723a29b"}, {"code": "(fn *half-truth                                                                                                                            \n  [& args]                                                                                                                                   \n  (let [res args]                                                                                                                            \n    (if (zero? (count (filter false? args)))                                                                                                 \n      false                                                                                                                                  \n      (if (zero? (count (filter true? args)))                                                                                                \n        false                                                                                                                                \n        true))))", "problem": 83, "user": "4e3bcccd535deb9a81d77f56"}, {"code": "(fn ht [& x] (if (some true? x) (not-every? true? x) false))", "problem": 83, "user": "4e44358f535dc968683fc4a8"}, {"code": "(fn true-and-false [& args]\n  (let [truthy #(if % true false)]\n    (truthy (and (some true? args)\n  \t (some false? args)))))", "problem": 83, "user": "4e615cd2535d8ccf87e9fe58"}, {"code": "(fn [& xs]\r\n  (if (some #(false? %) xs)\r\n    (not (nil? (some #(true? %) xs)))\r\n    false))", "problem": 83, "user": "4e5a3891535d8a8b8723a2aa"}, {"code": "(fn [& thruths]\n  (< 0 (count (filter true? thruths)) (count thruths)))", "problem": 83, "user": "4e68c434535d8ccf87e9fe89"}, {"code": "not=", "problem": 83, "user": "4e498df9535dc968683fc4c4"}, {"code": "(partial (fn [t f & bs]\n           (if (empty? bs)\n             (and t f)\n             (recur (or t (first bs)) (or f (not (first bs)))\n                    (rest bs))))\n         false false)", "problem": 83, "user": "4e68dbd5535d8ccf87e9fe8f"}, {"code": "(fn [b & bs]\n  (let [true-count (count (filter true? (conj bs b)))\n        arg-count (inc (count bs))]\n    (if (= true-count 0)\n      false\n      (if (= true-count arg-count)\n        false\n        true))))", "problem": 83, "user": "4e6a2f51535d8ccf87e9fea9"}, {"code": ";#(and (not (nil? (some true? %&))) (not-every? true? %&))\n#(and (not (nil? (some true? %&)))  (not (nil? (some false? %&))))", "problem": 83, "user": "4e6a48d5535d8ccf87e9febd"}, {"code": "(fn some- [& bools]\n  \"83. Write a function which takes a variable number of                                                                                                                \n  booleans. Your function should return true if some of the parameters                                                                                                  \n  are true, but not all of the parameters are true. Otherwise your                                                                                                      \n  function should return false.\"\n  (and (not-every? identity bools) (not-every? (complement identity) bools)))", "problem": 83, "user": "4e5eb843535d8a8b8723a2d4"}, {"code": "(fn [& bools]\n  (let [n (reduce #(+ %1 (if %2 1 0)) 0 bools)]\n    (and (> n 0)\n         (< n (count bools)))))", "problem": 83, "user": "4e6a4954535d8ccf87e9fec0"}, {"code": "(fn [& more] (true? (and (some true? more) (not (every? true? more)))))", "problem": 83, "user": "4e6a97a9535d8ccf87e9fef8"}, {"code": "(fn [& xs] (= 2 (count (distinct xs))))", "problem": 83, "user": "4e5f08c7535d8a8b8723a2da"}, {"code": "(fn [& args]\n  (if (reduce #(and %1  %2) args)\n    false\n    (or (some true? args) false)))", "problem": 83, "user": "4e68b46c535d8ccf87e9fe87"}, {"code": "#(= 2 (count (set %&)))", "problem": 83, "user": "4e6b3fc8535d8ccf87e9ff0f"}, {"code": "(fn [& x] (and (not-every? #(= false %) x) (not-every? #(= true %) x)))", "problem": 83, "user": "4e6def42535d5021c1a895f7"}, {"code": "#(boolean (and (some true? %&) (some false? %&)))", "problem": 83, "user": "4e5fe31a535d8ccf87e9fe50"}, {"code": "(fn [& x] (and (not (not-any? true? x)) (not-every? true? x)))", "problem": 83, "user": "4e6e6630535d5021c1a89609"}, {"code": "(fn [& x]\r\n    (true? (and (some true? x)\r\n              (some false? x))))", "problem": 83, "user": "4e5bdc2b535d8a8b8723a2bb"}, {"code": "not=", "problem": 83, "user": "4e6a412e535d8ccf87e9feb6"}, {"code": "(fn [& bools] (or (and (not-every? #{true} bools) (some #{true} bools)) false))", "problem": 83, "user": "4e3a2761535deb9a81d77f48"}, {"code": "(fn [& b] (= true (and (some #(= true %) b) (some #(= false %) b))))", "problem": 83, "user": "4e6e10d8535d5021c1a895fd"}, {"code": "(fn halftrue[& bools]\n  (and \n    (< 1 (count bools))\n    (reduce #(or % %2) bools)\n    (reduce #(or % %2) (map not bools))))", "problem": 83, "user": "4e6a60cd535d8ccf87e9fed7"}, {"code": "(fn [x & xs]\n  (let [args (conj xs x)]\n    (and (not (nil? (some #{true} args)))\n           (not-every? #{true} args))))", "problem": 83, "user": "4e6e3a1e535d5021c1a89602"}, {"code": "(fn xor [& bools]\n  (let [binned (group-by identity bools)\n        total  (count bools)]\n    (not (or (= total (count (binned true)))\n             (= total (count (binned false)))))))", "problem": 83, "user": "4e6defcc535d5021c1a895f8"}, {"code": "#(true? (and (not-every? identity %&) (some identity %&)))", "problem": 83, "user": "4e7115b3535d5021c1a89647"}, {"code": "(fn [& bs]\n  (letfn [(nop [x] x)]\n    (and (= true (some nop bs)) (not-every? nop bs))))", "problem": 83, "user": "4e6f1b7a535d5021c1a89618"}, {"code": "(fn half-truth [& args]\n  (if (and (some identity args)\n           (not-every? identity args))\n    true\n    false))", "problem": 83, "user": "4e5bff2b535d8a8b8723a2bd"}, {"code": "(fn [& args]\n  (let [n (count (filter true? args))]\n   (and (> n 0) (> (count args) n))))", "problem": 83, "user": "4daedd1eedd6309eace4d164"}, {"code": "(fn[& s](= 2 (-> s set count)))", "problem": 83, "user": "4e6df3c9535d5021c1a895fa"}, {"code": "(fn [& coll]\n    (println coll)\n    (cond  \n      (every? true? coll) false\n      (every? false? coll) false\n      :else true))", "problem": 83, "user": "4e6a2f93535d8ccf87e9feaa"}, {"code": "(fn [& b]\n  (let [t true?]\n    (if (every? t b) false (t (some t b)))))", "problem": 83, "user": "4e720985535d5021c1a89655"}, {"code": "#(= (count (distinct %&)) 2)", "problem": 83, "user": "4e704293535d5021c1a89634"}, {"code": "(fn [& args] (and (not (every? true? args)) (boolean (some true? args))))", "problem": 83, "user": "4e6fa38b535d5021c1a89622"}, {"code": "(fn [& args]\n  (let [somet (if (nil? (some true? args)) false true)\n        allt (every? true? args)]\n    (and somet (not allt))))", "problem": 83, "user": "4db045b5838c48654951d9be"}, {"code": "#(= 2 (count (group-by true? %&)))", "problem": 83, "user": "4e71da4d535d5021c1a89653"}, {"code": "(fn [& args] (and (not-every? #(false? %) args) (not-every? #(true? %) args)))", "problem": 83, "user": "4e6a4edd535d8ccf87e9fec4"}, {"code": "(fn [& x] (and (not-every? identity x) \n               (reduce  #(or % %2) x))\n)", "problem": 83, "user": "4e50e2a0535dc968683fc4ef"}, {"code": "#(and (> (count %&) 1) (not (apply = %&)))", "problem": 83, "user": "4e68be01535d8ccf87e9fe88"}, {"code": "(fn [v & col]\n  (let [c (if (empty? col) (list v) (cons v col))]\n    (and (boolean (some #(true? %) c)) (boolean (some #(false? %) c)))\n    )\n  )", "problem": 83, "user": "4db7da66535d1e037afb2187"}, {"code": "(fn [ & args] (if (and (some identity args ) (not-every? identity args))\ntrue false))", "problem": 83, "user": "4e6dc95a535d5021c1a895f1"}, {"code": "(fn [& v] \n  (boolean (and (some true? v) \n    (not (every? true? v)))))", "problem": 83, "user": "4e6a4038535d8ccf87e9feb5"}, {"code": "(fn [& args]\n  (boolean (and (some true? args)\n                (not (every? true? args)))))", "problem": 83, "user": "4dbde27c535d020aff1edf50"}, {"code": "(fn [& m]\n      (true? (and\n        (some true? m) \n        (not (reduce #(= true %1 %2) m)))))", "problem": 83, "user": "4e6a5f5c535d8ccf87e9fed6"}, {"code": "(fn [& s] (and (true? (some true? s)) (not-every? true? s)))", "problem": 83, "user": "4daf907aedd6309eace4d17b"}, {"code": "(fn [& body] (and (= true (some true? body))\n                  (not (every? true? body))))", "problem": 83, "user": "4df0524e535d08e6dec9fe17"}, {"code": "(fn [& args]\n  (or (and (some identity args)\n           (not (apply = args)))\n      false))", "problem": 83, "user": "4e7c8fd1535db169f9c796be"}, {"code": "(fn [ a & b ]\n  (loop [i nil\n         aa a\n         bb b]\n    (if (or (and (true? i) (false? aa))\n            (and (false? i) (true? aa)))\n        true\n        (if (empty? bb) false\n          (recur aa (first bb) (rest bb))))))", "problem": 83, "user": "4e6f8d36535d5021c1a89621"}, {"code": "(fn [& args] \n  (cond (every? true? args) false\n\t      (every? false? args) false\n\t      :else true))", "problem": 83, "user": "4e739e13535dff18050a9c76"}, {"code": "(fn [& xs]\n  (and (not-every? (fn[x]x) xs)\n       (not-every? #(not %) xs)))", "problem": 83, "user": "4dbe18a5535d020aff1edf58"}, {"code": "(fn [& c]\n  (let [s (reduce (fn [a b] (if b (inc a) (dec a))) 0 c)]\n    (not (= (if (< s 0) (- s) s) (count c)))))", "problem": 83, "user": "4e773be8535d324fb2983d6e"}, {"code": "not=", "problem": 83, "user": "4e7dfab0535db169f9c796f9"}, {"code": "(fn [& x] (= 2 (count (set x))))", "problem": 83, "user": "4e7e55ab535db169f9c79711"}, {"code": "#(=(count(set%&))2)", "problem": 83, "user": "4e7eff9e535db966e863cc38"}, {"code": "#(or (and (some false? %&) (some true? %&))\n     false)", "problem": 83, "user": "4e2b1d48535deb9a81d77f03"}, {"code": "(fn [& x] (and (boolean (some true? x)) (not (every? true? x))))", "problem": 83, "user": "4e7db3b4535db169f9c796e1"}, {"code": "#(true? (and (some false? %&) (some true? %&)))", "problem": 83, "user": "4e78c208535db95036265722"}, {"code": "#(and (not-every? true? %&) (not-every? false? %&))", "problem": 83, "user": "4e7f4147535db966e863cc3d"}, {"code": "(fn [& xs]\n  (let [\n  and* (fn and* [xs]\n    (reduce #(and %1 %2) true xs))\n  or* (fn or* [xs]\n    (reduce #(or %1 %2) false xs))]\n    (and (= true (or* xs))\n         (= false (and* xs)))))", "problem": 83, "user": "4e691c79535d8ccf87e9fe97"}, {"code": "#(cond (every? true? %&) false (some true? %&) true :else false)", "problem": 83, "user": "4e79a143535db169f9c796a2"}, {"code": "not=", "problem": 83, "user": "4e794004535db169f9c796a1"}, {"code": "not=", "problem": 83, "user": "4e5229dc535d302ef430da6f"}, {"code": "(fn [& args]\n  (let [all (reduce #(and %1 %2) args) any (reduce #(or %1 %2) args)]\n    (and (not all) any)\n  )  \n)", "problem": 83, "user": "4e7e05a6535db169f9c796fe"}, {"code": "(fn [& args]\n  (let [all (reduce #(and %1 %2) args)\n        some (reduce #(or %1 %2) args)]\n    (cond\n      all false\n      some true\n      :else false)))", "problem": 83, "user": "4e80aa10535db62dc21a62b1"}, {"code": "(fn bool [& x] (let [c (count (filter true? x))] \n            (if (and (and (> (count x) 1) (< c (count x))) (> c 0 ))\n            true\n            false)\n           ))", "problem": 83, "user": "4e6cf521535de274dd8d818b"}, {"code": "(fn [& bools] (and (not-every? false? bools) (not-every? true? bools)))", "problem": 83, "user": "4e6ab9cb535d8ccf87e9fefe"}, {"code": "#(and (not (every? identity %&)) (not (nil? (some identity %&))))", "problem": 83, "user": "4e7f51eb535db966e863cc3f"}, {"code": "not=", "problem": 83, "user": "4e80d71b535db62dc21a62b7"}, {"code": "(fn [& args]\n  (= 2 (count\n    (filter true? (list\n      (some true? args)\n      (some false? args))))))", "problem": 83, "user": "4e823f41535db62dc21a62c8"}, {"code": "(fn half-truth\n  [& rest]\n  (boolean (some (fn [[b1 b2]]\n                   (or (and (true? b1) (false? b2)) (and (false? b1) (true? b2))))\n                 (partition 2 1 rest))))\n\n;; not= just works, dammit", "problem": 83, "user": "4e5a460f535d8a8b8723a2ab"}, {"code": "(fn [& x] (if (= (count (set x)) 2) true false))", "problem": 83, "user": "4e78dc98535db95036265724"}, {"code": "(fn [& more]\n  (and (not (nil? (some true? more ))) (not (every? true? more))))", "problem": 83, "user": "4e7ada51535db169f9c796ae"}, {"code": "(fn [& args] (loop [a true o false r args] (if (empty? r) (and (not a) o) (recur (and a (first r)) (or o (first r)) (rest r)))))", "problem": 83, "user": "4e82c062535db62dc21a62cc"}, {"code": "(fn [& args] (boolean (and (some false? args) (some true? args))))", "problem": 83, "user": "4e71705e535d5021c1a89649"}, {"code": "not=", "problem": 83, "user": "4db1f7d223724b71670a9c07"}, {"code": "not=", "problem": 83, "user": "4e823ed7535db62dc21a62c7"}, {"code": "(fn [& coll]\n  (true? (and (some true? coll)\n              (some false? coll))))", "problem": 83, "user": "4e4b4564535dc968683fc4d3"}, {"code": "(fn[& b](= #{true false}(set b)))", "problem": 83, "user": "4db92654535d1e037afb21a0"}, {"code": "#(not (or (every? false? %&) (every? true? %&)))", "problem": 83, "user": "4e39d763535deb9a81d77f46"}, {"code": "(fn [& bs] (boolean (and (some identity bs) (some not bs))))", "problem": 83, "user": "4e8612f8535db62dc21a62f2"}, {"code": "(fn [& val]\n  (and (not (empty? (filter false? val))) (not (empty? (filter (comp not false?) val)))))", "problem": 83, "user": "4e6a4950535d8ccf87e9febf"}, {"code": "(fn [& a] \n  (= false\n     (or  (every? true? a) \n          (every? false? a))))", "problem": 83, "user": "4e5d1912535d8a8b8723a2c9"}, {"code": "not=", "problem": 83, "user": "4e8681b7535dae1a5effa438"}, {"code": "(fn [a & b]\n  ((fn [x found-t found-f]\n    (if (empty? x)\n        (and found-t found-f)\n        (recur (rest x)\n               (or found-t (first x))\n               (or found-f (= (first x) false)))))\n  (flatten (list a b)) false false))", "problem": 83, "user": "4e73a9dc535dff18050a9c77"}, {"code": "(fn [& x] (if \n  (and \n    (some true? x) \n    (not-every? true? x))\n  true\n  false))", "problem": 83, "user": "4e86a443535dc036d0eaab83"}, {"code": "not=", "problem": 83, "user": "4e8510e7535db62dc21a62e7"}, {"code": "not=", "problem": 83, "user": "4dabb7b1950ed6eda1bd72f3"}, {"code": "#(= 2 (count (distinct %&)))", "problem": 83, "user": "4e707db6535d5021c1a8963a"}, {"code": "(fn [& xs] (boolean (and (some true? xs) (not (every? true? xs)))))", "problem": 83, "user": "4db8ec47535d1e037afb219d"}, {"code": "(fn [& args]\n  (and (not-every? identity args)\n       (not-every? not      args)))", "problem": 83, "user": "4e860e85535db62dc21a62f1"}, {"code": "(fn ht[& s]\n  (if (and (some identity s)\n       (not-every? identity s)) true false))", "problem": 83, "user": "4e842ebb535db62dc21a62df"}, {"code": "(fn [& more]\n  (if (and (some identity more) (not-every? identity more))\n    true false))", "problem": 83, "user": "4e80e0f2535db62dc21a62b8"}, {"code": "not=", "problem": 83, "user": "4dfe65a1535d04ed9115e787"}, {"code": "not=", "problem": 83, "user": "4e6ebd4a535d5021c1a89610"}, {"code": "(fn [& s] \n  (and (reduce #(or %1 %2) s) \n       (not (reduce #(and %1 %2) s))))", "problem": 83, "user": "4e821ca5535db62dc21a62c2"}, {"code": "(fn [& more]\n  (if (and (some identity more) (not (every? identity more)))\n    true\n    false))", "problem": 83, "user": "4e89f46c535d3e98b8023288"}, {"code": "(fn half-truth [& preds]\r\n  (letfn [(convert [bool] (if bool 1 0))]\r\n    (let [mid (map convert preds)\r\n          muls (reduce * mid)\r\n          adds (reduce + mid)]\r\n      (and (= muls 0) (> adds 0)))))", "problem": 83, "user": "4e8a0c82535d3e98b802328d"}, {"code": "(fn [& sequence] (and (> (count (filter #(= % true) sequence)) 0) (< (count (filter #(= % true) sequence)) (count sequence))))", "problem": 83, "user": "4e89de60535d3e98b8023285"}, {"code": "(fn [& xs]\n  (and (not-every? true?  xs)\n       (not-every? false? xs)))", "problem": 83, "user": "4daf36c2edd6309eace4d175"}, {"code": "#(and (true? (some true? %&)) (not (every? true? %&)))", "problem": 83, "user": "4e8c1d97535d65386fec2127"}, {"code": "(fn [& bs] \n  (if (and (some identity bs)\n           (not (every? identity bs)))\n    true\n    false))", "problem": 83, "user": "4e89f9e5535d3e98b8023289"}, {"code": "(fn [& x]\n    (let [len (count x)\n          trues (reduce (fn [a b] (if b (inc a) a)) 0 x)]\n      (and (not= len trues) (not (zero? trues)))))", "problem": 83, "user": "4e8e8c24535d65386fec2143"}, {"code": "(fn half-truth [& coll]\n  (let [true-count  (count (filter #(= true %) coll))\n  false-count (count (filter #(= false %) coll))]\n    (if (and (> true-count 0)\n\t     (not= true-count (count coll)))\n      true\n      false)))", "problem": 83, "user": "4dc54eb2535d8a4b2fd74284"}, {"code": "not=", "problem": 83, "user": "4e40529b535dc968683fc49a"}, {"code": "#(= 2 (count (set %&)))", "problem": 83, "user": "4db858d1535d1e037afb218c"}, {"code": "(fn [& args]\n  (let [ts (reduce + (map #(if % 1 0) args))]\n    (and (>= ts 1) (< ts (count args)))))", "problem": 83, "user": "4e88feef535d8b9bb0147ca8"}, {"code": "not=", "problem": 83, "user": "4e5867d1535d8a8b8723a291"}, {"code": "(fn [& args]\n  (cond (every? true? args) false\n        (some true? args) true\n        :else false))", "problem": 83, "user": "4dc0ff08535d020aff1edf84"}, {"code": "#(and (= true (some identity %&)) \n(= true (some (comp not identity) %&)))", "problem": 83, "user": "4e79ff2a535db169f9c796a9"}, {"code": "(fn [& x] (boolean (and (some true? x) (some false? x))))", "problem": 83, "user": "4e6f8431535d5021c1a8961e"}, {"code": "not=", "problem": 83, "user": "4dfd018c535d04ed9115e77f"}, {"code": "(fn [& args] (and (not (nil? (some true? args))) (not-every? true? args)))", "problem": 83, "user": "4e8f4f64535d65386fec2149"}, {"code": "(fn [& args] (boolean (and (some #(= true %) args) (some #(not= true %) args))))", "problem": 83, "user": "4daef21cedd6309eace4d169"}, {"code": "#(> (count (into #{} %&)) 1)", "problem": 83, "user": "4e8df08f535d65386fec213e"}, {"code": "(fn [& b] (apply not= b))", "problem": 83, "user": "4e823629535db62dc21a62c3"}, {"code": "(fn [& x] (if (and (some (fn[y]y)x)(some(fn[y] (not y)) x ) ) true false ))", "problem": 83, "user": "4e8d5edd535d65386fec2134"}, {"code": "(fn fc-83 [& s]\n  (let [tot (count s)\n        tru (count (filter true? s))]\n    (and (> tru 0) (< tru tot))))", "problem": 83, "user": "4e7f32ee535db966e863cc3a"}, {"code": "(fn td[& v]\n   (and (not-every? true? v)\n        (not-every? false? v) \n   )\n)", "problem": 83, "user": "4e7650c5535d324fb2983d68"}, {"code": "(fn [& xs] (= 2 (count (set xs))))", "problem": 83, "user": "4e96557d535dbda64a6f6b43"}, {"code": "(fn xor [& bools]\n  (if (every? identity bools)\n    false\n    (if (some identity bools)\n      true\n      false)))", "problem": 83, "user": "4e84f77c535db62dc21a62e5"}, {"code": "#(boolean (and (some true? %&) (some false? %&)))", "problem": 83, "user": "4e9660ec535dbda64a6f6b44"}, {"code": "(fn [& x ] (and  (not (reduce #(and %1 %2) x))  (not (nil? (some #(= true %) x))) ) )", "problem": 83, "user": "4e8b73e4535d65386fec2120"}, {"code": "not=", "problem": 83, "user": "4e976f79535dbda64a6f6b55"}, {"code": "#(= 2 (count (group-by true? %&)))", "problem": 83, "user": "4e8f1ac6535d65386fec2146"}, {"code": "#(< 1 (count (set %&)))", "problem": 83, "user": "4db85bdd535d1e037afb218d"}, {"code": "(fn [& more]\r\n  (let [a (reduce #(and % %2) more)\r\n        o (reduce #(or % %2) more)]\r\n      (and o (not a))))", "problem": 83, "user": "4de8a7d7535d08e6dec9fdfe"}, {"code": "(fn a-half-truth [& coll]\n  (= 2 (count (distinct coll))))", "problem": 83, "user": "4dd7d040535d2dad7130b5d6"}, {"code": "#(apply not= %&)", "problem": 83, "user": "4db13ff51254ad5b4805fa68"}, {"code": "(fn [& args]\n  (and (not (not-any? true? args)) (not-every? true? args)))", "problem": 83, "user": "4e955b95535dbda64a6f6b33"}, {"code": "not=", "problem": 83, "user": "4e72ac47535d5021c1a89666"}, {"code": "(fn xor2 [root & bools] \n  (if (nil? bools) false\n  (if-not (= root (first bools))\n    true\n    (apply xor2 root (next bools)))))", "problem": 83, "user": "4e98a6d0535dbda64a6f6b5e"}, {"code": "#(and (not (every? identity %&)) (not (not-any? identity %&)))", "problem": 83, "user": "4e9609ad535dbda64a6f6b3e"}, {"code": "not=", "problem": 83, "user": "4e81e29b535db62dc21a62bd"}, {"code": "(fn [& args] (if (and (not-every? identity args) (some identity args)) true false))", "problem": 83, "user": "4e951f44535dbda64a6f6b30"}, {"code": "(fn [& args] (= (set args) #{true false}))", "problem": 83, "user": "4e9dafe1535dbda64a6f6b89"}, {"code": "(fn halft [& x] (and (reduce #(or %1 %2) false x) (not (reduce #(and %1 %2) true x)) ))", "problem": 83, "user": "4e9de526535dbda64a6f6b8e"}, {"code": "#(and (contains? (set %&) true) (contains? (set %&) false) )", "problem": 83, "user": "4e9b22e2535dbda64a6f6b74"}, {"code": "(fn [& x] (if (not (every? true? x)) (let [y (filter true? x)] (not (empty? y))) false))", "problem": 83, "user": "4e9ff8d0535d7eef3080729c"}, {"code": "(fn [& more] (loop [index 0 foundtrue false foundfalse false] (if (= index (count more)) (if foundtrue (if foundfalse true false) false) (recur (inc index) (if foundtrue true (if (nth more index) true false)) (if foundfalse true (if (nth more index) false true))))))", "problem": 83, "user": "4e975bce535dbda64a6f6b53"}, {"code": "(fn [& args]\n  (and (not (not-any? true? args))\n    (not-every? true? args)))", "problem": 83, "user": "4e9fd521535d7eef3080729a"}, {"code": "(fn x [& params]\n  (and (reduce (fn [a b] (or a b)) params) (not (reduce (fn [a b] (and a b)) params))))", "problem": 83, "user": "4ea01955535d7eef3080729f"}, {"code": "#(true? (and (some true? %&) (some false? %&)))", "problem": 83, "user": "4e8516d0535db62dc21a62e8"}, {"code": "(fn [& coll] (not (or \n        (empty? (filter identity coll))\n        (empty? (filter not coll)))))", "problem": 83, "user": "4e7f3891535db966e863cc3b"}, {"code": "not=", "problem": 83, "user": "4e951ce5535dbda64a6f6b2e"}, {"code": "#(and (not-every? false? %&) (not-every? true? %&))", "problem": 83, "user": "4ea09fa4535d7eef308072aa"}, {"code": "#(= 2 (count (set %&)))", "problem": 83, "user": "4daee8e9edd6309eace4d166"}, {"code": "(fn [& bools] (true? (and (some true? bools) (some false? bools))))", "problem": 83, "user": "4ea092f4535d7eef308072a6"}, {"code": "(fn   [x & more]\r\n  (let [z (conj more x)\r\n        n (count z)\r\n      y (reduce + (map #(if % 1 0) z))]\r\n  (if (or (= y n)\r\n          (= y 0))\r\n      false true)))", "problem": 83, "user": "4ea09441535d7eef308072a7"}, {"code": "(fn [& bs]\n    (true? (and (some true? bs)\n                (some false? bs))))", "problem": 83, "user": "4e59b02c535d8a8b8723a2a2"}, {"code": "(fn [& xs] (and (not-every? true? xs)\n                (not-every? false? xs)))", "problem": 83, "user": "4dcfbc44535d5973398f92a7"}, {"code": "#(boolean (and (some identity %&)\n            (not (every? identity %&))))", "problem": 83, "user": "4ea1b9e4535d7eef308072b8"}, {"code": "(fn op\n  ([x] false)\n  ([x y] x)\n  ([x y z] (not x))\n  ([x y z w] x))", "problem": 83, "user": "4ea348ad535d7eef308072c4"}, {"code": "#(reduce not= ((juxt first last) (sort %&)))", "problem": 83, "user": "4e9a8c0e535dbda64a6f6b72"}, {"code": "#(= 2 (count (set %&)))", "problem": 83, "user": "4ea0cfb0535d7eef308072ae"}, {"code": "(fn [& coll]\n  (true? \n    (and\n      (some true? coll)\n      (not (every? true? coll)))))", "problem": 83, "user": "4dbd2aa3535d020aff1edf40"}, {"code": "(fn [x & y]\r\n  (loop [l (conj y x) t false f false]\r\n    (cond (empty? l) (and t f)\r\n          (= (first l) true) (recur (rest l) true f)\r\n          :else (recur (rest l) t true))))", "problem": 83, "user": "4e920f44535dbda64a6f6afd"}, {"code": "#(if (and (not-every? identity %&) (some identity %&)) true false)", "problem": 83, "user": "4e9e12b2535dbda64a6f6b92"}, {"code": "(fn [& l] \n    (and\n      (not (reduce #(and %1 %2) true l))\n      (reduce #(or %1 %2) false l)))", "problem": 83, "user": "4e9c81e8535dbda64a6f6b80"}, {"code": "(fn [f & s] (not (every? #(= f %) s)))", "problem": 83, "user": "4ea41fc2535d7eef308072cb"}, {"code": "(fn [& xs]\n  (let [trues (filter identity xs)]\n    (and (> (count trues) 0)\n         (< (count trues) (count xs)))))", "problem": 83, "user": "4e21c0c7535d04ed9115e818"}, {"code": "(fn [hd & tl]\n  (let [s (cons hd tl)]\n    (and \n      (> (count s) 1) \n      (not-every? false? s) \n      (not-every? true? s))))", "problem": 83, "user": "4ea4fe1f535d7eef308072cf"}, {"code": "(fn [& args]\n  (and\n    (reduce #(or %1 %2) args)\n    (not (reduce #(and %1 %2) args))))", "problem": 83, "user": "4e89ddf9535d3e98b8023284"}, {"code": "#(and (not-every? true? %&) (true? (some true? %&)))", "problem": 83, "user": "4ea1ecfa535d7eef308072bb"}, {"code": "#(= 2 (count (set %&)))", "problem": 83, "user": "4e8a460e535d65386fec2109"}, {"code": "(fn [& bs] (and (not-every? true? bs) (not-every? false? bs)))", "problem": 83, "user": "4dad76588e77d6ed63f12a44"}, {"code": "(fn halftrue[& b ]\r\n  (= 2 (count (set b)))\r\n  )", "problem": 83, "user": "4e9def6b535dbda64a6f6b8f"}, {"code": "(fn [& x]\n  (= 2 (count (into [] (set x))))\n)", "problem": 83, "user": "4dd1de4d535dae65d5c462d7"}, {"code": "(fn [& xs]\r\n     (true? (and (some true? xs) (not (every? true? xs)))))", "problem": 83, "user": "4e9fde3c535d7eef3080729b"}, {"code": "(fn [& args] (= (count (frequencies args)) 2))", "problem": 83, "user": "4ea57300535d7eef308072d5"}, {"code": "(fn [& preds]\n  (true? (and (some true? preds) (some false? preds))))", "problem": 83, "user": "4dbb0f2d535d1e037afb21b1"}, {"code": "(fn [& a]\n  (= 2 (count (partition-by true? (sort a)))))", "problem": 83, "user": "4eaa96e1535d7eef3080730d"}, {"code": "(fn [ & l ] (and (true? (some true? l)) (not-every? true? l)))", "problem": 83, "user": "4e9d6a65535dbda64a6f6b87"}, {"code": "(fn [& args]\n    (let [trues (filter true? args)\n          falses (filter false? args)]\n        (and (not (empty? trues))\n             (not (empty? falses)))))", "problem": 83, "user": "4e7263a1535d5021c1a8965f"}, {"code": "(fn[& t](= (not-every? true? (seq t)) (not-every? false? (seq t)) ))", "problem": 83, "user": "4ea85846535d7eef308072f9"}, {"code": "#(true? (and (some true? %&) (some false? %&)))", "problem": 83, "user": "4eab612d535d7eef30807316"}, {"code": "(fn [& x] (\n  let [tt (reduce + (map #(if % 1 0) x))]\n  (and\n    (> tt 0)\n    (< (- tt (count x)) 0))))", "problem": 83, "user": "4ea9b80c535d7eef30807306"}, {"code": "(fn [& coll] (true? (and (some true? coll) (some false? coll))))", "problem": 83, "user": "4e994541535dbda64a6f6b64"}, {"code": "#(= '(false true) (sort (distinct %&)))", "problem": 83, "user": "4e9b230c535dbda64a6f6b75"}, {"code": "#(if (= 2 (count (set %&))) true false)", "problem": 83, "user": "4eb0a757535d7eef3080733d"}, {"code": "#(= (sort (distinct %&)) [false true])", "problem": 83, "user": "4eaede1f535d7eef30807329"}, {"code": "(fn aho\n  ([x] false)\n  ([x y]\n     (if (= x y)\n       false\n       true))\n  ([x y & more]\n     (if (= x y)\n       (if (= (count more) 1)\n   (aho y (first more))\n\t (aho y more))       \n       true))\n\t       \n  )", "problem": 83, "user": "4eb0afed535d7eef3080733e"}, {"code": "(fn [& val]\n  (= 2 (count (set val))))", "problem": 83, "user": "4eb1dd39535d7eef30807345"}, {"code": "(fn [& bools]\n  (and (not (reduce (fn [r x]\n    (and r x)) true bools)) (reduce (fn [r x]\n(or r x)) false bools)))", "problem": 83, "user": "4eb27fad535d7eef3080734a"}, {"code": "(fn [& b] \n  (loop [[h & t] b, tr false, allTrue true]\n  (if (nil? h) \n(and tr (not allTrue))\n(recur t (or tr h) (and h allTrue))\n  \n)))", "problem": 83, "user": "4eabb245535d7eef30807319"}, {"code": "(fn sotrue [& more]\n  (if (and (some true? more) (not (reduce #(and %1 %2) more))) true false))", "problem": 83, "user": "4ea7999e535d7eef308072ee"}, {"code": "(fn [& s] (and (not (nil? (some true? s))) (not (nil? (some false? s)))))", "problem": 83, "user": "4eb5750a535d7eef30807366"}, {"code": "(fn truth [ & more ] (and (not(not-any? true? more)) (not-every? true? more)))", "problem": 83, "user": "4e8b98fc535d65386fec2124"}, {"code": "(fn [& l] (and \n  (pos? (count (filter (partial = false) l))) \n  (pos? (count (filter (partial = true) l)))))", "problem": 83, "user": "4e8d86d5535d65386fec2136"}, {"code": "(fn [& seq]\n  (letfn [(some [seq isSome? allTrue?]\n    (cond\n      (and isSome? (not allTrue?)) true\n      (= seq '()) false\n      true (some (rest seq) (or isSome? (first seq)) (and allTrue? (first seq)))))]\n  (some seq false true)))", "problem": 83, "user": "4eb404ba535d7eef3080735a"}, {"code": "(fn [& s] (< 1 (count (distinct s))))", "problem": 83, "user": "4eb2e6ca535d7eef3080734f"}, {"code": "#(= 2 (count (into #{} %&)))", "problem": 83, "user": "4eb01df4535d7eef30807337"}, {"code": "#(and (not (nil? (some false? %&))) (not (nil?(some true? %&))))", "problem": 83, "user": "4e8b73f1535d65386fec2121"}, {"code": "#(= (set %&) #{true false})", "problem": 83, "user": "4ea55757535d7eef308072d3"}, {"code": "#(not (not (and (some identity %&) (some not %&))))", "problem": 83, "user": "4eb97b2e535dfed6da9c6d54"}, {"code": "(fn [& bools] \n  (and (= 0 (apply * (map #(if % 1 0) bools))) (< 0 (apply + (map #(if % 1 0) bools)))))", "problem": 83, "user": "4e9519b4535dbda64a6f6b2d"}, {"code": "(fn [& x] (= (count (set x)) 2))", "problem": 83, "user": "4eb955da535dfed6da9c6d50"}, {"code": "#(boolean (and (some true? %&) (some false? %&)))", "problem": 83, "user": "4eb97234535dfed6da9c6d53"}, {"code": "not=", "problem": 83, "user": "4e6e2ac4535d5021c1a895ff"}, {"code": "(fn [& bools]\n    (if (and (seq (filter identity bools)) (seq (filter not bools))) true false))", "problem": 83, "user": "4e89e939535d3e98b8023287"}, {"code": "(fn [& xs]\n  (and \n    (not (every? identity xs))\n    (boolean (some identity xs))))", "problem": 83, "user": "4ebc08a8535dfed6da9c6d7c"}, {"code": "(fn [& xs] (= 2 (count (set xs))))", "problem": 83, "user": "4eb2eae5535d7eef30807351"}, {"code": "#(and (not-every? false? %&) (not-every? true? %&))", "problem": 83, "user": "4e82f85d535db62dc21a62ce"}, {"code": "(fn [& a]\n  (not (not (and (some true? a) (some false? a)))))", "problem": 83, "user": "4dbdc9da535d020aff1edf4c"}, {"code": "(fn [& c] (and (not-every? true? c) (.contains c true) ))", "problem": 83, "user": "4e8a0d5d535d3e98b802328e"}, {"code": "(fn [& bs] (and (contains? (set bs) true) \n(contains? (set bs) false))\n)", "problem": 83, "user": "4eb44d78535d7eef30807360"}, {"code": "(fn [& s] (true? (and (some true? s) (not-every? true? s))))", "problem": 83, "user": "4e1350af535d04ed9115e7d8"}, {"code": "(fn [& bools]\n  (= 2 (count (into #{} bools))))", "problem": 83, "user": "4dadb891c9a9d6ed3699dc57"}, {"code": "not=", "problem": 83, "user": "4ebf45c3535dfed6da9c6d9d"}, {"code": "(fn [& xs] (and (not (every? identity xs)) (boolean (some identity xs))))", "problem": 83, "user": "4ebc0717535dfed6da9c6d7b"}, {"code": "(fn [& args] \n  (cond \n    (every? identity args) false\n    (some identity args) true\n    :true false))", "problem": 83, "user": "4eb2d0ae535d7eef3080734e"}, {"code": "#(and (not (every? true? %&)) (not (every? false? %&)))", "problem": 83, "user": "4ec0c7ba535dfed6da9c6da4"}, {"code": "(fn [& xs]\n  (let [g (group-by identity xs)]\n    (and (contains? g true) (contains? g false))))", "problem": 83, "user": "4ec132a0535dfed6da9c6da9"}, {"code": "(fn [& args]\n    (let [any? (fn [p coll] (not (not-any? p coll)))]\n      (and (not-every? identity args)\n           (any? identity args))))", "problem": 83, "user": "4ebc64db535dfed6da9c6d82"}, {"code": "not=", "problem": 83, "user": "4ec3eb1e535dcc7ae8597d5d"}, {"code": "(fn [& coll]\n  (if\n    (and\n      (first (filter identity coll))\n      (first (filter identity (map not coll))))\n    true\n    false))", "problem": 83, "user": "4ec2fe3f535dcc7ae8597d4f"}, {"code": "not=", "problem": 83, "user": "4ebe766d535dfed6da9c6d94"}, {"code": "(fn [& more] (if (and (some false? more) (some true? more)) true false))", "problem": 83, "user": "4ec12516535dfed6da9c6da7"}, {"code": "(fn [& args] \n  (if (and\n    (some identity args)\n    (not (every? identity args)))\ntrue false))", "problem": 83, "user": "4ec34578535dcc7ae8597d51"}, {"code": "(fn [ & col] \n  (< 0 (count (filter true? col )) (count col)  ))", "problem": 83, "user": "4ec5bec6535d6d7199dd36b3"}, {"code": "#(not (or (every? false? %&) (every? true? %&)))", "problem": 83, "user": "4e6dc5f5535d5021c1a895f0"}, {"code": "(fn [& args]\n  (true? (and\n    (not (every? identity args))\n    (some identity args))))", "problem": 83, "user": "4ec12577535dfed6da9c6da8"}, {"code": "(fn [x & xs]\n  (let [l (conj xs x)]\n    (not (or (every? false? l)\n             (every? true? l)))))", "problem": 83, "user": "4ec5d40d535d6d7199dd36b9"}, {"code": "(fn [& args]\n       (and (reduce #(or % %2) args)\n      (not (reduce #(and % %2) args))))", "problem": 83, "user": "4ec6157b535d6d7199dd36c2"}, {"code": "(fn [& xs] (= 2 (count (set xs))))", "problem": 83, "user": "4eb51942535d7eef30807365"}, {"code": "(fn [& lst]\n  (if (every? false? lst)\n    false\n    (not-every? true? lst)))", "problem": 83, "user": "4e117dea535d04ed9115e7c9"}, {"code": "(fn [& xs] (and (not (every? not xs)) (not (every? identity  xs))))", "problem": 83, "user": "4ec07699535dfed6da9c6da2"}, {"code": "(fn [& c] (and (true? (some identity c)) (not-every? identity c)))", "problem": 83, "user": "4ec16c21535dfed6da9c6dac"}, {"code": "(fn [& l]\n  (let [ct (reduce #(if (true? %2)\n                            (inc %1)\n                            %1) 0 l)]\n        (cond\n          (= ct 0) false\n          (= ct (.size l)) false\n          :else true)))", "problem": 83, "user": "4ec21058535dfed6da9c6dba"}, {"code": "#(= 2 (count (set %&)))", "problem": 83, "user": "4ebede00535dfed6da9c6d9a"}, {"code": "not=", "problem": 83, "user": "4ebb78a2535dfed6da9c6d70"}, {"code": "(fn [& l] (= (count (distinct l))2))", "problem": 83, "user": "4eac5bc1535d7eef3080731b"}, {"code": "(fn [& args] \n  (and (not-every? true? args) \n    (not (nil? (some true? args)))))", "problem": 83, "user": "4e25176e535d04ed9115e829"}, {"code": "(fn [& args]\n  (let [col (seq args)]\n    (and (not (nil? (some true? col)))\n         (not-every? true? col))))", "problem": 83, "user": "4ecb1641535d6d7199dd370e"}, {"code": "(fn [& s] (and (not-every? false? s) (not-every? true? s)))", "problem": 83, "user": "4ec6559a535d6d7199dd36c9"}, {"code": "#(> (count (set %&)) 1)", "problem": 83, "user": "4ec70f26535d6d7199dd36dd"}, {"code": "(fn [& p]\n  (= #{true false} (set p)))", "problem": 83, "user": "4e6f578c535d5021c1a8961b"}, {"code": "(fn [& args]\n  (and (boolean (some true? args)) (not-every? true? args)))", "problem": 83, "user": "4e7e4d5c535db169f9c7970f"}, {"code": "(fn [& a] (and (true? (some true? a)) (not-every? true? a)))", "problem": 83, "user": "4ec65213535d6d7199dd36c8"}, {"code": "#(= 2 (count (set %&)))", "problem": 83, "user": "4ecfb458535d44c135fd68bb"}, {"code": "(fn [& b] (not-any? nil? (map (comp not-empty second) (conj {false [] true []} (group-by true? b)))))", "problem": 83, "user": "4db2eac3535df7e46ed9b6c8"}, {"code": "(fn [x & s] (= #{true false} (set (cons x s))))", "problem": 83, "user": "4ebef65e535dfed6da9c6d9b"}, {"code": "(fn [& l] (true? (and (some true? l) (not (every? true? l)))))", "problem": 83, "user": "4daf8f84edd6309eace4d17a"}, {"code": "(fn [& xs] (= 2 (count (distinct xs))))", "problem": 83, "user": "4ecf42b4535d1f5ad70dba3c"}, {"code": "not=", "problem": 83, "user": "4db091b7838c48654951d9c2"}, {"code": "(fn[& r](loop[coll r, t false, f false]\n  (if(empty? coll) (and t f) \n     (recur(next coll)\n           (if t t (first coll)) \n           (if f f (not (first coll)))\n    )\n  ) \n )\n)", "problem": 83, "user": "4ec75829535d6d7199dd36e1"}, {"code": "(fn [& args]\n  (if (every? true? (seq args) )\n    false\n    (if (nil? (some true? (seq args)))\n    false true)))", "problem": 83, "user": "4ebc829e535dfed6da9c6d86"}, {"code": "(fn [& bools]\n  (boolean\n    (and\n      (some identity bools)\n      (not (every? identity bools)))))", "problem": 83, "user": "4ed188c8535d44c135fd68cf"}, {"code": "(fn [& args]\n  (true? (and \n    (some identity args)\n    (not-every? identity args))))", "problem": 83, "user": "4eb9ce75535dfed6da9c6d5e"}, {"code": "not=", "problem": 83, "user": "4e5d0e96535d8a8b8723a2c8"}, {"code": "#(not=\n  (reduce (fn [a b] (or a b)) %&)\n  (reduce (fn [a b] (and a b)) %&)\n)", "problem": 83, "user": "4db3a0e5535df7e46ed9b6d0"}, {"code": "(fn [b & bs]\n  (let [l (conj bs b)\nt (count (filter identity l))\nf (count (filter not l))]\n    (and (> t 0) (> f 0))))", "problem": 83, "user": "4ed2b168535d44c135fd68dd"}, {"code": "(fn [& x]\n  (not (or (not-any? true? x) (not-any? false? x))))", "problem": 83, "user": "4ec5cdb0535d6d7199dd36b8"}, {"code": "(fn [& a] (and (not-every? true? a) (not-every? false? a)))", "problem": 83, "user": "4eb13d60535d7eef3080733f"}, {"code": "(fn foo [& args] (->> args set count (= 2)))", "problem": 83, "user": "4ed500bb535d10e5ff6f52d3"}, {"code": "not=", "problem": 83, "user": "4ec28d86535dfed6da9c6dbc"}, {"code": "(fn d [& bool](\n  = 2 (count (set bool))))", "problem": 83, "user": "4ed42c78535d10e5ff6f52c7"}, {"code": "(fn [& bools]\n    (true? (and (some true? bools) (not-every? true? bools))))", "problem": 83, "user": "4ed292ac535d44c135fd68d9"}, {"code": "(fn true-and-false [& args]\n  (and (> (count (filter #(= true %) args)) 0)\n       (> (count (filter #(= false %) args)) 0)))", "problem": 83, "user": "4ec75077535d6d7199dd36e0"}, {"code": "(fn [& bools] \n  (let [trues (filter identity bools)\n        falses (filter #(not %1) (drop (count trues) bools))]\n    (and (> (count trues) 0) (> (count falses) 0))))", "problem": 83, "user": "4ebbf772535dfed6da9c6d76"}, {"code": "(fn [& values]\n     (if (and (some true? values) (some false? values))\n       true false))", "problem": 83, "user": "4dfd7ecf535d04ed9115e783"}, {"code": "(fn [& x] (and (boolean (some true? x)) (not (every? true? x))))", "problem": 83, "user": "4e89ff3d535d3e98b802328a"}, {"code": "(fn[& s] \n  (let [n (count (filter true? s))]\n    (and (> n 0) (< n (count s)))))", "problem": 83, "user": "4ec64981535d6d7199dd36c7"}, {"code": "(fn [& xs] (and (not-every? true? xs) (not-every? false? xs)))", "problem": 83, "user": "4e7d2448535db169f9c796c8"}, {"code": "(fn [& more] (true? (and (some true? more) (some false? more))))", "problem": 83, "user": "4ea4e98a535d7eef308072ce"}, {"code": "#(= (not-every? true? %&) (some true? %&))", "problem": 83, "user": "4eca40cd535d6d7199dd3703"}, {"code": "(fn fun [& items]\n  (if (and\n      (some identity items)\n      (some (complement identity) items))\n    true\n    false))", "problem": 83, "user": "4eda7cc3535d10e5ff6f530e"}, {"code": "(fn [& bools] (true? (and (some true? bools) (some false? bools))))", "problem": 83, "user": "4edab806535d10e5ff6f5311"}, {"code": "(fn [& vals] (and (not-every? identity vals) (not-every? not vals)))", "problem": 83, "user": "4ed94d69535d10e5ff6f5303"}, {"code": "(fn [& x] (not (or (every? false? x) (every? true? x))))", "problem": 83, "user": "4e5af45e535d8a8b8723a2b1"}, {"code": "(fn [& r]\n  (true?(and (some true? r)(not-every? true? r))))", "problem": 83, "user": "4e599577535d8a8b8723a29f"}, {"code": "(fn [& args]\n  (and (not-every? true? args) (not-every? false? args)))", "problem": 83, "user": "4eddcbbf535d10e5ff6f532d"}, {"code": "#(> (count (frequencies %&)) 1)", "problem": 83, "user": "4ecf1f51535d1f5ad70dba3a"}, {"code": "(fn [& args] (cond\n  (every? #(= true %) args) false\n  (some #(= true %) args) true\n  :default false))", "problem": 83, "user": "4edd4b77535d10e5ff6f5328"}, {"code": "not=", "problem": 83, "user": "4ede8789535d10e5ff6f5337"}, {"code": "not=", "problem": 83, "user": "4db4c93f535dc0f10411755c"}, {"code": "(fn ht [& more]\n    (let [nt (reduce + (map #(if (= true %) 1 0) more)) ]\n        (if (= nt 0)\n            false\n            (< nt (count more)))))", "problem": 83, "user": "4ed72e51535d10e5ff6f52ee"}, {"code": "#(= (some false? %&) (some true? %&))", "problem": 83, "user": "4ec5aa1f535d6d7199dd36b0"}, {"code": "(fn ll [& x]\r\n (if (= true (some #{true} x) )\r\n  (if (= (count (filter #(= true %) x)) (count x))\r\n   false\r\n   true\r\n  )\r\n  false\r\n )\r\n)", "problem": 83, "user": "4edf92f0535d10e5ff6f5341"}, {"code": "(fn [& bs]\n  (and (not (nil? (some identity bs)))\n       (not (every? identity bs))))", "problem": 83, "user": "4ede8e1d535d10e5ff6f5339"}, {"code": "(fn [& preds]\n  (= 2(count(set preds))))", "problem": 83, "user": "4edeac6b535d10e5ff6f533a"}, {"code": "#(nil? (reduce % %&)) #(if (= % %2) % nil)", "problem": 83, "user": "4e65027c535d8ccf87e9fe6e"}, {"code": "(fn half-truth [& xs]\n  (and (not= nil (some true? xs)) (not-every? true? xs))\n  )", "problem": 83, "user": "4ecfa05c535d44c135fd68b9"}, {"code": "(fn [& args] \n  (let [size  (count (filter true? args))]\n    (if (or (= size 0) (= size (count args)))\n      false\n      true)))", "problem": 83, "user": "4edd9d79535d10e5ff6f532b"}, {"code": "(fn [& args] (true? (and (some true? args) (some false? args))))", "problem": 83, "user": "4ed27f9f535d44c135fd68d5"}, {"code": "(comp #(< 1 %) count distinct list)", "problem": 83, "user": "4ece9ca9535d23f03622770f"}, {"code": "not=", "problem": 83, "user": "4edd038c535d10e5ff6f5327"}, {"code": "(fn [& x] (if (or (every? true? x) (every? false? x)) false true))", "problem": 83, "user": "4ea11921535d7eef308072af"}, {"code": "(fn [& booleans]\n  (boolean\n  (and\n    (not (every? true? booleans))\n    (some true? booleans))))", "problem": 83, "user": "4ee2da14535d10e5ff6f536c"}, {"code": "(fn [& bools] (and (not-every? false? bools)\n                   (not-every? true? bools)))", "problem": 83, "user": "4ee3b586535d10e5ff6f5371"}, {"code": "not=", "problem": 83, "user": "4dadc6f2c9a9d6ed4099dc57"}, {"code": "(fn [& bs]\n    (boolean (and (some true? bs)\n                  (not (every? true? bs)))))", "problem": 83, "user": "4ee26f01535d10e5ff6f5368"}, {"code": "(fn [& args] (not (apply = args)))", "problem": 83, "user": "4e7e8684535db169f9c79717"}, {"code": "(fn ([] false)\n    ([& xs] (let [c (count xs)\n                  trues (count (filter true? xs))]\n            (if (> trues 0)\n                (if (not (= trues c))\n                    true\n                    false)\n                false))))", "problem": 83, "user": "4ee75ec2535d93acb0a66867"}, {"code": "(fn [& args]\r\n  (let [res (and (some true? args)\r\n                  (not (every? true? args)))]\r\n    (if (or (nil? res) (false? res))\r\n      false\r\n      true)))", "problem": 83, "user": "4ee40938535d10e5ff6f5375"}, {"code": "#(boolean (and (some #{true} %&) \n          (not (every? #{true} %&))))", "problem": 83, "user": "4ee7ef87535d93acb0a66872"}, {"code": "(fn [& x]\n  (and (not-every? true? x) (not (nil? (some true? x)))))", "problem": 83, "user": "4ee88269535d93acb0a6687f"}, {"code": "(fn [& bools] \n (and (not-every? (fn [x] x) bools)\n      (not (nil? (some (fn [x] x) bools))))\n)", "problem": 83, "user": "4dad8d4bc9a9d6ed1799dc57"}, {"code": "#(= (count (distinct %&)) 2)", "problem": 83, "user": "4ed7e37a535d10e5ff6f52f4"}, {"code": "(fn [& l]\n  (and\n    (boolean (some identity l))\n    (not-every? identity l)))", "problem": 83, "user": "4ee82539535d93acb0a66878"}, {"code": "not=", "problem": 83, "user": "4ee82223535d93acb0a66877"}, {"code": "(fn [x & more] (= 2 (count (set (cons x more)))))", "problem": 83, "user": "4e570b60535d8a8b8723a286"}, {"code": "(fn [& l]\n  (let [s (set l)]\n   (= s #{true false})))", "problem": 83, "user": "4ec3b393535dcc7ae8597d59"}, {"code": "(fn ht [& xs]\n  (if (empty? xs)\n\t\tfalse\n\t\t(and (not (reduce #(and %1 %2) true xs)) (reduce #(or %1 %2) false xs))\n\t)\n)", "problem": 83, "user": "4ed6238d535d10e5ff6f52de"}, {"code": "(fn [& coll]\n  (and \n    (not (nil? (some true? coll)))\n    (not-every? true? coll)))", "problem": 83, "user": "4ed7b617535d10e5ff6f52f3"}, {"code": "#(> (-> %& distinct count) 1)", "problem": 83, "user": "4ee63d8d535d93acb0a66859"}, {"code": "#(true? (and (some false? %&) (some true? %&) ))", "problem": 83, "user": "4ee7d177535d93acb0a6686f"}, {"code": "#(not (nil? (and (some true? %&)(some false? %&))))", "problem": 83, "user": "4ec7def0535d6d7199dd36e9"}, {"code": "#(= #{true false} (set %&))", "problem": 83, "user": "4dadc27ec9a9d6ed3c99dc57"}, {"code": "#(= 2 (count (distinct %&)))", "problem": 83, "user": "4e95f5a5535dbda64a6f6b3b"}, {"code": "#(= (count (distinct %&)) 2)", "problem": 83, "user": "4ed6ac40535d10e5ff6f52e4"}, {"code": "(fn [& x] (and (not (nil? (some true? x))) (not-every? true? x)))", "problem": 83, "user": "4ee9d697535d93acb0a66895"}, {"code": "(comp not =)", "problem": 83, "user": "4e7f8f85535db966e863cc44"}, {"code": "(fn [& a]\n   (let [t (count (filter true? a))]\n     (and (> t 0) (< t (count a)))))", "problem": 83, "user": "4ee868be535d93acb0a6687d"}, {"code": "(fn [& xv] \n  (= 2 (count (group-by true? xv))))", "problem": 83, "user": "4ee9ddb8535d93acb0a66896"}, {"code": "#(let [alltrue? (reduce (fn [x y] (and x y)) % %&)]\r\n    (if alltrue?\r\n      false\r\n      (reduce (fn [x y] (or x y)) % %&)))", "problem": 83, "user": "4e273301535deb9a81d77ef7"}, {"code": "#(= 2 (count (group-by true? %&)))", "problem": 83, "user": "4ed0e139535d44c135fd68c7"}, {"code": "not=", "problem": 83, "user": "4ed69ea4535d10e5ff6f52e3"}, {"code": "#(not (or \n  (nil? (some true? %&)) \n  (every? true? %&)))", "problem": 83, "user": "4ee4f4a9535d1385b2869d85"}, {"code": "(fn [& args] (< 1 (count (set args))))", "problem": 83, "user": "4ee88bfb535d93acb0a66881"}, {"code": "(fn\n    ([a] false)\n    ([a & args] (and (reduce #(or %1 %2) (conj args a))\n                   (not (reduce #(and %1 %2) (conj args a))))))", "problem": 83, "user": "4db883e1535d1e037afb2198"}, {"code": "(fn [& xs] (or (and (some identity xs) (not (every? identity xs))) false))", "problem": 83, "user": "4eecdd66535d93acb0a668b9"}, {"code": "(fn [& xs] (= 2 (count (set xs))))", "problem": 83, "user": "4ee8092f535d93acb0a66875"}, {"code": "(fn [& args]\n  (if (and (some identity args)\n            (some #(not %) args))\n    true\n    false))", "problem": 83, "user": "4daea889edd6309eace4d15b"}, {"code": "(fn [& xs] (not-every? (partial = (first xs)) xs))", "problem": 83, "user": "4eeae8f0535d93acb0a668a2"}, {"code": "(fn [& x] (or (and (some identity x) (some not x)) false))", "problem": 83, "user": "4eebc5da535d93acb0a668aa"}, {"code": "(fn [& bools] \n  (if (some true? bools)\n    (not (= (count bools) (count (filter true? bools))))\n    false))", "problem": 83, "user": "4ec6688d535d6d7199dd36cc"}, {"code": "(fn [& x]\n  (and (not (empty? (filter identity x)))\n       (not (empty? (filter (complement identity) x)))))", "problem": 83, "user": "4ef0a39b535dced4c769f20c"}, {"code": "(fn  [& truths]   (and\n                           (if (some #{true} truths) true false)\n                           (not-every? true? truths)\n                           ))", "problem": 83, "user": "4eef1164535d305ff5cb7f19"}, {"code": "#(= #{true false} (set %&))", "problem": 83, "user": "4e6a0667535d8ccf87e9fe9e"}, {"code": "(fn [& args]\n  (and (not (= nil (some true? args))) (not-every? true? args)))", "problem": 83, "user": "4ee3afde535d10e5ff6f5370"}, {"code": "not=", "problem": 83, "user": "4ef2d243535dced4c769f221"}, {"code": "not=", "problem": 83, "user": "4ef49c2c535dced4c769f238"}, {"code": "(fn [& xs]\n  (true? (and\n    (some true? xs)\n    (not-every? true? xs))))", "problem": 83, "user": "4edecdae535d10e5ff6f533c"}, {"code": "(fn [& xs] (and\n    (not (= nil (some true? xs)))\n    ((complement every?) true? xs)))", "problem": 83, "user": "4ef41f26535dced4c769f230"}, {"code": "(fn [& args] (and (true? (some true? args)) (not (every? true? args))))", "problem": 83, "user": "4ec18451535dfed6da9c6db0"}, {"code": "(fn [& bs]\r\n     (if (and (some #(= % true) bs) (not-every? #(= % true) bs)) true false))", "problem": 83, "user": "4ef1ee67535dced4c769f219"}, {"code": "(fn [& xs] (true? (and (some false? xs) (some true? xs))))", "problem": 83, "user": "4ef4e5fa535dced4c769f242"}, {"code": "(fn [& c] (and (not-every? true? c) (true? (some true? c))))", "problem": 83, "user": "4ef5c7ce535dced4c769f248"}, {"code": "(fn half-true\n  [& s]\n  (and (not(not-any? #(= true %) s)) (not-every? #(= true %) s)))", "problem": 83, "user": "4edf5dc6535d10e5ff6f5340"}, {"code": "(fn [& l] (and (reduce #(or % %2) l) (not (reduce #(and % %2) l))))", "problem": 83, "user": "4ef355e3535dced4c769f228"}, {"code": "(fn [& args]\n   (and\n            (not (every? #(false? %) args))\n            (not (every? #(true? %) args))\n     )\n   )", "problem": 83, "user": "4e73debb535d7a570dd295b7"}, {"code": "not=", "problem": 83, "user": "4ef77c82535dced4c769f253"}, {"code": "#(true? (and (not (every? true? %&)) (some true? %&)))", "problem": 83, "user": "4dd88803535d2dad7130b5d9"}, {"code": "(fn [& more]\n  (if (and (some true? more)\n           (some false? more))\n      true\n      false))", "problem": 83, "user": "4efb92ce535dced4c769f27a"}, {"code": "#(not (or (every? true? %&) (every? false? %&)))", "problem": 83, "user": "4eee5c7f535d93acb0a668c6"}, {"code": "#(and (not-every? true? %&)(not (not-any? true? %&)))", "problem": 83, "user": "4ed2dd98535d44c135fd68e2"}, {"code": "(fn [& bs](boolean (and (some true? bs) (some false? bs))))", "problem": 83, "user": "4efcac3a535de96065cf507e"}, {"code": "(fn [& bs]\n  (and ((complement nil?) (some true? bs)) (not-every? true? bs)))", "problem": 83, "user": "4ef992c8535dced4c769f268"}, {"code": "(fn [& coll] \n  (if (and (some false? coll) (some true? coll)) \n    true \n    false))", "problem": 83, "user": "4ef4c1ff535dced4c769f23e"}, {"code": "(fn [& vls] (true? (and (not-every? true? vls) (some true? vls))))", "problem": 83, "user": "4e8768f6535dceadca469850"}, {"code": "not=", "problem": 83, "user": "4ec5d62c535d6d7199dd36ba"}, {"code": "#(boolean(and (some true? %&) (not-every? true? %&)))", "problem": 83, "user": "4efb2fd7535dced4c769f274"}, {"code": "(fn half-truth [& bs]\n  (cond (and (some #(= false %) bs) (some #(= true %) bs)) true\n        true false))", "problem": 83, "user": "4ef6f5ea535dced4c769f250"}, {"code": "(fn [& coll]\n   (and (not= nil (some identity coll)) (not (every? identity coll))))", "problem": 83, "user": "4ef57a7f535dced4c769f246"}, {"code": "#(= 2 (count (set %&)))", "problem": 83, "user": "4ed9354f535d10e5ff6f5301"}, {"code": "(fn [& bs] \n  (if\n    (and \n      (some true? bs) \n      (some false? bs)) \n     true \n     false))", "problem": 83, "user": "4ee67d74535d93acb0a66861"}, {"code": "#(apply not= %&)", "problem": 83, "user": "4effb663535dcb61093f6a2e"}, {"code": "#(let [c (count %&) d (count (filter true? %&))] (and (> d 0) (< d c)))", "problem": 83, "user": "4efb87f7535dced4c769f279"}, {"code": "(fn [& x] (= 2 (count (distinct x))))", "problem": 83, "user": "4f017593535dcb61093f6a36"}, {"code": "(fn [& s] (if (and (some #(true? %) s) (not (every? #(true? %) s))) true false))", "problem": 83, "user": "4efd98fa535de96065cf5086"}, {"code": "(fn [& bools]\n  (loop [[cbool & rst] bools\n         and-accum true\n         or-accum false]\n    (if (nil? cbool)\n      (if and-accum\n        false\n        or-accum)\n      (recur rst (and cbool and-accum) \n(or cbool or-accum)))))", "problem": 83, "user": "4ee271e2535d10e5ff6f5369"}, {"code": "#(boolean (and (some true? %&) (some false? %&)))", "problem": 83, "user": "4f031eac535dcb61093f6a67"}, {"code": "(fn [& s] (< 0 (count (filter true? s)) (count s)))", "problem": 83, "user": "4ed55b5d535d10e5ff6f52d8"}, {"code": "(fn half [& more]\n    (= true (and (some false? more) (some true? more))))", "problem": 83, "user": "4ea0c284535d7eef308072ad"}, {"code": "(fn [& args] (> (count (distinct args)) 1))", "problem": 83, "user": "4db8f6c4535d1e037afb219e"}, {"code": "(fn [& bools] (and (not (every? true? bools)) (not (nil? (some true? bools)))))", "problem": 83, "user": "4dd7c1da535d2dad7130b5d4"}, {"code": "#(and (not (nil? (some true? %&))) (not-every? true? %&))", "problem": 83, "user": "4ee6400c535d93acb0a6685b"}, {"code": "(fn [& x] (= 2 (count (set x))))", "problem": 83, "user": "4f03d0fe535dcb61093f6b6d"}, {"code": "#(and (-> (some true? %&) nil? false?) (false? (every? true? %&)))", "problem": 83, "user": "4f01ff83535dcb61093f6a3a"}, {"code": "#(true? (and (some false? %&) (some true? %&)))", "problem": 83, "user": "4f043ed1535dcb61093f6bb4"}, {"code": "(fn [& more]\n  (if (every? true? more) \n    false\n    (if (nil? (some true? more)) false true)))", "problem": 83, "user": "4f040bbf535dcb61093f6b95"}, {"code": "(fn [& args]\n  (let [uniques (set args)]\n    (cond (= uniques #{true}) false\n        (= uniques #{false}) false\n        (= uniques #{true false}) true)))", "problem": 83, "user": "4f0348b4535dcb61093f6a84"}, {"code": "not=", "problem": 83, "user": "4f036d9b535dcb61093f6ac1"}, {"code": "(fn  [& input]\n  (and\n   (not (= '() (filter (fn [x] x) input)))\n   (not (= '() (filter (fn [x] (not x)) input)))))", "problem": 83, "user": "4f036894535dcb61093f6aad"}, {"code": "(fn [ & x] \r\n(true? (and (some false? x) (some true? x))))", "problem": 83, "user": "4f00c74f535dcb61093f6a31"}, {"code": "not=", "problem": 83, "user": "4f01c938535dcb61093f6a39"}, {"code": "(fn aveces [& x]\n (if (and (some identity x) \n       (some #(= % false) x))\n      true\n      false))", "problem": 83, "user": "4f04a06d535dcb61093f6bd9"}, {"code": "(fn \n  ([x & more]\n    (let [all (cons x more)]\n      (and (boolean (some boolean all))\n           (not-every? boolean all)))))", "problem": 83, "user": "4f047902535dcb61093f6bcc"}, {"code": "not=", "problem": 83, "user": "4f039a8b535dcb61093f6b36"}, {"code": "not=", "problem": 83, "user": "4ef6e689535dced4c769f24f"}, {"code": ";; Collapse duplicates in a set and see if we end up with #{true false}\n#(= 2 (count (set %&)))", "problem": 83, "user": "4f047c07535dcb61093f6bcd"}, {"code": "(fn [& l]\n  (boolean\n  (and (not (every? true? l))\n       (some true? l))))", "problem": 83, "user": "4f04f847535dcb61093f6beb"}, {"code": "#(and (boolean (some true? %&)) (not-every? true? %&))", "problem": 83, "user": "4ec5a5f9535d6d7199dd36ad"}, {"code": "#(true? (and (some true? %&) (not (every? true? %&))))", "problem": 83, "user": "4dadaa5cc9a9d6ed2f99dc57"}, {"code": "(fn [& e]\n  (and (not-every? true? e)\n       (not-every? false? e)))", "problem": 83, "user": "4f062d4a535dcb61093f6c08"}, {"code": "(fn [& bools] \n  (and \n    ((complement nil?) (some true? bools)) \n    (not-every? true? bools)))", "problem": 83, "user": "4f032977535dcb61093f6a6c"}, {"code": "(fn [x & xs] \n  (reduce #(or % (not (= x %2))) false xs))", "problem": 83, "user": "4efec33f535dcb61093f6a2a"}, {"code": "(fn [& lies]\r\n  (letfn [(change [daList daLie]\r\n      (if (empty? daList)\r\n        false\r\n        (if (= (first daList) daLie)\r\n          (change (rest daList) daLie)\r\n          true)))]\r\n  (change (rest lies) (first lies))))", "problem": 83, "user": "4f0365fc535dcb61093f6aa4"}, {"code": "(fn [& args] \n  (boolean (and (some identity args) (not-every? identity args))))", "problem": 83, "user": "4ef0eaef535dced4c769f211"}, {"code": "#(< 0 (count (filter true? %&)) (count %&))", "problem": 83, "user": "4db27319535df7e46ed9b6bd"}, {"code": "(fn [& x] (= (set x) #{true false}))", "problem": 83, "user": "4f03822f535dcb61093f6b03"}, {"code": "not=", "problem": 83, "user": "4f083048535dcb61093f6c33"}, {"code": "#(or (and (some identity %&) (some not %&)) false)", "problem": 83, "user": "4f0664bd535dcb61093f6c0f"}, {"code": "(fn [& bs]\n  (if (reduce #(or %1 %2) bs)\n    (if (reduce #(and %1 %2) bs)\n      false\n      true)\n    false)\n)", "problem": 83, "user": "4dc1e1e4535d020aff1edf90"}, {"code": "(fn [& s]\n  (loop [s_ s]\n    (cond\n      (not s_) false\n      (not (next s_)) false\n      (not= (first s_) (first (next s_))) true\n      :else (recur (next s_)))))", "problem": 83, "user": "4f050dec535dcb61093f6bef"}, {"code": "#(boolean (and (some true? %&) (some false? %&)))", "problem": 83, "user": "4f0381db535dcb61093f6b02"}, {"code": "(fn [& coll] \n  (if (and (some true? coll) (not (every? true? coll)))\n    true\n    false))", "problem": 83, "user": "4ef89fb0535dced4c769f260"}, {"code": "not=", "problem": 83, "user": "4f04b66b535dcb61093f6bdd"}, {"code": "(fn [& in-seq] (and (not (empty? (filter #(true? %) in-seq)))\n                    (not (empty? (filter #(false? %) in-seq)))))", "problem": 83, "user": "4ef4ab95535dced4c769f23b"}, {"code": "(fn [& x] (let [a (map #(if (= % true) 1 0) x)]\n                       (if (and (= (apply max a) 1) \n                                (= (apply min a) 0)) true false)))", "problem": 83, "user": "4f039bbe535dcb61093f6b39"}, {"code": "(fn [& bs] (and (reduce #(or % %2) bs) \n    (not (reduce #(and % %2) bs))))", "problem": 83, "user": "4f06dcad535dcb61093f6c16"}, {"code": "(fn half-truth\n\t[a & more] (if (every? #(= % true) (cons a more))\n\t\tfalse\n\t\t(if (some #(= % true) (cons a more))\n\t\t\ttrue\n\t\t\tfalse)))", "problem": 83, "user": "4f047542535dcb61093f6bc7"}, {"code": "#(= 2 (count (set %&)))", "problem": 83, "user": "4f08b15b535dcb61093f6c40"}, {"code": "(fn half-truth? [& more]\n  (cond\n   (every? true? more) false\n   (every? false? more) false\n   :else true))", "problem": 83, "user": "4e95a440535dbda64a6f6b37"}, {"code": "(fn [& args]\n  (if \n    (and\n      (some identity args)\n      (not (every? identity args)))\n    true\n    false))", "problem": 83, "user": "4f0b2028535d0136e6c222ff"}, {"code": "#(if \n  (and (some true? %&) (some false? %&))\n  true\n  false)", "problem": 83, "user": "4ef0f1a1535dced4c769f212"}, {"code": "(fn [& bools] (and\n               (reduce #(or %1 %2) false bools)\n               (not (reduce #(and %1 %2) true bools))))", "problem": 83, "user": "4eee3e6a535d93acb0a668c3"}, {"code": "(fn [& e]\n  (and (not-every? true? e)\n       (not-every? false? e)))", "problem": 83, "user": "4f067029535dcb61093f6c12"}, {"code": "(comp (fn [xs] (and (not-every? true? xs) (not-every? false? xs))) list)", "problem": 83, "user": "4de760a3535d08e6dec9fdf9"}, {"code": "not=", "problem": 83, "user": "4eeaf88f535d93acb0a668a3"}, {"code": "(fn [& xs] \n  (boolean (and \n    (some #{true} xs) \n    (not (every? #{true} xs)))))", "problem": 83, "user": "4f0660ee535dcb61093f6c0d"}, {"code": "(fn [& bools]\n  (if (reduce #(and %1 %2) true bools) false\n    (reduce #(or %1 %2) false bools)))", "problem": 83, "user": "4ef6c222535dced4c769f24d"}, {"code": "(fn [& p] (if (every? true? p) false (not= nil (some true? p))))", "problem": 83, "user": "4f037bb5535dcb61093f6aec"}, {"code": "(fn [& args]\n  (if (and\n    (some identity args)\n    (not-every? identity args))\n    true\n    false))", "problem": 83, "user": "4e2d84bf535deb9a81d77f09"}, {"code": "#(not (empty? (drop-while (partial = %) %&)))", "problem": 83, "user": "4f052eaf535dcb61093f6bf3"}, {"code": "(fn [ & args] \n  (and (reduce (fn [a b] (or a b)) args) (not (reduce (fn [a b] (and a b)) args))))", "problem": 83, "user": "4f03ac2d535dcb61093f6b4a"}, {"code": "(fn some? [& s]\r\n    (and (not (not-any? true? s)) (not-every? true? s)))", "problem": 83, "user": "4f039524535dcb61093f6b2c"}, {"code": "(fn myTruth [ & x ]\n    ((fn myTruth-inner\n        [a b c]\n            (if (empty? a)\n                (if (and b c)\n                    true\n                false)\n            (myTruth-inner (rest a) (or b (= true (first a))) (or c (= false (first a)))))) x false false))", "problem": 83, "user": "4f03b3fb535dcb61093f6b52"}, {"code": "(fn [& r] \n   (and (contains? (set r) true) \n        (contains? (set r) false)))", "problem": 83, "user": "4f038567535dcb61093f6b0c"}, {"code": "(fn [x & xs]\n  (let [args (cons x xs)]\n    (and (boolean (some true? args)) (not (every? true? args)))))", "problem": 83, "user": "4ec1b80c535dfed6da9c6db6"}, {"code": "(fn [& bools]\n  (let [truthy-count (count (filter #(true? %) bools))]\n    (and (not= truthy-count (count bools))\n         (> truthy-count 0))))", "problem": 83, "user": "4f0feb75535d64f60314640f"}, {"code": "#(= #{true false} (set %&))", "problem": 83, "user": "4ebcb8ff535dfed6da9c6d8a"}, {"code": "(fn [& d] (not (apply = d)))", "problem": 83, "user": "4f0333f6535dcb61093f6a77"}, {"code": "(fn ([x] false)\n     ([x & more] (let [elem (flatten (list x more))] (if (or (every? true? elem) (every? false? elem)) false true))))", "problem": 83, "user": "4f066916535dcb61093f6c10"}, {"code": "(fn [& args]\n  (and \n    (not (reduce #(and %1 %2) args)) \n    (reduce #(or %1 %2) args)))", "problem": 83, "user": "4e49a7bb535dc968683fc4c6"}, {"code": "(fn [& more] (if (and (some true? more) (not-every? true? more)) true false))", "problem": 83, "user": "4f0ef874535d0136e6c22328"}, {"code": "not=", "problem": 83, "user": "4f0f36a7535d0136e6c22336"}, {"code": "(fn [& args] (let [some (reduce (fn [a b] (or a b)) false args)\n                   all (reduce (fn [a b] (and a b)) true args)]\n                  (and some (not all))))", "problem": 83, "user": "4f13047d535d64f60314642c"}, {"code": "(fn [& xs] (and (not-every? #(= true %) xs) (not-every? #(= false %) xs)))", "problem": 83, "user": "4f0e995e535d0136e6c22326"}, {"code": "(fn [& args] \n  (and\n   (not-every? false? args)\n   (not-every? true? args)))", "problem": 83, "user": "4f12ab23535d64f603146429"}, {"code": "#(if (and (some true? %&) (some false? %&)) true false)", "problem": 83, "user": "4f1052b9535d64f603146418"}, {"code": "#(not-any? nil? (map (set %&) [true false]))", "problem": 83, "user": "4ec74de3535d6d7199dd36df"}, {"code": "(fn half-truth [& args]                                                                                                                      \r\n    (and (false? (every? true? args))                                                                                                         \r\n         (false? (every? false? args))))", "problem": 83, "user": "4f149e0f535d64f60314643d"}, {"code": "#(= 2 (count (distinct %&)))", "problem": 83, "user": "4f128865535d64f603146428"}, {"code": "#(boolean (and (some true? %&) (not (every? true? %&))))", "problem": 83, "user": "4f0f9df7535d0136e6c22342"}, {"code": "(fn [& more] (and (not (reduce #(and %1 %2) more)) (reduce #(or %1 %2) more)))", "problem": 83, "user": "4ec60dc4535d6d7199dd36c0"}, {"code": "(fn halftruth [& bools] (and \n  (not (nil? (some true? bools))) \n  (not-every? true? bools)\n))", "problem": 83, "user": "4f036d6e535dcb61093f6ac0"}, {"code": "(fn [& args] (and (not (nil? (some #{true} args))) (not-every? #{true} args)))", "problem": 83, "user": "4f0cc259535d0136e6c22310"}, {"code": "(fn [& vals] \n  (boolean (and \n    (some identity vals) \n    (not (every? identity vals)))))", "problem": 83, "user": "4f03154a535dcb61093f6a58"}, {"code": "(fn [& col] (and (not-every? #(= true %) col) (not-every? #(= false %) col)))", "problem": 83, "user": "4f0c4518535d0136e6c2230b"}, {"code": "(fn [& tst] (and  \n  (not (reduce (fn [a b]  (and a b)  )\n(seq tst)  ))\n (reduce (fn [a b]  (or a b)  )\n(seq tst)  )\n) )", "problem": 83, "user": "4f00e9c7535dcb61093f6a33"}, {"code": "(fn [& l]\n  (and (-> nil (= (some #(= true %) l)) not) (not (every? #(= true %) l))))", "problem": 83, "user": "4f08a8a2535dcb61093f6c3d"}, {"code": "not=", "problem": 83, "user": "4e6b6294535d8ccf87e9ff11"}, {"code": "(fn [& s]\n  (true? (and\n    (some identity s)\n    (some not s))))", "problem": 83, "user": "4f1b0ab3535d64f603146474"}, {"code": "(fn [& more]\n  ((fn myPrep [result data]\n    (if (empty? data)\n      ((fn [a]\n        (and\n          (reduce (fn [a b] (or a b)) a)\n          (not (reduce (fn [a b] (and a b)) a)))\n      ) result)\n\n      (myPrep\n        (conj result (first data))\n        (rest data)\n      )\n    )\n  ) [] more)\n)", "problem": 83, "user": "4f16d6ed535d64f60314644f"}, {"code": "(fn [& vals] \n  (true? (and (some true? vals) (some false? vals))))", "problem": 83, "user": "4f0d093b535d0136e6c22313"}, {"code": "(fn [& args] (if (every? identity args) false (not (nil? (some identity args)))))", "problem": 83, "user": "4f1b92d1535d64f60314647b"}, {"code": "(fn [& x]\r\n  (let [y (distinct x)]\r\n    (if (= (count y) 1)\r\n        false\r\n        (or (first y) (last y))\r\n    )))", "problem": 83, "user": "4dc7e7a5535d8a4b2fd74290"}, {"code": "(fn bob [& args]\n(\n  (fn bill \n  ([lis] (bill lis false false))\n  ([lis tp fp]\n     (if (empty? lis)\n      (and tp fp)\n      (bill (rest lis) (or tp (first lis)) (or fp (not (first lis))))\n      )\n    )\n  )\n  args)\n)", "problem": 83, "user": "4f2004a1535d64f6031464a7"}, {"code": "(fn [h & t]\n  (loop [all-true (if h (= (inc (count (filter true? t))) (inc (count t))) false)\n         frst h\n         rst t\n         rslt false]\n    (if (empty? rst)\n      (if all-true false rslt)\n      (recur all-true (first rst) (rest rst) (or frst rslt)))))", "problem": 83, "user": "4e7d1c22535db169f9c796c5"}, {"code": "(fn [& b] (and \n  (not (every? true? b)) \n  (not (every? false? b))))", "problem": 83, "user": "4f1595da535d64f603146444"}, {"code": "(fn [& a] \n  (if (and (some true? a) (some false? a)) \n    true\n    false))", "problem": 83, "user": "4f032f30535dcb61093f6a73"}, {"code": "(fn [& args] (let [groups (group-by true? args)] (if (and (groups true) (groups false)) true false)))", "problem": 83, "user": "4f0e4ebd535d0136e6c22322"}, {"code": "(fn [& a] (if-let [s ((group-by true? a) true)] (< (count s) (count a)) false))", "problem": 83, "user": "4eccb190535d23f0362276fe"}, {"code": "(fn [& more] (and (reduce #(or %1 %2) more) \n(not (reduce #(and %1 %2) more) ) ))", "problem": 83, "user": "4ea31da2535d7eef308072c1"}, {"code": "(fn f[& more]\r\n  (and\r\n    (not (reduce #(and %1 %2) more))\r\n    (reduce #(or %1 %2) more)\r\n  )\r\n  \r\n)", "problem": 83, "user": "4f245d77e4b0d66497709feb"}, {"code": "(fn [& x] (boolean (and (some identity x) (not (every? identity x)))))", "problem": 83, "user": "4f1c9652535d64f603146483"}, {"code": "(fn half-true? [& xs]\n  (= true\n    (and (some identity xs)\n      (some not xs))))", "problem": 83, "user": "4ee82ce9535d93acb0a6687a"}, {"code": "(fn [& args]\n   (let [res (reduce (fn [r b]\n             (if (contains? r :and)\n               {:and (and (get r :and) b)\n                :or  (or (get r :or) b)}\n               {:and b :or b}))\n           {} args)]\n     (not= (res :and) (res :or))))", "problem": 83, "user": "4eb02674535d7eef30807338"}, {"code": "(fn [& x] (and (not-every? true? x) (if (= nil (some true? x)) false true)))", "problem": 83, "user": "4f05c087535dcb61093f6c00"}, {"code": "#(and (not-every? true? %&) (not-every? false? %&))", "problem": 83, "user": "4dbf7a31535d020aff1edf75"}, {"code": "#(if (and (some true? %&) (not (every? true? %&))) true false)", "problem": 83, "user": "4f0c84ce535d0136e6c2230e"}, {"code": "not=", "problem": 83, "user": "4f251302e4b0d66497709ff0"}, {"code": "(fn [& args] \n  (and (true? (some true? args)) \n       (not (every? true? args))))", "problem": 83, "user": "4f1fd734535d64f6031464a5"}, {"code": "(fn [& args ]\n  (let [ration (/ (count (filter identity args)) (count args))]\n   (not (or (zero? ration) (= 1 ration)))))", "problem": 83, "user": "4e5d2dc5535d8a8b8723a2ca"}, {"code": "#(not (or (every? true? %&) (every? false? %&)))", "problem": 83, "user": "4f26d6d9e4b0d6649770a007"}, {"code": ";(fn [& xs]\n;  (let [xsl (count xs)\n;        xst (count (filter true? xs))]\n;    (if (and (> xst 0) (< xst xsl))\n;      true\n;      false)))\n\n;not=\n\n#(even? (count (set %&)))", "problem": 83, "user": "4f07c8c3535dcb61093f6c2d"}, {"code": "(fn [ & args ] \n  (if (> (count (distinct args)) 1)\n    true\n    false))", "problem": 83, "user": "4f21838fe4b0d66497709fd2"}, {"code": "#(if (= (count (set %&)) 2) true false)", "problem": 83, "user": "4f280840e4b0d6649770a010"}, {"code": "(fn [& more] (and (reduce #(or %1 %2) more) (not (reduce #(and %1 %2) more))))", "problem": 83, "user": "4f29cdc8e4b0d6649770a033"}, {"code": "not=", "problem": 83, "user": "4f10175e535d64f603146411"}, {"code": "#(and (or (some true? %&) false) (not (every? true? %&)))", "problem": 83, "user": "4f0891a2535dcb61093f6c3b"}, {"code": "(fn [& x]\n    (let [a (first x)]\n      (loop [r (next x)]\n        (and (#(and (not (= % '()))\n                    (not (nil? %))) r)\n             (if (= (first r) a)\n               (recur (next r))\n               true)))))", "problem": 83, "user": "4f0b0834535d0136e6c222fe"}, {"code": "(fn [ & x]\n    (let [g #(not (nil? (some %1 %2)))]\n      (and (g true? x)\n           (g false? x))))", "problem": 83, "user": "4f03688d535dcb61093f6aac"}, {"code": "not=", "problem": 83, "user": "4f048ebc535dcb61093f6bd2"}, {"code": "(fn [& a]\n  (if (reduce #(and %1 %2)true a)\n    false\n    (reduce #(or %1 %2) false a)))", "problem": 83, "user": "4f230dfbe4b0d66497709fe0"}, {"code": "(fn [& a] (and (not (every? true? a)) (not (every? false? a))))", "problem": 83, "user": "4f2c593ee4b0d6649770a053"}, {"code": "#(= 2 (count (set %&)))", "problem": 83, "user": "4f2d5f5de4b0d6649770a05a"}, {"code": "(fn [& s] \n  (if (and (some true? s) (not (every? true? s))) true false))", "problem": 83, "user": "4f03ebf7535dcb61093f6b7f"}, {"code": "#(and (not-every? true? %&) (not-every? false? %&))", "problem": 83, "user": "4f1d1d95535d64f603146488"}, {"code": "not=", "problem": 83, "user": "4f0446f9535dcb61093f6bb8"}, {"code": "(fn [& args]\n  (> (count (partition-by identity args)) 1))", "problem": 83, "user": "4e131443535d04ed9115e7d3"}, {"code": "(fn [& xs] (let [n (count xs) nt (count (filter true? xs))] (and (> n 0) (< nt n) (> nt 0))))", "problem": 83, "user": "4f2ef48be4b0d6649770a06c"}, {"code": "(fn [& a] (and \n            (not-every? true? a) \n            ((complement not-any?) true? a)))", "problem": 83, "user": "4f1d1299535d64f603146487"}, {"code": "not=", "problem": 83, "user": "4e6a5a32535d8ccf87e9fed0"}, {"code": "(fn [& args] (if (every? true? args) false (reduce #(or % %2) args)))", "problem": 83, "user": "4e8ad247535d65386fec2111"}, {"code": "not=", "problem": 83, "user": "4f04d312535dcb61093f6be7"}, {"code": "not=", "problem": 83, "user": "4e7dd982535db169f9c796ee"}, {"code": "(fn [& args]\n  (true? (and (some true? args) (not (every? true? args)))))", "problem": 83, "user": "4f31519ae4b0d6649770a086"}, {"code": "not=", "problem": 83, "user": "4e1248b1535d04ed9115e7cf"}, {"code": "#(if (and (not (every? identity %&)) (some identity %&)) true false)", "problem": 83, "user": "4dc1bd76535d020aff1edf8d"}, {"code": "(fn [hd & tl]\n  (not \n    (or \n      (every? true? (cons hd tl)) \n      (every? false? (cons hd tl)))))", "problem": 83, "user": "4f2e0369e4b0d6649770a064"}, {"code": "(fn [x & o] (let [arglist (conj o x)]\n    (and  (not \n           (reduce #(and %1 %2) arglist))\n          (reduce #(or %1 %2) arglist))))", "problem": 83, "user": "4f343e60e4b0e243712b1eb5"}, {"code": "#(= (count (distinct %&)) 2)", "problem": 83, "user": "4f0f01c0535d0136e6c22329"}, {"code": "#(and (not (not-any? not %&)) (not (nil? (some identity %&))))", "problem": 83, "user": "4f32a7f1e4b0d6649770a095"}, {"code": "(fn [s & arg]\n         (contains? (set arg) (not s)))", "problem": 83, "user": "4f359c7ee4b0e243712b1ec4"}, {"code": "not=", "problem": 83, "user": "4f341320e4b0e243712b1eb4"}, {"code": "(fn [& l] (and\n  (not (empty? (filter true? l)))\n  (not (empty? (filter false? l)))\n))", "problem": 83, "user": "4ef48422535dced4c769f236"}, {"code": "#(= (set %&) #{true false})", "problem": 83, "user": "4f34eb87e4b0e243712b1eba"}, {"code": "(complement (fn [& xs] (or (every? #(= true %) xs) (every? #(= false %) xs))))", "problem": 83, "user": "4eb9353f535dfed6da9c6d4e"}, {"code": "#(true? (and \n  (some true? (seq %&)) \n  (some false? (seq %&))\n ))", "problem": 83, "user": "4f31ad57e4b0d6649770a089"}, {"code": "(fn [& params]\n  (and (< 0 (count (filter identity params)))\n       (not (= (count params) (count (filter identity params))))))", "problem": 83, "user": "4edffe54535d10e5ff6f5347"}, {"code": "(fn [& args]\n  (let [ts (count (filter true? args))\n        fs (count (filter false? args))]\n   (and (> ts 0) (> fs 0))))", "problem": 83, "user": "4f06f953535dcb61093f6c1c"}, {"code": "(fn [& args]\n  (let [x (and (some true? args) (not (every? true? args)))]\n    (if (nil? x) false x)\n    )\n  )", "problem": 83, "user": "4f2582bae4b0d66497709ff6"}, {"code": "#(< 1 (count (distinct %&)))", "problem": 83, "user": "4f3444b7e4b0e243712b1eb6"}, {"code": "(fn [& v] (true? (and (some true? v) (some false? v))))", "problem": 83, "user": "4e58c019535d8a8b8723a297"}, {"code": "(fn [& args]\n  (true? \n    (and\n      (not-every? true? args)\n      (some true? args))))", "problem": 83, "user": "4f1bee08535d64f60314647e"}, {"code": "(fn [& preds] (and (reduce #(or %1 %2) false preds) (reduce #(or %1 (not %2)) false preds)))", "problem": 83, "user": "4f2aff4de4b0d6649770a044"}, {"code": "(fn half-truth [x & xs] \r\n  (let [c (conj xs x)]\r\n      (#(if (nil? %) false %)\r\n        (and\r\n          (not-every? true? c)\r\n          (some true? c)))))", "problem": 83, "user": "4f378631e4b0e243712b1ed3"}, {"code": "(fn [& bools] (= 2 (count (distinct bools))))", "problem": 83, "user": "4f339c04e4b0d6649770a09c"}, {"code": "not=", "problem": 83, "user": "4f2c2ccbe4b0d6649770a050"}, {"code": "(fn [& x]\n  (= #{true false} (set x) ))", "problem": 83, "user": "4f38d6bbe4b0e243712b1ee2"}, {"code": "(fn [& s] \n  (true? \n    (and \n      (some identity s) \n      (not-every? identity s))))", "problem": 83, "user": "4f36f5f2e4b0e243712b1ece"}, {"code": "(fn [& p]\n  (not (or (every? true? p) (every? false? p))))", "problem": 83, "user": "4f29eb2ae4b0d6649770a037"}, {"code": "(fn [& bools]\n  (let [allTrue (reduce #(and %1 %2) bools)\n        oneTrue (reduce #(or %1 %2) bools)]\n  (and (not allTrue) oneTrue)))", "problem": 83, "user": "4f28c979e4b0d6649770a01a"}, {"code": "(fn [& xs]\n  (loop [xs xs acc1 false acc2 false]\n    (if (empty? xs)\n      (and acc1 acc2)\n      (recur (rest xs) (if (first xs) true acc1)\n                        (if (not (first xs)) true acc2)))))", "problem": 83, "user": "4f038499535dcb61093f6b09"}, {"code": "(fn [& xs]\n  (let [filt-count (count (filter true? xs))]\n    (if (and (> filt-count 0) (< filt-count (count xs)))\n      true\n      false)))", "problem": 83, "user": "4e1b8106535d04ed9115e801"}, {"code": "not=", "problem": 83, "user": "4f404b15e4b0e243712b1faf"}, {"code": "(fn half-truth [& args]\n  (let [groupped (group-by #(= true % ) args)]\n    (and (not (empty? (groupped true)))\n         (not (empty? (groupped false))))))", "problem": 83, "user": "4f422e49e4b0d7d3c9f3fcf7"}, {"code": "(fn [& a]\n  (boolean (and \n              (some #(boolean %) a) \n              (some #(not (boolean %)) a))))", "problem": 83, "user": "4f418eaee4b0d7d3c9f3fce9"}, {"code": "not=", "problem": 83, "user": "4ef77edb535dced4c769f254"}, {"code": "(fn [& xs] (not (every? (fn [[a b]] (= a b)) (partition 2 1 xs))))", "problem": 83, "user": "4f4274f2e4b0d7d3c9f3fd00"}, {"code": "(fn [& s]\n    (boolean (and (some true? s)\n         (some false? s))))", "problem": 83, "user": "4f404dcee4b0e243712b1fb0"}, {"code": "(fn [ & xs ] (true? (and (some identity xs) (some not xs))))", "problem": 83, "user": "4f426a7ae4b0d7d3c9f3fcff"}, {"code": "(fn [& more] (= (count (distinct (seq more)))2))", "problem": 83, "user": "4f4003d9e4b0e243712b1fa5"}, {"code": "(fn [& args] (if (= 2 (count (distinct args))) true false))", "problem": 83, "user": "4e6ec58c535d5021c1a89611"}, {"code": "(fn [& args]\r\n  (> (count (distinct args)) 1))", "problem": 83, "user": "4eb66737535d7eef3080736b"}, {"code": "not=", "problem": 83, "user": "4ec49231535dcc7ae8597d63"}, {"code": "(fn [& x] (and (if (some true? x) true false) (not-every? true? x)))", "problem": 83, "user": "4f40f055e4b0e243712b1fc2"}, {"code": "(fn [& xs]\n  (not (not (and (some true? xs)\n            (not (every? true? xs))))))", "problem": 83, "user": "4f474f43e4b0d56e7bb92bb7"}, {"code": "(fn [& args] (true? (and (some true? args) (some false? args))))", "problem": 83, "user": "4f46df00e4b0d56e7bb92bac"}, {"code": "(fn ulna [& bools]                                                      \n  (and (not (reduce #(and %2 %1) bools))                              \n            (reduce #(or %2 %1) bools)))", "problem": 83, "user": "4f2baf1ae4b0d6649770a04c"}, {"code": "#(= #{true false} (set %&))", "problem": 83, "user": "4f38b7d9e4b0e243712b1ee0"}, {"code": "(fn [& xs] (= 2 (count (group-by true? (seq xs)))))", "problem": 83, "user": "4f17df72535d64f603146458"}, {"code": "(fn [& coll] (and (not-every? true? coll) (not (nil? (some true? coll)))))", "problem": 83, "user": "4f482e3be4b0d56e7bb92bd4"}, {"code": "(fn [& in]\n  (not= nil (and (some true? in) (some false? in))))", "problem": 83, "user": "4f3c772de4b0e243712b1f4c"}, {"code": "not=", "problem": 83, "user": "4f141dee535d64f603146434"}, {"code": "not=", "problem": 83, "user": "4f49e869e4b0d56e7bb92c02"}, {"code": "#(and (not-every? false? %&) (not-every? true? %&))", "problem": 83, "user": "4efd8b67535de96065cf5085"}, {"code": "not=", "problem": 83, "user": "4dd4f0a8535dae65d5c462e4"}, {"code": "(fn a-half-truth [& xs]\n  (boolean (and (some identity xs)\n                (not (every? identity xs)))))", "problem": 83, "user": "4eecc9ad535d93acb0a668b4"}, {"code": "not=", "problem": 83, "user": "4f4ac35ae4b0d56e7bb92c18"}, {"code": "not=", "problem": 83, "user": "4f39f902e4b0e243712b1efe"}, {"code": "not=", "problem": 83, "user": "4f17ab99535d64f603146457"}, {"code": "(fn [& coll]\n  (true? (and (some #{true} coll) (> (count (set coll)) 1))))", "problem": 83, "user": "4f4ba29ae4b03ad3f0c10c7a"}, {"code": "(fn [& x] (and (boolean (some true? x)) (not-every? true? x)))", "problem": 83, "user": "4f3ec266e4b0e243712b1f8c"}, {"code": "(fn [& ls] (nth '(true false) (rand-int 2)))", "problem": 83, "user": "4f03ba9c535dcb61093f6b58"}, {"code": "(fn [& bools]\n  (= true \n    (and (some #(= % true) bools) \n         (some #(= % false) bools))))", "problem": 83, "user": "4f4544e1e4b0d56e7bb92b7a"}, {"code": "not=", "problem": 83, "user": "4eae5fe4535d7eef30807325"}, {"code": "(fn [& coll] \n  (and (not (every? false? coll))\n       (not (every? true? coll))))", "problem": 83, "user": "4ebd4448535dfed6da9c6d8f"}, {"code": "not=", "problem": 83, "user": "4f4f0287e4b03ad3f0c10cd7"}, {"code": "(fn [& bools]\n  (letfn\n    [(some-val [bools value]\n       (boolean (some #(= % value) bools)))]\n    (and (some-val bools true)\n         (some-val bools false))))", "problem": 83, "user": "4f4e4ecbe4b03ad3f0c10cbf"}, {"code": "#(Boolean/valueOf (and (some identity %&) (not-every? identity %&)))", "problem": 83, "user": "4f4e91a9e4b03ad3f0c10cca"}, {"code": "not=", "problem": 83, "user": "4f4ff5a8e4b03ad3f0c10cf3"}, {"code": "(fn [& xs]\n       (if (and (not-every? true? xs) (some true? xs))\n   true\n\t false))", "problem": 83, "user": "4eae2f9e535d7eef30807324"}, {"code": "(fn [& bools] \n  (boolean (and \n    (some true? bools)\n    (some false? bools))))", "problem": 83, "user": "4db2f208535df7e46ed9b6c9"}, {"code": "(fn [& x] (= (count (set x)) 2))", "problem": 83, "user": "4f4f08c8e4b03ad3f0c10cd8"}, {"code": "(fn [a & b] \n  (and (not (nil? (some true? (cons a b))))\n       (not (every? true? (cons a b)))))", "problem": 83, "user": "4f50c414e4b03ad3f0c10d0d"}, {"code": "(fn not-all [& args]\n  (boolean (and (some true? args)\n                (not (every? true? args)))))", "problem": 83, "user": "4db8d37d535d1e037afb219c"}, {"code": "(fn f83 [& xs]\n    (= 2 (count (set xs))))", "problem": 83, "user": "4f4d0a52e4b03ad3f0c10c9d"}, {"code": "#(loop [b %& count 0 truecount 0]\n  (if (empty? b)\n      (false? (or (= count truecount) (zero? truecount)))\n      (recur (rest b) (+ 1 count) (if (true? (first b)) (+ 1 truecount) truecount))))", "problem": 83, "user": "4f4bbda0e4b03ad3f0c10c7b"}, {"code": "(fn [& args] (and (reduce #(or % %2) args) (not (reduce #(and % %2) args))))", "problem": 83, "user": "4ed1f84f535d44c135fd68d3"}, {"code": "#(boolean (and (some true? %&) (some false? %&)))", "problem": 83, "user": "4f4e7c01e4b03ad3f0c10cc9"}, {"code": "(fn [& args]\r\n    (boolean\r\n     (if (some boolean args)\r\n       (not-every? boolean args))))", "problem": 83, "user": "4f047177535dcb61093f6bc6"}, {"code": "(fn [& coll]\n  (true? (and (some true? coll) (some false? coll))))", "problem": 83, "user": "4f4c6b21e4b03ad3f0c10c8f"}, {"code": "not=", "problem": 83, "user": "4f3e6244e4b0e243712b1f85"}, {"code": "(fn [& x]\n  (let [ alltrue (reduce #(and %1 %2) true x)\n         orC (reduce #(or %1 %2) false x)]\n  (if alltrue \n    false \n    orC)))", "problem": 83, "user": "4ed60c9c535d10e5ff6f52dd"}, {"code": "(fn [& xs] (boolean (and (some true? xs) \n                        (some false? xs))))", "problem": 83, "user": "4f567cdbe4b0a7574ea71824"}, {"code": "(fn [& bs]\n  (and \n    (not-every? true? bs)\n    (not-every? false? bs)))", "problem": 83, "user": "4f569218e4b0a7574ea71826"}, {"code": "(fn [& x]\n  ( let [true-count (count (filter #(true? %1 ) x))\n         count (count x)]\n    (and (> true-count 0) (< true-count count))))", "problem": 83, "user": "4f29afc7e4b0d6649770a02e"}, {"code": "(fn [& args]\n  (and (true? (some true? args)) (not-every? true? args)))", "problem": 83, "user": "4f2893d0e4b0d6649770a019"}, {"code": "(fn [& xs] (< 0 (count (filter identity xs)) (count xs)))", "problem": 83, "user": "4f569a3ce4b0a7574ea71828"}, {"code": "(fn [& sq] \n   (let [c (count sq)\n         ts (count (remove #(= % false) sq))]\n   (if \n     (and \n       (= 1 c)) \n       (first sq)) \n     false \n     (and \n       (< 0 ts)\n       (not (= c ts)))))", "problem": 83, "user": "4db6ce85535d1e037afb217f"}, {"code": "(fn [& xs] (and (reduce #(or %1 %2)xs) (not (reduce #(and %1 %2) xs))))", "problem": 83, "user": "4f51e8a4e4b03ad3f0c10d2d"}, {"code": "(fn [& args]\n  (not\n    (or\n      (every? #(= true %) args)\n      (every? #(= false %) args))))", "problem": 83, "user": "4f5c0549e4b0030a34fb2b1a"}, {"code": "(fn [& args] (and (not (nil? (some true?  args)))\n                  (not (nil? (some false? args)))))", "problem": 83, "user": "4f5cc3b8e4b0030a34fb2b2b"}, {"code": "(fn [x & y]  \n   (if (every? #(= true %) (cons x y))\n     false\n     (if (some #(= true %) (cons x y))\n       true\n       false)))", "problem": 83, "user": "4f1684c7535d64f60314644b"}, {"code": "(fn [& s]\n  (loop [trues 0\n         falses 0\n         remain s]\n     (if (and (> trues 0) (> falses 0)) true\n         (if (empty? remain) false\n           (let [nxt (first remain)]\n             (if nxt \n                (recur (inc trues) falses (rest remain))\n                (recur trues (inc falses) (rest remain))\n))))))", "problem": 83, "user": "4f036fb3535dcb61093f6ac8"}, {"code": "(fn [& args]\n  (if (every? false? args) false\n      (and (not (every? true? args))\n           (some true? args))))", "problem": 83, "user": "4f504739e4b03ad3f0c10d00"}, {"code": "(fn [& args]\n  (and (not (reduce #(and %1 %2) args)) (reduce #(or %1 %2) args)))", "problem": 83, "user": "4dd9d299535d2dad7130b5dd"}, {"code": "(fn [& coll] (if (nil? (and (some true? coll) (some false? coll))) false true))", "problem": 83, "user": "4f57a153e4b0a7574ea7183a"}, {"code": "(fn [& vals]\n  (boolean (and (some true? vals)\n  (not (every? true? vals)))))", "problem": 83, "user": "4f590356e4b0a7574ea71860"}, {"code": "(fn ([b] (not b))\n    ([b1 b2] (or b1 b2))\n    ([b1 b2 b3] (not (and b1 b2 b3)))\n    ([b1 b2 b3 b4] (and b1 b2 b3 (not b4))))", "problem": 83, "user": "4e7f5a0b535db966e863cc41"}, {"code": "(fn halftruth [f & r]\n  (if f\n    (not (nil? (some false? r)))\n    (not (nil? (some true? r)))))", "problem": 83, "user": "4f03fb59535dcb61093f6b89"}, {"code": "(fn [& x] (true? (and (some true? x) (not (every? true? x)))))", "problem": 83, "user": "4f559d2ce4b0a7574ea71808"}, {"code": "(fn [& lst]\n(and (not (every? true? lst))\n     (not (nil? (some true? lst)))))", "problem": 83, "user": "4f629697e4b0defedf855fd6"}, {"code": "(fn [& m]\n  (true? (and (some true? m) (some false? m)))\n)", "problem": 83, "user": "4f63777be4b0defedf855fe4"}, {"code": "not=", "problem": 83, "user": "4e1fe7f1535d04ed9115e810"}, {"code": "(fn [& c] (> (count (distinct c)) 1))", "problem": 83, "user": "4ecbb249535df97575fdabdf"}, {"code": "#(if \r\n  (or (= (count %&) (count (filter true? %&))) \r\n      (= 0 (count (filter true? %&))))\r\n  \t false\r\n\t\t true)", "problem": 83, "user": "4f4ec77ae4b03ad3f0c10cd0"}, {"code": "(fn [ & bs] (boolean \n(  and \n  (some #(= true %) bs)\n  \t(not (every? #(= true %) bs))\n  ))\n)", "problem": 83, "user": "4f51697ae4b03ad3f0c10d22"}, {"code": "(fn [& bools]\n  (and (= true (some true? bools))\n       (not (every? true? bools))))", "problem": 83, "user": "4f62b29ce4b0defedf855fd9"}, {"code": "#(= (count (set %&)) 2)", "problem": 83, "user": "4f58fe71e4b0a7574ea7185f"}, {"code": "(fn [& x] (= 2 (count (distinct x))))", "problem": 83, "user": "4ed845a8535d10e5ff6f52f8"}, {"code": "#(and \n  (not-every? true? %&)\n  (not-every? false? %&))", "problem": 83, "user": "4df8644f535d04ed9115e778"}, {"code": "(fn [& more] (and (reduce #(or %1 %2) more) (not (reduce #(and %1 %2) more))))", "problem": 83, "user": "4e2164ff535d04ed9115e815"}, {"code": "#(true? (and (some false? %&) (some true? %&)))", "problem": 83, "user": "4ede361a535d10e5ff6f5332"}, {"code": "#(if (every? true? %&)\n  false\n\t(if (some true? %&)\n\ttrue\n\tfalse\n\t)\n)", "problem": 83, "user": "4f4bd422e4b03ad3f0c10c7e"}, {"code": "(fn [& coll] (< 1 (count (partition-by true? coll))))", "problem": 83, "user": "4f6b4237e4b07046d9f4efa9"}, {"code": "(fn [x & xs] (not-every? (partial = x) (cons x xs)))", "problem": 83, "user": "4ddc56e1535d02782fcbea04"}, {"code": "(fn goober [& b]\n  (if (= (count (filter true? b)) (count b))\n    false\n    (if (= (count (filter false? b)) (count b))\n      false\n      true)))", "problem": 83, "user": "4f70183ee4b07046d9f4eff3"}, {"code": "not=", "problem": 83, "user": "4eb8ec4a535dfed6da9c6d4b"}, {"code": "not=", "problem": 83, "user": "4f6fbb68e4b07046d9f4efeb"}, {"code": "#(boolean (and (some true? %&) (some false? %&)))", "problem": 83, "user": "4f6160a7e4b0defedf855fbe"}, {"code": "(fn [& x] (not (nil? (and (some true? x) (some false? x)))))", "problem": 83, "user": "4f6ba647e4b07046d9f4efaf"}, {"code": "not=", "problem": 83, "user": "4eb298c1535d7eef3080734b"}, {"code": "(fn [& args] (let [l (sort args)] (not= (first l) (last l))))", "problem": 83, "user": "4f69f34fe4b07046d9f4ef90"}, {"code": "#(= 2 (count (set %&)))", "problem": 83, "user": "4f6845d2e4b07046d9f4ef74"}, {"code": "not=", "problem": 83, "user": "4f734e93e4b07046d9f4f043"}, {"code": "(fn [& l]\n  (if (and (some true? l) (not (every? true? l)))\n      true false))", "problem": 83, "user": "4e568873535d8a8b8723a283"}, {"code": "not=", "problem": 83, "user": "4f6688d6e4b07046d9f4ef5d"}, {"code": "(fn [x & r](->> r (drop-while #(= x %)) empty? not))", "problem": 83, "user": "4f7869c2e4b0fbe0118ec589"}, {"code": "not=", "problem": 83, "user": "4f6a2ff2e4b07046d9f4ef98"}, {"code": "(fn [& args] \n  (if \n    (and (some true? args) (some false? args)) \n  true false))", "problem": 83, "user": "4f68c485e4b07046d9f4ef7c"}, {"code": "#(= #{true false} (set %&))", "problem": 83, "user": "4f725201e4b07046d9f4f02f"}, {"code": "(fn [& args] (true? (and (some true? args) (some false? args))))", "problem": 83, "user": "4f7207d3e4b07046d9f4f019"}, {"code": "(fn [& col](not \n  (empty? \n    (rest (set col) )\n  )\n)\n)", "problem": 83, "user": "4f6d9d7ee4b07046d9f4efcd"}, {"code": "(fn [& args]\n  (if (reduce #(and %1 %2) args) false\n  (reduce #(not (= %1 %2))  args)))", "problem": 83, "user": "4f3242bae4b0d6649770a08f"}, {"code": "(fn [& xs] (let [c (count (filter true? xs))] (and (> c 0) (< c (count xs)))))", "problem": 83, "user": "4f7d75a2e4b06e829148e1c2"}, {"code": "#(= (set %&) #{true false})", "problem": 83, "user": "4f7d5328e4b06e829148e1bf"}, {"code": "(fn [& args]\n  (if (and (some false? args) (some true? args)) true false))", "problem": 83, "user": "4f7e29dde4b06e829148e1ca"}, {"code": "(fn [& args]\n  (= #{false true} (set args)))", "problem": 83, "user": "4f7fc9a1e4b033992c121bee"}, {"code": "(fn [& bools]\n  (every? true?\n    [(some true? bools)\n     (not-every? true? bools)]))", "problem": 83, "user": "4f831fd3e4b033992c121c17"}, {"code": "(fn [& a] (not (or (every? true? a) (every? false? a))))", "problem": 83, "user": "4f8345c6e4b033992c121c1b"}, {"code": "not=", "problem": 83, "user": "4f7b6f12e4b06e829148e1a5"}, {"code": "(fn [& bools]\r\n     (if (= 2 (count (distinct bools)))\r\n       true\r\n       false))", "problem": 83, "user": "4f82e14be4b033992c121c0c"}, {"code": "(fn [& args]\n  (and (reduce #(or %1 %2) args)\n  (not (reduce #(and %1 %2) args)))\n)", "problem": 83, "user": "4f7b6b90e4b06e829148e1a4"}, {"code": "(fn onetrue [& bs]\n  (and \n    (> (count (filter #(= true %1) bs)) 0)\n    (> (count bs) (count (filter #(= true %1) bs)))\n  )\n)", "problem": 83, "user": "4f84400de4b033992c121c2e"}, {"code": "#(> (count %&) (count (filter true? %&)) 0)", "problem": 83, "user": "4dc78527535d8a4b2fd7428f"}, {"code": "(fn [& param] (and (not-every? not param) (not-every? identity param)))", "problem": 83, "user": "4f528bcde4b03ad3f0c10d3e"}, {"code": "(fn [& col] (= 2 (count (set col))))", "problem": 83, "user": "4f83665ee4b033992c121c1c"}, {"code": "(fn [& args] (= false (or (every? true?  args) (every? false? args))))", "problem": 83, "user": "4f7c2ac4e4b06e829148e1ad"}, {"code": "not=", "problem": 83, "user": "4f88ae35e4b033992c121c6d"}, {"code": "(fn foo\n  ([x] false)\n  ([x & y] (if (nil? (some #(= (not x) %) y))\n            false true)))", "problem": 83, "user": "4f8b20fce4b02e764a0a5178"}, {"code": "(fn testing [& args]\n  (if (every? false? args)\n    false\n    (if (every? true? args)\n      false\n      true)))", "problem": 83, "user": "4f601623e4b0defedf855fa3"}, {"code": "(fn [& args] (and\n  (not (every? true? args))\n  (not (= nil (some true? args)))\n))", "problem": 83, "user": "4f8b56dae4b02e764a0a517e"}, {"code": "#(= 2 (count (distinct %&)))", "problem": 83, "user": "4f017b4e535dcb61093f6a37"}, {"code": "(fn [& x]\r\n  (not (or\r\n    (every? identity x)\r\n    (every? #(not %) x))))", "problem": 83, "user": "4e89dbce535d3e98b8023283"}, {"code": "(fn [& bools] (= (and (some true? bools) (some false? bools)) true))", "problem": 83, "user": "4f7f0827e4b06e829148e1d5"}, {"code": "(fn [& l] (let [x  (map #(if % 1 0) l) m (apply * x) s (apply + x)] (and (pos? s) (zero? m))))", "problem": 83, "user": "4f8c5f4fe4b02e764a0a5198"}, {"code": "#(and (not (not-any? true? %&)) (not-every? true? %&))", "problem": 83, "user": "4f9597e0e4b0dcca54ed6cd4"}, {"code": "(fn [& s]\n  (let [t (reduce #(or %1 %2) false s)\n        f (reduce #(or %1 (not %2)) false s)]\n    (and t f)))", "problem": 83, "user": "4f9120d8e4b0dcca54ed6c96"}, {"code": "(fn [& args] (if (and (some true? args) (not-every? true? args)) true false))", "problem": 83, "user": "4f71ba6ee4b07046d9f4f012"}, {"code": "#(true? (and (some true? %&) (some false? %&)))", "problem": 83, "user": "4f95900ce4b0dcca54ed6cd3"}, {"code": "not=", "problem": 83, "user": "4f727023e4b07046d9f4f035"}, {"code": "#(> (count (distinct %&)) 1)", "problem": 83, "user": "4f7f9665e4b033992c121bea"}, {"code": "(fn [& args]\r\n  (if (and (some true? args) (not (every? true? args)))\r\n    true false))", "problem": 83, "user": "4f969214e4b0dcca54ed6cdd"}, {"code": "(fn [& s]\n  (and\n    (not (every? true? s))\n    (not (not-any? true? s))))", "problem": 83, "user": "4f951375e4b0dcca54ed6cc8"}, {"code": "(fn [& b] (and (or (some true? b) false) (not (every? true? b))))", "problem": 83, "user": "4f8ac2bde4b02e764a0a5172"}, {"code": "(fn [& x] (true? (and (not-every? true? x) (some #{true} x))))", "problem": 83, "user": "4e778d36535d324fb2983d71"}, {"code": "#(and (boolean (some true? %&))\n      (not-every? true? %&))", "problem": 83, "user": "4dc21233535d020aff1edf92"}, {"code": "(fn [& x]\n           (let [y (distinct x)]\n             (if (= (count y) 1)\n                 false\n                 true\n                 )))", "problem": 83, "user": "4f3cd535e4b0e243712b1f56"}, {"code": "(fn [& bools] (true? (and (some  true? bools)\n                   (some false? bools))))", "problem": 83, "user": "4f9754d4e4b0dcca54ed6ce9"}, {"code": "(comp (partial every? identity)\n      (juxt (partial some true?)\n            (partial not-every? true?))\n      list)", "problem": 83, "user": "4f3fb586e4b0e243712b1f9c"}, {"code": "(fn [& b] (= (set b) #{true false}))", "problem": 83, "user": "4f991ec1e4b0dcca54ed6cfb"}, {"code": "(fn [& coll] (> (count (partition-by identity (sort coll))) 1))", "problem": 83, "user": "4f98ead0e4b0dcca54ed6cf8"}, {"code": "(fn [& args] \r\n    (not \r\n      (or \r\n        (every? true? args)\r\n        (every? false? args))))", "problem": 83, "user": "4f0da4e4535d0136e6c22319"}, {"code": "(fn arity [& xs] (and (not (not-any? identity xs)) (not (every? identity xs))))", "problem": 83, "user": "4f748b54e4b044e54cd9a8fa"}, {"code": "(fn [& r] (and (not-every? true? r) (not-every? false? r)))", "problem": 83, "user": "4f97d8f3e4b0dcca54ed6ced"}, {"code": "(fn fred [& bools]\n    (and\n    (> (count (filter true? bools)) 0)\n    (> (count (filter false? bools)) 0))\n)", "problem": 83, "user": "4f8ea1f7e4b0d4e659cdde69"}, {"code": ";(fn [ & coll] (let  [sum (apply + (map #(if % 1 0) coll))\n;       c  (count coll)] \n;  (if (and (>= sum 1) (not= sum c)) true false)))\nnot=", "problem": 83, "user": "4e86d3cf535dceadca46984c"}, {"code": "not=", "problem": 83, "user": "4f954dbce4b0dcca54ed6ccd"}, {"code": "not=", "problem": 83, "user": "4f9fe2b9e4b0dcca54ed6d40"}, {"code": "(fn [& s]\n    (boolean\n     (and\n      (not-every? identity s)\n      (some identity s))))", "problem": 83, "user": "4db3393e535df7e46ed9b6cc"}, {"code": "#(boolean\n  (and (some identity %&)\n       (not-every? identity %&)))", "problem": 83, "user": "4f9d53f3e4b0dcca54ed6d21"}, {"code": "(fn [& bools]\n  (boolean\n    (and (some true? bools)\n         (not-every? true? bools))))", "problem": 83, "user": "4f969a66e4b0dcca54ed6cde"}, {"code": "#(if\n  (and\n    (some true? %&)\n    (some false? %&))\n  true\n  false)", "problem": 83, "user": "4f8db862e4b02e764a0a51b2"}, {"code": "(fn [ & args]\n    (and\n      (boolean (some true? args))\n      (boolean (some false? args))))", "problem": 83, "user": "4fa2fa5ee4b081705acca186"}, {"code": "#(true? \r\n  (and\r\n    (some true? %&)\r\n    (some false? %&)))", "problem": 83, "user": "4f7d25b4e4b06e829148e1ba"}, {"code": "(fn [& c]\n  (cond\n    (every? true? c) false\n    (every? false? c) false\n    (not-any? true? c) false\n    :else true))", "problem": 83, "user": "4f9f7daae4b0dcca54ed6d37"}, {"code": "(fn [& lst]\n  (let [sum (apply + (map #(if % 1 0) lst))]\n    (if (or (zero? sum) (= sum (count lst)))\n      false true)))", "problem": 83, "user": "4f71347ae4b07046d9f4f009"}, {"code": "(fn [& xs] \n  (boolean\n    (and\n      (some identity xs)\n      (some not xs))))", "problem": 83, "user": "4fa5406fe4b081705acca1ac"}, {"code": "not=", "problem": 83, "user": "4f40ccd9e4b0e243712b1fc0"}, {"code": "(fn [& args]\n   (if (or (not-any? #(= true %) args)\n           (not-any? #(= false %) args))\n     false true))", "problem": 83, "user": "4fa0a4b1e4b0dcca54ed6d4f"}, {"code": "(fn [& p] (= 2 (count (distinct p))))", "problem": 83, "user": "4fa30027e4b081705acca187"}, {"code": "(fn [& a] (every? true? (map #(some % a) [true? false?])))", "problem": 83, "user": "4f465096e4b0d56e7bb92b9a"}, {"code": "#(not (not (and (some not %&) (some identity %&))))", "problem": 83, "user": "4fa6d532e4b081705acca1be"}, {"code": "not=", "problem": 83, "user": "4f410b63e4b0e243712b1fc5"}, {"code": "#(if (and (not-every? true? %&) (some true? %&)) true false)", "problem": 83, "user": "4f9acea6e4b0dcca54ed6d10"}, {"code": "(fn [& xs] (and (if (= nil (some identity xs)) false true) (not-every? identity xs)))", "problem": 83, "user": "4fa7b013e4b081705acca1c8"}, {"code": "(fn \n  [& args] (reduce #(false? (or %1 %2)) false args))", "problem": 83, "user": "4fa39b3ee4b081705acca191"}, {"code": "#(and (not-every? false? %&) (not-every? true? %&))", "problem": 83, "user": "4e65f9d4535d8ccf87e9fe73"}, {"code": "(fn [& args] (and (boolean (some identity args)) (not-every? identity args)))", "problem": 83, "user": "4fa820fde4b081705acca1ce"}, {"code": "(fn half-truth [& coll]\n  (not (nil? (and (some true? coll)\n                  (some false? coll)))))", "problem": 83, "user": "4fab336be4b081705acca216"}, {"code": "(fn [& x] (and (not-every? true? x) (not-every? false? x)))", "problem": 83, "user": "4faa9593e4b081705acca1f9"}, {"code": "(fn halfTruth [& many] (let [x (set (apply vector many))] (if (contains? x true) \n(if (contains? x false) true false) false)))", "problem": 83, "user": "4f9336ece4b0dcca54ed6cb7"}, {"code": "not=", "problem": 83, "user": "4facd2fae4b081705acca22f"}, {"code": "(fn kind-a-true [b & others]\n  (if (empty? others)\n\t false\n\t (and\n\t \t(or b (apply kind-a-true others))\n\t \t(not (and b (apply kind-a-true others)))\n\t )\n\t)\n)", "problem": 83, "user": "4faacc04e4b081705acca201"}, {"code": "#(true? (and (not (every? identity %&)) (some identity %&)))", "problem": 83, "user": "4fabb1dce4b081705acca21a"}, {"code": "(fn [& more]\n  (and\n    (reduce #(or %1 %2) more)\n    (not (reduce #(and %1 %2) more))))", "problem": 83, "user": "4faccddae4b081705acca22e"}, {"code": "not=", "problem": 83, "user": "4facff22e4b081705acca230"}, {"code": "(fn [& v] (not (or (every? identity v) (every? not v))))", "problem": 83, "user": "4fae258de4b081705acca246"}, {"code": "#(= 2 (count (set %&)))", "problem": 83, "user": "4f9970b3e4b0dcca54ed6cfd"}, {"code": "(fn [& args] (and (reduce #(or %1 %2) args) (not (reduce #(and %1 %2) args))))", "problem": 83, "user": "4fa67030e4b081705acca1b7"}, {"code": "(fn [& n] (not (or (every? true? n) (every? false? n))))", "problem": 83, "user": "4fab31a8e4b081705acca215"}, {"code": "#(and (or (some true? %&) false)\n      (or (some false? %&) false))", "problem": 83, "user": "4f301d02e4b0d6649770a072"}, {"code": "#(and (not (every? true? %&)) (not (every? false? %&)))", "problem": 83, "user": "4fad33e8e4b081705acca236"}, {"code": "not=", "problem": 83, "user": "4fadbc3fe4b081705acca23f"}, {"code": "(fn [& args](= 2 (count (distinct args))))", "problem": 83, "user": "4fb069b1e4b081705acca266"}, {"code": "#(not= nil (and (some identity %&) (some not %&)))", "problem": 83, "user": "4fad77a6e4b081705acca23a"}, {"code": "(fn [& e]\n  (if (not-every? true? e)\n    (if (some true? e) true false)\n    false))", "problem": 83, "user": "4f8386c5e4b033992c121c1d"}, {"code": "(fn [& q] \n  (and \n    (true? (some true? q))\n    (not-every? true? q)))", "problem": 83, "user": "4eb59464535d7eef30807369"}, {"code": "(fn [& v] (if (and (some identity v) (some not v)) true false))", "problem": 83, "user": "4fb2101ce4b081705acca284"}, {"code": "(fn [& xs]\n  (boolean \n    (and\n      (some true? xs)\n      (some false? xs)\n    )\n  )\n)", "problem": 83, "user": "4f91f5b1e4b0dcca54ed6ca7"}, {"code": "(fn [& bs]\n  (loop [b (first bs) rbs (rest bs) ht false at true]\n    (let [ht (or b ht) at (and b at)]\n      (if (empty? rbs)\n        (and ht (not at))\n        (recur (first rbs) (rest rbs) ht at)))))", "problem": 83, "user": "4fb4099be4b081705acca2a9"}, {"code": "(fn [& x]\n  (not (contains? #{0, (count x)} (count (filter true? x)))))\n;; this works:\n;; not=", "problem": 83, "user": "4f82ed48e4b033992c121c0e"}, {"code": "(fn [x & y]\r\n  (let [z (cons x y)]\r\n    (if (every? true? z) false (if (not-any? true? z) false true))))", "problem": 83, "user": "4fa85ae4e4b081705acca1d3"}, {"code": "(fn [& args] \n  (if (some false? args) \n    (if (some true? args) true false) \n    false))", "problem": 83, "user": "4faec810e4b081705acca24e"}, {"code": "(fn [& bs]\n  (and (or (some identity bs) false)\n       (not (every? identity bs))))", "problem": 83, "user": "4f9a0064e4b0dcca54ed6d03"}, {"code": "#(true? (and (some true? %&) (some false? %&)))", "problem": 83, "user": "4fb54e50e4b081705acca2bb"}, {"code": "#(not (or (every? true? %&) (every? false? %&)))", "problem": 83, "user": "4fa9e9c6e4b081705acca1e9"}, {"code": "(fn [& xs]\n  (and \n    (reduce (fn [a b] (or a b)) xs) \n    (not (reduce (fn [a b] (and a b)) xs))))", "problem": 83, "user": "4e83bb61535db62dc21a62dd"}, {"code": "#(= true (and (some true? %&) (some false? %&)))", "problem": 83, "user": "4f1abbfb535d64f60314646e"}, {"code": "(fn [& args] (and (reduce #(or %1 %2) args) (not (reduce #(and %1 %2) args))))", "problem": 83, "user": "4fa78336e4b081705acca1c4"}, {"code": "(fn [& xs] \n  (let [all (every? true? xs)\n        any (not-every? false? xs)]\n  (if all false any)))", "problem": 83, "user": "4fa6a491e4b081705acca1bc"}, {"code": "not=", "problem": 83, "user": "4fb3b865e4b081705acca2a2"}, {"code": "(fn [& xs] (= 2 (count (distinct xs))))", "problem": 83, "user": "4fb65f2fe4b081705acca2c7"}, {"code": "(fn foo [& more]\n  (true? (and (some true? more) (not-every? true? more))))", "problem": 83, "user": "4faac363e4b081705acca200"}, {"code": "(fn [& bs] (true? (and (some true? bs) (not (every? true? bs)))))", "problem": 83, "user": "4ee85476535d93acb0a6687c"}, {"code": "(fn\n  [& bools]\n  (cond\n    (every? true? bools) false\n    (every? false? bools) false\n    :else true))", "problem": 83, "user": "4f18677d535d64f603146459"}, {"code": "(fn [& s]\n  (not (or (every? true? s) (every? false? s))))", "problem": 83, "user": "4dadb890c9a9d6ed3599dc57"}, {"code": "(fn [& lst] (and (not-every? boolean lst) (not-every? not lst)))", "problem": 83, "user": "4fba7d1ee4b081705acca2e0"}, {"code": "(fn [b & bs] \n  (true? \n    (#(and (some true? %) \n           (some false? %)) \n      (conj bs b))))", "problem": 83, "user": "4f725466e4b07046d9f4f030"}, {"code": "(fn[& x](= (count (set x)) 2))", "problem": 83, "user": "4fb3dd1ee4b081705acca2a5"}, {"code": "(fn[& more]\n  (cond \n    (every? true? more) false\n    (some  true? more) true\n    :else false\n  ))", "problem": 83, "user": "4fc18846e4b081705acca331"}, {"code": "(fn [& v] (and (not-every? false? v) (not-every? true? v)))", "problem": 83, "user": "4fc0853ae4b081705acca327"}, {"code": "#(and (not-every? true? %&) (not-every? false? %&))", "problem": 83, "user": "4faa6184e4b081705acca1f1"}, {"code": "(fn [& args] (let [s (sort args)]\n                (if (not= (first s) (last s)) true false)))", "problem": 83, "user": "4fb86dc9e4b081705acca2d8"}, {"code": "not=", "problem": 83, "user": "4fbd12a5e4b081705acca2fd"}, {"code": "(fn [& args]\n  (and (or (some true? args) false)\n       (not-every? true? args)))", "problem": 83, "user": "4fbe42b7e4b081705acca30f"}, {"code": "(fn [& args] (and (not (reduce #(and % %2) true args))\n                  (reduce #(or % %2) false args)))", "problem": 83, "user": "4fc6104ae4b0ee37620e1808"}, {"code": "(fn [& args]\n  (->>\n    (into #{} args)\n    count\n    (= 2)))", "problem": 83, "user": "4fb1d907e4b081705acca282"}, {"code": "#(= 2 (count (distinct %&)))", "problem": 83, "user": "4faafccde4b081705acca209"}, {"code": "not=", "problem": 83, "user": "4fc4eadee4b081705acca353"}, {"code": "(fn [& e] (true? (and (some true? e) (some false? e))))", "problem": 83, "user": "4fc0221ce4b081705acca322"}, {"code": "not=", "problem": 83, "user": "4fabbb97e4b081705acca21d"}, {"code": "(fn [& l]\n  (not (apply = l)))", "problem": 83, "user": "4fc8c8d8e4b0ee37620e183b"}, {"code": "(fn [& args]\n  (if (= 2 (count (set args))) true false))", "problem": 83, "user": "4f73f78de4b044e54cd9a8f3"}, {"code": "(fn [& bools] (true? (and (some true? bools) (some false? bools))))", "problem": 83, "user": "4fc7db47e4b0ee37620e182a"}, {"code": "#(and (not-every? (partial = false) %&)\n      (not-every? (partial = true) %&))", "problem": 83, "user": "4fca1cd6e4b0ee37620e184c"}, {"code": "(fn [& x] (and (reduce #(or %1 %2) x) (not (reduce #(and %1 %2) x))))", "problem": 83, "user": "4fcaf7a4e4b0ee37620e1857"}, {"code": "(fn [& r] (if (some true? r)\n(if (every? true? r)\n'false\n'true)\n'false))", "problem": 83, "user": "4fa9da14e4b081705acca1e7"}, {"code": "(fn [& args]\n  (> (count (partition-by identity args)) 1))", "problem": 83, "user": "4f7431d2e4b044e54cd9a8f7"}, {"code": "#(and \n  (= true (some false? %&))\n  (= true (some true? %&)))", "problem": 83, "user": "4fb2f9b2e4b081705acca294"}, {"code": "#(= #{true false} (set %&))", "problem": 83, "user": "4fc67081e4b0ee37620e1813"}, {"code": "not=", "problem": 83, "user": "4ee77f15535d93acb0a66868"}, {"code": "(fn [ & b ]\n  (boolean (and (some #(true? %) b) (some #(false? %) b)))\n)", "problem": 83, "user": "4fcad14ce4b0ee37620e1856"}, {"code": "(fn [& args] (and (reduce #(or %1 %2) args) \r\n                  (not (every? true? args))))", "problem": 83, "user": "4fb37882e4b081705acca2a0"}, {"code": "(fn f [& c] (and (true? (some true? c)) (not-every? true? c )))", "problem": 83, "user": "4fccdc75e4b0ee37620e186d"}, {"code": "(fn [ & bb ] (= 2 (count ( keys (frequencies bb)))) )", "problem": 83, "user": "4f030775535dcb61093f6a43"}, {"code": "not=", "problem": 83, "user": "4f2f6678e4b0d6649770a06e"}, {"code": "#(and \n  (not-every? identity %&)\n  (not-every? not %&))", "problem": 83, "user": "4fce5474e4b0d4b2a7a9d451"}, {"code": "(fn [f & bools]\n  (if f\n    (not-every? true? bools)\n    (not-every? false? bools)))", "problem": 83, "user": "4fbb9d80e4b081705acca2ea"}, {"code": "not=", "problem": 83, "user": "4dae0510c9a9d6ed4b99dc57"}, {"code": "(fn [& r]\n  (and\n    (reduce #(or %1 %2) r)\n    (not (reduce #(and %1 %2) r)))\n)", "problem": 83, "user": "4ec56b5b535d6d7199dd369f"}, {"code": "#(= 2 (count (distinct %&)))", "problem": 83, "user": "4f826548e4b033992c121c08"}, {"code": "(fn[& coll]\n  (and (reduce #(or %1 %2) coll) (not (reduce #(and %1 %2) coll)) )\n)", "problem": 83, "user": "4fc7b079e4b0ee37620e1827"}, {"code": "(fn [& args] (not (not (and (some identity args) (some not args)))))", "problem": 83, "user": "4fcebce4e4b03432b189f404"}, {"code": "(fn [& xs]\n  (let [ numt  (reduce (fn [a i]                                                                                                                                                              \n                      (if i                                                                                                                                                                   \n                        (+ 1 a)\n                        a)) 0 xs )]\n  (and (> numt 0) (< numt (count xs))) ))", "problem": 83, "user": "4fbd292fe4b081705acca300"}, {"code": "(fn [& b]\n  (if (= nil (and (some identity b) (some #(not (identity %)) b)))\n  false\n  true))", "problem": 83, "user": "4fb79872e4b081705acca2d2"}, {"code": "not=\n\n;(fn [& c]\n;  (true? (and (some true? c) (not-every? true? c))))", "problem": 83, "user": "4fcc103fe4b0ee37620e185f"}, {"code": "(fn [& all] (boolean (and (not-every? true? all) (some true? all))))", "problem": 83, "user": "4daf4d2fedd6309eace4d178"}, {"code": "(fn [& bs] (if (and (some true? bs) (not (every? true? bs))) true false))", "problem": 83, "user": "4e970e6a535dbda64a6f6b4e"}, {"code": "(fn [& bools]\n  (if (some true? bools)\n    (not-every? true? bools)\n    false))", "problem": 83, "user": "4fccb31be4b0ee37620e1868"}, {"code": "(fn [& vars] (cond (every? true? vars) false (some true? vars) true :else false))", "problem": 83, "user": "4fbcbd50e4b081705acca2f9"}, {"code": "not=", "problem": 83, "user": "4fbacdbae4b081705acca2e5"}, {"code": "(fn ([a] false)([a & b] (let [x (set (cons a b))] \n(and (contains? x false) (contains? x true)))))", "problem": 83, "user": "4f148418535d64f60314643a"}, {"code": "(fn [& ps] (= (some true? ps) (some false? ps)))", "problem": 83, "user": "4fb12b35e4b081705acca275"}, {"code": "(fn [& bs] (if (and (some true? bs) (some false? bs)) true false))", "problem": 83, "user": "4e7ec984535db169f9c7971c"}, {"code": "(fn [& more] \n  (boolean \n    (and \n      (some true? more) \n      (some false? more))))", "problem": 83, "user": "4fd7962ee4b0dab7d829f385"}, {"code": "(fn half-truth\n  [& args]\n  (when args\n    (cond\n     (every? #(true? %) args) false\n     (some #(true? %) args) true\n     :else false)))", "problem": 83, "user": "4fd16778e4b04c3a95aa040f"}, {"code": "(fn [& bs]\n  (let [r (and (some true? bs) (not-every? true? bs) ) ]\n    (if (nil? r) false r)))", "problem": 83, "user": "4fd22e70e4b04c3a95aa041c"}, {"code": "(fn [& l] \n (let [m (group-by identity l)] \n  ( not (or (empty? (m true)) (empty? (m false))) )))", "problem": 83, "user": "4fc43a8ee4b081705acca346"}, {"code": "#(< 1 (count (partition-by identity %&)))", "problem": 83, "user": "4fd2789ee4b04c3a95aa0422"}, {"code": "(fn [& args]\n  (cond\n   (or (empty? (filter true? args)) (empty? (filter false? args))) false\n    :else true))", "problem": 83, "user": "4fda016ae4b05e33b9224f42"}, {"code": "(fn [& xs]\n  (boolean (and (some true? xs) (some false? xs))))", "problem": 83, "user": "4fd96694e4b05e33b9224f37"}, {"code": "(fn [& s] (= 2 (count (distinct s))))", "problem": 83, "user": "4f1bb9d8535d64f60314647d"}, {"code": "not=", "problem": 83, "user": "4ead2841535d7eef3080731e"}, {"code": "#(not= nil (nth (distinct %&) 1 nil))", "problem": 83, "user": "4fca2ef0e4b0ee37620e184e"}, {"code": ";(fn my-half-truth [& bools]\n;(boolean (and (some true? bools) (not-every? true? bools))))\n\n\n#(boolean (and (some true? %&) (not-every? true? %&)))", "problem": 83, "user": "4fc6d2c1e4b0ee37620e181b"}, {"code": "(fn [& bs]\n  (boolean (and (some true? bs) (some false? bs))))", "problem": 83, "user": "4fd6f4d8e4b0dab7d829f37b"}, {"code": "(fn [& args] (not (or (every? true? args) (every? false? args))))", "problem": 83, "user": "4dad8c92c9a9d6ed1699dc57"}, {"code": "#(if (or (every? true? %&) (every? false? %&)) false true)", "problem": 83, "user": "4fadbb17e4b081705acca23e"}, {"code": "#(true?(and (some false? %&)(some true? %&)))", "problem": 83, "user": "4ee6166e535d93acb0a66854"}, {"code": "(fn [& xs] (and (not-every? #(= false %) xs)\n                (not-every? #(= true %) xs)))", "problem": 83, "user": "4fa05b99e4b0dcca54ed6d47"}, {"code": "(fn [bool & coll]\n  (if (every? #(= true %) (cons bool coll)) \n    false\n    (if (every? #(= false %) (cons bool coll)) \n      false\n      true)\n))", "problem": 83, "user": "4fc3b0d4e4b081705acca343"}, {"code": "(fn some? [& args]\n  (and\n    (not (every? true? args))\n    (not (every? false? args))))", "problem": 83, "user": "4fe13ad7e4b0dd6cd5ce3632"}, {"code": "(fn [& a]\n  (and\n    (true? (some true? a))\n    (not-every? true? a)))", "problem": 83, "user": "4fd2e5d8e4b04c3a95aa0427"}, {"code": "#(and(not-every? true? %&)(not-every? false? %&))", "problem": 83, "user": "4fb23582e4b081705acca28a"}, {"code": "(fn [& args] \n  (< 1 (count (partition-by identity args))))", "problem": 83, "user": "4f463dfde4b0d56e7bb92b99"}, {"code": "(fn [& x]\n  (true? (and (some false? x)\n              (some true? x))))", "problem": 83, "user": "4fba0877e4b081705acca2dd"}, {"code": "(fn [& s] (not (not (and (some true? s) (some false? s)))))", "problem": 83, "user": "4e3ac1b2535deb9a81d77f4c"}, {"code": "(fn [& args] (= true (and (some true? args) (some false? args))))", "problem": 83, "user": "4fb510b5e4b081705acca2b8"}, {"code": "(fn [& v] (= #{false true} (set v)))", "problem": 83, "user": "4db016af838c48654951d9b9"}, {"code": "(fn [& bools]\n  (and (not (nil? (some true? bools))) (not (nil? (some false? bools)))))", "problem": 83, "user": "4fe54ee8e4b0e8f79898fec3"}, {"code": "(fn ht [& bs] (true? (and (some true? bs) (not (every? true? bs)))))", "problem": 83, "user": "4fcc6cb3e4b0ee37620e1861"}, {"code": "(fn [& args] (boolean (and (not (every? identity args)) (some identity args))))", "problem": 83, "user": "4fc52d79e4b081705acca386"}, {"code": "(fn ht [& v]\n  (and  \n    (> (count (filter false? v)) 0)\n    (> (count (filter true? v)) 0)))", "problem": 83, "user": "4fc93728e4b0ee37620e1844"}, {"code": "(fn [& x]\n  (true?\n    (and (some true? x)\n         (some false? x))))", "problem": 83, "user": "4fde492be4b05e33b9224f8a"}, {"code": "(fn [& all] (and (not-every? #(= % true) all) (not-every? #(= % false) all)))", "problem": 83, "user": "4fe588b6e4b0e8f79898fec5"}, {"code": "(fn [& args] (let [items (sort (seq args))] (if (and (= (last items) true) (= (first items) false)) true false)))", "problem": 83, "user": "4fdf2b50e4b05e33b9224f93"}, {"code": "(fn [ & b]\n  (not (or (apply = (cons true b))\n           (apply = (cons false b)) )))", "problem": 83, "user": "4fdd27f3e4b05e33b9224f78"}, {"code": "(fn [& all] (and (not (not (some true? all))) (not-every? true? all)))", "problem": 83, "user": "4f8bbb27e4b02e764a0a5182"}, {"code": "(fn [& args]\n  (= 2 (count (distinct args))))", "problem": 83, "user": "4fcd155de4b065de69964ca3"}, {"code": "#(true? (and (some false? %&) (some true? %&)))", "problem": 83, "user": "4fdec88fe4b05e33b9224f8e"}, {"code": "(fn [& vls] (if (and (some true? vls) (some false? vls))\ntrue false))", "problem": 83, "user": "4fae4c11e4b081705acca248"}, {"code": "(fn [& x]\n(if (and (some true? x) (some false? x)) \ntrue false))", "problem": 83, "user": "4fdf5403e4b05e33b9224f98"}, {"code": "(letfn [(helper [[x & xs] c]\n                 (if (empty? xs) (not= x c)\n                   (if (= x c) (recur xs c) true)))]\n   (fn ([x] false)\n       ([x & xs] (helper xs x))))", "problem": 83, "user": "4fe8d862e4b0547ebccb2428"}, {"code": "(fn [& tf]\n  (= #{true false} (into #{} tf)))", "problem": 83, "user": "4fe9d647e4b0547ebccb2472"}, {"code": "(fn [& z] \n  (if (and (some true? z)\n           (some false? z))\n      true\n      false))", "problem": 83, "user": "4fe8aef4e4b07c9f6fd12c6c"}, {"code": "(fn xor\n          [& more]\n        (let [count-items (count (group-by identity  more))]\n          (cond\n            (= count-items 2) true\n            :else false)))", "problem": 83, "user": "4fb591aee4b081705acca2c0"}, {"code": "(fn [& args] (and (not (empty? (filter true? args))) (not (empty? (filter false? args)))))", "problem": 83, "user": "4feada56e4b0140c20fb9c11"}, {"code": "(fn [& args]\n  (let [or-r (reduce (fn [acc a] (or acc a)) args)\n        and-r (reduce (fn [acc a] (and acc a)) args)]\n    (and or-r (not and-r))))", "problem": 83, "user": "4e170143535d04ed9115e7ed"}, {"code": "(fn\n  ([a] (not a))\n\n  ([a b] (or a b))\n\n  ([a b c] (not a))\n\n  ([a b c d] a)\n\n  )", "problem": 83, "user": "4f831dd2e4b033992c121c16"}, {"code": "(fn [& xs] (and (reduce #(or %1 %2) xs) (not (reduce #(and %1 %2) xs))))", "problem": 83, "user": "4fea08a9e4b0547ebccb2484"}, {"code": "#(= (set %&) '#{true false})", "problem": 83, "user": "4fba77fae4b081705acca2df"}, {"code": "(fn [& bools]\r\n          (let [f-and (fn [& bs] (reduce #(and %1 %2) bs))\r\n                f-or  (fn [& bs] (reduce #(or %1 %2) bs))]\r\n            (and (apply f-or bools) (not (apply f-and bools)))))", "problem": 83, "user": "4f07ad89535dcb61093f6c2a"}, {"code": "(fn [& args]\n  (not (not (and (some true? args)\n                 (some false? args)))))", "problem": 83, "user": "4fe87e56e4b07c9f6fd12c40"}, {"code": "(fn [& xs]\n  (and (not-every? true? xs)\n       (>= (.indexOf xs true) 0)))", "problem": 83, "user": "4fead955e4b0140c20fb9c10"}, {"code": "not=", "problem": 83, "user": "4f515bd3e4b03ad3f0c10d1f"}, {"code": "(fn [& bs] (= (->> bs set count) 2))", "problem": 83, "user": "4fec550de4b0681fd128dca6"}, {"code": "(fn [& ls] (not= (repeat (count ls) (first ls)) ls))", "problem": 83, "user": "4fe1597fe4b0dd6cd5ce3633"}, {"code": "(fn [& args]\n  (if (and (not-every? true? args) (some true? args)) \n    true false))", "problem": 83, "user": "4fe88f78e4b07c9f6fd12c45"}, {"code": "(fn [& par]\n    (if (every? #(true? %) par) \n        false\n        (if (some #(true? %) par)\n          true\n          false)))", "problem": 83, "user": "4febb4dae4b0681fd128dc98"}, {"code": "(fn [& bools]\r\n  (and\r\n\t\t     (reduce #(or %1 %2) false bools)\r\n\t\t(not (reduce #(and %1 %2) true bools))\r\n  )\r\n)", "problem": 83, "user": "4fea2de5e4b0140c20fb9bfe"}, {"code": "(fn harf-truth [& args]\r\n  (cond\r\n    (every? true? args) false\r\n    (some true? args) true\r\n    :else false))", "problem": 83, "user": "4fd170fce4b04c3a95aa0411"}, {"code": "not=", "problem": 83, "user": "4fe84c74e4b07c9f6fd12c3c"}, {"code": "#(= #{true false} (set %&))", "problem": 83, "user": "4ff304f4e4b0678c553fc343"}, {"code": "(fn [& c]\r\n   (and (not (not-any? false? c)) (= true (some true? c))))", "problem": 83, "user": "4ff07688e4b0678c553fc324"}, {"code": "(fn [& b] (or (and (some identity b) (not (reduce #(and %1 %2) b))) false))", "problem": 83, "user": "4da8dd6e30acd6ed12482a68"}, {"code": "#(if (every? true? %&) false (not-every? false? %&))", "problem": 83, "user": "4fe15ffee4b0dd6cd5ce3634"}, {"code": "(fn [& l] (= 2 (count (set l))))", "problem": 83, "user": "4ff5744ae4b0678c553fc36a"}, {"code": "#(let [ftc (count (filter identity %&))] \n  (and (< ftc (count %&)) (> ftc 0)))", "problem": 83, "user": "4fe2501ae4b0dd6cd5ce3644"}, {"code": "(fn partT [& args] \n  (if (and (some true? args)\n\t (some false? args))\n\t\ttrue false))", "problem": 83, "user": "4ff4c9dae4b0678c553fc360"}, {"code": "#(and (not-every? false? %&) (not (every? true? %&)))", "problem": 83, "user": "4ff6aea8e4b0678c553fc381"}, {"code": "(fn [& col]\n  (not (nil? (and (some true? col) (some false? col)))))", "problem": 83, "user": "4feff3b6e4b0678c553fc31e"}, {"code": "not=", "problem": 83, "user": "4fd9d162e4b05e33b9224f3c"}, {"code": "(fn [& b] (= 2 (count (set b))))", "problem": 83, "user": "4ff78679e4b0678c553fc392"}, {"code": "(fn [& x]\n  (and (not (every? (fn [x] (= x true)) x))\n       (not (every? (fn [x] (= x false)) x))))", "problem": 83, "user": "4f0324d2535dcb61093f6a69"}, {"code": "not=", "problem": 83, "user": "4ff743fde4b0678c553fc38d"}, {"code": "(fn [& list] \n  ((fn [seen-true seen-false list]\n    (if (empty? list) \n      (and seen-true seen-false)\n      (recur (or seen-true (true? (first list))) \n             (or seen-false (false? (first list))) \n             (rest list)))) \n    false false list))", "problem": 83, "user": "4ff83003e4b0678c553fc396"}, {"code": "(fn [& l]\n  (and (reduce #(or % %2) (map not l))\n       (reduce #(or % %2) l)))", "problem": 83, "user": "4ff9d4e5e4b0678c553fc3b0"}, {"code": "(fn [& coll]\n (boolean\n   (and\n     (some true? coll)\n     (some false? coll))))", "problem": 83, "user": "4f92884de4b0dcca54ed6caf"}, {"code": "(fn [& xs] (and (boolean (some identity xs))\n                (not (every? identity xs))))", "problem": 83, "user": "4fe83efbe4b07c9f6fd12c3b"}, {"code": "not=", "problem": 83, "user": "4fe21889e4b0dd6cd5ce3641"}, {"code": "#(and (not-every? true? %&) (not-every? false? %&))", "problem": 83, "user": "4fefd624e4b0678c553fc31b"}, {"code": "(fn [x & xs] (let [m (cons x xs)] (true? (and\n  (some true? m) (some false? m)))))", "problem": 83, "user": "4ffb38e8e4b0678c553fc3c6"}, {"code": "(fn [& args]\n  (= #{true false} (set (distinct args))))", "problem": 83, "user": "4e9c3648535dbda64a6f6b7d"}, {"code": "#(if (some true? %&) (not-every? true? %&) false)", "problem": 83, "user": "4e57d1e2535d8a8b8723a289"}, {"code": "#(= (set  %&) #{true false})", "problem": 83, "user": "4ec7c32c535d6d7199dd36e6"}, {"code": "(fn [& args]\n  (=\n   true\n   (some true? args)\n   (some false? args)))", "problem": 83, "user": "4fea1f9ee4b0547ebccb248b"}, {"code": "#(if (and (some true? %&) (some false? %&)) true false)", "problem": 83, "user": "4db2cd84535df7e46ed9b6c6"}, {"code": "not=", "problem": 83, "user": "4fe8da4de4b0547ebccb2429"}, {"code": "(fn half-truth [& args]\n  (or\n  (and (not (every? identity args))\n       (some identity args))\n  false\n  ))", "problem": 83, "user": "4fe8e719e4b0547ebccb2430"}, {"code": "(fn [& s] \n  (if (reduce #(and %1 %2) true s) \n      false \n      (reduce #(or %1 %2) false s)))", "problem": 83, "user": "4fdb02aae4b05e33b9224f56"}, {"code": "(fn [& a] (= #{true false} (into #{} a)))", "problem": 83, "user": "4f3e5e87e4b0e243712b1f83"}, {"code": "(fn aaa\n  ([& more] (let [a (distinct more)]\n                 (if (= 2 (count a))\n                     true\n                     false))))", "problem": 83, "user": "4ffe8193e4b0678c553fc3f4"}, {"code": "not= ; So much simpler...\n\n;(fn [& vals]\n;  (not (or\n;    (every? true? vals)\n;    (every? false? vals))))", "problem": 83, "user": "4fc50bcbe4b081705acca375"}, {"code": "(fn [& s] (and (reduce #(or % %2) s) (not (reduce #(and % %2) s)) ))", "problem": 83, "user": "4ff67852e4b0678c553fc37e"}, {"code": "(fn [& bools]\n  (let [nbools (count bools)\n        ntruth (count (filter true? bools))]\n       (cond\n        (= ntruth nbools) false\n        (= ntruth 0) false\n        :else true)))", "problem": 83, "user": "4ec9549d535d6d7199dd36fe"}, {"code": "(fn [& coll] (= (and (some true? coll) (some false? coll)) true))", "problem": 83, "user": "4ff9cfd6e4b0678c553fc3af"}, {"code": "(fn [& lst]                                                         \n        (and (reduce #(or % %2) lst)                                            \n             (not (= true (reduce #(and % %2) lst)))))", "problem": 83, "user": "4eed6b32535d93acb0a668bc"}, {"code": "not=", "problem": 83, "user": "5002c798e4b0678c553fc42d"}, {"code": "(fn [& bools]\n  (= true (and (some #{true} bools) (not-every? #{true} bools))))", "problem": 83, "user": "5003deb9e4b0678c553fc445"}, {"code": "#(and (contains? (set %&) true) (contains? (set %&) false))", "problem": 83, "user": "4ffa8affe4b0678c553fc3bd"}, {"code": ";some are true\n;not every one is true\n\n(fn [& bools]\n  (and (not-every? identity bools)\n       (not-every? false? bools)))", "problem": 83, "user": "4ffe4d43e4b0678c553fc3f1"}, {"code": "(fn [& bools] \r\n  (if (and (some true? bools) (some false? bools))\r\n      true false))", "problem": 83, "user": "50045388e4b0678c553fc44e"}, {"code": "(fn [& args]\n  (boolean\n    (and (some identity args)\n         (not-every? identity args))))", "problem": 83, "user": "4fe89db2e4b07c9f6fd12c59"}, {"code": "(fn [& a] (let [pred (and (not (empty? (filter false? a))) (some true? a))] (if (nil? pred) false pred)))", "problem": 83, "user": "5003bb77e4b0678c553fc442"}, {"code": "not=", "problem": 83, "user": "5003ee7de4b0678c553fc446"}, {"code": "(fn [& args] (= (set (distinct args)) #{true false}))", "problem": 83, "user": "4ff76effe4b0678c553fc390"}, {"code": "#(and (not-every? false? %&) (not-every? true? %&))", "problem": 83, "user": "500159b3e4b0678c553fc419"}, {"code": "#(> (count (set %&)) 1)", "problem": 83, "user": "5007c7c7e4b0b17c647f5226"}, {"code": "#(and (not= nil (some true? %&)) (not-every? true? %&))", "problem": 83, "user": "4f05ea25535dcb61093f6c02"}, {"code": "(fn [& xs]\n  (boolean\n    (and (some identity xs)\n         (some not xs))))", "problem": 83, "user": "500933a6e4b046cdb195e074"}, {"code": "(fn [& bools]\n  (not (or (every? identity bools)\n           (every? not bools))))", "problem": 83, "user": "500d8c49e4b07ccb9a7ddb00"}, {"code": "(fn [& args] (and (not (reduce #(and %1 %2) args)) (reduce #(or %1 %2) args)))", "problem": 83, "user": "4fe9cea4e4b0547ebccb2471"}, {"code": "(fn [& x]\r\n  (cond\r\n    (some true? x)\r\n    (not-every? true? x)\r\n    :else false))", "problem": 83, "user": "4fefbfe7e4b0678c553fc31a"}, {"code": "(fn ht [& x]\n  (and\n   (reduce #(or %1 %2) x)\n   (not (reduce #(and %1 %2) x))))", "problem": 83, "user": "500cb910e4b05f7c30cfa698"}, {"code": "(fn half-truth [& args]\n  (boolean (and (some true? args) (not-every? true? args))))", "problem": 83, "user": "4fff00ede4b0678c553fc3fc"}, {"code": "(fn [& bools]\n  (if (and (some identity bools) (some not bools))\n       true\n       false))", "problem": 83, "user": "5002b6e5e4b0678c553fc42c"}, {"code": "(fn [& a] (= (count (set a)) 2))", "problem": 83, "user": "4fe900a6e4b0547ebccb243a"}, {"code": "(fn [ & args ] (and (not (nil? (some true? args))) (not (every? true? args))))", "problem": 83, "user": "500e38a5e4b068062f6e8d90"}, {"code": "(fn somenotall [& args]\n    (let [sargs (sort args)]\n      (and (not (first sargs))\n           (last sargs))))", "problem": 83, "user": "50057f23e4b0678c553fc466"}, {"code": "(fn [& args] (true? (and (not (every? #(true? %) args)) (some #(true? %) args))))", "problem": 83, "user": "4fd8544be4b0dab7d829f390"}, {"code": "not=", "problem": 83, "user": "4ffd92e7e4b0678c553fc3e3"}, {"code": "(fn [& booleans]\n  (if (and (some true? booleans) (some false? booleans))\n    true\n    false))", "problem": 83, "user": "500ff421e4b0ae202717946f"}, {"code": "(fn half-truth? [& s]\n  (if (= (and (some #(= true %) s)\n              (some #(= false %) s))\n         nil)\n    false\n    true))", "problem": 83, "user": "4ff355a1e4b0678c553fc34d"}, {"code": "(fn [& c] (and (not-every? true? c) (true? (some true? c))))", "problem": 83, "user": "500d1db4e4b05f7c30cfa69f"}, {"code": "(fn [& args] \n  (and (not-every? false? args) (not-every? true? args)))", "problem": 83, "user": "50127fbfe4b030d97e4db70f"}, {"code": "#(= 2 (count (distinct %&)))", "problem": 83, "user": "4fcc70b3e4b0ee37620e1862"}, {"code": "(fn [& s]\n  (and (reduce (fn [a b] (or a b)) s)\n       (not (reduce (fn [a b] (and a b)) s))))", "problem": 83, "user": "501284d9e4b030d97e4db710"}, {"code": "(fn [& x]\n  (cond\n    (every? true? x) false\n    (every? false? x) false\n    :else true))", "problem": 83, "user": "5012614ee4b02a085b99dc79"}, {"code": "(fn [& booleans]\n  (true?\n    (and (some true? booleans)\n       (some false? booleans))))", "problem": 83, "user": "5014754de4b094324338f8e5"}, {"code": "(fn [& x] (= #{true false} (set x)))", "problem": 83, "user": "5009fd0ae4b03d00572d2d70"}, {"code": "#(= [false true] (sort (distinct %&)))", "problem": 83, "user": "50166470e4b052339a490e76"}, {"code": "(fn [& bools]\n  (and\n    (not (empty? (filter not bools)))\n    (not (empty? (filter identity bools)))))", "problem": 83, "user": "5012aefce4b0c8732600222a"}, {"code": "(fn [& params] \n  (true? (and (some true? params) \n              (not (every? true? params)))))", "problem": 83, "user": "500900dee4b0144d4f561e42"}, {"code": "(fn [& args]\n  (< 0 (count (filter identity args)) (count args)))", "problem": 83, "user": "4fe4c09ee4b0e8f79898febb"}, {"code": "(fn [& bools]\n  (and (not-every? true? bools) (not-every? false? bools)))", "problem": 83, "user": "5007f751e4b0b17c647f522b"}, {"code": "(fn[& l](and(not-every? #(false?%)l)(not-every? #(true?%)l)))", "problem": 83, "user": "5017eface4b02f523d7cc5e7"}, {"code": "#(if (and (some true? %&) (some false? %&)) true false)", "problem": 83, "user": "4fb5033ce4b081705acca2b5"}, {"code": "(fn [& xs] (and (not-every? true? xs) (not-every? false? xs)))", "problem": 83, "user": "501688f7e4b052339a490e7a"}, {"code": "(fn b [x & more] \n  (let [l (set \n    (flatten \n      (cons \n        (conj '() x) \n       more)))] \n    (if (= (count l) 1 ) \n      false \n      true)))", "problem": 83, "user": "4fe97adde4b0547ebccb245e"}, {"code": "#(boolean (and (some true? %&) (some false? %&)))", "problem": 83, "user": "4ff76222e4b0678c553fc38e"}, {"code": "(fn [& args] (= 2 (count (set args))))", "problem": 83, "user": "5018ed15e4b011a2e0bf6412"}, {"code": "(fn [& x] (and (reduce #(or %1 %2) x) (not (reduce #(and %1 %2) x))))", "problem": 83, "user": "5017f840e4b02f523d7cc5e8"}, {"code": "(fn [& xs]\n  (let [s (set xs)\n        n (count s)\n        t (contains? s true)]\n  (if t (= 2 n) false)))", "problem": 83, "user": "4f528f70e4b03ad3f0c10d3f"}, {"code": "(fn [& s] (and (not (nil? (some true? s))) (not (every? true? s)) ))", "problem": 83, "user": "500854c4e4b028e089d3518c"}, {"code": "not=", "problem": 83, "user": "500e91aae4b00fff93030f99"}, {"code": "(fn [& arg]\n  (let [f (first arg) s (second arg)]\n    (if (not= nil s)\n      (if (= f s)\n        (recur (rest arg))\n        true)\n      false)))", "problem": 83, "user": "4f82f9f7e4b033992c121c10"}, {"code": "(fn [& bools] \n  (and\n      (not (reduce #(and %1 %2) bools))\n      (reduce #(or %1 %2) bools)\n  )\n)", "problem": 83, "user": "50182f53e4b02f523d7cc5ec"}, {"code": "not=", "problem": 83, "user": "501d34f6e4b066e56b9d0b1e"}, {"code": "(fn __ [& bools]\n  (if (and (not (empty? (filter #(= true %) bools)))\n      \t(not (empty? (filter #(= false %) bools))))\n      true\n      false\n      )\n)", "problem": 83, "user": "4fa719c0e4b081705acca1bf"}, {"code": "#(and (not (not-any? identity %&))\n  (not-every? identity %&))", "problem": 83, "user": "4ff4f5c4e4b0678c553fc362"}, {"code": "(fn g ([a] (identity false ))\n    ([a b] (and (or a b) (not (and a b))))\n    ([a b & args] \n      (if (and (or a b) (not (and a b)))\n          true\n          (apply g b args)\n      ) \n    )\n)", "problem": 83, "user": "4fcf5292e4b03432b189f40e"}, {"code": "#(= (set %&) #{true false})", "problem": 83, "user": "4fb7b80ae4b081705acca2d4"}, {"code": "(fn [& rest]\n  (and (boolean (some true? rest))\n       (not-every? true? rest)))", "problem": 83, "user": "4ed8b598535d10e5ff6f52fc"}, {"code": "(fn [& args]\n  (cond\n    (every? true? args) false\n    (some true? args) true\n    :else false))", "problem": 83, "user": "50052fd0e4b0678c553fc45d"}, {"code": "(fn [& more] (let [c (count (filter true? more))] (and (> c 0) (< c (count more)))))", "problem": 83, "user": "4e61bb60535d8ccf87e9fe5c"}, {"code": "(fn [ & args ] (and (not-every? #(= true %) args) (not-every? #(= false %) args)))", "problem": 83, "user": "4ff3e771e4b0678c553fc356"}, {"code": "(fn [& arg]\n  (and (not (nil? (some true? arg)))\n       (not-every? true? arg)))", "problem": 83, "user": "4fbef9a6e4b081705acca316"}, {"code": "; (not (every? true? coll)) ==> (not-every? true? coll)\n\n(fn [& coll] \n  (and (not (every? true? coll)) (not (every? false? coll))))", "problem": 83, "user": "501c1492e4b086d93747d180"}, {"code": "(fn [& bools] (and (not (nil? (some true? bools))) (not (every? true? bools))))", "problem": 83, "user": "4e7e8485535db169f9c79716"}, {"code": "(fn [& b] (not (or (every? false? b) (every? true? b))))", "problem": 83, "user": "4fcf642ee4b03432b189f410"}, {"code": "(fn [& coll] (\n   true? (and (some true? coll) (not-every? true? coll))))", "problem": 83, "user": "4ff2f0a9e4b0678c553fc341"}, {"code": "(fn [& args]\r\n  (let [truety (some true? args) \r\n        falsy (some false? args)]\r\n       (if (and truety falsy)\r\n         true\r\n         false)))", "problem": 83, "user": "4f60ed88e4b0defedf855fb2"}, {"code": "not=", "problem": 83, "user": "4e260220535deb9a81d77ef0"}, {"code": "#(= 2 (count (distinct %&)))", "problem": 83, "user": "4fd2529ae4b04c3a95aa041f"}, {"code": "(fn [& s]\n  (let [c (count (set s))]\n    (if (> c 1)\n      true\n      false)))", "problem": 83, "user": "501dfd54e4b051153f3b5b80"}, {"code": "(fn [& a] \n  (true? (and (some true? a)\n    (not-every? true? a))))", "problem": 83, "user": "4ff9f5c5e4b0678c553fc3b4"}, {"code": "(fn [& args]\n  (and (not (nil? (some identity args)))\n       (not-every? identity args)))", "problem": 83, "user": "502ac96de4b0614b5299611b"}, {"code": "(fn [& rest]\n  (and (not (nil? (some true? rest))) (not (nil? (some false? rest)))))", "problem": 83, "user": "4e4ca885535dc968683fc4df"}, {"code": "(fn [& c] \n  (> (count (partition-by identity c)) 1))", "problem": 83, "user": "502a5fa4e4b09e8f859a9fbd"}, {"code": "(fn asdf [ & x ] \n    (if (every? true? (flatten x)) false \n      (if (some true? (flatten x)) true false))   \n    )", "problem": 83, "user": "5012036ce4b0a040369c12f4"}, {"code": "(fn \n  ([x] false)\n  ([x & more]\n    (if x\n       (not (nil? (some false?  more)))\n       (not (nil? (some true? more))))))", "problem": 83, "user": "5028bce0e4b01614d1633ffb"}, {"code": "(fn [& args] (and (not-every? true? args) (not-every? false? args)))", "problem": 83, "user": "502952c9e4b0b33e9bf6fdf1"}, {"code": "(fn [& bools]\n  (and (true? (some identity bools))\n       (false? (every? identity bools))))", "problem": 83, "user": "5027fc0ce4b01614d1633ff2"}, {"code": "(fn [& args] \n  (boolean (and (some true? args) (some false? args))))", "problem": 83, "user": "5025b93ce4b0c969f0b056df"}, {"code": "(fn [& args] (and (not-every? true? args)\n                 (not-every? false? args)))", "problem": 83, "user": "50052d38e4b0678c553fc45c"}, {"code": "#(contains? (set (range 1 (count %&))) (count (filter identity %&)))", "problem": 83, "user": "5028cd0fe4b01614d1633ffc"}, {"code": "(fn [& bools]\n  (if (some (fn [[l r]] (and l r))\n      (reductions \n        (fn [[ff ft] v]\n          [(or (not v) ff) (or v ft)])\n        [false false]\n        bools))\n    true\n    false))", "problem": 83, "user": "4e47f4f3535dc968683fc4bb"}, {"code": "#(if (and (some true? %&) (not (every? true? %&))) true false)", "problem": 83, "user": "502d387fe4b0d96a44ab202f"}, {"code": "(fn  [& coll]\n  (and (not-every? true? coll) (true? (some true? coll))))", "problem": 83, "user": "4fa09916e4b0dcca54ed6d4e"}, {"code": "#(< 1 (count (set %&)))", "problem": 83, "user": "500aa15ee4b03d00572d2d76"}, {"code": "(fn [& xs] \n  (true? (and\n    (some true? xs) \n    (not(every? true? xs)) )))", "problem": 83, "user": "4eaf08ce535d7eef3080732d"}, {"code": "(fn [& s]\n  (and (reduce #(or %1 %2) s) (not (reduce #(and %1 %2) s))))", "problem": 83, "user": "5029fccee4b023940c84aa47"}, {"code": "(fn [& bs]\n  (and\n    ((fn my-or [bs2]\n      (reduce #(if (= [false false] [% %2]) false true) false bs2))\n      bs)\n    (not (\n      (fn [bs2] (reduce #(if (= [true true] [% %2]) true false) true bs2))\n        bs))))", "problem": 83, "user": "4fb1325de4b081705acca276"}, {"code": "(fn [& lst] (and (or (some true? lst) false) (not-every? true? lst)))", "problem": 83, "user": "4ee528fb535d1385b2869d87"}, {"code": "(fn [& xs] (if (every? true? xs) false (if (some true? xs) true false)))", "problem": 83, "user": "502904e0e4b0feaf66e22fad"}, {"code": "(fn [& bools]\n  (let [n (count bools)\n        t (count (filter true? bools))\n        d (/ t n)]\n    (cond \n      (= d 1) false\n      (= d 0) false\n      :else true)))", "problem": 83, "user": "5030f16fe4b05b7df5a0b84b"}, {"code": "(fn [x & xs]\n  (loop [x x\n         xs xs\n         truths 0\n         visited 0]\n    (if (nil? x)\n     (and (< truths visited) (> truths 0))\n     (recur\n       (first xs)\n       (rest xs)\n       (if x (inc truths) truths)\n       (inc visited)))))", "problem": 83, "user": "5032b398e4b00c0952a257eb"}, {"code": "(fn [& vals] (let [vs (apply list vals)]\n    (if (or (every? true? vs) (every? false? vs)) false true)))", "problem": 83, "user": "503255d0e4b0e78df07b092b"}, {"code": "(fn ([x] false) ([x y] (not= x y)) ([x y z] (not= x y z))\n([a b c d] true))", "problem": 83, "user": "502d39f8e4b0d96a44ab2032"}, {"code": "(fn [& x]\n  (and (not (not-any? identity x)) (not-every? identity x)))", "problem": 83, "user": "4dea9fae535d08e6dec9fe02"}, {"code": "(fn [& bools]\n  (and \n    (not= -1 (.indexOf bools false))\n    (not= -1 (.indexOf bools true))\n  )\n)", "problem": 83, "user": "4fe610fde4b0e8f79898fece"}, {"code": "#(< 0 (mod (count(filter true? %&))\r\n           (count %&)))", "problem": 83, "user": "50336c6be4b0c6c1199c710f"}, {"code": "#(if (and (some true? %&) (not (every? true? %&)))\n  true\n  false)", "problem": 83, "user": "502a9fdee4b095a7adb898b4"}, {"code": "(fn [& args]\n  (and (not-every? boolean args) (not-every? not args)))", "problem": 83, "user": "5033a1fbe4b062bc5d7ae155"}, {"code": "(fn [& s] (let [f #(not (nil? ((set s) %)))] \n(and (f true) (f false))))", "problem": 83, "user": "503917a0e4b088a6a14ca763"}, {"code": "(fn check\n  ([x] false)\n  ([x y] (and (or x y) (not (and x y))))\n  ([x y & more] (or (check x y) (apply check more))))", "problem": 83, "user": "503a5623e4b07a1917cc34d3"}, {"code": "(fn [& more]\n  (boolean (and \n    (some identity more)\n    (some not more))))", "problem": 83, "user": "502bb7c0e4b0194ad32ea1a3"}, {"code": "(fn [& x] (if (and (some true? x) (some false? x)) true false))", "problem": 83, "user": "503354c3e4b0c6c1199c710c"}, {"code": "not=", "problem": 83, "user": "503b6995e4b07a1917cc34dd"}, {"code": "(fn [& more]\r\n  (let [vals (set more)]\r\n    (if (and (contains? vals true)(> (count vals) 1))\r\n        true false)))", "problem": 83, "user": "502d4ea0e4b02fc10c6c6e46"}, {"code": "(fn [& coll]\n  (if (and (not (every? true? coll))\n           (some true? coll))\n      true\n      false))", "problem": 83, "user": "503c21c2e4b0fc0f99c2e551"}, {"code": "#(not (or (every? false? %&) (every? true? %&)))", "problem": 83, "user": "50361b6be4b0fbe0a74d26be"}, {"code": "#(= 2 (count (distinct %&)))", "problem": 83, "user": "502940a9e4b061fd216be4b8"}, {"code": "(fn half-truth\n    ([v1] false)\n    ([v1 & more]\n       (let\n           [values (conj more v1)\n            or (fn [v1 v2] (or v1 v2))\n            and (fn [v1 v2] (and v1 v2))]\n         (and (reduce or false values)\n              (not (reduce and true values))))))", "problem": 83, "user": "4f03818e535dcb61093f6b00"}, {"code": "not=", "problem": 83, "user": "4e949d18535dbda64a6f6b15"}, {"code": "not=", "problem": 83, "user": "5032b066e4b00c0952a257ea"}, {"code": "(comp (partial = #{true false}) set list)", "problem": 83, "user": "501fa1aee4b0cb6ebc0a42eb"}, {"code": "(fn [& a] (not (apply = a)))", "problem": 83, "user": "4e8a880b535d65386fec210d"}, {"code": "#(and (not-every? true? %&) \n      (not-every? false? %&))", "problem": 83, "user": "4efa3d4b535dced4c769f270"}, {"code": "#(not (or (not-any? identity %&) (not-any? not %&)))", "problem": 83, "user": "4e952463535dbda64a6f6b31"}, {"code": "(fn [& args]\n  (if (or (every? true? args)\n          (every? false? args))\n      false\n      true))", "problem": 83, "user": "4e944706535dbda64a6f6b11"}, {"code": "#(= (set %&) #{true false})", "problem": 83, "user": "50410452e4b06d8231e4faca"}, {"code": "(fn [& args]\n  (and (not (every? true? args))\n       (true? (some true? args))))", "problem": 83, "user": "5012ec0ae4b0c87326002230"}, {"code": "(fn [& args]\n  (boolean\n    (and (some identity args)\n         (not (every? identity args)))))", "problem": 83, "user": "4e8338d6535db62dc21a62d3"}, {"code": "(fn [& x] (if (and (some identity x) (not-every? identity x)) true false))", "problem": 83, "user": "502d39c5e4b0d96a44ab2031"}, {"code": "(fn anytrue [& args] \n  (and (reduce #(or %1 %2) args) (not-every? true? args)))", "problem": 83, "user": "4fb266a5e4b081705acca28c"}, {"code": "#(and (not (= nil (some true? %&)))\n       (> (count (distinct %&)) 1) )", "problem": 83, "user": "4faff8fde4b081705acca25e"}, {"code": "(fn [& ts]\n  (or (and (some true? ts)\n           (not (every? true? ts)))\n      false))", "problem": 83, "user": "50435852e4b034ff00315d22"}, {"code": "(fn [& rest]\n  (true? (and (some identity rest) (some not rest))))", "problem": 83, "user": "503a234de4b088a6a14ca76d"}, {"code": "(fn [& truth]\n  (let [trues (count (filter #(= true %) truth))\n        total (count truth)]\n    (and (> trues 0) (< trues total))))", "problem": 83, "user": "50293245e4b08353e5d459cf"}, {"code": "(fn [& l]\n  (and (not-every? false? l)\n       (not-every? true? l)))", "problem": 83, "user": "4f244f26e4b0d66497709fea"}, {"code": "(fn [& bs]\n    (if (and (some identity bs) (not-every? identity bs))\n      true\n      false)\n    )", "problem": 83, "user": "4e26e8b4535deb9a81d77ef6"}, {"code": "#(and (not-every? true? %&) (not-every? false? %&))", "problem": 83, "user": "4fd81472e4b0dab7d829f38e"}, {"code": "#(= #{true false} (set %&))", "problem": 83, "user": "50479524e4b0371827a27bc4"}, {"code": "#(not (or (every? false? %&)\r\n            (every? true? %&)))", "problem": 83, "user": "4f58d92fe4b0a7574ea71858"}, {"code": "(fn [& b]\r\n  (not (or (not-any? false? b)\r\n     (not-any? true? b))))", "problem": 83, "user": "4fdc067fe4b05e33b9224f69"}, {"code": "(fn half [& coll]\n    (loop [hasFalse false\n           hasTrue false\n           [x & xs] coll]\n      (cond (nil? x)\n            (and hasTrue hasFalse)\n            (and x hasFalse)\n            true\n            x\n            (recur hasFalse true xs)\n            true\n            (recur true hasTrue xs))))", "problem": 83, "user": "503ac764e4b07a1917cc34d8"}, {"code": "(fn [& x] \n  (if (and (some true? x) (some false? x))\n    true\n    false))", "problem": 83, "user": "5046b003e4b011c5dfee7727"}, {"code": "(fn [& args]\n  (let [a #(and %1 %2)\n        o #(or %1 %2)\n        aa (reduce a args)\n        oo (reduce o args)]\n    (and\n      (not aa)\n      oo)))", "problem": 83, "user": "50427899e4b0add3005c0fc2"}, {"code": "(fn [& more]\n  (true? (and (some #(true? %) more) \n              (not-every? #(true? %) more))))", "problem": 83, "user": "4fb01e53e4b081705acca260"}, {"code": "(fn [ & xs]\n  (let [t (count (filter true? xs))]\n    (if (> t 0)\n        (not= t (count xs))\n        false\n  )\n))", "problem": 83, "user": "5048202fe4b0ec70b3ef8d9a"}, {"code": "(fn [& x] (and (> (count x) 1) \r\n                                  (not-every? #(= true %) x)\r\n                                  (not-every? #(= false %) x)\r\n                              )\r\n                     )", "problem": 83, "user": "503ff621e4b0c9bf6384b00f"}, {"code": "(fn [& vals]\n   (and (reduce #(or %1 %2) (map = vals (repeat true)))\n        (not-every? true? vals)))", "problem": 83, "user": "4f616892e4b0defedf855fbf"}, {"code": "(fn [& args]\n  (and\n    (< 0\n      (count (filter true? args)))\n    (> (count args)\n      (count (filter true? args)))))", "problem": 83, "user": "504e48ace4b0f6ff3350c498"}, {"code": "(fn [& xs] (if (some true? xs) (not-every? true? xs) false))", "problem": 83, "user": "504d0116e4b022602c20b089"}, {"code": "(fn [h & r]\n   (if (nil? r)\n     false\n     (not= (count r) (reduce (fn [a b] (if (= b h) (inc a) a)) 0 r))\n     )\n  )", "problem": 83, "user": "503ca47fe4b06c4e0e1fa24f"}, {"code": "(fn [& args]\n  (let [counts (group-by true? args)\n        true-count (count (get counts true))]\n    (if (= true-count (count args))\n      false\n      (or (some true? args) false))))", "problem": 83, "user": "50481532e4b0ec70b3ef8d96"}, {"code": "(fn half-truth [& xs]\n  (let [a (not-every? identity xs)\n        b (not (not (some identity xs)))]\n    (and a b)))", "problem": 83, "user": "504e13fce4b078edc5f593bc"}, {"code": "#(boolean (and (some true? %&)\n               (some false? %&)))", "problem": 83, "user": "504ed350e4b069badc5a33d1"}, {"code": "(fn [& col]\n  (= 2 (count (distinct col))))", "problem": 83, "user": "4db2cc55535df7e46ed9b6c5"}, {"code": "(fn half-truth\n  [& args]\n  (= (count (set args)) 2))", "problem": 83, "user": "4edfb618535d10e5ff6f5343"}, {"code": "#(boolean (and (some identity %&) (some not %&)))", "problem": 83, "user": "504e14c2e4b078edc5f593bf"}, {"code": "(fn [& tv] (true? (and (some true? tv) (some false? tv))))", "problem": 83, "user": "504e397ee4b0f6ff3350c485"}, {"code": "; damn, i feel dumb.  not=\n(fn [& bs]\n  (cond (not (some #(false? %) bs)) false\n        (some #(true? %) bs)        true\n        true                        false))", "problem": 83, "user": "50464831e4b011c5dfee771f"}, {"code": "(fn [& args] (not (or (every? true? args)\n                      (every? false? args))))", "problem": 83, "user": "4fcbc18ae4b0ee37620e185c"}, {"code": "#(if (and (some true? %&) (not-every? true? %&)) true false)", "problem": 83, "user": "504f2071e4b0e7ad84dbc4be"}, {"code": "(fn [& args] (= (set args) #{true false}))", "problem": 83, "user": "504dff92e4b078edc5f5938a"}, {"code": "(fn [ & more ]  (and (reduce #(or %1 %2) more)  \r\n                        (if (reduce #(and  %1 %2) more) false true )))", "problem": 83, "user": "50463347e4b011c5dfee771e"}, {"code": "not=", "problem": 83, "user": "50431cbce4b034ff00315d1c"}, {"code": "(fn [x & more]\r\n  (let [coll (cons x more)]\r\n    (cond\r\n     (every? true? coll) false\r\n     (every? false? coll) false\r\n     :else true)))", "problem": 83, "user": "504e2333e4b0f6ff3350c46c"}, {"code": "not=", "problem": 83, "user": "5041b3c0e4b06d8231e4facf"}, {"code": "(fn [& xs] \n  (if (and (some true? xs) (some false? xs))\n      true\n      false))", "problem": 83, "user": "4fc5a693e4b0ee37620e17fc"}, {"code": "(fn [& args]\r\n  (and\r\n    (not-every? identity args)\r\n    (not-every? #(not (identity %)) args)))", "problem": 83, "user": "5050b107e4b063148f524126"}, {"code": "(fn [& a] (and (not (reduce #(and % %2) true a)) (reduce #(or % %2) false a)))", "problem": 83, "user": "504e9f5ce4b069badc5a33bd"}, {"code": "(fn [& bs] (< 0 (apply + (map #(if % 1 0) bs)) (count bs)))", "problem": 83, "user": "504f865ee4b0a02f9cffde90"}, {"code": "(fn [x & y]\n  (let [z (conj y x)]\n    (if (every? true? z)\n         false\n        (if (some true? z)\n            true\n            false))))", "problem": 83, "user": "50435689e4b034ff00315d21"}, {"code": "(fn [& b] (not (or (every? false? b) (every? true? b))))", "problem": 83, "user": "5048f98ee4b06e644c63f1af"}, {"code": "#(not (or (not-any? true? %&) (every? true? %&)))", "problem": 83, "user": "50548ce8e4b0b1b9d1860ead"}, {"code": "(fn half-truth [& more]\r\n  (if (or \r\n    (every? true? more) \r\n    (not-any? true? more))\r\n     false true))", "problem": 83, "user": "50436470e4b034ff00315d23"}, {"code": "(fn [& args]\r\n  (let [ts (filter true? args)\r\n        cts (count ts)\r\n        cargs (count args)]\r\n    (cond\r\n     (= cts cargs) false\r\n     (empty? ts) false\r\n     :else true)))", "problem": 83, "user": "4fee04a0e4b0678c553fc308"}, {"code": "(fn [ & c] (true? (and (not (every? true? c)) (some true? c))))", "problem": 83, "user": "504457c0e4b01f6c9a8b2360"}, {"code": "(fn [& xs] (if (and (not-every? identity xs)\n(some identity xs))\ntrue\nfalse))", "problem": 83, "user": "5055899de4b0ce54f56f03fd"}, {"code": "(fn [& bools]\n  (and (contains? (set bools) true)\n       (contains? (set bools) false)))", "problem": 83, "user": "4ff769bce4b0678c553fc38f"}, {"code": "not=", "problem": 83, "user": "4f045946535dcb61093f6bba"}, {"code": "#(and (boolean (some identity %&)) (not (every? identity %&)))", "problem": 83, "user": "504f57c7e4b0a02f9cffde71"}, {"code": "(fn [& args] (if (and (some true? args) (some false? args)) true false))", "problem": 83, "user": "504ec4d3e4b069badc5a33c9"}, {"code": "(fn [& bools]\n  (and (not (apply = bools))\n       (some #{true} bools)))", "problem": 83, "user": "503e6047e4b06c4e0e1fa266"}, {"code": "(fn [& args]\n  (true? (and (some true? args)\n              (some false? args))))", "problem": 83, "user": "5057242fe4b0012181721986"}, {"code": "(fn [& m] (let [fl (distinct m)] (= (count fl) 2)))", "problem": 83, "user": "504e2600e4b0f6ff3350c46f"}, {"code": "(fn [& p] (true? (and (some false? p) (some true? p))))", "problem": 83, "user": "5053de37e4b0b1b9d1860ea8"}, {"code": "#(= 2 (count (group-by identity %&)))", "problem": 83, "user": "504e04a4e4b078edc5f59397"}, {"code": "#(cond (and (some true? %&) (not (every? true? %&))) true :else false)", "problem": 83, "user": "5048bcf8e4b06e644c63f1ae"}, {"code": "(fn [& b]\n  (not (apply = b)))", "problem": 83, "user": "50555c06e4b0ce54f56f03fa"}, {"code": "(fn [& xs] (and (not-every? true? xs) (not-every? false? xs)))", "problem": 83, "user": "5054c853e4b0b1b9d1860eb3"}, {"code": "(fn [& args]\r\n    (if (reduce\r\n          (fn [r e] (or r e))\r\n          false\r\n          args)\r\n      (not (every? true? args))\r\n      false\r\n      ))", "problem": 83, "user": "50588ff1e4b06522596eba7e"}, {"code": "(fn [& bools] (and (boolean (some true? bools)) (not-every? true? bools)))", "problem": 83, "user": "4fca2a13e4b0ee37620e184d"}, {"code": "#(= (set %&) #{true false})", "problem": 83, "user": "504f3fa3e4b0a02f9cffde62"}, {"code": "(fn [& args] (boolean (and\n            (some #(= true %) args)\n            (not (every? #(= true %) args)))))", "problem": 83, "user": "504e108ce4b078edc5f593b3"}, {"code": "#(boolean (and (some true?  %&)\n               (some false? %&)))", "problem": 83, "user": "50586354e4b06522596eba78"}, {"code": "(fn [& args]\n  (if (some identity args)\n    (not (every? true? args)) false))", "problem": 83, "user": "50517ebfe4b0a561d07d8f06"}, {"code": "(fn [& bs] (= #{true false} (into #{} bs)))", "problem": 83, "user": "503d129fe4b06c4e0e1fa254"}, {"code": "(fn [& bools]\n  (let [trues (count (filter true? bools))]\n    (and (> trues 0) (not= trues (count bools)))))", "problem": 83, "user": "505bd09fe4b032b709c81373"}, {"code": "#(if (some true? %&) (not-every? true? %&) false)", "problem": 83, "user": "4fc6e1a8e4b0ee37620e181d"}, {"code": "#(= 2 (count (set %&)))", "problem": 83, "user": "5054bc87e4b0b1b9d1860eb0"}, {"code": "(fn [& bools]\n  (if (and (some true? bools) (not (every? true? bools))) \n  true \n  false))", "problem": 83, "user": "4ed98b40535d10e5ff6f5307"}, {"code": "(fn half-truth [& args]\n  (cond\n   (empty? (filter identity args)) false\n   (= (count (filter identity args)) (count args)) false\n   :else true))", "problem": 83, "user": "4eb6f065535d7eef30807372"}, {"code": "#(if (and (some (partial = true) %&) (some (partial = false)  %&)) true false)", "problem": 83, "user": "50310b8be4b05b7df5a0b84d"}, {"code": "(fn f [& l]\n  (boolean\n    (and\n      (some identity l)\n      (not-every? identity l))))", "problem": 83, "user": "504e72cee4b0f6ff3350c4b4"}, {"code": "#(if (and (some true? %&) (not (every? true? %&))) true false)", "problem": 83, "user": "4f83ae07e4b033992c121c21"}, {"code": "(fn [& xs]\n  (and\n    (reduce #(or %1 %2) false xs)\n    (not (reduce #(and %1 %2) true xs))))", "problem": 83, "user": "5063b9a0e4b075d771da6f9d"}, {"code": "(fn [& bs]\n  (let [trues (count (filter true? bs))]\n    (and (not (zero? trues))\n      (< trues (count bs)))))", "problem": 83, "user": "504c8165e4b09724c857af31"}, {"code": "(fn [& bs] (not \n  (or (nil? (some true? bs)) (every? true? bs))))", "problem": 83, "user": "50563ae2e4b0ce54f56f0405"}, {"code": "(fn ht [& x]\n  (and (not-every? true? x) (not-every? false? x))\n)", "problem": 83, "user": "50588af1e4b06522596eba7d"}, {"code": "(fn [& xs] (and (not-every? false? xs) (not-every? true? xs)))", "problem": 83, "user": "5060d137e4b0dc10a69545a0"}, {"code": "not=", "problem": 83, "user": "5036eba7e4b0af0658af77a5"}, {"code": "#(and (boolean(some true? %&)) (boolean (some false? %&)))", "problem": 83, "user": "504f191ae4b0e7ad84dbc4ba"}, {"code": "(fn [& args] (= 2 (count (map key (group-by identity args)))))", "problem": 83, "user": "5063fe48e4b075d771da6f9e"}, {"code": "#(and (not (every?  true? %& )) (not (every? false? %&) ))", "problem": 83, "user": "505fc8e3e4b08f2a82ad10b6"}, {"code": "(fn a [x & more] (= (count (distinct (cons x more))) 2))", "problem": 83, "user": "4f72147ae4b07046d9f4f01b"}, {"code": "(fn [& x] \n  (every? identity\n  [(some identity x)\n  (not (every? identity x))]))", "problem": 83, "user": "504e3aaae4b0f6ff3350c487"}, {"code": "(fn [& args] (and (boolean (some true? args)) (not (every? true? args))))", "problem": 83, "user": "4e4be570535dc968683fc4d8"}, {"code": "(fn [& s]\n  (let [i (fn [x] x)]\n    (not (not (and\n      (some i s) (not-every? i s))))))", "problem": 83, "user": "4f6fd91ae4b07046d9f4efed"}, {"code": "(fn [& bools] (and (reduce #(or %1 %2) bools) (not (reduce #(and %1 %2) bools))))", "problem": 83, "user": "504e685fe4b0f6ff3350c4ae"}, {"code": "(fn half-truth [& iseq]\n  (let [len (count iseq)\n        tlen (count (filter #(and % true) iseq))]\n    (if (and\n         (> len 1)\n         (> tlen 0)\n         (> len tlen))\n      true\n      false)))", "problem": 83, "user": "4f046d70535dcb61093f6bc5"}, {"code": "(fn [& b]\n  (and (true? (some true? b)) (true? (some false? b))))", "problem": 83, "user": "50657775e4b0deb876850599"}, {"code": "(fn\n                    \n                    [& args]\n                    (let [true-count (count (remove false? args))]\n                    (and\n                      (< 0 true-count)\n                      (< true-count (count args)))))", "problem": 83, "user": "4f07bc41535dcb61093f6c2c"}, {"code": "(fn half-truth\n  [e & l]\n  (loop [e e tmp l]\n    (if (empty? tmp)\n      false\n      (if (or (and e (not (first tmp)))\n              (and (not e) (first tmp)))\n        true\n        (recur (first tmp) (rest tmp))))))", "problem": 83, "user": "5046f909e4b03b02161376b5"}, {"code": "not=", "problem": 83, "user": "5028a1dae4b01614d1633ff9"}, {"code": "(fn [& xs]\n  (cond\n    (every? #(= % true) xs) false\n    (some   #(= % true) xs) true\n    :else false))", "problem": 83, "user": "50611456e4b0dc10a69545a5"}, {"code": "(fn [& s] (true? (and (some true? s) (some false? s))))", "problem": 83, "user": "4edb4c7c535d10e5ff6f5318"}, {"code": "(fn [& xs]\n  (and (not (nil? (some #(= true %) xs)))\n(not (every? #(= true %) xs))))", "problem": 83, "user": "506c2c9be4b080c1a96bd6be"}, {"code": "(fn half-truth\r\n  [& xs]\r\n  (and\r\n   (not (every? identity xs))\r\n   (boolean (some identity xs))))", "problem": 83, "user": "4f2942ace4b0d6649770a01e"}, {"code": "(fn [& args] (and (not-every? true? args) (boolean (some true? args))))", "problem": 83, "user": "4e5f034b535d8a8b8723a2d9"}, {"code": "(fn [& x] (true? (and\n                            (some true? x)\n                            (not (every? true? x)))))", "problem": 83, "user": "506c0a02e4b0eda3100c090d"}, {"code": "not=", "problem": 83, "user": "5040edf4e4b0ff5d2cc40db5"}, {"code": "#(and (= true (some true? %&)) \n      (= true (some false? %&)))", "problem": 83, "user": "506e0e5ae4b09350ab4199eb"}, {"code": "#(true? (and (some true? %&) (some false? %&)))", "problem": 83, "user": "506617c3e4b03d366d7cb2ab"}, {"code": "#(and (not= nil (some true? %&)) (not-every? true? %&))", "problem": 83, "user": "50705072e4b07bd6ad9b9f27"}, {"code": "#(and (not-every? true? %&) (not-every? false? %&))", "problem": 83, "user": "5054c7e1e4b0b1b9d1860eb2"}, {"code": "(fn [& c] (true? (and (some identity c) (not-every? identity c))))", "problem": 83, "user": "505f55d3e4b08f2a82ad10b0"}, {"code": "not=", "problem": 83, "user": "4f614976e4b0defedf855fbb"}, {"code": "#(and (or (some true? %&) false) (not-every? true? %&))", "problem": 83, "user": "507056b8e4b07bd6ad9b9f29"}, {"code": "(fn [& more] (if (= (reduce #(concat [] [(or (first %1) %2) (and (second %1) %2)]) [false true] more) [true false]) true false))", "problem": 83, "user": "505dcfc8e4b0e6aca564be0d"}, {"code": "(fn [& args] (and (not-every? false? args) (not-every? true? args)))", "problem": 83, "user": "506b016de4b0a2a5463de37f"}, {"code": "(fn [& xs]\n  (and (boolean (some identity xs)) \n       (not-every? identity xs)))", "problem": 83, "user": "4e77c1db535d324fb2983d72"}, {"code": "not=", "problem": 83, "user": "50645e12e4b007509339a58a"}, {"code": "(fn [& x] (boolean (and (some true? x) (not-every? true? x))))", "problem": 83, "user": "5065faf9e4b0313a384e5645"}, {"code": "#(boolean(and (some false? %&) (some true? %&)))", "problem": 83, "user": "502ade49e4b0614b52996120"}, {"code": "(fn [& args] (and (false? (every? true? args)) (not= nil (some true? args))))", "problem": 83, "user": "4dbac43b535d1e037afb21ac"}, {"code": "(fn [& l] (boolean (and (some true? l) (not (every? true? l)))))", "problem": 83, "user": "507437c2e4b054001656acd0"}, {"code": "(fn [& l] (< 1 (count (set l))))", "problem": 83, "user": "5034b0e1e4b062bc5d7ae167"}, {"code": "(fn [& bools]\r\n      (if(and (some true? bools) (some false? bools)) true\r\n        false))", "problem": 83, "user": "5060c117e4b024449d699b5d"}, {"code": "(fn most [& args]\n  (boolean (and (some true? args) (not (every? true? args)))))", "problem": 83, "user": "50763574e4b0a894bb95bf3d"}, {"code": "#(and (not-every? true? %&)\n      (not-every? false? %&))", "problem": 83, "user": "506a1985e4b01dc6af13f83e"}, {"code": "(fn f[x & y]\r\n  (let [c (cons x y)]\r\n(if (every? true? c)\r\n    false\r\n\t(if (some true? c)\r\n      true\r\n      false\r\n      )\r\n)))", "problem": 83, "user": "5065bd94e4b0148eb3925aed"}, {"code": "(fn [& args] (if (and (some true? args) (not (every? true? args))) true false))", "problem": 83, "user": "5061cc17e4b0a30dc9a35d34"}, {"code": "#(= #{true false} (set %&))", "problem": 83, "user": "505d4b21e4b0e6aca564be07"}, {"code": "#(= true (some false? %&) (some true? %&))", "problem": 83, "user": "50783762e4b0fc74642bff67"}, {"code": "(fn [& args]\n  (let [num-true (count (filter identity args))]\n    (and (> num-true 0) (< num-true (count args)))))", "problem": 83, "user": "4fceef7ae4b03432b189f40a"}, {"code": "(fn [& conditions]\r\n  (let [n (count (filter true? conditions))]\r\n      (and (> n 0) (not= n (count conditions))))\r\n  )", "problem": 83, "user": "50481b70e4b0ec70b3ef8d98"}, {"code": "(fn [& args]\n  (and (not (reduce #(and %1 %2) true args)) (reduce #(or %1 %2) false args)))", "problem": 83, "user": "504eff22e4b0e7ad84dbc4a9"}, {"code": "(fn [& args] (and (if (= (some true? args) nil) false (some true? args)) (> (count (into #{} args)) 1)))", "problem": 83, "user": "507a9b29e4b08327cd804a6e"}, {"code": "(fn [& bools]\n  (if (and \n    (some #(= true %) bools)\n    (not (every? #(= true %) bools))\n  ) true false\n))", "problem": 83, "user": "506755b3e4b03d366d7cb2bc"}, {"code": "(fn mostly-true [& xs]\n  (cond (reduce #(and %1 %2) xs) false\n        :else (reduce #(or %1 %2) xs)))", "problem": 83, "user": "50366589e4b0fbe0a74d26c3"}, {"code": "not=", "problem": 83, "user": "4f8b05d2e4b02e764a0a5176"}, {"code": "#(apply not= %&)", "problem": 83, "user": "4e72dd5d535d5021c1a89667"}, {"code": "(fn [& col]\n  (let\n    [trues (filter #(true? %) col)]\n    (and\n      (if (seq trues) true false)\n      (not=\n        (count col)\n        (count trues)))))", "problem": 83, "user": "507a08e4e4b08327cd804a67"}, {"code": "#(boolean (and (some true? %&) (some false? %&)))", "problem": 83, "user": "507a396be4b08327cd804a69"}, {"code": "(fn [& b]\n  (and (reduce #(or %1 %2) b) (not (reduce #(and %1 %2) b))))", "problem": 83, "user": "507fbd77e4b089ade05efbd3"}, {"code": "(fn mfn [& x]\r\n  (and (= false (every? #{true} x)) (= true (some #{true} x)))\r\n)", "problem": 83, "user": "506b437de4b0eda3100c0906"}, {"code": "(fn [& rest] (if (and (not-every? identity rest) (some identity rest)) true false))", "problem": 83, "user": "504db141e4b021508a333965"}, {"code": "(fn [& coll] (if (every? true? coll) false (if (some true? coll) true false)))", "problem": 83, "user": "5062bc46e4b05ac47bc68d68"}, {"code": "(fn [& v] (and (true? (some true? v)) (not-every? true? v)))", "problem": 83, "user": "507c7c8be4b0b083f3ff82ef"}, {"code": "(fn [& args]\n  (boolean (and\n    (some identity args)\n    (some not args))))", "problem": 83, "user": "506ab9bae4b05d3b7762c74c"}, {"code": "(fn [& args] (not (nil? (second  ( partition-by identity args )\n))))", "problem": 83, "user": "50807940e4b01a93d3f38e44"}, {"code": "(fn [& args] (not (or (nil? (some true? args)) (nil? (some false? args)))))", "problem": 83, "user": "507eddf4e4b06ce648bcdbfa"}, {"code": "(fn [ & args] (= #{true false} (set args)))", "problem": 83, "user": "4db85310535d1e037afb218b"}, {"code": "(fn [& x] (= 2 (count (set (list* x)))))", "problem": 83, "user": "4fd11a93e4b04c3a95aa040a"}, {"code": "(fn [& x]\n  (if (or (every? true? x) (every? false? x))\n    false\n    (some true? x)))", "problem": 83, "user": "507ef25ce4b0f753b6f9788e"}, {"code": "#(loop [b %&\n        a true\n        s false]\n    (if (empty? b)\n      (and s (not a))\n      (recur\n        (rest b)\n        (and a (first b))\n        (or s (first b)))))", "problem": 83, "user": "4f42ae16e4b0d7d3c9f3fd09"}, {"code": "(fn [& x ]\n  (boolean (and (some #{true} x) (not (every? #{true} x)))))", "problem": 83, "user": "5007cdb9e4b0b17c647f5227"}, {"code": "#(and (not-every? not %&) (not-every? true? %&))", "problem": 83, "user": "5088082ae4b0198722bd9854"}, {"code": "(fn [& lista]\r\n  (let [qt (get (frequencies lista) true 0)]\r\n      (and (> qt 0)\r\n           (not= qt (count lista)))\r\n      ))", "problem": 83, "user": "50576483e4b001218172198b"}, {"code": "(fn [& args] (true? (and (some false? args) (some true? args))))", "problem": 83, "user": "506ef8c3e4b09350ab4199f4"}, {"code": "(fn [& xs]\n  (boolean (and (some true? xs) (some false? xs))))", "problem": 83, "user": "4fc7ddffe4b0ee37620e182b"}, {"code": "(fn [& more] (if (and (not (every? true? more)) (some true? more)) true false))", "problem": 83, "user": "5084cb7de4b0fb8f40674bfb"}, {"code": "(fn [& args] \n  (true? (and (some not args) (some true? args))))", "problem": 83, "user": "508bed64e4b0be79e5b189cf"}, {"code": "(fn [& a] (not (apply = a)))", "problem": 83, "user": "4fc8f671e4b0ee37620e1840"}, {"code": "#(not (not (and (some true? %&) (not (every? true? %&)))))", "problem": 83, "user": "507e68abe4b085af06e3afd2"}, {"code": "(fn sum [& args] (if  (= (filter #(= % true) args) args) false (if (= (filter #(= % true) args) ()) false true ) ))", "problem": 83, "user": "50646c01e4b007509339a58b"}, {"code": "(fn [& bs] (if (and (some #{true} bs) (not-every? #{true} bs)) true false))", "problem": 83, "user": "4db86aee535d1e037afb2193"}, {"code": "(fn [& s]\n  (let [ss (set s)]\n    (and (< 1 (count ss)) (contains? ss true)))\n)", "problem": 83, "user": "50901b2ee4b0ea685a20f774"}, {"code": "#(\r\n   if(= nil (and (some true? (apply vector %&))\r\n       (some false? (apply vector %&)))) false true)", "problem": 83, "user": "506717e2e4b03d366d7cb2ba"}, {"code": "(fn f [& args] \n  (if (every? #(= true %)  args) false \n  (if (every? #(= false %) args) false true)))", "problem": 83, "user": "505dd5c4e4b0e6aca564be0e"}, {"code": "(fn [& vals]\n  (let \n    [relevant-truths (partition-by identity vals)]\n    (if (= 1 (count relevant-truths))\n      (= false (first relevant-truths))\n      true\n    )\n  )\n)", "problem": 83, "user": "508bf05ae4b0f17d83ea26aa"}, {"code": "not=", "problem": 83, "user": "506fd0afe4b07bd6ad9b9f23"}, {"code": "(fn [& xs]\n  (and \n  (not-every? identity xs)\n  (not-every? #(not %) xs)))", "problem": 83, "user": "5089ebfee4b03217b26a539f"}, {"code": "#(and (not-every? true? %&) (not (not-any? true? %&)))", "problem": 83, "user": "4f85a75ce4b033992c121c48"}, {"code": "not=", "problem": 83, "user": "5052ab7ee4b0a561d07d8f20"}, {"code": "(fn [& coll]\n  (and (not-every? false? coll) (not-every? true? coll)))", "problem": 83, "user": "506b8242e4b0eda3100c090a"}, {"code": "(fn [ & args]\n  (not (nil?\n    (and (some true? args) (some false? args)))))", "problem": 83, "user": "5097b556e4b00ad8bab4e970"}, {"code": "#(and (not (nil? (some true? %&))) (not-every? false? %&) (not-every? true? %&))", "problem": 83, "user": "5097a95fe4b00ad8bab4e96e"}, {"code": "#(= 2 (count (set %&)))", "problem": 83, "user": "5013193ae4b0f26a0e3320ab"}, {"code": "(fn [& x] (< 1 (count (distinct x))))", "problem": 83, "user": "500b61b1e4b03d00572d2d81"}, {"code": "(fn [& coll] \n  (if (or\n    (= 0 (count ((fn [x] (remove false? x)) coll)))\n    (= (count coll) (count ((fn [x] (remove false? x)) coll))))\n   false\n   true))", "problem": 83, "user": "5078300de4b0fc74642bff66"}, {"code": "(fn [& args]\n  (and (reduce #(or %1 %2) args)\n       (not (reduce #(and %1 %2) args))))", "problem": 83, "user": "5097ea89e4b087ccf61a7af4"}, {"code": "(fn [& xs] (let [s (into #{} xs)] (and (contains? s true) (contains? s false))))", "problem": 83, "user": "4dc537fd535d8a4b2fd74282"}, {"code": "#(> (count (distinct %&)) 1)", "problem": 83, "user": "4f49108ae4b0d56e7bb92be5"}, {"code": "(fn [& args]\n  (if (and (some #(= % true) args) (some #(= % false) args))\n      true\n      false))", "problem": 83, "user": "5098f5d6e4b0cae2931060a4"}, {"code": "#(and (not (nil? (some identity %&)))\n  (not (every? identity %&)))", "problem": 83, "user": "4dbdc898535d020aff1edf4a"}, {"code": "(fn half-truth [& bools]\n  (let [b (set bools)]\n    (apply #(and %1 %2) (map (partial contains? b) [true false]))))", "problem": 83, "user": "509e8da7e4b08df8156e9e2f"}, {"code": "(fn half-truth [& args]\n  (cond\n    (reduce #(and %1 %2) args) false\n    :else (reduce #(or %1 %2) args)))", "problem": 83, "user": "50843a4ae4b0c98812d0788b"}, {"code": "(fn[& args]( if (reduce #(and %1 %2) args) false (if (reduce #(or %1 %2) args) true false)))", "problem": 83, "user": "4f542fd9e4b0a7574ea717db"}, {"code": "#(not (or (not-any? true? %&) (every? true? %&)))", "problem": 83, "user": "50996a38e4b0cae2931060b3"}, {"code": "(fn [& bools] (true? (and (some true? bools)\n              (not (every? true? bools)))))", "problem": 83, "user": "4e0febe6535d04ed9115e7be"}, {"code": "not=", "problem": 83, "user": "4ec3650f535dcc7ae8597d56"}, {"code": "#(true? \n  (and\n       (some true? %&)\n       (not-every? true? %&)))", "problem": 83, "user": "5086ca15e4b004985b776e62"}, {"code": "(fn [& x] (if (reduce #(and %1 %2) x) false (reduce #(or %1 %2) x)))", "problem": 83, "user": "50981062e4b04e098a4c7268"}, {"code": "(fn [& x] (> (count (distinct x)) 1))", "problem": 83, "user": "4f956072e4b0dcca54ed6ccf"}, {"code": "(fn [& col] (if (and (some (partial = true) col)\n                     (not (reduce (partial = true) col))  )true false) )", "problem": 83, "user": "50a7b76de4b090657f4a5cdc"}, {"code": "(fn [& coll]\n  (loop [c coll, acc false, cnt 0]\n    (if (empty? c)\n      (if (= (count coll) cnt) false acc)\n      (let [h (first c), t (rest c)]\n        (if h\n          (recur t true (inc cnt))\n          (recur t acc cnt))))))", "problem": 83, "user": "50a83794e4b054305ba5a831"}, {"code": "(fn [& args] (and (boolean (some identity args)) (not (every? identity args))))", "problem": 83, "user": "5027b41ee4b01614d1633fee"}, {"code": "(fn [& args]\n  (and (not-every? true? args) (not-every? false? args)))", "problem": 83, "user": "4f1ae082535d64f603146470"}, {"code": "(fn [& args]\n   (not(or \n        (every? #(= true %) args)\n        (every? #(= false %) args)\n    ))\n  )", "problem": 83, "user": "50217818e4b00bba4502f7a7"}, {"code": "(fn [& xs]\n  (= 2 (count (distinct xs))))", "problem": 83, "user": "50989786e4b04e098a4c7274"}, {"code": "not=", "problem": 83, "user": "50a83315e4b054305ba5a830"}, {"code": "not=", "problem": 83, "user": "5098bcfee4b0cae2931060a1"}, {"code": "(fn [& s]\r\n  (and\r\n    (not (reduce #(and % %2) true s))\r\n    (reduce #(or % %2) false s)))", "problem": 83, "user": "509c03f3e4b085ae113522a8"}, {"code": "(fn [& x] \n  (or \n    (and (some true? x) (not-every? true? x))\n    false))", "problem": 83, "user": "4ed152d5535d44c135fd68cc"}, {"code": "(fn [& bool] (boolean (and (some true? bool) (some false? bool))))", "problem": 83, "user": "50a4cbbee4b0344e360f3bc2"}, {"code": "not=", "problem": 83, "user": "50a4f36be4b0344e360f3bc9"}, {"code": "(fn [& bs]\n  (if (or (every? true? bs) (every? false? bs))\n      false true))", "problem": 83, "user": "4eb9c82d535dfed6da9c6d5c"}, {"code": "(fn [first & rest] (= true (apply (complement =) first rest)))", "problem": 83, "user": "500ec210e4b00fff93030f9d"}, {"code": "(fn [& xs] (and ( < 0 (count (filter true? xs)) ) ( < 0 (count (filter false? xs)) )))", "problem": 83, "user": "50ab8ae3e4b01d6eb43ce9a0"}, {"code": "(fn [& args] (every? true? (reduce #(list (or (first %) %2) (or (second %) (not %2))) [false false] args)))", "problem": 83, "user": "508ee17ae4b0706b2ed3ef8d"}, {"code": "#(and (not= [] (filter identity %&)) (not= [] (filter not %&)))", "problem": 83, "user": "5092fe10e4b097f48cc3857e"}, {"code": "#(and (contains? (set %&) true) (contains? (set %&) false))", "problem": 83, "user": "5099aea3e4b0efbae1fbc0a0"}, {"code": "(fn [& p] (and (not-every? #(= true %) p) (not-every? #(= false %) p)))", "problem": 83, "user": "50ad7888e4b0a40c9cfb08c7"}, {"code": "#(true? \n  (and\n    (some true? %&)\n    (some false? %&)))", "problem": 83, "user": "50ae22c3e4b0a40c9cfb08d0"}, {"code": "(fn [& tf]\n  (cond (every? true? tf) false\n        (some true? tf) true\n        :t false))", "problem": 83, "user": "4dd0e8f7535da60f04a96e57"}, {"code": "(fn [& blns]\n  (and (not-every? true? blns) (not-every? false? blns)))", "problem": 83, "user": "5084c43be4b0fb8f40674bfa"}, {"code": "(fn [& args] (true? (and (some true? args) (some false? args))))", "problem": 83, "user": "5078d366e4b08327cd804a5b"}, {"code": "#(true? (and (some true? %&) (some false? %&)))", "problem": 83, "user": "50b1d166e4b03ea880433554"}, {"code": "(fn half-truth [& args] (if (= (count (group-by identity args)) 2) true false))", "problem": 83, "user": "4f03bf5e535dcb61093f6b5d"}, {"code": "not=", "problem": 83, "user": "4ebbc1f6535dfed6da9c6d72"}, {"code": "#(= #{true false} (set %&))", "problem": 83, "user": "508e13abe4b0f17d83ea26c7"}, {"code": "(fn [& x] (and (not (reduce #(and %1 %2) x)) (reduce #(or %1 %2) x) ))", "problem": 83, "user": "50956c2be4b087f34d351ab2"}, {"code": "(fn [& args]\n  (let [size (count args)]\n    (not= 0 \n      (mod (reduce + (map (fn [x] (if x 1 0)) args)) size))))", "problem": 83, "user": "50b11fbce4b009df37c708cb"}, {"code": "(fn [& args]\n  (and (not-every? true? args) (not-every? false? args)))", "problem": 83, "user": "509c2c55e4b085ae113522ab"}, {"code": "#(and (contains? (set %&) false) (contains? (set %&) true))", "problem": 83, "user": "50b65966e4b0a86f8358ca6c"}, {"code": "(fn truth-83 [& bools]\n  (if (and (some true? bools) (some false? bools))\n    true\n    false))", "problem": 83, "user": "501b1a8ee4b0b12d9c5f4d81"}, {"code": "(fn [& args] \n  (let [k (set args)]\n    (if (or (= (count k) 1) (= (first k) false))\n      false\n      true)))", "problem": 83, "user": "50a5f72fe4b0aa96157e2611"}, {"code": "(fn [& v]\n  (true? (and (some true? v) (not (every? true? v)))))", "problem": 83, "user": "50aab057e4b056ee0193586b"}, {"code": "#(and\n  (not-every? identity %&)\n  (not (not-any? identity %&)))", "problem": 83, "user": "4f253a49e4b0d66497709ff3"}, {"code": "(fn [& xs]\n    (boolean\n     (and (some identity xs)\n          (some (comp not identity) xs))))", "problem": 83, "user": "502873a8e4b01614d1633ff8"}, {"code": "(fn[& x] (= 2 (count (distinct (seq x)))))", "problem": 83, "user": "506406c8e4b075d771da6f9f"}, {"code": "(fn [& r]\n   (let [p (some true? r)]\n     (if p\n       (if (every? true? r)\n          false\n          true)\n       false))\n   )", "problem": 83, "user": "50868795e4b004985b776e5e"}, {"code": "(fn [& a]\n   (if\n       (or (=\n             (count (filter (fn [x] (= true x)) a))\n             (count a))\n           (=\n            (count (filter (fn [x] (= true x)) a))\n            0))\n     false\n     true))", "problem": 83, "user": "50b64b55e4b0a86f8358ca6b"}, {"code": "not=", "problem": 83, "user": "509160dae4b0742c82730aef"}, {"code": "(fn [& arg]\n  (if (reduce #(and %1 %2) arg)\n      false\n      (reduce #(or %1 %2) arg)))", "problem": 83, "user": "50b0cffae4b009df37c708c5"}, {"code": "(fn [& xs]\n  (and (not (reduce #(and %1 %2) xs))\n       (reduce #(or %1 %2) xs)))", "problem": 83, "user": "50acbd15e4b071b89ef26234"}, {"code": "(fn [& a] (not (apply = a)))", "problem": 83, "user": "4f9920a3e4b0dcca54ed6cfc"}, {"code": "#(= 2 (count (set %&)))", "problem": 83, "user": "4ee7d6d8535d93acb0a66870"}, {"code": "(fn [& colls]\n  (boolean (and\n    (some true? colls)\n    (some false? colls))))", "problem": 83, "user": "50b47c46e4b0c464d223d1b8"}, {"code": "(fn [& bs] (if (and (some true? bs) (not (every? true? bs))) true false))", "problem": 83, "user": "4fdf566fe4b05e33b9224f99"}, {"code": "(fn [& args] (let [c (reduce #(+ %1 (if %2 1 0)) 0 args)] (and (> c 0) (< c (count args)))))", "problem": 83, "user": "50112acee4b0d82cfac69f4c"}, {"code": "(fn [& x] (and (not-every? #(= false %) x) (not-every? #(= true %) x)))", "problem": 83, "user": "50982cc7e4b04e098a4c726c"}, {"code": "(fn [& args] (not(apply = args)))", "problem": 83, "user": "50aca31fe4b071b89ef26230"}, {"code": "(fn [& l] (and (if (some #(= true %) l) true false)\n            (not-every? #(= true %) l)))", "problem": 83, "user": "509eeb3be4b08df8156e9e37"}, {"code": "(fn [& args] \n  (true? (and (some true? args)\n              (some false? args))))", "problem": 83, "user": "50812debe4b01a93d3f38e4c"}, {"code": "(fn f [& n]\n  (cond\n    (= 1 (count n)) false\n    (= (first n) (not (second n))) true\n    true (apply f (rest n))\n    )\n  )", "problem": 83, "user": "50ae5659e4b0a40c9cfb08d2"}, {"code": "#(and (contains? (set %&) true) (contains? (set %&) false))", "problem": 83, "user": "50b25f2ce4b03ea88043355f"}, {"code": "not=", "problem": 83, "user": "4f89d489e4b033992c121c7e"}, {"code": "(fn [& args] (if (and (some identity args) (not (every? identity args))) true false))", "problem": 83, "user": "50921f9ae4b09a7d0b586de1"}, {"code": "(fn [& coll] (= (count (set coll)) 2))", "problem": 83, "user": "4f1e4ab5535d64f603146496"}, {"code": "(\n  fn sol [ & coll ](\n\t\t= #{false true } ( set coll )\n\t) \n)", "problem": 83, "user": "50bf7b72e4b0ffd967a66cc1"}, {"code": "(fn [& bs]\n  (> (count (group-by true? bs)) 1)\n)", "problem": 83, "user": "503f872ee4b00d1a725ff2ac"}, {"code": "(fn [& args] \n  (if (some true? args)\n      (not-every? true? args)\n      false))", "problem": 83, "user": "4f327844e4b0d6649770a092"}, {"code": "(fn[& args](and (not-every? #(false? %) args) (not-every? #(true? %) args)))", "problem": 83, "user": "5093ca51e4b097f48cc38585"}, {"code": "(fn [& args]\n  (and\n    (not (every? identity args))\n    (boolean (some identity args))))", "problem": 83, "user": "50c7e98ee4b00bb60fe0c53a"}, {"code": "#(and (not (every? false? %&)) (not (every? true? %&)))", "problem": 83, "user": "50c75d38e4b00bb60fe0c532"}, {"code": "#(and (not-every? true? %&) (boolean (some true? %&)))", "problem": 83, "user": "4ea5ba92535d7eef308072d9"}, {"code": "(fn [& x]\n  (and \n    (not (empty? (filter (partial = true) x)))\n    (not (empty? (filter (partial = false) x)))\n  )\n)", "problem": 83, "user": "50bfbf25e4b05ae8c1cbbd9b"}, {"code": "#(and (not (not (some true? %&)))\r\n      (not-every? true? %&))", "problem": 83, "user": "50608ea0e4b07251188e4456"}, {"code": "not=", "problem": 83, "user": "4f3ca5a6e4b0e243712b1f53"}, {"code": "(fn [& x] (= #{false true} (set x)))", "problem": 83, "user": "50c8697ce4b00bb60fe0c53f"}, {"code": "(fn [& args] \n  (and (contains? (set args) true) \n       (contains? (set args) false)))", "problem": 83, "user": "4eca7a87535d6d7199dd3705"}, {"code": "(fn [& bools] (and (not (every? true? bools)) (not (nil? (some true? bools)))))", "problem": 83, "user": "50cb4cf6e4b0f78a8e1645b4"}, {"code": "(fn [& x] (boolean (and (some true? x) (some false? x))))", "problem": 83, "user": "50c6fad1e4b00bb60fe0c52d"}, {"code": "(fn [& args]\n            (let [n (reduce #(if (= true %2)\n                               (+ 1 %1)\n                               %1) 0 args)]\n              (and (> n 0)\n                   (< n (count args)))))", "problem": 83, "user": "509b152be4b0412cdea6eb1e"}, {"code": "(fn [& xs] (not (or (every? true? xs) (every? false? xs))))", "problem": 83, "user": "50c9e5e3e4b0a409464667d7"}, {"code": "(fn[& m] (< 1 (count (distinct m))))", "problem": 83, "user": "50503117e4b0a02f9cffdeb5"}, {"code": "(fn [& s] \n  (let [n \n        (reduce (fn [acc curr] (+ acc (if curr 1 0))) 0 s)] (and (> n 0) (< n (count s)))))", "problem": 83, "user": "50ce09e6e4b0ffc302be4bc6"}, {"code": "#(= (count (set %&)) 2)", "problem": 83, "user": "509b89b3e4b03049c49bd678"}, {"code": "(fn xor\n  ([a] (xor a a))\n  ([a b] (not (= a b)))\n  ([a b & z] (not (apply = (concat [a b] z)))))", "problem": 83, "user": "4e7d4544535db169f9c796d0"}, {"code": "(fn [& xs] (if (or (empty? (filter true? xs)) (empty? (filter false? xs))) false true))", "problem": 83, "user": "50733b31e4b0e3170b5a869a"}, {"code": "(fn [& args] \n  (and (true? (some true? args))\n  (false? (every? true? args)))\n  )", "problem": 83, "user": "4f072644535dcb61093f6c20"}, {"code": "(fn [& args]\n   (and (not (nil? (some true? args)))\n        (not (every? true? args))))", "problem": 83, "user": "50ccf729e4b0f7a459302aac"}, {"code": "(fn [& x] (and (not (reduce #(and % %2) x))\n                (reduce #(or % %2) x)))", "problem": 83, "user": "4f8b27b3e4b02e764a0a5179"}, {"code": "(fn [& args] (and (not-every? true? args) (not-every? false? args)))", "problem": 83, "user": "4f03f197535dcb61093f6b84"}, {"code": "(fn [& bools]\n  (if\n    (and\n     (some true? bools)\n     (not (every? true? bools)))\n    true\n    false))", "problem": 83, "user": "4f0412f8535dcb61093f6b99"}, {"code": "(fn [& xs]\n  (->> xs (map true?) (reductions conj #{}) (some #(= 2 (count %))) true?))", "problem": 83, "user": "508157b2e4b0946d0443855c"}, {"code": "(fn [& bools] \n  (or (and (some true? bools) (not (every? true? bools)))\n      false))", "problem": 83, "user": "4e71a12c535d5021c1a8964f"}, {"code": "(fn t[& c](if(and (some false? c) (some true? c))true false))", "problem": 83, "user": "50d179c7e4b05a71a896ef56"}, {"code": "(fn [& args] (and (true? (some true? args)) (not (every? true? args))))", "problem": 83, "user": "50b24a2fe4b03ea88043355c"}, {"code": "(fn [& args] (= 2 (count (group-by identity  args))))", "problem": 83, "user": "50cae881e4b0f75dcc9a6e51"}, {"code": "(fn [& args]\n  (if (and (some true? args)\n       (not (every? true? args))) true false))", "problem": 83, "user": "4e7e4a1f535db169f9c7970c"}, {"code": "(fn [& b] (= 2 (count (set b))))", "problem": 83, "user": "50d8f4b6e4b01f0871336e74"}, {"code": "(fn [& tests]\n   (cond\n    (every? true? tests) false\n    (some true? tests) true\n     :else false))", "problem": 83, "user": "50493b52e4b06e84b772a23e"}, {"code": "(fn [ & x] ( and \n              (reduce #(or %1 %2 ) false x) \n              (not (reduce #(and %1 %2) true x))))", "problem": 83, "user": "50cf2267e4b0e61f11ddcd8c"}, {"code": "(fn half-truth [& s]\n  (= (count (set s)) 2))", "problem": 83, "user": "4f91fd31e4b0dcca54ed6ca8"}, {"code": "(fn [& bs] (or (and (some true? bs) (not-every? true? bs)) false))", "problem": 83, "user": "5095f761e4b0ba05ca7aebfd"}, {"code": "(fn [& args]\n  (and (boolean (some #{true} args)) (not-every? #{true} args)))", "problem": 83, "user": "50a7ef7fe4b090657f4a5ce0"}, {"code": "not=", "problem": 83, "user": "50ae0d24e4b0a40c9cfb08ce"}, {"code": "(fn this [& p]\n  (let [has-true-f (fn [l _has-true]\n                          (cond (= (count l) 0) _has-true\n                                :else (recur (rest l) (or _has-true (true? (first l))))))\n               has-false-f (fn [l _has-false]\n                          (cond (= (count l) 0) _has-false\n                                :else (recur (rest l) (or _has-false (false? (first l))))))]\n           (and (has-true-f p false) (has-false-f p false))))", "problem": 83, "user": "5021f0b3e4b00bba4502f7ac"}, {"code": "(fn [& xs]\n  (if (and (some #(= false %) xs) (some #(= true %) xs)) \n    true\n    false))", "problem": 83, "user": "50da34e4e4b0f31830755b3c"}, {"code": "(fn [& xs] (not (or (empty? (for [i xs :when i] i)) (empty? (for [i xs :when (not i)] i)))))", "problem": 83, "user": "50e3cf55e4b01912b3285c45"}, {"code": "(fn [ & col]\n  (loop [t false f false col col]\n    (cond\n     (= '() col) (and t f)\n     (= (first col) true)\n     (recur true f (rest col))\n     (= (first col) false)\n     (recur t true (rest col)))))", "problem": 83, "user": "50bfe725e4b080409b860f26"}, {"code": "(fn [& xs] (and (not-every? true? xs) (true? (some true? xs))))", "problem": 83, "user": "50e3ddd4e4b01912b3285c47"}, {"code": "(fn some-are-true [& args]\n  (if (and (some true? args) (some false? args))\n    true\n    false\n  )\n)", "problem": 83, "user": "50e496e8e4b0cb9ec68fbca0"}, {"code": "(fn [& aaa](not(or (every? identity aaa) (every? identity (map not aaa)))))", "problem": 83, "user": "503539dee4b0ed9c821488f6"}, {"code": "(fn\n  [& coll]\n  (not (every? #(= % (first coll)) coll)))", "problem": 83, "user": "4dda44f2535d02782fcbe9f1"}, {"code": "(fn halftruth [& bools] \n  ; (and) will return nil if everything false, which not= false\n  (if (and (some true? bools) (not-every? true? bools))\n    true\n    false))", "problem": 83, "user": "50b8914ce4b0cba0e598b64d"}, {"code": "(fn [& truth]\n  (true? (and (some false? truth) (some true? truth))))", "problem": 83, "user": "508c3d42e4b0f17d83ea26b2"}, {"code": "(fn [& a] (and (boolean (some true? a)) (not-every? true? a)))", "problem": 83, "user": "4db29f98535df7e46ed9b6c1"}, {"code": "not=", "problem": 83, "user": "507f0983e4b0f753b6f97893"}, {"code": "(fn [ & bols]\n     (and (not (nil? (some true? bols)))\n          (not (nil? (some false? bols)))))", "problem": 83, "user": "50e87427e4b0ebbe794eb7e8"}, {"code": "(fn [& args]\n  (< 0 (count (filter true? args)) (count args)))", "problem": 83, "user": "4fedd993e4b0198f34b063bc"}, {"code": "(fn [& x] (and (not (nil? (some identity x))) (not-every? identity x)))", "problem": 83, "user": "50e8ff6be4b0ebbe794eb7f3"}, {"code": "(fn [& s] (let [ntrues (count (filter true? s))]\n            (and (> ntrues 0) (< ntrues (count s)))))", "problem": 83, "user": "50dfb660e4b061dbdced7228"}, {"code": "; this is interesting solution too: not=\n#(= (set %&) #{true false})", "problem": 83, "user": "50de11b2e4b061dbdced7217"}, {"code": "(fn half-truth [& xs] (and (not-every? true? xs) (not-every? false? xs)))", "problem": 83, "user": "50cf94bde4b0abc485cb9bb2"}, {"code": "(fn [& seq] (and \n            (not-every? true? seq)\n            (not (not-any? true? seq))))", "problem": 83, "user": "50d86fe2e4b01f0871336e67"}, {"code": "#(= 2 (count (set %&)))", "problem": 83, "user": "50e7dd5de4b077ad597af36b"}, {"code": "(fn [& coll] \n  (if (and (some true? coll) (not (every? true? coll)))\n    true\n  \tfalse))", "problem": 83, "user": "50bc23e4e4b0594b91591c3c"}, {"code": "#(and (not (nil? (some #{true} %&))) (not-every? #{true} %&))", "problem": 83, "user": "50ed5d1be4b06330c1f87c37"}, {"code": "not=", "problem": 83, "user": "50d0d4c8e4b00b15ecee976a"}, {"code": "#(= #{true false}(set %&))", "problem": 83, "user": "50ed4626e4b01236b1d4983c"}, {"code": "#(= (count (set %&)) 2)", "problem": 83, "user": "50ef4e2be4b0a78662fa2653"}, {"code": "#(and (boolean (some true? %&)) (not-every? true? %&))", "problem": 83, "user": "50ef9a7ae4b0bdaecbb47d9e"}, {"code": "(fn [& args]\n  (boolean (and (some identity args) (not-every? identity args))))", "problem": 83, "user": "50ed3c6be4b01236b1d4983b"}, {"code": "(fn [& b] (= [true false] [(reduce #(or % %2) b) (reduce #(and % %2) b)]))", "problem": 83, "user": "4ff3df0fe4b0678c553fc355"}, {"code": "(fn [& args]\n  (let [s (reduce conj #{} args)]\n    (if (contains? s true)\n      (if (contains? s false) true false) false)))", "problem": 83, "user": "4e6e3aac535d5021c1a89603"}, {"code": "(fn [& arg]\n  (and (reduce #(or %1 %2) arg) (not (reduce #(and %1 %2) arg))))", "problem": 83, "user": "50f0d000e4b0c5f4fa5ddb6f"}, {"code": "(fn [& args]\n  (let [sum (reduce #(+ %1 (if %2 1 0)) 0 args)]\n    (and (> sum 0)\n         (< sum (count args)))))", "problem": 83, "user": "50f0ec9ce4b0d527ce5b30df"}, {"code": "not=", "problem": 83, "user": "50ee145de4b06330c1f87c53"}, {"code": "(fn [& args] (or (and (some identity args) (not-every? identity args)) false))", "problem": 83, "user": "4ec1b090535dfed6da9c6db5"}, {"code": "(fn [& x] (not (or (not-any? true? x) (not-any? false? x))))", "problem": 83, "user": "50ef3e5de4b0a78662fa2652"}, {"code": "not=", "problem": 83, "user": "50ef56dfe4b0bdaecbb47d94"}, {"code": "(fn [& bools]\n  (if (and (some identity bools)\n           (not-every? identity bools))\n    true\n    false))", "problem": 83, "user": "4ffc10aae4b0678c553fc3d6"}, {"code": "(fn [& v ]\n  (true? (and\n   (some true? v)\n   (not (every? true? v)))))", "problem": 83, "user": "4f25c4c4e4b0d66497709ffc"}, {"code": "#(boolean (and (some true? %&) (some false? %&)))", "problem": 83, "user": "50baa66be4b03e68e4411c94"}, {"code": "#(and (not-every? true? %&) (not (nil? (some true? %&))))", "problem": 83, "user": "50f1dedbe4b0897c4366dcd8"}, {"code": "#(boolean (and (some true? %&) (not-every? true? %&)))", "problem": 83, "user": "4ebaf790535dfed6da9c6d6e"}, {"code": "(fn check [& s] (not (or (every? true? s) (every? false? s))))", "problem": 83, "user": "50ed9e8de4b06330c1f87c44"}, {"code": "#(and (boolean (some true? %&)) (not-every? true? %&))", "problem": 83, "user": "50742549e4b054001656accf"}, {"code": "(fn [& l] (and (not-every? true? l) (not (not-any? true? l))))", "problem": 83, "user": "50c4a354e4b0210b849018af"}, {"code": ";;#(= 2 (-> %& distinct count))\n\n;; #(apply not= %&)\n\nnot=", "problem": 83, "user": "503f4759e4b00d1a725ff2a9"}, {"code": "(fn [& coll]\n  (case (and (some identity coll) (not-every? identity coll))\n    true true\n    false false\n    nil false))", "problem": 83, "user": "505aa653e4b021387fb89857"}, {"code": "not=", "problem": 83, "user": "50f17c0de4b06d9538fe2123"}, {"code": "(fn [ & bools]\n    (true? (and (some true? bools) (some false? bools))))", "problem": 83, "user": "50eddbc4e4b06330c1f87c4b"}, {"code": "(fn [& l] (if (and (reduce = l) (first l)) false (reduce #(or %1 %2) l)))", "problem": 83, "user": "4f98b69ae4b0dcca54ed6cf4"}, {"code": "(fn [& x]\n   (if (and (some true? x) (some false? x))\n   true \n   false\n )\n  )", "problem": 83, "user": "50f4894be4b004d364930528"}, {"code": "(fn [x & xs] (not-every? #(= x %) xs))", "problem": 83, "user": "50fbf811e4b0d10d794c19f1"}, {"code": "(fn [& xs] \n  (and (not-every? true? xs)\n       (not-every? false? xs)\n       )\n  )", "problem": 83, "user": "50d8739ae4b01f0871336e68"}, {"code": "#(= #{true, false} (set %&))", "problem": 83, "user": "50e47fa5e4b0cb9ec68fbc9c"}, {"code": "(fn [& args] (true? (and (some true? args) (some false? args))))", "problem": 83, "user": "4f55ab5ee4b0a7574ea71809"}, {"code": "(fn [& bools]\n  (if (some identity bools)\n    (not (every? identity bools))\n    false))", "problem": 83, "user": "50ec4ed7e4b04edc33777046"}, {"code": "(fn [& bs] (and (not (apply = (cons true bs))) (reduce #(or %1 %2) bs)))", "problem": 83, "user": "50fbdacfe4b0d10d794c19f0"}, {"code": "(fn [& xs] \n  (and (not-every? true? xs)\n  \t   (boolean (some true? xs))))", "problem": 83, "user": "50d46d53e4b09cc622d65a69"}, {"code": "(fn [& args] \n  (< 0 ((frequencies args) true 0) (count args)))", "problem": 83, "user": "5006b7d2e4b0678c553fc48c"}, {"code": "(fn partialTrue [& xs] (and (not-every? true? xs) (not (not-any? true? xs))))", "problem": 83, "user": "50ef311fe4b0a78662fa2651"}, {"code": "(fn bool [& args]\n   \t(if (every? false? args)\n      false\n\t\t(and (some true? args) \n        \t(not (every? true? args))\n         \t)\n     )\n  )", "problem": 83, "user": "500a214de4b03d00572d2d74"}, {"code": "not=", "problem": 83, "user": "4e8d5911535d65386fec2133"}, {"code": "not=", "problem": 83, "user": "5102489de4b00c483ae176f6"}, {"code": "(fn [& bs] (let [count_ts (count (filter true? bs))] (and (> count_ts 0) (< count_ts (count bs)))))", "problem": 83, "user": "5097cfcbe4b00ad8bab4e977"}, {"code": "(fn\n  [& args]\n  (and (not-every? true? args) (true? (some true? args))))", "problem": 83, "user": "51008b6fe4b0700a7a02d6e4"}, {"code": "(fn [& args]\n(not (or (every? identity args) (every? not args)))\n  )", "problem": 83, "user": "4edf95a8535d10e5ff6f5342"}, {"code": "(fn [& bs] (= 2 (count (distinct bs))))", "problem": 83, "user": "50d93c53e4b0fd36a4b89223"}, {"code": "(fn [& xs] \n  (if (contains? (set xs) true)\n    (contains? (set xs) false)\n    false))", "problem": 83, "user": "504e9011e4b069badc5a33b7"}, {"code": "(fn [& l]\n    (and\n        (reduce #(or %1 %2) false l) \n        (= (reduce #(and %1 %2) true l) false)))", "problem": 83, "user": "51059d33e4b0380e797c7d5c"}, {"code": "(fn [& s] (and (not-every? false? s) (not (not-any? false? s))))", "problem": 83, "user": "5101192ae4b0bef64c30e266"}, {"code": "(fn [& args] (= (count (set args)) 2))", "problem": 83, "user": "50bce014e4b0594b91591c63"}, {"code": "(fn [& args] (if (and (some #(= % true) args) (some #(= % false) args)) true false))", "problem": 83, "user": "510931ede4b0c71f76895663"}, {"code": "(fn ([a] false) ([a & b] (if (some true? (map #(and (or a %) (not (and a %))) b)) true false)))", "problem": 83, "user": "50a00725e4b08df8156e9e46"}, {"code": "(fn [& args] (and \n              (= true (some not args)) ;at least one false\n              (= true (some (fn [b] b) args)) ;at least one true\n))", "problem": 83, "user": "50f2e5cee4b0ec8ee6fa8643"}, {"code": "#(and (boolean (some identity %&)) (boolean (some (complement identity) %&)))", "problem": 83, "user": "51095588e4b0e34872b3efa5"}, {"code": "(fn [& xs]\n  (and \n    (not \n      (nil? (some true? xs))\n    )\n    (not \n      (every? true? xs)\n    )\n  )\n)", "problem": 83, "user": "510cda21e4b078ea71921126"}, {"code": "#(and (not-every? false? %&) (not-every? true? %&))", "problem": 83, "user": "5008d149e4b0144d4f561e41"}, {"code": "#(not (or (every? true? %&)(every? false? %&)))", "problem": 83, "user": "5106bc8ae4b01150e115ebec"}, {"code": "(fn [& bools] (cond\n               (every? true? bools) false\n               (some true? bools) true\n               true false))", "problem": 83, "user": "507a33dee4b08327cd804a68"}, {"code": "#(apply not= %&)", "problem": 83, "user": "510d9d61e4b078ea71921141"}, {"code": "#(and (boolean (some true? %&)) (not (every? true? %&)))", "problem": 83, "user": "511026b1e4b04c71fce993ec"}, {"code": "#(= 2 (count (group-by identity %&)))", "problem": 83, "user": "510db6cde4b078ea71921145"}, {"code": "#(and (not-every? true? %&) (not-every? false? %&))", "problem": 83, "user": "5102ac9de4b00c483ae176fa"}, {"code": "(fn [& args] \n  (and \n   (reduce #(or %1 %2) args) \n   (not (reduce #(and %1 %2) args))\n   ))", "problem": 83, "user": "510d3dc6e4b078ea71921132"}, {"code": "(fn [& a] (= #{true false} (set a)))", "problem": 83, "user": "5107b86de4b05b2b4eee7495"}, {"code": "(fn [& seq] (every? identity [(not (every? identity seq)) (some identity seq)]))", "problem": 83, "user": "50b45ee1e4b08fc3808f30ca"}, {"code": "(fn [& c] \n  (if (and\n        (some true? c)\n        (not-every? true? c))\n    true\n    false))", "problem": 83, "user": "50eebf46e4b06330c1f87c61"}, {"code": ";; 'some' returns nil, not false, when there are no elements satisfying the predicate\n\n#(and (not-every? false? %&)\n      (not-every? true? %&))", "problem": 83, "user": "50fac9e3e4b07934dda8b0d1"}, {"code": "(fn [& xs]\n  (and (reduce #(or %1 %2) false xs)\n       (not (reduce #(and %1 %2) true xs))))", "problem": 83, "user": "511442d0e4b0e9c109bb74d5"}, {"code": "(fn [& bools]\n  (= true (and (some true? bools)\n               (some false? bools))))", "problem": 83, "user": "510cd1dde4b078ea71921124"}, {"code": "(fn [& b]\n   (and (not (nil? (some true? b))) (not (every? true? b)))   \n   )", "problem": 83, "user": "5106dc1be4b01150e115ebf0"}, {"code": "(fn [& rest] \n  (let [xs (filter #(= % true) rest)]\n    (and (not= xs rest) (not (empty? xs)))))", "problem": 83, "user": "5114ab7be4b0ce5098ee73b5"}, {"code": "(fn [& s]\n  (and (not (nil? (some true? s))) (not (every? true? s))))", "problem": 83, "user": "5081566ce4b0946d0443855b"}, {"code": "not=", "problem": 83, "user": "4e5fb634535d8ccf87e9fe4a"}, {"code": "(fn [& flags] \n  (and (not (empty? (filter identity flags)))\n       (not (empty? (filter not flags)))))", "problem": 83, "user": "4fc53390e4b081705acca389"}, {"code": "not=", "problem": 83, "user": "50e3e108e4b01912b3285c48"}, {"code": "(fn [& x] (and (not-every? false? x) (not-every? true? x)))", "problem": 83, "user": "4fe8fda4e4b0547ebccb2438"}, {"code": "not=", "problem": 83, "user": "50bfb5fbe4b05ae8c1cbbd9a"}, {"code": "(fn [& more] (if (and (> (count (distinct more)) 1) (distinct? (vec (distinct more)))) true false))", "problem": 83, "user": "5115cf87e4b0ce5098ee73c3"}, {"code": "(fn [& bools]\n  (< 1 (count (distinct bools)))\n)", "problem": 83, "user": "51181009e4b0e0897831a60f"}, {"code": "#(not (apply = %&))", "problem": 83, "user": "51105c7fe4b04c71fce993ef"}, {"code": "(fn [& x] (cond\n         \t(apply = (conj x true)) false\n            (apply = (conj x false)) false\n         :else true))", "problem": 83, "user": "4e975839535dbda64a6f6b52"}, {"code": "#(= 2 (count (distinct %&)))", "problem": 83, "user": "4ecc1d85535d23f0362276f8"}, {"code": "(fn [& xs] (and (not-every? true? xs) (not-every? false? xs)))", "problem": 83, "user": "4e50ad74535dc968683fc4ec"}, {"code": "(fn [& b]\n\t(if (some true? b) \n          (if (some false? b)\n            true\n            false)\n         false))", "problem": 83, "user": "4e964f4a535dbda64a6f6b42"}, {"code": "(fn [& more] (and (not-every? true? more) (not= (some true? more) nil)))", "problem": 83, "user": "4f702dcae4b07046d9f4eff4"}, {"code": "(fn my-xor [& bools]\n  (and (not (not (some identity bools))) (not-every? identity bools)))", "problem": 83, "user": "5119f3d5e4b06c8af0111818"}, {"code": "(fn [& args] (not (or (reduce (fn [seed item] (and seed item)) true args) (not (reduce (fn [seed item] (or seed item)) false args)))))", "problem": 83, "user": "50f9c7fde4b0e7c80cb15a52"}, {"code": "not=", "problem": 83, "user": "4fca4c37e4b0ee37620e184f"}, {"code": "(fn [& args]\n  (if (and (some true? args) (not-every? true? args))\n  \ttrue\n  \tfalse))", "problem": 83, "user": "51195e77e4b055cfb310d499"}, {"code": "(fn [& s]\n  (not (or (every? true? s)\n       (nil? (some true? s)))))", "problem": 83, "user": "5100d7dbe4b04f1d96d946df"}, {"code": "(fn [b & a]\n  (and (not (empty? (filter true? (conj a b))))\n\t   (not (empty? (filter false? (conj a b)))))\n  )", "problem": 83, "user": "50bd13dee4b0594b91591c65"}, {"code": "(fn [& s]\n  (not\n   (or\n    (every? true? s)\n    (every? false? s)\n    )\n   )\n  )", "problem": 83, "user": "512339fce4b03b44edbed434"}, {"code": "(comp not =)", "problem": 83, "user": "50f9739ce4b0e7c80cb15a4d"}, {"code": "(fn [& bools] (if (and (some true? bools) (not (every? true? bools)))\n                true\n                false))", "problem": 83, "user": "511b810ce4b07ab9ec456182"}, {"code": "(fn [& args]\n  (let [tc (count (filter true? args))]\n    (and (pos? tc) (> (count args) tc))))", "problem": 83, "user": "511c44fde4b00c2a1fa7ff77"}, {"code": "(fn [& xs] (cond (true? (every? true? xs)) false\n             \t(some true? xs) true\n                 :else false))", "problem": 83, "user": "50b35486e4b03ea88043356a"}, {"code": "(fn [& col]\n  (not-every? #(= (first col) %) col))", "problem": 83, "user": "4fc8769be4b0ee37620e1833"}, {"code": "(fn [& args]\r\n   (== 2 (.size (set args)))\r\n)", "problem": 83, "user": "510a6bece4b06956752d35af"}, {"code": "(fn [& b] (and (true? (some true? b)) (not-every? true? b)))", "problem": 83, "user": "510b704ee4b078ea71921100"}, {"code": "(fn [& args]\n  (cond\n   (every? true? args) false\n   (every? false? args) false\n   :else true))", "problem": 83, "user": "512474ede4b02c3f2a072cce"}, {"code": "(fn [& xs] (and (if (nil? (some (fn [a] a) xs)) false (some (fn [a] a) xs) ) (not-every? (fn [a] a) xs)))", "problem": 83, "user": "511a0374e4b06c8af011181a"}, {"code": "(fn [& args] (= 2 (-> args distinct count)))", "problem": 83, "user": "511ac026e4b0c87c59c9670e"}, {"code": "(fn [& xs] (and (not-every? true? xs) (not-every? false? xs)))", "problem": 83, "user": "510acd6ee4b078ea719210f4"}, {"code": "#(or (and (some identity %&) (not (every? identity %&))) false)", "problem": 83, "user": "50d3b03fe4b030b634c368b9"}, {"code": "(fn [& x]\n  (and (reduce #(or % %2) x)\n       (not (reduce #(and % %2) x))))", "problem": 83, "user": "51256b40e4b05d10e3e395f8"}, {"code": "(fn [& e]\n  (cond\n    (and (>= (count (filter false? e)) 1) (>= (count (filter true? e))1 )) true\n    :else false\n    ))", "problem": 83, "user": "50621cbde4b0341461c88951"}, {"code": "not=", "problem": 83, "user": "51284226e4b03a34742b4308"}, {"code": "(fn [& bools] (boolean (and (some true? bools)\n                            (not (nil? (some false? bools))))))", "problem": 83, "user": "51281b25e4b03a34742b4304"}, {"code": "(fn [& bools]\n  (if (and (some true? bools)\n           (some false? bools))\n    true\n    false))", "problem": 83, "user": "5127e504e4b03a34742b4302"}, {"code": "(fn [& x] (or (and (some identity x) (some not x)) false))", "problem": 83, "user": "4e9a1512535dbda64a6f6b6e"}, {"code": "(fn [& coll] (true? (and (some true? coll) (some false? coll))))", "problem": 83, "user": "5125745ae4b05d10e3e395f9"}, {"code": "(fn [& coll](and (reduce #(or % %2) coll) (not (reduce #(and % %2) coll))))", "problem": 83, "user": "5125834ae4b05d10e3e395fa"}, {"code": "(fn\n  [a & more] (let [v (cons a more)]\n               (cond (every? true? v) false\n                     (some true? v) true\n                     :else false)))", "problem": 83, "user": "5126dbabe4b083bb8f88cf0e"}, {"code": "(fn ht [& htlist]\n    (\n      (fn [htlist sometrue somefalse]\n        (cond\n          (empty? htlist)\n            (and sometrue somefalse)\n           :else\n            (recur (rest htlist) (or (first htlist) sometrue) (or (not (first htlist)) somefalse))\n        )\n      )\n      htlist false false\n    )\n  )", "problem": 83, "user": "502be4fae4b08f5602f232eb"}, {"code": "#(cond  (every? true? %&) false (some true? %&) true :else false)", "problem": 83, "user": "511618b1e4b0d4f670fd2fdf"}, {"code": "(fn sometrue [& bools]\n    (= (count (set bools)) 2))", "problem": 83, "user": "50e4f4e9e4b049a987753896"}, {"code": "(fn [& more]\n  (let [s (set more)]\n    (and (contains? s true)\n       (contains? s false))))", "problem": 83, "user": "510fd798e4b04c71fce993dc"}, {"code": "(fn [& params] (not (nil? (and (some true? params) (some false? params)))))", "problem": 83, "user": "50feb0e1e4b03cd852b4e851"}, {"code": "#(if (not-any? false? %&) false (if (some true? %&) true false) )", "problem": 83, "user": "5105ed16e4b01150e115ebe2"}, {"code": "#(and (not-every? true? %&) (not-every? false? %&))", "problem": 83, "user": "511d11d7e4b022853b0e079f"}, {"code": "#(and\n    (not-every? true? %&)\n    (not (not-any? true? %&)))", "problem": 83, "user": "5125d963e4b05d10e3e395fe"}, {"code": "(fn\n  ([x] false)\n  ([x & more]\n   (let [l (concat (list x) more)]\n     (cond\n      (every? true? l) false\n      (some true? l) true\n      :else false))))", "problem": 83, "user": "5123ac8ee4b061b4c6f0e0b1"}, {"code": "#(and (not-every? true? %&) (not-every? false? %&))", "problem": 83, "user": "4fbbcf0ce4b081705acca2ee"}, {"code": "(fn [ & args]\n  (let [ntrue (count (filter identity args))]\n    (and (not= ntrue (count args)) (pos? ntrue))\n  )\n)", "problem": 83, "user": "512b9e59e4b04d059cf1fd17"}, {"code": "(fn [& things] (true? (and (some true? things) (some false? things))))", "problem": 83, "user": "50ed8fd1e4b06330c1f87c3f"}, {"code": "(fn [& args]\n  (and (true? (some true? args))\n       (not-every? true? args)))", "problem": 83, "user": "511623cbe4b0d4f670fd2fe1"}, {"code": "(fn [& s] (and (reduce #(or %1 %2) s) (not (reduce #(and %1 %2) s) ) ) )", "problem": 83, "user": "4ff2ff7ce4b0678c553fc342"}, {"code": "(fn [& args] (if (and (some true? args) (not-every? true? args)) true false))", "problem": 83, "user": "51307b84e4b08c712d3fae39"}, {"code": "(fn [& s] \n  (and (if (some true? s) true false) (not-every? true? s)))", "problem": 83, "user": "512eb723e4b0b740abc5982b"}, {"code": "#(if (every? identity (cons % %&)) false (if (some identity (cons % %&)) true false))", "problem": 83, "user": "510967aae4b07c05fdf6dc0f"}, {"code": "#(and (not-every? false? %&) (not-every? true? %&))", "problem": 83, "user": "51057b2be4b06d28cacc92e8"}, {"code": "(fn [& bools] (and (true? (some true? bools)) (not-every? true? bools)))", "problem": 83, "user": "5117c31ee4b0e0897831a60c"}, {"code": "(fn [& args]\n  (if (= 2 (count (group-by identity args)))\n    true false))", "problem": 83, "user": "511b9017e4b00c2a1fa7ff6b"}, {"code": "#(< 0 (count (filter true? %&)) (count %&))", "problem": 83, "user": "4dada426c9a9d6ed2a99dc57"}, {"code": "(fn [& bools] (and (not-every? true? bools) (not (every? false? bools))))", "problem": 83, "user": "512b7a05e4b04d059cf1fd14"}, {"code": "not=", "problem": 83, "user": "510dc185e4b078ea71921146"}, {"code": "(fn [& args]\n\t(and (not-every? #(true? %) args) (not-every? #(false? %) args))\n)", "problem": 83, "user": "511cca27e4b00c2a1fa7ff7d"}, {"code": "(fn [ & sq]\n  (boolean (and\n    (some #(= false %) sq)\n    (some #(= true %) sq))))", "problem": 83, "user": "504e12ade4b078edc5f593b7"}, {"code": "(fn [& args]\n  (and (reduce #(or %1 %2) args) (not (reduce #(and %1 %2) args))))", "problem": 83, "user": "51000111e4b00d7ad4cab15e"}, {"code": "#(boolean (and (some true?  %&)\n               (some false? %&)))", "problem": 83, "user": "4de52c87535d08e6dec9fdf0"}, {"code": "(fn [& bools]\n  (and\n   (true? (some #(= true %) bools))\n   (not (every? #(= true %) bools))\n  )\n)", "problem": 83, "user": "51365524e4b04ac1f358dd52"}, {"code": "(fn [& args]\n  (= 2 (count (vals (group-by true? args)))))", "problem": 83, "user": "512eb1e7e4b0b740abc5982a"}, {"code": "(fn [& args]\n  (not= (reduce #(and % %2) args) (reduce #(or % %2) args)))", "problem": 83, "user": "504ffb8fe4b0a02f9cffdeae"}, {"code": "(fn [& ls] (and (not (every? not ls)) (not (every? identity ls))))", "problem": 83, "user": "50b668dde4b08fb537db98f2"}, {"code": "(fn [& x]\n  (and\n  (if (some true? x) true false)\n  (if (some false? x) true false)))", "problem": 83, "user": "51377c10e4b04059df19f305"}, {"code": "not=", "problem": 83, "user": "51352899e4b082aeb3a3f03b"}, {"code": "(fn [ & xs ] (and (not (every? identity xs)) (boolean (some identity xs))))", "problem": 83, "user": "50fa01bce4b07934dda8b0ba"}, {"code": "(fn [& x] (= #{true false} (set x)))", "problem": 83, "user": "5124619ae4b02c3f2a072ccd"}, {"code": "#(-> %& distinct count (= 2))", "problem": 83, "user": "513b77f3e4b00f740c76c403"}, {"code": "(fn [& args] (if (not-any? true? args) false (and (some identity args) (not (every? true? args)))))", "problem": 83, "user": "513a4babe4b067e25a345eca"}, {"code": "(fn[& bools](if (= (distinct bools) '(true)) false (if (= (distinct bools) '(false)) false true)))", "problem": 83, "user": "5138d08be4b0a5db03d727db"}, {"code": "#(= (count (set %&)) 2)", "problem": 83, "user": "4e55b3dc535d8a8b8723a27f"}, {"code": "(fn [& xs] (not (nil? (and (some true? xs) (some false? xs)))))", "problem": 83, "user": "4f8ab084e4b02e764a0a5171"}, {"code": "(fn [& args] (boolean (and (some identity args) (not (every? identity args)))))", "problem": 83, "user": "513d121fe4b0e544971636a2"}, {"code": "(fn [& args]\n\t\t(true? (and (some true? args) (not-every? true? args))))", "problem": 83, "user": "51205867e4b0e88f5a20c40f"}, {"code": "(fn [& c] (let [coll (into #{} (flatten [c]))] \n            (if (= 1 (count coll)) false true)))", "problem": 83, "user": "513ca934e4b0b86ece9f3228"}, {"code": "(fn mysome [& args]\n  (and (not (every? false? args)) (not (every? true? args))))", "problem": 83, "user": "4fb804f7e4b081705acca2d6"}, {"code": "#(and (not-every? false? %&) (not-every? true? %&))", "problem": 83, "user": "50d3ec8be4b030b634c368bb"}, {"code": "#(boolean (and (some identity %&) (not (every? identity %&))))", "problem": 83, "user": "513edd13e4b051389b345b39"}, {"code": "(fn [& s]\n  (if (some #{true} s) \n    (if (some #(= % false) s) true false)\n    false))", "problem": 83, "user": "51197750e4b057cba170bc99"}, {"code": "(fn [& s] (true? (and (some true? s) (some false? s))))", "problem": 83, "user": "513bb7a6e4b04402f587b77d"}, {"code": "(fn [& args] (and (if (some #(= true %) args) true false) (if (some #(= false %) args) true false)))", "problem": 83, "user": "5142154ce4b0b50abeb46b2b"}, {"code": "(fn [& args]\n  (if (every? true? args)\n    false\n    (or (some true? args) false)))", "problem": 83, "user": "50b29029e4b03ea880433563"}, {"code": "(fn [& args]( and (not-every? #(= false %1) args) (not-every? #(= true %1) args)   ) )", "problem": 83, "user": "513f53c6e4b051389b345b40"}, {"code": "(fn [ & bool]\n  (= #{true false} (set bool)))\n  ;(> (count (partition-by identity bool)) 1 ))", "problem": 83, "user": "4ff01fa9e4b0678c553fc321"}, {"code": "(fn [& vars] (> (count (#(partition-by identity %) vars)) 1))", "problem": 83, "user": "50e135f4e4b084616e11c667"}, {"code": "(fn [& xs] (if (and (some false? xs) (some identity xs)) true false))", "problem": 83, "user": "5145832be4b0e8879607340a"}, {"code": "(fn [& c]\n    (if (and (some true? c) (not (every? true? c)))\n      true\n      false))", "problem": 83, "user": "4e52777f535d302ef430da76"}, {"code": "(fn [& bs] (not (nil? (and (some #(not %) bs) (some #(true? %) bs)))))", "problem": 83, "user": "51411e3be4b05ca1a0b379f3"}, {"code": "#(= 2 (count (into #{} %&)))", "problem": 83, "user": "513f0565e4b051389b345b3b"}, {"code": "(fn [& args] (and (true? (some true? args)) (not (every? true? args))))", "problem": 83, "user": "5142e808e4b0c172af7558c9"}, {"code": "(fn [& args]\n\t(cond\n\t\t(every? #(true? %) args) false\n \t\t(some #{true} args) true\n\t\t:else false))", "problem": 83, "user": "51430fb2e4b0c172af7558ce"}, {"code": "(fn [& a] (and (reduce #(or %1 %2) a) \n               (not (reduce #(and %1 %2) a))))", "problem": 83, "user": "514b66f4e4b0bd81940b86cb"}, {"code": "#(boolean (and (some true? %&) (some false? %&)))", "problem": 83, "user": "50e09313e4b061dbdced7233"}, {"code": "(fn [& args]\n    (cond\n     (empty? (filter true? args)) false\n     (every? true? args) false\n     :else true))", "problem": 83, "user": "512a8ef7e4b0ff5c4bc1f99e"}, {"code": "(fn half-truth? [& args]\n  (and\n   (not (nil? (some true? args)))\n   (not-every? true? args)))", "problem": 83, "user": "5144e89be4b021a5ff8301f9"}, {"code": "(fn [& args] \n  (let [cnttrue (reduce (fn [res x] (+ res (if (true? x) 1 0 ) ) ) 0 args )]\n  (and (not= (count args) cnttrue ) (> cnttrue 0))\n  \n  )\n  )", "problem": 83, "user": "5135a74ae4b04ac1f358dd46"}, {"code": "(fn [& lst] \n  (not \n   (or \n    (nil? (some true? lst))\n    (every? true? lst)\n    )))", "problem": 83, "user": "514f0723e4b019235f6c0599"}, {"code": "(fn [& c] (= (sort(distinct c)) '(false true)))", "problem": 83, "user": "4f5d0f25e4b0030a34fb2b33"}, {"code": "not=", "problem": 83, "user": "51502056e4b098b221effc25"}, {"code": "(comp #(and (not-every? identity %) (false? (not-any? identity %))) list)", "problem": 83, "user": "514d398ee4b019235f6c0583"}, {"code": "#(boolean (and (some true? %&) (some false? %&)))", "problem": 83, "user": "513dcc1ce4b0825f97f7f964"}, {"code": "#(every? true? ((juxt some (comp not every?)) true? %&))", "problem": 83, "user": "5142ea50e4b0c172af7558ca"}, {"code": "(fn [& xs] (and (not-every? true? xs) (not-every? false? xs)))", "problem": 83, "user": "5151aa14e4b03e678e393ad4"}, {"code": "#(= 2 (count (distinct %&)))", "problem": 83, "user": "5047782ce4b0371827a27bc2"}, {"code": "(fn [& rest]\n    (apply not= (into [] rest)))", "problem": 83, "user": "5079fd71e4b08327cd804a66"}, {"code": "#(= 2 (count (distinct %&)))", "problem": 83, "user": "51037468e4b00c483ae17702"}, {"code": "#(-> %& set count (> 1))", "problem": 83, "user": "512f06c5e4b0762be4c7aad7"}, {"code": "#(and (not-every? true? %&)\n      (not (nil? (some true? %&))))", "problem": 83, "user": "5016ac54e4b052339a490e7b"}, {"code": "not=", "problem": 83, "user": "4f50d933e4b03ad3f0c10d11"}, {"code": "(fn [& rest] (and (not-every? identity rest) (not-every? identity (map not rest))))", "problem": 83, "user": "4fb4303fe4b081705acca2ac"}, {"code": "#(= 2 (count (group-by not %&)))", "problem": 83, "user": "4f296a80e4b0d6649770a02a"}, {"code": "(fn half-truth [b & bv]\n  (if (nil? bv)\n    false\n    (loop [vet bv]\n      (if (= '() vet)\n        false\n        (if  (not= b (first vet))\n          true\n          (recur (rest vet)))))))", "problem": 83, "user": "4ef2eb4d535dced4c769f226"}, {"code": "(fn [& vs] (= (count (set vs)) 2))", "problem": 83, "user": "505b9084e4b032b709c81371"}, {"code": "#(true? \n  (and\n    (some true? %&)\n    (some false? %&)))", "problem": 83, "user": "51367626e4b04ac1f358dd53"}, {"code": "#(= 2 (count (frequencies %&)))", "problem": 83, "user": "514d8084e4b019235f6c0588"}, {"code": "(fn [& bools]\n  (= 2 (count \n    (keys\n      (group-by true? bools)))))", "problem": 83, "user": "4e58ef07535d8a8b8723a299"}, {"code": "(fn [& args] (let [cnt (count (filter true? args) ) tot (count args)] (and (< cnt tot) (> cnt 0))) )", "problem": 83, "user": "51558136e4b06c5f6a1490a8"}, {"code": "not=", "problem": 83, "user": "514afd1be4b0bd81940b86c6"}, {"code": "(fn [& c]\n  (if ((complement every?) true? c)\n    (if (some true? c) true false)\n    false))", "problem": 83, "user": "514721c6e4b0d520409ed392"}, {"code": "(fn [& x] (if (and (some true? x) (some false? x)) true false))", "problem": 83, "user": "51533ecde4b0252ac4b16619"}, {"code": "(fn [& m] (and (not (reduce #(and % %2) m)) (reduce #(or % %2) m)))", "problem": 83, "user": "5150a7d7e4b03e678e393abb"}, {"code": "(fn [& x] (boolean (and (some identity x) (not-every? identity x))))", "problem": 83, "user": "5158bba4e4b059418b97f0ab"}, {"code": "(fn [& s] (and (boolean (some identity s)) (not-every? identity s)))", "problem": 83, "user": "514457fbe4b0b4fb4ace5f43"}, {"code": "(fn [& b] (and (not (nil? (some identity b))) (not (every? identity b))))", "problem": 83, "user": "504e71cbe4b0f6ff3350c4b3"}, {"code": "(fn \n           [& coll]\n           (= (reduce conj #{} coll) #{true false}))", "problem": 83, "user": "5153316ce4b0252ac4b16611"}, {"code": "(fn [& args]\n  (= #{true false} (set args)))", "problem": 83, "user": "515a6151e4b0394f658fe241"}, {"code": "(fn [& coll]\n          (not\n            (or\n              (every? #(= true %) coll)\n              (every? #(= false %) coll))))", "problem": 83, "user": "514d7e29e4b019235f6c0587"}, {"code": "(fn [& args]\n  (if (and (some true? args) (some false? args)) true false))", "problem": 83, "user": "515c9f14e4b069911535cf16"}, {"code": "#(not (or (every? false? %&) (every? true? %&)))", "problem": 83, "user": "50ab44b2e4b0f65d68208509"}, {"code": "(fn some-not-all [& args]\n  (if (and (some true? args)\n           (some false? args)) true false))", "problem": 83, "user": "515737f0e4b0b0b4b87062d0"}, {"code": "(fn [& args](if (and (some #{true} args) (some #(= % false) args)) true false))", "problem": 83, "user": "515828b8e4b0a069fd272c71"}, {"code": "(fn [& x]\n  (let [ctruex (count (filter true? x))\n        cx (count x)]\n    (cond\n     (= ctruex cx) false\n     (zero? ctruex) false\n     :else true)))", "problem": 83, "user": "5133e51ae4b0d7a043de8cf6"}, {"code": "not=", "problem": 83, "user": "4e781a2e535d324fb2983d74"}, {"code": "(fn [head & others] (if (true? head) (true? (some false? others)) (true? (some true? others))))", "problem": 83, "user": "50fe91c1e4b03cd852b4e84e"}, {"code": "(fn [& xs]\n   (apply not= xs))", "problem": 83, "user": "50f48298e4b004d364930527"}, {"code": "(fn [& args] (if (reduce #(and %1 %2) args)\n                       false\n                       (reduce #(or %1 %2) args)))", "problem": 83, "user": "504ee511e4b0e7ad84dbc4a4"}, {"code": "#(not (apply = %&))", "problem": 83, "user": "50705886e4b07bd6ad9b9f2a"}, {"code": "(fn [& bs](let [_ (println bs)\n\t\t       yes (filter true? bs)\n\t\t\tnyes (count yes) nno (- (count bs) nyes)]\n\t\t   (println nyes)(println nno)(and (> nyes 0) (> nno 0))))", "problem": 83, "user": "4eeccfc0535d93acb0a668b5"}, {"code": "(fn [& rest] (if (every? true? rest)\n               false\n               (true? (some true? rest))))", "problem": 83, "user": "4fdbc075e4b05e33b9224f61"}, {"code": "#(true? \n  (and\n    (some true? %&)\n    (some false? %&)))", "problem": 83, "user": "514e4ae4e4b019235f6c0594"}, {"code": "#(> (count (partition-by true? %&)) 1)", "problem": 83, "user": "515e8ce2e4b049add99a053d"}, {"code": "(fn [& args]\n     (and (reduce #(or %1 %2) false args)\n          (not (reduce #(and %1 %2) true args))))", "problem": 83, "user": "50b19a91e4b03ea880433552"}, {"code": "(fn [& args]\n  (let [all (every? true? args)\n        so-me (some true? args)]\n    (if (and so-me (not all))\n      true\n      false)))", "problem": 83, "user": "51460e4ce4b04ef915e37314"}, {"code": "#(and (not-every? true? %&) \n      (not-every? false? %&))", "problem": 83, "user": "51592b81e4b0394f658fe22c"}, {"code": "(fn [& bools]\n  (let [c (count bools)]\n  \t(loop [ls bools\n    \t\ttruths 0]\n    \t(cond\n    \t \t(empty? ls) (if (and (>= truths 1) (< truths c)) true false)\n     \t\t(= (first ls) false) (recur (rest ls) truths)\n     \t\t:else (recur (rest ls) (+ 1 truths))))))", "problem": 83, "user": "5154fa3fe4b0179c5115f4e6"}, {"code": "(fn [& xs]\n   (and (> (count (filter identity xs)) 0) (> (count (filter #(not %) xs)) 0)))", "problem": 83, "user": "515ef58be4b02c55805ea237"}, {"code": "not=", "problem": 83, "user": "50f3ba98e4b041536e2eca39"}, {"code": "(fn [& bools] (and (not-every? false? bools) (not-every? true? bools)))", "problem": 83, "user": "515e38ace4b049add99a0538"}, {"code": "(fn\n  [& coll]\n  (let\n    [re (reduce\n  \t #(vector (-> % first (and %2)) (-> % last (and (not %2))))\n  \t [true true]\n  \t coll\n \t )]\n    (if (not= (first re) (last re)) false true)\n  )\n)", "problem": 83, "user": "5162757ee4b03cfa3774b3fe"}, {"code": "not=", "problem": 83, "user": "4f437751e4b0d7d3c9f3fd20"}, {"code": "(fn [& b]\n  (if (and (some #(true? %) b) (some #(false? %) b))\n    true\n    false))", "problem": 83, "user": "504e0136e4b078edc5f5938e"}, {"code": "(fn [& xs] (not (or (->> xs (filter true?) seq nil?) (->> xs (filter false?) seq nil?))))", "problem": 83, "user": "50ef96a1e4b0bdaecbb47d9d"}, {"code": "#(true? \n  (and\n    (some true? %&)\n    (some false? %&)))", "problem": 83, "user": "51696bcde4b03f62cda68ce7"}, {"code": "(fn  [& bools]\n  (cond\n    (every? true? bools) false\n    (some true? bools) true\n    :else false))", "problem": 83, "user": "4f05a9cf535dcb61093f6bfc"}, {"code": "(fn [& coll]\n  (if (and (some true? coll) (not (every? true? coll))) true false))", "problem": 83, "user": "5166e80de4b060c690c1f4c5"}, {"code": "(fn [& bs] (and (boolean (some true? bs)) (not-every? true? bs)))", "problem": 83, "user": "50723bbae4b0e3170b5a868b"}, {"code": "(fn [ & params] (not (or (zero? (count (filter #(= true %) params))) (zero? (count (filter #(= false %) params))))))", "problem": 83, "user": "516b381be4b081287f204ea3"}, {"code": "(fn [ & bs]\n  (if (and (some true? bs) (some false? bs))\n    true\n    false))", "problem": 83, "user": "513cb853e4b0b86ece9f322b"}, {"code": "not=", "problem": 83, "user": "5150f87ae4b03e678e393ac7"}, {"code": "(fn ht [& s]\n  (let [r (group-by identity s)]\n    (and (not (empty? (r true))) (not (empty? (r false))))))", "problem": 83, "user": "515ffbfbe4b0e2be8aa20bdd"}, {"code": "#(cond (every? true? %&) false (some true? %&) true :else false)", "problem": 83, "user": "5143952fe4b0b4fb4ace5f38"}, {"code": "(fn funky [& args]\n  (cond\n   (every? true? args) false\n  (some true? args) true\n  :else false))", "problem": 83, "user": "51427a8be4b0b50abeb46b37"}, {"code": "(fn f [& x]\n  (or (and (some true? x)\n           (some false? x))\n      false))", "problem": 83, "user": "515ead6be4b049add99a053e"}, {"code": "(fn [& xs]\n  (and (not (reduce #(and % %2) xs))\n       (reduce #(or % %2) xs)))", "problem": 83, "user": "516f06dce4b06aac486e5b39"}, {"code": "(fn [& b] (and (apply (some-fn true?) b) (not-every? true? b)))", "problem": 83, "user": "51473a70e4b0d520409ed394"}, {"code": "(fn halft [& args]\n\t(and (reduce #(or %1 %2) args) (not (reduce #(and %1 %2) args))))", "problem": 83, "user": "51684318e4b03f62cda68cd6"}, {"code": "(fn [& args] (true? (and (some true? args) (some false? args))))", "problem": 83, "user": "516933ece4b03f62cda68ce4"}, {"code": "(fn [& x] (and (not (apply = true x)) (not (apply = false x)) (some true? x)))\n\n; or \"not=\" ...damn.", "problem": 83, "user": "4f189b42535d64f60314645d"}, {"code": "#(if (some true? %&) (if (some false? %&) true false) false)", "problem": 83, "user": "51740b65e4b0d277d717bc67"}, {"code": "(fn [& xs]\n  (if (and (some true? xs) (some false? xs))\n      true\n    false))", "problem": 83, "user": "4ed90014535d10e5ff6f52fe"}, {"code": "(fn [& bools] (let [t (count (filter #(= % true) bools))] (and (> t 0) (> (count bools) t))))", "problem": 83, "user": "5175616ae4b0dea9bbfba576"}, {"code": "(fn [& xs]\n  (boolean (and (some true? xs)\n                (not (every? true? xs)))))", "problem": 83, "user": "5173726be4b098276e74652c"}, {"code": "(fn [& args] (and (not-every? true? (seq args)) (not-every? false? (seq args))))", "problem": 83, "user": "516dc88ae4b046df6fbb76a1"}, {"code": "(fn [& l] (if (and (some false? l) (some true? l)) true false))", "problem": 83, "user": "517531c6e4b07031762f2eea"}, {"code": "(fn [& args]\n    (boolean (and\n      (some identity args)\n      (not-every? identity args))))", "problem": 83, "user": "5165a235e4b079ad97ec44ac"}, {"code": "(fn [& args] (if (and \n                  (some true? args) \n                  (not (every? true? args))) \n               true \n               false))", "problem": 83, "user": "5164d97ee4b003cf19fdde43"}, {"code": "(fn [& coll]\n  (and (false? (reduce #(and %1 %2) coll))\n           (true? (reduce #(or %1 %2) coll))))", "problem": 83, "user": "51780f88e4b03d69594194c9"}, {"code": "(fn [& args] (= #{true false} (set args)))", "problem": 83, "user": "51170b49e4b0063b4e3e16d9"}, {"code": "(fn [& l] (and (not-every? true? l) (not-every? false? l)))", "problem": 83, "user": "5134973ce4b0230e9f713b42"}, {"code": "(fn [& s]\n  (let [t (filter identity s) f (remove identity s)]\n    (boolean (and (seq t) (seq f)))\n    )\n  )", "problem": 83, "user": "51729002e4b044b2ef48a850"}, {"code": "(fn [& args]\n  (and (not (nil? (some identity args))) (not (every? identity args))))", "problem": 83, "user": "512d3304e4b040332b905b2d"}, {"code": "(fn [& bools]\n  (boolean (and\n   (some true? bools)\n   (not (every? true? bools)))))", "problem": 83, "user": "51778122e4b085adf681d89d"}, {"code": "#(and \n  (not-every? true? %&)\n  (not-every? false? %&))", "problem": 83, "user": "5164867fe4b003cf19fdde3e"}, {"code": "(fn [& args] \n  (let [val (and (not-every? true? args) \n       (some true? args))]\n    (if val\n      val\n      false)))", "problem": 83, "user": "4e74e119535d7a570dd295bc"}, {"code": "(fn [& args]\n  (and \n   (or (some identity args) false) \n   (not-every? identity args)))", "problem": 83, "user": "515f8a0de4b0e2be8aa20bce"}, {"code": "(fn ht [& more]\n  (cond \n   (and \n    (some true? more)\n    (some false? more)\n   ) true\n   :else false \n  )\n  )", "problem": 83, "user": "4fb03cf4e4b081705acca262"}, {"code": "(fn [& z] (boolean (and (some false? z) (some true? z))))", "problem": 83, "user": "5093a80be4b097f48cc38583"}, {"code": "(fn [& x] (if (and (some true? x)\n                   (some false? x))\n            true\n            false))", "problem": 83, "user": "51780bfce4b0f89a8f53839c"}, {"code": "(fn [& p]\n  (not (apply = p)))", "problem": 83, "user": "4eec82fe535d93acb0a668ae"}, {"code": "(fn [& x] (and (not (not (some identity x))) (not-every? identity x)))", "problem": 83, "user": "4ed286d4535d44c135fd68d7"}, {"code": "#(and (not (every? true? %&)) (contains? (into #{} %&) true))", "problem": 83, "user": "5034b623e4b062bc5d7ae168"}, {"code": "(fn [& a] (boolean (and (some identity a) (some not a))))", "problem": 83, "user": "51383346e4b0a5db03d727d4"}, {"code": "(fn [& args] (if (some true? args)\n(true?(some false? args)) false))", "problem": 83, "user": "517945dce4b0684c1c981a43"}, {"code": "(fn [& xs] (and (not (nil? (some true? xs))) (not (nil? (some false? xs)))))", "problem": 83, "user": "508a2c2fe4b016a2107004a1"}, {"code": "(fn [& bs]\n  (let [ b0 (reduce #(or  %1 %2) bs)\n         b1 (reduce #(and %1 %2) bs) ]\n  (cond (and b0 b1) false\n        (or  b0 b1) true\n        :else false)))", "problem": 83, "user": "50b9d991e4b04934c218a4a9"}, {"code": "(fn f [& xs] (and (reduce #(or %1 %2) xs) (not (reduce #(and %1 %2) xs))))", "problem": 83, "user": "515fb48fe4b0e2be8aa20bd5"}, {"code": "(fn [ & others]\n  (if (and (some true? others) (some false? others)) true false))", "problem": 83, "user": "515ff4b9e4b0e2be8aa20bd9"}, {"code": "(fn [& bools]\n   (boolean (and (some true? bools) (some false? bools))))", "problem": 83, "user": "517b59b8e4b0925c997201d0"}, {"code": "not=", "problem": 83, "user": "518696c1e4b0c40be512d708"}, {"code": "(fn p83 [& l]\n  (boolean (and\n    (some true? l)\n    (some false? l)\n    )))", "problem": 83, "user": "51750fc5e4b07031762f2ee6"}, {"code": "(fn [& more]\n    (loop [lst more tlst []]\n        (if (empty? lst)\n            (if (and (not= (count tlst) (count more)) (not= (count tlst) 0))\n                true\n                false\n            )\n            (if (= (first lst) true)\n                (recur (rest lst) (conj tlst (first lst)))\n                (recur (rest lst) tlst)\n            )\n        )\n    )\n)", "problem": 83, "user": "5179fd22e4b01aacecbecbe5"}, {"code": "not=", "problem": 83, "user": "5187dd58e4b057e3860ab7e4"}, {"code": "(fn [& args] (> (count (distinct args)) 1))", "problem": 83, "user": "5160195ae4b0e2be8aa20be3"}, {"code": "(fn [& p] (and (not (reduce #(and % %2) p)) (reduce #(or % %2) p)))", "problem": 83, "user": "517bc969e4b07ef0e56148d0"}, {"code": "(fn [& args]\n  (true?\n   (and (some true? args)\n       (some false? args)\n    )))", "problem": 83, "user": "4fecebe1e4b0681fd128dcac"}, {"code": "(fn [& args]\n  (boolean (and (some true? args) (some false? args))))", "problem": 83, "user": "5152bc4ee4b001f44f99bfef"}, {"code": "(fn [& bools]\n            (if (and (seq (filter identity bools)) (seq (filter not bools))) true false))", "problem": 83, "user": "515ac518e4b0394f658fe244"}, {"code": "(fn [& x] (not (or (every? true? x) (every? false? x))))", "problem": 83, "user": "5099283ce4b0cae2931060af"}, {"code": "(fn [& c]\n  (and \n   (not-every? true? c)\n   (not-every? false? c)))", "problem": 83, "user": "51899891e4b0288ada3dbdab"}, {"code": "(fn [& s]\n  (and\n   (not (every? identity s))\n   (boolean (some identity s))))", "problem": 83, "user": "51805d22e4b0e3fc13e244df"}, {"code": "(fn [& coll]\n  (if (and (some true? coll)\n       \t(some false? coll))\n    true\n    false))", "problem": 83, "user": "518ccf6be4b05e6c8537e386"}, {"code": "not=", "problem": 83, "user": "518b761ae4b0f028e99addee"}, {"code": "(fn someee [x & more]\n  (if (and\n    (some #(= true %1) (cons x more))\n    (some #(= false %1) (cons x more))\n    ) true false)\n  )", "problem": 83, "user": "4ec4d723535dcc7ae8597d65"}, {"code": "(fn [& args]\n  (if (nil?\n      (and\n        (some true? args)\n        (some false? args)))\n      false\n      true))", "problem": 83, "user": "519136e9e4b0f8ef0be96c01"}, {"code": "(fn [& x] (not (or (every? true? x) (not-any? true? x))))", "problem": 83, "user": "5154b16be4b0179c5115f4e2"}, {"code": "(fn [& vars]\n  (cond\n   (every? true? vars) false\n   (some true? vars) true\n   :else false))", "problem": 83, "user": "5192dd39e4b0c663c5d86c9e"}, {"code": "(fn [& r] (= true (and (some identity r) (some not r))))", "problem": 83, "user": "5159849ce4b0394f658fe236"}, {"code": "(fn [& bools]\n  (let [sbools (sort bools)\n        f (first sbools)\n        l (last sbools)]\n    (and l (not f))))", "problem": 83, "user": "5186134ce4b0da5a5be3bac7"}, {"code": "(fn\n  [& xs]\n  (cond (every? true? xs) false\n        (some true? xs) true\n        :else false))", "problem": 83, "user": "51804bcbe4b04f45bde7d901"}, {"code": "(fn [& c]\n   (and (not (every? true? c)) (not (every? false? c))))", "problem": 83, "user": "51933b41e4b0c663c5d86ca2"}, {"code": "(fn [& args] (if(every? true? args) false  (if (nil? (some true? args)) false true )))", "problem": 83, "user": "516081e7e4b009fba0926e28"}, {"code": "(fn [& s]\n  (boolean (and (some true? s) \n                (some false? s))))", "problem": 83, "user": "518a8c4be4b0df82f5685903"}, {"code": "(fn [& booleans] (not (or (nil? (some #{true} booleans))\n                           (every? identity booleans))))", "problem": 83, "user": "4f409e29e4b0e243712b1fb6"}, {"code": "(fn [& x] (if (and (some identity x) (some not x)) true false))", "problem": 83, "user": "5196568fe4b04c0af7ff3c1c"}, {"code": "(fn half-truth\n  [& args]\n  (and (not-every? true? args)\n       (not-every? false? args)))", "problem": 83, "user": "511d6a01e4b022853b0e07a5"}, {"code": "#(true? (and (some true? %&) (some false? %&)))", "problem": 83, "user": "518e6966e4b051adb72789ec"}, {"code": "(fn [& args]\n  (and\n   (not (nil? (some true? args)))\n   (not-every? true? args)))", "problem": 83, "user": "514e9a14e4b019235f6c0597"}, {"code": "(fn [& l] (>= (-> l distinct count) 2))", "problem": 83, "user": "5073de20e4b054001656acca"}, {"code": "(fn f [& coll]\n  (cond \n    (every? #(= % true) coll) false\n    (some  #(= % true) coll) true\n    :else false))", "problem": 83, "user": "51750cd4e4b07031762f2ee5"}, {"code": "(fn [& vars]\n  (cond\n   (every? true? vars) false\n   (some true? vars) true\n   :else false))", "problem": 83, "user": "51026750e4b00c483ae176f7"}, {"code": "(fn [& args] \n  (and \n   (reduce #(or %1 %2) args)\n   (not (reduce #(and %1 %2) args))))", "problem": 83, "user": "514c2d05e4b02b8cbb2a9278"}, {"code": "not=", "problem": 83, "user": "50be4823e4b0594b91591c8d"}, {"code": "(fn [& more]\n  (true?\n  (and (not-every? true? more)\n       (some identity more))))", "problem": 83, "user": "519db0ede4b037b32803f9b9"}, {"code": "(fn [& xs]\n  (if (and (some true? xs) (some false? xs)) true false))", "problem": 83, "user": "519b7d76e4b02a926d9a436e"}, {"code": "(fn [& xs] (cond \n            (every? true? xs) false\n            (some true? xs) true\n            :else false))", "problem": 83, "user": "50377d53e4b0af0658af77ad"}, {"code": "(fn half-truth [& x] (and (true? (some true? x)) (not (every? true? x))))", "problem": 83, "user": "50a3f23ae4b08bbd0eb4ed2f"}, {"code": "(fn foo [& args] (and (not (every? true? (seq args))) (not (not-any? true? (seq args)))))", "problem": 83, "user": "5140771ae4b076604f1aa555"}, {"code": "(fn [& b] (if (some true? b) (not (every? true? b)) false))", "problem": 83, "user": "51823a97e4b0f2adb733651e"}, {"code": "(fn [ & arg ]\n (every? true? ((juxt (partial some true?) (partial  some false?)) arg)))", "problem": 83, "user": "518c5236e4b087e178201de0"}, {"code": "(fn [& args] \n  (and \n   (or (some identity args) false) \n   (or (some (complement identity) args) false)))", "problem": 83, "user": "51990df9e4b068aa333628fc"}, {"code": "#(= 2 (count (group-by identity %&)))", "problem": 83, "user": "4f9d8083e4b0dcca54ed6d23"}, {"code": "(fn [& bools]\n  (and\n   \t(not-every? true? bools)\n   \t(boolean (some true? bools))))", "problem": 83, "user": "4f16d3fd535d64f60314644e"}, {"code": "(fn [& bools]\n     (and (contains? (set bools) true) (contains? (set bools) false))\n     )", "problem": 83, "user": "51377188e4b04059df19f303"}, {"code": "#(boolean (and (some true? %&) (not (every? true? %&))))", "problem": 83, "user": "51a10b2ce4b0b292b01ee3fe"}, {"code": "(fn [& args]\n  (not (or (every? true? args)\n           (every? false? args))))", "problem": 83, "user": "4e09392a535d04ed9115e7ae"}, {"code": "(fn [& args]\n  (let [or-test (reduce #(or % %2) args)\n        and-test (reduce #(and % %2) args)]\n    (and or-test (not and-test))))", "problem": 83, "user": "506ba58be4b0eda3100c090b"}, {"code": "(fn [& b] (= (set b) #{true false}))", "problem": 83, "user": "51a05bede4b0b292b01ee3f4"}, {"code": "#(let [bools (into [] %&)] (if (and (some true? bools) (not-every? true? bools )) true false ))", "problem": 83, "user": "51a865dfe4b08d8ec191b80f"}, {"code": "(fn [& x] (if (every? true? x) false (if (some true? x) true false)))", "problem": 83, "user": "510c123be4b078ea7192110e"}, {"code": "(fn [& xs] (and (if (some identity xs) true false) \n                (not (every? identity xs))))", "problem": 83, "user": "51a768e0e4b0da5f497bde84"}, {"code": "(fn [& args] \n  (if (and (some true? args)\n            (not (every? true? args)))\n    true\n    false))", "problem": 83, "user": "51a8f0c6e4b08d8ec191b821"}, {"code": "not=", "problem": 83, "user": "517ddaf3e4b0fcc7c5d37d3b"}, {"code": "#(boolean (and (some true? %&) (not-every? true? %&)))", "problem": 83, "user": "51a54fb4e4b0def3c5c586a3"}, {"code": "(fn [& xs] (and (true? (some true? xs)) (true? (some false? xs))))", "problem": 83, "user": "51a1659de4b00957e520db72"}, {"code": "#(and (true? (some identity %&))\n      (not (every? identity %&)))", "problem": 83, "user": "5183f5d7e4b02826a645f393"}, {"code": "(fn [& args] \n   (true?\n     (and \n       (some true? args)\n       (some false? args))))", "problem": 83, "user": "5065dd94e4b0313a384e5643"}, {"code": "(fn [& args]\n   (and\n     (not (nil? (some identity args)))\n     (not (every? identity args))))", "problem": 83, "user": "4fe9f0f6e4b0547ebccb247b"}, {"code": "#(true? (and (some true? %&) (some false? %&)))", "problem": 83, "user": "51a477eee4b0def3c5c58692"}, {"code": "(fn [& x] (loop [one 0 two 0 se x] (if (= () se) (if (or (= one 0) (= 0 two)) false true) (recur (if (true? (first se)) (+ one 1) one)(if (false? (first se)) (+ two 1) two)(rest se)))))", "problem": 83, "user": "51a7f74be4b08d8ec191b802"}, {"code": "#(boolean (and (some true? %&) (some false? %&)))", "problem": 83, "user": "51ab1718e4b04e3dc0c27b2f"}, {"code": "(fn [& bs]\n  (boolean (and (some true? bs) (not (every? true? bs)))))", "problem": 83, "user": "510b0480e4b078ea719210fa"}, {"code": "(fn [& a]\n  (if (and (some identity a)\n           (some not a))\n    true false))", "problem": 83, "user": "4fbf2818e4b081705acca317"}, {"code": "#(true?\n  (and\n    (some true? %&)\n    (not-every? true? %&)))", "problem": 83, "user": "518cdbd6e4b05e6c8537e387"}, {"code": "(fn [& args] (= (set args) #{true false}))", "problem": 83, "user": "516db4f6e4b046df6fbb76a0"}, {"code": "(fn [& bools] (apply not= bools))", "problem": 83, "user": "51a7b4fee4b0da5f497bde8b"}, {"code": "(fn [& xs] (and (boolean (some identity xs)) (not-every? identity xs)))", "problem": 83, "user": "5136f659e4b04059df19f2fd"}, {"code": "(fn [ & p]\n  (and\n    (not-every? false? p)\n    (not-every? true? p)))", "problem": 83, "user": "519b2570e4b0ac1b7dced6a3"}, {"code": "(fn [& args] (if(some true? args) (not-every? true? args) false))", "problem": 83, "user": "4ee5dbdb535d93acb0a66851"}, {"code": "(fn [& args]\n  (let [t (filter identity args)]\n    (and (> (count t) 0) (< (count t) (count args)))))", "problem": 83, "user": "51ad0ab8e4b09397d510977b"}, {"code": "(fn [& s]\n  (if (and (some true? s) (not (every? true? s))) true false))", "problem": 83, "user": "50bc4e73e4b0594b91591c3d"}, {"code": "(fn [& xs] (if (and (some identity xs) (some not xs)) true false))", "problem": 83, "user": "50a2f901e4b029e8bace362a"}, {"code": "#(true? (and (some true? %&) (not-every? true? %&)))", "problem": 83, "user": "51b091e9e4b0c53cf2e68a68"}, {"code": "(fn [& x]\n  (= 2 (count (distinct x))))", "problem": 83, "user": "51040eb2e4b0432126ba9bb4"}, {"code": "(fn contains-true-and-false [& lat]\n  (and\n             (apply (fn contains-true [& l]\n              (cond \n                (= l nil) false\n                (= (first l) true) true\n                :else (apply contains-true (rest l))\n                )\n              ) lat)\n            (apply (fn contains-false [& l] \n               (cond \n                (= l nil) false\n                (= (first l) false) true\n                :else (apply contains-false (rest l))\n                ) \n              ) lat)\n            )\n        )", "problem": 83, "user": "514cc029e4b019235f6c057c"}, {"code": "(fn [& x] (and (not-every? true? x) (not-every? false? x)))", "problem": 83, "user": "51b0fc95e4b0c53cf2e68a72"}, {"code": "(fn [ & args ] (and (not-every? true? args) (not-every? false? args)))", "problem": 83, "user": "51aa4eede4b04e3dc0c27b25"}, {"code": "#(true? (and (some true? %&) (some false? %&)))", "problem": 83, "user": "506cad7de4b0a302964c548e"}, {"code": "#(= 2 (count (group-by identity %&)))", "problem": 83, "user": "51b24defe4b02f8f128bb963"}, {"code": "#(= 2 (count (set %&)))", "problem": 83, "user": "51ab1da1e4b04e3dc0c27b30"}, {"code": "#(boolean (and (some #{true} (distinct %&)) (< 1 (count (distinct %&)))))", "problem": 83, "user": "50a5b7e9e4b0aa96157e2610"}, {"code": "not=", "problem": 83, "user": "507b7dbee4b09034bfeeb71e"}, {"code": "(fn [& args] (and (not-every? identity args) (not-every? #(not (identity %1)) args)))", "problem": 83, "user": "51b7b521e4b0d906fcd71d3a"}, {"code": "(fn [x & y]\n  (if (= (count (distinct (cons x y))) 1)\n    false\n    true))", "problem": 83, "user": "51991a89e4b068aa333628fd"}, {"code": "#(= (set %&) #{true false})", "problem": 83, "user": "51b5e86ae4b0f094dd986fd2"}, {"code": "(fn [& b]\n  (= (count (into #{} b)) 2))", "problem": 83, "user": "4f2f7e87e4b0d6649770a06f"}, {"code": "(fn [& v]\n  (let [tv (filter true? v)]\n    (and (pos? (count tv)) (> (count v) (count tv)))))", "problem": 83, "user": "4e70a7c1535d5021c1a8963c"}, {"code": "(fn [& vs]\n  (true? (and (some not vs)\n         (some identity vs))))", "problem": 83, "user": "4fa340b4e4b081705acca18c"}, {"code": "(fn [& s]\n  (let [has-t (some #(= true %) s)\n        has-f (some #(= false %) s)]\n    (if (and has-t has-f)\n      true\n      false)))", "problem": 83, "user": "51b86a0fe4b09e0e347b2e78"}, {"code": "(fn [& l] (if (and (not (every? true? l)) (some true? l)) true false))", "problem": 83, "user": "51bc2f6ae4b0fe3ecfb46452"}, {"code": "(fn foo [& args]\n  (if (and (some true? args)\n           (not (every? true? args)))\n      true\n      false))", "problem": 83, "user": "4f5c68c6e4b0030a34fb2b23"}, {"code": "(fn [& d] (if   (= 2 (count (set d))\n                 )\n             true\n             false\n            )\n)", "problem": 83, "user": "51aeb1f4e4b09397d5109794"}, {"code": "(fn half-truth [& args]\n  (cond (every? true? args) false\n        (some true? args) true\n        :else false))", "problem": 83, "user": "51baff1be4b0fe3ecfb46443"}, {"code": "not=", "problem": 83, "user": "51b793d3e4b0d906fcd71d38"}, {"code": "(fn [& z] (if (and (not (reduce (fn [a b] (and a b)) z)) (reduce (fn [a b] (or a b)) z)) true false))", "problem": 83, "user": "51bf4560e4b013aa0d74b817"}, {"code": "#(true? \n  (and\n    (some true? %&)\n    (some false? %&)))", "problem": 83, "user": "4dd59d8b535dae65d5c462eb"}, {"code": "(fn [& args]\n    (and (not (nil? (some identity args)))\n         (not (every? identity args))))", "problem": 83, "user": "5141abf1e4b02fd87f5064c3"}, {"code": "not=", "problem": 83, "user": "51b90b88e4b050a1176cd6a2"}, {"code": "not=", "problem": 83, "user": "51b3f109e4b0f094dd986fa9"}, {"code": "not=", "problem": 83, "user": "4f52ae00e4b03ad3f0c10d42"}, {"code": "not=", "problem": 83, "user": "51bd1a0de4b0df1216cefd93"}, {"code": "(fn [& bools]\n  (and (not (reduce #(and %1 %2) bools)) (reduce #(or %1 %2) bools)))", "problem": 83, "user": "51c342e9e4b0851ac09658f3"}, {"code": "(fn [& xs]\n  (cond\n    (every? true? xs) false\n    (some true? xs) true\n   \t:else false))", "problem": 83, "user": "51c330a9e4b0851ac09658f2"}, {"code": "(fn [& a] (and\n                     (not (nil? (some (partial = true) a)))\n                     (not (every? (partial = true) a))))", "problem": 83, "user": "4f47eab2e4b0d56e7bb92bc6"}, {"code": "(fn [& args] (cond (reduce #(and % %2) args) false (some identity args) true :default false))", "problem": 83, "user": "4ec2f1d9535dcc7ae8597d4d"}, {"code": "(fn xxx\n  ([x] (not x))\n  ([x & next]\n     (let [and-fn (fn and-fn [next]\n                    (if (not (seq next))\n                      true\n                      (if (first next)\n                        (recur (vec (rest next)))\n                        false)))\n           or-fn (fn or-fn [next]\n                   (if (not (seq next))\n                     false\n                     (if (first next)\n                       true\n                       (recur (vec (rest next))))))]\n       (if (and x (and-fn next))\n         false\n         (if (not (or x (or-fn next)))\n           false\n           true)))))", "problem": 83, "user": "5163a7bbe4b055933a9ca02f"}, {"code": "(fn [& args] (and (not (every? identity args)) (not (not-any? identity args))))", "problem": 83, "user": "51789dfae4b03d69594194d7"}, {"code": "(fn [& a] (if (and (some true? a) (some false? a)) true false))", "problem": 83, "user": "50b8e9a4e4b0cba0e598b656"}, {"code": "(fn [ & args]\n  (= (count (frequencies args)) 2)\n  )", "problem": 83, "user": "51bec919e4b013aa0d74b800"}, {"code": "(fn [x & xs]\n  (let [trues (count (filter identity (conj xs x)))]\n    (and (> trues 0) (not= trues (inc (count xs))))))", "problem": 83, "user": "51424cc8e4b0b50abeb46b34"}, {"code": "#(and (not (not (some identity %&))) (not (every? identity %&)))", "problem": 83, "user": "4fa3c137e4b081705acca193"}, {"code": "(fn some-true?\n  [& stmts]\n  (true?\n  (and\n   (some true? stmts)\n   (some false? stmts))))", "problem": 83, "user": "518ad8fce4b06da86c1973c1"}, {"code": "(fn [& arg] (= 2 (count (distinct arg))))", "problem": 83, "user": "51a3c9cde4b0e77c4ca60bf9"}, {"code": "#(boolean (and (some true? %&) (some false? %&)))", "problem": 83, "user": "51c9c6cde4b09ce160bef5b1"}, {"code": "(fn [& bools] (or (and (not (every? identity bools)) (some identity bools)) false))", "problem": 83, "user": "51aab611e4b04e3dc0c27b2d"}, {"code": "(fn [& x] (< 0 (count (get (group-by identity x) true)) (count x)))", "problem": 83, "user": "51beb32ae4b013aa0d74b7fd"}, {"code": "#(if (and(some true? %&) (some false? %&)) true false)", "problem": 83, "user": "51c09719e4b0c9c82288293c"}, {"code": "#(true? (and (some false? %&) (some true? %&)))", "problem": 83, "user": "51c8301ee4b07ef393169e4d"}, {"code": "(fn[& bools] (and (not (not-any? true? bools)) (not-every? true? bools)))", "problem": 83, "user": "4f32135ae4b0d6649770a08e"}, {"code": "(fn [& p]\n  (cond (every? true? p) false\n        (some #{true} p) true\n        :else false))", "problem": 83, "user": "509fa9b5e4b08df8156e9e3f"}, {"code": "(fn \n   ([bl] false)\n   ([bl & re]\n   (if (= 2 (count (distinct (flatten [bl re]))))\n     true\n     false)))", "problem": 83, "user": "51cacda3e4b068dadb8f2227"}, {"code": "(fn [& terms] \n   (and (reduce #(or %1 %2) terms)\n        (not (reduce #(and %1 %2) terms))))", "problem": 83, "user": "515cf9b5e4b00901442db1d4"}, {"code": "(fn [& bools]\n (let [s (into #{} bools)]\n   (if (= 1 (count s))\n     false\n     true)))", "problem": 83, "user": "51d08d67e4b067c365486351"}, {"code": "(fn [& bools] (true? (and (some identity bools) (not (every? identity bools)))))", "problem": 83, "user": "51ba4482e4b0fe3ecfb4642b"}, {"code": "not=", "problem": 83, "user": "51cbdee1e4b08d8387cbede1"}, {"code": "(fn [& bs]\n  (and (> (count bs) 1)\n       (not (every? true? bs))\n       (not (every? false? bs))))", "problem": 83, "user": "51d19c24e4b0cfcf579466c3"}, {"code": "(fn truthiness [& args]\n  (let [truths (count (filter true? args))]\n    (if (or (= truths 0) (= truths (count args)))\n      false\n      true)))", "problem": 83, "user": "51d360d1e4b099f3b6acddff"}, {"code": "not=", "problem": 83, "user": "51d4ed02e4b013d740b70dec"}, {"code": "(fn f [& args]\n    (if (and (some true? args) (some false? args))\n        true\n        false\n    )\n)", "problem": 83, "user": "51d1111ce4b067c36548635f"}, {"code": "(fn [& xs] (if (some identity xs) (if (every? true? xs) false true) false))", "problem": 83, "user": "51ca7906e4b08b1cbd0d9487"}, {"code": "(fn[& b]\n  (if (and ( > (reduce #(if (= true %2) (+ 1 %) %) 0 b) 0) ( < (reduce #(if (= true %2) (+ 1 %) %) 0 b) (count b)))\n   true\n    false\n    ))", "problem": 83, "user": "51d10b1fe4b067c36548635e"}, {"code": "(fn [& rest] (= 2 (count (set rest))))", "problem": 83, "user": "51c9fe91e4b09ce160bef5b6"}, {"code": "not=", "problem": 83, "user": "514cfa27e4b019235f6c057d"}, {"code": "#(boolean (and (some true? %&) (some false? %&)))", "problem": 83, "user": "5082ccb3e4b06a522e8c7af3"}, {"code": "(fn [& xs] ((every-pred (partial some identity) (partial not-every? identity)) xs))", "problem": 83, "user": "51c19873e4b0d204dbe2ca0d"}, {"code": "(fn [& a] (if (not-every? true? a)\n\t(if (some true? a)\n\t\ttrue\n\t\tfalse) false))", "problem": 83, "user": "51bdc609e4b0ff155d51d2b3"}, {"code": "(fn [& xs] (true? (and (some true? xs) (not (every? true? xs)))))", "problem": 83, "user": "51ae350fe4b09397d5109790"}, {"code": "(fn [& bools]\n  (let [numTrue (count (filter true? bools))\n        numBools (count bools)]\n    (and (>= numTrue 1) (< numTrue numBools))))", "problem": 83, "user": "504dffe2e4b078edc5f5938b"}, {"code": "not=", "problem": 83, "user": "50bfd849e4b042992946c649"}, {"code": "#(< 1 (count (group-by list %&)))", "problem": 83, "user": "51b9d1f0e4b0e871ca49590b"}, {"code": "(fn [& more]\n  (cond\n   (every? true? more) false\n   (every? false? more) false\n   :else true))", "problem": 83, "user": "51ab734ee4b04e3dc0c27b34"}, {"code": "(fn [& bs] (= #{true false} (into #{} bs)))", "problem": 83, "user": "51cdd3f0e4b0e42293a2254b"}, {"code": "(fn [& xs](and (true? (some identity xs)) (not-every? identity xs)))", "problem": 83, "user": "51c1d159e4b0d204dbe2ca18"}, {"code": "(fn [& bs] (= #{true false} (into #{} bs)))", "problem": 83, "user": "51670895e4b013fc800656c1"}, {"code": "(fn new-some [ & guys ]\n   (if (and\n         (some true? guys)\n         (not (every? true? guys)))\n     true\n     false))", "problem": 83, "user": "4ede0511535d10e5ff6f5330"}, {"code": "#(boolean (and (some true? %&) (some false? %&)))", "problem": 83, "user": "51e00020e4b01188f0627534"}, {"code": "(fn [& bols]\n  (let [t-num (count (filter true? bols))]\n    (if (and (< t-num (count bols)) (> t-num 0))\n      true\n      false)))", "problem": 83, "user": "51da7e49e4b02ceefd947768"}, {"code": "(fn [& args] (loop [x args\n                    has_true false\n                    has_false false]\n               (if (empty? x)\n                 (and has_true has_false)\n                 (recur (rest x) \n                        (if (= (first x) true) \n                          true \n                          has_true)\n                        (if (= (first x) false)\n                          true\n                          has_false)))))", "problem": 83, "user": "50214ffae4b0ef1d2d4433bc"}, {"code": "#(and (not= nil (some true? %&)) (not-every? true? %&))", "problem": 83, "user": "51cec7b1e4b0e42293a2255b"}, {"code": "(fn [& args]\n  (true? (and (some true? args)\n              (some false? args))))", "problem": 83, "user": "51b66b31e4b02e5820733406"}, {"code": "(fn [& xs]\n  (if (and (some true? xs) (not-every? true? xs)) true false))", "problem": 83, "user": "51b2e850e4b026427ecf067b"}, {"code": "#(boolean (and (some true? %&) (some false? %&)))", "problem": 83, "user": "51cc5cb3e4b02254fc79486f"}, {"code": "(fn [& xs] \n   (if (and \n   (some true? (into '() xs) )\n   (some false? (into '() xs) )\n   )\n     true false))", "problem": 83, "user": "51227a00e4b068a9582e656b"}, {"code": "(fn [& bools]\n  (true?\n    (and\n     (some true? bools)\n     (not (every? true? bools)))))", "problem": 83, "user": "51ce1320e4b0e42293a22551"}, {"code": "(fn [& xs]\n  (boolean\n   (and (some true? xs)\n       (some false? xs))))", "problem": 83, "user": "516199bbe4b009fba0926e36"}, {"code": "(fn [& args] \n  (let [n (count (filter true? args))\n        m (count args)]\n    (cond (= n 0) false\n          (= (- m n) 0) false\n          :else true)))", "problem": 83, "user": "5047eadde4b0ec70b3ef8d94"}, {"code": "(fn [& bools] \n  (cond\n   (every? #(= true %) bools) false\n   (some #(= true %) bools) true\n   :else false\n   )\n  )", "problem": 83, "user": "51e24a04e4b01e5198146430"}, {"code": "(fn [& x] (if (=(and (some true? x) (some false? x)) nil)false true ))", "problem": 83, "user": "51e3cf8ee4b0efabf93c02a3"}, {"code": "(fn [& xs] \n  (and (not (reduce #(and %1 %2) (vec xs)))\n       (reduce #(or %1 %2) (vec xs))))", "problem": 83, "user": "4fc9a977e4b0ee37620e1847"}, {"code": "(fn [& lst]  \n  (let [result (and (some (fn [x] (not x)) lst)\n       \t\t\t\t(some (fn [x] x) lst))]\n    (if (= nil result)\n      false\n      true)))", "problem": 83, "user": "51e0198ee4b01188f0627539"}, {"code": "#(true? (and (some true? %&) (some false? %&)))", "problem": 83, "user": "51da565ae4b02ceefd947765"}, {"code": "#(and (not (not-any? true? %&))\n      (not (every? true? %&)))", "problem": 83, "user": "51e1a1fae4b06a68e693eaf6"}, {"code": "not=", "problem": 83, "user": "51e85d2de4b048bc21b181ee"}, {"code": "not=", "problem": 83, "user": "51ba8f82e4b0fe3ecfb46434"}, {"code": "(fn [& c](every? true? [(some true? c)(some false? c)]))", "problem": 83, "user": "50e90813e4b033b0e80d11e7"}, {"code": "not=", "problem": 83, "user": "51d9eb05e4b02ceefd947755"}, {"code": "(fn [& l]\n   (and (not-every? true? l) (not-every? false? l)))", "problem": 83, "user": "4f75469ee4b0fbe0118ec55a"}, {"code": "#(= 2 (count (set %&)))", "problem": 83, "user": "51eca2ace4b069f463c22cd0"}, {"code": "not=", "problem": 83, "user": "51e595a6e4b0efabf93c02d8"}, {"code": "(fn [& s]   (if    (=  (count  (into #{} s)) 1 ) false true))", "problem": 83, "user": "518644bce4b0da5a5be3baca"}, {"code": "(fn [& x] (or (and (some true? x) (some false? x)) false))", "problem": 83, "user": "51df825de4b01188f062752b"}, {"code": "(fn not-all [& bools] (or (and (some true? bools)\n                               (not-every? true? bools))\n                          false))", "problem": 83, "user": "516385cee4b055933a9ca02d"}, {"code": "(fn [& bs] (let [m (group-by true? bs)] (boolean (and (m true) (m false)))))", "problem": 83, "user": "4e46e48b535dc968683fc4b7"}, {"code": "#(= 2 (count (group-by list (seq %&))))", "problem": 83, "user": "51eb0374e4b0f1f103a0d156"}, {"code": "(fn half-truth [& more]\n  (let [expr (and (some true? more) (some false? more))]\n    (true? expr)))", "problem": 83, "user": "51eb3aace4b0f1f103a0d159"}, {"code": "not=", "problem": 83, "user": "4e3f480c535dc968683fc497"}, {"code": "(fn [& args] \n  (loop [t 0 f 0 arg args]\n    (if (= 0 (count arg))\n        (if (= 0 (* t f))  false true)\n        (if (first arg) (recur (inc t) f (rest arg))\n                        (recur t (inc f) (rest arg))\n        )\n    )\n  )\n)", "problem": 83, "user": "518aec06e4b06da86c1973c2"}, {"code": "#(and (not-every? identity %&) (not-every? not %&))", "problem": 83, "user": "51efd397e4b0249c592fbdeb"}, {"code": "(fn truthy [& truths]\n  (and (reduce #(or %1 %2) truths)\n       (not (reduce #(and %1 %2) truths))))", "problem": 83, "user": "50d882d4e4b01f0871336e69"}, {"code": "(fn\n  [& args]\n  (boolean (and (some true? args) (some false? args))))", "problem": 83, "user": "511b233ae4b07ab9ec456180"}, {"code": "not=", "problem": 83, "user": "51e58e02e4b0efabf93c02d0"}, {"code": "(fn [& l] (cond (every? true? l) false (some true? l) true :else false))", "problem": 83, "user": "51f2ab8be4b0210f90e74554"}, {"code": "(fn [& bools] \n  (cond \n    (every? true? bools) false \n    (some true? bools) true\n    :else false\n  )\n)", "problem": 83, "user": "5029f263e4b023940c84aa45"}, {"code": "(fn [& args] (and (not (every? true? args)) (= true (some true? args))))", "problem": 83, "user": "51f28a64e4b0210f90e7454e"}, {"code": "(fn [& v] \n  (and \n   (not (not-any? #(true? %) (seq v))) \n   (not-every? #(true? %) (seq v))))", "problem": 83, "user": "51d96ad0e4b02ceefd94774f"}, {"code": "#(and (not-every? identity %&) (not-every? not %&))", "problem": 83, "user": "51dc5033e4b09c47a74ce109"}, {"code": "(fn [& args] (true? (and (some false? args) (some true? args))))", "problem": 83, "user": "50573ed8e4b0012181721987"}, {"code": "(fn [& args] (if (and (not-every? identity args) (some identity args)) true false))", "problem": 83, "user": "51f13b80e4b06a20a2523f38"}, {"code": "(fn [& l]\n  (not (or (nil? (some true? l))\n           (nil? (some false? l)))))", "problem": 83, "user": "51e6a2bce4b0ab43cc26c21d"}, {"code": "(fn ht [& args]\n  (boolean (and (not-every? identity args) (some identity args))))", "problem": 83, "user": "51672d15e4b079759a74a5e7"}, {"code": "(fn [& xs]\n  (and \n    (not (every? identity xs))\n    (boolean (some identity xs))))", "problem": 83, "user": "51cbaf14e4b08d8387cbedda"}, {"code": "(fn [& args] (and (not-every? false? args) (not-every? true? args)))", "problem": 83, "user": "5046ee3ee4b03b02161376b4"}, {"code": "(fn [ & xs]\n  (let [r (and (some true? xs) (not (every? true? xs)))]\n    (if r true false)))", "problem": 83, "user": "51e780dae4b0730ab87cf353"}, {"code": ";; true if some are true, not all\n;; otherwise false\n(fn f\n  [& args]\n  (let [ argc (count args)\n         argt (count (filter #(= true %) args)) ]\n    (if (and (not= argc argt) (> argt 0))\n      true\n      false)))", "problem": 83, "user": "50fc48dde4b0d10d794c19f6"}, {"code": "(fn [& bools] ( if (every? true? (seq bools)) false (if (some true? (seq bools)) true false)))", "problem": 83, "user": "5174ade2e4b07031762f2edf"}, {"code": "not=", "problem": 83, "user": "51e1c176e4b06a68e693eafb"}, {"code": "(fn\n  ([x] (not x))\n  ([x y] (or x y))\n  ([x y z] (not (and x y z)))\n  ([x y z a] (or x y z a)))", "problem": 83, "user": "50aedb8ce4b0a40c9cfb08d4"}, {"code": "(fn [& args]\n  (if (and (some true? args) (some false? args))\n    true\n    false))", "problem": 83, "user": "51f82769e4b09be9c177e527"}, {"code": "#(apply not= %&)", "problem": 83, "user": "51b3d998e4b0f094dd986fa8"}, {"code": "#(true? \n  (and\n    (some true? %&)\n    (some false? %&)))\n\n;; %& stands for all argument as sequence\n;; some: Returns the first logical true value of (pred x) for any x in coll, else nil.", "problem": 83, "user": "51d11f5de4b067c365486360"}, {"code": "not=", "problem": 83, "user": "51fa1375e4b0f1313d4689c9"}, {"code": "(fn [& args] \n  (and\n   (reduce \n    (fn [x y] (not (and x y))) \n     true \n     args)\n    (reduce \n    (fn [x y] (or x y)) \n     false \n     args)))", "problem": 83, "user": "51eec1a6e4b0871fa145d98d"}, {"code": "(fn [& xs]\n(and (reduce #(or %1 %2) xs) (not (reduce #(and %1 %2) xs))))", "problem": 83, "user": "51f59607e4b0abb92f97f9d5"}, {"code": "(fn \n  ([x] (if true false true))\n  ([x y] (if (or x y) true false))\n  ([x y z] (if (and (or x y z) (not (and x y z))) true false))\n  ([x y z w] (if (or x y z w) true false)))", "problem": 83, "user": "51ed09b6e4b0bb507043158b"}, {"code": "(fn [& bs]\n  (boolean(and (some true? bs)\n       (some false? bs))))", "problem": 83, "user": "4dddff47535d08e6dec9fdd4"}, {"code": "not=", "problem": 83, "user": "5201572be4b0d7096e99ddbb"}, {"code": "(fn [& xs]\n  (and\n   (reduce #(or % %2) xs)\n   (not (reduce #(and % %2) xs))\n  )\n)", "problem": 83, "user": "51897709e4b0288ada3dbdaa"}, {"code": "(fn half-truth [& args]\n  (= 2 (count (group-by identity args))))", "problem": 83, "user": "51db0d99e4b06aa4d4669a9d"}, {"code": "#(if (some true? %&) (if (not-every? true? %&) true false) false)", "problem": 83, "user": "51f9b1d0e4b09be9c177e550"}, {"code": "not=", "problem": 83, "user": "51fa7154e4b0f1313d4689da"}, {"code": "(fn [& more]\n  (and (reduce #(or %1 %2) more)\n       (not (reduce #(and %1 %2) more))))", "problem": 83, "user": "51aa2b4fe4b04e3dc0c27b21"}, {"code": "(fn half [& coll]\n  (true? (and\n    (some true? coll)\n    (some false? coll))))", "problem": 83, "user": "5201ada5e4b0b2e020a18f14"}, {"code": "#(and (not-every? true? %&) (not-every? false? %&))", "problem": 83, "user": "51944aaae4b0142f60b4aedc"}, {"code": "(fn [& s]\n  (and (not-every? true? s) (not-every? false? s)))", "problem": 83, "user": "52039e12e4b0fb7e47ea51ff"}, {"code": "(fn [& coll]\n    (let [new-coll (filter true? coll)]\n      (cond (= new-coll coll) false\n            (empty? new-coll) false\n            :else true)))", "problem": 83, "user": "51f40975e4b0fca5e8b4822e"}, {"code": "(fn [& var]\n  (cond\n   (every? true? var) false\n   (some true? var) true\n   :else false))", "problem": 83, "user": "513bafa4e4b04402f587b77c"}, {"code": "(fn [& args]\n\n(true? (and (some true? args) (not (every? true? args)))))", "problem": 83, "user": "5202cfe7e4b030ee0c5b2702"}, {"code": "(fn [& args] (= 2 (count (into #{} args))))", "problem": 83, "user": "51f7dd27e4b06ff1c25c52dc"}, {"code": "#(-> %& (distinct) (count) (= 2))", "problem": 83, "user": "52016fd3e4b0b2e020a18f10"}, {"code": "(fn [& args] (and (true? (some true? args)) (true? (some false? args))))", "problem": 83, "user": "4f9c4080e4b0dcca54ed6d1a"}, {"code": "(fn [& vs] (= 3 (reduce (fn [acc x] (if (true? x) (bit-or acc 1) (bit-or acc 2))) 0 vs)))", "problem": 83, "user": "52015698e4b0d7096e99ddba"}, {"code": "(fn [& bools]\n  (if (= 2 (count (set bools))) true false) )", "problem": 83, "user": "5201ff99e4b0b2e020a18f26"}, {"code": "#(= #{true false} (set %&))", "problem": 83, "user": "50c781bbe4b00bb60fe0c535"}, {"code": "#(and (-> (some true? (seq %&)) nil? not)\n      (not-every? true? (seq %&)))", "problem": 83, "user": "51f0ade4e4b0274c496158d9"}, {"code": "(fn [& l]\n  (= 2 (count (distinct l))))", "problem": 83, "user": "52091d57e4b0e152394d76f0"}, {"code": "#(and (> (.indexOf %& true) -1) (> (.indexOf %& false) -1))", "problem": 83, "user": "51f66e0ee4b06ff1c25c52c3"}, {"code": "not=", "problem": 83, "user": "52029e5de4b030ee0c5b26fc"}, {"code": "(fn bools [& bols]\n  (cond (every? true? bols)\n        false\n        (some true? bols)\n        true\n        :else\n        false))", "problem": 83, "user": "4e0d5a5a535d04ed9115e7b5"}, {"code": "(fn[& args](apply (complement =) args))", "problem": 83, "user": "516ab8c2e4b081287f204e9e"}, {"code": "(fn [& items]\n  (and (not(not-any? true? items)) (not-every? true? items)))", "problem": 83, "user": "51696ee7e4b03f62cda68ce8"}, {"code": "(fn [& args] \n  (if (and (some true? args) (not-every? true? args) )\n    true\n    false\n  )\n)", "problem": 83, "user": "52016690e4b0b2e020a18f0f"}, {"code": "(fn [& bools]\n  (true? \n   (and (some true? bools)\n        (some false? bools))))", "problem": 83, "user": "520612a7e4b0bf4f1882c81c"}, {"code": "#(let [c (into #{} %&)] (= (count c) 2))", "problem": 83, "user": "51db1abae4b094966a2cd685"}, {"code": "(fn [& a] (if  (some true? a) (not (every? true? a)) false))", "problem": 83, "user": "5208a3a2e4b0301979a6c235"}, {"code": "(fn [& x]\n  (let [truth (count (filter #(true? %) x))]\n  \t(not (or (zero? truth) (= truth (count x))))))", "problem": 83, "user": "52084f75e4b01ce6bbf31dde"}, {"code": "#(and (not-every? true? %&) (not-every? false? %&))", "problem": 83, "user": "520e32a2e4b066f3ea161c93"}, {"code": "(fn [& s]\n  (if (reduce #(and %1 %2) true s)\n    false\n  \t(reduce #(or %1 %2) false s)))", "problem": 83, "user": "5191ac45e4b0d428d29dc1b6"}, {"code": "(fn [& args] (let [c \t(count args)\n                   tc\t(count (filter true? args))]\n               (and (>= tc 1)\n                    (not= tc c))))", "problem": 83, "user": "5078dedae4b08327cd804a5d"}, {"code": "(fn \n  [& ls]\n  (if (every? true? ls)\n    false\n    (if (not-every? false? ls)\n      true\n      false)))", "problem": 83, "user": "51ec9114e4b069f463c22ccd"}, {"code": "(fn [& args]\n  (= 2 (count (set args))))", "problem": 83, "user": "5213ffd3e4b0961f15ac4d7d"}, {"code": "(fn [& args] (if (and (some true? args) (not-every? true? args)) true false))", "problem": 83, "user": "520242bae4b030ee0c5b26e3"}, {"code": "(fn [& args] (or (and (some identity args) (not (every? identity args))) false))", "problem": 83, "user": "5080a697e4b01a93d3f38e49"}, {"code": "not=", "problem": 83, "user": "52173464e4b082aa80a88c75"}, {"code": "(fn [& args]\n  (boolean (and (some true? args)\n       (some false? args))))", "problem": 83, "user": "513fab65e4b00f13ea1bd891"}, {"code": "(fn [& booleans]\n  (= #{true false} (set booleans)))", "problem": 83, "user": "51f9527fe4b09be9c177e549"}, {"code": "(fn [& x] (and (not-every? true? x) (not-every? false? x)))", "problem": 83, "user": "52160dbee4b0bf4bffd29cb3"}, {"code": "(fn [& s] (and (not (nil? (some true? s))) (not (nil? (some false? s)))))", "problem": 83, "user": "5131d817e4b06942423563ca"}, {"code": "not=", "problem": 83, "user": "52196842e4b0890f2f822bfa"}, {"code": "(fn [& l] (and \n\t    (reduce #(or %1 %2) l)\n\t    (not (every? identity l))))", "problem": 83, "user": "5151c184e4b03e678e393add"}, {"code": "; My solution, works in my repl but not here !!??\n;(fn [& args] (> (count (apply hash-set args)) 1))\n\n;hijacked to store my solution ^\n(fn [& bools]\n  (if (and (seq (filter identity bools)) (seq (filter not bools))) true false))", "problem": 83, "user": "5213dbc3e4b0961f15ac4d74"}, {"code": ";;not= also works \n;;this also works #(= (some true? %&) (some false? %&))\n#(= 2 (count (set %&)))", "problem": 83, "user": "50e1bdd8e4b019fc399ce17f"}, {"code": "(fn [& args] \n  (> (count (set args)) 1))", "problem": 83, "user": "51642237e4b003cf19fdde31"}, {"code": "(fn [& bools] (every? identity [(some identity bools) (not-every? identity bools)]))", "problem": 83, "user": "52199105e4b0c4ef0be82ff9"}, {"code": "(fn [& args]\n  (if (empty? (filter true? args))\n    false\n    (if (empty? (filter false? args))\n      false\n      true)))", "problem": 83, "user": "51b965dde4b0e871ca495905"}, {"code": "#(= 2 (count (set %&)))", "problem": 83, "user": "521679e9e4b0bf4bffd29cca"}, {"code": "(fn [& m](if (and (some true? m) (some false? m)) true false))", "problem": 83, "user": "4fa7de4ce4b081705acca1c9"}, {"code": "(fn [& more] (let [x (filter true? more)]\n               (if (or  (= (count x) (count more)) (empty? x))\n                 false true)))", "problem": 83, "user": "51bf0ccee4b013aa0d74b811"}, {"code": "not=", "problem": 83, "user": "520cb8c4e4b0b022ef140c9a"}, {"code": "#(let [x %&] (and (not-every? false? x) (not-every? true? x)))", "problem": 83, "user": "510ee996e4b07438aa321462"}, {"code": "(fn [& bs]\n  (= #{true false} (set bs)))", "problem": 83, "user": "521b9f92e4b0c4ef0be8304c"}, {"code": "(fn [& xs] (if (= (and (some #(not %) xs) (some #(= % true) xs)) nil) false true))", "problem": 83, "user": "52161db6e4b0bf4bffd29cb8"}, {"code": "(fn\n  ([f] false)\n  ([f & args]\n    (let [c (map #(case % true 1 0)(cons f args))\n          t (reduce + c)]\n      (and (< t (count c)) (> t 0)))))", "problem": 83, "user": "52117ea7e4b07aea8afc4f70"}, {"code": "(fn [& sqnc] (if (and (not (empty? (filter (fn [x] x) sqnc))) (not (empty? (filter (fn [x] (not x)) sqnc)))) true false))", "problem": 83, "user": "5213348ae4b0d32679a50652"}, {"code": "(fn [& bs] (true? (and (some true? bs) (not-every? true? bs))))", "problem": 83, "user": "4f4ff836e4b03ad3f0c10cf4"}, {"code": "(fn [& s]\n  (= true (and (some #(true? %) s)\n          (not (every? #(true? %) s)))))", "problem": 83, "user": "5220bc0fe4b0e6a83c8925a7"}, {"code": "(fn [& rest]\n  (if (some (fn [x] x) rest)\n    (if (not (every? (fn [x] x) rest))\n      true\n      false)\n    false))", "problem": 83, "user": "5220a770e4b0e6a83c8925a3"}, {"code": "(fn [& b] (if (some true? b)\n            (not (every? true? b))\n            false))", "problem": 83, "user": "519c4111e4b0a1d87b003458"}, {"code": "(fn [& bools] (apply not= bools))", "problem": 83, "user": "521e8227e4b0dd19981ad082"}, {"code": "(fn [& args]\n  (and (true? (reduce #(or %1 %2) args))\n       (false? (reduce #(and %1 %2) args))))", "problem": 83, "user": "522048b3e4b0e6c71e0c0c16"}, {"code": "(fn [& y] (and (reduce #(or % %2) false y) (not (reduce #(and % %2) true y))))", "problem": 83, "user": "5216933be4b000d124d989cf"}, {"code": "(fn [& booleans]\n  (cond\n   (nil? ((group-by true? booleans) false)) false\n   (nil? ((group-by true? booleans) true)) false\n   :else true))", "problem": 83, "user": "520693e1e4b0bf4f1882c829"}, {"code": "(fn [& xs] \n  (let [s (set xs)]\n    (and (contains? s true) (contains? s false))))", "problem": 83, "user": "5224a46ce4b01819a2de42e5"}, {"code": "(fn [& x] (if (= (-> x set count) 2) true false))", "problem": 83, "user": "521dceeae4b050d5da042802"}, {"code": "(fn [& bools] (let [[ts fs] ((juxt #(filter true? %) #(filter false? %)) bools)]\n                (and (> (count ts) 0) (> (count fs) 0))))", "problem": 83, "user": "51e61772e4b0efabf93c02e2"}, {"code": "(fn\n  ([f] (= f false))\n  ([f s] (not (= f s)))\n  ([f s t] (not (= f s t)))\n  ([f s t o] (not (= f s t o))))", "problem": 83, "user": "51ca82e9e4b08b1cbd0d9488"}, {"code": "(fn half-truth [& bs]\n  (and  (= (some identity bs) true) (not (every? identity bs))))", "problem": 83, "user": "4fb710f4e4b081705acca2cd"}, {"code": "(fn [& args] (if (and (some true? args) (not-every? true? args)) true false))", "problem": 83, "user": "51f805b0e4b06ff1c25c52e2"}, {"code": "(fn [& args] (if-not (reduce #(and %1 %2) true args) (reduce #(or %1 %2) false args) false))", "problem": 83, "user": "51fc44c5e4b0f1313d468a1b"}, {"code": "(fn anytrue? [x & xs]\n  (let [lst (conj xs x)\n        ts  (filter true? lst)\n        fs  (filter false? lst)]\n    (and (not (empty? ts))\n         (not (empty? fs)))))", "problem": 83, "user": "52153bdde4b0961f15ac4daa"}, {"code": "not=", "problem": 83, "user": "51a91ac2e4b08d8ec191b822"}, {"code": "(fn [& args] (and (not-every? true? args) (not= (some true? args) nil) ))", "problem": 83, "user": "5167e4a2e4b0c5a4140a3099"}, {"code": "(fn [& args]\n  (and\n   (false? (reduce #(and % %2) args))\n   (true? (reduce #(or % %2) args))))", "problem": 83, "user": "5225a0f5e4b01819a2de430e"}, {"code": "(fn [& xs] \n   (let [c (reduce #(+ %1 (if %2 1 0)) 0 xs)] \n     (and (> c 0) (< c (count xs)))))", "problem": 83, "user": "4daec4a0edd6309eace4d15e"}, {"code": "(fn [& params] (= #{true false} (set params)))", "problem": 83, "user": "5225666be4b01819a2de4300"}, {"code": "(fn [& params] \n  (if (reduce (fn [left right] (and left right)) params)\n    false\n    (if (reduce (fn [left right] (or left right)) params)\n      true\n      false)))", "problem": 83, "user": "520f46f9e4b0101e4be6fcee"}, {"code": "(fn [& args] (not (or (every? true? args) (every? false? args))))", "problem": 83, "user": "522600cfe4b0f4c7e20d29c8"}, {"code": "(fn [x & more]\n  (if x\n    (not-every? true? more)\n    (not (not-any? true? more))))", "problem": 83, "user": "51857e64e4b0da5a5be3babe"}, {"code": "(fn [& args]\n  (boolean\n    (and (some true? args)\n         (some false? args))))", "problem": 83, "user": "522454f4e4b01819a2de42d3"}, {"code": "(fn [& xs] (and (not (nil? (some true? xs))) (not (every? true? xs))))", "problem": 83, "user": "52277ab9e4b0186687e23a4f"}, {"code": "#(true? (and (some true? %&) (some false? %&)))", "problem": 83, "user": "522eb5cce4b01cdb292c5f0c"}, {"code": "(fn half-truth [& args]\n  (and (not-every? true? args) (not-every? false? args)))", "problem": 83, "user": "521b339fe4b0c4ef0be83031"}, {"code": "(fn [& args]\n  (let [sum (apply + (map #(if (= true %) 1 0) args))]\n    (and (> sum 0) (not (= sum (count args))))))", "problem": 83, "user": "50ebd63ce4b04edc3377703c"}, {"code": "(fn half-truth [& bools]\n  (if (= [false true] (sort (distinct (map true? bools))))\n    true\n    false))", "problem": 83, "user": "522d0360e4b0806774ddfef7"}, {"code": "(fn\n  [& boolvec]\n  (if (and (some true? boolvec) (some false? boolvec))\n    true\n  \tfalse))", "problem": 83, "user": "510591dde4b06d28cacc92eb"}, {"code": "(fn [& x] (and (reduce #(or % %2) x) (not(reduce #(and % %2) x))))", "problem": 83, "user": "5125029de4b0ce9225d2ed3e"}, {"code": "(fn [& x] (= (count (into #{} x)) 2))", "problem": 83, "user": "51e28063e4b08e53a149f0f2"}, {"code": "(fn [& coll]\n          (not\n            (or\n              (every? #(= true %) coll)\n              (every? #(= false %) coll))))", "problem": 83, "user": "514fd753e4b0b449e54b8e00"}, {"code": "(fn [& args] \n   (loop [args args\n          true-found false \n          false-found false] \n     (if (empty? args) \n       (and true-found false-found) \n       (if (true? (first args)) \n         (recur (rest args) true false-found) \n         (recur (rest args) true-found true)))))", "problem": 83, "user": "521f24ebe4b0e6c71e0c0bcd"}, {"code": "(fn [& xs]\n\t(and\n  \t\t(true? (some #{true} xs))\n  \t\t(not-every? #{true} xs)))", "problem": 83, "user": "51dd9370e4b0c33a4e1da40c"}, {"code": "#(= 2 (count (set %&)))", "problem": 83, "user": "522b922ee4b0d34ee08e71c3"}, {"code": "(fn [& args]\n  (let [m (group-by identity args)]\n    (if (and (not-empty (m false))\n         (not-empty (m true)))\n      true\n      false)))", "problem": 83, "user": "50e4b066e4b0cb9ec68fbca6"}, {"code": "(fn [& in]\n\t(and (reduce #(or %1 %2) in) (not (reduce #(and %1 %2) in))))", "problem": 83, "user": "51aefceee4b09397d5109797"}, {"code": "(fn [& bools] (true? (and (some true? bools) (some false? bools))))", "problem": 83, "user": "52244a77e4b01819a2de42d1"}, {"code": "(fn [& coll]\n  (true? (and (some true? coll) (some false? coll)))\n  )", "problem": 83, "user": "5228f870e4b0186687e23a98"}, {"code": "(fn [& args] (if (and (some true? args) (< 1 (count args)) (not-every? true? args)) true false))", "problem": 83, "user": "520f2265e4b0101e4be6fce7"}, {"code": "(fn [& args]\n   (if (and (some false? args) (not (every? false? args))) \n     true\n     false))", "problem": 83, "user": "516282c3e4b0e6d3c4734711"}, {"code": "not=", "problem": 83, "user": "51cd75d6e4b02254fc79488c"}, {"code": "(fn [& col](every? identity ((juxt some not-every?) identity col)))", "problem": 83, "user": "5233ad08e4b07e3ee2be83ac"}, {"code": "(fn [& bs] (not (or (every? identity bs) (not-any? identity bs))))", "problem": 83, "user": "516abecae4b081287f204e9f"}, {"code": "(fn [& args] (= #{true false} (set args)))", "problem": 83, "user": "4e68c465535d8ccf87e9fe8a"}, {"code": "#(= 2 (count (group-by true? %&)))", "problem": 83, "user": "508923d5e4b06d8254e936e8"}, {"code": "(fn [& bools]\n  (and (not-every? true? bools)\n       (not-every? false? bools)))", "problem": 83, "user": "50270618e4b01614d1633feb"}, {"code": "#(= (count (distinct %&)) 2)", "problem": 83, "user": "523b10dfe4b02f719975bdb8"}, {"code": "(fn [& more] (boolean (and (some true? more) (not-every? true? more))))", "problem": 83, "user": "5213d81de4b0961f15ac4d73"}, {"code": "(fn [& values]\n  (= 2 (count (distinct values))))", "problem": 83, "user": "523b4e91e4b07becd5be21ef"}, {"code": "#(let [uargs (into #{} %&)]\n    (and (contains? uargs false)\n         (contains? uargs true)))", "problem": 83, "user": "4ff9a200e4b0678c553fc3ab"}, {"code": "#(true? (and (some not %&) (some identity %&)))", "problem": 83, "user": "523d02b0e4b0dbf0c3017289"}, {"code": "#(= 2 (count (set %&)))", "problem": 83, "user": "52271ffee4b04e78ff2e19a9"}, {"code": "(fn [& x]\n  (if-not (some #(= % false) x) false\n    (if (some #(= % true) x) true\n      false)))", "problem": 83, "user": "523bc0e6e4b07becd5be21f9"}, {"code": "(fn [ & bs ] (and (not (every? true? bs)) (not (nil? (some true? bs)))))", "problem": 83, "user": "523f0bbfe4b01c266ffa7f91"}, {"code": "(fn [& bools]\n  (let [s (not (nil? (some true? bools)))\n        a (every? true? bools)]\n    (and s (not a))))", "problem": 83, "user": "523bd9c0e4b07becd5be2201"}, {"code": "(fn half-truth [& rest] \n   (and \n     (not (empty? (drop-while #(= %1 true) rest)))\n     (not (empty? (drop-while #(= %1 false) rest)))))", "problem": 83, "user": "52319066e4b0e2e8de81d1e9"}, {"code": "(fn [& arg]\n  (let [s (reduce conj #{} arg)]\n    (= 2 (count s))))", "problem": 83, "user": "5240512ee4b0ad64fa010319"}, {"code": "(fn [& b]\n  (and (true? (some true? b)) (not-every? true? b)))", "problem": 83, "user": "5236b6bce4b05f3be1c7c8fe"}, {"code": "(fn [& truths] (reduce #(and % %2) (for [t [true false]] (reduce #(or % %2) (map #(= t %) truths)))))", "problem": 83, "user": "4f43894ee4b0d7d3c9f3fd21"}, {"code": "(fn f [& x] (if (reduce (fn [a b] (and a b)) x) false (reduce (fn [a b] (or a b)) x)))", "problem": 83, "user": "5149c2f1e4b0829bd132edb0"}, {"code": "(fn [& args]\n   (> (count (partition-by identity args)) 1))", "problem": 83, "user": "511e763ce4b03e81d390ac29"}, {"code": "(fn tmp [& s] \n    (let [n (count s) nt (count (filter true? s))] \n    (and (> nt 0) (< nt n))))", "problem": 83, "user": "5235a902e4b0a643f2dcb750"}, {"code": "(fn hoge [& args]\n\t(->> (partition 2 1 args)\n\t     (map (fn [[x y]] (or (and x (not y)) (and (not x) y))))\n\t     (some true?)\n\t     true?))", "problem": 83, "user": "52381b2ae4b0fae3832e99ef"}, {"code": "(fn [& c]\n    (and (not-every? true? c)\n         (not-every? false? c)\n     )\n)", "problem": 83, "user": "522eba30e4b01cdb292c5f0e"}, {"code": "#(or (and (some identity %&) (not (every? identity %&))) false)", "problem": 83, "user": "523ed522e4b057c4b7cd0a78"}, {"code": "(fn [& args] ((comp not nil?) (and (some true? args) (some false? args))))", "problem": 83, "user": "4f048f67535dcb61093f6bd3"}, {"code": "not=", "problem": 83, "user": "5220909fe4b0e6a83c89259f"}, {"code": "(fn [& bs] (cond (every? true? bs) false (some true? bs) true :default false))", "problem": 83, "user": "51cfc616e4b0e42293a22578"}, {"code": "(fn [& args] (and (not-every? false? args) (not-every? true? args)))", "problem": 83, "user": "521b73f5e4b0c4ef0be83043"}, {"code": "(fn [& xs]\n  (and (reduce #(or %1 %2) xs)\n       (not (reduce #(and %1 %2) xs))))", "problem": 83, "user": "52487654e4b05ef8e38e63dc"}, {"code": "(fn [& a] (not (apply = a)))", "problem": 83, "user": "52379c46e4b0fae3832e99db"}, {"code": "(fn [& args]\n    (let [any? (comp not not-any?)] \n      (and (any? true? args) \n\t      (not-every? true? args)) ))", "problem": 83, "user": "523a9fc9e4b081681ca7adca"}, {"code": "(fn some-true [& args]\n  (true? (and (some true? args) (not-every? true? args))))", "problem": 83, "user": "523b82efe4b07becd5be21f0"}, {"code": "(fn [& bool-vals] (if (and (some true? bool-vals) (some false? bool-vals)) true false))", "problem": 83, "user": "523288fee4b035af41902a88"}, {"code": "(fn [& more] (if (and (some false? more) (some true? more))\n               true false))", "problem": 83, "user": "50550f43e4b0b1b9d1860eb7"}, {"code": "(fn [f & s] \n  (loop [b f s1 s] \n    (if (empty? s1) false \n    (if (= b (first s1)) (recur (first s1) (rest s1)) true))))", "problem": 83, "user": "523b1988e4b02f719975bdbc"}, {"code": "(fn halft [& args]\n (let [x (for [z args] z)]\n   (let [x2 (filter true? x)]\n     (and (> (count x2) 0) (not= (count x) (count x2)))\n     \n     )\n   )\n)", "problem": 83, "user": "52132f8de4b0d32679a50651"}, {"code": "(fn [& args] (not (apply = args)))", "problem": 83, "user": "511dada0e4b0a5c68a34840c"}, {"code": "(fn half-truth [& seq]\n  (let [num-true (count (filter true?  seq))] \n    (and (> num-true 0) (< num-true (count seq)))\n    )\n  )", "problem": 83, "user": "511d4a52e4b022853b0e07a1"}, {"code": "not=", "problem": 83, "user": "52437703e4b076204b44fabf"}, {"code": "(fn [& s] (true? (and (some true? s) (not (every? true? s)))))", "problem": 83, "user": "524be8e0e4b09eba1c0223f1"}, {"code": "(fn [& args] (let [res (filter identity args)] (and (boolean (some identity res)) (< (count res) (count args)))))", "problem": 83, "user": "523b1a65e4b02f719975bdbd"}, {"code": "(fn [& s] (and (reduce #(or %1 %2) s) (not (reduce #(and %1 %2) s))))", "problem": 83, "user": "51b0e7b3e4b0c53cf2e68a6e"}, {"code": "(fn [& args] (= 2 (count (set args))))", "problem": 83, "user": "524f61bee4b0541d1855b80f"}, {"code": "#(if (and (some true? %&) (some false? %&)) true false)", "problem": 83, "user": "524feb3fe4b0541d1855b81f"}, {"code": "(fn [& args] (boolean (and (some identity args) (some not args))))", "problem": 83, "user": "5246e945e4b0644eb7b0783b"}, {"code": "(fn [& args]\n  (if (and (some identity args)\n         (not (every? identity args)))\n    true\n    false))", "problem": 83, "user": "524cdd51e4b0752c4cb68ccc"}, {"code": "#(== 2 (count (distinct (concat '() %&))))", "problem": 83, "user": "5229211be4b04c906c9c6a63"}, {"code": "(fn [& vals] (not (apply = vals)))", "problem": 83, "user": "524f4162e4b0541d1855b806"}, {"code": "(fn [& x] \n       (cond\n         (every? true? x) false\n         (some true? x) true\t \n       :else\n         false\n       )\n     )", "problem": 83, "user": "4e9df73d535dbda64a6f6b90"}, {"code": "(fn [& xs] (= (every? true? xs) (every? false? xs)))", "problem": 83, "user": "525078b6e4b0541d1855b832"}, {"code": "#(> (count (group-by identity %&)) 1)", "problem": 83, "user": "52479487e4b05ef8e38e6373"}, {"code": "(fn [& args] \n  (letfn [(sum_true [coll]\n    (reduce + (map (fn [x] (if (= x true) 1 0)) coll)))]\n  (if (and (not= (sum_true args) 0) (< (sum_true args) (count args))) true false)))", "problem": 83, "user": "524dd1c3e4b0f245900d275c"}, {"code": "(fn [& bs] (boolean (and (some false? bs) (some true? bs))))", "problem": 83, "user": "5213d7aae4b0961f15ac4d72"}, {"code": "(fn [& more] (and (reduce #(or %1 %2) more) (not (reduce #(and %1 %2) more))))", "problem": 83, "user": "524469dee4b0d8acf9ed6a9d"}, {"code": "(fn [& args] \n  (if (and (some true? args) \n           (some false? args))\n    true false))", "problem": 83, "user": "5236cd89e4b0e010857b4e45"}, {"code": "#(= 2 (count (group-by identity %&)))", "problem": 83, "user": "52527192e4b0541d1855b8af"}, {"code": "(fn [& args]\n  ((fn foo [f t args]\n    (if (or (empty? args) (and f t))\n      (and f t)\n      (foo (or f (not (first args))) (or t (first args)) (rest args))\n     )\n   ) false false args))", "problem": 83, "user": "525372ade4b0541d1855b8f3"}, {"code": "(fn [& x] (true? (and (some true? x) (not (every? true? x)))))", "problem": 83, "user": "5217c26fe4b0a4bccb16cab8"}, {"code": "(fn [& s]\n  (not (or (empty? (filter true? s))\n           (empty? (filter false? s)))))", "problem": 83, "user": "5256627ce4b0541d1855ba1a"}, {"code": "(fn [& x] (if (some true? (seq x)) (not-every? true? (seq x)) false))", "problem": 83, "user": "5255b719e4b0541d1855b9ef"}, {"code": "(fn [& xs] (< 1 (count (partition-by identity xs))))", "problem": 83, "user": "524740e7e4b05ef8e38e635d"}, {"code": "(fn [& args]\n  (and (not-every? true? args) (not-every? false? args))\n  )", "problem": 83, "user": "52586d24e4b0cb4875a45cb0"}, {"code": "(fn [& params] (=  2 (count (distinct params))))", "problem": 83, "user": "524ab5f2e4b09eba1c02239d"}, {"code": "(fn [& b] \n  (and \n    (not (not-any? identity b)) \n    (not-every? identity b)))", "problem": 83, "user": "524e6b68e4b0541d1855b7db"}, {"code": "(fn truthy \n  [ & bseq] \n  (and (> (count (filter (partial = true) bseq )) 0 )\n       (> (count (filter (partial = false) bseq )) 0 )\n       ))", "problem": 83, "user": "4ff8aa3fe4b0678c553fc39e"}, {"code": "(fn [& s1]\n\t(and (not (reduce #(and %1 %2) s1)) (reduce #(or %1 %2) s1)\n    )\n)", "problem": 83, "user": "525ba7bbe4b0cb4875a45d28"}, {"code": "(fn [& args] (if (every? true? args) false (if (every? false? args) false true)))", "problem": 83, "user": "52579668e4b0cb4875a45c8c"}, {"code": "(fn [& more] (and (not-every? true? more) (not (every? false? more))))", "problem": 83, "user": "5248c4c7e4b05ef8e38e63e8"}, {"code": "(fn [& items] (true? (and (some true? items) (some false? items))))", "problem": 83, "user": "5244fa73e4b0d8acf9ed6acb"}, {"code": "(fn [& args] (if (and (some true? args) (= (every? true? args) false)) true false))", "problem": 83, "user": "5210ac52e4b080a8d9b9d63e"}, {"code": "(fn test1 [& more]\n  (if (apply = more)\n   false\n   (contains? (set more) true)))", "problem": 83, "user": "51622fb8e4b009fba0926e3f"}, {"code": "not=", "problem": 83, "user": "525d41e3e4b0cb4875a45d6c"}, {"code": "(fn\n  [& args]\n  (if (or (every? true? args) (every? false? args))\n    false\n    (if (some true? args) \n      true)))", "problem": 83, "user": "525fffb8e4b03e8d9a4a702b"}, {"code": "(fn [& x] (= 2 (count (distinct x))))", "problem": 83, "user": "523eb110e4b057c4b7cd0a67"}, {"code": "(fn [b & more]\n  ((fn [ret b more]\n     (if (empty? more)\n       ret\n       (recur (not (= b (first more))) (first more) (rest more))))\n   false b more))", "problem": 83, "user": "521392bce4b0d32679a5065e"}, {"code": "#(-> %& distinct count even?)", "problem": 83, "user": "525431dfe4b0541d1855b970"}, {"code": "(fn [& xs] (and (= true (some true? xs)) (not-every? true? xs)))", "problem": 83, "user": "525bcae9e4b0cb4875a45d30"}, {"code": "(fn [& args]\n  (and (not (not-any? true? args)) (not-every? (partial = true) args)))", "problem": 83, "user": "525d490ae4b0cb4875a45d70"}, {"code": "(fn \n  ([b] false)\n  ([b & muut] (and (reduce #(or %1 %2) b muut) (not (reduce #(and %1 %2) b muut))))\n  )", "problem": 83, "user": "5252cbe7e4b0541d1855b8d2"}, {"code": "(fn [& bools]\n  (if (apply = bools) false true))", "problem": 83, "user": "524ae8e6e4b09eba1c0223b5"}, {"code": "(fn [& xs] (and (not (every? true? xs)) (boolean (some true? xs))))", "problem": 83, "user": "525f51bde4b0cb4875a45dc8"}, {"code": "(fn [& coll]\n   (and\n    (reduce (fn [a b] (or a b)) coll)\n    (not (reduce (fn [a b] (and a b)) coll))))", "problem": 83, "user": "52090567e4b0e152394d76ed"}, {"code": "not=", "problem": 83, "user": "525ed5f4e4b0cb4875a45db8"}, {"code": "(fn [ & x ] (let [cnt (count (filter #(= true %1) x))] (and (> cnt 0) (< cnt (count x)))))", "problem": 83, "user": "52655949e4b03e8d9a4a710b"}, {"code": "(fn [& c]\n\t\t(let [t1 (reduce #(or %1 %2) c)\n\t\t\t\t t2 (reduce #(and %1 %2) c)]\n\t\t  (if (and (= true t1)\n\t\t\t\t   (= false t2))\n\t\t\t  true\n\t\t\tfalse)))", "problem": 83, "user": "51f2851fe4b0210f90e7454b"}, {"code": "(fn [x & more] (= 2 (count (set (cons x more)))))", "problem": 83, "user": "525d5327e4b0cb4875a45d74"}, {"code": "(fn [& b] (and ((fn sometrue [c] (if (empty? c)\n                                  false\n \t\t\t\t  (if (first c)\n                                      true\n                                     (sometrue (rest c))\n                                  )\n                              )\n               ) b)\n             ((fn somefalse [c] (if (empty? c)\n                                    false\n \t\t\t\t    (if (not (first c))\n                                        true\n                                        (somefalse (rest c))\n                                    )\n                                )\n               ) b)\n         )\n)", "problem": 83, "user": "52474ec2e4b05ef8e38e6361"}, {"code": "(fn [& x] (let [c (count (filter true? x))] (and (> c 0) (< c (count x)))))", "problem": 83, "user": "524c7fcfe4b0752c4cb68cbd"}, {"code": "(fn [& args]\n  (cond \n   (every? true? args) false \n   (some true? args) true\n   :else false))", "problem": 83, "user": "52616198e4b03e8d9a4a705e"}, {"code": "(fn long-xor [& args]\n  (if (= (count (apply conj #{} args)) 2) true false))", "problem": 83, "user": "52463059e4b09dbe66b56198"}, {"code": "#(> (count (partition-by identity %&)) 1)", "problem": 83, "user": "50fe9d60e4b03cd852b4e84f"}, {"code": "#(and (not-every? identity %&) (not (not-any? identity %&)))", "problem": 83, "user": "5252b59de4b0541d1855b8cf"}, {"code": "(fn f [& params]\n  (and (true? (some true? params)) (not-every? true? params)))", "problem": 83, "user": "52667ecfe4b03e8d9a4a713e"}, {"code": "(fn [& s]\n  (let [st (partial some identity)\n        nat (partial (complement every?) identity)]\n    (and (boolean (st s)) (nat s))))", "problem": 83, "user": "5261aebbe4b03e8d9a4a7066"}, {"code": "(fn [& x] (let [i (count (filter false? x))] (and (> i 0) (< i (count x)))))", "problem": 83, "user": "52593207e4b0cb4875a45cd3"}, {"code": "(fn [& b] (and (= 2 (count (set b))) (contains? (set b) true)))", "problem": 83, "user": "526c2340e4b03e8d9a4a7281"}, {"code": "(fn [& more] (let [xs (filter true? more)] (and (not (empty? xs)) (not= xs more))))", "problem": 83, "user": "5116e176e4b0063b4e3e16d7"}, {"code": "(fn [& v] (= (count (frequencies v)) 2))", "problem": 83, "user": "50cf21dee4b0e61f11ddcd8b"}, {"code": "(fn [& s] (true? (and (some true? s) (some false? s))))", "problem": 83, "user": "526439a4e4b03e8d9a4a70cc"}, {"code": "(fn [& args]\n  (= (count(into #{} args)) 2))", "problem": 83, "user": "4f944f60e4b0dcca54ed6cc2"}, {"code": "(fn [& args]\n  (true? (and (some true? args)\n              (some false? args))))", "problem": 83, "user": "5012da69e4b0c8732600222d"}, {"code": "(fn halfTrue [& args]\n  (> (count (distinct args)) 1))", "problem": 83, "user": "526ee63de4b03e8d9a4a733f"}, {"code": "(fn [& coll] (or (and (some true? coll) (not (every? true? coll))) false))", "problem": 83, "user": "509e62a8e4b08df8156e9e2e"}, {"code": "not=", "problem": 83, "user": "523c6451e4b07becd5be2222"}, {"code": "(fn [& x] (and \n            (if (some true? x) true false)\n            (not-every? true? x)))", "problem": 83, "user": "5260341ee4b03e8d9a4a7034"}, {"code": "(fn [& x] (loop [fs 0\n                ts 0\n                xs x]\n           (if (nil? xs)\n             (and (> ts 0) (> fs 0))\n             (if (first xs)\n               (recur fs (inc ts) (next xs))\n               (recur (inc fs) ts (next xs))\n             )\n           )\n         )\n)", "problem": 83, "user": "526dd90de4b03e8d9a4a72fe"}, {"code": "(fn [& expr]\n  (< 0 (count (filter identity expr)) (count expr)))", "problem": 83, "user": "511aa2a4e4b0c87c59c9670a"}, {"code": "(fn [& xs]\n  (if (every? identity xs) false\n    (if (some identity xs) true false)))", "problem": 83, "user": "5272669de4b03e8d9a4a742e"}, {"code": "(fn halftrue [& bs] \n  (and \n    (or (some identity bs) false)\n    (not (every? identity bs))))", "problem": 83, "user": "5268eb68e4b03e8d9a4a71c6"}, {"code": "(fn [& b]\n  (and (> (count (filter false? b)) 0)\n       (> (count (filter true? b)) 0)))", "problem": 83, "user": "526f9715e4b03e8d9a4a7372"}, {"code": "(fn [& xs] (and (not-every? true? xs) (not-every? false? xs)))", "problem": 83, "user": "525a643be4b0cb4875a45cf1"}, {"code": "#(= true (and (not (every? true? %&)) (some true? %&)))", "problem": 83, "user": "52727d52e4b03e8d9a4a7439"}, {"code": "not=", "problem": 83, "user": "5273562ae4b03e8d9a4a7479"}, {"code": "(fn half-truth [x & xs] (if (some true? (into #{} (conj xs x))) (if (some false? (into #{} (conj xs x))) true false) false))", "problem": 83, "user": "5272d4b7e4b03e8d9a4a7453"}, {"code": "(fn [& coll] (let [n (count coll) nt (count (filter #(identity %) coll))]\n               (and (< nt n) (> nt 0) )))", "problem": 83, "user": "52628bb0e4b03e8d9a4a7089"}, {"code": "(fn [& args]\n  (true? (and (some identity args)\n              (not-every? identity args))))", "problem": 83, "user": "52736ca1e4b03e8d9a4a747e"}, {"code": "(fn half-truth [& args]                                                 \n    (if (every? true? args) false (if (every? false? args) false true)))", "problem": 83, "user": "526397f1e4b03e8d9a4a70b6"}, {"code": "(fn [& args] (and (not-every? #(= false %) args) (not-every? #(= true %) args)))", "problem": 83, "user": "512318b6e4b03b44edbed433"}, {"code": "#(= 2 (count (distinct %&)))", "problem": 83, "user": "522f483ce4b032bbe342415a"}, {"code": "#(= 2 (count (group-by identity %&)))", "problem": 83, "user": "524f213be4b0541d1855b7ff"}, {"code": "(fn [& args]\n  (= 2 (count(distinct args)))\n    )", "problem": 83, "user": "5274eb56e4b03e8d9a4a74bb"}, {"code": "(fn[& more]\n  (if \n    (= \n      (count more) (count (filter #{true} more))\n    )\n    false\n    (if \n      (= 0 (count (filter #{true} more)))\n      false\n      true\n    )\n    \n  )  \n)", "problem": 83, "user": "515919fbe4b0394f658fe229"}, {"code": "(fn a [& args] (and(not-every? true? args)(not-every? false? args)))", "problem": 83, "user": "527a8eb7e4b03e8d9a4a755f"}, {"code": "(fn [& x] (= #{true false} (set x)))", "problem": 83, "user": "527818f7e4b03e8d9a4a7519"}, {"code": "(fn [& args] (and (not (not-any? #(= true %) args)) (not-every? #(= true %) args)))", "problem": 83, "user": "51f4d46ee4b0fca5e8b48243"}, {"code": "#(apply not= %&)", "problem": 83, "user": "4fda0678e4b05e33b9224f44"}, {"code": "(fn [& bools]\n  (and (true? (some true? bools)) (true? (some false? bools)))\n  \n  )", "problem": 83, "user": "4db03885838c48654951d9bd"}, {"code": "#(if (and (some true? %&) (some false? %&)) true false)", "problem": 83, "user": "4df20dda535d08e6dec9fe23"}, {"code": "(fn [& coll] (not (or (every? true? coll) (every? false? coll))))", "problem": 83, "user": "51e38568e4b0c611d6113e43"}, {"code": "(fn [& x] (and (true? (some identity x)) (not-every? identity x)))", "problem": 83, "user": "527675cbe4b03e8d9a4a74e2"}, {"code": "(fn [& s] (if (and (> (/ (count (filter true? s)) (float (count s))) 0) (< (/ (count (filter true? s)) (float (count s))) 1)) true false))", "problem": 83, "user": "525c575be4b0cb4875a45d38"}, {"code": "#(true?\n  (and\n    (some true? %&)\n    (some false? %&)))", "problem": 83, "user": "5272ccf1e4b03e8d9a4a7450"}, {"code": "not=", "problem": 83, "user": "527b856fe4b03e8d9a4a758d"}, {"code": "(fn myHalfTruth\n  [& bools]\n  (= 2 (count (set bools))))", "problem": 83, "user": "509a25b7e4b0efbae1fbc0a8"}, {"code": "(fn [x & res] (if (some true? (conj res x)) (not (every? true? (conj res x))) false))", "problem": 83, "user": "522f39a8e4b032bbe3424159"}, {"code": "not=", "problem": 83, "user": "52810225e4b0757a1b171418"}, {"code": "#(boolean (and (some #{true} %&) (not (apply = %&))))", "problem": 83, "user": "50be9b4ae4b00fb48fed2ef6"}, {"code": "#(not= nil (and (some identity %&) (some not %&)))", "problem": 83, "user": "519ef784e4b087743fad2198"}, {"code": "(fn [& rest] (= #{true false} (set rest)))", "problem": 83, "user": "4f80db02e4b033992c121bf9"}, {"code": "#(and (not-every? false? %&) (not-every? identity %&))", "problem": 83, "user": "522a01ade4b0590a43906ced"}, {"code": "(fn [& coll] (every? true? [(some true? coll) (not (every? true? coll))]))", "problem": 83, "user": "4f9510b5e4b0dcca54ed6cc7"}, {"code": "(fn [& bools]\n  (boolean (and (some true? bools)\n                (not-every? true? bools))))", "problem": 83, "user": "52890634e4b0239c8a67ae5e"}, {"code": "not=", "problem": 83, "user": "527ba29de4b03e8d9a4a7594"}, {"code": "#(boolean (and (not-every? identity %&)(some identity %&)))", "problem": 83, "user": "4f93539de4b0dcca54ed6cba"}, {"code": "#(= (count (set %&)) 2)", "problem": 83, "user": "51a584c7e4b051b01d55f44e"}, {"code": "not=", "problem": 83, "user": "5137fb22e4b0a5db03d727d3"}, {"code": "(fn [& s] (> (count (partition-by identity s)) 1))", "problem": 83, "user": "4e8dd6cb535d65386fec213b"}, {"code": "#(true? \n  (and\n    (some true? %&)\n    (some false? %&)))", "problem": 83, "user": "528b08efe4b0239c8a67ae8a"}, {"code": "(fn weird-or [& args]\n  (and (not= nil (some identity args))\n       (not (every? identity args))))", "problem": 83, "user": "4f35b2ace4b0e243712b1ec5"}, {"code": "(fn [& args] (true? (and (some true? args) (some false? args))))", "problem": 83, "user": "528a791ae4b0239c8a67ae77"}, {"code": "not=", "problem": 83, "user": "528d1094e4b0239c8a67aebe"}, {"code": "(fn [& input]\n  (cond\n   (every? identity input) false\n   (some identity input) true\n   :else false))", "problem": 83, "user": "528bba38e4b0239c8a67aea9"}, {"code": "(fn [& bools] (cond (every? true? bools) false (some true? bools) true :else false))", "problem": 83, "user": "5290257ae4b0239c8a67af03"}, {"code": "#(and (not (every? not %&)) (not (every? identity %&)))", "problem": 83, "user": "52753740e4b03e8d9a4a74c1"}, {"code": "(fn [& xs] (and (not (every? identity xs)) (if (some identity xs) true false)))", "problem": 83, "user": "527236d4e4b03e8d9a4a741f"}, {"code": "(fn [& a] (= 2 (count (set a))))", "problem": 83, "user": "4fe9de74e4b0547ebccb2475"}, {"code": "(fn some-not-every [& xs] (true? (and (some true? xs) (not (every? true? xs)))))", "problem": 83, "user": "5255bf1ee4b0541d1855b9f1"}, {"code": "not=", "problem": 83, "user": "50800e49e4b089ade05efbda"}, {"code": "#(if (and (some true? %&) (some false? %&)) true false)", "problem": 83, "user": "5285920be4b0239c8a67adfb"}, {"code": "(fn [& x]\n   (if (reduce (fn [a b]\n             (or a b)\n             ) false x) \n     (if (reduce (fn [a b]\n             (and a b)\n             ) true x) false true)\n     false)\n   )", "problem": 83, "user": "528ce039e4b0239c8a67aebc"}, {"code": "(fn [& args]\n  (and\n   (not (every? true? args))\n   (boolean (some true? args))))", "problem": 83, "user": "4f3d83b5e4b0e243712b1f69"}, {"code": "not=", "problem": 83, "user": "52950ab6e4b02ebb4ef7501a"}, {"code": "(fn [& bs] (true? (and (some true? bs) (not (every? true? bs)))))", "problem": 83, "user": "52951156e4b02ebb4ef7501b"}, {"code": "(fn\n  [& more]\n  (let [xs (set more)]\n    (if (and (contains? xs true) (contains? xs false))\n      true\n      false)))", "problem": 83, "user": "5289bba9e4b0239c8a67ae69"}, {"code": "(fn [& args]\n  (if (every? true? args)\n    false\n    (not (not (some true? args)))))", "problem": 83, "user": "4f3656d1e4b0e243712b1ec9"}, {"code": "not=", "problem": 83, "user": "528e64b7e4b0239c8a67aedd"}, {"code": "(fn [ & el] (not (=  (first (sort el)) (last (sort el)) )))", "problem": 83, "user": "5296008fe4b02ebb4ef7502a"}, {"code": "(fn half-truth [& y] (if (< 0 (count (filter true? y)) (count y))\n                          true\n                          false))", "problem": 83, "user": "5296aa9be4b02ebb4ef75034"}, {"code": "(fn [& bools] (boolean (and (some true? bools) (not-every? true? bools))))", "problem": 83, "user": "51fe9d7ce4b0f1313d468a70"}, {"code": "(fn [& xs] \n  (and (reduce #(or %1 %2) \n          false \n          xs)\n       (not (reduce #(and %1 %2)\n                    true\n                    xs))))", "problem": 83, "user": "50fe2420e4b03cd852b4e84a"}, {"code": "#(-> %& distinct count (= 2))", "problem": 83, "user": "4f6511eee4b07046d9f4ef3a"}, {"code": "(fn my-half-truth [& col]\n  (let [t (count (filter #(true? %) col))\n        f (count (filter #(false? %) col))]\n    (if (and (> t 0)\n             (> f 0))\n      true\n      false)))", "problem": 83, "user": "4f6e7073e4b07046d9f4efd8"}, {"code": "(fn [& bools]\n  (let [n (count (filter true? bools))]\n    (cond (= n (count bools)) false\n          (< 0 n) true\n          :else false)))", "problem": 83, "user": "50294c28e4b0b33e9bf6fdef"}, {"code": "(fn [& bs]\n  (if (and \n       (some true? bs) \n       (not (every? true? bs)))\n    true\n    false))", "problem": 83, "user": "52990271e4b02ebb4ef7506d"}, {"code": "(fn [& a] ((complement #(or (every? true? (seq a)) (every? false? (seq a))))))", "problem": 83, "user": "52140b53e4b0961f15ac4d7e"}, {"code": "(fn [& args] \n  (let [c (count (filter true? args))]\n    (and (> c 0) (< c (count args)))))", "problem": 83, "user": "4e72187b535d5021c1a8965b"}, {"code": "(fn bools [& bs]\n  (and (not (nil? (some true? bs))) (not (nil? (some false? bs))))\n)", "problem": 83, "user": "529d4f4be4b04e0c58e87b79"}, {"code": "(fn [& xs]\n  (and\n     (true? (some true? xs)) \n     (not-every? true? xs)\n   )\n  )", "problem": 83, "user": "5298d3f4e4b02ebb4ef75068"}, {"code": "(fn [& bools]\n  (let [all (count bools)\n        trues (count (filter (fn [b] b) bools))]\n    (cond\n     (= trues 0) false\n     (= trues all) false\n     :else true)))", "problem": 83, "user": "52323a4ae4b035af41902a79"}, {"code": "#(true? (and (some true? %&) (some false? %&)))", "problem": 83, "user": "527094f0e4b03e8d9a4a73b3"}, {"code": "(fn [& args] (and (not-every? #(= true %) args) (not-every? #(= false %) args)))", "problem": 83, "user": "525b12b1e4b0cb4875a45d04"}, {"code": "(fn bs [& bools]\n  (not (or (every? true? bools) (not-any? true? bools))))", "problem": 83, "user": "529ce629e4b04e0c58e87b6e"}, {"code": "(fn [& all] (and (not (apply = all)) (some identity all)))", "problem": 83, "user": "51c214bce4b0d204dbe2ca1c"}, {"code": "not=", "problem": 83, "user": "5273b883e4b03e8d9a4a748f"}, {"code": "(fn [& a] (and (not (empty? (filter false? a)))\n                (not (empty? (filter true? a)))))", "problem": 83, "user": "52a1acb2e4b04e0c58e87bdb"}, {"code": "(fn [& bs]\n  (and\n   (not(not-any? identity bs)) \n   (not(every? identity bs))))", "problem": 83, "user": "52a32876e4b04e0c58e87bfb"}, {"code": "(fn [& coll] \n  (let [coll-set (set coll)]\n    (and (contains? coll-set false) (contains? coll-set true))))", "problem": 83, "user": "528b01a0e4b0239c8a67ae89"}, {"code": "not=", "problem": 83, "user": "51ad244fe4b09397d510977f"}, {"code": "(fn [& ts] (cond (every? true? ts) false (every? false? ts) false :else true))", "problem": 83, "user": "4ec1619b535dfed6da9c6dab"}, {"code": "not=", "problem": 83, "user": "52a5e784e4b0c58976d9abf3"}, {"code": "(fn [& ts]\n  (= true(and \n   (some true? ts)\n   (some false? ts))))", "problem": 83, "user": "527ccaf4e4b0757a1b17136d"}, {"code": "(fn [& args] (if (and (some true? args) (not (every? true? args))) true false ))", "problem": 83, "user": "5290ffaee4b0239c8a67af10"}, {"code": "#(and (not-every? true? %&) (not-every? false? %&))", "problem": 83, "user": "4fa38e3fe4b081705acca190"}, {"code": "#(boolean (and (some true? %&) (some false? %&)))", "problem": 83, "user": "528652fbe4b0239c8a67ae14"}, {"code": "(fn ht [& v]\n  (and (not-every? false? v) (not-every? true? v)))", "problem": 83, "user": "5267d9bde4b03e8d9a4a7188"}, {"code": "(fn [& bs]\n  (let [vs (vals (frequencies bs))]\n    (and (> (count vs) 1)\n         (not (some #{0} vs)))))", "problem": 83, "user": "5298c83de4b02ebb4ef75064"}, {"code": "(fn [& args] \n  (let [ct (count args) \n        tct (count (filter #(= % true) args))] \n    (and (> tct 0) (< tct ct))))", "problem": 83, "user": "5273e006e4b03e8d9a4a7495"}, {"code": "not=", "problem": 83, "user": "51929214e4b08962174cf74c"}, {"code": "(fn [& n]\n  (cond (every? true? n) false\n        (every? false? n) false\n        :else true))", "problem": 83, "user": "520332f7e4b030ee0c5b2714"}, {"code": "(fn [f & r] (let [lst (flatten (filter (complement nil?) (list f r)))] (and (not (reduce #(and %1 %2) lst)) (reduce #(or %1 %2) lst))))", "problem": 83, "user": "52a5d1f3e4b0c58976d9abf1"}, {"code": "(fn some-true[& args](and (<= 1 (count (filter true? args))) (<= 1 (count (filter false? args)))))", "problem": 83, "user": "52a1edd6e4b04e0c58e87be4"}, {"code": "(fn [& args]\n   (and (apply (some-fn true?) args)\n       (not-every? true? args)))", "problem": 83, "user": "5298cc88e4b02ebb4ef75065"}, {"code": ";some\n;some;\n(fn [& bool] (cond (every? true? bool) false (some true? bool) true :else false))", "problem": 83, "user": "52a28e1ce4b04e0c58e87bf0"}, {"code": "not=", "problem": 83, "user": "528a3e14e4b0239c8a67ae72"}, {"code": "(fn [& a]\n      (and\n       (not-every? (fn [x] (not x)) a)\n       (not-every? (fn [x] x) a)))", "problem": 83, "user": "52a88c4de4b0c58976d9ac30"}, {"code": "(fn [& args]\n  (let [numtrue (count (filter true? args))]\n    (and (> (count args) numtrue) (> numtrue 0))))", "problem": 83, "user": "52a779fce4b0c58976d9ac1a"}, {"code": "#(if (> (count (map first (group-by true? %&))) 1) true false)", "problem": 83, "user": "51a058dae4b0b292b01ee3f3"}, {"code": "(fn test [& args]\n  (even? (count (distinct args))))", "problem": 83, "user": "5289f1f4e4b0239c8a67ae6d"}, {"code": "#(and (not-every? true? %&) (not-every? false? %&))", "problem": 83, "user": "52a04f0ee4b04e0c58e87bc1"}, {"code": "(fn half-true [& args]\n  (and (not (every? true? args))\n       (not (every? false? args))))", "problem": 83, "user": "529e3a4fe4b04e0c58e87b92"}, {"code": "(fn [& args]\n   (let [count-true (count (filter true? args))\n         count-args (count args)]\n         (and (> count-true 0) (< count-true count-args))))", "problem": 83, "user": "52295917e4b04c906c9c6a6f"}, {"code": "(fn half-truth [& flags] \n  (and (true? (some true? flags)) \n       (not-every? true? flags)))", "problem": 83, "user": "529a73bde4b02ebb4ef75096"}, {"code": "(fn [& xs] (= (count (set xs)) 2))", "problem": 83, "user": "52afbc69e4b0c58976d9acc0"}, {"code": "(fn [& args]\n  (boolean (and (some true? args) (not-every? true? args))))", "problem": 83, "user": "51a9dbc9e4b04e3dc0c27b1e"}, {"code": "(fn half-truth\n  [& coll]\n  (and\n   (not (apply = true coll))\n   (boolean (some #(= % true) coll))))", "problem": 83, "user": "51937eb3e4b04df54c098022"}, {"code": "(fn verificaBooleano [& bol]\n  (if (< (count (filter #(= % true) bol)) (count bol))\n   (if (> (count (filter #(= % true) bol)) 0)\n     true\n     false\n   )\n   false\n  )\n)", "problem": 83, "user": "5249afc9e4b05ef8e38e6470"}, {"code": "(fn [& rest]\n  (if (every? true? rest)\n    false\n    (apply (some-fn true?) rest)))", "problem": 83, "user": "4ef9b021535dced4c769f269"}, {"code": ";(fn [& args] (and (not-every? false? args) (not-every? true? args)) )\n\nnot=", "problem": 83, "user": "528f4462e4b0239c8a67aef0"}, {"code": "not=", "problem": 83, "user": "528c51a5e4b0239c8a67aeb4"}, {"code": "(fn ([& xs] (and (reduce #(or %1 %2) xs) (not-every? true? xs))))", "problem": 83, "user": "52a62e16e4b0c58976d9abf9"}, {"code": "(fn [& s] (true? (and (some true? s) (not-every? true? s))))", "problem": 83, "user": "527c040be4b03e8d9a4a75a7"}, {"code": "(fn [& xs]\n  (boolean (and\n   (some identity xs)\n   (not-every? identity xs))))", "problem": 83, "user": "527ba695e4b03e8d9a4a7596"}, {"code": "#(not (nil? (and (some identity %&) (some false? %&))))", "problem": 83, "user": "4ee8b9c9535d93acb0a66884"}, {"code": "(fn halftrue [& args]\n  (if(= (some #{true} args) true) (if(= (some (zipmap '(false) (repeat true)) args) true) true false) false)\n)", "problem": 83, "user": "527c0509e4b03e8d9a4a75aa"}, {"code": "(fn [ & args] (true? (and (some true? args) (not-every? true? args))))", "problem": 83, "user": "52a55adee4b0c58976d9abe7"}, {"code": "(fn [& b]\n   (let [exists (some true? b)]\n   (and\n     (if (nil? exists)\n       false\n       exists)\n     (not-every? true? b))))", "problem": 83, "user": "515896f2e4b059418b97f0a8"}, {"code": "(fn [& a] (and (false? (reduce #(and %1 %2) a))\n      (true? (reduce #(or %1 %2) a))))", "problem": 83, "user": "52747090e4b03e8d9a4a74a5"}, {"code": "(fn [& a] (cond (every? true? a) false (every? false? a) false (some true? a) true))", "problem": 83, "user": "524f4256e4b0541d1855b808"}, {"code": "(fn  [& bs] \n  (cond \n    (true? (reduce  #(and %1 %2) bs)) false\n    (false? (reduce #(or %1 %2) bs)) false\n    :else true))", "problem": 83, "user": "52b43468e4b0c58976d9ad1b"}, {"code": "(fn half-truth\n  [& rest]\n  (and (true? (some true? rest))\n       (not-every? true? rest)))", "problem": 83, "user": "4ef7a483535dced4c769f258"}, {"code": "#(= #{true false} (set %&))", "problem": 83, "user": "52b5edd1e4b0c58976d9ad3c"}, {"code": "(fn [& a] (let [aset (into #{} a)]  (if (contains? aset true) (contains? aset false) false)) )", "problem": 83, "user": "52b60e94e4b0c58976d9ad3e"}, {"code": "(fn f [& x]\n  (and (not= nil (some true? x)) (not-every? true? x)))", "problem": 83, "user": "52b0323ee4b0c58976d9acc6"}, {"code": "(fn half-true? [& args] \n  (and (boolean (some true? args)) (not-every? true? args)))", "problem": 83, "user": "527fd663e4b0757a1b1713de"}, {"code": "(fn half-truth\n  [& bols]\n  (if (nil? (next bols))\n    false\n    (> (count (reduce #(clojure.set/union #{%2} %) #{}  bols)) 1)))", "problem": 83, "user": "51852961e4b0da5a5be3babb"}, {"code": "#(= 2 (count(set %&)))", "problem": 83, "user": "52774dd2e4b03e8d9a4a74ff"}, {"code": "(fn [& bs] (= 2 (count (set bs))))", "problem": 83, "user": "4fc3a72ae4b081705acca342"}, {"code": "(fn [& bs] (and (not (every? true? bs)) (not (every? false? bs))))", "problem": 83, "user": "52b8af15e4b07a9af57922b5"}, {"code": "(fn [& coll] (not (or (every? false? coll) (every? true? coll))))", "problem": 83, "user": "52ba2af3e4b07a9af57922cc"}, {"code": "(fn [& s] (= true (second (map first (partition-by identity (sort s))))))", "problem": 83, "user": "52ba43d0e4b07a9af57922cd"}, {"code": "not=", "problem": 83, "user": "52b42d7ee4b0c58976d9ad19"}, {"code": "(fn [& pred] \n   (every? true? [(not-every? true? pred) \n                  (some true? pred)]))", "problem": 83, "user": "52ab61f5e4b0c58976d9ac75"}, {"code": "(fn [& args] (if (and (some true? args) (not (every? true? args)))\n               true\n               false))", "problem": 83, "user": "5294e44de4b02ebb4ef75016"}, {"code": "(fn [& args]\n  (and\n   (not-every? true? args)\n   (not-every? false? args)))", "problem": 83, "user": "52b405e1e4b0c58976d9ad15"}, {"code": "(fn [& a]\n   (not= (true? (every? identity a))\n         (true? (some identity a))))", "problem": 83, "user": "52a9154ee4b0c58976d9ac3b"}, {"code": "not=", "problem": 83, "user": "526fce6fe4b03e8d9a4a7383"}, {"code": "(fn half-truth [& args] (if (and (some #(= true %) args) (some #(= false %) args)) true false))", "problem": 83, "user": "52763696e4b03e8d9a4a74d7"}, {"code": "(fn [& args] (and (boolean (some true? args)) (not (every? true? args))))", "problem": 83, "user": "52baea85e4b07a9af57922d9"}, {"code": "(fn [& s] (if (= (count (distinct s)) 2) true false))", "problem": 83, "user": "52b80827e4b0c58976d9ad56"}, {"code": "(fn [& args]\n  (let [ct (count (filter (fn [x] (true? x)) args))]\n    (and (> ct 0) (< ct (count args))))\n  )", "problem": 83, "user": "52bc6f5ee4b07a9af57922f6"}, {"code": "(fn\n  [& more]\n  (and (not (every? identity more))\n       (not (nil? (some identity more)))))", "problem": 83, "user": "4f5d5202e4b0030a34fb2b38"}, {"code": "not=", "problem": 83, "user": "52b577c9e4b0c58976d9ad39"}, {"code": "(fn [& b] (= (set b) #{true false}))", "problem": 83, "user": "4eda8d7c535d10e5ff6f530f"}, {"code": "(fn [& args] (and (not-every? identity args) (not-every? not args)))", "problem": 83, "user": "4f3a979de4b0e243712b1f10"}, {"code": "(fn [& args] (not (or (every? false? args) (every? identity args))))", "problem": 83, "user": "4f99ae4ae4b0dcca54ed6d00"}, {"code": "(fn [& bools] (= (count (partition-by identity (sort bools))) 2))", "problem": 83, "user": "52c200cbe4b07a9af5792372"}, {"code": "not=", "problem": 83, "user": "50dcb2f4e4b02e6ac9592c91"}, {"code": "(fn [& l] (not (or (not-any? true? l) (every? true? l))))", "problem": 83, "user": "52b7a904e4b0c58976d9ad51"}, {"code": "not=", "problem": 83, "user": "50772e6ae4b0fc74642bff5d"}, {"code": "(fn [& args]\n  (apply not= (first args) args))", "problem": 83, "user": "52bdb689e4b07a9af5792306"}, {"code": "(fn [& bools] (if (and (some identity bools) (some not bools)) true false))", "problem": 83, "user": "52470d42e4b05ef8e38e6350"}, {"code": "(fn [& xs] (and (not-every? true? xs) (not-every? false? xs)))", "problem": 83, "user": "505b0431e4b021387fb8985e"}, {"code": "(fn [& s] (not (->> s ((juxt filter remove) true?) (map empty?) (some #{true}))))", "problem": 83, "user": "52bdf6bde4b07a9af579230d"}, {"code": "(fn or-fn [& truths]\n  (and (not (nil? (some true? truths)))\n       (not (nil? (some false? truths)))))", "problem": 83, "user": "52aa4a67e4b0c58976d9ac62"}, {"code": "(fn [& x] \n  (boolean (and (not (every? true? x)) (some true? x))))", "problem": 83, "user": "527cd633e4b0757a1b17136f"}, {"code": "(fn [& l]\n   (= #{true false}\n      (reduce\n       (fn [l e] (if (contains? l e) l\n                     (conj l e))) #{} l)))", "problem": 83, "user": "52c25645e4b07a9af579237d"}, {"code": "not=", "problem": 83, "user": "4f0f174c535d0136e6c22330"}, {"code": "(fn [& args]\n  \t(if (and (= true (first args)) (apply = args))\n      false\n      (reduce #(or %1 %2) args)))", "problem": 83, "user": "529d292fe4b04e0c58e87b74"}, {"code": "#(and (not-every? true? %&) (not-every? false? %&))", "problem": 83, "user": "52b02329e4b0c58976d9acc5"}, {"code": "(fn [& a]\n  (= true (and (some false? a) (some true? a))))", "problem": 83, "user": "51eab308e4b0f1f103a0d150"}, {"code": "(fn [& x]\n  (and (not-every? true? x) (not-every? false? x)))", "problem": 83, "user": "515bbcd9e4b0388ca8ca1521"}, {"code": "(fn half-truth [& xs]\n  (and (not (nil? (some true? xs)))\n       (not-every? true? xs)))", "problem": 83, "user": "5269c150e4b03e8d9a4a71f8"}, {"code": "(fn [& xs] (= #{true false} (into #{} xs)))", "problem": 83, "user": "4ea365e2535d7eef308072c5"}, {"code": "(fn [& preds]\n   (let [ct (reduce #(if (true? %2) (inc %1) %1) 0 (seq preds))]\n     (and (> ct 0)\n          (< ct (count preds)))))", "problem": 83, "user": "5215661be4b02f6d8ea676c7"}, {"code": "(fn [& s]\n          (true? (and (some #(true? %) s) (some #(false? %) s))))", "problem": 83, "user": "52c6f6dee4b0c2d177d62118"}, {"code": "not=", "problem": 83, "user": "52ae886de4b0c58976d9acab"}, {"code": "#(and (not-every? false? %&) (not-every? true? %&))", "problem": 83, "user": "52ab51c4e4b0c58976d9ac73"}, {"code": "(fn [& a]\n    (let [t-cnt (count (filter #(= % true) a))\n          f-cnt (count (filter #(= % false) a))]\n          (if (and (> t-cnt 0) (> f-cnt 0)) true false)))", "problem": 83, "user": "52c3a0f4e4b0c2d177d620c6"}, {"code": "(fn [& coll]\n  (if (and (some true? coll) (not-every? true? coll))\n    true\n    false))", "problem": 83, "user": "523f1245e4b01c266ffa7f95"}, {"code": "#(and (not= nil (some true? %&)) (not-every? true? %&))", "problem": 83, "user": "52342722e4b07e3ee2be83c0"}, {"code": "#(-> (group-by identity %&) (keys) (count) (> 1))", "problem": 83, "user": "52c00263e4b07a9af579233f"}, {"code": "not=", "problem": 83, "user": "52c6a0abe4b0c2d177d62111"}, {"code": "(fn some [& args]\n  (and\n   (reduce #(or % %2) args) ; any\n   (not (reduce #(and % %2) args)); all\n  )\n)", "problem": 83, "user": "52bf936ee4b07a9af579233b"}, {"code": "not=", "problem": 83, "user": "52c4fe42e4b0c2d177d620e9"}, {"code": "not=", "problem": 83, "user": "508f97c0e4b0ea685a20f768"}, {"code": "(fn [& bools]\n    (every? true? [(not-every? true? bools) (some true? bools)]))", "problem": 83, "user": "52c1bd29e4b07a9af579236a"}, {"code": "(fn [& b]\n  (and (if (some identity b) true false) (not-every? identity b)))", "problem": 83, "user": "52c8758be4b0c2d177d62135"}, {"code": "not=", "problem": 83, "user": "52a757b9e4b0c58976d9ac12"}, {"code": "(fn xor [& args]\n  (and (not (nil? (some true? args)))\n       (not (every? true? args))))", "problem": 83, "user": "52cc09c1e4b07d0d72b27356"}, {"code": "(fn [& args] \n  (let [ts (count (filter #(= true %) args))\n        argc (count args)]\n    (and (< ts argc) (> ts 0))))", "problem": 83, "user": "4f77b68de4b0fbe0118ec581"}, {"code": "(fn [& args] (true? (and (some true? args) (not-every? true? args))))", "problem": 83, "user": "4f45c72be4b0d56e7bb92b8a"}, {"code": "(fn [& xs]\n  (and\n   (not-every? identity xs)\n   (not-every? not xs)\n   )\n  )", "problem": 83, "user": "4f03641a535dcb61093f6a9b"}, {"code": "(fn [& args] (and (reduce #(or %1 %2) false args) (not (every? true? args))))", "problem": 83, "user": "52cc85abe4b07d0d72b27367"}, {"code": "(fn [& bools]\n   (and (not-every? false? bools) (not-every? true? bools)))", "problem": 83, "user": "505345d9e4b0517ede0d0a06"}, {"code": "#(= 2 (-> %& set count))", "problem": 83, "user": "52c5c1c8e4b0c2d177d620fc"}, {"code": "(fn [& bools] (and (true? (some true? bools)) ((complement every?) true? bools)))", "problem": 83, "user": "52cca65be4b07d0d72b2736b"}, {"code": "(fn [& xs] (let [s (into #{} xs)] (and (contains? s true) (contains? s false))))", "problem": 83, "user": "5110249ae4b04c71fce993ea"}, {"code": "(fn m [& coll]\n  (cond\n   (every? true? coll) false\n   (every? false? coll) false\n   :else true))", "problem": 83, "user": "52828298e4b0757a1b17145b"}, {"code": "not=", "problem": 83, "user": "52bf29fde4b07a9af579232e"}, {"code": "(fn [& s] (let [g (group-by #(identity %) s)] (and (> (count g) 1) (> (count (g true)) 0))))", "problem": 83, "user": "52caeb25e4b071a8d36bd3e7"}, {"code": "not=", "problem": 83, "user": "52d03f55e4b07d0d72b273b8"}, {"code": "(fn [& more] (true? (and (some true? more) (some false? more))))", "problem": 83, "user": "5094057fe4b097f48cc38593"}, {"code": "#(true? \n  (and\n    (some true? %&)\n    (some false? %&)))", "problem": 83, "user": "4eb7b049535d7eef30807377"}, {"code": "(fn [& args]\n  (let [x (some true? args), y (every? true? args)]\n    (if (and (= x true) (= y false))\n      true\n      false)))", "problem": 83, "user": "52cf084ce4b07d0d72b27399"}, {"code": "(fn [& s]( if-not(reduce #(and %1 %2) (seq s)) (reduce #(or %1 %2) (seq s)) false))", "problem": 83, "user": "52bbd09ee4b07a9af57922ee"}, {"code": "(fn [& args] (boolean (and (some identity args) (not-every? identity args))))", "problem": 83, "user": "52c1f404e4b07a9af5792370"}, {"code": "(fn[& c] (if(some true? c) (if(every? true? c) false true) false))", "problem": 83, "user": "529952a4e4b02ebb4ef75081"}, {"code": "(fn [& truths]\n  (and (not-every? identity truths) \n       (if (nil? (some identity truths))\n         false\n         true)))", "problem": 83, "user": "52d340ebe4b099d49816f0c1"}, {"code": "(fn [& args] (if (or (every? true? args) (not-any? true? args)) false true))", "problem": 83, "user": "52ce8648e4b07d0d72b27390"}, {"code": "(fn [& bools] (< 1 (count (partition-by true? bools))))", "problem": 83, "user": "51b41150e4b0f094dd986fac"}, {"code": "(fn [& a]\n   ((fn r [b1 b2 l] \n      (if (empty? l) \n        (and b1 b2)\n        (r (or (not (first l)) b1) (or (first l) b2) (rest l)))) false false a))", "problem": 83, "user": "525cc137e4b0cb4875a45d46"}, {"code": "(fn [& bools] (and (not-every? true? bools) (not-every? false? bools)))", "problem": 83, "user": "4ed45563535d10e5ff6f52c9"}, {"code": "#(true? \n  (and\n    (some true? %&)\n    (some false? %&)))", "problem": 83, "user": "52d660eae4b09f7907dd1356"}, {"code": "(fn [& args] (let [x (distinct args)]\n                            (if(< (count x) 2)\n                              false\n                              true)))", "problem": 83, "user": "52d6664be4b09f7907dd1359"}, {"code": "#(true?\n  (and\n    (some true? %&)\n    (some false? %&)))", "problem": 83, "user": "52cdec6ce4b07d0d72b27383"}, {"code": "#(true?\n  (and \n   (some false? %&)\n   (some true? %&)))", "problem": 83, "user": "52cdec62e4b07d0d72b27382"}, {"code": "(fn [& bools]\n  (and \n    (not-every? true? bools)\n    (not-every? false? bools)))", "problem": 83, "user": "51a97f7ae4b08d8ec191b827"}, {"code": "(fn [& args] (= \n1\n(count (take 1 (filter true? args)))\n(count (take 1 (filter false? args)))\n))", "problem": 83, "user": "52d532a3e4b09f7907dd133e"}, {"code": "(fn [& xs] (boolean (and (some false? xs) (some true? xs))))", "problem": 83, "user": "4f8c6bf6e4b02e764a0a519b"}, {"code": "(fn [& args] (if (and (some true? args) (some false? args)) true false))", "problem": 83, "user": "52d3f666e4b09f7907dd1327"}, {"code": "#(and (not (= (repeat (count %&) true) %&)) (not (= (repeat (count %&) false) %&)))", "problem": 83, "user": "52b35a6ee4b0c58976d9ad07"}, {"code": "#(and (not= nil (some true? %&)) (not-every? true? %&))", "problem": 83, "user": "52d7f7efe4b09f7907dd1380"}, {"code": "#(and (not (= (some true? %&) nil)) (not (= (some false? %&) nil)))", "problem": 83, "user": "52d4acc8e4b09f7907dd1333"}, {"code": "not=", "problem": 83, "user": "52d10680e4b07d0d72b273c3"}, {"code": ";(fn [& s]\n;  (let [s (sort s)]\n;    (not= (first s) (last s))))\n\n(fn [& s]\n  (true? (and (some true? s) (some false? s))))", "problem": 83, "user": "52d469c8e4b09f7907dd1330"}, {"code": "(fn [& args] (let [trues (count (filter true? args)) total (count args)] (and (< trues total) (> trues 0))))", "problem": 83, "user": "5238ca2de4b0d705d026eef6"}, {"code": "(fn [& args] (= 2 (count (distinct args))))", "problem": 83, "user": "52cdb7efe4b07d0d72b2737c"}, {"code": "(fn [& c] (= 2 (count (distinct c))))", "problem": 83, "user": "52b453b0e4b0c58976d9ad21"}, {"code": "(fn [ & args]\n  (cond (every? true? args) false\n        (some true? args) true\n        :else false))", "problem": 83, "user": "52561be5e4b0541d1855ba08"}, {"code": "(fn [& s] (= 2 (count (set s))))", "problem": 83, "user": "526a3412e4b03e8d9a4a721e"}, {"code": "(fn f [& args]\n  (not (or (empty? (filter #(= % false) args)) (empty? (filter #(= % true) args)))))", "problem": 83, "user": "52d7b0ade4b09f7907dd137c"}, {"code": "#(boolean (re-matches #\"false.*true.*|true.*false.*\" (apply str %&)))", "problem": 83, "user": "50d8de3fe4b01f0871336e72"}, {"code": "(fn \n  [& bools]\n  (if (and\n       (not (= (set bools) #{true}))\n       (some #{true} bools))\n    true\n    false\n    ))", "problem": 83, "user": "5195b8cce4b04c0af7ff3c08"}, {"code": "(let [a (fn a [l] (if (= (count l) 0) true (and (first l) (a (rest l)))))\n      o (fn a [l] (if (= (count l) 0) false (or (first l) (a (rest l)))))\n      ]\n  (fn [& l] (and (o l) (not (a l)))))", "problem": 83, "user": "52d92f13e4b09f7907dd13a2"}, {"code": "(fn [& bools]\n  (let [trues (filter true? bools)]\n    (and (> (count trues) 0) (not (= (count trues) (count bools))))\n    )\n  )", "problem": 83, "user": "5204f2b1e4b0bf4f1882c7f5"}, {"code": "not=", "problem": 83, "user": "51e3a549e4b0c611d6113e47"}, {"code": "(fn [& bools] \n  (if \n    (= bools (filter true? bools)) \n    false \n    (reduce (fn[x y] (or x y)) bools)\n    )\n  )", "problem": 83, "user": "52ca720fe4b071a8d36bd3e2"}, {"code": "(fn [& args]\n    (cond\n     (every? true? args) false\n     (some true? args) true\n     :else false\n     ))", "problem": 83, "user": "52a7634ae4b0c58976d9ac16"}, {"code": "(fn [& s] (let [ss (set s)] (if (nil? (second ss)) false (or (first ss) (second ss)))) )\n;not=", "problem": 83, "user": "52df232fe4b09f7907dd13fc"}, {"code": "(fn [& bools]\n  (let [v (set bools)]\n    (if (= 2 (count v)) true false)))", "problem": 83, "user": "5271605ae4b03e8d9a4a73ed"}, {"code": "#(> (count %&) (count (filter true? %&)) 0)", "problem": 83, "user": "52e48632e4b09f7907dd1450"}, {"code": "(fn [& x] (and (reduce #(or % %2) x) (not (every? true? x))) )", "problem": 83, "user": "5224cf82e4b01819a2de42ef"}, {"code": "(fn [& x]\n  (if (and (some true? x) (not-every? true? x))\n    true\n    false\n    ))", "problem": 83, "user": "52c8a8b9e4b0c2d177d62139"}, {"code": "(fn chk-switch\n  [& ls]\n  (loop [[h & t :as xs] ls\n         last nil\n         ret false]\n    (println h t last ret)\n    (cond\n      (empty? xs) ret\n      (or (nil? last) (= h last)) (recur t h false)\n      :else (recur t h true))))", "problem": 83, "user": "52dd6cc8e4b09f7907dd13e2"}, {"code": "(fn [& args] (boolean (and (some true? args) (not-every? true? args))))", "problem": 83, "user": "52c1ede2e4b07a9af579236d"}, {"code": "(fn [& args]\n  (true? (and (some true? args) (some false? args))))", "problem": 83, "user": "52bac667e4b07a9af57922d5"}, {"code": "(fn [& coll]\n  (and (= (reduce #(or %1 %2) coll) true)\n       (= (reduce #(and %1 %2) coll) false)))", "problem": 83, "user": "52dad8bde4b09f7907dd13be"}, {"code": "#(and (true? (some true? %&)) (true? (some false? %&)))", "problem": 83, "user": "51f2a491e4b0210f90e74553"}, {"code": "(fn [& x]\n   (if (= (count x) 1)\n     (if (true? (first x)) false true)\n     (let [xx (sort (into [] x))]\n       (if (and (first xx) (last xx)) false\n         (or (first xx) (last xx))\n         )\n       )\n     ))", "problem": 83, "user": "517e12e3e4b0fcc7c5d37d3c"}, {"code": "(fn [& bools]\n  (if (and (some true? bools) (not-every? true? bools))\n    true\n    false))", "problem": 83, "user": "52e82e49e4b09f7907dd1497"}, {"code": "#(boolean(and (some true? %&) (not-every? true? %&)))", "problem": 83, "user": "52d809bde4b09f7907dd1384"}, {"code": "(fn [& bools] (and (not (nil? (some false? bools))) (not (nil? (some true? bools)))))", "problem": 83, "user": "52a23af1e4b04e0c58e87beb"}, {"code": "not=", "problem": 83, "user": "52e3912ee4b09f7907dd1446"}, {"code": "not=", "problem": 83, "user": "52d02380e4b07d0d72b273b7"}, {"code": "(fn [& args]\n   (not\n     (or\n       (empty? (filter #(= true %) args))\n       (empty? (filter #(= false %) args)))))", "problem": 83, "user": "52e0e646e4b09f7907dd1416"}, {"code": "(fn [& args] (and (contains? (zipmap (flatten (vector args)) (repeat 0)) true) \n                    (contains? (zipmap (flatten(vector args)) (repeat 0)) false)))", "problem": 83, "user": "52e54040e4b09f7907dd145c"}, {"code": "(fn t [& args] \n  (not \n   (or \n    (= (count (filter identity args)) 0) \n    (= (count (filter identity args)) (count args)))))", "problem": 83, "user": "52aa16d1e4b0c58976d9ac5a"}, {"code": "(fn test [& bools]\n (and (not-every? false? bools) (not-every? true? bools))\n  )", "problem": 83, "user": "52d8eb78e4b09f7907dd139d"}, {"code": "(fn [& args] (= 2 (count (distinct args))))", "problem": 83, "user": "52d83c2ce4b09f7907dd138d"}, {"code": "#(every? true? [(some true? %&) (not-every? true? %&)])", "problem": 83, "user": "52dc2bc8e4b09f7907dd13ca"}, {"code": "(fn [& x] (and (not (reduce #(and % %2) x)) (reduce #(or % %2) x)))", "problem": 83, "user": "52c7f036e4b0c2d177d62126"}, {"code": "(fn [& x] (and (not (every? true? x)) (not (every? false? x))))", "problem": 83, "user": "52d49445e4b09f7907dd1332"}, {"code": "(fn [& s] (and (not-every? true? s) (true? (some true? s))))", "problem": 83, "user": "52e75667e4b09f7907dd1485"}, {"code": "(fn ([& values] (and (not-every? false? values) (not-every? true? values))))", "problem": 83, "user": "52bf0116e4b07a9af5792328"}, {"code": "(fn [& bools]\n  (and\n   \t(not-every? false? bools)\n    (not-every? true? bools)\n  ))", "problem": 83, "user": "52c884a2e4b0c2d177d62136"}, {"code": "not=", "problem": 83, "user": "52e59ca5e4b09f7907dd1464"}, {"code": "(fn [& args]\n   (let [s (set args)]\n      (if (= 1 (count s)) false true)))", "problem": 83, "user": "4fb99483e4b081705acca2da"}, {"code": "(fn [& args]\n  (cond\n   (every? true? args) false\n   (every? false? args) false\n   :else true))", "problem": 83, "user": "52e276d9e4b09f7907dd1436"}, {"code": "(fn[& b] (let [a (reduce + (map #(if % 1 0) b))] (and (> a 0) (< a (count b)))))", "problem": 83, "user": "52e68e61e4b09f7907dd1479"}, {"code": ";(fn [& b] (and (not-every? #(= true %) b) (not-every? #(= false %) b)))\nnot=", "problem": 83, "user": "52d00832e4b07d0d72b273b4"}, {"code": "(fn [& args]\n  (let [num-trues (count (filter true? args))]\n   (not (or (zero? num-trues) (= (count args) num-trues)))))", "problem": 83, "user": "52efd3d9e4b05e3f0be25ed4"}, {"code": "(fn [& xs]\n  (= (into #{} xs) #{true false}))", "problem": 83, "user": "51cf0993e4b0e42293a2256a"}, {"code": "(fn __ [& xs]\n  (not (or (every? identity xs)\n           (not-any? identity xs))))", "problem": 83, "user": "52f1b82ae4b05e3f0be25eee"}, {"code": "(fn [& args] (> (count(set args)) 1))", "problem": 83, "user": "52570aeae4b0541d1855ba42"}, {"code": "not=", "problem": 83, "user": "52aad30ce4b0c58976d9ac6d"}, {"code": "(fn some-true [& alist]\n  (= 2\n   (count (set (map #(if % true false) alist)))))", "problem": 83, "user": "52d6889ae4b09f7907dd1361"}, {"code": "(fn[ & b](not (or (not-any? true? b) (every? true? b))))", "problem": 83, "user": "52d66ca0e4b09f7907dd135c"}, {"code": "(fn [& args]  (and  (reduce (fn [p q] (or p q)) args) (not (reduce (fn [p q] (and p q)) args))))", "problem": 83, "user": "529dfc6de4b04e0c58e87b8a"}, {"code": "#(= (count (group-by identity %&)) 2)", "problem": 83, "user": "50e8cac5e4b0ebbe794eb7ef"}, {"code": "(fn [& coll] (not (not\n  (and (some #{true} coll)\n       (not (every? #{true} coll))))))", "problem": 83, "user": "529b5301e4b02ebb4ef7509f"}, {"code": "(fn [v & args]\n  (let [all_t? (reduce #(if (= %1 %2) true false) true args)  \n        some_t? (reduce #(cond (= true %1) true  (= true %2) true :else false) false args)]\n    (cond (and all_t? v) false\n      :else (or some_t? v))))", "problem": 83, "user": "4df9c598535d04ed9115e77a"}, {"code": "#(true? \n  (and\n    (some true? %&)\n    (some false? %&)))", "problem": 83, "user": "51ea4e35e4b0f1f103a0d148"}, {"code": "(fn [& bools] (if (every? true? bools)\n                false\n                (contains? (set (flatten bools)) true)))", "problem": 83, "user": "52d9aaa1e4b09f7907dd13ae"}, {"code": "#(true? (and (some true? %&) (some false? %&)))", "problem": 83, "user": "50f53694e4b057d4c52de881"}, {"code": "(fn [& xs] (true? (and (some identity xs) (not-every? identity xs))))", "problem": 83, "user": "52d7a930e4b09f7907dd1379"}, {"code": "(fn [& args]\n  (and (not-every? false? args)\n       (not-every? true? args)))", "problem": 83, "user": "51ab4082e4b04e3dc0c27b31"}, {"code": "(fn [& x] (and (or (true? (some true? x)) (false? (some true? x)))\n               (or (true? (some false? x)) (false? (some false? x)))))", "problem": 83, "user": "52a5a8ebe4b0c58976d9abed"}, {"code": "(fn [& l] (and (not-every? true? l) (or (some true? l) false)))", "problem": 83, "user": "52d1e364e4b0d9f9285948e7"}, {"code": "(fn [& bs]\n  (let [f (fn [ff] (ff identity bs))]\n    (boolean (and (f not-every?) (f some)))))", "problem": 83, "user": "52bdd135e4b07a9af579230a"}, {"code": "#(= (count (distinct %&)) 2)", "problem": 83, "user": "52bacfa8e4b07a9af57922d6"}, {"code": "(fn [& xs] (if (and (some true? xs) (some false? xs)) true false))", "problem": 83, "user": "4ef9c8f9535dced4c769f26b"}, {"code": "(fn [& xs] (if (some true? xs) (if (some false? xs) true false) false))", "problem": 83, "user": "51f2b8f1e4b0210f90e74556"}, {"code": "(fn f83 [& a]\n  (cond \n   (= '(true false) (distinct (flatten a))) true \n    (= '(false true) (distinct (flatten a))) true \n   :else false))", "problem": 83, "user": "52c08c59e4b07a9af5792351"}, {"code": "(fn [& coll] (if (and (some true? coll) (not-every? true? coll)) true false))", "problem": 83, "user": "522404d8e4b01819a2de42c0"}, {"code": "(fn [& a] (true? (and (some true? a)(some false? a))))", "problem": 83, "user": "52e3e6a8e4b09f7907dd1448"}, {"code": "(fn [& bools] (and (not-every? true? bools) (not-every? false? bools)))", "problem": 83, "user": "4feaa579e4b0140c20fb9c0b"}, {"code": "not=", "problem": 83, "user": "52f4fae4e4b05e3f0be25f27"}, {"code": "not=", "problem": 83, "user": "52d838bee4b09f7907dd138b"}, {"code": "not=", "problem": 83, "user": "52fd8de1e4b047fd5583702e"}, {"code": "not=", "problem": 83, "user": "52e32d55e4b09f7907dd143e"}, {"code": "(fn [& coll]\n  (if (and (some true? coll) (not-every? true? coll)) true false))", "problem": 83, "user": "52fb903ee4b047fd5583700b"}, {"code": "#(and (not= nil (some true? %&)) (not-every? true? %&))", "problem": 83, "user": "52f8f4d1e4b047fd55836fde"}, {"code": "(fn [& bs] (boolean (and (some true? bs) (some false? bs))))", "problem": 83, "user": "51a3b135e4b0e77c4ca60bf6"}, {"code": "(fn ! \n  ([x & xs] \n   (if (sequential? x)\n     (if (empty? x) \n       false\n       (let [t (first xs) \n             f (first x) \n             r (! (rest x) t)]\n         (if (= t 0) \n           (or (not f) r)\n           (or f r)\n           )))\n     (let [l (concat [x] xs)]\n       (and (! l 0) (! l 1))\n       ))))", "problem": 83, "user": "52faec2ee4b047fd55837004"}, {"code": "(fn [& more]\n  (if (and (some false? more) (some true? more))\n    true\n    false\n    ))", "problem": 83, "user": "52fcfeeee4b047fd55837027"}, {"code": "(fn [& arg] (and (not (reduce #(and %1 %2) arg)) (reduce #(or %1 %2) arg)))", "problem": 83, "user": "52f9ce6de4b047fd55836ff0"}, {"code": "not=", "problem": 83, "user": "529b44afe4b02ebb4ef7509d"}, {"code": "(fn [& l] \n  (if  (nil? (and (some #(= % true) l) (some #(= % false) l))) \n    false \n    true))", "problem": 83, "user": "5300aa1de4b0d8b024fd3710"}, {"code": "(fn half-truth\n  [& args]\n  (if (and (not (every? true? args)) (some true? args)) true false))", "problem": 83, "user": "5300b750e4b0d8b024fd3711"}, {"code": "(fn [& x] (and (not (every? true? x)) (not (not-any? true? x))))", "problem": 83, "user": "52f5f8b4e4b09b582c12c9cc"}, {"code": "(fn\n  [& args]\n  (= true (and \n           (some true? args)\n           (some false? args))))", "problem": 83, "user": "52eb400ee4b0705949c4443b"}, {"code": "(fn [& b] (let [f (frequencies b)] (and (not (nil? (f true))) (not (nil? (f false))))))", "problem": 83, "user": "5300f68de4b0d8b024fd3714"}, {"code": "(fn [& z]\n  (cond\n   (= (count z) 1) (not (first z))\n  :else (if-let [x (reduce #(and %1 %2) z)]\n          (not x)\n          (reduce #(or %1 %2) z))))", "problem": 83, "user": "51b89503e4b050a1176cd69a"}, {"code": "(fn [& x]\n  (not (or (every? true? x)\n      (every? false? x))))", "problem": 83, "user": "52fa4f48e4b047fd55836ff7"}, {"code": "not=", "problem": 83, "user": "5302b580e4b0d8b024fd3732"}, {"code": "(fn [& x] (true? (and (not-every? true? x) (some true? x))))", "problem": 83, "user": "52c60945e4b0c2d177d62108"}, {"code": "(fn [& xs] (and (boolean(some identity xs))(not-every? identity xs)))", "problem": 83, "user": "4faf897be4b081705acca257"}, {"code": "not=", "problem": 83, "user": "512587ade4b05d10e3e395fb"}, {"code": "(fn[& args] (and (not (nil? (some true? args))) (not-every? true? args)))", "problem": 83, "user": "5301157ae4b0d8b024fd3717"}, {"code": "(fn [& bools] (and (true? (some true? bools)) (not (every? true? bools))))", "problem": 83, "user": "52f10094e4b05e3f0be25ee8"}, {"code": "(fn [& v] (= #{true false} (set v)))", "problem": 83, "user": "52f818a6e4b047fd55836fcc"}, {"code": "(fn [& args] (and (not-every? false? args) (not-every? true? args)))", "problem": 83, "user": "52ffb7f2e4b0d8b024fd370b"}, {"code": "(fn [& s] (boolean (and (some true? s) (some false? s))))", "problem": 83, "user": "53070615e4b02e821686979e"}, {"code": "(fn[& xs](let[ A\n                        (reduce +\n                          (for[x xs]\n                            (if(= x true) 1 0))),\n                       B (reduce +\n                          (for[x xs] 1)),\n                       C (/ A B)]\n                   (if(or (= C 0) (= C 1) ) false true)\n                  ) )", "problem": 83, "user": "5302d79ce4b0d8b024fd3736"}, {"code": ";;contains? ==> search by key \n;;some ==> search by value\n(fn half-true [& coll] (= true (and (some true? coll)(some false? coll))))", "problem": 83, "user": "5307e4ece4b02e82168697a9"}, {"code": "(fn check [& args]\n  (boolean (and (some true? args)\n                (some false? args))))", "problem": 83, "user": "530578ede4b0d8b024fd3760"}, {"code": "(fn [& rest] (= 2 (count (distinct rest))))", "problem": 83, "user": "5176afd2e4b085adf681d889"}, {"code": "(fn sbna [ & se] (and (not-every? true? se) (not-every? false? se)))", "problem": 83, "user": "5226f9b8e4b04e78ff2e199b"}, {"code": "(fn [& s]\n  (let [n (count s)\n        c (count (filter (fn [x] x) s))]\n    (if (= n c)\n      false\n      (if (= 0 c)\n        false\n         true))))", "problem": 83, "user": "530d85dee4b08068f379eca8"}, {"code": "(fn [& lst] (cond (every? true? lst) false\n\t\t       (some true? lst) true\n\t\t       :else false))", "problem": 83, "user": "52fe3a9de4b047fd55837039"}, {"code": "(fn [& more]\n  (not (apply = more)))", "problem": 83, "user": "51e7abeae4b0a3e081b8cbee"}, {"code": "(fn [& args]\n    (and (boolean (some true? args)) (not (every? true? args))) \n  )", "problem": 83, "user": "52430d3ce4b076204b44faa5"}, {"code": "(fn [& coll]\n  (true? (and (some not coll)\n              (some true? coll))))", "problem": 83, "user": "530caf86e4b02e82168697df"}, {"code": "(fn [& args]\n  (cond\n   (every? true? args) false\n   (some true? args) true\n   :else false))", "problem": 83, "user": "5138ccc7e4b0a5db03d727d9"}, {"code": "#(and (not (nil? (some true? (conj %& %)))) (not (nil? (some false? (conj %& %)))))", "problem": 83, "user": "50b79c5fe4b0cf3e51c3046c"}, {"code": "not=", "problem": 83, "user": "4e6961f0535d8ccf87e9fe9b"}, {"code": "(fn [& b] (and (reduce #(or % %2) b) (not (reduce #(and % %2) b))))", "problem": 83, "user": "5301a13ae4b0d8b024fd371e"}, {"code": "(fn [& x] (and (not= (some true? x) nil) (not-every? true? x)))", "problem": 83, "user": "53034738e4b0d8b024fd373e"}, {"code": "#(= (->> %& (into #{})) #{true false})", "problem": 83, "user": "530e9729e4b08068f379ecbc"}, {"code": "(fn [& args]\n    (> (count (set args)) 1))", "problem": 83, "user": "52d2f457e4b099d49816f0ba"}, {"code": "(fn\n  ([x] (if (true? x) false x))\n  ([x y & more]\n   (let [booleans (conj more x y)]\n     (cond\n      (empty? (filter true? booleans)) false\n      (every? true? booleans) false\n      :else true))))", "problem": 83, "user": "5300158ae4b0d8b024fd370f"}, {"code": "(fn [& x]\n  (let [num (count (filter true? x))]\n    (cond\n    \t(zero? num) false\n     \t(= num (count x)) false\n     \t:else true\n     )\n   )\n)", "problem": 83, "user": "53153466e4b08068f379ed23"}, {"code": "(fn [& args] (let [truths (count (keep #(if (true? %) %) args))] (and (> truths 0) (not (= (count args) truths)))))", "problem": 83, "user": "5314318ee4b08068f379ed13"}, {"code": "(fn half-truth [& args]\n      (if (every? true? args)\n        false\n        (if (some true? args)\n          true\n          false)))", "problem": 83, "user": "52e17e66e4b09f7907dd1423"}, {"code": "#(= 2 (count (set %&)))", "problem": 83, "user": "511b900ae4b00c2a1fa7ff6a"}, {"code": "(fn [& xs] (if (every? identity xs) false (if (some identity xs) true false)))", "problem": 83, "user": "52f89125e4b047fd55836fd4"}, {"code": "(fn [& c] (and (not-every? true? c) (true? (some true? c))))", "problem": 83, "user": "52fc34cee4b047fd55837015"}, {"code": "(fn\n  [& args]\n  (let [c (count args)\n        su (reduce + (for [a args]\n                       (if (= a true) 1 0)))]\n    (if (and (>= su 1) (< su c)) true false)))", "problem": 83, "user": "52f3af46e4b05e3f0be25f14"}, {"code": "(fn [& args]\n  (boolean (some #(not= % (first args))(rest args))))", "problem": 83, "user": "52bc6cb2e4b07a9af57922f5"}, {"code": "(fn [& rest] (and (boolean (some true? rest)) (not (every? true? rest))))", "problem": 83, "user": "52b94e26e4b07a9af57922b9"}, {"code": "#(not (nil? (and (seq (drop-while true? %&))(seq (drop-while false? %&)))))", "problem": 83, "user": "530cb5b8e4b02e82168697e0"}, {"code": "(fn [& args] (not (nil? (and (some identity args) (some not args)))))", "problem": 83, "user": "5315a4f0e4b08068f379ed2e"}, {"code": "(fn [& x] (and (reduce #(or %1 %2) false x) (not (reduce #(and %1 %2) true x))))", "problem": 83, "user": "531488f3e4b08068f379ed16"}, {"code": "not=", "problem": 83, "user": "52be0263e4b07a9af579230e"}, {"code": "(fn [& args]\n  (boolean (and (some true? args)\n                (some #(not (true? %)) args))))", "problem": 83, "user": "5310e7aee4b08068f379ecdc"}, {"code": "(fn [& p]\n  (and\n    (not (not-any? true? (vec p)))\n    (not-every? true? (vec p))))", "problem": 83, "user": "52c672e2e4b0c2d177d6210e"}, {"code": "#(if (and (some true? %&)\n          (some false? %&)) true false)", "problem": 83, "user": "4ff4bed0e4b0678c553fc35f"}, {"code": "(fn [& a] (= #{true false} (set a)))", "problem": 83, "user": "4f320253e4b0d6649770a08d"}, {"code": "(fn [& items]\n  (if (and (some true? items) (some false? items))\n    true\n    false))", "problem": 83, "user": "52af7a5ce4b0c58976d9acbd"}, {"code": "(fn [& vals]\n  (true? (and (some true? vals) (some false? vals))))", "problem": 83, "user": "531ba143e4b08068f379ed91"}, {"code": "(fn [& x]\n  (let [l (set (distinct x))]\n    (and \n      (contains? l false)\n      (contains? l true)\n    )\n  )\n)", "problem": 83, "user": "52fba50ce4b047fd5583700d"}, {"code": "(fn [& args]\n   (let [truths (reduce + (map #(if % 1 0) args))]\n     (if (zero? truths)\n       false\n       (not= (count args)\n             truths))))", "problem": 83, "user": "531c7f0de4b08068f379eda4"}, {"code": "#(boolean (and (some #{true} %&) (not (every? #{true} %&))))", "problem": 83, "user": "52dd4fb4e4b09f7907dd13df"}, {"code": "(fn [& pred] (and (not (not-any? true? pred)) (not-every? true? pred)))", "problem": 83, "user": "531c0619e4b08068f379ed98"}, {"code": "(fn [x & xs]\n  (let [xarr (concat [x] xs)]\n    (println xarr)\n    (and (not= nil (some #{true} xarr)) (not (every? #{true} xarr)))))", "problem": 83, "user": "4ff505c8e4b0678c553fc364"}, {"code": "(fn [& args] (if (= 1 (count (partition-by #(= % false) args))) false true))", "problem": 83, "user": "52265e41e4b04e78ff2e1981"}, {"code": "(fn [& a]\n  (= true (and (some true? a) (some false? a))))", "problem": 83, "user": "531f1e63e4b08068f379edc2"}, {"code": "(fn [& x]\n  (and (not (reduce #(and %1 %2) x)) (reduce #(or %1 %2) x)))", "problem": 83, "user": "531c57ace4b08068f379ed9b"}, {"code": "(fn [& args] (let [b (distinct args)] (if (= (count b) 2) true  false) ))", "problem": 83, "user": "531bfb69e4b08068f379ed97"}, {"code": "(fn [& args] (and (apply (some-fn true?) args) (apply (some-fn false?) args)))", "problem": 83, "user": "5323a414e4b09d4e7a9b54d1"}, {"code": "(fn [& a]\n  (if (every? true? a)\n    false\n    (if (some true? a) \n      true\n      false)))", "problem": 83, "user": "532418f3e4b09d4e7a9b54d8"}, {"code": "#(if (some true? %&)\n    (not-every? true? %&)\n    false)", "problem": 83, "user": "529223cbe4b0239c8a67af26"}, {"code": "not=", "problem": 83, "user": "531e5c81e4b08068f379edba"}, {"code": "(fn [& coll] (and (not-every? true? coll) (not-every? false? coll)))", "problem": 83, "user": "532347dde4b09d4e7a9b54cc"}, {"code": "(fn [& x] (if (some true? x) (if (every? true? x) false true) false))", "problem": 83, "user": "52c00e4fe4b07a9af5792342"}, {"code": "(fn some-but-not-all [& bools] (and (not-every? false? bools) (not-every? true? bools)))", "problem": 83, "user": "531dfaf5e4b08068f379edb3"}, {"code": "(fn [& xs]\n  (and (true? (some true? xs)) (not (every? true? xs))))", "problem": 83, "user": "5326c5f7e4b09d4e7a9b54f2"}, {"code": "(fn [& bools] (= true (and (some true? bools) (some false? bools))))", "problem": 83, "user": "5320bbcfe4b09d4e7a9b54a6"}, {"code": "(fn [& args]\n  (true? \n   (and\n    (some true? args)\n    (some false? args))))", "problem": 83, "user": "531b8c27e4b08068f379ed90"}, {"code": "(fn [& args] \n   (loop [l args a true o false] \n     (println l a o)\n     (if (empty? l) \n       (and (not a) o) \n       (let [v (first l)]\n         (recur (rest l) (and a v) (or o v))))))", "problem": 83, "user": "52c81954e4b0c2d177d6212e"}, {"code": "(fn [& xs] (and (not (reduce #(and %1 %2) xs)) (reduce #(or %1 %2) xs)))", "problem": 83, "user": "53244c9de4b09d4e7a9b54db"}, {"code": "(fn [& bools]\n  (let [expr (and (some true? bools) (some false? bools))]\n    (true? expr)))", "problem": 83, "user": "52474133e4b05ef8e38e635e"}, {"code": "(fn ht [& args] (if (= 1 (count (into #{} args) )) false true))", "problem": 83, "user": "51f81925e4b09be9c177e526"}, {"code": "(fn [& c]\n   (true? (and (some false? c) (some true? c))))", "problem": 83, "user": "53224d45e4b09d4e7a9b54c0"}, {"code": "#(true?\n  (and\n    (some true? %&)\n    (some false? %&)))", "problem": 83, "user": "5302ac7fe4b0d8b024fd3731"}, {"code": "not=", "problem": 83, "user": "52ba447ee4b07a9af57922ce"}, {"code": "(fn [& args]\n  (true? (and (some true? args) (not-every? true? args))))", "problem": 83, "user": "5004034ce4b0678c553fc447"}, {"code": "#(= 2 (count (set %&)))", "problem": 83, "user": "532cb6bbe4b019098a6f8b33"}, {"code": "(fn [& xs] (not (every? #(= % (first xs)) xs)))", "problem": 83, "user": "531490bde4b08068f379ed17"}, {"code": "(fn halfTruth [& args]\n  (and (contains? (set args) true) (contains? (set args) false))\n  )", "problem": 83, "user": "52d42021e4b09f7907dd132a"}, {"code": "(fn [& xs]\n     (let [s (set xs)]\n       (and (contains? s false)\n            (contains? s true))))", "problem": 83, "user": "52bb4be0e4b07a9af57922e2"}, {"code": "(fn\n  [& x]\n  (let [total (- (count x) 1)\n        col   (vec x)]\n    (loop [n     0\n           tn    0]\n      (if (> n total)\n        (if (and (not= tn 0) (not= tn (+ total 1)))\n          true\n          false)\n        (recur (inc n) (if (= true (get col n))\n                         (inc tn)\n                         tn))))))", "problem": 83, "user": "531016d0e4b08068f379ecd1"}, {"code": "(fn onlysometrue [alltrue sometrue & bs]\n  (if (empty? bs)\n    (if alltrue false sometrue)\n    (recur \n     (and alltrue  (first bs))\n     (or  sometrue (first bs))\n     (rest bs)\n    )\n  )\n) true false", "problem": 83, "user": "531cd41ee4b08068f379eda9"}, {"code": "(fn [& col](and (< 1 (count (set col))) (contains? (set col) true)))", "problem": 83, "user": "5318f85ae4b08068f379ed76"}, {"code": "(fn [ & args]\n     (boolean (and (some true? args)\n            (not (every? true? args)))))", "problem": 83, "user": "51f5539fe4b0abb92f97f9cd"}, {"code": "#(and (contains? (set %&) false)\n      (contains? (set %&) true))", "problem": 83, "user": "53286389e4b09d4e7a9b5504"}, {"code": "(fn [& coll]\n  (if (every? true? coll)\n    false\n    (if ((set coll) true)\n     true\n     false\n     ))\n  )", "problem": 83, "user": "526698c9e4b03e8d9a4a7144"}, {"code": "(comp (partial = 2) count set list)", "problem": 83, "user": "531792d9e4b08068f379ed5e"}, {"code": "(fn foo [& coll]\n  (and\n   (not (= nil (some #{true} coll)))\n   (not (every? #{true} coll))))", "problem": 83, "user": "53322cece4b019098a6f8b73"}, {"code": "not=", "problem": 83, "user": "52facb9de4b047fd55837002"}, {"code": "(fn [& args]\n  (boolean (and (some true? args)\n   \t   \t\t\t(some false? args))))", "problem": 83, "user": "53300924e4b019098a6f8b55"}, {"code": "#(true?\n  (and\n  (some true? %&)\n  (some false? %&)))", "problem": 83, "user": "5103807fe4b00c483ae17703"}, {"code": "(fn [& more]\n  (true? (and (some true? more) (some false? more))))", "problem": 83, "user": "531d34cfe4b08068f379edac"}, {"code": "#(true? (and (some true? %&) (some false? %&)))", "problem": 83, "user": "52baefbae4b07a9af57922da"}, {"code": "(fn [& bool-values]\n  (boolean (and (some identity bool-values) (not (every? identity bool-values)))))", "problem": 83, "user": "532686e6e4b09d4e7a9b54ef"}, {"code": "(fn [& f] \n  (let [c (count (filter identity f))]\n    (and (> c 0) (< c (count f)))))", "problem": 83, "user": "532b43c3e4b09d4e7a9b5531"}, {"code": "(fn [& b] (and (not-every? true? b)\n               (not-every? false? b)))", "problem": 83, "user": "533056a4e4b019098a6f8b5b"}, {"code": "(fn [& xs] \n  (if (some true? xs)\n    (not-every? true? xs)\n    false))", "problem": 83, "user": "52d2ca1ce4b099d49816f0b4"}, {"code": "(fn f [& x]  (and \n                (not (every? true? x))\n                (not (every? false? x))))", "problem": 83, "user": "5334d4f2e4b0656e627bfd71"}, {"code": "#(and (boolean (some true? %&)) (not (every? true? %&)))", "problem": 83, "user": "506d5e4ce4b0a302964c5493"}, {"code": "(fn [& args] (and (if (= nil (some true? args)) false true)\n      (if (= nil (some false? args)) false true))\n  )", "problem": 83, "user": "531f0a26e4b08068f379edbf"}, {"code": "(fn [& args] (if (every? true? args)  false\n             (if (some true? args) true false)))", "problem": 83, "user": "53219cece4b09d4e7a9b54b7"}, {"code": "(fn [& args] (= (count (keys (group-by boolean args))) 2))", "problem": 83, "user": "4eadc217535d7eef30807321"}, {"code": "#(not (not (next (set %&))))", "problem": 83, "user": "5336a339e4b0e30313ee6c7d"}, {"code": "(fn [& x] (and (not (reduce (fn [a b] (and a b)) x)) (reduce (fn [a b] (or a b)) x)))", "problem": 83, "user": "53388e2de4b0e30313ee6c9c"}, {"code": "(fn [& args] (boolean (and (some true? args) (some false? args))))", "problem": 83, "user": "533ab9abe4b0e30313ee6cbf"}, {"code": "#(= #{true false} (set %&))", "problem": 83, "user": "5281a445e4b0757a1b17143a"}, {"code": "(fn [& s](< 0\n  (count (filter true? s))\n  (count s)))", "problem": 83, "user": "50e5bca5e4b09ae9427b0e75"}, {"code": "(fn [& args] (and ((comp not nil? some) true? args) (not-every? true? args)))", "problem": 83, "user": "531619c1e4b08068f379ed3d"}, {"code": "(fn [& xs] (if (and (not-every? true? xs) \n                    (some true? xs))\n             true\n             false))", "problem": 83, "user": "523ea111e4b057c4b7cd0a65"}, {"code": "(fn [& ps]\n  (and (not-every? false? ps) (not-every? true? ps)))", "problem": 83, "user": "525ab6cfe4b0cb4875a45cf9"}, {"code": "(fn [& a] (and (reduce #(or %1 %2) false a) (not (reduce #(and %1 %2) true a))))", "problem": 83, "user": "51da631be4b02ceefd947766"}, {"code": "(fn [& preds] (and (not (every? #(and %) preds)) ((complement nil?) (some #(or %) preds))))", "problem": 83, "user": "5341b141e4b00652c8746ecf"}, {"code": "#(not (or (every? true? %&) (every? false? %&)))", "problem": 83, "user": "50d4593ee4b09cc622d65a68"}, {"code": "(fn [b & more]\n  (if (= 2 (count (conj (set more) b)))\n    true\n    false))", "problem": 83, "user": "509b1204e4b0412cdea6eb1d"}, {"code": "(fn [& xs]\n  (and (not (apply = xs))\n       (some identity xs)))", "problem": 83, "user": "52b65f26e4b0c58976d9ad43"}, {"code": "not=", "problem": 83, "user": "532ab0bde4b09d4e7a9b5527"}, {"code": "(fn [& xs]\n  (not (or (not-any? identity xs) (every? identity xs))))", "problem": 83, "user": "53468f6ce4b084c2834f4a3f"}, {"code": "(fn [first & more]\n  (let [args (cons first more)]\n    (and (not (not-any? true? args))\n         (not-every? true? args)\n         )\n    )\n  )", "problem": 83, "user": "5349a39de4b084c2834f4a65"}, {"code": "(fn [& l] (and (not (reduce (fn [a b] (and a b)) l)) (reduce (fn [a b] (or a b)) l) ))", "problem": 83, "user": "5349ac2be4b084c2834f4a67"}, {"code": "(fn [& bools]\n  (and (not (nil? (some identity bools)))\n       (not (reduce #(and %1 %2) true bools))))", "problem": 83, "user": "50fc299ee4b0d10d794c19f2"}, {"code": "(fn [ & x] \n  (and \n   (> (count (filter #(= true %) x)) 0) \n   (> (count (filter #(= false %) x)) 0)))", "problem": 83, "user": "4ddb696b535d02782fcbe9fa"}, {"code": "#(true? (and (some true? %&)\n             (some false? %&)))", "problem": 83, "user": "5346f409e4b084c2834f4a46"}, {"code": "not=", "problem": 83, "user": "53460d02e4b084c2834f4a39"}, {"code": "(fn [& args] (and \n              (not-every? true? args) \n              (not-every? false? args)\n              )\n  )", "problem": 83, "user": "53307da1e4b019098a6f8b5e"}, {"code": "(fn [& col]\n    (= (set col) (set [true false])))", "problem": 83, "user": "5322d370e4b09d4e7a9b54c7"}, {"code": "#(let [s ((complement nil?) (some true? %&))\n         a (every? true? %&)]\n    (cond\n      (true? a) false\n      (true? s) true\n      :else s))", "problem": 83, "user": "4e705861535d5021c1a89635"}, {"code": "not=", "problem": 83, "user": "526a7025e4b03e8d9a4a722a"}, {"code": "(fn [ & vals] (= #{ true false} ( set vals)))", "problem": 83, "user": "533ea7e8e4b085b17e897d94"}, {"code": "(fn [& vs] (not (or (nil? (some identity vs)) (every? identity vs))))", "problem": 83, "user": "5175533fe4b0dea9bbfba575"}, {"code": "#(= (set (map boolean %&)) #{true false})", "problem": 83, "user": "4fbfe9a4e4b081705acca31f"}, {"code": "(fn [& ps]\n  (and (apply (some-fn true?) ps) (apply (some-fn false?) ps)))", "problem": 83, "user": "5339c105e4b0e30313ee6cae"}, {"code": "(fn [& args] \n  (and (apply (some-fn true?) args)\n       (apply (some-fn false?) args)))", "problem": 83, "user": "51ab70c3e4b04e3dc0c27b33"}, {"code": "(fn [& rest]\n  (if (every? (fn [x] x) rest)\n    false\n    (if (some (fn [x] x) rest)\n      true\n      false)))", "problem": 83, "user": "53415755e4b00652c8746ecd"}, {"code": "(fn [& args]\n  (boolean (and \n            (some true? args)\n            (some false? args))))", "problem": 83, "user": "534f25f9e4b084c2834f4ac6"}, {"code": "#(= 2 (count (set %&)))", "problem": 83, "user": "53487737e4b084c2834f4a59"}, {"code": "not=", "problem": 83, "user": "53512bc6e4b084c2834f4ae1"}, {"code": "(fn [& l] (let [tcount (count (filter true? l)), size (count l)]\n          (cond\n           (= tcount 0) false\n           (= tcount size) false\n           :else true)))", "problem": 83, "user": "519e70d5e4b0acf32bc6a42c"}, {"code": "(fn [& a] (and (if (some true? a) true false) (not-every? true? a)))", "problem": 83, "user": "5353726be4b084c2834f4b00"}, {"code": "(fn [& args]\n  (if (every? true? args)\n    false\n    (not (nil? (some true? args)))))", "problem": 83, "user": "534941d1e4b084c2834f4a60"}, {"code": "(fn test-fun-1 [& xs] \n  (let [found-bools (into #{} xs)] \n    (and (contains? found-bools true) (contains? found-bools false))))", "problem": 83, "user": "533b1dc4e4b0e30313ee6cc7"}, {"code": "(fn [& args]\n  (if (every? true? args)\n    false\n    (reduce #(or %1 %2) false args)))", "problem": 83, "user": "5348cab4e4b084c2834f4a5e"}, {"code": "(comp not =)", "problem": 83, "user": "52ac2db3e4b0c58976d9ac82"}, {"code": "#(= 2 (count (distinct %&)))", "problem": 83, "user": "534efe66e4b084c2834f4ac1"}, {"code": "(fn [& xs]\n  (not (or (every? #(false? %) xs)\n            (every? #(true? %) xs))))", "problem": 83, "user": "534e4a29e4b084c2834f4ab0"}, {"code": "(fn [& coll]\n (cond\n   (every? false? coll) false\n   (every? true? coll) false\n   :else true))", "problem": 83, "user": "5250b7a5e4b0541d1855b83e"}, {"code": "#(and (not-every? identity %&) (not (nil? (some identity %&))))", "problem": 83, "user": "535526a2e4b04ce2eb3ed259"}, {"code": "(fn [& c] (and (apply not= c) (some true? c)))", "problem": 83, "user": "50f10f7be4b06d9538fe211a"}, {"code": "(fn [& m] (and ((comp not empty?) (filter identity m)) (not (every? identity m))))", "problem": 83, "user": "5357b241e4b04ce2eb3ed282"}, {"code": "#(let [v %&] (not (not (and (some identity v) (not (apply = v))))))", "problem": 83, "user": "5353afa0e4b084c2834f4b03"}, {"code": "not=", "problem": 83, "user": "53513d28e4b084c2834f4ae3"}, {"code": "(fn [& bools]\n  (and (boolean (some identity bools))\n       (not-every? identity bools)))", "problem": 83, "user": "5225271fe4b01819a2de42f9"}, {"code": "(fn [& args] (and (< 1 (count (distinct args))) (some true? args)))", "problem": 83, "user": "52046600e4b0c283853240c5"}, {"code": "(fn [& args] (boolean (and (some false? args) (some true? args))) )", "problem": 83, "user": "534d1173e4b084c2834f4a98"}, {"code": "(fn [& args]\n  (and (boolean (some true? args))\n       (not (every? true? args))))", "problem": 83, "user": "5344fe13e4b084c2834f4a32"}, {"code": "(fn [& args]\n   (and (not-every? true? args) (true? (some true? args))))", "problem": 83, "user": "530b8580e4b02e82168697cc"}, {"code": ";(fn [& xs] (boolean (and (some identity xs) (not (every? identity xs)))))\n(fn [& xs] (apply not= xs))", "problem": 83, "user": "5312cdaae4b08068f379ed03"}, {"code": "#(true? \n  (and\n    (some true? %&)\n    (some false? %&)))", "problem": 83, "user": "5356dcbee4b04ce2eb3ed270"}, {"code": "(fn [a & b] (= (count (set (cons a b))) 2))", "problem": 83, "user": "53500869e4b084c2834f4ad3"}, {"code": "(fn [& xs] (= #{true false} (set (keys (frequencies xs)))))", "problem": 83, "user": "534dd600e4b084c2834f4aaa"}, {"code": "(fn [& bools]\n   (and (reduce #(or % %2) bools) (not (reduce #(and % %2) bools))))", "problem": 83, "user": "52271a85e4b04e78ff2e19a7"}, {"code": "(fn [& more]\n  (if (and (some true? more) (some false? more))\n    true\n    false))", "problem": 83, "user": "535920b2e4b04ce2eb3ed294"}, {"code": "(fn [& a] (and (not-every? true? a) (not-every? false? a)))", "problem": 83, "user": "535d2533e4b04ce2eb3ed2bc"}, {"code": "(fn [& a]\n  (true? (and (some true? a)\n              (some false? a))))", "problem": 83, "user": "535d910ae4b04ce2eb3ed2c5"}, {"code": "(fn [& params] (if (reduce #(or %1 %2) params) (not (reduce #(and %1 %2) params)) false))", "problem": 83, "user": "53480973e4b084c2834f4a52"}, {"code": "(fn [& prms] (= 2 (count (set prms))))", "problem": 83, "user": "535a18e3e4b04ce2eb3ed2a4"}, {"code": "(fn [& rest]\n    (if (and (some true? rest)\n          (some false? rest)) true false ))", "problem": 83, "user": "53489329e4b084c2834f4a5b"}, {"code": "#(apply not= (distinct %&))", "problem": 83, "user": "52761edae4b03e8d9a4a74d4"}, {"code": "#(and (not (nil? (some true? %&))) (not-every? true? %&))", "problem": 83, "user": "534bd9c1e4b084c2834f4a80"}, {"code": "(fn [& a](or (and (some true? a) (some false? a) (not-every? false? a)) false))", "problem": 83, "user": "5005b57de4b0678c553fc46a"}, {"code": "#(not \n  (or (every? true? %&)\n      (every? false? %&)))", "problem": 83, "user": "53523ae0e4b084c2834f4aee"}, {"code": "not=", "problem": 83, "user": "5365e90ee4b0243289761e71"}, {"code": "(fn [& args]\n   (not (or (every? true? args) (every? false? args))))", "problem": 83, "user": "53528cd3e4b084c2834f4af2"}, {"code": "(fn [& bools]\n   (= true (and (some identity bools) (not (every? identity bools)))))", "problem": 83, "user": "536102efe4b0243289761e3e"}, {"code": "(fn [& args] (and (not (reduce #(and % %2) args)) (reduce #(or % %2) args)))", "problem": 83, "user": "53638ed2e4b0243289761e5b"}, {"code": "#(and (true? (some identity %&)) (not-every? identity %&))", "problem": 83, "user": "532ecd44e4b019098a6f8b49"}, {"code": "not=", "problem": 83, "user": "53664e3be4b0243289761e74"}, {"code": "(fn [& args] \n   (and\n   (not (reduce #(and %1 %2) args))\n   (reduce #(or %1 %2) args)))", "problem": 83, "user": "4f031883535dcb61093f6a5e"}, {"code": "(fn [& bools]\n  (= true (and (some true? bools)\n               (some false? bools))))", "problem": 83, "user": "52fb64b7e4b047fd55837009"}, {"code": "(fn [& args]\n  (and ((complement not-any?) identity args)\n       ((complement every?) identity args)))", "problem": 83, "user": "5338387de4b0e30313ee6c91"}, {"code": "(fn [& xs] (if (first xs) (not (reduce #(and % %2) xs)) (reduce #(or % %2) xs)))", "problem": 83, "user": "52bf6946e4b07a9af5792334"}, {"code": "#(-> %& set count (= 2))", "problem": 83, "user": "535d4b0ae4b04ce2eb3ed2be"}, {"code": "(fn [& args]\n        (and\n         (> (count (filter (fn [x] (true? x)) args)) 0)\n         (> (count (filter (fn [x] (false? x)) args)) 0)\n         ))", "problem": 83, "user": "535eaa73e4b04ce2eb3ed2d4"}, {"code": "(fn [& bools]\n  (boolean (and (not (every? identity bools))\n                (some identity bools))))", "problem": 83, "user": "5338e33fe4b0e30313ee6ca1"}, {"code": "(fn[& n] \n   (and (reduce #(or % %2) n)\n        (not(reduce #(and % %2) n))))", "problem": 83, "user": "52c42bc2e4b0c2d177d620d0"}, {"code": "(fn\n  [& r]\n    (= (count (reduce conj #{} r)) 2))", "problem": 83, "user": "536aa86de4b0243289761eb1"}, {"code": "not=", "problem": 83, "user": "4e36e647535deb9a81d77f36"}, {"code": "(fn half-truth\n    [& bools]\n    (true? (and (not (every? identity bools)) (some identity bools))))", "problem": 83, "user": "511720eae4b0063b4e3e16da"}, {"code": "(fn [b & args]\n      (let [ins (conj args b) outs (filter true? ins)]\n        (if (= (count ins) (count outs))\n          false\n          (if (= (count outs) 0)\n            false\n            true\n            )\n          )\n        )\n      )", "problem": 83, "user": "536827f1e4b0243289761e8a"}, {"code": "(fn [& args]\n  (and ((complement nil?) (some true? args)) (not (every? true? args))))", "problem": 83, "user": "536d83cee4b0fc7073fd6e5e"}, {"code": "(fn [& x] (boolean (and (some identity x) (not (every? identity x)))))", "problem": 83, "user": "4eed26af535d93acb0a668bb"}, {"code": "(fn [& f]\n  (if (and (some false? f) (some true? f))\n    true\n    false)\n  )", "problem": 83, "user": "5369a4b1e4b0243289761e9f"}, {"code": "(fn [& args]\n           (and (apply not= true args)\n                (not (nil? (some true? args)))))", "problem": 83, "user": "4edb314d535d10e5ff6f5317"}, {"code": "(fn [& bs]\n  (and (reduce #(or %1 %2) bs) (not (reduce #(and %1 %2) bs))))", "problem": 83, "user": "536ca4bde4b0fc7073fd6e49"}, {"code": "#(true? (and (some true? %&) (some false? %&)))", "problem": 83, "user": "536ecd9fe4b0fc7073fd6e76"}, {"code": "(fn [& args]\n  (if (every? identity args)\n    false\n    (true? (some identity args))))", "problem": 83, "user": "5361a4f2e4b0243289761e47"}, {"code": "(fn [& x]\n  (if (and (not-empty (filter true? x)) (not-empty (filter false? x))) true false))", "problem": 83, "user": "536f5900e4b0fc7073fd6e7b"}, {"code": "#(not (or (every? true? %&) (every? false? %&)))", "problem": 83, "user": "534d639ae4b084c2834f4a9e"}, {"code": "#(not (apply = %&))", "problem": 83, "user": "536e0930e4b0fc7073fd6e66"}, {"code": "(fn [& args]\n  (= 2 (count (distinct args))))", "problem": 83, "user": "5228b015e4b0186687e23a8a"}, {"code": "#(boolean (and (some true? %&) (some false? %&)))", "problem": 83, "user": "524b0645e4b09eba1c0223bf"}, {"code": "(fn [& args] (boolean (and (some true? args) (some false? args))))", "problem": 83, "user": "534f13b2e4b084c2834f4ac4"}, {"code": "#(and (not (empty? (filter true? %&)))\n      (not (empty? (filter false? %&))))", "problem": 83, "user": "4fe9ea87e4b0547ebccb2476"}, {"code": "(fn partialtrue [& x]\n           (let [y (vec x)]\n             (loop [result y, counterf 0, countert 0]\n               (if (not (empty? result))\n                 (if (and (pos? counterf) (pos? countert))\n                   true\n                   (if (false? (peek result))\n                     (recur (pop result) (inc counterf) countert)\n                     (recur (pop result) counterf (inc countert))))\n                 (and (pos? counterf) (pos? countert))))))", "problem": 83, "user": "532727bae4b09d4e7a9b54fa"}, {"code": "(fn [& r] (let [[a b] (reduce (fn [[tr fl] b] [(or tr b) (or fl (not b))]) [false false] r)] (and a b)))", "problem": 83, "user": "53629381e4b0243289761e54"}, {"code": "#(and (not-every? (partial = false) %&) (not-every? (partial = true) %&) )", "problem": 83, "user": "53691dc7e4b0243289761e97"}, {"code": "(fn [& args] (and (if (some identity args) true false) (if (every? identity args) false true)))", "problem": 83, "user": "4f9b3532e4b0dcca54ed6d13"}, {"code": "not=", "problem": 83, "user": "53705e2de4b0fc7073fd6e96"}, {"code": "(fn [& r] (not (or (every? not r)(every? identity r))))", "problem": 83, "user": "536f2faee4b0fc7073fd6e79"}, {"code": "(fn [& x]\n  (if (and (some false? x) (some true? x)) true false))", "problem": 83, "user": "532c9dc9e4b019098a6f8b30"}, {"code": "(fn half-truth [& bool]\n  (if (every? true? bool) ;if all of the arguments are true\n    false ;return false\n    (if (every? false? bool) ;if all of the arguments are false\n      false ;return false\n      true))) ;otherwise, return true", "problem": 83, "user": "53713ebee4b0fc7073fd6ead"}, {"code": "(fn [& args] (if (some true? args)\n               (or (some false? args) false)\n               false))", "problem": 83, "user": "53756f8be4b06839e8705e14"}, {"code": "#(and (not (nil? (some false? %&))) (not (nil? (some true? %&))))", "problem": 83, "user": "4ec53f8c535d6d7199dd368b"}, {"code": "not=", "problem": 83, "user": "535056a7e4b084c2834f4adb"}, {"code": "(fn [& coll] (= 2 (count (into #{} coll))))", "problem": 83, "user": "536c7470e4b0fc7073fd6e3e"}, {"code": "(fn [& args]\n  (if (and (some true? args)\n           (not (every? true? args)))true false))", "problem": 83, "user": "5349da55e4b084c2834f4a68"}, {"code": "(fn [& args] (let [coll (into #{} args)] (and (contains? coll true) (contains? coll false))))", "problem": 83, "user": "534c1c64e4b084c2834f4a8a"}, {"code": "#(true? (and (some identity %&) (some (complement identity) %&)))", "problem": 83, "user": "53712c03e4b0fc7073fd6ea9"}, {"code": "(fn r [& args]\n  (and (reduce #(or %1 %2) args) (not (reduce #(and %1 %2) args))))", "problem": 83, "user": "5143824ae4b0b4fb4ace5f36"}, {"code": "(fn [& col] (and (boolean (some true? col)) (not-every? true? col)))", "problem": 83, "user": "518279abe4b0353c468deb65"}, {"code": "(fn [& s] (if (and (some true? s) (not (every? true? s))) true false))", "problem": 83, "user": "53736ffce4b06d7f452d9e11"}, {"code": "(fn [& x]\n  (if (and (not-every? true? x) (some true? x))\n    true\n    false))", "problem": 83, "user": "5371167fe4b0fc7073fd6ea7"}, {"code": "(fn htru [& args] (if (or (every? true? args) (every? false? args)) false true))", "problem": 83, "user": "4eeb8f68535d93acb0a668a9"}, {"code": "(fn only-partly-true [& bools]\n  (and (contains? (set bools) true)\n       (contains? (set bools) false)))\n\n;; if the any? function existed, this is what I would do:\n;;(fn only-partly-true [& bools]\n;;  (and (any? true? bools))\n;;       (any? false? bools))))", "problem": 83, "user": "53713ed9e4b0fc7073fd6eaf"}, {"code": "(fn [& args] (= (count (distinct args)) 2))", "problem": 83, "user": "5370ef22e4b0fc7073fd6ea0"}, {"code": "; Either of these will work:\n; (fn [& more] (if (and (some true? more) (not-every? true? more)) true false))\n; (fn [& more] (and (not (every? true? more)) (not (not-any? true? more))))\n; jmacias had this clever solution:\nnot=", "problem": 83, "user": "536b9d8ae4b0243289761ebe"}, {"code": "(fn [& x]\n  (if\n    (and \n    (some #(= true %) x)\n    (some #(= false %) x))\n    true false))", "problem": 83, "user": "531bad96e4b08068f379ed93"}, {"code": "(fn [& xs]\n  (let [c (reduce #(if %2 (inc %1) (dec %1)) 0 xs)]\n    (and (> c (- (count xs))) (< c (count xs)))))", "problem": 83, "user": "5370f8ede4b0fc7073fd6ea2"}, {"code": "(fn [& bools]\n  (boolean (and\n    (some true? bools)\n    (not (every? true? bools)))))", "problem": 83, "user": "53779a26e4b06839e8705e38"}, {"code": "#(let [a (group-by identity %&)]\n   (boolean (and (a true) (a false))))", "problem": 83, "user": "512700c4e4b083bb8f88cf14"}, {"code": "(fn jtruth\n  [& lst]\n  (let [x (into #{} lst)]\n    (and (contains? x true) (contains? x false))))", "problem": 83, "user": "534ff8a6e4b084c2834f4ad1"}, {"code": "not=", "problem": 83, "user": "536673a8e4b0243289761e76"}, {"code": "(fn [& args] (if (every? true? args) false (not-every? false? args)))", "problem": 83, "user": "507330e6e4b0e3170b5a8698"}, {"code": "#(= 2 (count (set %&) ) )", "problem": 83, "user": "4f0d6686535d0136e6c22318"}, {"code": "(fn [& args] (boolean (and (some true? args) (some false? args))))", "problem": 83, "user": "51583ee4e4b0a069fd272c72"}, {"code": "(fn [& b] (if (and (some true? b) (not-every? true? b))\n   true false))", "problem": 83, "user": "4f92de49e4b0dcca54ed6cb2"}, {"code": "(fn [& xs]\n  (cond (every? true? xs) false\n        (some true? xs) true\n        :default false))", "problem": 83, "user": "4f849f76e4b033992c121c36"}, {"code": "(fn[& lst]\n\t(letfn[(f[s]\n\t(if (true? (every? #' true? s)) false\n\t  (if (true? (every? #' false? s)) false\n\t      (if (true? (some #'true? s) ) true\n\t\t  false))))]\n\t  (f lst)))", "problem": 83, "user": "4e8849c5535d8b9bb0147ca4"}, {"code": "(fn [& b] (and (true? (some identity b)) (not-every? identity b)))", "problem": 83, "user": "5370b386e4b0fc7073fd6e9b"}, {"code": "(fn [& coll]\n  (let [s (set coll)]\n    (and (contains? s true)\n         (contains? s false))))", "problem": 83, "user": "537bde5de4b06839e8705e73"}, {"code": "(fn [& args] (if (and (some identity args) (not-every? identity args)) true false))", "problem": 83, "user": "53527551e4b084c2834f4af0"}, {"code": "(fn [& args] (let [lst (into #{} args)] (> (count lst) 1)))", "problem": 83, "user": "525cc912e4b0cb4875a45d48"}, {"code": "(fn [& p] (let [r (reduce #(assoc %1 %2 true) {true false false false}  p)] (and (r true) (r false))))", "problem": 83, "user": "536b2048e4b0243289761eb7"}, {"code": "(fn [& bs] (if (and (some true? bs) (some false? bs)) true false))", "problem": 83, "user": "53800d99e4b06839e8705ebd"}, {"code": "#(true? \n  (and (some true? %&) \n       (some false? %&)))", "problem": 83, "user": "50c95c4fe4b0bed41a12298f"}, {"code": "#(and (boolean (some identity %&)) (not-every? identity %&))", "problem": 83, "user": "534bde26e4b084c2834f4a81"}, {"code": "(fn [& args]\n  (if (apply = args)\n    false\n    true))", "problem": 83, "user": "5374adc3e4b06d7f452d9e27"}, {"code": "(fn [& bs]  \n  (boolean\n    (and (some true? bs)\n         (not (every? true? bs)))))", "problem": 83, "user": "5055e7f4e4b0ce54f56f0401"}, {"code": "(fn [& rest]                                        \n   (if (and\n        (reduce #(or %1 %2) rest) ; Some of the parameters are true   \n        (not (reduce #(and %1 %2) rest)) ; Not all params are true\n        )\n     true\n     false))", "problem": 83, "user": "535e518ee4b04ce2eb3ed2cf"}, {"code": "(fn [& x] (let [X #(= true %)] (not (or (every? X x) (nil? (some X x))))))", "problem": 83, "user": "536c77f1e4b0fc7073fd6e3f"}, {"code": "(fn testing \n  \t[base & arg1] \n  (condp = (count arg1)\n    0 (not base)\n    1 base\n    2 (not (every? identity arg1))\n    true\n  )\n  \t)", "problem": 83, "user": "53862316e4b06839e8705f0e"}, {"code": "(fn [& coll] (true? (and (some true? coll) (some false? coll))))", "problem": 83, "user": "532c0507e4b09d4e7a9b553c"}, {"code": "(fn [& body] (and (not-every? false? body) (not-every? true? body)))", "problem": 83, "user": "5376966ae4b06839e8705e27"}, {"code": "(fn [& bools]\n    (cond (every? true? bools) false\n          (some true? bools) true\n          :else false))", "problem": 83, "user": "51c3c6a6e4b0851ac09658f8"}, {"code": "(fn [& bools] (< 0 (count (filter true? bools)) (count bools)))", "problem": 83, "user": "53806e5be4b06839e8705ec1"}, {"code": "not=", "problem": 83, "user": "53834ed3e4b06839e8705edb"}, {"code": "(fn[& args] (let [dist (distinct args)] (if (= 1 (count dist)) false true)))", "problem": 83, "user": "534e1f56e4b084c2834f4aae"}, {"code": "(fn [& args] (cond \n                   (every? true? args) false\n                   (some true? args) true\n                   :else false)\n              )", "problem": 83, "user": "53864493e4b06839e8705f10"}, {"code": "not=", "problem": 83, "user": "537f9e34e4b06839e8705ebb"}, {"code": "(fn [& arg]\n  (= #{true false} ((comp set distinct) (vec arg))))", "problem": 83, "user": "537881a4e4b06839e8705e46"}, {"code": "(fn [& x] (and (not (nil? (some true? x))) (not (nil? (some false? x)))))", "problem": 83, "user": "53733312e4b06d7f452d9e0a"}, {"code": "(fn [& bools]\n  (let [{truths true falses false} (group-by true? bools)]\n    (boolean (and (seq truths) (seq falses )))))", "problem": 83, "user": "4dbb7d29535d1e037afb21b7"}, {"code": "(fn [& args] (= (sort (distinct args)) '(false true)))", "problem": 83, "user": "5356d00ee4b04ce2eb3ed26f"}, {"code": "(fn [& v] (and (not= nil (some false? v)) (not= nil (some true? v))))", "problem": 83, "user": "534eecaee4b084c2834f4abf"}, {"code": "(fn [& foo] (if (and (some true? foo) (some false? foo)) true false))", "problem": 83, "user": "52ac41fee4b0c58976d9ac85"}, {"code": "#(case (count (set %&)) 1 false 2 true)", "problem": 83, "user": "538557aee4b06839e8705f02"}, {"code": "(fn [& b]\n   (and (contains? (set b) true) \n        (contains? (set b) false)))", "problem": 83, "user": "4f7cbf4ae4b06e829148e1b7"}, {"code": "(fn [& b-vals]\n  (not (empty? (rest (distinct b-vals)))))", "problem": 83, "user": "536f871de4b0fc7073fd6e7f"}, {"code": "(fn [& x]\n  (and (boolean (some true? x))\n       (not-every? true? x)))", "problem": 83, "user": "529c585ae4b04e0c58e87b60"}, {"code": "(fn [& list] (boolean (and (some identity list) (not (every? identity list)))))", "problem": 83, "user": "53838742e4b06839e8705ee0"}, {"code": "(fn [& b]\n  (if (reduce #(or %1 %2) b)\n    (not (reduce #(and %1 %2) b))\n    false))", "problem": 83, "user": "538be6afe4b0640c7a9a58c9"}, {"code": "not=", "problem": 83, "user": "538d8bb8e4b0b51d73faae71"}, {"code": "(fn [& x] ( if (and (some true? x) (some false? x)) true false))", "problem": 83, "user": "53410c24e4b00652c8746eca"}, {"code": "(fn [& x]\n  (loop [x x\n         count-false 0\n         count-true 0]\n    (if (empty? x)\n        (and (not (zero? count-false)) (not (zero? count-true)))\n    \t(if (first x)\n      \t\t(recur (rest x) count-false (inc count-true))\n      \t\t(recur (rest x) (inc count-false) count-true))\n      )\n    ))", "problem": 83, "user": "538d464ee4b0b51d73faae69"}, {"code": "(fn [& args]\n  (if (every? true? args)\n    false\n    (if (true? (some true? args))\n      true\n      false)))", "problem": 83, "user": "533f09e1e4b085b17e897d9a"}, {"code": "not=", "problem": 83, "user": "53403110e4b085b17e897da6"}, {"code": "(fn [& coll]\n   (= (set coll) #{true false}))", "problem": 83, "user": "4f35e662e4b0e243712b1ec6"}, {"code": "(fn [& xs]\n  (loop [xs xs\n         seen-true? false\n         seen-false? false]\n    (cond (and seen-true? seen-false?) true\n          (empty? xs) false\n          (first xs) (recur (rest xs) true seen-false?)\n          :else (recur (rest xs) seen-true? true))))", "problem": 83, "user": "51a4416ae4b0def3c5c5868c"}, {"code": "(fn [& args] (if (every? true? args) false (if (some true? args) true false)) )", "problem": 83, "user": "53847a4ce4b06839e8705ef3"}, {"code": ";#(= 2 (count (group-by identity %&)))\nnot=", "problem": 83, "user": "536a37efe4b0243289761eaa"}, {"code": "#(= #{false true} (set %&))", "problem": 83, "user": "536973e5e4b0243289761e9e"}, {"code": "not=", "problem": 83, "user": "4fe8a1f8e4b07c9f6fd12c5f"}, {"code": "(fn [& x] \n     (and (not (every? true? x))\n          (not (every? false? x))))", "problem": 83, "user": "4f03645f535dcb61093f6a9d"}, {"code": "(fn true-and-false [& args]\n  (=\n   (count\n    (group-by identity args))\n   2))", "problem": 83, "user": "538c3424e4b0b51d73faae58"}, {"code": "(fn [& args] (not (or (every? true? args) (every? false? args))))", "problem": 83, "user": "538e29d1e4b0b51d73faae80"}, {"code": "(fn half-true? [& argvs]\n  (not\n    (or\n    (empty? (filter false? argvs))\n    (empty? (filter true? argvs)))))", "problem": 83, "user": "5379ed48e4b06839e8705e5a"}, {"code": "(fn [& args] (and (or (some true? args) false) (not-every? true? args)))", "problem": 83, "user": "5392b849e4b0b51d73faaeb1"}, {"code": "(fn [& args] (even? (count (distinct args))))", "problem": 83, "user": "528410bbe4b0239c8a67adc2"}, {"code": "(fn [& args] (let [sargs (set args)](and (contains? sargs true) (> (count sargs) 1))))", "problem": 83, "user": "53906b89e4b0b51d73faae99"}, {"code": "(fn [& bools]\n  (and \n    (not-every? true? bools)\n    (not-every? false? bools)))", "problem": 83, "user": "5383668ee4b06839e8705edd"}, {"code": "not=", "problem": 83, "user": "53973e7be4b0b51d73faaee6"}, {"code": "#(= 2 (count (distinct %&)))", "problem": 83, "user": "5368fedee4b0243289761e93"}, {"code": "(fn [& bools]\n  (boolean (and (some identity bools) (not-every? identity bools))))", "problem": 83, "user": "52963cc7e4b02ebb4ef7502d"}, {"code": "(fn half-truth [& bools]\n  (= 2 (count (distinct (into () bools)))))", "problem": 83, "user": "52b71bd2e4b0c58976d9ad4d"}, {"code": "(fn  [& args]\n  (and (>= (count (filter true? args)) 1)\n       (>= (count (filter false? args)) 1)))", "problem": 83, "user": "538e36c7e4b0b51d73faae81"}, {"code": "#(= 2 (count (into #{} (filter (partial contains? #{true false}) %&))))", "problem": 83, "user": "511688d5e4b0b3e208dba05a"}, {"code": "(fn [& bools] (= (count (distinct bools)) 2))", "problem": 83, "user": "539a2901e4b0b51d73faaf0f"}, {"code": "(fn [& b]\n  (let [tc (count (filter true? b))\n        c (count b)]\n  \t(and (> tc 0) (not= tc c))))", "problem": 83, "user": "538c6db7e4b0b51d73faae5a"}, {"code": "(fn [& bs] (and (contains? (set bs) true) (contains? (set bs) false)))", "problem": 83, "user": "539b5fcee4b0b51d73faaf1e"}, {"code": "(fn [& bools]\n  (and \n   (true? (some #(= true %) bools)) \n   (true? (some #(= false %) bools))))", "problem": 83, "user": "5189a51ae4b0288ada3dbdad"}, {"code": "(fn \n  ([] false)\n  ([x] false)\n  ([x & more]\n    (let [params (cons x more)\n          trues  (reduce + (map (fn [a] (if (= a true) 1 0)) params ))]\n             (and (> trues 0)\n                  (< trues (count params))))))", "problem": 83, "user": "50478418e4b0371827a27bc3"}, {"code": "#(boolean (and (some identity %&) (not (every? identity %&))))", "problem": 83, "user": "530bf87ee4b02e82168697d5"}, {"code": "(fn [& b] (and (true? (some true? b)) (not-every? true? b)))", "problem": 83, "user": "539ddf25e4b0b51d73faaf3e"}, {"code": "(fn [& coll]\n  (if (every? true? coll)\n    false\n    (if (every? false? coll)\n      false\n      true)))", "problem": 83, "user": "539ad6b7e4b0b51d73faaf18"}, {"code": "not=", "problem": 83, "user": "539ec9f9e4b0ca733b974491"}, {"code": "#(= (some true? %&) (some false? %&))", "problem": 83, "user": "53a074a4e4b0ca733b9744af"}, {"code": "(fn [& xs]\n  (true? (and (not-every? true? xs) (some true? xs))))", "problem": 83, "user": "50b63c5ee4b0a86f8358ca69"}, {"code": "(fn half-true [& args]\n  (let [any? (comp not not-any?)]\n  (and (any? false? args)\n       (any? true? args))))", "problem": 83, "user": "536e5055e4b0fc7073fd6e6b"}, {"code": "(fn [& bs] (boolean (and (some identity bs) (not (every? identity bs)))))", "problem": 83, "user": "52dfc89be4b09f7907dd1405"}, {"code": "(fn [& p2] (and (let [sr (some true? p2)] (if sr true false)) (not (every? true? p2))))", "problem": 83, "user": "53347274e4b0656e627bfd6b"}, {"code": "(fn [& bools]\n  (if (= 2 (count (distinct bools))) true false))", "problem": 83, "user": "539c9e26e4b0b51d73faaf2e"}, {"code": "(fn [& args] (let [trues (apply + (map #(if % 1 0) args))\n        cnt (count args)]\n    (and (not= 0 trues)\n         (not= cnt trues))))", "problem": 83, "user": "53710c09e4b0fc7073fd6ea5"}, {"code": "(fn [& coll]\n    (cond\n     (every? true? coll) false\n     :else (reduce #(or %1 %2) coll)))", "problem": 83, "user": "52c49401e4b0c2d177d620de"}, {"code": "(fn [& xs] (if (and (some #(= % false) xs) (some #(= % true) xs))\n             true\n             false))", "problem": 83, "user": "53a3dd9de4b0f1fc74538839"}, {"code": "#(true? \n  (and\n    (some true? %&)\n    (some false? %&)))", "problem": 83, "user": "53a068cbe4b0ca733b9744ae"}, {"code": "(fn [& bools]\n  (and (not-every? true? bools) (not(nil?(some true? bools)))))", "problem": 83, "user": "538e864ee4b0b51d73faae87"}, {"code": "(fn [& args] (and (not (nil? (some true? args))) (not (nil? (some false? args)))))", "problem": 83, "user": "53a1b5c8e4b0ca733b9744c1"}, {"code": "(fn [& bools] (and (not= nil (some true? bools)) (not= nil (some false? bools))))", "problem": 83, "user": "52fac708e4b047fd55836fff"}, {"problem": 83, "code": "#(true?\n  (and\n   (some true? %&)\n   (some false? %&)))", "user": "537e104ce4b06839e8705e9a"}, {"problem": 83, "code": "(fn [& bools]\n  (and (reduce #(or %1 %2) bools) (not (reduce #(and %1 %2) bools))\n  )\n)", "user": "53a36fd7e4b0f1fc74538834"}, {"problem": 83, "code": "(fn half-truth [x & xs]\n\t(not-every? #(= % x) xs))", "user": "52e657e4e4b09f7907dd1472"}, {"problem": 83, "code": "(fn [& args] (cond\n              (reduce #(and % %2) args) false\n              (reduce #(or % %2) args) true\n              :else false))", "user": "53976599e4b0b51d73faaeea"}, {"problem": 83, "code": "(fn [& args]\n (reduce (fn [i [previous current]]\n            (if-not (= previous current)\n              (= true true)\n              (= true false)\n            )\n           )\n     false\n     (partition 2 1 (seq args))))", "user": "53a26cede4b0f1fc7453882a"}, {"problem": 83, "code": "(fn [& args] (if (not-every? true? args) (if (= nil (some true? args)) false true) false))", "user": "533c0c12e4b0e30313ee6cd4"}, {"problem": 83, "code": "(fn [& args] (and (not (nil? (some true? args))) (not-every? true? args)))", "user": "4f041de1535dcb61093f6ba5"}, {"problem": 83, "code": "(fn [& x] (boolean (and (some identity x) (not (every? identity x)))))", "user": "53a739b0e4b0ef122a8689d0"}, {"problem": 83, "code": "#(and (not= nil (some true? %&)) (not-every? true? %&))", "user": "53a8d9efe4b047364c04442d"}, {"problem": 83, "code": "(fn [& x] (and (not (every? true? x)) (not (every? false? x))))", "user": "539f4e9ee4b0ca733b974498"}, {"problem": 83, "code": "(fn\n  ([a]\n  false)\n  ([a b]\n  (if (or (and (= a false) (= b false)) (and (= a true) (= b true)))\n    false\n    true))\n  ([a b c]\n  (if (or (and (= a false) (= b false) (= c false)) (and (= a true) (= b true) (= c true)))\n    false\n    true))\n  ([a b c d]\n  (if (or (and (= a false) (= b false) (= c false) (= d false)) (and (= a true) (= b true) (= c true) (= d true)))\n    false\n    true))\n  )", "user": "53a19dece4b0ca733b9744c0"}, {"problem": 83, "code": ";(fn [first-el & others]\n;  (let [searched-opposite (not first-el)]\n;    ; Caut opusul primului element in restul listei. Daca il gasesc, inseamna ca am un half-truth. Daca nu, lista contine acelasi tip de elemente, ori toate true ori toate false\n;    (if (some #(= searched-opposite %) others) \n;    \ttrue\n;    \tfalse\n;      )\n;    )\n; )\n\n;(fn [first-el & others] (if (some #(not= first-el %) others) true false))\n\nnot=", "user": "53ac1992e4b047364c04445a"}, {"problem": 83, "code": "(fn [& args]\n  (if (or (empty? (filter #(false? %) args))\n          (empty? (filter #(true? %) args)))\n    false\n    true))", "user": "51c116d4e4b0c9c822882942"}, {"problem": 83, "code": "(fn [& x] (and (> (count (filter #(= true %) x)) 0)\n               (> (count (filter #(= false %) x)) 0)))", "user": "53aaaf7ae4b047364c044444"}, {"problem": 83, "code": "#(true? (and (some true? %&) (some false? %&)))", "user": "53acaf1fe4b047364c04445f"}, {"problem": 83, "code": "(fn [& bools]\n  (and (not-every? true? bools)\n       (not-every? false? bools)))", "user": "53a7e3b9e4b047364c044423"}, {"problem": 83, "code": "(fn\n  [& args]\n   (not (not (and\n    (some #(= false %) args)\n    (some #(= true %) args) ))))", "user": "53ac4719e4b047364c04445c"}, {"problem": 83, "code": "(fn [& bools] (boolean (and (some identity bools) (some not bools))))", "user": "526e5159e4b03e8d9a4a7316"}, {"problem": 83, "code": "(fn half-truth [& xs] \n  (let [all-true (reduce #(and % %2) xs) \n        some-false (reduce #(or % %2) xs)]\n  (and some-false (not all-true))))", "user": "53778b90e4b06839e8705e36"}, {"problem": 83, "code": "not=", "user": "5398305fe4b0b51d73faaef6"}, {"problem": 83, "code": "(fn [& xs] (= (into #{} xs) #{true false}))", "user": "5327c591e4b09d4e7a9b54ff"}, {"problem": 83, "code": "(fn [& coll] (if (= 2 (count (set coll))) true false))", "user": "53abf519e4b047364c044456"}, {"problem": 83, "code": "(fn [& xs] (and (true? (some true? xs)) (true? (some false? xs))))", "user": "53a0ab8ce4b0ca733b9744b3"}, {"problem": 83, "code": "#(and (not= nil (some true? %&)) (not-every? true? %&))", "user": "538f4c1de4b0b51d73faae8c"}, {"problem": 83, "code": "not=", "user": "53b15e6ee4b047364c04448f"}, {"problem": 83, "code": "(fn [& bools]\n  (boolean (and (not (every? true? bools))\n                (some true? bools))))", "user": "532bce35e4b09d4e7a9b5536"}, {"problem": 83, "code": "(fn [ & args] \n  (if (some true? args) (if (some false? args) true false) false))", "user": "53b182a5e4b047364c044491"}, {"problem": 83, "code": "(fn [& args]\n\t(and (not (reduce #(and %1 %2) args)) (reduce #(or %1 %2) args)))", "user": "53a94b63e4b047364c044434"}, {"problem": 83, "code": "(fn [& bs]\n  (if (every? true? bs) false (if (every? false? bs) false true)))", "user": "53ae0c50e4b047364c044471"}, {"problem": 83, "code": "#(= true (and (not-every? true? %&) (some true? %&)))", "user": "53ae16e2e4b047364c044472"}, {"problem": 83, "code": "(fn [& args] (cond (and (some true? args) (some false? args)) true :else false))", "user": "53ad28ede4b047364c044462"}, {"problem": 83, "code": "#(= 2 (count (set %&)))", "user": "4fcf1755e4b03432b189f40c"}, {"problem": 83, "code": "(fn [& c] (= #{true false} (set c)))", "user": "52d07cc5e4b07d0d72b273bb"}, {"problem": 83, "code": "(fn [& args] \n  (let [n (count (filter false? args))]\n    (and (not= (count args) n) (< 0 n))))", "user": "52f0ea04e4b05e3f0be25ee6"}, {"problem": 83, "code": "not=", "user": "53b2a7f8e4b047364c04449c"}, {"problem": 83, "code": "(fn ht [& args]\n\t(if (or (every? identity args)\n\t\t(not-any? identity args))\n\tfalse\n\ttrue))", "user": "53b39d82e4b047364c0444a6"}, {"problem": 83, "code": "(fn [& bs] (if-let [b (and (some true? bs) (some false? bs))] b false))", "user": "53b71b94e4b047364c0444cd"}, {"problem": 83, "code": "(fn [& bs]\n  (if (every? identity bs) \n    false\n    (reduce #(or %1 %2) bs)))", "user": "5396c94be4b0b51d73faaee3"}, {"problem": 83, "code": "not=", "user": "5382704be4b06839e8705ed4"}, {"problem": 83, "code": "(fn [& args] (= #{true false} (apply hash-set (distinct args))))", "user": "539fa040e4b0ca733b97449f"}, {"problem": 83, "code": "(fn [& args] (and (not-every? true? args) (true? (some true? args))))", "user": "537a620be4b06839e8705e5f"}, {"problem": 83, "code": "(fn [& l] (not= nil\n   (and\n    (some #(= true %) l)\n    (some false? l))))", "user": "539c88e1e4b0b51d73faaf2c"}, {"problem": 83, "code": "(fn [& args] (not (or (every? true? args) (every? false? args))))", "user": "5391ab43e4b0b51d73faaea6"}, {"problem": 83, "code": "(fn [& x] (and (or (some identity x) false) (not (every? identity x))))", "user": "5154c361e4b0179c5115f4e3"}, {"problem": 83, "code": "(fn xor [& args] (if (every? \n                     identity args) false (if (some identity args) true false)))", "user": "504f5804e4b0a02f9cffde72"}, {"problem": 83, "code": "(fn [& bools] \n  (not (apply = bools)))", "user": "53bb22cae4b047364c0444ff"}, {"problem": 83, "code": "(fn [& args] (let [xs (set args)]\n             (and \n              (contains? (set xs) true)\n              (contains? (set xs) false))))", "user": "4eab6c0a535d7eef30807317"}, {"problem": 83, "code": "not=", "user": "53b7c21ae4b047364c0444d4"}, {"problem": 83, "code": "(fn [& a]\n        (if (or (every? true? a) (every? false? a)) false true))", "user": "53b4bddae4b047364c0444b9"}, {"problem": 83, "code": "(fn [& bs] (and (contains? (set bs) true) (contains? (set bs) false)))", "user": "53469b68e4b084c2834f4a40"}, {"problem": 83, "code": "(fn [& xs]\n  (or (and (some identity xs) \n       (not (every? identity xs)))\n      false))", "user": "537f4652e4b06839e8705eb1"}, {"problem": 83, "code": "#(if (= (count (set %&))1)false true)", "user": "52ee9ac7e4b05e3f0be25ec9"}, {"problem": 83, "code": "(fn [& xs] (true? (and (some true? xs) (not (every? true? xs)))))", "user": "52cf1e25e4b07d0d72b2739c"}, {"problem": 83, "code": "not=", "user": "53bb512ce4b047364c044503"}, {"problem": 83, "code": "(fn [& a] (= (some true? a) (some false? a)))", "user": "53aeb3ebe4b047364c044477"}, {"problem": 83, "code": "(fn some-args [& bools]\n  (or (and \n       (some identity bools) \n       (not (every? identity bools))) \n      false)\n  ;; because (or nil false) => false\n  )", "user": "53bd6fcfe4b0d9a98559a6d0"}, {"problem": 83, "code": "(fn f83 [& y]\n (boolean (and (some true? y) (not-every? true? y))))", "user": "535aee3be4b04ce2eb3ed2aa"}, {"problem": 83, "code": "(fn [& bools] (let [x (set bools)]\n                (= (count x) 2)))", "user": "518261a4e4b0f2adb7336523"}, {"problem": 83, "code": "(fn [& xs]\n  (and (not-every? true? xs)\n       (not-every? false? xs)))", "user": "52c4af71e4b0c2d177d620e1"}, {"problem": 83, "code": "(fn [& vars]\n  (not (nil? (and (some true? vars) (some false? vars)))))", "user": "53beacf9e4b0d9a98559a6e3"}, {"problem": 83, "code": "(fn [& args] \n  (= 2 (count (set args))))", "user": "53c1ce3ee4b00fb29b221268"}, {"problem": 83, "code": "(fn [& x] (let [freq (frequencies x)]\n  (and (>= (get freq true 0) 1) (>= (get freq false 0) 1))\n  )\n)", "user": "52b434c9e4b0c58976d9ad1c"}, {"problem": 83, "code": "(fn [fst & lst]\n  (if fst\n    (not (reduce (fn [b1 b2] (if b1 b2 false)) true lst))\n    (reduce (fn [b1 b2] (if b1 true b2)) false lst)))", "user": "53bab6fae4b047364c0444fb"}, {"problem": 83, "code": "#(if (= 2 (count (distinct %&))) true false)", "user": "539c9d7ee4b0b51d73faaf2d"}, {"problem": 83, "code": "(fn [ & xs]\n    (let [con (partial contains? (set xs))]\n    (and (con true)\n         (con false))))", "user": "53c38b8ce4b00fb29b22127b"}, {"problem": 83, "code": "(fn [& x] (true? (and (some true? x) (not-every? true? x))))", "user": "53791ab7e4b06839e8705e4d"}, {"problem": 83, "code": "(fn [& truths]\n  (and ((complement not-any?) identity truths)\n       (not-every? identity truths)))", "user": "53bd8d27e4b0d9a98559a6d6"}, {"problem": 83, "code": "(fn mixed-bag [& bools]\n  (if (and (some true? bools) (some false? bools))\n    true\n    false))", "user": "53bf0913e4b0c98a41f5cc99"}, {"problem": 83, "code": "(fn [ & args] (let [any? (comp boolean some)] (and (any? false? args) (any? true? args))))", "user": "538db083e4b0b51d73faae74"}, {"problem": 83, "code": "(fn [& args]\n  (true? (and (some true? args) (some false? args))))", "user": "53c126fce4b00fb29b22125b"}, {"problem": 83, "code": "not=", "user": "533018b2e4b019098a6f8b56"}, {"problem": 83, "code": "#(true? (and (some true? %&) (some false? %&)))", "user": "526f79aee4b03e8d9a4a736a"}, {"problem": 83, "code": "not=", "user": "53572767e4b04ce2eb3ed277"}, {"problem": 83, "code": "(fn xor [& b] (true? (and (some true? b) (not-every? true? b))))", "user": "53cd4920e4b00fb29b2212de"}, {"problem": 83, "code": "(fn [& args] (if (some true? args) \n               (if (= 0 (count (filter #(false? %) args))) \n                 false \n                 true) \n               false))", "user": "53cdb2c4e4b00fb29b2212e5"}, {"problem": 83, "code": "(fn [& args]\n  (letfn [(exists? [pred coll]\n            (> (count (filter pred coll)) 0))]\n  (and (exists? true? args) (exists? false? args))))", "user": "53cbe808e4b00fb29b2212d4"}, {"problem": 83, "code": "(fn [& args] (and (boolean (some true? args)) (not (every? true? args))))", "user": "4e894068535d4ef0aa30db97"}, {"problem": 83, "code": "(fn half-truth [& args]\n  (if (or (every? true? args) (every? false? args))\n    false\n    true))", "user": "53b05a36e4b047364c044481"}, {"problem": 83, "code": "not=", "user": "536c1531e4b0fc7073fd6e36"}, {"problem": 83, "code": "(fn [& z]\n  (let [sum (apply + (map #(if % 1 0) z))]\n    (and (< sum (count z)) (> sum 0))\n  ))", "user": "53ca41dae4b00fb29b2212c8"}, {"problem": 83, "code": "(fn half-true?\n  [& bools]\n  (let [filtered-bools (filter true? bools)]\n    (cond\n      (= 0 (count filtered-bools)) false\n      (= bools filtered-bools) false\n      :else true)))", "user": "51c8f1d8e4b07ef393169e5d"}, {"problem": 83, "code": "#(true? (and (some true? %&) (some false? %&)))", "user": "4ea8570f535d7eef308072f8"}, {"problem": 83, "code": "(fn [& bools] (if (= bools (repeat (count bools) true)) false (< 0 (reduce + (map (fn [x] (if (true? x) 1 0)) bools)))))", "user": "53d5d24de4b0e771c302544a"}, {"problem": 83, "code": "#(boolean (and (some true? %&) (not-every? true? %&)))", "user": "4e6b8ac8535d8ccf87e9ff19"}, {"problem": 83, "code": "not=", "user": "53ce4cd4e4b00fb29b2212ef"}, {"problem": 83, "code": "#(= #{true false} (set (keys (group-by true? %&))))", "user": "53d6cf90e4b0e771c302545c"}, {"problem": 83, "code": "not=", "user": "4fc8f1fee4b0ee37620e183f"}, {"problem": 83, "code": "(fn\n  [& inputs]\n  (if (re-find #\"true\" (str inputs))\n    (if (re-find #\"false\" (str inputs))\n      true\n      false)\n    false))", "user": "53de4bdae4b0d874e779ae32"}, {"problem": 83, "code": "(fn truthiness [& bools]\n  (and\n   (reduce (fn [x y] (or x y)) bools)\n   (not (reduce (fn [x y] (and x y)) bools))))", "user": "53ddd44be4b0d874e779ae2e"}, {"problem": 83, "code": "(fn [& more] (< 0 (count (filter identity more)) (count more)))", "user": "53de622ce4b0d874e779ae34"}, {"problem": 83, "code": "(fn [x1 & xs]\n  (let [ys (conj xs x1) L (count (filter #(= true %) ys))]\n\t(if (or (= 0 L) (= (count ys) L) )\n      false\n      true\n      )))", "user": "53ca23e3e4b00fb29b2212c6"}, {"problem": 83, "code": "(fn [& xs]\n    (and\n      (boolean (some false? xs))\n      (boolean (some true? xs))\n      )\n    )", "user": "53c3397be4b00fb29b221279"}, {"problem": 83, "code": "#(true? (and\n         (some true? %&)\n         (some false? %&)))", "user": "53cdbad1e4b00fb29b2212e6"}, {"problem": 83, "code": "not=", "user": "53968a70e4b0b51d73faaee0"}, {"problem": 83, "code": "(fn [& args] (and (not (nil? (some identity args))) (not (every? identity args))))", "user": "52cda980e4b07d0d72b2737b"}, {"problem": 83, "code": "#(= (some true? %&) (not-every? true? %&))", "user": "53bed4b5e4b0c98a41f5cc94"}, {"problem": 83, "code": "(fn [& bools] (if (and \n                     (not (every? identity bools))\n                     (some identity bools))\n                true\n                false))", "user": "53da8fede4b0e771c30254a3"}, {"problem": 83, "code": "(fn [& args] (= #{true false} (set args)))", "user": "539dcb24e4b0b51d73faaf3d"}, {"problem": 83, "code": "(fn [& args] \n  (not (nil? (and (some false? args) (some true? args)))))", "user": "53d0d7a9e4b00fb29b22130c"}, {"problem": 83, "code": "(fn [frst & more] (let [my-set (set (cons frst more)) ] (= 2 (count my-set))))", "user": "52fdbf3ae4b047fd55837032"}, {"problem": 83, "code": "(fn [& vs] (true? (and (some false? vs) (some true? vs))))", "user": "53e19461e4b0d874e779ae59"}, {"problem": 83, "code": "(fn [& bs]\n  (or (and (some true? bs) (some false? bs) true) false))", "user": "53a83c74e4b047364c044426"}, {"problem": 83, "code": "(fn F [& bools] (if (some true? bools)\n                    (if (not (every? true? bools))\n                      true\n                      false)\n                    false))", "user": "4f856adfe4b033992c121c44"}, {"problem": 83, "code": "#(true?\n  (and\n    (some true? %&)\n    (some false? %&)))", "user": "53e241a6e4b036ad0777e3f0"}, {"problem": 83, "code": "not=", "user": "53dc94c8e4b094d41abdfefc"}, {"problem": 83, "code": "(fn [& xs]\n  (and\n    (not-every? false? xs)\n    (not-every? true? xs)))", "user": "52a8ca0fe4b0c58976d9ac36"}, {"problem": 83, "code": "(fn [& args] (and (not (every? true? args)) (if (some true? args) true false)))", "user": "53e2ac1ae4b036ad0777e3f3"}, {"problem": 83, "code": "#( true? (and\n    (some true? %&)\n    (some false? %&)))", "user": "516d227fe4b06f078fab252d"}, {"problem": 83, "code": "(fn [& as] (and      (reduce #(or  %1 %2) false as)\n                (not (reduce #(and %1 %2) true as))))", "user": "53dadf1de4b0e771c30254ad"}, {"problem": 83, "code": "#(if (some true? %&)\n   (not (every? true? %&))\n   false)", "user": "53e4fa2ce4b036ad0777e454"}, {"problem": 83, "code": "#(true? (and (some true? %&) (some false? %&)))", "user": "53c649d3e4b00fb29b221297"}, {"problem": 83, "code": "(fn [& p] (and (not (apply = p)) (some (fn [x] (true? x)) p)))", "user": "52f304b4e4b05e3f0be25f07"}, {"problem": 83, "code": "(fn [& args] (and (not (reduce #(and %1 %2) args)) (reduce #(or %1 %2) args)))", "user": "53d28800e4b00fb29b22131e"}, {"problem": 83, "code": "(fn [& more](and (contains? (into #{} more) true) (contains? (into #{} more) false)))", "user": "53e150e5e4b0d874e779ae53"}, {"problem": 83, "code": "#(= #{true false} (set %&))", "user": "4ed3b4a7535d44c135fd68f5"}, {"problem": 83, "code": "(fn [& bools] (and (reduce #(or %1 %2) bools) (not (reduce #(and %1 %2) bools))))", "user": "52ba2639e4b07a9af57922cb"}, {"problem": 83, "code": "(fn [& coll]\n  (let [true-qty (count (filter true? coll))] \n        (and (> true-qty 0)\n             (< true-qty (count coll)))))", "user": "53e30fcae4b036ad0777e3fc"}, {"problem": 83, "code": "(fn [& args]\n  (> (count (distinct args)) 1))", "user": "53d2afede4b00fb29b221321"}, {"problem": 83, "code": "(fn [& args] (not (or (every? true? (seq args)) (every? false? (seq args)))))", "user": "53e76bb2e4b036ad0777e47d"}, {"problem": 83, "code": "(fn [& bs]\n  (let [bools (group-by true? bs)]\n    (and (contains? bools true) (contains? bools false))))", "user": "51b8d3d5e4b050a1176cd69d"}, {"problem": 83, "code": "(fn [& a]\n  (= #{true false} (into #{} a)))", "user": "53d78b64e4b0e771c3025466"}, {"problem": 83, "code": "#(= 2 (count (set %&)))", "user": "5343753ae4b084c2834f4a1b"}, {"problem": 83, "code": "not=", "user": "53dfbc75e4b0d874e779ae44"}, {"problem": 83, "code": "(fn [ & x] (if (and (some #{true} x) (not (every? identity x))) true false))", "user": "53e91473e4b036ad0777e495"}, {"problem": 83, "code": "(fn [& bools] (and (reduce #(or %1 %2) bools) (not (reduce #(and %1 %2) bools))))", "user": "53b952eee4b047364c0444e6"}, {"problem": 83, "code": "(fn [& c] (and (not-every? true? c) (not-every? false? c)))", "user": "53ee7f2ee4b0d648e757f4cf"}, {"problem": 83, "code": "(fn half-true [& xs]\n  (if (every? identity xs)\n    false\n    (if (some identity xs)\n      true\n      false)))", "user": "53e27bf1e4b036ad0777e3f2"}, {"problem": 83, "code": "(fn [& a] (if (some true? a) (if (every? true? a) false true) false))", "user": "528d6b10e4b0239c8a67aec3"}, {"problem": 83, "code": "(fn [& args]\n    (and (not-every? true? args) (not-every? false? args)))", "user": "52d24f60e4b099d49816f0a8"}, {"problem": 83, "code": "(fn [& args] (and (not (reduce #(and %1 %2) args)) (reduce #(or %1 %2) args)))", "user": "53ea72b6e4b036ad0777e4e5"}, {"problem": 83, "code": "(fn [& e] (true? (and (some true? e) (not-every? true? e))))", "user": "50856bd1e4b004985b776e4c"}, {"problem": 83, "code": "(fn [& args]\n  (loop [list_a args some_true false all_true false]\n    (if (empty? list_a)\n      (if (and some_true all_true)\n        true\n        false\n      )\n      (recur\n        (rest list_a)\n        (if (or some_true (first list_a)) true false)\n        (if (or all_true (not (first list_a))) true false)\n      )\n    )\n  ) \n)", "user": "53f17931e4b0742d9025b0dd"}, {"problem": 83, "code": "not=", "user": "53eb8ceae4b036ad0777e4fb"}, {"problem": 83, "code": "(fn [& more] (if (and (some true? more) (not (every? true? more))) true false))", "user": "52eb2ec9e4b0705949c44439"}, {"problem": 83, "code": "not=", "user": "523578efe4b0a643f2dcb74c"}, {"problem": 83, "code": "(fn [& a]\n  (if (every? true? a)\n    false\n    (if (some true? a)\n      true\n      false)))", "user": "53e92aafe4b036ad0777e49a"}, {"problem": 83, "code": "(fn [& l] (if (and (some true? l) (not-every? true? l)) true false))", "user": "53531724e4b084c2834f4af9"}, {"problem": 83, "code": "#(if (and (some true? %&) (some false? %&)) true false)", "user": "53e4b5a3e4b036ad0777e44b"}, {"problem": 83, "code": "(fn [& coll] (true? (and (some true? coll) (not (every? true? coll)))))", "user": "53ecd01fe4b0d648e757f4b9"}, {"problem": 83, "code": "(fn [& bools]\n  (apply not= bools))", "user": "53ea5307e4b036ad0777e4e2"}, {"problem": 83, "code": "(fn partially_true [& elements]\n  (and (not= nil (some true? elements)) (not-every? true? elements)))", "user": "53f50c03e4b0db01ade6f9ca"}, {"problem": 83, "code": "#(true? (and  (some true? %&)  (some false? %&)))", "user": "537b1083e4b06839e8705e64"}, {"problem": 83, "code": "#(and (not-every? false? %&)(not-every? true? %&))", "user": "538d70abe4b0b51d73faae6e"}, {"problem": 83, "code": "(fn [& xs] (> (count (distinct xs)) 1))", "user": "538ca203e4b0b51d73faae5f"}, {"problem": 83, "code": "(fn [& args]\n  (true? (and (some true? args) (not (every? true? args)))))", "user": "53ea3a63e4b036ad0777e4dc"}, {"problem": 83, "code": "(fn [& args] (if (and (some identity args) (not (every? identity args))) true false))", "user": "513e8141e4b02b2a3d8235c1"}, {"problem": 83, "code": "(fn [& vals] (if (and (some true? vals) (some false? vals)) true false))", "user": "53f733f4e4b0de5c4184855a"}, {"problem": 83, "code": "(fn [& args] (and (not (every? true? args)) (not (nil? (some true? args)))))", "user": "53f6d555e4b0db01ade6f9e5"}, {"problem": 83, "code": "(fn my-some-true [& xs]\n  (let [cnt     (count xs)\n        trueval (filter identity xs)\n        truecnt (count trueval)]\n    (and (not= cnt truecnt) (not= 0 truecnt))\n  )\n)", "user": "53edb628e4b0d648e757f4c8"}, {"problem": 83, "code": "not=", "user": "53f035c2e4b0742d9025b0d2"}, {"problem": 83, "code": "(fn [& xs] (and (not (not-any? false? xs)) (not (not-any? true? xs))))", "user": "53cd421ce4b00fb29b2212dd"}, {"problem": 83, "code": "(fn [& args] (true? (and (some true? args) (some false? args))))", "user": "504e1abee4b0f6ff3350c45d"}, {"problem": 83, "code": "(fn [& args]\n   (cond\n     (not (reduce (fn[a b] (or a b)) args))\n     false\n     \n     (reduce (fn[a b] (and a b)) args)\n     false\n     \n     :else\n     (reduce (fn[a b] (or a b)) args)))", "user": "5398123ee4b0b51d73faaef3"}, {"problem": 83, "code": "#(true?\n  (and (some true? %&)\n       (some false? %&)))", "user": "5377a23ce4b06839e8705e39"}, {"problem": 83, "code": "(fn [& coll] (true? (and (some false? coll) (some true? coll) )))", "user": "53ed6976e4b0d648e757f4c4"}, {"problem": 83, "code": "(fn\n  [& coll]\n  (boolean (and (some true? coll) (some false? coll))))", "user": "53e3e852e4b036ad0777e407"}, {"problem": 83, "code": "(fn peu [& x] (and (reduce #(or %1 %2) false x) (false? (reduce #(and %1 %2) true x))))", "user": "53fc8424e4b0de5c418485b3"}, {"problem": 83, "code": "(fn[& b] (boolean (and (some true? b) (not (every? true? b)))))", "user": "53e9681de4b036ad0777e4a4"}, {"problem": 83, "code": "(fn [ & bs]\n  (true?\n   (and\n    (some true? bs)\n    (some false? bs))))", "user": "53f7820be4b0de5c41848560"}, {"problem": 83, "code": "not=", "user": "53fe255ce4b0de5c418485f3"}, {"problem": 83, "code": "(fn\n  [& args] \n  (not (nil? (and (some true? (flatten (list args))) (some false? (flatten (list args)))))))", "user": "53d6b266e4b0e771c3025459"}, {"problem": 83, "code": "#(or (and (some identity %&) (not (every? identity %&))) false)", "user": "53fb5256e4b0de5c4184857f"}, {"problem": 83, "code": "(fn [& args]\n             (and (not (nil? (some true? args)))\n                  (not (nil? (some false? args)))))", "user": "53f592b7e4b0db01ade6f9d0"}, {"problem": 83, "code": "#(true? \n  (and\n    (some true? %&)\n    (some false? %&)))", "user": "53f75957e4b0de5c4184855d"}, {"problem": 83, "code": "(fn [& more] (= 2 (count (set more))))", "user": "53d86564e4b0e771c302546b"}, {"problem": 83, "code": "#(= 2(count(set %&)))", "user": "53ed2fafe4b0d648e757f4c1"}, {"problem": 83, "code": "(fn [ & xs] (not (or (every? false? xs) (every? true? xs))))", "user": "525b4e8de4b0cb4875a45d0f"}, {"problem": 83, "code": "#(let [s (set %&)] (and (contains? s true) (contains? s false)))", "user": "5400fc30e4b0de5c4184861b"}, {"problem": 83, "code": "(fn [& s]\n  (= 2 (count (set s))))", "user": "53f77b6ae4b0de5c4184855f"}, {"problem": 83, "code": "(fn [& lst]\n  (let [falses (filter false? lst)]\n    (if (seq falses)\n      (not (= lst falses))\n      false)))", "user": "524bc937e4b09eba1c0223ee"}, {"problem": 83, "code": "(fn [& as]\n  (letfn [(fold [bs [f t]]\n            (if (empty? bs) (and f t)\n                (if (first bs)\n                  (fold (rest bs) [f true])\n                  (fold (rest bs) [true t]))))]\n    (fold as [false false])))", "user": "53ef7f77e4b0742d9025b0ce"}, {"problem": 83, "code": "(fn [& rest] (if (and (some true? rest) (some false? rest)) true false))", "user": "53fe1c3be4b0de5c418485f2"}, {"problem": 83, "code": "not=", "user": "523630eee4b05f3be1c7c8e8"}, {"problem": 83, "code": "(fn halftruth\n   [& truths]\n    (not (or (not-any? true? truths) (not-any? false? truths)))\n  )", "user": "53fe459ae4b0de5c418485f4"}, {"problem": 83, "code": "(fn [& xs]\n  (cond\n   (every? true? xs) false\n   (some true? xs) true\n   :else false))", "user": "53bf9cfbe4b0c98a41f5cca4"}, {"problem": 83, "code": "(fn [& args] (boolean (and \n              (some #(= true %) args)\n              (some #(= false %) args))))", "user": "53f3a4ace4b0742d9025b0f7"}, {"problem": 83, "code": "(fn [& x] (->> x set count (= 2)))", "user": "53fb4843e4b0de5c4184857d"}, {"problem": 83, "code": "(fn [& x] (if (some true? x) (if (some false? x ) true false) false))", "user": "53fdc4b8e4b0de5c418485ea"}, {"problem": 83, "code": "(fn [& args] (and (> (count (filter identity args)) 0)\n                  (> (count (filter not args)) 0)))", "user": "53e2b212e4b036ad0777e3f4"}, {"problem": 83, "code": "(fn [& args]\n  (cond \n    (every? true? args) false\n    (every? false? args) false\n    :else true))", "user": "53eaa804e4b036ad0777e4ea"}, {"problem": 83, "code": "(fn [& s] (and (boolean (some true? s)) (not-every? true? s)))", "user": "534bfc71e4b084c2834f4a88"}, {"problem": 83, "code": "(fn [& args] \n   (if (and (some true? args) (some false? args))\n     true\n     false))", "user": "53c69ebce4b00fb29b22129c"}, {"problem": 83, "code": "(fn\n  [& xs]\n  (true? (and (some true? xs) (some false? xs))))", "user": "5401aefbe4b0df28a13c62c7"}, {"problem": 83, "code": "#(true? \n  (and\n    (some true? %&)\n    (some false? %&)))\n\n;; %& stands for all argument as sequence\n;; some: Returns the first logical true value of (pred x) for any x in coll, else nil.", "user": "53be3ee7e4b0d9a98559a6df"}, {"problem": 83, "code": "(fn [& bools] \n   (let [[left right] (partition-by false? bools)] \n     (and (not (empty? left)) (not (empty? right)))))", "user": "53c06438e4b0c98a41f5ccb0"}, {"problem": 83, "code": "(fn test [& args]\n  (and (reduce #(or %1 %2) args) (not (reduce #(and %1 %2) args)))\n)", "user": "54021f13e4b0df28a13c62cc"}, {"problem": 83, "code": "(fn half-truth [& xs]\n  (and (boolean (some identity xs))\n       (not (every? identity xs))))", "user": "53e8c684e4b036ad0777e48b"}, {"problem": 83, "code": "not=", "user": "53dd37aee4b0d874e779ae28"}, {"problem": 83, "code": "#(and (not (nil? (some identity %& ))) (not (every? identity %&)))", "user": "524025bce4b0ad64fa01030f"}, {"problem": 83, "code": "(fn [& x]   (and (not= nil (some true? x)) (not (every? true? x))))", "user": "540479e7e4b0addc1aec665a"}, {"problem": 83, "code": "(fn [& args]\n    (if (reduce #(or %1 %2) args)\n      (not (reduce #(and %1 %2) args))\n      false))", "user": "4daeff24edd6309eace4d16e"}, {"problem": 83, "code": "#(true? (and (some true? %&) (some false? %&)))", "user": "51d42f44e4b013d740b70ddb"}, {"problem": 83, "code": "(fn [& x] (true? (and (some true? x) (some false? x))))", "user": "540d7dd1e4b0addc1aec6713"}, {"problem": 83, "code": "#(and (not (every? identity %&)) (not (not-any? identity %&)) )", "user": "53b9bb15e4b047364c0444ed"}, {"problem": 83, "code": "(fn [& x] (and ((comp not not some) identity x) (not-every? identity x)))", "user": "5409f8eae4b0addc1aec66e6"}, {"problem": 83, "code": "(fn [& x]\n  (true? (and (some true? x)\n              (not (every? true? x)))))", "user": "53e543efe4b036ad0777e457"}, {"problem": 83, "code": "(comp (partial < 1) count (partial group-by identity)  list)", "user": "54094824e4b0addc1aec66da"}, {"problem": 83, "code": "(fn f [& args]\n  (boolean\n   (and \n    (some identity args)\n    (not (every? identity args)))))", "user": "540d5085e4b0addc1aec670e"}, {"problem": 83, "code": "(fn [& args]\n  (if (every? true? args)\n    false\n    (boolean (some true? args))))", "user": "53e9a15be4b036ad0777e4ae"}, {"problem": 83, "code": "(fn halftruth [& args] (and (true? (some true? args)) (not  (every? true? args))))", "user": "53f2370ee4b0742d9025b0e7"}, {"problem": 83, "code": "(fn [& args]  \n\t(if (every? true? args)\n      false\n      (if (some true? args)\n        true\n        false\n        )))", "user": "523089f8e4b0035e815da388"}, {"problem": 83, "code": "(fn half-truth\n  [& bools]\n  (= (not (every? #(= true %) bools)) (not (every? #(= false %) bools))))", "user": "54091b82e4b0addc1aec66d5"}, {"problem": 83, "code": "not=", "user": "53fcdd1ae4b0de5c418485dd"}, {"problem": 83, "code": "(letfn [(f [& args]\n           (if (and (some true? args) (some false? args))\n             true\n             false))]\n  f)", "user": "540470dae4b0addc1aec6658"}, {"problem": 83, "code": "not=", "user": "541096bde4b01498b1a719b2"}, {"problem": 83, "code": "(fn [& bools] (true? (and (not-every? true? bools) (some true? bools))))", "user": "540904a7e4b0addc1aec66d2"}, {"problem": 83, "code": "(fn [& bools] \n  (> (count (set bools)) 1))", "user": "54133900e4b01498b1a719de"}, {"problem": 83, "code": "(fn [& l]\n  (= (count (set l)) 2))", "user": "53e76728e4b036ad0777e47c"}, {"problem": 83, "code": "(fn [& xs]\n  (let [truth-map (group-by #(if % :true :false) xs)]\n    (cond (and (contains? truth-map :false) (contains? truth-map :true)) true\n          :else false)))", "user": "53f6bfd9e4b0db01ade6f9e4"}, {"problem": 83, "code": "(fn [& bools] (and (not-every? identity bools) (not (not-any? identity bools))))", "user": "540f09b9e4b0addc1aec6725"}, {"problem": 83, "code": "(fn [& args]\n  (and (not (not-any? identity args))\n       (not-every? identity args)))", "user": "54125eeee4b01498b1a719d3"}, {"problem": 83, "code": "(fn [& args] \n  (true? (and (some true? args) (some false? args))))", "user": "540c54a7e4b0addc1aec6700"}, {"problem": 83, "code": "not=", "user": "54084784e4b0addc1aec66c9"}, {"problem": 83, "code": "(fn some-falses [& args]\n  (let [[seen-false? seen-true?]\n        (reduce (fn [acc bool-val]\n                  (if (false? bool-val)\n                    [true (second acc)]\n                    [(first acc) true]))\n                [false false]\n                args)]\n    (boolean (and seen-false? seen-true?))))", "user": "53fd66a4e4b0de5c418485e3"}, {"problem": 83, "code": "(fn [& more] (and ((complement not-any?) true? more) (not-every? false? more) (not-every? true? more)))", "user": "541619e8e4b01498b1a719f9"}, {"problem": 83, "code": "(fn \n  [& coll]\n  (let [t (set coll)]\n  (if (= (count t) 2)\n    true\n    false)))", "user": "51c1b644e4b0d204dbe2ca12"}, {"problem": 83, "code": "(fn [& all] (and (boolean (some identity all)) (not (every? identity all))))", "user": "5282f54be4b0239c8a67ada0"}, {"problem": 83, "code": "#(true? (and (some true? %&) (some false? %&)))", "user": "541b37d2e4b01498b1a71a64"}, {"problem": 83, "code": "#(boolean (and (some false? %&) (some true? %&)))", "user": "52541fe6e4b0541d1855b964"}, {"problem": 83, "code": "(fn [& args]\n  (let [x (count (filter true? args))]\n    (and (> x 0) (< x (count args)))))", "user": "51ff6379e4b0f1313d468a98"}, {"problem": 83, "code": "#(= (count (distinct %&)) 2)", "user": "52382d91e4b0fae3832e99f0"}, {"problem": 83, "code": "(fn [& l]\n  (if (every? true? l)\n    false\n    (not (not-any? true? l))))", "user": "52d6d490e4b09f7907dd1369"}, {"problem": 83, "code": "(fn [& args]\n  (if (some identity args)\n    (if (not (every? identity args))\n      true\n      false)\n    false))", "user": "541f6bc0e4b01498b1a71a98"}, {"problem": 83, "code": "not=", "user": "511036c5e4b04c71fce993ee"}, {"problem": 83, "code": "(fn [& bools] \n  (and (not= nil (some true? bools)) (not= nil (some false? bools))))", "user": "541c1e46e4b01498b1a71a70"}, {"problem": 83, "code": "(fn [& args] \n    (if (and\n         (>= (.indexOf args true)\n             0)\n         (>= (.indexOf args false) \n             0))   \n      true\n      false))", "user": "54213a8fe4b01498b1a71aaf"}, {"problem": 83, "code": "(fn [& args]\n   (if \n     (= #{true} (set args))\n     false \n     (if \n       (= #{false} (set args))\n       false\n       true)))", "user": "53844970e4b06839e8705eef"}, {"problem": 83, "code": "(fn [& xs] (and (if (some #{true} xs) true false) (not (every? #{true} xs))))", "user": "541ae7dbe4b01498b1a71a61"}, {"problem": 83, "code": "(fn [& args] (if (and (some true? args) (not-every? true? args)) true false))", "user": "5412ef7ee4b01498b1a719da"}, {"problem": 83, "code": "(fn [& x] (and (not-every? true? x) (not-every? false? x)))", "user": "53f6566ee4b0db01ade6f9de"}, {"problem": 83, "code": "(fn msometrue?\n  [& args]\n  (and (not-every? false? args) (not-every? true? args)))", "user": "540efe2ee4b0addc1aec6724"}, {"problem": 83, "code": "not=", "user": "53fd0a22e4b0de5c418485e1"}, {"problem": 83, "code": "(fn [& args]\n  (if (and (not (= (get (frequencies (into [] args)) true)\n              (count (into [] args))))\n           (get (frequencies (into [] args)) true))\n    true\n    false))", "user": "53e0001be4b0d874e779ae48"}, {"problem": 83, "code": "#(and (not= nil (some true? %&)) (not-every? true? %&))", "user": "5409a12fe4b0addc1aec66df"}, {"problem": 83, "code": "(fn some-true [& args]\n  (let [c (count (filter identity args))]\n    (and (> c 0) (< c (count args)))\n    ))", "user": "5245e320e4b09dbe66b56177"}, {"problem": 83, "code": "(fn [& bs] \n  (boolean (and \n            (not-every? true? (seq bs)) \n            (some true? (seq bs)))\n           )\n  )", "user": "540b4c4de4b0addc1aec66f6"}, {"problem": 83, "code": "(fn mm[& args]\n\t(true? (and (some true? args) (not (every? true? args)))))", "user": "535f0cbde4b04ce2eb3ed2d9"}, {"problem": 83, "code": "(fn [& args]\n\t(let [or-fn (fn [arg1 arg2] (or arg1 arg2))\n\t\tand-fn (fn [arg1 arg2] (and arg1 arg2))]\n\t\t(and-fn\n\t\t\t(true? (reduce or-fn args)) \n\t\t\t(false? (reduce and-fn args)))))", "user": "4ffc9c4ae4b0678c553fc3dd"}, {"problem": 83, "code": "(fn [& args] (= 2 (count (set (first (list args))))))", "user": "54286beee4b01498b1a71b31"}, {"problem": 83, "code": "(fn [& bs]\n  (if\n   (and (some true? bs) (some false? bs))\n   true\n   false))", "user": "4eb3fcba535d7eef30807359"}, {"problem": 83, "code": "(fn [& bools]\n  (let [x (count (filter identity bools))]\n    (and (not= (count bools) x)\n         (> x 0))))", "user": "541475afe4b01498b1a719eb"}, {"problem": 83, "code": "(fn [& bools]\n  ((comp not nil? next distinct) bools))", "user": "5424c523e4b01498b1a71b03"}, {"problem": 83, "code": "(fn [& tst1] (if (and \n           (> (count (filter #(= true %) tst1)) 0)\n           (not (= 0 (count (filter #(= false %) tst1)))))\n        true false))", "user": "5251b11be4b0541d1855b87b"}, {"problem": 83, "code": "(fn [& args] (apply not= args))", "user": "542a7c9be4b01498b1a71b41"}, {"problem": 83, "code": "(fn [& bools]\n  (= (set bools) #{true false}))", "user": "54246fcce4b01498b1a71aed"}, {"problem": 83, "code": "(fn [& values] (and (= true (some (partial = false) values)) (= true (some (partial = true) values))))", "user": "516ee939e4b06aac486e5b34"}, {"problem": 83, "code": "(fn half-true [& balls]\n   (and\n     (not (nil? (some identity balls)))\n     (not (every? identity balls))))", "user": "5429986ce4b01498b1a71b3b"}, {"problem": 83, "code": "(fn [& bs] \n  (boolean\n  (and (some true? bs)\n       (not (every? true? bs)))))", "user": "4e7e032b535db169f9c796fc"}, {"problem": 83, "code": "(fn [& s]\n   (if (and (some #(= % false ) s) (some #(= % true ) s) )\n     true\n     false))", "user": "53214efbe4b09d4e7a9b54b2"}, {"problem": 83, "code": "(fn [& rest]\n   (not (nil? (and (some #(= true %) rest)\n                   (some #(= false %) rest)))))", "user": "542b764ae4b0dad94371f28d"}, {"problem": 83, "code": "(fn [& more]\n  (if (and (some #(= false %) more) (some #(= true %) more))\n    true\n    false))", "user": "51ca5378e4b08b1cbd0d9480"}, {"problem": 83, "code": "#(= 2 (count (set %&)))", "user": "54302691e4b0dad94371f2d7"}, {"problem": 83, "code": "not=", "user": "53a01fb1e4b0ca733b9744a6"}, {"problem": 83, "code": "(fn [& x]\n  (= (count (frequencies x)) 2))", "user": "54336443e4b0b6b47310fcde"}, {"problem": 83, "code": "(fn [& args] \n  (if\n    (every? true? args)\n    false,\n    (or (some true? args) false)))", "user": "53da3fcde4b0e771c3025497"}, {"problem": 83, "code": "(fn [& more]\n   (and (not (reduce #(and %1 %2) more)) (reduce #(or %1 %2) more)))", "user": "54344721e4b0b6b47310fcea"}, {"problem": 83, "code": "#(and (not-every? false? %&) (not-every? true? %&))", "user": "532a033be4b09d4e7a9b551f"}, {"problem": 83, "code": "(fn [& arg] (= 2 (count (distinct arg))))", "user": "52ee0de4e4b05e3f0be25ec1"}, {"problem": 83, "code": "not=", "user": "5310e968e4b08068f379ecdd"}, {"problem": 83, "code": "(fn aaa [& args]\n    (and (>= (count (set args)) 2)\n         (boolean (some #{true} args))))", "user": "543b75eae4b032a45b869330"}, {"problem": 83, "code": "(fn [& args] (let[ sets ( set args) ] \n               (if (= (count sets) 2)\n                 true\n                 false)\n               )\n  )", "user": "542baf7ce4b0dad94371f291"}, {"problem": 83, "code": "(fn [& args] \n (if (and (some identity args) (not (every? identity args)))\n   true false))", "user": "543c1afce4b032a45b86933b"}, {"problem": 83, "code": "not=", "user": "543a68d3e4b032a45b869326"}, {"problem": 83, "code": "(fn [& a]\n  (and (true? (some identity a))\n       (not (every? identity a))))", "user": "53e745a1e4b036ad0777e479"}, {"problem": 83, "code": "not=", "user": "542edb4ae4b0dad94371f2c8"}, {"problem": 83, "code": "(fn [& args]\n    (cond\n      (every? true? args) false\n      (some true? args) true\n      (every? false? args) false))", "user": "515ebde3e4b01e5d11ccd0a8"}, {"problem": 83, "code": "#(true? \n  (and\n    (some true? %&)\n    (some false? %&)))", "user": "52b2f9cae4b0c58976d9acfb"}, {"problem": 83, "code": "(fn [& args]\n  (= #{true false} (into #{} args)))", "user": "542c22bde4b0dad94371f29e"}, {"problem": 83, "code": "(fn [& bols] \n  (let [total (count bols)\n        trues (count (filter identity bols))]\n                    (and (> trues 0) (< trues total))))", "user": "53f67bcfe4b0db01ade6f9e1"}, {"problem": 83, "code": "(fn [& x] (if (= (count (distinct x)) 2) true false))", "user": "542d2385e4b0dad94371f2b2"}, {"problem": 83, "code": "#(> (count (set %&)) 1)", "user": "524ad140e4b09eba1c0223a9"}, {"problem": 83, "code": "(fn [& args] (and (contains? (set args) true) (contains? (set args) false)))", "user": "543bce4fe4b032a45b869335"}, {"problem": 83, "code": "(fn [& flags] (and\n                 (reduce #(or %1 %2) false flags)\n                 (not (reduce #(and %1 %2) true flags))))", "user": "53f891eee4b0de5c4184856d"}, {"problem": 83, "code": "(fn [& args] (let [res (filter true? args)]\n               (and (not (= (count res) (count args)))\n                    (not (empty? res)))))", "user": "543c39e0e4b032a45b86933d"}, {"problem": 83, "code": "(fn [& args] \n\t(and (.contains args true) (.contains args false)))", "user": "519f1eaee4b087743fad219c"}, {"problem": 83, "code": "(fn [x & ys]\n\t(if (= (count ys) 0)\n\t\tfalse\n\t\t(if (= true (reduce #(and %1 %2) (cons x ys)))\n\t\t\tfalse\n\t\t\t(reduce #(or %1 %2) (cons x ys)))))", "user": "54296802e4b01498b1a71b38"}, {"problem": 83, "code": "(fn [& args]\n  (and (not-every? false? args) (not (every? true? args)))\n  )", "user": "543d5c61e4b032a45b86934d"}, {"problem": 83, "code": "(fn half-truth [& coll]\n    (let [uniq (set coll)]\n      (cond\n       (= uniq #{false}) false\n       (= uniq #{true})  false\n       :else true)))", "user": "5433a07be4b0b6b47310fce0"}, {"problem": 83, "code": "not=\n\n;; (fn [& args]\n;;   (if (every? true? (seq args))\n;;     false\n;;     (if (some true? (seq args))\n;;       true\n;;        false\n;;       )\n;;     )\n;;   )", "user": "5412646de4b01498b1a719d4"}, {"problem": 83, "code": "(fn [& x]\n  (and (reduce #(or %1 %2) false x) (not (reduce #(and %1 %2) x)))\n  )", "user": "5372c830e4b06d7f452d9dff"}, {"problem": 83, "code": "(fn [& args]\n  (let [true-vals (filter true? args)]\n    (and (not (empty? true-vals))\n         (< (count true-vals) (count args)))))", "user": "53a511aae4b0b62ce3005735"}, {"problem": 83, "code": "(fn sometrue [& xs]\n  (if (every? true? xs) false\n    (if (every? false? xs) false\n      true\n      )\n    )\n  )", "user": "53b685e0e4b047364c0444c7"}, {"problem": 83, "code": "(fn [& args] (let [cnt (reduce + (map #(if % 1 0) args))] (and (< 0 cnt) (< cnt (count args)))))", "user": "53c1b787e4b00fb29b221266"}, {"problem": 83, "code": "not=", "user": "543d07e8e4b032a45b869346"}, {"problem": 83, "code": "(fn [& b] (if (and (some (partial = true) b) (not (every? (partial = true) b))) true false))", "user": "542c2de0e4b0dad94371f29f"}, {"problem": 83, "code": "(fn [& bs] (and (or (some #(= true %) bs) false) (or (some #(not= true %) bs) false)))", "user": "52f8b86de4b047fd55836fdb"}, {"problem": 83, "code": "(fn [& bools]\n  (and \n  \t(contains? (zipmap bools (repeat true)) true)\n    (contains? (zipmap bools (repeat true)) false)))", "user": "54448e84e4b032a45b869393"}, {"problem": 83, "code": "not=", "user": "533a399de4b0e30313ee6cb9"}, {"problem": 83, "code": "not=", "user": "5444f97ee4b032a45b869395"}, {"problem": 83, "code": "(fn [& args] (= (count (distinct args)) 2))", "user": "5441f5e8e4b032a45b869375"}, {"problem": 83, "code": "(fn [& params] (every? true? (list (some true? params) (some false? params))))", "user": "54418311e4b032a45b869370"}, {"problem": 83, "code": "(fn [& bools]\n  (and (reduce #(or %1 %2) bools)\n       (not (reduce #(and %1 %2) bools))))", "user": "53940789e4b0b51d73faaec3"}, {"problem": 83, "code": "(fn f [& args]\n  (let [all-true (reduce #(and %1 %2) args)\n        some-true (reduce #(or %1 %2) args)]\n    (and some-true (not all-true))))", "user": "541168dee4b01498b1a719c3"}, {"problem": 83, "code": "(fn [& args] (boolean (and (not (every? true? args)) (some true? args))))", "user": "530a6cbae4b02e82168697be"}, {"problem": 83, "code": "(fn [& xs]\n  (not\n   (or\n    (nil? (some true? xs))\n    (every? true? xs))))", "user": "5392bfdee4b0b51d73faaeb2"}, {"problem": 83, "code": "(fn [& rest] (if (and (some true? rest) (not-every? true? rest )) true false))", "user": "54458995e4b032a45b86939e"}, {"problem": 83, "code": "(fn [& bools]\n   (if (and (some false? bools)\n            (some true? bools))\n     true false))", "user": "51bd255ce4b0df1216cefd94"}, {"problem": 83, "code": "not=", "user": "54055aa9e4b0addc1aec6665"}, {"problem": 83, "code": "(fn [& args] (cond (every? true? args) false\n                   (every? false? args) false\n                   :else true))", "user": "544b5b8de4b0e39780006963"}, {"problem": 83, "code": "(fn [& args]  (and (if (not= (some false? args) nil) true false) (if (= (some true? args) nil) false true)))", "user": "540997ede4b0addc1aec66dd"}, {"problem": 83, "code": "(fn [& x] \n \t(and \n     (not (every? true? x))\n     (not (every? false? x))\n    )\n)", "user": "54078851e4b0addc1aec66bd"}, {"problem": 83, "code": "(fn half-truth [& s]\n   (= 2 (count (into #{} s))))", "user": "54468fd3e4b032a45b8693b2"}, {"problem": 83, "code": "(fn [& r] (and (contains? (into #{} r) true) (contains? (into #{} r) false)))", "user": "52c45ac8e4b0c2d177d620d9"}, {"problem": 83, "code": "(fn [& coll] (and (not-every? true? coll) (not-every? false? coll)))", "user": "52485723e4b05ef8e38e63d2"}, {"problem": 83, "code": "(fn [& args]\n  (and \n   (not (nil? (some identity args)))\n   (not-every? identity args)))", "user": "54194782e4b01498b1a71a29"}, {"problem": 83, "code": "(fn some-true [& some-args] (= 2 (count (distinct some-args))))", "user": "545188ebe4b0e397800069b2"}, {"problem": 83, "code": "(fn [& bools] (and\n        (contains? (set bools) true)\n        (contains? (set bools) false)))", "user": "542c44f8e4b0dad94371f2a1"}, {"problem": 83, "code": "(fn half-truth\n  [& xs]\n  (let [m (apply #(group-by identity %) (list xs))]\n    (and (> (count (get m true)) 0)\n         (> (count (get m false)) 0))))", "user": "52561295e4b0541d1855ba03"}, {"problem": 83, "code": "(fn [& xs] (if (every? true? xs) false (not (nil? (some true? xs)))))", "user": "544fbabce4b0e39780006999"}, {"problem": 83, "code": "(fn half-truth [& bools]\n  (if (every? true? bools)\n    false\n    (if (some true? bools)\n      true\n      false)))", "user": "544257b4e4b032a45b869379"}, {"problem": 83, "code": "(fn [& z] (= (some true? z) (not-every? true? z)))", "user": "54524afbe4b0e397800069bc"}, {"problem": 83, "code": "(fn [& s] (and (reduce #(or %1 %2) false s)\n             (not (reduce #(and %1 %2) true s))))", "user": "5457e5f1e4b01be26fd74613"}, {"problem": 83, "code": "#(and ((complement every?) true? %&) ((complement every?) false? %&))", "user": "54570d08e4b080a794c2c888"}, {"problem": 83, "code": "(fn [& args] (cond (and (some true? args) (some false? args)) true :else false))", "user": "5233564ae4b0f0b72fabf403"}, {"problem": 83, "code": "(fn my-judge [& r]\n  (true? (and (some true? r) (not (every? true? r)))))", "user": "53b7aa6ce4b047364c0444d1"}, {"problem": 83, "code": "(fn [& boolean-values]\n  (and\n   (true? (some true? boolean-values))\n   (true? (some false? boolean-values))))", "user": "4fdb881ee4b05e33b9224f5e"}, {"problem": 83, "code": "(fn [& coll] (true? (and (some true? coll) (some false? coll))))", "user": "54512df2e4b0e397800069ae"}, {"problem": 83, "code": "(fn [& xs]\n  (cond\n   ; if all false, false\n   (empty? (filter true? xs)) false\n   ; otherwise it's just the inversion of AND\n   :else (not (every? identity xs))\n   )\n)", "user": "5405ae2be4b0addc1aec6671"}, {"problem": 83, "code": "(fn [& x]\n  (> (count (distinct x)) 1))", "user": "54381729e4b032a45b869310"}, {"problem": 83, "code": "(fn [& x] (and (reduce #(or %1 %2) false x) (not (reduce #(and %1 %2) true x))))", "user": "5457767ae4b01be26fd7460c"}, {"problem": 83, "code": "(fn ht [& args] (and (not= (some #(= % true) args) nil) (not (every? #(= % true) args))))", "user": "5414b7c4e4b01498b1a719ed"}, {"problem": 83, "code": "(fn [& col]\n (if (and (seq (filter identity col))\n      (seq (filter not col)))\n     true false))", "user": "54580586e4b01be26fd74616"}, {"problem": 83, "code": "#(= (count (set %&)) 2)\n;;not=", "user": "544cf5d7e4b0e39780006977"}, {"problem": 83, "code": "not=", "user": "545801f6e4b01be26fd74615"}, {"problem": 83, "code": "(fn [& args] (not (or (every? false? args) (every? true? args))))", "user": "5454b84ce4b0e397800069d9"}, {"problem": 83, "code": "(fn [& args] (true? (and (some true? args) (some false? args))))", "user": "544e1794e4b0e39780006980"}, {"problem": 83, "code": "(fn [& cols] (every? identity [(some identity cols) (not (every? identity cols))]))", "user": "5367bc60e4b0243289761e81"}, {"problem": 83, "code": "(fn ht [& args] (boolean (and (some identity args) (not (every? identity args)))))", "user": "5455c2f3e4b080a794c2c87d"}, {"problem": 83, "code": "(fn [& l] (= 2(count (distinct l))))", "user": "52eaba10e4b09f7907dd14c2"}, {"problem": 83, "code": "(fn [& bools]\n  (true? (and (not (every? true? bools)) (some true? bools))))", "user": "534b1930e4b084c2834f4a76"}, {"problem": 83, "code": "(fn half-truth [& s]\n   (and (not (every? true? s)) (not (not-any? true? s))))", "user": "545e9cf1e4b01be26fd7467f"}, {"problem": 83, "code": "(fn [& bs] (= #{true false} (set bs)))", "user": "4f1ef6a0535d64f60314649b"}, {"problem": 83, "code": "(fn half-truth [& more]\n  (and (not (every? true? more)) (not (every? false? more))))", "user": "53b85932e4b047364c0444db"}, {"problem": 83, "code": "(fn half-truth\n  [& bs]\n  (and\n   (reduce #(or %1 %2) bs)\n   (not\n    (reduce #(and %1 %2) bs))))", "user": "526e1bd0e4b03e8d9a4a730b"}, {"problem": 83, "code": "not=", "user": "5461c402e4b01be26fd746a6"}, {"problem": 83, "code": "(fn [& args] (boolean (and (not (every? true? args)) (some true? args))))", "user": "500e6c4ee4b04a05d36fcc05"}, {"problem": 83, "code": "(fn [& bs] (and (not-every? false? bs) (not-every? true? bs)))", "user": "5417bc50e4b01498b1a71a0f"}, {"problem": 83, "code": "#(if (nil? (and (some true? %&) (some false? %&))) false true)", "user": "52e16face4b09f7907dd1421"}, {"problem": 83, "code": "(fn [& bools]\n    (if \n      (and \n       (not-every? true? bools)\n       (some true? bools)) true false))", "user": "544e9022e4b0e3978000698b"}, {"problem": 83, "code": "(fn half-truth [& args] (and (not (every? identity args)) (contains? (set args) true)))", "user": "542c1f73e4b0dad94371f29d"}, {"problem": 83, "code": "not=", "user": "5465712ee4b01be26fd746dc"}, {"problem": 83, "code": "(fn[& args]\n   (let [r (reduce #(if (= %2 true) (inc %1) %1) 0 args)]\n     (and (< r (count args)) (>= r 1) )) )", "user": "54651ef5e4b01be26fd746d5"}, {"problem": 83, "code": "(fn [& bs]\n  (and (true? (some identity bs))\n       (false? (every? identity bs))))", "user": "54651982e4b01be26fd746d4"}, {"problem": 83, "code": "(fn [& bool]\n  (not= nil (and (some true? bool)\n                 (some false? bool))))", "user": "54651faee4b01be26fd746d6"}, {"problem": 83, "code": "(fn [& vals]\n  (and (not (nil? (some true? vals))) (not-every? true? vals)))", "user": "535943b3e4b04ce2eb3ed295"}, {"problem": 83, "code": "(fn -sometrue\n  [& items]\n  (= 2 (count (set items))))", "user": "546113ffe4b01be26fd74699"}, {"problem": 83, "code": "(fn [& coll] (and (apply (some-fn true?) coll) (not-every? true? coll)))", "user": "54485727e4b032a45b8693c6"}, {"problem": 83, "code": "(fn [& vs] (boolean (and (some true? vs) (not (every? true? vs)))))", "user": "52be58d7e4b07a9af579231d"}, {"problem": 83, "code": "(fn [& b] (= (set b) #{true false}))", "user": "53ea5851e4b036ad0777e4e4"}, {"problem": 83, "code": "#(= 2 (count (group-by identity %&)))", "user": "546280d8e4b01be26fd746b0"}, {"problem": 83, "code": "(fn [& xs]\n  (= 2 (count (group-by identity xs))))", "user": "5456e4e7e4b080a794c2c883"}, {"problem": 83, "code": "(fn [& lst] (= (count (distinct lst)) 2) )", "user": "5461873de4b01be26fd746a3"}, {"problem": 83, "code": "(fn [& xs] (= (count (distinct xs)) 2))", "user": "54630cdae4b01be26fd746bb"}, {"problem": 83, "code": "#(and (not (= nil (some true? %&))) (not-every? true? %&))", "user": "5462c5abe4b01be26fd746b5"}, {"problem": 83, "code": "#(= 2 (count (distinct %&)))", "user": "5458a729e4b01be26fd74622"}, {"problem": 83, "code": "not=", "user": "5469ec02e4b00cfc9eacc14d"}, {"problem": 83, "code": "(fn [& args] \n  (true? (and \n          (some true? args) \n          (some false? args))))", "user": "546a6dbbe4b00cfc9eacc156"}, {"problem": 83, "code": "(fn [& more] (=(count (into #{} more)) 2))", "user": "52d84ea7e4b09f7907dd1390"}, {"problem": 83, "code": "(fn [& args] (true? (and (some true? args) (some false? args))))", "user": "546c1b2ce4b00cfc9eacc174"}, {"problem": 83, "code": "(fn [& l]  (= 2 (count (set l))))", "user": "54638c8fe4b01be26fd746c2"}, {"problem": 83, "code": "(fn [& args] (= 2 (count (distinct args))))", "user": "546dd4f6e4b00cfc9eacc194"}, {"problem": 83, "code": "(fn [& coll] (true? (and (some #{true} coll) (some #(when (not %) true) coll))))", "user": "5462ce20e4b01be26fd746b8"}, {"problem": 83, "code": "(fn [& xs]\n(and (not (every? true? xs))\n     (not-every? false? xs)))", "user": "546176e7e4b01be26fd746a2"}, {"problem": 83, "code": "(fn [& args]\n  (if (some true? args)\n    (if (every? true? args)\n      false\n      true)\n    false))", "user": "54084089e4b0addc1aec66c7"}, {"problem": 83, "code": "(fn [& args]\n  (loop [input args\n         true-seen false\n         false-seen false]\n    ;(pprint {:i input :t-s true-seen :f-s false-seen})\n  \t(if (empty? input)\n      (and true-seen false-seen)\n      (let [x (first input)]\n      \t(recur (rest input) \n               (or true-seen (= true x)) \n               (or false-seen (= false x)))))))", "user": "546c4c5fe4b00cfc9eacc178"}, {"problem": 83, "code": "#(< 1 (count (partition-by true? %&)))", "user": "53572176e4b04ce2eb3ed276"}, {"problem": 83, "code": "(fn [& args] (and (apply (some-fn true?) args) (not (every? true? args))))", "user": "543bb568e4b032a45b869334"}, {"problem": 83, "code": "(fn [& x]\n         (let [c (count (filter #(= % true) x))]\n           (if (or (= c (count x)) (= c 0))\n             false\n             true\n           )\n         )\n        )", "user": "52149e21e4b0961f15ac4d94"}, {"problem": 83, "code": "(fn [& v]\n  (and (not-every? true? v) (not-every? false? v)))", "user": "544e8369e4b0e39780006987"}, {"problem": 83, "code": "(fn [& ls]\n\n      (not \n        (or \n      (= (count (filter true? ls)) (count ls)) \n      (= (count (filter false? ls)) (count ls)) )))", "user": "53bd7080e4b0d9a98559a6d1"}, {"problem": 83, "code": "(fn [& args]\n  (if-let [result (and (some #(= % true) args)\n                       (not (every? #(= % true) args)))]\n    true\n    false))", "user": "5245aea8e4b08ba239308123"}, {"problem": 83, "code": "(fn [& args]\n  (boolean (and (some true? args) (not-every? true? args))))", "user": "52540bcce4b0541d1855b952"}, {"problem": 83, "code": "(fn [& xs] (true? (and (some (partial = true) xs) (some (partial = false) xs))))", "user": "547584d9e4b0c51c1f4d729b"}, {"problem": 83, "code": "(fn [& args] \n  (cond\n   (= (count args) 1) false\n   (every? (partial = true) args) false\n   :else (or (some true? args) false)\n   ))", "user": "546d41bde4b00cfc9eacc18c"}, {"problem": 83, "code": "(fn [& xs] \n    ((every-pred #(not (every? % xs))) true? false?))\n\n;#((every-pred\n;   (fn [p] (not (every? p %&))))\n;  true? false?)\n\n;#(and (not (every? true? %&)) (not (every? false? %&)))", "user": "545cfbb0e4b01be26fd74669"}, {"problem": 83, "code": "(fn [& bools]\n  (cond\n   (every? true? bools) false\n   (some true? bools) true\n   :else false))", "user": "529a3c37e4b02ebb4ef75094"}, {"problem": 83, "code": "(fn [& more] (and (> (count (filter true? more)) 0) (not= (count (filter true? more)) (count more))))", "user": "54696e4ce4b00cfc9eacc147"}, {"problem": 83, "code": "(fn [& args]\n  (and (not-every? true? args) (not-every? false? args)))", "user": "53703287e4b0fc7073fd6e8f"}, {"problem": 83, "code": "not=", "user": "5478c4fee4b0c51c1f4d72c0"}, {"problem": 83, "code": "(fn [& args] (boolean (and (some true? args) (not (every? true? args)))))", "user": "5479c58de4b0c51c1f4d72c7"}, {"problem": 83, "code": "(fn [& a] (and(not (every? true? a))(not (every? false? a))))", "user": "545d5c3be4b01be26fd7466d"}, {"problem": 83, "code": "(fn [& vars] (not (not (and (some false? vars) (some true? vars)))))", "user": "5471f090e4b094393f72dd6e"}, {"problem": 83, "code": "(fn [& a]\n  (true? (and (some true? a)\n       \t\t  (some false? a))))", "user": "546e4ab8e4b00cfc9eacc19c"}, {"problem": 83, "code": "(fn [& args]\n    (and\n      (true? (some identity args))\n      (not-every? identity args))\n    )", "user": "53613db8e4b0243289761e41"}, {"problem": 83, "code": "(fn [& args] \n   (let [l (count (filter true? args))] \n     (not (or (= l 0) (= l (count args))))\n   )\n )", "user": "545537c1e4b0e397800069dd"}, {"problem": 83, "code": "(fn [& more]\n  (let [expr (and (some true? more) (some false? more))]\n    (true? expr)))", "user": "545f737ce4b01be26fd74688"}, {"problem": 83, "code": "(fn [& bs] (or (and (some identity bs) (some not bs)) false))", "user": "547d8e93e4b0c51c1f4d72f4"}, {"problem": 83, "code": "not=", "user": "547adcb0e4b0c51c1f4d72cf"}, {"problem": 83, "code": "(fn [& args]\n  (or (and (not (every? #(= true %) args)) (some #(= true %) args)) false))", "user": "5472cba1e4b094393f72dd7a"}, {"problem": 83, "code": "(fn [& l] (clojure.set/subset? #{true false} (set l)))", "user": "52b9cfb9e4b07a9af57922c5"}, {"problem": 83, "code": "(fn [& bs]\n  (let [x (count (filter identity bs))]\n    (and (> x 0) (< x (count bs)))))", "user": "547ad587e4b0c51c1f4d72ce"}, {"problem": 83, "code": "#(and (not (nil? (some identity %&))) (not-every? identity %&))", "user": "5470699ae4b00cfc9eacc1b6"}, {"problem": 83, "code": "(fn [& more]\n\t(\n\t\t(fn [l](\n\t\t\tnot= (first l) (last l)\n\t\t)) (sort more)\n\t)\n)", "user": "548018dbe4b0c51c1f4d732a"}, {"problem": 83, "code": "not=", "user": "548018cde4b0c51c1f4d7325"}, {"problem": 83, "code": "#(boolean (and (some identity %&) (some not %&)))", "user": "547d66a1e4b0c51c1f4d72f2"}, {"problem": 83, "code": "(fn [& bools]\n  (boolean (and (not-every? true? bools) (some true? bools))))", "user": "5478e57de4b0c51c1f4d72c1"}, {"problem": 83, "code": "(fn [& c] (not (nil? (and (some true? c) (some false? c)))))", "user": "54357066e4b0b6b47310fcfd"}, {"problem": 83, "code": "#(and (not-every? identity %&) (not-every? not %&))", "user": "5463fbbde4b01be26fd746ca"}, {"problem": 83, "code": "not=", "user": "54577fefe4b01be26fd7460d"}, {"problem": 83, "code": "not=", "user": "541f5b37e4b01498b1a71a97"}, {"problem": 83, "code": "(fn [& xs]\n  (and\n   (if (some true? xs) true false)\n   (if (every? true? xs) false true)))", "user": "5032748ae4b0e78df07b092f"}, {"problem": 83, "code": "(fn ff [& args] (not (or (empty? (filter identity args)) (empty? (filter not args)))))", "user": "5466199ce4b01be26fd746e2"}, {"problem": 83, "code": "(fn [& values]\n  (let [num-false (count (filter false? values))\n        num-true (count (filter true? values))]\n    (and (not= num-false 0) (not= num-true 0))))", "user": "5483d59fe4b0e286459a1194"}, {"problem": 83, "code": "#(if (= (count (distinct %&)) 2) true false)", "user": "54852ad0e4b0e286459a11a7"}, {"problem": 83, "code": "not=", "user": "5464a536e4b01be26fd746cf"}, {"problem": 83, "code": "(fn [& coll] (= 2 (count (distinct coll))))", "user": "540e8d13e4b0addc1aec671e"}, {"problem": 83, "code": "#(if (and (some true? %&)\n          (not-every? true? %&))\n   true\n   false)", "user": "54848141e4b0e286459a119e"}, {"problem": 83, "code": "(fn [ & b ]\n  (not (or (not-any? true? b) (not-any? false? b))))", "user": "513facf5e4b00f13ea1bd892"}, {"problem": 83, "code": "(fn [& data]\n    (not (nil? (and (some #(true? %) data) (some #(false? %) data)))))", "user": "54856d54e4b0e286459a11aa"}, {"problem": 83, "code": "(fn [& bools] (and (not (every? true? bools)) (not (nil? (some true? bools)))))", "user": "545944a2e4b01be26fd74627"}, {"problem": 83, "code": "(fn f [& vals]\n  (true?\n    (and (some #(= % true) vals)\n        (some #(= % false) vals))))", "user": "547e3846e4b0c51c1f4d7302"}, {"problem": 83, "code": "(fn [& bools]\n    (true? (and (some #(= true %) bools)\n                (some #(= false %) bools))))", "user": "54508859e4b0e397800069a3"}, {"problem": 83, "code": "(fn [& bools] (not (nil? (and (some true? bools) (some false? bools)))))", "user": "528c381ce4b0239c8a67aeb2"}, {"problem": 83, "code": "#(= (count (into #{} %&)) 2)", "user": "5472d919e4b094393f72dd7b"}, {"problem": 83, "code": "(fn [& more]\n  (cond\n   (every? true? more) false\n   (some true? more) true\n   :else false))", "user": "5486adf7e4b0e286459a11be"}, {"problem": 83, "code": "(fn [& rest]\n  (true? (and (some true? rest) (some false? rest))))", "user": "547fbe01e4b0c51c1f4d7321"}, {"problem": 83, "code": "#(true? \n  (and\n    (some true? %&)\n    (some false? %&)))", "user": "543823f1e4b032a45b869311"}, {"problem": 83, "code": "(fn [& bools]\n   (true? (and (some true? bools) (some false? bools))))", "user": "546c1f73e4b00cfc9eacc175"}, {"problem": 83, "code": "(fn [& args]\n  (let [c (count args)\n        f (count (filter #(identity %) args))]\n    (and (> f 0) (< f c))))", "user": "4e526cc4535d302ef430da74"}, {"problem": 83, "code": "(fn [& preds]\n  (and (not-every? true? preds)\n       (not-every? false? preds)))", "user": "5188c249e4b0bdff0e072d54"}, {"problem": 83, "code": "#(= 2 (count (into #{} %&)))", "user": "54899701e4b0e286459a11ea"}, {"problem": 83, "code": "(fn [& xs] (true?  (and (some true? xs) (not (every? true? xs)))))", "user": "548cd813e4b0e286459a1211"}, {"problem": 83, "code": "(fn [& bools]\n          (if (and (some #(not (true? %)) bools)\n                   (some true? bools)) true false))", "user": "4f47d84fe4b0d56e7bb92bc3"}, {"problem": 83, "code": "#(true?\n(and\n(some true? %&)\n(some false? %&)))", "user": "513f86dde4b00f13ea1bd88d"}, {"problem": 83, "code": "(fn halftruth [& x]\n   (not (or (every? true? x) (every? false? x))))", "user": "53b12c76e4b047364c04448a"}, {"problem": 83, "code": "(fn  [& bools]\n    (if-let  [bs  (seq bools)]\n          (not (or  (empty?  (filter not bs)) (not (some identity bs))))\n          false))", "user": "5488872ee4b0e286459a11d3"}, {"problem": 83, "code": "(fn [& bools]\n  (= (set bools) #{true false}))", "user": "51c611c4e4b03a28d42333bf"}, {"problem": 83, "code": "(fn [& rest] (let [[tr fl] (reduce (fn [[any-true any-false] curr] \n            (if curr [true any-false]\n                     [any-true true])) [false false] rest)] (and tr fl)))", "user": "548f5086e4b0e286459a1239"}, {"problem": 83, "code": "(fn [& a]\n  (= (set a) #{true false}))", "user": "50f3bd98e4b041536e2eca3a"}, {"problem": 83, "code": "(fn [& booleans]\n  (and (not (empty? (filter false? booleans))) \n       (not (nil? (some true? (into '() booleans))))))", "user": "4fbfbd4fe4b081705acca31c"}, {"problem": 83, "code": "(fn [& args]\n  (let [u (set args)]\n    (if (= 1 (count u)) false true)))", "user": "534e60c2e4b084c2834f4ab2"}, {"problem": 83, "code": "#(> (count (set %&)) 1)", "user": "53bcdd41e4b0d9a98559a6c0"}, {"problem": 83, "code": "(fn  [& in]\n  (true? (and (some (fn [a] a) in) (some #(not %1) in))))", "user": "54903056e4b0b312c081ff2e"}, {"problem": 83, "code": "(fn [& pred] (let [true-count (count (filter #(= true %1) pred))\n                                     len (count pred)]\n                                     (and (< 0 true-count) (not= true-count len))))", "user": "51d26b0ae4b0d13b04db0d97"}, {"problem": 83, "code": "not=", "user": "542c026ae4b0dad94371f29a"}, {"problem": 83, "code": "(fn [& args]\n  (= #{true false} (set args)))", "user": "548f37c7e4b0e286459a1234"}, {"problem": 83, "code": "#(if (and (some identity %&) (not (every? identity %&)))\n    true\n    false)", "user": "5455510fe4b0e397800069df"}, {"problem": 83, "code": "not=", "user": "53e3f7a8e4b036ad0777e408"}, {"problem": 83, "code": "(fn [& bools] (and (not (nil? (some identity bools))) (not-every? identity bools)))", "user": "54965534e4b0b312c081ff65"}, {"problem": 83, "code": "#(if (and \n  (some true? %&) \n  (some false? %&) \n) true false )", "user": "54897284e4b0e286459a11e6"}, {"problem": 83, "code": "(fn ht [& args] (and (reduce #(or %1 %2) args) (not (reduce #(and %1 %2) args))))", "user": "535f9a5ce4b04ce2eb3ed2de"}, {"problem": 83, "code": "(fn [& h] (= (count(set h)) 2 ))", "user": "549375e4e4b0b312c081ff4e"}, {"problem": 83, "code": "(fn [& xs] (not (nil?(and (some #(= true %) xs) (some #(= false %) xs)))))", "user": "5485b402e4b0e286459a11b0"}, {"problem": 83, "code": "#(true?\n(and\n(some true? %&)\n(some false? %&)))", "user": "54975e99e4b0b312c081ff72"}, {"problem": 83, "code": "(fn [& bools]\n  (boolean (and (some true? bools) (not-every? true? bools))))", "user": "53576356e4b04ce2eb3ed27a"}, {"problem": 83, "code": "(fn [& booleans]\n  (and \n   (reduce (fn [accumulator elem] (or accumulator elem)) false booleans)\n   (not (reduce (fn [accumulator elem] (and accumulator elem)) true booleans))))", "user": "549aa638e4b0f3d1d8e70f70"}, {"problem": 83, "code": "(fn [ini & val] (not (empty? (filter #(not= ini %) val))))", "user": "52457931e4b08ba239308107"}, {"problem": 83, "code": "(fn [& bs] (and (not-every? false? bs) (not-every? true? bs)))", "user": "536e5b68e4b0fc7073fd6e6d"}, {"problem": 83, "code": "(fn p83 [& coll]\n  (let [cs (into #{} coll)] (and (contains? cs true) (contains? cs false)))\n  )", "user": "543b12cce4b032a45b86932a"}, {"problem": 83, "code": "(fn not-all\n  [& b]\n  (if (every? identity b)\n    false\n    (if-not (some identity b)\n      false\n      true)))", "user": "549eb44fe4b0f3d1d8e70fa6"}, {"problem": 83, "code": "(fn [& items]\n  (cond (every? true? items) false\n        (every? false? items) false\n        :else true))", "user": "5385e633e4b06839e8705f08"}, {"problem": 83, "code": "#(= #{true false} (into #{} %&))", "user": "549c22f7e4b0f3d1d8e70f86"}, {"problem": 83, "code": "(fn [& xs] (let [ts (filter true? xs)] (and (> (count ts) 0) (not (= xs ts)))))", "user": "549def9ce4b0f3d1d8e70f99"}, {"problem": 83, "code": "(fn [& args] \n  (if (and (some #(= true %) args)\n           (some #(= false %) args))\n    true\n    false))", "user": "5470cb10e4b094393f72dd65"}, {"problem": 83, "code": "(fn [& args]\n  (and (not-every? true? args)\n       (not (nil? (some true? args)))))", "user": "549c1713e4b0f3d1d8e70f82"}, {"problem": 83, "code": "not=", "user": "54857e3be4b0e286459a11ad"}, {"problem": 83, "code": "(fn half-truth [& vals]\n  (and\n   (not (not-any? false? vals))\n   (not (not-any? true? vals))))", "user": "4e7e241a535db169f9c79705"}, {"problem": 83, "code": "(fn [& args] ((complement nil?) (and (some true? args) (some false? args))))", "user": "54769c7ae4b0c51c1f4d72a8"}, {"problem": 83, "code": "(fn [& facts] \n  (if (and (some true? facts) (some false? facts))\n    true\n    false))", "user": "5325cef5e4b09d4e7a9b54e7"}, {"problem": 83, "code": "(fn eh [& x]\n  (let [lst (filter #(= true %) x)]\n    (cond\n     (= (count lst) (count x)) false\n     (= (count lst) 0) false\n     :else true)))", "user": "549c8bbde4b0f3d1d8e70f8c"}, {"problem": 83, "code": "(fn [& bools] (and (not-every? true? bools) (not-every? false? bools) ))", "user": "512b07f7e4b078b06821febb"}, {"problem": 83, "code": "(fn [& args]\n  (apply not= args))", "user": "548fa2dfe4b0e286459a1240"}, {"problem": 83, "code": "(fn [& x] (= 2 (count (into #{} x))))", "user": "53fe1b42e4b0de5c418485f1"}, {"problem": 83, "code": "(fn [& args]\n  (let [any? (comp boolean some)]\n    (and\n     (any? boolean args)\n     (any? not args))))", "user": "549c3e0ce4b0f3d1d8e70f87"}, {"problem": 83, "code": "(fn [& args] (not (nil? (and (some true? args) (some false? args)))))", "user": "5471f2fbe4b094393f72dd70"}, {"problem": 83, "code": "(fn half-truth [& args]\n  (and (not (not-any? true? args)) (not-every? true? args)))", "user": "52b9e920e4b07a9af57922c9"}, {"problem": 83, "code": ";Before I found the every? and false? forms (or & and are macros - bleh)\n;(fn [& vals] \n;  (and \n;   \t(reduce (fn [x y] (or x y)) vals)\n;    (not\n;     \t(reduce (fn [x y] (and x y)) vals)\n;    ) \n;  )\n;)\n\n;(fn [& vals] \n;  (and \n;   \t(not-every? false? vals)\n;    (not-every? true? vals)\n;  )\n;)\n\n(fn [& vals] \n  (and \n   \t(not-every? false? vals)\n    (not-every? true? vals)\n  )\n)", "user": "53029281e4b0d8b024fd372e"}, {"problem": 83, "code": "not=", "user": "54a677a9e4b09f271ff37c88"}, {"problem": 83, "code": "(fn [& x] (and (reduce #(or % %2) false x) (not (reduce #(and % %2) true x)) ) )", "user": "54a1d643e4b09f271ff37c50"}, {"problem": 83, "code": "(fn [& r] \n  (let [[t f] (partition-by true? r)]\n  \t (and (not (empty? t)) (not (empty? f)))))", "user": "5499e23de4b03163384f4706"}, {"problem": 83, "code": "(fn [& args]                                                                                                                                                                                             \n  (not (every? #(= (first args) %) args)))", "user": "53403f42e4b085b17e897da8"}, {"problem": 83, "code": "(fn [& args] (and (not-every? true? args) (let [x (some true? args)] (if (nil? x) false x))))", "user": "54a7d707e4b09f271ff37c9b"}, {"problem": 83, "code": "(fn f [& x] (if (= 2 (count (distinct x))) true false))", "user": "54a7efdee4b09f271ff37c9d"}, {"problem": 83, "code": "(fn fc83 [& args]\n  (cond\n    (reduce (fn [x y] (and x y)) args) false\n;    (= 1 (count args)) (first args)\n    :else (reduce (fn [x y] (or x y)) args)))", "user": "547884d7e4b0c51c1f4d72bd"}, {"problem": 83, "code": "#(boolean\n  (and (not (every? identity %&))\n       (some identity %&)))", "user": "53dfdf01e4b0d874e779ae46"}, {"problem": 83, "code": "(fn has-at-least-one-false [& vs] ;; takes a collection of booleans\n  (loop [[b & rbs :as bs] vs\n         ts []\n         fs []]\n    (if (empty? bs)\n      (and (> (count ts) 0) (> (count fs) 0))\n      (if (= b false)\n        (recur rbs ts (conj fs b))\n        (recur rbs (conj ts b) fs)))))", "user": "54a31fdae4b09f271ff37c64"}, {"problem": 83, "code": "(fn [& bs]\n (let [f #(if (true? %) true false)]\n  (f\n   (and\n    (some true? bs)\n    (not\n     (every? true? bs))))))", "user": "549a999be4b0f3d1d8e70f6f"}, {"problem": 83, "code": "(fn half-truth [& args]\n  (if (or (every? false? args) (every? true? args))\n    false\n    true\n  )\n)", "user": "54982522e4b0b312c081ff7c"}, {"problem": 83, "code": "#(= #{true false} (into #{} %&))", "user": "4fabbd3ee4b081705acca21e"}, {"problem": 83, "code": "(fn [& coll] \n  (true? (and (some true? coll) (some false? coll))))", "user": "54908cc1e4b0b312c081ff32"}, {"problem": 83, "code": "not=", "user": "54ab6773e4b09f271ff37cc8"}, {"problem": 83, "code": "not=", "user": "50ec69e0e4b04edc3377704a"}, {"problem": 83, "code": "#(if (and (some true? %&) (not (every? true? %&)))\n    true false)", "user": "52e12ac5e4b09f7907dd141a"}, {"problem": 83, "code": "(fn [& xs]\n  (not (or\n        (every? false? xs)\n        (every? true? xs))))", "user": "549dd591e4b0f3d1d8e70f98"}, {"problem": 83, "code": "(fn [& bools]\n    (= true (and (some true? bools)\n                 (some false? bools))))", "user": "543d89dfe4b032a45b869350"}, {"problem": 83, "code": "not=", "user": "54b13dbce4b09f271ff37d1c"}, {"problem": 83, "code": "#(or (and (some true? %&) (not (every? true? %&))) false)", "user": "54b13a40e4b09f271ff37d1b"}, {"problem": 83, "code": "#(not (apply = %&))", "user": "54ae541ae4b09f271ff37cef"}, {"problem": 83, "code": "#(->> %& (into #{}) count (= 2))", "user": "54af6fb0e4b09f271ff37d08"}, {"problem": 83, "code": "(fn [& args] (and (not (every? true? args)) (not (every? false? args))))", "user": "54ab46fee4b09f271ff37cc3"}, {"problem": 83, "code": "(fn [& xs] (if (and (some true? xs) (some false? xs)) true false))", "user": "549a176ce4b0f3d1d8e70f69"}, {"problem": 83, "code": "not=", "user": "53e88247e4b036ad0777e489"}, {"problem": 83, "code": "(fn [& xs]\n  (and \n    (reduce #(or % %2) false xs) \n\t(not (reduce #(and % %2) true xs))))", "user": "54ab502fe4b09f271ff37cc4"}, {"problem": 83, "code": "(fn [& seq] (and (not (every? false? seq)) (not-every? true? seq)))", "user": "53e3e353e4b036ad0777e406"}, {"problem": 83, "code": "(fn [& bools]\n  (if (and (some true? bools)\n           (some false? bools))\n    true\n    false))", "user": "5484143de4b0e286459a1197"}, {"problem": 83, "code": "(fn [& vars]\n\t(cond\n     (every? true? vars) false\n     (some true? vars) true\n     :else false\n     ))", "user": "52cee992e4b07d0d72b27395"}, {"problem": 83, "code": "(fn [& args]\n  (and (not (= nil (some #{true} args))) (contains? (set args) false)))", "user": "54b2ec84e4b09f271ff37d33"}, {"problem": 83, "code": "#(and (not-every? true? %&) (not-every? false? %&))", "user": "5488537be4b0e286459a11cf"}, {"problem": 83, "code": "(fn [& xs] (not (or (every? identity xs)\n                    (every? not xs))))", "user": "54b448f2e4b05787c3b1638e"}, {"problem": 83, "code": "(fn [& args] (= #{true false} (set args)))", "user": "5463c824e4b01be26fd746c5"}, {"problem": 83, "code": "#(= 2 (count (distinct %&)))", "user": "52a267c6e4b04e0c58e87bef"}, {"problem": 83, "code": "(fn [& coll]\n  (and\n   (not-every? (fn [x] (= x false)) coll)\n   (not-every? (fn [x] (= x true)) coll)))", "user": "532902f8e4b09d4e7a9b550e"}, {"problem": 83, "code": "(fn [& bs] (= 2 (count (set bs))))", "user": "50b42cbbe4b001349b2f4abe"}, {"problem": 83, "code": "#(not (or\n        (every? false? %&)\n        (every? true? %&)))", "user": "54acf5c7e4b09f271ff37cdd"}, {"problem": 83, "code": "(fn [& more] (if (and (some #{true} more) (not-every? #{true} more)) true false))", "user": "54bad522e4b0ed20f4ff6eb8"}, {"problem": 83, "code": "(fn [& rst]\n  (and (true? (some true? rst)) (not-every? true? rst)))", "user": "54bc539be4b0ed20f4ff6eca"}, {"problem": 83, "code": "(fn halftrue [& bs]\n     (let [bsv (into #{} bs)]\n       (and\n        (contains? bsv true)\n        (contains? bsv false))))", "user": "52c58561e4b0c2d177d620f8"}, {"problem": 83, "code": "#(true?(and(some false? %&)(some true? %&)))", "user": "5481be5fe4b0e286459a1172"}, {"problem": 83, "code": "(fn [& args] (true? (and (some true? args) ((complement every?) true? args))))", "user": "54b6c24be4b0ed20f4ff6e7c"}, {"problem": 83, "code": "(fn [& s] (= true (and (some true? s) (not (every? true? s)))))", "user": "54bd04e7e4b0ed20f4ff6ed8"}, {"problem": 83, "code": "(fn [& r] (and (not (every? true? r)) (not (nil? (some true? r)))))", "user": "54bec835e4b0ed20f4ff6ef7"}, {"problem": 83, "code": "(fn [& bools]\n  (clojure.set/subset? #{false true} (set bools)))", "user": "5317d78ee4b08068f379ed63"}, {"problem": 83, "code": "(fn [& bools]\n  (loop [has-true false,\n         has-false false,\n         bools bools]\n    (if bools\n      (recur \n        (or has-true (first bools))\n \t\t(or has-false (not (first bools)))\n        (next bools))\n      (and has-true has-false))))", "user": "54bd91d7e4b0ed20f4ff6ee2"}, {"problem": 83, "code": "#(true? (and (some true? %&) (some false? %&)))", "user": "54a73c1fe4b09f271ff37c96"}, {"problem": 83, "code": "(fn [& args]\n  (if (and (some true? args) (not (every? true? args))) \n  true false))", "user": "54b95f3de4b0ed20f4ff6eab"}, {"problem": 83, "code": "(fn [& x]\n  (if (and (some true? x) (some false? x)) true false))", "user": "5318594ee4b08068f379ed6d"}, {"problem": 83, "code": "not=", "user": "54b90836e4b0ed20f4ff6e9d"}, {"problem": 83, "code": "(fn [& lst] (and (not (every? false? lst)) (not (every? true? lst)) ))", "user": "54c169ade4b0ed20f4ff6f24"}, {"problem": 83, "code": "(fn [& args] (boolean (and (some identity args)\n                  (not-every? identity args))))", "user": "54be7772e4b0ed20f4ff6eea"}, {"problem": 83, "code": "#(< 1 (count (distinct %&)))", "user": "53ff602fe4b0de5c418485ff"}, {"problem": 83, "code": "(fn [& coll]\n  (and (not-every? false? coll) (not-every? true? coll)))", "user": "4e435681535dc968683fc4a1"}, {"problem": 83, "code": "(fn [& b] (if-let [s (seq (filter true? b))] (not= (count s) (count b)) false))", "user": "510fe537e4b04c71fce993dd"}, {"problem": 83, "code": "(fn [& args]\n  (= 2 (count (apply sorted-set args))))", "user": "54b10d08e4b09f271ff37d18"}, {"problem": 83, "code": "(fn xor [& args]\n  (not (or (every? true? args) (every? false? args))))", "user": "54bd3aefe4b0ed20f4ff6edb"}, {"problem": 83, "code": "(fn [& args] \n   (let [num-true (apply + (map #(if % 1 0) args))]\n     (true? (and (> num-true 0) (< num-true (count args))))))", "user": "5235493ee4b05e80434a5064"}, {"problem": 83, "code": "(fn [& vs] (true? (and (some false? vs) (some true? vs))))", "user": "54bc575ce4b0ed20f4ff6ecb"}, {"problem": 83, "code": "(fn [ & b]\n  (let [oor (fn [l] (if (empty? l) false (if (first l) true (recur (rest l)) ) ) )\n  \t\taand (fn [l] (if (empty? l) true (if (not (first l)) false (recur (rest l)) ) ) )]\n  \t(and (oor b) (not (aand b)))\n    )\n  )", "user": "54c271b9e4b045293a27f602"}, {"problem": 83, "code": "(fn [& coll] \n    (true?\n      (and \n        (some true? coll)\n        (not (every? true? coll)))))", "user": "5493d908e4b0b312c081ff52"}, {"problem": 83, "code": "(fn [& coll] \n  (and (reduce #(or %1 %2) coll) (not-every? true? coll)))", "user": "546692aee4b01be26fd746e7"}, {"problem": 83, "code": "(fn [& args] (and (not (every? true? args)) (not (every? false? args))))", "user": "54c611d1e4b045293a27f627"}, {"problem": 83, "code": "(fn [& args]\n  (cond\n    (every? #(= % true) args) false\n    (some #(= % true) args) true\n    :else false))", "user": "54c8d4a8e4b045293a27f654"}, {"problem": 83, "code": "( fn [& args] (true? (and (not (every? identity args)) (some identity args))))", "user": "525b142fe4b0cb4875a45d05"}, {"problem": 83, "code": "#(if (and (not-every? true? %&)\n          (some true? %&)) true false)", "user": "535774c2e4b04ce2eb3ed27c"}, {"problem": 83, "code": "(fn foo [ fst & bc]\n\t(let [fbc (apply vector fst bc)]\n\t(and\n\t\t(not\n\t\t\t(= (count fbc)\n\t\t\t(count (filter #(= true %1) fbc))))\n\t\t(true? (some #(= %1 true) fbc)))))", "user": "51e8ee6be4b07cae92c04bfd"}, {"problem": 83, "code": "(fn [& bools]\n  (and (not (empty? (filter true? bools))) (not (empty? (filter false? bools)))))", "user": "5280539ce4b0757a1b1713f3"}, {"problem": 83, "code": "(fn [& args]\n  (if (= 2 (count (set args)))\n    true\n    false))", "user": "53bc10f5e4b047364c04450d"}, {"problem": 83, "code": "#(true? (and (some false? %&) (some true? %&)))", "user": "54c9636fe4b045293a27f66e"}, {"problem": 83, "code": "(fn [& args]\n    (not\n     (or\n      (every? identity args)\n      (not-any? identity args))))", "user": "4f42c80ae4b0d7d3c9f3fd0f"}, {"problem": 83, "code": "not=", "user": "54b7f217e4b0ed20f4ff6e8f"}, {"problem": 83, "code": "not=", "user": "53f11139e4b0742d9025b0d8"}, {"problem": 83, "code": "(fn [& lst] (and (not= (count lst) 1)\n              \t (not (reduce #(and % %2) lst))\n                 (reduce #(or % %2) lst)))", "user": "4f69e5ece4b07046d9f4ef8f"}, {"problem": 83, "code": "(fn [& args]\n  (if\n    (and\n     (some true? args)\n     (not-every? true? args))\n    true\n    false))", "user": "54c13b87e4b0ed20f4ff6f20"}, {"problem": 83, "code": ";(fn [& coll] \n; (and\n;  (not-every? true? coll)\n;  (boolean (some true? coll))))\nnot=", "user": "54ca9ca8e4b057c6fda3a265"}, {"problem": 83, "code": "(fn half-truth [& sq]\n  (and\n    (> (count (filter identity sq)) 0)\n  \t(> (count (filter (complement identity) sq)) 0)\n))", "user": "54bbe505e4b0ed20f4ff6ec5"}, {"problem": 83, "code": "#(if (every? true? %&) false (if (some identity %&) true false ))", "user": "54aa665fe4b09f271ff37cb8"}, {"problem": 83, "code": "#(apply not= %&)", "user": "54cbb0fde4b057c6fda3a27b"}, {"problem": 83, "code": "(fn [& xs] (= #{true false} (into #{} xs)))", "user": "54c641f8e4b045293a27f628"}, {"problem": 83, "code": "(fn [& xs]\n   (boolean\n    (and\n     (some true? xs)\n     (not (every? true? xs)))))", "user": "4fec08e8e4b0681fd128dc9d"}, {"problem": 83, "code": "#(if (or (every? true? %&) (every? false? %&)) false true)", "user": "54543484e4b0e397800069d4"}, {"problem": 83, "code": "(fn [& args]\n  (Boolean. (and (some true? args) (not (every? true? args)))))", "user": "541b1f25e4b01498b1a71a63"}, {"problem": 83, "code": "(fn [ & bool_seq ]\n  (let [true_count    (count (filter true?  bool_seq))\n        false_count   (count (filter false? bool_seq))]        \n        (if (and (not= 0 true_count) (not= 0 false_count)) true false )))", "user": "530d1060e4b08068f379eca2"}, {"problem": 83, "code": "(fn [& xs] (and (reduce #(or %1 %2) false xs)\n                (not (apply = xs))))", "user": "4ea03f70535d7eef308072a1"}, {"problem": 83, "code": "(fn [& xs] (and (not (every? true? xs)) (or (some true? xs) false)))", "user": "54d03026e4b018d918be98de"}, {"problem": 83, "code": "(fn f[& a]\n  (and (not (nil? (some true? a)))\n       (not (nil? (some false? a)))))", "user": "54ce3790e4b057c6fda3a2ab"}, {"problem": 83, "code": "(fn [& bools] (not= 1 (count (distinct bools))))", "user": "536046a9e4b063bf7a5f8fe1"}, {"problem": 83, "code": "(fn [& args] (= 2 (count (distinct args))))", "user": "54246d6de4b01498b1a71aec"}, {"problem": 83, "code": "(fn [& b] (and (not (reduce #(and %1 %2) b)) (reduce #(or %1 %2) b)))", "user": "53c349f5e4b00fb29b22127a"}, {"problem": 83, "code": "not=", "user": "54bebeb9e4b0ed20f4ff6ef4"}, {"problem": 83, "code": "(fn [bool & more]\n   (let [bool-list (conj more bool)]\n     (cond (and\n            (not-every? #{true} bool-list)\n            (some #{true} bool-list))\n           true\n           :else false)))", "user": "505d1b01e4b0e6aca564be04"}, {"problem": 83, "code": "(fn [& xs]\n  (if (and (not (every? true? xs))\n           (some true? xs))\n    true\n    false))", "user": "542d5fa9e4b0dad94371f2b5"}, {"problem": 83, "code": "(fn [& bs] (and (reduce #(or % %2) bs) (not (reduce #(and % %2) bs))))", "user": "4fc4eb1ee4b081705acca354"}, {"problem": 83, "code": "(fn [& xs] (< 0 (count (filter true? xs)) (count xs)))", "user": "53d64811e4b0e771c3025456"}, {"problem": 83, "code": "(fn [& c] (and ((comp boolean some) true? c) (not-every? true? c)))", "user": "4e3ff3a4535dc968683fc499"}, {"problem": 83, "code": "(fn [& x] (let [some-true (some true? x)\n                some-false (some false? x)]\n             (true? (and some-true some-false))))", "user": "549a1fede4b0f3d1d8e70f6a"}, {"problem": 83, "code": "(fn [& args]\n         (or (and (some true? args)\n                  (not (every? true? args)))\n             false))", "user": "54c23252e4b045293a27f5fc"}, {"problem": 83, "code": "(fn [& xs]\n  (and\n   (not-every? true? xs)\n   (not-every? false? xs)))", "user": "54b07c1ee4b09f271ff37d16"}, {"problem": 83, "code": "#(and\n  (true? (some identity %&))\n  (not (every? identity %&)))\n\n; more concise answer: not=", "user": "54cc26c1e4b057c6fda3a28a"}, {"problem": 83, "code": "(fn [& truths]\n  (if (or (every? true? truths) (not-any? true? truths))\n    false\n    true))", "user": "54d80751e4b0a52adc2e2035"}, {"problem": 83, "code": "(fn [& x] (boolean (and (some true? x) (some false? x))))", "user": "54d2b411e4b0e8a36923e5f9"}, {"problem": 83, "code": "(fn [ & bools ]\n  (and \n    (boolean (some identity bools))\n    (not-every? identity bools)))", "user": "54d6f22de4b0a52adc2e2023"}, {"problem": 83, "code": "(fn [& ps]\n  (let [a (reduce #(conj % %2) #{} ps)]\n    (= (count a) 2)))", "user": "54d89deae4b0a52adc2e203a"}, {"problem": 83, "code": "(fn [& bools] \n  (and (not (every? identity bools)) \n       (not (nil? (some identity bools)))))", "user": "541d3c0fe4b01498b1a71a7e"}, {"problem": 83, "code": "(fn [& x] (and (not-every? true? x) (not-every? false? x)))", "user": "54d70f40e4b0a52adc2e2027"}, {"problem": 83, "code": "#(true? (and (some true? %&) (some false? %&)))", "user": "54c6619ae4b045293a27f62b"}, {"problem": 83, "code": "(fn [& args] (true? (and (some true? args) (not-every? true? args))))", "user": "54d7ed8de4b0a52adc2e2034"}, {"problem": 83, "code": "(fn [& coll] \n    (let [number-of-trues (count (filter #(if % true false) coll))]\n      (and (> number-of-trues 0) (< number-of-trues (count coll)))\n      )\n    )", "user": "54cb3497e4b057c6fda3a272"}, {"problem": 83, "code": "(fn [bool & more]\n  (if-let [all-true? (every? identity (conj more bool))]\n    (false? all-true?)\n    (or (some true? (conj more bool)) false)))", "user": "510a3cd4e4b06956752d35ad"}, {"problem": 83, "code": "(fn [& bools] \n  (true? (and (some false? bools) \n              (some true? bools))))", "user": "504f9ae1e4b0a02f9cffde9c"}, {"problem": 83, "code": "(fn f [& args] (not (or (every? true? args) (nil? (some true? args)))))", "user": "54dbcbbde4b024c67c0cf774"}, {"problem": 83, "code": "(fn[& x] (if (and (some true? x) (not (every? true? x))) true false))", "user": "4ec66e84535d6d7199dd36cd"}, {"problem": 83, "code": "(fn [& s] \n  (not \n   (not\n    (and \n     (some #{true} s)\n     (some not s)))))", "user": "54d8cc38e4b0a52adc2e203e"}, {"problem": 83, "code": "#(boolean (and (some identity %&) (some not %&)))", "user": "51b91b08e4b0e871ca4958f8"}, {"problem": 83, "code": "(fn [& xs] (or (and (some identity xs) (not (every? identity xs))) false))", "user": "54d6c80ce4b0a52adc2e2020"}, {"problem": 83, "code": "(fn [& vs]\n  (if (and (some true? vs) (not (every? true? vs)))\n  true\n  false))", "user": "53f31dafe4b0742d9025b0f0"}, {"problem": 83, "code": "(fn foo [ & more]\n  (if (and (some true? more) (some false? more))\n    true\n    false))", "user": "54d753ebe4b0a52adc2e2029"}, {"problem": 83, "code": "(fn [& v] (= 2 (count (set v))))", "user": "54dd76c8e4b024c67c0cf794"}, {"problem": 83, "code": "#(boolean (and (some true? %&) (some false? %&)))", "user": "54d1cf2ee4b0e8a36923e5eb"}, {"problem": 83, "code": "(fn [& vars]\n  (cond\n   (every? true? vars) false\n   (some true? vars) true\n   :else false))", "user": "53ecaf1ce4b0d648e757f4b4"}, {"problem": 83, "code": "not=", "user": "54db8ddae4b024c67c0cf767"}, {"problem": 83, "code": "#(if (every? true? %&) false (boolean (some true? %&)))", "user": "54ddb556e4b024c67c0cf798"}, {"problem": 83, "code": "#(and (-> (some true? %&) nil? not) (not-every? true? %&))", "user": "54cbe00ee4b057c6fda3a285"}, {"problem": 83, "code": "(fn [& xs ] (let [a (some true? xs) b (some false? xs)] (if (and a b) true false)))", "user": "54d4b3a7e4b0a52adc2e2003"}, {"problem": 83, "code": "(fn [& args]\n  (and (not (reduce #(and %1 %2) args)) (reduce #(or %1 %2) args)))", "user": "543c5200e4b032a45b86933e"}, {"problem": 83, "code": "#(true? \n  (and\n    (some true? %&)\n    (some false? %&)))", "user": "4e8415b2535db62dc21a62de"}, {"problem": 83, "code": "(fn [& bools]\n  (let [boolset (set bools)]\n    (and (contains? boolset true)\n         (contains? boolset false))))", "user": "540d0087e4b0addc1aec670b"}, {"problem": 83, "code": ";;; inital solution: (fn [& args] (and (= true (some true? args)) (not-every? true? args)))\n;;; Better:\nnot=", "user": "54ad9d76e4b09f271ff37ce6"}, {"problem": 83, "code": "#(= 2 (count (set %&)))", "user": "54b050cee4b09f271ff37d13"}, {"problem": 83, "code": ";#(true? (and \n;    (some true?  %&)\n;    (some false? %&)))\n\n; this works too:\n;not=\n\n; or use sets\n#(= #{true false} (set %&))", "user": "5465febde4b01be26fd746e1"}, {"problem": 83, "code": "#(or (and (some identity %&) (not-every? identity %&)) false)", "user": "54e3df6ae4b024c67c0cf7e3"}, {"problem": 83, "code": "(fn [& xs] (and (if (some true? xs) true false) (if (empty? (drop-while true? xs)) false true)) )", "user": "546a6c7ce4b00cfc9eacc154"}, {"problem": 83, "code": ";(fn [& bools] (> (count (frequencies bools)) 1))\n#(> (count (frequencies %&)) 1)", "user": "54e3bd3fe4b024c67c0cf7e0"}, {"problem": 83, "code": "(fn half-truth\n    [& bools]\n    (if (and (some true? bools) (not (every? true? bools)))\n      true\n      false)\n      )", "user": "54e0e911e4b024c67c0cf7bc"}, {"problem": 83, "code": "(fn [& bs] (= (count (set bs)) 2))", "user": "4db6d993535d1e037afb2180"}, {"problem": 83, "code": "(fn [& args] (boolean (and (some true? args) (some false? args) )))", "user": "54bbba99e4b0ed20f4ff6ec2"}, {"problem": 83, "code": "(fn [& col] \n    (if (some #(= true %) col) \n            (if (some #(= false %) col) true false) \n            false))", "user": "5243e37ae4b076204b44fae3"}, {"problem": 83, "code": "(fn [& args]\n  (true? (and\n   (some true? args)\n   (not-every? true? args))))", "user": "51cf815de4b0e42293a22575"}, {"problem": 83, "code": "(fn [& args] (= 2 (count (set args))))", "user": "54d104a5e4b0e8a36923e5d9"}, {"problem": 83, "code": "not=", "user": "54c8eb61e4b045293a27f658"}, {"problem": 83, "code": "(fn [& args]\n  (let [some-true (some #(or %) args)\n        some-false (some not args)]\n    (if (and some-true some-false)\n      true\n      false)))", "user": "54e79094e4b024c67c0cf818"}, {"problem": 83, "code": "(fn [& b]\n  (let [has-one-true (reduce #(or % %2) false b)\n        has-one-false (reduce #(not (and % %2)) true b)]\n       (and has-one-true has-one-false)))", "user": "54df3c94e4b024c67c0cf7aa"}, {"problem": 83, "code": "not=", "user": "54e5c57ee4b024c67c0cf7ff"}, {"problem": 83, "code": "(fn [& xs] (and (not-every? true? xs) (not-every? false? xs)))", "user": "5315ba94e4b08068f379ed34"}, {"problem": 83, "code": "#(if (and (some identity %&) (not (every? identity %&))) true false)", "user": "54e85a7fe4b024c67c0cf823"}, {"problem": 83, "code": "(fn [& args] (not (or (not-any? false? args) (every? false? args))))", "user": "53383c74e4b0e30313ee6c92"}, {"problem": 83, "code": "not=", "user": "54e956d9e4b024c67c0cf831"}, {"problem": 83, "code": "(fn [& args]\n  (let [truthy (and \n                (some true? args) \n                (not (every? true? args)))]\n    (if (nil? truthy)\n      false\n      truthy)))", "user": "5277b732e4b03e8d9a4a750c"}, {"problem": 83, "code": "#(if (and (some true? %&) (not-every? true? %&)) true false)", "user": "54e2a779e4b024c67c0cf7d3"}, {"problem": 83, "code": "(fn [& args] (= (count (set args)) 2))", "user": "54b83ae9e4b0ed20f4ff6e95"}, {"problem": 83, "code": "(fn [& args] (= 2 (count (distinct args))))", "user": "54cad2d5e4b057c6fda3a26c"}, {"problem": 83, "code": "(fn [& p]\n  (> (count (partition-by true? p)) 1))", "user": "51a4d802e4b0def3c5c5869a"}, {"problem": 83, "code": "(fn [& b]\n  (let [c (count (filter true? b))\n        t (count b)]\n    (and (< c t) \n         (> c 0))))", "user": "54d4bd2be4b0a52adc2e2005"}, {"problem": 83, "code": "(fn [& coll]\n  (let [trues (reduce + (map #(if % 1 0) coll))\n        N (count coll)]\n    (if (or (= trues N) (= trues 0))\n      false\n      true)))", "user": "54b5ce67e4b05787c3b163ac"}, {"problem": 83, "code": "(fn [& args] (let [t (count (filter identity args))] \n               (and (pos? t) \n                    (not= t (count args))\n                    )))", "user": "4ec1923f535dfed6da9c6db2"}, {"problem": 83, "code": "(fn [& vs] (not (= (last (sort vs)) (first (sort vs)))))", "user": "54ef4a1ee4b024c67c0cf883"}, {"problem": 83, "code": "#(every? true? ((partial (juxt some not-every?) true?) %&))", "user": "53d9e587e4b0e771c302547c"}, {"problem": 83, "code": "(fn [& mylist] (\n               and (not-every? true? mylist)\n                   (not-every? false? mylist)\n               ))", "user": "54deab4ce4b024c67c0cf7a5"}, {"problem": 83, "code": "(fn [& args] (and (not (nil? (some true? args))) (not (nil? (some false? args)))))", "user": "54a6baaee4b09f271ff37c8a"}, {"problem": 83, "code": "(fn [& args] (and (not (every? not args)) (not-every? identity args)))", "user": "54f0d3fde4b024c67c0cf8a6"}, {"problem": 83, "code": "#(= true (and (some true? %&) (some false? %&)))", "user": "504e2d18e4b0f6ff3350c47a"}, {"problem": 83, "code": "(fn [& %] (<= 2 (count (keys (frequencies %)))))", "user": "4f598c87e4b0030a34fb2ada"}, {"problem": 83, "code": "(fn [& xs] (> (count xs) (count (filter true? xs)) 0))", "user": "54dae16de4b024c67c0cf758"}, {"problem": 83, "code": "(fn [& args] (and (true? (some identity args)) (not (every? identity args))))", "user": "518ba795e4b0f028e99addf0"}, {"problem": 83, "code": "(fn [& args] (= #{true false} (into #{} args)))", "user": "54f2fe9fe4b050824f58f5b8"}, {"problem": 83, "code": "(fn [& x]\n    (= 2 (count (set x))))", "user": "5470b3d0e4b00cfc9eacc1bb"}, {"problem": 83, "code": "(fn [& bool]\n  (cond\n    (every? true? bool) false\n    (every? false? bool) false\n    :else true))", "user": "546ff835e4b00cfc9eacc1b4"}, {"problem": 83, "code": "not=", "user": "54e606c3e4b024c67c0cf803"}, {"problem": 83, "code": "(fn half_truth [x & rest] (and (not-every? true? (cons x rest)) (apply (some-fn true?) (cons x rest))))", "user": "54e5dc08e4b024c67c0cf800"}, {"problem": 83, "code": "#(true? \n  (and\n    (some true? %&)\n    (some false? %&)))", "user": "54361d92e4b032a45b8692f7"}, {"problem": 83, "code": "#(if (apply = % %&) false true)", "user": "534fa9dae4b084c2834f4acf"}, {"problem": 83, "code": "not=", "user": "539c736ce4b0b51d73faaf2b"}, {"problem": 83, "code": "not=", "user": "531c7bdde4b08068f379eda2"}, {"problem": 83, "code": "(fn [& bools]\n  (if (and (some true? bools)\n           (not-every? true? bools))\n    true\n    false))", "user": "54edfa10e4b024c67c0cf868"}, {"problem": 83, "code": "not=", "user": "546a6e9fe4b00cfc9eacc157"}, {"problem": 83, "code": "#(loop [xs %& ts 0 fs 0]\n   (if (empty? xs)\n     (if (or (= 0 ts) (= 0 fs))\n       false\n       true)\n     (recur (rest xs) (if (true? (first xs)) (inc ts) ts) (if (false? (first xs)) (inc fs) fs))))", "user": "5480cce5e4b0e286459a115f"}, {"problem": 83, "code": "(fn [& coll] (and (boolean (some true? coll)) (boolean (some false? coll))))", "user": "54fdbe3fe4b07d26eda61d3b"}, {"problem": 83, "code": "(fn [& xs] (= true (and (some true? xs) (some false? xs))))", "user": "54d5fbe9e4b0a52adc2e2014"}, {"problem": 83, "code": "(fn [& args]\n  (= (count (set args)) 2)    \n )", "user": "54f73502e4b01ecee9d88817"}, {"problem": 83, "code": "(fn [& args] (= (set args) #{true false}))", "user": "50e09f60e4b061dbdced7237"}, {"problem": 83, "code": "(fn [& args] (= 2 (count (into #{} args))))", "user": "51b76227e4b0d906fcd71d35"}, {"problem": 83, "code": "(fn [& x] (true? (and (some true? x) (some false? x))))", "user": "5351fca5e4b084c2834f4aec"}, {"problem": 83, "code": "(fn [& vars]\n(cond\n(every? true? vars) false\n(some true? vars) true\n:else false))", "user": "5272645de4b03e8d9a4a742c"}, {"problem": 83, "code": "(fn [& x] (cond \n           (apply = x) false\n           (contains? (set x) true) true\n           :else false))", "user": "54e0a9c3e4b024c67c0cf7b5"}, {"problem": 83, "code": "(fn listOR\n  [& args]\n  (and (not (reduce #(and %1 %2) args)) (reduce #(or %1 %2) args)))", "user": "54f64e99e4b0f2f3c5226ea4"}, {"problem": 83, "code": "(fn answer [& x]\n  (if (= (set x) (set (list false true))) true false ))", "user": "53ef235de4b0d648e757f4d4"}, {"problem": 83, "code": "(fn [& args] (let [[x y] (reduce (fn [[a b] i] (if i [(inc a) b] [a (inc b)])) [0 0] args)]\n               (and (> x 0) (> y 0))))", "user": "54d9366ce4b0a52adc2e204e"}, {"problem": 83, "code": "(fn [& v]\n  (and (not-every? true? v) (not-every? false? v)))", "user": "51f66891e4b06ff1c25c52c1"}, {"problem": 83, "code": "(fn [& args]\n  (true? (and (some true? args) (some false? args))))", "user": "54ca130ce4b057c6fda3a250"}, {"problem": 83, "code": "(fn [& a] (true? (and\n         (some true? a)\n         (some false? a))))", "user": "545b9dd9e4b01be26fd74654"}, {"problem": 83, "code": "#(boolean (and (some true? %&) (some false? %&)))", "user": "54febf4be4b07d26eda61d45"}, {"problem": 83, "code": "(fn [& bs] (and (not (every? #(not %) bs)) (not (every? identity bs))))", "user": "54eee3a3e4b024c67c0cf879"}, {"problem": 83, "code": "(fn[& args](not(or(empty?(filter identity args))(empty?(filter (complement identity) args)))))", "user": "54f4a457e4b0f2f3c5226e83"}, {"problem": 83, "code": "#(true? \n  (and\n    (some true? %&)\n    (some false? %&)))", "user": "54f97e22e4b01ecee9d8883a"}, {"problem": 83, "code": "(fn [& xs] (and (not-every? (partial = true) xs) ( (comp boolean some) (partial = true) xs) ) )", "user": "54e51c7be4b024c67c0cf7f7"}, {"problem": 83, "code": "(fn [& rest] (true? (and (some true? rest) (some false? rest))))", "user": "54edc818e4b024c67c0cf865"}, {"problem": 83, "code": "(fn [& tl]\n(and\n (not (nil? (some true? tl)))\n (not (every? true? tl))))", "user": "543be8f0e4b032a45b869337"}, {"problem": 83, "code": "(fn [& ps] (not (nil? (and\n            (some false? ps )\n            (some true? ps)))))", "user": "54d1b6ffe4b0e8a36923e5e6"}, {"problem": 83, "code": "(fn [& truths]\n  (= #{true false} (set truths)))", "user": "54b31445e4b09f271ff37d35"}, {"problem": 83, "code": "(fn [& vars] (cond (every? true? vars) false (some true? vars) true :else false))", "user": "54eea988e4b024c67c0cf875"}, {"problem": 83, "code": "(fn [& bools]\n  (cond (every? true? bools) false\n        (some true? bools) true\n        :else false))", "user": "55088bb3e4b06e50f9beb10c"}, {"problem": 83, "code": "(fn [& arg]\n  (if (and (some true? arg) (some false? arg))\n    true\n    false\n    ))", "user": "54bcab07e4b0ed20f4ff6ed5"}, {"problem": 83, "code": "(fn [& l] (boolean (and (some true? l) (some false? l) )))", "user": "54df2609e4b024c67c0cf7a9"}, {"problem": 83, "code": "(fn [& args]\n  (let [n (count args)\n        m (count (filter true? args))]\n  (and (not= n m) (not= m 0))))", "user": "55058a4fe4b086ebe8a79c89"}, {"problem": 83, "code": "(fn a \n  ([x] \n   (cond\n    (seq? x)\n      (cond\n       (= 1 (count x)) false\n       :else\n       (a (first x) (first (rest x))))\n      \n    :else\n      false\n    ))\n  ([x y] \n   (cond\n    (and x y) false\n    :else\n    (or x y)\n    ))\n  ([x y & rest-args]\n   (a (a x y) (a rest-args))))", "user": "5509e952e4b06e50f9beb125"}, {"problem": 83, "code": "(fn [& bools]\n (if (and (some true? bools) (not= (count bools) (count (filter true? bools))))\n   true\n   false))", "user": "5422c959e4b01498b1a71ac7"}, {"problem": 83, "code": "(fn[& l] (not(or  (nil?(some true? l))(nil?(some false? l)))))", "user": "54edcf96e4b024c67c0cf866"}, {"problem": 83, "code": ";(fn [& as]\n;  (and\n;   (not (not-any? identity as))\n;   (not-every? identity as)))\n; try de-morgan's theorem\n(fn [& as] (not (or (not-any? identity as) (every? identity as))))", "user": "54b04708e4b09f271ff37d11"}, {"problem": 83, "code": "(fn \n    [& xs]\n    (let [x (group-by identity xs)] (if-not (x false) false (if-not (x true) false true))))", "user": "5505ceb3e4b086ebe8a79c8b"}, {"problem": 83, "code": "(fn [& params]\n    (let [cnt (count (filter true? params)) ]\n      (and (not= cnt (count params) ) (> cnt 0))\n     ))", "user": "54ca9311e4b057c6fda3a263"}, {"problem": 83, "code": "(fn [& xs]\n  (and (not-every? (partial = false) xs) (not-every? (partial = true) xs)))", "user": "546ed28be4b00cfc9eacc1a5"}, {"problem": 83, "code": "not=", "user": "54fc7d89e4b07d26eda61d2b"}, {"problem": 83, "code": "(fn [& xs] (= true(and (some identity xs) (not-every? identity xs))))", "user": "550e0373e4b06e50f9beb162"}, {"problem": 83, "code": "#(= (count (into #{} %&)) 2)", "user": "550609b3e4b021ccfedb9695"}, {"problem": 83, "code": "#(true? (and (not (every? identity %&)) (some true? %&)))", "user": "54f15cb8e4b024c67c0cf8b1"}, {"problem": 83, "code": "(fn checkBools [& bools]\n   (if (first bools)\n     (if (some false? (rest bools))\n       true\n       false)\n     (if (some true? (rest bools))\n       true\n       false)))", "user": "5508102ee4b021ccfedb96b0"}, {"problem": 83, "code": "not=", "user": "54f6f00fe4b01ecee9d88814"}, {"problem": 83, "code": "(fn [& p] (and (true? (some true? p)) (true? (some false? p))))", "user": "54cbd97ae4b057c6fda3a283"}, {"problem": 83, "code": ";#(> (count (distinct %&)) 1)\n\n(fn some-true? [& bs]\n  (loop [bs bs acc #{}]\n    (if (= (count acc) 2)\n      true\n      (if (empty? bs)\n        false\n        (recur (rest bs) (conj acc (first bs)))))))", "user": "54e24a05e4b024c67c0cf7ce"}, {"problem": 83, "code": "(fn [& bools]\n  (cond\n    (every? true?  bools) false\n    (every? false? bools) false\n    :else true\n  )\n)", "user": "54e5bdf2e4b024c67c0cf7fe"}, {"problem": 83, "code": "(fn [& xs]\n   (let [c (reduce conj #{} xs)]\n     (and (contains? c true)\n          (contains? c false))))", "user": "4fa5c8dde4b081705acca1af"}, {"problem": 83, "code": "(fn [& args] (or (and (some true? args) (not (every? true? args))) false))", "user": "5509b434e4b06e50f9beb11e"}, {"problem": 83, "code": "#(true? (and (some true? %&) (some false? %&)))", "user": "549674cde4b0b312c081ff66"}, {"problem": 83, "code": "(fn [& bools] (boolean (and (some true? bools) (not-every? true? bools))))", "user": "540a4f20e4b0addc1aec66ef"}, {"problem": 83, "code": "(fn [& args]\n                       (loop [has-true false has-false false remain args]\n                         (if (and has-true has-false)\n                           true\n                           (if (empty? remain)\n                             false\n                             (let [v (first remain) remain (next remain)]\n                               (if v\n                                 (recur true has-false remain)\n                                 (recur has-true true remain)))))))", "user": "541f89a5e4b01498b1a71a99"}, {"problem": 83, "code": "(fn [& args]\n  (cond\n   (every? true? args) false\n   (some true? args) true\n   (not (some true? args)) false))", "user": "54bd6cb2e4b0ed20f4ff6ede"}, {"problem": 83, "code": "(fn [& s] \n  (= (-> s distinct count) 2))", "user": "53213810e4b09d4e7a9b54b0"}, {"problem": 83, "code": "(fn [& seq] (and (reduce #(or %1 %2) false seq) (not (reduce #(and %1 %2) true seq))))\n;;or(seq) and not and(seq)", "user": "5511fd7ee4b06e50f9beb19e"}, {"problem": 83, "code": "(fn hf [& bool]\n  (if (every? false? bool)\n    false\n    (not-every? true? bool)))", "user": "54e1197fe4b024c67c0cf7c0"}, {"problem": 83, "code": "(fn xor [& lst]\n  (and (reduce #(or %1 %2) lst) (not (reduce #(and %1 %2) lst))))", "user": "54c8ac49e4b045293a27f64e"}, {"problem": 83, "code": "(fn [& args] (and (not (nil? (some true? args))) (not-every? true? args)))", "user": "5514a60fe4b055c2f668d4d7"}, {"problem": 83, "code": "(fn [& col] (not (or (every? false? col) (every? true? col))))", "user": "5510f734e4b06e50f9beb18f"}, {"problem": 83, "code": "(fn [& params]\n  (boolean (and (some true? params)\n       (not-every? true? params))))", "user": "53908e6be4b0b51d73faae9a"}, {"problem": 83, "code": "#(not-every? (fn [x] (= x %)) %&)", "user": "5507cfd3e4b021ccfedb96ad"}, {"problem": 83, "code": "(fn [& l] (> (count (partition-by identity l)) 1))", "user": "5510aa92e4b06e50f9beb188"}, {"problem": 83, "code": "(fn [& args] (= 2 (count (distinct args))))", "user": "551535cee4b055c2f668d4df"}, {"problem": 83, "code": "(fn [& args] (= 2 (count (set args))))", "user": "54d127b7e4b0e8a36923e5de"}, {"problem": 83, "code": "not=", "user": "52e087dde4b09f7907dd1412"}, {"problem": 83, "code": "(fn [& args]\n   (and (reduce #(or % %2) args) (not (every? true? args))))", "user": "55092319e4b06e50f9beb113"}, {"problem": 83, "code": "(fn [& s]\n  (let [true-cnt (reduce #(if %2 (inc %1) %1) 0 s)]\n    (> (count s) true-cnt 0)))", "user": "550ff2a3e4b06e50f9beb17f"}, {"problem": 83, "code": "(fn xor [& args]\n  (let [truths (count (filter identity args))\n        total  (count args)]\n    (and\n      (not= truths total)\n      (> truths 0))))", "user": "55170dd9e4b06a49daca83bd"}, {"problem": 83, "code": "(fn [& bs]\n    (if (every? #(= % true) bs)\n      false\n      (if (some #(= % true) bs)\n        true\n        false)))", "user": "551a21ece4b091ff45eda993"}, {"problem": 83, "code": "(fn\n  [& more]\n  (let [andresult (reduce #(and %1 %2) more)\n\t   orresult (reduce #(or %1 %2) more)\n        ]\n   (if (true? andresult) false orresult))\n  )", "user": "5510d948e4b06e50f9beb18d"}, {"problem": 83, "code": "(fn [& bs] (= 2 (count (group-by true? bs))))", "user": "5492164ee4b0b312c081ff3e"}, {"problem": 83, "code": "(fn [& tests]\n  (let [truths (count (filter true? tests))\n        total  (count tests)]\n    (and (< truths total)\n         (> truths 0))))", "user": "503f923fe4b00d1a725ff2ad"}, {"problem": 83, "code": "(fn [& bools]\n  (if (and (some identity bools) (not-every? identity bools)) true false))", "user": "550615c0e4b021ccfedb9696"}, {"problem": 83, "code": "(fn [& more]\n  (let [c (count (filter identity more))]\n    (not (or (zero? c)\n             (= c (count more))))))", "user": "551ed214e4b08d5046aa8a4d"}, {"problem": 83, "code": "(fn part-true? [& args]\n  (cond\n    (every? identity args)  false\n    (some identity args)    true\n    :else                   false))", "user": "4fc6305de4b0ee37620e180b"}, {"problem": 83, "code": "(fn [& args]\n  (let [t (filter true? args) f (filter false? args)]\n    (and (> (count t) 0) (> (count f) 0))))", "user": "55151417e4b055c2f668d4da"}, {"problem": 83, "code": "(fn [& args] (and (not (not-any? true? args)) (not-every? true? args)))", "user": "53d5a63be4b0e771c3025449"}, {"problem": 83, "code": "(fn [& l] (and (reduce #(or %1 %2) false l) (not (reduce #(and %1 %2) true l))))", "user": "5520af03e4b08d5046aa8a64"}, {"problem": 83, "code": "#(and (not-every? true? %&) (not-every? false? %&))", "user": "50f02de7e4b0bdaecbb47db0"}, {"problem": 83, "code": "(fn foo [& x] (not= 1 (count (distinct x))))", "user": "5520974be4b08d5046aa8a63"}, {"problem": 83, "code": "(fn [& args]\n  (or (and (some identity args)\n           (not-every? identity args))\n      false))", "user": "512e31e9e4b0b740abc59823"}, {"problem": 83, "code": "(fn [& s] (= 2 (count (set s))))", "user": "551ecb76e4b08d5046aa8a4c"}, {"problem": 83, "code": "(fn [& args] (-> args distinct count (= 2)))", "user": "551c66dae4b07993ea3788de"}, {"problem": 83, "code": "(fn [& bools]\n  (< 1 (count (distinct bools))))", "user": "50310713e4b05b7df5a0b84c"}, {"problem": 83, "code": "(fn [& x] (and (not (reduce #(and %1 %2) x)) (reduce #(or %1 %2) x)))", "user": "55205564e4b08d5046aa8a60"}, {"problem": 83, "code": "#(= 2 (count (distinct %&)))", "user": "54393c3fe4b032a45b86931a"}, {"problem": 83, "code": "#(true? \n  (and\n    (some true? %&)\n    (some false? %&)))", "user": "50c6052ce4b0c9dc10d15c56"}, {"problem": 83, "code": "(fn [& args] (= (some true? args) (some false? args)))", "user": "552356fae4b0882d96d091af"}, {"problem": 83, "code": "(fn [& xs] (true? (and (some true? xs) (some false? xs))))", "user": "4f4e78fee4b03ad3f0c10cc8"}, {"problem": 83, "code": "(fn [& args] (and (not (every? true? args)) (not (nil? (some true? args)))))", "user": "54f09599e4b024c67c0cf89d"}, {"problem": 83, "code": "(fn true83 [& b] (and (not (every? identity b)) (not (not-any? identity b))))", "user": "4f9e0000e4b0dcca54ed6d2a"}, {"problem": 83, "code": "(fn [& xs]\n  (and ((complement not-any?) true? xs) (not-every? true? xs)))", "user": "5522cd9ae4b0882d96d091ab"}, {"problem": 83, "code": "(fn [& args] (let [res (and (some true? args) (some false? args))] (if (nil? res) false res) ) )", "user": "514504c2e4b021a5ff8301fc"}, {"problem": 83, "code": "not=", "user": "54b67463e4b05787c3b163bc"}, {"problem": 83, "code": "(fn [& xs]\n         (and \n           (not-every? true? xs)\n              (not (nil? (some true? xs)))\n              ) \n          )", "user": "533c2605e4b0e30313ee6cd7"}, {"problem": 83, "code": "(fn [& x] (and (not (= nil (some identity x))) (not (every? identity x))))", "user": "5515649fe4b055c2f668d4e3"}, {"problem": 83, "code": "(fn [& xs]\n  (if (some true? xs)\n    (not (every? true? xs))\n    false) )", "user": "551ee974e4b08d5046aa8a50"}, {"problem": 83, "code": "#(-> (group-by identity %&) count (= 2))", "user": "54074fc5e4b0addc1aec66b6"}, {"problem": 83, "code": "(fn [& args] (and \n                     (not (every? identity args))\n                     (true? (some identity args))))", "user": "4f03e60d535dcb61093f6b7a"}, {"problem": 83, "code": "#(= 2 (-> %& distinct count))", "user": "54126d0ce4b01498b1a719d5"}, {"problem": 83, "code": "not=", "user": "53a5737ee4b0b62ce300573a"}, {"problem": 83, "code": "not=", "user": "5527be83e4b0ffed3738f936"}, {"problem": 83, "code": "not=", "user": "54ab1b5ae4b09f271ff37cc2"}, {"problem": 83, "code": "(fn[& x](\n         if (every? true? x) false \n         (if (some true? x) true false)))", "user": "54ecd7dde4b024c67c0cf85c"}, {"problem": 83, "code": "(fn [& args] (and (not-every? not args) (not-every? identity args)))", "user": "55280930e4b0ffed3738f93b"}, {"problem": 83, "code": "#(or (and (some true? %&) (not (every? true? %&))) false)", "user": "55201d18e4b08d5046aa8a5d"}, {"problem": 83, "code": "(fn [& args] (if (and (some true? args) (not (every? true? args))) true false))", "user": "54e4edcae4b024c67c0cf7f3"}, {"problem": 83, "code": "(fn [ & bools ] (if (every? identity bools) false (if (some identity bools) true false)))", "user": "4fc57c4ce4b0ee37620e17f6"}, {"problem": 83, "code": "(fn [& args] (and (boolean (some true? args)) (not-every? true? args)))", "user": "55253217e4b0882d96d091ce"}, {"problem": 83, "code": "(fn [& vars]\n  (cond\n   (every? true? vars) false\n   (some true? vars) true\n   :else false))", "user": "5526383ee4b0ffed3738f917"}, {"problem": 83, "code": "(fn half-truth\n  [& propositions]\n  (cond\n    (every? true? propositions) false\n    (some true? propositions) true\n    :else false))", "user": "54c3747de4b045293a27f60e"}, {"problem": 83, "code": "#(if (some true? %&)\n  (not (every? true? %&))\n  false)", "user": "53fcd574e4b0de5c418485d9"}, {"problem": 83, "code": "not=", "user": "505106fee4b05ab4c7e07d38"}, {"problem": 83, "code": "not=", "user": "550d9452e4b06e50f9beb15d"}, {"problem": 83, "code": "(fn [& args] \n  (not (nil?\n   (and \n    (some #(= % true) args) \n    (some #(= % false) args)\n    )\n  ))\n )", "user": "5528ecd1e4b0ffed3738f942"}, {"problem": 83, "code": "(fn [& r] (and ( not-every? identity r) (not-every? #(not %) r)) )", "user": "55249f64e4b0882d96d091c6"}, {"problem": 83, "code": "(fn [& c] \n  \n    (if (and (some false? c) \n         (some true?  c)\n    ) true false)\n    )", "user": "53ba41c2e4b047364c0444f3"}, {"problem": 83, "code": "(fn [& values]\n  (if (and (some true? values) (some false? values)) true false))", "user": "5524120fe4b0882d96d091b7"}, {"problem": 83, "code": "(fn [& bools] (and (not (nil? (some #{true} bools))) (pos? (count (filter false? bools)))))", "user": "5519c157e4b00ace28fe6e32"}, {"problem": 83, "code": "not=", "user": "552bc0f5e4b0ffed3738f968"}, {"problem": 83, "code": "#(= #{true false} (set %&))", "user": "54db3d82e4b024c67c0cf75f"}, {"problem": 83, "code": "(fn [& conds]\n         (boolean (and (some identity conds) (some not conds)))\n         )", "user": "552d9013e4b076ab5578f7ea"}, {"problem": 83, "code": "(fn [& bools] (and (not (nil? (some true? bools))) (not (every? true? bools))))", "user": "54f4adc8e4b0f2f3c5226e86"}, {"problem": 83, "code": "(fn [& args] (not (not (and (some false? args) (some true? args)))))", "user": "5530b827e4b076ab5578f818"}, {"problem": 83, "code": "#(and (boolean (some true? %&)) (not (every? true? %&)))", "user": "54926752e4b0b312c081ff44"}, {"problem": 83, "code": "(fn [& x]\n  (cond\n    (every? #(= true %) x) false\n    (some #(= true %) x) true\n    :else false))", "user": "51a7fe50e4b08d8ec191b803"}, {"problem": 83, "code": "(fn htruth\n  [& rst]\n  (if (and (not (every? identity rst)) (some identity rst))\n    true \n    false))", "user": "55355397e4b09218d5f44fae"}, {"problem": 83, "code": "(fn [& bools]\n  (boolean \n   (and (some true? bools)\n        (some false? bools))))", "user": "553698fae4b09218d5f44fc0"}, {"problem": 83, "code": "#(= 2 (count (set %&)))", "user": "552694e7e4b0ffed3738f920"}, {"problem": 83, "code": "(fn [& s]\n    (true? (and (some true? s)\n                (some false? s))))", "user": "5531e445e4b09218d5f44f76"}, {"problem": 83, "code": "not=", "user": "54b9a5b3e4b0ed20f4ff6eaf"}, {"problem": 83, "code": "(fn halftruth\n  ([] false)\n  ([x] false)\n  ([x y] (if (= (count (set [x y])) 2) true false))\n  ([x y & z] (if (= (count (set (vec (list* x y z)))) 2) true false)))", "user": "54caaa48e4b057c6fda3a267"}, {"problem": 83, "code": "#(apply not= %&)", "user": "553706d1e4b09218d5f44fc7"}, {"problem": 83, "code": "(fn [& rest] (not (not (and (not (every? true? rest)) (some true? rest)))))", "user": "553a43cae4b09218d5f44ff2"}, {"problem": 83, "code": "(fn [& a] (boolean (and (some true? a) (some false? a))))", "user": "553c05b7e4b09218d5f45011"}, {"problem": 83, "code": "(fn [& items]\n    (let [g (group-by true? (seq items))\n          ext (fn [g k] (count (get g k [])))]\n      (and \n        (> (ext g true) 0) \n        (> (ext g false) 0))\n        ))", "user": "5141a8f2e4b02fd87f5064c1"}, {"problem": 83, "code": "(fn [& bools]\n  (boolean (and (some true? bools) (not (every? true? bools)))))", "user": "553b87abe4b09218d5f45003"}, {"problem": 83, "code": "(fn [& v] (and (reduce #(or %1 %2) v) (not (reduce #(and %1 %2) v))))", "user": "552e1c98e4b076ab5578f7ee"}, {"problem": 83, "code": "(fn [& xs] (= #{true false} (set xs)))", "user": "553e0b70e4b0a04f792994e8"}, {"problem": 83, "code": "(fn [& xs]\n  (let [some? #(not (nil? (some identity %)))\n        not-every? #(not (every? identity %))]\n    (and (some? xs) (not-every? xs))))", "user": "553fe711e4b0a04f792994fb"}, {"problem": 83, "code": "(fn [& bs] \n  (if (and (some identity bs) (some not bs))\n    true\n    false))", "user": "553dd883e4b0a04f792994e6"}, {"problem": 83, "code": "(fn [& xs] (true? (and (some true? xs) (some false? xs))))", "user": "52cda397e4b07d0d72b2737a"}, {"problem": 83, "code": "(fn [& a] (boolean (and (some true? a) (some false? a))))", "user": "4faf97d8e4b081705acca258"}, {"problem": 83, "code": "(fn [& bs] (not (or (not-any? true? bs) (not-any? false? bs))))", "user": "55316b8ae4b076ab5578f825"}, {"problem": 83, "code": "(fn [a & more]\n  (if (empty? more) \n    false\n    (loop [a     a\n           b    (first more)\n           more (rest more)]\n      (if (empty? more)\n        (and (or a b) (not (and a b)))\n        (recur (or a b) (first more) (rest more))))))", "user": "55074092e4b021ccfedb96a4"}, {"problem": 83, "code": "(fn [& a]\n  (if (reduce #(and %1 %2) a)\n    false\n    (if (reduce #(or %1 %2) a)\n      true\n      false)))", "user": "553c4614e4b09218d5f45014"}, {"problem": 83, "code": "(fn [& xs] (= true (some true? xs) (some false? xs)))", "user": "55274467e4b0ffed3738f92b"}, {"problem": 83, "code": "; I see that many folks use 'identity'.  But I don't quite get 'identity' yet.  \n(fn [& args] (and (if (some true? args) true false) (not-every? true? args) ))", "user": "5535e822e4b09218d5f44fb2"}, {"problem": 83, "code": "(fn [& xs]\n  (let [num-true (count (filter true? xs))\n        total-count (count xs) ]\n    (if (and (> num-true 0) (not= num-true total-count)) true false)))", "user": "52bc0dade4b07a9af57922f1"}, {"problem": 83, "code": "(fn [& arr]\n  (cond\n   (every? true? arr) false\n   (some true? arr) true\n   :else false))", "user": "53573d70e4b04ce2eb3ed278"}, {"problem": 83, "code": "(fn [& b] (if (and (some identity b) (not (every? identity b))) true false))", "user": "553abb28e4b09218d5f44ffb"}, {"problem": 83, "code": "(fn [& args] (and (not (every? false? args)) (not (every? true? args))))", "user": "5546704be4b0a04f7929953d"}, {"problem": 83, "code": "(fn fun [x & args]\n  (let [lst (concat (list x) args)]\n    (cond \n\t\t(every? true? lst) false\n\t\t(every? false? lst) false\n\t\t(not-every? true? lst ) true)))", "user": "551d5cb9e4b07993ea3788e9"}, {"problem": 83, "code": "(fn [& x] (let [x (into #{} x)] (if (every? true? x) false (reduce #(or %1 %2) x)   ) ))", "user": "552800d7e4b0ffed3738f93a"}, {"problem": 83, "code": "(fn [& x]\n  (and (not (nil? (some identity x)))\n       (not (every? identity x))))", "user": "55495318e4b0a04f79299566"}, {"problem": 83, "code": "(fn [& arr]\n  (and (not (every? true? arr))\n       (true? (some true? arr))))", "user": "554707bae4b0a04f79299544"}, {"problem": 83, "code": "(fn [& a-seq]\n  (let [re (apply = a-seq)]\n    (not re)))", "user": "54b64fbbe4b05787c3b163b8"}, {"problem": 83, "code": "(fn [& args] (and (true? (some true? args)) (not-every? true? args)))", "user": "554dff83e4b00713264bd98d"}, {"problem": 83, "code": "(fn [& b] ((complement empty?) (rest (partition-by true? b))))", "user": "554680cbe4b0a04f7929953e"}, {"problem": 83, "code": "(fn [& params](let [x (count (filter true? params)) y (count params)] (and (< x y) (< 0 x))) )", "user": "54f86b8ce4b01ecee9d88828"}, {"problem": 83, "code": "#(and (not= nil (some true? %&)) (not-every? true? %&))", "user": "538d49e1e4b0b51d73faae6b"}, {"problem": 83, "code": "not=", "user": "5540fe42e4b0a04f7929950a"}, {"problem": 83, "code": "(fn [& x]\n(true? (and (some true? x)\n     (some false? x)\n     )))", "user": "554b2151e4b0a04f79299580"}, {"problem": 83, "code": "(fn [& a] (and \n           (= (reduce #(or %1 %2) false a) true) \n           (= (reduce #(and %1 %2) true a) false)\n           )\n  )", "user": "54e84d1ee4b024c67c0cf822"}, {"problem": 83, "code": "not=", "user": "553b0d95e4b09218d5f44fff"}, {"problem": 83, "code": "(fn [& col] (cond \n             (every? false? col) false\n             (every? true? col) false\n             (some true? col) true\n             :else false))", "user": "547c2c6ce4b0c51c1f4d72e3"}, {"problem": 83, "code": "not=", "user": "555093b2e4b00713264bd9ab"}, {"problem": 83, "code": "(fn [& args] \n  (if (not-every? #(= %1 true) args) \n    (if (some #(= %1 true) args) true false) \n      false ))", "user": "55532d03e4b0deb715856dfd"}, {"problem": 83, "code": "(fn [& xs]\n  (and (not-every? true? xs)\n       (not-every? false? xs)))", "user": "5283a919e4b0239c8a67adbe"}, {"problem": 83, "code": "not=", "user": "554edb85e4b00713264bd99a"}, {"problem": 83, "code": "not=", "user": "543366dde4b0b6b47310fcdf"}, {"problem": 83, "code": "(fn [& xs] (boolean (and (some boolean xs) (not-every? boolean xs))))", "user": "55555c7be4b0deb715856e14"}, {"problem": 83, "code": "(fn [& s] (boolean (and (some true? s) (some false? s))))", "user": "52ce1abfe4b07d0d72b27389"}, {"problem": 83, "code": "(fn[& list-of-booleans] \n  (\n    (fn check[x y args]\n      (if (and (> x 0) (> y 0))\n        true\n        (if (empty? args)\n          false\n          (if(true? (first args))\n            (check (inc x) y (rest args))\n            (check x (inc y) (rest args))\n          )\n        )\n      )\n    ) \n    0 0 list-of-booleans\n  )\n)", "user": "55429859e4b0a04f7929951f"}, {"problem": 83, "code": "not=", "user": "5504dd64e4b086ebe8a79c83"}, {"problem": 83, "code": "(fn [& all] \n  (and (reduce #(or %1 %2) all) \n       (not (apply = all))))", "user": "55536a8ae4b0deb715856e03"}, {"problem": 83, "code": "(fn [& xs]\n  (true? (and (some true? xs) (some false? xs))))", "user": "555521a5e4b0deb715856e12"}, {"problem": 83, "code": "(fn half-truth \n  ([& args] (and (< 0 (count (filter false? args))) (< 0 (count (filter true? args))) ))\n)", "user": "5280a1ece4b0757a1b171407"}, {"problem": 83, "code": "(fn [& b] (and (boolean (some #{true} b)) (not (every? true? b))))", "user": "552d2e4fe4b076ab5578f7e1"}, {"problem": 83, "code": "#(->> %&\n      set\n      (apply =)\n      not)", "user": "554b8572e4b0a04f79299589"}, {"problem": 83, "code": "(fn half-truth\n  [& bvals]\n  (and \n   (true? (some true? bvals))\n   (not (every? true? bvals))))", "user": "53161a56e4b08068f379ed3e"}, {"problem": 83, "code": "(fn [& bs]\n  (and (-> (some identity bs) not not)\n       (not-every? identity bs)))", "user": "53684a2fe4b0243289761e8c"}, {"problem": 83, "code": "(fn [& r]\n  (and (not-every? false? r)\n       (not-every? true? r)))", "user": "54cad59ee4b057c6fda3a26e"}, {"problem": 83, "code": "(fn [& args]\n  (boolean (and (some identity args)\n                (not (every? identity args)))))", "user": "5515b138e4b055c2f668d4ed"}, {"problem": 83, "code": "(fn [& more]\n  (and (not-every? true? more)\n       (not-every? false? more)))", "user": "5523fce8e4b0882d96d091b4"}, {"problem": 83, "code": "not=", "user": "54eee38ce4b024c67c0cf878"}, {"problem": 83, "code": "#(true? (and (some true? %&) (some false? %&)))", "user": "5532a04ee4b09218d5f44f82"}, {"problem": 83, "code": "(fn half-truth [& x]\n  (= (set x) #{true false}))", "user": "554dfe97e4b00713264bd98c"}, {"problem": 83, "code": "(fn [& bools]\n  (true? (and (not (apply = true bools))\n       (some true? bools))))", "user": "5486e317e4b0e286459a11c0"}, {"problem": 83, "code": "(fn [& bools]\n(and\n (true? (some true? bools))\n (not-every? true? bools)))", "user": "5264383be4b03e8d9a4a70cb"}, {"problem": 83, "code": "(fn [& ts]\n  (let [someTrue (not-every? false? ts)\n        notAllTrue (not-every? true? ts)]\n    (every? true? [someTrue notAllTrue])))", "user": "553638bae4b09218d5f44fba"}, {"problem": 83, "code": "(fn [& bool] (cond (= (count bool) (count (filter #(= true %) bool))) false\n                   (> (count (filter #(= true %) bool)) 0) true\n                   :else false))", "user": "555881f5e4b0deb715856e2c"}, {"problem": 83, "code": "(fn [& args]\n  (boolean\n  \t(and (some true? args)\n    \t (some false? args))))", "user": "5553b924e4b0deb715856e06"}, {"problem": 83, "code": "#(true? (and (some true? %&) (some false? %&)))", "user": "555ac933e4b0deb715856e49"}, {"problem": 83, "code": "(fn [& xs] (and (true? (some true? xs))\n                (not-every? true? xs)))", "user": "5169b23fe4b03f62cda68cee"}, {"problem": 83, "code": "(fn [& xs] (or (and (some true? xs) (not-every? true? xs)) false))", "user": "54857657e4b0e286459a11ac"}, {"problem": 83, "code": "not=", "user": "555287a4e4b0deb715856df5"}, {"problem": 83, "code": "(fn [& mybools] (let [aset (set mybools)] (and (< 1 (count aset)) (contains? aset true))))", "user": "52b89d55e4b07a9af57922b3"}, {"problem": 83, "code": "#(true? (and (some true? %&) (some not %&)))", "user": "52e851bfe4b09f7907dd149a"}, {"problem": 83, "code": "#(and (not-every? true? %&) (not-every? false? %&))\n;(fn [& args] (#(and (not-every? true? %) (not-every? false? %)) (map identity args)))", "user": "55150524e4b055c2f668d4d9"}, {"problem": 83, "code": "(fn [& vars](cond\n             (every? false? vars) false\n  \t\t\t (not-every? true? vars) true\n\t\t\t :else false))", "user": "54fe57f6e4b07d26eda61d42"}, {"problem": 83, "code": "(fn [arg & args] \n  (let [p (into [arg] args)] \n    (and \n     (not-every? true? p) \n     (not-every? false? p))))", "user": "55258b51e4b0ffed3738f90a"}, {"problem": 83, "code": "#(boolean (and (some true? %&) (some false? %&)))", "user": "53571732e4b04ce2eb3ed275"}, {"problem": 83, "code": "(fn \n  [& l]\n  (and (not (every? true? l))\n       (not (every? false? l))))", "user": "535944d6e4b04ce2eb3ed296"}, {"problem": 83, "code": "(fn[& a-list] (cond (every? true? a-list) false (every? false? a-list) false :else true))", "user": "54f296efe4b024c67c0cf8c8"}, {"problem": 83, "code": "(fn [& b]\n  (let [ts (count (filter true? b))]       \n    (and\n      (> ts 0)\n      (< ts (count b)))))", "user": "556159fae4b0c656e3ff17c7"}, {"problem": 83, "code": "(fn [& bools]\n  (if (every? true? bools)\n    false\n    (not-every? false? bools)))", "user": "5550b5a0e4b00713264bd9ad"}, {"problem": 83, "code": "not=", "user": "55634f38e4b0c656e3ff17e8"}, {"problem": 83, "code": "(fn [& bs] (> (count (partition-by true? bs)) 1))", "user": "53f5666ee4b0db01ade6f9cf"}, {"problem": 83, "code": "not=", "user": "555da2c4e4b0a2eb076a39ae"}, {"problem": 83, "code": "(fn [& bool] (and (reduce #(or %1 %2) bool) (not (reduce #(and %1 %2) bool))))", "user": "553fe819e4b0a04f792994fc"}, {"problem": 83, "code": "(fn [& rest] (let [boollist rest] (if (and (some true? boollist) (some false? boollist))\n                                                        true\n                                                        false)))", "user": "554bc64ae4b0a04f79299598"}, {"problem": 83, "code": "not=", "user": "5564c2d3e4b0c656e3ff180e"}, {"problem": 83, "code": "(fn [& xs]\n  (and (not-every? true? xs) (not-every? false? xs)))", "user": "55586905e4b0deb715856e2b"}, {"problem": 83, "code": "(fn bl [opt1 & opt2]\n (let [sequ (cons opt1 opt2)]\n(if(and (.contains sequ true) (.contains sequ false)) true false))\n)", "user": "55382530e4b09218d5f44fdd"}, {"problem": 83, "code": "#(= 2 (count (set %&)))", "user": "55631739e4b0c656e3ff17e2"}, {"problem": 83, "code": "(fn [& bs]\n  (boolean (and (some identity bs)\n                (not (every? identity bs))\n               ))\n       \n  )", "user": "4e28ddd1535deb9a81d77efd"}, {"problem": 83, "code": "#(boolean (and (some identity %&) (some not %&)))", "user": "5540cc0ce4b0a04f79299505"}, {"problem": 83, "code": "(fn f [& args] (let [c (count (filter true? args))] (if (and (> c 0) (< c (count args))) true false)))", "user": "55645592e4b0c656e3ff1802"}, {"problem": 83, "code": "(fn [& l] (and (not (nil? (some identity l))) (not (every? identity l))))", "user": "54f8b6f4e4b01ecee9d8882c"}, {"problem": 83, "code": "(fn [& args]\n  (not \n   (or\n   \t(reduce (fn [a b] (and a b)) args)\n   \t(reduce (fn [a b] (and a b)) (map (fn [n] (= n false)) args))\n    )))", "user": "5568749ae4b0c656e3ff1854"}, {"problem": 83, "code": "(fn [& args]\n  (true? (and \n          (some false? args)\n          (some true? args))))", "user": "55625903e4b0c656e3ff17d7"}, {"problem": 83, "code": "(fn [& args]\n  (and (boolean (some true? args))\n       (boolean (some false? args))\n       ))", "user": "55675a6ce4b0c656e3ff183e"}, {"problem": 83, "code": "(fn [& args] (cond (every? true? args) false (some true? args) true :otherwise false))", "user": "555b35f7e4b0deb715856e4b"}, {"problem": 83, "code": "(fn [& bools] \n  (loop [b bools\n         t false\n         f false]\n    (if (empty? b)\n      (and t f)\n      (recur (rest b) (or t (first b)) (or f (not (first b)))))))", "user": "5560f60ee4b0c656e3ff17c3"}, {"problem": 83, "code": "(fn [& args]\n  (true? (and (some true? args) (some false? args))))", "user": "556a6137e4b09a3098a524e0"}, {"problem": 83, "code": "(fn [& bools]\r\n  (not (nil? (and (some identity bools) (some not bools)))))", "user": "555bd27ae4b0b056612e2244"}, {"problem": 83, "code": "(fn [& booleans]\n    (let [alltrue (reduce #(and %1 %2) booleans)\n          sometrue (reduce #(or %1 %2) booleans)]\n      (and sometrue (not alltrue))))", "user": "554a75c9e4b0a04f79299575"}, {"problem": 83, "code": "( fn f [ & b ] \n   (if-not ( every? identity b )\n     (not= nil (some identity b))\n     false))", "user": "556880dae4b0c656e3ff1856"}, {"problem": 83, "code": "(fn half-true\n  [& args]\n  (if ( > (count (partition-by identity args)) 1)\n    true\n    false))", "user": "52c70127e4b0c2d177d6211a"}, {"problem": 83, "code": "#(if (and (some true? %&) (not-every? true? %&)) true false)", "user": "556b83fbe4b09a3098a524ee"}, {"problem": 83, "code": "(fn [& xs] (= (count (group-by identity xs)) 2))", "user": "5562f08ae4b0c656e3ff17df"}, {"problem": 83, "code": "(fn[& args]\n  (and (boolean (some true? args))  (not-every? true? args)))", "user": "556c70dae4b09a3098a524fd"}, {"problem": 83, "code": "#(true?\n  (and \n   (some true? %&)\n   (some false? %&)))", "user": "553fa883e4b0a04f792994f9"}, {"problem": 83, "code": "not=", "user": "550e52dbe4b06e50f9beb165"}, {"problem": 83, "code": "not=", "user": "5256a1d4e4b0541d1855ba29"}, {"problem": 83, "code": "not=", "user": "5512aca6e4b055c2f668d4b4"}, {"problem": 83, "code": "not=", "user": "556e3b45e4b09a3098a52513"}, {"problem": 83, "code": "(fn [& x] (and (not-every? false? x) (not-every? true? x)))", "user": "5374f931e4b06d7f452d9e2d"}, {"problem": 83, "code": "(fn [& vals] \n  (cond \n   (every? #{true} vals) false\n   (some #{true} vals) true\n\t:else false))", "user": "4ef08bd6535dced4c769f20a"}, {"problem": 83, "code": "(fn [& args] (= false (and (some #{true} args) (every? true? args))))", "user": "50dfc83fe4b061dbdced7229"}, {"problem": 83, "code": "(fn [& args] (not (nil? (and (some true? args) (some false? args)))))", "user": "524f3e6de4b0541d1855b805"}, {"problem": 83, "code": "not=", "user": "4eb0175b535d7eef30807336"}, {"problem": 83, "code": "(fn [& arr] \n   (and \n     (false? (reduce (fn [out v] (and out v)) true arr))\n     (true? (reduce (fn [out v] (or out v)) false arr))\n       ))", "user": "556f443be4b09a3098a5251e"}, {"problem": 83, "code": "(fn [& bools ](boolean (and (some identity bools) (some not bools))))", "user": "556405e5e4b0c656e3ff17fb"}, {"problem": 83, "code": "(fn [& args]\n  (= (->> args set count) 2))", "user": "54a97853e4b09f271ff37cae"}, {"problem": 83, "code": "(fn [& args]\n  (not= 1 (count (distinct args))))", "user": "54c5cc17e4b045293a27f624"}, {"problem": 83, "code": "(fn [& args]\n  (and (not-every? identity args)\n       (or (some identity args) false)))\n\n\n;; since (= 2) is defined on all immutable data structures in Clojure, the following will also work:\n;; not=", "user": "55702081e4b09a3098a52529"}, {"problem": 83, "code": "(fn half-truth [& args]\n(let [num-true (filter #(-> %1) args) ]\n(if (= (count args) (count num-true)) false\n(if (< 0 (count num-true)) true false))\n))", "user": "53c73e8ae4b00fb29b2212a5"}, {"problem": 83, "code": "(fn [& bools] (boolean (and (some true? bools) (not (every? true? bools)))))", "user": "53db43aae4b0e771c30254b1"}, {"problem": 83, "code": "(fn [& args]\n  (if (= 2 (count (distinct args)))\n    true\n    false))", "user": "54d9f7f1e4b024c67c0cf751"}, {"problem": 83, "code": "(fn [& args] (let [t (remove false? args)] (and (> (count t) 0) (not= (count t) (count args)))))", "user": "556a3243e4b09a3098a524de"}, {"problem": 83, "code": "(fn [& args] (true? (and (some true? args) (some false? args))))", "user": "548018dbe4b0c51c1f4d732b"}, {"problem": 83, "code": "(fn [& x] (boolean (and (not-every? true? x) (some true? x))))", "user": "54e345a1e4b024c67c0cf7db"}, {"problem": 83, "code": "(fn [& coll]\n  (true? \n   (and\n    (some true? coll)\n    (not-every? true? coll))))", "user": "53065acbe4b02e8216869792"}, {"problem": 83, "code": "#(not (apply = %&))", "user": "541709b0e4b01498b1a71a06"}, {"problem": 83, "code": "(fn [& booleans] \n  (let [aretrue (filter (fn [b] (= true b)) booleans)]\n    (if (> (count aretrue) 0)\n      (if (= (count aretrue) (count booleans))\n        false\n        true)\n      false)))", "user": "4feb40eee4b0681fd128dc8a"}, {"problem": 83, "code": "(fn [& xs] \n   (true?\n     (and (some (partial = true) xs)\n          (some (partial = false) xs))))", "user": "5573ffb5e4b0aa18f790f3fd"}, {"problem": 83, "code": "#(true? (and (some true? %&) (some false? %&)))", "user": "550fa523e4b06e50f9beb17a"}, {"problem": 83, "code": "#(true? (and (some true? %&) (some false? %&)))", "user": "55306b8ae4b076ab5578f812"}, {"problem": 83, "code": "(fn[& args](if (and (some false? args) (some true? args)) true false))", "user": "5565d5e4e4b0c656e3ff181f"}, {"problem": 83, "code": "(fn [& args]\n  \t(if (every? (fn[x] (= x true)) args)\n      false\n      (reduce (fn [x y] (or x y)) args)\n    )\n\t\n)", "user": "5559b443e4b0deb715856e3c"}, {"problem": 83, "code": "(fn [& args]\n    (and (not (nil? (some #(= true %) args)))\n         (not (every? #(= true %) args))))", "user": "550c55d0e4b06e50f9beb14d"}, {"problem": 83, "code": "#(= (some true? %&) (some false? %&))", "user": "52a4879ce4b0c58976d9abdb"}, {"problem": 83, "code": "(fn[& nums] (and (= true(some true? nums) (not-every? true? nums))))", "user": "55757e81e4b05c286339e063"}, {"problem": 83, "code": "(fn x [& c] (< 0 (count (filter true? c)) (count c)))", "user": "554f7ef2e4b00713264bd9a1"}, {"problem": 83, "code": "(fn[& args] (and (not (every? true? args))    (< 0 (count (filter true? args)  ))     ))", "user": "55654e17e4b0c656e3ff1818"}, {"problem": 83, "code": "#(not (or (empty? (filter identity %&))\n         (empty? (filter (complement identity) %&))\n       ))", "user": "52503747e4b0541d1855b828"}, {"problem": 83, "code": "#(true? \n  (and\n    (some true? %&)\n    (some false? %&)))", "user": "501b1efee4b0b12d9c5f4d82"}, {"problem": 83, "code": "(fn [& args] (and (boolean (some true? args)) (not (every? true? args))))", "user": "4ec6297b535d6d7199dd36c4"}, {"problem": 83, "code": "(fn [& args]\n  (cond (every? true? args) false\n        (some true? args) true\n        :else false))", "user": "541b41d1e4b01498b1a71a65"}, {"problem": 83, "code": "not=", "user": "557954aae4b05c286339e092"}, {"problem": 83, "code": "(fn [& args] (if (some true? args) (not (every? true? args)) false))", "user": "5576f299e4b05c286339e077"}, {"problem": 83, "code": "(fn no83 [& x]\n  (cond (or (empty? x) (= (count x) 1)) false\n        (= (first x) true) (if (some false? x) true false)\n        (= (first x) false) (if (some true? x) true false)))", "user": "55630cc1e4b0c656e3ff17e0"}, {"problem": 83, "code": "#(and (not (nil? (some identity %&)))\n      (not (every? identity %&)))", "user": "4f04664a535dcb61093f6bc1"}, {"problem": 83, "code": "(fn [& args]\n  (let [d (fn f [have-true have-false r]\n\t    (if (and have-true have-false)\n    \t  true\n          (if (empty? r)\n            false\n            (let [c (first r)\n                  r (rest r)]\n              (if c\n                (f true have-false r)\n                (f have-true true r))))))]\n    (d false false args)))", "user": "5195fadee4b04c0af7ff3c11"}, {"problem": 83, "code": "(fn [& liste]\n   (if (or \n         (= (count liste) (count (remove not liste))) \n         (not (reduce #(or %1 %2) liste))\n        ) \n     false \n     true\n    ) \n)", "user": "556f2009e4b09a3098a52519"}, {"problem": 83, "code": "#(true?\n(and\n(some true? %&)\n(some false? %&)))\n;; %& stands for all argument as sequence\n;; some: Returns the first logical true value of (pred x) for any x in coll, else nil.", "user": "54dd8a8ae4b024c67c0cf795"}, {"problem": 83, "code": "(fn [& xs]\n    (and (not= nil (some identity xs)) (not (every? identity xs))))", "user": "558306dfe4b05c286339e110"}, {"problem": 83, "code": "(fn [& xs] (if (every? true? xs) false \n             (if-not (some true? xs) false true)))", "user": "554bced1e4b0a04f79299599"}, {"problem": 83, "code": "not=", "user": "545ddac3e4b01be26fd74676"}, {"problem": 83, "code": "#(not (apply = %&))\n\n#_(fn [& x] (-> (reduce #(conj % %2) #{} x) count (> 1)))", "user": "54e1939ce4b024c67c0cf7c5"}, {"problem": 83, "code": "(fn [& args] (= #{true false} (set args)))", "user": "555883c5e4b0deb715856e2d"}, {"problem": 83, "code": "(fn [ & bs]\n  (boolean (and (some false? bs) (some true? bs))))", "user": "5579bc24e4b05c286339e098"}, {"problem": 83, "code": "(fn [& l]\n    (if (> (count l) (count (filter #(true? %) l)) 0) true false))", "user": "52979551e4b02ebb4ef75043"}, {"problem": 83, "code": "(fn [& args] (boolean (and (some true? args) ((complement every?) true? args))))", "user": "548ce2dbe4b0e286459a1212"}, {"problem": 83, "code": "#(cond\n  (every? true? %&) false\n  (some true? %&) true\n  :else false)", "user": "51bfc1f0e4b0e49ef9037dd4"}, {"problem": 83, "code": "(fn asdf [& x] (= (set x) #{true false}))", "user": "557e8326e4b05c286339e0d7"}, {"problem": 83, "code": "(fn [& args] (and (or (some identity args) false) (or (some (comp not identity) args) false)))", "user": "5550bcece4b00713264bd9ae"}, {"problem": 83, "code": "(fn [& args]\n  (if (= (filter true? args) args) false\n    (if (empty? (filter true? args)) false\n      true)))", "user": "558378dce4b05c286339e115"}, {"problem": 83, "code": "not=", "user": "5585aa48e4b001b0851d7510"}, {"problem": 83, "code": "(fn [& bools] (if (and (some true? bools) (not-every? true? bools)) true false))", "user": "506f0968e4b09350ab4199f5"}, {"problem": 83, "code": "(fn half-truth\n[& z]\n(and (not-every? true? z) (not-every? false? z)))", "user": "557e9d17e4b05c286339e0d8"}, {"problem": 83, "code": "#(= (some false? %&) (some true? %&))", "user": "5566463ee4b0c656e3ff1831"}, {"problem": 83, "code": "not=", "user": "54bad977e4b0ed20f4ff6eb9"}, {"problem": 83, "code": "(fn [& arglist] (and (not-every? identity arglist) (boolean (some true? arglist))))", "user": "558466fce4b04192f3441eee"}, {"problem": 83, "code": "(fn [& params] (and (true? (some true? params)) (not (every? true? params))))", "user": "55647a31e4b0c656e3ff1808"}, {"problem": 83, "code": "not=", "user": "52032921e4b030ee0c5b2713"}, {"problem": 83, "code": "#(true? \n  (and\n    (some true? %&)\n    (some false? %&)))", "user": "55896a0ce4b059ccff29b204"}, {"problem": 83, "code": "(fn [& e] \n(= 2 (count (apply distinct (list e)))))", "user": "52c911dde4b0c2d177d6213a"}, {"problem": 83, "code": "(fn [& seq] (and (contains? (into #{} seq) true) (> (count (into #{} seq)) 1)))", "user": "5589e88ae4b0277789237610"}, {"problem": 83, "code": "(fn [& rest]\n  (let [n (count rest)\n        t (reduce + (map #(if % 1 0) rest))]\n    (and (> n t) (> t 0))))", "user": "558bb38fe4b0277789237631"}, {"problem": 83, "code": "(fn [& args] (and (not-every? false? args) (not-every? true? args)))", "user": "554a270fe4b0a04f79299570"}, {"problem": 83, "code": "(fn [& x]\n  (if (= (count x) (count (filter true? x)))\n    false\n    ((complement empty?) (filter true? x))))", "user": "54cbd6bae4b057c6fda3a282"}, {"problem": 83, "code": ";(fn [& bs]\n;  (not (apply = bs)))\n\n;not=\n\n;(fn [b & bs]\n;  (loop [bs bs]\n;    (cond \n;      (empty? bs) false\n;      (not= (first bs) b) true\n;      :else (recur (rest bs)))))\n\n(fn some-true? [& bs]\n  (loop [[b & bs] bs t? 1 f? 1]\n    (cond \n      (and (not= t? f? 1) (= t? f?)) true\n      (nil? b) (not (or (= t? 1) (= f? 1)))\n      b (recur bs true f?)\n      :else (recur bs t? true))))", "user": "54dce62be4b024c67c0cf78b"}, {"problem": 83, "code": "(fn hlftru\n  [& args]\n  (and (not (every? #(identity %) args))\n       (not (every? #(not (identity %)) args))))", "user": "5545477fe4b0a04f79299531"}, {"problem": 83, "code": "#(= 2 (count (set %&)))", "user": "552a793ee4b0ffed3738f955"}, {"problem": 83, "code": "(fn [& params]\n    (true? (and (some true? params)\n        \t(not-every? true? params))))", "user": "556ff203e4b09a3098a52526"}, {"problem": 83, "code": "(fn [& b] (and (not-every? false? b) (not (every? true? b))))", "user": "4f070ce6535dcb61093f6c1e"}, {"problem": 83, "code": "#(if (and (some true? %&) (some false? %&)) true false)", "user": "558b50d5e4b027778923762b"}, {"problem": 83, "code": "(fn [& more] (true? (and (some true? more) (some false? more))))", "user": "55632016e4b0c656e3ff17e4"}, {"problem": 83, "code": "not=", "user": "5589a735e4b059ccff29b206"}, {"problem": 83, "code": "(fn [& coll]\n   (let [length (count coll)]\n     (cond (= length 0) false\n           (= (count (filter true? coll)) length) false\n           (some true? coll) true\n           :else false)))", "user": "55860905e4b001b0851d7516"}, {"problem": 83, "code": "not=", "user": "50d0d2dde4b00b15ecee9768"}, {"problem": 83, "code": "(fn [& args]\n  (let [l (count args), t (count (filter true? args))]\n    (and\n     (> l 0)\n     (> t 0)\n     (< t l))))", "user": "5590e55de4b0277789237676"}, {"problem": 83, "code": "(fn mysome\n  [& args]\n  (and (= (some true? args) true) (= (some false? args) true) ))", "user": "55897fe2e4b059ccff29b205"}, {"problem": 83, "code": "(fn [& args]\n  (let [uniques (into #{} args)]\n    (and (contains? uniques true) (contains? uniques false))))", "user": "54d22860e4b0e8a36923e5ef"}, {"problem": 83, "code": "not=", "user": "558d7dd3e4b0277789237647"}, {"problem": 83, "code": "#(true? (and (some true? %&) (some false? %&)))", "user": "557f7c8be4b05c286339e0e0"}, {"problem": 83, "code": "not=", "user": "54dce6dbe4b024c67c0cf78d"}, {"problem": 83, "code": "(fn half-truth [& args]\n  (and (not (every? identity args)) (true? (some identity args))))", "user": "551afdf8e4b07993ea3788cb"}, {"problem": 83, "code": "#(> (count (distinct %&)) 1)", "user": "53e76363e4b036ad0777e47b"}, {"problem": 83, "code": "not=", "user": "552f300fe4b076ab5578f7ff"}, {"problem": 83, "code": "(fn [& a]\n  (= '(false true) (sort (distinct a))))", "user": "559279b7e4b0604b3f94d58c"}, {"problem": 83, "code": "(fn [& args] (boolean (and (some true? args) (some false? args))))", "user": "531c6e72e4b08068f379eda0"}, {"problem": 83, "code": "(fn [& args] (if (and (some true? args) (not (apply (partial = true) args)))\n               true\n               false))", "user": "55895eade4b059ccff29b202"}, {"problem": 83, "code": "(fn [& vars]\n  (cond\n   (every? true? vars) false\n   (some true? vars) true\n   :else false))", "user": "525873e8e4b0cb4875a45cb2"}, {"problem": 83, "code": "(fn [& xs] (and (false? (every? true? xs)) (false? (every? false? xs))))", "user": "5590ebb1e4b0277789237677"}, {"problem": 83, "code": "#(not (apply = %&))", "user": "558f4fbae4b0277789237661"}, {"problem": 83, "code": "(fn[& c](let[m (group-by identity c)](and (not (empty? (m true))) (not (empty? (m false))))))", "user": "555c6344e4b0b056612e224c"}, {"problem": 83, "code": "(fn [& bs]\n   (and (not (every? identity bs))\n        (not (every? not bs))))", "user": "52f53589e4b05e3f0be25f2c"}, {"problem": 83, "code": "(fn [& args]\n      (and (not (reduce #(and %1 %2) args))\n           (reduce #(or %1 %2) args)))", "user": "55893b09e4b059ccff29b1fe"}, {"problem": 83, "code": "(fn myf [ & a ] (if (reduce #(and %1 %2) a) false (reduce #(or %1 %2) a)))", "user": "5576e78de4b05c286339e075"}, {"problem": 83, "code": "(fn [& args]\n  (if (reduce #(and %1 %2) args)\n    false\n    (reduce #(or %1 %2) args)))", "user": "54530382e4b0e397800069cc"}, {"problem": 83, "code": "not=", "user": "55933c7ae4b0c79f6e1db938"}, {"problem": 83, "code": "(fn [& bools] (if (< 1 (count (into #{} bools))) true false))", "user": "54eca495e4b024c67c0cf855"}, {"problem": 83, "code": "(fn [& bs]\n  (and (false? (every? identity bs))\n       (true? (some identity bs))))", "user": "55995fa7e4b031d6649c9ba9"}, {"problem": 83, "code": "(fn [x & y] (and (not-every? true? (remove nil? (flatten (list x y)))) (not-every? false? (remove nil? (flatten (list x y))))))", "user": "5581a6dae4b05c286339e0fe"}, {"problem": 83, "code": "(fn [& vals] (cond (apply = vals) false\n                   (some true? vals) true))", "user": "5592bf9fe4b0c79f6e1db933"}, {"problem": 83, "code": "not=", "user": "5585f088e4b001b0851d7513"}, {"problem": 83, "code": "(fn [ & xs ] (= (set xs) #{ true false }))", "user": "4fdb0c0ae4b05e33b9224f57"}, {"problem": 83, "code": "(fn [& args] (= 2 (count (set args))))", "user": "55496eeae4b0a04f79299569"}, {"problem": 83, "code": "(fn [& xs]\n    (if (and (some true? xs) \n             (some false? xs)) true \n        false))", "user": "4e6a23d0535d8ccf87e9fea0"}, {"problem": 83, "code": "(fn [& bools]\n  (<= 1 (apply + (map #(if % 1 0) bools)) (dec (count bools))))", "user": "55934bebe4b0c79f6e1db93b"}, {"problem": 83, "code": "#(true? \n  (and\n    (some true? %&)\n    (some false? %&)))", "user": "55882c84e4b059ccff29b1f2"}, {"problem": 83, "code": "(fn [& B]\n  (= (count (set B)) 2))", "user": "559c13c5e4b066d22e731f61"}, {"problem": 83, "code": "(fn [& coll]\n  (let [len (count coll)\n        truths (count (filter #(= true %) coll))]\n    (and (> truths 0) (> len truths))))", "user": "555ee545e4b0a2eb076a39bd"}, {"problem": 83, "code": "(fn [& args]\n  (let [f (fn iter [xs b]\n             (if (empty? xs) \n\t\t\t   (if (= 0 b) false (not (= (count args) b)))\n\t\t\t   (iter (rest xs) (if (first xs) (inc b) b))))]\n\t(if (empty? args)\n\t  (if (first args) false true)\n\t  (f (rest args) (if (first args) 1 0)))))", "user": "5583888ae4b05c286339e117"}, {"problem": 83, "code": "(fn [& x](= #{true false} ( set x )))", "user": "5592c56ee4b0c79f6e1db934"}, {"problem": 83, "code": "(fn [a & the-rest]\n  (let [_ [a the-rest]\n        bools (set (flatten _))]\n    (if (= bools #{true false})\n      true\n      false\n      )\n   ))", "user": "54dbe183e4b024c67c0cf778"}, {"problem": 83, "code": "(fn [& x] (not= (reduce #(or % %2) x)(reduce #(and % %2) x)))", "user": "55818b0ee4b05c286339e0fb"}, {"problem": 83, "code": "(fn [& args]\n  (cond \n   (every? true? args) false\n   (some true? args) true\n   :else false))", "user": "559bdf16e4b066d22e731f5a"}, {"problem": 83, "code": "(fn [& args]\n  (and (not (nil? (some #(= true %) args)))\n       (not (nil? (some #(= false %) args)))))", "user": "559d33b3e4b0ec2b359424d9"}, {"problem": 83, "code": "(fn [& args]\n    (and (not-every? true? args)\n         (not-every? false? args)\n     )\n)", "user": "5595c60ee4b0c79f6e1db96f"}, {"problem": 83, "code": "(fn [& args](not (empty? (rest (distinct (map boolean args))))))", "user": "53e73fe3e4b036ad0777e478"}, {"problem": 83, "code": "(fn [& bools]\n        (and (not= #{true} (set bools))\n             (contains? (set bools) true)))", "user": "5369d072e4b0243289761ea1"}, {"problem": 83, "code": "#(= (count (group-by true? %&)) 2)", "user": "559b2ad1e4b066d22e731f4e"}, {"problem": 83, "code": "(fn [& args] \n  (let [numtrue (count (filter true? args))]\n                                 (and (> (count args) numtrue) (> numtrue 0))))", "user": "5376f0d0e4b06839e8705e2c"}, {"problem": 83, "code": "(fn [x & y] (not (every? #(= x %) y)))", "user": "5596af34e4b04c1e5c31d758"}, {"problem": 83, "code": "(fn [& rest] (boolean (and (some true? rest) (not-every? true? rest))))", "user": "55306f9de4b076ab5578f814"}, {"problem": 83, "code": "(fn [& bools] \n  (let [trues (filter true? bools)]\n  \t(cond \n     (= trues bools) false\n     (empty? trues) false\n     :else true)))", "user": "55a12668e4b0acc240e3150b"}, {"problem": 83, "code": "(fn [& more] \n  (let [s (set more)]\n    (every? (complement nil?) [(s true) (s false)])))", "user": "54b972bbe4b0ed20f4ff6ead"}, {"problem": 83, "code": "(fn [& args] (>= (count (distinct args)) 2))", "user": "559972d1e4b031d6649c9bab"}, {"problem": 83, "code": "(fn [& args](cond (every? true? args) false (some true? args) true :else false))", "user": "55a0d7e0e4b0acc240e31503"}, {"problem": 83, "code": "(fn [& bools]\n  (= 2 (count (distinct bools))))", "user": "548c6673e4b0e286459a1209"}, {"problem": 83, "code": "(fn [& var] (true? (and (some not var) (some identity var))))", "user": "559e25fde4b08a52bd4f97d0"}, {"problem": 83, "code": "(fn \n  [& args]\n  (if (every? true? args)\n    false\n    (if (every? false? args)\n      false\n      true)))", "user": "557e2eafe4b05c286339e0d2"}, {"problem": 83, "code": "(fn [& v] (and (not (nil? (some #{true} v))) (not (nil? (some false? v)))))", "user": "559a8816e4b066d22e731f41"}, {"problem": 83, "code": "#(and (not= nil (some true? %&)) (not-every? true? %&))", "user": "559c3d73e4b066d22e731f65"}, {"problem": 83, "code": "(fn [init & rest] \n         (loop [i-list rest res false]\n           (if (or (empty? i-list) res)\n             res\n             (recur (drop 1 i-list)\n                    (not= init (first i-list))\n             )\n           )\n       ))", "user": "55989c25e4b031d6649c9b9b"}, {"problem": 83, "code": "(fn half-truth\n  [& bools]\n  (let [s (set bools)]\n    (and (contains? s true)\n         (contains? s false))))", "user": "50ec409ce4b04edc33777045"}, {"problem": 83, "code": "(fn [& args] (boolean (and (some true? args)\n                           (some false? args))))", "user": "55a1d7f6e4b0acc240e31519"}, {"problem": 83, "code": "(fn [& coll]\n(not (or (every? true? coll) (every? false? coll) )))", "user": "5594e0e3e4b0c79f6e1db95b"}, {"problem": 83, "code": "(fn [& args] (=  (set args) #{true false} ) )", "user": "55a21be1e4b0acc240e3151e"}, {"problem": 83, "code": "not=", "user": "503e91d4e4b06c4e0e1fa269"}, {"problem": 83, "code": "(fn [& args] \n  (= true \n     (and \n      \t(some true? args) \n        (some false? args))))", "user": "559b55d6e4b066d22e731f54"}, {"problem": 83, "code": "(fn [& bools]\n  (if (and (some true? bools) (some false? bools))\n    true\n    false))", "user": "54a627bce4b09f271ff37c83"}, {"problem": 83, "code": "#(= 2 (count (distinct %&)))", "user": "55a74d46e4b09e57187da2a3"}, {"problem": 83, "code": "(fn\n  [& args]\n  (cond\n    (every? true? args) false\n    (some true? args) true\n    :else false))", "user": "5574c172e4b05c286339e059"}, {"problem": 83, "code": "(fn [& vals]\n   (if (and (some true? vals) (not (every? true? vals)))\n     true\n     false))", "user": "53c0f4dee4b00fb29b221259"}, {"problem": 83, "code": "not=", "user": "51e8736ae4b006d205356a4f"}, {"problem": 83, "code": "(fn [& a]  (and    (not (reduce #(and %1 %2) a))   (reduce #(or %1 %2) a)  )  )", "user": "559eb160e4b0acc240e314e1"}, {"problem": 83, "code": "(fn [& args] \n  (let [a (sort args)]\n    (not= (first a) (last a))))", "user": "55929e89e4b0604b3f94d58e"}, {"problem": 83, "code": "(fn [& c]\n  (let [not-empty? (complement empty?)]\n\t  (and\n   \t\t(not-empty? (filter true? c))\n   \t\t(not-empty? (filter false? c)))))", "user": "553527ede4b09218d5f44fab"}, {"problem": 83, "code": "#(apply not= %&)", "user": "52b666bfe4b0c58976d9ad44"}, {"problem": 83, "code": "#(boolean (and (some identity %&) (not-every? identity %&)))", "user": "55aa5f73e4b0988bba2ad94b"}, {"problem": 83, "code": "(fn [& x](and (not-every? true? x) (not-every? false? x)))", "user": "54117417e4b01498b1a719c5"}, {"problem": 83, "code": "(fn [& args] (not (= (count(distinct args)) 1)))", "user": "55a30e9de4b0acc240e3152f"}, {"problem": 83, "code": "(fn [& args]\n  (if (and (some true? args) (some false? args))\n    true\n    false))", "user": "55aaa36fe4b0988bba2ad94f"}, {"problem": 83, "code": "(fn [& bs]\n  (every? true? [(some true? bs) (some false? bs)]))", "user": "5416b4a2e4b01498b1a71a01"}, {"problem": 83, "code": "(fn half-true\n  [& bools]\n    (if-let [truthy (seq (filter true? bools))]\n      (not (empty? (remove true? bools)))\n      false))", "user": "5553b729e4b0deb715856e05"}, {"problem": 83, "code": "(fn [f & args] \n  (let [xs (cons f args) \n        truthy-vals (filter (fn [e] (if e true false)) xs)]\n    (if (and (seq truthy-vals) (not (= truthy-vals xs))) true false)))", "user": "55a1ba5ee4b0acc240e31517"}, {"problem": 83, "code": "#(if (and (some true? %&) (some false? %&)) true false)", "user": "559a9a3de4b066d22e731f45"}, {"problem": 83, "code": "(fn [& coll]\n    (and (boolean (some true? coll)) (boolean (some false? coll))))", "user": "55ac07afe4b03311e7b7328f"}, {"problem": 83, "code": "(fn f [& bools]\n  (true? (and (some true? bools) (some false? bools))))", "user": "55a62092e4b0acc240e31554"}, {"problem": 83, "code": "(fn [& cl] (let [nt (count (for [v cl :when (= true v)] v)), m (count cl)] (and (< 0 nt) (not= nt m) ))\n )", "user": "55adf4d7e4b03311e7b732af"}, {"problem": 83, "code": "(fn [& b] (not (apply = b)))", "user": "554756b8e4b0a04f79299549"}, {"problem": 83, "code": "#(true? (and (not (not-any? false? %&)) (some true? %&)))", "user": "55b08677e4b002ce9d5cbc23"}, {"problem": 83, "code": "(fn [& args]\n  (if (and (some true? args)\n           (some false? args))\n    true\n    false))", "user": "54c120d7e4b0ed20f4ff6f1c"}, {"problem": 83, "code": "(fn [& s] (boolean (and (some false? s) (some true? s))))", "user": "55a5c3bee4b0acc240e3154e"}, {"problem": 83, "code": "(fn p83 [& args]\n  (not= (count args) (or (get (frequencies args) true) (get (frequencies args) false))))", "user": "5400e918e4b0de5c41848619"}, {"problem": 83, "code": "(fn [& args] (not (or (every? false? args) (every? true? args))))", "user": "559c4236e4b066d22e731f67"}, {"problem": 83, "code": "(fn [& arr]\n  (and\n   (if\n    (some true? arr) true false)\n   (not-every? true? arr)))", "user": "55ae5e66e4b03311e7b732bb"}, {"problem": 83, "code": "(fn [& args] \n  (and (= (some true? args) true) (= (some false? args) true)))", "user": "55b2088ae4b0da326a65cf75"}, {"problem": 83, "code": "(fn [& args] (and (not (= (some true? args) nil)) (not (every? true? args))))", "user": "5448616be4b032a45b8693c9"}, {"problem": 83, "code": "#(boolean (and (some true? %&) (some false? %&)))", "user": "553093bee4b076ab5578f817"}, {"problem": 83, "code": "(fn [& xs]\n  (if (every? identity xs)\n    false\n    (true? (some true? xs))))", "user": "55b25970e4b0da326a65cf7e"}, {"problem": 83, "code": "#(and (true? (some true? (concat %&))) (not-every? true? (concat %&)))", "user": "54236ce1e4b01498b1a71ad1"}, {"problem": 83, "code": "(fn [& a] (and (reduce #(or %1 %2) a) (not (reduce #(and %1 %2) a))))", "user": "55975569e4b031d6649c9b8e"}, {"problem": 83, "code": "(fn [& x]\n   (and (boolean (some identity x)) (not-every? identity x)))", "user": "5587cd86e4b059ccff29b1e6"}, {"problem": 83, "code": ";(fn [& args] (and (not (apply = args)) (some true? args)))\n#(true? \n  (and\n    (some true? %&)\n    (some false? %&)))", "user": "53e9dce1e4b036ad0777e4bc"}, {"problem": 83, "code": "(fn [& rest1] (not (or (reduce #(and %1 %2) rest1) (not (reduce #(or %1 %2) rest1)))))", "user": "55a0e139e4b0acc240e31504"}, {"problem": 83, "code": "(fn [& args] (= 2 (count (set args))))", "user": "516f5b7ee4b0ef3e37990e7e"}, {"problem": 83, "code": "#(= (set %&) #{true false})", "user": "55aa7c5ce4b0988bba2ad94d"}, {"problem": 83, "code": "#(and (not= nil (some true? %&)) (not-every? true? %&))", "user": "556204c2e4b0c656e3ff17d2"}, {"problem": 83, "code": "(fn [& items] \n\t(and (not-every? #{true} items) (not-every? (fn [item] (false? item)) items)))", "user": "55bbfd60e4b01b9910ae29ed"}, {"problem": 83, "code": "not=", "user": "55b1e9e7e4b0da326a65cf74"}, {"problem": 83, "code": ";; better solution is not=\n(fn [& args]\n  (let [x (reduce + (map #(if % 1 0) args))]\n    (and (> x 0)\n         (< x (count args))))\n  )", "user": "52cb6bb0e4b07d0d72b2734c"}, {"problem": 83, "code": "(fn [& args]\n    (let [s (set args)] \n      (and (contains? s true) (contains? s false) )))", "user": "55aa1637e4b0988bba2ad949"}, {"problem": 83, "code": "not=", "user": "55be39f9e4b01b9910ae2a06"}, {"problem": 83, "code": "(fn [& args]\n  (if (every? identity args)\n    false\n    (not (nil? (some identity args)))))", "user": "55afc197e4b002ce9d5cbc18"}, {"problem": 83, "code": "(fn\n  [& x]\n  (if (apply = x)\n    false\n    (if (= 0 (count (filter true? x)))\n      false\n      true )))", "user": "55b3c03ee4b01b9910ae2975"}, {"problem": 83, "code": "(fn [& args]\n  (true? (and (some false? args) (some true? args))))", "user": "55868660e4b059ccff29b1d4"}, {"problem": 83, "code": "(fn [& bools]\n  (if \n    (and\n     (some true? bools)\n     (not-every? true? bools))\n    true\n    false))", "user": "55b107fee4b002ce9d5cbc2a"}, {"problem": 83, "code": "(fn [& args]\n  (= (set args) #{true false}))", "user": "555f3bfde4b0a2eb076a39c1"}, {"problem": 83, "code": "#(not (or (every? false? %&) (every? true? %&)))", "user": "55bfc39ee4b01b9910ae2a1a"}, {"problem": 83, "code": "(fn [& bools]\n  (let [any #(some identity %)\n        all #(every? identity %)]\n    (boolean (and (any bools) (not (all bools))))))", "user": "549dfe40e4b0f3d1d8e70f9a"}, {"problem": 83, "code": "(fn half-truth [& args]\n  (not (empty? (drop-while (partial = (first args)) args))))", "user": "55c0afa5e4b01b9910ae2a27"}, {"problem": 83, "code": "(fn [& args] (= 2 (count (distinct args))))", "user": "55c10409e4b01b9910ae2a2c"}, {"problem": 83, "code": "(fn [& args] \n  (and \n   (if (nil? (some true? args)) false (some true?  args))\n   (not (every? true? args))))", "user": "4f7d91e6e4b06e829148e1c3"}, {"problem": 83, "code": "(fn [& args] (= 2 (count (group-by true? args))))", "user": "55c1eb52e4b0e31453f64970"}, {"problem": 83, "code": "(fn [& args]\n  (let [res (group-by true? args)]\n    (and (-> (get res true)\n             (count)\n             (>= 1))\n         (-> (get res false)\n             (count)\n             (>= 1)))))", "user": "5586f418e4b059ccff29b1de"}, {"problem": 83, "code": "(fn f [& xs]\n  (if (and (some true? xs) (some false? xs))\n    true\n    false))", "user": "549c6792e4b0f3d1d8e70f8b"}, {"problem": 83, "code": "(fn [& bools] (and (reduce #(or %1 %2) bools) (not (reduce #(and %1 %2) bools))))", "user": "559454f2e4b0c79f6e1db952"}, {"problem": 83, "code": "(fn [& parms] (if (and (some true? parms) (not-every? true? parms)) true false))", "user": "4fffa422e4b0678c553fc404"}, {"problem": 83, "code": "(fn [& bools] (true? (and \n              \t\t\t(some true? bools) \n              \t\t\t(some false? bools))))", "user": "517e9526e4b09104ecebe7e2"}, {"problem": 83, "code": "not=", "user": "55c4e48be4b0e31453f649a7"}, {"problem": 83, "code": "(fn [& a] \n   (and (> (count (filter false? a)) 0) (> (count (filter true? a)) 0))\n)", "user": "55c387e4e4b0e31453f6498b"}, {"problem": 83, "code": "(fn [& stuff]\n  (boolean (and (some identity stuff) (not (every? identity stuff)))))", "user": "55c313a0e4b0e31453f64986"}, {"problem": 83, "code": "(fn [& args] (->> (and (some true? args) (not-every? true? args)) boolean))", "user": "55b8c339e4b01b9910ae29b9"}, {"problem": 83, "code": "(fn [& rest]\n       (and\n         (boolean (some true? rest))\n         (not-every? true? rest)\n         )\n       )", "user": "55c3149de4b0e31453f64987"}, {"problem": 83, "code": "(fn [& coll] (if (not (every? identity coll)) \n               (if (some identity coll)\n                 true\n                 false)\n               false))", "user": "54b817eee4b0ed20f4ff6e93"}, {"problem": 83, "code": "(fn [& items] (\n\tand\n\t(not-every? true? items)\n\t(reduce (fn [old new] (or old new)) items)\n))", "user": "552456e3e4b0882d96d091c2"}, {"problem": 83, "code": "(fn [& bools] (and (not (nil? (some identity bools))) (not (every? identity bools))))", "user": "55c2b95de4b0e31453f64980"}, {"problem": 83, "code": "(fn [& sq] (and \n            (not-every? true? sq)     \n            (true? (some true? sq))))", "user": "553f70cae4b0a04f792994f8"}, {"problem": 83, "code": "(fn [& y] \n    (and \n     \t(not-every? true? y)\n        (not-every? false? y)\n    )\n )", "user": "55c77070e4b0e31453f649d0"}, {"problem": 83, "code": "(fn \n  [& v]\n  (if (and\n      (not-empty (filter identity v))\n      (not-empty (filter not v) )\n      )\n  true\n  false)\n)", "user": "55bb7546e4b01b9910ae29e7"}, {"problem": 83, "code": "not=", "user": "55c652dde4b0e31453f649bd"}, {"problem": 83, "code": "(fn [& args] (and (not (not-any? true? args)) (not-every? true? args)))", "user": "55ca4273e4b0e31453f649f9"}, {"problem": 83, "code": "#(and (< 0 (count (filter true? (flatten (vector %&)))))\n       (< 0 (count (filter false? (flatten (vector %&))))))", "user": "54b5b3cce4b05787c3b163ab"}, {"problem": 83, "code": "(fn [x & xs]\n  (let [xs (set xs)]\n    (if x\n      (contains? xs false)\n      (contains? xs true))))", "user": "55ba4a78e4b01b9910ae29cf"}, {"problem": 83, "code": "(fn [& coll]\n  (let [sum (reduce + (map #(if (true? %) 1 0) coll))]\n    (< 0 sum (count coll))))", "user": "54f4ab86e4b0f2f3c5226e84"}, {"problem": 83, "code": "(fn [& args] (= 2 (count (group-by true? args))))", "user": "5582dfb6e4b05c286339e10d"}, {"problem": 83, "code": "(fn [& ls] (if (and (some true? ls) (some false? ls)) true false))", "user": "51910da7e4b0f8ef0be96bf9"}, {"problem": 83, "code": "(fn [& lst] (and (not (not (some identity lst))) \n                 (not (every? identity lst))))", "user": "55c20bd0e4b0e31453f64972"}, {"problem": 83, "code": "#(boolean (and (some identity %&) (not (apply = true %&))))", "user": "546e1142e4b00cfc9eacc199"}, {"problem": 83, "code": "(fn [& args]\n  (= 2 (count (into #{} args))))", "user": "55caabd1e4b0e31453f649fb"}, {"problem": 83, "code": ";#(->> %& (reduce (fn [[t f] x] [(or t (true? x)) (or f (false? x))]) [false false]) (every? true?))\n(comp (partial every? true?) (juxt (partial some true?) (partial some false?)) list)\n;#(let [n (apply + (map {true 1, false 0} %&))] (and (pos? n) (< n (count %&))))\n;#(let [n (count (filter true? %&))] (and (pos? n) (< n )))\n\n;not=", "user": "55cdc576e4b0e31453f64a1f"}, {"problem": 83, "code": "not=", "user": "55d17198e4b0e31453f64a45"}, {"problem": 83, "code": "(fn logic\n  [a & b]\n  (let [m (frequencies (concat [a] (seq b))) ]\n  (if (and  (> (get m false 0) 0) (> (get m true 0) 0))\n  true\n  false)))", "user": "55c9bc1ee4b0e31453f649f1"}, {"problem": 83, "code": "#(and (not (apply = %&))\n      ((set %&) true))", "user": "55d0e76ae4b0e31453f64a40"}, {"problem": 83, "code": "#(= (set %&) #{true false})", "user": "55cae949e4b0e31453f649fe"}, {"problem": 83, "code": "(fn [& x]\n  (and (not (every? true? x))\n       (not (every? false? x))))", "user": "55c68089e4b0e31453f649c4"}, {"problem": 83, "code": "#(not (or (every? true? %&) (every? false? %&)))\n\n;not=", "user": "55236ad6e4b0882d96d091b1"}, {"problem": 83, "code": "#(and (not= nil (some true? %&)) (not-every? true? %&))", "user": "5589a941e4b059ccff29b207"}, {"problem": 83, "code": "(fn [& xs] (true? (and (some true? xs) (not (every? true? xs)))) )", "user": "55cdd76ae4b0e31453f64a20"}, {"problem": 83, "code": "(fn [& s] (and (not (reduce #(and %1 %2) true s)) (reduce #(or %1 %2) false s)))", "user": "55b0f5bfe4b002ce9d5cbc28"}, {"problem": 83, "code": "(fn [& xs] (not (or (every? false? xs) (every? true? xs))))", "user": "55773cbae4b05c286339e07f"}, {"problem": 83, "code": "(fn [& bools]\n  (and\n   (not (nil? (some identity bools)))\n   (not (every? identity bools))))", "user": "54a1f494e4b09f271ff37c52"}, {"problem": 83, "code": "(fn [& bools]\n  (loop [bs bools\n         seen-true false\n         seen-false false]\n    (if (empty? bs)\n      (and seen-true seen-false)\n      (if (true? (first bs))\n        (recur (rest bs) (or true seen-true) seen-false)\n        (recur (rest bs) seen-true (or true seen-false))))))", "user": "55d4dddde4b0e31453f64a7f"}, {"problem": 83, "code": "(fn [ & ar]\n  (if (and (some true? ar) (some false? ar))\n    true\n    false))", "user": "541ddadbe4b01498b1a71a84"}, {"problem": 83, "code": "(fn [& x] (and (not (every? true? x)) (true? (some true? x))))", "user": "4eb171d7535d7eef30807340"}, {"problem": 83, "code": "(fn [& xs]\n  (let [xs' (sort xs)]\n    (not= (first xs') (last xs'))))", "user": "55d5e80ee4b0e31453f64a91"}, {"problem": 83, "code": "(fn [& l]\n  (let [len-true (count (filter true? l))]\n    (if (> len-true 0)\n      (not= len-true (count l))\n      false\n      )\n    ))", "user": "54c9571ee4b045293a27f66b"}, {"problem": 83, "code": "(fn [ & values ]\n  (loop [[current & remainder] values\n         one-true false\n         all-true true]\n    (if (empty? remainder)\n      (if (and current all-true)\n        false\n        one-true)\n      (recur\n       remainder\n       (or current one-true)\n       (and current all-true)))))", "user": "55d06bcbe4b0e31453f64a3a"}, {"problem": 83, "code": "(fn [& bools]\n  (boolean (and (some true? bools) (some false? bools))))", "user": "55d6a2ebe4b0e31453f64a9a"}, {"problem": 83, "code": "(fn [& args] (let [x (sort args)] (and (not (first x)) (last x)) ))", "user": "4f435ee8e4b0d7d3c9f3fd1f"}, {"problem": 83, "code": "(fn [& b]\n   (if\n       (and\n        (some #(= true %) b)\n        (some #(= false %) b))\n     true\n     false))", "user": "55a19e19e4b0acc240e31515"}, {"problem": 83, "code": "(fn [& args] (if (nil? (and (some false? args) (some true? args))) false true))", "user": "5564c113e4b0c656e3ff180d"}, {"problem": 83, "code": "(fn half-true? [& bools]\n  (and\n   (not (empty? (filter true? bools)))\n   (not (empty? (filter false? bools)))))", "user": "5561d2c2e4b0c656e3ff17cd"}, {"problem": 83, "code": "(fn [& x] ( > (* (count (filter #(= true %) x)) (count (filter #(= % false) x)) ) 0))", "user": "55d35a01e4b0e31453f64a63"}, {"problem": 83, "code": "#(and (not-every? identity %&) (boolean (some identity %&)))", "user": "55d1b565e4b0e31453f64a49"}, {"problem": 83, "code": "(fn [& coll]\n   (cond\n     (reduce #(and % (not %2)) true coll) false\n     (reduce #(or % (not %2)) false coll) true\n     :else false))", "user": "55a372f1e4b0acc240e31537"}, {"problem": 83, "code": "(fn [ & n ] (and (not (reduce #(and %1 %2) n)) (reduce #(or %1 %2) n)))", "user": "55dd91c9e4b050e68259b3ca"}, {"problem": 83, "code": "(fn [& xs] (and (not-every? true? xs) (not-every? false? xs)))", "user": "54722c55e4b094393f72dd74"}, {"problem": 83, "code": "(fn [& bools] (let [truths (count (filter #(true? %) bools))]\n  (if (>= truths 1)\n    (not (= (count bools) truths))\n    false\n    )))", "user": "55d79b87e4b0e31453f64aa8"}, {"problem": 83, "code": "(fn [& args]\n         (if (and (some #(= true %) args) (some #(= false %) args))\n           true false))", "user": "55dcb06ee4b050e68259b3b9"}, {"problem": 83, "code": "(fn [& xs] (= (reduce #(or %1 %2) xs) (not (reduce #(and %1 %2) xs))))", "user": "550a2c61e4b06e50f9beb12b"}, {"problem": 83, "code": "not=", "user": "55ded9fde4b050e68259b3e7"}, {"problem": 83, "code": "(fn [& values] (and (not (not-any? true? values)) (not-every? true? values)))", "user": "51f09f3de4b0274c496158d7"}, {"problem": 83, "code": "not=", "user": "55e2b1cfe4b050e68259b438"}, {"problem": 83, "code": "#(= (set %&) #{false true})", "user": "55e1d34ae4b050e68259b421"}, {"problem": 83, "code": "#(true? (and (some false? %&) (some true? %&)))", "user": "55d85ac9e4b0e31453f64ab2"}, {"problem": 83, "code": "(fn [& args] (and (not (and (reduce #(and %1 %2) args) (reduce #(or %1 %2) args))) (reduce #(or %1 %2) args)))", "user": "55d29fb6e4b0e31453f64a59"}, {"problem": 83, "code": "(fn [& x] (and (not (reduce #(and %1 %2) x)) (reduce #(or %1 %2) x)))", "user": "55dab408e4b0e31453f64ad9"}, {"problem": 83, "code": "(fn [& xs] (let [t (filter #(= true %) xs), tn (count t)] (and (> tn 0) (> (count xs) tn))))", "user": "534056fce4b085b17e897dac"}, {"problem": 83, "code": "(fn [& bools]\n  (if (or (every? #(= % true) bools)\n          (every? #(= % false) bools))\n    false\n    true))", "user": "55b22c33e4b0da326a65cf79"}, {"problem": 83, "code": "(fn [& args] (and (not-every? true? args) (not-every? false? args)))", "user": "55d93d24e4b0e31453f64ac6"}, {"problem": 83, "code": "(fn [& arg] (let [m (apply + (map #(if (= true %) 1 0) arg)) ] (and (> m 0 ) (not= m (count arg)) )  ) )", "user": "55d44dd6e4b0e31453f64a75"}, {"problem": 83, "code": "(fn [& args] (= #{true false} (set (keys (group-by true? args )))))", "user": "55d1a721e4b0e31453f64a47"}, {"problem": 83, "code": "(fn [& l]\n\t(= true (some true? l) (some false? l)))", "user": "55d74e71e4b0e31453f64aa4"}, {"problem": 83, "code": "(fn [& args] \n  (let [\n        total (count args) \n        trues (count (filter identity args))\n        ]\n    (and (> trues 0) (> total trues))\n    )\n  )", "user": "55041b5ee4b086ebe8a79c78"}, {"problem": 83, "code": "(fn half-truth\n  [& bools]\n  (if (every? #(= (first bools) %) bools) \n      false\n      true))", "user": "55acd080e4b03311e7b73298"}, {"problem": 83, "code": "#(true? \n  (and\n    (some true? %&)\n    (some false? %&)))", "user": "55663e9be4b0c656e3ff182b"}, {"problem": 83, "code": "(fn [& coll] (true? (and (some true? coll) (some false? coll))))", "user": "553bda0de4b09218d5f4500b"}, {"problem": 83, "code": "(fn [& xs]\n   (cond (> (count xs) 1)\n         (if (not= (first xs) (second xs))\n           true\n           (recur (rest xs)))\n         :else false)\n  )", "user": "559067ace4b0277789237670"}, {"problem": 83, "code": "(fn [& bools]\n  (boolean (and (some true? bools)\n                (not-every? true? bools))))", "user": "55cb11e9e4b0e31453f649ff"}, {"problem": 83, "code": "(fn [& args]\n  (if (or (empty? (filter false? args)) (empty? (filter true? args)))\n    false\n    true))", "user": "55a0d79fe4b0acc240e31502"}, {"problem": 83, "code": "(fn [ & coll]\n  (let [filtered-count (fn [pred]\n                         (count (filter pred coll)))\n        t (filtered-count true?)\n        f (filtered-count false?)]\n    (if (and (> t 0) (> f 0)) \n      true\n      false)))", "user": "55b42706e4b01b9910ae297b"}, {"problem": 83, "code": "(fn [& args] (and (not (nil? (some true? args))) (not-every? true? args)))", "user": "55e2f502e4b050e68259b43c"}, {"problem": 83, "code": "(fn [& boos]\n  (and (contains? (group-by true? boos) true)\n       (contains? (group-by true? boos) false)))", "user": "554bd33ce4b0a04f7929959a"}, {"problem": 83, "code": "(fn [& args] (let [filtered-map (filter true? args)]\n               (not (or (= args (take-while #(true? %) filtered-map))\n                    (empty? filtered-map)))\n               ) )", "user": "55d42f78e4b0e31453f64a73"}, {"problem": 83, "code": "(fn [& seq]\n    (not (nil? (and (some false? seq) (some true? seq)))))", "user": "53a68c5ae4b0ef122a8689c8"}, {"problem": 83, "code": "not=", "user": "55d9743ae4b0e31453f64aca"}, {"problem": 83, "code": "(fn [& xs]\n  (and (not (nil? (some #(= % true) xs))) (not (nil? (some #(= % false) xs)))))", "user": "55eb1410e4b0121d4835fdb8"}, {"problem": 83, "code": "(fn [& bools]\n  (and (not-every? true? bools) (not (nil? (some true? bools)))))", "user": "55ccdc6be4b0e31453f64a18"}, {"problem": 83, "code": "(fn [& args] (and (not-every? true? args) (boolean (some true? args))))", "user": "55e6c3f5e4b050e68259b48c"}, {"problem": 83, "code": "not=", "user": "55dab5c8e4b0e31453f64ada"}, {"problem": 83, "code": "(fn f [& bools] \n  (boolean (and (some identity bools) (not-every? identity bools))))", "user": "5530baa5e4b076ab5578f81a"}, {"problem": 83, "code": "(fn [& s] ( and (boolean(some true? s)) (not (every? true? s))))", "user": "558bdcefe4b0277789237633"}, {"problem": 83, "code": "not=", "user": "54864662e4b0e286459a11b8"}, {"problem": 83, "code": "(fn [& bools] (and (boolean (some true? bools)) (not-every? true? bools)))", "user": "55ecb2c0e4b0121d4835fdce"}, {"problem": 83, "code": "(fn [x & rest]\n    (let [x (conj rest x)]\n      (and\n        ((comp (complement nil?) (partial some true?)) x)\n        ((complement (partial not-any? false?)) x)\n        )\n      )\n    )", "user": "55f06183e4b06e875b46ce23"}, {"problem": 83, "code": "(fn [& n]\n  (= (count (distinct n)) 2))", "user": "53fc88e7e4b0de5c418485be"}, {"problem": 83, "code": "(fn a-half-true [& bs]\n  (boolean (and (some true? bs) (not (every? true? bs)))))", "user": "54008b88e4b0de5c4184860d"}, {"problem": 83, "code": "(fn [& args] \n  (and ((comp not nil?) (some true? args))\n       ((comp not nil?) (some false? args))))", "user": "55912230e4b027778923767a"}, {"problem": 83, "code": "(fn atleast-one-true-and-one-false\n  [& args]\n  (boolean (and (some true? args) (some false? args))))", "user": "539e717fe4b0ca733b974488"}, {"problem": 83, "code": "(fn [& b] (and (or (some true? b) false) (not-every? true? b)))", "user": "4f5eda39e4b0030a34fb2b56"}, {"problem": 83, "code": "#(and (boolean (some identity %&)) (not-every? identity %&))", "user": "55f20e4be4b06e875b46ce40"}, {"problem": 83, "code": "(fn [& args] (not (= nil (and (some (fn [x] (= true x)) args) (some (fn [x] (= false x)) args)))))", "user": "55f014ebe4b06e875b46ce1b"}, {"problem": 83, "code": "(fn half_truth [f & coll]\n  (let [all (remove nil? (cons f coll))\n        n (count (filter identity all))]\n  (and (not (= n (count all))) (>= n 1))))", "user": "55f04940e4b06e875b46ce21"}, {"problem": 83, "code": "not=", "user": "54d05a9de4b0e8a36923e5c7"}, {"problem": 83, "code": "#(and (get (set %&) true false) (> (count (set %&)) 1))", "user": "55e59b67e4b050e68259b46f"}, {"problem": 83, "code": "(fn [& rest]\n  (true? (and (some identity rest) (some not rest))))", "user": "55f2d4ede4b06e875b46ce4c"}, {"problem": 83, "code": "(fn [& xs]\n  (and \n    (not (every? identity xs))\n    (boolean (some identity xs))))", "user": "55e5c852e4b050e68259b474"}, {"problem": 83, "code": "(fn xor [& x] (= (every? true? x) (every? false? x)))", "user": "55f7ebeae4b06e875b46ceb7"}, {"problem": 83, "code": "(fn [& args] (-> (into #{} args) count (= 2)))", "user": "55f88e8ee4b03cbcff9738b5"}, {"problem": 83, "code": "(fn prob83 [& args]\n  (let [true-count (count (filter true? args))\n        length (count args)]\n    (and (> true-count 0) (< true-count length))))", "user": "4ebbff41535dfed6da9c6d78"}, {"problem": 83, "code": "(fn [& x] (true? (and (some true? x) (some false? x))))", "user": "55f4ef68e4b06e875b46ce82"}, {"problem": 83, "code": "not=", "user": "52ca9513e4b071a8d36bd3e4"}, {"problem": 83, "code": "(fn [& args]\n   (if (or (every? false? args) (every? true? args))\n     false\n     true))", "user": "55eeeb81e4b0121d4835fdf7"}, {"problem": 83, "code": "not=", "user": "55d5ee3fe4b0e31453f64a92"}, {"problem": 83, "code": "(fn rrr[& xs]\n  (let [res (reduce + (map #(if % 1 0) xs))]\n    (and (> res 0) (< res (count xs)))))", "user": "55f01316e4b06e875b46ce1a"}, {"problem": 83, "code": "(fn [& r]\n  (boolean (and (some #(true? %) r)\n        (some #(false? %) r))))", "user": "5541fa50e4b0a04f79299515"}, {"problem": 83, "code": "(fn [& args]\n  (let [coll (into [] args)\n        trues (filter true? coll)]\n    (and (not (empty? trues)) (not (= (count trues) (count coll))))\n    )\n  )", "user": "558ee1c9e4b0277789237659"}, {"problem": 83, "code": "(fn [& args](\nand (= true ((fn[x](some #(= true %1) x)) args)) (not ((fn[x](every? #(= true %1) x)) args)))\n)", "user": "54d2829ce4b0e8a36923e5f6"}, {"problem": 83, "code": "(fn some-but-not-all [& xs]\n  (boolean (and (some true? xs) (not-every? true? xs))))", "user": "55fb58b2e4b0f488688e0661"}, {"problem": 83, "code": "(fn halftruth [& args]\n  (boolean (and (some #{true} args) (not-every? #{true} args))))", "user": "55f6f1d3e4b06e875b46cea0"}, {"problem": 83, "code": "#(= #{true false} (set %&))", "user": "55f2fdc3e4b06e875b46ce51"}, {"problem": 83, "code": "(fn [& bools]\n    (and ((complement nil?)(some true? bools))\n        (not-every? true? bools)))", "user": "55d073ece4b0e31453f64a3b"}, {"problem": 83, "code": "(fn [& bools]\n  (boolean (and (some identity bools) (not-every? identity bools))))", "user": "55fee5e4e4b00f4cabc5765a"}, {"problem": 83, "code": "not=", "user": "55efc44ee4b066087aa9453e"}, {"problem": 83, "code": "(fn [& rest]\n  (and (not-every? false? rest)\n       (not-every? true? rest)))", "user": "5226f8e9e4b04e78ff2e199a"}, {"problem": 83, "code": "(fn [& s]\n  (if (and (some true? s) (some false? s)) true\n      false))", "user": "55f8180fe4b06e875b46ceba"}, {"problem": 83, "code": "(fn [& coll] (and (reduce #(or %1 %2) false coll) (not (reduce #(and %1 %2) true coll))))", "user": "560039cce4b04bb52996e162"}, {"problem": 83, "code": "(fn [& args]\n  (let [bool-set (set args)]\n    (cond (and (contains? bool-set true) (contains? bool-set false)) true\n          :else false)))", "user": "55af3e6be4b03311e7b732c7"}, {"problem": 83, "code": "(fn [& args]\n   (cond\n    (every? true? args) false\n    (some true? args) true\n    :else false))", "user": "4fafed2be4b081705acca25c"}, {"problem": 83, "code": "not=", "user": "55e06f82e4b050e68259b40d"}, {"problem": 83, "code": "(fn [& args] (and (not-every? true? args) (not-every? false? args)))", "user": "55f8b32ae4b03cbcff9738ba"}, {"problem": 83, "code": "(fn half-truth [& bools]\n  (and (false? (every? true? bools))\n       (false? (every? false? bools))))", "user": "55f6e7ece4b06e875b46ce9e"}, {"problem": 83, "code": "(fn [ & my-boolean]\n  (not (apply = my-boolean)))", "user": "55fe7e15e4b00f4cabc57651"}, {"problem": 83, "code": "#(true? \n  (and\n    (some true? %&)\n    (some false? %&)))", "user": "55fbcbb1e4b0f488688e0668"}, {"problem": 83, "code": "(fn [& args]\n    (= #{true false} (set args))\n    )", "user": "53c6c9dfe4b00fb29b2212a1"}, {"problem": 83, "code": "(fn [& s] (if (and (some identity s) (not (every? identity s))) true false))", "user": "55f081bbe4b06e875b46ce25"}, {"problem": 83, "code": "(fn [& c] (and ((comp boolean some) true? c) (not-every? true? c)))", "user": "55eeb37ae4b0121d4835fdf3"}, {"problem": 83, "code": "(fn [& x] (and (not-every? true? x) (not-every? false? x)))", "user": "559e6f42e4b08a52bd4f97d3"}, {"problem": 83, "code": "; k-wow\nnot=\n\n; golf\n#_#(true? (and (some true? %&) (not-every? true? %&)))\n\n; first try\n#_(fn [& s] (boolean (and (some true? s) (not-every? true? s))))", "user": "55e7d06ee4b050e68259b496"}, {"problem": 83, "code": "not=", "user": "50746e23e4b054001656acd1"}, {"problem": 83, "code": "(fn main [& se]\n    (and \n      (\n        (fn tr [lis] \n          (if \n            (empty? lis)\n            false\n            (if \n              (first lis)\n              true\n              (tr\n                (rest lis)\n                )\n              ) \n            ) \n          )\n          se\n        )\n      (\n        (fn fa [lis]\n          (if \n            (empty? lis)\n            false\n            (if \n              (not\n                (first lis)\n                )\n              true\n              (fa (rest lis))\n              )      \n            ) \n          )\n          se\n        )\n      )  \n    )", "user": "55034bf0e4b086ebe8a79c6d"}, {"problem": 83, "code": "(fn[& args](if (= 2 (count (distinct args)) ) true false ))", "user": "56039843e4b04bb52996e1be"}, {"problem": 83, "code": "(fn [& bools] (if (every? true? bools) false (not (nil? (some true? bools)))))", "user": "56041883e4b0c80df0ca2655"}, {"problem": 83, "code": "(fn check [& args]\n  (and \n    (not-every? false? args) \n    (not (every? true? args))))", "user": "55996253e4b031d6649c9baa"}, {"problem": 83, "code": "(fn [& bools]\n  (if (and (some true? bools) (not (every? true? bools)))\n    true\n    false))", "user": "55e1bb20e4b050e68259b41f"}, {"problem": 83, "code": "(fn[& x] (and (not-every? true? x) (not-every? false? x)))", "user": "5602ab92e4b04bb52996e1a3"}, {"problem": 83, "code": "(fn [& args]\n  (and (not (apply = true args))\n       (reduce #(or %1 %2) args)))", "user": "55048182e4b086ebe8a79c7c"}, {"problem": 83, "code": "(fn [& args] (true? (and (some identity args) (some not args))))", "user": "55f3802be4b06e875b46ce5f"}, {"problem": 83, "code": "(fn [& xs] (let [[a b] (partition-by identity xs)]\n                   (and (> (count a) 0) (> (count b) 0))))", "user": "5361d423e4b0243289761e49"}, {"problem": 83, "code": "(fn [& args] (if (and (some true? args) (not (every? true? args))) true false))", "user": "5601bb7ee4b04bb52996e195"}, {"problem": 83, "code": "(fn [& bools] \n  (true? \n   (and \n    (some true? bools)\n    (some false? bools))))", "user": "548b8a50e4b0e286459a11ff"}, {"problem": 83, "code": ";(fn [& args] (and (not-every? not args) (not-every? identity args)))\n(fn [& args] (= #{true false} (set args)))", "user": "560a7b46e4b05f002753defb"}, {"problem": 83, "code": "(fn [& coll]\n  (->> coll (group-by identity) count (= 2)))", "user": "55f2e47de4b06e875b46ce4d"}, {"problem": 83, "code": "(fn [& coll]\n    (and (not (reduce #(and % %2) coll))\n         (reduce #(or % %2) coll)))", "user": "532f8569e4b019098a6f8b4f"}, {"problem": 83, "code": "(fn half-truth [a & args] (if (= true a) (not (every? true? args)) (not (every? false? args) )))", "user": "55f2b42be4b06e875b46ce4a"}, {"problem": 83, "code": "not=", "user": "558053b1e4b05c286339e0e9"}, {"problem": 83, "code": "(fn [& v] (= true (some #(= true %) v) (some #(= false %) v)))", "user": "55f1d5dfe4b06e875b46ce38"}, {"problem": 83, "code": "(fn [& bools] (and (not-every? true? bools) (not (every? false? bools))))", "user": "5604bcf7e4b08b23635d315a"}, {"problem": 83, "code": "(fn [& coll]\n  (= (set coll) #{ true false }))", "user": "56038f34e4b04bb52996e1bc"}, {"problem": 83, "code": "#(boolean (and (some identity %&) (some not %&)))", "user": "5609866ee4b0053d1b86c7e3"}, {"problem": 83, "code": "(fn [& args] \n  (and (reduce #(or %1 %2) false args)\n       (not (reduce #(and %1 %2) true args))))", "user": "56051095e4b08b23635d3162"}, {"problem": 83, "code": "(fn [& xb] (if (and (some true? xb) (some false? xb)) true false))", "user": "56098ccbe4b0053d1b86c7e4"}, {"problem": 83, "code": "#(true? \n  (and\n    (some true? %&)\n    (some false? %&)))", "user": "560a7775e4b05f002753defa"}, {"problem": 83, "code": "(comp (partial = 2) count set vector)", "user": "5603c31fe4b04bb52996e1c1"}, {"problem": 83, "code": "not=", "user": "54d321b3e4b0e8a36923e602"}, {"problem": 83, "code": "(fn [& xs]\n  (let [some_true (if (some #(= true %) xs) true false)\n        not_all_true (if (some #(= false %) xs) true false)]\n    (and some_true not_all_true)))", "user": "50bcb004e4b0594b91591c5f"}, {"problem": 83, "code": "(fn [& args] (> (count args) (count (filter true? args)) 0))", "user": "55e274b4e4b050e68259b436"}, {"problem": 83, "code": "(fn [& elems]\n  (if (nil? (and (some true? elems) (some false? elems))) \n    false\n    true))", "user": "5603d057e4b0c80df0ca264e"}, {"problem": 83, "code": "not=", "user": "560d2a2be4b05f002753df35"}, {"problem": 83, "code": "(fn [& s] (= 2 (count (distinct s))))", "user": "56011393e4b04bb52996e178"}, {"problem": 83, "code": "#(cond\n    (every? true? %&) false\n    (every? false? %&) false\n    :else true)", "user": "55810c73e4b05c286339e0f2"}, {"problem": 83, "code": "(fn [& args]\n  (and (contains? (set args) false)\n       (contains? (set args) true)))", "user": "5410499de4b01498b1a719a6"}, {"problem": 83, "code": "#(boolean (and (some true? %&) (not (every? true? %&))))", "user": "5501a1e1e4b07d26eda61d75"}, {"problem": 83, "code": "(fn [& args]\n(cond (= #{true false} (set args)) true\n :default false))", "user": "55ae6367e4b03311e7b732bc"}, {"problem": 83, "code": "not=", "user": "55df3b11e4b050e68259b3ef"}, {"problem": 83, "code": "(fn [& x] (or (and (some true? x) (not (every? true? x))) false))", "user": "5610bed1e4b05f002753df74"}, {"problem": 83, "code": "(fn [b & bs]\n  (let [xs (cons b bs)]\n    (and (boolean (some true? xs))\n         (not (every? true? xs)))))", "user": "4ff24a1ae4b0678c553fc337"}, {"problem": 83, "code": "(fn [& xs]\n  (and (contains? (set xs) true) (contains? (set xs) false)))", "user": "560e9a2de4b05f002753df52"}, {"problem": 83, "code": "(fn [& args]\n  (boolean (and (some true? args) (some false? args)))\n  )", "user": "55f2c898e4b06e875b46ce4b"}, {"problem": 83, "code": "(fn truish [& args] (and (not-every? false? args) \n                         (not= (count args) (count (remove false? args)))))", "user": "5578f292e4b05c286339e08f"}, {"problem": 83, "code": "(fn [& xs] (if (some true? xs)\n             (if (some false? xs)\n               true false)\n             false))", "user": "4f6ba7bce4b07046d9f4efb0"}, {"problem": 83, "code": "(fn [& bools]\n  (if (every? true? bools) \n    false\n    (boolean (some true? bools))))", "user": "50523848e4b0a561d07d8f1a"}, {"problem": 83, "code": "(fn [x & y] (not (not (and (or x (some true? y)) (not (and x (every? true? y)))))))", "user": "560ff632e4b05f002753df66"}, {"problem": 83, "code": "(fn [& xs]\n  (and \n   (not (not-any? identity xs))\n   (not (every? identity xs))))", "user": "52aaabf7e4b0c58976d9ac68"}, {"problem": 83, "code": "(fn [& x] (boolean (and (some true? x) (not (every? true? x)))))", "user": "560843dee4b046a4fc0ac00e"}, {"problem": 83, "code": "#(and (= true (some identity %&)) ((complement every?) identity %&))", "user": "55f09e7be4b06e875b46ce28"}, {"problem": 83, "code": "(fn [& args] (not (or (every? true? args) (every? false? args))))", "user": "5505d137e4b086ebe8a79c8c"}, {"problem": 83, "code": "(comp (partial = 2) count (partial conj #{}))", "user": "558fec41e4b0277789237666"}, {"problem": 83, "code": "(fn [& args]\n  (and\n   (not (every? (partial = true) args))\n   (not (every? (partial = false) args))\n \t)\n  )", "user": "4f5e5975e4b0030a34fb2b4d"}, {"problem": 83, "code": "(fn [& bools]\n  (let\n    [c (reduce\n        (fn [counter item]\n          (if (true? item) (assoc counter :trues (inc (:trues counter))) (assoc counter :falses (inc (:falses counter))))\n        )\n        {:trues 0 :falses 0} bools\n       )\n    ]\n      (if\n        (and (> (:trues c) 0) (< (:trues c) (count bools)))\n        true false\n      )\n  )\n)", "user": "56152a26e4b05f002753dfc1"}, {"problem": 83, "code": "not=", "user": "55bf6dbce4b01b9910ae2a12"}, {"problem": 83, "code": "#(and \n  (not= nil (some (partial = true) %&))\n  (not (every? (partial = true) %&)))", "user": "561ba3e5e4b073c65b0ce3eb"}, {"problem": 83, "code": "(fn [& l] (= 2 (count (group-by identity l))))", "user": "55e8a85be4b0121d4835fd98"}, {"problem": 83, "code": "not=", "user": "533975f0e4b0e30313ee6ca9"}, {"problem": 83, "code": "(fn [& args] \n  (let [ba (map #(if % 1 0) (conj args (first args)))]\n    (= 1 (bit-and (apply bit-or ba) (bit-not (apply bit-and ba))))))", "user": "561c0278e4b064ca9f4b1691"}, {"problem": 83, "code": ";;(and (some-fn true?) (some-fn false?) ) <Should be working?\n(fn [& vars]\n  (cond\n   (every? true? vars) false\n   (some true? vars) true\n   :else false))", "user": "5617c13de4b06b1bb2182a15"}, {"problem": 83, "code": "(fn baz[& coll]\n  (and \n    (not (nil? (some true? coll)))\n    (not-every? true? coll) \n  )\n)", "user": "5537b2c7e4b09218d5f44fce"}, {"problem": 83, "code": "(fn [& args] (boolean (and (some #{true} args) (not (every? #{true} args)))))", "user": "4e7e443e535db169f9c7970b"}, {"problem": 83, "code": "(fn [& truths] (and (not-every? identity truths) (or (some identity truths) false)))", "user": "561ca2eae4b064ca9f4b169b"}, {"problem": 83, "code": "(fn [& xs]\n  (and (not (nil? (some true? xs)))\n     (not-every? true? xs)))", "user": "5619a4d0e4b053970a773afd"}, {"problem": 83, "code": "(fn some-not-all [& bs]\n  (let [total-nots (count (filter #(= % false) bs))]\n    (and (pos? total-nots) (not= (count bs) total-nots))))", "user": "561d8936e4b064ca9f4b16b2"}, {"problem": 83, "code": "(fn my-fn [& bools]\n  (if (and (some true? bools) (not (every? true? bools)))\n    true\n    false))", "user": "521ceb02e4b0c4ef0be830a5"}, {"problem": 83, "code": "(fn truth? [& coll]\n  (= 2 (count (distinct coll))))", "user": "562280ade4b03f08ee9a9226"}, {"problem": 83, "code": "(fn [& xs] (= (set xs) #{true false}))", "user": "561e2b33e4b064ca9f4b16ba"}, {"problem": 83, "code": "(fn [& args] (and ((comp true? some) true? args) ((complement every?) true? args)))", "user": "561d23e3e4b064ca9f4b16a5"}, {"problem": 83, "code": "(fn [& coll]\n   (if (and\n        (some true? coll)\n        (some false? coll))\n     true false))", "user": "4f40c46fe4b0e243712b1fbe"}, {"problem": 83, "code": "(fn [& x]\n      (and\n       (true? (some true? x))\n       (not (every? true? x))))", "user": "54b54d1be4b05787c3b1639c"}, {"problem": 83, "code": "(fn [& args]\n  (and (not-every? true? args)\n       (not (every? false? args)))\n  )", "user": "54eb22a0e4b024c67c0cf845"}, {"problem": 83, "code": "#(and (boolean (some true? %&)) (boolean (some false? %&)))", "user": "55f330dde4b06e875b46ce56"}, {"problem": 83, "code": "(fn [& args] (and (boolean (some identity args)) (not-every? identity args)))", "user": "4f213e2ee4b0d66497709fcf"}, {"problem": 83, "code": "(fn [x & xs] (= (count (into #{x} xs)) 2))", "user": "55f6fe09e4b06e875b46cea2"}, {"problem": 83, "code": "(fn [& sq]\n  (if (and (some true? sq) (not (every? true? sq)))\n    true\n    false))", "user": "55fcaccfe4b0f488688e0679"}, {"problem": 83, "code": "(fn half-truth?\n  [& coll]\n  (= #{true false} (into #{} (distinct coll))))", "user": "55a9e0fee4b0988bba2ad945"}, {"problem": 83, "code": "(fn half-truth\n  [& boolargs]\n  (if (and (some #(= true %) (vec boolargs))\n        (not (every? identity boolargs))) true false))", "user": "561ca6ebe4b064ca9f4b169c"}, {"problem": 83, "code": "(fn half-true? [& bools]\n  (true? (and (some true? bools)\n       (some false? bools))))", "user": "561eb82fe4b064ca9f4b16c7"}, {"problem": 83, "code": "(fn halftruth [& args]\n  (if (and (some true? args) (some false? args))\n    true\n    false\n    )\n  )", "user": "560ac5cae4b05f002753df09"}, {"problem": 83, "code": "(comp boolean #(and (some true? %&)\n                    (some false? %&)))", "user": "521ed5b4e4b0e6c71e0c0bc0"}, {"problem": 83, "code": ";;(fn [& args] (and (not-every? true? args) (not-every? false? args)))\n\nnot=", "user": "55e1fc42e4b050e68259b424"}, {"problem": 83, "code": "(fn [& bs] (not (or (every? identity bs) (every? not bs))))", "user": "561cb6cfe4b064ca9f4b169e"}, {"problem": 83, "code": "(fn [& coll]\n  (if (and (some #(= % true) coll) (some #(= % false) coll))\n    true\n    false))", "user": "54d000c7e4b018d918be98d7"}, {"problem": 83, "code": "(fn [& x] (and (not-every? #{true} x)\n                  (boolean(some #{true} x))))", "user": "53623eaee4b0243289761e4f"}, {"problem": 83, "code": "(fn [& args]\n  (true? (and (some true? args)\n              (some false? args))))", "user": "560434cfe4b0c80df0ca2658"}, {"problem": 83, "code": "(fn [& x]\n    (and\n      (= true (some true? (flatten x)))\n      (not (\n             every? true? (flatten x)\n           )\n      )\n    )\n  )", "user": "536829c8e4b0243289761e8b"}, {"problem": 83, "code": "(fn [& a] (or (and (some true? a) (some false? a)) false))", "user": "56018dd4e4b04bb52996e18f"}, {"problem": 83, "code": "(fn [& bools]\n  (cond\n   (reduce #(and %1 %2) bools) false\n   (reduce #(and %1 %2) (map not bools)) false\n   :else true))", "user": "562c15d3e4b058fa18c5a6d5"}, {"problem": 83, "code": "not=", "user": "5628cb07e4b00e49c7cb47ef"}, {"problem": 83, "code": "(fn [& xs]\n  (boolean\n   (and (some identity xs)\n        (not-every? identity xs))))", "user": "5629dfaae4b00e49c7cb4813"}, {"problem": 83, "code": "(comp #(and (true? (some identity %)) (not (every? identity %))) vector)", "user": "5626447fe4b00e49c7cb47bd"}, {"problem": 83, "code": "#(and (boolean (some #{true} %&))(not (every? #{true} %&)))", "user": "562326cbe4b03f08ee9a9230"}, {"problem": 83, "code": "(fn [& li] \n  (if (and (some false? li) (some true? li)) true false) )", "user": "504f0c9ce4b0e7ad84dbc4b2"}, {"problem": 83, "code": "(fn [& bls] (or (and (not (every? true? bls)) (some true? bls)) false))", "user": "53b1db8ee4b047364c044495"}, {"problem": 83, "code": ";#(true? (and (some true? %&) (some false? %&)))\n#(= 2 (count (set %& )))", "user": "55fc07d3e4b0f488688e066e"}, {"problem": 83, "code": "(fn [& args] (every? true? [(some true? args) (some false? args)]))", "user": "5033ed65e4b062bc5d7ae15a"}, {"problem": 83, "code": "(fn half-truth\n  [& args]\n  (if (and (some true? args)\n           (not-every? true? args))\n    true\n    false))", "user": "5614fa1de4b05f002753dfbe"}, {"problem": 83, "code": "(fn [& a]\n  (and (not (nil? (some false? a))) (not (nil? (some true? a)))))", "user": "4e72a717535d5021c1a89665"}, {"problem": 83, "code": "not=", "user": "56278266e4b00e49c7cb47d3"}, {"problem": 83, "code": ";not=\n\n(fn [& bs]\n  (true? (and (some true? bs)\n              (some false? bs))))", "user": "54485749e4b032a45b8693c7"}, {"problem": 83, "code": "#(= 2 (count (distinct %&)))", "user": "560ae7e6e4b05f002753df0e"}, {"problem": 83, "code": "(fn [& n] (= 2 (count (set n))))", "user": "561a060ee4b053970a773b01"}, {"problem": 83, "code": "(fn [& c] \n  (let [true-test #(= true %)]\n    (not (or (not-any? true-test c)\n             (every? true-test c)))))", "user": "562e8b2be4b0ab312c17ebbb"}, {"problem": 83, "code": "#(clojure.set/subset? #{true false} (set %&))", "user": "55ed9108e4b0121d4835fddc"}, {"problem": 83, "code": "; not-every? args true && some args true\n(fn [& args] (and (not-every? false? args) (not-every? true? args)))", "user": "55dbed2fe4b050e68259b3a6"}, {"problem": 83, "code": "(fn [& tf]\n(and (not(every? true? tf)) (not(not-any? true? tf))))", "user": "56305383e4b073c1cf7a9be6"}, {"problem": 83, "code": "(fn [& bs]\n  (boolean\n    (and (some identity bs)\n         (not (every? identity bs)))))", "user": "562cd94ee4b0a45d2ff83015"}, {"problem": 83, "code": "(fn [& args]\n  (and (not= 0 (count (filter #(= true %) args))) (not= 0 (count (filter #(= false %) args)))))", "user": "561a1af6e4b053970a773b02"}, {"problem": 83, "code": "(fn [& args] (= (set '(true false)) (set args)))", "user": "5627d09ce4b00e49c7cb47db"}, {"problem": 83, "code": "(fn [& bools]\n  (if (or (reduce #(and % %2) bools)\n           (not (reduce #(or % %2) bools)))\n    false true))", "user": "5627444fe4b00e49c7cb47cd"}, {"problem": 83, "code": "(fn [& b] (= 2 (count(set b))))", "user": "561047eae4b05f002753df6d"}, {"problem": 83, "code": "(fn [& x] (true? (and (some true? x)\n                      (false? (reduce #(and %1 %2) x )))))", "user": "56102f50e4b05f002753df6b"}, {"problem": 83, "code": "not=", "user": "551e2cade4b030e6a24d00e4"}, {"problem": 83, "code": "not=", "user": "5614ebc5e4b05f002753dfbc"}, {"problem": 83, "code": "(fn[& bools] (not (nil? (and (some true? bools) (some false? bools)))))", "user": "56347285e4b0bfe05bf117bc"}, {"problem": 83, "code": "(fn[& args] (if(and (some #(= true %) args) (some #(= false %) args)) true false) )", "user": "561cad18e4b064ca9f4b169d"}, {"problem": 83, "code": "(fn [& bools]\n  (let [a (first (partition-by identity bools))\n        b (second (partition-by identity bools))]\n    (if (nil? b)\n      (not a)\n      true)))", "user": "5592ba8be4b0c79f6e1db931"}, {"problem": 83, "code": "(fn [& b] (not (or (not-any? identity b) (every? identity b))))", "user": "56372798e4b0bfe05bf117d0"}, {"problem": 83, "code": "#(= 2 (count(set %&)))", "user": "56215c8ee4b03f08ee9a921a"}, {"problem": 83, "code": "(fn [& bools] (boolean (and (some true? bools) (some false? bools))))", "user": "563a30d7e4b0bfe05bf117f9"}, {"problem": 83, "code": "#(true?\n  (and\n    (some true? %&)\n    (some false? %&)))", "user": "522a5bdde4b0590a43906cf8"}, {"problem": 83, "code": "(fn [& c] (and (not-every? false? c) (not-every? true? c)))", "user": "53286f84e4b09d4e7a9b5505"}, {"problem": 83, "code": "#(= (count (set %&))\n    2)", "user": "550f1c99e4b06e50f9beb171"}, {"problem": 83, "code": "(fn sortof-xor\n  [& bools]\n  (not (or (every? true? bools) (every? false? bools))))", "user": "4fc524aae4b081705acca37e"}, {"problem": 83, "code": "#(and (not-every? true? %&) (not-every? false? %&))", "user": "563cf9e5e4b0bfe05bf11844"}, {"problem": 83, "code": "(fn half-truth \n  [& bools]\n  (and\n    (not (reduce #(and %1 %2) bools))\n    (reduce #(or %1 %2) bools)\n    ))", "user": "56393681e4b0bfe05bf117f2"}, {"problem": 83, "code": "#(true? \n  (and\n    (some true? %&)\n    (some false? %&)))", "user": "5632b0a9e4b0bfe05bf117a8"}, {"problem": 83, "code": "(fn[& rest] (if(and (some true? rest) (not-every? true? rest)) true false))", "user": "561d7246e4b064ca9f4b16b1"}, {"problem": 83, "code": "#(boolean (and (some true? %&) (not (every? true? %&))))", "user": "562cb7cfe4b0a45d2ff83009"}, {"problem": 83, "code": "(fn [& xs]\n  (= 2 (count (set xs))))", "user": "546a65fce4b00cfc9eacc153"}, {"problem": 83, "code": "(fn [& args]\n  (if (and (some true? args) (some false? args))\n    true\n    false))", "user": "53bbae20e4b047364c044509"}, {"problem": 83, "code": "(fn [& s]\n  (let [n (count s)\n    a (count (filter true? s))]\n    (and (> a 0) (< a n))\n    )\n   )", "user": "562b1a7be4b058fa18c5a6cb"}, {"problem": 83, "code": "#(> (count (group-by true? %&)) 1)", "user": "5587ddd9e4b059ccff29b1ea"}, {"problem": 83, "code": "#(true? \n  (and\n    (some true? %&)\n    (some false? %&)))\n\n;; %& stands for all argument as sequence\n;; some: Returns the first logical true value of (pred x) for any x in coll, else nil.", "user": "53abed65e4b047364c044455"}, {"problem": 83, "code": "(fn [& bools]\n  (let [x (map #(if (true? %) 1 0) bools)\n        trues (reduce + x)]\n    (cond\n     (= trues (count x)) false\n     (= trues 0) false\n     :else true)))", "user": "545c2d07e4b01be26fd7465c"}, {"problem": 83, "code": "(fn [& b] (true? (and (some true? b) (some false? b))))", "user": "563ddefee4b0bfe05bf11857"}, {"problem": 83, "code": "(fn [& xs] \n  (cond\n    (every? true? xs) false\n    (some true? xs) true\n    :else false))", "user": "563ed73ae4b08d4f616f5ecb"}, {"problem": 83, "code": "(fn [& values]\n  (if (apply = values) false true))", "user": "50738138e4b054001656acc9"}, {"problem": 83, "code": "(fn [& args]\n  (< 0\n     (count ((group-by true? args) true))\n     (count args)))", "user": "55c49394e4b0e31453f6499e"}, {"problem": 83, "code": "(fn [& a]\n   (loop [input a\n          current (first input)\n          flag false]\n     (if (not (nil? (first input)) ) \n       (recur (rest input) (first input)  (if (not (= current (first input))) true flag))       \n       flag\n       )\n\n     )\n   )", "user": "546b24a0e4b00cfc9eacc166"}, {"problem": 83, "code": ";;(fn [& p] (and \n;; (if (< (reduce + (map (fn [x] (if x 1 0)) p)) (count p)) true false)\n;; (if (< (reduce + (map (fn [x] (if (not x) 1 0)) p)) (count p)) true false)\n;; ))\n\n\nnot=\n\n;;(not ((partial =) false false))", "user": "5604ae27e4b0c80df0ca2663"}, {"problem": 83, "code": "(fn [& args]\n  (let [coll args]\n    (if (every? true? coll) false \n      (if (some true? coll) true \n        (if (every? false? coll) false)))))", "user": "5633bb9de4b0bfe05bf117b4"}, {"problem": 83, "code": "(fn [& args] (boolean (and (not (every? identity args))\n                           (some identity args))))", "user": "563f1493e4b08d4f616f5ecf"}, {"problem": 83, "code": "(fn [& coll] ((complement nil?) (and (some true? coll) (some false? coll))))", "user": "55c13e73e4b01b9910ae2a2f"}, {"problem": 83, "code": "(fn [ & bools] (< 0 (count (filter true? bools)) (count bools)))", "user": "564127a9e4b08d4f616f5ef3"}, {"problem": 83, "code": "(fn [& xs]\n   (not (or (every? identity xs) (not (some identity xs)))))", "user": "563772a9e4b0bfe05bf117d7"}, {"problem": 83, "code": "(fn [& a] (= 2 (count (distinct a))))", "user": "563b6a2ae4b0bfe05bf11812"}, {"problem": 83, "code": "(fn [& bools] \n  (and (not-every? false? bools) (not-every? true? bools)))", "user": "560b6895e4b05f002753df1a"}, {"problem": 83, "code": "(fn [& b]\n  (= 2 (count (frequencies b))))", "user": "54145050e4b01498b1a719ea"}, {"problem": 83, "code": "(fn a-half-truth-solution\n  [& args] ;; update args as needed\n  ;; Write a function which takes a variable number of booleans. Your function should return true if some of the parameters are true, but not all of the parameters are true. Otherwise your function should return false.\n  (let [bcount (count (filter identity args)) totlacount (count args)]\n    (and (> bcount 0) (not= bcount totlacount))))", "user": "54df955ee4b024c67c0cf7af"}, {"problem": 83, "code": "(fn [& args]\n  (not (nil? (and (some false? args) (some true? args)))))", "user": "545e7ab0e4b01be26fd7467c"}, {"problem": 83, "code": "(fn [& vals] (boolean (and (some boolean vals) (not-every? boolean vals))))", "user": "55c5261ee4b0e31453f649ae"}, {"problem": 83, "code": "not=", "user": "564583f0e4b0284900eef607"}, {"problem": 83, "code": "(fn [& args] (let [s (seq args)] (cond (every? true? s) false (some identity (seq args)) true :else false)))", "user": "56466fb1e4b0284900eef613"}, {"problem": 83, "code": "not=", "user": "56441e72e4b0018b46ad8c09"}, {"problem": 83, "code": "not=", "user": "56449c90e4b0284900eef5f8"}, {"problem": 83, "code": "not=", "user": "5643ba10e4b0018b46ad8bff"}, {"problem": 83, "code": "(fn [& d]\n   (if (and (some true? d)\n            (not-every? true? d))\n     true\n     false))", "user": "5489dd4de4b0e286459a11ef"}, {"problem": 83, "code": "(fn half-truth [& args]\n  (true?\n   (and (some #(= true %1) args)\n        (not (every? #(= true %1) args)))\n   )\n  )", "user": "55a65872e4b09e57187da299"}, {"problem": 83, "code": "(fn half-truth\n  ([x] false)\n  ([x y] (if (and (= true x) (= true y)) \n           false\n           (or x y)) )\n  ([x y & args]\n  (loop [a x b y coll args]\n   (if (empty? coll ) \n     (half-truth a b)\n     (recur b (first coll) (rest coll))))\n   )\n  )", "user": "5564709ee4b0c656e3ff1807"}, {"problem": 83, "code": "(fn [& coll]\n  (= 2 (count (distinct (map boolean coll)))))", "user": "55d2dd27e4b0e31453f64a5b"}, {"problem": 83, "code": "(fn [ & p ]\n  (and \n   ((fn has? [a-seq value]\n      (if (empty? a-seq)\n        false\n        (if (= value (first a-seq))\n          true\n          (has? (rest a-seq) value)))) p true) ((fn has? [a-seq value]\n  (if (empty? a-seq)\n    false\n    (if (= value (first a-seq))\n      true\n      (has? (rest a-seq) value)))) p false)))", "user": "563d12f9e4b0bfe05bf11845"}, {"problem": 83, "code": "not=", "user": "562d869be4b0a45d2ff8301f"}, {"problem": 83, "code": "#(true? (and (some true? %&) (some false? %&)))", "user": "564d3169e4b0284900eef67c"}, {"problem": 83, "code": "(fn [& c]\n  (and (not (every? identity c))\n       (not (nil? (some identity c)))))", "user": "541ef7e2e4b01498b1a71a92"}, {"problem": 83, "code": "(fn [& bools]\n   (if (and (some identity bools) (not-every? identity bools)) true false)\n  )", "user": "5649615be4b0284900eef641"}, {"problem": 83, "code": "not=", "user": "54e0bb4fe4b024c67c0cf7b8"}, {"problem": 83, "code": "(fn [& x]\n  (let [a (count x) b (count (filter true? x))]\n    (if (> b 0) (> a b) false)))", "user": "564a5a09e4b0284900eef656"}, {"problem": 83, "code": "(fn [& xs]\n  (let [ys (set (reduce #(conj %1 %2) [] xs))]\n    (if(and (contains? ys true) (contains? ys false)) true false)))", "user": "54dce62fe4b024c67c0cf78c"}, {"problem": 83, "code": "(fn [& r]\n     (and (boolean (some identity r)) (not-every? identity r)))", "user": "560bb1f7e4b05f002753df20"}, {"problem": 83, "code": "(fn [& args] \n  (and (not (nil? (some true? args)))\n       (not (every? true? args))\n  )\n  )", "user": "563b9acbe4b0bfe05bf11827"}, {"problem": 83, "code": "(fn half-truth\n  [& xs]\n  (if\n    (and (some true? xs) (some false? xs)) true\n                                           false))", "user": "563fc1f2e4b08d4f616f5ed7"}, {"problem": 83, "code": "#(and (not (every? true? %&))\n      (not= nil (some true? %&)))", "user": "52f3568fe4b05e3f0be25f0e"}, {"problem": 83, "code": "(fn [& bools] (or (and (some identity bools)\n                       (some false? bools))\n                  false)\n  )", "user": "56521a26e4b0f9d632dd845f"}, {"problem": 83, "code": "#(boolean (and (some true? %&) (some false? %&)))", "user": "56441634e4b0018b46ad8c08"}, {"problem": 83, "code": "(fn [& args]\n  (let [c1 (count args)\n        c2 (count (filter true? args))]\n    (and (> c2 0) (not= c1 c2))))", "user": "55fbc657e4b0f488688e0666"}, {"problem": 83, "code": "(fn [& l]\n  (= {true true false true} (reduce #(assoc %1 %2 true) {true false false false} l)))", "user": "563dfc02e4b0da801c4e4662"}, {"problem": 83, "code": "(fn [& params]\n (true? (and \n         (some true? params) \n         (not (every? true? params)))))", "user": "55cd95b4e4b0e31453f64a1e"}, {"problem": 83, "code": "(fn [& args] (< 1 (count (distinct args))))", "user": "54227fc6e4b01498b1a71ac0"}, {"problem": 83, "code": "(fn [& all] (= (count (set all)) 2))", "user": "564b495de4b0284900eef667"}, {"problem": 83, "code": "(fn [& args]\n   (not (or (zero? (count (filter #(true? %) args)))\n       (zero? (count (filter #(false? %) args)))))\n   )", "user": "5632abbee4b0bfe05bf117a7"}, {"problem": 83, "code": "not=", "user": "56126d71e4b05f002753df90"}, {"problem": 83, "code": "#(not (or (nil? (some true? %&)) (every? true? %&)))", "user": "5643a11ee4b0018b46ad8bfb"}, {"problem": 83, "code": "#(= #{true false} (set %&))", "user": "55c3c1b0e4b0e31453f6498c"}, {"problem": 83, "code": "(fn [& bools]\n  (if (and (not (every? identity bools))\n           (some identity bools))\n    true false))", "user": "55db7e15e4b0e31453f64ae8"}, {"problem": 83, "code": "(fn [bool & args]\n  (let [[has-true? all-true?]\n        (reduce (fn [[has? all?] val]\n                  [(or  has? val)\n                   (and all? val)])\n          [bool bool] args)]\n    (and has-true? (not all-true?))))", "user": "5169d422e4b051e2a73aba53"}, {"problem": 83, "code": "#(boolean (and\n    (some true? %&)\n           (not (every? true? %&))))", "user": "511e17a9e4b0c5b849dd36b0"}, {"problem": 83, "code": "(fn [& facts]\n  (if (and (some true? facts) (some false? facts)) true false))", "user": "52c00e32e4b07a9af5792341"}, {"problem": 83, "code": "(fn [& xs] \n   (< 0 (count (filter true? xs)) (count xs)))", "user": "564ecc9ee4b0284900eef6a1"}, {"problem": 83, "code": "(fn [& s] (= 2 (count (into #{} s))))", "user": "5654d0e1e4b0f9d632dd848c"}, {"problem": 83, "code": "(fn not-all [ & args ]\n\t(and (reduce #(or %1 %2) (first args) args)\n\t\t (not (reduce #(and %1 %2) (first args) args))))", "user": "564d02cde4b0284900eef679"}, {"problem": 83, "code": "(fn [& lis]\n  (if(= nil (some true? lis))\n    false\n    (if(= nil (some false? lis))\n      false\n      true)))", "user": "5191a763e4b0d428d29dc1b4"}, {"problem": 83, "code": "#(> (count (set %&)) 1)", "user": "56561119e4b0f9d632dd849d"}, {"problem": 83, "code": "(fn [& args] (and (not-every? true? args) (not-every? false? args)))", "user": "564b1ff8e4b0284900eef663"}, {"problem": 83, "code": "(fn [& col] (boolean (and (some true? col)  (some false? col))))", "user": "564a560ae4b0284900eef654"}, {"problem": 83, "code": "#(true? (and (some true? %&) (some false? %&)))", "user": "5632d1b3e4b0bfe05bf117a9"}, {"problem": 83, "code": "(fn [& s] (if (and (some #(= true %) s)\n                   (not (every? #(= true %) s)))\n            true\n            false))", "user": "54ca93abe4b057c6fda3a264"}, {"problem": 83, "code": "(fn [& c]\n  (let [bools (into #{} c)]\n    (= (count bools) 2)))", "user": "4ff3113ae4b0678c553fc345"}, {"problem": 83, "code": "(fn [x & xs]\n  (if (nil? xs)\n    false\n  (let [myvec (into [] (flatten (list x xs)))]\n    (and\n     (not (apply = myvec))\n     (some true? myvec)))))", "user": "5658d775e4b00d3155796114"}, {"problem": 83, "code": "not=", "user": "565560ace4b0f9d632dd8496"}, {"problem": 83, "code": "(fn half-truth [& s] (= 2 (count (distinct s))))", "user": "5654e024e4b0f9d632dd848d"}, {"problem": 83, "code": "(fn [& bools] (if (or (every? true? bools) (every? false? bools)) false true))", "user": "535fa486e4b04ce2eb3ed2e0"}, {"problem": 83, "code": "(fn [& coll]\n  (and (boolean (some true? coll)) \n       (not-every? true? coll)))", "user": "561a9380e4b053970a773b07"}, {"problem": 83, "code": "(fn test [& args] (if (and (some #(= true %) args) (not (every? #(= true %) args)) ) true false))", "user": "54de7948e4b024c67c0cf7a4"}, {"problem": 83, "code": "(fn half [& args]\n  (if (and (some identity args) (not (every? identity args)))\n    true\n    false))", "user": "56444fb1e4b0018b46ad8c0c"}, {"problem": 83, "code": "(fn [& bools]\n  (if (every? true? bools)\n    false\n    (if (some true? bools)\n      true false)))", "user": "55380eeae4b09218d5f44fd9"}, {"problem": 83, "code": "(fn [& c] (and (not-every? true? c) ((complement nil?) (some true? c))))", "user": "56540485e4b0f9d632dd847a"}, {"problem": 83, "code": "(fn [& more]\n  (and (not-every? true? more) (not-every? false? more)))", "user": "564da567e4b0284900eef682"}, {"problem": 83, "code": "(fn [& args]\n               (let [num (count args)\n                     numTrues (reduce (fn [res cur] (if (true? cur) (+ res 1) res))\n                             0\n                             args)\n                     ]\n                 (if (= num numTrues)\n                   false\n                   (< 0 numTrues)\n                     )))", "user": "5658b9bde4b00d315579610e"}, {"problem": 83, "code": "(fn [& args]\n  (boolean\n   (and (some true? args)\n        (not-every? true? args))))", "user": "55d68726e4b0e31453f64a99"}, {"problem": 83, "code": "(fn [& args]\n             (not (nil? (and (some true? args) (some false? args)) )))", "user": "5654cb2de4b0f9d632dd848b"}, {"problem": 83, "code": "#(true? (and (some true? %&) (some false? %&)))", "user": "544285dde4b032a45b869380"}, {"problem": 83, "code": "(fn [& args] (boolean (and (some true? args)\n                           (some false? args))))", "user": "55d28b38e4b0e31453f64a58"}, {"problem": 83, "code": "(fn [& x] (and (not (= (count x) (count (filter #(= true %) x)))) (reduce #(and (not (and %1 %2)) (or %2 %1)) false x)))", "user": "56588f4ee4b0f9d632dd84b6"}, {"problem": 83, "code": "(fn truth [& args]\n  (let [s (seq args) c (count (filter #{true} s))]\n    (and (< c (count s))\n\t\t(>= c 1))))", "user": "560331dee4b04bb52996e1b5"}, {"problem": 83, "code": "(fn half-truth [& bools]\n  (not= 0 (*\t\n           (count (filter true?  bools))\n           (count (filter false? bools)))))", "user": "565ec419e4b068f2fe63dc37"}, {"problem": 83, "code": "(fn [& x] (true? (and (some identity x) (some not x))))", "user": "565e0934e4b068f2fe63dc30"}, {"problem": 83, "code": "not=", "user": "5393185ae4b0b51d73faaeb7"}, {"problem": 83, "code": "(fn [& booleans]\n  (and (not-every? false? booleans)\n       (not-every? true? booleans)))", "user": "560d7863e4b05f002753df40"}, {"problem": 83, "code": "(fn [& bools]\n  (cond\n    (every? true? bools) false\n    (some true? bools) true\n    :else false))", "user": "56504dc2e4b0284900eef6bc"}, {"problem": 83, "code": "(fn\n  [& args]\n  (let [m args\n        mx (map #( if (= true %) 1 0) m)\n        sx (reduce + mx)\n        l (count mx)        \n        ]\n    (and (> sx 0) (< sx l)))\n)", "user": "56019662e4b04bb52996e190"}, {"problem": 83, "code": "(fn [& xs] (< 1 (count (partition-by identity xs))))", "user": "56532ff4e4b0f9d632dd846e"}, {"problem": 83, "code": "(fn [& bools]\n  (if (every? true? bools) false\n    (if (some true? bools) true false)))", "user": "562c2fc2e4b058fa18c5a6d7"}, {"problem": 83, "code": "(fn [& rest] \n  (if (and (some true? rest) \n           (not-every? true? rest)) \n    true false))", "user": "4fc77f5ae4b0ee37620e1821"}, {"problem": 83, "code": "(fn [& x]\n    (and\n       (reduce #(or %1 %2) x)\n       (not (reduce #(and %1 %2) x))))", "user": "564348e1e4b08d4f616f5f26"}, {"problem": 83, "code": "(fn [& params] (= 2 (count (set params))))", "user": "55ecac8ee4b0121d4835fdcc"}, {"problem": 83, "code": "(fn half-truth [a & rest-args]\n  (if (some (if a false? true?) rest-args) true false))", "user": "5661e09ae4b068f2fe63dc70"}, {"problem": 83, "code": "#(if (and (some identity %&) (some not %&)) true false)", "user": "565a3e25e4b068f2fe63dbfb"}, {"problem": 83, "code": "(fn [& args] (if (and (some true? args) (some false? args)) true false))", "user": "5656e039e4b0f9d632dd84a3"}, {"problem": 83, "code": "#(if (and (some true? %&) (not (every? true? %&))) true false)", "user": "559ff9eee4b0acc240e314ee"}, {"problem": 83, "code": "(fn [& vars]\n  (cond (every? true? vars) false\n        (some true? vars) true\n        :else false))", "user": "564bbb15e4b0284900eef66d"}, {"problem": 83, "code": "(fn [& a] true? (and (not-every? true? a) \n                     (not-every? false? a)))", "user": "566734c4e4b04acd4f672dcc"}, {"problem": 83, "code": "(fn [& args] (and (not-every? identity args) (not-every? not args)))", "user": "543f854fe4b032a45b86935b"}, {"problem": 83, "code": "(fn [& args]\n  (if (apply = true args) false\n    (boolean (some identity args))))", "user": "5666500ee4b0e91d5f5c566d"}, {"problem": 83, "code": "(fn [& x]\n            (if (every? true? x)\n              false\n              (reduce #(or %1 %2) x)))", "user": "54a11042e4b09f271ff37c49"}, {"problem": 83, "code": "(fn [& args] (let [x (sort (seq args)) ]\n        (and\n                (false? (first x))\n                (true? (last x))\n        ) \n))", "user": "5661b0a9e4b068f2fe63dc6f"}, {"problem": 83, "code": "(fn bt\n  [& b]\n  (and (boolean(some #(= true %) b)) (not(every? #(= % true) b)))\n  )", "user": "56686edce4b04acd4f672dea"}, {"problem": 83, "code": "(fn [& s]\n  (true? (and (some true? s) (not-every? true? s))))", "user": "566a6e38e4b0a866af68969b"}, {"problem": 83, "code": "#(true? (and (some true? %&) (some false? %&)))", "user": "566bba81e4b0a866af6896b3"}, {"problem": 83, "code": "(fn \n  [& args]\n  (boolean (and (some true? args) (not (every? true? args)))))", "user": "5576fee3e4b05c286339e078"}, {"problem": 83, "code": "(fn [& bools]\n  (not\n   (nil?\n    (and \n     (some true? bools)\n     (some false? bools)))))", "user": "55344b75e4b09218d5f44f99"}, {"problem": 83, "code": "(fn [& all] (if (reduce #(and %1 %2) all) false (reduce #(or %1 %2) all)))", "user": "563f24f9e4b08d4f616f5ed0"}, {"problem": 83, "code": "not=", "user": "566b2cb1e4b0a866af6896aa"}, {"problem": 83, "code": "(fn [& xs] (and (= true (some true? xs)) (= (every? true? xs) false)))", "user": "56483562e4b0284900eef629"}, {"problem": 83, "code": "(\nfn blah [& bools]\n  (and (not (nil? (some true? bools)))\n       (not (every? true? bools))))", "user": "53de7484e4b0d874e779ae35"}, {"problem": 83, "code": "(fn sb [& args] (true? (and (some true? args) (not-every? true? args))))", "user": "566f0ff6e4b0a866af6896e5"}, {"problem": 83, "code": "(fn [& x] (and (not (nil? (some true? x))) (not-every? true? x)))", "user": "566639f4e4b0e91d5f5c566b"}, {"problem": 83, "code": "not=", "user": "54f9c4dfe4b01ecee9d88841"}, {"problem": 83, "code": "(fn [& vars]\n  (cond\n   (every? true? vars) false\n   (some true? vars) true\n   :else false))", "user": "5640eb50e4b08d4f616f5eec"}, {"problem": 83, "code": "(fn [& bools] (== 2 (count (set bools))))", "user": "56427910e4b08d4f616f5f19"}, {"problem": 83, "code": "(fn [& n]\n  (if (every? true? n)\n    false\n    (if (every? false? n)\n      false\n      true)))", "user": "5668aad0e4b04acd4f672df5"}, {"problem": 83, "code": "(fn [& xs] (true? (and (some true? xs) (some false? xs))))", "user": "56669819e4b0e91d5f5c5674"}, {"problem": 83, "code": "(fn [& args] (and (not (every? true? args))\n                  (contains? (set args) true)))", "user": "56754c4be4b05957ce8c6149"}, {"problem": 83, "code": "#(true? (and (some identity %&) (some not %&)))", "user": "567476bde4b05957ce8c6139"}, {"problem": 83, "code": "(fn [& args]\n        (if (= 2 (count (group-by true? args))) true false))", "user": "544e6b7fe4b0e39780006986"}, {"problem": 83, "code": "#(and (not-every? false? %&) (not-every? true? %&))", "user": "56732c84e4b05957ce8c611c"}, {"problem": 83, "code": "(fn [& flags]\n              (boolean (and (some false? flags) (some true? flags))))", "user": "4f9aa2a6e4b0dcca54ed6d0c"}, {"problem": 83, "code": "(fn [& args]\n  \n  (\n   if (= 1 (count args))\n      false\n      (\n       if (= (first args) (last args))\n    \t(\n         if \n          (=(first args) (second args))\n      \t\tfalse\n      \t\ttrue\n        )\n      \ttrue\n      )\n  )   \n)", "user": "5676af21e4b05957ce8c6158"}, {"problem": 83, "code": "(fn [& args] (true? (and (some true? args) (not (every? true? args)))))", "user": "5674f874e4b05957ce8c6144"}, {"problem": 83, "code": "not=", "user": "56706f01e4b0a866af6896f2"}, {"problem": 83, "code": "(fn \n  ([x] false)\n  ([x y] (or x y))\n  ([x y z] (not (and x y z)))\n  ([x y z a] true)\n  )", "user": "566bd453e4b0a866af6896b7"}, {"problem": 83, "code": "#(= 2 (count (distinct %&)))", "user": "56188848e4b053970a773aea"}, {"problem": 83, "code": "(fn [& b] (boolean (and (not-every? identity b) (some identity b))))", "user": "50232eeae4b0b5d8b1bd2397"}, {"problem": 83, "code": "(fn [& args]\n  (true? (and (some true? args)\n       (some false? args))))", "user": "55aa8276e4b0988bba2ad94e"}, {"problem": 83, "code": "(fn\n  [& args]\n  (if (some true? args)\n    (not-every? true? args)\n    false))", "user": "558b41fce4b0277789237628"}, {"problem": 83, "code": "(fn [& xs]\n  (and\n    (< 0 (count (filter (fn [x] x) xs)))\n    (< 0 (count (filter (fn [x] (not x)) xs)))))", "user": "4fe98e07e4b0547ebccb2464"}, {"problem": 83, "code": "#(true? \n  (and\n    (some true? %&)\n    (some false? %&)))\n\n;; %& stands for all argument as sequence\n;; some: Returns the first logical true value of (pred x) for any x in coll, else nil.", "user": "517bbbfce4b07ef0e56148cf"}, {"problem": 83, "code": "(fn [& x]\n  (and (not= nil (some true? x )) (not-every? true? x)))", "user": "56785234e4b05957ce8c6177"}, {"problem": 83, "code": "(fn [ & bs] (if (reduce #(and %1 %2) bs) false \n             (reduce #(or %1 %2) bs)))", "user": "503c90aae4b06c4e0e1fa24b"}, {"problem": 83, "code": "#(and (not (every? true? %&)) (boolean (some true? %&)))", "user": "567695c2e4b05957ce8c6157"}, {"problem": 83, "code": "(fn half_true [& values] \n  (not (or\n   \t(every? false? values) (every? true? values)\n  ))\n)", "user": "55293c48e4b0ffed3738f946"}, {"problem": 83, "code": "(fn [& x]\n    (and\n     (not-every? true? x)\n     (not-every? false? x)))", "user": "54ef7568e4b024c67c0cf885"}, {"problem": 83, "code": "(fn [& r]\n \t(let [d (distinct r)]\n      (and (= 2 (count d)))))", "user": "567cef8ce4b05957ce8c61c1"}, {"problem": 83, "code": "(fn [& l]\n  (and (not (empty? (filter false? l))) (not (empty? (filter true? l)))))", "user": "56288ccae4b00e49c7cb47ea"}, {"problem": 83, "code": "(fn [& vals]\n   (let [firstval (first vals)]\n     (not (= nil (some #{(str (not firstval))} (map str (rest vals)))))\n))", "user": "567a680ee4b05957ce8c6198"}, {"problem": 83, "code": "(fn [& x] (= #{true false} (set x)))", "user": "56304db8e4b073c1cf7a9be5"}, {"problem": 83, "code": "not=", "user": "5680cbf3e4b0966858e4d8f3"}, {"problem": 83, "code": "not=", "user": "56349008e4b0bfe05bf117bd"}, {"problem": 83, "code": "(fn [& bools]\n  (if (and (not-every? false? bools) (some false? bools))\n    true\n    false))", "user": "567ea403e4b0feffd0d18eb5"}, {"problem": 83, "code": "(fn [& c] (and (not (reduce #(and %1 %2) c)) (reduce #(or %1 %2) c)))", "user": "56800ba1e4b0966858e4d8e8"}, {"problem": 83, "code": "(fn [& bools]\n  (and\n    (contains? (set bools) true)\n    (contains? (set bools) false)))", "user": "56069006e4b08b23635d3174"}, {"problem": 83, "code": "(fn [& xs]\n  (and\n   (boolean (some #(if % true) xs))\n   (not-every? #(if % true) xs)))", "user": "5680104ae4b0966858e4d8ea"}, {"problem": 83, "code": "not=", "user": "56810479e4b0966858e4d8f8"}, {"problem": 83, "code": "(fn [& args] (and (reduce #(or %1 %2) args) (not (reduce #(and %1 %2) args))))", "user": "54e6762be4b024c67c0cf809"}, {"problem": 83, "code": "(fn xxx [& args]\n  (and\n    (not (empty? (filter #(= false %) args)))\n    (not (empty? (filter #(= true %) args)))\n    )\n  )", "user": "5680fff3e4b0966858e4d8f6"}, {"problem": 83, "code": "#(true? (and (not-every? identity %&) (some true? %&)))", "user": "56814cbce4b0945ebc182a81"}, {"problem": 83, "code": "(fn [& args] (if (and (boolean (some true? args)) (not (every? true? args))) true false) )", "user": "56826ebce4b0945ebc182a93"}, {"problem": 83, "code": "(fn [& args] (if (= (.indexOf args (not (first args))) -1) false true))", "user": "5684e200e4b04eec3ec5cfc4"}, {"problem": 83, "code": "(fn [& args] (let [s (apply list args)]\n               (if (every? true? s) \n                 false\n                 (if (some true? s)\n                   true\n                   false))))", "user": "567d18c9e4b05957ce8c61c4"}, {"problem": 83, "code": "not=", "user": "56798d83e4b05957ce8c618b"}, {"problem": 83, "code": "(fn [& b] (not (or (every? true? b) (every? false? b)) ))", "user": "568513c4e4b04eec3ec5cfc5"}, {"problem": 83, "code": "(fn [& v]\n  (and \n   (reduce #(or %1 %2) (conj v false))\n   (reduce #(or (not %1) (not %2)) (conj v true))))", "user": "5683d2a9e4b0945ebc182aa0"}, {"problem": 83, "code": "(fn [& xs] (true? (and (not (every? true? xs)) (some true? xs))))", "user": "5686e652e4b0dcc4269f4059"}, {"problem": 83, "code": "(fn [& bools]\n  (and \n   (not (reduce #(and %1 %2) bools))\n   (reduce #(or %1 %2) bools)))", "user": "567bf820e4b05957ce8c61ad"}, {"problem": 83, "code": "(fn [& args]\n    (and (not (every? identity args))\n          (not-every? #(not (identity %)) args)\n    )\n  )", "user": "5681afaae4b0945ebc182a87"}, {"problem": 83, "code": "(fn [& xs] (-> xs set (= #{true false})))", "user": "5275f7a2e4b03e8d9a4a74d0"}, {"problem": 83, "code": "(fn [& l] (if (some #(identity %) l) (not (every? #(identity %) l)) false))", "user": "567b39b6e4b05957ce8c61a3"}, {"problem": 83, "code": "not=", "user": "54026d7de4b0df28a13c62cf"}, {"problem": 83, "code": "not=", "user": "567c48e6e4b05957ce8c61b8"}, {"problem": 83, "code": "#(true? (and (some true? %&) (some false? %&)))", "user": "5658acabe4b0f9d632dd84b7"}, {"problem": 83, "code": "(fn half-truth\n  [& args]\n  (cond\n    (every? true? args) false\n    (some true? args) true\n    :else false))", "user": "568c2d96e4b0dcc4269f40af"}, {"problem": 83, "code": "(fn [& xs]\n  (and (not (reduce #(and %1 %2) true xs)) (reduce #(or %1 %2) false xs)))", "user": "5689fd03e4b0dcc4269f4088"}, {"problem": 83, "code": "(fn [& m] \n  (if (every? true? m)\n    false\n    (not-every? false? m)))", "user": "568242bfe4b0945ebc182a8f"}, {"problem": 83, "code": "(fn [& args] (and (not-every? true? args) (true? (some true? args))))", "user": "56885c32e4b0dcc4269f4068"}, {"problem": 83, "code": "(fn [& args] (boolean (and (some true? args) (some false? args))))", "user": "56897739e4b0dcc4269f407d"}, {"problem": 83, "code": "(fn half-truth [& more]\n  (let [expr (and (some true? more) (some false? more))]\n    (true? expr)))", "user": "56874171e4b0dcc4269f405c"}, {"problem": 83, "code": "(fn [& args]\n  (and (not-every? true? args)\n       (not-every? false? args)))", "user": "52213426e4b0e6a83c8925c4"}, {"problem": 83, "code": "(fn [& args]\n   (or (and (not-every? true? args) (some true? args)) false)\n   )", "user": "5687fe58e4b0dcc4269f4065"}, {"problem": 83, "code": "(fn half-truth\n  [& args]\n  (boolean (and (some true? args)\n       (not (every? true? args)))))", "user": "566f3e18e4b0a866af6896e7"}, {"problem": 83, "code": "not=", "user": "568bddaee4b0dcc4269f40aa"}, {"problem": 83, "code": "#(= (count (set %&)) 2)", "user": "55f85b93e4b03cbcff9738ae"}, {"problem": 83, "code": "(fn [& xs] \n  (and \n   (not (apply = true xs))\n   (boolean (some true? xs))))", "user": "567798afe4b05957ce8c6169"}, {"problem": 83, "code": "not=", "user": "568e450fe4b0dcc4269f40d0"}, {"problem": 83, "code": "(fn [& coll] \n  (and (reduce #(or %1 %2) coll) (not (reduce #(and %1 %2) coll))))", "user": "51be00cae4b0ff155d51d2b8"}, {"problem": 83, "code": "(fn halftruth [& x] (and (true? (some true? x))(not-every? true? x)))", "user": "568820e8e4b0dcc4269f4067"}, {"problem": 83, "code": "(fn half-trurh [& cols]\n  (= (set cols ) #{true false}))", "user": "5634995fe4b0bfe05bf117be"}, {"problem": 83, "code": "#(= true (and (not-every? true? %&) (some true? %&)))", "user": "543b4746e4b032a45b86932c"}, {"problem": 83, "code": "(fn [& args]\n  (let [lor (fn [xs] (reduce #(or % %2) xs))        \n        land (fn [xs] (reduce #(and % %2) xs))]\n    (and\n     (lor args)\n     (not (land args)))))", "user": "532b9075e4b09d4e7a9b5533"}, {"problem": 83, "code": "(fn [& a]\n  (boolean (and (some true? a) (some false? a))))", "user": "569381a5e4b0dcc4269f4104"}, {"problem": 83, "code": "(fn [& bools]\n   (and \n    (reduce (fn [a b] (or a b)) bools)\n    (not (reduce (fn [a b] (and a b)) bools)))\n   )", "user": "565233f2e4b0f9d632dd8461"}, {"problem": 83, "code": "not=", "user": "5686b7c7e4b0dcc4269f4057"}, {"problem": 83, "code": "(fn [& args]\n  (true? (and (some true? args) (some false? args))))", "user": "568227fee4b0945ebc182a8a"}, {"problem": 83, "code": "(fn [& r] (and (not (every? identity r)) (not (every? not r))))", "user": "56066e82e4b08b23635d3173"}, {"problem": 83, "code": "(fn [& n] (and (reduce #(or %1 %2) false (conj n false)) (not (reduce #(and %1 %2) true n))))", "user": "550345fee4b086ebe8a79c6c"}, {"problem": 83, "code": "(fn [& xs] (->> xs\n                distinct\n                keys\n                count\n                (= 2)))", "user": "5657fed1e4b0f9d632dd84ae"}, {"problem": 83, "code": "not=", "user": "568e1871e4b0dcc4269f40cc"}, {"problem": 83, "code": "(fn some' [ & xs ] (if (every? identity xs) false (not-every? (partial = false) xs)))", "user": "566669d8e4b0e91d5f5c566f"}, {"problem": 83, "code": "#(or (and (some true? %&) (not-every? true? %&)) false)", "user": "56743413e4b05957ce8c612e"}, {"problem": 83, "code": "(fn [& args]\n  (let [s (set args)]\n    (and (contains? s true) (contains? s false))))", "user": "56175cf9e4b06b1bb2182a0f"}, {"problem": 83, "code": "(fn half-truth [ & arg]\n    (and (not (every? false? arg)) (not (every? true? arg))))", "user": "552bd5c2e4b0ffed3738f969"}, {"problem": 83, "code": "(fn [& xs]\n  (let [zs (set xs)] \n    (and (contains? zs false) \n         (contains? zs true))))", "user": "56967bc0e4b0dcc4269f4131"}, {"problem": 83, "code": "not=", "user": "569ad037e4b0542e1f8d144f"}, {"problem": 83, "code": "(fn [& ints] (= 2 (count (distinct ints))))", "user": "569c40cee4b0542e1f8d1462"}, {"problem": 83, "code": "(fn [& bools]\n  (if (or (every? true? bools) (every? false? bools))\n    false\n    (some true? bools)))", "user": "5579eed7e4b05c286339e09b"}, {"problem": 83, "code": "(fn[& v](=(count(set v))2))", "user": "56979bb7e4b0e0b3d3318cac"}, {"problem": 83, "code": "(fn [& bools] (if (and (some false? bools) (some true? bools)) true false) )", "user": "567f988be4b0feffd0d18ebe"}, {"problem": 83, "code": "(fn [& vars]\n  (cond\n   (every? true? vars) false\n   (some true? vars) true\n   :else false))", "user": "4e6a8d28535d8ccf87e9fef5"}, {"problem": 83, "code": "(fn half-truth [& coll]\n  (not (or (every? false? coll) (every? true? coll))))", "user": "5693a53ee4b0dcc4269f4106"}, {"problem": 83, "code": "(fn [& bools]\n  (and (not-every? false? bools) (not-every? true? bools)))", "user": "56486d47e4b0284900eef62f"}, {"problem": 83, "code": "(fn half-t [& args] (not (or (every? true? args) (every? false? args))))", "user": "56912f93e4b0dcc4269f40ef"}, {"problem": 83, "code": "(fn [& args]\n  (and \n   (not-every? true? args)\n   (not-every? false? args)))", "user": "5630ce72e4b0bfe05bf11786"}, {"problem": 83, "code": "(fn [& bools] (= 2 (count (keys (group-by true? bools)))))", "user": "5591cc56e4b0604b3f94d582"}, {"problem": 83, "code": "#(and (not (every? identity %&)) (not= (some identity %&) nil) )", "user": "54eff2bee4b024c67c0cf88d"}, {"problem": 83, "code": "(fn [& bools] \n  (if (every? true? bools) \n    false \n    (if (some true? bools)\n      true\n      false\n      )))", "user": "562d15a6e4b0a45d2ff83019"}, {"problem": 83, "code": "(fn [ & x ]\n  (and   (< 0 (count (filter true? x)))\n         (< 0   (count (filter false? x)) )))", "user": "54aa2462e4b09f271ff37cb4"}, {"problem": 83, "code": "(fn half-truth [& x]\n  (and (not-every? true? x) (not-every? false? x)))", "user": "569ab3e2e4b0542e1f8d144a"}, {"problem": 83, "code": "not=", "user": "568a13eae4b0dcc4269f4089"}, {"problem": 83, "code": "(fn [& rest]\n  (and\n   (not (empty? (filter false? rest)))\n   (not (empty? (filter true? rest)))\n   )\n  )", "user": "5689bd04e4b0dcc4269f4082"}, {"problem": 83, "code": "(fn [& bools]\n     (and (true? (some true? bools)) (false? (every? true? bools))))", "user": "56936547e4b0dcc4269f4101"}, {"problem": 83, "code": "(fn [& args]\n  (or (and (some true? args) (not (every? true? args))) false))", "user": "51441ce7e4b0b4fb4ace5f41"}, {"problem": 83, "code": "(fn [& p]\n  (if (= 0 (* (count (filter #(= % true) p))\n            (count (filter #(= % false) p))))\n    false\n    true))", "user": "54a80855e4b09f271ff37c9e"}, {"problem": 83, "code": "(fn [& args]\n  (and (true? (some true? args))\n       (not (every? true? args))))", "user": "56877fcbe4b0dcc4269f405e"}, {"problem": 83, "code": "#(and (not-every? identity %&) (not-every? not %&))", "user": "525523e3e4b0541d1855b9cc"}, {"problem": 83, "code": "(fn [& args] (let [m (group-by true? args)] (if (and (m true) (m false)) true false)))", "user": "5637557ce4b0bfe05bf117d4"}, {"problem": 83, "code": "(fn half-true [& booleans]\n  (loop [booleans booleans\n         count-true 0\n         count-false 0]\n    (cond\n      (and (> count-true 0) (> count-false 0)) true\n      :else (if-let [b (seq booleans)]\n              (if (true? (first b)) (recur (next booleans) (inc count-true) count-false)\n                  (recur (next booleans) count-true (inc count-false)))\n              false))))", "user": "524b827ce4b09eba1c0223d7"}, {"problem": 83, "code": "(fn [ & x]\n    \n    ( = (set x) #{true false} )\n    \n    );END:fn", "user": "56a358d0e4b0542e1f8d14c9"}, {"problem": 83, "code": "(fn [& x] (true? (and (some true? x) (some false? x))))", "user": "56992162e4b0542e1f8d143c"}, {"problem": 83, "code": "(fn [& v] (if (and (some false? v) (some true? v)) true false))", "user": "56a38a4ce4b0542e1f8d14cc"}, {"problem": 83, "code": "(fn [& input] (and (= false (apply = input)) (some true? input)))", "user": "569425b6e4b0dcc4269f410e"}, {"problem": 83, "code": "not=", "user": "56a0ac99e4b0542e1f8d14a6"}, {"problem": 83, "code": "(fn [& x]\n  (and (>= (count (filter true? x)) 1) (>= (count (filter false? x)) 1))   \n\n)", "user": "5650ac8be4b0284900eef6c2"}, {"problem": 83, "code": "not=", "user": "566a3a26e4b0a866af689699"}, {"problem": 83, "code": "#(true?\n (and\n  (some true? %&)\n  (some false? %&)))", "user": "55263009e4b0ffed3738f916"}, {"problem": 83, "code": "#(and (not-every? true? %&) (not-every? false? %&))", "user": "569951e4e4b0542e1f8d143e"}, {"problem": 83, "code": "(fn [& args]\n  (let [t (filter identity args)\n        c (count t)]\n    (cond (= 0 c) false ; all false\n          (= (count args) c) false ; all true\n          :else true)))", "user": "56a51f26e4b0542e1f8d14e0"}, {"problem": 83, "code": "(fn pia [& args]\n  (if (= nil (and\n               (some true? args)\n               (some false? args)\n               )\n        )\n    false\n    true\n    )\n  )", "user": "569ce6fee4b0542e1f8d146c"}, {"problem": 83, "code": "(fn [& args]\n  (and\n   (reduce #(or %1 %2) args)\n   (reduce #(or %1 %2) (map not args))))", "user": "56abaf0be4b03c432f187341"}, {"problem": 83, "code": "(fn ht [& args] \n \t(loop [ n (seq args) tFlag false fFlag false ]\n      (cond \n       (empty? n) (and tFlag fFlag)\n       (= (first n) true ) (recur (rest n) true fFlag)\n       (= (first n) false ) (recur (rest n) tFlag true )\n       )\n      )\n  )", "user": "56942b5fe4b0dcc4269f411c"}, {"problem": 83, "code": "(fn [& args]\n  (cond (every? true? args) false\n        (some true? args) true\n        :else false))", "user": "5297dcc5e4b02ebb4ef75047"}, {"problem": 83, "code": "(fn [& bools] (not= 1 (count (set bools))))", "user": "56481722e4b0284900eef628"}, {"problem": 83, "code": "(fn [& args] (not= nil (and (some false? args) (some true? args))))", "user": "56a75810e4b0542e1f8d14fc"}, {"problem": 83, "code": "(fn\n  [& bools]\n  (not \n   (= \n    (count \n     (partition-by \n      identity \n      bools))\n    1)))", "user": "51b01309e4b0c53cf2e68a57"}, {"problem": 83, "code": "(fn [& x] (if (every? false? x) false (if (every? true? x) false true) ))", "user": "567f034be4b0feffd0d18eba"}, {"problem": 83, "code": "(fn [head & tail] \n    (= 2 (count (vals (group-by false? (apply vector head tail))))))", "user": "51a7bf26e4b0da5f497bde8c"}, {"problem": 83, "code": "#(= 2 (count (set %&)))", "user": "53c74cfce4b00fb29b2212a7"}, {"problem": 83, "code": "(fn [& p] (and (contains? (set p) true) (contains? (set p) false)))", "user": "53f5c402e4b0db01ade6f9d4"}, {"problem": 83, "code": "(fn [& list] (boolean (and (some #{true} list) (not-every? #{true} list))))", "user": "56ac81ace4b03c432f187347"}, {"problem": 83, "code": "(fn [& b] (and (boolean (seq (filter true? b))) (boolean (seq (filter false? b)))) )", "user": "5006c169e4b0678c553fc48d"}, {"problem": 83, "code": "not=", "user": "56a1b854e4b0542e1f8d14b2"}, {"problem": 83, "code": "(fn [ & flags ] \n  (and \n    (reduce #(or %1 %2) flags) \n    (not \n      (reduce #(and %1 %2) flags))))", "user": "5243233fe4b076204b44faac"}, {"problem": 83, "code": "(fn [& args] (if (= 1 (count (distinct args))) false (contains? (set (distinct args)) true)))", "user": "56791447e4b05957ce8c6183"}, {"problem": 83, "code": "(fn [& xs]  (if (and (some true? xs) (some false? xs ) ) true false))", "user": "55f9b2b6e4b03cbcff9738c8"}, {"problem": 83, "code": "(fn [& bs]\n  (= #{false true}\n     (set bs)))", "user": "565f8fd2e4b068f2fe63dc41"}, {"problem": 83, "code": "(fn truth [& args]\n(and\n(not (every? true? args))\n(or (some true? args) false)))", "user": "569adec2e4b0542e1f8d1450"}, {"problem": 83, "code": "not=", "user": "5515b68de4b055c2f668d4ef"}, {"problem": 83, "code": "(fn [& vars] \n   (cond \n   (every? true? vars) false \n    (some true? vars) true \n      :else false))", "user": "56942923e4b0dcc4269f4112"}, {"problem": 83, "code": "not=", "user": "56abeb1fe4b03c432f187344"}, {"problem": 83, "code": "(fn[& s] (= 2 (count (distinct s))))", "user": "56824e1be4b0945ebc182a91"}, {"problem": 83, "code": "(fn [& all] \n  (and\n   (> (count (filter true? all)) 0)\n   (< (count (filter true? all)) (count all))))", "user": "55d1ec3ee4b0e31453f64a4c"}, {"problem": 83, "code": "(fn [& x](or (and (not (every? identity x)) (some identity x) ) false))", "user": "56ae4c21e4b03c432f18735c"}, {"problem": 83, "code": "(fn [& args]\n  (true? (and (some true? args) (not (every? true? args)))))", "user": "53d40508e4b00fb29b221332"}, {"problem": 83, "code": "(fn [& vars]\n  (if (and (some true? vars) (not (every? true? vars)))\n     true false))", "user": "56a9ea17e4b07966d5a8a07c"}, {"problem": 83, "code": "(fn [a & rest]\n  (let [x (conj rest a)]\n    (and (true? (some true? x)) (not-every? true? x))))", "user": "5294a49be4b02ebb4ef7500f"}, {"problem": 83, "code": "(fn [& coll] (and (not (reduce #(and %1 %2) coll)) (reduce #(or %1 %2) coll)))", "user": "56b2573ce4b0982f16b37e02"}, {"problem": 83, "code": "(fn [& b] (let [r ((vec b) 0)] (not (every? #(= r %) b))))", "user": "56b41972e4b0982f16b37e1f"}, {"problem": 83, "code": "not=", "user": "5694292ee4b0dcc4269f4113"}, {"problem": 83, "code": "not=", "user": "56942962e4b0dcc4269f4117"}, {"problem": 83, "code": "(fn [& values]\n  (boolean (and (some identity values) \n                (some not values))))", "user": "5617a540e4b06b1bb2182a12"}, {"problem": 83, "code": "(fn [& col]\n           (if (every? identity col)\n             false\n             ((complement nil?) (some identity col))))", "user": "56b1ab17e4b0982f16b37df1"}, {"problem": 83, "code": "not=", "user": "5693b40ce4b0dcc4269f4107"}, {"problem": 83, "code": "(fn someTrue [& x]\n  (loop [a x\n        anyTrue false\n        anyFalse false]\n  (if (> (count a) 0)\n    (if (first a) \n      (recur (rest a) true anyFalse)\n      (recur (rest a) anyTrue true))\n    (if (= anyTrue anyFalse)\n      true\n      false))))", "user": "56a3c89ae4b0542e1f8d14cf"}, {"problem": 83, "code": "not=", "user": "56941e48e4b0dcc4269f410d"}, {"problem": 83, "code": "not=", "user": "56942970e4b0dcc4269f4118"}, {"problem": 83, "code": "(fn [& args]\n        (and\n            (not \n                (reduce\n                    #(and %1 %2)\n                    args))\n            (reduce\n                #(or %1 %2)\n                args)))", "user": "5694290fe4b0dcc4269f4110"}, {"problem": 83, "code": "#(true? (and (some true? %&) (some false? %&)))", "user": "56b295f7e4b0982f16b37e08"}, {"problem": 83, "code": "(fn [& args]\n  (true?\n  (and (some true? args) (some false? args))))", "user": "5694129de4b0dcc4269f410c"}, {"problem": 83, "code": "(fn [& args] \n   (if (every? identity args) \n     false \n     (true? (some identity args))))", "user": "569429c7e4b0dcc4269f411a"}, {"problem": 83, "code": "#(true? \n  (and\n    (some true? %&)\n    (some false? %&)))", "user": "5694284de4b0dcc4269f410f"}, {"problem": 83, "code": "(fn epistimology [& args]\n  (cond \n   (every? true? args) false\n   (some true? args) true\n    :else false)\n  )", "user": "56942939e4b0dcc4269f4114"}, {"problem": 83, "code": "#(true? \n  (and\n    (some true? %&)\n    (some false? %&)))", "user": "56942944e4b0dcc4269f4115"}, {"problem": 83, "code": "(fn [& xs] (if (some true? xs) (not-every? true? xs) false))", "user": "56ae214ce4b03c432f18735a"}, {"problem": 83, "code": "(fn [& bools] (let [c (frequencies bools)] (if-not (and (c true) (c false)) false true)))", "user": "56baa68ce4b0f26550335947"}, {"problem": 83, "code": "(fn [& v]\n  (and (if (nil? (some true? v))\n         false\n         true)\n       (if (nil? (some false? v))\n         false\n         true)))", "user": "5599abc9e4b031d6649c9bb0"}, {"problem": 83, "code": "(fn [& bool-seq] (cond \n                  (and (some true? bool-seq) (some false? bool-seq)) true\n                  :else false\n                  ))", "user": "56baab13e4b0f26550335948"}, {"problem": 83, "code": "(fn [& list]\n  (let [allcount (count list) truecount (count (filter #(= true %) list))]\n    (if (or (= allcount truecount) (= 0 truecount)) false true)))", "user": "5669eb9ae4b04acd4f672e02"}, {"problem": 83, "code": "not=", "user": "56bb3a4be4b0f26550335951"}, {"problem": 83, "code": "(fn [& more] (and (false? (every? identity more)) (true? (some identity more))))", "user": "531a0709e4b08068f379ed87"}, {"problem": 83, "code": "(fn [& xs]\n  (= 2 (count (distinct xs))))", "user": "563cdfdfe4b0bfe05bf11840"}, {"problem": 83, "code": "(fn [& args] (not (nil? (and (some true? args) (some false? args)))))", "user": "55e206f3e4b050e68259b429"}, {"problem": 83, "code": "(fn [& x] (and ((complement not-any?) identity x) (not-every? identity x)))", "user": "56b86e64e4b0f26550335924"}, {"problem": 83, "code": "(fn [& bools]\n  (cond\n   (every? true? bools) false\n   (every? false? bools) false\n   :else true))", "user": "56bb9ccce4b0f26550335959"}, {"problem": 83, "code": "(fn [& args] \n  (true? (and (some false? args)\n       (some true? args))))", "user": "56a01895e4b0542e1f8d149f"}, {"problem": 83, "code": "(fn [& xs]\n  (boolean (and (some identity xs)\n                (not (every? identity xs)))))", "user": "56ba1406e4b0f2655033593c"}, {"problem": 83, "code": "(fn [& args]\n  (and (not-every? true? args)\n       (not-every? false? args)))", "user": "56bb81ebe4b0f26550335957"}, {"problem": 83, "code": "(fn [& bools] (= (set bools) #{true false}))", "user": "563536f8e4b0bfe05bf117c5"}, {"problem": 83, "code": "(fn some-true\n  [& bools]\n  (true? (and (some true? bools) (some false? bools))))", "user": "5609d328e4b05f002753deee"}, {"problem": 83, "code": "#(and (not (every? identity %&)) (not (nil? (some #{true} %&))))", "user": "55ed5a2de4b0121d4835fdd8"}, {"problem": 83, "code": "(fn foo [& xs]\n  (and (reduce #(or %1 %2) xs)\n       (not (reduce #(and %1 %2) xs))))", "user": "56bfcba1e4b060a8e693e3a1"}, {"problem": 83, "code": "not=", "user": "56a36f76e4b0542e1f8d14ca"}, {"problem": 83, "code": "not=", "user": "56bca51ae4b0f26550335963"}, {"problem": 83, "code": "not=", "user": "56b2300ce4b0982f16b37dff"}, {"problem": 83, "code": "(fn [& args]\n  (if (and (some true? args)\n           (some false? args))\n    true\n    false))", "user": "55fc838be4b0f488688e0674"}, {"problem": 83, "code": "(fn [& b]\n  (and\n   (reduce #(or % %2) b)\n   (not\n    (reduce #(and % %2) b)\n   )\n  )\n)", "user": "56618ddfe4b068f2fe63dc6a"}, {"problem": 83, "code": "#(->> %& (distinct) (take 2) (count) (= 2))", "user": "55bb1b26e4b01b9910ae29e0"}, {"problem": 83, "code": "not=", "user": "52c1cc8be4b07a9af579236b"}, {"problem": 83, "code": "(fn [& a] (not (empty? (rest (set a)))))", "user": "56c08696e4b060a8e693e3aa"}, {"problem": 83, "code": "(fn [& args]\n  (cond\n   (every? true? args) false\n   (some true? args) true\n   :else false))", "user": "5250a13ee4b0541d1855b839"}, {"problem": 83, "code": "(fn [& args]\n  (if (and (some #(= true %) args) (not (every? #(= true %) args)))\n    true\n    false))", "user": "56c0aeb8e4b060a8e693e3af"}, {"problem": 83, "code": "(fn [& args]\n  (and (not (= nil (some true? args))) (not (every? true? args))))", "user": "56c1e720e4b0839206b9d68b"}, {"problem": 83, "code": "#(true? (and (some true? %&) (some false? %&) )  )", "user": "56b7c32ee4b0982f16b37e48"}, {"problem": 83, "code": "(fn [& v]  (= 2 (count (group-by identity v)))\n           \n            )", "user": "56a6051fe4b0542e1f8d14e5"}, {"problem": 83, "code": "(fn [& a] (> (count (partition-by identity a)) 1))", "user": "56aed78fe4b03c432f187363"}, {"problem": 83, "code": "; (not (= false false true))\n; true\n; (not (= false false false))\n; false\n; (not (= true true true))\n; false\n#(not (apply = %&))", "user": "56c4f43ce4b05cc29241ee9c"}, {"problem": 83, "code": "(fn [& x] (let [x (seq x)] (and (not (nil? (some true? x)))(not-every? true? x))))", "user": "56646a7fe4b0e91d5f5c5657"}, {"problem": 83, "code": "(fn [& x]\n  (= ((complement not-any?) true? x)\n     ((complement not-any?) false? x)))", "user": "56a7be01e4b07966d5a8a05e"}, {"problem": 83, "code": "(fn [& xs] \n  (= 2 (count (set xs))))", "user": "53bd476ae4b0d9a98559a6ca"}, {"problem": 83, "code": "(fn [& more] (and (not (every? true? more)) (not (not (some true? more)))))", "user": "560a02c2e4b05f002753def0"}, {"problem": 83, "code": "#(true? \n  (and\n    (some true? %&)\n    (some false? %&)))", "user": "56cba075e4b0ea9b8538f737"}, {"problem": 83, "code": "(fn [& sq]\n  (boolean \n   (and\n    (some true? sq)\n    (some false? sq))))", "user": "56c9970ce4b0ed865f9758de"}, {"problem": 83, "code": "not=", "user": "567931e9e4b05957ce8c6184"}, {"problem": 83, "code": "not=", "user": "56942955e4b0dcc4269f4116"}, {"problem": 83, "code": "(fn [& bools]\n  (if (every? true? bools)\n    false\n    (if (some true? bools)\n      true\n      false)))", "user": "55f73078e4b06e875b46cea4"}, {"problem": 83, "code": "(fn [b & more]\n  (loop [src (cons b more), count-of-true 0]\n    (if (empty? src)\n      (not (or (= count-of-true 0)\n               (= count-of-true (count (cons b more)))))\n      (recur (rest src)\n             (if (first src)\n               (inc count-of-true)\n               count-of-true)))))", "user": "56c55fbce4b05cc29241eea5"}, {"problem": 83, "code": "(fn [& args]\n  (if (and (some false? args)\n          (some true? args)) \n   \ttrue \n   \tfalse))", "user": "56b18445e4b0982f16b37dee"}, {"problem": 83, "code": "(fn [& coll]\n   (and (or (some true? coll) false)\n        (or (some false? coll) false)))", "user": "53483a32e4b084c2834f4a57"}, {"problem": 83, "code": "(fn half-true [& bools]\n  (true? (and (some true? bools) (not (apply = bools)))))", "user": "567e418fe4b0feffd0d18eb1"}, {"problem": 83, "code": "(fn [& xs] (= true (and (some identity xs) (some identity (map not xs)))))", "user": "52fe31d5e4b047fd55837038"}, {"problem": 83, "code": "(fn \n    [& lst]\n    (let [t (filter identity lst)]\n      (and \n        (>= (count t) 1)\n        (not= (count t) (count lst)))))", "user": "4e8a170c535d3e98b802328f"}, {"problem": 83, "code": "(fn[& args] (true? (and (some true? args) (some false? args))))", "user": "54ce541de4b057c6fda3a2ac"}, {"problem": 83, "code": "(fn [& ps] (boolean (and (some identity ps) (not (every? identity ps)))))", "user": "5638b88de4b0bfe05bf117e9"}, {"problem": 83, "code": "#(and (not-every? true? %&)\n      (not (nil? (some true? %&))))", "user": "56d1afd9e4b0ea9b8538f791"}, {"problem": 83, "code": "(fn [& args]\n  (and (contains? (set args) false)\n       (contains? (set args) true))\n)", "user": "506af7d8e4b0a2a5463de37d"}, {"problem": 83, "code": "(fn f [& x] (if (some identity x) (not (every? identity  x)) false))", "user": "55c5e781e4b0e31453f649b8"}, {"problem": 83, "code": "(fn [& bools]\n  (and\n   (boolean (some true? bools))\n   (not-every? true? bools)))", "user": "56d228f3e4b0ea9b8538f79a"}, {"problem": 83, "code": "(fn [& v]\n  (if (every? true? v)\n    false\n    (not-every? false? v)))", "user": "5286a2a9e4b0239c8a67ae1e"}, {"problem": 83, "code": ";(fn half-truth [& coll]\n;  (and\n;    (not-every? true? coll)\n;    (boolean (some true? coll))))\nnot=", "user": "56488119e4b0284900eef632"}, {"problem": 83, "code": "#(< 1 (count(distinct %&)))", "user": "56795deae4b05957ce8c6187"}, {"problem": 83, "code": "#(true? \n  (and\n    (some true? %&)\n    (some false? %&)))", "user": "56d05ba2e4b0ea9b8538f77d"}, {"problem": 83, "code": "not=", "user": "56d63729e4b0ea9b8538f7ca"}, {"problem": 83, "code": "(fn [& args]\n  (if (< (count args) 2)\n  false\n  (and (not (not-any? false? args))  (not (not-any? true? args)) )))", "user": "56c60b36e4b05cc29241eead"}, {"problem": 83, "code": "(fn [& x]\n   (every? false? [(every? identity x)\n                         (every? false? x)]))", "user": "56c70cc2e4b0ed865f9758b5"}, {"problem": 83, "code": "(fn [& r] (if (reduce #(or %1 %2) r) (not (every? identity  r)) false))", "user": "54be7e93e4b0ed20f4ff6eed"}, {"problem": 83, "code": "(fn [& booleans]\n  (= (set booleans) #{true false}))", "user": "56d4b22de4b0ea9b8538f7bb"}, {"problem": 83, "code": "(fn [& args]\n  (loop [has-true false\n         has-false false\n         rem args]\n    (if (and has-true has-false)\n      true\n      (if (empty? rem)\n        false\n        (let [this-one (first rem)]\n          (recur (or has-true (true? this-one))\n                 (or has-false (false? this-one))\n                 (rest rem)))))))", "user": "56d5fd24e4b0ea9b8538f7c5"}, {"problem": 83, "code": "(fn [& a] (boolean (and\n            (some #(not %) a)\n            (some #(identity %) a))))", "user": "56a1fce9e4b0542e1f8d14b7"}, {"problem": 83, "code": "#(and (.contains %& true)\n      (.contains %& false))", "user": "56ab80f1e4b03c432f18733e"}, {"problem": 83, "code": ";(fn [& args]\n;   (true? (and (some false? args) (some true? args) )))\nnot=", "user": "55d62a68e4b0e31453f64a96"}, {"problem": 83, "code": "#(true? (and (some true? %&) (some false? %&)))", "user": "54b8dfece4b0ed20f4ff6e9a"}, {"problem": 83, "code": "(fn [& rest] (= #{true false} (set rest)))", "user": "52c634b1e4b0c2d177d6210a"}, {"problem": 83, "code": "(fn [& args] (true? (and (some true? args) (not (every? true? args)))))", "user": "56dc3bdfe4b0ea9b8538f819"}, {"problem": 83, "code": "(fn [& x]\n  (boolean (and (some #(= true %) x) (some #(= false %) x))))", "user": "4dad6fcb8e77d6ed59f12a44"}, {"problem": 83, "code": "#(and (if (some true? %&) true false) (not-every? true? %&))", "user": "550b502ae4b06e50f9beb13f"}, {"problem": 83, "code": "(fn xor [& args]\n  (and (boolean (some identity args)) (not-every? identity args)))", "user": "56cf80f9e4b0ea9b8538f76a"}, {"problem": 83, "code": "(fn [& t]\n   (cond\n     (every? true? t) false\n     (some true? t) true\n     :else false))", "user": "56012cd7e4b04bb52996e17d"}, {"problem": 83, "code": "(fn [& bools]\n  (if (or \n       (every?  identity bools) \n       (not-any? identity  bools)\n       )\n    false\n    true\n    ))", "user": "56d74c88e4b0ea9b8538f7d9"}, {"problem": 83, "code": "not=", "user": "569637d8e4b0dcc4269f4130"}, {"problem": 83, "code": "(fn blah2 [& boo]\n  (if \n    (and (some true? boo) (not (every? true? boo)) )\n   true false) \n  )", "user": "56dd0179e4b0ea9b8538f826"}, {"problem": 83, "code": "(fn [& args] (boolean (and (some false? args) (some true? args))))", "user": "56603e5fe4b068f2fe63dc4a"}, {"problem": 83, "code": "(fn [& args] (boolean (and (not-every? identity args) (some identity args))))", "user": "56d68cbae4b0ea9b8538f7cd"}, {"problem": 83, "code": "(fn [& args] (every? true? [(not-every? true? args) (some true? args)]))", "user": "56b6a50ae4b0982f16b37e3c"}, {"problem": 83, "code": "(fn half-truth? [& args]\n  (cond \n    (every? #(or %) args) false\n    (not-any? #(or %) args) false\n    :else true))", "user": "557e56aae4b05c286339e0d5"}, {"problem": 83, "code": "(fn [& args] \n\t(and \n     \t(not-every? identity args) \n     \t(not-every? (complement identity) args)))", "user": "53110f32e4b08068f379ece4"}, {"problem": 83, "code": "(fn [& bools] (if (or (every? #(= % true) bools)\n    (every? #(= % false) bools))\n      false\n      true))", "user": "56df62b3e4b0ca2494a095ef"}, {"problem": 83, "code": "(fn [& args] (and (< -1 (.indexOf args true)) (< -1 (.indexOf args false))))", "user": "56e227a8e4b03a7c14b85a31"}, {"problem": 83, "code": "(fn half-truth\n  [& args]\n  (cond\n    (every? true? args) false\n    (= nil (some true? args)) false\n    :else\n    true))", "user": "56df63c7e4b0ca2494a095f5"}, {"problem": 83, "code": "not=", "user": "5672925fe4b05957ce8c6114"}, {"problem": 83, "code": "(fn  prob-83a\n    [& bools]\n    (boolean (and (some  (partial = true) bools)\n                (some  (partial = false) bools))))", "user": "56c3aca0e4b05cc29241ee90"}, {"problem": 83, "code": "(fn p\n  [& b]\n  (cond\n    (every? true? b) false \n    (some true? b) true\n    :else false))", "user": "56df632ce4b0ca2494a095f2"}, {"problem": 83, "code": "(comp #(= 2 %1) count #(set %&))", "user": "527bd988e4b03e8d9a4a759d"}, {"problem": 83, "code": "(fn [& args]\n  (let [trueCount (count (filter true? args))] \n    (and (> trueCount 0) (< trueCount (count args))) )\n  \n  )", "user": "550b5c10e4b06e50f9beb143"}, {"problem": 83, "code": "(fn [& bools]\n  (= 2 (count (keys (group-by identity bools)))))", "user": "56491d05e4b0284900eef63a"}, {"problem": 83, "code": "#(if (every? true? %&)\n   false\n   (if (some true? %&)\n     true\n     false))", "user": "56e2dbf4e4b03a7c14b85a3b"}, {"problem": 83, "code": "(fn [& bools]\n  (boolean (and (some true? bools) (not-every? true? bools))))", "user": "56c427bbe4b05cc29241ee94"}, {"problem": 83, "code": "(fn\n  [& xs]\n  (and (not-every? true? xs) (not-every? false? xs))\n  )", "user": "560d4994e4b05f002753df3c"}, {"problem": 83, "code": "(fn f\n    [& args]\n    (and (not (nil? (some true? args))) (not (every? true? args))))", "user": "56df62eee4b0ca2494a095f0"}, {"problem": 83, "code": "#(if (apply = %&) false true)", "user": "56d4b1aee4b0ea9b8538f7ba"}, {"problem": 83, "code": "(fn f\n  [& valores]\n   (if (every? true? valores)\n    false\n  \t(not (every? false? valores))))", "user": "56df63e1e4b0ca2494a095f6"}, {"problem": 83, "code": "(fn\n   [& kevans]\n   \n   (if (and (some false? kevans) (some true? kevans) )\n     true\n     false\n     )\n   )", "user": "56e9a56ae4b04a395b9a03fc"}, {"problem": 83, "code": "(fn\n  [& args]\n  (and (not (not-any? true? args)) (not (every? true? args))))", "user": "56df6846e4b0ca2494a095fa"}, {"problem": 83, "code": "#(and (not-every? true? %&) (boolean (some true? %&)))", "user": "56e02c1ce4b0ca2494a09602"}, {"problem": 83, "code": "(fn [& bools]\n  (and (or (some #(= true %) bools) false)\n       (not-every? #(= true %) bools)))", "user": "52d38c51e4b099d49816f0c5"}, {"problem": 83, "code": "#(if (> (count (partition-by true? %&)) 1) true false)", "user": "56c560ede4b05cc29241eea6"}, {"problem": 83, "code": "not=", "user": "56e06625e4b0ca2494a09607"}, {"problem": 83, "code": "(comp (partial = 2) count distinct list)", "user": "56ecc4b5e4b04a395b9a043e"}, {"problem": 83, "code": "(fn x-or [& items]\n  (and (not= (.indexOf items true) -1)\n       (not= (.indexOf items false) -1)))", "user": "569dd6e8e4b0542e1f8d1480"}, {"problem": 83, "code": "not=", "user": "56a37ccee4b0542e1f8d14cb"}, {"problem": 83, "code": "(fn [& x] (and (not(not-any? true? x)) (not(not-any? false? x))))", "user": "5258d2abe4b0cb4875a45cc1"}, {"problem": 83, "code": "(fn [& c] (and (boolean (some true? c)) (not (every? true? c)) ) )", "user": "56db90d4e4b0ea9b8538f80d"}, {"problem": 83, "code": "(fn [& x] (and (not-every? true? x) (not-every? false? x)))", "user": "56ebe773e4b04a395b9a042a"}, {"problem": 83, "code": "not=", "user": "56dc483fe4b0ea9b8538f81b"}, {"problem": 83, "code": "(fn a-half-truth [& bs]\n  (and (boolean (some identity bs))\n       (not-every? identity bs)))", "user": "518b8561e4b0f028e99addef"}, {"problem": 83, "code": "(fn [& xs] \n  (let [p (and (some true? xs) (some false? xs))] \n    (if p true false)))\n\n;; better solution\n;; (fn [& xs]\n;;  (boolean (and (some true? xs) (some false? xs))))", "user": "56ee0691e4b04a395b9a044c"}, {"problem": 83, "code": "(fn some-true\n  [& args]\n  (and\n    (not (zero? (count (filter true? args))))\n    (not (zero? (count (filter false? args))))))", "user": "56050f06e4b08b23635d3161"}, {"problem": 83, "code": "(fn [& bools]\n  (let [cnt (count (filter true? bools))]\n    (< 0 cnt (count bools))))", "user": "562268dce4b03f08ee9a9224"}, {"problem": 83, "code": "(fn [& args]\n  (and (contains? (set args) false)\n       (contains? (set args) true)))", "user": "56e7ebb4e4b02e7e935eb6e1"}, {"problem": 83, "code": "(fn some-but-not-all \n  [& bools]\n  (= 2 \n     (->> bools\n       (map true?)\n       (distinct)\n       (count))))", "user": "56e99ec8e4b04a395b9a03fb"}, {"problem": 83, "code": "#(true? (and (some false? %&) (some true? %&)))", "user": "56f188e9e4b04a395b9a0494"}, {"problem": 83, "code": "(fn [& args] (< 1 \n             (count\n              (set args)\n              )\n             )\n   )", "user": "56f15eade4b04a395b9a048e"}, {"problem": 83, "code": "(fn [& s]\n    (if (and (some identity s)\n             (not (every? identity s)))\n      true\n      false))", "user": "56eaad95e4b04a395b9a040f"}, {"problem": 83, "code": "(fn[& xs]\n  (and\n    (or (some (complement identity) xs) false)\n    (or (some identity xs) false)))", "user": "55101237e4b06e50f9beb181"}, {"problem": 83, "code": "(fn my-not [& args]\n  (let [x (and (not-every? identity args) (some identity args))] (if (nil? x) false x) ))", "user": "56e53d2fe4b02e7e935eb6bc"}, {"problem": 83, "code": "(fn [& xs] (and (reduce #(or %1 %2) xs)\n                (not-every? identity xs)))", "user": "52c35afce4b07a9af579238c"}, {"problem": 83, "code": "(fn [& args]\n    (and (not (empty? (filter #(= % true) args)))\n         (not (empty? (filter #(= % false) args)))))", "user": "563cce5be4b0bfe05bf1183f"}, {"problem": 83, "code": "#(and (not-every? identity %&) (not-every? not %&))", "user": "56f53962e4b046a417f9206c"}, {"problem": 83, "code": "(fn [& rest](if (and (some true? rest) (some false? rest)) true false))", "user": "542fa0dde4b0dad94371f2d2"}, {"problem": 83, "code": "#(true?\n  (and\n   (some true? %&)\n   (some false? %&)))", "user": "56ca0da9e4b0ea9b8538f715"}, {"problem": 83, "code": "(fn [& args] (let [arr (sort args)] (not (= (first arr) (last arr)))))", "user": "56cefadee4b0ea9b8538f763"}, {"problem": 83, "code": "(fn half-truth ([a] false)\n  ([a & more]\n    (let [bs (set (cons a more))] (and (not (bs false)) (= 2 (count bs))))))", "user": "56dc3dbbe4b0ea9b8538f81a"}, {"problem": 83, "code": "(fn [& args]\n  (boolean (and (some identity args) (not (every? identity args)))))", "user": "56a76f36e4b07966d5a8a05b"}, {"problem": 83, "code": "(fn [ & r] (and (not= nil (some #{true} r)) (not (every? #(= % true) r))))", "user": "56f258d3e4b04a395b9a04a1"}, {"problem": 83, "code": "(fn [& xs]\n  (> (count xs) (get (frequencies xs) true 0) 0))", "user": "56df254be4b0ca2494a095ea"}, {"problem": 83, "code": "#(true? (and (some true? %&)(some false? %&)))", "user": "54e7425ee4b024c67c0cf810"}, {"problem": 83, "code": "not=", "user": "568c92c6e4b0dcc4269f40b8"}, {"problem": 83, "code": "#(true? (and \n         (some true? %&)\n         (some false? %&))\n        )", "user": "56eb16d8e4b04a395b9a041d"}, {"problem": 83, "code": "(fn h-truth \n  ([a] false)\n  ([a & r] \n   (let [x (cons a r)\n         cnt (count (partition-by identity x))]\n     (> cnt 1))))", "user": "56742817e4b05957ce8c612d"}, {"problem": 83, "code": ";#(every? identity ((juxt (partial some true?) (partial some false?)) %&))\nnot=", "user": "56f7ecdfe4b08e7d20b96834"}, {"problem": 83, "code": "(fn p [& params]\n  (if (every? true? params) false\n    (if (every? false? params) false true)))", "user": "56fc1bc7e4b07572ad1a88dd"}, {"problem": 83, "code": "(fn [& r] (= 2 (count (group-by true? r))))", "user": "56be8649e4b0f26550335983"}, {"problem": 83, "code": "#(= (set %&) #{true false})", "user": "56fdd9a1e4b08d47c97781a8"}, {"problem": 83, "code": "(fn mixed [ & args]                                                                                                                                                                        \n  (and                                                                                                                                                                                       \n   (not= nil (some identity args))                                                                                                                                                           \n   (not= nil (some not args))                                                                                                                                                                \n   )                                                                                                                                                                                         \n  )", "user": "56fbe0cce4b07572ad1a88d8"}, {"problem": 83, "code": "#(let [[t f] (partition-by true? %&)] (boolean (and (seq t) (seq f))))", "user": "4f5599dfe4b0a7574ea71806"}, {"problem": 83, "code": "(fn [& args] (= (set args) #{true false}))", "user": "56c56603e4b05cc29241eea7"}, {"problem": 83, "code": "(fn [& args]\n  (if (and (some true? args) (not (every? true? args))) true false))", "user": "536d24ece4b0fc7073fd6e54"}, {"problem": 83, "code": "(fn [& a] (not (apply = a)))", "user": "56d2a103e4b0ea9b8538f7a3"}, {"problem": 83, "code": "(fn [& xs] (let [s (set xs)]\n   (cond\n       (every? true? s) false\n       (some true? s) true\n       :else false)))", "user": "56fde58ae4b08d47c97781aa"}, {"problem": 83, "code": "(fn [& s]\n  (true? (and (some true? s) (not (every? true? s)))))", "user": "57008afae4b08d47c97781ca"}, {"problem": 83, "code": "(fn [& bs]\n  (let [trues (filter true? bs)]\n    (if (empty? trues)\n      false\n      (not (= bs trues)))))", "user": "57006957e4b08d47c97781c8"}, {"problem": 83, "code": "(fn [& params] (and (not-every? identity params) (not-every? (complement identity) params)))", "user": "56946d43e4b0dcc4269f411e"}, {"problem": 83, "code": ";(fn [& x] (if (and (some true? x) (some false? x)) true false))\n\n;(fn [& x] (true? (and (some true? x) (some false? x))))\n\nnot=", "user": "5587d91ae4b059ccff29b1e9"}, {"problem": 83, "code": "(fn [& args] (= 2 (count (distinct args))))", "user": "56fbf83de4b07572ad1a88da"}, {"problem": 83, "code": "(fn [& c] \n(if (every? true? c) \n  false \n  (if (some true? c)\n   true \n   false) ))", "user": "569aca1ee4b0542e1f8d144d"}, {"problem": 83, "code": "(fn [& bs]\n    (->> bs (filter true?)\n         (#(and (seq %) (< (count %) (count bs))))\n         (= true)))", "user": "4f57c913e4b0a7574ea7183f"}, {"problem": 83, "code": "(fn [& args] \n  (cond (every? true? args) false\n        (some true? args) true\n        :else false))", "user": "5292feb4e4b0239c8a67af39"}, {"problem": 83, "code": "(fn xor [& args] (and (reduce #(or %1 %2) args) (not (reduce #(and %1 %2) args))))", "user": "570459a9e4b0b0fb43fd0662"}, {"problem": 83, "code": "(fn [& x] (true? (and (some true? x) (some false? x))))", "user": "5576d3c7e4b05c286339e074"}, {"problem": 83, "code": "not=", "user": "55885edae4b059ccff29b1f6"}, {"problem": 83, "code": "(fn trueorfalse [& args]\n  (if (some true? args)\n    (if (some false? args) true false)\n    false))", "user": "5703d21ae4b08d47c97781ff"}, {"problem": 83, "code": "(fn [& args]\n  (if (every? true? args)\n    false\n    (if (some true? args) true false)))", "user": "56f73913e4b08e7d20b9682d"}, {"problem": 83, "code": ";  #(if (and (some true? %&)\n;           (not (every? true? %&)))\n;    true false)\nnot=", "user": "57035ccfe4b08d47c97781ef"}, {"problem": 83, "code": "#(if (and (some true? %&) (not-every? true? %&))\n    true\n    false)", "user": "56c12aa2e4b0839206b9d682"}, {"problem": 83, "code": "(fn [& args]\n  (= (set args) #{true false})\n)", "user": "567e6d24e4b0feffd0d18eb4"}, {"problem": 83, "code": "not=", "user": "57015a1de4b08d47c97781d4"}, {"problem": 83, "code": ";;(fn [& args] (if (some true? args) true (if (every? true? args) false)))\n\n(fn [& args] (if (every? true? args) false (if (some true? args) true false)))", "user": "56ff0ef3e4b08d47c97781ba"}, {"problem": 83, "code": "not=", "user": "57027310e4b08d47c97781e2"}, {"problem": 83, "code": "(fn [& xs]\n  (and (not (nil? (some identity xs)))\n       (not (every? identity xs))))", "user": "51e5a627e4b0efabf93c02db"}, {"problem": 83, "code": "(fn half-thruth [& rest]\n  (and \n    (not (empty? (filter #(= % false) rest)))\n    (reduce #(or %1 %2) rest)))", "user": "56fbcc1fe4b07572ad1a88d5"}, {"problem": 83, "code": "(fn [& bools]\n  (let [distinct-bools (distinct bools)]\n    (if (and (> (count distinct-bools) 1) (some identity distinct-bools)) true false)))", "user": "56e4991fe4b03a7c14b85a4f"}, {"problem": 83, "code": "not=", "user": "528e7740e4b0239c8a67aee0"}, {"problem": 83, "code": "(fn [& args] (let [tc (count (filter true? args)) c (count args)] (and (< 0 tc) (> c tc))))", "user": "4e5e9f6b535d8a8b8723a2d2"}, {"problem": 83, "code": "(fn [& args]\n  (and \n    (not (nil? (some #(= true %) args)))\n    (not (every? #(= true %) args))))", "user": "55ba70f9e4b01b9910ae29d4"}, {"problem": 83, "code": "(fn [& coll] (and (true? (some true? coll))(not (every? true? coll))))", "user": "56d439d4e4b0ea9b8538f7b6"}, {"problem": 83, "code": "(fn\n  [& bools]\n  (if (reduce #(and %1 %2) bools)\n    false\n    (reduce #(or %1 %2) bools)))", "user": "56cb4d06e4b0ea9b8538f72e"}, {"problem": 83, "code": "(fn f [& preds]\n  (and (not (every? identity preds))\n       (boolean (some identity preds))))", "user": "4f8490fae4b033992c121c34"}, {"problem": 83, "code": "(fn [& rest]\n  (cond \n   (every? true? rest) false\n   (some true? rest) true\n   :else false))", "user": "57112a57e4b09c608db70442"}, {"problem": 83, "code": "#(= 2 (count (into #{} %&)))", "user": "57011eb3e4b08d47c97781d1"}, {"problem": 83, "code": "(fn [& a]\n  \t(cond\n   \t\t(every? true? a) false\n   \t\t(some true? a) true\n  \t\t:else false\n\t)\n)", "user": "5710e574e4b09c608db7043b"}, {"problem": 83, "code": "(fn [& c]\n  (if (= (count (set c)) 2)\n    true false))", "user": "571077e8e4b09c608db70434"}, {"problem": 83, "code": "(fn [& args]\n  (and (not (every? true? args))\n       (not (every? false? args))))", "user": "5712854ce4b07c98581c3a89"}, {"problem": 83, "code": "not=", "user": "4dbecb06535d020aff1edf6a"}, {"problem": 83, "code": "(fn [& s] \n  (if (and (some true? s) (some false? s))\n    true\n    false))", "user": "57002b81e4b08d47c97781c7"}, {"problem": 83, "code": "(fn [& s]\n  (if (some #(= true %) (seq s))\n    (if (some #(= false %) (seq s))\n      true\n      false)\n    false))", "user": "56ab7578e4b03c432f18733d"}, {"problem": 83, "code": "#(= #{true false} (set %&))", "user": "5716845be4b07c98581c3afa"}, {"problem": 83, "code": "(fn [& args] (and (contains? (set args) true) (not-every? identity args)))", "user": "57168db0e4b07c98581c3afc"}, {"problem": 83, "code": "not=", "user": "5714e82ae4b07c98581c3ac9"}, {"problem": 83, "code": "(fn half-truth [& args2]\n   (true? (and\n     (some true? args2)\n     (not (every? true? args2))\n    )))", "user": "56f4cedce4b046a417f92063"}, {"problem": 83, "code": "#(true? (and (some false? %&) (some true? %&)))", "user": "5717e367e4b07c98581c3b1d"}, {"problem": 83, "code": "#(= (> (count (filter true? %&)) 0) (> (count (filter false? %&)) 0) true)", "user": "570362ece4b08d47c97781f0"}, {"problem": 83, "code": "(fn [& args] \n  (= 2 (count (distinct args))))", "user": "5713c575e4b07c98581c3aab"}, {"problem": 83, "code": "#(not (or (every? false? %&) (every? true? %&)))", "user": "52393e16e4b0d705d026ef06"}, {"problem": 83, "code": "(fn [& x] (and (true? (some true? x)) (not-every? true? x)))", "user": "571aad45e4b07c98581c3b59"}, {"problem": 83, "code": "(fn [& args]\n    (if(or(every? true? args)(every? false? args))\n      false\n      (if (not(not-any? true? args))\n        true\n        false)))", "user": "56df6417e4b0ca2494a095f7"}, {"problem": 83, "code": "(fn [& m]\n      (loop [c (count m) l m a false]\n          (cond \n                (or (and (empty? l) (= c (count m))) (and (empty? l) (zero? c) a)) false\n                (empty? l) a\n                (not (first l)) (recur c (rest l) (or a false))\n                :else (recur (dec c) (rest l) true)\n                )))", "user": "56df6351e4b0ca2494a095f3"}, {"problem": 83, "code": "(fn [& bools]\n  (true? (and \n          (some not bools)\n          (some identity bools))))", "user": "55f8fd70e4b03cbcff9738bc"}, {"problem": 83, "code": "(fn\n  [& lst]\n  (cond\n    (empty? (rest lst)) false\n    (true? (every? false? lst)) false\n    (true? (every? true? lst)) false\n    (some true? lst) true))", "user": "56df6498e4b0ca2494a095f8"}, {"problem": 83, "code": "(fn containsFalse?\n  [& coll]\n  (and (false? (first (sort coll))) (true? (last (sort coll)))))", "user": "56fe2a2fe4b08d47c97781ad"}, {"problem": 83, "code": "not=", "user": "56df629fe4b0ca2494a095ee"}, {"problem": 83, "code": "(fn [& lst]\n  (cond\n    (every? true? lst) false\n    (some true? lst) true\n    :else false))", "user": "57210e8ee4b0c5bde472c0a8"}, {"problem": 83, "code": "(fn\n  ([a] false)\n  ([a & more] (and (false? (reduce #(and %1 %2) a more)) (reduce #(or %1 %2) a more))))", "user": "571cd9dce4b0145328a76271"}, {"problem": 83, "code": "(fn half-truth [& bs]\n  (boolean\n  \t(and\n  \t \t(some identity bs)\n  \t\t (some not bs))))", "user": "571d063ee4b0145328a76272"}, {"problem": 83, "code": "(fn\n  [& coll]\n  (let [vec-coll (set coll)]\n    (boolean (and (some #{true} vec-coll)\n                  (> (count (filter false? vec-coll)) 0)))))", "user": "5720a2b0e4b0c5bde472c099"}, {"problem": 83, "code": "(fn half-truth [& values]\n  (if (= (count values)\n         (reduce #(if %2 (inc %1) %1) 0 values)\n      )\n      false\n      (if (= (some #(= true %) values)\n             nil)\n             false\n             true)))", "user": "56f57481e4b046a417f92072"}, {"problem": 83, "code": "(fn func\n  [& x]\n  (= #{true false} (set x)))", "user": "56de78fde4b0ea9b8538f83c"}, {"problem": 83, "code": "not=", "user": "571dd145e4b0145328a76283"}, {"problem": 83, "code": "(fn [& a] (> (count (distinct a)) 1))", "user": "529e8ba9e4b04e0c58e87b99"}, {"problem": 83, "code": "(fn [& bools] \n  (boolean (and \n    (some false? bools) \n    (some true? bools))))", "user": "4df73d64535d04ed9115e775"}, {"problem": 83, "code": "not=", "user": "57201f14e4b0c5bde472c08e"}, {"problem": 83, "code": "(fn [& args]\n  (if (and (some true? args)\n           (not-every? true? args))\n    true false))", "user": "5715b929e4b07c98581c3ae2"}, {"problem": 83, "code": "(fn [& args]\n  (and \n   (true? (some true? args))\n   (true? (some false? args))))", "user": "551bdefde4b07993ea3788d7"}, {"problem": 83, "code": "(fn [& c]\n\t(not (or (every? true? c)\n\t\t\t (every? false? c))))", "user": "55d50a38e4b0e31453f64a80"}, {"problem": 83, "code": "(fn [& x] (and (true? (some true? x)) (not(every? true? x))))", "user": "56eb3f9de4b04a395b9a0420"}, {"problem": 83, "code": "not=", "user": "55c4cda5e4b0e31453f649a5"}, {"problem": 83, "code": "#(and (true? (some true? %&)) (not (every? true? %&)))", "user": "57169f93e4b07c98581c3b00"}, {"problem": 83, "code": "(fn [& args]\n  (or (and (some true? args) (some false? args)) false))", "user": "52cbe5dfe4b07d0d72b27352"}, {"problem": 83, "code": "not=", "user": "57211a02e4b0c5bde472c0a9"}, {"problem": 83, "code": "(fn [& x]\n  (if (every? true? x)\n    false\n  (not (every? false? x))))", "user": "571ff1ebe4b0c5bde472c088"}, {"problem": 83, "code": "(fn [& args] (cond\n               (every? true? args) false\n               (some true? args) true\n               :else false))", "user": "5728d33ce4b0c6e51e0d2b12"}, {"problem": 83, "code": "(fn\n  [& l]\n  (let [j (and (some true? l) (some false? l))]\n  (if (nil? j) false\n    j)))", "user": "56df636ae4b0ca2494a095f4"}, {"problem": 83, "code": "(fn p\n  [& params]\n    (if (not (every? distinct? params))\n      true\n        (if (every? false? params)\n          false\n          (if (every? true? params)\n            false\n            true))))", "user": "56df7440e4b0ca2494a095fb"}, {"problem": 83, "code": "(fn [& booleans]\n  (= (set booleans) #{true false}))", "user": "5723e6d6e4b0c5bde472c0f1"}, {"problem": 83, "code": "(fn q83 [col & rest]\n(let [all (conj rest col)]\n(println all)\n  (and (.contains all true) (.contains all false))\n))", "user": "54f5aa4ce4b0f2f3c5226e94"}, {"problem": 83, "code": "(fn [& b] (= 2 (count (distinct b))))", "user": "542a8d07e4b01498b1a71b43"}, {"problem": 83, "code": "#(true? \n  (and\n    (some true? %&)\n    (some false? %&)))\n\n;; %& stands for all argument as sequence\n;; some: Returns the first logical true value of (pred x) for any x in coll, else nil.", "user": "572d192ae4b0cd1946bd0f68"}, {"problem": 83, "code": "not=", "user": "56aa4fa5e4b07966d5a8a085"}, {"problem": 83, "code": "#(let [t (filter true? %&)] (not (or (= t %&) (empty? t))))", "user": "5547b72be4b0a04f79299550"}, {"problem": 83, "code": "not=", "user": "57283dbce4b0c5bde472c154"}, {"problem": 83, "code": "(fn [& coll]\n  (not\n   (nil?\n    (and (some true? coll)\n         (some false? coll)))))", "user": "53716539e4b0fc7073fd6eb1"}, {"problem": 83, "code": "(fn [& xs]\n  (\n    and (true? (some identity xs))\n        (true? (some (complement identity) xs)) \n  )\n)", "user": "5717d674e4b07c98581c3b1a"}, {"problem": 83, "code": "#(and (boolean (some true? %&)) (not-every? true? %&))", "user": "54b0519be4b09f271ff37d14"}, {"problem": 83, "code": "(fn [& coll] \n  (= (set coll) #{true false}))", "user": "57213df6e4b0c5bde472c0ab"}, {"problem": 83, "code": "#(true? \n  (and\n    (some true? %&)\n    (some false? %&)))", "user": "572ca54ae4b0cd1946bd0f59"}, {"problem": 83, "code": "(fn [& args]\n  (and (not-every? false? args) (not-every? true? args)))", "user": "572a856be4b0f4d77e65123b"}, {"problem": 83, "code": "(fn [& args]\n  (true?\n    (and\n      (not (every? true? args))\n      (some true? args))))", "user": "572ea970e4b0cd1946bd0f89"}, {"problem": 83, "code": "#(let [tot (count (filter identity %&))] (and (> tot 0) (< tot (count %&))))", "user": "5733e4aee4b0cd1946bd0ffe"}, {"problem": 83, "code": "not=", "user": "5256c4c1e4b0541d1855ba36"}, {"problem": 83, "code": "(fn [& args] (let [a (count args) t (count (filter true? args))] (and (> t 0) (> a t))))", "user": "5659679ae4b068f2fe63dbeb"}, {"problem": 83, "code": "not=", "user": "573107d5e4b0cd1946bd0fbc"}, {"problem": 83, "code": "(fn my-fun [first-on & truths-in]\n   (and (reduce #(or %1 %2) first-on truths-in) (not (reduce #(and %1 %2) first-on truths-in))))", "user": "571d9669e4b0145328a7627f"}, {"problem": 83, "code": "(fn [& l]\n (and  (reduce #(or % %2) false l )  (not (reduce #(and % %2) true l )))\n  \n  )", "user": "5735ac67e4b0cd1946bd102b"}, {"problem": 83, "code": "(fn [& b] (and (or b) (not (apply = b))))", "user": "573ce277e4b05c31a32c080b"}, {"problem": 83, "code": "(fn [& args]\n  (if (every? true? args) false\n  (not (nil? (some true? args)))))", "user": "56ff45e5e4b08d47c97781bb"}, {"problem": 83, "code": "#(true? \n  (and\n    (some true? %&)\n    (some false? %&)))", "user": "570794d8e4b0b0fb43fd068b"}, {"problem": 83, "code": "(fn [& l]\n  (true?\n    (and\n      (some #(true? %) l)\n      (some #(false? %) l))))", "user": "5739cbe4e4b0cd1946bd107c"}, {"problem": 83, "code": "(fn [& a] \n  (loop [p false q false x a] \n    (if (empty? x) (and p q) \n      (recur \n       (if (true? (first x)) true p) \n       (if (false? (first x)) true q)\n       (rest x)\n      )\n    )\n  )\n)", "user": "55c3f19de4b0e31453f64991"}, {"problem": 83, "code": "(fn [& list]\n  (=\n   (count (group-by identity list))\n   2))", "user": "573b8f67e4b0cd1946bd10ae"}, {"problem": 83, "code": "not=", "user": "5602f5fce4b04bb52996e1ad"}, {"problem": 83, "code": "(fn halftruth [& b]\n  (and \n    (true? (some true? b))\n    (not (every? true? b))\n  )\n)", "user": "571aae1fe4b07c98581c3b5a"}, {"problem": 83, "code": "(fn [& bools] (boolean (and (some false? bools) (some true? bools))))", "user": "561814bae4b06b1bb2182a1a"}, {"problem": 83, "code": "(fn [ & args ]\n  (and\n    (not-every? false? args)\n    (not-every? true? args)))", "user": "57300c19e4b0cd1946bd0fa1"}, {"problem": 83, "code": "(fn [& bools] (= (set bools) #{true false}))", "user": "573b664ce4b0cd1946bd10a7"}, {"problem": 83, "code": "(fn [& params]\n  (and (contains? (set params) true) (not-every? #(true? %) params)))", "user": "5743b90ce4b0c285004e8aae"}, {"problem": 83, "code": "(fn [& vars]\n\t(cond\n     (every? true? vars) false\n     (some true? vars) true\n     :else false\n     )\n)", "user": "5744723ae4b009280f9f2b3a"}, {"problem": 83, "code": "(fn [& stuffs] (= 2 (count (distinct stuffs))))", "user": "57280b92e4b0c5bde472c14e"}, {"problem": 83, "code": "(fn [ & s] (clojure.set/subset? #{ true false} (set s)))", "user": "57458b82e4b009280f9f2b4e"}, {"problem": 83, "code": "(fn [& s]\n (and (not (every? false? s)) (not (every? true? s))))", "user": "573f3ccfe4b05c31a32c083f"}, {"problem": 83, "code": "(fn [& col]\n  (let [c (apply + (map #(if % 1 0) col))\n        len (count col)]\n    (cond\n      (= 0 c) false\n      (= len c ) false\n      :else true)))", "user": "523acf7be4b0aa37f082ed90"}, {"problem": 83, "code": "not=", "user": "57407ab3e4b05c31a32c0854"}, {"problem": 83, "code": "(fn [x & y] \n       (if\n         \n         (not\n           (or \n            (and \n            (= x true)\n            (= \n             (get (frequencies y) true 0) \n             (count y)\n             ) \n            )\n            (and \n            (= x false)\n            (= \n             (get (frequencies y) false  0)\n             (count y)\n             )   \n           )\n           )\n          )\n         \n         true\n         false\n          )\n     )", "user": "56e6e1e6e4b02e7e935eb6cf"}, {"problem": 83, "code": "(fn [ & z]\n   (let [x (vec z)]\n     (if (and (some true? x) (some false? x)) true false))  )", "user": "572ac718e4b0f4d77e651242"}, {"problem": 83, "code": "(fn [& args] (if (= (count (distinct args)) 2) true false))", "user": "563431c1e4b0bfe05bf117bb"}, {"problem": 83, "code": "(fn half-true\n     ([a] false)\n     ([a b] (and (true? (some true? [a b])) (not-every? true? [a b])))\n     ([a b c ] (and (true? (some true? [a b c])) (not-every? true? [a b c])))\n     ([a b c d] (and (true? (some true? [a b c d])) (not-every? true? [a b c d])))\n )", "user": "573940e3e4b0cd1946bd106b"}, {"problem": 83, "code": "(fn [& args] \n   \t(< 0 (reduce #(if %2 (inc %1) %1) 0 args) (count args)))", "user": "553900d4e4b09218d5f44fe5"}, {"problem": 83, "code": "(fn [& bools]\n (or (and (some true? bools)\n          (some false? bools))\n     false))", "user": "52c03baee4b07a9af5792347"}, {"problem": 83, "code": "#(boolean (and (some identity %&) (not-every? identity %&)))", "user": "51647faae4b003cf19fdde3b"}, {"problem": 83, "code": "#(= 2 (count (distinct (flatten (vector %&)))))", "user": "571172ece4b09c608db70446"}, {"problem": 83, "code": "(fn [& args]\n  (true? (and (some false? args) (some true? args)))\n  )", "user": "57440f77e4b0c285004e8ab5"}, {"problem": 83, "code": ";not=\n(fn [& more]\n  (and (= 2 (count (set more))) (false? ((set more) false)))\n  )", "user": "53da059be4b0e771c302547e"}, {"problem": 83, "code": "#(-> %& distinct count (= 2))", "user": "574a9132e4b02ea1147991fd"}, {"problem": 83, "code": "(fn [& args]\n  (and (boolean (some true? args))\n       (not-every? true? args)))", "user": "574c3a7ce4b02ea114799219"}, {"problem": 83, "code": "#(and (not= nil (some true? %&)) (not-every? true? %&))", "user": "574af03ce4b02ea114799202"}, {"problem": 83, "code": "#(and (apply (some-fn true?) %&) (not-every? true? %&))", "user": "573d58c8e4b05c31a32c0811"}, {"problem": 83, "code": "(fn [& args] \n  (let [some_false (some #(false? %) args)\n        some_true (some #(true? %) args)]\n  (or (and some_false some_true) false)))", "user": "553e3260e4b0a04f792994eb"}, {"problem": 83, "code": "(fn [& args]\n  (not (or\n  \t(nil? (some true? args))\n   \t(nil? (some false? args)))))", "user": "56fee4c0e4b08d47c97781b5"}, {"problem": 83, "code": "(fn [& rst] (cond (every? identity rst) false (some identity rst) true :else false))", "user": "54e540c1e4b024c67c0cf7f9"}, {"problem": 83, "code": "(fn [& bs]\n  (loop [col bs\n         any-true? false\n         any-false? false]\n       (if (empty? col)\n           (and any-true? any-false?)\n           (let [cur (first col)]\n                (recur (rest col)\n                       (or cur any-true?)\n                       (or (not cur) any-false?))))))", "user": "5383c054e4b06839e8705ee8"}, {"problem": 83, "code": "(fn [& arg]\n  (let [coll arg]\n    (if (= (count (partition-by identity coll)) 1)\n      false\n      true)))", "user": "57344edbe4b0cd1946bd1008"}, {"problem": 83, "code": "(fn [& bools]\n  (boolean (and (some identity bools) (not (reduce #(and % %2) bools)))))", "user": "56bb652ae4b0f26550335953"}, {"problem": 83, "code": "(fn xor [ & lst ]\n  (let [ c (count (filter true? lst)) ]\n    (and (> c 0) (< c (count lst)))))", "user": "574e7be7e4b02ea114799242"}, {"problem": 83, "code": "(fn [& args]\n  (true? (and (some true? args) (some false? args))))", "user": "57408f87e4b05c31a32c0856"}, {"problem": 83, "code": "(fn half-true [& args]\n  (and \n   (true? (some true? args))\n   (not-every? true? args)))", "user": "57275898e4b0c5bde472c13e"}, {"problem": 83, "code": "not=", "user": "57297fb2e4b0c6e51e0d2b1c"}, {"problem": 83, "code": "(fn [b & bs]\n  (let [bcol (conj bs b)]\n    (and (not= nil (some false? bcol)) \n         (not= nil (some true? bcol)))))", "user": "535558b9e4b04ce2eb3ed25a"}, {"problem": 83, "code": ";(fn [& a]\n;  (if (every? identity a)\n;    false\n;    (if (every? identity (map not a))\n;      false\n;      true)))\n\n;not=\n\n(fn [& p] (boolean (and (some true? p) (some false? p))))", "user": "57533bc1e4b02ea1147992a6"}, {"problem": 83, "code": "(fn [& b] (boolean (and (some false? b) (some true? b))))", "user": "52e1c276e4b09f7907dd142b"}, {"problem": 83, "code": "#(true? (and (some true? %&) (some false? %&)))", "user": "573ddfc2e4b05c31a32c081b"}, {"problem": 83, "code": "(fn [& args] (and (not (= (some #{true} args) nil)) (not (every? #{true} args))))", "user": "574986cae4b009280f9f2b9c"}, {"problem": 83, "code": "(fn [& values] (and (boolean (some true? values)) (boolean (some false? values))))", "user": "5746cb28e4b009280f9f2b68"}, {"problem": 83, "code": "(fn [& args]\n  (cond\n   (every? #{true} args) false\n   (true? (some #{true} args)) true\n   :else false))", "user": "575086e7e4b02ea114799276"}, {"problem": 83, "code": "(fn [& more] (let [s (set more)] (= 2 (count s))))", "user": "5744d088e4b009280f9f2b41"}, {"problem": 83, "code": "(fn [& a]\n  (and\n   (not-every? true? a)\n   (not-every? false? a)))", "user": "574ef99ae4b02ea114799250"}, {"problem": 83, "code": "not=\n\n;(fn [& coll]\n;    (if (= 2 (count (set coll)))\n;      true\n;      false))", "user": "572830e6e4b0c5bde472c152"}, {"problem": 83, "code": "(fn [& args]\n  (if (<= (count args) 1) false\n     (if (and (some false? args) (not (every? false? args))) true false)))", "user": "53d977f1e4b0e771c302547a"}, {"problem": 83, "code": "#( true? ( second ( apply sorted-set %& ) ) )", "user": "57561529e4b02ea1147992d3"}, {"problem": 83, "code": "not=", "user": "5751f2a2e4b02ea114799292"}, {"problem": 83, "code": "#(= 2 (count (set %&)))", "user": "56cd75bee4b0ea9b8538f74b"}, {"problem": 83, "code": "not=", "user": "570bd29be4b0b0fb43fd06c5"}, {"problem": 83, "code": "(fn[& x]\n  (and \n    (not (reduce #(and %1 %2) x))\n    (reduce #(or %1 %2) x)\n  )\n)", "user": "54283a7ae4b01498b1a71b2f"}, {"problem": 83, "code": "(fn [& xs] (boolean (and (some true? xs) (some false? xs))))", "user": "574dfcb8e4b02ea11479923a"}, {"problem": 83, "code": "(fn truth [& coll] (and (not-every? #(= % true) coll) (not-every? #(= % false) coll)))", "user": "5759cd46e4b02ea11479932e"}, {"problem": 83, "code": "(fn [& args]\n  (if (not-every? true? args) \n    (not-every? false? args) \n    false))", "user": "575683aee4b02ea1147992dc"}, {"problem": 83, "code": "(fn [& args] \n  (and (not-every? true? args) (not-every? false? args)))", "user": "57462a4de4b009280f9f2b5d"}, {"problem": 83, "code": "not=", "user": "575cbe44e4b02ea114799374"}, {"problem": 83, "code": "not=", "user": "575dae37e4b02ea114799389"}, {"problem": 83, "code": "#(= 2 (count (group-by true? %&)))", "user": "574abbfbe4b02ea114799200"}, {"problem": 83, "code": "(fn [& args]  (and (not (reduce #(and %1 %2) args)) (reduce #(or %1 %2) args)))", "user": "570ab24fe4b0b0fb43fd06b7"}, {"problem": 83, "code": "(fn [& bools]\n  (let [bools-set (set bools)]\n  \t(if\n       (and (contains? bools-set true) (not (contains? bools-set false)))\n       false\n       (when (contains? bools-set false)\n         (if (contains? bools-set true)\n           true\n           false)))))", "user": "55096255e4b06e50f9beb116"}, {"problem": 83, "code": "(fn [& coll] (if (> (count (distinct coll)) 1)\n             true\n             false))", "user": "56ede653e4b04a395b9a0449"}, {"problem": 83, "code": "(fn [& args]\n  (let [x (count (filter identity args))]\n    (and (not= (count args) x) (> x 0))\n ))", "user": "574a546ee4b02ea1147991f6"}, {"problem": 83, "code": "(fn [& args] (true? (and (some true? args)(some false? args))))", "user": "5745bb9fe4b009280f9f2b54"}, {"problem": 83, "code": ";;(fn [& args] (let [oo (reduce ( fn [x y] (or x y) ) args)\n;;                   aa (reduce ( fn [x y] (and x y) ) args) ]\n;;              (and oo (not aa)))\n;;)\n\n(fn [& args] (let [oo (reduce ( fn [x y] (or x y) ) args)\n                   aa (reduce ( fn [x y] (and x y) ) args) ]\n              (and oo (not aa)))\t\t\t \n)", "user": "575d5831e4b02ea114799381"}, {"problem": 83, "code": "(fn [& x]\n  (and (reduce #(or %1 %2) x)\n       (not (reduce #(and %1 %2) x))))", "user": "5760715de4b08062f99a4e96"}, {"problem": 83, "code": "not=", "user": "57487084e4b009280f9f2b8c"}, {"problem": 83, "code": "(fn half-truth [& l]\n  (let [coun (reduce #(if %2 (inc %1) %1) 0 l)]\n    (and (< coun (count l)) (not= coun 0) )))", "user": "574f1c24e4b02ea114799255"}, {"problem": 83, "code": "(fn [& bools]\n  (boolean (and (some true? bools) (not-every? true? bools))))", "user": "5372e7d9e4b06d7f452d9e02"}, {"problem": 83, "code": "(fn [& args](= 2 (count (set args))))", "user": "5731e36be4b0cd1946bd0fc9"}, {"problem": 83, "code": "(fn half-truth? [& col]\n  (and (not-every? true? col) (not-every? false? col)))", "user": "572ec4dde4b0cd1946bd0f8d"}, {"problem": 83, "code": "(fn [& a] \n  (and\n   (reduce #(or %1 %2) a)\n   (not (reduce #(and %1 %2) a))))", "user": "57501c83e4b02ea11479926b"}, {"problem": 83, "code": "(fn [& x] (not (or (not-any? true? x) (not-any? false? x))))", "user": "57642916e4b0994c1922fbee"}, {"problem": 83, "code": "(fn SBNTWT [& args]\n  (and (not (every? true? args)) (boolean (some true? args)))\n  )", "user": "57131dfbe4b07c98581c3a98"}, {"problem": 83, "code": "(fn  [param1 & params]\n\t(if (nil? params)\n    \tfalse\n    \t(and (false? (reduce #(and %1 %2) param1 params)) (true? (reduce #(or %1 %2) param1 params)))))", "user": "57678ca9e4b0a07e8fc180c0"}, {"problem": 83, "code": "not=", "user": "575ef4b6e4b08062f99a4e78"}, {"problem": 83, "code": "(fn [& coll]\n  (if (and (some true? coll)\n           (some false? coll))\n    true\n    false))", "user": "52ea025ae4b09f7907dd14b5"}, {"problem": 83, "code": "(fn [& s] \n\t(let [c (count (filter identity s))]\n\t\t(and (> (count s) c)\n\t\t\t(> c 0))))", "user": "57644395e4b0994c1922fbf2"}, {"problem": 83, "code": "(fn [& coll] (= 2 (count (set coll))))", "user": "5764457ae4b0994c1922fbf3"}, {"problem": 83, "code": "(fn [& s] (= 2 (count (distinct s))))", "user": "5761a772e4b0994c1922fb95"}, {"problem": 83, "code": "(fn [& params]\n  (boolean (and (some true? params)\n                (some not params))))", "user": "56d30497e4b0ea9b8538f7a8"}, {"problem": 83, "code": "(fn [& v] (= 2 (count (partition-by identity (sort (seq v))))))", "user": "5756f324e4b02ea1147992e8"}, {"problem": 83, "code": ";; First solution\n;(fn [& vs] \n;  (and \n;   (not-every? true? vs) \n;   (not-every? false? vs)))\n(fn [& vs] (true? (and (some not vs) (some true? vs))))", "user": "573118ebe4b0cd1946bd0fbd"}, {"problem": 83, "code": "(fn [& bools]\n  (cond\n   \t(every? true? bools) false\n   \t(every? false? bools) false\n   \t:else true))", "user": "561d506ee4b064ca9f4b16aa"}, {"problem": 83, "code": "(fn [& args]\n  (if (and (some true? args) (not-every? true? args)) true\n    false)\n  )", "user": "5763fa69e4b0994c1922fbe0"}, {"problem": 83, "code": "(fn [& xs] (let [c (count (filter identity xs))] (and (> c 0) (< c (count xs)))))", "user": "576a987be4b0a07e8fc1811b"}, {"problem": 83, "code": "not=", "user": "57604a87e4b08062f99a4e91"}, {"problem": 83, "code": "#(false?\n  (or\n  \t(every? true? %&)\n  \t(every? false? %&)))", "user": "56df9203e4b0ca2494a095fc"}, {"problem": 83, "code": "(comp not =)", "user": "575fbe58e4b08062f99a4e87"}, {"problem": 83, "code": "(fn[& params] \n                (if (and (some true? params) (not (every? true? params) ) ) \n                  true false))", "user": "575bd5f9e4b02ea114799365"}, {"problem": 83, "code": "(fn [& a] (and (boolean (some identity a)) (not-every? identity a)))", "user": "5742ec91e4b05c31a32c0883"}, {"problem": 83, "code": "(fn [& x]  (= (count (group-by identity x)) 2))", "user": "56d91a53e4b0ea9b8538f7ee"}, {"problem": 83, "code": "(fn __ [& args] \n  (= 1 (bit-and \n        (reduce bit-or (map {false 0 , true 1} args))\n        (reduce bit-or (map {false 1 , true 0} args))\n        )\n     ))", "user": "533a2f7be4b0e30313ee6cb8"}, {"problem": 83, "code": "not=", "user": "576e3258e4b0979f89651574"}, {"problem": 83, "code": "not=", "user": "575d16f8e4b02ea114799377"}, {"problem": 83, "code": "(fn [& args]\n  (boolean (and (not (every? true? args)) (some true? args))))", "user": "51e89428e4b006d205356a51"}, {"problem": 83, "code": "(fn [& args] (if (reduce #(and % %2) true args) false (reduce #(or % %2) false args)))", "user": "5720ba36e4b0c5bde472c09c"}, {"problem": 83, "code": "(fn [& a] (boolean (and (some true? a) (some false? a))))", "user": "57609d91e4b08062f99a4e9b"}, {"problem": 83, "code": "(fn [& p] (true? (and (some true? p) (some false? p))))", "user": "57650419e4b0994c1922fc09"}, {"problem": 83, "code": "not=", "user": "51515a19e4b03e678e393acc"}, {"problem": 83, "code": "(fn [& coll]\n   (and (boolean (some true? coll)) (not-every? true? coll)))", "user": "56372c3ce4b0bfe05bf117d1"}, {"problem": 83, "code": "(fn [& x] (if (and (some true? x) (not (every? true? x))) true false))", "user": "5764cc01e4b0994c1922fc05"}, {"problem": 83, "code": "(fn [& l] (and (if (some identity l) true false) (not-every? #{true} l)))", "user": "577202d2e4b0979f896515c0"}, {"problem": 83, "code": "(fn [& bools]\n  (loop [a true o false bools bools]\n    (if (empty? bools)\n      (and (false? a) (true? o))\n      (let [[bool & remain] bools]\n        (recur (and a bool) (or o bool) remain)))))", "user": "57202eb7e4b0c5bde472c090"}, {"problem": 83, "code": "(fn [& bools] (not (nil? (and (some true? bools) (some false? bools)))))", "user": "57763002e4b0979f89651631"}, {"problem": 83, "code": "(fn half-truth [& coll]\n  (and\n    (boolean (some true? coll))\n    (not-every? true? coll)))", "user": "5776e21de4b0979f89651642"}, {"problem": 83, "code": "(fn [& c]\n  (let [clen (count c)\n        tlen (count (filter true? c))\n        flen (count (filter false? c))]\n    (cond \n      (= clen tlen) false\n      (= clen flen) false\n      :else true\n      )\n    )\n  )", "user": "5763818ae4b0994c1922fbc7"}, {"problem": 83, "code": "(fn [& arg]\n  (loop [tmp arg acc 0]\n    (if (empty? tmp)\n      (cond (= acc 0) false\n            (= acc (count arg)) false\n            :else true)\n      (recur (rest tmp) \n             (cond (true? (first tmp)) (+ acc 1)\n                   :else acc)\n             )\n      )\n    )\n  )", "user": "57750460e4b0979f8965160c"}, {"problem": 83, "code": "(fn [& coll]\n  (let [sum (apply + (map #(if %1 1 0) coll))]\n    (and (pos? sum) (< sum (count coll)))))", "user": "50c99e3ee4b0bed41a122997"}, {"problem": 83, "code": "#(true? (and (some identity %&) (some not %&)))", "user": "576a8d02e4b0a07e8fc18117"}, {"problem": 83, "code": "(fn [& s]\n  (and \n     (if (some identity s)\n       true\n       false) \n   (not (every? identity s))))", "user": "577629abe4b0979f8965162e"}, {"problem": 83, "code": "(fn \n  [& seq]\n  (loop [newseq seq trues 0]\n    (if (empty? newseq)\n      (if (and  (< trues (count seq)) (not= trues 0))\n        true\n        false\n        )\n      (if (first newseq)\n        (recur (rest newseq) (inc trues))\n        (recur (rest newseq) trues)\n        )\n)))", "user": "5772ddb0e4b0979f896515d4"}, {"problem": 83, "code": "(fn [ & x] (if (and (some true? x) (not (every? true? x))) true false))", "user": "575fec91e4b08062f99a4e89"}, {"problem": 83, "code": "(fn [& args] \n  (if (nil? (some #(= true %) args) )\n    false\n    (not (empty? (filter #(= false %) args) ) )\n    )\n  )", "user": "5776558ee4b0979f89651633"}, {"problem": 83, "code": "(fn [& args] (= #{true false} (set args)))", "user": "577829f9e4b0979f8965165a"}, {"problem": 83, "code": "(fn ([& rest] (every? true? (map #(some % rest) [true? false?]))))", "user": "51319a53e4b06942423563c8"}, {"problem": 83, "code": "(fn [& bs]\n  (not (or (every? true? bs) (every? false? bs))))", "user": "5776f39de4b0979f89651643"}, {"problem": 83, "code": "not=", "user": "5761513fe4b0994c1922fb87"}, {"problem": 83, "code": "(fn [& args] (nil? (some nil? \n                   [(some true? args) (some false? args)]\n                   )))", "user": "571346c0e4b07c98581c3a9b"}, {"problem": 83, "code": "(fn half-truth [& args] (true? (if (every? true? args) nil (some true? args))))", "user": "560c37b5e4b05f002753df2e"}, {"problem": 83, "code": "#(< 0 (count (filter true? %&)) (count %&))", "user": "575b3e9be4b02ea11479935b"}, {"problem": 83, "code": "(fn [& rest] (and (not-every? true? rest) (not (nil? (some true? rest)))))", "user": "577f635be4b0d36ec5835e64"}, {"problem": 83, "code": "#(and (not-every? true? %&) (not (every? false? %&)))", "user": "56f974c0e4b07572ad1a88b1"}, {"problem": 83, "code": "#(let [s (set %&)] (or (= 2 (count s)) (s false) false))", "user": "5784efe5e4b0ebec4cfb74d2"}, {"problem": 83, "code": "(fn [& bools] (and (not-every? true? bools) (not-every? false? bools)))", "user": "53e92f82e4b036ad0777e49d"}, {"problem": 83, "code": "(fn [& y]\n  (if (= (some true? y) nil)\n    false\n    (if (every? true? y)\n      false\n      true)))", "user": "5756e218e4b02ea1147992e5"}, {"problem": 83, "code": "(fn [& xs]\n    (let [ts (filter true? xs)\n          fs (filter false? xs)]\n      (and (< 0 (count ts)) (< 0 (count fs)))))", "user": "5578ba3ae4b05c286339e08c"}, {"problem": 83, "code": "(fn half [& b] (let [one (reduce #(or %1 %2) b)\n                all (and one (reduce #(or %1 (not %2)) false b))]\n            (println one all)\n            (and all one)))", "user": "5674607ae4b05957ce8c6137"}, {"problem": 83, "code": "(fn [& args]\n  (and (reduce #(or %1 %2) args) (not (reduce #(and %1 %2) args))))", "user": "5151d574e4b03e678e393ae0"}, {"problem": 83, "code": "(fn [& rest] (= '(false false) (map empty? (vals (group-by identity rest)))))", "user": "576b4e6be4b0a07e8fc1812b"}, {"problem": 83, "code": "(fn [a & b] ((comp not nil?) (some #(not= a %) b)))", "user": "5776385fe4b0979f89651632"}, {"problem": 83, "code": "not=", "user": "576df252e4b0979f8965156f"}, {"problem": 83, "code": "(fn [& bs]\n  (and (true? (some true? bs)) (true? (some false? bs))))", "user": "576a972ce4b0a07e8fc1811a"}, {"problem": 83, "code": "#(true? (and (some true? %&)(some false? %&)))", "user": "56ea8374e4b04a395b9a0404"}, {"problem": 83, "code": "(fn[& x] (and (not (every? true? x)) (not (nil? (some true? x)))))", "user": "577e54bbe4b0c8d87281f6e5"}, {"problem": 83, "code": "#(and (= true (some identity %&)) (not (every? identity %&)))", "user": "56327168e4b0bfe05bf117a5"}, {"problem": 83, "code": "#(boolean (and (some identity %&) (not-every? identity %&)))", "user": "4dfe5a93535d04ed9115e786"}, {"problem": 83, "code": "(fn [& alist]\n  (not (or (every? true? alist) (every? false? alist))))", "user": "5705e404e4b0b0fb43fd0676"}, {"problem": 83, "code": "(fn [& bools]\n  (= 2 (count (set bools))))", "user": "4f037faf535dcb61093f6af8"}, {"problem": 83, "code": "(fn tt [ & args]\n\n   (and (not (every? true? args))\n\n        (not (every? false? args))\n\n        (some false? args)))", "user": "548f3ed8e4b0e286459a1236"}, {"problem": 83, "code": "(fn [& x]\n  (if\n    (and (some (partial = true) (set x)) (some (partial = false) (set x) ))\n    true\n    false))", "user": "5756efc3e4b02ea1147992e6"}, {"problem": 83, "code": "(fn xor [& xs]\n  (and\n   (not-every? false? xs)\n   (not-every? true? xs)))", "user": "578606d2e4b0ebec4cfb74ec"}, {"problem": 83, "code": "(fn [& truths] (and (not (every? true? truths)) (true? (some true? truths))))", "user": "578f9a18e4b0ebec4cfb7598"}, {"problem": 83, "code": "(fn xorxs\n  [& bools]\n  (let [v (vec bools)]\n    (not= (count v) (count (first (partition-by identity v))))))", "user": "56c21eafe4b05cc29241ee7e"}, {"problem": 83, "code": "(fn [& bools]\n  (= 2 (count (take 2 (partition-by identity bools)))))", "user": "577f0b0ee4b0c8d87281f6f3"}, {"problem": 83, "code": "(fn [& bools] \n  (loop [bools bools, res false]\n    (if (= (count bools) 1)\n      res\n      (recur (rest bools) (not (= (first bools) (second bools)))))))", "user": "577c3da9e4b0c8d87281f6b9"}, {"problem": 83, "code": "#(not (or (every? true? %&) (every? false? %&)))", "user": "577fa91ee4b0d36ec5835e6a"}, {"problem": 83, "code": "(fn [& bools]\n  (if (= 1 (count bools))\n      false\n      (and (not (every? identity bools))\n           (boolean (some identity bools)))))", "user": "55ede35ce4b0121d4835fde1"}, {"problem": 83, "code": "(fn [& v] (> (count (frequencies v)) 1))", "user": "577ab41fe4b0d3393e5deb05"}, {"problem": 83, "code": "(fn [& args] (if (= #{true false} (clojure.set/intersection #{false true} (set args)))\n                true\n                false))", "user": "574ed2f7e4b02ea11479924a"}, {"problem": 83, "code": "(fn [& bs] (and (reduce #(or %1 %2) bs) (not (reduce #(and %1 %2) bs))))", "user": "5790e62ae4b0ebec4cfb75b0"}, {"problem": 83, "code": ";(fn [& a]\n;  (if (every? identity a)\n;    false\n;    (if (every? identity (map not a))\n;      false\n;      true)))\n\n;not=\n\n(fn [& p] (boolean (and (some true? p) (some false? p))))", "user": "5798205ce4b039eba2ecb10e"}, {"problem": 83, "code": "#(-> %& distinct next boolean)", "user": "57615a22e4b0994c1922fb88"}, {"problem": 83, "code": "#(and (contains? (set %&) true) (contains? (set %&) false))", "user": "575e71a2e4b0846ea39baf26"}, {"problem": 83, "code": "#(and\n    (not-every? true? %&)\n    (not-every? false? %&))", "user": "530e75d5e4b08068f379ecba"}, {"problem": 83, "code": "(fn [& args]\n  (if\n    (every? identity args)\n    false\n    (not (nil? (some identity args)))))", "user": "57839ae9e4b0ebec4cfb74b8"}, {"problem": 83, "code": ";(fn [& a]\n;  (if (every? identity a)\n;    false\n;    (if (every? identity (map not a))\n;      false\n;      true)))\n\n;not=\n\n(fn [& p] (boolean (and (some true? p) (some false? p))))", "user": "57982bace4b039eba2ecb10f"}, {"problem": 83, "code": "#(= (every? true? %&) (every? false? %&) )", "user": "5799fc93e4b05b1deef9add0"}, {"problem": 83, "code": "(fn [& vars]\n  (cond\n   (every? true? vars) false\n   (some true? vars) true\n   :else false))", "user": "578e01e9e4b0ebec4cfb7575"}, {"problem": 83, "code": "(fn [& args-list]\n  (loop [or-val false and-val true new-list args-list]\n    (if (empty? new-list)\n      (and or-val (not and-val))\n    (recur (if (first new-list) true or-val) \n           (if (first new-list) and-val false) \n           (rest new-list)))))", "user": "5691ef12e4b0dcc4269f40f8"}, {"problem": 83, "code": "(fn [& bs]\n  (not (nil? (and (some #(= true %) bs) \n       \t \t\t (some #(= false %) bs)))))", "user": "578cf84ce4b0ebec4cfb7562"}, {"problem": 83, "code": "(fn [& x]\n  (let [a (seq x)]\n    (and\n     (not (empty?(filter not a)))\n     (not (empty?(filter identity a))))\n    \n    )\n  )", "user": "51e7c1f1e4b0a3e081b8cbef"}, {"problem": 83, "code": "(fn [& xs]\n    (and\n      (boolean (some true? xs))\n      (not (every? true? xs))\n    )\n  )", "user": "5784e177e4b0ebec4cfb74cf"}, {"problem": 83, "code": "(fn [& args]\n (loop [t 0 f 0 i 0]\n   (if (< i (count args))\n     (if (true? (nth args i))\n       (recur (inc t) f (inc i))\n       (recur t (inc f) (inc i))\n       )\n     (if (and (> t 0) (< t (count args)))\n       true\n       false)\n     )))", "user": "579601c8e4b0e215f87e8492"}, {"problem": 83, "code": "(fn [& coll] (let [t (filter true? coll)]\n  (and (> (count t) 0) (< (count t) (count coll)))))", "user": "5797d4bae4b039eba2ecb107"}, {"problem": 83, "code": "#(boolean (and (some true? %&) (some false? %&)))", "user": "579e15a6e4b05b1deef9ae20"}, {"problem": 83, "code": "(fn [& args] (and (not= (count args) (count (filter true? args))) (>= (count (filter true? args)) 1)))", "user": "578e535de4b0ebec4cfb7580"}, {"problem": 83, "code": "(fn [& args]\n  (let [trueCount (count (filter true? args))]\n    (cond (= trueCount (count args)) false\n          (zero? trueCount) false\n          :else true)))", "user": "5786c182e4b0ebec4cfb74fd"}, {"problem": 83, "code": "(fn [& bs] (boolean (and (some boolean bs) (not (every? identity bs)))))", "user": "57717915e4b0979f896515b3"}, {"problem": 83, "code": "(fn [& args] (and (not (every? false? args)) (not (every? true? args))))", "user": "57873017e4b0ebec4cfb7503"}, {"problem": 83, "code": "(fn [& a]\n  (if (and (some true? a) (some false? a))\n    true\n    false))", "user": "5766bab8e4b0a07e8fc180b1"}, {"problem": 83, "code": "(fn [& b]\n  (not (or (every? true? b) (every? false? b)))\n  )", "user": "57a13745e4b0c3d858beb8e3"}, {"problem": 83, "code": "(fn [& args]\n  (not-every? #(= (first args) %) args))", "user": "57a468bee4b0a966079561de"}, {"problem": 83, "code": "(fn [& args] (not (apply = args)))", "user": "57a310b4e4b0c3d858beb90c"}, {"problem": 83, "code": "#(true? \n  (and\n    (some true? %&)\n    (some false? %&)))", "user": "5799b260e4b05b1deef9adc8"}, {"problem": 83, "code": "(fn [& more] (not (or (every? true? more) (every? false? more))))", "user": "5227eacee4b0186687e23a5e"}, {"problem": 83, "code": "(fn [& bs]\n  (and (true? (some identity bs)) (not (every? identity bs))))", "user": "57a49951e4b0a966079561e5"}, {"problem": 83, "code": "(fn kindOfTrue [& args] (let [sum (reduce + (map (fn [x] (if (= x true) 1 0)) (into [] args)))]\n                          (cond (= sum 0) false (= sum (count (into [] args))) false \n                                                   :else true)))", "user": "573c813be4b0cd1946bd10c5"}, {"problem": 83, "code": "(fn [& args]\n   (if (and (some true? args)\n            (some false? args))\n     true\n     false))", "user": "56014f55e4b04bb52996e184"}, {"problem": 83, "code": "(fn [& boolList] (true? (and (some false? boolList) (some true? boolList))))", "user": "57986b76e4b039eba2ecb116"}, {"problem": 83, "code": "(fn [& rest] (boolean (and  \n                        (some true? rest) \n                        (not (every? true? rest)))))", "user": "579d9601e4b05b1deef9ae18"}, {"problem": 83, "code": "(fn half-truth [& args]\n  (if (every? true? args)\n    false\n    (if (some true? args) true false)))", "user": "569f4dabe4b0542e1f8d1491"}, {"problem": 83, "code": "(fn [& bs]\n  (and (not (every? true? bs))\n       (not (every? false? bs))))", "user": "57aa4775e4b0b8559636fc6b"}, {"problem": 83, "code": "(fn [& bools] (cond (every? true? bools) false\n                    (contains? (set bools) true) true\n                    :else false))", "user": "5313d68de4b08068f379ed0f"}, {"problem": 83, "code": "(fn [& p] (let [m (frequencies p)] (and (> (get m false 0) 0) (> (get m true 0) 0))))", "user": "555e9dbfe4b0a2eb076a39bc"}, {"problem": 83, "code": "(fn [& v] (and (not (reduce #(and % %2) v)) (reduce #(or % %2) v)))", "user": "57aa290de4b0b8559636fc65"}, {"problem": 83, "code": "(fn [& args]\n  (not (or (every? identity args)\n           (every? not args))))", "user": "56903cb9e4b0dcc4269f40eb"}, {"problem": 83, "code": "(fn [& xs]\n  (let [nx (count xs)\n        ys (filter identity xs)\n        ny (count ys)]\n    (< 0 ny nx)))", "user": "5799ff45e4b05b1deef9add1"}, {"problem": 83, "code": "(fn [& bools]\n  (boolean (and (not (every? true? bools))\n           (some true? bools))))", "user": "56b965d9e4b0f26550335931"}, {"problem": 83, "code": "(fn halfTrue[& se] (= (count (set se)) 2 ))", "user": "57a20f72e4b0c3d858beb8f5"}, {"problem": 83, "code": "(fn [& args](if(and(some true? args)(some false? args)) true false))", "user": "57752a2de4b0979f89651613"}, {"problem": 83, "code": "(fn [& args] (and (true? (some true? args)) (not (every? true? args))))", "user": "566e6850e4b0a866af6896da"}, {"problem": 83, "code": "(fn [& args] (= (set args) #{true false}))", "user": "5075e374e4b09049dea827a5"}, {"problem": 83, "code": "(fn [& more]\n  (-> (remove true? more)\n      (#(if (empty? %)\n          false\n          (if (empty? (remove false? more))\n              false\n              true)))))", "user": "548b7db8e4b0e286459a11fd"}, {"problem": 83, "code": "(fn [& args]\n    (let [result (and (not (every? identity args)) (some identity args))]\n          (if result\n            true\n            false)))", "user": "57a0f256e4b0c3d858beb8dd"}, {"problem": 83, "code": "(fn [& x]\n (loop [isNotA true isHave false input x]\n (if (empty? input)\n  (and (not isNotA) isHave)\n (recur (and isNotA (first input)) (or isHave (first input)) (rest input)))))", "user": "57af6cf4e4b0fbc9809a2735"}, {"problem": 83, "code": "(fn [& more] (let [x (count (filter true? more)) y (count (filter false? more))]\n                (if (and (> x 0) (> y 0))\n                  true\n                  false\n                  )\n                )\n   )", "user": "57aa103be4b0b8559636fc64"}, {"problem": 83, "code": "#(true? (and (some true? %&) (some false? %&)))", "user": "56313ff1e4b0bfe05bf1178f"}, {"problem": 83, "code": "(fn[& r](= 2 (count (distinct r))))", "user": "57b3efb1e4b0fbc9809a278a"}, {"problem": 83, "code": "(fn [& args] (true? (and (some true? args) (some false? args))))", "user": "57adbe7ee4b0b8559636fca0"}, {"problem": 83, "code": "(fn [& values] (boolean (and (some true? values)\n                    (not (every? true? values)))))", "user": "578f5122e4b0ebec4cfb7592"}, {"problem": 83, "code": "(fn [& x] (and (not (every? false? x)) (not (every? true? x))))", "user": "4e837808535db62dc21a62d9"}, {"problem": 83, "code": "(fn [& x] (let [t (count x) c (count (filter true? x))] (if (or (= c 0) (= c t)) false true)))", "user": "57a5f1e3e4b0a96607956200"}, {"problem": 83, "code": "(fn\n  [& args]\n  (and (contains? (set args) true) (contains? (set args) false)))", "user": "57acee37e4b0b8559636fc94"}, {"problem": 83, "code": "(fn some-only\n  [& x]\n  (true?\n    (and\n       (some true? x)\n       (some false? x))))", "user": "57b4779de4b0fbc9809a279a"}, {"problem": 83, "code": "(fn [& args] (and ((complement not-any?) identity args) (not (every? identity args))))", "user": "57b8b008e4b0fbc9809a27e6"}, {"problem": 83, "code": "(fn [& xs]\n  (and (> (count (filter true? xs)) 0) (> (count (filter false? xs)) 0) ) )", "user": "57b55290e4b0fbc9809a27a9"}, {"problem": 83, "code": "(fn [& bools]\n (< 0 (count (filter true? bools)) (count bools)))", "user": "57aa4752e4b0b8559636fc6a"}, {"problem": 83, "code": "(fn [& params]\n  (if (reduce (fn [a b] (and a b)) true params)\n    false\n    (reduce (fn [a b] (or a b)) false params))\n  )", "user": "50f89404e4b0aafb827eb204"}, {"problem": 83, "code": "(fn ex-or\n  [& args]\n  (and (not (not-any? identity args)) (not (every? identity args))))", "user": "568bd448e4b0dcc4269f40a9"}, {"problem": 83, "code": "(fn [& a] (> (count (set a)) 1 ))", "user": "4f4aa932e4b0d56e7bb92c14"}, {"problem": 83, "code": "(fn vb [& bs]\n  (let [[ts1 fs1] (split-with true? bs) [fs2 ts2] (split-with false? bs)]\n    (or (and (< 0 (count ts1)) (< 0 (count fs1)))\n        (and (< 0 (count ts2)) (< 0 (count fs2))))))", "user": "57af41bce4b0fbc9809a2731"}, {"problem": 83, "code": "(fn [& coll]\n  (if (and (true? (some true? coll)) (true? (some false? coll)))\n    true\n    false))", "user": "57a9eddae4b0b8559636fc5f"}, {"problem": 83, "code": "(fn[& x] (boolean (and (some true? x) (some false? x))))", "user": "57b9fc74e4b0fbc9809a27fb"}, {"problem": 83, "code": "(fn [& bs]\n  (if (and (some true? bs) (some false? bs))\n    true\n    false\n    )\n  )", "user": "57b9d21fe4b0fbc9809a27f7"}, {"problem": 83, "code": "(fn [& bs]\n  (if (and (some true? bs) (some false? bs))\n    true\n    false))", "user": "574ff497e4b02ea114799266"}, {"problem": 83, "code": "(fn [& c]\n  (let [c1 (distinct c)]\n    (if (< (count c1) 2)\n      false\n      true)))", "user": "55ff562fe4b00f4cabc57660"}, {"problem": 83, "code": "(fn test [& seqq]\n  (cond (every? true? seqq)\n        false\n        (every? false? seqq)\n        false\n        :else\n        true))", "user": "579332c2e4b0e215f87e8452"}, {"problem": 83, "code": "(fn [& args] (and (not-every? false? args) (not-every? true? args)))", "user": "55da18d5e4b0e31453f64ad1"}, {"problem": 83, "code": "(fn [& values] (if (every? true? values) false (if (some true? values) true false)))", "user": "57ac7710e4b0b8559636fc88"}, {"problem": 83, "code": "(fn [& t] (not (not (and (some true? t ) (some false? t)))))", "user": "57c2d0c1e4b05aa3c4741cb8"}, {"problem": 83, "code": "(fn [& r]\n  (= 2 (count (group-by identity r))))", "user": "57bd960fe4b05aa3c4741c52"}, {"problem": 83, "code": "(fn [& args] (< 1 (count (partition-by identity args))))", "user": "57c3451fe4b05aa3c4741cbd"}, {"problem": 83, "code": "(fn [& args]\n\t(if (=\n\t      (some true? args)\n\t      (some false? args))\n\ttrue false))", "user": "57a88e24e4b0a9660795621f"}, {"problem": 83, "code": ";#(= 2 (count(group-by str %&)))\nnot=", "user": "57ba55c1e4b0fbc9809a2801"}, {"problem": 83, "code": "#(let [any? (complement not-any?)]\n   (and\n    (any? true? %&)\n    (any? false? %&)))", "user": "566ff0a1e4b0a866af6896ec"}, {"problem": 83, "code": "(fn [& args]\n              (let [fr (frequencies args)\n                    true-count (get fr true)]\n                (if true-count\n                  (and (> true-count 0)\n                       (not (= true-count (count args))))\n                  false)))", "user": "5143a51be4b0b4fb4ace5f39"}, {"problem": 83, "code": "#(= 2 (count (set %&)))", "user": "57b3027fe4b0fbc9809a276c"}, {"problem": 83, "code": "(fn [& args] (if (and (some true? args) (some false? args)) true false))", "user": "57c7cef5e4b05aa3c4741d0d"}, {"problem": 83, "code": "#(= (set %&) #{true false})", "user": "55568a7de4b0deb715856e1c"}, {"problem": 83, "code": "(fn [& x] (every?\n           false?\n           (map #(every? % x) [true? false?])))", "user": "57c796b4e4b05aa3c4741d08"}, {"problem": 83, "code": "(fn [& args] (let [x (set args)] (and (contains? x false) (contains? x true))))", "user": "57b45257e4b0fbc9809a2796"}, {"problem": 83, "code": "not=", "user": "572fdecae4b0cd1946bd0f9e"}, {"problem": 83, "code": "(fn [& args] (= (count (distinct args)) 2))", "user": "515310b4e4b0d6806ecd26fb"}, {"problem": 83, "code": "(fn [& args]\n  (if (or (every? #(true? %) args) (every? #(false? %) args)) false true))", "user": "57c2d66ae4b05aa3c4741cb9"}, {"problem": 83, "code": "(fn [& x] (= (apply = true x) (apply = false x)))", "user": "57c99a45e4b05aa3c4741d31"}, {"problem": 83, "code": "(fn [& args]\n  (and (not-every? true? args) (true? (some true? args))))", "user": "56990b68e4b0542e1f8d143a"}, {"problem": 83, "code": "(fn [& args] (if (every? true? args) false (not-every? false? args)))", "user": "57cc5a79e4b0c746388ab87d"}, {"problem": 83, "code": "(fn [& a] (= 2 (count (into #{} a))))", "user": "57c7e7d9e4b05aa3c4741d0f"}, {"problem": 83, "code": "(fn some-true? [& cols]\n  (= (set cols) #{true false}))", "user": "57c500f9e4b05aa3c4741cda"}, {"problem": 83, "code": "(fn mysome [arg & args]\n  (not \n   (or \n    (every? true? (cons arg args))\n    (every? false? (cons arg args))\n   )\n  )\n )", "user": "57ce2db8e4b0c746388ab8a4"}, {"problem": 83, "code": "; a condition that works\n; not=\n\n; a function that works\n; takes multiple args\n; let uses :as to bind the whole argument\n(fn [& args]\n   (let [[a :as all] args]\n     (if (every? false? all)\n       false\n       (if (every? true? all)\n         false\n         true))))", "user": "57c44053e4b05aa3c4741ccb"}, {"problem": 83, "code": "not=", "user": "57bc9375e4b05aa3c4741c43"}, {"problem": 83, "code": "(fn[& a] (and ({nil false true true} (some true? a)) (not-every? true? a)))", "user": "563c6ebae4b0bfe05bf11834"}, {"problem": 83, "code": "(fn [& preds]\n  (not (or (every? identity preds)\n           (every? (comp identity not) preds))))", "user": "57bfffc7e4b05aa3c4741c8a"}, {"problem": 83, "code": "not=", "user": "57cd7498e4b0c746388ab897"}, {"problem": 83, "code": "not=", "user": "574eb3b1e4b02ea114799247"}, {"problem": 83, "code": "(fn [& bools]\n  (let [bool-count (count (filter true? bools))]\n     (> (count bools) bool-count 0)))", "user": "57995ac1e4b05b1deef9adbf"}, {"problem": 83, "code": "#(true?(and (some true? %&) (some false? %&)))", "user": "57addf3ae4b0b8559636fca4"}, {"problem": 83, "code": "(fn [& args]\n  (let [x (into [] args)]\n    (if (and (some #(= false %) x) (some #(= true %) x)) true false)))", "user": "57b19fa1e4b0fbc9809a2754"}, {"problem": 83, "code": "(fn [& b]\n\t(and (not (nil? (some true? b))) (not (nil? (some false? b))))\n)", "user": "57c62aece4b05aa3c4741cf1"}, {"problem": 83, "code": "(fn [& args]\n  (boolean (and (some boolean args)\n                (not= (set args) #{true}))))", "user": "57a0b341e4b0c3d858beb8d4"}, {"problem": 83, "code": "#(cond\n    (every? true? %&) false\n    (every? false? %&) false\n    :else true)", "user": "57d9f603e4b0bd073c20240a"}, {"problem": 83, "code": "(fn [& xs] \n  (true? (and (some true? xs) (some false? xs))))", "user": "56cf115de4b0ea9b8538f765"}, {"problem": 83, "code": "(fn [& args] \n          (let [trues (filter true? args)] \n          (cond\n            (= (count trues) (count args)) false\n            (= (count trues) 0) false \n            :else true)))", "user": "57d1a0e6e4b0bd073c20236d"}, {"problem": 83, "code": "not=", "user": "524ac3d1e4b09eba1c0223a0"}, {"problem": 83, "code": "(fn  [& args]\n          (boolean (and (some identity args) (not-every? identity args))))", "user": "55df1985e4b050e68259b3eb"}, {"problem": 83, "code": "#(boolean (and (some true? %&) (some false? %&)))", "user": "57c94c6ee4b05aa3c4741d2d"}, {"problem": 83, "code": "#(true? (and (some true? %&) (not-every? true? %&)))", "user": "57dda21be4b0bd073c202445"}, {"problem": 83, "code": "(fn [& a] (= 2 (count(set a))))", "user": "57d0cd58e4b0bd073c20235e"}, {"problem": 83, "code": "(fn [& args] (or (and (some not args) (some identity args)) false))", "user": "57ccedaae4b0c746388ab88e"}, {"problem": 83, "code": "(fn xor [& args]\n  (and (not (empty? (filter true? args)))\n       (not (empty? (filter false? args)))))", "user": "571c2babe4b07c98581c3b73"}, {"problem": 83, "code": "(fn [& x]\n  (if (and (some true? x) (not-every? true? x))\n    true\n    false))", "user": "566d71b1e4b0a866af6896ca"}, {"problem": 83, "code": "not=", "user": "57b35772e4b0fbc9809a277c"}, {"problem": 83, "code": "(fn some-but-not-all [& coll]\n\t(and (>= (count (filter true? coll)) 1) \n\t\t (>= (count (filter false? coll)) 1)))", "user": "57c0917be4b05aa3c4741c95"}, {"problem": 83, "code": "#(true? (and (some true? %&) (some false? %&)) )", "user": "57d9cae9e4b0bd073c202409"}, {"problem": 83, "code": "(fn [& vs]\n  (not (nil? (and (some true? vs) (some false? vs)))))", "user": "57d9bca1e4b0bd073c202405"}, {"problem": 83, "code": "#(let [tfmap (group-by identity (vec %&))\n            tcount (count (tfmap true))\n            fcount (count (tfmap false))] \n  (cond\n   (and (> tcount 0) (> fcount 0)) true\n   (and (> tcount 0) (= 0 fcount)) false\n   (and (= 0 tcount)) false)\n)", "user": "57c6aa0be4b05aa3c4741cf7"}, {"problem": 83, "code": "(fn [& c] \n  (if (< (count (distinct c)) 2)\n    false\n    true))", "user": "5707abfce4b0b0fb43fd068d"}, {"problem": 83, "code": "(fn [& the-rest]\n  (if\n    (and \n      (some true? the-rest)\n      (some false? the-rest))\n    true\n    false\n    ))", "user": "57e139f6e4b0bfb2137f5a6c"}, {"problem": 83, "code": "not=", "user": "56940617e4b0dcc4269f410b"}, {"problem": 83, "code": "(fn\n  [x & args]\n  (let [f (frequencies (cons x args))]\n    (if (and (f true) (f false))\n      true\n      false)))", "user": "56f6cabce4b08e7d20b96828"}, {"problem": 83, "code": "(fn [& bs]\n  (true?\n   (when (some true? bs)\n     (some false? bs))))", "user": "56f9c7c6e4b07572ad1a88ba"}, {"problem": 83, "code": "(fn [& rest]\n   (and (reduce #(or %1 %2) rest)\n        (not (reduce #(and %1 %2) rest)))\n   )", "user": "57c731ede4b05aa3c4741d00"}, {"problem": 83, "code": "(fn [& x]\n  (if (or (every? true? x) (every? false? x))\n    false\n    true\n    ))", "user": "57e396cde4b0bfb2137f5a9e"}, {"problem": 83, "code": "(fn [ & x ] \n    (if (and (some true? x) (some false? x))\n      true\n      false))", "user": "57e572b5e4b0bfb2137f5ad7"}, {"problem": 83, "code": "(fn [& args] (if (and (some identity args) (not (reduce #(and %1 %2) true args)))\n                 true\n                 false))", "user": "57b39fbee4b0fbc9809a2783"}, {"problem": 83, "code": "(fn \n                     [& items]\n                     (let [all-true (reduce #(and %1 %2) true items)\n                           any-true (reduce #(or %1 %2) false items)]\n                       (and\n                        (not all-true)\n                        any-true)))", "user": "55f4ebffe4b06e875b46ce81"}, {"problem": 83, "code": "(fn ht [& x]\n  (let [f #(and %1 %2)\n        g #(or %1 %2)\n        a (reduce f x)\n        o (reduce g x)]\n    (and (not a) o)))", "user": "57d1d6c8e4b0bd073c202370"}, {"problem": 83, "code": "(fn\n  [x & y]\n  (= #{true false} (into #{x} y)))", "user": "57894e30e4b0ebec4cfb752b"}, {"problem": 83, "code": "#(->>(into #{} %&) count (= 2))", "user": "57e33f6fe4b0bfb2137f5a96"}, {"problem": 83, "code": "(fn [& vs]\n  (loop [oneTrue false \n         allTrue true \n         r       vs]\n    (if (empty? r)\n      (and oneTrue (not allTrue))\n      (if (first r)\n        (recur true allTrue (rest r))\n        (recur oneTrue false (rest r))\n        )\n)\n)\n)", "user": "57d7c894e4b0bd073c2023de"}, {"problem": 83, "code": "#(apply not= %&)", "user": "53874820e4b06839e8705f1b"}, {"problem": 83, "code": "#(true?\n  (and\n  (some true? %&)\n  (some false? %&)))", "user": "57df309ee4b0bd073c20245f"}, {"problem": 83, "code": "(fn [& xs]\n  (= '(1 1) (map (comp count distinct) ((juxt (partial filter true?) (partial filter false?)) xs))))", "user": "57c176abe4b05aa3c4741ca2"}, {"problem": 83, "code": "(fn [& xs] (every? identity [(not-every? identity xs) (some identity xs)]))", "user": "56887bcbe4b0dcc4269f406a"}, {"problem": 83, "code": "(fn [& s] (= 2 (count (set s))))", "user": "57e6997ee4b0bfb2137f5af0"}, {"problem": 83, "code": "(fn [& args]\n  (= (count (distinct args)) 2))", "user": "574e84e0e4b02ea114799243"}, {"problem": 83, "code": "(fn half-truth [& bools] (= 2 (count (set bools))))", "user": "57ee804ee4b0bfb2137f5bbb"}, {"problem": 83, "code": "not=", "user": "57f0f7b8e4b0bfb2137f5bfe"}, {"problem": 83, "code": "(fn [& args]\n    (let [\n          n-true (count (filter true? args))\n          result (not (or (= n-true 0) (= n-true (count args))))\n         ]\n      result\n    )\n  )", "user": "532f7e12e4b019098a6f8b4e"}, {"problem": 83, "code": "(fn [& args] (= #{true false} (set args)))", "user": "57c56d78e4b05aa3c4741ce3"}, {"problem": 83, "code": "(fn [& bs]\n  (let [tcount (count (filter identity bs))]\n    (and (> tcount 0)\n         (< tcount (count bs)))))", "user": "57e0f30ae4b0bfb2137f5a66"}, {"problem": 83, "code": "(fn [& trus] (boolean (and (some true? trus) (some false? trus) )))", "user": "57eb7a97e4b0bfb2137f5b62"}, {"problem": 83, "code": ";(fn [& c]\n;  (true?\n;   (and\n;    (some true? c)\n;    (not-every? true? c))))\n\n#(true? \n  (and\n    (some true? %&)\n    (some false? %&)))", "user": "57e4dbcbe4b0bfb2137f5ac3"}, {"problem": 83, "code": "(fn [& args]\n  (and (reduce #(or % %2) args) (not (reduce #(and % %2) args))))", "user": "57596ba7e4b02ea11479931a"}, {"problem": 83, "code": "(fn [& xs]\n   (and \n      (> (count (filter #(= true %) xs)) 0)\n      (> (count xs) (count (filter #(= true %) xs)))))", "user": "56483f45e4b0284900eef62b"}, {"problem": 83, "code": "#(apply not= %&)", "user": "57ec3d29e4b0bfb2137f5b77"}, {"problem": 83, "code": "(fn [& x] (true? (and (some true? x) (not (every? true? x)))))", "user": "574a71b7e4b02ea1147991fb"}, {"problem": 83, "code": "#_(fn [& args]\n  (and (not (every? false? args))\n       (not (every? true? args))))\n\nnot=", "user": "55efc291e4b066087aa9453d"}, {"problem": 83, "code": "(fn [& args]\n  (if (and (some true? args)\n           (not (every? true? args)))\n    true\n    false))", "user": "577b4440e4b0d3393e5deb0f"}, {"problem": 83, "code": "(fn\n  [& x]\n  (and\n   ((complement not-any?) identity x)\n   (not-every? identity x)\n   ))", "user": "57f55632e4b0903ccab3dcf1"}, {"problem": 83, "code": "(fn [& args]\n  (let [seen-bools (set args)]\n    (and (contains? seen-bools true) (contains? seen-bools false))))", "user": "5746061ae4b009280f9f2b5b"}, {"problem": 83, "code": "not=", "user": "57db2369e4b0bd073c20241f"}, {"problem": 83, "code": "(fn [& p]\n  (let [c (count (remove #(= % false) p))]\n    (if (or (= c 0)\n            (= c (count p)))\n      false\n      true)))", "user": "569ff6dbe4b0542e1f8d149c"}, {"problem": 83, "code": "#(= (set %&) #{true false})", "user": "57c1b32be4b05aa3c4741ca4"}, {"problem": 83, "code": "(fn [& lst]\n    (and\n     ((complement not-any?) true? lst)\n     (not (every? true? lst))\n    ))", "user": "57f6e666e4b0d3187e9008f2"}, {"problem": 83, "code": "(fn [& x] (if (every? #(= false %) x) false (if (every? #(= true %) x) false true)\n            ))", "user": "57eb10b1e4b0bfb2137f5b5b"}, {"problem": 83, "code": "(fn [& coll]\n  (not (nil? (and (some true? coll) (some false? coll)))))", "user": "57dd47f4e4b0bd073c20243e"}, {"problem": 83, "code": "not=", "user": "56a44067e4b0542e1f8d14da"}, {"problem": 83, "code": "(fn [& x] (prn x)(if  (and (some true? x) (not (every? true? x))) true false))", "user": "57c6bca1e4b05aa3c4741cf8"}, {"problem": 83, "code": "(fn [ & args]\n  (if (and (some true? args)\n       (some false? args))\n  \ttrue\n  \tfalse))", "user": "57d174ede4b0bd073c20236c"}, {"problem": 83, "code": "(fn [& args]\n\t(= (set args) #{true false}))", "user": "57f52d3be4b0903ccab3dce7"}, {"problem": 83, "code": "(fn a [& lst]\n  (if(and (reduce (fn [a b] (if (or a b) true false)) lst) (not(reduce  (fn [a b] (if (and a b) true false)) lst))) true false ))", "user": "57fc08d8e4b0d3187e900988"}, {"problem": 83, "code": "(fn half-truth\n  [& n]\n  (let [expr (and (some true? n) (some false? n))] \n    (if (true? expr) \n      true \n      false)))", "user": "57f8153de4b0d3187e900916"}, {"problem": 83, "code": "(fn nice [& args]\n  (and (> (count (filter true? args)) 0) (> (count (filter false? args)) 0)))", "user": "57fc34f0e4b0d3187e90098e"}, {"problem": 83, "code": "#(true?\n  (and\n   (some true? %&)\n   (some false? %&)))", "user": "57485efee4b009280f9f2b8a"}, {"problem": 83, "code": "(fn [arg & args]\n  (not (empty? (drop-while #(= arg %) args))))", "user": "57f8104ce4b0d3187e900910"}, {"problem": 83, "code": "(fn [& lst] (= 2 (count (set lst))))", "user": "573d8658e4b05c31a32c0814"}, {"problem": 83, "code": "not=", "user": "57e91413e4b0bfb2137f5b20"}, {"problem": 83, "code": "(fn [& coll] (boolean (and (some true? coll) (some false? coll))))", "user": "57f80350e4b0d3187e90090c"}, {"problem": 83, "code": "(fn ht [& args]\n  (let [a args]\n  (if (and (some true? a) (some false? a))\n    true\n    false)))", "user": "57f814fbe4b0d3187e900911"}, {"problem": 83, "code": "(fn [& col]\n  (if (= nil (and (some true? col) (some false? col)))\n    false\n    true))", "user": "57fe2d6fe4b0d3187e9009c8"}, {"problem": 83, "code": "(fn [& args]\n  (true? (and (some true? args) (some false? args))))", "user": "57e79d8ee4b0bfb2137f5afe"}, {"problem": 83, "code": "(fn [& params]\n  (boolean \n   (and (some true? params) (some false? params))))", "user": "55cc6c35e4b0e31453f64a10"}, {"problem": 83, "code": "(fn [& s] (> (count (set s)) 1))", "user": "57efb389e4b0bfb2137f5bdb"}, {"problem": 83, "code": "(fn [& args] (let [ss (set args)] (and (contains? ss true) (contains? ss false))))", "user": "57f9011ee4b0d3187e900935"}, {"problem": 83, "code": "not=", "user": "57f81524e4b0d3187e900913"}, {"problem": 83, "code": "(fn [& bools]\n  (and \n    (not-every? true? bools)\n    (not-every? false? bools)\n  )\n)", "user": "57f904c5e4b0d3187e900936"}, {"problem": 83, "code": "(fn [b & more]\n  (if (= b true)\n    (if (= nil more)\n      false\n      (if (every? true? more)\n        false\n        true))\n    (if (= nil more)\n      false\n      (if (every? false? more)\n        false\n        true))))", "user": "57f81549e4b0d3187e900918"}, {"problem": 83, "code": "(fn tf\n  [& bool]\n  (true? \n    (and (some true? bool) (some false? bool))))", "user": "57f81534e4b0d3187e900915"}, {"problem": 83, "code": "(fn [& args]\n  (let [nt (reduce #(if %2 (inc %1) %1) 0 args)]\n    (< 0 nt (count args))))", "user": "57aa053fe4b0b8559636fc61"}, {"problem": 83, "code": "not=", "user": "57f8151ce4b0d3187e900912"}, {"problem": 83, "code": "(fn [& args] \n  (if (and (some #(true? %) args) (not (every? true? args)))\n    true\n    false\n    )\n  \n  )", "user": "57f81045e4b0d3187e90090f"}, {"problem": 83, "code": "(fn [& lst]\n  (if (= (count (partition-by true? lst)) 1)\n    false\n    true))", "user": "57fedf07e4b0d3187e9009dc"}, {"problem": 83, "code": "(fn \n   [& lst]\n  \n   (cond \n    (every? true? lst) false\n    (some true? lst) true\n    :else false\n   )\n  )", "user": "57f81532e4b0d3187e900914"}, {"problem": 83, "code": "(fn [& v] \n  (> (count (partition-by identity v)) 1)\n)", "user": "57f28b22e4b0511f1d294def"}, {"problem": 83, "code": "(fn halft\n\t[& args]\n\t(if (and (some true? args) (and (>(count args) 1) (some false? args)))\n\t\ttrue\n\t\tfalse))", "user": "57f81544e4b0d3187e900917"}, {"problem": 83, "code": "not=", "user": "57fa7c93e4b0d3187e900963"}, {"problem": 83, "code": "(fn [& args]\n  (let [set1 (into #{} args)\n        cnt  (count set1)]\n    (>= cnt 2)))", "user": "5803cd8fe4b0a837a8b30c96"}, {"problem": 83, "code": "(fn [& n]\n  (cond\n    (every? true? n) false\n    (some true? n) true\n    :else false\n    ))", "user": "57f81569e4b0d3187e900919"}, {"problem": 83, "code": "not=", "user": "57fd7344e4b0d3187e9009b6"}, {"problem": 83, "code": "(fn [& x]\n  (if (every? true? x)\n    false\n  (not (every? false? x))))", "user": "580570a2e4b0a837a8b30cc7"}, {"problem": 83, "code": "(fn [& args] (not= 1 (count (set args))))", "user": "57c94c54e4b05aa3c4741d2c"}, {"problem": 83, "code": "(fn half-truth [& xs]\n  (boolean (when (some true? xs)\n             (not-every? true? xs))))", "user": "54cb378be4b057c6fda3a273"}, {"problem": 83, "code": "(fn [& args] \n  (let [x (set args)]\n    (cond\n    (= 1 (count x)) false\n    (some true? x) true \n    :else false\n       )))", "user": "57f8ba80e4b0d3187e90092f"}, {"problem": 83, "code": "not=", "user": "57ee82b1e4b0bfb2137f5bbd"}, {"problem": 83, "code": "(fn riddle [& args] \n  (let [and-and (fn [args] (reduce #(and %1 %2) true args))] \n    (not (or (and-and args) \n         (and-and (map not args))))))", "user": "56958a16e4b0dcc4269f4129"}, {"problem": 83, "code": "(fn [& x] (and (not (every? #(= true %) x)) (not (every? #(= false %) x))))", "user": "562add6de4b00e49c7cb4834"}, {"problem": 83, "code": "#(true? (and (some true? %&) (some false? %&)))", "user": "57b9fb56e4b0fbc9809a27fa"}, {"problem": 83, "code": "(fn [& in]\n  (boolean (and (= false (apply = true in))\n                (some #(= true %) in))))", "user": "57fa6f2ee4b0d3187e900962"}, {"problem": 83, "code": "#(true?\n  (and\n   (some true? %&)\n   (some false? %&)))", "user": "577008f1e4b0979f89651594"}, {"problem": 83, "code": "not=", "user": "57ee432de4b0bfb2137f5bb2"}, {"problem": 83, "code": "(fn [& bs]\n  (boolean (and (not (every? identity bs))\n                (some identity bs))))", "user": "580bd81ee4b0849f6811b711"}, {"problem": 83, "code": "(fn [& coll]\n  (= 2 (count (frequencies coll))))", "user": "56020b3fe4b04bb52996e19b"}, {"problem": 83, "code": "(fn [& x] (if (= 1 (count x))false(if (apply = x) false true)))", "user": "57b8f784e4b0fbc9809a27ea"}, {"problem": 83, "code": "not=", "user": "57ee46c7e4b0bfb2137f5bb3"}, {"problem": 83, "code": "not=", "user": "57ee41eae4b0bfb2137f5bb0"}, {"problem": 83, "code": "not=", "user": "57ef793de4b0bfb2137f5bd8"}, {"problem": 83, "code": "not=", "user": "57ee41a6e4b0bfb2137f5baf"}, {"problem": 83, "code": "(fn [& x] (= 2 (count (distinct x))))", "user": "57ee2b3ee4b0bfb2137f5bac"}, {"problem": 83, "code": "(fn __ [& coll]\n  (and (not (empty? (filter true? coll)))\n      (not-every? true? coll)))", "user": "57ed19a3e4b0bfb2137f5b8e"}, {"problem": 83, "code": "(fn [& b] \n  (if (every? true? b)\n    false\n    (if (some true? b) true false)))", "user": "576773cde4b0a07e8fc180be"}, {"problem": 83, "code": "(fn [& bools]\n  (and (or (some #(= true %) bools) false)\n       (or (some not bools) false)))", "user": "57a4fa50e4b0a966079561f1"}, {"problem": 83, "code": "(fn [& all]\n  ((comp (partial = 2) count set) all))", "user": "570e6974e4b0b0fb43fd06ef"}, {"problem": 83, "code": "not=", "user": "580c8fcee4b0849f6811b721"}, {"problem": 83, "code": "not=", "user": "58062dd2e4b0a837a8b30cda"}, {"problem": 83, "code": "(fn  [& bools]\n  (if (and (not-every? true? bools) (some true? bools))\n    true\n    false))", "user": "580d7e53e4b0849f6811b73e"}, {"problem": 83, "code": ";(fn  [& bools]\n  ;(if (and (not-every? true? bools) (some true? bools))\n   ; true\n   ; false))\n   \n#(true? \n  (and\n    (some true? %&)\n    (some false? %&)))", "user": "580d7de3e4b0849f6811b73d"}, {"problem": 83, "code": "(fn [& xs] (and (not (every? identity xs)) (not (every? not xs))))", "user": "54ba9ee8e4b0ed20f4ff6eb7"}, {"problem": 83, "code": "(fn [& x] (and (not-every? true? x) (not-every? false? x)))", "user": "57fbf995e4b0d3187e900981"}, {"problem": 83, "code": "(fn [& vars]\n  (cond (every? true? vars) false\n        (some true? vars) true\n        :else false))", "user": "55c5b55fe4b0e31453f649b5"}, {"problem": 83, "code": "(fn [& args] \n  (and \n    (if (= nil (some true? args)) false true)\n    (if (= nil (some false? args)) false true)     \n  )    \n)", "user": "58186016e4b0c0e9c07b83ad"}, {"problem": 83, "code": "(fn [& coll]\n   (if (and\n        (some true? coll)\n        (some false? coll))\n     true false))", "user": "58134ba8e4b0f478707a060b"}, {"problem": 83, "code": "(fn checker [& elems] (boolean (and\n               (some identity elems)\n               (some not elems)) ))", "user": "5779556de4b0979f8965166e"}, {"problem": 83, "code": "(fn [boo & args]\n   [boo args]\n   (if (or (every? false? (cons boo args)) (every? true? (cons boo args)))\n     false\n     true))", "user": "57bbc9bde4b05aa3c4741c31"}, {"problem": 83, "code": "(fn [& a] (not (or (not-any? true? a) (every? true? a))))", "user": "5508a292e4b06e50f9beb10f"}, {"problem": 83, "code": "#(> (count (set %&)) 1)", "user": "5405885ee4b0addc1aec6668"}, {"problem": 83, "code": "#(if (some true? %&) (if (every? true? %&) false true) false)", "user": "57f3b841e4b0511f1d294e0f"}, {"problem": 83, "code": "(fn [& sq]\n  (let [a  (count  (filter identity sq)) b (count sq)]\n    (if (< 0 a b)\n       true\n       false)))", "user": "581a5fdbe4b0e114eb51a002"}, {"problem": 83, "code": "(fn [& args] (and (= true (some #(= % true) args)) (= true (some #(= % false) args))))", "user": "575ddfd1e4b02ea11479938d"}, {"problem": 83, "code": "(fn [& booles]  (and (reduce #(or %1 %2)  booles) (not (every? true? booles))))", "user": "551daeb9e4b030e6a24d00df"}, {"problem": 83, "code": "(fn multi-xor\n  [& bools]\n  (not (not (and (some identity bools)\n                 (some not bools)))))", "user": "58152157e4b0f478707a0631"}, {"problem": 83, "code": "(fn [& xs]\n  (not (or \n        (not (reduce #(or %1 %2) xs)) \n    \t(reduce #(and %1 %2) xs))))", "user": "578df8fee4b0ebec4cfb7574"}, {"problem": 83, "code": "not=", "user": "581e61b0e4b04b46fc4b0f28"}, {"problem": 83, "code": "not=", "user": "5821b018e4b04b46fc4b0f80"}, {"problem": 83, "code": "(fn [& args] (= 2 (count (set args))))", "user": "565b2fa5e4b068f2fe63dbfe"}, {"problem": 83, "code": "not=", "user": "56193c6ee4b053970a773af2"}, {"problem": 83, "code": "(fn [& x]\n  (let [y (set x)]\n    (if (and (some true? y)\n             (some false? y))\n      true\n      false)))", "user": "5800ab1ee4b0a837a8b30c41"}, {"problem": 83, "code": "(fn [& x] (if (or (every? true? x)(every? false? x)) false true))", "user": "580d7bdae4b0849f6811b73c"}, {"problem": 83, "code": "(fn [& stuff]\n  (let [notevery? (complement every?)]\n  \t(and (notevery? #(= true %) stuff) (notevery? #(= false %) stuff))))", "user": "581e8b86e4b04b46fc4b0f2b"}, {"problem": 83, "code": "(fn [& args] (and (not (every? identity args)) (true? (some identity args))))", "user": "58225587e4b04b46fc4b0f94"}, {"problem": 83, "code": "not=", "user": "569e2551e4b0542e1f8d1483"}, {"problem": 83, "code": "(fn [& args] (boolean (and (some identity args) (some identity (map not args)))))", "user": "56449e4de4b0284900eef5f9"}, {"problem": 83, "code": "(fn [& b] (and (not-every? false? b) (not-every? true? b)))", "user": "58247423e4b051871117bec5"}, {"problem": 83, "code": "(fn [& x] (and ((complement not-any?) true? x)((complement not-any?) false? x)))", "user": "581e76dfe4b04b46fc4b0f29"}, {"problem": 83, "code": "#(true? (and (some true? %&) (some false? %&)))", "user": "581b4d3be4b04b46fc4b0ec6"}, {"problem": 83, "code": ";;not=\n#(and (boolean (some true? %&)) (boolean (some false? %&)))", "user": "57ee42c4e4b0bfb2137f5bb1"}, {"problem": 83, "code": "not=", "user": "573632b7e4b0cd1946bd102f"}, {"problem": 83, "code": "(fn [& coll] (if (and (some true? coll) (some false? coll)) true false))", "user": "569fc70ee4b0542e1f8d1499"}, {"problem": 83, "code": "#(true? \n  (and \n   (some true? %&)\n   (some false? %&)\n  )\n)", "user": "58224c53e4b04b46fc4b0f92"}, {"problem": 83, "code": "not=", "user": "507ff90fe4b089ade05efbd9"}, {"problem": 83, "code": "(fn [& args]\n(and \n (boolean (some identity args))\n (not (every? identity args))\n\n)\n)", "user": "5710140fe4b09c608db7042e"}, {"problem": 83, "code": "(fn [& xs]\n  (if (or (every? true? xs) (every? false? xs))\n    false\n    true))", "user": "55c423e1e4b0e31453f64994"}, {"problem": 83, "code": "(fn [& preds] (let [trues (count (filter true? preds))]\n                (and (> trues 0)\n                     (< trues (count preds)))))", "user": "563a79e5e4b0bfe05bf117fe"}, {"problem": 83, "code": "not=", "user": "581dad0ae4b04b46fc4b0f17"}, {"problem": 83, "code": "(fn [& colls]\n   (if (>= (count (partition-by identity colls))\n          2)\n     true\n     false))", "user": "5808ee16e4b0a837a8b30d16"}, {"problem": 83, "code": "(fn [& xs]\n  (cond (= (count (filter #(= % true) xs)) (count xs)) false\n        (= (count (filter #(= % false) xs)) (count xs)) false\n        :else true))", "user": "581829cce4b0c0e9c07b83a9"}, {"problem": 83, "code": "(fn [& args] (if (and (some true? args) (not-every? true? args )) true false))", "user": "5784ff88e4b0ebec4cfb74d4"}, {"problem": 83, "code": "(fn [& r]\n  (if (and\n       (> (count r) 1)\n       (some #(= true %) r)\n       (some #(= false %) r))\n    true\n    false\n    ))", "user": "500e3238e4b068062f6e8d8f"}, {"problem": 83, "code": "(fn [& x]  (and (true? (some true? x)) (not-every? true? x)))", "user": "582835cbe4b051871117bf30"}, {"problem": 83, "code": "(fn [& c]\n  (and\n   (not (every? true? c))\n   (not (every? false? c))))", "user": "5813e208e4b0f478707a061b"}, {"problem": 83, "code": "(fn my-half-truth [& bools]\n  (let [trues-cnt (count (filter true? bools))]\n     (and (> trues-cnt 0) \n          (not= trues-cnt (count bools)))))", "user": "581b19e7e4b04b46fc4b0ec4"}, {"problem": 83, "code": "(fn [& args]\n  (and (contains? (set args) false)\n       (contains? (set args) true)))", "user": "58299e03e4b051871117bf46"}, {"problem": 83, "code": "not=", "user": "58173722e4b0c0e9c07b838a"}, {"problem": 83, "code": "(fn [& args]\n  (boolean\n   (and\n    (some true? args)\n    (some false? args))))", "user": "58303fc3e4b051871117c006"}, {"problem": 83, "code": "(fn [& args]\n  (if (= (count (set args)) 1) false true))", "user": "5829d588e4b051871117bf4a"}, {"problem": 83, "code": "#(if (and (some false? %&) (some true? %&)) true false)", "user": "583166c1e4b051871117c025"}, {"problem": 83, "code": "#(true? \n  (and\n    (some true? %&)\n    (some false? %&)))", "user": "57996e29e4b05b1deef9adc1"}, {"problem": 83, "code": "#(= 2 (count (set %&)))", "user": "582e0afde4b051871117bfd5"}, {"problem": 83, "code": "(fn test14 [& args]\n  (and (not (not-any? identity args)) (not-every? identity args)))", "user": "5804d5afe4b0a837a8b30cad"}, {"problem": 83, "code": "(fn ht [& bs] (true? (and (some true? bs) (some (complement true?) bs))))", "user": "58335c22e4b089d5ab817c9a"}, {"problem": 83, "code": "not=", "user": "55c66ffee4b0e31453f649c2"}, {"problem": 83, "code": "(fn [& args] (not (or (every? true? args) (every? false? args))))", "user": "55e6809ee4b050e68259b48a"}, {"problem": 83, "code": "(comp #(if (every? true? %) false (if (every? false? %) false true)) sorted-set)", "user": "582290b5e4b04b46fc4b0fa0"}, {"problem": 83, "code": "(fn [& a] (let [s (set a)] (and (contains? s true) (contains? s false))))", "user": "54aa373de4b09f271ff37cb6"}, {"problem": 83, "code": ";More elegant solution\n;(fn [& xs] (let [s (into #{} xs)] (and (contains? s true) (contains? s false))))\n\n(fn [& x]\n          (let [myf (fn [v] (> (count (filter #(= v %) x)) 0))]\n            (reduce #(and %1 %2) (map myf [true false]))))", "user": "5835bc73e4b089d5ab817ce9"}, {"problem": 83, "code": "(fn [& bools]\n  (and (if (nil? (some true? bools)) false true)\n       (not (every? true? bools))))", "user": "55b1d0b5e4b0da326a65cf73"}, {"problem": 83, "code": "(fn [& col]\n(and\n  (reduce \n   #(or %1 %2) false col)\n  (not (reduce \n   #(and %1 %2) true col))\n )\n)", "user": "57dfe173e4b0bd073c20246b"}, {"problem": 83, "code": "(fn [& args]\n   (let [true-count (count (filter true? args))]\n     (if\n       (and \n         (> true-count 0) \n         (< true-count (count args)))\n       true\n       false)))", "user": "55b2505be4b0da326a65cf7d"}, {"problem": 83, "code": "(fn [& bs]\n  (if (and (some #(true?  %) bs)\n           (some #(false? %) bs))\n    true\n    false))", "user": "5791d259e4b0ebec4cfb75c0"}, {"problem": 83, "code": "not=", "user": "57235dc4e4b0c5bde472c0e2"}, {"problem": 83, "code": "not=", "user": "58334d18e4b089d5ab817c97"}, {"problem": 83, "code": "(fn [& x]\n  (cond\n    (and (= (count x) 1) (true? x)) false\n    (every? true? x) false\n    (every? false? x) false\n    :else true\n    )\n)", "user": "580d1da7e4b0849f6811b72f"}, {"problem": 83, "code": "(fn [& args]\n  (true? (and (some true? args)\n              (some false? args))))", "user": "5787ce76e4b0ebec4cfb750e"}, {"problem": 83, "code": "(fn [& args]\n  (if (every? identity args)\n    false\n    (true? (some identity args))))", "user": "58217fbde4b04b46fc4b0f78"}, {"problem": 83, "code": "#(if (and ((frequencies %&) true) ((frequencies %&) false)) true false)", "user": "5835a222e4b089d5ab817ce5"}, {"problem": 83, "code": "(fn j [& args] (true? (and (some true? args) (not-every? true? args))))", "user": "580f9585e4b0f478707a05b5"}, {"problem": 83, "code": "(fn [& bools] (and (not-every? true? bools) (not-every? false? bools)))", "user": "58327a08e4b089d5ab817c7c"}, {"problem": 83, "code": "not=", "user": "58384bc4e4b089d5ab817d27"}, {"problem": 83, "code": "#(true? \n  (and\n   (some true? %&)\n   (some false? %&)))", "user": "5835cb06e4b089d5ab817cea"}, {"problem": 83, "code": "not=", "user": "58391c94e4b089d5ab817d35"}, {"problem": 83, "code": "(fn [& coll]\n  (let [m (group-by identity coll)\n        trues (get m true)\n        c (count trues)]\n    (if (and (pos? c) (not= c (count coll))) true false)\n    )\n  \n  )", "user": "583667c7e4b089d5ab817cfb"}, {"problem": 83, "code": "(fn [& bools]\n  (true? (and (some true? bools)\n       (some false? bools))))", "user": "54bfc203e4b0ed20f4ff6f08"}, {"problem": 83, "code": "#(true? \n  (and\n    (some true? %&)\n    (some false? %&)))", "user": "50b25edae4b03ea88043355e"}, {"problem": 83, "code": "(fn [& args]\n  (loop [src (reduce conj [] args)\n         is-true false\n         is-false false ]\n    (if (empty? src) (and is-true is-false)\n      (recur (rest src) (or is-true (true? (first src))) (or is-false (false? (first src)))))))", "user": "582589b2e4b051871117bedd"}, {"problem": 83, "code": "not=", "user": "582d7569e4b051871117bfbe"}, {"problem": 83, "code": "(fn f [ & x] \n  (if \n    (and (some #(= % true) x) (some #(= % false) x))\n    true\n    false))", "user": "4e6a5728535d8ccf87e9fecf"}, {"problem": 83, "code": "(fn[ & a] (= (every? false? a) (every? true? a)))", "user": "583e1558e4b089d5ab817da9"}, {"problem": 83, "code": "not=", "user": "54d341f7e4b0e8a36923e603"}, {"problem": 83, "code": "(fn [& args]\n  (let [se (into #{} args)]\n    (condp = (count se)\n      2 true\n      1 false)))", "user": "54684c3be4b00cfc9eacc139"}, {"problem": 83, "code": "not=", "user": "5804b491e4b0a837a8b30cac"}, {"problem": 83, "code": "#(if (and (some #{true} %&) (not-every? #{true} %&)) true false)", "user": "583e27e2e4b089d5ab817daa"}, {"problem": 83, "code": "(fn [& x] (and (odd? (get (frequencies x) 'true 0)) (not (every? true? x))))", "user": "55a21f1ce4b0acc240e3151f"}, {"problem": 83, "code": "(fn \n  [& col]\n  (cond \n    (every? true? col) false  \n    (some true? col) true\n    :else false))", "user": "5843b231e4b089d5ab817e3d"}, {"problem": 83, "code": "#(> (count (distinct %&)) 1)", "user": "54635083e4b01be26fd746bd"}, {"problem": 83, "code": "(fn [& args] (not (or (every? not args) (every? identity args))))", "user": "584dadebe4b0b7285a6f4e44"}, {"problem": 83, "code": "#(true? (and (some true? %&) (some false? %&)))", "user": "5820cca0e4b04b46fc4b0f62"}, {"problem": 83, "code": "(fn [& args]\n\t(if (> 2 (count (partition-by #(identity %) (vec args))))\n\t\tfalse\n\t\ttrue\n\t\t)\n\t)", "user": "57465429e4b009280f9f2b60"}, {"problem": 83, "code": "(fn s \n  [ & s] \n  (apply not= s))", "user": "582dc562e4b051871117bfcb"}, {"problem": 83, "code": "#(and (if (nil? (some true? %&)) false true)\n      (not (every? true? %&)))", "user": "56719c3ce4b05957ce8c610c"}, {"problem": 83, "code": "(fn [& xs]\n  (boolean (and (some identity xs)\n                (some not xs))))", "user": "5027f37be4b01614d1633ff1"}, {"problem": 83, "code": "not=", "user": "567b2f20e4b05957ce8c61a2"}, {"problem": 83, "code": "#(->> (set %&) \n      count\n      (= 2))", "user": "58524875e4b0b7285a6f4ead"}, {"problem": 83, "code": "(fn\n  [& args]\n  (let [num-trues (count (filter identity args))]\n    (if (or (= 0 num-trues) (= num-trues (count args)))\n      false\n      true)))", "user": "55a5e2f7e4b0acc240e31550"}, {"problem": 83, "code": "(fn [& a](= 2 (count (group-by identity a))))", "user": "5849ac5fe4b089d5ab817ed7"}, {"problem": 83, "code": "(fn [& xs] (if (and (some true? xs) (some false? xs))\n  true\n  false))", "user": "57dafe97e4b0bd073c20241c"}, {"problem": 83, "code": "(fn [& x] \n  (and \n   (or (some true? x)\n       false)\n     (not (every? true? x))))", "user": "554b8b78e4b0a04f7929958d"}, {"problem": 83, "code": "(fn sad-but-true-omg-why\n  [& truths]\n  (boolean (and (some true? truths) (some false? truths))))", "user": "563f4c47e4b08d4f616f5ed2"}, {"problem": 83, "code": "(fn [v & r] (if (true? v) (if (some false? r) true false)\n                           (if (some true? r) true false)))", "user": "56b1b59be4b0982f16b37df2"}, {"problem": 83, "code": "(fn some-truth?\n  [& args]\n  (or\n    (and\n      (some true? args)\n      (not (every? true? args)))\n    false))", "user": "57e9a77ae4b0bfb2137f5b35"}, {"problem": 83, "code": "(fn [& arg] (not (apply =  arg)) )", "user": "583c4482e4b089d5ab817d7e"}, {"problem": 83, "code": "not=", "user": "5766fbb7e4b0a07e8fc180b6"}, {"problem": 83, "code": "(fn [& args]\n  (true?\n   (and (some true? args)\n        (some false? args))))", "user": "57fdd1cfe4b0d3187e9009bf"}, {"problem": 83, "code": "not=", "user": "5854d1c0e4b07779d468640a"}, {"problem": 83, "code": "#(= (some true? %&) (some false? %&) )", "user": "57f9b25fe4b0d3187e90094b"}, {"problem": 83, "code": "(fn [& args] (and (true? (some identity args)) (true? (some identity (map not args)))))", "user": "585c5b21e4b0f14aab7c8786"}, {"problem": 83, "code": "(fn [& args]\n  (if (and (some true? args)\n           (not (every? true? args)))\n    true\n    false)\n  )", "user": "58562083e4b0f14aab7c86eb"}, {"problem": 83, "code": "(fn [x & more]\n   (if (empty? more)\n     false\n     (not (= (count (filter #(= x %) more))\n             (count more)))))", "user": "585e2e77e4b0f14aab7c87ac"}, {"problem": 83, "code": "(\n fn [& r] \n \t(\n      if \n      (every? identity r) \n      false \n      (true? (some identity r))\n    )\n)", "user": "585d40afe4b0f14aab7c8798"}, {"problem": 83, "code": "(fn [& o]\n  (and (reduce #(or %1 %2) o)\n       (not (reduce #(and %1 %2) o))))", "user": "56b6e354e4b0982f16b37e41"}, {"problem": 83, "code": "#(->> (set %&) (count) (= 2))", "user": "57d0e185e4b0bd073c202360"}, {"problem": 83, "code": "(fn [& args] (and (not-every? false? args) (not-every? true? args)))", "user": "584f5133e4b0b7285a6f4e61"}, {"problem": 83, "code": "not=", "user": "56f9b953e4b07572ad1a88b9"}, {"problem": 83, "code": "(fn [& rest_]\n  (true? (and (some true? rest_)\n              (some false? rest_))))", "user": "58637f03e4b0f14aab7c881e"}, {"problem": 83, "code": "#(and (boolean (some true? %&)) (not-every? true? %&))", "user": "51456858e4b0e88796073408"}, {"problem": 83, "code": "#(= (set %&) #{false true})", "user": "5853582fe4b0b7285a6f4ec5"}, {"problem": 83, "code": "not=", "user": "585481e0e4b07779d46863fe"}, {"problem": 83, "code": "(fn [& xs] (= (count (distinct xs)) 2))", "user": "538d7e2ee4b0b51d73faae70"}, {"problem": 83, "code": "#(and (not (every? true? %&)) (not (every? false? %&)))\n\n;#(true? \n;  (and\n;    (some true? %&)\n;    (some false? %&)))", "user": "55357ab5e4b09218d5f44faf"}, {"problem": 83, "code": "(fn [& x] (if (and\n                         (not (every? identity x))\n                         (some true? x)\n                         )\n                      true false))", "user": "52ade380e4b0c58976d9ac9b"}, {"problem": 83, "code": "(fn [& args] (true? (and (some identity args) (not-every? identity args))))", "user": "54f26266e4b024c67c0cf8c5"}, {"problem": 83, "code": "(fn [& x]\n  (and (contains? (set x) true)\n       (not (apply = x))))", "user": "57c33eeae4b05aa3c4741cbc"}, {"problem": 83, "code": "(fn[& args] (and (.contains args true) (.contains args false)))", "user": "56acfee5e4b03c432f18734f"}, {"problem": 83, "code": "#(= 2 (count (set %&)))", "user": "5863eda2e4b0f14aab7c8836"}, {"problem": 83, "code": "(fn [& args]\n  (boolean \n   (and \n    (some true? args) \n    (not-every? true? args)\n    )))", "user": "52dc7344e4b09f7907dd13cf"}, {"problem": 83, "code": "not=", "user": "586b6f13e4b01531a375e959"}, {"problem": 83, "code": "#(= (count (set %&)) 2)", "user": "4e11b92a535d04ed9115e7cb"}, {"problem": 83, "code": "(fn aa [& b]\n  (let [f-b (first b)]\n    (not= nil (some #(not= f-b %) b))))", "user": "547bf82de4b0c51c1f4d72e1"}, {"problem": 83, "code": "(fn [& b] (= [true false] [(some true? b) (every? true? b)]))", "user": "586615e6e4b0f14aab7c8858"}, {"problem": 83, "code": "(fn [& args] (boolean (and (some identity args) (not (every? identity args)))))", "user": "585bcd51e4b0f14aab7c8771"}, {"problem": 83, "code": "(fn mybools [& args] (if (and (= (first (sort args)) false ) (= (last (sort args)) true )) true false))", "user": "58622733e4b0f14aab7c8803"}, {"problem": 83, "code": "(fn f [& v]\n  (let [ct (reduce + (map #(if (= true %) 1 0) v))\n        c (count v)]\n    (and (not= c ct) (> ct 0))))", "user": "5866b999e4b0f14aab7c886b"}, {"problem": 83, "code": "#(and (or (some identity %&) false) (not (every? identity %&)))", "user": "54c4c96ae4b045293a27f61f"}, {"problem": 83, "code": "(fn [& xs](and (not (nil? (some true? xs))) (not (every? true? xs))))", "user": "55597b84e4b0deb715856e36"}, {"problem": 83, "code": "not=", "user": "586b6a0ae4b01531a375e957"}, {"problem": 83, "code": "(fn [& col] (and (not-every? true? col) (not-every? false? col)))", "user": "584d8724e4b0b7285a6f4e3e"}, {"problem": 83, "code": "(fn [& bools] (true? (and (some #(true? %) bools) (not (nil? (some #(false? %) bools))))))", "user": "587294f0e4b01531a375ea1e"}, {"problem": 83, "code": "(fn [& b]\n   (and\n     (not (every? #(true? %1) b))\n     (not (nil? (some #(true? %1) b)))))", "user": "5840c068e4b089d5ab817df8"}, {"problem": 83, "code": "(fn [& args] (and (boolean (some identity args)) (not (every? identity args))))", "user": "51a132cee4b0b292b01ee3ff"}, {"problem": 83, "code": "(fn [& preds]\n  (= #{true false} (set preds)))", "user": "54012b48e4b0de5c41848620"}, {"problem": 83, "code": "(fn [& args]\n  (and (not-every? identity args)\n       (boolean (some identity args))))", "user": "58740c18e4b01531a375ea49"}, {"problem": 83, "code": "(fn [& bools]\n  (and (not-every? true? bools) (not-every? false? bools)))", "user": "5879d577e4b01531a375ead8"}, {"problem": 83, "code": "(fn [& bools]\n   (if (and (some true? bools) (not (every? true? bools)))\n     true\n     false))", "user": "58775496e4b01531a375ea9a"}, {"problem": 83, "code": "#(clojure.set/subset? #{true false} (set %&))", "user": "57949eb0e4b0e215f87e846f"}, {"problem": 83, "code": "(fn [& xs] \n  (let [andResult (reduce #(and %1 %2) true xs) \n        orResult (reduce #(or %1 %2) false xs)] \n    (and (not andResult) orResult)))", "user": "563c7f98e4b0bfe05bf11836"}, {"problem": 83, "code": "(fn [& a]\n  (if \n    (or (every? true? a) (every? false? a))\n    false\n    true))", "user": "57fbd83ee4b0d3187e90097b"}, {"problem": 83, "code": "(fn [& booleans]\n  (let [size (count booleans)\n        count-of-true ((frequencies booleans) true 0)]\n    (and (> count-of-true 0) (not (= count-of-true size)))\n    ))", "user": "587100d6e4b01531a375e9f0"}, {"problem": 83, "code": "(fn [& xs]\n  (boolean (and (some true? xs)\n       \t\t\t(some false? xs))))", "user": "4f525fdce4b03ad3f0c10d37"}, {"problem": 83, "code": "; input x coll\n; output judge x exist in coll and coll not only have x\n\n(fn [& b]\n  (if (= 2 (count (set b)))\n    true\n    false))", "user": "582c526ae4b051871117bf88"}, {"problem": 83, "code": "(fn half-truth\n  [& args]\n  (and (true? (some true? args)) (not (every? true? args))))", "user": "5673881fe4b05957ce8c6120"}, {"problem": 83, "code": "#(= 2 (count (set %&)))", "user": "58800fd4e4b0f1effa3b7606"}, {"problem": 83, "code": "(fn [& c]\n  (cond\n    (every? true? c) false\n    (some true? c) true\n    :else false))", "user": "50385746e4b0803468ea2c6d"}, {"problem": 83, "code": "#(and ((complement not-any?) identity %&) (not-every? identity %&))", "user": "5880e38fe4b0f1effa3b7625"}, {"problem": 83, "code": "#(and (not (nil? (some true? %&))) (not-every? true? %&))", "user": "587ee260e4b052da650a6353"}, {"problem": 83, "code": "(fn [& x]\n  (boolean \n   (and (some true? x)\n      \t(some false? x))))", "user": "5883584ae4b0f1effa3b7674"}, {"problem": 83, "code": ";(fn [& a] (and (not (every? true? a)) (true? (some true? a))))\nnot=", "user": "5881335ce4b0f1effa3b762e"}, {"problem": 83, "code": "#(true?\n  (and (some true? %&)\n       (some false? %&)))", "user": "58852909e4b0f1effa3b76af"}, {"problem": 83, "code": "(fn [& c]\n  (and (reduce #(or %1 %2) (vec c)) (not (reduce #(and %1 %2) c))))", "user": "587f8393e4b0f1effa3b75f2"}, {"problem": 83, "code": "(fn [& bs] \n  (boolean (and (some true? bs) (some false? bs))))", "user": "57ea2c91e4b0bfb2137f5b42"}, {"problem": 83, "code": "#(true? \n  (and\n    (some true? %&)\n(some false? %&)))", "user": "5790f9d7e4b0ebec4cfb75b4"}, {"problem": 83, "code": "(fn [& arglist]\n  (if (not-every? #(= true %) arglist)\n    (not-every? #(= false %) arglist)\n    false))", "user": "588782eae4b0f1effa3b76fd"}, {"problem": 83, "code": "#(true? (and (some true? %&) (some false? %&)))", "user": "5882ac4ee4b0f1effa3b7661"}, {"problem": 83, "code": "(fn [& params]\n  (if (and (some true? params)\n      \t(not (every? true? params)))\n    true\n    false))", "user": "4fb85651e4b081705acca2d7"}, {"problem": 83, "code": "(fn[& args] (and (not-every? true? args) (not-every? false? args)))", "user": "52f426fce4b05e3f0be25f1e"}, {"problem": 83, "code": "#(not (or  (every? true? %&) (every? false? %&)))", "user": "587c59d1e4b01531a375eb17"}, {"problem": 83, "code": "(fn [& x] (> (count (partition-by identity x)) 1))", "user": "58840023e4b0f1effa3b768b"}, {"problem": 83, "code": "(fn [& bools]\n   (let [some-true (boolean (some true? bools))\n         not-all-true (not-every? true? bools)]\n     (and some-true not-all-true)))", "user": "569f7bc2e4b0542e1f8d1494"}, {"problem": 83, "code": "(fn [& bools] (true? (and (some true? bools) (some false? bools))))", "user": "5885bea8e4b0f1effa3b76bf"}, {"problem": 83, "code": "(fn [& args]\n    (true?\n     (and (some true? args)\n          (not-every? true? args))))", "user": "500d3160e4b05f7c30cfa6a1"}, {"problem": 83, "code": "(fn [& all] (and (not-every? false? all) (not-every? true? all)))", "user": "585dbe41e4b0f14aab7c879f"}, {"problem": 83, "code": "not=", "user": "5458c74de4b01be26fd74623"}, {"problem": 83, "code": "(fn [& b] (and ((complement not-any?) true? b) (not-every? true? b)))", "user": "578d459ee4b0ebec4cfb7567"}, {"problem": 83, "code": "(let [_and (fn [args] (reduce #(identity %2) true args))\n\t_or (fn [args] (reduce #(if %1 true %2) false args))]\n\t\t(fn [& args] (if (_or (apply list args)) (not (_and (apply list args))) false)))", "user": "5650082fe4b0284900eef6b7"}, {"problem": 83, "code": "(fn [& x] (true? (and (some true? x) (some false? x))))", "user": "57d031d6e4b0bd073c202354"}, {"problem": 83, "code": "(fn [& args]\n  (and (contains? (group-by true? args) true)\n       (contains? (group-by true? args) false) ))", "user": "585a7cb2e4b0f14aab7c874e"}, {"problem": 83, "code": "(fn [& s] (> (count (map first (partition-by identity s))) 1))", "user": "51771cb1e4b085adf681d895"}, {"problem": 83, "code": "(fn [& args]\n          (and (true? (some true? args)) (not (reduce #(and %1 %2) true args))))", "user": "56bfd8ade4b060a8e693e3a2"}, {"problem": 83, "code": "(fn [& l] (and (> (count (filter true? l)) 0) (not-every? true? l)))", "user": "5876c0c5e4b01531a375ea8e"}, {"problem": 83, "code": "#(= (count (set %&)) 2)", "user": "5884e807e4b0f1effa3b76a6"}, {"problem": 83, "code": "(fn [& args] (if (reduce (fn [r x] (and r x)) true args) false (if (reduce (fn [r x] (or r x)) false args) true false)))", "user": "5886e8bde4b0f1effa3b76ea"}, {"problem": 83, "code": "(fn [& bs] \n  (and (not (nil? (some true? bs))) (not (nil? (some false? bs))))\n\n  )", "user": "5885e90de4b0f1effa3b76c5"}, {"problem": 83, "code": "not=", "user": "57de9169e4b0bd073c202454"}, {"problem": 83, "code": "#(and\n  (not-every? true? %&)\n  (not-every? false? %&))", "user": "576e607ae4b0979f89651579"}, {"problem": 83, "code": "(fn [& xs] (and (not-every? identity xs) (not (not-any? identity xs))))", "user": "552b6ddbe4b0ffed3738f965"}, {"problem": 83, "code": "(fn [& ts]\n  (let [n1 (count (filter identity ts))\n           n2 (count ts)]\n    (cond\n       (= n1 n2) false\n       (> n1 0) true\n       :else false)))", "user": "58949f8de4b00487982d525e"}, {"problem": 83, "code": "(fn [& booleans]\n  (= (set booleans) #{true false}))", "user": "588f500ae4b00487982d51a4"}, {"problem": 83, "code": "(fn [& args]\n  (if (or (every? true? args) (every? false? args))\n    false\n    true))", "user": "565487dce4b0f9d632dd8482"}, {"problem": 83, "code": "(fn [& args] (boolean (and (some true? args)\n                  (some false? args))))", "user": "522724bde4b04e78ff2e19aa"}, {"problem": 83, "code": "(fn [& bools]\n  (= 2 (count (into #{} bools))))", "user": "4fe49706e4b0e8f79898feb7"}, {"problem": 83, "code": "(fn xor-etrange\n    [& b]\n    (if (every? true? b)\n        false\n        (true? (some true? b))))", "user": "587bead1e4b01531a375eb0d"}, {"problem": 83, "code": "(fn [& args]\n  (if (and (some true? args)\n           (not (every? true? args)))\n    true\n    false))", "user": "583e02fce4b089d5ab817da5"}, {"problem": 83, "code": "(fn [& coll]\n  (loop [prev nil coll coll changed false]\n    (if (empty? coll)\n      changed\n      (recur \n        (first coll)\n        (rest coll)\n        (if (and (not (= prev nil)) (not (= prev (first coll))))\n          true\n          false)))))", "user": "5896735fe4b00487982d529d"}, {"problem": 83, "code": "(fn [& xs] (not (not (and\n                               (some #(= % true) xs)\n                               (not-every? #(= % true) xs)))))", "user": "53b42472e4b047364c0444b2"}, {"problem": 83, "code": "(fn [& bs] (> (count (set bs)) 1))", "user": "58983e3fe4b00487982d52ce"}, {"problem": 83, "code": "#(and (not (not-any? identity %&))\n      (not-every? identity %&))", "user": "5895477fe4b00487982d527c"}, {"problem": 83, "code": "(fn half-true [& coll]\n  (and\n   (boolean (some true? coll))\n   (not-every? true? coll)))", "user": "562eeba2e4b0ab312c17ebc1"}, {"problem": 83, "code": "#(boolean (and (some true? %&) (not-every? true? %&)))", "user": "58923efce4b00487982d521c"}, {"problem": 83, "code": "(fn [& x] (if (= 1 (count x))false(if (apply = x) false true)))", "user": "53ada652e4b047364c04446d"}, {"problem": 83, "code": "(fn [& args]\n  (if (empty? (rest args))\n    false\n    (letfn\n      [(xor-list [all-true prior-true list-bools]\n                (if (empty? (rest list-bools))\n                  (if all-true\n                    (not (first list-bools))\n                    (or prior-true (first list-bools)))\n                  (xor-list (and all-true (first list-bools)) (or prior-true (first list-bools)) (rest list-bools))))]\n      (xor-list (first args) (first args) (rest args)))))", "user": "57b356c2e4b0fbc9809a277b"}, {"problem": 83, "code": "(fn [& args] (true? (and (not (every? true? args))\n                   (some true? args))))", "user": "557b3f29e4b05c286339e0ac"}, {"problem": 83, "code": "(fn [& args] (if (and (some true? args) (some false? args)) true false))", "user": "58987ee9e4b00487982d52d2"}, {"problem": 83, "code": "(fn [& args] (and (not (apply = true args)) (not (apply = false args))))", "user": "505caadfe4b0bcb5664c3d3e"}, {"problem": 83, "code": "(fn half-truth [& args]\n   (and (boolean (some false? args))\n        (boolean (some true? args))))", "user": "525d44bfe4b0cb4875a45d6d"}, {"problem": 83, "code": "(fn [& args]\n   (let [s (set args)]\n     (> (count s) 1)))", "user": "58447708e4b089d5ab817e4b"}, {"problem": 83, "code": "(fn [& t] (not (or (every? true? t) (not-any? true? t))))", "user": "52ea7d3ae4b09f7907dd14bf"}, {"problem": 83, "code": "(fn\n  [& li]\n  (and\n    (not (reduce\n          #(and %1 %2)\n          li))\n    (reduce\n     #(or %1 %2)\n     li)))", "user": "586a657de4b0f14aab7c88bd"}, {"problem": 83, "code": "#(true? \n  (and\n    (some true? %&)\n(some false? %&)))", "user": "5891bddce4b00487982d5201"}, {"problem": 83, "code": "(fn [& args] (apply not= args))", "user": "589dd2cce4b02bd94d917e48"}, {"problem": 83, "code": "(fn [& c] (if (and (some #{true} c) (not-every? #{true} c)) true false))", "user": "589ec900e4b02bd94d917e65"}, {"problem": 83, "code": "(fn [& args]\n  (not= nil (and (some identity args) (some not args))))", "user": "58a0fc33e4b02bd94d917ea3"}, {"problem": 83, "code": "(fn [& args]\n   (let \n     [\n      varor (fn vo \n              [preds] \n              (if \n                (= 1 (count preds))\n                (first preds)\n                (or (first preds) (vo (rest preds)))\n                )\n              ),\n      varand (fn va \n               [preds] \n               (if \n                (= 1 (count preds))\n                (first preds)\n                (and (first preds) (va (rest preds)))\n                 )\n               )\n      ]\n     (and (varor args) (not (varand args)))\n     )\n   )", "user": "58950f29e4b00487982d5270"}, {"problem": 83, "code": "#(and (boolean (some true? %&)) (not-every? true? %&))", "user": "5884f77ee4b0f1effa3b76a9"}, {"problem": 83, "code": "not=", "user": "5897dda4e4b00487982d52c8"}, {"problem": 83, "code": "(fn [& args]\n  (and (not (nil? (some true? args)))\n       (not (nil? (some false? args)))))", "user": "5885cc62e4b0f1effa3b76c1"}, {"problem": 83, "code": "(fn [& rest] (if (every? true? rest)\n                  false\n                  ((complement not-any?) true? rest) ))", "user": "5785c1d4e4b0ebec4cfb74e1"}, {"problem": 83, "code": "#(and (not (every? true? %&))\n      (not (every? false? %&)))", "user": "5156e767e4b04360f2428e6b"}, {"problem": 83, "code": "(fn [& bools]\n  (not (nil? (and (some false? bools)\n                  (some true? bools)))))", "user": "54f14aa6e4b024c67c0cf8af"}, {"problem": 83, "code": "(fn [& a] (if (every? true? a) false (or (some true? a) false)) )", "user": "53b05a75e4b047364c044482"}, {"problem": 83, "code": "#(true? (and (some true? %&) (some false? %&)))", "user": "589f0087e4b02bd94d917e6d"}, {"problem": 83, "code": "not=", "user": "58935b02e4b00487982d523e"}, {"problem": 83, "code": "(fn [& n] (and (reduce #(or %1 %2) false n) (not (reduce #(and %1 %2) true n))))", "user": "58ad4349e4b0ebc645576c9d"}, {"problem": 83, "code": "(fn[& x] (= 2 (count(set x))))", "user": "57887de2e4b0ebec4cfb751c"}, {"problem": 83, "code": "(fn \n  [& args]\n  (and \n   (not (every? identity args)) \n   (true? (some identity args))))", "user": "5854580ce4b07779d46863f9"}, {"problem": 83, "code": "(fn [& args] (and (contains? (set args) false) (contains? (set args) true)))", "user": "58b106f9e4b0ebc645576cf0"}, {"problem": 83, "code": "(fn [& args] (and (boolean (some identity args)) (boolean (some not args))))", "user": "58a822e4e4b01a0c0b232950"}, {"problem": 83, "code": "(fn half-truth [& args] (= (count(distinct args)) 2))", "user": "58b2f085e4b0ebc645576d15"}, {"problem": 83, "code": "(fn [& bools]\n  (and (not (reduce #(and %1 %2) bools))\n       (reduce #(or %1 %2) bools)))", "user": "58a953dae4b01a0c0b232968"}, {"problem": 83, "code": "(fn xor\n  [& args]\n  (let [\n        e (not-every? identity args)\n        s ((complement not-any?) identity args)]\n    (and e s)))", "user": "588e4e05e4b00487982d5188"}, {"problem": 83, "code": "(fn half [x & others]\n  (loop [ansand x\n         ansor x\n         data others]\n    (if (empty? data)\n      (if (and ansand ansor)\n        false\n        (if ansor\n          true\n          false)\n      )\n      (recur (and ansand (first data)) (or ansor (first data)) (rest data))\n    )\n  )\n)", "user": "57cc14aae4b05aa3c4741d4a"}, {"problem": 83, "code": "(fn [& args] (let [tr (count (filter true? args))\n                   fs (count (filter false? args))\n                   ac (count args)]\n               (and (> tr 0) (not= tr ac))))", "user": "586e47dee4b01531a375e9a9"}, {"problem": 83, "code": "(fn [& e] (and ((complement not-any?) true? e) ((complement every?) true? e)))", "user": "58b54852e4b0ebc645576d52"}, {"problem": 83, "code": "#(and (not= nil (some true? %&)) (not (every? true? %&)))", "user": "58b51e05e4b0ebc645576d4c"}, {"problem": 83, "code": "not=", "user": "58b6d93ce4b0ebc645576d6c"}, {"problem": 83, "code": "not=", "user": "57762e67e4b0979f89651630"}, {"problem": 83, "code": "(fn [& xs]\n    (loop [xs xs has-true false has-false false]\n      (if (or (and has-true has-false) (empty? xs))\n        (and has-true has-false)\n        (recur (rest xs)\n               (or has-true (first xs))\n               (or has-false (not (first xs)))\n))))", "user": "58b81490e4b0ebc645576d8c"}, {"problem": 83, "code": "(fn [& args]\n  (if (every? true? args) false\n      (true? (some true? args)))\n  )", "user": "589037b4e4b00487982d51d0"}, {"problem": 83, "code": "(fn [& args] (and ((comp not nil?) (some identity args)) (not-every? identity args)))", "user": "57625c18e4b0994c1922fba4"}, {"problem": 83, "code": "(fn [& args] \n  (let [cntTrue (count (filter true? args))\n        cnt (count args)]\n    (if (and (>= cntTrue 1) (not= cntTrue cnt)) \n      true \n      false)))\n    \n    \n\n\n\n\n;count true > 1 and count false > 1 = true\n;count true > 1 amd count flase = 0 = false", "user": "58bdb36fe4b0888cdc949d35"}, {"problem": 83, "code": "(fn [& coll] (true? (and (some true? coll) (not (every? true? coll)))))", "user": "4f963487e4b0dcca54ed6cd9"}, {"problem": 83, "code": "(fn\n  [& args]\n  (let [s (set args)]\n    (and\n     (contains? s 'true)\n     (> (count s) 1))))", "user": "58976bfde4b00487982d52bc"}, {"problem": 83, "code": "(fn [& bs] (not (nil? (and (some true? bs) (some false? bs)))))", "user": "58bb218be4b0888cdc949cf4"}, {"problem": 83, "code": "(fn\n     [& x]\n     (println x)\n     (if (and (not-every? true? x) (some true? x))\n       true\n       false)\n     )", "user": "58a44a14e4b01a0c0b2328f2"}, {"problem": 83, "code": "(fn [& args]\n    (if (and (some #{true} args)\n             (some {false true} args))\n      true\n      false))", "user": "586b6753e4b01531a375e956"}, {"problem": 83, "code": "(fn [& x] (true? (and (some true? (vec x)) (some false? (vec x)))))", "user": "58a0fd0be4b02bd94d917ea4"}, {"problem": 83, "code": "(fn [& b] (not (apply = b)))", "user": "5893c64ce4b00487982d524b"}, {"problem": 83, "code": "(fn\n  [& args]\n  (loop [found-true false found-false false bools (into [] args)]\n    (if (and found-true found-false)\n      true\n      (if (= 0 (count bools))\n        false\n        (recur (or found-true (first bools)) (or found-false (not (first bools))) (rest bools))))))", "user": "58a1d00ae4b02bd94d917ec6"}, {"problem": 83, "code": "(fn [& bools]\n  (= (count (distinct bools)) 2))", "user": "58765038e4b01531a375ea7e"}, {"problem": 83, "code": "(fn [& args]\n  (let [c (count (filter identity args))]\n    (and\n     (> c 0)\n     (< c (count args)))))", "user": "5675cdf1e4b05957ce8c614d"}, {"problem": 83, "code": "(fn halftruth [& lst]\n  (and ((complement not-any?) #(= true %) lst)\n       ((complement not-any?) #(= false %) lst)))", "user": "58bc08fee4b0888cdc949d08"}, {"problem": 83, "code": "(fn [& args] (let [n-true (count (filter #(true? %1) args)) argc (count args) more0 (> n-true 0) less-argc (< n-true argc)  ] (and less-argc more0 )))", "user": "58a9e872e4b01a0c0b232973"}, {"problem": 83, "code": "(fn my-half-truth\n  [& args]\n  (cond (every? identity args) false\n        (some identity args) true\n        :else false))", "user": "4eb47bb1535d7eef30807362"}, {"problem": 83, "code": "(fn [& args]\n  (and (not (every? true? args))\n       (= true (some true? args))))", "user": "58bbcbc8e4b0888cdc949d00"}, {"problem": 83, "code": "(fn [& bls]\n  (boolean (and (some identity bls) (not (every? identity bls)))))", "user": "5881d1c2e4b0f1effa3b7644"}, {"problem": 83, "code": "(fn [& l]\n  (let [nfalse (count (filter (fn [x] (= false x)) l))]\n    (and\n     (> (count l) nfalse) ; nro. de falses es menor que longitud total\n     (not= 0 nfalse) ; nro. de falses no es 0 (hay alg\u00fan true)\n     )\n    )\n  )", "user": "589771f9e4b00487982d52bd"}, {"problem": 83, "code": "(fn [x & d] (let [sek (conj d x)] (true? (and (not (every? true? sek)) (some true? sek)))))", "user": "57c314f3e4b05aa3c4741cba"}, {"problem": 83, "code": "(fn half-truth [& booleans]\n  (let [some-true (boolean (some true? booleans))\n        all-true (every? identity booleans)]\n    (and\n     some-true\n     (not all-true))))", "user": "57ea4569e4b0bfb2137f5b46"}, {"problem": 83, "code": "not=", "user": "589c0475e4b00487982d5351"}, {"problem": 83, "code": "(fn [& args] \n  (and \n   (not (not-any? identity args)) \n   (not-every? identity args)))", "user": "58c7a80fe4b021aa9917ed7b"}, {"problem": 83, "code": "(fn [& x]\n   (let [have_set? (fn [i] (contains? (set x) i))]\n     (cond (and (have_set? true) (have_set? false)) true\n           (have_set? true) false\n           (have_set? false) false\n           )\n     )\n   )", "user": "570e43d8e4b0b0fb43fd06eb"}, {"problem": 83, "code": "(fn fx [& values] \n  (let [seq1 (seq values)\n        total (count seq1)\n        xx (filter true? seq1)\n        num (count xx)\n        ]\n    (and (> num 0) (< num total))))", "user": "57b35ecbe4b0fbc9809a277e"}, {"problem": 83, "code": "(fn [& bs]\n  (cond\n    (every? #(true? %) bs) false\n    (every? #(false? %) bs) false\n    :else (some #(true? %) bs)))", "user": "58bc8cbee4b0888cdc949d1b"}, {"problem": 83, "code": "(fn [& xs]\n   (and (not-every? true? xs)(not-every? false? xs)))", "user": "58b80ec1e4b0ebc645576d89"}, {"problem": 83, "code": "(fn half-true [& bools]\n  (true?  (and ((partial some false?) bools)  ((partial some true?) bools))))", "user": "580d2788e4b0849f6811b730"}, {"problem": 83, "code": "not=", "user": "588d224ae4b00487982d516c"}, {"problem": 83, "code": "not=", "user": "58a2b57fe4b02bd94d917ede"}, {"problem": 83, "code": "(fn [& params]\n  (and (not-every? false? params) (not-every? true? params)))", "user": "58ca613de4b021aa9917edb7"}, {"problem": 83, "code": "(fn [& args] (let [x (set args)] (= 2 (count x))))", "user": "55a3d7c7e4b0acc240e3153d"}, {"problem": 83, "code": "(fn [& s]\n  (and (not-every? (complement identity) s) (not-every? identity s)))", "user": "58ca8a1de4b03c36ff7e5835"}, {"problem": 83, "code": "#(= [false true] ((juxt (partial every? identity) (partial some identity)) %&))", "user": "58b86162e4b0ebc645576d97"}, {"problem": 83, "code": "#(boolean (and (some true? %&) (some false? %&)))", "user": "572af688e4b0f4d77e651249"}, {"problem": 83, "code": "(fn [& xs]\n  (let [c (count (filter identity xs))]\n    (and (> c 0) (not= (count xs) c))))", "user": "58cf00c8e4b03c36ff7e58ac"}, {"problem": 83, "code": "(fn [& args]\n  (and (contains? (set args) false)\n       (contains? (set args) true)))", "user": "563f0fdae4b08d4f616f5ece"}, {"problem": 83, "code": "(fn [& args] (not (or (every? false? args) (every? true? args))))", "user": "58b821fee4b0ebc645576d8f"}, {"problem": 83, "code": "(fn [& bools] (if (some false? bools) (if (some true? bools) true false) false))", "user": "58cb7525e4b03c36ff7e584a"}, {"problem": 83, "code": "not=", "user": "58809253e4b0f1effa3b7618"}, {"problem": 83, "code": "(fn[ & dataset]\n  (cond\n   (every? true? dataset) false\n   (some true? dataset) true\n   :else false))", "user": "5832be57e4b089d5ab817c86"}, {"problem": 83, "code": "(fn [& vals] (= 2 (count (group-by identity vals))))", "user": "58d27bcae4b03c36ff7e58fe"}, {"problem": 83, "code": "#(true?\n  (and\n   (some true? %&)\n   (some false? %&)))", "user": "58868940e4b0f1effa3b76de"}, {"problem": 83, "code": "(fn [& args] (= (set args) #{true false}))", "user": "4fe899a6e4b07c9f6fd12c54"}, {"problem": 83, "code": "#(and (not-every? false? %&) (if (some false? %&) true false))", "user": "58db83f5e4b0a4d5acaab681"}, {"problem": 83, "code": "#(cond\n  (every? identity %&) false\n  (some identity %&) true\n  :else false)", "user": "567d132ee4b05957ce8c61c3"}, {"problem": 83, "code": "(fn [& bools]\n  (cond\n    (every? true? bools) false\n    (every? false? bools) false\n    :else true))", "user": "58969076e4b00487982d52a2"}, {"problem": 83, "code": "(fn [& args] (< 0\n                    (count (filter identity args))\n                    (count args)))", "user": "58c4b11ae4b021aa9917ed2c"}, {"problem": 83, "code": "not=", "user": "58c2df0ae4b021aa9917ed17"}, {"problem": 83, "code": "(fn [& args]\n (and (not (every? true? args))\n      (not (every? false? args))))", "user": "53889587e4b0640c7a9a589e"}, {"problem": 83, "code": "(fn a-half-truth [& flags]\n  (let [filtered (filter #(true? %) flags)]\n    (if (or (= (count filtered) (count flags)) (empty? filtered))\n        false\n        true)))", "user": "58daae01e4b0a4d5acaab664"}, {"problem": 83, "code": "#(let [[:as x] %&] (if (some true? x) (if (every? true? x) false true) false))", "user": "58cff8b0e4b03c36ff7e58c0"}, {"problem": 83, "code": "(fn [& n] (and (boolean (some true? n))\n               (boolean (some false? n))))", "user": "5703a557e4b08d47c97781f4"}, {"problem": 83, "code": "not=", "user": "58dcb8cde4b0a4d5acaab6a7"}, {"problem": 83, "code": "(fn t \n  [& args]\n  (if (not-every? #(= % false) args)\n    (if (every? identity args)\n      false\n      true)\n    false\n    ))", "user": "58de563fe4b0a4d5acaab6e3"}, {"problem": 83, "code": "(fn [& bools] (true? (and (some       true? bools) \n                   (not-every? true? bools))))", "user": "577e42dee4b0c8d87281f6e4"}, {"problem": 83, "code": "(fn [& coll] (and (not (not-any? #{true} coll)) (not-every? #{true} coll)))", "user": "58d3d6a3e4b03c36ff7e592b"}, {"problem": 83, "code": "(complement =)", "user": "564a985be4b0284900eef65c"}, {"problem": 83, "code": "#(and (not (every? identity %&)) (= true (some identity %&)))", "user": "58e37946e4b005f69f193cae"}, {"problem": 83, "code": "not=", "user": "55b4fa46e4b01b9910ae2983"}, {"problem": 83, "code": "(fn half-truth [& bools]\n\t(boolean (and \n     \t(some true? bools) \n     \t(some false? bools))))", "user": "587a3babe4b01531a375eae2"}, {"problem": 83, "code": "(fn [& rest-param]\n        (let [total-no-of-param (count rest-param)\n              total-number-of-trues (count (filter #(true? %) rest-param))]\n          (if (or (= total-no-of-param total-number-of-trues) (= 0 total-number-of-trues)) false true)\n          )\n        )", "user": "58e77c57e4b056aecfd47cd2"}, {"problem": 83, "code": "(fn [& x] (and\n             (not-every? identity x)\n             (not-every? (complement identity) x)))", "user": "588906a9e4b0f1effa3b772a"}, {"problem": 83, "code": "(fn [& bools] (not (nil? (and (some true? bools) (some false? bools)))))", "user": "58e7229fe4b056aecfd47cc4"}, {"problem": 83, "code": "not=", "user": "58e58ae9e4b056aecfd47c9a"}, {"problem": 83, "code": "(fn [& args]\n  (not (or\n   (every? identity args)\n   (every? #(= % false) args))))", "user": "58e45a2ce4b056aecfd47c69"}, {"problem": 83, "code": "(fn [& xs] (boolean (and (some true? xs) (not (every? true? xs)))))", "user": "579c7db7e4b05b1deef9ae0a"}, {"problem": 83, "code": "(fn [& bools]\n  (if (= (count bools) (count (filter true? bools)))\n    false\n    (if (= (some true? bools) nil)\n      false\n      (some true? bools))))", "user": "58b989dbe4b0888cdc949ccd"}, {"problem": 83, "code": "(fn prob83\n [firstt & restoff]\n (not (reduce (fn [resultt checkval] (if (= resultt false) false (= firstt checkval))) true restoff)))", "user": "58e6a2c5e4b056aecfd47cba"}, {"problem": 83, "code": "(fn [& bs]\n  (let [c (count(filter #(true? %) bs))]\n    (if (or (= c (count bs)) (= c 0))\n      false\n      true)))", "user": "57d8a1dee4b0bd073c2023ee"}, {"problem": 83, "code": "not=", "user": "58dcf11ae4b0a4d5acaab6af"}, {"problem": 83, "code": "#(-> %&\n     set \n     count\n     (= 2))", "user": "5614425ee4b05f002753dfb1"}, {"problem": 83, "code": "(fn [& x] (boolean (and (some true? x) (some false? x))))", "user": "58e762d3e4b056aecfd47ccc"}, {"problem": 83, "code": "not=", "user": "58ed713de4b056aecfd47d84"}, {"problem": 83, "code": "(fn [& args] (and (not (not-any? true? args)) (not (every? true? args))))", "user": "5794fd7be4b0e215f87e8476"}, {"problem": 83, "code": "not=", "user": "58eba5cce4b056aecfd47d41"}, {"problem": 83, "code": "#(and (not (every? true? %&)) (not (every? false? %&)))", "user": "58dcae01e4b0a4d5acaab6a4"}, {"problem": 83, "code": "(fn [& bools]\n    (boolean\n      (and\n        (some true? bools)\n        (not (every? true? bools))\n        )\n      )\n    )", "user": "58ec1e63e4b056aecfd47d54"}, {"problem": 83, "code": "(fn [& more] (< 1 (count (group-by boolean more))))", "user": "5782018de4b0d36ec5835e8e"}, {"problem": 83, "code": "(fn [& oth]\n  (if (and (some true? oth) (some false? oth)) true false))", "user": "58bc6a88e4b0888cdc949d16"}, {"problem": 83, "code": "not=\n;below solution is so sad....\n;(fn [& a]  (and (not (every? true? a)) (not(nil? (some #(= true %) a)) ))) ;;since clojure 1.6 this is a lot simpler, especially second part", "user": "58eed4c5e4b056aecfd47db7"}, {"problem": 83, "code": "(fn [& bools]\n  (true? (and (some true? bools) (some false? bools))))", "user": "58ee5371e4b056aecfd47da8"}, {"problem": 83, "code": "(fn [& args] (and (not-every? true? args) (not-every? false? args)))", "user": "589f37e0e4b02bd94d917e79"}, {"problem": 83, "code": "(fn [& res]\n  (and (contains? (set res) true) (contains? (set res) false)))", "user": "53a2a259e4b0f1fc7453882c"}, {"problem": 83, "code": "(fn [& xs]\n  (and (boolean (some true? xs))\n       (not-every? true? xs)))", "user": "4e7be091535db169f9c796ba"}, {"problem": 83, "code": "(fn [& xs]\n  (and (contains? (set xs) true)\n       (contains? (set xs) false)))", "user": "58ef4db9e4b056aecfd47dc6"}, {"problem": 83, "code": "(fn [& args]\n  (and (not (nil? (some identity args)))\n       (not (every? identity args))))", "user": "58b2c435e4b0ebc645576d11"}, {"problem": 83, "code": "(fn [& args] (and (not-every? identity args) (not-every? not args)))", "user": "5796d3ebe4b039eba2ecb0ee"}, {"problem": 83, "code": "(fn [& bools] (if (and (some #(= true %) bools)\n                   (not (every? #(= true %) bools)))\n                true\n                false))", "user": "58f2e8fbe4b0438e51c2ce94"}, {"problem": 83, "code": "#(true? (and (some true? %&) (some false? %&)))", "user": "558e160ce4b027778923764c"}, {"problem": 83, "code": "(fn half-truth [& s]\n  (loop [bs s]\n    (let [f (first bs)\n          n (nth bs 1 f)]\n      (if (or (empty? bs) (not= f n))\n        (not= f n)\n        (recur (rest bs))))))", "user": "5865c8f0e4b0f14aab7c884e"}, {"problem": 83, "code": "(fn [& args]\n  (let [truths (filter true? args)]\n    (and (> (count truths) 0)\n         (not= (count truths)\n               (count args)))))", "user": "58e14302e4b005f69f193c78"}, {"problem": 83, "code": "(fn [& ls] (and (not-every? identity ls) (not (not-any? identity ls))))", "user": "56ca2f25e4b0ea9b8538f716"}, {"problem": 83, "code": "#(boolean (and (some false? %&) (some true? %&)))", "user": "57b7de74e4b0fbc9809a27d4"}, {"problem": 83, "code": "not=", "user": "58fd1ed5e4b0438e51c2cfa4"}, {"problem": 83, "code": "#(true? (and (some true? %&) (some false? %&)))", "user": "544673c0e4b032a45b8693b0"}, {"problem": 83, "code": "(fn half-truth?\n  [& bools]\n  (and (not (nil? (some #(true? %) bools)))\n   (not (true? (every? #(true? %) bools)))))", "user": "58f7dfe6e4b0438e51c2cf1f"}, {"problem": 83, "code": "(fn [& xs] (= 2 (count (set xs))))", "user": "58fe460de4b0438e51c2cfcc"}, {"problem": 83, "code": "(fn [& x] (and (not-every? true? x) (not-every? false? x)))", "user": "58f44c07e4b0438e51c2ceb7"}, {"problem": 83, "code": "(fn [& b] (not (or (every? false? b) (every? true? b))))", "user": "58fdbf59e4b0438e51c2cfbc"}, {"problem": 83, "code": "#(= 2 (count (distinct %&)))", "user": "56949fc5e4b0dcc4269f4120"}, {"problem": 83, "code": "not=", "user": "58bc0531e4b0888cdc949d07"}, {"problem": 83, "code": "(fn half-truth [& xs]\n         (if (= 2 (count (into #{} xs)))\n           true\n           false))", "user": "58c4492be4b021aa9917ed27"}, {"problem": 83, "code": "(fn [& args] (and (reduce #(or %1 %2) args) (not-every? identity args)))", "user": "57ffd1a9e4b0a837a8b30c2a"}, {"problem": 83, "code": "(fn [& s] (and ((complement empty?) (filter false? s)) ((complement empty?) (filter true? s))))", "user": "51a3be77e4b0e77c4ca60bf8"}, {"problem": 83, "code": "(fn [& args]\n  (boolean (and (some identity args) (not-every? identity args))))", "user": "58d48df8e4b03c36ff7e5941"}, {"problem": 83, "code": "not=", "user": "53dbca12e4b094d41abdfef6"}, {"problem": 83, "code": "not=", "user": "574b4f3ee4b02ea114799207"}, {"problem": 83, "code": "(fn [& args]\n  (true? (and \n   (some identity args)  \n   (not-every? identity args)))\n  )", "user": "58ee0bb6e4b056aecfd47d97"}, {"problem": 83, "code": "(fn [& v] (and (not-every? identity v) (boolean (some identity v))))", "user": "5566d812e4b0c656e3ff1837"}, {"problem": 83, "code": "(fn [& bools] \n  (and (reduce #(or %1 %2) bools)\n       (not (reduce #(and %1 %2) bools))))", "user": "58dc81d1e4b0a4d5acaab69e"}, {"problem": 83, "code": "(fn allsame [& items]\n  (let [a (first items)\n        c (rest items)\n        b (first c)]\n\n    (cond\n     (= '() c) false\n     (not= a b) true\n     :else (apply allsame c))))", "user": "59075e3be4b047aa04b19955"}, {"problem": 83, "code": "(fn [& args] (boolean (and (some identity args) (not (every? identity args)))))", "user": "58db097fe4b0a4d5acaab66f"}, {"problem": 83, "code": "(fn [& truths]\n  (and (not (empty? (filter true? truths)))\n       (not (empty? (filter false? truths)))))", "user": "55f5b8d6e4b06e875b46ce8d"}, {"problem": 83, "code": ";; Sets filter out duplicates, so a set of bools only has three possible states:\n;; #{true}, #{false}, and #{true false}.  \n;; Of these, we only want to return true for the last state.\n(fn [& bs] (= (set bs) #{false true}))", "user": "5552780ce4b0deb715856df4"}, {"problem": 83, "code": "(fn [& args] (true? (and (some true? args) (some false? args))))", "user": "5901158de4b0438e51c2d039"}, {"problem": 83, "code": "#(not (or (every? true? %&) (every? false? %&)))", "user": "5880d686e4b0f1effa3b7623"}, {"problem": 83, "code": "(fn [& input]\n   (and\n     (<\n       (count (filter #(true? %) input))\n       (count input)\n       )\n     (not (=\n            (count (filter #(true? %) input))\n            0))\n     )\n   )", "user": "590b3aeae4b047aa04b199d0"}, {"problem": 83, "code": "(fn [& more] (= 2 (count (into #{} more))))", "user": "590b055ae4b047aa04b199c9"}, {"problem": 83, "code": "not=", "user": "590d0bc8e4b047aa04b199fa"}, {"problem": 83, "code": "(fn partial-truth\n  [& a]\n  (not (nil? (and (some true? a)\n                  (some false? a)))))", "user": "59076082e4b047aa04b19956"}, {"problem": 83, "code": "(fn [& args]\n  (and (if (some false? args) true false) (not (every? true? args)) (not (every? false? args))))", "user": "587c48cce4b01531a375eb16"}, {"problem": 83, "code": "(fn some-true [& bs]\n  (let [some-true (some true? bs)\n        all-true (every? true? bs)]\n    (cond\n     all-true false\n     some-true true\n     :else false)))", "user": "56326995e4b0bfe05bf117a3"}, {"problem": 83, "code": "#(= (set %&) #{true false})", "user": "5908b36be4b047aa04b19982"}, {"problem": 83, "code": "(fn [& args] \n     (let [coll (vec args)]\n       (and \n            (not-every? true? coll)\n            (if (some true? coll)\n              true\n              false))))", "user": "58934052e4b00487982d523a"}, {"problem": 83, "code": "(fn [& li] (and (not-every? identity li)\n                (reduce #(or %1 %2) false li)))", "user": "59156f0be4b0163c97b36f3d"}, {"problem": 83, "code": "(fn [& args]\n  ((comp not nil?)\n  (and (some true? args)\n       (some false? args))))", "user": "52d9e126e4b09f7907dd13b1"}, {"problem": 83, "code": "#(true? (and (some true? %&) (not-every? true? %&)))", "user": "59074b7ce4b047aa04b19951"}, {"problem": 83, "code": "(fn [& all]\n  (not (nil? (and (some true? all) (some false? all)))))", "user": "5890799be4b00487982d51d6"}, {"problem": 83, "code": "(fn [& bools]\n  (not \n   (or (every? true? bools)\n  \t   (every? false? bools))))", "user": "53350264e4b0656e627bfd73"}, {"problem": 83, "code": "not=", "user": "52ced458e4b07d0d72b27394"}, {"problem": 83, "code": "(fn [& args] (and (not-every? true? args) (not(nil? (some true? args)))))", "user": "58f9fde7e4b0438e51c2cf56"}, {"problem": 83, "code": "not=", "user": "5822b578e4b04b46fc4b0fa4"}, {"problem": 83, "code": "(fn [& args] (and (not-every? true? args) (not-every? false? args)))", "user": "55e01f4ee4b050e68259b406"}, {"problem": 83, "code": "not=", "user": "5916412ee4b09b4ee5954b87"}, {"problem": 83, "code": "(fn [& args]\n  (if (and (some #(= false %) args)\n       (some #(= true %) args))\n  true\n  false\n  ))", "user": "591ac8ece4b09b4ee5954bdd"}, {"problem": 83, "code": "(fn [& args]\n   (let [trues (filter true? args)]\n     (and (< (count trues) (count args)) (> (count trues) 0))))", "user": "591072e0e4b0163c97b36ebc"}, {"problem": 83, "code": "(fn [& args]\n  (and (not (reduce #(and %1 %2) true args))\n       (reduce #(or %1 %2) false args)))", "user": "4f29d9abe4b0d6649770a034"}, {"problem": 83, "code": "#(true? \n  (and\n    (some true? %&)\n    (some false? %&)))", "user": "591cbc30e4b09b4ee5954c08"}, {"problem": 83, "code": "#(true? (and (some true? %&) (some false? %&)))", "user": "52f762ece4b047fd55836fc2"}, {"problem": 83, "code": "not=", "user": "590088bfe4b0438e51c2d026"}, {"problem": 83, "code": "(fn [& args]\n  (let [c (reduce +\n                  (map #(if % 1 0) args))]\n    (and (> c 0) (< c (count args)))))", "user": "59225498e4b09b4ee5954c8c"}, {"problem": 83, "code": "(fn half-truth [& xs]\n    (and (if (some identity xs) true false)\n         (not (every? identity xs)))\n    )", "user": "5921a080e4b09b4ee5954c77"}, {"problem": 83, "code": "(fn [& args]\n   (if\n     (and (some true?\n                args)\n          (not (every? \n                 true?\n                 args)))\n     true\n     false)\n )", "user": "5922a513e4b026ae38521286"}, {"problem": 83, "code": "(fn [& args]\n\n(if (and (some #(= true %) args) (> (count (distinct args)) 1) ) true false)\n)", "user": "59228b00e4b026ae38521281"}, {"problem": 83, "code": "(fn [& xs] \n  (and (boolean (some identity xs))\n   \t   (not-every? identity xs)))", "user": "4db1b3951254ad5b4805fa6f"}, {"problem": 83, "code": "(fn [& bools]\n  (cond\n   (every? true? bools) false\n   (some true? bools) true\n   :else false))", "user": "58ef93ece4b056aecfd47dca"}, {"problem": 83, "code": "(fn [& xis]\n    (true? (and (some true? xis) (some false? xis))))", "user": "591f5124e4b09b4ee5954c45"}, {"problem": 83, "code": "(fn [& bls]\n  (and (not= (count (filter true? bls))\n          \t (count bls))\n       (> (count (filter true? bls)) 0)))", "user": "57614a42e4b0994c1922fb85"}, {"problem": 83, "code": "(fn [& c]\n  (boolean (and (some true? c) (not (every? true? c)))))", "user": "590253e3e4b0438e51c2d055"}, {"problem": 83, "code": "not=", "user": "58bcea23e4b0888cdc949d23"}, {"problem": 83, "code": "(fn [& coll]\n  (if (every? #(= true %) coll)\n    false\n    (if (some #(= true %) coll)\n      true\n      false)))", "user": "5823d3e6e4b051871117beb8"}, {"problem": 83, "code": "not=", "user": "51b20b76e4b02f8f128bb960"}, {"problem": 83, "code": "(fn [& vals] (boolean (and (some true? vals) (some false? vals))))", "user": "4e6fe3a6535d5021c1a89629"}, {"problem": 83, "code": "#(true? (and (some true? %&) (some false? %&)))", "user": "591d9870e4b09b4ee5954c1b"}, {"problem": 83, "code": "(fn foo [& bools]\n    (and (or (some #(= %1 true) bools) false)\n         (not-every? #(= %1 true) bools)))", "user": "58ffaddee4b0438e51c2cffe"}, {"problem": 83, "code": "not=", "user": "592518bfe4b072a2710fce65"}, {"problem": 83, "code": "#(= 2 (count (set %&)))", "user": "59258aa7e4b072a2710fce74"}, {"problem": 83, "code": "(fn [& args]\n   (= 2 (count (into #{} args))))", "user": "557c6ca6e4b05c286339e0c4"}, {"problem": 83, "code": "(fn [& coll]\n  (boolean (and (some identity coll) (some (complement identity) coll))))", "user": "58fb7d7ae4b0438e51c2cf7a"}, {"problem": 83, "code": "(fn [& args]\n  (not (nil? (and \n   (some #(= true %) args)\n   (some #(not= true %) args)\n  )))\n )", "user": "58b0bbc5e4b0ebc645576ce6"}, {"problem": 83, "code": "(fn bools [& args]\n  (cond\n   (and (some true? args) (not-every? true? args)) true\n   :else false))", "user": "5833a6d8e4b089d5ab817ca2"}, {"problem": 83, "code": "(fn [& args]\n   (if (every? true? args)\n     false\n     (reduce #(if (or %1 %2) true false) args)))", "user": "5918db70e4b09b4ee5954bbb"}, {"problem": 83, "code": "(fn half-truth [& args]\n  (if (= #{true} (set args))\n    false\n    ((fn [[f & r]]\n       (if (nil? r)\n         f\n         (or f (recur r)))) args )))", "user": "58db362be4b0a4d5acaab675"}, {"problem": 83, "code": "#(true? \n  (and\n    (some true? %&)\n(some false? %&)))", "user": "59368efbe4b02506e01a297d"}, {"problem": 83, "code": "(fn [& z] (not (nil? (and (some true? z) (some false? z)))))", "user": "5910a43de4b0163c97b36ebf"}, {"problem": 83, "code": "(fn f [& xs] \n  (and (not (every? identity xs)) (reduce #(or %1 %2) false xs)))", "user": "5933b736e4b072a2710fd05d"}, {"problem": 83, "code": "#(and (not (not-any? identity %&)) (not-every? identity %&))\n\n;; #(true? (and (some true? %&) (some false? %&)))", "user": "58d2af83e4b03c36ff7e5907"}, {"problem": 83, "code": "(fn [& args]\n  (if (and (some #(= true %) args) (some #(= false %) args))\n       true\n       false))", "user": "59368ccae4b02506e01a297a"}, {"problem": 83, "code": "not=", "user": "59385840e4b02506e01a29c9"}, {"problem": 83, "code": "(fn [& args]\n  (loop [tmp args counttrue 0]\n    (if (empty? tmp)\n      (and (> counttrue 0) (not= counttrue (count args)))\n      (if (= (first tmp) true)\n        (recur (rest tmp) (inc counttrue))\n        (recur (rest tmp) counttrue)))))", "user": "59368ccae4b02506e01a2979"}, {"problem": 83, "code": "(fn [& args]\n  (loop [tmpa args, truel [], falsel []]\n    (if (empty? tmpa)\n      (if (and (not (empty? truel)) (not (empty? falsel)))\n        true\n        false)\n      (if (true? (first tmpa))\n        (recur (rest tmpa) (conj truel 1) falsel)\n        (recur (rest tmpa) truel (conj falsel 0))))))", "user": "59369515e4b02506e01a297e"}, {"problem": 83, "code": "(fn [& y] (let [x (seq y) any? (complement (partial not-any? true?))] (and (any? x) (not (every? true? x)))))", "user": "59234753e4b0a390037439ef"}, {"problem": 83, "code": "(fn [& args]\n  (boolean\n    (and\n      (not (every? true? args))\n      (some true? args))))", "user": "4e1b36cc535d04ed9115e7fe"}, {"problem": 83, "code": "(fn [& bools]\n  (cond\n   (every? true? bools) false\n   (some true? bools) true\n   :else false))", "user": "57a4f5cae4b0a966079561f0"}, {"problem": 83, "code": "(fn [& coll]\n  (let [trNo (count (filter true? coll))\n        len (count coll)]\n    (cond \n      (= len trNo) false\n      (> trNo 0) true\n      :else false)))", "user": "591a6c9fe4b09b4ee5954bd6"}, {"problem": 83, "code": "#(and (not-every? true? (seq %&)) (not-every? false? (seq %&)))", "user": "5180af54e4b0e3fc13e244e9"}, {"problem": 83, "code": "(fn [& args]\n   (println args)\n   (if (apply = (cons true args))\n     false\n     (= true (some #{true} args))))", "user": "5913fde8e4b0163c97b36f13"}, {"problem": 83, "code": "not=", "user": "4ee897fe535d93acb0a66883"}, {"problem": 83, "code": "(fn polresnica [& bols] (not (apply = bols)))", "user": "584d99c5e4b0b7285a6f4e42"}, {"problem": 83, "code": "(fn [& a] (< 1 (count (frequencies a))))", "user": "586bc870e4b01531a375e964"}, {"problem": 83, "code": "(fn [& rest] (and (not-every? #(= %1 false) rest)\n                  (not-every? #(= %1 true) rest)))", "user": "5931e498e4b072a2710fd024"}, {"problem": 83, "code": "#(< 1 (count (frequencies %&)))", "user": "593edddfe4b069cdc2982bca"}, {"problem": 83, "code": "#(= (set %&) #{true false})", "user": "593f95d8e4b069cdc2982be3"}, {"problem": 83, "code": "(fn [& args]\n  (and (contains? (set args) false)\n       (contains? (set args) true)))", "user": "59251947e4b072a2710fce69"}, {"problem": 83, "code": "(fn some-true? [& cols] (= (set cols) #{true false}))", "user": "592518e8e4b072a2710fce67"}, {"problem": 83, "code": "(fn halfTruth\n  [& rest]\n  (cond\n    (identical? (every? #(identical? %1 true) rest) true) false\n    (identical? (every? #(identical? %1 false) rest) true) false\n    :else true))", "user": "58b18ba0e4b0ebc645576cfa"}, {"problem": 83, "code": "(fn [& bs]\n  (and (not-every? false? bs) (not-every? true? bs)))", "user": "58cd65fae4b03c36ff7e5889"}, {"problem": 83, "code": "(fn [& c] (and (not-every? true? c) (not-every? false? c)))", "user": "59438419e4b060784b3b7929"}, {"problem": 83, "code": "#(true? (and (some true? %&) (some false? %&)))", "user": "593910eae4b02506e01a29f4"}, {"problem": 83, "code": "(fn p83[x & xs]\n  \n  (cond (and (= x true) (some false? xs)) true\n        (and (= x true) (or (= 0 (count xs)) (every? true? xs))) false\n        (and (= x false) (some true? xs)) true\n             :else false))", "user": "59395adfe4b02506e01a29fb"}, {"problem": 83, "code": "#(boolean (and (some true? %&) (some false? %&)))", "user": "585d9558e4b0f14aab7c879c"}, {"problem": 83, "code": "(fn ([x] (if x false true))\n  \n ( [x y] (if (= x y) false true))\n  ([x y z] (if (= x y z) false true))\n  ([x y z a] (if (= x y z a) false true)))\n   \n   \n   \n   \n   \n   ;(fn [x] (if (reduce = (flatten [x])) false true)", "user": "593744abe4b02506e01a299b"}, {"problem": 83, "code": "(fn [& bs]\n  (if (true? (every? identity bs))\n    false\n    (not (nil? (some identity bs)))\n  )\n)", "user": "5943abb6e4b060784b3b792b"}, {"problem": 83, "code": "#(and (not (nil? (some true? %&))) (not (nil? (some false? %&))))", "user": "593dfe60e4b069cdc2982bb1"}, {"problem": 83, "code": "(fn [& s] (= (not (every? true? s)) (some true? s)))", "user": "576186a5e4b0994c1922fb8e"}, {"problem": 83, "code": "not=", "user": "57b413afe4b0fbc9809a278f"}, {"problem": 83, "code": "not=", "user": "5938bae2e4b02506e01a29ea"}, {"problem": 83, "code": "#(and (not-every? true? %&)\n      (not-every? false? %&))", "user": "594880ade4b07ddc2dafadc2"}, {"problem": 83, "code": "(fn [& x]\n  (loop [in x\n         f-token false\n         t-token false]\n    (if (empty? in)\n      (and f-token t-token)\n      (if (true? (first in))\n        (recur (rest in) f-token true)\n        (recur (rest in) true t-token)))))", "user": "594bd637e4b07ddc2dafae41"}, {"problem": 83, "code": "#(true? (and (some true? %&) (some false? %&)))", "user": "55216aa5e4b0882d96d09192"}, {"problem": 83, "code": "(fn [& args]\n     (and (contains? (set args) false)\n          (contains? (set args) true)))", "user": "592518cde4b072a2710fce66"}, {"problem": 83, "code": "(fn [& args]\n  (boolean (and (some true? args)\n       (some false? args)))\n  )", "user": "594263cbe4b060784b3b790a"}, {"problem": 83, "code": "(fn [& x]\n  (let [t (count (filter #(true? %) x))\n        f (- (count x) t)]\n    (and\n      (> t 0)\n      (> f 0))))", "user": "59503c5de4b066ee0a44ae8e"}, {"problem": 83, "code": "#(true? \n  (and\n    (some true? %&)\n    (some false? %&)))", "user": "5950f0bfe4b066ee0a44ae9f"}, {"problem": 83, "code": "(fn [& bools] (= 2 (count (frequencies bools))))", "user": "5935b010e4b04f87174def55"}, {"problem": 83, "code": "(fn [& args] \n    \n    (let [t (if (nil? (get (frequencies args) true)) 0 (get (frequencies args) true))\n          f (if (nil? (get (frequencies args) false)) 0 (get (frequencies args) false))\n          ]\n      (cond\n        (and (>= t 1) (>= f 1)) true\n        :else false\n        )\n     )\n  )", "user": "5948adffe4b07ddc2dafadc6"}, {"problem": 83, "code": "(fn half-truth [& bools]\n  (if\n    (< (count bools) 2)\n    (let [x1 (first bools)] (not (Boolean. x1)))\n    (let [[x1 x2 & x3] bools]\n      (or (not (= x1 x2)) (apply half-truth x3))\n      )\n    )\n  )", "user": "5368a275e4b0243289761e8f"}, {"problem": 83, "code": "(fn [& args]\n    (true? (and\n             (some true? args)\n             ((complement not-any?) false? args))))", "user": "594c0bd7e4b07ddc2dafae56"}, {"problem": 83, "code": "(fn [& args] (= 2 (count (set args))))", "user": "56b2652ae4b0982f16b37e04"}, {"problem": 83, "code": "#(true? (and (some true? %&) (some false? %&)))", "user": "5956c6dae4b066ee0a44af61"}, {"problem": 83, "code": "(fn [& a] (and (not (not-any? identity a)) (not-every? identity a)))", "user": "5958cef6e4b066ee0a44af94"}, {"problem": 83, "code": "(fn halftrue [& xs]\n  (boolean (and (some true? xs) (some false? xs))))", "user": "5953bdb6e4b066ee0a44aeed"}, {"problem": 83, "code": "(fn [& bools]\n  (and (boolean (some true? bools)) (not (every? true? bools))))", "user": "57262710e4b0c5bde472c120"}, {"problem": 83, "code": "(fn [& args] (= 2 (count (set args))))", "user": "59473563e4b07ddc2dafad97"}, {"problem": 83, "code": "(fn xor\n  [& xs] \n  (let [lst xs\n        n (count lst)]\n    (loop [i 0 col xs]\n     (if (zero? (count col))\n      (if (and (> i 0) (< i n)) true false)\n      (if (first col)\n        (recur (inc i) (rest col))\n        (recur i (rest col)))))))", "user": "59390a35e4b02506e01a29f3"}, {"problem": 83, "code": "not=", "user": "595b864ee4b066ee0a44afdc"}, {"problem": 83, "code": "not=", "user": "594cb88be4b07ddc2dafae6e"}, {"problem": 83, "code": "not=", "user": "592519cfe4b072a2710fce6b"}, {"problem": 83, "code": "(fn [& args]\n   (if (= (count (filter false? args)) 0)\n     false\n     (if (= (count (filter false? args)) (count args)) false true)\n     )\n   )", "user": "59551e04e4b066ee0a44af20"}, {"problem": 83, "code": "(fn [& nums] (true? (and (some true? nums) (not (every? true? nums)))))", "user": "59346d29e4b072a2710fd077"}, {"problem": 83, "code": "not=", "user": "592334c7e4b0a390037439ee"}, {"problem": 83, "code": "not=", "user": "58cbdc3be4b03c36ff7e5856"}, {"problem": 83, "code": "not=", "user": "58cf8f97e4b03c36ff7e58b7"}, {"problem": 83, "code": "(fn [& xs]\n   (boolean\n    (and (some identity xs)\n         (not (apply = xs)))))", "user": "58db3c5ae4b0a4d5acaab677"}, {"problem": 83, "code": "(fn [& s] (boolean (and (some not s) (some identity s))))", "user": "59419bdfe4b060784b3b78f7"}, {"problem": 83, "code": "(fn [& args] (boolean (and (some identity args) (some (comp identity not) args))))", "user": "58ee84e5e4b056aecfd47dab"}, {"problem": 83, "code": "(fn [& p] (if (and (some identity p) (not (every? identity p))) true false))", "user": "58fc52cee4b0438e51c2cf95"}, {"problem": 83, "code": "not=", "user": "594bc16be4b07ddc2dafae39"}, {"problem": 83, "code": "(fn [& a] (if (and (some identity a) (some not a)) true false))", "user": "59638af5e4b066ee0a44b0cc"}, {"problem": 83, "code": "(fn [& xs] (if (every? true? xs) false (boolean (some true? xs))))", "user": "595d224de4b066ee0a44b016"}, {"problem": 83, "code": "(fn [& xs]\n  (and (not-every? true? xs)\n       (not-every? false? xs)))", "user": "595fd721e4b066ee0a44b06e"}, {"problem": 83, "code": "(fn magic\n  [& x]\n  (let [[a b] (reduce (fn lol\n                        [[temTrue tdTrue] y]\n                        (if (= y true)\n                          [true tdTrue]\n                          [temTrue false])) [false true] x)]\n    (if (or (= a false) (= b true))\n      false\n      true)))", "user": "595bc925e4b066ee0a44afe2"}, {"problem": 83, "code": "(fn [& bool] (true? (and (some true? bool) (some false? bool))))", "user": "5965eb8de4b069c0a1a19796"}, {"problem": 83, "code": "(fn [& args]\n    (cond\n      (= [true] (distinct args)) false\n      (some true? args) true\n      :else false))", "user": "595bbab7e4b066ee0a44afe0"}, {"problem": 83, "code": "(fn [& x] (or (and (some true? x) (some false? x)) false))", "user": "503a8959e4b07a1917cc34d6"}, {"problem": 83, "code": "#(loop [x %& o false a true]\n   (println (str \"a \" a))\n   (println (str \"o \" o))\n   (if (empty? x)\n     (and o (not a))\n     (recur (rest x) (or o (first x)) (and a (first x)))))", "user": "5964c614e4b069c0a1a19770"}, {"problem": 83, "code": "(fn\n  [& args]\n  (let [x (into [] args)]\n    (if (some false? x)\n      (if (= nil (some true? x))\n        false\n        true)\n      false)))", "user": "55842bd7e4b05c286339e11c"}, {"problem": 83, "code": "not=", "user": "596aaeefe4b069c0a1a19808"}, {"problem": 83, "code": "(fn[& args](and ((complement every?) true? args) ((complement every?) false? args)))", "user": "59692530e4b069c0a1a197e4"}, {"problem": 83, "code": "(fn [& bools] (= 2 (.size (set bools))))", "user": "54a96a15e4b09f271ff37cad"}, {"problem": 83, "code": "(fn \n  [b & bs]\n   (not (not (some (fn [e] (not (= b e))) bs))))", "user": "5455a6d3e4b0e397800069e2"}, {"problem": 83, "code": "#(true? \n  (and\n    (some true? %&)\n    (some false? %&)))", "user": "57ab41dde4b0b8559636fc79"}, {"problem": 83, "code": "#(true? \n  (and \n   (some true? %&) \n   (some false? %&)))", "user": "590b8607e4b047aa04b199db"}, {"problem": 83, "code": "(fn [& args] (and (= true (reduce #(or %1 %2) false args)) (= false (reduce #(and %1 %2) true args))))", "user": "596caee3e4b069c0a1a19837"}, {"problem": 83, "code": "(fn [& args]\n  (if (empty? (filter false? args))\n   false\n  (if (empty? (filter true? args))\n    false\n    true)))", "user": "59636ec9e4b066ee0a44b0c8"}, {"problem": 83, "code": "(fn half-truth\n  [& args]\n  (if (= true (reduce (fn [a b]\n                        (and a b))\n                      args))\n    false\n    (reduce (fn [a b]\n              (or a b))\n            args)))", "user": "59636cc2e4b066ee0a44b0c7"}, {"problem": 83, "code": "#(true? \n  (and\n    (some true? %&)\n    (some false? %&)))", "user": "55ec04c4e4b0121d4835fdc1"}, {"problem": 83, "code": "(fn [& c]\n  (and (not-every? true? c)\n       (= true (some true? c))))", "user": "5398d042e4b0b51d73faaf00"}, {"problem": 83, "code": "(fn [& args] (and (boolean (some identity args)) (not (every? identity args))))", "user": "5978b4c9e4b01722bebd4d13"}, {"problem": 83, "code": "not=", "user": "5964f9b0e4b069c0a1a19778"}, {"problem": 83, "code": "(fn sometrue [& args] (if (= (some false? args) (some true? args)) true false))", "user": "58866b4fe4b0f1effa3b76d4"}, {"problem": 83, "code": "(fn [& args] (= (into #{} args) #{true false}))", "user": "4fb1d7ace4b081705acca281"}, {"problem": 83, "code": "(fn [& tvs]\n  (if (every? true? tvs)\n    false\n    (if(not= (some true? tvs) nil)\n      true\n      false)))", "user": "597b88bae4b02382a38ad1fc"}, {"problem": 83, "code": "(fn [& args]\n  (cond\n \t(= nil (some true? args)) false\n    (and (= true (some true? args)) (= true (some false? args))) true\n      :else false))", "user": "5935151ee4b072a2710fd084"}, {"problem": 83, "code": "(fn [& bools] (and (true? (some true? bools)) (not-every? true? bools)))", "user": "5978c844e4b01722bebd4d18"}, {"problem": 83, "code": "not=", "user": "597dcb0ce4b0dbe32238d0a2"}, {"problem": 83, "code": "(fn [& xs] \n  (if (and (some true? xs)\n           (some false? xs))\n    true\n    false))", "user": "55478ce2e4b0a04f7929954e"}, {"problem": 83, "code": "(fn [& args] (and (not-every? false? args) (not-every? true? args)))", "user": "59804b60e4b021a7a535fdcf"}, {"problem": 83, "code": "#(= 2 (count (set %&)))", "user": "596f6683e4b069c0a1a19877"}, {"problem": 83, "code": "(fn sometrue\n  ([] false)\n  ([x] false)\n  ([x y] (or (and x (not y))\n             (and y (not x))))\n  ([x y & rest] (or (and x (not y))\n                    (and y (not x))\n                    (apply sometrue rest))))", "user": "597a4277e4b02382a38ad1e2"}, {"problem": 83, "code": "(fn [& bools]\n  (loop [bools bools seen-t false seen-f false]\n    (cond (and seen-t seen-f) true\n          (empty? bools) false\n          :else (recur (rest bools)\n                       (or seen-t (= true (first bools)))\n                       (or seen-f (= false (first bools)))))))", "user": "5980f91ae4b021a7a535fddd"}, {"problem": 83, "code": "(fn [& more]\n  (if (= 1 (count more))\n    false\n    (and\n     ((complement not-any?) true? more)\n     (not (every? true? more))\n     )))", "user": "51dafedee4b09f6bc204eee2"}, {"problem": 83, "code": "#(= #{true false} (set %&))", "user": "597f8984e4b0dbe32238d0bf"}, {"problem": 83, "code": "(fn [& b]\n (and (boolean (some #{true} b)) (not (every? #{true} b))))", "user": "5926c254e4b072a2710fceb8"}, {"problem": 83, "code": "(fn [& tutti] \n  (= (set tutti) #{true false}))", "user": "5054d243e4b0b1b9d1860eb5"}, {"problem": 83, "code": "(fn [& bools]\n  (let [ands (every? identity bools)\n        ors (some identity bools)]\n    (boolean (and ors (not ands)))))", "user": "58fc92c5e4b0438e51c2cf9a"}, {"problem": 83, "code": "(fn [& args] (> (count (partition-by identity args)) 1))", "user": "598ad666e4b02b9968b84ce1"}, {"problem": 83, "code": "(fn [& bools]\n  \n\n  \n  (if (and (some #(if % true false) bools) (some #(if % false true) bools))\n    \ttrue\n    \tfalse)\n  \n )", "user": "598085e6e4b021a7a535fdd3"}, {"problem": 83, "code": "(fn sk-half-true [& l]\n  (if (and (some true? l) (some false? l))\n    true\n    false))", "user": "5884f377e4b0f1effa3b76a8"}, {"problem": 83, "code": "(fn partial-truth? [& bool-sqn]\n  (if (and (some #(= true %) bool-sqn) (some #(= false %) bool-sqn))\n    true\n    false))", "user": "569f99cce4b0542e1f8d1497"}, {"problem": 83, "code": "(fn [& params] (and (not (reduce #(and %1 %2) params))\n                    (reduce #(or %1 %2) params)))", "user": "598dc40ce4b02b9968b84d2c"}, {"problem": 83, "code": "(fn [& args]\n  (and (not (= nil (some #(= true %) args))) (not (= nil (some #(= false %) args)))))", "user": "5989ee61e4b021a7a535fed7"}, {"problem": 83, "code": "(fn [& m] (let [coll (into [] m)] \n            (cond (every? true? coll) false\n                  (some true? coll) true\n                  :else false)))", "user": "593ab583e4b069cdc2982b57"}, {"problem": 83, "code": "#(let [uniques (set %&)] (and (= 2 (count uniques)) (contains? uniques true)))", "user": "5954eef0e4b066ee0a44af17"}, {"problem": 83, "code": "(fn [& args] (let [ v (and (some true? args) (not (every? true? args)))]\n\t(if (nil? v)\n\t\tfalse\n\t\tv)))", "user": "598af379e4b02b9968b84ce6"}, {"problem": 83, "code": "#(boolean (and (some true?  %&) (some false? %&)))", "user": "50aa777fe4b056ee01935866"}, {"problem": 83, "code": "(fn foo([t1 & more](if-not (empty? (for [x (cons t1 (list* more)) y (cons t1 (list* more)) :when (true? x) :when (false? y)] [x y]))true false))([t1] false))", "user": "598d0dc3e4b02b9968b84d18"}, {"problem": 83, "code": "(fn true-or-false [x & y] (if (empty? y)\n                              false       \n                              (if (nil? (first (for [y1 y :when (not= x y1)] true)))\n                                false\n                                     (first (for [y1 y :when (not= x y1)] true)))         \n                                            ))", "user": "598d22b1e4b02b9968b84d1a"}, {"problem": 83, "code": "(fn [& x] (if(and (not (every? true? x)) (not (every? false? x))) true false))", "user": "5971763fe4b01722bebd4c72"}, {"problem": 83, "code": "(fn [& args]\n  (and (not (reduce #(and %1 %2) args))\n       (reduce #(or %1 %2) args)))", "user": "598ab445e4b02b9968b84ce0"}, {"problem": 83, "code": "(fn [& bools]\n  (and\n    (= (some true? bools) true)\n   \t(= (some false? bools) true)))", "user": "59971e2de4b07157cc8daacc"}, {"problem": 83, "code": "(fn[ & args]\n  (and (not (nil? (some #(= true %) args)))\n       (not (every? #(= true %) args))))", "user": "52faf67ce4b047fd55837005"}, {"problem": 83, "code": "#(true? (and (not-every? identity %&) (some identity %&)))", "user": "5990fcb9e4b0866487ed0d5b"}, {"problem": 83, "code": "not=", "user": "5991d9cbe4b0866487ed0d69"}, {"problem": 83, "code": "#(and (or (some identity %&) false) (not (every? identity %&)))", "user": "5960a1a6e4b066ee0a44b08e"}, {"problem": 83, "code": "(fn   [& args]\n  (let [has-element (fn [elem coll]\n                      (->> args\n                           (filter #(= elem %))\n                           (count)\n                           (< 0)))]\n  (and (has-element true args)\n       (has-element false args))))", "user": "59971dcbe4b07157cc8daacb"}, {"problem": 83, "code": "#(> (count (into #{} %&)) 1)", "user": "598c5a0ee4b02b9968b84d03"}, {"problem": 83, "code": "#(= 2 (count (keys (group-by true? %&))))", "user": "596539dce4b069c0a1a19783"}, {"problem": 83, "code": "(fn half-truth [& coll]\n  (loop [t 0 f 0 remaining coll]\n    (if (and (pos? t) (pos? f))\n        true\n        (if (seq remaining)\n            (if (first remaining)\n                (recur (inc t) f (rest remaining))\n                (recur t (inc f) (rest remaining)))\n            false))))", "user": "597f8c93e4b0dbe32238d0c1"}, {"problem": 83, "code": "not=", "user": "59a24c92e4b066c664927d20"}, {"problem": 83, "code": "(fn \n  [& args] \n  (let \n    [elems (count (apply distinct (vector args)))] \n    (if (= elems 2) \n      true\n      false)))", "user": "59874ff6e4b021a7a535fea1"}, {"problem": 83, "code": "(fn [& bools] (boolean (and (not (every? identity bools)) (some identity bools))))", "user": "59032c0fe4b022d14a2aaf9f"}, {"problem": 83, "code": "(fn [& b] (and (or b) (> (count (set b)) 1)))", "user": "5989e080e4b021a7a535fed6"}, {"problem": 83, "code": "(fn\n  [& xs]\n  (or (and (some true? xs) (some false? xs)) false))", "user": "59a512b7e4b066c664927d5e"}, {"problem": 83, "code": "(fn half-trueth [& a]\n   (let* [tf (partition-by identity a)\n          c (count tf)]\n     (print a)\n     (cond (= c 1) false\n           :else true)))", "user": "59a39440e4b066c664927d40"}, {"problem": 83, "code": "(fn [& xs] (= 2 (count (into #{} xs))))", "user": "56fa2905e4b07572ad1a88be"}, {"problem": 83, "code": "#(= true (some true? %&) (not-every? true? %&))", "user": "55b28b57e4b01b9910ae296c"}, {"problem": 83, "code": "(fn [& args] \n  (and (not-every? true? args) (not-every? false? args)))", "user": "59a72effe4b066c664927d94"}, {"problem": 83, "code": "; #(= 2 (count (into #{} %&)))\n(comp (partial = 2) count (partial into #{}) list)", "user": "576c2ecae4b07c67f59d1fbb"}, {"problem": 83, "code": "(fn half-truth [& bools]\n  (and (not-every? true? bools) (not-every? false? bools))\n)", "user": "5991d2fae4b0866487ed0d68"}, {"problem": 83, "code": "not=", "user": "57bffed6e4b05aa3c4741c89"}, {"problem": 83, "code": "(fn xor\n  [& args]\n  (and\n   (boolean (some identity args))\n   (not (every? identity args))))", "user": "586b93eae4b01531a375e95b"}, {"problem": 83, "code": "(fn\n    [& args]\n    (and\n      (not (nil? (some true? args)))\n      ((comp not (partial every? true?)) args)))", "user": "59a90b2ae4b0bcf4e9a43aff"}, {"problem": 83, "code": "(fn [& bools]\r\n(and (not (every? false? bools))\r\n     (not (every? true? bools)))\r\n)", "user": "56f514cee4b046a417f92068"}, {"problem": 83, "code": "#(true? (and (some true? %&) (some not %&)))", "user": "596d630ae4b069c0a1a19846"}, {"problem": 83, "code": "(fn [& args] (if (and (contains? (into #{} args) false) (contains? (into #{} args) true)) true false))", "user": "59afb004e4b0e1f4e384c8bc"}, {"problem": 83, "code": "(fn [& args]\n  (not\n   (or\n    (every? false? args)\n    (every? true? args))))", "user": "5938bca5e4b02506e01a29eb"}, {"problem": 83, "code": "#(and (reduce (fn [a b] (if a true b)) %&) (not (reduce (fn [a b] (if b true false)) %&)))", "user": "59a0262ee4b0871e7608b82d"}, {"problem": 83, "code": "(fn [& bools]\n  (and\n   (boolean (some true? bools))\n   (not (every? true? bools))))", "user": "59ad8695e4b0e1f4e384c887"}, {"problem": 83, "code": "(fn [& more]\n    (= 2 \n       (count (partition-by identity (sort more)))))", "user": "59089229e4b047aa04b1997c"}, {"problem": 83, "code": "(fn [& b]\n  (not= \n    nil\n    (and\n      (some #(= true %1) b)\n      (some #(= false %1) b))\n    ))", "user": "598229d6e4b021a7a535fdfb"}, {"problem": 83, "code": "#(-> %& set count (= 2))", "user": "59b1c2eae4b0e1f4e384c8ec"}, {"problem": 83, "code": "not=", "user": "58ebd10de4b056aecfd47d49"}, {"problem": 83, "code": "(fn [& xs]\n   (> (count (group-by true? xs)) 1))", "user": "59ac0965e4b08cbb53654da6"}, {"problem": 83, "code": "(fn\n    [& bools]\n    (loop [seen-true false seen-false false booleans bools]\n        (if (empty? booleans)\n            (and seen-true seen-false)\n            (condp = (first booleans)\n                true (recur true seen-false (rest booleans))\n                false (recur seen-true true (rest booleans))))))", "user": "59b62f8de4b05c620303ca1f"}, {"problem": 83, "code": "(fn [& args]\n  (clojure.set/subset? #{true false} (into #{} args)))", "user": "571543bbe4b07c98581c3ad4"}, {"problem": 83, "code": "not=", "user": "59a75536e4b0bcf4e9a43ad9"}, {"problem": 83, "code": "not=", "user": "59adec09e4b0e1f4e384c897"}, {"problem": 83, "code": "not=", "user": "597fa3fbe4b021a7a535fdbf"}, {"problem": 83, "code": "(fn [& args]\n        (and \n         (or (some identity args) false)\n         (not (every? identity args))))", "user": "57e6f90de4b0bfb2137f5af6"}, {"problem": 83, "code": "(fn [& bools] (and (not (every? true? bools))\n                   (not (every? false? bools))\n              )\n)", "user": "599d49a7e4b0871e7608b7f4"}, {"problem": 83, "code": "#(> (count (distinct %&)) 1)", "user": "59b554cee4b05c620303ca0f"}, {"problem": 83, "code": "#(if (= (count(for [x %& :when (true? x)] x)) (count %&))\n        false\n        (not(not(first(for [x %& :when (true? x)] x)))))", "user": "59bac5c9e4b0a024fb6ae3ed"}, {"problem": 83, "code": "(fn [& args]\n  (true?\n    (and (some true? args)\n         (not (every? true? args))\n)))", "user": "5954cea2e4b066ee0a44af0a"}, {"problem": 83, "code": "not=", "user": "597768d0e4b01722bebd4cee"}, {"problem": 83, "code": "(fn xor\n  [& args]\n  (true? (and (not-every? identity args) (some identity args))))", "user": "59be62d5e4b0a024fb6ae435"}, {"problem": 83, "code": "#(not (or (every? true? %&) (every? false? %&)))", "user": "50928084e4b097f48cc3856c"}, {"problem": 83, "code": "#(cond\n  (every? true? %&) false\n  (some true? %&) true\n  (every? false? %&) false\n  \n  \n)", "user": "54c98ac0e4b045293a27f679"}, {"problem": 83, "code": "#(= #{true false} (set %&))", "user": "54058af3e4b0addc1aec6669"}, {"problem": 83, "code": "#(true? \n    (and\n       (some true? %&)\n       (some false? %&)))", "user": "5254b45fe4b0541d1855b9a0"}, {"problem": 83, "code": "not=", "user": "59358f74e4b04f87174def52"}, {"problem": 83, "code": "(fn [& x] (and (if (nil? (some #(= true %) x)) false true) (not (every? #(= true %) x))))", "user": "59cf6fbce4b0ef0a1e9b5b6c"}, {"problem": 83, "code": "(fn [a & args] (let [\n                     all (cons a args)\n                     t (filter true? all)] \n                         (if \n                           (= (count all) (count t)) \n                           false \n                           (if \n                             (> (count t) 0) \n                             true \n                             false\n                             )\n                           )\n                         )\n  )", "user": "59c7c2cde4b0a024fb6ae54b"}, {"problem": 83, "code": "(fn half-truth [& vals]\n  (if (some true? vals)\n    (not (every? true? vals))\n    false))", "user": "572010a4e4b0c5bde472c08c"}, {"problem": 83, "code": "#(true?\n  (and \n   (some true? %&)\n   (some false? %&)))", "user": "595a3b41e4b066ee0a44afb7"}, {"problem": 83, "code": "(fn [& args] \n  (and (not (every? identity args)) \n       (not= nil (some identity args))\n   )\n  )", "user": "594a7ed1e4b07ddc2dafae02"}, {"problem": 83, "code": "(fn [& bools] (= (set bools) #{true false} ))", "user": "51f38193e4b0fca5e8b48226"}, {"problem": 83, "code": "(fn [& x]\n  (let [s (set x)]\n     (and (contains? s true) (contains? s false))\n    )\n  )", "user": "55fd0d19e4b0f488688e067a"}, {"problem": 83, "code": "(fn [& args]\n  (boolean \n   (and\n    (some identity args)\n   \t(not-every? identity args))))", "user": "57dfab73e4b0bd073c202468"}, {"problem": 83, "code": ";#(reduce (fn[a b] (if (not= a b) true false)) ))\n;#(= (count (set %)) 2)\n\n(fn[& args]\n  (= (count (set args)) 2))", "user": "59c77511e4b0a024fb6ae545"}, {"problem": 83, "code": "not=", "user": "57fe7d7ce4b0d3187e9009d0"}, {"problem": 83, "code": "(fn [& coll]\n  (let [xs (group-by true? coll)]\n      (and (contains? xs true) (contains? xs false))))", "user": "579f89d5e4b05302be0b72ff"}, {"problem": 83, "code": "(fn [& coll]  \n  (and (not-every? false? coll)\n       (not-every? true? coll)))", "user": "59d9186be4b0ef0a1e9b5c50"}, {"problem": 83, "code": "#(or (and (some true? %&) (some false? %&)) false)", "user": "59a31c55e4b066c664927d34"}, {"problem": 83, "code": "#(let \n  [args %&] \n  (let [result  (and (not (reduce \n                       (fn [a b] (and a b)) true args)) \n                     (some true? args))]\n  (if (or (false? result) (nil? result)) false true)))", "user": "59ddae03e4b01968742fed65"}, {"problem": 83, "code": "#(= #{true false} (set %&))", "user": "59cf4013e4b0ef0a1e9b5b68"}, {"problem": 83, "code": "(fn [& lst]\n  (if \n    (or(every? true? lst)(every? false? lst)) false \n    true))", "user": "59dd387ae4b0a0ac046f2501"}, {"problem": 83, "code": "(fn [& bs]\n  (and\n   (not (every? true? bs))\n   (boolean (some true? bs))))", "user": "559057c4e4b027778923766e"}, {"problem": 83, "code": "(fn half-truth [& args] \n  (if (every? true? args)\n    false\n    (if (every? false? args)\n      false\n      true)))", "user": "59e0111ae4b08badc2a0c4e4"}, {"problem": 83, "code": "(fn [& bool] (not (or (every? (fn [a] (= true a)) bool) (every? (fn [a] (= false a)) bool))))", "user": "59e18b9be4b08badc2a0c50f"}, {"problem": 83, "code": "(fn [& lst]\n  (if (some #(= true %) (seq lst))\n    (if (some #(= false %) (seq lst))\n      true\n      false)\n    false))", "user": "59e12c94e4b08badc2a0c509"}, {"problem": 83, "code": "(fn [& args] (and (boolean (some true? args)) (not-every? true? args)))", "user": "59dd38a8e4b0a0ac046f2503"}, {"problem": 83, "code": "(fn [ & args] (and (not (every? true? args)) (not (every? false? args))))", "user": "5839f079e4b089d5ab817d48"}, {"problem": 83, "code": "(fn algo \n  [& lst]\n  (if (every? true? lst)\n    false\n    (if (some true? lst)\n      true\n      false\n      )\n    )\n  )", "user": "59e56c75e4b08badc2a0c556"}, {"problem": 83, "code": "(fn [& args]\n  (let [listaFiltrada (filter true? args)];lista que contendra solo true :v\n    (if (and (> (count listaFiltrada) 0) (not= (count listaFiltrada) (count args)))\n      true;regresa true\n      false;regresa false\n      )))", "user": "59e63a2ce4b08badc2a0c569"}, {"problem": 83, "code": "(fn [& coll]\n    (cond\n      (= (set coll) #{true false}) true\n      :else false))", "user": "59e0f38ae4b08badc2a0c500"}, {"problem": 83, "code": "(fn [& x]\n  (if (and (contains? (set x) true) (contains? (set x) false))\n    true\n    false)\n  )", "user": "59d75e36e4b0ef0a1e9b5c32"}, {"problem": 83, "code": "(fn [& ps] (and (not-every? true? ps) (not-every? false? ps)))", "user": "58cfbd7ae4b03c36ff7e58ba"}, {"problem": 83, "code": "(fn     [& args]\n  (loop\n    [trues      0\n     falses     0\n     lst    args\n     bul        false]\n    (if (zero? (count lst))\n      (if (and (< 0  trues)(< 0 falses))\n        true\n        false)\n      (recur (if (true? (first lst))\n               (inc trues)\n               trues)\n             (if (false? (first lst))\n               (inc falses)\n               falses)\n             (rest lst)\n             (if (and (< 0  trues)(< 0 falses))\n               true\n               false)))))", "user": "59deba46e4b01968742fed7f"}, {"problem": 83, "code": "not=", "user": "59e62655e4b08badc2a0c568"}, {"problem": 83, "code": "#(true? \n  (and\n    (some true? %&)\n(some false? %&)))", "user": "59e55cc8e4b08badc2a0c555"}, {"problem": 83, "code": "(fn f\n  [& args]\n  (let [lst (filter #(= % true) args)]\n    (if (empty? lst)\n      false\n      (if (= (count args) (count lst))\n        false\n        true))))", "user": "59e778aae4b0249b72820716"}, {"problem": 83, "code": "(fn tbb1 [& args]\n  (loop [tn 0 lst args]\n    (cond\n      (empty? lst) (if (= tn (count args)) false (if (> tn 0) true false))\n      (= (first lst) true) (recur (inc tn) (rest lst))\n      :else (recur tn (rest lst)))\n    ))", "user": "59dd387be4b0a0ac046f2502"}, {"problem": 83, "code": "(fn halfTruth\n  [& n]\n  (not (or (every? #(= true %) n)\n              (every? #(= false %) n))))", "user": "59dd3930e4b0a0ac046f2504"}, {"problem": 83, "code": "(fn [& args]\n  (if (and\n       (some true? args)\n       (some false? args))\n    true false))", "user": "572de985e4b0cd1946bd0f7c"}, {"problem": 83, "code": "(fn half-truth\n  [& args]\n  (let [n (count args)]\n    (if (= n (count (remove true? args))) false (if (empty? (remove true? args)) false true))))", "user": "59e8fef3e4b0249b72820743"}, {"problem": 83, "code": "not=", "user": "59e14ee3e4b08badc2a0c50c"}, {"problem": 83, "code": "(fn booleanos\n  [& args]\n  (= (set args) #{true false}))", "user": "59e4e3cbe4b08badc2a0c54a"}, {"problem": 83, "code": "not=", "user": "59e9f03be4b0249b72820752"}, {"problem": 83, "code": "(fn [& boleans]\n  (cond\n    (every? true? boleans)\n    false\n    (some true? boleans)\n    true\n    :else false))", "user": "58a34442e4b02bd94d917ef2"}, {"problem": 83, "code": "not=", "user": "59ea287ee4b0249b72820760"}, {"problem": 83, "code": "not=", "user": "59e95cafe4b0249b7282074b"}, {"problem": 83, "code": "(fn [& args]\n   (if (>= (count (partition-by true? args))2) true false))", "user": "59dfd369e4b08badc2a0c4dd"}, {"problem": 83, "code": "(fn half-truth \n  [& bool]\n  (let [res (and (some true? bool) (some false? bool))]\n    (true? res)))", "user": "59e68254e4b0249b728206fc"}, {"problem": 83, "code": "not=", "user": "59ea85e4e4b0249b72820767"}, {"problem": 83, "code": "not=", "user": "5957cc41e4b066ee0a44af76"}, {"problem": 83, "code": "(fn [& a] \n (= #{true false} (set a)))", "user": "59ac559ee4b00adcf69795d2"}, {"problem": 83, "code": "(fn some-truths [& args]\n  (not (apply = args)))", "user": "57ca95f2e4b05aa3c4741d3b"}, {"problem": 83, "code": "not=", "user": "59ed01ede4b0249b7282079a"}, {"problem": 83, "code": "(fn [& args]\n  (if (or \n       \t(= (count (filter true? args)) (count args)) \n       \t(= (count (filter false? args)) (count args))\n       ) \n    false \n    true\n  )\n)", "user": "593c1e3be4b069cdc2982b86"}, {"problem": 83, "code": "(fn [& booleans]\n  (and \n       (not-every? identity booleans)\n       (or (some identity booleans) false)))", "user": "5984e7dee4b021a7a535fe43"}, {"problem": 83, "code": "(fn truther [& x]\n  (if (and (some true? x)\n           (some false? x))\n      true\n      false))", "user": "59e0f839e4b08badc2a0c502"}, {"problem": 83, "code": "(fn [& args] (= (count (set args)) 2))", "user": "592edaf5e4b072a2710fcfaf"}, {"problem": 83, "code": "(fn [& a] (= 2 (count (distinct a))))", "user": "59e8bb43e4b0249b72820735"}, {"problem": 83, "code": "(fn [& xs]\n  ((comp not nil? #_(\"have to `cast' nil->false\")) (and (some true? xs) (some false? xs))))", "user": "59ee6801e4b0966464fe6a1f"}, {"problem": 83, "code": "not=", "user": "55a24698e4b0acc240e31523"}, {"problem": 83, "code": "#(let [ts (count (filter true? %&))] (< 0 ts (count %&)))", "user": "59c8ffe6e4b0a024fb6ae56c"}, {"problem": 83, "code": "(fn [& coll] \n  (let [co (set coll)])\n   (and (.contains coll true) (.contains coll false)))", "user": "58182480e4b0c0e9c07b83a7"}, {"problem": 83, "code": "not=", "user": "59ea0944e4b0249b72820758"}, {"problem": 83, "code": "(fn [& bs]\n  (boolean\n    (and (some identity bs)\n         (not (every? identity bs)))))", "user": "59eb63e3e4b0249b7282077c"}, {"problem": 83, "code": "(fn some-true? [& cols]\n  (= (set cols) #{true false}))", "user": "59e8cd8be4b0249b72820739"}, {"problem": 83, "code": "(fn [& bools] (true? (and (some true? bools) (some false? bools))))", "user": "59c76402e4b0a024fb6ae542"}, {"problem": 83, "code": "(fn [& xs]\n  (if\n  \t(and (not (every? identity xs))\n    \t   (some identity xs))\n    true\n    false))", "user": "501948b3e4b0b6630b101db5"}, {"problem": 83, "code": "(fn [& bools]\n  (let [groups (group-by true? bools)]        \n    (and (contains? groups true) (contains? groups false))))", "user": "566e87cfe4b0a866af6896dc"}, {"problem": 83, "code": "#(boolean (and (some true? %&) (not-every? true? %&)))", "user": "59ef6cfae4b0966464fe6a32"}, {"problem": 83, "code": "(fn [& t] (and (not-every? true? t) (not-every? false? t)))\n; dan7es's: not=", "user": "59f043d0e4b0966464fe6a3d"}, {"problem": 83, "code": "(fn half-true? [& xs]\n  (and\n   (not-every? true? xs)\n   (not-every? false? xs)))", "user": "59f78b49e4b0ca45a743a30e"}, {"problem": 83, "code": "(fn a [& aa] \n  (or \n    (and \n     (some true? aa) \n     (not (every? true? aa)))\n    'false))", "user": "5797d3d2e4b039eba2ecb106"}, {"problem": 83, "code": "#(and (not (every? (partial = true) %&))\n      (not-every? (partial = false) %&))", "user": "59f192e0e4b0966464fe6a5e"}, {"problem": 83, "code": "(fn [& in]\n  (let [has-true  (some true? in)\n        has-false (some false? in)]\n    (not (not (and has-true has-false)))))", "user": "59fb1ca3e4b0ca45a743a376"}, {"problem": 83, "code": "(fn [& xs]\n (if (every? false? xs)\n  false\n  (if (every? true? xs)\n   false\n   true)))", "user": "57eaf869e4b0bfb2137f5b56"}, {"problem": 83, "code": "#(= (set %&) #{true false})", "user": "59f91b99e4b0ca45a743a33a"}, {"problem": 83, "code": "(fn [& x] (and (not (reduce (fn [a b] (and a b)) x)) \n                      (reduce (fn [a b] (or a b)) x)))", "user": "59fea630e4b01bb0ae8afd10"}, {"problem": 83, "code": "(fn [& x] (if (or (every? false? x) (every? true? x)) false true))", "user": "5628f33ce4b00e49c7cb47f3"}, {"problem": 83, "code": "(fn half-truth [& args]\n   (boolean (and (some true? args) (some false? args))))", "user": "59fa7fb0e4b0ca45a743a366"}, {"problem": 83, "code": "(fn [& args]\n  (let [x (seq args)]\n    (if (and (some true? x) (some false? x))\n      true\n      false)))", "user": "5a022949e4b01bb0ae8afd60"}, {"problem": 83, "code": "not=", "user": "56673885e4b04acd4f672dce"}, {"problem": 83, "code": "; study\n#(true? \n  (and\n    (some true? %&)\n    (some false? %&)))", "user": "59e5b6a1e4b08badc2a0c55b"}, {"problem": 83, "code": "(fn [& args] (or (and (some true? args) (some false? args)) false))", "user": "5683fcafe4b0945ebc182aa8"}, {"problem": 83, "code": "(fn [& xs] (boolean (and (some true? xs) (some false? xs))))", "user": "5a04e923e4b01bb0ae8afda9"}, {"problem": 83, "code": "(fn [& bools]\n  (boolean\n   (and (some #{true} bools)\n        (some false? bools))))", "user": "5a065388e4b01bb0ae8afdcb"}, {"problem": 83, "code": "(fn [& args] (and (not (every? true? args)) (not (not-any? true? args))))", "user": "59f15e20e4b0966464fe6a5a"}, {"problem": 83, "code": "(fn [& args]\n  (if (every? false? args)\n    false\n    (not-every? true? args)))", "user": "56f2611fe4b04a395b9a04a2"}, {"problem": 83, "code": "(fn half-truth [a & b]\n\t(let [l (cons a b)]\n\t\t(let \n\t\t[s \n\t\t(map (fn [x]\n\t\t\t(if x\n\t\t\t\t1\n\t\t\t\t0)\n\t\t\t) l)]\n\t\t(if (= (reduce + s) (count l))\n\t\t\tfalse\n\t\t\t(if (zero? (reduce + s))\n\t\t\tfalse\n\t\t\ttrue))\n\t\t)\n\t\t)\n\n\t)", "user": "5a025edde4b01bb0ae8afd64"}, {"problem": 83, "code": "(fn [& args]\n   (= 2 (count (keys (group-by identity args)))))", "user": "59fa241ee4b0ca45a743a358"}, {"problem": 83, "code": "(fn [& args] (boolean (and (some true? args) (some false? args))))", "user": "5a00cb31e4b01bb0ae8afd36"}, {"problem": 83, "code": "(fn\n  [x & y]\n  (let [args (filter #(not (nil? %)) (flatten (list [x y])))]\n    \n      (if (and (some #{true} args) (not (every? true? args)))\n        true\n        false)))", "user": "529735cbe4b02ebb4ef7503c"}, {"problem": 83, "code": "(fn [& args]\n  (> (count (partition-by true? args)) 1))", "user": "5a0b9fc0e4b04bbd27e6d992"}, {"problem": 83, "code": "(fn [& args] (let [se (apply vector args) trts (filter true? args)] (and (pos? (count trts)) (< (count trts) (count args)) )  ))", "user": "59f58103e4b0966464fe6ac0"}, {"problem": 83, "code": "(fn [& coll] (let [freq (frequencies coll)] (not (or (nil? (freq false)) (nil? (freq true))))))", "user": "59ba2ea0e4b0a024fb6ae3e1"}, {"problem": 83, "code": "(fn [& args] (if (and (some true? args) (some false? args)) true false))", "user": "5a0a3473e4b0eab8c0448941"}, {"problem": 83, "code": "not=", "user": "5a090a06e4b01bb0ae8afdff"}, {"problem": 83, "code": "#(true? (and (some true? %&) (some false? %&)))", "user": "59f820d9e4b0ca45a743a316"}, {"problem": 83, "code": "(fn [& bs] \n  (= 2 (->> bs distinct count)))", "user": "55916764e4b0604b3f94d57b"}, {"problem": 83, "code": "#(true? (and (some identity %&) (not-every? identity %&)))", "user": "5a12dea3e4b04bbd27e6da44"}, {"problem": 83, "code": "(fn [& args]\n  (not (or (every? true? args)\n           (every? false? args))))", "user": "59f2af64e4b0966464fe6a87"}, {"problem": 83, "code": "(fn ht [& xs]\n  (and (not (not-any? true? xs )) (not-every? true? xs)))", "user": "58d1c1b1e4b03c36ff7e58ef"}, {"problem": 83, "code": "(fn [& c]\n  (boolean (and (some true? c)\n                (not (every? true? c)))))", "user": "54497569e4b032a45b8693d2"}, {"problem": 83, "code": "(fn solution [& params]\n  (if (= 1 (count (set params)))\n    false\n    (contains? (set params) true)))", "user": "5a06c154e4b01bb0ae8afdce"}, {"problem": 83, "code": "(fn [& args] \n  (let [vs (reduce conj #{} args)]\n    (= 2 (count vs))))", "user": "5830377ee4b051871117c004"}, {"problem": 83, "code": "(fn contains-true-and-false? [& args]\n  (let [argset (into #{} args)]\n    (and (contains? argset true) (contains? argset false))))", "user": "598876fee4b021a7a535feb7"}, {"problem": 83, "code": "(fn [& xs]\n  (not (nil? (and (some identity xs) (some not xs)))))", "user": "5a188be3e4b0ff51aa4b31ec"}, {"problem": 83, "code": "#(true? (and\n        (some false? %&)\n        (some true? %&)))", "user": "59fd069ae4b01bb0ae8afcf4"}, {"problem": 83, "code": "(fn [& aseq]\n  (and (not (empty? (filter true? aseq)))\n       (not (empty? (filter false? aseq)))))", "user": "5a0ce1a5e4b04bbd27e6d9b7"}, {"problem": 83, "code": "(fn [& args] \n  (if (some true? args) \n    (false? (every? true? args)) \n    false))", "user": "5a14228fe4b0ff51aa4b3193"}, {"problem": 83, "code": "(fn [& xs] (cond (not (some false? xs)) false (some true? xs) true :else false))", "user": "594bc7d6e4b07ddc2dafae3d"}, {"problem": 83, "code": "not=", "user": "55129667e4b06e50f9beb1ac"}, {"problem": 83, "code": "not=", "user": "5a18488ee4b0ff51aa4b31e5"}, {"problem": 83, "code": "(fn [& args]\n  (and\n   (reduce #(or %1 %2) args)\n   (not-every? identity args)))", "user": "580a0783e4b0a837a8b30d2c"}, {"problem": 83, "code": "not=", "user": "5a07fefee4b01bb0ae8afde5"}, {"problem": 83, "code": "(fn [& args]\n  (= (set args) #{false true}))", "user": "59f75327e4b0966464fe6aec"}, {"problem": 83, "code": "(fn d [& x] (= (count (reduce #(assoc %1 %2 :a) (conj x {})) ) 2))", "user": "59135c11e4b0163c97b36f02"}, {"problem": 83, "code": "not=", "user": "55295b5de4b0ffed3738f949"}, {"problem": 83, "code": "(fn [& input] (and\n             (not (reduce #(and %1 %2) input))\n             (reduce #(or %1 %2) input)))", "user": "5a21d34ce4b0ff51aa4b32b9"}, {"problem": 83, "code": "#(and (not (every? true? %&)) (boolean (some true? %&)))", "user": "5a1149ace4b04bbd27e6da26"}, {"problem": 83, "code": "(fn ht\n  ([a] false )\n  ([a b] (if (or (and a b) (and (not a) (not b))) false true))\n  ([a b & args] (if (ht a b) true \n                 (if (true? a) \n                   (if (some false? (seq args)) true false)\n                   (if (some true? (seq  args)) true false))\n   )))", "user": "59ff9424e4b01bb0ae8afd24"}, {"problem": 83, "code": "not=", "user": "59b69bbee4b05c620303ca2a"}, {"problem": 83, "code": "(fn [& args]\n   (boolean\n    (and (some identity args)\n         (some not args))))", "user": "5a250b86e4b07f18be40aa19"}, {"problem": 83, "code": "(fn [& coll] (not (or (every? #(= true %) coll)\n                      (every? #(= false %) coll))))", "user": "5a135573e4b0ff51aa4b3180"}, {"problem": 83, "code": "#(and (not-every? true? %&) (not (not-any? true? %&)))", "user": "5a0a04eee4b0eab8c0448935"}, {"problem": 83, "code": "(fn [& args]\n  (let [s (set args)]\n    (if\n      (= s #{ true })\n      false\n      (contains? s true))))", "user": "5a2df4a0e4b09cafd31c7f74"}, {"problem": 83, "code": "(fn [& boolean-vals]\n   (true? (and (some true? boolean-vals)\n               (some false? boolean-vals))))", "user": "5a1d0381e4b0ff51aa4b3255"}, {"problem": 83, "code": "(fn [& xs]\n     (loop [ys xs t 0 f 0]\n           (if (empty? ys)\n               (and (> t 0) (> f 0))\n               (recur (rest ys) \n                      (if (first ys) (inc t) t)\n                      (if (not (first ys)) (inc f) f)))))", "user": "5a34f342e4b0ddc586f153d1"}, {"problem": 83, "code": "(fn [& x] (and (not (not-any? true? x)) (not (every? true? x))))", "user": "5a36405ee4b0ddc586f153e5"}, {"problem": 83, "code": "(fn [& args] (if (not= nil (and (some #{true} args) (some (complement #{true}) args))) true false))", "user": "56ef077ae4b04a395b9a0459"}, {"problem": 83, "code": "not=", "user": "5a1679d9e4b0ff51aa4b31ca"}, {"problem": 83, "code": "(fn [& args] \n  (= #{true false} (into #{} args)))", "user": "580dac08e4b0849f6811b740"}, {"problem": 83, "code": "(fn [& args]\n(if (every? true? args)\n  false\n  (true? (some true? args)))\n  )", "user": "55d7312ee4b0e31453f64a9f"}, {"problem": 83, "code": "(fn [& bs]\n  (boolean (and (some true? bs)\n       \t\t\t(some false? bs))))", "user": "598858d0e4b021a7a535feb5"}, {"problem": 83, "code": "(fn [x & y] (= 2 (count (#(distinct (conj %2 %)) x y))))", "user": "5a3c5c54e4b001c08efc0ce3"}, {"problem": 83, "code": "(fn [& bools] (= (count (set bools)) 2))", "user": "5a285a38e4b07f18be40aa67"}, {"problem": 83, "code": "#(loop\n   [bool (not %1)\n    bools %&]\n   (if (empty? bools)\n     false\n     (if (= bool (first bools))\n       true\n       (recur bool (rest bools)))))", "user": "5a3ece62e4b0447ef91cc5b9"}, {"problem": 83, "code": "(fn half-true [& args]\n  (if (and (some #(true? %) args) (some #(false? %) args))\n    true\n    false))", "user": "5773f3a9e4b0979f896515f2"}, {"problem": 83, "code": "not=", "user": "5a3d33b3e4b001c08efc0cef"}, {"problem": 83, "code": "(fn [& params]\n   (let [str (set params)]\n     (cond\n       (= (count str) 1)  false\n       (not= (first str) (second str)) true\n       )\n     )\n\n   )", "user": "59fcc31fe4b01bb0ae8afcef"}, {"problem": 83, "code": "#(true? \n  (and\n    (some true? %&)\n(some false? %&)))", "user": "5a42dbabe4b0447ef91cc5fc"}, {"problem": 83, "code": "(fn [a & b]\n  (if b\n    (cond\n      (and (= a true) (.contains b false)) true\n      (and (= a false) (.contains b true)) true\n      (and (= a false) (not (.contains b true))) false\n      (and (= a true) (not (.contains b false))) false) \n    false))", "user": "5a39e36ce4b001c08efc0cbc"}, {"problem": 83, "code": "(fn [& b] (= (count (distinct b)) 2))", "user": "57de5f0ee4b0bd073c202450"}, {"problem": 83, "code": "(fn [& b]\n  (if (every? identity b)\n    false\n    (= true (some identity b))))", "user": "54bd9a60e4b0ed20f4ff6ee3"}, {"problem": 83, "code": "(fn [& args]\n   (if (= 1 (count (set args)))\n     false true)\n   )", "user": "5a43347ee4b0447ef91cc603"}, {"problem": 83, "code": "(fn [& params]\n  (cond\n    (every? #(= % true) params) false\n    (some #(= % true) params) true\n    :else false))", "user": "5a4372f6e4b0447ef91cc605"}, {"problem": 83, "code": "(fn [ & L]\n  (not (or (every? true? L) (every? false? L))))", "user": "5a409d77e4b0447ef91cc5d3"}, {"problem": 83, "code": "(fn [& c] (every? identity ((juxt (partial some true?) (partial some false?)) c)))", "user": "5a3d7afae4b0447ef91cc5a6"}, {"problem": 83, "code": "(fn xor'\n  [x & xs]\n  (if x\n    (true? (some false? xs))\n    (true? (some true? xs))\n    ))", "user": "5a067f26e4b01bb0ae8afdcc"}, {"problem": 83, "code": "(fn [& args] (boolean (and (some true? args) (some false? args))))", "user": "5a4993c0e4b05d388ecb6b71"}, {"problem": 83, "code": "(fn [ & args ]\n  (true?\n   (and \n    (some true? args)\n    (some false? args))))", "user": "5a4443cae4b0447ef91cc60f"}, {"problem": 83, "code": "(fn [& s] (= 2 (count (group-by identity s))))", "user": "5a4de614e4b05d388ecb6bb1"}, {"problem": 83, "code": "#(not (apply = %&))", "user": "54f773bfe4b01ecee9d8881f"}, {"problem": 83, "code": "(fn [& bools] (if (and (some true? bools) (some false? bools)) true false))", "user": "5a4ec4f0e4b05d388ecb6bc2"}, {"problem": 83, "code": "#(true? \n  (and\n    (some true? %&)\n    (some false? %&)))", "user": "5a4208dde4b0447ef91cc5ee"}, {"problem": 83, "code": "(fn half-truth\n  [& args]\n  (prn args)\n  (and (boolean (some identity args)) (not (every? identity args)))\n  )", "user": "59f44189e4b0966464fe6aab"}, {"problem": 83, "code": "(fn [& args]\n  (true? (and (some true? args) \n       \t \t  (not-every? true? args))))", "user": "5a0ef454e4b04bbd27e6d9fa"}, {"problem": 83, "code": "(fn [& args] (and (not (nil?(some identity args))) (not-every? identity args)))", "user": "5a533cc0e4b05d388ecb6c09"}, {"problem": 83, "code": "#(true? (and (some true? %&)(some false? %&)))", "user": "5a534241e4b05d388ecb6c0a"}, {"problem": 83, "code": "(fn [& x](if (and (some true?  x) (not-every? true? x)) true false))", "user": "5a1c8c26e4b0ff51aa4b3247"}, {"problem": 83, "code": "(fn [& args] (true? (and (some true? args) (not-every? true? args))))", "user": "5a1c3c11e4b0ff51aa4b323d"}, {"problem": 83, "code": "(fn [& more]\n   (== 2 (count (set more)))\n   )", "user": "58d4d864e4b03c36ff7e594c"}, {"problem": 83, "code": "not=", "user": "5a546344e4b05d388ecb6c27"}, {"problem": 83, "code": "not=", "user": "5a527beee4b05d388ecb6bfe"}, {"problem": 83, "code": "(fn [& x] (> (count (set x)) 1))", "user": "5a3c2a08e4b001c08efc0cdf"}, {"problem": 83, "code": "(fn [& x]\n  (every?\n    (fn [y] (some #(= y %) x)) [true false]\n  )\n)", "user": "5a244240e4b0ff51aa4b32e9"}, {"problem": 83, "code": "(fn [& args]\n  (and (true? (some true? args)) (true? (some false? args))))", "user": "5a577954e4b05d388ecb6c68"}, {"problem": 83, "code": "#(true? (and (some true? %&) (some false? %&)))", "user": "5182de5ce4b0353c468deb74"}, {"problem": 83, "code": "(fn t [& xs] (let [f (into #{} xs)] (= 2 (count f))))", "user": "5900d5cde4b0438e51c2d02e"}, {"problem": 83, "code": "(fn [& bools] (let [bool-set (into #{} bools)]\n  (not (or (nil? (bool-set false)) (nil? (bool-set true))))))", "user": "5a566e8fe4b05d388ecb6c51"}, {"problem": 83, "code": "(fn [& xs]\n  (every? true? [(some true? xs)\n                 (not (every? true? xs))]))", "user": "53f053ebe4b0742d9025b0d3"}, {"problem": 83, "code": "#(and (not (every? true? %&)) (or (some true? %&) false))", "user": "5a512929e4b05d388ecb6be2"}, {"problem": 83, "code": "(fn [& xs] (and (not-every? true? xs) (not-every? false? xs)))", "user": "552d9b31e4b076ab5578f7eb"}, {"problem": 83, "code": "(fn ht [& c] (and (not (every? false? c)) (not (every? true? c))))", "user": "5a424954e4b0447ef91cc5f0"}, {"problem": 83, "code": "(fn half-truth [& args]\n  (let [g (group-by identity args)]\n    (if (> (count (keys g)) 1)\n      true\n      false)))", "user": "565654dae4b0f9d632dd849f"}, {"problem": 83, "code": "(fn [& args]\n  (true? (if (every? true? args)\n    false\n    (some true? args))))", "user": "5a58bfd0e4b05d388ecb6c84"}, {"problem": 83, "code": "(fn [& bools] (< 0 (get (frequencies (vec bools)) true 0) (count bools)))", "user": "5a23cabce4b0ff51aa4b32df"}, {"problem": 83, "code": "(fn [& tv] (and ((comp not nil?) (some true? tv)) (not-every? true? tv)))", "user": "5a5894d9e4b05d388ecb6c81"}, {"problem": 83, "code": "#(and (true? (some true? %&)) (true? (some false? %&)))", "user": "5a536cf2e4b05d388ecb6c10"}, {"problem": 83, "code": "(fn [& all] \n  (if (every? true? all)\n      false\n      (if (every? false? all)\n          false\n          true)))", "user": "56fd058be4b08d47c97781a1"}, {"problem": 83, "code": "(fn [& args] (and (not-every? true? args) \n                  (boolean (some true? args))))", "user": "59c94a69e4b0a024fb6ae576"}, {"problem": 83, "code": "(fn [& x]  (not (or (every? false? x) (every? true? x))))", "user": "5a66f358e4b0512ff01cd9d5"}, {"problem": 83, "code": "not=", "user": "55952410e4b0c79f6e1db962"}, {"problem": 83, "code": "#(= #{true false} (set %&))", "user": "5a52f2cbe4b05d388ecb6c06"}, {"problem": 83, "code": "(fn tester\n  [& args]\n  (let [uniqs (set args)]\n    (and (contains? uniqs true) (contains? uniqs false))))", "user": "5a6a32b6e4b0512ff01cda22"}, {"problem": 83, "code": "#(and\n  (or (some true? %&) false)\n  (not (every? true? %&)))", "user": "5a257747e4b07f18be40aa1f"}, {"problem": 83, "code": "(fn [& args]\n  (or (and (some true? args) (some false? args)) false))", "user": "5a6a7cc5e4b0512ff01cda27"}, {"problem": 83, "code": "not=", "user": "5a5dbe9de4b0512ff01cd92b"}, {"problem": 83, "code": "(fn [& x] (= 2 (count (set x))))", "user": "5a6b15e9e4b0512ff01cda32"}, {"problem": 83, "code": "(fn [& params]\n   (if (= 1(count (partition-by false? params)))\n     false\n     true))", "user": "583f1533e4b089d5ab817dc8"}, {"problem": 83, "code": "(fn [& args]\n     (if (every? true? args)\n         false\n         (do\n           (if (some true? args)\n               true\n               false))))", "user": "5a4b3abde4b05d388ecb6b81"}, {"problem": 83, "code": "(fn [& args] (and (.contains args true) (not (every? true? args))))", "user": "5a677a5fe4b0512ff01cd9e7"}, {"problem": 83, "code": "not=", "user": "5a68826ee4b0512ff01cd9f8"}, {"problem": 83, "code": "(fn [& args]\n           (if-let [r (seq (remove true? args))]\n             (< (count r) (count args))\n             false))", "user": "5a5d0726e4b0512ff01cd91b"}, {"problem": 83, "code": "(fn [& b]\n  (loop [b b\n         a true\n         o false]\n    (if (seq b)\n      (recur (rest b) (and a (first b)) (or o (first b)))\n      (if (= a o) false true))))", "user": "5a6b9b95e4b0512ff01cda40"}, {"problem": 83, "code": "#(= 2 (count (distinct %&)))", "user": "5a625bc2e4b0512ff01cd989"}, {"problem": 83, "code": "(fn half-truth\n  ([a] false)\n  ([a b & tail]\n   (cond\n    (and a (not b)) true\n    (and (not a) b) true\n    :else (apply half-truth b tail)\n    )\n   )\n  )", "user": "5a621702e4b0512ff01cd983"}, {"problem": 83, "code": "(fn [& bools]\n  (let [has-trues (and (some true? bools)\n                       (not-every? true? bools))]\n    (if (nil? has-trues)\n      false\n      has-trues)))", "user": "5a61bf79e4b0512ff01cd97b"}, {"problem": 83, "code": "(fn [& vars]\n             (cond\n               (every? true? vars) false\n               (some true? vars) true\n               :else false))", "user": "5a488c09e4b05d388ecb6b68"}, {"problem": 83, "code": "(fn [& xs]\n    (and\n     (true? (some true? xs))\n     (not (every? true? xs))))", "user": "5920c191e4b09b4ee5954c61"}, {"problem": 83, "code": "(fn not= [& args]\n    (->>  (apply = args) (not) )\n    )", "user": "5a71c89ee4b0512ff01cda93"}, {"problem": 83, "code": "(fn\n  [& args]\n  (= 2 (count (set args))))", "user": "529f9bf2e4b04e0c58e87bb4"}, {"problem": 83, "code": "(fn [& args] \n  (let [t (some true? args) f (some false? args)]\n    (and (= t true) (= f true))))", "user": "5a6af090e4b0512ff01cda2d"}, {"problem": 83, "code": "(fn [& args]\n  (loop [args args, un_true false, un_false false]\n    (if (seq args)\n      (if (first args)\n        (recur (rest args) true un_false)\n        (recur (rest args) un_true true))\n      (and un_true un_false))))", "user": "5a7ae674e4b03baeef9276d5"}, {"problem": 83, "code": "(fn [& bools]\n  (loop [tail (seq bools)\n         t false\n         f false]\n    (if (seq tail)\n      (let [h (first tail)\n            nt (or t h)\n            nf (or f (not h))]\n      \t(if (and nt nf)\n          true\n          (recur (rest tail) nt nf)))\n      false)))", "user": "4fd4bddce4b0d4de60cee36e"}, {"problem": 83, "code": "not=", "user": "59cd13d5e4b0ef0a1e9b5b32"}, {"problem": 83, "code": "(fn some-true-some-false [& args]\n    (if (and (some true? args) (some false? args)) true false))", "user": "58f5b58ae4b0438e51c2cedc"}, {"problem": 83, "code": "(fn [ & a] \t(= (count (set a)) 2))", "user": "5a6afb1de4b0512ff01cda2f"}, {"problem": 83, "code": "(fn [& args] (let [num-true (get (frequencies args) true 0)]\n                (and (>= num-true 1)\n                     (< num-true (count args)))))", "user": "594266cfe4b060784b3b790b"}, {"problem": 83, "code": "(fn [& args] \n  (and (not-every? true? args) \n       (not-every? false? args)))", "user": "5a388675e4b001c08efc0ca2"}, {"problem": 83, "code": "#(let [s (set %&)] (and (not (nil? (s true))) (not (nil? (s false)))))", "user": "59da6480e4b0ef0a1e9b5c68"}, {"problem": 83, "code": "#(and (not (every? true? %&)) (not (nil? (some true? %&))))", "user": "51dd5d6fe4b0c33a4e1da406"}, {"problem": 83, "code": "(fn [& args]\n   (loop [l (rest args) t (first args)]\n      (if (= (first l) t)\n         (recur (rest l) t)\n         (if (empty? l)\n            false\n            true))))", "user": "5a653f80e4b0512ff01cd9b2"}, {"problem": 83, "code": "(fn [& c] (not (or (every? false? c)\n                    (every? true? c))))", "user": "5a8e9a7ae4b05369db4d2528"}, {"problem": 83, "code": "(fn f [x & xs]\n   (loop [x x\n          xs xs]\n     (cond\n       (empty? xs) false\n       (= x (first xs)) (recur x (rest xs))\n       :else true)))", "user": "5a8bc2a1e4b05369db4d24ef"}, {"problem": 83, "code": "#(true? \n  (and (some true? %&) \n       (some false? %&)))", "user": "566fa059e4b0a866af6896ea"}, {"problem": 83, "code": "not=", "user": "5a918839e4b002d099cae6f7"}, {"problem": 83, "code": "not=", "user": "58a32c21e4b02bd94d917eeb"}, {"problem": 83, "code": "(fn [& args] (true? (and (some true? args) (some false? args))))", "user": "5a95c639e4b0d174b936c75e"}, {"problem": 83, "code": "(fn [& args]\n  (if (= 2 (count (distinct args))) true false))", "user": "5a95e50be4b0d174b936c760"}, {"problem": 83, "code": "not=", "user": "5a9457a9e4b0d174b936c734"}, {"problem": 83, "code": "#(cond\n    (every? identity %&) false\n    (some identity %&) true\n    :else false)", "user": "5a912080e4b002d099cae6ea"}, {"problem": 83, "code": "(fn  [& args]\n (if (every? true? args)\n  false\n   (if (some true? args)\n     true \n     false\n   )\n )\n)", "user": "5a984657e4b0d174b936c78a"}, {"problem": 83, "code": "#(true? (and (some true? %&) (some false? %&)))", "user": "5a99b844e4b0d174b936c7ab"}, {"problem": 83, "code": "(fn [& x] (if (every? true? x) false (not (every? false? x))))", "user": "5a9ac061e4b0d174b936c7c1"}, {"problem": 83, "code": "not=", "user": "5a5767f3e4b05d388ecb6c65"}, {"problem": 83, "code": "(fn half-truth \n  [& x]\n  (let \n    [expr (and (some true? x) (some false? x))]\n    (true? expr))\n  )", "user": "5a99b861e4b0d174b936c7ad"}, {"problem": 83, "code": "not=", "user": "5a9dbffbe4b0d174b936c7f4"}, {"problem": 83, "code": "(fn [& b] (if (and (some true? b) (some false? b)) true false))", "user": "5a99b863e4b0d174b936c7ae"}, {"problem": 83, "code": "#(true? (and (some true? %&) (some false? %&)))", "user": "5a9f005be4b0d174b936c810"}, {"problem": 83, "code": "(fn [& args]\n  (if (every? true? args)\n   false\n   (if (some true? args)\n    true\n    false)))", "user": "5a984616e4b0d174b936c789"}, {"problem": 83, "code": "(fn [& args]\n     (if (reduce #(and %1 %2) args) \n       false\n       (reduce #(or %1 %2) args)))", "user": "5971a017e4b01722bebd4c75"}, {"problem": 83, "code": "(fn [& args] (or (and (some true? args) (some false? args)) false))", "user": "5a9dbb32e4b0d174b936c7f3"}, {"problem": 83, "code": "(fn half-truth[x & c]\n  (let [coll (remove nil? (flatten (vector x c)))]\n    (and (not (nil? (some true? coll))) (not (every? true? coll)))))", "user": "5a9482b7e4b0d174b936c737"}, {"problem": 83, "code": "not=", "user": "5a9e9d3ee4b0d174b936c804"}, {"problem": 83, "code": "(fn [& args]\n (if   (and\n    (some #(true? %) args)\n    (not (every? #(true? %) args))\n    )\n    true false )\n)", "user": "5a8d55a8e4b05369db4d2514"}, {"problem": 83, "code": "(fn\n  [& args]\n  (and (reduce (fn [a b] (or a b)) args) (not-every? #(= % true) args)))", "user": "5aa2f1dee4b0d174b936c865"}, {"problem": 83, "code": "not=", "user": "5aa00b7fe4b0d174b936c825"}, {"problem": 83, "code": "(fn [& a]\n  (= [true false]\n     [(first(filter true? a))\n      (first(filter false? a))])\n  )", "user": "5a94a38ce4b0d174b936c73e"}, {"problem": 83, "code": "#(true? (and (some true? %&) (some false? %&)))", "user": "5a99b83fe4b0d174b936c7aa"}, {"problem": 83, "code": "(fn [& args] (let [falseNum (reduce (fn [a b] (+ a (if (= b false) 1 0))) 0 args)] (if (and (> falseNum 0) (< falseNum (count args))) true false)))", "user": "5a9e3698e4b0d174b936c7fc"}, {"problem": 83, "code": "not=", "user": "5aa1e0f1e4b0d174b936c84e"}, {"problem": 83, "code": "#(and (not= nil (some true? %&)) (not-every? true? %&))", "user": "5a9cdec0e4b0d174b936c7e1"}, {"problem": 83, "code": "#(if (or (every? true? %&) (every? false? %&))\n    false\n    true)", "user": "5a9a12d6e4b0d174b936c7b7"}, {"problem": 83, "code": "(fn [& args]\n  (and (contains? (set args) false)\n       (contains? (set args) true)))", "user": "5a99cab6e4b0d174b936c7b2"}, {"problem": 83, "code": "not=", "user": "5aa4b961e4b0d174b936c888"}, {"problem": 83, "code": "(fn [& lst]\n  (and (contains? (set lst) false)\n       (contains? (set lst) true)))", "user": "5a99b766e4b0d174b936c7a8"}, {"problem": 83, "code": "(fn sometrue [& a] (= #{true false} (into #{} a)))", "user": "583048d9e4b051871117c007"}, {"problem": 83, "code": "not=", "user": "5a99b848e4b0d174b936c7ac"}, {"problem": 83, "code": "(fn half-truth\n  [& lst]\n  \n  (cond\n   (every? true? lst) false\n   (some true? lst) true\n   :else false))", "user": "5a99ae99e4b0d174b936c7a4"}, {"problem": 83, "code": "not=", "user": "5aa6d44de4b0d174b936c8b2"}, {"problem": 83, "code": "not=", "user": "5a99b87ee4b0d174b936c7af"}, {"problem": 83, "code": "(fn [& bool]\n  (and (not= nil (some true? bool)) (not-every? true? bool)))", "user": "5a99b688e4b0d174b936c7a6"}, {"problem": 83, "code": "(fn half-true? [& xs]\n  (true? (and (some false? xs)\n              (some true? xs))))", "user": "5aa4f7dae4b0d174b936c88c"}, {"problem": 83, "code": "(fn [& s] (if (some true? s) (if (some false? s) true false) false))", "user": "5591b61ee4b0604b3f94d580"}, {"problem": 83, "code": "(fn [& args]\n     (not (or\n       (not (some true? args))\n       (not (some false? args)))))", "user": "5908882de4b047aa04b19979"}, {"problem": 83, "code": "not=", "user": "5a9db5c9e4b0d174b936c7f1"}, {"problem": 83, "code": "(fn [& r] (if (every? true? r) false ((complement not-any?) true? r)))", "user": "51421cd5e4b0b50abeb46b2c"}, {"problem": 83, "code": "(fn [& args]\n  (boolean(and\n   (some true? args)\n   (some false? args))))", "user": "5a593521e4b05d388ecb6c93"}, {"problem": 83, "code": "not=", "user": "5892a5fde4b00487982d5228"}, {"problem": 83, "code": "not=", "user": "5aabd34fe4b073f177442565"}, {"problem": 83, "code": "(comp (every-pred #(not-every? false? %) #(not-every? true? %)) list)", "user": "5aa998c6e4b0d174b936c8e5"}, {"problem": 83, "code": "(fn [& x]\n    (and\n        (true? (some true? x))\n        (true? (some false? x))\n    )\n  )", "user": "59021fede4b0438e51c2d04d"}, {"problem": 83, "code": "(fn[& xs] (if (reduce #(and %1 %2) true xs) false (reduce #(or %1 %2) false xs)))", "user": "532dbd3ce4b019098a6f8b40"}, {"problem": 83, "code": "not=", "user": "5a99c5a9e4b0d174b936c7b1"}, {"problem": 83, "code": "not=", "user": "5a9bfd57e4b0d174b936c7d0"}, {"problem": 83, "code": "(fn [& s]\n  (not (nil? (and (some true? s) (some false? s)))))", "user": "5a75da49e4b0512ff01cdacf"}, {"problem": 83, "code": "#(true? (and (some true? %&) (some false? %&)))", "user": "5ab23a78e4b073f1774425e1"}, {"problem": 83, "code": "(fn [& bools]\n  (boolean (and (some identity bools)\n                (not-every? identity bools))))", "user": "5ab16992e4b073f1774425c4"}, {"problem": 83, "code": "(fn [& args]\n  (let [len (count args) \n     \ttrue-len (count (filter true? args))]\n    (and (> true-len 0)\n         (< true-len len))))", "user": "58fed70de4b0438e51c2cfdd"}, {"problem": 83, "code": "(fn xor [& conds] \n  (and ((complement nil?) (some identity conds)) \n       (not-every? identity conds)))", "user": "5a67cedbe4b0512ff01cd9ee"}, {"problem": 83, "code": "#(= (count (set %&))\n      2)", "user": "554e4d65e4b00713264bd993"}, {"problem": 83, "code": "(fn [ & c] \n  (if (every? identity c) \n    false\n    (if (some identity c)\n      true\n      false)))", "user": "5ab9fe71e4b073f17744269d"}, {"problem": 83, "code": "#(true? \n  (and\n    (some true? %&)\n    (some false? %&)))", "user": "5abb02ade4b073f1774426bc"}, {"problem": 83, "code": "(fn [& bs]\n  (and (not (every? false? bs))\n       (not (every? true? bs))))", "user": "565131b3e4b0f29ec07d2e88"}, {"problem": 83, "code": "(fn [& x] (true? (and (some true? x) (not (every? true? x)))))", "user": "5ab9eeade4b073f17744269b"}, {"problem": 83, "code": "(fn [& coll]\n  (boolean (and (some true? coll)\n                (some false? coll))))", "user": "5a9829e5e4b0d174b936c788"}, {"problem": 83, "code": "(fn [& args]\n  (not (nil? (and (some true? args) (some false? args)))))", "user": "5ab276f2e4b073f1774425e6"}, {"problem": 83, "code": "#(not= 1 (count (set %&)))", "user": "59769d75e4b01722bebd4cdd"}, {"problem": 83, "code": "not=", "user": "5aa8f753e4b0d174b936c8d9"}, {"problem": 83, "code": "(fn [& args]\n  (true? (and (not-every? true? args)\n              (some true? args))))", "user": "5a9181c5e4b002d099cae6f6"}, {"problem": 83, "code": "(fn [& args] (and ((fn myor [l] (if (empty? l) false (or (first l) (myor (rest l))))) args)\n                  (not ((fn myand [l] (if (empty? l) true (and (first l) (myand (rest l))))) args))))", "user": "5ab3edf0e4b073f17744260d"}, {"problem": 83, "code": "(fn half-truth [& s]\n  (let [some (reduce #(or %1 %2) s)\n        all (reduce #(and %1 %2) s)]\n    (and some (not all))))", "user": "5ab564f8e4b073f177442639"}, {"problem": 83, "code": "(fn \n  [& args]\n  (if (every? true? args)\n    false\n    (if (some true? args)\n      true\n      false)))", "user": "5ac35d00e4b0e27600da7712"}, {"problem": 83, "code": "(fn [& bools]\n\t(and (not-every? (fn [bool] (= bool true)) bools) (not-every? (fn [bool] (= bool false)) bools))\n  )", "user": "5ac51c43e4b0e27600da773b"}, {"problem": 83, "code": "not=", "user": "5ac37d0fe4b0e27600da7718"}, {"problem": 83, "code": "(fn [& args] (if (and (some identity args) (not (every? identity args))) true false))", "user": "5ab5f60be4b073f177442643"}, {"problem": 83, "code": "(fn [& args] (= 2 (count (distinct args))))", "user": "59a8a4dce4b0bcf4e9a43af7"}, {"problem": 83, "code": "not=", "user": "5ac4d1f6e4b0e27600da7735"}, {"problem": 83, "code": "#(not= (reduce (fn [a b] (or a b)) false %&) (reduce (fn [a b] (and a b)) true %&))", "user": "5ac0ba3ae4b073f177442745"}, {"problem": 83, "code": "not=", "user": "5acb137ee4b0e27600da77eb"}, {"problem": 83, "code": "(fn [& args] \n  (let [some-true (some true? args)\n        not-all-true (not-every? true? args)]\n    (boolean (and some-true not-all-true))))", "user": "5abbbd46e4b073f1774426db"}, {"problem": 83, "code": "(fn [& e]\n  (let [t (count (get (group-by #(true? %) e) true)) a (count e)]\n    (and (>= t 1) (not= t a))))", "user": "5ab170c2e4b073f1774425cb"}, {"problem": 83, "code": "#(true? (and (some true? %&) (some false? %&)))", "user": "5aa2dc5ae4b0d174b936c861"}, {"problem": 83, "code": "(fn [& xs] (boolean (and (some true? xs) (some false? xs))))", "user": "531bf76fe4b08068f379ed96"}, {"problem": 83, "code": "(fn \n  [& args]\n  (if (some true? args)\n    (if (some false? args)\n      true\n      false)\n    false))", "user": "5ac741d6e4b0e27600da777d"}, {"problem": 83, "code": "(fn half-truth [& args]\n  (if (some true? args)\n  \t(if (some false? args)\n  \ttrue\n  \tfalse)\n  false))", "user": "5ac74b34e4b0e27600da777f"}, {"problem": 83, "code": "(fn [& s] (boolean (and (some (fn [e] e) s) (not (every? (fn [e] e) s)))))", "user": "5abe2fc2e4b073f17744271e"}, {"problem": 83, "code": "(fn [& bools]\n  (if (and (not (every? true? bools)) (some true? bools))\n    true\n    false))", "user": "5acd08eee4b0e27600da7822"}, {"problem": 83, "code": "#(< 1 (count (distinct %&)))", "user": "5ad63a34e4b0ea6055cfac01"}, {"problem": 83, "code": "(fn [& args]\n  (if (nil? (and (some true? args) (some false? args)))\n      false\n      true))", "user": "5ad99ddee4b0ea6055cfac3a"}, {"problem": 83, "code": "; #(and (not (not-any? true? %&)) (not-every? true? %&))\n; some returns nil, not false\n#(and (true? (some true? %&)) (not-every? true? %&))", "user": "5a544eeee4b05d388ecb6c24"}, {"problem": 83, "code": "(fn [& xs]\n  (boolean (and (some false? xs) (some true? xs))))", "user": "5ad3d730e4b0ea6055cfabc8"}, {"problem": 83, "code": "(fn [& bools] (boolean (and (some true? bools) (not-every? true? bools))))", "user": "5ade6bafe4b0837691e92c23"}, {"problem": 83, "code": "(fn [& bools]\n    (and (not (nil? (some identity bools)))\n         (not (every? identity bools))))", "user": "5ac6ef9be4b0e27600da7779"}, {"problem": 83, "code": "not=", "user": "5ae0976be4b0837691e92c43"}, {"problem": 83, "code": "(fn [& args] (cond (every? true? args) false\n                   (some true? args) true\n                   :else false))", "user": "5991eec7e4b0866487ed0d6e"}, {"problem": 83, "code": "#(true? (and (some true? %&) (some false? %&)))", "user": "5acc961ae4b0e27600da7810"}, {"problem": 83, "code": "(fn [& x] (<= 1 (reduce + (map #(if % 1 0) x)) (dec (count x))))", "user": "533f1584e4b085b17e897d9b"}, {"problem": 83, "code": "(fn [& b] (and (true? (some true? b)) (true? (some false? b))))", "user": "5ae246b1e4b0837691e92c5d"}, {"problem": 83, "code": "(fn [& collection] (and (true? (some #(= true %) collection)) (true? (some #(= false %) collection))))", "user": "5ac91d90e4b0e27600da77bd"}, {"problem": 83, "code": "#(true? (and (some true? %&) (some false? %&)))", "user": "53d5d43ce4b0e771c302544d"}, {"problem": 83, "code": "(fn q  [ & args] (true? (and (some not args) (some true? args))))", "user": "5a8fd113e4b05369db4d2542"}, {"problem": 83, "code": "(fn [& b]\n  (and (true? (some true? b))\n        ((complement every?) true? b)))", "user": "5aefdc8de4b0cc2b61a3bc40"}, {"problem": 83, "code": "(fn [& xs]\n   (if (= (filter true? xs) xs)\n     false\n     (if (nil? (some true? xs)) false true)))", "user": "5a084a24e4b01bb0ae8afdf2"}, {"problem": 83, "code": "(fn [& args]\n  (if (every? true? args)\n    false\n    (if (some true? args)\n      true\n      false)))", "user": "5ae47c1de4b0837691e92c81"}, {"problem": 83, "code": "(fn [& args]\n  (boolean (and (some true? args)\n                (not-every? true? args))))", "user": "5922f8a9e4b026ae3852128f"}, {"problem": 83, "code": "(fn [& a]\n  (true? (#(and (some true? %) (some false? %))\n    a)))", "user": "5aba04dce4b073f17744269e"}, {"problem": 83, "code": "(fn [& rest]\n   (and (not (not-any? true? rest)) (not (every? true? rest))))", "user": "5aeca4c9e4b0cc2b61a3bc0a"}, {"problem": 83, "code": "#(or (and (some true? %&) (some false? %&)) false)", "user": "5af31955e4b0cc2b61a3bc7a"}, {"problem": 83, "code": "(fn [& xs]\n  (boolean (and (some true? xs)\n                (not (every? true? xs)))))", "user": "5adf5f9be4b0837691e92c33"}, {"problem": 83, "code": "(fn [& vals] (= 2 (count (set vals))))", "user": "5649b1b0e4b0284900eef646"}, {"problem": 83, "code": "(fn\n  [& s]\n  (loop [i 0 j 0 s s]\n    (if (empty? s)\n      (= 2 (+ i j))\n      (if (first s)\n        (recur 1 j (rest s))\n        (recur i 1 (rest s))))))", "user": "5af907e6e4b0cc2b61a3bcda"}, {"problem": 83, "code": "(fn [& args]\n   (and (not (nil? (some true? args))) (not (every? true? args))))", "user": "5aa4a1ffe4b0d174b936c886"}, {"problem": 83, "code": "(fn [& arr]\n  (and (not= nil (some true? arr)) (not= nil (some false? arr))))", "user": "5adcc688e4b0837691e92c05"}, {"problem": 83, "code": "(comp (partial = 2) count distinct vector)", "user": "5af8221ce4b0cc2b61a3bccd"}, {"problem": 83, "code": "(fn [& args] (apply <= (map count [[1] (filter identity args) (rest args)])))", "user": "5afb4b15e4b0cc2b61a3bcf6"}, {"problem": 83, "code": "not=", "user": "5b008bcae4b0cc2b61a3bd3d"}, {"problem": 83, "code": "#(= 2 (count (into #{} %&)))", "user": "5afcd6d1e4b0cc2b61a3bd17"}, {"problem": 83, "code": "(fn halftrue\n  [& xs]\n  (cond\n    (= 1 (count xs)) false\n    (every? true? xs) false\n    (some true? xs) true\n    :else false))", "user": "5b02a170e4b0cc2b61a3bd52"}, {"problem": 83, "code": "(fn [& args] (let [coll (set args)] (if (= (count coll) 2) true false)))", "user": "5afdca89e4b0cc2b61a3bd20"}, {"problem": 83, "code": "#(true? (and (some true? %&) (some false? %&)))", "user": "55e732c5e4b050e68259b492"}, {"problem": 83, "code": "(fn [& args]\n  (not (or (every? true? args) (every? false? args))))", "user": "59d9dcfbe4b0ef0a1e9b5c5d"}, {"problem": 83, "code": "(fn [& args]\n    (= true\n        (and\n            (some #(= true %) args)\n            (not-every? #(= true %) args))))", "user": "5b083513e4b0cc2b61a3bdb4"}, {"problem": 83, "code": "(fn x [& s]\n  (and\n    (.contains s true)\n    (.contains s false)))", "user": "5b0bea6de4b0cc2b61a3bdda"}, {"problem": 83, "code": "(fn [& args] ((every-pred (partial not-every? true?) (partial some true?)) args))", "user": "5b0e6795e4b0cc2b61a3be03"}, {"problem": 83, "code": "(fn f [& args]\n  (if (some identity args)\n    (if (every? identity args)\n      false\n      true)\n    false))", "user": "5777c3d6e4b0979f8965164f"}, {"problem": 83, "code": "not=", "user": "5b0546eae4b0cc2b61a3bd7e"}, {"problem": 83, "code": "#(cond\n  (every? true? %&) false\n  (some true? %&) true\n  :else false)", "user": "5b0180cfe4b0cc2b61a3bd47"}, {"problem": 83, "code": "(fn booequal? [& boos]\n  (if (apply = boos) false true))", "user": "5a779197e4b013a48d399763"}, {"problem": 83, "code": "not=", "user": "5b1619e4e4b0cc2b61a3be77"}, {"problem": 83, "code": "(fn [& args] (and (true? (some true? args)) (not (every? true? args))))", "user": "56aad332e4b03c432f187337"}, {"problem": 83, "code": "(fn [& s]\n  (let [x (count (filter #(true? %) s))]\n     (and\n       (> x 0)\n       (< x (count s)))))", "user": "5b15811ee4b0cc2b61a3be6f"}, {"problem": 83, "code": "not=", "user": "5b0b8d29e4b0cc2b61a3bdd7"}, {"problem": 83, "code": "(fn f [& args]\n  (if (= (count (set args)) 1)\n      false\n      true))", "user": "570eeb66e4b0b0fb43fd06fa"}, {"problem": 83, "code": "(fn [& v] (not (or (every? #(= % false) v ) (every? #(= % true) v))))", "user": "5b198eace4b03cfeda66ecbb"}, {"problem": 83, "code": "(fn [& arg] (not (or (every? false? arg) (every? true? arg))))", "user": "5b1c16e1e4b03cfeda66ecf2"}, {"problem": 83, "code": "(fn [& tf] (boolean (and (some true? tf) (some false? tf))))", "user": "5b22328ee4b03cfeda66ed5d"}, {"problem": 83, "code": "not=", "user": "54dfbacae4b024c67c0cf7b1"}, {"problem": 83, "code": "(fn [& bools] (if (every? identity bools) false (reduce #(or %1 %2) false bools)))", "user": "5b210749e4b03cfeda66ed48"}, {"problem": 83, "code": "(fn [& args] (true? (and (some true? args) (not-every? true? args))))", "user": "56b280e3e4b0982f16b37e06"}, {"problem": 83, "code": "(fn [& coll]\n  (not \n     (or\n       (every? #(= % true) coll)\n       (every? #(= % false) coll))))", "user": "5b067ae1e4b0cc2b61a3bd97"}, {"problem": 83, "code": "(fn [& exprs] (if (and (some false? exprs) (some true? exprs)) true false))", "user": "5b073c34e4b0cc2b61a3bda4"}, {"problem": 83, "code": "(fn [& args] (= 2 (count (group-by #(true? %) args))))", "user": "5b34aba7e4b025bcb146f352"}, {"problem": 83, "code": "(fn [& args]\n  (let [num-true (count (filter #(true? %) args))]\n    (and (not (zero? num-true)) (not (= num-true (count args))))))", "user": "5b2689e3e4b063e2438bcc33"}, {"problem": 83, "code": "(fn [& x]\n  (true? (and (some true? x) (some false? x)))\n  \n  )", "user": "5b227f5ae4b03cfeda66ed63"}, {"problem": 83, "code": "(fn [& args]\n  (and\n  \t(boolean (some true? args))\n   \t(not (every? true? args))))", "user": "59e8a952e4b0249b72820733"}, {"problem": 83, "code": "(fn [& args] (and (not ( reduce #(and %1 %2) true args)) (  reduce #(or %1 %2) false args ) ) )", "user": "5b3aa98be4b02d533a91bbca"}, {"problem": 83, "code": "(fn [& vec] (let [x (reduce (fn [res i] (or res i)) vec) y (reduce (fn [res i] (and res i)) vec)] (and x (not y))))", "user": "5addadfce4b0837691e92c13"}, {"problem": 83, "code": "(fn [& args]\n  (> (count args) (reduce #(+ %1 (if %2 1 0)) 0 args) 0))", "user": "5b2c79c6e4b025bcb146f2b7"}, {"problem": 83, "code": "(fn [& a] (and (reduce #(or %1 %2) a) (not (reduce #(and %1 %2) a))))", "user": "5b3f2ba9e4b02d533a91bc09"}, {"problem": 83, "code": "(fn [ & coll] \n\t(let [some-true (some true? coll)] \n\t\t(if (every? true? coll)\n\t\tfalse \n\t\t(if (nil? some-true) false some-true)))\n\t)", "user": "5ac04101e4b073f177442737"}, {"problem": 83, "code": "(fn [& args] \n  (println args)\n  (let [ countTrue (count (filter #(= true %) args)) countFalse (count (filter #(= false %) args))]\n    (if (and (> countTrue 0) (> countFalse 0))\n      true\n      false)))", "user": "5b3de9a7e4b02d533a91bbf4"}, {"problem": 83, "code": "(fn [& args] (true? (and (some true? args) (some false? args))))", "user": "5b465b8be4b02d533a91bc65"}, {"problem": 83, "code": ";(fn [& x] (> (count (partition-by identity x)) 1))\n;  (fn [& x] (boolean (> (count (partition-by identity x))) 1))\n\n(fn [& x] (<= 2 (count(partition-by identity x))))", "user": "5b4a0ce3e4b02d533a91bc92"}, {"problem": 83, "code": "(fn [& x]\n  (= (set x) #{true false}))", "user": "5b0948f3e4b0cc2b61a3bdbb"}, {"problem": 83, "code": "not=", "user": "5b47a4f7e4b02d533a91bc73"}, {"problem": 83, "code": "(fn [& bs] (= 2 (count (set bs))))", "user": "5b4b4052e4b02d533a91bc9a"}, {"problem": 83, "code": "(fn ht [& args] (if (every? true? args) false (if (some true? args) true false)))", "user": "5b421edce4b02d533a91bc2c"}, {"problem": 83, "code": "(fn [& args] (boolean (and (some false? args) (some true? args))))", "user": "5b552e2ee4b02d533a91bd2e"}, {"problem": 83, "code": "(fn [& bools]\n  (if (and (some true? bools) (some false? bools))\n    true\n    false))", "user": "5b51b9f8e4b02d533a91bcfe"}, {"problem": 83, "code": "not=", "user": "5b5785c7e4b02d533a91bd5b"}, {"problem": 83, "code": "(fn [& args]\n  (and\n    (contains? (set args) false)\n    (contains? (set args) true)))", "user": "59ed823ee4b0249b728207a1"}, {"problem": 83, "code": "(fn [& bs] (and ( not (nil? (some identity bs))) (not (every? identity bs)) ))", "user": "5b58b271e4b02d533a91bd6e"}, {"problem": 83, "code": "(fn [& col]\n  (= 2 (count (set col))))", "user": "5b4dfd5de4b02d533a91bcc3"}, {"problem": 83, "code": "(fn [& coll]\n    (not= nil (some (if (first coll)\n            false?\n            true?)\n          (rest coll))))", "user": "5b5d255de4b0c6492753e6c8"}, {"problem": 83, "code": "not=", "user": "5b609f0ae4b0c6492753e708"}, {"problem": 83, "code": "(fn truthy [& bs]\n  (and (or (some identity bs) false) (not (every? identity bs))))", "user": "5b500215e4b02d533a91bce2"}, {"problem": 83, "code": "(fn a-half-true [a & other]\n  (if (and (not (reduce #(if (and (= true %1)\n                                  (= true %2))\n                           true\n                           false)\n                        (conj other a)))\n           (reduce #(if (or (= true %1)\n                            (= true %2))\n                      true\n                      false)\n                   (conj other a)))\n    true\n    false))", "user": "5b596d0ce4b02d533a91bd7a"}, {"problem": 83, "code": "(fn [& args]\n  (and (reduce\n        #(or %1 %2) args)\n       (not\n        (reduce\n        #(and %1 %2) args))))", "user": "59a080e3e4b0871e7608b837"}, {"problem": 83, "code": "(fn[& args]\n  (and (boolean (some true? args))  (not-every? true? args)))", "user": "57a6552ce4b0a96607956208"}, {"problem": 83, "code": "(fn [& args](if (nil? (some false? args)) false (if (nil? (some true? args)) false true)))", "user": "5b5e7953e4b0c6492753e6d9"}, {"problem": 83, "code": "(fn halftruth83 [& xs]\n  (and (let [sm (some true? xs)] (if (= sm nil) false sm)) (not-every? true? xs)))", "user": "5b59c513e4b02d533a91bd81"}, {"problem": 83, "code": "(fn [& args]\n\t(if (and (some identity args) (not (every? identity args))) true false))", "user": "5b4ff637e4b02d533a91bce0"}, {"problem": 83, "code": "#(if (= 1 (count (set %&))) false true)", "user": "5a9d64c8e4b0d174b936c7eb"}, {"problem": 83, "code": "#(cond\n  (every? true? %&) false\n  (some true? %&) true\n  :else false)", "user": "4fdf4e2be4b05e33b9224f96"}, {"problem": 83, "code": "(fn [& args]\n  (let [truthy (filter identity args)]\n    (if (= (count truthy)\n           (count args))\n      false\n      (if (empty? truthy)\n        false\n        true))))", "user": "5b3251c1e4b025bcb146f317"}, {"problem": 83, "code": "(fn [& a] (= 2 (count (group-by identity a))))", "user": "5b59d176e4b02d533a91bd86"}, {"problem": 83, "code": "(fn not-all-true [& args]\n  (and\n   (not (reduce (fn [a b] (and a b)) args))\n   (reduce (fn [a b] (or a b)) args)\n   )\n  )", "user": "5b5e5019e4b0c6492753e6d3"}, {"problem": 83, "code": "(fn [& x] (not (nil? (and (some true? x) (some false? x)))))", "user": "5b58d012e4b02d533a91bd71"}, {"problem": 83, "code": "(fn [& xs]\n  (true? (and (some true? xs) (some false? xs))))", "user": "585b46c8e4b0f14aab7c8766"}, {"problem": 83, "code": "(fn half-truth\n  [& bools]\n  (not (or (every? true? bools) (every? false? bools))))", "user": "5a3c06fce4b001c08efc0cdd"}, {"problem": 83, "code": "not=", "user": "5b61aa6ae4b0c6492753e712"}, {"problem": 83, "code": "#(boolean (and (some false? %&) (some true? %&)))", "user": "5b6473eee4b0c6492753e73f"}, {"problem": 83, "code": "(fn [& xs]\n   (and\n     (boolean (some identity xs))\n     (not (every? identity xs))))", "user": "56e2ca59e4b03a7c14b85a38"}, {"problem": 83, "code": "(fn [& args]\n   (if (and (some true? args) (some false? args))\n     true\n     false))", "user": "5b611666e4b0c6492753e70d"}, {"problem": 83, "code": "#(true? \n  (and\n    (some true? %&)\n    (some false? %&)))", "user": "5b702a28e4b0c6492753e7e1"}, {"problem": 83, "code": "#(-> %& distinct next boolean)", "user": "59ad2fcee4b00adcf69795de"}, {"problem": 83, "code": "(fn foo [& args]\n  (not (nil? (and (some true? args)\n                  (some false? args)))))", "user": "5b333626e4b025bcb146f32f"}, {"problem": 83, "code": "(fn [& x]\n  (and (contains? (set x) false)\n       (contains? (set x) true)))", "user": "5b7292b3e4b047b03b2036a4"}, {"problem": 83, "code": "(fn[& x](and (contains? (set x) false) (contains? (set x) true)))", "user": "5b6962c1e4b0c6492753e787"}, {"problem": 83, "code": "(fn [& as] (if (some true? as) (not-every? true? as) false))", "user": "5aeec90fe4b0cc2b61a3bc31"}, {"problem": 83, "code": "(fn[& args] (and\n           (not (empty? (filter identity args)))\n           (not (reduce #(and %1 %2) args))))", "user": "58d96bdce4b0a4d5acaab638"}, {"problem": 83, "code": "not=", "user": "5b754f8ee4b047b03b2036c9"}, {"problem": 83, "code": "#(and (apply (some-fn true?) %&) (apply (some-fn false?) %&))", "user": "5b4c2212e4b02d533a91bca6"}, {"problem": 83, "code": "(fn[& vars](-> vars (set)(count)(= 2)))", "user": "5826a843e4b051871117befd"}, {"problem": 83, "code": "(fn at [& p] (and (not (every? identity p))\n               \t  (true? (some identity p))))", "user": "5b7ec039e4b047b03b20375d"}, {"problem": 83, "code": "(fn [& xs] (boolean (and (some true? xs) (some false? xs))))", "user": "5b64370ae4b0c6492753e73c"}, {"problem": 83, "code": "(fn [& args] (> (count (set args)) 1))", "user": "5b73e500e4b047b03b2036ba"}, {"problem": 83, "code": "#(< 0 (count (filter identity %&)) (count %&))", "user": "5b772ad7e4b047b03b2036e8"}, {"problem": 83, "code": "#(true? (and (some true? %&) (some false? %&)))", "user": "5aeb0b44e4b0cc2b61a3bbee"}, {"problem": 83, "code": "#(= 2 (count (set %&)))", "user": "5a91988ae4b002d099cae6f9"}, {"problem": 83, "code": "(fn[& args]\n  (and (boolean (some true? args)) (not-every? true? args)))", "user": "5b79cbdce4b047b03b20370a"}, {"problem": 83, "code": "#(= 2 (count (group-by identity %&)))", "user": "5b284375e4b063e2438bcc53"}, {"problem": 83, "code": "#(if (or (every? true? %&) (every? false? %&)) false true)", "user": "5a085dfde4b01bb0ae8afdf4"}, {"problem": 83, "code": "(fn\n  [& bools]\n  (if\n    (and\n     (some true? bools)\n     (not-every? true? bools))\n    true\n    false))", "user": "57e2e1bde4b0bfb2137f5a8f"}, {"problem": 83, "code": "(fn [& res] (and (contains? (zipmap res (range)) true) (contains? (zipmap res (range)) false)))", "user": "5b7ed20fe4b047b03b203760"}, {"problem": 83, "code": "#(true? \n  (and\n    (some true? %&)\n    (some false? %&)))", "user": "5b8d01d7e4b0c0b3ffbd49ca"}, {"problem": 83, "code": "(fn half-truth [& xs]\n      (if (and\n            (some #(= % true) xs)\n            (some #(= % false) xs))\n        true\n        false))", "user": "5b1e5bfde4b03cfeda66ed0e"}, {"problem": 83, "code": "(fn half-true [& args] (true? (and (some true? args) (some false? args))))", "user": "5b857411e4b047b03b2037ce"}, {"problem": 83, "code": "not=", "user": "5b88f0c0e4b047b03b203816"}, {"problem": 83, "code": "(fn [& args]\n  (if (every? identity args)\n    false\n   \t(boolean (some identity args))))", "user": "599342efe4b0b211ea3aaab0"}, {"problem": 83, "code": "(fn [& bools]\n    (and (not (every? true? bools))\n         (not (every? false? bools))))", "user": "57f2bf56e4b0511f1d294df8"}, {"problem": 83, "code": "not=", "user": "578dc040e4b0ebec4cfb756d"}, {"problem": 83, "code": "#(true? \n  (and\n    (some true? %&)\n    (some false? %&)))", "user": "5b97c521e4b0c0b3ffbd4a9a"}, {"problem": 83, "code": "(fn half-truth\n  [head & tail]\n  (let [coll (conj tail head)\n        res (filter true? coll)]\n    (cond\n      (empty? res) false\n      (<= (count res) (count tail)) true\n      :else false))\n  )", "user": "5adbbf89e4b0837691e92bf4"}, {"problem": 83, "code": "#(true? (and\n  (some true? %&)\n  (some false? %&))\n  )", "user": "5b985fe5e4b0c0b3ffbd4ab1"}, {"problem": 83, "code": "(fn\n  [& bools]\n  (if (and (some #(= true %) bools) (not-every? #(= true %) bools))\n    true\n    false))", "user": "59b93cd7e4b0a024fb6ae3c7"}, {"problem": 83, "code": "(fn [& args]\n  (boolean\n   (and (some true? args)\n        (not (every? true? args)))))", "user": "5b96800ae4b0c0b3ffbd4a7b"}, {"problem": 83, "code": "(fn [& bools] ((every-pred (partial some true?) (partial some false?)) bools))", "user": "54acd872e4b09f271ff37cdb"}, {"problem": 83, "code": "not=", "user": "5b855800e4b047b03b2037cd"}, {"problem": 83, "code": "not=", "user": "5b9db58be4b0c0b3ffbd4b41"}, {"problem": 83, "code": "(fn check-bools [& bools]\n  (if (and (some (partial = true) bools)\n           (not-every? (partial = true) bools))\n    true\n    false))", "user": "5b975c6ee4b0c0b3ffbd4a91"}, {"problem": 83, "code": "(fn [& bools]\n  (cond\n    (every? true? bools) false\n    (some true? bools) true\n    :else false))", "user": "5a059b33e4b01bb0ae8afdb5"}, {"problem": 83, "code": "(fn [& bools]\n  (boolean \n   (and \n    (some identity bools) \n    (some identity (map not bools)))))", "user": "5b77d3c8e4b047b03b2036f1"}, {"problem": 83, "code": "#(= (count (set %&)) 2)", "user": "5b7bc82ce4b047b03b203726"}, {"problem": 83, "code": "(fn [& xs] (< 0 (count (filter identity xs)) (count xs)) )", "user": "570d0548e4b0b0fb43fd06d2"}, {"problem": 83, "code": "(fn ztrue [& c]\n  (boolean (and (some true? c) (not (every? true? c)))))", "user": "5b9bcba8e4b0c0b3ffbd4b07"}, {"problem": 83, "code": "(fn [& bool](if (every? identity bool) false (reduce #(or %1 %2)  bool )))", "user": "5b6f72ede4b0c6492753e7dc"}, {"problem": 83, "code": "not=", "user": "57093ee1e4b0b0fb43fd06a9"}, {"problem": 83, "code": "(fn [& args]\n  (and (boolean (some true? args))\n       (not (every? true? args))))", "user": "5ba5802de4b0a20761a233fd"}, {"problem": 83, "code": "#(boolean (and (some true? %&) (some false? %&)))", "user": "5b999af8e4b0c0b3ffbd4ad3"}, {"problem": 83, "code": "(fn [& bs] (boolean (and (some true? bs) (some false? bs))))", "user": "5b919d9de4b0c0b3ffbd4a24"}, {"problem": 83, "code": "(fn [& args]\n  (= 2 (count (set args))))", "user": "5bab5440e4b0a20761a23475"}, {"problem": 83, "code": "(fn [& bools]\n  (true? (and (some true? bools) (some false? bools))))", "user": "5b62ff3ce4b0c6492753e72a"}, {"problem": 83, "code": "(fn [& xs] (if (every? #(= % true) xs) false (if (some #(= % true) xs) true false)))", "user": "5b924123e4b0c0b3ffbd4a34"}, {"problem": 83, "code": "not=", "user": "5ba947bfe4b0a20761a23440"}, {"problem": 83, "code": "(fn trytrue\n  [& data]\n  (let [gb (group-by identity data)]\n    (if (< 0 (count (get gb true)) (count data))\n      true\n      false)))", "user": "5b86462de4b047b03b2037df"}, {"problem": 83, "code": "(fn [& col] \n  (boolean\n   (and\n    (some true? col)\n   \t(some false? col))))", "user": "57481f1fe4b009280f9f2b82"}, {"problem": 83, "code": "(fn [& bools] (let [c (count bools) c' (count (filter false? bools))] (and (not (zero? c')) (not (= c c')))))", "user": "566b57e9e4b0a866af6896ad"}, {"problem": 83, "code": "(fn[& a] (= 2 (count (set a))))", "user": "5b99a0a3e4b0c0b3ffbd4ad7"}, {"problem": 83, "code": "(fn [& vals] (if (nil? (and (some true? vals) (some false? vals))) false true))", "user": "5b77248ae4b047b03b2036e7"}, {"problem": 83, "code": "#(boolean (and (some true? %&) (some false? %&)))", "user": "5b81139fe4b047b03b203782"}, {"problem": 83, "code": "(fn [& bools]\n  (and (not-every? #{true} bools)\n       ((complement not-any?) #{true} bools)\n       ))", "user": "5a66fddee4b0512ff01cd9d7"}, {"problem": 83, "code": "#(boolean (and (some true? %&) (some false? %&)))", "user": "5b759ca8e4b047b03b2036d0"}, {"problem": 83, "code": "(comp #(= 2 %) count set list)", "user": "5bafd5c8e4b0a20761a234dd"}, {"problem": 83, "code": "(fn [& x]  (and (not (every? true? x))(not (nil? (some true? x)))))", "user": "5951190be4b066ee0a44aea4"}, {"problem": 83, "code": "not=", "user": "5b9c4a7be4b0c0b3ffbd4b16"}, {"problem": 83, "code": "(fn [& xs] (true? (and (some identity xs) (some not xs))))", "user": "57c647bbe4b05aa3c4741cf3"}, {"problem": 83, "code": "#(= #{true false} (set %&))", "user": "5bb7b956e4b0a20761a235ad"}, {"problem": 83, "code": "(fn [& x] (and (true? (some true? x)) (not-every? true? x)) )", "user": "5bbbd484e4b0a20761a23617"}, {"problem": 83, "code": "(fn [& args] (not (or (every? true? args) (every? false? args))))", "user": "5bbbce0ee4b0a20761a2360d"}, {"problem": 83, "code": "(fn half_truth [& cols]\n  \"Returns true if some of the params are true, but not all of the params are true. Otherwise returns false\"\n  (= (set cols) #{true false}))", "user": "5bbbcecee4b0a20761a23611"}, {"problem": 83, "code": "not=", "user": "5777cffae4b0979f89651651"}, {"problem": 83, "code": "not=", "user": "5bbc0ddfe4b0a20761a2361e"}, {"problem": 83, "code": "#(if (or (every? true? %&) (= nil (some true? %&))) false true)", "user": "5a03d246e4b01bb0ae8afd8c"}, {"problem": 83, "code": "(fn [& xs] (boolean (and (not (every? true? xs)) (some true? xs))))", "user": "5a68f374e4b0512ff01cda05"}, {"problem": 83, "code": "(fn [& s]\n  (let [as-set (set s)]\n    (and (contains? as-set true) (> (count as-set) 1))))", "user": "5b602a66e4b0c6492753e6fc"}, {"problem": 83, "code": "#(if (and (some true? %&)\n          (not (every? true? %&)))\n   true\n   false)", "user": "5829d9f8e4b051871117bf4d"}, {"problem": 83, "code": "(fn half-truth [& more]\n  (let [expr (and (some true? more) (some false? more))]\n    (true? expr)))", "user": "5bbbce70e4b0a20761a2360f"}, {"problem": 83, "code": "(fn [& args] (cond\n  (every? true? args) false\n  (some true? args) true\n  :else false))", "user": "5b85221ce4b047b03b2037c8"}, {"problem": 83, "code": "(fn half_truth \n  [& cols]\n  \"function which takes a variable number of booleans\"\n  (= (set cols) #{true false}))", "user": "5bbbd077e4b0a20761a23615"}, {"problem": 83, "code": "not=", "user": "5bbbba29e4b0a20761a23609"}, {"problem": 83, "code": "(fn [& args]\n  (and (not-every? false? args) (not-every? true? args)))", "user": "58ac1135e4b0005cfeb1a73f"}, {"problem": 83, "code": "(complement =)", "user": "5bb3c9a8e4b0a20761a2352f"}, {"problem": 83, "code": "(fn booleans\n  [& args]\n \t  (true? (and (some true? args) (not (every? true? args))))\n  )", "user": "5bbbcf9ee4b0a20761a23614"}, {"problem": 83, "code": "(fn [& bools]\n  (and (not (reduce #(and %1 %2) bools))\n       (reduce #(or %1 %2) bools)))", "user": "587fb546e4b0f1effa3b75f9"}, {"problem": 83, "code": "(fn [& args] (and (not (every? true? args)) (not= nil(some true? args))))", "user": "5bc8c033e4b07a9b28b100ca"}, {"problem": 83, "code": "(fn [& bools]\n   (and (reduce #(or %1 %2) bools) (not (reduce #(and %1 %2) bools))))", "user": "5bc82994e4b07a9b28b100b9"}, {"problem": 83, "code": "(fn [& args]\n   (and (boolean (some true? args))\n        (not-every? true? args)))", "user": "543a8256e4b032a45b869327"}, {"problem": 83, "code": "(fn [& coll]\n  (let [\n      t (->> coll (filter true?) (count))\n      f (->> coll (filter false?) (count))\n    ]\n    (and (> t 0) (> f 0))\n  )\n)", "user": "5bc28638e4b07a9b28b10033"}, {"problem": 83, "code": "#(true? (and (some true? %&) (some false? %&)))", "user": "5958a0c8e4b066ee0a44af8c"}, {"problem": 83, "code": "(fn [& args]\n  (or (and (some true? args) (not (every? true? args))) false))", "user": "59a0286be4b0871e7608b82f"}, {"problem": 83, "code": "not=", "user": "5bc255b7e4b07a9b28b10029"}, {"problem": 83, "code": "not=", "user": "5bc50870e4b07a9b28b10069"}, {"problem": 83, "code": "not=", "user": "5bcb672ee4b07a9b28b10100"}, {"problem": 83, "code": "(fn [& bools] (and (boolean (some true? bools))\n                   (not (every? true? bools))))", "user": "54ca35c6e4b057c6fda3a254"}, {"problem": 83, "code": "#(cond\n  (= true (and\n    (some true? %&)\n    (some false? %&))) true\n  :else\n  false)", "user": "5bbbce99e4b0a20761a23610"}, {"problem": 83, "code": "#(true? \n  (and\n    (some true? %&)\n    (some false? %&)))", "user": "5bbbce60e4b0a20761a2360e"}, {"problem": 83, "code": "not=", "user": "5bc7ba68e4b07a9b28b100b0"}, {"problem": 83, "code": "not=", "user": "5bbbcf3ae4b0a20761a23612"}, {"problem": 83, "code": "not=", "user": "5bbbcf81e4b0a20761a23613"}, {"problem": 83, "code": "(fn [& c] (if (and (some true? c)\n                   (not (every? identity c)))\n            true\n            false))", "user": "5bb5cd43e4b0a20761a23575"}, {"problem": 83, "code": "(fn [& xs] (if-let [a (and (some true? xs) (some false? xs))] true false))", "user": "5bc833a5e4b07a9b28b100bb"}, {"problem": 83, "code": "not=", "user": "593870e6e4b02506e01a29d6"}, {"problem": 83, "code": "(fn [& booleans] ( = (< 0 (count (filter true? booleans))) (< 0 (count (filter false? booleans))) ) )\n; not=", "user": "5bc9fb3be4b07a9b28b100e3"}, {"problem": 83, "code": "not=", "user": "5b337ff4e4b025bcb146f339"}, {"problem": 83, "code": "(fn [& args](= 2 (count (group-by identity args))))", "user": "567c63f6e4b05957ce8c61bb"}, {"problem": 83, "code": "(fn [& bools] (= (not-every? true? bools) (some true? bools)))", "user": "5bdc7bb7e4b0ed4b8aab4c36"}, {"problem": 83, "code": "not=", "user": "5bbdd136e4b07a9b28b0ffab"}, {"problem": 83, "code": "(fn [& args]\n  (if (every? true? args)\n    false\n    (true? (some true? args))))", "user": "5bb948f5e4b0a20761a235d5"}, {"problem": 83, "code": "(fn\n  ([x] (not x)) \n  ([x1 x2] (or x1 x2))\n  ([x1 x2 x3] (not (and x1 x2 x3)))\n  ([x1 x2 x3 x4] (not (and x1 x2 x3 x4)))\n  )", "user": "5be0306be4b0ed4b8aab4c7d"}, {"problem": 83, "code": "(fn [& x] (loop [sx (set x)]\n            (and (= (get (set x) true) true) (= (get sx false) false))))", "user": "5bdf651ee4b0ed4b8aab4c6d"}, {"problem": 83, "code": "(fn [& items] (if (and (some true? items) (some false? items)) true false))", "user": "57086931e4b0b0fb43fd069e"}, {"problem": 83, "code": "(fn [& a](= 2 (count (set a))))", "user": "5bd7b8b8e4b0ed4b8aab4bc6"}, {"problem": 83, "code": "(fn [& args]\n    (boolean (and (some identity args)\n                  (not (every? identity args)))))", "user": "5be5cebde4b0ed4b8aab4d19"}, {"problem": 83, "code": "(fn [& args] (if (some true? args) (if (some false? args) true false) false))", "user": "5b72b36ce4b047b03b2036a9"}, {"problem": 83, "code": "(fn __ [& b] (and (reduce #(or %2 %1) false b) (not (reduce #(and %2 %1) true b))))", "user": "5be2e670e4b0ed4b8aab4ccc"}, {"problem": 83, "code": "(fn [& d] (if (and (some true? d) (not (every? true? d)))\n            true\n            false))", "user": "5be58beae4b0ed4b8aab4d14"}, {"problem": 83, "code": "not=", "user": "575f6a80e4b08062f99a4e80"}, {"problem": 83, "code": "not=", "user": "5bc7c3aee4b07a9b28b100b2"}, {"problem": 83, "code": "#(true?\n  (and\n   (some true? %&)\n   (some false? %&)))", "user": "5b6ba7d7e4b0c6492753e7ad"}, {"problem": 83, "code": ";(fn [& args] (let [trueFreq  (get (frequencies args) true)]\n;                           (if (nil? trueFreq)\n;                             false\n;                             (if (and  (> trueFreq 0)  (< trueFreq (count args)))  true false))))\n\n;(fn [& args]  (.contains  (vec (range 1 (count args)))  (count (filter #(= % true) args))))\nnot=", "user": "5be589f9e4b0ed4b8aab4d13"}, {"problem": 83, "code": "(fn[& more]\n  (and (reduce #(or %1 %2) false more) (not (reduce #(and %1 %2) true more)))\n)", "user": "5be6d0f8e4b0f319e2d7ec51"}, {"problem": 83, "code": "#(and (boolean (some false? %&)) (boolean (some true? %&)))", "user": "5b60e88be4b0c6492753e70b"}, {"problem": 83, "code": "not=", "user": "5b7d03a0e4b047b03b20373d"}, {"problem": 83, "code": "(fn [& args]\n  (boolean (and (some true? args) (some false? args))))", "user": "5bf0aefde4b0a6d31fed215a"}, {"problem": 83, "code": "#(true? \n    (and \n        (some true? %&)\n        (some false? %&)))", "user": "5bfab899e4b0bdcf453d15d0"}, {"problem": 83, "code": "(fn\n  ([a] (not a))\n  ([a b] a)\n  ([a b c] (not a))\n  ([a b c d] a))", "user": "5be15f4de4b0ed4b8aab4c9b"}, {"problem": 83, "code": "(fn [& things] (and (boolean (some identity things)) (not-every? identity things)))", "user": "5a09a6f7e4b01bb0ae8afe14"}, {"problem": 83, "code": "(fn [& x]\n(let [cnt\n  (reduce (fn [cnt y]\n(if y (inc cnt) cnt)) 0 x)]\n(and (> cnt 0) (< cnt (count x)))))", "user": "5b15ab32e4b0cc2b61a3be72"}, {"problem": 83, "code": "(fn [& args]\n  (let [[trues falses]\n        [(filter true? args)\n         (filter false? args)]]\n      (not (or (empty? trues) (empty? falses)))))", "user": "5bf1b957e4b0a6d31fed216f"}, {"problem": 83, "code": "(fn [& coll]\n  (if (and (some true? coll) (some false? coll)) true false))", "user": "5bf5ddfde4b0bdcf453d159e"}, {"problem": 83, "code": "(fn [& args]\n  (if-let [s (some true? args)]\n    (not-every? true? args)\n    false))", "user": "5ba15075e4b0a20761a2339e"}, {"problem": 83, "code": "(fn some-but-not-all [& values]\n  (and (boolean (some true? values))\n       (boolean (some false? values))))", "user": "5bfa25fbe4b0bdcf453d15c8"}, {"problem": 83, "code": "not=", "user": "5c03e927e4b0bdcf453d167b"}, {"problem": 83, "code": "#(= (count (set %&)) 2)", "user": "5a080bdde4b01bb0ae8afde9"}, {"problem": 83, "code": "#(and (boolean (some true? %&)) (not-every? true? %&))", "user": "5bea3177e4b0f319e2d7ec81"}, {"problem": 83, "code": "(fn [& args] (boolean (and (some identity args) (some not args))))", "user": "5c01ba2ce4b0bdcf453d1656"}, {"problem": 83, "code": "(fn foo [& x]\n\n  \n  (let [count1 (get (frequencies x) true)  count2 (get (frequencies x) false)]\n       (not (or (= count1 nil) (= count2 nil)))\n       \n  )\n\n\n)", "user": "5bed1e4ae4b0a6d31fed2118"}, {"problem": 83, "code": "(fn [& bools] (if (not-every? false? bools )\n  (if (not-any? false? bools)\n    false\n    true)\n  false))", "user": "5c0a87e6e4b0bdcf453d1707"}, {"problem": 83, "code": "(fn [& c]\n  (loop [t 0\n         f 0\n         l c]\n    (if (empty? l)\n      (if (and (> t 0) (> f 0)) \n        true\n        false)\n      (if (true? (first l))\n        (recur (inc t) f (rest l))\n        (recur t (inc f) (rest l)) ) ) ) )", "user": "5ac9c737e4b0e27600da77d2"}, {"problem": 83, "code": "#(->> %& distinct second ((comp not nil?)))", "user": "5bfe4ecfe4b0bdcf453d1608"}, {"problem": 83, "code": "(fn [& xs] (true? (and (some true? xs) (not (every? true? xs)))))", "user": "5c0e58bfe4b01240ff567140"}, {"problem": 83, "code": "not=", "user": "5c0eb93ce4b01240ff567146"}, {"problem": 83, "code": "#(boolean (and (some identity %&) (not (every? identity %&))))", "user": "594d4c57e4b07ddc2dafae87"}, {"problem": 83, "code": "#(boolean \n  (and \n  \t(some true? %&) \n  \t(not (every? true? %&))))", "user": "5c13da47e4b01240ff5671a6"}, {"problem": 83, "code": "(fn [& args] (and (not-every? true? args) (not-every? false? args)))", "user": "532ae82be4b09d4e7a9b552b"}, {"problem": 83, "code": "not=", "user": "5c165d3ee4b01240ff5671d1"}, {"problem": 83, "code": "#(= 2 (count (set %&)))", "user": "5c1aadcde4b01240ff567209"}, {"problem": 83, "code": "(fn [& a] \n  (if\n   (and \n    (some true? a) \n    (some false? a)\n    )\n    true false))", "user": "58273e82e4b051871117bf1b"}, {"problem": 83, "code": "(fn dude [& bools]\n\t(if (every? true? bools)\n      \tfalse\n      \t(if (some true? bools)\n          true\n          false)\n      )\n  )", "user": "5c1d9f05e4b0efcb0b05b24c"}, {"problem": 83, "code": "#(and (true? (some true? %&)) (not-every? true? %&))", "user": "5b0bd9cfe4b0cc2b61a3bdd9"}, {"problem": 83, "code": "(fn [& elems] (true? (and (not (every? identity elems)) (some identity elems))))", "user": "5c1edf23e4b0efcb0b05b25d"}, {"problem": 83, "code": "#(and (not-every? false? %&) (not-every? true? %&))", "user": "5c17467fe4b01240ff5671df"}, {"problem": 83, "code": "#(and (boolean (some true? %&)) (not-every? true? %&) )", "user": "5c20b6abe4b07e362c230576"}, {"problem": 83, "code": "(fn some-but-not-all-true\n  [ & xs]\n  (let [s (set xs)]\n    (and (contains? s true)\n         (contains? s false))))", "user": "5c222b7de4b07e362c230588"}, {"problem": 83, "code": "(fn [& args] (let [exp (and (reduce #(or (true? %1) (true? %2)) args) (some false? args))] (true? exp)))", "user": "5c0ebca5e4b01240ff567147"}, {"problem": 83, "code": "(fn [& coll]\n  (let [coll-count (count coll)\n        true-count (count (filter identity coll))]\n    (not (or (= true-count coll-count)\n             (= true-count 0)))))", "user": "5bef3e88e4b0a6d31fed213f"}, {"problem": 83, "code": "(fn [& args] (and  (= true (reduce #(or % %2) false args)) (= false (reduce #(and % %2) true args))))", "user": "5c0e3f86e4b01240ff56713d"}, {"problem": 83, "code": "(fn [& args]\n  (= 2 (count (distinct args))))", "user": "5c2649c8e4b07e362c2305bf"}, {"problem": 83, "code": "(fn [& booleans]\n  (and (not (reduce #(and %1 %2) booleans))\n       (reduce #(or %1 %2) booleans)))", "user": "57d57f65e4b0bd073c2023b3"}, {"problem": 83, "code": "(fn [& x] (if (and (contains? (set x) true) (> (count (set x)) 1)) true false))", "user": "582c986ee4b051871117bf9b"}, {"problem": 83, "code": "(fn [& xs] (not (or (every? identity xs) (not-any? identity xs))))", "user": "5c30d90de4b0d62ef62d9f22"}, {"problem": 83, "code": "(fn hftr [& seq]\n  (loop [[first & rest] seq\n         set #{}]\n    (if (nil? first)\n      (= 2 (count set))\n         (recur rest (conj set first)))))", "user": "5c195cb2e4b01240ff5671f7"}, {"problem": 83, "code": "(fn [& coll] (and (not-every? true? coll) (not-every? false? coll)))", "user": "5ba75fdfe4b0a20761a23419"}, {"problem": 83, "code": "(fn half-truth [& bools ]\n  (= 2 (count (into #{} bools))))", "user": "5c24c654e4b07e362c2305a7"}, {"problem": 83, "code": "(fn half-true [& args]\n  (not= (and (some true? args) (some false? args)) nil))", "user": "5c36d110e4b0d62ef62d9f6a"}, {"problem": 83, "code": "not=", "user": "5c34cb2ee4b0d62ef62d9f59"}, {"problem": 83, "code": "(fn [& args]\n  (loop [prev (first args)\n         left args]\n    (if (empty? left)\n      false\n      (if (= prev (first left))\n        (recur (first left) (rest left))\n        true\n      )\n    )\n  )\n)", "user": "5bfcdc52e4b0bdcf453d15f4"}, {"problem": 83, "code": "(fn half-true [& args]\n  (and (not= (some true? args) nil) (not-every? true? args)))", "user": "5c3ac091e4b0d62ef62d9f95"}, {"problem": 83, "code": "not=", "user": "5b8ec146e4b0c0b3ffbd49f0"}, {"problem": 83, "code": "(fn [& bs] (not (apply = bs)))", "user": "57a5da5ee4b0a966079561fe"}, {"problem": 83, "code": "(fn [& args]\n  (if (and (not-every? true? args) (some true? args))\n    true\n    false\n    )\n\n  )", "user": "5c321b8ae4b0d62ef62d9f32"}, {"problem": 83, "code": "not=", "user": "5be9d530e4b0f319e2d7ec79"}, {"problem": 83, "code": "(fn [& args]\n  (if (reduce #(and %1 %2) args)\n    false\n    (#(or %1 %2) (reduce #(and %1 %2) args) (reduce #(or %1 %2) args))))", "user": "59b9e669e4b0a024fb6ae3db"}, {"problem": 83, "code": "(fn [& args]\n   (if (and (some true? args) (some false? args))\n     true\n     false))", "user": "5c2dfca3e4b0d62ef62d9efc"}, {"problem": 83, "code": "#(true? \n  (and\n    (some true? %&)\n    (some false? %&)))", "user": "56f4623ae4b046a417f9205d"}, {"problem": 83, "code": "(fn\n  [& bools]\n  (and (not (every? true? bools))\n       (not (every? false? bools))))", "user": "5c05cae7e4b0bdcf453d16a3"}, {"problem": 83, "code": "(fn [& bool]\n\n  (and\n\n    (if (nil? (some true? bool))\n      false\n\n      true\n      )\n    (not (every? true? bool))\n    )\n\n  )", "user": "53b0750fe4b047364c044483"}, {"problem": 83, "code": "(fn [& args]\n   (let [all-false (every? (complement true?) args)\n         all-true (every? true? args)]\n     (if (or all-false all-true)\n       false\n       true)))", "user": "54d90b36e4b0a52adc2e2049"}, {"problem": 83, "code": "(fn some-truth\n  [& xs]\n  (let [cc (count xs) tt (reduce (fn\n                                   [acc x]\n                                   (if (= x true)\n                                     (inc acc)\n                                     acc)) 0 xs) ff (reduce (fn\n                                                                    [acc y]\n                                                                    (if (= y false)\n                                                                      (inc acc)\n                                                                      acc)) 0 xs)]\n\n    (if (and (> tt 0) (not= tt cc))\n      true\n      false)))", "user": "5c35acffe4b0d62ef62d9f62"}, {"problem": 83, "code": "not=", "user": "5c379636e4b0d62ef62d9f76"}, {"problem": 83, "code": "(fn [& args]\n  (if (some true? args)\n    (if(some false? args)\n      true\n      false)\n    false))", "user": "5c486dece4b0e06e1360a3c0"}, {"problem": 83, "code": "#(and (true? (some true? %&)) (not-every? true? %&))", "user": "5c4c74efe4b0f9f7a8770e76"}, {"problem": 83, "code": "(fn [& a] (and (not-every? identity a) (not-every? not a)))", "user": "5c512811e4b0fb8c5ffd99c2"}, {"problem": 83, "code": "(fn half-truth [& more]\n  (let [expr (and (some true? more) (some false? more))]\n    (true? expr)))", "user": "5c4ab449e4b0f9f7a8770e57"}, {"problem": 83, "code": "#(true? (and (some true? %&) (some false? %&)))", "user": "5c48757fe4b0e06e1360a3c3"}, {"problem": 83, "code": "(fn [& coll]\n   (if (and\n        (some true? coll)\n        (some false? coll))\n     true false))", "user": "5c45e703e4b0e06e1360a391"}, {"problem": 83, "code": "(fn [& x] (if (and (some true? x) (some false? x)) true false))", "user": "5c2836ebe4b07e362c2305d4"}, {"problem": 83, "code": "(fn [& args] (and (contains? (into #{} args) true) \n                  (contains? (into #{} args) false)))", "user": "5c3d8576e4b0d62ef62d9fb4"}, {"problem": 83, "code": "not=", "user": "5b14475be4b0cc2b61a3be5a"}, {"problem": 83, "code": "(fn [& bools]\n  (boolean (and (some #(true? %) bools) (some #(false? %) bools))))", "user": "5c196e7be4b01240ff5671fb"}, {"problem": 83, "code": "(fn [first & args]\n  (= true (some #(not (= % first)) args)))", "user": "54961073e4b0b312c081ff62"}, {"problem": 83, "code": "(fn half-truth [& args]\n  (and (not (nil? (some true? args))) \n       (not-every? true? args)))", "user": "5c506951e4b0f9f7a8770ec5"}, {"problem": 83, "code": "not=", "user": "5c411df3e4b08cd430848ebf"}, {"problem": 83, "code": "(fn [& l] (cond (every? true? l) false (some true? l) true :else false))", "user": "5c435a9fe4b0e06e1360a367"}, {"problem": 83, "code": "(fn [& l] (not (or (empty? (filter #(= false %) l)) (empty? (filter #(= true %) l)))))", "user": "5c54e605e4b0fb8c5ffd9a14"}, {"problem": 83, "code": "not=", "user": "5c5f3b4de4b0fca0c1622612"}, {"problem": 83, "code": "(fn [& x] (if (and (some #{true} x) (not-every? #(= true %) x))\n             true\n             false))", "user": "502ea967e4b06efe12e8cc76"}, {"problem": 83, "code": "(fn [& lst] (and (not (reduce #(and % %2) lst)) (reduce #(or % %2) lst) ))", "user": "5c59b1d3e4b01df32ab73261"}, {"problem": 83, "code": "(fn [& vals]\n   (and (reduce #(or %1 %2) vals) (not (reduce #(and %1 %2) vals))))", "user": "5c387c51e4b0d62ef62d9f83"}, {"problem": 83, "code": "not=", "user": "5c3cd80fe4b0d62ef62d9faa"}, {"problem": 83, "code": "(fn\n  [& bools]\n  (->\n    (and\n      (some true? bools)\n      (some false? bools))\n    boolean))", "user": "5c6227fee4b0fca0c1622641"}, {"problem": 83, "code": "not=", "user": "5c52fa3ce4b0fb8c5ffd99eb"}, {"problem": 83, "code": "(fn [& lst]\n  (= 2 (count (set lst))))", "user": "5c62979fe4b0fca0c162264c"}, {"problem": 83, "code": "(fn [& a] \n  (boolean (and \n    (not (every? identity a))\n   \t(some identity a))))", "user": "5a8aa992e4b05369db4d24d8"}, {"problem": 83, "code": "not=", "user": "5c5d8c04e4b01df32ab732b4"}, {"problem": 83, "code": "(fn [& x]\n  (= 2 (count (set x))))", "user": "5ab1665de4b073f1774425c0"}, {"problem": 83, "code": "(fn [ & a] (not (or (every? false? a) (every? true? a))))", "user": "53a5bc3ae4b0ef122a8689c3"}, {"problem": 83, "code": "(fn [& x] (= 2 (count (into #{} x))))", "user": "5c41db45e4b08cd430848ece"}, {"problem": 83, "code": "(fn [& t]\n  (and ((comp boolean some) identity t) (not-every? identity t)))", "user": "592883f1e4b072a2710fceea"}, {"problem": 83, "code": "(fn [& args] (and (> (count (filter true? args)) 0) (> (count (filter false? args)) 0)))", "user": "551ebcd7e4b08d5046aa8a4a"}, {"problem": 83, "code": "(fn [& flags]\n                 (let [tc (count (filter true? flags))]\n                   (and (< 0 tc) (not (= tc (count flags))))))", "user": "4e617114535d8ccf87e9fe5b"}, {"problem": 83, "code": "(fn some_boll_fn [& bs]\n  (let [v_bs (vec bs) f_tr (filter #{true} v_bs)]\n    (if (= (count f_tr) (count v_bs)) false (if (empty? f_tr) false true))\n    )\n  )", "user": "5c52f3fce4b0fb8c5ffd99e9"}, {"problem": 83, "code": "(fn [& c]\n  (let [s (into #{} c)]\n    (or\n      (and (not-empty\n             (disj s true)) \n           (get s true))\n     false)))", "user": "514a3fa5e4b0829bd132edb6"}, {"problem": 83, "code": "(fn [& coll]\n              (every? true? ((juxt #(some true? %) #(some false? %)) coll)))", "user": "558843dae4b059ccff29b1f3"}, {"problem": 83, "code": "(fn [& xs]\n  (< 0 (count (filter true? xs)) (count xs)))", "user": "5c73b8bae4b0fca0c16227ba"}, {"problem": 83, "code": "#(= 2 (count (group-by identity %&)))", "user": "5c6d0e51e4b0fca0c1622735"}, {"problem": 83, "code": "(fn [& args]\n    (true? (and (some true? args) (some false? args)))\n    )", "user": "5b269cf3e4b063e2438bcc35"}, {"problem": 83, "code": "not=", "user": "59cd351ee4b0ef0a1e9b5b35"}, {"problem": 83, "code": "(fn [& args] (not (or\n                   (every? #(= false %) args)\n                   (every? #(= true %) args)\n                   ))\n  )", "user": "5c6e8b57e4b0fca0c1622755"}, {"problem": 83, "code": ";(fn\n;  ([a](and(not (and a))(or a)))\n;  ([a b](and(not (and a b))(or a b)))\n;  ([a b c](and(not (and a b c))(or a b c)))\n;  ([a b c d](and(not (and a b c d))(or a b c d)))\n;  )\n\n;(fn[& x]\n;  (if(and (not-every? false? x) (not-every? true? x))\n;    true\n;    false\n;    )\n;  )\n\n;(fn[& x](and (not-every? false? x) (not-every? true? x)))\n\n;(fn[& x](and (not-every? false? x)(not-every? identity x)))\n\n;(fn[& x](cond\n;         (every? false? x) false\n;         (every? true? x) false\n;         :else true))\n\n\n;(fn[& x](cond\n;         (and(not-every? false? x)(not-every? true? x)) true\n;         :else false))\n\n(fn[& x](and\n         (true?(some true? x))\n         (not-every? true? x)\n         )\n  )", "user": "5c683fb5e4b0fca0c16226d5"}, {"problem": 83, "code": "(fn\n  [& args]\n  (let [args (apply list args)]\n    (if (reduce #(and %1 %2) args)\n      false\n      (reduce #(or %1 %2) args))))", "user": "5c706232e4b0fca0c162277e"}, {"problem": 83, "code": "not=", "user": "5c787131e4b0fca0c1622825"}, {"problem": 83, "code": "(fn [& bs] (boolean (and (some true? bs) (not (every? true? bs)))))", "user": "5c6e1006e4b0fca0c1622744"}, {"problem": 83, "code": "(fn halftrue? [& bools] (= (count (set bools)) 2))", "user": "5c7c1d8ee4b0d597f478ca88"}, {"problem": 83, "code": "(fn [& args] (and (true? (some true? args)) (not (every? true? args))))", "user": "5c723f4be4b0fca0c16227a0"}, {"problem": 83, "code": "(fn [& args]\n  (let [grouped (group-by identity args)]\n    (if (and (not= (grouped true) nil) (not= (grouped false) nil))\n      true\n      false)))", "user": "5c718e6ce4b0fca0c1622796"}, {"problem": 83, "code": "(fn [& resti] (and (not-every? true? resti) (not-every? false? resti)))", "user": "5c76577ae4b0fca0c16227ea"}, {"problem": 83, "code": "(fn [& args]\n  (> (count (partition-by true? args)) 1))", "user": "5c7d5a0ce4b0d597f478caab"}, {"problem": 83, "code": "(fn [& args]\n  (= #{true false} (set args)))", "user": "5c664b87e4b0fca0c16226a5"}, {"problem": 83, "code": "(fn [& args] (if (every? identity args) false (boolean (some true? args))))", "user": "5c7bc0a5e4b0fca0c1622865"}, {"problem": 83, "code": "(fn [& vals]\n  ((fn ht [vals st sf]\n     (if (empty? vals)\n       (and st sf)\n       (if (and st sf)\n         true\n         (ht (rest vals) (or st (= true (first vals))) (or sf (= false (first vals))))))) vals false false))", "user": "5c7ef3f3e4b0d597f478cad7"}, {"problem": 83, "code": "(fn [& rst]\n   (let [tru_count  (count (filter #(true? %) rst))]\n     (if (and (< tru_count  (count rst)) (> tru_count 0)) true false)))", "user": "5a64dcabe4b0512ff01cd9a9"}, {"problem": 83, "code": "(fn [& args] \n  (if (some false? args) (if (some true? args) true false) false))", "user": "5c748bf5e4b0fca0c16227cb"}, {"problem": 83, "code": "(fn t\n  [& args]\n  (let [l args\n        c (count l)\n        f (if (>= (count (filter false? l)) 1) true false)\n        r (if (>= (count (filter true? l)) 1) true false)\n        r2 (if (and (= true r) (> c 1) (= true f)) true false)]\n    r2))", "user": "5c7dad57e4b0d597f478caba"}, {"problem": 83, "code": "(fn [& coll]\n          (not\n            (or\n              (every? #(= true %) coll)\n              (every? #(= false %) coll))))", "user": "5c7e82cbe4b0d597f478cacb"}, {"problem": 83, "code": "(fn [& c] (if (and (not-every? true? c) (some true? c)) true false))", "user": "5b22d30ee4b08b1df1c36750"}, {"problem": 83, "code": "(fn [& args] (if (and (some true? args) (not (every? true? args))) true false))", "user": "5c8319c3e4b0c8042a70ce45"}, {"problem": 83, "code": "not=", "user": "5c7f7889e4b0d597f478cae0"}, {"problem": 83, "code": "(fn [& coll]\n  (let [c1 (sort coll)]\n    (if (first c1)\n      false\n      (if (last c1)\n        true\n        false))))", "user": "5c879edae4b048ec896c5917"}, {"problem": 83, "code": "(fn [& xs] (and (not (reduce #(and %1 %2) xs)) (reduce #(or %1 %2) xs)))", "user": "5c784248e4b0fca0c162281f"}, {"problem": 83, "code": "not=", "user": "5c82db41e4b0c8042a70ce42"}, {"problem": 83, "code": "not=", "user": "5c70641de4b0fca0c162277f"}, {"problem": 83, "code": "not=", "user": "5c7d947be4b0d597f478cab6"}, {"problem": 83, "code": "#(if (some true? %&) (if (some false? %&) 'true 'false)'false)", "user": "5c74b043e4b0fca0c16227ce"}, {"problem": 83, "code": "not=", "user": "5c7c8c72e4b0d597f478ca96"}, {"problem": 83, "code": "not=", "user": "5c7741dce4b0fca0c1622806"}, {"problem": 83, "code": "not=", "user": "5c706454e4b0fca0c1622780"}, {"problem": 83, "code": "(fn [& xs]\n  (true? (and (some true? xs) (some false? xs))))", "user": "5c8860bce4b048ec896c5928"}, {"problem": 83, "code": "(fn ht [& lst] (true? (and (some true? lst) (some false? lst))))", "user": "5c7d5463e4b0d597f478caa9"}, {"problem": 83, "code": "not=", "user": "5c75a830e4b0fca0c16227e0"}, {"problem": 83, "code": "not=", "user": "5c746c31e4b0fca0c16227c8"}, {"problem": 83, "code": "(fn [& b] (boolean (and (some true? b) (some false? b))))", "user": "5c558070e4b0fb8c5ffd9a1e"}, {"problem": 83, "code": "not=", "user": "5c852e3ae4b0c8042a70ce78"}, {"problem": 83, "code": "(fn [& args]\n  (and (not (every? #(identity %) args))\n       (not (every? #(not %) args))))", "user": "57fc0719e4b0d3187e900987"}, {"problem": 83, "code": "(fn [& x] (and (not (nil? (some true? x))) (not (every? true? x))))", "user": "5c308385e4b0d62ef62d9f1c"}, {"problem": 83, "code": "(fn [& bools] (and (not-every? false? bools) (not-every? true? bools) ))", "user": "5c7bb8c0e4b0fca0c1622864"}, {"problem": 83, "code": "not=", "user": "5c86b769e4b0c8042a70ce9b"}, {"problem": 83, "code": "(fn [& vals] (and (boolean (some identity vals)) (not (every? identity vals))))", "user": "565ee190e4b068f2fe63dc38"}, {"problem": 83, "code": "#(true? (and (some true? %&) (some false? %&)))", "user": "5c891afde4b048ec896c5935"}, {"problem": 83, "code": "(fn xor\n  [& x]\n  (and \n   (reduce #(or %1 %2) false x)\n   (not (reduce #(and %1 %2) true x)))\n  )", "user": "5c92105ce4b048ec896c59f7"}, {"problem": 83, "code": "(fn [& xs]\n   (boolean (and (seq (filter true? xs))\n                 (seq (filter false? xs)))))", "user": "5c896f46e4b048ec896c5940"}, {"problem": 83, "code": "(fn [& args]\n          (and\n           (true? (some true? args))\n           (not (every? true? args))))", "user": "5c995fa4e4b048ec896c5a96"}, {"problem": 83, "code": "(fn [& s] (boolean (and (some identity s) (some not s))))", "user": "5bd0ea60e4b0e9689409ee45"}, {"problem": 83, "code": "(fn turs?\n  [& lst]\n  (if (empty? (filter true? lst))\n    false\n    (if (empty? (filter false? lst))\n      false\n      true)))", "user": "5c9d0a0be4b048ec896c5afc"}, {"problem": 83, "code": "(fn [& xs]\n   (if (= (count xs) (count (filter identity xs)))\n     false\n     (reduce (fn [acc val]\n               (if (or acc val)\n                 true\n                 false)) false xs)))", "user": "4f2a7174e4b0d6649770a03e"}, {"problem": 83, "code": "(fn [& args]                                                                                                                              \n  (boolean (and (some true? args) (some false? args))))", "user": "50f01f44e4b0bdaecbb47daf"}, {"problem": 83, "code": "#(if (and (some true? %&) (some false? %&)) true false)", "user": "56f5d0efe4b046a417f92078"}, {"problem": 83, "code": "(fn [& c] (boolean (and (some true? c) (some false? c))))", "user": "5c24671be4b07e362c2305a1"}, {"problem": 83, "code": "(fn [& args] \n  (true? (and (some true? args) (some false? args))))", "user": "55ed37ebe4b0121d4835fdd6"}, {"problem": 83, "code": "(fn [& more]\n  (and (boolean (some identity more)) (not-every? identity more)))", "user": "5ca14eb1e4b048ec896c5b7d"}, {"problem": 83, "code": "#(true? \n  (and\n    (some true? %&)\n    (some false? %&)))", "user": "5ca19c10e4b048ec896c5b81"}, {"problem": 83, "code": "(fn [ & s ] (boolean (and (some true? s) (some false? s))))", "user": "5cab33e7e4b048ec896c5c48"}, {"problem": 83, "code": "not=", "user": "5c371f5be4b0d62ef62d9f72"}, {"problem": 83, "code": "not=", "user": "5ca1c45ae4b048ec896c5b85"}, {"problem": 83, "code": "(fn [& elements]\n    (boolean (and (not-every? identity elements) (some identity elements)))\n    )", "user": "5c9dcb36e4b048ec896c5b1d"}, {"problem": 83, "code": "(fn [& args]\n  (true?\n   (and\n    (some true? args)\n    (some false? args))))", "user": "5c9419fae4b048ec896c5a2b"}, {"problem": 83, "code": "not=", "user": "5be96111e4b0f319e2d7ec70"}, {"problem": 83, "code": "(fn check [& x]\n  (let [c (count x)]\n    (and \n      (not= c (count (filter #(= % true) x)))\n      (not= c (count (filter #(= % false) x)))\n      )\n    )\n  )", "user": "5c9b848fe4b048ec896c5acf"}, {"problem": 83, "code": "#(if (and (some true? %&) (some false? %&)) true false)", "user": "5c950334e4b048ec896c5a44"}, {"problem": 83, "code": "(fn [& y] (and ((fn sometrue [x]\n                   (if (empty? x) false (if (= true (first x)) \n                                          true\n                                          (sometrue (rest x))))) y)\n                ((fn notalltrue [x]\n                   (if (empty? x) false (if (= false (first x))\n                                          true\n                                          (notalltrue (rest x))))) y)\n                ))", "user": "58b84c28e4b0ebc645576d94"}, {"problem": 83, "code": "#(true? (and (some true? %&) (some false? %&)))", "user": "5cb71f35e4b026601754b961"}, {"problem": 83, "code": "#(true? (and\n    (some true? %&)\n    (some false? %&)))", "user": "5c51c930e4b0fb8c5ffd99ce"}, {"problem": 83, "code": "(fn q83 [& b]\n  ((complement nil?) (and (some #(true? %) b) (some #(false? %) b))))", "user": "5cab0ad9e4b048ec896c5c46"}, {"problem": 83, "code": "(fn f [& args] (if (every? true? args) false (if (some true? args) true false)))", "user": "5cb4e764e4b026601754b929"}, {"problem": 83, "code": "#(boolean (and (some false? %&) (some true? %&)))", "user": "5afb3426e4b0cc2b61a3bcf5"}, {"problem": 83, "code": "#(= 2 (count (group-by identity %&)) )", "user": "5ca7b5bbe4b048ec896c5c04"}, {"problem": 83, "code": "(fn [& c] (or (and\n                 (some #(true? %) c)\n                 (some #(false? %) c)) false))", "user": "5a6dbaf5e4b0512ff01cda63"}, {"problem": 83, "code": "(fn [& xs]\n  (boolean\n    (and (not-every? identity xs)\n         (some identity xs))))", "user": "5beda647e4b0a6d31fed2122"}, {"problem": 83, "code": "not=", "user": "5cbeadf2e4b0ccb061962755"}, {"problem": 83, "code": "(fn [x & rs]\n    (let [li (cons x rs) c (frequencies li)]\n      (and (not (= (c true) (count li))) (not (nil? (c true))))))", "user": "5cc6f982e4b0ccb06196282d"}, {"problem": 83, "code": "(fn xor [& conds] (if (> (count (into #{} conds)) 1)\n                    true\n                    false))", "user": "5c547cf0e4b0fb8c5ffd9a0b"}, {"problem": 83, "code": "not=", "user": "59ef5280e4b0966464fe6a2b"}, {"problem": 83, "code": "(fn [& vals]\n  (boolean (and (reduce (fn [m o] (if o true m)) false vals)\n            (some not vals))))", "user": "4fbe2cfbe4b081705acca30c"}, {"problem": 83, "code": "(fn [& args]\n  (= 2 (count (set args))))", "user": "59ea07c9e4b0249b72820756"}, {"problem": 83, "code": "(fn [& args]\n  (= true (and (some true? args) (some false? args))))", "user": "5cbd5b42e4b026601754b9f6"}, {"problem": 83, "code": "(fn [& args] (if (= 1 (count (set args))) false (reduce #(or %1 %2) args)))", "user": "5ccb3792e4b0ccb061962882"}, {"problem": 83, "code": "not=", "user": "5cc6b4bfe4b0ccb061962827"}, {"problem": 83, "code": "#(not(apply = %&))", "user": "5cc7692ce4b0ccb061962837"}, {"problem": 83, "code": "(fn [& bs] (and (not-every? identity bs) (not-every? not bs)))", "user": "5ccf2dc3e4b0ccb0619628c2"}, {"problem": 83, "code": "not=", "user": "5ccfeb57e4b0ccb0619628cc"}, {"problem": 83, "code": "(fn [& xs] (and ((comp boolean some) identity xs) (not-every? identity xs)))", "user": "5cd1f5dae4b0ccb0619628f7"}, {"problem": 83, "code": "not=", "user": "5cd16cd4e4b0ccb0619628e8"}, {"problem": 83, "code": "not=", "user": "5cc4b34de4b0ccb061962805"}, {"problem": 83, "code": ";#(= 2 (count (partition-by true? (sort %&))))\n;#(= 2 (count (group-by true? (sort %&))))\n;#(= 2 (count (zipmap %& (range))))\n;#(= 2 (count (distinct %&)))\n;#(= 2 (count (set %&)))\nnot=", "user": "5ccf21c4e4b0ccb0619628c1"}, {"problem": 83, "code": "(fn [& symbols] (and (contains? (set symbols) true)\n                                     (contains? (set symbols) false)))", "user": "5b59c2bde4b02d533a91bd80"}, {"problem": 83, "code": "not=", "user": "5cd99bebe4b05ee0cb311707"}, {"problem": 83, "code": "#(= 2 (count (into #{} %&)))", "user": "5cd639b4e4b0ccb061962940"}, {"problem": 83, "code": "(fn [& xs]\n  (or (and (not-every? true? xs)\n           (some true? xs))\n      false))", "user": "5ce077e9e4b0a17bb84e2b0c"}, {"problem": 83, "code": "(fn [& xs]\n  (loop [once false all nil data xs]\n    (cond \n     (empty? data) (and once (not all))\n     :else (recur (if (first data) true once) \n                  (cond \n                   (not (first data)) false \n                   (and (first data) (nil? all)) true\n                   :else all) (rest data)))))", "user": "5cbb0436e4b026601754b9cc"}, {"problem": 83, "code": "(fn [& var]\n   (loop [isTruePresent false isFalsePresent false item var]\n     (println isTruePresent isFalsePresent item)\n     (if (and isTruePresent isFalsePresent)\n       true\n       (do (if (empty? item)\n             false\n             (recur (or isTruePresent (first item)) (not (or isFalsePresent (first item))) (rest item) )))\n       )))", "user": "5ccc2a03e4b0ccb06196288f"}, {"problem": 83, "code": "#(boolean (and (some identity %&) \n               (not (every? identity %&))))", "user": "5cdfe2aee4b0a17bb84e2b04"}, {"problem": 83, "code": "#(> (count (partition-by identity %&)) 1)", "user": "5ce41d1be4b0a17bb84e2b50"}, {"problem": 83, "code": "#(every? true? [(some true? %&) (some false? %&)])", "user": "5cdd934ce4b05ee0cb311761"}, {"problem": 83, "code": "(fn [& args] (and (boolean (some true? args)) (not (every? true? args))))", "user": "5ce2b15fe4b0a17bb84e2b2c"}, {"problem": 83, "code": "(fn [& args] \n  (if (nil? (some true? (seq args)))\n    false\n    (if (some false? (seq args))\n      true\n      false)))", "user": "5ce52271e4b0a17bb84e2b69"}, {"problem": 83, "code": "(fn[& xs](if(reduce #(and %1 %2) xs)false(reduce #(or  %1  %2) xs)))", "user": "5ce62d8ee4b0a17bb84e2b83"}, {"problem": 83, "code": "(fn [& a] (if (or (=  (count a) (apply + (map #(if % 1 0) a)))     (= 0 (apply + (map #(if % 1 0) a))))\n  false\n  true\n))", "user": "5ce44ee2e4b0a17bb84e2b57"}, {"problem": 83, "code": "(fn [& args]\n  (let [cc (count (filter true? args))\n        arg_cc (count args)]\n\t(cond \n     (= arg_cc cc) false\n     (= 0 cc) false\n     (> cc 0) true)))", "user": "5c09e555e4b0bdcf453d16fd"}, {"problem": 83, "code": "not=", "user": "5baaae06e4b0a20761a23464"}, {"problem": 83, "code": "(fn [& booleans]\n   (let [{trueVals true falseVals false\n          :or {trueVals 0 falseVals 0}}\n         (frequencies booleans)]\n     (and (> trueVals 0) (> falseVals 0))))", "user": "54da46e5e4b024c67c0cf753"}, {"problem": 83, "code": "(fn [& all] (if (every? true? all) false (if (some true? all) true false)))", "user": "5ce78776e4b0a17bb84e2ba2"}, {"problem": 83, "code": "(fn [& x]\n  (and (not-every? false? x) (not-every? true? x)))", "user": "5cdda90ce4b05ee0cb311766"}, {"problem": 83, "code": "(fn [& args] (boolean (and (some true? args) (some false? args))))", "user": "5cbdc591e4b026601754ba00"}, {"problem": 83, "code": "(fn [& x] (if (every? (partial = true) x) false (not (every? (partial = false) x))))", "user": "592bb806e4b072a2710fcf46"}, {"problem": 83, "code": "not=", "user": "53d612cbe4b0e771c3025452"}, {"problem": 83, "code": "(fn [& args]\n  (let [lista (set args)]\n    (and (= (first lista) true) (= (second lista) false))))", "user": "5be0b916e4b0ed4b8aab4c8f"}, {"problem": 83, "code": "(fn [x & xs]\n   (let [ys (concat [x] xs)\n         ts (filter true? ys)]\n     (and (not= (count ys) (count ts))\n          (>= (count ts) 1))))", "user": "52281e1ee4b0186687e23a69"}, {"problem": 83, "code": "(fn [& lst]\n  (cond\n   (every? true? lst) false\n   (some true? lst) true\n   :else false\n   ))", "user": "5cebafbbe4b0a17bb84e2be6"}, {"problem": 83, "code": "(fn [& args]\n   (let [are-all-true (every? true? args)\n         are-all-false (every? false? args)]\n     (if (true? are-all-true) \n       false\n       (not (true? are-all-false)))))", "user": "5ce36e02e4b0a17bb84e2b3e"}, {"problem": 83, "code": "(fn some-but-not-all\n  [& args]\n  (cond\n    (and\n      (some true? (vec args))\n      (not (every? true? (vec args)))\n    ) true\n    :else false\n  )\n)", "user": "5c3440fee4b0d62ef62d9f50"}, {"problem": 83, "code": "#(= (into #{} %&) #{true false})", "user": "5c665311e4b0fca0c16226a7"}, {"problem": 83, "code": "#(if (= 0 (count %&)) false (if (every? true? %&) false (not (nil? (some true? %&)))))", "user": "5cece5a2e4b0a17bb84e2bfb"}, {"problem": 83, "code": "(fn test [& bs] (not (not (and (some identity bs) (not (every? identity bs))))))", "user": "5cf4094be4b0aaa82f112a35"}, {"problem": 83, "code": "(fn [& bs]\n  (true? (and (some true? bs)\n              (not-every? true? bs))))", "user": "5cf935f4e4b0b71b1d808a8f"}, {"problem": 83, "code": "(fn [& coll]\n  (if (and true (some true? coll) (not-every? true? coll))\n    true\n    false))", "user": "5cf62ecce4b087f62be35aa7"}, {"problem": 83, "code": "(fn [& bools]\n  (and (boolean (some true? bools))\n       (boolean (some false? bools))))", "user": "5a23503fe4b0ff51aa4b32d6"}, {"problem": 83, "code": "(fn [ & vals ]\n  (and (not-every? identity vals) (not (not-any? identity vals))))", "user": "5ccb0bbee4b0ccb06196287c"}, {"problem": 83, "code": "not=", "user": "5cee521ce4b0aaa82f1129dd"}, {"problem": 83, "code": "not=", "user": "5ceedd7ae4b0aaa82f1129e4"}, {"problem": 83, "code": "(fn [a & r]\n  (let [all (conj r a)]\n    (true? (and (some true? all)\n                    (some false? all)))))", "user": "5d06499ae4b0cc9c915881ec"}, {"problem": 83, "code": "(fn [& args]\n  (let [s ((set args) true)]\n    \n    (if (or (nil? s) (not (contains? (set args) false))) false true)))", "user": "5c3f29d4e4b08cd430848e8f"}, {"problem": 83, "code": "(fn [& args]\n  (if (every? true? args)\n    false\n    (if (some true? args)\n      true\n      false)))", "user": "5d03944de4b0cc9c915881c5"}, {"problem": 83, "code": "(fn [& args]\n  (if (= true (every? true? args))\n    false\n    (if (= true (every? false? args))\n      false\n      true)))", "user": "5cd4e1b2e4b0ccb061962927"}, {"problem": 83, "code": "(fn [& args] (< 1 (count (set args))))", "user": "5d046f7ce4b0cc9c915881d5"}, {"problem": 83, "code": "(fn [& args] (not (apply = args)))", "user": "5d0815b3e4b0cc9c91588201"}, {"problem": 83, "code": "(fn [& params]\n  (if\n    (and\n      (some true? params)\n      (not-every? true? params))\n    true\n    false))", "user": "5d0859fbe4b0cc9c91588208"}, {"problem": 83, "code": "(fn [& bools]\n  (boolean\n  (and\n   (some identity bools)\n   (not (every? identity bools)))))", "user": "58dde189e4b0a4d5acaab6dd"}, {"problem": 83, "code": "(fn half-truth\n  [& aseq]\n  (let [tru (some #(= true %) aseq)\n        fal (some #(= false %) aseq)]\n    (= tru fal)))", "user": "5d110abee4b02c15ef021983"}, {"problem": 83, "code": "#(not (or (every? true? %&) (nil? (some true? %&))))", "user": "5d02fe44e4b0cc9c915881c0"}, {"problem": 83, "code": "(fn [& xs] (and (not-every? identity xs) (not-every? not xs)))", "user": "5a08f951e4b01bb0ae8afdfd"}, {"problem": 83, "code": "(fn [& x]\n  (boolean (and (some true? x) (some false? x)))\n  )\n;not=", "user": "5cfee28de4b0cc9c91588185"}, {"problem": 83, "code": "#(true?\n  (and \n  \t(some true? %&)\n    (some false? %&)\n  )\n)", "user": "5d1b2a1ee4b02ea6f0fb6979"}, {"problem": 83, "code": "(comp not not #{2} count distinct list)", "user": "5d1a1082e4b0902706380e0e"}, {"problem": 83, "code": "#(and (not-every? true? %&)\n      (not-every? false? %&))", "user": "58472aade4b089d5ab817ea0"}, {"problem": 83, "code": "(fn [& c] (apply not= c))", "user": "5d1bbef0e4b02ea6f0fb6984"}, {"problem": 83, "code": "(fn [& coll]\n          (not\n            (or\n              (every? #(= true %) coll)\n              (every? #(= false %) coll))))", "user": "5b9ae606e4b0c0b3ffbd4af2"}, {"problem": 83, "code": "(fn\n  [& bools]\n  (= true (and (some #(= true %) bools)\n              (some #(= false %) bools))))", "user": "570c8ac3e4b0b0fb43fd06ca"}, {"problem": 83, "code": "(fn [& args] (if (and (some true? args) (some false? args)) true false))", "user": "5d2201b8e4b02ea6f0fb69ed"}, {"problem": 83, "code": "not=", "user": "5d1b59abe4b02ea6f0fb697e"}, {"problem": 83, "code": "(fn [& x] \n  (true? \n   (and (some true? x) (some false? x))\n   ))", "user": "5d23430ae4b02ea6f0fb6a05"}, {"problem": 83, "code": "not=", "user": "5c59b836e4b01df32ab73263"}, {"problem": 83, "code": "not=", "user": "559622cee4b0c79f6e1db975"}, {"problem": 83, "code": "(fn [& args]\n      (and (not (every? true? args)) (boolean (some true? args))))", "user": "5ccf99fbe4b0ccb0619628c8"}, {"problem": 83, "code": "#(true? \n  (and\n    (some true? %&)\n    (some false? %&)))", "user": "5952d75ce4b066ee0a44aed4"}, {"problem": 83, "code": "#(boolean (and (some true? %&) (some false? %&)))", "user": "5bc09ebae4b07a9b28b10005"}, {"problem": 83, "code": "(fn half-truth [& body]\n  (= 2 (count (set body))))", "user": "5d24e49be4b02ea6f0fb6a2a"}, {"problem": 83, "code": "(fn half-truth [& body]\n (= 2 (count (set body))))", "user": "5d1cf523e4b02ea6f0fb6994"}, {"problem": 83, "code": "(fn [& args] (boolean (and (not-every? identity args) (some identity args))))", "user": "5d272077e4b092dab7f59c64"}, {"problem": 83, "code": "(fn half-truth [& bs]\n  (if (apply = bs)\n    false\n    (some identity bs)))", "user": "5cdc08a2e4b05ee0cb31173a"}, {"problem": 83, "code": "(fn\n  [& coll]\n  (and (not (nil? (some true? coll))) (not-every? true? coll)))", "user": "5d1c14cde4b02ea6f0fb698a"}, {"problem": 83, "code": "(fn [& bools]\n  (true? (and (some true? bools) (some false? bools))))", "user": "5d231255e4b02ea6f0fb69fe"}, {"problem": 83, "code": "not=", "user": "5d0beecee4b0cc9c91588239"}, {"problem": 83, "code": "(fn [& vars]\n  (cond\n   (every? true? vars) false\n   (some true? vars) true\n   :else false))", "user": "5d138119e4b0902706380dbb"}, {"problem": 83, "code": "(fn half-truth\n  ([]\n   false)\n  ([a]\n   false)\n  ([a & args]\n   (let [result (reduce (fn[acc x]\n                          (if (= true x)\n                            (bit-or acc 1)\n                            (bit-or acc 2)))\n                  0\n                  (list* a args))]\n     (if (= 3 result)\n       true\n       false))))", "user": "5cf1d9e3e4b0aaa82f112a18"}, {"problem": 83, "code": "(fn [& bools] (and (reduce #(or %1 %2) bools) (not (reduce #(and %1 %2) bools))))", "user": "5d13f783e4b0902706380dc1"}, {"problem": 83, "code": "(fn foo [& args]\n  (let [coll-true (filter true? args) coll-false (filter false? args) has-false (pos? (count coll-false)) has-true (pos? (count coll-true)) ]\n    (and has-false has-true)\n    )\n  )", "user": "5d270111e4b092dab7f59c62"}, {"problem": 83, "code": "(fn [& x] (and (reduce #(or %1 %2) x) (not (reduce #(and %1 %2) x))))", "user": "5d2ca236e4b01671435dbc94"}, {"problem": 83, "code": "(fn [& bs] (boolean (and (not-every? true? bs) (some true? bs))))", "user": "5d13af73e4b0902706380dbe"}, {"problem": 83, "code": "not=", "user": "5d2bfb68e4b01671435dbc86"}, {"problem": 83, "code": "not=", "user": "5d28222ee4b092dab7f59c7a"}, {"problem": 83, "code": "not=", "user": "5cf895efe4b0b71b1d808a85"}, {"problem": 83, "code": "(fn half-truth [& body]\n (= 2 (count (set body))))", "user": "5cfabf53e4b0cc9c91588148"}, {"problem": 83, "code": "#(true? \n  (and\n    (some true? %&)\n    (some false? %&)))", "user": "5d2ec77fe4b01671435dbcb4"}, {"problem": 83, "code": "(fn half-true [& terms]\n  (true? \n   (and\n    (some true? terms)\n    (some false? terms))))", "user": "5d25abc9e4b02ea6f0fb6a37"}, {"problem": 83, "code": "(fn [& a]\n   (and \n    (not (every? false? a))\n    (not (every? true? a))))", "user": "5bb25684e4b0a20761a2350d"}, {"problem": 83, "code": "not=", "user": "5d0e9931e4b0cc9c91588258"}, {"problem": 83, "code": "(fn halftrue [& boos]\n               (let [t (filter #(= true %) boos)\n                     f (filter #(= false %) boos)]\n                 (if (and (< 0 (count t)) (< 0 (count f)))\n                   true\n                   false)))", "user": "5cb11a72e4b026601754b8c6"}, {"problem": 83, "code": "(fn [& args]\n  (and (= (reduce #(or %1 %2) false args) true) (= (reduce #(and %1 %2) true args) false)))", "user": "5a962c09e4b0d174b936c765"}, {"problem": 83, "code": "not=", "user": "5d29c06be4b01671435dbc6b"}, {"problem": 83, "code": "#(boolean (and (some true? %&) (not-every? true? %&)))", "user": "5d370811e4b01671435dbd2d"}, {"problem": 83, "code": "not=", "user": "5716d585e4b07c98581c3b03"}, {"problem": 83, "code": "(fn [& a] (or (and (some identity a) (some not a)) false))", "user": "58b997afe4b0888cdc949cd1"}, {"problem": 83, "code": "(fn half-truth [x & xs] (not (every? #(= % x) xs)))", "user": "5d321852e4b01671435dbce8"}, {"problem": 83, "code": "(fn [& bools] \n  (if (every? identity bools) false (not (nil? (some identity bools)))))", "user": "5d3ae729e4b01671435dbd5d"}, {"problem": 83, "code": "not=", "user": "5cf53196e4b087f62be35a94"}, {"problem": 83, "code": "#(not (apply = %&))", "user": "5d40442ee4b05dd059a54362"}, {"problem": 83, "code": "not=", "user": "5cf68090e4b0b71b1d808a59"}, {"problem": 83, "code": "(fn [& v] \n  (and (not (every? true? v))\n       (not (every? false? v))))", "user": "54b331dbe4b09f271ff37d37"}, {"problem": 83, "code": "(fn\n  [& args]\n  (boolean (and (not (every? identity args))\n       (some identity args))))", "user": "5b4b8cd6e4b02d533a91bc9f"}, {"problem": 83, "code": "(fn [& args]\n  (and (not-every? true? args)\n       \t\t(not (every? false? args))))", "user": "5cb41c40e4b026601754b911"}, {"problem": 83, "code": "(fn [& coll]\n  (loop [x (first coll)\n         xs (rest coll)\n         some-true false\n         all-true true]\n    (if (nil? x)\n      (and some-true (not all-true))\n      (recur (first xs) (rest xs) (or some-true x) (and all-true x)))))", "user": "5d35f997e4b01671435dbd1a"}, {"problem": 83, "code": "(fn half-truth [& bools] \n  (and \n   (not (every? true? bools)) \n   (not (every? false? bools))))", "user": "5d45bd1de4b07c84aa5ae6a4"}, {"problem": 83, "code": "(fn [First & Rest]\n    (and \n      ;; \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e true \u0434.\u0431. \u0431\u043e\u043b\u044c\u0448\u0435 \u043d\u0443\u043b\u044f\n      (< 0 (count (filter true? (conj Rest First) ) ) )\n      ;; \u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e false \u0434.\u0431. \u0431\u043e\u043b\u044c\u0448\u0435 \u043d\u0443\u043b\u044f\n      (< 0 (count (filter false? (conj Rest First) ) ) )\n    )\n  )", "user": "5d4a6c6ce4b0776584bd6f22"}, {"problem": 83, "code": "(fn [& more]\n  (if (every? true? more)\n    false\n    (reduce #(or %1 %2) more)))", "user": "5ad76df9e4b0ea6055cfac18"}, {"problem": 83, "code": "#(if (and (some true? %&) (some false? %&)) true\n   false)", "user": "5d48e6d3e4b0776584bd6f15"}, {"problem": 83, "code": "not=", "user": "5d47f4dbe4b07c84aa5ae6b5"}, {"problem": 83, "code": "(fn sometrue [& vargs] \n  (if (and (some true? vargs) (not (every? true? vargs)))\n    true\n    false))", "user": "56bff105e4b060a8e693e3a4"}, {"problem": 83, "code": "(fn [& x] (= (some false? x)\n          (some true? x)\n          ))", "user": "5ab07d63e4b073f1774425af"}, {"problem": 83, "code": "not=", "user": "5bdc4a76e4b0ed4b8aab4c30"}, {"problem": 83, "code": "(fn [& all]\n  (let [trues (count (filter true? all))]\n       (if (and (not= trues 0) (not= trues (count all)))\n         true\n         false)))", "user": "5bf06734e4b0a6d31fed2153"}, {"problem": 83, "code": "(fn [& bools] (boolean (and (some true? bools) (some false? bools))))", "user": "5259451ce4b0cb4875a45cd7"}, {"problem": 83, "code": "(fn half-truth\n  [& ls]\n  (if (and (some #(= % true) ls) (some #(= % false) ls))\n    true\n    false))", "user": "5d48884ee4b07c84aa5ae6bb"}, {"problem": 83, "code": "(fn [& args]\n\t(= 2 (count (set args))))", "user": "5cf48f04e4b087f62be35a86"}, {"problem": 83, "code": "#(> (count (distinct %&)) 1)", "user": "5d0bb4fae4b0cc9c91588237"}, {"problem": 83, "code": "not=", "user": "5d4f21f3e4b0776584bd6f4e"}, {"problem": 83, "code": "not=", "user": "5d5502cbe4b02ba5928a680b"}, {"problem": 83, "code": "(fn some-not-all? [& coll]\n  (or (and\n       (not (every? true? coll))\n       (some true? coll))\n      false))", "user": "5146f343e4b04ef915e3731e"}, {"problem": 83, "code": "(fn [& bools]\n    (if (and (> (count (filter (partial = false) bools)) 0)\n             (> (count (filter (partial = true) bools)) 0))\n      true\n      false))", "user": "5c58736be4b01df32ab73247"}, {"problem": 83, "code": "not=", "user": "5d5a79cce4b02ba5928a6833"}, {"problem": 83, "code": "(fn [& args]\n  (and\n  (> (count (filter true? args)) 0)\n  (> (count (filter false? args)) 0)\n  ))", "user": "5d590500e4b02ba5928a6824"}, {"problem": 83, "code": "(fn [& bs]\n  (and (boolean (some true? bs)) (not-every? true? bs))\n)", "user": "5d07989ee4b0cc9c915881fb"}, {"problem": 83, "code": "(fn [& args]\n                (if (and \n                     (some true? args)\n                     (some false? args))\n                     true\n                     false))", "user": "5d4df658e4b0776584bd6f41"}, {"problem": 83, "code": "(fn [& args] (= 2 (count (set args))))", "user": "5d5e9f45e4b0c9e5857d4ff5"}, {"problem": 83, "code": "(fn [& args]\n  (let [x (filter true? args)]\n    (and (not= (count args) (count x))\n         (not= (count x) 0))))", "user": "5d6042f2e4b0c9e5857d5006"}, {"problem": 83, "code": "not=", "user": "5d28b684e4b092dab7f59c83"}, {"problem": 83, "code": "(fn [& argus]\n  (if (and (< (count (filter true? argus)) \n              (count argus))\n           (> (count (filter true? argus))\n              0))\n    true\n    false))", "user": "5d2c779be4b01671435dbc8d"}, {"problem": 83, "code": "#(= 2 (count (distinct %&)))", "user": "5d5166d9e4b0776584bd6f5e"}, {"problem": 83, "code": "(fn [& args]\n  (= (and (some (fn [x] x) args)\n     \t  (some (fn [x] (not x)) args))\n     true))", "user": "5d64013ce4b0c9e5857d502d"}, {"problem": 83, "code": "#(= (set %&) #{true false})", "user": "5d63ba44e4b0c9e5857d5026"}, {"problem": 83, "code": "(fn [& args] (boolean (and (some true? args) (some false? args))))", "user": "5d629ed9e4b0c9e5857d501d"}, {"problem": 83, "code": "(fn half-truth?\n  [& args]\n  (and (not-every? true? args)\n       (not-every? false? args)))", "user": "5d53a59ae4b0776584bd6f72"}, {"problem": 83, "code": "not=", "user": "559ba500e4b066d22e731f58"}, {"problem": 83, "code": "(fn [& c] (every? true? [(not (every? true? c)) (some true? c)]))", "user": "5b329773e4b025bcb146f322"}, {"problem": 83, "code": "not=", "user": "5d67c955e4b0db5d338d15f7"}, {"problem": 83, "code": "(fn [& boolean-seq] (= 2 (count (set boolean-seq))))", "user": "5cf72682e4b0b71b1d808a68"}, {"problem": 83, "code": "(fn [& ls]\n  (and\n   (not-every? identity ls)\n   (true? (some identity ls))))", "user": "5d672bd7e4b0db5d338d15f1"}, {"problem": 83, "code": "#(true? (and (some true? %&) (some false? %&)))", "user": "5d4cf3e9e4b0776584bd6f38"}, {"problem": 83, "code": "not=", "user": "5ad5bb0ae4b0ea6055cfabf0"}, {"problem": 83, "code": "(fn [& bool] (if (and (some true? bool) (not (every? true? bool))) true false))", "user": "5d662fb5e4b0db5d338d15e1"}, {"problem": 83, "code": "(fn half-truth [& args]\n  (and (not (every? true? args)) (not (every? false? args))))", "user": "5d4c83b7e4b0776584bd6f34"}, {"problem": 83, "code": "(fn [& args]\n  (let [trues (count (filter #{true} args))]\n    (and (> trues 0) (< trues (count args)))))", "user": "5d68f5e6e4b0db5d338d1605"}, {"problem": 83, "code": "(fn [& bs]\n  (and (not (every? true? bs))\n       (boolean (some true? bs))))", "user": "5d609ddde4b0c9e5857d5008"}, {"problem": 83, "code": "(fn [& args] (let [fc (count (filter (fn [y] (true? y)) args))] (and (< fc (count args)) (> fc 0))))", "user": "5d6fae1ee4b04d129b00f2d4"}, {"problem": 83, "code": "#(not (apply = %&))", "user": "5d6d2172e4b04d129b00f2b9"}, {"problem": 83, "code": "(fn  [& args]\n  (and (boolean (some true? args)) (not-every? true? args)))", "user": "5d1d4ec6e4b02ea6f0fb699f"}, {"problem": 83, "code": "not=", "user": "5d66aea7e4b0db5d338d15ec"}, {"problem": 83, "code": "(fn [& x] (> (count (set x)) 1))", "user": "5d7158f3e4b04d129b00f2e1"}, {"problem": 83, "code": "(fn [& args] \n          (and \n            (boolean (some true? args))\n            (not-every? true? args))\n          )", "user": "5a932f63e4b0d174b936c71b"}, {"problem": 83, "code": "#(not (or (every? false? %&) (every? true? %&)))", "user": "5d6691cee4b0db5d338d15e9"}, {"problem": 83, "code": "(fn [& args] (let [r (and (some true? args) (some false? args))]\n               (if (nil? r) false r)))", "user": "5d1e19c4e4b02ea6f0fb69af"}, {"problem": 83, "code": "#(boolean (and (some identity %&) (not-every? identity %&)))", "user": "59d8f23ae4b0ef0a1e9b5c49"}, {"problem": 83, "code": "#(or (and (some true? %&) (some false? %&))\n       false)", "user": "5a7f77fae4b00b71e582a041"}, {"problem": 83, "code": "#(and (not= nil (some true? %&)) (not-every? true? %&))", "user": "5be79b5be4b0f319e2d7ec5a"}, {"problem": 83, "code": "(fn some-not-all [& bs]\n  (true? (and (some #(false? %) bs)\n              (some #(true? %) bs))))", "user": "5d64ecb2e4b0c9e5857d5036"}, {"problem": 83, "code": "(fn [& c]\n  (and (apply (some-fn true?) c)\n       (apply (some-fn false?) c)))", "user": "5d764e52e4b02e6b30c93524"}, {"problem": 83, "code": "(fn [& coll]\n  (let [trues  (filter true? coll)\n        falses (filter false? coll)]\n    (and (pos? (count trues)) (pos? (count falses)))))", "user": "524a9556e4b05ef8e38e64b1"}, {"problem": 83, "code": "#(if (= 1 (count (set %&))) false true)", "user": "5d52bf29e4b0776584bd6f69"}, {"problem": 83, "code": "(fn\n  [& coll]\n  (if (and (some true? coll) (not (every? true? coll)))\n    true\n    false))", "user": "5d6d2e11e4b04d129b00f2ba"}, {"problem": 83, "code": "not=", "user": "5a7de7a3e4b03baeef927702"}, {"problem": 83, "code": "(fn [& bools]\n  (let [nt (count (filter true? bools))\n        nf (count (filter false? bools))]\n    (and (> nt 0)\n         (> nf 0))))", "user": "52860baae4b0239c8a67ae09"}, {"problem": 83, "code": "#(true?\n   (and\n     (some true? %&)\n     (some false? %&)))", "user": "5d6e5b53e4b04d129b00f2c6"}, {"problem": 83, "code": "#(true? \n  (and\n    (some true? %&)\n    (some false? %&)))", "user": "5c0fedade4b01240ff567157"}, {"problem": 83, "code": "#(= (count (into #{} %&)) 2)", "user": "5d5b2678e4b06a698e928ee2"}, {"problem": 83, "code": "(fn ex [& x]\n  (every? true? [(not (every? true? x)) (some true? x)]))", "user": "5d6febe6e4b04d129b00f2d5"}, {"problem": 83, "code": "(fn [& truths]  (not= nil (and (some false? truths) (some true? truths))))", "user": "5d824225e4b0915913b1d37f"}, {"problem": 83, "code": "(fn half-truth[& args]\n  (letfn [(my-and [& args] (and (first args) (if (empty? (rest args)) true  (apply my-and (rest args)))))\n          (my-or  [& args] (or  (first args) (if (empty? (rest args)) false (apply my-or  (rest args)))))]\n  (and (apply my-or args) (not (apply my-and args)))))", "user": "5d5e0259e4b0c9e5857d4fef"}, {"problem": 83, "code": "not=", "user": "5cc80598e4b0ccb061962840"}, {"problem": 83, "code": "not=", "user": "5d6d4463e4b04d129b00f2bd"}, {"problem": 83, "code": "(fn foo [& args] (let [yes (filter #(= % true) args)\n                         no (filter #(= % false) args)]\n                     (not (or (= (count args) (count yes))\n                              (= (count args) (count no))))))", "user": "5d1ef23ee4b02ea6f0fb69bb"}, {"problem": 83, "code": "(fn\n  [& args]\n  (or (and\n        (some true? args)\n        (some false? args)) false))", "user": "5d887d27e4b0915913b1d3a8"}, {"problem": 83, "code": "not=", "user": "5d81eba4e4b0915913b1d37b"}, {"problem": 83, "code": "; (fn [x & y] (and (or [x y]) (not-every? [x y])))\n\n(fn [& bools] (if (and (not-every? true? bools) (some true? bools)) true false))", "user": "5d84f5e6e4b0915913b1d38f"}, {"problem": 83, "code": "(fn [& args] (apply not= args))", "user": "5d90db73e4b0915913b1d3fc"}, {"problem": 83, "code": "#(true? (and  (some true? %&) (some false? %&)))", "user": "5d917ef0e4b0915913b1d402"}, {"problem": 83, "code": "(fn [& booleans] (and (not-every? identity booleans) (not-every? not booleans)))", "user": "5d63f1c2e4b0c9e5857d502b"}, {"problem": 83, "code": "(fn half-truth [& bools]\n   (and (not-every? true? bools)\n        (not-every? false? bools)))", "user": "5d4b2155e4b0776584bd6f28"}, {"problem": 83, "code": "(fn half-truth\n  [& bools]\n  ((fn ha-tru [bools count truths]\n    (if (empty? bools) \n      (if (> truths 0)\n        (if (= count truths)\n          false\n          true)\n        false)\n      (if (= (first bools) true)\n        (ha-tru (rest bools) count (inc truths))\n        (ha-tru (rest bools) count truths))))\n  bools (count bools) 0))", "user": "5d896a64e4b0915913b1d3b8"}, {"problem": 83, "code": "(fn \n  [& rest]\n  (if (and (some true? rest) (not-every? true? rest))\n    true\n    false))", "user": "5d96edeae4b0d3f9b434ad35"}, {"problem": 83, "code": "#(true? (and (some false? %&) (some true? %&)))", "user": "5d88d820e4b0915913b1d3b1"}, {"problem": 83, "code": "(fn  [& args] (and (not (every? not args)) (not (every? identity args))))", "user": "5d81b40ce4b0915913b1d379"}, {"problem": 83, "code": "(fn [& args]                                                                                                                                                                           \n  (if (and (some true? args) (some false? args)) true false))", "user": "57a499dae4b0a966079561e6"}, {"problem": 83, "code": "(fn [& coll] (and (boolean (some true? coll)) (not (every? true? coll))))", "user": "5d9c1226e4b0d3f9b434ad51"}, {"problem": 83, "code": "not=", "user": "5d8a832ce4b0915913b1d3ca"}, {"problem": 83, "code": ";#(boolean (and (some true? %&) (some false? %&)))\n#(->> %& set (= #{ true false }) )", "user": "5d9e7971e4b000c986472bc1"}, {"problem": 83, "code": "(fn [& vals] (= (count (distinct vals)) 2))", "user": "5c337305e4b0d62ef62d9f48"}, {"problem": 83, "code": "(fn [& args]\n  (not\n   (or (not-any? true? args)\n       (every? true? args))))", "user": "594fdfdce4b066ee0a44ae85"}, {"problem": 83, "code": "(fn half-truth [b & bs]\n  (let [booleans (conj bs b)\n        length (count booleans)\n        true-length (count (filter #(= true %) booleans))]\n    (cond\n      (= 0 true-length) false\n      (= length true-length) false\n      :else true)))", "user": "5d80f328e4b0915913b1d372"}, {"problem": 83, "code": "(fn [ & args ]\n  (let [flt (filter true? args)\n        cnt (count flt)]\n    (and (> cnt 0) (< cnt (count args)))\n    )\n  )", "user": "5d5c6675e4b09db18d4482ec"}, {"problem": 83, "code": "(fn [& args] (if (or (every? true? args) (every? false? args)) false true))", "user": "53bfd8c4e4b0c98a41f5cca8"}, {"problem": 83, "code": "(fn half-true? [& bools]\n  (boolean (and (some true? bools)\n                (not (every? true? bools)))))", "user": "5d49ec5ee4b0776584bd6f1c"}, {"problem": 83, "code": "#(true? (and (some true? %&) (not (every? true? %&))))", "user": "5d99dc47e4b0d3f9b434ad42"}, {"problem": 83, "code": "(fn [& x]\n             (if (empty? (filter false? x))\n               false\n               (not= (some true? x) nil)\n               )\n             )", "user": "5d974b1de4b0d3f9b434ad36"}, {"problem": 83, "code": "#(if (and (not (every? identity %&)) (some identity %&)) true false)", "user": "5d931a58e4b0d3f9b434ad10"}, {"problem": 83, "code": "(fn halftrue [& col]\n  (and\n    (reduce #(or %1 %2) col)\n    (not (reduce #(and %1 %2) col))\n  )\n)", "user": "56d5c1b0e4b0ea9b8538f7c3"}, {"problem": 83, "code": "#(> (count (vals (group-by true? %&))) 1)", "user": "5ccf125ce4b0ccb0619628c0"}, {"problem": 83, "code": "(fn [& bs]\n  (boolean\n  (and (some true? bs)\n       (not (every? true? bs)))))", "user": "5da8fa72e4b000c986472c2d"}, {"problem": 83, "code": "#(every? true?\n         [(some true? %&)\n          (not-every? true? %&)])", "user": "5da760ebe4b000c986472c1a"}, {"problem": 83, "code": "(fn  [& xList]     \n  (boolean (and\n    (some false? xList)\n    (some true? xList)\n  ))\n)", "user": "5da20e73e4b000c986472be1"}, {"problem": 83, "code": "(fn some-not-all [& guys]\n  (true?\n   (and\n    (some true? guys)\n    (not (every? true? guys))\n   )\n )\n)", "user": "5da975b9e4b000c986472c32"}, {"problem": 83, "code": "(fn [& bools]\n  (or (and (some true? bools)\n           (not-every? true? bools))\n      false))", "user": "5cf6522be4b0b71b1d808a58"}, {"problem": 83, "code": "(fn [& args] \n  (true? \n    (and \n      (some true? args)\n      (some false? args))))", "user": "5c2457a2e4b07e362c2305a0"}, {"problem": 83, "code": "#(= (some true? %&) (some false? %&))", "user": "5da98129e4b000c986472c33"}, {"problem": 83, "code": "(fn [& xs]\n  (true? (and (some true? xs) (some false? xs))))", "user": "5d9c9446e4b0eb781811cdae"}, {"problem": 83, "code": "(fn a-half-truth\n  [& xs]\n  (if (and (some true? xs) (some false? xs))\n    true\n    false))", "user": "5d9c8a85e4b0eb781811cdad"}, {"problem": 83, "code": "(fn [& bargs]\n   (= 2 (count (set bargs))))", "user": "5db17e0be4b010eb3c36cd03"}, {"problem": 83, "code": "#(and (not (every? identity %&))\n       (or (some identity %&) false))", "user": "5d7aa22ee4b02e6b30c9354e"}, {"problem": 83, "code": "(fn [& args]\n  (true?\n   (and (some identity args)\n        (not (every? identity args)))))", "user": "56403765e4b08d4f616f5edc"}, {"problem": 83, "code": "(fn [& l]\n  (every? true?\n          [(if (some #(= true %) l)\n             true false)\n           (if (some #(= false %) l)\n             true false)]))", "user": "5dab11cde4b000c986472c45"}, {"problem": 83, "code": "not=", "user": "5d965c73e4b0d3f9b434ad33"}, {"problem": 83, "code": "(fn [& args] \n  (boolean (and (some identity args) (not (every? identity args)))))", "user": "5da8b8ece4b000c986472c28"}, {"problem": 83, "code": "(fn [& s] (true? (and (some true? s) (some false? s))))", "user": "5d8b4960e4b0915913b1d3d3"}, {"problem": 83, "code": "(fn [& xs]\n  (boolean (and (some identity xs) (not-every? identity xs))))", "user": "5d97b602e4b0d3f9b434ad3a"}, {"problem": 83, "code": "not=", "user": "5db1969be4b010eb3c36cd06"}, {"problem": 83, "code": "(fn tf[& vv](cond\n             (every? #(= true %) vv) false     \n             (some #(= true %) vv) true\n                  \n                  :else false))", "user": "5dadf73ee4b0f8c104ccfc86"}, {"problem": 83, "code": "(fn [& args]\n  (cond\n   (every? true? args) false\n   (some true? args) true\n   :else false))", "user": "5dbe63bde4b09f47823971c7"}, {"problem": 83, "code": "not=", "user": "5db16084e4b010eb3c36cd01"}, {"problem": 83, "code": "(fn [ & arr] (loop [ xs arr alltrue true hastrue false]\n              (cond \n                (first xs) (recur (rest xs) (and alltrue true) true)\n                (empty? xs) (and hastrue (not alltrue))\n                :else (recur (rest xs) false hastrue))))", "user": "5dc12b0ae4b0e59a23173d84"}, {"problem": 83, "code": "not=", "user": "5d9e8e40e4b000c986472bc2"}, {"problem": 83, "code": "(fn half-true? [& input]\n  (true? (and (some true? input) (not (every? true? input)))))", "user": "5dba063ee4b010eb3c36cd5c"}, {"problem": 83, "code": "(fn [& args] \n  (let [coll (set args)]       \n    (and (contains? coll false) (contains? coll true))))", "user": "5db19599e4b010eb3c36cd05"}, {"problem": 83, "code": "(fn [& args] (and (apply (some-fn true?) args)\n                  (not-every? true? args)))", "user": "5dbe27c3e4b09f47823971c4"}, {"problem": 83, "code": "(fn [& all]\n  (if (reduce #(and %1 %2) all)\n    false\n    (if (some true? all)\n      true\n      false)))", "user": "5db6cc4ae4b010eb3c36cd3b"}, {"problem": 83, "code": "#(= 2 (count(keys(group-by identity %&))))", "user": "5dbb5200e4b09f47823971a9"}, {"problem": 83, "code": "(fn [& bools] (boolean (and (some identity bools) (not-every? identity bools))))", "user": "5dc9d5c3e4b03836ba07d824"}, {"problem": 83, "code": "(fn [& boolshit]\n  (and\n    (not (nil? (some #(= true %) boolshit)))\n    (not (nil? (some #(= false %) boolshit)))))", "user": "5dc72a9ce4b02f9375f4e1cd"}, {"problem": 83, "code": "#(or (and (some identity %&) (not (every? identity %&))) false)", "user": "5db92996e4b010eb3c36cd50"}, {"problem": 83, "code": "(fn [& s]\n  (boolean (and (some true? s) (some false? s))))", "user": "5a291617e4b07f18be40aa76"}, {"problem": 83, "code": "not=", "user": "5db7376fe4b010eb3c36cd43"}, {"problem": 83, "code": "(fn [& bools]\n  (and\n   (not-every? false? bools)\n   (not (every? true? bools))))", "user": "5afca248e4b0cc2b61a3bd12"}, {"problem": 83, "code": "(fn [& l]\n  (and (reduce #(or % %2) l)\n       (reduce #(or % %2) (map not l))))", "user": "5dcc0ee9e4b02b31cc3da3c2"}, {"problem": 83, "code": "(fn [& xs]\n  (true? (and\n   (some false? xs)\n   (some true? xs))))", "user": "5db5d09be4b010eb3c36cd31"}, {"problem": 83, "code": "(fn [& args] (boolean (and (not-every? identity args) (some identity args))))", "user": "5dc9ccf8e4b02f9375f4e1f1"}, {"problem": 83, "code": "not=", "user": "4fbb7010e4b081705acca2e7"}, {"problem": 83, "code": "#(= true (not (every? identity %&)) (some identity %&))", "user": "5dc98501e4b02f9375f4e1e6"}, {"problem": 83, "code": "not=", "user": "59b1a1b2e4b0e1f4e384c8eb"}, {"problem": 83, "code": "#(and (boolean (some identity %&)) (not-every? identity %&))", "user": "5dc318cde4b02f700ae81835"}, {"problem": 83, "code": "not=", "user": "5d94fdf9e4b0d3f9b434ad2b"}, {"problem": 83, "code": "(fn [& args] (and (true? (some identity args)) (not (empty? (filter #(false? %) args)))))", "user": "5da306a3e4b000c986472be7"}, {"problem": 83, "code": "#(and (not= (count %&) (count (remove false? %&))) (not= (count (remove false? %&)) 0))", "user": "5dcb1e73e4b02b31cc3da3b6"}, {"problem": 83, "code": "(fn [& args] (true?\n     (and (some false? args)\n          (some true? args))))", "user": "5dd1fb19e4b0948ae9d9ad51"}, {"problem": 83, "code": "(fn [& col]\n  (let [col-len (count col)\n      true-len   (->> col (filter true?) count)]\n  (and (> true-len 0) (> col-len true-len))\n  )\n   \n   )", "user": "59b0e877e4b0e1f4e384c8d3"}, {"problem": 83, "code": "(fn [& xs] (every? true? [(some true? xs) (not (every? true? xs))]))", "user": "5d84545ee4b0915913b1d38b"}, {"problem": 83, "code": "(fn [& args]\n  (if (and (some #(= true %) args) (some #(= false %) args))\n    true\n    false))", "user": "5d8c8175e4b0915913b1d3e1"}, {"problem": 83, "code": "(fn [& b] (true? (and (some true? b) (not (every? true? b)))))", "user": "556086a2e4b0c656e3ff17c1"}, {"problem": 83, "code": "#(apply not= %&)", "user": "5dd69c8ce4b0948ae9d9ad83"}, {"problem": 83, "code": "(fn some-are-true [& flags]\n  (loop [true-exists false\n         false-exists false\n         [head & tail] flags]\n    (let [true-exists (or true-exists head)\n          false-exists (or false-exists (not head))]\n      (if (empty? tail)\n        (and true-exists false-exists)\n        (recur true-exists false-exists tail))))\n  )", "user": "5dd67c22e4b0948ae9d9ad80"}, {"problem": 83, "code": "( fn xxx [ & xs ] (and ( reduce #(or %1 %2) xs) (not ( reduce #(and %1 %2) xs))))", "user": "53d63e6ce4b0e771c3025454"}, {"problem": 83, "code": "#(= 2 (count (distinct %&)))", "user": "5793931ee4b0e215f87e845c"}, {"problem": 83, "code": "(fn [& vals]\n  (let [trues (count (filter true? vals))]\n    (if (= trues 0)\n      (identity false)\n      (if (= trues (count vals))\n        (identity false)\n        (identity true)))))", "user": "5ddb6151e4b0948ae9d9adb0"}, {"problem": 83, "code": "(fn [& args] (boolean (and (some #(= true %) args) (not-every? #(= true %) args))))", "user": "5ddd3cbee4b0948ae9d9adc3"}, {"problem": 83, "code": "(fn [& bs] (= 2 (count (distinct bs))))", "user": "5dde0b71e4b0948ae9d9add0"}, {"problem": 83, "code": "(fn [& b] (true? (and (some true? b) (some false? b))))", "user": "5d7d17ece4b02e6b30c93558"}, {"problem": 83, "code": "(fn [& bools]\n   (if (reduce #(and %1 %2) bools) false\n       (reduce #(or %1 %2) bools)))", "user": "5dd90651e4b0948ae9d9ad97"}, {"problem": 83, "code": "(fn [& xs] (= 2 (count (set xs))))", "user": "5de12192e4b0948ae9d9aded"}, {"problem": 83, "code": "(fn [& rest]\n    (let [x (reduce (fn [a b] [(if b (inc (first a)) (first a)) (inc (second a))]) [0 0] rest)]\n        (if (and (< 0 (first x)) (< (first x) (second x))) true false)))", "user": "5dce0151e4b0b296f82db5b5"}, {"problem": 83, "code": "(fn [& values]\n  (true? (and (some identity values) (not (every? identity values))))\n )", "user": "5de6484ce4b0986d99407f66"}, {"problem": 83, "code": "(fn [& xs]\n  (true? (and (some true? xs) (some false? xs))))", "user": "5dcc65b7e4b02b31cc3da3c9"}, {"problem": 83, "code": "(fn [& args]\n  (let [expression (and (some true? args)\n                        (some false? args))]\n    (true? expression)))", "user": "5ddd134ae4b0948ae9d9adc0"}, {"problem": 83, "code": "(fn [& args]\n   (if (and (some true? args) (some false? args))\n     true\n     false))", "user": "5db98f39e4b010eb3c36cd53"}, {"problem": 83, "code": "(fn half-true [& bools]\n  (and (not (every? false? bools))\n       (not (every? true?  bools))))", "user": "5decd4fde4b093ff7172757b"}, {"problem": 83, "code": "(fn [& xs]\n  (and (apply not= xs)\n       (apply not= (cons false xs))))", "user": "5d236215e4b02ea6f0fb6a09"}, {"problem": 83, "code": "(fn [& args] (> (count (set args)) 1))", "user": "5de65feee4b0986d99407f68"}, {"problem": 83, "code": "(fn [& bool-list] (not-every? identity (map #(= (first bool-list) %) bool-list)))", "user": "5d7a748ce4b02e6b30c93547"}, {"problem": 83, "code": "not=", "user": "5d5e2efee4b0c9e5857d4ff0"}, {"problem": 83, "code": "not=", "user": "584278e1e4b089d5ab817e19"}, {"problem": 83, "code": "(fn [& xs] (and (reduce #(or %1 %2) xs)\n                  (< 0 (count (filter false? xs)))))", "user": "5c30da5ae4b0d62ef62d9f23"}, {"problem": 83, "code": "not=", "user": "5dd60c58e4b0948ae9d9ad7c"}, {"problem": 83, "code": "not=", "user": "5ddfd88be4b0948ae9d9ade1"}, {"problem": 83, "code": "( fn [& bools] (empty? (clojure.set/difference #{true false} (set bools) ) ) )", "user": "5ddbd202e4b0948ae9d9adb4"}, {"problem": 83, "code": "(fn [& bools] (and (not (every? true? bools)) (not (every? false? bools))))", "user": "5ddd6cfae4b0948ae9d9adc4"}, {"problem": 83, "code": "#(= (count (set %&)) 2)", "user": "5dfb2e2ae4b0a607a9a45cd6"}, {"problem": 83, "code": "not=", "user": "5dfc457de4b0a607a9a45cea"}, {"problem": 83, "code": "(fn half-truth [& others]\n  (loop [s others\n         all-true true\n         some-true false]\n    (if (seq s)\n      (let [f (first s)\n            new-all-true (and all-true f)\n            new-some-true (or some-true f)]\n        (recur (rest s) new-all-true new-some-true))\n      (and some-true (not all-true)))))", "user": "5df0c6ffe4b093ff717275c2"}, {"problem": 83, "code": "(fn\n  [& items]\n  (not (or \n        (every? #(= true %) items) \n        (every? #(= false %) items))\n       ))", "user": "5dd25ca8e4b0948ae9d9ad55"}, {"problem": 83, "code": "not=", "user": "5dfb20b8e4b0a607a9a45cd3"}, {"problem": 83, "code": "not=", "user": "5dfa1c67e4b0a607a9a45cc5"}, {"problem": 83, "code": "(fn [& bs] (true? (and (some false? bs) (some true? bs))))", "user": "5dfe3928e4b0a607a9a45d04"}, {"problem": 83, "code": "not=", "user": "5de8648de4b0986d99407f7c"}, {"problem": 83, "code": "(fn [& bools]\n     (and (not (apply = true bools))\n          (if (some identity bools) true false)))", "user": "5bfc9037e4b0bdcf453d15f2"}, {"problem": 83, "code": "(fn [& b]\n  (boolean (and (some identity b) (not (every? identity b))))\n)", "user": "5e09fd26e4b099d064962f60"}, {"problem": 83, "code": "#(= (set %&) #{true false})", "user": "5e03a15be4b0a607a9a45d5e"}, {"problem": 83, "code": "not=", "user": "5e00b6e7e4b0a607a9a45d2b"}, {"problem": 83, "code": "#(and (not (every? identity %&)) (boolean (some true? %&)))", "user": "514992d2e4b0b64cbeae1848"}, {"problem": 83, "code": "(fn half-true? [& coll]\n  (and\n    (boolean (some true? coll))\n    (not (every? true? coll))))", "user": "5e0d948fe4b099d064962f98"}, {"problem": 83, "code": "(fn vai-da-bom\n  [& items]\n  (cond\n    (every? true? items) false\n    (some true? items) true\n    :else false))", "user": "5df0f338e4b093ff717275c6"}, {"problem": 83, "code": "(fn [& truths]\n(if (reduce #(and %1 %2) truths)\n  false\n  (reduce #(or %1 %2) truths)))", "user": "5073e7fde4b054001656accb"}, {"problem": 83, "code": "(fn [x & tail] (let [xs (cons x tail)\n                     some-true (or (some true? xs) false)\n                     all-true (every? true? xs)]\n               (and some-true (not all-true))))", "user": "5e0e14bde4b099d064962fa3"}, {"problem": 83, "code": "(fn [x & next]\n  (loop [el x\n         remaining next\n         has-true false\n         has-false false\n         ]\n    (if (nil? el)\n      (and has-true has-false)\n      (recur (first remaining) (rest remaining) (or has-true (true? el)) (or has-false (false? el)))\n      )\n    )\n  )", "user": "5e0e836fe4b099d064962fa8"}, {"problem": 83, "code": "(fn [& a] (> (count (partition-by true? a)) 1))", "user": "57023e92e4b08d47c97781da"}, {"problem": 83, "code": "#(boolean (and (some identity %&) (not-every? identity %&)))", "user": "5e144bd5e4b0a047bd49f6e7"}, {"problem": 83, "code": "(fn [& xs]\n  (true? (and (some true? xs) (some false? xs))))", "user": "5be8bc2de4b0f319e2d7ec66"}, {"problem": 83, "code": "#(true? (and (some true? %&) (some false? %&)))", "user": "5e121a89e4b099d064962fe4"}, {"problem": 83, "code": "(fn [x & n]\n  (let [arr (conj n x)]\n  (and\n    (not= nil (some (fn [x] (= x true)) arr))\n    (not-every? (fn [x] (= x true)) arr))))", "user": "5e08c3dde4b0978307768fc8"}, {"problem": 83, "code": "(fn [& xs] (if (and (some true? xs) (some false? xs)) true false))", "user": "5e1754abe4b00200644e3d53"}, {"problem": 83, "code": "(fn [& args]\n  (and\n   ((complement nil?) (some true? args))\n   ((complement nil?) (some false? args))))", "user": "5defc177e4b093ff717275af"}, {"problem": 83, "code": "(fn [& args] (< 0 (count (filter #(= true %) args)) (count args)))", "user": "5dcd7933e4b0b296f82db5ae"}, {"problem": 83, "code": "(fn [& bools] (if (and (some true? bools) (not (every? true? bools))) true false))", "user": "5e18c885e4b0dc95940084fc"}, {"problem": 83, "code": "(fn [& args] (if (and (some true? args) (some false? args)) true false))", "user": "5b8aa478e4b0c0b3ffbd49b2"}, {"problem": 83, "code": "(fn [& bs] (boolean (and (some identity bs) (not (every? identity bs)))))", "user": "5db35f85e4b010eb3c36cd22"}, {"problem": 83, "code": "(fn \n  ([a]\n   (if (and a) false (or a)))\n  ([a b]\n   (if (and a b) false (or a b)))\n  ([a b c]\n   (if (and a b c) false (or a b c)))\n  ([a b c d]\n   (if (and a b c d) false (or a b c d))))", "user": "5d6eaa58e4b04d129b00f2cd"}, {"problem": 83, "code": "#(true? (and (some identity %&) (not (every? identity %&))))", "user": "4f24c859e4b0d66497709fef"}, {"problem": 83, "code": "not=", "user": "5e16fd78e4b0a047bd49f726"}, {"problem": 83, "code": "(fn [& x]\n   (and\n     (not-every? true? x)\n     (not-every? false? x)))", "user": "57fc5e42e4b0d3187e900997"}, {"problem": 83, "code": "(fn [& args] \n   (if (and (some #(true? %) args) (not (every? #(true? %) args)))\n  \ttrue\n  \tfalse))", "user": "5df75fd8e4b0a607a9a45c92"}, {"problem": 83, "code": "#(true? (and\n         (some true? %&)\n         (some false? %&)))", "user": "5e1a3989e4b0dc9594008511"}, {"problem": 83, "code": "(fn ,[& args]\n            (and \n                    (not\n                        (apply = false args)\n                    )\n                    (not\n                        (apply = true args)\n                    )\n                )\n             )", "user": "5e23ca7fe4b05b4b01516144"}, {"problem": 83, "code": "(fn [& boolList]\n  (= 2 (count (set boolList))))", "user": "5e16b820e4b0a047bd49f71f"}, {"problem": 83, "code": "(fn [& ps] (if (and (some #{true} ps) (not (every? identity ps))) true false))", "user": "5e2549c8e4b05b4b0151615f"}, {"problem": 83, "code": "(fn [& bools] (boolean (and (some identity bools) (some not bools))))", "user": "5e1cc888e4b0dc959400853d"}, {"problem": 83, "code": "(fn [& args]\n  (cond\n    (or\n      (every? true? args)\n      (every? false? args))\n    false\n    :else true))", "user": "58f3c18ee4b0438e51c2cead"}, {"problem": 83, "code": "(fn [& args] (and (not-every? true? args) (not-every? false? args)))", "user": "5e246f92e4b05b4b01516150"}, {"problem": 83, "code": "#(true? \n  (and \n   (some true? %&) \n   (some false? %&)))", "user": "5e22e4c5e4b05b4b01516137"}, {"problem": 83, "code": "(rand-nth\n  [(apply comp (conj (rand-nth \n                       [[(partial = 2)\n                         count\n                         (rand-nth\n                           [frequencies set])]\n                        [(partial = [true true])\n                         (juxt (partial some true?)\n                               (partial some false?))]\n                        [zero? \n                         #(mod % 6)\n                         (partial reduce *)\n                         (partial map #(if % 2 3))]\n                        ]) list))\n   (comp empty? (partial apply disj #{\\a \\u}) str)                        \n   not=])", "user": "5d929ceae4b0915913b1d412"}, {"problem": 83, "code": "(fn [& args]\n           (and (or (some true? args) false)  (or (some false? args) false)))", "user": "5e1c3e6ee4b0dc9594008530"}, {"problem": 83, "code": "(fn [& args]\n           (let [freqs (frequencies args)\n                 trues (get freqs true)]\n             (if (and trues (< trues (count args)))\n               true\n               false)))", "user": "5dc53ddee4b02f9375f4e1bd"}, {"problem": 83, "code": "not=\n\n;(fn [& args]\n;  (and\n;   ((complement empty?) (filter true? args))\n;   ((complement empty?) (filter false? args))))", "user": "5e357507e4b0650de70e2b2a"}, {"problem": 83, "code": "#(true? \n  (and\n   (some true? %&)\n   (some false? %&)))", "user": "5e257a33e4b05b4b01516166"}, {"problem": 83, "code": "not=", "user": "5e380e72e4b01d43a70e8db0"}, {"problem": 83, "code": "(fn [& args]\n\t(and\n    \t(not (= (some true? args) nil))\n     \t(not-every? true? args)\n    )\n)", "user": "5e3b6ae9e4b01d43a70e8df4"}, {"problem": 83, "code": "(fn half-truth [& bs]\n  (let [bs-set (into #{} bs)]\n    (= bs-set #{true false})))", "user": "5d47fa13e4b07c84aa5ae6b6"}, {"problem": 83, "code": "(fn [& bools]\n  (loop [tc 0 ac (count bools) bools bools]\n     (cond\n      (empty? bools)\n      (and (> tc 0) (< tc ac))\n\n      :else\n      (recur\n        (if (first bools) (inc tc) tc)\n        ac\n        (rest bools)))))", "user": "5e394c33e4b01d43a70e8dd1"}, {"problem": 83, "code": "not=", "user": "5e3e23d9e4b01d43a70e8e20"}, {"problem": 83, "code": "(fn [& bs]\n   (= (every? true? bs) (every? false? bs)))", "user": "5e3ef7d4e4b01d43a70e8e2d"}, {"problem": 83, "code": "(fn [& bools]\n           (let [someTrue (not (nil? (some #{true} bools)))\n                 allTrue (every? true? bools)]\n             (and someTrue (not allTrue))))", "user": "5e3975a3e4b01d43a70e8dd3"}, {"problem": 83, "code": "#(true? (and (some true? %&) (some false? %&)))", "user": "5e0a6916e4b099d064962f65"}, {"problem": 83, "code": "#(= (count (set %&)) 2)", "user": "5e3a25d4e4b01d43a70e8dde"}, {"problem": 83, "code": "(fn [& all]\n  (boolean\n    (and\n      (not-every? true? all)\n      (some true? all))))", "user": "5d28d935e4b092dab7f59c88"}, {"problem": 83, "code": "(fn\n  [& bools]\n  (loop [bools bools\n         hasTrue false\n         hasFalse false]\n    ;(println (or (empty? bools) (and hasTrue hasFalse)))\n    (if (or (empty? bools) (and hasTrue hasFalse))\n      (do\n        ;(println (str \"exiting \" hasTrue \" \" hasFalse \" \" (and hasTrue hasFalse)))\n        (and hasTrue hasFalse))\n      (do\n        (println (str (or hasTrue (first bools)) \" \" (or hasFalse (not (first bools)))))\n        (recur (rest bools) (or hasTrue (first bools)) (or hasFalse (not (first bools)))))))\n  )", "user": "5e495e3fe4b043cd24807a4f"}, {"problem": 83, "code": "not=", "user": "5c3796b3e4b0d62ef62d9f77"}, {"problem": 83, "code": "(fn [& args]\n    (let [some-true (some #(= true %) args)\n          all-true (every? #(= true %) args)\n          ]\n      (if (and some-true (not all-true))\n        true\n        false)))", "user": "5e348945e4b0650de70e2b1d"}, {"problem": 83, "code": "(fn [& b]\n  (if (= (set b) #{true false})\n    true\n    false))", "user": "5e42b688e4b01d43a70e8e6b"}, {"problem": 83, "code": "#(apply not= %&)", "user": "5e491182e4b043cd24807a46"}, {"problem": 83, "code": "not=", "user": "5e41b679e4b01d43a70e8e58"}, {"problem": 83, "code": "(fn ivan-xor [& bools]\n(if (every? #(= true %) bools)\n\tfalse\n\t(not-every? #(= % false) bools)\n))", "user": "5c87c79be4b048ec896c591b"}, {"problem": 83, "code": "(fn [& x] \n  (true? \n   (and \n    (some true? x) \n    (some false? x))))", "user": "5e18bd30e4b0dc95940084fa"}, {"problem": 83, "code": "(fn [& arr]\n    (let [true-objects (filter true? arr)]\n      (if (= (count arr) (count true-objects))\n        false\n        (not (empty? true-objects))\n      )\n    )\n  )", "user": "5e2586afe4b05b4b01516167"}, {"problem": 83, "code": "(fn half-truth\n  [& bools]\n  (and (not(nil?(some true? bools))) (not-every? true? bools)))", "user": "5e4e3c31e4b027a2e10ac0ad"}, {"problem": 83, "code": "(fn [& bools]\n  (not (or (every? true? bools)\n           (every? false? bools))))", "user": "5b99554ae4b0c0b3ffbd4ace"}, {"problem": 83, "code": "(fn ([x] (if x (not x) x))\n  ([x y] (or (and x (not y)) (and (not x) y)))\n  ([x y & more]\n    (let [args (conj (conj more x) y) t (filter true? args)]\n      (and (< (count t) (count args)) (< 0 (count t)))))\n  )", "user": "5dd70ee3e4b0948ae9d9ad85"}, {"problem": 83, "code": "(fn half-truth [ & bools]\n  (not (nil? (and (some #(= true %) bools) (some #(= false %) bools)))))", "user": "5e54faf7e4b027a2e10ac0f0"}, {"problem": 83, "code": "(fn half-true? [& rest]\n      (let [true-count (get (frequencies rest) true)]\n      (if (nil? true-count) \n          false \n          (< true-count (count rest)))))", "user": "5d078e2de4b0cc9c915881fa"}, {"problem": 83, "code": "(fn foo [& args]\n   (cond\n    (= 0 (count (filter true? args))) false\n    (= (count args) (count (filter true? args))) false\n    :else true)\n  )", "user": "5e38b324e4b01d43a70e8dc3"}, {"problem": 83, "code": "not=", "user": "5e41a67be4b01d43a70e8e56"}, {"problem": 83, "code": "#(cond (every? true? %&) false (some true? %&) true :else false)", "user": "5d828b7ee4b0915913b1d382"}, {"problem": 83, "code": "(fn [& x] (if (every? true? x) false (if (= nil (some true? x)) false true)))", "user": "5e41cb44e4b01d43a70e8e5b"}, {"problem": 83, "code": "#(= 2 (count (group-by identity %&)))", "user": "5e5b8d92e4b0fd0acd158658"}, {"problem": 83, "code": "#(or (and (some false? %&) (not-every? false? %&)) false)", "user": "5dcc152ae4b02b31cc3da3c3"}, {"problem": 83, "code": "not=", "user": "5e5c425ae4b0fd0acd158662"}, {"problem": 83, "code": "(fn [& args] (not (nil? (and (some true? args) (some false? args)))))", "user": "5ab3db13e4b073f177442609"}, {"problem": 83, "code": "(fn[& x] (let [trues (count (filter identity x))]\n                        (and (> (count x) trues) (> trues 0))))", "user": "5e48ec09e4b043cd24807a45"}, {"problem": 83, "code": "(fn [& bools]\n    (true? (and (some false? bools)  (some true? bools)  )))", "user": "5d89427ae4b0915913b1d3b5"}, {"problem": 83, "code": "(fn [& args] (boolean (and (some true? args) (not-every? true? args))))", "user": "54b51366e4b05787c3b16398"}, {"problem": 83, "code": "#(= (set %&) #{true false})", "user": "5e66c144e4b0e171e1033683"}, {"problem": 83, "code": "(fn [& args] (and (not (every? true? args)) (not (nil? (some true? args)))))", "user": "5cb556f9e4b026601754b934"}, {"problem": 83, "code": "(fn [& args]\n  (true? (and (some true? args) (some false? args))))", "user": "5e663073e4b0fd0acd1586bc"}, {"problem": 83, "code": "(fn [& xs]\n  (true? (and (some true? xs) (some false? xs))))", "user": "5e692be9e4b04a83ad7cd269"}, {"problem": 83, "code": "(fn [& x] (= 2 (count (into #{} x))))", "user": "50eeeadae4b02c17778c91f3"}, {"problem": 83, "code": "(fn [& n] ((comp not empty? rest distinct) n))", "user": "5e63ffa0e4b0fd0acd1586a6"}, {"problem": 83, "code": "(fn [& args]\n  (if (and (some true? args) (not (every? true? args)))\n    true\n    false))", "user": "5e5913b5e4b027a2e10ac10b"}, {"problem": 83, "code": "(fn [& args] (and (not (every? false? args)) (not (every? true? args))))", "user": "5e6e6537e4b04a83ad7cd29a"}, {"problem": 83, "code": "; (fn [& args] (if (every? true? args) false (if (some true? args) true false)))\nnot=", "user": "5e735071e4b085ba37836dcf"}, {"problem": 83, "code": "(fn [ & ls]\n  (not= (count (distinct ls)) 1))", "user": "5e724492e4b085ba37836dc7"}, {"problem": 83, "code": "(fn [& input] (not (or (every? true? input) (every? false? input))))", "user": "5e71f267e4b085ba37836dc1"}, {"problem": 83, "code": "(fn [x & other]\n  (true? (and (some true? (conj other x)) (some false? (conj other x)))))", "user": "5e78e8d3e4b085ba37836dfd"}, {"problem": 83, "code": "(fn [& args]\n  (if (and (some true? args)\n           (some false? args))\n    true\n    false))", "user": "5e5fa1ffe4b0fd0acd15867d"}, {"problem": 83, "code": "(fn func1 [& args] \n  (let [all-are-true? (every? identity args)\n        all-are-false? (every? #(not %1) args)\n        some-are-true? (not all-are-false?)\n        not-all-are-true? (not all-are-true?)]\n    (and some-are-true? not-all-are-true?)))", "user": "5e805895e4b085ba37836e44"}, {"problem": 83, "code": "(fn [& args] (= (set args) #{true false}))", "user": "5e2ead6ae4b05b4b015161f5"}, {"problem": 83, "code": "not=", "user": "5e832e75e4b09a7a73c8bbb5"}, {"problem": 83, "code": "(fn [& coll]\n     (boolean (and (some boolean coll)\n                   (not-every? boolean coll))))", "user": "5e7b1ef4e4b085ba37836e10"}, {"problem": 83, "code": "(fn [& b]\n  (loop [[f & r] b c 0]\n    (if (= nil f)\n    \t(if (and (> c 0) (< c (count b))) true false)\n      (recur r (if (= true f) (inc c) c)))))", "user": "5e7f62cce4b085ba37836e3b"}, {"problem": 83, "code": "not=", "user": "5df70ee8e4b0a607a9a45c8a"}, {"problem": 83, "code": "#(true? (and (not-every? true? %&) (some true? %&)))", "user": "5e6ca949e4b04a83ad7cd289"}, {"problem": 83, "code": "(fn half-truth [& args]\n  (cond\n    (every? true? args) false\n    (every? false? args) false\n    :else true))", "user": "5d0eed51e4b0cc9c91588262"}, {"problem": 83, "code": "(fn [& args] (and (not (nil? (some true? args)))\n       (not-every? true? args)))", "user": "55ce2b6de4b0e31453f64a26"}, {"problem": 83, "code": "(fn [& array] (true? (and (some #(= true %) array) (some #(= false %) array))))", "user": "5e839edde4b09a7a73c8bbba"}, {"problem": 83, "code": "not=", "user": "4eb70649535d7eef30807373"}, {"problem": 83, "code": "(fn [& b] (boolean (and (some identity b) (not-every? true? b) (not-every? false? b))))", "user": "5bb36a9ce4b0a20761a23523"}, {"problem": 83, "code": "#(let [coll (set %&)]\n(and (contains? coll true) (contains? coll false)))", "user": "5e13a6b7e4b099d064963001"}, {"problem": 83, "code": "not=", "user": "5e905e03e4b0cb016954634c"}, {"problem": 83, "code": "#(and (not-every? false? %&) (not-every? true? %&))", "user": "5e7dc2d8e4b085ba37836e2f"}, {"problem": 83, "code": ";; happens to be true if last two \n;; items are [true false]\n;(\n#_(fn [& li]\n  (reduce #(= false %1 %2) false li))\n\n;;  this breaks it:\n;; false false false false)\n\n;; proper solution:\n(fn [& li]\n  (let [{:keys [o a]}\n   (reduce\n    (fn [out n]\n      {:o (or (:o out) n)\n       :a (and (:a out) n)}) \n    {:o false\n     :a true}\n    li)]\n    (and o (not a))))", "user": "5e64ae6ce4b0fd0acd1586ac"}, {"problem": 83, "code": "not=", "user": "5e8ce2fee4b0cb0169546328"}, {"problem": 83, "code": "(fn [& xs] (true? (and (some true? xs) (some false? xs))))", "user": "5e8f87c7e4b0cb0169546342"}, {"problem": 83, "code": "(fn [& bs]\n         (if (and (some true? bs) (some false? bs))\n           true\n           false))", "user": "5da71eaee4b000c986472c15"}, {"problem": 83, "code": "(fn [& args] (= 2 (count(set args))))", "user": "5e62444fe4b0fd0acd158694"}, {"problem": 83, "code": "#(and (boolean (some identity %&)) (not (every? identity %&)))", "user": "5e947a69e4b0fbed045a37f8"}, {"problem": 83, "code": "not=", "user": "5e83696ce4b09a7a73c8bbb7"}, {"problem": 83, "code": "#(true? (and (some true? %&) (some false? %&)))", "user": "5e639b4be4b0fd0acd1586a2"}, {"problem": 83, "code": "(fn [& bools] (and (reduce #(or %1 %2) bools) (not (reduce #(and %1 %2) bools))))", "user": "5e208e4be4b05b4b01516113"}, {"problem": 83, "code": "(fn [& args] (boolean (and (some true? args) (some false? args))))", "user": "5d45749be4b07c84aa5ae6a2"}, {"problem": 83, "code": "(fn [& bools]\n  (and\n\t(true? (some #(= true %) bools))\n   \t(true? (some #(= false %) bools))))", "user": "5e98e8a9e4b0157ca96647dc"}, {"problem": 83, "code": "(fn halfTruth\n  [& bools]\n  (< 1 (count (partition-by identity bools))))", "user": "5e9636fee4b0fbed045a3816"}, {"problem": 83, "code": "#(= 2 (count (into #{} %&)))", "user": "5be9ad9be4b0f319e2d7ec76"}, {"problem": 83, "code": "not=", "user": "5e99cbd4e4b0157ca96647e6"}, {"problem": 83, "code": "not=", "user": "5e95873ae4b0fbed045a380a"}, {"problem": 83, "code": "(fn [& more] (let [expr (and (some true? more) (some false? more))]\n      (true? expr)))", "user": "5e996e76e4b0157ca96647e4"}, {"problem": 83, "code": "(fn [& args](and (contains? (set args) true) (contains? (set args) false) )  )", "user": "5e94ff5fe4b0fbed045a37ff"}, {"problem": 83, "code": "not=", "user": "5e9771dee4b0157ca96647d0"}, {"problem": 83, "code": "(fn [& coll]\n  (cond\n   \t(every? #(true? %) coll)\n   \tfalse\n    \n   \t(every? #(false? %) coll)\n    false\n    \n  \t:else\n   \ttrue))", "user": "5e84b48ee4b09a7a73c8bbc8"}, {"problem": 83, "code": "(fn [& lst]\n  (cond\n   (every? true? lst) false\n   (some true? lst) true\n   :else false))", "user": "5e978fe5e4b0157ca96647d1"}, {"problem": 83, "code": "not=", "user": "5e9e408fe4b00a66d4a95172"}, {"problem": 83, "code": "(fn [& xs] (and (reduce #(or %1 %2) xs) (not (reduce #(and %1 %2) xs))))", "user": "5e9e6d8ee4b00a66d4a95175"}, {"problem": 83, "code": "not=", "user": "5e9d1c75e4b0157ca9664801"}, {"problem": 83, "code": "(fn test \n    ([x] false) \n    ([x & more] (if x (not (= (count more) (count (filter #(= true %) more)))) (> (count more) (count (filter #(= false %) more))) ))\n    )", "user": "5e85d0bde4b09a7a73c8bbd6"}, {"problem": 83, "code": "(fn [& x] (and (not (every? true? x)) (= true (some true? x))))", "user": "5e950178e4b0fbed045a3801"}, {"problem": 83, "code": "(fn halfTruth\n  [& x]\n  (let [y (and (some true? x) (some false? x))]\n    (true? y)))", "user": "5e95013fe4b0fbed045a3800"}, {"problem": 83, "code": "(fn [& s]\n    (if (and (some identity s)\n             (not (every? identity s)))\n      true\n      false))", "user": "5e950310e4b0fbed045a3802"}, {"problem": 83, "code": "(fn half_truth\n  [& n]\n  (let [m (and (some true? n) (some false? n))]\n    (true? m)))", "user": "5ea3711ae4b00a66d4a9519d"}, {"problem": 83, "code": "(fn [& vals]\n  (true? (and (some identity vals) (not (every? identity vals)))))", "user": "59750a68e4b01722bebd4cba"}, {"problem": 83, "code": "not=", "user": "5ea6f88de4b00a66d4a951b1"}, {"problem": 83, "code": "(fn solution [& rest]\n  (if (and (some #(true? %) rest) (not (every? #(true? %) rest)))\n    true\n    false))", "user": "5e2ef900e4b05b4b015161fc"}, {"problem": 83, "code": "(fn [& xs]\n    (and\n        (apply (some-fn true?) xs)\n        (apply (some-fn false?) xs)))", "user": "5ea2e6bfe4b00a66d4a95197"}, {"problem": 83, "code": "(fn [& x]\n   (if (some true? x )\n     (if (some false? x)\n       true\n       false\n       )\n     false\n     )\n   )", "user": "5ea7b04de4b00a66d4a951b6"}, {"problem": 83, "code": "(fn [& p] (true? (and (some true? p) (some false? p))))", "user": "5c9adfebe4b048ec896c5ab9"}, {"problem": 83, "code": "(fn [& args] (= (reduce conj #{} args) #{true false}))", "user": "5eaba9c0e4b00a66d4a951d6"}, {"problem": 83, "code": "(fn some-true [& args]\n  (if (or (= nil (some true? args)) (= nil (some false? args)))\n    false\n    true))", "user": "5e218bb7e4b05b4b01516123"}, {"problem": 83, "code": "(fn [& args] (and (not (every? identity args)) (not (nil? (some identity args)))))", "user": "5ea97df7e4b00a66d4a951c8"}, {"problem": 83, "code": "(fn [& props] (and (true? (some true? props)) \n                   (not-every? true? props)))", "user": "5e9683f1e4b0157ca96647c7"}, {"problem": 83, "code": "#(let [input-length (count %&)\n       no-trues (count(filter (fn [x] (= x true))%&))]\n   (if (and (< 0 no-trues)\n            (> input-length no-trues))\n     true\n     false))", "user": "5e9b7aefe4b0157ca96647f1"}, {"problem": 83, "code": "(fn f [& xs]\n  (and (if (some true? xs) true false)\n       (not-every? true? xs)))", "user": "5c9147c1e4b048ec896c59df"}, {"problem": 83, "code": "(fn [ & args]\n  (let [c (count args)\n        t (count (filter true? args) )]\n    (cond\n      (= c t) false\n      (= 0 t) false\n      :default true)\n    ))", "user": "5ca2ca9fe4b048ec896c5b9c"}, {"problem": 83, "code": "(fn [& args]\n    (boolean (and (some identity args) (not (every? identity args)))))", "user": "5eb1a80ce4b00a66d4a951ff"}, {"problem": 83, "code": "(fn [& bs]\n  (and (not (every? false? bs))\n       (not (every? true? bs))))", "user": "5eb1c786e4b00a66d4a95201"}, {"problem": 83, "code": "(fn [a & r]\n  (if (= true a)\n    (if (some false? r)\n      true\n      false)\n    (if (some true? r)\n      true\n      false)))", "user": "5e12327ee4b099d064962fe5"}, {"problem": 83, "code": "not=", "user": "5eb56fc1e4b00a66d4a95224"}, {"problem": 83, "code": "(fn ok [ & arg]\n  (and\n   (not (every? true? arg))\n   (true? (some true? arg))))", "user": "5cc092d1e4b0ccb061962790"}, {"problem": 83, "code": "not=", "user": "5eb193fde4b00a66d4a951fe"}, {"problem": 83, "code": "#(= 2 (count (set %&)))", "user": "5e67ab18e4b0e171e103368a"}, {"problem": 83, "code": "not=", "user": "5ebc7c13e4b00a66d4a95267"}, {"problem": 83, "code": "(fn [& col] (true? (and (some true? col) (some false? col))))", "user": "5ea970d1e4b00a66d4a951c6"}, {"problem": 83, "code": "(fn [& b]\n  (if (and\n       (some #(= true %) b)\n       (some #(= false %) b))\n    true\n    false))", "user": "5ec21ef0e4b00a66d4a95299"}, {"problem": 83, "code": "(fn [& x] (and (reduce #(or %1 %2) x) (not (every? true? x))))", "user": "5ec3a13ae4b08d0ec38692b9"}, {"problem": 83, "code": "(fn [& s] (boolean (and (some identity s) (not (every? identity s)))))", "user": "592ac17ae4b072a2710fcf26"}, {"problem": 83, "code": "not=", "user": "5eb5d9bbe4b00a66d4a9522e"}, {"problem": 83, "code": "#(and (not (every? true? %&)) (not (every? false? %&)))", "user": "51412b0ae4b0694e2952b79d"}, {"problem": 83, "code": "(fn [& args]\n  (if ((complement not-any?) true? args)\n    (if (every? true? args) false true)\n    false))", "user": "568f2059e4b0dcc4269f40df"}, {"problem": 83, "code": "(fn [& s]\n                (loop [s (seq s)\n                       found-true false\n                       found-false false]\n                  (cond\n                    (and found-true found-false) true\n                    (empty? s) false\n                    :else (recur (rest s)\n                                 (or found-true (= (first s) true))\n                                 (or found-false (= (first s) false))))))", "user": "5eb22708e4b00a66d4a95204"}, {"problem": 83, "code": "(fn semi-truth\n  [& s]\n  (let [f (and\n            (some true? s)\n            (some false? s))]\n    (if (nil? f)\n      false\n      true)))", "user": "5ec943fde4b08d0ec38692f1"}, {"problem": 83, "code": "(fn [& bools]\n  (let [true-count (get (frequencies bools) true 0)\n        total-count (count bools)]\n    (and (> true-count 0) (< true-count total-count))))", "user": "5e3302ece4b0650de70e2b02"}, {"problem": 83, "code": "(fn [& c]\n            (if (= #{true} (set c))\n              (identity false)\n              (if (= nil (some true? c))\n                     (identity false)\n                     (some true? c))))", "user": "5ecf4ee4e4b016b56eae05a6"}, {"problem": 83, "code": "(fn [& bools]                                   \n  (and                                          \n    ((complement not-any?) identity bools)      \n    (not-every? identity bools)))", "user": "5e5096c6e4b027a2e10ac0c6"}, {"problem": 83, "code": "(fn tmp [& as] (and (true? (some identity as)) (not (every? identity as))))", "user": "5ed3c43be4b016b56eae05c4"}, {"problem": 83, "code": "(fn prob [& colls]\n  (true? (and (some #(= % true) colls) (not (every? #(= % true) colls))\n       )\n   ))", "user": "5ebb4751e4b00a66d4a95262"}, {"problem": 83, "code": "(fn adv-or [& c]\n  (and\n    (contains? (set c) true)\n    (contains? (set c) false)))", "user": "5eac172fe4b00a66d4a951dd"}, {"problem": 83, "code": "#(= 2 (count (set %&)))", "user": "5ecfd429e4b016b56eae05a9"}, {"problem": 83, "code": "(fn [& args]\n               ;(println (some true? args))\n                (not (nil? (and (some false? args) (some true? args)))))", "user": "5eccbce6e4b016b56eae058e"}, {"problem": 83, "code": "not=", "user": "5ecf55aae4b016b56eae05a7"}, {"problem": 83, "code": "(fn [& bs] (= #{true false} (set bs)))", "user": "579c35fee4b05b1deef9ae04"}, {"problem": 83, "code": "#(true? \n  (and\n    (some true? %&)\n    (some false? %&)))", "user": "5ed11279e4b016b56eae05b7"}, {"problem": 83, "code": "(fn[& args] (true? (and (some true? args) (some false? args))))", "user": "5ed6030de4b016b56eae05db"}, {"problem": 83, "code": "(fn \n  [& params]\n  (and (not (every? identity params)) (not (nil? (some identity params)))))", "user": "5ed65b59e4b016b56eae05df"}, {"problem": 83, "code": "not=", "user": "5ebff55de4b00a66d4a95286"}, {"problem": 83, "code": "(fn [& v]\n  (and (boolean (some identity v))\n       ((complement every?) identity v)))", "user": "5ebdb3d2e4b00a66d4a95275"}, {"problem": 83, "code": "(fn [& x] (true? (and (some true? x) (some false? x))))", "user": "5ed4482be4b016b56eae05ca"}, {"problem": 83, "code": "(fn f [& x]\n  (and \n    (> \n      (count (filter false? x)) \n      0) \n    (> \n      (count (filter true? x))\n      0)))", "user": "5ed15e23e4b016b56eae05ba"}, {"problem": 83, "code": "not=", "user": "5ed9c2cde4b0c7845d86b0e4"}, {"problem": 83, "code": "(fn [& p]\n  (and (not= (count (filter identity p)) (count p))         ; todos os param que eu recebi sao true?\n       (> (count (filter identity p)) 0)))", "user": "5e4153afe4b01d43a70e8e51"}, {"problem": 83, "code": "#(and (not-every? true? %&) (not-every? false? %&))", "user": "5ed03b7fe4b016b56eae05ae"}, {"problem": 83, "code": "(fn my-half-true [& args]\n  (let [some-true (some true? args)\n        some-false (some false? args)\n        result (and (= true some-true) (= true some-false))]\n    result))", "user": "565b371fe4b068f2fe63dbff"}, {"problem": 83, "code": "not=", "user": "5896ade8e4b00487982d52a9"}, {"problem": 83, "code": "#(cond\n  (every? boolean %&) false\n  (some boolean %&) true\n  :else false)", "user": "5ec819b4e4b08d0ec38692e2"}, {"problem": 83, "code": "(fn [& v] (true? (and (some true? v) (some false? v))))", "user": "5644149de4b0018b46ad8c07"}, {"problem": 83, "code": "(fn [& args] (and (not (every? identity args)) (not (every? not args))))", "user": "5ed875abe4b016b56eae05f2"}, {"problem": 83, "code": "#(and (not-every? false? %&) (not-every? true? %&))", "user": "5d2e5065e4b01671435dbcae"}, {"problem": 83, "code": "(fn [& s] \n  (and \n   (not (every? true? s)) \n   (not (every? false? s))\n))", "user": "5df08767e4b093ff717275bf"}, {"problem": 83, "code": "#(clojure.set/subset? #{true false} (set %&))", "user": "5ee738dee4b029a2061bbea2"}, {"problem": 83, "code": "(fn sorta [& args] (if (some identity args)\n                     (not (every? identity args))\n                     false))", "user": "5ee93720e4b029a2061bbeb7"}, {"problem": 83, "code": "#(let [c (count (filter true? %&))]\n   (and (> c 0) (< c (count %&))))", "user": "5ec6de19e4b08d0ec38692da"}, {"problem": 83, "code": "(fn [& b] (and (reduce #(or %1 %2) b) (not (reduce #(and %1 %2) b))))", "user": "5e909685e4b0cb016954634d"}, {"problem": 83, "code": "#(if (and (some (partial = true) %&)\n           (not-every? (partial = true) %&)) \n      true \n      false)", "user": "51316a63e4b0431ba07e7feb"}, {"problem": 83, "code": "(fn [& xs] (boolean (and (some true? xs) (not (every? true? xs)))))", "user": "5eebbf9ee4b029a2061bbed2"}, {"problem": 83, "code": ";;(fn [& args]\n ;; (true? (and  (some true? args)\n;;              (not-every? true? args))))\n\nnot=", "user": "5edb07dde4b0c7845d86b0ed"}, {"problem": 83, "code": "not=", "user": "5eb4927fe4b00a66d4a95221"}, {"problem": 83, "code": "not=", "user": "5eeb03dde4b029a2061bbeca"}, {"problem": 83, "code": "(fn [& bs] (if (and (some true? bs) (some false? bs)) true false))", "user": "5e17bb46e4b00200644e3d5a"}, {"problem": 83, "code": "#(true? (and (some true? %&) (some false? %&)))", "user": "5ec7d7f2e4b08d0ec38692e1"}, {"problem": 83, "code": "(fn ht [b & bl] (if b (not (reduce #(and %1 %2) true bl)) (if (nil? bl) false (apply ht bl)) ))", "user": "5ecc0831e4b016b56eae058c"}, {"problem": 83, "code": "not=", "user": "5eeeb000e4b07c55ae4a0515"}, {"problem": 83, "code": "(fn [& args]\n  (if (= (count (filter #(= % false) args)) (count args))\n    false (if (= (count (filter #(= % true) args)) (count args))\n            false true))\n)", "user": "5e83a273e4b09a7a73c8bbbb"}, {"problem": 83, "code": "(fn [& xs] (and (>= (get (frequencies xs) true 0) 1) (not= (get (frequencies xs) false 0) 0)))", "user": "5ef18431e4b07c55ae4a0529"}, {"problem": 83, "code": "#(not= (count (partition-by identity (sort %&))) 1)", "user": "5e9e642ce4b00a66d4a95174"}, {"problem": 83, "code": "not=", "user": "5eee9352e4b07c55ae4a0512"}, {"problem": 83, "code": "(fn [& xs]\n  (and (reduce #(or %1 %2) false xs)\n       (reduce #(and (not %1) (not %2)) false xs)))", "user": "5eee7311e4b07c55ae4a0510"}, {"problem": 83, "code": "not=", "user": "5eeb1cc3e4b029a2061bbecc"}, {"problem": 83, "code": "(fn [& x] \n  (and \n   (not (nil? (some false? x)))\n   (not (nil? (some true? x)))\n))", "user": "5ed70b97e4b016b56eae05e6"}, {"problem": 83, "code": "(fn some-true? [& bools]\n  (let [trues (filter true? bools)]\n  (if (= (count trues) (count bools))\n    false\n    (> (count trues) 0))))", "user": "5edfb1e5e4b0c7845d86b107"}, {"problem": 83, "code": "(fn half-truth [& args]\n  (cond\n    (every? true? args) false\n    (some true? args) true\n    :else false))", "user": "5eec1001e4b07c55ae4a0502"}, {"problem": 83, "code": "not=", "user": "576aea4fe4b0a07e8fc18126"}, {"problem": 83, "code": "#(= 2 (count (set %&)))", "user": "5ee81beae4b029a2061bbeac"}, {"problem": 83, "code": "(fn [& lst]\n            (if (and\n                 (some false? lst)\n                 (some true? lst))\n              true false))", "user": "5df94f73e4b0a607a9a45cb6"}, {"problem": 83, "code": "not=", "user": "5a09ebf8e4b0eab8c0448932"}, {"problem": 83, "code": "(fn [& args]\n  (and (apply not= args)\n       ((complement not-any?) identity args)))", "user": "5dc88a38e4b02f9375f4e1db"}, {"problem": 83, "code": "not=", "user": "5eff339ae4b0cf489e8d7f0c"}, {"problem": 83, "code": "(fn [& vals] (and (or (some true? vals) false) (or (some false? vals) false)))", "user": "5ef28e95e4b07c55ae4a0535"}, {"problem": 83, "code": "(fn [& args] (every? true? [(some false? args) (some true? args)]))", "user": "5c527129e4b0fb8c5ffd99de"}, {"problem": 83, "code": "(fn [& x] (and (not (reduce #(and %1 %2) x))\n                     (reduce #(or %1 %2) x)))", "user": "5ed6c4ede4b016b56eae05e3"}, {"problem": 83, "code": "not=", "user": "5bc7f2d6e4b07a9b28b100b7"}, {"problem": 83, "code": "not=", "user": "5f03550ce4b0cf489e8d7f33"}, {"problem": 83, "code": "(fn [& p] (and ((complement not-any?) #(true? %) p) ((complement not-any?) #(false? %) p)))", "user": "5f02f365e4b0cf489e8d7f2c"}, {"problem": 83, "code": "#(= (set %&) #{true false})", "user": "5e9b6471e4b0157ca96647f0"}, {"problem": 83, "code": "(fn f\n  [& args]\n  (if (= (count (into #{} args)) 2)\n    true\n    false))", "user": "5f088bb3e4b0cf489e8d7f5f"}, {"problem": 83, "code": "(fn [& xs] \n   (true? (and (some true? xs) (some false? xs))))", "user": "58ed2e21e4b056aecfd47d7a"}, {"problem": 83, "code": "(fn [& args] (true? (and (some true? args) (some false? args))))", "user": "5e7bb000e4b085ba37836e1d"}, {"problem": 83, "code": "(fn [& args] (and (not (reduce #(and %1 %2) args)) (reduce #(or %1 %2) args)))", "user": "553b90c8e4b09218d5f45005"}, {"problem": 83, "code": "not=", "user": "5ef82119e4b09b61f08553c6"}, {"problem": 83, "code": "not=", "user": "5edab150e4b0c7845d86b0e9"}, {"problem": 83, "code": "#(if (or (every? true? %&) (every? false? %&)) false true)", "user": "57e070fde4b0bd073c202478"}, {"problem": 83, "code": "(fn [& xs]\n  (if (and\n   (some identity xs)\n   (some not xs))\n    true\n    false))", "user": "5e471203e4b043cd24807a2a"}, {"problem": 83, "code": "(fn [& remaining] \n\t(let [m (frequencies remaining)\n\t\t  size (count remaining)\n\t\t  num-trues (get m true)]\n\t\t (if (nil? num-trues) false (if (= size num-trues) false true))))", "user": "5f0dfa48e4b0f30dddfb5d55"}, {"problem": 83, "code": "(fn half-truth [& coll]\n  (true? (and (some true? coll) (some false? coll))))", "user": "5f003099e4b0cf489e8d7f17"}, {"problem": 83, "code": "(fn [& tests] (and (not= nil (some true? tests))\n                   (not-every? true? tests)))", "user": "5f0b8243e4b0f30dddfb5d45"}, {"problem": 83, "code": "not=", "user": "5f0c8b0de4b0f30dddfb5d4c"}, {"problem": 83, "code": "#(if (and (some true? %&) (some false? %&)) true false)", "user": "5f03ab5be4b0cf489e8d7f37"}, {"problem": 83, "code": "(fn [& xs] (true? (and (not-every? identity xs) (some identity xs))))", "user": "5509a23ee4b06e50f9beb11a"}, {"problem": 83, "code": "#(< 1 (count (partition-by true? %&)))", "user": "5d83b9aae4b0915913b1d386"}, {"problem": 83, "code": "(fn [& arguments ] (or (and (some true? arguments) (some false? arguments)) false) )", "user": "5f1328dee4b091ba50b4dbb1"}, {"problem": 83, "code": "(fn [& args] (if (some  true? args)\n                (if (some  false? args)\n                  (some  true? args)\n                  (not true)\n                  )\n                (not true)\n                ))", "user": "5f082d9ee4b0cf489e8d7f5c"}, {"problem": 83, "code": "(fn [& args] (let [the-set (set args)] (and (contains? the-set true) (contains? the-set false))))", "user": "5f19ecbae4b091ba50b4dbdf"}, {"problem": 83, "code": "(fn [& a] (let [falsey (some #(= false %) a) truthy (some #(= true %) a)] (if (or (nil? falsey) (nil? truthy)) false true)))", "user": "5ef5ee81e4b07c55ae4a054a"}, {"problem": 83, "code": "not=", "user": "5f17e3c5e4b091ba50b4dbd0"}, {"problem": 83, "code": "#(and (not= (some true? %&) nil) (not= (every? true? %&) true))", "user": "5ec5f7f2e4b08d0ec38692d1"}, {"problem": 83, "code": "(fn [& args] (not (apply = args)))", "user": "5e3071abe4b05b4b01516213"}, {"problem": 83, "code": "not=", "user": "5e3121e5e4b05b4b01516221"}, {"problem": 83, "code": "(fn [& v] \n  (if (every? true? v)\n    false\n    (if (some true? v)\n      true\n      false)\n    ))", "user": "5f18444ee4b091ba50b4dbd3"}, {"problem": 83, "code": "(fn foo [& s]\n(if (reduce #(and %1 %2) true s)\nfalse\n(if (reduce #(or %1 %2) false s)\ntrue\nfalse\n)\n)\n)", "user": "5f1aade6e4b091ba50b4dbe4"}, {"problem": 83, "code": "(fn func [& x]\n  (println x)\n  (and (boolean (some true? x)) (boolean (some false? x))))", "user": "5666c2dbe4b04acd4f672dc3"}, {"problem": 83, "code": "(fn [& x]\n  (and (contains? (set x) true)\n       (not (every? identity x))))", "user": "4f0f7339535d0136e6c2233e"}, {"problem": 83, "code": "(fn [& b]\n  (if (or (every? true? b)\n          (every? false? b))\n    false true))", "user": "5f081f6de4b0cf489e8d7f5a"}, {"problem": 83, "code": "(fn [& c]\n    (= 2 (count (group-by true? c)))\n\n  )", "user": "5e7d0bc9e4b085ba37836e2a"}, {"problem": 83, "code": "not=", "user": "5f22e8c9e4b0f565ad99828b"}, {"problem": 83, "code": "(fn half-truth [& bools]\n\t(= 2 (count (set bools)))\n)", "user": "5d73530ce4b02e6b30c93514"}, {"problem": 83, "code": "(fn [& x] (= 2 (count (set x))))", "user": "5f2c02d1e4b033932238a65f"}, {"problem": 83, "code": "not=", "user": "596a66cde4b069c0a1a19803"}, {"problem": 83, "code": "not=", "user": "5f2fff76e4b033932238a681"}, {"problem": 83, "code": "(fn [& xs]\n    (and (not-every? true? xs)\n         (not-every? false? xs)))", "user": "51553ea7e4b06c5f6a1490a2"}, {"problem": 83, "code": "(fn [& args] (every? false? (map #(every? % args) [true? false?])))", "user": "5b7f2d75e4b047b03b203768"}, {"problem": 83, "code": "(fn [& args] (not (or (every? true? args) (every? false? args))))", "user": "5f1af439e4b0f565ad998257"}, {"problem": 83, "code": "(fn [& args]\n  (let [t (count (filter true? args))] \n   (and \n    \t(>= t 1) \n    \t(> (count args) t))))", "user": "5f2d6c70e4b033932238a66f"}, {"problem": 83, "code": "not=", "user": "5f0c3da4e4b0f30dddfb5d49"}, {"problem": 83, "code": "#(if (and (some false? %&) (some true? %&)) true false)", "user": "5f309144e4b0574c87022c23"}, {"problem": 83, "code": ";stolen soltion (fn [& bs] (every? true? [(some true? bs) (some false? bs)]))\n#(if \n    (and (> (count (filter true? (cons %1 %&))) 0) (> (count (filter false? (cons %1 %&))) 0)) \n    true \n    false)", "user": "5f0824c5e4b0cf489e8d7f5b"}, {"problem": 83, "code": "(fn half-true? [& bs]\n  (boolean (and (some true? bs) (not (every? true? bs)))))", "user": "5f300f28e4b033932238a682"}, {"problem": 83, "code": "(fn [& args]\n  (if (= 1 (count args)) false\n    (let [c (count (remove true? args))]\n      (and (> c 0) (< c (count args))))))", "user": "58f98231e4b0438e51c2cf4c"}, {"problem": 83, "code": "(fn [& xs]\n  (if (and (some true? xs) (not (every? true? xs)))\n    true\n    false))", "user": "566812f0e4b04acd4f672de1"}, {"problem": 83, "code": "(fn\n[& args]\n  (if (every? true? (into () args)) false\n      (true? (some true? (into () args)))))", "user": "5f274aeee4b0857314092c92"}, {"problem": 83, "code": "(fn [& rest]\n   (true? (and (not-every? true? rest) (some true? rest))))", "user": "5f3f2281e4b004f08c61c561"}, {"problem": 83, "code": "(fn [& args]\n  (if (every? true? args)\n    false\n    (boolean (some true? args))))", "user": "5f3ddc71e4b004f08c61c551"}, {"problem": 83, "code": "(fn \n  [& boolcoll]\n  (and\n   (not (every? true? boolcoll))\n   (reduce #(or %1 %2) false boolcoll)\n   ))", "user": "5bf9d9b7e4b0bdcf453d15c4"}, {"problem": 83, "code": "(fn [& args] (if (and (not (every? identity args)) (some identity args) ) true false))", "user": "5f2c94b4e4b033932238a669"}, {"problem": 83, "code": "#(and (not-every? true? %&)\n      (boolean (some true? %&)))", "user": "5f3abcc4e4b004f08c61c52b"}, {"problem": 83, "code": "(fn [& a]\n    (if (= (count (set a)) 2)\n      true\n      false\n    )\n  )", "user": "5f3a8493e4b004f08c61c527"}, {"problem": 83, "code": "(fn [& x] (= #{true false} (set x)))", "user": "5f36dc06e4b0574c87022c4c"}, {"problem": 83, "code": "(fn hf [& args]\n  (if (or (every? true? args) (nil? (some true? args))) false true))", "user": "5d92b543e4b0915913b1d414"}, {"problem": 83, "code": "#(> (count (set %&)) 1)", "user": "5f32f69ae4b0574c87022c35"}, {"problem": 83, "code": "(fn [& args] (and (or (some true? args) false)\n                  (or (some false? args) false)))", "user": "5992dc6ae4b0866487ed0d7d"}, {"problem": 83, "code": "(fn [& vals] (= (set vals) #{true false}))", "user": "5f4b6433e4b0102c75033953"}, {"problem": 83, "code": "(fn [& xs] (and (not-every? false? xs) (not-every? true? xs)))", "user": "5dd84170e4b0948ae9d9ad93"}, {"problem": 83, "code": "(fn [& bools]\n  (let [some? (fn [v] (if v true false))]\n  \t(and (some? (some true? bools))\n       \t(not (every? true? bools)))))", "user": "5f238a59e4b0f565ad99828d"}, {"problem": 83, "code": "not=", "user": "5f38eecce4b0574c87022c72"}, {"problem": 83, "code": "(fn a-half-truth [& args]\n  (println args)\n  (if (or (every? false? args) (every? true? args))\n    false\n    (some true? args)))", "user": "5b044436e4b0cc2b61a3bd71"}, {"problem": 83, "code": "(fn [& s] (true? (and (some #(= % true) s) (some #(= % false) s))))", "user": "5f313d01e4b0574c87022c28"}, {"problem": 83, "code": "(fn [& bools]\n              (if (every? true? bools)\n                false\n                (if (every? false? bools)\n                  false\n                  true))\n            )", "user": "53275758e4b09d4e7a9b54fc"}, {"problem": 83, "code": "#(= 2 (count (set %&)))", "user": "5f574662e4b0a0bc16850a90"}, {"problem": 83, "code": "not=", "user": "5f5f2eafe4b02876ed9fcff5"}, {"problem": 83, "code": "(fn [& v] \n  \n    (boolean(\n    and (not-every? true? v)\n       (some true? v)\n  )))", "user": "5f58db95e4b0a0bc16850a9a"}, {"problem": 83, "code": "(fn some-but-not-all\n  [& bools]\n  (letfn [(s [bools]\n            (and (not (every? false? bools))\n              (not (every? true? bools))))]\n    (apply s (vector bools))))", "user": "5f4eb036e4b0102c75033969"}, {"problem": 83, "code": "(fn f [& args]\n  (boolean (and (not (every? identity args)) (some identity args))))", "user": "5ea6fe98e4b00a66d4a951b2"}, {"problem": 83, "code": "(fn [& args]\n    (and (contains? (set args) true)\n      (not-every? identity args)))", "user": "5f56c0cae4b0a0bc16850a8c"}, {"problem": 83, "code": "not=", "user": "5e70c16de4b085ba37836dae"}, {"problem": 83, "code": "(fn half-truth\n  [& bools]\n  (true? (and (some true? bools) (not (every? true? bools))))\n  )", "user": "5f29837ee4b033932238a64f"}, {"problem": 83, "code": "(fn [& args]\n  (if (true? (and (some true? args) (some false? args)))\n  true\n  false))", "user": "5f63d933e4b02876ed9fd018"}, {"problem": 83, "code": "(fn [& [x & more :as all]] (if (every? true? all) false (if (some true? all) true false)))", "user": "5eff6c0ee4b0cf489e8d7f11"}, {"problem": 83, "code": "(fn [& args] (let [fls (filter false? args) tru (filter true? args)] (not (zero? (* (count fls) (count tru)))) ))", "user": "58c71509e4b021aa9917ed6e"}, {"problem": 83, "code": "(fn [& xs]\n  (true? (and (some true? xs) (some false? xs))))", "user": "5f63cde9e4b02876ed9fd015"}, {"problem": 83, "code": "not=", "user": "5f724f55e4b02876ed9fd089"}, {"problem": 83, "code": "#(= 2 (count (set %&)))", "user": "588fbb39e4b00487982d51bd"}, {"problem": 83, "code": "(fn [& rest] (= (count (set rest)) 2))", "user": "5f6cb2a5e4b02876ed9fd057"}, {"problem": 83, "code": "(fn [& b]\n  (= (set b) #{true false}))", "user": "54fce8bde4b07d26eda61d30"}, {"problem": 83, "code": "not=", "user": "5eecf110e4b07c55ae4a050b"}, {"problem": 83, "code": "(fn [& args] (= 2 (count (distinct args))))", "user": "5c06fab7e4b0bdcf453d16bd"}, {"problem": 83, "code": ";(fn [& x]\n;\t(boolean (and (not-every? identity x)\n;         \t\t(some identity x))))\n\nnot=", "user": "5f6a583ae4b02876ed9fd046"}, {"problem": 83, "code": "(fn [& a] \n(if\n  (and \n    (some identity a)\n    (not (every? identity a))\n  ) true\n  false\n)\n)", "user": "5f686436e4b02876ed9fd03c"}, {"problem": 83, "code": "(fn half-truth\n  [& x]\n  (if (and (some true? x) (some false? x))\n    true\n    false))", "user": "5f3103aee4b0574c87022c24"}, {"problem": 83, "code": "(fn [& items] (not (apply = items)))", "user": "5f648ef1e4b02876ed9fd01b"}, {"problem": 83, "code": "(fn [& args] \n  (if (and (some true? args) \n           (not (every? true? args)))\n    true false))", "user": "5ec0db8be4b00a66d4a9528d"}, {"problem": 83, "code": "not=", "user": "5f6e576ae4b02876ed9fd066"}, {"problem": 83, "code": "(fn [& c] (if (every? true? c)\n             false\n             (if (some true? c) true false)))", "user": "5e8c0c5be4b0cb0169546320"}, {"problem": 83, "code": "#(true? (and (some true? %&) (some false? %&)))", "user": "5f6caa19e4b02876ed9fd056"}, {"problem": 83, "code": "not=", "user": "5f727dd6e4b02876ed9fd090"}, {"problem": 83, "code": "(fn XOR\n  [& params]\n  (loop [[hd & tl] params found_true false found_false false]\n    (if (nil? hd)\n      (and found_true found_false)\n      (if hd\n      \t(recur tl true found_false)\n        (recur tl found_true true)\n      )\n    )\n  )\n)", "user": "5f6b8222e4b02876ed9fd052"}, {"problem": 83, "code": "not=", "user": "5f77b99fe4b02876ed9fd0bc"}, {"problem": 83, "code": "(fn [& args] (boolean (and (not-empty (filter false? args)) (not-empty (filter true? args)))))", "user": "5f6e5c58e4b02876ed9fd067"}, {"problem": 83, "code": "(fn [& args]\n  (= 2 (count (set args))))", "user": "5f79bff2e4b02876ed9fd0ca"}, {"problem": 83, "code": "not=", "user": "573102bbe4b0cd1946bd0fbb"}, {"problem": 83, "code": "not=", "user": "5f727be9e4b02876ed9fd08d"}, {"problem": 83, "code": "(fn [& b] (= #{true false} (set b)))", "user": "5f393bd6e4b0574c87022c76"}, {"problem": 83, "code": "not=", "user": "5f727bd1e4b02876ed9fd08c"}, {"problem": 83, "code": "; https://stackoverflow.com/questions/9242440/how-to-make-a-clojure-function-take-a-variable-number-of-parameters\n(fn [& params]\n    (and (not-every? true? params) (not-every? false? params)))", "user": "5f77d470e4b02876ed9fd0be"}, {"problem": 83, "code": "(fn[& args]\n     (let [half (Math/floor (/ (count args) 2.0))]\n         (cond\n             (every? true? args)\n             false\n             \n             \n             (>= (count (filter true? args)) half)\n                 true\n                 \n                 :else\n                 false)))", "user": "5f77890ae4b02876ed9fd0b9"}, {"problem": 83, "code": "not=", "user": "5f7e91c8e4b0c071e6c840d8"}, {"problem": 83, "code": "(fn [& booleans]\n  (not (or (every? identity booleans) (every? not booleans))))", "user": "56b9c644e4b0f2655033593a"}, {"problem": 83, "code": "not=", "user": "5f72f144e4b02876ed9fd093"}, {"problem": 83, "code": "not=", "user": "5f84f0f5e4b0375e81f54e78"}, {"problem": 83, "code": "(fn\n  [& bools]\n  (println bools)\n  (if (and (some true? bools) (some false? bools))\n    true\n    false))", "user": "5f6e23e6e4b02876ed9fd064"}, {"problem": 83, "code": "(fn[& x] (if \n              (and (some #(= % false) x) (some #(= % true) x))\n              true\n              false))", "user": "5f727d2fe4b02876ed9fd08f"}, {"problem": 83, "code": "not=", "user": "5f737899e4b02876ed9fd099"}, {"problem": 83, "code": "not=", "user": "5f8497dce4b0375e81f54e74"}, {"problem": 83, "code": "(fn [& params]\n  (= (set params) #{true false})\n  )", "user": "5f84f110e4b0375e81f54e79"}, {"problem": 83, "code": "not=", "user": "5f792d48e4b02876ed9fd0c5"}, {"problem": 83, "code": "(fn [& boo]\n    (if (not(every? true? boo))\n        (if (some true? boo)\n            true\n            false)\n        false))", "user": "5f74de11e4b02876ed9fd0a5"}, {"problem": 83, "code": "not=", "user": "5f8361bae4b01aacbe7a2712"}, {"problem": 83, "code": "not=", "user": "5f8795d4e4b020286baa5e96"}, {"problem": 83, "code": "not=", "user": "5f419985e4b0955706451fab"}, {"problem": 83, "code": "not=", "user": "5f87e757e4b0169f6814c40f"}, {"problem": 83, "code": "(fn [& args] (let[result (and (some true? args) (some false? args))]\n               (true? result)))", "user": "5f875a0ae4b020286baa5e94"}, {"problem": 83, "code": "(fn aHalfTruth[& booleans]\n  (= (set booleans) #{false true})\n  )", "user": "5f8330b8e4b01aacbe7a270f"}, {"problem": 83, "code": "not=", "user": "5f810e97e4b0c071e6c840ed"}, {"problem": 83, "code": "(fn halftruth [ & bools] (and (not (nil? (some true? bools))) (not-every? true? bools)))", "user": "5c8cfff8e4b048ec896c5996"}, {"problem": 83, "code": "not=", "user": "5f727cb0e4b02876ed9fd08e"}, {"problem": 83, "code": "(fn [& bs] (and (if (nil? (some true? bs)) false true) (if (nil? (some false? bs)) false true)))", "user": "5f8b06afe4b0715f5002d74a"}, {"problem": 83, "code": "(fn half-truth [& tr]\n  (cond\n    (every? true? tr) false\n    (some true? tr) true\n    :else false))", "user": "5f816cc6e4b0c071e6c840f1"}, {"problem": 83, "code": "not=", "user": "5f8e865fe4b0715f5002d76d"}, {"problem": 83, "code": "(fn foo [& val]\n  (= (set val) #{true false}))", "user": "5f8d76c3e4b0715f5002d758"}, {"problem": 83, "code": "(fn [& x] (not= (#(* (get % true 0) (get % false 0)) (frequencies x)) 0))", "user": "5f8fe45ae4b0715f5002d78d"}, {"problem": 83, "code": "(fn [& xs]\n  (if (and (some true? xs) \n           (not (every? true? xs)))\n    true\n    false))", "user": "5f93529ae4b0715f5002d7bc"}, {"problem": 83, "code": "(fn count-true [& bools] (if (and (some true? bools) (not= (count bools) (count (filter true? bools))))\n                             true\n                             false))", "user": "5f9567cce4b0715f5002d7c7"}, {"problem": 83, "code": "(fn [& my-list]\n  (if (and (some true? my-list) (some false? my-list))\n    true\n    false))", "user": "5f1eebcee4b0f565ad998273"}, {"problem": 83, "code": "(fn [& col] (true? (and (some false? col) (some true? col))))", "user": "5eb3d02be4b00a66d4a95215"}, {"problem": 83, "code": "(fn  [& args]\n(let  [ls args]\n  (loop [tc 0 fc 0 i 0]\n    (if (< i (count ls))\n      (if (nth ls i)\n        (recur (inc tc) fc (inc i))\n        (recur tc (inc  fc) (inc i)))\n      (if (and (> tc 0) (> fc 0))\n        true\nfalse)))))", "user": "5f73000ce4b02876ed9fd094"}, {"problem": 83, "code": "(fn [& s] \n  (cond (every? true? s) false\n        (some true? s) true\n        :else false))", "user": "5f597522e4b0a0bc16850a9e"}, {"problem": 83, "code": "(fn [& para] (if (some true? (seq para)) (false? (every? true? para)) false))", "user": "5ee4545ee4b029a2061bbe8d"}, {"problem": 83, "code": "(fn [& l] (not (or (every? #(= true %) l) (every? #(= false %) l))))", "user": "5f86a98be4b0649ffcda4caa"}, {"problem": 83, "code": "(fn [& x]\n   (if\n    (and\n     (seq (filter true? x))\n     (seq (filter false? x)))\n     true false))", "user": "5eb741e4e4b00a66d4a9523b"}, {"problem": 83, "code": "(fn\n  [ & xs]\n  (if (and (= true (first (set xs))) (= 1 (count (set xs))))\n    false\n  (reduce (fn\n   [acc x]\n   (or acc x))\n  false\n  xs)))", "user": "5e1c24f4e4b0dc959400852d"}, {"problem": 83, "code": "(fn myF [& xs] (if (some true? xs) (not-every? true? xs) false))", "user": "56eff7c1e4b04a395b9a0468"}, {"problem": 83, "code": "(fn [& xs] (= true (some true? xs) (some false? xs)))", "user": "5fa17538e4b0f0ebd91b77e3"}, {"problem": 83, "code": "(fn [& args] (= (set args) #{true false}))", "user": "5f9f032fe4b0715f5002d839"}, {"problem": 83, "code": "(fn [& lgcs]\n    (and (not (nil? (some true? lgcs)))\n         (not (every? true? lgcs))))", "user": "5f985283e4b0715f5002d800"}, {"problem": 83, "code": "(fn [& coll]\n   (and\n    (boolean (some true? coll))\n    (not-every? true? coll)))", "user": "5fa74b82e4b0fa27300f3dda"}, {"problem": 83, "code": "(fn [& bools]\n  (if (= 1 (count bools)) false\n    (and\n      (reduce #(or %1 %2) bools)\n      (not (reduce #(and %1 %2) bools)))))", "user": "5fa358a1e4b0f0ebd91b77fd"}, {"problem": 83, "code": "not=", "user": "5f331015e4b0574c87022c37"}, {"problem": 83, "code": "(fn f [& xs]\n  (let [r (and (some true? xs) (some false? xs))]\n    (if (nil? r)\n      false\n      true)))", "user": "5fa5b72ee4b0fa27300f3dca"}, {"problem": 83, "code": "(fn [& bools] (= #{false true} (set bools)))", "user": "5f5358b7e4b0a0bc16850a77"}, {"problem": 83, "code": "(fn [& args]\n  (and (boolean (some true? args)) (boolean (some false? args))))", "user": "5f3567d6e4b0574c87022c44"}, {"problem": 83, "code": "(fn [& args]\n   (true? (and (some true? args)\n               (some false? args))))", "user": "5fb544f6e4b08cb800c85b4e"}, {"problem": 83, "code": "(fn xor[& s] \n  (true? (and (some true? s) \n              (some false? s))))\n; Why the hell are 'or' and 'and' not functions ?\n; (= 1 (apply bit-xor \n;             (map {true 1, false 0} s)))", "user": "573a0ecce4b0cd1946bd1088"}, {"problem": 83, "code": "(fn  [& c] (if (= true (boolean (reduce (fn [a b] (and a b)) c))) false (boolean (reduce (fn [a b] (or a b)) c))))", "user": "5fab7ea6e4b08cb800c85ad8"}, {"problem": 83, "code": "(fn [& coll] \n (boolean (and\n  (some true? coll) \n  (some false? coll))))", "user": "5fb2eac0e4b08cb800c85b2f"}, {"problem": 83, "code": "#(not-every? (fn [x] (= x %)) %&)", "user": "5df79c31e4b0a607a9a45c9b"}, {"problem": 83, "code": "(fn [& args]\n  (let [n (count args)\n        t (count (filter #(= % true) args))]\n    (and (> t 0) (< t n))))", "user": "56e2c62fe4b03a7c14b85a37"}, {"problem": 83, "code": "(fn [& args]\n  (and (boolean (some true? args))\n       (not-every? true? args))\n  )", "user": "5fb3a096e4b08cb800c85b35"}, {"problem": 83, "code": "(fn [& x] (if (and (some #(= true %) x) (some #(= false %) x)) true false))", "user": "5fa96ddbe4b0fa27300f3dec"}, {"problem": 83, "code": "(fn [& coll] (true? (and (some true? (seq coll)) (some false? (seq coll)))))", "user": "5da5a1eee4b000c986472c04"}, {"problem": 83, "code": "(fn \n  [& xs]\n  (if (every? true? xs)\n    false\n    (not (nil? (some identity xs)))))", "user": "5484c3b2e4b0e286459a11a2"}, {"problem": 83, "code": "not=", "user": "5fc04417e4b0edf42a5593c6"}, {"problem": 83, "code": "(fn [& args] (boolean (and (some identity args) (not (every? identity args)))))", "user": "5df175bce4b03c219ef1a34d"}, {"problem": 83, "code": "(fn\n  [& bools]\n  (loop [elements bools\n         t-res nil\n         f-res nil]\n    (cond\n      (and (true? t-res) (false? f-res)) true\n      (= (count elements) 0) false ;; no more elements to draw from, assume false\n      :else (let [elm (first elements)\n                  tail (rest elements)]\n              (if elm\n                (recur tail elm f-res)\n                (recur tail t-res elm))))))", "user": "5ba28f36e4b0a20761a233c4"}, {"problem": 83, "code": "#(cond\n  (every? identity %&) false\n  (some identity %&) true\n  :else false)", "user": "5fc5c303e4b02c825b0c8c1a"}, {"problem": 83, "code": "not=", "user": "5f6b5d83e4b02876ed9fd050"}, {"problem": 83, "code": "(fn [& xs]\n    (if \n        (and \n         (some #(true? %) xs)\n         (some #(false? %) xs)\n\n         )\n      true\n      false)\n    )", "user": "5fa6db67e4b0fa27300f3dd2"}, {"problem": 83, "code": "(fn [& args] (= true (and  (some false? args) (some true? args))) )", "user": "5f6b35c3e4b02876ed9fd04d"}, {"problem": 83, "code": "(fn half-truth [& args]\n  (let [input (into #{} args)]\n    (and (contains? input true)\n         (contains? input false))))", "user": "558ffb4be4b0277789237667"}, {"problem": 83, "code": "(fn [& logics] \n  (= (set logics) #{true false}))", "user": "5a3e1243e4b0447ef91cc5ae"}, {"problem": 83, "code": "#(and (not-every? true? %&) (not-every? false? %&))", "user": "58c69d88e4b021aa9917ed5e"}, {"problem": 83, "code": "not=", "user": "5f96fa49e4b0715f5002d7e9"}, {"problem": 83, "code": "(fn [& c] (and (not (every? identity c))\n\t      \t   (not (not (some identity c)))))", "user": "5fb8fe30e4b03f550f448223"}, {"problem": 83, "code": "(comp (every-pred (partial not-every? true?) (partial not-every? false?)) list)", "user": "54d7e277e4b0a52adc2e2031"}, {"problem": 83, "code": "(fn\n [& rest]\n (boolean (and\n  (not-every? #(= true %) rest)\n  (some #(= true %) rest))))", "user": "59d4d126e4b0ef0a1e9b5be9"}, {"problem": 83, "code": "not=", "user": "5f838122e4b01aacbe7a2715"}, {"problem": 83, "code": "#(and (not (nil? (some identity %&))) (not (every? identity %&)))", "user": "5fbb010ae4b03f550f448233"}, {"problem": 83, "code": "#(not  (or (every? false? %&)\n            (every? true? %&)))", "user": "5fd361f2e4b07e53c2f3f04e"}, {"problem": 83, "code": "(fn  [& sq]\n  (true? (and (some identity sq) (not-every? identity sq)))\n  )", "user": "5fee18f2e4b05ac5b16ea1d2"}, {"problem": 83, "code": "#(true? (and (some identity %&) (not (every? identity %&))))", "user": "54aec375e4b09f271ff37cf9"}, {"problem": 83, "code": "(fn [& args]\n  (if (and (some identity args) (not (every? identity args)))\n    true\n    false))", "user": "5fef4292e4b05ac5b16ea1d7"}, {"problem": 83, "code": "(fn a-half-truth [& ls]\n  (if (every? true? ls)\n    false\n    (if (some true? ls)\n      true\n      false\n      ))\n  )", "user": "5fe1b893e4b05ac5b16ea16f"}, {"problem": 83, "code": "(fn [& args]\n  (and (not (nil? (some #(= true %) args)))\n       (not (every? #(= true %) args))))", "user": "5f974321e4b0715f5002d7f3"}, {"problem": 83, "code": "(fn a [& args]\n  (if (some #(= true %) args)\n    (if (some #(= false %) args) true false)  \n    false))", "user": "5fe09d1fe4b05ac5b16ea15b"}, {"problem": 83, "code": "(fn half-truth [& all] (and (not-every? true? all) (not (nil? (some true? all)))))", "user": "5ff454a1e4b05ac5b16ea20d"}, {"problem": 83, "code": "(fn [& b] (if (every? identity b) false (if (some identity b) true false)))", "user": "5ff3aca3e4b05ac5b16ea205"}, {"problem": 83, "code": "(fn [& xs]\n        (boolean (and (some true? xs)\n                      (some false? xs))))", "user": "546c4377e4b00cfc9eacc177"}, {"problem": 83, "code": "not=", "user": "5fd8bcb3e4b05ac5b16ea11b"}, {"problem": 83, "code": "(fn\n  [& bools]\n  (let [s (set bools)]\n  \t(and (contains? s true)\n    \t   (contains? s false))))", "user": "5fe9169ce4b05ac5b16ea1a0"}, {"problem": 83, "code": "#(< 0\n    (count (filter true? %&))\n    (count %&))\n\n;; #(apply not= %&)\n\n;; #(true? (and (some not %&) (some identity %&)))\n\n;; #(cond\n;;      (every? identity %&) false\n;;      (some identity %&) true\n;;      :else false)\n\n;; (fn [ & xs]\n;;     (let [con (partial contains? (set xs))]\n;;     (and (con true)\n;;          (con false))))", "user": "591ad160e4b09b4ee5954bdf"}, {"problem": 83, "code": "not=", "user": "5fd10010e4b07e53c2f3f02a"}, {"problem": 83, "code": "(fn bools [& rest]\n  (and (boolean (some true? rest))\n       (not (every? true? rest))))", "user": "5ff8ead1e4b06df49cee14ab"}, {"problem": 83, "code": "not=", "user": "5fd66e61e4b05ac5b16ea10a"}, {"problem": 83, "code": "(fn [& args]\n  \n  (if (and (some false? args) (some true? args))\n    true\n    false\n  ))", "user": "5ff676a9e4b06df49cee1497"}, {"problem": 83, "code": "(fn half-truth\n  [x & xs]\n  (if x (boolean (some false? xs))\n      (boolean (some true? xs))))", "user": "5f5e166ce4b02876ed9fcfed"}, {"problem": 83, "code": "(fn [& xs]\n  (true? (and (some true? xs) (some false? xs))))", "user": "6000e5d4e4b074f607df660d"}, {"problem": 83, "code": "not=", "user": "58a0ac0de4b02bd94d917e9c"}, {"problem": 83, "code": "(fn [& args] (and (not-every? true? args) (not-every? false? args)))", "user": "5eea5c98e4b029a2061bbebf"}, {"problem": 83, "code": "(fn [& bool]\n  (let [res (partition-by identity bool)]\n    (if (= 1 (count res))\n      (not (first res))\n      true)))", "user": "5ff61113e4b06df49cee1492"}, {"problem": 83, "code": "(fn fn1 [& args]\n  (and (not-every? #(true? %) args) (not-every? #(false? %) args)))", "user": "5e42602ae4b01d43a70e8e63"}, {"problem": 83, "code": "(fn [& args]\n  (and \n   (not= (some true? args) nil) \n   (not= (some false? args) nil)\n   )\n  )\n\n;; newer clojure versions have some? and every?", "user": "6004c750e4b074f607df6645"}, {"problem": 83, "code": "(fn [& bools] (= (set bools) #{true false}))", "user": "5fbf6fe7e4b0ad6fc3476147"}, {"problem": 83, "code": "(fn[& x](true? (and (some true? x) (some false? x)) ))", "user": "6001460ce4b074f607df6611"}, {"problem": 83, "code": "#(and (not (= nil (some true? %&))) (not-every? true? %&))", "user": "60057cd4e4b074f607df664a"}, {"problem": 83, "code": "(fn [& args] (->> args (group-by identity) count (= 2)))", "user": "5f37263de4b0574c87022c4e"}, {"problem": 83, "code": "(fn [& xs]\n  (true? (and (some identity xs) (not (every? true? xs)))))", "user": "5da7176ae4b000c986472c13"}, {"problem": 83, "code": "not=", "user": "5ff709e4e4b06df49cee149b"}, {"problem": 83, "code": "(fn foo [& xs] (boolean (and (some true? xs) (some false? xs))))", "user": "600ae927e4b074f607df6689"}, {"problem": 83, "code": "; Pretty janky: Collapses neighbouring values that match. If there's\n; only 1 value left, they all match, and so return false\n(fn [& bools]\n  (not= 1 (count (reduce\n                  #(if (not= (last %1) %2)\n                      (conj %1 %2)\n                      %1)\n                  [] bools))))", "user": "5edd05bfe4b0c7845d86b0f3"}, {"problem": 83, "code": "(fn [& lst] \n  (if (every? true? lst) \n    false\n    (boolean (some true? lst))))", "user": "570d4c30e4b0b0fb43fd06da"}, {"problem": 83, "code": "#(boolean (and (some true? %&)\n               (some false? %&)))", "user": "583369e6e4b089d5ab817c9c"}, {"problem": 83, "code": "not=", "user": "5ff70cfde4b06df49cee149c"}, {"problem": 83, "code": "#(let [xs %&] (\n               if (= 1 (count (partition-by identity xs)))\n               \tfalse\n               \ttrue))", "user": "6011b89ee4b074f607df66bc"}, {"problem": 83, "code": "(fn [& args]\n   (and\n     (not-every? true? args)\n     (not-every? false? args)))", "user": "57e10705e4b0bfb2137f5a6a"}, {"problem": 83, "code": "(fn some-true\n  [& bools]\n  \t(= true (and (some #(= % true) bools)\n                 (not-every? #(= % true) bools))))", "user": "601aaa93e4b0bf4ca6b10926"}, {"problem": 83, "code": "#(if (every? identity %&)\n    false\n    ((complement nil?) (some identity %&)))", "user": "60194b7ae4b0bf4ca6b1091f"}, {"problem": 83, "code": "(fn [& xs]\n   (or (and (some true? xs) ((complement every?) true? xs)) false))", "user": "5a9f2c53e4b0d174b936c812"}, {"problem": 83, "code": "#(boolean (and (some identity %&) (some not %&)))", "user": "60096aabe4b074f607df667f"}, {"problem": 83, "code": "not=", "user": "601ea14ae4b0bf4ca6b1094a"}, {"problem": 83, "code": "(fn [& args]\n  (and (not (every? true? args)) (not (every? false? args))))", "user": "5be1c6c6e4b0ed4b8aab4ca5"}, {"problem": 83, "code": "not=", "user": "5fd08397e4b07e53c2f3f024"}, {"problem": 83, "code": "(fn some-true? [& cols]\n  (= (set cols) #{true false}))", "user": "5fdb8657e4b05ac5b16ea133"}, {"problem": 83, "code": "(fn [& rest] \n  (let [n (count rest)\n  \t    t (count (filter true? rest))]\n    (and (> t 0) (< t n))))", "user": "60232ac0e4b0d5df2af2220c"}, {"problem": 83, "code": "(fn xor [& xs]\n  (and ((complement not-any?) true? xs)\n       (not-every? true? xs)))", "user": "601c39eee4b0bf4ca6b10937"}, {"problem": 83, "code": "not=", "user": "4e38f245535deb9a81d77f3e"}, {"problem": 83, "code": "(fn[& x](true? (and (some true? x) (some false? x))))", "user": "60195030e4b0bf4ca6b10920"}, {"problem": 83, "code": "(fn [& bls]\n  (let [s (vals (group-by #(true? %1) bls))]\n    (and (= 2 (count s)) (every? #(not (empty? %1)) s))))", "user": "60228147e4b0d5df2af22202"}, {"problem": 83, "code": "(fn [& args]\n  (if (and (some #(= % false) args)\n       (some #(= % true) args)) true false))", "user": "60264d89e4b0d5df2af2222d"}, {"problem": 83, "code": "(fn [& b] (boolean (and (some true? b) (some false? b))) )", "user": "6024544be4b0d5df2af2221f"}, {"problem": 83, "code": "(fn [& b]\n  (if (every? false? b) false\n    (if (every? true? b) false true)))\n\n;; this is pretty badass one symbol answer:\n;; not=", "user": "5fb68f09e4b08cb800c85b58"}, {"problem": 83, "code": "#(true? \n  (and\n    (some true? %&)\n    (some false? %&)))", "user": "601bdcb3e4b0bf4ca6b10930"}, {"problem": 83, "code": "(fn [& bs]\n  (and (reduce #(or %1 %2) bs) (not (every? true? bs))))", "user": "5afecee2e4b0cc2b61a3bd28"}, {"problem": 83, "code": "(fn [& args] (true? (and (some identity args) (not (every? identity args)))))", "user": "591e0782e4b09b4ee5954c25"}, {"problem": 83, "code": "not=", "user": "5fea32f3e4b05ac5b16ea1aa"}, {"problem": 83, "code": "(fn [& booleans] (= (set booleans) #{true false}))", "user": "602372aae4b0d5df2af2220f"}, {"problem": 83, "code": "#(->> ((juxt not-any? every?) identity %&) (not-any? identity))", "user": "6026737ee4b0d5df2af2222f"}, {"problem": 83, "code": "(fn [& blns]\n   (true? (and (not-every? true? blns) (some true? blns))))", "user": "602b90c1e4b0d5df2af22266"}, {"problem": 83, "code": "(fn [& e] (and (contains? (set e) true) (contains? (set e) false)))", "user": "602d5eade4b0d5df2af22279"}, {"problem": 83, "code": "not=", "user": "5ff64845e4b06df49cee1495"}, {"problem": 83, "code": "(fn [& args] (and (true? (some true? args)) (not-every? true? args) ))", "user": "5a778224e4b013a48d399761"}, {"problem": 83, "code": "(fn [& bools]\n  (if (and (some true? bools)\n           (some false? bools))\n    true\n    false))", "user": "601004d6e4b074f607df66b2"}, {"problem": 83, "code": "not=", "user": "600eb95de4b074f607df66a6"}, {"problem": 83, "code": "(fn [& xs]\n  (if (and (some true? xs)\n           (some #(not (true? %)) xs))\n      true\n      false))", "user": "5571d6e5e4b09a3098a5253f"}, {"problem": 83, "code": "#(= #{true, false} (set %&))", "user": "602f8400e4b0d5df2af22299"}, {"problem": 83, "code": "not=", "user": "54be7c0de4b0ed20f4ff6eec"}, {"problem": 83, "code": "(fn [& args]\n  (and (not (every? (complement identity) args))\n       (not (every? identity args))))", "user": "5fada7cce4b08cb800c85af5"}, {"problem": 83, "code": "(fn half-truth [& s]\n  (true? (and (some true? s) (some false? s)))\n)", "user": "60335b35e4b0d5df2af222bf"}, {"problem": 83, "code": "(fn [& a] (not-every? #(= (first a) %) a))", "user": "5feb6850e4b05ac5b16ea1b8"}, {"problem": 83, "code": "not=", "user": "5baba1ece4b0a20761a23482"}, {"problem": 83, "code": "(fn doo [& seqs]\n        ((fn foo [seqs cont conf]\n          (cond\n            (and(>  cont 0) (>  conf 0)) true\n            (empty? seqs)  false\n            (false? (first seqs )) (foo (rest seqs) cont (inc conf))\n            (true? (first seqs )) (foo (rest seqs) (inc cont)  conf)\n            )\n          )\n         seqs 0 0))", "user": "6038b6b4e4b0d5df2af222ef"}, {"problem": 83, "code": "not=", "user": "60337f1fe4b0d5df2af222c1"}, {"problem": 83, "code": "not=", "user": "602cc4d4e4b0d5df2af22274"}, {"problem": 83, "code": "(fn\n    [& rest]\n     (and \n      (> (count (filter true? rest)) 0)\n      (> (count (filter false? rest)) 0)\n    )\n  )", "user": "602f56c5e4b0d5df2af22297"}, {"problem": 83, "code": "(fn [& bools]\n  (if (and (not (every? true? bools))\n       (some true? bools))\n    true\n    false))", "user": "603d5f2ae4b0d5df2af2230c"}, {"problem": 83, "code": "#(if (and (some true? %&) (not (every? true? %&)))\n    true false)", "user": "6030855de4b0d5df2af222a6"}, {"problem": 83, "code": "not=", "user": "603e063ae4b0d5df2af2230f"}, {"problem": 83, "code": "(fn xor [& args]\n  (if (and (not (every? identity args))\n           (some identity args))\n    true\n    false))", "user": "60460824e4b02d28681c77bc"}, {"problem": 83, "code": "(fn [& xs] (boolean (and (some identity xs) (some not xs))))", "user": "6045582fe4b02d28681c77b6"}, {"problem": 83, "code": "(fn [& xs] (true? (and (some identity xs) (not (every? identity xs)))))", "user": "60486e8ae4b02d28681c77db"}, {"problem": 83, "code": "(fn [& args]\n    (boolean (and (some true? args)\n                  (not (every? true? args)))))", "user": "6026d2cae4b0d5df2af22232"}, {"problem": 83, "code": "(fn [& xs] (and (not (every? true? (seq xs)))\n                 (if (some true? (seq xs)) true false)))", "user": "604b072ae4b0a426fc8b43d2"}, {"problem": 83, "code": "(fn has-true [& etc]\n  (if (= 1 (count etc)) (false? (first etc))\n                        (if (= 3 (count etc)) (false? (first etc))\n                                                      (if (= 1 (reduce bit-xor (map #(if % 1 0) etc))) true false))))", "user": "604f4be1e4b0b7ec0ac60ace"}, {"problem": 83, "code": "(fn\n   [& args]\n   (not (or (every? true? args) (every? false? args))))", "user": "60396c95e4b0d5df2af222f4"}, {"problem": 83, "code": "(fn\n  [& coll]\n  (boolean (and (some true? coll)\n                (some false? coll))))", "user": "4e586949535d8a8b8723a292"}, {"problem": 83, "code": "(fn [& x] (= 2 (count (set x))))", "user": "604d3cb1e4b0b7ec0ac60ac2"}, {"problem": 83, "code": "not=", "user": "6020365ae4b0bf4ca6b10960"}, {"problem": 83, "code": "not=", "user": "598e7998e4b02b9968b84d34"}, {"problem": 83, "code": "(fn [& list]  (not (apply = list )))", "user": "5fec4f5ee4b05ac5b16ea1bf"}, {"problem": 83, "code": "(fn [& args] (and (not= nil (some #(= true %) args)) (not= nil (some #(= false %) args))))", "user": "603f6623e4b0d5df2af2231f"}, {"problem": 83, "code": "(fn [& args] (and (not-every? true? args) (not-every? false? args)))", "user": "526759b3e4b03e8d9a4a715b"}, {"problem": 83, "code": "(fn [& bools]\n  (and (not-every? #(= true %) bools)\n       (or (some #(= true %) bools) false)))", "user": "5ef381a3e4b07c55ae4a053c"}, {"problem": 83, "code": "(fn [& xs]\n  (boolean \n   (and\n    (some true? xs) \n    (some false? xs))))", "user": "605b7a90e4b079a07f8593fc"}, {"problem": 83, "code": "(fn [& bools] (= (set bools) #{true false}))", "user": "6059d2e0e4b07e92fa001ace"}, {"problem": 83, "code": "(fn [& b](and (boolean (some identity b))\n                               (not (every? true? b))))", "user": "5b522591e4b02d533a91bd09"}, {"problem": 83, "code": "(fn [& p] (and (if (nil? (some true? p)) false true) (not-every? true? p)))", "user": "60471241e4b02d28681c77c9"}, {"problem": 83, "code": "(fn [& bools] (= (count (set bools)) 2))", "user": "60521ea8e4b056659d634205"}, {"problem": 83, "code": "not=", "user": "6059d9c8e4b07e92fa001ad0"}, {"problem": 83, "code": "#(true? (and (some true? %&) (not-every? true? %&)))", "user": "60538924e4b04c8f2157d153"}, {"problem": 83, "code": "(fn [& bseq] (boolean (and (some #(= false %) bseq) (some #(= true %) bseq))) )", "user": "6059d824e4b07e92fa001acf"}, {"problem": 83, "code": "#(not (apply = %&))", "user": "6040e6dbe4b0d5df2af2232a"}, {"problem": 83, "code": "(fn [& args]\n  (cond\n   (every? true? args) false\n   (some   true? args) true\n   :else               false))", "user": "5f665d45e4b02876ed9fd02f"}, {"problem": 83, "code": "(fn [& args] (true? (and (some true? args) (some false? args))))", "user": "60654263e4b069485764ddc9"}, {"problem": 83, "code": "(fn [a & b]\n  (let [c (conj b a)]\n  (cond\n  (every? true? c) false\n  (some true? c) true\n   :else false\n  )))", "user": "6065755ee4b069485764ddcc"}, {"problem": 83, "code": "(fn [& arr]\n  (loop [remaining arr\n         result #{}]\n    (if (= 2 (count result))\n      true\n      (if (empty? remaining)\n        false\n        (recur (rest remaining) (conj result (first remaining))\n        )\n      ))))", "user": "60593916e4b07e92fa001acc"}, {"problem": 83, "code": "(fn [& boos] (if (and (some true? boos) (false? (reduce #(and %1 %2) true boos))) true false))", "user": "5f548678e4b0a0bc16850a7e"}, {"problem": 83, "code": "(fn [& args]\n  (and (not (every? true? args))\n       (not (every? false? args))))", "user": "606aafcfe4b069485764ddf6"}, {"problem": 83, "code": "(fn [& args]\n  (if (apply = args)\n    false\n    (if (some true? args)\n      true\n      false)))", "user": "5ec02e20e4b00a66d4a95288"}, {"problem": 83, "code": "not=", "user": "60689984e4b069485764dde6"}, {"problem": 83, "code": "(fn c [& l]\n    (boolean\n     (and (some identity l) (not-every? identity l))))", "user": "603ae21de4b0d5df2af222fb"}, {"problem": 83, "code": "#(if (every? true? %&)\n   false\n   (boolean (some true? %&)))", "user": "52cf5450e4b07d0d72b273a4"}, {"problem": 83, "code": "(fn [& c] (and (not (every? true? c)) (not (every? false? c))))", "user": "606a70a5e4b069485764ddf2"}, {"problem": 83, "code": "#(not (= 1 (count (set (into [] %&)))))", "user": "606c87aae4b069485764de0d"}, {"problem": 83, "code": "(fn [& args] (if (and (some identity args) (not (every? identity args))) true false))", "user": "606e0a42e4b069485764de19"}, {"problem": 83, "code": "#(and (not-every? true? %&) (not-every? false? %&))", "user": "5eedfc62e4b07c55ae4a050e"}, {"problem": 83, "code": "not=", "user": "606d75f5e4b069485764de13"}, {"problem": 83, "code": "(fn half-truth [& args]\n  (cond\n    (every? true? args) false\n    (every? false? args) false\n    :else true))", "user": "605a876be4b000d535e6f53c"}, {"problem": 83, "code": "#(true? \n  (and\n    (some true? %&)\n    (some false? %&)))", "user": "5d9dba12e4b0eb781811cdb9"}, {"problem": 83, "code": "(fn\n    [b1 & b2]\n    (cond\n        (and (= b2 nil) b1) false\n        (and (= b2 nil) (not b1)) true \n        (and (not (seq? b2)) (and (or b1 (reduce #(or % false) (list b2))) (= false (and b1 (reduce #(and % true) (list b2)))))) true\n        (and (seq? b2) (and (or b1 (reduce #(or % %2)  b2)) (= false (and b1 (reduce #(and % %2)  b2))))) true\n        :else\n        false\n        )\n )", "user": "6074f5ede4b069485764de52"}, {"problem": 83, "code": "(fn solve [& bools]\n  (= (set bools) #{true false}))", "user": "60537cd1e4b04c8f2157d152"}, {"problem": 83, "code": "not=", "user": "6074e088e4b069485764de4d"}, {"problem": 83, "code": "#(true? (and (some true? %&) (some false? %&)))", "user": "60282169e4b0d5df2af22240"}, {"problem": 83, "code": "(fn half-truth [& pars]\n  (if (or (reduce #(and %1 %2) pars) (not (reduce #(or %1 %2) pars)))\n    false\n    true))", "user": "5f6adf5ee4b02876ed9fd049"}, {"problem": 83, "code": "#(= (set %&) #{true false})", "user": "606da089e4b069485764de15"}, {"problem": 83, "code": ";;; si entiendo bien & recibe varios argumentes, como variadic en c? y despues la variable\n;;; hacemos un set y comparamos ? \n\n(fn [& x] (= (set x) #{true false}))", "user": "6075c214e4b069485764de5b"}, {"problem": 83, "code": "(fn ha [& tfs]\n  (let [trues (count (filter identity tfs))\n        totals (count tfs)]\n    (and (pos? trues)\n         (not= trues totals))))", "user": "605b49b7e4b079a07f8593f8"}, {"problem": 83, "code": "not=", "user": "60764350e4b069485764de5e"}, {"problem": 83, "code": "not=", "user": "606ff89be4b069485764de22"}, {"problem": 83, "code": "(fn [& args] (and (= true (some true? args)) (not (every? true? args))))", "user": "6074df6fe4b069485764de4b"}, {"problem": 83, "code": "(fn [& bools]\n  (if (and (some #{true} bools) (not-every? #{true} bools))\n    true\n    false))", "user": "5cf938a5e4b0b71b1d808a90"}, {"problem": 83, "code": "not=", "user": "607e1d32e4b03d835a6eaeda"}, {"problem": 83, "code": "(fn [& bools]\n  (apply not= bools))", "user": "5e860270e4b09a7a73c8bbdb"}, {"problem": 83, "code": "#(true? (and (some true? %&) (some false? %&)))", "user": "607d6bc1e4b03d835a6eaecc"}, {"problem": 83, "code": "not=", "user": "60803206e4b0736b099e42cc"}, {"problem": 83, "code": "not=", "user": "60777335e4b0a637ed78034f"}, {"problem": 83, "code": "(fn [& args] (and (not (every? identity args)) (not (nil? (some identity args)))))", "user": "57ca338de4b05aa3c4741d37"}, {"problem": 83, "code": "(fn [& args]\n  (< 0\n     (count (filter true? args))\n     (count args)))", "user": "5f82609ae4b0c071e6c840f9"}, {"problem": 83, "code": "#(= #{true false} (set %&))", "user": "60836285e4b0736b099e42e4"}, {"problem": 83, "code": "(fn [& bools]\n  (= 2 (count (set bools))))", "user": "5e3d183fe4b01d43a70e8e11"}, {"problem": 83, "code": "(fn [& args] (if (and (some true? args) (some false? args)) true false ))", "user": "6074e278e4b069485764de51"}, {"problem": 83, "code": "(fn [& c] (not (nil? (and (some true? c)(some false? c)))))", "user": "6070c7bae4b069485764de27"}, {"problem": 83, "code": "not=", "user": "6086cdefe4b0736b099e4302"}, {"problem": 83, "code": "(fn [& coll]\n  (= (set coll) #{false true}))", "user": "607a1523e4b0a637ed78036a"}, {"problem": 83, "code": "(fn some-true? [& args]\n  (= (set args) #{true false}))", "user": "6074e1e4e4b069485764de4f"}, {"problem": 83, "code": "(fn a-half-truth [& booleans]\n  (= (set booleans) #{true false}))", "user": "607dd962e4b03d835a6eaed2"}, {"problem": 83, "code": "not=", "user": "608828dee4b0ae75613dcee1"}, {"problem": 83, "code": "not=", "user": "6088395de4b0ae75613dcee2"}, {"problem": 83, "code": "not=", "user": "6074dfa4e4b069485764de4c"}, {"problem": 83, "code": "not=", "user": "607e1cf9e4b03d835a6eaed9"}, {"problem": 83, "code": "not=", "user": "6074e1ade4b069485764de4e"}, {"problem": 83, "code": "not=", "user": "607b6452e4b0a637ed780375"}, {"problem": 83, "code": "(fn [& args]\n  (and \n   (not-every? true? args) \n   (boolean (some true? args))))", "user": "5aa098fae4b0d174b936c82e"}, {"problem": 83, "code": "(fn halft[& tf](=(set tf) #{true false}))", "user": "6085edade4b0736b099e42fc"}, {"problem": 83, "code": "(fn AHalf-Truth [& bools]\n  (> (count (distinct bools)) 1))", "user": "607508f3e4b069485764de54"}, {"problem": 83, "code": "not=", "user": "608b3fe1e4b0adce4b61c442"}, {"problem": 83, "code": "(fn [& params]\n  (let [items (count params)\n        by-false (split-with false? params)\n        by-true (split-with true? params)]\n    (cond\n     (> items 2) (if \n                   (and (or (= 0 (count (first by-false))) (= 0 (count (last by-false)))) \n                        \t(or (= 0 (count (first by-true))) (= 0 (count (last by-true)))))\n                   false true)\n     (= items 2) (if (and (some true? params) (some false? params)) true false)\n     :else false\n     )\n    )\n  )", "user": "60752ef6e4b069485764de55"}, {"problem": 83, "code": "(fn [& args]\n   (and\n     (not (reduce (fn [a b] (and a b)) args))\n     (reduce (fn [a b] (or a b)) args)))", "user": "60882700e4b0ae75613dcedf"}, {"problem": 83, "code": "(fn [& x] (if (some true? x)\n            (if (every? true? x)\n              false\n              true)\n            false))", "user": "607e1d9de4b03d835a6eaedb"}, {"problem": 83, "code": "(fn some-not-every [& args] (if\n                                  (and (some true? args) (not (every? true? args)))\n                                  true\n                                  false))", "user": "6078ce29e4b0a637ed78035a"}, {"problem": 83, "code": "(fn [& args] (apply not= args))", "user": "5f0a65dae4b09a3f05b71806"}, {"problem": 83, "code": "not=", "user": "5e7fb908e4b085ba37836e3f"}, {"problem": 83, "code": "(fn [& coll] \n    (if (or (= (count coll) (count(filter true? coll))) (empty? (filter true? coll)))\n        false\n        true\n        \n               ))", "user": "607f3336e4b05857a65e7747"}, {"problem": 83, "code": "not=", "user": "6088c22ee4b0ae75613dcee4"}, {"problem": 83, "code": ";(fn [& args]\n;  (let [agg (reduce\n;             #(if (true? %2)\n;                (assoc %1 :true (inc (:true %1)))\n;                (assoc %1 :false (inc (:false %1))))\n;             {:true 0 :false 0}\n;             args)]\n;    (and (> (:true agg) 0)\n;         (> (:false agg) 0))))\n\n   \n;(fn [& args]\n;  (and\n;   (not-every? true? args)\n;   (not-every? false? args)))\n\n;(fn [& args]\n;  (and\n;   (apply (some-fn true?) args)\n;   (apply (some-fn false?) args)))\n\n(fn [& args]\n  (boolean\n   (and\n    (some true? args)\n    (some false? args))))", "user": "608910a8e4b0ae75613dceed"}, {"problem": 83, "code": "not=", "user": "6081b7fce4b0736b099e42d4"}, {"problem": 83, "code": "(fn ans-83 [& arg]\n  (and (not(nil? (some true? arg))) (not-every? true? arg) ))", "user": "608fac60e4b03bd49d9f36c7"}, {"problem": 83, "code": "(fn [& all] \n   (let [x (into #{} all)] \n     (if (= (= (count x) 1) (contains? x true))\n       false\n       (if (contains? x true)\n        true \n        false \n       )\n      ) \n    )\n  )", "user": "60845eb8e4b0736b099e42ef"}, {"problem": 83, "code": "not=", "user": "60849bd6e4b0736b099e42f2"}, {"problem": 83, "code": "(fn [h & k] (and (not-every? true? (cons h k))(not-every? false? (cons h k))))", "user": "5f1eec36e4b0f565ad998274"}, {"problem": 83, "code": "(fn half-truth [& args]\n   (loop [trues 0 falses 0 bools args]\n     (if (= '() bools)\n       (and (> trues 0) (> falses 0))\n       (if (first bools)\n         (recur (inc trues) falses (rest bools))\n         (recur trues (inc falses) (rest bools))))))", "user": "6090e617e4b03bd49d9f36ce"}, {"problem": 83, "code": "(fn [& bs]\n  (true? ;; extra true? needed as (some true? bs) returns true or nil\n   (and (some true? bs)\n        (not (every? true? bs)))))\n;(fn [& bs]\n;  (cond\n;    (every? true? bs) false\n;    (some true? bs) true\n;    :else false))", "user": "60794173e4b0a637ed78035d"}, {"problem": 83, "code": "(fn \n  [& args]\n  (and (not-every? true? args) \n       (not (nil? (some true? args)))))", "user": "601bb40de4b0bf4ca6b1092f"}, {"problem": 83, "code": "( let [or2 (fn [x y] (or x y))] (fn xor  [x & more]  (and (reduce or2  x more)  (reduce or2  (not x) (map not more)))))", "user": "6076adb2e4b069485764de60"}, {"problem": 83, "code": "#(and (not (every? true? %&)) (not (every? false? %&)) )", "user": "608ee2f7e4b03bd49d9f36c1"}, {"problem": 83, "code": "(fn halftruth[& x]\n  (and (true? (some true? x))\n       (not-every? true? x)))", "user": "608c270ae4b03bd49d9f36b3"}, {"problem": 83, "code": "not=", "user": "608e6047e4b03bd49d9f36bf"}, {"problem": 83, "code": "(fn [& x]                               \n  (loop [lst x t 0 f 0]\n    (if (empty? lst)\n      (= t f)\n      (if (true? (first lst))\n        (recur (rest lst) true f)\n        (recur (rest lst) t true)))))", "user": "58e90258e4b056aecfd47cfd"}, {"problem": 83, "code": "(fn [& bools]\n  (and (boolean (some identity bools)) (not (every? identity bools))))", "user": "608ec5e4e4b03bd49d9f36c0"}, {"problem": 83, "code": "(fn [& xs] (and (not (every? false? xs)) (not (every? true? xs))))", "user": "6098263be4b00e9e6653c3f9"}, {"problem": 83, "code": "not=", "user": "4f30896ce4b0d6649770a07b"}, {"problem": 83, "code": "not=", "user": "609da465e4b00e9e6653c41f"}, {"problem": 83, "code": "(fn\n  [& s]\n  (if (every? true? s)\n    false\n    (if (some true? s) true false)))", "user": "6086abade4b0736b099e42ff"}, {"problem": 83, "code": "not=", "user": "609aa543e4b00e9e6653c40c"}, {"problem": 83, "code": "(fn [& args]\n  (and (not (every? false? args))\n       (not (every? true? args))))", "user": "60a39b80e4b00e9e6653c450"}, {"problem": 83, "code": "(fn [& args]\n  (let [c (->> args\n              (filter #(= % true)))\n        f (->> args \n               (filter #(= % false)))]\n    (if (and (> (count c) 0) (> (count f) 0)) true false)))", "user": "60aecd73e4b00e9e6653c49a"}, {"problem": 83, "code": "(fn [& x] (true? (and (some true? x) (not (every? true? x)))))", "user": "60b2aaebe4b0e0fa5f1b4228"}, {"problem": 83, "code": "(fn [& cols] (= (set cols) #{true false}))", "user": "60a9a829e4b00e9e6653c470"}, {"problem": 83, "code": "(fn [& args]\n  (cond\n    (every? true? args) false\n    (every? false? args) false\n    :else true))", "user": "609e9b64e4b00e9e6653c426"}, {"problem": 83, "code": "(fn [& sq]\n  (if (and (some #(= % true) sq) (some #(= % false) sq))\n    true\n    false))", "user": "51b920bfe4b0e871ca4958f9"}, {"problem": 83, "code": "(fn x [& booleans]\n  (= (set booleans) #{true false}))", "user": "5ffd7cc0e4b074f607df65fa"}, {"problem": 83, "code": "(fn [& args]\n  (if (every? true? args) false (if (some true? args) true false)))", "user": "60b3b8a9e4b0e0fa5f1b4233"}, {"problem": 83, "code": "not=", "user": "57123c96e4b09c608db70454"}, {"problem": 83, "code": "(fn [& vals] (and (= 0 (get (zipmap vals (repeat 0)) true)) (= 0 (get (zipmap vals (repeat 0)) false))))", "user": "60b8f098e4b0e0fa5f1b425f"}, {"problem": 83, "code": "(fn [t & args]\n  (let [c (cons t args)\n        t (count (filter true? c))\n        l (count c)]\n    (if (and (>= t 1) (not= l t))\n      true\n      false)))", "user": "604a3daee4b02d28681c77f2"}, {"problem": 83, "code": "not=", "user": "60b7e2c5e4b0e0fa5f1b4252"}, {"problem": 83, "code": "#(not (or (every? identity %&)\n           (every? false? %&)))", "user": "51bd78c3e4b0ff155d51d2b0"}, {"problem": 83, "code": "#(true? (and (some false? %&) (some true? %&) ))", "user": "60bfb68be4b0e0fa5f1b429e"}, {"problem": 83, "code": "(fn [& vs] (and (not (every? false? vs)) (not (every? true? vs))))", "user": "53720c5ce4b0493c815db704"}, {"problem": 83, "code": "(fn [& x] (and\n           (not (every? true? x))\n           (if (some true? x)\n             true\n             false)\n           (some false? x)))", "user": "5ae9b23fe4b0cc2b61a3bbd8"}, {"problem": 83, "code": "(fn [& bools]\n  (if (and (some true? bools)\n  \t   (some false? bools)) true false))", "user": "608e5697e4b03bd49d9f36be"}, {"problem": 83, "code": "not=", "user": "60c0ceb7e4b0e0fa5f1b42a6"}, {"problem": 83, "code": ";; Assumes all args are either true or false, which\n;; doesn't meet the description.\n(fn half-truth [& bools]\n  (->> bools\n       set\n       count\n       (< 1)))", "user": "60c91f48e4b0e0fa5f1b4304"}, {"problem": 83, "code": "#(if (and (some true? %&) (some false? %&)) true false)", "user": "5fd92743e4b05ac5b16ea11f"}, {"problem": 83, "code": "(fn [& args]\n  (and (not (every? true? args)) (not (nil? (some true? args)))))", "user": "60cb3836e4b0e0fa5f1b4315"}, {"problem": 83, "code": "(fn [& bs](= (set bs) #{true false}))", "user": "60c06c14e4b0e0fa5f1b42a1"}, {"problem": 83, "code": "(fn half-truth\n  [& args]\n\n  (cond\n    (every? true? args) false\n    (every? false? args) false\n    (some true? args) true))", "user": "60c90322e4b0e0fa5f1b4302"}, {"problem": 83, "code": "(fn [& xs] (if (and (some false? xs) (some true? xs)) true false ))", "user": "6022429be4b0d5df2af22200"}, {"problem": 83, "code": "not=", "user": "60dd865ee4b0d8b48c489db3"}, {"problem": 83, "code": "not=", "user": "60e955ade4b0584f1d4a8dc1"}]