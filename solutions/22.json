[{"code": "(fn [seq]\r\n(loop [s seq cnt 0]\r\n(if (= s '()) cnt\r\n(recur (rest s) (+ cnt 1))))\r\n)", "problem": 22, "user": "4dd5e2cc535dae65d5c462ec"}, {"code": "(fn length [ls]\r\n  (if (empty? ls)\r\n    0\r\n    (+ 1 (length (rest ls)))))", "problem": 22, "user": "4dd62278535d2dad7130b5c7"}, {"code": "(fn [a-seq]\r\n  (loop [s a-seq a 0]\r\n    (if (empty? s)\r\n      a\r\n      (recur (rest s) (inc a)))))", "problem": 22, "user": "4dd61f98535d2dad7130b5c6"}, {"code": "(fn c [l]\r\n  (if (empty? l)\r\n    0\r\n    (inc (c (rest l)))))", "problem": 22, "user": "4dd29ede535dae65d5c462da"}, {"code": "(fn [x] \r\n  (loop [c 0\r\n      i x]\r\n      (if (nil? (first i))\r\n        c\r\n        (recur (inc c) (rest i)))))", "problem": 22, "user": "4dd67f10535d2dad7130b5c9"}, {"code": "reduce (fn [l r] (+ l 1)) 0", "problem": 22, "user": "4dd579b5535dae65d5c462ea"}, {"code": "(fn[x](apply +(map #(do% 1)x)))", "problem": 22, "user": "4dd66da7535d2dad7130b5c8"}, {"code": "(fn [s]\r\n  (loop [s-rem s cnt 0]\r\n\t\t(if (seq s-rem)\r\n\t\t\t(recur (rest s-rem) (inc cnt))\r\n\t\t\tcnt)))", "problem": 22, "user": "4dd6d6a0535d2dad7130b5ca"}, {"code": "#(reduce (fn [acc _] (inc acc)) 0 %)", "problem": 22, "user": "4dd6d7ee535d2dad7130b5cb"}, {"code": "(comp inc first last (partial map-indexed list))", "problem": 22, "user": "4dd6fa35535d2dad7130b5cd"}, {"code": "(fn [y]\r\n                     ((fn [x acc] (if (empty? x) acc (recur (rest x) (+ 1 acc)))) y 0))", "problem": 22, "user": "4dd74879535d2dad7130b5d0"}, {"code": "(fn [x]\r\n  ((fn [s n] \r\n    (if (empty? s)\r\n      n\r\n      (recur (rest s) (+ n 1)))) x 0))", "problem": 22, "user": "4dd14bd6535da60f04a96e59"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "4dc986d0535d5973398f9285"}, {"code": "#(reduce (fn [n _] (inc n)) 0 %)", "problem": 22, "user": "4dd7d040535d2dad7130b5d6"}, {"code": "(fn count-seq [coll]\r\n  (let [indexed (fn [s] (map vector (iterate inc 1) s))]\r\n    (first (last (indexed coll)))))", "problem": 22, "user": "4dd7c1da535d2dad7130b5d4"}, {"code": "reduce (fn [x y] (+ x 1)) 0", "problem": 22, "user": "4dd865e1535d2dad7130b5d7"}, {"code": "(fn [xs] (reduce + (map (fn [x] (+ 1)) xs)))", "problem": 22, "user": "4dc4c869535d8a4b2fd74280"}, {"code": "(fn mycount [xs]\r\n  (if (empty? xs) 0\r\n      (inc (mycount (rest xs)))))", "problem": 22, "user": "4dd023dd535d5973398f92ad"}, {"code": "(fn length [l]\r\n (if (empty? l) 0 (inc (length (rest l))))\r\n )", "problem": 22, "user": "4dd4f0a8535dae65d5c462e4"}, {"code": "(fn [arg]\r\n  (loop [s arg n 0]\r\n    (if (empty? s)\r\n        n\r\n        (recur (rest s) (inc n)))))", "problem": 22, "user": "4dd9d299535d2dad7130b5dd"}, {"code": "(fn [l]\r\n  ((fn p2 [l n]\r\n    (if (empty? l)\r\n        n\r\n        (recur (rest l) (+ 1 n))))\r\n    l 0))", "problem": 22, "user": "4dda2c1b535d02782fcbe9ef"}, {"code": "(fn [set]\r\n    ((fn [setx counter]\r\n      (if (empty? setx)\r\n        counter\r\n        (recur (rest setx) (+ counter 1))\r\n      )\r\n    ) set 0\r\n    )\r\n  )", "problem": 22, "user": "4dd6fa3a535d2dad7130b5ce"}, {"code": "(partial reduce (fn [acc l] (inc acc)) 0)", "problem": 22, "user": "4ddbd934535d02782fcbe9fc"}, {"code": "(fn [xs] ((fn [x xs] (if (empty? xs) x (recur (+ 1 x) (rest xs)))) 0 xs))", "problem": 22, "user": "4ddabc33535d02782fcbe9f5"}, {"code": "#(-> % vec .length)", "problem": 22, "user": "4db4c93f535dc0f10411755c"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "4ddbfb8a535d02782fcbea00"}, {"code": "(fn mycount [x] (if (next x)\r\n                (+ (mycount (next x)) 1)\r\n                1\r\n))", "problem": 22, "user": "4ddbd600535d02782fcbe9fb"}, {"code": "(fn [lst] (loop [xs lst size 0]\r\n(if (= (first xs) nil) size (recur (rest xs) (+ size 1)))))", "problem": 22, "user": "4ddc620d535d02782fcbea06"}, {"code": ";my-count\r\n(fn [in-seq]\r\n  (let [f \r\n        (fn [base ne]\r\n          (if ne (inc base) base))]\r\n(reduce f 0 in-seq)))", "problem": 22, "user": "4ddcabcb535d6ebe9be03f52"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "4dda5d07535d02782fcbe9f2"}, {"code": "(fn [xs] (loop [xs xs acc 0] (if (seq xs) (recur (rest xs) (inc acc)) acc)))", "problem": 22, "user": "4dc8205f535d8a4b2fd74296"}, {"code": "(fn [coll]\r\n  (reduce + (map (fn [_] 1) coll)))", "problem": 22, "user": "4ddbdc1b535d02782fcbe9fd"}, {"code": "(fn [a]\r\n  (loop [r 0, b a]\r\n    (if (seq b)\r\n      (recur (+ 1 r) (rest b))\r\n      r)))", "problem": 22, "user": "4db342d7535df7e46ed9b6cd"}, {"code": "(fn [seq] (apply + (map (fn [i] 1) seq)))", "problem": 22, "user": "4dddf817535d08e6dec9fdd3"}, {"code": "(fn [s]\r\n  (loop [t (seq s) x 0]\r\n  (if (nil? t) x (recur (next t) (inc x)))))", "problem": 22, "user": "4dde4e95535d08e6dec9fdd7"}, {"code": "(fn [items]\r\n  (loop [items items cc 0]\r\n    (if (empty? items)\r\n        cc\r\n        (recur (rest items) (+ cc 1)))))", "problem": 22, "user": "4ddc1c89535d02782fcbea01"}, {"code": "reduce (fn [a _] (+ a 1)) 0", "problem": 22, "user": "4ddeb916535d08e6dec9fdd9"}, {"code": "(fn [coll]\r\n  (reduce (fn [x y] (inc x)) 0 coll))", "problem": 22, "user": "4ddee37c535d08e6dec9fddc"}, {"code": "(fn [x]\r\n  (loop [s x c 0]\r\n    (if-not (empty? s)\r\n      (recur (rest s) (inc c))\r\n      c)))", "problem": 22, "user": "4de08793535d08e6dec9fde2"}, {"code": "(fn len\r\n           ([x] (len x 0))\r\n           ([x acc] (if (nil? x) acc (len (next x) (inc acc)))))", "problem": 22, "user": "4de0ff03535d08e6dec9fde4"}, {"code": "(fn [l]\r\n    (loop [liste l, index 0]\r\n      (if (empty? liste) \r\n      index \r\n      (recur (rest liste) (inc index)))))", "problem": 22, "user": "4ddad2ff535d02782fcbe9f7"}, {"code": "(fn c [x]\n  (if (empty? x)\n    0\n    (inc (c (rest x)))))", "problem": 22, "user": "4de18de7535d08e6dec9fde8"}, {"code": "#(reduce (fn [a b] (+ a 1)) 0 %)", "problem": 22, "user": "4dd3747d535dae65d5c462dd"}, {"code": "(fn [s] \r\n  ((fn [t n] \r\n      (cond (empty? t) n\r\n             :else (recur (rest t) (+ 1 n)))) s 0))", "problem": 22, "user": "4de26537535d08e6dec9fde9"}, {"code": "(fn [lst] (reduce (fn [r _] (+ r 1)) 0 lst))", "problem": 22, "user": "4de2f44f535d08e6dec9fdec"}, {"code": "#(loop [coll % cnt 0]\r\n  (if (empty? coll)\r\n    cnt\r\n  (recur (next coll) (+ cnt 1))))", "problem": 22, "user": "4db6ce85535d1e037afb217f"}, {"code": "(fn [c] (reduce (fn [x _] (inc x)) 0 c))", "problem": 22, "user": "4de4831d535d08e6dec9fdef"}, {"code": "(fn cnt [s]\r\n  (loop [ss s c 0]\r\n    (if (= (next ss) (last ss))\r\n      c\r\n      (recur (next ss) (inc c))\r\n    )\r\n  )\r\n)", "problem": 22, "user": "4dcd327b535d5973398f929b"}, {"code": "#(apply + (map (fn [x] 1) %))", "problem": 22, "user": "4de59cf2535d08e6dec9fdf2"}, {"code": "(fn [coll] (loop [c coll n 0] (if (seq c) (recur (rest c) (inc n)) n)))", "problem": 22, "user": "4daef21cedd6309eace4d169"}, {"code": "#(reduce (fn [sum coll] (inc sum)) 0 %)", "problem": 22, "user": "4de623ef535d08e6dec9fdf4"}, {"code": "#(loop [ll % n 0] (if (not-empty ll) (recur (rest ll) (+ n 1)) n))", "problem": 22, "user": "4de6c970535d08e6dec9fdf6"}, {"code": "(fn newcount [lat]\n  (reduce (fn [x y] (+ x 1)) 0 lat))", "problem": 22, "user": "4ddb339c535d02782fcbe9f9"}, {"code": "(fn length [list]\r\n  (if (= list '())\r\n      0\r\n      (+ 1 (length (rest list)))))", "problem": 22, "user": "4de33f4e535d08e6dec9fded"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4de760a3535d08e6dec9fdf9"}, {"code": "#(reduce (fn[x y](+ x 1)) 0  %)", "problem": 22, "user": "4de8a7d7535d08e6dec9fdfe"}, {"code": "#(reduce (fn [x _] (+ 1 x)) 0 %)", "problem": 22, "user": "4dea9406535d08e6dec9fe01"}, {"code": "(fn [x] (loop [a x b 0] (if (empty? a) b (recur (rest a) (inc b)))))", "problem": 22, "user": "4dea9fae535d08e6dec9fe02"}, {"code": "reduce #(do %2(inc %)) 0", "problem": 22, "user": "4de77a0a535d08e6dec9fdfa"}, {"code": "(fn [x]\r\n  (loop [z x c 0]\r\n    (if (first z)\r\n        (recur (next z) (+ c 1))\r\n        c\r\n    )\r\n  )\r\n)", "problem": 22, "user": "4deb6b40535d08e6dec9fe05"}, {"code": "#(loop [seq-to-count % current-count 0]\r\n  (if (empty? seq-to-count)\r\n    current-count\r\n    (recur (rest seq-to-count) (+ 1 current-count))))", "problem": 22, "user": "4dbb6302535d1e037afb21b5"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4ded56bb535d08e6dec9fe0b"}, {"code": "#(last (interleave % (iterate inc 1)))", "problem": 22, "user": "4de85c5d535d08e6dec9fdfc"}, {"code": "#(loop [r % n 0] (if (empty? r) n (recur (rest r) (+ n 1))))", "problem": 22, "user": "4dee4a9c535d08e6dec9fe11"}, {"code": "(fn cnnt [x] (if (= nil (first x)) 0 (+ 1 (cnnt (rest x)))))", "problem": 22, "user": "4ded582d535d08e6dec9fe0c"}, {"code": "(fn [l]\r\n  (loop [l (seq l) n 0]\r\n    (if (= l '()) n\r\n      (recur (rest l) (+ n 1)))))", "problem": 22, "user": "4defdf31535d08e6dec9fe14"}, {"code": "(fn cnt [s]\r\n  (loop [s s c 0]\r\n    (if (empty? s) c\r\n       (recur (rest s) (inc c)))))", "problem": 22, "user": "4deff9f9535d08e6dec9fe15"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4ded611f535d08e6dec9fe0d"}, {"code": "#(last (map (fn [_ num] num) %1 (iterate inc 1)))", "problem": 22, "user": "4def301c535d08e6dec9fe12"}, {"code": "(fn cont [coll]\r\n     (loop [c coll n 0]\r\n       (if (nil? c)\r\n         n\r\n         (recur (next c) (inc n)))))", "problem": 22, "user": "4df0f863535d08e6dec9fe19"}, {"code": "(fn [x]\r\n  (reduce + (map (fn [z] 1) x)))", "problem": 22, "user": "4df13be0535d08e6dec9fe1b"}, {"code": "reduce (fn [x _] (inc x)) 0", "problem": 22, "user": "4df0524e535d08e6dec9fe17"}, {"code": "#(reduce (fn [a b] (+ 1 a)) 0 %)", "problem": 22, "user": "4df1ce44535d08e6dec9fe1f"}, {"code": "(fn [s]\r\n    (loop [my-seq s my-count 1]\r\n        (if (next my-seq)\r\n            (recur (rest my-seq) (inc my-count))\r\n            (int my-count)\r\n        )\r\n    )\r\n)", "problem": 22, "user": "4defd021535d08e6dec9fe13"}, {"code": "(fn [seq] (reduce (fn [x,y] (+ x y)) (map (fn [x] 1) seq)))", "problem": 22, "user": "4df1e213535d08e6dec9fe20"}, {"code": "(fn [coll]\r\n          (loop [c coll acc 0]\r\n             (if (first c)\r\n                 (recur (rest c) (inc acc))\r\n                 acc)))", "problem": 22, "user": "4df168bd535d08e6dec9fe1d"}, {"code": "(fn [seq] \r\n  (loop [cnt 0, s seq]\r\n    (if (empty? s) cnt \r\n      (recur (inc cnt) (rest s)))))", "problem": 22, "user": "4df247b8535d08e6dec9fe25"}, {"code": ";#(reduce + (map (constantly 1) %1 ))\r\n(fn [x] (reduce + (map (constantly 1) x)))", "problem": 22, "user": "4de27757535d08e6dec9fdea"}, {"code": "#(reduce (fn [cnt col] (inc cnt)) 0 (seq %))", "problem": 22, "user": "4deb529a535d08e6dec9fe04"}, {"code": "#(reduce (fn [a t] (inc a)) 0 %)", "problem": 22, "user": "4df20dda535d08e6dec9fe23"}, {"code": "#(reduce (fn [tot _] (inc tot)) 0 %)", "problem": 22, "user": "4df3d4f4535d08e6dec9fe2c"}, {"code": "(fn [the-seq]\r\n  (loop [s the-seq n 0]\r\n    (if (empty? s)\r\n      n\r\n      (recur (rest s) (inc n)))))", "problem": 22, "user": "4df3df8a535d08e6dec9fe2d"}, {"code": "(fn [se]\r\n    (loop [s se n 0]\r\n\t     (if (= s ())\r\n\t\t n\r\n\t\t (recur (rest s) (inc n)))))", "problem": 22, "user": "4df407c3535d08e6dec9fe2e"}, {"code": "(fn [x]\n  ((fn helper [y s]\n    (if (empty? y) s\n(helper (rest y) (inc s)))) x 0))", "problem": 22, "user": "4df30f76535d08e6dec9fe28"}, {"code": "(fn [the-sequence]\r\n  (reduce + 0\r\n    (map (fn [element] 1) the-sequence)\r\n  )\r\n)", "problem": 22, "user": "4df54fd9535d08e6dec9fe30"}, {"code": "#(reduce (fn [x y] (+ x y)) (map (fn [x] (+ 1)) %))", "problem": 22, "user": "4df578ba535d08e6dec9fe31"}, {"code": "(fn   ([arr]\r\n                           (loop [ curArr arr current 0]\r\n                             (if(= (first curArr) nil)\r\n                              \r\n                              current\r\n                                (recur  (rest curArr) (+ current 1))\r\n                               \r\n                               ))))", "problem": 22, "user": "4de6f806535d08e6dec9fdf7"}, {"code": "#(reduce (fn [n _] (inc n)) 0 %)", "problem": 22, "user": "4df669d4535d08e6dec9fe35"}, {"code": "#(reduce (fn [r i] (+ r 1)) 0 %)", "problem": 22, "user": "4df7278a535d04ed9115e774"}, {"code": "(fn cnt [x] (if (empty? x) 0 \r\n                (+ 1 (cnt (rest x)))))", "problem": 22, "user": "4df7cb14535d04ed9115e776"}, {"code": "#(reduce (fn [x _] (inc x)) 0 %)", "problem": 22, "user": "4dfceeb9535d04ed9115e77e"}, {"code": "(fn c [xs]\r\n  (if (seq xs) (inc (c (rest xs))) 0))", "problem": 22, "user": "4dfd4ba8535d04ed9115e781"}, {"code": "(fn [lista]\r\n  \t (loop [list lista cuenta 0]\r\n\t\t\t   (if (empty? list)\r\n\t\t\t   cuenta\r\n\t\t\t   (recur (rest list) (inc cuenta)))))", "problem": 22, "user": "4dfd7ecf535d04ed9115e783"}, {"code": "(fn [coll]\r\n  ((fn [coll acc]\r\n    (if (empty? coll) acc (recur (rest coll) (inc acc)))\r\n  ) coll 0))", "problem": 22, "user": "4dfe5a93535d04ed9115e786"}, {"code": "(fn [coll]\r\n  (reduce (fn [x y] (+ 1 x)) 0 coll))", "problem": 22, "user": "4dd9514a535d2dad7130b5dc"}, {"code": "(fn [lst]\r\n  (loop [l lst n 0]\r\n    (if (empty? l)\r\n      n\r\n      (recur (rest l) (inc n)))))", "problem": 22, "user": "4dffeeb1535d04ed9115e78b"}, {"code": "(fn [data]\r\n  (reduce + \r\n    (map #(do % 1) data)))", "problem": 22, "user": "4dbde951535d020aff1edf53"}, {"code": "(fn [l]\r\n  (loop [l l n 0]\r\n    (if\r\n      (= l '()) n\r\n      (recur (rest l) (inc n)))))", "problem": 22, "user": "4e02bee8535d04ed9115e791"}, {"code": "(fn [lst]\r\n  (loop [tlst lst ctr 0]\r\n    (if (empty? tlst) ctr (recur (rest tlst)(inc ctr)))))", "problem": 22, "user": "4e0359e8535d04ed9115e792"}, {"code": "(fn my_c [elems]\r\n  (if (empty? elems)\r\n    0\r\n    (+ 1 (my_c (rest elems)))))", "problem": 22, "user": "4e03b010535d04ed9115e794"}, {"code": "reduce #(or (+ 1 %) %2) 0", "problem": 22, "user": "4e03c616535d04ed9115e796"}, {"code": "(fn mycount [coll]\r\n  (loop [sum 0 restcoll coll] \r\n    (if (empty? restcoll)\r\n      sum\r\n      (recur (inc sum) (rest restcoll)))))", "problem": 22, "user": "4dddff47535d08e6dec9fdd4"}, {"code": "(fn foo ([x] (foo x 0)) ([x n] (if (empty? x) n (foo (rest x) (+ n 1)))))", "problem": 22, "user": "4e03d6ef535d04ed9115e797"}, {"code": "(fn [x & n]\r\n   (if (empty? x)\r\n     n\r\n     (recur (rest x) (if (nil? n) 1 (inc n)))))", "problem": 22, "user": "4e059278535d04ed9115e7a5"}, {"code": "(fn cnt [s]\r\n  (if (next s)\r\n    (inc (cnt (next s)))\r\n    1))", "problem": 22, "user": "4e049a06535d04ed9115e7a0"}, {"code": "(fn [x]\r\n  ((fn [x acc]\r\n    (let [y (next x)]\r\n      (if (nil? y)\r\n        acc\r\n        (recur y (inc acc)))))\r\n   x 1))", "problem": 22, "user": "4e07af97535d04ed9115e7a8"}, {"code": "(fn [seq]\r\n  (loop [n 0 ss seq]\r\n    (if (empty? ss)\r\n        n\r\n        (recur (inc n) (rest ss)))))", "problem": 22, "user": "4dbe5975535d020aff1edf5d"}, {"code": "#(reduce (fn [x y] (+ x 1)) 0 %)", "problem": 22, "user": "4e07eac0535d04ed9115e7a9"}, {"code": "(fn my-count[x]  (.length (vec x)))", "problem": 22, "user": "4e080562535d04ed9115e7aa"}, {"code": "#(.size (vec %))", "problem": 22, "user": "4e062ea8535d04ed9115e7a7"}, {"code": "(fn [s]\r\n   (loop [s s  c 0]\r\n\t\t\t (if (seq s)\r\n\t\t\t\t  (recur (rest s) (inc c))\r\n\t\t\t\tc)))", "problem": 22, "user": "4e08fb7a535d04ed9115e7ac"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4e09125f535d04ed9115e7ad"}, {"code": "(fn cseq [sequence]\r\n  (loop [s sequence, c 0]\r\n    (if (empty? s) c\r\n        (recur (rest s) (+ 1 c)))))", "problem": 22, "user": "4dbf07dd535d020aff1edf71"}, {"code": "(fn ([coll] \r\n          (let [cnt 0]  \r\n            (loop [coll (first (list coll)) cnt (first (list cnt))]\r\n              (if (empty? coll) \r\n                cnt \r\n                (recur (butlast coll)(+ cnt 1))\r\n                )))))", "problem": 22, "user": "4de8fb73535d08e6dec9fdff"}, {"code": "#(reduce (fn [x _]  (+ x 1)) 0  %)", "problem": 22, "user": "4e0d8c27535d04ed9115e7b7"}, {"code": "reduce (fn [l r] (+ l 1)) 0", "problem": 22, "user": "4e0e0529535d04ed9115e7b9"}, {"code": "#(.length (vec %))", "problem": 22, "user": "4df15946535d08e6dec9fe1c"}, {"code": "(fn [seq]\r\n  (loop [curr-seq seq, len 0]\r\n    (if (empty? curr-seq) len\r\n        (recur (rest curr-seq) (+ len 1)))))", "problem": 22, "user": "4e0febe6535d04ed9115e7be"}, {"code": "#(apply + (map (fn [_] 1) %))", "problem": 22, "user": "4e1047ad535d04ed9115e7bf"}, {"code": "(fn [seq]\r\n  (loop [col seq, c 0]\r\n      (if (empty? col)\r\n          c\r\n          (recur (rest col) (inc c)))))", "problem": 22, "user": "4e10a8e4535d04ed9115e7c2"}, {"code": "(fn [c]\r\n  (loop [c c n 0]\r\n    (if (empty? c) n (recur (rest c) (inc n)))))", "problem": 22, "user": "4e111538535d04ed9115e7c3"}, {"code": "(fn [xs]\r\n  (loop [xs xs, n 0]\r\n    (if (empty? xs)\r\n      n\r\n      (recur (rest xs) (inc n)))))", "problem": 22, "user": "4e113a81535d04ed9115e7c5"}, {"code": "(fn [col]\r\n  (loop [c col cnt 0]\r\n    (if (empty? (rest c))\r\n      (inc cnt)\r\n      (recur (rest c) (inc cnt)))))", "problem": 22, "user": "4e117dea535d04ed9115e7c9"}, {"code": "#(apply + (map (fn [x] 1) %))", "problem": 22, "user": "4daa374930acd6ed13482a68"}, {"code": "#((fn [xs n]\r\n  (if (empty? xs)\r\n    n\r\n    (recur (rest xs) (inc n)))) % 0)", "problem": 22, "user": "4e123905535d04ed9115e7ce"}, {"code": "(fn [seq]\r\n  (loop [ss seq, len 0]\r\n    (if (empty? ss) len\r\n        (recur (rest ss) (inc len)))))", "problem": 22, "user": "4e131e61535d04ed9115e7d5"}, {"code": "#(loop  [c %1, x 0] (if (seq c) (recur (rest c) (inc x)) x))", "problem": 22, "user": "4e0cdc6f535d04ed9115e7b4"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "4e131d5b535d04ed9115e7d4"}, {"code": "reduce (fn[a _] (+ a 1)) 0", "problem": 22, "user": "4e12cc9d535d04ed9115e7d2"}, {"code": "(fn mycount [seq]\r\n  (if (empty? seq)\r\n    0\r\n    (inc (mycount (rest seq)))))", "problem": 22, "user": "4e14108c535d04ed9115e7dd"}, {"code": "(fn [x]\r\n  (loop [the-seq x i 0]\r\n    (if (empty? the-seq)\r\n      i\r\n      (recur (rest the-seq) (inc i)))))", "problem": 22, "user": "4e14090d535d04ed9115e7dc"}, {"code": "(fn my-count [coll] (if (seq coll) (loop [c coll n 1] (if (next c) (recur (rest c) (inc n)) n)) 0))", "problem": 22, "user": "4e131443535d04ed9115e7d3"}, {"code": "(fn length [coll]\r\n          (if (empty? coll) 0 (inc (length (rest coll)))))", "problem": 22, "user": "4e043d85535d04ed9115e79e"}, {"code": "(fn [lis]\r\n  (loop [l lis c 0]\r\n  (if (= l '())\r\n\t  c\r\n\t  (recur (rest l) (+ 1 c)))))", "problem": 22, "user": "4df9c598535d04ed9115e77a"}, {"code": "#(apply + (map (fn [x] 1) %))", "problem": 22, "user": "4e15c301535d04ed9115e7e5"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4e1158aa535d04ed9115e7c6"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4e14b925535d04ed9115e7df"}, {"code": "(fn cnt [s]  \r\n  (if (not (seq  s))\r\n    0\r\n    (inc (cnt (rest s)))\r\n  )\r\n)", "problem": 22, "user": "4e1582f0535d04ed9115e7e4"}, {"code": "#(apply + (map (fn [x] 1)  %))", "problem": 22, "user": "4e16bdef535d04ed9115e7e9"}, {"code": "#(loop [[x & xs] %\r\n         acc      0]\r\n    (if (nil? x)\r\n        acc\r\n        (recur xs (inc acc))))", "problem": 22, "user": "4e1772b1535d04ed9115e7ee"}, {"code": "(fn [s] (loop [counter 0 temp-seq s]\r\n          (if (seq temp-seq)\r\n            (recur (inc counter) (rest temp-seq))\r\n            counter)))", "problem": 22, "user": "4e03f4bd535d04ed9115e79a"}, {"code": "(fn [ls]\r\n  (let [ co1 (fn [ls n]\r\n                (if (empty? ls)\r\n                    n\r\n                  (recur (rest ls) (inc n))))]\r\n  (co1 ls 0)))", "problem": 22, "user": "4e1248b1535d04ed9115e7cf"}, {"code": "(fn length [l]\r\n  (if (empty? l)\r\n\t\t0\r\n\t\t(+ 1 (length (rest l)))))", "problem": 22, "user": "4dbe8f7f535d020aff1edf64"}, {"code": "(fn [col] \r\n  (reduce + \r\n    (map (fn [x & y] (/ 1 1)) col)))", "problem": 22, "user": "4e18c553535d04ed9115e7f4"}, {"code": "(fn [coll]\r\n  (loop [coll coll acc 0]\r\n    (cond\r\n      (empty? coll) acc\r\n      :else (recur (rest coll) (inc acc)))))", "problem": 22, "user": "4e18ed7a535d04ed9115e7f6"}, {"code": "(fn counter [c] (if (empty? c) 0 (+ 1 (counter (rest  c)))))", "problem": 22, "user": "4e1a312a535d04ed9115e7f9"}, {"code": "(fn mycount [lt]\r\n  (apply + (map #(if (= % %) 1 1) lt)))", "problem": 22, "user": "4e1b2cd9535d04ed9115e7fd"}, {"code": "(fn [x]\r\n  (loop [remain x this_count 0]\r\n    (cond\r\n      (empty? remain) this_count\r\n    :else (recur (rest remain) (inc this_count)))))", "problem": 22, "user": "4e13c44a535d04ed9115e7db"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "4e1e1576535d04ed9115e806"}, {"code": "(fn [x] (reduce + (map (fn [y] 1) x)))", "problem": 22, "user": "4e1e7f88535d04ed9115e808"}, {"code": "(fn [x] (if (string? x) (.length x) (.size x)))", "problem": 22, "user": "4e1203d5535d04ed9115e7cc"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4e1f9bb5535d04ed9115e80d"}, {"code": "(fn my-count\r\n  ([xs] (my-count xs 0))\r\n  ([xs total] (if (seq xs)\r\n                 (recur (rest xs) (inc total))\r\n                 total)))", "problem": 22, "user": "4e2110c7535d04ed9115e813"}, {"code": "(fn [x] (reduce + (map (fn [y] 1) x)))", "problem": 22, "user": "4e2164ff535d04ed9115e815"}, {"code": "#(loop [sq %1 n 0] (if (empty? sq) n (recur (drop 1 sq) (inc n))))", "problem": 22, "user": "4e1350af535d04ed9115e7d8"}, {"code": "(fn rakna ([sekv] (rakna sekv 1)) ([sekv langd] (if (next sekv) (recur (next sekv) (inc langd)) langd)))", "problem": 22, "user": "4e218464535d04ed9115e816"}, {"code": "(fn [x]\r\n    (loop [c 1 s (next x)]\r\n      (if-not s\r\n          c\r\n          (recur (inc c) (next s)))))", "problem": 22, "user": "4e21c139535d04ed9115e819"}, {"code": "(fn [items]\r\n  (loop [n 0\r\n         i items]\r\n         (if-not (empty? i)\r\n            (recur (inc n) (rest i))\r\n            n)))", "problem": 22, "user": "4e21c0c7535d04ed9115e818"}, {"code": "(fn [sek] (loop [n 0]\n  (cond\n    (= (first (drop n sek)) nil) n\n    :else (recur (inc n))\n)))", "problem": 22, "user": "4e218470535d04ed9115e817"}, {"code": "(fn mycount [acc foo]\r\n    (if (seq foo)\r\n      (recur (inc acc) (rest foo))\r\n    acc))\r\n0", "problem": 22, "user": "4e1b8106535d04ed9115e801"}, {"code": "#(apply + (map (constantly 1) %))", "problem": 22, "user": "4e21d76a535d04ed9115e81a"}, {"code": "#(reduce (fn [a b] (inc a)) 0 %)", "problem": 22, "user": "4e22b78b535d04ed9115e81e"}, {"code": "reduce (fn [acc _] (inc acc)) 0", "problem": 22, "user": "4de165f3535d08e6dec9fde6"}, {"code": "(fn ct [seq] (if (empty? seq) 0 (+ 1 (ct (rest seq)))))", "problem": 22, "user": "4e234588535d04ed9115e821"}, {"code": "reduce (fn [a b] (+ a 1)) 0", "problem": 22, "user": "4e1ec17a535d04ed9115e80a"}, {"code": "#(loop [mycount 0 collection %1]\r\n  (if (empty? collection) mycount\r\n    (recur (inc mycount) (rest collection))))", "problem": 22, "user": "4e232f34535d04ed9115e81f"}, {"code": "(fn [coll]\r\n  (loop [coll (seq coll) acc 0]\r\n    (if coll\r\n      (recur (next coll) (inc acc))\r\n      acc)))", "problem": 22, "user": "4dc54eb2535d8a4b2fd74284"}, {"code": "reduce (fn [n _] (inc n)) 0", "problem": 22, "user": "4e246abe535d04ed9115e827"}, {"code": "(fn counter [s]\r\n  (if (empty? s)\r\n    0\r\n    (inc (counter (rest s))) ))", "problem": 22, "user": "4e25a0da535d04ed9115e82a"}, {"code": "#(loop[x % c 0] (if (first x) (recur (rest x) (inc c)) c))", "problem": 22, "user": "4e25bd69535d04ed9115e82c"}, {"code": "(fn [coll]\n  (loop [n 1 coll coll]\n    (if (next coll)\n      (recur (+ 1 n) (rest coll))\n      n)))", "problem": 22, "user": "4e2608d6535deb9a81d77ef1"}, {"code": "(fn [ss]\n  (loop [i 0 s ss]\n    (if (nil? (seq s)) i\n      (recur (inc i) (rest s)))))", "problem": 22, "user": "4e26e8b4535deb9a81d77ef6"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4e28120f535deb9a81d77efa"}, {"code": "(fn kount [x] \n  (if \n    (empty? x) 0\n    (+ 1 (kount (rest x)))\n  )\n)", "problem": 22, "user": "4e283bae535deb9a81d77efb"}, {"code": "#(letfn [(cnt [xs n]\n  (if (= xs [])\n    n\n    (recur (rest xs) (inc n))))] (cnt % 0))", "problem": 22, "user": "4e273301535deb9a81d77ef7"}, {"code": "(fn [coll] (reduce + (map (constantly 1) coll)))", "problem": 22, "user": "4e2ab05e535deb9a81d77f01"}, {"code": "(fn [coll]\r\n  (loop [size 0, c coll]\r\n    (if c (recur (inc size) (next c) ) size )\r\n    )\r\n  )", "problem": 22, "user": "4e1f60a6535d04ed9115e80b"}, {"code": "(fn [xs]\n  (loop [cnt 0\n         ys xs]\n    (if (empty? ys)\n      cnt\n      (recur (inc cnt) (rest ys)))))", "problem": 22, "user": "4db653f6535d1e037afb217c"}, {"code": "(fn f [a] (if (empty? a)\n  0\n  (+ 1 (f (rest a)))))", "problem": 22, "user": "4e2a34c6535deb9a81d77f00"}, {"code": "(fn how-many [l] (+ 1 \n  (if (empty?   (rest l)) 0 \n      (how-many (rest l)))\n  )\n)", "problem": 22, "user": "4e234e72535d04ed9115e822"}, {"code": "(fn len [li] (if (empty? li) 0 (+ 1 (len (rest li)))))", "problem": 22, "user": "4e2d562c535deb9a81d77f07"}, {"code": "(fn hoge [lst]\n  (if (empty? lst) 0\n  (+ 1 (hoge (rest lst)))))", "problem": 22, "user": "4e2e6460535deb9a81d77f0b"}, {"code": "#(reduce  + (map (fn [x] 1) %))", "problem": 22, "user": "4e2e94bb535deb9a81d77f0c"}, {"code": "(fn [coll]\n  (loop [coll coll, c 0]\n    (if (empty? coll)\n      c\n      (recur (next coll) (inc c)))))", "problem": 22, "user": "4e2edb0e535deb9a81d77f0d"}, {"code": "(fn cnt [s]\n  (if (empty? s) 0\n      (+ 1 (cnt (rest s)))))", "problem": 22, "user": "4e2d84bf535deb9a81d77f09"}, {"code": "(fn [x] (alength (to-array x)))", "problem": 22, "user": "4e2ef93d535deb9a81d77f0f"}, {"code": "(fn f [x]\n  (if (next x)\n    (+ (f (next x)) 1)\n    1))", "problem": 22, "user": "4e2f377a535deb9a81d77f10"}, {"code": "(fn lenSeq [seq]\n  (reduce (fn [acc num] (inc acc)) 0 seq))", "problem": 22, "user": "4e2f9e71535deb9a81d77f11"}, {"code": "(fn [x] (reduce + (map (fn [y] 1) x)))", "problem": 22, "user": "4e3000c8535deb9a81d77f13"}, {"code": "#(reduce (fn [x _] (inc x)) 0 %)", "problem": 22, "user": "4ded27db535d08e6dec9fe0a"}, {"code": "#(.size (vec %))", "problem": 22, "user": "4e307313535deb9a81d77f14"}, {"code": "#(reduce (fn [x y] (inc x)) 0 %)", "problem": 22, "user": "4e31a15c535deb9a81d77f1e"}, {"code": "(fn [v] \n  (loop [l v, cnt 0] \n    (if-not (empty? l) \n      (recur (rest l) (+ cnt 1)) \n      cnt)))", "problem": 22, "user": "4e31c695535deb9a81d77f20"}, {"code": "(fn [s]\n    (loop [n 0\n           l s]\n      (if (empty? l)\n        n\n        (recur (inc n) (rest l)))))", "problem": 22, "user": "4e326f34535deb9a81d77f21"}, {"code": "#(loop [s % n 0] (if (empty? s) n (recur (rest s) (+ n 1))))", "problem": 22, "user": "4e333e38535deb9a81d77f26"}, {"code": "(partial reduce (fn [a b] (+ a 1)) 0)", "problem": 22, "user": "4e342671535deb9a81d77f29"}, {"code": "reduce (fn [m i] (+ m 1)) 0", "problem": 22, "user": "4e2b1d48535deb9a81d77f03"}, {"code": "#(loop [n 0 lst %]\n   (if lst\n       (recur (inc n) (next lst))\n        n))", "problem": 22, "user": "4e356d2b535deb9a81d77f2d"}, {"code": "(fn [s] (reduce (fn [a _] (+ a 1)) 0 s))", "problem": 22, "user": "4e358316535deb9a81d77f2f"}, {"code": "#(reduce + (map (fn [i] 1) %))", "problem": 22, "user": "4e3456f9535deb9a81d77f2a"}, {"code": "#(reduce (fn [x y] (inc x)) 0 %)", "problem": 22, "user": "4e36038f535deb9a81d77f31"}, {"code": "#(reduce (fn [acc _] (inc acc)) 0 %)", "problem": 22, "user": "4e36425c535deb9a81d77f33"}, {"code": "reduce (fn [x _] (inc x)) 0", "problem": 22, "user": "4e360757535deb9a81d77f32"}, {"code": "#(apply + (map (constantly 1) %))", "problem": 22, "user": "4e36df14535deb9a81d77f35"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4e36e647535deb9a81d77f36"}, {"code": "#(letfn [(mycount [coll n]\n            (if (empty? coll)\n             n\n             (recur (rest coll) (+ 1 n))\n            )\n          )]\n  (mycount % 0))", "problem": 22, "user": "4df11fb2535d08e6dec9fe1a"}, {"code": "(fn count-seq [x] \r\n     ((fn counter [y z] \r\n\t       (if (nil? (first z))\r\n\t\t   y\r\n\t\t   (counter (+ y 1) (rest z)))) 0 x))", "problem": 22, "user": "4e370a04535deb9a81d77f37"}, {"code": "(fn [a] (reduce +  (map (constantly 1) a) ) )", "problem": 22, "user": "4e333091535deb9a81d77f25"}, {"code": "(fn \n  ([s] ((fn \n         ([s n] (if (= s '()) n (recur (rest s) (+ n 1))))\n         ) s 0))\n  )", "problem": 22, "user": "4e30da02535deb9a81d77f17"}, {"code": "(fn cnt [x] (if (next x) (+ 1 (cnt (next x))) 1))", "problem": 22, "user": "4e351b47535deb9a81d77f2b"}, {"code": "(fn [col]\n  (loop [x col i 0]\n    (if (seq x)\n        (recur (next x) (inc i))\n        i)))", "problem": 22, "user": "4e399009535deb9a81d77f3f"}, {"code": "#(loop [c %\n        a 0]\n  (if (seq c)\n    (recur (next c) (inc a))\n    a))", "problem": 22, "user": "4e3996b0535deb9a81d77f41"}, {"code": "reduce (fn [x _] (inc x)) 0", "problem": 22, "user": "4e39d763535deb9a81d77f46"}, {"code": "(fn [s]\n  (let [f (fn [s n] (if (empty? s) n (recur (next s) (inc n))))]\n    (f s 0)))", "problem": 22, "user": "4e39fb68535deb9a81d77f47"}, {"code": "reduce (fn [x _] (+ 1 x)) 0", "problem": 22, "user": "4e3a5a67535deb9a81d77f49"}, {"code": "(fn t [x] (if (= x ()) 0 (+ (t (rest x)) 1)))", "problem": 22, "user": "4e39c710535deb9a81d77f45"}, {"code": "(fn [_list] (loop [sum 0 list _list]\n  (if (empty? list)\n    sum\n    (recur (+ sum 1) (rest list)))))", "problem": 22, "user": "4e399d94535deb9a81d77f42"}, {"code": "#(.size (seq %))", "problem": 22, "user": "4e39b020535deb9a81d77f44"}, {"code": "(fn [s] (loop [s s acc 0] (if (empty? s) acc (recur (rest s) (inc acc)))))", "problem": 22, "user": "4e3ac1b2535deb9a81d77f4c"}, {"code": "(fn [x] (reduce (fn[n1 n2] (+ n1 1)) 0 (seq x)))", "problem": 22, "user": "4e3ae7cd535deb9a81d77f4e"}, {"code": "reduce(fn[a b](+ 1 a))0", "problem": 22, "user": "4e3b6bff535deb9a81d77f52"}, {"code": "#(reduce (fn [s v] (inc s)) 0 %)", "problem": 22, "user": "4e3a9dae535deb9a81d77f4a"}, {"code": "#(loop [cnt 0 s1 %]\n  (if (empty? s1)\n    cnt\n    (recur (inc cnt) (next s1))))", "problem": 22, "user": "4e040c42535d04ed9115e79d"}, {"code": "(fn my-count [the-seq] \n  (if (= () the-seq)\n    0\n    (+ 1 (my-count (rest the-seq)))\n  )\n)", "problem": 22, "user": "4e3df106535deb9a81d77f58"}, {"code": "#(loop [i 1 rest-seq (rest %)] (if \n(empty? rest-seq) i (recur (inc i) (rest rest-seq))))", "problem": 22, "user": "4e3f480c535dc968683fc497"}, {"code": "(fn [coll] (reduce + (map (constantly 1) coll)))", "problem": 22, "user": "4e3f595d535dc968683fc498"}, {"code": "reduce (fn [x y] (inc x)) 0", "problem": 22, "user": "4e38a091535deb9a81d77f3d"}, {"code": "reduce #(do %2 (+ 1 %)) 0", "problem": 22, "user": "4e3a2761535deb9a81d77f48"}, {"code": "(fn [lat]\n  (reduce (fn [x y] (+ x 1)) 0 lat))", "problem": 22, "user": "4e40529b535dc968683fc49a"}, {"code": "#(last (map (fn [a b] (identity a)) (iterate inc 1) %1))", "problem": 22, "user": "4e410033535dc968683fc49c"}, {"code": "(fn [sequence]\n  (reduce (fn [s e] (+ 1 s)) 0 sequence))", "problem": 22, "user": "4e42f930535dc968683fc49f"}, {"code": "(fn [ls]\n  (loop [l ls\n    n 0]\n    (if (empty? l) n\n(recur (rest l) (inc n)))))", "problem": 22, "user": "4e43c91f535dc968683fc4a5"}, {"code": "(fn [x] (reduce (fn [x,y] (+ x 1)) 0 x))", "problem": 22, "user": "4e3a9e82535deb9a81d77f4b"}, {"code": "(fn mycount [seq]\n  (if (nil? seq)\n      0\n      (+ 1 (mycount (next seq)))))", "problem": 22, "user": "4e444c11535dc968683fc4a9"}, {"code": "(fn [a]\n(loop [l a\n       i 0]\n       (if (empty? l)\n         i\n        (recur (rest l) (+ 1 i))\n)))", "problem": 22, "user": "4e43b0d9535dc968683fc4a3"}, {"code": "(fn [alist] \n  (loop [x 0 mylist alist]\n    (if (= nil (first mylist))\n      x\n      (recur (+ x 1) (rest mylist)) )\n  )\n)", "problem": 22, "user": "4e45b002535dc968683fc4ae"}, {"code": "#(loop [coll % cnt 0]\n  (if (empty? coll)\n    cnt\n  (recur (next coll) (inc cnt))))", "problem": 22, "user": "4e4482b3535dc968683fc4ab"}, {"code": "#(.size (vec %))", "problem": 22, "user": "4dabb7b1950ed6eda1bd72f3"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4db51ce0535d87e67b28fe06"}, {"code": "(fn [x] (reduce + (map (fn [_] 1) x)))", "problem": 22, "user": "4e46cf17535dc968683fc4b6"}, {"code": "(fn countseq [s]\n  (loop [e s, i 0] (if (nil? (first e))\n                       i\n                       (recur (rest e) (inc i)))))", "problem": 22, "user": "4e46e4d0535dc968683fc4b8"}, {"code": "(fn mycount\n  ([coll] (mycount coll 0))\n  ([coll total]\n    (if (empty? coll)\n      total\n      (recur (next coll) (inc total)))))", "problem": 22, "user": "4e46e48b535dc968683fc4b7"}, {"code": "(fn [x]\n  (reduce (fn [acc _] (inc acc)) 0 x))", "problem": 22, "user": "4e47f4f3535dc968683fc4bb"}, {"code": "(fn  [coll]\r\n  (loop [c coll n 1]\r\n\t   (if (next c)\r\n\t       (recur (next c) (inc n))\r\n\t       n)))", "problem": 22, "user": "4e46ac46535dc968683fc4b5"}, {"code": "(fn [l] (reduce (fn [x dont-care] (inc x)) 0 l))", "problem": 22, "user": "4e139c72535d04ed9115e7da"}, {"code": "(fn [s]\n    (loop [c 0, list s]\n      (if (not (empty? list))\n        (recur (inc c) (rest list))\n        c)))", "problem": 22, "user": "4dae0e3cc9a9d6ed4c99dc57"}, {"code": "#(loop [lst % cnt 0]\n  (if (empty? lst)\n    cnt\n    (recur (rest lst) (+ cnt 1))))", "problem": 22, "user": "4e4870d1535dc968683fc4bc"}, {"code": "(fn mycount\n  ([coll]\n    (mycount coll 0))\n  ([coll c]\n    (if (empty? coll)\n        c\n        (recur (rest coll) (+ 1 c)))))", "problem": 22, "user": "4e48ded5535dc968683fc4bf"}, {"code": "(fn [x] (loop [y x, i 0]\n  (cond (= y ()) i \n    :else (recur (rest y) (inc i))\n  )\n  )\n)", "problem": 22, "user": "4e49a7bb535dc968683fc4c6"}, {"code": "#(-> (map-indexed list %) last first inc)", "problem": 22, "user": "4e49badd535dc968683fc4c9"}, {"code": "(fn hm \n  ([x] (hm x 1))\n  ([x cunt]\n    (if (next x)\n      (hm (rest x) (inc cunt))\n      cunt)))", "problem": 22, "user": "4dfd018c535d04ed9115e77f"}, {"code": "(fn cnt [lst] (if (empty? lst) 0 (inc (cnt (rest lst)))))", "problem": 22, "user": "4e49fc29535dc968683fc4cb"}, {"code": "(fn [coll]\n  (\n\t\t(fn [coll x]\n\t\t\t(if(empty? coll)\n\t\t\t\tx\n\t\t\t\t(recur (rest coll) (+ x 1))\n\t\t\t)\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t)\n\tcoll 0\n\t)\n)", "problem": 22, "user": "4e40d306535dc968683fc49b"}, {"code": "(comp (partial reduce +) (partial map (fn [x] 1)))", "problem": 22, "user": "4e4a94a9535dc968683fc4cd"}, {"code": "(fn [aseq]\n    (loop [how-many 0, bseq aseq]\n      (if (seq bseq)\n        (recur (inc how-many) (rest bseq))\n        how-many)))", "problem": 22, "user": "4e463703535dc968683fc4b2"}, {"code": "(fn count-items [l]\n  (if (empty? l)\n      0\n      (+ 1 (count-items (rest l)))))", "problem": 22, "user": "4e4b4564535dc968683fc4d3"}, {"code": "(fn [seq & nlst]\n  (let [n (or (and (not (empty? nlst)) (first nlst))\n              0)]\n    (if (empty? seq)\n      n\n      (recur (rest seq) (list (inc n))))))", "problem": 22, "user": "4e4ae5aa535dc968683fc4d2"}, {"code": "(fn [coll] (loop [i 0 s coll] (if (not (seq s)) i (recur (inc i) (rest s)))))", "problem": 22, "user": "4e4be570535dc968683fc4d8"}, {"code": "reduce (fn [v e] (+ v 1)) 0", "problem": 22, "user": "4e4ad154535dc968683fc4d1"}, {"code": "#(reduce (fn [x _] (inc x)) 0 %)", "problem": 22, "user": "4ddbf54e535d02782fcbe9ff"}, {"code": "(fn [list] \n  (loop [n 0, l list]\n    (if (= l ()) n\n        (recur (inc n) (rest l)))))", "problem": 22, "user": "4e4c1e8c535dc968683fc4db"}, {"code": "(fn [xs]\n  (loop [xs xs acc 0]\n    (if (empty? xs) \n        acc\n        (recur (rest xs) (inc acc)))))", "problem": 22, "user": "4e4c238f535dc968683fc4dc"}, {"code": "reduce #(do %2 (+ 1 %)) 0", "problem": 22, "user": "4e498df9535dc968683fc4c4"}, {"code": "(fn [coll]\n  (loop [sum 0\n         curcoll (reverse coll)]\n    (if (empty? curcoll) sum\n      (recur (inc sum) (rest curcoll)))))", "problem": 22, "user": "4e4bf20e535dc968683fc4d9"}, {"code": "reduce (fn [x y] (inc x)) 0", "problem": 22, "user": "4e4bd94b535dc968683fc4d7"}, {"code": "#(loop [s 1 v %]\n  (if (empty? (rest (vec v))) s (recur (+ 1 s) (rest (vec v)))))", "problem": 22, "user": "4e1fe800535d04ed9115e811"}, {"code": "#(reduce + (map (fn [x] (if x 1)) %))", "problem": 22, "user": "4e4b8b67535dc968683fc4d5"}, {"code": "(fn [coll]\n  (loop [coll* coll, i 0]\n    (if (empty? coll*)\n      i\n      (recur (rest coll*) (inc i)))))", "problem": 22, "user": "4e4d1304535dc968683fc4e1"}, {"code": "(fn [x] ((fn [a b] (if (empty? a) b (recur (rest a) (inc b)))) x 0))", "problem": 22, "user": "4e4b911f535dc968683fc4d6"}, {"code": "(fn c [l] (if (empty? l)\n           0\n           (+ 1 (c (rest l)))))", "problem": 22, "user": "4e4d5d04535dc968683fc4e3"}, {"code": "(fn foo [x] (if (= '() (rest x)) 1 (+ 1 (foo (rest x)))))", "problem": 22, "user": "4e4c64a1535dc968683fc4dd"}, {"code": "(fn cnt [x] (if (empty? x) 0 (+ (cnt (rest x)) 1)))", "problem": 22, "user": "4e4ca885535dc968683fc4df"}, {"code": "(fn mycount [coll]\n  (loop [my-coll (seq coll)\n         my-count 0]\n    (if (first my-coll)\n      (recur (next my-coll) (inc my-count))\n      my-count)))", "problem": 22, "user": "4e4e5b91535dc968683fc4e5"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "4e4ea0f6535dc968683fc4e6"}, {"code": "(fn [es] (loop [xs es c 0] \n  (if (empty? xs) \n    c \n    (recur (rest xs) (inc c)))))", "problem": 22, "user": "4e4fbd0c535dc968683fc4e9"}, {"code": "(fn [coll] (reduce + (let [z 0] (map (fn [x] (inc z)) coll))))", "problem": 22, "user": "4e503aea535dc968683fc4ea"}, {"code": "(fn len [lst]\n  (if (nil? (first lst))\n    0\n    (+ (len (rest lst))\n       1)))", "problem": 22, "user": "4e505bec535dc968683fc4eb"}, {"code": "(fn [s] (loop [c 0 s s] (if (empty? s) c (recur (inc c) (rest s)))))", "problem": 22, "user": "4e50b67b535dc968683fc4ed"}, {"code": "(fn [cols]  (apply + (map (fn [_] 1) cols)))", "problem": 22, "user": "4e50e2a0535dc968683fc4ef"}, {"code": "(fn [lst]\n  (loop [n 0 l lst]\n\t\t(if (empty? l)\n\t\t\tn\n\t\t\t(recur (inc n) (rest l)))))", "problem": 22, "user": "4e510260535dc968683fc4f2"}, {"code": "(fn [seq]\n  (loop [myseq seq\n         x 0]\n    (if (empty?  myseq)\n    x\n    (recur (rest myseq) (inc x)))))", "problem": 22, "user": "4e4eecf6535dc968683fc4e8"}, {"code": "(fn [x] ((fn count-elements [objs offset]\n  (if (nil? offset) (count-elements objs 0)\n    (if (empty? objs) offset (count-elements (rest objs) (+ 1 offset))))) x 0))", "problem": 22, "user": "4e50fb2c535dc968683fc4f1"}, {"code": "#(reduce (fn [s _] (inc s)) 0 %)", "problem": 22, "user": "4e513758535dc968683fc4f3"}, {"code": "(fn [xs] \n  (loop [xs xs acc 0]\n    (if (empty? xs)\n        acc\n        (recur (rest xs) (inc acc)))))", "problem": 22, "user": "4e51c67a535d302ef430da6a"}, {"code": "(fn [coll] (apply + (map (fn [_] 1) coll)))", "problem": 22, "user": "4e513ecf535dc968683fc4f6"}, {"code": "(fn [l] (loop [ls l n 0] (if (= ls '()) n (recur (rest ls) (+ n 1) ) ) ) )", "problem": 22, "user": "4e5206ec535d302ef430da6c"}, {"code": "(fn [x] (reduce #(+ %1 %2) (map (fn [_] 1) x)))", "problem": 22, "user": "4e521d7a535d302ef430da6e"}, {"code": "#(.size (seq %))", "problem": 22, "user": "4e5229dc535d302ef430da6f"}, {"code": "(fn mycount [seq] (if (empty? seq) 0\n  (+ 1 (mycount (rest seq)))))", "problem": 22, "user": "4e525840535d302ef430da72"}, {"code": "(fn [xs] (reduce (fn [y _] (inc y)) 0 xs))", "problem": 22, "user": "4e52654b535d302ef430da73"}, {"code": "(fn [sqcevar]\n  (loop [sqce sqcevar n 0]\n    (if (empty? sqce)\n      n\n      (recur (rest sqce) (inc n)))))", "problem": 22, "user": "4e52777f535d302ef430da76"}, {"code": "(fn [coll] (reduce + (map (fn [_] 1) coll)))", "problem": 22, "user": "4e526f4c535d302ef430da75"}, {"code": "reduce (fn [c _] (+ c 1)) 0", "problem": 22, "user": "4e52d815535d302ef430da77"}, {"code": "(fn myCount [list] (if (empty? list)\n                  0\n                  (inc (myCount (rest list)))))", "problem": 22, "user": "4e3bcca9535deb9a81d77f54"}, {"code": "(fn [c] (last (map-indexed (fn [x y] (inc x)) c)))", "problem": 22, "user": "4e525705535d302ef430da71"}, {"code": "#(last (interleave % (iterate inc 1)))", "problem": 22, "user": "4e53b3a4535d8a8b8723a273"}, {"code": "(fn [coll] (reduce + (map (fn [x] 1) coll)))", "problem": 22, "user": "4e5352b9535d8a8b8723a271"}, {"code": "(fn [s]\n  ((fn [s c]\n    (if (first s) (recur (next s) (inc c))\n        c)) s 0))", "problem": 22, "user": "4e50c894535dc968683fc4ee"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "4e5411e8535d8a8b8723a279"}, {"code": "reduce (fn [x y] (+ 1 x)) 0", "problem": 22, "user": "4e399685535deb9a81d77f40"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4daf907aedd6309eace4d17b"}, {"code": "(fn [coll] (reduce + (map (fn[x] 1) coll)))", "problem": 22, "user": "4e53bf5e535d8a8b8723a275"}, {"code": "(fn counter\n    ([n]\n        (counter n 0))\n    ([n acc]\n        (if  (empty? n)   acc\n             (recur (rest n) (+ acc 1)))))", "problem": 22, "user": "4e51fccf535d302ef430da6b"}, {"code": "(fn func\n  ([c] (func c 1))\n  ([c n]\n    (if (next c)\n    (func (rest c) (+ n 1))\n    n\n  )\n  )\n)", "problem": 22, "user": "4e53ea3f535d8a8b8723a277"}, {"code": "#(reduce (fn [acc _] (inc acc)) 0 %)", "problem": 22, "user": "4e521cef535d302ef430da6d"}, {"code": "#(reduce\n  (fn [n r] (inc n))\n  0 %)", "problem": 22, "user": "4e5676b2535d8a8b8723a282"}, {"code": "(fn [x]\n  (reduce + (map (fn [y] 1) x)))", "problem": 22, "user": "4e56cff0535d8a8b8723a285"}, {"code": "(fn cn [xs] \n  (loop [acc 0, xs xs]\n    (if (empty? xs)\n        acc\n        (recur (+ 1 acc) (rest xs)))))", "problem": 22, "user": "4e54aa01535d8a8b8723a27c"}, {"code": "#(loop [l %,c 0]\n    (if (empty? l) c\n      (recur (rest l) (+ 1 c))))", "problem": 22, "user": "4e57afc5535d8a8b8723a288"}, {"code": "(fn [x] (loop [x x a 0] (if (empty? x) a (recur (rest x) (+ a 1)))))", "problem": 22, "user": "4e584cf2535d8a8b8723a28f"}, {"code": "(fn [s]\n  (loop [remaining s, c 0]\n    (if (empty? remaining)\n        c\n        (recur (rest remaining) (inc c)))))", "problem": 22, "user": "4e584256535d8a8b8723a28e"}, {"code": "(fn [seq] (reduce + (vals (frequencies seq))))", "problem": 22, "user": "4e5867d1535d8a8b8723a291"}, {"code": "(fn[a-seq]\n  (loop [c 0 ss a-seq]\n    (if (empty? ss)\n      c\n      (recur (inc c) (rest ss)))))", "problem": 22, "user": "4e58bcd4535d8a8b8723a296"}, {"code": "reduce (fn [a b] (+ a 1)) 0", "problem": 22, "user": "4e58dd23535d8a8b8723a298"}, {"code": "(fn [s] (reduce (fn [a b] (+ a 1)) 0 s))", "problem": 22, "user": "4e58ef07535d8a8b8723a299"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4e588e84535d8a8b8723a294"}, {"code": "(partial reduce (fn [x y] (inc x)) 0)", "problem": 22, "user": "4e5914e0535d8a8b8723a29b"}, {"code": "#(loop [xs %1 cnt 0]\n   (if xs\n     (recur (next xs) (inc cnt))\n     cnt))", "problem": 22, "user": "4e593dac535d8a8b8723a29c"}, {"code": "(fn [s]\n  (loop [s s n 0]\n    (if (empty? s)\n      n\n      (recur (rest s) (inc n)))))", "problem": 22, "user": "4e360072535deb9a81d77f30"}, {"code": "#(reduce (fn[c x] (inc c)) 0 %)", "problem": 22, "user": "4e599577535d8a8b8723a29f"}, {"code": "(fn cnt\n   ([ls]\n      (if (empty? ls)\n  0\n\t(cnt ls 1)))\n       ([ls acc]\n\t    (if (empty? (rest ls))\n\t\tacc\n\t\t(recur (rest ls) (inc acc)))))", "problem": 22, "user": "4e5a2403535d8a8b8723a2a7"}, {"code": "(fn [l]\n  (loop [n 0\n         l l]\n    (if (empty? l)\n      n\n      (recur (inc n) (rest l)))))", "problem": 22, "user": "4e5a35fc535d8a8b8723a2a8"}, {"code": "reduce #(do %2 (+ 1 %)) 0", "problem": 22, "user": "4e597b2c535d8a8b8723a29d"}, {"code": "(fn [a]\n  (loop [b a l 0]\n    (if (seq b) (recur (rest b) (+ l 1))\n        l)))", "problem": 22, "user": "4e5a66d3535d8a8b8723a2ad"}, {"code": "#(reduce + (map (fn[x] 1) %))", "problem": 22, "user": "4e570f47535d8a8b8723a287"}, {"code": "#(reduce + (map second (frequencies %)))", "problem": 22, "user": "4e589bdc535d8a8b8723a295"}, {"code": "(fn my-count [x]\n  (if (empty? x) 0 (+ 1 (my-count (rest x)))))", "problem": 22, "user": "4e580746535d8a8b8723a28c"}, {"code": "(fn c [l] (if (nil? (seq l)) 0 (+ 1 (c (rest l)))))", "problem": 22, "user": "4e5af6d7535d8a8b8723a2b2"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "4e44510b535dc968683fc4aa"}, {"code": "(fn [coll] (reduce + (map (constantly 1) coll)))", "problem": 22, "user": "4e5b192e535d8a8b8723a2b3"}, {"code": "(fn [coll]\n    (loop [i 0 coll coll]\n      (if (seq coll)\n        (recur (inc i) (rest coll))\n        i)))", "problem": 22, "user": "4e5be681535d8a8b8723a2bc"}, {"code": "(fn count-sequence [x]\r\n  (loop [theseq x\r\n        seqcount 0]\r\n    (if (empty? theseq)\r\n      seqcount\r\n      (recur (rest theseq) (inc seqcount)))))", "problem": 22, "user": "4e5ac5a4535d8a8b8723a2b0"}, {"code": "(fn [coll]\n  (loop [coll coll\n         acc 0]\n        (if (seq coll)\n          (recur (rest coll) (inc acc))\n          acc)))", "problem": 22, "user": "4e5bff2b535d8a8b8723a2bd"}, {"code": "(fn [elems] (loop [c 0 l elems] (if (empty? l) c (recur (inc c) (rest l))))\n)", "problem": 22, "user": "4e5c3612535d8a8b8723a2be"}, {"code": "#(apply + (map (fn[_]1) %))", "problem": 22, "user": "4dad8fe9c9a9d6ed1899dc57"}, {"code": "(fn a ([xs] (a xs 0))\n  ([xs acc] (if (seq xs) (a (rest xs) (inc acc)) acc)))", "problem": 22, "user": "4e5c4cc6535d8a8b8723a2bf"}, {"code": "#(loop [r % c 0]\n  (if (empty? r)\n     c\n     (recur (rest r) (inc c))))", "problem": 22, "user": "4e5a3891535d8a8b8723a2aa"}, {"code": "(fn [l] ( loop [r l n 0] (if (empty? r) n (recur (rest r) (inc n)))))", "problem": 22, "user": "4e5c801e535d8a8b8723a2c1"}, {"code": "(fn [s]\n  (loop [s (seq s) n 0]\n    (if (nil? s)\n       n\n       (recur (next s) (inc n)))))", "problem": 22, "user": "4e5c845e535d8a8b8723a2c2"}, {"code": "(fn [xs]\n  (reduce (fn [a b]\n            (inc a)) 0 xs))", "problem": 22, "user": "4dada6d4c9a9d6ed2c99dc57"}, {"code": "#(reduce (fn [x y] (inc x)) 0 %)", "problem": 22, "user": "4dad938fc9a9d6ed1b99dc57"}, {"code": "#(inc ( last(map-indexed (fn [in id] in) %)))", "problem": 22, "user": "4e5cddd6535d8a8b8723a2c5"}, {"code": "(fn [n] (reduce + (map #(if % 1 0) n)))", "problem": 22, "user": "4e5d2dc5535d8a8b8723a2ca"}, {"code": "(fn [xs]\n  (loop [xs xs n 0]\n    (if (empty? xs)\n        n\n        (recur (rest xs) (inc n)))))", "problem": 22, "user": "4e5d0e96535d8a8b8723a2c8"}, {"code": "(partial \n  (fn [acc s]\n    (if (nil? s)\n      acc\n      (recur (inc acc) (next s)))) 0)", "problem": 22, "user": "4e55ea0c535d8a8b8723a281"}, {"code": "(fn [coll]\n  (loop [coll coll c 0]\n    (if (seq coll)\n      (recur (rest coll) (inc c))\n      c)))", "problem": 22, "user": "4e3bccb1535deb9a81d77f55"}, {"code": "(fn [x] (loop [s x c 0] (if (= '() (drop 1 s)) (+ 1 c) (recur (drop 1 s) (+ c 1)))))", "problem": 22, "user": "4e5e9f6b535d8a8b8723a2d2"}, {"code": "#(reduce (fn [a _] (+ 1 a)) 0 %)", "problem": 22, "user": "4e5f08c7535d8a8b8723a2da"}, {"code": "(fn [coll]\n  \"Write a function which returns the total number of elements in a sequence.\"\n  (loop [coll coll\n         acc 0]\n    (if (empty? coll)\n      acc\n      (recur (rest coll) (inc acc)))))", "problem": 22, "user": "4e5eb843535d8a8b8723a2d4"}, {"code": "#(loop [n 0 res %]                                                                                                                                          \n    (if (empty? res)                                                                                                                                          \n      n                                                                                                                                                       \n      (recur (inc n) (rest res))))", "problem": 22, "user": "4e3bcccd535deb9a81d77f56"}, {"code": "(fn [ls] (loop [i 0 l ls]\n  (if (empty? l)\n    i\n    (recur (inc i) (rest l)))))", "problem": 22, "user": "4e5f034b535d8a8b8723a2d9"}, {"code": "(fn [s]\n  (loop [total 0 sequence s]\n    (if-not (first sequence)      \n      (int total)           \n      (recur (inc total) (rest sequence))\n    )\n  )\n)", "problem": 22, "user": "4e570b60535d8a8b8723a286"}, {"code": "(fn [list] (cond (= list '(1 2 3 3 1)) 5\n                 (= list \"Hello World\") 11\n                 (= list [[1 2][3 4][5 6]]) 3\n                 (= list '(13)) 1\n                 (= list '(:a :b :c)) 3))", "problem": 22, "user": "4e0dee88535d04ed9115e7b8"}, {"code": "#(loop [seq %1 n 0]\n  (if (empty? seq)\n    n\n    (recur (rest seq) (inc n))))", "problem": 22, "user": "4e5fe31a535d8ccf87e9fe50"}, {"code": "(fn [li]\n  (loop [l li c 0]\n    (if (= () l)\n      c\n      (recur (rest l) (inc c)))))", "problem": 22, "user": "4e5ea1a9535d8a8b8723a2d3"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4e4aaf49535dc968683fc4ce"}, {"code": "#(reduce (fn [x _] (inc x)) 0 %)", "problem": 22, "user": "4e5ecd65535d8a8b8723a2d6"}, {"code": "(fn [a] (reduce (fn [i j] (inc i)) 0 a))", "problem": 22, "user": "4e602826535d8ccf87e9fe52"}, {"code": "(fn [seq]\n  (reduce (fn [x _] (inc x)) 0 seq))", "problem": 22, "user": "4e606b93535d8ccf87e9fe53"}, {"code": "(fn [seq] \n  ((fn iter [i]\n    (if (empty? (drop i seq))\n                i \n          (iter (inc i)))) 0))", "problem": 22, "user": "4e223bd6535d04ed9115e81c"}, {"code": "(fn cnt [coll]\n  (cond   (empty? coll) 0\n\t\t\ttrue (inc (cnt (rest coll)))))", "problem": 22, "user": "4e5fda32535d8ccf87e9fe4e"}, {"code": "(fn [s]\n  (loop [result 0 coll s]\n    (if (empty? coll)\n      result\n      (recur (+ 1 result) (rest coll)))))", "problem": 22, "user": "4e5f5e14535d8ccf87e9fe47"}, {"code": "#(reduce + 0 (map (fn [a] 1) %))", "problem": 22, "user": "4e615cd2535d8ccf87e9fe58"}, {"code": "#(reduce + (map (fn [x] 1) %) )", "problem": 22, "user": "4e61bb60535d8ccf87e9fe5c"}, {"code": "(fn my-count [list] (if (= list ()) 0 (+ 1 (my-count (rest list)))))", "problem": 22, "user": "4e62294c535d8ccf87e9fe5f"}, {"code": "(fn temp\n  ([x] (temp x 0))\n  ([x y] (if (first x) \n              \n                (recur (rest x) (inc y))\n              \n              y\n  ))\n)", "problem": 22, "user": "4e44358f535dc968683fc4a8"}, {"code": "#(if seq (loop [seq % n 1]\n  (if-let [rest (next seq)]\n    (recur rest (+ n 1))\n    n \n)) 0)", "problem": 22, "user": "4e634eb9535d8ccf87e9fe63"}, {"code": "(fn [x] (reduce + (map (fn [x] 1) x)))", "problem": 22, "user": "4e63957b535d8ccf87e9fe65"}, {"code": "(fn cnt [x]\n  (if (= x ()) 0 (+ 1 (cnt (rest x)))))", "problem": 22, "user": "4e644410535d8ccf87e9fe6a"}, {"code": "#(loop \n  [result 0 coll %] \n  (if (empty? coll) \n    result \n    (recur (inc result) (rest coll))))", "problem": 22, "user": "4e6472b7535d8ccf87e9fe6c"}, {"code": "#(loop [r 0 c (into [] %)]\n    (if (nil? (first c)) r\n      (recur (inc r) (pop c)))\n    )", "problem": 22, "user": "4e1fe7f1535d04ed9115e810"}, {"code": "(fn size [seq] \n  (if (empty? seq) 0\n    (inc (size(rest seq)))))", "problem": 22, "user": "4e653558535d8ccf87e9fe6f"}, {"code": "(fn countNew [s] \n  (if (= () s)\n    0\n    (+ 1 (countNew (rest s)))\n  )\n)", "problem": 22, "user": "4e6537f1535d8ccf87e9fe70"}, {"code": "(fn [a]\n  ((fn [s t]\n    (if (empty? s)\n      t\n      (recur (rest s) (inc t)))) a 0))", "problem": 22, "user": "4e5c538c535d8a8b8723a2c0"}, {"code": "#(reduce (fn [n e] (+ n 1)) 0 (vec %))", "problem": 22, "user": "4e65f9d4535d8ccf87e9fe73"}, {"code": "(partial #(if (empty? %2) %1 (recur (+ 1 %1) (rest %2))) 0)", "problem": 22, "user": "4e6093c9535d8ccf87e9fe54"}, {"code": "(fn [xs]\n  (reduce + (map (fn [_] 1) xs)))", "problem": 22, "user": "4e667f67535d8ccf87e9fe77"}, {"code": "(fn [sequence]\n  (loop [i 0\n         acc sequence]\n    (if (empty? acc)\n      i\n    (recur (+ i 1) (rest acc)))))", "problem": 22, "user": "4e657c05535d8ccf87e9fe72"}, {"code": "#(loop [l1 %\r\n       x  0]\r\n  (if (empty? l1)\r\n    x\r\n    (recur (rest l1) (+ x 1) )))", "problem": 22, "user": "4e5bdc2b535d8a8b8723a2bb"}, {"code": "#(reduce (fn [a x] (+ a 1)) 0 (seq %))", "problem": 22, "user": "4e67b0aa535d8ccf87e9fe80"}, {"code": "(fn lolength [initial-seq]\n  (loop [seq initial-seq x 0]\n    (if (= seq ())\n      x\n      (recur (rest seq) (inc x)))))", "problem": 22, "user": "4e55958a535d8a8b8723a27e"}, {"code": "#(.length (vec %))", "problem": 22, "user": "4e68323a535d8ccf87e9fe86"}, {"code": "reduce (fn [x _] (inc x)) 0", "problem": 22, "user": "4e68b46c535d8ccf87e9fe87"}, {"code": "#(loop [n 0 c %] (if c (recur (inc n) (next c)) n))", "problem": 22, "user": "4e68be01535d8ccf87e9fe88"}, {"code": "(fn f [lst]\n  (if (empty? lst)\n      0\n      (+ 1 (f (rest lst)))))", "problem": 22, "user": "4e68dbd5535d8ccf87e9fe8f"}, {"code": "(fn [coll]\n  (loop [coll coll n 0]\n    (if-let [s (seq coll)]\n      (recur (rest s) (inc n))\n      n)))", "problem": 22, "user": "4e68c434535d8ccf87e9fe89"}, {"code": "(fn [s]\n  (loop [n 0 items s]\n    (if (empty? items)\n      n\n      (recur (inc n) (rest items)))))", "problem": 22, "user": "4e68fad4535d8ccf87e9fe93"}, {"code": "(fn my-count [lst]\r\n        (if (= lst nil)\r\n            0\r\n            (letfn [(rec [lst n]\r\n                         (if (= (first (rest lst)) nil)\r\n                             n\r\n                             (rec (rest lst) (+ n 1))))]\r\n                             (rec lst 1))))", "problem": 22, "user": "4e68fe94535d8ccf87e9fe94"}, {"code": "#(loop [c (vec %) i 0]\r\n       (if (empty? c) i (recur (pop c) (inc i))))", "problem": 22, "user": "4e028764535d04ed9115e790"}, {"code": "(fn [x]\n    (loop [xx x len 0]\n        (if (nil? xx)\n            len\n            (recur (next xx) (+ 1 len)))))", "problem": 22, "user": "4e699b20535d8ccf87e9fe9d"}, {"code": "(fn [in]\n  (reduce (fn [c _] (inc c)) 0  in))", "problem": 22, "user": "4e6a0667535d8ccf87e9fe9e"}, {"code": "#(reduce (fn [a b] (+ a 1)) 0 %)", "problem": 22, "user": "4e6a2ee0535d8ccf87e9fea8"}, {"code": "(fn [xs]\n  (reduce (fn [acc coll] (inc acc)) 0 xs))", "problem": 22, "user": "4e6a2e83535d8ccf87e9fea7"}, {"code": "#(let [helper (fn [seq acc]\n                (if (empty? seq)\n                  acc\n                  (recur (rest seq) (+ 1 acc))))]\n  (helper % 0))", "problem": 22, "user": "4e6a2f93535d8ccf87e9feaa"}, {"code": "#(loop [lst % i 0] (if (empty? lst) i (recur (rest lst) (inc i))))", "problem": 22, "user": "4e6a3930535d8ccf87e9feb0"}, {"code": "reduce #(do %2 (inc %)) 0", "problem": 22, "user": "4e6a412e535d8ccf87e9feb6"}, {"code": "reduce (fn[n e] (inc n)) 0", "problem": 22, "user": "4e6a4038535d8ccf87e9feb5"}, {"code": "(fn [seq]\n  (reduce + (map (constantly 1) seq)))", "problem": 22, "user": "4e6a3985535d8ccf87e9feb1"}, {"code": "(fn my-count [xs]\n  ((fn impl [xs n]\n    (if (empty? xs)\n      n\n      (impl (rest xs) (+ n 1))))\n    xs 0))", "problem": 22, "user": "4e691c79535d8ccf87e9fe97"}, {"code": "#((fn [els] (reduce + (map (fn [n] 1) els))) %)", "problem": 22, "user": "4e6a4541535d8ccf87e9feb8"}, {"code": "(fn count-seq [s]\n    (loop [c 0 s0 s]\n      (if (empty? s0)\n        c\n        (recur (inc c) (rest s0)))))", "problem": 22, "user": "4e6a2503535d8ccf87e9fea2"}, {"code": "#(reduce (fn [a b] (inc a)) 0 %)", "problem": 22, "user": "4e6a48d5535d8ccf87e9febd"}, {"code": "#(apply + (map (fn [x] 1) %))", "problem": 22, "user": "4e6a521c535d8ccf87e9fec8"}, {"code": "(fn f [s]\n  (if (first s) (inc (f (rest s))) 0))", "problem": 22, "user": "4e6a5168535d8ccf87e9fec6"}, {"code": "(fn L [x] (if (next x) (+ 1 (L (rest x))) 1))", "problem": 22, "user": "4e6a33fc535d8ccf87e9feac"}, {"code": "(fn [l] \n  (loop [r 0 t l] \n    (if (empty? t) \n         r\n         (recur (inc r) (rest t)))))", "problem": 22, "user": "4e6a2f51535d8ccf87e9fea9"}, {"code": "#(reduce (fn [x,y] (+ x 1)) 0 %)", "problem": 22, "user": "4e6a2855535d8ccf87e9fea3"}, {"code": "(fn [thing]\n  (loop[stuff thing\n       i 0]\n       (if (empty? stuff)\n          i\n          (recur (rest stuff) (inc i)))))", "problem": 22, "user": "4e6a60cd535d8ccf87e9fed7"}, {"code": "#(reduce (fn [a b] (inc a)) 0 %)", "problem": 22, "user": "4e6a5f5c535d8ccf87e9fed6"}, {"code": "#(apply + (map (fn [_] 1) %1))", "problem": 22, "user": "4e6a5158535d8ccf87e9fec5"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "4e6a5a32535d8ccf87e9fed0"}, {"code": "(fn len [coll] (if (empty? coll) 0 (+ 1 (len (rest coll)))))", "problem": 22, "user": "4e6a79ca535d8ccf87e9feeb"}, {"code": "#(reduce (fn [m v] (inc m)) 0 %)", "problem": 22, "user": "4e6a4954535d8ccf87e9fec0"}, {"code": "reduce (fn [x y] (+ x 1)) 0", "problem": 22, "user": "4e6a947f535d8ccf87e9fef7"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "4e6a6d12535d8ccf87e9fee2"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4e50ee51535dc968683fc4f0"}, {"code": "(fn [xs] \n  ((fn [xs n] \n    (if (not (seq xs)) n (recur (next xs) (inc n)))) xs 0))", "problem": 22, "user": "4e6a97a9535d8ccf87e9fef8"}, {"code": "reduce (fn [x _] (+ 1 x)) 0", "problem": 22, "user": "4e6ab9cb535d8ccf87e9fefe"}, {"code": "(fn mycount [x] (if (= '() (rest x)) 1 (+ 1 (mycount (rest x)))))", "problem": 22, "user": "4e6a47b2535d8ccf87e9febb"}, {"code": "#(apply + (map (fn [x] 1) %))", "problem": 22, "user": "4e6ad36f535d8ccf87e9ff07"}, {"code": "(fn a [x] (if (= x '()) 0 (+ 1 (a (rest x)))))", "problem": 22, "user": "4e6b04ae535d8ccf87e9ff09"}, {"code": "reduce (fn [x y] (inc x)) 0", "problem": 22, "user": "4e6a7fa0535d8ccf87e9feed"}, {"code": "reduce (fn [c e] (inc c)) 0", "problem": 22, "user": "4e6a6be7535d8ccf87e9fee1"}, {"code": "reduce #(do %2 (inc %)) 0", "problem": 22, "user": "4e6b3fc8535d8ccf87e9ff0f"}, {"code": "(fn [s] (apply + (map (fn [x] 1) s)))", "problem": 22, "user": "4e6a6af5535d8ccf87e9fedf"}, {"code": "(fn [& args]\n    (let [x (first args) cnt- (first (rest args)) cnt (or cnt- 0)]\n      (if (seq x) (recur [(rest x) (+ 1 cnt)]) cnt)\n    ))", "problem": 22, "user": "4e6a4edd535d8ccf87e9fec4"}, {"code": "(fn [x]\n  ((fn [x,c]\n    (if (empty? x)\n      c\n      (recur (rest x) (+ 1 c)))) x 0))", "problem": 22, "user": "4e6a559e535d8ccf87e9fecd"}, {"code": "(fn [seq]\n  (let [idxes (iterate (partial + 1) 1)]\n    (last (map (fn [e idx] idx) seq idxes))))", "problem": 22, "user": "4e6a4ab9535d8ccf87e9fec2"}, {"code": "(fn [c] (loop [x c n 0]\n  (if (nil? x) n\n(recur (next x) (inc n)))))", "problem": 22, "user": "4e6cf61a535de274dd8d818c"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4e6b840c535d8ccf87e9ff18"}, {"code": "(fn countList [x] (if (= (next x) nil)\n                   1\n                   (+ (countList (rest x)) 1)))", "problem": 22, "user": "4e6cf521535de274dd8d818b"}, {"code": "(fn [c]\n  (letfn [(h [c i] \n    (if (empty? c)\n      i\n      (recur (rest c) (inc i))))]\n      (h c 0)))", "problem": 22, "user": "4db2eac3535df7e46ed9b6c8"}, {"code": "reduce (fn [a b] (inc a)) 0", "problem": 22, "user": "4e6b91e4535d8ccf87e9ff1a"}, {"code": "(fn [seq]\n  (loop [sq seq\n        acc 0]\n    (if (= (rest sq) '())\n      (+ 1 acc)\n      (recur (rest sq)  (+ 1 acc)    )\n)\n  ))", "problem": 22, "user": "4e6daa22535d5021c1a895ef"}, {"code": "(fn [a-seq] (reduce (fn [i _] (inc i)) 0 a-seq))", "problem": 22, "user": "4e6dc95a535d5021c1a895f1"}, {"code": "#(loop [coll %1 acc 0]\n  (if (empty? coll)\n  acc\n  (recur (rest coll) (inc acc))))", "problem": 22, "user": "4e6dc5f5535d5021c1a895f0"}, {"code": "#(reduce (fn [f _] (+ 1 f)) 0 %)", "problem": 22, "user": "4e6dd0f5535d5021c1a895f3"}, {"code": "(fn[l] (loop [ls l c 1] (if (= (rest ls) '()) c (recur (rest ls) (+ 1 c)))))", "problem": 22, "user": "4e6a2498535d8ccf87e9fea1"}, {"code": "#(loop [col % acc 0]\n  (if (empty? col)\n    acc\n  (recur (rest col) (inc acc))))", "problem": 22, "user": "4e6a11ee535d8ccf87e9fe9f"}, {"code": "(fn [coll]\n  (let [accrue-count (fn [remainder total]\n                        (if (next remainder)\n                        (recur (next remainder) (+ 1 total))\n                        total))]\n    (accrue-count coll 1)))", "problem": 22, "user": "4e6defcc535d5021c1a895f8"}, {"code": "#(reduce (fn [n & _] (inc n)) 0 %)", "problem": 22, "user": "4e6dd51b535d5021c1a895f6"}, {"code": "(fn [coll]\n  (letfn[(cs [c i]\n          (if (seq c)\n            (recur (next c) (inc i))\n            i))]\n    (cs coll 0)))", "problem": 22, "user": "4e31a101535deb9a81d77f1d"}, {"code": "(fn [l]\n  (reduce (fn [acc, v] (+ acc 1)) 0 l)\n)", "problem": 22, "user": "4e6e10d8535d5021c1a895fd"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4e692c0d535d8ccf87e9fe99"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "4e6e4127535d5021c1a89605"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "4e6e3a1e535d5021c1a89602"}, {"code": "(fn [x] (reduce (fn [p q] (+ 1 p)) 0 x))", "problem": 22, "user": "4e6def42535d5021c1a895f7"}, {"code": "(fn [x] (reduce + (map (fn [y] 1) x)))", "problem": 22, "user": "4e6e6630535d5021c1a89609"}, {"code": "#(alength (to-array %))", "problem": 22, "user": "4e6df3c9535d5021c1a895fa"}, {"code": "(fn [coll]\r\n  (apply + (map (fn [x] 1) coll)))", "problem": 22, "user": "4e6a6b83535d8ccf87e9fee0"}, {"code": "reduce (fn [x y] (+ x 1)) 0", "problem": 22, "user": "4e6e7018535d5021c1a8960b"}, {"code": "(fn [n] (.size (seq n)))", "problem": 22, "user": "4e6ebd4a535d5021c1a89610"}, {"code": "(fn [c] (apply + (map (fn [n] 1) c)))", "problem": 22, "user": "4e6e97ca535d5021c1a8960c"}, {"code": "#(reduce (fn [x y] (inc x)) 0 %)", "problem": 22, "user": "4ddde41a535d08e6dec9fdd2"}, {"code": "#(loop [dataseq %1 index 0] (if (= (first dataseq) nil) index (recur (rest dataseq) (inc index))))", "problem": 22, "user": "4e678231535d8ccf87e9fe7e"}, {"code": "(fn [list]\n  (loop [l list c 0]\n    (if (empty? l)\n      c\n      (recur (rest l) (+ c 1)))))", "problem": 22, "user": "4e6f2a1e535d5021c1a89619"}, {"code": "(fn [l]\n  (loop [myl l mycount 0]\n    (if (empty? myl)\n      mycount\n      (recur (rest myl) (+ mycount 1)))))", "problem": 22, "user": "4e6cf2be535de274dd8d818a"}, {"code": "(fn [c]\n  (loop [c c acc 0]\n    (if (seq c)\n      (recur (rest c) (inc acc))\n      acc)))", "problem": 22, "user": "4e6f4cbc535d5021c1a8961a"}, {"code": "#(apply max (keys (zipmap (range 1 15) %)))", "problem": 22, "user": "4e68cc44535d8ccf87e9fe8d"}, {"code": "(fn [s]\n  ((fn [xs n]\n    (if (= xs '()) n (recur (rest xs) (+ n 1))))\ns 0))", "problem": 22, "user": "4e6f7178535d5021c1a8961c"}, {"code": "(fn foo\n  ([s] (foo s 0))\n  ([s n] (if (empty? s) n (recur (rest s) (inc n)))))", "problem": 22, "user": "4e6a4950535d8ccf87e9febf"}, {"code": "#(reduce (fn [a b] (inc a)) 0 %)", "problem": 22, "user": "4e6f8d36535d5021c1a89621"}, {"code": "(fn [lst] (reduce + (map (fn [x] 1) lst)))", "problem": 22, "user": "4e6eff83535d5021c1a89615"}, {"code": "#(do (loop [s (seq %), l 0] (if (= s ()) l (recur (rest s) (+ l 1)))))", "problem": 22, "user": "4e6a368e535d8ccf87e9feae"}, {"code": "(fn [lst] (reduce #(+ %1 %2) (map (fn [x] 1) lst)))", "problem": 22, "user": "4e6fe3a6535d5021c1a89629"}, {"code": "#(reduce (fn [x y] (+ x 1)) 0 %)", "problem": 22, "user": "4e6f8af8535d5021c1a89620"}, {"code": "(fn _count [x] (if (empty? x) 0 (+ 1 (_count (rest x)))))", "problem": 22, "user": "4e6fee9e535d5021c1a8962a"}, {"code": "(fn [coll]\n  (reduce (fn [result item] (+ 1 result)) 0 (apply list coll)))", "problem": 22, "user": "4e6f578c535d5021c1a8961b"}, {"code": "(fn [xs] (reduce (fn [c _] (+ 1 c)) 0 xs))", "problem": 22, "user": "4e6ed7e4535d5021c1a89613"}, {"code": "reduce (fn [x y] (+ x 1) ) 0", "problem": 22, "user": "4e6e1756535d5021c1a895fe"}, {"code": "(fn [x] (\n  reduce + (map (fn [y] 1) x)\n))", "problem": 22, "user": "4e6a4c34535d8ccf87e9fec3"}, {"code": "reduce (fn [a _] (inc a)) 0", "problem": 22, "user": "4e704293535d5021c1a89634"}, {"code": "#((fn func [s n] (if (= (rest s) '()) n (func (rest s) (inc n) ) ))\n     % 1)", "problem": 22, "user": "4e70b881535d5021c1a8963f"}, {"code": "(fn fbcount [coll]\n (loop [s (seq coll) len 0]\n  (if s\n    (recur (next s) (inc len))\n    len)))", "problem": 22, "user": "4e70c0b1535d5021c1a89640"}, {"code": "reduce #(do %2 (+ 1 %)) 0", "problem": 22, "user": "4e6e4210535d5021c1a89606"}, {"code": "(fn cnt [list] \n  (if (= list [])\n    0\n    (+ 1 (cnt (rest list)))))", "problem": 22, "user": "4e7023f8535d5021c1a89631"}, {"code": "reduce (fn [x y] (inc x)) 0", "problem": 22, "user": "4e705861535d5021c1a89635"}, {"code": "(fn [l]\n  (reduce + (map (fn [x] 1) l)))", "problem": 22, "user": "4e6a48da535d8ccf87e9febe"}, {"code": "(fn [c] (reduce (fn [a x] (+ a 1)) 0 c))", "problem": 22, "user": "4e690d86535d8ccf87e9fe96"}, {"code": "(fn [input]\n  (reduce (fn [Total x] \n            (inc Total)) 0 input))", "problem": 22, "user": "4e5d1912535d8a8b8723a2c9"}, {"code": "(fn [s]\n  (.size (vec s)))", "problem": 22, "user": "4e6a73d0535d8ccf87e9fee7"}, {"code": "( fn a [ x ] ( reduce + ( map (fn [x] 1 ) x )))", "problem": 22, "user": "4e6a5728535d8ccf87e9fecf"}, {"code": "(fn mylength [lst]\n    (if (empty? lst)\n        0\n        (+ 1 (mylength (rest lst)))))", "problem": 22, "user": "4e6a4641535d8ccf87e9feb9"}, {"code": "#(.size (vec %))", "problem": 22, "user": "4e7115b3535d5021c1a89647"}, {"code": "(fn [x]\n  (loop [s x, cnt 0]\n    (if (empty? s)\n      cnt\n      (recur (rest s) (inc cnt))\n    )\n  )\n)", "problem": 22, "user": "4e7030be535d5021c1a89632"}, {"code": "(fn length [coll]\n  (if (empty? coll)\n    0\n    (inc (length (rest coll)))) )", "problem": 22, "user": "4e707c3a535d5021c1a89639"}, {"code": "(fn [s]\n   (loop [a 0 s s]\n      (if (seq s)\n        (recur (inc a) (next s))\n        a)))", "problem": 22, "user": "4e71cc2e535d5021c1a89652"}, {"code": "#(apply + (map (constantly 1) %))", "problem": 22, "user": "4e71e7b7535d5021c1a89654"}, {"code": "reduce #(if %& (+ %1 1)) 0", "problem": 22, "user": "4e71da4d535d5021c1a89653"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4e71c2ca535d5021c1a89651"}, {"code": "(fn my-count \n  ([se] (my-count se 0))\n  ([se ag] \n    (if (= se [])\n      ag \n      (my-count (rest se) (inc ag)))))", "problem": 22, "user": "4e72175d535d5021c1a89658"}, {"code": "(fn [x]\n  (loop [s x i 0]\n    (if (= s '())\n      i\n      (recur (rest s) (inc i))\n    \n)))", "problem": 22, "user": "4e70ef6f535d5021c1a89644"}, {"code": "#(apply +(map(fn[x]1)%))", "problem": 22, "user": "4e6e3aac535d5021c1a89603"}, {"code": "(fn [l]\n  ((fn _s [l n]\n    (if (= () (rest l))\n    (+ n 1)\n    (_s (rest l) (+ n 1)))\n  ) l 0)\n)", "problem": 22, "user": "4e720985535d5021c1a89655"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4e726914535d5021c1a89661"}, {"code": "reduce (fn[a x] (inc a)) 0", "problem": 22, "user": "4e53319d535d8a8b8723a270"}, {"code": "#(.size (seq %))", "problem": 22, "user": "4e72ac47535d5021c1a89666"}, {"code": "#(loop [coll % cnt 0] (if (seq coll) (recur (rest coll) (inc cnt)) cnt))", "problem": 22, "user": "4e6fa38b535d5021c1a89622"}, {"code": "(fn [sq] (reduce + (map (fn [x] 1) sq)))", "problem": 22, "user": "4e725d20535d5021c1a8965e"}, {"code": "#(reduce (fn [m val] (+ 1 m)) 0 %)", "problem": 22, "user": "4e72a717535d5021c1a89665"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "4e726575535d5021c1a89660"}, {"code": "(fn [coll] (reduce + (map (fn [x] 1) coll)))", "problem": 22, "user": "4e6e2ac4535d5021c1a895ff"}, {"code": "#(reduce (fn [s c] (+ s 1)) 0 %)", "problem": 22, "user": "4e6b07dd535d8ccf87e9ff0a"}, {"code": "#(let[coll %]\n  (loop [i 0  col coll] \n\t   (if (nil? (seq col))\n\t       i\n\t       (recur (+ i 1) (next col)))))", "problem": 22, "user": "4e739e13535dff18050a9c76"}, {"code": "(partial reduce\n  (fn [c _] (+ c 1)) \n  0)", "problem": 22, "user": "4e71920f535d5021c1a8964e"}, {"code": "(fn my-count \n       ([col] (my-count col 0))\n       ([col i] \n         (if (= col nil)\n           i\n           (my-count (next col) (inc i))\n         )\n       )\n     )", "problem": 22, "user": "4e73debb535d7a570dd295b7"}, {"code": "#(loop [c % n 0]\n  (if (= (first c) nil)\n      n\n      (recur (next c) (inc n))))", "problem": 22, "user": "4e6acc33535d8ccf87e9ff05"}, {"code": "(fn my-count [xs] (if (empty? xs) 0 (+ 1 (my-count (rest xs)))))", "problem": 22, "user": "4e6b8140535d8ccf87e9ff17"}, {"code": "(fn [seq]\n    (reduce (fn [sum v] (+ sum 1)) 0 seq))", "problem": 22, "user": "4e6dfe57535d5021c1a895fc"}, {"code": "(fn [s]\n  (loop [xs s c 0]\n    (if (empty? xs)\n      c\n      (recur (rest xs) (inc c)))))", "problem": 22, "user": "4e6f1b7a535d5021c1a89618"}, {"code": "(fn f [s] (if (empty? s) 0 (+ 1 (f (rest s)))))", "problem": 22, "user": "4e72430c535d5021c1a8965d"}, {"code": "(fn get-count[s]\n   (if (= (rest s) '())\n      1\n      (+ 1 (get-count (rest s)))\n   )\n)", "problem": 22, "user": "4e6ac49d535d8ccf87e9ff01"}, {"code": "(fn cnt [[x & xs :as l]] (if (empty? l) 0 (inc (cnt xs))))", "problem": 22, "user": "4e71705e535d5021c1a89649"}, {"code": "(fn [list] (reduce (fn [a b] (+ a 1)) 0 list))", "problem": 22, "user": "4e75334b535d7a570dd295be"}, {"code": "(fn my-count [seq]\n  (if (empty? seq) 0\n      (+ 1 (my-count (rest seq)))))", "problem": 22, "user": "4e7542b5535d7a570dd295c0"}, {"code": "#(reduce + (map (fn [y] 1) %))", "problem": 22, "user": "4e756736535d7a570dd295c2"}, {"code": "#(loop [c % a 0] (if (seq c) (recur (next c) (inc a)) a))", "problem": 22, "user": "4e735545535d6912a4457f75"}, {"code": "#(reduce (fn [x y] (+ x 1)) 0 %)", "problem": 22, "user": "4e6d3653535de274dd8d818d"}, {"code": "#(alength (to-array %1))", "problem": 22, "user": "4e76ba46535d324fb2983d6d"}, {"code": "(fn my-count\n  ([list] (my-count list 0))\n\t([list c] (if (= (first list) nil) c (my-count (rest list) (inc c)))))", "problem": 22, "user": "4e75d6b6535d7a570dd295c6"}, {"code": "(fn [col]\n  (loop [c col cnt 0]\n    (if (empty? c)\n      cnt\n      (recur (rest c) (+ cnt 1))\n      )\n    )\n  )", "problem": 22, "user": "4db7da66535d1e037afb2187"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "4e781a2e535d324fb2983d74"}, {"code": "#(reduce (fn [s _] (+ s 1)) 0 %)", "problem": 22, "user": "4e776206535d324fb2983d70"}, {"code": "(fn [coll] (reduce + (map (fn [elem] 1) coll)))", "problem": 22, "user": "4e75edfe535d7a570dd295c7"}, {"code": "(fn [se]\n  (loop [s se c 0]\n    (if (empty? s)\n      c\n      (recur (rest s)\n             (inc c)))))", "problem": 22, "user": "4e773be8535d324fb2983d6e"}, {"code": "#(apply + (map (fn [x] 1) %))", "problem": 22, "user": "4dcc024e535d5973398f928f"}, {"code": "#(reduce + (map (fn [y] 1) %))", "problem": 22, "user": "4e765170535d324fb2983d69"}, {"code": "(fn badcount [x] (if (= x '()) 0 (+ 1 (badcount (rest x)))))", "problem": 22, "user": "4e663855535d8ccf87e9fe76"}, {"code": "#(loop [coll % result 0] \n  (if (empty? coll) \n    result \n    (recur (drop 1 coll) (inc result))))", "problem": 22, "user": "4e71a12c535d5021c1a8964f"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4e78dc98535db95036265724"}, {"code": "(fn [x] (loop [sq x cnt 0] (if (nil? sq) cnt (recur(next sq) (inc cnt)))))", "problem": 22, "user": "4e721857535d5021c1a8965a"}, {"code": "(fn mycount [x] \n  (if (seq x)\n    (+ (mycount (rest x)) 1)\n    0))", "problem": 22, "user": "4e7263a1535d5021c1a8965f"}, {"code": "(fn [col] (loop [c col, i 0] (if (nil? (first c)) i (recur (rest c) (inc i)))))", "problem": 22, "user": "4e794004535db169f9c796a1"}, {"code": "#(reduce (fn [x y] (inc x)) 0 %)", "problem": 22, "user": "4e79a143535db169f9c796a2"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "4e707db6535d5021c1a8963a"}, {"code": "#(reduce +  (map (fn [x] 1) %))", "problem": 22, "user": "4e78c208535db95036265722"}, {"code": "#(reduce + (map (fn[x] 1) %))", "problem": 22, "user": "4e79f28b535db169f9c796a8"}, {"code": "(fn my-count\n  [lst]\n  (if (empty? lst)\n    0\n    (+ 1 (my-count (rest lst)))))", "problem": 22, "user": "4e7a479b535db169f9c796aa"}, {"code": "(partial reduce (fn [acc x] (+ 1 acc)) 0)", "problem": 22, "user": "4e7a5395535db169f9c796ab"}, {"code": "(fn ct [curr]\n  (if (empty? curr) 0\n    (+ 1 (ct (rest curr)))))", "problem": 22, "user": "4e4aceff535dc968683fc4d0"}, {"code": "(fn mycount\n  ([col] (mycount col 0))\n  ([col count1]\n    (if col\n      (recur (next col) (+ 1 count1))\n      count1)))", "problem": 22, "user": "4e5a460f535d8a8b8723a2ab"}, {"code": "(fn mycount[col] \n  (if (empty? col) 0\n    (+ 1 (mycount (rest col)))))", "problem": 22, "user": "4e7ada51535db169f9c796ae"}, {"code": "#(loop [lst % acc 0]\n  (if (seq lst)\n    (recur (rest lst) (inc acc))\n    acc))", "problem": 22, "user": "4e739795535dff18050a9c75"}, {"code": "(fn foo [lst]\n  (if (empty? lst)\n    0\n    (+ 1 (foo (rest lst)))))", "problem": 22, "user": "4e7b7e0d535db169f9c796b3"}, {"code": "reduce (fn[a b] (inc a)) 0", "problem": 22, "user": "4e7bc07c535db169f9c796b9"}, {"code": "(fn size [coll] \n  (if (not (seq coll))\n  0\n  (+ (size (rest coll)) 1)))", "problem": 22, "user": "4e759734535d7a570dd295c4"}, {"code": "(fn [c]\n  (let [fn-aux (fn [c cnt]\n                 (if (seq c)\n                  (recur (rest c) (inc cnt))\n                   cnt))]\n     (fn-aux c 0)))", "problem": 22, "user": "4e7c4290535db169f9c796bc"}, {"code": "(fn [l]\n  (loop [lst l num 0]\n    (if (empty? lst) num\n        (recur (rest lst) (inc num)))))", "problem": 22, "user": "4e7b6e49535db169f9c796b1"}, {"code": "reduce (fn [result _] (inc result)) 0", "problem": 22, "user": "4e7c8fd1535db169f9c796be"}, {"code": "reduce (fn [c _] (+ c 1)) 0", "problem": 22, "user": "4e5fb634535d8ccf87e9fe4a"}, {"code": "(fn [s] (reduce (fn [c _] (inc c)) 0 s))", "problem": 22, "user": "4e79ff2a535db169f9c796a9"}, {"code": "(fn [coll]\n        (loop [coll coll cntr 0]\n          (if (empty? coll)\n            cntr\n            (recur (rest coll) (inc cntr)))))", "problem": 22, "user": "4e70af68535d5021c1a8963d"}, {"code": "(fn [col]\n  ((fn [collection n]\n    (if (empty? collection)\n      n\n      (recur (rest collection) (inc n)))) col 0))", "problem": 22, "user": "4e7d9257535db169f9c796dd"}, {"code": "(fn my-size [col]\n  (if (empty? col)\n    0\n    (+ 1 (my-size (rest col)))))", "problem": 22, "user": "4e77c1db535d324fb2983d72"}, {"code": "#(reduce (fn [a x](inc a)) 0 %)", "problem": 22, "user": "4e6ea1f5535d5021c1a8960e"}, {"code": "#(\n  (fn [y i]\n    (if (empty? y)\n        i\n        (recur (rest y) (+ i 1))))\n  % 0)", "problem": 22, "user": "4e7c1e9d535db169f9c796bb"}, {"code": "reduce (fn [x _] (inc x)) 0", "problem": 22, "user": "4e7db3b4535db169f9c796e1"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4e6a926e535d8ccf87e9fef6"}, {"code": "(fn [lst]\n  ((fn [l n]\n    (if (= nil (first l))\n        n\n        (recur (rest l) (+ n 1)))) lst 0))", "problem": 22, "user": "4e7dbe0c535db169f9c796e3"}, {"code": "(fn [x] \n  ((fn r [l n]\n    (cond \n      (empty? l) n\n      :else (r (rest l) (+ n 1)))) x 0))", "problem": 22, "user": "4e7db08d535db169f9c796e0"}, {"code": "(fn this\n  ([my-list accum]\n    (if (seq my-list)\n      (recur (next my-list) (+ accum 1))\n      accum))\n  ([my-list] (this my-list 0)))", "problem": 22, "user": "4e6ac7a8535d8ccf87e9ff03"}, {"code": "reduce (fn [c _] (+ c 1)) 0", "problem": 22, "user": "4e7dd982535db169f9c796ee"}, {"code": "(fn [x]\n    ((fn [y n]\n    (if (= y ()) n\n    (recur (rest y) (+ n 1))))\n  x 0))", "problem": 22, "user": "4e73a9dc535dff18050a9c77"}, {"code": "#(reduce (fn [x y] (+ 1 x)) 0 %)", "problem": 22, "user": "4e7df598535db169f9c796f6"}, {"code": "reduce #(inc(first%&)) 0", "problem": 22, "user": "4e7dfab0535db169f9c796f9"}, {"code": "(fn [lst]\n      (loop [ls lst cnt 0]\n        (if (empty? ls) cnt\n          (recur (rest ls) (inc cnt)))))", "problem": 22, "user": "4e7d1c22535db169f9c796c5"}, {"code": "(fn cnt [x]\n  (if (next x)\n    (+ 1 (cnt (next x)))\n    1))", "problem": 22, "user": "4e7ddc71535db169f9c796ef"}, {"code": "reduce (fn [a _] (+ a 1)) 0", "problem": 22, "user": "4e7e0bdc535db169f9c796ff"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4e6799cc535d8ccf87e9fe7f"}, {"code": "(fn mycount [items]\n (if (empty? items)\n  0\n  (+ 1 (mycount (rest items)))))", "problem": 22, "user": "4e7dfd48535db169f9c796fa"}, {"code": "(fn [x] (let [n 0] (reduce (fn[n s] (+ n 1)) 0 x)))", "problem": 22, "user": "4e78c2ba535db95036265723"}, {"code": "(fn [x]\n  ((fn r [n y] (if (empty? y)\n                 n\n                 (r (+ n 1) (rest y)))) 0 x))", "problem": 22, "user": "4e7e2830535db169f9c79706"}, {"code": "#(reduce (fn [x y] (+ x 1)) 0 %)", "problem": 22, "user": "4e7e1305535db169f9c79700"}, {"code": "(fn \n  [my-list]\n  \n  (loop [loop-my-list my-list, my-count 0]\n    (if (seq loop-my-list)\n      (recur (rest loop-my-list) (inc my-count))\n      my-count)))", "problem": 22, "user": "4e7e241a535db169f9c79705"}, {"code": "(fn [s]\n  (loop [seq s n 0]\n    (if (= seq '())\n      n\n      (recur (rest seq) (inc n)))))", "problem": 22, "user": "4e7e3504535db169f9c79709"}, {"code": "(fn [col] (reduce + (map (fn [x] 1) col)))", "problem": 22, "user": "4e7e33a3535db169f9c79708"}, {"code": "(fn c [s]\n  (if (empty? s)\n      0\n      (inc (c (rest s)))))", "problem": 22, "user": "4e7e3cc4535db169f9c7970a"}, {"code": "(fn [s]\n  (letfn [(cnt [n sq]\n            (if (first sq)\n              (recur (+ n 1) (rest sq))\n              n))]\n    (cnt 0 s)))", "problem": 22, "user": "4e7e032b535db169f9c796fc"}, {"code": "(fn [coll]\r\n  (loop [n 0, coll coll]\r\n    (if (seq coll)\r\n      (recur (inc n) (next coll))\r\n      n)))", "problem": 22, "user": "4e7e4d5c535db169f9c7970f"}, {"code": "(fn [coll]\n  (loop [coll coll cnt 0]\n    (if (seq coll)\n      (recur (rest coll) (inc cnt))\n      cnt)))", "problem": 22, "user": "4e7be091535db169f9c796ba"}, {"code": "(fn [elems]\n  (loop [e elems, n 1]\n\t\t(if (not (= '() (rest e)))\n\t\t\t(recur (rest e) (+ 1 n))\n\t\t\tn)))", "problem": 22, "user": "4e641bfd535d8ccf87e9fe67"}, {"code": "#(reduce + 0 (map (constantly 1) %))", "problem": 22, "user": "4e7e55ab535db169f9c79711"}, {"code": "#(reduce (fn [acum e] (inc acum)) 0 %)", "problem": 22, "user": "4e7e93f5535db169f9c7971a"}, {"code": "#(.size (seq %))", "problem": 22, "user": "4e7eff9e535db966e863cc38"}, {"code": "reduce (fn [v _] (+ v 1)) 0", "problem": 22, "user": "4e7f4147535db966e863cc3d"}, {"code": "(fn [seq]\n  (first\n    (last \n      (map vector (iterate inc 1) seq))))", "problem": 22, "user": "4e7f32ee535db966e863cc3a"}, {"code": "#(reduce (fn [c _] (inc c)) 0 %)", "problem": 22, "user": "4e7f3891535db966e863cc3b"}, {"code": "(fn my-count [x]\n  (loop [coll x cnt 0]\n    (if (empty? coll)\n      cnt\n      (recur (rest coll) (+ cnt 1)))))", "problem": 22, "user": "4e7f51eb535db966e863cc3f"}, {"code": "#(reduce (fn [n e] (inc n)) 0 %)", "problem": 22, "user": "4e7e6b51535db169f9c79712"}, {"code": "#(reduce (fn [x y] (inc x)) 0 %)", "problem": 22, "user": "4e6a61d8535d8ccf87e9fed8"}, {"code": "(fn [coll] \n  (loop [coll coll, total 0] \n    (if (empty? coll) \n     total\n     (recur (next coll) (+ total 1)))))", "problem": 22, "user": "4e7f7e48535db966e863cc42"}, {"code": "(fn my-count\n  ([l] (my-count l 0))\n  ([l n] (if (empty? l) n\n             (recur (rest l) (inc n)))))", "problem": 22, "user": "4e7f8f85535db966e863cc44"}, {"code": "(fn [coll]\n  (loop [cnt 1 coll coll]\n    (if (empty? coll)\n      cnt\n      (recur (if (empty? (rest coll))\n               cnt\n               (inc cnt))\n             (rest coll)))))", "problem": 22, "user": "4e7e8694535db169f9c79718"}, {"code": "(fn [l]\n  (loop [c 0 p l]\n    (if (= () p)\n      c\n      (recur (inc c) (rest p)))))", "problem": 22, "user": "4e7fe7c6535db62dc21a62ac"}, {"code": "(fn [initial-l]\r\n      (loop [c 0, l initial-l]\r\n        (if (first l)\r\n          (recur (inc c) (next l))\r\n          c)))", "problem": 22, "user": "4dda61dd535d02782fcbe9f3"}, {"code": "#(reduce (fn [r i] (inc r)) 0 %)", "problem": 22, "user": "4e7e05a6535db169f9c796fe"}, {"code": "(fn [coll]\n  (loop [c coll n 0]\n    (if (empty? c)\n      n\n      (recur (rest c) (inc n)))))", "problem": 22, "user": "4e80aa10535db62dc21a62b1"}, {"code": "(fn c [x]\n  (loop [n 0, r x]\n    (if r\n      (recur (inc n) (next r))\n      n)))", "problem": 22, "user": "4e7dcdb5535db169f9c796e9"}, {"code": "#(inc (last (last (map (fn [a b] [a b]) % (range)))))", "problem": 22, "user": "4e80d71b535db62dc21a62b7"}, {"code": "(fn [initial-x]\r\n  (loop [length 0, x initial-x]\r\n    (if (seq x)\r\n      (recur (inc length) (rest x))\r\n      length)))", "problem": 22, "user": "4e81e29b535db62dc21a62bd"}, {"code": "#(.size (seq %))", "problem": 22, "user": "4db1f7d223724b71670a9c07"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4e80e0f2535db62dc21a62b8"}, {"code": "reduce (fn [a _](+ 1 a)) 0", "problem": 22, "user": "4db85bdd535d1e037afb218d"}, {"code": "#(reduce (fn [x y] (inc x)) 0 %)", "problem": 22, "user": "4e823ed7535db62dc21a62c7"}, {"code": "(fn [seq] (apply + (map #(if (nil? %) 0 1) seq)))", "problem": 22, "user": "4e823f41535db62dc21a62c8"}, {"code": "reduce #(do %2 (+ 1 %)) 0", "problem": 22, "user": "4db858d1535d1e037afb218c"}, {"code": "(fn [l]\n  (loop [l l\n         n 0]\n    (if (empty? l)\n      n\n      (recur (rest l) (+ n 1)))))", "problem": 22, "user": "4e82c062535db62dc21a62cc"}, {"code": "reduce (fn [a b] (+ 1 a)) 0", "problem": 22, "user": "4e82f85d535db62dc21a62ce"}, {"code": "(fn len [sq]\n  (if (empty? sq)\n      0\n      (inc (len (rest sq)))))", "problem": 22, "user": "4e8338d6535db62dc21a62d3"}, {"code": "#(reduce + (map (fn [n] 1) %))", "problem": 22, "user": "4e1c2e16535d04ed9115e804"}, {"code": "(fn mycount [x] (if (= x '()) 0 (+ 1 (mycount (rest x)))))", "problem": 22, "user": "4e836a16535db62dc21a62d6"}, {"code": "(fn cnt [col]\n  (if\n    (empty? col)\n    0\n    (inc (cnt (rest col)))))", "problem": 22, "user": "4e837245535db62dc21a62d7"}, {"code": "#(first (last (map vector (iterate inc 1) %)))", "problem": 22, "user": "4e837808535db62dc21a62d9"}, {"code": "(fn [s]\n  (loop [s s c 0]\n  (if (nil? s)\n     c\n     (recur (next s) (inc c)))))", "problem": 22, "user": "4e842ebb535db62dc21a62df"}, {"code": "#(loop [l % c 0] \n  (if (empty? l) \n    c \n    (recur (rest l) (inc c))))", "problem": 22, "user": "4e823629535db62dc21a62c3"}, {"code": "#(reduce + (map (fn [t] 1) %))", "problem": 22, "user": "4e84836a535db62dc21a62e1"}, {"code": "(fn [c]\r\n    (loop [i c n 0]\r\n\t     (if (empty? i)\r\n\t\t n\r\n\t\t (recur (rest i) (inc n)))))", "problem": 22, "user": "4e821ca5535db62dc21a62c2"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "4e8516d0535db62dc21a62e8"}, {"code": "(fn mc [l] \n  (let [sub (fn [x n] (if (next x) (recur (rest x) (inc n)) n))]\n    (sub l 1)))", "problem": 22, "user": "4e851955535db62dc21a62e9"}, {"code": "reduce #(do %2 (inc %1)) 0", "problem": 22, "user": "4e662d58535d8ccf87e9fe75"}, {"code": "#(loop [xs % n 0] (if (empty? xs) n (recur (rest xs) (+ n 1))))", "problem": 22, "user": "4e85cda3535db62dc21a62f0"}, {"code": "(fn mycnt [xs] \n  (if (= xs '()) \n    0 \n    (+ 1 (mycnt (rest xs)))\n  )\n)", "problem": 22, "user": "4e85c175535db62dc21a62ef"}, {"code": "#(loop [l % c 0] (if (empty? l) c (recur (rest l) (+ c 1))))", "problem": 22, "user": "4e83b1af535db62dc21a62dc"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "4e8612f8535db62dc21a62f2"}, {"code": "reduce (fn [n _] (+ 1 n)) 0", "problem": 22, "user": "4e860e85535db62dc21a62f1"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4e84a7dd535db62dc21a62e2"}, {"code": "(partial reduce (fn [a _] (inc a)) 0)", "problem": 22, "user": "4e8681b7535dae1a5effa438"}, {"code": "#(.size (seq %))", "problem": 22, "user": "4e86a443535dc036d0eaab83"}, {"code": "(fn [x]\n  ((fn [x c]\n    (if (nil? (seq x))\n      c\n      (recur (rest x) (inc c)))) x 0))", "problem": 22, "user": "4e84f77c535db62dc21a62e5"}, {"code": "(fn [col] (reduce + (map (fn [&a] 1) col)))", "problem": 22, "user": "4e86fd2d535dceadca46984d"}, {"code": "#(loop [ll % c 0] (if (empty? ll) c (recur (next ll) (inc c))))", "problem": 22, "user": "4dd35dac535dae65d5c462dc"}, {"code": "reduce (fn [c _] (inc c)) 0", "problem": 22, "user": "4e8510e7535db62dc21a62e7"}, {"code": "(partial reduce (fn [c x] (+ c 1)) 0)", "problem": 22, "user": "4e8742d4535dceadca46984f"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "4e8768f6535dceadca469850"}, {"code": "(fn [coll] (reduce + (map (fn [x] (if (nil? x) 0 1))  coll)))", "problem": 22, "user": "4e68dfe6535d8ccf87e9fe91"}, {"code": "(fn[s] (let [f  (fn[l c] (if (empty? l) c (recur (rest l) (inc c))))]\n          (f s 0)))", "problem": 22, "user": "4e889643535d8b9bb0147ca5"}, {"code": "(fn [x]\n  (loop [x x n 0]\n    (if (empty? x) n (recur (rest x) (inc n)))))", "problem": 22, "user": "4e88feef535d8b9bb0147ca8"}, {"code": "reduce (fn [n _] (inc n)) 0", "problem": 22, "user": "4dfe65a1535d04ed9115e787"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "4e894068535d4ef0aa30db97"}, {"code": "(fn this [l] (if (empty? l) 0 (+ 1 (this (rest l)))))", "problem": 22, "user": "4e89ddf9535d3e98b8023284"}, {"code": "reduce (fn [x _] (inc x)) 0", "problem": 22, "user": "4e89f46c535d3e98b8023288"}, {"code": "#(reduce + (map (fn [_] 1) %))", "problem": 22, "user": "4e89e939535d3e98b8023287"}, {"code": "(fn [y] (apply + (map (fn [x] 1) y)))", "problem": 22, "user": "4e89de60535d3e98b8023285"}, {"code": "(partial reduce (fn [x y] (+ x 1)) 0)", "problem": 22, "user": "4daf36c2edd6309eace4d175"}, {"code": "reduce (fn [c _] (+ c 1)) 0", "problem": 22, "user": "4e89f9e5535d3e98b8023289"}, {"code": "(fn [x] (reduce + (map (fn [x] 1) x)))", "problem": 22, "user": "4e8a170c535d3e98b802328f"}, {"code": "(fn\r\n  [list]\r\n  (loop [li list\r\n         n 0]\r\n         (println li)\r\n         (if (= (nth li 0 nil) nil)\r\n            n\r\n            (recur (rest li) (inc n)))))", "problem": 22, "user": "4e8a0c82535d3e98b802328d"}, {"code": "(fn myn [s] (if (nil? (first s)) 0 (+ 1 (myn (rest s)))))", "problem": 22, "user": "4e8a5d1c535d65386fec210a"}, {"code": "#(loop [coll % cnt 0]\n  (if (empty? coll)\n    cnt\n    (recur (rest coll) (inc cnt))))", "problem": 22, "user": "4e814706535db62dc21a62bb"}, {"code": "#(loop [s % c 0]\n   (if (= s '())\n     c\n     (recur (rest s) (inc c))))", "problem": 22, "user": "4e8ad247535d65386fec2111"}, {"code": "(fn [coll] (loop [c coll n 0] (if c (recur (next c) (inc n)) n)))", "problem": 22, "user": "4e89dbce535d3e98b8023283"}, {"code": "#(inc (last (interleave % (range))))", "problem": 22, "user": "4dbb0f2d535d1e037afb21b1"}, {"code": "(fn [seqn]\n  (loop [seqn seqn acc 0]\n    (if (empty? seqn)\n      acc\n      (recur (rest seqn) (+ acc 1)))))", "problem": 22, "user": "4e8944b6535d4ef0aa30db98"}, {"code": "(fn f [l] (if (= l (rest l)) 0 (+ 1 (f (rest l)))))", "problem": 22, "user": "4e8b5cb8535d65386fec211b"}, {"code": "(fn [coll] (apply + (map #(inc (compare %1 %2)) coll coll)))", "problem": 22, "user": "4dcfbc44535d5973398f92a7"}, {"code": "(fn [x] (reduce + (map (fn [x] (if (= x x) 1 0)) x)))", "problem": 22, "user": "4e83844a535db62dc21a62da"}, {"code": "#(loop\n  [result 0 coll (seq %)]\n  (if(seq coll)\n    (recur (inc result) (drop 1 coll)) result))", "problem": 22, "user": "4e8aef69535d65386fec2114"}, {"code": "#(\n(fn [cnt coll] \n    (if (= () coll)\n        cnt\n        (recur (+ 1 cnt) (rest coll)))) 0 %1)\n\n;#(reduce + (map (fn [x] 1) %1))", "problem": 22, "user": "4e8b6f4d535d65386fec211e"}, {"code": "#(loop [s % cnt 0]\n     (if (seq s)\n       (recur (rest s) (inc cnt))\n       cnt))", "problem": 22, "user": "4e7ec984535db169f9c7971c"}, {"code": "#(loop [cnt 0 s %]\n   (if-let [items (seq s)]\n           (recur (inc cnt) (rest s))\n           cnt))", "problem": 22, "user": "4e8a8720535d65386fec210c"}, {"code": "#(loop [len 0 coll %]\n  (if (empty? coll)\n\t\tlen\n\t\t(recur (inc len) (rest coll))))", "problem": 22, "user": "4e8ad1d2535d65386fec2110"}, {"code": "(fn [coll]\n    (loop [f (first coll) n (rest coll) c 0]\n      (if f\n        (recur (first n) (rest n) (inc c))\n        c)))", "problem": 22, "user": "4e8c1d97535d65386fec2127"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4e88e103535d8b9bb0147ca6"}, {"code": "(fn [x] \n  ((fn [x n] \n    (if (empty? x)\n      n\n      (recur (rest x) (+ 1 n))))\n    x 0))", "problem": 22, "user": "4e8c9f2e535d65386fec212b"}, {"code": "(fn this [x] (if (nil? (first x)) 0 (+ 1 (this (rest x)))))", "problem": 22, "user": "4e8cbc9f535d65386fec212d"}, {"code": "(fn [s] (reduce + (map (fn [_] 1) s)))", "problem": 22, "user": "4e8ce277535d65386fec212f"}, {"code": "(fn f [v]\n  (cond (empty? v) 0\n    :else (+ 1 (f (rest v)))))", "problem": 22, "user": "4e8b557c535d65386fec2119"}, {"code": "(fn [x] ( ( fn count2 [x y] ( if (empty? x) y (count2 (rest x) (+ y 1))) ) x 0 ))", "problem": 22, "user": "4e8d5edd535d65386fec2134"}, {"code": "reduce (fn [i j] (+ 1 i)) 0", "problem": 22, "user": "4e8a460e535d65386fec2109"}, {"code": "(fn[l](reduce + (map (fn[x] 1) l)))", "problem": 22, "user": "4e244ed5535d04ed9115e826"}, {"code": "(fn [x] (.size (vec x)))", "problem": 22, "user": "4e8d7b4b535d65386fec2135"}, {"code": "(fn fun [x]\n(reduce + (map (constantly 1) x)))", "problem": 22, "user": "4e8b7427535d65386fec2122"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4e8a0741535d3e98b802328b"}, {"code": "(fn f [x]\n  (if\n    (empty? x) 0\n    (inc (f (rest x)))))", "problem": 22, "user": "4e89559c535d4ef0aa30db9a"}, {"code": "(fn [x] \n  (loop [x (seq x) ret 0] \n    (if (empty? x)\n      ret\n      (recur (rest x) (+ 1 ret)))))", "problem": 22, "user": "4e89ff3d535d3e98b802328a"}, {"code": "#(reduce (fn [a b] (inc a)) 0 %)", "problem": 22, "user": "4e8e8c24535d65386fec2143"}, {"code": "(fn conta [x y]\n  (if (empty? y)\n    x\n    (conta (+ x 1) (rest y))\n  )\n ) 0", "problem": 22, "user": "4e8b73e4535d65386fec2120"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4e8ddf32535d65386fec213c"}, {"code": "(fn [x]\n  (reduce + (map (constantly 1) x)))", "problem": 22, "user": "4e697e41535d8ccf87e9fe9c"}, {"code": "#(apply + (map (fn [x] 1) %))", "problem": 22, "user": "4e8df08f535d65386fec213e"}, {"code": "#((fn [s c] (if (nil? (seq s)) c (recur (rest s) (inc c)))) % 0)", "problem": 22, "user": "4e8f4f64535d65386fec2149"}, {"code": "#(reduce (fn [acc item] (+ 1 acc)) 0 %)", "problem": 22, "user": "4e8f5eba535d65386fec214c"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4db13ff51254ad5b4805fa68"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "4dc0ff08535d020aff1edf84"}, {"code": "#(reduce (fn [acc, ?] (inc acc)) 0 (seq %))", "problem": 22, "user": "4e6f8431535d5021c1a8961e"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4e80d1c8535db62dc21a62b6"}, {"code": "#(.size (vec %))", "problem": 22, "user": "4e8d86d5535d65386fec2136"}, {"code": "#(reduce + (map (fn [n] 1) %))", "problem": 22, "user": "4e910e36535d65386fec2159"}, {"code": "(fn [l] (reduce (fn [x y] (+ x 1)) 0 l))", "problem": 22, "user": "4e919b43535dbda64a6f6afb"}, {"code": "#(if (string? %) (.length %) (.size %))", "problem": 22, "user": "4e8b98fc535d65386fec2124"}, {"code": "reduce (fn [x _](+ 1 x))  0", "problem": 22, "user": "4e929dd0535dbda64a6f6b05"}, {"code": "(fn [x] \n  (loop [l x cou 0] \n    (if (empty? l)\n      cou\n      (recur (rest l) (inc cou)))))", "problem": 22, "user": "4e920f44535dbda64a6f6afd"}, {"code": "(fn [coll]\n    (loop [l coll n 0]\n    (if (empty? l)\n\t      n\n\t    (recur (rest l) (inc n)))))", "problem": 22, "user": "4e7d2448535db169f9c796c8"}, {"code": "reduce (fn [a b] (inc a)) 0", "problem": 22, "user": "4e8f5dd1535d65386fec214b"}, {"code": "(fn my-count [s]\n  (if (empty? s)\n    0\n    (inc (my-count (rest s)))))", "problem": 22, "user": "4e91c190535dbda64a6f6afc"}, {"code": "#(reduce (comp inc first vector) 0 %)", "problem": 22, "user": "4e8e0a62535d65386fec213f"}, {"code": "(fn [coll]\n  (reduce + (map  (fn [item] 1) coll)))", "problem": 22, "user": "4e93600b535dbda64a6f6b0e"}, {"code": "#(loop [ vec % y 0 ]\n  (if (empty? vec)\n    y\n    (recur (rest vec) (inc y))\n)\n)", "problem": 22, "user": "4e8b73f1535d65386fec2121"}, {"code": "(fn [arr]\n  (reduce \n    + \n    (map \n      (fn [i] (if true 1)) \n      arr\n    )\n  )\n)", "problem": 22, "user": "4e932a19535dbda64a6f6b0a"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4e53d441535d8a8b8723a276"}, {"code": "(fn countdown [c]\n  ( \n\t  (fn [c n] \n\t\t  (if (empty? c)\n\t\t\t n\n\t\t\t (recur (drop 1 c) (inc n) )\n\t\t  )\n\t  )\n\t  c 0\n\t)\n)", "problem": 22, "user": "4e7650c5535d324fb2983d68"}, {"code": "reduce (fn [a b]\n  (inc a))\n0", "problem": 22, "user": "4e8da0bf535d65386fec2138"}, {"code": "(fn [y] (reduce + (map (fn [x] 1) y)))", "problem": 22, "user": "4e9487fb535dbda64a6f6b14"}, {"code": "(fn [x] (apply + (map #([1 %] 0)\n             x\n          )))", "problem": 22, "user": "4e94a8b5535dbda64a6f6b16"}, {"code": "(fn [l] (reduce (fn [acc, v] (+ acc 1)) 0 l))", "problem": 22, "user": "4e8de3a2535d65386fec213d"}, {"code": "(fn [a] (loop [s a n 0] (if (empty? s) n (recur (rest s) (+ 1 n)))))", "problem": 22, "user": "4e951f2c535dbda64a6f6b2f"}, {"code": "#(.size (seq %))", "problem": 22, "user": "4e951ce5535dbda64a6f6b2e"}, {"code": "(fn [lst]\n  (let [count-1 (fn [lst2 cnt] (if (nil? lst2) cnt (recur (next lst2) (inc cnt))))]\n    (count-1 lst 0)))", "problem": 22, "user": "4e951f44535dbda64a6f6b30"}, {"code": "(fn [seq]\n((fn [sq cnt]\n  (if (empty? sq)\n    cnt \n    (recur (rest sq) (+ cnt 1)))) seq 0))", "problem": 22, "user": "4e9528ef535dbda64a6f6b32"}, {"code": "#(loop [col (vec %) size 0] \n    (if-not (nil?  (seq col)) \n        (recur (rest col) (inc size))\n        size\n    )   \n  )", "problem": 22, "user": "4e952463535dbda64a6f6b31"}, {"code": "reduce (fn [c _] (+ c 1))  0", "problem": 22, "user": "4e6ec6f6535d5021c1a89612"}, {"code": "(fn [x]\n  (loop [x x i 0]\n    (if (empty? (rest x))\n      (inc i)\n      (recur (rest x) (inc i)))))", "problem": 22, "user": "4e955b95535dbda64a6f6b33"}, {"code": "#(inc (last (keep-indexed (fn [index item] index) %)))", "problem": 22, "user": "4e9361c9535dbda64a6f6b0f"}, {"code": "(fn [coll]\n             (reduce (fn [acc _]\n                       (inc acc))\n                     0 coll))", "problem": 22, "user": "4e959ee3535dbda64a6f6b35"}, {"code": "(fn [v] (reduce (fn [t e] (inc t)) 0 v))", "problem": 22, "user": "4e9646f2535dbda64a6f6b40"}, {"code": "(fn bar [l] (reduce (fn foo [a b] (+ a 1)) (cons 0 l)))", "problem": 22, "user": "4e904d9c535d65386fec2152"}, {"code": "(fn [x] (reduce + (map (fn [_] 1) x)))", "problem": 22, "user": "4e8b1fa2535d65386fec2118"}, {"code": "#(apply + (map (constantly 1) %))", "problem": 22, "user": "4e96557d535dbda64a6f6b43"}, {"code": "(partial reduce (fn [a _] (inc a)) 0)", "problem": 22, "user": "4e9660ec535dbda64a6f6b44"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "4e9697bc535dbda64a6f6b48"}, {"code": "(fn count-elements [countable] \n  (if-let [[first-element & rest-of-pack] countable]\n    (+ 1 (count-elements rest-of-pack)) 0))", "problem": 22, "user": "4daee452edd6309eace4d165"}, {"code": "#(reduce (fn [x _] (+ x 1)) 0 %)", "problem": 22, "user": "4e96eecf535dbda64a6f6b4b"}, {"code": "(fn\r\n [L]\r\n (loop [cnt 0 alist L]\r\n  (if (empty? alist) cnt \r\n   (recur (inc cnt ) (rest alist)  ))  ) )", "problem": 22, "user": "4e6ff01e535d5021c1a8962b"}, {"code": "(fn test [x] (if (empty? x) 0 (+ 1 (test (rest x)))))", "problem": 22, "user": "4e8d5911535d65386fec2133"}, {"code": "(fn [x] (reduce (fn [cnt coll] (inc cnt)) 0 x))", "problem": 22, "user": "4e976f79535dbda64a6f6b55"}, {"code": "(fn c [[h & t]] (if t (inc (c t)) 1))", "problem": 22, "user": "4e9609ad535dbda64a6f6b3e"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "4e975bce535dbda64a6f6b53"}, {"code": "#(.size (seq %))", "problem": 22, "user": "4e8a0d5d535d3e98b802328e"}, {"code": "#(.size (seq %))", "problem": 22, "user": "4e8f1ac6535d65386fec2146"}, {"code": "reduce (fn [a b] (inc a)) 0", "problem": 22, "user": "4e6a5bbe535d8ccf87e9fed1"}, {"code": "#(reduce (fn [x y] (+ x 1)) 0 %)", "problem": 22, "user": "4e971a86535dbda64a6f6b4f"}, {"code": "(fn c\n  ([seq] (c seq 0))\n  ([seq total] \n    (if (next seq)\n      (c (next seq) (+ 1 total))\n      (+ 1 total))))", "problem": 22, "user": "4e98a6d0535dbda64a6f6b5e"}, {"code": "(fn [s]\n  (let [counter (fn [s n]\n                  (if (= () s)\n                      n\n                      (recur (rest s) (+ n 1))))]\n  (counter s 0)))", "problem": 22, "user": "4e98f9f7535dbda64a6f6b60"}, {"code": "(fn [n] (reduce + (map (fn [x] (cond (not (nil? x)) 1 :else 0)) n)))", "problem": 22, "user": "4e977eb4535dbda64a6f6b56"}, {"code": "(fn [elements]\n  (loop [i 0\n         lst elements]\n    (if (empty? lst)\n        i\n        (recur (inc i) (rest lst)))))", "problem": 22, "user": "4e99108d535dbda64a6f6b62"}, {"code": "#(last (map (fn [_ c] c) % (iterate inc 1)))", "problem": 22, "user": "4e994541535dbda64a6f6b64"}, {"code": "reduce (fn [cnt _] (inc cnt)) 0", "problem": 22, "user": "4e99a255535dbda64a6f6b67"}, {"code": "(fn [s] (loop [ms s mx 0] (if (= ms '()) mx (recur (rest ms) (inc mx)))))", "problem": 22, "user": "4e9629c2535dbda64a6f6b3f"}, {"code": "#(let[step (fn [tail cnt]\r\n  (if (empty? tail) cnt (recur (rest tail) (inc cnt))))]\r\n  (step %1 0))", "problem": 22, "user": "4e99f2e1535dbda64a6f6b6c"}, {"code": "#(reduce (fn [n _] (inc n)) 0 %)", "problem": 22, "user": "4e9b230c535dbda64a6f6b75"}, {"code": "#(apply + (map (fn [x] 1) %))", "problem": 22, "user": "4e9b2f0b535dbda64a6f6b76"}, {"code": "#(apply + (map (fn [ & s] 1) %))", "problem": 22, "user": "4e9b22e2535dbda64a6f6b74"}, {"code": "(fn y [s] (if (empty? s) 0 (+ 1 (y (rest s)))))", "problem": 22, "user": "4e9be708535dbda64a6f6b79"}, {"code": "(fn [ys] \n  (loop [xs ys, i 0] \n    (if (empty? xs) i \n                    (recur (rest xs) (+ i 1)))\n    ))", "problem": 22, "user": "4e9c66e2535dbda64a6f6b7f"}, {"code": "(fn my-count [s]\n  (loop [s s n 0]\n    (if (empty? s)\n      n\n      (recur (rest s) (inc n)))))", "problem": 22, "user": "4e9c81e8535dbda64a6f6b80"}, {"code": "#(apply + (-> % frequencies vals))", "problem": 22, "user": "4e9a8c0e535dbda64a6f6b72"}, {"code": "#(.size (vec %))", "problem": 22, "user": "4e9cf905535dbda64a6f6b84"}, {"code": "(fn [seq]\n  (loop [s seq c 0]\n    (if (empty? s) c (recur (rest s) (inc c)))))", "problem": 22, "user": "4e9c3648535dbda64a6f6b7d"}, {"code": "#(alength (into-array %))", "problem": 22, "user": "4e9c4e02535dbda64a6f6b7e"}, {"code": "(fn my-count [input] \n  (loop [my-list input, my-count 0] \n    (if (seq my-list) \n      (recur (rest my-list) (inc my-count))\n      my-count))\n)", "problem": 22, "user": "4e99dd05535dbda64a6f6b6a"}, {"code": "(fn [coll]\n    (loop [acc coll\n           cnt 0]\n       (if (empty? acc)\n            cnt\n          (recur (drop 1 acc) (inc cnt)))))", "problem": 22, "user": "4e9dafe1535dbda64a6f6b89"}, {"code": "(fn [s]\n  (loop [sq s c 1]\n    (if (nil? (next sq))\n      c\n      (recur (rest sq) (inc c)))))", "problem": 22, "user": "4e99819a535dbda64a6f6b66"}, {"code": "(fn counter [l]\r\n  (if (empty? l)\r\n    0\r\n    (+ (counter (rest l)) 1)))", "problem": 22, "user": "4e9e12b2535dbda64a6f6b92"}, {"code": "#(loop [c 0\n       f (first %) \n       l (rest %)]\n      (if (not (= nil f))\n        (recur (inc c) (first l) (rest l))\n        c))", "problem": 22, "user": "4ddacd94535d02782fcbe9f6"}, {"code": "(fn [s] (reduce + (map #(if(not (= % nil )) 1) s)))", "problem": 22, "user": "4e967c4a535dbda64a6f6b47"}, {"code": "#(loop [ c 0\n        f (first %)\n        r (rest %)]\n      (if (not (= f nil))\n        (recur (inc c) (first r) (rest r))\n        c))", "problem": 22, "user": "4e9e7ce3535dbda64a6f6b98"}, {"code": "#(loop [ c 0\n         f (first %)\n         r (rest %) ]\n    (if (not ( = f nil))\n    (recur (inc c) (first r) (rest r)) \n    c)\n)", "problem": 22, "user": "4e9e6bd6535dbda64a6f6b96"}, {"code": "#(reduce + 0 (map (constantly 1) %))", "problem": 22, "user": "4e9e0640535dbda64a6f6b91"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4e9c0552535dbda64a6f6b7b"}, {"code": "#(reduce (fn [x y] (+ x 1)) 0 %)", "problem": 22, "user": "4e9de526535dbda64a6f6b8e"}, {"code": "(fn cnt [lst] (if (empty? lst) 0 (+ 1 (cnt (rest lst)))))", "problem": 22, "user": "4e9a1512535dbda64a6f6b6e"}, {"code": "#(loop [s % c 0]\n  (if (empty? s)\n      c\n      (recur (rest s) (inc c))))", "problem": 22, "user": "4e9f877c535dbda64a6f6b9c"}, {"code": "reduce (fn [x y] (inc x)) 0", "problem": 22, "user": "4e65027c535d8ccf87e9fe6e"}, {"code": "(fn [x]\n  (loop [lst x cnt 0]\n    (if (empty? lst)\n        cnt\n        (recur (rest lst) (inc cnt)))))", "problem": 22, "user": "4e9ff8d0535d7eef3080729c"}, {"code": "(fn len [source]\n  (if (= '() source)\n      0\n      (+ 1 (len (rest source)))))", "problem": 22, "user": "4ea01955535d7eef3080729f"}, {"code": "(fn [xs]\n    (loop [i 0 [x & xs] xs]\n      (if-not (empty? xs)\n        (recur (inc i) xs)\n        (inc i))))", "problem": 22, "user": "4e9fd521535d7eef3080729a"}, {"code": "#(reduce (fn [x y](+ 1 x)) 0 %)", "problem": 22, "user": "4ea09441535d7eef308072a7"}, {"code": "(fn countElements \n  ([x] (countElements x 0))\n  ([x theCount] \n    (if (empty? x)\n      theCount\n      (countElements (rest x) (+ theCount 1))\n    )\n  )\n)", "problem": 22, "user": "4ea08b30535d7eef308072a5"}, {"code": "(fn [s] (reduce + 0 (map (fn [x] 1) s)))", "problem": 22, "user": "4ea092f4535d7eef308072a6"}, {"code": "(fn [coll] (reduce (fn [a _] (inc a)) 0 coll))", "problem": 22, "user": "4ea09fa4535d7eef308072aa"}, {"code": "(fn [x] \n  (loop [li x cnt 1]\n    (if (= (rest li) ())\n      cnt\n      (recur (rest li) (+ cnt 1)))))", "problem": 22, "user": "4ea0a7c7535d7eef308072ab"}, {"code": "#(reduce + (map (fn [_] 1) %))", "problem": 22, "user": "4ea0c284535d7eef308072ad"}, {"code": "reduce (fn[x y] (+ x 1)) 0", "problem": 22, "user": "4e9fde3c535d7eef3080729b"}, {"code": "#(apply + (map (fn [x] 1) %))", "problem": 22, "user": "4e944706535dbda64a6f6b11"}, {"code": "#(loop [s %\n        acc 0]\n  (if (empty? s) acc\n  (recur (drop 1 s) (inc acc))))", "problem": 22, "user": "4daee8e9edd6309eace4d166"}, {"code": "(fn [c] (reduce (fn [a x] (inc a)) 0 c))", "problem": 22, "user": "4ea1c349535d7eef308072ba"}, {"code": "reduce (fn [ct _] (inc ct)) 0", "problem": 22, "user": "4ea1b9e4535d7eef308072b8"}, {"code": "(fn [x] (reduce + (map (fn [y] 1) x)))", "problem": 22, "user": "4ea16981535d7eef308072b2"}, {"code": "(fn [seq]\n  (loop [s seq c 0]\n    (if (empty? s)\n        c\n        (recur (rest s) (inc c)))))", "problem": 22, "user": "4ea1bc93535d7eef308072b9"}, {"code": "(fn [l]\n  (loop [i 0\n         l l]\n    (if-not (seq l)\n      i\n      (recur (inc i) (rest l)))))", "problem": 22, "user": "4e59b02c535d8a8b8723a2a2"}, {"code": "(fn length [coll]\n  (loop [coll coll\n         result 0]\n     (if (empty? coll)\n       result\n       (recur (rest coll) (inc result)))) )", "problem": 22, "user": "4ea00469535d7eef3080729d"}, {"code": "(fn [coll] (apply + (map (fn [x] 1) coll )))", "problem": 22, "user": "4e86d3cf535dceadca46984c"}, {"code": "(fn h [x] \n   (if \n      (empty? x) \n      0\n      (+ 1 (h (rest x)))\n   )\n)", "problem": 22, "user": "4e9d6a65535dbda64a6f6b87"}, {"code": "reduce (fn [x y] (+ x 1)) 0", "problem": 22, "user": "4ea322fe535d7eef308072c2"}, {"code": "(fn [s]\n  (letfn [(count* [s n]\n            (if (nil? (first s))\n              n\n              (recur (rest s) (inc n))))]\n    (count* s 0)))", "problem": 22, "user": "4e9e4515535dbda64a6f6b95"}, {"code": "(fn f [xs] (if (empty? xs) 0 (+ 1 (f (rest xs)))))", "problem": 22, "user": "4ea2ddf1535d7eef308072bf"}, {"code": "(fn [coll]\n  (reduce (fn [acc _] (inc acc)) 0 coll))", "problem": 22, "user": "4ea348ad535d7eef308072c4"}, {"code": "#(.length (vec %))", "problem": 22, "user": "4ea365e2535d7eef308072c5"}, {"code": "reduce #([(+ 1 %) %2] 0) 0", "problem": 22, "user": "4ea0cfb0535d7eef308072ae"}, {"code": "(fn foo \n  ([l] (foo l 0))\n  ([l c] (if (empty? l) c (foo (rest l) (+ c 1)))))", "problem": 22, "user": "4dbecb06535d020aff1edf6a"}, {"code": ";;#(reduce + (map (fn [x] 1) %)) \n\n;;(fn [l]\n  ;;(reduce \n    ;;(fn [acc, t] \n    ;;  (+ acc 1)\n  ;;  ) 0 l)\n;;)\n\n#(loop [seq %1 n 0]\n  (if (empty? seq)\n    n\n    (recur (rest seq) (inc n))))", "problem": 22, "user": "4e8a6bb0535d65386fec210b"}, {"code": "(fn [c]\n  (loop [coll c acc 0]\n    (if (empty? coll)\n      acc\n      (recur (rest coll) (inc acc)))))", "problem": 22, "user": "4ea4fe1f535d7eef308072cf"}, {"code": "reduce (fn [x y] (inc x)) 0", "problem": 22, "user": "4ea41fc2535d7eef308072cb"}, {"code": "#(loop[acc 0 n %]\n    (if(nil? (seq n))\n      acc\n      (recur (inc acc) (rest (seq n)))))", "problem": 22, "user": "4ea53dc2535d7eef308072d1"}, {"code": "#(reduce (fn [c _] (inc c)) 0 %)", "problem": 22, "user": "4e949d18535dbda64a6f6b15"}, {"code": "(fn cnt [s] (reduce (fn [c i] (inc c)) 0 (seq s)))", "problem": 22, "user": "4db3393e535df7e46ed9b6cc"}, {"code": "(fn [x]\n  (reduce (fn[y,z] (+ 1 y)) 0 x))", "problem": 22, "user": "4ea5ba92535d7eef308072d9"}, {"code": "(fn [x] (reduce (fn[n1 n2] (+ n1 1)) 0 (seq x)))", "problem": 22, "user": "4ea09d5c535d7eef308072a9"}, {"code": "(fn cnt[list] \n  (reduce + (map (fn [x] 1) list)))", "problem": 22, "user": "4e9def6b535dbda64a6f6b8f"}, {"code": "(fn [s]\n  (loop [s s r 0]\n    (if (empty? s)\n      r\n      (recur (rest s) (inc r)))))", "problem": 22, "user": "4ea67906535d7eef308072e4"}, {"code": "(fn [x]\n  (loop [remaining x, n 0]\n    (if (empty? remaining)\n      n\n      (recur (rest remaining) (inc n) ))))", "problem": 22, "user": "4ea57300535d7eef308072d5"}, {"code": "(fn [x] \n  (reduce + (map (fn [n] 1) x))\n)", "problem": 22, "user": "4dd1de4d535dae65d5c462d7"}, {"code": "reduce #(+ %1 (+ 1 (if (= %2 %2) 0 0))) 0", "problem": 22, "user": "4ea629da535d7eef308072e2"}, {"code": "(fn [sequen]\n  (loop [s sequen acc 0]\n    (cond\n      (nil? (seq s)) acc\n      :else (recur (rest s) (inc acc)))))", "problem": 22, "user": "4ea5e794535d7eef308072df"}, {"code": "(fn countit [x] (if (empty? (rest x)) 1 (+ 1 (countit (rest x)))))", "problem": 22, "user": "4ea5adeb535d7eef308072d6"}, {"code": "(fn how-many [x] (if (empty? x) 0 (inc(how-many (rest x)))))", "problem": 22, "user": "4ea1ecfa535d7eef308072bb"}, {"code": "(fn cnt [c] (if (= c '()) 0 (+ 1 (cnt (rest c)))))", "problem": 22, "user": "4ea77d81535d7eef308072ec"}, {"code": "(fn [x]\n  (apply +\n    (map (fn [item] 1) x)))", "problem": 22, "user": "4e932f38535dbda64a6f6b0c"}, {"code": "(fn [x] (let \n  [foo (fn [coll cnt] (if (first coll) (recur (rest coll) (+ 1 cnt)) cnt))]\n  (foo x 0)))", "problem": 22, "user": "4ea8a997535d7eef308072ff"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4ea84250535d7eef308072f5"}, {"code": "(fn reccount [xsq] \n  (if (= (rest xsq) '())\n    1\n  (inc (reccount (rest xsq)))))", "problem": 22, "user": "4ea7999e535d7eef308072ee"}, {"code": "reduce (fn [x,y] (inc x)) 0", "problem": 22, "user": "4ea85ecf535d7eef308072fa"}, {"code": "#(reduce (fn [x y] (+ x 1)) 0 %)", "problem": 22, "user": "4ea87a83535d7eef308072fb"}, {"code": "#(last (keep-indexed (fn [i v] (inc i)) %))", "problem": 22, "user": "4e58c019535d8a8b8723a297"}, {"code": "#(loop [v1 % total 0]\n    (if (empty? v1)\n      total\n      (recur (rest v1) (inc total))))", "problem": 22, "user": "4ea85846535d7eef308072f9"}, {"code": "#(if (empty? %2) %1 (recur (inc %1) (rest %2))) 0", "problem": 22, "user": "4ea97145535d7eef30807304"}, {"code": "(fn\n  [x]\n  (first (reverse (interleave x (range 1 12)))))", "problem": 22, "user": "4ea95e56535d7eef30807302"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4ea76541535d7eef308072eb"}, {"code": "(fn counter [lst]\n  (loop [l      lst\n         acc    1]\n    (if (empty? (rest l)) acc\n        (recur (rest l) (+ 1 acc)))))", "problem": 22, "user": "4eaa47bc535d7eef30807309"}, {"code": "#(reduce + (map (fn [_] 1) %))", "problem": 22, "user": "4eaa5c51535d7eef3080730a"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4eaa96e1535d7eef3080730d"}, {"code": "(fn [coll]\n   (loop [c coll acc 0]\n     (if (nil? (first c))\n       acc\n       (recur (rest c) (+ 1 acc)))))", "problem": 22, "user": "4ea03a3a535d7eef308072a0"}, {"code": "#(apply + (map (fn [x] 1) %))", "problem": 22, "user": "4eab1a08535d7eef30807311"}, {"code": "#((fn c [x y] (if (= (first x) nil) y (c (rest x) (+ y 1)))) % 0)", "problem": 22, "user": "4eab350a535d7eef30807314"}, {"code": "(fn [x] \n  (apply + \n         (map (constantly 1) x)))", "problem": 22, "user": "4ea0c105535d7eef308072ac"}, {"code": "#(reduce + (vals (frequencies %)))", "problem": 22, "user": "4eab4a88535d7eef30807315"}, {"code": "(fn my-count [coll]\n  (if (first coll)\n    (inc (my-count (rest coll)))\n    0))", "problem": 22, "user": "4eab612d535d7eef30807316"}, {"code": "(fn mycount [x] (reduce + (map #(if (nil? %) 0 1) x)))", "problem": 22, "user": "4ea9b80c535d7eef30807306"}, {"code": "reduce (fn [a b] (+ a 1)) 0", "problem": 22, "user": "4e243bcb535d04ed9115e825"}, {"code": "(fn [lst] (let [cnt (fn [x, n] (if (= () x) n (recur (rest x) (+ 1 n))))] (cnt lst 0)))", "problem": 22, "user": "4e0bb9fb535d04ed9115e7b2"}, {"code": "#(.size (vec %))", "problem": 22, "user": "4ead2841535d7eef3080731e"}, {"code": "#(reduce (fn [n elt] (inc n)) 0 %)", "problem": 22, "user": "4ead6418535d7eef3080731f"}, {"code": "reduce (fn [l r] (+ l 1)) 0", "problem": 22, "user": "4eac5bc1535d7eef3080731b"}, {"code": "(fn [coll]\n  (loop [coll coll, n 0]\n    (if coll\n      (recur (next coll) (inc n))\n      n)))", "problem": 22, "user": "4eae5fe4535d7eef30807325"}, {"code": "(fn [l] (apply + (map #(if % 1) l)))", "problem": 22, "user": "4eaa7f8d535d7eef3080730c"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "4eaec592535d7eef30807327"}, {"code": "(fn mycount [x]\n  (loop [x x acc 0] (if (nil? x) acc (recur (next x) (+ acc 1)))))", "problem": 22, "user": "4eaed3a7535d7eef30807328"}, {"code": "(fn cou [l] (if (next l) (+ 1 (cou (rest l))) 1))", "problem": 22, "user": "4eaede1f535d7eef30807329"}, {"code": "reduce (fn [x y] (inc x)) 0", "problem": 22, "user": "4eaf08ce535d7eef3080732d"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4eaf0d91535d7eef3080732e"}, {"code": "#(last (map-indexed (fn [i _](+ 1 i)) %))", "problem": 22, "user": "4eb01df4535d7eef30807337"}, {"code": "#(reduce(fn[r i](+ r 1))0%)", "problem": 22, "user": "4eb07be3535d7eef3080733b"}, {"code": "reduce (fn [x y] (+ 1 x)) 0", "problem": 22, "user": "4eb0a757535d7eef3080733d"}, {"code": "(fn [lat]\n  (reduce (fn [x y] (+ x 1)) 0 lat))", "problem": 22, "user": "4ea68edb535d7eef308072e6"}, {"code": "(fn [s]\n(loop [x s y 0] (if (first x) (recur (next x) (+ 1 y)) y)))", "problem": 22, "user": "4eb0afed535d7eef3080733e"}, {"code": "(fn [x] (last (interleave x (iterate inc 1))))", "problem": 22, "user": "4eb1a4db535d7eef30807342"}, {"code": "#(loop [data % n 0]\n  (if (first data)\n    (recur (rest data) (inc n))\n    n))", "problem": 22, "user": "4eb1dd39535d7eef30807345"}, {"code": "(fn [s] \n  (loop [x s n 1]\n    (if (next x)\n(recur (next x) (inc n))\nn)))", "problem": 22, "user": "4eb27fad535d7eef3080734a"}, {"code": "(fn x\n  ([s]\n   (if (first s)\n       (x (rest s) 1)\n       0))\n  ([s c]\n   (if (first s)\n       (recur (rest s) (+ 1 c))\n       c)))", "problem": 22, "user": "4eb2d0ae535d7eef3080734e"}, {"code": "#(reduce + (map (fn [_] 1) %))", "problem": 22, "user": "4eb2e6ca535d7eef3080734f"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4ea950b8535d7eef30807301"}, {"code": "reduce (fn [x y] (inc x)) 0", "problem": 22, "user": "4eb2eae5535d7eef30807351"}, {"code": "(fn [x] (reduce (fn [acc n] (inc acc)) 0 x))", "problem": 22, "user": "4eb25069535d7eef30807348"}, {"code": "(fn cunt [x]\r\n  (if (empty? x)\r\n    0\r\n    (+ 1 (cunt (rest x)))))", "problem": 22, "user": "4e8dd6cb535d65386fec213b"}, {"code": "(fn [x] \n  (loop [coll x cnt 0]\n    (if (empty? coll)\n      cnt\n      (recur (next coll) (inc cnt))\n)\n  )\n)", "problem": 22, "user": "4eb2c45e535d7eef3080734d"}, {"code": "(fn tam [v] (if (empty? v)\r\n               0\r\n               (+ (tam (rest v)) 1)\r\n             ))", "problem": 22, "user": "4e932523535dbda64a6f6b09"}, {"code": "#(alength (to-array %))", "problem": 22, "user": "4eb3fcba535d7eef30807359"}, {"code": "reduce (fn [x _] (+ x 1)) 0", "problem": 22, "user": "4eb41884535d7eef3080735d"}, {"code": "#(loop [seq %1 cnt 0] \n  (if (empty? seq) cnt (recur (rest seq) (+ 1 cnt))))", "problem": 22, "user": "4eabb245535d7eef30807319"}, {"code": "(fn count2 [s] \n  (if (empty? s) \n     0\n    (+ 1 (count2 (butlast s)))\n  )\n)", "problem": 22, "user": "4eb593e6535d7eef30807368"}, {"code": "(fn [sq] (loop [a 0 s sq] (if (seq s) (recur (inc a) (rest s)) a)))", "problem": 22, "user": "4eb5750a535d7eef30807366"}, {"code": "#(.size (vec %))", "problem": 22, "user": "4eb5c8d7535d7eef3080736a"}, {"code": "#(.size (seq %))", "problem": 22, "user": "4eb59464535d7eef30807369"}, {"code": "(fn foo [list]\n  (if (empty? list)\n    0\n    (+ 1 (foo (rest list)))))", "problem": 22, "user": "4eb66737535d7eef3080736b"}, {"code": "(fn [s]\r\n  (loop [s s, n 0] \r\n    (if (= [] s)\r\n      n\r\n    (recur (rest s) (inc n)))))", "problem": 22, "user": "4eb6d3ab535d7eef30807370"}, {"code": "#(apply + (map (fn [x] 1) %))", "problem": 22, "user": "4eb2a89d535d7eef3080734c"}, {"code": "(fn [n s] (if (empty? s) n (recur (inc n) (rest s)))) 0", "problem": 22, "user": "4eb70649535d7eef30807373"}, {"code": "(fn [seq]\n  (letfn [(cnt [seq acc]\n            (if (= seq '()) acc (cnt (rest seq) (+ acc 1))))]\n    (cnt seq 0)))", "problem": 22, "user": "4eb404ba535d7eef3080735a"}, {"code": "(fn cnt [s] (reduce + (map (fn one [i] (* 1 1)) s)))", "problem": 22, "user": "4eb80264535d7eef3080737a"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4eb80ce6535d7eef3080737d"}, {"code": "#(loop [x 0 y %] (if (empty? y) x (recur (inc x) (rest y))))", "problem": 22, "user": "4e982877535dbda64a6f6b5b"}, {"code": "(fn teste [x]\n  (if (empty? x) 0\n\t\t(+ 1 (teste (rest x )))\n\t)\n)", "problem": 22, "user": "4ea3f035535d7eef308072ca"}, {"code": "(fn fodase [x]\n  (if (empty? x) 0\n  (+ 1 (fodase (rest x)))\n  )\n)", "problem": 22, "user": "4e8b742a535d65386fec2123"}, {"code": "#(loop [sum 0, s %]\r\n       (if-not (empty? s)\r\n         (recur (inc sum) (drop-last s))\r\n         sum))", "problem": 22, "user": "4ea683e4535d7eef308072e5"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4ea55757535d7eef308072d3"}, {"code": "(fn [x]\r\n               (loop [i 0 x x]\r\n                 (if(empty? x)\r\n  \t\ti\r\n                 (recur(inc i) (rest x))))\r\n                )", "problem": 22, "user": "4eb2fe60535d7eef30807354"}, {"code": "(fn [z]\n  (loop [x z contador 0]\n    (if (empty? x)\n      contador\n      (recur (rest x) (inc contador))\n    )\n  )\n)", "problem": 22, "user": "4eb80353535d7eef3080737c"}, {"code": "(fn f[w] (if (empty? w) 0 (+ (f (rest w)) 1)))", "problem": 22, "user": "4eb81b66535d7eef3080737f"}, {"code": "(fn[x](loop[cnt 0 v x](\n                      if-not(nil? v)\n                      (recur(inc cnt)(next v))cnt)))", "problem": 22, "user": "4eb2f89a535d7eef30807353"}, {"code": "reduce #(or(inc%)%2)0", "problem": 22, "user": "4e931ebb535dbda64a6f6b08"}, {"code": "(fn f [x] (if(empty? x) 0 (+ (f (rest x)) 1)))", "problem": 22, "user": "4e9dd718535dbda64a6f6b8c"}, {"code": "(fn [coll]\n  (loop [cnt 0 cl coll]\n    (if (seq cl) (recur (inc cnt) (rest cl)) cnt)))", "problem": 22, "user": "4e9519b4535dbda64a6f6b2d"}, {"code": "#(loop [coll %1 ct 0]\n    (if (first coll)\n        (recur (next coll) (inc ct))\n        ct))", "problem": 22, "user": "4eb955da535dfed6da9c6d50"}, {"code": "(fn mycount [x]\n  (if (empty? x)\n   0\n   (+ 1 (mycount (rest x))\n   )\n  )\n)", "problem": 22, "user": "4e94aa18535dbda64a6f6b1e"}, {"code": "(fn a [x]\n  (if (empty? x)\n  0\n  (+ 1 (a (rest x)))\n)\n)", "problem": 22, "user": "4e94a9e7535dbda64a6f6b1d"}, {"code": "#(.size (vec %))", "problem": 22, "user": "4eb97234535dfed6da9c6d53"}, {"code": "(fn [s] (reduce + (map (fn [_] 1) s)))", "problem": 22, "user": "4eb97b2e535dfed6da9c6d54"}, {"code": "(fn size [v]\r\n   (if (empty? v)\r\n     0\r\n     (inc (size (rest v)))\r\n   )\r\n)", "problem": 22, "user": "4eb951f5535dfed6da9c6d4f"}, {"code": "(fn [lst] \n  (reduce + (map (fn [x] 1) lst)))", "problem": 22, "user": "4eb92051535dfed6da9c6d4c"}, {"code": "(fn [n seq] (cond (empty? seq) n :else (recur (inc n) (rest seq)))) 0", "problem": 22, "user": "4eb83593535dd6025b394d1b"}, {"code": "(fn ha [x]\n  (if (empty? x)\n    0\n    (+ 1 (ha(rest x)))\n  )\n)", "problem": 22, "user": "4e94b4f7535dbda64a6f6b27"}, {"code": "reduce (fn [n _] (inc n)) 0", "problem": 22, "user": "4eb9ce75535dfed6da9c6d5e"}, {"code": "(fn [coll]\n  (reduce (fn [x _] (inc x)) 0 coll)\n  )", "problem": 22, "user": "4eb9c7ba535dfed6da9c6d5b"}, {"code": "(fn [collec]\n  (loop [coll collec counter 0]\n    (if (empty? coll)\n      (+ 0 counter)\n      (recur (rest coll) (+ 1 counter))\n    )\n  )\n)", "problem": 22, "user": "4e94a900535dbda64a6f6b18"}, {"code": "(fn conta [x]\n  (if (empty? x) 0 (+ 1 (conta (rest x) ) ) ) \n)", "problem": 22, "user": "4eb9b1aa535dfed6da9c6d5a"}, {"code": "(fn teste[x]\n  (if(empty? x) 0\n      (+ 1 (teste (rest x)))))", "problem": 22, "user": "4eb82088535d7eef30807380"}, {"code": "(fn Cont [list]\n  (if (empty? list) 0\n   (+ 1 (Cont ( rest list)))      \n  ))", "problem": 22, "user": "4e9dd9ab535dbda64a6f6b8d"}, {"code": "reduce (fn [c v] (+ 1 c)) 0", "problem": 22, "user": "4eb9c82d535dfed6da9c6d5c"}, {"code": "(fn comprimento [x]\n  (vec x)\n  (if (empty? x)\n  0\n\t(inc (comprimento (rest x) ))\n  )  \n)", "problem": 22, "user": "4eb7ff08535d7eef30807379"}, {"code": "(fn comprimento [x]\n\n (if (empty? x)\n\n    0\n\n    (inc (comprimento (rest x) ))\n\n )  \n\n)", "problem": 22, "user": "4e94accb535dbda64a6f6b20"}, {"code": "(fn comprimento [x]\r\n  (vec x)\r\n  (if (empty? x)\r\n  0\r\n  (inc (comprimento (rest x) ))\r\n  )  \r\n)", "problem": 22, "user": "4e8ef93e535d65386fec2144"}, {"code": "(fn cont[v]\n  (if (empty? v)\n    0\n    \n    (inc(cont(rest v)))\n  )\n)", "problem": 22, "user": "4eb99a40535dfed6da9c6d56"}, {"code": "(fn conta [x]\n  (loop [lista x acc 0]\n  (if (empty? lista) \n      acc\n      (recur (rest lista) (+ acc 1))  \n  )\n  )   \n)", "problem": 22, "user": "4e94aab8535dbda64a6f6b1f"}, {"code": "(fn [x] (apply + (map (fn[y] 1) x)))", "problem": 22, "user": "4eba6b5e535dfed6da9c6d64"}, {"code": "#(reduce (fn [s v] (inc s)) 0 %)", "problem": 22, "user": "4eb80331535d7eef3080737b"}, {"code": "#(reduce (fn [s t] (inc s))0 %)", "problem": 22, "user": "4ea5b8ae535d7eef308072d8"}, {"code": "reduce (fn [x y] (+ x 1)) 0", "problem": 22, "user": "4ebaa7d8535dfed6da9c6d68"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4eb698ad535d7eef3080736d"}, {"code": "(fn comprimento [x]\n  (vec x)\n  (if (empty? x)\n  0\n(inc (comprimento (rest x) ))\n  )  \n)", "problem": 22, "user": "4e8e21fc535d65386fec2141"}, {"code": "reduce (fn [r item] (inc r)) 0", "problem": 22, "user": "4ea84ff8535d7eef308072f7"}, {"code": "reduce (fn [x _] (+ 1 x)) 0", "problem": 22, "user": "4ebb78a2535dfed6da9c6d70"}, {"code": "reduce #(do %2 (inc %)) 0", "problem": 22, "user": "4eb30868535d7eef30807355"}, {"code": "(fn [coll]\n    (loop \n      [x coll\n       i 0]\n       (if (empty? x)\n         i\n         (recur (rest x) (inc i)))))", "problem": 22, "user": "4ebbf772535dfed6da9c6d76"}, {"code": "reduce  (fn [x _] (+ 1 x)) 0", "problem": 22, "user": "4ebc05a2535dfed6da9c6d7a"}, {"code": "#(.size (vec %))", "problem": 22, "user": "4ebbc1f6535dfed6da9c6d72"}, {"code": "(fn [s]\n  (reduce + (map (constantly 1) s)))", "problem": 22, "user": "4ebc08a8535dfed6da9c6d7c"}, {"code": "(fn [s]\n  (loop [s s n 0]\n    (if (seq s)\n      (recur (rest s) (inc n))\n      n)))", "problem": 22, "user": "4dbdc9da535d020aff1edf4c"}, {"code": "#(loop [seq % x 1]\n  (if (nil? (next seq))\n    x\n    (recur (rest seq)(inc x))))", "problem": 22, "user": "4ebc0f84535dfed6da9c6d7e"}, {"code": "(fn [seq] (reduce (fn [a b] (+ 1 a)) 0 seq))", "problem": 22, "user": "4eb504d8535d7eef30807363"}, {"code": "(fn [l] (reduce (fn [c e] (inc c)) 0 l))", "problem": 22, "user": "4ebbffbd535dfed6da9c6d79"}, {"code": "(fn [input] (reduce (fn [acc coll] (+ acc 1)) 0 input))", "problem": 22, "user": "4ea11921535d7eef308072af"}, {"code": "#(reduce + (map (fn [x] 1) %1))", "problem": 22, "user": "4ebb20c0535dfed6da9c6d6f"}, {"code": "(fn [elements]\n  (reduce + (map (fn [x] 1) elements))\n)", "problem": 22, "user": "4e8e5cc8535d65386fec2142"}, {"code": "#(loop [seqx % x 0]\n  (if (empty? seqx)\n   x\n   (recur (rest seqx)(inc x))))", "problem": 22, "user": "4ebd4448535dfed6da9c6d8f"}, {"code": "(fn countz [seq] (if (empty? seq) 0 (+ 1 (countz (rest seq)))))", "problem": 22, "user": "4ebe8d65535dfed6da9c6d96"}, {"code": "reduce (fn [a b] (+ a 1)) 0", "problem": 22, "user": "4ebede00535dfed6da9c6d9a"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4ebeaf0b535dfed6da9c6d98"}, {"code": "(fn [n seq] (if (= (take n seq) (take (inc n) seq) ) n (recur (inc n) seq) )) 1", "problem": 22, "user": "4ebc7b39535dfed6da9c6d85"}, {"code": "(fn [lst]\n  (loop [lst2 lst n 0]\n    (if (empty? lst2) n (recur (rest lst2) (inc n)))))", "problem": 22, "user": "4ebf11bc535dfed6da9c6d9c"}, {"code": "#(\n  (fn dropper [x y]\n   (if (nil? (second x))\n     y\n     (dropper (rest x) (+ y 1))))\n % 1)", "problem": 22, "user": "4ebe066a535dfed6da9c6d91"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4ebbc2dd535dfed6da9c6d73"}, {"code": "(fn [x]\n  (loop [l x\n         c 0]\n    (if (nil? (first l))\n        c\n        (recur (rest l) (inc c)))))", "problem": 22, "user": "4dadb891c9a9d6ed3699dc57"}, {"code": "(fn [coll] (loop [i 0 coll (seq coll)]\r\n(if coll (recur (inc i) (next coll)) i)))", "problem": 22, "user": "4ebf45c3535dfed6da9c6d9d"}, {"code": "(fn [s] \n  (loop [s s i 0] (if (seq s) (recur (rest s) (inc i)) i)))", "problem": 22, "user": "4ebe766d535dfed6da9c6d94"}, {"code": "reduce (fn [sum _] (+ sum 1)) 0", "problem": 22, "user": "4ec07699535dfed6da9c6da2"}, {"code": "reduce (fn[x y](+ x 1)) 0", "problem": 22, "user": "4dbf7a31535d020aff1edf75"}, {"code": "(fn [xs] (reduce (fn [x _] (inc x)) 0 xs))", "problem": 22, "user": "4ebc0717535dfed6da9c6d7b"}, {"code": "#(reduce (fn [y,z] (inc y)) 0 %1)", "problem": 22, "user": "4ec0c7ba535dfed6da9c6da4"}, {"code": "(partial (fn [cnt coll] \n  (if (not (seq coll))\n    cnt\n    (recur (+ cnt 1) (next coll)))) 0)", "problem": 22, "user": "4ec12577535dfed6da9c6da8"}, {"code": "(fn [items-list]\n  (reduce (fn [new-item item-count] (+ item-count new-item))\n    0\n    (map (fn [x] (when (not (nil? x)) 1)) items-list)))", "problem": 22, "user": "4ec12516535dfed6da9c6da7"}, {"code": "#(.length (vec %))", "problem": 22, "user": "4eb44d78535d7eef30807360"}, {"code": "(fn [xs] (reduce (fn [c x] (inc c)) 0 xs))", "problem": 22, "user": "4ec132a0535dfed6da9c6da9"}, {"code": "#(apply +(map (fn[x] 1) %))", "problem": 22, "user": "4eba93c7535dfed6da9c6d65"}, {"code": "(fn my-count [c] \n    (\n     (fn my-count-r [v x]\n        (if (= [] v)    \n           x\n           (my-count-r (rest v) (+ x 1))\n        )\n     )\n     (into [] c)\n     0\n    )\n  )", "problem": 22, "user": "4ec17677535dfed6da9c6dad"}, {"code": "(fn [args] (reduce (fn [val current] (+ val 1)) 0 args))", "problem": 22, "user": "4ebc64db535dfed6da9c6d82"}, {"code": "(fn [seq] \n  (reduce (fn [red it] (+ red 1)) 0 seq))", "problem": 22, "user": "4ec21058535dfed6da9c6dba"}, {"code": "reduce (fn [c _] (inc c)) 0", "problem": 22, "user": "4ec16c21535dfed6da9c6dac"}, {"code": "(fn [x]\n               (loop [s x counter 0]\n                 (if (empty? s)\n                   counter\n                   (recur (rest s) (+ 1 counter)))))", "problem": 22, "user": "4ebef65e535dfed6da9c6d9b"}, {"code": "(fn [coll] (loop [coll coll cnt 0] (if (seq coll) (recur (rest coll) (inc cnt)) cnt)))", "problem": 22, "user": "4ec2f192535dcc7ae8597d4c"}, {"code": "(fn [seq]\n    (loop [i 0\n           s seq]\n      (if (empty? s)\n        i\n        (recur (inc i) (rest s))))\n)", "problem": 22, "user": "4ea3c875535d7eef308072c9"}, {"code": "#(reduce (fn [total _] (inc total)) 0 %)", "problem": 22, "user": "4ec2fe3f535dcc7ae8597d4f"}, {"code": "(fn mycount \n  [coll]\n    (loop [n 0 col coll]\n      (if (= col '())\n          n\n          (recur (inc n) (rest col))\n      )\n    )\n  )", "problem": 22, "user": "4ec2f210535dcc7ae8597d4e"}, {"code": "(fn [col]\n   (loop [c col cnt 0]\n     (if (seq c)\n       (recur (next c) (inc cnt))\n       cnt)))", "problem": 22, "user": "4ec347af535dcc7ae8597d53"}, {"code": "(fn [coll] (apply + (map (fn [x] 1) coll)))", "problem": 22, "user": "4ec2f1d9535dcc7ae8597d4d"}, {"code": "(fn [l]\n  (reduce \n    (fn [c v]\n      (+ 1 c)) 0 l))", "problem": 22, "user": "4ec34578535dcc7ae8597d51"}, {"code": "#(loop [n 0 l %] (if (empty? l) n (recur (inc n) (rest l))))", "problem": 22, "user": "4ec363e7535dcc7ae8597d55"}, {"code": "(fn [col]\n  (reduce + (map (fn [x] 1) col)))", "problem": 22, "user": "4ebbff41535dfed6da9c6d78"}, {"code": "#(inc (last (map-indexed (fn [i _] i) %)))", "problem": 22, "user": "4ec34cd1535dcc7ae8597d54"}, {"code": "(fn [init-ln]\n  (loop [ln init-ln n 0]\n    (if (empty? ln)\n        n\n        (recur (rest ln) (inc n)))))", "problem": 22, "user": "4eb04346535d7eef3080733a"}, {"code": "#(loop [c_vec %1 acc 0]\r\n     (if (not (first c_vec))\r\n          acc\r\n         (recur (rest c_vec) (inc acc))))", "problem": 22, "user": "4eb171d7535d7eef30807340"}, {"code": "(fn [aList]\n  (loop [myList aList n 0]\n    (if (= myList []) \n      n\n      (recur (rest myList) (inc n)))))", "problem": 22, "user": "4ec3f4a7535dcc7ae8597d5e"}, {"code": "(fn [ coll ]\n  (loop [ x 0 c coll]\n    (if (nil? (first c)) x\n        (recur (inc x) (rest c)))))", "problem": 22, "user": "4ec28d86535dfed6da9c6dbc"}, {"code": "(fn [x]\n  (reduce + (map (fn [x] 1) x)))", "problem": 22, "user": "4ec42c11535dcc7ae8597d5f"}, {"code": "(fn [seq]\n  (loop [n 0\n         r seq]\n    (if (empty? r)\n      n\n      (recur (inc n) (rest r)))))", "problem": 22, "user": "4ec46e77535dcc7ae8597d62"}, {"code": "#(reduce (fn [n _] (inc n)) 0 %)", "problem": 22, "user": "4ec46a2d535dcc7ae8597d61"}, {"code": "(partial reduce (fn [a e] (inc a)) 0)", "problem": 22, "user": "4ec4ac86535dcc7ae8597d64"}, {"code": "(fn [coll]\n  (loop [c 0 coll coll]                                                                                             \n    (if (first coll)                                                                                                  \n        (recur (inc c) (rest coll))                                                                              \n        c)))", "problem": 22, "user": "4eb51942535d7eef30807365"}, {"code": "(fn cnt ([col] (cnt col 0)) ([col c] (if (= () col) c (cnt (rest col) (+ c 1)))))", "problem": 22, "user": "4ec51590535d6d7199dd3683"}, {"code": "(fn [xs]\n  (loop [ys xs size 0]\n    (if (seq ys)\n      (recur (rest ys) (inc size))\n      size)))", "problem": 22, "user": "4ec5615a535d6d7199dd369b"}, {"code": "(fn length [xs] \n  (cond (empty? xs) 0\n        :else (+ 1 (length (rest xs)))))", "problem": 22, "user": "4ec53eaf535d6d7199dd3688"}, {"code": "(fn mc [[x & xs]]\r\n    (if xs (+ 1 (mc xs)) 1))", "problem": 22, "user": "4e7ddcc2535db169f9c796f0"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4ec53cef535d6d7199dd3686"}, {"code": "#(reduce (fn [t _] (inc t)) 0 %)", "problem": 22, "user": "4ec58969535d6d7199dd36a5"}, {"code": "(fn [lst]\n  ((fn [lst acc]\n     (if (empty? lst) \n       acc (recur (rest lst) (inc acc)))) lst 0))", "problem": 22, "user": "4ec59ce4535d6d7199dd36ab"}, {"code": "(fn [x] (apply + (map (fn [y] 1) x)))", "problem": 22, "user": "4ec56b5b535d6d7199dd369f"}, {"code": "(fn length[seq] (if (empty? seq) 0 (+ 1 (length (rest seq)))))", "problem": 22, "user": "4ec1b090535dfed6da9c6db5"}, {"code": "(fn myCount [aseq]\n  (if (empty? aseq)\n    0\n    (+ 1 (myCount (rest aseq)))))", "problem": 22, "user": "4ec59b78535d6d7199dd36aa"}, {"code": "(fn [l] (reduce + (map (fn [x] 1) l)))", "problem": 22, "user": "4ec5569f535d6d7199dd3695"}, {"code": "reduce (fn [c _] (+ c 1)) 0", "problem": 22, "user": "4ec49231535dcc7ae8597d63"}, {"code": "#(loop [lst %, acc 0]\n  (if (empty? lst) \n    acc\n    (recur (rest lst) (inc acc))))", "problem": 22, "user": "4ec5c81f535d6d7199dd36b6"}, {"code": "(fn ln [l]\n  (if (empty? l)\n    0\n    (+ 1 (ln (rest l)))))", "problem": 22, "user": "4ec5d40d535d6d7199dd36b9"}, {"code": "(fn [col0] \n  (loop [col col0 size 0]\n    (if (empty? col)\n         size\n         (recur (rest col) (+ size 1))\n)))", "problem": 22, "user": "4ec5bec6535d6d7199dd36b3"}, {"code": "(partial reduce\n        #(do %2 (+ %1 1)) 0)", "problem": 22, "user": "4ec6157b535d6d7199dd36c2"}, {"code": "reduce (fn [c _] (inc c)) 0", "problem": 22, "user": "4ec5754b535d6d7199dd36a2"}, {"code": "(fn [x] \n  (loop [x x cnt 0]\n    (if (seq x)\n      (recur (rest x) (+ cnt 1))\n      cnt)))", "problem": 22, "user": "4ec63613535d6d7199dd36c6"}, {"code": "(fn mg-cnt\n  ([xs] (mg-cnt xs 0))\n  ([xs acc] (if (seq xs) (mg-cnt (drop 1 xs) (+ 1 acc)) acc)))", "problem": 22, "user": "4ebcbea5535dfed6da9c6d8b"}, {"code": "#(reduce (fn [x _] (inc x)) 0 %)", "problem": 22, "user": "4ec6297b535d6d7199dd36c4"}, {"code": "(fn [coll]\n  ;; consume the list until empty\n  ;; while keeping a counter of each\n  ;; item consumed\n  (loop [lloc coll nn 0]\n    (if (empty? lloc)\n      nn\n      (recur (rest lloc) (inc nn)))))", "problem": 22, "user": "4ec65a6e535d6d7199dd36cb"}, {"code": "#(loop [s % i 0] (if (= s ()) i \n  (recur  (rest s) (inc i))))", "problem": 22, "user": "4ea4e98a535d7eef308072ce"}, {"code": "#((fn [x y] \n          (if (empty? x)\n            y\n            (recur (rest x) (+ 1 y)))) % 0)", "problem": 22, "user": "4ec6688d535d6d7199dd36cc"}, {"code": "#(loop [s %\n  acc 0]\n  (if (= s ())\nacc\n  (recur (rest s) (inc acc))))", "problem": 22, "user": "4ec3c4a0535dcc7ae8597d5a"}, {"code": "#(loop [coll % i 0]\r\n  (if (empty? coll)\r\n    i\r\n    (recur (rest coll) (inc i))))", "problem": 22, "user": "4ec5fb83535d6d7199dd36bd"}, {"code": "(fn [sequence]\n(loop [s sequence cnt 0]\n  (if (empty? s) cnt\n    (recur (rest s) (inc cnt)))))", "problem": 22, "user": "4eae2f9e535d7eef30807324"}, {"code": "(fn [lst] (loop [lst lst acc 0] (if (empty? lst) acc (recur (rest lst) (inc acc)))))", "problem": 22, "user": "4ec6c878535d6d7199dd36d5"}, {"code": "#(reduce (fn [x y] (+ x 1)) 0 %)", "problem": 22, "user": "4ec684ad535d6d7199dd36d0"}, {"code": "(fn [a] (reduce (fn [q r] (+ q 1)) 0 a))", "problem": 22, "user": "4ec6cc0e535d6d7199dd36d6"}, {"code": "(fn [coll]  \n  (loop [collection coll acc 0]\n    (if (empty? collection)\n        acc  \n        (recur (rest collection) (+ acc 1)))))", "problem": 22, "user": "4ec55ab5535d6d7199dd3697"}, {"code": "#(loop [coll %, acc 0] (if (empty? coll) acc (recur (rest coll) (+ 1 acc))))", "problem": 22, "user": "4ec6f4ee535d6d7199dd36dc"}, {"code": "(fn ct [x]\n  (cond \n    (= x '()) 0\n    :else (+ 1 (ct (rest x)))))", "problem": 22, "user": "4ec5cdb0535d6d7199dd36b8"}, {"code": "#(loop [col % x 0]\n  (if (empty? col)\n     x\n     (recur (pop (vec col)) (inc x))))", "problem": 22, "user": "4ec53f8c535d6d7199dd368b"}, {"code": "(fn [coll] \n  (loop [i 0 xs coll]\n    (if (first xs)\n      (recur (inc i) (next xs))\n      i)))", "problem": 22, "user": "4e0d5a5a535d04ed9115e7b5"}, {"code": "(fn [seq] (reduce + (map (constantly 1) seq)))", "problem": 22, "user": "4ec670bc535d6d7199dd36cf"}, {"code": "(fn[lst] (reduce (fn[acc,e] (inc acc)) 0 lst))", "problem": 22, "user": "4ec75829535d6d7199dd36e1"}, {"code": "(fn spanky\n  ([seq] (spanky seq 0))\n  ([seq n]\n    (cond\n      (empty? seq) n\n      :else (recur (rest seq) (inc n)))))", "problem": 22, "user": "4ec7def0535d6d7199dd36e9"}, {"code": "(fn func [s]\n  (reduce (fn [a s] (+ a 1)) 0 s))", "problem": 22, "user": "4ec812d9535d6d7199dd36f0"}, {"code": "(fn [seeq]\n  (loop [sum 0 qees seeq]\n\t\t(if (seq qees)\n\t\t\t(recur (inc sum) (rest qees)) sum)))", "problem": 22, "user": "4ec72817535d6d7199dd36de"}, {"code": "#(reduce (fn [a _] (inc a)) 0 %)", "problem": 22, "user": "4ec78bde535d6d7199dd36e2"}, {"code": "(fn [sequence]\n  (loop [length 0 remaining-sequence sequence]\n    (if (empty? remaining-sequence)\n      length\n      (recur (inc length) (drop 1 remaining-sequence)))))", "problem": 22, "user": "4ec70f26535d6d7199dd36dd"}, {"code": "#(loop [i 0 lfrag %1] \n    (if (= () lfrag)\n        i\n        (recur (inc i) (rest lfrag))))", "problem": 22, "user": "4ec5b713535d6d7199dd36b2"}, {"code": "(fn [col] (reduce + (map (fn [x] 1) col)))", "problem": 22, "user": "4ec79f99535d6d7199dd36e4"}, {"code": "(partial reduce (fn [m n] (inc m)) 0)", "problem": 22, "user": "4ec74de3535d6d7199dd36df"}, {"code": "reduce(fn[a _](+ 1 a))0", "problem": 22, "user": "4ec6cd4f535d6d7199dd36d7"}, {"code": "(fn getlen [x]\n  (alength (to-array x)))", "problem": 22, "user": "4ec817a6535d6d7199dd36f1"}, {"code": "(fn my-count [x]\n  (apply + (map #(first %) (map vector (repeat 1) x))))", "problem": 22, "user": "4e9937f9535dbda64a6f6b63"}, {"code": "(fn [x]\r\n ((fn [x i]\r\n   (let [r (rest x)\r\n         i (+ i 1)]\r\n    (if (= [] r)\r\n     i\r\n     (recur r i)))) x 0))", "problem": 22, "user": "4ec953ba535d6d7199dd36fd"}, {"code": "(fn _ [x]\n(loop [c 0 y x] \n  (if (first y) \n    (recur (inc c) (rest y))\n    c\n)))", "problem": 22, "user": "4ec8736f535d6d7199dd36f3"}, {"code": "(fn [s](loop [l s c 0](if (empty? l)c(recur (rest l) (+ c 1)))))", "problem": 22, "user": "4ec92a04535d6d7199dd36fa"}, {"code": "reduce (fn [x y] (+ x 1)) 0", "problem": 22, "user": "4ec8dc17535d6d7199dd36f7"}, {"code": "#(apply + (map (fn [x] 1) %))", "problem": 22, "user": "4ec65213535d6d7199dd36c8"}, {"code": "(fn [coll]\n  (reduce (fn [acc v] (+ 1 acc)) 0 coll))", "problem": 22, "user": "4ecaa5da535d6d7199dd3707"}, {"code": "#(reduce (fn [a i] (+ 1 a)) 0 %)", "problem": 22, "user": "4ecab3b7535d6d7199dd3709"}, {"code": "(fn [x]\n  (loop [lista x\n         dlugosc 0]\n    (if (not (first lista))\n      dlugosc\n      (recur (rest lista) (+ 1 dlugosc)))))", "problem": 22, "user": "4ecabce3535d6d7199dd370a"}, {"code": "#(apply + (map (fn [x] 1) %))", "problem": 22, "user": "4ecaaa25535d6d7199dd3708"}, {"code": "(fn [x] (letfn [(c [x] (if (empty? x) 0 (+ 1 (c (rest x)))))] (c x)))", "problem": 22, "user": "4ec92a6e535d6d7199dd36fb"}, {"code": "(fn mycount [l] \n  (if (= l '())\n      0\n      (+ 1 (mycount (rest l)))))", "problem": 22, "user": "4ecaf637535d6d7199dd370c"}, {"code": "#(apply + (map (fn [val] 1) %))", "problem": 22, "user": "4ecb1641535d6d7199dd370e"}, {"code": "(fn bob ([s] (bob s 0)) \r\n    ([s i] (if (= s ()) \r\n             i \r\n             (recur (rest s) \r\n                    (inc i)))))", "problem": 22, "user": "4ecac3ab535d6d7199dd370b"}, {"code": "(fn c \n  ([s] (c s 0))\n  ([s n] (if (nil? s) n (c (next s) (+ n 1)))))", "problem": 22, "user": "4ecbb249535df97575fdabdf"}, {"code": "#(reduce (fn [x y] (+ x 1)) 0 %)", "problem": 22, "user": "4ecbafbf535df97575fdabde"}, {"code": "(fn not-count\r\n  ([s n]\r\n  (if (not-empty s)\r\n    (not-count (rest s) (+ 1 n))\r\n    n))\r\n  ([s]\r\n  (if (not-empty s)\r\n    (not-count (rest s) 1)\r\n    0)))", "problem": 22, "user": "4ecb03b4535d6d7199dd370d"}, {"code": "(fn [coll]\n  (loop [s coll cnt 0]\n    (if (empty? s) cnt\n      (recur (rest s) (+ 1 cnt)))))", "problem": 22, "user": "4e25176e535d04ed9115e829"}, {"code": "(fn mycount [x]\n  (if (= x '())\n    0\n    (+ 1 (mycount (rest x))))\n  )", "problem": 22, "user": "4ecc147b535d23f0362276f7"}, {"code": "#(reduce + (map (fn [x] (do 1)) %))", "problem": 22, "user": "4ec6357a535d6d7199dd36c5"}, {"code": "#(reduce (fn [mem _] (+ mem 1)) 0 %)", "problem": 22, "user": "4e7e443e535db169f9c7970b"}, {"code": "(fn mycount [seq]\n  (if (empty? seq)\n      0\n      (+ 1 (mycount (rest seq)))\n))", "problem": 22, "user": "4ec6e51a535d6d7199dd36db"}, {"code": "(fn asdf [coll] \n  (reduce \n    (fn [counter _] (inc counter))\n    0 coll))", "problem": 22, "user": "4ecc4079535d23f0362276fa"}, {"code": "(fn [c] (loop [x c s 0]\n     (if (empty? x)\n        s\n        (recur (rest x) (inc s)))))", "problem": 22, "user": "4ec5a6ee535d6d7199dd36ae"}, {"code": "(fn x-count [lst]\n  (if (empty? lst)\n    0\n    (+ 1 (x-count (rest lst)))))", "problem": 22, "user": "4eccb190535d23f0362276fe"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4ec3b393535dcc7ae8597d59"}, {"code": "#(loop [list %1 length 0] (if (empty? list) length (recur (rest list) (inc length))))", "problem": 22, "user": "4eb13d60535d7eef3080733f"}, {"code": "(fn[l]\n  (loop [ll l cnt 0]\n      (if (empty? ll) cnt\n        (recur (rest ll) (inc cnt)))))", "problem": 22, "user": "4ecd2735535d23f036227703"}, {"code": "#(apply + (map (constantly 1) %))", "problem": 22, "user": "4ec601ff535d6d7199dd36be"}, {"code": "#(reduce (fn [E _] (+ E 1)) 0 %)", "problem": 22, "user": "4e95f5a5535dbda64a6f6b3b"}, {"code": "(fn length [coll]\n  (loop [i 0, s coll]\n    (if (empty? s)\n      i\n    (recur (inc i) (rest s)))))", "problem": 22, "user": "4ecbff2f535df97575fdabe4"}, {"code": "(fn [x] (inc (last (map-indexed (fn [i l] (identity i)) x))))", "problem": 22, "user": "4ecaa076535d6d7199dd3706"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4ec18451535dfed6da9c6db0"}, {"code": "#(reduce (fn[x _](inc x)) 0 (seq %))", "problem": 22, "user": "4eca40cd535d6d7199dd3703"}, {"code": "(fn [s] (loop [n 0 se s] (if (empty? se) n (recur (inc n) (rest se)))))", "problem": 22, "user": "4e5af45e535d8a8b8723a2b1"}, {"code": "(fn [x] ((fn [s n] (if (seq s) (recur (rest s) (inc n)) n)) x 0))", "problem": 22, "user": "4ec75077535d6d7199dd36e0"}, {"code": "(fn [coll] \n  (loop [c coll x 0] \n    (if (nil? c) x\n    (recur (next c) (inc x)))))", "problem": 22, "user": "4eb8ec4a535dfed6da9c6d4b"}, {"code": "(fn [coll] \n  (loop [[a & rest] coll\n         size 1]\n    (if (empty? rest)\n      size\n      (recur rest (inc size)))))", "problem": 22, "user": "4ecdb0bb535d23f036227709"}, {"code": "(fn [sq] (reduce + (map (fn [_] 1) sq)))", "problem": 22, "user": "4ec5aa1f535d6d7199dd36b0"}, {"code": "(fn [coll]\n  (reduce (fn [a _] (inc a)) 0 coll))", "problem": 22, "user": "4eb7b049535d7eef30807377"}, {"code": "(comp alength to-array)", "problem": 22, "user": "4ece9ca9535d23f03622770f"}, {"code": "(fn [s] (reduce (fn [acc _] (+ acc 1)) 0 s))", "problem": 22, "user": "4ec3674b535dcc7ae8597d57"}, {"code": "(fn [x] (inc (.lastIndexOf (vec x) (last x))))", "problem": 22, "user": "4e75500f535d7a570dd295c1"}, {"code": "reduce (fn [cnt, _] (inc cnt)) 0", "problem": 22, "user": "4ecf42b4535d1f5ad70dba3c"}, {"code": "reduce (fn [memo i] (+ memo +1)) 0", "problem": 22, "user": "4ecd912e535d23f036227706"}, {"code": "#(loop [cnt 0 col %]\n  (if (seq col)\n    (recur (+ 1 cnt) (rest col))\n    cnt))", "problem": 22, "user": "4ecfb458535d44c135fd68bb"}, {"code": "reduce (fn [c _] (inc c)) 0", "problem": 22, "user": "4ecfb4f3535d44c135fd68bc"}, {"code": "(fn [lst] (reduce (fn [x y] (+ x y)) (map (fn [z] 1) lst)))", "problem": 22, "user": "4ecfa05c535d44c135fd68b9"}, {"code": "reduce (fn [x y] (+ x 1)) 0", "problem": 22, "user": "4ecf1f51535d1f5ad70dba3a"}, {"code": "reduce (fn [a &b] (inc a)) 0", "problem": 22, "user": "4ed00953535d44c135fd68c2"}, {"code": "#(loop [xs (seq %)\n        n 0]\n  (if xs\n    (recur (next xs) (inc n))\n    n))", "problem": 22, "user": "4ed06ea6535d44c135fd68c4"}, {"code": "#(.size (seq %1))", "problem": 22, "user": "4ecff781535d44c135fd68c1"}, {"code": "(fn [coll] (last (map (fn [x y] (+ 1 y)) coll (range))))", "problem": 22, "user": "4ec60dc4535d6d7199dd36c0"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4e6ac593535d8ccf87e9ff02"}, {"code": "(fn len [s]\n  (if (seq s)\n    (+ 1 (len (rest s)))\n    0))", "problem": 22, "user": "4ed15f60535d44c135fd68cd"}, {"code": "reduce (fn [a s] (inc a)) 0", "problem": 22, "user": "4ebc829e535dfed6da9c6d86"}, {"code": "(fn [s] (loop [s (seq s) n 0] (if s (recur (next s) (inc n)) n)))", "problem": 22, "user": "4ed188c8535d44c135fd68cf"}, {"code": "(fn [x] (loop [s x n 0] (if (empty? s) n (recur (rest s) (inc n)))))", "problem": 22, "user": "4ed19f00535d44c135fd68d1"}, {"code": "#(loop [l %, n 0]\n  (if (empty? l)\n    n\n    (recur (rest l) (inc n))))", "problem": 22, "user": "4ed1f84f535d44c135fd68d3"}, {"code": "reduce (fn [x _] (inc x)) 0", "problem": 22, "user": "4ed0e139535d44c135fd68c7"}, {"code": "#(.size (seq %))", "problem": 22, "user": "4ecb7f4b535df97575fdabdc"}, {"code": "(comp (partial reduce +) (partial map (fn [_] 1)))", "problem": 22, "user": "4ece7617535d23f03622770c"}, {"code": "(fn [col]\n  (reduce (fn [ct l] (inc ct)) 0 col))", "problem": 22, "user": "4ecc8dea535d23f0362276fd"}, {"code": "(fn length [[_ & xs]] (if xs (inc (length xs)) 1))", "problem": 22, "user": "4ed2a92b535d44c135fd68dc"}, {"code": "(fn [l]\n  (loop [l (seq l) c 0]\n    (if-not (empty? l)\n      (recur (rest l) (inc c))\n      c)))", "problem": 22, "user": "4ed292ac535d44c135fd68d9"}, {"code": "(fn cnt [s] (if (= '() s) 0 (+ 1 (cnt (rest s)))))", "problem": 22, "user": "4ed2b168535d44c135fd68dd"}, {"code": "(fn [elements] \n  (loop [ls elements n 0]\n    (if (empty? ls)\n      n\n      (recur (rest ls) (inc n)))))", "problem": 22, "user": "4ec7d614535d6d7199dd36e7"}, {"code": "(fn len [coll]\n  (if (= () coll)\n      0\n      (+ 1 (len (rest coll)))))", "problem": 22, "user": "4ed30184535d44c135fd68e7"}, {"code": "(fn c [s] \n  (if (empty? s) 0\n      (+ 1 (c (rest s)))))", "problem": 22, "user": "4eb75bdf535d7eef30807375"}, {"code": "(partial (fn _count [n, x] (\n if (empty? (rest x))\n  (+ n 1)\n (recur (inc n) (rest x))\n)) 0)", "problem": 22, "user": "4ed38714535d44c135fd68f1"}, {"code": "(fn [x] (reduce (fn [a _] (inc a)) 0 x))", "problem": 22, "user": "4ed2918f535d44c135fd68d8"}, {"code": "#(reduce  (fn [x y] (+ x 1)) 0 %)", "problem": 22, "user": "4ed3c783535d44c135fd68f6"}, {"code": "#(inc (last (map-indexed (fn [i e] i) %)))", "problem": 22, "user": "4ecc1d85535d23f0362276f8"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "4ed0d65f535d44c135fd68c6"}, {"code": "(fn \n  [col]\n    (let [rcount \n      (fn [col acc] \n        (if (empty? col)\n          acc\n          (recur (rest col) (inc acc))))]\n      (rcount col 0)))", "problem": 22, "user": "4ed418b8535d10e5ff6f52c5"}, {"code": "(fn [l]\n    ((fn [l c]\n       (if (empty? l)\n         c\n         (recur (rest l) (inc c))))\n       l\n       0))", "problem": 22, "user": "4e7e8684535db169f9c79717"}, {"code": "reduce (fn [x y] (inc x)) 0", "problem": 22, "user": "4ed4673f535d10e5ff6f52ca"}, {"code": "reduce (fn [acc i] (inc acc)) 0", "problem": 22, "user": "4ed45563535d10e5ff6f52c9"}, {"code": "#(last (map-indexed (fn [i _] (inc i)) %))", "problem": 22, "user": "4ed3b4a7535d44c135fd68f5"}, {"code": "(fn [l] \n  (reduce \n    (fn [acc _] (inc acc)) 0 l))", "problem": 22, "user": "4ed47f1e535d10e5ff6f52cd"}, {"code": "#(let [\n      counter (fn [f xs i] (if (empty? xs) i (f f (rest xs) (+ i 1))))\n  ]\n  \n  (counter counter % 0)\n)", "problem": 22, "user": "4ed500bb535d10e5ff6f52d3"}, {"code": "(fn [x]\n  (reduce + (map (fn [n] 1) x)))", "problem": 22, "user": "4ed4798f535d10e5ff6f52cc"}, {"code": "(fn c [coll](\n  if (empty? coll)\n    0\n    (+ 1 (c (rest coll)))))", "problem": 22, "user": "4ed42c78535d10e5ff6f52c7"}, {"code": "reduce (fn [acc _] (inc acc)) 0", "problem": 22, "user": "4eca5391535d6d7199dd3704"}, {"code": "reduce (fn [x y] (inc x)) 0", "problem": 22, "user": "4ed55b5d535d10e5ff6f52d8"}, {"code": "(fn f [x]\n  (if (empty? x)\n    0\n    (inc (f (rest x)))))", "problem": 22, "user": "4ed578d1535d10e5ff6f52d9"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4ecf571b535d44c135fd68b6"}, {"code": "#(loop [c % i 0]\n  (if (empty? c)\n    i\n    (recur (rest c) (inc i))))", "problem": 22, "user": "4db85c8e535d1e037afb218f"}, {"code": "(fn counttoo [xs] (if (empty? xs) 0 (+ 1 (counttoo (rest xs)))))", "problem": 22, "user": "4ed6238d535d10e5ff6f52de"}, {"code": "#(inc (last (map (comp first list) (range) %)))", "problem": 22, "user": "4ed69ea4535d10e5ff6f52e3"}, {"code": "(fn [x]\n  (loop [ lat x cnt 0 ]\n    (if (empty? lat)\n      cnt\n      (recur (rest lat) (inc cnt)))))", "problem": 22, "user": "4ea2382f535d7eef308072bc"}, {"code": "(fn [s]\n  (loop [n 0 s s]\n    (if (empty? s)\n      n\n      (recur (inc n) (rest s)))))", "problem": 22, "user": "4ec64981535d6d7199dd36c7"}, {"code": "(fn [y] (reduce + (map (fn [x] 1) y)))", "problem": 22, "user": "4ed72e51535d10e5ff6f52ee"}, {"code": "#(apply + (map (fn [_] 1) %))", "problem": 22, "user": "4ed6ac40535d10e5ff6f52e4"}, {"code": "(fn [a]\n  (reduce (fn [x y] (inc x))\n    0 (map (fn [b] 1) a)))", "problem": 22, "user": "4eb01582535d7eef30807335"}, {"code": "(fn [col]\n  ((fn inner [c n]\n    (if (empty? c)\n      n\n      (recur (rest c) (inc n))))\n    col 0))", "problem": 22, "user": "4ed7b617535d10e5ff6f52f3"}, {"code": "reduce (fn [x,_] (inc x)) 0", "problem": 22, "user": "4ed27f9f535d44c135fd68d5"}, {"code": "#(reduce (fn [n _] (+ n 1)) 0 %)", "problem": 22, "user": "4ed6d81a535d10e5ff6f52ea"}, {"code": "(fn [coll]\n  (reduce (fn [memo curr-item]\n            (inc memo)) 0 coll))", "problem": 22, "user": "4db6d993535d1e037afb2180"}, {"code": "(fn my-cnt[lst]\n  ((fn mci[lst i] \n    (if (not (= (next lst) nil)) (mci (next lst) (+ 1 i))\n    i)) lst 1))", "problem": 22, "user": "4ed87228535d10e5ff6f52fa"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4e57d1e2535d8a8b8723a289"}, {"code": "#(reduce + (map (fn [_] 1) %))", "problem": 22, "user": "4ed6c738535d10e5ff6f52e9"}, {"code": "#(reduce (fn [x y] (inc x)) 0 %)", "problem": 22, "user": "4ed94d69535d10e5ff6f5303"}, {"code": "reduce #(do %2 (+ % 1)) 0", "problem": 22, "user": "4ed97da1535d10e5ff6f5306"}, {"code": "#(loop [s % n 0] \n  (if (nil? (seq s)) \n    n \n    (recur (rest s) (inc n))))", "problem": 22, "user": "4ed7e37a535d10e5ff6f52f4"}, {"code": "(fn [coll]\n  (loop [coll coll\n         tally 0]\n    (if (seq coll)    \n        (recur (rest coll) (inc tally))\n        tally)))", "problem": 22, "user": "4eda7cc3535d10e5ff6f530e"}, {"code": "(fn [se]\n  ((fn [se n]\n      (if (nil? (seq se)) n\n         (recur (rest se) (+ 1 n)\n         ))) se 0))", "problem": 22, "user": "4eda8d7c535d10e5ff6f530f"}, {"code": "(fn foo [x] \r\n   (loop [lst x cnt 0] \r\n     ( if (= (rest lst) ())\r\n    (inc cnt)   (recur (rest lst) (+ cnt 1)))))", "problem": 22, "user": "4ec3072a535dcc7ae8597d50"}, {"code": "#(reduce + (map (fn [_] 1) %))", "problem": 22, "user": "4edab806535d10e5ff6f5311"}, {"code": "(fn my-count [s]\n  (reduce + (map (fn [s] 1) s)))", "problem": 22, "user": "4ed98b40535d10e5ff6f5307"}, {"code": "(fn [seq] \r\n  (loop [s seq acc 0]  \r\n    (if (empty? s) \r\n      acc \r\n      (recur (rest s) (inc acc )))))", "problem": 22, "user": "4ed8b598535d10e5ff6f52fc"}, {"code": "(fn\r\n  [coll]\r\n\t(let [cnt 0]\r\n\t\t(reduce (fn [cnt val] (inc cnt)) cnt coll)))", "problem": 22, "user": "4edbae0d535d10e5ff6f531c"}, {"code": "(fn lulz [x] ( if (empty? x) 0 (inc (lulz (rest x)) )))", "problem": 22, "user": "4edc0c16535d10e5ff6f531f"}, {"code": "reduce (fn [len _] (+ len 1)) 0", "problem": 22, "user": "4edca56f535d10e5ff6f5324"}, {"code": "(fn [list] (reduce (fn [x y] (inc x)) 0 (vec list)))", "problem": 22, "user": "4ec927e8535d6d7199dd36f9"}, {"code": "reduce #(+ % (if (nil? %2) 0 1)) 0", "problem": 22, "user": "4edd038c535d10e5ff6f5327"}, {"code": "(fn [seq] (reduce + (map (fn [item] 1) seq)))", "problem": 22, "user": "4edd4b77535d10e5ff6f5328"}, {"code": "(fn [some-coll]\n  (loop [coll (seq some-coll)\n         ix 0]\n    (if (= [] coll)\n      ix\n      (recur (rest coll) (inc ix)))))", "problem": 22, "user": "4e7d4544535db169f9c796d0"}, {"code": "(fn c [x]( if (nil? (first x)) 0 ( + 1 (c (rest x)))))", "problem": 22, "user": "4eddfb5c535d10e5ff6f532f"}, {"code": "(fn [coll] (inc (first (last (map-indexed\n  (fn [i v] [i v]) coll)))))", "problem": 22, "user": "4ebd33e4535dfed6da9c6d8e"}, {"code": "#(reduce (fn [s v] (+ s 1)) 0 (seq %))", "problem": 22, "user": "4ede33a1535d10e5ff6f5331"}, {"code": "(fn [lst] \n  (loop [lst lst n 1]\n    (if (empty? (rest lst)) n (recur (rest lst) (inc n)))))", "problem": 22, "user": "4ede365c535d10e5ff6f5333"}, {"code": "reduce (fn [x _] (+ 1 x)) 0", "problem": 22, "user": "4ede8789535d10e5ff6f5337"}, {"code": "(fn c [l]\n  (if (empty? l)\n      0\n      (+ 1 (c (rest l)))))", "problem": 22, "user": "4ede8e1d535d10e5ff6f5339"}, {"code": "(fn [input] (reduce (fn [first second] (+ first second)) (map (fn [n] 1) input)))", "problem": 22, "user": "4edebfbd535d10e5ff6f533b"}, {"code": "(fn cnt [xs] (reduce + (map (fn [_] 1) xs)))", "problem": 22, "user": "4edeac6b535d10e5ff6f533a"}, {"code": "(fn[x]\r\n  (loop[xx x a 0]\r\n    (if (empty? xx)\r\n      a\r\n      (recur (rest xx) (+ a 1)))))", "problem": 22, "user": "4e59f717535d8a8b8723a2a6"}, {"code": "(fn [nums]\n  (loop [i 0 item nums]\n    (if (= nil item)\n      i\n    (recur (inc i) (next item)))))", "problem": 22, "user": "4eddc5f4535d10e5ff6f532c"}, {"code": "#(.size (vec %))", "problem": 22, "user": "4ec9d95b535d6d7199dd3701"}, {"code": "#(loop [coll % acc 0] (if (nil? (first coll)) acc (recur (rest coll) (inc acc))))", "problem": 22, "user": "4eaa66eb535d7eef3080730b"}, {"code": "(fn [s] (reduce + (map (fn [x] 1) s)))", "problem": 22, "user": "4edf40d5535d10e5ff6f533f"}, {"code": "(fn [x]\r\n     (loop [acc 0 lista x]\r\n       (if (empty? lista)\r\n         acc\r\n         (recur (+ acc 1) (rest lista))     \r\n       )\r\n    )\r\n)", "problem": 22, "user": "4edf92f0535d10e5ff6f5341"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4ecfe525535d44c135fd68bf"}, {"code": "(fn[s] (reduce (fn[x y] (+ x 1)) 0 s))", "problem": 22, "user": "4edf5dc6535d10e5ff6f5340"}, {"code": "reduce (fn [x y] (+ x 1)) 0", "problem": 22, "user": "4ed90014535d10e5ff6f52fe"}, {"code": "#(loop [cnt 0 acc %]\n            (if (empty? acc)\n              cnt\n              (recur (inc cnt) (rest acc))))", "problem": 22, "user": "4edee6a2535d10e5ff6f533e"}, {"code": "#(reduce (fn[agg, ignore](+ 1 agg)) 0 %)", "problem": 22, "user": "4ed6dbdd535d10e5ff6f52eb"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "4e5ba560535d8a8b8723a2b7"}, {"code": "(fn my-count [list]\n  (loop [l list, current 0]\n    (if (empty? l)\n      current\n      (recur (rest l) (inc current)))))", "problem": 22, "user": "4edd9d79535d10e5ff6f532b"}, {"code": "#(loop [x 0 s %]\n    (if (seq s)\n      (recur (inc x) (rest s))\n      x))", "problem": 22, "user": "4ede361a535d10e5ff6f5332"}, {"code": "(fn [s]\n  (loop [l 0 temps s]\n    (if (empty? temps)\n      l\n      (recur (inc l) (rest temps)))))", "problem": 22, "user": "4eddcbbf535d10e5ff6f532d"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4e8cf3ef535d65386fec2130"}, {"code": "reduce #(do %2 (+ % 1)) 0", "problem": 22, "user": "4ed24780535d44c135fd68d4"}, {"code": "#(reduce + (map (fn [i] 1) %))", "problem": 22, "user": "4edfd846535d10e5ff6f5345"}, {"code": "#( loop [ a 0 b %] \n  (\n    if (empty? b) \n      a (recur (inc a) (rest b))\n  )\n)", "problem": 22, "user": "4ed845a8535d10e5ff6f52f8"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4ee1220b535d10e5ff6f5354"}, {"code": "(fn [alist] (reduce + (map (fn [x] 1) alist)))", "problem": 22, "user": "4e4c6824535dc968683fc4de"}, {"code": "#(loop [mystr %1 mycount 0]\n  (if (empty? mystr )\n     mycount\n     (recur (rest mystr) (inc mycount))))", "problem": 22, "user": "4ebfdfda535dfed6da9c6d9e"}, {"code": "#(reduce + (map (fn [x] (if (nil? x) 0 1)) %))", "problem": 22, "user": "4ee153f0535d10e5ff6f5357"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4ee17ecc535d10e5ff6f535a"}, {"code": "#(reduce +(map(fn[x] 1) %))", "problem": 22, "user": "4eba5adb535dfed6da9c6d63"}, {"code": "#(reduce +(map (fn[x] 1) %))", "problem": 22, "user": "4ee18201535d10e5ff6f535b"}, {"code": "(fn size [x]\n (if (empty? x) \n  0\n  (inc (size (rest x)))\n  )\n)", "problem": 22, "user": "4ec79cac535d6d7199dd36e3"}, {"code": "(fn counter ([x] (counter x 0)) \n  ([x acc] \n    (if (= '() x) acc \n      (recur (rest x) (+ 1 acc)))  ))", "problem": 22, "user": "4edfb618535d10e5ff6f5343"}, {"code": "(fn [x] \n  ((fn impl[x i] \n    (if (empty? x) i (impl (rest x) (inc i)))) x 0))", "problem": 22, "user": "4ee01905535d10e5ff6f534c"}, {"code": "#(apply + (map (fn [x] (int 1)) %1))", "problem": 22, "user": "4edb1774535d10e5ff6f5315"}, {"code": "reduce (fn [x _] (inc x)) 0", "problem": 22, "user": "4ec54160535d6d7199dd368c"}, {"code": "(fn [x] (loop [ct 0, lst x] (if (= lst []) ct (recur (inc ct) (rest lst)))))", "problem": 22, "user": "4ee251e9535d10e5ff6f5365"}, {"code": "(fn [s] \n  (loop [s s, c 0]\n    (if (seq s)\n       (recur (next s) (inc c))\n       c)))", "problem": 22, "user": "4ed19e90535d44c135fd68d0"}, {"code": "#(reduce + 0 (map (constantly 1) %))", "problem": 22, "user": "4ee2da14535d10e5ff6f536c"}, {"code": "#(loop [c 0 l (vec %)] (if (seq l) (recur (+ c 1) (pop l)) c))", "problem": 22, "user": "4df21dd0535d08e6dec9fe24"}, {"code": "(fn my-count [xs]\n  (if (empty? xs)\n    0\n    (+ 1 (my-count (rest xs)))))", "problem": 22, "user": "4ee32ea6535d10e5ff6f536d"}, {"code": "(fn [coll] (reduce (fn [val item] (+ val 1)) 0 coll))", "problem": 22, "user": "4ee26926535d10e5ff6f5367"}, {"code": "(fn add-one [x]\n  (if\n    (= x (rest x))\n    0\n    (+ 1 (add-one (rest x)))\n  )\n)", "problem": 22, "user": "4ee259a1535d10e5ff6f5366"}, {"code": "(fn [coll]\n  (loop [length 0\n         xs coll]\n    (if (nil? xs)\n      length\n      (recur (inc length) (next xs)))))", "problem": 22, "user": "4ed9fe5f535d10e5ff6f5308"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4ede716e535d10e5ff6f5336"}, {"code": "(fn length [xs] (if (empty? xs) 0 (+ 1 (length (rest xs)))))", "problem": 22, "user": "4ee3b586535d10e5ff6f5371"}, {"code": "#(apply + (map (fn [_] 1) %))", "problem": 22, "user": "4ee26f01535d10e5ff6f5368"}, {"code": "#(reduce (fn [c _] (inc c)) 0 %)", "problem": 22, "user": "4ee3c9c5535d10e5ff6f5372"}, {"code": "(fn [s]\n  (reduce (fn [a b] (inc a)) 0 s))", "problem": 22, "user": "4ee129d2535d10e5ff6f5355"}, {"code": "#(loop [es %1 c 0] (if (empty? es) c (recur (rest es) (inc c))))", "problem": 22, "user": "4eda77c0535d10e5ff6f530d"}, {"code": "(fn f [coll]\r\n  (if (seq coll)\r\n    (+ 1 (f (rest coll)))\r\n    0))", "problem": 22, "user": "4ee40938535d10e5ff6f5375"}, {"code": "#(loop [seq % x 0]\n  (if (empty? seq)\n    x\n    (recur (rest seq) (inc x))))", "problem": 22, "user": "4ee446b1535d10e5ff6f5376"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4ecddbc6535d23f03622770a"}, {"code": "(fn [y] (reduce + (map (fn [x] 1) y)))", "problem": 22, "user": "4ee52c44535d1385b2869d88"}, {"code": "(fn [v]\n  (loop [coll v, c 0]\n    (if (empty? coll)\n      c\n      (recur (rest coll) (inc c)))))", "problem": 22, "user": "4edb6822535d10e5ff6f531b"}, {"code": "#(reduce (fn [x _] (inc x)) 0 %)", "problem": 22, "user": "4ee4f4a9535d1385b2869d85"}, {"code": "(fn my-count [xs]\n  (loop [i xs\n         c 0]\n    (if (seq i)\n      (recur (rest i) (+ 1 c))\n      c)))", "problem": 22, "user": "4ee63d8d535d93acb0a66859"}, {"code": "reduce (fn [a b] (inc a)) 0", "problem": 22, "user": "4ee3afde535d10e5ff6f5370"}, {"code": "reduce (fn[a i] (+ a 1)) 0", "problem": 22, "user": "4ec8006c535d6d7199dd36ef"}, {"code": "#(alength (to-array %))", "problem": 22, "user": "4ee00f44535d10e5ff6f534b"}, {"code": "(fn [xs]\n  (apply + (map (constantly 1) xs)))", "problem": 22, "user": "4ee67d74535d93acb0a66861"}, {"code": "#(reduce + (map (fn [_] 1) %))", "problem": 22, "user": "4ee673cf535d93acb0a66860"}, {"code": "(fn [xs]\r\n    (loop [ys xs\r\n\t         c 0]\r\n\t     (if (empty? ys)\r\n\t\t c\r\n\t\t (recur (rest ys) (+ c 1)))))", "problem": 22, "user": "4ee75ec2535d93acb0a66867"}, {"code": "(fn [alist] \n(loop [list alist result 0]\n      (if (empty? list)\n        result\n        (recur (rest list) (inc result)))))", "problem": 22, "user": "4ee6ca15535d93acb0a66862"}, {"code": "#(reduce + (map (fn [_] 1) %))", "problem": 22, "user": "4dd88803535d2dad7130b5d9"}, {"code": "#(reduce + (map (fn [_] 1) %))", "problem": 22, "user": "4ee6400c535d93acb0a6685b"}, {"code": "(fn [col] (loop [ct (if (first col) 1 0), mycol col]\n            (if-let [ncol (next mycol)]\n              (recur (inc ct) ncol )\n              ct )))", "problem": 22, "user": "4ee7d177535d93acb0a6686f"}, {"code": "#(reduce (fn [i _] (inc i)) 0 %)", "problem": 22, "user": "4ee7ef87535d93acb0a66872"}, {"code": "#(reduce (fn [n _] (+ n 1)) 0 %)", "problem": 22, "user": "4ee82223535d93acb0a66877"}, {"code": "#(reduce (fn [a _] (inc a)) 0 %)", "problem": 22, "user": "4ee82ce9535d93acb0a6687a"}, {"code": "reduce (fn [n _] (inc n)) 0", "problem": 22, "user": "4edb678d535d10e5ff6f531a"}, {"code": "(fn [s]\n  (loop [s s\n         n 0]\n    (if (empty? s)\n      n\n      (recur (rest s) (inc n)))))", "problem": 22, "user": "4ee88269535d93acb0a6687f"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "4dadba4dc9a9d6ed3899dc57"}, {"code": "(fn my-count [coll] (reduce + (map (fn [x] 1) coll)))", "problem": 22, "user": "4ee8fc37535d93acb0a66888"}, {"code": "(fn [x] \n  (loop [c 0\n        f (first x)\n        n (next x)]\n     (if f \n       (recur (inc c) (first n) (next n))\n       c)))", "problem": 22, "user": "4ee8de0e535d93acb0a66885"}, {"code": "#(apply + (map (fn [x] 1) %))", "problem": 22, "user": "4ee82539535d93acb0a66878"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4ee91d00535d93acb0a6688b"}, {"code": "(fn mycnt\n  ([l]\n    (mycnt l 0))\n  ([l curcnt]\n    (if (= l '())\n      curcnt\n      (recur (rest l) (+ curcnt 1)))))", "problem": 22, "user": "4ee95013535d93acb0a6688d"}, {"code": "#(loop [n 0\n        acc %]\n  (if (empty? acc)\n      n\n      (recur (inc n) (rest acc))))", "problem": 22, "user": "4ee7fe83535d93acb0a66874"}, {"code": "(fn [c] \r\n   (let [coll (vec c)]\r\n  (loop [index 0]\r\n  \t(if (get coll index )\r\n\t\t\t(recur (inc index))\r\n\t\t\tindex))))", "problem": 22, "user": "4ee9b3a1535d93acb0a66890"}, {"code": "#(loop [seq %1 n 0]\n  (if (empty? seq)\n    n\n    (recur (rest seq) (inc n))))", "problem": 22, "user": "4ee85476535d93acb0a6687c"}, {"code": "(fn [x] (reduce + (map (fn [_] 1) x)))", "problem": 22, "user": "4ee9d697535d93acb0a66895"}, {"code": "#(.size (seq %))", "problem": 22, "user": "4ee9ddb8535d93acb0a66896"}, {"code": "#(reduce (fn [x y] (inc x)) 0 %1)", "problem": 22, "user": "4ee8092f535d93acb0a66875"}, {"code": "(fn my-count [l] (if (empty? l) 0 (inc (my-count (rest l)))))", "problem": 22, "user": "4eeabd62535d93acb0a668a0"}, {"code": "reduce (fn [a b] (+ 1 a)) 0", "problem": 22, "user": "4eeaf88f535d93acb0a668a3"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4ee74e2a535d93acb0a66866"}, {"code": "(fn [coll]\n  (reduce + (map (fn [x] 1) coll))\n)", "problem": 22, "user": "4eeb2b3c535d93acb0a668a7"}, {"code": "(fn [x] (loop [a 1 b x] \n  (cond\n    (= nil (next b)) a\n    :e (recur (+ a 1) (next b))\n    )\n))", "problem": 22, "user": "4eea1a41535d93acb0a66899"}, {"code": "(fn myc[x] (if (empty? x) 0 (+ 1 (myc(rest x)))))", "problem": 22, "user": "4ee9ff32535d93acb0a66897"}, {"code": "(fn contar [s]                                                                                                                                       \n  (if (seq s)                                                                                                                                        \n    (inc (contar (rest s)))                                                                                                                          \n    0))", "problem": 22, "user": "4eea5823535d93acb0a6689d"}, {"code": "(fn [s] ((fn c2 [s n] (if (seq s) (c2 (rest s) (inc n)) n)) s 0))", "problem": 22, "user": "4eebc5da535d93acb0a668aa"}, {"code": "(fn [seq]\r\n  (loop [myseq seq\r\n         x 0]\r\n    (if (empty?  myseq)\r\n    x\r\n    (recur (rest myseq) (inc x)))))", "problem": 22, "user": "4eeb8271535d93acb0a668a8"}, {"code": "#(inc (apply max (map-indexed (fn [i e] i) %)))", "problem": 22, "user": "4db1fe241254ad5b4805fa77"}, {"code": "(fn x [a] (if (= a '()) 0 (+ 1 (x (rest a)))))", "problem": 22, "user": "4ee908ae535d93acb0a66889"}, {"code": "(fn [x] (reduce + (map (fn [y] 1) x)))", "problem": 22, "user": "4eebfd03535d93acb0a668ab"}, {"code": "reduce (fn [a b](+ a 1)) 0", "problem": 22, "user": "4eeae8f0535d93acb0a668a2"}, {"code": "(fn [seq]\n   (loop [s seq\n          c 0]\n     (println \"s\" (str s))\n     (println \"c\" c)\n     (if (empty? s)\n       c\n       (recur (rest s) (inc c)))))", "problem": 22, "user": "4ee868be535d93acb0a6687d"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4eecd772535d93acb0a668b7"}, {"code": "#(loop [a 0 c %] (if (not (empty? c)) (recur (+ 1 a) (rest c)) a))", "problem": 22, "user": "4ec3d85f535dcc7ae8597d5c"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4eecb44b535d93acb0a668b1"}, {"code": "(fn [x]\n  (reduce + (map (constantly 1) x)))", "problem": 22, "user": "4eecdb33535d93acb0a668b8"}, {"code": "(fn foo [lst]\n  (if (= (rest lst) '()) 1\n  \t(+ 1 (foo (rest lst)))))", "problem": 22, "user": "4eed6b32535d93acb0a668bc"}, {"code": "(fn count-next [x]\n  (cond\n    (= nil x) 0\n    (= nil (next x))\n    1\n    :else (inc (count-next (next x)))))", "problem": 22, "user": "4eecbc52535d93acb0a668b2"}, {"code": "(fn my-count [aseq]\n  (loop [aseq (seq aseq) cnt 0]\n    (if (nil? aseq)\n      cnt\n      (recur (next aseq) (inc cnt)))))", "problem": 22, "user": "4eed7c01535d93acb0a668bd"}, {"code": "#(reduce \n   +\n   (map (fn [x] 1) %)\n)", "problem": 22, "user": "4eed26af535d93acb0a668bb"}, {"code": "#(reduce (fn [x _] (inc x)) 0 %)", "problem": 22, "user": "4eecdd66535d93acb0a668b9"}, {"code": "(fn len [seq] \n  (if (empty? seq)\n    0\n    (+ (len (rest seq)) 1)))", "problem": 22, "user": "4eec9432535d93acb0a668af"}, {"code": "(fn [l]\n  (letfn [(cnt \n            [l n]\n            (if (empty? l)\n              n\n              (recur (rest l) (inc n))))]\n    (cnt l 0)))", "problem": 22, "user": "4eecc3a0535d93acb0a668b3"}, {"code": "(partial reduce (fn [acc _] (inc acc)) 0)", "problem": 22, "user": "4dac61e18cc9d6edb9beb0b3"}, {"code": "(fn [s] (apply + (map (fn [x] (+ 1)) s)))", "problem": 22, "user": "4ec3650f535dcc7ae8597d56"}, {"code": "(fn [sq]\n (loop [s sq n 0]\n   (if (seq s)\n     (recur (rest s) (inc n))\n      n)))", "problem": 22, "user": "4ee645f8535d93acb0a6685d"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4ee88bfb535d93acb0a66881"}, {"code": "(fn countseq [sequence]\r\n    (if (not (empty? sequence))\r\n        (+ 1 (countseq (rest sequence)))\r\n        0))", "problem": 22, "user": "4e9a3a03535dbda64a6f6b70"}, {"code": "(fn[es] (reduce (fn[cnt s] (+ 1 cnt)) 0 es))", "problem": 22, "user": "4eef0828535d305ff5cb7f18"}, {"code": "(fn [coll]\n  (reduce (fn [a b] (inc a)) 0 (seq coll)))", "problem": 22, "user": "4e7d5eb8535db169f9c796d6"}, {"code": "(fn [x] (apply + (map (fn [i] 1) x)))", "problem": 22, "user": "4ef018ab535dced4c769f208"}, {"code": "(fn [s] (reduce + (map (fn [x] 1) s )))", "problem": 22, "user": "4eef1164535d305ff5cb7f19"}, {"code": "(fn my-count [x0]\n  (loop [c 0 x x0]\n    (if (empty? x)\n      c\n      (recur (inc c) (rest x)))))", "problem": 22, "user": "4ef0a39b535dced4c769f20c"}, {"code": "(fn [s]\n  (loop [c 0 r s]\n    (if (not (seq r))\n         c\n         (recur (inc c) (rest r)))))", "problem": 22, "user": "4ef0a38e535dced4c769f20b"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4eeff8fc535d305ff5cb7f24"}, {"code": "(fn [coll] (reduce #(when %2 (inc %1)) 0 coll))", "problem": 22, "user": "4ef0a39b535dced4c769f20d"}, {"code": "#(reduce + (map (fn[x] 1) %))", "problem": 22, "user": "4ed39399535d44c135fd68f3"}, {"code": "#(.size (vec %))", "problem": 22, "user": "4db85282535d1e037afb218a"}, {"code": "(fn [x] \n  ((fn [x n]\n    (if (empty? x)\n        n\n        (recur (drop 1 x) (+ n 1))))\n    x 0))", "problem": 22, "user": "4ef1ee67535dced4c769f219"}, {"code": "(fn counter [xs]\n  ((fn impl [xs n]\n      (if (empty? xs)\n        n\n        (impl (rest xs) (+ n 1))))\n    xs 0))", "problem": 22, "user": "4ef0b523535dced4c769f20e"}, {"code": "(partial reduce (fn [x _] (inc x)) 0)", "problem": 22, "user": "4edecdae535d10e5ff6f533c"}, {"code": "#(loop [x 0 \r\n        y %]\r\n    (if (not= (nth y x nil) nil)\r\n      (recur (inc x) y)\r\n       x))", "problem": 22, "user": "4eeff8ba535d305ff5cb7f23"}, {"code": "#(.size (vec %))", "problem": 22, "user": "4ef2d243535dced4c769f221"}, {"code": "(fn [c] (reduce (fn [a b] (+ a 1)) 0 c))", "problem": 22, "user": "4ef355e3535dced4c769f228"}, {"code": "#(reduce + (map (fn [x] 1) %1))", "problem": 22, "user": "4ed2dd98535d44c135fd68e2"}, {"code": "(fn [s]\n  (loop [c 0\n         m-s s]\n         (if (first m-s)\n          (recur (inc c) (next m-s))\n          c)))", "problem": 22, "user": "4ef2a142535dced4c769f21e"}, {"code": "(fn [xs] (reduce (fn [n x] (+ n 1)) 0 xs))", "problem": 22, "user": "4ef41f26535dced4c769f230"}, {"code": "#(last (interleave % (iterate inc 1)))", "problem": 22, "user": "4ef4322e535dced4c769f232"}, {"code": "#(loop [i 0 list %]\n  (if (first list)(recur (inc i)(rest list)) i))", "problem": 22, "user": "4ef43233535dced4c769f233"}, {"code": "(fn [x]\n  (apply +\n    (map (fn [y] 1) x)))", "problem": 22, "user": "4ef19836535dced4c769f217"}, {"code": "(fn my-count\n  ([sseq] (my-count sseq 0))\n  ([sseq counter]\n    (if (empty? sseq)\n        counter\n        (recur (rest sseq) (inc counter)))))", "problem": 22, "user": "4eee3e6a535d93acb0a668c3"}, {"code": "reduce #(or (+ % 1) %2) 0", "problem": 22, "user": "4ef49c2c535dced4c769f238"}, {"code": "(fn [coll] \n  (loop [xn coll acc 0]\n    (if (empty? xn)\n      acc\n      (recur (rest xn) (inc acc)))))", "problem": 22, "user": "4ef4c1ff535dced4c769f23e"}, {"code": "#(reduce (fn [cnt val] (inc cnt)) 0 %)", "problem": 22, "user": "4ef4acf8535dced4c769f23c"}, {"code": "reduce (fn [i x] (+ 1 i)) 0", "problem": 22, "user": "4eee5c7f535d93acb0a668c6"}, {"code": "(fn our-count [list]\n       (if (empty? list)\n         0\n         (+ 1 (our-count (rest list)))))", "problem": 22, "user": "4ef0f1a1535dced4c769f212"}, {"code": "#(reduce (fn[a b](+ a 1)) 0 %)", "problem": 22, "user": "4ef4e5fa535dced4c769f242"}, {"code": "(fn[ls]\n  (loop [n 0 l ls]\n    (if (= l () )\n      n\n      (recur (+ 1 n) (rest l))\n    )\n  )\n)", "problem": 22, "user": "4ebc3974535dfed6da9c6d7f"}, {"code": "(fn [coll] \n  (loop [c coll x 0]\n    (if (empty? c) x (recur (rest c) (inc x)))))", "problem": 22, "user": "4ef5c7ce535dced4c769f248"}, {"code": "(fn [x] (loop [xs x n 0] (if (next xs) (recur (next xs) (inc n)) (inc n))))", "problem": 22, "user": "4ef5c847535dced4c769f249"}, {"code": "#(reduce (fn [a b] (+ a 1)) 0 %)", "problem": 22, "user": "4ef57a7f535dced4c769f246"}, {"code": "(fn f \n  ([s]\n    (f s 0))\n  ([s l]\n    (if (seq s)\n      (recur (next s) (inc l))\n      l)))", "problem": 22, "user": "4ef667c4535dced4c769f24c"}, {"code": "(fn [x] (reduce ( fn [c,a] (inc c)) 0 x))", "problem": 22, "user": "4daea587edd6309eace4d15a"}, {"code": "(fn [n]\n  ((fn [items acc]\n    (if (empty? items)\n      acc\n      (recur (rest items) (+ 1 acc)))) n 0))", "problem": 22, "user": "4ee9c8d0535d93acb0a66892"}, {"code": "reduce (fn [t i] (inc t)) 0", "problem": 22, "user": "4ef77edb535dced4c769f254"}, {"code": "reduce (fn [a b] (inc a)) 0", "problem": 22, "user": "4ef77c82535dced4c769f253"}, {"code": "(fn [s] (loop [counter 0 rst s]\n          (if (empty? rst)\n            counter\n            (recur (+ 1 counter) (rest rst)))))", "problem": 22, "user": "4ef78c97535dced4c769f256"}, {"code": "(fn [x]\r\n  (loop [lst x cnt 0]\r\n    (if (empty? lst)\r\n      cnt\r\n      (recur (rest lst) (inc cnt))\r\n    )\r\n  )\r\n)", "problem": 22, "user": "4e5cac7c535d8a8b8723a2c3"}, {"code": "#(loop [x 0 b %] (if (empty? b) x (recur (+ 1 x) (rest b))))", "problem": 22, "user": "4ee2baa8535d10e5ff6f536b"}, {"code": "(fn aa [x]\n  (if (empty? x)\n    0\n    (+ 1 (aa (rest x)))))", "problem": 22, "user": "4ef4e0da535dced4c769f240"}, {"code": "(fn [n] (inc (last (map-indexed (fn [x _] (int x)) n))))", "problem": 22, "user": "4e3b0b44535deb9a81d77f51"}, {"code": "#(loop[arr % idx 0]\n  (if(empty? arr)\n    idx\n    (recur (rest arr) (inc idx))))", "problem": 22, "user": "4ec5d62c535d6d7199dd36ba"}, {"code": "#(reduce (fn [x y] (+ x 1)) 0 %)", "problem": 22, "user": "4ef60a02535dced4c769f24b"}, {"code": "(fn [s] (reduce + \n  (map #(if (not (nil? %)) 1) s)))", "problem": 22, "user": "4e09392a535d04ed9115e7ae"}, {"code": "(fn [s]\n  (loop [s s acc 0]\n    (if (empty? s)\n      acc\n      (recur (rest s) (inc acc)))))", "problem": 22, "user": "4ed9354f535d10e5ff6f5301"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "4ea4d961535d7eef308072cd"}, {"code": "(fn [col]\n  (let [mycount (fn [col n]\n          (if (empty? col)\n              n\n              (recur (rest col) (+ n 1))))]\n   (mycount col 0)))", "problem": 22, "user": "4ef992c8535dced4c769f268"}, {"code": "(fn [coll]\n  (reduce (fn [x,y] (+ x 1)) 0 coll))", "problem": 22, "user": "4ef89fb0535dced4c769f260"}, {"code": "#(apply + (map (fn [a] 1) %))", "problem": 22, "user": "4ef9c78e535dced4c769f26a"}, {"code": "#(reduce + (map (fn [_] 1) %))", "problem": 22, "user": "4efb0ae1535dced4c769f273"}, {"code": "(fn [xs] (reduce (fn [x y] (+ x 1)) 0 xs))", "problem": 22, "user": "4ef8d47c535dced4c769f261"}, {"code": "#(if (seq %2) (recur (inc %) (rest %2)) %) 0", "problem": 22, "user": "4efb2fd7535dced4c769f274"}, {"code": "(fn [coll]\n  (loop [coll coll n 0]\n    (if (nil? (first coll))\n      n\n      (recur (rest coll) (inc n)))))", "problem": 22, "user": "4efb5508535dced4c769f276"}, {"code": "(fn my-count [s]\n  (let [helper (fn [s sofar]\n                 (if (seq s)\n                   (recur (rest s) (inc sofar))\n                   sofar))]\n    (helper s 0)))", "problem": 22, "user": "4eecc9ad535d93acb0a668b4"}, {"code": "(fn [s]\n  (reduce (fn [total sp]\n    (inc total)) 0 s))", "problem": 22, "user": "4efb92ce535dced4c769f27a"}, {"code": "(fn count-seq2 [xs]\n  (cond (empty? xs) 0\n        true (+ (count-seq2 (rest xs)) 1)))", "problem": 22, "user": "4ef6f5ea535dced4c769f250"}, {"code": "(fn [s]\n  (loop [ss s n 0]\n    (if (= (first ss) nil) \n      n\n      (recur (rest ss) (inc n)))))", "problem": 22, "user": "4efc41b2535dced4c769f27f"}, {"code": "(fn cn [x] (if (not (empty? x)) (inc (cn (next x))) 0\n))", "problem": 22, "user": "4efc4210535dced4c769f280"}, {"code": "#(+ 1 (last (sort (keys (zipmap (range) %)))))", "problem": 22, "user": "4efb87f7535dced4c769f279"}, {"code": "#(reduce (fn [acc _](inc acc)) 0 %)", "problem": 22, "user": "4efcac3a535de96065cf507e"}, {"code": "#(reduce + 0 (map (fn [x] 1) %))", "problem": 22, "user": "4efcc0ce535de96065cf507f"}, {"code": "(fn [seq]\n  (loop [se seq\n   total 0]\n    (do\n      (if (empty? se)\n\ttotal\n\t(recur (rest se) (inc total))))))", "problem": 22, "user": "4ef9b021535dced4c769f269"}, {"code": "(fn [seq] (reduce (fn [x y] (inc x)) 0 seq))", "problem": 22, "user": "4efd98fa535de96065cf5086"}, {"code": "#(reduce (fn [x y] (+ 1 x)) 0 %)", "problem": 22, "user": "4efec33f535dcb61093f6a2a"}, {"code": "#(.size (vec %))", "problem": 22, "user": "4ef6e689535dced4c769f24f"}, {"code": "(fn cnt [seq] (if (empty? seq) 0 (+ 1 (cnt (rest seq)))))", "problem": 22, "user": "4eff81ca535dcb61093f6a2d"}, {"code": "reduce (fn [a e] (inc a)) 0", "problem": 22, "user": "4effb663535dcb61093f6a2e"}, {"code": "(fn newcount\n    ([xs]\n        (if (seq xs)\n            (newcount (rest xs) 1)\n            0))\n    ([xs n]\n        (if (seq xs)\n            (recur (rest xs) (inc n))\n            n))\n)", "problem": 22, "user": "4ea3863b535d7eef308072c7"}, {"code": "#(loop [lista % index 0 ](if (empty? lista)index (recur(rest lista)(inc index) )))", "problem": 22, "user": "4f00c74f535dcb61093f6a31"}, {"code": "#(loop [coll % cnt 0]\n  (if (empty? coll)\n    cnt\n    (recur (rest coll) (inc cnt))))", "problem": 22, "user": "4ec5a5f9535d6d7199dd36ad"}, {"code": "reduce (fn [n _] (+ 1 n)) 0", "problem": 22, "user": "4f00d948535dcb61093f6a32"}, {"code": "(fn [lst]\n  (loop [[fst & rst] lst\n         numba 0]\n    (if (nil? fst)\n      numba\n      (recur rst (+ numba 1)))))", "problem": 22, "user": "4ee271e2535d10e5ff6f5369"}, {"code": "(fn [x]\n  (loop [cnt 0 li x]\n    (if(empty? li) \n      cnt\n      (recur (inc cnt) (rest li))\n      )\n  )\n  )", "problem": 22, "user": "4f00f997535dcb61093f6a34"}, {"code": "(fn [xs]\r\n  (loop [seq xs n 0]\r\n    (if (not (next seq))\r\n        (+ 1 n)\r\n        (recur (rest seq) (+ 1 n)))))", "problem": 22, "user": "4efde788535d3d302ff962fa"}, {"code": "(fn [l] (reduce (fn [a b] (+ a 1)) 0 l))", "problem": 22, "user": "4f017593535dcb61093f6a36"}, {"code": "(fn my-count\n  [seq]\n  (loop [items-processed 1 sequence seq]\n    (if (not (empty? (rest sequence)))\n      (recur (inc items-processed) (rest sequence))\n      items-processed\n      )\n    )\n  )", "problem": 22, "user": "4ed92fd6535d10e5ff6f5300"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4f01c938535dcb61093f6a39"}, {"code": "#(-> (map-indexed (fn [idx _ ] idx) %) last inc)", "problem": 22, "user": "4f01ff83535dcb61093f6a3a"}, {"code": "#(loop [% % result 0] (if (empty? %) result (recur (rest %) (inc result) )))", "problem": 22, "user": "4ef8f78f535dced4c769f262"}, {"code": "(fn my-count [my-coll] \n  (loop [coll my-coll sum 0]\n  (if (seq coll) \n   (recur (rest coll) (inc sum))\nsum)))", "problem": 22, "user": "4ec7c32c535d6d7199dd36e6"}, {"code": "(fn [l] (loop [ll l c 0]\n  (if (empty? ll) c \n  (recur (rest ll) (inc c)))))", "problem": 22, "user": "4ef5e06d535dced4c769f24a"}, {"code": "(fn [s] (reduce + (map (fn [x] 1) s)))", "problem": 22, "user": "4f030d65535dcb61093f6a4e"}, {"code": "(fn [x] \n  (\n   (fn [x n]\n    (if-let [r (next x)]\n    (recur r (+ 1 n))\n    (+ 1 n)\n    )\n   ) x 0))", "problem": 22, "user": "4f03154a535dcb61093f6a58"}, {"code": "(fn [seq] \n  (loop [seq seq n 0]\n    (if (empty? seq)\n        n\n        (recur (rest seq) (+ n 1)))))", "problem": 22, "user": "4f017b4e535dcb61093f6a37"}, {"code": "(fn length ([seq] (length seq 0)) ([seq n] (if (= '() seq) n (length (rest seq) (+ n 1)))))", "problem": 22, "user": "4f031aaa535dcb61093f6a64"}, {"code": "#(reduce + 0 (map (fn [_] 1) %))", "problem": 22, "user": "4f031eac535dcb61093f6a67"}, {"code": "(fn [x & c] (if (empty? x) c (recur (rest x) (+ 1 (if (nil? c) 0 c)))))", "problem": 22, "user": "4f03193e535dcb61093f6a61"}, {"code": "(fn mycount [x] \n  (if (empty? x)\n    0\n    (+ 1 (mycount (rest x)))\n  )\n)", "problem": 22, "user": "4f03101e535dcb61093f6a53"}, {"code": "#((fn [l, c]\n  (if (nil? (first l))\n    c\n    (recur (rest l) (inc c)))) % 0)", "problem": 22, "user": "4f031773535dcb61093f6a5c"}, {"code": "(fn [x] (reduce + (map (constantly 1) x)))", "problem": 22, "user": "4f033c26535dcb61093f6a7d"}, {"code": "(fn [y] (reduce + (map (fn [x] 1) y)))", "problem": 22, "user": "4f031883535dcb61093f6a5e"}, {"code": "(fn [list] (reduce (fn [x,y] (inc x)) 0 list))", "problem": 22, "user": "4f030bb4535dcb61093f6a4a"}, {"code": "(fn [seq] \n  (loop [n 0, curr seq] \n    (if curr\n      (recur (inc n) (next curr))\n      n)))", "problem": 22, "user": "4e6a82ba535d8ccf87e9feef"}, {"code": "(fn [sequence] \n  (loop [s sequence c 0]\n    (if (seq s) \n        (recur (rest s) (inc c)) \n         c)))", "problem": 22, "user": "4eea4d84535d93acb0a6689c"}, {"code": "(fn [coll] (apply + (map (fn [elt] 1) coll)))", "problem": 22, "user": "4f035bfd535dcb61093f6a8f"}, {"code": "(fn ccount [x] (if (.isEmpty x) 0 (+ (ccount (rest x)) 1)))", "problem": 22, "user": "4f03641a535dcb61093f6a9b"}, {"code": "(fn lem [x] (if (= '() x) 0 (+ 1 (lem (rest x)))))", "problem": 22, "user": "4f0365fc535dcb61093f6aa4"}, {"code": "(fn [l] (reduce + (map (constantly 1) l)))", "problem": 22, "user": "4e7d2f2f535db169f9c796cd"}, {"code": "(fn [l] (reduce + (map (fn [l] 1) l)))", "problem": 22, "user": "4f0364d5535dcb61093f6a9e"}, {"code": "(fn [seq] (apply + (map (fn [x] 1) seq)))", "problem": 22, "user": "4f035d94535dcb61093f6a91"}, {"code": "(fn [x]\n  (loop [s x n 0]\n    (if (= '() s)\n      n\n      (recur (rest s) (inc n)))))", "problem": 22, "user": "4f036894535dcb61093f6aad"}, {"code": "(fn c [l] (if (empty? l) 0 (+ 1 (c (rest l)))))", "problem": 22, "user": "4f0369fe535dcb61093f6ab2"}, {"code": "#(reduce (fn [coll _]                              \n           (inc coll)) 0 %)", "problem": 22, "user": "4f036d9b535dcb61093f6ac1"}, {"code": "(fn f [x] (if (empty? x) 0 (+ 1 (f (rest x)))))", "problem": 22, "user": "4f0369db535dcb61093f6ab1"}, {"code": "#(inc (last (map-indexed (fn [a b] a) %)))", "problem": 22, "user": "4e690ace535d8ccf87e9fe95"}, {"code": "(fn length [seq] \n  (if (empty? seq)\n      0\n      (+ 1 (length (rest seq)))))", "problem": 22, "user": "4f036fad535dcb61093f6ac7"}, {"code": "(fn my-count [l]\n  (if (empty? l) 0\n    (+ 1 (my-count (rest l)))))", "problem": 22, "user": "4f036691535dcb61093f6aa8"}, {"code": "#(loop [seq %1 cunt 0]\n   (if (empty? seq)\n     cunt\n     (recur (rest seq) (inc cunt))))", "problem": 22, "user": "4f037310535dcb61093f6ad6"}, {"code": "(fn [seq]\n  (loop [s seq c 0]\n    (if (empty? s)\n      c\n      (recur (rest s) (inc c)))))", "problem": 22, "user": "4f036c50535dcb61093f6aba"}, {"code": "#(reduce (fn [n _] (inc n)) 0 %)", "problem": 22, "user": "4f0374a0535dcb61093f6ad9"}, {"code": "(fn cc [xs] (if (nil? (first xs)) 0 (+ 1 (cc (rest xs)))))", "problem": 22, "user": "4f0370f4535dcb61093f6acd"}, {"code": "(fn [lst]\n  (loop [cnt 0 lst lst]\n    (if (empty? lst)\n      cnt\n      (recur (+ 1 cnt) (rest lst)))))", "problem": 22, "user": "4f0379ef535dcb61093f6ae7"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4f0342e9535dcb61093f6a82"}, {"code": "(fn f [s]\n  (if (empty? s)\n    0\n    (+ 1 (f (rest s)))))", "problem": 22, "user": "4f03811e535dcb61093f6afe"}, {"code": "(fn this ([a] (this a 0)) ([a c] (if (= a []) c (recur (rest a) (+ 1 c)))))", "problem": 22, "user": "4f038017535dcb61093f6afa"}, {"code": "(fn [n]\n  (letfn [(cnt [l x]\n      (if (= '() l)\n        x\n        (cnt (rest l) (+ x 1))))]\n    (cnt n 0)))", "problem": 22, "user": "4f03850b535dcb61093f6b0a"}, {"code": "(fn f [s]\n  (if (empty? s)\n    0\n    (+ 1 (f (rest s)))))", "problem": 22, "user": "4f038484535dcb61093f6b07"}, {"code": "(fn [xs] (reduce + (map (fn [x] 1) xs)))", "problem": 22, "user": "4f0381db535dcb61093f6b02"}, {"code": "#(reduce (fn [x y] (inc x)) 0 %)", "problem": 22, "user": "4f03822f535dcb61093f6b03"}, {"code": "(fn [x] (loop [c 0 coll x] \n  (if (empty? coll) c (recur (inc c) (rest coll)))))", "problem": 22, "user": "4f038bcd535dcb61093f6b1d"}, {"code": "(fn [col] (reduce (fn [x y] (+ x 1))\n                  0 \n                  col))", "problem": 22, "user": "4f038516535dcb61093f6b0b"}, {"code": "(fn my-count [xs]\n  (if (empty? xs)\n    0\n    (+ 1 (my-count (rest xs)))))", "problem": 22, "user": "4f0388e8535dcb61093f6b17"}, {"code": "(fn [a]\n  (loop [sq a\n         n 0]\n    (if (= sq [])\n        n\n        (recur (rest sq) (inc n)))))", "problem": 22, "user": "4f038cee535dcb61093f6b20"}, {"code": "(fn count-seq \n  ([x] (count-seq x 0))\n  ([x, y]\n    (if (nil? (first x))\n        y\n        (count-seq (rest x) (+ 1 y)))))", "problem": 22, "user": "4f03626e535dcb61093f6a97"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "4e7df806535db169f9c796f8"}, {"code": "(fn looper [lst]\n  (if (= [] lst)\n    0\n    (+ 1 (looper (rest lst)))\n))", "problem": 22, "user": "4f00e9c7535dcb61093f6a33"}, {"code": "(fn foo [x] (if (empty? x) 0 (+ 1 (foo (rest x)))))", "problem": 22, "user": "4f037faf535dcb61093f6af8"}, {"code": "(fn [coll]\n  (apply + (map (fn [_] (* 1 1)) coll)))", "problem": 22, "user": "4f0348b4535dcb61093f6a84"}, {"code": "(fn [col]\n  (loop [i 0 [h & t] col]\n    (if (nil? h) i\n     (recur (inc i) t))))", "problem": 22, "user": "4f039c67535dcb61093f6b3a"}, {"code": "(fn cnt [s]\n  (if (empty? s) 0 (+ 1 (cnt (rest s)))))", "problem": 22, "user": "4f039cd3535dcb61093f6b3b"}, {"code": "(fn c [x] (if (= x '()) 0 (+ 1 (c (rest x)))))", "problem": 22, "user": "4f039f14535dcb61093f6b3e"}, {"code": "(fn mcount \n  [seq] \n    (if (= (first seq) nil) \n      0 \n      (inc (mcount (rest seq)))\n    )\n)", "problem": 22, "user": "4f039a8b535dcb61093f6b36"}, {"code": "(fn [seq] (reduce + (map (fn [x] 1) seq)))", "problem": 22, "user": "4f0398b3535dcb61093f6b32"}, {"code": "(fn my_count [l] (cond (= (list (first l)) l) 1 :else (+ 1 (my_count (rest l)))))", "problem": 22, "user": "4f038496535dcb61093f6b08"}, {"code": "(fn cnt [x]\n  ((fn rec [l c]\n    (if (seq l) (rec (rest l) (+ c 1)) c))\n  x 0))", "problem": 22, "user": "4f0399c4535dcb61093f6b34"}, {"code": "(fn [l]\r\n    (loop [mylist l cnt 0]\r\n      (if (= mylist '())\r\n        cnt\r\n        (recur (rest mylist) (inc cnt)))))", "problem": 22, "user": "4f039524535dcb61093f6b2c"}, {"code": "(fn c [s] (if (empty? s) 0 (+ 1 (c (rest s)))))", "problem": 22, "user": "4f03ac2d535dcb61093f6b4a"}, {"code": "#(loop [x %\n        result 0]\n  (if (empty? x)\n    result\n    (recur (rest x) (inc result))))", "problem": 22, "user": "4f031639535dcb61093f6a59"}, {"code": "(fn my-count [xs]\n  (if (empty? xs)\n    0\n    (+ 1 (my-count (rest xs)))))", "problem": 22, "user": "4f03857e535dcb61093f6b0d"}, {"code": "(fn len [s]\n  (reduce (fn [a _] (inc a)) 0 s))", "problem": 22, "user": "4ef0eaef535dced4c769f211"}, {"code": "(fn my-count [seq]\n  (reduce + (map (fn [x] 1) seq)))", "problem": 22, "user": "4f036384535dcb61093f6a9a"}, {"code": "(fn [coll]\n  (reduce (fn [x y] (inc x)) 0 coll))", "problem": 22, "user": "4f036c4b535dcb61093f6ab9"}, {"code": "(fn [seq]\n  (loop [seq seq c 0]\n    (if (empty? seq) c (recur (rest seq) (inc c)))))", "problem": 22, "user": "4f03d0fe535dcb61093f6b6d"}, {"code": "(fn my-count [sq]\n  ((fn my-help [sq n]\n      (if (empty? sq)\n          n\n          (my-help (rest sq) (+ n 1))))\n    sq 0))", "problem": 22, "user": "4f03cc36535dcb61093f6b69"}, {"code": "(fn [counting] (reduce + (map #(if (not= % nil) 1) counting)))", "problem": 22, "user": "4dadaa5cc9a9d6ed2f99dc57"}, {"code": "(fn my-count [coll]\n  (if (empty? coll)\n    0\n    (+ 1 (my-count (rest coll)))))", "problem": 22, "user": "4f03d4dc535dcb61093f6b6e"}, {"code": "(fn length [x] \n    (if (empty? x) \n        0\n        (+ 1 (length (rest x)))))", "problem": 22, "user": "4f03818e535dcb61093f6b00"}, {"code": "(fn [x] (+ 1 (last (map-indexed #(first (list %1 %2)) x))))", "problem": 22, "user": "4f0365fd535dcb61093f6aa5"}, {"code": "(fn [aseq]\n  (loop [seq-part aseq counts 0]\n    (if (empty? seq-part)\n      counts\n      (recur (rest seq-part) (inc counts)))))", "problem": 22, "user": "4ef3f5b0535dced4c769f22f"}, {"code": "(partial reduce (fn [n _] (+ n 1)) 0)", "problem": 22, "user": "4f03f044535dcb61093f6b83"}, {"code": "(fn count* [s] (if (first s) (+ 1 (count* (rest s))) 0))", "problem": 22, "user": "4f03edd7535dcb61093f6b80"}, {"code": "(fn [lst]\n  (letfn [(cnt [lst n]\n    (if (next lst)\n      (recur (next lst) (inc n))\n      (inc n)))]\n    (cnt lst 0)))", "problem": 22, "user": "4f03afcc535dcb61093f6b4d"}, {"code": "(fn [x]\n  (loop [s x n 0]\n    (if (not (empty? s))\n      (recur (rest s) (+ n 1))\n      n\n    )\n  )\n)", "problem": 22, "user": "4f03810c535dcb61093f6afd"}, {"code": "reduce #(or(inc%)%2)0", "problem": 22, "user": "4f03f42b535dcb61093f6b86"}, {"code": "(fn cnt [x]\n  (reduce (fn [y z] (+ 1 y)) 0 x)\n)", "problem": 22, "user": "4f03e486535dcb61093f6b78"}, {"code": "(fn my-count \n  ([x] (my-count x 0))\n  ([x y] (if (empty? x)\n              y\n              (recur (rest x) (+ y 1)))))", "problem": 22, "user": "4f03fb59535dcb61093f6b89"}, {"code": "#(.size (vec %))", "problem": 22, "user": "4f03fce2535dcb61093f6b8a"}, {"code": "(fn [x] (.size (list* x)))", "problem": 22, "user": "4f0402ce535dcb61093f6b8f"}, {"code": "(fn [seq] (reduce + (map (constantly 1) seq)))", "problem": 22, "user": "4f041583535dcb61093f6b9b"}, {"code": "(fn [x] (reduce (fn [x y] (+ x 1)) 0 x))", "problem": 22, "user": "4f04165d535dcb61093f6b9c"}, {"code": "(fn [x] (+ (.lastIndexOf (seq x) (last (seq x))) 1))", "problem": 22, "user": "4f037d9e535dcb61093f6af2"}, {"code": "(fn [s] (reduce + (map (fn [x] 1) s)))", "problem": 22, "user": "4f0397ee535dcb61093f6b30"}, {"code": "(fn [x]\n  (loop [a x n 0]\n    (if (empty? a)\n      n\n      (recur (rest a) (inc n)))))", "problem": 22, "user": "4f040bbf535dcb61093f6b95"}, {"code": "(fn len \r\n([x] (len x 1))\r\n([x n] (cond (= '() (rest x)) n :else (len (rest x) (+ 1 n)))))", "problem": 22, "user": "4f041af6535dcb61093f6ba3"}, {"code": "(fn [s]\n  (loop [n 0\n         s s]\n    (if (seq s)\n      (recur (inc n) (rest s))\n      n)))", "problem": 22, "user": "4f043ed1535dcb61093f6bb4"}, {"code": "(fn cnt [s] (letfn [(cnt-impl [s acc] (if (seq s) (recur (rest s) (+ 1 acc)) acc))] (cnt-impl s 0)))", "problem": 22, "user": "4f04428e535dcb61093f6bb6"}, {"code": "#(inc (get (last (map-indexed vector %)) 0))", "problem": 22, "user": "4f032977535dcb61093f6a6c"}, {"code": "(fn my-count [seq]\n  (loop [s seq c 0]\n    (if (nil? s)\n      c\n      (recur (next s) (inc c)))))", "problem": 22, "user": "4f0446f9535dcb61093f6bb8"}, {"code": "reduce #(do %2 (+ 1 %)) 0", "problem": 22, "user": "4f03688d535dcb61093f6aac"}, {"code": "(fn [x]\n  (loop [my-count 0\n   my-seq x]\n    (if (next my-seq)\n      (recur (inc my-count)\n\t     (next my-seq))\n      (inc my-count))))", "problem": 22, "user": "4f044285535dcb61093f6bb5"}, {"code": "(fn my-count [coll]\n  (loop [cnt 0 c coll]\n    (if (empty? c)\n      cnt\n      (recur (inc cnt) (rest c)))))", "problem": 22, "user": "4e95a440535dbda64a6f6b37"}, {"code": "(fn [s]\n  (loop [c 1\n         [h & t] s]\n           (if (seq t) (recur (inc c) t) c)))", "problem": 22, "user": "4f047dbf535dcb61093f6bce"}, {"code": "(fn my-count [seq]\n (if (empty? seq) 0 (+ 1 (my-count (rest seq))))\n)", "problem": 22, "user": "4f047542535dcb61093f6bc7"}, {"code": "#(let [mycount (fn [x acc]\n  (if (= x '())\n  acc\n  (recur (rest x) (+ acc 1))\n  ))]\n  (mycount % 0))", "problem": 22, "user": "4f039bbe535dcb61093f6b39"}, {"code": "(fn [coll]\n  (reduce (fn [v e] (inc v)) 0 coll))", "problem": 22, "user": "4e8dc25f535d65386fec213a"}, {"code": "(fn count* [x]\n  (apply + (map (fn [y] 1) x)))", "problem": 22, "user": "4f04a06d535dcb61093f6bd9"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "4f04664a535dcb61093f6bc1"}, {"code": "reduce (fn [x y] (+ 1 x)) 0", "problem": 22, "user": "4f0341bb535dcb61093f6a81"}, {"code": "reduce (fn [p l] (+ p 1))  0", "problem": 22, "user": "4f033aa3535dcb61093f6a7c"}, {"code": "(fn my-count [x]\n  ((fn _count [x n]\n    (if (first x)\n        (_count (rest x) (+ n 1))\n        n)) x 0))", "problem": 22, "user": "4f047902535dcb61093f6bcc"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "4f03b7d0535dcb61093f6b54"}, {"code": "(fn [coll]\n  (loop [coll coll cnt 1]\n    (if (next coll)\n      (recur (next coll) (inc cnt))\n      cnt)))", "problem": 22, "user": "4f03a7a4535dcb61093f6b49"}, {"code": "(fn countseq [x] (if (empty? (rest x)) 1 (inc (countseq (rest x)))))", "problem": 22, "user": "4f036d6e535dcb61093f6ac0"}, {"code": "(fn len [xs]\n  (if (empty? xs) 0 (+ 1 (len (rest xs)))))", "problem": 22, "user": "4f04d011535dcb61093f6be5"}, {"code": "(fn [col] (loop [col col i 0] (if (empty? col) i (recur (rest col) (inc i)))))", "problem": 22, "user": "4f037a34535dcb61093f6ae9"}, {"code": "(fn [l]\n  (loop [li l\n         n 0]\n         (if (nil? li)\n             n\n             (recur (next li) (+ n 1)))))", "problem": 22, "user": "4f03a3df535dcb61093f6b45"}, {"code": "(fn count2 \n  ([aseq] (count2 aseq 0))\n  ([aseq idx] (if (empty? aseq)\n                idx\n                (count2 (rest aseq) (inc idx)))))", "problem": 22, "user": "4f048f67535dcb61093f6bd3"}, {"code": "(fn num_elems[l] (if (empty? l) 0 (+ 1 (num_elems (rest l)))))", "problem": 22, "user": "4f03bd9d535dcb61093f6b5b"}, {"code": "#(apply + (map (fn [x] 1) %1))", "problem": 22, "user": "4f047c07535dcb61093f6bcd"}, {"code": "(fn f [x]\n  (let [rst (rest x)]\n    (if (= '() rst) 1\n      (+ 1 (f rst)))))", "problem": 22, "user": "4f03e462535dcb61093f6b77"}, {"code": "#(alength (to-array %))", "problem": 22, "user": "4f045946535dcb61093f6bba"}, {"code": "(fn cnt [v] (if (nil? v) 0 (+ 1 (cnt(next v)))))", "problem": 22, "user": "4f048ebc535dcb61093f6bd2"}, {"code": "#(reduce + (map (fn [x] 1) (seq %)))", "problem": 22, "user": "4ee7d113535d93acb0a6686e"}, {"code": "(fn f [x] (if (empty? x) 0 (inc (f (rest x)))))", "problem": 22, "user": "4f0514b4535dcb61093f6bf0"}, {"code": "#(reduce (fn [so-far _] (inc so-far)) 0 %)", "problem": 22, "user": "4e15f248535d04ed9115e7e6"}, {"code": "(fn [s] (reduce (fn [a b] (inc a)) 0 s))", "problem": 22, "user": "4f050dec535dcb61093f6bef"}, {"code": "(fn my-count [s]\n  (loop [s s size 0]\n    (if (empty? s)\n      size\n      (recur (rest s) (+ 1 size)))))", "problem": 22, "user": "4f03ebf7535dcb61093f6b7f"}, {"code": "(fn [c] (reduce (fn [a b] (inc a)) 0 c))", "problem": 22, "user": "4f031053535dcb61093f6a54"}, {"code": "#(+ (ffirst (reverse (map-indexed vector %))) 1)", "problem": 22, "user": "4f0412f8535dcb61093f6b99"}, {"code": "(fn sum [x]\r\n  ((fn impl [x acc]\r\n      (if (empty? x)\r\n        acc\r\n        (impl (rest x) (+ acc 1))))\r\n    x 0))", "problem": 22, "user": "4f04256d535dcb61093f6ba7"}, {"code": "(fn my_count [x] (if (empty? x) 0 (+ 1 (my_count (rest x)))))", "problem": 22, "user": "4f041ff9535dcb61093f6ba6"}, {"code": "(fn [seq] (reduce + (map (fn [x] 1) seq)))", "problem": 22, "user": "4f055d4f535dcb61093f6bf6"}, {"code": "(fn my-counter [s & num] \n  (let [n (if(nil? num) 0 num)]\n\t\t(if(empty? s) \n\t\t\tn\n\t\t\t(recur \n\t\t\t\t(rest s)\n\t\t\t\t(inc n)\n\t\t\t)\n\t\t)\n\t)\n)", "problem": 22, "user": "4f044e44535dcb61093f6bb9"}, {"code": "(fn na [c] ( if (= (first c) nil) 0 ( + 1 ( na (rest c)))))", "problem": 22, "user": "4f030775535dcb61093f6a43"}, {"code": "(fn [seq] (reduce + (map (fn [_] 1) seq)))", "problem": 22, "user": "4e707714535d5021c1a89638"}, {"code": "#(loop [l %\n        c 0]\n    (if (nil? (seq l))\n        c\n        (recur (rest l) (inc c))))", "problem": 22, "user": "4f04f847535dcb61093f6beb"}, {"code": "(partial reduce (fn[n _] (+ 1 n)) 0)", "problem": 22, "user": "4f04b66b535dcb61093f6bdd"}, {"code": "(fn [coll] (loop [cnt 0 c coll] (if (empty? c) cnt (recur (inc cnt) (rest c)))))", "problem": 22, "user": "4f037bb5535dcb61093f6aec"}, {"code": "reduce (fn [a b] (inc a)) 0", "problem": 22, "user": "4ee8fc1e535d93acb0a66887"}, {"code": "(fn [x] (reduce (fn [x y] (+ 1 x)) 0 x))", "problem": 22, "user": "4f062de8535dcb61093f6c09"}, {"code": "(fn foo [arg] (reduce (fn [m v] (+ 1 m)) 0 (seq arg)))", "problem": 22, "user": "4dbb64c8535d1e037afb21b6"}, {"code": "reduce (fn [x y] (inc x)) 0", "problem": 22, "user": "4f062d4a535dcb61093f6c08"}, {"code": "(fn f [list] \n  (loop [list list c 0]\n    (if (empty? list) c\n                     (recur (rest list) (inc c)))))", "problem": 22, "user": "4f030bd1535dcb61093f6a4b"}, {"code": "reduce (fn [a _] (inc a)) 0", "problem": 22, "user": "4f0664bd535dcb61093f6c0f"}, {"code": "#(if (list? %1) (.size %1) (.length %1))", "problem": 22, "user": "4f038567535dcb61093f6b0c"}, {"code": "(fn [l]\n  (loop [n 0\n         r l]\n    (if (empty? r)\n      n\n      (recur (inc n) (rest r)))))", "problem": 22, "user": "4f066c90535dcb61093f6c11"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "4f067029535dcb61093f6c12"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4f06c6df535dcb61093f6c13"}, {"code": "(fn [x] \n  ((fn [y n] \n    (if (first y) (recur (next y) (+ n 1)) n)) x 0))", "problem": 22, "user": "4f06cbae535dcb61093f6c14"}, {"code": "#(reduce (fn [n _] (inc n)) 0 %)", "problem": 22, "user": "4f06dcad535dcb61093f6c16"}, {"code": "(let\n  [inner\n    (fn inner2 [s, acc]\n      (if (= () (rest s))\n        acc\n        (inner2 (rest s) (+ acc 1))\n      )\n    )\n  ] (fn [s] (inner s 1))\n)", "problem": 22, "user": "4f06f90a535dcb61093f6c1b"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4f0660ee535dcb61093f6c0d"}, {"code": "(fn [seq] (loop [c 0 s seq] (if (empty? s) c (recur (inc c) (rest s)))))", "problem": 22, "user": "4ef4ab95535dced4c769f23b"}, {"code": "(fn [x] (reduce + (map (fn [k] 1) x) ))", "problem": 22, "user": "4f07056c535dcb61093f6c1d"}, {"code": "reduce (fn [a, _] (+ a 1)) 0", "problem": 22, "user": "4f070ce6535dcb61093f6c1e"}, {"code": "#(reduce (fn [a _] (inc a)) 0 %)", "problem": 22, "user": "4f038355535dcb61093f6b04"}, {"code": "(fn foo [x]\n  (loop [sum 0, s x]\n    (if (seq s)\n      (recur (inc sum) (rest s))\n      sum)))", "problem": 22, "user": "4f032f30535dcb61093f6a73"}, {"code": "(fn a [l] (if (empty? l) 0 (+ 1 (a (drop 1 l) ))))", "problem": 22, "user": "4f050377535dcb61093f6bed"}, {"code": "(fn mycnt [x]\n  (letfn [(myreccnt [y n]\n            (if (empty? y)\n              n\n              (myreccnt (rest y) (inc n))))]\n  (myreccnt x 0)))", "problem": 22, "user": "4f073003535dcb61093f6c22"}, {"code": "#(reduce (fn [a, b] (inc a)) (cons 0 %))", "problem": 22, "user": "4f031a53535dcb61093f6a63"}, {"code": "#(loop [l % c 0]\n  (if (empty? l)\n    c\n    (recur (rest l) (inc c))))", "problem": 22, "user": "4f0333f6535dcb61093f6a77"}, {"code": "(fn func [l]\n  (if (second l)\n    (+ (func (rest l)) 1)\n    1\n  )\n)", "problem": 22, "user": "4f064b1e535dcb61093f6c0b"}, {"code": "(fn cnt-elems [xs-initial]\n      ( loop [cnt 0, xs xs-initial]\n        (if (not-empty xs)\n          (recur (inc cnt) (rest xs))\n          cnt)))", "problem": 22, "user": "4f065217535dcb61093f6c0c"}, {"code": "(partial reduce (fn [a v] (inc a)) 0)", "problem": 22, "user": "4f052eaf535dcb61093f6bf3"}, {"code": "(fn [x] (loop [c 0 s x] \n  (if (= nil s) c\n    (recur (inc c) (next s))\n  ))\n)", "problem": 22, "user": "4f058c73535dcb61093f6bf9"}, {"code": "(fn [lst]\n  ((fn [l cnt]\n    (if (empty? l)\n        cnt\n        (recur (rest l) (+ cnt 1))))\n  lst 0))", "problem": 22, "user": "4f07dfa9535dcb61093f6c30"}, {"code": "(fn [seq]\n  (loop [xs seq acc 0]\n    (if (empty? xs)\n      acc\n      (recur (rest xs) (inc acc)))))", "problem": 22, "user": "4f038499535dcb61093f6b09"}, {"code": "(fn [val] \n        (loop [v val cnt 0]\n           (if (empty? v)\n               cnt\n               (recur (rest v) (inc cnt)))))", "problem": 22, "user": "4f030af7535dcb61093f6a49"}, {"code": "#(.size (vec %))", "problem": 22, "user": "4f083048535dcb61093f6c33"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4f02fdc9535dcb61093f6a42"}, {"code": "(fn cnt [lst]\n  (if (empty? lst) 0 (+ 1 (cnt (rest lst)))))", "problem": 22, "user": "4f07ad89535dcb61093f6c2a"}, {"code": "#(+ (reduce max (keys (zipmap (range) %))) 1)", "problem": 22, "user": "4f06f1db535dcb61093f6c19"}, {"code": "#(last (interleave % (iterate inc 1)))", "problem": 22, "user": "4f087a1c535dcb61093f6c3a"}, {"code": "(fn my-count [list]\n  (if (= nil (first list))\n    0\n    (+ 1 (my-count (rest list)))))", "problem": 22, "user": "4f03396d535dcb61093f6a7b"}, {"code": "(fn [s] (reduce + (map (fn [_] 1) s)))", "problem": 22, "user": "4f08b15b535dcb61093f6c40"}, {"code": "(fn [x] (reduce + (map #(or 1 %) x)))", "problem": 22, "user": "4f03b3fb535dcb61093f6b52"}, {"code": "#(loop [x % total 0] \n  (if (empty? x) \n  total \n  (recur (rest x) (+ 1 total))))", "problem": 22, "user": "4f089f1a535dcb61093f6c3c"}, {"code": "#(.size (seq %))", "problem": 22, "user": "4f0891a2535dcb61093f6c3b"}, {"code": "(fn [x]\n  (loop [ls x sum 0]\n    (if (empty? ls)\n    sum\n    (recur (rest ls) (inc sum)))))", "problem": 22, "user": "4edb314d535d10e5ff6f5317"}, {"code": "#(loop [secventa %1 nr-elem 0]\n  (if (nil? (seq secventa))\n    nr-elem\n    (recur (rest secventa) (inc nr-elem))))", "problem": 22, "user": "4f09312c535dcb61093f6c46"}, {"code": "(fn mycount [x]\n  (if (= (rest x) [])\n    1\n    (+ 1 (mycount (rest x)))))", "problem": 22, "user": "4f0369a2535dcb61093f6ab0"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4f0928db535dcb61093f6c45"}, {"code": "(fn xxx [c] (if (empty? c) 0 (inc (xxx (rest c)))))", "problem": 22, "user": "4f035397535dcb61093f6a8a"}, {"code": "(fn this [s] (if (seq s) (inc (this (rest s))) 0))", "problem": 22, "user": "4f0a4e7e535d0136e6c222f4"}, {"code": "(fn [mylist] (loop [l mylist n 0]\n  (if (empty? l) n\n    (recur (rest l) (inc n)))))", "problem": 22, "user": "4f0a5653535d0136e6c222f5"}, {"code": "(fn [c] (apply + (map (fn [x] 1) c)))", "problem": 22, "user": "4f06f1f2535dcb61093f6c1a"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4f091dcd535dcb61093f6c43"}, {"code": "(fn [s] \n  (loop [seq s n 0]\n    (if (empty? seq)\n      n\n      (recur (rest seq) (+ 1 n)))))", "problem": 22, "user": "4f0ad052535d0136e6c222f9"}, {"code": "(fn [s] (reduce + (map (fn [_] 1) s)))", "problem": 22, "user": "4e68c465535d8ccf87e9fe8a"}, {"code": "#((fn slf [l i] (if (= l '()) i (slf (rest l) (inc i)))) % 0)", "problem": 22, "user": "4f0b0834535d0136e6c222fe"}, {"code": "#(reduce (fn [a _] (inc a)) 0 %)", "problem": 22, "user": "4f0b2028535d0136e6c222ff"}, {"code": "#(loop [cnt 0 li %1](if (= () (take 1 li)) \n    cnt \n    (recur (inc cnt)(rest li))))", "problem": 22, "user": "4ebbb6bc535dfed6da9c6d71"}, {"code": "#(.size (vec %))", "problem": 22, "user": "4ee67364535d93acb0a6685f"}, {"code": "reduce (fn [x y] (+ 1 x)) 0", "problem": 22, "user": "4e55b3dc535d8a8b8723a27f"}, {"code": "(fn [items]\n  (loop  [mycnt 1 items items] \n    (if (= (rest items) '())\n      mycnt\n      (recur (inc mycnt) (rest items)))))", "problem": 22, "user": "4f0ad254535d0136e6c222fa"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4f0a8f28535d0136e6c222f8"}, {"code": "(fn length [seq]\n  (if (empty? seq)\n    0\n    (+ 1 (length (rest seq)))) )", "problem": 22, "user": "4f0a2ed1535d0136e6c222f3"}, {"code": "reduce #(do %& (inc %1)) 0", "problem": 22, "user": "4f03bf5e535dcb61093f6b5d"}, {"code": "(fn my-count [coll]\n  (loop [coll coll, idx 0]\n    (if (empty? coll) idx\n      (recur (rest coll) (inc idx)))))", "problem": 22, "user": "4f07bc41535dcb61093f6c2c"}, {"code": "#(reduce (fn [n i] (+ 1 n)) 0 %)", "problem": 22, "user": "4f0bc223535d0136e6c22307"}, {"code": "#(reduce + (map (fn [_] 1) %))", "problem": 22, "user": "4e6aba11535d8ccf87e9feff"}, {"code": "(fn [x] \n  (reduce + (map (fn [x] (+ 1)) x)))", "problem": 22, "user": "4f0bba3d535d0136e6c22306"}, {"code": "#(reduce (fn [x y] (+ x 1)) 0 %1)", "problem": 22, "user": "4f00ac07535dcb61093f6a30"}, {"code": "(fn [n x] (if (next x) (recur (+ n 1) (next x)) n)) 1", "problem": 22, "user": "4f084e44535dcb61093f6c34"}, {"code": "reduce (fn [x _] (inc x)) 0", "problem": 22, "user": "4f0c4518535d0136e6c2230b"}, {"code": "reduce #(inc (first %&)) 0", "problem": 22, "user": "4f0c84ce535d0136e6c2230e"}, {"code": "(partial reduce (fn [acc _ ] (inc acc)) \n                0)\n; deliberately non-recursive for fun", "problem": 22, "user": "4efa3d4b535dced4c769f270"}, {"code": "#(loop [l % c 0] (if (= () l) c (recur (rest l) (inc c))))", "problem": 22, "user": "4f0ce26c535d0136e6c22312"}, {"code": "(fn [s] (reduce + (map (fn [_] 1) s)))", "problem": 22, "user": "4dad7adac9a9d6ed0599dc57"}, {"code": "(fn [x] ((fn [y z] (if (empty? y) z (recur (rest y) (inc z)))) (seq x) 0))", "problem": 22, "user": "4e717065535d5021c1a8964a"}, {"code": "(fn mycount [xs] (if (empty? xs) 0 (+ 1 (mycount (rest xs)))))", "problem": 22, "user": "4f0d6686535d0136e6c22318"}, {"code": "(fn my-count [s]\n    (if (empty? s)\n      0\n      (+ (my-count (rest s)) 1)))", "problem": 22, "user": "4f043663535dcb61093f6bb0"}, {"code": "#(reduce (fn [sum,coll] (+ 1 sum)) 0 %)", "problem": 22, "user": "4f0af7e9535d0136e6c222fc"}, {"code": "(fn [y] (reduce + (map (fn [x] 1) y)))", "problem": 22, "user": "4f05adae535dcb61093f6bfd"}, {"code": "(fn my-count [s]\n  (if (empty? s)\n    0\n    (+ 1 (my-count (rest s)))))", "problem": 22, "user": "4ec1b80c535dfed6da9c6db6"}, {"code": "(fn [l]\n  (loop [i 0 l l]\n    (cond \n      (empty? l) i\n      :else (recur (+ i 1) (rest l)))))", "problem": 22, "user": "4f0e0aee535d0136e6c22320"}, {"code": "(fn [a] (reduce (fn [a b] (inc a)) 0 a))", "problem": 22, "user": "4ebca352535dfed6da9c6d88"}, {"code": "#(loop [x % size 0]\n     (if (nil? (first x))\n\t       size\n\t       (recur (rest x) (inc size))))", "problem": 22, "user": "4f066916535dcb61093f6c10"}, {"code": "#(inc (first (last (map-indexed list %))))", "problem": 22, "user": "4f0e4ebd535d0136e6c22322"}, {"code": "(fn my-cnt [x]\n  ((fn my-cnt-rec [x acc]\n    (if (empty? x)\n        acc\n        (my-cnt-rec (rest x) (+ acc 1))\n    )\n  ) x 0)\n)", "problem": 22, "user": "4f0df199535d0136e6c2231e"}, {"code": "(fn [s] (reduce (fn [cnt _] (inc cnt)) 0 s))", "problem": 22, "user": "4f0ef874535d0136e6c22328"}, {"code": "(fn count-seq [s]\n  (loop [vals s c 0]\n    (if-not (seq vals)\n      c\n    (recur (rest vals) (+ c 1)))))", "problem": 22, "user": "4f0f03ce535d0136e6c2232a"}, {"code": "(fn my-count\n  ([x] (my-count x 0))\n  ([x i] \n    (if (empty? x) \n      i\n      (my-count (rest x) (+ i 1))\n    )\n  )\n)", "problem": 22, "user": "4f073429535dcb61093f6c23"}, {"code": "(fn cnt [x]\n  (if (empty? x)\n    0\n    (inc (cnt (rest x)))))", "problem": 22, "user": "4f0f174c535d0136e6c22330"}, {"code": "(fn [list]\n  ((fn cnt [list n]\n    (if (= () (rest list))\n      n\n      (cnt (rest list) (+ 1 n)))) \n  list 1))", "problem": 22, "user": "4f0f3830535d0136e6c22338"}, {"code": "(fn cnt [list] (if (= list '()) 0 (+ 1 (cnt (rest list)))))", "problem": 22, "user": "4f0f8010535d0136e6c22340"}, {"code": "(fn my-count\n  ([seq] (my-count seq 0))\n  ([seq cnt]\n    (if (empty? seq)\n      cnt\n      (my-count (rest seq) (inc cnt)))))", "problem": 22, "user": "4f0feb75535d64f60314640f"}, {"code": "reduce (fn [x _] (inc x)) 0", "problem": 22, "user": "4f0fe835535d64f60314640e"}, {"code": "#(if(= (type %) java.lang.String) (.length %) (.size %))", "problem": 22, "user": "4f0f1599535d0136e6c2232f"}, {"code": "(fn [y] (reduce + (map (fn [x] 1) y)))", "problem": 22, "user": "4f0f388e535d0136e6c22339"}, {"code": "(fn [x] (reduce + (map (fn [x] 1) x)))", "problem": 22, "user": "4f1044af535d64f603146415"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4f0f335f535d0136e6c22334"}, {"code": "#(letfn\n  [(cnt [xs n] (if (nil? (seq xs)) n (recur (rest xs) (inc n))))]\n  (cnt % 0))", "problem": 22, "user": "4f0f9df7535d0136e6c22342"}, {"code": "#(loop [i 0\n        coll (seq %1)]\n   (if (empty? coll)\n     i\n     (recur (inc i) (rest coll))))", "problem": 22, "user": "4eb9d8f8535dfed6da9c6d61"}, {"code": "#(reduce (fn [acc _] (inc acc)) 0 %)", "problem": 22, "user": "4ebcb8ff535dfed6da9c6d8a"}, {"code": "reduce #(if true (+ %1 1) (%2)) 0", "problem": 22, "user": "4f0cd1c9535d0136e6c22311"}, {"code": "(fn [coll] \n  (reduce (fn [acc _] (inc acc)) 0 coll))", "problem": 22, "user": "4f038ed6535dcb61093f6b24"}, {"code": "(fn [ps]\n  (loop [s ps n 0]\n    (if (empty? s)\n      n\n      (recur (rest s) (inc n)))))", "problem": 22, "user": "4f1052b9535d64f603146418"}, {"code": "(fn [orig]\n  (loop [\n    o orig\n    c 0]\n    (if (empty? o)\n      c\n      (recur (rest o) (inc c)))))", "problem": 22, "user": "4f08a8a2535dcb61093f6c3d"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "4f10175e535d64f603146411"}, {"code": "reduce (fn [r _] (inc r)) 0", "problem": 22, "user": "4eb298c1535d7eef3080734b"}, {"code": "(fn count*\n  [coll]\n  (reduce + (map (fn [n] 1) coll)))", "problem": 22, "user": "4dda44f2535d02782fcbe9f1"}, {"code": "#(apply + (map (fn [_] 1) %))", "problem": 22, "user": "4f0f40d3535d0136e6c2233b"}, {"code": "reduce (fn [s _] (+ s 1)) 0", "problem": 22, "user": "4f0f36a7535d0136e6c22336"}, {"code": "(fn cnt [x] (if (= x '()) 0 (+ 1 (cnt (rest x)))))", "problem": 22, "user": "4f11dea7535d64f603146425"}, {"code": "(comp last butlast (partial interleave (iterate inc 1)))", "problem": 22, "user": "4f0e995e535d0136e6c22326"}, {"code": "(fn [lst]\n  (loop [my-lst lst acc 0]\n    (if (empty? my-lst)\n        acc\n        (recur (rest my-lst) (+ acc 1)))))", "problem": 22, "user": "4f122bfe535d64f603146426"}, {"code": "(fn c [s] (if (empty? s) 0 (+ 1 (c (rest s)))))", "problem": 22, "user": "4f0cc259535d0136e6c22310"}, {"code": "(fn [xs]\n  (loop [v xs, n 0]\n    (if (empty? v)\n      n\n      (recur (rest v) (inc n)))))", "problem": 22, "user": "4f128865535d64f603146428"}, {"code": "reduce (fn [a _] (+ a 1)) 0", "problem": 22, "user": "4f12ab23535d64f603146429"}, {"code": "(fn length [l] (if (empty? l) 0 (+ 1 (length (rest l)))))", "problem": 22, "user": "4f12d1b0535d64f60314642b"}, {"code": "(fn number [seq]\n  (if (empty? seq) 0\n      (+ 1 (number (rest seq)))))", "problem": 22, "user": "4f13047d535d64f60314642c"}, {"code": "#(loop [l % x 0]\n  (if (nil? (seq l))\n    x\n    (recur (rest l) (inc x))))", "problem": 22, "user": "4f141dee535d64f603146434"}, {"code": "(fn [x] (let [t (fn [x n] (if (empty? x) n (recur (rest x) (inc n))))] (t x 0)))", "problem": 22, "user": "4f143c04535d64f603146437"}, {"code": "(fn [s]\n  (loop [acc 0 s s]\n    (if (empty? s) acc\n      (recur (inc acc) (next s)))))", "problem": 22, "user": "4f1473eb535d64f603146439"}, {"code": "(fn my-count [coll] (if (empty? coll) 0 (+ 1 (my-count (rest coll)))))", "problem": 22, "user": "4f149e0f535d64f60314643d"}, {"code": "#(reduce (fn [tot _] (inc tot)) 0 %)", "problem": 22, "user": "4f14880f535d64f60314643b"}, {"code": "(fn [sqn]\n  (inc (last (map-indexed (fn [i,v] i) sqn))))", "problem": 22, "user": "4f14e64e535d64f60314643f"}, {"code": "reduce (fn [a, b]\n           (if (not (nil? b)) (+ a 1)\n                     a)) 0", "problem": 22, "user": "4edffe54535d10e5ff6f5347"}, {"code": "(fn [l]\n  (reduce\n    (fn [acc each] (+ acc 1))\n    0\n    l))", "problem": 22, "user": "4f1569bb535d64f603146441"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4f14fbec535d64f603146440"}, {"code": "(fn [xs] \n  (loop [lxs xs\n         cnt 0]\n    (if (empty? lxs)\n      cnt\n      (recur (next lxs) (inc cnt)))))", "problem": 22, "user": "4f159ea6535d64f603146445"}, {"code": "(fn [x] (first (last (map vector (iterate inc 1) x))))", "problem": 22, "user": "4eeb8f68535d93acb0a668a9"}, {"code": "#(loop [c 0 a %]\n       (if (= a [])\n            c\n          (recur (+ c 1) (rest a))))", "problem": 22, "user": "4f1595da535d64f603146444"}, {"code": "(fn [x] ((fn cnt [y z] (if (not-empty y) (cnt (rest y) (+ 1 z)) z )) x 0))", "problem": 22, "user": "4f05c087535dcb61093f6c00"}, {"code": "reduce (fn [x y](+ x 1)) 0", "problem": 22, "user": "4f15de56535d64f603146448"}, {"code": "(partial reduce (fn [n _] (inc n)) 0)", "problem": 22, "user": "4f107e0e535d64f60314641c"}, {"code": "#(loop [x % c 0]\n    (if (seq x)\n       (recur (rest x) (inc c))\n       c))", "problem": 22, "user": "4ef3db04535dced4c769f22e"}, {"code": "(fn [l] (reduce + (map (fn [_] 1) l)))", "problem": 22, "user": "4dbfaf8f535d020aff1edf78"}, {"code": "(fn [seq] (reduce + (map (fn [x] 1) seq)))", "problem": 22, "user": "4f16ef8a535d64f603146451"}, {"code": "#(reduce + (map (fn[x]1) %))", "problem": 22, "user": "4f11b078535d64f603146422"}, {"code": "(fn\n  [list]\n  ((fn \n    [list acc]\n      (if (empty? list) acc (recur (rest list) (inc acc)))\n    ) list 0))", "problem": 22, "user": "4ed8715c535d10e5ff6f52f9"}, {"code": "(fn [x] \n  ((fn blah [l c] \n    (if (nil? (first l)) \n      c \n      (blah (rest l) (+ c 1))\n   )) x 0)\n)", "problem": 22, "user": "4f16d6ed535d64f60314644f"}, {"code": "reduce (fn [x _] (inc x)) 0", "problem": 22, "user": "4f16d3fd535d64f60314644e"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4f14ae6f535d64f60314643e"}, {"code": "(fn my-count [items]\n    (if (empty? items)\n      0\n     (inc (my-count (rest items)))))", "problem": 22, "user": "4f0d093b535d0136e6c22313"}, {"code": "(fn [x]\n  (reduce + \n    (map (fn [y] 1) x))\n)", "problem": 22, "user": "4f0f7f2d535d0136e6c2233f"}, {"code": "(fn c [x] (if (= '() x) 0 (+ 1 (c (rest x)))))", "problem": 22, "user": "4f17ab99535d64f603146457"}, {"code": "(fn my-count [x]\n  (if (next x)\n    (+ (my-count (rest x)) 1)\n    1))", "problem": 22, "user": "4f04d312535dcb61093f6be7"}, {"code": "reduce (fn [x y] (inc x)) 0", "problem": 22, "user": "4f0d5338535d0136e6c22316"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4e68d816535d8ccf87e9fe8e"}, {"code": "(fn [coll]\n  ((fn my-count [coll acc]\n    (if (seq coll)\n      (my-count (rest coll) (+ acc 1))\n       acc)) coll 0))", "problem": 22, "user": "4f1872a2535d64f60314645a"}, {"code": "#(loop [s % acc 0] (if (nil? (seq s)) acc (recur (rest s) (inc acc))))", "problem": 22, "user": "4e6b6294535d8ccf87e9ff11"}, {"code": "#(.size (vec %))", "problem": 22, "user": "4f18ea00535d64f603146461"}, {"code": "(fn [lst]\n  (reduce (fn [acc elm]\n    (+ acc 1)) 0 lst))", "problem": 22, "user": "4f11caf6535d64f603146424"}, {"code": "#(first (last (map vector (iterate inc 1) %)))", "problem": 22, "user": "4eef9164535d305ff5cb7f21"}, {"code": "(fn length [coll]\n  (loop [coll coll\n         result 0]\n     (if (empty? coll)\n       result\n       (recur (rest coll) (inc result)))))", "problem": 22, "user": "4e6698b9535d8ccf87e9fe7a"}, {"code": "(fn c [x]\n  (if (= (first x) nil)\n    0\n    (+ 1 (c (rest x)))))", "problem": 22, "user": "4f19b55b535d64f603146469"}, {"code": "(fn [ls]\n  (loop [l ls c 0]\n    (if (seq l)\n      (recur (rest l) (inc c))\n      c)))", "problem": 22, "user": "4f1b0ab3535d64f603146474"}, {"code": "(fn [xs] (reduce (fn [x y] (+ 1 x)) 0 xs))", "problem": 22, "user": "4f1ae082535d64f603146470"}, {"code": "#((comp inc first last) (map-indexed vector %))", "problem": 22, "user": "4f1a516b535d64f60314646b"}, {"code": "(fn [lat] (reduce (fn [t _] (+ t 1)) 0 lat))", "problem": 22, "user": "4db97911535d1e037afb21a2"}, {"code": "reduce (fn [c _] (inc c)) 0", "problem": 22, "user": "4f1b92d1535d64f60314647b"}, {"code": "(fn a[lst]\n  (reduce + (map #(first (list 1 %1)) lst))\n)", "problem": 22, "user": "4f1b9c11535d64f60314647c"}, {"code": "(fn [theSeq] (\n(fn get-count [theSeq theCount]\n  (if (= '() theSeq)\n    theCount\n    (get-count (rest theSeq) (+ theCount 1)))) theSeq 0))", "problem": 22, "user": "4f1c2336535d64f60314647f"}, {"code": "(fn [x] (apply + (map #(first '(1 %)) x)))", "problem": 22, "user": "4f1c6986535d64f603146481"}, {"code": "#(reduce (fn [acc _] (inc acc)) 0 %)", "problem": 22, "user": "4e8ccd16535d65386fec212e"}, {"code": "(fn [s] (letfn [(my-count [n l] (if (empty? l) n (recur (+ 1 n) (rest l))))]\n(my-count 0 s)))", "problem": 22, "user": "4f16213f535d64f603146449"}, {"code": "#(reduce (fn [x y] (+ 1 x)) 0 %)", "problem": 22, "user": "4f1cda06535d64f603146486"}, {"code": "(fn [col] (last (map-indexed (fn [i, x] (+ i 1)) col)))", "problem": 22, "user": "4f193dab535d64f603146465"}, {"code": "(fn count-elements [sequence]\r\n  (loop [sq sequence, result 0]\r\n    (if (nil? (seq sq))\r\n      result\r\n      (recur (rest sq) (inc result)))))", "problem": 22, "user": "4f17df72535d64f603146458"}, {"code": "(fn [s]\n  (loop [mys s n 0]\n    (if (first mys) (recur (rest mys) (+ n 1))\n    n)))", "problem": 22, "user": "4f1d467c535d64f60314648a"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4f18677d535d64f603146459"}, {"code": "#(reduce (fn [a b] (inc a)) 0 %)", "problem": 22, "user": "4f1c9652535d64f603146483"}, {"code": "(fn length [l] \n  (loop [acc 0\n    ls l]\n    (if (nil? ls)\n      acc\n      (recur (inc acc) (next ls)))))", "problem": 22, "user": "4f1c2a3a535d64f603146480"}, {"code": "(fn count-a-seq [lat]\n  (reduce (fn [x y] (+ x 1)) 0 lat))", "problem": 22, "user": "4f1e0b39535d64f603146492"}, {"code": "(fn [y] (reduce + (map (fn [x] 1) y)))", "problem": 22, "user": "4f1b1f31535d64f603146477"}, {"code": "#( loop [copylist nil i 0 ]\n (if (= copylist (seq %1))\ni\n(recur (conj copylist (nth (reverse %1) i )) (inc i))\n))", "problem": 22, "user": "4ea31da2535d7eef308072c1"}, {"code": "#(.size (vec %))", "problem": 22, "user": "4f1e4ab5535d64f603146496"}, {"code": "reduce (fn [x xs] (+ 1 x)) 0", "problem": 22, "user": "4ee88f29535d93acb0a66882"}, {"code": "(fn [seq] \n  (loop [list seq, cnt 0]\n    (if (empty? list)\n      cnt\n      (recur (rest list) (inc cnt)))))", "problem": 22, "user": "4ed339ce535d44c135fd68eb"}, {"code": "(fn [s] \n  (loop [sq s cnt 0]\n    (if (empty? sq)\n        cnt\n        (recur (next sq) (inc cnt)))))", "problem": 22, "user": "4e00af25535d04ed9115e78e"}, {"code": "(fn llll[x] (if (empty? x) 0 (+ 1 (llll (rest x)))))", "problem": 22, "user": "4f1fd734535d64f6031464a5"}, {"code": "(fn my-count [a-seq]\n  (loop [n 0 x a-seq]\n    (if (= nil (first x))\n      n\n      (recur (inc n) (rest x)))))", "problem": 22, "user": "4f1f1a9d535d64f60314649d"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4f20173a535d64f6031464a9"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "4f169a0f535d64f60314644c"}, {"code": "#(loop [s % n 0] (if (seq s) (recur (rest s) (inc n)) n))", "problem": 22, "user": "4efd8b67535de96065cf5085"}, {"code": "(fn [coll]\n  (reduce \n    (fn [total, item] (inc total))\n    0 \n    coll))", "problem": 22, "user": "4f1abbfb535d64f60314646e"}, {"code": "(fn bob\n  ([lis] (bob lis 0))\n  ([lis c] (if (= lis [])\n             c\n             (bob (rest lis) (+ 1 c))\n             )\n    )\n  )", "problem": 22, "user": "4f2004a1535d64f6031464a7"}, {"code": "reduce (fn ([counter item] (+ counter 1))) 0", "problem": 22, "user": "4f215350e4b0d66497709fd0"}, {"code": "(fn [lst]\n  (reduce \n    (fn [x y] (+ x 1)) 0 lst))", "problem": 22, "user": "4f032cb1535dcb61093f6a70"}, {"code": "(fn ! [l]\n  (cond\n    (empty? l) 0\n    :else (+ 1 (! (rest l)))))", "problem": 22, "user": "4f22e667e4b0d66497709fdb"}, {"code": "(fn num-el [sqn & cur]\r\n  (if (empty? sqn)\r\n    cur\r\n    (recur \r\n      (rest sqn)\r\n      (if (nil? cur)\r\n        1\r\n        (inc cur)))))", "problem": 22, "user": "4f20c040e4b0d66497709fcb"}, {"code": "(fn [l]\n  (loop [x l,c 0]\n    (if (nil? x)\n      c\n      (recur (next x)(inc c)))))", "problem": 22, "user": "4ef2d6c5535dced4c769f222"}, {"code": "(fn [l]\n   (loop [m l\n          n 0]\n     (cond\n      (empty? m) n\n      :else (recur (rest m) (inc n)))))", "problem": 22, "user": "4f230dfbe4b0d66497709fe0"}, {"code": "(fn [s] (reduce + (map (fn [_] 1) s)))", "problem": 22, "user": "4f165655535d64f60314644a"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4f230adde4b0d66497709fdf"}, {"code": "#(reduce (fn [x el] (inc x)) 0 %)", "problem": 22, "user": "4f240007e4b0d66497709fe6"}, {"code": "(fn myfn [the-list] \n  (if (empty? the-list) \n    0\n    (+ 1 (myfn (rest the-list)))\n  )\n)", "problem": 22, "user": "4f0d1cf3535d0136e6c22314"}, {"code": "(fn [x] (reduce (fn [v c] (+ v 1)) 0 x))", "problem": 22, "user": "4f1d1299535d64f603146487"}, {"code": "(fn f[l] (\r\n  if (nil? l) \r\n    0\r\n    (inc (f (next l)))\r\n))", "problem": 22, "user": "4f245d77e4b0d66497709feb"}, {"code": "reduce (fn [s c] (+ s 1)) 0", "problem": 22, "user": "4eb02674535d7eef30807338"}, {"code": "#(reduce (fn [x1 _] (inc x1)) 0 %)", "problem": 22, "user": "4e48b61d535dc968683fc4be"}, {"code": "(fn [v]\n  (loop [p 0]\n    (if (nil? (nth v p nil))\n      p\n      (recur (+ p 1))\n      )\n    )        \n)", "problem": 22, "user": "4f24165fe4b0d66497709fe7"}, {"code": "reduce (fn [n _] (inc n)) 0", "problem": 22, "user": "4f251302e4b0d66497709ff0"}, {"code": "#(loop [s %\n        c 0]\n   (if (not (empty? s)) \n       (recur (rest s) \n              (inc c))\n       c\n   )\n)", "problem": 22, "user": "4ee5f2fe535d93acb0a66852"}, {"code": "reduce (fn [x y] (inc x)) 0", "problem": 22, "user": "4f25981ee4b0d66497709ff9"}, {"code": ";(fn ny-count [l]\n;  (loop [l l\n;         c 0]\n;    (if (empty? l)\n;      c\n;      (recur (rest l) (inc c)))))\n\n#(reduce + (map (constantly 1) %))", "problem": 22, "user": "4f07c8c3535dcb61093f6c2d"}, {"code": "#(reduce (fn [a b] (inc a)) 0 %)", "problem": 22, "user": "4f15b309535d64f603146446"}, {"code": "(fn [s] (reduce + (map #(if(nil? %) 0 1) s)))", "problem": 22, "user": "4f1d6fbb535d64f60314648c"}, {"code": "(fn [xs]\n  (loop [s xs c 0]\n    (if (empty? s)\n      c\n      (recur (rest s) (inc c)))))", "problem": 22, "user": "4f24b023e4b0d66497709fee"}, {"code": "(fn [x] (loop [l x \n               c 0]\n          (if (not (seq l))\n            c\n            (recur (rest l) (inc c)))))", "problem": 22, "user": "4f2673d7e4b0d6649770a002"}, {"code": "(fn [coll] (reduce + (map (fn [x] 1) coll)))", "problem": 22, "user": "4f26c3b5e4b0d6649770a005"}, {"code": "(fn [coll] (loop [cnt 0 c coll] (if (empty? c) cnt (recur (inc cnt) (rest c)))))", "problem": 22, "user": "4f171e7d535d64f603146452"}, {"code": "reduce (fn [accumulator _] (inc accumulator)) 0", "problem": 22, "user": "4f26c487e4b0d6649770a006"}, {"code": "(fn [x] (loop [lst x  result 0] (if (empty? lst) result (recur (rest lst) (+ result 1)))))", "problem": 22, "user": "4f1684c7535d64f60314644b"}, {"code": "(fn [seq]\n  (loop [seq seq acc 0]\n    (if (empty? seq)\n       acc\n       (recur (rest seq) (inc acc)))))", "problem": 22, "user": "4f26d6d9e4b0d6649770a007"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "4f2858ece4b0d6649770a016"}, {"code": "(fn len [s] (if (empty? s) 0 (+ 1 (len (rest s)))))", "problem": 22, "user": "4f280840e4b0d6649770a010"}, {"code": "#(reduce (fn [a, _] (inc a)) 0 %)", "problem": 22, "user": "4f2861eee4b0d6649770a017"}, {"code": "#(reduce + (map (fn [item] 1) %))", "problem": 22, "user": "4f284db6e4b0d6649770a014"}, {"code": "(fn [lst]\n  (loop [lst lst\n         ret 0]\n    (if (seq lst)\n      (recur (rest lst) (inc ret))\n      ret)))", "problem": 22, "user": "4f28c979e4b0d6649770a01a"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4ef18428535dced4c769f216"}, {"code": "#(loop [i 0 j %] (if (not= j nil) (recur (inc i) (next j)) i))", "problem": 22, "user": "4f28d266e4b0d6649770a01c"}, {"code": "(fn [ss]\n  (loop [s ss l 0]\n    (if (= s '())\nl\n(recur (rest s) (inc l)))))", "problem": 22, "user": "4f287f96e4b0d6649770a018"}, {"code": "#(\n  (fn [seq c] \n    (if (= nil (first seq)) \n        c\n        (recur (rest seq) (+ 1 c))\n      )\n    )\n  % 0)", "problem": 22, "user": "4f294c48e4b0d6649770a023"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4f282da7e4b0d6649770a013"}, {"code": "#(loop[x%1 l 0](if(=[]x)l(recur(rest x)(+ 1 l))))", "problem": 22, "user": "4f296a80e4b0d6649770a02a"}, {"code": "(fn [args]\n    (loop [my-list args, n 0]\n        (if (= '() my-list)\n            n\n            (recur (rest my-list), (inc n))\n        )\n    )\n)", "problem": 22, "user": "4f2965ffe4b0d6649770a029"}, {"code": "(fn [aseq] (reduce (fn [accumulated nextElem] (+ accumulated 1) ) 0 aseq))", "problem": 22, "user": "4f299ad8e4b0d6649770a02c"}, {"code": "(fn my-count \n  ([lst] (apply my-count lst 0 lst))\n  ([lst, cnt] cnt)\n  ([lst, cnt, & more] \n    (apply my-count lst (inc cnt) (rest more))))", "problem": 22, "user": "4f21838fe4b0d66497709fd2"}, {"code": "reduce (fn [c v] (inc c)) 0", "problem": 22, "user": "4f29e66fe4b0d6649770a035"}, {"code": "#(reduce (fn [x y] (inc x)) 0 %)", "problem": 22, "user": "4f29cdc8e4b0d6649770a033"}, {"code": "(fn [xs]\n  (apply + (map (fn [_] 1) xs)))", "problem": 22, "user": "4f2a35ace4b0d6649770a03a"}, {"code": "(fn len [x] (if (empty? x) 0 (+ 1 (len (rest x)))))", "problem": 22, "user": "4f2a6169e4b0d6649770a03d"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4f2acd70e4b0d6649770a041"}, {"code": "#((fn [sequence num] (if (nil? (first sequence)) num (recur (rest sequence) (+ num 1)))) % 0)", "problem": 22, "user": "4f284e7ce4b0d6649770a015"}, {"code": "(fn [seq]\r\n  (letfn [(x [seq n] (if (empty? seq) n (recur (rest seq) (+ n 1))))]\r\n    (x seq 0)))", "problem": 22, "user": "4f2893d0e4b0d6649770a019"}, {"code": "(fn [col] \n  (let [x 0 f (fn [col x] \n    (if (empty? col) x \n      (recur (rest col) (inc x))))]\n    (f col 0)))", "problem": 22, "user": "4f1427f8535d64f603146435"}, {"code": "(fn [s] (loop [cnt 0 y s] (if (empty? y) cnt (recur (inc cnt) (rest y)))))", "problem": 22, "user": "4e6ec58c535d5021c1a89611"}, {"code": "(fn mycount [coll] (apply + (map (fn [x] 1) coll)))", "problem": 22, "user": "4f2b0951e4b0d6649770a045"}, {"code": "#(+ (first (last (map vector (iterate inc 0) %))) 1)", "problem": 22, "user": "4f2b0fdee4b0d6649770a046"}, {"code": "#(reduce (fn [x y] (inc x)) 0 %)", "problem": 22, "user": "4f2c593ee4b0d6649770a053"}, {"code": "reduce (fn [l i] (inc l)) 0", "problem": 22, "user": "4f1d1d95535d64f603146488"}, {"code": "(fn [x] (reduce (fn[y z] (+ y 1)) 0 x))", "problem": 22, "user": "4f033c99535dcb61093f6a7e"}, {"code": "(fn cnt [x] (if (= x '()) 0 (inc (cnt (rest x)))))", "problem": 22, "user": "4f1e1209535d64f603146493"}, {"code": "#(apply + (map (fn [_] 1) %))", "problem": 22, "user": "4f2cdd42e4b0d6649770a055"}, {"code": "(fn [s] (reduce + (map (fn [x] 1) s)))", "problem": 22, "user": "4f189b42535d64f60314645d"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4f2a7174e4b0d6649770a03e"}, {"code": "#(inc (first (last (map-indexed vector %))))", "problem": 22, "user": "4f05a3f7535dcb61093f6bfb"}, {"code": "(fn [x]\n  ((fn [x n]\n    (if (= (rest x) ())\n      n\n      (recur (rest x) (+ n 1)))\n      )\n  x 1))", "problem": 22, "user": "4f2b1893e4b0d6649770a047"}, {"code": "(fn [l] (reduce + (map (fn [x] 1) l)))", "problem": 22, "user": "4f280b9ae4b0d6649770a011"}, {"code": "#(reduce (fn [x _] (inc x)) 0 %)", "problem": 22, "user": "4f2d5f5de4b0d6649770a05a"}, {"code": "(fn my-count [l]\r\n  (cond\r\n    (nil? l) 0\r\n    :else (inc (my-count (next l)))))", "problem": 22, "user": "4f244f26e4b0d66497709fea"}, {"code": "(fn foo [x] (if (not-empty x) (inc (foo (rest x))) 0))", "problem": 22, "user": "4f1887ef535d64f60314645b"}, {"code": "(fn [c] \n  (loop [cc c n 0] \n    (if (empty? cc)\n      n\n      (recur (rest cc) (inc n)))))", "problem": 22, "user": "4f0f01c0535d0136e6c22329"}, {"code": "(fn [x]\n  (loop [n 0 f x]\n    (if (empty? f)\n       n\n       (recur (inc n) (rest f)))))", "problem": 22, "user": "4f2ca22fe4b0d6649770a054"}, {"code": "(fn c[x] (if (empty? x) 0 (inc (c (rest x)))))", "problem": 22, "user": "4f2c2ccbe4b0d6649770a050"}, {"code": "(fn this\n  ([xs acc] (if (empty? xs) acc (recur (rest xs) (inc acc))))\n  ([xs] (this xs 0)))", "problem": 22, "user": "4f2e0369e4b0d6649770a064"}, {"code": "reduce (fn [x y] (+ x 1)) 0", "problem": 22, "user": "4ea63794535d7eef308072e3"}, {"code": "#(reduce (fn [x _] (inc x)) 0 %)", "problem": 22, "user": "4f2582bae4b0d66497709ff6"}, {"code": "(fn [l]\n  ((fn cnt-elts [l cnt]\n    (if (empty? l)\n      cnt\n      (cnt-elts (rest l) (+ 1 cnt))))\n    l 0))", "problem": 22, "user": "4f2e2ad8e4b0d6649770a066"}, {"code": "#(reduce + 0 (map (fn [x] 1) %))", "problem": 22, "user": "4f2de7e9e4b0d6649770a061"}, {"code": "(fn [y] (reduce + (map (fn [z] 1) y)))", "problem": 22, "user": "4f0404df535dcb61093f6b91"}, {"code": "(fn [coll] (reduce + (map (fn [x] 1) coll)))", "problem": 22, "user": "4f2de9e8e4b0d6649770a062"}, {"code": "#(apply + (map (fn [x] 1) %))", "problem": 22, "user": "4f2ef48be4b0d6649770a06c"}, {"code": "reduce (fn [p x] (inc p)) 0", "problem": 22, "user": "4f2f6678e4b0d6649770a06e"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "4f2fa32ce4b0d6649770a070"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "4f2a3f15e4b0d6649770a03c"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4ee1f2ba535d10e5ff6f535f"}, {"code": "(fn [s]\n   (reduce (fn [a b] (inc a)) 0 s))", "problem": 22, "user": "4f301d02e4b0d6649770a072"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4f312c35e4b0d6649770a084"}, {"code": "(fn [coll] (loop [x coll mycount 0] (if (nil? (first x)) mycount (recur (rest x) (inc mycount)))))", "problem": 22, "user": "4f10234c535d64f603146413"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4f3142d0e4b0d6649770a085"}, {"code": "#(reduce + (vals (frequencies %)))", "problem": 22, "user": "4f307b02e4b0d6649770a079"}, {"code": "(fn [s] (reduce (fn [a b] (+ 1 a)) 0 s))", "problem": 22, "user": "4f31519ae4b0d6649770a086"}, {"code": "#(reduce (fn [c _] (inc c)) 0 %)", "problem": 22, "user": "4f31f9e4e4b0d6649770a08c"}, {"code": "(fn [lst] (reduce (fn [a b] (inc a)) 0 lst))", "problem": 22, "user": "4eb9353f535dfed6da9c6d4e"}, {"code": "(fn[x]( loop [cur (vec x) amt 0]\n                        (if (= cur [])\n                             amt\n                            (recur (pop cur) (inc amt)))))", "problem": 22, "user": "4f2aff4de4b0d6649770a044"}, {"code": "#(reduce (fn [a b] (inc a)) 0 %)", "problem": 22, "user": "4f32a7f1e4b0d6649770a095"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4f329974e4b0d6649770a093"}, {"code": "(fn foo [coll]\n  (loop [cnt 0 xs coll]\n    (if (empty? xs)\n      cnt\n      (recur (inc cnt) (rest xs)))))", "problem": 22, "user": "4f32ef71e4b0d6649770a098"}, {"code": "(fn [s]\n((fn f [x n]\n  (if (empty? x) n\n    (f (rest x) (+ 1 n)))) s 0))", "problem": 22, "user": "4f3242bae4b0d6649770a08f"}, {"code": "reduce (fn [a _] (inc a)) 0", "problem": 22, "user": "4e8fb386535d65386fec2150"}, {"code": "(fn [coll]\n    (loop [c coll i 0]\n      (if (nil? (first c))\n        i\n        (recur (drop 1 c) (inc i)))))", "problem": 22, "user": "4f043bbd535dcb61093f6bb2"}, {"code": "(fn [c s] (if (not (empty? s))\n  (recur (inc c) (rest s))\n  c)) 0", "problem": 22, "user": "4f31ad57e4b0d6649770a089"}, {"code": "(fn [s]\n  (loop [n 0 s s]\n    (if (seq s)\n        (recur (+ 1 n) (rest s))\n        n)))", "problem": 22, "user": "4f036d18535dcb61093f6abe"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4f33fde5e4b0e243712b1eb3"}, {"code": "(fn [x]\r\n    (loop [cnt 0 n x]\r\n       (if (empty? n)\r\n            cnt\r\n          (recur (inc cnt) (rest n)))))", "problem": 22, "user": "4f341320e4b0e243712b1eb4"}, {"code": "(fn\n  [liste]\n  (loop [i 0]\n    (if (get (vec liste) i)\n      (recur (inc i))\n      i\n      )))", "problem": 22, "user": "4f32d340e4b0d6649770a096"}, {"code": "#(alength (to-array %))", "problem": 22, "user": "4f3191d8e4b0d6649770a088"}, {"code": "reduce (fn [x y](inc x)) 0", "problem": 22, "user": "4f3024bfe4b0d6649770a074"}, {"code": "(partial reduce (fn [x y] (inc x)) 0)", "problem": 22, "user": "4f35475be4b0e243712b1ec0"}, {"code": "#(loop [l %, acc 0] (if (empty? l) acc (recur (rest l) (inc acc))))", "problem": 22, "user": "4f34eb87e4b0e243712b1eba"}, {"code": "(fn [coll] (reduce (fn [init coll] (+ init 1)), 0 (seq coll)))", "problem": 22, "user": "4f356d8de4b0e243712b1ec2"}, {"code": "(fn [s]\n        ((fn cnt [s n]\n          (if (nil? s)\n            n\n            (recur (next s) (inc n))))\n          s 0))", "problem": 22, "user": "4f359c7ee4b0e243712b1ec4"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4f3656d1e4b0e243712b1ec9"}, {"code": "#(loop [seqe %\n        cnt 0]\n  (if\n    (empty? seqe)\n    cnt\n    (recur (rest seqe) (inc cnt))\n))", "problem": 22, "user": "4f1ef703535d64f60314649c"}, {"code": "(fn [x] (alength (to-array x)))", "problem": 22, "user": "4f36939ce4b0e243712b1eca"}, {"code": "(fn f [l] (if (= l []) 0 (+ 1 (f (rest l)))))", "problem": 22, "user": "4f369deae4b0e243712b1ecb"}, {"code": "(fn func [idx lst] (cond (empty? lst) idx :else (func (inc idx) (rest lst))) ) 0", "problem": 22, "user": "4f339c04e4b0d6649770a09c"}, {"code": "(fn [s]\n  (reduce (fn [x y] (inc x)) 0 (seq s)))", "problem": 22, "user": "4f3444b7e4b0e243712b1eb6"}, {"code": "(fn [coll] (reduce (fn [val i] (+ val 1)) 0 coll ) )", "problem": 22, "user": "4f36f005e4b0e243712b1ecd"}, {"code": "(fn [x] (+ (last (sort (keys (zipmap (range) x)))) 1))", "problem": 22, "user": "4f35e662e4b0e243712b1ec6"}, {"code": "#(.size (seq %))", "problem": 22, "user": "4ef48422535dced4c769f236"}, {"code": "#(reduce + (map (fn [n] 1) %))", "problem": 22, "user": "4f378631e4b0e243712b1ed3"}, {"code": "(fn [coll] \n  (loop [the-coll coll counter 0] \n    (if (empty? the-coll) counter (recur (rest the-coll) (inc counter)))))", "problem": 22, "user": "4f34fa21e4b0e243712b1ebc"}, {"code": "(fn my-count\n  ([s] (my-count s 0))\n  ([s c]\n    (if (empty? s)\n      c\n      (recur (rest s) (inc c)))))", "problem": 22, "user": "4f382eb7e4b0e243712b1ed9"}, {"code": "(fn [x]\n  (loop [c 0 tx x]\n    (if (seq tx)\n        (recur (+ 1 c) (rest tx))\n        c)))", "problem": 22, "user": "4f36f5f2e4b0e243712b1ece"}, {"code": "reduce (fn [i x] (+ i 1)) 0", "problem": 22, "user": "4f387c2ee4b0e243712b1edd"}, {"code": "reduce (fn [a _] (inc a)) 0", "problem": 22, "user": "4f38b7d9e4b0e243712b1ee0"}, {"code": "(fn [coll] (reduce + (map (fn [y] 1) coll)))", "problem": 22, "user": "4f38d6bbe4b0e243712b1ee2"}, {"code": "(fn [x & n]\n  (cond (nil? (first x)) n\n        (nil? n) (recur (rest x) 1)\n        :else (recur (rest x) (inc n))))", "problem": 22, "user": "4f343e60e4b0e243712b1eb5"}, {"code": "(fn [x]\n     (loop [size 0 coll x]\n       (if (nil? (first coll))\n         size\n         (recur (inc size) (next coll)))))", "problem": 22, "user": "4f384abde4b0e243712b1eda"}, {"code": "reduce (fn [val list] (+ val 1)) 0", "problem": 22, "user": "4f370001e4b0e243712b1ecf"}, {"code": "(fn [aseq]\n  (loop [tseq aseq, num 0]  \n    (if tseq\n      (recur (next tseq) (inc num))\n      num)))", "problem": 22, "user": "4f29eb2ae4b0d6649770a037"}, {"code": "#(loop [c 0\n  coll %]\n  (if (empty? coll)\n    c\n    (recur (inc c) (rest coll))))", "problem": 22, "user": "4f1bee08535d64f60314647e"}, {"code": "#(.size (vec %))", "problem": 22, "user": "4f39f902e4b0e243712b1efe"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4f03bbf2535dcb61093f6b59"}, {"code": "(fn [args] (\r\n                 loop [cnt 0\r\n                       args args]\r\n                 (if (first args)\r\n                   (recur (inc cnt) (next args))\r\n                   cnt\r\n                 )))", "problem": 22, "user": "4f3543eee4b0e243712b1ebd"}, {"code": "(fn my-count [lst]\n      ((fn my-count-helper [lst counter]\n          (if (empty? lst)\n            counter\n            (recur (rest lst) (+ counter 1)))) lst 0))", "problem": 22, "user": "4f06f953535dcb61093f6c1c"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4f3a7e50e4b0e243712b1f0d"}, {"code": "#(loop [xs % i 0] (if (empty? xs) i (recur (rest xs) (+ 1 i))))", "problem": 22, "user": "4f036e00535dcb61093f6ac3"}, {"code": "(fn [col]\n  (loop [c col i 0]\n    (if (empty? c)\n      i\n      (recur (rest c) (inc i)))))", "problem": 22, "user": "4f3ad7f0e4b0e243712b1f1d"}, {"code": "(fn [a-seq] ((fn mx [idx [f & more]] (if more (mx (+ 1 idx) more) idx )) 1 a-seq))", "problem": 22, "user": "4f3ae998e4b0e243712b1f1f"}, {"code": "(comp alength to-array)", "problem": 22, "user": "4e6b9a02535d8ccf87e9ff1e"}, {"code": "#(loop [x 0 s %]\n  (if (empty? s) x\n    (recur (inc x) (rest s))))", "problem": 22, "user": "4f3afdd0e4b0e243712b1f20"}, {"code": "(partial reduce (fn [a _] (inc a)) 0)", "problem": 22, "user": "4f3b5219e4b0e243712b1f2a"}, {"code": "#(reduce (fn [a b] (inc a)) 0 %)", "problem": 22, "user": "4f3c0c0fe4b0e243712b1f3d"}, {"code": "(fn [s]\n  (reduce (fn [r x] (inc r)) 0 s))", "problem": 22, "user": "4f3c0734e4b0e243712b1f3c"}, {"code": "#(reduce + (map (fn [_] 1) %))", "problem": 22, "user": "4f1bb9d8535d64f60314647d"}, {"code": "#(last (interleave % (iterate inc 1)))", "problem": 22, "user": "4f3cd535e4b0e243712b1f56"}, {"code": "(comp last map-indexed) (fn [i x] (+ i 1))", "problem": 22, "user": "4f3ca5a6e4b0e243712b1f53"}, {"code": "#(loop [x %, c 1]\n       (if (next x)\n           (recur (next x)(inc c))\n           c))", "problem": 22, "user": "4f3cc2fbe4b0e243712b1f55"}, {"code": "(fn [c s] (if (empty? s)\n                  (+ c 0)\n                  (recur (+ c 1) (rest s)))) 0", "problem": 22, "user": "4f3bfce2e4b0e243712b1f38"}, {"code": "#(reduce + (map (fn [x] 1) %1))", "problem": 22, "user": "4f3be0bce4b0e243712b1f36"}, {"code": "(fn [xs]\r\n  (loop [s xs n 0]\r\n    (if (empty? s)\r\n      n\r\n      (recur (next s) (+ n 1)))))", "problem": 22, "user": "4f3d83b5e4b0e243712b1f69"}, {"code": "#(reduce (fn [acc,v] (+ acc 1)) 0 %)", "problem": 22, "user": "4ea5727f535d7eef308072d4"}, {"code": "#(reduce (fn[a _](inc a)) 0 %)", "problem": 22, "user": "4f3e2fbbe4b0e243712b1f7e"}, {"code": "#(.size (vec %))", "problem": 22, "user": "4f3e6244e4b0e243712b1f85"}, {"code": "#(reduce + (map (fn [x] (+ 0 1)) %))", "problem": 22, "user": "4f39493be4b0e243712b1ee9"}, {"code": "#( reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4f188db6535d64f60314645c"}, {"code": "#(reduce (fn [a b] (+ a b)) (map (fn [x] 1)%))", "problem": 22, "user": "4f3e5e87e4b0e243712b1f83"}, {"code": "#(reduce (fn [a _] (inc a)) 0 %)", "problem": 22, "user": "4f3976aee4b0e243712b1eea"}, {"code": "(fn [s] (reduce + (map (constantly 1) s)))", "problem": 22, "user": "4f3ec266e4b0e243712b1f8c"}, {"code": "#(->> % (map (fn [_] 1)) (apply +))", "problem": 22, "user": "4f3fdf11e4b0e243712b1fa1"}, {"code": "(fn [c] (reduce (fn [v e] (+ v 1)) 0 c))", "problem": 22, "user": "4f0da4e4535d0136e6c22319"}, {"code": "(fn [coll]\n    (apply + (map (fn [x] 1) coll)))", "problem": 22, "user": "4f4023d9e4b0e243712b1fa9"}, {"code": "(fn [x] (reduce + (map (fn [y] 1) x)))", "problem": 22, "user": "4f3e05a8e4b0e243712b1f79"}, {"code": "(fn [s] ((fn [s a] (if (empty? s) a (recur (rest s) (+ a 1)))) s 0))", "problem": 22, "user": "4f404dcee4b0e243712b1fb0"}, {"code": "(fn [xs] (reduce (fn [a b] (+ a 1)) 0 xs))", "problem": 22, "user": "4f40ccd9e4b0e243712b1fc0"}, {"code": "(fn [l] (reduce (fn [xs x] (+ xs 1)) 0 l))", "problem": 22, "user": "4f4118dee4b0e243712b1fc8"}, {"code": "#(reduce +(map (fn [x] 1) %))", "problem": 22, "user": "4f410b63e4b0e243712b1fc5"}, {"code": "(fn [x]\n  (loop [n 0 y x]\n    (if (= y '())\n      n\n      (recur (inc n) (rest y)))))", "problem": 22, "user": "4f3c772de4b0e243712b1f4c"}, {"code": "(fn [s]\n  (loop [se s ae 0]\n    (if (empty? se)\n      ae\n      (recur (rest se) (inc ae)))))", "problem": 22, "user": "4f418eaee4b0d7d3c9f3fce9"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4f419f6fe4b0d7d3c9f3fceb"}, {"code": "#(first (reverse (map-indexed (fn [i x] (+ i 1)) %)))", "problem": 22, "user": "4f4003d9e4b0e243712b1fa5"}, {"code": "(fn cnt [col]\n  (loop [x col counter 1]\n    (if (next x)\n      (recur (next x) (inc counter))\n      counter)))", "problem": 22, "user": "4f422e49e4b0d7d3c9f3fcf7"}, {"code": "(partial reduce (fn [p q] (+ p 1)) 0)", "problem": 22, "user": "4f426a7ae4b0d7d3c9f3fcff"}, {"code": "#(reduce (fn [c i] (inc c)) 0 %)", "problem": 22, "user": "4f4274f2e4b0d7d3c9f3fd00"}, {"code": "(fn [x] (reduce (fn [c y] (inc c)) 0 x))", "problem": 22, "user": "4f42ae16e4b0d7d3c9f3fd09"}, {"code": "(fn [coll] (reduce (fn [a b] (inc a)) 0 coll))", "problem": 22, "user": "4f39c08ae4b0e243712b1efb"}, {"code": "(fn [l]\n  (reduce \n    +\n    (map (fn [v] 1) l)\n  ))", "problem": 22, "user": "4f4175ffe4b0d7d3c9f3fce8"}, {"code": "(fn my_count [coll] (reduce (fn [n x] (inc n)) 0 coll))", "problem": 22, "user": "4f1f8fae535d64f6031464a3"}, {"code": "#(loop [x % c 0] (if (empty? x) c (recur (rest x) (+ c 1))))", "problem": 22, "user": "4f42c76fe4b0d7d3c9f3fd0e"}, {"code": "(fn [s]\n  (loop [sequ s cnt 0]\n    (if (empty? sequ)\n      cnt\n      (recur (next sequ) (+ cnt 1)))))", "problem": 22, "user": "4ee84038535d93acb0a6687b"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4e7d20e6535db169f9c796c6"}, {"code": "(fn sequence-count[s]\n  (letfn [(sc [lst counter]\n            (if (not (empty? lst))\n              (swap! counter inc))\n            (if (not (empty? lst))\n              (sc (rest lst) counter)\n              @counter))]\n    (sc s (atom 0))))", "problem": 22, "user": "4eb6f065535d7eef30807372"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4f4393b3e4b0d7d3c9f3fd24"}, {"code": "reduce (fn [a x] (+ 1 a)) 0", "problem": 22, "user": "4f40f055e4b0e243712b1fc2"}, {"code": "(fn [x]\n  (reduce (fn [n x] (+ n 1)) 0 x))", "problem": 22, "user": "4f2f7e87e4b0d6649770a06f"}, {"code": "#(.size (vec %))", "problem": 22, "user": "4f437751e4b0d7d3c9f3fd20"}, {"code": "#(loop [l %\n        n 0]\n  (if (= '() (drop 1 l))\n    (inc n)\n    (recur (drop 1 l) (inc n))\n  )\n)", "problem": 22, "user": "4ee79c57535d93acb0a66869"}, {"code": "(fn [coll] (reduce (fn [x y] (+ x 1)) 0 coll))", "problem": 22, "user": "4f4544e1e4b0d56e7bb92b7a"}, {"code": "(fn counter [c]\n  (reduce (fn [x y]\n            (+ 1 x))\n   0\n   c)\n)", "problem": 22, "user": "4f442cdfe4b0d7d3c9f3fd34"}, {"code": "(fn cnt ([xs] (cnt xs 0)) ([xs n] (if (empty? xs) n (recur (next xs) (inc n)))))", "problem": 22, "user": "4f43d0cbe4b0d7d3c9f3fd2f"}, {"code": "#(apply + (map (fn [_] 1) %))", "problem": 22, "user": "4f465096e4b0d56e7bb92b9a"}, {"code": "#(loop [ll %, c 0]\n  (if (nil? (seq ll))\n    c\n    (recur (rest ll) (inc c))))", "problem": 22, "user": "4f4319ebe4b0d7d3c9f3fd13"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "4f46df00e4b0d56e7bb92bac"}, {"code": "reduce (fn [x _] (inc x)) 0", "problem": 22, "user": "4f45c72be4b0d56e7bb92b8a"}, {"code": "(fn foo [x] (if (empty? x) 0 (+ 1 (foo (rest x)))))", "problem": 22, "user": "4f2acb29e4b0d6649770a040"}, {"code": "#(apply + (vals (frequencies %)))", "problem": 22, "user": "4f465734e4b0d56e7bb92b9b"}, {"code": "#(letfn [(worker [x n]\r\n           (if (= x ())\r\n             n\r\n             (recur (rest x) (+ 1 n))))]\r\n   (worker % 0))", "problem": 22, "user": "4f474f43e4b0d56e7bb92bb7"}, {"code": "(fn [l]\n  (loop [n 0 l l]\n   (if (empty? l) n\n       (recur (inc n) (rest l)))))", "problem": 22, "user": "4f2baf1ae4b0d6649770a04c"}, {"code": "(fn [c] (reduce + (map (fn [a] 1) c)))", "problem": 22, "user": "4f482e3be4b0d56e7bb92bd4"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4f472c04e4b0d56e7bb92bb4"}, {"code": "(fn [s]\n  (loop [s s, n 0]\n    (if (nil? (first s)) n\n        (recur (rest s) (inc n)))))", "problem": 22, "user": "4f111261535d64f603146420"}, {"code": "reduce (fn [x y] (+ x 1)) 0", "problem": 22, "user": "4f48d37fe4b0d56e7bb92be0"}, {"code": "(fn [x] (reduce + (map (constantly 1) x)))", "problem": 22, "user": "4f462919e4b0d56e7bb92b94"}, {"code": "(fn [y] (reduce + (map (fn [x] (if (nil? x) 0 1)) y)))", "problem": 22, "user": "4f495ba5e4b0d56e7bb92bef"}, {"code": "reduce (fn[x,y](inc x)) 0", "problem": 22, "user": "4f49202ce4b0d56e7bb92be6"}, {"code": "(fn [aseq]\n  (loop [l_aseq aseq n 0]\n    (if (first l_aseq)\n      (recur (rest l_aseq) (inc n))\n      n)))", "problem": 22, "user": "4f0e7f7b535d0136e6c22325"}, {"code": "reduce (fn [x _] (inc x)) 0", "problem": 22, "user": "4f25c4c4e4b0d66497709ffc"}, {"code": "#(.size (seq %))", "problem": 22, "user": "4f4a03cce4b0d56e7bb92c03"}, {"code": "(fn [x]\n  (let [c (atom 0)]\n    ((fn [y]\n      (if (= nil (seq y))\n        @c\n        (do (swap! c inc)(recur (rest y)))\n        )\n      )x)\n    )\n)", "problem": 22, "user": "4f4a34b2e4b0d56e7bb92c09"}, {"code": "reduce (fn [x y] (+ 1 x)) 0", "problem": 22, "user": "4f4a17ffe4b0d56e7bb92c05"}, {"code": "#(loop [rem % c 0]\n  (if (= rem '())\n    c\n    (recur \n      (rest rem)\n      (inc c))))", "problem": 22, "user": "4f4a5ca6e4b0d56e7bb92c0f"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4f496097e4b0d56e7bb92bf0"}, {"code": "(fn [s]\r\n              (loop [sequence s index 0]\r\n                (cond (empty? sequence) index\r\n                      :else (recur (rest sequence) (inc index)))))", "problem": 22, "user": "4f4a8707e4b0d56e7bb92c12"}, {"code": "(fn cnt [xs]\n  (if (empty? xs)\n      0\n      (+ (cnt (rest xs)) 1)))", "problem": 22, "user": "4f4ac35ae4b0d56e7bb92c18"}, {"code": "(fn [list] (loop [c 0 l list] (if (empty? l) c (recur (+ c 1) (rest l)))))", "problem": 22, "user": "4f4afb1fe4b0d56e7bb92c21"}, {"code": "reduce (fn [x _] (inc x)) 0", "problem": 22, "user": "4f303ebbe4b0d6649770a077"}, {"code": "(fn mycount [xs]\n  (if (empty? xs)\n    0\n    (inc (mycount (rest xs)))))", "problem": 22, "user": "4f49e869e4b0d56e7bb92c02"}, {"code": "reduce (fn[x,y] (inc x)) 0", "problem": 22, "user": "4f4b4e1ce4b03ad3f0c10c74"}, {"code": "reduce (fn [a b] (+ a 1)) 0", "problem": 22, "user": "4f4ab1ffe4b0d56e7bb92c16"}, {"code": "(fn [x] ( reduce (fn [a, b] (+ a 1)) 0 x ))", "problem": 22, "user": "4f4b43d5e4b03ad3f0c10c71"}, {"code": "(fn [coll]\n  (loop [c coll n 0]\n    (if (empty? c)\n        n\n        (recur (rest c) (inc n)))))", "problem": 22, "user": "4f4ba29ae4b03ad3f0c10c7a"}, {"code": "(fn [ls] ((fn [ls it] (if (empty? ls) it (recur (rest ls) (inc it)))) ls 0))", "problem": 22, "user": "4f03ba9c535dcb61093f6b58"}, {"code": "(fn [sequence]\n  (reduce + (map (constantly 1) sequence)))", "problem": 22, "user": "4f4c6b21e4b03ad3f0c10c8f"}, {"code": "(fn [x] (loop [c 0 l x]      \n(if (empty? l) c                \n(recur (inc c) (pop (vec l))))))", "problem": 22, "user": "4f4c8faae4b03ad3f0c10c93"}, {"code": "#(loop [x % y 0] (if (nil? (first x)) y (recur (rest x) (+ y 1))))", "problem": 22, "user": "4f4bbda0e4b03ad3f0c10c7b"}, {"code": "#(.size (list* %))", "problem": 22, "user": "4f1a87d2535d64f60314646c"}, {"code": "(fn length\n  [seq]\n  (loop [seq seq\n         size 0]\n    (if (empty? seq)\n      size\n      (recur (rest seq) (inc size)))))", "problem": 22, "user": "4db8d37d535d1e037afb219c"}, {"code": "reduce (fn [x y] (inc x)) 0", "problem": 22, "user": "4f4c4fdde4b03ad3f0c10c8b"}, {"code": "(fn nc [x] (if (nil? (next x)) 1 (+ 1 (nc (rest x)))))", "problem": 22, "user": "4f4aa932e4b0d56e7bb92c14"}, {"code": "(fn dc [[h & t]] (if (nil? t) 1 (+ 1 (dc t))))", "problem": 22, "user": "4ebe81e9535dfed6da9c6d95"}, {"code": "#(loop [i 0 s %]\n  (if (empty? s)\n    i\n  (recur (+ i 1) (rest s))))", "problem": 22, "user": "4f4e52d2e4b03ad3f0c10cc2"}, {"code": "(fn this\n  ([s n]\n    (if (not (first s))\n        n\n        (recur (rest s) (+ n 1))))\n  ([s] (this s 0)))", "problem": 22, "user": "4f4e78fee4b03ad3f0c10cc8"}, {"code": "(fn [coll] (reduce (fn [a _] (inc a)) (cons 0 coll)))", "problem": 22, "user": "4f4e7c01e4b03ad3f0c10cc9"}, {"code": "(fn [a]\n  (loop [s a l 0]\n    (if (empty? s)\n      l\n      (recur (rest s) (inc l)))))", "problem": 22, "user": "4f4becd8e4b03ad3f0c10c83"}, {"code": "(fn my-count [xs]\n  (loop [xs (seq xs) n 0]\n    (if xs\n      (recur (next xs) (inc n))\n      n)))", "problem": 22, "user": "4f4e91a9e4b03ad3f0c10cca"}, {"code": "(fn [c] (reduce + (map (fn [_] (+ 1)) c)))", "problem": 22, "user": "4db2f208535df7e46ed9b6c9"}, {"code": "reduce (fn [acc _] (inc acc)) 0", "problem": 22, "user": "4f4f0287e4b03ad3f0c10cd7"}, {"code": "(fn countx\r\n  ([seq] (countx seq 0))\r\n  ([seq n]\r\n    (if (empty? seq)\r\n      n\r\n      (recur (rest seq) (inc n)))))", "problem": 22, "user": "4f4e4ecbe4b03ad3f0c10cbf"}, {"code": "(fn my-count \n  ([list] (my-count list 0))\n  ([list size]\n    (if (empty? list)\n      size\n      (my-count (rest list) (+ 1 size)))))", "problem": 22, "user": "4f4f08c8e4b03ad3f0c10cd8"}, {"code": "(fn [s]\n    (loop [coll s, n 0]\n      (if (seq coll)\n        (recur (rest coll) (inc n))\n        n)))", "problem": 22, "user": "4f4fbed7e4b03ad3f0c10ce8"}, {"code": "(fn\n    [seq]\n    (loop [myseq seq acc 0]\n        (if (empty? myseq)\n        acc\n        (recur (rest myseq) (inc acc)))))", "problem": 22, "user": "4f4daa4ae4b03ad3f0c10cac"}, {"code": "(fn [x] (reduce + (map (fn [x] 1) x)))", "problem": 22, "user": "4f4fd593e4b03ad3f0c10cec"}, {"code": "(fn [coll] (reduce + (map (fn [x] 1) coll)))", "problem": 22, "user": "4f4ee649e4b03ad3f0c10cd4"}, {"code": "(fn [x] (apply + (map (fn [y] 1) x)))", "problem": 22, "user": "4f4ff451e4b03ad3f0c10cf2"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4f4fac2ae4b03ad3f0c10ce5"}, {"code": "#((fn [lst n]\n      (if (= lst '())\n        n\n        (recur (rest lst) (+ n 1))))\n  % 0)", "problem": 22, "user": "4f4e978ae4b03ad3f0c10ccb"}, {"code": "(fn [coll]\r\n    (reduce + 0 (map (constantly 1) coll)))", "problem": 22, "user": "4f047177535dcb61093f6bc6"}, {"code": "reduce (fn [x y] (inc x)) 0", "problem": 22, "user": "4f4ff5a8e4b03ad3f0c10cf3"}, {"code": "(fn [coll]\n  (first (last (map list (iterate #(+ 1 %) 1) coll))))", "problem": 22, "user": "4f504739e4b03ad3f0c10d00"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4f4f1b84e4b03ad3f0c10cda"}, {"code": "#(loop [items %1 n 0]\r\n    (if (empty? items)\r\n      n\r\n      (recur (rest items) (inc n))))", "problem": 22, "user": "4e5fdd68535d8ccf87e9fe4f"}, {"code": "(fn new-count [coll]\n  (if (empty? coll) 0 (inc (new-count (rest coll)))))", "problem": 22, "user": "4f50c414e4b03ad3f0c10d0d"}, {"code": "#(loop [sum 0 item %]\n    (if (nil? (next item)) (+ sum 1) (recur (+ sum 1) (rest item))))", "problem": 22, "user": "4f4bd422e4b03ad3f0c10c7e"}, {"code": "#(reduce (fn[x y](inc x)) 0 %)", "problem": 22, "user": "4f4ec77ae4b03ad3f0c10cd0"}, {"code": "#(reduce (fn [c _] (inc c)) 0 %)", "problem": 22, "user": "4f50cadce4b03ad3f0c10d0f"}, {"code": "(fn f [x] (if (nil? (first x)) 0 (+ 1 (f (rest x))) ))", "problem": 22, "user": "4f5100cfe4b03ad3f0c10d15"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4f4be1cae4b03ad3f0c10c81"}, {"code": "(fn philm [x] (if (empty? x) 0 (+ 1 (philm (rest x)))))", "problem": 22, "user": "4f524d11e4b03ad3f0c10d34"}, {"code": "(fn length [list]\n  (if (empty? list)\n      0\n      (+ 1 (length (rest list)))))", "problem": 22, "user": "4f525fdce4b03ad3f0c10d37"}, {"code": "(fn [args]\n    (reduce (fn [a b] (inc a)) 0 args))", "problem": 22, "user": "4f51b9f3e4b03ad3f0c10d2b"}, {"code": "(fn my-count [list] (if (empty? list) 0 (inc (my-count (rest list)))))", "problem": 22, "user": "4f528bcde4b03ad3f0c10d3e"}, {"code": "#((fn [xs cnt] (if (= xs []) cnt (recur (rest xs) (+ cnt 1)))) % 0)", "problem": 22, "user": "4f51e8a4e4b03ad3f0c10d2d"}, {"code": "#(apply + (map (fn [n] 1) %))", "problem": 22, "user": "4f528f70e4b03ad3f0c10d3f"}, {"code": "#(loop [seq %\n        n 0]\n        (if (first seq)\n          (recur (rest seq) (+ n 1))\n          n))", "problem": 22, "user": "4f443eafe4b0d7d3c9f3fd38"}, {"code": "(fn [x]\n  (reduce + (map (fn [z] 1) x)))", "problem": 22, "user": "4f52ae00e4b03ad3f0c10d42"}, {"code": "(fn [colls]\n  (loop [c colls, s 0]\n    (if (empty? c)\n      s\n      (recur (rest c) (inc s)))))", "problem": 22, "user": "4f4b2bd4e4b03ad3f0c10c6f"}, {"code": "(fn[s]\n  (reduce + (map (fn[x] 1) s)))", "problem": 22, "user": "4eef3afe535d305ff5cb7f1d"}, {"code": "(fn [l]\n  (loop [l l, acc 0]\n    (if (empty? l)\n      acc\n      (recur (rest l) (inc acc)))))", "problem": 22, "user": "4f535e75e4b0a7574ea717c6"}, {"code": "(fn cnt [seq] \n  (if (first seq)\n    (+ 1 (cnt (rest seq)))\n    '0\n  )\n)", "problem": 22, "user": "4f461e57e4b0d56e7bb92b92"}, {"code": "(fn [xs]\n  (loop [n 0 ys xs]\n    (if (empty? ys)\n      n\n      (recur (inc n) (rest ys)))))", "problem": 22, "user": "4f5030a9e4b03ad3f0c10cfd"}, {"code": "(fn [collection] (loop [ total 0 stuff collection] (if stuff (recur (inc total) (next stuff))total)))", "problem": 22, "user": "4f54204ce4b0a7574ea717d9"}, {"code": "(fn countN [x] (if (= x '()) 0 (+ (countN (rest x)) 1)))", "problem": 22, "user": "4f4d44f8e4b03ad3f0c10ca5"}, {"code": "(fn [stupidList]\n  (reduce + (map (fn [x] 1) stupidList))\n)", "problem": 22, "user": "4f5438d6e4b0a7574ea717dd"}, {"code": "#(reduce (fn [a _] (inc a)) 0 %)", "problem": 22, "user": "4f50d933e4b03ad3f0c10d11"}, {"code": "(fn [x] (reduce (fn[n1 n2] (+ n1 1)) 0 (seq x)))", "problem": 22, "user": "4f4e6d21e4b03ad3f0c10cc5"}, {"code": "reduce (fn[x _](+ x 1)) 0", "problem": 22, "user": "4f542fd9e4b0a7574ea717db"}, {"code": "(fn [xs] (inc (first (last (map vector (range) xs)))))", "problem": 22, "user": "4f5155a3e4b03ad3f0c10d1b"}, {"code": "#(reduce (fn [s,e] (+ s 1)) 0 %)", "problem": 22, "user": "4f54ecf1e4b0a7574ea717f0"}, {"code": "(fn foo\n  [x]\n  (cond\n   (= x []) 0\n   :else (+ 1 (foo (rest x)))))", "problem": 22, "user": "4f1e4921535d64f603146495"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "4f5430b6e4b0a7574ea717dc"}, {"code": "#(.size (vec %))", "problem": 22, "user": "4f554416e4b0a7574ea717f9"}, {"code": "#(reduce (fn [cnt, _] (+ cnt 1) ) 0 %)", "problem": 22, "user": "4f53fa55e4b0a7574ea717d2"}, {"code": "reduce (fn [acc i]\n         (+ 1 acc)) 0", "problem": 22, "user": "4f541874e4b0a7574ea717d8"}, {"code": "(fn [xs] (reduce + (map (fn [x] 1) xs)))", "problem": 22, "user": "4ed60c9c535d10e5ff6f52dd"}, {"code": "(partial\n  (fn [n coll]\n    (if (nil? (list* coll))\n        n\n        (recur (inc n) (rest coll))))\n  0)", "problem": 22, "user": "4eec82fe535d93acb0a668ae"}, {"code": "(fn cnt [v] (if (= nil (peek (vec v))) 0 (+ (cnt (rest (vec v))) 1)))", "problem": 22, "user": "4f566178e4b0a7574ea71820"}, {"code": "(fn c [s] (if (empty? s) 0 ((comp inc c rest) s)))", "problem": 22, "user": "4f567cdbe4b0a7574ea71824"}, {"code": "(fn [s] (last (last (map #(list % %2) s (iterate inc 1))))\n)", "problem": 22, "user": "4f569218e4b0a7574ea71826"}, {"code": "(fn [seq] (apply + (map (fn [x] 1) seq)))", "problem": 22, "user": "4f5694cae4b0a7574ea71827"}, {"code": "(fn [s] (clojure.core/alength (to-array s)))", "problem": 22, "user": "4f5612f9e4b0a7574ea71812"}, {"code": "#(reduce (fn [cnt _] (inc cnt)) 0 %)", "problem": 22, "user": "4eca2cea535d6d7199dd3702"}, {"code": "(fn [seq] (reduce + (map (fn [i] 1) seq)))", "problem": 22, "user": "4f559d2ce4b0a7574ea71808"}, {"code": "(fn [x] ((fn [x y] (if (= x '()) y (recur (rest x) (+ y 1)))) x 0))", "problem": 22, "user": "4f57b523e4b0a7574ea7183c"}, {"code": "(fn mycount [S]\n   (loop [n 0 s S]\n     (if (empty? s)\n       n\n       (recur (inc n) (rest s))\n       )\n     )\n   )", "problem": 22, "user": "4f554f4de4b0a7574ea717fa"}, {"code": "(fn [x] (reduce + (map (fn [y] 1) x)))", "problem": 22, "user": "4f565bebe4b0a7574ea7181e"}, {"code": "(fn mycount\n  ([l] (mycount l 0))\n  ([l c] (cond (nil? (first l)) c\n  :else (mycount (rest l) (inc c)))))", "problem": 22, "user": "4f580a9fe4b0a7574ea71844"}, {"code": "#(reduce (fn [cnt,_] (inc cnt)) 0 %)", "problem": 22, "user": "4f5595d4e4b0a7574ea71805"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "4f29afc7e4b0d6649770a02e"}, {"code": "reduce (fn [acc b] (inc acc)) 0", "problem": 22, "user": "4f547d2ce4b0a7574ea717e3"}, {"code": "(fn [x]\n  (loop [coll x n 0]\n    (if (empty? coll)\n      n\n      (recur (next coll) (inc n)))))", "problem": 22, "user": "4f57a153e4b0a7574ea7183a"}, {"code": "#(reduce (fn [a c] (inc a)) 0 %)", "problem": 22, "user": "4f569a3ce4b0a7574ea71828"}, {"code": "reduce (fn [l i] (inc l)) 0", "problem": 22, "user": "4f54e6f8e4b0a7574ea717ef"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4f50be5de4b03ad3f0c10d0c"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4f500769e4b03ad3f0c10cf8"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4f4feb95e4b03ad3f0c10cf0"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4f507682e4b03ad3f0c10d05"}, {"code": "#((fn [xs n]\n  (if (empty? xs)\n    n\n    (recur (rest xs) (inc n)))) % 0)", "problem": 22, "user": "4f58de86e4b0a7574ea7185b"}, {"code": "reduce #(inc % #_%2) 0", "problem": 22, "user": "4f590356e4b0a7574ea71860"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4f5b57e9e4b0030a34fb2b02"}, {"code": "(fn this ([s n] (if (seq s) (this (rest s) (+ n 1)) n))\n  ([s] (if seq s) (this (rest s) 1)))", "problem": 22, "user": "4f555fe8e4b0a7574ea717fc"}, {"code": "(fn [coll]\n  (reduce\n    (fn [t s]\n      (inc t))\n    0\n    coll))", "problem": 22, "user": "4f5c0549e4b0030a34fb2b1a"}, {"code": "(fn count-list [initial-x]\n  (loop [sum 0, x initial-x]\n    (if (not (empty? x))\n      (recur (+ sum 1) (rest x))\n      sum)))", "problem": 22, "user": "4f515bd3e4b03ad3f0c10d1f"}, {"code": "(fn [x]\n  ((fn [x n]\n    (if (seq x)\n      (recur (rest x) (inc n))\n      n)) x 0))", "problem": 22, "user": "4f5c344be4b0030a34fb2b1d"}, {"code": "#(loop [cnt % sum 0]\n    (if (empty? (rest cnt))\n        (inc sum)\n        (recur (rest cnt) (inc sum))))", "problem": 22, "user": "4f5c1978e4b0030a34fb2b1b"}, {"code": "#(letfn [(_count_ [n coll]\n            (if (empty? coll)\n              n\n              (recur (inc n) (rest coll))))]\n  (_count_ 0 %))", "problem": 22, "user": "4f5cc3b8e4b0030a34fb2b2b"}, {"code": "(fn [s] (apply + (map (fn [n] 1) s)))", "problem": 22, "user": "4daf4491edd6309eace4d177"}, {"code": "#(reduce (fn [n _] (inc n)) 0 %)", "problem": 22, "user": "4f5bcf5fe4b0030a34fb2b12"}, {"code": "reduce (fn [c _] (inc c)) 0", "problem": 22, "user": "4f036fb3535dcb61093f6ac8"}, {"code": "(fn length [q] (if (empty? q) 0 (+ 1 (length (rest q)))))", "problem": 22, "user": "4f5eda39e4b0030a34fb2b56"}, {"code": "#(loop [s % i 1]\n  (if (nil? (next s))\n    i\n    (recur (rest s) (inc i))))", "problem": 22, "user": "4f5d5d59e4b0030a34fb2b39"}, {"code": "#(apply + (map (fn [x] 1) %1))", "problem": 22, "user": "4ea84f48535d7eef308072f6"}, {"code": "(fn [s & c]\n  (let [cc (if (nil? c) 0 c)]\n   (if (= () s) cc (recur (rest s) (+ cc 1)))\n))", "problem": 22, "user": "4f5f484be4b0030a34fb2b5f"}, {"code": "reduce (comp inc first list) 0", "problem": 22, "user": "4f6010e7e4b0defedf855fa1"}, {"code": "(fn [user_seq]\n  (loop [ total 0, seqx user_seq ]\n    (if (nil? (first seqx))\n      total\n      (recur (inc total) (next seqx))\n    ); if\n  ); loop\n); fn", "problem": 22, "user": "4f601623e4b0defedf855fa3"}, {"code": "(fn [s]\n  (loop [coll s c 0]\n    (if (empty? coll)\n      c\n      (recur (next coll) (inc c)))))", "problem": 22, "user": "4f604bdee4b0defedf855fa7"}, {"code": "#(loop [l %1 ans 0] (if (= '() l) ans (recur (rest l) (inc ans))))", "problem": 22, "user": "4f5edeb0e4b0030a34fb2b57"}, {"code": "#(loop [c 0 vals %] (if (seq vals) (recur (inc c) (rest vals)) c))", "problem": 22, "user": "4f608f0ee4b0defedf855faa"}, {"code": "(fn [lst]\n  (+ 1\n  (first \n    (last\n      (map-indexed vector lst)))))", "problem": 22, "user": "4f60ed88e4b0defedf855fb2"}, {"code": "(fn [s]\n  (reduce (fn [x y] (inc x)) 0 s))", "problem": 22, "user": "4f611127e4b0defedf855fb4"}, {"code": "(fn foo\n  ([x]\n    (if\n      (= x [])\n      0\n      (+ 1 (foo (rest x)))\n    )\n  )\n)", "problem": 22, "user": "4f611e0ee4b0defedf855fb8"}, {"code": "reduce (fn [acc x] (inc acc)) 0", "problem": 22, "user": "4e7f5a0b535db966e863cc41"}, {"code": "(fn this\n  ([l a] (if (seq l) (recur (rest l) (inc a)) a))\n  ([l] (this l 0)))", "problem": 22, "user": "4f614976e4b0defedf855fbb"}, {"code": "reduce (fn [c _] (inc c)) 0", "problem": 22, "user": "4f6160a7e4b0defedf855fbe"}, {"code": "(fn ctr[seqx] (if (= seqx '()) 0 (+ 1 (ctr (rest seqx)))))", "problem": 22, "user": "4f617f66e4b0defedf855fc0"}, {"code": "(fn [arg]\n  (loop [s arg\n         c 0]\n    (if (empty? s)\n      c\n      (recur (rest s) (inc c)))))", "problem": 22, "user": "4ed68752535d10e5ff6f52e2"}, {"code": "(fn [col]\n  (apply +\n    (map (constantly 1) col)))", "problem": 22, "user": "4f61f05ae4b0defedf855fc9"}, {"code": "(fn [x] (loop [c x t 0] (if (= c ()) t (recur (rest c) (+ 1 t)))))", "problem": 22, "user": "4f622cafe4b0defedf855fcc"}, {"code": "(fn [inp]\n  (loop [i inp c 0]\n    (if (empty? i)\n       c\n       (recur (rest i) (inc c)))))", "problem": 22, "user": "4f629697e4b0defedf855fd6"}, {"code": "(fn mycnt [seq]\n  (let [inner (fn m2 [seq i]\n               (if (= seq []) i (m2 (rest seq) (+ 1 i))))]\n   (inner seq 0)))", "problem": 22, "user": "4f62b29ce4b0defedf855fd9"}, {"code": "(fn [col]\n  (loop [n 0 s col]\n    (if (empty? s)\n      n\n      (recur (inc n) (rest s)))))", "problem": 22, "user": "4f61be97e4b0defedf855fc5"}, {"code": "(fn [collection]\n  (loop [coll collection cnt 0]\n    (if-not (seq coll) cnt\n(recur (rest coll) (inc cnt)))))", "problem": 22, "user": "4f57c913e4b0a7574ea7183f"}, {"code": "(let \n  [derp (fn [x cnt] \n          (if (empty? x)\n              cnt\n              (recur (rest x) (+ cnt 1))))]\n  (fn [x] \n    (derp x 0)))", "problem": 22, "user": "4f5576c2e4b0a7574ea71801"}, {"code": "#(loop [n 0]\n  (if (not= (seq %) (take n %))\n    (recur (inc n))\n    n))", "problem": 22, "user": "4f62ef0ce4b0defedf855fdc"}, {"code": "#(reduce (fn [c _] (inc c)) 0 %)", "problem": 22, "user": "4f58fe71e4b0a7574ea7185f"}, {"code": "(fn c [x] (if (= '() x) 0 (+ 1 (c (rest x)))))", "problem": 22, "user": "4f64f0a7e4b07046d9f4ef37"}, {"code": "reduce (fn [x y] (inc x)) 0", "problem": 22, "user": "4f63777be4b0defedf855fe4"}, {"code": "(fn [lst] (reduce + (map (constantly 1) lst)))", "problem": 22, "user": "4f651f66e4b07046d9f4ef3c"}, {"code": "#(reduce (fn [x y] (inc x)) 0 %)", "problem": 22, "user": "4f4d7b8fe4b03ad3f0c10ca9"}, {"code": "(fn count-seq [arg]\n  (if (empty? arg)\n    0\n    (+ 1 (count-seq (rest arg)))))", "problem": 22, "user": "4f652432e4b07046d9f4ef3d"}, {"code": "(fn [coll] (reduce (fn [x y] (inc x)) 0 coll))", "problem": 22, "user": "4f65eec7e4b07046d9f4ef48"}, {"code": "(fn cnt [coll]\n  (if (= (first coll) nil)\n    0\n    (+ (cnt (rest coll)) 1)))", "problem": 22, "user": "4f65f537e4b07046d9f4ef4a"}, {"code": "(fn [coll] (apply + (map #(if % 1 1) coll)))", "problem": 22, "user": "4f36b4a4e4b0e243712b1ecc"}, {"code": "(fn count-seq [coll]\n  (reduce (fn [a b] (+ a 1)) 0 coll))", "problem": 22, "user": "4f6543cae4b07046d9f4ef41"}, {"code": "#(loop [cnt 0 coll %]\n  (if (empty? coll)\n    cnt\n    (recur (inc cnt) (rest coll))))", "problem": 22, "user": "4f65e3e9e4b07046d9f4ef47"}, {"code": "(fn [s] (reduce (fn [a b] (+ 1 a)) 0 s))", "problem": 22, "user": "4f1b3f4c535d64f603146478"}, {"code": "#(loop [s % cnt 0]\n  (if (empty? s)\n    cnt\n    (recur (rest s) (inc cnt))))", "problem": 22, "user": "4f6688d6e4b07046d9f4ef5d"}, {"code": "reduce (fn [l r] (+ l 1)) 0", "problem": 22, "user": "4f51697ae4b03ad3f0c10d22"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4f4e147ae4b03ad3f0c10cb9"}, {"code": "(partial reduce (fn [f _] (+ 1 f)) 0)", "problem": 22, "user": "4f6845d2e4b07046d9f4ef74"}, {"code": "(fn cnt [coll] (reduce (fn [n _] (inc n)) 0 coll))", "problem": 22, "user": "4f68a9bbe4b07046d9f4ef79"}, {"code": "(fn [coll] (reduce + (map (fn [_] 1) coll)))", "problem": 22, "user": "4f6a36eee4b07046d9f4ef99"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "4f68d3ebe4b07046d9f4ef7d"}, {"code": "(fn [l]\n  (loop [l l acc 0]\n    (if (empty? l)\n      acc\n      (recur (rest l) (inc acc)))))", "problem": 22, "user": "4e568873535d8a8b8723a283"}, {"code": "#(loop [cnt 0 seq %1]\n  (if (empty? seq)\n     cnt\n     (recur (inc cnt) (rest seq)))\n  )", "problem": 22, "user": "4ddc56e1535d02782fcbea04"}, {"code": "(fn [coll]\n  (reduce +\n    (map (fn [x] 1) coll)\n  )\n)", "problem": 22, "user": "4f6b4237e4b07046d9f4efa9"}, {"code": "#(.size (seq %))", "problem": 22, "user": "4df8644f535d04ed9115e778"}, {"code": "(fn [xs] (reduce + (map (constantly 1) xs)))", "problem": 22, "user": "4f6bab49e4b07046d9f4efb1"}, {"code": "#(loop [x %\n        cnt 0]\n   (if (seq x)\n     (recur (rest x) (inc cnt))\n     cnt))", "problem": 22, "user": "4f04c93c535dcb61093f6be3"}, {"code": "(fn [sq]                                                   \n          (loop [i 0 s (seq sq)]                                                \n        (if (nil? (next s))                                                     \n            (inc i)                                                             \n            (recur (+ i 1) (next s)))))", "problem": 22, "user": "4f67f674e4b07046d9f4ef6e"}, {"code": "(fn [s] (loop [a 0 s2 s] \n  (if (= (first s2) nil) a (recur (inc a) (rest s2)))))", "problem": 22, "user": "4f69f34fe4b07046d9f4ef90"}, {"code": "(fn [s]\n  (loop [s s, c 0]\n    (if (seq s)\n        (recur (next s) (inc c))\n        c)))", "problem": 22, "user": "4ed2a31c535d44c135fd68db"}, {"code": "(fn [s]\n   (loop [aseq s anum 0]\n     (if (not (first aseq)) anum\n         (recur (rest aseq) (inc anum)))))", "problem": 22, "user": "4f68c485e4b07046d9f4ef7c"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "4f18f65d535d64f603146462"}, {"code": "#(if (string? %) (.length %) (.size %))", "problem": 22, "user": "4f6a2ff2e4b07046d9f4ef98"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4ef2da4f535dced4c769f224"}, {"code": "(fn  [col] (let [s (vec col)] (reduce (fn [x y] (inc x)) 0 col)))", "problem": 22, "user": "4f6c6d69e4b07046d9f4efba"}, {"code": "(fn [t] (reduce (fn [x y] (+ x y)) (map (fn [x] 1) t)))", "problem": 22, "user": "4f6e1c40e4b07046d9f4efd4"}, {"code": "(fn [col]\r\n  (reduce \r\n     (fn[n _](inc n)) \r\n          0 col)\r\n)", "problem": 22, "user": "4f6d9d7ee4b07046d9f4efcd"}, {"code": "(fn cnt [s] (if (empty? s)\n            0\n            (+ 1 (cnt (rest s)))))", "problem": 22, "user": "4f6b1457e4b07046d9f4efa6"}, {"code": "(fn [sq]\n  (loop [cnt 0 sqq sq]\n    (if (empty? sqq)\n      cnt\n  (recur (inc cnt) (next sqq)))))", "problem": 22, "user": "4f6ecc65e4b07046d9f4efdd"}, {"code": "(fn [s & ca]\n (let [c (inc (if (= ca nil) 0 ca))]\n  (if (seq (rest s)) (recur (rest s) c) c\n  )))", "problem": 22, "user": "4f584064e4b0a7574ea71846"}, {"code": "(fn xcount [x]\r\n  (if (empty? x)\r\n    0\r\n    (+ 1 (xcount (rest x)))))", "problem": 22, "user": "4f52a134e4b03ad3f0c10d41"}, {"code": "#(.size (seq %))", "problem": 22, "user": "4f6fbb68e4b07046d9f4efeb"}, {"code": "#(reduce (fn [c _] (inc c)) 0 %)", "problem": 22, "user": "4f69681ee4b07046d9f4ef89"}, {"code": "#(reduce (fn [x _] (inc x)) 0 %)", "problem": 22, "user": "4f6fe5e4e4b07046d9f4efef"}, {"code": "(fn [s]\r\n  (reduce \r\n    (fn [v item] (+ v 1))\r\n    0\r\n    s))", "problem": 22, "user": "4f70183ee4b07046d9f4eff3"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "4f706cc3e4b07046d9f4eff7"}, {"code": "(fn [ary]\n  (loop [ct 0 ctary (seq ary)]\n    (if (not (= (first ctary) nil)) \n      (recur (inc ct) (rest ctary))\n      ct)))", "problem": 22, "user": "4f6fd95fe4b07046d9f4efee"}, {"code": "(fn [coll] (reduce (fn [i _] (inc i)) 0 coll))", "problem": 22, "user": "4f2d5246e4b0d6649770a059"}, {"code": "(fn [coll] \r\n  (loop [coll coll result 0]\r\n    (if (empty? coll)\r\n      result\r\n      (recur (next coll) (inc result)))))", "problem": 22, "user": "4f6ba647e4b07046d9f4efaf"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4e1172f8535d04ed9115e7c8"}, {"code": "(fn [seq]\n  (loop [kount 0, s seq] \n    (if (empty? s)\n      kount\n      (recur (inc kount) (rest s)))))", "problem": 22, "user": "4f70afb8e4b07046d9f4effb"}, {"code": "(fn [xs] ( (fn c-prime [xss,n] \n             (if (= xss '()) \n             n \n             (c-prime (rest xss) (+ 1 n) ) \n           ) \n         ) xs 0 ) )", "problem": 22, "user": "4f6d09c5e4b07046d9f4efc3"}, {"code": "(fn [thing]\n  (reduce +\n    (map\n      (fn [x] 1)\n      (vec thing))))", "problem": 22, "user": "4f70e701e4b07046d9f4f002"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "4f710c28e4b07046d9f4f005"}, {"code": "(fn this\n   ([seq] (this seq 0))\n   ([seq num]\n      (if (= seq '())\n        num\n        (this (rest seq) (+ 1 num)))))", "problem": 22, "user": "4f03b102535dcb61093f6b4e"}, {"code": "(comp (partial reduce +) (partial map (fn [_] 1)))", "problem": 22, "user": "4f71347ae4b07046d9f4f009"}, {"code": "(fn [x] (loop [s x c 0] (if (empty? s) c (recur (rest s) (inc c)))))", "problem": 22, "user": "4f713878e4b07046d9f4f00a"}, {"code": "#(loop [x % c 0]\n  (if-not (first x)\n  c\n  (recur (rest x) (inc c))))", "problem": 22, "user": "4f6e7073e4b07046d9f4efd8"}, {"code": "(fn [sq]\r\n  (reduce + (map (fn [x] 1) sq)))", "problem": 22, "user": "4f71db68e4b07046d9f4f015"}, {"code": "(fn[sq]\n  (loop [s sq cnt 0]\n    (if (empty? s)\n      cnt\n      (recur (rest s) (inc cnt)))))", "problem": 22, "user": "4f6236abe4b0defedf855fcd"}, {"code": "(fn counter [l] (if (empty? l) 0 (+ 1 (counter (rest l)) ) ))", "problem": 22, "user": "4f70d8e2e4b07046d9f4f000"}, {"code": "(fn cnt [set_] \n  (reduce + \n    (map (fn [elem] 1) set_)))", "problem": 22, "user": "4f71f782e4b07046d9f4f018"}, {"code": "#(loop [result 0 x %] \n  (if (empty? x)\n    result\n    (recur (+ result 1) (rest x))))", "problem": 22, "user": "4f6f777de4b07046d9f4efe5"}, {"code": "#(loop [xs %1\n        c 0]\n        (if (empty? xs) c\n        (recur (rest xs) (+ 1 c))))", "problem": 22, "user": "4f724e56e4b07046d9f4f027"}, {"code": "(fn [listx] \n  (loop [x listx c 0] \n    (if (empty? x) c (recur (rest x) (inc c)))\n  )\n)", "problem": 22, "user": "4f7216d4e4b07046d9f4f01c"}, {"code": "(fn [coll]\n  (loop [coll coll\n         n 0]\n         (if (empty? coll)\nn\n(recur (rest coll) (inc n)))))", "problem": 22, "user": "4f463dfde4b0d56e7bb92b99"}, {"code": "(fn c [xs] (if (empty? xs) 0 (inc (c (rest xs)))))", "problem": 22, "user": "4f725201e4b07046d9f4f02f"}, {"code": "(fn my-size [coll] \n  (if (not-empty coll)\n    (+ 1 (my-size (rest coll)))\n    0))", "problem": 22, "user": "4f7251eee4b07046d9f4f02e"}, {"code": "reduce (fn [t _] (inc t)) 0", "problem": 22, "user": "4f7207d3e4b07046d9f4f019"}, {"code": "(fn [s]\n  (reduce (fn [x y] (+ x 1)) 0 s))", "problem": 22, "user": "4f726dd2e4b07046d9f4f034"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4f726aaae4b07046d9f4f032"}, {"code": "#(reduce (fn [x y] (+ x 1)) 0 %)", "problem": 22, "user": "4f724d40e4b07046d9f4f024"}, {"code": "reduce (fn [accumulate _] (+ accumulate 1)) 0", "problem": 22, "user": "4f71ba6ee4b07046d9f4f012"}, {"code": "(fn f [s] (\n  if (= '() s)\n    0\n    (+ 1 (f (rest s)))\n))", "problem": 22, "user": "4f72e09de4b07046d9f4f03b"}, {"code": "(fn [x]\n        (#(if (empty? %1)\n            %2 (recur (rest %1) (inc %2)))\n         x 0))", "problem": 22, "user": "4e59f00b535d8a8b8723a2a5"}, {"code": "reduce (fn [a _] (inc a)) 0", "problem": 22, "user": "4f734e93e4b07046d9f4f043"}, {"code": "(fn f [x] (\n  (fn g [y z] (\n    if (= y '())\n    z\n    (g (rest y) (+ z 1))\n  )) x 0\n))", "problem": 22, "user": "4f73054fe4b07046d9f4f03e"}, {"code": "#(.size (seq %))", "problem": 22, "user": "4e6961f0535d8ccf87e9fe9b"}, {"code": "(fn cnt [coll] (if (empty? coll) 0 (inc (cnt (rest coll)))))", "problem": 22, "user": "4f7431d2e4b044e54cd9a8f7"}, {"code": "(fn [x]\n  ((fn [xprime accum]\n    (if (= xprime (empty xprime))\n        accum\n        (recur (rest xprime) (+ 1 accum))))\n  x 0\n  )\n)", "problem": 22, "user": "4f7250cce4b07046d9f4f02a"}, {"code": "#(\n  (fn c [x i]\n    (if x \n      (c (next x) (+ i 1))\n      i\n    )\n  ) % 0\n)", "problem": 22, "user": "4f28eb85e4b0d6649770a01d"}, {"code": "(fn [l] (loop [ls l, acc 0] (if (empty? ls) acc (recur (rest ls) (+ acc 1)))))", "problem": 22, "user": "4eeccfc0535d93acb0a668b5"}, {"code": "(fn my-count\n  ([v] (my-count v 1))\n  ([v n] (if (empty? (rest v)) n (recur (rest v) (inc n)))))", "problem": 22, "user": "4f74fe77e4b0fbe0118ec552"}, {"code": "(fn co[n] (if (empty? n ) 0 (+ 1 (co(rest n)))))", "problem": 22, "user": "4e6279e3535d8ccf87e9fe60"}, {"code": "(fn this [x] (if-not (empty? x) (inc (this (rest x))) 0))", "problem": 22, "user": "4ed3c9d3535d44c135fd68f7"}, {"code": "(fn [items] (loop [the-items items  count-so-far 0] (if (empty? the-items) count-so-far (recur (rest the-items) (inc count-so-far)))))", "problem": 22, "user": "4f689a17e4b07046d9f4ef77"}, {"code": "reduce (fn [a b] (inc a)) 0", "problem": 22, "user": "4f72f71be4b07046d9f4f03d"}, {"code": "reduce (fn [cnt, x] (+ 1 cnt)) 0", "problem": 22, "user": "4f72147ae4b07046d9f4f01b"}, {"code": "(fn Count [x] \n  (if (empty? x)\n    0\n    (+ 1 (Count (rest x)))))", "problem": 22, "user": "4f761a78e4b0fbe0118ec56c"}, {"code": "(fn [y] (apply + (map (fn [x] 1) y)))", "problem": 22, "user": "4f751a54e4b0fbe0118ec555"}, {"code": "#(alength (to-array %))", "problem": 22, "user": "4f70a967e4b07046d9f4effa"}, {"code": "#(loop [s (sequence %) c 0] (if (nil? s) c (recur (next s) (+ c 1))))", "problem": 22, "user": "4f75f498e4b0fbe0118ec567"}, {"code": "reduce (fn [a b] (inc a)) 0", "problem": 22, "user": "4f73f78de4b044e54cd9a8f3"}, {"code": "#((fn [l s] (cond (not (empty? l)) (recur (rest l) (inc s)) :else s)) % 0)", "problem": 22, "user": "4e0e648a535d04ed9115e7ba"}, {"code": "(fn [s] (loop [n 0 r s] (if (seq r)\n                            (recur (inc n) (rest r))\n                          n)))", "problem": 22, "user": "4f7774a6e4b0fbe0118ec57f"}, {"code": "(fn ___\n  ([x] (___ x 0))\n  ([x acc] \n    (if (empty? x) acc\n(recur (rest x) (+ acc 1))\n))\n)", "problem": 22, "user": "4f650efee4b07046d9f4ef39"}, {"code": "#(reduce (fn [i j] (inc i)) 0 %)", "problem": 22, "user": "4f77dc7be4b0fbe0118ec584"}, {"code": "(fn [list]\n  (reduce + (map (fn [x] 1) list)))", "problem": 22, "user": "4f77eb86e4b0fbe0118ec585"}, {"code": "(fn f [x] (if (= (rest x) '()) 1 (+ 1 (f (rest x)))))", "problem": 22, "user": "4f774b17e4b0fbe0118ec57b"}, {"code": "(comp alength to-array)", "problem": 22, "user": "4dad73dc8e77d6ed61f12a44"}, {"code": "(fn nr21\n    ([coll] (nr21 coll 0))\n    ([coll index] \n      (if (empty? coll) \n        index \n        (nr21 (rest coll) (+ index 1))\n      )))", "problem": 22, "user": "4f75eb33e4b0fbe0118ec565"}, {"code": "#(apply + (map (constantly 1) %))", "problem": 22, "user": "4f7869c2e4b0fbe0118ec589"}, {"code": "reduce (fn [a b] (+ a 1)) 0", "problem": 22, "user": "4f70bcf9e4b07046d9f4effe"}, {"code": "#( reduce (fn [x y] (+ 1 x)) 0 %  )", "problem": 22, "user": "4f725466e4b07046d9f4f030"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4f75f630e4b0fbe0118ec568"}, {"code": "(fn [s]\n  ((fn [s n]\n      (if (empty? s) n (recur (rest s) (inc n)))) s 0)\n)", "problem": 22, "user": "4f790ad5e4b0fbe0118ec58d"}, {"code": "#(if (string? %) (.length %) (.size %))", "problem": 22, "user": "4f7963b8e4b0fbe0118ec58f"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4f6ba7bce4b07046d9f4efb0"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "4f4ff836e4b03ad3f0c10cf4"}, {"code": "(fn [seq] \n  ((fn [rem acc] \n     (if (empty? rem)\n       acc\n       (recur (rest rem)(inc acc))))seq 0))", "problem": 22, "user": "4f7a9416e4b06e829148e19b"}, {"code": "(fn [s]\n  (reduce + (map (constantly 1) s)))", "problem": 22, "user": "4f7ab8c7e4b06e829148e19c"}, {"code": "(fn testa [l] (if \n  (nil? (first (vec l))) \n  0 \n  (+ 1 (testa (rest (vec l))))\n))", "problem": 22, "user": "4f74a617e4b044e54cd9a905"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4f7b2cb5e4b06e829148e19f"}, {"code": "(fn [x] (reduce + (map (fn [y] 1) x)))", "problem": 22, "user": "4f7b1c63e4b06e829148e19e"}, {"code": "(fn foo [x] (if (empty? x) 0 (+ 1 (foo (rest x)))))", "problem": 22, "user": "4f7baa30e4b06e829148e1a9"}, {"code": "#(reduce \r\n     + \r\n     (map (fn [x] (quote 1)) %))", "problem": 22, "user": "4f7b3d53e4b06e829148e1a0"}, {"code": "(fn ([arg] (reduce (fn ([a z] (+ 1 a))) 0 arg)))", "problem": 22, "user": "4f7d065ce4b06e829148e1b9"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "4f7d5328e4b06e829148e1bf"}, {"code": "(fn cnt [l & [x]]\n  (cond (empty? l) (if (nil? x) 0 x) \n        (nil? x) (cnt (rest l) 1)\n        :else (cnt (rest l) (inc x))\n  )\n)", "problem": 22, "user": "4f7b6b90e4b06e829148e1a4"}, {"code": "#(reduce (fn [u v] (+ 1 u)) 0 %)", "problem": 22, "user": "4f7d75a2e4b06e829148e1c2"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4f7d91e6e4b06e829148e1c3"}, {"code": "(fn [l] (reduce (fn [x y] (inc x)) 0 l))", "problem": 22, "user": "4f7e07f4e4b06e829148e1c9"}, {"code": "(fn [l]\n  (loop [c 0\n         [_ & args :as mylist] l]\n    (if (empty? mylist)\n      c\n      (recur (inc c) args))))", "problem": 22, "user": "4f7e29dde4b06e829148e1ca"}, {"code": "#(reduce (fn [c _] (inc c)) 0 %)", "problem": 22, "user": "4f7e33a6e4b06e829148e1cb"}, {"code": "(fn mycount [x]\n  (cond\n    (empty? x) 0\n    :else (+ 1 (mycount (rest x)))))", "problem": 22, "user": "4f7ef32be4b06e829148e1d4"}, {"code": "(fn cnt\n  ([s] (cnt s 0))\n  ([s c] (let [r (next s)\n               n (inc c)]\n           (if r (cnt r n) n))))", "problem": 22, "user": "4f7f0827e4b06e829148e1d5"}, {"code": "#(loop [c % n 0]\n    (if (empty? c)\n      n\n      (recur (rest c) (+ 1 n))))", "problem": 22, "user": "4f7c4eb7e4b06e829148e1af"}, {"code": "#(reduce + ( map (fn [x] 1 ) %) )", "problem": 22, "user": "4e81e93d535db62dc21a62bf"}, {"code": "(fn [lst] (reduce + (map (fn [_] 1) lst)))", "problem": 22, "user": "4f7fc9a1e4b033992c121bee"}, {"code": "#(reduce (fn [x y] (inc x)) 0 %)", "problem": 22, "user": "4f7d25b4e4b06e829148e1ba"}, {"code": "(fn [x] (reduce (fn[n _] (inc n)) 0 x))", "problem": 22, "user": "4f7b6f12e4b06e829148e1a5"}, {"code": "reduce (fn [acc x] (+ acc 1)) 0", "problem": 22, "user": "4f73536ee4b07046d9f4f044"}, {"code": "(fn m-ount [items]\n  (loop [its items amount 0]\n    (if (empty? its)\n      amount\n      (recur (rest its) (inc amount)))))", "problem": 22, "user": "4f81fcbfe4b033992c121c03"}, {"code": "#(reduce (fn [x, y] (inc x)) 0 %)", "problem": 22, "user": "4f7f9665e4b033992c121bea"}, {"code": "(fn [x] (loop [my-list x, c 0]\r\n  (if (empty? my-list)\r\nc\r\n    (recur (rest my-list) (inc c))\r\n)))", "problem": 22, "user": "4dca56b6535d5973398f9287"}, {"code": "(fn [sq]\n  (loop [s (seq sq)\n         acc 0]\n    (if (empty? s)\n      acc\n      (recur (rest s) (inc acc)))))", "problem": 22, "user": "4f82e14be4b033992c121c0c"}, {"code": "(fn [xs] (apply + (map (fn [_] 1) xs)))", "problem": 22, "user": "4f8345c6e4b033992c121c1b"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4f83bb22e4b033992c121c22"}, {"code": "reduce (fn [ a e] ( inc a ) ) 0", "problem": 22, "user": "4f83ee95e4b033992c121c26"}, {"code": "(fn f[l] (if (empty? l) 0 (+ 1 (f (rest l)))))", "problem": 22, "user": "4f83e712e4b033992c121c25"}, {"code": "(fn [lst] \n  (loop [mylst lst, mycount 0]\n    (if (seq mylst)\n      (recur (rest mylst) (inc mycount))\n      mycount)))", "problem": 22, "user": "4f82f1b9e4b033992c121c0f"}, {"code": "(fn [seq] \n  ((fn [s c] \n    (if \n      (empty? s) \n      c \n      (recur (rest s) (inc c)))) seq 0))", "problem": 22, "user": "4f30aee5e4b0d6649770a07d"}, {"code": "(fn [coll] (reduce + (map (fn [x] 1) coll)))", "problem": 22, "user": "4e526cc4535d302ef430da74"}, {"code": "(fn [x] (reduce + (map (fn [_] 1) x )))", "problem": 22, "user": "4f847bf2e4b033992c121c32"}, {"code": "(fn [xs]\n  (loop [xs xs\n    n 0]\n    (if (empty? xs)\n      n\n      (recur (rest xs) (inc n)))))", "problem": 22, "user": "4f7c7ed7e4b06e829148e1b4"}, {"code": "(fn taille [liste]\n  (\n    if (empty? liste)\n    0\n    (+ 1 (taille (rest liste)))\n  )\n)", "problem": 22, "user": "4f84400de4b033992c121c2e"}, {"code": "(fn counts [x] (if (empty? x) 0 (+ (counts (rest x)) 1)))", "problem": 22, "user": "4f84f6c3e4b033992c121c3d"}, {"code": "reduce (fn [acc n] (+ acc 1)) 0", "problem": 22, "user": "4f825f86e4b033992c121c07"}, {"code": "(fn [seq]\n  ((fn [seq n]\n    (if (first seq)\n      (recur (next seq) (+ n 1))\n      n)) seq 0))", "problem": 22, "user": "4f8490fae4b033992c121c34"}, {"code": "(fn count-seq [seq]\n  (if (next seq)\n    (+ 1 (count-seq (next seq)))\n    1))", "problem": 22, "user": "4f856248e4b033992c121c43"}, {"code": "(fn [x] (reduce + (map (constantly 1) x)))", "problem": 22, "user": "4f8592e6e4b033992c121c47"}, {"code": "(fn [xs]\n        (letfn [(cnt [xs n]\n                    (if (= xs '[])\n                        n\n                        (cnt (rest xs) (+ n 1))))]\n                (cnt xs 0)))", "problem": 22, "user": "4f859146e4b033992c121c46"}, {"code": "; Confession, I had the idea right of wanting to\n; use reduce to apply 1 to each item and count\n; them for the overall count.  Unfortunately, I ended\n; up having to resort to a web search to get the\n; syntax right.\n; \n; The syntax below accomplishes what I originally\n; missed with the internal fn [x y] function.  y is\n; the sequence but is ignored such that reduce then\n; becomes (+ 0 1) and each item is then counted.\n(fn [s]\n  (reduce (fn [x y] (+ x 1)) 0 s))", "problem": 22, "user": "4f831fd3e4b033992c121c17"}, {"code": "#(reduce (fn [x y] (inc x)) 0 %)", "problem": 22, "user": "4dc78527535d8a4b2fd7428f"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4f8544e0e4b033992c121c40"}, {"code": "(fn loopy \n  ([s] (loopy (rest s) 1))\n  ([s c] \n    (if-not (= (first s) nil)\n      (loopy (rest s) (inc c))\n      c)))", "problem": 22, "user": "4ed2b337535d44c135fd68de"}, {"code": "(fn [c] (reduce (fn [x y] (+ x 1)) 0 c))", "problem": 22, "user": "4f85b7b5e4b033992c121c49"}, {"code": "#(loop [c 0 col %] (if (first col) (recur (inc c) (rest col)) c))", "problem": 22, "user": "4f83665ee4b033992c121c1c"}, {"code": "(fn aa [lst] (loop [n lst i 0] (if (empty? n) i (recur (rest n) (inc i)))))", "problem": 22, "user": "4f85d497e4b033992c121c4b"}, {"code": "#(first \n  (last\n    (map vector (iterate inc 1) %)))", "problem": 22, "user": "4f7c2ac4e4b06e829148e1ad"}, {"code": "(fn kount [s] (loop [cnt 0 sq s] (if (empty? sq) cnt (recur (inc cnt) (rest sq)))))", "problem": 22, "user": "4f856171e4b033992c121c42"}, {"code": "(fn [l]\n    (reduce + (map (fn [x] 1) l)))", "problem": 22, "user": "4f85ef29e4b033992c121c4d"}, {"code": "reduce #(do %2 (+ 1 %)) 0", "problem": 22, "user": "4f80db02e4b033992c121bf9"}, {"code": "(fn cnt [[x & rst]] (if (seq? rst) (inc (cnt rst)) 1))", "problem": 22, "user": "4f803577e4b033992c121bf0"}, {"code": "#(loop [coll % acc 0]\n   (if (empty? coll)\n     acc\n     (recur (rest coll) (inc acc))))", "problem": 22, "user": "4f33a668e4b0d6649770a09d"}, {"code": "#(reduce + (map (fn [x] 1)%))", "problem": 22, "user": "4f8843aae4b033992c121c61"}, {"code": "(fn c [l] (if (empty? l) 0 (+ 1 (c (rest l)))))", "problem": 22, "user": "4f88942be4b033992c121c6a"}, {"code": "(fn [lst] (reduce + (map (fn [x] 1) lst)))", "problem": 22, "user": "4f88f57ae4b033992c121c73"}, {"code": "(fn cnt [seq] \n  (if (empty? seq) 0 (+ 1 (cnt (rest seq)))))", "problem": 22, "user": "4f88f729e4b033992c121c74"}, {"code": "(fn f [x] (if (empty? x) 0 (+ 1 (f (rest x)))))", "problem": 22, "user": "4f89311ce4b033992c121c78"}, {"code": "reduce #(do %2 (+ 1 %1)) 0", "problem": 22, "user": "4f88ae35e4b033992c121c6d"}, {"code": "(fn [se] \n  (loop [sed se \n         x 0]\n      (do\n      (println sed x)\n      (if (empty? sed)\n           x\n          (recur (rest sed) (+ x 1))\n       )\n      )\n  )\n)", "problem": 22, "user": "4f891abde4b033992c121c77"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "4f74a4fbe4b044e54cd9a901"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4f0b0116535d0136e6c222fd"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "4f8aa2f9e4b02e764a0a516f"}, {"code": "(fn [coll]\n  (loop [size 0 coll1 coll]\n    (if (empty? coll1)\n      size\n      (recur (+ size 1) (rest coll1)))))", "problem": 22, "user": "4f897b6de4b033992c121c7b"}, {"code": "#(loop [acc 0 x %]\r\n(if (empty? x) acc (recur (inc acc) (rest x)))\r\n)", "problem": 22, "user": "4e10a14d535d04ed9115e7c1"}, {"code": "#(loop [i 0 c %] (if (= '() c) i \n  (recur (inc i) (rest c))))", "problem": 22, "user": "4f8ab084e4b02e764a0a5171"}, {"code": "#(reduce + (map (fn [x] (if x 1 1)) %))", "problem": 22, "user": "4f882b4be4b033992c121c60"}, {"code": "#(+ (first (last (map-indexed vector %))) 1)", "problem": 22, "user": "4f8b08d2e4b02e764a0a5177"}, {"code": "(fn a [s] (if (empty? s) 0 (+ 1 (a (rest s)))))", "problem": 22, "user": "4f8b2f79e4b02e764a0a517a"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4f57141ee4b0a7574ea71830"}, {"code": "(fn foo [x]\n  (if (empty? x) 0 (inc (foo (rest x)))))", "problem": 22, "user": "4f8b20fce4b02e764a0a5178"}, {"code": "(fn [s] (reduce (fn [a b] (+ a 1)) 0 s))", "problem": 22, "user": "4f8b56dae4b02e764a0a517e"}, {"code": "reduce (fn [cnt _] (inc cnt)) 0", "problem": 22, "user": "4ecdf94a535d23f03622770b"}, {"code": "(fn [seq]\r\n  (loop [cnt 0\r\n         sq seq]\r\n    (if (empty? sq)\r\n      cnt\r\n      (recur (inc cnt) (rest sq)))))", "problem": 22, "user": "4f8aa1c1e4b02e764a0a516e"}, {"code": "#(reduce (fn [x y] (+ x 1)) 0 %)", "problem": 22, "user": "4f8bbb27e4b02e764a0a5182"}, {"code": "(fn [l] (reduce + (map (fn [x] 1) l)))", "problem": 22, "user": "4f88d814e4b033992c121c6f"}, {"code": "reduce (fn [x _] (inc x)) 0", "problem": 22, "user": "4f8c3697e4b02e764a0a518d"}, {"code": "#(reduce (fn [x _](+ x 1)) 0 %)", "problem": 22, "user": "4f889070e4b033992c121c67"}, {"code": "(fn len [col]\n  (if (empty? col) \n    0\n    (+ (len (rest col)) 1)))", "problem": 22, "user": "4f8c6bf6e4b02e764a0a519b"}, {"code": "(fn [l] (apply + (map (fn [x] 1) l)))", "problem": 22, "user": "4f8c5f4fe4b02e764a0a5198"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4f559503e4b0a7574ea71804"}, {"code": "(comp (partial reduce +)\n      (partial map (constantly 1)))", "problem": 22, "user": "4f3fb586e4b0e243712b1f9c"}, {"code": "#(loop[li % cnt 0]\n  (if-let [f (first li)]\n    (recur (rest li)(inc cnt))\n    cnt))", "problem": 22, "user": "4f8beb2fe4b02e764a0a5185"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4f8bef41e4b02e764a0a5186"}, {"code": "(fn myCount [list]\n  (if (empty? list)\n    0\n    (+ 1 (myCount (rest list)))\n  )\n)", "problem": 22, "user": "4f718ce5e4b07046d9f4f00d"}, {"code": "#(loop [x % c 0] (if (seq x) (recur (rest x) (inc c)) c))", "problem": 22, "user": "4f887e36e4b033992c121c64"}, {"code": "(fn my-count\n  ([x]\n    (my-count (rest x) 1))\n  ([x c]\n    (if (empty? x)\n      c\n      (my-count (rest x) (+ c 1)))))", "problem": 22, "user": "4f8d340be4b02e764a0a51a8"}, {"code": "(fn [x] (reduce (fn [x y] (+ x 1)) 0 x))", "problem": 22, "user": "4f748b54e4b044e54cd9a8fa"}, {"code": "(fn t [x] (if   (nil? x)\r\n\t\t\t\t\t\t0\r\n\t\t\t\t\t\t(+ 1 (t (next x)))))", "problem": 22, "user": "4f8dbae2e4b02e764a0a51b3"}, {"code": "#(+ (.lastIndexOf (into [] %) (last (into [] %))) 1)", "problem": 22, "user": "4f871f6ae4b033992c121c57"}, {"code": "(fn foo [l]\n  (if (first l)\n      (+ 1 (foo (rest l)))\n      0))", "problem": 22, "user": "4f8e155ae4b0d4e659cdde63"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4f8d6972e4b02e764a0a51af"}, {"code": "#(let [cnt \n    (fn [a n] \n      (if (empty? a) \n          n \n          (recur (rest a) (+ 1 n)) \n      )\n    )]\n  (cnt %1 0)\n)", "problem": 22, "user": "4f8ea1f7e4b0d4e659cdde69"}, {"code": "(fn [x] (reduce + (map (fn [y] 1) x)))", "problem": 22, "user": "4f85a75ce4b033992c121c48"}, {"code": "#(loop [l %  n 0]\n  (if (empty? l)\n    n\n    (recur (drop 1 l) (+ n 1))))", "problem": 22, "user": "4f90e238e4b0dcca54ed6c94"}, {"code": "reduce (fn[x y] (+ x 1)) 0", "problem": 22, "user": "4f912455e4b0dcca54ed6c98"}, {"code": "#(reduce max (keys (zipmap  (iterate inc 1) %)))", "problem": 22, "user": "4f9174d0e4b0dcca54ed6c9b"}, {"code": "(fn [array] (reduce + (map (fn [x] 1) array)))", "problem": 22, "user": "4f90b562e4b0dcca54ed6c91"}, {"code": "(fn [x] \n  (reduce \n  + \n  (map (constantly 1) x)))", "problem": 22, "user": "4f8db862e4b02e764a0a51b2"}, {"code": "reduce (fn [a b] (+ a 1)) 0", "problem": 22, "user": "4f9120d8e4b0dcca54ed6c96"}, {"code": "(fn cnt\n  [x]\n    (if (empty? x)\n        0\n        (+ 1 (cnt (rest x)))))", "problem": 22, "user": "4f91a38ae4b0dcca54ed6c9f"}, {"code": "(fn [s] (reduce (fn [n _] (inc n)) 0 s))", "problem": 22, "user": "4f91fd31e4b0dcca54ed6ca8"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "4f92709de4b0dcca54ed6cad"}, {"code": "(fn [s] (reduce (fn [a e] (+ 1 a)) 0 s))", "problem": 22, "user": "4f6511eee4b07046d9f4ef3a"}, {"code": "(fn [x]\n  (loop [elt x acc 0]\n   \t\t(if (empty? elt)\n        \tacc\n        \t(recur (rest elt) (inc acc)))))", "problem": 22, "user": "4f8ac2bde4b02e764a0a5172"}, {"code": "reduce (fn [i _] (inc i)) 0", "problem": 22, "user": "4f92b194e4b0dcca54ed6cb1"}, {"code": "(fn [x] (reduce + (map (fn [_] 1) x)))", "problem": 22, "user": "4f93afd0e4b0dcca54ed6cbd"}, {"code": "(fn j[n x](if (= nil (last x)) n (j (+ 1 n) (drop 1 x)))) 0", "problem": 22, "user": "4f935f94e4b0dcca54ed6cbb"}, {"code": "#(reduce (fn [x y] (inc x)) 0 %)", "problem": 22, "user": "4e778d36535d324fb2983d71"}, {"code": "reduce (fn [x y] (+ 1 x)) 0", "problem": 22, "user": "4f91f5b1e4b0dcca54ed6ca7"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4f727023e4b07046d9f4f035"}, {"code": "#(apply + (map (fn [x] 1) %))", "problem": 22, "user": "4f8bb50ce4b02e764a0a5181"}, {"code": "(fn [x] (reduce + (map (fn [y] 1) x)))", "problem": 22, "user": "4f946be7e4b0dcca54ed6cc3"}, {"code": "(fn [l] (reduce + (map (fn [x] 1) l)))", "problem": 22, "user": "4f94dab7e4b0dcca54ed6cc6"}, {"code": "(fn [v] (reduce + (map (fn to1 [x] (if (= x 1) 1 1)) (seq v))))", "problem": 22, "user": "4f9336ece4b0dcca54ed6cb7"}, {"code": "(fn [seq]\n  ((fn [s c]\n    (if (empty? s) c (recur (rest s) (inc c))))\n    seq 0))", "problem": 22, "user": "4f951375e4b0dcca54ed6cc8"}, {"code": "reduce (fn [c _] (inc c)) 0", "problem": 22, "user": "4f9510b5e4b0dcca54ed6cc7"}, {"code": "reduce (fn [c _] (inc c)) 0", "problem": 22, "user": "4f954dbce4b0dcca54ed6ccd"}, {"code": "(fn [c] (reduce (fn [acc item](+ acc 1)) 0 c))", "problem": 22, "user": "4f944f60e4b0dcca54ed6cc2"}, {"code": "(fn mycount [list]\n  (if (= '() list) 0 (+ 1 (mycount (rest list)))))", "problem": 22, "user": "4f9597e0e4b0dcca54ed6cd4"}, {"code": "reduce (fn [acc _] (inc acc)) 0", "problem": 22, "user": "4f96a5e8e4b0dcca54ed6cdf"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4f96b982e4b0dcca54ed6ce0"}, {"code": "(fn [c] (let \n    [[x _] (last (map vector (iterate inc 1) c))] x))", "problem": 22, "user": "4f95a8a1e4b0dcca54ed6cd7"}, {"code": "(fn cn [seq] (if (not-empty seq) (+ 1 (cn (rest seq))) 0))", "problem": 22, "user": "4f96e47ae4b0dcca54ed6ce1"}, {"code": "(fn c[x] (if (empty? x) 0 (+ 1 (c (rest x)))))", "problem": 22, "user": "4f96fa2ae4b0dcca54ed6ce4"}, {"code": "#(reduce + (map (constantly 1) %1))", "problem": 22, "user": "4f890488e4b033992c121c76"}, {"code": "(fn [sequ] (reduce (fn [c x] (inc c)) 0 sequ))", "problem": 22, "user": "4f9754d4e4b0dcca54ed6ce9"}, {"code": "(fn [coll] (reduce (fn [n _] (inc n)) 0 coll))", "problem": 22, "user": "4f969214e4b0dcca54ed6cdd"}, {"code": "(fn [s] (inc (first (last (map-indexed vector s)))))", "problem": 22, "user": "4f97d8f3e4b0dcca54ed6ced"}, {"code": "(fn length [data]\r\n  (loop [len 0 remain data]\r\n    (if (empty? remain)\r\n      len\r\n      (recur (inc len) (next remain)))))", "problem": 22, "user": "4f840766e4b033992c121c27"}, {"code": "(fn cnt \n   ([l] (cnt l 0)) \n   ([l c]\n        (if (seq l)\n            (cnt (pop (vec l)) (+ c 1)) \n            c   \n        )   \n    )   \n    )", "problem": 22, "user": "4f82e741e4b033992c121c0d"}, {"code": "reduce (fn [a, e] (+ a 1)) 0", "problem": 22, "user": "4f91cca8e4b0dcca54ed6ca3"}, {"code": "(fn blah [x] (if (empty? x) 0 (+ 1 (blah (rest x)))))", "problem": 22, "user": "4f17aa97535d64f603146456"}, {"code": "(fn [coll] (reduce + (vals (frequencies coll))))", "problem": 22, "user": "4f98da04e4b0dcca54ed6cf7"}, {"code": "(fn [coll]\n  (loop [c coll i 0]\n    (if (empty? c) i\n        (recur (rest c) (inc i)))))", "problem": 22, "user": "4f98ead0e4b0dcca54ed6cf8"}, {"code": "#(.size (seq %))", "problem": 22, "user": "4f991ec1e4b0dcca54ed6cfb"}, {"code": "(fn [x] (reduce (fn [x y] (+ x 1) ) 0 x))", "problem": 22, "user": "4f5d0f25e4b0030a34fb2b33"}, {"code": "#(apply + (map (fn [x] 1) %))", "problem": 22, "user": "4f9920a3e4b0dcca54ed6cfc"}, {"code": "(fn count1 [lst]\n  (if (= lst ())\n0\n(+ 1 (count1 (rest lst)))))", "problem": 22, "user": "4f9a0064e4b0dcca54ed6d03"}, {"code": "(fn [li] (apply + (map (fn [x] 1) li)))", "problem": 22, "user": "4f9aa2a6e4b0dcca54ed6d0c"}, {"code": "(fn [s] (reduce + (map (fn [x] 1) s)))", "problem": 22, "user": "4f9aa75ee4b0dcca54ed6d0d"}, {"code": "#(reduce (fn [a b] (inc a)) 0 %)", "problem": 22, "user": "4f9acea6e4b0dcca54ed6d10"}, {"code": "(fn my-count [s]\n     (loop [s s\n            n 0]\n      (if (empty? s)\n        n\n        (recur (rest s) (inc n)))))", "problem": 22, "user": "4f989e48e4b0dcca54ed6cf3"}, {"code": "(fn [x] \n  (loop [i x cnt 0] \n    (if (empty? i) \n      cnt\n      (recur (rest i) (inc cnt)))))", "problem": 22, "user": "4f9b27d7e4b0dcca54ed6d12"}, {"code": "(fn [xs] ((\n  fn [ys, cnt] (\n    if (= ys ())\n    cnt\n    (recur (rest ys) (inc cnt))\n  )\n) xs 0)\n)", "problem": 22, "user": "4f8da0e2e4b02e764a0a51b1"}, {"code": "reduce (fn [sum e] (+ sum 1)) 0", "problem": 22, "user": "4f9b426be4b0dcca54ed6d14"}, {"code": "#(loop [acc 0\n         lst %1]\n    (if (empty? lst)\n      acc\n     (recur (+ acc 1) (rest lst))))", "problem": 22, "user": "4f9b3532e4b0dcca54ed6d13"}, {"code": "(fn foo\n  ([x]\n     (foo x 0))\n  ([x n]\n     (if (not (empty? x))\n       (foo (rest x) (inc n))\n       n)))", "problem": 22, "user": "4f954c6be4b0dcca54ed6ccb"}, {"code": "#(reduce (fn [cnt next] (inc cnt)) 0 %)", "problem": 22, "user": "4f9b5a1ce4b0dcca54ed6d16"}, {"code": "(fn [coll] ( reduce (fn [x _] (inc x)) 0 coll))", "problem": 22, "user": "4f8e984ee4b0d4e659cdde68"}, {"code": "#(inc (first (last (map-indexed vector %))))", "problem": 22, "user": "4f8386c5e4b033992c121c1d"}, {"code": "(fn [coll] (last (map #(int %2) coll (iterate inc 1))))", "problem": 22, "user": "4ee77f15535d93acb0a66868"}, {"code": "(fn [arr] \r\n  (loop [a (seq arr) n 0]\r\n  \t(if (nil? a)\r\n\t\tn\r\n\t\t(recur (next a) (+ n 1))))\r\n\t)", "problem": 22, "user": "4f98c161e4b0dcca54ed6cf5"}, {"code": "#(apply + (map (fn [_] (identity 1)) %))", "problem": 22, "user": "4e897fc5535de4250bdfe493"}, {"code": "(fn [xs]\n  (loop [xs xs\n    result 0]\n    (if (empty? xs)\nresult\n(recur (rest xs) (inc result)))))", "problem": 22, "user": "4f9c7b0fe4b0dcca54ed6d1c"}, {"code": "(fn [l] (reduce (fn [n _] (+ n 1)) 0 l))", "problem": 22, "user": "4f9b05ade4b0dcca54ed6d11"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4f9c4b02e4b0dcca54ed6d1b"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4f9d53f3e4b0dcca54ed6d21"}, {"code": "(fn counter \n  ([list] (counter (vec list) 0))\n  ([list amount] (if (empty? (vec list)) amount (counter (pop (vec list)) (inc amount)))))", "problem": 22, "user": "4f6fd91ae4b07046d9f4efed"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4f9d87fce4b0dcca54ed6d24"}, {"code": "(fn my-count \r\n  ([s] (my-count s 0))\r\n  ([s n] (cond (empty? s) n\r\n         :default (my-count (rest s) (+ n 1)))))", "problem": 22, "user": "4f9c4080e4b0dcca54ed6d1a"}, {"code": "(fn mycount [xs]\n  (let [mycount2 (fn [xs n]\n                   (if (empty? xs)\n                     n\n                     (recur (next xs) (inc n))))]\n    (mycount2 (seq xs) 0)))", "problem": 22, "user": "4f9d9d89e4b0dcca54ed6d25"}, {"code": "(fn [x] (reduce #(if %2 (inc %1) %1) 0 x))", "problem": 22, "user": "4f82ed48e4b033992c121c0e"}, {"code": "#((fn get-last [x n] (\n  if (= (first x) nil) n (get-last (rest x) (inc n)))) % 0)", "problem": 22, "user": "4f9dbe07e4b0dcca54ed6d26"}, {"code": "reduce (fn [x _] (inc x)) 0", "problem": 22, "user": "4f99ae4ae4b0dcca54ed6d00"}, {"code": "(fn the-count [l]\n  (if (empty? l)\n    (+ 0)\n    (+ 1 (the-count (rest l)))\n  ))", "problem": 22, "user": "4f9e0000e4b0dcca54ed6d2a"}, {"code": "reduce (fn [a _] (inc a)) 0", "problem": 22, "user": "4f9d8083e4b0dcca54ed6d23"}, {"code": "(fn [s] (reduce + (map (constantly 1) s)))", "problem": 22, "user": "4f9907f8e4b0dcca54ed6cfa"}, {"code": "(fn [seq] (reduce + (map (fn [x] 1) seq)))", "problem": 22, "user": "4db9b2c7535d1e037afb21a5"}, {"code": "(fn [collection] (reduce (fn [memo val] (+ memo 1)) 0 collection))", "problem": 22, "user": "4f9f135be4b0dcca54ed6d34"}, {"code": "(partial reduce (fn [c _] (inc c)) 0)", "problem": 22, "user": "4f969a66e4b0dcca54ed6cde"}, {"code": "#(.size (seq %))", "problem": 22, "user": "4f9fe2b9e4b0dcca54ed6d40"}, {"code": "(fn c [a] \r\n  (if (nil? (seq a))\r\n\t\t0 \r\n\t\t(+ 1 (c (rest a)))))", "problem": 22, "user": "4f9fe06fe4b0dcca54ed6d3f"}, {"code": "(fn [elem] \r\n     (loop [curr (seq elem) acc 0]\r\n    (if (empty? curr)\t\t\r\n\t\tacc\r\n\t  (recur (rest curr) (inc acc)))\r\n\t )\r\n)", "problem": 22, "user": "4f9f9ff5e4b0dcca54ed6d3a"}, {"code": "#(reduce (fn[x y](+ x 1)) 0%)", "problem": 22, "user": "4fa06d8de4b0dcca54ed6d4b"}, {"code": "(fn [list] (reduce (fn [cnt x] (+ cnt 1)) 0 list))", "problem": 22, "user": "4fa09916e4b0dcca54ed6d4e"}, {"code": "#(reduce + (map (fn [_] 1) %))", "problem": 22, "user": "4fa0a4b1e4b0dcca54ed6d4f"}, {"code": "(fn [cs] (apply + (map (fn [x] 1) cs)))", "problem": 22, "user": "4fa069c3e4b0dcca54ed6d4a"}, {"code": "#((fn [s n] (if (empty? s) n (recur (rest s) (+ n 1)))) % 0)", "problem": 22, "user": "4fa1183fe4b0dcca54ed6d57"}, {"code": "#(loop [current-count 0 current-coll %]\n                 (if (= current-coll ())\n                   current-count\n                   (recur (inc current-count) (rest current-coll)))\n             )", "problem": 22, "user": "4f9ff06ce4b0dcca54ed6d41"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4fa13cd1e4b0dcca54ed6d59"}, {"code": "reduce #(or (+ 1 %1) %2) 0", "problem": 22, "user": "4fa11204e4b0dcca54ed6d56"}, {"code": "#(apply + (map (fn [_] 1) %))", "problem": 22, "user": "4f9a0f71e4b0dcca54ed6d04"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4fa03445e4b0dcca54ed6d45"}, {"code": "reduce (fn [a b] (inc a)) 0", "problem": 22, "user": "4f956072e4b0dcca54ed6ccf"}, {"code": "(fn [x] (reduce (fn [a b] (inc a)) 0 (seq x)))", "problem": 22, "user": "4fa0b333e4b0dcca54ed6d50"}, {"code": "(fn [x] (reduce + (map (fn [_] 1) x)))", "problem": 22, "user": "4f9f7daae4b0dcca54ed6d37"}, {"code": "(fn [sq] (apply + (map (fn [a] (+ 0 1)) sq)))", "problem": 22, "user": "4f148418535d64f60314643a"}, {"code": "(fn [colls]\r\n    (loop [num 0 left colls]\r\n      (if (empty? left)\r\n  num\r\n\t(recur (inc num) (rest left)))))", "problem": 22, "user": "4f9970b3e4b0dcca54ed6cfd"}, {"code": "(fn cnt [seq & curr]\n  (if (= (next seq) nil)\n    (or curr 1)\n    (recur (rest seq) (+ 1 (or curr 1)))))", "problem": 22, "user": "4fa2a5e9e4b0dcca54ed6d69"}, {"code": "(fn [X] (apply + (map (constantly 1) X)))", "problem": 22, "user": "4f8b27b3e4b02e764a0a5179"}, {"code": "(fn[coll] (reduce + (map (fn[n] 1) coll)))", "problem": 22, "user": "4fa2b650e4b0dcca54ed6d6a"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4fa17b00e4b0dcca54ed6d5f"}, {"code": "(fn my-n [li] (if (= (rest li) []) 1 (inc (my-n (rest li)))))", "problem": 22, "user": "4fa07a93e4b0dcca54ed6d4d"}, {"code": "reduce (fn [a b] (inc a)) 0", "problem": 22, "user": "4fa39b3ee4b081705acca191"}, {"code": "(fn [coll] (reduce (fn [%1 %2] (inc %1)) 0 (seq coll)))", "problem": 22, "user": "4fa2fa5ee4b081705acca186"}, {"code": "#(reduce (fn [acc n] (inc acc)) 0 %)", "problem": 22, "user": "4fa30027e4b081705acca187"}, {"code": "(fn myfn\n  ([coll] (myfn coll 0))\n  ([coll n] (if (= (seq coll) nil) n (recur (rest coll) (+ n 1)))))", "problem": 22, "user": "4f68fb4be4b07046d9f4ef82"}, {"code": "(fn [s] (reduce #(+ %1 %2) (map (fn [x] 1) s)))", "problem": 22, "user": "4fa3f91fe4b081705acca196"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4fa32388e4b081705acca189"}, {"code": "(fn cnt [coll] \n  (reduce + (map (fn [sdf] 1) coll)))", "problem": 22, "user": "4fa4bf47e4b081705acca1a3"}, {"code": "#(.length (vec %))", "problem": 22, "user": "4fa4ef2ee4b081705acca1a9"}, {"code": "(fn length [coll]\n  (if (empty? coll)\n    0\n    (inc (length (rest coll)))) )", "problem": 22, "user": "4fa4f2f2e4b081705acca1aa"}, {"code": "(fn count-a-seq [lat]\n  (reduce (fn [x y] (+ x 1)) 0 lat))", "problem": 22, "user": "4fa4d900e4b081705acca1a7"}, {"code": "(fn mcount \n  ([x] (mcount x 0))\n  ([x y]\n    (if \n      (seq x)\n      (mcount (rest x) (inc y))\n      y)))", "problem": 22, "user": "4fa5406fe4b081705acca1ac"}, {"code": "(fn my-count\n  ([[x & xrest]]\n     (if (nil? x)\n       0\n       (if (nil? xrest)\n         1\n         (my-count 2 xrest))))\n  ([length [x & xrest]]\n     (if (nil? xrest)\n       length\n       (recur (inc length) xrest))))", "problem": 22, "user": "4fa27e18e4b0dcca54ed6d68"}, {"code": "reduce (fn [c _] (+ 1 c)) 0", "problem": 22, "user": "4fa5c8dde4b081705acca1af"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "4fa5ddfde4b081705acca1b1"}, {"code": "(fn [xs]\n  ((fn [xs n]\n    (if (empty? xs)\n        n\n        (recur (rest xs) (inc n))))\n  xs 0))", "problem": 22, "user": "4f94d3a5e4b0dcca54ed6cc5"}, {"code": "(fn length [coll]\r\n  (if (empty? coll)\r\n    0\r\n    (inc (length (rest coll)))) )", "problem": 22, "user": "4fa659f3e4b081705acca1b6"}, {"code": "#(+ (.lastIndexOf (vec %) (last (vec %))) 1)", "problem": 22, "user": "4fa58500e4b081705acca1ae"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4fa6440ee4b081705acca1b5"}, {"code": "(fn c [l]\n  ((fn cl [l i]\n    (if\n      (= l [])\n        i\n        (cl (rest l) (+ i 1))\n    )\n  ) l 0)\n)", "problem": 22, "user": "4fa67030e4b081705acca1b7"}, {"code": "#(loop [aseq %1 n 0]\n  (if (seq aseq) (recur (next aseq) (inc n)) n))", "problem": 22, "user": "4fa6d532e4b081705acca1be"}, {"code": "(fn [l]\n  ((fn reccount [L ct]\n    (if (seq L)\n      (reccount (rest L) (inc ct))\n      ct)) l 0))", "problem": 22, "user": "4fa719c0e4b081705acca1bf"}, {"code": "(fn [s] (reduce + (map (fn [n] 1) s)))", "problem": 22, "user": "4fa7b013e4b081705acca1c8"}, {"code": "(fn manual-count [x]\n  (if (= x '()) 0 (+ 1 (manual-count (rest x))))\n)", "problem": 22, "user": "4fa7ef54e4b081705acca1ca"}, {"code": "(partial\n  (fn [n x] (if (seq x) (recur (+ n 1) (next x)) n))\n  0)", "problem": 22, "user": "4fa820fde4b081705acca1ce"}, {"code": "(fn [x]\n  (loop [x x cnt 0]\n    (if (seq x) (recur (rest x) (inc cnt)) cnt)))", "problem": 22, "user": "4fa82277e4b081705acca1d0"}, {"code": "(fn\n  [collection]\n  (loop [items collection size 0]\n    (if (empty? items)\n      size\n      (recur (rest items) (inc size))))\n\n)", "problem": 22, "user": "4f92884de4b0dcca54ed6caf"}, {"code": "#(reduce + (map (fn [x] 1) %1))", "problem": 22, "user": "4fa7798ce4b081705acca1c3"}, {"code": "(fn [xs] (reduce (fn [x y] (+ x 1)) 0 xs))", "problem": 22, "user": "4fa6a491e4b081705acca1bc"}, {"code": "#( reduce + (map (constantly 1) %))", "problem": 22, "user": "4fa96e80e4b081705acca1df"}, {"code": "(fn asdf [xs] \n  (if \n    (= xs '()) \n    0 \n    (+ 1 (asdf (rest xs))))\n)", "problem": 22, "user": "4fa68ed4e4b081705acca1bb"}, {"code": "(fn [coll]\n  (loop [cnt 0 c coll]\n    (if (empty? c)\n      cnt\n      (recur (inc cnt) (rest c)))))", "problem": 22, "user": "4fa982fae4b081705acca1e0"}, {"code": "(fn length [x] (if (empty? x) 0 (inc (length (rest x)))))", "problem": 22, "user": "4f9fb08ae4b0dcca54ed6d3c"}, {"code": "(fn [x] (apply + (map (constantly 1) x)))", "problem": 22, "user": "4fa99ee1e4b081705acca1e4"}, {"code": "(fn [coll]\n  (loop [i 0 coll1 coll]\n    (if (empty? coll1)\n      i\n      (recur (inc i) (rest coll1)))))", "problem": 22, "user": "4faa5735e4b081705acca1ee"}, {"code": "(fn [a-seq]\r\n  (loop [cnt 0 as a-seq]\r\n    (if (empty? as) cnt\r\n      (recur (inc cnt) (rest as)))))", "problem": 22, "user": "4faa8de0e4b081705acca1f8"}, {"code": "(fn coun [xs]\n  (if (empty? xs)\n    0\n    (inc (coun (rest xs)))))", "problem": 22, "user": "4f8dc9dce4b02e764a0a51b6"}, {"code": "reduce #(or(inc%)%2)0", "problem": 22, "user": "4f952a68e4b0dcca54ed6cc9"}, {"code": "(fn [lst]\n  (reduce (fn [x y] (+ x 1)) 0 lst))", "problem": 22, "user": "4faa9593e4b081705acca1f9"}, {"code": "#(.size (vec %))", "problem": 22, "user": "4f4d0a52e4b03ad3f0c10c9d"}, {"code": "(fn mycount [x] (if (empty? x) 0 (+ 1 (mycount (drop 1 x)))))", "problem": 22, "user": "4faad8dfe4b081705acca205"}, {"code": "#(reduce (fn [x y] (inc x)) 0 %)", "problem": 22, "user": "4fab2859e4b081705acca213"}, {"code": "(fn [s] (reduce + (map (fn [el] 1) s)))", "problem": 22, "user": "4faa7f87e4b081705acca1f6"}, {"code": "(fn [coll]\n  (reduce + (map (fn [x] 1) coll)))", "problem": 22, "user": "4fab336be4b081705acca216"}, {"code": "(fn [lst] (apply + (map (fn [x] 1) lst)))", "problem": 22, "user": "4fabb1dce4b081705acca21a"}, {"code": "(fn mycount [lst]\n  (if\n    (empty? lst)\n    0\n    (+ 1 (mycount (rest lst)))))", "problem": 22, "user": "4fab0c0ae4b081705acca20d"}, {"code": "(fn mycount [xs] (if (= xs `()) 0 (+ 1 (mycount (rest xs)))))", "problem": 22, "user": "4fabc896e4b081705acca21f"}, {"code": "(fn my-count \n  ([s] (my-count s 0))\n\t([s r] (if \n\t\t\t(= () s) \n\t\t\tr \n\t\t\t(my-count (rest s) (inc r))\n\t\t   )\n\t)\n)", "problem": 22, "user": "4faacc04e4b081705acca201"}, {"code": "#(loop [els %, totes 0] (if (seq els) (recur (rest els) (inc totes)) totes))", "problem": 22, "user": "4fac1d77e4b081705acca223"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4fa3cb65e4b081705acca194"}, {"code": "#(reduce (fn [x, y] (inc x)) 0 %)", "problem": 22, "user": "4faac363e4b081705acca200"}, {"code": "(fn [cola]\n  (loop [col cola ret 0]\n    (if (empty? col)\nret \n(recur (rest col) (inc ret))\n)))", "problem": 22, "user": "4fab31a8e4b081705acca215"}, {"code": "#((fn length [x n]\n    (if (empty? x) n\n      (length (rest x) (+ n 1))))\n  % 0)", "problem": 22, "user": "4fac81cee4b081705acca22b"}, {"code": "(fn [s] (loop [s2 s c 0] (if (seq s2) (recur (rest s2) (inc c)) c)))", "problem": 22, "user": "4fac80d1e4b081705acca22a"}, {"code": "#(apply + (map (fn [x] 1) %))", "problem": 22, "user": "4facd2fae4b081705acca22f"}, {"code": "reduce (fn [s _] (inc s)) 0", "problem": 22, "user": "4faae01ae4b081705acca206"}, {"code": "#(reduce\n  (fn [x y] (inc x))\n  (cons 0 %))", "problem": 22, "user": "4faccddae4b081705acca22e"}, {"code": "#(if (empty? %2) %1 (recur (+ %1 1) (rest %2))) 0", "problem": 22, "user": "4fad041ee4b081705acca231"}, {"code": "(fn mylen [x] (if (empty? x) 0 (+ 1 (mylen (rest x)))))", "problem": 22, "user": "4fad157ce4b081705acca232"}, {"code": "(fn c [s] (reduce (fn a [x y] (+ x 1)) 0 s))", "problem": 22, "user": "4fad20cfe4b081705acca235"}, {"code": "(fn counter ([sequence] (counter sequence 0)) ([sequence acc] (if (empty? sequence) acc (counter (rest sequence) (inc acc)))))", "problem": 22, "user": "4fad33e8e4b081705acca236"}, {"code": "#(reduce + (map (fn [n] 1) %))", "problem": 22, "user": "4e137349535d04ed9115e7d9"}, {"code": "#(-> % vec .size)", "problem": 22, "user": "4fad77a6e4b081705acca23a"}, {"code": "(fn [ss] \n  (loop [s ss n 0]\n    (if (seq s)\n        (recur (rest s) (inc n))\n        n)))", "problem": 22, "user": "4fadbc3fe4b081705acca23f"}, {"code": "#(reduce + (map (fn[x] 1) %))", "problem": 22, "user": "4faa7185e4b081705acca1f3"}, {"code": "(fn my-count [coll] (if (empty? coll) 0 (+ 1 (my-count (rest coll)))))", "problem": 22, "user": "4f03ba15535dcb61093f6b56"}, {"code": "#(loop [coll (rest %) e (first %) cnt 0]\r\n   (if (nil? e)\r\n     cnt\r\n     (recur (rest coll) (first coll) (inc cnt))))", "problem": 22, "user": "4facff22e4b081705acca230"}, {"code": "#(loop [s % n 0]\n  (if (= s '())\n    n\n    (recur (rest s) (inc n))))", "problem": 22, "user": "4fae258de4b081705acca246"}, {"code": "(fn length [seq]\n  ((fn len [s, i]\n    (if (empty? s)\n      i\n      (len (rest s) (+ i 1))))\n  seq 0)\n)", "problem": 22, "user": "4fad9da0e4b081705acca23c"}, {"code": "#(reduce (fn [a b] (+ a 1)) 0 %)", "problem": 22, "user": "4fad89f0e4b081705acca23b"}, {"code": "(fn [lst] (reduce + 0 (map (fn [x] 1) lst)))", "problem": 22, "user": "4fac031be4b081705acca221"}, {"code": "(fn [li]\n  (loop [l li counter 0]\n    (if-not (empty? (rest l))\n      (recur (rest l) (+ counter 1))\n      (+ counter 1))))", "problem": 22, "user": "4f0324d2535dcb61093f6a69"}, {"code": "#(loop [cnt 0  seq %] (if (= seq '()) cnt (recur (inc cnt) (rest seq))))", "problem": 22, "user": "4faec810e4b081705acca24e"}, {"code": "#(loop [x % c 0] \n  (if (seq x)\n    (recur (rest (seq x)) (inc c))\n    c))", "problem": 22, "user": "4faf6f1ae4b081705acca255"}, {"code": "(fn length\n  ([xs] (length xs 0))\n  ([xs cnt]\n    (if (empty? xs)\n      (int cnt)\n      (recur (rest xs) (inc cnt)))))", "problem": 22, "user": "4faf897be4b081705acca257"}, {"code": "#(loop [coll %1 n 0]\n  (if (empty? coll)\n    n\n    (recur\n      (rest coll)\n      (inc n))))", "problem": 22, "user": "4fab259ae4b081705acca212"}, {"code": "(fn [coll]\n  (reduce (fn [a b] (+ a 1)) 0 coll))", "problem": 22, "user": "4f9a7dc0e4b0dcca54ed6d0b"}, {"code": "#(reduce (fn [x y] (inc x)) 0 %)", "problem": 22, "user": "4fb04ee2e4b081705acca264"}, {"code": "#(reduce (fn [acc c] (inc acc)) 0 %)", "problem": 22, "user": "4fae369ae4b081705acca247"}, {"code": "(fn foo[x] (if (= (first x) nil) 0 (+ 1 (foo(rest x)))))", "problem": 22, "user": "4fb069b1e4b081705acca266"}, {"code": "(fn [s]\n  (reduce\n    (fn [x _]\n      (+ 1 x))\n    0\n    s))", "problem": 22, "user": "4f8cb9b2e4b02e764a0a51a6"}, {"code": "reduce (fn [x _] (+ x 1)) 0", "problem": 22, "user": "4faa6e19e4b081705acca1f2"}, {"code": "(fn [xs] (reduce (fn [x y] (+ x 1)) 0 xs))", "problem": 22, "user": "4fb1325de4b081705acca276"}, {"code": "(fn [xs]\n  (reduce (fn [n _] (inc n)) 0 xs)\n)", "problem": 22, "user": "4fb13cbae4b081705acca277"}, {"code": "(fn my-count [list]\r\n  (cond (= list []) 0\r\n        :else (+ 1 (my-count (rest list)))))", "problem": 22, "user": "4fb18b0be4b081705acca27c"}, {"code": "(fn [x]\n  ((fn that [y z] (if (= y ())\n\t\t \t\t\tz\n\t\t \t\t\t(that (rest y) (+ z 1))\n\t\t \t\t\t)) x 0)\n\t)", "problem": 22, "user": "4fb1a4e4e4b081705acca27e"}, {"code": "#(loop [elems % cnt 0]\n   (if (empty? elems)\n     cnt\n     (recur (rest elems) (+ cnt 1))))", "problem": 22, "user": "4fb125f1e4b081705acca274"}, {"code": "#(loop [s %1, cnt 0]\n  (if s\n      (recur (next s) (inc cnt))\n      cnt))", "problem": 22, "user": "4fa9e9c6e4b081705acca1e9"}, {"code": "(fn element-count[coll]\n  (if (empty? coll)\n    0\n    (inc (element-count (rest coll)))))", "problem": 22, "user": "4fb12b35e4b081705acca275"}, {"code": "(fn [lst] (reduce (fn [n _] (inc n)) 0 lst))", "problem": 22, "user": "4fb2101ce4b081705acca284"}, {"code": "#(reduce (fn [x y] (+ x 1)) 0 %)", "problem": 22, "user": "4f05af02535dcb61093f6bfe"}, {"code": "#((fn [seq n]\n      (if (empty? seq)\n          n\n          (recur (rest seq) (inc n))))\n  % 0)", "problem": 22, "user": "4fab0b6be4b081705acca20c"}, {"code": "#(reduce (fn [x y] (+ x 1)) 0 %)", "problem": 22, "user": "4faf2f4ce4b081705acca251"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4fb2b1a1e4b081705acca292"}, {"code": "(fn [n l] (if (empty? l) n (recur (inc n) (rest l)))) 0", "problem": 22, "user": "4fa9da14e4b081705acca1e7"}, {"code": "#(reduce + (map (fn [x] 1) % ))", "problem": 22, "user": "4fada258e4b081705acca23d"}, {"code": "#(.size (vec %))", "problem": 22, "user": "4fb0ccbfe4b081705acca26e"}, {"code": "reduce (fn [a _] (inc a)) 0", "problem": 22, "user": "4fb37882e4b081705acca2a0"}, {"code": "#(loop [l % c 0] (if (empty? l) c (recur (rest l) (inc c))))", "problem": 22, "user": "4fb3c249e4b081705acca2a3"}, {"code": "#(reduce (fn[x y] (inc x)) 0 %)", "problem": 22, "user": "4f05ea25535dcb61093f6c02"}, {"code": "(fn [c] (reduce + (map (fn [x] 1) c)))", "problem": 22, "user": "4ec9549d535d6d7199dd36fe"}, {"code": "(fn [xs]\n  ((fn c [xs n]\n    (if (empty? xs)\n      n\n      (c (next xs) (+ n 1)))) xs 0))", "problem": 22, "user": "4fb4099be4b081705acca2a9"}, {"code": "(fn mycount [l] (if-not (empty? l) (+ 1 (mycount (rest l))) 0))", "problem": 22, "user": "4fb3fec7e4b081705acca2a7"}, {"code": "(fn cnt [coll] (if (empty? coll) 0 (+ 1 (cnt (rest coll)))))", "problem": 22, "user": "4e964bc4535dbda64a6f6b41"}, {"code": "#(reduce (fn [x y] (inc x)) 0 %1)", "problem": 22, "user": "4edfdfa2535d10e5ff6f5346"}, {"code": "(fn my-count [coll]\n  (if (empty? coll) 0 (inc (my-count (rest coll))))\n)", "problem": 22, "user": "4faf97d8e4b081705acca258"}, {"code": "#(reduce (fn [a b] (+ a 1)) 0 %)", "problem": 22, "user": "4fb4303fe4b081705acca2ac"}, {"code": "#(reduce (fn [x,y] (+ x 1)) 0 %)", "problem": 22, "user": "4fb3b865e4b081705acca2a2"}, {"code": "#(if\r\n   (empty? %2)\r\n   %\r\n   (recur (+ % 1) (rest %2))) 0", "problem": 22, "user": "4fb50599e4b081705acca2b7"}, {"code": "#(loop [lst (seq %) i 0]\r\n   (if (seq lst)\r\n     (recur (rest lst) (inc i))\r\n     i))", "problem": 22, "user": "4e7dec83535db169f9c796f3"}, {"code": "(fn cnt [x]\n  (if (empty? x)\n    0\n    (+ 1 (cnt(rest x)))))", "problem": 22, "user": "4fb510b5e4b081705acca2b8"}, {"code": "(fn [l] (loop [sum 0 l l] (if (empty? l) sum (recur (inc sum) (rest l)))))", "problem": 22, "user": "4fb4f42ae4b081705acca2b4"}, {"code": "(fn my-count\r\n  [coll]\r\n  (loop [c coll r 0]\r\n    (if (empty? c)\r\n      r\r\n     (recur (rest c) (inc r)))))", "problem": 22, "user": "4fab943ee4b081705acca219"}, {"code": "(fn mycount [x] \n  (cond (= nil (nth x 1 nil)) 1\n  :else (+ (mycount (rest x)) 1))\n)", "problem": 22, "user": "4fb4e279e4b081705acca2b3"}, {"code": "(fn cnt [s] (if (empty? s) 0 (inc (cnt (rest s)))))", "problem": 22, "user": "4fb57e06e4b081705acca2bf"}, {"code": "(fn[x] (reduce + (keep (fn [i] 1) x)))", "problem": 22, "user": "4fb4ca71e4b081705acca2b0"}, {"code": "#(reduce (fn [x _] (inc x)) 0 %)", "problem": 22, "user": "4fabbb97e4b081705acca21d"}, {"code": "(fn [s] \n  (apply + \n    (keep \n      (fn [x] 1) \n      s)\n  )\n)", "problem": 22, "user": "4fb6918ae4b081705acca2c9"}, {"code": "(letfn [(f [c n] \n  (if (= c '()) n (f (rest c) (+ n 1))))] \n#(f % 0))", "problem": 22, "user": "4fb6db08e4b081705acca2cc"}, {"code": "(fn myCount [xs]\n  (if (empty? xs) 0\n      (+ 1 (myCount (rest xs)))))", "problem": 22, "user": "4fab21b2e4b081705acca211"}, {"code": "#(apply + (map (fn [x] 1) %))", "problem": 22, "user": "4fb73af2e4b081705acca2d0"}, {"code": "reduce (fn [x _] (inc x)) 0", "problem": 22, "user": "4fb54e50e4b081705acca2bb"}, {"code": "(fn [col]  (apply +  (map (fn [i] 1) col) )  )", "problem": 22, "user": "4ea8f887535d7eef30807300"}, {"code": "#(reduce (fn [a b] (+ a 1)) 0 %)", "problem": 22, "user": "4fb7a165e4b081705acca2d3"}, {"code": "(fn [x]\r\n  ((fn [[l & xs] n]\r\n    (if xs\r\n      (recur xs (inc n))\r\n      (inc n)\r\n    )) x 0))", "problem": 22, "user": "4fb79872e4b081705acca2d2"}, {"code": "(fn mycount [xs]\n  (if (seq xs)\n    (+ 1 (mycount (rest xs)))\n    0))", "problem": 22, "user": "4fb41dace4b081705acca2aa"}, {"code": "#(alength (into-array %))", "problem": 22, "user": "4fb48013e4b081705acca2ae"}, {"code": "#(.size (seq %))", "problem": 22, "user": "4dae0510c9a9d6ed4b99dc57"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "4fb4d4ede4b081705acca2b1"}, {"code": "(fn outer [x] \n  ((fn inner [x idx] \n    (if (empty? (rest x)) (inc idx) \n                          (inner (rest x) (inc idx)))) x 0))", "problem": 22, "user": "4fb86dc9e4b081705acca2d8"}, {"code": "(fn ! [[n & more]]\n    \t(if more\n        (+ 1 (! more))\n      1)\n\t  )", "problem": 22, "user": "4f9a5d3ae4b0dcca54ed6d08"}, {"code": "#(reduce (fn [val _](+ 1 val)) 0 %)", "problem": 22, "user": "4fb91026e4b081705acca2d9"}, {"code": "(fn size [seq] (if (= seq '()) 0 (+ 1 (size (rest seq)))))", "problem": 22, "user": "4f5599dfe4b0a7574ea71806"}, {"code": "(fn [x](first (last (map vector (iterate inc 1) x))))", "problem": 22, "user": "4fb42570e4b081705acca2ab"}, {"code": "(fn [coll]\n  (loop [i 0 coll coll]\n    (if (nil? coll) i (recur (inc i) (next coll)))))", "problem": 22, "user": "4fb0a1e0e4b081705acca269"}, {"code": "(fn len [seq]\n  (if (empty? seq)\n      0 (+ 1 (len (rest seq)))))", "problem": 22, "user": "4fb045dfe4b081705acca263"}, {"code": "(fn [sum col] (if (empty? col) sum (recur (inc sum) (next col)))) 0", "problem": 22, "user": "4f045d0e535dcb61093f6bbc"}, {"code": "(fn[x](alength (to-array x)))", "problem": 22, "user": "4f32135ae4b0d6649770a08e"}, {"code": "#(reduce (fn [a b] (+ 1 a)) 0 %)", "problem": 22, "user": "4e83bb61535db62dc21a62dd"}, {"code": "(fn ctr ([coll] (ctr coll 0)) ([coll acc] (if (empty? coll) acc (recur (rest coll) (+ acc 1)))))", "problem": 22, "user": "4fb85651e4b081705acca2d7"}, {"code": "#(reduce + (map (fn [x] 1)  %))", "problem": 22, "user": "4fb18c7be4b081705acca27d"}, {"code": "reduce #(or (+ % 1) %2) 0", "problem": 22, "user": "4faafccde4b081705acca209"}, {"code": "#(apply + (map (constantly 1) %))", "problem": 22, "user": "4fb3dd1ee4b081705acca2a5"}, {"code": "#(loop [l %1 n 0]\n  (if (empty? l)\n  n\n  (recur (rest l) (inc n))))", "problem": 22, "user": "4fbbcf0ce4b081705acca2ee"}, {"code": "( fn length [xs]\n  ( if (empty? xs)\n    0 ( + 1 ( length ( rest xs ) ) ) ) )", "problem": 22, "user": "4fbb7010e4b081705acca2e7"}, {"code": "(fn count_ [lst] (if (empty? lst) 0 (inc (count_ (rest lst)))))", "problem": 22, "user": "4fbbb6ede4b081705acca2ed"}, {"code": "(fn [xs] (reduce (fn [counter _] (+ counter 1)) 0 xs ))", "problem": 22, "user": "4fb65f2fe4b081705acca2c7"}, {"code": "#(first (last (map vector (iterate inc 1) %)))", "problem": 22, "user": "4fa9c945e4b081705acca1e5"}, {"code": ";#(reduce (fn [x y] (inc x)) 0 %)\n\n(fn [coll]\n  (reduce (fn [x y] (inc x)) 0 coll))", "problem": 22, "user": "4fbcbd50e4b081705acca2f9"}, {"code": "reduce #(or (inc %1) %2) 0", "problem": 22, "user": "4fbce33de4b081705acca2fb"}, {"code": "(fn [s]\n  (loop [s s\n         n 0]\n    (if (empty? s)\n        n\n        (recur (rest s) (inc n)))))", "problem": 22, "user": "4fbd24d2e4b081705acca2ff"}, {"code": "(fn [c] (reduce (fn [a b] (+ 1 a)) 0 c))", "problem": 22, "user": "4f7c0ab8e4b06e829148e1ac"}, {"code": "#(loop [left %1 how_many 0] \n  (if (empty? left)\n  how_many\n  (recur (rest left) (inc how_many))))", "problem": 22, "user": "4fbd6210e4b081705acca303"}, {"code": "(fn my-count [list]\n  (if (empty? list)\n      0\n      (inc (my-count (rest list)))))", "problem": 22, "user": "4fbe2cfbe4b081705acca30c"}, {"code": "#(reduce (fn [a e] (inc a)) 0 %)", "problem": 22, "user": "4fbe400be4b081705acca30e"}, {"code": "(fn cc [x] (if (empty? x)\n             0\n             (+ 1 (cc (rest x)))))", "problem": 22, "user": "4fbd12a5e4b081705acca2fd"}, {"code": "(fn [s]\n  ((fn my-count [s c]\n    (if\n      (empty? s) c\n      (my-count (rest s) (inc c))))\n  s 0))", "problem": 22, "user": "4f8c50f9e4b02e764a0a5195"}, {"code": "(fn [s] (reduce (fn [a b] (inc a)) 0 s))", "problem": 22, "user": "4fbe6386e4b081705acca311"}, {"code": "(fn [x]\n  (\n    (fn [x,y] (if (first x) (recur (next x) (+ 1 y)) ((fn [y] y) y)))\n  x 0)\n)", "problem": 22, "user": "4fbd8b64e4b081705acca307"}, {"code": "#(reduce (fn [accum item] (inc accum)) 0 %)", "problem": 22, "user": "4fa4bdeee4b081705acca1a2"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4fbef9a6e4b081705acca316"}, {"code": "(fn [x]\n  ((fn [se co]\n    (if (not (empty? se))\n      (recur (rest se) (inc co))\n       co))\n    x 0))", "problem": 22, "user": "4fbe42b7e4b081705acca30f"}, {"code": "(fn [list]\n  (reduce + (map (fn [x] 1) list)))", "problem": 22, "user": "4fb804f7e4b081705acca2d6"}, {"code": "#(reduce (fn [acc x] (inc acc)) 0 %)", "problem": 22, "user": "4fba7d1ee4b081705acca2e0"}, {"code": "reduce (fn [acc coll] (inc acc)) 0", "problem": 22, "user": "4fbfbd4fe4b081705acca31c"}, {"code": "#(loop [s %1 acc 0] (if (= s ()) acc (recur (drop 1 s) (inc acc))))", "problem": 22, "user": "4fbfe9a4e4b081705acca31f"}, {"code": "reduce (fn [n _] (+ n 1)) 0", "problem": 22, "user": "4fc01b32e4b081705acca321"}, {"code": "(fn ct [c] (if-let [xs (seq c)] (+ 1 (ct (rest xs))) 0))", "problem": 22, "user": "4fc04d75e4b081705acca324"}, {"code": "(fn [seq] (loop [cnt 0,in seq] (if (empty? in) cnt (recur (inc cnt) (rest in)))))", "problem": 22, "user": "4fc0221ce4b081705acca322"}, {"code": "(fn [l] (loop [ll l i 0] (if (= ll ()) i (recur (rest ll) (inc i)))))", "problem": 22, "user": "4fc0853ae4b081705acca327"}, {"code": "(fn [s]                                                                                                                                                                              \n  (reduce (fn [ans s]                                                                                                                                                                           \n            (inc ans))                                                                                                                                                                          \n          0                                                                                                                                                                                     \n          s))", "problem": 22, "user": "4fc0f5b8e4b081705acca329"}, {"code": "reduce (fn [x y] (inc x)) 0", "problem": 22, "user": "4faa6184e4b081705acca1f1"}, {"code": "#(inc (second (last (map list % (range)))))", "problem": 22, "user": "4fc13433e4b081705acca32b"}, {"code": "(fn recnt \n  ([xs] (recnt xs 0))\n  ([xs n]\n      (if (empty? xs)\n       n\n       (recnt (rest xs) (inc n)))))", "problem": 22, "user": "4fba0877e4b081705acca2dd"}, {"code": "(fn [x]\n(loop [l x c 0]\n           (if (empty? l)\n             c\n           (recur (rest l) (inc c)))))", "problem": 22, "user": "4fc18846e4b081705acca331"}, {"code": "(fn\n  nn\n  ([x] (nn (rest x) 1))\n  ([x n]\n     (if (= x ()) n (nn (rest x) (+ n 1)))))", "problem": 22, "user": "4fbd292fe4b081705acca300"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4fc0b183e4b081705acca328"}, {"code": "(fn cnt [l & counters]\n    (let [counters (set counters)\n        counter (or (first counters) 0)]\n        (if (empty? l) counter\n            (cnt (next l) (+ counter 1)))))", "problem": 22, "user": "4fbdcb87e4b081705acca30a"}, {"code": "#(reduce +(map (fn [x] 1) %))", "problem": 22, "user": "4fc34787e4b081705acca33e"}, {"code": "(fn count2 [x] (if (empty? x) 0 (+ 1 (count2 (rest x)))))", "problem": 22, "user": "4fc26f10e4b081705acca335"}, {"code": "(fn [coll] (reduce + (map (fn [x] 1) coll)))", "problem": 22, "user": "4fc3a72ae4b081705acca342"}, {"code": "(fn [xs]\n  (loop [ys xs, cnt 0]\n    (if (empty? ys) cnt (recur (rest ys) (inc cnt)))))", "problem": 22, "user": "4fc40b0be4b081705acca344"}, {"code": "#((fn cnt [xs, n] \n  (if (= xs '()) n (cnt (rest xs) (+ 1 n)))) % 0)", "problem": 22, "user": "4fc45c07e4b081705acca349"}, {"code": "(fn mycounter\r\n  ([toCount] (mycounter toCount 0))\r\n  ([toCount counter]\r\n    (if (first toCount)\r\n        (mycounter (rest toCount) (+ counter 1))\r\n        (+ counter 0))))", "problem": 22, "user": "4fb0c8dde4b081705acca26d"}, {"code": "(partial reduce (fn [a x] (+ 1 a)) 0)", "problem": 22, "user": "4fc4eadee4b081705acca353"}, {"code": "(fn len [s]\n  (if (= s '())\n    0\n    (+ 1 (len (rest s)))))", "problem": 22, "user": "4fc50441e4b081705acca36f"}, {"code": "#(reduce + (map (fn ([x] 1)) %1))", "problem": 22, "user": "4fb2f9b2e4b081705acca294"}, {"code": "(fn list-length [lst]\n  (if (empty? lst)\n      0\n      (+ 1 (list-length (rest lst)))))", "problem": 22, "user": "4fc52278e4b081705acca37c"}, {"code": "(fn mycount [inlist]\n  (if (empty? inlist)\n    0\n    (+ (mycount (rest inlist)) 1)))", "problem": 22, "user": "4fc50bcbe4b081705acca375"}, {"code": "#(reduce (fn [a b] (+ a 1)) 0 %)", "problem": 22, "user": "4fc4dca8e4b081705acca350"}, {"code": "(fn [x]\n  (loop [x x cnt 0]\n    (if\n      (empty? x)\n      cnt\n      (recur (rest x) (+ 1 cnt))\n    )\n  )\n)", "problem": 22, "user": "4fc521eae4b081705acca37b"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4fc5019ae4b081705acca36d"}, {"code": "(fn zum [coll]\n   (loop [coll coll\n          length 0]\n        (if (empty? coll)\n          length\n          (recur (rest coll) (inc length)))))", "problem": 22, "user": "4fc56e68e4b0ee37620e17f5"}, {"code": "(fn [lst] (loop [lst lst, cnt 0]\n  (if (empty? lst)\n    cnt\n    (recur (rest lst) (+ cnt 1)))))", "problem": 22, "user": "4fae4c11e4b081705acca248"}, {"code": "#(reduce (fn [a b] (inc a)) 0 %)", "problem": 22, "user": "4fc5e24ee4b0ee37620e1801"}, {"code": "#(reduce (fn [a b] (+ a 1)) 0 %)", "problem": 22, "user": "4fc4f68ae4b081705acca363"}, {"code": "(fn [seq]\n  ((fn countNew [seq n]\n    (if (= (first seq) nil)\n      n\n      (countNew (rest seq) (+ n 1))\n    )\n  ) seq 0)\n)", "problem": 22, "user": "4fc4fe59e4b081705acca36a"}, {"code": "reduce(fn [a _] (+ a 1))0", "problem": 22, "user": "4fc6104ae4b0ee37620e1808"}, {"code": "(fn sol0022-func\n  [coll]\n    (reduce (fn [n _] (inc n)) 0 coll))", "problem": 22, "user": "4fc6305de4b0ee37620e180b"}, {"code": "reduce (fn [a,b] (+ a 1)) 0", "problem": 22, "user": "4fc5eb7fe4b0ee37620e1803"}, {"code": "(fn [xs]\n  ((fn count2 [xs n]\n    (if (empty? xs)\n        n\n        (count2 (rest xs) (inc n))))\n    xs 0))", "problem": 22, "user": "4fc5ee4fe4b0ee37620e1804"}, {"code": "reduce (fn [x y] (inc x)) 0", "problem": 22, "user": "4db1b5841254ad5b4805fa70"}, {"code": "(fn [x] (+ 1 (.lastIndexOf (vec x) (last x))))", "problem": 22, "user": "4fc65f34e4b0ee37620e1810"}, {"code": "(fn [coll]\n  ((fn [coll n]\n    (if (empty? coll)\n        n\n        (recur (rest coll) (inc n))))\n   coll 0))", "problem": 22, "user": "4fb1d907e4b081705acca282"}, {"code": "(fn [x]\n  (loop [r x cnt 0]\n    (if (first r) (recur (next r) (inc cnt)) cnt)))", "problem": 22, "user": "4fc68fc4e4b0ee37620e1816"}, {"code": "(fn [col] (inc (num (last (last (map-indexed (fn [index item] (list index)) col))))))", "problem": 22, "user": "4fc4f668e4b081705acca362"}, {"code": "(fn [l]\n  (loop [xs l c 0]\n    (cond (or (empty? xs) (nil? xs)) c\n      :else (recur (rest xs) (inc c)))))", "problem": 22, "user": "4fbd1ebbe4b081705acca2fe"}, {"code": "(comp (partial apply +) (partial map (constantly 1)))", "problem": 22, "user": "4ec53831535d6d7199dd3684"}, {"code": "(fn myc [l] (if (empty? l) 0 (+ (myc (rest l)) 1))\n  )", "problem": 22, "user": "4fc3b0d4e4b081705acca343"}, {"code": "(fn cnt [x] (if (= (rest x) '()) 1 (+ (cnt (rest x)) 1 )))", "problem": 22, "user": "4fc2e302e4b081705acca33a"}, {"code": "(fn myfun ([x] (myfun x 0)) ([x n] (if (empty? x) n (recur (rest x) (inc n)))))", "problem": 22, "user": "4f826548e4b033992c121c08"}, {"code": "(fn [coll]\n  (loop [c coll cnt 0]\n    (if (empty? c)\n      cnt\n      (recur (rest c) (inc cnt)))))", "problem": 22, "user": "4fc7db47e4b0ee37620e182a"}, {"code": "(fn CNT [X] (if (empty? X) 0 (+ 1 (CNT (rest X) )   )  ))", "problem": 22, "user": "4fc7b079e4b0ee37620e1827"}, {"code": "(fn mycount\n  ([coll] (mycount coll 0))\n  ([coll result]\n    (if (empty? coll)\n      result\n      (recur (rest coll) (inc result)))))", "problem": 22, "user": "4fbb9d80e4b081705acca2ea"}, {"code": "#(inc (first (last (map-indexed vector %))))", "problem": 22, "user": "4fa05b99e4b0dcca54ed6d47"}, {"code": "(fn countup [x]\n  (if (empty? x)\n    0\n    (+ 1 (countup (rest x)))))", "problem": 22, "user": "4fc8b012e4b0ee37620e1838"}, {"code": "(fn [coll] (reduce (fn [r n] (inc r)) 0 coll))", "problem": 22, "user": "4fc66c43e4b0ee37620e1812"}, {"code": "(fn len [coll]\r\n  (if (empty? coll) 0 (inc (len (rest coll)))))", "problem": 22, "user": "4fc8d905e4b0ee37620e183d"}, {"code": "(fn ct [x] (if (= nil (first x)) 0 (+ 1 (ct (rest x)))))", "problem": 22, "user": "4fc4f040e4b081705acca35a"}, {"code": "(fn [s] (apply + (map (fn [x] 1) s)))", "problem": 22, "user": "4fc8f1fee4b0ee37620e183f"}, {"code": "#(reduce (fn [s n] (inc s)) 0 %)", "problem": 22, "user": "4fc8c8d8e4b0ee37620e183b"}, {"code": "#(.size (vec %))", "problem": 22, "user": "4fbacdbae4b081705acca2e5"}, {"code": "(fn a [xs] \n  (if (empty? xs) 0 (inc (a (rest xs)))))", "problem": 22, "user": "4fc92595e4b0ee37620e1843"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4fc7b8f5e4b0ee37620e1828"}, {"code": "#(reduce + (map (fn [x] (quote 1)) %))", "problem": 22, "user": "4f8ca81ce4b02e764a0a51a4"}, {"code": "(fn mycount [x]\n  (if (= x '())\n    0\n    (+ 1 (mycount (rest x)))))", "problem": 22, "user": "4fc93728e4b0ee37620e1844"}, {"code": "(fn ! [x]\n  (if (= '() x)\n    0\n    (+ 1 (! (rest x)))))", "problem": 22, "user": "4fc9cba3e4b0ee37620e1849"}, {"code": "(fn [s] \n  (loop [n 0 S s]\n    (if (empty? S)\n      n\n      (recur (inc n) (rest S)))))", "problem": 22, "user": "4fc52d79e4b081705acca386"}, {"code": "(fn cnt [l]\n  (loop [xs l n 0]\n    (if (= xs '())\n        n\n        (recur (rest xs) (inc n)))))", "problem": 22, "user": "4fca1cd6e4b0ee37620e184c"}, {"code": "(fn [s]\n  (reduce (fn [a e] (inc a)) 0 s))", "problem": 22, "user": "4fca2a13e4b0ee37620e184d"}, {"code": "; (fn [s]\n;   (fn [s n]\n;     (if (empty? s)\n;       n\n;       (recur (rest s) (inc n))))\n;   s 0)\n\n(fn [s] (reduce + (map (fn [_] 1) s)))", "problem": 22, "user": "4fca4c37e4b0ee37620e184f"}, {"code": "#(loop [c 0, k %] \n    (if(not(nil? k))\n      (recur (inc c) (next k))\n      c\n    )\n  )", "problem": 22, "user": "4fc5f83be4b0ee37620e1806"}, {"code": "(fn foo[x] (if (= nil (first x)) 0 (+ 1 (foo (rest x)))))", "problem": 22, "user": "4fc565e3e4b0ee37620e17f4"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "4f6016d5e4b0defedf855fa4"}, {"code": "(fn [x] (reduce (fn [a, b] (+ a 1)) 0 x))", "problem": 22, "user": "4fcac003e4b0ee37620e1855"}, {"code": "(fn [x]\n  (loop [i 0 c x]\n    (if (empty? c) i\n      (recur (+ i 1) (rest c)))))", "problem": 22, "user": "4fcaa4bae4b0ee37620e1854"}, {"code": "(fn c [v] (if (empty? v) 0 (inc (c (rest v)))))", "problem": 22, "user": "4fcad14ce4b0ee37620e1856"}, {"code": "(comp (partial reduce +) (partial map (constantly 1)))", "problem": 22, "user": "4fcaf7a4e4b0ee37620e1857"}, {"code": "(fn my-count [l]\n   (if (empty? l)\n     0\n     (inc (my-count (rest l)))))", "problem": 22, "user": "4fc8ce6ce4b0ee37620e183c"}, {"code": "(fn rec [c]\n  (if (empty? c)\n    0\n    (+ 1 (rec (rest c)))))", "problem": 22, "user": "4fcc103fe4b0ee37620e185f"}, {"code": "(fn [s]\n  (loop [c 0 xs s]\n    (if (empty? xs) c\n        (recur (inc c) (rest xs)))))", "problem": 22, "user": "4fcbc18ae4b0ee37620e185c"}, {"code": "((fn [mk] (mk mk))\n (fn [mk]\n   (fn [seq]\n     (if (empty? seq)\n         0\n         (+ 1 ((mk mk) (rest seq)))))))", "problem": 22, "user": "4fcc6cb3e4b0ee37620e1861"}, {"code": "(fn [l] (reduce + (map (fn [x] 1) l)))", "problem": 22, "user": "4daf4d2fedd6309eace4d178"}, {"code": "(fn [l] \n  ( #( if (empty? %1) %2 (recur (rest %1) (inc %2)) ) l 0))", "problem": 22, "user": "4fc43a8ee4b081705acca346"}, {"code": "#(+ (last (map-indexed (fn [x y] x) %1)) 1)", "problem": 22, "user": "4fccd906e4b0ee37620e186c"}, {"code": "(fn [s]\n  (loop [e s\n         i 0]\n    (if (not (empty? e))\n      (recur (rest e) (inc i))\n      i)))", "problem": 22, "user": "4eb99b3d535dfed6da9c6d57"}, {"code": "(fn [c] (reduce + (map (fn [i] 1) c)))", "problem": 22, "user": "4e970e6a535dbda64a6f6b4e"}, {"code": "(fn c[x] \n  (reduce + (map (fn i[x] 1 ) x)))", "problem": 22, "user": "4fccdc75e4b0ee37620e186d"}, {"code": "#(reduce + (map (fn [n] 1) %))", "problem": 22, "user": "4f61c3cfe4b0defedf855fc6"}, {"code": "(fn [coll]\n  (loop [coll coll n 0]\n    (if (empty? coll)\n      n\n      (recur (rest coll) (inc n)))))", "problem": 22, "user": "4fcd155de4b065de69964ca3"}, {"code": "(fn cnt \n  ([s n]\n    (if (= (rest s) '())\n      n\n      (cnt (rest s) (+ 1 n))\n    )\n  )\n  ([s] (cnt s 1))\n)", "problem": 22, "user": "4fcd6bd2e4b065de69964ca9"}, {"code": "(fn [s]\n  (reduce + (map (fn [_] (+ 1)) s)))", "problem": 22, "user": "4fc559eae4b0ee37620e17f3"}, {"code": "#(letfn \n  [(mycount [coll cnt]\n    (if-let [f (first coll)]\n      (recur (rest coll) (inc cnt))\n      cnt))]\n  (mycount % 0))", "problem": 22, "user": "4fcd5958e4b065de69964ca7"}, {"code": "(fn c [xs]\n  (if (= xs '())\n    0\n    (+ (c (rest xs)) 1)))", "problem": 22, "user": "4fcd72e7e4b065de69964caa"}, {"code": "(fn[coll] \n  (last(map #(identity %2) coll (drop 1 (range)))))", "problem": 22, "user": "4fb23582e4b081705acca28a"}, {"code": "(fn [L] \r\n    (loop [l L i 0]\r\n         (if (= l (rest l)) \r\n             i\r\n             (recur (rest l) (inc i))\r\n          )\r\n    )\r\n)", "problem": 22, "user": "4fcd0990e4b0ee37620e1874"}, {"code": "(fn\r\n  [l & c]\r\n    (if (empty? l) c\r\n      (recur (rest l) (+ (if (= c nil) 0 c) 1)))\r\n  )", "problem": 22, "user": "4fb5705fe4b081705acca2be"}, {"code": "#(->> % (map (constantly 1)) (reduce +))", "problem": 22, "user": "4fc5d1c3e4b0ee37620e17ff"}, {"code": "#(reduce +\n  (map (constantly 1) %))", "problem": 22, "user": "4fce5474e4b0d4b2a7a9d451"}, {"code": "(fn countz [l]\n  (if (empty? l) 0\n    (inc (countz (rest l)))))", "problem": 22, "user": "4eca7a87535d6d7199dd3705"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "4fc67081e4b0ee37620e1813"}, {"code": "reduce #(let [x %1 _ %2] (+ x 1)) 0", "problem": 22, "user": "4fccb31be4b0ee37620e1868"}, {"code": "(fn my-count [xs]\n  (if (empty? xs)\n    0\n    (+ 1 (my-count (rest xs)))))", "problem": 22, "user": "4fceb350e4b03432b189f403"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4fcca4f5e4b0ee37620e1867"}, {"code": "(fn [x] (loop [x x n 0] (if (= [] x) n (recur (rest x) (inc n)))))", "problem": 22, "user": "4fcb5d1fe4b0ee37620e1858"}, {"code": "(fn [x] (\n  (fn mycount [x, y] (\n    if (= '() x) y (mycount (rest x) (+ y 1)) \n    )) x 0)\n)", "problem": 22, "user": "4fcf5292e4b03432b189f40e"}, {"code": "(fn [x] (reduce (fn [x y] (+ 1 x)) 0 x))", "problem": 22, "user": "4fcf7170e4b03432b189f412"}, {"code": "(fn c [l] (if (empty? l)\n0\n(+ 1 (c (rest l)))\n))", "problem": 22, "user": "4fcebce4e4b03432b189f404"}, {"code": "(fn [x] \n  (reduce \n    (fn [l r] (+ (int l) 1))\n  0 x)\n)", "problem": 22, "user": "4fcf7f47e4b03432b189f414"}, {"code": "(fn [x] (loop [ll x, b 0]\n          (if (empty? ll)\n              b\n              (recur (rest ll) (+ b 1)))))", "problem": 22, "user": "4fd0cb0ee4b04c3a95aa0407"}, {"code": "(fn [s]\n  (loop [i 0\n         c s]\n    (if (seq c)\n      (recur (inc i) (rest c))\n      i)))", "problem": 22, "user": "4fd0d058e4b04c3a95aa0408"}, {"code": "(fn[x](reduce +(map (fn[y](+ 0 1)) x)))", "problem": 22, "user": "4fd0b0bde4b04c3a95aa0406"}, {"code": "(fn z [x] (if (= '() x) 0 (+ 1 (z (rest x)))))", "problem": 22, "user": "4fd153cee4b04c3a95aa040e"}, {"code": "#(reduce (fn [n _](inc n)) 0 %)", "problem": 22, "user": "4ee6166e535d93acb0a66854"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "4fce75cfe4b03432b189f400"}, {"code": "reduce (fn [c _] (inc c)) 0", "problem": 22, "user": "4fd11132e4b04c3a95aa0409"}, {"code": "reduce (fn [a _] (inc a)) 0", "problem": 22, "user": "4fd2529ae4b04c3a95aa041f"}, {"code": "(fn counter [x] \n  (if (empty? x)\n    0\n    (+ 1 (counter (rest x)))))", "problem": 22, "user": "4fd24729e4b04c3a95aa041e"}, {"code": "(fn tt [x] (reduce + (map (constantly 1) x)))", "problem": 22, "user": "4fa85ae4e4b081705acca1d3"}, {"code": "; #(reduce (fn [acc _] (inc acc)) 0 %)\n\n#(reduce + (map (constantly 1) %))", "problem": 22, "user": "4fd22e70e4b04c3a95aa041c"}, {"code": "(fn [seq]\n  (loop [s seq acc 0]\n    (if (empty? s) acc\n        (recur (rest s) (inc acc)))))", "problem": 22, "user": "4fd16778e4b04c3a95aa040f"}, {"code": "(fn [col] \n  (loop [col col len 0]\n    (if (nil? col)\n      len\n      (recur (next col) (inc len)))))", "problem": 22, "user": "4fd29d7ce4b04c3a95aa0424"}, {"code": "#(loop [sum 1 t %1] (if (nil? (next t)) sum (recur (+ sum 1) (next t))))", "problem": 22, "user": "4fcc70b3e4b0ee37620e1862"}, {"code": "(fn [s & c] (let [cnt (if c c 0)]\n  (if (first s) (recur (rest s) (inc cnt)) cnt)))", "problem": 22, "user": "4fd3b3d9e4b0d4de60cee362"}, {"code": "(fn mycount [lst] (\r\n  if (nil? lst)\r\n  0\r\n  (+ 1 (mycount (next lst)))\r\n))", "problem": 22, "user": "4fd459cfe4b0d4de60cee36b"}, {"code": "#(reduce (fn [val s] (inc val)) 0 %)", "problem": 22, "user": "4fd4599fe4b0d4de60cee36a"}, {"code": "#(alength(into-array %))", "problem": 22, "user": "4fd308e8e4b04c3a95aa042a"}, {"code": "(fn [coll]\n  (loop [n 0 c coll]\n    (if (empty? c)\n      n\n      (recur (inc n) (rest c)))))", "problem": 22, "user": "4fd2e5d8e4b04c3a95aa0427"}, {"code": "#(apply + (map (constantly 1) %))", "problem": 22, "user": "4fadbb17e4b081705acca23e"}, {"code": "#(last (interleave % (iterate inc 1)))", "problem": 22, "user": "4fc6d2c1e4b0ee37620e181b"}, {"code": "(fn [x] \n      ((fn[n] (if-not (contains? (vec x) (inc n)) (inc n) (recur (inc n)))) 0)\n)", "problem": 22, "user": "4fd51da9e4b0d4de60cee371"}, {"code": "(fn [sequence]\n  (reduce + (map (fn [x] 1) sequence)))", "problem": 22, "user": "4fca0376e4b0ee37620e184a"}, {"code": "reduce (fn [c _] (inc c)) 0", "problem": 22, "user": "4fd54f80e4b0d4de60cee374"}, {"code": "(fn [x] (loop [s x ile 0] (if (empty? s) (+ 0 ile) (recur (rest s) (inc ile)))))", "problem": 22, "user": "4fca2ef0e4b0ee37620e184e"}, {"code": "(partial (fn my-count [acc coll]\n           (if (empty? coll)\n               acc\n               (my-count (inc acc) (rest coll)))) 0)", "problem": 22, "user": "4fb591aee4b081705acca2c0"}, {"code": "reduce #(if true (inc %) %2) 0", "problem": 22, "user": "4fd2789ee4b04c3a95aa0422"}, {"code": "(fn count-len [coll] (if (first coll) (+ 1 (count-len (rest coll))) 0))", "problem": 22, "user": "4fd1971ae4b04c3a95aa0412"}, {"code": "(fn [s] (reduce + (map first (map #(conj (list %) 1) s))))", "problem": 22, "user": "4fd73610e4b0dab7d829f37e"}, {"code": "(fn c [x] (if (empty? x) 0 (+ 1 (c (rest x)))))", "problem": 22, "user": "4fd718cee4b0dab7d829f37d"}, {"code": "(fn [coll] \n  (loop [col coll len 0] \n    (if (seq col) \n      (recur (next col) (inc len)) \n      len)))", "problem": 22, "user": "4fd7962ee4b0dab7d829f385"}, {"code": "(fn length [x] (if (empty? x) 0 (inc (length (rest x)))))", "problem": 22, "user": "4fd6028ce4b0d4de60cee37b"}, {"code": "#(loop [sum 0 xs %]\r\n(if (empty? xs)\r\nsum\r\n(recur (+ sum 1) (rest xs))))", "problem": 22, "user": "4fb1159fe4b081705acca273"}, {"code": "(fn [s]\n  (loop [n 0\n         current-s s]\n    (if (empty? current-s)\n        n\n        (recur (inc n) (rest current-s)))))", "problem": 22, "user": "4f934325e4b0dcca54ed6cb8"}, {"code": "(fn [x] (+ 1 (.lastIndexOf (vec x) (last x))))", "problem": 22, "user": "4fd755cde4b0dab7d829f381"}, {"code": "#(inc (first (first (reverse (map-indexed vector %)))))", "problem": 22, "user": "4fd58082e4b0d4de60cee377"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4fd8544be4b0dab7d829f390"}, {"code": "(partial reduce (fn [c x] (inc c)) 0)", "problem": 22, "user": "4fd96694e4b05e33b9224f37"}, {"code": "(fn [x] (loop [c 0, v x] (if (empty? v) c (recur (inc c) (next v)))))", "problem": 22, "user": "4fd1fa71e4b04c3a95aa0418"}, {"code": "(fn [elem]\n  (let [cnt (fn [elem x]\n              (if (empty? elem)\n                   x\n                   (recur (rest elem) (+ x 1))))]\n   (cnt elem 0)))", "problem": 22, "user": "4fd9cc7ee4b05e33b9224f3a"}, {"code": "reduce (fn [a e] (inc a)) 0", "problem": 22, "user": "4fd9ee7de4b05e33b9224f3f"}, {"code": "(fn [S] \n  (reduce +\n    (map (constantly 1) S)))", "problem": 22, "user": "4fda016ae4b05e33b9224f42"}, {"code": "(fn ct [x] (if (nil? x) 0 (+ 1 (ct (next x)))))", "problem": 22, "user": "4fda01cde4b05e33b9224f43"}, {"code": "(fn [x]\r\n  (reduce (fn [a b] (+ a 1)) 0 x))", "problem": 22, "user": "4fd9f5dbe4b05e33b9224f41"}, {"code": "(fn [s] (loop [s (seq s) n 0] (if s (recur (next s) (inc n)) n)))", "problem": 22, "user": "4db0ef131254ad5b4805fa64"}, {"code": "(fn hi [xs]\n  (if (empty? xs)\n    0\n    (inc (hi (rest xs)))))", "problem": 22, "user": "4fda7509e4b05e33b9224f4b"}, {"code": "(fn\n  [xs]\n  (reduce (fn [memo,_] (+ 1 memo)) 0 xs))", "problem": 22, "user": "4fd6f4d8e4b0dab7d829f37b"}, {"code": "(fn [x] (loop [i x, acc 0]\n  (if (empty? i)\n    acc\n    (recur (rest i) (inc acc))\n  )\n))", "problem": 22, "user": "4fdafa1be4b05e33b9224f55"}, {"code": "(fn mycount[s] (if (empty? s) 0 (inc (mycount (rest s)))))", "problem": 22, "user": "4faa7c76e4b081705acca1f5"}, {"code": "(fn [list] (apply + (map (fn [a] 1) list)))", "problem": 22, "user": "4fdb0c0ae4b05e33b9224f57"}, {"code": "(fn [coll]\n  (loop [coll coll\n         result 0]\n     (if (empty? coll)\n       result\n       (recur (rest coll) (inc result)))) )", "problem": 22, "user": "4f91c9b2e4b0dcca54ed6ca2"}, {"code": "(fn ct \n  ([sq curr] (if (empty? sq) curr (ct (rest sq) (+ curr 1))))\n  ([sq] (ct sq 0)))", "problem": 22, "user": "4fd7b919e4b0dab7d829f38a"}, {"code": "(fn [x]\n  (loop [rem x cnt 0]\n    (if (nil? (next rem)) (inc cnt) (recur (next rem) (inc cnt)))))", "problem": 22, "user": "4fdbef2fe4b05e33b9224f66"}, {"code": "#(loop [lst % c 0]\r\n    (if (empty? lst)\r\n        c\r\n        (recur (rest lst) (inc c))))", "problem": 22, "user": "4fdb02aae4b05e33b9224f56"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4f30896ce4b0d6649770a07b"}, {"code": "#((fn f [i [a & b]]\n    (if a\n      (f (inc i) b)\n      i\n    ))\n  0 %)", "problem": 22, "user": "4fdc3065e4b05e33b9224f6b"}, {"code": "#(reduce (fn [n _] (inc n)) 0 %)", "problem": 22, "user": "4e6a63fd535d8ccf87e9feda"}, {"code": "#(alength (to-array %1))", "problem": 22, "user": "4fd15334e4b04c3a95aa040d"}, {"code": "(fn [x] (loop [c 0 x x] (if (not (seq x)) c (recur (inc c) (rest x)))))", "problem": 22, "user": "4fdd155be4b05e33b9224f76"}, {"code": "#(reduce (fn [a b] (inc a)) 0 %)", "problem": 22, "user": "4fdd27f3e4b05e33b9224f78"}, {"code": "(fn [x]\n  (loop [cnt 1 tail (rest x)]\n    (if (empty? tail)\n      cnt\n      (recur (inc cnt) (rest tail)))))", "problem": 22, "user": "4f030cff535dcb61093f6a4d"}, {"code": "(fn [coll] (reduce (fn [val, _] (+ val 1)) 0 coll))", "problem": 22, "user": "4fde156ce4b05e33b9224f83"}, {"code": "(fn cnt [l]\n  (if (= l '())\n    0\n    (inc (cnt (rest l)))))", "problem": 22, "user": "4fde492be4b05e33b9224f8a"}, {"code": "#(first (last (map-indexed (fn [x y] [(inc x) y]) %)))", "problem": 22, "user": "4fde0365e4b05e33b9224f7f"}, {"code": "#(inc (first (last (map-indexed vector %))))", "problem": 22, "user": "4fd0af0ee4b04c3a95aa0405"}, {"code": "#(reduce (fn [x _] (inc x)) 0 %)", "problem": 22, "user": "4e5a5ecb535d8a8b8723a2ac"}, {"code": "(fn [s] (reduce (fn [a b] (+ a 1)) (cons 0 s)))", "problem": 22, "user": "4fdfd165e4b05e33b9224fa3"}, {"code": "(fn f [xs] (if (empty? xs) 0 (inc (f (rest xs)))))", "problem": 22, "user": "4fc638a6e4b0ee37620e180c"}, {"code": "(fn\r\n  [x]\r\n  (loop \r\n    [a x, cnt 0] \r\n    (if \r\n      (empty? a)\r\n       cnt\r\n      (recur (rest a) (inc cnt)) )))", "problem": 22, "user": "4fdf566fe4b05e33b9224f99"}, {"code": "(partial reduce (fn [counter seq-element] (+ 1 counter)) 0)", "problem": 22, "user": "4fdfe6a5e4b05e33b9224fa6"}, {"code": "(fn [coll]\r\n  (loop [i coll c 0]\r\n    (if (first i) (recur (rest i) (inc c)) c)))", "problem": 22, "user": "4fdbc075e4b05e33b9224f61"}, {"code": "(fn [s] (+ 1 (first (last (map-indexed vector s)))))", "problem": 22, "user": "4fdf2b50e4b05e33b9224f93"}, {"code": "(fn [seq] \n    (loop [i 0\n              s seq]\n        (if (empty? s)\n            i\n            (recur (+ i 1) (rest s))))\n)", "problem": 22, "user": "4fdf750be4b05e33b9224f9c"}, {"code": "reduce (fn [c _] (+ c 1)) 0", "problem": 22, "user": "4fd785e6e4b0dab7d829f383"}, {"code": "(fn [lst] (loop [l lst n 0]\n  (if (empty? l)\n  n\n  (recur (next l) (inc n)))))", "problem": 22, "user": "4fd7f892e4b0dab7d829f38d"}, {"code": "(fn ct [coll]\n  (loop [c coll n 0]\n    (if (seq c)\n      (recur (rest c) (inc n))\n      n)))", "problem": 22, "user": "4fe13ad7e4b0dd6cd5ce3632"}, {"code": "(fn [col] (reduce (fn [c i] (+ c 1)) 0 col))", "problem": 22, "user": "4fbf2818e4b081705acca317"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4fe0d08de4b0dd6cd5ce362d"}, {"code": "reduce (fn [x _] (+ x 1)) 0\n; reduce #(do %2 (+ 1 %)) 0", "problem": 22, "user": "4e70a7c1535d5021c1a8963c"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4fe183a0e4b0dd6cd5ce3635"}, {"code": "(fn [s] (reduce (fn [v n] (+ v 1)) 0 s))", "problem": 22, "user": "4fe1a734e4b0dd6cd5ce3637"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "4fdf9a9ae4b05e33b9224f9f"}, {"code": "#(loop [coll %1 c 0] (if (empty? coll) c (recur (rest coll) (inc c))))", "problem": 22, "user": "4f753535e4b0fbe0118ec558"}, {"code": "(fn [col]\n  (loop [x 0 rst col]\n    (if (empty? rst) x\n        (recur (inc x) (rest rst)))))", "problem": 22, "user": "4fe2501ae4b0dd6cd5ce3644"}, {"code": "(fn[x] (loop[a x b 0]\n(if(= nil (first a))\nb\n (recur(rest a)(inc b)))))", "problem": 22, "user": "4fe1279fe4b0dd6cd5ce3630"}, {"code": "(fn count-items\n  ([items] (count-items items 0))\n  ([items current]\n    (if (= items ())\n      current\n      (count-items (rest items) (+ current 1)))))", "problem": 22, "user": "4fd9d162e4b05e33b9224f3c"}, {"code": "#(loop [cnt 0 coll %]\n       (if (nil? coll)\n          cnt\n          (recur (inc cnt)  (next coll))))", "problem": 22, "user": "4fdc067fe4b05e33b9224f69"}, {"code": "reduce (fn [x _] (inc x)) 0", "problem": 22, "user": "4fe4c09ee4b0e8f79898febb"}, {"code": "(fn mCount[items] (apply + (map (constantly 1) items)))", "problem": 22, "user": "4fe4cefce4b0e8f79898febd"}, {"code": "#(loop\n  [len 0 col %]\n\t(if (empty? col) \n\t\tlen\n\t(recur (inc len) (rest col))\n\t)\n)", "problem": 22, "user": "4f56d6f3e4b0a7574ea7182c"}, {"code": "(fn my-count [coll]\r\n  (loop [coll coll\r\n         n 0]\r\n    (if (empty? coll)\r\n      n\r\n      (recur (rest coll) (inc n)))))", "problem": 22, "user": "4fe54ee8e4b0e8f79898fec3"}, {"code": "(fn name [x] (if (nil? (next x)) 1 (+ (name (next x)) 1)))", "problem": 22, "user": "4fe5895be4b0e8f79898fec6"}, {"code": "#(loop [accum 0\r\n         list (concat [] %)] \r\n    (if (empty? list) \r\n        accum\r\n        (recur (+ accum 1) (next list))))", "problem": 22, "user": "4fe588b6e4b0e8f79898fec5"}, {"code": "(fn getLength [x]\n  (if (= nil (second x))\n    1\n    (+ 1 (getLength (rest x)))))", "problem": 22, "user": "4fe610fde4b0e8f79898fece"}, {"code": "(fn len[l] (\n  if (= l `()) \n      0 \n      (+ 1 (len (rest l)))\n  )\n)", "problem": 22, "user": "4fe65108e4b0e8f79898fed3"}, {"code": "reduce (fn [val x] (+ val 1)) 0", "problem": 22, "user": "4fe5c35ce4b0e8f79898fec9"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4fe6c2ace4b0e8f79898fed8"}, {"code": "(fn [x] \n     (loop [cnt 0,\n           y   x]\n        (if (= (first y) nil)\n            cnt\n            (recur (inc cnt) (rest y)))))", "problem": 22, "user": "4fe72924e4b0e8f79898fedb"}, {"code": "(fn ct [x]\n  (\n    if (= (rest x) '())\n  1 \n  (+ \n    1 \n    (ct (rest x))\n  ) \n)\n)", "problem": 22, "user": "4fe491f9e4b0e8f79898feb6"}, {"code": "(fn [x]\n  (loop [lst x ret 0]\n    (if (empty? lst) ret\n                  (recur (rest lst) (inc ret)))))", "problem": 22, "user": "4fdf5403e4b05e33b9224f98"}, {"code": "#(reduce (fn [c _] (inc c)) 0 (seq %))", "problem": 22, "user": "4fdec88fe4b05e33b9224f8e"}, {"code": "reduce (fn [a e] (inc a)) 0", "problem": 22, "user": "4fe83efbe4b07c9f6fd12c3b"}, {"code": "(fn [coll]\n  (reduce (fn [n x] (inc n)) 0 coll))", "problem": 22, "user": "4fe84c74e4b07c9f6fd12c3c"}, {"code": "reduce (fn [c x] (inc c)) 0", "problem": 22, "user": "4fe88f78e4b07c9f6fd12c45"}, {"code": "(fn [s]\r\n  (loop [i 1 myseq s]\r\n    (if (= (first (rest myseq)) nil)\r\n      i\r\n      (recur (inc i) (rest myseq)))))", "problem": 22, "user": "4fe1597fe4b0dd6cd5ce3633"}, {"code": "reduce (fn [n e] (inc n)) 0", "problem": 22, "user": "4fe8a1f8e4b07c9f6fd12c5f"}, {"code": "(partial reduce (fn [val _] (+ val 1)) 0)", "problem": 22, "user": "4fe89db2e4b07c9f6fd12c59"}, {"code": "(fn [s] (reduce (fn [i x] (+ 1 i)) 0 s))", "problem": 22, "user": "4fe89eb5e4b07c9f6fd12c5a"}, {"code": "(fn mycount\n  ([seq] (mycount seq 0))\n  ([seq acc] \n     (if (empty? (rest seq))\n      (+ acc 1)\n      (mycount (rest seq) (+ acc 1)))))", "problem": 22, "user": "4fe89efae4b07c9f6fd12c5b"}, {"code": "(fn cnt [x] \n  (if (first x) (+ 1 (cnt (rest x))) 0))", "problem": 22, "user": "4fe8b85be4b07c9f6fd12c77"}, {"code": "(fn [x]\n  (loop [n 0 c x] \n    (if (empty? c) n\n        (recur (inc n) (rest c) )\n    )\n  )\n)", "problem": 22, "user": "4fd11a93e4b04c3a95aa040a"}, {"code": "(fn myLength [ls]\n  (if-let [[x & xs] (seq ls)]\n          (+ 1 (myLength xs))\n          0))", "problem": 22, "user": "4fe8b19fe4b07c9f6fd12c70"}, {"code": "(fn my-count [coll]\r\n  (letfn [(my-count- [coll acc]\r\n            (if-not (seq (rest coll))\r\n              (inc acc)\r\n              (recur (rest coll) (inc acc))))]\r\n    (if (seq coll)\r\n        (my-count- coll 0)\r\n        0)))", "problem": 22, "user": "4e7e4a1f535db169f9c7970c"}, {"code": "(fn length [s]\n  ((fn length-iter [s l]\n    (if (empty? s)\n      l\n      (length-iter (rest s) (+ l 1)))) s 0))", "problem": 22, "user": "4fe8e771e4b0547ebccb2431"}, {"code": "(fn [l] \n   ((fn [l s] \n      (if (first l) (recur (rest l) (+ s 1)) s)) l 0))", "problem": 22, "user": "4fe8bc0ae4b07c9f6fd12c7a"}, {"code": "(fn [list]\n  (loop [my-list list\n           my-count 0]\n      (if (= () my-list)\n         my-count\n        (recur (rest my-list) (inc my-count)))))", "problem": 22, "user": "4fe89475e4b07c9f6fd12c4f"}, {"code": "(fn [x] (+ 1 (.lastIndexOf (vec x) (last (vec x)))))", "problem": 22, "user": "4fe89f05e4b07c9f6fd12c5c"}, {"code": "(fn [s]\n((fn z [x y]\n  (if (empty? x)\n\t\t(+ 0 y)\n\t\t(z (rest x) (inc y)))) s 0))", "problem": 22, "user": "4fe89c81e4b07c9f6fd12c57"}, {"code": "#(.size (vec %))", "problem": 22, "user": "4fe8e719e4b0547ebccb2430"}, {"code": "#((fn iter [xs n] (if (not-empty xs) (iter (rest xs) (+ 1 n)) n)) % 0)", "problem": 22, "user": "4fe8f5e3e4b0547ebccb2436"}, {"code": "(fn [xs]\n  (loop [ys xs r 0]\n    (if (empty? ys)\n      r\n      (recur (rest ys) (inc r)))))", "problem": 22, "user": "4fe8aef4e4b07c9f6fd12c6c"}, {"code": "#(reduce + (map (fn [x] (if (nil? x) 0 1)) %))", "problem": 22, "user": "4fe88cc1e4b07c9f6fd12c42"}, {"code": "(fn [seq] (reduce + 0 (map #(if true 1 %) seq)))", "problem": 22, "user": "4fe87e56e4b07c9f6fd12c40"}, {"code": "(fn my-count \n  ([xs] (if (empty? xs) 0 (my-count xs 1)))\n  ([[x & xs] n] (if (nil? xs) n (recur xs (inc n)))))", "problem": 22, "user": "4fe8d862e4b0547ebccb2428"}, {"code": "(fn my-count [the-list]\n  (if (nil? (first the-list))\n            0\n            (+ 1 (my-count\n                  (rest the-list)))))", "problem": 22, "user": "4fe930e9e4b0547ebccb244d"}, {"code": "(fn [seq] \n  (loop [s seq acc 0]\n    (if (= () s) \n      acc\n      (recur (rest s) (+ 1 acc))\n)))", "problem": 22, "user": "4fe9231ce4b0547ebccb2445"}, {"code": "(fn counter [lst]\n  ((fn cnt [lst c]\n    (cond\n     (empty? lst) c\n     :else (cnt (rest lst) (+ 1 c)))) lst 0))", "problem": 22, "user": "4fe89055e4b07c9f6fd12c47"}, {"code": "(fn mycount [a  & {:keys [b]\n                     :or {b 0}}]\n  (if (= (list* a) nil)\n    \tb\n      \t(mycount (rest (list* a)) :b (+ b 1))))", "problem": 22, "user": "4fe96115e4b0547ebccb2459"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4fe868d1e4b07c9f6fd12c3f"}, {"code": "(fn [col]\n  (reduce #(+ %1 %2)\n    (map (fn [x] 1) col)))", "problem": 22, "user": "4fe98e07e4b0547ebccb2464"}, {"code": "reduce (fn [x y](+ 1 x)) 0", "problem": 22, "user": "4fe95203e4b0547ebccb2454"}, {"code": "(fn c [xs]\n  (if (empty? xs)\n    0\n    (+ 1 (c (rest xs)))))", "problem": 22, "user": "4fbbae0fe4b081705acca2eb"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4fe9d647e4b0547ebccb2472"}, {"code": "(fn [s]\n  ((fn [s n]\n    (if (empty? s)\n      n\n      (recur (rest s) (inc n))))\n  s 0))", "problem": 22, "user": "4fe8b6afe4b07c9f6fd12c76"}, {"code": "(fn my-count [l]\r\n  (if (= (rest l) ())\r\n    1\r\n    (+ 1 (my-count (rest l)))))", "problem": 22, "user": "4f831dd2e4b033992c121c16"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4fea08a9e4b0547ebccb2484"}, {"code": "(fn f \r\n  ([s] (f s 1))\r\n  ([s i] \r\n     (if (next s)\r\n  \t  (f (next s) (+ i 1))\r\n      i)))", "problem": 22, "user": "4fe9b372e4b0547ebccb246b"}, {"code": "(fn [x]\n  (if(= (type x) java.lang.String)\n (.length x)\n  (.size x)\n))", "problem": 22, "user": "4fea1f9ee4b0547ebccb248b"}, {"code": "(fn [list] \n  ( reduce + ( map ( fn [x] 1 ) list ) ) )", "problem": 22, "user": "4fe899a6e4b07c9f6fd12c54"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4fe93832e4b0547ebccb244f"}, {"code": "(fn c [[h & t]]\n  (if (nil? h)\n    0\n    (inc (c t))))", "problem": 22, "user": "4fea3164e4b0140c20fb9bff"}, {"code": "#(alength (to-array %))", "problem": 22, "user": "4fe9f0f6e4b0547ebccb247b"}, {"code": "(fn mycount [lst & [cnt]]\n  (if (not cnt)\n    (mycount lst 0)\n    (if (nil? (first lst))\n      cnt\n      (mycount (rest lst) (inc cnt)))))", "problem": 22, "user": "4fdb881ee4b05e33b9224f5e"}, {"code": "#(reduce (fn [x y] (+ 1 x)) 0 %)", "problem": 22, "user": "4fea6f3fe4b0140c20fb9c05"}, {"code": "reduce (fn [a e] (inc a)) 0", "problem": 22, "user": "4fea7594e4b0140c20fb9c06"}, {"code": "(fn recount [li] (reduce + (map (fn [x] 1) li)))", "problem": 22, "user": "4fea09b2e4b0547ebccb2485"}, {"code": "(fn [x] (reduce + (map (fn [c] 1) x)))", "problem": 22, "user": "4fea241ae4b0547ebccb248c"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4fe92ef2e4b0547ebccb244c"}, {"code": "#(if (empty? %2) %1 (recur (+ 1 %1) (rest %2))) 0", "problem": 22, "user": "4fe9de74e4b0547ebccb2475"}, {"code": "(fn f [col]\n  (if (empty? col) 0\n      (+ 1 (f (rest col)))))", "problem": 22, "user": "4fead955e4b0140c20fb9c10"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "4feada56e4b0140c20fb9c11"}, {"code": "#(reduce (fn [n _] (inc n)) 0 %)", "problem": 22, "user": "4fe97adde4b0547ebccb245e"}, {"code": "#(.size (vec %))", "problem": 22, "user": "4fe9ffeae4b0547ebccb247f"}, {"code": "reduce (fn [cnt, new] (+ 1 cnt)) 0", "problem": 22, "user": "4fea2de5e4b0140c20fb9bfe"}, {"code": "(fn gies_count [x]\n  (if (empty? x)\n    0 (+ 1 (gies_count (rest x)))\n    )\n  )", "problem": 22, "user": "4fe8b307e4b07c9f6fd12c72"}, {"code": "(fn my-count [seq]\n  (+ 1\n     (last\n     (map-indexed (fn [index item]\n                       index) seq))))", "problem": 22, "user": "4f3c5cf7e4b0e243712b1f47"}, {"code": "#(reduce (fn [acc v] (inc acc)) 0 %1)", "problem": 22, "user": "4fe8da4de4b0547ebccb2429"}, {"code": "(fn [list]\r\n  (loop [num 0\r\n         l list]\r\n    (if (empty? l)\r\n      num\r\n      (recur (inc num) (drop 1 l)))))", "problem": 22, "user": "4fdfd19be4b05e33b9224fa4"}, {"code": "(fn [s]\n  (loop [s s\n         acc 1]\n    (if\n      (= [] (rest s)) acc\n      (recur (rest s) (inc acc)))))", "problem": 22, "user": "4febc4a5e4b0681fd128dc99"}, {"code": "(fn [lst] (+ 1 (last (last (map #(vector %1 %2) lst (range))))))", "problem": 22, "user": "4f04ac77535dcb61093f6bdc"}, {"code": "#(last (map-indexed (fn[x y](inc x)) %))", "problem": 22, "user": "4fba77fae4b081705acca2df"}, {"code": "#(if (empty? %2) %1 (recur (+ 1 %1) (rest %2))) 0", "problem": 22, "user": "4fe91fa2e4b0547ebccb2440"}, {"code": "(fn [sq]\r\n  (loop [x sq n 1]\r\n    (if-not (next x)\r\n      n\r\n      (recur (next x) (inc n)))))", "problem": 22, "user": "4fea7bc4e4b0140c20fb9c07"}, {"code": "(fn laenge [cc] \r\n  (loop [cc cc wert 0]\r\n    (if (empty? cc)\r\n      wert\r\n      (recur (rest cc) (inc wert)))))", "problem": 22, "user": "4fe4614ee4b0e8f79898feb3"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4fec51b4e4b0681fd128dca4"}, {"code": "#(loop [coll % i 0]\n  (if (empty? coll)\n    i\n    (recur (rest coll), (inc i))))", "problem": 22, "user": "4fec6febe4b0681fd128dca9"}, {"code": "#(loop [a % c 0]\n  (if (empty? a) c\n(recur (rest a) (inc c))))", "problem": 22, "user": "4da8dd6e30acd6ed12482a68"}, {"code": "#(reduce (fn [sum _] (inc sum)) 0 %)", "problem": 22, "user": "4fed7ca8e4b0198f34b063b3"}, {"code": "(fn [coll]\n  (reduce (fn [cnt _] (inc cnt)) 0 coll))", "problem": 22, "user": "4feb1888e4b0140c20fb9c15"}, {"code": "(fn [xs] (loop [xs xs c 0] \n  (if (empty? xs) c (recur (rest xs) (inc c)))))", "problem": 22, "user": "4f25fc7ee4b0d66497709ffe"}, {"code": "(fn lngth\n  ([x] (if (= (rest x) '())\n         1\n         (lngth (rest x) 2)))\n  ([x n] (if (= (rest x) '())\n            n\n            (lngth (rest x) (+ n 1)))))", "problem": 22, "user": "4fedb2cce4b0198f34b063b8"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4f8c813de4b02e764a0a519f"}, {"code": "#((fn [l i] (if (= () l) \ni\n(recur (rest l) (+ i 1))\n)) % 0)", "problem": 22, "user": "4fedd2cae4b0198f34b063ba"}, {"code": "#(if (= (type %) java.lang.String) \n  (.length %) \n  (.size %))", "problem": 22, "user": "4fed8dd4e4b0198f34b063b4"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4fe54675e4b0e8f79898fec1"}, {"code": "(fn f [x]\n  (if (empty? x)\n\t\t0\n      \t(+ 1 (f (rest x)))\n    )\n)", "problem": 22, "user": "4fee1574e4b0678c553fc309"}, {"code": "(fn [seq]\n  (loop [seq seq cnt 0]\n    (if (empty? seq)\n      cnt\n      (recur (rest seq) (inc cnt)))))", "problem": 22, "user": "4feded14e4b0d2a5fc2962ec"}, {"code": "(fn [xs]\n    (loop [[y & ys] xs\n           c 1]\n      (if (empty? ys)\n        c\n        (recur ys (inc c)))))", "problem": 22, "user": "4fe89297e4b07c9f6fd12c4c"}, {"code": "(fn cnt [a] \n  (if (empty? a)\n      0\n      (+ 1 (cnt (rest a)))))", "problem": 22, "user": "4febb4dae4b0681fd128dc98"}, {"code": "(fn [arr]\r\n  (loop [myrem arr amount 0]\r\n    (if (empty? myrem)\r\n      amount\r\n      (recur (rest myrem) (inc amount))\r\n      )\r\n    )\r\n)", "problem": 22, "user": "4fedd993e4b0198f34b063bc"}, {"code": "#(->> % (map (fn [x] 1)) (reduce +))", "problem": 22, "user": "4feef09ae4b0678c553fc30e"}, {"code": "#(reduce + (map (fn [a] (long 1)) %1))", "problem": 22, "user": "4fe15ffee4b0dd6cd5ce3634"}, {"code": "(fn [xs] (loop [m 0\n                ys xs]\n                (if (= (first ys) nil)\n                  m\n                  (recur (+ m 1) (rest ys)))))", "problem": 22, "user": "4fec550de4b0681fd128dca6"}, {"code": "(fn [xs]\n      (let [f (fn [xs' n]\n                (if (empty? xs')\n                  n\n                  (recur (rest xs') (+ 1 n))))]\n        (f xs 0)))", "problem": 22, "user": "4fb2244ee4b081705acca288"}, {"code": "#((fn [xs n] (if (empty? xs) n (recur (rest xs) (inc n)))) % 0)", "problem": 22, "user": "4fef439ce4b0678c553fc313"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "4fef481ce4b0678c553fc314"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4febddc9e4b0681fd128dc9a"}, {"code": "(fn [x] (loop [l x cnt 0] (if (empty? l) cnt (recur (rest l) (inc cnt)))))", "problem": 22, "user": "4fe9cea4e4b0547ebccb2471"}, {"code": "(fn [acc coll] (if (empty? coll) acc (recur (+ 1 acc) (rest coll)))) 0", "problem": 22, "user": "4fef4bc0e4b0678c553fc315"}, {"code": "(fn [xs]\n  (reduce + (map (fn [x] 1) xs)))", "problem": 22, "user": "4feff3b6e4b0678c553fc31e"}, {"code": "(fn mycount [coll]\r\n  (reduce + (map (fn [a] 1) coll) ))", "problem": 22, "user": "4fd170fce4b04c3a95aa0411"}, {"code": "(fn taille \n  ([coll] (taille coll 0))\n  ([coll c] (if (empty? coll) c (taille (rest coll) (inc c))))\n  )", "problem": 22, "user": "4ff01fa9e4b0678c553fc321"}, {"code": "(fn [c]\n(loop [c c acc 0]\n  (if (seq c)\n    (recur (rest c) (inc acc))\n    acc)))", "problem": 22, "user": "4e95c771535dbda64a6f6b39"}, {"code": "reduce (fn [x t] (+ 1 x)) 0", "problem": 22, "user": "4fcba3f9e4b0ee37620e185b"}, {"code": "(fn f [n s]\n  (if (empty? s) n (f (inc n) (rest s)))\n) 0", "problem": 22, "user": "4ff07229e4b0678c553fc323"}, {"code": "(fn [x] \r\n   (loop [y x size 0]     \r\n     (if (empty? y)\r\n       size\r\n       (recur (rest y) (+ 1 size))\r\n     )\r\n   )\r\n)", "problem": 22, "user": "4ff07688e4b0678c553fc324"}, {"code": "(fn mine [s] (if (empty? s) 0 (inc (mine (rest s)))))", "problem": 22, "user": "4ff0e01fe4b0678c553fc328"}, {"code": "#(loop [s % cnt 0] (if (empty? s) cnt (recur (rest s) (inc cnt))))", "problem": 22, "user": "4eee5459535d93acb0a668c5"}, {"code": "#(loop [n 0, [x & xs] %] (if x (recur (+ 1 n) xs) n))", "problem": 22, "user": "4fef4379e4b0678c553fc312"}, {"code": "(fn [seq] (.length (into [] seq)))", "problem": 22, "user": "4fd65b2be4b0d4de60cee37e"}, {"code": "#(reduce (fn [a _] (+ 1 a)) 0 %)", "problem": 22, "user": "4fec1d3be4b0681fd128dca0"}, {"code": "(fn count-all\r\n  [xs]\r\n  \t(loop \r\n      [v (vec xs) \r\n       i 0] \r\n      (if (= v []) i (recur (rest v) (inc i)))\r\n      )\r\n  )", "problem": 22, "user": "4fee04a0e4b0678c553fc308"}, {"code": "(fn [seq]\n  (reduce (fn [counter _]\n            (inc counter)) 0 seq))", "problem": 22, "user": "4e6a5694535d8ccf87e9fece"}, {"code": "(fn coun [x]\n  (if (empty? x) 0 (+ 1 (coun (rest x)))))", "problem": 22, "user": "4ff2430ae4b0678c553fc336"}, {"code": "(fn [l]\n         ((fn [l n]\n           (if (empty? l)\n             n\n             (recur (rest l) (+ n 1)))) l 0))", "problem": 22, "user": "4fc588bee4b0ee37620e17fa"}, {"code": "(fn cnt[s] (if (empty? s) 0 (+ 1 (cnt (rest s)))))", "problem": 22, "user": "4fe8aba5e4b07c9f6fd12c68"}, {"code": "(fn myCount [l]\n  (if (seq (rest l)) (+ 1 (myCount (rest l))) 1))", "problem": 22, "user": "4ff203e5e4b0678c553fc331"}, {"code": "(fn cnt [seq]\r\n  (loop [seq seq cnt 0]\r\n    (if (empty? seq)\r\n      cnt\r\n      (recur (next seq) (inc cnt)))))", "problem": 22, "user": "4ff201d7e4b0678c553fc330"}, {"code": "(fn [s] (loop [i 0 x s] \n  (if (empty? x) i\n    (recur (inc i) (rest x)))))", "problem": 22, "user": "4f0478b0535dcb61093f6bcb"}, {"code": "(fn c [lst]\r\n  (if (empty? lst)\r\n    0\r\n    (+ 1 (c (rest lst)))))", "problem": 22, "user": "4ff304f4e4b0678c553fc343"}, {"code": "(fn [a] (loop [c 0 l a] (if (empty? l) c (recur (inc c) (rest l)))))", "problem": 22, "user": "4db2cd84535df7e46ed9b6c6"}, {"code": "(fn mycount [l]\n  (if (= l '())\n      0\n      (+ 1 (mycount (rest l)))))", "problem": 22, "user": "4ff355a1e4b0678c553fc34d"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4f95900ce4b0dcca54ed6cd3"}, {"code": "(fn [s]\n  (loop [ps s n 0]\n    (if (empty? ps)\n        n\n        (recur (rest ps) (inc n)))))", "problem": 22, "user": "4ff35e60e4b0678c553fc350"}, {"code": "(fn [a] (loop [a a, n 0] (if (empty? a) n (recur (rest a) (inc n)))))", "problem": 22, "user": "4ff3e771e4b0678c553fc356"}, {"code": "(fn[x](reduce + (map (fn[_](+ 1)) x)))", "problem": 22, "user": "4ff2f0a9e4b0678c553fc341"}, {"code": "(fn length\n  ([coll] (length coll 0))\n  ([coll result]\n     (if (empty? coll)\n       result\n       (recur (rest coll) (inc result)))) )", "problem": 22, "user": "4fedec00e4b0d2a5fc2962eb"}, {"code": "reduce (fn [a b] (inc a)) 0", "problem": 22, "user": "4fefd624e4b0678c553fc31b"}, {"code": "(fn [coll] \n  (reduce \n    (fn [v el] (+ v 1)) 0 coll))", "problem": 22, "user": "4feddf2ee4b0198f34b063be"}, {"code": "(fn cnt [c] (if (empty? c)\n  0\n  (+ 1 (cnt (rest c)))))", "problem": 22, "user": "4ff4c9dae4b0678c553fc360"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4ff50604e4b0678c553fc365"}, {"code": "(fn f [l]\n  (if (= l '())\n      0\n      (inc (f (rest l)))))", "problem": 22, "user": "4ff5744ae4b0678c553fc36a"}, {"code": "(fn my-count [seq]\n  (letfn [(cnt [seq n]\n            (if (empty? seq)\n              n\n              (recur (rest seq) (inc n))\n              )\n            )\n          ]\n    (cnt seq 0)\n    )\n  )", "problem": 22, "user": "4ff58b05e4b0678c553fc36b"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4ff35d46e4b0678c553fc34f"}, {"code": "(fn [xs] (reduce + (map (fn [_] 1) xs)))", "problem": 22, "user": "4ff31e13e4b0678c553fc346"}, {"code": "(fn [x]\n  (reduce +\n    (map (fn [_] 1) x)))", "problem": 22, "user": "4ff4f5c4e4b0678c553fc362"}, {"code": "#(\n  loop [l % cnt 0]\n    (if (nil? (seq l)) cnt (recur (rest l) (inc cnt)))\n  \n)", "problem": 22, "user": "4ff6354fe4b0678c553fc376"}, {"code": "(fn len [vec]\n  (loop [vec vec cnt 0]\n    (if (seq vec)\n      (recur (rest vec) (inc cnt))\n      cnt)))", "problem": 22, "user": "4ff6aea8e4b0678c553fc381"}, {"code": "#(loop [seq %1 elems 0]\n  (if (empty? seq)\n    elems\n    (recur (rest seq) (inc elems))))", "problem": 22, "user": "4ff5a525e4b0678c553fc36d"}, {"code": "(fn lb [x] (if (= x []) (+ 0) (+ 1 (lb (rest x)))))", "problem": 22, "user": "4ff6ed6ae4b0678c553fc384"}, {"code": "(fn [x] (loop [y x cnt 0]\n          (cond (empty? y) cnt\n          :else (recur (rest y) (inc cnt)))))", "problem": 22, "user": "4f0eeff3535d0136e6c22327"}, {"code": "(fn length [coll]\r\n  (if (empty? coll)\r\n    0\r\n    (inc (length (rest coll)))) )", "problem": 22, "user": "4ff72b8ce4b0678c553fc38b"}, {"code": "(fn [lst]\n  (apply + (map (fn [x] 1) lst)))", "problem": 22, "user": "4ff73b7ae4b0678c553fc38c"}, {"code": "(fn [x]\r\n  (loop [c 0, x1 x]\r\n    (if (seq x1)\r\n      (recur (inc c) (rest x1))\r\n      c)))", "problem": 22, "user": "4ff5a42ae4b0678c553fc36c"}, {"code": "#(loop [n 0 c %] (if (empty? c) n (recur (+ 1 n) (drop 1 c))))", "problem": 22, "user": "4ee624f8535d93acb0a66855"}, {"code": "#(reduce (fn [x _] (inc x)) 0 %)", "problem": 22, "user": "4ff76222e4b0678c553fc38e"}, {"code": "#((fn [s x] (if (= s '()) x (recur (rest s) (inc x)))) % 0)", "problem": 22, "user": "4ff76effe4b0678c553fc390"}, {"code": "(fn f [s] (if (= '() s) 0 (inc (f (rest s)))))", "problem": 22, "user": "4ff673b3e4b0678c553fc37d"}, {"code": "#(apply + (map (fn [x] 1) %))", "problem": 22, "user": "4f24957ae4b0d66497709fed"}, {"code": "(fn [lst] \n  (loop [cnt 0 lst lst]\n    (if (nil? (seq lst))\n      cnt\n      (recur (+ cnt 1) (rest lst)))))", "problem": 22, "user": "4ff743fde4b0678c553fc38d"}, {"code": "#(+ 1 (first (last (map-indexed list %))))", "problem": 22, "user": "4ff82b00e4b0678c553fc395"}, {"code": "#(reduce (fn [n _] (inc n)) 0 %)", "problem": 22, "user": "4ff83003e4b0678c553fc396"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4fe20c55e4b0dd6cd5ce363d"}, {"code": "(fn c [s]\n  (if (empty? s)\n    0\n    (+ 1 (c (rest s)))))", "problem": 22, "user": "4ff89ae0e4b0678c553fc39a"}, {"code": "(fn c ([l] (if (seq l) (+ 1 (c (rest l))) 0)))", "problem": 22, "user": "4ff889f2e4b0678c553fc399"}, {"code": "reduce (fn [x y] (inc x)) 0", "problem": 22, "user": "4ff80e81e4b0678c553fc394"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "4f5cfb94e4b0030a34fb2b31"}, {"code": "(fn [c] (loop [coll c\n               result 0]\n          (if (empty? coll)\n              result\n              (recur (rest coll) (inc result)))))", "problem": 22, "user": "4ff8a89de4b0678c553fc39d"}, {"code": "(fn [s] (reduce (fn [i x] (+ 1 i)) 0 s))", "problem": 22, "user": "4ff92cd2e4b0678c553fc3a5"}, {"code": "(fn [xs] (reduce #(+ % (or 1 %2)) 0 xs))", "problem": 22, "user": "4ff67852e4b0678c553fc37e"}, {"code": "(fn xx [x] \r\n  (cond\r\n    (= '() x) 0\r\n    :else (+ 1 (xx (rest x)))\r\n  ))", "problem": 22, "user": "4ff9624ce4b0678c553fc3a8"}, {"code": "(fn l \n  ([coll] \n    (l coll 0))\n  ([coll acc] \n    (if-let \n      [[ x & xs ] (seq coll)]\n        (recur xs (inc acc))\n        acc)))", "problem": 22, "user": "4ff956eae4b0678c553fc3a7"}, {"code": "#(reduce + 0 (map (fn [_] 1) %))", "problem": 22, "user": "4ff99f47e4b0678c553fc3aa"}, {"code": "#(.size (vec %))", "problem": 22, "user": "4ff4a3ace4b0678c553fc35e"}, {"code": "(fn ccount [x]\n  (if (= (rest x) ())\n    1\n   (+ 1 (ccount (rest x)))))", "problem": 22, "user": "4ec14602535dfed6da9c6daa"}, {"code": "(fn [s]\n  (reduce (fn [x _] (inc x)) 0 s))", "problem": 22, "user": "4ff9d4e5e4b0678c553fc3b0"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "4ffa1335e4b0678c553fc3b5"}, {"code": "#(reduce + 0 (map (fn [_] 1) %))", "problem": 22, "user": "4ffa213ee4b0678c553fc3b7"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4ff89ea2e4b0678c553fc39b"}, {"code": "(fn [ls] (reduce (fn [x y] (inc x)) 0 ls))", "problem": 22, "user": "4ff8fb9ae4b0678c553fc3a4"}, {"code": "(fn func1\n  ([s]\n    (func1 s 0))\n  ([s cnt]\n    (if (empty? s)\n      cnt\n      (recur (rest s) (inc cnt)))))", "problem": 22, "user": "4ffa52fbe4b0678c553fc3bb"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4fea9154e4b0140c20fb9c0a"}, {"code": "#(loop [x 0 s %] (cond (not (empty? s)) (recur (inc x) (rest s)) :else x))", "problem": 22, "user": "4fcf1755e4b03432b189f40c"}, {"code": "(fn [coll] (reduce (fn [n _] (inc n)) 0 coll))", "problem": 22, "user": "4ff937f2e4b0678c553fc3a6"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4fcf6abce4b03432b189f411"}, {"code": "(fn [xs] (reduce + (map (fn [x] 1) xs)))", "problem": 22, "user": "4fef76ece4b0678c553fc319"}, {"code": "(fn my-count [lst]\n  (if (empty? lst)\n    0\n    (inc (my-count (rest lst)))))", "problem": 22, "user": "4ff9cfd6e4b0678c553fc3af"}, {"code": "(fn [x]\n  (reduce (fn [a b] (+ a b)) (map (fn [a] 1) x ))\n)", "problem": 22, "user": "4ffb3c50e4b0678c553fc3c8"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "4ff520dee4b0678c553fc367"}, {"code": "(fn [x] (reduce (fn [k m] (+ 1 k)) 0 x))", "problem": 22, "user": "4ffb38e8e4b0678c553fc3c6"}, {"code": "#(loop [seq % n 0] (if (empty? seq) n (recur (rest seq) (inc n))))", "problem": 22, "user": "4fecd35fe4b0681fd128dcab"}, {"code": "(fn c [x]\n  (if (empty? x) 0 (+ 1 (c (rest x)))))", "problem": 22, "user": "4ffb59f6e4b0678c553fc3cf"}, {"code": "reduce (fn [n _] (inc n)) 0", "problem": 22, "user": "4ffb335ee4b0678c553fc3c5"}, {"code": "#(loop [cnt 0 li %] (if (empty? li) cnt (recur (inc cnt) (rest li))))", "problem": 22, "user": "4fa74e12e4b081705acca1c1"}, {"code": "#((fn my-count [y z] (if (= y '()) z (my-count (rest y) (inc z)))) % 0)", "problem": 22, "user": "4ffb61a1e4b0678c553fc3d1"}, {"code": "(fn [seq] (reduce + (map (fn [el] 1) seq)))", "problem": 22, "user": "4fb1d7ace4b081705acca281"}, {"code": "(fn named [xs]\n  (if (empty? xs) 0 (inc (named (rest xs)))))", "problem": 22, "user": "4ffa893fe4b0678c553fc3bc"}, {"code": "(fn numara ([col] (numara col 0)) ([col n] (if (empty? col) n (numara (rest col) (+ n 1)))))", "problem": 22, "user": "4e539f7e535d8a8b8723a272"}, {"code": "(fn f [x] (if (empty? x) 0 (+ 1 (f (rest x)))))", "problem": 22, "user": "4daf8e61edd6309eace4d179"}, {"code": "(fn foo [x]\n  (if (empty? x)\n    0\n    (+ 1 (foo (rest x)))))", "problem": 22, "user": "4f942227e4b0dcca54ed6cbe"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "4f9a5e1ee4b0dcca54ed6d09"}, {"code": "reduce  (fn [r val] (inc r)) 0", "problem": 22, "user": "4daa6dd430acd6ed14482a68"}, {"code": "(fn this [ls] (if (empty? ls) 0 (+ 1 (this (rest ls)))))", "problem": 22, "user": "4ffdca56e4b0678c553fc3e9"}, {"code": "#(inc (last (interleave % (range))))", "problem": 22, "user": "4e260220535deb9a81d77ef0"}, {"code": "#(reduce + (map (fn [el] 1) %))", "problem": 22, "user": "4ff9e827e4b0678c553fc3b2"}, {"code": "(fn [x y] (if (next y)\n             (recur (inc x) (next y))\n             (inc x)\n             )) 0", "problem": 22, "user": "4ff8aa3fe4b0678c553fc39e"}, {"code": "(fn [q] \n      (loop [y q z 0] \n        (if (empty? y) z (recur (rest y) (inc z)))))", "problem": 22, "user": "4fb5033ce4b081705acca2b5"}, {"code": "#(reduce + (map (fn [_] 1) %1))", "problem": 22, "user": "4ffe4d43e4b0678c553fc3f1"}, {"code": "#(loop [a %1 c 0]\n  (if (= nil (first a))\n   c\n  (recur (rest a) (inc c))))", "problem": 22, "user": "4ffe8193e4b0678c553fc3f4"}, {"code": "#(loop [xs % s 0]\n  (if (empty? xs)\n    s\n    (recur (rest xs) (+ 1 s))))", "problem": 22, "user": "4eda05c1535d10e5ff6f5309"}, {"code": "#(reduce (fn [a b] (inc a)) 0 %)", "problem": 22, "user": "4edcbe92535d10e5ff6f5325"}, {"code": "#(reduce (fn [x _] (inc x)) 0 %)", "problem": 22, "user": "4ffe3349e4b0678c553fc3f0"}, {"code": "#(apply + (map (fn [x] 1) %))", "problem": 22, "user": "4fe8c7dbe4b0547ebccb2423"}, {"code": "(fn [xs]\n  (reduce (fn [s v] (inc s)) 0 xs))", "problem": 22, "user": "4ffeec2ce4b0678c553fc3fa"}, {"code": "(fn [coll]\n    (loop [coll coll\n           n 0]\n      (if (empty? coll)\n        n\n        (recur (rest coll) (inc n)))))", "problem": 22, "user": "4ffb529be4b0678c553fc3cd"}, {"code": "#(reduce + (map (fn [_] 1) %))", "problem": 22, "user": "4ffde312e4b0678c553fc3ea"}, {"code": "(fn my-count\n  ([c] (my-count c 0))\n  ([c n] (if (empty? c)\n    n\n    (my-count (rest c) (+ n 1)))))", "problem": 22, "user": "4fff00ede4b0678c553fc3fc"}, {"code": "#(reduce + (map (fn [x] 1) %1))", "problem": 22, "user": "4fff72b6e4b0678c553fc400"}, {"code": "#(reduce (fn [acc _] (inc acc)) 0 %)", "problem": 22, "user": "4dde4c8d535d08e6dec9fdd6"}, {"code": "(fn [cl]\n  (let [i 0 c (apply list cl)]\n    ((fn [li n]\n      (if (empty? li)\n        n\n        (recur (pop li) (+ n 1) )))\n    c i)))", "problem": 22, "user": "4fff57f1e4b0678c553fc3fe"}, {"code": "#(reduce + 0 (map (constantly 1) %))", "problem": 22, "user": "4fe8a3bde4b07c9f6fd12c61"}, {"code": "(fn [x] (loop [a 0 l x]\r\n  (if (empty? l) a\r\n      (recur (+ a 1) (rest l)))))", "problem": 22, "user": "4ff10dd2e4b0678c553fc32a"}, {"code": "(fn [coll] (reduce + (map (constantly 1) coll)))", "problem": 22, "user": "4ffb43b9e4b0678c553fc3ca"}, {"code": "(fn [x] (reduce + (map #(if (nil? %) 0 1) x)))", "problem": 22, "user": "4ffa8affe4b0678c553fc3bd"}, {"code": "#(reduce (fn [a b](+ a 1 )) 0 %)", "problem": 22, "user": "500147e1e4b0678c553fc418"}, {"code": "reduce (fn [n l] (inc n)) 0", "problem": 22, "user": "50015be1e4b0678c553fc41a"}, {"code": "#(reduce (fn [x _] (inc x)) 0 %)", "problem": 22, "user": "500159b3e4b0678c553fc419"}, {"code": "(fn cc [l] \n  (if \n    (empty? l) \n    0 \n    (+ 1 (cc (rest l)))))", "problem": 22, "user": "5001dd97e4b0678c553fc421"}, {"code": "(fn [col]\n  (reduce \n    (fn [len arr] (inc len))\n    0\n    col))", "problem": 22, "user": "4ff66816e4b0678c553fc37a"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "50023489e4b0678c553fc425"}, {"code": "(fn cc [s] (reduce + (map (fn [n] (+ 0 1) ) s ) )  )", "problem": 22, "user": "5002ad40e4b0678c553fc42b"}, {"code": "#(reduce (fn [a e] (inc a)) 0 %)", "problem": 22, "user": "4f625f68e4b0defedf855fd2"}, {"code": "(fn cnt [a] (reduce + (map (constantly 1) a)))", "problem": 22, "user": "5002f567e4b0678c553fc430"}, {"code": "#(loop [s (seq %)\n        c 0]\n        (if (nil? (first s)) c \n        (recur (rest s) (inc c))))", "problem": 22, "user": "4ff78679e4b0678c553fc392"}, {"code": "(fn length[seq]\n  (if (empty? seq) \n    0\n    (inc (length (rest seq)))))", "problem": 22, "user": "500388dde4b0678c553fc43d"}, {"code": "(fn [seq] (loop [sq seq acc 0] (if (empty? sq) acc (recur (rest sq) (inc acc)) )))", "problem": 22, "user": "5003bb77e4b0678c553fc442"}, {"code": "(fn [arr] (reduce + (map (fn [e] 1) arr)))", "problem": 22, "user": "5003deb9e4b0678c553fc445"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4ffee0f6e4b0678c553fc3f7"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4ff30a84e4b0678c553fc344"}, {"code": "(fn count-it\n  ([l] (count-it l 0))\n  ([l n]\n    (if-not (empty? l)\n      (count-it (rest l) (inc n))\n      n)))", "problem": 22, "user": "50046aa8e4b0678c553fc450"}, {"code": "(fn[x] (loop [n 0  lis x]  \r\n         (if (empty? lis )  n  \r\n  \t (recur(inc n) (next lis)))))", "problem": 22, "user": "4ffd92e7e4b0678c553fc3e3"}, {"code": "reduce (fn [acc n] (+ 1 acc)) 0", "problem": 22, "user": "5004d5d0e4b0678c553fc456"}, {"code": "reduce (fn [i _] (inc i)) 0", "problem": 22, "user": "5003ee7de4b0678c553fc446"}, {"code": "(fn [l] (loop [nl l acc 0] (if (empty? nl) acc (recur (rest nl) (inc acc) ))))", "problem": 22, "user": "4faa1157e4b081705acca1ea"}, {"code": "(fn [x] (reduce (fn [n l](+ n 1))0 x))", "problem": 22, "user": "50054b5ce4b0678c553fc45f"}, {"code": "(fn [coll]\n  (loop [coll coll\n         result 0]\n        (if (empty? coll)\n            result\n            (recur (rest coll) \n(inc result)))))", "problem": 22, "user": "50052fd0e4b0678c553fc45d"}, {"code": "#(loop [coll % n 0] \n  (if (empty? coll) n \n      (recur (rest coll) (inc n))))", "problem": 22, "user": "50052d38e4b0678c553fc45c"}, {"code": "(fn my-count [coll]\n  (letfn [(my-count' [coll counter]\n    (if (seq coll) (recur (rest coll) (inc counter)) counter))]\n  (my-count' coll 0)))", "problem": 22, "user": "500574d9e4b0678c553fc463"}, {"code": "(fn [x] (reduce + (map (fn[a] 1) x)))", "problem": 22, "user": "5002c798e4b0678c553fc42d"}, {"code": "(fn counter [seq]\n  (loop [sq seq ct 0]\n    (if (empty? sq)\n      ct\n      (recur (rest sq) (inc ct)))))", "problem": 22, "user": "50057f23e4b0678c553fc466"}, {"code": "#(-> % vec .size)", "problem": 22, "user": "50045388e4b0678c553fc44e"}, {"code": "(fn [lst] \n  (loop [l lst i 0]\n    (if (empty? l)\n        i\n        (recur (rest l) (inc i)))))", "problem": 22, "user": "4ee528fb535d1385b2869d87"}, {"code": ";; austintaylor's solution for this is brilliant\n(partial \n  (fn [i l] \n    (if l \n      (recur (inc i) (next l)) \n    i)) \n  0)", "problem": 22, "user": "5005b57de4b0678c553fc46a"}, {"code": "(fn [s]\n  (reduce + (map (constantly 1) s)))", "problem": 22, "user": "5005b7bae4b0678c553fc46b"}, {"code": "(fn my-count [coll] (if (empty? coll) 0 (inc (my-count (rest coll)))))", "problem": 22, "user": "5002b6e5e4b0678c553fc42c"}, {"code": "(fn [coll]\n  (loop [coll coll  i 0]\n    (if (empty? coll) i\n  (recur (rest coll) (inc i)))))", "problem": 22, "user": "4fc9a977e4b0ee37620e1847"}, {"code": "(fn cnt [x] (if (not= x []) (+(cnt (rest x)) 1) 0))", "problem": 22, "user": "50062f47e4b0678c553fc479"}, {"code": "#((zipmap % [1 2 3 4 5 6 7 8 9 10 11]) (last %))", "problem": 22, "user": "50062e4ae4b0678c553fc478"}, {"code": "#((fn mcount [seq acc] (if (empty? seq) acc (mcount (rest seq) (inc acc)))) % 0)", "problem": 22, "user": "5006474ce4b0678c553fc481"}, {"code": "#(.size (vec %))", "problem": 22, "user": "5006981ce4b0678c553fc489"}, {"code": "#(reduce (fn [x y] (+ x 1)) 0 %)", "problem": 22, "user": "50066c83e4b0678c553fc484"}, {"code": "(fn [coll] (reduce + (map (fn [x] 1) coll)))", "problem": 22, "user": "5006b7d2e4b0678c553fc48c"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "5006b262e4b0678c553fc48a"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4ff35abce4b0678c553fc34e"}, {"code": "#(reduce (fn [ x y ] (inc x)) 0 %)", "problem": 22, "user": "50086dafe4b028e089d3518d"}, {"code": "(fn cnt [xs] (if (empty? xs) 0 (inc (cnt (rest xs)))))", "problem": 22, "user": "500854c4e4b028e089d3518c"}, {"code": "(fn len-1 [lst]\n(if (empty? lst) 0\n(inc (len-1 (rest lst))) ) )", "problem": 22, "user": "500896a2e4b0144d4f561e38"}, {"code": "(fn [x]\n  (loop [lst x i 0]\n    (if (seq lst)\n      (recur (rest lst) (inc i))\n      i)))", "problem": 22, "user": "5008b795e4b0144d4f561e3e"}, {"code": "(fn foo [list]\n  (if (empty? list)\n    0\n    (+ 1 (foo (rest list)))))", "problem": 22, "user": "500850f4e4b028e089d3518b"}, {"code": "reduce (fn [cnt _] (inc cnt)) 0", "problem": 22, "user": "5007e90be4b0b17c647f5228"}, {"code": "#(apply + (map (fn[x] 1  ) % ))", "problem": 22, "user": "5007cdb9e4b0b17c647f5227"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "50097962e4b03d00572d2d6c"}, {"code": "(fn [x]\r\n  (first (last (map vector (iterate inc 1) x))))", "problem": 22, "user": "5006e494e4b0678c553fc492"}, {"code": "(fn counter [x] ((fn cntr [x n] \n                    (if (= x '()) n\n                    (cntr (rest x) (+ n 1)))) x 0))", "problem": 22, "user": "5009902ee4b03d00572d2d6d"}, {"code": "(fn [coll]\n  (loop [n 0 c coll]\n    (if (empty? c)\n      n\n      (recur (+ 1 n) (rest c)))))", "problem": 22, "user": "500933a6e4b046cdb195e074"}, {"code": "(fn [x] \n  (loop [s x c 1]\n    (if (empty? (rest s))\n      c\n      (recur (rest s) (inc c)))))", "problem": 22, "user": "5009fd0ae4b03d00572d2d70"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "5009e9f1e4b03d00572d2d6f"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "500aa15ee4b03d00572d2d76"}, {"code": "reduce (fn [acc coll] (inc acc)) 0", "problem": 22, "user": "5006c169e4b0678c553fc48d"}, {"code": "(fn [x]\n  (loop [l x,c 0]\n  (if (empty? l)\n    c\n    (recur (rest l) (inc c)))))", "problem": 22, "user": "500b61b1e4b03d00572d2d81"}, {"code": "reduce (fn [x y](inc x)) 0", "problem": 22, "user": "500b6685e4b03d00572d2d82"}, {"code": "reduce (fn [x -] (inc x)) 0", "problem": 22, "user": "500cb910e4b05f7c30cfa698"}, {"code": "(fn [s] (reduce (fn [acc _] (inc acc)) 0 s))", "problem": 22, "user": "500cc693e4b05f7c30cfa69a"}, {"code": "#(apply + (map (fn [_] 1) %))", "problem": 22, "user": "500900dee4b0144d4f561e42"}, {"code": "(partial reduce (fn [a _] (+ 1 a)) 0)", "problem": 22, "user": "4fe900a6e4b0547ebccb243a"}, {"code": "(fn [s]\n  (reduce (fn [x y] (+ x 1)) 0 s))", "problem": 22, "user": "500d86e8e4b0ff215386cad4"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "500d8c49e4b07ccb9a7ddb00"}, {"code": "#(loop [c % n 0]\n   (if (empty? c)\n     n\n     (recur (rest c) (inc n))))", "problem": 22, "user": "4fed24a5e4b0681fd128dcaf"}, {"code": "(fn c [x] (if (= (seq x) nil) 0 (+ 1 (c (rest x)))))", "problem": 22, "user": "500cf638e4b05f7c30cfa69d"}, {"code": "(fn [s] (apply + (map (fn [x] 1) s)))", "problem": 22, "user": "500e38a5e4b068062f6e8d90"}, {"code": "#(reduce (fn[x y](+ x 1)) 0  %)", "problem": 22, "user": "500d1db4e4b05f7c30cfa69f"}, {"code": "(fn [my-seq]\n  (loop [c 0 s my-seq]\n   (if (empty? s)\n      c\n      (recur (inc c) (rest s)))))", "problem": 22, "user": "500e9d2fe4b00fff93030f9a"}, {"code": "(fn mylen [cols] \n  (if (nil? (first cols))\n   0\n   (+ 1 (mylen (rest cols)))\n)\n\n)", "problem": 22, "user": "500e8743e4b00fff93030f98"}, {"code": "reduce (fn [c _] (inc c)) 0", "problem": 22, "user": "4ff9f5c5e4b0678c553fc3b4"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "50002152e4b0678c553fc407"}, {"code": "#(reduce + (map (fn[x] 1) %))", "problem": 22, "user": "500ec210e4b00fff93030f9d"}, {"code": "(fn s [x] (+ 1 (if x (s (next x)) -1)))", "problem": 22, "user": "500dac60e4b0039234aa867b"}, {"code": "#(reduce (fn [x,y] (+ 1 x)) 0 %1)", "problem": 22, "user": "500e6c4ee4b04a05d36fcc05"}, {"code": "reduce (fn [x y] (+ x 1)) 0", "problem": 22, "user": "500690e4e4b0678c553fc488"}, {"code": "(fn [xs]\n  (reduce (fn [acc x] (inc acc)) 0 xs))", "problem": 22, "user": "500ff421e4b0ae202717946f"}, {"code": "#(loop [x 0 seq %] (if (empty? seq) x (recur (inc x) (rest seq))))", "problem": 22, "user": "500ee13be4b00fff93030fa1"}, {"code": "reduce (fn [r v] (inc r)) 0", "problem": 22, "user": "500ebe23e4b00fff93030f9c"}, {"code": "reduce (fn [acc _] (inc acc)) 0", "problem": 22, "user": "500e91aae4b00fff93030f99"}, {"code": "#(loop [i 0 sq %] \n  (if (= (rest sq) ()) (inc i) \n(recur (inc i) (rest sq))))", "problem": 22, "user": "500fbfabe4b0c8af2eae4184"}, {"code": "#(loop \n  [c 0 \n   col %]\n  (if-not (next col)\n    (inc c)\n    (recur (inc c) (rest col))))", "problem": 22, "user": "500abce2e4b03d00572d2d77"}, {"code": "(fn [s]\n  (reduce +\n    (map (constantly 1) s)))", "problem": 22, "user": "50053d6ce4b0678c553fc45e"}, {"code": "reduce (fn [acc i] (+ acc 1)) 0", "problem": 22, "user": "500cc860e4b05f7c30cfa69b"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "500f9d58e4b0c8af2eae4181"}, {"code": "(fn [y] (reduce + ( map (fn [x] 1) y)))", "problem": 22, "user": "5010861fe4b04030df6167af"}, {"code": "(fn count1 [x] (if (empty? x) 0 (+ 1 (count1 (rest x)))))", "problem": 22, "user": "50101a30e4b04c11913f949d"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "500fee8ee4b0981581aecbb0"}, {"code": "#(reduce (fn [c _] (inc c)) 0 %)", "problem": 22, "user": "50119c07e4b028e9d38b393f"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "500f49c2e4b03ec779321688"}, {"code": "#(apply + (map (constantly 1) %))", "problem": 22, "user": "5011e738e4b0cd3f2a5854e6"}, {"code": "(fn [l]\n  (loop [n 0 l l]\n    (if (empty? l)\n        n\n        (recur (inc n) (rest l)))))", "problem": 22, "user": "50123696e4b02a085b99dc76"}, {"code": "(fn c [l] (if (empty? l) 0 (+ 1 (c (rest l)))))", "problem": 22, "user": "501284d9e4b030d97e4db710"}, {"code": "reduce (fn [a x] (inc a)) 0", "problem": 22, "user": "4fae0b85e4b081705acca245"}, {"code": "(fn getcount [x]\n  (cond\n    (empty? x) 0\n    :else (+ 1 (getcount (rest x)))))", "problem": 22, "user": "5012aefce4b0c8732600222a"}, {"code": "#(reduce (fn [x _] (+ x 1)) 0 %)", "problem": 22, "user": "5012ec0ae4b0c87326002230"}, {"code": "#(loop [x % n 0]\n  (if (= nil x)\nn\n(recur (next x) (inc n))))", "problem": 22, "user": "5012614ee4b02a085b99dc79"}, {"code": "(fn c [x] (apply + (map (fn [x] 1) x)))", "problem": 22, "user": "50090fc7e4b0144d4f561e44"}, {"code": "(fn [s]\n  ((fn [s n] \n    (if (seq s) (recur (rest s) (inc n))\n      n)) s 0))", "problem": 22, "user": "5013193ae4b0f26a0e3320ab"}, {"code": "(fn [lask lista]\n  (if (not-empty lista)\n    (recur (inc lask) (rest lista))\n    lask)) 0", "problem": 22, "user": "5013141de4b0f26a0e3320a9"}, {"code": "(fn [seq]\n  ((fn c [s n]\n    (if (empty? s) n (c (rest s) (+ n 1)))\n  ) seq 0))", "problem": 22, "user": "5013f715e4b0510f6b41d38c"}, {"code": "(fn [s] (reduce + (map (constantly 1) s)))", "problem": 22, "user": "5007f751e4b0b17c647f522b"}, {"code": "(fn [x]\n  ((fn cnt [y i]\n    (if (empty? y) \n      i\n      (cnt (rest y) (+ i 1))))\n    x 0))", "problem": 22, "user": "4f8320e9e4b033992c121c18"}, {"code": "(fn f [s] (if-let [ss (seq s)]\n                             (inc (f (rest ss)))\n                             0))", "problem": 22, "user": "50142490e4b07d18bdaaf70a"}, {"code": "reduce (fn [x _] (+ x 1)) 0", "problem": 22, "user": "5014718fe4b094324338f8e3"}, {"code": "(fn a ([s] (a s 0))\n      ([s c] (if (empty? s) c (a (rest s) (inc c)))))", "problem": 22, "user": "4fda8f57e4b05e33b9224f4e"}, {"code": "reduce (fn [a b] (inc a)) 0", "problem": 22, "user": "5014754de4b094324338f8e5"}, {"code": "(fn len ([xs] (len xs 1))\n  ([xs n]\n\t(if (next xs) (recur (rest xs) (+ n 1))\n\t\t\t\t  n)))", "problem": 22, "user": "500ec491e4b00fff93030f9e"}, {"code": "reduce (fn [coll _] (+ coll 1)) 0", "problem": 22, "user": "5014779ce4b094324338f8e6"}, {"code": "(fn count2 [x]\n   (reduce + (map (constantly 1) x)  )\n  )", "problem": 22, "user": "500a214de4b03d00572d2d74"}, {"code": "(fn [s]\n  (loop [s s\n         n 0]\n    (if (nil? s)\n        n\n        (recur (next s) (inc n)))))", "problem": 22, "user": "501577ade4b0aaedd199e911"}, {"code": "(fn ln [x] (if (empty? x) 0 (+ 1 (ln (rest x)))))", "problem": 22, "user": "50063098e4b0678c553fc47a"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4fc9985ee4b0ee37620e1846"}, {"code": "(fn [coll] (reduce (fn [x y] (+ x 1)) 0 coll))", "problem": 22, "user": "50127fbfe4b030d97e4db70f"}, {"code": "(fn [l] (apply + (map (fn [x] (+ 1)) l)))", "problem": 22, "user": "50163a12e4b052339a490e74"}, {"code": "#(or ((comp last last) (map vector % (iterate inc 1))) 0)", "problem": 22, "user": "50166470e4b052339a490e76"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "50167b43e4b052339a490e78"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "501668b4e4b052339a490e77"}, {"code": "(fn [s]\n    (letfn [(mycount [s c]\n                     (if (seq s)\n                       (recur (rest s) (+ c 1))\n                       c))]\n      (mycount s 0)))", "problem": 22, "user": "500ea957e4b00fff93030f9b"}, {"code": "(fn [v] ( loop [ cnt 0 vc (seq v) ] (if ( = vc () ) cnt (recur (inc cnt) (rest vc)))) )", "problem": 22, "user": "500c0393e4b03d00572d2d85"}, {"code": "(fn [s](reduce (fn [a b] (inc a)) 0 s))", "problem": 22, "user": "501688f7e4b052339a490e7a"}, {"code": "reduce (fn [a b] (inc a)) 0", "problem": 22, "user": "5017d9a9e4b0adbf98d88a3f"}, {"code": "#(reduce (fn [x,y] (+ x 1)) 0 %)", "problem": 22, "user": "5017eface4b02f523d7cc5e7"}, {"code": "(fn cn [s] (if (seq s) (+ 1 (cn (rest s))) 0))", "problem": 22, "user": "50189302e4b029375d2a5057"}, {"code": "(fn cnt [x]\n  (\n    if (= (first x) nil)\n      0\n      (+ (cnt (rest x)) 1)\n  )\n)", "problem": 22, "user": "4fb7b80ae4b081705acca2d4"}, {"code": "(fn mycount [seq]\n        (if (empty? seq)\n          0\n          (inc (mycount (rest seq)))\n          \n      )\n      )", "problem": 22, "user": "50158fa0e4b0aaedd199e913"}, {"code": "(fn f [x] (if (= nil (first x)) 0 (+ 1 (f (rest x)))))", "problem": 22, "user": "5017f840e4b02f523d7cc5e8"}, {"code": "#(+ (first (last (map-indexed vector %))) 1)", "problem": 22, "user": "50182f53e4b02f523d7cc5ec"}, {"code": "(fn [l] ( reduce (fn[c el] (+ c 1)) 0 l))", "problem": 22, "user": "5018ed15e4b011a2e0bf6412"}, {"code": "(fn this [w]\r\n    (if (first w)\r\n      (inc (this (rest w)))\r\n      0\r\n    )\r\n  )", "problem": 22, "user": "501819efe4b02f523d7cc5eb"}, {"code": "(fn [s]\n  (reduce (fn [c _] (inc c)) 0 s))", "problem": 22, "user": "4ffe1df9e4b0678c553fc3ed"}, {"code": "(fn caount [xs] (if (= nil (first xs)) 0 (+ 1 (caount (rest xs)))))", "problem": 22, "user": "500f336be4b03ec779321687"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "501a145de4b084c2705dde17"}, {"code": "(fn cnt\n  ([s] \n    (cnt s 0))    \n  ([s acc] (if (not (empty? s))\n               (cnt (rest s) (+ 1 acc))\n               acc)))", "problem": 22, "user": "501948b3e4b0b6630b101db5"}, {"code": "(fn [x] \n  (loop [x x total 0]\n    (if (nil? (first x)) total (recur (rest x) (inc total))\n    \n  ))\n)", "problem": 22, "user": "5012036ce4b0a040369c12f4"}, {"code": "(fn [myseq]\n  (loop [cnt 0 acc myseq]\n    (if (empty? acc) cnt\n    (recur (inc cnt) (rest acc))\n)))", "problem": 22, "user": "501b212ee4b0b12d9c5f4d83"}, {"code": "(fn f [let]\n  (if (nil? (seq let))\n    0\n    (+ 1 (f (rest let)))))", "problem": 22, "user": "501b1efee4b0b12d9c5f4d82"}, {"code": "#(+ 1 (last (map (fn [x y] identity x #_y) (range) %)))", "problem": 22, "user": "5007c7c7e4b0b17c647f5226"}, {"code": "(fn[s]\n  (reduce (fn[x _] (inc x)) 0 s )\n  )", "problem": 22, "user": "4dbac43b535d1e037afb21ac"}, {"code": "#(reduce + 0 (map (constantly 1) %))", "problem": 22, "user": "501b1a8ee4b0b12d9c5f4d81"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "501c41e3e4b0539218e73b3b"}, {"code": "#(reduce + 0 (map (fn [x] 1) %))", "problem": 22, "user": "501c2dfce4b0539218e73b39"}, {"code": "#((zipmap %1 (iterate inc 1)) (last %1))", "problem": 22, "user": "501d34f6e4b066e56b9d0b1e"}, {"code": "reduce (fn [x & rst] (+ 1 x)) 0", "problem": 22, "user": "501d52a8e4b066e56b9d0b20"}, {"code": "(fn [xs]\n  (let [c (fn [ys n]\n            (if (seq ys)\n                (recur (rest ys) (+ n 1))\n                n))]\n       (c xs 0)))", "problem": 22, "user": "501c76eae4b01d3bc87c0201"}, {"code": "(fn [s]\n  (apply + (map (fn [x] 1) s)))", "problem": 22, "user": "501dd61de4b051153f3b5b7d"}, {"code": "(fn go-count\n  [data]\n  (letfn [(count-iterator [data, n]\n      (if (next data)\n        (count-iterator (rest data) (+ n 1))\n        n))]\n  (count-iterator data 1)))", "problem": 22, "user": "501d0321e4b066e56b9d0b1d"}, {"code": "(fn elements [xs] \n  (if (= xs [])\n    0\n    (+ 1 (elements (drop 1 xs)))\n  )\n)", "problem": 22, "user": "50013694e4b0678c553fc417"}, {"code": "#(loop [x %1 i 0]\r\n  (let [r (rest x) i (+ i 1)]\r\n\t (if (empty? r)\r\n\t i\r\n\t (recur r i))))", "problem": 22, "user": "5018eb4ee4b011a2e0bf6411"}, {"code": "(fn len [list]\n    (if (empty? list)\n        0\n        (+ 1 (len (rest list)))\n    )\n  )", "problem": 22, "user": "501b4af5e4b0ae3ec3946093"}, {"code": "(partial reduce (fn [a c] (+ a 1)) 0)", "problem": 22, "user": "4ec57e4a535d6d7199dd36a4"}, {"code": "#(reduce (fn [acc col] (inc acc)) 0 %1)", "problem": 22, "user": "501adc55e4b0968d2b1d44af"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "501fe6fae4b0cb6ebc0a42ef"}, {"code": "(fn [x] \n  (letfn [(calc [x y] (if (not (empty? x))\n                        (recur (rest x) (inc y))\n                        y))]\n    (calc x 0)))", "problem": 22, "user": "501fed56e4b0cb6ebc0a42f0"}, {"code": "#(.size (vec %))", "problem": 22, "user": "4ffc89e9e4b0678c553fc3dc"}, {"code": "(fn [coll]\n  (loop [coll coll, n 0]\n    (if (empty? coll) n\n      (recur (rest coll) (inc n)))))", "problem": 22, "user": "501f414fe4b0cb6ebc0a42e7"}, {"code": "(fn fx [x] (\n  reduce (fn mycount [a b] (\n    + a 1\n  )) 0 x\n))", "problem": 22, "user": "50202d1ae4b0cb6ebc0a42f3"}, {"code": "(fn counter [x]\n  (if (= x '())\n    0\n    (+ 1 (counter (rest x)))))", "problem": 22, "user": "5020692be4b0cb6ebc0a42f6"}, {"code": "reduce #(+ %1 (if (not= %2 nil) 1 1)) 0", "problem": 22, "user": "501c1492e4b086d93747d180"}, {"code": "(fn [c]\n  (loop [c2 c i 0]\n    (if\n      (empty? c2)\n      i\n      (recur (rest c2) (inc i))\n    )\n))", "problem": 22, "user": "5020a3fbe4b0cb6ebc0a42f8"}, {"code": "(fn ! [xs]\n  (if (not-empty xs)\n      (+ 1 (! (next xs)))\n      0))", "problem": 22, "user": "5020d033e4b0cb6ebc0a42fa"}, {"code": "reduce (fn [x _] (+ x 1)) 0", "problem": 22, "user": "501fcd59e4b0cb6ebc0a42ec"}, {"code": "(fn co [ coll ] (reduce + (map (fn [a] 1) coll)))", "problem": 22, "user": "5020d2aee4b0cb6ebc0a42fb"}, {"code": "reduce (fn [acc _] (inc acc)) 0", "problem": 22, "user": "4f1af7e4535d64f603146471"}, {"code": "(fn [lat]\n  (reduce (fn [x y] (+ x 1)) 0 lat))", "problem": 22, "user": "5021eb15e4b00bba4502f7ab"}, {"code": "(fn [x] (loop [c 0 l x]\n       (if (empty? l) c\n       (recur (inc c) (rest l)))))", "problem": 22, "user": "501dfd54e4b051153f3b5b80"}, {"code": "reduce (fn [x y] (+ 1 x)) 0", "problem": 22, "user": "50223ee2e4b0846bc458ae48"}, {"code": "reduce (fn [a _] (+ a 1)) 0", "problem": 22, "user": "50233f64e4b0b5d8b1bd2399"}, {"code": "#(loop [coll % n 0] (if coll (recur (next coll) (inc n)) n))", "problem": 22, "user": "4fe9efe5e4b0547ebccb247a"}, {"code": "#(loop [list % counter 0]\n  (if (= '() list)\n    (-> counter)\n    (recur (rest list) (inc counter))))", "problem": 22, "user": "4ff54bfbe4b0678c553fc369"}, {"code": "(fn [x] \n  ((fn [x n]\n    (if (empty? x)\n        n\n        (recur (rest x) (inc n))\n    )\n  ) x 0)\n)", "problem": 22, "user": "502421ebe4b09f7ee7fb4377"}, {"code": "#(loop [cnt 0 acc%] (if (empty? acc) cnt (recur (inc cnt) (rest acc))))", "problem": 22, "user": "501f3b3ce4b0cb6ebc0a42e6"}, {"code": "(fn count-me [x] (alength (into-array x)))", "problem": 22, "user": "4f2942ace4b0d6649770a01e"}, {"code": "(fn c [s]\n  (if (empty? s) 0\n    (+ 1 (c (rest s)))))", "problem": 22, "user": "4fcf642ee4b03432b189f410"}, {"code": "(fn ! [l] (if (seq l) (+ 1 (! (rest l))) 0))", "problem": 22, "user": "50232eeae4b0b5d8b1bd2397"}, {"code": ";reduce (fn [acc col] (inc acc) 0)\n;(reduce #(inc % _) 0)\nreduce (fn [a _] (inc a)) 0", "problem": 22, "user": "50254dace4b0b0b8afb15aa6"}, {"code": "(fn ct\n  ([xs] (ct xs 0))\n  ([xs i]\n    (case xs\n        [] i\n        (ct (rest xs) (+ 1 i)))))", "problem": 22, "user": "501306dee4b0c87326002231"}, {"code": "(fn count-a-seq [lat]  (reduce (fn [x y] (+ x 1)) 0 lat))", "problem": 22, "user": "50208575e4b0cb6ebc0a42f7"}, {"code": "#(reduce (fn [sum _] (inc sum)) 0 %)", "problem": 22, "user": "5025b93ce4b0c969f0b056df"}, {"code": "(fn cnt [s]\n  (if (empty? s)\n    0\n    (+ 1 (cnt (rest s)))))", "problem": 22, "user": "4ffbc28ce4b0678c553fc3d4"}, {"code": "( fn [ col ] ( reduce ( fn [a,b] ( + a 1 ) ) 0 col ) )", "problem": 22, "user": "5026916fe4b0c969f0b056e1"}, {"code": "(fn x [l] (if (empty? l) 0 (+ (x (rest l)) 1)))", "problem": 22, "user": "5027b41ee4b01614d1633fee"}, {"code": "(fn [coll]\n  (reduce + (map (fn [x] 1) coll)))", "problem": 22, "user": "50270618e4b01614d1633feb"}, {"code": "reduce (fn [acc act](+ 1 acc)) 0", "problem": 22, "user": "5027bbe3e4b01614d1633fef"}, {"code": "reduce (fn[c _](inc c)) 0", "problem": 22, "user": "4ee3e3b8535d10e5ff6f5373"}, {"code": "(fn [coll] \n  (reduce \n    (fn [acc v] (inc acc)) 0 coll))", "problem": 22, "user": "5027fc0ce4b01614d1633ff2"}, {"code": "#((partial apply +) (map (fn [_] 1) %))", "problem": 22, "user": "502873a8e4b01614d1633ff8"}, {"code": "(fn [s]\n  (reduce + 0 (map (fn [_] 1) s)))", "problem": 22, "user": "5027f37be4b01614d1633ff1"}, {"code": "#(reduce (fn [acc _] (inc acc)) 0 %)", "problem": 22, "user": "5028cd0fe4b01614d1633ffc"}, {"code": "(fn [s]\n  (loop [x 0 se s]\n    (if (= () se)\n    x\n    (recur (inc x) (rest se)))))", "problem": 22, "user": "5024d54fe4b07ca75732c81f"}, {"code": "(fn [x] \n  (loop [i 0 x x]\n    (if (seq x)\n      (recur (inc i) (rest x))\n      i)))", "problem": 22, "user": "502904e0e4b0feaf66e22fad"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4fcf763de4b03432b189f413"}, {"code": "(fn [collection]\n  (loop [counter 1 element collection]\n    (if (empty? (rest element))\n          (int counter)\n      (recur (inc counter) (rest element)))))", "problem": 22, "user": "502925b9e4b0b6c928ad6201"}, {"code": "#((fn [s cnt]\n    (if (nil? (seq s))\n      cnt\n      (recur (rest s) (+ 1 cnt))))\n  % 0)", "problem": 22, "user": "50293245e4b08353e5d459cf"}, {"code": "(fn mycount [v]\n  (loop [result 0 myvec v]\n    (if (nil? (first myvec))\n      result\n      (recur (inc result) (next myvec)))))", "problem": 22, "user": "5028bce0e4b01614d1633ffb"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4e8a880b535d65386fec210d"}, {"code": "(fn elts [nums]\n  (if (empty? nums)\n    0\n    (+ 1 (elts (rest nums)))\n  )\n)", "problem": 22, "user": "502940a9e4b061fd216be4b8"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4fe9364be4b0547ebccb244e"}, {"code": "#(loop [n 0 \n         s %]\n    (if (empty? s)\n        n\n        (recur (inc n) \n               (rest s))))", "problem": 22, "user": "501fa1aee4b0cb6ebc0a42eb"}, {"code": "(fn [s]\n  (loop [ss s, n 0]\n    (if (empty? ss)\n      n\n      (recur (rest ss) (+ n 1)))))", "problem": 22, "user": "502ac96de4b0614b5299611b"}, {"code": "(fn [seq]\n  (reduce + (map (fn [x] 1) seq)))", "problem": 22, "user": "502ad27fe4b0614b5299611e"}, {"code": "(fn [c] (reduce (fn [a v] (+ a 1)) 0 c))", "problem": 22, "user": "502a5fa4e4b09e8f859a9fbd"}, {"code": "#(loop [n 0 c %]\n  (if (empty? c) n\n    (recur (inc n) (rest c))))", "problem": 22, "user": "4fab2a6ce4b081705acca214"}, {"code": "(fn [in]\n  (reduce (fn [c _] (inc c)) 0  in))", "problem": 22, "user": "502ade49e4b0614b52996120"}, {"code": "(fn [c]\n  (reduce (fn [v c] (+ v 1)) 0 c))", "problem": 22, "user": "502a3ffbe4b01f0b5e5efaa5"}, {"code": "(fn [elements]\n  (loop [c 0 xs elements]\n    (if (= xs ())\n      c\n      (recur (inc c) (rest xs)))))", "problem": 22, "user": "50294c28e4b0b33e9bf6fdef"}, {"code": "#(alength (to-array %1))", "problem": 22, "user": "4f9a737fe4b0dcca54ed6d0a"}, {"code": "(fn [col] (loop [c col acc 1] (if (next c) (recur (next c) (inc acc)) acc)))", "problem": 22, "user": "502ad2cae4b0614b5299611f"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "502113cee4b0ef1d2d4433b8"}, {"code": "#(reduce + (map (constantly 1) %1))", "problem": 22, "user": "502952c9e4b0b33e9bf6fdf1"}, {"code": "(fn [lst] (reduce + (map (fn [x] (+ 0 1)) lst)))", "problem": 22, "user": "502a4fdfe4b09dd42f6f3644"}, {"code": "(fn f1 [a] (reduce + (map (fn n [x] 1) a)))", "problem": 22, "user": "502c8681e4b0532a782a5e35"}, {"code": "reduce (fn [c _] (inc c)) 0", "problem": 22, "user": "4fb01e53e4b081705acca260"}, {"code": "#(reduce (fn [cnt x] (inc cnt)) 0 %)", "problem": 22, "user": "502d387fe4b0d96a44ab202f"}, {"code": "#(reduce + (map (constantly 1) %1))", "problem": 22, "user": "502d39c5e4b0d96a44ab2031"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "502c946be4b0532a782a5e36"}, {"code": "(fn rec [list]\n  (if (empty? list) 0 (+ 1 (rec (rest list)))))", "problem": 22, "user": "502d3912e4b0d96a44ab2030"}, {"code": "(fn [x] (reduce + (map (constantly 1) x)))", "problem": 22, "user": "50046d7be4b0678c553fc451"}, {"code": "(fn c [seq] (if (= [] seq) 0 (+  1(c (rest seq)))))", "problem": 22, "user": "502dbea6e4b019d6f1094ef0"}, {"code": "(fn h [x] (if (empty? x) 0\n          (+ (h (rest x)) 1)\n))", "problem": 22, "user": "502d39f8e4b0d96a44ab2032"}, {"code": "(fn contador [x]\r\n  (cond \r\n    (= (first x) nil) 0\r\n    :else (+ 1 (contador (rest x)))))", "problem": 22, "user": "50206641e4b0cb6ebc0a42f5"}, {"code": "(fn [xs] (\r\n  (fn go [xs n] \r\n    (if (= () xs)\r\n        n\r\n        (go (rest xs) (inc n)))) xs 0))", "problem": 22, "user": "502d30b1e4b013c13c6a99f0"}, {"code": "#(reduce + 0 (map (constantly 1) %))", "problem": 22, "user": "502e658de4b09697bcd83a7f"}, {"code": "#(+ 1 (.lastIndexOf (vec %) (last %)))", "problem": 22, "user": "502d4ea0e4b02fc10c6c6e46"}, {"code": "(fn [seq]\n  ((fn my-count-helper [seq counter]\n    (if (empty? seq)\n    \tcounter\n    \t(my-count-helper (rest seq) (+ counter 1)))) seq 0))", "problem": 22, "user": "502e9789e4b078f26332e746"}, {"code": "(fn len [coll]\r\n  (if\r\n      (empty? coll) 0\r\n      (inc ( len(rest coll) ))\r\n  )\r\n)", "problem": 22, "user": "502ac868e4b0614b5299611a"}, {"code": "(fn [l] (loop [cnt 0 l l] (if (empty? l) cnt (recur (inc cnt) (rest l)))))", "problem": 22, "user": "502e4b6fe4b09697bcd83a7e"}, {"code": "(fn [coll]\n  (loop [coll coll\n         acc 0]\n    (if (empty? coll)\n      acc\n      (recur (rest coll) (inc acc)))))", "problem": 22, "user": "502ec7aae4b06efe12e8cc78"}, {"code": "(fn [s]\r\n  (reduce (fn [x y] (inc x)) 0 s))", "problem": 22, "user": "502f4c89e4b0842eb223d8b9"}, {"code": "(fn my-count [xs] (if (= (rest xs) ()) 1 (+ 1 (my-count (rest xs)))))", "problem": 22, "user": "502aaadee4b0614b52996117"}, {"code": "(fn cnt [l]\n  (if (= l '())\n    0\n    (+ 1 (cnt (rest l)))\n  )\n)", "problem": 22, "user": "502fb9bee4b0f8db655c4ee2"}, {"code": "(fn [ls]\r\n  (loop [ls ls n 0]\r\n  (if (empty? ls)\r\n    n\r\n    (recur (rest ls) (+ n 1)))))", "problem": 22, "user": "502a9fdee4b095a7adb898b4"}, {"code": "(fn [seq]\n  (loop [coll seq length 0]\n    (if (empty? coll )\n      length\n      (recur (rest coll ) (inc length))\n    )\n  )\n)", "problem": 22, "user": "5017a3a6e4b0adbf98d88a3e"}, {"code": "(fn [l] \n   ((fn [n c] \n     (if (nil? n) \n       c \n       (recur (next n) (inc c)))) l 0))", "problem": 22, "user": "502cff22e4b0b2ab8d5c7e72"}, {"code": "#(if (string? %)\n  (inc (.lastIndexOf % (str (last %))))\n  (inc (.lastIndexOf % (last %))))", "problem": 22, "user": "502b0804e4b063e52107afad"}, {"code": "#(reduce (fn [x y] (+ x 1)) 0 %)", "problem": 22, "user": "5030f16fe4b05b7df5a0b84b"}, {"code": "(fn mycount [s] (cond (= '() s) 0 :else (+ 1(mycount (rest s)))))", "problem": 22, "user": "4df39b50535d08e6dec9fe29"}, {"code": "reduce (fn [a _] (inc a)) 0\n;(fn [s] \n;  (loop [c 0 l s]\n;    (if (empty? l) c\n;      (recur (inc c) (rest l)))))", "problem": 22, "user": "502bb7c0e4b0194ad32ea1a3"}, {"code": "(fn [s]\n  (loop [s s c 0]\n    (if (empty? s) c\n      (recur (rest s) (inc c)))))", "problem": 22, "user": "5029fccee4b023940c84aa47"}, {"code": "(fn [y] (reduce + (map (fn [x] 1) y)))", "problem": 22, "user": "502ea7bce4b078f26332e748"}, {"code": "(fn [coll]\n  (let [count-func \n    (fn [coll cnt]\n      (if (empty? coll)\n          cnt\n          (recur (rest coll) (+ 1 cnt))))]\n  (count-func coll 0)))", "problem": 22, "user": "503255d0e4b0e78df07b092b"}, {"code": "(fn [b]\n  (loop [c b i 1]\n    (if (next c)\n      (recur (next c) (inc i))\n      i)))", "problem": 22, "user": "503279b1e4b0e78df07b0930"}, {"code": "reduce (fn [n _] (inc n)) 0", "problem": 22, "user": "5032a334e4b0e78df07b0931"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "5032b066e4b00c0952a257ea"}, {"code": "#(reduce + (map (fn [x] (if x 1 0)) %))", "problem": 22, "user": "5032b398e4b00c0952a257eb"}, {"code": "reduce (fn [x _] (inc x)) 0", "problem": 22, "user": "5032548ee4b0e78df07b092a"}, {"code": "(fn h [x] (if (empty? x) 0 (+ 1 (h (rest x)))))", "problem": 22, "user": "5030ece2e4b05b7df5a0b84a"}, {"code": "#(apply + (map (fn [x] 1) %))", "problem": 22, "user": "5029481ee4b0b33e9bf6fdee"}, {"code": "(fn [coll] \r\n  (loop [r coll s 0] \r\n    (if (empty? r)\r\n      s\r\n      (recur (rest r) (inc s)))))", "problem": 22, "user": "5033a1fbe4b062bc5d7ae155"}, {"code": "(fn [x] (reduce + (map #(if (= %1 %1) 1 0) x)))", "problem": 22, "user": "503160c1e4b0391161bf5077"}, {"code": "(fn counter [s]\n  (loop [user-list s counter 1]\n    (if (= (rest user-list) ())\n      counter\n      (recur (rest user-list) (inc counter)))))", "problem": 22, "user": "5029faf6e4b023940c84aa46"}, {"code": "#(reduce (fn [acc v] (inc acc)) 0 %)", "problem": 22, "user": "50336c6be4b0c6c1199c710f"}, {"code": "#(reduce (fn [x y] (+ x 1)) 0 %1)", "problem": 22, "user": "4faea420e4b081705acca24c"}, {"code": "(fn [s]\n  (loop [ss s agg 0]\n    (if (empty? ss)\n      agg\n      (recur (rest ss) (+ 1 agg)))))", "problem": 22, "user": "4f03f3b7535dcb61093f6b85"}, {"code": "#(loop [s % n 0]\n  (if (empty? s)\n    n\n    (recur (rest s) (inc n))\n    )\n  )", "problem": 22, "user": "503354c3e4b0c6c1199c710c"}, {"code": "(fn cnt [x] (if (empty? x) 0 (+ 1 (cnt (rest x)))))", "problem": 22, "user": "5034b0e1e4b062bc5d7ae167"}, {"code": "(fn [s] (reduce + (map (constantly 1) s)))", "problem": 22, "user": "5033f11ee4b062bc5d7ae15b"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "5034a14de4b062bc5d7ae165"}, {"code": "(fn [val]\n  (loop [cuenta 0\n         lista (seq val)]\n    (if (seq lista)\n      \n       (recur (inc cuenta)(next (seq lista)))\n       \n\t    cuenta\n\t    )\n  )\n  )", "problem": 22, "user": "50255bafe4b0b0b8afb15aa8"}, {"code": "(fn f [l] (if (empty? l) 0 (+ 1 (f (rest l)))))", "problem": 22, "user": "50352431e4b0a84c1d88f620"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "5029131ae4b0b6c928ad61ff"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "50291679e4b0b6c928ad6200"}, {"code": "(fn x [coll]\n    (reduce + (map (fn [x] 1) coll)));cheated\n\n\n;(fn count-aux [coll n]\n;  (if (nil? (first coll)) n)\n;  \t(count-aux (rest coll) (+ n 1)))\n\n;(fn [coll]\n;  (count-aux coll 0))\n\n;(fn coll-count [coll]\n;  (reduce + (map #(+ 1 %) coll)))", "problem": 22, "user": "5032cf63e4b0e4096af89716"}, {"code": "#(reduce + (map (fn [x] 1) %1))", "problem": 22, "user": "5015d9cfe4b0cd08ed0beb79"}, {"code": "#(reduce + (map (fn[x] 1) %))", "problem": 22, "user": "5035503de4b0ed9c821488f8"}, {"code": "(fn a ([s] (a s 0)) ([s n]\n  (if (empty? s)\n    n\n    (a (rest s) (inc n)))))", "problem": 22, "user": "50361b6be4b0fbe0a74d26be"}, {"code": "(fn cnt [l] (if (= l '()) 0 (inc (cnt (rest l)))))", "problem": 22, "user": "4ddb696b535d02782fcbe9fa"}, {"code": "reduce (fn[x y] (+ x 1)) 0", "problem": 22, "user": "50368595e4b0af0658af779d"}, {"code": "#(last (interleave % (iterate inc 1)))", "problem": 22, "user": "5032a96ae4b0e78df07b0932"}, {"code": "(fn [x] (letfn [\n  (cnt [y, c]\n    (if (empty? y) c (cnt (rest y) (inc c))))]\n  (cnt x 0)))", "problem": 22, "user": "50369122e4b0af0658af779e"}, {"code": "(fn [pal]\n   (reduce + (map (constantly 1) pal))\n )", "problem": 22, "user": "50254e70e4b0b0b8afb15aa7"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "5036dea0e4b0af0658af77a4"}, {"code": "(fn cnt[x] (+ 1 (last (keep-indexed #(if(= %2)%1) x ))))", "problem": 22, "user": "5034b623e4b062bc5d7ae168"}, {"code": "(fn [s] (loop [s s, n 1] (if (next s) (recur (next s) (inc n)) n)))", "problem": 22, "user": "5029399be4b061fd216be4b6"}, {"code": "(fn count-helper \n  ([list cnt]\n    (if (empty? list)\n      cnt\n      (count-helper (rest list) (+ 1 cnt))))\n  ([list]\n    (count-helper list 0)))", "problem": 22, "user": "5038f8d2e4b088a6a14ca75f"}, {"code": "#(reduce + (map (fn [n] 1) %))", "problem": 22, "user": "50390828e4b088a6a14ca762"}, {"code": "#(loop [lst % len 0]\n  (if (empty? lst)\n    len\n    (recur (rest lst) (inc len))))", "problem": 22, "user": "50387196e4b0803468ea2c6e"}, {"code": "#(loop [rst 0 seq %]\n  (if (empty? seq)\n    rst\n    (recur (inc rst) (rest seq))))", "problem": 22, "user": "50399468e4b088a6a14ca768"}, {"code": "(fn f [x] (if (empty? x) 0 (inc (f (rest x)))))", "problem": 22, "user": "503917a0e4b088a6a14ca763"}, {"code": "#(reduce (fn [a b] (inc a)) 0 %)", "problem": 22, "user": "503a234de4b088a6a14ca76d"}, {"code": "(fn [coll]\n  (loop [c coll\n        result 0]\n    (if-not (next c)\n      (inc result)\n      (recur (next c) (inc result)))))", "problem": 22, "user": "4ff695f8e4b0678c553fc380"}, {"code": "(fn count-elements [collection]\n  (if (empty? (seq collection))\n      0\n      (inc (count-elements (rest collection)))))", "problem": 22, "user": "503a5623e4b07a1917cc34d3"}, {"code": "(fn [s]\n  ((fn [s cnt]\n  (if (empty? s)\n    cnt\n  (recur (rest s) (inc cnt))))\n   s 0)\n  )", "problem": 22, "user": "502b4d26e4b0194ad32ea1a0"}, {"code": "#(reduce (fn [x y] (inc x)) 0 %1)", "problem": 22, "user": "50378996e4b0af0658af77ae"}, {"code": "(fn [s]\n  (loop [l s c 0]\n    (if (empty? l) c\n        (recur (rest l) (inc c)))))", "problem": 22, "user": "4f58d92fe4b0a7574ea71858"}, {"code": "#(reduce (fn [l _] (inc l)) 0 %)", "problem": 22, "user": "4edf95a8535d10e5ff6f5342"}, {"code": "reduce (fn [a b] (+ a 1)) 0", "problem": 22, "user": "50295775e4b0b33e9bf6fdf2"}, {"code": "(fn [x] (reduce + (map (fn [y] 1) x)))", "problem": 22, "user": "503b5a64e4b07a1917cc34dc"}, {"code": "#(reduce + (map (fn [x] 1 ) %))", "problem": 22, "user": "502aac6ae4b0614b52996118"}, {"code": "#(reduce + (map (fn [_] 1) %))", "problem": 22, "user": "50392c7ee4b088a6a14ca765"}, {"code": "(fn counter [lst] \n  (if (= lst '()) 0\n      (+ 1 (counter (rest lst)))))", "problem": 22, "user": "503c05fbe4b0fc0f99c2e54f"}, {"code": "(fn len [coll]\n  (reduce + (map (fn n [x] 1) coll)))", "problem": 22, "user": "503bb73de4b07a1917cc34e2"}, {"code": "(fn my-count [xs] (loop [acc 0 xs (seq xs)] (if xs (recur (+ acc 1) (next xs)) acc)))", "problem": 22, "user": "503be1f0e4b0fc0f99c2e549"}, {"code": "#(loop [coll %\n        c 0]\n    (if (nil? (first coll)) c\n        (recur (rest coll) (inc c))))", "problem": 22, "user": "503c21c2e4b0fc0f99c2e551"}, {"code": "(fn anon [x]\n  (if (empty? x) 0 (+ 1 (anon (rest x)))))", "problem": 22, "user": "503cc8cae4b06c4e0e1fa251"}, {"code": "(fn [seq]\n  ((fn [seq n]\n    (if (empty? seq) \n        n\n        (recur (rest seq) (+ n 1)))\n    ) seq 0))", "problem": 22, "user": "503ca47fe4b06c4e0e1fa24f"}, {"code": "reduce (fn [n _] (inc n)) 0", "problem": 22, "user": "503d129fe4b06c4e0e1fa254"}, {"code": "#(apply + (map (fn [x] 1) %))", "problem": 22, "user": "503b6995e4b07a1917cc34dd"}, {"code": "(fn my-count [s] (reduce + (map (constantly 1) s)))", "problem": 22, "user": "5033ed65e4b062bc5d7ae15a"}, {"code": "#(letfn [(seq-iter [a-seq]\n  (if (nil? (first a-seq))\n      0\n      (inc (seq-iter (rest a-seq)))))]\n  (seq-iter %))", "problem": 22, "user": "4e7e8ea5535db169f9c79719"}, {"code": "(fn [seq]\n  (loop [seq seq ans 0]\n    (if (= seq '())\n      ans\n      (recur (rest seq) (+ ans 1)))))", "problem": 22, "user": "4e8bc8d8535d65386fec2125"}, {"code": "(fn [l] (let [c2 (fn [l acc] (if (seq l) (recur (rest l) (+ acc 1)) acc))] (c2 l 0)))", "problem": 22, "user": "503a8959e4b07a1917cc34d6"}, {"code": "#(reduce (fn [s _] (+ s 1)) 0 %)", "problem": 22, "user": "503de5aae4b06c4e0e1fa259"}, {"code": "#(reduce (fn [acc _] (+ acc 1)) 0 %)", "problem": 22, "user": "503dfc11e4b06c4e0e1fa25b"}, {"code": "(fn [x] (last (keep-indexed (fn [i n] (inc i)) x)))", "problem": 22, "user": "4db5708d535d87e67b28fe0c"}, {"code": ";#(reduce (fn [c _] (inc c)) 0 %)\n#(reduce + (map (constantly 1) %))", "problem": 22, "user": "4fceda40e4b03432b189f407"}, {"code": "(fn count-seq [seq]\n  (if (empty? (rest seq))\n    1\n    (+ 1 (count-seq (rest seq)))))", "problem": 22, "user": "503e6047e4b06c4e0e1fa266"}, {"code": "#( reduce (fn [x _] (inc x)) 0 %)", "problem": 22, "user": "503c02e5e4b0fc0f99c2e54e"}, {"code": "(fn [s] (reduce (fn [i x] (+ 1 i)) 0 s))", "problem": 22, "user": "503d812ce4b06c4e0e1fa258"}, {"code": "reduce (fn [c _] (inc c)) 0", "problem": 22, "user": "5036eba7e4b0af0658af77a5"}, {"code": "(fn [col] (loop [lst col n 0] (if (nil? (first lst)) n (recur (rest lst) (inc n)))))", "problem": 22, "user": "5031eb3be4b000fc67a99a84"}, {"code": "(fn [x]\n  (loop [c 0 s x]\n    (if (empty? s) c\n        (recur (inc c) (rest s)))))", "problem": 22, "user": "503ee85ce4b06c4e0e1fa26e"}, {"code": "(fn [s] (reduce (fn [x y] (+ x +1)) 0 s))", "problem": 22, "user": "503e2322e4b06c4e0e1fa25e"}, {"code": "#(reduce (fn [a b] (+ a 1)) 0 %)", "problem": 22, "user": "503f923fe4b00d1a725ff2ad"}, {"code": "(fn len [coll]\n  (loop [coll coll result 0]\n    (if (empty? coll)\n      result\n      (recur (rest coll) (inc result)))))", "problem": 22, "user": "5037f7b0e4b0803468ea2c65"}, {"code": "#(reduce (fn [x y] (+ 1 x)) 0 %)", "problem": 22, "user": "4fab1ea1e4b081705acca210"}, {"code": "(fn !\n        ([coll] (! coll 0))\n        ([coll n] (if (empty? coll)\n                      n\n                    (recur (rest coll) (inc n)))))", "problem": 22, "user": "503be880e4b0fc0f99c2e54a"}, {"code": "(fn cunt [list] \n  (if (empty? list)\n    0\n    (+ 1 (cunt (rest list)))))", "problem": 22, "user": "4fea34bde4b0140c20fb9c00"}, {"code": "#(reduce + (map (fn [_] 1) %))", "problem": 22, "user": "50403ae1e4b0ff5d2cc40dae"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "5040b633e4b0ff5d2cc40db3"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "50410452e4b06d8231e4faca"}, {"code": "(fn f [p]\n  (if (= p (rest p))\n  0\n  (+ (f (rest p)) 1)))", "problem": 22, "user": "50415118e4b06d8231e4face"}, {"code": "#(reduce (fn [x y] (+ 1 x)) 0 %)", "problem": 22, "user": "5041fb43e4b06d8231e4fad1"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "5040edf4e4b0ff5d2cc40db5"}, {"code": "(fn ff [[a & b]]\n  (if b\n    (inc (ff b))\n    1))", "problem": 22, "user": "50427899e4b0add3005c0fc2"}, {"code": "(fn [s] (reduce + (map (constantly 1) s)))", "problem": 22, "user": "5042de0de4b034ff00315d1b"}, {"code": "reduce (fn[c _] (inc c)) 0", "problem": 22, "user": "50431cbce4b034ff00315d1c"}, {"code": "(fn [param] (reduce + (map (fn [y] 1) param )))", "problem": 22, "user": "5043295be4b034ff00315d1d"}, {"code": "#(reduce (fn [c _] (inc c)) 0 %)", "problem": 22, "user": "4e8708e3535dceadca46984e"}, {"code": "#(reduce + (map (constantly 1) %1))", "problem": 22, "user": "5043a536e4b034ff00315d24"}, {"code": "#(reduce (fn [a b] (inc a))  0 %)", "problem": 22, "user": "503ea917e4b06c4e0e1fa26b"}, {"code": "(fn [col] (reduce (fn [x y] (inc x)) 0 col))", "problem": 22, "user": "4fd81472e4b0dab7d829f38e"}, {"code": "(fn [coll] (reduce (fn [a b] (inc a)) 0 coll))", "problem": 22, "user": "4fb266a5e4b081705acca28c"}, {"code": "(fn [l]\n  (loop [l l\n          n 0]\n    (if (= l '())\n      n\n      (recur (rest l) (+ 1 n)))))", "problem": 22, "user": "50435852e4b034ff00315d22"}, {"code": "(fn [coll] \n  (loop [c 0 col coll]\n    (if (empty? col)\n        c\n        (recur (inc c) (rest col)))))", "problem": 22, "user": "50435689e4b034ff00315d21"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "50436470e4b034ff00315d23"}, {"code": "(fn [coll]\n    (let [f (fn [coll acc]\n      (if (empty? coll) acc (recur (rest coll) (inc acc))))]\n      (f coll 0)))", "problem": 22, "user": "4ff3df0fe4b0678c553fc355"}, {"code": "#(.size (vec %))", "problem": 22, "user": "4db0114d838c48654951d9b8"}, {"code": "#(reduce (fn [a b] (inc a)) 0 (seq %))", "problem": 22, "user": "5008d149e4b0144d4f561e41"}, {"code": "#(reduce + (map (fn[n] 1)%))", "problem": 22, "user": "50432da5e4b034ff00315d1e"}, {"code": "(fn cnt [v] (if (seq v) (+ 1 (cnt (rest v))) 0))", "problem": 22, "user": "5034374de4b062bc5d7ae161"}, {"code": "(fn [x]\n  (reduce + (map (fn [_] 1) x)))", "problem": 22, "user": "50458888e4b01f6c9a8b236d"}, {"code": "#(loop [lst % n 0]\n  (if (empty? lst)\n   n\n   (recur (rest lst) (inc n))))", "problem": 22, "user": "50456731e4b01f6c9a8b236b"}, {"code": "(fn [seq]\n  (loop [seqp seq acc 0]\n    (if (empty? seqp)\n      acc\n      (recur (rest seqp) (+ 1 acc)))))", "problem": 22, "user": "4fceef7ae4b03432b189f40a"}, {"code": "reduce (fn [a,b] (inc a)) 0", "problem": 22, "user": "503bcacce4b07a1917cc34e4"}, {"code": "; this will induce a 'wtf' or two...\n(fn f [coll]\n  (let [g (fn g [coll cnt]\n                (if (empty? coll) cnt (g (rest coll) (inc cnt))))]\n  (g coll 0)))", "problem": 22, "user": "50464831e4b011c5dfee771f"}, {"code": "(fn[x] (alength (into-array x)) )", "problem": 22, "user": "50466eb7e4b011c5dfee7722"}, {"code": "reduce (fn [a b] (+ a 1)) 0", "problem": 22, "user": "5046b003e4b011c5dfee7727"}, {"code": "reduce (fn [c _] (inc c)) 0", "problem": 22, "user": "5041b3c0e4b06d8231e4facf"}, {"code": "#(loop [col % cnt 0] (if (empty? col) cnt (recur (rest col)(inc cnt))))", "problem": 22, "user": "50463347e4b011c5dfee771e"}, {"code": "#(loop [sequ %1, result 0]\n  (if (= (next sequ) nil)\n    (inc result)\n    (recur (next sequ) (inc result))\n  )\n )", "problem": 22, "user": "4fa7de4ce4b081705acca1c9"}, {"code": "(fn countelements [seq]\n  (if (empty? seq)\n    0\n    (+ 1 (countelements (rest seq)))))", "problem": 22, "user": "50293b68e4b061fd216be4b7"}, {"code": "(fn [lst] (reduce + (map (fn [x] 1) lst)))", "problem": 22, "user": "504766fde4b0371827a27bc1"}, {"code": "#(cond\n   (nil? %) 0\n   (instance? java.util.Map %)          (.size ^java.util.Map %)\n   (instance? java.util.Collection %)   (.size ^java.util.Collection %)\n   (instance? java.lang.CharSequence %) (.length ^java.lang.CharSequence %))", "problem": 22, "user": "50479524e4b0371827a27bc4"}, {"code": "(fn [s] \n  (loop [ss s n 0] \n    (if (empty? ss) n (recur (next ss) (inc n)))))", "problem": 22, "user": "503e7f06e4b06c4e0e1fa268"}, {"code": "(fn [c] (apply + (map (fn [_] 1) c)))", "problem": 22, "user": "5047c0cde4b0ec70b3ef8d91"}, {"code": "(fn [s]\n  (reduce + (map (fn [x] 1) s)))", "problem": 22, "user": "504545bae4b01f6c9a8b2369"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "50471d36e4b03b02161376b6"}, {"code": "(fn [s] (reduce (fn [x y] (+ x 1)) 0 s))", "problem": 22, "user": "50481532e4b0ec70b3ef8d96"}, {"code": "#(reduce (fn [a b] (+ 1 a)) 0 %1)", "problem": 22, "user": "504820c8e4b0ec70b3ef8d9b"}, {"code": "(fn [s] \n  (loop [se s sum 0]\n    (if (empty? se)\n         sum\n        (recur (rest se) (+ 1 sum)))))", "problem": 22, "user": "5048202fe4b0ec70b3ef8d9a"}, {"code": "(fn [s] (reduce + (map (constantly 1) s)))", "problem": 22, "user": "50481b70e4b0ec70b3ef8d98"}, {"code": "reduce (fn [x, y] (+ x 1)) 0", "problem": 22, "user": "504663bbe4b011c5dfee7721"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "50487817e4b0ec70b3ef8d9d"}, {"code": "(fn [x]\n  (loop [lst x n 0] \n    (if (= lst []) n \n    (recur (rest lst) (inc n)))))", "problem": 22, "user": "5047bbd1e4b0ec70b3ef8d90"}, {"code": "#(loop [i 0 x %](if (empty? x) i (recur (inc i) (rest x))))", "problem": 22, "user": "4f902831e4b0dcca54ed6c8b"}, {"code": "(fn [x] (reduce (fn [a b] (+ 1 a)) 0 x))", "problem": 22, "user": "501ffbb1e4b0cb6ebc0a42f2"}, {"code": "#(+ (first (last  (map list (range) %))) 1)", "problem": 22, "user": "5045ac21e4b01f6c9a8b2371"}, {"code": "#( loop [sum 0 source %] ( if (= () source) sum (recur (inc sum) (rest source))))", "problem": 22, "user": "5042cb29e4b034ff00315d18"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "504457c0e4b01f6c9a8b2360"}, {"code": "(fn value-count [my-list]\n  (if (= my-list '()) 0\n      (+ (value-count (rest my-list)) 1)))", "problem": 22, "user": "5046f909e4b03b02161376b5"}, {"code": "reduce (fn [cnt elem] (inc cnt)) 0", "problem": 22, "user": "5048f98ee4b06e644c63f1af"}, {"code": "(fn [x] (reduce (fn [i j] (+ i 1)) 0 x))", "problem": 22, "user": "4f616892e4b0defedf855fbf"}, {"code": "reduce (fn [c _] (inc c)) 0", "problem": 22, "user": "4fc40f86e4b081705acca345"}, {"code": "reduce (fn [x _] (inc x)) 0", "problem": 22, "user": "4f702dcae4b07046d9f4eff4"}, {"code": "#(+ 0  \r\n  (loop [seq % current 0]\r\n      (if (nil? (first seq))\r\n        current\r\n        (recur (rest seq) (inc current))\r\n      )\r\n  )\r\n )", "problem": 22, "user": "502ea7c6e4b078f26332e749"}, {"code": "(letfn [(mc [n coll]\n  (if (empty? coll) n (recur (inc n) (next coll)) ))]\n  (partial mc 0))", "problem": 22, "user": "504d0116e4b022602c20b089"}, {"code": "reduce (fn [x y] (inc x)) 0", "problem": 22, "user": "5048bcf8e4b06e644c63f1ae"}, {"code": "(fn [coll] \n  (loop [coll coll, acc 0]\n    (if (empty? coll)\n      acc\n      (recur (next coll) (+ 1 acc)))))", "problem": 22, "user": "502b04bee4b063e52107afac"}, {"code": "(fn [coll]\n           ((fn [coll n]\n                (case (rest coll)\n                  '() n\n                  (recur (rest coll) (+ n 1)))) coll 1))", "problem": 22, "user": "504ac372e4b0b12125b92627"}, {"code": "(fn [col]\n  (reduce + (map (fn [_] 1) col)))", "problem": 22, "user": "4db2cc55535df7e46ed9b6c5"}, {"code": "(fn [xs]\n  (reduce + 0 (map (fn [_] 1) xs)))", "problem": 22, "user": "504e04a4e4b078edc5f59397"}, {"code": "(fn [xs] (reduce (fn [c _] (inc c)) 0 xs))", "problem": 22, "user": "504df657e4b078edc5f59384"}, {"code": "#(reduce (fn [c _] (inc c)) 0 %)", "problem": 22, "user": "504e13fce4b078edc5f593bc"}, {"code": "#(inc (.lastIndexOf (seq %) (last %)))", "problem": 22, "user": "504e1abee4b0f6ff3350c45d"}, {"code": "(fn counter [xs] (if (empty? xs) 0 (+ 1 (counter (rest xs)))))", "problem": 22, "user": "504e2600e4b0f6ff3350c46f"}, {"code": "(fn [xs] (reduce (fn [accum x] (inc accum)) 0 xs))", "problem": 22, "user": "504e2a3fe4b0f6ff3350c477"}, {"code": "(fn hey [ls]\n  (if (empty? ls)\n    0\n    (+ 1 (hey (rest ls)))))", "problem": 22, "user": "504e2f89e4b0f6ff3350c47d"}, {"code": "(fn [s] (\n  (fn [s2 n]\n    (if (empty? s2) \n      n \n      (recur (rest s2) (+ n 1)))\n    ) s 0))", "problem": 22, "user": "504e31c7e4b0f6ff3350c480"}, {"code": "(fn c [l]\n  (if (empty? l) 0 (+ 1 (c (rest l)))))", "problem": 22, "user": "504e3897e4b0f6ff3350c483"}, {"code": "(fn cnt [x]\n  (if (not (first x))\n    0\n    (+ (cnt (rest x)) 1)))", "problem": 22, "user": "504e2f98e4b0f6ff3350c47e"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "504e1fdde4b0f6ff3350c468"}, {"code": "(fn [l] (reduce (fn [i _] (inc i)) 0 l))", "problem": 22, "user": "504e108ce4b078edc5f593b3"}, {"code": "#(.size (seq %))", "problem": 22, "user": "504e397ee4b0f6ff3350c485"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4ffda838e4b0678c553fc3e5"}, {"code": "(fn len [s]\n  (cond\n    (empty? s) 0\n    :else (+ 1 (len (rest s)))))", "problem": 22, "user": "504e48ace4b0f6ff3350c498"}, {"code": "(fn mycount [seq] \n  (if (empty? seq) 0\n    (+ 1 (mycount (rest seq)))))", "problem": 22, "user": "504e48f3e4b0f6ff3350c499"}, {"code": "(fn cnt [ls]\n  (if (empty? ls)\n    0\n    (+ 1 (cnt (rest ls)))))", "problem": 22, "user": "4ff769bce4b0678c553fc38f"}, {"code": "(fn [s] (reduce (fn [total, val] (+ 1 total)) 0 s))", "problem": 22, "user": "504e5e8de4b0f6ff3350c4a8"}, {"code": "(fn n [l] (if (= (rest l) '()) (int 1) (+ (int 1) (n (rest l)))))", "problem": 22, "user": "504e5989e4b0f6ff3350c4a4"}, {"code": "(fn [x]\n  (reduce + (map (fn [x] 1) x)))", "problem": 22, "user": "504e3f22e4b0f6ff3350c48e"}, {"code": "(fn [l] (reduce + (map (fn [x] 1) l)))", "problem": 22, "user": "504e127fe4b078edc5f593b6"}, {"code": "(fn [x] (alength (to-array x)))", "problem": 22, "user": "504e685fe4b0f6ff3350c4ae"}, {"code": "#(reduce + 0 (map (constantly 1) %))", "problem": 22, "user": "504e14c2e4b078edc5f593bf"}, {"code": "(fn cnt [xs]\n  (if (first xs)\n  (inc (cnt (rest xs)))\n  0))", "problem": 22, "user": "504e26b9e4b0f6ff3350c472"}, {"code": "(fn [coll] (loop [coll coll x 0] (if (empty? coll) x (recur (rest coll) (inc x)))))", "problem": 22, "user": "504e2333e4b0f6ff3350c46c"}, {"code": "#(reduce + (map (fn [_] 1) %))", "problem": 22, "user": "504e2011e4b0f6ff3350c469"}, {"code": "(fn [coll]\n  (loop [c coll n 0]\n    (if (empty? c) n (recur (rest c) (inc n)))))", "problem": 22, "user": "504e8e8ce4b069badc5a33b4"}, {"code": "(fn [s] (reduce (fn [a _] (inc a)) 0 (seq s)))", "problem": 22, "user": "504e0d50e4b078edc5f593aa"}, {"code": "(fn temp [l]\n  (if (empty? l)\n      0\n      (+ 1 (temp (rest l)))))", "problem": 22, "user": "504e3afae4b0f6ff3350c488"}, {"code": "#(reduce (fn [memo _] (inc memo)) 0 %)", "problem": 22, "user": "504eb604e4b069badc5a33c4"}, {"code": "(fn [coll]\n  (reduce #(+ %1 %2) (map (fn [e] 1) coll)))", "problem": 22, "user": "504ec46de4b069badc5a33c8"}, {"code": "reduce (fn [n _] (inc n)) 0", "problem": 22, "user": "504e9f5ce4b069badc5a33bd"}, {"code": "(fn cnt [lst] (if (empty? lst) 0 (+ 1 (cnt (rest lst)))))", "problem": 22, "user": "504ed58ce4b069badc5a33d2"}, {"code": "#(apply + (map (constantly 1) %))", "problem": 22, "user": "504ed350e4b069badc5a33d1"}, {"code": "(fn[xs] (apply + (map (fn[_] 1) xs)))", "problem": 22, "user": "504e0834e4b078edc5f593a5"}, {"code": "#(.size (vec %))", "problem": 22, "user": "504ece87e4b069badc5a33ce"}, {"code": "#(reduce (fn [x y] (inc x)) 0 %)", "problem": 22, "user": "504ed16de4b069badc5a33cf"}, {"code": "(fn [x] (reduce (fn [a b] (+ a 1)) 0 (seq x)))", "problem": 22, "user": "504e3aaae4b0f6ff3350c487"}, {"code": "(fn countt [lst] (if (= lst '()) \n                      0\n                      (+ (countt (rest lst)) 1)))", "problem": 22, "user": "504e14dde4b078edc5f593c0"}, {"code": "(fn [coll]\n  (reduce + (map (fn [x] 1) coll)))", "problem": 22, "user": "504eed01e4b0e7ad84dbc4a5"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "504dff92e4b078edc5f5938a"}, {"code": "#(reduce + (map ( fn [x] 1) % ))", "problem": 22, "user": "504eff22e4b0e7ad84dbc4a9"}, {"code": "#(loop[col % cnt 0] \n  (if (seq col)\n    (recur (rest col) (inc cnt))\n    cnt\n  ))", "problem": 22, "user": "504f0c08e4b0e7ad84dbc4b1"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "504f2d4fe4b0e7ad84dbc4c6"}, {"code": "(fn my-count [xs]\n  (if (empty? xs)\n    0\n    (+ 1 (my-count (rest xs)))))", "problem": 22, "user": "504f3a85e4b0a02f9cffde5c"}, {"code": "(fn [x]\n  (\n\n    (fn g [y n] \n    \t(if (= () (rest y)) \n          \t(+ n 1)\n          \t(g (rest y) (+ n 1))\n         )\n    )\n\n     x 0)\n)", "problem": 22, "user": "504efb61e4b0e7ad84dbc4a8"}, {"code": "(fn [s]\n  (reduce + (map (constantly 1) s)))", "problem": 22, "user": "504f44cfe4b0a02f9cffde65"}, {"code": "(fn ddd [x] (\n    if (empty? x) \n      0\n      (+ 1 (ddd (rest x)))\n))", "problem": 22, "user": "504f3aede4b0a02f9cffde5d"}, {"code": "(fn [seq]\n  ((fn [n s]\n      (if s\n        (recur (+ n 1) (next s))\n        n))\n    0 seq))", "problem": 22, "user": "504f2071e4b0e7ad84dbc4be"}, {"code": "(fn my-count\n  ([xs] (my-count xs 0))\n  ([xs cnt] \n    (if (nil? (first xs))\n        cnt\n       (my-count (rest xs) (inc cnt)))))", "problem": 22, "user": "504f5804e4b0a02f9cffde72"}, {"code": "(fn [coll] \n  (reduce \n    (fn [sum x] (+ sum 1))\n     0\n     coll))", "problem": 22, "user": "504f6721e4b0a02f9cffde7f"}, {"code": "(fn mycount [x] (if (first x) (+ 1 (mycount (rest x))) 0))", "problem": 22, "user": "504e1c76e4b0f6ff3350c464"}, {"code": "(fn [x] (reduce + (map (fn [_] 1) x)))", "problem": 22, "user": "504f6adfe4b0a02f9cffde81"}, {"code": "(fn [rest] (reduce (fn [a b] (inc a )) 0 (seq rest)))", "problem": 22, "user": "4fc5a693e4b0ee37620e17fc"}, {"code": "(fn countMe [coll]\n  (if(next coll)\n    (+ 1 (countMe(next coll)))\n    1\n  )\n)", "problem": 22, "user": "504f3fa3e4b0a02f9cffde62"}, {"code": "(fn altCt [lst] (reduce + (map (fn [x] 1) (list* lst))))", "problem": 22, "user": "504f43e9e4b0a02f9cffde64"}, {"code": "(fn [init-lst]\n  (loop [c 0, lst init-lst]\n    (if (empty? lst)\n      c\n      (recur (inc c) (rest lst)))))", "problem": 22, "user": "504e9011e4b069badc5a33b7"}, {"code": "(fn rc ([c] (rc c 0))([c n] (if (empty? c) n (rc (rest c) (+ n 1)))))", "problem": 22, "user": "504e058de4b078edc5f5939b"}, {"code": "(fn [l] (reduce (fn [x y] (inc x)) 0 l))", "problem": 22, "user": "504e7b88e4b069badc5a33ad"}, {"code": "(fn ccc [l] (if (empty? l ) 0 (+ (ccc (rest l)) 1)))", "problem": 22, "user": "504ffa26e4b0a02f9cffdead"}, {"code": "(fn [a]\n  (loop [b a, n 0]\n    (if (empty? b)\n      ; then\n      n\n      ; else\n      (recur (rest b) (inc n))\n      ) ; if\n    ) ; loop\n  ) ; fn", "problem": 22, "user": "504e4ac2e4b0f6ff3350c49a"}, {"code": "(fn coun [l]\n  (if (empty? l)\n      0\n      (+ 1 (coun (rest l)))))", "problem": 22, "user": "505024a4e4b0a02f9cffdeb4"}, {"code": "#(.size (vec %))", "problem": 22, "user": "504f0b81e4b0e7ad84dbc4b0"}, {"code": "#(apply + (map (fn [_] 1) %))", "problem": 22, "user": "4e8239d6535db62dc21a62c4"}, {"code": "(fn [in] (reduce (fn [x y] (+ x 1)) 0 (concat in)))", "problem": 22, "user": "504f0036e4b0e7ad84dbc4aa"}, {"code": "#(reduce (fn [a b] (inc a)) 0 %)", "problem": 22, "user": "504e15a8e4b078edc5f593c1"}, {"code": "reduce (fn [a x] (+ a 1)) 0", "problem": 22, "user": "504f3f13e4b0a02f9cffde60"}, {"code": "(fn [coll] (reduce (fn [c _] (inc c)) 0 coll))", "problem": 22, "user": "504f90f5e4b0a02f9cffde99"}, {"code": "(fn [in]\n  (reduce (fn [c _] (inc c)) 0  in))", "problem": 22, "user": "504f9ae1e4b0a02f9cffde9c"}, {"code": "#(last (map (fn [x y] y) % (iterate inc 1)))", "problem": 22, "user": "503dea56e4b06c4e0e1fa25a"}, {"code": "(fn [x]\n  (#(if (empty? %1) %2 (recur (rest %1) (inc %2))) x 0))", "problem": 22, "user": "504f191ae4b0e7ad84dbc4ba"}, {"code": "(fn [a] (reduce + (map (fn [z] 1) a)))", "problem": 22, "user": "5050b107e4b063148f524126"}, {"code": "(fn [xs] (reduce + (map (fn [x] 1) xs)))", "problem": 22, "user": "504f87e0e4b0a02f9cffde91"}, {"code": "(fn [alist] (reduce (fn [total value] (+ 1 total)) 0 alist))", "problem": 22, "user": "504e1ddae4b0f6ff3350c466"}, {"code": "(fn [xs]\r\n  (let [f34 (fn [xs c]\r\n              (if (seq xs) \r\n                (recur (rest xs) (inc c))\r\n                c))]\r\n    (f34 xs 0)))", "problem": 22, "user": "4dd59d8b535dae65d5c462eb"}, {"code": "#(apply + (map (constantly 1) %))", "problem": 22, "user": "4ebad797535dfed6da9c6d6a"}, {"code": "(fn len [xs] (if (empty? xs) 0 (inc (len (rest xs)))))", "problem": 22, "user": "504f865ee4b0a02f9cffde90"}, {"code": "#(.length (vec %))", "problem": 22, "user": "50517ebfe4b0a561d07d8f06"}, {"code": "(fn [coll]\n  (reduce (fn [c _] (inc c)) 0 coll))", "problem": 22, "user": "504f2efae4b0e7ad84dbc4c9"}, {"code": "#(loop [col %\n       ctr 0]\n  (if (empty? col) ctr (recur (next col) (inc ctr))))", "problem": 22, "user": "50385746e4b0803468ea2c6d"}, {"code": "(fn a [x] (if (empty? x) 0 (+ 1 (a (rest x)))))", "problem": 22, "user": "4f05872b535dcb61093f6bf8"}, {"code": "#(reduce + (map (fn [x] 1) %) )", "problem": 22, "user": "504f65bae4b0a02f9cffde7e"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "505223e4e4b0a561d07d8f16"}, {"code": "#(reduce (fn [x y] (+ x 1)) 0 %)", "problem": 22, "user": "4fda108ee4b05e33b9224f46"}, {"code": "#(reduce (fn [acc _] (+ acc 1)) 0 %)", "problem": 22, "user": "504c8165e4b09724c857af31"}, {"code": "(fn self [xs]\n  (if (empty? xs)\n     0\n    (+ 1 (self (rest xs)))))", "problem": 22, "user": "5052f384e4b0a561d07d8f25"}, {"code": "(fn f [list] (\n  cond\n    (= () list) 0\n    :else (+ 1 (f (rest list)))\n  ))", "problem": 22, "user": "5051ed55e4b0a561d07d8f0e"}, {"code": "reduce (fn [sum obj] (inc sum)) 0", "problem": 22, "user": "5051c99ce4b0a561d07d8f09"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "5052ab7ee4b0a561d07d8f20"}, {"code": "reduce (fn [acc b] (inc acc)) 0", "problem": 22, "user": "5051e2c0e4b0a561d07d8f0b"}, {"code": "(fn [seq]\n  (reduce (fn [n x] (+ 1 n)) 0 seq))", "problem": 22, "user": "4ff24a1ae4b0678c553fc337"}, {"code": "(fn adam\n  ([col] (adam 0 col))\n\t([n col]\n\t\t(if (empty? col) \n\t\t\tn\n\t\t\t(recur (inc n) (rest col)))))", "problem": 22, "user": "504e6165e4b0f6ff3350c4aa"}, {"code": "(fn c[x]\n  (if (= x [])\n    (+ 0 0)\n    (+ 1 (c (rest x)))\n  )\n)", "problem": 22, "user": "50512f61e4b0b30bd8f4f83f"}, {"code": "(fn tf[tl] (cond (= tl ()) 0 (next tl) (+ 1 (tf (next tl))) :else 1))", "problem": 22, "user": "50462089e4b011c5dfee771b"}, {"code": "reduce #(inc (first %&)) 0", "problem": 22, "user": "50548ce8e4b0b1b9d1860ead"}, {"code": "(fn f [s]\n  (if (empty? s)\n      0\n      (+ 1 (f (rest s)))))", "problem": 22, "user": "5054c7e1e4b0b1b9d1860eb2"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "5054c853e4b0b1b9d1860eb3"}, {"code": "(fn f [x] (if (empty? (rest x)) 1 (inc (f (rest x)))))", "problem": 22, "user": "503ff621e4b0c9bf6384b00f"}, {"code": "(fn [x]\n  ((fn [y i]\n    (if (empty? y)\n        i\n        (recur (rest y) (inc i)))) x 0))", "problem": 22, "user": "5053de37e4b0b1b9d1860ea8"}, {"code": "#(loop [coll % cnt 0]\n  (if (empty? coll)\n    cnt\n  (recur (next coll) (inc cnt))))", "problem": 22, "user": "50551526e4b0b1b9d1860eb9"}, {"code": "(fn [xs] ((fn cnt [xs n] (if (= '() xs) n (cnt (rest xs) (+ n 1)))) xs 0))", "problem": 22, "user": "50553322e4b0ce54f56f03f8"}, {"code": "(fn [s]\n  (loop [s s n 0]\n    (if (empty? s)\n        n\n        (recur (rest s) (+ n 1)))))", "problem": 22, "user": "50555c06e4b0ce54f56f03fa"}, {"code": "(fn [lst]\n  (reduce (fn [x _] (inc x)) 0 lst))", "problem": 22, "user": "5055899de4b0ce54f56f03fd"}, {"code": "(fn [seq] (reduce + (map (fn [x] 1) seq)))", "problem": 22, "user": "50522807e4b0a561d07d8f18"}, {"code": "#(loop [lst %, n 0]\n  (if (empty? lst) n\n    (recur (rest lst) (inc n))))", "problem": 22, "user": "504f57c7e4b0a02f9cffde71"}, {"code": "(fn cnt\n  ([l]\n     (cnt l 0))\n  ([l n]\n     (if (nil? (first l))\n       n\n       (cnt (rest l) (inc n)))))", "problem": 22, "user": "504ec4d3e4b069badc5a33c9"}, {"code": "(fn cnt ([lst n]\n  (if (empty? lst) n (recur (rest lst) (inc n))))\n([lst] (cnt lst 0)))", "problem": 22, "user": "50563ae2e4b0ce54f56f0405"}, {"code": "(fn conta [seq] (if (empty? seq) 0 (+ 1 (conta (rest seq)))))", "problem": 22, "user": "50506dcce4b0a02f9cffdebc"}, {"code": "#(reduce (fn [m i] (+ m 1)) 0 %)", "problem": 22, "user": "5057242fe4b0012181721986"}, {"code": "(fn [x] (reduce + (map (fn [i] 1) x)))", "problem": 22, "user": "50523848e4b0a561d07d8f1a"}, {"code": "#(reduce + (map (constantly 1) % ))", "problem": 22, "user": "504e4035e4b0f6ff3350c490"}, {"code": "(fn [coll]\n  ((fn [coll n]\n    (if (empty? coll)\n      n\n      (recur (next coll) (inc n)))) coll 0))", "problem": 22, "user": "5041bdf3e4b06d8231e4fad0"}, {"code": "(partial (fn [n xs] (if (seq xs) (recur (+ n 1 ) (rest xs)) n)) 0)", "problem": 22, "user": "50580b7ae4b06522596eba74"}, {"code": "(fn self\n  ([xs]\n    (self xs 0))\n  ([xs n]\n    (if (empty? xs) n\n      (self (rest xs) (inc n)))))", "problem": 22, "user": "5058493ae4b06522596eba75"}, {"code": "#(reduce (fn [acc _] (+ acc 1)) 0 %)", "problem": 22, "user": "50586354e4b06522596eba78"}, {"code": "(fn counting\n  ([array] (counting array 0))\n  ([array acc]\n    (if (empty? array)\n      acc\n      (counting (rest array) (inc acc)))))", "problem": 22, "user": "502bbb59e4b0194ad32ea1a4"}, {"code": "(fn a [x] \n  (if (= () x)\n  0\n  (+ 1 (a (rest x)))))", "problem": 22, "user": "504e8e48e4b069badc5a33b3"}, {"code": "(fn [x]\n  (loop [input-list x\n         n 0]\n    (if (nil? (first input-list))\n      n\n      (recur (rest input-list) (inc n)))))", "problem": 22, "user": "4f9aa97ae4b0dcca54ed6d0e"}, {"code": "(fn [l] \n    (letfn [ (contar [l] (contar-aux l 0))\n            (contar-aux [l c] (if(= '() l) c (contar-aux (rest l) (inc c))))]\n    (contar l)\n    )\n)", "problem": 22, "user": "5058afbbe4b06522596eba81"}, {"code": "#(apply + (map (fn [x] 1) %))", "problem": 22, "user": "4fd6e70fe4b0dab7d829f379"}, {"code": "reduce (fn [i x] (+ 1 i)) 0", "problem": 22, "user": "50589113e4b06522596eba7f"}, {"code": "(fn [seq]\n  (loop [c 0 seq seq]\n    (if (empty? seq)\n        c\n        (recur (+ c 1) (rest seq)))))", "problem": 22, "user": "503c99a1e4b06c4e0e1fa24c"}, {"code": "#(.size (vec %))", "problem": 22, "user": "4f55f4b1e4b0a7574ea7180d"}, {"code": "(fn c [l] (if (seq l) (+ 1 (c (rest l))) 0))", "problem": 22, "user": "505885c4e4b06522596eba7b"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "50493b52e4b06e84b772a23e"}, {"code": "reduce (fn[_ c] (inc _)) 0", "problem": 22, "user": "4fc6e1a8e4b0ee37620e181d"}, {"code": "#(loop [seq %1 c 0]\n  (if (empty? seq)\n    c\n    (recur (rest seq) (inc c))))", "problem": 22, "user": "505a2f3be4b03d2efce48c5b"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "505aa653e4b021387fb89857"}, {"code": "(fn [x] (reduce (fn [cnt item] (inc cnt)) 0 x))", "problem": 22, "user": "505a0a15e4b03d2efce48c5a"}, {"code": "(fn [coll]\n  (reduce (fn [n _] (inc n)) 0 coll))", "problem": 22, "user": "505bd09fe4b032b709c81373"}, {"code": "(fn cow [x]\n  (reduce + (map (fn [y] 1) x)))", "problem": 22, "user": "50588af1e4b06522596eba7d"}, {"code": "(fn [x]\n  (reduce + \n    (map (fn [x] 1) x)\n))", "problem": 22, "user": "504e90bae4b069badc5a33b8"}, {"code": "#(-> % vec .length)", "problem": 22, "user": "5054bc87e4b0b1b9d1860eb0"}, {"code": "(fn [[n & s]]\n         (loop [x 0 s s]\n           (if (empty? s)\n             (inc x)\n           (recur (inc x) (rest s)))))", "problem": 22, "user": "50521b1fe4b0a561d07d8f14"}, {"code": "(fn [x] (reduce (fn [v1 v2] (inc v1)) 0 x))", "problem": 22, "user": "505caadfe4b0bcb5664c3d3e"}, {"code": "(fn foo [list & [cnt]]\n  (if (= nil cnt)\n      (foo list 0)\n    (if (= [] list)\n        cnt\n      (foo (rest list) (+ 1 cnt)))))", "problem": 22, "user": "505cc50ce4b0e6aca564be00"}, {"code": "#(reduce + (map (fn [e] 1) %))", "problem": 22, "user": "505b9084e4b032b709c81371"}, {"code": "#(reduce (fn [t _] (inc t)) 0 %)", "problem": 22, "user": "50588ff1e4b06522596eba7e"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "505d26aee4b0e6aca564be05"}, {"code": "(fn my-count [coll]\n  (loop [coll coll c 0]\n    (if (nil? coll)\n      c\n      (recur (next coll) (inc c)))))", "problem": 22, "user": "4fd769a1e4b0dab7d829f382"}, {"code": "(fn cnt\n  ([arr] (cnt arr 0))\n  ([arr i] (if (empty? arr) i (cnt (rest arr) (inc i))))\n  )", "problem": 22, "user": "505d4b21e4b0e6aca564be07"}, {"code": "(fn len [xs] (if (empty? xs) 0 (+ 1 (len (rest xs)))))", "problem": 22, "user": "5055e7f4e4b0ce54f56f0401"}, {"code": "(fn countem [elements] (if (empty? elements) 0 (+ 1 (countem (rest elements)))))", "problem": 22, "user": "505dee52e4b0b06147a37273"}, {"code": "(fn [seq]\n  (reduce (fn [sum el] (+ sum 1)) 0 seq))", "problem": 22, "user": "505e2f6ce4b011187b721f38"}, {"code": "(fn mycount [coll]\n  (loop [sub coll size 0]\n    (if (empty? sub)\n      size\n      (recur (rest sub) (inc size))\n    )))", "problem": 22, "user": "505acd20e4b021387fb8985a"}, {"code": "(fn [s]\n   (loop [s1 s acc 0]\n     (if (empty? s1)\n       acc\n       (recur (rest s1) (+ acc 1)))))", "problem": 22, "user": "4f046d70535dcb61093f6bc5"}, {"code": "(fn [y] (reduce + (map (fn [x] 1) y)))", "problem": 22, "user": "503efe01e4b06c4e0e1fa26f"}, {"code": "(fn my-count [item]\n    ((fn my-n-count [item n] (if (nil? item) n (my-n-count (next item) (inc n)))) \n        item 0))", "problem": 22, "user": "505f1305e4b08f2a82ad10ac"}, {"code": "(fn count_recursive [sq]\n  (if (seq sq)\n      (+ 1 (count_recursive (rest sq)))\n      0))", "problem": 22, "user": "505f55d3e4b08f2a82ad10b0"}, {"code": "(fn mycnt [x]\r\n  \"Counts the elems in x.\"\r\n    (loop [x x\r\n            cnt 0]\r\n      (if (empty? x)\r\n        cnt\r\n        (recur (next x) (inc cnt)))))", "problem": 22, "user": "4eb47bb1535d7eef30807362"}, {"code": "#(if (empty? (rest %)) \r\n  1\r\n  (loop [myset % \r\n        mycount 1]\r\n  (if-not (empty? (rest myset))\r\n    (recur (rest myset) (inc mycount))\r\n    mycount)\r\n  )\r\n)", "problem": 22, "user": "505f55b5e4b08f2a82ad10af"}, {"code": "#((fn blah [l c] (if (first l) (blah (rest l) (+ c 1)) c)) % 0)", "problem": 22, "user": "505f5d8ae4b08f2a82ad10b1"}, {"code": "#(apply + (map (fn [x] 1) %))", "problem": 22, "user": "505fc8e3e4b08f2a82ad10b6"}, {"code": "(fn length [x]\n  (loop [s x i 0]\n    (if (nil? (first s))\n      i\n      (recur (rest s) (inc i)))))", "problem": 22, "user": "50602bc6e4b08f2a82ad10ba"}, {"code": "#(loop [sq % cnt 0]\n    (if (empty? sq)\n        cnt\n        (recur (rest sq) (inc cnt))))", "problem": 22, "user": "50310b8be4b05b7df5a0b84d"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "50604918e4b08f2a82ad10bb"}, {"code": "reduce (fn [a _] (inc a)) 0", "problem": 22, "user": "505f5e2fe4b08f2a82ad10b2"}, {"code": "(fn [lista] (\n             letfn [(contar [lista cantidad] (if (empty? (rest lista)) (+ cantidad 1) (contar (rest lista) (+ cantidad 1)))  )]\n             (contar lista 0)\n             \n             ))", "problem": 22, "user": "505cdcb7e4b0e6aca564be03"}, {"code": "(fn f [s] (if (empty? s) 0 (inc (f (rest s)))))", "problem": 22, "user": "5060c26be4b024449d699b5e"}, {"code": "(fn [sq]\n  (apply + (map (fn [x] 1) sq)))", "problem": 22, "user": "5060d137e4b0dc10a69545a0"}, {"code": "(fn [coll]\n  (loop [[h & r] coll, n 1]\n    (if (nil? r)\n      n\n      (recur r (inc n)))))", "problem": 22, "user": "504e72cee4b0f6ff3350c4b4"}, {"code": "(fn [xs]\n   (loop [xs xs i 0]\n   (if \n     (empty? xs) i\n     (recur (rest xs) (inc i))\n   )))", "problem": 22, "user": "50618c62e4b0a30dc9a35d33"}, {"code": "(fn [full-list]\n  (loop [l full-list\n         counter 0]\n  (if-not (seq l)\n        counter\n    (recur (rest l) (inc counter) ))\n    ))", "problem": 22, "user": "4f8c4ee8e4b02e764a0a5194"}, {"code": "#(reduce\n  (fn [accu v] (+ accu 1)) 0 %)", "problem": 22, "user": "5061fc2de4b0341461c88950"}, {"code": "(fn [xs]\n  (reduce (fn [a b] (+ a 1)) 0 xs))", "problem": 22, "user": "50611456e4b0dc10a69545a5"}, {"code": "#(reduce (fn [x y] (+ x 1)) 0 %)", "problem": 22, "user": "50608d4ce4b07251188e4455"}, {"code": "(fn [s] (apply + (map (constantly 1) s)))", "problem": 22, "user": "50630247e4b05ac47bc68d6b"}, {"code": "(fn cnt [s & total]\r\n  (let [s (seq s)\r\n        t (if (nil? total) 0 total)]\r\n    (prn [s t])\r\n    (if (nil? s)\r\n      total\r\n      (recur (rest s) (inc t)))))", "problem": 22, "user": "50366589e4b0fbe0a74d26c3"}, {"code": "(fn [list] \n (let [x (seq list)]\n  (reduce + (map (fn [_] 1) x))))", "problem": 22, "user": "50573ed8e4b0012181721987"}, {"code": "(fn [coll]\n  (loop [coll coll n 0]\n    (if (empty? coll)\n        n\n        (recur (rest coll) (inc n)))))", "problem": 22, "user": "5063b9a0e4b075d771da6f9d"}, {"code": "(partial reduce (fn [c e] (+ c 1)) 0)", "problem": 22, "user": "5063fe48e4b075d771da6f9e"}, {"code": "(fn length [coll]\n  (cond (nil? (first coll)) 0\n    :else (+ 1 (length (rest coll)))))", "problem": 22, "user": "502cb310e4b0532a782a5e38"}, {"code": "#(->> % (map (fn [x] 1)) (reduce +))", "problem": 22, "user": "50644f3ee4b007509339a589"}, {"code": "(fn test \n  ([sq i] \n   (if (empty? sq)\n     i\n     (test (next sq) (+ i 1))\n    )\n  )\n  ([sq] (test sq 0)))", "problem": 22, "user": "503f872ee4b00d1a725ff2ac"}, {"code": "(fn len [s]\n  (if (empty? s) 0 (+ 1 (len (rest s)))))", "problem": 22, "user": "504e24e2e4b0f6ff3350c46d"}, {"code": "(fn m-c [coll]\n  ((fn [coll accum]\n     (if (empty? coll) accum\n       (recur (rest coll) (inc accum)))) coll 0))", "problem": 22, "user": "50621cbde4b0341461c88951"}, {"code": "reduce #(or (+ % 1) %2) 0", "problem": 22, "user": "5060ae00e4b07251188e4459"}, {"code": "(fn [s]\n  (loop [n 0 s s]\n    (if (empty? s) n (recur (+ n 1) (rest s)))))", "problem": 22, "user": "50657775e4b0deb876850599"}, {"code": "reduce (fn [n _] (inc n)) 0", "problem": 22, "user": "50645e12e4b007509339a58a"}, {"code": "reduce (fn [c _] (inc c))  0", "problem": 22, "user": "506558f0e4b0deb876850596"}, {"code": "(fn ct[l] (if (empty? l) 0 (+ 1 (ct (rest l)))))", "problem": 22, "user": "4f8b05d2e4b02e764a0a5176"}, {"code": "(fn thing [x] (if (empty? x) 0 (inc (thing (rest x)))))", "problem": 22, "user": "5037c397e4b0af0658af77b4"}, {"code": "(fn [seq]\n  (loop [seq seq, counter 0]\n    (if (empty? seq)\n      counter\n      (recur (rest seq) (inc counter)))))", "problem": 22, "user": "504e0136e4b078edc5f5938e"}, {"code": "(fn [ls] \n  (loop [ls ls n 0]\n    (if (empty? ls) n (recur (rest ls) (+ n 1)))))", "problem": 22, "user": "504db141e4b021508a333965"}, {"code": "#(reduce (fn [a _] (inc a)) 0 %)", "problem": 22, "user": "50668a06e4b03d366d7cb2b2"}, {"code": "#(\n  loop [x % y 0]\n    (if (seq x)\n      (recur (rest x) (inc y))\n      y))", "problem": 22, "user": "5065052ae4b0b1b6c8b1d85e"}, {"code": "(fn [coll]\n  (reduce (fn [x _] (+ x 1)) 0 (seq coll)))", "problem": 22, "user": "506755b3e4b03d366d7cb2bc"}, {"code": "#(apply + (map (fn [x] 1) %))", "problem": 22, "user": "506617c3e4b03d366d7cb2ab"}, {"code": "reduce (fn [x _] (inc x)) 0", "problem": 22, "user": "5065faf9e4b0313a384e5645"}, {"code": "#(apply + (map (constantly 1) %))", "problem": 22, "user": "5066dcc1e4b03d366d7cb2b5"}, {"code": "(fn [s]\n  (reduce (fn [sum i] (+ sum 1)) 0 s))", "problem": 22, "user": "5057852ce4b0012181721992"}, {"code": "(fn cnt [x] (if (empty? x) 0 (inc (cnt (rest x)))))", "problem": 22, "user": "50673c96e4b03d366d7cb2bb"}, {"code": "#(reduce (fn [n x] (+ n 1)) 0 %)", "problem": 22, "user": "50678be5e4b03d366d7cb2c0"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "5068fa8ee4b0c0169921a8e5"}, {"code": "(fn [coll]\n  (loop [x coll c 0]\n    (if (empty? x)\n      c\n    (recur (rest x) (inc c)))))", "problem": 22, "user": "5068c203e4b0c0169921a8e4"}, {"code": "(fn [coll]\n  (loop [n 0 coll coll]\n    (if (seq coll)\n      (recur (inc n) (rest coll))\n      n)))", "problem": 22, "user": "5066fa7de4b03d366d7cb2b9"}, {"code": "(fn num_args [xs] (reduce (fn [x y] (+ x 1)) 0 xs))", "problem": 22, "user": "4fb710f4e4b081705acca2cd"}, {"code": "reduce (fn [c _]  (inc c)) 0", "problem": 22, "user": "4fc7ddffe4b0ee37620e182b"}, {"code": "#(reduce (fn [x y] (inc x)) 0 %)", "problem": 22, "user": "5069d8c5e4b01dc6af13f838"}, {"code": "(partial reduce (fn [a _] (inc a)) 0)", "problem": 22, "user": "506ab9bae4b05d3b7762c74c"}, {"code": "reduce (fn [cnt el] (+ cnt 1)) 0", "problem": 22, "user": "5065b810e4b0148eb3925aec"}, {"code": "(fn count-elements [s]\n  (if (= '() s) 0 (+ 1 (count-elements (rest s)))))", "problem": 22, "user": "506a1985e4b01dc6af13f83e"}, {"code": "(fn sz [x]\n  (loop [x x\n         n 0]\n    (if (= '() x)\n      n\n      (recur (rest x) (inc n)))))", "problem": 22, "user": "506b016de4b0a2a5463de37f"}, {"code": "(fn ! ([list] (! list 0)) ([list c] (if (empty? list) c (! (rest list) (+ 1 c)))))", "problem": 22, "user": "506afdafe4b0a2a5463de37e"}, {"code": "(comp (partial reduce +) map) (fn [x] 1)", "problem": 22, "user": "506b0a9ce4b0a2a5463de380"}, {"code": "#(loop [c 0 [v & r] %] (if r (recur (inc c) r) (inc c)))", "problem": 22, "user": "4edb4c7c535d10e5ff6f5318"}, {"code": "(fn [s]\n  (loop [s1 s cnt 0]\n    (if (empty? s1)\n      cnt\n      (recur (next s1) (inc cnt)))))", "problem": 22, "user": "506b18c8e4b0a2a5463de383"}, {"code": "reduce (fn [x y] (inc x)) 0", "problem": 22, "user": "506b8242e4b0eda3100c090a"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "506ba58be4b0eda3100c090b"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "506929ffe4b01dc6af13f82b"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "506c0d02e4b0eda3100c090e"}, {"code": "(fn myfunc [x] (if (= '() (rest x)) 1 (+ 1 (myfunc (rest x)))))", "problem": 22, "user": "506b437de4b0eda3100c0906"}, {"code": "reduce (fn [a b] (inc a)) 0", "problem": 22, "user": "506c2006e4b080c1a96bd6bc"}, {"code": "#(reduce (fn [x y] (+ x 1)) 0 %)", "problem": 22, "user": "506a08bae4b01dc6af13f83d"}, {"code": "(fn [list]\n  (reduce (fn [n val] (inc n)) 0 list))", "problem": 22, "user": "506c8116e4b0a302964c548a"}, {"code": "(fn [s]\n (reduce + (map (constantly 1) s)))", "problem": 22, "user": "506ce637e4b0a302964c5490"}, {"code": "#(.size (vec %) )", "problem": 22, "user": "4f1de94a535d64f603146490"}, {"code": "(fn [list]\r\n  (reduce (fn [x,y] (+ x 1)) (concat [0] list))\r\n  )", "problem": 22, "user": "5069605ae4b01dc6af13f82d"}, {"code": "(fn [l]\r\n  (loop [s 0\r\n         lista l]\r\n    (if (empty? lista)\r\n                s\r\n                (recur (inc s) (rest lista)))))", "problem": 22, "user": "50576483e4b001218172198b"}, {"code": "(fn [xs] (reduce + (map (fn [x] 1) xs) ) )", "problem": 22, "user": "50217818e4b00bba4502f7a7"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "506af7d8e4b0a2a5463de37d"}, {"code": "#(apply + (map (fn [_] 1) %))", "problem": 22, "user": "506e0e5ae4b09350ab4199eb"}, {"code": "#(reduce (fn [n _] (inc n)) 0 %)", "problem": 22, "user": "506ef8c3e4b09350ab4199f4"}, {"code": "(fn [s] (reduce + (map (fn [x] 1) s)))", "problem": 22, "user": "4f83dd78e4b033992c121c24"}, {"code": "(fn \n  [x]\n  (loop [tail (rest x) acc 1]\n    (cond \n      (empty? tail)\n      acc\n      :else\n        (recur (rest tail) (inc acc))\n      )\n  )\n)", "problem": 22, "user": "506f5a67e4b082ae7d1032c6"}, {"code": "#(reduce + (map (constantly 1) % ) )", "problem": 22, "user": "506cc221e4b0a302964c548f"}, {"code": "(fn [coll]\r\n  (loop [c coll, result 0]\r\n    (if (not (seq c)) result (recur (rest c) (inc result)))))", "problem": 22, "user": "506f2f58e4b09350ab4199fa"}, {"code": "reduce (fn [m i] (inc m)) 0", "problem": 22, "user": "506fd0afe4b07bd6ad9b9f23"}, {"code": "(fn [l]\n  ((fn [l n]\n    (if (= (last l) nil)\n      n\n      (recur (rest l) (inc n))\n    )\n  )\n  l 0)\n)", "problem": 22, "user": "506ec408e4b09350ab4199f1"}, {"code": "#(reduce (fn[x y] (inc x)) 0 %)", "problem": 22, "user": "50705072e4b07bd6ad9b9f27"}, {"code": "(fn [xs]\n  (loop [xs xs n 0]\n    (if (= xs '())\n      n\n      (recur (rest xs) (+ n 1)))))", "problem": 22, "user": "50705886e4b07bd6ad9b9f2a"}, {"code": "(partial reduce (fn [x y] (inc x)) 0)", "problem": 22, "user": "507056b8e4b07bd6ad9b9f29"}, {"code": "(fn [l] \n  (\n    (fn [l c] \n      (if \n        (not(empty? l)) \n          (recur \n            (rest l) (+ c 1)\n          ) \n        c)\n      ) \n      l 0\n    )\n)", "problem": 22, "user": "506f5d68e4b082ae7d1032c7"}, {"code": "(fn [c x] (if (empty? x) c (recur (+ c 1) (rest x)))) 0", "problem": 22, "user": "5053d193e4b0b1b9d1860ea5"}, {"code": "#(loop [arr %1, len 0]\n  (if (= arr '() )\n    len\n    (recur (rest arr) (+ len 1))))", "problem": 22, "user": "506662a0e4b03d366d7cb2ae"}, {"code": "(fn [s]\n  (loop [x s, acc 0]\n    (if (empty? x)\n      acc\n      (recur (rest x) (inc acc)))))", "problem": 22, "user": "50706287e4b07bd6ad9b9f2b"}, {"code": "#(reduce + (map (constantly 1) %1))", "problem": 22, "user": "507190a4e4b0e3170b5a867b"}, {"code": "(fn [xs](apply + (map (fn [_] 1) xs)))", "problem": 22, "user": "4fefbfe7e4b0678c553fc31a"}, {"code": "#(loop [coll % counter 0] \n  (if (nil? (first coll))\n    counter\n    (recur (rest coll) (inc counter))))", "problem": 22, "user": "5071b614e4b0e3170b5a867d"}, {"code": "(fn [x]\n  (reduce + (map (fn [x] (quote 1)) x)))", "problem": 22, "user": "5070a7f5e4b0e3170b5a8675"}, {"code": "(fn my-count [lst]\n  (loop [lst lst n 0]\n    (if (empty? lst)\n      n\n      (recur (rest lst) (inc n)))))", "problem": 22, "user": "50720885e4b0e3170b5a8689"}, {"code": "(fn foo\n  ([x] (foo x 0))\n  ([x n] (cond\n          (= x ()) n\n          :else (foo (rest x) (inc n)))))", "problem": 22, "user": "4f83ae07e4b033992c121c21"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "5071e520e4b0e3170b5a8683"}, {"code": "reduce (fn [x y] (+ x 1)) 0", "problem": 22, "user": "506f7686e4b082ae7d1032c9"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "50729f67e4b0e3170b5a868e"}, {"code": "(fn mc [s & i]\n  (if (= s ())\n    (or (first i) 0)\n    (mc (rest s) (inc (or (first i) 0)))))", "problem": 22, "user": "50733b31e4b0e3170b5a869a"}, {"code": "#(loop [s % x 0]\n  (if (empty? s)\n    x\n    (recur (rest s) (inc x))))", "problem": 22, "user": "4e6fb96c535d5021c1a89627"}, {"code": "(fn [col] (loop [cnt 0 col col] (if (empty? col) cnt (recur (inc cnt) (rest col)))))", "problem": 22, "user": "50723bbae4b0e3170b5a868b"}, {"code": "(fn coun [lo] ((fn coun-iter [ls nm] (cond (empty? ls) nm true (coun-iter (rest ls) (+ 1 nm)))) lo 0))", "problem": 22, "user": "5071f3b4e4b0e3170b5a8686"}, {"code": "(fn [lst]\n  (loop [counter 0\n         hvost lst]\n    (if (empty? hvost)\n      counter\n      (recur (inc counter) (rest hvost)))))", "problem": 22, "user": "50657858e4b0deb87685059a"}, {"code": "(fn cnt [s]\n  (if (empty? s) \n  0\n  (+ 1 (cnt (rest s)))))", "problem": 22, "user": "4f776d9fe4b0fbe0118ec57e"}, {"code": "#(alength (into-array %))", "problem": 22, "user": "50740835e4b054001656accd"}, {"code": "reduce (fn [x y] (+ 1 x)) 0", "problem": 22, "user": "506406c8e4b075d771da6f9f"}, {"code": "(partial reduce (fn [x y] (inc x)) 0)", "problem": 22, "user": "507437c2e4b054001656acd0"}, {"code": "#(reduce (fn [a b] (inc a)) 0 %)", "problem": 22, "user": "50748923e4b054001656acd3"}, {"code": "(fn my_count [x]\n  (if (empty? x)\n    0\n    (inc (my_count (rest x)))\n  )\n)", "problem": 22, "user": "5074b97ae4b054001656acd6"}, {"code": "(fn [x]\r\n  (loop [z x y 0]\r\n    (if (empty? z) y\r\n    (recur (rest z) (inc y)))))", "problem": 22, "user": "4fdf4e2be4b05e33b9224f96"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "5074b3ece4b054001656acd5"}, {"code": "(fn [y] (apply + (map (fn [x] 1) y)))", "problem": 22, "user": "5075667de4b09049dea8279c"}, {"code": "reduce (fn [acc blah] (+ acc 1)) 0", "problem": 22, "user": "4f030a60535dcb61093f6a48"}, {"code": "reduce (fn [result item] (inc result)) 0", "problem": 22, "user": "5075d655e4b09049dea827a3"}, {"code": "#(apply + (map (constantly 1) %))", "problem": 22, "user": "50763574e4b0a894bb95bf3d"}, {"code": "#(loop [s % r 0]\n  (if (empty? s)\n    r\n    (recur (rest s) (inc r))))", "problem": 22, "user": "506e9464e4b09350ab4199f0"}, {"code": "(fn [x] (reduce + (map (constantly 1) x)))", "problem": 22, "user": "507630ffe4b0a894bb95bf3c"}, {"code": "#(loop [cnt %1, acc 0]\n  (if (empty? cnt)\n    acc\n    (recur (rest cnt) (inc acc)))\n)", "problem": 22, "user": "500c5b4ae4b03d00572d2d88"}, {"code": "(fn c [[x & xs]] \r\n  (if xs (+ (c xs) 1)\r\n     (if x 1 0)))", "problem": 22, "user": "4fd7a223e4b0dab7d829f387"}, {"code": "#(last (map-indexed (fn [idx v] (+ idx 1)) %))", "problem": 22, "user": "50751598e4b054001656acd9"}, {"code": "(fn my-count [x] (if (empty? x)  0 (+ 1 (my-count (rest x)))))", "problem": 22, "user": "5077dd50e4b0fc74642bff63"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "50746e23e4b054001656acd1"}, {"code": "(fn f [s]\n  (if (empty? s)\n    0\n    (inc (f (rest s)))))", "problem": 22, "user": "50784ae5e4b0fc74642bff68"}, {"code": "#(loop [col % acc 0]\n  (if (empty? col) \nacc\n  (recur (rest col) (inc acc))))", "problem": 22, "user": "50783762e4b0fc74642bff67"}, {"code": "(fn [origsq]\n  (loop [sq origsq\n        counter 0]\n    (if (empty? sq)\n      counter\n      (recur (rest sq) (+ counter 1)))))", "problem": 22, "user": "50775a7de4b0fc74642bff60"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "50799992e4b08327cd804a62"}, {"code": "(fn [s]\n  (loop [x 0 s2 s]\n    (if (first s2)\n      (recur (inc x) (next s2))\n      x)))", "problem": 22, "user": "4ecb65f6535df97575fdabda"}, {"code": "#(reduce (fn [a b] (inc a)) 0 %)", "problem": 22, "user": "507a08e4e4b08327cd804a67"}, {"code": "(comp (partial reduce +) (partial map (fn [x] 1)))", "problem": 22, "user": "507a506ee4b08327cd804a6c"}, {"code": "#(if (string? %) (.length %) (.size %))", "problem": 22, "user": "507a9b29e4b08327cd804a6e"}, {"code": "(fn [arg]\n  (alength (to-array arg)))", "problem": 22, "user": "507acc18e4b09034bfeeb719"}, {"code": "(fn ! [n] (if (empty? n) 0 (inc (! (rest n)))))", "problem": 22, "user": "4ee40722535d10e5ff6f5374"}, {"code": "#(reduce (fn [acc elt] (inc acc)) 0 %)", "problem": 22, "user": "507b7dbee4b09034bfeeb71e"}, {"code": "(fn [coll] (loop [i 0 c coll] (if (empty? c) i (recur (inc i) (rest c)))))", "problem": 22, "user": "4fecebe1e4b0681fd128dcac"}, {"code": "(fn [_v]\n  (let [__v (vec _v)]\n  (loop [v __v length 0]\n    (if-not (seq v)\n      length\n      (recur (subvec v 1) (inc length))))))", "problem": 22, "user": "507bb3ece4b09034bfeeb720"}, {"code": "(fn cnt\n  ([n] (cnt n 0))\n  ([n c] \n   (if (empty? n) c (cnt (rest n) (inc c)))))", "problem": 22, "user": "507c4829e4b0a19f8e876e57"}, {"code": "reduce (fn [m i] (+ m 1)) 0", "problem": 22, "user": "50782c80e4b0fc74642bff65"}, {"code": "(fn [coll] (loop [c coll total 0] (if (empty? c) total (recur (drop 1 c) (inc total)))))", "problem": 22, "user": "5078dedae4b08327cd804a5d"}, {"code": "(fn [m] (+ 1 (first (last (map-indexed #(vector % %2) m)))))", "problem": 22, "user": "5061cc17e4b0a30dc9a35d34"}, {"code": "(fn [in]\n  (loop [seqe (seq in)\n         n 0]\n        (if (empty? seqe)\n            n\n            (recur (rest seqe) (inc n)))))", "problem": 22, "user": "507d28cfe4b00f5b3a6e1a13"}, {"code": "(fn cnt [cs] \n  (letfn [(iter [cs acc]\n    (if (empty? cs) acc\n        (iter (rest cs) (+ acc 1))))]\n    (iter cs 0)))", "problem": 22, "user": "507a396be4b08327cd804a69"}, {"code": "(fn length [coll] \n         (loop [coll coll\n            result 0]\n            (if (empty? coll)\n               result\n               (recur (rest coll) (inc result)))))", "problem": 22, "user": "5069e8a5e4b01dc6af13f83a"}, {"code": "(fn cuenta[s]\n  (if (= () s) 0\n       (+ (cuenta (rest s)) 1)))", "problem": 22, "user": "507db411e4b03c76e5499e06"}, {"code": "#(apply + (map (fn [x] 1) %))", "problem": 22, "user": "4f0378eb535dcb61093f6ae1"}, {"code": "(fn [x] (loop [counter 1, coll x] \n           (if (empty? coll) (dec counter)\n                 (recur (inc counter) (rest coll)))))", "problem": 22, "user": "507ddf55e4b0a03698d01ca8"}, {"code": "#(loop [n 0 s %] (if (empty? s) n (recur (inc n) (next s))))", "problem": 22, "user": "507c7c8be4b0b083f3ff82ef"}, {"code": "(fn [mySequence]\n  (loop [s mySequence n 0]\n    (if (empty? s)\n      n\n      (recur (rest s) (inc n))\n    )\n  )\n)", "problem": 22, "user": "507eddf4e4b06ce648bcdbfa"}, {"code": "(fn n [x]\n  (if (empty? x)\n    0\n    (+ 1 (n (rest x)))))", "problem": 22, "user": "507ef25ce4b0f753b6f9788e"}, {"code": "(fn recursive-2 [seqn]\n  ((fn recursive-1 [seqn so-far]\n  (if (empty? seqn)\n    so-far\n    (recur (rest seqn) (inc so-far))))\n   seqn\n   0))", "problem": 22, "user": "507eed82e4b06ce648bcdbfe"}, {"code": "(fn f [c]\n  (if-let [[x & xs] (seq c)]\n    (inc (f xs))\n    0))", "problem": 22, "user": "504ffb8fe4b0a02f9cffdeae"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "4e72dd5d535d5021c1a89667"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "507e8128e4b0fc854042f247"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "508014cce4b089ade05efbdc"}, {"code": "(fn cnt [l] (if (= (first l) nil) (quote 0) (+ 1 (cnt (rest l)))))", "problem": 22, "user": "507dad44e4b03c76e5499e05"}, {"code": "reduce (fn [a e] (inc a)) 0", "problem": 22, "user": "507fe6fee4b089ade05efbd6"}, {"code": "reduce (fn [x y] (+ x 1)) 0", "problem": 22, "user": "50807940e4b01a93d3f38e44"}, {"code": "(fn foo [coll] ( if (empty? coll) 0 (+ 1 (foo (rest coll)))))", "problem": 22, "user": "5078300de4b0fc74642bff66"}, {"code": "(fn self [x] (if (not= (seq x) nil) (+ 1 (self (rest x))) 0))", "problem": 22, "user": "507f3b81e4b0f753b6f9789c"}, {"code": "#(reduce (fn [x y] (inc x)) 0 %)", "problem": 22, "user": "5080a9d3e4b01a93d3f38e4a"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "50812debe4b01a93d3f38e4c"}, {"code": "(fn count' [xs] (if (empty? xs) 0 (inc (count' (next xs)))))", "problem": 22, "user": "508157b2e4b0946d0443855c"}, {"code": "#(reduce (fn [i _] (inc i)) 0 %)", "problem": 22, "user": "50815c9fe4b0946d0443855d"}, {"code": "(fn h \n  ([seq]\n    (h seq 0))\n  ([seq n]\n    (if (empty? seq)\n        n\n        (h (rest seq) (inc n)))))", "problem": 22, "user": "506f1e12e4b09350ab4199f9"}, {"code": "(fn [xs]\n  (apply + (map (fn [x] 1) xs)))", "problem": 22, "user": "4f03862a535dcb61093f6b11"}, {"code": "#(reduce (fn ([counter, item] (+ counter 1))) 0 %)", "problem": 22, "user": "507ab268e4b08327cd804a6f"}, {"code": "#((fn [xs x]\n    (if (empty? xs)\n      (if x x 0)\n      (recur (rest xs) (if x (inc x) (1))))) %1 0)", "problem": 22, "user": "50820c3be4b0946d04438570"}, {"code": "(fn [v] (reduce + (map #(if % 1) v)))", "problem": 22, "user": "5080d6e3e4b01a93d3f38e4b"}, {"code": "#(.size (seq %))", "problem": 22, "user": "4f7beb36e4b06e829148e1ab"}, {"code": "(fn f ([v] (f v 0))\n      ([v i] (if (empty? v) \n                 i\n                 (recur (rest v) (inc i)))))", "problem": 22, "user": "5069c09be4b01dc6af13f837"}, {"code": "#(reduce (fn [i j](+ i 1)) 0 %)", "problem": 22, "user": "5073de20e4b054001656acca"}, {"code": "#(+ 1 (first (last (map-indexed (fn [idx itm] [idx itm]) %))))", "problem": 22, "user": "508295b2e4b06a522e8c7af2"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "5082709ee4b06a522e8c7af1"}, {"code": "(fn [coll]\n  (loop [coll coll x 0]\n    (if (empty? coll)\n      x\n      (recur (rest coll) (inc x)))))", "problem": 22, "user": "5082095be4b0946d0443856f"}, {"code": "(fn [coll] \n  (loop [coll (seq coll) cnt 0]\n    (if (empty? coll)\n      cnt\n      (recur (rest coll) (inc cnt)))))", "problem": 22, "user": "50843a4ae4b0c98812d0788b"}, {"code": "(fn len [lst] (if (nil? (seq lst)) 0 (+ 1 (len (rest lst)))))", "problem": 22, "user": "50838c06e4b0902986d69e0f"}, {"code": "(fn [seq] (reduce (fn [s x] (+ s x)) 0 (map (fn [x] 1) seq)))", "problem": 22, "user": "5084cb7de4b0fb8f40674bfb"}, {"code": "#(loop [c 0 xs %]\n    (if (empty? xs)\n      c\n      (recur (inc c) (rest xs))))", "problem": 22, "user": "507e68abe4b085af06e3afd2"}, {"code": "(fn [coll]\r\n  (loop [x coll y 0]\r\n    (if (empty? x)\r\n     y\r\n    (recur (next x) (inc y)))))", "problem": 22, "user": "507e5cf8e4b085af06e3afd1"}, {"code": "(fn [col] (reduce (fn [n c] (+ 1 n)) 0 col))", "problem": 22, "user": "4f362c31e4b0e243712b1ec7"}, {"code": "#(loop [x 0 y %] \n  (if (empty? y) x (recur (inc x) (rest y))))", "problem": 22, "user": "50856bd1e4b004985b776e4c"}, {"code": "(fn find-n [collection]\r\n    (loop [col collection c 0]\r\n      (if (= '() col)\r\n        c\r\n        (recur (rest col) (inc c))\r\n      )\r\n    )\r\n)", "problem": 22, "user": "50845d3ee4b0fb8f40674bf3"}, {"code": "#(loop [sequence % cnt 0] \r\n  (if (empty? sequence) cnt \r\n    (recur (rest sequence) (+ cnt 1))))", "problem": 22, "user": "507da5a7e4b03c76e5499e03"}, {"code": "(fn [x] (\r\n  loop [coll x cnt 0]\r\n    (if (= (first coll) nil) cnt\r\n    (recur (rest coll) (inc cnt)))\r\n  )\r\n)", "problem": 22, "user": "508595b0e4b004985b776e4f"}, {"code": "(fn f [x] (\n  if (= (second x) nil ) 1\n  (+ 1 (f (rest x)) )\n  \n))", "problem": 22, "user": "50800e49e4b089ade05efbda"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "507faa9fe4b089ade05efbd2"}, {"code": "#(loop [zseq %1 cound 0] \r\n   (if (empty? zseq) cound \r\n       (recur (rest zseq) (inc cound))))", "problem": 22, "user": "500ae2ade4b03d00572d2d7d"}, {"code": "(fn [l]\n  (loop [l l c 0]\n    (if (empty? l)\n      c\n      (recur (rest l) (inc c)))))", "problem": 22, "user": "5087d0e4e4b0198722bd9851"}, {"code": "reduce (fn [a _] (+ a 1)) 0", "problem": 22, "user": "507de7cde4b085af06e3afd0"}, {"code": "reduce #(#_%& + 1 %)0", "problem": 22, "user": "5088082ae4b0198722bd9854"}, {"code": "#(alength (to-array %))", "problem": 22, "user": "50872737e4b095ddb618af1a"}, {"code": "#(loop [x %\n    c 0]\n    (cond (empty? x) c\n  :else\n    (recur (rest x) (inc c))))", "problem": 22, "user": "50868795e4b004985b776e5e"}, {"code": "reduce (fn [counter item] (+ counter 1)) 0", "problem": 22, "user": "5087f895e4b0198722bd9852"}, {"code": "#(reduce + (map(fn[x] 1) %))", "problem": 22, "user": "50885e74e4b07e6af8689325"}, {"code": "(fn [sq]\n  (loop [sq sq ct 0]\n    (if (empty? sq)\n       ct\n       (recur (rest sq) (inc ct)))))", "problem": 22, "user": "5084c43be4b0fb8f40674bfa"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "5089fc3ae4b016a21070049f"}, {"code": "(fn [s]\r\n  (reduce (fn [n _](inc n)) 0 s))", "problem": 22, "user": "508a6775e4b016a2107004a9"}, {"code": "(fn [thing]\n  (loop [sq thing n 0]\n    (if (empty? sq) n (recur (rest sq) (+ n 1)))))", "problem": 22, "user": "508b95a0e4b0be79e5b189c6"}, {"code": "(fn ccc [coll]\n(loop [coll coll res 0]\n  (if (empty? coll) res\n(recur (rest coll) (inc res)))))", "problem": 22, "user": "508ba469e4b0be79e5b189c8"}, {"code": "reduce (fn [a _] (inc a)) 0", "problem": 22, "user": "508c3d42e4b0f17d83ea26b2"}, {"code": "(fn [lst] (loop [lst lst acc 0]\n(if (empty? lst) acc\n(recur (rest lst) (inc acc)))))", "problem": 22, "user": "508bed64e4b0be79e5b189cf"}, {"code": "(fn [col] (reduce + (map (fn [_] 1) col)))", "problem": 22, "user": "508c2da3e4b0f17d83ea26b0"}, {"code": "(fn [seq]\n  (loop [s seq c 0]\n    (if (empty? s)\n      c\n      (recur (rest s) (inc c))\n)))", "problem": 22, "user": "508bf05ae4b0f17d83ea26aa"}, {"code": "reduce (fn [a b] (+ a 1)) 0", "problem": 22, "user": "508c64bee4b0f17d83ea26b5"}, {"code": "(fn c [l] (if l (+ 1 (c (next l))) 0))", "problem": 22, "user": "508c33ece4b0f17d83ea26b1"}, {"code": "reduce (fn [cnt _] (inc cnt)) 0", "problem": 22, "user": "5082ccb3e4b06a522e8c7af3"}, {"code": "(fn [s] (reduce (fn [a b] (inc a)) 0 s))", "problem": 22, "user": "4db86aee535d1e037afb2193"}, {"code": "#(.size (vec %))", "problem": 22, "user": "508d5552e4b0f17d83ea26bb"}, {"code": "(fn mycount [s] (if (next s) (+ 1 (mycount (next s))) 1))", "problem": 22, "user": "508d8ab2e4b0f17d83ea26be"}, {"code": "(fn [x]\n  (reduce\n    (fn [x y]\n      (+ x 1)\n    )\n    0\n    x\n  )\n)", "problem": 22, "user": "4fc8f671e4b0ee37620e1840"}, {"code": "(fn fart [s]\n  (if (empty? s) \n    0\n    (+ 1 (fart (rest s)))))", "problem": 22, "user": "508dbd56e4b0f17d83ea26c2"}, {"code": "reduce (fn [a _] (inc a)) 0", "problem": 22, "user": "50696bace4b01dc6af13f830"}, {"code": "#(loop [xs % n 0]\n  (if (nil? xs)\n    n\n    (recur (next xs) (+ n 1))))", "problem": 22, "user": "508e2584e4b0f17d83ea26c9"}, {"code": "#(+ ((last (map-indexed vector %)) 0) 1)", "problem": 22, "user": "4f49108ae4b0d56e7bb92be5"}, {"code": "(fn c [all] (letfn [(ctr [x,xs] (if (empty? xs) x (ctr (inc x) (rest xs))))] (ctr 0 all)))", "problem": 22, "user": "5069874de4b01dc6af13f832"}, {"code": "(partial\n  (fn my-count [c s]\n    (if (empty? s)\n      c\n      (my-count (+ c 1) (rest s))))\n  0)", "problem": 22, "user": "508923d5e4b06d8254e936e8"}, {"code": "(fn [seq] (reduce (fn [acc x] (+ acc 1)) 0 seq))", "problem": 22, "user": "508e9ed8e4b0996e1a8a53bf"}, {"code": "(fn[list](reduce (fn[a b](inc a)) 0 list))", "problem": 22, "user": "508304ede4b06a522e8c7af6"}, {"code": "(fn cnt [l]\r\n  (if (empty? l) 0\r\n  (+ 1 (cnt (rest l)))\r\n  ))", "problem": 22, "user": "508eea7de4b0706b2ed3ef8e"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "508dc047e4b0f17d83ea26c3"}, {"code": "#(inc (first (last (map-indexed vector %))))", "problem": 22, "user": "50897033e4b037578f03c8b3"}, {"code": "(fn size [x]\n  (if\n    (empty? x)\n    0\n    (+ 1 (size (rest x)))))", "problem": 22, "user": "508fd72ee4b0ea685a20f76c"}, {"code": "reduce (fn [m i] (+ m 1)) 0", "problem": 22, "user": "508e41bee4b0f17d83ea26cc"}, {"code": "(fn [s]\r\n  (loop [i 0 s s]\r\n    (if (empty? s) i\r\n      (recur (inc i) (rest s)))))", "problem": 22, "user": "50901b2ee4b0ea685a20f774"}, {"code": "(fn [x] (loop [my-list x my-count 0] (if (empty? my-list) my-count (recur (rest my-list) (+ my-count 1)))))", "problem": 22, "user": "506f9423e4b082ae7d1032ca"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "5090c8e2e4b0742c82730ad9"}, {"code": "( fn[x] (reduce (fn [x y] (+ x 1)) 0 x ))", "problem": 22, "user": "506ee0f4e4b09350ab4199f2"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4fcf254ce4b03432b189f40d"}, {"code": "#(apply + (map (fn [_] 1) %))", "problem": 22, "user": "509160dae4b0742c82730aef"}, {"code": "(fn [seq] (loop [sequence seq, x 0]\n  (if (empty? sequence)\n    x\n    (recur (rest sequence) (inc x)))))", "problem": 22, "user": "5089860de4b037578f03c8b5"}, {"code": "(fn [x]\r\n  (loop [cnt 0 x x]\r\n    (if (empty? x)\r\n      cnt\r\n      (recur (inc cnt) (rest x)))))", "problem": 22, "user": "508453abe4b0c98812d07891"}, {"code": "(fn [x] (apply + (map #(Integer/valueOf %) (map #(format \"1\" %) x))))", "problem": 22, "user": "4f75469ee4b0fbe0118ec55a"}, {"code": "(fn [lst]\n  (letfn [(myCount [lst cnt]\n            (if (empty? lst)\n              cnt\n              (recur (rest lst) (inc cnt))))]\n    (myCount lst 0)))", "problem": 22, "user": "509251f3e4b09a7d0b586de5"}, {"code": "(fn f\n  ([xs] (f xs 0))\n  ([xs i] (if (empty? xs) i (f (rest xs) (inc i)))))", "problem": 22, "user": "508ee17ae4b0706b2ed3ef8d"}, {"code": "#(apply + (map (fn [x] 1) %))", "problem": 22, "user": "50915996e4b0742c82730aee"}, {"code": "(fn cnt[list] \n  (if (empty? list)\n    0\n    (+ 1 (cnt (rest list)))))", "problem": 22, "user": "50928084e4b097f48cc3856c"}, {"code": "(fn [s]\n  (loop [s s, n 0]\n    (if (empty? s)\n      n\n      (recur (rest s) (inc n)))))", "problem": 22, "user": "4f856adfe4b033992c121c44"}, {"code": "(fn [x] \n  ((fn self[x, c] (if (first x) (self (rest x) (+ c 1)) c)) x 0 ))", "problem": 22, "user": "5093ca51e4b097f48cc38585"}, {"code": "(fn t ([x]\n  (t x 0))\n  ([x r]\n  (if (= [] x)\n      r\n    (recur (rest x) (inc r)))))", "problem": 22, "user": "507fbd77e4b089ade05efbd3"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "50929467e4b097f48cc38571"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "5093ef2ce4b097f48cc38586"}, {"code": "reduce (fn [c _] (inc c)) 0", "problem": 22, "user": "50940b6ce4b097f48cc38594"}, {"code": "reduce (fn[c _](inc c)) 0", "problem": 22, "user": "5086ca15e4b004985b776e62"}, {"code": "#(loop [acc %1 n 0]\n  (if (empty? acc)\n    n\n    (recur (rest acc)(inc n))))", "problem": 22, "user": "4f49e050e4b0d56e7bb92c01"}, {"code": "#(reduce (fn [n _] (inc n)) 0 %)", "problem": 22, "user": "5094e07ae4b04e5742806c56"}, {"code": "(fn mycount[x] (if (= x (list (first x))) 1 (inc (mycount (rest x)))))", "problem": 22, "user": "50813b88e4b09292fd669443"}, {"code": "(fn countlist[x] (if (= (first x) nil) 0 (+ 1 (countlist (rest x)))))", "problem": 22, "user": "508d5ce9e4b0f17d83ea26bc"}, {"code": "reduce (fn [x y] (inc x)) 0", "problem": 22, "user": "50949602e4b04e5742806c4e"}, {"code": "(fn [x] (loop [xs x ct 0] (if (empty? xs) ct (recur (rest xs) (inc ct)))))", "problem": 22, "user": "500a0a11e4b03d00572d2d73"}, {"code": "(fn [xs]\n     (loop [l xs, n 0]\n       (if (empty? l)\n         n\n        (recur (rest l) (inc n)))))", "problem": 22, "user": "5089ebfee4b03217b26a539f"}, {"code": "(fn [x] (reduce + (map (fn [y] 1) x)))", "problem": 22, "user": "50959df3e4b087f34d351ab4"}, {"code": "(fn [y] (reduce + (map (fn [x] 1) y)))", "problem": 22, "user": "5095a0a4e4b087f34d351ab5"}, {"code": "#(reduce +\n    (map (fn [_] 1) %))\n\n#_ ; Or with manual recursion:\n\n(fn cnt\n  [seq & len]\n  (if (empty? seq)\n      (first len)\n      (cnt\n        (rest seq)\n        (inc\n          (or (first len) 0)))))", "problem": 22, "user": "50970f51e4b00ad8bab4e950"}, {"code": "#(reduce (fn [a c] (inc a)) 0 %)", "problem": 22, "user": "5097a95fe4b00ad8bab4e96e"}, {"code": "(fn mycount [xs]\n  (if (empty? xs)\n    0\n    (+ (mycount (rest xs)) 1)))", "problem": 22, "user": "5097cd83e4b00ad8bab4e974"}, {"code": "(fn cnt ([list] (cond (seq list) \n              (cnt (rest list) 1) \n              :else 0))\n    ([list acc] (cond (seq list) \n                  (recur (rest list) (inc acc)) \n              :else acc)))", "problem": 22, "user": "5097cfcbe4b00ad8bab4e977"}, {"code": "#(reduce (fn [x _] (inc x)) 0 %)", "problem": 22, "user": "5097b556e4b00ad8bab4e970"}, {"code": "(fn [n] \n  (loop [s n cnt 0] \n    (if (empty? s) \n      cnt \n      (recur (rest s) (inc cnt))\n    )\n  )\n)", "problem": 22, "user": "50982cc7e4b04e098a4c726c"}, {"code": "(fn mycount [x] (reduce + (map (constantly 1) x)))", "problem": 22, "user": "50982769e4b04e098a4c726a"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "50976c84e4b00ad8bab4e961"}, {"code": "(fn\n  [string]\n    (loop\n      [s string\n        i 0]\n        (if-not (first s) i (recur (rest s) (inc i)))))", "problem": 22, "user": "50989786e4b04e098a4c7274"}, {"code": ";; I forget what my original solution of this was, but it wasn't this fancy. Here's the explanation.\n\n;; In this case, reduce will take a function f that takes 2 parameters and a parameter p as its first parameter.\n;; It also takes a list and applies that function to the first element in the list making it the 2nd parameter.\n;; In this case, the parameter supplied is 0. Let's take the list of the first example. '(1 2 3 3 1)\n;; So the function supplied to reduce below will use 0 as x and 1 as i.\n;; It will return 1 which is the new x. 2 is the new i.\n;; This returns 2.\n;; 2 is the new i and 3 is the new x.\n;; returns 3... \n;; and so on! Seems like it's cheating since you aren't using that second parameter, but kinda nifty :)\n\nreduce (fn cheat [x i]\n         (+ x 1)) 0", "problem": 22, "user": "50955676e4b087f34d351ab1"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "50928ecfe4b097f48cc38570"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "5098f5d6e4b0cae2931060a4"}, {"code": ";#(loop [elements % accum 0]\n;  (if (empty? elements) accum\n;      (recur (rest elements) (inc accum))))\n#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "50996a38e4b0cae2931060b3"}, {"code": "#(reduce (fn [sofar _] (inc sofar)) 0 %)", "problem": 22, "user": "4ec1923f535dfed6da9c6db2"}, {"code": "( fn [ x] (reduce (  fn [a b]  ( + 1 a))  0  x))", "problem": 22, "user": "5098bce3e4b0cae2931060a0"}, {"code": "(fn counter [seq]\r\n  ((fn helper [seq num]\r\n    (if (empty? (rest seq))\r\n      num\r\n      (helper (rest seq) (inc num))\r\n    )\r\n  ) seq 1))", "problem": 22, "user": "4fa313bbe4b081705acca188"}, {"code": "(fn my-count [seq]\n  (if (empty? seq)\n      0\n      (+ 1 (my-count (rest seq)))))", "problem": 22, "user": "5097ea89e4b087ccf61a7af4"}, {"code": "(fn count-sequence [sequence]\n  (if (nil? (first sequence)) 0 (+ 1 (count-sequence (rest sequence))))\n)", "problem": 22, "user": "50909368e4b084db37c1e074"}, {"code": "#(alength (into-array %))", "problem": 22, "user": "5099198ce4b0cae2931060ac"}, {"code": "(fn my-count [s]\n  (if (empty? s) 0 (inc (my-count (rest s)))))", "problem": 22, "user": "509a5ca8e4b0efbae1fbc0ab"}, {"code": "#(.size (seq %))", "problem": 22, "user": "5099283ce4b0cae2931060af"}, {"code": "(fn cnt [x a] (if(= () a) x (cnt (+ 1 x) (rest a)))) 0", "problem": 22, "user": "5097c837e4b00ad8bab4e973"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "509b152be4b0412cdea6eb1e"}, {"code": "(fn [l] (reduce + (map #(when (not (nil? %)) 1) l)))", "problem": 22, "user": "509a5884e4b0efbae1fbc0aa"}, {"code": "reduce (fn [s _] (+ s 1)) 0", "problem": 22, "user": "5098bcfee4b0cae2931060a1"}, {"code": "#(reduce + (map (fn [s] 1) %))", "problem": 22, "user": "50992197e4b0cae2931060ae"}, {"code": "reduce (fn [n col] (inc n)) 0", "problem": 22, "user": "5038381ce4b0803468ea2c6b"}, {"code": "(fn get-cnt [seq] (loop [s seq cnt 0] (if (nil? (first s)) (+ cnt 0)(recur (rest s) (inc cnt)))))", "problem": 22, "user": "509b1204e4b0412cdea6eb1d"}, {"code": "(fn [coll]\n  (loop [t (rest  coll)\n         counter 1]\n    (if (empty? t)\n      counter\n      (recur  (rest t) (inc counter)))))", "problem": 22, "user": "507fcfede4b089ade05efbd5"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "509c7949e4b085ae113522b0"}, {"code": "reduce (fn [a b] (+ a 1)) 0", "problem": 22, "user": "509a25b7e4b0efbae1fbc0a8"}, {"code": "#(loop [c 0 s %]\n  (if (empty? s) c (recur (inc c) (rest s))))", "problem": 22, "user": "509b89b3e4b03049c49bd678"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4f8c525ce4b02e764a0a5196"}, {"code": "(fn kwc-count\n  ([s] (kwc-count s 0))\n  ([s c] (if (empty? s) c (kwc-count (rest s) (+ c 1)))))", "problem": 22, "user": "509dc716e4b08df8156e9e27"}, {"code": "(fn [coll]\n  (loop [n 0 c coll]\n    (if (not-empty c)\n      (recur (inc n) (rest c))\n      n)))", "problem": 22, "user": "5099aea3e4b0efbae1fbc0a0"}, {"code": "(fn [s]\n  (letfn [(cnt [s n]\n            (if (empty? s)\n                n\n                (cnt (rest s) (inc n))))]\n    (cnt s 0)))", "problem": 22, "user": "509e8da7e4b08df8156e9e2f"}, {"code": "#(reduce (fn [a b] (+ a b)) (map (constantly 1) %))", "problem": 22, "user": "509ebf39e4b08df8156e9e33"}, {"code": "reduce (fn [x y] (inc x)) 0", "problem": 22, "user": "509ecefde4b08df8156e9e35"}, {"code": "(fn [seq]\n  (loop [seq seq cnt 0]\n    (if (empty? seq)\n      cnt\n      (recur (rest seq) (inc cnt))\n    ))\n  )", "problem": 22, "user": "509fad62e4b08df8156e9e40"}, {"code": "reduce (fn [sum coll] (inc sum)) 0", "problem": 22, "user": "5091945ee4b0742c82730af0"}, {"code": "(fn [a]\n  (loop [l a c 0]\n    (if (= l ())\n        c\n        (recur (rest l) (+ c 1)))))", "problem": 22, "user": "509f3bc9e4b08df8156e9e39"}, {"code": "(fn [l] (reduce + (map (fn [s] 1) (seq l))))", "problem": 22, "user": "4f030a38535dcb61093f6a47"}, {"code": "(fn [elements]\n  (loop [remaining-elements elements element-count 0]\n    (if (empty? remaining-elements)\n      element-count\n      (recur (rest remaining-elements) (inc element-count)))))", "problem": 22, "user": "50a01937e4b08df8156e9e47"}, {"code": "(fn [x] (reduce + (map (fn [x] 1) x)))", "problem": 22, "user": "50a0267fe4b08df8156e9e4a"}, {"code": "#(loop [coll % cnt 0]\n  (if (empty? coll)\n  cnt \n  (recur (next coll) (inc cnt))))", "problem": 22, "user": "4ecd1143535d23f036227702"}, {"code": "#(if (string? %) (.length %) (.size %))", "problem": 22, "user": "5097cf53e4b00ad8bab4e976"}, {"code": "reduce (fn [a b] (inc a)) 0", "problem": 22, "user": "5098f803e4b0cae2931060a5"}, {"code": "(fn [coll] (loop [index 0 c coll] \n            (if (empty? c) index (recur (+ index 1) (rest c)))))", "problem": 22, "user": "5054e37fe4b0b1b9d1860eb6"}, {"code": "(fn cnt [x] (if (= '() (rest x))(+ 1 0)(+ (cnt (rest x)) 1)))", "problem": 22, "user": "50a00725e4b08df8156e9e46"}, {"code": "reduce #(do %2 (+ 1 %)) 0", "problem": 22, "user": "50a15b50e4b08df8156e9e5e"}, {"code": "#(apply + (map (constantly 1) %))", "problem": 22, "user": "5099a280e4b0cae2931060bb"}, {"code": "(fn [s]\n  ((fn f [s c]\n    (if (empty? s)\n      c\n      (f (rest s) (inc c))))\n   s 0))", "problem": 22, "user": "5092f940e4b097f48cc3857b"}, {"code": "#(apply + (map (constantly 1) %))", "problem": 22, "user": "507ac76be4b09034bfeeb718"}, {"code": "(fn [arg] \n  (reduce + (map (fn [x] 1)  arg))\n  )", "problem": 22, "user": "50a173e4e4b08df8156e9e68"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "50a2f901e4b029e8bace362a"}, {"code": "(fn\n  [xss]\n  ((fn [xs acc] \n    (if (empty? xs)\n      acc\n      (recur (rest xs) (inc acc)))) xss 0))", "problem": 22, "user": "509eeb3be4b08df8156e9e37"}, {"code": "(fn f [l]\n  (cond\n   (not (seq l)) 0\n   true (+ 1 (f (rest l)))))", "problem": 22, "user": "5097ddfce4b087ccf61a7af0"}, {"code": "(fn [coll] (apply + (map (fn [x] 1) coll)))", "problem": 22, "user": "50a39d11e4b0ceace084d491"}, {"code": "(fn my-count [coll]\n  (if (empty? coll)\n      0\n      (+ 1 (my-count (rest coll)))))", "problem": 22, "user": "50a407fee4b08bbd0eb4ed32"}, {"code": "(fn self [l] (if (= [] l) 0 (inc (self (rest l)))))", "problem": 22, "user": "5082fcf2e4b06a522e8c7af5"}, {"code": "(fn ! [cs]\n  (if (empty? cs)\n    0\n    (+ 1 (! (rest cs)))\n  )\n)", "problem": 22, "user": "50a473f7e4b08bbd0eb4ed37"}, {"code": "#(reduce (fn [a _] (inc a)) 0 %)", "problem": 22, "user": "50a482c1e4b0344e360f3bb7"}, {"code": "(fn [list] (- (reduce (fn [x v] (+ x 1)) (conj (seq list) 1)) 1))", "problem": 22, "user": "50a4b6a7e4b0344e360f3bb8"}, {"code": "(fn c [s] (if (empty? s) 0 (+ 1 (c (rest s)))))", "problem": 22, "user": "50a4f36be4b0344e360f3bc9"}, {"code": "(fn s[x] (if(empty? x) 0 (+ 1 (s (rest x)))))", "problem": 22, "user": "50a3f23ae4b08bbd0eb4ed2f"}, {"code": "#(apply + (map (constantly 1) %))", "problem": 22, "user": "5092fe10e4b097f48cc3857e"}, {"code": "#(reduce (fn [s e] (+ 1 s)) 0 %)", "problem": 22, "user": "50a3b55be4b0ceace084d494"}, {"code": "(fn [xs]\n    (loop [ys xs acc 0]\n            (if (empty? ys) acc\n            (recur (rest ys) (inc acc)))))", "problem": 22, "user": "50a025a9e4b08df8156e9e49"}, {"code": "(fn [data]                              \n  (loop [data data, index 0]            \n    (if (= (rest data) [])              \n      (inc index)                             \n      (recur (rest data) (inc index)))))", "problem": 22, "user": "4f47d84fe4b0d56e7bb92bc3"}, {"code": "(fn [c]\n  (reduce (fn [acc _] (inc acc)) 0 c))", "problem": 22, "user": "50608ea0e4b07251188e4456"}, {"code": "#(.size (vec %))", "problem": 22, "user": "4dbe5390535d020aff1edf5c"}, {"code": "(fn [seq]\n  (loop [c 1]\n    (if (= (nth seq c \"not found\") \"not found\")\n      c\n      (recur (+ c 1)))))", "problem": 22, "user": "4eef62ad535d305ff5cb7f1f"}, {"code": "#(loop [c % n 0] (if (empty? c) n (recur (rest c) (inc n))))", "problem": 22, "user": "4fff289ae4b0678c553fc3fd"}, {"code": "(fn cnt[x]\n  ((fn c[x, currentSize]\n    (if (empty? x) currentSize (c (rest x) (+ currentSize 1)))\n  )\n  x 0)\n)", "problem": 22, "user": "50a628e3e4b0aa96157e2620"}, {"code": "(fn [l] (reduce (fn [a b] (inc a)) 0 l))", "problem": 22, "user": "50a4cbbee4b0344e360f3bc2"}, {"code": "(fn [l]\n  (loop [acc 0, l' l]\n    (if (empty? l')\n      acc\n      (recur (inc acc) (rest l')))))", "problem": 22, "user": "509c03f3e4b085ae113522a8"}, {"code": "(fn [coll] (reduce (fn [a i] (+ a 1)) 0 coll))", "problem": 22, "user": "50a6c0fbe4b0aa96157e262c"}, {"code": "#(loop [lise (seq %) x 0] \r\n  (if (= lise ()) x \r\n    (recur (rest lise) (inc x))))", "problem": 22, "user": "50a69e8ce4b0aa96157e2626"}, {"code": "(fn cnt [x]\n    (loop [c 1\n          r x]\n          (if (= '() (rest r))\n            c\n            (recur (inc c) (rest r)))))", "problem": 22, "user": "50981062e4b04e098a4c7268"}, {"code": "#(loop [x %1 i 0]\n  (if (= (first x) nil)\n    i\n    (recur (rest x) (inc i))))", "problem": 22, "user": "50a5f72fe4b0aa96157e2611"}, {"code": "(fn [coll] (reduce + (map (fn [_] 1) coll)))", "problem": 22, "user": "50a7b76de4b090657f4a5cdc"}, {"code": "#(apply + (vals (frequencies %)))", "problem": 22, "user": "50a83315e4b054305ba5a830"}, {"code": "(fn [coll]\n  (loop [c coll cnt 0]\n    (if (empty? c)\n      cnt\n      (recur (rest c) (inc cnt)))))", "problem": 22, "user": "50a83794e4b054305ba5a831"}, {"code": "(fn [col]\n  \t(loop [c col n 0]  \n\t\t\t    (if (nil? c)\n\t\t\t        n\n\t\t\t        (recur (next c) (+ n 1)))))", "problem": 22, "user": "50a6b5e8e4b0aa96157e262a"}, {"code": "#(reduce (fn [cnt n] (+ cnt 1)) 0 %)", "problem": 22, "user": "50a90241e4b0a9a42786e8dc"}, {"code": "(fn  [a]\n(reduce + (reduce (fn [accum x]\n          (conj accum \n                 1))\n        []\n        a))\n\n  )", "problem": 22, "user": "50a85af1e4b054305ba5a833"}, {"code": "(fn [col]\n  (reduce (fn [c e] (inc c)) 0 col))", "problem": 22, "user": "50a935b9e4b0a9a42786e8de"}, {"code": "(partial reduce (fn [acc x] (+ acc 1)) 0)", "problem": 22, "user": "50a9416de4b0a9a42786e8e2"}, {"code": "#(reduce (fn [x y] (inc x)) 0 %)", "problem": 22, "user": "50a93ef5e4b0a9a42786e8e1"}, {"code": "(fn length [l] (if (empty? l) 0 (+ 1 (length (rest l)))))", "problem": 22, "user": "50a9504de4b07e35d68b27ae"}, {"code": "(fn [xs] (apply + (map (fn [a] 1) xs)))", "problem": 22, "user": "50a8a04ae4b0deba384a58b9"}, {"code": "(fn [a]\n  (loop [list a i 0]\n    (if (= (nth list i \"derp\") \"derp\")\n      i\n      (recur list (inc i)))))", "problem": 22, "user": "50a9591fe4b07e35d68b27b0"}, {"code": "(fn ct [x]\n  (cond (nil? (first x)) 0 :else (+ 1 (ct (rest x)))))", "problem": 22, "user": "50467ee2e4b011c5dfee7723"}, {"code": "(fn [l] (reduce (fn [a b] (inc a)) 0 l))", "problem": 22, "user": "4ed152d5535d44c135fd68cc"}, {"code": "(fn counter [x] (if (empty? x) 0 (+ 1 (counter (rest x)))))", "problem": 22, "user": "50a7ab20e4b090657f4a5cdb"}, {"code": "(fn aaa [x] (if (not (empty? x)) (inc (aaa (rest x))) 0))", "problem": 22, "user": "50aa8776e4b056ee01935867"}, {"code": "(fn [x] (reduce + (map (constantly 1) x )))", "problem": 22, "user": "50aa777fe4b056ee01935866"}, {"code": "(partial (fn cnt [c s]\n  (if (= s [])\n  c\n  (cnt (inc c) (rest s)))) 0)", "problem": 22, "user": "50aab057e4b056ee0193586b"}, {"code": "(fn [x] (apply + (map (fn [a] 1) x)))", "problem": 22, "user": "50aaf899e4b0f65d68208504"}, {"code": "(fn [xs] (reduce (fn [x y] (+ 1 x)) 0 xs))", "problem": 22, "user": "4f5a10d8e4b0030a34fb2ae5"}, {"code": "(fn self\n  ([xs] \n    (self (rest xs) 1))\n  ([xs i] \n  (if (empty? xs)\n    i\n    (self (rest xs) (inc i)) ))\n)", "problem": 22, "user": "50ab8ae3e4b01d6eb43ce9a0"}, {"code": "(fn [list] (reduce (fn [acc _] (inc acc)) 0 list))", "problem": 22, "user": "509c2c55e4b085ae113522ab"}, {"code": "(fn cnt [s] (reduce + (map (fn [_] 1) s)))", "problem": 22, "user": "50ad274be4b00424fd5bf71e"}, {"code": "(fn [coll]\n  (loop [total 0\n        coll coll]\n    (if coll\n      (recur (+ 1 total) (next coll))\n      total)))", "problem": 22, "user": "50ab38a8e4b0f65d68208507"}, {"code": "reduce (fn [x y] (inc x)) 0", "problem": 22, "user": "50ac81b9e4b071b89ef2622f"}, {"code": "(fn [x] (reduce (fn [cnt foo] (inc cnt)) 0 x))", "problem": 22, "user": "4fae0319e4b081705acca244"}, {"code": "(fn count1 [coll & cnt]\n  (if (empty? coll)\n       (first cnt)\n       (count1 (rest coll) (+ (or (first cnt) 0) 1))))", "problem": 22, "user": "50adcfe6e4b0a40c9cfb08cb"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "50ab44b2e4b0f65d68208509"}, {"code": "(fn [x]\n  (loop [cnt 0 h (first x) t (rest x)]\n    (if (seq t)\n      (recur (inc cnt) (first t) (rest t))\n      (inc cnt))))", "problem": 22, "user": "50af3393e4b0a40c9cfb08d7"}, {"code": "(fn [list] (reduce + 0 (map (fn [x] 1) list)))", "problem": 22, "user": "50996376e4b0cae2931060b2"}, {"code": "reduce (fn [a b] (+ 1 a)) 0", "problem": 22, "user": "50aca31fe4b071b89ef26230"}, {"code": "reduce (fn [x _] (inc x)) 0", "problem": 22, "user": "50ad7888e4b0a40c9cfb08c7"}, {"code": "(fn [s] (reduce (fn [o _] (+ o 1)) 0 s))", "problem": 22, "user": "50afdf00e4b0c3f5ed5c29a5"}, {"code": "(fn c [x]\n   (if (empty? x)\n     0\n     (+ 1 (c (rest x)))\n   )\n)", "problem": 22, "user": "50ae22c3e4b0a40c9cfb08d0"}, {"code": "#(loop [x 0 s %] (if (empty? s) x (recur (inc x) (rest s))))", "problem": 22, "user": "5078d366e4b08327cd804a5b"}, {"code": "(fn [seq]\n  (reduce (fn [a _] (+ 1 a)) 0 seq))", "problem": 22, "user": "505c02e1e4b032b709c81374"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "50b0804de4b009df37c708bb"}, {"code": "#(reduce (fn [x y] (+ x 1)) 0 %)", "problem": 22, "user": "50a2e3fbe4b029e8bace3629"}, {"code": "(fn [lst]\n  (loop [rem lst cnt 0]\n    (if (empty? rem)\n      cnt\n      (recur (rest rem) (+ 1 cnt)))))", "problem": 22, "user": "50b11fbce4b009df37c708cb"}, {"code": "(fn f [seq] \n  (if (= seq '()) \n    0\n    (+ 1 (f (rest seq)))\n  )\n)", "problem": 22, "user": "509d528de4b0bb99d6371049"}, {"code": "(fn ne [s]\n  (if (= nil (first s))\n      0\n      (inc (ne (rest s)))))", "problem": 22, "user": "50b06b3ae4b009df37c708b9"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4fdce986e4b05e33b9224f74"}, {"code": "#(loop [l % c 0] (if (empty? l) c (recur (rest l) (+ c 1))))", "problem": 22, "user": "508a2c2fe4b016a2107004a1"}, {"code": "(fn [s]\n   (loop [c 1\n          s1 s]\n     (if (next s1)\n       (recur (inc c) (next s1))\n       c)))", "problem": 22, "user": "50b0cffae4b009df37c708c5"}, {"code": "#(loop [v % l 0] (if (seq v) (recur (rest v) (inc l)) l))", "problem": 22, "user": "4f253a49e4b0d66497709ff3"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "502ea967e4b06efe12e8cc76"}, {"code": "#(reduce + (map (fn [_] 1) %))", "problem": 22, "user": "4f3b2b28e4b0e243712b1f26"}, {"code": "#(reduce + (map (fn [_] 1) %))", "problem": 22, "user": "50b29029e4b03ea880433563"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "50b29496e4b03ea880433564"}, {"code": "#(loop [L %1 c 0]\n  (if (empty? L) c\n    (recur (rest L) (inc c))))", "problem": 22, "user": "50afa883e4b0c3f5ed5c29a2"}, {"code": "(fn [x] (reduce (fn [u v] (inc u)) 0 x))", "problem": 22, "user": "50b2e824e4b03ea880433567"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "50b3653ee4b03ea88043356b"}, {"code": "(fn[x] (reduce (fn [a b](inc a)) 0 x))", "problem": 22, "user": "4dad86e0c9a9d6ed0f99dc57"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "50acdd8ce4b07e6f5f367748"}, {"code": "(fn [coll] (reduce + (map (fn [i] 1) coll)))", "problem": 22, "user": "50b0de16e4b009df37c708c6"}, {"code": "reduce (fn [ret _] (inc ret)) 0", "problem": 22, "user": "500e4676e4b0e8bab5c55da5"}, {"code": "(fn [countable] (reduce + (map (fn [i] 1) countable)))", "problem": 22, "user": "50ac6061e4b071b89ef2622e"}, {"code": "reduce (fn [m x] (+ m 1)) 0", "problem": 22, "user": "50b3a715e4b03ea88043356d"}, {"code": "(fn counter [coll] (reduce + (map( constantly 1) coll)))", "problem": 22, "user": "50afdfc0e4b0c3f5ed5c29a6"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "50b28f67e4b03ea880433562"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "508e13abe4b0f17d83ea26c7"}, {"code": "reduce (fn [x,_] (inc x)) 0", "problem": 22, "user": "50b47c46e4b0c464d223d1b8"}, {"code": "(fn [x] \r\n   (letfn [\r\n           (mycount [ml] (if (empty? ml) 0 (+ 1 (mycount (rest ml)))))]\r\n      (mycount x)\r\n      ))", "problem": 22, "user": "50956c2be4b087f34d351ab2"}, {"code": "(fn [l] (reduce (fn [x y] (+ x 1)) 0 l))", "problem": 22, "user": "50b4b70de4b0c464d223d1bc"}, {"code": "(fn ! [x] (if (empty? x) 0 (+ 1 (! (rest x)))))", "problem": 22, "user": "50b4d258e4b0c464d223d1bd"}, {"code": "(fn [f] \n  ((fn [f cpt] (if (empty? f) \n                    cpt \n                    (recur (rest f) (inc cpt)))) f 0)\n  \n  )", "problem": 22, "user": "50b32f0fe4b03ea880433569"}, {"code": "(fn length [collection]\n  (loop [c collection number 0]\n    (if (empty? c)\n      number\n      (recur (rest c) (+ number 1)))))", "problem": 22, "user": "50b51c06e4b0c464d223d1c1"}, {"code": "#(reduce (fn [m i] (inc m)) 0 %)", "problem": 22, "user": "50b4383fe4b001349b2f4abf"}, {"code": "(fn [s] (last (map #(identity %2) s (iterate inc 1))))", "problem": 22, "user": "4f327844e4b0d6649770a092"}, {"code": "(fn [in] \n  (loop [n 0 list in]\n    (if (empty? list)\n        n\n        (recur (+ 1 n) (rest list)))))", "problem": 22, "user": "50456747e4b01f6c9a8b236c"}, {"code": "(fn count' [list]\n  (loop [seq list\n         counter 0]\n    (if (empty? seq)\n      counter\n      (recur (rest seq) (inc counter)))))", "problem": 22, "user": "50b61e7ae4b0e3a8b79a9a68"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "50b65f53e4b0a86f8358ca6e"}, {"code": "(fn [s]\n  (loop [[x & xs] s\n         c 0]\n    (if x\n      (recur xs (inc c))\n      c)))", "problem": 22, "user": "50b67515e4b08fb537db98f3"}, {"code": "reduce (fn [s x] (+ s 1)) 0", "problem": 22, "user": "50b668dde4b08fb537db98f2"}, {"code": "(fn [roll]\n  (letfn [(cnt\n            [current nex n]\n            (if (nil? current)\n              n\n              (recur nex (next nex) (inc n))))]\n    (cnt roll (next roll) 0)))", "problem": 22, "user": "50a991dce4b07e35d68b27b3"}, {"code": "(fn [x] (reduce (fn [c y] (inc c)) 0 x))", "problem": 22, "user": "50b6d704e4b08fb537db98f5"}, {"code": "#(reduce (fn [x _] (inc x)) 0 %)", "problem": 22, "user": "50b63309e4b0a86f8358ca68"}, {"code": "#(loop [l %, c 0] (if (empty? l) c (recur (rest l) (inc c))))", "problem": 22, "user": "50112acee4b0d82cfac69f4c"}, {"code": "#(+ (.lastIndexOf (vec %) (last %)) 1)", "problem": 22, "user": "50b65966e4b0a86f8358ca6c"}, {"code": "reduce (fn [n _] (inc n)) 0", "problem": 22, "user": "50b64b55e4b0a86f8358ca6b"}, {"code": "(fn cnt\n  ([xs] (cnt xs 0))\n  ([xs n] (if-not (empty? xs)\n            (cnt (rest xs) (inc n))\n            n)))", "problem": 22, "user": "4f721e9ee4b07046d9f4f01e"}, {"code": "(fn scount [s] (if (empty? (rest s)) 1 (+ 1 (scount (rest s))) ))", "problem": 22, "user": "50b80cd9e4b01d868da6351a"}, {"code": "#(reduce (fn[x y](+ x 1)) 0  %)", "problem": 22, "user": "50948042e4b04e5742806c4c"}, {"code": "#(reduce (fn [v _] (inc v)) 0  %)", "problem": 22, "user": "50b81a93e4b0cba0e598b64b"}, {"code": "(fn cct [c s] (if (empty? s) c (cct (inc c) (rest s)))) 0", "problem": 22, "user": "50b8de6ce4b0cba0e598b652"}, {"code": "(partial reduce (fn [total _] (inc total)) 0)", "problem": 22, "user": "503f4759e4b00d1a725ff2a9"}, {"code": "(fn cn [l] (if (empty? l) 0 (inc (cn (rest l)))))", "problem": 22, "user": "50b8e9a4e4b0cba0e598b656"}, {"code": "(fn [seq & size] (if (empty? seq) (if size size 0) (recur (rest seq) (+ (if size size 0) 1))))", "problem": 22, "user": "50b90b60e4b0cba0e598b658"}, {"code": "(fn [seq] (reduce + (map (fn [x] 1) seq)))", "problem": 22, "user": "50acbd15e4b071b89ef26234"}, {"code": "(fn cnt\n  ([x] (cnt x 0))\n  ([x y] (if (empty? x) \n      y\n      (cnt (rest x) (+ y 1))\n))\n)", "problem": 22, "user": "50b8e67fe4b0cba0e598b655"}, {"code": "(fn c [x] (reduce + (map (fn[_] 1) x)))", "problem": 22, "user": "50ba28e8e4b04934c218a4b3"}, {"code": "reduce (fn [m i] (+ m 1)) 0", "problem": 22, "user": "50ba3acae4b03e68e4411c78"}, {"code": "(fn [coll]\n  (loop [coll coll acc 0]\n    (or (and (empty? coll) acc)\n        (recur (rest coll) (inc acc)))))", "problem": 22, "user": "50ba4b9ee4b03e68e4411c7b"}, {"code": "reduce #(do %2 (+ 1 %1)) 0", "problem": 22, "user": "50ba40e7e4b03e68e4411c79"}, {"code": "(fn [x]\n  (reduce\n   +\n   (map (fn [y] 1) x)))", "problem": 22, "user": "50b53b6ae4b0c464d223d1c4"}, {"code": "(fn [x]\n  (loop [x x n 0]\n    (if (= x nil) n (recur (next x) (inc n)))))", "problem": 22, "user": "50ba81bfe4b03e68e4411c8f"}, {"code": "(fn [x]\n  (reduce (fn [y _] (inc y)) 0 x))", "problem": 22, "user": "50baa66be4b03e68e4411c94"}, {"code": "#(reduce (fn [x y] (inc x)) 0 %)", "problem": 22, "user": "4f89d489e4b033992c121c7e"}, {"code": "(fn [s] \n  (reduce\n    (fn [x y]\n      (+ x 1)) 0 (seq s)))", "problem": 22, "user": "50ba714ae4b03e68e4411c83"}, {"code": "(fn sillylen [x]\n  (if (empty? x)\n    0\n    (+ 1 (sillylen (rest x)))))", "problem": 22, "user": "50baad40e4b03e68e4411c96"}, {"code": "(fn [s]\n  (loop [se s cnt 0]\n    (if (empty? se)\n      cnt\n      (recur (rest se) (+ 1 cnt)))))", "problem": 22, "user": "50bab629e4b03e68e4411c97"}, {"code": "(fn count1\n  ([n]\n     (count1 n 0))\n  ([n c]\n     (if (empty? n)\n       c\n       (count1 (rest n)  (inc c)))))", "problem": 22, "user": "4f03e7b3535dcb61093f6b7c"}, {"code": "reduce (fn [n _] (inc n)) 0", "problem": 22, "user": "50babc59e4b03e68e4411c98"}, {"code": "(fn [xs]\r\n    (reduce(fn [acc _] (inc acc)) 0 xs))", "problem": 22, "user": "50478418e4b0371827a27bc3"}, {"code": "#(loop [c 0 s %] (if (empty? s) c (recur (+ c 1) (rest s))))", "problem": 22, "user": "50ae0d24e4b0a40c9cfb08ce"}, {"code": "(fn [s] \n  (reduce + (map (fn [x] 1) s)))", "problem": 22, "user": "50bb646de4b03e68e4411ca3"}, {"code": "(fn [x](reduce + (map (fn[y]1) x)))", "problem": 22, "user": "50b4a37ee4b0c464d223d1bb"}, {"code": ";#(reduce + (map (fn [x] 1) %))\n#(reduce (fn[c _] (inc c)) 0 %)", "problem": 22, "user": "50bc759ae4b0594b91591c58"}, {"code": "(fn foo [lst] (if (= '() lst) 0 (+ 1 (foo (rest lst)))))", "problem": 22, "user": "50ae5659e4b0a40c9cfb08d2"}, {"code": "(fn [s]\n         (loop [x 0, l s]\n             (if (empty? l)\n               x\n               (recur (+ x 1) (rest l)))))", "problem": 22, "user": "5000a543e4b0678c553fc40f"}, {"code": "(fn cc [x] (if (empty? x) 0 (inc (cc (rest x)))))", "problem": 22, "user": "50bcfab0e4b0594b91591c64"}, {"code": "(fn [xs]\n  (loop [ys xs\n         n 0]\n    (if (= ys '()) n\n      (recur (rest ys) (inc n)))))", "problem": 22, "user": "50bd6033e4b0594b91591c66"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "50bdd4fee4b0594b91591c84"}, {"code": "reduce #(or (+ % 1) %2) 0", "problem": 22, "user": "50a8cc97e4b0a9a42786e8db"}, {"code": "(fn [s] (reduce + (map (fn [x] 1) s)))", "problem": 22, "user": "50bddea1e4b0594b91591c85"}, {"code": "#(loop [lzt %1 ctr 0]\n  (if (empty? lzt)\n    ctr\n    (recur (rest lzt) (inc ctr))))", "problem": 22, "user": "4ec6dda2535d6d7199dd36da"}, {"code": "(fn [s] (loop [n 0 s s] (if (= s '())  n (recur (+ 1 n) (rest s)))))", "problem": 22, "user": "50bd9194e4b0594b91591c67"}, {"code": "(fn bar[n]\n    (if (empty? (rest n))\n      1\n      (+ 1 (bar (rest n)))\n    )\n  )", "problem": 22, "user": "50be6de4e4b00fb48fed2ef5"}, {"code": "(fn [a]\r\n  \t(loop [mya a countx 0]\r\n\t\t\t(\tif(nil? (seq mya)) countx\r\n\t\t\t\t(recur (rest mya) (inc countx) )\r\n\t\t\t)\r\n\t\t)\r\n)", "problem": 22, "user": "50b25f2ce4b03ea88043355f"}, {"code": "#(reduce (fn [seed value] (inc seed)) 0 %)", "problem": 22, "user": "50be4823e4b0594b91591c8d"}, {"code": "#(\n  \n loop[ s %1, p 0 ](\n   \n   if( empty? s )\n    p\n    (  recur (rest s) ( inc p ))\n\n  )\n  \n)", "problem": 22, "user": "50bf7b72e4b0ffd967a66cc1"}, {"code": "#(+ (first (last (map-indexed (fn [idx itm] [idx itm]) %))) 1)", "problem": 22, "user": "50bfb5fbe4b05ae8c1cbbd9a"}, {"code": "#(.size (seq %))", "problem": 22, "user": "50921f9ae4b09a7d0b586de1"}, {"code": "(fn [n col ] (if (= '() col ) n (recur (+ n 1) (rest col )))) 0", "problem": 22, "user": "50bfe725e4b080409b860f26"}, {"code": "#(loop [n 0 acc %] (if (empty? acc) n (recur (inc n) (rest acc))))", "problem": 22, "user": "50c0a98ee4b096f585049c2e"}, {"code": "(fn [coll]\n  (loop [x 0 coll-step coll]\n    (if (nil? (next coll-step))\n      (inc x)\n      (recur (inc x) (next coll-step)))))", "problem": 22, "user": "4dbd72d0535d020aff1edf43"}, {"code": "(fn [col]\n    (loop [cnt 0 c col]\n       (if (empty? c)\n            cnt\n          (recur \n  \t\t\t(inc cnt) \n\t\t\t\t(rest c)))))", "problem": 22, "user": "50bf74c7e4b0ffd967a66cc0"}, {"code": "#(last (keep-indexed (fn [i _] (+ i 1)) %))", "problem": 22, "user": "50b45ee1e4b08fc3808f30ca"}, {"code": "#(apply + (map (fn [x] 1) %))", "problem": 22, "user": "4f7e7cbde4b06e829148e1cf"}, {"code": "(fn count-it [ls]\n  (loop [n 0\n         l ls]\n    (if (nil? (first l))\n      n\n      (recur (inc n) (rest l)))))", "problem": 22, "user": "50bb9fefe4b0594b91591c36"}, {"code": "(fn count-a-sequence-solution\n  [coll]\n  (loop [a 0 coll coll]\n    (if (seq coll)\n      (recur (+ a 1) (rest coll))\n      a)))", "problem": 22, "user": "50c113bee4b096f585049c37"}, {"code": "(fn [x] \r\n  (loop [collection x total 0]\r\n    (if (empty? collection)\r\n       total\r\n      (recur (nthnext collection 1) (+ total 1))\r\n    )\r\n  )\r\n)", "problem": 22, "user": "50bfbf25e4b05ae8c1cbbd9b"}, {"code": "reduce (fn [acc el] (+ 1 acc)) 0", "problem": 22, "user": "50b68375e4b08fb537db98f4"}, {"code": "(fn [a-seq & more]\n  (if (empty? a-seq)\n    (if more more 0)\n    (recur (rest a-seq) (if more (+ more 1) 1))))", "problem": 22, "user": "4fc524aae4b081705acca37e"}, {"code": "(fn ! [sq] (if (= sq ()) 0 (+ 1 (! (rest sq)))))", "problem": 22, "user": "50c11f5ae4b096f585049c39"}, {"code": "#(loop [l % c 0] \n  (if (empty? l) c \n     (recur (rest l) (inc c))\n)\n)", "problem": 22, "user": "50bc4e73e4b0594b91591c3d"}, {"code": "reduce (fn [s _] (inc s)) 0", "problem": 22, "user": "50afc0f9e4b0c3f5ed5c29a3"}, {"code": "#(reduce (fn [a,i] (+ a 1)) 0 %)", "problem": 22, "user": "50ba5113e4b03e68e4411c7d"}, {"code": "(fn [s] \n  (reduce + (map (fn [x] 1) s)))", "problem": 22, "user": "50c336dde4b00e537d002542"}, {"code": "(fn cnt\n  ([coll] (cnt coll 0))\n  ([coll i] (if (empty? coll) i (cnt (rest coll) (inc i)))))", "problem": 22, "user": "50c32086e4b00e537d00253d"}, {"code": "reduce (fn [a b]  (inc a)) 0", "problem": 22, "user": "4fc863a9e4b0ee37620e1831"}, {"code": "(fn [s] (loop [c 0 r s] (if (nil? r) c (recur \n(inc c) (next r)))))", "problem": 22, "user": "50b24a2fe4b03ea88043355c"}, {"code": "#(apply + (map (constantly 1) %))", "problem": 22, "user": "50bc23e4e4b0594b91591c3c"}, {"code": "reduce (fn[x y](+ 1 x)) 0", "problem": 22, "user": "50c46cfde4b08bdb2b9270a1"}, {"code": "reduce (fn [m i] (+ m 1)) 0", "problem": 22, "user": "50c4baa6e4b0210b849018b0"}, {"code": "(fn [lst]\n  (reduce + (map (fn [num] 1) lst)))", "problem": 22, "user": "4f608e38e4b0defedf855fa8"}, {"code": "#(reduce + (map (fn[x] 1) %))", "problem": 22, "user": "50c5546de4b0951b67b28c18"}, {"code": "(fn [coll]\r\n(loop [c coll sum 0]\r\n  (if (nil? c) sum\r\n(recur (next c)(+ sum 1)))))", "problem": 22, "user": "50503117e4b0a02f9cffdeb5"}, {"code": "(fn [s] (reduce (fn [sum elem] (+ 1 sum)) 0 s))", "problem": 22, "user": "50c62e72e4b00bb60fe0c51b"}, {"code": "(fn [x]\n  (reduce +\n    (map (fn [y] 1) x)))", "problem": 22, "user": "50b19a91e4b03ea880433552"}, {"code": "(fn search [cur x] \n    (if (empty? x) \n  cur\n\t(search (+ cur 1) (drop 1 x))))\n\t0", "problem": 22, "user": "50c64471e4b00bb60fe0c51d"}, {"code": "(fn foo [coll] (if (seq coll) (inc (foo (rest coll))) 0 ))", "problem": 22, "user": "50c57ee7e4b01e21d529c02b"}, {"code": "(fn[ sequence ](reduce (fn[a b ] (+ a 1 )) 0 sequence ))", "problem": 22, "user": "50b525c5e4b0c464d223d1c3"}, {"code": "#((fn f [n lst]\n  (if (= lst '())\n    n\n    (f (+ n 1) (rest lst))))\n   0 %)", "problem": 22, "user": "50ac3e4be4b071b89ef2622d"}, {"code": "(fn my-count [seq]\n        (if (= `() seq)\n            0\n            (+ 1 (my-count (rest seq)))))", "problem": 22, "user": "4feb055ae4b0140c20fb9c14"}, {"code": "(fn [coll]\n  (reduce + (map (fn [x] 1) coll)))", "problem": 22, "user": "509fa9b5e4b08df8156e9e3f"}, {"code": "(fn [xs]\n  (loop [elements xs\n          counter 0]\n    (if (first elements)\n      (recur (rest elements) (+ counter 1))\n      counter)))", "problem": 22, "user": "4e58f2b3535d8a8b8723a29a"}, {"code": "(fn [x]\n  (loop [i 0]\n    (if (empty? (drop i x)) i (recur (inc i)))))", "problem": 22, "user": "50c6fad1e4b00bb60fe0c52d"}, {"code": "reduce #(inc (first %&)) 0", "problem": 22, "user": "50c75d38e4b00bb60fe0c532"}, {"code": "(fn count-seq\n  ([col n]\n    (if (empty? col)\n      n\n      (count-seq (rest col) (inc n))))\n  ([col]\n    (count-seq col 0)))", "problem": 22, "user": "50c7431ae4b00bb60fe0c531"}, {"code": "reduce (fn [r _] (inc r)) 0", "problem": 22, "user": "50bfd849e4b042992946c649"}, {"code": "(fn my-cnt [itms]\n  (alength\n    (to-array itms)))", "problem": 22, "user": "50c7b929e4b00bb60fe0c537"}, {"code": "(fn [lst]\n  (reduce + (map (constantly 1) lst)))", "problem": 22, "user": "4ffc10aae4b0678c553fc3d6"}, {"code": "#(loop [coll %1 result 0]\n  (if (seq coll) (recur (rest coll) (inc result)) result))", "problem": 22, "user": "50c7e98ee4b00bb60fe0c53a"}, {"code": "#((fn mycountintern [list, counter] \n    (if (empty? list)\n      counter\n      (mycountintern (rest list) (+ counter 1))))\n    % 0)", "problem": 22, "user": "50c84ba2e4b00bb60fe0c53e"}, {"code": "#((fn ! [x,y] (if (= x ()) y (! (rest x)  (inc y)))) % 0)", "problem": 22, "user": "50c8697ce4b00bb60fe0c53f"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "50c89c38e4b00bb60fe0c543"}, {"code": "#(reduce + (map (fn[x] 1) %))", "problem": 22, "user": "50c0fac8e4b096f585049c34"}, {"code": "(fn cnt\n  [x]\n    (if (= x '())\n        0\n        (+ 1 (cnt (rest x)))))", "problem": 22, "user": "50c9cdfde4b0bed41a12299d"}, {"code": "(fn [a] (reduce (fn [n _] (+ n 1)) 0 a))", "problem": 22, "user": "50c9ece0e4b0a409464667d8"}, {"code": "(comp \n  (partial reduce + 0) \n  (partial map (fn [_] 1)))", "problem": 22, "user": "50c9e5e3e4b0a409464667d7"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "50cb00e1e4b0f75dcc9a6e53"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "50cb4cf6e4b0f78a8e1645b4"}, {"code": "(fn a [list]\n  (if (= list nil)\n    0\n    (inc (a (next list)))))", "problem": 22, "user": "50cb4eb4e4b0f78a8e1645b5"}, {"code": "(fn cnt [coll]\n  (if (empty? coll)\n    0\n    (+ 1 (cnt (rest coll)))))", "problem": 22, "user": "50ca2faee4b0a409464667dc"}, {"code": "(fn cnt [lst] (if (empty? lst) 0 (inc (cnt (rest lst)))))", "problem": 22, "user": "50b8914ce4b0cba0e598b64d"}, {"code": "(fn cnt [s] (if (first s) (+ 1 (cnt (rest s))) 0))", "problem": 22, "user": "50cc30c5e4b0f78a8e1645bf"}, {"code": "(fn [x] (if (list? x) (.size x)(.length x)))", "problem": 22, "user": "4eb0175b535d7eef30807336"}, {"code": "#(apply + (map (constantly 1) %))", "problem": 22, "user": "50ccf729e4b0f7a459302aac"}, {"code": "(fn x [a] (if (empty? a) 0 (inc (x (rest a)))))", "problem": 22, "user": "50cbc2bbe4b0f78a8e1645bd"}, {"code": "reduce (fn [v _] (inc v)) 0", "problem": 22, "user": "50cae881e4b0f75dcc9a6e51"}, {"code": "(fn [x] (reduce (fn [a b] (inc a)) 0 x))", "problem": 22, "user": "50ce09e6e4b0ffc302be4bc6"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "50cf51d1e4b0e61f11ddcd91"}, {"code": "(fn [s] (loop\n    [swk (vec s)\n  \t cnt 0]\n       (if (empty? swk)\n         cnt\n         (recur (pop swk) (inc cnt)))))", "problem": 22, "user": "508fabf9e4b0ea685a20f769"}, {"code": "(fn [s]\n  (loop [s s\n         c 0]\n    (if (empty? s)\n      c\n      (recur (rest s) (inc c)))))", "problem": 22, "user": "50cf66ffe4b0e61f11ddcd92"}, {"code": "#(loop [cnt % acc 0] (if (empty? cnt) acc (recur (rest cnt) (inc acc))))", "problem": 22, "user": "50997a2be4b0cae2931060b6"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "50ca1a4be4b0a409464667db"}, {"code": "(fn my-count [s] \n  (if (empty? s) \n    0 \n  \t(+ 1 (my-count (rest s)))))", "problem": 22, "user": "50cf94bde4b0abc485cb9bb2"}, {"code": "(fn [lst] (.length (into [] lst)))", "problem": 22, "user": "50d037ace4b00b15ecee9756"}, {"code": "#(loop [x 0 coll %] (if (= nil (first coll)) x (recur (inc x) (rest coll))))", "problem": 22, "user": "503539dee4b0ed9c821488f6"}, {"code": "#(.size (seq %))", "problem": 22, "user": "4f072644535dcb61093f6c20"}, {"code": "reduce (fn [i n] (+ i 1)) 0", "problem": 22, "user": "50d0b466e4b00b15ecee9764"}, {"code": "reduce (fn [r l] (inc r)) 0", "problem": 22, "user": "50c4a354e4b0210b849018af"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "505d70e8e4b0e6aca564be09"}, {"code": "#(reduce (fn [val acc] (+ 1 val)) 0 %)", "problem": 22, "user": "50d04a92e4b00b15ecee975a"}, {"code": "(fn count* ([sequence] (count* sequence 0)) ([sequence so-far] (cond (empty? sequence) so-far :else (count* (rest sequence) (+ so-far 1)))))", "problem": 22, "user": "50d1aaafe4b05a71a896ef58"}, {"code": "#(reduce + (map (fn [_] 1) %))", "problem": 22, "user": "50cf1f88e4b0e61f11ddcd8a"}, {"code": "(fn ccc [l] (if (empty? l) 0 (+ 1 (ccc (rest l)))))", "problem": 22, "user": "50d242c0e4b06ad58337ed0f"}, {"code": "(fn f [p]\n  (if (empty? p)\n    0\n    (inc (f (rest p)))))", "problem": 22, "user": "50d18d00e4b05a71a896ef57"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "50c6068fe4b0c9dc10d15c58"}, {"code": "(fn [s] (\n         (fn [s l] (if s (recur (next s) (+ l 1)) l)) s 0))", "problem": 22, "user": "50d2e74ae4b03c62ef244480"}, {"code": "(fn my-count [lst]\n  (reduce (fn [x y] (+ x 1)) 0 lst))", "problem": 22, "user": "50d2f044e4b03c62ef244483"}, {"code": "(fn myn [myseq]\n   (if (empty? myseq)\n     0\n     (+ (myn (rest myseq)) 1 )\n    )\n)", "problem": 22, "user": "50d3317ee4b049d4ed5650da"}, {"code": "#(loop [cnt 0 coll %] (if (empty? coll) cnt (recur (inc cnt) (rest coll))))", "problem": 22, "user": "4e4179c4535dc968683fc49d"}, {"code": "(fn countList [l]\n  (if (empty? l)\n    0\n    (+ 1 (countList (rest l)))))", "problem": 22, "user": "50d2fa5ce4b049d4ed5650cf"}, {"code": "(fn this ([l] (this l 0)) ([l c] (if (empty? l)  c (this (rest l) (+ c 1)))))", "problem": 22, "user": "504feeb9e4b0a02f9cffdeaa"}, {"code": "(fn [x] (loop [lst x cnt 0] (if (= lst '()) cnt (recur (rest lst) (+ cnt 1)))))", "problem": 22, "user": "50d324dde4b049d4ed5650d7"}, {"code": "(partial (fn x [sum coll] (if (empty? coll) sum  (recur (inc sum) (rest coll) ))) 0)", "problem": 22, "user": "50d179c7e4b05a71a896ef56"}, {"code": "#(reduce (fn [x y] (inc x)) 0 %)", "problem": 22, "user": "50c99e3ee4b0bed41a122997"}, {"code": "apply (fn [& l] (if (empty? (rest l)) 1 (reduce (let [n (atom 1)] (fn [& args] (swap! n inc))) l)))", "problem": 22, "user": "4f05a9cf535dcb61093f6bfc"}, {"code": ";;#(inc (first (last (map-indexed vector %))))\n(comp inc first last (partial map-indexed vector))", "problem": 22, "user": "50d46d53e4b09cc622d65a69"}, {"code": "(fn countit [x & [counter]]\n  (let [counter (if (nil? counter) 0 counter)]\n    (if (empty? x)\n      counter\n      (countit (rest x) (inc counter))\n    )))", "problem": 22, "user": "50d4dde8e4b09cc622d65a72"}, {"code": "(fn my-count \n  ([a] (my-count a 0))\n  ([a b] \n  (if (empty? a) b (recur (rest a) (inc b)))))", "problem": 22, "user": "4f98b69ae4b0dcca54ed6cf4"}, {"code": "(fn [s]\n  (loop [s s c 0]\n    (if (empty? s)\n      c\n      (recur (next s) (inc c)))))", "problem": 22, "user": "50d4909ce4b09cc622d65a6c"}, {"code": "#(reduce + (map (fn [_] 1) %))", "problem": 22, "user": "50d4c626e4b09cc622d65a70"}, {"code": "reduce (fn [x y] (inc x)) 0", "problem": 22, "user": "4fd93c42e4b05e33b9224f35"}, {"code": "(fn cc [x] (if (empty? x) 0 (inc (cc (pop (vec x))))))", "problem": 22, "user": "50d606dae4b0159555a1fc6a"}, {"code": "#(reduce + 0 (map (fn [_] 1) %))", "problem": 22, "user": "4f03f197535dcb61093f6b84"}, {"code": "reduce (fn [x _] (inc x)) 0", "problem": 22, "user": "50d882d4e4b01f0871336e69"}, {"code": "reduce (fn [c _] (inc c)) 0", "problem": 22, "user": "50bd13dee4b0594b91591c65"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4db86557535d1e037afb2191"}, {"code": "(fn [x] (loop [col x, i 0] (if (empty? col) i (recur (rest col) (inc i)))))", "problem": 22, "user": "50d4c940e4b09cc622d65a71"}, {"code": "(fn my-count [x] (if (= x '()) 0 (+ 1 (my-count (rest x)))))", "problem": 22, "user": "50d8f4b6e4b01f0871336e74"}, {"code": "(fn my-count [c] (if (empty? c) 0 (+ 1 (my-count (rest c)))))", "problem": 22, "user": "50d916eae4b0fd36a4b89221"}, {"code": "(fn [x]\n  (loop [i 0 liste x]\n    (if (= liste '())\n      i\n      (recur (inc i) (rest liste)))))", "problem": 22, "user": "50d8de3fe4b01f0871336e72"}, {"code": "(fn [coll] (reduce (fn [c & _] (inc c)) 0 coll))", "problem": 22, "user": "50d93c53e4b0fd36a4b89223"}, {"code": "#(reduce + (map (fn [x] '1) %))", "problem": 22, "user": "4f6538f4e4b07046d9f4ef40"}, {"code": "#(apply + (map (fn [_] 1) %))", "problem": 22, "user": "50d9096fe4b0fd36a4b89220"}, {"code": "(fn [s] \n  (loop [c 0] \n    (if (nil? (nth s c nil))\n      c\n      (recur (inc c)))))", "problem": 22, "user": "50cf2267e4b0e61f11ddcd8c"}, {"code": "(fn [s] (apply + (map (fn [i] 1) s)))", "problem": 22, "user": "50da19bae4b0277ab115b3cd"}, {"code": "#(->> (keep-indexed (fn [i v] i) %1) reverse first (+ 1))", "problem": 22, "user": "50d896eae4b01f0871336e6b"}, {"code": "(fn len [v]\n  (if (first v)\n    (inc (len (rest v)))\n    0))", "problem": 22, "user": "50d4309de4b09cc622d65a66"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "50daffc3e4b02e6ac9592c72"}, {"code": "(fn [v]\n  ((fn x [v i]\n\t(if (first v)\n      (x (rest v) (+ i 1))\n      i\n    )\n  ) v 0)\n)", "problem": 22, "user": "50c53708e4b08ad5e08ded0e"}, {"code": "(fn [x] \n  (loop [x x n 0]\n    (if (empty? x)\n      n\n      (recur (rest x) (+ 1 n))\n    )\n  )\n)", "problem": 22, "user": "4fc5273ce4b081705acca37f"}, {"code": "#(reduce (fn [x y] (inc x)) 0 (vec %))", "problem": 22, "user": "50db8453e4b02e6ac9592c79"}, {"code": "(fn [col] (reduce (fn [x y] (inc x)) 0 col))", "problem": 22, "user": "50dcd61fe4b02e6ac9592c95"}, {"code": "#(reduce (fn [a b] (inc a)) 0 %)", "problem": 22, "user": "5095f761e4b0ba05ca7aebfd"}, {"code": "#(\n\t(fn [x y] \n    \t(if (empty? x)\n\t    \ty\n\t    \t(recur (rest x) (+ 1 y)) )) %1 0)", "problem": 22, "user": "50dc2cd7e4b02e6ac9592c86"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "50dabbcbe4b0844cfa0d8c00"}, {"code": "(fn [coll]\n  (if (= (type coll) String)\n    (.length coll)\n    (.size coll)))", "problem": 22, "user": "50da34e4e4b0f31830755b3c"}, {"code": "(fn [coll]\n  (reduce (fn [x y] (+ x 1)) 0 coll)\n)", "problem": 22, "user": "50de11b2e4b061dbdced7217"}, {"code": "#(reduce (fn [n x] (inc n)) 0 %)", "problem": 22, "user": "50d86fe2e4b01f0871336e67"}, {"code": "(fn this [items]\n  (if (empty? items)\n    0\n    (+ 1 (this (rest items)))))", "problem": 22, "user": "50dee6bbe4b061dbdced721e"}, {"code": "#(reduce + (map (fn [x] (quote 1)) %))", "problem": 22, "user": "50392966e4b088a6a14ca764"}, {"code": "(fn ct [l]\n  (if (first l)\n    (+ 1 (ct (rest l)))\n    0\n  )\n)", "problem": 22, "user": "50df7963e4b061dbdced7227"}, {"code": "(fn _ [x & b]\n  (let [bb (if (= b nil) 0 (first b))]\n    (if (= x '())\n      bb\n      (_ (rest x) (+ bb 1))\n     )\n   )\n)", "problem": 22, "user": "50df6dd0e4b061dbdced7225"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "50dcb958e4b02e6ac9592c92"}, {"code": "(fn [s] (reduce (fn [sum n] (+ sum 1)) 0 s))", "problem": 22, "user": "50dfb660e4b061dbdced7228"}, {"code": "(fn count-seq [sequ]\n  (if (next sequ)\n    (+ 1 (count-seq (rest sequ)))\n    1))", "problem": 22, "user": "50e063f3e4b061dbdced7230"}, {"code": "reduce (fn [a, b] (+ 1 a)) 0", "problem": 22, "user": "50dc1727e4b02e6ac9592c84"}, {"code": "#(reduce (fn [acc _] (+ acc 1)) 0 %)", "problem": 22, "user": "50e09313e4b061dbdced7233"}, {"code": "(fn [x] (reduce (fn [a i] (+ a 1)) 0 x))", "problem": 22, "user": "50e0e18ce4b0090303771ba9"}, {"code": "(fn length [xs] (if (empty? xs) 0 (+ 1 (length (rest xs)))))", "problem": 22, "user": "50dfc83fe4b061dbdced7229"}, {"code": "(fn cnt [s]\n  (if (seq s)\n    (+ 1 (cnt (rest s)))\n    0))", "problem": 22, "user": "50a7ef7fe4b090657f4a5ce0"}, {"code": "#(reduce (fn[x y](inc x)) 0 %)", "problem": 22, "user": "50e008d1e4b061dbdced722a"}, {"code": "reduce (fn [m i] (+ m 1)) 0", "problem": 22, "user": "50e0b5efe4b061dbdced723b"}, {"code": "(fn [x] (loop [s x acc 0] (if (empty? s) acc (recur (rest s) (inc acc)))))", "problem": 22, "user": "50e0d5a3e4b061dbdced723d"}, {"code": "(fn [x]\n  (let [y (fn ttt [a b]\n            (if (empty? a)\n              b\n              (ttt (rest a) (+ 1 b))))]\n    (y x 0)))", "problem": 22, "user": "50e1d3c9e4b0ae09a0e7de74"}, {"code": "(fn [coll]\n  (reduce (fn [m o] (inc m)) 0 coll))", "problem": 22, "user": "50e1b933e4b019fc399ce17e"}, {"code": "(fn[indata]\n  (loop [cnt 0 data indata]\n    (if(empty? data) \n      cnt\n    (recur (inc cnt)(rest data)))))", "problem": 22, "user": "4ef87ea7535dced4c769f25f"}, {"code": "(partial reduce (fn [acc _] (+ acc 1)) 0)", "problem": 22, "user": "50e1ddbce4b0ae09a0e7de75"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "50e1bdd8e4b019fc399ce17f"}, {"code": "#(apply + (map (constantly 1) %))", "problem": 22, "user": "505fd903e4b08f2a82ad10b7"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "50e1ef36e4b0ae09a0e7de77"}, {"code": "#(reduce (fn [c _] (+ c 1)) 0 %)", "problem": 22, "user": "50e09f60e4b061dbdced7237"}, {"code": "(fn this [l] (if (nil? (first l)) 0 (inc (this (rest l)))))", "problem": 22, "user": "5021f0b3e4b00bba4502f7ac"}, {"code": "(fn f [x]\n  (if (= () x) \n    0\n    (+ 1 (f (rest x)))))", "problem": 22, "user": "50e2fcb5e4b056122d085cfe"}, {"code": "(partial (fn mycount [y x] (if (= x '()) y (mycount (+ 1 y) (rest x)))) 0)", "problem": 22, "user": "50e20a07e4b0ae09a0e7de78"}, {"code": "(fn [xs]\n  (reduce #'+\n          (map (fn [x] 1) xs)))", "problem": 22, "user": "50e317a9e4b056122d085d01"}, {"code": "(fn my-count \n           ([coll] (my-count coll 0))\n           ([coll counter]\n             (if (seq coll)\n               (my-count (rest coll) (inc counter))\n               counter)))", "problem": 22, "user": "50dca54ce4b02e6ac9592c90"}, {"code": "(fn [coll]\n  (loop [remain coll len 0]\n    (if (empty? remain)\n      len\n      (recur (rest remain) (inc len)))))", "problem": 22, "user": "50e3cf55e4b01912b3285c45"}, {"code": "#(reduce (fn [a _] (+ 1 a)) 0 %)", "problem": 22, "user": "50e3ddd4e4b01912b3285c47"}, {"code": "(fn [coll] (reduce (fn [a b] (+ a 1)) 0 coll))", "problem": 22, "user": "50e3ec87e4b0463d32072486"}, {"code": "(fn [coll] (reduce (fn [x y] (+ x 1)) 0 coll))", "problem": 22, "user": "50e3ea47e4b0463d32072485"}, {"code": "(fn [coll] (reduce (fn [a _] (inc a)) 0 coll))", "problem": 22, "user": "50e41747e4b0463d32072489"}, {"code": "#(loop [a % counter 1]\n   (if (nil? (next a))\n     counter\n     (recur (next a) (inc counter))))", "problem": 22, "user": "50e3f311e4b0463d32072487"}, {"code": "(fn [x]\n  (loop [cnt 0 xs x]\n    (if (empty? xs)\n      cnt\n      (recur (inc cnt) (rest xs)))))", "problem": 22, "user": "50e19748e4b0ec0e353386e5"}, {"code": "(fn [sq]\n  (loop [cur-sq sq\n         num 0]\n    (if (seq cur-sq)\n      (recur (rest cur-sq) (inc num))\n      num)))", "problem": 22, "user": "50e35b2de4b094329ae7f4bb"}, {"code": "reduce (fn [m i] (+ m 1)) 0", "problem": 22, "user": "50e496e8e4b0cb9ec68fbca0"}, {"code": "(fn len [xs]\n  (reduce + (map (fn [x] 1) xs)))", "problem": 22, "user": "50e4b066e4b0cb9ec68fbca6"}, {"code": "#(reduce (fn c [x y] (+ x 1)) 0 %)", "problem": 22, "user": "50e4f4e9e4b049a987753896"}, {"code": "(fn [xs] (reduce + (map (fn [x] 1) xs)))", "problem": 22, "user": "50e4ff72e4b049a987753897"}, {"code": "(fn [l] (loop [r 0 l l] (if (empty? l) r (recur (inc r) (rest l)))))", "problem": 22, "user": "5081561ae4b0946d0443855a"}, {"code": "(fn mylen[v] (if (empty? v) 0  (+ 1 (mylen (rest v)))))", "problem": 22, "user": "4eda7289535d10e5ff6f530c"}, {"code": "(fn my-count [elements]\n   ((fn ct [lst2 acc]\n     (if (empty? lst2)\n       acc\n       (ct (rest lst2) (+ acc 1))))\n    elements 0))", "problem": 22, "user": "50e5bca5e4b09ae9427b0e75"}, {"code": "#(inc (first (last (map vector (iterate inc 0) %))))", "problem": 22, "user": "4f3713a3e4b0e243712b1ed0"}, {"code": "reduce (fn [i c] (inc i)) 0", "problem": 22, "user": "4f6d23cde4b07046d9f4efc6"}, {"code": "(fn [xs]\n  (loop [xx xs i 0]\n    (if (empty? xx) i\n         (recur (rest xx) (inc i)))\n   )\n )", "problem": 22, "user": "50e62a30e4b09e4d78444225"}, {"code": "#(reduce (fn [x y] (+ x 1)) 0 %)", "problem": 22, "user": "50e67597e4b09e4d78444228"}, {"code": "(fn[cols]\n  (loop [coll cols count1 0]\n    (if (empty? coll)\n      count1\n      (recur (rest coll) (+ 1 count1)))))", "problem": 22, "user": "50e6a086e4b0140bc92c0a8c"}, {"code": "#(reduce (fn [x y] (+ x 1)) 0 %)", "problem": 22, "user": "50e704f5e4b0140bc92c0a94"}, {"code": "(fn [coll]\n  (loop [s coll l 0]\n    (if (empty? s)\n      l\n      (recur (rest s) (+ l 1)))))", "problem": 22, "user": "50e4a5a9e4b0cb9ec68fbca3"}, {"code": "(fn cnt \n  ([xs] (cnt xs 1) ) \n  ([xs n] (cond (= (rest xs) []) n :else (recur (rest xs) (inc n)))))", "problem": 22, "user": "50e647cde4b09e4d78444226"}, {"code": "(fn [t] (.size (seq t)))", "problem": 22, "user": "503e4138e4b06c4e0e1fa263"}, {"code": "#(reduce + (map (constantly 1) %1))", "problem": 22, "user": "50e7cef1e4b077ad597af36a"}, {"code": "#(apply + (map (fn [_] 1) %))", "problem": 22, "user": "50e82c31e4b0ebbe794eb7da"}, {"code": "#(reduce (fn [x _] (inc x)) 0 %)", "problem": 22, "user": "4db29f98535df7e46ed9b6c1"}, {"code": "reduce (fn [a _] (inc a)) 0", "problem": 22, "user": "50d0d4c8e4b00b15ecee976a"}, {"code": "(fn my-count\n  [coll]\n  (if (seq coll)\n    (+ 1 (my-count (rest coll)))\n    0))", "problem": 22, "user": "50e8422de4b0ebbe794eb7de"}, {"code": "(fn [s]\n  (loop [sum 0 my-vect (vec s)]\n      (if (empty? my-vect) \n        sum\n        (recur (inc sum) (rest my-vect))) \n    ))", "problem": 22, "user": "50e448bae4b0463d3207248d"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4e7e8485535db169f9c79716"}, {"code": "(fn element-count [l] (if (empty? l) 0 (inc (element-count (rest l)))))", "problem": 22, "user": "50e86794e4b0ebbe794eb7e4"}, {"code": "(fn [l] (reduce (fn [c d] (+ c 1)) 0 l))", "problem": 22, "user": "50e87252e4b0ebbe794eb7e7"}, {"code": "(fn [seq]\n  (loop [cur seq\n         res 0]\n    (if (empty? cur )\n      res\n      (recur (rest cur) (inc res)))))", "problem": 22, "user": "50e87427e4b0ebbe794eb7e8"}, {"code": "#((fn [s l] \n    (if (empty? s)\n      l\n      (recur (rest s) (inc l)))) % 0)", "problem": 22, "user": "50e88080e4b0ebbe794eb7ea"}, {"code": "reduce (fn [acc _] (inc acc)) 0", "problem": 22, "user": "50e8a340e4b0ebbe794eb7ed"}, {"code": "reduce (fn [n a] (inc n)) 0", "problem": 22, "user": "50e8ff6be4b0ebbe794eb7f3"}, {"code": "(fn kountti [sq]\n  (if (empty? (rest sq))\n    1\n    (+ 1 (kountti (rest sq)))))", "problem": 22, "user": "50b32252e4b03ea880433568"}, {"code": "(fn [lst]\n  (if (= lst '()) 0\n    (loop [l lst\n           n 1]\n      (if (= (rest l) '())\n        n\n        (recur (rest l) (+ n 1))))))", "problem": 22, "user": "50e98510e4b028853d549f3c"}, {"code": "#(reduce (fn [c _] (inc c)) 0 %)", "problem": 22, "user": "50e7dd5de4b077ad597af36b"}, {"code": "(fn cnt\n  ([x] (cnt x 0))\n  ([x i]\n   \t(if (= (rest x) '())\n        (+ i 1)\n       \t(cnt (rest x) (+ i 1)))))", "problem": 22, "user": "50e9d21ce4b02d54280826cf"}, {"code": "(fn [coll] (reduce (fn [acc _] (inc acc)) 0 coll))", "problem": 22, "user": "4e31a077535deb9a81d77f1c"}, {"code": "(fn f\n  [lst]\n  (loop [lst2 lst n 0] \n    (if (= (first lst2) nil)\n      n\n      (recur (rest lst2) (inc n))\n    )\n  )\n)", "problem": 22, "user": "50e84318e4b0ebbe794eb7e1"}, {"code": "#(loop [coll %1 n 0] (if (empty? coll) n (recur (rest coll) (inc n))))", "problem": 22, "user": "50e8cac5e4b0ebbe794eb7ef"}, {"code": "(fn cnt\n      ([lst] (cnt lst 0))\n      ([lst curr_cnt] \n        (if(seq (rest lst))\n          (cnt (rest lst)(inc curr_cnt))\n          (inc curr_cnt)\n          )\n      )\n    )", "problem": 22, "user": "50e69c7ce4b0140bc92c0a8b"}, {"code": "(fn [coll]\n  (loop [coll coll\n         acc 0]\n        (if (empty? coll) \n            acc \n            (recur (rest coll) (inc acc)))))", "problem": 22, "user": "4f03653f535dcb61093f6aa1"}, {"code": "#(last (interleave % (iterate inc 1)))", "problem": 22, "user": "50d8739ae4b01f0871336e68"}, {"code": "(fn func [coll] \n\t(if (= coll '())\n      \t0\n      (+ 1 (func (rest coll)))))", "problem": 22, "user": "50eb292ce4b0346a3e988cbd"}, {"code": "(fn mycount [x]\n  ((fn mycargs [x n]\n     (if (empty? x) \n       n \n       (mycargs (rest x) (+ n 1))\n     )\n    ) x 0)\n  )", "problem": 22, "user": "50e9ed1de4b02d54280826d5"}, {"code": "(fn [coll]\n  (reduce (fn [acc _] (inc acc)) 0 coll))", "problem": 22, "user": "50eb4c32e4b0346a3e988cbf"}, {"code": "#(reduce + (map (fn [_] 1) %))", "problem": 22, "user": "50e61b39e4b09e4d78444224"}, {"code": "reduce (fn [c item] (inc c)) 0", "problem": 22, "user": "50e47fa5e4b0cb9ec68fbc9c"}, {"code": "#(apply + (map (fn [x] 1) %))", "problem": 22, "user": "50ebf779e4b04edc3377703e"}, {"code": "(fn [x] (reduce + 0 (map (fn [y] (+ 0 1)) x)))", "problem": 22, "user": "50ec31bde4b04edc33777044"}, {"code": "(fn c [x y] \n  (if (empty? y)\n    x\n   (c (+ 1 x) (drop 1 y))\n  )) 0", "problem": 22, "user": "50eb905fe4b0eeda2f1f3863"}, {"code": "(fn recSpot [x] (if (= nil (first x))\n          0\n          (inc (recSpot (rest x)))\n          ))", "problem": 22, "user": "50e915eae4b033b0e80d11e9"}, {"code": "reduce (fn [x y] (+ x 1)) 0", "problem": 22, "user": "5047782ce4b0371827a27bc2"}, {"code": "(fn count-sequence [xs]\n\t(reduce (fn [x y] (+ 1 x)) 0 xs))", "problem": 22, "user": "50ed8a5fe4b06330c1f87c3d"}, {"code": "(fn cmt[a] (\n             (fn cnt[x y] (if (= () x) y (cnt (rest x) (+ y 1)))) a 0)\n     \t\t)", "problem": 22, "user": "50eca06ee4b04edc3377704e"}, {"code": "(fn [x] (\n    #(if (empty? %1)\n    %2\n    (recur (rest %) (inc %2)))\n    x 0))", "problem": 22, "user": "50ed5d1be4b06330c1f87c37"}, {"code": "(fn x [coll]\n  (loop [c coll acc 0]\n    (if (empty? c)\n      acc\n      (recur (rest c) (inc acc)))))", "problem": 22, "user": "4f56e322e4b0a7574ea7182d"}, {"code": "(fn cnt [s]\n  (if (empty? s)\n    0\n    (inc (cnt (rest s)))))", "problem": 22, "user": "50ebd63ce4b04edc3377703c"}, {"code": "#(reduce (fn [a _] (inc a)) 0 %)", "problem": 22, "user": "50ed4626e4b01236b1d4983c"}, {"code": "(fn f\n  ([xs] (f xs 0))\n  ([xs n] (if (empty? xs)\n            n\n            (recur (rest xs) (inc n)))))", "problem": 22, "user": "50ee851ee4b06330c1f87c5b"}, {"code": "(fn cnt [xs] \n  (if xs \n    (+ 1 (cnt (next xs)))\n    0))", "problem": 22, "user": "50eafeaae4b0346a3e988cbb"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "50ed1b3be4b01236b1d49838"}, {"code": "(partial reduce (fn [x y] (inc x)) 0 )", "problem": 22, "user": "50eddbc4e4b06330c1f87c4b"}, {"code": "#(alength (into-array %))", "problem": 22, "user": "50ec8d93e4b04edc3377704c"}, {"code": "(fn foo[l] (if (= (first l) nil) 0 (+ 1 (foo (rest l)))))", "problem": 22, "user": "50ef3e5de4b0a78662fa2652"}, {"code": "(fn countElements [x] (if (empty? x) 0 (+ 1 (countElements (rest x)) )))", "problem": 22, "user": "50ef311fe4b0a78662fa2651"}, {"code": "(fn [seq]\n\t(loop [aSeq seq n 0]\n\t  (if (empty? aSeq)     \n\t    n\n\t    (recur (rest aSeq) (inc n)))))", "problem": 22, "user": "50ef585ae4b0bdaecbb47d97"}, {"code": "(fn c\n  [s]\n  (if (empty? s)\n    0\n    (inc (c (rest s)))))", "problem": 22, "user": "50ef77a4e4b0bdaecbb47d99"}, {"code": "reduce #(do %2 (inc %)) 0", "problem": 22, "user": "50ef4e2be4b0a78662fa2653"}, {"code": "(fn [coll]\n  (loop [[f & fs] coll number 0]\n    (if (nil? f)\n      number\n      (recur fs (inc number)))))", "problem": 22, "user": "50ed3c6be4b01236b1d4983b"}, {"code": "(fn total [aseq] (if (= (first aseq) nil) 0\n  (+ 1 (total (rest aseq)))))", "problem": 22, "user": "50d58127e4b0159555a1fc5d"}, {"code": "reduce (fn [n _] (inc n)) 0", "problem": 22, "user": "50ef9a7ae4b0bdaecbb47d9e"}, {"code": "(fn c [xs] \n  (if (empty? xs)\n    0\n    (inc (c (rest xs)))))", "problem": 22, "user": "50eebf46e4b06330c1f87c61"}, {"code": "reduce #(inc (first %&)) 0", "problem": 22, "user": "4ebaf790535dfed6da9c6d6e"}, {"code": "#(reduce (fn [cnt arr] (inc cnt)) 0 %)", "problem": 22, "user": "50b0af04e4b009df37c708bf"}, {"code": "(partial reduce (fn [cnt _] (inc cnt)) 0)", "problem": 22, "user": "50f01f44e4b0bdaecbb47daf"}, {"code": "#(+ 1 (last (sort (keys (zipmap (range) %)))))", "problem": 22, "user": "50ee68fce4b06330c1f87c59"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "50f033e5e4b0bdaecbb47db1"}, {"code": "(fn [lst]\n  (loop [lst,lst i,0]\n    (if (empty? lst)\n      i\n      (recur (rest lst) (inc i) ))))", "problem": 22, "user": "50f0d000e4b0c5f4fa5ddb6f"}, {"code": "(fn [coll] (reduce (fn [n m] (+ n 1)) 0 (seq coll)))", "problem": 22, "user": "50f0ec9ce4b0d527ce5b30df"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "50f17c0de4b06d9538fe2123"}, {"code": "(fn [sq]\n  (letfn [(helper [sq n]\n           (if (empty? sq)\n              n\n              (recur (rest sq) (inc n))))]\n    (helper sq 0)))", "problem": 22, "user": "50f1dedbe4b0897c4366dcd8"}, {"code": "(fn [l] (loop [[x & xs] l n 0] (cond (nil? x) n (empty? xs) (inc n) true (recur xs (inc n)))))", "problem": 22, "user": "50e111f7e4b084616e11c663"}, {"code": "reduce (fn [x y] (inc x)) 0", "problem": 22, "user": "50e1077fe4b03e49d9cce649"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "50ef56dfe4b0bdaecbb47d94"}, {"code": "#((fn [cnt coll] \n    (if (= () coll)\n        cnt\n        (recur (+ 1 cnt) (rest coll)))) 0 %1)", "problem": 22, "user": "50ee145de4b06330c1f87c53"}, {"code": "(fn [xs] (reduce + (map (fn [_] 1) xs)))", "problem": 22, "user": "50ed9e8de4b06330c1f87c44"}, {"code": "(fn a [b] (if (empty? b) 0 (inc (a (rest b)))))", "problem": 22, "user": "50f07b21e4b0bdaecbb47dc2"}, {"code": "#( \n  ( fn mycnt-aux [col1 n] \n                (cond \n                  (= `() col1 ) n \n                  true (mycnt-aux (rest col1) (+ n 1))  ) ) \n               % 0)", "problem": 22, "user": "50ead6ffe4b02d54280826e2"}, {"code": "#(loop [s % c 0] (if (empty? s) c (recur (rest s) (inc c))))", "problem": 22, "user": "50e54fe4e4b049a9877538a0"}, {"code": "(fn [s] (reduce (fn [a b] (inc a)) 0 s))", "problem": 22, "user": "4f592f83e4b0030a34fb2ad2"}, {"code": "(fn counter [xs] (if (empty? xs) 0 (+ 1 (counter (rest xs)))))", "problem": 22, "user": "50ef5703e4b0bdaecbb47d95"}, {"code": "(fn counter [xs] (if (empty? xs) 0 (+ 1 (counter (rest xs)))))", "problem": 22, "user": "50ed1ce7e4b01236b1d49839"}, {"code": "(fn [coll]\n  (loop [cnt 0\n         s (seq coll)]\n    (if s\n      (recur (inc cnt) (seq (rest s)))\n      cnt)))", "problem": 22, "user": "50eff03ce4b0bdaecbb47da1"}, {"code": "reduce (fn [c _] (+ c 1)) 0", "problem": 22, "user": "4f037cb0535dcb61093f6aef"}, {"code": "reduce (fn [n _] (inc n)) 0", "problem": 22, "user": "50742549e4b054001656accf"}, {"code": "(fn one_ahahah [xn] (if (empty? xn)\n                       0\n                       (+ 1 (one_ahahah(rest xn))) ))", "problem": 22, "user": "50edcc53e4b06330c1f87c49"}, {"code": "(fn [s] (reduce + (map (fn [_] 1) s)))", "problem": 22, "user": "4f65140ee4b07046d9f4ef3b"}, {"code": "(fn stuff [x] \n  (if (empty? x)\n    0\n    (inc (stuff (rest x)))\n  )\n)", "problem": 22, "user": "50f4894be4b004d364930528"}, {"code": "#(reduce (fn [x y] (inc x)) 0 %)", "problem": 22, "user": "50f7698ee4b0035e8915184a"}, {"code": "(fn mycount [x] (if (empty? x) 0 (+ 1 (mycount (rest x)))))", "problem": 22, "user": "50f2e5cee4b0ec8ee6fa8643"}, {"code": "#(apply + (map (fn [x]  1) %))", "problem": 22, "user": "4fe9ef2fe4b0547ebccb2479"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "50f8615ae4b0aafb827eb1fa"}, {"code": "reduce (fn [n _] (inc n)) 0", "problem": 22, "user": "50f94727e4b0e7c80cb15a49"}, {"code": "(fn [coll]\n  (if (= coll '(1 2 3 3 1))\n\t5\n    (if (= coll \"Hello World\")\n      11\n      (if (= coll [[1 2] [3 4] [5 6]])\n        3\n        (if (= coll '(13))\n          1\n          (if (= coll '(:a :b :c))\n            3\n            ))))))", "problem": 22, "user": "50f9776be4b0e7c80cb15a4e"}, {"code": "reduce (fn [r v] (inc r)) 0", "problem": 22, "user": "50fa01bce4b07934dda8b0ba"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "50fac9e3e4b07934dda8b0d1"}, {"code": "(partial (fn [n l] (let [list (seq l)] (if (nil? list) n (recur (inc n) (next l))))) 0)", "problem": 22, "user": "50fb46e6e4b0d10d794c19e5"}, {"code": "(fn cnt [x]\n  (loop [work x \n         y 0   \n         ]\n    \n    (if (not= work [])\n      (recur  (drop 1 work) \n              (inc y)\n              )\n      ;else\n      y\n      )\n    )\n  )", "problem": 22, "user": "50fb084ee4b0d10d794c19dd"}, {"code": "#(loop [x % acc 0]\n   (if (empty? x)\n     acc\n     (recur (rest x) (inc acc))))", "problem": 22, "user": "50f3bd98e4b041536e2eca3a"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "50ef1429e4b083781cf16b12"}, {"code": "#(reduce (fn [a _] (inc a)) 0 %)", "problem": 22, "user": "50fbf811e4b0d10d794c19f1"}, {"code": "(fn f [x] (\n\tif (empty? x)\n    \t0\n        (inc (f (rest x)))\n))", "problem": 22, "user": "50fb5e61e4b0d10d794c19e8"}, {"code": "(fn [xs]\n  (let [count' (fn [xs n]\n                (if (empty? xs)\n                  n\n                  (recur (rest xs) (inc n))))]\n    (count' xs 0)))", "problem": 22, "user": "50ec4ed7e4b04edc33777046"}, {"code": "(fn size [sq] (if (empty? sq) 0 (+ 1 (size (rest sq)))))", "problem": 22, "user": "50fbdacfe4b0d10d794c19f0"}, {"code": "(fn [s]\n  (loop [c 0 a (first s) d (rest s)]\n    (if a (recur (inc c) (first d) (rest d))\n      \tc)))", "problem": 22, "user": "50fc299ee4b0d10d794c19f2"}, {"code": "(fn [s] (reduce \n         (fn [l r] (+ l 1))\n         0\n         s\n         ))", "problem": 22, "user": "50facb80e4b07934dda8b0d2"}, {"code": "#(loop [s % n 0] \n   (if (empty? s) n \n     (recur (rest s) (+ 1 n))))", "problem": 22, "user": "4f55ab5ee4b0a7574ea71809"}, {"code": "(fn cntseq [x]\n  (if (= () (rest x))\n    1\n    (inc (cntseq (rest x)))))", "problem": 22, "user": "50fc3589e4b0d10d794c19f3"}, {"code": "( fn [coll] (loop [data coll, index 0]\n    (if (empty? data) index\n    (recur (rest data) (inc index)))) )", "problem": 22, "user": "50b25edae4b03ea88043355e"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "50f8862de4b0aafb827eb203"}, {"code": "#((partial (fn oops [s c] (if (empty? s) c (oops (rest s) (inc c)))) %) 0)", "problem": 22, "user": "50eaec1de4b0346a3e988cb7"}, {"code": "(fn thing [x] (if (empty? x) 0 (+ 1 (thing (rest x)))))", "problem": 22, "user": "50f89404e4b0aafb827eb204"}, {"code": "(fn[x](reduce + 0 (map (fn[y](+ 0 1)) x)))", "problem": 22, "user": "50fc9f6fe4b0d10d794c19fa"}, {"code": "#(inc (last (map-indexed (fn [idx item] idx) %)))", "problem": 22, "user": "50f3ce2ee4b041536e2eca3d"}, {"code": "#(reduce (fn [x y] (inc x)) 0 %)", "problem": 22, "user": "50e80067e4b077ad597af36d"}, {"code": "reduce (fn [cumul _] (+ cumul 1)) 0", "problem": 22, "user": "50f924bbe4b0e7c80cb15a47"}, {"code": "(fn [l] (reduce (fn [a b] (+ 1 a)) 0 l))", "problem": 22, "user": "50fd5c79e4b033b9c38d78cf"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "50fd027be4b0d10d794c19fe"}, {"code": "reduce (fn [a _] (inc a)) 0", "problem": 22, "user": "50fe2420e4b03cd852b4e84a"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "50fe2b87e4b03cd852b4e84b"}, {"code": "(fn foo [s] (if (not (empty? (rest s))) (+ 1 (foo (rest s))) 1))", "problem": 22, "user": "50f9c7fde4b0e7c80cb15a52"}, {"code": "(fn [array](reduce + (map (fn [x](+ 1)) array)))", "problem": 22, "user": "50feb0e1e4b03cd852b4e851"}, {"code": "(fn[v] (reduce #(+ % %2) (map (constantly 1) v)))", "problem": 22, "user": "50feab26e4b03cd852b4e850"}, {"code": "reduce (fn [a _] (inc a) ) 0", "problem": 22, "user": "4f973fb9e4b0dcca54ed6ce8"}, {"code": "(fn myCount [x]\n  (loop [a 0 l x]\n    (if (empty? l) a\n      (recur (+ a 1) (rest l)))))", "problem": 22, "user": "50fdbb7ce4b033b9c38d78d6"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "50f0a554e4b0c5f4fa5ddb6c"}, {"code": "(fn len [x] (reduce (fn [y z] (+ 1 y)) 0 x))", "problem": 22, "user": "50ff5887e4b017584cb41ccd"}, {"code": "reduce (fn [a e] (inc a)) 0", "problem": 22, "user": "50fda371e4b033b9c38d78d1"}, {"code": "(fn [collection] (reduce + (map (constantly 1) collection))) ; replace each element in collection (using 'map') with 1 (constantly 1), then add them together (reduce)", "problem": 22, "user": "50f16832e4b06d9538fe2120"}, {"code": "#(reduce (fn [a b] (inc a)) 0 %)", "problem": 22, "user": "50dade7be4b02e6ac9592c70"}, {"code": "#(reduce (fn [val coll] (+ 1 val))  0 %)", "problem": 22, "user": "51003cfee4b0ab35a0d40a02"}, {"code": "(fn [x] (reduce + (map (fn [x] 1) x)))", "problem": 22, "user": "50f85902e4b0aafb827eb1f8"}, {"code": "(fn countup \n\t\t([s]\n\t\t\t(countup s 0))\n\t\t([s c]\n\t\t\t(if\n\t\t\t\t(= s (empty s))\n\t\t\t\tc\n\t\t\t\t(countup (rest s) (+ c 1))\n\t\t\t)\n\t\t)\n\t)", "problem": 22, "user": "50f84d85e4b0aafb827eb1f7"}, {"code": "(fn [xs] (loop\n           [xs xs\n            x 0]\n           (if (empty? xs)\n             x\n           \t(recur (rest xs) (inc x)))))", "problem": 22, "user": "51008b6fe4b0700a7a02d6e4"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "5100c3ede4b0700a7a02d6e5"}, {"code": "(fn [s]\n  (if (empty? s)\n    0\n    (loop [s1 (rest s) c 1]\n      (if (empty? s1)\n        c\n        (recur (next s1) (inc c))))))", "problem": 22, "user": "50978ca4e4b00ad8bab4e966"}, {"code": "(fn cnt [col] (cond (= col (empty col)) 0 :else (+ 1 (cnt (rest col)))))", "problem": 22, "user": "506aa040e4b05d3b7762c749"}, {"code": "(fn lastitem [items]\n  (if (= nil (seq items)) (num 0) (inc (lastitem (rest items)))))", "problem": 22, "user": "510130d4e4b0bef64c30e268"}, {"code": "(fn [v] (+ 1 (.lastIndexOf (list* v) (last v))))", "problem": 22, "user": "50fb1f5ae4b0d10d794c19e1"}, {"code": "(fn co\n  [s]\n  (if (first s)\n    (inc (co (rest s)))\n    0))", "problem": 22, "user": "5101192ae4b0bef64c30e266"}, {"code": "#(loop [i 0 c %] (if (empty? c) i (recur (inc i) (rest c))))", "problem": 22, "user": "51012ebde4b0bef64c30e267"}, {"code": "#(reduce + (map (fn [x] (+ 0 1)) %))", "problem": 22, "user": "5102ef6be4b00c483ae176fc"}, {"code": "#(reduce (fn [x _] (inc x)) 0 %)", "problem": 22, "user": "5102489de4b00c483ae176f6"}, {"code": "#(loop [x % n 0]\n   (if (empty? x)\n     n\n     (recur (next x) (inc n))))", "problem": 22, "user": "5103807fe4b00c483ae17703"}, {"code": "(fn [xs]\n  (loop [xss xs\n         x 0]\n    (if (seq xss)\n      (recur (rest xss) (inc x))\n      x)))", "problem": 22, "user": "5083e759e4b0c98812d0787e"}, {"code": "(fn my-count \n  ([coll x]\n   (if (= (rest coll) '())\n     x\n     (my-count (rest coll) (+ x 1))))\n  ([coll]\n   (my-count coll 1)))", "problem": 22, "user": "5101b52ce4b0a79bcc8c0e0f"}, {"code": "#(loop [xs %1 cnt 0]\n   (if (empty? xs)\n     cnt\n     (recur (rest xs) (inc cnt))))", "problem": 22, "user": "50f9739ce4b0e7c80cb15a4d"}, {"code": "(fn [lst] (first (last (map vector (iterate inc 1) lst))))", "problem": 22, "user": "51040eb2e4b0432126ba9bb4"}, {"code": "(fn [coll] (loop [[h & t] coll n 0] (if (nil? h) n (recur t (inc n)))))", "problem": 22, "user": "5104dd11e4b0730a5f55ad84"}, {"code": "#(reduce (fn [c _] (inc c)) 0 %)", "problem": 22, "user": "50f48298e4b004d364930527"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "510591dde4b06d28cacc92eb"}, {"code": "reduce (fn [x _] (inc x)) 0", "problem": 22, "user": "51059d33e4b0380e797c7d5c"}, {"code": "#(loop [q % ans 0] (if (nil? q) ans (recur (next q) (+ ans 1))))", "problem": 22, "user": "50fe91c1e4b03cd852b4e84e"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "5100fa94e4b0bef64c30e263"}, {"code": "reduce (fn [m i] (+ m 1)) 0", "problem": 22, "user": "4f5d5202e4b0030a34fb2b38"}, {"code": "(fn [s]\n              (reduce ( fn [acc elem] (+ acc 1)) 0 s))", "problem": 22, "user": "5106c803e4b01150e115ebee"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "5106bc8ae4b01150e115ebec"}, {"code": "reduce (fn [m i] (+ m 1)) 0", "problem": 22, "user": "50dc1689e4b02e6ac9592c83"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "5106d9f3e4b01150e115ebef"}, {"code": "(fn cnt [l]\n  (if (= (first l) nil)\n    0\n    (+ 1 (cnt (rest l)))))", "problem": 22, "user": "51085be5e4b00aa5c85a1024"}, {"code": "#(apply +(map(fn[s]1)%))", "problem": 22, "user": "5107b86de4b05b2b4eee7495"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "50bce014e4b0594b91591c63"}, {"code": "(fn cseq [s]\n  (if (next s)\n    (+ 1 (cseq (next s)))\n    1))", "problem": 22, "user": "51064b76e4b01150e115ebe4"}, {"code": "(fn len [l] (if (= l '()) 0 (inc (len (rest l)))))", "problem": 22, "user": "510931ede4b0c71f76895663"}, {"code": "(fn [lst]\n    (loop [n 0 s lst]\n      (if (empty? s)\n        n\n        (recur (+ n 1) (rest s)))))", "problem": 22, "user": "4e964f4a535dbda64a6f6b42"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "51095588e4b0e34872b3efa5"}, {"code": "(fn [coll]\n  (reduce (fn [n _] (inc n)) 0 coll))", "problem": 22, "user": "510a3cd4e4b06956752d35ad"}, {"code": "(fn [coll] \n  (loop [s coll n 0] \n    (if (empty? s) n (recur (rest s) (inc n)))))", "problem": 22, "user": "50fec710e4b0219f3bc8bd97"}, {"code": "#(loop [a-seq %\n        c 0]\n   (if-not (first a-seq)\n     c\n     (recur (rest a-seq)\n            (inc c))))", "problem": 22, "user": "510aa172e4b0a506d37565b7"}, {"code": "reduce (fn [c _] (inc c)) 0", "problem": 22, "user": "4f82f9f7e4b033992c121c10"}, {"code": "(fn mycount [items] \n  (cond \n    (empty? items) 0\n    :else\n    (+ 1 (mycount (rest items)))\n   )\n)", "problem": 22, "user": "502be4fae4b08f5602f232eb"}, {"code": "(fn __ \n  ([a] (__ a (seq a)))\n  ([a s]\n      (cond \n       (not (empty? s)) (+ 1 (__ \"\" (rest s)))\n       :else 0)))", "problem": 22, "user": "4f23e1cde4b0d66497709fe4"}, {"code": "reduce (fn [a e] (inc a)) 0", "problem": 22, "user": "510747a4e4b05b2b4eee7492"}, {"code": "reduce (fn [a b] (inc a)) 0", "problem": 22, "user": "510b704ee4b078ea71921100"}, {"code": "(fn [x] (reduce (fn [acc +] (inc acc)) 0 x))", "problem": 22, "user": "510b5596e4b078ea719210fd"}, {"code": "(fn [list]\n  (loop [total 0 l list]\n    (if (empty? l)\n      total\n      (recur (+ 1 total) (rest l)))))", "problem": 22, "user": "4f845cd1e4b033992c121c31"}, {"code": "#(let [count-int (fn self [counter [head & more]] (if more (self (+ 1 counter) more) counter))]\n  (count-int 1 %1))", "problem": 22, "user": "50fe9d60e4b03cd852b4e84f"}, {"code": "(fn [x] (reduce + (map (fn [y] 1) x)))", "problem": 22, "user": "510c01bae4b078ea7192110a"}, {"code": "(fn [coll] (reduce + (map (fn [x] 1) coll)))", "problem": 22, "user": "510c67f0e4b078ea71921119"}, {"code": "reduce (fn [x _] (inc x)) 0", "problem": 22, "user": "504e96f0e4b069badc5a33ba"}, {"code": "(fn _count [items]\n  (if (empty? items)\n    0\n    (+ 1 (_count (rest items)))))", "problem": 22, "user": "510cd1dde4b078ea71921124"}, {"code": "(fn [stuff] (reduce + (map (fn [x] 1) stuff)) )", "problem": 22, "user": "510ce3cbe4b078ea71921127"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "510cfba7e4b078ea7192112b"}, {"code": "(partial reduce (fn [x y] (+ x 1)) 0)", "problem": 22, "user": "510d1ff4e4b078ea7192112f"}, {"code": "reduce (fn [a _] (+ 1 a)) 0", "problem": 22, "user": "510cda21e4b078ea71921126"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "5102ac9de4b00c483ae176fa"}, {"code": "#(apply + (map (constantly 1) %))", "problem": 22, "user": "510db6cde4b078ea71921145"}, {"code": "#(apply + (map (fn [_] 1) %))", "problem": 22, "user": "510d59cce4b078ea71921134"}, {"code": "#(reduce (fn [x y] (inc x)) 0 %)", "problem": 22, "user": "510d9d61e4b078ea71921141"}, {"code": "(fn [xs] (reduce (fn [i _] (inc i)) 0 xs))", "problem": 22, "user": "4fc53390e4b081705acca389"}, {"code": "(fn [c] (reduce #(do %2 (inc %)) 0 c ))", "problem": 22, "user": "510e3640e4b07438aa32145a"}, {"code": "(fn \n  [coll]\n  ((fn [coll n]\n     (if (= (next coll) nil)\n       (inc n)\n       (recur (next coll) (inc n))))\n   coll 0))", "problem": 22, "user": "4f5760c3e4b0a7574ea71837"}, {"code": "#(apply + (map (fn [x] 1) %))", "problem": 22, "user": "510dc185e4b078ea71921146"}, {"code": "#(loop [col % len 0]\n   (if (empty? col) len \n     (recur (rest col) (inc len)))\n   )", "problem": 22, "user": "510d3dc6e4b078ea71921132"}, {"code": "(fn [s] (loop [i 0\n               remaining s]\n          (if (empty? remaining)\n            i\n            (recur (inc i) (next remaining)))))", "problem": 22, "user": "507a33dee4b08327cd804a68"}, {"code": "reduce (fn [c _] (inc c)) 0", "problem": 22, "user": "4fe8fda4e4b0547ebccb2438"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "50f07f6ae4b0bdaecbb47dc4"}, {"code": "reduce (fn [acc x] (+ 1 acc)) 0", "problem": 22, "user": "510c123be4b078ea7192110e"}, {"code": "#(loop [k %\n        n 0]\n   (if-not (empty? k) (recur (rest k) (inc n))\n     n))", "problem": 22, "user": "4e975839535dbda64a6f6b52"}, {"code": "(comp (partial apply +) (partial map (constantly 1)))", "problem": 22, "user": "511026b1e4b04c71fce993ec"}, {"code": "(fn [xs] \n  (loop [cnt 0 lst xs]\n    (if (empty? lst)\n      cnt\n      (recur (inc cnt) (rest lst)))))", "problem": 22, "user": "4e74e119535d7a570dd295bc"}, {"code": "#(apply + (map (constantly 1) %))", "problem": 22, "user": "51105c7fe4b04c71fce993ef"}, {"code": "(fn [x] (last (map-indexed (fn [c b] (+ c 1)) x)))", "problem": 22, "user": "51107e6ee4b04c71fce993f2"}, {"code": "(fn [coll] (reduce (fn [x y] (inc x)) 0 coll))", "problem": 22, "user": "510f0b95e4b0faca7c680138"}, {"code": "(fn [x]\n  ((fn [y n]\n     (if (first y)\n       (recur (rest y) (inc n))\n       n)) x 0))", "problem": 22, "user": "5012da69e4b0c8732600222d"}, {"code": "(fn [x]\n  (loop [s x\n         c 1]\n    (if (next s)\n      (recur (rest s) (+ c 1))\n      c)))", "problem": 22, "user": "51113eb8e4b09ff0d31c7ca9"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "50b9e36ae4b04934c218a4aa"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "50b35486e4b03ea88043356a"}, {"code": "(fn f\n  ([coll] (f coll 0))\n  ([coll n]\n    (if (empty? coll)\n      n\n      (recur (rest coll) (inc n)))))", "problem": 22, "user": "51118901e4b03f43822243d2"}, {"code": "#(reduce + (map (fn [x] (quote 1)) %))", "problem": 22, "user": "511163a1e4b0253d64f055a0"}, {"code": "(fn [coll]\n    (reduce + (map (fn [x] (if nil? x) 0 1) coll)))", "problem": 22, "user": "511060fae4b04c71fce993f1"}, {"code": "#(reduce + (map (constantly 1) %) )", "problem": 22, "user": "51126a28e4b0350614f07a74"}, {"code": "#(reduce + (map (fn[x] 1)%))", "problem": 22, "user": "50d3b03fe4b030b634c368b9"}, {"code": "reduce (fn [x _] (inc x)) 0", "problem": 22, "user": "510ec1bce4b07438aa321461"}, {"code": "reduce (fn [m i] (+ m 1)) 0", "problem": 22, "user": "511278bbe4b0350614f07a75"}, {"code": "(fn [x]\r\n\t(if (coll? x) (.size x) (.length x)))", "problem": 22, "user": "510a6bece4b06956752d35af"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "506adad4e4b0a2a5463de37a"}, {"code": "#(+ 1 (last (last (map list % (range)))))", "problem": 22, "user": "5113beeee4b0350614f07a85"}, {"code": "#(loop [x % c 0] (if (empty? x) c (recur (rest x) (inc c))))", "problem": 22, "user": "510b574fe4b078ea719210fe"}, {"code": "#(reduce + (map (fn [n] 1) %))", "problem": 22, "user": "5113e492e4b0029845b11c58"}, {"code": "(fn [s] (reduce (fn [x y] (inc x)) 0 s))", "problem": 22, "user": "510cba32e4b078ea71921121"}, {"code": "(fn [xs]\n  (loop [xs xs, c 0]\n    (if (seq xs)\n      (recur (rest xs) (inc c))\n      c)))", "problem": 22, "user": "511442d0e4b0e9c109bb74d5"}, {"code": "(fn [s]\n  (loop [acc 0\n         s (seq s)]\n    (if (not (seq s))\n      acc\n      (recur (inc acc) (rest s))))\n  )", "problem": 22, "user": "50ef96a1e4b0bdaecbb47d9d"}, {"code": "(fn [coll] (reduce (fn [a _] (inc a)) 0 coll))", "problem": 22, "user": "50cd0fd5e4b0f7a459302aad"}, {"code": "#(-> (map-indexed (fn [i x] i) %1) last inc)", "problem": 22, "user": "510c16afe4b078ea7192110f"}, {"code": "#(inc (first (last (map-indexed vector %))))", "problem": 22, "user": "5112bf27e4b0350614f07a7e"}, {"code": "(fn [x] (reduce + (map (fn [s] 1) x)))", "problem": 22, "user": "51069942e4b01150e115ebe8"}, {"code": "#((fn [s c] (if (empty? s) c (recur (rest s)(inc c)))) % 0)", "problem": 22, "user": "5116009ee4b0d4f670fd2fde"}, {"code": "#(loop [ n 0 , s %] (if (empty? s) n (recur (inc n) (rest s))))", "problem": 22, "user": "5081566ce4b0946d0443855b"}, {"code": "reduce (fn [x y] (inc x)) 0", "problem": 22, "user": "4f74271ae4b044e54cd9a8f6"}, {"code": "(fn [input]\n   (loop [i 0 elements input]\n     (if (empty? elements)\n       i\n       (recur (inc i) (rest elements)))\n     )   \n   )", "problem": 22, "user": "5106dc1be4b01150e115ebf0"}, {"code": "reduce #(do %2 (inc %)) 0", "problem": 22, "user": "5111330de4b09ff0d31c7ca8"}, {"code": "(fn [coll]\n  (loop [coll coll\n         num 0]\n    (if (empty? coll)\n      num\n      (recur (rest coll) (inc num)))))", "problem": 22, "user": "511688d5e4b0b3e208dba05a"}, {"code": "(fn cntlmnts\n  [sqnc]\n  (if (empty? sqnc)\n    0\n    (inc (cntlmnts(rest sqnc)))))", "problem": 22, "user": "5116afdee4b0063b4e3e16d5"}, {"code": "(fn [lst] (loop [c 0 lst lst] (if (seq lst) (recur (inc c) (rest lst)) c)))", "problem": 22, "user": "5116e176e4b0063b4e3e16d7"}, {"code": "(fn my-count [items]\n  (if (empty? items)\n    0\n    (+ 1 (my-count (rest items)))))", "problem": 22, "user": "511720eae4b0063b4e3e16da"}, {"code": "(fn [arr] (loop [i 0] (if (get (vec arr) i) (recur (inc i)) i)))", "problem": 22, "user": "5115c7e4e4b0ce5098ee73c2"}, {"code": "#(loop [s %\n        i 0]\n   (if (empty? s) i \n     (recur (rest s) (inc i))))", "problem": 22, "user": "5114ab7be4b0ce5098ee73b5"}, {"code": "#(loop [n 0, x (vec %)]\n   (if-not (empty? x)\n     (recur (+ n 1) (pop x))\n     n))", "problem": 22, "user": "510b7775e4b078ea71921101"}, {"code": "#(apply + (map (fn [x] 1) %1))", "problem": 22, "user": "51181009e4b0e0897831a60f"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "50e3e108e4b01912b3285c48"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "5116a030e4b0063b4e3e16d4"}, {"code": "#(loop [x % y 0] (if (empty? x) y (recur (rest x) (inc y))))", "problem": 22, "user": "510c8a00e4b078ea7192111f"}, {"code": "(fn [xs] (reduce + (map (fn [_] 1) xs)))", "problem": 22, "user": "5102f4f9e4b00c483ae176fd"}, {"code": "(fn [l] (first (last (map vector (rest (range)) l))))", "problem": 22, "user": "511907a4e4b046de85f62a4d"}, {"code": "#(loop [c 0 s %]\n   (if (next s) (recur (inc c) (next s)) (inc c)))", "problem": 22, "user": "511618b1e4b0d4f670fd2fdf"}, {"code": "(fn mycount [lst] (if (empty? lst) 0 (+ 1 (mycount (rest lst)))))", "problem": 22, "user": "511937eee4b055cfb310d495"}, {"code": "(fn [coll]\n  (loop [acc 0\n         coll coll]\n  \t(if (empty? coll)\n    \tacc\n      \t(recur (inc acc) (rest coll)))))", "problem": 22, "user": "51195e77e4b055cfb310d499"}, {"code": "#(.size (vec %))\n;reduce #(do %2 (+ 1 %)) 0", "problem": 22, "user": "511937e1e4b055cfb310d494"}, {"code": "#(alength (to-array %))", "problem": 22, "user": "51197750e4b057cba170bc99"}, {"code": "#(.length (vec %))", "problem": 22, "user": "5115cf87e4b0ce5098ee73c3"}, {"code": "(fn [coll]\n  (reduce (fn [cnt _] (inc cnt)) 0 coll))", "problem": 22, "user": "4dada426c9a9d6ed2a99dc57"}, {"code": "(fn [l] (reduce (fn [mem b] (+ mem 1)) 0 l))", "problem": 22, "user": "511a31d0e4b09045b2b16941"}, {"code": "(fn [xs] (reduce (fn [memo y] (inc memo)) 0 xs))", "problem": 22, "user": "509ac9cae4b050a581d3d579"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "511a3392e4b09045b2b16943"}, {"code": "(fn my-count [x]\n  (if (empty? x)\n    0\n    (+ 1 (my-count (rest x)))))", "problem": 22, "user": "5118b4e0e4b046de85f62a4c"}, {"code": "(fn [l] (reduce + (map (fn [x] 1) l)))", "problem": 22, "user": "511a0374e4b06c8af011181a"}, {"code": "(fn mycount [elems]\n  (loop [cnt 0 elems elems]\n    (if (empty? elems) cnt\n      (recur (inc cnt) (rest elems)))))", "problem": 22, "user": "5119f3d5e4b06c8af0111818"}, {"code": "(fn runit [x] (if (empty? x) 0 (+ 1 (runit (rest x)))))", "problem": 22, "user": "4fda2f0ae4b05e33b9224f47"}, {"code": "reduce (fn[a b] (inc a)) 0", "problem": 22, "user": "51193314e4b055cfb310d492"}, {"code": "#(alength (object-array%))", "problem": 22, "user": "51156b07e4b0ce5098ee73be"}, {"code": "(fn countList [listParam & restParams]\n                        (do (if (empty? restParams)\n                                (countList listParam 0)\n                                (if (empty? listParam)\n                                        (first restParams)\n                                        (countList (rest listParam) (inc (first restParams)))))))", "problem": 22, "user": "5118a9a3e4b046de85f62a4a"}, {"code": "(fn [x]\n  (loop [acc 0, xs x]\n    (if (not (empty? xs))\n      (recur (inc acc) (next xs))\n      acc)))", "problem": 22, "user": "511aa2a4e4b0c87c59c9670a"}, {"code": "(fn [collection]\n  (loop [cardinality 0 coll collection] \n    (if (empty? coll)\n    \tcardinality\n      \t(recur (inc cardinality) (rest coll))\n     )\n   )\n)", "problem": 22, "user": "5117caa0e4b0e0897831a60d"}, {"code": "(fn\n  [coll]\n  (loop\n    [c 0\n     clct coll]\n    (if (seq clct)\n        (recur (inc c) (rest clct))\n        c)))", "problem": 22, "user": "510967aae4b07c05fdf6dc0f"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "511a98d7e4b0c87c59c96707"}, {"code": "(fn self [s] (if (empty? s) 0 (inc (self (rest s)))))", "problem": 22, "user": "511ac2ede4b0c87c59c9670f"}, {"code": "#(alength (into-array  %))", "problem": 22, "user": "5112931be4b0350614f07a7a"}, {"code": "(fn [col] (reduce (fn [acc x] (+ acc 1)) 0 col))", "problem": 22, "user": "4e81f1ea535db62dc21a62c0"}, {"code": "#(apply + (map (fn [_] 1) %))", "problem": 22, "user": "511a4eb4e4b09045b2b16945"}, {"code": "#(reduce (fn ([] 0) ([acc _] (inc acc))) 0 %)", "problem": 22, "user": "5119ef37e4b06c8af0111817"}, {"code": "#(reduce (fn [a e] (+ 1 a)) 0 %)", "problem": 22, "user": "511a9e69e4b0c87c59c96708"}, {"code": "#(reduce + (map ( fn [x] 1) % ))", "problem": 22, "user": "511b50cfe4b07ab9ec456181"}, {"code": "(fn [data] (loop [i 0 \n             c data]\n            (if (empty? c)\n                i\n              (recur (inc i) (rest c)))))", "problem": 22, "user": "511b810ce4b07ab9ec456182"}, {"code": "(fn toto [x] (if (= '() (rest x)) 1 (+ 1 (toto (rest x)))))", "problem": 22, "user": "511ba290e4b00c2a1fa7ff70"}, {"code": "(fn mycount [coll] (if (= [] coll) 0 (+ 1 (mycount (rest coll)))))", "problem": 22, "user": "51170b49e4b0063b4e3e16d9"}, {"code": "(fn cnt\n  ([xs] (cnt xs 0))\n  ([xs c]\n  (if (empty? xs)\n    c\n    (recur (rest xs) (inc c)))))", "problem": 22, "user": "511c91ace4b00c2a1fa7ff7a"}, {"code": "(fn [l] (reduce (fn [n _] (inc n)) 0 l))", "problem": 22, "user": "511cca27e4b00c2a1fa7ff7d"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "50a3e2eae4b0ceace084d49a"}, {"code": "(fn [l] (loop [ptr l c 0] (if  (empty? ptr) c (recur (rest ptr) (inc c)))))", "problem": 22, "user": "4f47eab2e4b0d56e7bb92bc6"}, {"code": "#(reduce (fn [acc value] (+ 1 acc)) 0 %)", "problem": 22, "user": "511623cbe4b0d4f670fd2fe1"}, {"code": "#(apply + (map (fn [_] 1) %))", "problem": 22, "user": "4e50ad74535dc968683fc4ec"}, {"code": "(fn mycount [seq] (if (empty? seq) 0 (+ 1 (mycount (rest seq)))))", "problem": 22, "user": "511d5d8ee4b022853b0e07a3"}, {"code": "reduce (fn [x y] (+ x 1)) 0", "problem": 22, "user": "511c44fde4b00c2a1fa7ff77"}, {"code": "(fn [l]\n  (\n   (fn [l c]\n    (if (empty? (rest l))\n      (+ c 1)\n      (recur (rest l)(+ c 1))\n    )\n   )\n   l 0\n  )\n)", "problem": 22, "user": "511f1434e4b0cf8688794046"}, {"code": "(fn f2 [col]\n  ((fn f1 [col n] (if (= (rest col) ())\n  \t               n\n                 (f1 (rest col) (+ n 1)))) col 1))", "problem": 22, "user": "511f656ae4b085952a83535e"}, {"code": "#(reduce + (map (fn [m] 1) %))", "problem": 22, "user": "5100d7dbe4b04f1d96d946df"}, {"code": "#(reduce (fn [a b] (inc a)) 0 %)", "problem": 22, "user": "511f9625e4b085952a835362"}, {"code": "(fn this\n    ([c] \n       (this c 0))\n    ([c i] \n       (if (empty? c) i (this (rest c) (inc i)))))", "problem": 22, "user": "511d6a01e4b022853b0e07a5"}, {"code": "(fn [coll]\n\t(loop [n 0\n\t\t   more coll]\n\t\t   (if more\n\t\t   \t(recur (inc n) (next more))\n\t\t   \tn)))", "problem": 22, "user": "51205867e4b0e88f5a20c40f"}, {"code": "(fn [coll]\n  (when-let [s (seq coll)]\n    (reduce #(if-let [x %2]\n               (inc %)) 0 s)))", "problem": 22, "user": "4fc8769be4b0ee37620e1833"}, {"code": "(fn [s]\n  (loop [cnt 0 res s]\n    (if (empty? res)\n      cnt\n      (recur (+ cnt 1) (rest res)))))", "problem": 22, "user": "512088a3e4b0aab57de66d4f"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "511ed0bae4b03e81d390ac2d"}, {"code": "#(apply max (keys (zipmap (iterate inc 1) %)))", "problem": 22, "user": "511f88eee4b085952a83535f"}, {"code": "(fn len [coll] (if (= nil (first coll))\n             0\n             (+ 1 (len (rest coll)))\n             ))", "problem": 22, "user": "512044bbe4b0e88f5a20c40d"}, {"code": "(fn f [x] (if (nil? (first x))\n            0\n            (+ 1 (f (rest x)))))", "problem": 22, "user": "512113b6e4b0ca414459ae93"}, {"code": "(fn [xs] (reduce + (map (fn [_] 1) xs)))", "problem": 22, "user": "512117f1e4b0ca414459ae94"}, {"code": "reduce (fn [m i] (+ m 1)) 0", "problem": 22, "user": "5121cccee4b05ae5a5823c12"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "5118acfbe4b046de85f62a4b"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4f58d922e4b0a7574ea71857"}, {"code": "(fn [col]\n  (reduce \n   (fn [val i]\n    (inc val)) 0 col))", "problem": 22, "user": "511ac026e4b0c87c59c9670e"}, {"code": "(fn [coll] (apply + (map (fn [x] 1) coll)))", "problem": 22, "user": "51227e00e4b068a9582e656c"}, {"code": "(fn [coll] (reduce (fn [cur next] (+ cur 1)) 0 coll))", "problem": 22, "user": "50c4ff23e4b0210b849018b8"}, {"code": "(fn my-count [seqs] \n  (if (= nil seqs) \n    0 \n    (inc (my-count (next seqs)))))", "problem": 22, "user": "4ef2eb4d535dced4c769f226"}, {"code": "reduce (fn [c _] (inc c)) 0", "problem": 22, "user": "512339fce4b03b44edbed434"}, {"code": "(fn [col]\n  (loop [n 0\n        col col]\n    (if (nil? (first col))\n      n\n      (recur (inc n) (rest col)))))", "problem": 22, "user": "5123ac8ee4b061b4c6f0e0b1"}, {"code": "(fn cnt [s] (if (empty? s) 0 (+ 1 (cnt (rest s)))))", "problem": 22, "user": "5123f099e4b02c3f2a072cca"}, {"code": "(fn [x] (loop [xx x c 0] (if (empty? xx) c (recur (rest xx) (inc c)))))", "problem": 22, "user": "4ff2ff7ce4b0678c553fc342"}, {"code": "reduce (fn [n _] (inc n)) 0", "problem": 22, "user": "50c011c6e4b080409b860f29"}, {"code": "(fn [col] (+ (first ( last (map-indexed vector col))) 1))", "problem": 22, "user": "5123b12be4b061b4c6f0e0b2"}, {"code": "reduce (fn [m i] (+ m 1)) 0", "problem": 22, "user": "5105ed16e4b01150e115ebe2"}, {"code": "#(reduce (fn [x y] (+ x 1)) 0 %)", "problem": 22, "user": "5124c38ce4b0ee1bf4cfdcd0"}, {"code": "(fn [coll]\n  (loop [cnt 0\n         coll coll]\n    (if (empty? coll)\n      cnt\n      (recur (inc cnt) (rest coll)))))", "problem": 22, "user": "512474ede4b02c3f2a072cce"}, {"code": "#(loop [n 0 coll %] (if (empty? coll) n (recur (inc n) (rest coll))))", "problem": 22, "user": "511c56d9e4b00c2a1fa7ff78"}, {"code": "(fn [x] (apply + (map #(if (= nil %) 0 1) x)))", "problem": 22, "user": "5125834ae4b05d10e3e395fa"}, {"code": "(partial reduce #(do %& (inc %1)) 0)", "problem": 22, "user": "510acd6ee4b078ea719210f4"}, {"code": "(fn total-number [x]\n  (if (= (first x) nil)\n    0\n    (+ 1 (total-number (rest x)))\n  )\n)", "problem": 22, "user": "5125029de4b0ce9225d2ed3e"}, {"code": "(fn [coll] (loop [lst coll n 0] (if (empty? lst) n (recur (rest lst) (inc n)))))", "problem": 22, "user": "511e3454e4b028ee16def195"}, {"code": "#(reduce (fn [x _] (inc x)) 0 %)", "problem": 22, "user": "5125d963e4b05d10e3e395fe"}, {"code": "(fn [ss]\n  (letfn [(iter [s cnt]\n            (if (empty? s)\n              cnt\n              (recur (rest s) (inc cnt))))]\n  (iter ss 0)))", "problem": 22, "user": "5125745ae4b05d10e3e395f9"}, {"code": "#(->> % (map (fn [x] 1)) (apply +))", "problem": 22, "user": "51256b40e4b05d10e3e395f8"}, {"code": "(fn [coll]\n  (loop [coll coll i 0]\n    (if (empty? coll)\n      i\n      (recur (rest coll) (inc i)) )))", "problem": 22, "user": "51071f2ee4b05b2b4eee748e"}, {"code": "(fn numl [ls] (if (= '() ls)\n                 0\n                 (+ 1 (numl (rest ls)))))", "problem": 22, "user": "4f49c002e4b0d56e7bb92bfd"}, {"code": "(fn mycount [s]\n  (loop [r s\n         c 0]\n    (if (seq r)\n      (recur (rest r) (inc c))\n      c)))", "problem": 22, "user": "512148dae4b05ae5a5823c0f"}, {"code": "reduce (fn [i any] (inc i)) 0", "problem": 22, "user": "5117c31ee4b0e0897831a60c"}, {"code": "(fn [l] (alength (to-array l)))", "problem": 22, "user": "5127aca5e4b08a1940e725b8"}, {"code": "#(reduce (fn [a b] (+ a 1)) (conj (seq %) 0))", "problem": 22, "user": "5127ca90e4b03a34742b42ff"}, {"code": "#(alength (to-array %))", "problem": 22, "user": "512547a3e4b05d10e3e395f4"}, {"code": "(fn f [sequence]\n  (loop [c 0\n         s sequence]\n    (if-not (seq s)\n      c\n      (recur (inc c) (rest s)))))", "problem": 22, "user": "51281b25e4b03a34742b4304"}, {"code": "#(reduce (fn [t n] (+ t 1)) 0 %)", "problem": 22, "user": "5127e504e4b03a34742b4302"}, {"code": "reduce (fn [c _] (inc c)) 0", "problem": 22, "user": "50d3ec8be4b030b634c368bb"}, {"code": "(fn [seq]\n  (loop [cnt 0 s seq]\n    (if (empty? s) cnt\n      (recur (inc cnt) (rest s)))))", "problem": 22, "user": "51284226e4b03a34742b4308"}, {"code": "(fn kount [l]\n  (cond \n   (= l ()) 0 \n   :else (inc (kount (rest l)))))", "problem": 22, "user": "5128554ee4b03a34742b430a"}, {"code": "(fn [seq] (reduce (fn [counter seq] (inc counter)) 0 seq))", "problem": 22, "user": "4db30879535df7e46ed9b6cb"}, {"code": "(fn [x]\n  (loop [arg x acc 0]\n    (if (empty? arg)\n      acc\n      (recur (rest arg) (inc acc)))))", "problem": 22, "user": "512934dde4b03a34742b4315"}, {"code": "#(reduce (fn [x y] (+ x 1)) 0 %)", "problem": 22, "user": "5129b0eee4b02a03fbcee0a7"}, {"code": "(fn [s]\n\t\t(->> (map (fn [e] 1) s)\n\t\t\t(apply +)))", "problem": 22, "user": "5126dbabe4b083bb8f88cf0e"}, {"code": "#(reduce (fn [x,_] (inc x)) 0 %)", "problem": 22, "user": "511d11d7e4b022853b0e079f"}, {"code": "(fn [xs]\n  (loop [xs xs, result 0]\n    (if (empty? xs)\n      result\n      (recur (rest xs) (inc result))))\n  )", "problem": 22, "user": "5129039de4b03a34742b4313"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "512a191fe4b02a03fbcee0a8"}, {"code": "(fn my-count\n  ([objects] (my-count objects 0))\n  ([objects acc]\n   (if (= (first objects) nil)\n     acc\n     (my-count (rest objects) (+ acc 1)))))", "problem": 22, "user": "512a7c70e4b0ff5c4bc1f99d"}, {"code": "(fn [x] (+ (nth (last (map-indexed vector x)) 0) 1))", "problem": 22, "user": "512a5c89e4b0ff5c4bc1f99c"}, {"code": "(fn [seqs] (reduce + (map (fn [x] 1) seqs)))", "problem": 22, "user": "512b8728e4b04d059cf1fd16"}, {"code": "(fn [s] \n  (\n   (fn [s n]\n     (if (seq s) (recur (rest s) (inc n)) n)\n   )\n   s 0)\n)", "problem": 22, "user": "512b9e59e4b04d059cf1fd17"}, {"code": "(fn [s]\n  ((fn [r, cnt]\n    (if (= (rest r) [])\n      (inc cnt)\n      (recur (rest r) (inc cnt))))\n  s 0)\n)", "problem": 22, "user": "512b7a05e4b04d059cf1fd14"}, {"code": "(fn [xs]\n  (loop [i 0 col xs]\n    (if (not (first col))\n      i\n      (recur\n       (inc i)\n       (rest col)))))", "problem": 22, "user": "510fd798e4b04c71fce993dc"}, {"code": "(fn size [lst] (reduce (fn [n _] (inc n)) 0 lst))", "problem": 22, "user": "512bcd74e4b04d059cf1fd19"}, {"code": "(fn count-seq [xs] (reduce (fn [memo n] (+ 1 memo)) 0 xs))", "problem": 22, "user": "512c0000e4b03a42b6300231"}, {"code": "reduce (fn [x _] (inc x)) 0", "problem": 22, "user": "4fe8d1b5e4b0547ebccb2425"}, {"code": "(fn [col] (reduce (fn [cnt ce] (inc cnt)) 0 col))", "problem": 22, "user": "512832dfe4b03a34742b4306"}, {"code": "#(reduce (fn [x y] (inc x)) 0 %)", "problem": 22, "user": "5123cbbae4b061b4c6f0e0b5"}, {"code": "(fn [s]\n  (letfn\n    [(c [s acc]\n        (if (seq s)\n          (recur (next s) (inc acc))\n          acc))]\n    (c s 0)))", "problem": 22, "user": "50a7f2a8e4b090657f4a5ce1"}, {"code": "#(.size (seq %))\n;#(reduce + (map (constantly 1) %))", "problem": 22, "user": "506c273ae4b080c1a96bd6bd"}, {"code": "#(reduce + (map (fn [x _] (identity x)) (repeat 1) %))", "problem": 22, "user": "51057b2be4b06d28cacc92e8"}, {"code": "(fn foo [s] (if (empty? s) 0 (+ 1 (foo (rest s)))))", "problem": 22, "user": "506b40ade4b0eda3100c0905"}, {"code": "reduce (fn [i x] (+ 1 i)) 0", "problem": 22, "user": "512cef56e4b0000438794b5b"}, {"code": "(fn c [lst]\n  (if (empty? lst)\n    0\n    (inc (c (rest lst)))\n  ))", "problem": 22, "user": "512e0f36e4b0b740abc59820"}, {"code": "(fn [x] \n  (loop [s x, i 0] \n   (if (empty? s) \n     i\n     (recur (rest s) (inc i)))))", "problem": 22, "user": "512d3304e4b040332b905b2d"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "512dfc5ee4b0b740abc5981f"}, {"code": "#(reduce (fn [x y] (+ 1 x)) 0 %)", "problem": 22, "user": "511bfa5be4b00c2a1fa7ff74"}, {"code": "(fn nb [coll]\n  (loop [n 0 s (seq coll)]\n    (if s\n      (recur (inc n) (next s))\n      n)))", "problem": 22, "user": "5122925ae4b068a9582e656d"}, {"code": "(fn foo [x] (if (empty? x) 0 (inc (foo (rest x)))))", "problem": 22, "user": "512e58cae4b0b740abc59825"}, {"code": "#(+ 1 (last (map-indexed (fn [idx itm] idx) %)))", "problem": 22, "user": "512eb1e7e4b0b740abc5982a"}, {"code": "reduce (fn [a b] (+ a 1)) 0", "problem": 22, "user": "512eb723e4b0b740abc5982b"}, {"code": "(fn [xs]\n  (loop [xs xs\n        acc 0]\n    (if (empty? xs) acc\n        (recur (rest xs) (inc acc)))))", "problem": 22, "user": "50ed8fd1e4b06330c1f87c3f"}, {"code": "(fn [coll]\n  (loop [x coll, n 0]\n    (if-not (seq x)\n      n\n      (recur (rest x) (inc n)))))", "problem": 22, "user": "511b9017e4b00c2a1fa7ff6b"}, {"code": "#(apply + (map (constantly 1) %))", "problem": 22, "user": "512f74afe4b0762be4c7aadc"}, {"code": "reduce #(or (+ % 1) %2) 0", "problem": 22, "user": "511b9e81e4b00c2a1fa7ff6e"}, {"code": "reduce (fn [x y] (+ 1 (if (number? x) x 1))) 0", "problem": 22, "user": "512f2d17e4b0762be4c7aad8"}, {"code": "(fn [x] (reduce (fn [a b] (+ 1 a)) 0 x))", "problem": 22, "user": "51307b84e4b08c712d3fae39"}, {"code": "(fn [xs] (reduce + (map (fn [x] 1) xs)))", "problem": 22, "user": "4e6f0075535d5021c1a89616"}, {"code": "(fn count-list [list]\n  (if (empty? list)\n   0\n   (+ 1 (count-list (rest list)))))", "problem": 22, "user": "51177fbce4b0e0897831a60b"}, {"code": "#(loop [s % c 0] (if (first s) (recur (rest s) (inc c)) c))", "problem": 22, "user": "5070e31ee4b0e3170b5a8678"}, {"code": "#(reduce (fn [m i] (inc m)) 0 %)", "problem": 22, "user": "4ef9c8f9535dced4c769f26b"}, {"code": "#(reduce (fn [sum value] (+ 1 sum)) 0 %)", "problem": 22, "user": "5130c26fe4b08c712d3fae3a"}, {"code": "(fn [y] (reduce + ((fn [x] (map (fn [_] 1) x)) y )))", "problem": 22, "user": "5130ef01e4b07b22f541297e"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "51301929e4b0e2531888cbde"}, {"code": ";(fn count' [x]\n;  (if (empty? x)\n;    0\n;    (inc (count' (rest x)))))\n\n(fn count' [x]\n  (loop [x x\n         n 0]\n    (if (empty? x)\n      n\n      (recur (rest x) (inc n)))))", "problem": 22, "user": "5131104ae4b09e21d785bdfe"}, {"code": "(partial reduce (fn [a b] (+ a 1)) 0)", "problem": 22, "user": "51000111e4b00d7ad4cab15e"}, {"code": "#(loop [coll %1\n        acc 0]\n   (if (empty? coll)\n     acc\n     (recur (rest coll) (+ acc 1))))", "problem": 22, "user": "512e8f5ce4b0b740abc59829"}, {"code": "(fn [s] (reduce + (map #(when (identity %) 1) s)))", "problem": 22, "user": "51319a53e4b06942423563c8"}, {"code": "(fn c [l] (if (empty? l) 0 (+ 1 (c (rest l)))))", "problem": 22, "user": "5130795ce4b08c712d3fae38"}, {"code": "(fn count-coll[coll] (if (= (rest coll) '()) 1 (+ 1 (count-coll (rest coll)))))", "problem": 22, "user": "512ec712e4b029b11c040781"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "510528a0e4b0730a5f55ad85"}, {"code": "(fn [e] (reduce (fn [x y] (inc x)) 0 e))", "problem": 22, "user": "5132961ee4b039bac947cbb9"}, {"code": "(fn [coll]\n (reduce (fn [a b] (inc a)) 0 coll))", "problem": 22, "user": "5132c6f0e4b021281ec7b6d3"}, {"code": "(fn cnt\n  ([s] (if (empty? s)\n         0\n         (+ 1 (cnt(rest s))))))", "problem": 22, "user": "512da425e4b040332b905b34"}, {"code": "#(loop [xs %\n        i 0]\n   (if (= xs [])\n     i\n     (recur (rest xs) (+ i 1))))", "problem": 22, "user": "5098db05e4b0cae2931060a2"}, {"code": "#(let [l %, c 0] ((fn counter [l c] (if (= l '()) c (counter (rest l) (+ 1 c)))) l c))", "problem": 22, "user": "5133af1de4b0d7a043de8cf2"}, {"code": "(fn [whole-sequence]\n  (loop [s whole-sequence cnt 0]\n    (if (empty? s)\n      cnt\n      (recur (rest s) (+ 1 cnt)))))", "problem": 22, "user": "513294fce4b039bac947cbb8"}, {"code": "(fn f\n  ([coll]\n   (if (next coll)\n     (+ 1 (f (rest coll)))\n     1\n   )\n )\n)", "problem": 22, "user": "5132b1f3e4b039bac947cbbb"}, {"code": "(fn hej\n  ([l] (hej l 0))\n  ([l c]\n   (if (empty? l)\n     c\n     (recur (rest l) (inc c)))))", "problem": 22, "user": "504e12ade4b078edc5f593b7"}, {"code": "(fn cnt [l] (if (empty? l) 0 (inc (cnt (rest l)))))", "problem": 22, "user": "5134973ce4b0230e9f713b42"}, {"code": "#(.size (seq %1))", "problem": 22, "user": "4de52c87535d08e6dec9fdf0"}, {"code": "(fn cnt [l]\n  (if (empty? l)\n    '0\n    (+ 1 (cnt (rest l)))\n  )\n)", "problem": 22, "user": "4dbdecd3535d020aff1edf54"}, {"code": "(fn f [l & {:keys [n] :or {n 0}}] (if (= l ()) n (f (rest l) :n (inc n))))", "problem": 22, "user": "5134f26ae4b014f7348cce29"}, {"code": "(fn [s] (reduce + (map (constantly 1) s)))", "problem": 22, "user": "5130fc48e4b07b22f541297f"}, {"code": "(fn mycount [alist] (\n                      (fn poplist [blist n] (if (empty? blist) n (poplist (rest blist) (inc n)))) \n                        alist 0))", "problem": 22, "user": "51340abbe4b0915833951877"}, {"code": "(partial reduce (fn [c x] (inc c)) 0)", "problem": 22, "user": "513486bde4b0230e9f713b41"}, {"code": "#(loop [cnt 0, lst %]\n   (if (seq lst)\n     (recur (inc cnt) (rest lst))\n     cnt))", "problem": 22, "user": "51352899e4b082aeb3a3f03b"}, {"code": "(fn [x]\n  (loop [ct 0 thing x]\n    (if (empty? thing)\n        ct\n        (recur (inc ct) (rest thing)))))", "problem": 22, "user": "5133e51ae4b0d7a043de8cf6"}, {"code": "#(apply + (map (fn [_] 1) %))", "problem": 22, "user": "51364acfe4b04ac1f358dd51"}, {"code": "(fn my-count [xs]\n  (cond\n   (= '() xs) 0\n   :else (+ 1 (my-count (rest xs)))\n  )\n)", "problem": 22, "user": "51365524e4b04ac1f358dd52"}, {"code": "(fn total-elements [xs]\n  (cond (= (empty? xs) true) 0\n     :else (inc (total-elements (rest xs)))))", "problem": 22, "user": "51251e1fe4b08c6d99a12b87"}, {"code": "(fn count_list [x]\n  (if (empty? x)\n    0\n    (+ 1 (count_list (rest x)))\n  )\n)", "problem": 22, "user": "51361c16e4b04ac1f358dd4b"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "51367626e4b04ac1f358dd53"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "5136ac8be4b04ac1f358dd56"}, {"code": "(fn cnt [xs]\n  (if (= [] xs)\n    0\n    (+ 1 (cnt (rest xs)))\n  )\n)", "problem": 22, "user": "5136f659e4b04059df19f2fd"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "51376d99e4b04059df19f302"}, {"code": "#(loop [s % c 0] (if-not (empty? s) (recur (rest s) (inc c)) c))", "problem": 22, "user": "5137c3b0e4b0509a8b470482"}, {"code": "#((fn docount [x a] \n  (if (empty? a) x \n    (docount (inc x) (rest a))\n  )\n) 0 %)", "problem": 22, "user": "5136ca56e4b04ac1f358dd5a"}, {"code": "(fn [lst]\n  ((fn [lst cnt]\n     (if (= nil (first lst)) cnt (recur (rest lst) (inc cnt))))\n   lst 0))", "problem": 22, "user": "51375360e4b04059df19f300"}, {"code": "#(apply + (map (constantly 1) %))", "problem": 22, "user": "50e3fe8fe4b0463d32072488"}, {"code": "(fn \n  ([coll]\n    (loop [\n           sequ coll\n           counter 0\n           ] \n      (if (empty? sequ) \n        counter        \n        (recur (rest sequ) (inc counter))\n        )\n      )\n    )\n  )", "problem": 22, "user": "51377188e4b04059df19f303"}, {"code": "(fn [thelist] (+ 1 (.lastIndexOf (vec thelist) (last thelist))))", "problem": 22, "user": "5138bccde4b0a5db03d727d8"}, {"code": "(fn [x] ((fn [x n] (if (empty? x) n (recur (rest x) (+ n 1)))) x 0))", "problem": 22, "user": "5137efaae4b0a5db03d727d2"}, {"code": "(fn [seq] (reduce + (map (fn [x] 1) seq )))", "problem": 22, "user": "5138da28e4b0a5db03d727dd"}, {"code": "(fn cou [cont]\n\n    (if (next cont)\n      (inc (cou (rest cont)))\n      1\n      )\n    \n    )", "problem": 22, "user": "5124619ae4b02c3f2a072ccd"}, {"code": "(fn [x] (reduce (fn [a b] (+ a 1)) 0 x))", "problem": 22, "user": "512fba16e4b0a88bb1e00aae"}, {"code": "#(reduce (fn [x y] (inc x)) 0 %)", "problem": 22, "user": "5138f744e4b0a5db03d727df"}, {"code": "#(loop [x % acc 0]\n   (if (empty? x) \n     \tacc\n   (recur (rest x) (inc acc))))", "problem": 22, "user": "4fea8741e4b0140c20fb9c09"}, {"code": "(fn [x] (loop [x x n 0]\n          (if (empty? x) n\n              (recur (rest x) (inc n)))))", "problem": 22, "user": "5139656ce4b0a5db03d727e3"}, {"code": "(fn [s]\n  (loop [s s\n         cnt 0]\n    (if (seq s)\n      (recur (rest s) (inc cnt))\n      cnt)))", "problem": 22, "user": "511a5328e4b09045b2b16946"}, {"code": "#(reduce + (map (fn [n] 1) %))", "problem": 22, "user": "5139ec21e4b067e25a345ebe"}, {"code": "(partial reduce (fn [a s] (+ a 1)) 0)", "problem": 22, "user": "5139ff96e4b067e25a345ec1"}, {"code": "(fn [x] (apply + (map #(do % 1) x)))", "problem": 22, "user": "512f06c5e4b0762be4c7aad7"}, {"code": "#(loop [coll %, i 0]\n   (if (empty? coll)\n     i\n     (recur (next coll) (inc i))))", "problem": 22, "user": "512c0f84e4b03a42b6300232"}, {"code": "reduce (fn [c _] (+ c 1)) 0", "problem": 22, "user": "4f0d45de535d0136e6c22315"}, {"code": "#(reduce + (map (fn [e] 1) %))", "problem": 22, "user": "513a2f23e4b067e25a345ec6"}, {"code": "#(last (interleave % (iterate inc 1)))", "problem": 22, "user": "5138d08be4b0a5db03d727db"}, {"code": "(fn cnt [x] (if (nil? (first x)) 0 (+ 1 (cnt (rest x)))))", "problem": 22, "user": "513b77f3e4b00f740c76c403"}, {"code": "reduce (fn [a b] (+ a 1)) 0", "problem": 22, "user": "5032748ae4b0e78df07b092f"}, {"code": "(fn count2 [acc, x] (if (= x []) acc (count2 (+ acc 1) (rest x)))) 0", "problem": 22, "user": "513c51f2e4b0d636b627c968"}, {"code": "#(loop [coll % result 0] (if (empty? coll) result (recur (rest coll) (inc result))))", "problem": 22, "user": "513a4babe4b067e25a345eca"}, {"code": "(fn my-count [seq]\n  (loop [s seq\n         ret 0]\n    (if (empty? s)\n      ret\n      (recur (rest s) (inc ret)))))", "problem": 22, "user": "513a37e0e4b067e25a345ec7"}, {"code": "(fn annon [xs] (loop [inner-xs xs counter 0] (if-not inner-xs counter (recur (next inner-xs) (inc counter)))))", "problem": 22, "user": "513d121fe4b0e544971636a2"}, {"code": "; My first try\n; #(+ (.lastIndexOf (seq %) (first (reverse %))) 1)\n\n; Second attempt, pourquoi _ ?\n#(reduce + (map (fn [_] 1) %))", "problem": 22, "user": "513d09cbe4b0b86ece9f322e"}, {"code": "(fn [s] (reduce + 0 (map (fn [x] 1) s)))", "problem": 22, "user": "513bb7a6e4b04402f587b77d"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "513db288e4b0825f97f7f960"}, {"code": "(fn [coll] (loop [i 1 result coll] (if (= () (rest result)) i (recur (inc i) (drop 1 result)))))", "problem": 22, "user": "513ca934e4b0b86ece9f3228"}, {"code": "(fn ! [x] (if(empty? x) 0 (+ 1 (!(rest x)))))", "problem": 22, "user": "5139c00ee4b067e25a345ebc"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "513a734de4b067e25a345ecb"}, {"code": "reduce (fn [x _] (inc x)) 0", "problem": 22, "user": "513dca07e4b0825f97f7f962"}, {"code": "reduce (fn [a _] (inc a)) 0", "problem": 22, "user": "513dcc1ce4b0825f97f7f964"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "5138cdbee4b0a5db03d727da"}, {"code": "(fn [x] (reduce + (map #(if (= % %) 1) x)))", "problem": 22, "user": "513dfe2ce4b0825f97f7f966"}, {"code": "(fn [sq] (if (string? sq) (.length sq) (.size sq)))", "problem": 22, "user": "513dc533e4b0825f97f7f961"}, {"code": "#(apply + (map (fn [x] 1) %))", "problem": 22, "user": "513e7a25e4b02b2a3d8235c0"}, {"code": "(fn [col]\n  (loop [c col ret 0]\n    (if (nil? (seq c))\n      ret\n      (recur (rest c) (inc ret)))))", "problem": 22, "user": "513cb853e4b0b86ece9f322b"}, {"code": "reduce (fn [x _] (inc x)) 0", "problem": 22, "user": "513d16f8e4b0e544971636a4"}, {"code": "reduce (fn [x _] (inc x)) 0", "problem": 22, "user": "513edd13e4b051389b345b39"}, {"code": "#((fn plop [c coll]\n    (if (not (empty? coll))  \n      (plop (inc c) (rest coll))\n      c))\n  0 %)", "problem": 22, "user": "50f53694e4b057d4c52de881"}, {"code": "(fn f\n  ([coll] (f coll 0))\n  ([coll n]\n    (if (empty? coll)\n      n\n      (f (rest coll) (inc n)))))", "problem": 22, "user": "513f0565e4b051389b345b3b"}, {"code": "(fn [s](loop [v s n 0] (if (empty? v) n (recur (rest v) (inc n)))))", "problem": 22, "user": "513a49d3e4b067e25a345ec9"}, {"code": "(fn [mylist] (reduce + (map (constantly 1) mylist)))", "problem": 22, "user": "513f5f7de4b051389b345b41"}, {"code": "(fn [seq]( reduce (fn [val,f]( + val 1)) 0 seq ))", "problem": 22, "user": "513f53c6e4b051389b345b40"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "513fb358e4b00f13ea1bd893"}, {"code": "#(loop [acc 0 lst %]\n   (if (empty? lst)\n    acc \n\t(recur (inc acc) (rest lst))))", "problem": 22, "user": "51000df0e4b00d7ad4cab15f"}, {"code": ";; solution 1\n;;#_(fn [seq]\n;;   (loop [s seq\n;;          n 0]\n;;       (if (empty? s)\n;;         n\n;;         (recur (rest s) (inc n)))))\n\n;; solution 2\n(fn [s] \n  (apply + (map (constantly 1) s)))\n\n;; solution 3\n;;(fn [s] \n;;  (reduce #(fn [x y] (+ x 1)) 0 s))", "problem": 22, "user": "51392535e4b0a5db03d727e1"}, {"code": "(fn [x] (inc (.lastIndexOf (vec x) (last x))))", "problem": 22, "user": "5140283fe4b00f13ea1bd89a"}, {"code": "#(+ 1(first (last (map-indexed vector %))))", "problem": 22, "user": "513f400ae4b051389b345b3f"}, {"code": "#(loop [acc 0 xs %] (if (empty? xs) acc (recur (+ acc 1) (rest xs))))", "problem": 22, "user": "513e0d69e4b03c4f66af95e9"}, {"code": "(fn [aseq] (reduce + (map (fn [x] 1) aseq)))", "problem": 22, "user": "5135a74ae4b04ac1f358dd46"}, {"code": "(fn [l] (reduce (fn [c l] (inc c)) 0 l))", "problem": 22, "user": "51411e3be4b05ca1a0b379f3"}, {"code": "#(loop  [coll %,x 0] (if (empty? coll) x ( recur ( next  coll) ( inc x))))", "problem": 22, "user": "513bafa4e4b04402f587b77c"}, {"code": "(fn blah [x]\n\t(if (next x)\n\t    (+ 1 (blah (rest x)))\n\t  1))", "problem": 22, "user": "51416934e4b03d51af0d04f0"}, {"code": "(fn my-count\n  [coll]\n  (if (empty? coll)\n    0\n    (inc (my-count (rest coll)))))", "problem": 22, "user": "5073e7fde4b054001656accb"}, {"code": "(fn [coll]\n  (reduce (fn [x y] (inc x)) 0 coll))", "problem": 22, "user": "514066e3e4b076604f1aa553"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "5141a8f2e4b02fd87f5064c1"}, {"code": "(fn length \n    [v] \n    (if (empty? v) \n        0 \n        (inc (length (rest v)))))", "problem": 22, "user": "5140b7bae4b076604f1aa55b"}, {"code": "#(reduce \n  (fn [counter _] (inc counter))\n  0 %)", "problem": 22, "user": "5141bc82e4b02fd87f5064c5"}, {"code": "(fn [lst] (reduce (fn [cnt value] (inc cnt)) 0 lst))", "problem": 22, "user": "512655b7e4b05d10e3e39603"}, {"code": "(partial reduce (fn [a b] (+ a 1)) 0)", "problem": 22, "user": "51422945e4b0b50abeb46b2e"}, {"code": "#(reduce (fn [a b] (inc a)) 0 %)", "problem": 22, "user": "51424028e4b0b50abeb46b31"}, {"code": "reduce (fn [c _] (inc c)) 0", "problem": 22, "user": "51424cc8e4b0b50abeb46b34"}, {"code": "(fn howdy [s]\n        (if (next s)\n          (+ (howdy (next s))  1)\n          1\n          ))", "problem": 22, "user": "5142154ce4b0b50abeb46b2b"}, {"code": "(fn [l] (reduce (fn [a b] (+ a 1))(cons 1 (rest l))))", "problem": 22, "user": "51421cd5e4b0b50abeb46b2c"}, {"code": "(fn [x]\n  ((fn [x n]\n    (if (seq x)\n      (recur (rest x) (inc n))\n      n))\n   x 0))", "problem": 22, "user": "5142c9c5e4b0c172af7558c7"}, {"code": "(fn f\n  ([coll]\n    (if (empty? coll)\n      (+ 0 0)\n      (+ 1 (f (rest coll))  ))))", "problem": 22, "user": "5142e808e4b0c172af7558c9"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "514282c8e4b0b50abeb46b38"}, {"code": "(fn [l] (reduce (fn [x y] (+ x 1)) 0 l))", "problem": 22, "user": "5141abf1e4b02fd87f5064c3"}, {"code": "(fn cnt [s]\n  (if (= '() s)\n    0\n    (+ 1 (cnt (rest s)))))", "problem": 22, "user": "51430fd9e4b0c172af7558cf"}, {"code": "(fn [s] (loop [c 0 l s] (if-not (seq l) c (recur (inc c) (rest l)))))", "problem": 22, "user": "51435753e4b0c172af7558d5"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "512e7402e4b0b740abc59826"}, {"code": "(fn my-count [coll]\n  (if (= (rest coll) ())\n    1\n    (inc (my-count (rest coll)))\n  )\n)", "problem": 22, "user": "4ff71630e4b0678c553fc388"}, {"code": "#(reduce (fn [a e] (inc a)) 0 %)", "problem": 22, "user": "5142ea50e4b0c172af7558ca"}, {"code": "(fn cat [col](\n          reduce + (map #(do (list %) '1) col)\n                )\n          )", "problem": 22, "user": "51427a8be4b0b50abeb46b37"}, {"code": "#(reduce (fn[l ls] (inc l)) 0 %)", "problem": 22, "user": "5141fafbe4b0b50abeb46b28"}, {"code": "(fn C\n  ([lst] (if (empty? lst) 0 (C (rest lst) 1)))\n  ([lst n] (if (empty? lst) n (C (rest lst) (+ 1 n)))))", "problem": 22, "user": "5143c13ee4b0b4fb4ace5f3b"}, {"code": "(fn [coll] (reduce\n                  (fn [x y] (inc x)) \n                  0 coll)\n  )", "problem": 22, "user": "514358eae4b0c172af7558d6"}, {"code": "#(loop [accum 0 s %] (if (nil? s) accum (recur (inc accum) (next s))))", "problem": 22, "user": "5144af8ee4b0d29bc9e5e33a"}, {"code": "reduce (fn [a b] (inc a)) 0", "problem": 22, "user": "513333a8e4b0e0c0cda41e78"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "51430fb2e4b0c172af7558ce"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "5144f8a7e4b021a5ff8301fb"}, {"code": "reduce (fn [a b] (inc a)) 0", "problem": 22, "user": "513b43ede4b067e25a345ed3"}, {"code": "reduce (fn [a b] (+ 1 a)) 0", "problem": 22, "user": "514457fbe4b0b4fb4ace5f43"}, {"code": "(fn count-elts [lst]\n   (loop [lst lst\n          counter 0]\n  \t\t(if (empty? lst)\n    \t\tcounter\n    \t\t(recur (next lst) (inc counter))\n        )\n  \t)\n)", "problem": 22, "user": "512a8ef7e4b0ff5c4bc1f99e"}, {"code": "reduce (fn [c _] (+ c 1)) 0", "problem": 22, "user": "5144c0a2e4b0d29bc9e5e33b"}, {"code": "reduce (fn [c el] (+ c 1)) 0", "problem": 22, "user": "5141c8e4e4b0b50abeb46b16"}, {"code": "reduce (fn [i x] (inc i)) 0", "problem": 22, "user": "5145832be4b0e8879607340a"}, {"code": "(fn [seq] ((fn [seq n] (if (empty? seq) n (recur (next seq) (+ n 1)))) seq 0))", "problem": 22, "user": "51455e14e4b0e88796073407"}, {"code": "(fn [items] \n          (loop [my-list items\n                 my-count 0]\n                (if (not (seq my-list))\n                    my-count\n                    (recur (rest my-list) (inc my-count)))))", "problem": 22, "user": "5145c116e4b099c3fbe2884a"}, {"code": "(fn [coll]\n  (reduce\n   (fn [n _] (+ n 1))\n   0 coll))", "problem": 22, "user": "5140c505e4b049dea086df40"}, {"code": "(fn [x] (apply + (map #(if % 1 0) x)))", "problem": 22, "user": "5136bc52e4b04ac1f358dd58"}, {"code": "#((fn cnt [n l] (if (= '() l)\n              \tn\n                (cnt (inc n) (rest l))\n             )\n  ) 0 %)", "problem": 22, "user": "51448607e4b0d29bc9e5e336"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "51460e4ce4b04ef915e37314"}, {"code": "(fn [xs] (reduce (fn [a b] (+ a 1)) 0 xs))", "problem": 22, "user": "514677dce4b04ef915e3731a"}, {"code": "(partial (fn count- [c lst] (if-not (seq lst) c (count- (+ 1 c) (rest lst)))) 0)", "problem": 22, "user": "50e135f4e4b084616e11c667"}, {"code": "(fn foo [x] (if (= x []) 0 (+ 1 (foo (rest x)))))", "problem": 22, "user": "5110b8bae4b04c71fce993f4"}, {"code": "(fn [l] (reduce (fn [a b] (+ a 1)) 0 l))", "problem": 22, "user": "51431da2e4b0c172af7558d0"}, {"code": "(fn [xs] (reduce (fn [accum _] (inc accum)) 0 xs))", "problem": 22, "user": "4ffa2009e4b0678c553fc3b6"}, {"code": "#(reduce (fn [cnt coll] (inc cnt)) 0 (seq %))", "problem": 22, "user": "5146df5ae4b04ef915e3731d"}, {"code": "(fn [coll]\n  (loop [coll coll\n         result 0]\n    (if (empty? coll)\n      result\n      (recur (rest coll) (inc result)))))", "problem": 22, "user": "50bf6f93e4b0ffd967a66cbf"}, {"code": "(fn kount\n  ([col n]\n   (if (first col) (kount (rest col) (+ 1 n)) n))\n  ([col]\n   (kount col 0)))", "problem": 22, "user": "51463958e4b04ef915e37318"}, {"code": "(fn size [v]\n  (if (empty? v)\n    0\n    (inc (size (rest v)))))", "problem": 22, "user": "51215927e4b05ae5a5823c10"}, {"code": "reduce (fn [x y] (+ x 1)) 0", "problem": 22, "user": "5146f6fce4b0d12420447957"}, {"code": "(fn [coll] (reduce (fn [current item] (+ current 1)) 0 coll))", "problem": 22, "user": "51479245e4b0541f4bec05ce"}, {"code": "(comp (partial reduce +) (partial map #(if % 1)))", "problem": 22, "user": "514721c6e4b0d520409ed392"}, {"code": "(fn [seq]\n  (let [numElems (fn [seq c]\n  \t\t\t\t\t(if (empty? seq)\n    \t\t\t\t\tc\n    \t\t\t\t\t(recur (rest seq) (+ c 1))\n                    )\n                  )\n        ]\n    \t(numElems seq 0)))", "problem": 22, "user": "514852b4e4b0203766d54154"}, {"code": "(fn cnt [n]\n  (loop [m (vec n) c 0]\n    (if (empty? m) c\n      (recur (pop m) (inc c)))))", "problem": 22, "user": "51485d25e4b0203766d54155"}, {"code": "(fn [group]\n  (let [adder (fn [items total]\n              (if (empty? items) total (recur (rest items) (inc total))))]\n  (adder group 0)\n))", "problem": 22, "user": "5137e11ce4b0a5db03d727d0"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "51489a72e4b05514c84b7cc1"}, {"code": "(fn [c]\n  (let [s (seq c)]\n    (loop [xe s, result 0]\n      (if (seq xe)\n        (recur (rest xe) (inc result))\n        result))))", "problem": 22, "user": "4dcc2435535d5973398f9290"}, {"code": ";; First attempt\n; reduce (fn [x1 x2] (+ 1 x1)) 0 \n\n;; After reading first couple of chapters of book\n(fn [initial-s]\n  (loop [n 0, s initial-s]\n    (if (empty? s)\n      n\n      (recur (inc n) (rest s)))))", "problem": 22, "user": "5146f343e4b04ef915e3731e"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "5148bb40e4b05514c84b7cc5"}, {"code": "#(apply + (map (constantly 1) %))", "problem": 22, "user": "5148bcbee4b05514c84b7cc6"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "513f1f85e4b051389b345b3e"}, {"code": "(fn [s] (reduce + (map (fn [_] 1) s)))", "problem": 22, "user": "51493390e4b05514c84b7ccd"}, {"code": "#(reduce (fn [x y] (inc x)) 0 %)", "problem": 22, "user": "5148bae3e4b05514c84b7cc4"}, {"code": "(fn cnt \n  ([s] (cnt s 1))\n  ([s n] (if (= nil (next s))\n          n\n          (cnt (rest s) (+ n 1)))))", "problem": 22, "user": "51493fd0e4b05514c84b7cce"}, {"code": "(fn [s] (loop [s s n 0] (if (seq s) (recur (rest s) (inc n)) n)))", "problem": 22, "user": "4fcb9c9ae4b0ee37620e185a"}, {"code": "(fn [l] \n  (reduce + (map (fn [x] 1) l)))", "problem": 22, "user": "51469a3ae4b04ef915e3731b"}, {"code": "(fn [coll] (reduce(fn [x y] (inc x)) 0 coll))", "problem": 22, "user": "514633e8e4b04ef915e37317"}, {"code": "(fn [coll]\n  (reduce (fn [x y] (inc x)) 0 coll))", "problem": 22, "user": "514a2fa1e4b0829bd132edb5"}, {"code": "reduce (fn [x y](inc x)) 0", "problem": 22, "user": "51489785e4b05514c84b7cc0"}, {"code": "(fn [xs]\n  (loop [coll xs \n         length 0]\n    (if (nil? (first coll))\n      length\n\t  (recur (rest coll) (+ length 1)))))", "problem": 22, "user": "514a6199e4b0829bd132edb9"}, {"code": "(fn [x] (alength (to-array x)))", "problem": 22, "user": "514b33e8e4b0bd81940b86c9"}, {"code": "(fn f [x] (if (first x) (+ 1 (f (rest x))) 0))", "problem": 22, "user": "514b66f4e4b0bd81940b86cb"}, {"code": "(fn my-count-classic [sq]\n  (loop [coll sq\n         n 0]\n    (cond\n     \t(empty? coll) n\n     \t:else\n     \t(recur (rest coll) (inc n)))))", "problem": 22, "user": "5144e89be4b021a5ff8301f9"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "514d8084e4b019235f6c0588"}, {"code": "#(apply + (map (fn [_] 1) %))", "problem": 22, "user": "51248aa1e4b0ef56ecb14195"}, {"code": "(fn f [x] (if (empty? x) 0 (+ 1 (f (rest x)))))", "problem": 22, "user": "514d398ee4b019235f6c0583"}, {"code": "(fn [s]\n  (loop [s s\n        c 0]\n    (if (seq s)\n      (recur (rest s) (inc c))\n      c)))", "problem": 22, "user": "514c2d05e4b02b8cbb2a9278"}, {"code": "#(.length (vec %))", "problem": 22, "user": "514def61e4b019235f6c0591"}, {"code": "(fn [x] (reduce + (map (fn [x] 1) x)))", "problem": 22, "user": "514cfa27e4b019235f6c057d"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "514d2c7ee4b019235f6c0582"}, {"code": "#( alength(to-array %) )", "problem": 22, "user": "5148d47ee4b05514c84b7cca"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "514e4ae4e4b019235f6c0594"}, {"code": "(fn tn [a] (if (nil? a) 0 (+ 1 (tn (next a)))))", "problem": 22, "user": "51037468e4b00c483ae17702"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "5137fb22e4b0a5db03d727d3"}, {"code": "(fn len [col] (loop [col col res 0] (if (empty? col) res (recur (rest col) (inc res)))))", "problem": 22, "user": "514daf79e4b019235f6c058b"}, {"code": "reduce (fn [r _] (inc r)) 0", "problem": 22, "user": "51473a70e4b0d520409ed394"}, {"code": "(fn [l] (reduce (fn [x y] (inc x)) 0 l))", "problem": 22, "user": "514f80c4e4b0b449e54b8df9"}, {"code": "(fn [l] (reduce (fn [res x] (inc res)) 0 l))", "problem": 22, "user": "513e9aa0e4b02b2a3d8235c4"}, {"code": "(fn [x] (reduce (fn [n i] (inc n)) 0 x) )", "problem": 22, "user": "514c2e78e4b02b8cbb2a9279"}, {"code": "(fn [s]\n          (loop [c 0\n                 it s]\n            (if (empty? it)\n              c\n              (recur (inc c) (next it)))))", "problem": 22, "user": "51502056e4b098b221effc25"}, {"code": "(fn [items]\n  (reduce (fn [a b] (inc a)) 0 items))", "problem": 22, "user": "51508efce4b0c51f0585bbb4"}, {"code": "reduce (fn [a _] (inc a)) 0", "problem": 22, "user": "5150600de4b098b221effc29"}, {"code": "#(alength (.toArray (vec %)))", "problem": 22, "user": "51424c61e4b0b50abeb46b33"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "5149b14de4b0b64cbeae184b"}, {"code": "reduce #(or (+ % 1) %2) 0", "problem": 22, "user": "5150f87ae4b03e678e393ac7"}, {"code": "(fn someshit [x] \n  (if (not-empty x)\n    (+ 1 (someshit (next x)))\n    0\n   ))", "problem": 22, "user": "51516f35e4b03e678e393acd"}, {"code": "#(reduce (fn [x, y] (+ x 1)) 0 %)", "problem": 22, "user": "5151a6bee4b03e678e393ad3"}, {"code": "#(loop [s % n 0]\n   (if(empty? s)\n     n\n     (recur (rest s) (inc n))\n    \n    )\n   \n   )", "problem": 22, "user": "515103a7e4b03e678e393ac8"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "512318b6e4b03b44edbed433"}, {"code": "reduce (fn [x,y] (inc x)) 0", "problem": 22, "user": "5149f383e4b0829bd132edb2"}, {"code": "reduce (fn [a _] (inc a)) 0", "problem": 22, "user": "4fc4e9b5e4b081705acca352"}, {"code": "(fn [l] (reduce (fn [x y] (+ x 1)) 0 l))", "problem": 22, "user": "5151aa14e4b03e678e393ad4"}, {"code": "(fn length [s]\n  (loop [x s len 0]\n    (if (nil? x)\n      len\n      (recur (next x) (inc len)))))", "problem": 22, "user": "5151d574e4b03e678e393ae0"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "5152020de4b03e678e393ae7"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "5016ac54e4b052339a490e7b"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "514afd1be4b0bd81940b86c6"}, {"code": "(fn [s] (let [v (vec s)] (inc (.lastIndexOf v (last v)))))", "problem": 22, "user": "500e3238e4b068062f6e8d8f"}, {"code": "#(loop [data %\n        acc 0]\n   (if (empty? data)\n     acc\n     (recur (rest data) (+ 1 acc))))", "problem": 22, "user": "5152ceeee4b001f44f99bff1"}, {"code": "(fn count1 [n] ( (fn count2 [n2 m] (if (= n2 '()) m (count2 (rest n2) (+ m 1)) )) n 0) )", "problem": 22, "user": "5150ae58e4b03e678e393abe"}, {"code": "(comp alength to-array)", "problem": 22, "user": "51533ecde4b0252ac4b16619"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "5153b1bce4b0252ac4b16639"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "51520024e4b03e678e393ae6"}, {"code": "(fn my-count [l]\n  (if (empty? (rest l))\n    1\n    (+ 1 (my-count (rest l)))))", "problem": 22, "user": "514e0417e4b019235f6c0593"}, {"code": "reduce (fn [acc _] (inc acc)) 0", "problem": 22, "user": "51553ea7e4b06c5f6a1490a2"}, {"code": "(fn my-count [x]\n  (if (empty? x)\n    0\n    (+ 1 (my-count (rest x)))))", "problem": 22, "user": "51554b12e4b06c5f6a1490a4"}, {"code": "(partial reduce (fn [r x] (inc r)) 0)", "problem": 22, "user": "514f0723e4b019235f6c0599"}, {"code": "(fn [xs] \n  (reduce + (map (fn [x] 1) xs)) \n)", "problem": 22, "user": "51558136e4b06c5f6a1490a8"}, {"code": "(fn num-elements [col] \n  (if (empty? (rest col))\n    1\n    (inc (num-elements (rest col)))))", "problem": 22, "user": "51551bbde4b0179c5115f4e7"}, {"code": "(fn [coll]\n  (reduce (fn [x y] (+ 1 x)) 0 coll))", "problem": 22, "user": "5150a7d7e4b03e678e393abb"}, {"code": "(fn [x] (reduce + (map (fn [y] 1) x)))", "problem": 22, "user": "51547920e4b084ca81ee2e1c"}, {"code": "reduce (fn [cnt i] (inc cnt)) 0", "problem": 22, "user": "5153316ce4b0252ac4b16611"}, {"code": "reduce (fn [acc _] (+ acc 1)) 0", "problem": 22, "user": "5154c361e4b0179c5115f4e3"}, {"code": "(fn counter [sq]\n  (apply + (map (fn [x] 1) sq)))", "problem": 22, "user": "515737f0e4b0b0b4b87062d0"}, {"code": "(fn [ls]\n  (loop [l ls \n         c 0]\n    (if (empty? l)\n      c\n      (recur (rest l) (+ c 1)))))", "problem": 22, "user": "5154fa3fe4b0179c5115f4e6"}, {"code": "(fn count-it [x]\n\n  (loop [l x acc 0]\n  (if (empty? l)\n    acc\n    (recur (rest l)(inc acc))\n    )\n    \n  )\n  )", "problem": 22, "user": "5157d8bce4b0b0b4b87062d6"}, {"code": "#((fn [x acc]\n   (if (empty? x)\n     acc\n     (recur (rest x) (+ 1 acc))))\n  %1 0)", "problem": 22, "user": "515828b8e4b0a069fd272c71"}, {"code": "reduce (fn [x _] (+ x 1)) 0", "problem": 22, "user": "51584459e4b0a069fd272c74"}, {"code": "#(loop \n   [c 0 s %]\n   (if (empty? s) c\n     (recur (inc c) (rest s))))", "problem": 22, "user": "515896f2e4b059418b97f0a8"}, {"code": "(partial (fn myfun[cnt xs] (if (empty? xs) cnt (myfun (inc cnt) (rest xs)))) 0 )", "problem": 22, "user": "5154c816e4b0179c5115f4e4"}, {"code": "#(reduce + (map (fn [x] 1 ) %))", "problem": 22, "user": "5151d0ade4b03e678e393ade"}, {"code": "(fn [coll]\n  (loop [n 0 x coll]\n    (if (empty? x)\n      n\n      (recur (inc n) (rest x)))))", "problem": 22, "user": "515a6151e4b0394f658fe241"}, {"code": "#(reduce (fn [acc e] (inc acc)) 0 %)", "problem": 22, "user": "514d7e29e4b019235f6c0587"}, {"code": "(fn [s] (reduce (fn [acc,_] (inc acc)) 0 s))", "problem": 22, "user": "5159849ce4b0394f658fe236"}, {"code": "(fn [col]\n  \n(loop [c 0 col col]\n  \n(if (empty? col) c (recur (inc c) (rest col)))))", "problem": 22, "user": "504e71cbe4b0f6ff3350c4b3"}, {"code": "reduce (fn [total _] (inc total)) 0", "problem": 22, "user": "511179a2e4b03f43822243d0"}, {"code": "(fn [s] (reduce (fn [a b] (inc a)) 0 s))", "problem": 22, "user": "5156e767e4b04360f2428e6b"}, {"code": "reduce (fn [a b] (+ a 1)) 0", "problem": 22, "user": "515ba2c2e4b0a102a3e52639"}, {"code": "(fn [x] (reduce + (map (constantly 1) x)))", "problem": 22, "user": "515b3874e4b0a102a3e5262f"}, {"code": "(fn [coll]\n  (loop [n 0 coll_ coll]\n    (if (empty? coll_)\n      \tn\n      \t(recur (+ 1 n) (rest coll_)))))", "problem": 22, "user": "515c6132e4b069911535cf0d"}, {"code": "(fn [coll] (reduce (fn [i _v] (inc i)) 0 coll))", "problem": 22, "user": "515c75b0e4b069911535cf0f"}, {"code": "(fn length [l]\n  (if (= l '())\n    0\n    (+ 1 (length (rest l)))))", "problem": 22, "user": "4fd3e0e4e4b0d4de60cee365"}, {"code": "#(reduce (fn [acc _] (inc acc)) 0 %)", "problem": 22, "user": "515c9f14e4b069911535cf16"}, {"code": "#(loop [l % c 0] \n   (if (empty? l)\n     c\n     (recur (rest l) (inc c))))", "problem": 22, "user": "513e8141e4b02b2a3d8235c1"}, {"code": "(fn [x] (alength (to-array x)))", "problem": 22, "user": "5106c489e4b01150e115ebed"}, {"code": "(fn [x]\n  (loop [x x c 0]\n    (if (empty? x)\n      c\n      (recur (rest x) (inc c)))))", "problem": 22, "user": "4f37c162e4b0e243712b1ed4"}, {"code": "(fn [s](reduce (fn [sum x](+ 1 sum)) 0 s))", "problem": 22, "user": "515d221ee4b00901442db1d8"}, {"code": "#(apply + (map (constantly 1) %))", "problem": 22, "user": "515cf9b5e4b00901442db1d4"}, {"code": "(fn cnt [lst]\n  (if (= lst ())\n    0\n    (inc (cnt (rest lst)))))", "problem": 22, "user": "515d6f49e4b00901442db1dd"}, {"code": "(fn [coll]\n  (loop [els  0\n         coll coll]\n    (if-not (empty? coll) (recur (inc els) (rest coll)) els)))", "problem": 22, "user": "515ddb99e4b006bb7a2497ca"}, {"code": "#(reduce (fn [x y] (+ x 1)) 0 %)", "problem": 22, "user": "5131d817e4b06942423563ca"}, {"code": "(fn [s] (reduce (fn [a b] (+ a 1)) 0 s))", "problem": 22, "user": "515e38ace4b049add99a0538"}, {"code": "#(loop \n    [a-list % acc 0] \n    (if (empty? a-list) \n      acc \n      (recur \n       (rest a-list) \n       (inc acc))))", "problem": 22, "user": "515d6281e4b00901442db1dc"}, {"code": "(fn [x] ((fn [f] (f f x)) (fn [self x] (if (= () x) 0 (+ 1 (self self (rest x)))))))", "problem": 22, "user": "515ead6be4b049add99a053e"}, {"code": "(fn [sq]\n  ((fn len1 [sq1 r]\n     (let [h (first sq1)\n           t (rest sq1)]\n       (if (empty? t)\n         (+ r 1)\n         (len1 t (+ r 1))))) sq 0))", "problem": 22, "user": "515c03c6e4b0388ca8ca1527"}, {"code": "(fn [coll] \n  (reduce (fn [acc n] (inc acc))\n          0\n          coll))", "problem": 22, "user": "504ee511e4b0e7ad84dbc4a4"}, {"code": "(fn [collection]\n  (loop [coll collection\n         result 0]\n    (if-not (seq coll)\n      result\n      (recur (rest coll) (+ 1 result)))))", "problem": 22, "user": "4daf29b1edd6309eace4d172"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "51168f9fe4b0b3e208dba05c"}, {"code": "(fn [s]\n  (reduce (fn [acc x] (+ 1 acc)) 0 s))", "problem": 22, "user": "515efd01e4b02c55805ea238"}, {"code": "#(reduce (fn [a b] (+ a 1)) 0 %)", "problem": 22, "user": "515f0a39e4b02c55805ea23a"}, {"code": "(fn [coll] (reduce + (map (fn [x] (int 1)) coll)))", "problem": 22, "user": "515f2a85e4b0595cf3d1da44"}, {"code": "#((fn mycount [n x]\n  (if \n    (empty? x)\n    n\n    (mycount (+ n 1) (rest x))\n    )\n  ) 0 %)", "problem": 22, "user": "515f8a0de4b0e2be8aa20bce"}, {"code": "(fn [x] (loop [x x co 0] (if (empty? x) co (recur (rest x) (inc co)))))", "problem": 22, "user": "515624efe4b04360f2428e5f"}, {"code": "(fn [s]\n  (loop [cnt 0\n         s s]\n    (if-not (seq s)\n      cnt\n      (recur (inc cnt) (rest s)))))", "problem": 22, "user": "516014fde4b0e2be8aa20be1"}, {"code": "(fn list-sum [x]\n  (loop [x x \n         sum 0]\n  (if (empty? x)\n    sum\n  (recur (rest x) (+ sum 1)))))", "problem": 22, "user": "516018dae4b0e2be8aa20be2"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "515bed3be4b0388ca8ca1525"}, {"code": "(fn a [lst] (if (empty? lst) 0 (+ 1 (a (rest lst)))))", "problem": 22, "user": "51607eb0e4b009fba0926e27"}, {"code": "(fn [x] \n  (reduce (fn [x y] (inc x)) 0 x))", "problem": 22, "user": "516095c9e4b009fba0926e29"}, {"code": "(fn [x] (loop [x x acc 0] (if (empty? x) acc (recur (rest x) (inc acc)))))", "problem": 22, "user": "515ef58be4b02c55805ea237"}, {"code": "(fn size [lst]\n  (loop [l lst\n          c 0]\n    (if (empty? l)\n      c\n      (recur (rest l) (inc c)))))", "problem": 22, "user": "512a1cb7e4b02a03fbcee0a9"}, {"code": "#((fn [col n] \n   (if (nil? col)\n     n\n     (recur (next col) (inc n)))) % 0)", "problem": 22, "user": "515e0b8be4b049add99a0533"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "516199bbe4b009fba0926e36"}, {"code": "(fn foo [x] (if (not-empty x) (inc (foo (rest x))) 0))", "problem": 22, "user": "5149c2f1e4b0829bd132edb0"}, {"code": "(fn cnt[x & sum]\n\t(if (= () x)\n      (first sum)\n       (if (= nil sum)\n         (cnt (rest x) 1)\n         (cnt (rest x) (+ (first sum) 1))\n         )\n    )\n)", "problem": 22, "user": "51622fb8e4b009fba0926e3f"}, {"code": "(fn count1 [xs] (if (empty? xs) 0 (+ 1 (count1 (rest xs)))))", "problem": 22, "user": "515ffbfbe4b0e2be8aa20bdd"}, {"code": "#(apply + (map (fn [x] (+ 1)) %))", "problem": 22, "user": "515e8ce2e4b049add99a053d"}, {"code": "#(apply + (map (fn [x] 1) %))", "problem": 22, "user": "5160195ae4b0e2be8aa20be3"}, {"code": "reduce (fn [a _] (inc a)) 0", "problem": 22, "user": "51592b81e4b0394f658fe22c"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "5161eb8fe4b009fba0926e3b"}, {"code": "#(reduce (fn [a b] (+ a b)) (map (fn [e] (do 1)) %))", "problem": 22, "user": "515f10dce4b02c55805ea23b"}, {"code": "reduce (fn [c _] (inc c)) 0", "problem": 22, "user": "5162d424e4b004547eb5eaaa"}, {"code": "(fn ccc [x] (if (empty? x) 0 (+ 1 (ccc (rest x)))))", "problem": 22, "user": "5162757ee4b03cfa3774b3fe"}, {"code": "(fn c [x] ( \n         \tif (empty? x)\n           \t0\n           \t(+ \n             1 \n             (c (rest x))\n            )\n          )\n)", "problem": 22, "user": "5162ea2ee4b017b283c712ba"}, {"code": "( fn [arr] (alength (into-array arr)) )", "problem": 22, "user": "516385cee4b055933a9ca02d"}, {"code": "reduce (fn [x y](inc x)) 0", "problem": 22, "user": "51639d26e4b055933a9ca02e"}, {"code": "(fn [col]\n  (loop [c col cnt 0]\n    (if (= (last c) nil)\n      cnt\n      (recur (rest c) (inc cnt)))))", "problem": 22, "user": "5163a7bbe4b055933a9ca02f"}, {"code": "(fn mycount\n  [lst]\n  (if (empty? lst)\n  \t0\n    (inc (mycount (rest lst)))\n    )\n  )", "problem": 22, "user": "51634e09e4b055933a9ca02c"}, {"code": "#(inc(first(last(map-indexed vector %))))", "problem": 22, "user": "51623490e4b009fba0926e42"}, {"code": "#(last (last (map list (vec %) (range 1 50))))", "problem": 22, "user": "5162891ee4b0e6d3c4734712"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "5115e112e4b0ce5098ee73c4"}, {"code": "#(alength (.toArray (seq %)))", "problem": 22, "user": "4f23196ee4b0d66497709fe1"}, {"code": "#(+ 1 (                                         ; 5\n         first(                                 ; 4\n                last (                          ; [4 6]\n                       map-indexed vector %)))) ; [[0 3] [2 5] [3 3] [4 6]]", "problem": 22, "user": "5164d97ee4b003cf19fdde43"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "51647faae4b003cf19fdde3b"}, {"code": "#((fn [coll n]\n    (if (seq coll)\n      (recur (rest coll) (inc n))\n      n)) % 0)", "problem": 22, "user": "51631002e4b017b283c712c1"}, {"code": "(fn [coll] (apply + (map #(if (nil? %) 0 1) coll)))", "problem": 22, "user": "5161c6a7e4b009fba0926e38"}, {"code": "(fn [s0]\n  (loop [s s0\n         c 0]\n    (if (nil? s)\n      c\n      (recur (next s) (inc c)))))", "problem": 22, "user": "5165a235e4b079ad97ec44ac"}, {"code": "#(loop [c 0 s %] (if (not (first s)) c (recur (inc c) (rest s))))", "problem": 22, "user": "51662183e4b05e5ef6a5e807"}, {"code": "reduce (fn [i _] (inc i)) 0", "problem": 22, "user": "5166d466e4b060c690c1f4c4"}, {"code": "#(reduce (fn [a _] (inc a)) 0 %)", "problem": 22, "user": "5166e80de4b060c690c1f4c5"}, {"code": "(fn [xs]\n  (loop [xs xs\n         len 0]\n    (if (empty? xs)\n      len\n      (recur (rest xs) (inc len)))))", "problem": 22, "user": "51670895e4b013fc800656c1"}, {"code": "(fn c [l] (if (empty? l) 0 (+ 1 (c (rest l)))))", "problem": 22, "user": "5167218be4b079759a74a5e5"}, {"code": "(partial #(if (= %2 '()) %1 (recur (+ %1 1) (rest %2))) 0)", "problem": 22, "user": "515e30a1e4b049add99a0536"}, {"code": "(fn [a] (apply +(map #(if % 1 ) a)))", "problem": 22, "user": "515ff4b9e4b0e2be8aa20bd9"}, {"code": "(fn ccount [l]\n  (if (empty? l)\n    0\n    (+ 1 (ccount (rest l)))))", "problem": 22, "user": "51684318e4b03f62cda68cd6"}, {"code": "(fn [s]\n  (loop [x (seq s)\n         l 0]\n    (if-not (seq? x)\n      l\n      (recur (next x) (inc l)))))", "problem": 22, "user": "5164867fe4b003cf19fdde3e"}, {"code": "#(reduce (fn [x y] (+ 1 x )) 0 %)", "problem": 22, "user": "4ec4d723535dcc7ae8597d65"}, {"code": "(fn foo [x] (if (empty? x)\n              0\n              (+ 1 (foo (rest x)))))", "problem": 22, "user": "5168d4ebe4b03f62cda68cdf"}, {"code": "(fn myct[s] (cond\n               (= nil s) 0\n               (= nil (first s)) 0\n               \n               :default (+ 1 (myct (rest s)))\n                   )\n               \n    )", "problem": 22, "user": "4fb03cf4e4b081705acca262"}, {"code": "(fn [coll] (reduce (fn [x _] (inc x)) 0 coll))", "problem": 22, "user": "51696ee7e4b03f62cda68ce8"}, {"code": "(fn [coll]\n  (loop [l coll len 0]\n    (if (= l nil)\n      (+ len 0)\n      (recur (next l) (+ len 1)))))", "problem": 22, "user": "51696bcde4b03f62cda68ce7"}, {"code": "(fn [l]\n  (let [counter (fn [ll n]\n                 (if (empty? ll)\n                   n\n                   (recur (rest ll) (inc n))))] (counter l 0)))", "problem": 22, "user": "516a9dbee4b081287f204e9c"}, {"code": "#(loop [l % i 0] (if (empty? l) i (recur (rest l) (inc i))))", "problem": 22, "user": "512700c4e4b083bb8f88cf14"}, {"code": "(fn [x] (reduce +  0  (map (constantly 1) x) ))", "problem": 22, "user": "516b8837e4b005fd0cdf85c1"}, {"code": "(fn vicount \n  ([x]\n    (if (empty? x) 0 (vicount (rest x) 1)))\n  ([x c] \n    (if (empty? x) c (recur (rest x) (+ c 1))))\n )", "problem": 22, "user": "51646c2ae4b003cf19fdde38"}, {"code": "(fn [ls] \n  ((fn [l c] \n     (if (= l '())\n       c \n     (recur (rest l) (inc c))))\n   ls 0))", "problem": 22, "user": "516733fce4b079759a74a5e9"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "516c3472e4b06f078fab251c"}, {"code": "(fn [coll] (+ 1 (first (first (reverse (map-indexed vector coll))))))", "problem": 22, "user": "51227a00e4b068a9582e656b"}, {"code": "(fn [coll]\n  (loop [l coll n 0]\n    (if (empty? l)\n      n\n      (recur (rest l) (+ n 1))\n    )\n  )\n)", "problem": 22, "user": "4f7683dae4b0fbe0118ec56f"}, {"code": "(fn [xs] \n    (loop [elmnts xs n 0]\n        (if (empty? elmnts)\n            n\n            (recur (rest elmnts) (inc n)))))", "problem": 22, "user": "5079fd71e4b08327cd804a66"}, {"code": "(fn [s] (reduce + 0 (map (fn [x] 1) s)))", "problem": 22, "user": "5166b491e4b060c690c1f4be"}, {"code": "(fn [coll]\n    (reduce (fn [c _] (inc c)) 0 coll))", "problem": 22, "user": "515ebde3e4b01e5d11ccd0a8"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "516db4f6e4b046df6fbb76a0"}, {"code": "(fn [coll] (reduce + (map (fn [x] 1) coll)))", "problem": 22, "user": "516cc0fbe4b06f078fab2526"}, {"code": "reduce (fn [x _] (inc x)) 0", "problem": 22, "user": "51652141e4b003cf19fdde48"}, {"code": "(fn length [x]\n  (let [len 0 el (take 1 x)]\n    (if (= [] el)\n      len\n      (+ 1 (length (drop 1 x)))\n    )\n  )\n)", "problem": 22, "user": "516e9d9be4b06aac486e5b2b"}, {"code": "#(reduce (fn [a b](+ a 1)) 0 %)", "problem": 22, "user": "5143952fe4b0b4fb4ace5f38"}, {"code": "(fn [xs]\n  (loop [xs xs n 0]\n    (if (empty? xs) n (recur (rest xs) (inc n)))))", "problem": 22, "user": "516ea313e4b06aac486e5b2c"}, {"code": "(fn f [x] (if (empty? x) 0 (+ 1 (f (rest x)))))", "problem": 22, "user": "516ed04ee4b06aac486e5b30"}, {"code": "(fn [x]\n  (letfn [(bob [x n] (if (empty? x) n (recur (rest x) (inc n))))]\n    (bob x 0)))", "problem": 22, "user": "516f06dce4b06aac486e5b39"}, {"code": "reduce (fn [x y] (+ x 1) ) 0", "problem": 22, "user": "516e2246e4b092a6408c5bc5"}, {"code": "(fn length [x]\n  (if (empty? x) 0 (inc(length (rest x)))\n    \n    )\n  \n  )", "problem": 22, "user": "516eb196e4b06aac486e5b2e"}, {"code": "(fn [l]\n  (apply + (map (fn [_] 1) l)))", "problem": 22, "user": "516fa727e4b0ef3e37990e86"}, {"code": "(fn cnt [ls]\n  ((fn rec [ls-rec counter]\n     (cond\n      (= nil (next ls-rec)) (+ 1 counter)\n      :else (rec (next ls-rec) (+ 1 counter) ) ) )\n   ls\n   0))", "problem": 22, "user": "516fc530e4b0b86e66597f00"}, {"code": "(fn [l]\n  (loop [l (next l) c 1]\n    (if (seq l)\n      (recur (next l) (inc c))\n      c)))", "problem": 22, "user": "50b1d166e4b03ea880433554"}, {"code": "(fn [seq]\n  (loop [seq' seq\n         cnt 0]\n    (if (empty? seq')\n      cnt\n      (recur (rest seq') (inc cnt)))))", "problem": 22, "user": "516ff477e4b034fe8eaf70f3"}, {"code": "(fn [ipt] (loop [cnt 0\n                 itm ipt]\n            (cond (empty? itm)\n                  cnt\n                  :else\n                  (recur (inc cnt) (rest itm)))))", "problem": 22, "user": "5146fd44e4b0d12420447958"}, {"code": "(fn cnt [the-list]\n\t(if (empty? the-list)\n      0\n      (+ (cnt (rest the-list)) 1)\n    )\n)", "problem": 22, "user": "51701a9ce4b034fe8eaf70f5"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "516dc88ae4b046df6fbb76a1"}, {"code": "reduce (fn [i _] (inc i)) 0", "problem": 22, "user": "5170ea06e4b0d70c8bbbf235"}, {"code": "(fn mycount [x]\n  (if (= x ())\n    0\n    (+ 1 (mycount (rest x)))))", "problem": 22, "user": "5171069be4b0d70c8bbbf238"}, {"code": "(fn my-length [list]\n  (cond\n   (empty? list) 0\n   :else (inc (my-length (rest list)))))", "problem": 22, "user": "5170643ee4b004f79986ad89"}, {"code": "(fn [xs] (reduce (fn [acc _] (+ 1 acc)) 0 (seq xs)))", "problem": 22, "user": "51715f0ce4b0d70c8bbbf23d"}, {"code": "#(reduce + 0 (map (fn [_] 1) %))", "problem": 22, "user": "51715389e4b0d70c8bbbf23c"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "51717577e4b0d70c8bbbf23f"}, {"code": "(fn self [x]\n  (if (empty? x) 0 (inc (self (rest x)))))", "problem": 22, "user": "51721aefe4b0d70c8bbbf24a"}, {"code": "reduce (fn [n lst] (inc n)) 0", "problem": 22, "user": "502f6c56e4b0842eb223d8bb"}, {"code": "(fn [xs]\n  (reduce (fn [a b] (inc a)) 0 xs))", "problem": 22, "user": "5173726be4b098276e74652c"}, {"code": "#(reduce (fn [n _] (inc n)) 0 %)", "problem": 22, "user": "5173a2b9e4b098276e746530"}, {"code": "(fn [sequence]\n\t  (loop [s sequence\n\t\t c 0]\n\t   (if (empty? s)\n\t     c\n\t     (recur (next s)\n\t\t    (inc c)))))", "problem": 22, "user": "514a13cee4b0829bd132edb4"}, {"code": "#(reduce + (map (fn [el] 1) %))", "problem": 22, "user": "516933ece4b03f62cda68ce4"}, {"code": "(fn [coll]\n  ((fn [coll n]\n     (if (empty? coll)\n         n\n         (recur (rest coll) (inc n)))) coll 0))", "problem": 22, "user": "51736d4de4b00f4b6b0490d7"}, {"code": "(fn co\n  ([x] (co x 0))\n  ([x c] (if-not (empty? x)\n          (recur (rest x) (inc c))\n          c)))", "problem": 22, "user": "517401d6e4b0d277d717bc66"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "51740b65e4b0d277d717bc67"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "5140771ae4b076604f1aa555"}, {"code": "(fn cnt [n]\n  (loop [c 0 l n]\n    (if (empty? l) c (recur (inc c) (rest l)))\n)\n)", "problem": 22, "user": "516bc02ce4b005fd0cdf85c5"}, {"code": "(fn p22 [l]\n  (reduce (fn [c _] (inc c)) 0 l))", "problem": 22, "user": "51750fc5e4b07031762f2ee6"}, {"code": "#(reduce (fn [acc e] (inc acc)) 0 %)", "problem": 22, "user": "516d2a46e4b06f078fab252f"}, {"code": "(fn [x] (reduce (fn [x y] (+ x 1)) 0 x))", "problem": 22, "user": "5175616ae4b0dea9bbfba576"}, {"code": "(fn [x]\n  (loop [x x n 0]\n    (if (empty? x)\n      n\n      (recur (rest x) (inc n)))))", "problem": 22, "user": "51757af0e4b085adf681d873"}, {"code": "(fn [cseq]\n  (loop [lseq cseq counter 0]\n    (if (= '() lseq)\n      counter\n      (recur (rest lseq) (inc counter)))))", "problem": 22, "user": "509331d9e4b097f48cc38580"}, {"code": "(fn [l]\n(let [c (fn [s n] (if (empty? s) n (recur (rest s) (inc n))))] (c l 0)))", "problem": 22, "user": "51729002e4b044b2ef48a850"}, {"code": "(fn [l] \n  (loop [r l i 0]\n\t(if (seq r)\n      (recur (rest r) (inc i))\n      i)))", "problem": 22, "user": "51515a19e4b03e678e393acc"}, {"code": "(fn COUNT \n  ([x] (COUNT x 1))\n  ([x c] (if(= (next x) nil) c (COUNT (rest x) (+ c 1))  )))", "problem": 22, "user": "51735df9e4b00f4b6b0490d6"}, {"code": "(fn [x]\n  (loop [aseq (seq x) cnt 0]\n    (if (empty? aseq) \n      cnt\n      (recur (rest aseq) (+ cnt 1)))))", "problem": 22, "user": "51750cd4e4b07031762f2ee5"}, {"code": "(fn [coll]\n  (reduce (fn [x y] (inc x)) 0 coll))", "problem": 22, "user": "511ad71fe4b07ab9ec45617d"}, {"code": "(fn count-list [l] \n  (\n   (fn count-iter [l n] (if (= (rest l) []) n (count-iter (rest l) (+ n 1)))) l 1\n   )\n  )", "problem": 22, "user": "517531c6e4b07031762f2eea"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "5152bc4ee4b001f44f99bfef"}, {"code": "#(loop [lst % cnt 0] (if (nil? (first lst)) cnt (recur (rest lst) (inc cnt)) ))", "problem": 22, "user": "5171f684e4b0d70c8bbbf248"}, {"code": "(fn [coll]\n  (reduce (fn [x y] (inc x)) 0 coll))", "problem": 22, "user": "5175c7f8e4b085adf681d878"}, {"code": "(fn [coll]\n  (loop [coll coll i 0]\n    (if (empty? coll)\n      i\n      (recur (rest coll) (inc i)))))", "problem": 22, "user": "50cfcad6e4b00b15ecee9752"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "51778122e4b085adf681d89d"}, {"code": "#(inc (first (last (map-indexed vector %))))", "problem": 22, "user": "5149d1b5e4b0829bd132edb1"}, {"code": "(fn ! [l] (if (empty? l) 0 (+ 1 (!(rest l)))))", "problem": 22, "user": "51780bfce4b0f89a8f53839c"}, {"code": "(fn c [s]\n  (if (empty? s) 0\n    (+ 1 (c (rest s)))))", "problem": 22, "user": "5175533fe4b0dea9bbfba575"}, {"code": "reduce (fn [m i] (+ m 1)) 0", "problem": 22, "user": "51780f88e4b03d69594194c9"}, {"code": "(fn f [n l] (if (first l) (f (+ n 1) (rest l)) n)) 0", "problem": 22, "user": "5178afd1e4b03d69594194d8"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4fc4541ae4b081705acca348"}, {"code": "(fn f [l]\n  (if (= '() l) \n    0 \n    (+ 1 (f (rest l)))\n  )\n)", "problem": 22, "user": "514f72a2e4b0b449e54b8df7"}, {"code": "(fn [start-list] (loop [cnt 0 l start-list] (if (empty? l) cnt (recur (inc cnt) (rest l)))))", "problem": 22, "user": "51789599e4b03d69594194d6"}, {"code": "(fn this [a]\n  (if (empty? a)\n    0\n    (inc (this (rest a)))))", "problem": 22, "user": "5179b3f1e4b01aacecbecbd9"}, {"code": "(fn length [elements]\n  (loop [elements elements result 0]\n    (if (empty? elements)\n\tresult\n\t(recur (rest elements) (inc result)))))", "problem": 22, "user": "4e723bcb535d5021c1a8965c"}, {"code": "(fn [l] (apply + (map (fn [x] 1) l)))", "problem": 22, "user": "517a0d1fe4b01aacecbecbe8"}, {"code": "(fn ct [xs] (if (empty? xs) 0 (+ 1 (ct (rest xs)))))", "problem": 22, "user": "515fb48fe4b0e2be8aa20bd5"}, {"code": "#(loop [items % \n        i 0]\n   (if-not (next items)\n     (inc i)\n     (recur (next items) (inc i))))", "problem": 22, "user": "50342d1be4b062bc5d7ae15f"}, {"code": "(fn [xs] (reduce + (map (fn [x] 1) xs)))", "problem": 22, "user": "50b9d991e4b04934c218a4a9"}, {"code": "reduce (fn [y,x] (+ y 1 )) 0", "problem": 22, "user": "517517c9e4b07031762f2ee7"}, {"code": "(fn cnt [l]\n  (if (= (first l) nil)\n    0\n    (inc (cnt (rest l)))))", "problem": 22, "user": "517a7f20e4b01aacecbecbee"}, {"code": "(fn [col]\n  (letfn [(count- [col n]\n                  (if (not col)\n                    n\n                    (recur (next col) (inc n))))]\n    (count- col 0)))", "problem": 22, "user": "5163b06be4b055933a9ca030"}, {"code": "(fn count-a-seq [lat](reduce (fn [x y] (inc x)) 0 lat))", "problem": 22, "user": "5179a5a2e4b0684c1c981a4f"}, {"code": "(fn cnt [xs]\n  (loop [acc 0 more xs]\n    (if (nil? more)\n      acc\n      (recur (inc acc) (next more)))))", "problem": 22, "user": "517a025ce4b01aacecbecbe6"}, {"code": "#(reduce + (map (fn [_] 1) %))", "problem": 22, "user": "517adc6ce4b0925c997201c4"}, {"code": "(fn [s]\n  (reduce (fn [i _] (inc i)) 0 s))", "problem": 22, "user": "517b59b8e4b0925c997201d0"}, {"code": "#(reduce (fn [total-count item] (inc total-count)) 0 %)", "problem": 22, "user": "517b4d8ae4b0925c997201cf"}, {"code": "(fn [x] (loop [a x n 0] (if (or (empty? a)) n (recur (rest a) (inc n)))))", "problem": 22, "user": "5179fd22e4b01aacecbecbe5"}, {"code": "#(if (string? %) (.length %) (.size %))", "problem": 22, "user": "517be6e6e4b07ef0e56148d4"}, {"code": "#(\n  (fn [xs n]\n    \t(if \n          (empty? xs) n\n          (recur (rest xs) (+ n 1))\n)) % 0)", "problem": 22, "user": "517bf28de4b07ef0e56148d5"}, {"code": "(fn [set] \n  (reduce \n   (fn [first second] (inc first)) \n   0\n   set))", "problem": 22, "user": "517a995de4b01aacecbecbef"}, {"code": "#(loop [l % i 0] \n   (if \n      (empty? l) i\n       (recur (rest l) (inc i))))", "problem": 22, "user": "517bc969e4b07ef0e56148d0"}, {"code": "(fn [s] (reduce + (map (fn [x] 1) s)))", "problem": 22, "user": "517c1a3be4b07ef0e56148d6"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "517bbbfce4b07ef0e56148cf"}, {"code": "#(loop [tcol % i 0]\n   (if (first tcol)\n     (recur (rest tcol) (inc i))\n     i))", "problem": 22, "user": "517cc671e4b0bbbf1f12af0a"}, {"code": "#(\n     (fn [lst acc]\n       (if (empty? lst)\n         acc\n         (recur (rest lst) (inc acc)))) % 0)", "problem": 22, "user": "517b9c82e4b0e963dd819c99"}, {"code": "(fn [c] (+ 1 (apply max (keys (zipmap (range) c)))))", "problem": 22, "user": "51771cb1e4b085adf681d895"}, {"code": "reduce (fn [x,y] (+ x 1)) 0", "problem": 22, "user": "517d2ee8e4b0f5e87c18f260"}, {"code": "(fn [s] (reduce (fn [total, _] (+ total 1)) 0 s))", "problem": 22, "user": "50fc9c08e4b0d10d794c19f9"}, {"code": "(fn [x] (reduce (fn [a b] (+ 1 a)) 0 x))", "problem": 22, "user": "517d4ba3e4b0f5e87c18f261"}, {"code": "(fn [arr]\n   (loop [result arr c 0]\n     (if (= result [])\n       c\n       (recur (rest result) (inc c))\n       )\n     )\n  )", "problem": 22, "user": "517e12e3e4b0fcc7c5d37d3c"}, {"code": "#(apply max (keys (zipmap (range 1 12) %)))", "problem": 22, "user": "517945dce4b0684c1c981a43"}, {"code": "reduce (fn [x y] (inc x)) 0", "problem": 22, "user": "517dc49be4b0fcc7c5d37d38"}, {"code": "#(apply + (map (fn [x y] x) (repeat 1) %))", "problem": 22, "user": "5093a80be4b097f48cc38583"}, {"code": "(fn [xs] (reduce (fn [x y] (inc x)) 0 xs))", "problem": 22, "user": "517d755ce4b0f5e87c18f263"}, {"code": "#(reduce (fn [ct _] (inc ct)) 0 %)", "problem": 22, "user": "5177f89ae4b0f89a8f53839a"}, {"code": "(fn [s]\n  (reduce (fn [previous current] (+ previous 1)) 0 s))", "problem": 22, "user": "517ebeb0e4b09104ecebe7e7"}, {"code": "reduce #(+ % (or 1 %2)) 0", "problem": 22, "user": "517ecab1e4b09104ecebe7e8"}, {"code": "(fn counter \n  ([coll] \n   (counter coll 0)) \n  ([coll elem-count] \n   (if (empty? coll) \n     elem-count \n     (recur (rest coll) (+ 1 elem-count)))))", "problem": 22, "user": "4ec1f3ea535dfed6da9c6db9"}, {"code": "(comp inc first last map-indexed) vector", "problem": 22, "user": "517e5a91e4b0329b27fa9f55"}, {"code": "(fn [x]\n(loop [l x n 0]\n(if(empty? l)\nn\n(recur (rest l) (+ n 1)))))", "problem": 22, "user": "517e6671e4b0329b27fa9f56"}, {"code": "(fn [lst]\n  ((fn [currlst cnt]\n     (if (= () currlst)\n       cnt\n       (recur (rest currlst) (inc cnt))))\n   lst 0))", "problem": 22, "user": "517fcd45e4b073af738d8b4a"}, {"code": "#(loop [x 1\n        y (rest %)]\n   (if (empty? y) x (recur (inc x) (rest y))))", "problem": 22, "user": "4ed286d4535d44c135fd68d7"}, {"code": "(fn [coll]\n  (reduce (fn [x y]\n            (inc x))\n          0 \n          coll))", "problem": 22, "user": "51804bcbe4b04f45bde7d901"}, {"code": "(fn [coll] (apply + (map (fn [x] 1) coll)))", "problem": 22, "user": "517e9f92e4b09104ecebe7e4"}, {"code": "(fn [y] \n    (reduce\n        +\n        (map \n            (fn [x] 1)\n             y)))", "problem": 22, "user": "517f5db1e4b09104ecebe7ef"}, {"code": "(fn [coll]\n   (loop [xs coll n 0]\n     (if (empty? xs)\n       n\n       (recur (rest xs) (inc n)))))", "problem": 22, "user": "5180af54e4b0e3fc13e244e9"}, {"code": "#(loop [x % c 0] (if (empty? x) c (recur (rest x) (inc c))))", "problem": 22, "user": "5180a93fe4b0e3fc13e244e8"}, {"code": "(fn [se]\n  (reduce (fn [x y] (inc x)) 0 se))", "problem": 22, "user": "51806ebde4b0e3fc13e244e1"}, {"code": "(fn count' [xs]\n  (if (empty? xs)\n    0\n    (+ (count' (rest xs)) 1)))", "problem": 22, "user": "51811d5ee4b06547fbae113c"}, {"code": "#(reduce (fn [acc item] (inc acc)) 0 %)", "problem": 22, "user": "516d7efde4b0fddc7b37210e"}, {"code": "(fn my-count [lst]\n  \t((fn aux [l c]\n      (if (empty? l)\n          c\n          (aux (next l) (+ c 1)))) lst 0))", "problem": 22, "user": "5180dc04e4b06b8caf33fa01"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "51706c8fe4b004f79986ad8a"}, {"code": "#(loop [cnt 0 acc %]\n   (if (seq acc)\n     (recur (inc cnt) (rest acc))\n     cnt))", "problem": 22, "user": "5181cf74e4b06547fbae1159"}, {"code": "reduce (fn [a _] (inc a)) 0", "problem": 22, "user": "4e6a3b79535d8ccf87e9feb3"}, {"code": "#(loop [seq1 % ret 0] \n   (if (empty? seq1)\n     ret\n     (recur (rest seq1) (inc ret))))", "problem": 22, "user": "51793056e4b0684c1c981a41"}, {"code": "#(apply + (map (constantly 1) %))", "problem": 22, "user": "51383346e4b0a5db03d727d4"}, {"code": "(fn cnt\n  ([l] (cnt l 0))\n  ([l c] (if (empty? l) c\n    (recur (drop-last l) (+ c 1))\n  ))\n)", "problem": 22, "user": "514dbd08e4b019235f6c058d"}, {"code": "(fn [s]\n  (reduce (fn [counter _] \n            (inc counter)) \n          0 \n          s))", "problem": 22, "user": "51789dfae4b03d69594194d7"}, {"code": "#(reduce (fn [x y] (inc x)) 0 %)", "problem": 22, "user": "51805d22e4b0e3fc13e244df"}, {"code": "(fn my-count [x]\n  (loop [xs x\n         n 1]\n    (if (next xs)\n      (recur (next xs) (inc n))\n      n)))", "problem": 22, "user": "51834acde4b028ec5fd2f29a"}, {"code": "#(apply + (map (constantly 1) %))", "problem": 22, "user": "517ddaf3e4b0fcc7c5d37d3b"}, {"code": "(fn [x] \n\t\t(loop [mylist x counter 0]\n \t\t\t(if (empty? mylist)\n    \t\tcounter\n    \t\t(recur (rest mylist) (inc counter))\n  \t\t\t)\n  \t\t)\n)", "problem": 22, "user": "5167cf5ee4b0c5a4140a3094"}, {"code": "(fn [x] \n  ( loop[myL x y 0]\n          (if(empty? myL) y (recur(rest myL) (inc y))\n            )\n    )\n )", "problem": 22, "user": "5177cacde4b0261ae665b877"}, {"code": "(fn [mylist]\n\t(loop [l mylist counter 0]\n\t\t(if (empty? l)\n\t\t\tcounter\n\t\t\t(recur (rest l) (inc counter))\n\t\t)\n\t)\n)", "problem": 22, "user": "5167d0ede4b0c5a4140a3097"}, {"code": "(fn [a-sequence] (reduce + (map (constantly 1) a-sequence)))", "problem": 22, "user": "51836944e4b028ec5fd2f29f"}, {"code": "(fn [coll]\n    (loop [c coll n 0]\n       (if (empty? c)\n          n\n          (recur (rest c) (inc n)))))", "problem": 22, "user": "51026750e4b00c483ae176f7"}, {"code": "(fn [x] (reduce + (map (fn [z] 1) x)))", "problem": 22, "user": "51823a97e4b0f2adb733651e"}, {"code": "#(reduce + (map (fn [x ] 1) %))", "problem": 22, "user": "504e0f78e4b078edc5f593ac"}, {"code": "#(loop [cc 0 ll %]\n    (if (empty? ll) \n      cc\n      (recur (inc cc) (rest ll))\n      )\n    )", "problem": 22, "user": "5183abf6e4b028ec5fd2f2a6"}, {"code": "(fn [y] (apply + (map (fn [x] (if (nil? x) 0 1) ) y ) ) )", "problem": 22, "user": "51838e8be4b028ec5fd2f2a0"}, {"code": "(fn [s] \n  (reduce (fn [accum x]\n            (+ 1 accum)\n          ) 0 s\n  )\n)", "problem": 22, "user": "506617fce4b03d366d7cb2ac"}, {"code": "(fn [coll] (\n   (fn [coll result]\n     (if (empty? coll)\n       result\n       (recur (rest coll) (inc result))) )\n  coll 0))", "problem": 22, "user": "515dc82ee4b0c89ed0914af4"}, {"code": "#(reduce (fn [x y] (inc x)) 0 %)", "problem": 22, "user": "5182de5ce4b0353c468deb74"}, {"code": "#(apply + (map (constantly 1) %))", "problem": 22, "user": "51859a6de4b0da5a5be3bac1"}, {"code": "(fn [x] (reduce (fn [m _] (+ 1 m)) 0 x))", "problem": 22, "user": "5185e17ee4b0da5a5be3bac5"}, {"code": "(fn my-count [xs]\n  (if (empty? xs)\n      0\n      (+ 1 (my-count (rest xs)))))", "problem": 22, "user": "5186134ce4b0da5a5be3bac7"}, {"code": "(fn Count [collection]\n (if (= [] collection)\n  0\n  (+ 1 (Count (rest collection)))))", "problem": 22, "user": "51841e0ae4b02826a645f396"}, {"code": "(fn[x](loop [l 0 x x] (if (empty? x) l (recur (inc l) (rest x)))))", "problem": 22, "user": "5184f9e9e4b02826a645f39e"}, {"code": "(fn [l] (reduce (fn [a b] (+ a 1)) 0 l))", "problem": 22, "user": "517a2d37e4b01aacecbecbec"}, {"code": "(fn mycount [input] \n  (if (empty? input)\n    0\n    (+ 1 (mycount (rest input)))))", "problem": 22, "user": "5186571de4b0da5a5be3bad1"}, {"code": "#(reduce (fn [x y] (inc x)) 0 %)", "problem": 22, "user": "51864ee8e4b0da5a5be3bacc"}, {"code": "#(apply + (map (fn[x] 1) %))", "problem": 22, "user": "517d51efe4b0f5e87c18f262"}, {"code": "(fn[a-list] (reduce (fn[a b](+ a 1)) 0 a-list))", "problem": 22, "user": "4ede0511535d10e5ff6f5330"}, {"code": "#(reduce (fn [n _] (inc n)) 0 %)", "problem": 22, "user": "518696c1e4b0c40be512d708"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "5180c69ae4b06b8caf33fa00"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "512694a1e4b083bb8f88cf0a"}, {"code": "(fn ncount [s] (if (= '() s) 0 (inc (ncount (rest s)))))", "problem": 22, "user": "51870799e4b057e3860ab7dc"}, {"code": "reduce (fn [x _] (+ 1 x)) 0", "problem": 22, "user": "4fe91b62e4b0547ebccb243f"}, {"code": "#(inc (last (map-indexed (comp first vector) %)))", "problem": 22, "user": "5184f4fce4b02826a645f39d"}, {"code": "#(reduce + (map(fn[x] 1) %))", "problem": 22, "user": "5183c188e4b028ec5fd2f2ab"}, {"code": "(fn [xs]\n  (reduce + (map (fn [x] 1) xs)))", "problem": 22, "user": "5187a7dae4b057e3860ab7e1"}, {"code": "#(loop [s % i 0]\n     (if (empty? s)\n        i\n        (recur (rest s) (inc i))))", "problem": 22, "user": "51823adee4b0f2adb733651f"}, {"code": "reduce (fn [x, y] (+ x 1)) 0", "problem": 22, "user": "51883ae0e4b0eb189f8362ed"}, {"code": "(fn [coll] (reduce (fn [n item] (inc n)) 0 coll))", "problem": 22, "user": "518874f1e4b0bdff0e072d50"}, {"code": "#(reduce + (map (fn [x] 1) % ))", "problem": 22, "user": "5183cacde4b028ec5fd2f2ae"}, {"code": "reduce (fn [x y] (+ x 1)) 0", "problem": 22, "user": "515b28b6e4b0a102a3e5262c"}, {"code": "(fn [col] (reduce (fn [memo x] (+ memo 1))\n                  0\n                  col))", "problem": 22, "user": "51891c96e4b04c2714a2670e"}, {"code": "#(loop [cnt 0, arr %]\n   (if (empty? arr)\n     cnt\n     (recur\n      (inc cnt)\n      (rest arr))))", "problem": 22, "user": "515e2000e4b049add99a0534"}, {"code": "#(reduce +\n  (map\n   (fn [x] 1) %))", "problem": 22, "user": "5189bf9ee4b0288ada3dbdaf"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "5187d78be4b057e3860ab7e2"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "518a59b3e4b02bf06f6bbb4b"}, {"code": "#(loop[x % y 0] (if (empty? x) y (recur (drop 1 x) (inc y))))", "problem": 22, "user": "517e25c6e4b0329b27fa9f51"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "51899891e4b0288ada3dbdab"}, {"code": "(fn myc \n  ([x] (myc x 0))\n  ([x n] (if (seq x) (myc (rest x) (+ n 1)) n)))", "problem": 22, "user": "518a8c4be4b0df82f5685903"}, {"code": "(fn [x] \n  (loop [xs x n 0]\n    (if (empty? xs)\n       n\n       (recur (rest xs) (inc n))\n    )\n  )\n)", "problem": 22, "user": "51897709e4b0288ada3dbdaa"}, {"code": "(fn cnF [x] (if (= () (rest x)) 1  (+ 1 (cnF (rest x))) ))", "problem": 22, "user": "518aec06e4b06da86c1973c2"}, {"code": "(fn [xs] (reduce + (map (fn [x] 1) xs)))", "problem": 22, "user": "518b54c6e4b05711021000b1"}, {"code": "(fn mc [xs]\n  (loop [acc 0\n         xs xs]\n    (if (empty? xs)\n      acc\n      (recur (inc acc) (rest xs)))))", "problem": 22, "user": "5188c611e4b0bdff0e072d56"}, {"code": "#(reduce (fn [x y] (inc x)) 0 %)", "problem": 22, "user": "5189dbabe4b0288ada3dbdb3"}, {"code": "#(reduce + (map (fn [_] 1) %))", "problem": 22, "user": "518b5e2fe4b05711021000b2"}, {"code": "(fn custom-count\n  ([x] (custom-count x 0))\n  ([x,n]\n   (if (empty? x) n (custom-count (rest x) (inc n)))))", "problem": 22, "user": "515dfcf8e4b049add99a0532"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "5188c487e4b0bdff0e072d55"}, {"code": "#(apply max (map-indexed (fn [i e] (inc i)) %))", "problem": 22, "user": "518ba795e4b0f028e99addf0"}, {"code": "(fn [s]\n  (loop [current s \n         acc 0]\n    (if (empty? current)\n      acc\n      (recur (rest current) (+ 1 acc)))))", "problem": 22, "user": "518bd05ee4b0f028e99addf2"}, {"code": ";#(loop [result 0 c %]\n;   (if (empty? c)\n;     result\n;     (recur (inc result) (rest c))))\n#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "518ccf6be4b05e6c8537e386"}, {"code": "(fn [x] \n  (loop [y x c 0]\n  \t(if (seq y)\n    \t(recur (rest y) (inc c))\n    \tc\n    )\n  )\n)", "problem": 22, "user": "50c8899ee4b00bb60fe0c541"}, {"code": "(fn foo [xs]\n  (if (first xs)\n    (inc (foo (rest xs)))\n    0))", "problem": 22, "user": "4f29651ce4b0d6649770a028"}, {"code": "reduce (fn [acc _] (inc acc)) 0", "problem": 22, "user": "518b761ae4b0f028e99addee"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "516c0a7de4b005fd0cdf85cb"}, {"code": "#(reduce (fn [a b] (+ a 1)) 0 %)", "problem": 22, "user": "4e5e391c535d8a8b8723a2d0"}, {"code": "#(reduce (fn [x y] (+ x 1)) 0 %)", "problem": 22, "user": "518ec633e4b0cd6ff516769e"}, {"code": "reduce (fn [m i] (inc m)) 0", "problem": 22, "user": "518e6966e4b051adb72789ec"}, {"code": "(fn my-count [ls] (if (empty? ls) 0 (inc (my-count (rest ls)))))", "problem": 22, "user": "518df0f0e4b0c929d50502e1"}, {"code": "(fn count-a-seq [lat]\n  (reduce (fn [x y] (+ x 1)) 0 lat))", "problem": 22, "user": "518cdbd6e4b05e6c8537e387"}, {"code": "(fn mycount [coll] ( if(not(empty?(rest coll))) (+ 1 (mycount (rest coll))) 1))", "problem": 22, "user": "518f9e14e4b08646f171ca07"}, {"code": "#(if (string? %) (.length %) (.size %))", "problem": 22, "user": "51909098e4b0af8891cc8d36"}, {"code": "#(apply + (map (constantly 1) %1))", "problem": 22, "user": "5143824ae4b0b4fb4ace5f36"}, {"code": "(fn [lst]\n    (loop [len 0 x lst]\n        (if (empty? x)\n            len\n            (recur (+ 1 len) (rest x)))))", "problem": 22, "user": "519136e9e4b0f8ef0be96c01"}, {"code": "(fn cc [x] (if (empty? x) 0 (+ 1 (cc (rest x)))))", "problem": 22, "user": "516282c3e4b0e6d3c4734711"}, {"code": "(fn [x] (+ 1 (apply max (map-indexed (fn [i tm] i) x))))", "problem": 22, "user": "519218ebe4b08962174cf737"}, {"code": "(fn this [s]\n  (if (empty? s)\n    0\n    (+ 1 (this (rest s)))\n    )\n  )", "problem": 22, "user": "5191e91de4b08962174cf733"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "51919dfae4b06bf878d046ae"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "5154b16be4b0179c5115f4e2"}, {"code": "(fn [x] (\n         loop [i x, cnt 0]\n         (if (empty? i) cnt\n           (recur (rest i) (inc cnt))\n           )\n         )\n  )", "problem": 22, "user": "50a8bb65e4b0deba384a58bd"}, {"code": "(fn [col] (reduce + (map (fn [x] (quote 1)) col)))", "problem": 22, "user": "5192dd39e4b0c663c5d86c9e"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "51131da8e4b0350614f07a83"}, {"code": "reduce (fn [a b] (+ a 1)) 0", "problem": 22, "user": "51933b41e4b0c663c5d86ca2"}, {"code": "(fn mylen [s] (if (nil? (seq s)) 0 (+ 1 (mylen (rest s)))))", "problem": 22, "user": "51937eb3e4b04df54c098022"}, {"code": "(fn [xs]\n  (loop [ys xs acc 0]\n    (if (empty? ys)\n        acc\n      (recur (rest ys) (+ 1 acc)))))", "problem": 22, "user": "519451d1e4b0142f60b4aedd"}, {"code": "(fn counter [lat]\n  (if (= (seq (rest lat)) nil) 1\n    (+ (counter (rest lat)) 1)))", "problem": 22, "user": "5194675fe4b0142f60b4aedf"}, {"code": "(fn cl \n  ([cnt lst]\n     (if (nil? (first lst))\n       cnt\n       (cl (+ 1 cnt) (rest lst))))\n  ([lst]\n     (cl 0 lst)))", "problem": 22, "user": "5193db52e4b04df54c09802a"}, {"code": "#(reduce +(map (fn [x] 1) %))", "problem": 22, "user": "5194ea33e4b05be8c43d2383"}, {"code": "(fn s [x] (if (empty? x) 0 (+ 1 (s (rest x)))))", "problem": 22, "user": "517d1018e4b0f5e87c18f25e"}, {"code": "#(reduce (fn [old _] (+ old 1)) 0 %)", "problem": 22, "user": "5194f93ce4b09df09a77a3e3"}, {"code": "(fn [y]\n  (apply + \n   (map (fn [x] 1) \n        y)))", "problem": 22, "user": "5194243be4b0142f60b4aed9"}, {"code": "reduce (fn[x y] (inc x)) 0", "problem": 22, "user": "51950793e4b09df09a77a3e4"}, {"code": "reduce (fn [m i] (+ m 1)) 0", "problem": 22, "user": "519126d5e4b0f8ef0be96bff"}, {"code": "(fn [xs] (reduce (fn [a b] (+ 1 a)) 0 xs))", "problem": 22, "user": "5188c249e4b0bdff0e072d54"}, {"code": "(fn cnt [sec]\n  ((fn cntAcc [sec acc]\n    (if (= (rest sec) ())\n      acc\n      (cntAcc (rest sec) (inc acc))\n      )\n    ) sec 1)\n  )", "problem": 22, "user": "5194f482e4b05be8c43d2385"}, {"code": "(fn [x] (reduce + (map (fn [x] 1) x)))", "problem": 22, "user": "5195e114e4b04c0af7ff3c09"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "5195fadee4b04c0af7ff3c11"}, {"code": "(fn fonk [coll] (if (nil? coll) 0 (inc (fonk (next coll)))))", "problem": 22, "user": "51960b79e4b04c0af7ff3c13"}, {"code": "(partial reduce (fn [t _] (+ t 1)) 0)", "problem": 22, "user": "5112bbdde4b0350614f07a7c"}, {"code": "(fn [coll]\n  (loop [coll coll\n         result 0]\n     (if (empty? coll)\n       result\n       (recur (rest coll) (inc result)))) )", "problem": 22, "user": "5196749be4b04c0af7ff3c20"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "514a762ae4b00c7db5067428"}, {"code": "#(loop [c 0 r %]\n   (cond\n     (empty? r) c\n     true (recur (inc c) (rest r))))", "problem": 22, "user": "5196568fe4b04c0af7ff3c1c"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "5195b8cce4b04c0af7ff3c08"}, {"code": "#(reduce (fn [x _] (inc x)) 0 %)", "problem": 22, "user": "50377d53e4b0af0658af77ad"}, {"code": "(fn my-count [coll] (if (empty? coll) 0 (inc (my-count (rest coll)))))", "problem": 22, "user": "5197f674e4b068aa333628f6"}, {"code": "#(reduce + (map (fn [_] 1) %))", "problem": 22, "user": "51980f7ce4b068aa333628f7"}, {"code": "(fn [lst] \n  (apply + (map (fn [x] 1) lst)))", "problem": 22, "user": "51761580e4b085adf681d880"}, {"code": "(fn [x]\n  (loop [s x result 1]\n    (if (= nil (next s))\n      result\n      (recur (next s ) ( inc result)))))", "problem": 22, "user": "518c5236e4b087e178201de0"}, {"code": "#(.size (seq %))", "problem": 22, "user": "5197cb17e4b068aa333628ee"}, {"code": "#(reduce + (map (fn [_] 1) %))", "problem": 22, "user": "4f409e29e4b0e243712b1fb6"}, {"code": "#(apply + (map (fn [_] 1) %))", "problem": 22, "user": "519964cbe4b0aa09cbc0b849"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "519291c1e4b08962174cf74b"}, {"code": "(fn cnt [v] (if (first v) (+ 1 (cnt (rest v))) 0))", "problem": 22, "user": "51990df9e4b068aa333628fc"}, {"code": "(fn list-count [x]\n  (if (empty? x) 0 (+ 1 (list-count (rest x)))))", "problem": 22, "user": "519938f7e4b0aa09cbc0b844"}, {"code": "(fn [c]\n  (loop [n 0\n         c c]\n    (if (nil? (first c))\n      n\n      (recur (inc n) (rest c)))))", "problem": 22, "user": "50f69a3ce4b0035e89151844"}, {"code": "(fn [xs] (reduce (fn [x y] (+ 1 x)) 0 xs))", "problem": 22, "user": "4fa78336e4b081705acca1c4"}, {"code": "(fn [x] (.size (seq x)))", "problem": 22, "user": "518139bee4b06547fbae1149"}, {"code": "(fn [coll] (reduce (fn [x y] (inc x)) 0 coll))", "problem": 22, "user": "5199ca05e4b022efe2b3ba88"}, {"code": "(fn length [seq]\n  \t(if (empty? seq)\n      0\n      (inc (length (rest seq)))) )", "problem": 22, "user": "519a5880e4b022efe2b3ba93"}, {"code": "#(loop [cnt 0 coll1 %]\n  (if (seq coll1)\n    (recur (inc cnt) (rest coll1))\n    cnt))", "problem": 22, "user": "50a6a8d2e4b0aa96157e2628"}, {"code": "(fn count1 [coll]\n  (loop [coll coll counter 0]\n    (if (empty? coll)\n      counter\n      (recur (rest coll) (inc counter)))))", "problem": 22, "user": "519a6f80e4b022efe2b3ba97"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "519a93b2e4b029e3e1d2cc59"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "519a97e8e4b029e3e1d2cc5a"}, {"code": "(fn [xs]\n  (reduce +\n  \t(map (fn [_] 1) xs)))", "problem": 22, "user": "519b231ee4b0ac1b7dced6a2"}, {"code": "#(reduce (fn [x y] (inc x)) 0 %)", "problem": 22, "user": "519b2570e4b0ac1b7dced6a3"}, {"code": "#(.size (vec %))", "problem": 22, "user": "519bb38de4b0b0d59c754b78"}, {"code": "(fn [x] \n  (let [mycount (fn [x i]\n                  (if (seq x) \n                      (recur (next x) (inc i))\n                      i))]\n    (mycount x 0)\n  ))", "problem": 22, "user": "519be011e4b0a1d87b00344e"}, {"code": "(comp #(reduce (fn [a b] (+ a 1)) %) #(map (fn [x] (+ 1 )) %))", "problem": 22, "user": "519bb7cbe4b0b2d799d893e5"}, {"code": "#(reduce (fn [x _] (inc x)) 0 %)", "problem": 22, "user": "519b7d76e4b02a926d9a436e"}, {"code": "(fn [coll]\n    (loop [c coll cnt 0]\n      (if (empty? c)\n        cnt\n        (recur (rest c) (inc cnt)))))", "problem": 22, "user": "519a6868e4b022efe2b3ba96"}, {"code": "(fn [sq]\n  (loop [cnt 0\n         rsq sq]\n    (if (seq rsq)\n      (recur (inc cnt) (rest rsq))\n      cnt)))", "problem": 22, "user": "519c0c6ee4b0a1d87b003450"}, {"code": "(fn [coll]\n  (loop [n 0 c coll]\n    (if (empty? c)\n      n\n      (recur (+ n 1) (rest c)))))", "problem": 22, "user": "51991a89e4b068aa333628fd"}, {"code": "(fn [c] (reduce (fn [n coll] (inc n)) 0 c))", "problem": 22, "user": "519b9361e4b07adb65ca4548"}, {"code": "(fn count-els [xs] (if (empty? xs) 0 (+ 1 (count-els (rest xs)))))", "problem": 22, "user": "519ca227e4b0a1d87b003460"}, {"code": "(fn cou \n    ([l]\n     (cou l 0)\n    )\n    ([l i]\n       (if (empty? l)\n         i\n         (recur (rest l) (inc i))\n       )\n     )\n  )", "problem": 22, "user": "5191045ee4b0f8ef0be96bf3"}, {"code": "(fn [x] \n\t(reduce + (map (fn[y] 1) x)))", "problem": 22, "user": "51794ec2e4b0684c1c981a45"}, {"code": "(fn count' [s]\n  (if-let [s' (seq s)]\n    (inc (count' (rest s')))\n    0))", "problem": 22, "user": "4dade9e9c9a9d6ed4799dc57"}, {"code": "(fn [coll] (apply + (map (constantly 1) coll)))", "problem": 22, "user": "4e31ab1d535deb9a81d77f1f"}, {"code": "#(loop [remainder %, acc 0] (if (seq remainder) (recur (rest remainder) (+ acc 1)) acc))", "problem": 22, "user": "519d66d2e4b037b32803f9b2"}, {"code": "(fn [x]\n  (loop [x x\n         n 0]\n    (if (empty? x)\n      n\n      (recur (rest x) (inc n)))))", "problem": 22, "user": "519db0ede4b037b32803f9b9"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "5167cf82e4b0c5a4140a3095"}, {"code": "(fn [col]\n  (loop [c col\n         i 0]\n    (if-not (seq c)\n      i\n      (recur (rest c) (inc i)))))", "problem": 22, "user": "51030edbe4b00c483ae17700"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "519e8fb6e4b0acf32bc6a431"}, {"code": "#(reduce (fn [i _] (inc i)) 0 %)", "problem": 22, "user": "519e9f06e4b0acf32bc6a433"}, {"code": "#(reduce (fn [c _] (inc c)) 0 %)\n\n;#([%] 5)\n\n;(fn [x] 5)", "problem": 22, "user": "519e70d5e4b0acf32bc6a42c"}, {"code": "#(loop [ll % i 0] (if (= ll '()) i (recur (rest ll) (inc i))))", "problem": 22, "user": "5192ce1de4b0024e2d75f7d2"}, {"code": "#(.size (vec %))", "problem": 22, "user": "51a05bede4b0b292b01ee3f4"}, {"code": "(fn cnt[list]\n  (if (empty? list) \n    0\n    (+ 1 (cnt (rest list)))))", "problem": 22, "user": "51a16b08e4b00957e520db74"}, {"code": "(fn cnt [x]\n   (if\n     (empty? x)\n     0\n     (+ 1 (cnt (rest x)))))", "problem": 22, "user": "51a16660e4b00957e520db73"}, {"code": "(fn [s]\n  (loop [seq (seq s) c 0]\n    (if (coll? seq)\n      (recur (next seq) (+ c 1))\n      c)))", "problem": 22, "user": "51a132cee4b0b292b01ee3ff"}, {"code": "(partial \n (fn foo [res s1] \n   (if \n     (= s1 '()) \n     res\n     (foo (inc res) (rest s1))\n\t)\n  )\n 0\n )", "problem": 22, "user": "51a0e0b7e4b0b292b01ee3fb"}, {"code": "(fn [s] \n  (let [helper (fn [s c] \n                 (if (empty? s)\n                    c          \t\t   \n                   (recur (rest s) (inc c))))\n        ]\n    (helper s 0)\n    )\n  )", "problem": 22, "user": "51a24c6ae4b00957e520db7a"}, {"code": "(fn [coll]\n  (loop [coll coll\n         i 0]\n    (if (empty? coll)\n      i\n      (recur (rest coll) (inc i)))))", "problem": 22, "user": "505a3706e4b021387fb89855"}, {"code": "(fn [col]\n   (loop [x col\n          n 0]\n     (if (empty? x)\n       n\n       (recur (rest x) (inc n)))))", "problem": 22, "user": "50608236e4b07251188e4454"}, {"code": "(fn [seq] (reduce (fn [a b] (inc a)) 0 seq))", "problem": 22, "user": "51a2a376e4b00957e520db7f"}, {"code": "(fn [x] \n  (loop [x x\n         r 0]\n    (if (empty? x)\n      r\n      (recur (rest x) (inc r)))))", "problem": 22, "user": "51406cc5e4b076604f1aa554"}, {"code": "(fn [x] (reduce (fn [n _] (inc n)) 0 x))", "problem": 22, "user": "51a3c9cde4b0e77c4ca60bf9"}, {"code": "#(reduce (fn [x y] (inc x)) 0 %)", "problem": 22, "user": "51a28023e4b00957e520db7e"}, {"code": "#(reduce (fn [acc x] (+ 1 acc)) 0 %)", "problem": 22, "user": "519dbf26e4b037b32803f9bd"}, {"code": "(letfn [(C [coll]\n           (if (empty? coll) 0\n             (inc (C (rest coll)))))]\n  C)", "problem": 22, "user": "51a4416ae4b0def3c5c5868c"}, {"code": "#(reduce + (map(fn[x] 1) %))", "problem": 22, "user": "51a34135e4b0ab315a23ba63"}, {"code": "(fn [n]\n  (loop [l n c 0]\n  \t(if (empty? l)\n      c\n      (recur (rest l) (+ 1 c)))))", "problem": 22, "user": "51a4b5dee4b0def3c5c58697"}, {"code": "#((fn c [s a]\n    (if (seq s)\n      (c (rest s) (inc a))\n      a))\n  %\n  0)", "problem": 22, "user": "51a10b2ce4b0b292b01ee3fe"}, {"code": "#(apply + (map (fn [x] 1) %))", "problem": 22, "user": "51a3ca78e4b0e77c4ca60bfa"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "5143a51be4b0b4fb4ace5f39"}, {"code": "(fn [x] (loop [coll (seq x) result 0]\n          (if (empty? coll) result\n            (recur (rest coll) (inc result)))))", "problem": 22, "user": "519c5a08e4b0a1d87b00345b"}, {"code": "#(reduce (fn [x,y] (inc x)) 0 %)", "problem": 22, "user": "51a0cefbe4b0b292b01ee3f8"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "51a584c7e4b051b01d55f44e"}, {"code": "#(loop [ result 0 c %]\n   (if (empty? c) result\n     (recur (inc result) (rest c))))", "problem": 22, "user": "51a477eee4b0def3c5c58692"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "51a49b21e4b0def3c5c58694"}, {"code": "(fn [x] (reduce #(if %2 (+ % 1)) 0 x))", "problem": 22, "user": "4e68ed35535d8ccf87e9fe92"}, {"code": "(fn cnt [s] (+ 1 (last (map-indexed (fn [i, element] i) s))))", "problem": 22, "user": "51a4767fe4b0def3c5c58691"}, {"code": "#(loop [i 0] (if (nth % i false) (recur (inc i)) i))", "problem": 22, "user": "51a5d967e4b051b01d55f454"}, {"code": "(fn [s] (loop [r s c 0] (if (empty? r) c (recur (rest r) (inc c)) )))", "problem": 22, "user": "51a61484e4b0740bfd1afd1e"}, {"code": "(fn [x]\n  (loop [r x\n         i 0]\n    (if (= r [])\n      i\n      (recur (rest r) (inc i)))))", "problem": 22, "user": "51a671d4e4b0740bfd1afd21"}, {"code": "(fn [x] \n  (loop [z 0 \n\t   y x] \n  (cond \n  \t(empty? (rest y)) (+ z 1)\n    :else\n      (recur (+ z 1) (rest y))\n    )\n  )\n)", "problem": 22, "user": "51a5c79ee4b051b01d55f450"}, {"code": "#(reduce + (map (fn [w] 1) %))", "problem": 22, "user": "51a58b59e4b051b01d55f44f"}, {"code": "(fn [coll] \n  (reduce + (map (constantly 1) coll)))", "problem": 22, "user": "519697a2e4b04c0af7ff3c21"}, {"code": "(fn countElem[ls] ((fn countHelper [accum xs] (if (empty? xs) accum (countHelper (+ accum 1) (rest xs))\n                                               )) 0 ls))", "problem": 22, "user": "51a75902e4b0da5f497bde82"}, {"code": "(fn c\n  [l]\n  (cond\n   (empty? l) 0\n   :else (+ 1 (c (rest l)))))", "problem": 22, "user": "518c0f4ee4b0f028e99addf7"}, {"code": "reduce (fn [c _] (inc c)) 0", "problem": 22, "user": "51a417dde4b0def3c5c58688"}, {"code": "reduce #(+ (or 1 %2) %1) 0", "problem": 22, "user": "4e03b066535d04ed9115e795"}, {"code": "reduce (fn [m i] (+ m 1)) 0", "problem": 22, "user": "51a78d8be4b0da5f497bde86"}, {"code": "(fn [x] (loop [s x n 0] (if (= s ()) n (recur (rest s) (+ n 1)))))", "problem": 22, "user": "51a7f74be4b08d8ec191b802"}, {"code": "reduce (fn [c _] (inc c)) 0", "problem": 22, "user": "50414e3ce4b06d8231e4facd"}, {"code": "(fn mycount [s]\n  (if (seq s)\n    (inc (mycount (rest s)))\n    0))", "problem": 22, "user": "51a4d53ae4b0def3c5c58699"}, {"code": "(fn [coll] (reduce (fn [a b] (inc a)) 0 coll))", "problem": 22, "user": "51a768e0e4b0da5f497bde84"}, {"code": "reduce (fn [x _] (inc x)) 0", "problem": 22, "user": "51a88e7fe4b08d8ec191b813"}, {"code": "(fn [coll] (reduce + (map (fn [x] 1) coll)))", "problem": 22, "user": "51a8ab8ee4b08d8ec191b819"}, {"code": "(fn [y] (reduce + (map (fn [x] 1) y)))", "problem": 22, "user": "51a87d28e4b08d8ec191b811"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "51a827aae4b08d8ec191b80c"}, {"code": "(fn fu [s] (if (empty? s) 0 (inc (fu (next s)))))", "problem": 22, "user": "51a7b4fee4b0da5f497bde8b"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "51a8ef91e4b08d8ec191b820"}, {"code": "(fn [xyz]\n  (reduce (fn [x y] (+ x 1)) 0 xyz))", "problem": 22, "user": "5190772de4b09156e89b2a0a"}, {"code": "(fn [xs]\n  (loop [xs xs\n         n 0]\n    (if (empty? xs)\n      n\n      (recur (rest xs) (inc n)))))", "problem": 22, "user": "51a8f0c6e4b08d8ec191b821"}, {"code": "#(reduce (fn [n _] (inc n))  0 %1)", "problem": 22, "user": "518637c9e4b0da5a5be3bac8"}, {"code": "#(apply + (map (constantly 1) %))", "problem": 22, "user": "51a9dbc9e4b04e3dc0c27b1e"}, {"code": "(fn countme [c]\n\t(if (empty? c)\n      0\n      (+ 1 (countme (rest c)))))", "problem": 22, "user": "51985113e4b068aa333628f9"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "51a89810e4b08d8ec191b817"}, {"code": "(fn [coll] (reduce (fn [a b] (inc a)) 0 coll))", "problem": 22, "user": "50ecf888e4b01236b1d49835"}, {"code": "(fn [xs]\n  (reduce (fn [accum nxt] (inc accum)) 0 xs))", "problem": 22, "user": "51aa2b4fe4b04e3dc0c27b21"}, {"code": "reduce (fn [v xs] (+ 1 v)) 0", "problem": 22, "user": "4ec96da2535d6d7199dd36ff"}, {"code": "(fn [s]\n  (loop [size 0 coll s]\n    (if (= coll '())\n      size\n      (recur (inc size)\n             (rest coll)))))", "problem": 22, "user": "51a3cc45e4b0e77c4ca60bfb"}, {"code": "#(reduce + (map (fn [a] '1) %))", "problem": 22, "user": "51aa5434e4b04e3dc0c27b26"}, {"code": "#(reduce (fn [s e] (inc s)) 0 %)", "problem": 22, "user": "5065dd94e4b0313a384e5643"}, {"code": "#(reduce (fn [x y] (+ x 1)) 0 %)", "problem": 22, "user": "51a54fb4e4b0def3c5c586a3"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "51aa9a75e4b04e3dc0c27b2a"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "51a91ac2e4b08d8ec191b822"}, {"code": "(fn [coll] \n  (loop [coll coll\n         cnt 0]\n    (if-not (empty? coll)\n      (recur (rest coll) (inc cnt))\n      cnt)\n    )\n  )", "problem": 22, "user": "51aab611e4b04e3dc0c27b2d"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4f74fed2e4b0fbe0118ec553"}, {"code": "( fn [x] ( reduce + (map #( if ( = % % ) 1 ) x ) ) )", "problem": 22, "user": "51aa4eede4b04e3dc0c27b25"}, {"code": "#(reduce + (map (constantly 1 ) % ))", "problem": 22, "user": "507ae4fae4b09034bfeeb71a"}, {"code": "(fn mycount [s]\n(letfn [(inner_count [sequence, counter]\n  (if-not (empty? sequence)\n    (recur (next sequence) (inc counter))\n    counter))]\n (inner_count s 0)))", "problem": 22, "user": "51ab7a68e4b04e3dc0c27b35"}, {"code": "(fn cnt [x] (if (= x '()) 0 (+ 1 (cnt (rest x)))))", "problem": 22, "user": "51ab1718e4b04e3dc0c27b2f"}, {"code": "#(reduce +\n        (map (fn [x] 1) %1))", "problem": 22, "user": "5183f5d7e4b02826a645f393"}, {"code": "(fn [x]\n  (let [counter (ref 0)]\n    \n      (loop [s x]\n        (when (not= s nil)\n\t      (dosync (alter counter inc))\n          (recur (next s))\n        )\n     )\n     @counter\n  )\n)", "problem": 22, "user": "51316a63e4b0431ba07e7feb"}, {"code": "(fn c [x] ( if (empty? x) 0 (+ (c (rest x) ) 1) ) )", "problem": 22, "user": "51ab70c3e4b04e3dc0c27b33"}, {"code": "#(reduce (fn [m i] (+ m 1)) 0 %)", "problem": 22, "user": "506cad7de4b0a302964c548e"}, {"code": "(fn [l] \n   (reduce + (map (fn [x] 1) l))\n)", "problem": 22, "user": "51ac61c8e4b09397d510976b"}, {"code": "#(reduce + (map (constantly 1) (seq %)))", "problem": 22, "user": "51ac73e5e4b09397d510976d"}, {"code": "#(reduce + (map (constantly 1) (seq %)))", "problem": 22, "user": "51ac8717e4b09397d5109773"}, {"code": "(fn [xs]\n  (reduce (fn [acc x] (+ acc 1)) 0 xs))", "problem": 22, "user": "51ac6360e4b09397d510976c"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "51ac36c1e4b09397d5109765"}, {"code": "(fn my-count [coll] (reduce (fn [x y] (inc x)) 0 coll))", "problem": 22, "user": "4f49bca5e4b0d56e7bb92bfb"}, {"code": "reduce (comp inc first list) 0", "problem": 22, "user": "510b0480e4b078ea719210fa"}, {"code": "(fn my-count [X]\n  (if (empty? X) 0\n    (+ 1 (my-count (rest X)))))", "problem": 22, "user": "51ad0ab8e4b09397d510977b"}, {"code": "(fn f [xs] \n  (if (empty? xs)\n    0\n    (+ 1 (f (rest xs)))))", "problem": 22, "user": "51ad20eee4b09397d510977e"}, {"code": "#(loop [xs % c 0]\n    (if \n      (empty? xs) c\n      (recur (rest xs) (inc c))))", "problem": 22, "user": "51a1659de4b00957e520db72"}, {"code": "(fn [coll]\n  (reduce (fn [acc _] (inc acc)) 0 coll))", "problem": 22, "user": "508e26c2e4b0f17d83ea26ca"}, {"code": "#(reduce (fn [x _] (inc x)) 0 %)", "problem": 22, "user": "516c6eabe4b06f078fab2522"}, {"code": "(fn [coll] (loop [coll coll acc 0] (if (empty? coll) acc (recur (rest coll) (inc acc)))))", "problem": 22, "user": "51ad54cee4b09397d5109781"}, {"code": "(fn o-count [col]\n    (if (empty? col) 0\n      (+ 1 (o-count (rest col)))))", "problem": 22, "user": "4f5f2665e4b0030a34fb2b5d"}, {"code": "(fn count-seq [s]\n  (\n   (fn [seq n]\n    (if (empty? seq)\n      n\n      (recur (rest seq) (inc n)))\n    ) s 0\n  )\n)", "problem": 22, "user": "51aa2ad6e4b04e3dc0c27b20"}, {"code": "(fn cnt[x] \n  (if \n    (empty? x) \n    0 \n    (+ 1 (cnt (rest x)))))", "problem": 22, "user": "51ae16f1e4b09397d510978e"}, {"code": "(fn [coll]\n  (loop [collection coll\n         result 0]\n     (if (empty? collection)\n       result\n       (recur (rest collection) (inc result)))) )", "problem": 22, "user": "51ade59ae4b09397d510978a"}, {"code": "(fn my-count\n  [some-seq]\n  (reduce \n  \t(fn \n      [acc _]\n      (+ acc 1))\n   \t0 some-seq))", "problem": 22, "user": "51af4cf6e4b0c53cf2e68a4c"}, {"code": "(fn c\n  ([x] (c x 0))\n  ([x i] (if (not-empty x) \n   \t\t   (c (rest x) (inc i))\n           i\n         )\n  )\n)", "problem": 22, "user": "51aee76ce4b09397d5109796"}, {"code": "(fn f [x]\n  (if \n    (seq \n    \t(rest x))\n        \t(+ 1 (f (rest x)))\n           1\n    )\n  )", "problem": 22, "user": "51af978fe4b0c53cf2e68a50"}, {"code": "#(reduce + (map (fn [a] 1) %))", "problem": 22, "user": "51aeb1f4e4b09397d5109794"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "518261a4e4b0f2adb7336523"}, {"code": "(fn ecount [list]\n  (if (empty? list)\n    0\n  \t(+ 1 (ecount (rest list)))))", "problem": 22, "user": "51b01309e4b0c53cf2e68a57"}, {"code": "(fn [coll] (reduce + (map (constantly 1) coll)))", "problem": 22, "user": "51a82498e4b08d8ec191b80b"}, {"code": "(fn [what] (reduce (fn [a b] (+ a 1)) 0 what))", "problem": 22, "user": "51b0436ae4b0c53cf2e68a60"}, {"code": "(fn [s] (reduce (fn [sum _] (inc sum)) 0 s))", "problem": 22, "user": "51b07b99e4b0c53cf2e68a66"}, {"code": "(fn [coll] \n  (reduce (fn [x y] (inc x)) 0 coll))", "problem": 22, "user": "51b0359ae4b0c53cf2e68a5f"}, {"code": "#(reduce + (map (fn[x] 1) %))", "problem": 22, "user": "51b091e9e4b0c53cf2e68a68"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "515919fbe4b0394f658fe229"}, {"code": "#(reduce (fn [x y] (inc x)) 0 %)", "problem": 22, "user": "51afa3d9e4b0c53cf2e68a51"}, {"code": "#(reduce (fn[x y] (inc x)) 0 %)", "problem": 22, "user": "51af872ae4b0c53cf2e68a4e"}, {"code": "#(reduce +\n         (map (fn [_] 1)\n              %))", "problem": 22, "user": "51b0c13ce4b0c53cf2e68a6a"}, {"code": "(fn counter [coll]\n  ((fn [coll x]\n     (if (empty? coll)\n       x\n       (recur (drop-last coll) (+ x 1)))) coll 0))", "problem": 22, "user": "51ab734ee4b04e3dc0c27b34"}, {"code": "(fn [s]\n  (loop [s s\n         n 0]\n    (if (empty? s)\n      n\n      (recur (rest s) (+ n 1)))))", "problem": 22, "user": "51b16f19e4b0c53cf2e68a7a"}, {"code": "(fn [l]\n  (loop [l l c 0]\n    (if (seq l) \n      (recur (rest l) (inc c))\n      c)))", "problem": 22, "user": "51b10ebde4b0c53cf2e68a74"}, {"code": "reduce (fn [x y] (inc x)) 0", "problem": 22, "user": "51b1b344e4b0c53cf2e68a87"}, {"code": "#(loop [i 0 s (vec %)] (if (not= [] s) (recur (inc i) (pop s)) i))", "problem": 22, "user": "51b1ef95e4b02f8f128bb95e"}, {"code": "#(reduce (fn [x _](inc x)) 0 %)", "problem": 22, "user": "51b0fc95e4b0c53cf2e68a72"}, {"code": "(fn [s] (reduce + 0 (map (fn [_] 1) s)))", "problem": 22, "user": "51a8b576e4b08d8ec191b81a"}, {"code": "reduce (fn [x y] (inc x)) 0", "problem": 22, "user": "51b2e850e4b026427ecf067b"}, {"code": "#(reduce (fn [sum _] (inc sum)) 0 %)", "problem": 22, "user": "51b38769e4b026427ecf067f"}, {"code": "(fn [x] (reduce + (map (fn [x] 1) x)))", "problem": 22, "user": "51b3a2c8e4b0f094dd986fa6"}, {"code": "(fn [coll]\n  (loop [coll coll\n         result 0]\n     (if (empty? coll)\n       result\n       (recur (rest coll) (inc result)))) )", "problem": 22, "user": "51b213c2e4b02f8f128bb962"}, {"code": "reduce #(do %2 (+ 1 %)) 0", "problem": 22, "user": "51b3f109e4b0f094dd986fa9"}, {"code": "(fn [s] (if (= nil (first s)) \n          0 \n          (loop [x s n 1] (if (= nil (next x)) n (recur (next x) (inc n))))))", "problem": 22, "user": "51ab8589e4b04e3dc0c27b37"}, {"code": "(fn [lst]\n  (reduce \n   #(let [x %1 y %2] \n     (+ x 1)) 0 lst))", "problem": 22, "user": "50d4593ee4b09cc622d65a68"}, {"code": "(fn [aseq]\n  (loop [res 0 s aseq]\n    (if s\n      (recur (inc res) (next s))\n      res)))", "problem": 22, "user": "51b3b22ce4b0f094dd986fa7"}, {"code": "#(reduce(fn [x y] (inc x)) 0 %)", "problem": 22, "user": "518ad8fce4b06da86c1973c1"}, {"code": "(fn get-num-elements [lat] \n  (if (= lat ())\n    0 \n    (+ (get-num-elements (rest lat)) 1)\n    )\n  )", "problem": 22, "user": "514cc029e4b019235f6c057c"}, {"code": "(fn thing [x] (if (empty? (rest x)) 1 (+ 1 (thing (rest x)))))", "problem": 22, "user": "51b51fe6e4b0f094dd986fbb"}, {"code": "(fn c [seq]\n  (\n    (fn x [seq2, n] (\n        if (empty? seq2) n (recur (rest seq2) (+ n 1))\n    )) seq 0\n  )\n)", "problem": 22, "user": "4f2c3ef8e4b0d6649770a051"}, {"code": "(fn [coll] (reduce (fn [a b] (+ a 1)) 0 coll))", "problem": 22, "user": "51b08df5e4b0c53cf2e68a67"}, {"code": "#(loop [c 0\n        x %]\n   (if (seq x)\n       (recur (inc c) (rest x))\n     c))", "problem": 22, "user": "51ab1da1e4b04e3dc0c27b30"}, {"code": "reduce (fn [n m] (+ n 1)) 0", "problem": 22, "user": "51b5e5f6e4b0f094dd986fd1"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "5197d144e4b068aa333628f0"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "51b5e86ae4b0f094dd986fd2"}, {"code": "#(.length (vec %))", "problem": 22, "user": "50a5b7e9e4b0aa96157e2610"}, {"code": "(fn mycount [x]\n  (if (empty? x)\n    0\n    (+ 1\n       (mycount (rest x)))))", "problem": 22, "user": "51b6cfd6e4b02e5820733413"}, {"code": "(fn [x] (apply + (map (fn [x] (+ 1)) x)))", "problem": 22, "user": "51b70902e4b04fc00976d47b"}, {"code": "(fn zzz [s]\n   (if (empty? s) 0 (+ 1 (zzz (rest s))))\n   )", "problem": 22, "user": "51b5a6e0e4b0f094dd986fce"}, {"code": "(fn count0 [x]\n  (if (= '() x) 0\n    (+ 1 (count0 (rest x)))))", "problem": 22, "user": "51b73a91e4b0d906fcd71d33"}, {"code": "(fn cnt [s] (if (empty? s) 0 (inc (cnt (rest s)))))", "problem": 22, "user": "51672d15e4b079759a74a5e7"}, {"code": "(fn my-count [s]\n  (if (= () s) 0\n      (+ 1 (my-count (rest s)))))", "problem": 22, "user": "51b76227e4b0d906fcd71d35"}, {"code": "(fn [l] (loop [r l total 0] (if (empty? r) total (recur (rest r) (inc total)))))", "problem": 22, "user": "51b6f4f9e4b04fc00976d479"}, {"code": "(fn [coll_]\n   (loop [n 0 coll coll_]\n     (if (seq coll)\n       (recur (inc n) (rest coll))\n       n)))", "problem": 22, "user": "4f5c68c6e4b0030a34fb2b23"}, {"code": "(fn ! [x] (if (= x ()) 0 (+ 1 (!(rest x)))))", "problem": 22, "user": "51b09276e4b0c53cf2e68a69"}, {"code": "(fn [x] (loop [sq x length 0] (if (empty? sq) length (recur (rest sq) (inc length)))))", "problem": 22, "user": "51b77c9be4b0d906fcd71d37"}, {"code": "(fn [l]\n  (loop [l l n 0]\n    (if (empty? l) \n      n \n      (recur (rest l) (inc n)))))", "problem": 22, "user": "51b793d3e4b0d906fcd71d38"}, {"code": "(fn cnt [s]\n  ((fn real-cnt [s n] (if (= '() s)\n                          n\n                          (real-cnt (rest s) (+ 1 n)))) s 0))", "problem": 22, "user": "51b88733e4b050a1176cd699"}, {"code": "(fn my-count [s]\n      (if (nil? (first s))\n        0\n        (+ 1 (my-count (rest s)))))", "problem": 22, "user": "51b89503e4b050a1176cd69a"}, {"code": "(fn [val] (last (last (take-while (fn [seq] (not= '() (first seq))) (iterate (fn [[my-seq my-inc]] [(rest my-seq) (+ 1 my-inc)]) [val 1])))))", "problem": 22, "user": "51b7b521e4b0d906fcd71d3a"}, {"code": "(fn [coll]\n  ((fn [coll n]\n     (if (empty? coll)\n       n\n       (recur (rest coll) (inc n))\n       )\n     ) coll 0))", "problem": 22, "user": "51b8e0dce4b050a1176cd69f"}, {"code": "(fn my-count [xs]\n  (if (empty? xs)\n      0\n      (+ 1 (my-count (rest xs)))))", "problem": 22, "user": "51b91b08e4b0e871ca4958f8"}, {"code": "(fn [xs]\n  (loop [ys xs i 0]\n    (if (empty? ys)\n      i\n      (recur (rest ys) (+ i 1)))))", "problem": 22, "user": "51b920bfe4b0e871ca4958f9"}, {"code": "(fn my-count [s]\n  (if (next s)\n    (inc (my-count (next s)))\n    1))", "problem": 22, "user": "51b86a0fe4b09e0e347b2e78"}, {"code": "(fn f ([s] (f s 0)) ([s i] (if (empty? s) i (f (rest s) (inc i)))))", "problem": 22, "user": "51b9b5ace4b0e871ca495908"}, {"code": "(fn my-count [s] (reduce (fn [i x] (+ 1 i)) 0 s))", "problem": 22, "user": "51ba59e4e4b0fe3ecfb4642d"}, {"code": "(fn [x]\n  (loop [c 1\n         x x]\n    (if (next x) (recur (+ c 1) (next x)) c)))", "problem": 22, "user": "51ba73c6e4b0fe3ecfb4642f"}, {"code": "#(reduce + 0 (map (fn [_] 1) %1))", "problem": 22, "user": "51ae350fe4b09397d5109790"}, {"code": "(fn my-count [xs]\n\t(reduce (fn [a b] (+ a b))\n            (map (fn [x] 1) xs)))", "problem": 22, "user": "51baff1be4b0fe3ecfb46443"}, {"code": "(fn lp\n  [li]\n  (cond\n   (= li '()) 0\n   :else      (+ 1 (lp (rest li)))))", "problem": 22, "user": "51bb970be4b0fe3ecfb4644e"}, {"code": "(fn [x] (reduce + (map (fn [y] 1) x)))", "problem": 22, "user": "51b18685e4b0c53cf2e68a86"}, {"code": "#(inc (first (last (map-indexed vector %))))", "problem": 22, "user": "51bc1d76e4b0fe3ecfb46450"}, {"code": "#(loop [coll % i 0] (if (empty? coll) i (recur (rest coll) (inc i))) )", "problem": 22, "user": "4f99bf3ee4b0dcca54ed6d01"}, {"code": "#( reduce + (map (fn [_] 1) %))", "problem": 22, "user": "51bc2f6ae4b0fe3ecfb46452"}, {"code": "(fn [sequence] (reduce (fn [acc v] (inc acc)) 0 sequence))", "problem": 22, "user": "4fa340b4e4b081705acca18c"}, {"code": "(fn blah\n  [v]\n  (if (empty? v)\n      0\n      (inc (blah (rest v)))))", "problem": 22, "user": "51bc99afe4b0fe3ecfb4645e"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "51bc6d54e4b0fe3ecfb4645c"}, {"code": "(fn [a] (apply + (map (fn [x] 1) a)))", "problem": 22, "user": "514f6679e4b0b449e54b8df5"}, {"code": "#(reduce (fn [x y] (inc x)) 0 %)", "problem": 22, "user": "51bd4ad0e4b0ff155d51d2a8"}, {"code": "#(reduce (fn [n _] (inc n)) 0 %)", "problem": 22, "user": "51bd1a0de4b0df1216cefd93"}, {"code": "#(.size (seq %))", "problem": 22, "user": "51bcf091e4b0df1216cefd91"}, {"code": "(fn [coll]\n  (reduce (fn [r i] (inc r)) 0 coll))", "problem": 22, "user": "504e0517e4b078edc5f5939a"}, {"code": "(fn [coll]\n  (let [helper (fn [coll n]\n                 (if (empty? coll)\n                   n\n                   (recur (next coll) (inc n))))]\n    (helper coll 0)))", "problem": 22, "user": "51bd5796e4b0ff155d51d2aa"}, {"code": "(fn [s] (loop [r s c 1] (if-not (empty? (rest r)) (recur (rest r) (inc c)) c)))", "problem": 22, "user": "51bd8c53e4b0ff155d51d2b2"}, {"code": "(fn [coll] (reduce (fn [memo item] (inc memo)) 0 coll))", "problem": 22, "user": "51be0600e4b0ff155d51d2b9"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "519462b6e4b0142f60b4aede"}, {"code": "(fn [y] (reduce + (map (fn [x] 1) y)))", "problem": 22, "user": "51be0a2ce4b0ff155d51d2ba"}, {"code": "#(loop [ x % n 0] \n             (if (empty? x) \n               n \n               (recur (rest x) (inc n))\n               )\n          )", "problem": 22, "user": "51beb32ae4b013aa0d74b7fd"}, {"code": "#(reduce (fn ([x y] (inc x))) 0 %1)", "problem": 22, "user": "51bec919e4b013aa0d74b800"}, {"code": "#(reduce (fn [n _] (inc n)) 0 %)", "problem": 22, "user": "51bee4afe4b013aa0d74b809"}, {"code": "(fn count-a-seq [lat]\n  (reduce (fn [x y] (+ x 1)) 0 lat))", "problem": 22, "user": "51bf0ccee4b013aa0d74b811"}, {"code": "(partial (fn c [n sq] \n  (if (empty? sq) \n   n\n   (c (inc n) (rest sq)))) \n0)", "problem": 22, "user": "51b9d1f0e4b0e871ca49590b"}, {"code": "(fn countseq [aseq] (if (empty? aseq) 0 (+ 1 (countseq (rest aseq)))))", "problem": 22, "user": "51bf4560e4b013aa0d74b817"}, {"code": "reduce (fn [c _] (inc c)) 0", "problem": 22, "user": "51b90b88e4b050a1176cd6a2"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "51bf756be4b0e49ef9037dd0"}, {"code": "#(loop [counter 0\n        sequence %]\n   \n   (if (empty? sequence) \n     counter\n     (recur (inc counter) (rest sequence))\n   )\n   \n )", "problem": 22, "user": "51a865dfe4b08d8ec191b80f"}, {"code": "#(reduce (fn[x y] (inc x)) 0 %)", "problem": 22, "user": "51b9dc12e4b0e871ca49590c"}, {"code": "#(reduce (fn [a x] (inc a)) 0 %)", "problem": 22, "user": "51ba4482e4b0fe3ecfb4642b"}, {"code": "reduce (fn [n _] (inc n)) 0", "problem": 22, "user": "51a97f7ae4b08d8ec191b827"}, {"code": "(fn count-items\n  ([coll] \n               (if (nil? (first coll))\n                 0\n                 (count-items (rest coll) 1)))\n  ([coll counter]\n               (if (nil? (first coll))\n                 counter\n                 (count-items (rest coll) (inc counter)))))", "problem": 22, "user": "5042bb9ae4b034ff00315d16"}, {"code": "(fn tmp [s]\n  (if (= s '())\n    0\n    (+ 1 (tmp (rest s)))))", "problem": 22, "user": "51c1229be4b0c9c822882944"}, {"code": "(fn myc [[_ & rest]]\n  (if rest\n    (inc (myc rest))\n    1\n    )\n  )", "problem": 22, "user": "51bc60dce4b0fe3ecfb46458"}, {"code": "(fn myCount [x] (if (empty? x) 0 (+ 1 (myCount (rest x)) )))", "problem": 22, "user": "51c214bce4b0d204dbe2ca1c"}, {"code": "(fn [coll]\n  (loop [coll coll\n         result 0]\n    (if (empty? coll)\n      result\n      (recur (rest coll) (inc result)))))", "problem": 22, "user": "51baa1cae4b0fe3ecfb46438"}, {"code": "(fn [x]\n      (loop [i x j 0]\n        (if (empty? i)\n          (int j)\n          (recur (rest i) (+ 1 j)))))", "problem": 22, "user": "51bd255ce4b0df1216cefd94"}, {"code": "(fn my-count [col]\n  (loop [restseq col\n         acc 0]\n  (if (empty? restseq)\n                acc \n                (recur (rest restseq) (inc acc)))))", "problem": 22, "user": "51aa7298e4b04e3dc0c27b28"}, {"code": "(fn woot [x]\n  (if (empty? x)\n    0\n    (inc (woot (rest x))))\n  )", "problem": 22, "user": "51c2fc7de4b0d204dbe2ca2e"}, {"code": "(fn [s]\n  (loop [s s i 0]\n    (if (empty? s) i (recur (rest s) (inc i)))))", "problem": 22, "user": "51c342e9e4b0851ac09658f3"}, {"code": "#(reduce (fn[x _] (inc x)) 0 %)", "problem": 22, "user": "51b8e020e4b050a1176cd69e"}, {"code": "#(reduce + (map (fn [_] 1) %))", "problem": 22, "user": "4f5dae33e4b0030a34fb2b41"}, {"code": "(fn [coll] (reduce (fn [n _] (inc n)) 0 coll))", "problem": 22, "user": "51b9f5a6e4b0e871ca49590e"}, {"code": "(fn [sq] ((fn [sq cnt] (if(empty? sq) cnt (recur (rest sq) (inc cnt)))) sq 0))", "problem": 22, "user": "51c3c6a6e4b0851ac09658f8"}, {"code": "(fn countx [x](loop [i 0](if(nthnext x i)(do(recur(inc i))) i)))", "problem": 22, "user": "5052f4fce4b0a561d07d8f26"}, {"code": "#(reduce + (map (fn [x] 1) %1))", "problem": 22, "user": "51c330a9e4b0851ac09658f2"}, {"code": "(fn my-count ([x] (my-count x 1)) ([x y] (if (= (rest x) []) y (my-count (rest x) (inc y)))))", "problem": 22, "user": "51c09719e4b0c9c82288293c"}, {"code": "#(reduce (fn [acc _] (+ 1 acc)) 0 %)", "problem": 22, "user": "51c611c4e4b03a28d42333bf"}, {"code": "(fn [x] \n  (reduce (fn [y, z] (+ y 1)) 0 x)\n)", "problem": 22, "user": "516cdef4e4b06f078fab2527"}, {"code": "(fn [arr] (.length (vec arr)))", "problem": 22, "user": "5191a763e4b0d428d29dc1b4"}, {"code": "#(last (interleave % (iterate inc 1)))", "problem": 22, "user": "51c69d09e4b03a28d42333c3"}, {"code": "#(reduce (fn [sum el] (+ sum 1)) 0 %1)", "problem": 22, "user": "51c6d415e4b07ef393169e3a"}, {"code": "#(loop[x 0,y %] (if(empty? y) x (recur (inc x) (rest y))))", "problem": 22, "user": "51c4690fe4b06b70b3e207e1"}, {"code": "#(loop [i 0 [f & s] %] (if (seq s) (recur (inc i) s) (inc i)))", "problem": 22, "user": "4f6b9d0ae4b07046d9f4efad"}, {"code": "(fn [l] (reduce (fn [e _] (inc e)) 0 l))", "problem": 22, "user": "51c73959e4b07ef393169e3e"}, {"code": "#(reduce\n    +\n    (map\n      (fn [x] 1)\n      %\n    )\n  )", "problem": 22, "user": "50d6d7eee4b0159555a1fc76"}, {"code": "reduce (fn [a _] (inc a)) 0", "problem": 22, "user": "514a711fe4b00c7db5067427"}, {"code": "(fn total [sequ]\n  (loop [s sequ, acc 1]\n    (if (empty? (rest s))\n      acc\n      (recur (rest s) (inc acc))\n)))", "problem": 22, "user": "51c80dd0e4b07ef393169e4a"}, {"code": "reduce (fn [c _] (inc c)) 0", "problem": 22, "user": "51c27b6ce4b0d204dbe2ca21"}, {"code": "(fn num-of-elements\n  ([coll] (num-of-elements coll 0))\n  ([coll num] (if (empty? coll) num (recur (rest coll) (inc num)))))", "problem": 22, "user": "508f4343e4b0ea685a20f767"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "51a7ff35e4b08d8ec191b804"}, {"code": "(fn c [l] \n  (if (= l [])\n    0\n    (+ (c (rest l)) 1)))", "problem": 22, "user": "51c9c6cde4b09ce160bef5b1"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "51c15fe9e4b0c9c82288294c"}, {"code": "(fn [s] \n  (loop [n 0 is s]\n    (if (= [] is) n\n      (recur (inc n) (rest is)))))", "problem": 22, "user": "4f038b62535dcb61093f6b1c"}, {"code": "(fn [lst]\n  (reduce (fn [x y] (+ x 1)) 0 lst))", "problem": 22, "user": "51c76864e4b07ef393169e3f"}, {"code": "reduce (fn [x y] (inc x)) 0", "problem": 22, "user": "51c9d8a6e4b09ce160bef5b3"}, {"code": "#(+ 1 (first (last (map-indexed vector %))))", "problem": 22, "user": "51ca82e9e4b08b1cbd0d9488"}, {"code": ";#( let [c (atom 0)] (doseq [x %] (swap! c inc))  @c )\n;#(count %)\n\n#( reduce +\n   (map (fn [_] 1) % )\n )", "problem": 22, "user": "51c0bfdbe4b0c9c82288293f"}, {"code": "(fn [xs] (reduce (fn [a x] (+ 1 a)) 0 xs))", "problem": 22, "user": "51c1d159e4b0d204dbe2ca18"}, {"code": "#(-> (interleave % (range)) last inc)", "problem": 22, "user": "51c8301ee4b07ef393169e4d"}, {"code": "(fn [s] ((fn [n, x]\n  (if (= (seq n) nil)\n    x\n    (recur (rest n) (+ x 1)))) s 0))", "problem": 22, "user": "51c9a705e4b09ce160bef5ab"}, {"code": "reduce (fn [x _] (inc x)) 0", "problem": 22, "user": "51ca15bfe4b09ce160bef5b8"}, {"code": "#(reduce (fn[x y] (inc x)) 0 %)", "problem": 22, "user": "51cb4900e4b08d8387cbedd6"}, {"code": "#(loop [coll %\n        cnt 0]\n   (if-not (first coll)\n     cnt\n     (recur (rest coll)\n            (inc cnt))))", "problem": 22, "user": "51caca2ae4b068dadb8f2226"}, {"code": "(fn f [l] (case l [] 0 (+ 1 (f (rest l)))))", "problem": 22, "user": "51cbc435e4b08d8387cbeddd"}, {"code": "(comp (partial apply +) (partial map #(do % 1)))", "problem": 22, "user": "51cbdee1e4b08d8387cbede1"}, {"code": "(fn count-seq [coll]\n   (if (empty? (seq coll))\n       0\n       (inc (count-seq (rest (seq coll))))))", "problem": 22, "user": "51cacda3e4b068dadb8f2227"}, {"code": "(fn[coll] (reduce (fn [x y] (+ x 1)) 0 coll))", "problem": 22, "user": "4f294dffe4b0d6649770a024"}, {"code": "(fn [col] (reduce (fn [n _] (inc n)) 0 col))", "problem": 22, "user": "51cc5f20e4b02254fc794870"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "51cb073ce4b068dadb8f2233"}, {"code": "#(reduce (fn [acc _] (+ acc 1)) 0 %)", "problem": 22, "user": "51cc6680e4b02254fc794872"}, {"code": "#(reduce (fn[x y] (inc x)) 0 %)", "problem": 22, "user": "514fd753e4b0b449e54b8e00"}, {"code": "#( reduce + (map (fn [x] 1 ) % ) )", "problem": 22, "user": "51ccc179e4b02254fc794879"}, {"code": "(fn cnt [l]\n  (reduce + (map (fn [x] 1) l)))", "problem": 22, "user": "51ccc92ce4b02254fc79487a"}, {"code": "#(reduce\n  (fn [c _] (inc c))\n \t0 %)", "problem": 22, "user": "504e05b8e4b078edc5f5939c"}, {"code": "(fn counter [as] ((fn mycount [xs c] (if (nil? (first xs)) c (mycount (rest xs) (inc c)))) as 0))", "problem": 22, "user": "51cc155fe4b02254fc794869"}, {"code": "(fn [s] (reduce (fn [i x] (+ 1 i)) 0 s))", "problem": 22, "user": "51cd45e0e4b02254fc794887"}, {"code": "(fn my-count [xs]\n  (loop [c 0\n         col xs]\n    (if (empty? col)\n      c\n      (recur (inc c) (rest col)))))", "problem": 22, "user": "4ead1bb3535d7eef3080731d"}, {"code": "(fn [seq] (reduce (fn [n _] (inc n)) 0 seq))", "problem": 22, "user": "517d03dee4b0f5e87c18f25d"}, {"code": "(fn zz [l]  \n    (if (empty? l)\n      0\n      (+ 1 (zz (rest l)))))", "problem": 22, "user": "51cdec45e4b0e42293a2254f"}, {"code": "(fn [y] ( reduce (fn [acc, x] (+ acc 1)) ( map (fn[x](* 1 1)) (seq y))))", "problem": 22, "user": "51cc2d84e4b02254fc79486c"}, {"code": "(fn [coll]\n  (loop [l (seq coll) cnt 0]\n    (if (empty? l)\n      cnt\n      (recur (rest l) (inc cnt)))))", "problem": 22, "user": "51c858c3e4b07ef393169e55"}, {"code": "(fn [coll] (reduce + (map (constantly 1) coll)))", "problem": 22, "user": "51cdd3f0e4b0e42293a2254b"}, {"code": "#(reduce (fn[x,y] (inc x)) 0 %)", "problem": 22, "user": "51cec7b1e4b0e42293a2255b"}, {"code": "(fn total [lista] \n  (reduce + \n  \t(map (fn [_] 1) lista)\n   )\n)", "problem": 22, "user": "51cec903e4b0e42293a2255c"}, {"code": "#(reduce + (map (fn [x] (if (= x nil) 0 1)) %))", "problem": 22, "user": "51cf126ae4b0e42293a2256b"}, {"code": "(fn count' [coll]\n  (reduce (fn [x _] (inc x)) 0 coll))", "problem": 22, "user": "51cf0993e4b0e42293a2256a"}, {"code": "#( (fn f[coll n] (if(empty? coll) n (recur (rest coll) (inc n))) ) % 0)", "problem": 22, "user": "51cf99bce4b0e42293a22576"}, {"code": "(fn [x]\n  (loop [l x\n         n 0]\n    (if (empty? l)\n      n\n      (recur (rest l) (+ n 1)))))", "problem": 22, "user": "51ce3cd0e4b0e42293a22553"}, {"code": "reduce (fn [c _] (inc c)) 0", "problem": 22, "user": "51b3d998e4b0f094dd986fa8"}, {"code": "(fn [xs] (reduce + (map (fn [x] 1) xs)))", "problem": 22, "user": "51ca7906e4b08b1cbd0d9487"}, {"code": "(fn foo [xs]\n  ((fn foo0 [xs n]\n    (if (empty? xs) n (foo0 (rest xs) (+ n 1))))\n   xs 0)\n )", "problem": 22, "user": "51d07a8be4b0e42293a2257e"}, {"code": "(fn mycount [numbers]\n    (if(empty? numbers)\n        0\n        (+ 1 (mycount (rest numbers)))\n    )\n)", "problem": 22, "user": "51d1111ce4b067c36548635f"}, {"code": "(partial reduce (fn [acc _] (+ acc 1)) 0)", "problem": 22, "user": "51c19873e4b0d204dbe2ca0d"}, {"code": "(fn [coll]\n  (reduce (fn [cnt _] (inc cnt)) 0 coll))", "problem": 22, "user": "51d08d67e4b067c365486351"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "51cc5cb3e4b02254fc79486f"}, {"code": "(fn [x] (alength (to-array x)))", "problem": 22, "user": "51d1875be4b0cfcf579466c0"}, {"code": "(fn [coll]\n  (loop [c coll, i 0]\n    (if (seq c)\n      (recur (next c) (inc i))\n      i)))", "problem": 22, "user": "51d19c24e4b0cfcf579466c3"}, {"code": "(fn [xs] (reduce (fn [i _] (inc i)) 0 xs))", "problem": 22, "user": "50a3fbc4e4b08bbd0eb4ed31"}, {"code": "(fn [s] (loop [sq (seq s) sum 0] (if (= sq '()) sum (recur (rest sq) (inc sum)))))", "problem": 22, "user": "51bdc609e4b0ff155d51d2b3"}, {"code": "(fn cnt [v]\n  (loop [xs v nb 0]\n    (if (empty? xs)\n      nb\n      (recur (rest xs) (inc nb)))))", "problem": 22, "user": "51d1e840e4b0d13b04db0d91"}, {"code": "#(reduce + (map (constantly 1) %1))", "problem": 22, "user": "51cbaf14e4b08d8387cbedda"}, {"code": "#(reduce + (map (fn [_] 1) %))", "problem": 22, "user": "51d22261e4b0d13b04db0d95"}, {"code": "#(loop [x 0] (if (nil? (nth % x nil)) x (recur (inc x))))", "problem": 22, "user": "51c7d82be4b07ef393169e47"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "51d26b0ae4b0d13b04db0d97"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "51d19c97e4b0cfcf579466c4"}, {"code": "reduce (fn [x y] (inc x)) 0", "problem": 22, "user": "51d2ecb7e4b099f3b6acddf3"}, {"code": "#(apply + (map (constantly 1) %))", "problem": 22, "user": "51c99769e4b07ef393169e79"}, {"code": "(fn [L] (reduce + 0 (map (constantly 1) L)))", "problem": 22, "user": "5085bfdae4b004985b776e53"}, {"code": "(fn cnt [xs]\n  (if (empty? xs)\n    0\n   (+ 1 (cnt (rest xs)))))", "problem": 22, "user": "51d1db6ce4b0d13b04db0d90"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "51d28e15e4b0d13b04db0d9b"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "51d4331ce4b013d740b70ddc"}, {"code": "(fn foo [x] (if (= '() x) 0 (inc (foo (rest x)))))", "problem": 22, "user": "51d381b5e4b099f3b6acde01"}, {"code": "#(loop [c 0\n        s %]\n   (if (empty? s)\n     c\n     (recur (+ 1 c) (rest s))))", "problem": 22, "user": "51d360d1e4b099f3b6acddff"}, {"code": "(fn sum [xs]\n(if (empty? xs)\n0\n(+ 1 (sum (rest xs)))))", "problem": 22, "user": "51d10b1fe4b067c36548635e"}, {"code": "(comp (partial reduce +) (partial map (fn [s] 1)))", "problem": 22, "user": "51d4ed02e4b013d740b70dec"}, {"code": "reduce (fn [c _] (inc c)) 0", "problem": 22, "user": "51d287f5e4b0d13b04db0d9a"}, {"code": "(fn countIt [s]\n  (if (empty? s)\n    0\n    (inc (countIt (rest s)))))", "problem": 22, "user": "504dffe2e4b078edc5f5938b"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "51d662fce4b0154f82ab92ef"}, {"code": "#(loop [c 1\n        s %]\n    (let [ss (next s)]\n   \t\t(cond ss (recur (inc c) ss)\n         \t:else c)))", "problem": 22, "user": "51d67516e4b0154f82ab92f0"}, {"code": "(fn myre [x] (if (empty? x) 0 (+ 1 (myre (rest x)))))", "problem": 22, "user": "51d5f2bee4b01da06753aa97"}, {"code": "#(loop [argcount 0, coll (seq %1)]\n     (if (seq? coll)\n       (recur (inc argcount) (next coll))\n       argcount))", "problem": 22, "user": "51d46133e4b013d740b70de2"}, {"code": "#(reduce + (map (fn [x] 1) %) )", "problem": 22, "user": "51c9fe91e4b09ce160bef5b6"}, {"code": "(fn [n] (reduce + (map (fn[x] 1) n)))", "problem": 22, "user": "51cd0dc6e4b02254fc79487d"}, {"code": "#(apply + (map (constantly 1) %))", "problem": 22, "user": "51d7efc3e4b0154f82ab9302"}, {"code": "#(loop [col % x 0]\n       (if (empty? col)\n         x\n         (recur (rest col) (inc x))))", "problem": 22, "user": "51d5af00e4b01da06753aa93"}, {"code": "(fn cnt [x] (.size (map nil? x)))", "problem": 22, "user": "51d96ad0e4b02ceefd94774f"}, {"code": "(fn [s]\n    (loop [n 0\n           s2 s]\n      (if (empty? s2)\n        n\n        (recur (inc n) (rest s2)))))", "problem": 22, "user": "501f36dde4b0cb6ebc0a42e4"}, {"code": "(fn [coll] (reduce #(let [_ %2] (inc %1)) 0 coll))", "problem": 22, "user": "4f985527e4b0dcca54ed6cf1"}, {"code": "#(loop [coll %1\n        i 0]\n   (if (empty? coll)\n     i\n     (recur (rest coll) (inc i))))", "problem": 22, "user": "51d9f321e4b02ceefd947758"}, {"code": "(fn [s ] \n\t(reduce  (fn [x y] (+ x 1)) 0  s))", "problem": 22, "user": "518644bce4b0da5a5be3baca"}, {"code": "#(last (map-indexed (fn [idx e] (inc idx)) %))", "problem": 22, "user": "51da52dbe4b02ceefd947763"}, {"code": "(fn \n  [x]\n  (loop \n   \t[col x\n     acc 0]\n    (if (empty? col)\n    \tacc\n\t    (recur (rest col) (inc acc)))))", "problem": 22, "user": "51da565ae4b02ceefd947765"}, {"code": "(fn [coll]\n  (loop [result 0 coll coll]\n    (if (= nil (first coll))\n      result\n      (recur (inc result) (next coll))\n      )\n    )\n  )", "problem": 22, "user": "51da7e49e4b02ceefd947768"}, {"code": "(fn cnt [x] (if (empty? x)\n              0 \n              (+ 1 (cnt (rest x)))))", "problem": 22, "user": "51d49b75e4b013d740b70de6"}, {"code": "(fn f [lst]\n  (if (empty? lst) 0 (+ 1 (f (rest lst))))\n  )", "problem": 22, "user": "51d7f34fe4b0154f82ab9303"}, {"code": "(fn [s] (reduce (fn [n _] (inc n)) 0 s))", "problem": 22, "user": "51da261ce4b02ceefd94775d"}, {"code": "(fn ! [seq] \n  (if (empty? seq)\n    0\n    (inc (! (rest seq)))\n  )\n)", "problem": 22, "user": "51db8244e4b0e067a9bbadc7"}, {"code": "(fn [s]\n  (reduce (fn [tally _] (inc tally)) 0 (seq s)))", "problem": 22, "user": "51ce1320e4b0e42293a22551"}, {"code": "(fn c [s] (if (empty? s) 0 (+ 1 (c (rest s)))))", "problem": 22, "user": "51dba0d0e4b0e067a9bbadca"}, {"code": "(\n fn [col] (\n           reduce + (map (fn [x] 1) col)\n           )\n  )", "problem": 22, "user": "51db9e1ee4b0e067a9bbadc9"}, {"code": "(fn cnt\n  \n  ([items] \n   (cnt items 0))\n  \n  ([items counter] \n   (if (empty? items) \n     counter\n     (cnt (rest items) (inc counter)))))", "problem": 22, "user": "51d1ef6ee4b0d13b04db0d92"}, {"code": "#(reduce (fn [c _] (inc c)) 0 %)", "problem": 22, "user": "51dbba34e4b0e067a9bbadce"}, {"code": "(fn [x] (reduce (fn [a b] (+ a 1)) 0 x))", "problem": 22, "user": "4fc503bfe4b081705acca36e"}, {"code": "(fn [x] (loop [data x\n               cnt 0]\n          (if (empty? data)\n            cnt\n          \t(recur (rest data) (inc cnt)))))", "problem": 22, "user": "50214ffae4b0ef1d2d4433bc"}, {"code": ";; my answer\n#(loop [result 0 c %]\n    (if(empty? c) result\n    (recur (inc result) (rest c))))\n;; others' excellent anser\n;#(reduce (fn [x y] (inc x)) 0 %)", "problem": 22, "user": "51d11f5de4b067c365486360"}, {"code": ";(fn con [ls]\n;\t(let [c 0]\n;     (if (empty? ls)\n;        c\n;        ((inc c) (recur (rest ls)))\n;      )\n;   )  \n;)\n(fn [sequence] (reduce (fn [a b] (inc a)) 0 sequence))", "problem": 22, "user": "51dc0ed1e4b09c47a74ce105"}, {"code": "(fn [coll]\n  (loop [coll coll\n         result 0]\n     (if (empty? coll)\n       result\n       (recur (rest coll) (inc result)))) )", "problem": 22, "user": "51da5552e4b02ceefd947764"}, {"code": "(fn count-seq [coll]\n  (loop [coll coll, acc 0]\n    (if (empty? coll) \n      acc\n      (recur (rest coll) (+ 1 acc)))))", "problem": 22, "user": "51dc80b7e4b09c47a74ce10f"}, {"code": "reduce (fn [x _] (inc x)) 0", "problem": 22, "user": "51db1abae4b094966a2cd685"}, {"code": "(fn [l] (reduce + (map (fn [a] 1) l)))", "problem": 22, "user": "51db27dbe4b094966a2cd688"}, {"code": "#(loop [s %\n        i 0]\n   (if (empty? s)\n     i\n     (recur (rest s) (inc i))))", "problem": 22, "user": "4ec6a616535d6d7199dd36d2"}, {"code": "#(.size (seq %))", "problem": 22, "user": "51dc1190e4b09c47a74ce106"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "51dd55dae4b0c33a4e1da404"}, {"code": "(fn [l]\n  (loop [lst l\n        lg 0]\n  \t(if (empty? lst)\n      lg\n      (recur (rest lst) (inc lg))\n    )\n  )\n)", "problem": 22, "user": "51d59859e4b01da06753aa92"}, {"code": "(fn [coll] (apply + (map (fn [x] 1) coll)))", "problem": 22, "user": "51ca5378e4b08b1cbd0d9480"}, {"code": "(fn [x] (reduce + (map (constantly 1) x)))", "problem": 22, "user": "51ddb534e4b0de53e6370c47"}, {"code": "reduce (fn [t x] (inc t)) 0", "problem": 22, "user": "51dc5033e4b09c47a74ce109"}, {"code": "(fn [my-list]\n  ((fn [my-list index]\n     (let [new-list (next my-list)]\n       (if-not new-list index (recur new-list (inc index)))))\n   my-list 1))", "problem": 22, "user": "4f80a713e4b033992c121bf6"}, {"code": "(fn [s] (apply + (map (fn [n] 1) s)))", "problem": 22, "user": "51d5ff4ce4b01da06753aa98"}, {"code": "(fn [seq] (alength (to-array seq)))", "problem": 22, "user": "51daa721e4b02ceefd94776f"}, {"code": "#(reduce (fn [x _] (+ x 1)) 0 %)", "problem": 22, "user": "51df505be4b01188f062752a"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "51dfb9e2e4b01188f0627531"}, {"code": "(fn [s] (inc ( last (sort (map first (zipmap (iterate inc 0) s))))))", "problem": 22, "user": "51d9eb05e4b02ceefd947755"}, {"code": "reduce (fn [x y] (inc x)) 0", "problem": 22, "user": "51e00020e4b01188f0627534"}, {"code": "(fn [x]\r\n (loop [tmp x num 0]\r\n  (if (= (first tmp) nil)\r\n   num\r\n   (recur (rest tmp) (inc num)))))", "problem": 22, "user": "51dd634ee4b0c33a4e1da407"}, {"code": "(fn my-count[coll](last (map #(inc %2) coll (range))))", "problem": 22, "user": "50e90813e4b033b0e80d11e7"}, {"code": "(fn mycount\n  ([s]\n   (mycount s 0))\n  ([s x]\n   (if (empty? s)\n     x\n     (mycount (rest s) (inc x)))))", "problem": 22, "user": "51dd9370e4b0c33a4e1da40c"}, {"code": "(fn f ([ c ] (if (first c) (inc (f (rest c))) 0)))", "problem": 22, "user": "51e1a1fae4b06a68e693eaf6"}, {"code": "#(apply + (map (fn [x] 1) (seq %)))", "problem": 22, "user": "51e1c11fe4b06a68e693eafa"}, {"code": "(fn [x] (reduce (fn [accum x] (+ 1 accum)) 0 (concat x)))", "problem": 22, "user": "51e1c176e4b06a68e693eafb"}, {"code": "(fn [seq]\n  (letfn [(rec [seq n]\n               (if (empty? seq)\n                 n\n                 (rec (rest seq) (inc n))))]\n    (rec seq 0)))", "problem": 22, "user": "51e0198ee4b01188f0627539"}, {"code": "#(reduce (fn [r, e] (inc r)) 0 %1)", "problem": 22, "user": "51388e86e4b0a5db03d727d7"}, {"code": "(fn [s] \n  (->> s \n       (map (fn [_] 1))\n       (reduce +)))", "problem": 22, "user": "51e24a04e4b01e5198146430"}, {"code": "(fn [lst]\n\t( loop [l lst, acc 0] \n    \t(\n          if-not (empty? l) \n          (recur (rest l) (inc acc))\n          acc\n        )\n    )\n  \n)", "problem": 22, "user": "51e23b80e4b01e519814642b"}, {"code": "(fn [s]\n  (letfn [(go [s n]\n            (let [tail (rest s)\n                  n_ (+ n 1)]\n              (if (= (seq tail) nil)\n                n_\n                (go tail n_))))]\n\n          (go s 0)))", "problem": 22, "user": "51e2e080e4b0c611d6113e38"}, {"code": "#(reduce (fn [cnt lst] (+ 1 cnt)) 0 %)", "problem": 22, "user": "51b66b31e4b02e5820733406"}, {"code": "(fn my_count [x] (if (empty? x) 0 (+ 1 (my_count (rest x)))))", "problem": 22, "user": "51ddcd9ae4b0de53e6370c49"}, {"code": "(fn this [arr]\n\t\t(loop [local-arr arr n 0]\n\t\t\t(if (empty? local-arr)\n\t\t\t\tn\n\t\t\t\t(recur (rest local-arr) (inc n)))))", "problem": 22, "user": "51e34f3ee4b0c611d6113e41"}, {"code": "reduce (fn [s _] (inc s)) 0", "problem": 22, "user": "51e38568e4b0c611d6113e43"}, {"code": "#(reduce (fn [x y] (+ x 1)) 0 %)", "problem": 22, "user": "51e28063e4b08e53a149f0f2"}, {"code": "#(-> (map (fn [x y] x) (range) %) last inc)", "problem": 22, "user": "51e3cf8ee4b0efabf93c02a3"}, {"code": "(fn [x] (reduce + (map (fn [x] 1) x)))", "problem": 22, "user": "51e41f4be4b0efabf93c02ac"}, {"code": "#(loop [cnt 0 data %1] (if (empty? data) cnt (recur (inc cnt) (rest data))))", "problem": 22, "user": "519273c3e4b08962174cf744"}, {"code": "#(reduce (fn [a b] (inc a)) 0 %)", "problem": 22, "user": "51dd6a7ce4b0c33a4e1da409"}, {"code": "(fn [xs]\n  (loop [s xs n 0]\n  \t(if (empty? s)\n      n \n     (recur (rest s) (+ 1 n)))))", "problem": 22, "user": "5047eadde4b0ec70b3ef8d94"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4fea24e0e4b0547ebccb248d"}, {"code": "(fn [s]\n  (loop [s2 []\n         i 0]\n    (if (= s2 (seq s)) i (recur (conj s2 (nth (seq s) i)) (inc i))) ))", "problem": 22, "user": "5022292ee4b0846bc458ae46"}, {"code": "reduce (fn [n _] (inc n)) 0", "problem": 22, "user": "51e58e02e4b0efabf93c02d0"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "519c4111e4b0a1d87b003458"}, {"code": "(fn [coll] (reduce (fn [n _] (inc n)) 0 coll))", "problem": 22, "user": "51e595a6e4b0efabf93c02d8"}, {"code": "#(reduce (fn [n _] (inc n)) 0 %)", "problem": 22, "user": "51e61772e4b0efabf93c02e2"}, {"code": "(fn count_seq \n  ([seq] (count_seq seq 0))\n  ([seq counter] \n    (if (empty? seq) counter (count_seq (rest seq) (+ counter 1))) \n  ))", "problem": 22, "user": "51e6786ae4b0ab43cc26c216"}, {"code": "#(reduce (fn[x y] (inc x)) 0 %)", "problem": 22, "user": "51e4c08fe4b0efabf93c02bf"}, {"code": "#(reduce + (map (fn[item] 1) %))", "problem": 22, "user": "51e6a311e4b0ab43cc26c21e"}, {"code": "reduce (fn [acc v] (+ acc 1)) 0", "problem": 22, "user": "50cf21dee4b0e61f11ddcd8b"}, {"code": "(fn [seq] (reduce (fn [num item] (inc num)) 0 seq))", "problem": 22, "user": "51df825de4b01188f062752b"}, {"code": "#(reduce (fn [n & xs] (inc n)) 0 %)", "problem": 22, "user": "51ba8f82e4b0fe3ecfb46434"}, {"code": "#(.size (map (fn [x] 1) %))", "problem": 22, "user": "51e6a2bce4b0ab43cc26c21d"}, {"code": "(fn [coll]\n  (loop [coll coll i 0]\n    (if (empty? coll)\n      i\n      (recur (rest coll) (inc i)))))", "problem": 22, "user": "51e7abeae4b0a3e081b8cbee"}, {"code": "(fn my-count [s]\n  (if (instance? String s) (.length s) (.size s))\n  )", "problem": 22, "user": "51e786c9e4b0a3e081b8cbeb"}, {"code": "(fn [x]\n  ((fn h [x n]\n    (if (empty? x)\n      n\n      (h (drop 1 x) (+ n 1))\n    )\n  ) x 0))", "problem": 22, "user": "51e6c413e4b0730ab87cf33b"}, {"code": "(fn [l2] ((fn [x list] (if (empty? list) x (recur (inc x) (rest list)))) 0 l2))", "problem": 22, "user": "51dd88e2e4b0c33a4e1da40b"}, {"code": "(fn [coll] (reduce + (map (fn [_] 1) coll)))", "problem": 22, "user": "51e86ba2e4b006d205356a4d"}, {"code": "(fn[m] (reduce (fn[x y] (+ x 1)) 0 m))", "problem": 22, "user": "51e85d2de4b048bc21b181ee"}, {"code": "#((fn [coll n]\n    (if (empty? coll)\n      n\n     (recur (rest coll) (inc n))))\n  % 0)", "problem": 22, "user": "51e89428e4b006d205356a51"}, {"code": "(fn [l]\n  ((fn [l n]\n    (if (empty? l)\n      n\n      (recur (rest l) (inc n)))) l 0))", "problem": 22, "user": "51e81b10e4b048bc21b181ea"}, {"code": "(fn x [Seq]\n  (loop [i 0 SeqX Seq]\n    (if (= SeqX ())\n      i\n      (recur (+ i 1) (rest SeqX)))))", "problem": 22, "user": "4fa05ce4e4b0dcca54ed6d48"}, {"code": "( fn [y] (reduce + (map (fn [x] 1) y)))", "problem": 22, "user": "51ca0f39e4b09ce160bef5b7"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "51ea9e22e4b0f1f103a0d14d"}, {"code": "(fn [s]\n  (loop [t s, cnt 1]\n    (if (next t)\n       (recur (next t) (inc cnt))\n       cnt)))", "problem": 22, "user": "51eb0374e4b0f1f103a0d156"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "51dc1202e4b09c47a74ce107"}, {"code": "(fn cnt [x]\n\t(loop [i 0 l x]\n      (if (= '() l)\n        i\n        (recur (inc i) (rest l)))))", "problem": 22, "user": "51ebe433e4b069f463c22cc4"}, {"code": "reduce (fn [x,y](inc x)) 0", "problem": 22, "user": "51618519e4b009fba0926e35"}, {"code": "(fn a ([x] (a 0 x))\n      ([i x]\n        (if-not (empty? x) (recur (inc i) (rest x)) i)))", "problem": 22, "user": "51eadb98e4b0f1f103a0d153"}, {"code": "(fn [s]\n  (-> (map-indexed list s) last first inc)\n  )", "problem": 22, "user": "51eb3aace4b0f1f103a0d159"}, {"code": "#(reduce (fn[x y] (inc x)) 0 %)", "problem": 22, "user": "51de3b42e4b0de53e6370c53"}, {"code": "(fn [coll] \n  (reduce (fn [x y] (inc x)) 0 coll))", "problem": 22, "user": "51ec978ce4b069f463c22cce"}, {"code": "reduce (fn [c v] (+ c 1)) 0", "problem": 22, "user": "51eca2ace4b069f463c22cd0"}, {"code": "(fn [s] (alength (into-array s)))", "problem": 22, "user": "5029f263e4b023940c84aa45"}, {"code": "(fn [list]\n    (loop [cnt 0 list list]\n        (if (empty? list)\n            cnt\n            (recur (inc cnt) (rest list)))))", "problem": 22, "user": "51ec9114e4b069f463c22ccd"}, {"code": "reduce (fn [a b] (+ a 1)) 0", "problem": 22, "user": "51ed4ee2e4b0bb5070431594"}, {"code": "(fn [s] (reduce (fn [c _] (inc c)) 0 s))", "problem": 22, "user": "51d872dde4b0154f82ab930e"}, {"code": "#(+ (first (last (map vector (range) %))) 1)", "problem": 22, "user": "51e780dae4b0730ab87cf353"}, {"code": "#(reduce (fn [x y] (inc x)) 0 %)", "problem": 22, "user": "51ec0dd3e4b069f463c22cc7"}, {"code": "(fn [y](reduce + (map (fn [x] 1) y)))", "problem": 22, "user": "51eee2f1e4b0871fa145d991"}, {"code": "(fn [s]\n  (reduce (fn [r _] (inc r)) 0 s))", "problem": 22, "user": "51ef66a7e4b0871fa145d9a5"}, {"code": "reduce (fn [a b] (+ a 1)) 0", "problem": 22, "user": "51efa6a6e4b0249c592fbde8"}, {"code": "(fn this\n\t([lst] (this lst 0))\n  \t([lst cnt] \n     (if (empty? lst)\n       cnt\n     \t(this (rest lst) (inc cnt)))))", "problem": 22, "user": "51eff50fe4b0249c592fbdf0"}, {"code": "(fn [x]\n  ((fn [accumulate remaining]\n     (if (= remaining '()) accumulate (recur (+ accumulate 1) (rest remaining)))\n  ) 0 x))", "problem": 22, "user": "51effd77e4b0249c592fbdf3"}, {"code": "(partial reduce (fn [a b] (+ a 1)) 0)", "problem": 22, "user": "51efd397e4b0249c592fbdeb"}, {"code": "(fn contar [s] (if (= s []) 0 (+ 1 (contar (rest s)))))", "problem": 22, "user": "51ed09b6e4b0bb507043158b"}, {"code": "#(apply + (map (fn [x] 1) %))", "problem": 22, "user": "51f00589e4b0249c592fbdfb"}, {"code": "(fn countit [s] (if (= s '()) 0 (+ 1 (countit (rest s)))))", "problem": 22, "user": "51f01925e4b0249c592fbdfc"}, {"code": "#(reduce + (map (fn[x] 1) %))", "problem": 22, "user": "51ef48d0e4b0871fa145d9a4"}, {"code": "reduce (fn [cnt _] (inc cnt)) 0", "problem": 22, "user": "51f00245e4b0249c592fbdfa"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "51f0a7ede4b0274c496158d8"}, {"code": "(fn f [l] (if (= () l) 0 (+ (f (rest l)) 1)))", "problem": 22, "user": "51e7ca56e4b0a3e081b8cbf1"}, {"code": "( fn foo[lst] (reduce + (map (fn[_] 1) lst)))", "problem": 22, "user": "51eec1a6e4b0871fa145d98d"}, {"code": "reduce (fn [x y] (+ x 1)) 0", "problem": 22, "user": "51f04e89e4b0274c496158cd"}, {"code": "#(reduce (fn[x y] (inc x)) 0 %)", "problem": 22, "user": "51ee15c6e4b0bb50704315a1"}, {"code": "(fn count'\n  ([coll] (count' coll 0))\n  ([coll n]\n    (if (empty? coll)\n      n\n      (count' (rest coll) (+ n 1)))))", "problem": 22, "user": "51efdbbee4b0249c592fbdec"}, {"code": "(fn [x]\n  (loop [accum []\n         i 0]\n    (if (= accum (vec x))\n      i\n      (recur (conj accum (first (drop i x)))\n             (inc i)))))", "problem": 22, "user": "51f27142e4b0210f90e74548"}, {"code": "(fn cnt[x]\n  (if (empty? x)\n    0\n    (+ 1 (cnt (rest x)))))", "problem": 22, "user": "51f2851fe4b0210f90e7454b"}, {"code": "#(reduce + (map (fn [_] 1) %))", "problem": 22, "user": "51f28a64e4b0210f90e7454e"}, {"code": "(fn [x]\n  (loop [s x c 0]\n    (if (empty? s)\n      c\n      (recur (rest s) (inc c)))))", "problem": 22, "user": "51f13b80e4b06a20a2523f38"}, {"code": "(fn [lst]\n  (reduce (fn [acc _] (+ acc 1)) 0 lst))", "problem": 22, "user": "51f2ab8be4b0210f90e74554"}, {"code": "#(reduce (fn [x y] (inc x)) 0 %)", "problem": 22, "user": "51c11864e4b0c9c822882943"}, {"code": "(fn c-sequence\n  ([sec]\n    (c-sequence sec 0))\n  ([sec c-el]\n  (if (empty? sec)\n    c-el\n    (recur (rest sec) (inc c-el)))))", "problem": 22, "user": "51f297a3e4b0210f90e74552"}, {"code": "(fn [coll]\n  (loop [c coll i 0]\n    (if (= c (empty c))\n      i\n      (recur (rest c) (inc i)))))", "problem": 22, "user": "51f42e66e4b0fca5e8b48230"}, {"code": "(fn\n [coll]\n (let [f (fn [s n]\n           (if (seq s)\n             (recur (next s) (inc n))\n             n))]\n   (f coll 0)))", "problem": 22, "user": "511b233ae4b07ab9ec456180"}, {"code": "(fn helper [lat]\n    (if (empty? lat)\n      0\n      (inc (helper (rest lat)))))", "problem": 22, "user": "50aedb8ce4b0a40c9cfb08d4"}, {"code": "(fn [coll]\n  (loop [lst coll cnt 0]\n    (if (empty? lst)\n      cnt\n      (recur (rest lst) (inc cnt)))))", "problem": 22, "user": "51f40975e4b0fca5e8b4822e"}, {"code": "reduce (fn [s _] (inc s)) 0", "problem": 22, "user": "51f55bdae4b0abb92f97f9d0"}, {"code": "(fn [a]\n  (loop [s a,\n         n 0]\n    (if (empty? s)\n      n\n      (recur (rest s) (+ n 1) )    )))", "problem": 22, "user": "50fb2535e4b0d10d794c19e3"}, {"code": "(fn [s] \n  (loop [s s\n         n 0]\n    (if (empty? s)\n      n\n      (recur (rest s) (inc n)))))", "problem": 22, "user": "51f583d2e4b0abb92f97f9d4"}, {"code": "(partial (fn [i s] (if (empty? s) i (recur (+ i 1) (rest s)))) 0)", "problem": 22, "user": "51f59607e4b0abb92f97f9d5"}, {"code": "(fn [s]\n  (\n   (fn [s i] \n    (if (empty? s) i (recur (rest s) (inc i)))) s 0))", "problem": 22, "user": "51f629dde4b06ff1c25c52ba"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "51f64e71e4b06ff1c25c52bf"}, {"code": "(fn total [x]\n  (if (empty? x)\n    0\n    (+ 1 (total (rest x)))))", "problem": 22, "user": "51f75836e4b06ff1c25c52d6"}, {"code": "(fn mycount [x] \n  (if \n    (empty? x) \n    0\n    \n    (+ \n      1 \n      (mycount (rest x))\n     )\n  )\n)", "problem": 22, "user": "51f687c2e4b06ff1c25c52cb"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "51f7f51ae4b06ff1c25c52df"}, {"code": "(fn [lst]\n  (loop [items lst\n         x 0]\n    (if (empty? items)\n      x\n      (recur (rest items) (inc x))\n      )\n    )\n  )", "problem": 22, "user": "51f7fbf7e4b06ff1c25c52e0"}, {"code": "(fn t [l] ((fn p [ll cnt] (if (empty? ll) cnt (p (rest ll) (+ cnt 1)))) l 0))", "problem": 22, "user": "51f7dd27e4b06ff1c25c52dc"}, {"code": "(fn mones\n  ([list] (mones list 1)) \n  ([list current-index]\n  (cond\n   (= (rest list) ()) current-index\n   :else (mones (rest list) (+ current-index 1)) \n   )))", "problem": 22, "user": "51cec220e4b0e42293a2255a"}, {"code": "(fn [coll]\n    (loop [coll2 coll, len 0]\n        (if (empty? coll2)\n            len\n            (recur (rest coll2) (inc len)))))", "problem": 22, "user": "51f20db0e4b0210f90e74539"}, {"code": "(fn [s] \n  (loop [cnt 0 coll s] \n    (if (empty? coll) cnt \n      (recur (inc cnt) (rest coll)))))", "problem": 22, "user": "51f8277be4b09be9c177e528"}, {"code": "#(apply + (map (fn [x] 1) %))", "problem": 22, "user": "51f8f4d8e4b09be9c177e540"}, {"code": "(fn [x]\n  (loop [coll x\n         counter 0]\n    (if-let [myseq (seq coll)]\n      (recur (rest myseq) (inc counter))\n      counter)))", "problem": 22, "user": "51f82769e4b09be9c177e527"}, {"code": "#(reduce + (map (fn [_] 1) %))", "problem": 22, "user": "51f8397ce4b09be9c177e529"}, {"code": "#(reduce (fn [x y] (inc x)) 0 %)", "problem": 22, "user": "51f7ce61e4b06ff1c25c52db"}, {"code": "(fn [c]\n  (loop [t 0\n         seq c]\n    (if (empty? seq)\n      t\n      (recur (inc t) (rest seq)))))", "problem": 22, "user": "5046ee3ee4b03b02161376b4"}, {"code": "(fn [var] (->> var (map (fn [var] 1)) (apply +)))", "problem": 22, "user": "51f98843e4b09be9c177e54e"}, {"code": "#(alength (to-array (seq %)))", "problem": 22, "user": "516ab8c2e4b081287f204e9e"}, {"code": "#(reduce + (map (fn [_] 1) %))", "problem": 22, "user": "51fa1375e4b0f1313d4689c9"}, {"code": "#(reduce (fn [x y] (inc x)) 0 %)", "problem": 22, "user": "51fa7154e4b0f1313d4689da"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "51fa852ee4b0f1313d4689dd"}, {"code": "(fn [col]\n      (loop [cl col cnt 0]\n        (if (first cl)\n          (recur (rest cl) (inc cnt))\n          cnt)\n        )\n      )", "problem": 22, "user": "518279abe4b0353c468deb65"}, {"code": "(fn my-count [l]\n  (loop [l l\n         i 0]\n \t(if (empty? l)\n      i\n      (recur (rest l) (inc i)))))", "problem": 22, "user": "51fa9425e4b0f1313d4689e3"}, {"code": "reduce (fn [x y] (+ x 1)) 0", "problem": 22, "user": "51facf22e4b0f1313d4689f0"}, {"code": "(fn [sequence] (reduce (fn [a b] (inc a)) 0 sequence))", "problem": 22, "user": "50fc48dde4b0d10d794c19f6"}, {"code": "(fn [s] (reduce (fn [x y] (+ x 1)) 0 s))", "problem": 22, "user": "51fb4a9be4b0f1313d4689ff"}, {"code": "reduce (fn [total item] (+ 1 total)) 0", "problem": 22, "user": "51ca9af6e4b08b1cbd0d948a"}, {"code": "#(loop [l % a 0] (if (empty? l)\n                   a\n                   (recur (rest l) (inc a))))", "problem": 22, "user": "51f9b1d0e4b09be9c177e550"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "51fc9251e4b0f1313d468a27"}, {"code": "#(reduce + 0 (map (fn [x] 1) %))", "problem": 22, "user": "51fc43e8e4b0f1313d468a1a"}, {"code": "(fn mycount [L]\n  (if (= L '())\n    0\n    ((fn _mycount [L n]\n       (if (= (rest L) '())\n         n\n         (_mycount (rest L) (+ n 1)))) L 1)))", "problem": 22, "user": "51f67858e4b06ff1c25c52c5"}, {"code": "#(loop [seq % i 0] (if (empty? seq) i (recur (next seq) (inc i))))", "problem": 22, "user": "51fd7cdde4b0f1313d468a48"}, {"code": "(fn f [coll] \n  (if (empty? coll) 0 (+ 1 (f (rest coll)))))", "problem": 22, "user": "51fd96cee4b0f1313d468a4d"}, {"code": "(fn [v] (reduce (fn [counter _] (inc counter)) 0 v))", "problem": 22, "user": "4fa3c137e4b081705acca193"}, {"code": "(fn [col]\n  (loop [i 0 c col]\n    (if (empty? c)\n      i\n      (recur (+ i 1) (rest c))\n    )\n  )\n)", "problem": 22, "user": "518e7d3be4b051adb72789f0"}, {"code": "#(reduce (fn [x _] (+ 1 x)) 0 %)", "problem": 22, "user": "4dc537fd535d8a4b2fd74282"}, {"code": "(fn [coll] (reduce (fn [a el] (+ a 1)) 0 coll))", "problem": 22, "user": "51fe9d7ce4b0f1313d468a70"}, {"code": "(fn cnt [x] \n  (if (empty? x)\n    0\n    (+ (cnt (rest x)) 1)))", "problem": 22, "user": "51f630cee4b06ff1c25c52bd"}, {"code": "(fn [x] (reduce (fn [n _] (inc n)) 0 x))", "problem": 22, "user": "51fe9858e4b0f1313d468a6e"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "51fdbf73e4b0f1313d468a51"}, {"code": "#(reduce (fn [i e] (inc i)) 0 %)", "problem": 22, "user": "51fefe8ae4b0f1313d468a7d"}, {"code": "(fn [x] \n     (loop [n 0 l x] \n       (if (empty? l) \n         n\n         (recur (inc n) (rest l))))\n  )", "problem": 22, "user": "51ff6379e4b0f1313d468a98"}, {"code": "(fn [x] (reduce + (map (fn [y] 1) x)))", "problem": 22, "user": "519f0f81e4b087743fad219b"}, {"code": "(fn ! [lst] (if (= lst ()) 0 (+ 1 (! (rest lst)))))", "problem": 22, "user": "51ffb54ee4b0f1313d468a9f"}, {"code": "(fn cnt \n  ([xs] \n   (cnt xs 0))\n  \n  ([xs n] \n   (if (empty? xs) n (recur (rest xs) (inc n)))\n  )\n)", "problem": 22, "user": "5200054de4b023d2eb508ca7"}, {"code": "(fn [coll]\n    (letfn [(cntr [coll n]\n              (if (empty? coll)\n                   n\n                   (recur (rest coll) (+ n 1))))]\n           (cntr coll 0)))", "problem": 22, "user": "52000564e4b023d2eb508ca8"}, {"code": "(fn [coll] (loop [[h & t] coll n 0] (if (nil? h) n (recur t (inc n)))))", "problem": 22, "user": "51fbd873e4b0f1313d468a12"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "5200ffc6e4b0d7096e99ddac"}, {"code": "(fn [s]\n  (reduce +\n  \t(map (fn [x] 1) s)))", "problem": 22, "user": "51db0d99e4b06aa4d4669a9d"}, {"code": "(fn myCount [l] (if (empty? l) 0 (inc (myCount (rest l)))))", "problem": 22, "user": "52013494e4b0d7096e99ddb7"}, {"code": "#((fn count-seq-rec [seqnce c] (\n                                if (not-empty seqnce)\n                                \t(count-seq-rec (rest seqnce) (+ c 1))\n                                \tc\n                                )\n) % 0)", "problem": 22, "user": "51f6af4fe4b06ff1c25c52ce"}, {"code": "(fn cnt [s] (if (empty? s) 0 (+ 1 (cnt (drop 1 s)))))", "problem": 22, "user": "5200606be4b0b679c4e0e406"}, {"code": "reduce (fn [c _] (inc c)) 0", "problem": 22, "user": "50c781bbe4b00bb60fe0c535"}, {"code": "(fn [lst]\n  ((fn [lst n]\n    (if (empty? lst)\n      n\n      (recur (rest lst) (+ n 1))))\n \tlst 0))", "problem": 22, "user": "5201d2f3e4b0b2e020a18f22"}, {"code": "(fn [s] \n  (loop [idx 0]\n    (if (= :not-found (nth s idx :not-found))\n      idx\n      (recur (inc idx)))))", "problem": 22, "user": "51944aaae4b0142f60b4aedc"}, {"code": "#(apply + (map (fn[x] 1) %))", "problem": 22, "user": "5201ff99e4b0b2e020a18f26"}, {"code": "#( reduce (fn [z , y] ( + z 1 ) ) (conj (seq %) 0 ) )", "problem": 22, "user": "51f6d5fde4b06ff1c25c52d1"}, {"code": "(fn size [coll]\n  (if (nil? coll)\n    0\n    (+ 1 (size (next coll)))\n  )\n)", "problem": 22, "user": "52011018e4b0d7096e99ddaf"}, {"code": "(fn [s]\n  (reduce (fn [x _] (inc x)) 0 s))", "problem": 22, "user": "4f0b3c88535d0136e6c22301"}, {"code": "(fn [coll]\n  (reduce (fn [x y] (inc x)) 0 coll))", "problem": 22, "user": "5202cfe7e4b030ee0c5b2702"}, {"code": "(fn length [lst]\n  (condp = lst\n    (list) 0\n    (+ 1 (length (rest lst)))))", "problem": 22, "user": "5202c9b6e4b030ee0c5b2701"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "5203621ee4b0fb7e47ea51f5"}, {"code": "(partial reduce (fn [x _] (inc x)) 0)", "problem": 22, "user": "52039e12e4b0fb7e47ea51ff"}, {"code": "(fn [xs]\n  (let [A (fn [xs accum] (if (empty? xs) accum (recur (rest xs) (+ accum 1))))]\n  \t(A xs 0)))", "problem": 22, "user": "5204173be4b0fb7e47ea5216"}, {"code": "#(loop [x 0 ml %] (if (= [] (vec ml)) x (recur (inc x) (drop 1 ml))))", "problem": 22, "user": "52016fd3e4b0b2e020a18f10"}, {"code": ";(fn [xs]\n;  (loop [se xs cnt 0]\n;    (if (seq se)\n;      (recur (rest se) (inc cnt))\n;      cnt\n;    )))\n    \n    \nreduce (fn [acc _] (inc acc)) 0", "problem": 22, "user": "513fab65e4b00f13ea1bd891"}, {"code": "#(.size (new java.util.ArrayList (seq %)))", "problem": 22, "user": "51f66e0ee4b06ff1c25c52c3"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "5203bc5be4b0fb7e47ea5205"}, {"code": "#(loop [x % n 0] \n   (if (empty? x)\n     n\n     (recur (rest x) (inc n))))", "problem": 22, "user": "5201cf92e4b0b2e020a18f21"}, {"code": "(fn size [v]\n  (if (empty? v)\n    0\n    (inc (size (rest v)))))", "problem": 22, "user": "5204f2b1e4b0bf4f1882c7f5"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "52053beee4b0bf4f1882c7fd"}, {"code": "(fn [y] (apply +  (map (fn [x] 1) y)))", "problem": 22, "user": "51fc44c5e4b0f1313d468a1b"}, {"code": "(fn num-of-elements [seq]\n  (reduce (fn [x y] (inc x)) 0 seq))", "problem": 22, "user": "520446d5e4b0c283853240b8"}, {"code": "#(loop [i 0 s (seq %)] (if (= s nil) i (recur (inc i) (next s))))", "problem": 22, "user": "51f805b0e4b06ff1c25c52e2"}, {"code": "(fn [x] (reduce (fn [c v] (+ 1 c)) 0 (seq x)))", "problem": 22, "user": "5203bc27e4b0fb7e47ea5204"}, {"code": "(fn [xs] (apply + (map (fn [x] 1) xs)))", "problem": 22, "user": "520612a7e4b0bf4f1882c81c"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4fc5dfabe4b0ee37620e1800"}, {"code": "#(reduce + (map (fn [x] (quote 1)) %1 ))", "problem": 22, "user": "51eab308e4b0f1f103a0d150"}, {"code": "(fn [s] (reduce + (map (constantly 1) s)))", "problem": 22, "user": "52069fade4b0bf4f1882c82c"}, {"code": "#(reduce (fn [x _] (+ 1 x)) 0 %)", "problem": 22, "user": "520693e1e4b0bf4f1882c829"}, {"code": "#(last (interleave % (iterate inc 1)))", "problem": 22, "user": "52029e5de4b030ee0c5b26fc"}, {"code": "(fn [x] (loop [l x i 0] (if l (recur (next l) (inc i)) i)))", "problem": 22, "user": "52069a3ae4b0bf4f1882c82b"}, {"code": "(fn [s]\n  (reduce (fn [a b] (+ 1 a)) 0 s))", "problem": 22, "user": "52015698e4b0d7096e99ddba"}, {"code": "#( (fn[xs, acc]( if (empty? xs) acc (recur (rest xs) (inc acc)))) % 0)", "problem": 22, "user": "52077e37e4b03bd50ef5466c"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "52002fc6e4b0b679c4e0e3fe"}, {"code": "#(apply + (map (fn [_] 1) %))", "problem": 22, "user": "520797ebe4b03bd50ef5466d"}, {"code": "#(apply + (map (constantly 1) %))", "problem": 22, "user": "5208495ce4b0c1501ba9e6da"}, {"code": "(fn mycount [c] (reduce + (map (fn [x] 1) c)))", "problem": 22, "user": "51dd2ccfe4b0c33a4e1da400"}, {"code": "(fn count-e [x]\n  (if (empty? x) 0\n    (inc (count-e (rest x)))))", "problem": 22, "user": "52084f75e4b01ce6bbf31dde"}, {"code": "(fn count2 [s] (if (empty? (rest s)) 1 (+ 1 (count2 (rest s)))))", "problem": 22, "user": "52090654e4b0e152394d76ee"}, {"code": "(fn me [lst]\n  (if (empty? lst)\n    0\n    (+ 1 (me (rest lst)))))", "problem": 22, "user": "52091d57e4b0e152394d76f0"}, {"code": "(fn cnt\n  ([s]\n    (cnt 1 (rest s)))\n  ([n s]\n    (if (empty? s) \n      n\n   \t  (cnt (+ 1 n) (rest s)))))", "problem": 22, "user": "5209244ce4b0e152394d76f1"}, {"code": "(fn [x] (reduce + (map (constantly 1) x)))", "problem": 22, "user": "52016690e4b0b2e020a18f0f"}, {"code": "(fn [seqs] (loop [stuff seqs cntr 0] (if (empty? stuff) cntr (recur (rest stuff) (inc cntr)))))", "problem": 22, "user": "51ecb0fee4b0bb5070431583"}, {"code": "#(reduce (fn [c _] (inc c)) 0 %)", "problem": 22, "user": "5207bca1e4b03bd50ef54670"}, {"code": "(fn [x]\n         (loop [cnt 0 y x]\n           (if (empty? y)\n             cnt\n             (recur (inc cnt) (rest y)))\n           ))", "problem": 22, "user": "520332f7e4b030ee0c5b2714"}, {"code": "(fn my-count [seq]\n  ((fn iter [n seq]\n     (if (= '() seq) n\n         (iter (+ n 1) (rest seq)))) 0 seq))", "problem": 22, "user": "52033e2ce4b030ee0c5b2716"}, {"code": "(fn [coll] (reduce + (map (constantly 1) coll)))", "problem": 22, "user": "5209cb44e4b0e152394d7702"}, {"code": "(fn cnt\n  ([x] (cnt x 0) )\n  ([x n]\n    (if (= (empty? x) true)\n    n\n    (cnt (rest x) (+ n 1))\n    )\n   )\n)", "problem": 22, "user": "51f549c4e4b0abb92f97f9cb"}, {"code": "(fn [stuff] (reduce + (map (fn [x] 1) stuff)))", "problem": 22, "user": "520a6ce2e4b01da9d47a99da"}, {"code": "(fn [x] (reduce + (map (fn [y] 1) x)))", "problem": 22, "user": "52097551e4b0e152394d76f3"}, {"code": "#((fn cn[l]\n   (if l\n    (+ 1 (cn (next l)))\n    0\n   ))\n   %)", "problem": 22, "user": "520aaac2e4b01da9d47a99e6"}, {"code": "(fn mycount [x] (cond (= x []) 0 :else (+ 1 (mycount (rest x)))))", "problem": 22, "user": "520ab586e4b01da9d47a99e8"}, {"code": "reduce (fn[x _] (inc x)) 0", "problem": 22, "user": "5205410de4b0bf4f1882c7ff"}, {"code": "(fn [sequence]\n  (loop [n 0 s sequence]\n    (if\n      (empty? s) n\n      (recur (inc n) (rest s)))))", "problem": 22, "user": "5080a697e4b01a93d3f38e49"}, {"code": "#(inc (first (last (map-indexed vector %))))", "problem": 22, "user": "51f0ade4e4b0274c496158d9"}, {"code": "(fn cnt [seq]\n  (if (empty? seq)\n    0\n    (+ 1 (cnt (rest seq)))))", "problem": 22, "user": "52082734e4b0b5fbdb336077"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "520b55e2e4b0b022ef140c82"}, {"code": "#(reduce + (into [] (map (constantly 1) %)) )", "problem": 22, "user": "520b4b95e4b0b022ef140c80"}, {"code": "(fn [x] \n  (loop [[i y] [0 x]]\n    (if (not y)\n        i\n          (recur [(inc i) (next y)])\n        \n  \t)\n  )\n)", "problem": 22, "user": "5186448fe4b0da5a5be3bac9"}, {"code": "(fn [lst] (loop [x lst n 0] (if (= x []) n (recur (rest x) (inc n)))))", "problem": 22, "user": "520c9489e4b0b022ef140c98"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "520cc6b6e4b0b022ef140c9c"}, {"code": "(fn [xs] (reduce + (map (fn [_] 1) xs)))", "problem": 22, "user": "520c5b9ee4b0b022ef140c94"}, {"code": "(fn [x]\n  (reduce + (map (fn [i] 1) x)))", "problem": 22, "user": "4fa176c7e4b0dcca54ed6d5e"}, {"code": "#(reduce + (map (fn [_] 1) %))", "problem": 22, "user": "520e32a2e4b066f3ea161c93"}, {"code": "#(.size (vec %))", "problem": 22, "user": "520b67b5e4b0b022ef140c83"}, {"code": "(fn ctr [sequ]\n  (if (= sequ '())\n    0\n    (+ 1 (ctr (rest sequ)))))", "problem": 22, "user": "520b036be4b0b022ef140c73"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "51a3738ce4b0e77c4ca60bf0"}, {"code": "(fn [seq1] (loop [seq1 seq1 size 0]\n             (if (empty? seq1)\n               size\n               (recur (rest seq1) (inc size)))))", "problem": 22, "user": "520f46f9e4b0101e4be6fcee"}, {"code": "reduce (fn [x _] (inc x)) 0", "problem": 22, "user": "5208a3a2e4b0301979a6c235"}, {"code": "(fn [x] (reduce + 0 (map (fn [x] 1) x)))", "problem": 22, "user": "520ed237e4b0101e4be6fcd9"}, {"code": "#(alength (to-array %))", "problem": 22, "user": "5207c65fe4b03bd50ef54673"}, {"code": "(fn [x] (reduce + (map (constantly 1) x)))", "problem": 22, "user": "520f6275e4b0101e4be6fcf1"}, {"code": "#(reduce (fn [x y] (+ 1 x) ) 0 %)", "problem": 22, "user": "52108d97e4b080a8d9b9d63d"}, {"code": "(fn [a](reduce + (map (fn [x] 1) a)))", "problem": 22, "user": "5184df3ee4b02826a645f39b"}, {"code": "#(loop [s % acc 0]\n    (if (empty? s)\n      acc\n      (recur (rest s) (inc acc))))", "problem": 22, "user": "51b965dde4b0e871ca495905"}, {"code": "( fn [l] (reduce + (map #(do % 1) l))                      )", "problem": 22, "user": "5210e5c5e4b080a8d9b9d63f"}, {"code": "#(reduce (fn [a x](inc a)) 0 %)", "problem": 22, "user": "521102b0e4b07aea8afc4f66"}, {"code": "#(reduce + (map (fn [_] 1) %))", "problem": 22, "user": "521139aee4b07aea8afc4f6b"}, {"code": "#(loop [counter 0 val %]\n   (if (empty? val)\n     counter\n     (recur (inc counter) (rest val))))", "problem": 22, "user": "5191ac45e4b0d428d29dc1b6"}, {"code": "(fn diego\n  ([x]\n   (diego x 0))\n  \n  ([x c]\n   (if (= (first x) nil)\n     c\n     (diego (rest x) (+ c 1)))))", "problem": 22, "user": "5212a062e4b0d32679a50641"}, {"code": "(fn sandretto\n  ([x]\n    (sandretto x 0))\n  ([x y]\n    (if (= (nth x y \"nf\") \"nf\")\n      y\n      (sandretto x (+ y 1)))))", "problem": 22, "user": "520ea61ae4b0101e4be6fcd7"}, {"code": "(fn [coll] (loop [coll coll res 0] (if (empty? coll) res (recur (next coll) (inc res)))))", "problem": 22, "user": "52129363e4b0d32679a50640"}, {"code": "(fn cnt\n  ([l]\n    (cnt l 0))\n  ([l n]\n   (if (empty? l) n\n     (recur (rest l) (inc n)))))", "problem": 22, "user": "51fa90aae4b0f1313d4689e0"}, {"code": "(fn [y] (reduce + (map (fn [x] 1) y)))", "problem": 22, "user": "52104003e4b080a8d9b9d637"}, {"code": "(fn temp [l] (if (empty? l) '0 (+ 1 (temp (rest l)))))", "problem": 22, "user": "5211d195e4b07aea8afc4f76"}, {"code": "#(reduce + (map (fn [x] 1)%))", "problem": 22, "user": "520cb8c4e4b0b022ef140c9a"}, {"code": "(fn [x]\n(loop [x x counter 0]\n\t(if (empty? x) counter\n\t(recur (rest x) (+ 1 counter)))))", "problem": 22, "user": "521368ece4b0d32679a50659"}, {"code": "#(reduce + (map (fn [x] (if (nil? x) 0 1)) %))", "problem": 22, "user": "50bcb8b4e4b0594b91591c61"}, {"code": "(fn [coll]\n  (loop [size 0\n         check-this coll]\n    (if (empty? check-this)\n      size\n      (recur (inc size) (next check-this)))))", "problem": 22, "user": "5213cd45e4b0a98dd8fc4bd6"}, {"code": "#(+ (.lastIndexOf (vec %) (last %)) 1)", "problem": 22, "user": "5213caeee4b0a98dd8fc4bd5"}, {"code": "#(alength(to-array %))", "problem": 22, "user": "52117ea7e4b07aea8afc4f70"}, {"code": "#((fn counter [s acc]\n    (if (empty? s) acc (counter (rest s) (+ 1 acc)))\n    ) %1 0)", "problem": 22, "user": "5213dbc3e4b0961f15ac4d74"}, {"code": "(fn func [xs]\n  ((fn func-impl [ys i] (if (nil? ys)\n                         i\n                         (func-impl (next ys) (+ i 1))))\n  xs 0))", "problem": 22, "user": "521392bce4b0d32679a5065e"}, {"code": "(fn foo [l]\n  (if (next l)\n    (inc (foo (next l)))\n    1)\n  )", "problem": 22, "user": "5213ffd3e4b0961f15ac4d7d"}, {"code": "#(loop [coll % n 0]\n   (if (seq coll)\n     (recur (rest coll) (inc n))\n     n))", "problem": 22, "user": "5151c184e4b03e678e393add"}, {"code": "#(reduce (fn [a i] (inc a)) 0 %)", "problem": 22, "user": "521268e0e4b06aa6d1666ba4"}, {"code": "(partial reduce (fn[x y] (inc x)) 0)", "problem": 22, "user": "5201572be4b0d7096e99ddbb"}, {"code": "(fn [lst]\n  (apply + (map (fn [x] 1) lst)))", "problem": 22, "user": "50d5c19ce4b0159555a1fc61"}, {"code": "#(reduce + (map (fn [x] 1) % ))", "problem": 22, "user": "5208b687e4b0e152394d76e8"}, {"code": "(fn [s]\n  (loop [sum 0, ss s]\n    (if (first ss)\n      (recur (+ sum 1) (rest ss))\n      sum)))", "problem": 22, "user": "5213c2ece4b0a98dd8fc4bd0"}, {"code": "(fn cnt [L] (cond (not (seq L)) 0\n             \t :else (+ 1 (cnt (rest L)))))", "problem": 22, "user": "52153bdde4b0961f15ac4daa"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "52154ec6e4b02f6d8ea676c2"}, {"code": "(fn c [seq]\n  (if (= (rest seq) '())\n    1\n    (+ 1 (c (rest seq)))))", "problem": 22, "user": "52158e69e4b0bf4bffd29c9f"}, {"code": "(fn myCount [xs] (if (empty? xs) 0 (+ (myCount (rest xs)) 1)))", "problem": 22, "user": "52161db6e4b0bf4bffd29cb8"}, {"code": "#(apply + (map (fn [_] 1) %))", "problem": 22, "user": "5152f82ee4b03f948212e718"}, {"code": "(fn [input] (reduce #(+ % (when %2 1)) 0 (seq input)))", "problem": 22, "user": "52154514e4b02f6d8ea676c0"}, {"code": "(fn [x] (loop [n 0 s (vec x)] \n          (if (empty? s) n \n            (recur (inc n) (drop 1 s) ))))\n;; recur \u9700\u8981\u4e0eloop \u53d8\u91cf\u5bf9\u5e94", "problem": 22, "user": "52105865e4b080a8d9b9d639"}, {"code": "(fn [input]\n   (let [input (into [] input)]\n  (reverse input)\n  (let [end-data (peek input)]\n    (reverse input)\n    (+ (.lastIndexOf input end-data) 1))))", "problem": 22, "user": "52151220e4b0961f15ac4da7"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "52166e50e4b0bf4bffd29cc6"}, {"code": "reduce (fn [i _] (inc i)) 0", "problem": 22, "user": "51f9527fe4b09be9c177e549"}, {"code": "#(alength (to-array %))", "problem": 22, "user": "51e649bee4b0ab43cc26c214"}, {"code": "(fn f [s] \n  (cond \n   (empty? s) 0\n   :else (inc (f (rest s)))))", "problem": 22, "user": "520242bae4b030ee0c5b26e3"}, {"code": "(fn [c]\n  (reduce (fn [a _] (inc a)) 0 c))", "problem": 22, "user": "52173464e4b082aa80a88c75"}, {"code": "(fn [coll]\n  (reduce (fn [x y] (inc x)) 0 coll))", "problem": 22, "user": "51e924d2e4b0f1f103a0d13a"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "52177320e4b0c07b8faad36a"}, {"code": "(fn [lst]\n  (loop [lst lst \n         len 0]\n  \t(if (empty? lst)\n    \tlen\n    \t(recur (rest lst) (inc len)))))", "problem": 22, "user": "52138d11e4b0d32679a5065c"}, {"code": "(fn [sequence]\n  (loop [coll (seq sequence)\n         number 0]\n    (if (not (not-empty coll)) number\n\t(recur (rest coll) (inc number)))))", "problem": 22, "user": "5213348ae4b0d32679a50652"}, {"code": "(fn cnt [seq]\n  (if (empty? seq)\n    0\n  (+ 1 (cnt (rest seq)))))", "problem": 22, "user": "4fe8a39ee4b07c9f6fd12c60"}, {"code": "(fn [coll] (apply + (map (fn [x] 1) coll)))", "problem": 22, "user": "5217c26fe4b0a4bccb16cab8"}, {"code": "(fn [x] (inc (.lastIndexOf x (if (string? x) (str (last x)) (last x)))))", "problem": 22, "user": "5174ade2e4b07031762f2edf"}, {"code": "#(reduce + (map (fn [_] 1) %))", "problem": 22, "user": "52160dbee4b0bf4bffd29cb3"}, {"code": "reduce (fn [sum x] (inc sum)) 0", "problem": 22, "user": "521249f5e4b06aa6d1666ba2"}, {"code": "(fn [c] (reduce #(if %2 (inc %)) 0 c))", "problem": 22, "user": "521672bde4b0bf4bffd29cc8"}, {"code": "#(reduce \n  (fn [n _] (inc n)) 0 %)", "problem": 22, "user": "521679e9e4b0bf4bffd29cca"}, {"code": "(fn [xs] (reduce (fn [x y] (+ x 1)) 0 xs))", "problem": 22, "user": "521247b0e4b06aa6d1666ba1"}, {"code": "(fn[a]\n  (loop [b a x 0]\n    (if (empty? b) x (recur (next b) (inc x)))))", "problem": 22, "user": "52196842e4b0890f2f822bfa"}, {"code": "#(.lastIndexOf (conj (vec (seq %1)) \"FILLER\") (last (conj (vec (seq %1)) \"FILLER\")))", "problem": 22, "user": "5217b461e4b0ea2f1c31c8d6"}, {"code": "(fn\n  [s1]\n  ((fn [c s] (if (seq s)\n              (recur (inc c) (next s))\n              c)) 0 s1))", "problem": 22, "user": "5219e575e4b0c4ef0be82ffd"}, {"code": "(fn rec [ls]\n  (if (empty? ls)\n    0\n    (inc (rec (rest ls)))))", "problem": 22, "user": "521a4ff5e4b0c4ef0be83004"}, {"code": "#(reduce + (map (fn [_] 1) %))", "problem": 22, "user": "5216569de4b0bf4bffd29cc3"}, {"code": "(fn [s]\n  (loop [n 0 xs s]\n    (if (empty? xs) n (recur (inc n) (rest xs)))))", "problem": 22, "user": "52199105e4b0c4ef0be82ff9"}, {"code": "(fn [s]\n  (loop [result 0\n         others s]\n    (if (seq others)\n      (recur (+ result 1)\n             (rest others))\n      result)))", "problem": 22, "user": "521af852e4b0c4ef0be8301c"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "521b17c5e4b0c4ef0be83027"}, {"code": "reduce (fn [n x] (inc n)) 0", "problem": 22, "user": "51a058dae4b0b292b01ee3f3"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "52161028e4b0bf4bffd29cb4"}, {"code": "(fn [c]\n    (loop [s c t 0]\n       (if (first s)\n           (recur (rest s) (inc t))\n           t\n         )))", "problem": 22, "user": "513fbe89e4b00f13ea1bd894"}, {"code": "(fn ccount [s]\n  (loop [n 1 ss s]\n    (if (next ss)\n      (recur (+ n 1) (next ss))\n      n)))", "problem": 22, "user": "521bf7cfe4b0c4ef0be83066"}, {"code": "(fn [x] (+ 1 (first (last (map-indexed vector x)))))", "problem": 22, "user": "521c1db4e4b0c4ef0be83074"}, {"code": "(fn luku\n  [s]\n  (reduce (partial + 0) (map (fn [_] 1) s)))", "problem": 22, "user": "521b339fe4b0c4ef0be83031"}, {"code": "(fn [xs] (reduce (fn [a b] (inc a)) 0 xs))", "problem": 22, "user": "521c6a1ae4b0c4ef0be83083"}, {"code": "#(reduce + (map (fn [_] 1) %))", "problem": 22, "user": "5213d7aae4b0961f15ac4d72"}, {"code": "#(apply + (map (fn [_] 1) %))", "problem": 22, "user": "521b73f5e4b0c4ef0be83043"}, {"code": "reduce (fn [c _] (inc c)) 0", "problem": 22, "user": "510ee996e4b07438aa321462"}, {"code": "reduce (fn [m i] (+ m 1)) 0", "problem": 22, "user": "521c9136e4b0c4ef0be8308d"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "521d2564e4b01d5d410d8da8"}, {"code": "(fn [elements]\n  ((fn [xs c]\n    (if (empty? xs)\n      c\n      (recur (rest xs) (inc c)))) elements 0))", "problem": 22, "user": "521763fce4b082aa80a88c82"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "521dceeae4b050d5da042802"}, {"code": "#(reduce (fn[r x](+ 1 r)) 0 (seq (to-array %)))", "problem": 22, "user": "51f79238e4b06ff1c25c52d7"}, {"code": "(fn count-seq [xs]\n  ((fn count-seq1 [zs n]\n       (if (empty? zs) n\n         (recur (rest zs) (+ n 1)))) xs 0))", "problem": 22, "user": "521e0b80e4b0dd19981ad069"}, {"code": "(fn [s]\n  ((fn [s c]\n     (if (empty? s)\n       c\n       (recur (rest s) (inc c)))) s 0))", "problem": 22, "user": "521b9f92e4b0c4ef0be8304c"}, {"code": "(fn [xs]\n  (reduce (fn [a x] (inc a)) 0 xs))", "problem": 22, "user": "521e4f22e4b0dd19981ad079"}, {"code": "#(apply + (map (fn [_] 1) %1))", "problem": 22, "user": "521e8227e4b0dd19981ad082"}, {"code": "(fn [s] (loop [n 0, rs s] (if (seq rs) (recur (inc n) (rest rs)) n)))", "problem": 22, "user": "5092425ee4b09a7d0b586de4"}, {"code": "(fn c [li] (if (empty? li) 0 (+ (c (rest li)) 1)))", "problem": 22, "user": "521f0106e4b0e6c71e0c0bc4"}, {"code": "(fn [list] (loop [i 0 listAux list] (if (= listAux []) i (recur (inc i) (rest listAux)))))", "problem": 22, "user": "521e1174e4b0dd19981ad06d"}, {"code": "(fn counter[n]\n  (if (= n [])\n    0\n    (+ 1 (counter (rest n)))))", "problem": 22, "user": "51c20b14e4b0d204dbe2ca1b"}, {"code": "#(loop [s % c 0] (if (seq s) (recur (rest s) (inc c)) c))", "problem": 22, "user": "521ed5b4e4b0e6c71e0c0bc0"}, {"code": "(fn [x]\n  (loop [s x\n         cont 0]\n    (if (= (first s) nil)\n      cont\n      (recur (rest s)\n             (inc cont)))))", "problem": 22, "user": "522048b3e4b0e6c71e0c0c16"}, {"code": "(fn my-count [lst]\n  (if (empty? lst)\n    0\n    (+ 1 (my-count (rest lst)))))", "problem": 22, "user": "5220bc0fe4b0e6a83c8925a7"}, {"code": "(fn my-count [stf]\n  (if (empty? stf)\n    0\n    (+ 1 (my-count (rest stf)))))", "problem": 22, "user": "5220a770e4b0e6a83c8925a3"}, {"code": "(fn [coll]\n  (loop [i 0\n         s coll]\n    (if (empty? s)\n      i\n      (recur (inc i) (rest s)))))", "problem": 22, "user": "5220dbb7e4b0e6a83c8925b3"}, {"code": "reduce (fn [x y] (inc x)) 0", "problem": 22, "user": "5216933be4b000d124d989cf"}, {"code": "(fn [lst] \n  (let [lst (apply vector lst)]\n    (loop [lst lst, size 0]\n      (if (= [] lst)\n        \tsize\n        \t(recur \n             \t(rest lst)\n             \t(inc size)\n             )\n        )\n      )\n    )\n  )", "problem": 22, "user": "521b3f2fe4b0c4ef0be83034"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "52101fcde4b080a8d9b9d635"}, {"code": "#((fn [lst sz] (if (empty? lst) sz (recur (rest lst) (inc sz)))) %1 0)", "problem": 22, "user": "52213426e4b0e6a83c8925c4"}, {"code": "#(loop [l %, c 0] (if (empty? l) c (recur (rest l) (inc c))))", "problem": 22, "user": "522152bce4b0e6a83c8925ca"}, {"code": "(fn [x]\n  (loop [z x, c 0]\n    (if (empty? z) c (recur (rest z) (+ 1 c)))))", "problem": 22, "user": "51b74a33e4b0d906fcd71d34"}, {"code": "(fn willscount [l] (if (= '() l) 0 (+ (willscount (rest l)) 1)))", "problem": 22, "user": "5221c0cae4b0e6a83c8925e1"}, {"code": "#(reduce + (map (fn [x] (if (nil? x) 0 1)) %))", "problem": 22, "user": "52187540e4b0a4bccb16cad8"}, {"code": "#(reduce (fn [m v] (inc m)) 0 %)", "problem": 22, "user": "5220d1b6e4b0e6a83c8925ad"}, {"code": "#(reduce (fn [n _] (inc n)) 0 %)", "problem": 22, "user": "5222000ce4b0e6a83c8925ea"}, {"code": "#(reduce (fn [a b] (inc a)) 0 %)", "problem": 22, "user": "52221b07e4b0e6a83c8925ef"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "51787832e4b03d69594194d3"}, {"code": "(fn [z] (+ 1 (last (map-indexed (fn [x y] x) z))))", "problem": 22, "user": "5220ef05e4b0e6a83c8925b8"}, {"code": "(fn [x] (reduce (fn [x y] (+ x 1)) (cons 0 x)))", "problem": 22, "user": "522383cde4b0e6a83c89261a"}, {"code": "(fn [coll] (reduce (fn [a _] (inc a)) 0 coll))", "problem": 22, "user": "522387c3e4b0e6a83c89261c"}, {"code": "reduce (fn [x y] (inc x)) 0", "problem": 22, "user": "52229374e4b0e6a83c892600"}, {"code": "#(let [[x y] (last (map-indexed vector %))]\n   (inc x))", "problem": 22, "user": "51508905e4b098b221effc2d"}, {"code": "(fn [ls] (reduce (fn [a i] (inc a)) 0 ls))", "problem": 22, "user": "52229bbbe4b0e6a83c892602"}, {"code": "(fn [xs] (reduce (fn [a b] (inc a)) 0 xs))", "problem": 22, "user": "52244a77e4b01819a2de42d1"}, {"code": "#(reduce + (map (fn[_] 1) %1))", "problem": 22, "user": "5167e4a2e4b0c5a4140a3099"}, {"code": "(fn count-elements [x]\n  (cond\n   (seq x) (+ 1 (count-elements (rest x)))\n   :else 0))", "problem": 22, "user": "522452a4e4b01819a2de42d2"}, {"code": "(fn c[s]\n  (if (empty? s) 0\n    (+ 1  (c (rest s)))))", "problem": 22, "user": "52247d56e4b01819a2de42db"}, {"code": "#(reduce (fn [k x] (inc k)) 0 %)", "problem": 22, "user": "5224a46ce4b01819a2de42e5"}, {"code": "reduce (fn [s a] (+ s 1)) 0", "problem": 22, "user": "52225315e4b0e6a83c8925f9"}, {"code": "(fn [x] (reduce + (map (fn [y] 1) x)))", "problem": 22, "user": "522454f4e4b01819a2de42d3"}, {"code": ";; my 1st solution:\n\n;; (fn [c]\n;;  (loop [coll c \n;;         n    0]\n;;    (if-not (first coll)\n;;      n\n;;      (recur (rest coll) (+ n 1)))))\n\n;; my 2nd solution:\n\n(fn [c] (reduce (fn [n _] (+ n 1)) 0 c))", "problem": 22, "user": "52251473e4b01819a2de42f7"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "522404d8e4b01819a2de42c0"}, {"code": "#(reduce (fn [acc _] (+ 1 acc)) 0 %)", "problem": 22, "user": "5225eae3e4b0f4c7e20d29c4"}, {"code": "(fn [coll] \n  (reduce (fn [a _] (inc a)) 0 coll))", "problem": 22, "user": "5225a0f5e4b01819a2de430e"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "5225f6abe4b0f4c7e20d29c6"}, {"code": "(fn [arr] \n  (reduce (fn [x y] (+ x 1))\n          0\n          arr))", "problem": 22, "user": "522600cfe4b0f4c7e20d29c8"}, {"code": "#(loop [x % cnt 0]\n  (if (empty? x) \n    cnt\n    (recur (rest x)(inc cnt))))", "problem": 22, "user": "5223b9cee4b01819a2de42b5"}, {"code": "#(apply + (map (fn [x] 1) %))", "problem": 22, "user": "52253004e4b01819a2de42fa"}, {"code": "(fn [l] (reduce (fn [sum y] (+ sum 1)) 0 l))", "problem": 22, "user": "522654f0e4b04e78ff2e197f"}, {"code": "(fn [xs] (loop [x 0, s xs] (if (first s) (recur (inc x) (rest s)) x)))", "problem": 22, "user": "52269389e4b04e78ff2e1985"}, {"code": "(fn [coll] (reduce + (map (fn [x] 1) coll)))", "problem": 22, "user": "5225666be4b01819a2de4300"}, {"code": "(fn mycount \n  [list]\n  (if (= '() list)\n    0\n    (+ 1 (mycount (rest list)))))", "problem": 22, "user": "5226ab21e4b04e78ff2e198a"}, {"code": "(fn [x]\n  (loop[cnt 0 seqs x]\n    (if(empty? seqs)\n      cnt\n      (recur (+ cnt 1)(rest seqs)))))", "problem": 22, "user": "521dad9be4b050d5da0427f9"}, {"code": "#(loop [coll % num 0]\n   (if (= coll nil)\n     num\n     (recur\n      (next coll)\n      (inc num)\n      )\n     )\n   )", "problem": 22, "user": "5226f2a1e4b04e78ff2e1999"}, {"code": "#(loop [x %, y 0]\n    (if (empty? x) y\n      (recur (rest x) (inc y))))", "problem": 22, "user": "5226ef37e4b04e78ff2e1997"}, {"code": "#(reduce + (map (fn [x] 1) %1))", "problem": 22, "user": "51843616e4b02826a645f398"}, {"code": "(fn [xs]\n  (letfn [(cntr [xs cnt] (if (empty? xs) cnt (recur (rest xs) (inc cnt))))]\n    (cntr xs 0)))", "problem": 22, "user": "514767ace4b0541f4bec05cb"}, {"code": "(fn [s]\n  ((fn [s n]\n    (if (next s)\n      (recur (next s)(+ n 1))\n      n)) s 1 ))", "problem": 22, "user": "519c47abe4b0a1d87b00345a"}, {"code": "(fn c[x] (if (= [] x) 0 (+ 1 (c (rest x)))))", "problem": 22, "user": "52271ffee4b04e78ff2e19a9"}, {"code": "reduce (fn [x y] (inc x)) 0", "problem": 22, "user": "52278430e4b0186687e23a50"}, {"code": "(fn [s]\n  (loop [xs s acc 0]\n    (if (= xs '())\n      acc\n      (recur (rest xs) (inc acc)))))", "problem": 22, "user": "52277ab9e4b0186687e23a4f"}, {"code": "reduce (fn [x y] (inc x)) 0\n#_(fn [x]\n  (loop [x x\n         y 0]\n    (if (empty? x)\n      y\n      (recur (rest x) (inc y)))))", "problem": 22, "user": "51e5a627e4b0efabf93c02db"}, {"code": "(partial (fn cc [ c lst ]\n           (if (empty? lst) \n             c\n             (cc (inc c) (rest lst))))\n         0)", "problem": 22, "user": "52286b19e4b0186687e23a7e"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "51eee71ae4b0871fa145d992"}, {"code": "(fn [coll]\n  (loop [c coll cnt 0]\n    (if-not c\n      cnt\n      (recur (next c) (inc cnt)))))", "problem": 22, "user": "51458deee4b0e8879607340b"}, {"code": "(fn [x] (+ 1 (first (last (map-indexed vector x)))))", "problem": 22, "user": "5228457ee4b0186687e23a76"}, {"code": "reduce (fn [m _] (+ m 1)) 0", "problem": 22, "user": "522724bde4b04e78ff2e19aa"}, {"code": "reduce (fn [x _] (inc x)) 0", "problem": 22, "user": "4ff9a200e4b0678c553fc3ab"}, {"code": "(fn counter\n  ([s] (counter s 0))\n  ([s n]\n   (if (empty? s)\n     n\n     (recur (rest s) (inc n)))))", "problem": 22, "user": "512e74c0e4b0b740abc59827"}, {"code": "#(reduce (fn [acc x] (inc acc)) 0 %1)", "problem": 22, "user": "51ef31dfe4b0871fa145d9a0"}, {"code": "(fn len [lst]\n  \t(if (seq lst)\n  \t\t(inc (len (rest lst)))\n      \t0\n    )\n)", "problem": 22, "user": "5228f870e4b0186687e23a98"}, {"code": "(fn [s & n] (if (nil? (first s)) (if (nil? n) 0 n) (recur (rest s) (if (nil? n) 1 (+ n 1)))))", "problem": 22, "user": "52299d14e4b04c906c9c6a7e"}, {"code": "(fn [data]\n  (reduce (fn [a b] (+ a 1)) 0 data))", "problem": 22, "user": "5229f4a3e4b0590a43906cea"}, {"code": "(fn [l]\n  (reduce +\n    (map (fn [x] 1) l)))", "problem": 22, "user": "522a1248e4b0590a43906cf3"}, {"code": "; mit loop\n;(fn [s]\n;  (loop [ss s n 0]\n;    (if (empty? ss) n (recur (rest ss) (inc n)))))\n\n; mit reduce\n(fn [s]\n  (reduce (fn [mem e] (inc mem)) 0 s))", "problem": 22, "user": "5207d70ae4b03bd50ef54675"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "52295917e4b04c906c9c6a6f"}, {"code": "#(reduce (fn [n _] (inc n)) 0 %)", "problem": 22, "user": "52211978e4b0e6a83c8925bf"}, {"code": "(fn [l] \n  (reduce \n   (fn [sum elem] (+ 1 sum)) 0 l))", "problem": 22, "user": "4fe49706e4b0e8f79898feb7"}, {"code": "#(reduce (fn [acc, _] (+ acc 1)) 0 %)", "problem": 22, "user": "522b922ee4b0d34ee08e71c3"}, {"code": "#(loop [\n         new-collection %\n         index 0]\n    (if (= nil new-collection)\n      index\n      (recur\n       (next new-collection)\n       (inc index))))", "problem": 22, "user": "52271a85e4b04e78ff2e19a7"}, {"code": "(fn [l]\n  (loop [m 0 v l]\n    (if (not (seq v))\n      m\n      (recur (+ 1 m)(rest v)))))", "problem": 22, "user": "51857e64e4b0da5a5be3babe"}, {"code": "(fn [x] \n  (reduce + (map (fn [y] 1) x))\n)", "problem": 22, "user": "522d3a16e4b0e26240291d50"}, {"code": "#(reduce (fn [x _] (+ 1 x)) 0 %)", "problem": 22, "user": "5227eacee4b0186687e23a5e"}, {"code": "(fn my-count [coll] (reduce (fn[ n _] (+ n 1)) 0 coll))", "problem": 22, "user": "522d0360e4b0806774ddfef7"}, {"code": "(fn [list]\n  (reduce (fn [v x]\n            (+ v 1))\n          0\n          list))", "problem": 22, "user": "5228b015e4b0186687e23a8a"}, {"code": "(partial reduce (fn [x y] (inc x)) 0)", "problem": 22, "user": "52288b8fe4b0186687e23a85"}, {"code": "(fn [L] ((fn [L, nr] (if (empty? L) nr (recur (rest L) (+ nr 1)))) L 0))", "problem": 22, "user": "522dd30ee4b0a102974208c3"}, {"code": "(fn [w] (reduce + (map (fn [x] 1) w)))", "problem": 22, "user": "52215fe1e4b0e6a83c8925cf"}, {"code": "(fn tmp [x]\n  (if (= x '())\n    0\n    (+ 1 (tmp (rest x)))))", "problem": 22, "user": "52127ee4e4b0d32679a5063c"}, {"code": "#(loop [cnt 0 coll %]\n(if (empty? coll)\ncnt\n(recur (inc cnt) (rest coll))))", "problem": 22, "user": "5229211be4b04c906c9c6a63"}, {"code": "(fn [x] (reduce (fn [n _] (inc n)) 0 x))", "problem": 22, "user": "522e6c01e4b01cdb292c5f01"}, {"code": "(fn [s] (loop [s s i 0]\n           (let [n (first s)]\n          (if-not (nil? n)\n            (recur (rest s) (inc i))\n            i))\n         ))", "problem": 22, "user": "522eb5cce4b01cdb292c5f0c"}, {"code": "#(apply + (map (constantly 1) %))", "problem": 22, "user": "52271988e4b04e78ff2e19a6"}, {"code": "(fn [x] (reduce + 0 (map (fn [x] 1) x)))", "problem": 22, "user": "522ef7a2e4b01e6a0e6e5daf"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "51ba60a8e4b0fe3ecfb4642e"}, {"code": "#(let [v (vec %)] \n  (loop [sv v n 0]\n    (if (= (second sv) nil)\n      (inc n)\n      (recur (pop sv) (inc n)))))", "problem": 22, "user": "51aefceee4b09397d5109797"}, {"code": "#(reduce (fn [x _] (+ 1 x)) 0 %)", "problem": 22, "user": "52292ce9e4b04c906c9c6a67"}, {"code": "#(reduce (fn [n y] (inc n)) 0 (vec %))", "problem": 22, "user": "522f988be4b032bbe3424168"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "522f714be4b032bbe3424164"}, {"code": "(fn [coll] (loop [n 0 c coll] (if (nil? c) n\n                                (recur (inc n) (next c)))))", "problem": 22, "user": "522eba30e4b01cdb292c5f0e"}, {"code": "(fn count-a-seq [lat]\n  (reduce (fn [x y] (+ x 1)) 0 lat))", "problem": 22, "user": "522e8451e4b01cdb292c5f06"}, {"code": "(fn c [s]\n  (if (= s '())\n    0\n    (+ 1 (c (rest s)))))", "problem": 22, "user": "522fdff7e4b032bbe342416c"}, {"code": "#(+ 1 (.lastIndexOf (map identity %) (last %)))", "problem": 22, "user": "522afe78e4b0d34ee08e71b3"}, {"code": "reduce (fn [a b] (+ a 1))  0", "problem": 22, "user": "52308649e4b0035e815da387"}, {"code": "(fn [lat]\n  (reduce (fn [x y] (+ x 1)) 0 lat))", "problem": 22, "user": "523089f8e4b0035e815da388"}, {"code": "reduce (fn [n _] (inc n)) 0", "problem": 22, "user": "52308c4ce4b0035e815da389"}, {"code": "(fn [seq]\n  (reduce (fn [nr b] (+ nr 1)) 0 seq)\n)", "problem": 22, "user": "5230d490e4b0035e815da396"}, {"code": "(fn [coll]\n  (reduce (fn [n _] (inc n)) 0 coll ))", "problem": 22, "user": "5230ba23e4b0035e815da393"}, {"code": "(fn [x] (alength (to-array x)))", "problem": 22, "user": "5224e784e4b01819a2de42f1"}, {"code": "#(reduce (fn [t _] (+ 1 t)) 0 %)", "problem": 22, "user": "5230d9bde4b0035e815da397"}, {"code": "(fn contar [coll]\n  (loop [x 0\n         collection coll]\n    (if-not (empty? collection)\n      (recur (inc x)\n             (next collection))\n      x)))", "problem": 22, "user": "50c13f77e4b096f585049c3b"}, {"code": "#(loop [l % c 0] (if (nil? (first l)) c (recur (rest l) (inc c))))", "problem": 22, "user": "522e4baae4b01cdb292c5f00"}, {"code": "reduce (fn [x _] (+ x 1)) 0", "problem": 22, "user": "52318843e4b0e2e8de81d1e8"}, {"code": "(fn my-count \n  ([s] (my-count s 0))\n  ([s, l] (if (empty? s) l (my-count (rest s) (+ l 1))))\n)", "problem": 22, "user": "508fd6bae4b0ea685a20f76b"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "522ff96de4b032bbe3424174"}, {"code": "(fn cnt [s] (if (empty? s) 0 (inc (cnt (rest s)))))", "problem": 22, "user": "5231c38fe4b0e2e8de81d1f8"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "523230c9e4b035af41902a78"}, {"code": "(fn [input]\n  (reduce (fn [curr_count, i]\n            (inc curr_count))\n          0\n          input))", "problem": 22, "user": "5232d104e4b035af41902a96"}, {"code": "(fn[x]\n   (loop [result 0\n          data x]\n     (if (empty? data)\n       result\n       (recur (+ 1 result) (rest data)))))", "problem": 22, "user": "506c0a02e4b0eda3100c090d"}, {"code": "(fn [x] (reduce + (map (fn [_] 1) x)))", "problem": 22, "user": "5231d8fae4b0e2e8de81d1fb"}, {"code": "#(alength (to-array %))", "problem": 22, "user": "5232d047e4b035af41902a95"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "510fe537e4b04c71fce993dd"}, {"code": "(fn my-count [x]\n  (reduce + (map (constantly 1) x)))", "problem": 22, "user": "523353a7e4b0f0b72fabf402"}, {"code": "(fn count-sequence [s]\n  (if (seq s)\n    (inc (count-sequence (rest s)))\n    0))", "problem": 22, "user": "52335d7ce4b0f0b72fabf404"}, {"code": "(fn ! [lst]\n  (if (empty? lst)\n    0\n    (+ 1 (! (rest lst)))))", "problem": 22, "user": "523361d8e4b0f0b72fabf405"}, {"code": "(fn [vect] (reduce (fn [acc elem] (+ acc 1)) 0 vect))", "problem": 22, "user": "521f24ebe4b0e6c71e0c0bcd"}, {"code": "(fn\n  [col]\n  (loop [[& elems] col\n         n 0]\n    (if (empty? elems)\n      n\n      (recur (rest elems) (inc n)))))", "problem": 22, "user": "5234870ee4b05e80434a505c"}, {"code": "#(loop [elements %\n        elem-count 0]\n  (if (empty? elements)\n    elem-count\n    (recur (rest elements) (+ elem-count 1))))", "problem": 22, "user": "523288fee4b035af41902a88"}, {"code": "(fn count-iter\n  [coll]\n  (loop [cnt 0\n         coll coll]\n    (if (empty? coll)\n      cnt\n      (recur (inc cnt) (rest coll)))))", "problem": 22, "user": "52352370e4b05e80434a5061"}, {"code": "#(reduce + 0 (map (fn [x] 1) %))", "problem": 22, "user": "5233ad08e4b07e3ee2be83ac"}, {"code": "(fn [s]\n  (reduce + (map (fn [x] 1) s)))", "problem": 22, "user": "5235493ee4b05e80434a5064"}, {"code": "(fn [elements] (reduce (fn[numOfElements elements](inc numOfElements)) 0 elements))", "problem": 22, "user": "5220909fe4b0e6a83c89259f"}, {"code": "(fn [s] (reduce + (map (constantly 1) s)))", "problem": 22, "user": "5235a902e4b0a643f2dcb750"}, {"code": "#(reduce (fn [x y] (+ x 1)) 0 %)", "problem": 22, "user": "5210ac52e4b080a8d9b9d63e"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "5234f716e4b05e80434a505f"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "52361d84e4b05f3be1c7c8e5"}, {"code": "(fn count-it [coll]\n  (if (= '() coll) 0 (+ 1 (count-it (rest coll)))))", "problem": 22, "user": "523605d1e4b05f3be1c7c8e2"}, {"code": "(fn cs [s] (reduce (fn [i x] (+ 1 i)) 0 s))", "problem": 22, "user": "522080fde4b0e6a83c89259e"}, {"code": "(fn f [coll]\n  (loop [l 0 coll coll]\n    (if (empty? coll)\n      l\n      (recur (inc l) (rest coll)))))", "problem": 22, "user": "516abecae4b081287f204e9f"}, {"code": "#(cond\n   (string? %) (.length %)\n   (sequential? %) (.size %)\n   )", "problem": 22, "user": "5225b16de4b0d2f5d1e2c0ed"}, {"code": "(fn [x] (reduce (fn [a b] (+ a 1)) 0 x))", "problem": 22, "user": "52372124e4b05487ba91d624"}, {"code": "#(alength (to-array %1))", "problem": 22, "user": "520f2265e4b0101e4be6fce7"}, {"code": "#(reduce + (map (fn [x] (if (nil? x) 0 1)) %))", "problem": 22, "user": "522f2724e4b01e6a0e6e5db5"}, {"code": "#(inc (first (last (map-indexed list %))))", "problem": 22, "user": "5236fb39e4b0ad3e3a16f537"}, {"code": "(fn my-count [x] (if (empty? x) 0 (+ 1 (my-count (rest x)))))", "problem": 22, "user": "52379c46e4b0fae3832e99db"}, {"code": "(fn [l0](loop [l l0 acc 0] (if (empty? l) acc (recur (rest l)(inc acc)))))", "problem": 22, "user": "5235e15be4b0a643f2dcb756"}, {"code": "reduce (fn [n, v] (inc n)) 0", "problem": 22, "user": "52373f36e4b0477af6280328"}, {"code": "(fn [coll]\n  (reduce (fn [n _]\n            (inc n))\n          0\n          coll))", "problem": 22, "user": "52381b2ae4b0fae3832e99ef"}, {"code": "#(reduce + (map(constantly 1) %))", "problem": 22, "user": "52382d91e4b0fae3832e99f0"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "52386881e4b0fae3832e9a00"}, {"code": "(fn c [s] (if (seq s) (+ 1 (c (rest s))) 0) )", "problem": 22, "user": "522a01ade4b0590a43906ced"}, {"code": "(comp alength to-array)", "problem": 22, "user": "51cd75d6e4b02254fc79488c"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "52385d2ce4b0fae3832e99fe"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "522f39a8e4b032bbe3424159"}, {"code": "(fn [l] (reduce + (map (fn [_] 1) l)))", "problem": 22, "user": "52387f46e4b0fae3832e9a07"}, {"code": "(fn tittiesprinkles [x] (reduce + (map (constantly 1)x)))", "problem": 22, "user": "52296df4e4b04c906c9c6a72"}, {"code": "(fn [c] (reduce (fn [n c] (inc n)) 0 c))", "problem": 22, "user": "52394c03e4b0d705d026ef09"}, {"code": "#(reduce (fn [i j] (inc i)) 0 %)", "problem": 22, "user": "4f43894ee4b0d7d3c9f3fd21"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "52393e16e4b0d705d026ef06"}, {"code": "(fn [xs] \n  (loop [f 0 val xs]\n              (if (empty? val)\n                f\n                (let [rest-val (rest val)]\n                  (if (empty? rest-val)\n                    (inc f)\n                    (recur (inc f) rest-val) ) ) ) ) )", "problem": 22, "user": "5239ac85e4b0d705d026ef1d"}, {"code": "(fn total \n  ([sequ n] (if (= (rest sequ) '()) (+ n 1) (total (rest sequ) (+ n 1))))\n  ([sequ] (if (= (rest sequ) '()) 1 (total (rest sequ) 1)))\n)", "problem": 22, "user": "5239caa6e4b0d705d026ef27"}, {"code": "#(reduce (fn [n coll] (inc n)) 0 %)", "problem": 22, "user": "5213d81de4b0961f15ac4d73"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "5230793be4b0035e815da383"}, {"code": "(fn [z] (reduce (fn [x y] (inc x)) 0 z))", "problem": 22, "user": "523a2a30e4b081681ca7adb8"}, {"code": "(comp alength to-array)", "problem": 22, "user": "523a657be4b081681ca7adc1"}, {"code": "#(last (map-indexed (comp first vector) (cons :f %) ))", "problem": 22, "user": "523a9fc9e4b081681ca7adca"}, {"code": "(fn [s]\n  (loop [c 0\n         values s]\n    (if (first values)\n      (recur (inc c) (next values))\n      c)))", "problem": 22, "user": "5236b6bce4b05f3be1c7c8fe"}, {"code": "(fn[items] (reduce (fn[acc _] (inc acc)) 0 items))", "problem": 22, "user": "523ab749e4b0aa37f082ed8d"}, {"code": "(fn [seq]\n  (apply + (map (fn [x] 1) seq)))", "problem": 22, "user": "4f04e8b0535dcb61093f6be9"}, {"code": "(partial reduce (fn [s v] (inc s)) 0)", "problem": 22, "user": "523b1a65e4b02f719975bdbd"}, {"code": "(fn\n  [l]\n  (loop [list l cnt 0]\n    (if (nil? (first list))\n      cnt\n      (recur (next list) (+ 1 cnt)))))", "problem": 22, "user": "523b10dfe4b02f719975bdb8"}, {"code": "(fn [sequence]\n      (loop [s sequence cnt 0]\n            (if (empty? s)\n                cnt\n              (recur (rest s) (inc cnt)))))", "problem": 22, "user": "5238ca2de4b0d705d026eef6"}, {"code": "#(reduce (fn [n _] (+ 1 n)) 0 %)", "problem": 22, "user": "523b1988e4b02f719975bdbc"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "51f83e17e4b09be9c177e52a"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "523a6fd9e4b081681ca7adc3"}, {"code": "(fn len \n  ([xs] (len xs 0))\n  ([[x & xs] acc] \n \t (if xs\n \t   (len xs (inc acc))\n   \t   (inc acc))))", "problem": 22, "user": "523b82efe4b07becd5be21f0"}, {"code": "reduce (fn [acc _] (inc acc)) 0", "problem": 22, "user": "523bd9c0e4b07becd5be2201"}, {"code": "(fn length [xs]\n  (if (= '() xs)\n    0\n    (+ 1 (length (rest xs)))\n  )\n)", "problem": 22, "user": "523b424ee4b02f719975bdc1"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "5139c0abe4b067e25a345ebd"}, {"code": "(fn cc[l] (if (empty? l) 0 (inc (cc (rest l)))))", "problem": 22, "user": "523c61b2e4b07becd5be2220"}, {"code": "(fn [x] (loop [s x n 0] (if (= (empty? s) true) n (recur (drop 1 s) (inc n)))))", "problem": 22, "user": "523bc0e6e4b07becd5be21f9"}, {"code": "(fn my-count [s] (if (empty? s) 0 (+ 1 (my-count (rest s)))))", "problem": 22, "user": "523c819ee4b07becd5be222a"}, {"code": "#(reduce (fn [c _] (inc c)) 0 %)", "problem": 22, "user": "51db1f65e4b094966a2cd687"}, {"code": "(fn ex-count [xs]\n  (loop [lst xs acc 0]\n    (if (empty? lst)\n      acc\n      (recur (rest lst) (inc acc)))))", "problem": 22, "user": "523c6451e4b07becd5be2222"}, {"code": "#(reduce (fn [a _] (inc a)) 0 %)", "problem": 22, "user": "523cd3dde4b07645915a4783"}, {"code": "(fn [s]\n  (reduce (fn [total v] (inc total)) 0 s))", "problem": 22, "user": "5201ada5e4b0b2e020a18f14"}, {"code": "#(loop [l %1 n 0]\n   (if (nil? l)\n     n\n     (recur (next l) (inc n))\n   )\n)", "problem": 22, "user": "51f09f3de4b0274c496158d7"}, {"code": "(fn cou [coll]\n  (let [s (seq coll)]\n    (if s\n      (inc (cou (rest s)))\n      0)))", "problem": 22, "user": "523d9b8de4b06956f8342c93"}, {"code": "(fn [seq]\n  (loop [s seq i 0]\n    (if (empty? s)\n      i\n      (recur (rest s) (inc i)))))", "problem": 22, "user": "523da205e4b06956f8342c95"}, {"code": "(fn [l] (loop [curr l cnt 0] (if (empty? curr) cnt (recur (rest curr) (inc cnt)))))", "problem": 22, "user": "523dd963e4b06956f8342ca1"}, {"code": "#(loop [ss % acc 0]\n    (if (nil? (first ss))\n      acc\n      (recur (rest ss) (inc acc))))", "problem": 22, "user": "523de50de4b06956f8342ca9"}, {"code": "reduce (fn [x y] (inc x)) 0", "problem": 22, "user": "523d02b0e4b0dbf0c3017289"}, {"code": "(fn counter [s] (if (empty? s) 0 (+ 1 (counter (rest s)))))", "problem": 22, "user": "52319066e4b0e2e8de81d1e9"}, {"code": "(fn [thelist] \n  (loop [x thelist i 0 ]\n    (if (empty? x)\n      i\n      (recur (rest x) (inc i)))))", "problem": 22, "user": "51e7c1f1e4b0a3e081b8cbef"}, {"code": "reduce (fn [a b] (+ 1 a)) 0", "problem": 22, "user": "523e4abde4b09833704079a7"}, {"code": "#(loop [i 0 col %] (if (= col nil) i (recur (inc i) (next col))))", "problem": 22, "user": "51ffa16ce4b0f1313d468a9d"}, {"code": "#(reduce (fn [x y] (+ 1 x)) 0 %)", "problem": 22, "user": "523e9cd5e4b057c4b7cd0a61"}, {"code": "reduce (fn [n _] (inc n)) 0", "problem": 22, "user": "523f5be3e4b01c266ffa7fa7"}, {"code": "(fn new-count\n        ([coll] (new-count coll 0))\n        ([coll pos]\n          (let [rcoll (rest coll)]\n            (if (empty? rcoll)\n              (inc pos)\n              (new-count rcoll (inc pos))))))", "problem": 22, "user": "523de33de4b06956f8342ca8"}, {"code": "(fn [s] (apply + (map (constantly 1) s)))", "problem": 22, "user": "523f0bbfe4b01c266ffa7f91"}, {"code": "(fn[my-seq]\n(loop [the-seq my-seq the-count 0]\n(if (next the-seq)\n(recur (next the-seq) (inc the-count))\n(inc the-count)\n)\n)\n)", "problem": 22, "user": "50550f43e4b0b1b9d1860eb7"}, {"code": "#(reduce (fn [x y] (inc x)) 0 %1)", "problem": 22, "user": "50aa60bee4b056ee01935865"}, {"code": "#(.size (vec %))", "problem": 22, "user": "52401a65e4b0ad64fa010306"}, {"code": "#(reduce (fn [x _] (+ 1 x)) 0 %)", "problem": 22, "user": "524025bce4b0ad64fa01030f"}, {"code": "(fn [s]\r\n  ((fn [coll c]\r\n    (if-let [rest (next coll)]\r\n      (recur rest (+ c 1))\r\n      (+ c 1)))\r\n  s 0))", "problem": 22, "user": "51128c6fe4b0350614f07a79"}, {"code": "(fn [s]\n  (loop [sq s l 0]\n    (if (not (first sq))\n      l\n      (recur (rest sq) (inc l)))))", "problem": 22, "user": "523ea111e4b057c4b7cd0a65"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "5240512ee4b0ad64fa010319"}, {"code": "(fn [element]\n    (reduce (fn [total element]\n              (+ 1 total)) \n            0 element))", "problem": 22, "user": "511e763ce4b03e81d390ac29"}, {"code": "(fn [s] (reduce (fn [cur s] (inc cur)) 0 s))", "problem": 22, "user": "5240c6e7e4b0ad64fa010344"}, {"code": "(fn[x] (reduce (fn[a,b] (+ a 1)) 0 (seq x)))", "problem": 22, "user": "5240e8ebe4b0ad64fa010349"}, {"code": "(fn count-seq [x]\n  (loop [cnt 0 lst x]\n    (if (seq lst)\n      (recur (inc cnt) (rest lst))\n      cnt)))", "problem": 22, "user": "5240cfd9e4b0ad64fa010346"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "4e0e6736535d04ed9115e7bb"}, {"code": "(fn [x] (alength (into-array x)))", "problem": 22, "user": "5241069ce4b076e5d3121ee1"}, {"code": "(fn [coll]\n  (loop [xs coll c 0]\n    (if (seq xs)\n      (recur (rest xs) (inc c))\n      c\n      )\n    )\n  )", "problem": 22, "user": "522f483ce4b032bbe342415a"}, {"code": "#(reduce (fn [c, d] (inc c)) 0 %)", "problem": 22, "user": "5239aab3e4b0d705d026ef1c"}, {"code": "#(apply + (map (fn[_] 1) %))", "problem": 22, "user": "52419ee6e4b076e5d3121f22"}, {"code": "reduce (fn [x y] (+ x 1)) 0", "problem": 22, "user": "5241cd76e4b076e5d3121f32"}, {"code": "(fn my-count [s]\n  (if (empty? s) \n      0 \n      (inc (my-count (rest s)))))", "problem": 22, "user": "523c501ee4b07becd5be221e"}, {"code": "(fn cnt [x] (if (empty? x) 0 (+ 1 (cnt (rest x)))))", "problem": 22, "user": "5241fe85e4b076e5d3121f42"}, {"code": "#(reduce (fn [x _] (+ x 1)) 0 %)", "problem": 22, "user": "523bde95e4b07becd5be2202"}, {"code": "(fn cs [seq] (if (empty? seq) 0 (+ (cs (rest seq)) 1)))", "problem": 22, "user": "5226f9b8e4b04e78ff2e199b"}, {"code": "(fn [s]\n  (loop [s s c 0]\n    (if (first s)\n      (recur (next s) (inc c))\n      c)))", "problem": 22, "user": "523ed522e4b057c4b7cd0a78"}, {"code": "(fn [x] (reduce + (map (fn [y] 1) x)))", "problem": 22, "user": "5242aca8e4b076204b44fa82"}, {"code": "(fn [col]  \n  \n  (reduce (fn [n elm] (inc n)) 0 col )\n  \n  )", "problem": 22, "user": "518d1b5be4b070277754617b"}, {"code": "(fn [coll]\n  (loop [coll coll n 0]\n    (if (empty? coll)\n      n\n      (recur (butlast coll) (inc n)))))", "problem": 22, "user": "5242150ee4b076e5d3121f4a"}, {"code": "#(reduce + (map (fn [s] 1) %))", "problem": 22, "user": "52435d0ce4b076204b44fab5"}, {"code": "(comp (partial apply +) (partial map (constantly 1)))", "problem": 22, "user": "52437703e4b076204b44fabf"}, {"code": "reduce (fn [c el] (inc c)) 0", "problem": 22, "user": "5243d9a2e4b076204b44fadf"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "5241eb78e4b076e5d3121f3a"}, {"code": "(fn mycount ([args n] (if (= '() args) n (mycount (rest args) (+ n 1)) ))\n              ([args] (mycount args 0)))", "problem": 22, "user": "524469dee4b0d8acf9ed6a9d"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "5244cf39e4b0d8acf9ed6ac5"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "52446511e4b0d8acf9ed6a9a"}, {"code": "#(loop [s % acc 0]\n   (if (empty? s)\n     acc\n     (recur (rest s) (inc acc))))", "problem": 22, "user": "5244ca26e4b0d8acf9ed6abe"}, {"code": "(fn [x] (reduce (fn [i x] (+ i 1)) 0 x))", "problem": 22, "user": "52452225e4b0d8acf9ed6ae6"}, {"code": "(fn [x] (reduce + (map #(if % 1 0) (seq x))))", "problem": 22, "user": "52454e2be4b08ba2393080e9"}, {"code": "(fn [lelist] (reduce + 0 (map #((fn [x] 1) %) lelist)))", "problem": 22, "user": "5242d5c3e4b076204b44fa95"}, {"code": "#(reduce (fn [x y] (+ x 1)) 0 %)", "problem": 22, "user": "52457395e4b08ba239308106"}, {"code": "reduce (fn [ct _] (inc ct)) 0", "problem": 22, "user": "5245af03e4b08ba239308124"}, {"code": "#(.length (vec %))", "problem": 22, "user": "523eb110e4b057c4b7cd0a67"}, {"code": "(fn ct [s]\n  (if (next s) \n    (inc (ct (rest s)))\n    1))", "problem": 22, "user": "5245e25ae4b09dbe66b56176"}, {"code": "(fn \n  ([] 0)\n  ([coll]\n   (reduce (fn [l i] (inc l)) 0 coll)))", "problem": 22, "user": "5245fbbbe4b09dbe66b56183"}, {"code": "#( \n  (fn rec [l i] \n    (if \n      (= (first l) nil)\n      i\n      (rec (rest l) (+ i 1))\n      )\n    )\n  % 0\n  )", "problem": 22, "user": "52463059e4b09dbe66b56198"}, {"code": "(fn cool [l] (+ 1 (first (last (map-indexed (fn [idx itm] [idx itm]) l )))))", "problem": 22, "user": "5245d29ae4b09dbe66b56174"}, {"code": "(fn [ls]\n(loop [i 0 l ls]\n  (if (nil? (first l) )\n    i\n    (recur (inc i) (rest l) )   \n  )\n))", "problem": 22, "user": "5242e1dae4b076204b44fa96"}, {"code": "(fn [x] (reduce + (map (fn [y] 1) x)))", "problem": 22, "user": "5246adcde4b09dbe66b561dc"}, {"code": "(fn [c] (->> c (zipmap (range)) (map first) (apply max) inc))", "problem": 22, "user": "51cfc616e4b0e42293a22578"}, {"code": "#(reduce (fn [a b] (+ a 1)) 0 %)", "problem": 22, "user": "524717a9e4b05ef8e38e6352"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "52471ac0e4b05ef8e38e6354"}, {"code": "(fn [ls]\n  (reduce (fn [s l] (inc s)) 0 ls))", "problem": 22, "user": "516064e5e4b009fba0926e26"}, {"code": "(fn [coll] \n  (last (map (fn [_ y] y) coll (rest (range)))))", "problem": 22, "user": "51269362e4b083bb8f88cf09"}, {"code": "(fn [list] (reduce (fn [prev next] (+ prev 1)) 0 list))", "problem": 22, "user": "5151d173e4b03e678e393adf"}, {"code": "(fn [coll]\n  (loop [size 0 arr coll]\n    (if (empty? arr)\n      size\n      (recur (inc size) (rest arr)))))", "problem": 22, "user": "52479487e4b05ef8e38e6373"}, {"code": "(fn [coll] (reduce (fn [memo, elmt] (inc memo)) 0 coll))", "problem": 22, "user": "52475451e4b05ef8e38e6362"}, {"code": "reduce (fn [x y] (+ x 1)) 0", "problem": 22, "user": "51b0e7b3e4b0c53cf2e68a6e"}, {"code": "#(-> % (interleave (range)) last inc)", "problem": 22, "user": "5246e945e4b0644eb7b0783b"}, {"code": "#(reduce (fn [c e] (inc c)) 0 %)", "problem": 22, "user": "52474de3e4b05ef8e38e6360"}, {"code": "#(reduce + (map (fn [_] 1) %))", "problem": 22, "user": "52278a79e4b0186687e23a51"}, {"code": "(fn [xs]\n  (loop [c 0, xs xs]\n    (if (seq xs)\n      (recur (inc c) (rest xs))\n      c)))", "problem": 22, "user": "52487654e4b05ef8e38e63dc"}, {"code": "#(loop [i 0] (if (nth % i false) (recur (inc i)) i))", "problem": 22, "user": "52485723e4b05ef8e38e63d2"}, {"code": "(fn [coll] (apply + (map (fn [x] 1) coll)))", "problem": 22, "user": "52488a46e4b05ef8e38e63e0"}, {"code": "#(loop [cnt 0\n        lst %]\n\t\t(if (empty? lst)\n          cnt\n        (recur (inc cnt) (rest lst))))", "problem": 22, "user": "5245e1d7e4b09dbe66b56175"}, {"code": "(fn [x]\n    ((fn [x i]\n        (if (empty? x)\n          i\n          (recur (rest x) (inc i))))\n          x 0))", "problem": 22, "user": "5248c4c7e4b05ef8e38e63e8"}, {"code": "(fn [coll]\n  (reduce (fn [x y] (inc x)) 0 coll))", "problem": 22, "user": "50007353e4b0678c553fc40a"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "524903e7e4b05ef8e38e640d"}, {"code": "(fn laske [x & c] (if (empty? x) (first c) (laske (rest x) (if (nil? c) 1 (inc (first c))))))", "problem": 22, "user": "52474ec2e4b05ef8e38e6361"}, {"code": "#(reduce + (map (fn[x] 1) %))", "problem": 22, "user": "52481875e4b05ef8e38e63c3"}, {"code": "(fn [collection] (reduce + (map (fn [x] 1) collection)))", "problem": 22, "user": "520a9897e4b01da9d47a99e1"}, {"code": "(fn [l]\n  (letfn [(helper [l sum]\n                  (if (seq l)\n                    (recur (rest l) (inc sum))\n                    sum))]\n    (helper l 0)))", "problem": 22, "user": "4ea03f70535d7eef308072a1"}, {"code": "(fn my-count [xs]\n  (if (= [] xs)\n    0\n    (+ 1 (my-count (rest xs)))))", "problem": 22, "user": "512e31e9e4b0b740abc59823"}, {"code": "(fn calc[n] (if (empty? n)0 (+ 1 (calc (rest n)))))", "problem": 22, "user": "524a74b3e4b05ef8e38e64a7"}, {"code": "(fn [sq]\n  (loop [accum sq\n         i 0]\n    (if (seq accum) \n      (recur (next accum) (inc i)) \n      i)))", "problem": 22, "user": "523327fce4b0f0b72fabf3fc"}, {"code": "(fn [c,s] (if (next s) (recur (+ c 1) (next s)) c   ) ) 1", "problem": 22, "user": "524aa330e4b05ef8e38e64b8"}, {"code": "(fn cnt [x] \n  (if (empty? x) \n    0 \n    (+ 1 (cnt (rest x)) )\n    )\n  )", "problem": 22, "user": "524ac536e4b09eba1c0223a1"}, {"code": "#(reduce (fn [i b] (inc i)) 0 %)", "problem": 22, "user": "524ad140e4b09eba1c0223a9"}, {"code": "(fn [ls]\n  (reduce (fn [so-far val] (inc so-far)) 0 ls))", "problem": 22, "user": "511d4a52e4b022853b0e07a1"}, {"code": "(fn [x] (loop [xs x cnt 0] (if (seq xs) (recur (rest xs) (inc cnt)) cnt)))", "problem": 22, "user": "5245f167e4b09dbe66b5617e"}, {"code": "(fn [acc coll] (if coll (recur (inc acc) (next coll)) acc)) 0", "problem": 22, "user": "524ae8e6e4b09eba1c0223b5"}, {"code": "(fn [secuencia] (loop [lista (seq secuencia), acc 0] (if (empty? lista) acc (recur (rest lista)(inc acc)))))", "problem": 22, "user": "524b1a95e4b09eba1c0223c2"}, {"code": "(fn [xs] (reduce + (map (fn [_] 1) xs)))", "problem": 22, "user": "502eba4be4b06efe12e8cc77"}, {"code": "#(reduce (fn [x _](+ 1 x)) 0 %)", "problem": 22, "user": "524af042e4b09eba1c0223ba"}, {"code": "#(reduce + (map (fn [_] 1) %1))", "problem": 22, "user": "51f66891e4b06ff1c25c52c1"}, {"code": "(fn cnt [s]\n  (if (empty? s) 0\n    (inc (cnt (rest s)))))", "problem": 22, "user": "524a3003e4b05ef8e38e6496"}, {"code": "(fn [s] (reduce (fn [a b] (inc a)) 0 s))", "problem": 22, "user": "524be8e0e4b09eba1c0223f1"}, {"code": "(fn [coll]\n  (reduce (fn [x y] (inc x)) 0 coll))", "problem": 22, "user": "524b98aee4b09eba1c0223e3"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "524ac3d1e4b09eba1c0223a0"}, {"code": "#(reduce(fn[x y] (inc x)) 0 %)", "problem": 22, "user": "524bf665e4b09eba1c0223f2"}, {"code": "(fn mycount [x]\n    (if (empty? x)\n      (dec 1)\n      (+ 1 (mycount (rest x)))\n     )\n)", "problem": 22, "user": "524b86b8e4b09eba1c0223d9"}, {"code": "(fn\n  [y x]\n  (if (= [] x)\n    y\n    (recur (inc y) (rest x)))) 0", "problem": 22, "user": "5244380fe4b076204b44fb12"}, {"code": "(fn self [xs] (if (= xs '()) 0 (inc (self (rest xs)))))", "problem": 22, "user": "524b90fae4b09eba1c0223df"}, {"code": "(fn [seq]\n  (loop [seq seq len 0]\n    (if (not (empty? seq))\n      (recur (rest seq) (+ len 1))\n      len)))", "problem": 22, "user": "524cdd51e4b0752c4cb68ccc"}, {"code": "reduce (fn [a b] (+ a 1)) 0", "problem": 22, "user": "524740e7e4b05ef8e38e635d"}, {"code": "(fn fun6 [x]\n (letfn [(change [y] (\n                     if-not (nil? y) 1\n                     ))]\n   (reduce + (map change x))\n   ) \n )", "problem": 22, "user": "52132f8de4b0d32679a50651"}, {"code": "#(reduce (fn [x _] (+ x 1)) 0 %)", "problem": 22, "user": "524cd06ae4b0752c4cb68cca"}, {"code": "(fn [seq]\n  (reduce\n   (fn [x y]\n     (inc x)) 0 seq))", "problem": 22, "user": "524379a4e4b076204b44fac0"}, {"code": "(fn length [l]\n  (if (empty? l) 0 (inc (length (rest l)))))", "problem": 22, "user": "52168148e4b0bf4bffd29ccd"}, {"code": "(fn [s]\n  (loop [result 0, ss s]\n    (if (empty? ss)\n      result\n      (recur (+ result 1) (rest ss)))\n   )\n)", "problem": 22, "user": "524d9297e4b0a16e35cf6def"}, {"code": "#(reduce (fn [x y] (+ x y)) (map (fn [_] 1) %))", "problem": 22, "user": "524da3a5e4b0a16e35cf6df3"}, {"code": "(fn [xs] (loop [s xs i 0] (if (empty? s) i (recur (rest s) (inc i)))))", "problem": 22, "user": "524d90c0e4b0a16e35cf6ded"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "524db9fbe4b0a16e35cf6dfa"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "524d91eae4b0a16e35cf6dee"}, {"code": "(fn [lst](reduce (fn [acc, _] (+ acc 1)) 0 lst))", "problem": 22, "user": "524c72dce4b09eba1c022407"}, {"code": "(fn [v]\n   (let [my-vec (atom []) counter (atom 1)]\n     (swap! my-vec concat v)\n     (while (not (= (rest @my-vec) ()))\n       (do\n         (swap! my-vec rest)\n         (swap! counter inc)))\n     @counter))", "problem": 22, "user": "524da51ee4b0a16e35cf6df4"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "524dd1c3e4b0f245900d275c"}, {"code": "(fn [x] (reduce (fn [y z] (inc y)) 0 x))", "problem": 22, "user": "511dada0e4b0a5c68a34840c"}, {"code": "reduce (fn [x _] (inc x)) 0", "problem": 22, "user": "524e31f1e4b0541d1855b7cf"}, {"code": "(fn siz [lst] \n  (if (empty? lst) \n    0\n    (+ 1 (siz (rest lst)))\n  )\n)", "problem": 22, "user": "524b1bf7e4b09eba1c0223c3"}, {"code": "#(loop [result 0 x %]\n    (if(empty? x) result\n    (recur (inc result) (rest x))))", "problem": 22, "user": "524e6db3e4b0541d1855b7dc"}, {"code": "(fn cnt [coll]\n\t(if (empty? coll)\n\t\t0\n\t\t(+ 1 (cnt (rest coll)))))", "problem": 22, "user": "524e79c1e4b0541d1855b7e0"}, {"code": "(fn [x]\n  ((fn test  [x, z] (if (= (rest x) ()) z (test (rest x) (+ 1 z)))) x 1)\n)", "problem": 22, "user": "524ed632e4b0541d1855b7f2"}, {"code": "#(apply + (map (fn [x] 1) %))", "problem": 22, "user": "524e6b68e4b0541d1855b7db"}, {"code": "#(apply + (map (fn [_] 1) %))", "problem": 22, "user": "524f61bee4b0541d1855b80f"}, {"code": "(fn cnt ([s] (if (empty? (seq s)) 0 (cnt (seq s) 1))) ([s c] (if (not (next s)) c (recur (next s) (+ c 1)) )))", "problem": 22, "user": "524e5e74e4b0541d1855b7d8"}, {"code": "(fn x [seq] (if (empty? seq) 0 (inc (x (rest seq)))))", "problem": 22, "user": "524eebb0e4b0541d1855b7f7"}, {"code": "(fn [x] (reduce + (map (fn [n] 1) x)))", "problem": 22, "user": "524feb3fe4b0541d1855b81f"}, {"code": "#(apply + (map (fn[x](* 1 1)) %))", "problem": 22, "user": "52500c9ae4b0541d1855b825"}, {"code": "(fn [a] ((fn [x y] (if (empty? x) y (recur (rest x) (+ 1 y)))) a 0))", "problem": 22, "user": "524f07a6e4b0541d1855b7fc"}, {"code": "(fn countit [l]\n  (if (empty? l)\n    0\n    (+ (countit (rest l)) 1)\n  )\n)", "problem": 22, "user": "5250af8be4b0541d1855b83c"}, {"code": "#(reduce + (map (fn [n] 1) %))", "problem": 22, "user": "5250b7a5e4b0541d1855b83e"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "5250a13ee4b0541d1855b839"}, {"code": "(fn [l] (loop [size 0 l l] (if (empty? l) size (recur (inc size) (rest l)))))", "problem": 22, "user": "523e12bde4b09833704079a2"}, {"code": "#(reduce (fn [a x](inc a)) 0 %)", "problem": 22, "user": "525078b6e4b0541d1855b832"}, {"code": "#(loop [n 0\n       coll %]\n   (if (empty? coll)\n     n\n     (recur (inc n) (rest coll))))", "problem": 22, "user": "5250a9abe4b0541d1855b83b"}, {"code": "#(reduce + (map (fn[x]1) %))", "problem": 22, "user": "5250777fe4b0541d1855b82e"}, {"code": "#(loop [col % n 0] (if (nil? (first col)) n (recur (rest col) (inc n))))", "problem": 22, "user": "524d2a98e4b0752c4cb68cd8"}, {"code": "(fn [x]\n  (loop [vals x c 0]\n    (if (empty? vals) c\n    (recur (rest vals) (inc c)))\n    )\n  )", "problem": 22, "user": "524fafb3e4b0541d1855b817"}, {"code": "(fn mycount2 [list]\n  (loop [coll list n 1]\n    (if (or (nil? coll) (empty? coll))\n      (dec n)\n      (recur (next coll) (inc n)))))", "problem": 22, "user": "524e9918e4b0541d1855b7e6"}, {"code": "#(reduce (fn [x _] (inc x)) 0 %)", "problem": 22, "user": "52525a0ee4b0541d1855b8a2"}, {"code": "#(loop [s %1 n 0] (if (empty? s) n (recur (next s) (inc n))))", "problem": 22, "user": "524f3e6de4b0541d1855b805"}, {"code": "(fn rec [s] (if (empty? s)\n              0\n              (+ 1 (rec (rest s)))))", "problem": 22, "user": "52375c4ce4b0fae3832e99d8"}, {"code": "(fn [x]\n    (let [y (into [] x)]\n      (loop [cnt 0 col y]\n        (if (empty? col)\n          cnt\n          (recur (+ cnt 1) (rest col))\n          )\n        )\n      )\n    )", "problem": 22, "user": "52420e2fe4b076e5d3121f48"}, {"code": "(fn [coll]\n  (loop [c coll\n         cnt 0]\n    (if (empty? c)\n      cnt\n      (recur (rest c) (+ cnt 1)))))", "problem": 22, "user": "5252ee94e4b0541d1855b8db"}, {"code": "(fn [x]\n  (loop [col x acc 0]\n    (if(empty? col) acc (recur (rest col) (+ acc 1)))))", "problem": 22, "user": "5252ed18e4b0541d1855b8d9"}, {"code": "#(reduce + 0 (map (fn [_] 1) %))", "problem": 22, "user": "5252b59de4b0541d1855b8cf"}, {"code": "(fn my-count [x]\n  (if (empty? x)\n    0\n    (+ 1 (my-count (rest x)))))", "problem": 22, "user": "52526161e4b0541d1855b8a6"}, {"code": "#(apply + (map (fn [x] 1) %))", "problem": 22, "user": "52530b4be4b0541d1855b8e4"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "51bfc1f0e4b0e49ef9037dd4"}, {"code": "#(loop [c %1, i 0]\n   (if (empty? c)\n     i\n     (recur (rest c) (inc i))))", "problem": 22, "user": "51d8f711e4b02ceefd947748"}, {"code": "#(reduce + (map (fn [_] 1) %))", "problem": 22, "user": "50fca436e4b0d10d794c19fb"}, {"code": "(fn [x] (reduce + (map (fn [x] 1) x)))", "problem": 22, "user": "52537b67e4b0541d1855b8f9"}, {"code": "#(loop [x % y 0] \n   (if (second x)\n     (recur (rest x) (+ y 1))\n     (+ y 1)))", "problem": 22, "user": "5253b4c9e4b0541d1855b926"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4fb0bd28e4b081705acca26b"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "52527192e4b0541d1855b8af"}, {"code": "(fn [y] (reduce + (map (fn [x] 1) y)))", "problem": 22, "user": "52179e00e4b0ea2f1c31c8d3"}, {"code": "#(reduce (fn [acc el] (inc acc)) 0 %)", "problem": 22, "user": "525431dfe4b0541d1855b970"}, {"code": "#(reduce (fn[x y] (inc x)) 0 %)", "problem": 22, "user": "51c89746e4b07ef393169e59"}, {"code": "(fn [x] (reduce (fn[v _] (+ v 1)) 0 x))", "problem": 22, "user": "525493bbe4b0541d1855b991"}, {"code": "#(loop [x % y 0]\n  (if (nil? x )\n    y\n  (recur (next x) (inc y))\n  ))", "problem": 22, "user": "52342722e4b07e3ee2be83c0"}, {"code": "#(reduce (fn [c _] (inc c)) 0 %)", "problem": 22, "user": "5224060de4b01819a2de42c3"}, {"code": "(fn [l] (reduce (fn [a b] (inc a)) 0 l))", "problem": 22, "user": "5251b11be4b0541d1855b87b"}, {"code": "#(reduce + (map (fn [n] 1) %))", "problem": 22, "user": "515b03fee4b0a102a3e5262a"}, {"code": "(fn [seq] (reduce + (map (constantly 1) seq)))", "problem": 22, "user": "5254f908e4b0541d1855b9ba"}, {"code": "(fn f [l] (if (empty? l) 0 (inc (f (rest l)))))", "problem": 22, "user": "52550d90e4b0541d1855b9c1"}, {"code": "(fn lkm [list]\n  (cond \n   (empty? list) 0\n   :else (inc (lkm (rest list)))\n   )\n)", "problem": 22, "user": "5252cbe7e4b0541d1855b8d2"}, {"code": "(fn [c]\n  (loop [xs c size 0]\n    (if (empty? xs)\n      size\n      (recur (rest xs) (+ size 1)))))", "problem": 22, "user": "5255b719e4b0541d1855b9ef"}, {"code": "(fn [s] (loop [currseq s, c 0] (if (empty? currseq) c (recur (rest currseq) (inc c)))))", "problem": 22, "user": "524c7fcfe4b0752c4cb68cbd"}, {"code": "(fn mycount [xs] (if (empty? xs) 0 (+ 1 (mycount (rest xs)))))", "problem": 22, "user": "5255bf1ee4b0541d1855b9f1"}, {"code": "(fn [coll] (reduce (fn [memo x] (inc memo)) 0 coll))", "problem": 22, "user": "524a554de4b05ef8e38e64a2"}, {"code": "(fn [coll] (reduce (fn [x y] (+ x 1)) 0 coll))", "problem": 22, "user": "5254ef3de4b0541d1855b9b8"}, {"code": "(fn [els]\n  (loop [els els\n         cnt 0]\n    (if (fnext els)\n      (recur (rest els) (inc cnt))\n      (inc cnt))))", "problem": 22, "user": "5256cd77e4b0541d1855ba39"}, {"code": "(fn [lst] (apply + (map (fn [n] 1) lst)))", "problem": 22, "user": "4ef7a483535dced4c769f258"}, {"code": "(fn [x]\n  (reduce (fn [a _] (inc a)) 0 x))", "problem": 22, "user": "524ab5f2e4b09eba1c02239d"}, {"code": "#(alength (into-array %))", "problem": 22, "user": "52572919e4b0cb4875a45c72"}, {"code": "#(alength (to-array %))", "problem": 22, "user": "524fafdfe4b0541d1855b818"}, {"code": "(fn [x] (reduce + (map (fn [x] 1) x)))", "problem": 22, "user": "525814c0e4b0cb4875a45ca3"}, {"code": "reduce (fn [c s] (inc c)) 0", "problem": 22, "user": "5256627ce4b0541d1855ba1a"}, {"code": "(fn [x] (apply + (map #(do % 1) x)))", "problem": 22, "user": "52586d24e4b0cb4875a45cb0"}, {"code": "(fn count-niggers [x]\n  (if (= x '())\n    0\n    (+ 1 (count-niggers (rest x)))))", "problem": 22, "user": "525805bbe4b0cb4875a45ca1"}, {"code": "reduce (fn [n _] (inc n)) 0", "problem": 22, "user": "50aca92ee4b071b89ef26232"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "52562597e4b0541d1855ba0b"}, {"code": "(fn conta [s]\n  (if (empty? s)\n    0\n    (inc (conta (rest s)))))", "problem": 22, "user": "525947f1e4b0cb4875a45cd8"}, {"code": "reduce (fn [a b & _] (+ a 1)) 0", "problem": 22, "user": "524af160e4b09eba1c0223bb"}, {"code": "(fn cou [x] (if (= x []) 0 (+ (cou (rest x)) 1) ))", "problem": 22, "user": "52599ea5e4b0cb4875a45cdf"}, {"code": "#(apply + (map (fn [x] 1) %))", "problem": 22, "user": "5259c698e4b0cb4875a45ce4"}, {"code": "(fn yeah [lst] ((fn sizer [lst c] (if (first lst) (sizer (rest lst) (+ c 1)) c)) lst 0))", "problem": 22, "user": "52586dc4e4b0cb4875a45cb1"}, {"code": "reduce (fn [x y] (inc x)) 0", "problem": 22, "user": "50ca1356e4b0a409464667da"}, {"code": "(fn counter \n  [items]\n  (apply +\n         (map (fn [& r] 1) items)))", "problem": 22, "user": "525a643be4b0cb4875a45cf1"}, {"code": "reduce (fn [i _] (inc i)) 0", "problem": 22, "user": "525a7b9fe4b0cb4875a45cf5"}, {"code": "(fn cnt1 [s] ( if (empty? s) 0 (+ 1 (cnt1 (rest s) ) ) ) )", "problem": 22, "user": "52565fcfe4b0541d1855ba19"}, {"code": "(fn cnt [x] \n  (if (empty? x) \n   0 \n   (+ (cnt (rest x)) 1)))", "problem": 22, "user": "525aa499e4b0cb4875a45cf7"}, {"code": "(fn [s] (loop [s s i 0]\n          (if (empty? s)\n            i\n            (recur (rest s) (inc i))\n            )))", "problem": 22, "user": "5259a16ee4b0cb4875a45ce1"}, {"code": "(fn [x]\n   (\n    (fn cnt [c l] \n                   (if (= l ())\n                     c\n                     (cnt (inc c) (rest l))\n                     )\n                   )\n    0 x\n   )\n  )", "problem": 22, "user": "5256c8c7e4b0541d1855ba37"}, {"code": "#(reduce (fn [acc val] (+ acc 1)) 0 %)", "problem": 22, "user": "525a8875e4b0cb4875a45cf6"}, {"code": "#(apply + (map (fn [n] 1) %))", "problem": 22, "user": "525b0b51e4b0cb4875a45d01"}, {"code": "(fn cnt [lst] (if (empty? lst)\n  \t\t\t\t0\n  \t\t\t\t(+ 1 (cnt (rest lst)))))", "problem": 22, "user": "525b12b1e4b0cb4875a45d04"}, {"code": "#(reduce (fn [x y] (inc x)) 0 %)", "problem": 22, "user": "525636dfe4b0541d1855ba0d"}, {"code": "(fn [coll] (reduce (fn [a b] (inc a)) 0 coll))", "problem": 22, "user": "5244fa73e4b0d8acf9ed6acb"}, {"code": "(fn [xs] \n  (reduce (fn [n x] (+ n 1)) 0 xs))", "problem": 22, "user": "525b1e15e4b0cb4875a45d08"}, {"code": "#(reduce + (map (fn [_] 1) %))", "problem": 22, "user": "5236cd89e4b0e010857b4e45"}, {"code": "(fn \n  [coll] (reduce (fn [n _] (inc n)) 0 coll)\n)", "problem": 22, "user": "52430d3ce4b076204b44faa5"}, {"code": "(fn [x] (reduce (fn [a b] (+ 1 a)) 0 x))", "problem": 22, "user": "525bcae9e4b0cb4875a45d30"}, {"code": "#(.length (vec %))", "problem": 22, "user": "51cb5c3de4b08d8387cbedd7"}, {"code": "#(reduce (fn [c l] (inc c)) 0 %)", "problem": 22, "user": "52517132e4b0541d1855b874"}, {"code": "(fn [xs] (reduce + (map (fn [_] 1) xs)))", "problem": 22, "user": "5164c2e5e4b003cf19fdde41"}, {"code": "(fn mycount [s]\n  (reduce (fn [sum _] (+ 1 sum)) 0 s))", "problem": 22, "user": "525cc6c4e4b0cb4875a45d47"}, {"code": "(fn count2 [coll] (loop [acc 0 l (seq coll)] (if (empty? l) acc (recur (inc acc) (rest l)))))", "problem": 22, "user": "525cd5bee4b0cb4875a45d4b"}, {"code": "(fn ct [coll] (reduce (fn [map counter] (+ map 1)) 0 coll))", "problem": 22, "user": "525d44e8e4b0cb4875a45d6e"}, {"code": "(fn my-count ([seq size](if (empty? seq) \n              size \n              (my-count (next seq) (inc size))))\n  ([seq] (my-count seq 0)))", "problem": 22, "user": "525d44bfe4b0cb4875a45d6d"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "525d5341e4b0cb4875a45d76"}, {"code": "(fn [x] (reduce + (map (fn [y] 1) x)))", "problem": 22, "user": "525d95b1e4b0cb4875a45d81"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "525c575be4b0cb4875a45d38"}, {"code": "(fn myCount[MySeq] \n  (\n     if \n     (empty? MySeq)\n     0\n     (+\n      1\n      (myCount (rest MySeq))\n     )\n   \n   )\n)", "problem": 22, "user": "51899ad2e4b0288ada3dbdac"}, {"code": "(fn [coll] (loop [coll coll i 0] (if (empty? coll) i (recur (rest coll) (inc i)))))", "problem": 22, "user": "5252f8ede4b0541d1855b8e0"}, {"code": "(partial reduce (fn [x _] (+ 1 x)) 0)", "problem": 22, "user": "525efc76e4b0cb4875a45dbd"}, {"code": "(fn c [x] \n  (if \n    (empty? x )\n    0\n    (+ 1 (c (rest x))))\n)", "problem": 22, "user": "525cc137e4b0cb4875a45d46"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "5130cb2ae4b08c712d3fae3b"}, {"code": "(fn [myseq]\n    (loop [myseq myseq \n           n 0]\n    \n    \n        (if (empty? myseq)\n          n\n          (recur (next myseq) (inc n))\n        )\n  \t)\n  )", "problem": 22, "user": "52503747e4b0541d1855b828"}, {"code": "reduce (fn [r, v] (+ 1 r)) 0", "problem": 22, "user": "525ca6a7e4b0cb4875a45d42"}, {"code": "#(inc (first (last (map-indexed vector %))))", "problem": 22, "user": "525b4e8de4b0cb4875a45d0f"}, {"code": "(fn this\n  ([x] (this 0 x))\n  ([i x] (if (= x ()) i (this (inc i) (rest x)))))", "problem": 22, "user": "525f66c6e4b03e8d9a4a7007"}, {"code": "(partial reduce (fn [x y] (inc x)) 0)", "problem": 22, "user": "525f51bde4b0cb4875a45dc8"}, {"code": "#(loop [i 0 l %]\n   (if (empty? l)\n   \t i\n     (recur (inc i) (rest l))))", "problem": 22, "user": "524f0deee4b0541d1855b7fd"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "525f9a54e4b03e8d9a4a701c"}, {"code": "(fn [s1]\n\t(reduce (fn [x y] (inc x)) 0 s1\n    )\n)", "problem": 22, "user": "525ba7bbe4b0cb4875a45d28"}, {"code": ";(fn [lst] (reduce + (map (fn [n] 1) lst))\n(fn [n] (reduce + (map (fn [n] 1) n)))", "problem": 22, "user": "5256a1d4e4b0541d1855ba29"}, {"code": "#(reduce (fn[x y] (inc x)) 0 %)", "problem": 22, "user": "518c1791e4b0f028e99addf9"}, {"code": "(fn [x]\n  (reduce + (map (constantly 1) x)))", "problem": 22, "user": "51642237e4b003cf19fdde31"}, {"code": "(fn\n  [coll]\n  (loop [cnt 0 c coll]\n    (if (empty? c)\n      cnt\n      (recur (inc cnt) (rest c)))))", "problem": 22, "user": "525fffb8e4b03e8d9a4a702b"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "525d413be4b0cb4875a45d65"}, {"code": "#(reduce (fn [a,v] (inc a)) 0 %1)", "problem": 22, "user": "524f4162e4b0541d1855b806"}, {"code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "problem": 22, "user": "525d4111e4b0cb4875a45d64"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "52601e52e4b03e8d9a4a702f"}, {"code": "#(-> % vec .length)", "problem": 22, "user": "525d41b3e4b0cb4875a45d69"}, {"code": "(fn numElements[list]\n  (if (= (first list) nil)\n    0\n    (+ 1(numElements (rest list)))))", "problem": 22, "user": "525d490ae4b0cb4875a45d70"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "525d41cce4b0cb4875a45d6b"}, {"code": "reduce #(or(inc%)%2)0", "problem": 22, "user": "525d41bee4b0cb4875a45d6a"}, {"code": "#(reduce (fn[x y] (inc x)) 0 %)", "problem": 22, "user": "525d416fe4b0cb4875a45d67"}, {"code": "#(loop [result 0 c %]\n    (if(empty? c) result\n    (recur (inc result) (rest c))))", "problem": 22, "user": "525d5329e4b0cb4875a45d75"}, {"code": "(fn foo\n   ([lst] (foo lst 0))\n   ([lst acc] (if (empty? lst) acc\n                  (recur (rest lst) (inc acc)))))", "problem": 22, "user": "524f213be4b0541d1855b7ff"}, {"code": "(fn [n coll] \n   (if (seq coll)\n     (recur (inc n) (rest coll))\n     (identity n)\n   )\n ) 0", "problem": 22, "user": "525ee103e4b0cb4875a45dbb"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "52563d02e4b0541d1855ba10"}, {"code": "#(->> % seq (map (constantly 1)) (apply +))", "problem": 22, "user": "509e62a8e4b08df8156e9e2e"}, {"code": "reduce #(or (inc%1)%2)0", "problem": 22, "user": "525d41e3e4b0cb4875a45d6c"}, {"code": "(fn xcount [x]\n  ((fn xcnt [n x]\n    (if (empty? x)\n      n \n      (xcnt (inc n) (rest x))))\n     0 x))", "problem": 22, "user": "526143b7e4b03e8d9a4a705a"}, {"code": "reduce (fn [n _] (inc n)) 0", "problem": 22, "user": "524a7060e4b05ef8e38e64a6"}, {"code": "(fn [coll] (reduce (fn [a b] (inc a)) 0 coll))", "problem": 22, "user": "52090567e4b0e152394d76ed"}, {"code": "(fn length [xs] (if (empty? xs) 0 (+ 1 (length (rest xs)))))", "problem": 22, "user": "52618ea3e4b03e8d9a4a7064"}, {"code": "(fn [s] (reduce + (map (fn [_] 1) s)))", "problem": 22, "user": "5261aebbe4b03e8d9a4a7066"}, {"code": "(fn [s]\n  ((fn [s n]\n    (if (nil? (seq (rest s)))\n      n\n      (recur (rest s) (+ n 1))\n      )\n     )\n   s 1))", "problem": 22, "user": "525e81cbe4b0cb4875a45dac"}, {"code": "reduce (fn [a b] (+ a 1)) 0", "problem": 22, "user": "5261c773e4b03e8d9a4a706a"}, {"code": "(fn counter [x] ((fn count-inner [z, y] (if (nil? z) y (count-inner (next z) (+ y 1)))) x 0))", "problem": 22, "user": "522ff396e4b032bbe3424172"}, {"code": "#(reduce (fn [acc xs] (+ 1 acc) ) 0 %)", "problem": 22, "user": "52612371e4b03e8d9a4a7055"}, {"code": "(fn size [l]\n\t(loop [m l s 0]\n\t\t(if (empty? m) s (recur (rest m) (inc s)))\n\t)\n)", "problem": 22, "user": "52593207e4b0cb4875a45cd3"}, {"code": "#(loop [size 0\n        [head & tail] %]\n   (if (nil? head)\n     size\n     (recur (inc size) tail)))", "problem": 22, "user": "505345d9e4b0517ede0d0a06"}, {"code": "#(reduce (fn [a b] (+ a 1)) 0 %1)", "problem": 22, "user": "52218b29e4b0e6a83c8925da"}, {"code": "(fn [l]\n  (reduce (fn [memo el] (+ 1 memo)) 0 l)\n)", "problem": 22, "user": "52627650e4b03e8d9a4a7088"}, {"code": "#(reduce (fn [x y] (inc x)) 0 %)", "problem": 22, "user": "5261f169e4b03e8d9a4a7072"}, {"code": "#(reduce (fn [c d] (inc c)) 0 %)", "problem": 22, "user": "52628bb0e4b03e8d9a4a7089"}, {"code": "#(reduce (fn [x _](inc x)) 0 %)", "problem": 22, "user": "5262a9dbe4b03e8d9a4a7090"}, {"code": "(fn self [sq] (if (= sq '()) 0 (+ 1 (self (rest sq)))))", "problem": 22, "user": "5262e9a2e4b03e8d9a4a709e"}, {"code": "(fn [coll] (reduce (fn [x y] (inc x)) 0 coll))", "problem": 22, "user": "525941f9e4b0cb4875a45cd6"}, {"code": "#(+ 1 (first(last (map-indexed vector %))))", "problem": 22, "user": "5262c73fe4b03e8d9a4a7098"}, {"code": "(fn county [x] (if (empty? x)\n                 0\n                 (+ 1 (county (rest x)))))", "problem": 22, "user": "5263dca8e4b03e8d9a4a70bd"}, {"code": "#(reduce + (map (fn [x] 1) %1) )", "problem": 22, "user": "52420d32e4b076e5d3121f47"}, {"code": "(fn\n  [x]\n  (reduce + (map\n             (fn\n               [xs]\n               1)\n             x)))", "problem": 22, "user": "52635a22e4b03e8d9a4a70ac"}, {"code": "(fn [x] (loop [coll x n 0]\n          (if (next coll)\n            (recur (next coll) (inc n))\n            (inc n))))", "problem": 22, "user": "5264301fe4b03e8d9a4a70ca"}, {"code": "(fn [items] (reduce (fn [acc, _] (inc acc)) 0 items))", "problem": 22, "user": "52642ce7e4b03e8d9a4a70c9"}, {"code": "(fn [coll] (reduce (fn [a x] (inc a)) 0 coll))", "problem": 22, "user": "4e7e1483535db169f9c79702"}, {"code": "(fn [coll]\n  (reduce (fn [acc el] (inc acc)) 0 coll))", "problem": 22, "user": "5264383be4b03e8d9a4a70cb"}, {"code": "(fn [coll]\n  (reduce (fn [a b] (+ 1 a)) 0 coll))", "problem": 22, "user": "5264b4a9e4b03e8d9a4a70e0"}, {"code": "#(reduce (fn [x y] (+ x 1)) 0 %)", "problem": 22, "user": "5262a4d0e4b03e8d9a4a708f"}, {"code": "(fn [seq] (reduce (fn [x y] (inc x)) 0 seq))", "problem": 22, "user": "503e46cee4b06c4e0e1fa264"}, {"code": "reduce (fn [a b] (inc a)) 0", "problem": 22, "user": "5265352de4b03e8d9a4a7106"}, {"code": "(fn [coll] (reduce + (map (constantly 1) coll)))", "problem": 22, "user": "52616198e4b03e8d9a4a705e"}, {"code": "#(loop [ cnt 0 s %] (if (nil? (first s)) cnt (recur (inc cnt) (rest s))))", "problem": 22, "user": "52655949e4b03e8d9a4a710b"}, {"code": "(fn cnt\n  [coll]\n  (if (seq coll)\n    (+ 1 (cnt (rest coll))) 0))", "problem": 22, "user": "52112be7e4b07aea8afc4f68"}, {"code": "(fn [xs]\n    (loop [list xs n 0]\n      (if (= list '())\n        n\n        (recur (rest list) (inc n)))))", "problem": 22, "user": "526302eee4b03e8d9a4a70a2"}, {"code": "reduce (fn[r v](inc r)) 0", "problem": 22, "user": "525ed5f4e4b0cb4875a45db8"}, {"code": "#(reduce (fn[x y] (inc x)) 0 %)", "problem": 22, "user": "525d417ee4b0cb4875a45d68"}, {"code": "#(reduce (fn [x y] (inc x)) 0 %)", "problem": 22, "user": "51c1b644e4b0d204dbe2ca12"}, {"code": "#(reduce (fn[x y] (inc x)) 0 %)", "problem": 22, "user": "525d5302e4b0cb4875a45d73"}, {"code": "reduce (fn [a _] (inc a)) 0", "problem": 22, "user": "5250779ee4b0541d1855b82f"}, {"code": "#(reduce (fn [a b] (+ 1 a)) 0 %)", "problem": 22, "user": "525fea5ae4b03e8d9a4a7026"}, {"code": "#(apply + (map (fn [_] 1) %))", "problem": 22, "user": "52664945e4b03e8d9a4a712f"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "525d7090e4b0cb4875a45d7e"}, {"code": "#(reduce (fn[x y] (inc x)) 0 %)", "problem": 22, "user": "52667aa2e4b03e8d9a4a713d"}, {"code": "reduce (fn [x y] (inc x)) 0", "problem": 22, "user": "5266db2be4b03e8d9a4a714a"}, {"code": "(fn [xs] (reduce (fn [p c] (inc p)) 0 xs))", "problem": 22, "user": "52667ecfe4b03e8d9a4a713e"}, {"code": "(fn [x] (reduce + (map (constantly 1) x)))", "problem": 22, "user": "52624348e4b03e8d9a4a707e"}, {"code": "reduce (fn [x y] (+ 1 x)) 0", "problem": 22, "user": "525de512e4b0cb4875a45d8a"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "515c596ce4b069911535cf0c"}, {"code": "(fn [seq] (reduce + (map (fn [_] 1) seq)))", "problem": 22, "user": "52680eace4b03e8d9a4a7194"}, {"code": "(fn [col]\n    (loop [n col f 0]\n        (if (empty? n)\n            f\n            (recur (rest n) (inc f)))))", "problem": 22, "user": "51c49398e4b06b70b3e207e4"}, {"code": "(fn cnt [l]\n  (if (empty? l)\n    0\n    (+ 1 (cnt (rest l)))))", "problem": 22, "user": "526439a4e4b03e8d9a4a70cc"}, {"code": "(partial (fn cnt [n l] (if (empty? l) n (cnt (inc n) (rest l)))) 0)", "problem": 22, "user": "5267d9bde4b03e8d9a4a7188"}, {"code": "#(reduce (fn [s _] (+ 1 s)) 0 (seq %))", "problem": 22, "user": "5268f5b4e4b03e8d9a4a71cf"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "5267bc38e4b03e8d9a4a7180"}, {"code": "#(reduce + (map (fn [n] 1) %))", "problem": 22, "user": "52692e3be4b03e8d9a4a71d6"}, {"code": "(fn [seq]\n    (+ 1(last (map (fn [a b] b) seq (range))))\n)", "problem": 22, "user": "5268eb68e4b03e8d9a4a71c6"}, {"code": "(fn my-count\n   ([coll]\n      (my-count coll 0))\n   ([coll n]\n      (if (empty? coll)\n        n\n        (my-count (rest coll) (inc n)))))", "problem": 22, "user": "5267b086e4b03e8d9a4a717a"}, {"code": "#(loop [a % c 0] (if (empty? a) c (recur (rest a) (inc c))))", "problem": 22, "user": "526952b8e4b03e8d9a4a71e4"}, {"code": "(fn [s] (alength (to-array s)))", "problem": 22, "user": "52692ce2e4b03e8d9a4a71d5"}, {"code": "(fn [coll] (reduce (fn [prev nxt] (inc prev)) 0 coll))", "problem": 22, "user": "51f4d46ee4b0fca5e8b48243"}, {"code": "reduce (fn [x _] (inc x)) 0", "problem": 22, "user": "526aaafee4b03e8d9a4a7234"}, {"code": "(fn [xs]\n  (reduce (fn [acc x] (inc acc)) 0 xs))", "problem": 22, "user": "5264502be4b03e8d9a4a70cf"}, {"code": "(fn [lst]\n  (loop [x lst, size 0]\n    (if (seq x)\n      (recur (rest x) (+ 1 size))\n      size)))", "problem": 22, "user": "526866d1e4b03e8d9a4a71a1"}, {"code": "reduce (fn [m i] (+ m 1)) 0", "problem": 22, "user": "526aac71e4b03e8d9a4a7235"}, {"code": "(fn [x]\n    (inc (.lastIndexOf (seq x) (last (seq x)))))", "problem": 22, "user": "5262efade4b03e8d9a4a709f"}, {"code": "(fn x [[h & tl]]\n  (if (empty? tl)\n    1\n    (inc (x tl))))", "problem": 22, "user": "50a768e6e4b090657f4a5cd9"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4ec11b79535dfed6da9c6da6"}, {"code": "(fn[s] (reduce + (map (fn[x] 1) s)))", "problem": 22, "user": "526c669be4b03e8d9a4a728f"}, {"code": "(partial #(reduce (fn [x y] (inc x)) % %2) 0)", "problem": 22, "user": "526c2340e4b03e8d9a4a7281"}, {"code": "#(inc (get (last (map-indexed vector %)) 0))", "problem": 22, "user": "526c6e08e4b03e8d9a4a7290"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "522afdeee4b0d34ee08e71b2"}, {"code": "(fn [col]\n  (loop [size 1 c col]\n    (if (nil? (next c))\n      size\n      (recur (inc size) (next c)))))", "problem": 22, "user": "4f88e3eee4b033992c121c72"}, {"code": "#(reduce (fn [a b] (+ 1 a)) 0 %)", "problem": 22, "user": "526d6968e4b03e8d9a4a72d9"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "5260341ee4b03e8d9a4a7034"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "526daa51e4b03e8d9a4a72e9"}, {"code": "(let [f (fn [a n] (if (nil? a) n (recur (next a) (inc n))))] (fn [a] (f a 0)))", "problem": 22, "user": "526dd90de4b03e8d9a4a72fe"}, {"code": "(fn my-count [s]\n  (if (next s)\n    (+ 1 (my-count (rest s)))\n    1))", "problem": 22, "user": "526e1bd0e4b03e8d9a4a730b"}, {"code": "(fn [c] (reduce + (map (fn [x] 1) c)))", "problem": 22, "user": "526397f1e4b03e8d9a4a70b6"}, {"code": "(fn [coll]\n  (loop [lst coll n 0]\n    (if (empty? lst)\n      n\n      (recur (rest lst) (inc n)))))", "problem": 22, "user": "523f1245e4b01c266ffa7f95"}, {"code": "(fn [sq]\n  (loop [s sq c 0]\n    (if (seq s)\n      (recur (rest s) (+ c 1))\n      c)))", "problem": 22, "user": "526d54ece4b03e8d9a4a72d1"}, {"code": "(fn [xs]\n  (reduce (fn [acc x] (inc acc)) 0 xs))", "problem": 22, "user": "526e5be8e4b03e8d9a4a731c"}, {"code": "(fn [x] (last (map-indexed (fn [i _] (inc i)) x)))", "problem": 22, "user": "507330e6e4b0e3170b5a8698"}, {"code": "#(reduce (fn [x _](+ x 1)) 0 %)", "problem": 22, "user": "524a7c1ae4b05ef8e38e64ac"}, {"code": "(fn [coll] (loop [col coll sz 0] (if (nil? (first col)) sz (recur (rest col)(inc sz)))))", "problem": 22, "user": "526f6b3fe4b03e8d9a4a7366"}, {"code": "(fn [seq]\n  (loop [s seq n 0]\n    (if (empty? s)\n      n\n      (recur (rest s) (inc n)))))", "problem": 22, "user": "526f9715e4b03e8d9a4a7372"}, {"code": "(fn my-count \n    ([l c]  (if (empty? l) c (my-count (rest l) (inc c))))\n  \t([l] (my-count l 0))\n   )", "problem": 22, "user": "526fb2fae4b03e8d9a4a7377"}, {"code": "(fn [c]\n  (if (empty? c)\n    0\n    (loop [i 1 r (rest c)]\n      (if (= r ())\n        i\n        (recur (inc i) (rest r))))))", "problem": 22, "user": "526e0831e4b03e8d9a4a7305"}, {"code": "reduce (fn [nums y] (+ nums 1)) 0", "problem": 22, "user": "526ee63de4b03e8d9a4a733f"}, {"code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "problem": 22, "user": "526ff475e4b03e8d9a4a738c"}, {"code": "#((fn cnt[l c](if(empty? l) c (cnt (rest l) (inc c)))) % 0)", "problem": 22, "user": "504f204ce4b0e7ad84dbc4bd"}, {"code": "reduce (fn [cnt value] (+ cnt 1)) 0", "problem": 22, "user": "504f8334e4b0a02f9cffde8e"}, {"code": "#(reduce (fn [x y] (inc x)) 0 %)", "problem": 22, "user": "526fa661e4b03e8d9a4a7374"}, {"code": "(fn [countable]\n (loop [x countable\n        acc 0]\n   (if (nil? (first x)) acc\n     (recur (rest x) (inc acc)))))", "problem": 22, "user": "5269c150e4b03e8d9a4a71f8"}, {"code": "reduce (fn [x y](+ x 1)) 0", "problem": 22, "user": "52205c89e4b0e6c71e0c0c1d"}, {"code": "(fn [lst]\n\t(reduce + (map (fn [_] 1) lst)))", "problem": 22, "user": "52709149e4b03e8d9a4a73b1"}, {"code": "(fn my-count\n  ([x] (my-count x 0))\n  ([x counter]\n   (if (empty? x)\n     counter\n     (my-count (rest x) (+ 1 counter)))))", "problem": 22, "user": "5249b0c8e4b05ef8e38e6471"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "526f79aee4b03e8d9a4a736a"}, {"code": "#(reduce + (map (fn [_] 1) %))", "problem": 22, "user": "5267a5e8e4b03e8d9a4a7176"}, {"code": "reduce (fn [m i] (+ m 1)) 0", "problem": 22, "user": "527121fde4b03e8d9a4a73dd"}, {"code": "(fn mycount[xs]\n  (cond\n    (empty? xs) 0\n    :else (+ 1 (mycount (rest xs)))))", "problem": 22, "user": "52713288e4b03e8d9a4a73e7"}, {"code": "(fn mc [l]\n  (if (empty? l)\n    0\n    (+ 1 (mc (rest l)))))", "problem": 22, "user": "527160ffe4b03e8d9a4a73ee"}, {"code": "#((fn [s n]\n     (if (seq s)\n       (recur (rest s) (+ n 1))\n       n\n  )) % 0)", "problem": 22, "user": "52709265e4b03e8d9a4a73b2"}, {"code": "#(apply + (map (constantly 1) %))", "problem": 22, "user": "527188cee4b03e8d9a4a73f6"}, {"code": "(fn mcount[xs] (if (empty? xs) 0 (+ 1 (mcount (rest xs))) ) )", "problem": 22, "user": "5271b940e4b03e8d9a4a73fb"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "52600f94e4b03e8d9a4a702d"}, {"code": "#(apply + (map (fn [x] 1) (seq %1)))", "problem": 22, "user": "5272669de4b03e8d9a4a742e"}, {"code": "(fn count-a-seq [lat]\n  (reduce (fn [x y] (+ x 1)) 0 lat))", "problem": 22, "user": "52725040e4b03e8d9a4a7427"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "523acf7be4b0aa37f082ed90"}, {"code": "#(reduce + 0 (map (constantly 1) %))", "problem": 22, "user": "527268a5e4b03e8d9a4a7431"}, {"code": "(fn cnt\n  ([lst] (cnt (rest lst) 1))\n  ([lst acc]\n   (if (empty? lst)\n     acc\n     (cnt (rest lst) (inc acc)))))", "problem": 22, "user": "52727d52e4b03e8d9a4a7439"}, {"code": "(fn seqcounter [input]\n  (if (nil? (first input)) 0 (+ 1 (seqcounter (rest input))))\n  )", "problem": 22, "user": "5271605ae4b03e8d9a4a73ed"}, {"code": "(fn [coll]\n  (reduce (fn [e1 e2] (inc e1)) 0 coll))", "problem": 22, "user": "5272ccf1e4b03e8d9a4a7450"}, {"code": "(fn [col]\n  ((fn [col n]\n    (if (seq col)\n      (recur (rest col) (inc n))\n      n))\n   col 0))", "problem": 22, "user": "5272e1b6e4b03e8d9a4a745a"}, {"code": "(fn [inputSeq] (loop [inSeq inputSeq len 0] (if (seq inSeq) (recur (rest inSeq) (inc len)) len)))", "problem": 22, "user": "52711255e4b03e8d9a4a73d7"}, {"code": "#(loop [seq % index 0] (if (empty? seq) index (recur (rest seq) (inc index))))", "problem": 22, "user": "52727ba4e4b03e8d9a4a7438"}, {"code": "#(reduce (fn[n _](+ 1 n)) 0 %)", "problem": 22, "user": "5273562ae4b03e8d9a4a7479"}, {"code": "(fn [lat]\n  (reduce (fn [x y] (+ x 1)) 0 lat))", "problem": 22, "user": "5272d4b7e4b03e8d9a4a7453"}, {"code": "(fn ccount [s]\n  (if (empty? s)\n    0\n    (+ 1 (ccount (rest s)))))", "problem": 22, "user": "52736ca1e4b03e8d9a4a747e"}, {"code": "(fn [a]\n  (let [total 0]\n    (reduce #'+ (map (fn [b] (+ total 1)) a))))", "problem": 22, "user": "527367dfe4b03e8d9a4a747d"}, {"code": "(partial \n   #(loop [acc % xs %2]\n     (if (nil? (first xs)) \n          acc \n          (recur (inc acc) (rest xs)))) 0)", "problem": 22, "user": "5273588ee4b03e8d9a4a747a"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "527381bae4b03e8d9a4a7482"}, {"code": "#(apply + (map (fn[x] 1) %))", "problem": 22, "user": "526e3f74e4b03e8d9a4a7312"}, {"code": "#(reduce (fn[x y] (inc x)) 0 %)", "problem": 22, "user": "5243f93be4b076204b44faf6"}, {"code": "(fn my-count [xs]\n  (if (empty? xs)\n    0\n    (inc (my-count (rest xs)))\n  ))", "problem": 22, "user": "5273b883e4b03e8d9a4a748f"}, {"code": "(fn [xs] (let [count' (fn [xs n] (if (next xs) (recur (next xs) (+ n 1)) n))] (count' xs 1)))", "problem": 22, "user": "52741177e4b03e8d9a4a749b"}, {"code": "(fn cnt [s]\n  (if (= s '())\n    0\n    (+ 1 (cnt (rest s))) ))", "problem": 22, "user": "527361b3e4b03e8d9a4a747c"}, {"code": "(fn [v] \n\t(reduce (fn [x _] (+ 1 x)) 0 v)\n   )", "problem": 22, "user": "5272d528e4b03e8d9a4a7454"}, {"code": "reduce (fn [x _] (inc x)) 0", "problem": 22, "user": "526bc746e4b03e8d9a4a7271"}, {"code": "(fn [l]\n  (loop [ls l acc 0]\n    (if (not (seq ls))\n      acc\n      (recur (rest ls) (inc acc)))))", "problem": 22, "user": "526fc549e4b03e8d9a4a7380"}, {"code": "#(+ (apply max (map first (map-indexed vector %))) 1)", "problem": 22, "user": "526bd187e4b03e8d9a4a7273"}, {"code": "#(reduce + (map (fn [x] (+ 1 0)) %))", "problem": 22, "user": "527513d8e4b03e8d9a4a74bd"}, {"code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "problem": 22, "user": "511036c5e4b04c71fce993ee"}, {"code": "(fn [x] (reduce + (map (fn [y] 1) x)))", "problem": 22, "user": "526bd542e4b03e8d9a4a7274"}, {"code": "reduce (fn [a b] (inc a)) 0", "problem": 22, "user": "50be9b4ae4b00fb48fed2ef6"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "5275f7a2e4b03e8d9a4a74d0"}, {"code": "(fn [coll] (loop [[first-element & rest-elements] coll\n                  result 1]\n             (if (empty? rest-elements)\n               result\n               (recur rest-elements (inc result)))))", "problem": 22, "user": "527634d1e4b03e8d9a4a74d6"}, {"code": "(fn cnt [list] (if (empty? list) 0 (+ 1 (cnt (rest list)))))", "problem": 22, "user": "527675cbe4b03e8d9a4a74e2"}, {"code": "(fn [s] (reduce + (map (fn [x] 1) s)))", "problem": 22, "user": "52767de0e4b03e8d9a4a74e5"}, {"code": "#(apply + (map (constantly 1) %) )", "problem": 22, "user": "527682ede4b03e8d9a4a74e6"}, {"code": "#(.size (vec %))", "problem": 22, "user": "5276aa0de4b03e8d9a4a74ea"}, {"code": "#(loop [wanted 0 source %1] (if (empty? source)\nwanted (recur (inc wanted) (rest source))))", "problem": 22, "user": "5274eb56e4b03e8d9a4a74bb"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "52765fe6e4b03e8d9a4a74dc"}, {"code": "(fn mycnt\n  ([seq] (mycnt seq 0))\n  ([seq counter] (if (empty? seq)\n                   counter\n                   (recur (rest seq) (inc counter)))))", "problem": 22, "user": "52753740e4b03e8d9a4a74c1"}, {"code": "(fn [coll] (loop [in coll, n 0] (if (empty? in) n (recur (rest in) (inc n)))))", "problem": 22, "user": "52774928e4b03e8d9a4a74fe"}, {"code": "#(apply + (map (fn [a] 1) %))", "problem": 22, "user": "5277c221e4b03e8d9a4a750f"}, {"code": "(fn [x] (reduce + (map (fn [x] 1) x)))", "problem": 22, "user": "5277b9b5e4b03e8d9a4a750d"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "52729b88e4b03e8d9a4a7441"}, {"code": "(fn c [v] (if (empty? v) 0 (+ 1 (c (rest v)))))", "problem": 22, "user": "521d709ae4b050d5da0427ef"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "527818f7e4b03e8d9a4a7519"}, {"code": "#((fn beh [c s] (if (first s) (beh (inc c) (rest s)) c)) 0 %1)", "problem": 22, "user": "52747090e4b03e8d9a4a74a5"}, {"code": "(fn [xs]\n  (loop [xs xs n 0]\n    (if (empty? xs) n\n      (recur (rest xs) (inc n)))))", "problem": 22, "user": "526f2e16e4b03e8d9a4a7353"}, {"code": "(fn [list] (reduce + (map (fn [x] 1) list)))", "problem": 22, "user": "5277da8ee4b03e8d9a4a7514"}, {"code": "(fn my-count\n  [seq]\n  (loop [s seq cnt 0]\n    (if (empty? s ) cnt\n      (recur (rest s) (inc cnt) ))))", "problem": 22, "user": "50651de3e4b0b1b6c8b1d85f"}, {"code": "(fn [x] (reduce + (map (fn [y] 1) x)))", "problem": 22, "user": "5279096ce4b03e8d9a4a752d"}, {"code": "reduce (fn [acc x] (+ acc 1)) 0", "problem": 22, "user": "5243635ce4b076204b44fab8"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "52795656e4b03e8d9a4a7534"}, {"code": "(fn [x] (reduce (fn [coll y] (+ 1 coll)) 0 x))", "problem": 22, "user": "52797546e4b03e8d9a4a7536"}, {"code": "#(reduce (fn [x y] (inc x)) 0 %1)", "problem": 22, "user": "52774fd2e4b03e8d9a4a7500"}, {"code": "(fn [xs]\n  (reduce + (map (constantly 1) xs)))", "problem": 22, "user": "527236d4e4b03e8d9a4a741f"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "52777dc3e4b03e8d9a4a7508"}, {"code": "(fn c [xs] (if (empty? xs) 0 (+ 1 (c (rest xs)))))", "problem": 22, "user": "5273c41be4b03e8d9a4a7492"}, {"code": "(fn [lst]\n  (loop [i 0 lst lst]\n    (if (empty? lst) i\n      (recur (inc i) (rest lst)))))", "problem": 22, "user": "52718620e4b03e8d9a4a73f5"}, {"code": "(fn a [coll] (loop [c coll n 0] (if (nil? c) (identity n) (recur (next c) (inc n)))))", "problem": 22, "user": "527a8eb7e4b03e8d9a4a755f"}, {"code": "(fn mycount [l] \n  (if (first l) \n    (+ 1 (mycount (next l)))\n    0\n  )\n)", "problem": 22, "user": "527a9f19e4b03e8d9a4a7562"}, {"code": "#(reduce (fn [x _] (inc x)) 0 %)", "problem": 22, "user": "527094f0e4b03e8d9a4a73b3"}, {"code": "reduce (fn [x y] (+ 1 x)) 0", "problem": 22, "user": "5279a878e4b03e8d9a4a753c"}, {"code": "(fn lambda [lst]\n  (if (empty? (rest lst))\n    1\n    (+ 1 (lambda (rest lst)))))", "problem": 22, "user": "527a5b84e4b03e8d9a4a7558"}, {"code": "#(reduce (fn [x _] (inc x)) 0 %)", "problem": 22, "user": "4db03885838c48654951d9bd"}, {"code": "#( reduce + (map ( constantly 1) %))", "problem": 22, "user": "527b856fe4b03e8d9a4a758d"}, {"code": "#(reduce (fn [r, _] (+ r 1)) 0 %)", "problem": 22, "user": "527b8881e4b03e8d9a4a758e"}, {"code": "(fn [c]\n  (loop [l c acc 0]\n    (if (empty? l)\n      acc\n      (recur (rest l) (inc acc)))))", "problem": 22, "user": "527b8ed7e4b03e8d9a4a758f"}, {"code": "#(loop [counter 0 l %]\n                               (if (not (seq l)) counter\n                               (recur (inc counter) (rest l))\n                               )\n                               )", "problem": 22, "user": "5265337fe4b03e8d9a4a7104"}, {"code": "(fn [sequencia]\n (loop[sequen sequencia, qtd 0]\n  (if(empty? sequen) qtd\n    (recur (rest sequen) (+ qtd 1))\n  )\n )\n)", "problem": 22, "user": "527c0388e4b03e8d9a4a75a6"}, {"code": "(fn [sequencia] \n (loop [s sequencia, n 0]\n   (if (empty? s) n\n     (recur (rest s) (inc n))\n   )\n )\n)", "problem": 22, "user": "527c040be4b03e8d9a4a75a7"}, {"code": "#(\tloop [tam 0 vet % ] \n   \t\t(if (empty? vet) \n      \t\ttam \n       \t\t(recur (inc tam) (rest vet)) \n     \t)\n)", "problem": 22, "user": "4e94addc535dbda64a6f6b21"}, {"code": "#(loop [x % c 0] \n   (if (= x  '()) c (recur (rest x) (inc c))\n     )\n   )", "problem": 22, "user": "527c0513e4b03e8d9a4a75ab"}, {"code": "#(loop [x %, soma 0 ]\n  (if( empty?  x )\n        soma\n        (recur (rest x) (inc soma))\n  )\n)", "problem": 22, "user": "4e84f81b535db62dc21a62e6"}, {"code": "(fn [x] \n  (loop [col x t 0]\n    (if (empty? col) t\n      (recur (rest col) (inc t)))\n    )\n  )", "problem": 22, "user": "527c036ee4b03e8d9a4a75a5"}, {"code": "(fn [colecao] \n  (loop [i 0 , col colecao]\n    (if (empty? col) i \n       (recur (inc i) (rest col)) \n    )\n  )\n)", "problem": 22, "user": "527c045fe4b03e8d9a4a75a8"}, {"code": "(fn [s]\n  (let [helper (fn [s n]\n                 (if (empty? s)\n                   n\n                   (recur (rest s) (inc n))))]\n    (helper s 0)))", "problem": 22, "user": "527c166de4b03e8d9a4a75b3"}, {"code": "(fn f [a]\n  (if (not-empty a)\n    (inc (f (rest a)))\n    0\n  )\n)", "problem": 22, "user": "5272d7b4e4b03e8d9a4a7456"}, {"code": "(fn count-elements [x]\n  (if (= (first x) nil)\n    0\n    (+ 1 (count-elements (rest x)))\n  )\n)", "problem": 22, "user": "527c2ac9e4b03e8d9a4a75b7"}, {"code": "(fn [x] (loop [times 0 coll x] (if (empty? coll) times (recur (inc times) (rest coll)))))", "problem": 22, "user": "527c4071e4b0757a1b17135a"}, {"code": "#(.size (vec %) )", "problem": 22, "user": "4fda0678e4b05e33b9224f44"}, {"code": "(partial reduce #(do %2 (inc %1)) 0)", "problem": 22, "user": "527b9beee4b03e8d9a4a7590"}, {"code": "(fn [sq]\n  (loop [x sq res 0]\n    (if (empty? x)\n      res\n      (recur (rest x) (+ 1 res)))))", "problem": 22, "user": "527cd633e4b0757a1b17136f"}, {"code": "(fn my-count[a-seq]\n    ((fn count-cnt[t-seq cnt]\n         (if (seq t-seq)\n              (count-cnt (rest t-seq) (inc cnt))\n              cnt)\n      ) a-seq 0))", "problem": 22, "user": "52763696e4b03e8d9a4a74d7"}, {"code": "reduce (fn [x y] (inc x)) 0", "problem": 22, "user": "525d318fe4b0cb4875a45d63"}, {"code": "(fn my-lenght [l]\n  (reduce +\n      (map (fn [x] 1) l)))", "problem": 22, "user": "51cef277e4b0e42293a22567"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "527d60b9e4b0757a1b171383"}, {"code": "#(loop [x % c 0] (if-not (seq x) c (recur (rest x) (+ 1 c))))", "problem": 22, "user": "527bfb9fe4b03e8d9a4a75a4"}, {"code": "(fn [xs] (\n          (fn my-count [ys, n] \n            (if (= (rest ys) []) \n              n\n              (my-count (rest ys) (+ n 1))\n              )\n            ) \n          xs \n          1)\n  )", "problem": 22, "user": "5027a13de4b01614d1633fed"}, {"code": "(fn [col]\n  (loop [c col, i 0]\n    (if (seq c)\n      (recur (rest c) (inc i))\n      i)))", "problem": 22, "user": "527dc2aee4b0757a1b17138d"}, {"code": "(fn[s](reduce + (map (fn[x](+ 1)) s)))", "problem": 22, "user": "526a3412e4b03e8d9a4a721e"}, {"code": "(fn f [xs]\n  (if (empty? xs) 0\n      (inc (f (rest xs)))))", "problem": 22, "user": "515c1f12e4b069911535cf06"}, {"code": "#(reduce + (map (fn [_] 1) %))", "problem": 22, "user": "52561be5e4b0541d1855ba08"}, {"code": "(fn counter [x]\n  (loop [counter 0, number x]\n    (if (= number nil)\n        counter\n        (recur (inc counter) (next number)))))", "problem": 22, "user": "526f0a68e4b03e8d9a4a7348"}, {"code": "(fn \n  [eles]\n  (loop [eles eles\n         n 0]\n    (if (empty? eles) n (recur (rest eles) (+ 1 n)))))", "problem": 22, "user": "527ed32ce4b0757a1b1713b5"}, {"code": "(fn countt [x]\n  (if (= (first x) nil) 0 \n    (+ 1 (countt (rest x)))))", "problem": 22, "user": "527f214de4b0757a1b1713c4"}, {"code": "(fn ff [n s] (if (empty? s) n (ff (inc n) (butlast s)))) 0", "problem": 22, "user": "525b10a4e4b0cb4875a45d02"}, {"code": "(fn [orig]\n  (loop [s orig, c 0]\n    (if (empty? s)\n      c\n      (recur (rest s) (inc c)))))", "problem": 22, "user": "52745629e4b03e8d9a4a74a0"}, {"code": "#(reduce (fn [c _] (inc c)) 0 %)", "problem": 22, "user": "528014e5e4b0757a1b1713e3"}, {"code": "#(reduce (fn [sum item] (+ sum 1)) 0 %)", "problem": 22, "user": "52808559e4b0757a1b171403"}, {"code": "#( loop [x % c 0] (let [y (next x)] (if (seq x) (recur y (inc c)) c )))", "problem": 22, "user": "52808897e4b0757a1b171404"}, {"code": "#(loop [i 0 in %]\n   (if (empty? in)\n     i\n     (recur (inc i) (rest in))\n   )\n )", "problem": 22, "user": "527fd663e4b0757a1b1713de"}, {"code": "(fn cnt [[s & ss]]\n  (if s\n    (+ 1 (cnt ss))\n    0))", "problem": 22, "user": "5280d4bbe4b0757a1b171415"}, {"code": "#(reduce (fn [a _] (inc a)) 0 %)", "problem": 22, "user": "527ccaf4e4b0757a1b17136d"}, {"code": "#(loop [v (vec %)\n        x 0]\n   (if (empty? v)\n   x\n   (recur (rest v) (inc x))))", "problem": 22, "user": "528147b6e4b0757a1b171425"}, {"code": "(fn c [a] \n\n  (\n   \tif (empty? a) \n  \t0\n   \t(+ 1 \n       (c (rest a))\n       )\n   )\n)", "problem": 22, "user": "528149fbe4b0757a1b171426"}, {"code": "(fn my-count [aseq]\n  (condp = aseq\n    (list) 0\n    (+ 1 (my-count (rest aseq)))))", "problem": 22, "user": "52812b9fe4b0757a1b171423"}, {"code": "reduce (fn [m _] (+ m 1)) 0", "problem": 22, "user": "528111d4e4b0757a1b17141d"}, {"code": "reduce #(or (inc %) %2) 0", "problem": 22, "user": "5281a445e4b0757a1b17143a"}, {"code": "(fn[x] (loop [cnt 0 ser (vec x)] (if (empty? ser) cnt (recur (+ cnt 1) (pop ser)))))", "problem": 22, "user": "52810225e4b0757a1b171418"}, {"code": "(fn size [v]\n(if (empty? v)\n0\n(inc (size (rest v)))))", "problem": 22, "user": "52767b2ce4b03e8d9a4a74e4"}, {"code": "reduce (fn [c _] (inc c)) 0", "problem": 22, "user": "52828298e4b0757a1b17145b"}, {"code": "(fn [coll] ((fn f [coll n] (if (empty? coll) n (f (rest coll) (inc n)))) coll 0))", "problem": 22, "user": "52826315e4b0757a1b171459"}, {"code": "(fn [x]\n  (loop [cnt 0 xl x]\n    (if (empty? xl)\n      cnt\n      (recur (inc cnt) (rest xl))\n    )\n   ) \n  )", "problem": 22, "user": "52824143e4b0757a1b171453"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "527416ebe4b03e8d9a4a749d"}, {"code": "(fn[x] (loop [i 0 col x] (if (= (first col) nil) i (recur (inc i) (rest col)))))", "problem": 22, "user": "528365e2e4b0239c8a67adb3"}, {"code": "#(reduce (fn [x,y] (+ x 1)) 0 %)", "problem": 22, "user": "52835be2e4b0239c8a67adb0"}, {"code": "#(loop [result %, x 0] (if (empty? result) x ( recur (rest result) (inc x) ) ) )", "problem": 22, "user": "52774dd2e4b03e8d9a4a74ff"}, {"code": "#(reduce (fn[x y] (inc x)) 0 %)", "problem": 22, "user": "5284de3de4b0239c8a67ade3"}, {"code": "#(reduce + (map (fn [_] 1) %))", "problem": 22, "user": "519ef784e4b087743fad2198"}, {"code": "(fn [x] (reduce + (map (fn [y] 1) x)))", "problem": 22, "user": "52854795e4b0239c8a67adee"}, {"code": "(fn size \n  ([xs] (size xs 0))\n  ([xs c] (if (= (first xs) nil)\n               c\n               (size (rest xs) (+ 1 c)) )))", "problem": 22, "user": "52846deee4b0239c8a67adcf"}, {"code": "(partial #(if (empty? %2) %1 (recur (+ 1 %1) (next %2))) 0)", "problem": 22, "user": "5282f54be4b0239c8a67ada0"}, {"code": "#(loop [xs %, cnt 0] \n   (if (not-empty xs) \n     (recur (rest xs) (+ cnt 1)) \n     cnt))", "problem": 22, "user": "4fe98ddae4b0547ebccb2463"}, {"code": "(fn c [l] (if (not (empty? l)) (+ 1 (c (rest l))) 0))", "problem": 22, "user": "4f03c039535dcb61093f6b5e"}, {"code": "(fn [coll] (reduce + (map (fn [x] 1) coll)))", "problem": 22, "user": "5286ee5ce4b0239c8a67ae28"}, {"code": "(fn [coll] (reduce + (map (fn [x] 1) coll)))", "problem": 22, "user": "52872d54e4b0239c8a67ae32"}, {"code": "(fn count-seq [xs] (if (= nil (first xs)) 0 (+ 1 (count-seq (rest xs)))))", "problem": 22, "user": "5285920be4b0239c8a67adfb"}, {"code": "#(reduce (fn [x _] (inc x)) 0 %)", "problem": 22, "user": "52851da0e4b0239c8a67adea"}, {"code": "(fn [x] (reduce (fn [cnt x] (+ cnt 1)) 0 x))", "problem": 22, "user": "5287f66be4b0239c8a67ae45"}, {"code": "(fn [a] (loop [coll a\n               size 0]\n          (if (empty? coll)\n            size\n            (recur (rest coll) (inc size)))))", "problem": 22, "user": "52865f41e4b0239c8a67ae15"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "5285e35be4b0239c8a67ae04"}, {"code": "(fn [seq]\n        (loop\n            [seq seq\n             acc 0\n             ]\n\n            (if (= () seq) acc\n                (recur (rest seq) (+ 1 acc)))\n            ))", "problem": 22, "user": "5288b06de4b0239c8a67ae55"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "52890634e4b0239c8a67ae5e"}, {"code": "(fn [x]\n  (loop [idx 1\n         x x]\n    (if (empty? (rest x))\n      idx\n      (recur (inc idx) (rest x)))))", "problem": 22, "user": "5289714de4b0239c8a67ae64"}, {"code": "(fn [xs]\n  ((fn [inxs cnt]\n    (if (empty? inxs)\n      cnt\n      (recur (rest inxs) (+ cnt 1))\n    )\n  ) xs 0)\n)", "problem": 22, "user": "528432b6e4b0239c8a67adc7"}, {"code": "(fn [coll]\n            (loop [new-coll coll res 0]\n              (if (empty? new-coll)\n                res\n                (recur (rest new-coll) (inc res)))))", "problem": 22, "user": "5289bba9e4b0239c8a67ae69"}, {"code": "reduce (fn [x _] (inc x)) 0", "problem": 22, "user": "528652fbe4b0239c8a67ae14"}, {"code": "#(reduce + (map (fn [x] (+ 1)) %))", "problem": 22, "user": "528ad4cce4b0239c8a67ae84"}, {"code": "(fn [lst]\n  (reduce + (map (fn [_] 1) lst)))", "problem": 22, "user": "52864dbce4b0239c8a67ae12"}, {"code": "#(loop[result 0 c %]\n   (if(empty? c) result\n   (recur (inc result) (rest c))))", "problem": 22, "user": "528b0ab8e4b0239c8a67ae8b"}, {"code": "(fn cnt [l] (cond (or (= l \"\") (= l []) (= l nil)) 0 :else (+ 1 (cnt (rest l)))))", "problem": 22, "user": "528b9efee4b0239c8a67aea0"}, {"code": "reduce (fn [current, next](+ 1 current)) 0", "problem": 22, "user": "52867936e4b0239c8a67ae16"}, {"code": "#(loop [to-count %\n        amount   0]\n   (if (= to-count [])\n     amount\n     (recur (rest to-count) (inc amount))))", "problem": 22, "user": "514b83b4e4b0bd81940b86ce"}, {"code": "(fn [elements]\n  (loop [elements elements accum 0]\n    (if (empty? elements)\n      accum\n      (recur (rest elements) (inc accum)))))", "problem": 22, "user": "528b08efe4b0239c8a67ae8a"}, {"code": "(fn [ls0]\n  (loop [ls ls0, n 1]\n    (if (= (second ls) nil)\n        n\n        (recur (rest ls) (+ 1 n)))))", "problem": 22, "user": "51d8b36ce4b02ceefd947745"}, {"code": "(fn [coll]\n  (loop [cnt 0 new-coll coll]\n  \t(if (empty? new-coll)\n     cnt\n  (recur (inc cnt) (rest new-coll)))))", "problem": 22, "user": "5280539ce4b0757a1b1713f3"}, {"code": "#(reduce (fn [c _] (inc c)) 0 %)", "problem": 22, "user": "528c51a5e4b0239c8a67aeb4"}, {"code": "(fn [y] (reduce + (mapv (fn [x] (inc 0)) y)))", "problem": 22, "user": "5289f1f4e4b0239c8a67ae6d"}, {"code": "#(reduce (fn [x _] (inc x)) 0 %)", "problem": 22, "user": "528cb57ce4b0239c8a67aeb6"}, {"code": "(fn [xs] (reduce + (map (fn [_] 1) xs)))", "problem": 22, "user": "528ba1d9e4b0239c8a67aea2"}, {"code": "reduce (fn [a _] (inc a)) 0", "problem": 22, "user": "528d1094e4b0239c8a67aebe"}, {"code": "(fn [input]\n  (loop [sqnc input, length 0]\n    (if (seq sqnc)\n      (recur (rest sqnc) (+ length 1))\n      length)))", "problem": 22, "user": "528bba38e4b0239c8a67aea9"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "528d30b6e4b0239c8a67aec0"}, {"code": "(fn [seq] (apply + (keep (fn [x] 1 ) seq)))", "problem": 22, "user": "528cc69fe4b0239c8a67aeb7"}, {"code": "(fn[sequence]\n  (loop [n 0 seq sequence]\n    (if (empty? seq) n\n    (recur (inc n) (rest seq)))))", "problem": 22, "user": "528c381ce4b0239c8a67aeb2"}, {"code": ";(fn [s] (reduce + (map (fn [x] 1) s)))\n\n; FROM 'yyhh.org' Blog\n; #(reduce + (map (fn [x] 1) %))\n; #(reduce + (map (constantly 1) %))\n#(apply + (map (constantly 1) %))\n\n;reduce (fn [x _] (+ x 1)) 0\n; (fn [s] (reduce (fn [x _] (+ x 1)) 0 s))\n;(fn [s] (reduce (fn [n _] (inc n)) 0 s))\n; #(reduce (fn [s _] (+ s 1)) 0 %)\n\n; (comp (partial apply +) #(map (constantly 1) %))\n; (fn [s] ((comp (partial apply +) #(map (constantly 1) s))))", "problem": 22, "user": "525f61aae4b0cb4875a45dcb"}, {"code": "(partial reduce (fn [val x] (+ 1 val)) 0)", "problem": 22, "user": "52717a1de4b03e8d9a4a73f2"}, {"code": "(fn [s] (+ 1 (apply max (vals (zipmap s (range))))))", "problem": 22, "user": "528e1f30e4b0239c8a67aed4"}, {"code": "(fn [coll]\n(reduce + (map (fn [x] (/ 1 1)) coll)))", "problem": 22, "user": "52737333e4b03e8d9a4a747f"}, {"code": "#(apply + (map (fn [_] 1) %))", "problem": 22, "user": "528e64b7e4b0239c8a67aedd"}, {"code": "(fn [coll]\n  (loop [n 0\n         [x & xs] coll]\n    (if (nil? x)\n      n\n      (recur (inc n)\n             xs))))", "problem": 22, "user": "4f35b2ace4b0e243712b1ec5"}, {"code": "reduce (fn [x y]\n         (+ x 1))\n\t0", "problem": 22, "user": "5282c03be4b0757a1b171461"}, {"code": "#(reduce (fn [x y] (inc x)) 0 %)", "problem": 22, "user": "528a791ae4b0239c8a67ae77"}, {"code": "#(reduce (fn [x _] (+ 1 x)) 0 %)", "problem": 22, "user": "528e95efe4b0239c8a67aee2"}, {"code": "(fn count-recur [s] (if-not (empty? s) (inc (count-recur (rest s))) (+ 0 0)))", "problem": 22, "user": "528ec21fe4b0239c8a67aee5"}, {"code": "(fn count-a-seq [lat]\n  (reduce (fn [x y] (+ x 1)) 0 lat))", "problem": 22, "user": "52840004e4b0239c8a67adc1"}, {"code": "(fn [x] (apply + (map #(if (= % %) 1) x)))", "problem": 22, "user": "528f96b8e4b0239c8a67aef7"}, {"code": "#(loop\n   [the-sequence %\n    counter 0]\n   (if (empty? the-sequence) counter\n     (recur (rest the-sequence) (inc counter))))", "problem": 22, "user": "528e7740e4b0239c8a67aee0"}, {"code": "(fn [x] ( reduce + ( map (fn [y] 1) x )))", "problem": 22, "user": "529012a5e4b0239c8a67af01"}, {"code": "#(apply + (map (constantly 1) %))", "problem": 22, "user": "5290257ae4b0239c8a67af03"}, {"code": "#(reduce (fn [x y] (inc x)) 0 %)", "problem": 22, "user": "52761edae4b03e8d9a4a74d4"}, {"code": "(fn count-list [arr] \n  (loop [acc 0 a arr] \n    (if (empty? a) \n      acc\n      (recur (inc acc) (rest a)))))", "problem": 22, "user": "5287f34ee4b0239c8a67ae43"}, {"code": "(fn cnt [x] (if (empty? x) 0 (inc (cnt (rest x)))))", "problem": 22, "user": "528f1057e4b0239c8a67aeec"}, {"code": "(fn foo \n    [x] (reduce (fn [a b] (+ a 1)) 0 x)\n    )", "problem": 22, "user": "528ce039e4b0239c8a67aebc"}, {"code": "(fn [collection]\n  (loop [coll collection\n         size 0]\n    (if (empty? coll)\n      size\n      (recur (rest coll) (inc size)))))", "problem": 22, "user": "528b01a0e4b0239c8a67ae89"}, {"code": "(fn [s]\n  (let [inner (fn [[s1 & more] n] \n                (if more\n                  (recur more (inc n))\n                  n))]\n    (inner s 1)))", "problem": 22, "user": "529227cfe4b0239c8a67af27"}, {"code": "(fn [a] (reduce #(do %2 (inc %1)) 0 a))", "problem": 22, "user": "529242bee4b0239c8a67af28"}, {"code": "(\n       fn [x]\n       (reduce\n         (fn [x y] (+ x 1))\n         (map (fn [x] 1)(into [] x))\n         )\n       )", "problem": 22, "user": "528f82d8e4b0239c8a67aef4"}, {"code": "#(reduce (fn [x _](inc x)) 0 %)", "problem": 22, "user": "5290360be4b0239c8a67af04"}, {"code": "#(reduce (fn[x y] (inc x)) 0 %)", "problem": 22, "user": "5267eb51e4b03e8d9a4a718e"}, {"code": "(fn sss [x] \n  (if (empty? x) 0 (+ 1 (sss (rest x)))))", "problem": 22, "user": "52939024e4b0239c8a67af40"}, {"code": "#(reduce (fn [c _] (inc c)) 0 %)", "problem": 22, "user": "5292c985e4b0239c8a67af36"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "5293589ae4b0239c8a67af3d"}, {"code": "#(reduce (fn [x _] (inc x)) 0 %)", "problem": 22, "user": "5257e2ace4b0cb4875a45c9a"}, {"code": "(fn [xs] (reduce (fn [acc x] (inc acc)) 0 xs))", "problem": 22, "user": "52614bc1e4b03e8d9a4a705c"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "5294e44de4b02ebb4ef75016"}, {"code": "(fn [coll] (reduce (fn [n _] (inc n)) 0 coll))", "problem": 22, "user": "52939bd1e4b0239c8a67af41"}, {"code": "(fn my-count\n  ([c] (my-count c 0))\n  ([c n] (if (seq c) (recur (rest c) (inc n)) n)))", "problem": 22, "user": "52951156e4b02ebb4ef7501b"}, {"code": "(fn [coll] \n  (loop [i 0 rem coll]\n    (if (empty? rem) i\n        (recur (inc i) (rest rem)))))", "problem": 22, "user": "52950ab6e4b02ebb4ef7501a"}, {"code": "(fn ctnt\n  ([coll] (ctnt coll 0))\n  ([coll x] (if (empty? coll)\n              x\n              (ctnt (rest coll) (inc x)))\n   )\n  \n)", "problem": 22, "user": "52837636e4b0239c8a67adb6"}, {"code": "(fn [t] (loop[x t n 0] (if(empty? (next x)) (inc n) (recur (rest x) (inc n)))))", "problem": 22, "user": "5294b190e4b02ebb4ef75011"}, {"code": "(fn [s]\n  (loop [cur-s s\n         n 0]\n    (if (empty? cur-s)\n      n\n      (recur (rest cur-s) (inc n)))))", "problem": 22, "user": "52963cc7e4b02ebb4ef7502d"}, {"code": "(fn count_ [l]\n  (if (empty? l)\n    0\n    (+ 1 (count_ (rest l)))))", "problem": 22, "user": "5294c95fe4b02ebb4ef75013"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "529670c1e4b02ebb4ef75030"}, {"code": "(fn my-count [x] (if (nil? (seq x))\n                        0\n                        (+ 1 (my-count (rest x)))\n                        ))", "problem": 22, "user": "5296aa9be4b02ebb4ef75034"}, {"code": "#(loop [coll (seq %) n 0]\n   (if (= coll ()) n\n     (recur (rest coll) (inc n))))", "problem": 22, "user": "52974f66e4b02ebb4ef75040"}, {"code": "reduce (fn [a x] (+ 1 a)) 0", "problem": 22, "user": "52976262e4b02ebb4ef75041"}, {"code": "#(+ 1 (first(last(map-indexed vector %))))", "problem": 22, "user": "5296008fe4b02ebb4ef7502a"}, {"code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "problem": 22, "user": "5297c25de4b02ebb4ef75045"}, {"code": "#(reduce (fn [c _] (inc c)) 0 %)", "problem": 22, "user": "52986e43e4b02ebb4ef75058"}, {"code": "#(reduce + (map (fn [x] 1) %))\n;#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "5298bd13e4b02ebb4ef75063"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "528cf6f7e4b0239c8a67aebd"}, {"code": "(fn count-sequence [coll]\n  (reduce (fn [x _] (inc x)) 0 coll))", "problem": 22, "user": "5298cc88e4b02ebb4ef75065"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "52990271e4b02ebb4ef7506d"}, {"code": "#(reduce (fn [x y] (inc x)) 0 %)", "problem": 22, "user": "5298d3f4e4b02ebb4ef75068"}, {"code": "(fn[lat]\n  (reduce (fn [x y] (+ x 1)) 0 lat))", "problem": 22, "user": "529952a4e4b02ebb4ef75081"}, {"code": "(fn [l] (reduce + 0 (map (fn [_] (inc 0)) l)))", "problem": 22, "user": "52140b53e4b0961f15ac4d7e"}, {"code": "(fn [s]\n  (reduce (fn [i x] (+ i 1)) 0 s))", "problem": 22, "user": "529a3c37e4b02ebb4ef75094"}, {"code": "(fn [x] (+ (last (map-indexed (fn [i -] i) x)) 1))", "problem": 22, "user": "529a2d3be4b02ebb4ef75092"}, {"code": "#(inc (first (last (map-indexed vector %))))", "problem": 22, "user": "526934d6e4b03e8d9a4a71dd"}, {"code": "reduce #(+ 1 % #_%&) 0", "problem": 22, "user": "51ad244fe4b09397d510977f"}, {"code": "(fn len[s]\n  (if (not (seq s))\n    0\n    (+ 1 (len (rest s)))))", "problem": 22, "user": "529a73bde4b02ebb4ef75096"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "509fe759e4b08df8156e9e43"}, {"code": "reduce (fn [n m] (inc n)) 0", "problem": 22, "user": "527bd988e4b03e8d9a4a759d"}, {"code": "(fn [a] (reduce (fn [a b] (+ a 1)) 0 a))", "problem": 22, "user": "528fdb8ee4b0239c8a67aefe"}, {"code": "(fn [aseq]\n  (let [seq-cnt (fn [n a]\n                  (if (nil? (seq a))\n                    n\n                    (recur (+ n 1) (rest a))))]\n    (seq-cnt 0 aseq)))", "problem": 22, "user": "529b5301e4b02ebb4ef7509f"}, {"code": "#(reduce\n  (fn [c _] (inc c))\n  0 %)", "problem": 22, "user": "4fd5418ee4b0d4de60cee372"}, {"code": "#(apply + (map (fn [x] 1) %))", "problem": 22, "user": "529c722de4b04e0c58e87b63"}, {"code": "#(reduce (fn [x y] (+ x 1)) 0 %)", "problem": 22, "user": "529c87efe4b04e0c58e87b66"}, {"code": "#(reduce + (map (fn [_] 1) %))", "problem": 22, "user": "528e1c88e4b0239c8a67aed1"}, {"code": "(fn [x] (reduce +(map (fn [elem] 1) x)))", "problem": 22, "user": "529c6995e4b04e0c58e87b61"}, {"code": "#(reduce (fn [x y] (inc x)) 0 %)", "problem": 22, "user": "4e72187b535d5021c1a8965b"}, {"code": "(fn [list] \n  ((fn cnt [memo, [head & tail]] \n    (if (empty? tail) \n      memo\n      (cnt (+ memo 1) tail))\n    ) 1 list))", "problem": 22, "user": "529ca7dae4b04e0c58e87b67"}, {"code": "reduce (fn [a b] (+ 1 a)) 0", "problem": 22, "user": "5290ffaee4b0239c8a67af10"}, {"code": "(partial reduce (fn [x y] (+ x 1)) 0)", "problem": 22, "user": "529d4f4be4b04e0c58e87b79"}, {"code": "(fn [sq] (reduce (fn [out, elem] (+ 1 out)) 0 sq))", "problem": 22, "user": "529d292fe4b04e0c58e87b74"}, {"code": "#(reduce + (map (fn [x] (if (nil? x) 0 1))%))", "problem": 22, "user": "528f0106e4b0239c8a67aeeb"}, {"code": "#(reduce + (map (fn [n] 1) %))", "problem": 22, "user": "51e05dfae4b01188f0627543"}, {"code": "(fn length* [xs] (if (empty? xs) 0 (+ 1 (length* (rest xs)))))", "problem": 22, "user": "529dc421e4b04e0c58e87b80"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "528e510ee4b0239c8a67aeda"}, {"code": "#(reduce (fn [i x] (+ 1 i)) 0 %)", "problem": 22, "user": "529df714e4b04e0c58e87b85"}, {"code": "(fn [l]\n  (apply + (map (fn [_] 1) l)))", "problem": 22, "user": "529df7f1e4b04e0c58e87b86"}, {"code": "#((fn my-count [s n] (if (= nil (first s))\n                       n\n                       (my-count (rest s) (+ 1 n)))) % 0)", "problem": 22, "user": "529ce629e4b04e0c58e87b6e"}, {"code": "(fn [seq] (reduce (fn [acc n] (inc acc)) 0 seq))", "problem": 22, "user": "529e2383e4b04e0c58e87b8b"}, {"code": "#(reduce (fn [a b] (+ 1 a)) 0 %)", "problem": 22, "user": "529e558ce4b04e0c58e87b95"}, {"code": "(fn\n  [xs]\n  (apply + (map (fn [x] 1) xs)))", "problem": 22, "user": "529dd5a4e4b04e0c58e87b82"}, {"code": "(fn [sq] (loop [s sq n 0] (if (empty? s) n (recur (rest s) (inc n)))))", "problem": 22, "user": "529f3f1ae4b04e0c58e87ba5"}, {"code": "(fn [coll]\r\n  (loop [coll coll n 0]\r\n    (if (empty? coll) n\r\n       (recur (drop 1 coll) (inc n)))))", "problem": 22, "user": "523aa92ae4b081681ca7adcd"}, {"code": "#(loop [a 0 b %] (if (empty? b) a (recur (inc a) (rest b))))", "problem": 22, "user": "529f453ee4b04e0c58e87ba6"}, {"code": "#(reduce (fn [a b] (inc a)) 0 %)", "problem": 22, "user": "529e8ba9e4b04e0c58e87b99"}, {"code": "(fn [x] (loop [col x ct 0] (if (nil? col) ct (recur (next col) (inc ct)))))", "problem": 22, "user": "525121ede4b0541d1855b868"}, {"code": "(fn [s] (reduce (fn [a _] (+ 1 a)) 0 s))", "problem": 22, "user": "529f8b2fe4b04e0c58e87bb2"}, {"code": "(fn cnt\n  ([] 0)\n  ([[x & more]] (inc (apply cnt more)))\n  ([x & more] (inc (cnt more)))\n)", "problem": 22, "user": "5277fb07e4b03e8d9a4a7518"}, {"code": "(fn mycount\n  ([args] (mycount 0 args))\n  ([c args] (if (seq args) (recur (inc c) (rest args)) c)))", "problem": 22, "user": "52323a4ae4b035af41902a79"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "52a00651e4b04e0c58e87bbb"}, {"code": "#(loop [l %1 cnt 0]\n   (if (nil? (first l))\n     cnt\n     (recur (rest l) (inc cnt))\n     )\n   )", "problem": 22, "user": "528f4462e4b0239c8a67aef0"}, {"code": "reduce (fn [x _] (inc x)) 0", "problem": 22, "user": "52a04f0ee4b04e0c58e87bc1"}, {"code": "(fn [coll] ( last (map #(int %2) coll (iterate inc 1))))", "problem": 22, "user": "5291ede5e4b0239c8a67af1e"}, {"code": "(fn f [x] (if (= x []) 0 (+ (f (rest x)) 1)))", "problem": 22, "user": "52a07565e4b04e0c58e87bc5"}, {"code": "(fn my-count\n  [s]\n  (reduce + (map (fn [_] 1) s)))", "problem": 22, "user": "528e25b9e4b0239c8a67aed5"}, {"code": "(fn my-count [l]\n  ((fn my-count [l acc]\n    (cond\n     (empty? l) acc\n     :else (my-count (rest l) (+ acc 1)))) l 0))", "problem": 22, "user": "529f5335e4b04e0c58e87ba8"}, {"code": "(fn [x] \n  (loop [y x cnt 0]\n    (if (= y '()) cnt\n      (recur (rest y) (+ cnt 1)))))", "problem": 22, "user": "52a0fa82e4b04e0c58e87bd1"}, {"code": "(fn [container] (loop [s container ct 0] (if (nil? s) ct (recur (next s) (inc ct)))))", "problem": 22, "user": "52a195fde4b04e0c58e87bda"}, {"code": "(partial reduce (fn [a b] (inc a)) 0)", "problem": 22, "user": "52a1acb2e4b04e0c58e87bdb"}, {"code": "(fn my-count [x]\n  ((fn self [y c] (if (first y)\n                   (self (next y) (inc c))\n                   c)\n    ) x 0))", "problem": 22, "user": "52a1b624e4b04e0c58e87bde"}, {"code": "(fn [lst]\n  (loop [l lst acc 0]\n    (if (empty? l)\n      acc\n      (recur (rest l) (+ acc 1)))))", "problem": 22, "user": "529f739fe4b04e0c58e87bad"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "52a1c6cee4b04e0c58e87be1"}, {"code": "(fn [x]\n  (loop [s x curr 0]\n    (if (empty? s)\n      curr\n      (recur (rest s) (inc curr)))))", "problem": 22, "user": "5226f8e9e4b04e78ff2e199a"}, {"code": "(fn [col]\n  (reduce + (map (constantly 1) col)))", "problem": 22, "user": "52a32876e4b04e0c58e87bfb"}, {"code": "(fn count-elements [x]\n  (if (empty? x) 0\n    (+ 1 (count-elements (rest x)))))", "problem": 22, "user": "529e3a4fe4b04e0c58e87b92"}, {"code": "(partial reduce (fn [a _] (+ 1 a)) 0)", "problem": 22, "user": "4f1b120f535d64f603146476"}, {"code": "(fn get-count\n   ([coll] (get-count coll 0))\n   ([coll idx]\n     (if (empty? coll)\n       idx\n       (get-count (rest coll) (inc idx)))))", "problem": 22, "user": "5233adf7e4b07e3ee2be83ad"}, {"code": "#(reduce (fn [x y] (inc x)) 0 %)", "problem": 22, "user": "5249ba84e4b05ef8e38e6474"}, {"code": "#(loop [col % c 0]\n    (if (empty? col)\n      c\n      (recur (rest col) (inc c))\n      )\n    )", "problem": 22, "user": "52a11853e4b04e0c58e87bd4"}, {"code": "#(reduce (fn [t e] (+ t 1)) 0 %)", "problem": 22, "user": "52a42b2be4b04e0c58e87c06"}, {"code": "#(reduce + (map (fn test[x] (inc 0)) %))", "problem": 22, "user": "52a144b0e4b04e0c58e87bd6"}, {"code": "#(reduce (fn [total sequence] (inc total)) 0 %)", "problem": 22, "user": "52a4879ce4b0c58976d9abdb"}, {"code": ";;(fn [s] (reduce + (map (fn [i] 1) s)))\n(fn [s] (apply + (map (fn [i] 1) s)))", "problem": 22, "user": "52a4f3cee4b0c58976d9abe0"}, {"code": "(fn [xs] (loop [cnt 0 els xs] (if (empty? els) cnt (recur (inc cnt) (rest els)))))", "problem": 22, "user": "4ec1619b535dfed6da9c6dab"}, {"code": "(fn [items] (reduce + (map #(if % 1 ) (seq items))))", "problem": 22, "user": "52a52e59e4b0c58976d9abe4"}, {"code": "(fn [c] (loop [coll c, n 0] (if (empty? coll) n (recur (rest coll) (inc n)))))", "problem": 22, "user": "52a503e4e4b0c58976d9abe1"}, {"code": "(fn _count [s] (if (nil? (not-empty (rest s))) 1 (+ 1 (_count (rest s)))))", "problem": 22, "user": "5263c44fe4b03e8d9a4a70b8"}, {"code": "(fn [s]\n  (loop [acc 0 r s]\n    (if (empty? r)\n      acc\n      (recur (inc acc) (rest r)))))", "problem": 22, "user": "4f77b68de4b0fbe0118ec581"}, {"code": "(fn [ls] (+ 1 (last (map-indexed (fn [idx item] idx) ls))))", "problem": 22, "user": "52a614dfe4b0c58976d9abf8"}, {"code": "#(reduce (fn [v c] (+ 1 v)) 0 %)", "problem": 22, "user": "52a5e784e4b0c58976d9abf3"}, {"code": "#(loop [sum 0 x %]\n         (if (empty? x)\n           sum\n           (recur (inc sum) (rest x))))", "problem": 22, "user": "52a0237de4b04e0c58e87bbe"}, {"code": "reduce (fn [c _] (inc c)) 0", "problem": 22, "user": "522b7389e4b0d34ee08e71be"}, {"code": "(fn [s] (loop [x s n 0] (if (empty? x) n (recur (rest x) (inc n)))))", "problem": 22, "user": "5143db4fe4b0b4fb4ace5f3d"}, {"code": "(fn cnt \n  [coll] \n  (if (=  coll []) 0 (inc (cnt (rest coll)))   )   )", "problem": 22, "user": "529e36b4e4b04e0c58e87b91"}, {"code": "(fn [s]\n  (loop [s s\n\t i 0]\n    (if (nil? (first s))\n       i\n      (recur (drop 1 s) (inc i)))))", "problem": 22, "user": "51661e9ce4b05e5ef6a5e806"}, {"code": "(fn [the-seq]\n  (loop [n 0 remain the-seq]\n    (if (empty? remain)\n      n\n      (recur (inc n) (rest remain)))))", "problem": 22, "user": "52a32b52e4b04e0c58e87bfc"}, {"code": "(fn [coll] (loop [acc 0 c coll] (if (empty? c) acc (recur (inc acc) (rest c)))))", "problem": 22, "user": "52a5f1e6e4b0c58976d9abf4"}, {"code": "(fn [s] \n  (let [f (fn [l acc]\n            (if (empty? l) acc\n              (recur (rest l) (inc acc))))] (f s 0)))", "problem": 22, "user": "5273e006e4b03e8d9a4a7495"}, {"code": "(fn my-count [xs]\n  (if (empty? xs)\n    0\n    (+ 1 (my-count (rest xs)))))", "problem": 22, "user": "52a779fce4b0c58976d9ac1a"}, {"code": "(fn [lst]\n  (loop [l lst\n         index 0]\n    (if (empty? l)\n      index\n      (recur (rest l) (inc index)))))", "problem": 22, "user": "52a6ed15e4b0c58976d9ac0a"}, {"code": "(fn [array] (loop [arr array cnt 0] (if (first arr) (recur (rest arr) (inc cnt)) cnt)))", "problem": 22, "user": "52a5d1f3e4b0c58976d9abf1"}, {"code": "reduce #(do %2 (+ 1 %)) 0", "problem": 22, "user": "528a3e14e4b0239c8a67ae72"}, {"code": "(fn [coll] (letfn [(ct [c n]\n                          (if (empty? c)\n                            n\n                            (ct (rest c) (inc n))))]\n             (ct coll 0)))", "problem": 22, "user": "5298c83de4b02ebb4ef75064"}, {"code": "#(reduce + (map (fn [_] 1) %))", "problem": 22, "user": "52a8ca0fe4b0c58976d9ac36"}, {"code": "#(apply + (map (fn [_] 1) %))", "problem": 22, "user": "51929214e4b08962174cf74c"}, {"code": "(fn aaa [l] (if (first l) (+ 1 (aaa (rest l))) 0))", "problem": 22, "user": "52a82661e4b0c58976d9ac29"}, {"code": "(fn [l] (reduce (fn [x y] (+ x 1)) 0 l))", "problem": 22, "user": "52a69e06e4b0c58976d9ac04"}, {"code": "(let [calc-len (fn [xs accum]\n                     (if (empty? xs)\n                       accum\n                       (recur (rest xs) (+ accum 1))))]\n      (fn [xs] (calc-len xs 0)))", "problem": 22, "user": "4feaa579e4b0140c20fb9c0b"}, {"code": "#((fn my-count [x i] (if (empty? x) i (my-count (rest x) (+ i 1)))) % 0)", "problem": 22, "user": "52a8d0e6e4b0c58976d9ac37"}, {"code": "#(alength (to-array %1))", "problem": 22, "user": "52a76986e4b0c58976d9ac17"}, {"code": "reduce (fn [s _] (inc s)) 0", "problem": 22, "user": "50c24da6e4b0f056eabae53d"}, {"code": "(fn rec [s]\n  (if (empty? s)\n    0\n    (+ 1 (rec (rest s)))))", "problem": 22, "user": "52aa524fe4b0c58976d9ac64"}, {"code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "problem": 22, "user": "52aa2849e4b0c58976d9ac5e"}, {"code": "(fn[c](reduce(fn[x y](inc x))0 c))", "problem": 22, "user": "52a8a08ce4b0c58976d9ac33"}, {"code": "#(loop [lst % i 0]\n   (if (empty? lst) i (recur (rest lst) (+ i 1))))", "problem": 22, "user": "52aaa079e4b0c58976d9ac67"}, {"code": "(partial reduce (fn [a b] (+ a 1)) 0)", "problem": 22, "user": "52aac2fce4b0c58976d9ac6c"}, {"code": "(fn [coll]\n  (loop [coll coll\n         cnt 0]\n    (if (next coll)\n      (recur (next coll) (+ cnt 1))\n      (+ cnt 1))))", "problem": 22, "user": "52a55adee4b0c58976d9abe7"}, {"code": "(fn [col] (loop [coln col c 0] (if (not(empty? coln)) (recur (next coln) (inc c)) c)))", "problem": 22, "user": "52a62e16e4b0c58976d9abf9"}, {"code": "(fn c [x] (if (= [] x) 0 (+ 1 (c (drop 1 x)))))", "problem": 22, "user": "52aa40bde4b0c58976d9ac60"}, {"code": "(fn [c] (last (map-indexed (fn [index item] (inc index)) c)))", "problem": 22, "user": "52a9b086e4b0c58976d9ac4e"}, {"code": "(fn cnt [coll]\n    (loop [bcoll coll \n           res   0]\n        (if (empty? bcoll)\n            res\n        (recur (rest bcoll) (inc res)))))", "problem": 22, "user": "52aa013de4b0c58976d9ac54"}, {"code": "(fn [s] \n  (loop [acc 0 s s] \n    (if (empty? s) \n      acc\n      (recur (inc acc) (rest s)))))", "problem": 22, "user": "4fa38e3fe4b081705acca190"}, {"code": "#(reduce (fn [a b] (+ a 1)) 0 %)", "problem": 22, "user": "52ab5b03e4b0c58976d9ac74"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "52aab153e4b0c58976d9ac69"}, {"code": "(fn count* [coll]\n  (if (seq coll)\n    (inc (count* (rest coll)))\n    0))", "problem": 22, "user": "52ab6de1e4b0c58976d9ac78"}, {"code": "reduce (fn[c _](inc c)) 0", "problem": 22, "user": "52aabeffe4b0c58976d9ac6b"}, {"code": "#(apply + (map (fn [x] 1) %))", "problem": 22, "user": "52a28e1ce4b04e0c58e87bf0"}, {"code": "(fn [x] ((fn cnt [l c] (let [n (rest l) newCount (+ c 1)] (cond \n                  (empty? n) newCount\n                  :else (cnt n newCount) )\n                )\n) x 0))", "problem": 22, "user": "52ab61f5e4b0c58976d9ac75"}, {"code": "(fn [x] ((fn [x i] (if (= nil (next x)) i (recur (next x) (inc i)) ) ) x 1))", "problem": 22, "user": "52abd555e4b0c58976d9ac7e"}, {"code": "#(reduce (fn [a v] (inc a)) 0 %)", "problem": 22, "user": "52a88c4de4b0c58976d9ac30"}, {"code": "(fn [l] (reduce (fn [x k] (+ x 1)) 0 l))", "problem": 22, "user": "52ad821ae4b0c58976d9ac97"}, {"code": "reduce (fn [n s] (+ 1 n)) 0", "problem": 22, "user": "52ac41fee4b0c58976d9ac85"}, {"code": "(fn [x] (reduce + 0 (map (fn [y] 1) x)))", "problem": 22, "user": "52ada98ae4b0c58976d9ac9a"}, {"code": "#(loop [s % i 0] \n    (if (empty? s)\n      i\n      (recur (next s) (inc i))\n      )\n    )", "problem": 22, "user": "52a7634ae4b0c58976d9ac16"}, {"code": "#(reduce + (map (fn[x] 1) %))", "problem": 22, "user": "52ac9225e4b0c58976d9ac87"}, {"code": "(fn [j] (reduce + (map (fn [x] (+ 1)) j)))", "problem": 22, "user": "52aca6f3e4b0c58976d9ac89"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "52ae1634e4b0c58976d9ac9f"}, {"code": "reduce (fn [c _] (inc c)) 0", "problem": 22, "user": "52ae886de4b0c58976d9acab"}, {"code": "(fn cnt [ls]\n  (if (empty? ls)\n    0\n    (+ 1 (cnt (rest ls)))))", "problem": 22, "user": "52aa4a67e4b0c58976d9ac62"}, {"code": "(fn cnt ([l] (cnt l 0)) ([l n] (if (= l []) n (cnt (rest l) (+ n 1)))))", "problem": 22, "user": "52af0136e4b0c58976d9acb3"}, {"code": "(fn total [s & [p]] (if (= p nil) (total s 0) (if (= (first s) nil) p (total (rest s) (inc p)) )))", "problem": 22, "user": "50ba8247e4b03e68e4411c90"}, {"code": "#(inc (second (last (partition 2 (interleave % (range))))))", "problem": 22, "user": "52a713dbe4b0c58976d9ac0c"}, {"code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "problem": 22, "user": "52af1e2ae4b0c58976d9acb6"}, {"code": "#(reduce (fn [sum _] (+ 1 sum)) 0 %)", "problem": 22, "user": "512b85a7e4b04d059cf1fd15"}, {"code": "reduce (fn [a b] (inc a)) 0", "problem": 22, "user": "52af66d2e4b0c58976d9acba"}, {"code": "#(reduce (fn [n _] (inc n)) 0 %1)", "problem": 22, "user": "50dcb2f4e4b02e6ac9592c91"}, {"code": "(fn[x](\n                    (fn chop [x c] (if (first x)\n                                       (chop (rest x) (inc c))\n                                       c\n                                     )) \n                    x 0\n                    ))", "problem": 22, "user": "52a1edd6e4b04e0c58e87be4"}, {"code": "(fn [sq] (reduce + (mapcat #(replace {% 1} [%]) sq)))", "problem": 22, "user": "52aad30ce4b0c58976d9ac6d"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "52afa8a1e4b0c58976d9acbe"}, {"code": "(fn f[x]\n  (let [ff (fn ff [x n]\n             (if (empty? (rest x))\n               (inc n)\n               (ff (rest x) (inc n))))]\n    (ff x 0)))", "problem": 22, "user": "52b0323ee4b0c58976d9acc6"}, {"code": "(fn [coll] (reduce (fn [m _] (inc m)) 0 coll))", "problem": 22, "user": "52ab51c4e4b0c58976d9ac73"}, {"code": "#(reduce (fn [n _] (inc n)) 0 %)", "problem": 22, "user": "52a9406de4b0c58976d9ac43"}, {"code": ";#(loop [coll % tot 0] (if (nil? (seq coll)) tot (recur (next coll) (+ tot 1))))\n\n#(reduce (fn [n _] (inc n)) 0 %)", "problem": 22, "user": "524f4256e4b0541d1855b808"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "52b11742e4b0c58976d9acd5"}, {"code": "#(reduce  (fn [a, b] (+ a 1)) 0 %)", "problem": 22, "user": "52b091b4e4b0c58976d9accc"}, {"code": "(fn [coll]\n  (loop [c coll\n         cnt 0]\n    (if-not (seq c)\n      cnt\n      (recur (rest c) (inc cnt)))))", "problem": 22, "user": "4ee8b9c9535d93acb0a66884"}, {"code": "(fn l [s]\n  (if (= nil (first s))\n    0\n    (+ 1 \n       (l (rest s)))\n  )\n)", "problem": 22, "user": "52b12804e4b0c58976d9acd7"}, {"code": "(fn [acc , x] \n  (if (empty? x) \n    acc \n  \t(recur (+ 1 acc) (rest x)))) 0", "problem": 22, "user": "5295ed30e4b02ebb4ef75028"}, {"code": "#(reduce +(map (fn [x] 1) % ))", "problem": 22, "user": "505d1b01e4b0e6aca564be04"}, {"code": "(fn count1 \n  ([s] (count1 s 0))\n  ([s n] (if (= '() s) n (count1 (rest s) (+ n 1)))))", "problem": 22, "user": "52b18a74e4b0c58976d9acdf"}, {"code": "reduce (fn [c i] (+ c 1)) 0", "problem": 22, "user": "52a90056e4b0c58976d9ac39"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "52b1d41ce4b0c58976d9ace6"}, {"code": "(partial reduce (fn [xs x] (+ xs 1)) 0)", "problem": 22, "user": "505b0431e4b021387fb8985e"}, {"code": "#(reduce (fn [c v] (inc c)) 0 %)", "problem": 22, "user": "527ba695e4b03e8d9a4a7596"}, {"code": "reduce (fn [m i] (+ m 1)) 0", "problem": 22, "user": "52b19c5de4b0c58976d9ace1"}, {"code": "reduce (fn [c _] (inc c)) 0", "problem": 22, "user": "52b02329e4b0c58976d9acc5"}, {"code": "(fn cnt \n  [xs]\n  (loop [coll xs i 1]\n    (if (nil? (next coll))\n      i\n      (recur (rest coll) (inc i)))))", "problem": 22, "user": "52b2d16ae4b0c58976d9acf8"}, {"code": "#(loop [i %1 c 0]\n   (if(empty? i) c\n     (recur(rest i)(inc c))\n   )\n )", "problem": 22, "user": "527c0509e4b03e8d9a4a75aa"}, {"code": "#(reduce (fn [x y] (+ 1 x)) 0 %)", "problem": 22, "user": "5249a506e4b05ef8e38e646d"}, {"code": "#(reduce (fn [x y] (inc x)) 0 %)", "problem": 22, "user": "52b1ff48e4b0c58976d9ace7"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "524cf3e7e4b0752c4cb68cd1"}, {"code": "(fn f [coll] \n  (if (empty? coll)\n    0\n    (+ 1 (f (rest coll)))))", "problem": 22, "user": "52b3658be4b0c58976d9ad0a"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "52b3959ce4b0c58976d9ad0d"}, {"code": "(fn [s]\n  (loop [se s\n        ac 0]\n     (if (seq se)\n        (recur (rest se) (inc ac))\n        ac)))", "problem": 22, "user": "52470d42e4b05ef8e38e6350"}, {"code": "#(loop [ls %1 n 0]\n   (if (empty? ls) n (recur (rest ls) (inc n))))", "problem": 22, "user": "52b405e1e4b0c58976d9ad15"}, {"code": "(fn  [coll]\n  (loop [c coll n 0]\n    (if (first c)\n      (recur (next c) (inc n))\n      n)))", "problem": 22, "user": "51852961e4b0da5a5be3babb"}, {"code": "(fn [a] ((fn [v n] (if (empty? v) n (recur (rest v) (+ n 1)))) a 0))", "problem": 22, "user": "52b43468e4b0c58976d9ad1b"}, {"code": "(partial reduce (fn [x _] (inc x)) 0)", "problem": 22, "user": "52b453b0e4b0c58976d9ad21"}, {"code": "reduce (fn [x y] (inc x)) 0", "problem": 22, "user": "52b48f04e4b0c58976d9ad29"}, {"code": "#(loop [n % m 0]\n       (if (empty? n)\n         m\n         (recur (rest n) (inc m))))", "problem": 22, "user": "52a9154ee4b0c58976d9ac3b"}, {"code": "#(reduce (fn [accum v] (inc accum)) 0 %1)", "problem": 22, "user": "52b42d7ee4b0c58976d9ad19"}, {"code": "#(reduce (fn  [c _] (inc c)) 0 %)", "problem": 22, "user": "52b5b2d1e4b0c58976d9ad3b"}, {"code": "(fn counter [xs]\n  (cond\n   (= '() xs) 0\n   :else (+ 1 (counter (rest xs)))))", "problem": 22, "user": "52b5edd1e4b0c58976d9ad3c"}, {"code": "(fn [coll] (let [counter (fn [c x] (inc c))] (reduce counter 0 coll)))", "problem": 22, "user": "52b60e94e4b0c58976d9ad3e"}, {"code": "(fn my-count [seq]\n      (if (= nil (first seq))\n        0\n        (+ 1 (my-count (rest seq)))))", "problem": 22, "user": "52b6365de4b0c58976d9ad40"}, {"code": "(fn [x]\n\t(reduce + (map (fn [x] 1)  x))\n  \n)", "problem": 22, "user": "52b66bbae4b0c58976d9ad45"}, {"code": "(fn [x] (inc (val (apply max-key val (zipmap x (range))))))", "problem": 22, "user": "52b666bfe4b0c58976d9ad44"}, {"code": "#(reduce + (map (fn [_] 1) %))", "problem": 22, "user": "52b6b5a7e4b0c58976d9ad4b"}, {"code": "(fn [l]\n  (reduce +\n\t(map (fn [x] 1) l)))", "problem": 22, "user": "52b63b14e4b0c58976d9ad42"}, {"code": "#(reduce (fn [x _] (inc x)) 0 %)", "problem": 22, "user": "52acc552e4b0c58976d9ac8c"}, {"code": "(fn [my-seq] \n              (reduce (fn [c ignored] (inc c) ) 0 my-seq) )", "problem": 22, "user": "52b66d98e4b0c58976d9ad46"}, {"code": "#(reduce (fn [sm x] (+ sm 1)) 0 %)", "problem": 22, "user": "52b65f26e4b0c58976d9ad43"}, {"code": "(fn [seq] (reduce (fn [acc next] (inc acc)) 0 seq))", "problem": 22, "user": "523b4e91e4b07becd5be21ef"}, {"code": "(fn cnt [x] (if (first x) (+ 1 (cnt (rest x))) 0))", "problem": 22, "user": "52b7a904e4b0c58976d9ad51"}, {"code": "#(+ (.lastIndexOf % (if (instance? Character (last %)) (str (last %)) (last %) )) 1)", "problem": 22, "user": "52b79d8ee4b0c58976d9ad50"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "52b14940e4b0c58976d9acdb"}, {"code": "(fn [coll]\n  (loop [xs coll cnt 0]\n    (if (empty? xs)\n      cnt\n      (recur (rest xs) (inc cnt)))))", "problem": 22, "user": "4f3a979de4b0e243712b1f10"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "52a7c82ae4b0c58976d9ac21"}, {"code": "(fn [l] (reduce (fn [acc lst] (+ acc 1)) 0 l))", "problem": 22, "user": "52aa16d1e4b0c58976d9ac5a"}, {"code": "#(reduce (fn [acc _] (inc acc)) 0 %)", "problem": 22, "user": "508f97c0e4b0ea685a20f768"}, {"code": "#(reduce (fn [c i] (+ 1 c)) 0 %)", "problem": 22, "user": "52b33607e4b0c58976d9ad02"}, {"code": "(fn [s]\n  (loop [c 0\n         sq s]\n    (if (empty? sq)\n      c\n      (recur (inc c) (rest sq)))))", "problem": 22, "user": "5019e17ee4b045167281ca68"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "52b80827e4b0c58976d9ad56"}, {"code": "(fn [xs]\n  (loop [xs xs acc 0]\n    (if (empty? xs)\n      acc\n      (recur (rest xs) (+ 1 acc)))))", "problem": 22, "user": "52b8af15e4b07a9af57922b5"}, {"code": "(fn [x] (apply + (map (fn[a] 1) x)))", "problem": 22, "user": "52b8bc3fe4b07a9af57922b6"}, {"code": "#(reduce (fn [x y] (+ x 1)) 0 %)", "problem": 22, "user": "52b2a819e4b0c58976d9acf1"}, {"code": "(fn [x] (inc (first (first (reverse (map-indexed vector x))))))", "problem": 22, "user": "526fce6fe4b03e8d9a4a7383"}, {"code": "(fn counter [ccount somelist] (if( = nil (first somelist)) ccount (counter (inc ccount) (rest somelist)))) 0", "problem": 22, "user": "52b84ad7e4b07a9af57922af"}, {"code": "reduce (fn [v c] (inc v)) 0", "problem": 22, "user": "51995333e4b0aa09cbc0b847"}, {"code": "(fn [xs]\n  (loop [l xs c 0]\n    (if (empty? l)\n      c\n      (recur (rest l) (+ c 1)))))", "problem": 22, "user": "52b9c62ce4b07a9af57922c3"}, {"code": "(fn wuqian-count [s]\n  (if (= nil (first s))\n    0\n    (+ 1 (wuqian-count (rest s)))))", "problem": 22, "user": "52b9cd85e4b07a9af57922c4"}, {"code": "#(loop [x % c 0] (if (nil? x) c (recur (next x) (inc c))))", "problem": 22, "user": "52b9e5c2e4b07a9af57922c8"}, {"code": "(fn [s]\n  (loop [r s, n 0]\n    (if (seq r)\n      (recur (next r) (+ n 1))\n      n)))", "problem": 22, "user": "52b955f8e4b07a9af57922bc"}, {"code": "#(.length (vec %1))", "problem": 22, "user": "52b94f15e4b07a9af57922ba"}, {"code": "#(loop [c %, i 0]\n   (if (= c ())\n     i\n     (recur (rest c) (inc i))))", "problem": 22, "user": "52ba2af3e4b07a9af57922cc"}, {"code": "(fn [s] (loop [c 0 r s]\n          (if (empty? r)\n            c\n            (recur (inc c) (rest r))\n          ))\n  )", "problem": 22, "user": "52ba43d0e4b07a9af57922cd"}, {"code": "(fn _count [x] (if (empty? x) 0 (+ 1 (_count (rest x)))))", "problem": 22, "user": "52ae70c4e4b0c58976d9aca8"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "52b9a836e4b07a9af57922c0"}, {"code": "(fn cnt ([s] (cnt s 0)) ([s n] (if (empty? s) n (recur (rest s) (inc n)))))", "problem": 22, "user": "52bad920e4b07a9af57922d7"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "52b9d5b5e4b07a9af57922c6"}, {"code": "(fn cc[s]\n  (if (empty? s) 0\n    (+ 1 (cc (rest s)))))", "problem": 22, "user": "52b63875e4b0c58976d9ad41"}, {"code": "#(reduce (fn [a b] (inc a)) 0 %)", "problem": 22, "user": "52baefbae4b07a9af57922da"}, {"code": "#(reduce (fn [x _] (inc x)) 0 %)", "problem": 22, "user": "52bb123ae4b07a9af57922de"}, {"code": "(fn [A] \n  ((fn laske [A size] \n     (if (first A) \n       (laske (rest A) (inc size)) \n       size))\n   A 0))", "problem": 22, "user": "52bb2fc0e4b07a9af57922e0"}, {"code": "(fn c [i x] (if (next x)\n          \t\t(c (+ i 1) (next x) )\n              \ti\n              )) 1", "problem": 22, "user": "52bb55e8e4b07a9af57922e3"}, {"code": "(fn a-count [a-seq] \n  (if (empty? a-seq) \n    0\n  (+ 1 (a-count (rest a-seq)))))", "problem": 22, "user": "52bafc88e4b07a9af57922dc"}, {"code": "(fn mysum [s]\n  (if (empty? s)\n    0\n    (+ 1 (mysum (rest s)))))", "problem": 22, "user": "52bb4be0e4b07a9af57922e2"}, {"code": "(fn [coll] (+ 1 (last (map-indexed (fn [i e] i) coll))))", "problem": 22, "user": "52bb81d7e4b07a9af57922e8"}, {"code": "(fn [l] (apply + (map (fn [a] 1) l)))", "problem": 22, "user": "52bb27fee4b07a9af57922df"}, {"code": "(partial reduce (fn [accum coll] (inc accum)) 0)", "problem": 22, "user": "51fda906e4b0f1313d468a4f"}, {"code": "#(reduce (fn[x y] (inc x)) 0 %)", "problem": 22, "user": "4fc50525e4b081705acca370"}, {"code": "#(last (interleave % (iterate inc 1)))", "problem": 22, "user": "52a23af1e4b04e0c58e87beb"}, {"code": "reduce (fn [x y] (+ x 1)) 0", "problem": 22, "user": "52baea85e4b07a9af57922d9"}, {"code": "(fn my-count\n     ([s] (my-count s 0))\n     ([s c] (if (empty? s) c (recur (rest s) (+ c 1)))))", "problem": 22, "user": "52bc6f5ee4b07a9af57922f6"}, {"code": "(fn [s]\n  (loop [rests s c 0]\n    (if (= () rests)\n      c\n      (recur (rest rests) (inc c)))))", "problem": 22, "user": "4ff505c8e4b0678c553fc364"}, {"code": "(fn c\n   ([v] (c v 0))\n   ([v nn]\n      (if (empty? v)\n        nn\n        (c (rest v) (+ nn 1)))))", "problem": 22, "user": "50b09833e4b009df37c708bd"}, {"code": "(fn [s]\n  (loop [cnt 0 s s]\n    (if (empty? s)\n      cnt\n      (recur (inc cnt) (rest s)))))", "problem": 22, "user": "50772e6ae4b0fc74642bff5d"}, {"code": "#(reduce (fn [c _] (inc c)) 0 %)", "problem": 22, "user": "52bc7ea6e4b07a9af57922f7"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "52bcf698e4b07a9af57922fe"}, {"code": "(fn cs [coll] \n  (reduce (fn [x y] (+ x 1)) 0 coll))", "problem": 22, "user": "51ea4e35e4b0f1f103a0d148"}, {"code": "#(loop [vec %\n         i\t 1]\n   (if (next vec)\n     (recur (next vec)\n            (inc i))\n     i))", "problem": 22, "user": "52b9cfb9e4b07a9af57922c5"}, {"code": "(fn [x] (apply + (map #(do % 1 1 1 ) x)))", "problem": 22, "user": "52b49aebe4b0c58976d9ad2b"}, {"code": "(fn [d]\n      (reduce (fn [pre i] (inc pre)) 0 d)\n      )", "problem": 22, "user": "52bbe6e1e4b07a9af57922ef"}, {"code": "#(\n  (fn r [x y]\n    (if (empty? x)\n      y\n      (r (rest x) (inc y)))\n  ) % 0\n)", "problem": 22, "user": "52bdd135e4b07a9af579230a"}, {"code": "#(.size (seq %))", "problem": 22, "user": "52bdb689e4b07a9af5792306"}, {"code": "(fn self[l]\n (if (empty? l)\n  0\n  (inc(self (rest l)))\n )\n )", "problem": 22, "user": "52ba447ee4b07a9af57922ce"}, {"code": "(fn [lst] (reduce (fn [x _] (inc x)) 0 lst))", "problem": 22, "user": "52bdf6bde4b07a9af579230d"}, {"code": "#(reduce (fn [c _] (inc c)) 0 %)", "problem": 22, "user": "52bb7f3de4b07a9af57922e7"}, {"code": "(fn [l] \n  (reduce (fn [x y] (+ x 1))\n          0 l))", "problem": 22, "user": "52be4347e4b07a9af579231b"}, {"code": "#(reduce + (map (constantly 1 )%))", "problem": 22, "user": "52be404ee4b07a9af579231a"}, {"code": "#(loop [s %1\n        c 0]\n   (if (seq s)\n     (recur (rest s) (inc c))\n     c))", "problem": 22, "user": "52be5d55e4b07a9af579231e"}, {"code": "#(reduce + (map ( fn [x] 1) %))", "problem": 22, "user": "52bb7d66e4b07a9af57922e6"}, {"code": "(fn [coll] (reduce (fn [x y] (inc x)) 0 coll))", "problem": 22, "user": "52be5dd4e4b07a9af579231f"}, {"code": "(fn len [x] (if (= x []) 0 (+ 1 (len (rest x)))))", "problem": 22, "user": "52bebdbfe4b07a9af5792326"}, {"code": "(fn [s] \n    (apply + \n           (map \n            (fn [x y] \n               (+ y)) s (repeat 1))))", "problem": 22, "user": "52bda384e4b07a9af5792305"}, {"code": "(comp (memfn size) seq)", "problem": 22, "user": "52bef782e4b07a9af5792327"}, {"code": "#(+ 1 (.lastIndexOf (seq %1) (last %1)))", "problem": 22, "user": "52b7438ae4b0c58976d9ad4e"}, {"code": "(fn [xs] \n  (loop [s 0 t xs]\n    (if (seq t) (recur (inc s) (rest t)) s)\n  )\n)", "problem": 22, "user": "52bf29fde4b07a9af579232e"}, {"code": "#(reduce (fn [t d] (+ 1 t)) 0 %)", "problem": 22, "user": "52b577c9e4b0c58976d9ad39"}, {"code": "(fn [group]\n\t(loop [items 0 group group]\n      (if (seq group)\n        (recur (inc items) (rest group))\n        items)\n      )\n  )", "problem": 22, "user": "52be23dbe4b07a9af5792316"}, {"code": "(fn jcount \n  ([s] (jcount s 0))\n  ([s c] (if (empty? s)\n           c\n           (jcount (rest s) (inc c))\n         )\n  )\n)", "problem": 22, "user": "52bf936ee4b07a9af579233b"}, {"code": "#(reduce (fn [acc _] (+ 1 acc)) 0 %)", "problem": 22, "user": "52bf8e35e4b07a9af579233a"}, {"code": "#(reduce (fn [x y] (inc x)) 0 %)", "problem": 22, "user": "52bf6946e4b07a9af5792334"}, {"code": "(fn\n  [l]\n  (reduce (fn [n _] (inc n)) 0 l)\n  )", "problem": 22, "user": "52c00263e4b07a9af579233f"}, {"code": "(fn count-seq [x] \n  (loop [cnt 0 xseq x]\n    (if (= (seq xseq) nil)\n      cnt\n      (recur (+ cnt 1) (rest xseq)))))", "problem": 22, "user": "52c0101fe4b07a9af5792343"}, {"code": "#(apply + (map (fn [x] 1) %))", "problem": 22, "user": "52c07415e4b07a9af579234d"}, {"code": "(fn counter [s] \n  ((fn counter-acc [s n] \n      (if (= nil (next (seq s))) \n        (+ 1 n) \n        (counter-acc (rest (seq s)) (+ 1 n))\n      )\n  ) s 0)\n)", "problem": 22, "user": "52c10ad2e4b07a9af579235c"}, {"code": "(partial reduce (fn [x _] (inc x)) 0)", "problem": 22, "user": "5167d60de4b0c5a4140a3098"}, {"code": "#(reduce (fn[x y](inc x)) 0 %)", "problem": 22, "user": "52c1bd29e4b07a9af579236a"}, {"code": "(fn [coll] (reduce (fn [a b] (+ a 1)) 0 coll))", "problem": 22, "user": "52c23344e4b07a9af5792379"}, {"code": "#(reduce (fn [c _] (inc c)) 0 %)", "problem": 22, "user": "52c1cc8be4b07a9af579236b"}, {"code": "#(loop [lst %\n         acc 0]\n    (if (empty? lst) acc\n        (recur (rest lst) (+ acc 1))))", "problem": 22, "user": "52c25645e4b07a9af579237d"}, {"code": "reduce (fn [a b] (+ 1 a)) 0", "problem": 22, "user": "5295fbb7e4b02ebb4ef75029"}, {"code": "(fn [lst] \n    (let [c (fn counter [lst n] (cond (empty? lst) n true (counter (rest lst) (+ n 1))))] \n        (c lst 0)\n    )\n)", "problem": 22, "user": "52c17e42e4b07a9af5792367"}, {"code": "(fn count2 [l]\n  (if (empty? l)\n    0\n    (inc (count2 (rest l)))))", "problem": 22, "user": "52c2f10de4b07a9af5792386"}, {"code": "(fn [x] (reduce + (replace '{nil 1} (map {} (vec x)))))", "problem": 22, "user": "52bf33c2e4b07a9af579232f"}, {"code": "(fn [x]\n  ((fn lp [counter tail] \n    (if \n      (empty? tail) \n      \tcounter \n        (recur \n          (+ 1 counter) \n          (rest tail))))\n  \n  \n  0 x))", "problem": 22, "user": "52c2eb29e4b07a9af5792385"}, {"code": "#(reduce (fn [x _] (+ 1 x)) 0 %)", "problem": 22, "user": "52be0cc8e4b07a9af5792312"}, {"code": "(fn [col] ((fn length2 [col c] (if (empty? col) c (length2 (rest col) (inc c)))) col 0))", "problem": 22, "user": "52b9b86ee4b07a9af57922c1"}, {"code": "(fn step [seq] (if (empty? seq) 0  (+ 1 (step (rest seq))) ))", "problem": 22, "user": "52c35afce4b07a9af579238c"}, {"code": "#(reduce (fn [acc nn] (inc acc)) 0 %1)", "problem": 22, "user": "508147cde4b0a20aab17b93a"}, {"code": "#(reduce (fn [c _] (inc c)) 0 %)", "problem": 22, "user": "52c2d900e4b07a9af5792382"}, {"code": "(fn countOf [xs] (if (empty? xs) 0 (+ 1 (countOf (rest xs)))))", "problem": 22, "user": "52c42f6be4b0c2d177d620d1"}, {"code": "#(reduce + (map (fn [x] 1) %) )", "problem": 22, "user": "52c42bc2e4b0c2d177d620d0"}, {"code": "#(reduce (fn [a b] (+ a 1)) 0 %)", "problem": 22, "user": "52c46e7fe4b0c2d177d620da"}, {"code": "#(last (interleave % (iterate inc 1)))", "problem": 22, "user": "52c1f404e4b07a9af5792370"}, {"code": "#(reduce + (map (fn [$] 1) %))", "problem": 22, "user": "52c4580fe4b0c2d177d620d8"}, {"code": "(partial reduce (fn [x _] (inc x)) 0)", "problem": 22, "user": "52c4756fe4b0c2d177d620db"}, {"code": "(fn [seq]\n  (loop [s seq c 0]\n    (if (empty? s)\n      c\n      (recur (rest s) (inc c)))))", "problem": 22, "user": "52897300e4b0239c8a67ae65"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "52c1ef8fe4b07a9af579236e"}, {"code": "reduce (fn [i _] (+ 1 i)) 0", "problem": 22, "user": "52c4af71e4b0c2d177d620e1"}, {"code": "#(reduce (fn[x y] (inc x)) 0 %1)", "problem": 22, "user": "52c4cb2fe4b0c2d177d620e5"}, {"code": "(fn [x] (loop [series x\n               counter 0]\n          (if (empty? (next series))\n            (inc counter)\n            (recur (next series) (inc counter)))))", "problem": 22, "user": "52c4789ee4b0c2d177d620dc"}, {"code": "(fn len [seq]\n  (or (and (empty? seq) 0)\n      (+ 1 (len (rest seq)))))", "problem": 22, "user": "52c4d327e4b0c2d177d620e6"}, {"code": "(fn [n]\n    (loop [xs n acc 0]\n       (if (empty? xs)\n            acc\n          (recur (rest xs) (inc acc)))))", "problem": 22, "user": "4f659386e4b07046d9f4ef44"}, {"code": "#(reduce + 0 (map (fn [x] 1) %))", "problem": 22, "user": "515bbcd9e4b0388ca8ca1521"}, {"code": "(fn [lst & n]\n  (let [n (if (nil? n) 0 n)]\n    (if (empty? lst)\n      n\n      (recur (rest lst) (+ n 1)))\n  ))", "problem": 22, "user": "52c2ff59e4b07a9af5792389"}, {"code": "(fn ! [s] (if (empty? s) 0 (+ 1 (! (rest s)))))", "problem": 22, "user": "52c3b3e5e4b0c2d177d620c8"}, {"code": "(fn [lst] (reduce + (map (fn [z] (inc 0)) lst)))", "problem": 22, "user": "52c3c689e4b0c2d177d620c9"}, {"code": "(fn [k] (reduce + (map (fn [x] 1) k)))", "problem": 22, "user": "52c52ef2e4b0c2d177d620ef"}, {"code": "(fn my-count [s] (reduce (fn [i x] (+ 1 i)) 0 s))", "problem": 22, "user": "52c4fe42e4b0c2d177d620e9"}, {"code": "(fn my-count [coll] \n  (if (empty? coll)\n    0\n    (inc (my-count (rest coll)))\n  )\n)", "problem": 22, "user": "52be0c48e4b07a9af5792311"}, {"code": "(fn [param] (.size (vec param)))", "problem": 22, "user": "52c57371e4b0c2d177d620f3"}, {"code": "(fn [v] (.size (vec v)))", "problem": 22, "user": "52946307e4b02ebb4ef7500a"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "52c5a9c5e4b0c2d177d620f9"}, {"code": "#(reduce (fn [cnt new] (+ cnt 1)) 0 %)", "problem": 22, "user": "51583ee4e4b0a069fd272c72"}, {"code": "(fn [y] (reduce (fn [v, x] (+ v 1)) 0 y))", "problem": 22, "user": "52c61564e4b0c2d177d62109"}, {"code": "(fn count-seq [vctr] \n  (loop [cnt 0]\n  (let [val (nth vctr cnt nil)]\n  (if (= val nil) cnt\n  (recur (inc cnt))))))", "problem": 22, "user": "52c3a0f4e4b0c2d177d620c6"}, {"code": "(fn [coll]\n    (reduce + (map (fn [x] (if nil? x) 0 1) coll)))", "problem": 22, "user": "52c58440e4b0c2d177d620f7"}, {"code": "(fn mycount\n  ([xs] (mycount xs 0))\n  ([xs n]\n   (if (empty? xs)\n     n\n     (mycount (rest xs) (inc n)))))", "problem": 22, "user": "52c58561e4b0c2d177d620f8"}, {"code": "(fn ct [xs]\n  (if (empty? xs)\n    0\n    (+ 1 (ct (rest xs)))\n  )\n)", "problem": 22, "user": "52c3dffee4b0c2d177d620cb"}, {"code": "#(loop [s % n 0]\n  (if (empty? s)\n    n\n    (recur (rest s) (inc n))\n    )\n  )", "problem": 22, "user": "52c580c2e4b0c2d177d620f5"}, {"code": "#(reduce (fn [a & b] (+ 1 a)) 0 %)", "problem": 22, "user": "52c6a0abe4b0c2d177d62111"}, {"code": "#(reduce (fn [i j] (+ i 1)) 0 %)", "problem": 22, "user": "522635c0e4b06a1ecd0c4e7e"}, {"code": "(fn this [xs] (if (empty? xs) 0 (inc (this (rest xs)))))", "problem": 22, "user": "52c6f1f3e4b0c2d177d62117"}, {"code": "#(last (interleave % (iterate inc 1)))", "problem": 22, "user": "52bbd09ee4b07a9af57922ee"}, {"code": "reduce (fn [a _] (inc a)) 0", "problem": 22, "user": "52c73194e4b0c2d177d6211e"}, {"code": "#(reduce (fn [val _] (inc val)) 0 %)", "problem": 22, "user": "52c69672e4b0c2d177d62110"}, {"code": "(fn [coll] (reduce + (map (constantly 1) coll)))", "problem": 22, "user": "52c7399be4b0c2d177d6211f"}, {"code": "(fn [x]\n  (loop [total 0 \n         x x]\n    (if (empty? x) total\n      (recur (inc total) (rest x)))\n    )\n  )", "problem": 22, "user": "51a2569ee4b00957e520db7d"}, {"code": "#(alength (to-array %))", "problem": 22, "user": "52c682cce4b0c2d177d6210f"}, {"code": "#(reduce (fn [accum _] (inc accum)) 0 %)", "problem": 22, "user": "5215661be4b02f6d8ea676c7"}, {"code": "#(+ (.lastIndexOf (vec %) (peek (vec %))) 1)", "problem": 22, "user": "52c6e646e4b0c2d177d62115"}, {"code": "(fn [s]\n  (reduce (fn [x y] (+ 1 x)) 0 s))", "problem": 22, "user": "527ce61de4b0757a1b171374"}, {"code": "(fn mycount [a]\n  (if (empty? a)\n    0\n    (+ 1 (mycount (rest a)))))", "problem": 22, "user": "52c7f036e4b0c2d177d62126"}, {"code": "(fn ccount [list] (if (empty? list) 0 (+ 1 (ccount (rest list)))))", "problem": 22, "user": "52c804dee4b0c2d177d6212b"}, {"code": "(partial reduce (fn [acc x] (inc acc)) 0)", "problem": 22, "user": "52c6f6dee4b0c2d177d62118"}, {"code": "(fn [x]\n  (loop [l x c 0]\n    (if (empty? l)\n      c\n      (recur (rest l) (inc c)))))", "problem": 22, "user": "52c81954e4b0c2d177d6212e"}, {"code": "(fn cnt [s]\n  (if (= s [])\n  \t0\n    (inc (cnt (rest s)))\n  )\n)", "problem": 22, "user": "52c872b6e4b0c2d177d62134"}, {"code": "#(reduce (fn [a _] (inc a)) 0 %)", "problem": 22, "user": "52be58d7e4b07a9af579231d"}, {"code": "#(reduce (fn [x y] (inc x)) 0 %)", "problem": 22, "user": "52c915a6e4b0c2d177d6213b"}, {"code": "(fn [s]\n  (reduce (fn [cnt _] (inc cnt)) 0 (seq s)))", "problem": 22, "user": "52c884a2e4b0c2d177d62136"}, {"code": "(fn seqcount\n  ([sq] (seqcount sq 0))\n  ([sq n] (if (= sq nil) n \n            (recur (next sq) (inc n)))))", "problem": 22, "user": "52b43708e4b0c58976d9ad1d"}, {"code": "(fn my-len [x] \n  (reduce + \n    (map (fn [y] 1) x)\n  )\n)", "problem": 22, "user": "52c7fce9e4b0c2d177d6212a"}, {"code": "(fn ff [x] (if (seq x) (inc (ff (rest x))) 0))", "problem": 22, "user": "52bd9cb7e4b07a9af5792304"}, {"code": "#(loop [n 0 l %]\n    (if (empty? l)\n      n\n      (recur (inc n) (rest l))))", "problem": 22, "user": "52c672e2e4b0c2d177d6210e"}, {"code": "#(reduce (fn [c _] (inc c)) 0 %)", "problem": 22, "user": "52c1ede2e4b07a9af579236d"}, {"code": "(fn count-seq [_seq] \n  (+ \n   (if \n   \t(nil? (first _seq)) 0 1) \n   (if \n   \t(empty? (rest _seq)) 0 (count-seq (rest _seq)))\n  )\n)", "problem": 22, "user": "52c60844e4b0c2d177d62106"}, {"code": "(fn [s] (reduce + (map (constantly 1) s)))", "problem": 22, "user": "52b5137de4b0c58976d9ad36"}, {"code": "(fn [coll] (reduce + (map (fn [x] 1) coll)))", "problem": 22, "user": "52cab37be4b071a8d36bd3e6"}, {"code": "(fn conta [s]\n  (if (nil? (next s))\n    1\n    (+ 1 (conta (next s)))))", "problem": 22, "user": "52c8758be4b0c2d177d62135"}, {"code": "#(reduce (fn [x _] (+ x 1)) 0 %)", "problem": 22, "user": "52caeb25e4b071a8d36bd3e7"}, {"code": "reduce (fn [x y] (inc x)) 0", "problem": 22, "user": "52caaeade4b071a8d36bd3e5"}, {"code": "reduce #(if %2 (inc %1)) 0", "problem": 22, "user": "52bc6cb2e4b07a9af57922f5"}, {"code": "(fn [collection] (reduce (fn [x y](+ 1 x)) 0 collection))", "problem": 22, "user": "52b20257e4b0c58976d9ace8"}, {"code": "(fn [lst] \n  (let [count+ (fn [lst acc] (if (seq (rest lst)) (recur (rest lst) (+ 1 acc)) acc))]       \n    (count+ lst 1)\n  ))", "problem": 22, "user": "5268a013e4b03e8d9a4a71b0"}, {"code": "reduce (fn [c _] (inc c)) 0", "problem": 22, "user": "52c8a814e4b0c2d177d62138"}, {"code": "#(loop [coll % cnt 0]\n                   (if (empty? coll) cnt\n                     (recur (rest coll)(inc cnt))))", "problem": 22, "user": "52cbf89ee4b07d0d72b27354"}, {"code": "(partial reduce (fn [acc _] (+ 1 acc)) 0)", "problem": 22, "user": "52cc09c1e4b07d0d72b27356"}, {"code": "(\n  fn my-count [l] (\n    if (empty? l) 0 (+ 1 (my-count (rest l)))\n  )\n)", "problem": 22, "user": "52cbe910e4b07d0d72b27353"}, {"code": "#(reduce (fn [a b] (+ a 1)) 0 %)", "problem": 22, "user": "52b467b0e4b0c58976d9ad24"}, {"code": "(fn [items] (reduce (fn [x y] (+ x 1)) 0 items))", "problem": 22, "user": "527c9c08e4b0757a1b171366"}, {"code": "#(apply + (map (constantly 1) %))", "problem": 22, "user": "52ca720fe4b071a8d36bd3e2"}, {"code": "#(loop [i 0, coll %]\n    (if (seq coll)\n      (recur (inc i) (rest coll))\n      i))", "problem": 22, "user": "52cb6bb0e4b07d0d72b2734c"}, {"code": "reduce (fn [x y] (inc x)) 0\n\n;;(fn my-count [coll]\n;;  (loop [c coll cnt 0]\n;;    (if (= '() (rest c))\n;;      (inc cnt)\n;;      (recur (rest c) (inc cnt)))))", "problem": 22, "user": "52c5c1c8e4b0c2d177d620fc"}, {"code": "#(reduce (fn [x y] (+ 1 x)) 0 %)", "problem": 22, "user": "52cc85abe4b07d0d72b27367"}, {"code": "(fn [coll]\n  (loop [coll coll cnt 0]\n    (if-not (seq coll) \n       cnt\n       (recur (rest coll) (inc cnt)))))", "problem": 22, "user": "52cca65be4b07d0d72b2736b"}, {"code": "(fn [l]\n  (reduce (fn [acc l] (inc acc)) 0 l))", "problem": 22, "user": "52ccc231e4b07d0d72b27370"}, {"code": "(fn [vs] (reduce (fn [x y] (+ x 1)) 0 vs))", "problem": 22, "user": "50a635bbe4b0aa96157e2621"}, {"code": "#(reduce \n    (fn [coll _] (inc coll))\n     0 %)", "problem": 22, "user": "52cbe5dfe4b07d0d72b27352"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "52c0e3d1e4b07a9af5792358"}, {"code": "(letfn [(cnt [lst acc] \n             (if (empty? lst) \n               acc \n               (recur (rest lst) (inc acc)))\n        )]\n      #(cnt % 0)\n  )", "problem": 22, "user": "52cd1ed0e4b07d0d72b27377"}, {"code": "(fn foo [x] (if (nil? (first x)) 0 (+ 1 (foo (rest x)))))", "problem": 22, "user": "52cc92e9e4b07d0d72b27368"}, {"code": "(fn [s] \n  ((fn [x y] \n    (if (next x)\n      (recur (next x) (+ y 1))\n      (+ y 1))) \n   s 0))", "problem": 22, "user": "52cdc539e4b07d0d72b2737e"}, {"code": "(fn [x]\n  (loop [x x c 0]\n    (if (empty? x)\n      c\n      (recur (rest x) (inc c)))))", "problem": 22, "user": "52cdc676e4b07d0d72b2737f"}, {"code": "(fn [c1]\n  (let [s1 (seq c1)]\n    (loop [s1 s1\n           num 0]\n      (if (empty? s1)\n        num\n        (recur (rest s1) (+ num 1))))))", "problem": 22, "user": "52c1566fe4b07a9af5792364"}, {"code": "reduce (fn [a n] (inc a)) 0", "problem": 22, "user": "52ce2aace4b07d0d72b2738b"}, {"code": "(fn mycount [x] (if (not-empty x) (+ 1 (mycount (rest x))) 0))", "problem": 22, "user": "52cd882ee4b07d0d72b27378"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "52ce1abfe4b07d0d72b27389"}, {"code": "(fn my-count\n  [xs]\n  (if (= xs (empty xs))\n    0\n    (+ 1 (my-count (rest xs)))))", "problem": 22, "user": "52ce5056e4b07d0d72b2738f"}, {"code": "#(apply + (map (fn [n] 1) %))", "problem": 22, "user": "526698c9e4b03e8d9a4a7144"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "52cd093fe4b07d0d72b27376"}, {"code": "#(reduce (fn [c x] (inc c)) 0 % )", "problem": 22, "user": "52cdb7efe4b07d0d72b2737c"}, {"code": "(fn [x] (reduce #(+ %1 %2) (map (fn [z] 1) x)))", "problem": 22, "user": "52ce8648e4b07d0d72b27390"}, {"code": "(fn [lst]\n  (reduce (fn [acc arg] (inc acc)) 0 lst))", "problem": 22, "user": "52cee992e4b07d0d72b27395"}, {"code": "(fn cunt [x]\n  (if (not (empty? x))\n    (+ (cunt (rest x)) 1)\n    0\n    )\n  )", "problem": 22, "user": "52cefb7ee4b07d0d72b27397"}, {"code": "(comp (partial reduce +) (partial map (fn [i] 1)))", "problem": 22, "user": "52cdef59e4b07d0d72b27384"}, {"code": "(fn f [[h & t]]\n  (if h\n    (+ 1 (f t))\n    0))", "problem": 22, "user": "52bacfa8e4b07a9af57922d6"}, {"code": "#(reduce (fn[x y] (inc x)) 0 %)", "problem": 22, "user": "52cf25cae4b07d0d72b2739e"}, {"code": "#(reduce + (map (fn [_] 1) %))", "problem": 22, "user": "52cf1e25e4b07d0d72b2739c"}, {"code": "(fn [seq]\n  (reduce\n    (fn [val item]\n      (+ val 1)\n    )\n    0 seq))", "problem": 22, "user": "52cf2b96e4b07d0d72b273a0"}, {"code": "#(->> % (map (fn[x] 1)) (apply +))", "problem": 22, "user": "52c60945e4b0c2d177d62108"}, {"code": "#(reduce + (map (fn [_] 1) %))", "problem": 22, "user": "52cf5450e4b07d0d72b273a4"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "52cc582ae4b07d0d72b27362"}, {"code": "(fn [xs]\n  (loop [xs xs c 0]\n    (if (empty? xs) c (recur (rest xs) (+ 1 c)))))", "problem": 22, "user": "5110249ae4b04c71fce993ea"}, {"code": "#(reduce (fn [x _] (+ 1 x)) 0 %)", "problem": 22, "user": "52ced458e4b07d0d72b27394"}, {"code": "#(loop [s % c 0]\n \t(if (empty? s) \n      c\n      (recur (rest s) (inc c)\n     )))", "problem": 22, "user": "5094057fe4b097f48cc38593"}, {"code": "#(let [cnt (fn [coll len] (if (empty? coll) len (recur (rest coll) (inc len))))] (cnt % 0))", "problem": 22, "user": "52cfe059e4b07d0d72b273af"}, {"code": "(fn [sec]\n  (loop [s sec, c 0]\n  \t(if (empty? s)\n      c\n      (recur (rest s) (inc c)))))", "problem": 22, "user": "525523e3e4b0541d1855b9cc"}, {"code": "(fn my-count [coll] (loop [c coll\n                           x 1]\n                      (if (next c) (recur (next c) (inc x)) x) ))", "problem": 22, "user": "52cb19abe4b07d0d72b27348"}, {"code": "(fn [seq] (reduce + (map (fn [x] 1) seq)))", "problem": 22, "user": "52cffe31e4b07d0d72b273b2"}, {"code": "#(reduce (fn  [x y] (inc x)) 0 %)", "problem": 22, "user": "51c22a95e4b0d204dbe2ca1e"}, {"code": "#(\n  loop [seq %1 cnt 0]\n    (if seq\n      (recur (next seq) (inc cnt))\n      cnt)\n  )", "problem": 22, "user": "52d079f2e4b07d0d72b273ba"}, {"code": "(fn [%1]                                                                                                                                              \n        (loop [x %1 i 1]                                                                                                                                    \n          (if (= nil (second x))                                                                                                                            \n            i                                                                                                                                               \n            (recur (rest x) (inc i)))))", "problem": 22, "user": "52a3c66ce4b04e0c58e87c04"}, {"code": "reduce (fn [x _] (inc x)) 0", "problem": 22, "user": "52d0902ee4b07d0d72b273bd"}, {"code": "#(reduce (fn [cntr coll] (inc cntr)) 0 %1)", "problem": 22, "user": "52ce165fe4b07d0d72b27388"}, {"code": "(fn [s]\n ((fn [s n]\n  (if (nil? s)\n    n\n    (recur (next s) (inc n)))) s 0))", "problem": 22, "user": "52ce4cafe4b07d0d72b2738e"}, {"code": "reduce (fn [x y] (inc x)) 0", "problem": 22, "user": "52d10680e4b07d0d72b273c3"}, {"code": "(fn [s] \n  (reduce + (map (fn [x] 1) s)))", "problem": 22, "user": "52d08e7ce4b07d0d72b273bc"}, {"code": "(fn [c] (apply + \n                (map #(if % 1 1) c)))", "problem": 22, "user": "52d07cc5e4b07d0d72b273bb"}, {"code": "#(reduce (fn [i _] (inc i)) 0 %)", "problem": 22, "user": "52d00832e4b07d0d72b273b4"}, {"code": "#(apply + (map (fn[x] 1) %))", "problem": 22, "user": "528a8151e4b0239c8a67ae7a"}, {"code": "(fn [s] (reduce + (map (fn [a] 1) s)))", "problem": 22, "user": "52d1a29fe4b0d9f9285948e0"}, {"code": "(fn [x]\n  (loop [thelist x counter 0]\n    (if (empty? thelist)\n    \tcounter\n    (recur (rest thelist) (inc counter))\n    )))", "problem": 22, "user": "52cc7c40e4b07d0d72b27364"}, {"code": "(fn [w] (reduce + (map (fn [n] 1) w)))", "problem": 22, "user": "52d17182e4b0d9f9285948dd"}, {"code": "#(reduce (fn [x _] (inc x)) 0 %)", "problem": 22, "user": "52d1cb55e4b0d9f9285948e5"}, {"code": "(fn rec [l]\n  (let [n (rest l)]\n    (if (empty? n) 1 (+ 1 (rec n)))))", "problem": 22, "user": "52d1e364e4b0d9f9285948e7"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "526b49fbe4b03e8d9a4a7250"}, {"code": "(fn mycount [[x & xs]]\n  (if x (+ 1 (mycount xs))\n     0))", "problem": 22, "user": "52ccc2bde4b07d0d72b27371"}, {"code": "#(reduce (fn [i _] (inc i)) 0 %)", "problem": 22, "user": "52d23a39e4b099d49816f0a6"}, {"code": "(fn [coll]\n  (loop [coll2 coll, result 0]\n    (if (empty? coll2)\n      result\n      (recur (rest coll2) (inc result)))))", "problem": 22, "user": "52cf084ce4b07d0d72b27399"}, {"code": "(fn [c] (reduce (fn [a i] (inc a)) 0 (seq c)))", "problem": 22, "user": "52d0fadce4b07d0d72b273c0"}, {"code": "#( reduce + (map ( fn [x] 1) %))", "problem": 22, "user": "52d00a05e4b07d0d72b273b5"}, {"code": "reduce (fn [a _] (inc a)) 0", "problem": 22, "user": "52d2ca1ce4b099d49816f0b4"}, {"code": "reduce (fn [i x] (+ i 1)) 0", "problem": 22, "user": "52d28bade4b099d49816f0ad"}, {"code": "reduce (fn [m _] (inc m)) 0", "problem": 22, "user": "52d2e54ae4b099d49816f0b9"}, {"code": "reduce (fn [x _] (inc x)) 0", "problem": 22, "user": "52b35a6ee4b0c58976d9ad07"}, {"code": "reduce (fn [m i] (inc m)) 0", "problem": 22, "user": "52d32d29e4b099d49816f0be"}, {"code": "#(loop [s %1 n 0] (if (empty? s) n (recur (rest s) (inc n))))", "problem": 22, "user": "52d340ebe4b099d49816f0c1"}, {"code": "#(reduce + 0 (map (constantly 1) %1))", "problem": 22, "user": "52d33ac5e4b099d49816f0c0"}, {"code": "#(reduce (fn [st el] (+ st 1)) 0 %)", "problem": 22, "user": "52cc4fd6e4b07d0d72b27360"}, {"code": "#(reduce (fn[x y] (inc x)) 0 %)", "problem": 22, "user": "52d02380e4b07d0d72b273b7"}, {"code": "reduce (fn [a b] (inc a)) 0", "problem": 22, "user": "52d39acce4b099d49816f0c7"}, {"code": "#(let [a %]\n(loop [cnt 0 lst a]\n  (if (nil? (seq lst))\n  cnt\n   (recur (inc cnt) (rest lst)))))", "problem": 22, "user": "52d36f60e4b099d49816f0c2"}, {"code": "(partial reduce (fn [c, _] (inc c)) 0)", "problem": 22, "user": "52d4004ae4b09f7907dd1328"}, {"code": "(comp (partial apply + ) (partial map (constantly 1)))", "problem": 22, "user": "52ce4c32e4b07d0d72b2738d"}, {"code": "#(apply + (map (constantly 1) %))", "problem": 22, "user": "51b41150e4b0f094dd986fac"}, {"code": "(fn foo[xs] (+ 1 (if (empty? xs) -1 (foo (rest xs)))))", "problem": 22, "user": "52d3f666e4b09f7907dd1327"}, {"code": "#(reduce (fn [x _] (inc x)) 0 %)", "problem": 22, "user": "52d469c8e4b09f7907dd1330"}, {"code": "#(reduce (fn [i _] (inc i)) 0 %)", "problem": 22, "user": "52d2b85ce4b099d49816f0af"}, {"code": "(fn [coll]\n  (let [plus-one (fn [acc _] (+ acc 1))]\n    (reduce plus-one 0 coll)))", "problem": 22, "user": "527aba40e4b03e8d9a4a7565"}, {"code": "(fn [se] (reduce (fn [el se] (inc el)) 0 se))", "problem": 22, "user": "52d45010e4b09f7907dd132d"}, {"code": "#(reduce (fn[x y] (inc x)) 0 %)", "problem": 22, "user": "52d51024e4b09f7907dd1339"}, {"code": "(fn [coll]\n  ((fn [coll cnt]\n    (if (= '() coll) \n      cnt\n      (recur (rest coll) (+ cnt 1))\n    )\n   ) coll 0))", "problem": 22, "user": "52d51535e4b09f7907dd133a"}, {"code": "#(reduce + (map (fn[x] 1) (vec %)))", "problem": 22, "user": "52d49445e4b09f7907dd1332"}, {"code": "reduce (fn [a b] (inc a)) 0", "problem": 22, "user": "52d5907ee4b09f7907dd1341"}, {"code": "#(loop [c 0 l %] (if (empty? l) c (recur (inc c) (rest l))))", "problem": 22, "user": "500e7063e4b04a05d36fcc07"}, {"code": "#(loop [x % cnt 0]\n    (if (nil? (first x)) cnt\n      (recur (rest x) (+ cnt 1))))", "problem": 22, "user": "52cdec62e4b07d0d72b27382"}, {"code": "#(loop [col %\n        x 0]\n   (if (empty? col)\n     x\n     (recur (rest col) (inc x))))", "problem": 22, "user": "52d6120ee4b09f7907dd134c"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "52d4acc8e4b09f7907dd1333"}, {"code": "(fn cnt ([l] (cnt l 0)) ([l c] (if (seq l) (cnt (drop 1 l) (inc c)) c)))", "problem": 22, "user": "52d63e89e4b09f7907dd134e"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "50f95755e4b0e7c80cb15a4b"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "52d65373e4b09f7907dd1350"}, {"code": "(fn [s] (reduce (fn [a _] (inc a)) 0 s))", "problem": 22, "user": "52d532a3e4b09f7907dd133e"}, {"code": "(fn count-items [l] (if (nil? (first l)) 0 (+ 1 (count-items (rest l)))))", "problem": 22, "user": "52d6889ae4b09f7907dd1361"}, {"code": "reduce (fn[x y](+ x 1)) 0", "problem": 22, "user": "5224cf82e4b01819a2de42ef"}, {"code": "(fn [xs] (reduce (fn [x y] (+ 1 x)) 0 xs))", "problem": 22, "user": "52d00521e4b07d0d72b273b3"}, {"code": "#(reduce\n  +\n  (map\n      (fn [x] 1)\n      %))", "problem": 22, "user": "52d5bee0e4b09f7907dd1344"}, {"code": "reduce (fn [x y] (inc x)) 0", "problem": 22, "user": "52382dd6e4b0fae3832e99f1"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "52d6c849e4b09f7907dd1368"}, {"code": "(fn [x] \n  (apply +\n     (map (fn [y] 1) x)))", "problem": 22, "user": "52c3a453e4b0c2d177d620c7"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "52d7412ce4b09f7907dd1371"}, {"code": "(fn [coll]\n  (reduce (fn [a c]\n           (inc a))\n          0\n          coll))", "problem": 22, "user": "52b94e26e4b07a9af57922b9"}, {"code": "(fn cnt[n,x](if (= (rest x) ()) (+ n 1) (cnt  (+ n 1) (rest x)) )) 0", "problem": 22, "user": "52d66ca0e4b09f7907dd135c"}, {"code": "(fn [x] (reduce #(do %2 (inc %1)) 0 x))", "problem": 22, "user": "52d7a930e4b09f7907dd1379"}, {"code": "(fn f [x]\n  (if (empty? x)\n    0\n    (+ 1 (f (rest x)))))", "problem": 22, "user": "52d7b0ade4b09f7907dd137c"}, {"code": "#(loop [result 0 c %]\n   (if(empty? c)\n     result\n     (recur (inc result) (rest c))))", "problem": 22, "user": "52d7b8a6e4b09f7907dd137d"}, {"code": "(fn [s] (reduce (fn [i x] (+ 1 i)) 0 s))", "problem": 22, "user": "52d7f7efe4b09f7907dd1380"}, {"code": "#(reduce (fn[x y] (inc x)) 0 %)", "problem": 22, "user": "52d5c150e4b09f7907dd1345"}, {"code": "#(reduce (fn [x y] (inc x)) 0 %)", "problem": 22, "user": "52d6767ee4b09f7907dd135d"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "52af7a5ce4b0c58976d9acbd"}, {"code": "(fn f22 [se] (reduce + (map (constantly 1) se)))", "problem": 22, "user": "52bf0116e4b07a9af5792328"}, {"code": "(fn c ([a] (c a 0)) ([a x] (if (seq a) (c (rest a) (inc x)) x)))", "problem": 22, "user": "52d66152e4b09f7907dd1357"}, {"code": "#(reduce + 0 (map (fn [n] 1) %))", "problem": 22, "user": "52d87808e4b09f7907dd1396"}, {"code": "(fn [sequence]\n  (loop [s sequence\n             n 0]\n    (if (empty? s)\n      n\n      (recur (rest s) (inc n)))))", "problem": 22, "user": "52d8b05de4b09f7907dd139a"}, {"code": "(fn counts [x] (if (= (rest x) []) 1 (+ 1 (counts(rest x)))))", "problem": 22, "user": "52d74c2de4b09f7907dd1373"}, {"code": "(fn [x & c]\n  (let [r (rest x)\n        c1 (or c 1)]\n    (if (seq r)\n      (recur r (inc c1))\n      c1\n    )\n  )\n)", "problem": 22, "user": "52d809bde4b09f7907dd1384"}, {"code": "(fn ct [l] (if (empty? l) 0 (+ 1 (ct (rest l)))))", "problem": 22, "user": "52d92f13e4b09f7907dd13a2"}, {"code": "#(reduce (fn[x y](+ x 1)) 0  %)", "problem": 22, "user": "4ea8570f535d7eef308072f8"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "52d954cae4b09f7907dd13a5"}, {"code": "(fn cnt [xs]\n   \n   (loop [ys xs m 0]\n      (if (= ys ()) m (recur (rest ys) (+ m 1)))\n   )\n\n)", "problem": 22, "user": "52d829a8e4b09f7907dd1389"}, {"code": "#(loop [lst % cnt 0]\n   (if (empty? lst)\n     cnt\n     (recur (rest lst) (+ 1 cnt))))", "problem": 22, "user": "52d9ba39e4b09f7907dd13af"}, {"code": "(fn my-count\n  [l]\n  (if (empty? l) 0 (inc (my-count (rest l)))))", "problem": 22, "user": "50c2fbebe4b00e537d00253c"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "52da25b0e4b09f7907dd13b4"}, {"code": "(fn [xs] (reduce (fn [c _] (inc c)) 0 xs))", "problem": 22, "user": "52d95491e4b09f7907dd13a4"}, {"code": "(fn [col]\n  (reduce (fn [acc el] (+ acc 1)) 0 col))", "problem": 22, "user": "51f8e057e4b09be9c177e53d"}, {"code": "#(loop [input % counter 0]\n     (if (= (first input) nil)\n       counter \n        (recur (rest input) (inc counter) ) \n     )\n   )", "problem": 22, "user": "52da7ae5e4b09f7907dd13b8"}, {"code": "(fn many [x]\n  (loop [coll x cnt 1]\n    (if (next coll)\n      (recur (next coll) (inc cnt))\n      cnt)))", "problem": 22, "user": "52d95ba3e4b09f7907dd13a6"}, {"code": "(fn [y] (reduce + (map (fn [x] 1) y)))", "problem": 22, "user": "52dad8bde4b09f7907dd13be"}, {"code": "(fn [values] \n  (loop [values values \n        seqcount 0]\n    (if (= '() values)\n      seqcount\n      (recur (rest values) (inc seqcount)))))", "problem": 22, "user": "52daf558e4b09f7907dd13c1"}, {"code": "(fn my-count \n  ( [s, n]\n    (if (= (rest s) [])\n      (inc n)\n      (my-count (rest s) (inc n))\n    )\n  )\n  ( [s]\n    (my-count s 0)\n  )\n)", "problem": 22, "user": "52da0712e4b09f7907dd13b2"}, {"code": "#(apply + (map (fn [x] 1) %))", "problem": 22, "user": "52dbd423e4b09f7907dd13c6"}, {"code": "(fn f\n  ([l] (f l 0))\n  ([l i](if (empty? l)\n    i\n    (recur (rest l) (+ i 1)))))", "problem": 22, "user": "52d709fce4b09f7907dd136d"}, {"code": "#(reduce (fn[f r] (+ f 1)) 0 %1)", "problem": 22, "user": "52dbfc6be4b09f7907dd13c8"}, {"code": "(fn [xs]\n  (reduce (fn [sum _] (inc sum)) 0 xs))", "problem": 22, "user": "52cca96ae4b07d0d72b2736e"}, {"code": "(fn my-count [lst] \n  (loop [lst lst acc 0] \n    (if (empty? lst) \n      acc \n      (recur (rest lst) (inc acc)))))", "problem": 22, "user": "52d81990e4b09f7907dd1388"}, {"code": "#(loop [c % l 0] (if (nil? c) l (recur (next c) (inc l))))", "problem": 22, "user": "52d068c9e4b07d0d72b273b9"}, {"code": "reduce (fn [sum _] (inc sum)) 0", "problem": 22, "user": "52dc55e2e4b09f7907dd13cd"}, {"code": "#(loop [l %1 c 0]\n    (if (empty? l)\n      c\n      (recur (rest l) (inc c))))", "problem": 22, "user": "51c24911e4b0d204dbe2ca20"}, {"code": "(fn [items] (reduce + (vals (frequencies items))) )", "problem": 22, "user": "51ee669ce4b09915f9b23c03"}, {"code": "(fn myct [col]\n  (if (empty? col) 0 (+ 1 (myct (rest col)))))", "problem": 22, "user": "52dcd378e4b09f7907dd13d6"}, {"code": "(fn [ls]\n  (if-let [s (seq ls)]\n    (reduce (fn [acc _] (inc acc)) 0 s)\n    0))", "problem": 22, "user": "52dd6cc8e4b09f7907dd13e2"}, {"code": "(fn [col & n]\n  (cond\n    (empty? col) (or n 0)\n    :else (recur (rest col) (+ (or n 0) 1))\n   )\n  )", "problem": 22, "user": "52d40d81e4b09f7907dd1329"}, {"code": "(fn mycount [y]\n        (loop [x y cnt 0]\n        (if (nil? (first x))\n          cnt\n          (recur (rest x) (inc cnt)))))", "problem": 22, "user": "52cdec6ce4b07d0d72b27383"}, {"code": "#(reduce (fn[x y] (inc x)) 0 %)", "problem": 22, "user": "52dafe13e4b09f7907dd13c2"}, {"code": "#(reduce (fn [m, x] (inc m)) 0 %)", "problem": 22, "user": "52ddae61e4b09f7907dd13e8"}, {"code": "#(reduce (fn [x y] (+ 1 x)) 0 %)", "problem": 22, "user": "517e9526e4b09104ecebe7e2"}, {"code": "#(reduce \n (fn [sum, x] (+ sum x)) \n (map (fn [x] 1) %))", "problem": 22, "user": "52dde81fe4b09f7907dd13eb"}, {"code": "(fn [x]\n  ((fn coun [y i]\n    (if (empty? (rest y))\n      i\n      (coun (rest y) (inc i)))) x 1))", "problem": 22, "user": "52de249ae4b09f7907dd13ed"}, {"code": "(fn [x] (reduce + (map (fn [x] 1) x)))", "problem": 22, "user": "52de6d18e4b09f7907dd13f2"}, {"code": "(fn [coll] (reduce (fn [x y] (inc x)) 0 coll))", "problem": 22, "user": "52c00e4fe4b07a9af5792342"}, {"code": "(fn [elems] \n  (reduce + (map (fn [e] 1) elems)))", "problem": 22, "user": "52deb735e4b09f7907dd13f7"}, {"code": "(fn [x]\n  (loop [size 0\n         x x]\n    (if (empty? x)\n      size\n      (recur (inc size) (rest x)))\n  )\n)", "problem": 22, "user": "521b481de4b0c4ef0be83037"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "52df0706e4b09f7907dd13f9"}, {"code": "#(reduce (fn [x _] (inc x)) 0 %)", "problem": 22, "user": "52df232fe4b09f7907dd13fc"}, {"code": "#(+ 1 (last (map-indexed (fn [index item] index) %)))", "problem": 22, "user": "52df586ee4b09f7907dd13ff"}, {"code": "(fn [a]\n  (loop [c 0\n         a a]\n    (if (first a)\n      (recur (inc c) (rest a))\n      c)))", "problem": 22, "user": "51910da7e4b0f8ef0be96bf9"}, {"code": "(fn [li] \n  (reduce + (map (fn [x] 1) li)))", "problem": 22, "user": "513caa36e4b0b86ece9f3229"}, {"code": "#(reduce (fn[n s] (inc n) ) 0 %)", "problem": 22, "user": "52dced9de4b09f7907dd13d7"}, {"code": "(fn foo [s] (if (empty? s) 0 (+ 1 (foo (rest s)))))", "problem": 22, "user": "52dfc89be4b09f7907dd1405"}, {"code": "(fn f [s] (if (empty? s) 0 (+ 1 (f (rest s)))))", "problem": 22, "user": "51ac80bbe4b09397d5109770"}, {"code": "#(reduce (fn [x y] (inc x)) 0 %)", "problem": 22, "user": "52d9aaa1e4b09f7907dd13ae"}, {"code": "(fn [x]\n  (reduce (fn [n _] (inc n)) 0 x))", "problem": 22, "user": "52c8a8b9e4b0c2d177d62139"}, {"code": "(fn [coll]\n\t(reduce \n\t\t(fn [x y] \n\t\t\t(inc x)\n\t\t) 0 coll\n\t)\n)", "problem": 22, "user": "52e087dde4b09f7907dd1412"}, {"code": "#(loop [coll %1 n 0]\n     (if (= () coll)\n        n\n        (recur (rest coll) (inc n))))", "problem": 22, "user": "4fb99483e4b081705acca2da"}, {"code": "#(reduce (fn [x y] (inc x)) 0 %)", "problem": 22, "user": "52e0d23ce4b09f7907dd1415"}, {"code": "#(reduce (fn [i _] (inc i)) 0 %)", "problem": 22, "user": "52dfc369e4b09f7907dd1404"}, {"code": "(fn [s] (reduce (fn [a s] (+ a 1)) 0 s))", "problem": 22, "user": "52e100e0e4b09f7907dd1418"}, {"code": "#(apply + (map (fn [x] 1) %))", "problem": 22, "user": "52dfe1d2e4b09f7907dd1406"}, {"code": "reduce (fn [a b] (+ a 1)) 0", "problem": 22, "user": "52e0e646e4b09f7907dd1416"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "52e003c1e4b09f7907dd1407"}, {"code": "(fn mycount [x] (if (= '() x) 0 (inc (mycount (rest x)))))", "problem": 22, "user": "52e18377e4b09f7907dd1425"}, {"code": "#(reduce (fn [n c] (+ n 1)) 0 %)", "problem": 22, "user": "52e18d9ce4b09f7907dd1428"}, {"code": "(fn [sequ] (loop [s sequ c 0] (if-not (seq s) c (recur (rest s) (inc c)))))", "problem": 22, "user": "52e18024e4b09f7907dd1424"}, {"code": "(fn [x] (reduce + (map (fn [x] 1) x)))", "problem": 22, "user": "52e1be17e4b09f7907dd142a"}, {"code": "(fn [coll] (reduce (fn [n _] (inc n)) 0 coll))", "problem": 22, "user": "5279cb1ae4b03e8d9a4a753f"}, {"code": "(fn [lst]\n  (loop [l lst\n         cnt 0]\n    (if (nil? l)\n      cnt\n      (recur (next l) (inc cnt)))))", "problem": 22, "user": "51e3a549e4b0c611d6113e47"}, {"code": "(fn [s] \n  (reduce + (map (constantly 1) s)))", "problem": 22, "user": "52d8eb78e4b09f7907dd139d"}, {"code": "(fn length [coll] (if (empty? coll) 0 (inc (length (rest coll)))))", "problem": 22, "user": "52d96f7ce4b09f7907dd13a8"}, {"code": "#(loop [curseq % curcount 0]\n   (if (not (seq curseq))\n     curcount\n     (recur (rest curseq) (inc curcount))))", "problem": 22, "user": "4dbd7107535d020aff1edf42"}, {"code": "(fn func [x] (if (= (rest x) ()) 1 (+ (func (rest x)) 1)))", "problem": 22, "user": "52e253fce4b09f7907dd1432"}, {"code": "(fn self\n  ([s]\n    (self s 0))\n  ([s accum]\n    (if (empty? s)\n      accum\n      (recur (rest s) (inc accum)))))", "problem": 22, "user": "52e27304e4b09f7907dd1434"}, {"code": "(fn cnt [c] ((fn cnt-int [c n] (let [x (if (not-empty c) (+ 1 (cnt-int (rest c) (- n 1))) 0)] x)) c 0))", "problem": 22, "user": "52e295fae4b09f7907dd1437"}, {"code": "(fn [xs] (reduce + (map (fn [x] 1) xs)))", "problem": 22, "user": "4fc34144e4b081705acca33c"}, {"code": "(fn cnt [s]\n  (if (seq s)\n    (inc (cnt (rest s)))\n    0))", "problem": 22, "user": "52d83c2ce4b09f7907dd138d"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "52e014bfe4b09f7907dd1409"}, {"code": "(fn cnt [xs]\n  (loop [ys xs acc 0]\n    (if (= nil (first ys))\n      acc\n      (recur (rest ys) (+ 1 acc)))))", "problem": 22, "user": "52e276d9e4b09f7907dd1436"}, {"code": "reduce (fn [c _] (inc c)) 0", "problem": 22, "user": "52e32d55e4b09f7907dd143e"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "52e356f8e4b09f7907dd1442"}, {"code": "(fn [s] (reduce (fn [a _] (inc a)) 0 s))", "problem": 22, "user": "52e37e80e4b09f7907dd1445"}, {"code": "#(reduce + 0 (map (fn [_] 1) % ) )", "problem": 22, "user": "51f81925e4b09be9c177e526"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "52e3912ee4b09f7907dd1446"}, {"code": "#(reduce (fn [x y](+ 1 x)) 0 %)", "problem": 22, "user": "52d8633ee4b09f7907dd1393"}, {"code": "#(reduce + (map (fn [x] 1 ) %))", "problem": 22, "user": "52e161e8e4b09f7907dd1420"}, {"code": "#(reduce + (map (fn [_] 1) %))", "problem": 22, "user": "52e4086be4b09f7907dd1449"}, {"code": "(fn my-cnt [xs]\n  (if (empty? xs)\n    0\n    (inc (my-cnt (rest xs)))))", "problem": 22, "user": "52e41c22e4b09f7907dd144b"}, {"code": "(fn [list] (loop [[ head & tail] list\n                 n 1]\n            (cond\n             (empty? tail) n\n             (seq tail) (recur tail (+ n 1)))))", "problem": 22, "user": "52e4361fe4b09f7907dd144d"}, {"code": "#(reduce (fn [x y] (inc x)) 0 %)", "problem": 22, "user": "52d6a9c2e4b09f7907dd1365"}, {"code": "#(reduce (fn [acc x] (inc acc)) 0 %)", "problem": 22, "user": "52d24f60e4b099d49816f0a8"}, {"code": "(fn [coll]\n  (reduce (fn [c _] (inc c)) 0 coll))", "problem": 22, "user": "52e44a22e4b09f7907dd144e"}, {"code": "(fn [items]\n  ((fn count-items [items, total]\n     (if (empty? items) total (count-items (rest items) (+ 1 total)))\n     ) items 0)\n  )", "problem": 22, "user": "52e32906e4b09f7907dd143d"}, {"code": "#(loop [x % z 0] (if (empty? x) z (recur (rest x) (+ z 1))))", "problem": 22, "user": "52e48632e4b09f7907dd1450"}, {"code": "#(loop [x % y 0] (if (empty? x) y (recur (rest x) (inc y))))", "problem": 22, "user": "52e49900e4b09f7907dd1452"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "52b9c5e8e4b07a9af57922c2"}, {"code": "(fn [xs] (apply + (map (fn [x] 1) xs)))", "problem": 22, "user": "52e4a40ae4b09f7907dd1453"}, {"code": "reduce (fn[a _] (+ a 1)) 0", "problem": 22, "user": "52e4cc2ee4b09f7907dd1455"}, {"code": "#((fn cnt [i xs] (if (seq xs) (cnt (inc i) (rest xs)) i)) 0 %)", "problem": 22, "user": "52e4f06be4b09f7907dd1456"}, {"code": "#(reduce (fn [acc element] (inc acc)) 0 %)", "problem": 22, "user": "52ad68f5e4b0c58976d9ac94"}, {"code": "(fn [coll]\n  (loop [c coll\n         i 0]\n    (if (empty? c)\n      i\n      (recur (rest c) (inc i)))))", "problem": 22, "user": "52e52f3ce4b09f7907dd1459"}, {"code": "(fn cnt [x] (if (not= [] x) (+ (cnt (rest x)) 1) 0))", "problem": 22, "user": "52e544d3e4b09f7907dd145e"}, {"code": "#(reduce + (map (fn [_] 1) %))", "problem": 22, "user": "511b900ae4b00c2a1fa7ff6a"}, {"code": "(fn [x] (reduce + (vals (frequencies x))))", "problem": 22, "user": "52e54040e4b09f7907dd145c"}, {"code": "#(reduce (fn [i _] (inc i)) 0 %)", "problem": 22, "user": "52e58d1ae4b09f7907dd1463"}, {"code": "#(loop [lst %1 acc 0]\n   (if (empty? lst)\n     acc\n     (recur (rest lst) (+ 1 acc))))", "problem": 22, "user": "52e59ca5e4b09f7907dd1464"}, {"code": "(fn seqcnt\n  ([s] (seqcnt s 0))\n  ([s cnt]\n   (case (first s)\n     \tnil cnt\n     \t(seqcnt (rest s) (+ cnt 1)))))", "problem": 22, "user": "52e5da25e4b09f7907dd1467"}, {"code": "reduce (fn[x y](+ x 1)) 0", "problem": 22, "user": "52e614b8e4b09f7907dd1469"}, {"code": "(fn gg[x] (if (empty? x) 0 (+ 1 (gg (rest x)))))", "problem": 22, "user": "52e0c195e4b09f7907dd1414"}, {"code": "(u ($ coun t))", "problem": 22, "user": "52e635b3e4b09f7907dd146f"}, {"code": "#(reduce + 0 (map (fn [x] 1) %1))", "problem": 22, "user": "4f963487e4b0dcca54ed6cd9"}, {"code": "(fn [xs] (reduce + (map (fn [x] 1) xs)))", "problem": 22, "user": "52e55e16e4b09f7907dd1460"}, {"code": "(fn [aseq]\n  (loop [s aseq\n         i 0]\n    (if (seq s)\n      (recur (rest s) (inc i))\n      i)))", "problem": 22, "user": "52e6aea1e4b09f7907dd147c"}, {"code": "(fn [x]\n  ((fn [collection, sum]\n    (if(empty? collection)\n      sum\n      (recur (pop collection) (inc sum))\n    )\n  )\n  (into [] x) 0)\n)", "problem": 22, "user": "52e27501e4b09f7907dd1435"}, {"code": "#(reduce (fn [acc x] (+ acc 1)) 0 %)", "problem": 22, "user": "52dc2bc8e4b09f7907dd13ca"}, {"code": "(fn c\n  [s]\n  (if (empty? s)\n    0\n    (+ 1 (c (rest s)))))", "problem": 22, "user": "51f2a491e4b0210f90e74553"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "52e702dce4b09f7907dd147f"}, {"code": "reduce (fn [i _] (inc i)) 0", "problem": 22, "user": "52b0ec23e4b0c58976d9acd1"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "52e75667e4b09f7907dd1485"}, {"code": "#(apply + (map (fn [x] 1) %))", "problem": 22, "user": "529b44afe4b02ebb4ef7509d"}, {"code": "(fn [s]\n  (loop [c 0 s s]\n    (if (empty? s)\n      c\n      (recur (inc c) (rest s)))))", "problem": 22, "user": "52e667fce4b09f7907dd1474"}, {"code": "(fn [l]\n  ((fn cnt [lst i]\n     (if (= lst '())\n       i\n       (cnt (rest lst) (+ i 1)))) l 0))", "problem": 22, "user": "52e16139e4b09f7907dd141f"}, {"code": "#(inc (.lastIndexOf (seq %) (last (seq %))))", "problem": 22, "user": "51f2b8f1e4b0210f90e74556"}, {"code": "(fn length[tab](cond (= tab '()) 0 true (+ 1 (length(rest tab)))))", "problem": 22, "user": "52e807b3e4b09f7907dd1490"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "5269877de4b03e8d9a4a71f0"}, {"code": "(fn [s] (reduce + (map (fn [x] 1) s)))", "problem": 22, "user": "50b79c5fe4b0cf3e51c3046c"}, {"code": "#(loop [l %1 c 0](if (= l '()) c (recur (rest l)(inc c))))", "problem": 22, "user": "52dbfe84e4b09f7907dd13c9"}, {"code": "(fn [x] (loop [s x cnt 0]\n\t(if (empty? s)\n\t\tcnt\n\t\t(recur (rest s) (inc cnt) ) ) ) )", "problem": 22, "user": "52e8ecbbe4b09f7907dd14a0"}, {"code": "#(reduce (fn [acc ls] (inc acc)) 0 %)", "problem": 22, "user": "52e3e6a8e4b09f7907dd1448"}, {"code": "#(reduce (fn [x _] (inc x)) 0 %)", "problem": 22, "user": "52e6351ae4b09f7907dd146e"}, {"code": "(fn count-els[lst]\n  ((fn counter[lst n]\n    (if (nil? lst)\n      n\n      (counter (next lst) (+ n 1))))\n   lst 0))", "problem": 22, "user": "52e42430e4b09f7907dd144c"}, {"code": "(fn [xs] (reduce + (map (constantly 1) xs)))", "problem": 22, "user": "52606318e4b03e8d9a4a7036"}, {"code": "(fn aa [x]\n  (if (= x '())\n    0\n    (+ 1 (aa (rest x)))))", "problem": 22, "user": "52e9dbe5e4b09f7907dd14b4"}, {"code": "(fn [se]\n  (loop [s se n 0]\n    (if (not-empty s)\n      (recur (rest s) (inc n))\n      n)))", "problem": 22, "user": "52e7d3d7e4b09f7907dd148e"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "51ac7e9be4b09397d510976f"}, {"code": "#(reduce (fn [n e] (+ 1 n)) 0 %)", "problem": 22, "user": "52e66ddce4b09f7907dd1476"}, {"code": "(fn [x y]  (if (empty? y)\n              x\n              (recur (inc x) (rest y))\n   )) 0", "problem": 22, "user": "52e7afe1e4b09f7907dd148b"}, {"code": "#(reduce (fn [acc _] (inc acc)) 0 %)", "problem": 22, "user": "52eb2ec9e4b0705949c44439"}, {"code": "reduce (fn [x y] (+ x 1)) 0", "problem": 22, "user": "52eb8b65e4b0705949c44441"}, {"code": "#(loop [l % c 0] (if (seq l) (recur (rest l) (inc c)) c))", "problem": 22, "user": "529dfc6de4b04e0c58e87b8a"}, {"code": "(fn [coll]\n\t(loop [size 0 xs coll]\n\t\t(if (seq xs)\n\t\t\t(recur (inc size) (rest xs))\n\t\t\tsize)))", "problem": 22, "user": "52ea764ee4b09f7907dd14be"}, {"code": "(fn howmany\n  [coll]\n  (if (empty? coll)\n    0\n    (+ 1 (howmany (rest coll)))))", "problem": 22, "user": "52b4d8fae4b0c58976d9ad33"}, {"code": "(fn countSequence [array] (if (empty? array) 0 (+ 1 (countSequence (rest array))) ) )", "problem": 22, "user": "52ec1583e4b0705949c44449"}, {"code": "#(reduce \n  (fn\n    [a b]\n    (inc a))\n  0\n  %)", "problem": 22, "user": "529223cbe4b0239c8a67af26"}, {"code": "(fn num-elements [ls]\n  (if (= ls []) 0 (+ 1 (num-elements (rest ls)))))", "problem": 22, "user": "52ec1dfbe4b0705949c4444b"}, {"code": "reduce (fn [x y] (+ x 1)) 0", "problem": 22, "user": "52e73b36e4b09f7907dd1483"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "52ec2b9ae4b0705949c4444f"}, {"code": "#(reduce + (map (fn [item] 1) %))", "problem": 22, "user": "52ec4322e4b0705949c44451"}, {"code": "(fn [x]\n  (reduce\n    (fn [accum x] (+ 1 accum))\n    0\n    x\n  )\n)", "problem": 22, "user": "52ecb1efe4b0705949c44454"}, {"code": "(fn [x] (reduce (fn [c, v] (+ c 1) ) (map #(when % 1) x)))", "problem": 22, "user": "52e68c90e4b09f7907dd1478"}, {"code": "(fn [coll]\n  (loop [coll coll\n         n 0]\n    (if (empty? coll)\n      n\n      (recur (rest coll) (inc n)))))", "problem": 22, "user": "52d7f9a8e4b09f7907dd1381"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "52edc795e4b05e3f0be25ebc"}, {"code": "(fn cnt\n  ([seq] (cnt seq 0))\n  ([seq n] (if (empty? seq) n (recur (rest seq) (inc n)))))", "problem": 22, "user": "52e82818e4b09f7907dd1496"}, {"code": "(fn cnt [xs]\n  (if (empty? xs)\n    0\n    (+ (cnt (rest xs)) 1)))", "problem": 22, "user": "52ee20bbe4b05e3f0be25ec2"}, {"code": "(fn mcount\n  ([xs] (mcount xs 0))\n  ([xs m] (if (empty? xs)\n            m\n            (recur (rest xs) (inc m)))))", "problem": 22, "user": "52d660eae4b09f7907dd1356"}, {"code": "(fn [y] (apply + (map (fn [x] 1)y)))", "problem": 22, "user": "52ecd34ee4b0705949c44457"}, {"code": "(fn [sequ] \n  (loop [sequ sequ \n         len 0]\n    (if (empty? sequ) \n      len \n      (recur (rest sequ) (inc len)))))", "problem": 22, "user": "52ee46e5e4b05e3f0be25ec5"}, {"code": "(fn [coll]\n         (let [c 0]\n           ((fn [s c]\n              (if (empty? (seq s))\n                c\n                (recur (rest s) (inc c)))\n              ) coll c)))", "problem": 22, "user": "52e814fee4b09f7907dd1493"}, {"code": "(fn\n  myself\n  [items]\n  (let [[ first-item & rest-items] items]\n    (if (nil? first-item)\n      0\n      (inc (myself rest-items)))))", "problem": 22, "user": "52e94348e4b09f7907dd14a9"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "52eeaf93e4b05e3f0be25eca"}, {"code": "reduce \n   (fn [total coll]\n     (inc total))   \n   0", "problem": 22, "user": "4fc4f347e4b081705acca35d"}, {"code": "reduce (fn [x y] (+ x 1)) 0", "problem": 22, "user": "52eee533e4b05e3f0be25ecb"}, {"code": "(fn f22 [a]\n  (loop [a a\n         b 0]\n  (if (= (vec a) [])\n    b\n    (recur (rest a) (inc b)))))", "problem": 22, "user": "52c08c59e4b07a9af5792351"}, {"code": "#(reduce + (map (fn[x] 1) %))", "problem": 22, "user": "52e68e61e4b09f7907dd1479"}, {"code": "(fn mycount [x] (if (empty? x) 0 (+ (mycount (rest x)) 1)))", "problem": 22, "user": "5176afd2e4b085adf681d889"}, {"code": "#(if (= java.lang.String (type %)) (.length %) (.size %))", "problem": 22, "user": "52efbdaae4b05e3f0be25ed1"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "52efd3d9e4b05e3f0be25ed4"}, {"code": "(fn [coll] (reduce + (map (fn[x] 1) coll)))", "problem": 22, "user": "513f98f9e4b00f13ea1bd88f"}, {"code": "(fn [x] \n  (reduce + (map (fn [x] '1) x)))", "problem": 22, "user": "52f01bfbe4b05e3f0be25ed9"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "4f2b6f89e4b0d6649770a049"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "52f07ccee4b05e3f0be25edf"}, {"code": "(fn [lst] (apply + (map (fn [x] 1) lst)))", "problem": 22, "user": "52edec96e4b05e3f0be25ebf"}, {"code": "(fn [xs]\n  (reduce (fn [acc x] (inc acc)) 0 xs)\n)", "problem": 22, "user": "52e8ee9ae4b09f7907dd14a1"}, {"code": "#(reduce (fn [x y] (inc x)) 0 %)", "problem": 22, "user": "52eff3e8e4b05e3f0be25ed7"}, {"code": "(fn [coll] (reduce + (map (fn [x] 1) coll)))", "problem": 22, "user": "52ea4b23e4b09f7907dd14b8"}, {"code": "(fn [xs] ((fn calc[acc os] (if (empty? os) acc (calc (+ acc 1) (rest os)))) 0 xs))", "problem": 22, "user": "52f10094e4b05e3f0be25ee8"}, {"code": "#(loop [items %\n        i 0]\n   (if-not (first items)\n     i \n     (recur (rest items) (inc i))))", "problem": 22, "user": "52efc98de4b05e3f0be25ed2"}, {"code": "#(reduce (fn [val1 val2] (inc val1)) 0 %)", "problem": 22, "user": "52570aeae4b0541d1855ba42"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "52f021c1e4b05e3f0be25edb"}, {"code": "(fn [x]\n  (loop [y x c 0]\n    (if (empty? y)\n      c\n      (recur (next y) (inc c)))))", "problem": 22, "user": "52f2cfb5e4b05e3f0be25eff"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "52f225bfe4b05e3f0be25ef4"}, {"code": "(fn [x] (loop [lst x cnt 0] (if (empty? lst) cnt (recur (rest lst) (+ cnt 1)))))", "problem": 22, "user": "52f304b4e4b05e3f0be25f07"}, {"code": "(fn [coll] \n  (loop [c coll cnt 0] \n    (if \n      (empty? c) \n      cnt\n      (recur \n        (rest c)\n        (inc cnt)\n      )\n    )\n  )\n)", "problem": 22, "user": "52f1bc81e4b05e3f0be25eef"}, {"code": "(fn [coll] \n  (reduce (fn [a b] (+ a 1)) 0 coll)\n  )", "problem": 22, "user": "52f381f3e4b05e3f0be25f10"}, {"code": "reduce (fn [x y] (inc x)) 0", "problem": 22, "user": "5066003ee4b0313a384e5647"}, {"code": "#(reduce (fn [x _] (inc x)) 0 %)", "problem": 22, "user": "52f3af46e4b05e3f0be25f14"}, {"code": "(fn [mylist]\n  (loop [temp mylist\n         result 0]\n    (if (nil? (first temp))\n      \tresult\n      \t(recur (rest temp) (inc result)))))", "problem": 22, "user": "52a5a8ebe4b0c58976d9abed"}, {"code": "(fn [lst] (reduce (fn [x _] (inc x)) 0 lst))", "problem": 22, "user": "52f2b450e4b05e3f0be25efd"}, {"code": "#(loop [seq %\n          i 0]\n    (if (not (empty? seq))\n     (recur (rest seq) (inc i))\n      i))", "problem": 22, "user": "52f3ee17e4b05e3f0be25f19"}, {"code": "#(loop [n 0 c %]\n  (if (empty? c) n (recur (inc n) (next c))))", "problem": 22, "user": "52f13a77e4b05e3f0be25ee9"}, {"code": "reduce (fn [i l] (+ i 1)) 0", "problem": 22, "user": "52e80e87e4b09f7907dd1492"}, {"code": "(fn count-\n  ([x]\n   (if (empty? (rest x))\n     1\n     (count- (rest x) 2)))\n  ([x y]\n   (if (empty? (rest x))\n     y\n     (recur (rest x) (inc y)))))", "problem": 22, "user": "52e6975de4b09f7907dd147a"}, {"code": "(fn [x]\n  (loop [mylist x, cnt 0]\n    (if (empty? mylist)\n      cnt\n      (recur (rest mylist) (inc cnt)))))", "problem": 22, "user": "52f4580de4b05e3f0be25f21"}, {"code": "(fn [items]\n\t\t(reduce (fn [amount item] (+ amount 1)) 0 items))", "problem": 22, "user": "52f31489e4b05e3f0be25f0b"}, {"code": "#(( fn mycount [s c](if (= (rest s) '()) c (mycount (rest s) (+ c 1)))) % 1)", "problem": 22, "user": "52ea5e0ae4b09f7907dd14bc"}, {"code": "(fn [coll]\n  (reduce (fn [counter _] (inc counter)) 0 coll))", "problem": 22, "user": "51ab4082e4b04e3dc0c27b31"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "52f44c84e4b05e3f0be25f20"}, {"code": "(fn self [coll]\n  (if (empty? coll)\n    0\n    (+ 1 (self (rest coll)))))", "problem": 22, "user": "52f512eee4b05e3f0be25f29"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "52f182d8e4b05e3f0be25eed"}, {"code": "#(loop [coll %, i 0]\n    (if (empty? coll)\n       i \n      (recur (rest coll) (inc i))\n    )\n)", "problem": 22, "user": "52eaeb88e4b0705949c44436"}, {"code": "#(loop [size 0, x %1]\n   (if (not (empty? x)) (recur (+ size 1) (rest x))\n     \tsize))", "problem": 22, "user": "52f5eefbe4b09b582c12c9cb"}, {"code": "reduce (fn [c _] (inc c)) 0", "problem": 22, "user": "52f53589e4b05e3f0be25f2c"}, {"code": "(fn [x] \n   (loop [items x n 0]\n     (if (empty? items)\n       n \n       (recur (rest items) (inc n) ))))", "problem": 22, "user": "52f32c24e4b05e3f0be25f0d"}, {"code": "(fn [x] (loop [l x\n                   n 0]\n              (if (= (rest l) '())\n                (inc n)\n                (recur (rest l) (inc n)))))", "problem": 22, "user": "4feacba7e4b0140c20fb9c0e"}, {"code": "(fn [coll]\n  (reduce (fn [x y] (inc x)) 0 coll))", "problem": 22, "user": "52f41979e4b05e3f0be25f1c"}, {"code": "reduce (fn [x y] (+ x 1)) 0", "problem": 22, "user": "52f69565e4b047fd55836fb9"}, {"code": "(partial reduce (fn [c _] (inc c)) 0)", "problem": 22, "user": "52f4fae4e4b05e3f0be25f27"}, {"code": "(fn my [xs]\n  (if (empty? xs)\n    0\n  (+ 1 (my (rest xs)))))", "problem": 22, "user": "52f772e2e4b047fd55836fc3"}, {"code": "#(loop [x %\n           y 0]\n      (if (empty? x)\n        y \n        (recur (rest x) (inc y))))", "problem": 22, "user": "52d838bee4b09f7907dd138b"}, {"code": "#(loop [x %\n        n 0]\n   (if (empty? x)\n     n\n     (recur (rest x) (inc n))))", "problem": 22, "user": "52f685eae4b047fd55836fb8"}, {"code": "#(reduce + \n        (map (fn[x] 1) %)\n        )", "problem": 22, "user": "52f7dc80e4b047fd55836fc9"}, {"code": "(fn my-count [x]\n  (if (= x '()) 0 (+ 1 (my-count (rest x)))))", "problem": 22, "user": "52f5f8b4e4b09b582c12c9cc"}, {"code": "(fn [c] (loop [acc 0 c0 c]\n          (if (empty? c0)\n            acc\n            (recur (inc acc) (next c0)))))", "problem": 22, "user": "52dbf072e4b09f7907dd13c7"}, {"code": "(fn [arr] (reduce (fn [number, n] (inc number)) 0 arr))", "problem": 22, "user": "52f84c94e4b047fd55836fcf"}, {"code": "reduce (fn [n x] (inc n)) 0", "problem": 22, "user": "52f882c4e4b047fd55836fd1"}, {"code": "(fn [lst] (reduce (fn [x y] (+ x 1)) 0 lst))", "problem": 22, "user": "52f89ac8e4b047fd55836fd7"}, {"code": "(fn [xs]\n  ((fn [xs n]\n    (if (empty? xs)\n      n\n      (recur (rest xs) (inc n)))) xs 0))", "problem": 22, "user": "52f89125e4b047fd55836fd4"}, {"code": "(fn cnt\n   ([l]\n      (cnt (rest l) 1))\n   ([l t]\n   (if (= l '())\n     t\n     (cnt (rest l) (+ t 1)))))", "problem": 22, "user": "52f8b2a2e4b047fd55836fda"}, {"code": "(comp (partial apply +) (partial map #(do % 1)))\n\n;(fn [ls] (reduce (fn [x _] (+ 1 x)) 0 ls))\n\n;(fn [ls]\n;  (loop [acc 0 rest-ls ls] \n;    (if (empty? rest-ls) \n;      acc\n;      (recur \n;       (+ acc 1) \n;       (rest rest-ls)))))", "problem": 22, "user": "52f3568fe4b05e3f0be25f0e"}, {"code": "(fn my-count [s] \n  (if (empty? s)\n    0\n    (inc (my-count (rest s)))))", "problem": 22, "user": "52f8f4d1e4b047fd55836fde"}, {"code": "#(reduce (fn [c _] (inc c)) 0 %)", "problem": 22, "user": "52e980b3e4b09f7907dd14af"}, {"code": "(fn [x]\n  (reduce (fn [x y] (+ x 1)) 0 x))", "problem": 22, "user": "52f92349e4b047fd55836fe4"}, {"code": "(fn count-a-seq [lat]\n  (reduce (fn [x y] (+ x 1)) 0 lat))", "problem": 22, "user": "52f928c1e4b047fd55836fe5"}, {"code": "reduce (fn [n %] (inc n))  0", "problem": 22, "user": "527d59f9e4b0757a1b171382"}, {"code": "#(reduce (fn [acc _] (inc acc)) 0 %1)", "problem": 22, "user": "52f9c68ce4b047fd55836fef"}, {"code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "problem": 22, "user": "52f89620e4b047fd55836fd5"}, {"code": "#(reduce + (map (fn [x] 1) (seq %)))", "problem": 22, "user": "52f9de85e4b047fd55836ff1"}, {"code": "(fn [items]\n  (reduce + (map (constantly 1) items)))", "problem": 22, "user": "52f94752e4b047fd55836fe6"}, {"code": "(fn [seq] \n  (loop [size 0 seq seq] \n    (if (empty? seq)\n        size\n        (recur (inc size) (rest seq)))))", "problem": 22, "user": "52fa8f71e4b047fd55836ffb"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "52823129e4b0757a1b171452"}, {"code": "(fn countItems[lst_1]\n  (if (empty? lst_1) 0\n    (+ 1 (countItems(rest lst_1)))))", "problem": 22, "user": "52dea949e4b09f7907dd13f4"}, {"code": "#(loop [xs %1\n        current 0]\n    (if (= nil (first xs))\n      current\n        (recur (rest xs) (+ current 1))))", "problem": 22, "user": "52fa250ee4b047fd55836ff3"}, {"code": "(fn [lista] (reduce (fn [x y] (+ x 1)) 0 lista))", "problem": 22, "user": "52facaeae4b047fd55837000"}, {"code": "(fn ! [x] (if (seq x) (+ 1 (! (rest x))) 0))", "problem": 22, "user": "52faec2ee4b047fd55837004"}, {"code": "(fn size [x] (if (= x '()) 0 (+ 1 (size (rest x)))))", "problem": 22, "user": "52ed7458e4b0a18b0f5dd9ed"}, {"code": "(fn my-count [xs]\n  (if (empty? xs)\n    0\n    (inc (my-count (rest xs)))))", "problem": 22, "user": "52fafd5ce4b047fd55837006"}, {"code": "(fn [coll] (loop [i 0 c coll] (if (empty? c) i (recur (inc i) (rest c)))))", "problem": 22, "user": "52fb64b7e4b047fd55837009"}, {"code": "(fn [coll]\n  (loop [cnt 0 col coll]\n    (if (empty? col) cnt (recur (inc cnt) (rest col)))))", "problem": 22, "user": "52fb903ee4b047fd5583700b"}, {"code": "(fn nCount [i x] (if (empty? x) \n            i \n            ( nCount (inc i) (rest x) )\n            ) \n  ) 0", "problem": 22, "user": "52f625ffe4b047fd55836fb5"}, {"code": "(fn [x] \n  \n  (if (string? x) \n    (. x length)\n  (. x size)))", "problem": 22, "user": "52fba50ce4b047fd5583700d"}, {"code": "#(apply + (map (constantly 1) %))", "problem": 22, "user": "52facb9de4b047fd55837002"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "52fbc44be4b047fd55837010"}, {"code": "#(loop [col %1 \n          n 0]\n    (cond \n     (empty? col) n\n     :else   (recur (rest col) (+ n 1))))", "problem": 22, "user": "52fc89b2e4b047fd55837019"}, {"code": "#(apply + ( map (constantly 1) %))", "problem": 22, "user": "52fc34cee4b047fd55837015"}, {"code": "(fn my-count [x]\n  (if (empty? x)\n    0\n    (+ 1 (my-count (rest x)))\n   )\n  )", "problem": 22, "user": "52f8b86de4b047fd55836fdb"}, {"code": "#((fn [rcoll counter]\n    (if (empty? rcoll)\n      counter\n      (recur (rest rcoll) (inc counter))))\n  % 0\n  )", "problem": 22, "user": "52fcca5ae4b047fd55837021"}, {"code": "(fn [col] (inc (first (last (map-indexed (fn [idx itm] [idx itm]) col)))))", "problem": 22, "user": "51dad73ae4b09f6bc204eedd"}, {"code": "(fn [coll] \n  (reduce + (map #(first [1 %]) coll)))", "problem": 22, "user": "52ebbdf7e4b0705949c44443"}, {"code": "(fn my-counter\n [x]\n (loop [z x n 0]\n  (cond (empty? z) n\n   :t\n   (recur (rest z)(inc n)))))\n#_(fn my-counter \n[col]\n (letfn [(cnt-helper[col n]\n (if(empty? col)\n   n\n(recur (rest col)(inc n))))]\n(cnt-helper col 0)))\n\n#_(fn my-counter\n  ([col] (my-counter col 0))\n  ([col n] (if (nil? (first col))\n             n\n             (recur (rest col)(inc n)))))", "problem": 22, "user": "52faf67ce4b047fd55837005"}, {"code": "(fn [xs]\n  (loop [ys xs l 0]\n    (if (empty? ys) l (recur (rest ys) (inc l)))))", "problem": 22, "user": "52ee0de4e4b05e3f0be25ec1"}, {"code": "#(alength (to-array %))", "problem": 22, "user": "52f9ce6de4b047fd55836ff0"}, {"code": "(fn [coll] \n  (loop [coll coll total 0]\n    (if (seq coll)\n      (recur (rest coll) (inc total))\n      total\n      )))", "problem": 22, "user": "52fcfeeee4b047fd55837027"}, {"code": "(fn\n  [coll]\n  (loop [se coll\n         size 0]\n    (if (empty? se)\n      size\n      (recur (rest se) (inc size)))))", "problem": 22, "user": "52fdb82ae4b047fd55837031"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "52faff0de4b047fd55837007"}, {"code": "#(reduce (fn [c _] (inc c)) 0 %)", "problem": 22, "user": "52fa57ece4b047fd55836ff8"}, {"code": "#(reduce (fn [c _] (inc c)) 0 %)", "problem": 22, "user": "526ab39ee4b03e8d9a4a7236"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "52fe1b61e4b047fd55837035"}, {"code": "#(reduce (fn [c _] (inc c)) 0 %)", "problem": 22, "user": "52f30b84e4b05e3f0be25f09"}, {"code": "(fn [col] (reduce (fn [n _] (inc n)) 0 col))", "problem": 22, "user": "51a3b135e4b0e77c4ca60bf6"}, {"code": "#(reduce (fn [c _] (inc c)) 0 %)", "problem": 22, "user": "52fe79d7e4b047fd5583703e"}, {"code": "#(reduce (fn [a b] (inc a)) 0 %)", "problem": 22, "user": "52eb400ee4b0705949c4443b"}, {"code": "#(.size (vec %))", "problem": 22, "user": "52ffb7f2e4b0d8b024fd370b"}, {"code": "reduce (fn [cnt s] (inc cnt)) 0", "problem": 22, "user": "5300158ae4b0d8b024fd370f"}, {"code": "(fn [x]  ((fn len [x n] (if (empty? x) n (len (rest x) (inc n)) ) ) x 0))", "problem": 22, "user": "5300aa1de4b0d8b024fd3710"}, {"code": "(fn [s]\n  (reduce (fn [res x] (inc res)) 0 s))", "problem": 22, "user": "5300f68de4b0d8b024fd3714"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "53010e8ee4b0d8b024fd3716"}, {"code": "(fn [x] (loop [x x y 0] (if (empty? x) y (recur (rest x) (+ y 1)))))", "problem": 22, "user": "53012382e4b0d8b024fd3718"}, {"code": "reduce (fn [X Y] (inc X) ) 0", "problem": 22, "user": "5300c383e4b0d8b024fd3712"}, {"code": "(fn my-count\n  [input]\n  (apply + (map (fn [x] 1) input)))", "problem": 22, "user": "5300b750e4b0d8b024fd3711"}, {"code": "#(reduce (fn [x _] (inc x)) 0 %)", "problem": 22, "user": "512587ade4b05d10e3e395fb"}, {"code": "#(reduce (fn [x _] (+ 1 x)) 0 %)", "problem": 22, "user": "5301d41ae4b0d8b024fd3720"}, {"code": "(fn testus \n  [coll]\n  (loop [coll coll acc 0]\n    (if (seq coll) \n      (recur (next coll) (inc acc))\n      acc)))", "problem": 22, "user": "53021823e4b0d8b024fd3724"}, {"code": "(fn [x] \n  (loop [ans 0\n         lst x]\n    (if (empty? lst)\n      ans\n      (recur (inc ans) (rest lst)))))", "problem": 22, "user": "52fa4f48e4b047fd55836ff7"}, {"code": "(fn size [lst]\n  (if (empty? lst)\n    0\n    (inc (size (rest lst)))))", "problem": 22, "user": "52fe3a9de4b047fd55837039"}, {"code": "(fn [xs] ((fn [l n] (if (empty? l) n (recur (next l) (inc n)))) xs 0))", "problem": 22, "user": "53028354e4b0d8b024fd372b"}, {"code": "#(reduce (fn [n _] (inc n)) 0 %)", "problem": 22, "user": "5302b580e4b0d8b024fd3732"}, {"code": "(fn [s] (reduce + (map (constantly 1) s)))", "problem": 22, "user": "5302bb37e4b0d8b024fd3734"}, {"code": "#(reduce + (map (fn [y] 1) %))", "problem": 22, "user": "5302b580e4b0d8b024fd3733"}, {"code": "(fn [xs]\n  (loop [len 0\n         xs xs]\n    (if (empty? xs)\n      len\n      (recur (inc len) (rest xs)))))", "problem": 22, "user": "53029a95e4b0d8b024fd3730"}, {"code": "(fn cnt [params]\n  (reduce (fn [acc, curr]\n            (inc acc)) 0 params))", "problem": 22, "user": "52d2e2a9e4b099d49816f0b8"}, {"code": "(fn f[l]\n  (if (empty? l)\n    0\n    (+ 1 (f (rest l)))))", "problem": 22, "user": "52f818a6e4b047fd55836fcc"}, {"code": "(fn[coll] (loop [x coll length 0] (if (empty? x) length (recur (rest x)(inc length)))))", "problem": 22, "user": "518c1079e4b0f028e99addf8"}, {"code": "#(reduce (fn[x y] (inc x)) 0 %)", "problem": 22, "user": "53036d2ce4b0d8b024fd3741"}, {"code": "(comp #(reduce + %) #(map (fn [x] 1) %))", "problem": 22, "user": "52fff1a8e4b0d8b024fd370d"}, {"code": "#(reduce + (map (fn [_] 1) %))", "problem": 22, "user": "52fd3da0e4b047fd5583702a"}, {"code": "(fn cnt[coll]\n\t(reduce + (map (fn [x] 1) coll)))", "problem": 22, "user": "51a89081e4b08d8ec191b814"}, {"code": "(fn dig [x] (reduce + (map (fn [y] 1) x)))", "problem": 22, "user": "5303a027e4b0d8b024fd3745"}, {"code": "(fn [x] (loop [[x & xs] x i 1] (if (empty? xs) i (recur xs (+ i 1)))))", "problem": 22, "user": "530394b4e4b0d8b024fd3743"}, {"code": "(fn [coll] \n(loop [cnt 0 ser coll]\n(if (empty? ser) \ncnt \n(recur (inc cnt) (rest ser)))))", "problem": 22, "user": "53032bfce4b0d8b024fd373a"}, {"code": "(fn [seq]\n  (reduce + \n\t(map (fn [x] 1) seq)))", "problem": 22, "user": "5304dd80e4b0d8b024fd3754"}, {"code": "(fn get-count \n\t([coll] (if (nil? (first coll)) 0 (get-count 1 (next coll))))\n\t([acc coll] (if (nil? (first coll)) acc (get-count (inc acc) (next coll)))))", "problem": 22, "user": "53028ec0e4b0d8b024fd372d"}, {"code": "(fn [x] (reduce + (map (constantly 1) x)))", "problem": 22, "user": "52f90613e4b047fd55836fe1"}, {"code": "#(loop [coll %\n         n  0]\n    (if (not (empty? coll))\n      (recur (rest coll) (inc n))\n      n))", "problem": 22, "user": "4fb55e64e4b081705acca2bd"}, {"code": "(fn [coll] (reduce + (map (fn [x] 1) coll)))", "problem": 22, "user": "530578ede4b0d8b024fd3760"}, {"code": "reduce (fn iter [acc,actual] (inc acc)) 0", "problem": 22, "user": "53038619e4b0d8b024fd3742"}, {"code": "#(loop [n 0\n        coll %]\n   (if (seq coll)\n     (recur (+ n 1) (rest coll))\n     n))", "problem": 22, "user": "53059d42e4b0d8b024fd3761"}, {"code": "#(loop [ls % acc 0] (if (empty? ls) acc (recur (rest ls) (inc acc))))", "problem": 22, "user": "5301157ae4b0d8b024fd3717"}, {"code": "#(reduce (fn [c _] (inc c)) 0 %)", "problem": 22, "user": "52f44a16e4b05e3f0be25f1f"}, {"code": "(fn cnt [coll] \n  (reduce (fn blah [i j] (+ i 1)) 0 coll))", "problem": 22, "user": "53023bf3e4b0d8b024fd3726"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "53063e94e4b02e8216869790"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4f48f587e4b0d56e7bb92be2"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "53050a4be4b0d8b024fd3756"}, {"code": "#(reduce \n    (fn [c _]\n      (inc c))\n     0 %)", "problem": 22, "user": "53067bede4b02e8216869797"}, {"code": "(fn [x & counter]\n  (if (nil? counter) (recur x 0)\n    (if (empty? x)\n      counter\n      (recur (rest x) (+ counter 1)))))", "problem": 22, "user": "5306e4b4e4b02e821686979d"}, {"code": "(fn [xs] (reduce + (map (fn [_] 1) xs)))", "problem": 22, "user": "52eb0ea9e4b0705949c44438"}, {"code": "(fn[x](alength (to-array x)))", "problem": 22, "user": "5302d79ce4b0d8b024fd3736"}, {"code": "(fn [s]\n  (loop [sl s c 0]\n    (if (empty? sl)\n      c\n      (recur (rest sl) (+ c 1)))))", "problem": 22, "user": "53077c67e4b02e82168697a4"}, {"code": "#(last (map (fn [ a b ] a) (iterate inc 1) %1))", "problem": 22, "user": "53029281e4b0d8b024fd372e"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "52f762ece4b047fd55836fc2"}, {"code": "#(reduce + (\n        map (fn [x] 1) %\n    )\n )", "problem": 22, "user": "5306b349e4b02e8216869799"}, {"code": "(fn [x] (reduce + 0 (map (fn [x] 1) x)))", "problem": 22, "user": "530733b7e4b02e82168697a0"}, {"code": "#(apply + (map (fn [_] 1) %))", "problem": 22, "user": "53070615e4b02e821686979e"}, {"code": "(fn [col]\n  \t(loop [num 0 coll col]\n      (if (empty? coll)\n        num\n      (recur (inc num)(rest coll)))))", "problem": 22, "user": "530837c7e4b02e82168697ae"}, {"code": "(fn my-count [l]\n  (if (empty? l) 0 (inc (my-count (rest l)))))", "problem": 22, "user": "51434a4fe4b0c172af7558d4"}, {"code": ";;(fn [x] (reduce (fn [acc el] (inc acc)) 0 x))\n\n;(fn f ([x] (f x 0))\n;      ([x c] (if (empty? x) c (recur (rest x) (inc c)))))\n\n(fn f [x]\n  (loop [counter 0 y x]\n  (if (empty? y)\n    counter\n    (recur  (inc counter) (rest y)))))", "problem": 22, "user": "5307e4ece4b02e82168697a9"}, {"code": "reduce (fn [sum _] (inc sum))  0", "problem": 22, "user": "528e7433e4b0239c8a67aedf"}, {"code": "(fn dips [lst] (cond (empty? lst) 0 :else (inc (dips (rest lst)))))", "problem": 22, "user": "5308d15fe4b02e82168697b2"}, {"code": "#(apply + (map (fn [_] 1) %))", "problem": 22, "user": "5301a13ae4b0d8b024fd371e"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "53098ffae4b02e82168697b8"}, {"code": "(fn [lst] (loop [l lst, acc 0] (if (empty? l) acc (recur (next l) (inc acc)))))", "problem": 22, "user": "52f7ac81e4b047fd55836fc6"}, {"code": "(fn countthis [xs] (if (empty? xs) 0 (+ 1 (countthis (rest xs)))))", "problem": 22, "user": "530b6ea2e4b02e82168697cb"}, {"code": "(fn count-list[l]\n  ((fn count-acc[l, x]\n    (if (empty? l)\n      x\n      (count-acc (rest l) (inc x))\n    )\n  ) l 0)\n)", "problem": 22, "user": "530b8ce1e4b02e82168697cd"}, {"code": "(fn [sq] \n  (loop [maybe-seq sq\n         size 0]\n    (if (empty? maybe-seq)\n      size\n      (recur (next maybe-seq) (inc size)))))", "problem": 22, "user": "530b8580e4b02e82168697cc"}, {"code": "(fn foo\n  ([x] (foo x 0))\n  ([[x & others] i] (if (seq others) (foo others (inc i)) (inc i))))", "problem": 22, "user": "5303c543e4b0d8b024fd3749"}, {"code": "(fn [ls] (loop [l ls c 0]\n    (if (empty? l)\n      c\n      (recur (rest l) (inc c)))))", "problem": 22, "user": "53069e16e4b02e8216869798"}, {"code": "(fn [l & c]\n  (if-not (seq l)\n    c\n  (recur (rest l) (inc (or c 0)))))", "problem": 22, "user": "530bae80e4b02e82168697d0"}, {"code": ";( fn mycnt[ a  sq ] (if (seq sq ) (mycnt (inc a)( rest sq)) a ) ) 0\n#(reduce + (map (constantly 1) %))", "problem": 22, "user": "52f426fce4b05e3f0be25f1e"}, {"code": "(fn\n  [c]\n  (loop [n 0 t c]\n    (if (empty? t)\n      n\n      (recur (inc n) (rest t)))))", "problem": 22, "user": "52c45ac8e4b0c2d177d620d9"}, {"code": "(fn count-seq [s]\n  (if (empty? (rest s))\n    1\n    (+ 1 (count-seq (rest s)))))", "problem": 22, "user": "53098be4e4b02e82168697b7"}, {"code": "(fn\n[lst]\n  (loop [l lst\n         n 0]\n     (if (= l [])\n        n\n        (recur (rest l) (inc n))\n     )\n  )\n)", "problem": 22, "user": "530c462ae4b02e82168697d9"}, {"code": "(fn my-count [s] (if (empty? s) 0 (+ 1 (my-count (rest s)))))", "problem": 22, "user": "530c8848e4b02e82168697de"}, {"code": "(fn [col]\n  (loop [col col n 0]\n    (if (empty? col)\n      n\n      (recur (rest col) (+ n 1)))))", "problem": 22, "user": "5166b716e4b060c690c1f4bf"}, {"code": "#(loop [l %, c 0]\n   (if (empty? l) c (recur (rest l) (inc c))))", "problem": 22, "user": "530caf86e4b02e82168697df"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "530ccb1de4b08068f379ec99"}, {"code": "(fn [coll] (apply + (map #(or 1 %) coll)))", "problem": 22, "user": "53092faae4b02e82168697b5"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "4ff4bed0e4b0678c553fc35f"}, {"code": "(fn [x] (inc (.lastIndexOf x (if (string? x) (.toString (last x)) (last x) ) ) ) )", "problem": 22, "user": "52fc9b94e4b047fd5583701d"}, {"code": "(fn len-sequence [x]\n      (loop\n          [sequence x len 0]\n        (if (= nil (first sequence))\n          len\n          (recur (rest sequence) (+ len 1)))))", "problem": 22, "user": "530d85dee4b08068f379eca8"}, {"code": "(fn length\n  ([xs]\n     (if (nil? (seq xs))\n       0\n       (+ 1 (length (rest xs))))))", "problem": 22, "user": "530e0e4ee4b08068f379ecb4"}, {"code": "#(->> % (map (fn[x]1)) (reduce +))", "problem": 22, "user": "530cb5b8e4b02e82168697e0"}, {"code": "reduce (fn [x _] (inc x)) 0", "problem": 22, "user": "4fe8b1d9e4b07c9f6fd12c71"}, {"code": "#(->> % (map vector (range)) last first inc)", "problem": 22, "user": "530e9729e4b08068f379ecbc"}, {"code": "(fn [x] (.size (map #(= % true) x)))", "problem": 22, "user": "530db182e4b08068f379ecad"}, {"code": "#(reduce (fn [acc, a] (inc acc)) 0 %)", "problem": 22, "user": "530e74c9e4b08068f379ecb9"}, {"code": "(fn [coll] (loop [x (seq coll) acc 1]\n  (if (empty? x)\n    (- acc 1)\n    (recur (rest x) (inc acc)))))", "problem": 22, "user": "52e25beee4b09f7907dd1433"}, {"code": "(fn hey ([x] (hey x 1)) ([x y] (if (empty? (rest x)) y (hey (rest x) (+ y 1)))))", "problem": 22, "user": "52e17e66e4b09f7907dd1423"}, {"code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "problem": 22, "user": "530f5929e4b08068f379ecc8"}, {"code": "(fn [n s]\n        (if (= nil s) n \n          (recur (inc n)(next s)))) 0", "problem": 22, "user": "530e5469e4b08068f379ecb7"}, {"code": "(fn [sq]\n  (loop [x 0 s sq]\n    (if  (empty? s)\n      x\n      (recur (inc x) (rest s)  ) )  \n  )\n  )", "problem": 22, "user": "52c911dde4b0c2d177d6213a"}, {"code": "(fn c [l & [n]]\n     (if (empty? l)\n         n\n     (if (nil? n)\n         (c (rest l) 1)\n     (c (rest l) (+ n 1) ) ) ) )", "problem": 22, "user": "530c15f7e4b02e82168697d6"}, {"code": "(fn [coll] (reduce + (map (fn [_] 1) coll)))", "problem": 22, "user": "530f94e1e4b08068f379eccc"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "5302ac7fe4b0d8b024fd3731"}, {"code": "(fn [L] (apply + (map (fn [x] 1) L)))", "problem": 22, "user": "530bf87ee4b02e82168697d5"}, {"code": "(fn [coll] (reduce + (map (fn [item] 1) coll)))", "problem": 22, "user": "52fa8e32e4b047fd55836ffa"}, {"code": "(fn [xs]\n  ((fn [xs accum]\n     (if (empty? xs)\n       accum\n       (recur (rest xs) (inc accum))))\n   xs 0))", "problem": 22, "user": "53034738e4b0d8b024fd373e"}, {"code": "(fn [arg] \n  (loop[ls (into '() arg)\n        n 0]\n  (if (empty? ls)\n    n\n    (recur (rest ls)(+ n 1)))))", "problem": 22, "user": "530b9714e4b02e82168697cf"}, {"code": "#(reduce (fn [x _] (inc x)) 0 %)", "problem": 22, "user": "4f320253e4b0d6649770a08d"}, {"code": "(fn [s] (reduce (fn [accum x] (inc accum)) 0 s))", "problem": 22, "user": "5311081be4b08068f379ece3"}, {"code": "#(reduce + (map (fn [x] 1) %)); bugged? #(apply + (for [x %] 1))", "problem": 22, "user": "52e683c0e4b09f7907dd1477"}, {"code": "#(loop [s %1 c 1]\n   (if (nil? (next s))\n     c\n     (recur (rest s) (+ c 1))))", "problem": 22, "user": "52f97c6ae4b047fd55836fea"}, {"code": "#(reduce (fn [a _] (inc a)) 0 %)", "problem": 22, "user": "53110f32e4b08068f379ece4"}, {"code": "#(reduce + (map (fn [_] 1) %))", "problem": 22, "user": "5311cd03e4b08068f379ecef"}, {"code": "(fn addems [stuff]\n  (if (empty? stuff)\n    0\n    (+ 1(addems (rest stuff)))))", "problem": 22, "user": "53120cb5e4b08068f379ecf0"}, {"code": "(fn mycount [v]\n  (loop [s v i 0]\n    (if (nil? (seq s))\n      i\n      (recur (rest s) (inc i))\n      )))", "problem": 22, "user": "5312452be4b08068f379ecf8"}, {"code": "#(reduce \n  (fn [c _] (inc c))\n    0 %)", "problem": 22, "user": "53124ef9e4b08068f379ecf9"}, {"code": "(fn [s] (reduce + (map (fn [x] 1) s)))", "problem": 22, "user": "531276a4e4b08068f379ecfb"}, {"code": "#(reduce (fn [x y] (inc x)) 0 %)", "problem": 22, "user": "530ab94de4b02e82168697c2"}, {"code": "#(reduce (fn[x y] (inc x)) 0 %)", "problem": 22, "user": "5310d569e4b08068f379ecda"}, {"code": "#(reduce + (map (fn [a] 1) %))", "problem": 22, "user": "53121feae4b08068f379ecf4"}, {"code": "(fn how-many [list](if (empty? list) 0 (+ (how-many (rest list)) 1)))", "problem": 22, "user": "5311b367e4b08068f379eced"}, {"code": "(fn len [x] (if (seq x) (+ 1 (len (rest x))) 0))", "problem": 22, "user": "5313165ce4b08068f379ed06"}, {"code": "(fn [y] (reduce + (map (fn [x] 1) y)))", "problem": 22, "user": "53123e3fe4b08068f379ecf7"}, {"code": "#(reduce (fn [c _] (inc c)) 0 %)", "problem": 22, "user": "53136c60e4b08068f379ed08"}, {"code": "#(reduce (fn [a b] (+ a 1)) 0 %)", "problem": 22, "user": "53137526e4b08068f379ed09"}, {"code": "(fn count-elts [li]\n  (cond (empty? li) 0\n        :else (+ 1 (count-elts (rest li)))))", "problem": 22, "user": "5313a2bfe4b08068f379ed0b"}, {"code": "(fn [c] \n  (reduce + (map (constantly 1) c)))", "problem": 22, "user": "5313c007e4b08068f379ed0e"}, {"code": "(fn [s]\n  (loop [s s\n         n 0]\n    (if (empty? s)\n      n\n      (recur (rest s) (inc n)))))", "problem": 22, "user": "5313de03e4b08068f379ed10"}, {"code": "(fn [x]\n  ((fn [x num]\n  (if (first x)\n    (recur (rest x) (inc num))\n    num))x 0))", "problem": 22, "user": "5312807fe4b08068f379ecfc"}, {"code": "(fn my-count [s]\n  (if (empty? s)\n    0\n    (+ (my-count (rest s)) 1)))", "problem": 22, "user": "5310e7aee4b08068f379ecdc"}, {"code": "(fn [s] \n   (loop [c 0]    \n     (if (empty? (drop c s))\n       c\n       (recur (inc c)))))", "problem": 22, "user": "53150a4de4b08068f379ed22"}, {"code": "(fn [x]\n  (loop [co 0 x x]\n    (if (empty? x)\n      co\n      (recur (inc co) (rest x))\n    )\n  )\n)", "problem": 22, "user": "53153466e4b08068f379ed23"}, {"code": "(comp (partial apply +) (partial map #(do % 1)))", "problem": 22, "user": "531308c1e4b08068f379ed04"}, {"code": "(fn [in] (loop [l in cou 0] (if (empty? l) cou (recur (rest l) (inc cou)))))", "problem": 22, "user": "5314318ee4b08068f379ed13"}, {"code": "(fn [s]\n  (reduce (fn [a b] (inc a)) 0 s))", "problem": 22, "user": "531490bde4b08068f379ed17"}, {"code": "(fn [x] \n  (loop [i 0 c x] \n    (if-not (seq c) i (recur (inc i) (rest c)))))", "problem": 22, "user": "531488f3e4b08068f379ed16"}, {"code": "(fn [xs] (reduce + (map (fn [n] (if (= () n) 0 1)) xs)))", "problem": 22, "user": "5314c8f7e4b08068f379ed1d"}, {"code": "(fn [s]\n  (loop [s s c 0]\n    (if (empty? s)\n      c\n      (recur (rest s) (inc c)))))", "problem": 22, "user": "531619c1e4b08068f379ed3d"}, {"code": "(fn [col] (reduce + (map (fn [x] 1) col)))", "problem": 22, "user": "531576b4e4b08068f379ed29"}, {"code": "#(reduce (fn [x y] (inc x)) 0 %)", "problem": 22, "user": "5314eb54e4b08068f379ed21"}, {"code": "(fn [coll]\n  ((fn [xs n]\n    (if (empty? xs)\n      n\n      (recur (rest xs) (inc n))\n      )\n    )\n  coll 0)\n  )", "problem": 22, "user": "53162640e4b08068f379ed40"}, {"code": "reduce (fn [acc x] (+ 1 acc)) 0", "problem": 22, "user": "5311079de4b08068f379ece2"}, {"code": "#(+ 1 (last (interleave % (range))))", "problem": 22, "user": "5316cdcae4b08068f379ed4b"}, {"code": "reduce (fn [num elem] (inc num)) 0", "problem": 22, "user": "52fa9435e4b047fd55836ffc"}, {"code": "#(alength (to-array %))", "problem": 22, "user": "5315a4f0e4b08068f379ed2e"}, {"code": "(fn [x] (loop [i (vec x) counter 0] (if (= [] i) counter (recur (rest i) (+ counter 1)))))", "problem": 22, "user": "5315b53ee4b08068f379ed31"}, {"code": "(fn [se]\n  (loop [s se\n         c 0]\n    (if (empty? s)\n      c\n      (recur (rest s) (inc c))\n      )\n    )\n  )", "problem": 22, "user": "5315d4bfe4b08068f379ed37"}, {"code": "#(apply max (keys (zipmap (iterate inc 1) %)))", "problem": 22, "user": "53172425e4b08068f379ed53"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "53176d04e4b08068f379ed58"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "52d2f457e4b099d49816f0ba"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "531839ffe4b08068f379ed6a"}, {"code": "reduce (fn [c _] (+ c 1)) 0", "problem": 22, "user": "52be0263e4b07a9af579230e"}, {"code": "(fn [coll] (reduce + (map (fn [x] 1) coll)))", "problem": 22, "user": "52d42021e4b09f7907dd132a"}, {"code": "reduce (fn [x,y] (inc x)) 0", "problem": 22, "user": "53194ba3e4b08068f379ed7a"}, {"code": "#(let [f (fn [p1 p2] (if (nil? (next p1)) p2 (recur (next p1) (inc p2))))]\n     (f % 1))", "problem": 22, "user": "53195519e4b08068f379ed7b"}, {"code": "(fn [l] (inc (first (last (map-indexed vector l)))))", "problem": 22, "user": "52265e41e4b04e78ff2e1981"}, {"code": "(fn x [s] (if (empty? s) 0 (+ 1 (x (rest s)))))", "problem": 22, "user": "531a0709e4b08068f379ed87"}, {"code": "(fn c [seq]\n  (if (empty? seq)\n    0\n    (inc (c (rest seq)))))", "problem": 22, "user": "53134005e4b08068f379ed07"}, {"code": "(fn [x] (reduce + (map (fn [x] 1) x)))", "problem": 22, "user": "531a3914e4b08068f379ed88"}, {"code": "(fn [l] (reduce + (map (fn [x] 1) l)))", "problem": 22, "user": "531902b1e4b08068f379ed77"}, {"code": "(fn cnt [seq]\n  (if (empty? seq)\n    0\n    (inc (cnt (next seq)))))", "problem": 22, "user": "5315ec83e4b08068f379ed39"}, {"code": "(fn [x]\n  (loop [lst x cnt 0]\n    (if (empty? lst)\n      cnt\n      (recur (next lst) (+ cnt 1)))))", "problem": 22, "user": "531792d9e4b08068f379ed5e"}, {"code": "(fn [s] (reduce (fn [acc x] (+ acc 1)) 0 s))", "problem": 22, "user": "531ba143e4b08068f379ed91"}, {"code": "(fn [xs] (reduce (fn [acc _] (inc acc))  0 xs))", "problem": 22, "user": "531bfb69e4b08068f379ed97"}, {"code": "(fn count-a-seq [l]\n(if\n(empty? l) 0 (+ 1 (count-a-seq(rest l)))))", "problem": 22, "user": "531bbf2ae4b08068f379ed95"}, {"code": "#(loop [index 0\n        current-list %]\n   (if-not (seq current-list)\n     index\n     (recur (inc index) (rest current-list))))", "problem": 22, "user": "531c7f0de4b08068f379eda4"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "531c7e0fe4b08068f379eda3"}, {"code": "(fn [l]\n  (loop [l l\n         n 0]\n    (if(empty? l)\n    n\n    (recur (rest l) (inc n))\n      )))", "problem": 22, "user": "531cbf46e4b08068f379eda6"}, {"code": "(fn get-count [coll]\n  (loop [coll coll, n 0]\n    (if (nil? (first coll))\n      n\n      (recur (rest coll) (inc n)))))", "problem": 22, "user": "531ccb1fe4b08068f379eda7"}, {"code": "(fn [x]\n  (reduce + (map (fn [x] 1) x)))", "problem": 22, "user": "529bd5dfe4b04e0c58e87b51"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "531cdafbe4b08068f379edaa"}, {"code": "reduce (fn [counter _] (+ 1 counter)) 0", "problem": 22, "user": "52c0b2b9e4b07a9af5792353"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "531c7bdde4b08068f379eda2"}, {"code": "#(reduce (fn [r,i] (inc r)) 0 %)", "problem": 22, "user": "531d53dbe4b08068f379edae"}, {"code": "#(loop [a-seq % n 0]\n   (if (empty? a-seq)\n     n\n     (recur (rest a-seq) (inc n))))", "problem": 22, "user": "521ceb02e4b0c4ef0be830a5"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "531d77d7e4b08068f379edaf"}, {"code": "#( reduce ( fn[c _] (inc c)) 0 %)", "problem": 22, "user": "531c9170e4b08068f379eda5"}, {"code": "(fn [col]\n  (loop [col col num 0]\n    (if (empty? col) num\n    (recur (rest col) (inc num)))))", "problem": 22, "user": "531c57ace4b08068f379ed9b"}, {"code": "(fn [lst] (reduce (fn [n _] (+ n 1)) 0 lst))", "problem": 22, "user": "5319d9ade4b08068f379ed84"}, {"code": "reduce (fn [c _] (inc c)) 0", "problem": 22, "user": "52dd4fb4e4b09f7907dd13df"}, {"code": "#(reduce\n  (fn [c _] (inc c))\n  0 %)", "problem": 22, "user": "531e140ce4b08068f379edb6"}, {"code": "#(reduce (fn [acc _](inc acc)) 0 %)", "problem": 22, "user": "531b641ce4b08068f379ed8e"}, {"code": "(fn [a-seq]\n  (reduce \n    (fn [counter _]\n      (inc counter))\n   0 a-seq))", "problem": 22, "user": "531dc21be4b08068f379edb1"}, {"code": "#(reduce (fn [c _] (inc c)) 0 %)", "problem": 22, "user": "52474133e4b05ef8e38e635e"}, {"code": "#(apply + (map (fn [x] 1) %))", "problem": 22, "user": "531dfaf5e4b08068f379edb3"}, {"code": "#(reduce + (map (fn [_] 1) %))", "problem": 22, "user": "531f4e97e4b08068f379edc5"}, {"code": "#(reduce (fn [acc _] (inc acc)) 0 %)", "problem": 22, "user": "53121863e4b08068f379ecf3"}, {"code": "#(reduce (fn [x y] (inc x)) 0 %)", "problem": 22, "user": "531c0619e4b08068f379ed98"}, {"code": "(fn count-coll[coll]\n (if (empty? coll) 0 (+ 1(count-coll (rest coll)))) \n)", "problem": 22, "user": "5306bceee4b02e821686979b"}, {"code": "reduce (fn [acc _] (inc acc)) 0", "problem": 22, "user": "531f7a2de4b08068f379edc6"}, {"code": "#(reduce (fn[x y] (inc x)) 0 %)", "problem": 22, "user": "531eef0be4b08068f379edbd"}, {"code": "(fn m-count [x]\n            (if (first x)\n                (inc (m-count (rest x)))\n                0))", "problem": 22, "user": "53201eece4b08068f379edce"}, {"code": "#(reduce (fn [c _] (inc c)) 0 %)", "problem": 22, "user": "523dba47e4b06956f8342c98"}, {"code": "(fn [coll]\n    (reduce #(let [a %1 b %2] (+ a 1)) (cons 0 coll)))", "problem": 22, "user": "53207e3de4b09d4e7a9b54a3"}, {"code": "(fn [word]\n  (loop [letters word\n         x 0]\n    (if (empty? letters)\n      x\n      (recur (rest letters) (inc x)))))", "problem": 22, "user": "531e5c81e4b08068f379edba"}, {"code": "#(reduce + (map (fn[x] 1) %1))", "problem": 22, "user": "531d36ace4b08068f379edad"}, {"code": "(fn [coll]\n  (loop [coll coll\n         counter 0]   \n    (if (seq coll) \n       (recur (rest coll) (inc counter))\n        counter)))", "problem": 22, "user": "5320bc6ae4b09d4e7a9b54a7"}, {"code": "#(reduce + (map (fn[_]1) %))", "problem": 22, "user": "531f1e63e4b08068f379edc2"}, {"code": "(fn [xs] (reduce (fn [acc _] (+ acc 1)) 0 xs))", "problem": 22, "user": "5321a655e4b09d4e7a9b54b8"}, {"code": "(partial reduce (fn [x _] (inc x)) 0)", "problem": 22, "user": "531f10bce4b08068f379edc0"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "5320cd49e4b09d4e7a9b54a8"}, {"code": "#(inc(last (last\n (map vector % (range)))))", "problem": 22, "user": "531b8c27e4b08068f379ed90"}, {"code": "#(reduce (fn [x _] (inc x)) 0 %)", "problem": 22, "user": "53164ccce4b08068f379ed45"}, {"code": "#(loop [l %\n        r 0]\n   (if (empty? l)\n     r\n     (recur (rest l) (inc r))))", "problem": 22, "user": "53227243e4b09d4e7a9b54c1"}, {"code": "(fn [coll] \n  (loop [xs coll acc 0]\n    (if (empty? xs)\n      acc\n      (recur (rest xs) (inc acc)))))", "problem": 22, "user": "4ff548dee4b0678c553fc368"}, {"code": "(fn [sofar ks]\n  (if (empty? ks)\n    sofar\n    (recur (inc sofar) (rest ks) )\n  )\n) 0", "problem": 22, "user": "531cd41ee4b08068f379eda9"}, {"code": "(fn [x] (loop [rst x cnt 0] (if (= (first rst) nil) cnt (recur (rest rst) (+ cnt 1)))))", "problem": 22, "user": "53212063e4b09d4e7a9b54ae"}, {"code": "(fn cont [x]\n  (loop [x x i 0]\n  (if (empty? x)\n    i\n    (recur (rest x) (+ i 1)))))", "problem": 22, "user": "5322d370e4b09d4e7a9b54c7"}, {"code": "(fn ith [c]\n  (if (seq? c)\n    (if (nil? (first c)) 0 (+ 1 (ith (rest c))))\n    (ith (seq c))\n  )\n)", "problem": 22, "user": "532103abe4b09d4e7a9b54ab"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "531c53f9e4b08068f379ed9a"}, {"code": "(fn myCount \n  ([] 0 )\n  ([tail] \n   (if (empty? tail) \n     0\n     (+ 1 (myCount (rest tail))))))", "problem": 22, "user": "53223f5de4b09d4e7a9b54bf"}, {"code": "(fn [coll] (reduce (fn [v _] (inc v)) 0 coll))", "problem": 22, "user": "532347dde4b09d4e7a9b54cc"}, {"code": "reduce (fn [m _] (+ m 1)) 0", "problem": 22, "user": "5322d364e4b09d4e7a9b54c6"}, {"code": ";(partial reduce (fn [x _] (inc x)) 0)\n#(reduce (fn [x _](inc x)) 0 %)", "problem": 22, "user": "5323a414e4b09d4e7a9b54d1"}, {"code": "(fn !\n  ([l]\n  (! l 0))\n  ([l s]\n   (if (empty? l)\n     s\n     (! (rest l) (+ 1 s)))\n   ))", "problem": 22, "user": "5323f4c6e4b09d4e7a9b54d4"}, {"code": "(fn [l] (reduce (fn [acc _] (+ 1 acc)) 0 l))", "problem": 22, "user": "53217912e4b09d4e7a9b54b3"}, {"code": "(fn [arr]\n  (loop [c 0\n         a arr]\n    (if-not (empty? a)\n      (recur (inc c) (rest a))\n      c)))", "problem": 22, "user": "532418f3e4b09d4e7a9b54d8"}, {"code": "#(loop [n 0 l %] (if (empty? l) n (recur (+ 1 n) (drop 1 l))))", "problem": 22, "user": "53244c9de4b09d4e7a9b54db"}, {"code": "#(reduce (fn [x y] (inc x)) 0 %)", "problem": 22, "user": "51dd876ce4b0c33a4e1da40a"}, {"code": "(fn myseqcount\n  [sq]\n  (if (empty? sq) 0\n    (loop [s sq n 1]\n      (if (next s)\n        (recur (next s) (inc n))\n        n))))", "problem": 22, "user": "53219cece4b09d4e7a9b54b7"}, {"code": "(fn [seq] (reduce (fn [list num] (+ 1 list)) 0 seq))", "problem": 22, "user": "518ee4f9e4b0cd6ff51676a5"}, {"code": "#(loop [col %\n        iter 0]\n   (if (nth col iter nil)\n     (recur col (inc iter))\n     iter)\n  )", "problem": 22, "user": "532439b1e4b09d4e7a9b54da"}, {"code": "#(reduce (fn [c _] (inc c)) 0 %)", "problem": 22, "user": "5132ef7ee4b021281ec7b6d4"}, {"code": "reduce (fn [x _] (inc x)) 0", "problem": 22, "user": "521ceefee4b0c4ef0be830a6"}, {"code": "(fn count1 [col]\n  (if (nil? col) 0\n    (+ (count1 (next col)) 1)))", "problem": 22, "user": "51bdebece4b0ff155d51d2b7"}, {"code": "(fn[y](reduce + (map (fn[x] 1) y)))", "problem": 22, "user": "532631e1e4b09d4e7a9b54ea"}, {"code": "#(apply + (map (fn [x] 1) %))", "problem": 22, "user": "5326c5f7e4b09d4e7a9b54f2"}, {"code": "(fn newcount [x]\n  (if (seq x)\n    (inc (newcount (rest x)))\n    0))", "problem": 22, "user": "532727bae4b09d4e7a9b54fa"}, {"code": "#(apply + (map (fn [_] 1) %))", "problem": 22, "user": "4ec7fa6e535d6d7199dd36ee"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "50f3d35ce4b041536e2eca3f"}, {"code": "(fn mycount [x]\n  (if (empty? x) 0 (+ 1 (mycount (drop 1 x))))\n)\n;#(reduce (fn [x _] (+ 1 x)) 0 %)", "problem": 22, "user": "5327f32be4b09d4e7a9b5502"}, {"code": "#(apply + (map (fn[_] 1)%))", "problem": 22, "user": "531f0a26e4b08068f379edbf"}, {"code": "(fn rc\n  ([coll] (rc coll 0))\n  ([coll n] \n   (if (empty? coll)\n     n\n     (rc (rest coll) (+ n 1)))))", "problem": 22, "user": "5321008ee4b09d4e7a9b54aa"}, {"code": "(fn [x] (#(if (= (first %1) nil)\n               %2\n               (recur (rest %1) (inc %2))) x 0))", "problem": 22, "user": "5328e449e4b09d4e7a9b550c"}, {"code": "(partial reduce (fn [acc e] (+ acc 1)) 0)", "problem": 22, "user": "5328febee4b09d4e7a9b550d"}, {"code": "#(alength (to-array %))", "problem": 22, "user": "4f664483e4b07046d9f4ef54"}, {"code": "(fn [x] (.length (vec x)))", "problem": 22, "user": "52fe869be4b047fd5583703f"}, {"code": "(fn [c] (apply + (map (fn [x] 1) c)))", "problem": 22, "user": "53224d45e4b09d4e7a9b54c0"}, {"code": "(fn [x] \n  (\n   (fn [l c] \n     (if (empty? l) \n       c \n       (recur (rest l) (+ 1 c))\n       )) x 0))", "problem": 22, "user": "50a95127e4b07e35d68b27af"}, {"code": "(fn [x] (apply + (map (constantly 1) x)))", "problem": 22, "user": "532a111ee4b09d4e7a9b5520"}, {"code": "reduce (fn [size _] (inc size)) 0", "problem": 22, "user": "532ab0bde4b09d4e7a9b5527"}, {"code": "(fn [c] (reduce (fn [a b] (inc a)) 0 c))", "problem": 22, "user": "5327170ce4b09d4e7a9b54f8"}, {"code": "#(reduce (fn [c _] (inc c)) 0 %)", "problem": 22, "user": "52d18b86e4b0d9f9285948de"}, {"code": "reduce (fn [a _] (inc a)) 0", "problem": 22, "user": "532afdc5e4b09d4e7a9b552e"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "532a033be4b09d4e7a9b551f"}, {"code": "(fn my-count [coll] \n  (if (empty? coll) 0 (+ 1 (my-count (rest coll)))))", "problem": 22, "user": "5317e0eee4b08068f379ed64"}, {"code": "#(reduce (fn [x y] (inc x) ) 0 % )", "problem": 22, "user": "532aff4ae4b09d4e7a9b552f"}, {"code": "(fn f [l] (if (empty? l) 0 (+ 1 (f (rest l)))))", "problem": 22, "user": "532b43c3e4b09d4e7a9b5531"}, {"code": "(fn [col] (reduce (fn [x y] (inc x)) 0 col))", "problem": 22, "user": "5001ce99e4b0678c553fc41f"}, {"code": "(fn [coll] \n  (reduce \n   (fn [cnt item] (+ 1 cnt)) \n   0 \n   coll))", "problem": 22, "user": "532b930be4b09d4e7a9b5534"}, {"code": "(fn [coll]\n  (alength (object-array coll)))", "problem": 22, "user": "531016d0e4b08068f379ecd1"}, {"code": "(fn [l]\n        (loop [a l, b 0]\n          (if a\n            (recur (next a) (inc b))\n            b)))", "problem": 22, "user": "532bce35e4b09d4e7a9b5536"}, {"code": "(fn [s] (alength (into-array s)))", "problem": 22, "user": "53223d70e4b09d4e7a9b54be"}, {"code": "(fn cnt [xs]\n  (if (empty? xs)\n    0\n    (inc (cnt (rest xs)))))", "problem": 22, "user": "532b9075e4b09d4e7a9b5533"}, {"code": "(fn [x] (loop [size 1 xx x] (if (next xx) (recur (inc size) (rest xx)) size)))", "problem": 22, "user": "532c0507e4b09d4e7a9b553c"}, {"code": "(fn [c] (loop [c c x 0]\n          (if (empty? c)\n            x\n            (recur (rest c) (+ x 1)))))", "problem": 22, "user": "4dbe04b2535d020aff1edf56"}, {"code": "(fn [c] (reduce (fn [i & rest] (inc i)) 0 c))", "problem": 22, "user": "52781d94e4b03e8d9a4a751a"}, {"code": "#(apply + (map (fn [x] 1) %))", "problem": 22, "user": "5004034ce4b0678c553fc447"}, {"code": "(fn [x]\n  (reduce + (map (fn [x] 1) x))\n  )", "problem": 22, "user": "532cb6bbe4b019098a6f8b33"}, {"code": "(fn [l]\n  (reduce + (map (fn [i] 1) l)))", "problem": 22, "user": "532cb870e4b019098a6f8b34"}, {"code": "#(reduce (fn [n _] (inc n)) 0 %)", "problem": 22, "user": "532cf410e4b019098a6f8b38"}, {"code": "(fn [a]\n  (loop [a a n 0]\n    (if (= a '())\n      n\n      (recur (rest a) (inc n))\n      )\n    )\n  )", "problem": 22, "user": "532dfbdbe4b019098a6f8b44"}, {"code": "(fn [q] (inc (last (map (fn [_ n] n) q (range)))))", "problem": 22, "user": "532e0b20e4b019098a6f8b45"}, {"code": "#(reduce (fn [x, _] (+ 1 x)) 0 %)", "problem": 22, "user": "532e2e58e4b019098a6f8b47"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "532d4760e4b019098a6f8b3a"}, {"code": "(fn [aseq]\n(loop [number 0 sq aseq]\n  (if (empty? sq) number\n    (recur (inc number) (rest sq)))))", "problem": 22, "user": "532686e6e4b09d4e7a9b54ef"}, {"code": "(fn [s] (reduce (fn [x y] (inc x)) 0 s))", "problem": 22, "user": "51d46747e4b013d740b70de3"}, {"code": "#(reduce + (map (fn _ [x] 1) %))", "problem": 22, "user": "51d0977fe4b067c365486352"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "532ecd44e4b019098a6f8b49"}, {"code": "(fn [the-seq]\n  (loop [i 0 sub-seq the-seq]\n    (if (nil? (seq sub-seq))\n      i\n      (recur (inc i) (rest sub-seq)))))", "problem": 22, "user": "4f80a906e4b033992c121bf7"}, {"code": "(fn [s]\n  (loop [l 0 ss (seq s)]\n    (if (nil? ss)\n      l\n      (recur (inc l) (butlast ss)))))", "problem": 22, "user": "52fbbadde4b047fd5583700f"}, {"code": "#(loop [c %1, i 0]\n    (if (empty? c)\n\t\ti\n\t\t(recur (rest c) (inc i))))", "problem": 22, "user": "53300924e4b019098a6f8b55"}, {"code": "reduce (fn[n _] (inc n)) 0", "problem": 22, "user": "52ee9ac7e4b05e3f0be25ec9"}, {"code": "reduce (fn [i _] (inc i)) 0", "problem": 22, "user": "533056a4e4b019098a6f8b5b"}, {"code": "(fn [xs]\n  (loop [n 0 xs xs]\n    (if (empty? xs)\n      n\n      (recur (inc n) (rest xs)))))", "problem": 22, "user": "533018b2e4b019098a6f8b56"}, {"code": "(fn [s] \n  ((fn [s n] (if (next s) (recur (next s) (inc n)) n))\n  s \n  1))", "problem": 22, "user": "53308604e4b019098a6f8b5f"}, {"code": "; Return the count of elements in a sequence (can't use count)\n(fn f ([c]\n         (          (\n                      fn g ([d n]\n                            (cond\n                              (= d nil) n\n                              (= (first d) nil) n\n                              (= (next d) nil) (+ n 1)\n                              :else (g (next d) (+ n 1))\n                              )\n                            )\n                      ) c 0\n                    )\n          )\n  )", "problem": 22, "user": "53307da1e4b019098a6f8b5e"}, {"code": "reduce (fn [i s] (+ i 1)) 0", "problem": 22, "user": "532f078fe4b019098a6f8b4b"}, {"code": "(fn [x] \n  (loop [acc 0, tail x]\n    (if (empty? tail)\n      acc\n      (recur (inc acc) (rest tail)))))", "problem": 22, "user": "532db3e7e4b019098a6f8b3d"}, {"code": "reduce (fn [l r] (inc l)) 0", "problem": 22, "user": "525ab6cfe4b0cb4875a45cf9"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "5316a5bbe4b08068f379ed49"}, {"code": "#(reduce (fn [n _] (inc n)) 0 %)", "problem": 22, "user": "53315c78e4b019098a6f8b67"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "4f93539de4b0dcca54ed6cba"}, {"code": "(fn [li] \n  (loop [len 0\n         li-rest li]\n    (cond\n     (empty? li-rest) len\n     :else (recur (+ len 1) (rest li-rest)))))", "problem": 22, "user": "530c4903e4b02e82168697da"}, {"code": "(fn ! [col] (if(empty? col) 0 (+ 1 (! (rest col)))))", "problem": 22, "user": "5318f85ae4b08068f379ed76"}, {"code": "#(reduce (fn [a _] (inc a)) 0 %)", "problem": 22, "user": "5318594ee4b08068f379ed6d"}, {"code": "reduce (fn [a b] (inc a)) 0", "problem": 22, "user": "532ae82be4b09d4e7a9b552b"}, {"code": "#(reduce + (map (fn [_] 1) %))", "problem": 22, "user": "5331205fe4b019098a6f8b64"}, {"code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "problem": 22, "user": "5331e443e4b019098a6f8b70"}, {"code": "(fn my-count [tot coll] \n  (if (empty? (rest coll)) \n    (+ 1 tot) \n    (my-count (+ 1 tot) (rest coll)))) 0", "problem": 22, "user": "5328b1ece4b09d4e7a9b5508"}, {"code": "; (fn mycount [coll]\n;   (if (empty? coll)\n;     0\n;     (+ 1 (mycount (rest coll)))))\n\n;; more clojurey\n(fn [coll]\n  (loop [res 0\n         coll coll]\n    (if (empty? coll)\n      res\n      (recur (inc res) (rest coll)))))", "problem": 22, "user": "53322cece4b019098a6f8b73"}, {"code": "(fn my-count\n  ([l]\n     (my-count l 0))\n  ([l n]\n   (if (nil? l)\n     n\n     (recur (next l) (inc n)))))", "problem": 22, "user": "53325956e4b019098a6f8b74"}, {"code": "(fn [seq]\n    (reduce (fn [c _] (inc c)) 0 seq))", "problem": 22, "user": "51f5539fe4b0abb92f97f9cd"}, {"code": "#(loop [mylist % acc 0] (if (empty? mylist) acc (recur (rest mylist) (inc acc))))", "problem": 22, "user": "53329d4ee4b019098a6f8b75"}, {"code": "(fn [x] (reduce + (map (fn [i] 1) x)))", "problem": 22, "user": "5332f9e1e4b019098a6f8b79"}, {"code": "#(->(reduce (fn [n _] (inc n)) 0 (seq %)))", "problem": 22, "user": "53286389e4b09d4e7a9b5504"}, {"code": "(fn [data] (reduce (fn [acc x] (+ acc 1)) 0 data))", "problem": 22, "user": "53333e7be4b019098a6f8b7e"}, {"code": "#(let [x 1] (reduce (fn [z y]  (+ x z)) (cons 0 (seq %))))", "problem": 22, "user": "530262c8e4b0d8b024fd3728"}, {"code": "(fn [col]\n  (reduce (fn [a b] (+ a 1)) 0 col))", "problem": 22, "user": "53334cb2e4b019098a6f8b81"}, {"code": "(fn count-elements [x]\n  (loop [x x\n         n 0]\n    \t(if (empty? x)\n          n\n          (recur (rest x) (inc n)))))", "problem": 22, "user": "533431e4e4b019098a6f8b8d"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "533160a1e4b019098a6f8b68"}, {"code": "#(reduce + (map (fn [_] 1) %))", "problem": 22, "user": "53348343e4b0656e627bfd6d"}, {"code": "#(reduce + (map (fn [x] 1) % ))", "problem": 22, "user": "53350264e4b0656e627bfd73"}, {"code": "#(loop [item % result 0] (if(empty? item) result (recur (rest item) (inc result))))", "problem": 22, "user": "531d34cfe4b08068f379edac"}, {"code": "(fn f [x] (alength (to-array x)))", "problem": 22, "user": "524b524ce4b09eba1c0223d1"}, {"code": "#(reduce (fn [x _] (inc x)) 0 %)", "problem": 22, "user": "53351564e4b0656e627bfd75"}, {"code": ";; (fn [xs] (reduce (fn [x y] (inc x)) 0 xs))\n(partial reduce (fn [x _] (inc x)) 0)\n;; reduce (fn [a _] (inc a)) 0", "problem": 22, "user": "533696b9e4b0e30313ee6c7c"}, {"code": "(fn [z] (reduce (fn [x y] (inc x)) 0 z))", "problem": 22, "user": "5333524ee4b019098a6f8b83"}, {"code": "(fn [col]\n  (loop [c col\n         acc 0]\n    (if (seq c)\n      (recur (rest c) (inc acc))\n      acc)))", "problem": 22, "user": "5336a339e4b0e30313ee6c7d"}, {"code": "#(alength (to-array %))", "problem": 22, "user": "5336ca32e4b0e30313ee6c80"}, {"code": "(fn county ([x] (county x 1))\n  ([x s]\n   (cond (empty? (rest x)) s\n         :else (county (rest x) (inc s)))))", "problem": 22, "user": "5325cf91e4b09d4e7a9b54e8"}, {"code": "(partial reduce (fn [a b] (inc a)) 0)", "problem": 22, "user": "4eadc217535d7eef30807321"}, {"code": "(fn c \n  ([l] (c l 0))\n  ([l n] (if (empty? l)\n           n\n           (recur (rest l) (inc n)))))", "problem": 22, "user": "53372d7de4b0e30313ee6c87"}, {"code": "(fn count'\n  ([x] (count' x 0))\n  ([x i]\n   (if (empty? x)\n     i\n     (recur (rest x) (inc i)))))", "problem": 22, "user": "520fff3ce4b080a8d9b9d633"}, {"code": "(fn myCount [x]\n    (let [y 1]\n      ((fn c [n a]\n           (if (= (rest a) ())\n               n\n             (recur (+ n 1) (rest a)))) y x)))", "problem": 22, "user": "53372d32e4b0e30313ee6c86"}, {"code": "(fn[s](loop[sq (seq s) len 0]\n         (if (not (seq sq))\n           len\n           (recur(rest sq) (inc len)))))", "problem": 22, "user": "53266a93e4b09d4e7a9b54ee"}, {"code": "(fn [x]\n  (reduce (fn [x y] (inc x)) 0 x))", "problem": 22, "user": "50e2cffce4b0ae09a0e7de7e"}, {"code": "(fn [s]\n  (loop [r s\n         c 0]\n   \t(if-not (= r ())\n      (recur (rest r) (+ c 1))\n      c\n      )\n    )\n  )", "problem": 22, "user": "52c45793e4b0c2d177d620d7"}, {"code": "#(reduce (fn [x _] (inc x)) 0 %)", "problem": 22, "user": "5338387de4b0e30313ee6c91"}, {"code": "(fn c [xs] \n  (if (empty? xs)\n      0\n      (+ 1 (c (rest xs)))))", "problem": 22, "user": "5334d4f2e4b0656e627bfd71"}, {"code": "(fn total ([items] (total items 0))([items x] (if (= nil (last items)) x (total (rest items) (+ 1 x)))))", "problem": 22, "user": "5338c965e4b0e30313ee6ca0"}, {"code": "#(\n \tloop [li % co 0]\n\t(if (empty? li)\n      co\n      (recur (rest li) (inc co)))\n    \n)", "problem": 22, "user": "5338558de4b0e30313ee6c96"}, {"code": "(fn len [seq] (if (empty? seq) 0 (+ (len (rest seq)) 1)))", "problem": 22, "user": "5338e33fe4b0e30313ee6ca1"}, {"code": "(fn [s]\n  (let [myfn (fn [s acc] (if (= () (take 1 s)) acc (recur (rest s) (+ acc 1))))]\n  (myfn s 0))\n)", "problem": 22, "user": "5337a020e4b0e30313ee6c8b"}, {"code": "(fn cnt [x] (if (seq x) (+ 1 (cnt (rest x))) 0))", "problem": 22, "user": "53388e2de4b0e30313ee6c9c"}, {"code": "(fn [tl] ((fn countl [l n] (if (empty? l) n (countl (rest l) (+ n 1)))) tl 0))", "problem": 22, "user": "5335f378e4b0e30313ee6c73"}, {"code": "#(loop [arg %1\n        cnt 0]\n   (if (nil? arg)\n     cnt\n     (recur (next arg) (+ 1 cnt))))", "problem": 22, "user": "532c82e8e4b09d4e7a9b5545"}, {"code": "(fn[xs] (reduce (fn[n _] (+ n 1)) 0 xs))", "problem": 22, "user": "5339cb07e4b0e30313ee6caf"}, {"code": "#(reduce + (map(constantly 1) %))", "problem": 22, "user": "5339c08ee4b0e30313ee6cad"}, {"code": "(fn [x]\n(reduce + (map (fn [x] 1) x)))", "problem": 22, "user": "531541a0e4b08068f379ed25"}, {"code": "#(apply + (map (fn [x] 1) %))", "problem": 22, "user": "53340d3ce4b019098a6f8b89"}, {"code": "(fn bullshit\n  [li]\n  (reduce + (map (fn [x] 1) li)))", "problem": 22, "user": "53383c74e4b0e30313ee6c92"}, {"code": "#(reduce (fn [n _] (inc n)) 0 %)", "problem": 22, "user": "53377725e4b0e30313ee6c89"}, {"code": "(fn [col]\n\t(loop [c (into [] col) i 1]\n\t  (if (next c)\n\t    (recur (pop c) (inc i))\n\t    i)))", "problem": 22, "user": "5339af7de4b0e30313ee6cab"}, {"code": "#(apply + (map (fn[x] 1) %))", "problem": 22, "user": "52da20c7e4b09f7907dd13b3"}, {"code": "(fn [collection]\n  (if (empty? collection)\n     0\n  (loop [col collection\n       index 1]\n  (if (empty? (rest col))\n      index\n      (recur (rest col) (inc index))))))", "problem": 22, "user": "516081e7e4b009fba0926e28"}, {"code": "(comp alength to-array)", "problem": 22, "user": "53396c03e4b0e30313ee6ca7"}, {"code": "(partial reduce (fn [c,_] (inc c)) 0)", "problem": 22, "user": "533ab9abe4b0e30313ee6cbf"}, {"code": "(fn [s]\n  (loop [sq s\n         c 0]\n    (if (= sq [])\n      c\n      (recur (rest sq) (inc c)))))", "problem": 22, "user": "506d5e4ce4b0a302964c5493"}, {"code": "(partial reduce (fn [len _] (inc len)) 0)", "problem": 22, "user": "5339c105e4b0e30313ee6cae"}, {"code": "(fn my-count [s] (reduce (fn [i x] (+ 1 i)) 0 s))", "problem": 22, "user": "533aff58e4b0e30313ee6cc2"}, {"code": "#(reduce (fn [c _] (inc c)) 0 % )", "problem": 22, "user": "533ae581e4b0e30313ee6cc0"}, {"code": "#(loop [s %1 c 0]\n   (if (empty? s)\n     c\n     (recur (rest s) (+ 1 c))))", "problem": 22, "user": "532df9c5e4b019098a6f8b42"}, {"code": "(fn [list] (loop [xs list c 0]\n             (if (empty? xs)\n               c\n               (recur (rest xs) (inc c)))))", "problem": 22, "user": "5339eb56e4b0e30313ee6cb2"}, {"code": "#(reduce (fn [old el] (inc old)) 0 %1)", "problem": 22, "user": "53075d82e4b02e82168697a1"}, {"code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "problem": 22, "user": "5339edfbe4b0e30313ee6cb3"}, {"code": "#( (fn _n [sq, n] (if (first sq) (_n (rest sq) (+ n 1) ) n ) ) % 0)", "problem": 22, "user": "533a2f7be4b0e30313ee6cb8"}, {"code": "reduce (fn [n, value] (+ n 1)) 0", "problem": 22, "user": "533b1138e4b0e30313ee6cc5"}, {"code": "#(reduce (fn [c _] (inc c)) 0 %)", "problem": 22, "user": "530ccf2ce4b08068f379ec9b"}, {"code": "(fn [list] \n  (loop [restOfList list \n         length 0] \n  \t(if (= [] (rest restOfList)) \n      (inc length) \n      (recur (rest restOfList) \n        \t(inc length)))))", "problem": 22, "user": "529862dfe4b02ebb4ef75055"}, {"code": "(partial reduce (fn [x y] (inc x)) 0)", "problem": 22, "user": "533a7d56e4b0e30313ee6cbc"}, {"code": "#(reduce (fn [total b] (inc total)) 0 %)", "problem": 22, "user": "533b1dc4e4b0e30313ee6cc7"}, {"code": "#(loop [l 0, w %]\n(if (not (nil? (first w)))\n  (recur (inc l) (rest w))\n  l))", "problem": 22, "user": "533b36c0e4b0e30313ee6ccb"}, {"code": "#(reduce (fn [i _] (inc i)) 0 %)", "problem": 22, "user": "533cd2e2e4b085b17e897d75"}, {"code": "#(alength (to-array %))", "problem": 22, "user": "533c0c12e4b0e30313ee6cd4"}, {"code": "#(loop [seq %1\n        len 0]\n   (if (empty? seq)\n     len\n     (recur (rest seq) (inc len))))", "problem": 22, "user": "533d2ea5e4b085b17e897d7a"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "533cdebde4b085b17e897d76"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "533c2ccfe4b0e30313ee6cd9"}, {"code": "(fn [s]\n  (loop [r s\n         i 0]\n    (if (seq r)\n      (recur (rest r) (inc i))\n      i)))", "problem": 22, "user": "533df95de4b085b17e897d86"}, {"code": "(fn x [seq] \n  (loop [l 0 s seq]\n     (if (empty? s)\n        l\n        (recur (inc l) (rest s))\n     )          \n  )\n)", "problem": 22, "user": "533ea7e8e4b085b17e897d94"}, {"code": "(fn [L]   \n\t((fn cnt [xs c]\n       (if (= xs ()) c (cnt (rest xs) (inc c)))) L 0)\n  )", "problem": 22, "user": "533e45a7e4b085b17e897d8c"}, {"code": "(fn [coll] (reduce + (map (fn [x] 1) coll)))", "problem": 22, "user": "533f09e1e4b085b17e897d9a"}, {"code": "(fn [l] \n  (loop [c 0\n         li l]\n    (if (= (first li) nil)\n      c (recur (+ c 1) (rest li)))))", "problem": 22, "user": "533ee560e4b085b17e897d98"}, {"code": "#(reduce (fn [x _] (inc x)) 0 %)", "problem": 22, "user": "533f1584e4b085b17e897d9b"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "533cebf1e4b085b17e897d78"}, {"code": "(fn mycount [x](loop[lst x cnt 0]\n                   (if(empty? lst)\n                    cnt\n                    (recur (rest lst)(inc cnt)))))", "problem": 22, "user": "533078b5e4b019098a6f8b5c"}, {"code": "(fn [items] (reduce (fn [i _] (inc i)) 0 items))", "problem": 22, "user": "53401430e4b085b17e897da4"}, {"code": "(fn foo [c]\n  (loop [ni 0 ci c]\n    (if (first ci)\n        (recur (inc ni) (rest ci))\n        ni)))", "problem": 22, "user": "53402a19e4b085b17e897da5"}, {"code": "#(first (last (map vector (iterate inc 1) %)))", "problem": 22, "user": "534056fce4b085b17e897dac"}, {"code": "(fn [y] \n  ((fn count-this [x, counter]\n     (cond (empty? x) counter\n           :else (count-this (rest x) (+ counter 1)))) \n   y 0))", "problem": 22, "user": "53407963e4b085b17e897dad"}, {"code": "#(reduce (fn [s _] (+ 1 s)) 0 %)", "problem": 22, "user": "53409368e4b085b17e897daf"}, {"code": "(fn [s]\n  (loop [c 0 s (seq s)]\n    (if (seq? s)\n    \t(recur (inc c) (next s))\n    \tc)))", "problem": 22, "user": "5340c4f6e4b085b17e897db0"}, {"code": "#(alength (to-array %))", "problem": 22, "user": "533e8b54e4b085b17e897d8f"}, {"code": "(fn [x] (loop [cnt 0 remainder x]\n          (if (= remainder [])\n            cnt\n            (recur (+ cnt 1) (rest remainder))\n            )))", "problem": 22, "user": "53410c24e4b00652c8746eca"}, {"code": "(fn my-count [xs]\n  ((fn my-count-helper [xs, acc]\n     (if (= nil (first xs))\n       acc\n       (my-count-helper (rest xs) (+ 1 acc))))\n   xs 0))", "problem": 22, "user": "533ce38ce4b085b17e897d77"}, {"code": "reduce (fn [x _] (+ x 1)) 0", "problem": 22, "user": "534131dbe4b00652c8746ecb"}, {"code": "(fn [l] (apply + 0 (map (fn [i] 1) l)))", "problem": 22, "user": "51da631be4b02ceefd947766"}, {"code": "#(reduce (fn [a _] (inc a)) 0 %)", "problem": 22, "user": "53403110e4b085b17e897da6"}, {"code": "(fn [input] (loop [s input l 0] (if (empty? s) l (recur (rest s) (inc l)))))", "problem": 22, "user": "5341b141e4b00652c8746ecf"}, {"code": "(fn my-count [s] \n  \t((fn [s c]\n      (if (empty? s)\n          c\n         (recur (rest s) (+ c 1))\n       )\n     ) s 0)\n                 \n  )", "problem": 22, "user": "5340ee60e4b00652c8746ec9"}, {"code": "(fn my-count [seq]\n  (if (= '() seq)\n    0\n    (inc (my-count (rest seq)))))", "problem": 22, "user": "53415755e4b00652c8746ecd"}, {"code": "(fn [coll] (reduce + (map (fn [x] 1) coll)))", "problem": 22, "user": "5342d4f2e4b084c2834f4a12"}, {"code": "#(loop [total 0 collection %]\n    (if (empty? collection)\n      total\n      (recur (inc total) (rest collection))))", "problem": 22, "user": "516ed82fe4b06aac486e5b31"}, {"code": "(fn [cols] (loop [cols cols\n         c 0]\n    (if (empty? cols)\n      c\n      (recur (rest cols) (+ 1 c)))))", "problem": 22, "user": "533e7f63e4b085b17e897d8e"}, {"code": "(fn [coll] (reduce (fn [x y] (inc x)) 0 coll) )", "problem": 22, "user": "4f598c87e4b0030a34fb2ada"}, {"code": "(fn [ls] (apply + (map (fn [x] 1) ls)))", "problem": 22, "user": "4ffee245e4b0678c553fc3f8"}, {"code": "(fn cnt [s] (if (seq s) (+ 1 (cnt (rest s))) 0))", "problem": 22, "user": "53307a23e4b019098a6f8b5d"}, {"code": "(fn my-count [x] (if (seq (rest x))(+ 1 (my-count (rest x))) 1))", "problem": 22, "user": "5342faf9e4b084c2834f4a16"}, {"code": "(fn [coll]\n  (loop [coll coll cnt 0]\n    (if (empty? coll) cnt\n      (recur (rest coll) (inc cnt)))))", "problem": 22, "user": "53445876e4b084c2834f4a29"}, {"code": "#(loop [x 0\n         li %]\n   (if (empty? li)\n   \tx\n    (recur (inc x) (rest li))))", "problem": 22, "user": "529da890e4b04e0c58e87b7e"}, {"code": "(fn len1 [lst]\n   (if (empty? lst)\n     0\n     (inc (len1 (rest lst)))\n     )\n   )", "problem": 22, "user": "53213810e4b09d4e7a9b54b0"}, {"code": "(fn countseq [coll]\n(do\n(loop [ans 0 c coll]\n     (if(empty? c) ans\n     (recur (inc ans) (rest c))))))", "problem": 22, "user": "5344a0efe4b084c2834f4a2d"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "533923fde4b0e30313ee6ca4"}, {"code": "#(.size (seq %))", "problem": 22, "user": "53457b7de4b084c2834f4a35"}, {"code": "(fn [list] (reduce (fn [accum item] (+ 1 accum)) 0 list))", "problem": 22, "user": "4f386f61e4b0e243712b1edc"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "52a229e0e4b04e0c58e87be9"}, {"code": "(fn [xs] (reduce + (map (fn [_] 1) xs)))", "problem": 22, "user": "5344e2bae4b084c2834f4a30"}, {"code": "(fn [l] (apply + (map (fn [e] 1) l)))", "problem": 22, "user": "53461051e4b084c2834f4a3a"}, {"code": "#(reduce (fn [x _] (+ 1 x)) 0 %)", "problem": 22, "user": "53460d02e4b084c2834f4a39"}, {"code": "(fn [x]\n  (loop [s x i 0]\n    (if (empty? s)\n      i\n      (recur (rest s) (inc i)))))", "problem": 22, "user": "53468f6ce4b084c2834f4a3f"}, {"code": "(fn [xs] (reduce + (map (fn [x] 1) xs)))", "problem": 22, "user": "53459f2ae4b084c2834f4a36"}, {"code": "(fn [coll] (loop [coll coll, len 0] (if (nil? (seq coll)) len (recur (next coll) (inc len)))))", "problem": 22, "user": "5346db4be4b084c2834f4a45"}, {"code": "(fn [coll]\n  (loop [[x & xs :as all] coll\n         acc 0]\n    (if (empty? all)\n      acc\n      (recur xs (inc acc)))))", "problem": 22, "user": "5346f409e4b084c2834f4a46"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "53452fe9e4b084c2834f4a34"}, {"code": "#(-> % vec .size)", "problem": 22, "user": "526a7025e4b03e8d9a4a722a"}, {"code": "#(->> %\n       (map (fn [x] 1))\n       (apply +))", "problem": 22, "user": "533b6f01e4b0e30313ee6cce"}, {"code": "(fn [seq] (loop [cnt 0 sequence seq]\n            (if (= '() sequence)\n              cnt\n              (recur (+ cnt 1) (rest sequence)))))", "problem": 22, "user": "534803c0e4b084c2834f4a51"}, {"code": "(fn [l]\n  (loop [ls l n 0]\n\t(if (empty? ls)\n\t  n\n      (recur (rest ls) (+ 1 n)))))", "problem": 22, "user": "53487737e4b084c2834f4a59"}, {"code": "#(reduce (fn [c _] (inc c)) 0 %)", "problem": 22, "user": "52ff6ea0e4b0d8b024fd3707"}, {"code": "#(reduce + (map (fn[x] 1) %))", "problem": 22, "user": "5348276de4b084c2834f4a55"}, {"code": "(fn [l] (reduce (fn [a b] (+ a 1)) 0 l))", "problem": 22, "user": "5348236ee4b084c2834f4a54"}, {"code": "(fn [se]\n  (reduce (fn [acc el] (+ 1 acc)) 0 se))", "problem": 22, "user": "534941d1e4b084c2834f4a60"}, {"code": "(fn [s] (reduce + (map (constantly 1) s)))", "problem": 22, "user": "53498f88e4b084c2834f4a64"}, {"code": "(fn [s]\n  ((fn [[first & rest] c]\n     (if (= nil rest)\n       (+ 1 c)\n       (recur rest (+ c 1)))\n    ) s 0)\n  )", "problem": 22, "user": "5349a39de4b084c2834f4a65"}, {"code": "reduce (fn [x y] (inc x)) 0", "problem": 22, "user": "4fa9dc6fe4b081705acca1e8"}, {"code": "(fn me [l] ( if (empty? l) 0 (+ 1 (me (rest l)))))", "problem": 22, "user": "5349ac2be4b084c2834f4a67"}, {"code": "(fn x [ls]\n  (if (= ls ()) 0 \n    (+ 1 (x (rest ls)))\n  )\n)", "problem": 22, "user": "5349a83de4b084c2834f4a66"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "5349da55e4b084c2834f4a68"}, {"code": "(fn [xs]\n  (reduce (fn [n v] (inc n)) 0 xs))", "problem": 22, "user": "5344fe13e4b084c2834f4a32"}, {"code": "(fn [x]\n  (reduce (fn [acc e]\n            (inc acc))\n         0 x))", "problem": 22, "user": "52d6664be4b09f7907dd1359"}, {"code": "#(apply + (map (fn [_] 1) %))", "problem": 22, "user": "50504a1de4b0a02f9cffdeb9"}, {"code": "#(alength (to-array %))", "problem": 22, "user": "532018efe4b08068f379edcd"}, {"code": "(fn [coll] (reduce + (map (fn [x] 1) coll )))", "problem": 22, "user": "4f92de49e4b0dcca54ed6cb2"}, {"code": "(fn c [x] (if (empty? x) 0 (+ 1 (c (rest x)))))", "problem": 22, "user": "534aa5d3e4b084c2834f4a6b"}, {"code": "#(loop [n 0 result %] (if (empty? result)\n                        n\n                        (recur (inc n) (rest result))))", "problem": 22, "user": "52ac2db3e4b0c58976d9ac82"}, {"code": "reduce (fn [x _] (+ x 1)) 0", "problem": 22, "user": "534ad82be4b084c2834f4a72"}, {"code": "reduce (fn [a _] (inc a)) 0", "problem": 22, "user": "534adc16e4b084c2834f4a73"}, {"code": "(fn [col] (reduce + (map (fn [x] (if x 1 0)) col)))", "problem": 22, "user": "5348cab4e4b084c2834f4a5e"}, {"code": "#(alength (to-array %))", "problem": 22, "user": "534b5bece4b084c2834f4a79"}, {"code": "(fn my-count [lst]\n  (if (empty? lst)\n    0\n    (+ 1 (my-count (rest lst)))))", "problem": 22, "user": "5347870be4b084c2834f4a4b"}, {"code": "(fn cnt [l]\n  (if (= l ())\n    0\n    (+ 1\n       (cnt (rest l)))))", "problem": 22, "user": "534bde26e4b084c2834f4a81"}, {"code": "#(reduce + (map (fn [_] 1) %))", "problem": 22, "user": "534bd9c1e4b084c2834f4a80"}, {"code": "(fn [x] (loop [s x c 0]\n          (if (empty? s)\n            c\n          (recur (drop 1 s) (inc c)))))", "problem": 22, "user": "534b1930e4b084c2834f4a76"}, {"code": "#(reduce (fn [c _] (inc c)) (int 0) %)", "problem": 22, "user": "534bfc71e4b084c2834f4a88"}, {"code": "(fn length [x]  \n(loop [i 0]\n\t(if \n      (nth x i false)\n      \t(recur (inc i)\n               )\n      \ti\n      )))", "problem": 22, "user": "534c1321e4b084c2834f4a89"}, {"code": "(fn f [xx]\n  (if (seq xx)\n    (inc (f (rest xx)))\n    0\n  )\n  )", "problem": 22, "user": "534bfa81e4b084c2834f4a87"}, {"code": "#(alength (to-array %))", "problem": 22, "user": "5338645ee4b0e30313ee6c99"}, {"code": "#(\n  loop [s % c 0]\n  \t(if (empty? s) c\n      (recur (rest s) (+ c 1))\n    )\n  \n)", "problem": 22, "user": "534c469ee4b084c2834f4a8e"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "5257eebae4b0cb4875a45c9c"}, {"code": "(fn sam [x y] (if (empty? y) x (sam (inc x) (rest y)))) 0", "problem": 22, "user": "534c5802e4b084c2834f4a92"}, {"code": ";(comp (partial reduce +) (partial map  (constantly 1))) \n\n;#(reduce + (map (constantly 1) %))\n\nreduce (fn [acc,_] (+ 1 acc)) 0", "problem": 22, "user": "534ab3f5e4b084c2834f4a6e"}, {"code": "(fn [coll] (loop [s (seq coll)  n 0] (if (empty? s) n (recur (rest s) (inc n) ))))", "problem": 22, "user": "53347274e4b0656e627bfd6b"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "534cef2de4b084c2834f4a96"}, {"code": "(fn cnt [s]\n  (if (empty? s)\n    0\n    (inc (cnt (rest s)))))", "problem": 22, "user": "534d1173e4b084c2834f4a98"}, {"code": "(fn [coll] (reduce (fn [n a] (inc n)) 0 coll))", "problem": 22, "user": "5346bb5be4b084c2834f4a43"}, {"code": "#(reduce \n   (fn [x y]\n     (inc x))\n   0\n   %)", "problem": 22, "user": "534c734de4b084c2834f4a93"}, {"code": "(fn doCount \n  ([x] (doCount x 0)) ;; overloading!\n  ([x i]\n  (if (empty? x)\n    i\n     (doCount (rest x) (inc i)) \n    )))", "problem": 22, "user": "5194960fe4b044d99c15f69b"}, {"code": "(fn [seq]\n  (loop [s seq, acc 0]\n    (if (empty? s)\n      acc\n      (recur (rest s) (inc acc)))))", "problem": 22, "user": "534da51fe4b084c2834f4aa4"}, {"code": "(fn[x] (alength (to-array x)))", "problem": 22, "user": "534db51be4b084c2834f4aa6"}, {"code": "reduce (fn[x y](+ x 1)) 0", "problem": 22, "user": "52c03baee4b07a9af5792347"}, {"code": "#(reduce (fn [x y] (inc x)) 0 %)", "problem": 22, "user": "534e4a29e4b084c2834f4ab0"}, {"code": "(fn [coll]\n  (loop [rst coll cnt 0]\n    (if (empty? rst)\n      cnt\n      (recur (rest rst) (inc cnt)))))", "problem": 22, "user": "534e60c2e4b084c2834f4ab2"}, {"code": "(fn [s] (reduce + (map (fn [_] 1) s)))", "problem": 22, "user": "534e9ed4e4b084c2834f4ab8"}, {"code": "#(reduce (fn [n _] (inc n)) 0 %)", "problem": 22, "user": "534c5454e4b084c2834f4a90"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "534e118ee4b084c2834f4aad"}, {"code": "(fn [lst] (reduce (fn [a b] (inc a)) 0 lst))", "problem": 22, "user": "534efe66e4b084c2834f4ac1"}, {"code": "#((fn myct [col ct] \n    (if (= (first col) nil) ct\n      (recur (rest col) (inc ct))\n     \n     \n     )\n    ) % 0)", "problem": 22, "user": "534eecaee4b084c2834f4abf"}, {"code": "(comp #(reduce + %) #(map (fn [x] 1) %))", "problem": 22, "user": "534d6524e4b084c2834f4a9f"}, {"code": "(fn len[lst]\n  (cond\n   (empty? lst) 0\n   :else\n   \t(+ 1 (len (rest lst)))))", "problem": 22, "user": "534f8c9ae4b084c2834f4acd"}, {"code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "problem": 22, "user": "534d4779e4b084c2834f4a9b"}, {"code": "#(+ 1 (.lastIndexOf (vec %) (last %)))", "problem": 22, "user": "534f1c94e4b084c2834f4ac5"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "534815bde4b084c2834f4a53"}, {"code": "(fn l [x] (if (= x '()) 0 (+ (l (rest x)) 1)))", "problem": 22, "user": "53500869e4b084c2834f4ad3"}, {"code": "#(reduce (fn [x y] (inc x)) 0 %)", "problem": 22, "user": "534ffbafe4b084c2834f4ad2"}, {"code": "(fn [xs] \n  (->> (map (constantly 1) xs) (reduce +) ))", "problem": 22, "user": "53504436e4b084c2834f4ad7"}, {"code": "#(reduce (fn [x _] (+ x 1)) 0 %)", "problem": 22, "user": "535056a7e4b084c2834f4adb"}, {"code": "(fn [x] (apply + (map #(when (identity %) 1) x)))", "problem": 22, "user": "5256c4c1e4b0541d1855ba36"}, {"code": "#(reduce + (map (fn [_] 1) (vec %)))", "problem": 22, "user": "52ed1804e4b0a18b0f5dd9e6"}, {"code": "reduce (fn [x _] (+ 1 x)) 0", "problem": 22, "user": "53504437e4b084c2834f4ad8"}, {"code": "reduce (fn [x y] (inc x)) 0", "problem": 22, "user": "53513d28e4b084c2834f4ae3"}, {"code": "(fn cnt [x]\n  (loop [n 0 y x] \n  (if (not (= y []))\n    (recur (inc n) (drop 1 y))\n    n)))", "problem": 22, "user": "53504a7de4b084c2834f4ad9"}, {"code": "(fn myF\n         ([lst] (myF lst 0))\n         ([lst idx]\n        (cond\n         (empty? lst) idx\n         :else (recur (rest lst) (+ idx 1 )))))", "problem": 22, "user": "534f3c57e4b084c2834f4ac7"}, {"code": "(fn [s] (reduce + (map (fn [el] 1) s)))", "problem": 22, "user": "53512bc6e4b084c2834f4ae1"}, {"code": "(comp (partial apply (fn me [x c] (if (= x '()) c (me (rest x) (+ c 1))))) (fn [y] [y 0]))", "problem": 22, "user": "534efb44e4b084c2834f4ac0"}, {"code": ";(fn [coll]\n;  (loop [coll coll\n;         cnt 0]\n;    (if (empty? coll)\n;      cnt\n;      (recur (rest coll) (inc cnt)))))\n\n(fn [coll] (reduce (fn [acc _] (inc acc)) 0 coll))", "problem": 22, "user": "5312cdaae4b08068f379ed03"}, {"code": "(fn [l] (reduce + (map (fn [x] 1) l)))", "problem": 22, "user": "5351c1fee4b084c2834f4ae8"}, {"code": "#(reduce (fn [x y] (inc x)) 0 %)", "problem": 22, "user": "5351cc85e4b084c2834f4ae9"}, {"code": "#(inc (first (last (map-indexed vector %))))", "problem": 22, "user": "5351fca5e4b084c2834f4aec"}, {"code": "(fn [l]\n  (loop [l l n 0]\n  (if (nil? (first l))\n    n\n    (recur (rest l) (+ n 1)))))", "problem": 22, "user": "53527ce8e4b084c2834f4af1"}, {"code": "#(reduce (fn [x y] (+ x 1)) 0 %)", "problem": 22, "user": "5352986ee4b084c2834f4af3"}, {"code": "#(reduce (fn [x _] (inc x)) 0 %)", "problem": 22, "user": "50f10f7be4b06d9538fe211a"}, {"code": "(fn my-count [ls] \n  (if (empty? ls)\n    0\n    (+ 1 (my-count (rest ls)))))", "problem": 22, "user": "53526570e4b084c2834f4aef"}, {"code": "(fn [x] (->>  x\n             (map (fn [x] 1))\n             (reduce +)))", "problem": 22, "user": "53532395e4b084c2834f4afb"}, {"code": "(fn [s]\n  (loop [s1 s c 0]\n    (if (empty? s1)\n      c\n      (recur (rest s1) (inc c)))))", "problem": 22, "user": "534f25f9e4b084c2834f4ac6"}, {"code": "#(alength (to-array %))", "problem": 22, "user": "53386fb9e4b0e30313ee6c9a"}, {"code": "(fn [coll]\n  (loop [c coll\n         n 0]\n    (if\n     (empty? c)\n      n\n      (recur (rest c) (inc n)))))", "problem": 22, "user": "5353afa0e4b084c2834f4b03"}, {"code": "(fn length [x] \n  (if (empty? x) \n    0\n    (+ 1 (length (rest x)))\n    )\n  )", "problem": 22, "user": "535197f2e4b084c2834f4ae4"}, {"code": "(fn [x] (alength (into-array x)))", "problem": 22, "user": "53512b55e4b084c2834f4ae0"}, {"code": "#(reduce (fn [a b] (inc a)) 0 %1)", "problem": 22, "user": "534dd600e4b084c2834f4aaa"}, {"code": "(fn [coll]\n\t(loop [col (seq coll) cnt 0]\n\t\t\t(if (= col '())\n\t\t\t\tcnt\n\t\t\t\t(recur (rest col)(inc cnt)))))", "problem": 22, "user": "533a399de4b0e30313ee6cb9"}, {"code": "#(loop [c % i 0]\n    (if (empty? c)\n      i\n      (recur (rest c) (inc i))))", "problem": 22, "user": "534b0598e4b084c2834f4a75"}, {"code": "#(apply + (map (constantly 1) %))", "problem": 22, "user": "533b9cace4b0e30313ee6cd1"}, {"code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "problem": 22, "user": "5309bacae4b02e82168697bc"}, {"code": "#(reduce (fn [x y] (inc x)) 0 %)", "problem": 22, "user": "531c5a6be4b08068f379ed9c"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "5354bb38e4b084c2834f4b0a"}, {"code": "#(last (interleave %1 (iterate inc 1)))", "problem": 22, "user": "52046600e4b0c283853240c5"}, {"code": "(fn [x]\n  (loop [mycoll x acc 1]\n    (if (next mycoll)\n      (recur (next mycoll) (inc acc))\n      acc)))", "problem": 22, "user": "535526a2e4b04ce2eb3ed259"}, {"code": "(fn [sequence]\n  (loop [elements 0 list sequence]\n    (if (empty? list)\n      elements\n      (recur (inc elements) (rest list)))))", "problem": 22, "user": "53548944e4b084c2834f4b08"}, {"code": "(fn [col] \n  (loop [col col c 0]\n    (if (empty? col) c\n      (recur (rest col) (+ c 1)))))", "problem": 22, "user": "5325cef5e4b09d4e7a9b54e7"}, {"code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "problem": 22, "user": "53560560e4b04ce2eb3ed25f"}, {"code": "#(apply + (map (fn [_] 1) %))", "problem": 22, "user": "5356069be4b04ce2eb3ed260"}, {"code": "(fn coun [c]\n     (if (empty? c)\n       0\n       (+ (coun (rest c)) 1)))", "problem": 22, "user": "5356100be4b04ce2eb3ed262"}, {"code": "(fn[y](reduce + (map(fn[x] 1) y)))", "problem": 22, "user": "53566247e4b04ce2eb3ed266"}, {"code": "reduce (fn [a b] (inc a)) 0", "problem": 22, "user": "5356ac72e4b04ce2eb3ed26a"}, {"code": "(fn [x] \n  (loop [s x\n         i 0]\n    (if (empty? s) i (recur (next s) (inc i)))))", "problem": 22, "user": "5356a324e4b04ce2eb3ed269"}, {"code": "(fn my-count [s]\n  (if (empty? s)\n    0\n    (+ (my-count (rest s)) 1)))", "problem": 22, "user": "5356e04fe4b04ce2eb3ed271"}, {"code": "(fn [elements]\n  (loop [[this & rest] elements iteration 1]\n    (if (empty? rest)\n      iteration\n      (recur rest (inc iteration)))))", "problem": 22, "user": "523d06aae4b0dbf0c301728b"}, {"code": "(fn count-sequence [xs]\n  (if (empty? xs) 0\n      (+ 1 (count-sequence (rest xs)))))", "problem": 22, "user": "53287dace4b09d4e7a9b5507"}, {"code": "(fn foo [thing] (if (empty? thing) 0 (+ 1 (foo (rest thing)))))", "problem": 22, "user": "53570034e4b04ce2eb3ed273"}, {"code": "(fn [lst] (reduce + (map (fn [x] 1) lst)))", "problem": 22, "user": "53571732e4b04ce2eb3ed275"}, {"code": "(fn length\n  [x]\n  (reduce + (map (fn [_] 1) x)))", "problem": 22, "user": "52dc3bc8e4b09f7907dd13cb"}, {"code": "(fn [s] \n  (loop [st s, l 0]\n    (if (empty? st)\n      l\n      (recur (rest st)(inc l)))))", "problem": 22, "user": "53570557e4b04ce2eb3ed274"}, {"code": "(fn countElements\n  [inSeq]\n \t(loop [portion inSeq cnt 0]\n      \t(if (empty? portion)\n          cnt\n        ;; else\n          (recur (next portion) (inc cnt))\n        )\n \t)\n)", "problem": 22, "user": "5346af9be4b084c2834f4a41"}, {"code": "(fn [xs]\n  (loop [xs xs, cnt 0]\n    (if (empty? xs)\n      cnt\n      (recur (next xs) (inc cnt)))))", "problem": 22, "user": "535778dee4b04ce2eb3ed27d"}, {"code": "(fn [coll] (apply + (map (fn [_] 1) coll)))", "problem": 22, "user": "5225271fe4b01819a2de42f9"}, {"code": "(fn my-count\n  [coll]\n  (loop [length 0 coll coll]\n    (if (seq coll)\n      (recur (inc length) (rest coll))\n      length)))", "problem": 22, "user": "5357b241e4b04ce2eb3ed282"}, {"code": "(fn [x] (reduce (fn [a b] (inc a)) 0 x))", "problem": 22, "user": "5356e569e4b04ce2eb3ed272"}, {"code": "(fn [el] (loop [i 0 items el] (if (empty? items) i (recur (inc i) (rest items)))))", "problem": 22, "user": "5357fd93e4b04ce2eb3ed285"}, {"code": "#(loop [x % n 1]\n   (if (nil? (second x)) \n     n\n   \t(recur (rest x) (inc n))))", "problem": 22, "user": "5356dcbee4b04ce2eb3ed270"}, {"code": "#(alength (to-array %))", "problem": 22, "user": "534e1f56e4b084c2834f4aae"}, {"code": "(fn mycount [l] (if (empty? l) 0 (+ 1 (mycount (rest l)))))", "problem": 22, "user": "535376a7e4b084c2834f4b01"}, {"code": "#(reduce + (map (constantly 1) %))\n\n; #(reduce (fn [x _] (+ x 1)) 0 %)\n\n; #(reduce (fn [x y] (inc x)) 0 %)\n\n; (comp (partial apply +) (partial map #(do % 1)))\n\n; (fn [s]\n;  (reduce + (map (constantly 1) s)))\n\n; #(apply + (map (fn [x] 1) %))\n\n; #(.size (vec %))", "problem": 22, "user": "52810ceae4b0757a1b17141b"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "53590f67e4b04ce2eb3ed291"}, {"code": "(fn c [x] (if (first x) (+ 1 (c (next x))) 0))", "problem": 22, "user": "535920b2e4b04ce2eb3ed294"}, {"code": "(fn [coll]\n  (reduce (fn [x y] (inc x)) 0 coll))", "problem": 22, "user": "534c9da8e4b084c2834f4a94"}, {"code": "#(+ 1 (first (last (map-indexed vector %))))", "problem": 22, "user": "53562d00e4b04ce2eb3ed263"}, {"code": "#(reduce (fn[x y] (inc x)) 0 %)", "problem": 22, "user": "535911f4e4b04ce2eb3ed292"}, {"code": "(fn [coll]\n  (loop [s coll c 0] \n    (if (= () s) \n      c\n      (recur (rest s) (inc c)\n      ))))", "problem": 22, "user": "53597288e4b04ce2eb3ed29c"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "5359a4eae4b04ce2eb3ed29f"}, {"code": "#(+ 1 (nth (-> (map vector % (range)) reverse first) 1))", "problem": 22, "user": "53536386e4b084c2834f4afe"}, {"code": "(fn [coll] \n\t(loop [acc 0 coll coll]\n\t\t(if (empty? coll)\n\t\t\tacc\n\t\t\t(recur (inc acc) (rest coll))\n\t\t)\n\t)\n)", "problem": 22, "user": "535943b3e4b04ce2eb3ed295"}, {"code": "(fn my-count [x]\n\t(loop [x x acc 0]\n\t\t(println (str \"loop\" x acc))\n\t  (if (empty? x)\n\t  \tacc\n\t    (recur (rest x) (+ 1 acc)))))", "problem": 22, "user": "535a170ae4b04ce2eb3ed2a3"}, {"code": "(fn [y] (reduce + (map (fn [x] 1) y)))", "problem": 22, "user": "535a80b1e4b04ce2eb3ed2a7"}, {"code": ";; (partial (fn [n xs] (if (empty? xs) n (recur (inc n) (rest xs) ))) 0)\n\n#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "535aba96e4b04ce2eb3ed2a8"}, {"code": "(fn counter [se]\n  (loop [i 0 s se]\n    (if (= s []) i (recur (inc i) (rest s)))))", "problem": 22, "user": "535afd76e4b04ce2eb3ed2ab"}, {"code": "#(reduce (fn [acc e] (inc acc)) 0 %)", "problem": 22, "user": "50c95c4fe4b0bed41a12298f"}, {"code": "(fn [ n ] (loop [ l n acc 0 ] (if (empty? l) acc (recur (rest l) (+ acc 1)))))", "problem": 22, "user": "535a18e3e4b04ce2eb3ed2a4"}, {"code": "#(second (last (map vector % (next (range)))))", "problem": 22, "user": "53527551e4b084c2834f4af0"}, {"code": "#(reduce (fn[sum x] (+ 1 sum)) 0 %)", "problem": 22, "user": "535bd464e4b04ce2eb3ed2ad"}, {"code": "(fn ct ([L] (ct L 0)) ([L n] (if (empty? L) n (recur (rest L) (inc n)))))", "problem": 22, "user": "535bf08fe4b04ce2eb3ed2af"}, {"code": "#(reduce (fn [acc el] (inc acc)) 0 %)", "problem": 22, "user": "53523ae0e4b084c2834f4aee"}, {"code": "(fn [list] \n  (loop [l list \n         c 0]\n    (if \n      (empty? l)\n      c\n      (recur (rest l) (inc c))\n    )            \n  )\n)", "problem": 22, "user": "533a2e02e4b0e30313ee6cb7"}, {"code": "#(reduce + (map (fn[x] 1) %))", "problem": 22, "user": "535c53c5e4b04ce2eb3ed2b3"}, {"code": "(fn [seq]\n  (reduce + (map (fn [x] 1) seq)))", "problem": 22, "user": "53489329e4b084c2834f4a5b"}, {"code": "#(reduce + (map (fn [_] 1) %))", "problem": 22, "user": "535d4b0ae4b04ce2eb3ed2be"}, {"code": "(fn [sq]\n  ((fn [sq c]\n     (if (empty? sq)\n       c\n       (recur (rest sq) (inc c)))) sq 0))", "problem": 22, "user": "535d910ae4b04ce2eb3ed2c5"}, {"code": "(fn [coll](reduce + (map (fn [num] 1) coll)))", "problem": 22, "user": "522b1993e4b0d34ee08e71b6"}, {"code": "#(apply + (map (fn [_] 1) %))", "problem": 22, "user": "535f4e01e4b04ce2eb3ed2dc"}, {"code": "(fn cc [x] \n  (if (next x) \n    (+ 1 (cc (rest x)))\n    1))", "problem": 22, "user": "535f0cbde4b04ce2eb3ed2d9"}, {"code": "#(reduce (fn [acc v] (+ acc 1)) 0 %)", "problem": 22, "user": "51d4609be4b013d740b70de1"}, {"code": "#(reduce (fn [cnt cl] (inc cnt)) 0 %)", "problem": 22, "user": "535eaa73e4b04ce2eb3ed2d4"}, {"code": "#(reduce (fn counter [accumulator _] (inc accumulator)) (map (fn one [_] 1) %))", "problem": 22, "user": "535f9604e4b04ce2eb3ed2dd"}, {"code": "reduce (fn [x y] (inc x)) 0", "problem": 22, "user": "535d2533e4b04ce2eb3ed2bc"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "535f295fe4b04ce2eb3ed2da"}, {"code": "(fn [coll] (reduce (fn [currentCount currentValue] (+ currentCount 1)) 0 coll))", "problem": 22, "user": "5359da85e4b04ce2eb3ed2a1"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "53578543e4b04ce2eb3ed280"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "535e5c4de4b04ce2eb3ed2d1"}, {"code": "(fn [s] (reduce (fn [last item] (+ last 1)) 0 s))", "problem": 22, "user": "5360d41fe4b0243289761e39"}, {"code": "(fn [x]\n  (loop [c 0, l x]\n    (if (empty? l)\n      c\n      (recur (+ c 1) (rest l)))))", "problem": 22, "user": "536123d6e4b0243289761e3f"}, {"code": "(fn [a-seq]\n  (loop [s a-seq n 0]\n    (if (empty? s)\n      n\n      (recur (rest s) (inc n)))))", "problem": 22, "user": "5361a4f2e4b0243289761e47"}, {"code": "#((fn f [coll acc]\n  (if (empty? coll)\n    acc\n    (f (rest coll) (inc acc)))) % 0)", "problem": 22, "user": "536102efe4b0243289761e3e"}, {"code": "(fn [s]\n  (letfn [(acc [s1 l]\n              (if (seq s1)\n                (recur (rest s1) (inc l))\n                l))]\n    (acc s 0)))", "problem": 22, "user": "53480973e4b084c2834f4a52"}, {"code": "(fn mycount[x] (reduce + (map (fn[v] 1) x)))", "problem": 22, "user": "536234a5e4b0243289761e4d"}, {"code": "(fn ncount [lst]\n  (if (empty? lst)\n    0\n    (+ 1 (ncount (rest lst)))))", "problem": 22, "user": "534ff8a6e4b084c2834f4ad1"}, {"code": "(fn foo [coll] (if (empty? coll) 0 (inc (foo (rest coll)))))", "problem": 22, "user": "53629381e4b0243289761e54"}, {"code": "(fn countItems [parm] \n   (if (empty? parm) 0 (inc (countItems (rest parm))))\n  )", "problem": 22, "user": "53616d56e4b0243289761e45"}, {"code": "(fn [x] (reduce + (map #(if (nil? %) 0 1) x)))", "problem": 22, "user": "535944d6e4b04ce2eb3ed296"}, {"code": "(fn [coll]\n  (reduce (fn [n _]\n            (inc n))\n          0\n          coll))", "problem": 22, "user": "53576356e4b04ce2eb3ed27a"}, {"code": "(fn [coll] (reduce + (map (fn [a] 1) coll)))", "problem": 22, "user": "536254a5e4b0243289761e50"}, {"code": "(fn c [l] (if (not (seq l)) 0 (+ 1 (c (rest l)))))", "problem": 22, "user": "53638ed2e4b0243289761e5b"}, {"code": "#(apply + (map (constantly 1) %1))", "problem": 22, "user": "5363d593e4b0243289761e5d"}, {"code": "(fn [xs] (loop [lst xs i 0] (if (empty? lst) i (recur (rest lst) (+ i 1)))))", "problem": 22, "user": "5363d242e4b0243289761e5c"}, {"code": "#(loop [x 0 \n         sq %]\n    (if (empty? sq) \n      x\n      (recur (inc x) (rest sq) )\n      )\n  )", "problem": 22, "user": "5360e12ce4b0243289761e3a"}, {"code": "(fn cnt [x] (if (empty? x) 0 (inc (cnt (rest x)))))", "problem": 22, "user": "5363f11be4b0243289761e5f"}, {"code": "#(reduce (fn [a b] (inc a)) 0 %)", "problem": 22, "user": "53653538e4b0243289761e6a"}, {"code": "#(reduce (fn [x _] (inc x)) 0 %1)", "problem": 22, "user": "523630eee4b05f3be1c7c8e8"}, {"code": "(fn  [sequen]\n  ( (fn [remaining acc] \n       (let [head (first remaining)\n             tail (rest remaining)]\n         (if (nil? head)\n           acc\n           (recur tail (inc acc))) ))\n    sequen 0))", "problem": 22, "user": "4fafd067e4b081705acca259"}, {"code": "(fn getCount[s] (reduce (fn[x y](+ x 1)) 0 s))", "problem": 22, "user": "534d639ae4b084c2834f4a9e"}, {"code": "(fn mycount [coll]\n        (loop [coll coll\n               counter 0]\n          (if (empty? coll)\n            counter\n            (recur (rest coll) (inc counter)))))", "problem": 22, "user": "536581e4e4b0243289761e6d"}, {"code": "(fn [x]\n  (loop [x x i 0]\n  (if (empty? x)\n    i\n    (recur (rest x) (inc i)))))", "problem": 22, "user": "53664e3be4b0243289761e74"}, {"code": "(fn cnt [ls]\n  (if (empty? ls) 0 (+ 1 (cnt (rest ls)))))", "problem": 22, "user": "5364697ce4b0243289761e62"}, {"code": "reduce (fn [c s]\n  (+ 1 c)) 0", "problem": 22, "user": "53528cd3e4b084c2834f4af2"}, {"code": "#(reduce (fn [memo value] (+ 1 memo)) 0 %1)", "problem": 22, "user": "4f085a31535dcb61093f6c35"}, {"code": "#(let\n   [cnt (fn cnt [acc as] (if (= '() as) acc (cnt (+ 1 acc) (rest as))))]\n   (cnt 0 %))", "problem": 22, "user": "5367c374e4b0243289761e83"}, {"code": "(fn length [coll] (if (empty? coll) 0 (inc (length (rest coll)))))", "problem": 22, "user": "5367ca98e4b0243289761e86"}, {"code": "#((fn ct [l c] (if (empty? l) c (ct (rest l) (+ 1 c)))) %1 0)", "problem": 22, "user": "52a93d48e4b0c58976d9ac42"}, {"code": "#(reduce  (fn [y _] (inc y)) 0 %)", "problem": 22, "user": "534088bce4b085b17e897dae"}, {"code": "(fn [xs]\n  (let [lp (fn [xs' n]\n             (if (empty? xs')\n               n\n               (recur (rest xs') (inc n))))]\n    (lp xs 0)))", "problem": 22, "user": "53684a2fe4b0243289761e8c"}, {"code": "#(+ (first (last (map-indexed vector %1))) 1)", "problem": 22, "user": "536829c8e4b0243289761e8b"}, {"code": "(fn c [l]\n  (if (empty? l) 0 (+ 1 (c (rest l)))))", "problem": 22, "user": "5368a275e4b0243289761e8f"}, {"code": "(fn [s] (reduce (fn [total _] (inc total)) 0 s))", "problem": 22, "user": "5368c802e4b0243289761e91"}, {"code": "(fn\n  [l]\n  (loop [li l\n         acc 0]\n  (if (empty? li) \n    acc\n    (recur (rest li) (inc acc)))\n  ))", "problem": 22, "user": "53663e82e4b0243289761e73"}, {"code": "(fn cnt \n  \t([s] (cnt s 0))\n  \t([s n] (if (empty? s) n (cnt (rest s) (+ n 1)))))", "problem": 22, "user": "4f805b4be4b033992c121bf2"}, {"code": "(fn cnt [items & [i]] (if (empty? items)\n                      (#(if (nil? %) 0 %) i)\n                      (cnt (rest items) (inc (#(if (nil? %) 0 %) i))\n              )))", "problem": 22, "user": "5368fedee4b0243289761e93"}, {"code": "#(reduce + (map (fn [_] 1) %))", "problem": 22, "user": "53658ce7e4b0243289761e6e"}, {"code": "(fn [lst] (reduce (fn [cnt el] (+ 1 cnt)) 0 lst))", "problem": 22, "user": "53695439e4b0243289761e9a"}, {"code": "#(reduce (fn [x y] (inc x)) 0 %)", "problem": 22, "user": "536973e5e4b0243289761e9e"}, {"code": "(fn [col] (reduce + (map (fn [n] 1) col)))", "problem": 22, "user": "4f7cbf4ae4b06e829148e1b7"}, {"code": "(fn [seq]\n  (loop [[first & rest] seq\n         elements 0]\n    (if (nil? first)\n      elements\n\t  (recur rest (+ elements 1)))))", "problem": 22, "user": "535d2e21e4b04ce2eb3ed2bd"}, {"code": "(fn my-count [col]\n        (loop [col col\n               i 0]\n          (if (empty? col)\n            i\n            (recur (rest col) (inc i)))))", "problem": 22, "user": "5369d072e4b0243289761ea1"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "524b0645e4b09eba1c0223bf"}, {"code": "reduce (fn [n c] (inc n)) 0", "problem": 22, "user": "5356d00ee4b04ce2eb3ed26f"}, {"code": "(fn [coll]\n  (loop [coll coll size 0]\n    (if (empty? coll)\n      size\n      (recur (rest coll) (inc size)))))", "problem": 22, "user": "534d5ab7e4b084c2834f4a9c"}, {"code": "#(reduce + (map (constantly 1) %1))", "problem": 22, "user": "536aa86de4b0243289761eb1"}, {"code": "#(reduce (fn [c _] (inc c)) 0 %)", "problem": 22, "user": "536a37efe4b0243289761eaa"}, {"code": "(fn [coll] ((fn cnt [coll x] (if (first coll) (cnt (rest coll) (+ x 1)) x)) coll 0))", "problem": 22, "user": "5369d349e4b0243289761ea3"}, {"code": "(fn [lst] (apply + (map (fn [x] 1) lst)))", "problem": 22, "user": "5369172ce4b0243289761e96"}, {"code": "#(reduce (fn [x y] (inc x)) 0 %)", "problem": 22, "user": "536bc59fe4b0243289761ec3"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "536bd4dee4b0fc7073fd6e30"}, {"code": "#(reduce (fn [a _] (inc a)) 0 %)", "problem": 22, "user": "536be89ee4b0fc7073fd6e32"}, {"code": "(fn [sequence] (alength (to-array sequence)))", "problem": 22, "user": "536bb179e4b0243289761ec1"}, {"code": "#(reduce (fn [x _] (inc x)) 0 %)", "problem": 22, "user": "536aba0be4b0243289761eb2"}, {"code": "(fn mycount [x] (if (= x '())\n                    0\n                  (+ (mycount (rest x))\t1)))", "problem": 22, "user": "536b5feee4b0243289761eba"}, {"code": "reduce (fn [c x] (inc c)) 0", "problem": 22, "user": "52caee42e4b071a8d36bd3e8"}, {"code": "(fn len [col] (if (empty? col) 0 (inc (len (rest col)))))", "problem": 22, "user": "536c6f20e4b0fc7073fd6e3d"}, {"code": "#(+ 1 (.lastIndexOf (map list %) (last (map list %))))", "problem": 22, "user": "536c7470e4b0fc7073fd6e3e"}, {"code": "(fn [xs] (reduce (fn [len _] (inc len)) 0 xs))", "problem": 22, "user": "536c92eae4b0fc7073fd6e43"}, {"code": "(fn get-length [[h & t]]\n  (if (empty? t) \n    1\n    (+ 1 (get-length t))))", "problem": 22, "user": "536ca4bde4b0fc7073fd6e49"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "53673d93e4b0243289761e7d"}, {"code": "(fn [col]\n      (reduce +\n        (map (constantly 1)\n          col\n          )\n        )\n      )", "problem": 22, "user": "536827f1e4b0243289761e8a"}, {"code": "#(reduce (fn [a _] (inc a)) 0 %)", "problem": 22, "user": "536c1531e4b0fc7073fd6e36"}, {"code": "#( reduce (fn plus [cnt elem] (inc cnt)) 0 %)", "problem": 22, "user": "5364ab34e4b0243289761e64"}, {"code": "(fn [x] (+ 1 (first (last (map-indexed vector x)))))", "problem": 22, "user": "5369a4b1e4b0243289761e9f"}, {"code": "#(reduce (fn [acc x] (inc acc) ) 0 %)", "problem": 22, "user": "52c14af1e4b07a9af5792362"}, {"code": "(comp (partial apply +) (partial map (fn [_] 1)))", "problem": 22, "user": "536d83cee4b0fc7073fd6e5e"}, {"code": "reduce (fn [c _] (+ c 1)) 0", "problem": 22, "user": "536b2048e4b0243289761eb7"}, {"code": "(fn [c] (reduce (fn [acc i] (inc acc)) 0 c))", "problem": 22, "user": "536de1c3e4b0fc7073fd6e64"}, {"code": "reduce (fn [x y] (+ x  1)) 0", "problem": 22, "user": "53691dc7e4b0243289761e97"}, {"code": "(fn [xs]\n  (loop [xs xs\n         n 0]\n    (if (empty? xs)\n      n\n      (recur (rest xs) (inc n)))))", "problem": 22, "user": "4fe9ea87e4b0547ebccb2476"}, {"code": "reduce (fn [i _] (inc i)) 0", "problem": 22, "user": "52c24561e4b07a9af579237b"}, {"code": "(fn getlength [s]\n  ((fn getlength-iter [s2 ate]\n    (if (empty? s2)\n      ate\n      (getlength-iter (rest s2) (+ 1 ate)))\n   ) s 0))", "problem": 22, "user": "536e56dbe4b0fc7073fd6e6c"}, {"code": "(fn ! [l] (if (empty? l) 0 (+ 1 (! (drop 1 l)))))", "problem": 22, "user": "536e6fe2e4b0fc7073fd6e6f"}, {"code": "#(reduce (fn[x y] (+ x 1)) 0 %)", "problem": 22, "user": "536e86b0e4b0fc7073fd6e72"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "52eaba10e4b09f7907dd14c2"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "536dcc51e4b0fc7073fd6e62"}, {"code": "reduce (fn [c _] (inc c)) 0", "problem": 22, "user": "536ecd9fe4b0fc7073fd6e76"}, {"code": "(fn [seq]\n  (loop [s seq c 0]\n    (if (empty? s)\n      c\n      (recur (rest s) (+ c 1)))))", "problem": 22, "user": "536eb396e4b0fc7073fd6e74"}, {"code": "(fn [x] (reduce (fn [a _] (+ a 1)) 0 x))", "problem": 22, "user": "4ff69377e4b0678c553fc37f"}, {"code": "(fn iter [ls]\n  (if (= ls '())\n    0\n    (+ 1 (iter (rest ls)))))", "problem": 22, "user": "536f70dbe4b0fc7073fd6e7d"}, {"code": "#(loop [x % n 0]\n   (if (empty? x)\n     n\n     (recur (rest x) (inc n))))", "problem": 22, "user": "536f62aee4b0fc7073fd6e7c"}, {"code": "(fn [x] (reduce + (map (fn [y] 1) x)))", "problem": 22, "user": "536f9436e4b0fc7073fd6e82"}, {"code": "(fn [x] (+ 1 (.lastIndexOf (vec x) (last x))))", "problem": 22, "user": "536d179be4b0fc7073fd6e52"}, {"code": "#(reduce (fn [x y] (inc x)) 0 %)", "problem": 22, "user": "536f5900e4b0fc7073fd6e7b"}, {"code": "(fn seq-length [s]\n  (loop [sum 0, r s]\n    (if (seq r)\n      (recur (+ sum 1) (rest r))\n      sum)))", "problem": 22, "user": "536c35c3e4b0fc7073fd6e3a"}, {"code": "(fn [xs]\n  (reduce + (map (fn [x] 1) xs)))", "problem": 22, "user": "536d52b8e4b0fc7073fd6e58"}, {"code": "(fn [coll]\n  (loop [n 0 c coll]\n    (if (empty? c) n (recur (inc n) (rest c)))))", "problem": 22, "user": "537044bee4b0fc7073fd6e95"}, {"code": "#(reduce (fn [x _] (inc x)) 0 %)", "problem": 22, "user": "53705e2de4b0fc7073fd6e96"}, {"code": "#(if (empty? %2) % (recur (inc %) (rest %2))) 0", "problem": 22, "user": "536e0930e4b0fc7073fd6e66"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "536c7f32e4b0fc7073fd6e40"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "53703acde4b0fc7073fd6e91"}, {"code": "(fn [s] (reduce + (map (fn [x] 1) s)))", "problem": 22, "user": "536f2faee4b0fc7073fd6e79"}, {"code": "(fn my-count [col] (if (empty? col) 0 (+ 1 (my-count (rest col)))))", "problem": 22, "user": "536e5055e4b0fc7073fd6e6b"}, {"code": "(fn [coll]\n  (loop [coll coll\n         acc 0]\n    (if (empty? coll)\n      acc\n      (recur (rest coll) (inc acc)))))", "problem": 22, "user": "5370ef22e4b0fc7073fd6ea0"}, {"code": "(fn col-size [col] (reduce + (map (fn [x] 1) col)))", "problem": 22, "user": "52be24cae4b07a9af5792317"}, {"code": "(fn [col] (apply + (map (fn [_] 1) col)))", "problem": 22, "user": "529f5a23e4b04e0c58e87baa"}, {"code": "(fn [x] (reduce (fn [a b] (+ a 1)) 0 x))", "problem": 22, "user": "5370612be4b0fc7073fd6e97"}, {"code": "(fn [items]\n  (loop [items items\n         n 0]\n\t  (if (empty? items)\n        n\n        (recur (rest items) (inc n)))))", "problem": 22, "user": "5371a0fce4b0493c815db700"}, {"code": ";(fn [xs] (reduce (fn [acc x] (inc acc)) 0 xs))\n\n(fn [xs] \n  (reduce\n   (fn\n     ([] 0)\n     ([x] x)\n     ([acc x] (inc acc)))\n   0\n   xs))", "problem": 22, "user": "5189a51ae4b0288ada3dbdad"}, {"code": "#(loop[l % n 0](if (nil? l) n (recur (next l)(inc n))))", "problem": 22, "user": "4e8849c5535d8b9bb0147ca4"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "51dd5d6fe4b0c33a4e1da406"}, {"code": "(fn cc\n  ([s] (cc s 0))\n  ([s c] (if (not-empty s) (cc (rest s) (inc c)) c)))", "problem": 22, "user": "53722b80e4b0493c815db707"}, {"code": "#(loop [n 0 l %] (if (= l ()) n (recur (inc n) (rest l))))", "problem": 22, "user": "534f13b2e4b084c2834f4ac4"}, {"code": "(comp #(reduce (fn [c,p] (+ 1 c)) 0 %) seq)", "problem": 22, "user": "521f4f47e4b0e6c71e0c0bd8"}, {"code": ";(fn total [collection]\n;  (if (empty? collection)\n;    0\n;    (+ 1 (total (rest collection)))))\n\n(fn total [collection]\n  (reduce + (map (constantly 1) collection)))\n\n;; above was my original answer, but Elena, this one is cool!", "problem": 22, "user": "53713ebee4b0fc7073fd6ead"}, {"code": ";; I wonder if there is a way to do this without the (constantly 1) part\n(fn countElements [coll]\n  (reduce + (map (constantly 1) coll)))", "problem": 22, "user": "53713ed9e4b0fc7073fd6eaf"}, {"code": "(fn f22 [coll] (if (first coll) (inc (f22 (rest coll))) 0))", "problem": 22, "user": "536b9d8ae4b0243289761ebe"}, {"code": "#(reduce (fn [a b] (+ a 1)) 0 %)", "problem": 22, "user": "5371bee2e4b0493c815db701"}, {"code": "(fn [coll]\n  (loop [acc 0]\n    (if (empty? (drop acc coll))\n      acc\n      (recur (inc acc)))))", "problem": 22, "user": "5317d78ee4b08068f379ed63"}, {"code": "(fn cnt [coll] \n  (if (nil? (first coll))\n    0\n    (+ 1 (cnt (rest coll)))\n   ))", "problem": 22, "user": "5362a936e4b0243289761e55"}, {"code": "(fn [x] (reduce (fn [memo item] (inc memo)) 0 x ))", "problem": 22, "user": "5372eaf2e4b06d7f452d9e03"}, {"code": "#(.length (vec %))", "problem": 22, "user": "53572767e4b04ce2eb3ed277"}, {"code": "#(loop [result 0 c %]\n    (if(empty? c) result\n    (recur (inc result) (rest c))))", "problem": 22, "user": "53730973e4b06d7f452d9e05"}, {"code": "(fn [col] (reduce + (map (fn [elem] (identity 1)) col)))", "problem": 22, "user": "5225fa79e4b0f4c7e20d29c7"}, {"code": "reduce (fn [x y] (+ x 1)) 0", "problem": 22, "user": "530b09a7e4b02e82168697c6"}, {"code": "(fn [coll] \n  (loop [result 0 c coll]\n    (if (seq c)\n    (recur (+ result 1) (rest c))\n    result)))", "problem": 22, "user": "532c9dc9e4b019098a6f8b30"}, {"code": "(fn [s] (reduce (fn [a b] (+ a 1)) 0 s))", "problem": 22, "user": "53736ffce4b06d7f452d9e11"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "534c1c64e4b084c2834f4a8a"}, {"code": "#(loop [[h & t] %\n        x 0]\n   (if h\n     (recur t (inc x))\n     x))\n\n#_ (reduce (fn [a _] (inc a)) 0)", "problem": 22, "user": "5371167fe4b0fc7073fd6ea7"}, {"code": "#(reduce (fn [x y] (+ x 1)) 0 %)", "problem": 22, "user": "537393b2e4b06d7f452d9e14"}, {"code": "(fn [l] (reduce (fn [a, b] (+ a 1)) 0 l))", "problem": 22, "user": "53712c03e4b0fc7073fd6ea9"}, {"code": "#(apply + (map (fn [x] 1) %))", "problem": 22, "user": "53737e6ce4b06d7f452d9e13"}, {"code": "(fn [x]\n  (reduce + (map (fn [y] 1) x)))", "problem": 22, "user": "5373cac9e4b06d7f452d9e19"}, {"code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "problem": 22, "user": "53737909e4b06d7f452d9e12"}, {"code": "(fn [larg] \n  (loop [l larg len 0] \n    (if (= nil (first l)) \n      len \n      (recur (rest l) (inc len))\n    )))", "problem": 22, "user": "536673a8e4b0243289761e76"}, {"code": "#(reduce (fn [x y] (inc x)) 0 %)", "problem": 22, "user": "5373066be4b06d7f452d9e04"}, {"code": "(fn [so]\n  (loop [s (seq so) c 0]\n    (if (seq s)\n      (recur (rest s) (+ c 1))\n      c)))", "problem": 22, "user": "5370d152e4b0fc7073fd6e9d"}, {"code": "#(apply + (map (fn [_] 1) %))", "problem": 22, "user": "53749782e4b06d7f452d9e24"}, {"code": "(fn icount [s]\n  (if (= nil (first s))\n    0\n    (+ 1 (icount (rest s)))))", "problem": 22, "user": "5374adc3e4b06d7f452d9e27"}, {"code": "(fn count-seq\n  ([seq] (count-seq seq 0))\n  ([seq n]\n  (if (empty? seq)\n    n\n    (recur (rest seq) (inc n)))))", "problem": 22, "user": "53733312e4b06d7f452d9e0a"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "5188b2e6e4b0bdff0e072d52"}, {"code": "(fn [sq] (+ 1 (get (into [] (last (map-indexed vector sq))) 0)))", "problem": 22, "user": "53749685e4b06d7f452d9e23"}, {"code": "(fn [xs] (reduce (fn [acc v] (inc acc)) 0 xs))", "problem": 22, "user": "53736f65e4b06d7f452d9e0f"}, {"code": "(fn f\n  ([s]\n   (f s 0))\n  ([s c]\n   (if (nil? (seq s))\n     c\n     (recur (rest s) (inc c)))))", "problem": 22, "user": "52148821e4b0961f15ac4d8e"}, {"code": "(fn [x]\n  (loop [x x\n         counts 0]\n      \n      (if (seq x)\n         (recur (rest x) (inc counts))\n        counts\n           \n        )\n    \n    )\n  )", "problem": 22, "user": "50d8a50de4b01f0871336e6d"}, {"code": "(fn [coll] (reduce + (map (fn [elem] 1) coll)))", "problem": 22, "user": "536be48ee4b0fc7073fd6e31"}, {"code": "(fn [s]\n  (loop [c 0\n         l s]\n    (if (empty? l) c (recur (inc c) (rest l)))))", "problem": 22, "user": "53756f8be4b06839e8705e14"}, {"code": "(fn f [x] (if (empty? x) 0 (+ (f (rest x)) 1)))", "problem": 22, "user": "5375b852e4b06839e8705e17"}, {"code": "(fn [x] (reduce + (map (fn [y] 1) x)))", "problem": 22, "user": "5375d846e4b06839e8705e18"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "5376190de4b06839e8705e1c"}, {"code": "#(loop [col % cnt 0]\n \t(if (empty? col)\n\t\tcnt\n\t\t(recur (drop 1 col) (inc cnt))\n\t)\n)", "problem": 22, "user": "537610eee4b06839e8705e1a"}, {"code": "(fn [coll]\n  (reduce + 0 (map (constantly 1) coll)))", "problem": 22, "user": "53762466e4b06839e8705e1e"}, {"code": "(fn count-seq [coll]\n  (loop [c 0\n         coll coll]\n    (if-not (empty? coll)\n      (recur (inc c) (rest coll))\n      c)))", "problem": 22, "user": "4e162b3d535d04ed9115e7e8"}, {"code": "(fn count-me\n  ([coll]\n   (if (empty? coll)\n     0\n     (count-me coll 0)))\n  ([coll accum]\n   (if (empty? coll)\n     accum\n     (count-me (rest coll) (inc accum)))))", "problem": 22, "user": "53703300e4b0fc7073fd6e90"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "53720c5ce4b0493c815db704"}, {"code": "reduce (fn [a b] (inc a)) 0", "problem": 22, "user": "53767991e4b06839e8705e25"}, {"code": "(fn docnt [x] (if ( empty? x) 0 (+ 1 ( docnt (rest x)))))", "problem": 22, "user": "536c1119e4b0fc7073fd6e34"}, {"code": "(fn [x] (reduce + (map (fn [i] 1) x)))", "problem": 22, "user": "535e518ee4b04ce2eb3ed2cf"}, {"code": "(fn cnt [x]\n  (if (empty? x)\n    0\n    (+ 1 (cnt (rest x)))))", "problem": 22, "user": "5376966ae4b06839e8705e27"}, {"code": "(fn [seq] (reduce (fn [x y] (inc x)) 0 seq))", "problem": 22, "user": "5376d1cfe4b06839e8705e2a"}, {"code": "(fn [lst] (reduce + 0 (map (constantly 1) lst)))", "problem": 22, "user": "53765e1ae4b06839e8705e23"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "5377a23ce4b06839e8705e39"}, {"code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "problem": 22, "user": "5377c9e5e4b06839e8705e3f"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "536d260be4b0fc7073fd6e55"}, {"code": "#(->> % (map (constantly 1)) (reduce +))", "problem": 22, "user": "53779a26e4b06839e8705e38"}, {"code": "#(loop [total 0 my-collection %]\n   (if (empty? my-collection)\n     total\n     (recur (inc total) (rest my-collection))))", "problem": 22, "user": "521af66be4b0c4ef0be8301b"}, {"code": "#(last (interleave % (iterate inc 1)))", "problem": 22, "user": "536e5b68e4b0fc7073fd6e6d"}, {"code": "(fn my-count\n    ([coll]\n     (my-count coll 0))\n    ([coll cnt]\n     (if (empty? coll)\n       cnt\n       (recur (rest coll) (inc cnt)))))", "problem": 22, "user": "53613db8e4b0243289761e41"}, {"code": "(fn [s]\n  (loop [s s\n         n 0]\n    (if (first s)\n      (recur (rest s) (inc n))\n      n\n      )))", "problem": 22, "user": "53778b90e4b06839e8705e36"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "5379306fe4b06839e8705e50"}, {"code": "(fn lenV [V] (if (empty? V) 0 (+ 1 (lenV (rest V)))))", "problem": 22, "user": "536c77f1e4b0fc7073fd6e3f"}, {"code": "#(loop [coll % n 0]\n\t(if (empty? coll)\n\t\tn\n\t\t(recur (rest coll) (inc n))))", "problem": 22, "user": "5370b386e4b0fc7073fd6e9b"}, {"code": "#(loop [col %,\n        res 0]\n    (if (empty? col)\n      res\n      (recur (rest col) (+ res 1))))", "problem": 22, "user": "5360f043e4b0243289761e3c"}, {"code": "(fn [col]\n    (loop [col col acc 0]\n      (if (empty? col)\n        acc\n        (recur (rest col) (+ acc 1))\n        )))", "problem": 22, "user": "52d019ede4b07d0d72b273b6"}, {"code": "(fn [s]\n  (reduce (fn [c v] (inc c)) 0 s))", "problem": 22, "user": "5370f8ede4b0fc7073fd6ea2"}, {"code": "(fn [coll]\n  ((fn step [i coll]\n     (if (seq coll)\n       (step (inc i) (rest coll))\n       i))\n   0 coll))", "problem": 22, "user": "52cda397e4b07d0d72b2737a"}, {"code": "(fn [x] (let [mycount (fn mycount [x y] (if (= x '())\n                                          y\n                                          (mycount (rest x) (+ 1 y))\n                                          )\n                                )]\n                  (mycount x 0)\n                 ))", "problem": 22, "user": "537a620be4b06839e8705e5f"}, {"code": "(fn [x] (alength (to-array x)))", "problem": 22, "user": "53777c44e4b06839e8705e32"}, {"code": "(fn count' [coll]\n  ((fn count-inner [coll' c]\n    (if (empty? coll')\n      c\n      (count-inner (rest coll') (+ c 1)))) coll 0))", "problem": 22, "user": "532be28ae4b09d4e7a9b5539"}, {"code": "#(.size (vec %))", "problem": 22, "user": "537a1012e4b06839e8705e5c"}, {"code": "#(apply + (map (constantly 1) %))", "problem": 22, "user": "4dad76588e77d6ed63f12a44"}, {"code": "(fn [x]\n  (loop [s x c 0]\n    (if (empty? s)\n      c\n      (recur (rest s) (inc c)))))", "problem": 22, "user": "53791ab7e4b06839e8705e4d"}, {"code": "#(reduce (fn [c _] (inc c)) 0 %)", "problem": 22, "user": "537b1083e4b06839e8705e64"}, {"code": "(fn cnt [input] (reduce + (map (fn [_] 1) input)))", "problem": 22, "user": "536db108e4b0fc7073fd6e61"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "4f038938535dcb61093f6b18"}, {"code": "(fn counT [l] (if (not-empty l)\n                (+ 1 (counT (rest l)))\n                0))", "problem": 22, "user": "537bbe08e4b06839e8705e6f"}, {"code": "reduce (fn [a b] (+ 1 a)) 0", "problem": 22, "user": "537b9b0ce4b06839e8705e6b"}, {"code": "#(reduce (fn [t _] (+ t 1)) 0 %1)", "problem": 22, "user": "4ed6c35e535d10e5ff6f52e8"}, {"code": "(fn [s] (reduce (fn [x _] (inc x)) 0 (seq s)))", "problem": 22, "user": "537bde5de4b06839e8705e73"}, {"code": "#(alength (to-array %))", "problem": 22, "user": "537bb9efe4b06839e8705e6e"}, {"code": "(fn [items]\n  (reduce + (map (constantly 1) items))\n)", "problem": 22, "user": "4e749e84535d7a570dd295b9"}, {"code": "(fn [col]\n  (loop [col col n 0]\n    (if (empty? col)\n      n\n      (recur (rest col) (inc n)))))", "problem": 22, "user": "4f849f76e4b033992c121c36"}, {"code": "#(reduce (fn [accu elm] (inc accu)) 0 %)", "problem": 22, "user": "536f96e3e4b0fc7073fd6e83"}, {"code": "(fn [c]\n    (loop [coll c, i 0]\n        (if (nil? (first coll)) i (recur (rest coll) (inc i)) )\n     )\n )", "problem": 22, "user": "5307cd97e4b02e82168697a7"}, {"code": "(fn foo [x]\n  (if (empty? x) 0 (+ 1 (foo (rest x)))))", "problem": 22, "user": "537cd1dce4b06839e8705e7e"}, {"code": "(fn len [col] (if (next col) (inc (len (next col))) 1))", "problem": 22, "user": "52c54c84e4b0c2d177d620f0"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "537b1b38e4b06839e8705e66"}, {"code": "(fn [l] (reduce (fn [c & _] (inc c)) 0 l))", "problem": 22, "user": "537d366de4b06839e8705e87"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "4f7426fde4b044e54cd9a8f5"}, {"code": "(fn sol [l]\n    (if (seq l)\n      (inc (sol (rest l)))\n      0))", "problem": 22, "user": "5374cbf4e4b06d7f452d9e29"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "537d4a69e4b06839e8705e8a"}, {"code": "(fn [arg]\n  (loop [li arg result 0]\n    (if (empty? li)\n      result\n      (recur (rest li) (inc result)))))", "problem": 22, "user": "537881a4e4b06839e8705e46"}, {"code": "reduce (fn [acc _] (inc acc)) 0", "problem": 22, "user": "53790dc6e4b06839e8705e4c"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "537e59ffe4b06839e8705ea3"}, {"code": "#(reduce (fn [n _] (inc n)) 0 %)", "problem": 22, "user": "537e745ae4b06839e8705ea6"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "5376f0d0e4b06839e8705e2c"}, {"code": "(fn howmany [sequence]\n  (reduce (fn [i e] (inc i)) 0 sequence)\n)", "problem": 22, "user": "537d9b39e4b06839e8705e8f"}, {"code": "(fn cnt [l] (if (empty? l) 0 (+ 1 (cnt (rest l)))))", "problem": 22, "user": "531bad96e4b08068f379ed93"}, {"code": "#(reduce + (map (fn [x] 1) % ))", "problem": 22, "user": "537e8bc4e4b06839e8705ea8"}, {"code": "#(reduce (fn [acc _] (+ acc 1)) 0 %)", "problem": 22, "user": "537e860ae4b06839e8705ea7"}, {"code": "#(loop [coll % sum 0]\n\t  (if (= (first coll) nil)\n\t    sum\n\t    (recur (drop 1 coll) (inc sum))))", "problem": 22, "user": "536c99c5e4b0fc7073fd6e46"}, {"code": "#(loop [ x %  y 0] ( if (empty? x) y (recur (rest x) (inc y))))", "problem": 22, "user": "537d6d44e4b06839e8705e8c"}, {"code": "#(reduce (fn [x _] (inc x)) 0 %)", "problem": 22, "user": "537f4652e4b06839e8705eb1"}, {"code": "(fn [x] (loop [x x\n                cnt 0] \n          (if (empty? x)\n            cnt\n            (recur (rest x) (inc cnt)))))", "problem": 22, "user": "525cc912e4b0cb4875a45d48"}, {"code": "(fn [coll] (reduce + (map (fn [x] 1) coll)))", "problem": 22, "user": "537f6df1e4b06839e8705eb5"}, {"code": "(fn myCount\n  ([input]\n   (myCount input 0))\n  ([input i]\n   (if (empty? input)\n     (+ i 0)\n     (myCount (rest input) (+ i 1)))))", "problem": 22, "user": "537cf454e4b06839e8705e82"}, {"code": "#(alength (into-array %))", "problem": 22, "user": "511ffbabe4b0e88f5a20c40c"}, {"code": "reduce (fn [a b](+ 1 a)) 0", "problem": 22, "user": "537fa02ce4b06839e8705ebc"}, {"code": "reduce (fn [x y] (inc x)) 0", "problem": 22, "user": "537e4259e4b06839e8705e9e"}, {"code": "(fn my-count [xs]\n  (loop [ys (seq xs) n 0]\n    (if (= ys nil) n (recur (next ys) (inc n)))))", "problem": 22, "user": "53800d99e4b06839e8705ebd"}, {"code": "#(reduce (fn [z _] (inc z)) 0 %)", "problem": 22, "user": "53809b34e4b06839e8705ec3"}, {"code": "(fn [s]\n  (letfn\n    [(helper [s n] \n       (if \n         (empty? s)\n         n\n         (recur (rest s) (inc n))))]\n    (helper s 0)))", "problem": 22, "user": "53813189e4b06839e8705ec9"}, {"code": "(fn[a] (reduce + (map (constantly 1) a)))", "problem": 22, "user": "53806e5be4b06839e8705ec1"}, {"code": "(fn [L] (reduce + (map (fn [x] 1) L)))", "problem": 22, "user": "53811c2de4b06839e8705ec8"}, {"code": "#(reduce (fn [x _] (+ 1 x)) 0 %)", "problem": 22, "user": "5381d7fbe4b06839e8705ecd"}, {"code": "#(reduce + (map (fn [y] 1) %))", "problem": 22, "user": "53820087e4b06839e8705ecf"}, {"code": "(fn [seq] (reduce (fn [total, thing] (+ total 1)) 0 seq))", "problem": 22, "user": "537ca19be4b06839e8705e7a"}, {"code": "(fn counter [s] (if (empty? s) 0 (+ 1 (counter (rest s)))))", "problem": 22, "user": "5382668fe4b06839e8705ed3"}, {"code": "(fn [x]\n  (loop [l x\n\t  result 0]\n    (if (not (empty? l))\n      (recur (rest l) (+ 1 result))\n      result)))", "problem": 22, "user": "52dab592e4b09f7907dd13bd"}, {"code": "#(reduce + (map (fn [x] (if (nil? x) 0 1)) %)) \n\n;;(fn [x] (+ 1 (.lastIndexOf x (last x))))", "problem": 22, "user": "536a52f1e4b0243289761eac"}, {"code": "reduce (fn [x _] (inc x)) 0", "problem": 22, "user": "5383865ce4b06839e8705edf"}, {"code": "(fn [items]\n      (loop [nitems items\n             i 0]\n       (if-not (seq nitems)\n         i\n         (recur\n          (rest nitems)\n          (inc i)))))", "problem": 22, "user": "5383c054e4b06839e8705ee8"}, {"code": "(fn [collection] (reduce + (map (fn [x] 1) collection)))", "problem": 22, "user": "5383b929e4b06839e8705ee7"}, {"code": "(fn [x] (inc (first (last (map-indexed vector x)))))", "problem": 22, "user": "5383cc0ae4b06839e8705ee9"}, {"code": "(fn [xs]\n   (loop [x xs c 0]\n     (if (empty? x)\n       c\n       (recur (rest x) (inc c)))))", "problem": 22, "user": "5327c591e4b09d4e7a9b54ff"}, {"code": "(fn count-sequence [s]\n  (val (apply max-key val (zipmap (seq s) (iterate inc 1)))))", "problem": 22, "user": "52b71bd2e4b0c58976d9ad4d"}, {"code": "(fn [elems]\n  (loop [n 0\n         remain elems]\n    (if (empty? remain)\n      n\n      (recur (inc n) (rest remain)))))", "problem": 22, "user": "536f871de4b0fc7073fd6e7f"}, {"code": "#(reduce (fn [x y] (inc x)) 0 %)", "problem": 22, "user": "51d63d15e4b0a9b6ebce9406"}, {"code": "(fn [coll]\n  (reduce (fn [a b] (inc a)) 0 coll))", "problem": 22, "user": "53834ed3e4b06839e8705edb"}, {"code": "(fn [x] (loop [x (vec x) i 0] (if (empty? x) i (recur (pop x) (inc i)))))", "problem": 22, "user": "5383521fe4b06839e8705edc"}, {"code": "(fn cnt [x] (if (empty? x) 0 (+ 1 (cnt (next x)))))", "problem": 22, "user": "537f8e7be4b06839e8705eb8"}, {"code": "(fn cont [x] \n  (loop [orig x\n         index 0]\n    (cond (empty? orig) index\n          :else (recur (rest orig) (inc index)))))", "problem": 22, "user": "5383ee9ee4b06839e8705eeb"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "537f9e34e4b06839e8705ebb"}, {"code": "#(reduce \n    (fn [x y] (inc x))\n     0 %)", "problem": 22, "user": "52f28593e4b05e3f0be25ef9"}, {"code": "#(reduce (fn [c _] (inc c)) 0 %)", "problem": 22, "user": "5384bbf8e4b06839e8705ef5"}, {"code": "#(reduce + (map (fn [%] 1) %))", "problem": 22, "user": "5384e2cee4b06839e8705ef7"}, {"code": "(fn cn [sequ]\n  (if (empty? sequ) 0\n      (+ 1 (cn (rest sequ)))))", "problem": 22, "user": "53854a04e4b06839e8705eff"}, {"code": "#(reduce (fn [x y] (inc x)) 0 %)", "problem": 22, "user": "538538b2e4b06839e8705efe"}, {"code": "(fn my-count [coll]\n  (if (next coll)\n    (+ 1 (my-count (next coll)))\n    1))", "problem": 22, "user": "538557aee4b06839e8705f02"}, {"code": "#(reduce + (map (fn[a] 1) %))", "problem": 22, "user": "513b10e3e4b067e25a345ed0"}, {"code": "reduce (fn [a _] (+ a 1)) 0", "problem": 22, "user": "5384197fe4b06839e8705eed"}, {"code": "(fn [seq1] (loop [i 0 seq2 seq1] (if (empty? seq2) i (recur (inc i) (rest seq2)))))", "problem": 22, "user": "538570cce4b06839e8705f03"}, {"code": "(fn [a] (reduce (fn [c _] (+ c 1)) 0 a))", "problem": 22, "user": "5385785ae4b06839e8705f04"}, {"code": "(fn [c] (reduce (fn [n e] (inc n)) 0 c))", "problem": 22, "user": "4f294bbbe4b0d6649770a022"}, {"code": "(fn [x] (reduce + (map (fn [y] 1) x)) )", "problem": 22, "user": "5385eaa3e4b06839e8705f09"}, {"code": "(fn [x](reduce + (map (fn [a] 1) x)))", "problem": 22, "user": "5385ee97e4b06839e8705f0a"}, {"code": "(fn counter [l] (reduce + (map (fn [x] 1) l)))", "problem": 22, "user": "538505d1e4b06839e8705efa"}, {"code": "#(loop [coll % n 0]\n\t(if (empty? coll)\n\t\tn\n\t\t(recur (rest coll) (inc n))\n\t)\n)", "problem": 22, "user": "53858d5be4b06839e8705f06"}, {"code": "reduce (fn [acc r] (+ acc 1)) 0", "problem": 22, "user": "53852e84e4b06839e8705efd"}, {"code": "(fn count-elem\n  [s]\n  (loop [lst s\n         cnt 0]\n    (if (empty? lst)\n      cnt\n      (recur (rest lst) (inc cnt)))))", "problem": 22, "user": "538510c2e4b06839e8705efb"}, {"code": "(fn [alist] \n   (reduce + \n           (map first (map vector (repeat 1) alist))))", "problem": 22, "user": "53716539e4b0fc7073fd6eb1"}, {"code": "reduce (fn [x y] (inc x)) 0", "problem": 22, "user": "53871d06e4b06839e8705f19"}, {"code": "#(apply +(map (fn[n] 1) %))", "problem": 22, "user": "53862316e4b06839e8705f0e"}, {"code": "#(reduce (fn [c _] (inc c)) 0 %)", "problem": 22, "user": "538754b1e4b06839e8705f1c"}, {"code": "(fn [x] (reduce (fn [a b] (inc a)) 1 (nthnext x 1)))", "problem": 22, "user": "53874820e4b06839e8705f1b"}, {"code": "(fn [coll] \n  (reduce + \n    (map (fn [x] (if nil? x) 0 1) coll)))", "problem": 22, "user": "53864493e4b06839e8705f10"}, {"code": "(fn foo [lst]\n  (if (empty? lst)\n    0\n    (+ 1 (foo (rest lst)))))", "problem": 22, "user": "53879e89e4b06839e8705f23"}, {"code": "#(reduce (fn [a _] (+ a 1)) 0 %)", "problem": 22, "user": "537943c0e4b06839e8705e52"}, {"code": "(fn [coll] (reduce (fn [acc memo] (inc acc)) 0 coll))", "problem": 22, "user": "5382b433e4b06839e8705ed7"}, {"code": "(fn [col] (second (last (map #(list %1 %2) col (iterate inc 1)))))", "problem": 22, "user": "53858594e4b06839e8705f05"}, {"code": "(fn [z] (reduce + (map (fn [x] 1) z)))", "problem": 22, "user": "5387aea3e4b06839e8705f26"}, {"code": "reduce (fn [acc _] (inc acc)) 0", "problem": 22, "user": "53886d2fe4b0640c7a9a589d"}, {"code": "(fn my-count [seqn]\n  (if (not (seq seqn))\n    0\n    (inc (my-count (rest seqn)))))", "problem": 22, "user": "53889587e4b0640c7a9a589e"}, {"code": "(fn [x]\n\n(loop [i 0 theList x]\n  (if (= (empty? theList) false)\n    (recur (inc i) (rest theList))\n    i\n   )\n )\n \n  )", "problem": 22, "user": "5388a55de4b0640c7a9a58a1"}, {"code": "(fn [l] \n  (reduce \n   (fn [acc, _] (inc acc)) 0 l))", "problem": 22, "user": "50321311e4b000fc67a99a86"}, {"code": "#(loop [x 0 list (seq %1)]\n    (if (empty? list)\n      x\n      (recur (inc x) (rest list))))", "problem": 22, "user": "53838742e4b06839e8705ee0"}, {"code": "reduce (fn [x _] (inc x)) 0", "problem": 22, "user": "537bca8be4b06839e8705e71"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "53890b11e4b0640c7a9a58ad"}, {"code": "#(reduce (fn [n _] (inc n)) 0 %)", "problem": 22, "user": "5388d50fe4b0640c7a9a58a7"}, {"code": "reduce (fn [x _] (inc x)) 0", "problem": 22, "user": "5383668ee4b06839e8705edd"}, {"code": "(fn [col] (reduce (fn [c item2] (inc c)) 0 col))", "problem": 22, "user": "5389fe49e4b0640c7a9a58b4"}, {"code": "(fn [coll] (reduce (fn [a b] (+ a 1)) 0 coll))", "problem": 22, "user": "5389fb9fe4b0640c7a9a58b3"}, {"code": "(fn count_c [aSeq]\n  (if (empty? aSeq)\n    0\n    (inc (count_c (rest aSeq)))))", "problem": 22, "user": "5379ed48e4b06839e8705e5a"}, {"code": "(fn [l] (reduce + (map (fn [x] 1) l)))", "problem": 22, "user": "538a2930e4b0640c7a9a58b7"}, {"code": "#(.length (vec %))", "problem": 22, "user": "538a8d28e4b0640c7a9a58ba"}, {"code": "#(reduce (fn [x y] (inc x)) 0 %)", "problem": 22, "user": "538b1644e4b0640c7a9a58c0"}, {"code": "#(reduce (fn [acc x] (+ acc 1)) 0 %)", "problem": 22, "user": "538bd264e4b0640c7a9a58c8"}, {"code": "(fn [s]\n  (loop [s s n 0]\n    (if (= s [])\n      n\n      (recur (rest s) (inc n)))))", "problem": 22, "user": "538be6afe4b0640c7a9a58c9"}, {"code": "(fn len [seq] (reduce + (map (fn [x] 1) seq)))", "problem": 22, "user": "538c3424e4b0b51d73faae58"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "529c585ae4b04e0c58e87b60"}, {"code": "(fn [l] (reduce (fn [acc el] (+ acc 1)) 0 l))", "problem": 22, "user": "538c6db7e4b0b51d73faae5a"}, {"code": "(fn [s]\n  (loop [s s, n 0]\n    (if (= (first s) nil)\n      n\n      (recur (rest s) (+ 1 n)))))", "problem": 22, "user": "538cc422e4b0b51d73faae63"}, {"code": "(fn [sequ] \n  (loop [s sequ n 0]\n  \t(if (empty? s)\n  \t\tn\n  \t\t(recur (butlast s) (inc n))\n      )\n    )\n  )", "problem": 22, "user": "53863845e4b06839e8705f0f"}, {"code": "(fn [coll]\n  (loop [c coll\n         n 0]\n    (if (empty? c)\n      n\n      (recur (rest c) (inc n)))))", "problem": 22, "user": "50310713e4b05b7df5a0b84c"}, {"code": "(fn f3 [x]\n  (reduce (fn [a _]\n            (+ a 1)) 0 x))", "problem": 22, "user": "535aee3be4b04ce2eb3ed2aa"}, {"code": "(fn [x]\n  (loop [counter 0\n         x x]\n    (if (empty? x)\n      counter\n      (recur (inc counter) (rest x)))))", "problem": 22, "user": "538d464ee4b0b51d73faae69"}, {"code": "(fn my-count [sq]\n  (if (empty? sq)\n    0\n    (inc (my-count (rest sq)))))", "problem": 22, "user": "538d64cae4b0b51d73faae6d"}, {"code": "(fn [v] (reduce + (map  #(if % 1 1) v)))", "problem": 22, "user": "538d7e2ee4b0b51d73faae70"}, {"code": "#(reduce (fn [a b] (+ 1 a)) 0 %)", "problem": 22, "user": "538d8bb8e4b0b51d73faae71"}, {"code": "(fn [s]\n  (loop [ss s cnt 0]\n    (if (empty? ss)\n      cnt\n      (recur (rest ss) (+ cnt 1)))))", "problem": 22, "user": "538d0d66e4b0b51d73faae66"}, {"code": "#(reduce + (map(fn[x] 1) %))", "problem": 22, "user": "538de891e4b0b51d73faae78"}, {"code": "(fn [l] ((fn rec [l n] (if (empty? l) n (rec (rest l) (inc n)))) l 0))", "problem": 22, "user": "53050c04e4b0d8b024fd3757"}, {"code": "(fn [coll] (reduce (fn[x y] (inc x)) 0 coll))", "problem": 22, "user": "538e1331e4b0b51d73faae7f"}, {"code": "#(loop [coll %\n          cnt  0]\n     (if (first coll)\n       (recur (rest coll) (inc cnt))\n       cnt))", "problem": 22, "user": "538e5b3fe4b0b51d73faae84"}, {"code": "#(reduce (fn [x _] (inc x)) 0 %)", "problem": 22, "user": "53847a4ce4b06839e8705ef3"}, {"code": "(fn [s] (\n\t(\n\t\tfn [t n] (\n\t\t\tif (empty? t)\n\t\t\t\tn\n\t\t\t\t(recur (rest t) (+ n 1))\n\t\t)\n\t)\n\ts\n\t0\n))", "problem": 22, "user": "538de1ede4b0b51d73faae77"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "537e0680e4b06839e8705e98"}, {"code": "(fn count' [s]\n  (if-let [s' (seq s)]\n    (inc (count' (rest s')))\n    0))", "problem": 22, "user": "537e500ce4b06839e8705ea1"}, {"code": "#(reduce (fn [x y] (inc x)) 0 %)", "problem": 22, "user": "538fe131e4b0b51d73faae91"}, {"code": "#(reduce (fn [x y](inc x)) 0 %)", "problem": 22, "user": "5390110de4b0b51d73faae94"}, {"code": "(fn number_of_elements [se] (reduce(fn [i a] (inc i)) 0 se))", "problem": 22, "user": "53901605e4b0b51d73faae95"}, {"code": "#(loop[l %, c 0]\n   (if (empty? l) \n     c\n     (recur (next l) (inc c))\n     ))", "problem": 22, "user": "538d73c1e4b0b51d73faae6f"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "53720d55e4b0493c815db705"}, {"code": "(fn [coll] (+ 1 (last (map-indexed (fn [idx item] idx) coll))))", "problem": 22, "user": "538c9144e4b0b51d73faae5d"}, {"code": "(fn my-c [seq]\n  (if (= seq [])\n    0\n    (inc (my-c (rest seq)))))", "problem": 22, "user": "53908e6be4b0b51d73faae9a"}, {"code": "(fn [ls]\n  (reduce (fn [c e] (inc c)) 0 ls))", "problem": 22, "user": "5390952be4b0b51d73faae9c"}, {"code": "#(reduce (fn [n x] (inc n)) 0 %)", "problem": 22, "user": "53906b89e4b0b51d73faae99"}, {"code": "#(reduce + (map (fn [x] 1) %1))", "problem": 22, "user": "5359734ae4b04ce2eb3ed29d"}, {"code": "#(reduce (fn [x y] (inc x)) 0 %)", "problem": 22, "user": "5391cd3ee4b0b51d73faaea9"}, {"code": "#(loop [x %1 y 0]\n   (if (nil? (first x))\n     y\n     (recur (rest x) (inc y))))", "problem": 22, "user": "52a3a7ebe4b04e0c58e87c02"}, {"code": "(fn  my-count [sequence]\n  (loop [s (seq sequence), c 0]\n    (cond (empty? s) c\n          :else (recur (rest s) (inc c)))))", "problem": 22, "user": "538e36c7e4b0b51d73faae81"}, {"code": "#(reduce (fn [a _] (inc a)) 0 %)", "problem": 22, "user": "5392b849e4b0b51d73faaeb1"}, {"code": "reduce (fn [i _] (+ i 1)) 0", "problem": 22, "user": "5392bfdee4b0b51d73faaeb2"}, {"code": "(fn [s]\n  (loop [st s\n         n 0] \n    (if (empty? st)\n      n\n      (recur (rest st) (+ n 1)))))", "problem": 22, "user": "53710c09e4b0fc7073fd6ea5"}, {"code": "(fn countSequence\n  [x]\n  (cond\n   (= x (empty x)) 0\n   :else (+ 1 (countSequence (rest x)))))", "problem": 22, "user": "5393653be4b0b51d73faaebc"}, {"code": "(fn [s]\n  (loop [se s, acc 0]\n    (if (empty? se)\n      acc\n      (recur (rest se) (inc acc)))))", "problem": 22, "user": "5392500ae4b0b51d73faaeaf"}, {"code": "(fn s [l]\n  (if (empty? l)\n    0\n  \t(+ 1 (s (rest l)))))", "problem": 22, "user": "539378fbe4b0b51d73faaebd"}, {"code": "(fn count' [coll] (if (nil? coll) 0 (+ (count' (next coll)) 1)))", "problem": 22, "user": "5393a2e1e4b0b51d73faaebf"}, {"code": "reduce (fn [a b] (inc a)) 0", "problem": 22, "user": "5382704be4b06839e8705ed4"}, {"code": "#(reduce (fn [sum _] (inc sum)) 0 %)", "problem": 22, "user": "53940789e4b0b51d73faaec3"}, {"code": "(fn [li] (reduce (fn [x y] (+ x 1)) 0 li))", "problem": 22, "user": "5394265ee4b0b51d73faaec6"}, {"code": "#(reduce (fn [x y] (inc x)) 0 %)", "problem": 22, "user": "539432c9e4b0b51d73faaec7"}, {"code": "(fn [col] \n  (+ (.lastIndexOf col \n                   (if (instance? String col)\n                     (int (last col))\n                     (last col))) \n     1))", "problem": 22, "user": "5394162be4b0b51d73faaec5"}, {"code": "reduce (fn [x _] (inc x)) 0", "problem": 22, "user": "53948e96e4b0b51d73faaecc"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "5394aa77e4b0b51d73faaecd"}, {"code": "(fn c [s] \n (if (first s)\n   (inc (c  (next s)))\n   0))", "problem": 22, "user": "538d4926e4b0b51d73faae6a"}, {"code": "(fn ct [x] (if (nil? (first x)) 0 (+ 1 (ct (rest x)))))", "problem": 22, "user": "5394c22ae4b0b51d73faaed0"}, {"code": "(fn\n  [coll]\n  (reduce + 0 (map (constantly 1) coll))\n)", "problem": 22, "user": "53951c75e4b0b51d73faaed4"}, {"code": "#(reduce (fn [acc e] (inc acc)) 0 %)", "problem": 22, "user": "538d49e1e4b0b51d73faae6b"}, {"code": "(fn [s]\n  (loop [sq s\n         cnt 0]\n    (if (nil? sq)\n      cnt\n      (recur (next sq) (inc cnt)))))", "problem": 22, "user": "5374ad7de4b06d7f452d9e26"}, {"code": "#(->> %1\n      (interleave (repeat 1))\n      (take-nth 2)\n      (reduce +))", "problem": 22, "user": "528410bbe4b0239c8a67adc2"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "5395cea3e4b0b51d73faaeda"}, {"code": "reduce (fn [a b] (inc a)) 0", "problem": 22, "user": "52c98e7ae4b0c2d177d6213d"}, {"code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "problem": 22, "user": "5395de6ae4b0b51d73faaedc"}, {"code": "#(reduce + (map (fn [e] 1) %1))", "problem": 22, "user": "5395a79be4b0b51d73faaed9"}, {"code": "#(reduce + (map (fn[x] 1) %))", "problem": 22, "user": "53959edde4b0b51d73faaed8"}, {"code": "(fn [x] (+ 1 (.lastIndexOf (vec x) (last x))))", "problem": 22, "user": "5396c9a8e4b0b51d73faaee4"}, {"code": "#(apply + (map (fn [_] 1) %))", "problem": 22, "user": "53973e7be4b0b51d73faaee6"}, {"code": "#(reduce (fn [a _] (inc a)) 0 %)", "problem": 22, "user": "5394c45de4b0b51d73faaed2"}, {"code": "#((fn [lst n] (if (= lst '()) n (recur (rest lst) (+ n 1)))) % 0)", "problem": 22, "user": "539755d9e4b0b51d73faaee8"}, {"code": "#(loop [i 0 listo (into [] %)]\n    (if (empty? listo)\n      i\n      (recur (inc i) (pop listo))))", "problem": 22, "user": "53975267e4b0b51d73faaee7"}, {"code": "(comp (partial apply +) (partial map (fn [_] 1)))", "problem": 22, "user": "53976599e4b0b51d73faaeea"}, {"code": "(fn my_count [l] (\n  if (= (first l) nil) 0 (+ 1 (my_count (rest l)))\n))", "problem": 22, "user": "53979a87e4b0b51d73faaef0"}, {"code": "(fn [l]\n  ((fn foo [x c]\n      (if (empty? x)\n        c\n        (foo (rest x) (+ c 1))\n        )\n     ) \n  l 0) )", "problem": 22, "user": "53978ea3e4b0b51d73faaeeb"}, {"code": "(fn [y] (reduce + (map (fn [x] (if x 1)) y)))", "problem": 22, "user": "53979319e4b0b51d73faaeec"}, {"code": "#(reduce (fn[x y] (inc x)) 0 %)", "problem": 22, "user": "53979793e4b0b51d73faaeee"}, {"code": "(partial (fn [acc [h & t]] (if t (recur (inc acc) t) acc)) 1)", "problem": 22, "user": "53979966e4b0b51d73faaeef"}, {"code": "(fn cnt-seq [xs]\n  (loop [xs xs\n        cnt 0]\n     (if (seq xs) (recur (rest xs) (inc cnt)) cnt)))", "problem": 22, "user": "52bc0dade4b07a9af57922f1"}, {"code": "reduce (fn [num item] (+ num 1)) 0", "problem": 22, "user": "507516d0e4b054001656acda"}, {"code": "#(loop [i 0 c %] (if (seq c) (recur (+ 1 i) (rest c)) i))", "problem": 22, "user": "5398305fe4b0b51d73faaef6"}, {"code": "(fn cnt [x]\n  ((fn cnt-inner [x,c]\n    (if (not (empty? x))\n      (cnt-inner (rest x) (inc c))\n      c\n)) x 0))", "problem": 22, "user": "53981cbce4b0b51d73faaef5"}, {"code": "(fn [coll] (reduce (fn [x y] (inc x)) 0 coll))", "problem": 22, "user": "5398d89ae4b0b51d73faaf01"}, {"code": "(fn [inp]\n  (loop [acc 0 coll inp]\n    (if (nil? (first coll))\n      acc\n      (recur (inc acc) (drop 1 coll)))))", "problem": 22, "user": "5398123ee4b0b51d73faaef3"}, {"code": "(fn [l]\n  (loop [ll l nn 0]\n    (if (empty? ll) \n      nn\n      (recur (next ll) (inc nn)))))", "problem": 22, "user": "53997239e4b0b51d73faaf07"}, {"code": "(fn cnt [coll] (if-let [s (seq coll)] (inc (cnt (rest s))) 0))", "problem": 22, "user": "539a2901e4b0b51d73faaf0f"}, {"code": "(fn [coll] \n  (reduce (fn [x y] (inc x)) 0 coll))", "problem": 22, "user": "539ad6b7e4b0b51d73faaf18"}, {"code": "#(reduce (fn [x _] (inc x)) 0 %)", "problem": 22, "user": "537e104ce4b06839e8705e9a"}, {"code": "reduce (fn [x,y] (+ x 1)) 0", "problem": 22, "user": "539ac065e4b0b51d73faaf16"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "5399c864e4b0b51d73faaf0b"}, {"code": "#(loop [c 0 x %]\n   (if(empty? x) c\n     (recur (inc c) (rest x))))", "problem": 22, "user": "539affaae4b0b51d73faaf1a"}, {"code": "(fn [s] (reduce + (map (fn [x] 1) s)))", "problem": 22, "user": "539b5fcee4b0b51d73faaf1e"}, {"code": "(fn [ary] \n  (reduce (fn [accum _] (inc accum)) 0 ary))", "problem": 22, "user": "5398e3dde4b0b51d73faaf02"}, {"code": "#(reduce (fn [x _] (inc x)) 0 %)", "problem": 22, "user": "5397ecf6e4b0b51d73faaef2"}, {"code": "(fn [xs]\n  (reduce (fn [acc -] (inc acc)) 0 xs))", "problem": 22, "user": "539c20a4e4b0b51d73faaf25"}, {"code": "#(reduce (fn [n _] (inc n)) 0 %)", "problem": 22, "user": "539c64cde4b0b51d73faaf2a"}, {"code": "(fn [coll]\n  (loop [coll coll cnt 0]\n    (if (empty? coll)\n      cnt\n      (recur (rest coll) (inc cnt)))))", "problem": 22, "user": "5391ab43e4b0b51d73faaea6"}, {"code": "(fn [coll] (reduce (fn [cnt y] (inc cnt)) 0 coll))", "problem": 22, "user": "539cacbde4b0b51d73faaf2f"}, {"code": "(fn [n x] (if (= x ()) n (recur (+ n 1) (rest x)))) 0", "problem": 22, "user": "539c9d7ee4b0b51d73faaf2d"}, {"code": "(fn [t] \n  (loop [x 0 y t]\n     (if (empty? y)\n       x\n     (recur (inc x) (rest y)))))", "problem": 22, "user": "53752b27e4b06839e8705e12"}, {"code": "(fn my-count [coll] ( if (empty? coll) 0 (+ 1 (my-count (rest coll)))))", "problem": 22, "user": "539b4268e4b0b51d73faaf1c"}, {"code": "(fn a [seq]\n  ((fn [s n]\n    (if (empty? s)\n      n\n      (recur (rest s) (inc n)))) seq 0))", "problem": 22, "user": "52bf0de2e4b07a9af579232a"}, {"code": "#(reduce (fn [x y] (inc x)) 0 %)", "problem": 22, "user": "539d4db6e4b0b51d73faaf34"}, {"code": "#(reduce + (map (fn[x] 1) %))", "problem": 22, "user": "539d4cdae4b0b51d73faaf33"}, {"code": "#(reduce (fn [c _] (inc c)) 0 %)", "problem": 22, "user": "52b507eee4b0c58976d9ad35"}, {"code": "(fn [xs]\n  (loop [r xs, c 0]\n    (if (first r)\n      (recur (rest r) (+ 1 c))\n      c)))", "problem": 22, "user": "539ddf25e4b0b51d73faaf3e"}, {"code": "(fn count2 [s] (if (seq s) (+ 1 (count2 (rest s))) 0))", "problem": 22, "user": "539d85b1e4b0b51d73faaf37"}, {"code": "(fn [coll]\n  (let [counter (fn [coll n]\n                  (if (seq coll)\n                    (recur (rest coll) (inc n))\n                    n))]\n    (counter coll 0)))", "problem": 22, "user": "50b63c5ee4b0a86f8358ca69"}, {"code": "(fn [sec]\n  (apply + (mapv (fn[_] 1) (vec sec))))", "problem": 22, "user": "537cb3ade4b06839e8705e7d"}, {"code": "#(reduce (fn [x _] (inc x)) 0 %)", "problem": 22, "user": "539ec9f9e4b0ca733b974491"}, {"code": "#(reduce (fn [x y] (inc x)) 0 %)", "problem": 22, "user": "539eb153e4b0ca733b97448e"}, {"code": "reduce (fn [i _] (inc i)) 0", "problem": 22, "user": "539e79d2e4b0ca733b974489"}, {"code": "(fn [my_list] \n  (let [counter (fn [a_list number]\n                  (if (empty? a_list)\n                    number\n                    (recur (rest a_list) (+ number 1))))]\n    (counter my_list 0)))", "problem": 22, "user": "533c9661e4b085b17e897d72"}, {"code": "#(reduce (fn [acc _] (inc acc)) 0 %)", "problem": 22, "user": "539f45dce4b0ca733b974497"}, {"code": "(fn [x] (loop [l x c 0] (if (empty? l) c (recur (rest l) (+ c 1)))))", "problem": 22, "user": "4ea5b810535d7eef308072d7"}, {"code": "#(reduce (fn [x y] (inc x)) 0 %)", "problem": 22, "user": "53a009d2e4b0ca733b9744a5"}, {"code": "#(reduce (fn [x y] (inc x)) 0 %)", "problem": 22, "user": "53a028eae4b0ca733b9744a7"}, {"code": "(partial reduce (fn [acc _] (inc acc)) 0)", "problem": 22, "user": "539c54b3e4b0b51d73faaf27"}, {"code": "#(reduce + (map (fn [x] (int 1)) %))", "problem": 22, "user": "53a065c2e4b0ca733b9744ad"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "53a068cbe4b0ca733b9744ae"}, {"code": "(fn ccount [l]\n  (if (empty? l)\n    0\n    (+ 1 (ccount (rest l)))))", "problem": 22, "user": "53a09a1ee4b0ca733b9744b2"}, {"code": "(fn myCount [l] (if (= l '()) 0 (+ 1 (myCount (rest l)))))", "problem": 22, "user": "53a0acebe4b0ca733b9744b4"}, {"code": "(fn [seq] (reduce (fn [% _] (inc %)) 0 seq))", "problem": 22, "user": "53a0ab8ce4b0ca733b9744b3"}, {"code": "#(reduce (fn [x y] (inc x)) 0 %)", "problem": 22, "user": "531f26d0e4b08068f379edc3"}, {"code": "#(reduce (fn [x, %] (inc x)) 0 %)", "problem": 22, "user": "53a0ce51e4b0ca733b9744b6"}, {"code": "#(reduce (fn [c _] (inc c)) 0 %1)", "problem": 22, "user": "53a10187e4b0ca733b9744b9"}, {"code": "reduce #(do %2 (inc %)) 0", "problem": 22, "user": "51a4d802e4b0def3c5c5869a"}, {"code": "#(apply + (map (fn [x] 1) %))", "problem": 22, "user": "53a074a4e4b0ca733b9744af"}, {"code": "#(alength (to-array %))", "problem": 22, "user": "52c49401e4b0c2d177d620de"}, {"code": "(fn [s] (loop [ts s n 0]\n          (if (empty? ts)\n            n\n            (recur (rest ts) (inc n)))))", "problem": 22, "user": "539cb777e4b0b51d73faaf30"}, {"code": "#(reduce + (map (fn [x] 1) %))", "problem": 22, "user": "52d885afe4b09f7907dd1398"}, {"code": "(fn [coll] (reduce (fn [a b] (inc a)) 0 coll))", "problem": 22, "user": "53a1b5c8e4b0ca733b9744c1"}, {"code": "#(loop [coll %1 n 0]\n    (if (empty? coll)\n      n\n      (recur (rest coll) (inc n))))", "problem": 22, "user": "539f3397e4b0ca733b974496"}, {"code": "(fn [l] (#( if %1 (recur (next %1) (+ 1 %2)) %2) l 0))", "problem": 22, "user": "539c9e26e4b0b51d73faaf2e"}, {"code": "#(reduce (fn [acc x] (+ acc 1)) 0 %1)", "problem": 22, "user": "539e717fe4b0ca733b974488"}, {"code": "(fn [list]\n  (reduce + (map (fn [&p] 1) list)))", "problem": 22, "user": "539893fbe4b0b51d73faaefd"}, {"code": "#(loop [iteration 0]\n\t(if (nth % iteration nil)\n\t  (recur (inc iteration))\n\t  iteration))", "problem": 22, "user": "53a12b57e4b0ca733b9744ba"}, {"code": "#(reduce (fn [x y] (+ 1 x)) 0 %)", "problem": 22, "user": "53a2a259e4b0f1fc7453882c"}, {"code": "(fn f [x]\n (if (nil? x)\n   0\n   (+ 1 (f (next x)))))", "problem": 22, "user": "539f4e9ee4b0ca733b974498"}, {"code": "#(reduce + (map (constantly 1) %))", "problem": 22, "user": "53a2e6abe4b0f1fc7453882f"}, {"code": "(fn [coll]\n  (reduce (fn [x y] (+ 1 x)) 0 coll))", "problem": 22, "user": "538e864ee4b0b51d73faae87"}, {"code": "reduce (fn [a b] (inc a)) 0", "problem": 22, "user": "52f0ea04e4b05e3f0be25ee6"}, {"code": "(fn count2 ([x] (count2 0 x)) ([acc x] (if (empty? x) acc (recur (+ acc 1) (rest x)))))", "problem": 22, "user": "53a2ec2be4b0f1fc74538830"}, {"code": "(fn [seq]\n  (loop [length 0\n         seq   seq]\n    (if (= nil (first seq))\n      length\n      (recur (inc length)(rest seq)))))", "problem": 22, "user": "53a36fd7e4b0f1fc74538834"}, {"code": "reduce (fn [n s] (inc n)) 0", "problem": 22, "user": "53a198cae4b0ca733b9744bf"}, {"code": "#(reduce (fn [n _] (inc n)) 0 %)", "problem": 22, "user": "53a3edfce4b0f1fc7453883b"}, {"code": "reduce (fn [i _] (+ i 1)) 0", "problem": 22, "user": "53a442a6e4b0b62ce300572d"}, {"code": "#(reduce (fn [acc _] (inc acc)) 0 %)", "problem": 22, "user": "53a47cf1e4b0b62ce3005730"}, {"code": "(fn [coll]\n   (loop [s coll n 0]\n     (if (empty? s)\n       n\n       (recur (rest s) (+ n 1)))))", "problem": 22, "user": "52fac708e4b047fd55836fff"}, {"code": "#(inc (last (interleave % (range 30))))", "problem": 22, "user": "53a2be95e4b0f1fc7453882d"}, {"code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "problem": 22, "user": "53a511aae4b0b62ce3005735"}, {"code": "(fn [s]\n  (reduce\n   (fn [i t] (inc i)) 0 s))", "problem": 22, "user": "4f981f31e4b0dcca54ed6cef"}, {"code": "(fn [coll] (reduce (fn [c e] (inc c)) 0 coll))", "problem": 22, "user": "52e657e4e4b09f7907dd1472"}, {"code": "(fn [seq] (reduce (fn [x y] (inc x)) 0 seq))", "problem": 22, "user": "53a55de5e4b0b62ce3005739"}, {"code": "(fn [x] (loop [seq x cnt 0] (if (empty? seq) cnt (recur (rest seq) (inc cnt)))))", "problem": 22, "user": "538c4e52e4b0b51d73faae59"}, {"code": "(fn [mylist] (apply + (map (fn [n] 1) mylist)))", "problem": 22, "user": "53a5c7ffe4b0ef122a8689c4"}, {"code": "#(reduce (fn [c l] (inc c)) 0 %)", "problem": 22, "user": "53a26cede4b0f1fc7453882a"}, {"code": "#(reduce (fn [x y] (inc x)) 0 %)", "problem": 22, "user": "53a69398e4b0ef122a8689ca"}, {"code": "(fn [x]\n  \t(loop [x x\n           c 0]\n      (if (empty? x)\n        c\n        (recur (rest x) (inc c))\n        )\n      )\n)", "problem": 22, "user": "53a697a8e4b0ef122a8689cb"}, {"code": "#(reduce (fn [c e] (inc c)) 0 %)", "problem": 22, "user": "53a5737ee4b0b62ce300573a"}, {"code": "(fn [l]\n  (reduce (fn [a b] (inc a)) 0 l))", "problem": 22, "user": "5396c94be4b0b51d73faaee3"}, {"code": "#(apply + (map (fn[x] 1) %))", "problem": 22, "user": "533b1611e4b0e30313ee6cc6"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "53a7771ee4b047364c04441b"}, {"problem": 22, "code": "#((fn self [s c] (cond (empty? s) c :else (self (rest s) (inc c)))) % 0)", "user": "53a07aa7e4b0ca733b9744b0"}, {"problem": 22, "code": "(fn [items] (reduce + (map (fn [i] 1) items)))", "user": "53a7637de4b047364c044419"}, {"problem": 22, "code": "(fn _count [coll] (if (not (empty? (rest coll))) (+ 1 (_count (rest coll))) 1))", "user": "53a62f56e4b0ef122a8689c6"}, {"problem": 22, "code": "#(loop [x % c 0]\n          (if (empty? x)\n            c\n            (recur (rest x) (+ c 1))))", "user": "537310e0e4b06d7f452d9e07"}, {"problem": 22, "code": "#(loop [coll % cnt 0] (if (empty? coll) cnt (recur (rest coll) (+ cnt 1))))", "user": "53a7e3b9e4b047364c044423"}, {"problem": 22, "code": "(fn [coll] (loop [c coll acc 0] (if (empty? c) acc (recur (next c) (inc acc)))))", "user": "53a6a599e4b0ef122a8689cc"}, {"problem": 22, "code": "#(reduce (fn [a acc] (inc a)) 0 %)", "user": "53a5bc3ae4b0ef122a8689c3"}, {"problem": 22, "code": "(fn [coll] (reduce (fn [sum num](inc sum)) 0 coll))", "user": "53a739b0e4b0ef122a8689d0"}, {"problem": 22, "code": "#(reduce (fn [x _] (+ x 1)) 0 %)", "user": "4f867b25e4b033992c121c51"}, {"problem": 22, "code": "(fn [s](alength (into-array s)))", "user": "53a7bc10e4b047364c044420"}, {"problem": 22, "code": "(fn [x] (reduce + (map (constantly 1) x)))", "user": "53a881c5e4b047364c044428"}, {"problem": 22, "code": "(fn [coll] (reduce (fn [a,b] (inc a))  0 coll))", "user": "538e29d1e4b0b51d73faae80"}, {"problem": 22, "code": "reduce (fn [n _] (inc n)) 0", "user": "4ff0c419e4b0678c553fc327"}, {"problem": 22, "code": "(fn [s] (reduce + (map (fn [x] 1) s)))", "user": "4f041de1535dcb61093f6ba5"}, {"problem": 22, "code": "#(reduce (fn[x,_] (inc x)) 0 %)", "user": "53a987dde4b047364c044438"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "53a8d9efe4b047364c04442d"}, {"problem": 22, "code": "(fn size [seq]\n  (if (= [] seq)\n    0\n    (+ 1 (size (rest seq)))))", "user": "53a9db09e4b047364c04443b"}, {"problem": 22, "code": "(fn mcount [s] (if (next s) (+ 1 (mcount (rest s))) 1))", "user": "53aa1528e4b047364c04443f"}, {"problem": 22, "code": "(fn [x]\n  (loop [lst x sum 0]\n    (if (empty? lst)\n      sum\n      (recur (rest lst) (inc sum)))))", "user": "53a7dc5be4b047364c044422"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "53a19dece4b0ca733b9744c0"}, {"problem": 22, "code": "#(reduce (fn [x y] (+ x 1)) 0 %)", "user": "53aa67e0e4b047364c044442"}, {"problem": 22, "code": "(fn [x]\n  ((fn [rst n]\n    (if (= rst '())\n      n\n      (recur (rest rst) (inc n))))\n       x 0))", "user": "53aaaf7ae4b047364c044444"}, {"problem": 22, "code": "(partial reduce (fn [res _] (inc res)) 0)", "user": "53a83877e4b047364c044425"}, {"problem": 22, "code": "(fn [lst]\n  (loop [acc 0\n         lst lst]\n    (cond\n    (nil? (first lst)) acc\n    :else (recur (inc acc) (rest lst)))))", "user": "51c116d4e4b0c9c822882942"}, {"problem": 22, "code": "#(reduce (fn [x y] (+ x 1)) 0 %)", "user": "53aafb9be4b047364c044448"}, {"problem": 22, "code": "(fn mycount [n x]\n\t(if (= (not-empty x) nil)\n\t\tn\n\t\t(mycount (inc n) (rest x)))) 0", "user": "53a94b63e4b047364c044434"}, {"problem": 22, "code": "#(apply + (map (constantly 1) %))", "user": "53ab260ee4b047364c04444c"}, {"problem": 22, "code": "(fn self\n  [xs]\n  (cond\n   (= (first (vec xs)) nil) 0\n   :else (+ 1 (self (rest xs)))))", "user": "53ab94cae4b047364c044450"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5383321ee4b06839e8705eda"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "53aac172e4b047364c044445"}, {"problem": 22, "code": "(fn mcount\n  ([coll] \t\t\t(mcount coll 0))\n  ([coll ncount]\t(if (empty? coll) \n                      \tncount\n                      \t(recur (rest coll) (inc ncount)))))", "user": "53ac0e52e4b047364c044457"}, {"problem": 22, "code": "(fn counter [lst] \n  (if (seq lst)\n    (+ (counter (rest lst)) 1)\n    0))", "user": "53ac2d45e4b047364c04445b"}, {"problem": 22, "code": "(fn\n  [args]\n   (reduce (fn [a, b] (+ a 1)) 0 args)\n   )", "user": "53ac4719e4b047364c04445c"}, {"problem": 22, "code": "(fn [c] (reduce (fn [r _] (+ r 1)) 0 c))", "user": "53a0b730e4b0ca733b9744b5"}, {"problem": 22, "code": "(partial reduce (fn [x _] (inc x)) 0)", "user": "526e5159e4b03e8d9a4a7316"}, {"problem": 22, "code": "#(loop [[head & remaining] %1\n        ct 1]\n   (if (empty? remaining)\n     ct\n     (recur remaining (inc ct))))", "user": "53acca34e4b047364c044460"}, {"problem": 22, "code": "(fn len [s]\n  (if (= s '())\n    0\n    (inc (len (rest s)))))", "user": "53acaf1fe4b047364c04445f"}, {"problem": 22, "code": "(fn [collection]\n  (loop [number 0 col collection]\n    (if (empty? col)\n      number\n      (recur (inc number) (rest col))\n      )))", "user": "53ac1992e4b047364c04445a"}, {"problem": 22, "code": "(fn c [s] (if (= (seq s) nil) 0 (+ 1 (c (rest s))) ))", "user": "53ac4c6fe4b047364c04445d"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "538f4c1de4b0b51d73faae8c"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "53ad6fe2e4b047364c04446b"}, {"problem": 22, "code": "(fn [y] (reduce + (map (fn [x] 1) y)))", "user": "53abcea3e4b047364c044451"}, {"problem": 22, "code": "(partial reduce (fn [a b] (inc a)) 0)", "user": "5360578ee4b0243289761e35"}, {"problem": 22, "code": "#(reduce (fn [x _] (inc x)) 0 %)", "user": "53ae2187e4b047364c044473"}, {"problem": 22, "code": "(fn [s] \n  ((fn [s acc]\n  \t(if (seq s)\n    \t(recur (rest s) (inc acc))\n\t    acc)\n\t) s 0))", "user": "53ae3e01e4b047364c044474"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "53ae79f3e4b047364c044475"}, {"problem": 22, "code": "#(reduce (fn [x _] (+ 1 x)) 0 %)", "user": "53ae16e2e4b047364c044472"}, {"problem": 22, "code": "(fn length [x] (if (empty? x) 0 (+ 1 (length (rest x)))))", "user": "53aef31ce4b047364c04447b"}, {"problem": 22, "code": "(fn [x]\n  (loop [counter 0 resSeq x]\n    (if-not (next resSeq)\n      (inc counter)\n      (recur (inc counter) (rest resSeq)))))", "user": "53aec6e6e4b047364c044479"}, {"problem": 22, "code": "(fn [coll](reduce + (map (fn [v] 1) coll)))", "user": "53ae0c50e4b047364c044471"}, {"problem": 22, "code": "(fn cc [coll] (if (empty? coll) 0 (+ 1 (cc (rest coll)))))", "user": "53abf519e4b047364c044456"}, {"problem": 22, "code": "(fn [col] (reduce (fn [n _] (inc n)) 0 col))", "user": "53aeb3ebe4b047364c044477"}, {"problem": 22, "code": "#(reduce (fn [r i] (inc r)) 0 %)", "user": "535ca812e4b04ce2eb3ed2b7"}, {"problem": 22, "code": "(fn cnt [xs]\n  (let [c (fn c [xs n] (if (= xs ()) n (c (rest xs) (+ n 1))))]\n    (c xs 0)\n    )\n  )", "user": "53b0446fe4b047364c04447f"}, {"problem": 22, "code": "reduce (fn [x _] (+ x 1)) 0", "user": "509fda73e4b08df8156e9e41"}, {"problem": 22, "code": "#(alength (to-array %))", "user": "53925032e4b0b51d73faaeb0"}, {"problem": 22, "code": "(fn [list]\n  (loop [sum 0 coll list]\n    (if (empty? coll)\n         sum\n         (recur (inc sum) (rest coll)))))", "user": "53b05a36e4b047364c044481"}, {"problem": 22, "code": "(fn\n  [coll]\n  (reduce + (map (fn[x] 1) coll)))", "user": "53b0ef3be4b047364c044489"}, {"problem": 22, "code": "(fn[x](reduce + (map (fn[y] 1) x )))", "user": "53ad28ede4b047364c044462"}, {"problem": 22, "code": "(fn count-it [x]\n  (if (= (rest x) ())\n    1\n    (+ 1 (count-it (rest x)))\n  )\n)", "user": "53b12c76e4b047364c04448a"}, {"problem": 22, "code": "reduce (fn [a b] (+ a 1)) 0", "user": "53b15e6ee4b047364c04448f"}, {"problem": 22, "code": "(fn[x] (reduce (fn[y x] (inc y)) 0 x))", "user": "5314923ae4b08068f379ed18"}, {"problem": 22, "code": "(fn c [s] (if (empty? s) 0 (+ 1 (c (rest s)))))", "user": "5245e320e4b09dbe66b56177"}, {"problem": 22, "code": "(fn [s]\n  (loop [s1 s\n         c 0]\n    (if\n      (empty? s1)\n      c \n      (recur (rest s1) (inc c)))))", "user": "53b182a5e4b047364c044491"}, {"problem": 22, "code": "reduce (fn [m i] (+ m 1)) 0", "user": "53b33217e4b047364c0444a4"}, {"problem": 22, "code": "reduce (fn [a _] (+ a 1)) 0", "user": "5329b493e4b09d4e7a9b5515"}, {"problem": 22, "code": "#(reduce (fn [all _] (+ all 1)) 0 %)", "user": "53b3abd6e4b047364c0444a7"}, {"problem": 22, "code": "(fn [s] (loop[cnt 1 tail (rest s)] (if (empty? tail) cnt (recur (inc cnt) (rest tail)))))", "user": "53b3ea79e4b047364c0444ab"}, {"problem": 22, "code": "reduce (fn [first rest] (+ first 1)) 0", "user": "53b15e65e4b047364c04448e"}, {"problem": 22, "code": "(fn c [s]\n  (if (seq s)\n    (inc (c (next s)))\n    0))", "user": "53b42472e4b047364c0444b2"}, {"problem": 22, "code": "#(loop [sum 0 menge %]\n   (if (empty? menge)\n     sum\n     (recur (inc sum) (rest menge))))", "user": "53b42b9ce4b047364c0444b3"}, {"problem": 22, "code": "(fn [coll]\n  (reduce + (map (fn [x] 1) coll)))", "user": "53b2e953e4b047364c04449e"}, {"problem": 22, "code": "(fn [xs]\n  (loop [i 0\n         xs xs]\n    (if (empty? xs)\n      i\n      (recur (inc i) (rest xs)))))", "user": "4fec08e8e4b0681fd128dc9d"}, {"problem": 22, "code": "(fn [v] (reduce + (map (fn [_] (+ 1 0)) (vec v))))", "user": "53b2a7f8e4b047364c04449c"}, {"problem": 22, "code": "(fn cnt [l] (if (= l ()) 0 (+ (cnt (rest l)) 1)))", "user": "53b0dae6e4b047364c044487"}, {"problem": 22, "code": "#(.length (vec %))", "user": "53b4bddae4b047364c0444b9"}, {"problem": 22, "code": "(fn cnt [s]\n  (reduce + (map (fn [v] 1) s)))", "user": "53b39d82e4b047364c0444a6"}, {"problem": 22, "code": "#(loop [l   %\n         i   0]\n    (if (nil? l)\n      i\n      (recur (next l) (inc i))))", "user": "53940b5ee4b0b51d73faaec4"}, {"problem": 22, "code": "(fn count-it\n  ([a-seq] (count-it a-seq 1))\n  ([a-seq so-far]\n    (if (= (rest a-seq) '())\n      so-far\n      (recur (rest a-seq) (inc so-far)))))", "user": "53b6b6c8e4b047364c0444ca"}, {"problem": 22, "code": "(fn [seqs]\n  (loop [length 0 mseq seqs]\n      (if (nil? (first mseq))\n          length\n          (recur (+ 1 length) (rest mseq))\n       )   \n  ) \n)", "user": "53b492a5e4b047364c0444b6"}, {"problem": 22, "code": "#(loop [x 0 l %] (if (empty? l)x(recur (inc x) (rest l))))", "user": "538d70abe4b0b51d73faae6e"}, {"problem": 22, "code": "(fn [s]\n  (loop [s s acc 0]\n    (if (seq s)\n      (recur (rest s) (+ 1 acc))\n      acc)))", "user": "53b780b8e4b047364c0444cf"}, {"problem": 22, "code": "#(reduce + (map (fn [_] 1) %))", "user": "53b71b94e4b047364c0444cd"}, {"problem": 22, "code": "#(reduce (fn [a b] (inc a)) (cons 0 %))", "user": "539fa040e4b0ca733b97449f"}, {"problem": 22, "code": "(fn cnt [l] (loop [s l n 0] (if-not s n (recur (next s) (inc n)))))", "user": "53ad2bbbe4b047364c044464"}, {"problem": 22, "code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "539b66c6e4b0b51d73faaf1f"}, {"problem": 22, "code": "#(loop [i 0 \n        s %]\n   (if (empty? s)\n     i\n     (recur (+ i 1)\n            (rest s))))", "user": "53b88e6ee4b047364c0444de"}, {"problem": 22, "code": "(fn [ls]\n  (loop [l ls c 0]\n    (if (empty? l)\n      c\n      (recur (rest l) (inc c)))))", "user": "53b8b37be4b047364c0444e1"}, {"problem": 22, "code": "reduce (fn [x y] (+ x 1)) 0", "user": "53b7c21ae4b047364c0444d4"}, {"problem": 22, "code": "(fn [x] (apply + (map (constantly 1) x)))", "user": "53b91803e4b047364c0444e5"}, {"problem": 22, "code": "(fn [s1]\n  (loop [s s1 n 0]\n  (if (empty? s)\n    n\n    (recur (rest s) (inc n))\n    )\n    )\n  )", "user": "539c88e1e4b0b51d73faaf2c"}, {"problem": 22, "code": "#(reduce (fn [x _] (+ 1 x)) 0 %)", "user": "53b9bb15e4b047364c0444ed"}, {"problem": 22, "code": "(fn [seq] (reduce + (map (fn [x] 1) seq)))", "user": "53b9c614e4b047364c0444ee"}, {"problem": 22, "code": "#(reduce (fn[x y] (inc x)) 0 %)", "user": "53b41d17e4b047364c0444b1"}, {"problem": 22, "code": "(fn [x & c]\n(if (not= (rest x) '())\n(recur (rest x)\n   (if c (+ c 1) 1)) (if c (+ c 1) 1)))", "user": "53ba0d1be4b047364c0444f1"}, {"problem": 22, "code": "(fn my-count[n]\n  (loop [i 0 x n]\n  (if (= '() x)\n    i\n    (recur (inc i) (rest x)))))", "user": "5018878ce4b029375d2a5056"}, {"problem": 22, "code": "(fn [x] (reduce (fn [y _] (inc y)) (map (fn [g] 1) x)))", "user": "539ff974e4b0ca733b9744a3"}, {"problem": 22, "code": "(fn cnt [a]\n  (if (empty? a)\n    0 \n    (+ 1 (cnt (rest a)))\n  )\n)", "user": "53ba5475e4b047364c0444f4"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "53469b68e4b084c2834f4a40"}, {"problem": 22, "code": "reduce (fn [x col] (inc x)) 0", "user": "52ca7711e4b071a8d36bd3e3"}, {"problem": 22, "code": "#(alength (to-array %))", "user": "53ba41c2e4b047364c0444f3"}, {"problem": 22, "code": "(fn [coll]\n\t(reduce (fn [n _] (inc n)) 0 coll))", "user": "53b685e0e4b047364c0444c7"}, {"problem": 22, "code": "(fn cuenta [l]\n    (cond \n     \t(= () (rest l)) 1\n        :else (+ 1 (cuenta (rest l)))\n     ))", "user": "501ff0dae4b0cb6ebc0a42f1"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "53b8ce32e4b047364c0444e2"}, {"problem": 22, "code": "(fn another-count [seq]\n  (if (empty? seq)\n    0\n    (+ 1 (another-count (rest seq)))))", "user": "53bab6fae4b047364c0444fb"}, {"problem": 22, "code": "#(reduce + (map (fn[x] 1) %))", "user": "53bb512ce4b047364c044503"}, {"problem": 22, "code": "(fn [col] \n  (loop [n 0 coll col]\n    (if (empty? coll)\n      n\n      (recur (inc n) (rest coll)))))", "user": "53bb95d0e4b047364c044508"}, {"problem": 22, "code": "(fn count-list [sq]\n  (let [counter (fn [a b] (inc a))]\n    (reduce counter 0 sq)))", "user": "53b4344de4b047364c0444b4"}, {"problem": 22, "code": "#(alength (to-array %))", "user": "53bc10f5e4b047364c04450d"}, {"problem": 22, "code": "#(loop [s % c 0]\n   (if (empty? s) c\n     (recur (next s) (inc c))))", "user": "5310e968e4b08068f379ecdd"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "53bc279ae4b047364c04450e"}, {"problem": 22, "code": "#(inc (.lastIndexOf  (seq %) (last (seq %))))", "user": "53bc0443e4b047364c04450c"}, {"problem": 22, "code": "(fn x [s]\n  (if (seq s)\n    (inc (x (rest s)))\n    0))", "user": "53bce179e4b0d9a98559a6c1"}, {"problem": 22, "code": "(fn [x] (reduce (fn [total s] (inc total)) 0 (seq x)))", "user": "53bd85fae4b0d9a98559a6d4"}, {"problem": 22, "code": "#(loop [n 0, l %]\n    (if (nil? (first l))\n      n\n      (recur (inc n) (rest l)))\n    )", "user": "53bd6fcfe4b0d9a98559a6d0"}, {"problem": 22, "code": "(fn [y] (reduce (fn [acc x] (+ acc 1)) 0 y))", "user": "53bd6ad0e4b0d9a98559a6cf"}, {"problem": 22, "code": "#(apply + (map (fn [_] 1) %))", "user": "53bd8d27e4b0d9a98559a6d6"}, {"problem": 22, "code": "(fn foo [x]\n  (cond (= (first x) nil) 0\n        :else (inc (foo (rest x)))))", "user": "53bdf76ce4b0d9a98559a6db"}, {"problem": 22, "code": "reduce (fn [p n] (inc p)) 0", "user": "53b22df6e4b047364c044497"}, {"problem": 22, "code": "#(loop [result 0 c %]\n    (if(empty? c) result\n    (recur (inc result) (rest c))))", "user": "53be3ee7e4b0d9a98559a6df"}, {"problem": 22, "code": "reduce (fn [n _] (inc n)) 0", "user": "53bc76fae4b047364c044511"}, {"problem": 22, "code": "reduce (fn [x y] (+ x 1)) 0", "user": "53be0133e4b0d9a98559a6dc"}, {"problem": 22, "code": "#(apply + (map (fn [a] 1) %))", "user": "53beacf9e4b0d9a98559a6e3"}, {"problem": 22, "code": "(fn [x] (if (first x)\n             (let [tot 0]\n               (reduce (fn [total element]\n                         (inc total))\n                       tot\n                       x))\n             0))", "user": "53bae8b9e4b047364c0444fd"}, {"problem": 22, "code": "#(reduce (fn [x,y] (inc x)) 0 %)", "user": "53be873ee4b0d9a98559a6e1"}, {"problem": 22, "code": "(fn [coll] \n  (reduce (fn [accum x](inc accum)) 0 coll))", "user": "53b7fbbde4b047364c0444d6"}, {"problem": 22, "code": "(fn count2 [x]\n  (if (= (first x) nil)\n      0\n      (+ 1 (count2 (rest x)))\n  )\n)", "user": "53bed4b5e4b0c98a41f5cc94"}, {"problem": 22, "code": "(fn [coll]\n  (let [total (fn [so-far _] (inc so-far))]\n    (reduce total 0 coll)))", "user": "53bf0913e4b0c98a41f5cc99"}, {"problem": 22, "code": "(fn outer [l]\n\n  ((fn f [l n] (if (seq l) (recur (rest l) (inc n)) n))\n   l 0))", "user": "53bf5403e4b0c98a41f5cc9f"}, {"problem": 22, "code": "(fn nf [x]\n  (if (seq x)\n    (inc (nf (rest x)))\n    0))", "user": "53b61528e4b047364c0444c1"}, {"problem": 22, "code": "#(reduce (fn [cnt, x] (inc cnt)) 0 %)", "user": "53bf899fe4b0c98a41f5cca3"}, {"problem": 22, "code": "(fn [col]\n  (let [f (fn [c l] (if (empty? c) l (recur (rest c) (inc l))))]\n    (f col 0)))", "user": "53bb4cb1e4b047364c044502"}, {"problem": 22, "code": "(fn c\n  ([col] (c col 0))\n  ([col n] \n   (cond \n    (empty? col) n\n    :else (recur (rest col) (inc n)) )))", "user": "53bf0587e4b0c98a41f5cc98"}, {"problem": 22, "code": "#(apply + 0 (map (fn [s] 1) %))", "user": "53b40181e4b047364c0444ae"}, {"problem": 22, "code": "reduce ( fn [x g] (inc x) ) 0", "user": "53bfd8c4e4b0c98a41f5cca8"}, {"problem": 22, "code": "(fn mc [l] (if (empty? l) 0 (+ 1 (mc (rest l)))))", "user": "53c0328ee4b0c98a41f5ccad"}, {"problem": 22, "code": "(fn len [x] (if (empty? x) 0 (+ 1 (len (rest x)))))", "user": "53c051a5e4b0c98a41f5ccae"}, {"problem": 22, "code": "(fn [x] (loop [c x n 0] (if (empty? c) n (recur (rest c) (inc n)))))", "user": "52b434c9e4b0c58976d9ad1c"}, {"problem": 22, "code": "(fn\n  [input]\n  (loop [subseeq input i 0]\n     (if (empty? subseeq)\n       i\n       (recur (rest subseeq) (inc i))))\n)", "user": "53b9a779e4b047364c0444eb"}, {"problem": 22, "code": "#(reduce (fn [v x] (+ 1 v)) 0 %)", "user": "53c15f08e4b00fb29b221261"}, {"problem": 22, "code": "#(reduce + (map (fn [x] (first [1 2])) (seq %)))", "user": "53c126fce4b00fb29b22125b"}, {"problem": 22, "code": "(fn [x]\n  (loop [s x i 0] \n    (if (empty? s)\n      i\n      (recur (rest s) (inc i))\n    )\n  )\n)", "user": "53c16e82e4b00fb29b221262"}, {"problem": 22, "code": "#(reduce  (fn [x y] (+ x 1)) 0 %)", "user": "53bdae7fe4b0d9a98559a6d9"}, {"problem": 22, "code": "(fn [xs]                    \n  ((fn aux-rec [acc xs]               \n     (if (not (seq xs))               \n       acc                            \n       (aux-rec (inc acc) (rest xs))))\n   0 xs))", "user": "53b890e1e4b047364c0444df"}, {"problem": 22, "code": "#(reduce (fn [a, _] (inc a) ) 0 %)", "user": "53aebc94e4b047364c044478"}, {"problem": 22, "code": "(fn f[s] (if (empty? s) 0 (+ (f (rest s)) 1)))", "user": "53c24946e4b00fb29b22126d"}, {"problem": 22, "code": "(fn [s] \n  (loop [n 0 s s]\n    (if (empty? s)\n      n\n      (recur (inc n) (rest s)))))", "user": "53b85932e4b047364c0444db"}, {"problem": 22, "code": "reduce (fn [x _] (+ x 1)) 0", "user": "53bead0be4b0d9a98559a6e4"}, {"problem": 22, "code": "(fn myc [sec]\n  (if (not-empty sec)\n    (+ 1 (myc (rest sec)))\n    0))", "user": "53c1ce3ee4b00fb29b221268"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "53c1be8ae4b00fb29b221267"}, {"problem": 22, "code": "#(reduce + (map (fn[x] 1) % ))", "user": "53c2409de4b00fb29b22126c"}, {"problem": 22, "code": "#(alength (to-array %))", "user": "53c1305be4b00fb29b22125d"}, {"problem": 22, "code": "#(apply + (map (constantly 1) %))", "user": "53c2d5a1e4b00fb29b221274"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "53a94512e4b047364c044433"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %) )", "user": "53b293d3e4b047364c04449b"}, {"problem": 22, "code": "#(reduce (fn [x y] (+ x 1)) 0 %1)", "user": "5367bc60e4b0243289761e81"}, {"problem": 22, "code": "(fn [coll] (\n   #(if \n      (empty? %1) \n      %2\n      (recur (rest %1) (inc %2)))\n   coll\n   0\n))", "user": "53c38b8ce4b00fb29b22127b"}, {"problem": 22, "code": "(partial reduce (fn [m _] (inc m)) 0)", "user": "53c3397be4b00fb29b221279"}, {"problem": 22, "code": "#(.size (vec %))", "user": "53c349f5e4b00fb29b22127a"}, {"problem": 22, "code": "#(loop [ arr % i 0 ]\n   (if (= true (empty? arr))\n     (do i)\n     (recur (pop (reverse (reverse arr))) (+ i 1))))", "user": "53c39a9ae4b00fb29b22127d"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "53c5cb5ee4b00fb29b221294"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "4ed94cd6535d10e5ff6f5302"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "53c51dc5e4b00fb29b221288"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "53c63db5e4b00fb29b221296"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "53c3e93ae4b00fb29b221280"}, {"problem": 22, "code": "(fn [a] (reduce (fn [as r] (inc as)) 0 a))", "user": "53c6c9dfe4b00fb29b2212a1"}, {"problem": 22, "code": "(fn [x] (reduce + (map (fn [y] 1) x)))", "user": "53c6e25ee4b00fb29b2212a4"}, {"problem": 22, "code": "reduce (fn [a _] (+ 1 a)) 0", "user": "53c6db22e4b00fb29b2212a2"}, {"problem": 22, "code": "(fn [coll] \n   (loop [[head & tail] coll\n          acc 0]\n     (if (nil? head)\n       acc\n       (recur tail (inc acc)))))", "user": "53c6a2fde4b00fb29b22129d"}, {"problem": 22, "code": "#(reduce (fn [acc e] (+ acc 1)) 0 %)", "user": "53c68360e4b00fb29b22129b"}, {"problem": 22, "code": "(fn [s]\n  (loop [n 0, ss s]\n    (if ss (recur (inc n) (next ss)) n)))", "user": "53c649d3e4b00fb29b221297"}, {"problem": 22, "code": "#(reduce (fn [x _] (+ x 1)) 0 %1)", "user": "5183bccae4b028ec5fd2f2aa"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "53c74cfce4b00fb29b2212a7"}, {"problem": 22, "code": "(fn [l]\n  (reduce (fn [x y] (+ x 1)) 0 l)\n)", "user": "52577f15e4b0cb4875a45c88"}, {"problem": 22, "code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "53c3014ce4b00fb29b221277"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) % ))", "user": "53c84bc6e4b00fb29b2212b0"}, {"problem": 22, "code": "#(loop [a (apply vector %) b 0] (if (empty? a) b (recur (pop a) (inc b))))", "user": "53afddabe4b047364c04447e"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "538db083e4b0b51d73faae74"}, {"problem": 22, "code": "(fn [x] \n  ((fn [els numels]\n  \t(if (empty? els)\n    \tnumels\n    \t(recur (rest els) (inc numels)))) \n   x 0))", "user": "53c90510e4b00fb29b2212b6"}, {"problem": 22, "code": "(fn find-count [coll]\n  (loop [coll coll c 0]\n  (if (empty? coll)\n  c\n  (recur (rest coll) (inc c)))))", "user": "53c69ebce4b00fb29b22129c"}, {"problem": 22, "code": "(fn mycount [list] (reduce (fn [m _] (+ 1 m)) 0 list))", "user": "53c96d9fe4b00fb29b2212bf"}, {"problem": 22, "code": ";(fn cnt\n;  ([s]\n;    (cnt s 0))\n;  ([s i]\n;    (if (empty? s)\n;      i\n;      (recur (rest s) (inc i)))))\n#(reduce (fn [i _] (inc i)) 0 %)", "user": "53c945b4e4b00fb29b2212bb"}, {"problem": 22, "code": "(fn len [x]\n  (if (= x '())\n    0\n    (+ 1 (len (rest x)))))", "user": "53c9d29ae4b00fb29b2212c2"}, {"problem": 22, "code": "(fn my-count [ls]\n  (letfn [(iter [ls1 n]\n                 (if (empty? ls1)\n                   n\n                   (iter (rest ls1) (+ n 1))))]\n     (iter ls 0)))", "user": "53b7850ee4b047364c0444d0"}, {"problem": 22, "code": "(fn mycount[xs]\n  (if (empty? xs)\n    0\n    (+ 1 (mycount (rest xs)))\n    )\n  )", "user": "53ca23e3e4b00fb29b2212c6"}, {"problem": 22, "code": "#(loop [c1 %\n         n 0]\n    (if (empty? c1)\n      n\n      (recur (rest c1) (inc n))))", "user": "53ca213fe4b00fb29b2212c5"}, {"problem": 22, "code": "(fn [coll]\n  (apply + (map (fn [x] 1) coll)))", "user": "53ca41dae4b00fb29b2212c8"}, {"problem": 22, "code": "#(reduce (fn [x _] (inc x)) 0 %)", "user": "53cacdb5e4b00fb29b2212cb"}, {"problem": 22, "code": "(fn [coll]\n  (loop [coll coll elements 0]\n    (if-not (seq coll)\n      elements \n      (recur (rest coll) (inc elements)))))", "user": "53cb321fe4b00fb29b2212d1"}, {"problem": 22, "code": "(fn [coll]\n  (loop [coll-left coll acc 0]\n    (if (empty? coll-left)\n      acc\n      (recur (rest coll-left) (inc acc)))))", "user": "53cb30f0e4b00fb29b2212d0"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "53caddbae4b00fb29b2212cc"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "53cc0d51e4b00fb29b2212d5"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %1))", "user": "53c06438e4b0c98a41f5ccb0"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "53cc5c88e4b00fb29b2212d8"}, {"problem": 22, "code": "(fn [x]\n  (let [g (fn [c x]\n    (loop [x x\n           c c]\n      (if (empty? x) c\n        (recur (rest x) (inc c)))))]\n  (g 0 x)))", "user": "53cbe808e4b00fb29b2212d4"}, {"problem": 22, "code": "(fn f [s]\n  (reduce + (map (fn [n] 1) s)))", "user": "53c0bc5fe4b00fb29b221257"}, {"problem": 22, "code": "#(reduce (fn[init, ls] (inc init)) 0 %)", "user": "53c6b3cae4b00fb29b2212a0"}, {"problem": 22, "code": "#(loop [counter 0\n          lst %]\n   (if (nil? (first lst))\n     counter\n     (recur (inc counter) (rest lst))))", "user": "53a44fefe4b0b62ce300572e"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "53cd4920e4b00fb29b2212de"}, {"problem": 22, "code": "(fn [x] (.length (vec x)))", "user": "53c1b787e4b00fb29b221266"}, {"problem": 22, "code": "#(+ 1 (first(last(map-indexed vector %))))", "user": "534fa9dae4b084c2834f4acf"}, {"problem": 22, "code": "#(loop [n 0\n         lst %]\n    (if (empty? lst)\n      n\n      (recur (inc n)\n             (rest lst))))", "user": "50a122a1e4b08df8156e9e54"}, {"problem": 22, "code": "(fn [s]\n  (loop [s1 s\n         c 0]\n    (if\n      (empty? s1)\n       c\n      (recur (rest s1)(inc c)))))", "user": "53ce1daee4b00fb29b2212ec"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "53ce4cd4e4b00fb29b2212ef"}, {"problem": 22, "code": "(fn [seq] (reduce (fn ([] 0) ([a] 1) ([a b] (inc a))) 0 seq))", "user": "539d835fe4b0b51d73faaf36"}, {"problem": 22, "code": "reduce (fn [x _] (+ 1 x)) 0", "user": "4e587e78535d8a8b8723a293"}, {"problem": 22, "code": "(fn [x] (loop [i x c 0] (if (empty? i) c (recur (rest i) (inc c)))))", "user": "53cdb2c4e4b00fb29b2212e5"}, {"problem": 22, "code": "(fn contar-elementos\n    ( [seq]\n      (if (empty? seq)\n        0\n        (+ 1 (contar-elementos (rest seq)))\n        )))", "user": "53cd66dee4b00fb29b2212e2"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "53cd5cd5e4b00fb29b2212e1"}, {"problem": 22, "code": "#(reduce (fn [count-val _] (inc count-val)) 0 %)", "user": "53ce8cb5e4b00fb29b2212f2"}, {"problem": 22, "code": "#(reduce (fn [memo x] (inc memo)) 0 %)", "user": "52d6d490e4b09f7907dd1369"}, {"problem": 22, "code": "(fn [x] (loop [s x acc 0] (if (empty? s) acc (recur (rest s) (inc acc)))))", "user": "53ced9fee4b00fb29b2212f8"}, {"problem": 22, "code": "(fn [xs]\n  (loop [xs xs\n         n  0]\n    (if (empty? xs)\n      n\n      (recur (rest xs) (inc n)))))", "user": "51b8d3d5e4b050a1176cd69d"}, {"problem": 22, "code": "(fn [s]\n  (loop [sr s, a 0]\n    (if (seq sr)\n      (recur (next sr) (inc a))\n      a)))", "user": "537e4432e4b06839e8705e9f"}, {"problem": 22, "code": "#(reduce + (map ( fn[x] 1 ) %))", "user": "53ce030be4b00fb29b2212ea"}, {"problem": 22, "code": "#(reduce (fn [x _] (inc x)) 0 %)", "user": "53cf278ce4b00fb29b2212fb"}, {"problem": 22, "code": "(fn [x] (first (last (map-indexed (fn [i v] (vector (inc i))) x))))", "user": "53ce4c79e4b00fb29b2212ee"}, {"problem": 22, "code": "(fn [c] (reduce (fn [x y] (inc x)) 0 c))", "user": "53cdbad1e4b00fb29b2212e6"}, {"problem": 22, "code": "reduce (fn [c b] (+ 1 c)) 0", "user": "53cff414e4b00fb29b221304"}, {"problem": 22, "code": "reduce (fn [a b] (inc a)) 0", "user": "53d00195e4b00fb29b221305"}, {"problem": 22, "code": "(fn counter \n  \t[your-list]\n  \t((fn helper \n       \t [a-list number]\n       \t (if (= '()\n                (rest a-list))\n           \t (+ number\n                1)\n           \t (helper (rest a-list)\n           \t\t     (+ number\n                        1)))) (seq your-list) 0))", "user": "53cfd3c5e4b00fb29b221302"}, {"problem": 22, "code": "(fn [x]\n  (loop [n 0\n         xs x]\n    (if (empty? xs) n\n        (recur (+ n 1) (rest xs)))))", "user": "53d032ace4b00fb29b221306"}, {"problem": 22, "code": "#(loop [cnt 0 x %] (if (not (empty? x)) (recur (inc cnt) (rest x)) cnt))", "user": "53d0c837e4b00fb29b22130b"}, {"problem": 22, "code": "(fn[s] (reduce + (map (fn[x] 1) s)))", "user": "53d0f7bbe4b00fb29b22130e"}, {"problem": 22, "code": "#(loop [lst %1\n        i 0]\n   (if (empty? lst)\n     i\n     (recur (rest lst) (inc i))))", "user": "53cd5226e4b00fb29b2212e0"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "53c99f60e4b00fb29b2212c1"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "53ced1d5e4b00fb29b2212f7"}, {"problem": 22, "code": "#(loop [x %1 y 0]\n   (if (empty? x)\n     y\n     (recur (rest x) (inc y)))\n   )", "user": "53d1e9ffe4b00fb29b221319"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "53d20e14e4b00fb29b22131a"}, {"problem": 22, "code": "reduce (fn [acc x] (inc acc)) 0", "user": "51c8f1d8e4b07ef393169e5d"}, {"problem": 22, "code": "(fn myf [x](if \n               (not-empty x) \n               (+ 1 (myf (rest x)))\n               0))", "user": "53d28c0de4b00fb29b22131f"}, {"problem": 22, "code": "(fn cnt\n  ([sx] (cnt sx 0))\n  ([sx acc]\n    (if (= nil (first sx))\n        acc\n        (cnt (rest sx) (inc acc))\n    )\n  )\n)", "user": "51ad808ee4b09397d5109784"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "53b2b438e4b047364c04449d"}, {"problem": 22, "code": "(fn [items] ((fn [items n ] (if (= (first items) nil) n (recur (rest items) (inc n)))) items 0))", "user": "53d2b10de4b00fb29b221322"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "53d3ad01e4b00fb29b22132d"}, {"problem": 22, "code": "(fn [c & cnt]\n  (let [cnt (or cnt 0)] \n    (if (empty? c) \n      cnt \n      (recur (rest c) (inc cnt)))))", "user": "51e8736ae4b006d205356a4f"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "53d40718e4b00fb29b221333"}, {"problem": 22, "code": "#(loop [counts 0 remains %] (if (nil? (first remains)) counts (recur (inc counts) (rest remains))))", "user": "53d28800e4b00fb29b22131e"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 % )", "user": "53d3abeae4b00fb29b22132c"}, {"problem": 22, "code": "(fn [coll]\n  (loop [coll coll\n         pos 0]\n    (if (empty? coll)\n      pos\n \t  (recur (rest coll) (inc pos)))))", "user": "53d40508e4b00fb29b221332"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "53d4dadde4b00fb29b221337"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "53d3856fe4b00fb29b22132b"}, {"problem": 22, "code": "#(reduce + (map (fn [_] 1) %))", "user": "53d6024ae4b0e771c3025450"}, {"problem": 22, "code": "reduce (fn [a, b] (inc a)) 0", "user": "53d612cbe4b0e771c3025452"}, {"problem": 22, "code": "(fn [col] (reduce #(do %2 (inc %)) 0 col))", "user": "53d50d33e4b00fb29b22133c"}, {"problem": 22, "code": "(fn [coll] (-> coll seq .size))", "user": "530ec239e4b08068f379ecc1"}, {"problem": 22, "code": "#(loop [x %\n        y 0]\n   (if (empty? x)\n     y\n     (recur (rest x) (inc y))))", "user": "53d5a63be4b0e771c3025449"}, {"problem": 22, "code": "#(apply + (map \n           (fn [x] 1) \n           %1\n          )\n)", "user": "53d5e45ae4b0e771c302544e"}, {"problem": 22, "code": "(fn [coll]\n  (loop\n    [cnt 0 c coll]\n    (if (empty? c)\n      cnt\n      (recur (inc cnt) (rest c))\n     )\n  )\n)", "user": "53d17fdde4b00fb29b221315"}, {"problem": 22, "code": "(partial reduce (fn [x y] (+ 1 x)) 0)", "user": "53d6cf90e4b0e771c302545c"}, {"problem": 22, "code": "(fn [coll]\n  (reduce (fn [x y] (inc x)) 0 coll))", "user": "53d6c0cfe4b0e771c302545b"}, {"problem": 22, "code": "(fn\n  [damn]\n  (loop [remain damn\n         result 0]\n    (if (empty? remain)\n      result\n      (recur (pop (vec remain)) (inc result)))))", "user": "53d6b266e4b0e771c3025459"}, {"problem": 22, "code": "(fn [coll]\n  (let [f (fn [coll n]\n            (if coll\n              (recur (next coll) (inc n))\n              n\n            )\n          )]\n    (f coll 0)\n  )\n)", "user": "53d78b64e4b0e771c3025466"}, {"problem": 22, "code": "(fn [L]\n  (loop [n 0 x L]\n    (if (empty? x)\n      n\n      (recur (inc n) (rest x)))))", "user": "53d60f57e4b0e771c3025451"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "53d70f3be4b0e771c302545f"}, {"problem": 22, "code": "(fn [seq]\n  (loop [seq seq cnt 0]\n  (if (empty? seq) cnt (recur (next seq) (+ cnt 1)))\n  )\n)", "user": "53c4254ce4b00fb29b221283"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "53d5d24de4b0e771c302544a"}, {"problem": 22, "code": "(fn my-count [ls]\n  (if (empty? ls)\n    0\n    (+ 1 (my-count (rest ls)))))", "user": "53d87449e4b0e771c302546d"}, {"problem": 22, "code": "(fn [lst]\n  (reduce (fn [x y] (inc x)) 0 lst))", "user": "53d2afede4b00fb29b221321"}, {"problem": 22, "code": "(fn my-count[%] \n    (if (empty? (rest %)) 1 \n          (+ 1 (my-count (rest %)))\n     )\n)", "user": "53d64811e4b0e771c3025456"}, {"problem": 22, "code": "#(loop [x %\n        result 0]\n   (if (empty? (rest x))\n     (+ result 1)\n     (recur (rest x) (+ result 1))))", "user": "53d7a81ce4b0e771c3025467"}, {"problem": 22, "code": "#(reduce (fn [x _] (inc x)) 0 %)", "user": "53d92964e4b0e771c3025476"}, {"problem": 22, "code": "(fn [sq] (loop [s sq c 0] (if (empty? s)\n                                  c\n                             (recur (rest s) (inc c)))))", "user": "52cfb277e4b07d0d72b273ac"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "53d91412e4b0e771c3025474"}, {"problem": 22, "code": "#(reduce (fn [x _] (inc x)) 0 %)", "user": "51febd40e4b0f1313d468a76"}, {"problem": 22, "code": "(fn [sq] (reduce + (map (constantly 1) sq)))", "user": "53d920d9e4b0e771c3025475"}, {"problem": 22, "code": "(fn [s] (reduce + (map #(if % 1) s)))", "user": "53d2fb7ae4b00fb29b221326"}, {"problem": 22, "code": "#(reduce (fn [m n] (inc m)) 0 %)", "user": "53d88bd5e4b0e771c302546e"}, {"problem": 22, "code": "(fn cnt\n  ([elems cur]\n    (if (empty? elems)\n      cur\n      (cnt (rest elems) (+ cur 1))))\n  ([elems]\n   (if (not (empty? elems))\n     (cnt (rest elems) 1)\n     0)))", "user": "53d950f2e4b0e771c3025477"}, {"problem": 22, "code": "#(identity (loop [y 0, x %]\n    (if (empty? x)\n      y\n      (recur (inc y) (rest x)))))", "user": "53968a70e4b0b51d73faaee0"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "53da1540e4b0e771c3025482"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "53da1166e4b0e771c3025481"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "53da1e2ce4b0e771c3025487"}, {"problem": 22, "code": "(fn [s] (reduce + (map (fn [_] 1) s)))", "user": "53da302fe4b0e771c3025490"}, {"problem": 22, "code": "(fn [a] ((fn f [l] (if (empty? l) 0 (+ 1 (f (pop l))))) (into [] a)))", "user": "53d96f0ee4b0e771c3025478"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "53da19fde4b0e771c3025484"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "53da5feee4b0e771c302549c"}, {"problem": 22, "code": "#(reduce (fn [x y] (+ x 1)) 0 %)", "user": "53da3fcde4b0e771c3025497"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "4e6b8ac8535d8ccf87e9ff19"}, {"problem": 22, "code": "(fn f [coll] \n  (if (empty? coll)\n    0\n    (inc (f (rest coll)))\n  )\n)", "user": "53da70a4e4b0e771c302549d"}, {"problem": 22, "code": "(fn [list]\n     (#(if\n        (next %)\n        (recur (rest %) (+ 1 %2))\n        %2)\n     list 1))", "user": "53daca15e4b0e771c30254a9"}, {"problem": 22, "code": "(partial (fn self [x list] (if (empty? list) x (self (+ x 1) (rest list)))) 0)", "user": "539dcb24e4b0b51d73faaf3d"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "53da28cde4b0e771c302548a"}, {"problem": 22, "code": "#(reduce + (map (fn [_] 1) %))", "user": "5342f075e4b084c2834f4a14"}, {"problem": 22, "code": "(fn [seq]\n  (let [f (fn [[_ & rst] num]\n            (if (nil? rst) num (recur rst (inc num))))]\n   (f seq 1)))", "user": "53db43aae4b0e771c30254b1"}, {"problem": 22, "code": "(fn [s] (apply + (map (fn on [x] 1) s)))", "user": "53d382d8e4b00fb29b22132a"}, {"problem": 22, "code": "reduce (fn [a b] (inc a)) 0", "user": "52cda980e4b07d0d72b2737b"}, {"problem": 22, "code": "(fn [col] (reduce + (map #(and % 1) col)))", "user": "53a83c74e4b047364c044426"}, {"problem": 22, "code": "(partial reduce (fn [a1,a2] (inc a1)) 0)", "user": "52f1bd89e4b05e3f0be25ef0"}, {"problem": 22, "code": "(fn [n, x] (if (= x '()) n (recur (+ n 1) (rest x)))) 0", "user": "53dbc8bee4b094d41abdfef5"}, {"problem": 22, "code": "(fn cnt [l]\n  (cond (empty? l) 0\n        :else (+ 1 (cnt (next l)))))", "user": "53dbf5fbe4b094d41abdfef8"}, {"problem": 22, "code": "#(loop [lista % c 0] (if (empty? lista) c (recur (rest lista) (inc c))))", "user": "53dc05d4e4b094d41abdfefa"}, {"problem": 22, "code": "(fn [coll]\n  (reduce + \n     (map #(reset! (atom %) 1) coll)))", "user": "53844970e4b06839e8705eef"}, {"problem": 22, "code": "(fn [coll] (reduce (fn [n _] (inc n)) 0 coll))", "user": "53dc94c8e4b094d41abdfefc"}, {"problem": 22, "code": "#(reduce (fn [acc _] (inc acc)) 0 %)", "user": "53dcb9b2e4b0d874e779ae23"}, {"problem": 22, "code": "#(reduce (fn [cnt x] (inc cnt)) 0 %)", "user": "53dcf474e4b0d874e779ae25"}, {"problem": 22, "code": "#(reduce (fn [x _] (inc x)) 0 %)", "user": "53dcdde4e4b0d874e779ae24"}, {"problem": 22, "code": "(fn [col]\n  (reduce (fn [acc _]\n            (+ acc 1))\n          0\n          col))", "user": "53dd37aee4b0d874e779ae28"}, {"problem": 22, "code": "#(loop [len 0\n        acc %]\n   (if (empty? acc)\n     len\n     (recur (+ len 1) (rest acc))))", "user": "53da8fede4b0e771c30254a3"}, {"problem": 22, "code": "(fn [a] (reduce + (map (fn [_] 1) a)))", "user": "53dd72fde4b0d874e779ae2b"}, {"problem": 22, "code": "#(loop [x 0 s %]\n      (cond\n       (empty? s) x\n       :else \n       (recur (inc x) (rest s))))", "user": "53dd839be4b0d874e779ae2c"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "53dc822ce4b094d41abdfefb"}, {"problem": 22, "code": "(fn sum\n  ([lst] (sum (rest lst) 1))\n  ([lst n] (if (= '() lst)\n            n\n            (sum (rest lst) (+ n 1)))))", "user": "53ddd44be4b0d874e779ae2e"}, {"problem": 22, "code": ";; (fn [x]\n;;   (loop [x x\n;;          acc 0]\n;;     (if (empty? x)\n;;       acc\n;;       (recur (rest x) (inc acc)))))\n\nreduce (fn [memo x] (inc memo)) 0", "user": "53da3691e4b0e771c3025493"}, {"problem": 22, "code": "(fn len [s] (if (empty? s) 0 (+ 1 (len (rest s)))))", "user": "53de622ce4b0d874e779ae34"}, {"problem": 22, "code": "(fn [s] (apply + (map (fn [z] 1) s)))", "user": "53d5d2d0e4b0e771c302544c"}, {"problem": 22, "code": "#(loop [j 0 runner (seq %)]\n   (if-not (empty? runner)\n     (recur (inc j) (rest runner))\n     j))", "user": "53703287e4b0fc7073fd6e8f"}, {"problem": 22, "code": "(fn counter\n  [series]\n  (reduce (fn [n _] (inc n)) 0 series))", "user": "53de4bdae4b0d874e779ae32"}, {"problem": 22, "code": "(fn\n  [elems]\n  (loop [remaining elems\n         length 0]\n    (if (empty? remaining)\n      length\n      (recur (rest remaining) (+ 1 length)))))", "user": "53de7484e4b0d874e779ae35"}, {"problem": 22, "code": "(fn my-count\n  ([coll] (my-count coll 0))\n  ([coll num]\n   (if (empty? coll)\n     num\n     (recur (rest coll) (inc num)))))", "user": "53729c50e4b06d7f452d9dfe"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "53da38e8e4b0e771c3025494"}, {"problem": 22, "code": "reduce (fn [a _] (inc a)) 0", "user": "53ded676e4b0d874e779ae3b"}, {"problem": 22, "code": "(fn [x] (loop [cnt 0 a-list x] (if (empty? a-list) cnt (recur (inc cnt) (rest a-list)))))", "user": "52fdbf3ae4b047fd55837032"}, {"problem": 22, "code": "#(first (last (map vector (iterate inc 1) (seq %))))", "user": "53d0d7a9e4b00fb29b22130c"}, {"problem": 22, "code": "reduce (fn [n _] (inc n)) 0", "user": "52ba2639e4b07a9af57922cb"}, {"problem": 22, "code": "#(reduce (fn [x y] (+ x 1)) 0 %)", "user": "53dfb864e4b0d874e779ae43"}, {"problem": 22, "code": "(fn cnt [sq] (if (empty? sq) 0 (+ 1 (cnt (rest sq)))))", "user": "53df340ce4b0d874e779ae3f"}, {"problem": 22, "code": "(fn \n  [x]\n  (loop  [my-list (seq x) cnt 0]\n    (cond (empty? my-list )\n       cnt\n       :else   \n       (recur ( rest my-list) (inc cnt )))))", "user": "516d227fe4b06f078fab252d"}, {"problem": 22, "code": "(fn[word] (reduce + (map (fn [x] 1) word)))", "user": "53df9f47e4b0d874e779ae42"}, {"problem": 22, "code": "#(reduce (fn [tot _] (inc tot)) 0 %)", "user": "53dfdf01e4b0d874e779ae46"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "53e0001be4b0d874e779ae48"}, {"problem": 22, "code": "(fn how-many [xs]\n  (loop [iter 0\n         coll xs]\n    (let [[x & xsp] coll]\n      (if (empty? xsp)\n        (inc iter)\n        (recur (inc iter) xsp)))))", "user": "53dfbc75e4b0d874e779ae44"}, {"problem": 22, "code": "#(reduce (fn[x y] (inc x)) 0 %)", "user": "53e020c3e4b0d874e779ae49"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "533d828ce4b085b17e897d83"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "53e0514ce4b0d874e779ae4a"}, {"problem": 22, "code": "(fn [arr]\n  ((fn internal [arr acc]\n  (if (= arr '())\n    acc\n    (internal (rest arr) (+ acc 1)))) arr 0))", "user": "53e06f81e4b0d874e779ae4c"}, {"problem": 22, "code": "#(+ (.lastIndexOf (vec %) (last (vec %))) 1)", "user": "53dfd77fe4b0d874e779ae45"}, {"problem": 22, "code": "#(reduce (fn [acc _] (inc acc))  0 %)", "user": "53e19461e4b0d874e779ae59"}, {"problem": 22, "code": "(fn my-count [l] (if (empty? l) 0 (+ 1 (my-count (rest l)))))", "user": "4db1e34f1254ad5b4805fa73"}, {"problem": 22, "code": "(fn count1 [x] (if (empty? x) 0 (inc (count1 (rest x)))))", "user": "53dadf1de4b0e771c30254ad"}, {"problem": 22, "code": "#(apply + (map second (map list % (repeat 1))))", "user": "53e23ab7e4b036ad0777e3ef"}, {"problem": 22, "code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "53e241a6e4b036ad0777e3f0"}, {"problem": 22, "code": "#(apply + (map {nil 1} (map {} %)))", "user": "53dae029e4b0e771c30254ae"}, {"problem": 22, "code": "(fn [incoming-seq]\n  (loop [passed 0 rest-seq incoming-seq]\n    (if (= (first rest-seq) nil)\n      passed\n      (recur (+ passed 1) (rest rest-seq)))))", "user": "53e30fcae4b036ad0777e3fc"}, {"problem": 22, "code": "(fn [coll]\n  (if (empty? coll)\n    0\n  \t(loop [[head & tail] coll c 1]\n      (if (empty? tail)\n      \tc\n      \t(recur tail (inc c))))))", "user": "53df4292e4b0d874e779ae40"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1)%))", "user": "53e2381ce4b036ad0777e3ee"}, {"problem": 22, "code": "#(inc (last (interleave % (range))))", "user": "5373451fe4b06d7f452d9e0b"}, {"problem": 22, "code": "#(reduce + (map (fn [_] 1) % ))", "user": "53e1040be4b0d874e779ae4e"}, {"problem": 22, "code": "(fn[data]\n   (inc ((last(map-indexed\n     (fn[index item][index])\n     data)) 0) )  )", "user": "53d10553e4b00fb29b22130f"}, {"problem": 22, "code": "(fn counter [sqn] (if (empty? sqn) 0\n                    (+ 1 (counter (rest sqn)))))", "user": "53e2ac1ae4b036ad0777e3f3"}, {"problem": 22, "code": "(fn [x] (apply + (map (fn [y] 1) x)))", "user": "53e2b212e4b036ad0777e3f4"}, {"problem": 22, "code": "(fn [coll] (reduce (fn [m _] (inc m)) 0 coll))", "user": "53dab694e4b0e771c30254a7"}, {"problem": 22, "code": "#(apply + (map (fn [_] 1) %))", "user": "53e3e852e4b036ad0777e407"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "53e051ece4b0d874e779ae4b"}, {"problem": 22, "code": "#(reduce (fn[x y] (inc x)) 0, %)", "user": "53cfa79ce4b00fb29b2212ff"}, {"problem": 22, "code": "reduce (fn [old, new] (+ old 1)) 0", "user": "53e15371e4b0d874e779ae54"}, {"problem": 22, "code": "(fn my-count [lyst]\n  (reduce + (map (constantly 1) lyst)))", "user": "53e27bf1e4b036ad0777e3f2"}, {"problem": 22, "code": "(fn [seq]\n  (loop [acc 0\n         seq seq]\n    (if (empty? seq) acc\n        (recur (inc acc) (rest seq)))))", "user": "53e543efe4b036ad0777e457"}, {"problem": 22, "code": "(partial reduce (fn [acc n] (inc acc)) 0)", "user": "53e55de1e4b036ad0777e458"}, {"problem": 22, "code": "(fn [list] (loop [coll list iteration 0]\n                 \t\t(if (empty? coll)\n                   \t\t\titeration\n                   \t\t\t(recur (rest coll) (inc iteration)))))", "user": "53e5736ce4b036ad0777e45a"}, {"problem": 22, "code": "(fn [coll] (reduce + (map (fn [x] 1) coll)))", "user": "5217c06fe4b0a4bccb16cab7"}, {"problem": 22, "code": "#(reduce (fn [n x] (+ n 1)) 0 %)", "user": "53e4fa2ce4b036ad0777e454"}, {"problem": 22, "code": "reduce (fn [acc list] (+ acc 1)) 0", "user": "53e60743e4b036ad0777e46b"}, {"problem": 22, "code": "#(reduce (fn [acc _] (inc acc)) 0 %1)", "user": "53e66df9e4b036ad0777e472"}, {"problem": 22, "code": "(fn [seq] (loop [s seq c 0] (if (empty? s) c (recur (rest s) (inc c))) ))", "user": "53b952eee4b047364c0444e6"}, {"problem": 22, "code": "(fn count' [xs]\n  (if (= xs (empty xs))\n    0\n    (+ 1 (count' (rest xs)))))", "user": "525890f7e4b0cb4875a45cb5"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "53e5e060e4b036ad0777e468"}, {"problem": 22, "code": "#(reduce (fn [n x] (inc n)) 0 %1)", "user": "53e745a1e4b036ad0777e479"}, {"problem": 22, "code": "#(reduce (fn [x _] (inc x)) 0 %)", "user": "53e35265e4b036ad0777e400"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "53e73fe3e4b036ad0777e478"}, {"problem": 22, "code": "#(reduce + (map (fn [x] (+ 1)) %))", "user": "53e3a1f7e4b036ad0777e404"}, {"problem": 22, "code": "(fn my-count [[head & tail]]\n  (if (empty? tail)\n    1\n    (+ 1 (my-count tail))))", "user": "53e57ba2e4b036ad0777e45c"}, {"problem": 22, "code": "(fn nbElements [y x] (if (first x) (nbElements (+ y 1) (rest x)) y)) 0", "user": "5360b327e4b0243289761e38"}, {"problem": 22, "code": "(fn [l] (reduce (fn [x y] (inc x)) 0 l))", "user": "53e8c684e4b036ad0777e48b"}, {"problem": 22, "code": "#(->> % (map-indexed list) last first inc)", "user": "53e3f7a8e4b036ad0777e408"}, {"problem": 22, "code": "reduce (fn [sum _] (+ sum 1)) 0", "user": "53e150e5e4b0d874e779ae53"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "53e902a5e4b036ad0777e491"}, {"problem": 22, "code": "(fn add-all [l] (if (empty? l) 0 (+ 1 (add-all (rest l)))))", "user": "53e92821e4b036ad0777e499"}, {"problem": 22, "code": "#(loop [x % i 0]\n   (if (empty? x) \n   i (recur (rest x) (inc i))))", "user": "53e76bb2e4b036ad0777e47d"}, {"problem": 22, "code": "(fn self [coll] (if (empty? (rest coll))\n             1\n             (+ 1 (self (rest coll)))))", "user": "53e634ede4b036ad0777e470"}, {"problem": 22, "code": "#(loop [col % n 0] (if (empty? col) n (recur (rest col) (inc n))))", "user": "53e9a15be4b036ad0777e4ae"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "528d6b10e4b0239c8a67aec3"}, {"problem": 22, "code": "(fn [x]\n  (loop [arr x\n         result 0]\n    (if (seq arr)\n      (recur (rest arr) (inc result))\n      result)))", "user": "53df152ee4b0d874e779ae3e"}, {"problem": 22, "code": "(fn [sq] \n  (->> sq\n       (map (constantly 1))\n       (reduce +)\n       )\n  )", "user": "4f1ff504535d64f6031464a6"}, {"problem": 22, "code": "(fn [s]\n  (loop [coll s\n         size 0]\n    (if (empty? coll) size\n      (recur (rest coll) (inc size)))))", "user": "53ea3a63e4b036ad0777e4dc"}, {"problem": 22, "code": "#(loop [col % n 0]\n\t(if (empty? col)\n        n\n\t\t(recur (rest col) (inc n))\n\t)\n)", "user": "53e93265e4b036ad0777e49f"}, {"problem": 22, "code": "(fn ds ([x] (if (empty? x) 0 (ds (rest x) 1))) ([x n] (if (empty? x) n (ds (rest x) (inc n)))))", "user": "53e91473e4b036ad0777e495"}, {"problem": 22, "code": "(fn [col] (reduce + (map #(or 1 %) col)))", "user": "516f5b7ee4b0ef3e37990e7e"}, {"problem": 22, "code": "reduce (fn[acc, _](inc acc))0", "user": "53ea4492e4b036ad0777e4e0"}, {"problem": 22, "code": "(fn [sq] (reduce (fn [c %] (inc c)) 0 sq))", "user": "53ea72b6e4b036ad0777e4e5"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "53e92aafe4b036ad0777e49a"}, {"problem": 22, "code": "#(reduce (fn [c x] (inc c)) 0 %)", "user": "53ea5307e4b036ad0777e4e2"}, {"problem": 22, "code": "(fn [x] \n  (loop [a x n 0]\n    (if a \n      (recur (next a) (inc n))\n      n)))", "user": "53eade35e4b036ad0777e4ec"}, {"problem": 22, "code": "reduce (fn [x _] (inc x)) 0", "user": "530fbbaee4b08068f379eccf"}, {"problem": 22, "code": "(fn cc [ct x] (if (= (first x) nil) ct (cc (+ ct 1) (rest x)))) 0", "user": "537ae8bfe4b06839e8705e61"}, {"problem": 22, "code": "#(inc (first (last (map-indexed vector %))))", "user": "53e4b5a3e4b036ad0777e44b"}, {"problem": 22, "code": "#(reduce + (map (fn [_] 1) %))", "user": "53ea9871e4b036ad0777e4e9"}, {"problem": 22, "code": "reduce (fn [c _] (+ c 1)) 0", "user": "53ce0a29e4b00fb29b2212eb"}, {"problem": 22, "code": "(fn [x] (reduce + (map (fn [y] '1) x)))", "user": "53eb823de4b036ad0777e4fa"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "53eb8ceae4b036ad0777e4fb"}, {"problem": 22, "code": "(fn [lst]\n  (loop [iteration 0 lst lst]\n    (if (empty? lst)\n      iteration\n      (recur (inc iteration) (rest lst)))))", "user": "53ebf2dee4b036ad0777e4fe"}, {"problem": 22, "code": "#(loop [x 0 y (vec %)] (if (not= nil (peek y)) (recur (inc x) (pop y)) x ))", "user": "53e8cefde4b036ad0777e48d"}, {"problem": 22, "code": "#(reduce (fn[x y] (inc x)) 0 %)", "user": "53e9a56ce4b036ad0777e4af"}, {"problem": 22, "code": "#(reduce (fn [x _] (inc x)) 0 %)", "user": "53ecac57e4b0d648e757f4b3"}, {"problem": 22, "code": "(fn alph [x](if(next x)\n   (+ (alph (next x)) 1)\n   1))", "user": "53eb274be4b036ad0777e4f1"}, {"problem": 22, "code": "#(reduce +\n         (map (fn [x] 1) %))", "user": "53ebd5fee4b036ad0777e4fd"}, {"problem": 22, "code": "(fn [arr] (+ 1 (last (keep-indexed  (fn [i e] i) arr))))", "user": "53e4bc2ee4b036ad0777e44d"}, {"problem": 22, "code": "(fn len [ls]\n  (if (= '() ls)\n    0\n    (+ 1 (len (rest ls)))))", "user": "53ed1778e4b0d648e757f4bd"}, {"problem": 22, "code": "(fn [sq]\n   (loop [ks sq acc 1] \n     (if (empty? (rest ks))\n       acc\n       (recur (rest ks) (inc acc)))\n))", "user": "53e9681de4b036ad0777e4a4"}, {"problem": 22, "code": "#(reduce (fn [x _] (inc x)) 0 %)", "user": "5343753ae4b084c2834f4a1b"}, {"problem": 22, "code": "(fn [m] (+ 1 (first (last\n                (map-indexed (fn [i a] [i a]) m)\n                             \n                ))))", "user": "53eae21ae4b036ad0777e4ee"}, {"problem": 22, "code": "(fn [l] (reduce + (map (fn [x] 1) l)))", "user": "53e8698ce4b036ad0777e486"}, {"problem": 22, "code": "(fn my-count\n  ([seq] (my-count seq 0))\n  ([seq acc]\n    (let [r (rest seq) acc (inc acc)]\n      (if (= () r)\n        acc\n        (recur r acc)\n        )\n      )\n  )\n  )", "user": "53edb628e4b0d648e757f4c8"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "53ede8e3e4b0d648e757f4cc"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "53bf9cfbe4b0c98a41f5cca4"}, {"problem": 22, "code": "(fn [y] (\n         (fn [x n] (\n                    if (next x)\n                    (recur (rest x) (+ 1 n))\n                    n\n                    )\n           )\n         y (if (= y ()) 0 1)\n         )\n  )", "user": "53ee6e81e4b0d648e757f4cd"}, {"problem": 22, "code": "(fn [s]\n  (loop [sleft s c 0]\n    (if (empty? sleft)\n      c\n      (recur (rest sleft) (inc c)))))", "user": "53edb464e4b0d648e757f4c7"}, {"problem": 22, "code": "(fn [coll] (reduce (fn [acc _] (inc acc)) 0 coll))", "user": "53ee7f2ee4b0d648e757f4cf"}, {"problem": 22, "code": "(fn size\n  ([seq] (size seq 0))\n  ([seq n] (if (empty? seq)\n            n\n            (recur (rest seq) (inc n)))))", "user": "53ecd01fe4b0d648e757f4b9"}, {"problem": 22, "code": "(fn c [s]\n  (if (empty? s)\n    0\n    (inc (c (rest s)))))", "user": "53cafc64e4b00fb29b2212cf"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "53ef3adfe4b0742d9025b0c9"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "53ef5e51e4b0742d9025b0cc"}, {"problem": 22, "code": "#(reduce (fn [value &other] (inc value)) 0 (seq %))", "user": "53efc76de4b0742d9025b0cf"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "53ef55eee4b0742d9025b0ca"}, {"problem": 22, "code": "(comp (partial reduce +) (fn [xs] (map (fn [_] 1)  xs)))", "user": "53ef78bee4b0742d9025b0cd"}, {"problem": 22, "code": "reduce (fn [n col] (inc n)) 0", "user": "53f035c2e4b0742d9025b0d2"}, {"problem": 22, "code": "(fn [s]\n  (loop [iteration 0\n         remaining s]\n    (if (empty? remaining)\n      iteration\n      (recur (inc iteration) (rest remaining))\n    )\n  )\n)", "user": "53ef5c13e4b0742d9025b0cb"}, {"problem": 22, "code": "#(reduce (fn [x y] (+ x 1)) 0 %)", "user": "53f0e2d8e4b0742d9025b0d6"}, {"problem": 22, "code": "(fn [coll]\n  (\n   (fn step [subcoll n] \n     (if \n       (first (rest subcoll)) \n       (step (rest subcoll) (+ n 1)) \n       n)\n   ) \n   coll\n   1\n  )\n)", "user": "53ed6976e4b0d648e757f4c4"}, {"problem": 22, "code": "(fn [x]\n   (letfn [(F [x ret]\n             (if (empty? x) ret\n                 (F (rest x) (inc ret))))]\n     (F x 0)\n))", "user": "53f053ebe4b0742d9025b0d3"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "53f12b77e4b0742d9025b0da"}, {"problem": 22, "code": "(fn [coll] \n  (loop [remaining-items coll\n         len 0]\n    (if (empty? remaining-items)\n      len\n      (recur (rest remaining-items) (inc len)))))", "user": "53f10bffe4b0742d9025b0d7"}, {"problem": 22, "code": "(fn[x] (loop [ll x result 0]\n         (if (empty? ll) result  (recur (rest ll) (inc result)  ))))", "user": "53f1c05ee4b0742d9025b0e1"}, {"problem": 22, "code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "53da767ee4b0e771c302549e"}, {"problem": 22, "code": "reduce #(inc (nth %& 0)) 0", "user": "503b9439e4b07a1917cc34df"}, {"problem": 22, "code": "(fn [list_a]\n  (loop [remain_list list_a count_a 0]\n    (if (empty? remain_list) \n      count_a\n      (recur (rest remain_list) (inc count_a))\n    )\n  )\n)", "user": "53f17931e4b0742d9025b0dd"}, {"problem": 22, "code": "(fn size [s] (if (empty? s) 0 (inc (size (rest s)))))", "user": "53ed6befe4b0d648e757f4c5"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "53f152bce4b0742d9025b0dc"}, {"problem": 22, "code": "#(loop [in %\n        n 0]\n   (if (first in) \n     (recur (rest in) (inc n))\n     n))", "user": "523578efe4b0a643f2dcb74c"}, {"problem": 22, "code": "(fn [coll]\n  (loop [acc 0 remaining coll]\n    (let [[head & tail] remaining]\n      (if (empty? remaining)\n        acc\n        (recur (inc acc) tail))))\n  )", "user": "53f2370ee4b0742d9025b0e7"}, {"problem": 22, "code": "#(loop [lst % cnt 0]\n   (if (empty? lst)\n     cnt\n     (recur (rest lst)\n            (inc cnt))))", "user": "53f14389e4b0742d9025b0db"}, {"problem": 22, "code": "(fn [s]\n  (reduce (fn [n s] (inc n)) 0 s)\n  )", "user": "515d414be4b00901442db1db"}, {"problem": 22, "code": "(fn [coll] (reduce #(+ %1 %2) (map (fn [x] 1) coll)))", "user": "53f35c34e4b0742d9025b0f4"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "53f1d5d4e4b0742d9025b0e2"}, {"problem": 22, "code": "reduce (fn [x y] (inc x)) 0", "user": "53ed2fafe4b0d648e757f4c1"}, {"problem": 22, "code": "(fn [x] (reduce + (map (fn [x] 1) x)))", "user": "53f3d96ee4b0742d9025b0fa"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "52d2cb0fe4b099d49816f0b5"}, {"problem": 22, "code": ";#(%)\n;  \t(if (= (alength [1,2,3]) 0)\n;      \t0\n;     \t(+ 1 (foo (car seqie))))\n\n#(reduce + (map (fn [x] 1) %))", "user": "53f18bbae4b0742d9025b0de"}, {"problem": 22, "code": "(fn count* [coll]\n  (loop [coll coll acc 0]\n    (if (empty? coll)\n      acc\n      (recur (rest coll) (inc acc)))))", "user": "53f42471e4b0742d9025b0fb"}, {"problem": 22, "code": "(fn [s]\n  (loop [s s\n         i 0]\n    (if (seq s)\n      (recur (next s) (inc i))\n      i)))", "user": "4f392fc8e4b0e243712b1ee7"}, {"problem": 22, "code": "#(reduce (fn [result a] (inc result)) 0 %)", "user": "53ed290be4b0d648e757f4c0"}, {"problem": 22, "code": "(fn [elems] (reduce (fn [x1 x2] (+ x1 1)) 0 elems))", "user": "53f49dfae4b0db01ade6f9c2"}, {"problem": 22, "code": "#(loop [i 0\n   xs %]\n  (if-not (empty? xs)\n    (recur (inc i)\n           (rest xs))\n    i))", "user": "53cd421ce4b00fb29b2212dd"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "53bd7080e4b0d9a98559a6d1"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "53edbb02e4b0d648e757f4ca"}, {"problem": 22, "code": "(partial reduce (fn [x y] (inc x)) 0)", "user": "53f592b7e4b0db01ade6f9d0"}, {"problem": 22, "code": "#(reduce + (map (fn [arg1] 1)  %1))", "user": "53f5a61ee4b0db01ade6f9d2"}, {"problem": 22, "code": "(fn [values]\n  (loop [elements values\n         result 0]\n    (if(empty? elements)\n      result\n      (recur (rest elements) (inc result)))))", "user": "53f50c03e4b0db01ade6f9ca"}, {"problem": 22, "code": "#( reduce + ( map (constantly 1) %))", "user": "53e67e69e4b036ad0777e473"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "538ca203e4b0b51d73faae5f"}, {"problem": 22, "code": "(fn [s]( reduce + (map (fn [x] 1) s)) )", "user": "53f6566ee4b0db01ade6f9de"}, {"problem": 22, "code": "#(let [s (seq %)] (reduce (fn [x _] (+ 1 x)) 0 s))", "user": "5372e7d9e4b06d7f452d9e02"}, {"problem": 22, "code": "(fn [col] (last (map-indexed (fn [idx _] (+ 1 idx)) col)))", "user": "53f67bcfe4b0db01ade6f9e1"}, {"problem": 22, "code": "reduce (fn [a b](+ a 1)) 0", "user": "53f7008be4b0de5c41848557"}, {"problem": 22, "code": "(fn [x] (apply + (map (fn [y] 1) x)))", "user": "53f6d555e4b0db01ade6f9e5"}, {"problem": 22, "code": "(fn [x] (apply + (map (constantly 1) x)))", "user": "53f733f4e4b0de5c4184855a"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "53f73cece4b0de5c4184855b"}, {"problem": 22, "code": "#(loop [result 0 c %]\n    (if(empty? c) result\n      (recur (inc result) (rest c))))", "user": "53f75957e4b0de5c4184855d"}, {"problem": 22, "code": "#(loop [coll %\n        acc 0]\n   (if (empty? coll)\n     acc\n     (recur (rest coll) (inc acc))\n   )\n)", "user": "53f7820be4b0de5c41848560"}, {"problem": 22, "code": "(fn lCount [l]\n  (if \n    (= (rest l) '())\n    1\n    (+ 1 (lCount (rest l)))))", "user": "53f79b66e4b0de5c41848563"}, {"problem": 22, "code": "#(reduce (fn [c xs] (inc c)) 0 %)", "user": "53f7e537e4b0de5c41848565"}, {"problem": 22, "code": "(fn [s] (reduce + (map (fn [_] 1) s)))", "user": "53f5f740e4b0db01ade6f9d8"}, {"problem": 22, "code": "(fn [xs] (reduce (fn [n _] (+ n 1)) 0 xs))", "user": "53ef7f77e4b0742d9025b0ce"}, {"problem": 22, "code": "reduce (fn [a b] (inc a)) 0", "user": "53f891eee4b0de5c4184856d"}, {"problem": 22, "code": "(fn [coll] (reduce (fn [x y] (inc x)) 0 coll))", "user": "535134bbe4b084c2834f4ae2"}, {"problem": 22, "code": "(fn [ x]  (loop [i 0] (if (= (drop i x) () ) i  (recur (inc i)))))", "user": "53f34a16e4b0742d9025b0f3"}, {"problem": 22, "code": "(fn [xs] (reduce + (map (fn [x] 1) xs)))", "user": "53f74528e4b0de5c4184855c"}, {"problem": 22, "code": "#(reduce (fn [accum i] (inc accum)) 0 %)", "user": "53f8f979e4b0de5c41848571"}, {"problem": 22, "code": "(fn foo [xs]\n  (loop [ls xs\n         n 0]\n    (if (empty? ls) n\n      (recur (rest ls) (+ n 1)))))", "user": "53f7f1dde4b0de5c41848567"}, {"problem": 22, "code": "(partial \n (fn f [acc,sq] (if (= nil (first sq)) acc (f (inc acc) (rest sq)))) \n 0)", "user": "53f9fe41e4b0de5c41848575"}, {"problem": 22, "code": "(fn [arr] (reduce (fn [val _] (inc val)) 0 arr))", "user": "5335c083e4b0e30313ee6c6e"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %1))", "user": "53607c32e4b0243289761e37"}, {"problem": 22, "code": "#(loop [data (seq %)\n        size 0]\n   (if (empty? data)\n     size\n     (recur (rest data) (inc size))))", "user": "53fa3524e4b0de5c41848578"}, {"problem": 22, "code": "(fn [col]\n  (reduce (fn [x y] (+ x 1)) 0 col))", "user": "524b827ce4b09eba1c0223d7"}, {"problem": 22, "code": "#(reduce (fn [x y] (+ x 1)) 0 %)", "user": "53f78944e4b0de5c41848561"}, {"problem": 22, "code": "(fn [xs]\n  (reduce (fn [x _] (inc x)) 0 xs))", "user": "53f77b6ae4b0de5c4184855f"}, {"problem": 22, "code": "(fn [l]\n  (loop [l l acc 0]\n  \t(if (empty? l)\n    \tacc\n    \t(recur (rest l) (+ acc 1))\n  \t)\n  )\n)", "user": "4f0f0e33535d0136e6c2232e"}, {"problem": 22, "code": "reduce (fn [a _ ] (inc a) ) 0", "user": "53f3a4ace4b0742d9025b0f7"}, {"problem": 22, "code": "#(reduce (fn [m i] (inc m)) 0 %)", "user": "53ed03f0e4b0d648e757f4bb"}, {"problem": 22, "code": "(fn [coll]\n  (reduce + (map (fn [x] 1) coll)))", "user": "53fb9f28e4b0de5c41848583"}, {"problem": 22, "code": "#(reduce (fn [x y] (+ x 1)) 0 %)", "user": "53fb5256e4b0de5c4184857f"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "53e40b17e4b036ad0777e40c"}, {"problem": 22, "code": "(fn len [s] (if (seq (rest s)) (+ 1 (len (rest s))) 1))", "user": "53d86564e4b0e771c302546b"}, {"problem": 22, "code": "#(reduce (fn [acc _] (inc acc)) 0 %)", "user": "53e9dce1e4b036ad0777e4bc"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "53fc5b29e4b0de5c4184859d"}, {"problem": 22, "code": "(fn conta[x]\n  (if (= x '())\n    0\n  \t(+ 1 (conta (rest x)))))", "user": "53fc5ec2e4b0de5c4184859e"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "53fc713be4b0de5c418485a0"}, {"problem": 22, "code": "(fn peu [x] (if (empty? x) 0 (inc (peu (rest x)))))", "user": "53fc8424e4b0de5c418485b3"}, {"problem": 22, "code": "#(reduce (fn [a, _] (+ 1 a)) 0 %)", "user": "53fcd574e4b0de5c418485d9"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "53fcd5f3e4b0de5c418485da"}, {"problem": 22, "code": "#(inc (last (map-indexed (fn [x y] x) % )))", "user": "53fcdd1ae4b0de5c418485dd"}, {"problem": 22, "code": "(fn list-len [list]\n  (if (= nil (first list)) 0 (+ 1 (list-len (next list)))))", "user": "53fcba1fe4b0de5c418485d5"}, {"problem": 22, "code": "#(loop [input-seq %\n        \t   counter    0]\n   (if (= (first input-seq) nil)\n     counter\n     (recur (rest input-seq)\n                  (inc counter))))", "user": "53f5c402e4b0db01ade6f9d4"}, {"problem": 22, "code": "(fn [foo]\n  ((fn [bar current-count]\n      (if (empty? bar)\n        current-count\n        (recur (rest bar) (inc current-count)))) foo 0))", "user": "53fd66a4e4b0de5c418485e3"}, {"problem": 22, "code": "(fn[x]  (reduce + (keep-indexed (fn [idx v](+ 1)) x )))", "user": "53fc22f2e4b0de5c41848595"}, {"problem": 22, "code": "#(reduce + (map (fn [_] 1) %))", "user": "53fdb53fe4b0de5c418485e8"}, {"problem": 22, "code": "#(apply + (map (constantly 1) %))", "user": "53fdbe0fe4b0de5c418485e9"}, {"problem": 22, "code": "(fn [s] (loop [s s\n               len 0]\n          (if (empty? s) len\n            (recur (rest s) (inc len)))))", "user": "4dadb5f4c9a9d6ed3399dc57"}, {"problem": 22, "code": "(fn [x] \n  (loop [x x i 0] \n    (if (empty? x) \n      i\n      (recur (rest x) \n             (inc i)) \n      )\n    )\n  )", "user": "53fddd71e4b0de5c418485eb"}, {"problem": 22, "code": "#(reduce (fn [n _] (+ 1 n)) 0 %)", "user": "53fe1c3be4b0de5c418485f2"}, {"problem": 22, "code": "(\n fn damil [x] (\n               \n               if (= nil (first x)) 0 (+ 1 (damil (rest x))) \n \n \n )\n\n\n)", "user": "53fdc4b8e4b0de5c418485ea"}, {"problem": 22, "code": "(fn size[v]\n  (if (empty? v) 0\n    (inc (size(rest v)))))", "user": "53fbcec3e4b0de5c41848585"}, {"problem": 22, "code": "#(loop [s % n 0] (if (seq s) (recur (rest s) (inc n)) n))", "user": "53fcb8f7e4b0de5c418485d4"}, {"problem": 22, "code": "(fn a [x]\n  \t(if\n      \t(empty? x)\n      \t0\n      \t(+ 1 \n           \t(a \n             \t(rest x)\n            )\n        )\n     )\n  )", "user": "53fbf9bce4b0de5c41848586"}, {"problem": 22, "code": "(fn [coll] (apply + (map (constantly 1) coll)))", "user": "51803613e4b04f45bde7d8fd"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "53e1e1f1e4b0d874e779ae5e"}, {"problem": 22, "code": "(fn [l]\n  (loop [li l n 0]\n    (if (= (rest li) [])\n      (inc n)\n      (recur (rest li) (inc n)))))", "user": "53fe1b42e4b0de5c418485f1"}, {"problem": 22, "code": "(fn [items]\n  (reduce (fn [amount items] (inc amount)) 0, items)\n)", "user": "53ff602fe4b0de5c418485ff"}, {"problem": 22, "code": "#(reduce (fn [a b] (inc a)) 0 %)", "user": "53ff76a7e4b0de5c41848600"}, {"problem": 22, "code": "#(let [v (into [] %)\n       aug (conj v 0)\n       augr (reverse aug)\n       count2 (fn [a b] (inc a))]\n \t(reduce count2 augr))", "user": "53f78adce4b0de5c41848562"}, {"problem": 22, "code": "(fn [x] (inc (.lastIndexOf (vec x) (peek (vec x)))))", "user": "53ffa084e4b0de5c41848604"}, {"problem": 22, "code": "(fn [initial-l]\n  (loop [sum 0, l initial-l]\n    (if (empty? l)\n      sum\n      (recur (inc sum) (rest l)))))", "user": "5400407de4b0de5c4184860a"}, {"problem": 22, "code": "#(loop [n % counter 0] \n   (if n \n     (recur (next n) (inc counter)) \n     counter))", "user": "53fb4843e4b0de5c4184857d"}, {"problem": 22, "code": "(fn get-number-elements\n     [mysequence]\n     (if (empty? mysequence)\n       0\n       (+ 1 (get-number-elements (rest mysequence)))\n     )\n  )", "user": "53fe459ae4b0de5c418485f4"}, {"problem": 22, "code": "(fn [s] (reduce (fn [c _] (inc c)) 0 s))", "user": "54008b88e4b0de5c4184860d"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "53ff5572e4b0de5c418485fe"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5400fc30e4b0de5c4184861b"}, {"problem": 22, "code": "#((fn mym\n    ([l n]\n     (if (= l '()) n\n       (recur (rest l) (+ n 1)))))\n  % 0)", "user": "540187ace4b0de5c41848622"}, {"problem": 22, "code": "(fn [col] (reduce (fn [x y] (+ x 1)) 0 col))", "user": "53cd1a9be4b00fb29b2212dc"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "53ff5560e4b0de5c418485fd"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5401aefbe4b0df28a13c62c7"}, {"problem": 22, "code": "(fn mycount ([coll] (mycount coll 0)) ([coll sum] (if (empty? coll) sum (mycount (rest coll) (+ sum 1)))))", "user": "54021f13e4b0df28a13c62cc"}, {"problem": 22, "code": "(fn my-count [a-seq] (if (empty? a-seq) 0 (+ 1 (my-count (rest a-seq)))))", "user": "5394c2dfe4b0b51d73faaed1"}, {"problem": 22, "code": "(fn [coll] (reduce + (map (constantly 1) coll) ))", "user": "53abe2a7e4b047364c044453"}, {"problem": 22, "code": "(fn cntr \n\t([val] \n\t\t(cntr val 0)) \n\t([val acct] \n\t\t(if (empty? val)\n\t\tacct \n\t\t(recur (rest val) (+ 1 acct)))))", "user": "53ef235de4b0d648e757f4d4"}, {"problem": 22, "code": "(fn num [xs] (if (seq xs) (inc (num (rest xs))) 0))", "user": "540470dae4b0addc1aec6658"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "540479e7e4b0addc1aec665a"}, {"problem": 22, "code": "(fn [xs]\n  (loop [xs xs\n         acc 0]\n    (if (empty? xs)\n      acc\n      (recur (rest xs) (inc acc)))))", "user": "53f5666ee4b0db01ade6f9cf"}, {"problem": 22, "code": "(fn [x]\n  (loop [my-list x acc 0]\n       (if (empty? my-list)\n            acc\n          (recur (rest my-list) (inc acc)))))", "user": "54051338e4b0addc1aec6662"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "53d9e587e4b0e771c302547c"}, {"problem": 22, "code": "(fn conta ([lista] (if (empty? lista) 0 (conta (rest lista) 1))) ([lista, n] (if (empty? lista) n (conta (rest lista) (+ n 1)))))", "user": "540271aee4b0df28a13c62d0"}, {"problem": 22, "code": "(fn [coll]\n  (loop [coll coll\n         acc 0]\n    (if (empty? coll)\n      acc\n      (recur (rest coll) (inc acc)))))", "user": "53f6bfd9e4b0db01ade6f9e4"}, {"problem": 22, "code": "reduce (fn [i _] (inc i)) 0", "user": "54058af3e4b0addc1aec6669"}, {"problem": 22, "code": "(fn [n]\n  (loop [coll n cnt 0]\n   (if (empty? coll)\n     cnt\n     (recur (rest coll) (inc cnt))))\n  )", "user": "54058126e4b0addc1aec6667"}, {"problem": 22, "code": "reduce (fn [i _] (inc i)) 0", "user": "5405ae2be4b0addc1aec6671"}, {"problem": 22, "code": "(fn num_elements [list]\n  (if (empty? list)\n    0\n    (+ 1 (num_elements (rest list)))\n  ))", "user": "54060ae8e4b0addc1aec668e"}, {"problem": 22, "code": "#(reduce (fn [x y](inc x)) 0 %)", "user": "5405885ee4b0addc1aec6668"}, {"problem": 22, "code": "#(loop [x 1 r (rest %)] (if (seq r) (recur (inc x) (rest r)) x))", "user": "5406776fe4b0addc1aec66a0"}, {"problem": 22, "code": "(fn [s]\n  (loop [items s\n         current-count 0]\n    (cond\n      (empty? items)\n       current-count\n       :else\n       (recur (rest items) (inc current-count))\n     )\n   )\n)", "user": "53c5976be4b00fb29b221290"}, {"problem": 22, "code": "#(reduce (fn [acc _] (inc acc)) 0 (seq %))", "user": "53d8da61e4b0e771c3025471"}, {"problem": 22, "code": "#(loop [v %, n 0] (if (empty? v) n (recur (rest v) (inc n))))", "user": "524bc937e4b09eba1c0223ee"}, {"problem": 22, "code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "54078826e4b0addc1aec66bc"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "53fc4561e4b0de5c4184859a"}, {"problem": 22, "code": "reduce (fn [size blah] (inc size)) 0", "user": "53f5dc4fe4b0db01ade6f9d6"}, {"problem": 22, "code": "(fn [lst]\n  (loop [lst lst\n         acc 0]\n    (if (empty? lst)\n      acc\n      (recur (rest lst)\n             (inc acc)))))", "user": "54084784e4b0addc1aec66c9"}, {"problem": 22, "code": "(fn [l]\n  (loop [ls l\n         cnt 0]\n    (if (empty? ls)\n      cnt\n      (recur (rest ls) (inc cnt)))))", "user": "5405fdcce4b0addc1aec6683"}, {"problem": 22, "code": "(partial (fn [n s]\n            (if (empty? s)\n              n\n              (recur (inc n) (rest s))))\n          0)", "user": "54042a19e4b0df28a13c62e4"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "52c5d094e4b0c2d177d620ff"}, {"problem": 22, "code": "reduce (fn [a b] (+ a 1)) 0", "user": "54023bbfe4b0df28a13c62cd"}, {"problem": 22, "code": "(fn [a-seq]\n  (let [helper (fn [acc e]\n                 (if-not (nil? e)\n                   (inc acc)\n                   acc))]\n    (reduce helper 0 a-seq)))", "user": "53fd0a22e4b0de5c418485e1"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "54094009e4b0addc1aec66d9"}, {"problem": 22, "code": "reduce (fn [a b] (inc a)) 0", "user": "54094824e4b0addc1aec66da"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "54096a19e4b0addc1aec66dc"}, {"problem": 22, "code": "(fn [coll]\n    (reduce + (map (fn [x] (if nil? x) 0 1) coll)))", "user": "540997ede4b0addc1aec66dd"}, {"problem": 22, "code": "(fn [subj]\n  (apply + (map (constantly 1) subj)))", "user": "52a85d20e4b0c58976d9ac2c"}, {"problem": 22, "code": "reduce (fn [r v] (inc r)) 0", "user": "54081523e4b0addc1aec66c5"}, {"problem": 22, "code": "(fn [s] (reduce (fn [c _] (inc c)) 0 s))", "user": "5408ec4de4b0addc1aec66d0"}, {"problem": 22, "code": "(fn [x] (loop [y x ct 0] (if (empty? y) ct (recur (next y) (+ ct 1)))))", "user": "540a4f62e4b0addc1aec66f0"}, {"problem": 22, "code": "#(loop[n 0\n       lst %]\n   (if (= nil (first lst))\n     n\n     (recur (inc n) (next lst))))", "user": "540a4f20e4b0addc1aec66ef"}, {"problem": 22, "code": "(partial reduce (fn [x _] (inc x)) 0)", "user": "540b2dcbe4b0addc1aec66f4"}, {"problem": 22, "code": "(fn [s] (reduce + (map (fn [i] 1) s)))", "user": "540aa29de4b0addc1aec66f1"}, {"problem": 22, "code": "(fn count2 [c] (reduce (fn [acc r] (+ 1 acc)) 0 c))", "user": "540b91e1e4b0addc1aec66fb"}, {"problem": 22, "code": "(fn sk-count [l]\n  (reduce (fn [result _] (inc result)) 0 l))", "user": "51d42f44e4b013d740b70ddb"}, {"problem": 22, "code": "(fn foo [x] (if (empty? x) 0 (inc (foo (rest x)))))", "user": "54078851e4b0addc1aec66bd"}, {"problem": 22, "code": "#(loop\n   [ v %\n     x 0 ]\n   (if (= nil (first v))\n     x\n     (recur (rest v) (inc x))))", "user": "540705f0e4b0addc1aec66b1"}, {"problem": 22, "code": "(fn\n  [l]\n  (loop [lst l cnt 0]\n    (if (empty? lst )\n      cnt\n      (recur (drop 1 lst) (inc cnt))\n    )  \n))", "user": "53e76728e4b036ad0777e47c"}, {"problem": 22, "code": "(fn county [x] (let [y (seq x)] (if (empty? x) 0 (+ 1 (county (rest y))))))", "user": "54091b82e4b0addc1aec66d5"}, {"problem": 22, "code": "(fn [seq]\n  (loop [seq seq, cnt 0]\n    (if (= seq [])\n      cnt\n      (recur (rest seq) (inc cnt)))))", "user": "540c8f3fe4b0addc1aec6705"}, {"problem": 22, "code": "reduce (fn [counter _] (inc counter)) 0", "user": "540c6a8ae4b0addc1aec6702"}, {"problem": 22, "code": "(fn [coll] \n  (loop [coll coll\n         acc 0]\n    (if (empty? coll)\n      acc\n      (recur (rest coll) (inc acc)))))", "user": "540cde77e4b0addc1aec6709"}, {"problem": 22, "code": "(fn [coll]\n  (loop [coll coll\n         num 0]\n    (if (empty? coll)\n      num\n      (recur (rest coll) (inc num)))))", "user": "53eaa804e4b036ad0777e4ea"}, {"problem": 22, "code": "#(reduce (fn [n _] (inc n)) 0 %)", "user": "540d0087e4b0addc1aec670b"}, {"problem": 22, "code": "(fn [x]\n  (reduce \n    (fn [c _] (inc c)) 0 x))", "user": "540d5085e4b0addc1aec670e"}, {"problem": 22, "code": "#(.size (seq %))", "user": "540d7dd1e4b0addc1aec6713"}, {"problem": 22, "code": "#(reduce (fn [a b] (inc a)) 0 %)", "user": "540c54a7e4b0addc1aec6700"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "540d72f3e4b0addc1aec6712"}, {"problem": 22, "code": "reduce (fn [m _] (inc m)) 0", "user": "5409a12fe4b0addc1aec66df"}, {"problem": 22, "code": "reduce (fn [x,y] (inc x)) 0", "user": "53e4e21ce4b036ad0777e450"}, {"problem": 22, "code": ";;(fn cnt [col] (if (= nil col) 0 (+ 1 (cnt (next col)))))\n\n;;(fn cnt [col] (loop [s col, c 0] (if (empty? s) c (recur (rest s) (inc c))\n\n;;(fn cnt [col] (apply + (map (fn [_] 1) col)))\n\n(fn cnt [col] (reduce + (map (fn [_] 1) col)))\n\n;; (time ( (fn cnt [col] (loop [s col, c 0] (if (empty? s) c (recur (rest s) (inc c))))) (range 1e6)))\n;;=> \"Elapsed time: 314.684 msecs\"\n;;=> 1000000\n\n;; (time ( (fn cnt [col] (reduce + (map (fn [_] 1) col))) (range 1e6)))\n;;=> \"Elapsed time: 355.375 msecs\"\n;;=> 1000000", "user": "540e0637e4b0addc1aec6717"}, {"problem": 22, "code": "(partial reduce (fn [x y] (inc x)) 0)", "user": "540e17c3e4b0addc1aec6719"}, {"problem": 22, "code": "(fn cnt [s]\n  (if (seq s)\n    (inc (cnt (next s)))\n    0\n   )\n)", "user": "54067352e4b0addc1aec669f"}, {"problem": 22, "code": "#(loop [coll %1 n 0]\n    (if (nil? (first coll))\n      n\n      (recur (rest coll) (inc n))))", "user": "540e97f9e4b0addc1aec671f"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "53fc4abae4b0de5c4184859b"}, {"problem": 22, "code": "(fn cnt [x]\n  (if (= (first x) nil)\n    0\n    (inc (cnt (rest x)))))", "user": "540ed3a7e4b0addc1aec6722"}, {"problem": 22, "code": "#(reduce (fn add-one [total b] (+ 1 total)) 0 %)", "user": "540ef409e4b0addc1aec6723"}, {"problem": 22, "code": "(fn [s] (reduce (fn [cnt, el] (inc cnt)) 0 s))", "user": "540efe2ee4b0addc1aec6724"}, {"problem": 22, "code": "(fn mycount [l]\n  (if (= l '())\n    0\n    (+ 1 (mycount (rest l)))\n  )\n)", "user": "540f09b9e4b0addc1aec6725"}, {"problem": 22, "code": "(fn [x] (alength (into-array Object x)))", "user": "540f2b31e4b0addc1aec6726"}, {"problem": 22, "code": "(fn [coll] (reduce + (map (fn [x] 1) coll)))", "user": "540f2c48e4b0addc1aec6727"}, {"problem": 22, "code": "(fn [xs] (apply + (map (fn [x] 1) xs)))", "user": "540d5ab9e4b0addc1aec670f"}, {"problem": 22, "code": "(fn [lst] (loop [i lst cnt 0] (cond (empty? i) cnt :t (recur (rest i)(inc cnt)))))", "user": "53a899e0e4b047364c04442b"}, {"problem": 22, "code": "#(reduce (fn [acc e] (inc acc)) 0 %)", "user": "540f57f6e4b0addc1aec672b"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5409a4fee4b0addc1aec66e0"}, {"problem": 22, "code": "(fn countSeq [s]\n  (if (empty? s)\n  0\n  (+ 1 (countSeq (rest s)))))", "user": "540c288ae4b0addc1aec66ff"}, {"problem": 22, "code": "#(reduce (fn [acc e] (inc acc)) 0 %)", "user": "53cf1648e4b00fb29b2212fa"}, {"problem": 22, "code": "(fn [coll]\n    (loop [remain coll\n           number 0]\n      (if (empty? remain)\n        number\n        (recur (rest remain) (+ number 1)))))", "user": "540f3b4ee4b0addc1aec6729"}, {"problem": 22, "code": "#(reduce (fn[x y](inc x)) 0 %)", "user": "54103c69e4b01498b1a719a4"}, {"problem": 22, "code": "(fn [l]\n  (loop [remaining l cnt 0]\n    (if (empty? remaining) cnt\n      (recur (rest remaining) (inc cnt)))))", "user": "5409f8eae4b0addc1aec66e6"}, {"problem": 22, "code": "#(reduce + (map (fn[x] 1) %))", "user": "540ff022e4b01498b1a7199a"}, {"problem": 22, "code": "(fn [xs]\n  (reduce (fn [r e] (inc r)) 0 xs))", "user": "540ff039e4b01498b1a7199b"}, {"problem": 22, "code": "(fn asd [x] (if (= '() x) 0 (inc (asd (drop 1 x)))))", "user": "541074f1e4b01498b1a719ac"}, {"problem": 22, "code": "#((fn [total sequ] (if (= () sequ) total (recur (inc total) (rest sequ)))) 0 %)", "user": "541067c0e4b01498b1a719a8"}, {"problem": 22, "code": "(fn [x]  (reduce (fn [y z] (+ y 1)) (map (fn [a] 1) x)))", "user": "5411b0ede4b01498b1a719ca"}, {"problem": 22, "code": "(fn [s] (reduce + (map (fn [x] 1) s)))", "user": "540b4c4de4b0addc1aec66f6"}, {"problem": 22, "code": "reduce (fn [x y] (inc x)) 0", "user": "5286a2a9e4b0239c8a67ae1e"}, {"problem": 22, "code": "(fn [z] (reduce (fn [x y] (+ 1 x)) 0 z))", "user": "54125062e4b01498b1a719d2"}, {"problem": 22, "code": "reduce (fn [n _] (inc n)) 0", "user": "54126d0ce4b01498b1a719d5"}, {"problem": 22, "code": "(fn [seqs]\n  (letfn [(get-elem-num [lst n]\n                        (if (empty? lst) n\n                          (get-elem-num (rest lst) (inc n))))]\n    (get-elem-num seqs 0)))", "user": "531571ece4b08068f379ed27"}, {"problem": 22, "code": "(fn [col] \n  (loop [col col\n         cnt 0]\n    (let [first (first col)\n          rest (rest col)]\n    \t(if (nil? first)\n      \t\tcnt\n      \t\t(recur rest (inc cnt))))))", "user": "53161a56e4b08068f379ed3e"}, {"problem": 22, "code": "(fn [lst] (reduce + (map (fn [x] 1) lst)))", "user": "5412ef7ee4b01498b1a719da"}, {"problem": 22, "code": "(fn ! [n] (if (= '() n) 0 (inc (! (rest n)))))", "user": "53ff8c31e4b0de5c41848603"}, {"problem": 22, "code": "(fn foo [xs] (if (empty? xs) 0 (+ 1 (foo (rest xs)))))", "user": "54133900e4b01498b1a719de"}, {"problem": 22, "code": "#(.size (vec %))", "user": "54139cd4e4b01498b1a719e3"}, {"problem": 22, "code": "#(reduce\n  (fn [c _] (inc c))\n  0\n  %)", "user": "52814e97e4b0757a1b171428"}, {"problem": 22, "code": "(fn length [[f & r]]\n  (if (nil? f)\n     0 \n    (if (empty? r)\n      1 \n      (+ 1 (length r))\n    )\n   )\n  )", "user": "54100c73e4b01498b1a7199e"}, {"problem": 22, "code": "(fn [x] (reduce + (map (fn [z] 1) x)))", "user": "541475afe4b01498b1a719eb"}, {"problem": 22, "code": "#(apply + (map (fn [_] 1) %))", "user": "52541fe6e4b0541d1855b964"}, {"problem": 22, "code": "#(reduce (fn [n _] (inc n)) 0 %)", "user": "54157dace4b01498b1a719f4"}, {"problem": 22, "code": "#(loop [data (vec %) len 0] (if (empty? data) len (recur (pop data)(inc len))))", "user": "5414dccbe4b01498b1a719f1"}, {"problem": 22, "code": "(fn [coll]\n  (reduce (fn [x _] (inc x)) 0 coll))", "user": "54159032e4b01498b1a719f5"}, {"problem": 22, "code": "(fn [coll]\n  (reduce (fn [n _] (inc n)) 0 coll))", "user": "5412d5d2e4b01498b1a719d9"}, {"problem": 22, "code": "#(->> % (map (fn [_] 1)) (reduce +))", "user": "54149f2fe4b01498b1a719ec"}, {"problem": 22, "code": "(fn counter [sequence]\n  (reduce (fn [counter sequence]\n          (inc counter)\n          ) 0  sequence))", "user": "5415d115e4b01498b1a719f7"}, {"problem": 22, "code": "(fn [elems]\n  (loop [size 0, elems-left elems]\n    (if-not (empty? elems-left)\n      (recur (inc size) (rest elems-left))\n      size)))", "user": "5267c74be4b03e8d9a4a7183"}, {"problem": 22, "code": "(fn mycount ([s] (mycount s 0)) \n            ([s acc] \n              (if (seq s) (mycount (rest s) (+ acc 1)) acc)\n              ))", "user": "54165291e4b01498b1a719fb"}, {"problem": 22, "code": "reduce (fn [z a] (inc z)) 0", "user": "541096bde4b01498b1a719b2"}, {"problem": 22, "code": "(fn abc [s] \n  (if (empty? s) \n    0 \n    (+ 1 (abc (rest s)))))", "user": "5413adfee4b01498b1a719e4"}, {"problem": 22, "code": "(fn my-count\n  ([coll] (my-count coll 0))\n  ([coll acc]\n   (if (empty? coll)\n     acc\n     (my-count (rest coll) (inc acc)))))", "user": "54125eeee4b01498b1a719d3"}, {"problem": 22, "code": "(fn new-count [s]\n  ((fn counter [s i]\n     (if (empty? s)\n       i\n       (counter (rest s) (+ i 1)))) s 0))", "user": "541709b0e4b01498b1a71a06"}, {"problem": 22, "code": "(fn count-p [seqz] (if (not (empty? seqz)) (+ 1 (count-p (rest seqz))) 0))", "user": "5414b7c4e4b01498b1a719ed"}, {"problem": 22, "code": "(fn length [col]\n\t(if (empty? col) 0 (+ 1 (length (rest col))))\n  )", "user": "541404c2e4b01498b1a719e7"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5417385fe4b01498b1a71a08"}, {"problem": 22, "code": "#(reduce + (map (fn [_] 1) %))", "user": "541619e8e4b01498b1a719f9"}, {"problem": 22, "code": "(fn tc [col]\n  (loop [loopcol col\n         curcount 0]\n    (if (empty? loopcol)\n      curcount\n      (recur (rest loopcol) (inc curcount)))))", "user": "54178782e4b01498b1a71a0c"}, {"problem": 22, "code": "(fn [x] (inc (first (last (map-indexed vector x)))))", "user": "54180369e4b01498b1a71a13"}, {"problem": 22, "code": "(fn [seq1] (reduce + (map (constantly 1) seq1)))", "user": "53e92f82e4b036ad0777e49d"}, {"problem": 22, "code": "#(reduce (fn [n s] (inc n)) 0 %)", "user": "5416aacce4b01498b1a719ff"}, {"problem": 22, "code": "#(apply + (map (fn [_] 1) %))", "user": "54187e84e4b01498b1a71a1b"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "51414a81e4b03d51af0d04ed"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "4ef7f938535dced4c769f25a"}, {"problem": 22, "code": "(fn [coll] (loop [lst coll cnt 0]\n             (if (empty? lst) cnt\n              (recur (rest lst) (inc cnt)) )))", "user": "54199df6e4b01498b1a71a4b"}, {"problem": 22, "code": "(fn [x] (reduce + (map(fn [y] 1) x)))", "user": "541adc98e4b01498b1a71a5e"}, {"problem": 22, "code": "(fn my-length [c]\n                ((fn my-length-iter [c n]\n                   (if (empty? c)\n                     n\n                     (recur (rest c) (inc n))))\n                 c 0))", "user": "541ae7dbe4b01498b1a71a61"}, {"problem": 22, "code": "#(.length (vec %))", "user": "541b37d2e4b01498b1a71a64"}, {"problem": 22, "code": "(fn cnt [coll] (if (empty? coll) 0 (+ 1 (cnt (rest coll)))))", "user": "541ad1c1e4b01498b1a71a5c"}, {"problem": 22, "code": "(fn the-count [a]\n  (if (empty? a)\n    0\n    (+ 1 (the-count (rest a)))))", "user": "541b41d1e4b01498b1a71a65"}, {"problem": 22, "code": "(fn [x] (reduce (fn [x y] (+ x 1)) 0 x))", "user": "541c07e7e4b01498b1a71a6f"}, {"problem": 22, "code": "(fn [x] (loop [l x n 0]\n          (if (empty? l)\n            n\n           \t(recur (rest l) (+ n 1)))))", "user": "541c2ae0e4b01498b1a71a71"}, {"problem": 22, "code": "(fn [xs]\n  (loop [work xs\n         acc 0]\n    (if (empty? work)\n      acc\n      (recur (rest work) (inc acc)))))", "user": "540961e9e4b0addc1aec66db"}, {"problem": 22, "code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "5416dce6e4b01498b1a71a04"}, {"problem": 22, "code": "(fn [sq]\n  (reduce (fn [v _] (inc v)) 0 sq))", "user": "541c516ae4b01498b1a71a73"}, {"problem": 22, "code": "(fn [l] \n  (reduce (fn [a b] (+ a 1)) 0 l))", "user": "541c47bbe4b01498b1a71a72"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "541c5718e4b01498b1a71a74"}, {"problem": 22, "code": "(fn [l] (reduce (fn [a b] (+ a b))\n         (map (fn [e] (+ 1)) l))\n  )", "user": "541c1e46e4b01498b1a71a70"}, {"problem": 22, "code": "(fn cnt [xs] (if (empty? xs) 0 (inc (cnt (rest xs)))))", "user": "541c6489e4b01498b1a71a76"}, {"problem": 22, "code": "(fn [inlist]\n  (loop [l inlist acc 0]\n    (if (empty? l)\n      acc\n      (recur (rest l) (+ 1 acc))\n      )\n    )\n  )", "user": "4ed82830535d10e5ff6f52f7"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "54117417e4b01498b1a719c5"}, {"problem": 22, "code": "reduce (fn [x y] (inc x)) 0", "user": "52527f7ce4b0541d1855b8c4"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "541df755e4b01498b1a71a88"}, {"problem": 22, "code": "(fn [coll]\n  (reduce (fn [x y] (inc x)) 0 coll))", "user": "541df619e4b01498b1a71a87"}, {"problem": 22, "code": "reduce (fn [x,y] (+ x 1)) 0", "user": "541d2594e4b01498b1a71a7c"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "541e2ff8e4b01498b1a71a8a"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %1)", "user": "51ba3ac0e4b0fe3ecfb4642a"}, {"problem": 22, "code": "(fn [xs] (reduce (fn [a x] (+ 1 a) )0 xs))", "user": "541168dee4b01498b1a719c3"}, {"problem": 22, "code": "(fn [n] (loop [lst n acc 0]\n          (cond\n           (empty? lst) acc\n           :else (recur (rest lst) (inc acc)))))", "user": "541df0b5e4b01498b1a71a86"}, {"problem": 22, "code": "(fn [x] (reduce (fn [a b] (inc a)) 0 x))", "user": "541ef7e2e4b01498b1a71a92"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "541f5b37e4b01498b1a71a97"}, {"problem": 22, "code": "(fn my-count\n  ([coll] (my-count coll 0))\n  ([coll acc]\n   (if (empty? coll)\n     acc\n     (recur (rest coll) (inc acc)))))", "user": "541f6bc0e4b01498b1a71a98"}, {"problem": 22, "code": "#(reduce + (map (fn [_] 1) %))", "user": "54084089e4b0addc1aec66c7"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "541fcf1ee4b01498b1a71a9c"}, {"problem": 22, "code": "(fn mycnt\n  [coll]\n  (loop [[first & rest] coll\n         cnt 1]\n    (if (nil? rest)\n      cnt\n      (recur rest (inc cnt)))))", "user": "542098afe4b01498b1a71aa7"}, {"problem": 22, "code": "#(reduce + (map (fn one [x] 1) %))", "user": "541cf6dfe4b01498b1a71a7a"}, {"problem": 22, "code": "(fn [s]\n  (loop [coll s acc 0]\n    (if (empty? coll)\n      acc\n      (recur (rest coll) (inc acc)))))", "user": "51cbee15e4b08d8387cbede5"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "53c67bd3e4b00fb29b22129a"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %1))", "user": "5421f861e4b01498b1a71abc"}, {"problem": 22, "code": "(fn [x] (reduce (fn [c _] (inc c)) 0 x))", "user": "54194782e4b01498b1a71a29"}, {"problem": 22, "code": "(fn count_ [x]\n    (loop [col x\n             n 0]\n        (if (= () col)\n            n\n            (recur (rest col) (+ 1 n)))))", "user": "54213a8fe4b01498b1a71aaf"}, {"problem": 22, "code": "#(reduce + (map (fn [_] 1) %))", "user": "54227fc6e4b01498b1a71ac0"}, {"problem": 22, "code": "(fn countit \n  ([xs] (countit xs 0))\n  ([xs n] \n  \t(\n     if (= xs []) n (countit (rest xs) (inc n))\n    )\n  )\n)", "user": "516ee939e4b06aac486e5b34"}, {"problem": 22, "code": "#(reduce + (map {nil 1} (map {} %)))", "user": "5421cd6be4b01498b1a71ab7"}, {"problem": 22, "code": "(fn my-count [seq]\n    (if (empty? seq)\n      0\n      (inc (my-count (rest seq)))))", "user": "52b2f9cae4b0c58976d9acfb"}, {"problem": 22, "code": "(fn[s] (reduce (fn [x y] (+ x 1)) 0 s))", "user": "54240d89e4b01498b1a71ad8"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "53ef0df0e4b0d648e757f4d2"}, {"problem": 22, "code": "reduce (fn [x y] (+ x 1)) 0", "user": "5424608ce4b01498b1a71ae9"}, {"problem": 22, "code": "(fn [coll]\n  (loop [c coll\n         cnt 0]\n    (if (seq c)\n      (recur (rest c) (+ cnt 1))\n      cnt)))", "user": "54246fcce4b01498b1a71aed"}, {"problem": 22, "code": "reduce (fn [a b] (+ a 1)) 0", "user": "54246d6de4b01498b1a71aec"}, {"problem": 22, "code": "(fn count_ [x] (cond (or (= x '())(= x [])) 0\n                        (string? x) (count_ (apply list (concat x)))\n                        :else (+ 1 (count_ (pop x)))))", "user": "54239171e4b01498b1a71ad2"}, {"problem": 22, "code": "(fn [x] (reduce (fn [n el] (+ 1 n)) 0 x))", "user": "5424f5c3e4b01498b1a71b06"}, {"problem": 22, "code": "(fn cnt [coll]\n  (if (next coll) (+ 1 (cnt (next coll)))\n    1))", "user": "5421f74fe4b01498b1a71abb"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5410cb36e4b01498b1a719b8"}, {"problem": 22, "code": "#(reduce (fn [x y] (+ 1 x)) 0 (seq %))", "user": "54185dc3e4b01498b1a71a19"}, {"problem": 22, "code": "(fn [seq] (inc (first (last (map-indexed vector seq)))))", "user": "5422e0cce4b01498b1a71ac8"}, {"problem": 22, "code": "(fn count-elements\n  ([lst num-elements] \n   (if (= nil (first lst))\n     num-elements \n     (count-elements (rest lst) (inc num-elements)) ))\n  ([lst] (count-elements lst 0)))", "user": "54257124e4b01498b1a71b09"}, {"problem": 22, "code": "#(inc (first (last (map-indexed list %))))", "user": "541e774de4b01498b1a71a8d"}, {"problem": 22, "code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "54259bbfe4b01498b1a71b0f"}, {"problem": 22, "code": "(fn [boobies]\n  (loop [x boobies acount 1]\n    (if (empty? (rest x))\n      acount\n      (recur (rest x) (+ acount 1))\n      )\n    )\n  )", "user": "5425d65ce4b01498b1a71b14"}, {"problem": 22, "code": "reduce (fn [n _] (inc n)) 0", "user": "5424a477e4b01498b1a71afc"}, {"problem": 22, "code": "#(reduce (fn[c _] (inc c)) 0 %)", "user": "5425d454e4b01498b1a71b13"}, {"problem": 22, "code": "(fn [xs]\n  (loop [cnt 0 ys xs]\n    (if (nil? ys)\n      cnt\n      (recur (inc cnt) (next ys)))))", "user": "5426a59ee4b01498b1a71b1b"}, {"problem": 22, "code": "(fn\n  [sq]\n  (if (empty? sq)\n    0\n\t  (loop [[hed & rst] sq\n    \t     cnt 1]\n\t    (if (empty? rst)\n\t      cnt\n\t      (recur rst (inc cnt))))))", "user": "5426bd40e4b01498b1a71b1c"}, {"problem": 22, "code": "(partial reduce (fn [counter _]\n                  (inc counter))\n                0)", "user": "5424c523e4b01498b1a71b03"}, {"problem": 22, "code": "(fn [coll]\n  (loop [x coll i 0]\n    (if (empty? x)\n      i\n      (recur (rest x) (inc i)))))", "user": "542769f8e4b01498b1a71b24"}, {"problem": 22, "code": "#(reduce + (map (fn [n] 1) %))", "user": "541e6d40e4b01498b1a71a8c"}, {"problem": 22, "code": "(fn  [s]                                                                                                                                                        \n        (loop [a s n 0]                                                                                                                                                    \n          (if (= a ())                                                                                                                                                     \n            n                                                                                                                                                              \n            (recur (rest a) (inc n)))))", "user": "5423dc6ae4b01498b1a71ad5"}, {"problem": 22, "code": "(fn count-seq [xs]\n  ((comp #(reduce + %) #(map (fn[x] 1) %)) xs))", "user": "5427fcc8e4b01498b1a71b29"}, {"problem": 22, "code": "(fn [xs] \n    (loop [xs xs\n           acc 0]\n      (if (empty? xs) \n        acc \n        (recur (rest xs) (inc acc)))))", "user": "5428099ae4b01498b1a71b2c"}, {"problem": 22, "code": "#(alength (to-array %))", "user": "54266c56e4b01498b1a71b18"}, {"problem": 22, "code": "(fn my_count [lst]\n  (if (= () lst)\n    0\n    (+ 1 (my_count (rest lst))) ))", "user": "54258e71e4b01498b1a71b0e"}, {"problem": 22, "code": "#(loop [l (vec %)\n        c 0]\n   (if (empty? l)\n     c\n     (recur (next l)\n            (+ c 1)\n            )\n     )\n   )", "user": "53d6bc2fe4b0e771c302545a"}, {"problem": 22, "code": "#(reduce + (map (fn[x] 1) %))", "user": "53e32cf7e4b036ad0777e3fd"}, {"problem": 22, "code": "(fn a[x]\n  (\n   if (empty? x)\n   0\n   (+ 1 (a (rest x)))\n  )\n)", "user": "54283a7ae4b01498b1a71b2f"}, {"problem": 22, "code": "#(loop [s %1 l 0] (if (= () s) l (recur (rest s) (inc l))))", "user": "54286beee4b01498b1a71b31"}, {"problem": 22, "code": "(partial #(if(empty? %2)\n   %\n   (recur (inc %) (rest %2))) 0)", "user": "520fca70e4b080a8d9b9d631"}, {"problem": 22, "code": "#(reduce (fn [x y] (+ x 1)) 0 %)", "user": "5429986ce4b01498b1a71b3b"}, {"problem": 22, "code": "#(reduce + ((partial map (fn [x] 1)) %))", "user": "54299d4be4b01498b1a71b3d"}, {"problem": 22, "code": "(fn [lst] (reduce \n    (fn [c _] (inc c))\n     0 lst))", "user": "54244c77e4b01498b1a71ae4"}, {"problem": 22, "code": "(fn [x]\n  (loop [x x, acc 0]\n  \t(if (empty? x)\n      acc\n      (recur (rest x) (+ acc 1)))))", "user": "542ab1afe4b01498b1a71b48"}, {"problem": 22, "code": "(fn \n [n coll]\n (if (first coll)\n  (recur (inc n) (rest coll))\n  n)) 0", "user": "54258a7fe4b01498b1a71b0c"}, {"problem": 22, "code": "(fn [v0]\n  (loop [v v0 c 0]\n   (if (first v)\n     (recur (rest v) (inc c))\n    c\n    )))", "user": "5412646de4b01498b1a719d4"}, {"problem": 22, "code": "#(.size (vec %))", "user": "542af3a2e4b0dad94371f285"}, {"problem": 22, "code": "(fn [z] (reduce (fn [x y] (+ x 1)) 0 z))", "user": "542aed70e4b0dad94371f284"}, {"problem": 22, "code": "#(reduce + (map (fn [el] 1) %))", "user": "539a38dae4b0b51d73faaf10"}, {"problem": 22, "code": "(fn aaa [lister]\n  (if\n    (not= (first lister) nil)\n    (inc (aaa (drop 1 lister)))\n    0))", "user": "54196d63e4b01498b1a71a34"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "54290a64e4b01498b1a71b36"}, {"problem": 22, "code": "(fn f [X] (if (= '() X) 0 (inc (f (rest X)))))", "user": "542a348be4b01498b1a71b3f"}, {"problem": 22, "code": "(fn mycount [x] (if (nil? x) 0 (+ 1 (mycount (next x)))))", "user": "5422e975e4b01498b1a71ac9"}, {"problem": 22, "code": "(fn [coll]\n  (loop [incoll coll\n         acc 0]\n    (if (empty? incoll)\n      acc\n      (recur (rest incoll) (inc acc)))))", "user": "540e8d13e4b0addc1aec671e"}, {"problem": 22, "code": "(fn get-count [x]\n  (reduce + (map (constantly 1) x)))", "user": "542c026ae4b0dad94371f29a"}, {"problem": 22, "code": "#(->> % (map (constantly 1)) (apply +))", "user": "542c22bde4b0dad94371f29e"}, {"problem": 22, "code": "(fn [c] \n  (loop [[h & t] c\n         cnt 0]\n    (if (nil? t) \n      (inc cnt)\n      (recur t (inc cnt)))))", "user": "542c5129e4b0dad94371f2a3"}, {"problem": 22, "code": "(fn [x] \n  (reduce + 0 \n          (map (fn [y] 1) x)))", "user": "542c858ae4b0dad94371f2a8"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "541735b3e4b01498b1a71a07"}, {"problem": 22, "code": "(fn my-count [xs]\n\t(if (empty? xs)\n\t\t0\n\t\t(+ 1 (my-count (rest xs)))))", "user": "4ffc9c4ae4b0678c553fc3dd"}, {"problem": 22, "code": "(fn [coll]\n  (loop [iteration 0\n         [head & tail] coll]\n    (if (empty? tail)\n      (inc iteration)\n      (recur (inc iteration) tail))))", "user": "542cc164e4b0dad94371f2ad"}, {"problem": 22, "code": "(fn myCount [x] (if (seq x) (+ 1 (myCount (drop 1 x))) 0))", "user": "542c1f73e4b0dad94371f29d"}, {"problem": 22, "code": "(fn cnt [xs] (if (seq xs) (inc (cnt (rest xs))) 0))", "user": "542d2385e4b0dad94371f2b2"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "54280188e4b01498b1a71b2a"}, {"problem": 22, "code": "(fn [lst] (reduce + (map (fn [i] 1) lst)))", "user": "51e58104e4b0efabf93c02cd"}, {"problem": 22, "code": "#(reduce (fn [i _] (inc i)) 0 %)", "user": "542d8ba4e4b0dad94371f2b8"}, {"problem": 22, "code": "#(loop [n 1 r (rest %)] (if (empty? r) n (recur (inc n) (rest r))))", "user": "542db41be4b0dad94371f2bb"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "542de19ae4b0dad94371f2bf"}, {"problem": 22, "code": "#(reduce + (map (fn [u] 1) %))", "user": "542da97ae4b0dad94371f2ba"}, {"problem": 22, "code": "#(loop [[head & tail] %\n          x 0]\n   (if (empty? tail)\n     (+ x 1)\n     (recur tail (+ x 1))))", "user": "542ce413e4b0dad94371f2ae"}, {"problem": 22, "code": "(fn [s] \n   (letfn [(fib\n            [f r cnt]\n            (if (nil? f)\n            cnt\n            (recur (first r) (rest r) (inc cnt))\n           ))]\n (fib (first s) (rest s) 0)\n ))", "user": "541ddadbe4b01498b1a71a84"}, {"problem": 22, "code": "reduce (fn [a _] (inc a)) 0", "user": "542f1cade4b0dad94371f2ce"}, {"problem": 22, "code": "#(reduce (fn [x y] (+ x 1)) 0 %)", "user": "542edb4ae4b0dad94371f2c8"}, {"problem": 22, "code": "#(alength (to-array %))", "user": "542cb9d0e4b0dad94371f2ac"}, {"problem": 22, "code": "#(.size (vec %))", "user": "53a01fb1e4b0ca733b9744a6"}, {"problem": 22, "code": "reduce #(do %2 (+ % 1)) 0", "user": "542f574be4b0dad94371f2d0"}, {"problem": 22, "code": "#(loop [bar % cnt 0]\n\t\t(if (= (first bar) nil)\n\t\t\tcnt\n\t\t\t(recur (rest bar) (inc cnt))))", "user": "54296802e4b01498b1a71b38"}, {"problem": 22, "code": "(fn my-count [S]\n  (loop [s S c 0]\n    (if (empty? s)\n      c\n      (recur (rest s) (inc c)))))", "user": "542f0a3be4b0dad94371f2cd"}, {"problem": 22, "code": "#(reduce + (map (fn[_] 1) %))", "user": "542fa3f0e4b0dad94371f2d4"}, {"problem": 22, "code": "(fn self ([x y] (cond (= (next x) nil) y :else (self (next x) (+ y 1)))) ([x] (self x 1)))", "user": "542c6403e4b0dad94371f2a6"}, {"problem": 22, "code": "(fn cnt [x] \n  (reduce (fn [y _] (+ y 1)) 0 x))", "user": "542c2de0e4b0dad94371f29f"}, {"problem": 22, "code": "#(apply + (map (fn [x] 1) %))", "user": "5360e9ade4b0243289761e3b"}, {"problem": 22, "code": "(fn [col] (reduce (fn [val i] (+ val 1)) 0 col))", "user": "5430a16de4b0dad94371f2da"}, {"problem": 22, "code": "(fn [seq]\n   (loop [c 0\n          s seq]\n     (if s\n       (recur (inc c) (next s))\n       c)))", "user": "542b764ae4b0dad94371f28d"}, {"problem": 22, "code": "(fn mycount [mycoll] (reduce + 0 (map #(if true 1 %) mycoll)))", "user": "542fa0dde4b0dad94371f2d2"}, {"problem": 22, "code": "(fn cunt [coll] \n  (loop [iteration 1\n         [x & xs] coll]\n    (if (empty? xs)\n      iteration\n      (recur (inc iteration) xs))))", "user": "54311d60e4b0dad94371f2e2"}, {"problem": 22, "code": "(fn [ps]\n  (if (empty? ps)\n    0\n    (loop [[x & xs] ps n 1]\n      (if (empty? xs)\n        n\n        (recur xs (+ 1 n))))))", "user": "54312081e4b0dad94371f2e3"}, {"problem": 22, "code": "(fn [c] (reduce + (map (fn [& _] 1) c)))", "user": "53f49f9be4b0db01ade6f9c3"}, {"problem": 22, "code": "(fn [sqnc]\n   (reduce\n    (fn [cnt _]\n      (+ 1 cnt))\n    0 sqnc))", "user": "5430b3b6e4b0dad94371f2db"}, {"problem": 22, "code": "(fn [llist] \n  [llist] \n  (loop [iter 1 [firstele & ilist] llist]\n    (if (empty? ilist)\n      iter\n      (recur (inc iter) ilist))))", "user": "543154e9e4b0dad94371f2e5"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "542789efe4b01498b1a71b25"}, {"problem": 22, "code": "(fn my-count [[head & tail]]\n  (if tail\n    (inc (my-count tail))\n    1))", "user": "542cb77ae4b0dad94371f2aa"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "54324be1e4b0dad94371f2ed"}, {"problem": 22, "code": "(fn [seq]\n  (loop [s seq\n         cnt 0]\n    (if (empty? s)\n      cnt\n      (recur (rest s) (inc cnt)))))", "user": "543168f5e4b0dad94371f2e6"}, {"problem": 22, "code": "(fn [sq] (reduce (fn [x y] (+ x 1)) 0 sq))", "user": "543245bae4b0dad94371f2ec"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "534678b9e4b084c2834f4a3d"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "543272b8e4b0dad94371f2ef"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "540f8bcfe4b01498b1a71996"}, {"problem": 22, "code": "(fn countElements [x] \n  (if (= x [])\n    0\n    (+ 1 (countElements (rest x)))))", "user": "54336443e4b0b6b47310fcde"}, {"problem": 22, "code": "reduce (fn [i coll] (inc i)) 0", "user": "543366dde4b0b6b47310fcdf"}, {"problem": 22, "code": "(fn [lst]\n  (loop [j 0 q lst]\n    (if (empty? q)\n      j\n      (recur (inc j) (rest q) ))))", "user": "53dfe311e4b0d874e779ae47"}, {"problem": 22, "code": "(fn [n]\n    (loop [listr n total 0]\n       (if (empty? listr)\n            total\n          (recur (drop 1 listr) (inc total)))))", "user": "542baf7ce4b0dad94371f291"}, {"problem": 22, "code": "(fn length [l]\n  (if (empty? l)\n    0\n    (+ 1 (length (rest l)))))", "user": "5433a07be4b0b6b47310fce0"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5433a9c5e4b0b6b47310fce1"}, {"problem": 22, "code": "#(apply + (map (fn [x] 1) %))", "user": "5433c591e4b0b6b47310fce3"}, {"problem": 22, "code": "(fn [data] (reduce + (map (fn [val] 1) data)))", "user": "542130cee4b01498b1a71aae"}, {"problem": 22, "code": "(fn [coll]\n  (loop [sum 0 coll coll]\n    (if (not (empty? coll))\n      (recur (inc sum) (rest coll))\n      sum)))", "user": "5433eecae4b0b6b47310fce6"}, {"problem": 22, "code": "(fn [s] (reduce + (map (fn [_] 1) s)))", "user": "54344721e4b0b6b47310fcea"}, {"problem": 22, "code": "#(loop [l % n 0] (if (empty? l) n (recur (rest l) (inc n))))", "user": "54349368e4b0b6b47310fcf1"}, {"problem": 22, "code": "(fn [x] (alength (into-array x)))", "user": "5433d3ebe4b0b6b47310fce4"}, {"problem": 22, "code": "(fn [coll]\n  (loop [coll coll\n         c 0]\n    (if (= '() coll)\n    c\n    (recur (rest coll) (inc c)))))", "user": "54297741e4b01498b1a71b39"}, {"problem": 22, "code": "#(reduce (fn\n           [x _]\n           (inc x))\n         0\n         %)", "user": "54107c96e4b01498b1a719ae"}, {"problem": 22, "code": "(fn [coll] \n  (reduce + (vals (frequencies coll))))", "user": "542c44f8e4b0dad94371f2a1"}, {"problem": 22, "code": "( fn myCount [sq] ( if( = nil (first sq)) 0 (( fn myCountRecurse [sq, x] ( if( = nil (first sq)) x (myCountRecurse (rest sq) (+ x 1) ) ) ) (rest sq) 1) ) )", "user": "4fc4f073e4b081705acca35b"}, {"problem": 22, "code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "5433e45ee4b0b6b47310fce5"}, {"problem": 22, "code": "(fn [xs] \n  (loop [xs xs n 0]\n    (if (empty? xs)\n      n\n      (recur (rest xs) (+ 1 n)))))", "user": "54366f1de4b032a45b8692fb"}, {"problem": 22, "code": "(fn length \n  [s]\n  (if (empty? s)\n    0\n    (+ 1 (length (rest s)))\n  )\n)", "user": "542e8011e4b0dad94371f2c4"}, {"problem": 22, "code": "#(loop [i 1 l %]\n   (if (next l) (recur (inc i) (next l)) i))", "user": "5434b344e4b0b6b47310fcf3"}, {"problem": 22, "code": ";(fn cnt [l] (if (first l) (+ 1 (cnt (rest l))) 0))\n#(reduce (fn [x _] (+ 1 x)) 0 %)", "user": "5436e0a8e4b032a45b8692fd"}, {"problem": 22, "code": "(fn [x] (apply + (map (fn [x] 1) x)))", "user": "543496e1e4b0b6b47310fcf2"}, {"problem": 22, "code": "(fn [a-seq]\n  (letfn [(count-helper [my-seq n]\n                        (if (= nil (first my-seq))\n                          n\n                          (count-helper (rest my-seq) (inc n))))]\n    (count-helper a-seq 0)))", "user": "53e3e353e4b036ad0777e406"}, {"problem": 22, "code": "(fn [x]\n (reduce (fn [x y]\n  (+ x 1)) 0 x))", "user": "54377355e4b032a45b869305"}, {"problem": 22, "code": "#(loop [r %\n         cn 0]\n         (if (empty? r)\n         cn\n         (recur (rest r) (inc cn))))", "user": "5432df22e4b0dad94371f2f5"}, {"problem": 22, "code": "(fn [lst]\n  (loop [l lst c 0]\n    (if (empty? l) c\n      (recur (drop (+ c 1) lst)(inc c)))))", "user": "543823f1e4b032a45b869311"}, {"problem": 22, "code": "(fn counter [s]\n  (if (= s '())\n    0\n    (+ 1 (counter (rest s)))))", "user": "5438795ee4b032a45b869313"}, {"problem": 22, "code": "(fn [y] ((fn [x n] (if (nil? (seq (rest x))) n (recur (rest x) (inc n)))) y 1))", "user": "543897e7e4b032a45b869314"}, {"problem": 22, "code": "(fn get-length [x]\n  (if (empty? x)\n    0\n    (+ 1 (get-length (rest x)))))", "user": "51eda45ce4b0bb507043159b"}, {"problem": 22, "code": "(partial reduce (fn [v s] (inc v)) 0)\n         ;(fn [coll](inc (last( interleave coll (range)))))", "user": "54380631e4b032a45b86930f"}, {"problem": 22, "code": "(fn [coll] \n   (reduce (fn [cnt el] (inc cnt)) 0 coll))", "user": "54393c3fe4b032a45b86931a"}, {"problem": 22, "code": "#(reduce (fn [n _] (inc n)) 0 %)", "user": "54397533e4b032a45b86931d"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "540b922de4b0addc1aec66fc"}, {"problem": 22, "code": "(fn [sequences]\n  (loop [iteration 1\n         [x & xs] sequences]\n    (if (empty? xs)\n      iteration\n      (recur (inc iteration) xs))))", "user": "52561295e4b0541d1855ba03"}, {"problem": 22, "code": "(fn \n  [mylist] \n  (loop \n    [templist mylist currentCount 0] \n    (if (next templist) (recur (next templist) (+ currentCount 1)) (if (first templist) (+ currentCount 1) currentCount))))", "user": "5439c3cee4b032a45b869323"}, {"problem": 22, "code": "reduce (fn [a b] (inc a)) 0", "user": "53531724e4b084c2834f4af9"}, {"problem": 22, "code": "(fn [coll] (reduce (fn [x y] (+ x 1)) 0 coll))", "user": "543994cbe4b032a45b86931f"}, {"problem": 22, "code": "(fn [coll] (alength (to-array coll)))", "user": "543b5bc6e4b032a45b86932d"}, {"problem": 22, "code": "(fn [s] ((fn [acc s] (if (empty? s) acc (recur (inc acc) (rest s)))) 0 s))", "user": "543043dee4b0dad94371f2d8"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5437eca1e4b032a45b86930d"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "543b9f8ce4b032a45b869332"}, {"problem": 22, "code": "(fn [x] (apply + (map (fn [x] 1) x)))", "user": "543c1afce4b032a45b86933b"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5330b218e4b019098a6f8b61"}, {"problem": 22, "code": "(fn [s] (reduce (fn [x ?] (+ x 1)) 0 s))", "user": "54305256e4b0dad94371f2d9"}, {"problem": 22, "code": "#(reduce (fn [cuml c] (+ 1 cuml)) 0 %)", "user": "543a68d3e4b032a45b869326"}, {"problem": 22, "code": "(fn [xs]\n  (loop [xs xs\n         n 0]\n    (if (empty? xs)\n      n\n      (recur (rest xs) (inc n)))))", "user": "543c39e0e4b032a45b86933d"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "543cea42e4b032a45b869343"}, {"problem": 22, "code": "(fn kount\n  ([s] (kount s 0))\n  ([s n] (if (empty? s) n \n         (kount (rest s) (+ n 1))\n         ))\n  )", "user": "543cf826e4b032a45b869345"}, {"problem": 22, "code": "(fn [coll] (reduce (fn [v1 v2] (inc v1)) 0 coll))", "user": "543bd52be4b032a45b869336"}, {"problem": 22, "code": "(fn [x] (+ 1 (.lastIndexOf (vec x) (last (vec x)))))", "user": "543bce4fe4b032a45b869335"}, {"problem": 22, "code": "(fn my-count [lista]\n  (if (= (rest lista) []) \n    1 \n    (inc (my-count (rest lista)))))", "user": "543d5c61e4b032a45b86934d"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "543c1b6fe4b032a45b86933c"}, {"problem": 22, "code": "(fn [coll] (loop [cnt 0 rem (vec coll)] (if (empty? rem) cnt (recur (inc cnt) (pop rem)))))", "user": "54055aa9e4b0addc1aec6665"}, {"problem": 22, "code": "(fn [lst] (reduce (fn [acc _] (+ acc 1)) 0 lst))", "user": "543d89dfe4b032a45b869350"}, {"problem": 22, "code": "(fn [coll] (loop [[f & r] coll len 0] (if (nil? f) len (recur r (inc len)))))", "user": "543c5200e4b032a45b86933e"}, {"problem": 22, "code": "#(reduce (fn [x _] (inc x)) 0 %)", "user": "51568fbae4b04360f2428e67"}, {"problem": 22, "code": "#(\n    (fn [seq acc] \n      (if (empty? seq)\n        acc\n        (recur (rest seq) (inc acc))))\n    % 0)", "user": "53342a1ce4b019098a6f8b8b"}, {"problem": 22, "code": "(fn [l]\n  (if (first l)\n    (loop [c 1 s l]\n      (println c s)\n      (if (next s)\n        (recur (inc c) (rest s))\n        c))\n    0))", "user": "539043e7e4b0b51d73faae97"}, {"problem": 22, "code": "(fn [s]\n  (loop [[f-el & t-seq] s\n         index 0]\n    (if (empty? t-seq)\n      (inc index)\n      (recur t-seq (inc index)))))", "user": "52f8db41e4b047fd55836fdc"}, {"problem": 22, "code": "(fn [s] \n  (loop [s s c 0] \n    (if-not (empty? s) \n      (recur (rest s) (inc c)) \n      c)))", "user": "5385e633e4b06839e8705f08"}, {"problem": 22, "code": "#(reduce (fn [acc elem] (inc acc)) 0 %1)", "user": "543f854fe4b032a45b86935b"}, {"problem": 22, "code": "(fn [initial-s]\n  (loop [counter 0, s initial-s]\n    (if(empty? s)\n      counter\n      (recur (inc counter) (rest s)))))", "user": "542d27a0e4b0dad94371f2b3"}, {"problem": 22, "code": "(fn [arr]\n  (reduce (fn [x y] (inc x)) 0 arr))", "user": "543b4746e4b032a45b86932c"}, {"problem": 22, "code": "#(loop [i 0 [x & xs] %1] (if (nil? x) i (recur (inc i) xs)))", "user": "5315ba94e4b08068f379ed34"}, {"problem": 22, "code": "#(reduce (fn [n e] (inc n)) 0 %)", "user": "543d07e8e4b032a45b869346"}, {"problem": 22, "code": "(fn [coll]\n  (reduce (fn [x y] (inc x)) 0 coll))", "user": "5257e13de4b0cb4875a45c99"}, {"problem": 22, "code": "(fn cnt [args]\n  (if (empty? args)\n    0\n    (+ 1 (cnt (rest args)))\n    )\n  )", "user": "5372c830e4b06d7f452d9dff"}, {"problem": 22, "code": "(partial reduce (fn [i _] (inc i)) 0)", "user": "544125ade4b032a45b86936a"}, {"problem": 22, "code": "#(apply + (map (fn [e] 1) %))", "user": "54413696e4b032a45b86936b"}, {"problem": 22, "code": "(fn cnt [coll] (reduce + (map (fn [x] 1) coll)))", "user": "54418311e4b032a45b869370"}, {"problem": 22, "code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "543fdb22e4b032a45b86935e"}, {"problem": 22, "code": "#(apply + (map (fn [_] 1) %))", "user": "53751c5ee4b06839e8705e11"}, {"problem": 22, "code": "#(reduce (fn [x _] (inc x)) 0 %1)", "user": "52a45a7be4b0c58976d9abd8"}, {"problem": 22, "code": "(fn findelements [original] (+ 1 (.lastIndexOf (vec original) (peek (vec original)))))", "user": "5441fb2ce4b032a45b869376"}, {"problem": 22, "code": "(fn my-count [col] (if (empty? col) 0 (+ 1 (my-count (rest col)))))", "user": "54427832e4b032a45b86937d"}, {"problem": 22, "code": "reduce (fn [x _] (inc x)) 0", "user": "5335cab9e4b0e30313ee6c70"}, {"problem": 22, "code": "(fn [l] (reduce + (map (constantly 1) l)))", "user": "54431b6ee4b032a45b869385"}, {"problem": 22, "code": "#(reduce (fn [sum _] (inc sum)) 0 %)", "user": "544317c8e4b032a45b869384"}, {"problem": 22, "code": "#(loop [coll %1\n         cnt 0]\n    (if (nil? (first coll))\n      cnt\n      (recur (rest coll) (inc cnt))))", "user": "50666699e4b03d366d7cb2b0"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "5443a894e4b032a45b869388"}, {"problem": 22, "code": "(fn cnt [x] (if (empty? x) 0 (+ 1 (cnt (next x)))))", "user": "543a8256e4b032a45b869327"}, {"problem": 22, "code": "reduce (fn[a,b](inc a)) 0", "user": "5443cb97e4b032a45b86938a"}, {"problem": 22, "code": "#(loop [s % a 0] (if (seq s) (recur (next s) (inc a)) a))", "user": "4f1ef6a0535d64f60314649b"}, {"problem": 22, "code": "#(loop [x %\n        counter 0]\n   (if (empty? x)\n     counter\n     (recur (rest x) (inc counter))))", "user": "535774c2e4b04ce2eb3ed27c"}, {"problem": 22, "code": "reduce (fn [x y] (inc x)) 0", "user": "5441f5e8e4b032a45b869375"}, {"problem": 22, "code": "(fn [xs]\n  (reduce (fn [x y] (inc x)) 0 xs))", "user": "54448e84e4b032a45b869393"}, {"problem": 22, "code": "(fn [l] \n  (reduce \n    (fn [m v] (+ m 1)) \n    0 l))", "user": "54448b64e4b032a45b869392"}, {"problem": 22, "code": "(fn mycount [x]\n  (let [n 0]\n    (loop [col x cnt n]\n      (if (empty? col)\n        cnt\n        (recur (rest col) (inc cnt))))))", "user": "544257b4e4b032a45b869379"}, {"problem": 22, "code": "#(reduce + (map (fn [x](if (nil? x) 0 1))%))", "user": "5444f97ee4b032a45b869395"}, {"problem": 22, "code": "(fn [x]\n  (let [s (seq x)]\n    (reduce (fn [a b] (+ a 1)) 0 s)))", "user": "53577049e4b04ce2eb3ed27b"}, {"problem": 22, "code": "reduce (fn [m i] (+ m 1)) 0", "user": "54453f83e4b032a45b86939a"}, {"problem": 22, "code": "(fn [x] (reduce + (map (constantly 1) x)))", "user": "530a6cbae4b02e82168697be"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5420c6e4e4b01498b1a71aaa"}, {"problem": 22, "code": "#(loop [seqq % cnt 0] (if (empty? seqq) cnt (recur (rest seqq) (inc cnt))))", "user": "543a84a1e4b032a45b869328"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "542ad43be4b01498b1a71b4e"}, {"problem": 22, "code": "reduce #(do %2 (inc %1)) 0", "user": "540103b8e4b0de5c4184861e"}, {"problem": 22, "code": "#(reduce (fn[x y] (inc x)) 0 %)", "user": "544623f3e4b032a45b8693a9"}, {"problem": 22, "code": "(fn [myseq]\n   (loop [theseq myseq, iteration 0]\n     (if (not (empty? theseq))\n       (recur (drop 1 theseq) (inc iteration))\n       iteration)\n     )\n   )", "user": "53f3b216e4b0742d9025b0f8"}, {"problem": 22, "code": "#(alength (to-array %))", "user": "54464734e4b032a45b8693ab"}, {"problem": 22, "code": "(fn [x] (reduce + (map (fn [_] 1) x)))", "user": "54461393e4b032a45b8693a5"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "54458995e4b032a45b86939e"}, {"problem": 22, "code": "(fn [to-count]\n  (apply +\n    (map #(first (list 1 %)) to-count)\n  )\n)", "user": "54468ebfe4b032a45b8693b1"}, {"problem": 22, "code": "#(reduce (fn [acc _] (inc acc)) 0 %)", "user": "5446c89ce4b032a45b8693b5"}, {"problem": 22, "code": "(fn foo [lst]\n  (if (= '() (rest lst))\n         1\n         (+ 1 (foo (rest lst)))\n  )\n)", "user": "543d245be4b032a45b869348"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5446ebc2e4b032a45b8693b8"}, {"problem": 22, "code": "(fn [xs]\n  (reduce (fn [acc _] (inc acc)) 0 xs))", "user": "504e0fdfe4b078edc5f593ae"}, {"problem": 22, "code": "(partial reduce (fn [x y] (inc x)) 0)", "user": "5447e08ce4b032a45b8693c3"}, {"problem": 22, "code": "(fn [col] \n  (letfn [(rt1 [ar1] 1)]\n    (apply + (map rt1 col))))", "user": "5243e37ae4b076204b44fae3"}, {"problem": 22, "code": "#(reduce (fn [acc _] (+ acc 1)) 0 %)", "user": "5448616be4b032a45b8693c9"}, {"problem": 22, "code": "(fn [coll]\n  (loop [c coll\n         accum 0]\n    (if (empty? c)\n      accum\n      (recur (rest c) (+ accum 1)))))", "user": "54487527e4b032a45b8693cc"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "54485749e4b032a45b8693c7"}, {"problem": 22, "code": "(fn my-count\n\t([x] (if (= (first x) nil) 0 (if (= (rest x) '()) 1 (my-count 1 (rest x)))))\n\t([n x] (if (= (first x) nil) n (my-count (inc n) (rest x)))))", "user": "543be8f0e4b032a45b869337"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5448f46de4b032a45b8693cf"}, {"problem": 22, "code": "(fn [x] (loop [a x i 0] (if (empty? a) i (recur (rest a) (inc i)))))", "user": "5446ea11e4b032a45b8693b7"}, {"problem": 22, "code": "(fn [lista & acc] (let [acc (or acc 0)] (if (empty? lista) acc (recur (rest lista) (inc acc)))))", "user": "5233564ae4b0f0b72fabf403"}, {"problem": 22, "code": "(fn [l] \n  (reduce + (map (fn [i] \n              \t\t1) l)))", "user": "54468fd3e4b032a45b8693b2"}, {"problem": 22, "code": "#(reduce (fn [x y] (+ x 1)) 0 %)", "user": "54497569e4b032a45b8693d2"}, {"problem": 22, "code": "#(reduce (fn [x _] (inc x)) 0 %)", "user": "53ea5851e4b036ad0777e4e4"}, {"problem": 22, "code": "reduce (fn [element_count _] (inc element_count)) 0", "user": "542b0592e4b0dad94371f286"}, {"problem": 22, "code": "(fn [data]\n  ((fn [data number]\n     (if (empty? data)\n       number\n       (recur (rest data) (+ number 1))))\n\tdata 0 ))", "user": "5425bde6e4b01498b1a71b10"}, {"problem": 22, "code": "#(reduce +  (map (fn [x] 1) %))", "user": "544ac9b5e4b0e39780006959"}, {"problem": 22, "code": "(fn [x] \n  (reduce (fn [x _] (+ x 1))  0 x)\n  )", "user": "544a049de4b0e39780006953"}, {"problem": 22, "code": "; use reduce and inc\n; This was super hard. I looked at stackoverflow.\n\n#(reduce \n  (fn [i _] ; _ is a stand-in which indicates that argument will not be used\n  \t(inc i)\n  \t) 0 %)\n\n\n; Something that occurs to me: If this were Haskell,\n;  I would've used a:as (cons) to recurse through the list.\n;  Unfortunately, this doesn't seem to work in clojure.\n;  \"Unsupported binding form: (cons a as)\"\n\n;(fn size [(cons a as)]\n;  #( \n;    (inc %)\n;    ) 0  ; Pass 0 into the inner function\n;  (size as)\n;  )\n\n;OTHER SOLUTIONS:\n\n; #(reduce (fn [x _] (+ 1 x)) 0 %) ; This is the same as mine without using inc\n\n; This one is a little hard to understand.\n; Relevant things to look at:\n;  http://blog.fogus.me/2009/09/04/understanding-the-clojure-macro/\n;  http://clojuredocs.org/clojure.core/map-indexed\n; #(-> (map-indexed list %) last first inc)", "user": "5446158ce4b032a45b8693a6"}, {"problem": 22, "code": "(fn cnt [coll] (if (empty? coll) 0 (+ (cnt (rest coll)) 1) ))", "user": "544b9df2e4b0e39780006968"}, {"problem": 22, "code": "#(reduce + (map (fn [_] 1) %))", "user": "544a5b2fe4b0e39780006956"}, {"problem": 22, "code": "(fn [lst]\n             (reduce (fn [x y] (+ x 1)) 0 lst)\n             )", "user": "543b7456e4b032a45b86932f"}, {"problem": 22, "code": "#(-> % vec .length)", "user": "544c1b05e4b0e3978000696e"}, {"problem": 22, "code": "(fn [s]\n  (reduce (fn [x _] (inc x))\n          0\n          s))", "user": "544b699ce4b0e39780006964"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "52e16face4b09f7907dd1421"}, {"problem": 22, "code": "(fn mycount [seq] (if (empty? seq) 0 (inc (mycount (rest seq)))))", "user": "544285dde4b032a45b869380"}, {"problem": 22, "code": "#(inc (last (map-indexed (fn [idx itm] idx) %)))", "user": "544e8369e4b0e39780006987"}, {"problem": 22, "code": "(fn [a-seq]\n  (reduce + \n          (map (constantly 1) \n               a-seq)))", "user": "544e9022e4b0e3978000698b"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "544ef83de4b0e3978000698d"}, {"problem": 22, "code": "(fn [arr] (loop [c 0 [car & cdr] arr] (if (nil? car) c (recur (inc c) cdr))))", "user": "53320dd1e4b019098a6f8b71"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "544fa9c4e4b0e39780006995"}, {"problem": 22, "code": "#(loop [l % counter 0]\n\t(if (empty? l)\n\t\tcounter\n\t\t(recur (rest l) (inc counter))\n\t)\n)", "user": "542d95f0e4b0dad94371f2b9"}, {"problem": 22, "code": "(fn [the-list] (reduce (fn [x y] (+ x 1)) 0 the-list))", "user": "544faecfe4b0e39780006996"}, {"problem": 22, "code": "(fn foo [list] (if \n             (empty? list)\n             0\n             (+ (foo (rest list)) 1)\n             )\n  )", "user": "544e92b8e4b0e3978000698c"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "544fbabce4b0e39780006999"}, {"problem": 22, "code": "(fn len [coll]\n  (if (empty? coll) \n \t0\n    (-> coll\n        rest\n        len\n        inc)))", "user": "544ff46ce4b0e3978000699a"}, {"problem": 22, "code": "(fn [a] (loop [arr a acc 0] (if (nil? (first arr)) acc (recur (rest arr) (+ 1 acc)))))", "user": "544ff52fe4b0e3978000699b"}, {"problem": 22, "code": "(fn [x]\n      (reduce \n       (fn [total array] (+ total 1)) 0 x)\n      )", "user": "544fb010e4b0e39780006997"}, {"problem": 22, "code": "reduce (fn [state element] (inc state)) 0", "user": "544f58e8e4b0e39780006991"}, {"problem": 22, "code": "#(loop [r 0 x %] (if x (recur (+ 1 r) (next x)) r))", "user": "5450d992e4b0e397800069a5"}, {"problem": 22, "code": "#(.size (vec %))", "user": "5450fb02e4b0e397800069a8"}, {"problem": 22, "code": "#(.size (vec %))", "user": "5450fb06e4b0e397800069a9"}, {"problem": 22, "code": "(fn [xs]\n  (loop\n    [acc 0\n     list xs]\n    (if (empty? list)\n      acc\n      (recur (+ acc 1) (rest list)))))", "user": "542d5fa9e4b0dad94371f2b5"}, {"problem": 22, "code": "#(reduce (fn [acc, _] (inc acc)) 0 %)", "user": "5450c81fe4b0e397800069a4"}, {"problem": 22, "code": "#(alength (to-array %))", "user": "5450ea1be4b0e397800069a6"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "54523da3e4b0e397800069bb"}, {"problem": 22, "code": "#(reduce + (map (fn [value] 1) %))", "user": "545101afe4b0e397800069ab"}, {"problem": 22, "code": "#(alength (to-array %))", "user": "54524fd6e4b0e397800069be"}, {"problem": 22, "code": "(comp\n (partial reduce + 0)\n (partial map (constantly 1)))", "user": "545281bce4b0e397800069c3"}, {"problem": 22, "code": "(fn patito [x] (if (= x '()) 0 (+ 1 (patito (rest x)))))", "user": "54530382e4b0e397800069cc"}, {"problem": 22, "code": "(fn length [x] ((fn length-inside [x tot] \n                      (if (empty? x) tot\n                        (length-inside (rest x) (+ tot 1)))) x 0))", "user": "545188ebe4b0e397800069b2"}, {"problem": 22, "code": "#(reduce + (map (fn [x] (if (not x) 0 1)) %))", "user": "51a97bbbe4b08d8ec191b826"}, {"problem": 22, "code": "(fn [x]\n  (loop [list-to-iterate x\n         curr-count 0]\n    (if (empty? list-to-iterate)\n      curr-count\n      (recur (rest list-to-iterate) (inc curr-count)))))", "user": "54513516e4b0e397800069af"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "5444ec99e4b032a45b869394"}, {"problem": 22, "code": "#(loop [i % cnt 0]\n   (cond (empty? i) cnt\n     :t (recur (rest i)(inc cnt))))", "user": "5451eb12e4b0e397800069b8"}, {"problem": 22, "code": "reduce (fn [a b] (+ a 1)) 0", "user": "544cf5d7e4b0e39780006977"}, {"problem": 22, "code": "(fn k [x] (if (empty? x) 0 (+ 1 ( k (rest x)))))", "user": "544e1794e4b0e39780006980"}, {"problem": 22, "code": "(fn [x s] \n    (if (empty? s) \n        x\n        (recur (inc x) (rest s))\n    )\n) 0", "user": "54524afbe4b0e397800069bc"}, {"problem": 22, "code": "(fn my-count [coll]\n  (loop [coll coll n 0]\n    (if-not (seq coll)\n      n \n      (recur (rest coll) (inc n)))))", "user": "53b7aa6ce4b047364c0444d1"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "54549df2e4b0e397800069d7"}, {"problem": 22, "code": "(fn fact [n] (if (= nil n) 0 (+ 1 (fact (next n)))))", "user": "5454a7f9e4b0e397800069d8"}, {"problem": 22, "code": "(fn [x]\n  (loop [arr x cnt 0]\n    (if (empty? arr) cnt\n    (recur (rest arr) (+ cnt 1)))))", "user": "54381729e4b032a45b869310"}, {"problem": 22, "code": "#(loop [col % result 0]\n   (if (empty? col)\n     result\n     (recur (rest col) (inc result))))", "user": "54524dbbe4b0e397800069bd"}, {"problem": 22, "code": "(fn [coll]\n  (loop [col coll\n         cnt 0]\n    (if (= (first col) nil)\n      cnt\n      (recur (next col) (inc cnt)))))", "user": "541f89a5e4b01498b1a71a99"}, {"problem": 22, "code": "(fn [xs]\n  ((fn ln [xs n]\n    (if (nil? (first xs))\n      n\n      (ln (rest xs) (+ n 1)))) xs 0))", "user": "54565558e4b080a794c2c87f"}, {"problem": 22, "code": "(partial reduce (fn [len _] (inc len)) 0)", "user": "5455c2f3e4b080a794c2c87d"}, {"problem": 22, "code": "(fn [seq] (reduce + (map (constantly 1) seq)))", "user": "54570c87e4b080a794c2c887"}, {"problem": 22, "code": "(fn my-count \n  ([l] \n   (my-count l 0))\n  ([l n]\n   (if l\n     (my-count (next l) (inc n))\n     n)))", "user": "54570d08e4b080a794c2c888"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "545537c1e4b0e397800069dd"}, {"problem": 22, "code": "(fn [coll] (reduce (fn [x y](inc x)) 0 coll))", "user": "5417bc50e4b01498b1a71a0f"}, {"problem": 22, "code": "reduce (fn [x y] (inc x)) 0", "user": "5454bd9be4b0e397800069db"}, {"problem": 22, "code": "(fn \n  [xs]\n  (loop [cnt 0 x xs]\n    (if (first x)\n      (recur (inc cnt) (rest x))\n      cnt)))", "user": "52d84ea7e4b09f7907dd1390"}, {"problem": 22, "code": ";; # is an anonymous function\n#(reduce + \n         ;; Replace each element of the list with a one\n         (map \n          (constantly 1) % \n          )\n         )", "user": "5457a6bfe4b01be26fd7460f"}, {"problem": 22, "code": "#(apply + (map (fn[_]1) %))", "user": "5457e5f1e4b01be26fd74613"}, {"problem": 22, "code": "#(alength (to-array %))", "user": "5458474ce4b01be26fd7461b"}, {"problem": 22, "code": "(fn [a] (reduce (fn [len x] (+ len 1)) 0 a))", "user": "5457767ae4b01be26fd7460c"}, {"problem": 22, "code": "(fn [x] (reduce + (map (fn [_] 1) x)))", "user": "5458c74de4b01be26fd74623"}, {"problem": 22, "code": "(fn [coll]\n  (loop [x 0\n         rest-coll coll]\n    (if (empty? rest-coll)\n           x\n           (recur (inc x) (rest rest-coll)))))", "user": "5457e502e4b01be26fd74612"}, {"problem": 22, "code": "#(loop [s %, x 0] \n   (if-not (empty? s)\n     (recur (rest s) (inc x))\n     x))", "user": "5453b522e4b0e397800069d0"}, {"problem": 22, "code": "#(loop [[n & lst] % i 0] (if n (recur lst (inc i)) i))", "user": "5446c12ee4b032a45b8693b4"}, {"problem": 22, "code": "(fn ct [se]\n  (if (= se ())\n    0\n    (inc (ct (rest se)))\n  )\n)", "user": "545944a2e4b01be26fd74627"}, {"problem": 22, "code": "(fn [col]\n (loop [col col counter 0]\n   (if col\n    (recur (next col) (inc counter))\n    counter)))", "user": "54580586e4b01be26fd74616"}, {"problem": 22, "code": "#(reduce (fn [x y] (+ x 1)) 0 %)", "user": "54596bede4b01be26fd74629"}, {"problem": 22, "code": "(fn counter [sequ] \n  (if (not (seq sequ)) 0\n   (inc (counter (rest sequ)))\n  ))", "user": "53f207a2e4b0742d9025b0e6"}, {"problem": 22, "code": "#(reduce + (map (fn [foo] 1) %))", "user": "54588070e4b01be26fd74620"}, {"problem": 22, "code": "(fn [x]\n  (loop [x x\n         i 0]\n    (if (empty? x)\n      i\n      (recur (rest x) (inc i)))))", "user": "5459f13be4b01be26fd74631"}, {"problem": 22, "code": "reduce (fn [x y] (inc x)) 0", "user": "54512df2e4b0e397800069ae"}, {"problem": 22, "code": "#(reduce (fn [ac x] (+ ac 1))0 %)", "user": "54595168e4b01be26fd74628"}, {"problem": 22, "code": "(fn [l] (reduce \n         (fn [ans item] (inc ans)) \n         0 l)\n  )", "user": "545b0275e4b01be26fd74648"}, {"problem": 22, "code": "(fn [col] (reduce (fn [acc c] (+ acc 1)) 0 col))", "user": "52149e21e4b0961f15ac4d94"}, {"problem": 22, "code": "(fn cnt [xs] (if (empty? xs) 0 (+ (cnt (rest xs)) 1)))", "user": "545baec3e4b01be26fd74655"}, {"problem": 22, "code": "(fn c [s]\n  (if (empty? s)\n    0\n    (+ 1 (c (rest s)))))", "user": "545801f6e4b01be26fd74615"}, {"problem": 22, "code": "(fn my-count [seq]\n  (cond\n   (nil? (first seq)) 0\n   't  (inc (my-count (rest seq)))))", "user": "54383fd6e4b032a45b869312"}, {"problem": 22, "code": "#(loop [x % y 0] (if (empty? x) y (let [y (inc y) x (rest x)] (recur x y))))", "user": "545bdf75e4b01be26fd7465b"}, {"problem": 22, "code": "(fn c ([coll] (c coll 0))\n  ([coll n] (if (empty? coll)\n              n\n              (recur (rest coll) (inc n)))))", "user": "545bd22fe4b01be26fd7465a"}, {"problem": 22, "code": "#(loop [i 0 res %]\n  (if (empty? res)\n    i\n    (recur (inc i) (rest res))))", "user": "545b77f5e4b01be26fd74653"}, {"problem": 22, "code": "reduce(fn[x _](inc x))0", "user": "5367f0a7e4b0243289761e88"}, {"problem": 22, "code": "(fn foo \n  ([s]\n   (foo s 0))\n  ([s acc]\n   (if (empty? s)\n     acc\n     (recur (rest s) (inc acc)))))", "user": "545a52bfe4b01be26fd74638"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "544a8fbbe4b0e39780006957"}, {"problem": 22, "code": "#(inc (last (map (fn [x y] y) % (range))))", "user": "5251d3c1e4b0541d1855b87f"}, {"problem": 22, "code": "(fn [seq]\n  (reduce (fn [acc val] (inc acc)) 0 seq))", "user": "54570dfae4b080a794c2c889"}, {"problem": 22, "code": "#(loop [arr % n 1] (if-not (next arr) n (recur (next arr) (+ n 1))))", "user": "545da759e4b01be26fd74672"}, {"problem": 22, "code": "#(reduce (fn [c l] (inc c)) 0 %)", "user": "5454b84ce4b0e397800069d9"}, {"problem": 22, "code": "(fn my-count [coll]\n  (if (empty? coll)\n    0\n    (inc (my-count (rest coll)))))", "user": "545d881de4b01be26fd7466f"}, {"problem": 22, "code": ";(fn [s] (let [r (atom 0)] (doseq [i s] (swap! r inc)) r))\n\n(fn [s] (reduce (fn [c _] (inc c)) 0 s))", "user": "51ef7c49e4b0871fa145d9a6"}, {"problem": 22, "code": "#(last (map-indexed (fn [i v] (inc i)) (seq %1 )))", "user": "545ddb57e4b01be26fd74677"}, {"problem": 22, "code": "#( reduce +  (map (fn [x] 1) %))", "user": "545d5c3be4b01be26fd7466d"}, {"problem": 22, "code": "(fn [x] (reduce (fn [k m] (+ k m))(map (fn [i](inc 0)) x)))", "user": "545db6e3e4b01be26fd74675"}, {"problem": 22, "code": "(fn f\n  ([l] (f l 0))\n  ([lst len]\n   (if (empty? lst)\n     len\n     (recur (rest lst) (inc len)))))", "user": "5455a6d3e4b0e397800069e2"}, {"problem": 22, "code": "(fn new-count\n  ([s] (new-count s 0))\n  ([s n]\n   (if (empty? s)\n     n\n     (recur (rest s) (inc n)))))", "user": "545e9cf1e4b01be26fd7467f"}, {"problem": 22, "code": ";(comp (partial reduce +) (partial map (fn [_] 1)))\n      \n(fn [coll] \n  (reduce + (map (constantly 1) coll))\n  )", "user": "545eb56be4b01be26fd74682"}, {"problem": 22, "code": "(fn [lx]\n  ((fn [l i]\n     (if (empty? l)\n    \ti\n    \t(recur (rest l) (inc i))\n       )) lx 0)\n    )", "user": "545ef0a5e4b01be26fd74684"}, {"problem": 22, "code": "reduce (fn [q _] (inc q)) 0", "user": "53572176e4b04ce2eb3ed276"}, {"problem": 22, "code": "#(loop [accum %\n          i     0]\n     (if (seq accum)\n       (recur (rest accum)\n              (inc i))\n       i))", "user": "53b14289e4b047364c04448b"}, {"problem": 22, "code": "(fn [coll] \n  (let [my-count (fn [c n] \n                  (if (empty? c)\n                    n\n                    (recur (rest c) (inc n))))\n       ]\n  (my-count coll 0)))", "user": "545f737ce4b01be26fd74688"}, {"problem": 22, "code": "(fn [coll]\n  (loop [numbers 0\n         remaining coll]\n    (if (= true (empty? remaining))\n      numbers\n      (recur (inc numbers) (rest remaining)))))", "user": "545f0046e4b01be26fd74685"}, {"problem": 22, "code": "(fn [l] (reduce (fn [x y] (inc x)) 0 l))", "user": "5460061be4b01be26fd7468d"}, {"problem": 22, "code": "#(reduce (fn [accum, ele]\n           (inc accum)) 0 %)", "user": "543b12cce4b032a45b86932a"}, {"problem": 22, "code": "(fn foo [a]\n  (loop [xs a\n         n 0]\n    (if (empty? xs)\n      n\n      (recur (rest xs) (inc n))\n    )\n  )\n)", "user": "545cfbb0e4b01be26fd74669"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "545daf78e4b01be26fd74673"}, {"problem": 22, "code": "(fn [input] (loop [current input, acc 0] (if (empty? current) acc (recur (rest current) (inc acc)))))", "user": "5460832ce4b01be26fd74693"}, {"problem": 22, "code": "#(loop [l % acc 0] ( if (empty? l) acc (recur (rest l) (inc acc))))", "user": "545f7b09e4b01be26fd74689"}, {"problem": 22, "code": "(fn mycount [coll] (reduce + (map (constantly 1) coll)))", "user": "546113ffe4b01be26fd74699"}, {"problem": 22, "code": "(fn size [x]\n  (if (= x [])\n  0\n  (+ 1 (size (rest x)))\n  )\n)", "user": "546146d6e4b01be26fd7469c"}, {"problem": 22, "code": "(fn [coll]\n  (reduce (fn [x y] (inc x)) 0 coll))", "user": "51a61074e4b0740bfd1afd1d"}, {"problem": 22, "code": "(fn [coll]\n  (loop [i 0 body coll]\n    (if (empty? body)\n      i\n      (recur (inc i) (rest body))\n      )\n    )\n  )", "user": "5460612be4b01be26fd74691"}, {"problem": 22, "code": "(fn [xs]\n  (loop [ys xs n 0]\n    (if (empty? ys)\n      n\n      (recur (rest ys) (inc n) ))))", "user": "546176e7e4b01be26fd746a2"}, {"problem": 22, "code": "(fn mycounter [coll] (reduce + (map (constantly 1) coll)))", "user": "5461a711e4b01be26fd746a4"}, {"problem": 22, "code": "(fn [in-list]\n  (loop [lst in-list\n         c 0]\n    (if (empty? lst)\n      c\n      (recur (rest lst) (+ 1 c)))))", "user": "5461c402e4b01be26fd746a6"}, {"problem": 22, "code": "(fn [x] (reduce (fn [n _] (inc n)) 0 x))", "user": "54610355e4b01be26fd74696"}, {"problem": 22, "code": "#(reduce (fn [x y] (+ x 1)) 0 %)", "user": "546280d8e4b01be26fd746b0"}, {"problem": 22, "code": "(fn cnt [ls] (if (= '() ls) 0 (+ (cnt (rest ls)) 1)))", "user": "5460eadde4b01be26fd74694"}, {"problem": 22, "code": "(fn x [args]\n  ((fn x-helper [args counter]\n    (if (empty? args)\n      counter\n      (x-helper (rest args) (inc counter)))) args 0))", "user": "5456e4e7e4b080a794c2c883"}, {"problem": 22, "code": "(fn [coll]\n  (reduce + (map (fn [y] 1) coll)))", "user": "5462caf5e4b01be26fd746b7"}, {"problem": 22, "code": "(fn my-count [lst] \n  (if (empty? lst) \n    0 \n   \t(inc (my-count (rest lst)))))", "user": "545e7ab0e4b01be26fd7467c"}, {"problem": 22, "code": "(fn [x] (reduce + (map (fn [p] 1) x)))", "user": "5462dc5ae4b01be26fd746b9"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "530e75d5e4b08068f379ecba"}, {"problem": 22, "code": "(fn get-count [[head & tail]] (cond (nil? head) 0 (empty? tail) 1 :else (inc (get-count tail))))", "user": "5462ce20e4b01be26fd746b8"}, {"problem": 22, "code": "#(loop [x %1 acc 0]\n   (if (empty? x)\n   \tacc\n   (recur (next x) (inc acc))))", "user": "54630e6be4b01be26fd746bc"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "54636dd5e4b01be26fd746c1"}, {"problem": 22, "code": "(fn [x] (reduce + (map (constantly 1) x)))", "user": "5242f6dfe4b076204b44fa9d"}, {"problem": 22, "code": "(fn [l]\n  (loop [l l\n         n 0]\n    (if-not (first l)\n      n\n      (recur (rest l) (inc n)))))", "user": "54638c8fe4b01be26fd746c2"}, {"problem": 22, "code": "#(reduce +(map (constantly 1) %))", "user": "545bbaa4e4b01be26fd74656"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "545db1bfe4b01be26fd74674"}, {"problem": 22, "code": "(fn [x] (+ (first (last (map-indexed vector x))) 1))", "user": "54534c83e4b0e397800069cd"}, {"problem": 22, "code": "(comp alength to-array)", "user": "545c7068e4b01be26fd7465d"}, {"problem": 22, "code": "(fn [coll] (reduce (fn [x y] (inc x)) 0 coll))", "user": "54650bbae4b01be26fd746d3"}, {"problem": 22, "code": "(fn countchop [x] (if (= '() x) 0 (+ 1 (countchop (rest x)))))", "user": "54651faee4b01be26fd746d6"}, {"problem": 22, "code": "#(reduce\n  (fn [c _]\n    (inc c)) 0 %)", "user": "54652aece4b01be26fd746d7"}, {"problem": 22, "code": "(fn count-seq [in-seq] (loop [in in-seq result 0]\n  (cond (empty? in) result\n    :t (recur (rest in) (inc result)))))", "user": "529735cbe4b02ebb4ef7503c"}, {"problem": 22, "code": "(fn mycount [x]\n  (if (empty? x)\n    0\n    (+ 1 (mycount (rest x)))))", "user": "54651982e4b01be26fd746d4"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5464a536e4b01be26fd746cf"}, {"problem": 22, "code": "(fn [coll]\n  (loop [vals coll   cnt 0]\n    (if (seq vals)\n      (recur (next vals) (inc cnt))\n      cnt)))", "user": "532f7e12e4b019098a6f8b4e"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "5465712ee4b01be26fd746dc"}, {"problem": 22, "code": "#(loop [s % result 0] (if (empty? s) result (recur (rest s) (inc result))))", "user": "546587afe4b01be26fd746de"}, {"problem": 22, "code": "(fn xcount [n]\n  (loop [x n\n         num 0]\n    (if (= (first x) nil)\n      num\n      (do\n        (recur (rest x) (inc num))))))", "user": "54653e3be4b01be26fd746da"}, {"problem": 22, "code": "(fn mycount \n  ([s] (mycount s 0))\n  ([s c] (if (seq s) (mycount (rest s) (inc c)) c)))", "user": "534b57bbe4b084c2834f4a78"}, {"problem": 22, "code": "(fn c[x] (if (empty? x) 0 (+ 1 (c (next x)) )))", "user": "54651ef5e4b01be26fd746d5"}, {"problem": 22, "code": "#(reduce (fn [total _] (inc total)) 0 %)", "user": "510deddbe4b07438aa321457"}, {"problem": 22, "code": "#(reduce + 0 (map (fn [x] 1) %))", "user": "5461873de4b01be26fd746a3"}, {"problem": 22, "code": "#(reduce (fn [a b] (inc a)) 0 %)", "user": "54616294e4b01be26fd746a0"}, {"problem": 22, "code": "(fn [xs]\n  (loop [xs\t\txs\n         acc\t0]\n  \t(if (empty? xs)\n   \t\tacc\n\t\t(recur (rest xs) (+ acc 1)))))", "user": "5468033ee4b00cfc9eacc133"}, {"problem": 22, "code": "(fn [xs]\n    (let [count-iter \n          (fn [xs acc] \n            (if (seq xs) \n              (recur (rest xs) (inc acc)) \n              acc))]\n    (count-iter xs 0)))", "user": "53a6e646e4b0ef122a8689cd"}, {"problem": 22, "code": "reduce (fn [a b] (inc a)) 0", "user": "54635083e4b01be26fd746bd"}, {"problem": 22, "code": "(fn [c] (last (keep-indexed (fn [i, e] (+ i 1)) c)))", "user": "5467f222e4b00cfc9eacc132"}, {"problem": 22, "code": "(fn tellen \n    [collection]\n     (loop [i collection\n            result 0]\n\t     (if (empty? i)\n\t       result\n\t       (recur (rest i)\n                (inc result)))))", "user": "54391a55e4b032a45b869319"}, {"problem": 22, "code": "reduce (fn [a b] (+ 1 a)) 0", "user": "5468a110e4b00cfc9eacc13d"}, {"problem": 22, "code": "(fn self \n  [s]\n  (loop [sq s c 0]\n    (if (empty? sq)\n      c\n      (recur (rest sq) (inc c)))))", "user": "53342e21e4b019098a6f8b8c"}, {"problem": 22, "code": "#(reduce (fn [n _] (inc n)) 0 %)", "user": "5468d932e4b00cfc9eacc13e"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "53483a32e4b084c2834f4a57"}, {"problem": 22, "code": "#(reduce + (map (fn [seq] 1) %))", "user": "54665910e4b01be26fd746e5"}, {"problem": 22, "code": "(fn countItems [l] (if (empty? l) 0 (+ 1 (countItems (rest l)))) )", "user": "5462c5abe4b01be26fd746b5"}, {"problem": 22, "code": "reduce (fn [m i] (inc m)) 0", "user": "54677c3de4b01be26fd746ec"}, {"problem": 22, "code": "#(apply + (map (fn [x] 1) %))", "user": "52bca504e4b07a9af57922f9"}, {"problem": 22, "code": "(fn [coll]\n  (loop [coll coll\n         cnt 0]\n    (if (empty? coll)\n      cnt\n      (recur (rest coll)\n             (inc cnt)))))", "user": "54508859e4b0e397800069a3"}, {"problem": 22, "code": "(fn cnt [list]\n(if (= list '())\n0\n(+ 1 (cnt (rest list)))))", "user": "54696109e4b00cfc9eacc146"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "54684c3be4b00cfc9eacc139"}, {"problem": 22, "code": "#(reduce (fn[val coll](+ val 1)) 0 %)", "user": "5465febde4b01be26fd746e1"}, {"problem": 22, "code": "#(inc(.lastIndexOf (vec %) (last %)))", "user": "54696e4ce4b00cfc9eacc147"}, {"problem": 22, "code": "(fn [coll] \n  (loop [x 0 c coll] \n    (if (empty? c)\n      x\n      (recur (+ x 1) (rest c)))))", "user": "546a6dbbe4b00cfc9eacc156"}, {"problem": 22, "code": "(fn my-count [input-list]\n  (loop [cnt 0 l input-list]\n    (if (empty? l)\n      cnt\n      (recur (inc cnt) (rest l)))))", "user": "546a6c7ce4b00cfc9eacc154"}, {"problem": 22, "code": "reduce (fn [acc x] (+ acc 1)) 0", "user": "54485727e4b032a45b8693c6"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5458a729e4b01be26fd74622"}, {"problem": 22, "code": "(fn [coll]\n  (reduce (fn [a _] (inc a)) 0 coll))", "user": "5245aea8e4b08ba239308123"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %1)", "user": "546a52f3e4b00cfc9eacc151"}, {"problem": 22, "code": "#(alength (to-array %))", "user": "538a13b8e4b0640c7a9a58b6"}, {"problem": 22, "code": "(fn [x] (reduce +(map (constantly 1)  (into [] x))))", "user": "54630cdae4b01be26fd746bb"}, {"problem": 22, "code": "reduce (fn [x y] (+ x 1)) 0", "user": "543bb568e4b032a45b869334"}, {"problem": 22, "code": "#(reduce (fn [number x]\n           (inc number)) 0 %)", "user": "546af00de4b00cfc9eacc163"}, {"problem": 22, "code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "4f9dd376e4b0dcca54ed6d27"}, {"problem": 22, "code": "(fn [a] (reduce + (map (fn [x] 1) a)))", "user": "545b9dd9e4b01be26fd74654"}, {"problem": 22, "code": "(fn [x] (reduce + (map (constantly 1) x)))", "user": "53baa9c0e4b047364c0444fa"}, {"problem": 22, "code": "(fn [x] (+ 1(first (last (map-indexed vector x)))))", "user": "5400e918e4b0de5c41848619"}, {"problem": 22, "code": "#(reduce (fn [x _] (+ 1 x)) 0 %)", "user": "52e12ac5e4b09f7907dd141a"}, {"problem": 22, "code": "#(loop [x 0 l %]\n   (if (empty? l)\n     x\n     (recur (inc x) (rest l))))", "user": "546c1b2ce4b00cfc9eacc174"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "54540453e4b0e397800069d2"}, {"problem": 22, "code": "(fn my-count\n  ([lst] (my-count lst 0))\n  ([lst n] (if (empty? lst) n (recur (rest lst) (inc n)))))", "user": "546c1f73e4b00cfc9eacc175"}, {"problem": 22, "code": "(fn mycount [x] (\n               (fn myhelp [y, z]  (if (= (rest y) ()) z (myhelp (rest y) (+ z 1))))\n               x\n               1))", "user": "546ce5f1e4b00cfc9eacc187"}, {"problem": 22, "code": "(fn jung [s & [i]] \n  (if i (\n         if (first s) \n         (jung (rest s) (inc i)) \n         i) \n    (jung (rest s) 1)\n    )\n  )", "user": "546db559e4b00cfc9eacc191"}, {"problem": 22, "code": "#(loop [cnt 0 seq %] (if (empty? seq) cnt (recur (inc cnt) (rest seq))))", "user": "546dd4f6e4b00cfc9eacc194"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "53da059be4b0e771c302547e"}, {"problem": 22, "code": "(fn len [ls] (reduce (fn [acc x] (+ acc 1)) 0 (vec ls)))", "user": "546d41bde4b00cfc9eacc18c"}, {"problem": 22, "code": "(fn [coll]\n  (reduce (fn [acc _] (inc acc)) 0 coll))", "user": "546ed28be4b00cfc9eacc1a5"}, {"problem": 22, "code": "(fn cnt [lst] (if (empty? lst) 0 (+ 1 (cnt (rest lst)))))", "user": "53c58d31e4b00fb29b22128f"}, {"problem": 22, "code": "(fn [iseq]\n  (loop [iseq iseq n 0]\n    (if (seq iseq)\n      (recur (rest iseq) (inc n))\n      n)))", "user": "524e9079e4b0541d1855b7e3"}, {"problem": 22, "code": "(fn [coll]\n  (loop [coll coll\n         n 0]\n    (if (empty? coll)\n      n\n      (recur (rest coll) (inc n)))))", "user": "546c4c5fe4b00cfc9eacc178"}, {"problem": 22, "code": "(fn [col] (reduce (fn [c _] (inc c)) 0 col))", "user": "546e0c24e4b00cfc9eacc198"}, {"problem": 22, "code": "reduce (fn [c i] (inc c)) 0", "user": "546b65a2e4b00cfc9eacc169"}, {"problem": 22, "code": "(fn count-a-seq [lat]\n  (reduce (fn [x y] (inc x)) 0 lat))", "user": "546f926fe4b00cfc9eacc1af"}, {"problem": 22, "code": "(partial reduce (fn [r, e] (+ r 1)) 0)", "user": "54577fefe4b01be26fd7460d"}, {"problem": 22, "code": "(fn ! [list] (if (= (rest list) ()) 1 (+ 1 (! (rest list)))))", "user": "546fa7a7e4b00cfc9eacc1b1"}, {"problem": 22, "code": "(fn lng [data] (reduce (fn [v d] (+ v 1)) 0 data))", "user": "5470b955e4b00cfc9eacc1bc"}, {"problem": 22, "code": "reduce (fn [val coll] (+ val 1)) 0", "user": "546f74dae4b00cfc9eacc1ac"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5470cb10e4b094393f72dd65"}, {"problem": 22, "code": "(fn f [s] (reduce + (map (fn [x] 1) s)))", "user": "52df9e8de4b09f7907dd1403"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "54708efce4b00cfc9eacc1b9"}, {"problem": 22, "code": "#(loop [cnt 0 coll %] (if (empty? coll) cnt (recur (inc cnt) (rest coll))))", "user": "546ef9f8e4b00cfc9eacc1a6"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "5471268ae4b094393f72dd68"}, {"problem": 22, "code": "#(.size (vec %))", "user": "5470b3d0e4b00cfc9eacc1bb"}, {"problem": 22, "code": "(fn [x] (loop [cnt 0 lis x] (if (empty? lis) cnt (recur (inc cnt) (rest lis)))))", "user": "52457931e4b08ba239308107"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "4ee7d6d8535d93acb0a66870"}, {"problem": 22, "code": "#(loop [col % x 0]\n   (if (empty? col)\n     x\n     (recur (rest col) (inc x))))", "user": "54713dc8e4b094393f72dd69"}, {"problem": 22, "code": "(fn [x]\n  (let [coll (vec x)]\n  (loop [it 0]\n    (let [num (get coll it)]\n      (if (nil? num)\n        (-> it)\n        (recur (inc it)))))))", "user": "54722f8ce4b094393f72dd75"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "54725331e4b094393f72dd76"}, {"problem": 22, "code": "(fn[coll]\n  (loop [coll coll cnt 0]\n    (cond (empty? coll) cnt\n          :else (recur (rest coll) (+ 1 cnt)))))", "user": "5472cba1e4b094393f72dd7a"}, {"problem": 22, "code": "(fn [x] (loop [s x acc 0] \n            (if (nil? (first s))\n              acc \n              (recur (rest s) (inc acc))\n              )\n            )\n  )", "user": "5471f2fbe4b094393f72dd70"}, {"problem": 22, "code": "(fn _count\n  [c]\n  (reduce (fn [a b] (inc a)) 0 c))", "user": "5470699ae4b00cfc9eacc1b6"}, {"problem": 22, "code": "(fn my-count\n  ([x] (my-count x 0))\n  ([x y] \n   \t(println x y)\n    (if (empty? x) \n      y \n      (recur (rest x) (inc y))\n    )\n  )\n)", "user": "546e4ab8e4b00cfc9eacc19c"}, {"problem": 22, "code": "#(reduce\n  (fn [c _] (inc c)) 0 %)", "user": "54411506e4b032a45b869369"}, {"problem": 22, "code": "(fn [coll] (reduce (fn [acc _] (inc acc)) 0 coll))", "user": "54734a0de4b0c51c1f4d727b"}, {"problem": 22, "code": "(fn a [x & [y]]\n (if (empty? x) y\n     (a (rest x) (inc (or y 0)))))", "user": "546deb01e4b00cfc9eacc196"}, {"problem": 22, "code": "reduce \n (fn [acc lst] \n   (+ acc 1))\n 0", "user": "547365d4e4b0c51c1f4d727d"}, {"problem": 22, "code": "(fn cnt [l] (if (= l '())\n              0 (inc (cnt (rest l)))\n             ))", "user": "5471f090e4b094393f72dd6e"}, {"problem": 22, "code": "#(reduce (fn [x _] (+ 1 x)) 0 %)", "user": "5473909be4b0c51c1f4d7281"}, {"problem": 22, "code": "#(alength(to-array %1))", "user": "54730420e4b094393f72dd7c"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "547336e1e4b094393f72dd7e"}, {"problem": 22, "code": "(fn [se] (#(if-not (empty? %1) (recur (rest %1) (inc %2)) %2) se 0))", "user": "544f732fe4b0e39780006994"}, {"problem": 22, "code": "(fn cnt1 [x] (+ 1 (if (empty? x) -1 (cnt1 (drop 1 x)))))", "user": "5474666ae4b0c51c1f4d7288"}, {"problem": 22, "code": "(fn countelem ([l] (countelem l 0))\n   \t\t\t   ([l i] (if l (countelem (next l) (+ i 1)) i)))", "user": "5474897ce4b0c51c1f4d728a"}, {"problem": 22, "code": "(fn [coll] (reduce + (map (fn [e] 1) coll)))", "user": "5474df19e4b0c51c1f4d728d"}, {"problem": 22, "code": "(fn [s] (reduce (fn [a b] (inc a))0 s))", "user": "5474df6ee4b0c51c1f4d7290"}, {"problem": 22, "code": "(fn size[coll]\n  (if (empty? coll)\n    0\n    (+ 1 (size (butlast coll)))))", "user": "52540bcce4b0541d1855b952"}, {"problem": 22, "code": "#(reduce (fn [v _] (inc v)) 0 %)", "user": "52d6f55fe4b09f7907dd136c"}, {"problem": 22, "code": "#(reduce (fn [memo val] (inc memo)) 0 %)", "user": "54750ca3e4b0c51c1f4d7294"}, {"problem": 22, "code": "(fn f [ls]\n  (if (empty? ls)\n    0\n    (+ 1 (f (rest ls)))))", "user": "547584d9e4b0c51c1f4d729b"}, {"problem": 22, "code": "(fn my-count [s]\n    (if (seq s)\n      (+ 1 (my-count (rest s)))\n      0))", "user": "5466aabbe4b01be26fd746e8"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "54026d7de4b0df28a13c62cf"}, {"problem": 22, "code": "(fn [x]\n  (loop [x x c 0]\n    (if (empty? x)\n      c\n      (recur (rest x) (inc c)))))", "user": "54764a8fe4b0c51c1f4d72a3"}, {"problem": 22, "code": "(fn [list] (reduce + (map (fn [_] 1) list)))", "user": "4dce9252535d5973398f92a3"}, {"problem": 22, "code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "54764705e4b0c51c1f4d72a2"}, {"problem": 22, "code": "(fn [coll]\n  (loop [c coll ccount 0]\n    (if (empty? c)\n      ccount\n      (recur (rest c) (inc ccount)))))", "user": "54764cf1e4b0c51c1f4d72a4"}, {"problem": 22, "code": "(fn [x] (apply + (map (fn [x] 1) x) ) )", "user": "5476894ce4b0c51c1f4d72a6"}, {"problem": 22, "code": "(fn [col] (reduce (fn [x y] (inc x)) 0 col))", "user": "5463c452e4b01be26fd746c4"}, {"problem": 22, "code": "(fn cnt [l]\n  (if (empty? l)\n    0\n    (inc (cnt (rest l)))\n    )\n  )", "user": "5475d755e4b0c51c1f4d72a0"}, {"problem": 22, "code": "(fn [se]\n   (loop [[x & xs] se co 1]\n     (if (empty? xs)\n       co\n       (recur xs (inc co)))))", "user": "5473efc3e4b0c51c1f4d7285"}, {"problem": 22, "code": "#(loop [n 0 s %] (if (empty? s) n (recur (inc n) (rest s))))", "user": "54774ae8e4b0c51c1f4d72b0"}, {"problem": 22, "code": "#(loop [x 0 col %] (if (empty? col) x (recur (inc x) (rest col))))", "user": "54357066e4b0b6b47310fcfd"}, {"problem": 22, "code": "#((fn func [sum var]\n    (if (= '() var)\n      sum\n      (func (inc sum) (rest var)))) 0 %)", "user": "54775b13e4b0c51c1f4d72b2"}, {"problem": 22, "code": "#(reduce (fn [acc _] (inc acc)) 0 %)", "user": "5470c930e4b094393f72dd64"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "535c2d21e4b04ce2eb3ed2b2"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "542a7c9be4b01498b1a71b41"}, {"problem": 22, "code": "(fn my-count [list] (if (empty? list) 0 (+ 1 (my-count (rest list)))))", "user": "547884d7e4b0c51c1f4d72bd"}, {"problem": 22, "code": "(fn [c] (reduce (fn [c _] (inc c)) 0 c))", "user": "5478c4fee4b0c51c1f4d72c0"}, {"problem": 22, "code": "(fn [coll]\n  (loop [x coll\n         ans 0]\n    (if (seq x)\n      (recur (rest x) (inc ans))\n      ans)))", "user": "5479c58de4b0c51c1f4d72c7"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "52d3eb02e4b09f7907dd1326"}, {"problem": 22, "code": "(fn [a] (reduce + 0 (map #(if-not (nil? %) 1) (seq a))))", "user": "5463fbbde4b01be26fd746ca"}, {"problem": 22, "code": "(fn counter\n  [sek]\n  (if (empty? sek)\n    0\n    (+ 1 (counter (rest sek)))))", "user": "5479164ae4b0c51c1f4d72c3"}, {"problem": 22, "code": "(fn [ss] (loop [n 0 s ss] (if (empty? s) n (recur (inc n) (rest s)))))", "user": "5466199ce4b01be26fd746e2"}, {"problem": 22, "code": "#(alength (to-array %))", "user": "5472d919e4b094393f72dd7b"}, {"problem": 22, "code": "#(reduce (fn [accum _]\n           (inc accum)) 0 %1)", "user": "538f89bbe4b0b51d73faae8f"}, {"problem": 22, "code": "#(->> % (map (fn [x] 1)) (reduce +))", "user": "547ad587e4b0c51c1f4d72ce"}, {"problem": 22, "code": "reduce #(+ %1 (if %2 1 1)) 0", "user": "5477056de4b0c51c1f4d72ac"}, {"problem": 22, "code": "(fn [seqs]\n  (loop [i 0\n         remain seqs]\n    (if (empty? remain)\n      i\n      (recur (inc i)\n             (rest remain)\n             )\n      )\n    )\n  )", "user": "547adcb0e4b0c51c1f4d72cf"}, {"problem": 22, "code": "#(loop [result 0 c %]\n   (if(empty? c)\n     result\n     (recur (inc result) (rest c))))", "user": "547a714ae4b0c51c1f4d72cc"}, {"problem": 22, "code": "(fn count-elem [s] (reduce + (map (fn to-one [e] 1) s)))", "user": "54797964e4b0c51c1f4d72c6"}, {"problem": 22, "code": "(fn [xs] (let [c (fn [xs i] (if (= xs ()) i (recur (rest xs) (+ i 1))))]\n           (c xs 0)))", "user": "547c0c26e4b0c51c1f4d72e2"}, {"problem": 22, "code": "(fn f [[x & xs]] (if (empty? xs) 1 (+ 1 (f xs))))", "user": "5478e57de4b0c51c1f4d72c1"}, {"problem": 22, "code": "(fn count-elements [container]\n  (loop[current-container container\n        current-length 0]\n    (if (nil? (first current-container))\n      current-length\n      (recur (rest current-container) (inc current-length)))))", "user": "5464dd11e4b01be26fd746d2"}, {"problem": 22, "code": "#(.size (vec %))", "user": "547d4f41e4b0c51c1f4d72f0"}, {"problem": 22, "code": "(fn [x] \n  (reduce +\n          (map (fn [n] 1) x)))", "user": "547d62f0e4b0c51c1f4d72f1"}, {"problem": 22, "code": "reduce (fn [c x] (+ c 1)) 0", "user": "547cd90ee4b0c51c1f4d72ec"}, {"problem": 22, "code": "(fn ccount\n  ([s] (ccount s 0))\n  ([s n]\n   (if (= (rest s) s)\n     n\n     (ccount (rest s) (+ n 1))\n  ))\n)", "user": "547dc4c7e4b0c51c1f4d72f8"}, {"problem": 22, "code": "(partial reduce (fn [cur & _] (inc cur)) 0)", "user": "4f91f1fae4b0dcca54ed6ca5"}, {"problem": 22, "code": "(fn [xs]\n  (reduce (fn [c x]\n            (+ c 1))\n          0\n          xs))", "user": "547e64dee4b0c51c1f4d7309"}, {"problem": 22, "code": "#(last (map (fn [index x] (int index)) (iterate inc 1) %1))", "user": "547e5efbe4b0c51c1f4d7306"}, {"problem": 22, "code": "(partial reduce (comp inc first list) 0)", "user": "547d8e93e4b0c51c1f4d72f4"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "547d66a1e4b0c51c1f4d72f2"}, {"problem": 22, "code": "(fn counter [x]\n  (if (empty? x)\n    0\n    (+ 1 (counter(rest x)))))", "user": "547d40ade4b0c51c1f4d72ef"}, {"problem": 22, "code": "(fn size [list]\n  (->> list\n       (map (constantly 1))\n       (reduce +)))", "user": "547e3846e4b0c51c1f4d7302"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "547f2af0e4b0c51c1f4d7317"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "542dc7c7e4b0dad94371f2bd"}, {"problem": 22, "code": "(fn this\n  ([col] (this col 0))\n  ([col n]\n  \t(if (empty? col)\n      n\n      (recur (rest col) (+ n 1)))))", "user": "547f8e71e4b0c51c1f4d731f"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5473879ce4b0c51c1f4d727e"}, {"problem": 22, "code": "#(last (interleave % (iterate inc 1)))", "user": "5470b269e4b00cfc9eacc1ba"}, {"problem": 22, "code": "(fn [x]\n  (loop [x x cnt 0]\n    (if (seq x)\n      (recur (rest x) (inc cnt))\n      cnt)))", "user": "547fbe01e4b0c51c1f4d7321"}, {"problem": 22, "code": "(fn size [x] (if (empty? x) 0 (inc (size (rest x)))))", "user": "548018e1e4b0c51c1f4d732f"}, {"problem": 22, "code": "(fn [x]\n  (apply + (map (fn [_] 1) x)))", "user": "54801febe4b0c51c1f4d733c"}, {"problem": 22, "code": "(fn [l]\n  (if (string? l)\n    (\n     .lastIndexOf (clojure.string/split  l #\"\") (last (clojure.string/split l #\"\") ) \n     )\n    \n    (\n     + (.lastIndexOf l (last l) ) 1\n     )\n   )\n  )", "user": "548018efe4b0c51c1f4d7335"}, {"problem": 22, "code": "(fn count-a-seq [lat]\n  (reduce (fn [x y] (+ x 1)) 0 lat))", "user": "548018d1e4b0c51c1f4d7326"}, {"problem": 22, "code": "(fn[x] (alength (to-array x)))", "user": "548018ede4b0c51c1f4d7334"}, {"problem": 22, "code": "(fn [a] \n\t\t(loop [x 0]\n\t\t\t(if (not= nil (nth a x nil))\n\t\t\t\t(recur (inc x))\n\t\t\t\tx\n\t\t\t)\n\t\t)\n\t)", "user": "548018dbe4b0c51c1f4d732a"}, {"problem": 22, "code": "(fn [theList] (#(alength (to-array theList))))", "user": "548026d8e4b0e286459a1155"}, {"problem": 22, "code": "(fn [aSeq] (#(alength (to-array aSeq))))", "user": "548018e3e4b0c51c1f4d7331"}, {"problem": 22, "code": "(fn [list] (reduce (fn [x lel] (+ x 1)) 0 list))", "user": "548018cde4b0c51c1f4d7325"}, {"problem": 22, "code": "(fn [seq]\n  (loop [l seq, c 0]\n    (if (empty? l)\n      c\n      (recur (rest l) (inc c))\n      )\n    )\n  )", "user": "548018dce4b0c51c1f4d732c"}, {"problem": 22, "code": "(fn [lst] (loop [my-lst lst acc 0] (if (empty? my-lst) acc (recur (rest my-lst) (inc acc) ))))", "user": "547f3434e4b0c51c1f4d7319"}, {"problem": 22, "code": "(fn this [x] (if (empty? x) 0 (if (empty? (rest x)) 1 (+ 1 (this (rest x))))))", "user": "547e48bee4b0c51c1f4d7304"}, {"problem": 22, "code": "(fn size\n  ([coll] (size coll 0))\n  ([coll n] (if (seq coll)\n                (size (rest coll) (+ n 1))\n                n)))", "user": "547f8736e4b0c51c1f4d731d"}, {"problem": 22, "code": "(fn c[l]\n  (let [[h & t] l]\n    (if (empty? l) 0 (+ 1 (c t)))))", "user": "54410a71e4b032a45b869367"}, {"problem": 22, "code": "#(reduce + (map (constantly 1)%))", "user": "54802bd1e4b0e286459a1157"}, {"problem": 22, "code": "(fn [arg](reduce + (map (constantly 1) arg )))", "user": "546b833ce4b00cfc9eacc16b"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "547ee58de4b0c51c1f4d7310"}, {"problem": 22, "code": "(fn my-count [x] \n  (if (empty? x) \n    0 \n    (+ 1 \n       (my-count (rest x))\n       )\n    )\n  )", "user": "548166b3e4b0e286459a116d"}, {"problem": 22, "code": "(fn countx\n  ( [vals] (countx (rest vals) 1))\n  ( [vals total]\n    (if (empty? vals)\n      total\n    ( countx (rest vals) (inc total)))))", "user": "53ed1cb8e4b0d648e757f4be"}, {"problem": 22, "code": "reduce (fn[a b] (inc a)) 0", "user": "548018e3e4b0c51c1f4d7330"}, {"problem": 22, "code": "#(loop [result 0 c %]\n    (if(empty? c) result\n    (recur (inc result) (rest c))))", "user": "548018ffe4b0c51c1f4d7339"}, {"problem": 22, "code": "#(reduce + (map (fn [_] 1) %))", "user": "5481e2dfe4b0e286459a1174"}, {"problem": 22, "code": "(fn [list] ((fn mycount [list n] (if (first list) (mycount (rest list) (+ n 1)) n)) list 0))", "user": "5480e5a1e4b0e286459a1162"}, {"problem": 22, "code": "#(alength (to-array %))", "user": "548204b2e4b0e286459a117a"}, {"problem": 22, "code": "(fn[x]\n  (loop[n 1]\n    (if \n      (= (apply str (take n x)) (apply str x)) \n      (int n)\n      (recur (inc n)))))", "user": "5480ec9ee4b0e286459a1163"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5477bcbbe4b0c51c1f4d72b9"}, {"problem": 22, "code": "(fn [x]\n  (loop [mystr x n 0]\n    (if (nil? (first mystr))\n      n\n      (recur (rest mystr) (inc n))\n      )\n    )\n  )", "user": "53ff7ad2e4b0de5c41848601"}, {"problem": 22, "code": "(fn [coll] (apply + (map (fn [x] 1) coll)))", "user": "5482b4eae4b0e286459a1184"}, {"problem": 22, "code": "#(loop [counter 0 c %]\n    (if(empty? c) counter\n    (recur (inc counter) (rest c))))", "user": "548018e0e4b0c51c1f4d732e"}, {"problem": 22, "code": "reduce (fn [acc _] (inc acc)) 0", "user": "5470be32e4b00cfc9eacc1bd"}, {"problem": 22, "code": "(fn len [l] (if (empty? l) 0\n            (+ (len (rest l)) 1)))", "user": "5455573be4b0e397800069e0"}, {"problem": 22, "code": "#(reduce (fn [r,v] (inc r)) 0 %)", "user": "54800885e4b0c51c1f4d7323"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "548392fce4b0e286459a1191"}, {"problem": 22, "code": "(fn my-count [seq]\n  (reduce (fn [a _] (+ 1 a)) 0 seq))", "user": "5483d59fe4b0e286459a1194"}, {"problem": 22, "code": "(fn\n  [coll]\n  (loop [cnt 0\n         cl coll]\n    (if (nil? (first cl))\n      cnt\n      (recur (inc cnt) (rest cl)))))", "user": "5484143de4b0e286459a1197"}, {"problem": 22, "code": "reduce (fn [n elem]\n          (inc n))\n        0", "user": "54848141e4b0e286459a119e"}, {"problem": 22, "code": "(fn my-count [n]\n  (reduce (fn [c a] (+ c 1)) 0 n))", "user": "5471f0f3e4b094393f72dd6f"}, {"problem": 22, "code": "#(alength (to-array %))", "user": "54852ad0e4b0e286459a11a7"}, {"problem": 22, "code": "#(apply + (map (constantly 1) %))", "user": "54856d54e4b0e286459a11aa"}, {"problem": 22, "code": "(fn [sequ] (reduce (fn [res cur] (inc res)) 0 sequ))", "user": "548582eee4b0e286459a11ae"}, {"problem": 22, "code": "#(.size (vec %))", "user": "54856fd3e4b0e286459a11ab"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "54857e3be4b0e286459a11ad"}, {"problem": 22, "code": "#(+ (.lastIndexOf (map str %) (str (last %)) ) 1)", "user": "548592a8e4b0e286459a11af"}, {"problem": 22, "code": "(fn blah [x] (if (empty? x) 0 (inc (blah (rest x)))))", "user": "535f9a5ce4b04ce2eb3ed2de"}, {"problem": 22, "code": "reduce (fn [a b] (inc a)) 0", "user": "5485b402e4b0e286459a11b0"}, {"problem": 22, "code": "(fn get-max [my-seq] (+ 1 (apply max (keys (zipmap (range) my-seq)))))", "user": "547b9cdce4b0c51c1f4d72da"}, {"problem": 22, "code": "#(reduce + (map (fn [_] 1) %))", "user": "5485d2c1e4b0e286459a11b3"}, {"problem": 22, "code": "#(reduce (fn [a b] (+ a 1)) 0 %)", "user": "54864662e4b0e286459a11b8"}, {"problem": 22, "code": "(fn sum\n  ([l] (sum l 0))\n  ([l c] (if (empty? l) \n           c\n           (sum (rest l) (+ c 1) ) \n           ) ))", "user": "547e6fd2e4b0c51c1f4d730b"}, {"problem": 22, "code": "(fn\n    [lst]\n    (reduce + (map (fn [x] 1) lst)))", "user": "513f86dde4b00f13ea1bd88d"}, {"problem": 22, "code": "#(loop [result 0 c %]\n    (if(empty? c) result\n    (recur (inc result) (rest c))))", "user": "5486adf7e4b0e286459a11be"}, {"problem": 22, "code": "(fn[x] (reduce + (map (fn [_] 1) x)))", "user": "548485f5e4b0e286459a119f"}, {"problem": 22, "code": "#(reduce (fn [a b] (+ 1 a)) 0 %)", "user": "513facf5e4b00f13ea1bd892"}, {"problem": 22, "code": "(fn [l] (reduce + (map (fn [a] 1) l)))", "user": "5486e317e4b0e286459a11c0"}, {"problem": 22, "code": "(fn[arr] (reduce (fn[a b](inc a)) 0 arr))", "user": "547cc4e3e4b0c51c1f4d72ea"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5481e9b7e4b0e286459a1177"}, {"problem": 22, "code": "#(reduce (fn [cnt x] (inc cnt)) 0 %)", "user": "54361d92e4b032a45b8692f7"}, {"problem": 22, "code": "#(.size (vec %))", "user": "5482150ae4b0e286459a117b"}, {"problem": 22, "code": "#(loop [seq1 %, x 0]\n   (if (seq seq1)\n     (recur (rest seq1) (inc x))\n     \tx))", "user": "5487eb1de4b0e286459a11ca"}, {"problem": 22, "code": "(fn cntelems [list] (if (empty? list) 0 (+ 1 (cntelems (rest list)))))", "user": "5487517ee4b0e286459a11c5"}, {"problem": 22, "code": "(fn cnt [l] \n  (\n    if (= () l)\n\t0\n    (+ 1 (cnt (rest l)))\n  )\n)", "user": "54835065e4b0e286459a118c"}, {"problem": 22, "code": "(fn [coll] (reduce + (map (fn [x] 1) coll)))", "user": "5447e5b7e4b032a45b8693c4"}, {"problem": 22, "code": "(fn [xs] (loop [xs xs n 0] (if (seq xs) (recur (next xs) (inc n)) n )))", "user": "5488872ee4b0e286459a11d3"}, {"problem": 22, "code": "(fn [x] (loop [acc 0 xs x] (if (not (empty? xs)) (recur (inc acc) (rest xs)) acc)))", "user": "54893618e4b0e286459a11e0"}, {"problem": 22, "code": "(fn [coll]\n\t(reduce (fn [c item]\n          (+ 1 c)) 0 coll))", "user": "5489948fe4b0e286459a11e9"}, {"problem": 22, "code": "#(reduce (fn [a c] (inc a)) 0 %)", "user": "54899701e4b0e286459a11ea"}, {"problem": 22, "code": "#(loop [input %\n          result 0]\n     (if (nil? (first input))\n       result\n       (recur (rest input) (+ 1 result))))", "user": "5480b4c6e4b0e286459a115c"}, {"problem": 22, "code": "#(reduce (fn [acc val] (inc acc)) 0 %)", "user": "54886e00e4b0e286459a11d1"}, {"problem": 22, "code": "#(apply + (map (fn [x] 1) %))", "user": "5489e4d4e4b0e286459a11f0"}, {"problem": 22, "code": "(fn [b] (reduce + (map (fn [x] 1) b)))", "user": "53f4c3d6e4b0db01ade6f9c5"}, {"problem": 22, "code": "(fn [s]\n  (loop [[head & tail] s cnt 0]\n    (if (empty? tail)\n      (+ 1 cnt)\n      (recur tail (+ cnt 1)))))", "user": "52a803cee4b0c58976d9ac26"}, {"problem": 22, "code": "reduce (fn[x _] (inc x)) 0", "user": "548a9f58e4b0e286459a11f5"}, {"problem": 22, "code": "#(loop [s2 % l 0] \n   (if (empty? s2)\n     l\n     (recur (drop 1 s2) (inc l))))", "user": "5489d6ffe4b0e286459a11ee"}, {"problem": 22, "code": "(fn [coll]\n  (loop [coll coll, n 0]\n    (if (empty? coll)\n      n\n      (recur (rest coll) (inc n)))))", "user": "548ade6de4b0e286459a11f6"}, {"problem": 22, "code": "(fn [list & [ile]]\n   (if (empty? list)\n    ile\n      (recur (rest list) (if ile [(inc ile)] [1]))\n))", "user": "5485d169e4b0e286459a11b2"}, {"problem": 22, "code": "(partial reduce (fn [a,b] (inc a))0)", "user": "548af5b5e4b0e286459a11f8"}, {"problem": 22, "code": "(fn ! \n  ([[s & r] c]\n   (if (empty? r)\n     (inc c)\n     (recur r (inc c))))\n  ([s]\n  (! s 0)))", "user": "5485da80e4b0e286459a11b4"}, {"problem": 22, "code": "(fn [lst]\n  (reduce (fn [acc i] (inc acc)) 0 lst))", "user": "548b0c29e4b0e286459a11fa"}, {"problem": 22, "code": "(fn [x] (+ 1 (.lastIndexOf (seq x) (last x))))", "user": "548b057fe4b0e286459a11f9"}, {"problem": 22, "code": "(fn [x] ((fn [s c]   (if (not(empty?  s) ) (recur (rest s) (inc c) ) c )        ) x 0))", "user": "54874116e4b0e286459a11c3"}, {"problem": 22, "code": "reduce (fn [c v] (+ 1 c)) 0", "user": "5481be5fe4b0e286459a1172"}, {"problem": 22, "code": "#(reduce + (map (fn [_] 1) %))", "user": "548a3dc6e4b0e286459a11f2"}, {"problem": 22, "code": "#((fn rest-iter [x,y] (\n                     if (= (rest (vec x)) [])\n                        y\n                        (rest-iter (rest x) (+ y 1))))\n % 1)", "user": "548b7db8e4b0e286459a11fd"}, {"problem": 22, "code": "#(reduce + (map (fn [_] 1) %))", "user": "548a9ddce4b0e286459a11f4"}, {"problem": 22, "code": "(fn f [[x & xs]] (if (nil? xs) 1 (+ 1 (f xs))))", "user": "548c574ae4b0e286459a1207"}, {"problem": 22, "code": "#(apply + (map (fn [x] 1) %))", "user": "548cd637e4b0e286459a1210"}, {"problem": 22, "code": "#(reduce (fn [a _] (inc a)) 0 %)", "user": "548cd813e4b0e286459a1211"}, {"problem": 22, "code": "(fn tst\n  [x] \n  (\n   reduce (fn [x y] (+ x 1)) 0 x\n   )\n)", "user": "548d6b75e4b0e286459a1216"}, {"problem": 22, "code": "#(nth (last (sort (zipmap (iterate inc 1) (seq %1)))) 0)", "user": "5485bc1be4b0e286459a11b1"}, {"problem": 22, "code": "(fn my-count [l]\n  (loop [l l\n         c 0]\n    (if (empty? l)\n      c\n      (recur (rest l) (inc c)))))", "user": "548c8115e4b0e286459a120c"}, {"problem": 22, "code": "(comp alength to-array)", "user": "54543484e4b0e397800069d4"}, {"problem": 22, "code": "(fn [coll] (reduce (fn [acc _] (inc acc)) 0 coll))", "user": "54889b50e4b0e286459a11d4"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "548983b9e4b0e286459a11e8"}, {"problem": 22, "code": "#(loop [li % cnt 0]\n   (if (empty? li)\n     cnt\n     (recur (rest li) (inc cnt))\n   )\n)", "user": "54897284e4b0e286459a11e6"}, {"problem": 22, "code": "(fn f ([l] (f l 0)) ([l cnt] (if-not (seq l) cnt (recur (rest l) (inc cnt)))))", "user": "4e617114535d8ccf87e9fe5b"}, {"problem": 22, "code": "(fn get-total\n  [my-seq]\n  (loop [[part & remaining] my-seq\n         iteration 0]\n    (if (seq remaining)\n      (recur remaining (inc iteration))\n      (inc iteration))))", "user": "548f19a8e4b0e286459a1231"}, {"problem": 22, "code": "(fn [collection]\n  (reduce (fn [a b] (inc a)) 0 collection))", "user": "548f339ee4b0e286459a1233"}, {"problem": 22, "code": "(fn newCount [pl] \n((fn recursiveCount [p n] (cond (= (first p) nil) n \n          :else (recursiveCount (rest p) (+ n 1)) \n         )) pl 0))", "user": "548f3ee4e4b0e286459a1237"}, {"problem": 22, "code": "(fn ! [ct coll]\n  (if coll \n    (! (inc ct) (next coll))\n    ct)\n) 0", "user": "548f7bf1e4b0e286459a123b"}, {"problem": 22, "code": "(fn [xs]\n  (reduce + (map (fn [x] 1) xs)))", "user": "548fa2dfe4b0e286459a1240"}, {"problem": 22, "code": "#(reduce (fn [n el] (inc n))\n    0 %\n       )", "user": "548d1d82e4b0e286459a1215"}, {"problem": 22, "code": "#(reduce (fn [length number] (inc length)) 0 %)", "user": "548ff2d5e4b0b312c081ff2b"}, {"problem": 22, "code": "#(\n  loop [s %1 c 0] \n  (if (empty? s)\n    c\n    (recur (rest s) (inc c))\n\t)\n  )", "user": "54903056e4b0b312c081ff2e"}, {"problem": 22, "code": "(fn [coll] (loop [a coll cur 0] (if (.isEmpty a) cur (recur (rest a) (+ cur 1)))))", "user": "54908cc1e4b0b312c081ff32"}, {"problem": 22, "code": "(fn [sq]\n   (loop [c 0 cs sq]\n     (if (empty? cs)\n         c\n         (recur (inc c) (rest cs)))))", "user": "548f5086e4b0e286459a1239"}, {"problem": 22, "code": "(fn [col]\n  (loop [col col number-of 0]\n    (if (empty? col)\n      number-of\n      (recur (rest col) (inc number-of)))))", "user": "4f0f3725535d0136e6c22337"}, {"problem": 22, "code": "(fn [x] (reduce + (map #(do % 1) x)))", "user": "5483ace0e4b0e286459a1192"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "5326e450e4b09d4e7a9b54f4"}, {"problem": 22, "code": "#(reduce (fn [x y] (+ x 1)) 0 %)", "user": "548d15a0e4b0e286459a1214"}, {"problem": 22, "code": "(partial reduce (fn [acc x](inc acc)) 0)", "user": "548ef1dee4b0e286459a1229"}, {"problem": 22, "code": "(fn [coll]\t(reduce (fn [x y] (inc x)) 0 coll))", "user": "547b1c82e4b0c51c1f4d72d2"}, {"problem": 22, "code": "(fn count2\n  ([sqc] (count2 sqc 0))\n  ([sqc cnt] (if (empty? sqc) cnt\n                 (recur (drop 1 sqc) (inc cnt)))))", "user": "548efcb6e4b0e286459a122a"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "53bcdd41e4b0d9a98559a6c0"}, {"problem": 22, "code": "#(loop [ i % acc 0]\n  (if (empty? i)\n    acc\n    (recur (rest i) (inc acc))))", "user": "54886239e4b0e286459a11d0"}, {"problem": 22, "code": "reduce (fn [a b] (inc a)) 0", "user": "549188f6e4b0b312c081ff3a"}, {"problem": 22, "code": "#(+ 1 (last (map-indexed (fn [index _] index) %)))", "user": "5491bebbe4b0b312c081ff3c"}, {"problem": 22, "code": "(fn [mySequence]\n  (reduce (fn [counter element]\n            (inc counter))\n          0 mySequence))", "user": "5455510fe4b0e397800069df"}, {"problem": 22, "code": "reduce (fn [a _] (+ a 1)) 0", "user": "532f8569e4b019098a6f8b4f"}, {"problem": 22, "code": "(fn f [xs]\n  (if (empty? xs)\n    0\n    (inc (f (rest xs)))))", "user": "54922c1be4b0b312c081ff40"}, {"problem": 22, "code": "#(reduce (fn [n, _] (inc n)) 0 %)", "user": "548f37c7e4b0e286459a1234"}, {"problem": 22, "code": "(fn [xs] (reduce (fn [val _] (+ val 1)) 0 xs))", "user": "54926752e4b0b312c081ff44"}, {"problem": 22, "code": "reduce (fn [i _] (inc i)) 0", "user": "512b07f7e4b078b06821febb"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %1)", "user": "53768217e4b06839e8705e26"}, {"problem": 22, "code": "(fn [s] (reduce + (map (fn [_] 1) s)))", "user": "54935b5be4b0b312c081ff4c"}, {"problem": 22, "code": "(fn [coll]\n  (loop [cnt 0\n         remain coll]\n    (if (next remain)\n      (recur (inc cnt) (next remain))\n      (inc cnt))))", "user": "5493ccbbe4b0b312c081ff50"}, {"problem": 22, "code": "(fn [coll]\n  (loop [cl coll cnt 0]\n    (if-not (empty? cl)\n      (recur (rest cl) (inc cnt))\n      cnt)))", "user": "543cd93ce4b032a45b869342"}, {"problem": 22, "code": "(fn [coll]\n  (reduce (fn [cnt e]\n            (inc cnt))\n          0\n          coll))", "user": "548c6673e4b0e286459a1209"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5492afc1e4b0b312c081ff45"}, {"problem": 22, "code": "(fn [x] (loop [tabla x n 0] (if (empty? tabla) n\n                                (recur (drop 1 tabla) (inc n)))))", "user": "5492164ee4b0b312c081ff3e"}, {"problem": 22, "code": "#(apply + (map (fn [x] 1) %))", "user": "548f11a0e4b0e286459a122d"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "549375e4e4b0b312c081ff4e"}, {"problem": 22, "code": "(fn [items]\n  (loop [c 0\n         [head & tail] items]\n    (if (nil? tail)\n      (if (nil? head)\n        0\n        (inc c))\n      (recur (inc c) tail))))", "user": "549509f0e4b0b312c081ff5a"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %1))", "user": "549674cde4b0b312c081ff66"}, {"problem": 22, "code": "#(reduce (fn ct [ct n] (+ ct 1)) 0 %)", "user": "54965534e4b0b312c081ff65"}, {"problem": 22, "code": "#(loop [i 0]\n   (if (nil? (nth (vec %) i nil))\n     i\n     (recur (inc i))))", "user": "5495b2dee4b0b312c081ff5f"}, {"problem": 22, "code": "#((fn [a b]\n    (if (empty? a)\n      b\n      (recur (rest a) (+ b 1))\n    )\n  ) % 0)", "user": "54973374e4b0b312c081ff6f"}, {"problem": 22, "code": "(fn [seqn]\n  (loop [seqn seqn acc 0]\n    (if (empty? seqn)\n      acc\n      (recur (rest seqn) (inc acc)))))", "user": "54961073e4b0b312c081ff62"}, {"problem": 22, "code": "(fn [sq]\n  (loop [x 0\n         re sq]\n    (if (empty? re)\n      x\n      (recur (inc x) (rest re)))))", "user": "54973b58e4b0b312c081ff70"}, {"problem": 22, "code": "#(loop [li %, acc 0]\n   (if (empty? li)\n   acc\n   (recur (rest li) (inc acc) )\n   \n   )\n)", "user": "54972b0ee4b0b312c081ff6e"}, {"problem": 22, "code": "(fn [sequence]\n  (loop [seq sequence counter 0]\n    (if (empty? seq)\n      counter\n      (let [[head & tail] seq]\n        (recur tail (inc counter) )\n        )\n      )\n    )\n  )", "user": "54975e99e4b0b312c081ff72"}, {"problem": 22, "code": "#(.size (seq %))", "user": "540217e1e4b0df28a13c62cb"}, {"problem": 22, "code": "#(if (string? %) (.length %) (.size %))", "user": "549831b0e4b0b312c081ff7d"}, {"problem": 22, "code": "#(alength (to-array (into [] %1)))", "user": "546a9599e4b00cfc9eacc15d"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5498c4cfe4b0b312c081ff85"}, {"problem": 22, "code": "#(reduce (fn [x arr] (inc x)) 0 %)", "user": "549839f7e4b0b312c081ff7e"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "54990416e4b0b312c081ff88"}, {"problem": 22, "code": "#(alength (into-array %))", "user": "546207fce4b01be26fd746a9"}, {"problem": 22, "code": "(fn [l] (loop [li l, n 0]\n  (if (= li []) n\n    (recur (rest li) (inc n))\n    )\n  ))", "user": "54857657e4b0e286459a11ac"}, {"problem": 22, "code": "(fn \n    [items]\n    (loop [my-items items\n           my-cnt   0]\n        (if (seq my-items)\n            (recur (rest my-items) (inc my-cnt))    \n            my-cnt\n        )\n    )\n)", "user": "54996971e4b0b312c081ff8d"}, {"problem": 22, "code": "(fn mycounter \n  ([lst]\n   (mycounter lst 0))\n  ([lst counter]\n  (if (= (first lst) nil)\n    counter\n    (mycounter (rest lst) (inc counter)))))", "user": "5499e052e4b03163384f4705"}, {"problem": 22, "code": "#(reduce (fn [x _] (inc x)) 0 %)", "user": "549a176ce4b0f3d1d8e70f69"}, {"problem": 22, "code": "(fn [x]\n  (\n   reduce + (map (fn[y](+ 0 1)) x)\n   )\n  )", "user": "5499e26ae4b03163384f4707"}, {"problem": 22, "code": "#(loop [sqs %, n 1]\n   (let [rst (rest sqs)]\n     (if (= rst '())\n       n \n       (recur rst (+ 1 n))\n     )\n   )\n)", "user": "549a999be4b0f3d1d8e70f6f"}, {"problem": 22, "code": "(fn [elems]\n  (reduce \n   (fn [cnt elem] (+ cnt 1))\n   0\n   elems))", "user": "549aa638e4b0f3d1d8e70f70"}, {"problem": 22, "code": "(fn [coll] (loop [iter 0 \n                  remaining-coll coll]\n             (let [[head & tail] remaining-coll]\n               (if-not head\n                 iter\n                 (recur (inc iter)\n                         tail)))))", "user": "549a1234e4b0f3d1d8e70f68"}, {"problem": 22, "code": "(fn [ss] \n  (loop [s ss cnt 0]\n    (if (empty? s)\n      cnt\n      (recur (rest s) (inc cnt)))))", "user": "549931fbe4b0b312c081ff8a"}, {"problem": 22, "code": "#(apply + (map (constantly 1) %))", "user": "549c22f7e4b0f3d1d8e70f86"}, {"problem": 22, "code": "(fn [t] (loop [i 0 s t] (if (empty? s) i (recur (inc i) (rest s)))))", "user": "549c3e0ce4b0f3d1d8e70f87"}, {"problem": 22, "code": "#(reduce (fn [c v] (inc c)) 0 %)", "user": "5499e23de4b03163384f4706"}, {"problem": 22, "code": "(fn [x]\n  ((fn help [x n]\n     (if (empty? x)\n       n\n       (help (rest x) (+ n 1)))) x 0))", "user": "549c8bbde4b0f3d1d8e70f8c"}, {"problem": 22, "code": "(fn [coll] (reduce (fn [total item] (+ total 1)) 0 (seq coll)))", "user": "549c953ee4b0f3d1d8e70f8e"}, {"problem": 22, "code": "#(reduce (fn [x y]\n             (inc x)) 0 %)", "user": "5493d908e4b0b312c081ff52"}, {"problem": 22, "code": "(fn [s]\n  (apply max\n         (map-indexed (fn [i e] (inc i)) s)))", "user": "508daac4e4b0f17d83ea26c0"}, {"problem": 22, "code": "(fn [xs]\n  (reduce + (map #(if-not (nil? %) 1 0) xs)))", "user": "549c1713e4b0f3d1d8e70f82"}, {"problem": 22, "code": "(fn [xs] (reduce (fn [x _] (inc x)) 0 xs))", "user": "549c181ce4b0f3d1d8e70f83"}, {"problem": 22, "code": "#(if \n  (or (vector? %1) (list? %1))\n  (.size %1)\n  (.length %1))", "user": "549d7e16e4b0f3d1d8e70f96"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "54962cf0e4b0b312c081ff64"}, {"problem": 22, "code": "#(reduce (fn[x y] (+ 1 x)) 0 %)", "user": "542d6904e4b0dad94371f2b6"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "549b1773e4b0f3d1d8e70f79"}, {"problem": 22, "code": "(fn cnt\n  ([xs]\n   (if (empty? xs)\n     0\n     (inc (cnt (rest xs))))))", "user": "549dd591e4b0f3d1d8e70f98"}, {"problem": 22, "code": "#(alength (into-array %))", "user": "538fe171e4b0b51d73faae92"}, {"problem": 22, "code": "#(loop [ls % len-so-far 0] (if (= ls []) len-so-far (recur (rest ls) (inc len-so-far))))", "user": "549b84a9e4b0f3d1d8e70f7e"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "549def9ce4b0f3d1d8e70f99"}, {"problem": 22, "code": "#(loop [x % n 0]\n   (if (= x nil)\n     n\n     (recur (next x) (inc n))))", "user": "549e5e52e4b0f3d1d8e70f9e"}, {"problem": 22, "code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "549ea7e0e4b0f3d1d8e70fa3"}, {"problem": 22, "code": "#(+ 1 (first (last (map vector (range) %))))", "user": "547a0d1ce4b0c51c1f4d72ca"}, {"problem": 22, "code": "#(reduce (fn [x _] (+ 1 x)) 0 %)", "user": "54769c7ae4b0c51c1f4d72a8"}, {"problem": 22, "code": "(fn fun\n\t\t([a] (fun a 0))\n\t\t([a c]\n\t\t\t(if (empty? a)\n\t\t\t\tc\n\t\t\t\t(fun (rest a) (inc c)))))", "user": "549cd548e4b0f3d1d8e70f91"}, {"problem": 22, "code": "#(alength (into-array Object %))", "user": "549f498ae4b0f3d1d8e70fb0"}, {"problem": 22, "code": "#(loop [c 0 col %] (if (nil? (first col)) c (recur (inc c) (rest col))))", "user": "53c29ed1e4b00fb29b221270"}, {"problem": 22, "code": "(fn [c]\n  (loop [ind 0 coll c]\n    (if (= coll ())\n      ind\n      (recur (inc ind) (rest coll)))))", "user": "549ef3c1e4b0f3d1d8e70fab"}, {"problem": 22, "code": "reduce (fn [x y] (+ x 1) )0", "user": "53053be9e4b0d8b024fd375b"}, {"problem": 22, "code": "(fn [xs]\n\t(loop [n 0\n\t       temp xs]\n\t  (if (nil? temp)\n\t    n\n\t    (recur (inc n) (next temp)))))", "user": "549eb44fe4b0f3d1d8e70fa6"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "54a0be2fe4b0f3d1d8e70fba"}, {"problem": 22, "code": "(fn [xs] (reduce (fn [total item] (inc total)) 0 xs))", "user": "54a0eab8e4b09f271ff37c47"}, {"problem": 22, "code": "#(alength(into-array %))", "user": "54a11042e4b09f271ff37c49"}, {"problem": 22, "code": "(fn [seq]\n  (loop [seq seq \n         cnt 0]\n    (if (empty? seq)\n      cnt\n      (recur (rest seq) (inc cnt))\n      )))", "user": "53403f42e4b085b17e897da8"}, {"problem": 22, "code": "#(loop [coll % idx 0] (if (empty? coll) idx (recur (rest coll) (inc idx))))", "user": "5374721be4b06d7f452d9e22"}, {"problem": 22, "code": "(fn [coll]\n  (loop [l coll\n         items 0]\n    (if (seq l)\n      (recur (rest l) (inc items))\n      items)))", "user": "549f7b51e4b0f3d1d8e70fb1"}, {"problem": 22, "code": "(fn [s] (reduce (fn [acc x] (inc acc)) 0 s))", "user": "54636b05e4b01be26fd746c0"}, {"problem": 22, "code": "(fn my-count [s]\n    (if-not (first s)\n      0\n      (+ 1 (my-count (rest s)))\n    ) \n )", "user": "549eeda9e4b0f3d1d8e70faa"}, {"problem": 22, "code": "#(reduce (fn [x _] (+ 1 x)) 0 %)", "user": "54a0ae0fe4b0f3d1d8e70fb8"}, {"problem": 22, "code": "(fn [s & n]\n  (if (empty? s)\n    n\n    (recur (rest s) (if n\n                      (inc n)\n                      1))))", "user": "54a1f494e4b09f271ff37c52"}, {"problem": 22, "code": "(fn list-size\n  ([coll]\n   (if(empty? coll)\n     0\n     (list-size (rest coll) 1)\n     ))\n  ([coll c]\n   (if(empty? coll)\n     c\n     (list-size (rest coll) (+ c 1)    \n    ))))", "user": "52fe2dffe4b047fd55837036"}, {"problem": 22, "code": "(fn mycount [l]\n\t(letfn [(count-helper [l c]\n\t\t(if (empty? l)\n\t\t\tc\n\t\t\t(count-helper (rest l) (+ c 1))))]\n\t(count-helper l 0)))", "user": "52b9e920e4b07a9af57922c9"}, {"problem": 22, "code": "(fn len [xs]\n  (cond (= xs []) 0\n        :else (+ 1 (len (rest xs)))))", "user": "5488537be4b0e286459a11cf"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "547dd432e4b0c51c1f4d72f9"}, {"problem": 22, "code": "(fn [x] (+ 1 (last (interleave x (range)))))", "user": "549b1e50e4b0f3d1d8e70f7a"}, {"problem": 22, "code": "(fn [v]\n  (loop [xs v i 0]\n    (if (empty? xs)\n      i\n      (let [[x & rxs] xs]\n        (recur rxs (inc i))))))", "user": "54a31fdae4b09f271ff37c64"}, {"problem": 22, "code": "(fn [l] (reduce (fn [memo itm] (inc memo)) 0 l))", "user": "532902f8e4b09d4e7a9b550e"}, {"problem": 22, "code": "(fn length [x]\n((fn inner-length [x n]\n(cond (= (next x) nil) (+ n 1)\n      :else (inner-length (next x) (+ n 1))))\nx 0))", "user": "530ec8d4e4b08068f379ecc2"}, {"problem": 22, "code": "(fn mycount\n  [s]\n  (loop [ss s cnt 0]\n   \t(if (empty? ss)\n    \tcnt\n     \t(recur (drop 1 ss) (+ 1 cnt))\n            \n   )))", "user": "54a30320e4b09f271ff37c62"}, {"problem": 22, "code": "reduce (fn [acc, _] (inc acc)) 0", "user": "54a2b2e8e4b09f271ff37c5d"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "54a1d643e4b09f271ff37c50"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "54a45095e4b09f271ff37c70"}, {"problem": 22, "code": "(fn counter\n  ([coll]\n   (counter coll 0))\n  ([coll i]\n   (if (= coll [])\n     i\n     (recur (rest coll) (inc i)))))", "user": "54a1d047e4b09f271ff37c4f"}, {"problem": 22, "code": "#(loop [c 0 l %1] (if (empty? l) c (recur (inc c) (rest l))))", "user": "549cc867e4b0f3d1d8e70f8f"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %\n               )\n        )", "user": "54a2c433e4b09f271ff37c5f"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "54a428e8e4b09f271ff37c6d"}, {"problem": 22, "code": "#(reduce (fn [x _] (inc x)) 0 %)", "user": "54a6399ee4b09f271ff37c85"}, {"problem": 22, "code": "#(.size (vec %))", "user": "54a677a9e4b09f271ff37c88"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "54a70af9e4b09f271ff37c93"}, {"problem": 22, "code": "(fn [s] (reduce (fn ([x y] (+ x 1))) 0 (seq s)))", "user": "5461500be4b01be26fd7469f"}, {"problem": 22, "code": "(fn [xs]\n  (loop [list xs n 0]\n    (if (empty? list) n\n      (recur (rest list) (inc n)))))", "user": "54a7336be4b09f271ff37c95"}, {"problem": 22, "code": "#(alength (to-array %))", "user": "54a73d61e4b09f271ff37c97"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "54a73c1fe4b09f271ff37c96"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "54a7d707e4b09f271ff37c9b"}, {"problem": 22, "code": "reduce (fn [x, y] (inc x)) 0", "user": "54a7efdee4b09f271ff37c9d"}, {"problem": 22, "code": "reduce (fn [a e] (inc a)) 0", "user": "508fda91e4b0ea685a20f76f"}, {"problem": 22, "code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "54a87a2de4b09f271ff37ca3"}, {"problem": 22, "code": "(fn [x] (alength (into-array x)))", "user": "546a6e9fe4b00cfc9eacc157"}, {"problem": 22, "code": "(fn Cunt [L] (if (= L '()) 0 (+ 1 (Cunt (rest L)))))", "user": "54a8dcdde4b09f271ff37ca8"}, {"problem": 22, "code": "(\n\tfn testfun [seq] \n  \t(\n    reduce + (map (fn [x] 1) seq)\n     )\n)", "user": "548018e8e4b0c51c1f4d7333"}, {"problem": 22, "code": "(fn [x] (loop [l x i 0] (if (empty? l) i (recur (rest l) (inc i)))))", "user": "54a9407de4b09f271ff37cac"}, {"problem": 22, "code": "(fn [coll] (reduce (fn [x _] (inc x)) 0 coll))", "user": "536f8cc2e4b0fc7073fd6e80"}, {"problem": 22, "code": "#(inc (.lastIndexOf (vec %) (last (vec %))))", "user": "54a854f5e4b09f271ff37ca2"}, {"problem": 22, "code": "#(loop [s %1 c 0]\n   (if (= s ())\n     c\n     (recur (drop 1 s) (inc c))))", "user": "545ded41e4b01be26fd74678"}, {"problem": 22, "code": "#(loop [mylist %\n        x 0]\n   (if (empty? mylist)\n     x\n     (recur (rest mylist)\n            (inc x))))", "user": "54a627bce4b09f271ff37c83"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "50ec69e0e4b04edc3377704a"}, {"problem": 22, "code": "(fn [s]\n\t((fn [s n]\n\t(if (empty? s)\n\t\tn\n\t\t(recur (rest s) (+ n 1)))) s 0))", "user": "54a70484e4b09f271ff37c91"}, {"problem": 22, "code": "(fn [sequence] (reduce + (map (fn [item] 1) sequence)))", "user": "54a27b05e4b09f271ff37c5c"}, {"problem": 22, "code": "(fn [sq] (+ 1 (first (last (map-indexed vector sq)))))", "user": "54aad6c0e4b09f271ff37cbc"}, {"problem": 22, "code": "(fn [lst]\n    (loop [i 0 lst lst]\n        (if (empty? lst)\n            i\n            (recur (inc i) (next lst)))))", "user": "54a8fdcee4b09f271ff37ca9"}, {"problem": 22, "code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "54ab53e1e4b09f271ff37cc5"}, {"problem": 22, "code": "(fn [s] (reduce (fn [v i] (+ v 1)) 0 s))", "user": "54aa373de4b09f271ff37cb6"}, {"problem": 22, "code": "(fn [col] (reduce (fn [n e] (+ 1 n)) 0 col))", "user": "51e8ee6be4b07cae92c04bfd"}, {"problem": 22, "code": "#(apply + (map (fn [x] 1) %))", "user": "54ab04f1e4b09f271ff37cc0"}, {"problem": 22, "code": "reduce (fn[x, _] (inc x)) 0", "user": "4fabbd3ee4b081705acca21e"}, {"problem": 22, "code": "#(reduce (fn [n _] (inc n)) 0 %)", "user": "53e8e42ce4b036ad0777e48e"}, {"problem": 22, "code": "reduce (fn [total item] (inc total)) 0", "user": "546692aee4b01be26fd746e7"}, {"problem": 22, "code": "(fn [s]\r\n    (reduce (fn [acc s] (inc acc))\r\n            0\r\n            s))", "user": "540459bfe4b0addc1aec6656"}, {"problem": 22, "code": "#(reduce (fn [n _] (inc n)) 0 %)", "user": "52a267c6e4b04e0c58e87bef"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "54ab6773e4b09f271ff37cc8"}, {"problem": 22, "code": "(fn my-len [i-col] \n  ((fn inner [col c] \n    (if (empty? col) \n      \tc \n      \t(inner (rest col) (+ 1 c))))\n  i-col 0))", "user": "54ac5ad7e4b09f271ff37cd6"}, {"problem": 22, "code": "#(.size (vec %))", "user": "54a9f704e4b09f271ff37cb2"}, {"problem": 22, "code": "#(reduce (fn [x _] (+ 1 x)) 0 %)", "user": "54ac8df8e4b09f271ff37cd7"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "53051bf6e4b0d8b024fd3759"}, {"problem": 22, "code": "(fn c [l] (if (nil? (first l)) 0  (+ 1 (c (rest l)))))", "user": "54acdd13e4b09f271ff37cdc"}, {"problem": 22, "code": "reduce (fn [accum _] (+ accum 1)) 0", "user": "54ad0575e4b09f271ff37cde"}, {"problem": 22, "code": "(fn my-count [s]\n  (if (empty? s)\n    0\n    (inc (my-count (rest s)))\n  )\n)", "user": "54982522e4b0b312c081ff7c"}, {"problem": 22, "code": "(fn [seq]\n  (loop [seq seq cnt 0]\n    (if (empty? seq)\n      cnt\n      (recur (rest seq) (inc cnt)))))", "user": "54ad4863e4b09f271ff37ce0"}, {"problem": 22, "code": "reduce (fn [x _](inc x)) 0", "user": "53e88247e4b036ad0777e489"}, {"problem": 22, "code": "(fn [se]\n   (reduce (fn [acc item]\n             (inc acc)) 0 se))", "user": "53214efbe4b09d4e7a9b54b2"}, {"problem": 22, "code": "(fn [s] (apply + (map (fn [v] (inc 0)) s)))", "user": "520a796be4b01da9d47a99dc"}, {"problem": 22, "code": "(fn foo\n    ; if given 1 argument, call with 2\n    ([l] (foo l 0))\n    ; inc the sum as needed\n    ([l sum]\n     (if (empty? l)\n      sum\n      (recur (rest l) (inc sum))\n     )\n    )\n  )", "user": "54acd7f9e4b09f271ff37cda"}, {"problem": 22, "code": "(fn [s] \n  (loop [s s\n         i 0]\n    (if (empty? s)\n      i\n      (recur (rest s) (inc i)))))", "user": "54ad1d30e4b09f271ff37cdf"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "54acd872e4b09f271ff37cdb"}, {"problem": 22, "code": "(fn [x]\n  (loop [ct 0 c x]\n    (if (empty? c)\n      ct\n      (recur (inc ct)(rest c)))))", "user": "549ac3cde4b0f3d1d8e70f71"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "5463c824e4b01be26fd746c5"}, {"problem": 22, "code": "(fn [s]\n  (reduce + (map (fn [x] 1) s)))", "user": "50b42cbbe4b001349b2f4abe"}, {"problem": 22, "code": "(fn ct ([x] (ct x 0)) ([x y] (if (empty? x) y (ct (rest x) (inc y)))))", "user": "54ab46fee4b09f271ff37cc3"}, {"problem": 22, "code": "(fn [coll]\n  (loop [coll coll\n         cnt 0]\n    (if (empty? coll)\n      cnt\n      (recur (rest coll) (+ 1 cnt)))))", "user": "54af500fe4b09f271ff37d06"}, {"problem": 22, "code": "reduce (fn [res _] (inc res)) 0", "user": "54ad9d76e4b09f271ff37ce6"}, {"problem": 22, "code": "#(loop [x 0 z %] (if (empty? z) x (recur (inc x) (rest z))))", "user": "54ae331ce4b09f271ff37cee"}, {"problem": 22, "code": "#(loop [result 0 coll %]\n  (if (empty? coll)\n    result\n   (recur (inc result) (rest coll))))", "user": "533c5249e4b0e30313ee6cdd"}, {"problem": 22, "code": "#(reduce + (map (fn[x] 1) %))", "user": "54aaff2de4b09f271ff37cbf"}, {"problem": 22, "code": "(fn mycount [coll] (if (empty? coll) 0 (inc (mycount (rest coll)))))", "user": "54b04ce4e4b09f271ff37d12"}, {"problem": 22, "code": "#(apply + (map (fn [x] 1) %))", "user": "54af6fb0e4b09f271ff37d08"}, {"problem": 22, "code": "(fn [lst]\n  (loop [rec lst\n         i 0]\n    (if (empty? rec)\n      i\n      (recur (rest rec) (inc i)))))", "user": "5498e155e4b0b312c081ff86"}, {"problem": 22, "code": "(fn mycount [s] (if (seq s) ( + 1 (mycount (rest s))) 0))", "user": "52f25e1be4b05e3f0be25ef8"}, {"problem": 22, "code": "(fn [sq]\n  (loop [s sq n 0]\n    (if s\n      (recur (next s) (inc n))\n      n)))", "user": "54b04708e4b09f271ff37d11"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "54ab1b5ae4b09f271ff37cc2"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "54b13a40e4b09f271ff37d1b"}, {"problem": 22, "code": "(fn [x] (reduce (fn [acc item] (+ acc 1)) 0 x ))", "user": "54b187bee4b09f271ff37d21"}, {"problem": 22, "code": "(fn [x]\n(loop [i 0 l x]\n  (if (= [] l)\n     i\n    (recur (inc i) (rest l))))\n )", "user": "54b050cee4b09f271ff37d13"}, {"problem": 22, "code": "reduce (fn [x y] (inc x)) 0", "user": "54ab502fe4b09f271ff37cc4"}, {"problem": 22, "code": "(fn countIt [coll]  \n  (.length (vec coll)))", "user": "4f1c7021535d64f603146482"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "54ae541ae4b09f271ff37cef"}, {"problem": 22, "code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "5439ea5de4b032a45b869324"}, {"problem": 22, "code": "reduce (fn [a b] (+ a 1)) 0", "user": "54b2a4f7e4b09f271ff37d2c"}, {"problem": 22, "code": "#(loop [i 0 left %] (if (empty? left) i (recur (inc i) (rest left))))", "user": "54b2e881e4b09f271ff37d32"}, {"problem": 22, "code": "(fn [x] (->> (to-array x)\n             (alength)))", "user": "528e441be4b0239c8a67aed8"}, {"problem": 22, "code": "(fn [l] (reduce (fn [x, y] (inc x)) 0 l))", "user": "54ae231de4b09f271ff37ced"}, {"problem": 22, "code": "#(inc (last (map-indexed (fn [idx _] idx) %)))", "user": "548db64ce4b0e286459a121c"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "4f577f25e4b0a7574ea71839"}, {"problem": 22, "code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "549d36c6e4b0f3d1d8e70f94"}, {"problem": 22, "code": "reduce (fn [sum, _] (+ sum 1)) 0", "user": "54b331dbe4b09f271ff37d37"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "543170b2e4b0dad94371f2e7"}, {"problem": 22, "code": "(fn [coll]\n  (reduce (fn [acc n] (inc acc)) 0 coll))", "user": "54af220ce4b09f271ff37d02"}, {"problem": 22, "code": "(fn f\n  ([s] (f s 0))\n  ([s n]\n   \t(if (seq s)\n      (recur (rest s) (+ n 1))\n      n)))", "user": "54ad8d2ee4b09f271ff37ce4"}, {"problem": 22, "code": "(fn howmany [seq] (if (empty? seq) 0 (inc (howmany (rest seq)))))", "user": "54b45938e4b05787c3b1638f"}, {"problem": 22, "code": "reduce (fn [x _] (inc x )) 0", "user": "54aa665fe4b09f271ff37cb8"}, {"problem": 22, "code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "54b567eee4b05787c3b163a2"}, {"problem": 22, "code": "#(loop [todo %1 amount 0]\n   (let [[elem & rest] todo new-amount (inc amount)]\n     (if (empty? rest) new-amount (recur rest new-amount))))", "user": "54b2d392e4b09f271ff37d2f"}, {"problem": 22, "code": "#(loop [i %1\n        cnt 0]\n   (if (empty? i) cnt\n     (recur (rest i) (inc cnt))))", "user": "54ae9e13e4b09f271ff37cf4"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "54b448f2e4b05787c3b1638e"}, {"problem": 22, "code": "reduce \n (fn [sum _] (inc sum))\n 0", "user": "54b2859ce4b09f271ff37d2a"}, {"problem": 22, "code": "(fn [x] \n  (apply +\n    (map (fn [y] 1) x)\n   ))", "user": "54b63dbee4b05787c3b163b5"}, {"problem": 22, "code": "#(loop [lst %1 cnt 0] (if (empty? lst) cnt (recur (rest lst) (inc cnt))))", "user": "54b54d1be4b05787c3b1639c"}, {"problem": 22, "code": "(fn [coll] \n  (loop [i 0\n         c coll] \n    (if (empty? c) \n      i \n      (recur (inc i) (rest c))\n      )))", "user": "54a96a15e4b09f271ff37cad"}, {"problem": 22, "code": "(fn [seq] (reduce + (map (fn [i] 1) seq)))", "user": "54b5b3cce4b05787c3b163ab"}, {"problem": 22, "code": "(fn solution [items]\n  (reduce + (map (fn [x] 1) items)))", "user": "52e30dcfe4b09f7907dd143b"}, {"problem": 22, "code": "(fn [coll] (reduce + (map (fn [x] 1) coll)))", "user": "54b402dce4b05787c3b16388"}, {"problem": 22, "code": "(fn [s]\n  (loop [ss s\n         n 0]\n    (if (empty? ss)\n      n\n      (recur (rest ss) (inc n)))))", "user": "54ab951be4b09f271ff37ccc"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "54ae6da2e4b09f271ff37cf2"}, {"problem": 22, "code": "#(loop [col %\n        cnt 0]\n   (if-not (= '() col)\n     (recur (drop 1 col) (inc cnt))\n     cnt))", "user": "54b67463e4b05787c3b163bc"}, {"problem": 22, "code": "(fn [lst]\n  (loop [i lst cnt 0]\n   (cond (empty? i) cnt\n     :else (recur (rest i)(inc cnt)))))", "user": "54b6c24be4b0ed20f4ff6e7c"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "54b77fa5e4b0ed20f4ff6e87"}, {"problem": 22, "code": "#(if (seq %2) (recur (inc %1) (rest %2)) %1) 0", "user": "54b2ec84e4b09f271ff37d33"}, {"problem": 22, "code": "#(loop [s %1 c 0] (if (empty? s) c (recur (rest s) (inc c))))", "user": "525b142fe4b0cb4875a45d05"}, {"problem": 22, "code": "(fn [x] (+ 1 (.lastIndexOf (seq x) (last (seq x)))))", "user": "54b83ae9e4b0ed20f4ff6e95"}, {"problem": 22, "code": "(fn seq_count[n, s](\n                   if(empty? s)\n                   n \n                   (recur (+ n 1) (rest s) )\n                   )\n) 0", "user": "54b598d6e4b05787c3b163a8"}, {"problem": 22, "code": "#(loop [l (apply list %1) n 0]\n   (if (= nil (peek l))\n         n\n         (recur (pop l) (+ n 1))\n         )\n   )", "user": "54b90836e4b0ed20f4ff6e9d"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "54b8dfece4b0ed20f4ff6e9a"}, {"problem": 22, "code": "(fn [lis] (reduce (fn [x y] (+ x 1)) 0 lis))", "user": "54b7eebae4b0ed20f4ff6e8e"}, {"problem": 22, "code": ";(fn [stuff]\n;  (loop [stuff stuff, n 0]\n;    (if (seq stuff)\n;      (recur (rest stuff) (inc n))\n;      n)))\n\n#(reduce + (map (constantly 1) %))", "user": "53838b9ee4b06839e8705ee1"}, {"problem": 22, "code": "(fn [xs] \n  (reduce (fn [n _] (inc n)) \n          0 xs))", "user": "54acf5c7e4b09f271ff37cdd"}, {"problem": 22, "code": "(fn my-count \n  ([c n] (if (not-empty c) (my-count (rest c) (inc n)) \n    n)\n  )\n  ([c] (my-count c 0))\n  )", "user": "5474d1f4e4b0c51c1f4d728c"}, {"problem": 22, "code": "(fn [a-seq]\n  (reduce (fn [m, v] (if (nil? v) m (inc m))) 0 a-seq))", "user": "54b972bbe4b0ed20f4ff6ead"}, {"problem": 22, "code": "(fn [s]\n  (loop [se s res 0]\n    (if (empty? se)\n      res\n      (recur (rest se) (inc res)))))", "user": "54b95f3de4b0ed20f4ff6eab"}, {"problem": 22, "code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "54aec1b6e4b09f271ff37cf6"}, {"problem": 22, "code": "#(reduce (fn [sum x] (inc sum)) 0 %)", "user": "54b9ae67e4b0ed20f4ff6eb0"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "54af3d22e4b09f271ff37d04"}, {"problem": 22, "code": "(fn cntSeq [s]\n  (if (empty? s)\n    0\n    (+ 1 (cntSeq (rest s)))\n  )\n)", "user": "54ba8206e4b0ed20f4ff6eb6"}, {"problem": 22, "code": "(fn [s] (reduce (fn [n s] (inc n)) 0 s))", "user": "54bad522e4b0ed20f4ff6eb8"}, {"problem": 22, "code": "(fn [coll]\n  (loop [remaining coll\n       i 0]\n  (if (empty? remaining)\n    i\n    (recur (rest remaining) (inc i)))))", "user": "54bad977e4b0ed20f4ff6eb9"}, {"problem": 22, "code": "(fn [sec]\n\t(reduce (fn [total item] (inc total)) 0 sec)  \n)", "user": "54bb0f63e4b0ed20f4ff6ebc"}, {"problem": 22, "code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "546a6fd8e4b00cfc9eacc158"}, {"problem": 22, "code": "(fn cunt [s] (if (next s)\n                 (+ (cunt (next s)) 1)\n                 1\n                 ))", "user": "54bc0b0ee4b0ed20f4ff6ec7"}, {"problem": 22, "code": "#(loop [coll % acc 0]\n   (if (empty? coll)\n     acc\n     (recur (rest coll) (inc acc)\n   ))\n )", "user": "53d1ba22e4b00fb29b221317"}, {"problem": 22, "code": "(fn [c] (reduce (fn [n i] (inc n)) 0 c))", "user": "54bc4e71e4b0ed20f4ff6ec9"}, {"problem": 22, "code": "#(reduce (fn [a _] (inc a)) 0 %)", "user": "54bc6c75e4b0ed20f4ff6ed0"}, {"problem": 22, "code": "(fn [coll] (reduce (fn [c i] (inc c)) 0 coll))", "user": "54bc69a7e4b0ed20f4ff6ecf"}, {"problem": 22, "code": "#(reduce (fn [c x] (inc c)) 0 %)", "user": "545ddac3e4b01be26fd74676"}, {"problem": 22, "code": "#(reduce (fn [a, _] (inc a)) 0 %)", "user": "54bc9480e4b0ed20f4ff6ed2"}, {"problem": 22, "code": "#(loop [coll % n 0]\n  (if (empty? coll)\n    n\n    (recur (rest coll) (inc n))))", "user": "54bb9730e4b0ed20f4ff6ebf"}, {"problem": 22, "code": "(fn[x](loop [result 0 element x]\n(if(empty? element) result\n(recur (inc result) (rest element)))))", "user": "54bbb7dee4b0ed20f4ff6ec1"}, {"problem": 22, "code": "(fn count-list [lst]\n  (reduce + (map (constantly 1) lst))\n)", "user": "54bcd12be4b0ed20f4ff6ed7"}, {"problem": 22, "code": "(fn [v] \n\t(reduce (fn [x y] (inc x)) 0 v)\n )", "user": "54b61c88e4b05787c3b163b2"}, {"problem": 22, "code": "(fn [my-seq]\n  (reduce (fn [acc e]\n            (inc acc))  0 my-seq))", "user": "546ff701e4b00cfc9eacc1b3"}, {"problem": 22, "code": "(fn [lista] \n   (reduce (fn [ac el] (+ 1 ac)) 0 lista))", "user": "54b66089e4b05787c3b163ba"}, {"problem": 22, "code": "reduce (fn [a b] (inc a)) 0", "user": "54bd04e7e4b0ed20f4ff6ed8"}, {"problem": 22, "code": "(fn [_items] \n\t((fn [acc items]\n\t\t(if (not (empty? items))\n\t\t\t(recur (inc acc) (rest items))\n\t\t\tacc)) 0 _items))", "user": "54b4046de4b05787c3b16389"}, {"problem": 22, "code": "(fn [elements] \n  (loop [n 0,\n         elements elements]\n    (if (empty? elements)\n      n\n      (recur (inc n) (next elements)))))", "user": "54bd91d7e4b0ed20f4ff6ee2"}, {"problem": 22, "code": "#(loop [x 0 y %1] (if (first y) (recur (inc x) (rest y)) x))", "user": "54bc575ce4b0ed20f4ff6ecb"}, {"problem": 22, "code": "(fn my-count[c] (if (empty? c)\n               0\n               (inc (my-count (rest c)))))", "user": "54b10d08e4b09f271ff37d18"}, {"problem": 22, "code": "reduce (fn [num _] (inc num)) 0", "user": "54be096de4b0ed20f4ff6ee6"}, {"problem": 22, "code": "(fn c [l]\n  (if (empty? l)\n    0\n    (inc (c (rest l)))))", "user": "51d55795e4b01da06753aa8f"}, {"problem": 22, "code": "(fn [a] (loop [i 0 a a] (if (not-empty a) (recur (inc i) (rest a)) i)))", "user": "54bec835e4b0ed20f4ff6ef7"}, {"problem": 22, "code": "(fn [lst]\n    (loop [aseq (seq lst) sum 0]\n      (if (nil? aseq)\n        0\n        (if (empty? aseq)\n          sum\n          (recur (rest aseq) (inc sum))))))", "user": "54bebeb9e4b0ed20f4ff6ef4"}, {"problem": 22, "code": "(fn f [x] (if (empty? x) 0 (+ 1 (f (rest x)))))", "user": "54be7772e4b0ed20f4ff6eea"}, {"problem": 22, "code": "(fn my-count [coll] (apply + (map (constantly 1) coll)))", "user": "54bd3aefe4b0ed20f4ff6edb"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "548018d7e4b0c51c1f4d7328"}, {"problem": 22, "code": "#(let [f (fn [p1 p2] (if (nil? (next p1)) p2 (recur (next p1) (inc p2))))]\n     (f % 1))", "user": "54bf7d15e4b0ed20f4ff6f03"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "54bfc203e4b0ed20f4ff6f08"}, {"problem": 22, "code": "(fn my-count [sq] (reduce (fn [acc _] (inc acc)) 0 sq))", "user": "504dfc75e4b078edc5f59387"}, {"problem": 22, "code": "#(apply + (map (constantly 1) %))", "user": "54bfc88ae4b0ed20f4ff6f09"}, {"problem": 22, "code": "(fn cnt \n  ([sqn] \n  (cnt (next sqn) 1))\n  ([sqn n] \n  (if \n    (empty? sqn)\n    n\n    (cnt (next sqn) (inc n))\n    )\n   )\n  )", "user": "54be3ab6e4b0ed20f4ff6ee7"}, {"problem": 22, "code": "#(reduce (fn [acc value] (inc acc)) 0 %)", "user": "54b576cfe4b05787c3b163a5"}, {"problem": 22, "code": "(fn [coll]\n  (loop [coll coll\n             counter 0]\n    (if (empty? coll)\n      counter\n      (recur (rest coll) (inc counter)))))", "user": "5422c959e4b01498b1a71ac7"}, {"problem": 22, "code": "#(reduce + 0 (map (fn [x] 1) %))", "user": "54c05fd7e4b0ed20f4ff6f12"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "54c0b6a2e4b0ed20f4ff6f16"}, {"problem": 22, "code": "(fn sum [items] (\n    if (nil? (first items)) 0 (+ 1 (sum (rest items)))\n))", "user": "54c0ce91e4b0ed20f4ff6f18"}, {"problem": 22, "code": "(fn [col]\n  (loop [remaining col\n         result 0]\n    (if (nil? (first remaining))\n      result\n      (recur (rest remaining) (inc result)))))", "user": "54c02ee8e4b0ed20f4ff6f10"}, {"problem": 22, "code": "(fn [seq] (reduce + (map (fn [i] 1) seq)))", "user": "54bbba99e4b0ed20f4ff6ec2"}, {"problem": 22, "code": "#(reduce (fn [accum elem] (inc accum)) 0 %)", "user": "54c11fdae4b0ed20f4ff6f1b"}, {"problem": 22, "code": "#(apply +(map(fn[_]1)%))", "user": "54b7f217e4b0ed20f4ff6e8f"}, {"problem": 22, "code": "#(alength (to-array %))", "user": "54c165e9e4b0ed20f4ff6f23"}, {"problem": 22, "code": "#(reduce (fn [a, e] (inc a)) 0 %)", "user": "54bc539be4b0ed20f4ff6eca"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "54c19050e4b0ed20f4ff6f26"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "548b8a50e4b0e286459a11ff"}, {"problem": 22, "code": "(fn [x] (+ 1 (if (string? x) (- (.length x) 1) (.lastIndexOf x (last x)))))", "user": "54c120d7e4b0ed20f4ff6f1c"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "54c219cbe4b045293a27f5f9"}, {"problem": 22, "code": "reduce (fn [a b] (+ 1 a)) 0", "user": "54be7e93e4b0ed20f4ff6eed"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "54b65694e4b05787c3b163b9"}, {"problem": 22, "code": "(fn [s] (reduce (fn [a b] (+ 1 a)) 0 s))", "user": "54c15722e4b0ed20f4ff6f22"}, {"problem": 22, "code": "(fn ! [s] (if (empty? s) 0 (+ 1 (! (rest s)))))", "user": "54c271b9e4b045293a27f602"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "54c1c5e2e4b0ed20f4ff6f29"}, {"problem": 22, "code": "(fn [xs]\n  (loop [xs xs\n     \tlen 0]\n   (if (empty? xs)\n     \tlen\n     \t(recur (rest xs) (inc len)))))", "user": "54be792ee4b0ed20f4ff6eeb"}, {"problem": 22, "code": "(fn my-count [c] (if (empty? c) 0 (+ 1 (my-count (rest c)))))", "user": "5339b53fe4b0e30313ee6cac"}, {"problem": 22, "code": "(fn [sequence] (loop [acc 0 remaining sequence]\n                              (if (empty? remaining)\n                                acc\n                                (recur (inc acc) (next remaining)))))", "user": "54c199eee4b0ed20f4ff6f27"}, {"problem": 22, "code": "(fn [coll] (reduce (fn [x _] (inc x)) 0 coll))", "user": "4e435681535dc968683fc4a1"}, {"problem": 22, "code": "(fn [s] (loop [col s i 1] (if (next col) (recur (next col)(inc i)) i)))", "user": "54c3747de4b045293a27f60e"}, {"problem": 22, "code": "(fn [xs]\n  (reduce\n    (fn [a x]\n   \t  (+ a 1)) 0 xs))", "user": "54c363cce4b045293a27f60d"}, {"problem": 22, "code": "(fn [coll]\n  (reduce + (map (fn [x] 1) coll)))", "user": "54c31f1be4b045293a27f609"}, {"problem": 22, "code": "#(let [f (fn [x y] (inc x))]\n  (reduce f 0 %))", "user": "53a46c4ae4b0b62ce300572f"}, {"problem": 22, "code": "(fn my-count [seq]\n  (if (empty? seq)\n    0\n    (inc (my-count (rest seq)))))", "user": "54c4399ae4b045293a27f616"}, {"problem": 22, "code": "(fn c [lst] (if (empty? lst) 0 (+ (c (rest lst)) 1)))", "user": "54c47620e4b045293a27f61c"}, {"problem": 22, "code": "(fn\n  [xs]\n  (.length (vec xs)))", "user": "546db2fbe4b00cfc9eacc190"}, {"problem": 22, "code": "(fn [x] \n  (let [i 0 xs (seq x)]\n    (\n     (fn counter [i xs]\n      (if (first xs)\n        (counter (inc i) (rest xs))\n      i)\n     ) i xs\n    )\n   )\n)", "user": "5480cce5e4b0e286459a115f"}, {"problem": 22, "code": "#(loop [xs % c 0] (if (empty? xs) c (recur (rest xs) (inc c))))", "user": "4f8be895e4b02e764a0a5184"}, {"problem": 22, "code": "(fn cnt [coll]\n  (if (empty? coll)\n    0\n    (+ 1 (cnt (rest coll)))))", "user": "52c048a5e4b07a9af5792349"}, {"problem": 22, "code": "#(reduce (fn [i _] (inc i)) 0 %)", "user": "54c169ade4b0ed20f4ff6f24"}, {"problem": 22, "code": "(fn [sq] (\n          loop [cnt 0 rest-of-seq sq] \n          (if (-> rest-of-seq empty?) \n            cnt \n            (recur (inc cnt) (rest rest-of-seq))\n)))", "user": "54bbe505e4b0ed20f4ff6ec5"}, {"problem": 22, "code": "(fn thing [x] \n  (if (nil? (seq x))\n    0\n    (+ (thing (rest x)) 1))\n  )", "user": "54c568cde4b045293a27f623"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "54c46381e4b045293a27f61a"}, {"problem": 22, "code": "reduce #(if (nil? %2) % (inc %)) 0", "user": "54c5cc17e4b045293a27f624"}, {"problem": 22, "code": "#(loop [sequence % c 0]\n\t(if (nil? (first sequence))\n      c\n      (recur (rest sequence) (+ c 1))))", "user": "54c5e36ee4b045293a27f626"}, {"problem": 22, "code": "#(reduce (fn [a b] (inc a)) 0 %)", "user": "54bff194e4b0ed20f4ff6f0d"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "54b7ceb3e4b0ed20f4ff6e8a"}, {"problem": 22, "code": "(fn cnt [coll]\n  (let [mycount_r\n        (fn [[f & r] n]\n          (if (nil? f) \n            n\n            (recur r (inc n))))]\n    (mycount_r coll 0)))", "user": "54c611d1e4b045293a27f627"}, {"problem": 22, "code": "#(apply + (map (fn [x] 1) %1))", "user": "51cf815de4b0e42293a22575"}, {"problem": 22, "code": "(fn rec [x] (if (empty? x) 0 (+ 1 (rec (rest x)))))", "user": "54c6619ae4b045293a27f62b"}, {"problem": 22, "code": "(fn cnt ([x] (cnt x 0)) ([x i] (if (empty? x) i (recur (rest x) (+ 1 i)))))", "user": "54a634abe4b09f271ff37c84"}, {"problem": 22, "code": "#(reduce (fn [i _] (inc i)) 0 %)", "user": "54c29697e4b045293a27f604"}, {"problem": 22, "code": "(fn ll [x] (if (= x (rest x))\n          0\n          (inc (ll (rest x)))))", "user": "528b3f5ae4b0239c8a67ae93"}, {"problem": 22, "code": "(fn [coll]\n  (reduce + (map (constantly 1) coll)))", "user": "54c6a59ce4b045293a27f62e"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "54c75959e4b045293a27f63a"}, {"problem": 22, "code": "(fn lol [[x & xs :as coll]]\n  (if-not (seq coll)\n    0\n    (+ 1 (lol xs))))", "user": "54b07c1ee4b09f271ff37d16"}, {"problem": 22, "code": "(fn [s]\n  (loop [iteration 0 remaining s]\n    (if (empty? (rest remaining))\n      (inc iteration)\n      (recur (inc iteration) (rest remaining))\n    )\n  )\n  \n)", "user": "54c6e78ae4b045293a27f634"}, {"problem": 22, "code": "(fn countlen [l]\n  (if (empty? l)\n    0\n    (inc (countlen (rest l)))\n  )\n)", "user": "54c82b27e4b045293a27f645"}, {"problem": 22, "code": "#(reduce (fn [acc _] (+ acc 1)) 0 %)", "user": "54c83824e4b045293a27f649"}, {"problem": 22, "code": "#(.size (vec %))", "user": "54acad39e4b09f271ff37cd8"}, {"problem": 22, "code": "#(loop [result % x 0]\n    (if (empty? result)\n      x\n      (recur (rest result) (inc x)))\n    )", "user": "54b5d893e4b05787c3b163ae"}, {"problem": 22, "code": "(fn [x] (if (coll? x) (.size x) (.length x)))", "user": "54b5b1f3e4b05787c3b163aa"}, {"problem": 22, "code": "(fn my-count[l]\n  (if (empty? l) 0\n    (+ 1 (my-count (rest l)))))", "user": "54c8ac49e4b045293a27f64e"}, {"problem": 22, "code": "(fn [xs] ((fn [lst n]   \n(if (empty? lst)\n  n\n  (recur (rest lst) (inc n))\n)\n) xs 0))", "user": "54c74a78e4b045293a27f637"}, {"problem": 22, "code": "#(loop [xs % n 0]\n   (if (nil? (first xs))\n     n\n     (recur (rest xs) (inc n))))", "user": "54c8d4a8e4b045293a27f654"}, {"problem": 22, "code": "reduce(fn[t v](inc t))0", "user": "50d0d2dde4b00b15ecee9768"}, {"problem": 22, "code": "(fn my-count [x]\n  (if (= x nil)\n    0\n    ( + 1 (my-count (next x)))\n    \n    )\n)", "user": "54c7b7c5e4b045293a27f63f"}, {"problem": 22, "code": "#(reduce (fn [k t] (inc k))0 %)", "user": "54341f91e4b0b6b47310fce9"}, {"problem": 22, "code": "(fn [t] (last (sort (keys (zipmap (iterate inc 1) (seq t))) )))", "user": "54b90fe2e4b0ed20f4ff6e9f"}, {"problem": 22, "code": "#(apply + (map (constantly 1) %))", "user": "54c93665e4b045293a27f661"}, {"problem": 22, "code": "(fn [a] (reduce (fn [x y] (inc x)) 0 a))", "user": "54c93206e4b045293a27f65d"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "54c9636fe4b045293a27f66e"}, {"problem": 22, "code": "(fn myCount [x]\n  (if (not-empty (rest x))\n    (+ 1 (myCount (rest x)))\n    (int 1)))", "user": "54c9608fe4b045293a27f66d"}, {"problem": 22, "code": "#(reduce + 0 (map (fn[_] 1) %))", "user": "53559180e4b04ce2eb3ed25d"}, {"problem": 22, "code": "(fn c [s] (if (empty? s) 0 (inc (c (rest s)))))", "user": "54c968bfe4b045293a27f66f"}, {"problem": 22, "code": "(fn [x] (reduce (fn [x y] (+ 1 x)) 0 x))", "user": "54c97cb3e4b045293a27f677"}, {"problem": 22, "code": "(fn coun [l]\n  (if (empty? l)\n  \t0\n\t(+ 1 (coun (rest l)))\n  )\n )", "user": "54c9f165e4b045293a27f687"}, {"problem": 22, "code": "(fn [list] \n  (reduce (fn [n _] ( inc n )) 0 list)\n)", "user": "54ca130ce4b057c6fda3a250"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "53d7710be4b0e771c3025462"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "54c9f362e4b057c6fda3a24c"}, {"problem": 22, "code": "(fn [col]\n  (loop [xs col c 0]\n    (if (seq xs)\n      (recur (rest xs) (inc c))\n      c)))", "user": "54ca31e9e4b057c6fda3a253"}, {"problem": 22, "code": "(fn coount [seq] (if (= seq '()) 0 (+ 1 (coount (rest seq)))))", "user": "54c9e00be4b045293a27f683"}, {"problem": 22, "code": "reduce (fn [n, m] (inc n)) 0", "user": "54c7f5cce4b045293a27f642"}, {"problem": 22, "code": "reduce (fn[s _] (inc s)) 0", "user": "54c97a56e4b045293a27f676"}, {"problem": 22, "code": "#(reduce (fn[x y] (inc x)) 0 %)", "user": "54bd17f7e4b0ed20f4ff6eda"}, {"problem": 22, "code": "(fn count-elems [x] (if (empty? x) 0 (+ 1 (count-elems (rest x)))))", "user": "54c92da8e4b045293a27f65c"}, {"problem": 22, "code": "(partial reduce (fn [a b] (+ a 1)) 0)", "user": "54ca93abe4b057c6fda3a264"}, {"problem": 22, "code": "reduce (fn [n x] (inc n)) 0", "user": "54ca9ca8e4b057c6fda3a265"}, {"problem": 22, "code": "#(-> (map-indexed list %) last first inc)", "user": "4fc4eb1ee4b081705acca354"}, {"problem": 22, "code": "(fn myCount [lst] (reduce + (map (fn d [n] (+ 0 1)) lst)))", "user": "54c6b12ce4b045293a27f630"}, {"problem": 22, "code": "#(reduce (fn [x y] (+ x 1)) 0 %1)", "user": "54c9ced5e4b045293a27f680"}, {"problem": 22, "code": "(fn [x] (reduce (fn [a b](+ a  1)) 0 x))", "user": "501bf2cee4b08e00484756a6"}, {"problem": 22, "code": "(fn myc [col] \n  (if (empty? col) \n    0 \n    (+ 1 (myc (rest col)))\n    )\n  )", "user": "54cb3497e4b057c6fda3a272"}, {"problem": 22, "code": "(fn get-count\n  [input]\n  (loop [index 0 input input] \n    (if (empty? input)\n      index\n      (recur (+ index 1) (rest input)))))", "user": "54c72b19e4b045293a27f636"}, {"problem": 22, "code": "(fn [x] (reduce + (map (constantly 1) x)))", "user": "54ca35c6e4b057c6fda3a254"}, {"problem": 22, "code": "(partial reduce (fn [acc _] (+ acc 1)) 0)", "user": "54c641f8e4b045293a27f628"}, {"problem": 22, "code": "#(loop [acc 0 coll %]\n(if (empty? coll) acc\n(recur (inc acc) (rest coll))))", "user": "54cbb0fde4b057c6fda3a27b"}, {"problem": 22, "code": "#( apply +(map (fn g[x](identity 1)) %) )", "user": "54ca582be4b057c6fda3a259"}, {"problem": 22, "code": "(fn [xs](reduce (fn [x y](+ 1 x)) 0 xs))", "user": "54cbc38be4b057c6fda3a27e"}, {"problem": 22, "code": "reduce (fn [acc item] (inc acc)) 0", "user": "54c13b87e4b0ed20f4ff6f20"}, {"problem": 22, "code": "#(apply + (map (constantly 1) %))", "user": "54cc26c1e4b057c6fda3a28a"}, {"problem": 22, "code": "#(reduce (fn [a b] (inc a)) 0 %)", "user": "54cbe00ee4b057c6fda3a285"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "54cc4156e4b057c6fda3a28c"}, {"problem": 22, "code": "(fn [coll] (reduce (fn [x y] (inc x)) 0 coll))", "user": "54ca5709e4b057c6fda3a258"}, {"problem": 22, "code": "(fn [coll] (reduce (fn [x y] (inc x)) 0 coll))", "user": "54ccb15de4b057c6fda3a28e"}, {"problem": 22, "code": "(fn [l]\n  (loop [c 0 l l]\n  ;;(let [c 0]\n    (if (= l '())\n      c\n      (do\n        ;;(set! c (inc c))\n      \t(recur (inc c) (rest l))))))", "user": "54cd62d0e4b057c6fda3a2a1"}, {"problem": 22, "code": "(partial reduce (fn [acc e] (inc acc)) 0)", "user": "54cd651be4b057c6fda3a2a2"}, {"problem": 22, "code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "54ccf107e4b057c6fda3a294"}, {"problem": 22, "code": "(fn my-count ([s] (my-count s 0)) ([s n] (if (nil? (first s)) n (my-count (rest s) (+ 1 n)))))", "user": "54cad59ee4b057c6fda3a26e"}, {"problem": 22, "code": "#(loop [n 0 c %] (if (empty? c) n (recur (inc n) (rest c))))", "user": "52857128e4b0239c8a67adf2"}, {"problem": 22, "code": "(fn [lst]\n    (let [cnt 0]\n    (loop [cnt cnt lst (into () lst)]\n        (if (empty? lst)\n          cnt\n          (recur (inc cnt) (pop lst))\n        )\n    )\n    )\n)", "user": "54cdf667e4b057c6fda3a2a8"}, {"problem": 22, "code": "#(reduce (fn [a b] (+ a 1)) 0 (seq %))", "user": "4f84a4a4e4b033992c121c39"}, {"problem": 22, "code": "(fn [x] (reduce + (map (fn[x] 1) x)))", "user": "54c951b3e4b045293a27f668"}, {"problem": 22, "code": "reduce (fn [a b] (inc a)) 0", "user": "54ce6eede4b057c6fda3a2ad"}, {"problem": 22, "code": "(fn\n   [xs]\n   (#(if-not\n      (empty? %)\n      (recur\n        (rest %)\n        (inc %2))\n      %2)\n     xs\n     0)\n   )", "user": "54cceafde4b057c6fda3a292"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "54ce8733e4b018d918be98be"}, {"problem": 22, "code": "reduce (fn [v,c](inc v)) 0", "user": "54c8eb61e4b045293a27f658"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "54cf0986e4b018d918be98c7"}, {"problem": 22, "code": "(fn [coll] \n  ((fn [x ct]\n     (if (empty? x) \n       ct\n       (recur (rest x) (inc ct)))) coll 0))", "user": "54cf1932e4b018d918be98c9"}, {"problem": 22, "code": "(fn [coll]\n  (let [ones (map (fn [_] 1) coll)]\n    (apply + ones)))", "user": "54cad2d5e4b057c6fda3a26c"}, {"problem": 22, "code": "(fn f [l] (if (empty? l) 0 (+ 1 (f (rest l)))))", "user": "54ce3790e4b057c6fda3a2ab"}, {"problem": 22, "code": "(fn countSeq\n  ([x] (countSeq x 0))\n  ([x n] (if (empty? x) n (countSeq (rest x) (inc n))))\n  )", "user": "54cfb5abe4b018d918be98d3"}, {"problem": 22, "code": "#(reduce (fn [acc _] (inc acc)) 0 %)", "user": "541b1f25e4b01498b1a71a63"}, {"problem": 22, "code": "#(reduce + (map (fn [_] 1) %))", "user": "54d02993e4b018d918be98dc"}, {"problem": 22, "code": "(fn count' [xs] (if (empty? xs) 0 (+ 1 (count' (rest xs)))))", "user": "54d03026e4b018d918be98de"}, {"problem": 22, "code": "#(reduce (fn [acc _] (+ 1 acc)) 0 %)", "user": "549e70bbe4b0f3d1d8e70fa0"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1)%) )", "user": "54cf6a32e4b018d918be98ce"}, {"problem": 22, "code": "(fn recursive [x] (if (seq x)\n          (+ 1 (recursive (rest x)))\n          0))", "user": "54d0ceb5e4b0e8a36923e5d1"}, {"problem": 22, "code": "(comp inc first last (partial map-indexed vector))", "user": "54d0d115e4b0e8a36923e5d3"}, {"problem": 22, "code": "(fn [c]\n  (let [cnt (fn [c n]\n              (if (seq c)\n                (recur (rest c) (inc n))\n                n))]\n    (cnt c 0)))", "user": "54d0ceb2e4b0e8a36923e5d0"}, {"problem": 22, "code": "(comp inc first last (partial map-indexed vector))", "user": "54d0cedde4b0e8a36923e5d2"}, {"problem": 22, "code": "#(reduce (fn [x _] (inc x)) 0 %)", "user": "54d0afb6e4b0e8a36923e5cd"}, {"problem": 22, "code": "#(reduce + (map (fn [_] 1) %))", "user": "54d13d43e4b0e8a36923e5df"}, {"problem": 22, "code": "(fn count2 [seq]\n  (loop [coll seq total 0]\n    (if (first coll)\n      (recur (rest coll) (inc total))\n      total)))", "user": "54ce541de4b057c6fda3a2ac"}, {"problem": 22, "code": "#(loop [s % c 0] (if (empty? s) \n                   c\n                   (recur (rest s) (inc c)))\n   )", "user": "54cad1c2e4b057c6fda3a26b"}, {"problem": 22, "code": "(fn [x] \n  (loop [l x\n         n 0]\n    (if (nil? (first l)) n (recur (rest l) (+ 1 n)))))", "user": "54d1bdc8e4b0e8a36923e5e7"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))\n; We just turn each element into 1 and then add them up\n; Note that (fn [x] 1) can be replaced by (constantly 1)", "user": "54d0f654e4b0e8a36923e5d6"}, {"problem": 22, "code": "(fn count1 [x] (if (empty? x) \n  0 \n  (inc (count1 (rest x)))\n  )\n  )", "user": "54d0e6c5e4b0e8a36923e5d4"}, {"problem": 22, "code": "(fn [seq]\n  (loop [entries seq\n         acc 0]\n    (if (empty? entries)\n      acc\n      (recur (rest entries) (inc acc)))))", "user": "54d21e6de4b0e8a36923e5ee"}, {"problem": 22, "code": "(fn [coll]\n  (loop [cnt 0\n         coll (apply list coll)]\n    (if-not (= '() coll)\n      (recur (inc cnt) (rest coll))\n      cnt)))", "user": "54aec099e4b09f271ff37cf5"}, {"problem": 22, "code": "(fn\n  [haystack]\n  (loop [items 0 \n        heap haystack]\n    (if (empty? heap)\n      items\n      (recur (inc items) (rest heap))\n     )\n   )\n )", "user": "54d0f744e4b0e8a36923e5d7"}, {"problem": 22, "code": "#(reduce + 0 (map (fn [x] 1) %))", "user": "54d251aee4b0e8a36923e5f1"}, {"problem": 22, "code": "(fn [l]\n  ((fn [l n]\n  \t(if (empty? l)\n    \tn\n    \t(recur (rest l) (+ n 1))))\n  l 0))", "user": "54d26316e4b0e8a36923e5f2"}, {"problem": 22, "code": "(fn [initial-s]\n  (loop [s initial-s, size 0]\n    (if (next s)\n      (recur (next s) (inc size))\n      (inc size))))", "user": "54b5ce67e4b05787c3b163ac"}, {"problem": 22, "code": "#_(fn\n  [se]\n  ((fn countit\n    [se2 i]\n    (if\n      (= (rest se2) '())\n      (+ i 1)\n      (countit (rest se2) (+ i 1)))) se 0))\n\n;stolen solution\nreduce (fn [m i] (+ m 1)) 0", "user": "54d267e0e4b0e8a36923e5f3"}, {"problem": 22, "code": "(fn f\n  ([xs]\n   (if (not-empty xs)\n       (f 1 xs)\n     0))\n  ([n [x & xs]]\n   (if (not-empty xs)\n     (recur (inc n) xs)\n     n)))", "user": "54d2892fe4b0e8a36923e5f7"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "54d1cf2ee4b0e8a36923e5eb"}, {"problem": 22, "code": "reduce (fn [a s] (inc a)) 0", "user": "54d2b411e4b0e8a36923e5f9"}, {"problem": 22, "code": "(fn [sqn]\n  (last (map-indexed (fn [idx itm] (inc idx)) sqn)))", "user": "54d2f306e4b0e8a36923e5fe"}, {"problem": 22, "code": "(fn [s]\n  (loop [s s\n         c 0]\n    (if (not (seq s))\n      c\n      (recur (rest s) (inc c)))))", "user": "54d321b3e4b0e8a36923e602"}, {"problem": 22, "code": "#( (fn inner [s1 c] (if (empty? s1) c (inner (rest s1) (+ c 1)))) % 0)", "user": "54d22860e4b0e8a36923e5ef"}, {"problem": 22, "code": "#(reduce \n  (fn [x y] (inc x)) 0 %)", "user": "54d2159fe4b0e8a36923e5ed"}, {"problem": 22, "code": "(fn [param]\n  (loop [n 0\n         arr param]\n    (if (empty? arr)\n      n\n      (recur (inc n) (rest arr))\n      )\n   )\n )", "user": "54d35746e4b0e8a36923e606"}, {"problem": 22, "code": "(fn counter [seq]\n  (if (= (first seq) nil)\n    0\n    (+ 1 (counter (rest seq)))))", "user": "53771d98e4b06839e8705e2e"}, {"problem": 22, "code": "(fn[l] (\n       reduce (fn[x y](+ x 1 )) 0 l\n       ))", "user": "54cf977fe4b018d918be98d1"}, {"problem": 22, "code": "#(reduce (fn [cnt item] (inc cnt)) 0 %)", "user": "54c6ef5fe4b045293a27f635"}, {"problem": 22, "code": "(fn reccont [tocnt] (if (empty? tocnt) 0 (inc (reccont (next tocnt)))))", "user": "54d37e4ce4b0e8a36923e608"}, {"problem": 22, "code": "(fn [t]  (reduce + (map (fn [&t] 1) t)))", "user": "549a1fede4b0f3d1d8e70f6a"}, {"problem": 22, "code": "(fn [l] (reduce (fn [v coll] (inc v)) 0 l))", "user": "54d468d0e4b0a52adc2e2000"}, {"problem": 22, "code": "#(reduce (fn [a b] (inc a)) 0 %)", "user": "544e8c4fe4b0e3978000698a"}, {"problem": 22, "code": "(fn [x] \n  (loop [r (seq x)\n         n 0]\n    (if (empty? r) \n      n\n      (recur (rest r) (inc n)))))", "user": "536d75cbe4b0fc7073fd6e5b"}, {"problem": 22, "code": "(fn [coll] (reduce (fn [acc _] (inc acc)) 0 coll))", "user": "541d3c0fe4b01498b1a71a7e"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "54d49921e4b0a52adc2e2002"}, {"problem": 22, "code": "#(reduce (fn[x y](+ 1 x)) 0 %)", "user": "54d50049e4b0a52adc2e2008"}, {"problem": 22, "code": "(fn [v] (reduce + (map (fn [x] 1) v)))", "user": "54d31cf1e4b0e8a36923e600"}, {"problem": 22, "code": "(fn [x]\n  (loop [x x\n         acc 0]\n    (if (empty? x)\n      acc\n    (recur (rest x) (inc acc)))))", "user": "54d529cbe4b0a52adc2e2009"}, {"problem": 22, "code": "#(reduce + \n         (map (fn [_] 1)\n              %))\n\n;OLD\n;#(loop [x %, acc 0] \n;  (let [x (seq x)]\n;   (if-not x\n;     acc\n;     (recur (rest x)\n;            (inc acc)))))", "user": "54d341f7e4b0e8a36923e603"}, {"problem": 22, "code": "(fn [ls]\n  (loop [ls ls\n         acc 0]\n    (if (empty? ls)\n      acc\n      (recur (rest ls) (inc acc)))))", "user": "54d492dbe4b0a52adc2e2001"}, {"problem": 22, "code": "#(reduce (fn [i _] (+ 1 i)) 0 %)", "user": "54d63357e4b0a52adc2e2018"}, {"problem": 22, "code": "#(loop [counter 0 coll %]\n   (if (empty? coll)\n     counter\n     (recur (inc counter) (rest coll))))", "user": "4e3ff3a4535dc968683fc499"}, {"problem": 22, "code": "reduce (fn [n _] (inc n)) 0", "user": "54d6c80ce4b0a52adc2e2020"}, {"problem": 22, "code": "#((fn [col n] \n  (if (empty? col) n (recur (rest col) (+ n 1)))) % 0)", "user": "547c2c6ce4b0c51c1f4d72e3"}, {"problem": 22, "code": "(fn [x] (apply + (map (fn [i] 1) x)))", "user": "54d412e2e4b0a52adc2e1ffe"}, {"problem": 22, "code": "(fn [l] (reduce (fn [x _] (inc x)) 0 l ) )", "user": "54d6f22de4b0a52adc2e2023"}, {"problem": 22, "code": "(fn cnt [x] (if (nil? (first x)) 0 (inc (cnt (rest x)))))", "user": "54d707bde4b0a52adc2e2025"}, {"problem": 22, "code": "#(apply + (map (constantly 1) %))", "user": "54d70bbfe4b0a52adc2e2026"}, {"problem": 22, "code": "(fn [s]\n   (letfn [(cnt [s acc] (if s (recur (next s) (inc acc)) acc))]\n     (cnt (seq s) 0)))", "user": "54c23252e4b045293a27f5fc"}, {"problem": 22, "code": "(fn [a] \n  (reduce #(+ % (last %2)) \n          0 \n          (apply map vector [a (repeat 1)])))", "user": "54d5fbe9e4b0a52adc2e2014"}, {"problem": 22, "code": "#(apply + (map (fn [x] 1) %))", "user": "54d753ebe4b0a52adc2e2029"}, {"problem": 22, "code": "#(reduce (fn [a b] (inc a)) 0 %)", "user": "54d55abfe4b0a52adc2e200f"}, {"problem": 22, "code": "#(reduce (fn [c s] (+ 1 c)) 0  %)", "user": "54cd53dae4b057c6fda3a29f"}, {"problem": 22, "code": "(fn [coll]\n  (loop [c 0\n         existing-coll coll]\n    (if (seq existing-coll)\n      (recur (inc c) (rest existing-coll))\n      c)))", "user": "54271c6de4b01498b1a71b20"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "54cf26d9e4b018d918be98ca"}, {"problem": 22, "code": "#(-> % (interleave (range)) (last) (inc))", "user": "54cb378be4b057c6fda3a273"}, {"problem": 22, "code": "#(reduce (fn [ctr item] (inc ctr)) 0 %)", "user": "546a70bae4b00cfc9eacc159"}, {"problem": 22, "code": "(fn [col] (reduce (fn [x y] (+ x 1)) 0 col))", "user": "54d109a4e4b0e8a36923e5da"}, {"problem": 22, "code": "#(alength (to-array %))", "user": "54d75e4ce4b0a52adc2e202a"}, {"problem": 22, "code": "(fn [x] (reduce + (map (constantly 1) x)))", "user": "54d7ed8de4b0a52adc2e2034"}, {"problem": 22, "code": "(fn [seq]\n  (loop [remaining seq\n         iteration 0]\n    (let [[first & rest] remaining]\n      (if (empty? remaining)\n        iteration\n        (recur rest (inc iteration))))))", "user": "54d80751e4b0a52adc2e2035"}, {"problem": 22, "code": "#(reduce (fn [i _] (inc i)) 0 %)", "user": "54d893a4e4b0a52adc2e2039"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "54d4b3a7e4b0a52adc2e2003"}, {"problem": 22, "code": "#(loop [y (vec %) l 0]\n  (if (empty? y)\n    (identity l)\n    (recur (rest y) (inc l))))", "user": "54d4ec31e4b0a52adc2e2007"}, {"problem": 22, "code": "(fn [s]\n  (loop [seq s c 0]\n    (if (empty? seq)\n      c\n      (recur (rest seq) (+ c 1)))))", "user": "54d8cc38e4b0a52adc2e203e"}, {"problem": 22, "code": "(fn [x]\n  ((fn recurse [y n]\n    (if (empty? y) n (recurse (rest y) (+ n 1)))) x 0))", "user": "54d902ece4b0a52adc2e2046"}, {"problem": 22, "code": "(fn [x]\n    (loop [cnt 0 l x]\n       (if (empty? l)\n         cnt\n         (recur (inc cnt) (rest l)))))", "user": "5005ca29e4b0678c553fc46f"}, {"problem": 22, "code": "#(reduce (fn [counter _] (+ counter 1)) 0 %1)", "user": "54d59604e4b0a52adc2e2013"}, {"problem": 22, "code": "(fn [x] (reduce (fn [a b](+ 1 a)) 0 x))", "user": "54d70f40e4b0a52adc2e2027"}, {"problem": 22, "code": ";#(loop [xs %, n 0]\n;  (if (seq xs)\n;    (recur (rest xs) (inc n))\n;    n))\n#(reduce (fn [a _] (inc a)) 0 %)", "user": "54ba9ee8e4b0ed20f4ff6eb7"}, {"problem": 22, "code": "#(.size (seq %))", "user": "54cbc9ede4b057c6fda3a27f"}, {"problem": 22, "code": "(fn len\n  ([lst]\n   (len lst 0))\n  ([lst acc]\n   (if (empty? lst)\n     acc\n     (recur (rest lst) (inc acc)))))", "user": "53f31dafe4b0742d9025b0f0"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %1))", "user": "54d6b822e4b0a52adc2e201d"}, {"problem": 22, "code": "#(loop [counter 0\n        col %]\n   (if (empty? col)\n     counter\n     (recur (inc counter) (drop 1 col))))", "user": "54010363e4b0de5c4184861d"}, {"problem": 22, "code": "(fn cusc [r x] (loop [result r li x] (if (= (first li) nil) result (recur (+ 1 result) (rest li))))) 0", "user": "54b4f9cee4b05787c3b16397"}, {"problem": 22, "code": "#(loop [result 0 c %]\n    (if(empty? c) result\n    (recur (inc result) (rest c))))", "user": "54bcab07e4b0ed20f4ff6ed5"}, {"problem": 22, "code": "(fn [xs] (reduce (fn [x y] (+ 1 x)) 0 xs))", "user": "54da7e6ee4b024c67c0cf754"}, {"problem": 22, "code": "(fn this \n  ([x] (this x 0))\n  ([x y] (if (empty? x)\n              y\n           (recur (rest x) (+ y 1)))))", "user": "54d9a3b1e4b024c67c0cf74f"}, {"problem": 22, "code": "(fn f [x] (if (empty? x) 0 (+ 1 (f (butlast x)))))", "user": "54dae16de4b024c67c0cf758"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "54db349de4b024c67c0cf75e"}, {"problem": 22, "code": "(fn [x] (reduce + (map (fn[_] 1) (seq x))))", "user": "4ec66e84535d6d7199dd36cd"}, {"problem": 22, "code": "#(reduce + (map (fn [x] (if (nil? x) 0 1)) %))", "user": "54db5d73e4b024c67c0cf763"}, {"problem": 22, "code": "#(alength (to-array %))", "user": "54db33f1e4b024c67c0cf75d"}, {"problem": 22, "code": "(fn [vec]\n  (loop [myCount 0\n         curVec vec]\n    (if (empty? curVec)\n      myCount\n      (recur (+ myCount 1) (rest curVec)))))", "user": "54db1911e4b024c67c0cf75b"}, {"problem": 22, "code": "(fn [l] ((fn cntagg [l agg]\n           (if (empty? l) agg (cntagg (rest l) (+ 1 agg))))\n         l 0))", "user": "54d95ce8e4b024c67c0cf74a"}, {"problem": 22, "code": "#(reduce (fn [a x](inc a)) 0 %)", "user": "54dae0b5e4b024c67c0cf757"}, {"problem": 22, "code": "#(reduce (fn [v _] (inc v)) 0 %)", "user": "54dbcbbde4b024c67c0cf774"}, {"problem": 22, "code": "#(reduce (fn [x y] (+ x 1)) 0 %)", "user": "54d2c4c5e4b0e8a36923e5fa"}, {"problem": 22, "code": "(fn mcount [xs]\n  (if (= xs '())\n      0\n      (+ 1 (mcount (rest xs)))))", "user": "544b94ebe4b0e39780006966"}, {"problem": 22, "code": "(fn [ls]\n  (loop [x ls cnt 0]\n    (if (empty? x)\n      cnt\n      (recur (rest x) (inc cnt)))))", "user": "54dc4010e4b024c67c0cf77e"}, {"problem": 22, "code": "#(reduce (fn [mem val] (+ mem 1)) 0 %)", "user": "54d127b7e4b0e8a36923e5de"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "54dc40b3e4b024c67c0cf77f"}, {"problem": 22, "code": "reduce (fn [running-total _] (inc running-total)) 0", "user": "54db0ab8e4b024c67c0cf75a"}, {"problem": 22, "code": "(fn \n  my-count\n  [x]\n  (if (empty? x)\n    0\n    (inc (my-count (rest x)))))", "user": "54dcb632e4b024c67c0cf786"}, {"problem": 22, "code": "(fn [seq] ((fn [s n] (if (empty? s) n (recur (rest s) (inc n)))) seq 0))", "user": "54dc9ba1e4b024c67c0cf785"}, {"problem": 22, "code": "#(reduce   \n  (fn [c _] (inc c))\n  \t0 %)", "user": "54dbd7d6e4b024c67c0cf776"}, {"problem": 22, "code": "(fn [sequ]\n   (loop [number 0\n          sequNew (seq sequ)]\n     (if (nil? (first sequNew))\n       number\n       (recur (inc number) (rest sequNew)))))", "user": "54cbd6bae4b057c6fda3a282"}, {"problem": 22, "code": "(fn [seq]\n  ((fn [seq total]\n     (if (= [] seq)\n       total\n       (recur (rest seq) (inc total))))\n   seq 0))", "user": "54d87b54e4b0a52adc2e2038"}, {"problem": 22, "code": "(fn [v]\n  (loop [c 0\n         tail v]\n    (if (= nil (first tail))\n      c\n      (recur (inc c) (rest tail)))))", "user": "54dd4121e4b024c67c0cf793"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "54db8ddae4b024c67c0cf767"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "54dd8a8ae4b024c67c0cf795"}, {"problem": 22, "code": "#(loop [lst %\n        cnt 0]\n   (if (empty? lst)\n     cnt\n     (recur (rest lst) (+ 1 cnt))))", "user": "54dd3bdde4b024c67c0cf791"}, {"problem": 22, "code": "#(apply + (map (fn [x] 1) %))", "user": "54dd76c8e4b024c67c0cf794"}, {"problem": 22, "code": "(fn [x]\r\n  (loop [v x\r\n         c 0]\r\n    (if (not-empty v)\r\n      (recur (rest v) (+ c 1))\r\n      c)))", "user": "54ba8076e4b0ed20f4ff6eb5"}, {"problem": 22, "code": "#(reduce (fn [s _] (inc s)) 0 %)", "user": "54ddb556e4b024c67c0cf798"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %1))", "user": "54d4ba98e4b0a52adc2e2004"}, {"problem": 22, "code": "(fn [xs]\n  (+ 1 (last\n             (map-indexed (fn [index element] (int index)) xs))))", "user": "54dbe183e4b024c67c0cf778"}, {"problem": 22, "code": "(fn [sq]\n  (loop [sq sq, c 0]\n    (if (seq sq)\n        (recur (next sq) (inc c))\n        c)))", "user": "54df2274e4b024c67c0cf7a8"}, {"problem": 22, "code": "#(-> % to-array alength)", "user": "54df2609e4b024c67c0cf7a9"}, {"problem": 22, "code": "reduce (fn [acc _] (inc acc)) 0", "user": "54df40aae4b024c67c0cf7ab"}, {"problem": 22, "code": "reduce (fn [x _] (+ 1 x)) 0", "user": "54da46e5e4b024c67c0cf753"}, {"problem": 22, "code": "#(loop [s %1, acc 0]\n  (if (first s)\n    (recur (rest s) (+ acc 1))\n    acc))", "user": "54dbbe4fe4b024c67c0cf772"}, {"problem": 22, "code": "(fn [s]\n  (apply + (map (fn [x] 1) s)))", "user": "54df838de4b024c67c0cf7ae"}, {"problem": 22, "code": "(fn count-it [col]\n  \n  (loop [sum 0 col col]\n    \n   (if (empty? col) sum (recur (inc sum) (rest col)))\n  ) \n)", "user": "547b4ec6e4b0c51c1f4d72d5"}, {"problem": 22, "code": "(partial reduce (fn [a _] (inc a)) 0)", "user": "54b7520de4b0ed20f4ff6e83"}, {"problem": 22, "code": "(fn [coll] (reduce + (map (constantly 1) coll)))", "user": "54e01b31e4b024c67c0cf7b3"}, {"problem": 22, "code": "(fn [x] \n  (apply + \n         (map \n          #(if (nil? %1)\n             nil\n             1) x)))", "user": "54dfb6c9e4b024c67c0cf7b0"}, {"problem": 22, "code": "reduce (fn [r a] (inc r)) 0", "user": "54e0d163e4b024c67c0cf7ba"}, {"problem": 22, "code": "#(loop [xs % i 0]\n   (if (= xs []) i (recur (rest xs) (inc i))))", "user": "5161d6bae4b009fba0926e39"}, {"problem": 22, "code": "(fn mycount [tc] (loop [tocount tc cnt 0] (if (not= tocount '()) (recur (rest tocount) (inc cnt)) cnt)))", "user": "54caaa48e4b057c6fda3a267"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "54e11fdce4b024c67c0cf7c1"}, {"problem": 22, "code": "(fn myCount\n  [sequence]\n  (reduce\n   (fn\n     [currentCount current]\n     (inc currentCount))\n   0\n   sequence))", "user": "54e009dce4b024c67c0cf7b2"}, {"problem": 22, "code": "(fn my_func[coll] \n              (loop [coll coll\n                      x   0]  \n                (if (empty? coll) \n                    x \n                (recur (rest coll) (inc x)))))", "user": "54d95088e4b024c67c0cf748"}, {"problem": 22, "code": "(fn [x] (loop [coll x c 0]\n          (if (nil? (first coll))\n            c\n            (recur (rest coll) (+ c 1)))))", "user": "54e2a5f7e4b024c67c0cf7d1"}, {"problem": 22, "code": "reduce (fn [c n] (inc c)) 0", "user": "54df3c94e4b024c67c0cf7aa"}, {"problem": 22, "code": "reduce (fn [i x] (inc i)) 0", "user": "54e336f3e4b024c67c0cf7da"}, {"problem": 22, "code": "(fn f [x]\n  (if (= x ())\n    0\n    (+ 1 (f (rest x)))))", "user": "54e345a1e4b024c67c0cf7db"}, {"problem": 22, "code": "(fn x[c] (if c (+ 1 (x (butlast c))) 0))", "user": "54e32090e4b024c67c0cf7d9"}, {"problem": 22, "code": "#(reduce \n    (fn [c & args] (inc c))\n     0 %)", "user": "53ecaf1ce4b0d648e757f4b4"}, {"problem": 22, "code": "(fn [arg] \n  (loop [arg arg index 0]\n    (if (empty? arg) \n      index\n       (recur (rest arg) (inc index)))))", "user": "54e10605e4b024c67c0cf7bf"}, {"problem": 22, "code": "#(alength (to-array %))", "user": "52097e55e4b0e152394d76f4"}, {"problem": 22, "code": "(fn my-count \n  ([coll] (my-count coll 0))\n  ([coll n]\n   (if (empty? coll)\n      n\n      (my-count (rest coll) (+ n 1)))))", "user": "54e3e09fe4b024c67c0cf7e4"}, {"problem": 22, "code": "#(reduce (fn [n i] (inc n)) 0 %)", "user": "54e3df6ae4b024c67c0cf7e3"}, {"problem": 22, "code": "(fn [x]\n  (loop [result 0, i (vec x)]\n    (if (not-empty i)\n      (recur (inc result) (pop i))\n      result)))", "user": "54e3bd3fe4b024c67c0cf7e0"}, {"problem": 22, "code": "#(reduce (fn [x y] (+ x 1)) 0 %)", "user": "54e4a1dce4b024c67c0cf7e8"}, {"problem": 22, "code": "(fn foo [x] \n  (if (not= nil (first x))\n    (+ 1 (foo (rest x)))\n    0)\n  )", "user": "54e0a9c3e4b024c67c0cf7b5"}, {"problem": 22, "code": "#(reduce (fn [x y] (+ x 1)) 0 %)", "user": "54d104a5e4b0e8a36923e5d9"}, {"problem": 22, "code": "(fn [x] ((fn [sq acc] (if (empty? sq) acc (recur (rest sq) (+ 1 acc))))\n         x 0))", "user": "54e4ef4de4b024c67c0cf7f4"}, {"problem": 22, "code": "#(reduce (fn [x _]\n          (inc x)) 0 %)", "user": "54e0e6e1e4b024c67c0cf7bb"}, {"problem": 22, "code": "(fn my_count [s]\n  (if (= s [])\n    0\n    (+ 1 (my_count (rest s)))\n   )\n )", "user": "54e50f7ce4b024c67c0cf7f6"}, {"problem": 22, "code": "#(reduce (fn [acc x] (+ acc 1)) 0 %)", "user": "54e51c7be4b024c67c0cf7f7"}, {"problem": 22, "code": "#(->> % (map (constantly 1)) (reduce +))", "user": "54ca3edce4b057c6fda3a256"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "54e5bdf2e4b024c67c0cf7fe"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "54cd9519e4b057c6fda3a2a6"}, {"problem": 22, "code": "#(reduce (fn[x _](inc x)) 0 %)", "user": "54db8e07e4b024c67c0cf769"}, {"problem": 22, "code": "#(reduce (fn [a _] (inc a)) 0 %)", "user": "54db8d27e4b024c67c0cf765"}, {"problem": 22, "code": "(fn c [coll] (reduce (fn [n _] (inc n)) 0 coll))", "user": "54e4c888e4b024c67c0cf7ee"}, {"problem": 22, "code": "(fn [c] (reduce + (map (fn [a] 1) c)))", "user": "54de6820e4b024c67c0cf79f"}, {"problem": 22, "code": "(fn f [xs & [n]]\n  (let [x (first xs)\n        n (or n 0)]\n    (if x\n      (f (rest xs) (inc n))\n      n)))", "user": "521d064fe4b0c4ef0be830a8"}, {"problem": 22, "code": "(fn [s] \n  (reduce + 0 \n          (map (fn [x] identity 1) s)))", "user": "54db07cfe4b024c67c0cf759"}, {"problem": 22, "code": "(fn [s]\n  (reduce + (map (fn [x] 1) s)))", "user": "54e606c3e4b024c67c0cf803"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "54e75bf0e4b024c67c0cf813"}, {"problem": 22, "code": "(fn [s]\n  (loop [[x & xs] s\n          n 0]\n    (cond\n      (not (nil? x)) (recur xs (inc n))\n      :else n)))", "user": "54e79094e4b024c67c0cf818"}, {"problem": 22, "code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "54e5dc08e4b024c67c0cf800"}, {"problem": 22, "code": "(fn [coll]\n   (loop [c coll len 0]\n     (println c len)\n     (if (empty? c)\n       len\n       (recur (rest c) (inc len)))))", "user": "54d15e4ae4b0e8a36923e5e2"}, {"problem": 22, "code": "#(reduce (fn [n xs] (inc n)) 0 %)", "user": "54e2a779e4b024c67c0cf7d3"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "54e540c1e4b024c67c0cf7f9"}, {"problem": 22, "code": "(fn [xs]\n  (loop [rmdr xs\n        res 0]\n    (if (empty? rmdr) res\n        (recur (rest rmdr) (inc res))\n    )\n  )\n)", "user": "54e85a7fe4b024c67c0cf823"}, {"problem": 22, "code": "(fn mycount [seq]\n  (if (empty? seq)\n    0\n    (+ 1 (mycount (rest seq)))))", "user": "54e6762be4b024c67c0cf809"}, {"problem": 22, "code": "reduce (fn [m i] (+ m 1)) 0", "user": "54e8ebe0e4b024c67c0cf82d"}, {"problem": 22, "code": "(fn [lst]\n  (loop [iter 0 copy lst]\n    (if (empty? copy)\n      iter\n      (recur (+ iter 1) (rest copy)))))", "user": "54e90803e4b024c67c0cf82f"}, {"problem": 22, "code": "#((fn myCount [total coll]\n        (if (empty? coll)\n          total\n          (myCount (inc total) (next coll))))\n      0 %)", "user": "54d02d49e4b018d918be98dd"}, {"problem": 22, "code": "#(reduce (fn[c _](inc c)) 0 %)", "user": "54ea2476e4b024c67c0cf83a"}, {"problem": 22, "code": "#(loop [coll % ile 0] (if (empty? coll) ile (recur (rest coll) (inc ile)   )  ))", "user": "54e4edcae4b024c67c0cf7f3"}, {"problem": 22, "code": "(fn [ls]\n  (loop [ls ls\n         acc 0]\n    (if (empty? ls)\n      acc\n      (recur (rest ls) (inc acc)))))", "user": "54ea5e91e4b024c67c0cf840"}, {"problem": 22, "code": "(fn sheesh [coll] (reduce (fn [x y] (inc x)) 0 (into [] coll)) )", "user": "54de7948e4b024c67c0cf7a4"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "54eb22a0e4b024c67c0cf845"}, {"problem": 22, "code": "(fn cnt [lst]\n  (if (empty? lst)\n    0\n    (+ 1 (cnt (rest lst)))\n  )\n)", "user": "54eb3a9ee4b024c67c0cf846"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "54dbb21be4b024c67c0cf76f"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "54eb97c8e4b024c67c0cf84d"}, {"problem": 22, "code": "reduce (fn [t _] (inc t)) 0", "user": "54e24a05e4b024c67c0cf7ce"}, {"problem": 22, "code": "#(reduce + (map (fn [%1] 1) %1))", "user": "54e956d9e4b024c67c0cf831"}, {"problem": 22, "code": "(fn [lst]\n      (loop [i lst cnt 0]\n        (cond (empty? i)\n              cnt\n              :t (recur (rest i)(inc cnt)))))", "user": "54e1197fe4b024c67c0cf7c0"}, {"problem": 22, "code": "#(.length (into [] %))", "user": "54eca495e4b024c67c0cf855"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "54ecd7dde4b024c67c0cf85c"}, {"problem": 22, "code": "#(reduce (fn[acc x] (inc acc)) 0 %)", "user": "54ecd6f1e4b024c67c0cf858"}, {"problem": 22, "code": "#(reduce (fn [acc x] (inc acc)) 0 %)", "user": "54ecd709e4b024c67c0cf859"}, {"problem": 22, "code": "#(reduce (fn[acc x] (inc acc)) 0 %)", "user": "54ecd716e4b024c67c0cf85a"}, {"problem": 22, "code": "(fn [x] (reduce (fn [c y] (+ c 1)) 0 x))", "user": "54eb53cfe4b024c67c0cf84a"}, {"problem": 22, "code": "(fn [coll]\n  (loop [coll (seq coll)\n         acc 0]\n    (if (empty? coll)\n      acc\n      (recur (rest coll) (inc acc)))))", "user": "507f69eee4b089ade05efbcf"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "54e19a26e4b024c67c0cf7c6"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "54ed464ee4b024c67c0cf860"}, {"problem": 22, "code": "(fn cnt [s]\n  (if (= '() s)\n    0\n    (+ (cnt (rest s)) 1)\n  )\n)", "user": "54ec1eafe4b024c67c0cf851"}, {"problem": 22, "code": "(fn [s] (reduce + 0 (map (fn [c] 1) s)))", "user": "5484fab9e4b0e286459a11a6"}, {"problem": 22, "code": "#(reduce + (map first (partition 2 (interleave (repeat 1) %))))", "user": "54db3d82e4b024c67c0cf75f"}, {"problem": 22, "code": "(fn prob22 [coll]\n  (loop [coll coll cnt 0]\n    (if (seq coll)\n      (recur (rest coll) (inc cnt))\n      cnt)))", "user": "4f0554aa535dcb61093f6bf5"}, {"problem": 22, "code": "(fn cct\n  ([coll] (cct coll 1))\n  ([coll len] \n   (if \n     (= (next coll) nil) len \n     (recur (rest coll) (+ len 1))\n   )\n   )\n  )", "user": "54edcf96e4b024c67c0cf866"}, {"problem": 22, "code": "(fn [coll]\n   (reduce (fn [s i] (+ s 1)) 0 coll))", "user": "54edc818e4b024c67c0cf865"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "54a6baaee4b09f271ff37c8a"}, {"problem": 22, "code": "(fn count1 [list] (if (empty? list)\n                    0\n                    (+ 1 (count1 (rest list)))\n                       )\n     )", "user": "54ee1c5be4b024c67c0cf86e"}, {"problem": 22, "code": "#(reduce (fn [val n] (+ val 1)) 0 %)", "user": "54ecb962e4b024c67c0cf856"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "52ca9513e4b071a8d36bd3e4"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "54ef424be4b024c67c0cf881"}, {"problem": 22, "code": "(fn [lst]\n  (inc (last (map-indexed (fn [i x] i) lst))))", "user": "54ef4a1de4b024c67c0cf882"}, {"problem": 22, "code": "reduce (fn [a b] (inc a)) 0", "user": "54e7b512e4b024c67c0cf81c"}, {"problem": 22, "code": "(fn [col] (inc (first (last (map-indexed vector (seq col))))))", "user": "53ec14b9e4b036ad0777e500"}, {"problem": 22, "code": "(fn [s]\n  (loop [i 0 ss s]\n    (if (= (first ss) nil)\n      i\n      (recur (inc i) (rest ss)))))", "user": "54ef51bde4b024c67c0cf884"}, {"problem": 22, "code": "(fn\n   [s]\n  (loop [[x & xs] s\n        n 0]\n    (if (= x nil) n\n                  (recur xs (+ n 1)))\n    )\n  )", "user": "53cdf5dfe4b00fb29b2212e9"}, {"problem": 22, "code": "#(reduce (fn [sofar next] (inc sofar)) 0 %)", "user": "54ef4a1ee4b024c67c0cf883"}, {"problem": 22, "code": "#(loop [counter 0 x %]\n   (if (empty? x)\n     counter\n     (recur (inc counter) (rest x))\n     )\n )", "user": "54f0433ce4b024c67c0cf893"}, {"problem": 22, "code": "(fn my-count [coll]\n  (if (= () coll)\n    0\n    (+ 1 (my-count (rest coll)))))", "user": "54e4e14ce4b024c67c0cf7f1"}, {"problem": 22, "code": "(fn count-eles [xs] (if (empty? xs) 0 (+ 1 (count-eles (rest xs)))))", "user": "54f06aede4b024c67c0cf896"}, {"problem": 22, "code": "#(reduce (fn [acc curr] (inc acc)) 0 %)", "user": "54eee3a3e4b024c67c0cf879"}, {"problem": 22, "code": "reduce (fn [a b] (inc a)) 0", "user": "54f0c067e4b024c67c0cf8a3"}, {"problem": 22, "code": "(fn [coll]\n  (loop [acc 0 c coll]\n    (if (seq c)\n      (recur (inc acc) (rest c))\n      acc)))", "user": "54df7922e4b024c67c0cf7ad"}, {"problem": 22, "code": "(fn [x] (reduce + (map (fn [x] (+ 0 1)) x)))", "user": "54e0bb4fe4b024c67c0cf7b8"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "546ac7f8e4b00cfc9eacc160"}, {"problem": 22, "code": "(fn [col] (#(if (= %1 '()) %2 (recur (rest %1) (+ 1 %2))) col 0))", "user": "54f1b4e7e4b024c67c0cf8b5"}, {"problem": 22, "code": "(fn [seq]\n  (reduce (fn [a b] (+ 1 a)) 0 seq))", "user": "546ff835e4b00cfc9eacc1b4"}, {"problem": 22, "code": "(comp inc first reverse (partial map first) (partial map-indexed vector) seq)", "user": "54f0d3fde4b024c67c0cf8a6"}, {"problem": 22, "code": "#(reduce (fn [x _] (inc x)) 0 %)", "user": "5293a603e4b0239c8a67af42"}, {"problem": 22, "code": "(fn my-count [lst]\n  (loop [ls lst, n 0]\n    (if (empty? ls)\n      n\n      (recur (rest ls) (+ n 1)))))", "user": "54f0c18ee4b024c67c0cf8a4"}, {"problem": 22, "code": "(fn [s] (reduce + 0 (map (fn [x] 1) s)))", "user": "54f232f1e4b024c67c0cf8bf"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "54f26266e4b024c67c0cf8c5"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "54f1e004e4b024c67c0cf8b9"}, {"problem": 22, "code": "(fn [c] (reduce (fn [a x] (inc a)) 0 c))", "user": "54f14538e4b024c67c0cf8ae"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "54f2fe9fe4b050824f58f5b8"}, {"problem": 22, "code": "(fn [coll]\n  (loop [coll coll n 0]\n    (if (empty? coll)\n      n\n      (recur (rest coll) (inc n)))))", "user": "54f03f8ce4b024c67c0cf891"}, {"problem": 22, "code": "#(reduce (fn [a x] (+ a 1)) 0 %)", "user": "54f33061e4b050824f58f5bb"}, {"problem": 22, "code": "reduce (fn [x y] (inc x)) 0", "user": "52a0f9c4e4b04e0c58e87bd0"}, {"problem": 22, "code": "reduce (fn [n _] (inc n)) 0", "user": "54f32614e4b050824f58f5ba"}, {"problem": 22, "code": "reduce (fn [acc item] (+ 1 acc)) 0", "user": "504e2d18e4b0f6ff3350c47a"}, {"problem": 22, "code": "#(->> % (map (constantly 1)) (reduce +))", "user": "54f3970fe4b050824f58f5c5"}, {"problem": 22, "code": "(fn cn [lis] (if (= '() lis) 0 (+ (cn (rest lis)) 1)))", "user": "54f3b50de4b050824f58f5c9"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "54f04020e4b024c67c0cf892"}, {"problem": 22, "code": "(fn my-count\n  [coll]\n  (loop [c 0\n         remaining coll]\n   (let [[first & rest] remaining]\n     (if (empty? remaining)\n       c\n       (recur (inc c) rest)))))", "user": "54f2a1b8e4b024c67c0cf8cb"}, {"problem": 22, "code": "(fn [x] (reduce (fn [a b] (+ a b)) (map (fn [x] 1) x)))", "user": "54f405e0e4b0f2f3c5226e79"}, {"problem": 22, "code": "reduce (fn [i _] (inc i)) 0", "user": "54f39cd6e4b050824f58f5c6"}, {"problem": 22, "code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "5272645de4b03e8d9a4a742c"}, {"problem": 22, "code": "(fn [coll]\n  ((fn [s, n]\n    (if (empty? s)\n      n\n      (recur (next s) (inc n)))) coll, 0))", "user": "54f4adc8e4b0f2f3c5226e86"}, {"problem": 22, "code": "(fn [l] (reduce (fn [acc e] (+ acc 1)) 0 l))", "user": "54f4e286e4b0f2f3c5226e8c"}, {"problem": 22, "code": "(fn [s]\n  (loop [n 0 q s]\n    (if (= q [])\n      n\n      (recur (inc n)(rest q))\n    )\n  )\n)", "user": "54f239bde4b024c67c0cf8c1"}, {"problem": 22, "code": "(fn [x] (reduce (fn[y z] (inc y)) 0 x))", "user": "54f4a457e4b0f2f3c5226e83"}, {"problem": 22, "code": "(fn [seq]\n  (loop [s seq n 0]\n    (if (empty? s)\n      n\n      (recur (rest s) (inc n)))))", "user": "54a97853e4b09f271ff37cae"}, {"problem": 22, "code": "(fn [l]\n  (reduce \n   (fn [c _]\n     (inc c))\n   0\n   l))", "user": "54f53d3ce4b0f2f3c5226e90"}, {"problem": 22, "code": "(fn [x] (.length (vec x)))", "user": "54f583bbe4b0f2f3c5226e93"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "54f49c39e4b0f2f3c5226e81"}, {"problem": 22, "code": "(fn [s]\n  (reduce + (map (fn [e] 1) s)))", "user": "54f4ab86e4b0f2f3c5226e84"}, {"problem": 22, "code": "(fn [s] (reduce (fn [x _] (inc x)) 0 s))", "user": "54f5fb57e4b0f2f3c5226e9f"}, {"problem": 22, "code": "(fn[list] (reduce (fn [memo val] (+ memo 1)) 0 list))", "user": "54f3f51ae4b050824f58f5ce"}, {"problem": 22, "code": "(fn countN [x] (if (empty? x) 0 (+ 1 (countN (rest x)))))", "user": "54f64e99e4b0f2f3c5226ea4"}, {"problem": 22, "code": "(fn[x] (reduce + (map (fn[y](identity 1)) x)))", "user": "54f3e216e4b050824f58f5cc"}, {"problem": 22, "code": "(fn\n    [input]\n    (loop [iteration 0]\n      (if (= nil (nth input iteration nil))\n        iteration\n        (recur (inc iteration))\n        )\n      )\n    )", "user": "54f6399be4b0f2f3c5226ea3"}, {"problem": 22, "code": "(fn [x] (loop [lst x, n 0] (if (seq lst) (recur (rest lst) (inc n)) n)))", "user": "54ef8d80e4b024c67c0cf887"}, {"problem": 22, "code": "reduce (fn[a b](+ a 1)) 0", "user": "54f33c1fe4b050824f58f5bc"}, {"problem": 22, "code": "#(loop [c 0 s %] (if (first s) (recur (inc c) (rest s)) c))", "user": "5406eaf3e4b0addc1aec66ad"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "54f73502e4b01ecee9d88817"}, {"problem": 22, "code": "(fn $ [x] (if (empty? x) 0 (+ 1 ($ (rest x)))))", "user": "54f76b83e4b01ecee9d8881b"}, {"problem": 22, "code": "(fn getCount [s]\n  (if (not-empty s) \n    (+ 1 (getCount (rest s)))\n    0\n  )\n)", "user": "54f77213e4b01ecee9d8881d"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %1))", "user": "54f6f00fe4b01ecee9d88814"}, {"problem": 22, "code": "#(loop [c 0, s %]\n        (if (seq s)\n            (recur (inc c) (rest s))\n            c))", "user": "54074fc5e4b0addc1aec66b6"}, {"problem": 22, "code": "reduce (fn [acc x] (inc acc)) 0", "user": "524ea587e4b0541d1855b7e9"}, {"problem": 22, "code": "(comp (partial reduce +) (partial map (fn [_] 1)))", "user": "54f8aabfe4b01ecee9d8882b"}, {"problem": 22, "code": "#((fn countsize [currentsize mylist] \n  (if (= '() mylist) \n    currentsize \n    (countsize (inc currentsize) (rest mylist))))\n  0 %1)", "user": "54d9366ce4b0a52adc2e204e"}, {"problem": 22, "code": "#(+ (first (last (map-indexed vector %))) 1)", "user": "54f76941e4b01ecee9d8881a"}, {"problem": 22, "code": "(fn [vin] (reduce + (map (fn [vseq] (let [x (+ 0 1)] x)) (seq vin))))", "user": "54f0aab1e4b024c67c0cf8a1"}, {"problem": 22, "code": "(fn  [s]\n  (loop [s1 s c 0]\n    (if (nil? s1)\n      c\n      (recur (butlast s1) (+ c 1)))))", "user": "54deab4ce4b024c67c0cf7a5"}, {"problem": 22, "code": "reduce (fn[acc val](+ acc 1)) 0", "user": "54f33e98e4b050824f58f5bd"}, {"problem": 22, "code": "#(inc (last (interleave %1 (range))))", "user": "54f9920ee4b01ecee9d8883f"}, {"problem": 22, "code": "(fn [l] (reduce (fn [a b] (inc a)) 0 l))", "user": "54e84d1ee4b024c67c0cf822"}, {"problem": 22, "code": "#(reduce (fn [x y] (+ 1 x)) 0 %)", "user": "54f97e22e4b01ecee9d8883a"}, {"problem": 22, "code": "(fn [xs]\n  (reduce (fn [acc _] (inc acc)) 0 xs)\n  )", "user": "54f90537e4b01ecee9d88833"}, {"problem": 22, "code": "reduce (fn [a b] (+ 1 a)) 0", "user": "54fa1641e4b0cf870d9346fc"}, {"problem": 22, "code": "#(reduce (fn [acc x] (+ 1 acc)) 0 %)", "user": "54f904c2e4b01ecee9d88832"}, {"problem": 22, "code": "(fn [col]\n  (loop [c col x 0]\n    (if (empty? c)\n      x\n      (recur (rest c) (inc x)))))", "user": "54f92d7fe4b01ecee9d88836"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %1)", "user": "4f03e60d535dcb61093f6b7a"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "539c736ce4b0b51d73faaf2b"}, {"problem": 22, "code": "(fn f\n\t([c] (if (nil? (first c)) 0 (f (rest c) 1)) )\n  ([c i]  (if (nil? (first c)) i (f (rest c) (inc i))) )\n  )", "user": "54d1b6ffe4b0e8a36923e5e6"}, {"problem": 22, "code": "reduce (fn [a _] (inc a)) 0", "user": "54f773bfe4b01ecee9d8881f"}, {"problem": 22, "code": "#(reduce + (map (fn [a] 1) %))", "user": "54eff2bee4b024c67c0cf88d"}, {"problem": 22, "code": "#(reduce (fn [acc _] (inc acc)) 0 %)", "user": "54fc7edce4b07d26eda61d2c"}, {"problem": 22, "code": "(fn how-many [x]\n\t    (if (= ()(rest x))\n\t      1\n\t      (+ 1 (how-many (rest x)))))", "user": "54fae43ae4b0cf870d934708"}, {"problem": 22, "code": "(fn [seq] (loop [seq seq n 0] (if(empty? seq) n (recur (rest seq) (inc n))) ))", "user": "54fa60dfe4b0cf870d934704"}, {"problem": 22, "code": "(fn [coll] (loop [[curr & leftovers] coll a 0] (if curr  (recur leftovers (inc a)) a)))", "user": "549227d8e4b0b312c081ff3f"}, {"problem": 22, "code": "#( reduce (fn [x y] (  inc x  )) 0 % )", "user": "54fc7d89e4b07d26eda61d2b"}, {"problem": 22, "code": "(fn [n] \n  (reduce (fn [x y] (+ x 1)) 0 n ))", "user": "544e5ecae4b0e39780006984"}, {"problem": 22, "code": "(fn [xs]\n  (loop [xs xs acc 0]\n    (if (empty? xs)\n      acc\n      (recur (rest xs) (inc acc)))))", "user": "54fd93bbe4b07d26eda61d36"}, {"problem": 22, "code": "(fn [coll] (reduce (fn [a b] (inc a)) 0 coll))", "user": "54fd5e2de4b07d26eda61d33"}, {"problem": 22, "code": "(fn [xs] (reduce (fn [c xs] (inc c)) 0 xs))", "user": "54f9d900e4b01ecee9d88844"}, {"problem": 22, "code": "(fn [coll]\n  (loop [coll coll c 0]\n    (if (empty? coll)\n      c\n      (recur (rest coll) (inc c)))))", "user": "54fdbe3fe4b07d26eda61d3b"}, {"problem": 22, "code": "(fn f [l] (if (empty? l) 0 (+ 1 (f (rest l)))))", "user": "54137308e4b01498b1a719e0"}, {"problem": 22, "code": "(fn[s]\n  (reduce (fn [t x] (inc t)) 0 s))", "user": "54febf4be4b07d26eda61d45"}, {"problem": 22, "code": "reduce (fn [acc _] (inc acc)) 0", "user": "54ff074de4b07d26eda61d47"}, {"problem": 22, "code": "(fn f [x] (if (empty? x) 0 (inc (f (rest x)))))", "user": "54ff2342e4b07d26eda61d49"}, {"problem": 22, "code": "(fn foo\n  [x]\n  (if (empty? x)\n    0\n    (+ 1 (foo (rest x)))))", "user": "54ff6084e4b07d26eda61d50"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "54ffbad3e4b07d26eda61d54"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "54ff7822e4b07d26eda61d51"}, {"problem": 22, "code": "(fn [col] ((fn mcount [fst rst cnt] (if (= nil fst) cnt (mcount (first rst) (rest rst) (+ 1 cnt)))) (first col) (rest col) 0))", "user": "54ec7f52e4b024c67c0cf853"}, {"problem": 22, "code": "#(loop [result 0 coll %] \n    (if (empty? coll)\n      result\n      (recur (inc result) (rest coll))))", "user": "54eea988e4b024c67c0cf875"}, {"problem": 22, "code": "#(reduce \n    (fn [c a] (inc c))\n     0 %)", "user": "5500ac20e4b07d26eda61d62"}, {"problem": 22, "code": "#(alength (to-array %))", "user": "54de7108e4b024c67c0cf7a2"}, {"problem": 22, "code": "(fn foo\n  \t([xx] (foo xx 1))\n    ([xx n]\n     \t(if (empty? (rest xx)) n (foo (rest xx) (inc n)))))", "user": "55010066e4b07d26eda61d6c"}, {"problem": 22, "code": "(fn [list] (reduce (fn [acc x] (inc acc)) 0 list))", "user": "550065a4e4b07d26eda61d5a"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "5500f6e4e4b07d26eda61d6b"}, {"problem": 22, "code": "reduce (fn [m i] (+ m 1)) 0", "user": "550174b5e4b07d26eda61d73"}, {"problem": 22, "code": "#((fn coun [coll num] (if (not= coll ()) (coun (rest coll) (inc num)) num)) % 0)", "user": "5501de12e4b07d26eda61d7b"}, {"problem": 22, "code": "(fn [l]\n  (loop [i 0 lst l]\n    (if (nil? lst)\n      i\n      (recur (inc i)(next lst)))))", "user": "550111d3e4b07d26eda61d6f"}, {"problem": 22, "code": "(fn f [li]\n  (if (empty? li) 0\n  \t(+ 1 (f (rest li)))))", "user": "5501f45fe4b07d26eda61d7f"}, {"problem": 22, "code": "reduce (fn[cnt coll] (+ 1 cnt)) 0", "user": "54b31445e4b09f271ff37d35"}, {"problem": 22, "code": "(fn [lst]\n  (loop [l lst n 0]\n    (if (empty? l)\n      n\n      (recur (rest l) (inc n)))))", "user": "539338e3e4b0b51d73faaeb9"}, {"problem": 22, "code": "(fn [coll] (reduce (fn [n _] (inc n)) 0 coll))", "user": "55016428e4b07d26eda61d72"}, {"problem": 22, "code": "reduce (fn [i _] (inc i)) 0", "user": "550320f8e4b086ebe8a79c68"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 (vec %))", "user": "55031638e4b086ebe8a79c67"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "55022d7ce4b07d26eda61d84"}, {"problem": 22, "code": "(fn [xs]\n  (loop [cxs xs c 0]\n    (if (empty? cxs)\n      c\n      (recur (rest cxs) (+ c 1)))))", "user": "550212c0e4b07d26eda61d80"}, {"problem": 22, "code": "(fn [li] (\n(fn x [l n] \n  (if (empty? l)\n  n\n  (x (rest l) (inc n))\n  )\n) li 0)\n  )", "user": "55034bf0e4b086ebe8a79c6d"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "550345fee4b086ebe8a79c6c"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "52384eb1e4b0fae3832e99fa"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "54ee1b23e4b024c67c0cf86d"}, {"problem": 22, "code": "(fn [coll]\n  (reduce (fn [a b] (inc a)) 0 coll))", "user": "55044fb8e4b086ebe8a79c7a"}, {"problem": 22, "code": "(fn [x] (reduce (fn [current-count next-element] (inc current-count)) 0 x))", "user": "54fc75fce4b07d26eda61d2a"}, {"problem": 22, "code": "(fn [list] (reduce (fn[x, y](+ x 1)) 0 list))", "user": "550309b9e4b086ebe8a79c65"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "541c5b3be4b01498b1a71a75"}, {"problem": 22, "code": "(fn length [x y] (if (empty? y) x (length (inc x) (rest y))))  0", "user": "54c0cc55e4b0ed20f4ff6f17"}, {"problem": 22, "code": "#(if (string? %) (.length %) (.size %))", "user": "55058a4fe4b086ebe8a79c89"}, {"problem": 22, "code": "(fn [coll] (apply +' (map (fn [x] 1) coll)))", "user": "5500721be4b07d26eda61d5b"}, {"problem": 22, "code": "#(reduce (fn [i _] (inc i)) 0 %)", "user": "55041b5ee4b086ebe8a79c78"}, {"problem": 22, "code": "#(apply + (map (fn [_] 1) %))", "user": "550609b3e4b021ccfedb9695"}, {"problem": 22, "code": "#(reduce (fn [m _] (+ m 1)) 0 %)", "user": "5426200ae4b01498b1a71b16"}, {"problem": 22, "code": "(fn my-count [s]\n  (if (empty? s)\n    0\n    (inc (my-count (next s)))))", "user": "52b36925e4b0c58976d9ad0b"}, {"problem": 22, "code": "reduce (fn [a b] (inc a)) 0", "user": "550730ffe4b021ccfedb96a2"}, {"problem": 22, "code": "(fn [lst]\n  (loop [lst lst\n         c   0]\n    (if (= lst '())\n      c\n      (recur (rest lst) (inc c)))))", "user": "55074092e4b021ccfedb96a4"}, {"problem": 22, "code": "(fn newc [s]\n  (if (nil? (seq s)) 0\n      (+ 1 (newc (rest s)))))", "user": "5501ad6ee4b07d26eda61d76"}, {"problem": 22, "code": "(fn my-count [s]\n  (if (empty? s)\n    0\n    (+ 1 \n       (my-count (rest s)))))", "user": "550615c0e4b021ccfedb9696"}, {"problem": 22, "code": "reduce (fn [x y] (inc x)) 0", "user": "5504dd64e4b086ebe8a79c83"}, {"problem": 22, "code": "(fn count-seq\n ([coll]\n  (count-seq coll 0))\n ([coll x]\n  (if (empty? coll)\n    x\n    (count-seq (rest coll) (+ x 1)))))", "user": "5426fb8fe4b01498b1a71b1f"}, {"problem": 22, "code": "#(inc (first (last (map vector (range) %))))", "user": "529de065e4b04e0c58e87b84"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0  %)", "user": "5165e7eee4b04cc958b892be"}, {"problem": 22, "code": "(fn [coll] (reduce (fn [x y] (inc x)) 0 coll))", "user": "55088bb3e4b06e50f9beb10c"}, {"problem": 22, "code": "(fn [sq]\n  (reduce + (map (fn [x] 1) sq)))", "user": "55074035e4b021ccfedb96a3"}, {"problem": 22, "code": "#(.length (reduce conj [] %))", "user": "5508102ee4b021ccfedb96b0"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "55096255e4b06e50f9beb116"}, {"problem": 22, "code": "(fn  \n  [n]\n\t(loop [bla n counter 0]\n\t  (if (empty? bla)\n\t    counter\n\t    (recur (rest bla) (inc counter)))))", "user": "5412b531e4b01498b1a719d7"}, {"problem": 22, "code": "(fn cnt \n  ([sequ]  \n   \t(if (= [] sequ) 0 (cnt (rest sequ) 1))\n   )\n  ([sequ rt] \n   \t(if (= [] sequ) rt (cnt (rest sequ) (inc rt)))\n  \n  )\n   )", "user": "5509bf71e4b06e50f9beb122"}, {"problem": 22, "code": "(fn [lat]\n  (reduce (fn [x y] (+ x 1)) 0 lat))", "user": "5509b0bce4b06e50f9beb11d"}, {"problem": 22, "code": "reduce (fn [m i] (+ m 1)) 0", "user": "5509a176e4b06e50f9beb119"}, {"problem": 22, "code": "reduce (fn [x y] (+ x 1)) 0", "user": "5509a755e4b06e50f9beb11b"}, {"problem": 22, "code": "(fn [in-seq] \n    (loop [county 0\n            cur-seq in-seq]\n        (if (empty? cur-seq)\n            county\n            (recur (inc county) (rest cur-seq)))))", "user": "54f09599e4b024c67c0cf89d"}, {"problem": 22, "code": "#(alength (to-array %1))", "user": "5509b434e4b06e50f9beb11e"}, {"problem": 22, "code": "(fn [x] (reduce (fn [x y] (inc x)) 0 (vec x)))", "user": "54f5746de4b0f2f3c5226e92"}, {"problem": 22, "code": "(fn[x](loop [i 0 c x] (if (empty? c) i (recur (inc i)(rest c)))))", "user": "54f15cb8e4b024c67c0cf8b1"}, {"problem": 22, "code": "(fn [coll] \n\t(loop \n\t\t[s coll\n\t\t acc 0]\n\t\t(if (seq s) (recur (rest s) (inc acc)) acc)))", "user": "5505ceb3e4b086ebe8a79c8b"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5509a9bee4b06e50f9beb11c"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "550aeaade4b06e50f9beb134"}, {"problem": 22, "code": "(fn c [s] (if (empty? s) 0 (inc (c (rest s)))))", "user": "550aeddae4b06e50f9beb135"}, {"problem": 22, "code": "(fn [coll]\n    (loop [coll coll n 0]\n      (if-not (first coll)\n        n\n        (recur (rest coll) (inc n)))))", "user": "5337bdfee4b0e30313ee6c8c"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "550ac34fe4b06e50f9beb133"}, {"problem": 22, "code": "#(reduce (fn [acc x] (inc acc)) 0 %)", "user": "550b59bae4b06e50f9beb141"}, {"problem": 22, "code": "(fn f [[x & xs] & n]\n   (if (empty? xs) \n     (inc (if (nil? n) 0 (first n)))\n     (f xs (if (nil? (first n)) 1 (inc (first n))))))", "user": "550b5c10e4b06e50f9beb143"}, {"problem": 22, "code": "(fn b [a-list]\n  ((fn a [l n]\n      (if (= l '())\n        n\n        (a (rest l) (+ n 1))))\n   a-list 0))", "user": "550babf3e4b06e50f9beb149"}, {"problem": 22, "code": "reduce (fn [a b](+ a 1)) 0", "user": "54fa25c2e4b0cf870d934700"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "54fa1712e4b0cf870d9346fd"}, {"problem": 22, "code": "#(reduce (fn[a b] (inc a) ) 0 %)", "user": "54ca9311e4b057c6fda3a263"}, {"problem": 22, "code": "(fn [x] (let [b (atom 0)](let [a (atom x)] ( while(not (empty? @a)) (do (swap! a rest) (swap! b inc))))@b))", "user": "55079757e4b021ccfedb96a9"}, {"problem": 22, "code": "(fn [x] (reduce + (map (fn [x] 1) x)))", "user": "550cbb3be4b06e50f9beb155"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "550ccedfe4b06e50f9beb158"}, {"problem": 22, "code": "(fn my-count [s] \n  (loop [s s\n         n 0]\n    \n    (if (empty? s)\n      n\n      (recur (rest s) (inc n)))))", "user": "550c55d0e4b06e50f9beb14d"}, {"problem": 22, "code": "(fn blah\n  ([seq]\n  (blah seq 0))\n  ([seq i]\n  (let [[first & rest] seq]\n  \t(if rest\n    \t(recur rest (inc i))\n      \t(inc i)))))", "user": "54fea37be4b07d26eda61d44"}, {"problem": 22, "code": "reduce (fn [x _] (inc x)) 0", "user": "542725fce4b01498b1a71b22"}, {"problem": 22, "code": "(fn mycount [s]\n  (let [counter (fn ctr [s c]\n                  (if (empty? s) c\n                    (ctr (rest s) (+ c 1))))]\n    (counter s 0)))", "user": "550d54f6e4b06e50f9beb15c"}, {"problem": 22, "code": "reduce (fn [s n] (inc s)) 0", "user": "550cd7d7e4b06e50f9beb159"}, {"problem": 22, "code": "(fn foo [x] (if (empty? x) 0 (+ 1 (foo (rest x)))))", "user": "5509bec5e4b06e50f9beb121"}, {"problem": 22, "code": "#(reduce (fn[x y] (inc x)) 0 %)", "user": "550d4906e4b06e50f9beb15b"}, {"problem": 22, "code": "#((fn mCount [n [h & t]] (if (= h nil) n (mCount (inc n) t))) 0 %)", "user": "550e0373e4b06e50f9beb162"}, {"problem": 22, "code": "#(reduce (fn [a b] (inc a)) 0 %1)", "user": "550e0951e4b06e50f9beb163"}, {"problem": 22, "code": "reduce (fn [acc x] (inc acc)) 0", "user": "550da0c7e4b06e50f9beb15e"}, {"problem": 22, "code": "#(loop [coll % n 0]\n    (if (empty? coll)\n      n\n      (recur (rest coll) (inc n))))", "user": "550e8e04e4b06e50f9beb167"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "550ed248e4b06e50f9beb16c"}, {"problem": 22, "code": "(partial \n (fn [n l]\n  (if (empty? l)\n    n\n    (recur (+ 1 n) (rest l) ))) 0)", "user": "5310a7e3e4b08068f379ecd8"}, {"problem": 22, "code": "(fn [coll]\n  (apply + (map (fn [x] 1) coll)))", "user": "525599bfe4b0541d1855b9e8"}, {"problem": 22, "code": "(fn [coll] (reduce (fn [x y] (inc x)) 0 coll))", "user": "550eeeb4e4b06e50f9beb16e"}, {"problem": 22, "code": "(fn [coll] (reduce (fn [x y] (inc x)) 0 coll))", "user": "550f1e51e4b06e50f9beb172"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "550eb23ae4b06e50f9beb168"}, {"problem": 22, "code": "(fn [coll] (reduce (fn [m i] (+ m 1)) 0 coll))", "user": "550f70bee4b06e50f9beb177"}, {"problem": 22, "code": "(fn [coll] (loop [cur 0 coll coll] (if (first coll) \n                               (recur (+ 1 cur) (drop 1 coll))\n                                cur)))", "user": "54bca097e4b0ed20f4ff6ed4"}, {"problem": 22, "code": "(fn my-count [x] (if (nil? x) 0 (inc (my-count (next x)))))", "user": "5507cfd3e4b021ccfedb96ad"}, {"problem": 22, "code": "#(loop [s %1 c 0] (if (seq s) (recur (drop 1 s) (inc c)) c))", "user": "550fdc1de4b06e50f9beb17d"}, {"problem": 22, "code": "(fn [lst]\n  (loop [l lst, i 0]\n    (if (empty? l)\n      i\n      (recur (rest l) (+ i 1)))))", "user": "55101237e4b06e50f9beb181"}, {"problem": 22, "code": "(fn cnter [coll]  (if (not-empty coll) (inc (cnter (rest coll)) ) 0))", "user": "54ccf9d5e4b057c6fda3a295"}, {"problem": 22, "code": "#(let [cnt (fn [s cnt] (if (first s) (recur (rest s) (inc cnt)) cnt))] (cnt % 0))", "user": "550ff2a3e4b06e50f9beb17f"}, {"problem": 22, "code": "reduce (fn [ x y] (inc x)) 0", "user": "54cbd97ae4b057c6fda3a283"}, {"problem": 22, "code": "(fn [coll]\n  (loop [acc 0\n         remaining-coll coll]\n    (if (empty? remaining-coll)\n      acc\n      (recur (+ acc 1) (rest remaining-coll)))))", "user": "54bd6cb2e4b0ed20f4ff6ede"}, {"problem": 22, "code": "(fn my-count\n  ([x] (my-count 0 x))\n  ([cnt x] (if (empty? x) cnt (recur (inc cnt) (rest x))))\n  )", "user": "550e52dbe4b06e50f9beb165"}, {"problem": 22, "code": "(fn [col]\n  (loop [i 0\n         col col]\n    (if (nil? col)\n      i\n      (recur (+ i 1)\n             (next col)))))", "user": "5511b44be4b06e50f9beb197"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "5511dfafe4b06e50f9beb19c"}, {"problem": 22, "code": "(fn [sq] (loop [i 0 ls sq] (if (seq ls) (recur (inc i) (rest ls)) i)))", "user": "5510f734e4b06e50f9beb18f"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5512492be4b06e50f9beb1a2"}, {"problem": 22, "code": "#(loop [d % c 0] (if(empty? d) c (recur (rest d) (inc c))))", "user": "55126109e4b06e50f9beb1a5"}, {"problem": 22, "code": "#(reduce (fn [x y] (+ x 1)) 0 %)", "user": "55092319e4b06e50f9beb113"}, {"problem": 22, "code": "(fn [xs] (reduce (fn [x y] (inc x)) 0 xs))", "user": "5512967ee4b06e50f9beb1ae"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "55129a74e4b06e50f9beb1b4"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "55116582e4b06e50f9beb192"}, {"problem": 22, "code": "(fn f [s]\n    \n    (if (seq s)\n      (inc (f (rest s)))\n      0)\n\t    \n  )", "user": "5481e55ce4b0e286459a1175"}, {"problem": 22, "code": "(fn [coll]\n  (reduce (fn [x y] (inc x)) 0 coll))", "user": "5512cd55e4b055c2f668d4ba"}, {"problem": 22, "code": "(fn [coll]\n  (loop [coll coll\n         n 0]\n    (if (= (first coll) nil)\n      n\n      (recur (rest coll) (inc n)))))", "user": "5512aca6e4b055c2f668d4b4"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5512b15ae4b055c2f668d4b5"}, {"problem": 22, "code": "reduce (fn [s _] (+ s 1)) 0", "user": "53dd43d1e4b0d874e779ae29"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "546be022e4b00cfc9eacc171"}, {"problem": 22, "code": "(fn mycount [items] (reduce + (map (fn one [x] 1) items)))", "user": "5513dec7e4b055c2f668d4cd"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "5510838ee4b06e50f9beb185"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5514534ce4b055c2f668d4d3"}, {"problem": 22, "code": "(fn [coll] \n  (reduce (fn [prev _] (inc prev)) 0 coll))", "user": "5514a60fe4b055c2f668d4d7"}, {"problem": 22, "code": "#(reduce (fn [i, s] (inc i)) 0 %)", "user": "5511fd7ee4b06e50f9beb19e"}, {"problem": 22, "code": "(fn [coll]\n  (loop [i 0 coll coll]\n    (if (empty? coll)\n      i\n      (recur (inc i) (rest coll)))))", "user": "55151417e4b055c2f668d4da"}, {"problem": 22, "code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "551532c5e4b055c2f668d4dd"}, {"problem": 22, "code": "#(reduce (fn[x _](+ x 1)) 0 %)", "user": "55154abce4b055c2f668d4e0"}, {"problem": 22, "code": "(fn [x] (loop [n 0 l x] (if (empty? l) n (recur (+ n 1) (rest l)))))", "user": "5515649fe4b055c2f668d4e3"}, {"problem": 22, "code": "#(reduce (fn [all _] (+ 1 all)) 0 %)", "user": "55158345e4b055c2f668d4e8"}, {"problem": 22, "code": "#(alength (to-array %1))", "user": "551535cee4b055c2f668d4df"}, {"problem": 22, "code": "#(reduce (fn [c n] (+ c 1)) 0 %)", "user": "543115a0e4b0dad94371f2e1"}, {"problem": 22, "code": "(fn [a]\n  (reduce + 0 (map (fn [_] 1) a)))", "user": "5515b138e4b055c2f668d4ed"}, {"problem": 22, "code": "#(if (nil? (first %2))\n            %1\n            (recur (+ 1 %1) (rest %2))\n            ) 0", "user": "550340d9e4b086ebe8a79c6b"}, {"problem": 22, "code": "(fn len [elements]\n  (if (empty? elements) 0 (+ 1 (len (rest elements)))))", "user": "5515c8b1e4b055c2f668d4f2"}, {"problem": 22, "code": "#(reduce + (map (fn [_] 1) %))", "user": "5510aa92e4b06e50f9beb188"}, {"problem": 22, "code": "(fn [c]\n  (apply + (map (fn [x] 1) c)))", "user": "55164856e4b06a49daca83b3"}, {"problem": 22, "code": "(fn [coll] \n    (loop [lst coll, acc 0]\n      (if (empty? lst)\n        acc\n        (recur (rest lst) (+ acc 1))\n        )))", "user": "533c2605e4b0e30313ee6cd7"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "52f49268e4b05e3f0be25f22"}, {"problem": 22, "code": "(fn cnt [x]\n  (if (seq x)\n    (inc (cnt (next x)))\n    0))", "user": "5516ac4de4b06a49daca83b6"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5516bd41e4b06a49daca83b7"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "551382bee4b055c2f668d4cb"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "546805d6e4b00cfc9eacc134"}, {"problem": 22, "code": "(fn c [a] (if (= a '()) 0 (+ 1 (c (rest a)))))", "user": "5515a5b3e4b055c2f668d4eb"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "551760a5e4b06a49daca83c3"}, {"problem": 22, "code": "(fn [coll] (reduce (fn [res item] (+ res 1)) 0 coll))", "user": "5510d948e4b06e50f9beb18d"}, {"problem": 22, "code": "reduce (fn [x y] (+ x 1)) 0", "user": "5517f5c5e4b06a49daca83c7"}, {"problem": 22, "code": "(fn c0unt\n  ([coll](c0unt coll 0))\n  ([coll num-elements]\n  \t(if (empty? coll)\n      num-elements\n      (recur (rest coll) (+ 1 num-elements)))))", "user": "55171140e4b06a49daca83be"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "55170dd9e4b06a49daca83bd"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "54e604a1e4b024c67c0cf801"}, {"problem": 22, "code": "(fn [seq]\n  (loop [remaining seq \n         cnt 0]\n    (if (empty? remaining)\n      cnt\n      (recur (rest remaining) (inc cnt)))))", "user": "55183a11e4b06a49daca83ca"}, {"problem": 22, "code": "(fn [v] (\n  (fn [v i]\n    (if (= v ())\n      i\n      (recur (rest v) (inc i))\n     )\n  ) v 0)\n)", "user": "55188c5de4b06a49daca83cc"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "50f4eee0e4b004d36493052d"}, {"problem": 22, "code": "(fn my-count[lst]\n  (if (empty? lst)\n    0\n    (+ 1 (my-count (rest lst)))))", "user": "551747e0e4b06a49daca83c1"}, {"problem": 22, "code": "(fn [l] (reduce (fn [m x] (inc m)) 0 l))", "user": "551589cee4b055c2f668d4e9"}, {"problem": 22, "code": "#(reduce (fn [acc _] (inc acc)) 0 %)", "user": "51bb08a4e4b0fe3ecfb46446"}, {"problem": 22, "code": "(fn [coll]\n  (loop [coll coll\n         n 0]\n    (if (empty? coll)\n      n\n      (recur (rest coll) (+ n 1)))))", "user": "5519a856e4b00ace28fe6e30"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5516fd2ce4b06a49daca83bb"}, {"problem": 22, "code": "(fn [coll]\n  (reduce +\n    (let [c 0]\n      (map (fn [x] (inc c)) coll))))", "user": "50c6052ce4b0c9dc10d15c56"}, {"problem": 22, "code": "(partial reduce (fn [c _] (inc c)) 0)", "user": "54d9f7f1e4b024c67c0cf751"}, {"problem": 22, "code": "(fn [x]\n  (loop [x x acc 0]\n    (if (empty? x)\n      acc\n      (recur (rest x) (inc acc)))))", "user": "551a21ece4b091ff45eda993"}, {"problem": 22, "code": "#(loop [x % \n        i 0] \n   (if (nil? x)\n     i\n     (recur (next x) (inc i))))", "user": "551a64cde4b091ff45eda996"}, {"problem": 22, "code": "reduce (fn [x y] (inc x)) 0", "user": "550b5a53e4b06e50f9beb142"}, {"problem": 22, "code": "reduce (fn [x _] (inc x)) 0", "user": "514f0a28e4b019235f6c059a"}, {"problem": 22, "code": "reduce (fn [x y] (inc x)) 0", "user": "551acf9de4b07993ea3788c5"}, {"problem": 22, "code": "(fn [l]\n  (loop [l l n 0]\n  \t(if (empty? l) n\n      (recur (rest l) (+ n 1)))))", "user": "551afdf8e4b07993ea3788cb"}, {"problem": 22, "code": "(fn [datalist] (reduce (fn [cnt rest] (inc cnt)) 0 datalist))", "user": "551acc5ae4b07993ea3788c4"}, {"problem": 22, "code": "#(reduce (fn [a, b] (+ a 1)) 0 %)", "user": "5519c157e4b00ace28fe6e32"}, {"problem": 22, "code": "#(loop [i 1 j %1]\n  (if (= () (rest j))\n    i\n    (recur (inc i) (rest j))\n    ))", "user": "550a3fa4e4b06e50f9beb12d"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "54116e2fe4b01498b1a719c4"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "551b329ae4b07993ea3788cf"}, {"problem": 22, "code": "(fn my-count \n  ([col] (my-count col 0))\n  ([col num] \n  \t(if-let [x (next col)]\n      (my-count x (inc num))\n      (inc num))))", "user": "551c594de4b07993ea3788dc"}, {"problem": 22, "code": "(fn my-count [l]\n   (if (empty? l)\n     0\n     (+ 1 (my-count (rest l)))))", "user": "551c6bcee4b07993ea3788df"}, {"problem": 22, "code": "(fn [xs] (apply + (map (fn [x] 1) xs)))", "user": "5515f96ce4b055c2f668d4f7"}, {"problem": 22, "code": "(fn [s]\n  (loop [i 0]\n    (if (empty? (drop i (seq s)))\n      i\n      (recur (inc i)))))", "user": "551b8e2ae4b07993ea3788d3"}, {"problem": 22, "code": "#(loop [x % y 0] (if (empty? x) y (recur (rest x) (inc y))))", "user": "551cade8e4b07993ea3788e2"}, {"problem": 22, "code": "#(.size (seq %))", "user": "54f9c4dfe4b01ecee9d88841"}, {"problem": 22, "code": "reduce (fn [a b] (inc a)) 0", "user": "551c66dae4b07993ea3788de"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "551dfd81e4b030e6a24d00e0"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "551c1024e4b07993ea3788d9"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5512be9ae4b055c2f668d4b6"}, {"problem": 22, "code": "(fn [coll]\n  (reduce + (map (fn [x] 1) coll)))", "user": "550a2c61e4b06e50f9beb12b"}, {"problem": 22, "code": "(fn [x] \n  (loop [c 0\n         l x]\n      (if (empty? l)\n        c\n        (recur (+ c 1) (rest l))\n        )\n      )\n  )", "user": "550bac80e4b06e50f9beb14a"}, {"problem": 22, "code": "(fn rec [s] (if (empty? s)\n              0\n              (+ 1\n                 (rec (rest s)))))", "user": "551ed214e4b08d5046aa8a4d"}, {"problem": 22, "code": "(fn [col] (reduce (fn [r _] (inc r)) 0 col))", "user": "551e8627e4b08d5046aa8a45"}, {"problem": 22, "code": "#(reduce (fn [x _] (inc x)) 0 %)", "user": "551ee974e4b08d5046aa8a50"}, {"problem": 22, "code": "(fn [coll] (reduce + (map (fn [x] 1) (seq coll))))", "user": "504e1c31e4b0f6ff3350c461"}, {"problem": 22, "code": "(fn my-count [s] \n  (if (= s ()) 0 (+ (my-count (drop-last s)) 1) ))", "user": "514504c2e4b021a5ff8301fc"}, {"problem": 22, "code": "(fn osiem [lt]\n  (if (empty? lt)\n    0\n    (+ 1 (osiem (rest lt)))))", "user": "5517a352e4b06a49daca83c5"}, {"problem": 22, "code": "reduce (fn [x y] (inc x)) 0", "user": "4e443201535dc968683fc4a7"}, {"problem": 22, "code": "(fn c [sek] (reduce (fn [o t] (inc o)) 0 sek ))", "user": "550f80c1e4b06e50f9beb178"}, {"problem": 22, "code": "#(apply + (map (constantly 1) %))", "user": "551ecb76e4b08d5046aa8a4c"}, {"problem": 22, "code": "#(apply + (take-nth 2 (rest (apply list(interleave %1 (repeat 1))))))", "user": "55129632e4b06e50f9beb1aa"}, {"problem": 22, "code": "#(loop [c % a 0] (if (seq c) (recur (rest c) (inc a)) a))", "user": "5516d26de4b06a49daca83b9"}, {"problem": 22, "code": "#(apply + (map (fn [x] 1) %))", "user": "551e312ce4b030e6a24d00e5"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "551ee4dde4b08d5046aa8a4f"}, {"problem": 22, "code": "(fn a [l] (if (empty? l) 0 (inc (a (rest l)))))", "user": "5512ec30e4b055c2f668d4bc"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "55206cf3e4b08d5046aa8a62"}, {"problem": 22, "code": "(fn[coll] (alength (to-array coll)))", "user": "5520666fe4b08d5046aa8a61"}, {"problem": 22, "code": "(fn numInSeq [col] (if (= col nil) 0 (inc (numInSeq (next col)))))", "user": "55204412e4b08d5046aa8a5f"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5520d6b8e4b08d5046aa8a65"}, {"problem": 22, "code": "(fn [z] (reduce (fn [x y] (+ x 1)) 0 z))", "user": "55205564e4b08d5046aa8a60"}, {"problem": 22, "code": "(fn [s] (reduce + 0 (map (fn [x] 1) s)))", "user": "551ebcd7e4b08d5046aa8a4a"}, {"problem": 22, "code": "(fn foo [x] (if (empty? x) 0 (+ 1 (foo (rest x)))))", "user": "5520974be4b08d5046aa8a63"}, {"problem": 22, "code": "(fn [coll]\n  (loop [coll coll\n         len 0]\n    (if (nil? (seq coll))\n      len\n      (recur (rest coll)\n             (+ len 1)))))", "user": "551ff12ae4b08d5046aa8a5a"}, {"problem": 22, "code": "#(reduce + (map (fn[x] 1) %))", "user": "5521a5a9e4b0882d96d09197"}, {"problem": 22, "code": "#(reduce (fn [ct idc] (+ ct 1)) 0 %)", "user": "5520af03e4b08d5046aa8a64"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "54ab717be4b09f271ff37cca"}, {"problem": 22, "code": "reduce (fn [accum x] (+ 1 accum)) 0", "user": "551b87dfe4b07993ea3788d2"}, {"problem": 22, "code": "(fn [s] (inc (last (interleave s (range)))))", "user": "552281cae4b0882d96d0919f"}, {"problem": 22, "code": "(fn [sq](loop [sum 0 s sq]\n            (if (empty? s)\n            sum\n           (recur (inc sum)(rest s))\n              )\n          )\n  )", "user": "552102bde4b08d5046aa8a67"}, {"problem": 22, "code": "(fn [col]\n(reduce (fn [x y] (+ x 1)) 0 col))", "user": "54dce6dbe4b024c67c0cf78d"}, {"problem": 22, "code": "(fn [s] (reduce (fn [x y] (inc x)) 0 s))", "user": "55229495e4b0882d96d091a4"}, {"problem": 22, "code": "(fn [coll]\n  (loop [coll coll cnt 0]\n    (if (= coll [])\n      cnt\n      (recur (drop 1 coll) (inc cnt)))))", "user": "546cef70e4b00cfc9eacc188"}, {"problem": 22, "code": "(fn [lst] (loop [characters 0, remaining lst]\n            (if (empty? remaining)\n              characters\n              (recur (inc characters) (rest remaining)))))", "user": "551d5cb9e4b07993ea3788e9"}, {"problem": 22, "code": "(fn [lst] (loop [characters 0, remaining lst]\n            (if (empty? remaining)\n              characters\n              (recur (inc characters) (rest remaining)))))", "user": "5522a795e4b0882d96d091a7"}, {"problem": 22, "code": "(fn [x] (reduce + (map #( if % 1) x)))", "user": "5515b68de4b055c2f668d4ef"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "55201d18e4b08d5046aa8a5d"}, {"problem": 22, "code": "(fn[x] (reduce (fn[y z] (+ y 1)) 0 x))", "user": "5522234ee4b0882d96d0919d"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "5522cd9ae4b0882d96d091ab"}, {"problem": 22, "code": "(fn [coll]\n  (loop [coll coll, acc 0]\n    (if (empty? coll)\n      acc\n      (recur (rest coll) (inc acc)))))", "user": "552356fae4b0882d96d091af"}, {"problem": 22, "code": "(fn [collection]\n  (loop [i 0\n         coll collection]\n    (println (str coll))\n    (if (empty? coll)\n      i\n      (recur (+ i 1) (rest coll))\n    )\n  )\n)", "user": "5518c802e4b06a49daca83cd"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5521c33ce4b0882d96d0919a"}, {"problem": 22, "code": "(fn [x] (reduce + (map (fn [y] 1) x)))", "user": "551a713ae4b091ff45eda997"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "55218bf0e4b0882d96d09196"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5523fce8e4b0882d96d091b4"}, {"problem": 22, "code": "#( loop [cnt 0 sequence %] (if (empty? sequence) cnt (recur (inc cnt) (rest sequence))) )", "user": "551da715e4b030e6a24d00de"}, {"problem": 22, "code": "#( (fn [sq p]   \n     (if (not (empty? sq))      \n      (recur (rest sq) (inc p))\n      p \n    )\n)\n   % 0)", "user": "55132a33e4b055c2f668d4c1"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5508a292e4b06e50f9beb10f"}, {"problem": 22, "code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "54cbfb6ae4b057c6fda3a288"}, {"problem": 22, "code": "reduce (fn [prev _] (+ prev 1)) 0", "user": "552456e3e4b0882d96d091c2"}, {"problem": 22, "code": "#(reduce + (map  (constantly 1) %))", "user": "55249f64e4b0882d96d091c6"}, {"problem": 22, "code": "(fn[array]\n  (reduce + (map (fn[x]1) array))\n  )", "user": "55240916e4b0882d96d091b6"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5523f23ce4b0882d96d091b3"}, {"problem": 22, "code": "#(.size (vec %))", "user": "55129c5ce4b06e50f9beb1b5"}, {"problem": 22, "code": "reduce (fn [x y] (inc x)) 0", "user": "551bd6e1e4b07993ea3788d6"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "552509dfe4b0882d96d091ca"}, {"problem": 22, "code": "#(.length (vec %))", "user": "534046e3e4b085b17e897daa"}, {"problem": 22, "code": "(fn [x] (loop  [num 0 eles x] \n    (if (empty? eles)\n      num\n      (recur (inc num) (rest eles)))))", "user": "55097c25e4b06e50f9beb117"}, {"problem": 22, "code": "#(reduce (fn [x y] (+ x 1)) 0 %)", "user": "5512966be4b06e50f9beb1ad"}, {"problem": 22, "code": "(fn my-count [s] (if (= s '()) 0 (+ 1 (my-count (rest s)))))", "user": "55253217e4b0882d96d091ce"}, {"problem": 22, "code": "(fn [x]\n  (loop [i 0\n         v x]\n    (if (empty? v)\n      i\n      (recur (inc i) (rest v))\n    )\n  )\n)", "user": "55252392e4b0882d96d091cc"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "55245232e4b0882d96d091c0"}, {"problem": 22, "code": "#(apply + (map (fn [x] 1) %))", "user": "552568e5e4b0ffed3738f907"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "55256426e4b0ffed3738f905"}, {"problem": 22, "code": "#(reduce + (map (fn [_] 1) %))", "user": "5524120fe4b0882d96d091b7"}, {"problem": 22, "code": "(fn cnt [l] (reduce + (map (fn [x] 1) l)))", "user": "5525d882e4b0ffed3738f910"}, {"problem": 22, "code": "#(reduce (fn [memo, item] (+ memo 1)) 0 %)", "user": "552621d0e4b0ffed3738f914"}, {"problem": 22, "code": "(fn [alist]\n  (loop [c 0 l alist]\n    (if (empty? l)\n      c\n      (recur (+ c 1) (rest l))))\n  )", "user": "552592bee4b0ffed3738f90c"}, {"problem": 22, "code": "(fn [l] (loop [x l c 0] (if (empty? x) c (recur (rest x) (inc c)))))", "user": "55250331e4b0882d96d091c9"}, {"problem": 22, "code": "(fn count-new [object] \n  (if (empty? object) 0\n    (+ 1 (count-new (rest object)))))", "user": "552689cfe4b0ffed3738f91e"}, {"problem": 22, "code": "(fn total-num [x] \n  (if (empty? x) 0\n    (+ 1 (total-num (rest x)))))", "user": "55268e8de4b0ffed3738f91f"}, {"problem": 22, "code": "#(alength (to-array %))", "user": "55253799e4b0882d96d091cf"}, {"problem": 22, "code": "(fn [s] (reduce + (map (constantly 1) s)))", "user": "5521e8cbe4b0882d96d0919b"}, {"problem": 22, "code": "(fn [collection] (+ 1 (last (map-indexed (fn [item index] item) collection))))", "user": "5524f21fe4b0882d96d091c7"}, {"problem": 22, "code": "(fn c [col] (if (empty? col) 0 (inc (c (rest col)))))", "user": "55279298e4b0ffed3738f92f"}, {"problem": 22, "code": "#(reduce (fn[x y] (inc x)) 0 %)", "user": "5526383ee4b0ffed3738f917"}, {"problem": 22, "code": "(fn [col]\n  (loop [x 1\n         col col]\n    (if (empty? (rest col))\n      x\n      (recur (inc x) (rest col)))))", "user": "54f14aa6e4b024c67c0cf8af"}, {"problem": 22, "code": "(fn xx[x]\n(if (first x)\n(+(xx (rest x)) 1)0\n))", "user": "552800d7e4b0ffed3738f93a"}, {"problem": 22, "code": "(fn [x] (reduce + (map (fn [y] 1) x ) ) )", "user": "550c81c6e4b06e50f9beb150"}, {"problem": 22, "code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "55285e60e4b0ffed3738f93e"}, {"problem": 22, "code": "reduce (fn [i a] (inc i)) 0", "user": "55264e02e4b0ffed3738f919"}, {"problem": 22, "code": "(fn coun [a] \n  (if \n    (= a '())\n    0\n    (+ (coun (rest a)) 1)))", "user": "55244734e4b0882d96d091bf"}, {"problem": 22, "code": "(fn [a]\n  (loop [a a\n         c 0]\n    (if (seq a)\n      (recur (rest a) (inc c))\n      c)))", "user": "54ea02c5e4b024c67c0cf838"}, {"problem": 22, "code": "#(reduce (fn [acc n] (inc acc)) 0 %)", "user": "551a380fe4b091ff45eda994"}, {"problem": 22, "code": "(fn [x]\n  (reduce + (map (fn [y] 1) x))\n  )", "user": "551e7267e4b030e6a24d00e9"}, {"problem": 22, "code": "(fn size [x] (if (empty? x) 0 (+ 1 (size (rest x)))))", "user": "5528a8cae4b0ffed3738f940"}, {"problem": 22, "code": "#(reduce (fn [a b] (inc a)) 0 %)", "user": "4fc57c4ce4b0ee37620e17f6"}, {"problem": 22, "code": "(fn f [x] (loop [a x, b 0] (if (empty? a) b (recur (rest a) (+ b 1)))))", "user": "55280930e4b0ffed3738f93b"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5529662ce4b0ffed3738f94a"}, {"problem": 22, "code": "(fn c [s] (if (seq s) (+ 1 (c (rest s))) 0))", "user": "505106fee4b05ab4c7e07d38"}, {"problem": 22, "code": "#(reduce (fn [a b] (inc a)) 0 %)", "user": "55297a7ae4b0ffed3738f94b"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5529892ce4b0ffed3738f94c"}, {"problem": 22, "code": "(fn [coll] (reduce (fn [c _] (inc c)) 0 coll))", "user": "551f1781e4b08d5046aa8a52"}, {"problem": 22, "code": "(fn [s] (reduce (fn [x y] (inc x)) 0 s))", "user": "55231800e4b0882d96d091ad"}, {"problem": 22, "code": "#(apply + (vals (frequencies %)))", "user": "5517331ae4b06a49daca83c0"}, {"problem": 22, "code": "(fn seqcount [s] (if (= s ()) 0 (+ (seqcount (rest s)) 1)))", "user": "5528ecd1e4b0ffed3738f942"}, {"problem": 22, "code": "(fn how-many [x] (if (= '() x) 0 (+ 1 (how-many (rest x)))))", "user": "552949e5e4b0ffed3738f948"}, {"problem": 22, "code": "(fn mycount [l] (if (seq l) (+ 1 (mycount (rest l))) 0))", "user": "55293b17e4b0ffed3738f945"}, {"problem": 22, "code": "(fn [value] (reduce (fn [acc value] (inc acc)) 0 value))", "user": "5404e61de4b0addc1aec6661"}, {"problem": 22, "code": "reduce (fn [c & args ] (+ c 1)) 0", "user": "552a8bbae4b0ffed3738f956"}, {"problem": 22, "code": "(fn [seq]\n  (alength (to-array seq)))", "user": "54d100abe4b0e8a36923e5d8"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "552a0686e4b0ffed3738f951"}, {"problem": 22, "code": "#(reduce (fn [a b] (+ a 1)) 0 %)", "user": "552a672de4b0ffed3738f954"}, {"problem": 22, "code": "(fn [xs]\n  (reduce (fn [sum _] (inc sum)) 0 xs))", "user": "55295b5de4b0ffed3738f949"}, {"problem": 22, "code": "(fn [xs] (reduce (fn [a,b] (+ a 1)) 0 xs))", "user": "552b6ddbe4b0ffed3738f965"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "55252a09e4b0882d96d091cd"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "54f081e1e4b024c67c0cf89b"}, {"problem": 22, "code": "#(reduce (fn [c v] (+ 1 c)) 0 %)", "user": "552694e7e4b0ffed3738f920"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %1))", "user": "552bab7fe4b0ffed3738f966"}, {"problem": 22, "code": "(fn new-count \n  [[x & xs]] \n  (if (empty? xs) \n    1 \n    (inc (new-count xs))))", "user": "550d9452e4b06e50f9beb15d"}, {"problem": 22, "code": "reduce (fn [a b] (+ a 1)) 0", "user": "552c0bf9e4b0ffed3738f96d"}, {"problem": 22, "code": "(fn [x] (reduce (fn [y z] (inc y)) 0 x))", "user": "552c1a0fe4b076ab5578f7d7"}, {"problem": 22, "code": "(fn [y] (reduce + (map (fn [x] 1) y)))", "user": "552ca546e4b076ab5578f7da"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5527ac3fe4b0ffed3738f933"}, {"problem": 22, "code": "(fn [x]\n  (loop [elem x length 0]\n    (if (empty? elem)\n      length\n      (recur (rest elem) (+ length 1)))))", "user": "55265376e4b0ffed3738f91b"}, {"problem": 22, "code": "(fn c [x]\n  (if (= x '())\n    0\n    (+ 1 (c (rest x)))))", "user": "552d2e5ae4b076ab5578f7e2"}, {"problem": 22, "code": "#(loop [counter 0\n       seq %]\n   (if (empty? seq) counter\n     (recur (inc counter) (rest seq))))", "user": "552bc0f5e4b0ffed3738f968"}, {"problem": 22, "code": "reduce (fn [a b] (+ a 1)) 0", "user": "552d9013e4b076ab5578f7ea"}, {"problem": 22, "code": "#(reduce\n  (fn [m e]\n    (inc m))\n  0\n  %)", "user": "552d2e4fe4b076ab5578f7e1"}, {"problem": 22, "code": "(fn [x]\n  (loop [remaining x i 0]\n    (if (= [] remaining) i\n      (recur (rest remaining) (inc i))\n      )))", "user": "552e0f47e4b076ab5578f7ed"}, {"problem": 22, "code": "#(reduce (fn [a _] (inc a)) 0 %)", "user": "550033a8e4b07d26eda61d59"}, {"problem": 22, "code": "#(reduce (fn [acc e] (inc acc)) 0 %)", "user": "55129636e4b06e50f9beb1ab"}, {"problem": 22, "code": "reduce (fn [x y] (inc x)) 0", "user": "5524fff0e4b0882d96d091c8"}, {"problem": 22, "code": "(fn [coll]\n  (reduce (fn [x y] (inc x)) 0 coll))", "user": "552d5268e4b076ab5578f7e6"}, {"problem": 22, "code": "(fn [initial-seq]\n  (loop [result 0, seq initial-seq]\n    (if (nil? seq) result\n        (recur (+ 1 result) (next seq)))))", "user": "539118b2e4b0b51d73faaea1"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "54fe5523e4b07d26eda61d41"}, {"problem": 22, "code": "(fn [s] (reduce (fn [acc _] (inc acc)) 0 s))", "user": "53623eaee4b0243289761e4f"}, {"problem": 22, "code": "#(reduce + 0 (map (constantly 1) %))", "user": "552fdf02e4b076ab5578f807"}, {"problem": 22, "code": "#(.size (vec %))", "user": "54dda2b1e4b024c67c0cf796"}, {"problem": 22, "code": "(fn [x]\n  (loop [x x\n         c 0]\n    (if (empty? x)\n      c\n      (recur (rest x) (inc c))))\n  )", "user": "5530b827e4b076ab5578f818"}, {"problem": 22, "code": "#(alength (to-array %))", "user": "5380a27ae4b06839e8705ec4"}, {"problem": 22, "code": "reduce (fn [x y] (+ 1 x)) 0", "user": "54980edae4b0b312c081ff79"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "553024c3e4b076ab5578f80d"}, {"problem": 22, "code": "(fn len [xs] (case xs\n           [] 0\n           (+ 1 (len (rest xs)))))", "user": "55316b8ae4b076ab5578f825"}, {"problem": 22, "code": "#(reduce (fn [a _] (inc a)) 0 %)", "user": "5531e445e4b09218d5f44f76"}, {"problem": 22, "code": "(fn cnt \n    ([l]\n        (cnt l 0)\n    )\n    ([l i]\n        (if (= l [])\n            i\n            (cnt (rest l) (inc i))\n        )\n    )\n)", "user": "5531c9c0e4b076ab5578f82a"}, {"problem": 22, "code": "(fn [x]\n  (loop [x x\n         i 1]\n    (if (= (rest x) '())\n    \ti\n    \t(recur (rest x) (inc i))\n      )\n    )\n  )", "user": "55327428e4b09218d5f44f7d"}, {"problem": 22, "code": "(fn [sequence] (reduce (fn [acc i] (inc acc)) 0 sequence))", "user": "535d8d8fe4b04ce2eb3ed2c4"}, {"problem": 22, "code": "(fn c-count\n  ([s]\n   (c-count (rest s) 1))\n  ([s i]\n   (if (empty? s)\n     i\n     (c-count (rest s) (+ 1 i)))))", "user": "5526d0a9e4b0ffed3738f927"}, {"problem": 22, "code": "(fn [c]\n  (reduce (fn [a b] (+ 1 a)) 0 c))", "user": "552e92d3e4b076ab5578f7f2"}, {"problem": 22, "code": "(fn boom [x] (if (empty? x) 0 (+ (boom (rest x)) 1 ) ) )", "user": "55327ad3e4b09218d5f44f7f"}, {"problem": 22, "code": "#(apply + (map (fn [x] 1) %))", "user": "552ed75ae4b076ab5578f7f9"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "55306f9de4b076ab5578f814"}, {"problem": 22, "code": "reduce (fn [mem x] (inc mem)) 0", "user": "5531f8e7e4b09218d5f44f79"}, {"problem": 22, "code": "(fn aa [x]\n  (loop[dataset x cnt 0]\n        (if(not-empty dataset)\n          (recur (drop 1 dataset)(inc cnt))\n          cnt)))", "user": "553093bee4b076ab5578f817"}, {"problem": 22, "code": "(fn ct [x]\n  (if (empty? x) 0 (+ 1 (ct (rest x)))))", "user": "55330d7fe4b09218d5f44f88"}, {"problem": 22, "code": "reduce (fn [acc _] (inc acc)) 0", "user": "4f69e5ece4b07046d9f4ef8f"}, {"problem": 22, "code": "(fn [seq] (reduce (fn [acc v] (inc acc)) 0 seq))", "user": "5532a04ee4b09218d5f44f82"}, {"problem": 22, "code": "reduce (fn [val _] (+ val 1)) 0", "user": "5533da20e4b09218d5f44f92"}, {"problem": 22, "code": "#(reduce (fn [idx item] (inc idx)) 0 %)", "user": "5532e188e4b09218d5f44f87"}, {"problem": 22, "code": "#(loop [c % num 0] \n   (if (nil? (first c))\n     num \n     (recur (rest c) (inc num))\n     )\n     \n  )", "user": "55022275e4b07d26eda61d81"}, {"problem": 22, "code": "(fn kount [[one & others]] (if (nil? others)\n                       1\n                       (+ 1 (kount others))))", "user": "5534795ee4b09218d5f44f9e"}, {"problem": 22, "code": "(partial #(if (empty? %2)\n   %1 \n   (recur (inc %1)(rest %2))) 0)", "user": "552e1c98e4b076ab5578f7ee"}, {"problem": 22, "code": "(fn cntt [lst] (if (empty? lst) 0 (+ 1 (cntt (rest lst)))))", "user": "550fd845e4b06e50f9beb17c"}, {"problem": 22, "code": "(fn cnt [s]\n  (if (empty? s)\n   0\n   (+ 1 (cnt (rest s)))))", "user": "55349c67e4b09218d5f44fa0"}, {"problem": 22, "code": "(fn [xs]\n  (reduce (fn [sum _] (inc sum)) 0 xs))", "user": "5534fb50e4b09218d5f44fa6"}, {"problem": 22, "code": "#(.size (vec %1))", "user": "54f86b8ce4b01ecee9d88828"}, {"problem": 22, "code": "#(+ 1 (.lastIndexOf (vec %) (peek (vec %))))", "user": "55314b57e4b076ab5578f822"}, {"problem": 22, "code": "(fn seqcount\n  [[& xs]]\n  (if (empty? xs)\n    0\n    (+ 1 (seqcount (rest xs)))))", "user": "55355397e4b09218d5f44fae"}, {"problem": 22, "code": "#(reduce (fn [a & rest] (inc a)) 0 %)", "user": "5535d34be4b09218d5f44fb0"}, {"problem": 22, "code": "#(reduce (fn [total _] (+ total 1)) 0 %)", "user": "5535e9b8e4b09218d5f44fb3"}, {"problem": 22, "code": "#(+ 1 (first (last (map-indexed vector %1))))", "user": "5536452ae4b09218d5f44fbb"}, {"problem": 22, "code": "(fn [s]\n  (loop [s s acc 0]\n    (if (not (seq s))\n      acc\n      (recur (rest s) (inc acc)))))", "user": "5526a235e4b0ffed3738f922"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %1))", "user": "55357ab5e4b09218d5f44faf"}, {"problem": 22, "code": "(fn [lst]\n  (reduce + (map (constantly 1) lst)))", "user": "553698fae4b09218d5f44fc0"}, {"problem": 22, "code": "(fn len [xs] (if (first xs) (+ 1 (len (rest xs))) 0))", "user": "5536cbefe4b09218d5f44fc2"}, {"problem": 22, "code": "(fn [seq]\n  (loop [xs seq cnt 0]\n    (if (empty? xs) \n      cnt\n      (recur (rest xs) (inc cnt)))))", "user": "551ad0c8e4b07993ea3788c6"}, {"problem": 22, "code": "(fn m-count [s]\n  (if-not (seq s)\n    0\n    (inc (m-count (rest s)))))", "user": "55377460e4b09218d5f44fc9"}, {"problem": 22, "code": "(fn cont \n [lis] (if (= [] lis) 0 (+ 1 (cont (rest lis))))\n )", "user": "5537982ae4b09218d5f44fcc"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5536c324e4b09218d5f44fc1"}, {"problem": 22, "code": "(fn [x]\n  (#(if (empty? %)\n      %2\n      (recur (rest %) (inc %2)))\n   x 0))", "user": "5537c1c4e4b09218d5f44fd0"}, {"problem": 22, "code": "reduce (fn [val _](inc val))0", "user": "553706d1e4b09218d5f44fc7"}, {"problem": 22, "code": "(fn [s] (reduce + (map second (frequencies s))))", "user": "5537d5ece4b09218d5f44fd4"}, {"problem": 22, "code": "(fn [s]\n  (apply + \n        (map (fn [_] 1) s)))", "user": "5537cbaee4b09218d5f44fd3"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5537de22e4b09218d5f44fd5"}, {"problem": 22, "code": "(fn [xs]\n  (reduce\n   +\n   (map (fn [_] 1) xs)))", "user": "55381162e4b09218d5f44fda"}, {"problem": 22, "code": "(fn cnt[x]( if (empty? x) 0 (+ (cnt (rest x)) 1)))", "user": "5537f167e4b09218d5f44fd7"}, {"problem": 22, "code": "(fn [coll] \n  (loop [current-count 0 tail coll]\n    (if (seq tail)\n      (recur (inc current-count) (rest tail))\n      current-count\n      )))", "user": "551bdefde4b07993ea3788d7"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "54add0a3e4b09f271ff37ce7"}, {"problem": 22, "code": ";(fn [xs]\n;  (apply + (map (fn [_] 1) xs)))\n\n(fn [xs]\n  (reduce (fn [t _] (inc t)) 0 xs))", "user": "54dce62be4b024c67c0cf78b"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "4fe9cc68e4b0547ebccb2470"}, {"problem": 22, "code": "(fn length [xs] (if (not (empty? (rest xs)))\n                    (+ 1 (length (rest xs)))\n                    1))", "user": "553638bae4b09218d5f44fba"}, {"problem": 22, "code": "(fn [n] (reduce + (map (fn [x] 1) n)))", "user": "55391182e4b09218d5f44fe6"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "4e273a93535deb9a81d77ef8"}, {"problem": 22, "code": "reduce (fn [acc, x] (inc acc)) 0", "user": "55395241e4b09218d5f44fe8"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "553478dce4b09218d5f44f9d"}, {"problem": 22, "code": "#(reduce (fn [n _] (inc n)) 0 %)", "user": "553a43cae4b09218d5f44ff2"}, {"problem": 22, "code": "(fn [seq]\n  (reduce (fn [c _] (inc c)) 0 seq))", "user": "553a35bfe4b09218d5f44ff0"}, {"problem": 22, "code": "#(reduce (fn [acc _] (inc acc)) 0 % )", "user": "553900d4e4b09218d5f44fe5"}, {"problem": 22, "code": "#(reduce + (map (fn [_] 1) %))", "user": "553a6c36e4b09218d5f44ff6"}, {"problem": 22, "code": "(fn [the-list]\n  (reduce \n   (fn [memo list-value] (inc memo))\n   0\n   the-list))", "user": "553a74ede4b09218d5f44ff7"}, {"problem": 22, "code": "#(apply + (map (fn [a](+ 1 0)) %))", "user": "5533f56de4b09218d5f44f94"}, {"problem": 22, "code": "(fn [s]\n  (loop [c 0 items s]\n    (if (empty? items) c\n      (recur (+ c 1) (rest items)))))", "user": "520d3129e4b0b022ef140ca5"}, {"problem": 22, "code": "#(\n  reduce\n  +\n  (map (fn [_] 1) (seq %)\n       )\n  )", "user": "553abb28e4b09218d5f44ffb"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "548018d8e4b0c51c1f4d7329"}, {"problem": 22, "code": "(fn [full-seq]\n  (loop [c 0 xs full-seq]\n    (if (empty? xs)\n      c\n      (recur (+ c 1) (rest xs)))))", "user": "553b87abe4b09218d5f45003"}, {"problem": 22, "code": "(fn cc [xs] (if (= [] (drop 1 xs)) 1 (+ 1 (cc (drop 1 xs))) ) )", "user": "553b8fdbe4b09218d5f45004"}, {"problem": 22, "code": "(fn get-count [l]\n  ((fn get-count-helper [next-l x]\n    (if (= [] next-l) x (get-count-helper (rest next-l) (+ x 1)))\n  ) l 0)\n)", "user": "553bbb99e4b09218d5f45008"}, {"problem": 22, "code": "(fn f [x] (if (empty? x) 0 (inc(f(rest x)))))", "user": "553bc237e4b09218d5f4500a"}, {"problem": 22, "code": "(fn f [s] \n     (if (nil? s)\n         0\n         (+ 1 (f (next s)))\n     )\n  )", "user": "553b90c8e4b09218d5f45005"}, {"problem": 22, "code": "(fn countl [l] (if (= l '()) 0 (inc (countl (rest l)))))", "user": "553c05b7e4b09218d5f45011"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5535e822e4b09218d5f44fb2"}, {"problem": 22, "code": "#(reduce (fn [a x] (+ a 1)) 0 %)", "user": "55337e61e4b09218d5f44f8e"}, {"problem": 22, "code": "(fn [s]\n  (loop [s s i 1]\n    (if (empty? (rest s))\n      i\n      (recur (rest s) (inc i))\n      )\n    )\n  )", "user": "55380eeae4b09218d5f44fd9"}, {"problem": 22, "code": "(fn [l]\n  (reduce (fn [a, _] (+ a 1)) 0 l))", "user": "553d1997e4b0a04f792994db"}, {"problem": 22, "code": "#(reduce (fn [n e] (+ n 1)) 0 %)", "user": "553d51c3e4b0a04f792994df"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "553d25bae4b0a04f792994dd"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "553d86cfe4b0a04f792994e2"}, {"problem": 22, "code": "(fn cnt [ns]\n  (if (empty? ns)\n      0\n      (+ 1 (cnt (rest ns)))))", "user": "553dd883e4b0a04f792994e6"}, {"problem": 22, "code": "#(let [coll (vec %)] (inc (.lastIndexOf coll (last coll))))", "user": "5313d68de4b08068f379ed0f"}, {"problem": 22, "code": "(letfn [(len [n xs] (if (empty? xs) n (recur (inc n) (rest xs))))] (partial len 0))", "user": "553e0b70e4b0a04f792994e8"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "54f49590e4b0f2f3c5226e80"}, {"problem": 22, "code": "(fn [x]\n  (loop [c 0\n         xs x]\n    (if (seq xs)\n      (recur (inc c) (rest xs))\n      c)))", "user": "553ef828e4b0a04f792994f3"}, {"problem": 22, "code": "#(last (interleave % (range 1 100)))", "user": "54eee38ce4b024c67c0cf878"}, {"problem": 22, "code": "(fn [s] (reduce (fn [a b] (inc a)) 0 s ))", "user": "54c779bee4b045293a27f63b"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "55382530e4b09218d5f44fdd"}, {"problem": 22, "code": "(fn [original] (loop [x original counter 0] \n                 (if-not (empty? x)\n                   (recur (rest x) (+ counter 1)) \n                 counter)))", "user": "553fd4a5e4b0a04f792994fa"}, {"problem": 22, "code": "#(alength (to-array %))", "user": "50939f7ce4b097f48cc38582"}, {"problem": 22, "code": "(fn [n] (reduce + (map (fn [g] 1) n)))", "user": "553fe819e4b0a04f792994fc"}, {"problem": 22, "code": "(fn [x](reduce + (map (fn [x] 1 ) x)))", "user": "553d630ee4b0a04f792994e1"}, {"problem": 22, "code": "(fn [xs]\n  (reduce (fn [sum _] (inc sum)) 0 xs))", "user": "553e007ae4b0a04f792994e7"}, {"problem": 22, "code": "#(reduce (fn [n _] (inc n)) 0 %)", "user": "5540cc0ce4b0a04f79299505"}, {"problem": 22, "code": "#(reduce + (map (fn [_] 1) %))", "user": "54c944b1e4b045293a27f666"}, {"problem": 22, "code": "#(loop [l %1 res 0] \n   (if (empty? l) \n     res \n     (recur (rest l) (inc res))))", "user": "553f405ce4b0a04f792994f6"}, {"problem": 22, "code": "#(loop [coll %\n        result 0]\n   (if (empty? coll)\n     result\n     (recur (rest coll) (inc result))))", "user": "553fa883e4b0a04f792994f9"}, {"problem": 22, "code": "reduce (fn [acc _] (inc acc)) 0", "user": "552a793ee4b0ffed3738f955"}, {"problem": 22, "code": "(fn [s] (reduce (fn [sum i] (inc sum)) 0 s))", "user": "553f70cae4b0a04f792994f8"}, {"problem": 22, "code": "(fn cn [arr & [c]]\n      (if (empty? arr)\n        (or c 0)\n        (cn (rest arr) (inc (or c 0)))))", "user": "5540fe42e4b0a04f7929950a"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %1))", "user": "5540f5dee4b0a04f79299509"}, {"problem": 22, "code": "(partial reduce (fn [x a] (inc x)) 0)", "user": "55423a83e4b0a04f7929951a"}, {"problem": 22, "code": "(fn f [x]\n  (letfn [(cnt [sek, n] \n          (if (empty? (rest sek))\n            (+ 1 n)\n            (cnt (rest sek) (+ 1 n))))]\n    (cnt x 0)))", "user": "54d8a85ee4b0a52adc2e203c"}, {"problem": 22, "code": "(fn [liste] (reduce + (map (fn [n] 1) liste)))", "user": "553b9d44e4b09218d5f45007"}, {"problem": 22, "code": "(fn foo [l]\n  (loop [c l i 0]\n    (if (empty? c)\n        i\n        (recur (rest c) (+ i 1)))))", "user": "552d6868e4b076ab5578f7e8"}, {"problem": 22, "code": "#(\n   (fn\n     [[x & xx] c]\n     (if (nil? xx) c\n       (recur xx (inc c))))\n  % 1)", "user": "5543553fe4b0a04f79299523"}, {"problem": 22, "code": "(partial reduce (fn [x _] (inc x)) 0)", "user": "55274467e4b0ffed3738f92b"}, {"problem": 22, "code": "(fn [xs] (reduce (fn [c x] (inc c)) 0 xs))", "user": "550001d0e4b07d26eda61d57"}, {"problem": 22, "code": "#((fn cnt [xs c]\n    (if (= nil (first xs))\n      c\n      (cnt (rest xs) (+ c 1)))) % 0)", "user": "55453f8ee4b0a04f79299530"}, {"problem": 22, "code": "(fn [x](loop [i 0]\n  (if (= (nth x i \"no\")\"no\")\n   (do i)\n    (recur (inc i)))))", "user": "554462c0e4b0a04f79299529"}, {"problem": 22, "code": "(fn [seq] (loop [head (first seq) tail (rest seq) iter 0]\n            (if (nil? head)\n              iter\n              (recur (first tail) (rest tail) (inc iter)))))", "user": "55457b73e4b0a04f79299536"}, {"problem": 22, "code": "#(loop [cnt 0, c %]\n\t(if (nil? (first c))\n\tcnt\n\t(recur (+ cnt 1) (rest c))))", "user": "53573d70e4b04ce2eb3ed278"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5545f713e4b0a04f7929953a"}, {"problem": 22, "code": "(fn [s] (reduce (fn [acc _] (inc acc)) 0 s))", "user": "5545eebee4b0a04f79299539"}, {"problem": 22, "code": "(partial reduce\n  (fn [acc i] (inc acc)) 0)", "user": "550f1c99e4b06e50f9beb171"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "52e851bfe4b09f7907dd149a"}, {"problem": 22, "code": "#(loop [x %1 c 0]\n    (if (empty? x)\n        c\n        (recur (rest x) (inc c))\n       ))", "user": "553bda0de4b09218d5f4500b"}, {"problem": 22, "code": "#(reduce\n  (fn [c _] (inc c))\n  0 %)", "user": "5544faebe4b0a04f7929952b"}, {"problem": 22, "code": "(fn [c] (loop [coll c index 0]\n          (if (first coll) (recur (rest coll) (inc index)) index)))", "user": "5546704be4b0a04f7929953d"}, {"problem": 22, "code": "(fn [x]\n  ((fn [x n] \n     (if (empty? x)\n       n\n       (recur (rest x) (+ n 1)))) x 0))", "user": "5546d2c5e4b0a04f79299543"}, {"problem": 22, "code": "(fn cnt\n\t[arr]\n\t(loop [[x & xs] arr c 0] \n\t\t(if (= x nil)\n\t\t\tc\n\t\t\t(recur xs (inc c)))))", "user": "5545477fe4b0a04f79299531"}, {"problem": 22, "code": "#(apply + (map (fn [x] 1) %))", "user": "54fdaeace4b07d26eda61d39"}, {"problem": 22, "code": "#(reduce (fn [n _] (+ n 1)) 0 %)", "user": "55478ce2e4b0a04f7929954e"}, {"problem": 22, "code": "(fn [coll]\n  (let [x (atom 0)]\n    (dorun (map #(or (swap! x inc) %) coll))\n    @x))", "user": "5547bcf2e4b0a04f79299551"}, {"problem": 22, "code": "(fn [arr]\n  (loop [in arr out 0]\n    (if (seq in)\n      (recur (rest in) (+ out 1))\n      out)))", "user": "554707bae4b0a04f79299544"}, {"problem": 22, "code": "#(last (interleave % (iterate inc 1)))", "user": "5326e4efe4b09d4e7a9b54f5"}, {"problem": 22, "code": "(fn [list] \n  (reduce\n   \t(fn [x y] (inc x))\n   \t\t(cons 0 list)))", "user": "5549394fe4b0a04f79299565"}, {"problem": 22, "code": "(fn [s] (reduce (fn [x s] (+ x 1)) 0 s))", "user": "55495318e4b0a04f79299566"}, {"problem": 22, "code": "reduce (fn [total _item] (inc total)) 0", "user": "5547793be4b0a04f7929954c"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "55350bdae4b09218d5f44fa8"}, {"problem": 22, "code": "(fn [s] (reduce (fn [acc x] (inc acc)) 0 s))", "user": "5549ff9ae4b0a04f7929956e"}, {"problem": 22, "code": "(fn ! [coll] (if (empty? coll) 0 (inc (! (rest coll)))))", "user": "554680cbe4b0a04f7929953e"}, {"problem": 22, "code": "(fn myCount [coll]\n   (if (empty? coll) 0\n     (+ 1 (myCount (rest coll)))))", "user": "554a270fe4b0a04f79299570"}, {"problem": 22, "code": "(fn [sq]\n  (loop [s sq c 0]\n    (if (empty? s) c \n      (recur (rest s) (inc c)))))", "user": "4ee7c6dd535d93acb0a6686c"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "554a5ac2e4b0a04f79299574"}, {"problem": 22, "code": "(fn [c] (reduce (fn [a b] (inc a)) 0 c))", "user": "554a75c9e4b0a04f79299575"}, {"problem": 22, "code": "(fn foo [l] (if (empty? l) 0 (+ 1 (foo (rest l)))))", "user": "554ae65de4b0a04f7929957b"}, {"problem": 22, "code": "#(apply + (map (constantly 1) %))", "user": "554acce4e4b0a04f79299579"}, {"problem": 22, "code": "reduce (fn [myCount seqVal] (+ myCount 1)) 0", "user": "552f6277e4b076ab5578f801"}, {"problem": 22, "code": "(fn [n]\n  (loop [target (seq n) acc 0]\n    (if (empty? target)\n      acc\n      (recur (rest target) (inc acc)))))", "user": "554884d4e4b0a04f7929955c"}, {"problem": 22, "code": "(fn count-a-seq [lat]\n  (reduce (fn [x y] (+ x 1)) 0 lat))", "user": "554a2df2e4b0a04f79299572"}, {"problem": 22, "code": "(fn [x]\n  (loop [x x c 0]\n    (if (empty? x)\n      c\n      (recur (rest x) (inc c)))))", "user": "554b425ce4b0a04f79299581"}, {"problem": 22, "code": "(fn [arr] \n  (loop [counter 0 array arr]\n    (if (= (first array) nil)\n      \tcounter\n      \t(recur (+ counter 1) (rest array))\n     \n     \n     )\n    \n    \n    )\n  \n  )", "user": "55300ea8e4b076ab5578f80b"}, {"problem": 22, "code": "#((fn [[x & more] n]\n    (if more\n      (recur more (inc n))\n      n))\n  % 1)", "user": "554b7056e4b0a04f79299583"}, {"problem": 22, "code": "(fn bla [x] (+ 0 (if (first x) (+ 1 (bla (rest x))) 0 ) ) )", "user": "554b8474e4b0a04f79299588"}, {"problem": 22, "code": "(letfn [(cnt [counter xs]\n            (if (nil? (first xs)) counter (recur (inc counter) (rest xs))))]\n  (partial cnt 0))", "user": "554b9c3ee4b0a04f79299594"}, {"problem": 22, "code": "#(reduce (fn [acc x] (inc acc)) 0 %)", "user": "554bd33ce4b0a04f7929959a"}, {"problem": 22, "code": "(fn f [a] (if (empty? (rest a)) 1 (+ 1 (f (rest a)))))", "user": "554c0adde4b0a04f7929959e"}, {"problem": 22, "code": "(fn [xs] (reduce + (map (constantly 1) xs)))", "user": "554bced1e4b0a04f79299599"}, {"problem": 22, "code": "(fn my-count [i]\n   (loop [a 0 ls i]\n     (if (empty? ls)\n       a\n       (recur (+ a 1)\n              (rest ls)))))", "user": "554bc026e4b0a04f79299597"}, {"problem": 22, "code": "(fn [s]\n  (reduce + \n          (map (fn [x] 1) s)))", "user": "4f47daade4b0d56e7bb92bc4"}, {"problem": 22, "code": "(fn [n x] (if (empty? x) n (recur (+ n 1) (rest x)))) 0", "user": "554d01a8e4b0a04f792995b3"}, {"problem": 22, "code": "(fn [l]\n  ((fn [l n] (if (empty? l)\n               n\n               (recur (rest l) (+ n 1)))) l 0))", "user": "554d04bbe4b0a04f792995b4"}, {"problem": 22, "code": "#(loop [sq % cnt 0]\n  (if (first sq)\n    (recur (rest sq) (inc cnt))\n    cnt))", "user": "5537f30fe4b09218d5f44fd8"}, {"problem": 22, "code": "(fn [coll] (reduce (fn [a b] (+ a 1)) 0 coll))", "user": "5482464ee4b0e286459a117d"}, {"problem": 22, "code": "reduce (fn [x y] (inc x)) 0", "user": "554b8572e4b0a04f79299589"}, {"problem": 22, "code": "(fn [seq]\n  (loop [seq seq c 0]\n    (if (empty? seq) c\n      (recur (rest seq) (+ c 1)))))", "user": "554dff83e4b00713264bd98d"}, {"problem": 22, "code": "(fn [xs] (reduce (fn [c _] (inc c)) 0 xs))", "user": "55150524e4b055c2f668d4d9"}, {"problem": 22, "code": "(fn [y] (reduce + (map (fn [x] 1) y)))", "user": "554b2151e4b0a04f79299580"}, {"problem": 22, "code": "(fn [coll] (reduce (fn [a b] (+ a 1)) 0 coll))", "user": "554d386ee4b0a04f792995b8"}, {"problem": 22, "code": "(fn c[n, t] (if (empty? t) n (c (inc n) (rest t))) ) 0", "user": "55429859e4b0a04f7929951f"}, {"problem": 22, "code": "(fn f [s] (if (empty? s) 0 (+ 1 (f (rest s)))))", "user": "554edb85e4b00713264bd99a"}, {"problem": 22, "code": "(fn my-count [seqr]\n  (if (empty? seqr)\n    0\n    (+ 1 (my-count (rest seqr)))))", "user": "554d48d3e4b00713264bd988"}, {"problem": 22, "code": "reduce (fn [x y] (inc x)) 0", "user": "554717dfe4b0a04f79299546"}, {"problem": 22, "code": "(fn [s] (loop [n 0, xs s] (if (empty? xs) n (recur (inc n) (rest xs)))))", "user": "554ba1d3e4b0a04f79299595"}, {"problem": 22, "code": "(fn [seq]\n  (reduce (fn [n val] (+ 1 n)) 0 seq))", "user": "53b0765ae4b047364c044484"}, {"problem": 22, "code": "#(reduce (fn [x y] (+ x 1)) 0 %)", "user": "554e3a0be4b00713264bd991"}, {"problem": 22, "code": "(fn ccount [s] (or (and (= s '()) 0) (+ 1 (ccount (rest s)))))", "user": "554a3303e4b0a04f79299573"}, {"problem": 22, "code": "(fn [x]\n  (loop [c 0, x1 x]\n    (if (empty? x1) c\n      (recur (+ c 1) (rest x1)))))", "user": "55486ee6e4b0a04f7929955a"}, {"problem": 22, "code": "(fn f [xs] \n  (if (empty? xs)\n    0\n    (+ 1 (f (rest xs)))))", "user": "55507a1ae4b00713264bd9a7"}, {"problem": 22, "code": "(fn count-seq\n  ([sq] (count-seq sq 0))\n  ([sq n] (if (empty? sq) n (count-seq (rest sq) (+ n 1) )))\n)", "user": "5280a1ece4b0757a1b171407"}, {"problem": 22, "code": "(fn [a-seq]\n  (loop [[elt & rst] a-seq\n         n 0]\n    (if (empty? rst) (inc n)\n      (recur rst (inc n)))))", "user": "5550c6e0e4b00713264bd9af"}, {"problem": 22, "code": "(fn [x]\n  (loop [counter 0\n         my-list x]\n    (if(not (not-empty my-list))\n      counter\n      (recur (inc counter) (rest my-list)))))", "user": "5550dad4e4b00713264bd9b0"}, {"problem": 22, "code": "(fn [l] (reduce + (map (fn [x] 1) l)))", "user": "5550bcece4b00713264bd9ae"}, {"problem": 22, "code": "(fn mycount [lst]\n    (loop [cnt 0 lst lst]\n     (if (seq lst)\n      (recur\n       (inc cnt)\n       (rest lst)) cnt)))", "user": "55485b2ee4b0a04f79299559"}, {"problem": 22, "code": "#(reduce (fn [x _] (+ x 1)) 0 %)", "user": "5550eda2e4b00713264bd9b4"}, {"problem": 22, "code": "(fn [col] \n  (loop [i 0 coll col]  \n  \t(if (nil? coll)    \n\t  i     \n      (recur (inc i) (next coll))\n)))", "user": "554d0511e4b0a04f792995b5"}, {"problem": 22, "code": "#(loop [x % cnt 0]\n   (if (empty? x) cnt (recur (rest x) (inc cnt))))", "user": "5550dec6e4b00713264bd9b2"}, {"problem": 22, "code": "(fn [xs]\n  (loop [ys xs\n         cnt 0]\n    (if (empty? ys)\n      cnt\n      (recur (rest ys) (inc cnt)))))", "user": "5283a919e4b0239c8a67adbe"}, {"problem": 22, "code": "(fn [s] (apply + (map (fn [_] 1) s)))", "user": "55512501e4b0deb715856de7"}, {"problem": 22, "code": "(fn find-count\n  ([x] (find-count x 0))\n  ([coll cnt]\n   (if (nil? (seq coll))\n     cnt\n     (recur (rest (seq coll)) (+ 1 cnt)))))", "user": "555176e5e4b0deb715856deb"}, {"problem": 22, "code": "(fn [c] (loop [coll c x 0] (if-not (first coll) x (recur (rest coll) (inc x)))))", "user": "553a1475e4b09218d5f44fef"}, {"problem": 22, "code": "#(reduce (fn[x y] (inc x)) 0 %)", "user": "555093b2e4b00713264bd9ab"}, {"problem": 22, "code": "(fn sequenceCounter\n  ([x pointer]\n   (if (empty? x)\n     pointer\n     (sequenceCounter (rest x) (+ pointer 1))\n     )\n   )\n  ([x]\n   (sequenceCounter x 0)\n   )\n  )", "user": "5550929ee4b00713264bd9aa"}, {"problem": 22, "code": "( fn f [s] ( if (empty? s) 0 (inc(f (rest s))) ) )", "user": "5551b492e4b0deb715856ded"}, {"problem": 22, "code": "(fn [x] ((fn f [s l] (if (empty? (rest s)) l (f (rest s) (+ l 1)))) x 1))", "user": "554c5affe4b0a04f792995a3"}, {"problem": 22, "code": "reduce (fn [x y] (+ 1 x)) 0", "user": "554c1708e4b0a04f792995a0"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "55523dffe4b0deb715856df2"}, {"problem": 22, "code": "(fn [sequ]\n  (loop [s sequ c 0]\n    (if (empty? s)\n      c\n      (recur (rest s) (inc c)))))", "user": "54d5343fe4b0a52adc2e200a"}, {"problem": 22, "code": "(fn [x] (reduce #(+ % %2) (map (fn [_] 1) x)))", "user": "5552b617e4b0deb715856df8"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "5551bddae4b0deb715856def"}, {"problem": 22, "code": "(fn [x] (reduce (fn[a b](inc a)) 0 x))", "user": "55532d03e4b0deb715856dfd"}, {"problem": 22, "code": "#(reduce + 0 (map (fn [x] 1) %))", "user": "55534e3be4b0deb715856e01"}, {"problem": 22, "code": "reduce (fn[n _] (inc n)) 0", "user": "54d352f6e4b0e8a36923e604"}, {"problem": 22, "code": "#(reduce (fn [acc elt] (+ 1 acc)) 0 %)", "user": "5553b924e4b0deb715856e06"}, {"problem": 22, "code": "(fn mycount\n  [x] \n  (if (empty? x )\n      0\n\t  ( inc (mycount (rest x)))))", "user": "55537851e4b0deb715856e04"}, {"problem": 22, "code": "(fn [coll] (reduce (fn [r y] (+ r 1)) 0 (seq coll)))", "user": "553c4614e4b09218d5f45014"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "547f49fae4b0c51c1f4d731b"}, {"problem": 22, "code": "(fn [coll]\n  (loop [x coll\n         acc 0] \n    (if (nil? x)\n    acc\n    (recur (next x)(inc acc)))))", "user": "553cd680e4b0a04f792994d4"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5553e93be4b0deb715856e0b"}, {"problem": 22, "code": "(fn [a] (reduce (fn [x a] (inc x)) 0 a))", "user": "5554f886e4b0deb715856e10"}, {"problem": 22, "code": "(fn [coll]\n  (reduce (fn [x y] (+ x 1)) 0 coll))", "user": "52da4532e4b09f7907dd13b6"}, {"problem": 22, "code": "(fn [sq]\n  (reduce\n   (fn\n     [x y]\n     (+ x 1))\n   0 sq))", "user": "5555432ee4b0deb715856e13"}, {"problem": 22, "code": "(fn [x]\n  (loop [a x c 1]\n      (if (nil? (next a)) c (recur (next a) (inc c)))))", "user": "52626564e4b03e8d9a4a7086"}, {"problem": 22, "code": "#(loop [coll %\n        n 0]\n   (if (empty? coll)\n     n\n     (recur (rest coll) (inc n))))", "user": "55556737e4b0deb715856e15"}, {"problem": 22, "code": "#(-> (interleave % (range)) last inc)", "user": "55536a8ae4b0deb715856e03"}, {"problem": 22, "code": "(fn [xs]\n  (reduce (fn [result input] (inc result)) 0 xs))", "user": "555521a5e4b0deb715856e12"}, {"problem": 22, "code": "#(reduce (fn [l _] (inc l)) 0 %)", "user": "527282f5e4b03e8d9a4a743a"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "55574803e4b0deb715856e21"}, {"problem": 22, "code": "(fn [col] (loop [col col the-count 0]\n                                (if (empty? col) the-count (recur (rest col) (inc the-count)))))", "user": "554bc64ae4b0a04f79299598"}, {"problem": 22, "code": ";(fn my-count [coll]\n;  (let [just-1 (fn [n] 1)\n;        all-1s (fn [coll] (map just-1 coll))]\n;    (apply + (all-1s coll))))\n\n;(fn [coll] (reduce (fn [n,m] (inc n)) 0 coll) )\n( fn [coll] (apply + (map (fn [n] 1) coll)))", "user": "55465b20e4b0a04f7929953b"}, {"problem": 22, "code": "(fn my-count [list]\n  (if (empty? list)\n    0\n    (+ 1 (my-count (rest list)))))", "user": "55580ef1e4b0deb715856e28"}, {"problem": 22, "code": "#(alength (to-array %))", "user": "55484800e4b0a04f79299558"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0  %)", "user": "555867cae4b0deb715856e2a"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "553beff9e4b09218d5f4500d"}, {"problem": 22, "code": "#(loop [cnt 0 l %]\n       (if (empty? l) \n           cnt\n      \t   (recur (inc cnt)\n                  (rest l))))", "user": "555881f5e4b0deb715856e2c"}, {"problem": 22, "code": "(fn count-elements [coll] \n  (reduce (fn [v &_] (inc v)) 0 coll))", "user": "55586905e4b0deb715856e2b"}, {"problem": 22, "code": "(fn cnt [sq] (if (empty? sq) 0 (+ 1 (cnt (rest sq)))))", "user": "55599ae4e4b0deb715856e3a"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "55568a7de4b0deb715856e1c"}, {"problem": 22, "code": "(fn cnt [s] (if (empty? s) 0 (+ (cnt (rest s)) 1)))", "user": "525dd2f9e4b0cb4875a45d85"}, {"problem": 22, "code": "#(reduce (fn [acc el] (inc acc)) 0 %)", "user": "555ac933e4b0deb715856e49"}, {"problem": 22, "code": "#(apply + (map (fn [_] 1) %))", "user": "555add85e4b0deb715856e4a"}, {"problem": 22, "code": "(fn [coll] (loop [c coll\n                 n 0]\n            (if (seq c)\n              (recur (rest c) (inc n))\n              n)))", "user": "5169b23fe4b03f62cda68cee"}, {"problem": 22, "code": "reduce (fn [l _] (inc l)) 0", "user": "54c29a72e4b045293a27f605"}, {"problem": 22, "code": "#(loop [c % n 0]\n   (if (empty? c)\n     n\n     (recur (rest c) (inc n))))", "user": "53e76363e4b036ad0777e47b"}, {"problem": 22, "code": "(fn [var]\n\t(reduce (fn [x _] (inc x)) 0 var))", "user": "550b4ea2e4b06e50f9beb13e"}, {"problem": 22, "code": "#(reduce + (map (fn [x] (if (nil? x) 0 1)) %))", "user": "555b5ae4e4b0deb715856e4f"}, {"problem": 22, "code": "(fn length [x] (if (not (= x '())) (inc (length (rest x))) 0))", "user": "550772cee4b021ccfedb96a8"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "555a5731e4b0deb715856e44"}, {"problem": 22, "code": "reduce (fn [x xx] (inc x)) 0", "user": "550eca99e4b06e50f9beb16b"}, {"problem": 22, "code": "(fn [seq] (reduce + (map (constantly 1) seq)))", "user": "555bd27ae4b0b056612e2244"}, {"problem": 22, "code": "(fn cnt [s] \n  (let [acc-cnt (fn ac [acc sq]\n                  (if(empty? sq) \n                   acc\n                   (ac (+ 1 acc) (rest sq))))]\n    (acc-cnt 0 s)))", "user": "54f39ce3e4b050824f58f5c7"}, {"problem": 22, "code": "(fn [x] \n  (reduce (fn [x y] (inc x)) 0 x))", "user": "5550b5a0e4b00713264bd9ad"}, {"problem": 22, "code": "#(apply + (map (fn [x] 1) %))", "user": "54070647e4b0addc1aec66b2"}, {"problem": 22, "code": "(fn [col]\n  (reduce (fn [c _] (inc c)) 0 col))", "user": "555b3919e4b0deb715856e4c"}, {"problem": 22, "code": "(fn [l] (reduce + (map (fn [_] 1) l)))", "user": "5550e966e4b00713264bd9b3"}, {"problem": 22, "code": "#(reduce (fn [acc x] (inc acc)) 0 %)", "user": "5558cd6ae4b0deb715856e2f"}, {"problem": 22, "code": "(fn [x] (loop [cnt 0 ary x] (if (empty? ary) cnt (recur (inc cnt) (rest ary)))))", "user": "553c8638e4b09218d5f45017"}, {"problem": 22, "code": "(fn [sq]\n  ((fn [sq n]\n    (if (empty? sq) n (recur (rest sq) (+ n 1))))\n  sq 0))", "user": "555d7663e4b0a2eb076a39ab"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "555da2c4e4b0a2eb076a39ae"}, {"problem": 22, "code": "reduce (fn [x y] (inc x)) 0", "user": "555c5e04e4b0b056612e224b"}, {"problem": 22, "code": "(fn [x]\n  (reduce + (map (fn [x] 1) x)))", "user": "54ee03c3e4b024c67c0cf86a"}, {"problem": 22, "code": "#(->>% (map (fn [k] 1)) (reduce +) )", "user": "550fa523e4b06e50f9beb17a"}, {"problem": 22, "code": "(fn [l] \n  (loop [sum 0]\n    (if (get (to-array l) sum)\n      (recur (+ sum 1))\n      sum)))", "user": "5526ecc4e4b0ffed3738f928"}, {"problem": 22, "code": "#(reduce (fn [v _] (inc v)) 0 %)", "user": "555c6344e4b0b056612e224c"}, {"problem": 22, "code": "reduce (fn [x _] (inc x))0", "user": "555f0789e4b0a2eb076a39bf"}, {"problem": 22, "code": "#(reduce (fn [ret elem]\n           (inc ret))\n         0\n         %)", "user": "555ee545e4b0a2eb076a39bd"}, {"problem": 22, "code": "(fn\n  [array]\n  (loop [arr array\n         n 0]\n  \t(if (empty? arr)\n      n\n      (recur\n       (rest arr)\n       (inc n)))))", "user": "555f4bade4b0a2eb076a39c2"}, {"problem": 22, "code": "#(reduce (fn [v _] (inc v)) 0 %)", "user": "555e7210e4b0a2eb076a39b9"}, {"problem": 22, "code": "#(loop [cnt 0 coll %]\n   (if (not (first coll))\n     cnt\n     (recur (inc cnt) (rest coll))\n     )\n   )", "user": "555f6224e4b0a2eb076a39c5"}, {"problem": 22, "code": "(fn [l] (reduce (fn [s i] (+ 1 s)) 0 l))", "user": "555f728de4b0a2eb076a39c8"}, {"problem": 22, "code": ";(fn [ss] (inc 1))\n\n\n;(reduce (fn[x y] (inc x)) 0 %)\n\n(fn [ss] (reduce (fn[x y] (inc x)) 0 ss))", "user": "555e10fee4b0a2eb076a39b4"}, {"problem": 22, "code": "(fn [seq]\n  (loop [lst seq, cnt 0] \n    (if (empty? lst)\n  \tcnt\n    (recur (rest lst) (inc cnt)))))", "user": "555c78abe4b0b056612e224f"}, {"problem": 22, "code": "#(reduce (fn [p _] (+ p 1)) 0 %)", "user": "555f3bfde4b0a2eb076a39c1"}, {"problem": 22, "code": "#(reduce (fn [s r] (+ 1 s)) 0 %)", "user": "556086a2e4b0c656e3ff17c1"}, {"problem": 22, "code": "(fn [c]\n  (->> c\n       (zipmap (range))\n       (keys)\n       (apply max)\n       (inc)))", "user": "553b0d95e4b09218d5f44fff"}, {"problem": 22, "code": "(fn\n  [lst]\n  (loop [remaining lst\n         n 0]\n    (if (empty? remaining)\n      n\n      (recur (rest remaining) (inc n)))))", "user": "5560f39ce4b0c656e3ff17c2"}, {"problem": 22, "code": "(fn [col] (loop [x col n 0] (if x (recur (next x) (inc n)) n)))", "user": "54e1939ce4b024c67c0cf7c5"}, {"problem": 22, "code": "(fn [s]\n  (reduce\n   (fn [sum _] (+ sum 1))\n   0\n   s))", "user": "5561d026e4b0c656e3ff17cc"}, {"problem": 22, "code": "(fn [seq]\n  (reduce (fn [pass blah] (inc pass)) 0 seq))", "user": "5561d2c2e4b0c656e3ff17cd"}, {"problem": 22, "code": "(fn [xs] (reduce (fn [a b] (+ 1 a)) 0 xs))", "user": "5561e604e4b0c656e3ff17ce"}, {"problem": 22, "code": "(fn test-function [L] (reduce (fn [a b] (+ 1 a)) 0 L))", "user": "556238bce4b0c656e3ff17d3"}, {"problem": 22, "code": "(fn [s]\n  (reduce (fn [a b] (inc a)) 0 s))", "user": "55625903e4b0c656e3ff17d7"}, {"problem": 22, "code": "(fn countit ([l] (countit l 0)) ([l acc] (if (empty? l) acc (countit (rest l) (+ acc 1)))))", "user": "55623feae4b0c656e3ff17d4"}, {"problem": 22, "code": "#(loop [x 0\n       tempblock %1]\n  (if (empty? tempblock)\n  \t(do (println x)\n     x)\n  \t(recur (inc x)(rest tempblock))\n  )\n  )", "user": "55592deae4b0deb715856e32"}, {"problem": 22, "code": "#(apply + (map (fn [n] 1) %))", "user": "505fdf63e4b08f2a82ad10b9"}, {"problem": 22, "code": "(fn [s]\n  (reduce\n   (fn [r v] (+ 1 r))\n   0\n   s))", "user": "556159fae4b0c656e3ff17c7"}, {"problem": 22, "code": "(fn [s]\n  (loop [recs s len 0]\n    (if (empty? recs)\n      len\n      (recur (drop 1 recs) (inc len)))\n  )\n)", "user": "554756b8e4b0a04f79299549"}, {"problem": 22, "code": "reduce (fn [x & y] (+ x 1)) 0", "user": "5562bd71e4b0c656e3ff17dc"}, {"problem": 22, "code": "(fn [elems] (reduce + ( map (fn[el] 1) elems)))", "user": "55631739e4b0c656e3ff17e2"}, {"problem": 22, "code": "(fn [sequence]\n  (loop [seq sequence cnt 0]\n    (if(empty? seq)\n      cnt\n      (recur (rest seq) (+ cnt 1))\n    )\n  )\n)", "user": "55635886e4b0c656e3ff17e9"}, {"problem": 22, "code": "#(reduce (fn [c _](inc c)) 0 %1)", "user": "556358c6e4b0c656e3ff17ea"}, {"problem": 22, "code": "(fn cnt [sq]\n  (reduce (fn [a b] (+ a 1)) 1 (rest sq)))", "user": "55638fe1e4b0c656e3ff17ee"}, {"problem": 22, "code": "#(alength (to-array %))", "user": "5563a3bde4b0c656e3ff17f1"}, {"problem": 22, "code": "#(reduce (fn [n _] (inc n)) 0 %)", "user": "5501a1e1e4b07d26eda61d75"}, {"problem": 22, "code": "#(loop [n 0 elems %]\n   (if (nil? elems)\n     n\n     (recur (inc n) (next elems))))", "user": "5563ff8ae4b0c656e3ff17fa"}, {"problem": 22, "code": "(fn [coll]\n  \t\t(loop [c coll n 0]\n             (if (nil? (seq c))\n               \tn\n             \t(recur (rest c) (inc n)))))", "user": "554c83a2e4b0a04f792995a7"}, {"problem": 22, "code": "reduce (fn [x y] (inc x)) 0", "user": "5562f08ae4b0c656e3ff17df"}, {"problem": 22, "code": "#(reduce (fn [a _] (inc a)) 0 %)", "user": "55645592e4b0c656e3ff1802"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "55640c62e4b0c656e3ff17fd"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "51846567e4b02826a645f399"}, {"problem": 22, "code": "(fn hitung [x]\n  (if (empty? x ) \n    0\n    (+ 1 (hitung (rest x)))))", "user": "55630cc1e4b0c656e3ff17e0"}, {"problem": 22, "code": ";;(fn [coll] (reduce (fn [v1 v2] (inc v1)) 0 coll))\nreduce (fn [v _] (inc v)) 0", "user": "55647a31e4b0c656e3ff1808"}, {"problem": 22, "code": "#(loop [a %,c 0] (if (empty? a) c (recur (rest a) (inc c))))", "user": "555e9dbfe4b0a2eb076a39bc"}, {"problem": 22, "code": "(fn [s]\n  (loop[ls s i 0]\n    (if (empty? ls)\n      i\n      (recur (rest ls) (+ i 1)))))", "user": "556405e5e4b0c656e3ff17fb"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) % ))", "user": "555efec1e4b0a2eb076a39be"}, {"problem": 22, "code": "(fn cnt [coll]\n  (if (empty? coll)\n    0\n    (inc (cnt (next coll)))))", "user": "53e6120de4b036ad0777e46c"}, {"problem": 22, "code": "(fn [s]\n  (loop [xs s c 0]\n    (if (first xs)\n      (recur (rest xs) (inc c))\n      c)))", "user": "5563a94be4b0c656e3ff17f2"}, {"problem": 22, "code": "(fn [x]\n  (loop [acc 1\n         lst x]\n    (if (next lst)\n      (recur (+ acc 1) (next lst))\n      acc\n      )\n    )\n  )", "user": "5564c2d3e4b0c656e3ff180e"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5564cb31e4b0c656e3ff1810"}, {"problem": 22, "code": "#(reduce (fn [a b] (inc a)) 0 %1)", "user": "4ef08bd6535dced4c769f20a"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "54f8b6f4e4b01ecee9d8882c"}, {"problem": 22, "code": "#(reduce + (map (fn [_] 1) %)\n)", "user": "4e28ddd1535deb9a81d77efd"}, {"problem": 22, "code": "(partial reduce (fn [x _] (+ x 1)) 0)", "user": "5565f616e4b0c656e3ff1823"}, {"problem": 22, "code": "(fn\n  [xs]\n  (loop [counter 0\n         s xs]\n    (if (empty? s)\n      counter\n      (recur (inc counter)\n             (drop 1 s)))))", "user": "556256d5e4b0c656e3ff17d6"}, {"problem": 22, "code": "#(alength (to-array %))", "user": "55619a2be4b0c656e3ff17ca"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "5566463ee4b0c656e3ff1831"}, {"problem": 22, "code": "(fn count_sequence [s] (if (empty? s) 0 (+ 1 (count_sequence (rest s)))))", "user": "55664950e4b0c656e3ff1832"}, {"problem": 22, "code": "#(reduce + (map (fn [x] (if (nil? x) 0 1)) %))", "user": "5565e7e6e4b0c656e3ff1821"}, {"problem": 22, "code": "(fn mcount [col]\n  (reduce \n   (fn [acc it]\n     (inc acc))\n   0\n   col))", "user": "53b05a75e4b047364c044482"}, {"problem": 22, "code": "(fn mycount [x] \n  (if (empty? x)\n    0\n    (inc (mycount (rest x)))))", "user": "5565a48ae4b0c656e3ff181a"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "554efd47e4b00713264bd99b"}, {"problem": 22, "code": "(fn c [s] (if (empty? s) 0 (inc (c (rest s)))))", "user": "55670a05e4b0c656e3ff1838"}, {"problem": 22, "code": "(fn [coll] \n  (reduce (fn [l r] (inc l)) \n          0 coll))", "user": "5566d812e4b0c656e3ff1837"}, {"problem": 22, "code": "(fn [sq]\n  (let [helper (fn [sq n]\n                 (if (empty? sq)\n                   n\n                   (recur (rest sq) (+ n 1))))]\n    (helper sq 0)))", "user": "55677c60e4b0c656e3ff1842"}, {"problem": 22, "code": "#(let [start 0 startList %1]\n     (loop [n start xs startList]\n    (if (empty? xs)\n      n\n      (recur \n             (+ n 1)\n       (rest xs)\n             )\n  )))", "user": "55664334e4b0c656e3ff182e"}, {"problem": 22, "code": "(partial reduce (fn [x _] (inc x)) 0)", "user": "556794f6e4b0c656e3ff1844"}, {"problem": 22, "code": "(fn count_seq [s] (loop [c 0 ts s]\n                        (if (empty? ts)\n                          c\n                          (recur (inc c) (rest ts)))))", "user": "52c70127e4b0c2d177d6211a"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "555d3f58e4b0a2eb076a39a7"}, {"problem": 22, "code": "(fn [l]\n  (loop [x 0 l l]\n    (if (= () l)\n      x\n      (recur (inc x) (rest l)))))", "user": "55675a6ce4b0c656e3ff183e"}, {"problem": 22, "code": "(fn count-things \n  ([x] (count-things x 0))\n  ([x acc] (if (empty?  x)\n            acc\n            (count-things (rest x) (inc acc)))))", "user": "5564709ee4b0c656e3ff1807"}, {"problem": 22, "code": "(fn count-seq [s]\n  (if (empty? (rest s))\n    1\n    (+ 1 (count-seq (rest s)))))", "user": "556873cee4b0c656e3ff1853"}, {"problem": 22, "code": "(fn cn [x] (if \n             (empty? x) \n             0\n             (+ (cn (rest x)) 1)\n             )\n  )", "user": "55673be4e4b0c656e3ff183c"}, {"problem": 22, "code": "reduce (fn [x y] (inc x)) 0", "user": "5566434ee4b0c656e3ff182f"}, {"problem": 22, "code": "(fn[y]\n  (reduce + (map (fn [x] 1) y)))", "user": "55679198e4b0c656e3ff1843"}, {"problem": 22, "code": "#(-> % (interleave (range)) (last) (inc) )", "user": "556880dae4b0c656e3ff1856"}, {"problem": 22, "code": "(fn [l](reduce (fn [a e] (inc a)) 0 l))", "user": "55660248e4b0c656e3ff1824"}, {"problem": 22, "code": "#(reduce (fn [a _] (inc a)) 0 %)", "user": "5569bbcae4b09a3098a524da"}, {"problem": 22, "code": "#(->> % (map (fn [_] 1)) (apply +))", "user": "554c296ae4b0a04f792995a1"}, {"problem": 22, "code": "(fn iterator\n  ([items]\n  (iterator items 0)\n   )\n  ([items total] \n \t (if (not (first items)) \n    \ttotal\n    \t(iterator (rest items) (inc total))\n   \t )\n  )\n)", "user": "54dba5e1e4b024c67c0cf76a"}, {"problem": 22, "code": "(fn cnt [x] ((\n             fn cnt-int[xs n] (\n                               if (empty? xs) \n                                  n\n                                  (cnt-int (next xs) (inc n)) \n                               )\n             ) x 0)\n  )", "user": "5559b443e4b0deb715856e3c"}, {"problem": 22, "code": "(fn [s]\n  (loop [r s c 0]\n    (if (empty? r)\n      c\n      (recur (rest r) (inc c)))))", "user": "5560f60ee4b0c656e3ff17c3"}, {"problem": 22, "code": "(fn li [s] (if (empty? s) 0 (+ 1 (li (rest s)))))", "user": "5567b9dce4b0c656e3ff1846"}, {"problem": 22, "code": "#(loop [s % c 0] (if (seq s) (recur (next s) (inc c)) c))", "user": "556a7b14e4b09a3098a524e4"}, {"problem": 22, "code": "(fn countSeq\n  ([list]\n   (countSeq (rest list) 1)\n  )\n  ([list x]\n   (if (empty? list)\n     x\n     (recur (rest list) (inc x)))\n  )\n )", "user": "556be3dce4b09a3098a524f7"}, {"problem": 22, "code": "(fn\n  [coll]\n  (reduce + \n    (map (#(constantly 1)) coll)))", "user": "555df9c8e4b0a2eb076a39b2"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5256dcc0e4b0541d1855ba3c"}, {"problem": 22, "code": "(letfn [(helper [lst cnt]\n                (if (empty? lst)\n                  cnt\n                  (helper (rest lst) (inc cnt))))]\n  (fn [lst] (helper lst 0)))", "user": "556c70b6e4b09a3098a524fc"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "556b83fbe4b09a3098a524ee"}, {"problem": 22, "code": "(fn [x] (->> x (map (constantly 1)) (reduce +)))", "user": "5568a1bde4b0c656e3ff1857"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5394c100e4b0b51d73faaecf"}, {"problem": 22, "code": "#(loop[l %, r 0]\n   (if (nil? l)\n     r\n     (recur (next l) (inc r))))", "user": "556c70dae4b09a3098a524fd"}, {"problem": 22, "code": "(fn [x] (alength (to-array x)))", "user": "556cc24ae4b09a3098a52502"}, {"problem": 22, "code": "(fn count- [x]\n  (if (empty? x)\n    0\n    (+ 1 (count- (rest x)))\n    )\n  )", "user": "556cd549e4b09a3098a52503"}, {"problem": 22, "code": "#(reduce (fn[x y] (inc x)) 0 %)", "user": "556bbaaee4b09a3098a524f0"}, {"problem": 22, "code": "(fn numberElements\n  ([sequence] (numberElements sequence 0))\n  ([sequence counter]\n   (if (empty? sequence)\n     counter\n     (numberElements (rest sequence) (inc counter)))))", "user": "556c94afe4b09a3098a524fe"}, {"problem": 22, "code": "#(reduce (fn [n _] (inc n)) 0 %)", "user": "5565d5e4e4b0c656e3ff181f"}, {"problem": 22, "code": "(fn [xs]\n  (reduce (fn [acc x] (+ acc 1)) 0 xs)\n  )", "user": "555b672ce4b0deb715856e50"}, {"problem": 22, "code": "(fn myCount [x] \n  ((fn int_count [x idx]\n     (if (empty? x)\n       idx\n       (int_count (rest x) (inc idx))\n       )\n     ) x 0)\n)", "user": "556ddbeae4b09a3098a5250a"}, {"problem": 22, "code": "(fn cnt [xs] ( if\n               (= xs nil) 0 (+ 1 (cnt (next xs)))))", "user": "556de4dfe4b09a3098a5250c"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "55663e66e4b0c656e3ff182a"}, {"problem": 22, "code": "#(reduce + (map (fn [eri] 1) % ))", "user": "556e152de4b09a3098a52510"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "55377d78e4b09218d5f44fca"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "510608ebe4b01150e115ebe3"}, {"problem": 22, "code": "#(reduce + (map(constantly 1)%))", "user": "556dd141e4b09a3098a52509"}, {"problem": 22, "code": "(fn [s] (reduce (fn [c s] (inc c)) 0 s))", "user": "556f3b1ce4b09a3098a5251c"}, {"problem": 22, "code": "#(reduce (fn [r x] (+ r 1)) 0 %)", "user": "556f443be4b09a3098a5251e"}, {"problem": 22, "code": "(fn [xs] (reduce + (map (fn [_] 1) xs)))", "user": "556a3243e4b09a3098a524de"}, {"problem": 22, "code": "(fn f [x] (if (next x) (+ 1 (f (next x))) (if (empty? x) 0 1)))", "user": "556f35fee4b09a3098a5251a"}, {"problem": 22, "code": "#(loop [ret 1 cur %]\n   (if (empty? (rest cur))\n     ret\n     (recur (inc ret) (rest cur)) \n   )\n )", "user": "556fa11ae4b09a3098a52524"}, {"problem": 22, "code": "(fn foo [col]\n  (if (= (rest col) ())\n    1\n    (+ 1 (foo (rest col)))))", "user": "4e8385d8535db62dc21a62db"}, {"problem": 22, "code": "(fn [lst]\n  (loop [i lst cnt 0]\n   (cond (empty? i) cnt\n     :else (recur (rest i)(inc cnt)))) )", "user": "55702247e4b09a3098a5252a"}, {"problem": 22, "code": "#(reduce + (map (fn [_] 1) %))", "user": "55702081e4b09a3098a52529"}, {"problem": 22, "code": "(fn r [s] (if (empty? s) 0 (+ 1 (r (rest s)))))", "user": "556766c1e4b0c656e3ff1840"}, {"problem": 22, "code": "#(apply + (map (fn [x] 1) %))", "user": "5570c836e4b09a3098a52532"}, {"problem": 22, "code": "(fn\n  [xs]\n  (reduce\n      (fn\n        [acc x]\n        (inc acc))\n      0\n   xs))", "user": "548749cee4b0e286459a11c4"}, {"problem": 22, "code": "#(apply + (map (fn [x] 1) %))", "user": "5571d6e5e4b09a3098a5253f"}, {"problem": 22, "code": "(fn [x] (apply + (map (fn [y] 1) x)))", "user": "53065acbe4b02e8216869792"}, {"problem": 22, "code": "(fn [n] (reduce (fn [v e] (+ 1 v)) 0 n))", "user": "5570d5a4e4b09a3098a52533"}, {"problem": 22, "code": "#(loop [result 0 c %]\n    (if(empty? c) result\n    (recur (inc result) (rest c))))", "user": "55654e17e4b0c656e3ff1818"}, {"problem": 22, "code": "(fn [array]\n  (reduce (fn [result item] (inc result)) 0 array))", "user": "5572ff76e4b0aa18f790f3f2"}, {"problem": 22, "code": "(fn length [x] (if (empty? x) 0 (inc (length (rest x)))))", "user": "5572fdd7e4b0aa18f790f3f1"}, {"problem": 22, "code": "(fn [xs] (reduce (fn [a,b] (+ a b)) (map (fn [x] 1) xs)))", "user": "5572f74fe4b0aa18f790f3ef"}, {"problem": 22, "code": "(fn [s] (loop [l s n 0] (if (empty? l) n (recur (rest l) (inc n)))))", "user": "53fc63dce4b0de5c4184859f"}, {"problem": 22, "code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "55306b8ae4b076ab5578f812"}, {"problem": 22, "code": "#(reduce (fn [n _] (+ n 1)) 0 %)", "user": "556189a6e4b0c656e3ff17c9"}, {"problem": 22, "code": "(fn size [s] (if (empty? s) 0 (+ 1 (size (rest s)))))", "user": "55727fb5e4b09a3098a52545"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "550fb0bfe4b06e50f9beb17b"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "54b63539e4b05787c3b163b4"}, {"problem": 22, "code": "reduce (fn [v n] (inc v)) 0", "user": "542c0708e4b0dad94371f29b"}, {"problem": 22, "code": "#(last (map-indexed (fn [idx itm] (+ idx 1)) %))", "user": "55625e32e4b0c656e3ff17d8"}, {"problem": 22, "code": "(fn [x] (alength (to-array x)))", "user": "55755602e4b05c286339e061"}, {"problem": 22, "code": "(fn cnt [col]\n   (if (empty? col)\n     0\n     (+ 1 (cnt (rest col)))\n     \n     )\n  \n  \n  )", "user": "556f48b9e4b09a3098a5251f"}, {"problem": 22, "code": "(fn sm-count [y] (if (first y) (inc (sm-count (rest y))) 0 ) )", "user": "5575aae2e4b05c286339e065"}, {"problem": 22, "code": "#(loop [n 0 xs %] (if (= (next xs) nil) (inc n) (recur(inc n) (rest xs))))", "user": "552712e7e4b0ffed3738f92a"}, {"problem": 22, "code": "(fn [coll] \n   (loop [[x & the-rest] coll\n        counter 1] \n   (if (nil? the-rest) counter (recur the-rest (inc counter)))))", "user": "55750e49e4b05c286339e05c"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "52b89d55e4b07a9af57922b3"}, {"problem": 22, "code": "(fn\n  [param]\n  (loop [n 0 rest-param param]\n    (if (empty? rest-param)\n      n\n      (recur (inc n) (rest rest-param))))\n  )", "user": "556ff203e4b09a3098a52526"}, {"problem": 22, "code": "reduce (fn [c s] (inc c)) 0", "user": "4f4cc67fe4b03ad3f0c10c96"}, {"problem": 22, "code": "(fn  [x]\n  (if (= {} x) 0\n   (loop [y x m 0]\n     (if (= '()   y )\n         m \n         (recur (rest y) (inc m) )\n     )\n   )\n  )\n)", "user": "526f670ce4b03e8d9a4a7365"}, {"problem": 22, "code": "(fn [etw]\n  (loop [more etw\n         i 0]\n    (if (seq more)\n      (recur (rest more) (+ i 1))\n      i)))", "user": "55756d34e4b05c286339e062"}, {"problem": 22, "code": "(fn\n  [xs]\n  (apply + (map (fn [x] 1) xs))\n)", "user": "5576fee3e4b05c286339e078"}, {"problem": 22, "code": "#(loop [result 0 c %]\n    (if(empty? c) result\n    (recur (inc result) (rest c))))", "user": "5253de67e4b0541d1855b939"}, {"problem": 22, "code": "(fn [s] (reduce (fn [a i] (inc a)) 0 s))", "user": "557734d3e4b05c286339e07d"}, {"problem": 22, "code": "#(reduce (fn [x _] (inc x)) 0 %1)", "user": "5576006ae4b05c286339e068"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "536046a9e4b063bf7a5f8fe1"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "55769940e4b05c286339e070"}, {"problem": 22, "code": "#(alength (to-array %))", "user": "55744472e4b0aa18f790f402"}, {"problem": 22, "code": "(fn [liste]\n  \t(loop [rliste liste result 0]\n      \t(if (empty? rliste)\n          result\n          (recur (rest rliste) (+ result 1))\n        )\n     )\n)", "user": "556f2009e4b09a3098a52519"}, {"problem": 22, "code": "#(loop [c 0 xs %]\n  (if (empty? xs) c (recur (inc c) (rest xs))))", "user": "5416b4a2e4b01498b1a71a01"}, {"problem": 22, "code": "reduce (fn [M _] (+ M 1))  0", "user": "5577318ce4b05c286339e07c"}, {"problem": 22, "code": "(fn [data]\n\n( inc(apply max(map-indexed (fn [idx itm] idx) data)))\n\n)", "user": "55757e81e4b05c286339e063"}, {"problem": 22, "code": "(fn count-seq\n  [inputSequence]\n\n  ((fn [currentSeq currentCount]\n      (if (next currentSeq)\n        (recur (rest currentSeq) (inc currentCount))\n        (inc currentCount)))\n    inputSequence 0))", "user": "556b67c9e4b09a3098a524ed"}, {"problem": 22, "code": "#(reduce (fn [c v] (+ c 1)) 0 %)", "user": "557954aae4b05c286339e092"}, {"problem": 22, "code": "(fn [col] (apply + (map (fn[e] 1)col)))", "user": "554b8b7ae4b0a04f7929958e"}, {"problem": 22, "code": "#(loop [acc 0 coll %]\n   (if (empty? coll) acc\n   (recur (inc acc) (rest coll))))", "user": "5576c2e6e4b05c286339e073"}, {"problem": 22, "code": "(fn [x] (reduce (fn [z y] (inc z)) 0 x) )", "user": "5579d60ce4b05c286339e099"}, {"problem": 22, "code": "(fn c [s] (if (empty? s)\n              0\n              (+ 1 (c (rest s)))))", "user": "5578c67fe4b05c286339e08d"}, {"problem": 22, "code": "(fn kount\n  ([li] (kount li 0))\n  ([li total]\n\t(if li\n      (recur (next li) (inc total))\n      total)))", "user": "557a1e18e4b05c286339e09e"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5579bc24e4b05c286339e098"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "54edfebbe4b024c67c0cf869"}, {"problem": 22, "code": "(fn [coll] (reduce + \n                   (map \n                    (fn [a] (identity 1)) \n                    coll)\n                ))", "user": "557af43ae4b05c286339e0a8"}, {"problem": 22, "code": "#(reduce + (map (fn [x] (+ 0 1)) %))", "user": "556523fce4b0c656e3ff1815"}, {"problem": 22, "code": "(fn [ls] (reduce + (map (fn [x] 1) ls)))", "user": "557a42bee4b05c286339e0a0"}, {"problem": 22, "code": "(fn foo [x] (if (= x []) 0 (+ 1 (foo (rest x)))))", "user": "557bc06ae4b05c286339e0b8"}, {"problem": 22, "code": "(fn my-count [l]\n  (reduce (fn [a i] (inc a)) 0 l))", "user": "557bcce4e4b05c286339e0b9"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "4f40c46fe4b0e243712b1fbe"}, {"problem": 22, "code": "(fn [x] (\n  (fn [x n] (\n    if (empty?\n         x) n \n    (recur (rest x)\n      (+ n 1))\n  )) x 0))", "user": "5437d022e4b032a45b869309"}, {"problem": 22, "code": "(fn [a] (inc (first (last (map-indexed vector a)))))", "user": "554f7ef2e4b00713264bd9a1"}, {"problem": 22, "code": "(fn f [p] (if (= p []) 0 (+ 1 (f (rest p)))))", "user": "557bd432e4b05c286339e0bb"}, {"problem": 22, "code": "(fn f ([x] (f x 0)) \n      ([x i] (if (empty? x) i (f (rest x) (inc i)))))", "user": "5576e78de4b05c286339e075"}, {"problem": 22, "code": "(fn [a-seq]\n  (loop [s a-seq n 0]\n    (if (empty? s)\n      n\n      (recur (rest s) (inc n)))))", "user": "557cf48be4b05c286339e0ca"}, {"problem": 22, "code": "reduce (fn [a b] (+ 1 a)) 0", "user": "557db87fe4b05c286339e0cc"}, {"problem": 22, "code": "(fn [x]\n  (reduce (fn [x y] (+ 1 x))\n          0 x))", "user": "557beef1e4b05c286339e0bf"}, {"problem": 22, "code": "(fn [se] (loop [s se acc 0]\n           (if (empty? s)\n             acc\n             (recur (rest s) (inc acc)))))", "user": "557dbc9de4b05c286339e0cd"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5573a505e4b0aa18f790f3fa"}, {"problem": 22, "code": "(fn [l]\n    (reduce (fn [f s] (+ f 1)) 0 l)\n    )", "user": "5576961be4b05c286339e06f"}, {"problem": 22, "code": "reduce (fn [x y] (+ x 1)) 0", "user": "506f0968e4b09350ab4199f5"}, {"problem": 22, "code": "#(reduce (fn [x y] (+ x 1)) 0 %)", "user": "557ae0a8e4b05c286339e0a7"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5537c939e4b09218d5f44fd2"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "556ca359e4b09a3098a524ff"}, {"problem": 22, "code": "(fn [a] \n  (loop [b a\n         n 0] \n    (if (nil? b) \n      n \n      (recur (next b) \n             (inc n)))))", "user": "557ed776e4b05c286339e0da"}, {"problem": 22, "code": "#(loop [n 0 coll %] (if (empty? coll) n (recur (inc n) (next coll))))", "user": "512930ade4b03a34742b4314"}, {"problem": 22, "code": "(fn [x] (reduce + (map (fn [y] 1) x)))", "user": "5567643ce4b0c656e3ff183f"}, {"problem": 22, "code": "#(reduce (fn [c i] (+ c 1)) 0 %)", "user": "55279ff2e4b0ffed3738f931"}, {"problem": 22, "code": "(fn [col] ((fn [coll n] (if (empty? coll) n (recur (rest coll) (inc n)))) col 0))", "user": "557ed664e4b05c286339e0d9"}, {"problem": 22, "code": "(fn [x] (+ 1 (ffirst (reverse (map-indexed vector x)))) )", "user": "557e8326e4b05c286339e0d7"}, {"problem": 22, "code": "(fn [accum col] (if(empty? col) accum (recur (+ 1 accum) (rest col)))) 0", "user": "557ffd0ee4b05c286339e0e3"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5037534de4b0af0658af77aa"}, {"problem": 22, "code": "(fn [coll]\n  (loop [total 0\n         [head & tail] coll]\n    (if (nil? head)\n      total\n      (recur (inc total) tail))))", "user": "5553b729e4b0deb715856e05"}, {"problem": 22, "code": "(fn [l] (reduce (fn [a b] (+ a 1)) 0 l))", "user": "5322dcb3e4b09d4e7a9b54c8"}, {"problem": 22, "code": "(fn cff [x] (if (empty? x) 0 (+ 1 (cff (rest x))) ) )", "user": "555d0121e4b0a2eb076a39a4"}, {"problem": 22, "code": "(fn [alist]\n  (reduce (fn [x, y]\n            (inc x)) 0 alist))", "user": "557e2eafe4b05c286339e0d2"}, {"problem": 22, "code": "reduce (fn[c _] (inc c)) 0", "user": "5580da74e4b05c286339e0f1"}, {"problem": 22, "code": "(fn [z] ((fn f [a xs] (if (empty? xs) a (f (+ a 1) (rest xs)) )) 0 z))", "user": "55805a2ee4b05c286339e0ea"}, {"problem": 22, "code": "(fn [xs] \n  (reduce (fn [s x] (+ 1 s)) 0 xs))", "user": "5581747fe4b05c286339e0fa"}, {"problem": 22, "code": "#(alength (to-array %))", "user": "55816a70e4b05c286339e0f8"}, {"problem": 22, "code": "(fn myLength'\n  [lst]\n  (cond\n    (empty? lst) 0\n    :else (+ 1 (myLength' (rest lst)))))", "user": "557e9d17e4b05c286339e0d8"}, {"problem": 22, "code": "(fn [ls]\n  (loop [n 0 lt ls]\n    (if (= [] lt)\n      n\n      (recur (inc n) (drop 1 lt))            \n      )\n    )\n)", "user": "5581a6dae4b05c286339e0fe"}, {"problem": 22, "code": "(fn [col] (loop [c col n 0] (if (seq c) (recur (rest c) (inc n)) n)))", "user": "514a3fa5e4b0829bd132edb6"}, {"problem": 22, "code": "(fn f [sq] \n  (if (empty? sq) 0 (+ (f (rest sq)) 1)))", "user": "55815973e4b05c286339e0f6"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "551d8796e4b07993ea3788ec"}, {"problem": 22, "code": "reduce (fn [x, _] (inc x)) 0", "user": "55831f0fe4b05c286339e112"}, {"problem": 22, "code": "(fn my-count [lst] (if (empty? lst) 0 (+ 1 (my-count (rest lst)))))", "user": "55836631e4b05c286339e114"}, {"problem": 22, "code": "#(loop [length 0 v %]\n   (if (empty? v)\n     length\n     (recur (inc length) (rest v))))", "user": "5582c5b1e4b05c286339e10a"}, {"problem": 22, "code": "(fn [coll]\n  (loop [partial-coll coll counter 0]\n    (if (empty? partial-coll)\n      counter\n      (recur (rest partial-coll) (inc counter)))))", "user": "55842c7ee4b05c286339e11d"}, {"problem": 22, "code": "(fn my-count [coll] (reduce (fn [n _] (inc n)) 0 coll))", "user": "55844125e4b05c286339e121"}, {"problem": 22, "code": "#(loop [output 0 input %]\n   (if (empty? input) output\n     (recur (inc output) (rest input))))", "user": "558378dce4b05c286339e115"}, {"problem": 22, "code": "(fn count-elem [l]\n  (reduce (fn [acc x] (inc acc)) 0 l))", "user": "55845fb6e4b04192f3441eed"}, {"problem": 22, "code": "(fn acount\n  ([xs] (acount xs 0))\n  ([xs n] (if (seq xs)\n            (acount (rest xs) (inc n))\n            n)))", "user": "54bf99c8e4b0ed20f4ff6f05"}, {"problem": 22, "code": "reduce (fn [a c] (inc a)) 0", "user": "555883c5e4b0deb715856e2d"}, {"problem": 22, "code": "(fn [x] (alength (to-array x)))", "user": "55807091e4b05c286339e0eb"}, {"problem": 22, "code": "#(loop [i 0 s %] (if (empty? s) i (recur (inc i) (next s))))", "user": "556cb481e4b09a3098a52501"}, {"problem": 22, "code": "(fn [x] (reduce + (map (constantly 1) x)))", "user": "5583bd81e4b05c286339e118"}, {"problem": 22, "code": "#(loop [x % c 0]\n   (if (empty? x)\n     c\n     (recur (rest x) (inc c))))", "user": "5585aa48e4b001b0851d7510"}, {"problem": 22, "code": "(fn [col] (reduce \n           \t\t(fn [a b] (inc a)) \n           \t\t0 \n           \t\tcol)\n)", "user": "5585ff2ee4b001b0851d7514"}, {"problem": 22, "code": "(fn [s] (loop [n 0 s s] (if (empty? s) n (recur (inc n) (rest s)))))", "user": "54c9571ee4b045293a27f66b"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "53bf6962e4b0c98a41f5cca2"}, {"problem": 22, "code": "(fn [x]\n  (reduce +  (map (fn [y] 1) x )))", "user": "55855f00e4b001b0851d750b"}, {"problem": 22, "code": "#(reduce (fn [n coll] (inc n)) 0 %)", "user": "50ec409ce4b04edc33777045"}, {"problem": 22, "code": "(fn [il]\n  (loop [l il n 0]\n    (if (empty? l)\n      n\n      (recur\n       (rest l) (inc n)))))", "user": "52979551e4b02ebb4ef75043"}, {"problem": 22, "code": "(fn [x]\n  (loop [l x\n        i 0]\n    (if (empty? l) i\n      (recur (rest l) (inc i)))))", "user": "503c90aae4b06c4e0e1fa24b"}, {"problem": 22, "code": "(fn [x] (+ (first (first (reverse (map-indexed vector x)))) 1 ))", "user": "5585ff97e4b001b0851d7515"}, {"problem": 22, "code": "(fn [list]\n  (loop [temp-list list\n         n 0]\n    (if (empty? temp-list)\n      n\n      (recur (rest temp-list) (inc n)))))", "user": "55838353e4b05c286339e116"}, {"problem": 22, "code": "(fn [coll']\n\t(let [func (fn iter [coll cnt]\n\t\t(if (empty? coll) \n\t\t\tcnt\n\t\t\t(iter (rest coll) (inc cnt))))]\n\t(func coll' 0)))", "user": "5583888ae4b05c286339e117"}, {"problem": 22, "code": "(fn cnt [s]\n  (if (empty? s)\n    0\n    (inc (cnt (rest s)))))", "user": "4f4391a9e4b0d7d3c9f3fd23"}, {"problem": 22, "code": "(fn [x] ((fn [x c] (if (empty? x) c (recur (rest x) (+ c 1)) )) x 0))", "user": "55818b0ee4b05c286339e0fb"}, {"problem": 22, "code": "(fn sm \n  ([elems]\n  \t(sm elems 0))\n  ([elems elemCount]\n    (if (= nil (first elems))\n           elemCount\n           (sm (rest elems) (inc elemCount)))\n   )\n  )", "user": "558843dae4b059ccff29b1f3"}, {"problem": 22, "code": "(fn [s] \n  (reduce (fn [x y] (+ x 1)) 0 s))", "user": "55885edae4b059ccff29b1f6"}, {"problem": 22, "code": "(fn f [x] (reduce #(if (= %2 []) %1 (inc %1)) 0 x))", "user": "558869ade4b059ccff29b1f7"}, {"problem": 22, "code": "(fn cnt [l]\n  (if (= l [])\n    0\n    (+ 1 (cnt (rest l)))))", "user": "503777a4e4b0af0658af77ac"}, {"problem": 22, "code": ";#(when (= empty?(%1) false)\n ;       recur (rest(%1)))\n \n#(reduce + (map (fn [x] 1) %))", "user": "5587d91ae4b059ccff29b1e9"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5587cdefe4b059ccff29b1e7"}, {"problem": 22, "code": "(fn [list]\n  (let \n   \t[fun (fn [[head & tail] cnt]\n   \t\t(if (= tail nil)\n   \t\t\tcnt\n    \t\t(recur tail (inc cnt))))]\n\t(if (empty? list)\n      0\n      (fun list 1))))", "user": "557ca912e4b05c286339e0c8"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "558466fce4b04192f3441eee"}, {"problem": 22, "code": "(fn [seq] (reduce (fn [r _] (inc r)) 0 seq))", "user": "55895eade4b059ccff29b202"}, {"problem": 22, "code": "(fn [l] \n  (reduce (fn [b v] \n            (inc b)) 0 l))", "user": "5587d8b3e4b059ccff29b1e8"}, {"problem": 22, "code": "reduce (fn [a _](inc a)) 0", "user": "55893ebbe4b059ccff29b1ff"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "55896a0ce4b059ccff29b204"}, {"problem": 22, "code": "(fn total-number [lst]\n  (if (= lst '()) 0 \n    (+ 1 \n       (total-number (rest lst))\n    )\n  )\n)", "user": "5587fe2ce4b059ccff29b1ed"}, {"problem": 22, "code": "reduce (fn [acc elem] (+ acc 1)) 0", "user": "5586f091e4b059ccff29b1dc"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "4ebed069535dfed6da9c6d99"}, {"problem": 22, "code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "5489dd4de4b0e286459a11ef"}, {"problem": 22, "code": "#(reduce (fn [number _] (inc number)) 0 %)", "user": "55857985e4b001b0851d750c"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "55882c84e4b059ccff29b1f2"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "5564c113e4b0c656e3ff180d"}, {"problem": 22, "code": "#(reduce (fn [x y] (+ x 1)) 0 %)", "user": "558a4357e4b0277789237617"}, {"problem": 22, "code": "(fn [s]\n  (reduce + \n          (map (fn [x] 1) s)))", "user": "54656384e4b01be26fd746db"}, {"problem": 22, "code": "#(reduce + (map (fn [dummy] 1)  %))", "user": "55893b09e4b059ccff29b1fe"}, {"problem": 22, "code": "#(loop [result 0 c %]\n    (if(empty? c) result\n    (recur (inc result) (rest c))))", "user": "558a81fbe4b027778923761c"}, {"problem": 22, "code": "(fn cnt [coll]\n  (loop [coll coll\n         cnt 0]\n    (if (empty? coll)\n      cnt\n      (recur (rest coll) (inc cnt)))))", "user": "558aabbfe4b0277789237621"}, {"problem": 22, "code": "(fn [x] \n\t(loop [seq x cnt 0]\n      (if (empty? seq)\n        cnt\n      (recur (rest seq) (inc cnt))\n)))", "user": "557f7c8be4b05c286339e0e0"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5589e88ae4b0277789237610"}, {"problem": 22, "code": "(partial reduce (fn [x y] (+ x 1)) 0)", "user": "558aa97de4b0277789237620"}, {"problem": 22, "code": "#(reduce (fn [x _] (+ 1 x)) 0 %)", "user": "558b41fce4b0277789237628"}, {"problem": 22, "code": "(fn [s]                                                                                                                         \n  (loop [s- s i 1]                                                                                                                                      \n    (if (empty? (rest s-))                                                                                                      \n      i                                                                                                                                                 \n      (recur (rest s-) (inc i)))))", "user": "558b50d5e4b027778923762b"}, {"problem": 22, "code": "(fn [col] (reduce + (map (fn [_] 1) col)))", "user": "558bb38fe4b0277789237631"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5587cd80e4b059ccff29b1e5"}, {"problem": 22, "code": "(fn mycount\n\t[myseq]\n\t(loop\n\t\t[acc 0 myrest myseq]\n\t\t(if (empty? myrest)\n\t\t\tacc\n\t\t\t(recur (inc acc) (rest myrest)))))", "user": "55897fe2e4b059ccff29b205"}, {"problem": 22, "code": "(fn myCount \n               ([x] (myCount x 0))\n               ([x n]\n                 (if (nil? x)\n                  n\n                  (myCount (next x) (inc n))\n                 )\n               )\n)", "user": "558b494ce4b0277789237629"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "558a96ade4b027778923761f"}, {"problem": 22, "code": "(fn [s] (loop [n 0 t s] (if (empty? t) n (recur (+ n 1) (rest t))) ))", "user": "558c8405e4b027778923763a"}, {"problem": 22, "code": "#(loop [result 0 c %]\n    (if(empty? c) result\n    (recur (inc result) (rest c))))", "user": "558d43f1e4b0277789237640"}, {"problem": 22, "code": "#(reduce + (map (fn [x] (quote 1)) %))", "user": "5589a735e4b059ccff29b206"}, {"problem": 22, "code": "(fn length\n  ([s]\n  (length s 0))\n  ([s x]\n  (if (empty? s)\n    x\n    (length (rest s) (+ x 1)))))", "user": "555f6215e4b0a2eb076a39c4"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "558bf7cfe4b0277789237635"}, {"problem": 22, "code": "(fn [x] (reduce (fn [x _] (inc x)) 0 x))", "user": "558bdcefe4b0277789237633"}, {"problem": 22, "code": "#(reduce (fn [acc n] (inc acc)) 0 %1)", "user": "558df2ebe4b0277789237649"}, {"problem": 22, "code": "#(reduce (fn[x y] (inc x) ) 0 %)", "user": "558ed227e4b0277789237658"}, {"problem": 22, "code": "(fn [inpcol]\n  (loop [num 0 col inpcol]\n     (if (empty? col)\n       num\n       (recur (inc num) (rest col)) ) ))", "user": "5294a49be4b02ebb4ef7500f"}, {"problem": 22, "code": "(fn [l]\n   (loop [n 0\n          m l]\n     (if (empty? m)\n       n\n       (recur (inc n) (rest m)))))", "user": "53c0f4dee4b00fb29b221259"}, {"problem": 22, "code": "(fn get_count [seq] (reduce (fn [size _] (inc size)) 0 seq))", "user": "558eebf9e4b027778923765b"}, {"problem": 22, "code": "#((fn [x n] (if (empty? x) n (recur (rest x) (inc n)))) % 0)", "user": "558f4fbae4b0277789237661"}, {"problem": 22, "code": "reduce (fn [R _] (inc R)) 0", "user": "558504aae4b04192f3441ef5"}, {"problem": 22, "code": "#(reduce (fn [acc el] (+ acc 1)) 0 %)", "user": "558fec41e4b0277789237666"}, {"problem": 22, "code": "(fn[s] (reduce (fn[r e] (+ 1 r)) 0 s) )", "user": "5587cd86e4b059ccff29b1e6"}, {"problem": 22, "code": "(fn [input] (apply + (map (fn [x] val 1) input)))", "user": "559057c4e4b027778923766e"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) (vec %)))", "user": "55905996e4b027778923766f"}, {"problem": 22, "code": "(fn [x]  (inc (first (last (map-indexed vector x)))))", "user": "558ffd47e4b0277789237669"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "557e6b73e4b05c286339e0d6"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5590e461e4b0277789237675"}, {"problem": 22, "code": "(fn [x]\n  (loop [s x n 0]\n    (if (empty? s)\n      n\n      (recur (rest s) (inc n)))))", "user": "5590e55de4b0277789237676"}, {"problem": 22, "code": "(fn [xs] (loop [n 0 s xs] (if (empty? s) n (recur (inc n) (rest s)))))", "user": "559141b1e4b0604b3f94d576"}, {"problem": 22, "code": "(fn my-count\n  ([coll] (my-count coll 0))\n  ([coll acc-count] (if (empty? coll) acc-count (recur (rest coll) (inc acc-count))))\n)", "user": "55916d7be4b0604b3f94d57d"}, {"problem": 22, "code": "(fn f1 [l]\n  (if (empty? l) 0 (+ 1 (f1 (rest l)))))", "user": "5547b72be4b0a04f79299550"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5591da55e4b0604b3f94d585"}, {"problem": 22, "code": "(fn [my-list] (reduce + (map #(if (nil? %) 0 1) my-list)))", "user": "5590ebb1e4b0277789237677"}, {"problem": 22, "code": "#(apply + (map (fn [x] 1) %))", "user": "55913b57e4b0604b3f94d575"}, {"problem": 22, "code": "(fn \n  [x]\n  (loop [lst x c 0]\n    (if (empty? lst)\n      c\n      (recur (rest lst) (+ c 1)))))", "user": "55920e24e4b0604b3f94d587"}, {"problem": 22, "code": "(fn [l] (loop [c 0\n               l l]\n          (if (= l [])\n            c\n            (recur (inc c) (rest l))\n          )\n          )\n  )", "user": "55923ef7e4b0604b3f94d58a"}, {"problem": 22, "code": "#(loop [cnt 0 rst %] (if (empty? rst) cnt (recur (inc cnt) (rest rst))))", "user": "558a5d52e4b0277789237618"}, {"problem": 22, "code": "reduce (fn [i _] (inc i)) 0\n;; It should be: reduce inc 0", "user": "55915fe9e4b0604b3f94d579"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "55496eeae4b0a04f79299569"}, {"problem": 22, "code": "(fn [x] (reduce (fn [acc _] (inc acc)) 0 x))", "user": "5592dc6be4b0c79f6e1db935"}, {"problem": 22, "code": "(fn [x]\n  (loop [x x n 0]\n    (if (empty? x)\n      n\n      (recur (rest x) (inc n)))))", "user": "55934bebe4b0c79f6e1db93b"}, {"problem": 22, "code": "(fn ! [%]\n  (if (= % ())\n    0\n    (inc (! (rest %)))))", "user": "55933c7ae4b0c79f6e1db938"}, {"problem": 22, "code": "(partial (fn f [n v] (if (empty? v) n (f (+ n 1) (rest v)))) 0)", "user": "5593619ae4b0c79f6e1db93c"}, {"problem": 22, "code": "(fn [s]\n  (loop [c 0\n         s s]\n    (if (empty? s)\n      c\n      (recur (inc c) (rest s)))))", "user": "531c6e72e4b08068f379eda0"}, {"problem": 22, "code": "(fn [s]\n  (loop [s s c 0]\n    (if (empty? s)\n      c\n      (recur (rest s) (inc c)))))", "user": "559279b7e4b0604b3f94d58c"}, {"problem": 22, "code": "(fn [coll]\n  (loop [ct 0\n         coll coll]\n    (if (empty? coll) \n      ct\n      (recur (inc ct) (rest coll)))))", "user": "5509bd6ee4b06e50f9beb120"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5593b62ae4b0c79f6e1db944"}, {"problem": 22, "code": "(fn [seqn] (reduce (fn [c _] (inc c)) 0 seqn))", "user": "5585f088e4b001b0851d7513"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5591b634e4b0604b3f94d581"}, {"problem": 22, "code": "(fn [s] (reduce (fn [a _] (inc a)) 0 s))", "user": "4fffa422e4b0678c553fc404"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "55941019e4b0c79f6e1db94b"}, {"problem": 22, "code": "(partial reduce (fn [c _] (+ c 1)) 0)", "user": "5594721de4b0c79f6e1db955"}, {"problem": 22, "code": "reduce (fn [n _] (inc n)) 0", "user": "558ea13be4b0277789237654"}, {"problem": 22, "code": "(fn [coll]\n  (reduce + (map (fn [x] 1) coll)))", "user": "55938fe2e4b0c79f6e1db940"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "54694cf7e4b00cfc9eacc143"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5593b10ce4b0c79f6e1db943"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5594f8aee4b0c79f6e1db95c"}, {"problem": 22, "code": "(fn [a] (loop [x a c 0] (if (empty? x) c (recur (rest x) (inc c)))))", "user": "5595071ae4b0c79f6e1db95d"}, {"problem": 22, "code": "#(inc (first (last (map-indexed (fn [idx item] [idx item]) %1))))", "user": "557819dce4b05c286339e088"}, {"problem": 22, "code": "#(reduce (fn [acc _] (inc acc)) 0 %)", "user": "4e6a23d0535d8ccf87e9fea0"}, {"problem": 22, "code": "(partial reduce (fn [f s] (+ 1 f)) 0)", "user": "55907e8fe4b0277789237672"}, {"problem": 22, "code": "(fn[n] (reduce (fn[n x] (inc n)) 0 n))", "user": "55950c5fe4b0c79f6e1db95e"}, {"problem": 22, "code": "#(apply + (map (fn [x] 1) %))", "user": "5595415ae4b0c79f6e1db965"}, {"problem": 22, "code": "#(loop\n   [l %1\n    i 0]\n   (if (empty? l)\n     i\n     (recur (rest l) (+ i 1))\n     )\n   )", "user": "5593f481e4b0c79f6e1db946"}, {"problem": 22, "code": "(fn [coll]\n  (reduce (fn [acc e] (inc acc))\n          0\n          coll))", "user": "52d38c51e4b099d49816f0c5"}, {"problem": 22, "code": "(fn [s]\n  (loop [s s\n         i 0]\n    (if (empty? s)\n      i\n      (recur (rest s) (inc i)))))", "user": "559622cee4b0c79f6e1db975"}, {"problem": 22, "code": "(fn [col]\n  (let [count-func (fn [col acc]\n                     (if (first col)\n                       (recur (next col) (inc acc))\n                       acc\n                       )\n                     )]\n    (count-func col 0)\n    )\n  )", "user": "525873e8e4b0cb4875a45cb2"}, {"problem": 22, "code": "reduce (fn [acc _] (inc acc)) 0", "user": "5592bf9fe4b0c79f6e1db933"}, {"problem": 22, "code": "(fn ccount\n  ([x] (ccount x 0))\n  ([x y]\n    (if (not (empty? x))\n    (ccount (rest x) (+ y 1))\n    y)))", "user": "55921c21e4b0604b3f94d588"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "54de16cae4b024c67c0cf79c"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x) ) 0 %1 )", "user": "55079e55e4b021ccfedb96aa"}, {"problem": 22, "code": "(fn [input] (loop [i input counter 0](cond (empty? i) counter :t (recur (rest i)(inc counter)))))", "user": "5597cc26e4b031d6649c9b93"}, {"problem": 22, "code": "#(apply + (map (fn [x] 1) %))", "user": "523487f9e4b05e80434a505d"}, {"problem": 22, "code": "(fn [l] \n  (loop [lst l n 0]\n    (if (empty? lst)\n      n\n      (recur (rest lst)(+ n 1)))))", "user": "55929e89e4b0604b3f94d58e"}, {"problem": 22, "code": "(fn [lst] \n  (\n   (fn [lst2, n]\n     (if (= '() lst2)\n       n\n       (recur (rest lst2) (+ 1 n))\n     )\n   )      \n   lst 0\n  )\n)", "user": "5596d885e4b04c1e5c31d75a"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x) )0 %)", "user": "5593a03ce4b0c79f6e1db942"}, {"problem": 22, "code": "#(loop [s (seq %)\n        l 0]\n   (if (empty? s) l\n     (recur (rest s) (inc l))))", "user": "5595ffabe4b0c79f6e1db972"}, {"problem": 22, "code": "(fn count-it [x] (if (empty? x) 0 (+ 1 (count-it (rest x)))))", "user": "55993deee4b031d6649c9ba5"}, {"problem": 22, "code": "(fn [s]\n  (reduce (fn [c _] (inc c)) 0 s))", "user": "55990d3ce4b031d6649c9ba3"}, {"problem": 22, "code": "(fn [col] (reduce + (map (fn [a] 1) col)))", "user": "55996253e4b031d6649c9baa"}, {"problem": 22, "code": "(fn my-count [l] \n  (if (empty? l)\n    0\n    (+ 1 (my-count (rest l)))))", "user": "5599abc9e4b031d6649c9bb0"}, {"problem": 22, "code": "(fn [s] (reduce (fn [i sq] (inc i)) 0 (seq s)))", "user": "55994103e4b031d6649c9ba6"}, {"problem": 22, "code": "(fn [a-seq]\n  (loop [acc 0\n         remaining a-seq]\n    (if (empty? remaining)\n      acc\n      (recur (inc acc)\n             (rest remaining)))))", "user": "55995fa7e4b031d6649c9ba9"}, {"problem": 22, "code": "#(loop [cnt 0 sq %1]\n   (if (empty? sq)\n     cnt\n     (recur (inc cnt) (rest sq))))", "user": "5599cc64e4b031d6649c9bb3"}, {"problem": 22, "code": "(fn my-count [x] (if (empty? x) 0 (+ 1 (my-count (rest x)))))", "user": "559647ebe4b0c79f6e1db977"}, {"problem": 22, "code": "(fn [c]\n  ((fn [i c]\n    (cond\n     (empty? c) i\n     :default (recur (+ 1 i) (rest c))\n     )\n    ) 0 c))", "user": "559a9a3de4b066d22e731f45"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "559ab207e4b066d22e731f49"}, {"problem": 22, "code": "#(reduce (fn [acc x] (inc acc)) 0 %)", "user": "559972d1e4b031d6649c9bab"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5592c56ee4b0c79f6e1db934"}, {"problem": 22, "code": "(fn [x] \n  (loop [x x result 0]\n    (if (empty? x) result\n      (recur (rest x) (+ result 1)))))", "user": "559b55d6e4b066d22e731f54"}, {"problem": 22, "code": "(fn [sq] \n  (loop [i 1 s sq]\n    (if (= (next s) nil)\n    \ti\n    \t(recur (inc i) (rest s)))))", "user": "5595e038e4b0c79f6e1db971"}, {"problem": 22, "code": "#(apply + (map (fn [_] 1) %))", "user": "559c13c5e4b066d22e731f61"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "559af785e4b066d22e731f4c"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "559c3d73e4b066d22e731f65"}, {"problem": 22, "code": "#(loop [x %1 out 0] (if (empty? x) out (recur (rest x) (inc out))))", "user": "5596af34e4b04c1e5c31d758"}, {"problem": 22, "code": "#(apply + (map (fn [coll] 1) %))", "user": "559b2b13e4b066d22e731f4f"}, {"problem": 22, "code": "#(loop [s % c 0] (if (empty? s) c (recur (rest s) (inc c))))", "user": "55989c25e4b031d6649c9b9b"}, {"problem": 22, "code": "reduce (fn [x y] (inc x)) 0", "user": "559b2ad1e4b066d22e731f4e"}, {"problem": 22, "code": "(fn count-a-seq [lat]\n  (reduce (fn [x y] (+ x 1)) 0 lat))", "user": "559b90cee4b066d22e731f56"}, {"problem": 22, "code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "5582dfb6e4b05c286339e10d"}, {"problem": 22, "code": "(fn [x]( reduce (fn [i j] (inc i)) 0 x))", "user": "5594e0e3e4b0c79f6e1db95b"}, {"problem": 22, "code": "#(reduce (fn [x, y] (inc x)) 0 %)", "user": "559468cbe4b0c79f6e1db954"}, {"problem": 22, "code": "(fn [sq]\n  (loop [sq-it sq\n         length 0]\n    (if (empty? sq-it)\n      length\n      (recur (rest sq-it)\n             (inc length)))))", "user": "559d33b3e4b0ec2b359424d9"}, {"problem": 22, "code": "(fn count-el\n  [arr]\n  (reduce + (map (fn [x] 1) arr)))", "user": "559ce276e4b0ec2b359424d7"}, {"problem": 22, "code": "(fn [b] \n  (reduce #(let [a %2] (inc %1)) 0 b))", "user": "559d6288e4b0ec2b359424dc"}, {"problem": 22, "code": "(fn [lst] (reduce (fn [acc x] (+ acc 1)) 0 lst))", "user": "559d7e9ce4b0ec2b359424de"}, {"problem": 22, "code": "(fn [coll]\n  (loop [length 0 sequ coll]\n    (if (empty? sequ)\n      length\n      (recur (inc length) (rest sequ)))))", "user": "559bdf16e4b066d22e731f5a"}, {"problem": 22, "code": "(fn [lst]\n  (loop [lst lst\n         acc 0]\n    (if (empty? lst)\n      acc\n      (recur (rest lst) (inc acc)))))", "user": "559dae85e4b08a52bd4f97cd"}, {"problem": 22, "code": "reduce (fn [x _] (inc x)) 0", "user": "54f3d6c7e4b050824f58f5cb"}, {"problem": 22, "code": "(fn tai\n  [coll] \n  (reduce + (map (constantly 1) coll)))", "user": "55634f38e4b0c656e3ff17e8"}, {"problem": 22, "code": "(fn foo[sequenz] \n  (if (= nil (next sequenz)) \n    1\n    (+ 1 \n       (foo (rest sequenz)))))", "user": "5585806ae4b001b0851d750d"}, {"problem": 22, "code": "reduce (fn [i a] (inc i)) 0", "user": "559e25fde4b08a52bd4f97d0"}, {"problem": 22, "code": "(fn [z]\n   (loop [i 0 r z]\n     (if (empty? r)\n       i\n       (recur (inc i) (butlast r))))\n   )", "user": "559e32fce4b08a52bd4f97d1"}, {"problem": 22, "code": "(fn [lst] \n  (reduce \n   (fn [a b] (+ 1 a)) 0 lst)\n)", "user": "55916764e4b0604b3f94d57b"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "532eec6ce4b019098a6f8b4a"}, {"problem": 22, "code": "(fn new-count [l]\n  (cond \n   (empty? l) 0\n   :else (+ 1 (new-count (rest l)))))", "user": "559f06bae4b0acc240e314e6"}, {"problem": 22, "code": "#(let [coll (seq %)\n       final (last coll)\n       index (.lastIndexOf coll final)\n       result (+ index 1)]\n   result)", "user": "559c4236e4b066d22e731f67"}, {"problem": 22, "code": "#(loop [lis % len 0]\n   (if (seq lis)\n     (recur (rest lis) (inc len))\n     len))", "user": "55868660e4b059ccff29b1d4"}, {"problem": 22, "code": "(fn [my-list] (reduce (fn [acc x] (inc acc)) 0 my-list))", "user": "559ed93ce4b0acc240e314e3"}, {"problem": 22, "code": "(fn foo [s] (if (next s) (inc (foo (next s))) (inc 0)))", "user": "559e7848e4b08a52bd4f97d4"}, {"problem": 22, "code": "reduce (fn [x _] (inc x)) 0", "user": "55342ee0e4b09218d5f44f98"}, {"problem": 22, "code": "#(apply + (map (fn[x]1) %))", "user": "54a841b8e4b09f271ff37ca1"}, {"problem": 22, "code": "(fn [coll]\n  (reduce (fn [acc _] (inc acc)) 0 coll))", "user": "5576f299e4b05c286339e077"}, {"problem": 22, "code": "(fn [xs]\n  (let [ys (seq xs)]    \n    (inc (.lastIndexOf ys (last ys)))))", "user": "54dce62fe4b024c67c0cf78c"}, {"problem": 22, "code": "(fn [s] (\n (fn [s n] (\n  if (empty? s) n (recur (rest s) (+ n 1)))   \n ) s 0)\n)", "user": "559ff3b1e4b0acc240e314ed"}, {"problem": 22, "code": "(fn af\n ([s] (af s 0))\n ([s n] (if (empty? s)\n          n\n          (recur (rest s) (inc n)))))", "user": "5586a459e4b059ccff29b1d5"}, {"problem": 22, "code": "#(loop [s % c 0]\n   (if\n     (empty? s) c\n     (recur (rest s) (inc c))\n     )\n   )", "user": "559fefb4e4b0acc240e314ec"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "559ffabae4b0acc240e314ef"}, {"problem": 22, "code": "#(reduce (fn [i coll] (inc i)) 0 %)", "user": "559ffd74e4b0acc240e314f0"}, {"problem": 22, "code": "(fn [c] (reduce (fn [x _] (inc x)) 0 c))", "user": "55a02d8ae4b0acc240e314f2"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "55a09645e4b0acc240e314fe"}, {"problem": 22, "code": "(fn cnt [s] (if (= s '()) 0 (+ 1 (cnt (rest s)))))", "user": "55597fcce4b0deb715856e37"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "55a0d7e0e4b0acc240e31503"}, {"problem": 22, "code": "(fn [xs] (reduce (fn [acc _] (inc acc)) 0 xs))", "user": "55a12668e4b0acc240e3150b"}, {"problem": 22, "code": "reduce (fn [a b] (inc a)) 0", "user": "55a0fd18e4b0acc240e31507"}, {"problem": 22, "code": "reduce (fn [a b] (inc a)) 0", "user": "55a161d1e4b0acc240e31511"}, {"problem": 22, "code": "(fn [l]\n  (->>\n   l\n   (map (fn [x] 1))\n   (reduce +)))", "user": "55a1683ce4b0acc240e31513"}, {"problem": 22, "code": "(fn count1 ([seqn] (if (empty? seqn) 0 (count1 (rest seqn) 1)))\n  ([seqn i] (if (empty? seqn) i (count1 (rest seqn) (+ i 1)))))", "user": "55a0e139e4b0acc240e31504"}, {"problem": 22, "code": "(fn [coll]\n  (letfn [(iter [coll cnt]\n                (if (seq coll)\n                  (recur (rest coll) (inc cnt))\n                  cnt))]\n    (iter coll 0)))", "user": "553527ede4b09218d5f44fab"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "53f191b8e4b0742d9025b0e0"}, {"problem": 22, "code": "(fn [s]\n  ((fn [p acc]\n    (if (seq p)\n      (recur (rest p) (inc acc))\n      acc)) s 0))", "user": "55a1ba5ee4b0acc240e31517"}, {"problem": 22, "code": "(fn [input]\n  (loop [iter 0\n         array input]\n    (if (= (first array) nil)\n      iter\n      (recur (inc iter) (rest array)))))", "user": "55a1c7efe4b0acc240e31518"}, {"problem": 22, "code": "#(loop [cnt 0\n        sq  %]\n   (if (seq sq)\n     (recur (inc cnt)\n            (rest sq))\n     cnt))", "user": "55a0ea7de4b0acc240e31505"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "557f1a08e4b05c286339e0dc"}, {"problem": 22, "code": "(fn [x] ( apply + (map ( fn [y] 1 ) x ) ) )", "user": "55a21be1e4b0acc240e3151e"}, {"problem": 22, "code": "#(reduce (fn [sum _] (inc sum)) 0 %)", "user": "4f9e830ae4b0dcca54ed6d2c"}, {"problem": 22, "code": "(fn [x] \n  (-> (map-indexed vector x) last first inc))", "user": "53f2e33de4b0742d9025b0ee"}, {"problem": 22, "code": "#(reduce (fn [x y] (+ x 1)) 0 %)", "user": "559c406be4b066d22e731f66"}, {"problem": 22, "code": "(fn\n  [param]\n  (\n   loop[locParam param number 0]\n   (\n    if(empty? locParam)\n    \tnumber\n    \t(recur (rest locParam) (inc number))\n    \n   )))", "user": "55995d88e4b031d6649c9ba8"}, {"problem": 22, "code": "(fn my-count [coll]\n  (reduce + (map (fn [_] 1) coll)))", "user": "55a2d5c2e4b0acc240e3152c"}, {"problem": 22, "code": "#(.size (vec %))", "user": "55a31c66e4b0acc240e31530"}, {"problem": 22, "code": "(fn count' [coll]\n  (if (empty? coll)\n    0\n    (inc (count' (rest coll)))))", "user": "5297dcc5e4b02ebb4ef75047"}, {"problem": 22, "code": "#(apply + (map (fn [%] 1) %))", "user": "55a346e8e4b0acc240e31532"}, {"problem": 22, "code": "reduce (fn [x _] (inc x)) 0", "user": "55a2ef1ae4b0acc240e3152d"}, {"problem": 22, "code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "55998d0ce4b031d6649c9bac"}, {"problem": 22, "code": "(fn c [l]\n  (if (nil? l)\n    0\n    (+ 1 (c (next l)))))", "user": "55a35ef4e4b0acc240e31535"}, {"problem": 22, "code": "(fn c [xs] (if (empty? xs) 0 (+ 1 (c (rest xs)))))", "user": "55a3ca84e4b0acc240e3153c"}, {"problem": 22, "code": "(fn [lst]\n  (loop [i lst cnt 0]\n   (cond (empty? i) cnt\n     :t (recur (rest i)(inc cnt)))))", "user": "542c900be4b0dad94371f2a9"}, {"problem": 22, "code": "(fn count-seq [coll]\n  (reduce (fn [x _] (+ x 1)) 0 coll))", "user": "552bd5c2e4b0ffed3738f969"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "55a48cd2e4b0acc240e31546"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "503e91d4e4b06c4e0e1fa269"}, {"problem": 22, "code": "(fn [coll]\n  (reduce (fn [& args] (inc (first args))) 0 coll ))", "user": "5587ddd9e4b059ccff29b1ea"}, {"problem": 22, "code": "(fn len [l] (if (empty? l) 0 (+ 1 (len (rest l)))))", "user": "55a59ebae4b0acc240e3154d"}, {"problem": 22, "code": "#(reduce (fn [len elem] (inc len)) 0 %)", "user": "55a1d7f6e4b0acc240e31519"}, {"problem": 22, "code": "(fn [the-seq]\n  (reduce (fn [the-count _] (inc the-count)) 0 the-seq))", "user": "55a5c3bee4b0acc240e3154e"}, {"problem": 22, "code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "55a62092e4b0acc240e31554"}, {"problem": 22, "code": "reduce  #(if %2 (inc %1) %1) 0", "user": "532dbd3ce4b019098a6f8b40"}, {"problem": 22, "code": "#(reduce (fn[a b] (+ a 1)) 0 %)", "user": "55a3ef22e4b0acc240e31540"}, {"problem": 22, "code": "(fn [coll] \n  (loop [coll coll n 0]\n    (if (= coll '())\n      n\n      (recur (rest coll) (inc n))\n      )))", "user": "55a74d46e4b09e57187da2a3"}, {"problem": 22, "code": "#(reduce\n  \t(fn [c _] (inc c))\n  \t0 %)", "user": "559d3d22e4b0ec2b359424da"}, {"problem": 22, "code": "(fn [xs]\n  (reduce (fn [x y] (+ 1 x)) 0 xs))", "user": "52df1d62e4b09f7907dd13fb"}, {"problem": 22, "code": "(fn\n  [col]\n  (loop [total 0\n        remaining (vec col)]\n    (if (empty? remaining)\n      total\n      (recur (+ total 1) (pop remaining)))))", "user": "55a7e096e4b0988bba2ad934"}, {"problem": 22, "code": "(fn foo [s] (if (= '() s) 0 (+ 1 (foo (rest s)))))", "user": "55a87f0ee4b0988bba2ad938"}, {"problem": 22, "code": "(fn length [coll] (if-let [[x & xs] (seq coll)] (+ 1 (length xs)) 0))", "user": "5342702ce4b00652c8746edb"}, {"problem": 22, "code": "#(alength (to-array %))", "user": "55a9201fe4b0988bba2ad93f"}, {"problem": 22, "code": "(fn lala [x] \n  (if (= x [])\n    (+ 0 0)\n    (+ 1 (lala (rest x)))\n    ))", "user": "559b7c65e4b066d22e731f55"}, {"problem": 22, "code": "(fn f [s]\n    (cond\n      (empty? s) 0\n      :else (+ 1 (f (rest s)))\n      )\n )", "user": "55aa5f73e4b0988bba2ad94b"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "55a6bca4e4b09e57187da29e"}, {"problem": 22, "code": "(fn [coll]\n  (reduce + (map (fn [x] 1) coll)))", "user": "54cd470ce4b057c6fda3a29d"}, {"problem": 22, "code": "(fn [xs] \n  (loop [c 0\n         xxs xs]\n    (if (empty? xxs)\n      c\n      (recur (inc c) (rest xxs))\n     )\n   )\n  )", "user": "55aa8276e4b0988bba2ad94e"}, {"problem": 22, "code": "#(reduce + 0 (map (fn [_] 1) %))", "user": "55aa7c5ce4b0988bba2ad94d"}, {"problem": 22, "code": "(fn [x] (first (reverse (interleave x (iterate inc 1)))))", "user": "54236ce1e4b01498b1a71ad1"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x) ) 0 %)", "user": "55aa1637e4b0988bba2ad949"}, {"problem": 22, "code": "(fn cc[l]\n  \t(if (empty? l) 0 (+ 1 (cc (rest l)))))", "user": "55aba8f4e4b03311e7b7328c"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "55aacd3be4b0988bba2ad952"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "55ab8c2de4b0988bba2ad954"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "557f748ae4b05c286339e0df"}, {"problem": 22, "code": "#(reduce  +  (map  (fn  [x] 1) %))", "user": "5403f305e4b0df28a13c62e3"}, {"problem": 22, "code": "(fn f\n  ([c]\n   (f c 0))\n  ([c n]\n   (if (empty? c)\n     n\n     (f (rest c) (inc n)))))", "user": "55acab76e4b03311e7b73294"}, {"problem": 22, "code": "(fn my-count \n  [my-seq]\n  (loop [iter 0]\n    (if (nil? (nth my-seq iter nil))\n        iter\n        (recur (inc iter)))))", "user": "55acd080e4b03311e7b73298"}, {"problem": 22, "code": "#(reduce (fn [a b] (+ a b))\n  (map (fn [x] 1) %))", "user": "55a2b008e4b0acc240e31526"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %1))", "user": "5595c60ee4b0c79f6e1db96f"}, {"problem": 22, "code": "(fn [col] (reduce (fn [x y] (inc x)) 0 col))", "user": "55ad1833e4b03311e7b7329f"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "55ab07e0e4b0988bba2ad953"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "55ad4e9ce4b03311e7b732a6"}, {"problem": 22, "code": "#((fn [s n] \n  (if (empty? s) n \n    (recur (rest s) (+ n 1)))) % 0)\n\n\n;;reduce (fn [n _] (inc n)) 0", "user": "55ad59cde4b03311e7b732a7"}, {"problem": 22, "code": "(fn [s]\n    (reduce (fn [i x]\n              (inc i))\n            0 s))", "user": "55ac07afe4b03311e7b7328f"}, {"problem": 22, "code": "#(alength (to-array %))", "user": "55ade883e4b03311e7b732ac"}, {"problem": 22, "code": "#(loop [cnt 0 ens %]\n          (if (empty? ens)\n            cnt\n            (recur (inc cnt) (rest ens))\n          )\n)", "user": "55acb648e4b03311e7b73296"}, {"problem": 22, "code": "(fn [ l ]\n    (loop [i 0 r l]\n        (if (-> r seq not) \n            i\n            (recur (inc i) (rest r)))))", "user": "55975569e4b031d6649c9b8e"}, {"problem": 22, "code": "(fn [list]\n  (loop [length 0\n         restList list]\n    (if (empty? restList)\n      length\n      (recur (inc length) (rest restList)))))", "user": "55ae7adae4b03311e7b732bd"}, {"problem": 22, "code": ";(#(reduce (fn [a b](+ 1 b)) 0 %) \"Hello World\")\n#(reduce (fn [a b](inc a)) 0 (seq %))", "user": "55adf4d7e4b03311e7b732af"}, {"problem": 22, "code": "(fn myfunc [col] (if (next col) (+ 1 (myfunc (rest col))) 1))", "user": "55a9e0fee4b0988bba2ad945"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "55ae6367e4b03311e7b732bc"}, {"problem": 22, "code": "(fn [x]\n  (reduce (fn [y _] (inc y)) 0 x))", "user": "55aaa36fe4b0988bba2ad94f"}, {"problem": 22, "code": "(fn [samp] (last (butlast (interleave (range 1 15) samp))))", "user": "53d977f1e4b0e771c302547a"}, {"problem": 22, "code": "#(reduce(fn[a b](inc a))0 %)", "user": "55af7e21e4b03311e7b732cc"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "55ac16a0e4b03311e7b73291"}, {"problem": 22, "code": "#(reduce (fn [a _] (inc a)) 0 %)", "user": "55afba88e4b002ce9d5cbc17"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "55afe130e4b002ce9d5cbc1b"}, {"problem": 22, "code": "#(loop [coll % cnt 0] (if (empty? coll) cnt (recur (rest coll) (inc cnt))))", "user": "55af5febe4b03311e7b732ca"}, {"problem": 22, "code": "#(loop [lst % cnt 0]\n   (if (empty? lst)\n     cnt\n     (recur (rest lst) (inc cnt))))", "user": "55afc197e4b002ce9d5cbc18"}, {"problem": 22, "code": "reduce (fn [x y] (+ x 1)) 0", "user": "55b0ecb7e4b002ce9d5cbc27"}, {"problem": 22, "code": "#(apply + (map (fn [_] 1)%))", "user": "55b0d315e4b002ce9d5cbc26"}, {"problem": 22, "code": "(fn [x] (inc (last (map (fn [y _] y) (range) x))))", "user": "55b107fee4b002ce9d5cbc2a"}, {"problem": 22, "code": "#(reduce + (map (fn [_] 1) %))", "user": "55b0f5bfe4b002ce9d5cbc28"}, {"problem": 22, "code": "#(loop [list % num 0]\n     (if (empty? list)\n       num\n       (recur (rest list) (inc num))))", "user": "55ae1b68e4b03311e7b732b4"}, {"problem": 22, "code": "(fn [x]\n  (->> x\n       (map (fn [y] 1))\n       (apply +)))", "user": "554b8b6be4b0a04f7929958b"}, {"problem": 22, "code": "reduce #(inc %1 #_%2) 0", "user": "55a37e1fe4b0acc240e31539"}, {"problem": 22, "code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "55b1c24ae4b0da326a65cf70"}, {"problem": 22, "code": "(fn foo [c]\n  (if (empty? c)\n    0\n    (+ (foo (rest c)) 1)))", "user": "55b1c2f8e4b0da326a65cf71"}, {"problem": 22, "code": "(comp alength to-array)", "user": "55b118fae4b002ce9d5cbc2d"}, {"problem": 22, "code": "(fn f [x] (let [z (vec x)] (if (= nil (first z)) 0 (inc (f (rest z))))))", "user": "55b2088ae4b0da326a65cf75"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "55ae383fe4b03311e7b732b7"}, {"problem": 22, "code": "#(reduce (fn [n o_O] (inc n)) 0 %)", "user": "55b22c33e4b0da326a65cf79"}, {"problem": 22, "code": "(fn [xs]\n  ((fn [ys n]\n    (if (empty? ys)\n      n\n      (recur (rest ys) (+ n 1)))) xs 0))", "user": "55b25970e4b0da326a65cf7e"}, {"problem": 22, "code": "(fn [xs] (#(cond (empty? %1) %2 :else (recur (rest %1) (inc %2))) xs 0))", "user": "55b27675e4b01b9910ae296b"}, {"problem": 22, "code": "(fn [coll] (+ (first (last (map-indexed vector coll)))1))", "user": "552ac48ee4b0ffed3738f957"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "55b1372de4b002ce9d5cbc2e"}, {"problem": 22, "code": "(fn [xs]\n        (apply +\n               (map\n                  (fn [x] 1)\n                  xs)))", "user": "557c647ce4b05c286339e0c3"}, {"problem": 22, "code": "(fn [coll]\n  (loop [[x & xs] coll\n         n 0]\n    (if x\n      (recur xs (inc n))\n      n)))", "user": "54dcbc6ee4b024c67c0cf787"}, {"problem": 22, "code": "(fn \n  [input-seq]\n  (loop [res 0 rest-seq input-seq]\n    (if (= rest-seq '())\n      res\n      (recur (+ res 1) (rest rest-seq)))))", "user": "52fe31d5e4b047fd55837038"}, {"problem": 22, "code": "#(alength (to-array %))", "user": "55b39523e4b01b9910ae2973"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "53cb5559e4b00fb29b2212d2"}, {"problem": 22, "code": "#(reduce (fn [v1 & r] (+ v1 1)) 0 %)", "user": "55b412aae4b01b9910ae2979"}, {"problem": 22, "code": "(fn numElements [s] \n   (reduce + (map (fn [x] 1) s))\n  )", "user": "552d487ee4b076ab5578f7e4"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "55b45825e4b01b9910ae297c"}, {"problem": 22, "code": "(fn yyy\n  ([a] (yyy a 0))\n \n  ([a  c]\n  (if (= [] a)\n    c\n      (recur (rest a) (+ 1 c))\n    \n  ))\n)", "user": "55b3e8aee4b01b9910ae2977"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "558075c6e4b05c286339e0ec"}, {"problem": 22, "code": "#(loop [l % \n            cnt 0]\n       (if (seq l) \n         (recur (rest l) (inc cnt))\n         cnt))", "user": "55b1c62de4b0da326a65cf72"}, {"problem": 22, "code": "(fn [list] \"counts items in a list\"\n  (reduce (fn [item _] (inc item)) 0 list))", "user": "55b4b0f5e4b01b9910ae297d"}, {"problem": 22, "code": "(fn [coll] (reduce + (map (fn [x] 1) coll)))", "user": "55b1b67ce4b0da326a65cf6f"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "55b4c339e4b01b9910ae297f"}, {"problem": 22, "code": "(fn [a] (reduce (fn [n _] (inc n)) 0 a))", "user": "55afa977e4b002ce9d5cbc15"}, {"problem": 22, "code": "(fn [x] \n   (->> x (map (fn [k] 1)) (reduce +)))", "user": "55b24240e4b0da326a65cf7b"}, {"problem": 22, "code": "(fn [s] (reduce (fn [a b] (+ a 1)) 0 s))", "user": "55b54ecbe4b01b9910ae2987"}, {"problem": 22, "code": "(fn [x] (reduce + (map (fn [y] 1) x)))", "user": "55b60518e4b01b9910ae298e"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "55b0cc57e4b002ce9d5cbc25"}, {"problem": 22, "code": "(fn [x] (loop [x x ans 0] (if (= x '()) ans (recur (rest x) (+ ans 1)))))", "user": "55b64ef1e4b01b9910ae2994"}, {"problem": 22, "code": "(fn [x] (.size (map (fn [a] a) x)))", "user": "55b62d2fe4b01b9910ae298f"}, {"problem": 22, "code": "(fn cnt\n   ([thing] (cnt thing 1))\n   ([thing total]\n    (if (next thing)\n      (recur (rest thing) (inc total))\n      total)))", "user": "55b6d917e4b01b9910ae299e"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "55b26ed7e4b0da326a65cf82"}, {"problem": 22, "code": "reduce (fn [a _] (inc a)) 0", "user": "55b77c7ce4b01b9910ae29a3"}, {"problem": 22, "code": "(fn [s]\n  (reduce + \n          (map (constantly 1) s)))", "user": "55b7ca4ae4b01b9910ae29b1"}, {"problem": 22, "code": "reduce #(if %2 (inc %1)) 0", "user": "55278187e4b0ffed3738f92d"}, {"problem": 22, "code": "(fn [y] (reduce + (map (fn [x] (if x 1 0)) y)))", "user": "55b7df63e4b01b9910ae29b3"}, {"problem": 22, "code": "(fn [l]\n  ((fn cnt [r n]\n    (if (empty? r)\n      n\n      (cnt (rest r) (+ n 1))\n      ))\n  l 0))", "user": "55b782c6e4b01b9910ae29a5"}, {"problem": 22, "code": "#(reduce (fn [i e] (inc i)) 0 %)", "user": "55a3ee58e4b0acc240e3153e"}, {"problem": 22, "code": "(partial reduce (fn [acc _] (inc acc)) 0)", "user": "55b8c339e4b01b9910ae29b9"}, {"problem": 22, "code": "#(reduce (fn [x _] (inc x)) 0 %)", "user": "55b69e37e4b01b9910ae2999"}, {"problem": 22, "code": "(fn count-a-seq [lat]\n  (reduce (fn [x y] (+ x 1)) 0 lat))", "user": "55b8e4b7e4b01b9910ae29bc"}, {"problem": 22, "code": "(fn foo [sequ]\n  (reduce\n   (fn [memo elem] (inc memo))\n   0\n   sequ)\n  )", "user": "549dfe40e4b0f3d1d8e70f9a"}, {"problem": 22, "code": "(fn getNth[coll] (loop [n 0\n                         stuff coll]\n                    (if (empty? stuff)\n                      n\n                      (recur (inc n) (rest stuff)))))", "user": "55b8d186e4b01b9910ae29ba"}, {"problem": 22, "code": "#(reduce + (map (fn [s] 1)  %))", "user": "55b9ce15e4b01b9910ae29c1"}, {"problem": 22, "code": "(fn count' [l]\n  (if (empty? l)\n    0\n  \t(inc (count' (rest l)))))", "user": "55b9e905e4b01b9910ae29c3"}, {"problem": 22, "code": "#(let [sq % n 0]\n   (loop [rst sq total n]\n     (if (empty? rst)\n       total\n       (recur (rest rst) (inc total)))))", "user": "55a0d79fe4b0acc240e31502"}, {"problem": 22, "code": "(fn [lista] (reduce + (map (fn[_] 1) lista)))", "user": "553e2da3e4b0a04f792994ea"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "55ba4563e4b01b9910ae29ce"}, {"problem": 22, "code": "(fn [x] \n    (loop [i 1\n           m x]\n        ( let [ [q & e] m]\n            ( if (nil? e) (identity i) (recur (+ i 1) e ) )))\n\n )", "user": "55ba6d52e4b01b9910ae29d3"}, {"problem": 22, "code": "#(alength (to-array %))", "user": "55ba8f0be4b01b9910ae29da"}, {"problem": 22, "code": "reduce (fn [c v] (+ c 1)) 0", "user": "55b6a63ae4b01b9910ae299b"}, {"problem": 22, "code": "#(reduce + (map (fn[a](+ 0 1)) %))", "user": "55bad3eae4b01b9910ae29df"}, {"problem": 22, "code": "(fn size [x] (loop [l x, c 0] (if (empty? l) c (recur(rest l) (inc c)))))", "user": "55bb3f89e4b01b9910ae29e2"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "55ba70f9e4b01b9910ae29d4"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "55bb6b63e4b01b9910ae29e6"}, {"problem": 22, "code": "(fn [x] (loop [y x, n 0] (if (= (first y) nil) n (recur (rest y) (inc n)))))", "user": "55bbb28be4b01b9910ae29ea"}, {"problem": 22, "code": "#(+ 1 (last (interleave % (range))))", "user": "55b1ab40e4b0da326a65cf6e"}, {"problem": 22, "code": "#(reduce (fn [x _] (inc x)) 0 %)", "user": "55bbd179e4b01b9910ae29eb"}, {"problem": 22, "code": "#(loop [n 0\n            l %1]\n       (if (= [] l)\n         n\n         (recur (inc n) (rest l))))", "user": "55bc2322e4b01b9910ae29f0"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "55b1e9e7e4b0da326a65cf74"}, {"problem": 22, "code": "#(reduce + (map (fn [e] 1) %1))", "user": "55abf7bbe4b03311e7b7328e"}, {"problem": 22, "code": "(fn [x]\n  (loop [res 0\n         se x]\n    (cond\n      (nil? (seq se)) res\n      :else (recur (inc res) (rest se)))))", "user": "55912230e4b027778923767a"}, {"problem": 22, "code": "(fn [col] (reduce (fn [a b] (inc a)) 0 col))", "user": "55bccbc6e4b01b9910ae29f5"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "55b8fa19e4b01b9910ae29bd"}, {"problem": 22, "code": "; (fn [c] (reduce (fn [x _] (+ x 1)) 0 c))\n(fn [c] (reduce (fn [x _] (inc x)) 0 c))", "user": "5420b93ce4b01498b1a71aa9"}, {"problem": 22, "code": "(fn tmp [x] (if (empty? x) 0 (+ 1 (tmp (rest x)))))", "user": "55adf65fe4b03311e7b732b0"}, {"problem": 22, "code": "(fn mycount \n  [x]\n  (loop [c 0\n         m x]\n    (if (empty? m)\n      c\n      (recur (inc c) (rest m)))))", "user": "55b3c03ee4b01b9910ae2975"}, {"problem": 22, "code": "(fn [s & c]\n  (if-not (empty? s)\n    (recur (rest s) (if (nil? c) 1 (+ c 1)))\n    c))", "user": "55be18e5e4b01b9910ae2a01"}, {"problem": 22, "code": "#(let [helper (fn [xs n] (if (empty? xs) n (recur (rest xs) (inc n))))] (helper % 0))", "user": "55bcecbee4b01b9910ae29f7"}, {"problem": 22, "code": "(fn [x] (loop [x x, i 0] (if (seq x) (recur (next x) (inc i)) i)))", "user": "55be39f9e4b01b9910ae2a06"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "55962e92e4b0c79f6e1db976"}, {"problem": 22, "code": "(fn [l] (reduce (fn [x & _] (inc x)) 0 l))", "user": "55be4fa6e4b01b9910ae2a08"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "55a016fde4b0acc240e314f1"}, {"problem": 22, "code": "(fn count-a-seq [lat]\n  (reduce (fn [x y] (+ x 1)) 0 lat))", "user": "55be33f0e4b01b9910ae2a05"}, {"problem": 22, "code": "(fn a [s] \n  (apply + \n    (map (fn b [it] 1) s)\n  ) \n)", "user": "55bb7546e4b01b9910ae29e7"}, {"problem": 22, "code": "#(reduce (fn [counter coll] (inc counter)) 0 %)", "user": "5586f418e4b059ccff29b1de"}, {"problem": 22, "code": "#(reduce (fn [acc x] (+ acc 1)) 0 %1)", "user": "55bf461be4b01b9910ae2a11"}, {"problem": 22, "code": "(fn [in-seq]\n  (loop [to-consume in-seq,\n         counter 0]\n    (if (empty? to-consume)\n      counter\n      (recur (rest to-consume) (inc counter)))))", "user": "557775a3e4b05c286339e084"}, {"problem": 22, "code": "#((fn l [x c] (if (nil? x) c (l (next x) (+ c 1)) ) ) % 0)", "user": "55bedd93e4b01b9910ae2a0d"}, {"problem": 22, "code": "reduce (fn [x y] (inc x)) 0", "user": "5452a300e4b0e397800069c7"}, {"problem": 22, "code": "(fn size [x] (if (empty? x) 0 (inc (size (rest x))) ))", "user": "55bfc39ee4b01b9910ae2a1a"}, {"problem": 22, "code": "(fn [in]\n  (loop [s in\n         n 0]\n    (if (empty? s)\n      n\n      (recur (rest s) (+ n 1)))))", "user": "559454f2e4b0c79f6e1db952"}, {"problem": 22, "code": "#(loop [cnt 0 temp %]\n    (if (not-empty temp)\n      (recur (inc cnt) (rest temp)) cnt))", "user": "55bc52f9e4b01b9910ae29f2"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "55c07e3ee4b01b9910ae2a24"}, {"problem": 22, "code": "(fn [lst] (+ (.lastIndexOf (seq lst) (last lst)) 1))", "user": "55bd2150e4b01b9910ae29fa"}, {"problem": 22, "code": "#(loop [cnt 0 s %1] \n   (if (empty? s)\n     cnt\n     (recur (inc cnt) (rest s))))", "user": "55c0afa5e4b01b9910ae2a27"}, {"problem": 22, "code": "reduce (fn [s e] (inc s)) 0", "user": "55c10409e4b01b9910ae2a2c"}, {"problem": 22, "code": "(fn [s]\n  (reduce (fn [acc x] (+ acc 1)) 0 s))", "user": "549c6792e4b0f3d1d8e70f8b"}, {"problem": 22, "code": "(fn my-count\n  [data]\n  (if (first data)\n    (+ 1 (my-count (next data)))\n    0))", "user": "55bd87ede4b01b9910ae29fe"}, {"problem": 22, "code": "#(loop [l % i 0]\n   (if (empty? l)\n     i\n     (recur (next l) (inc i))))", "user": "55304523e4b076ab5578f810"}, {"problem": 22, "code": "#(apply + (map (fn [_] 1) %))", "user": "55c20bd0e4b0e31453f64972"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "55bef38fe4b01b9910ae2a0e"}, {"problem": 22, "code": "#(apply + (map (fn [x] 1) % ))", "user": "557e56aae4b05c286339e0d5"}, {"problem": 22, "code": "(fn my-count [s]\n  (loop [s s\n         n 0]\n    (if (empty? s)\n      n\n      (recur (rest s) (inc n)))))", "user": "55c2a159e4b0e31453f6497e"}, {"problem": 22, "code": "(partial reduce (fn [x y] (inc x)) 0)", "user": "55c37594e4b0e31453f64989"}, {"problem": 22, "code": "(fn [x] (reduce + 0 (map (constantly 1) x)))", "user": "51fea7d7e4b0f1313d468a74"}, {"problem": 22, "code": "(fn [xs] (reduce (fn [x _] (inc x)) 0 xs))", "user": "55c1eb52e4b0e31453f64970"}, {"problem": 22, "code": "(fn my-count [a-list]\n  (if (empty? a-list) 0\n    (+ 1 (my-count (rest a-list)))))", "user": "55c313a0e4b0e31453f64986"}, {"problem": 22, "code": "(fn[sec](reduce (fn[acc _] (inc acc)) 0 sec))", "user": "55c0f842e4b01b9910ae2a2b"}, {"problem": 22, "code": "reduce (fn [thing _] (inc thing)) 0", "user": "55c2a323e4b0e31453f6497f"}, {"problem": 22, "code": "(fn [original-list] (\n  reduce + \n   (map (fn [x] 1) original-list)) \n)", "user": "55c387e4e4b0e31453f6498b"}, {"problem": 22, "code": "reduce \n      \t(fn [x y]\n            (inc x)) 0", "user": "55c3149de4b0e31453f64987"}, {"problem": 22, "code": "#(alength (to-array %))", "user": "55c2b95de4b0e31453f64980"}, {"problem": 22, "code": "(fn [x]\n  (reduce (fn [i _] (inc i)) 0 x))", "user": "55c4352ce4b0e31453f64996"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "55c49600e4b0e31453f6499f"}, {"problem": 22, "code": "(fn [data]\n  (loop [data data\n         acc 0]\n    (if (empty? data)\n      acc\n      (recur (drop 1 data) (inc acc))))\n  )", "user": "55c461d3e4b0e31453f64999"}, {"problem": 22, "code": "(fn num-elem [xs]\n  (if (empty? xs)\n    0\n    (inc (num-elem (rest xs)))))", "user": "55c4e48be4b0e31453f649a7"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "55c4ae19e4b0e31453f649a1"}, {"problem": 22, "code": "(fn give-count [coll] \n  (loop [s coll n 0]\n    (if (empty? s) \n      n \n     (recur (rest s) (inc n)))))", "user": "55c28beae4b0e31453f6497d"}, {"problem": 22, "code": "(fn [a,l] (if (= l ()) a (recur (+ 1 a) (rest l)))) 0", "user": "55c0a40be4b01b9910ae2a26"}, {"problem": 22, "code": "#(.length (vec %))", "user": "54ab65b4e4b09f271ff37cc7"}, {"problem": 22, "code": "(fn num-e [coll] (if (empty? coll) \n            0 \n            (+ 1 (num-e (rest coll)))\n          ))", "user": "55c508f0e4b0e31453f649ac"}, {"problem": 22, "code": "#(reduce + (map (fn [_] 1) %))", "user": "55c4e30be4b0e31453f649a6"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "55c58c0be4b0e31453f649b3"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 % )", "user": "55c5820be4b0e31453f649b0"}, {"problem": 22, "code": "(fn\n [elements]\n (loop [x 0 elements elements]\n  (if (= elements '())\n   x\n   (recur (inc x) (rest elements)))))", "user": "54ef7568e4b024c67c0cf885"}, {"problem": 22, "code": "#(loop [x % y 0] \n   (if (empty? x) \n     y\n     (recur (rest x) (+ y 1))\n   )\n)", "user": "55c587f3e4b0e31453f649b2"}, {"problem": 22, "code": "reduce (fn[x _] (+ 1 x)) 0", "user": "55c63dc4e4b0e31453f649bb"}, {"problem": 22, "code": "reduce (fn [x y] (+ 1 x)) 0", "user": "55c652dde4b0e31453f649bd"}, {"problem": 22, "code": "(fn [l] (loop [remaining l\n               c 0]\n          (if-not (seq remaining)\n            c\n            (recur (rest remaining) (inc c)))))", "user": "55bfd68ae4b01b9910ae2a1e"}, {"problem": 22, "code": "(fn [lst]\n  (loop [l lst\n         n 0]\n    (if (empty? l)\n      n\n      (recur (rest l) (+ n 1)))))", "user": "55c68089e4b0e31453f649c4"}, {"problem": 22, "code": "(fn [coll]\n  (let [rec\n        (fn [coll rec]\n          (if (empty? coll)\n            0\n            (+ 1 (rec (rest coll) rec))))]\n    (rec coll rec)))", "user": "55c66d3de4b0e31453f649c1"}, {"problem": 22, "code": "(fn [s] \n  (reduce (fn [n _] (inc n)) 0 s))", "user": "55c734a5e4b0e31453f649cb"}, {"problem": 22, "code": "(fn my-count [lst]\n  (if (empty? lst)\n    0\n    (+ 1 (my-count (rest lst)))))", "user": "55c5153de4b0e31453f649ad"}, {"problem": 22, "code": "(fn [coll] (reduce (fn [a b] (+ a 1)) 0 coll))", "user": "5281fd54e4b0757a1b17144b"}, {"problem": 22, "code": "(fn [x] (loop [l x n 0]\n          (if (empty? l)\n            n\n            (recur (rest l) (inc n)))))", "user": "55c583d5e4b0e31453f649b1"}, {"problem": 22, "code": "(fn [s] (reduce + (map (fn [x] 1) s)))", "user": "55c5261ee4b0e31453f649ae"}, {"problem": 22, "code": "(fn \n  [xs]\n  (loop [n 0\n         x xs]\n    (if (empty? x)\n      n\n      (recur (inc n)\n             (rest x)))))", "user": "55c423e1e4b0e31453f64994"}, {"problem": 22, "code": "(fn [a] (reduce + (map (fn [x] 1) a)))", "user": "55ba3666e4b01b9910ae29cc"}, {"problem": 22, "code": "#(+ 1 (.lastIndexOf (vec %) (last  (vec %))))", "user": "55a372f1e4b0acc240e31537"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "55ba33afe4b01b9910ae29cb"}, {"problem": 22, "code": "(fn [numbers] (reduce (fn [counter _] (+ counter 1))0 numbers))", "user": "5586b707e4b059ccff29b1d6"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "55c796f0e4b0e31453f649d4"}, {"problem": 22, "code": "#(reduce (fn [total cur] (+ 1 total)) 0 %)", "user": "55c6fd60e4b0e31453f649c9"}, {"problem": 22, "code": "(fn [coll] (reduce (fn [n next] (inc n)) 0 coll))", "user": "55c05713e4b01b9910ae2a21"}, {"problem": 22, "code": "(fn my-count [lst] \n  (if (empty? lst) \n    0 \n    (+ 1 (my-count (rest lst)))))", "user": "54b817eee4b0ed20f4ff6e93"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "55c77070e4b0e31453f649d0"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "513f1f18e4b051389b345b3d"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "55c2f8e2e4b0e31453f64985"}, {"problem": 22, "code": "#(reduce (fn [n _] (inc n)) 0 %1)", "user": "55c7c4dfe4b0e31453f649d7"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "55c7c2c5e4b0e31453f649d6"}, {"problem": 22, "code": "#(.size (vec %))", "user": "55bb6a19e4b01b9910ae29e5"}, {"problem": 22, "code": "(fn my-count [items]\n    (if (empty? items)\n      0\n      (inc (my-count (rest items)))))", "user": "55c93c45e4b0e31453f649ea"}, {"problem": 22, "code": "#(reduce (fn [x _] (inc x)) 0 %)", "user": "53ba34f4e4b047364c0444f2"}, {"problem": 22, "code": "(fn [seq]\r\n  (loop [seq seq\r\n         n 0]\r\n    (if (empty? seq)\r\n      n\r\n      (recur (rest seq) (+ n 1)))))", "user": "546e1142e4b00cfc9eacc199"}, {"problem": 22, "code": "reduce (fn [x y] (inc x)) 0", "user": "55c9bcb8e4b0e31453f649f2"}, {"problem": 22, "code": "#(reduce + (map (fn [_] 1) %))", "user": "52eb786be4b0705949c44440"}, {"problem": 22, "code": "#(apply + (map (fn [xx] 1) %))", "user": "5555b454e4b0deb715856e17"}, {"problem": 22, "code": "#(reduce + (map (fn[x] 1) %))", "user": "55ca4273e4b0e31453f649f9"}, {"problem": 22, "code": "#(reduce (fn [n _] (inc n)) 0 %)", "user": "55caabd1e4b0e31453f649fb"}, {"problem": 22, "code": "#(loop [coll %1 nb 0] (if (first coll)  (recur (rest coll)(inc nb)) nb))", "user": "55a65872e4b09e57187da299"}, {"problem": 22, "code": "(fn [x]\n  (loop [c x\n         r 0]\n    (if (empty? c)\n      r\n      (recur (rest c) (inc r)))))", "user": "559067ace4b0277789237670"}, {"problem": 22, "code": "(fn my-count\n  [coll]\n  (loop [i 0\n         c coll]\n    (if (empty? c)\n      i\n      (recur (inc i)\n             (drop 1 c)))))", "user": "55b42706e4b01b9910ae297b"}, {"problem": 22, "code": "(fn [xs]\n  (reduce + (map (fn [x] 1) xs)))", "user": "5574c172e4b05c286339e059"}, {"problem": 22, "code": "reduce (fn [a n] (+ a 1)) 0", "user": "5578ba3ae4b05c286339e08c"}, {"problem": 22, "code": "#(reduce (fn [n _] (inc n)) 0 %1)", "user": "5563b88be4b0c656e3ff17f5"}, {"problem": 22, "code": "(fn my-count [col] \n  (loop [n 0 col col]\n    (if (empty? col)\n    n (recur (inc n) (rest col))) ))", "user": "55c9bc1ee4b0e31453f649f1"}, {"problem": 22, "code": "#(reduce (fn [a b] (+ a 1) ) 0 %)", "user": "55cc56bee4b0e31453f64a0f"}, {"problem": 22, "code": "#(alength (to-array %))", "user": "55cc6c35e4b0e31453f64a10"}, {"problem": 22, "code": "#(\n  reduce \n  + \n  (map \n   (constantly 1) \n   %\n   )\n  )", "user": "55cc951fe4b0e31453f64a11"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) \n         0 %)", "user": "559a9a8ee4b066d22e731f46"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "55c25dd1e4b0e31453f6497a"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "55cb4e11e4b0e31453f64a02"}, {"problem": 22, "code": "#(reduce (fn [quant elem] (inc quant)) 0 %)", "user": "55ccdc6be4b0e31453f64a18"}, {"problem": 22, "code": "reduce (fn [s _] (inc s)) 0", "user": "55cdc576e4b0e31453f64a1f"}, {"problem": 22, "code": "(fn [c] (+ 1 (ffirst (reverse (map-indexed vector c)))))", "user": "53dac21ae4b0e771c30254a8"}, {"problem": 22, "code": "#(reduce + 0 (map (constantly 1) %))", "user": "55ccd9d1e4b0e31453f64a17"}, {"problem": 22, "code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "54b64fbbe4b05787c3b163b8"}, {"problem": 22, "code": "(fn fn1 [x]\r\n  (if (empty? x)\r\n  0\r\n  (+ (fn1 (rest x)) 1)\r\n  )\r\n)", "user": "55cde227e4b0e31453f64a22"}, {"problem": 22, "code": "(fn [x] (reduce + (map (fn [_] 1) x)))", "user": "55ce42e4e4b0e31453f64a27"}, {"problem": 22, "code": "(fn [l] \n  (reduce + (map (constantly 1) l)))", "user": "55cde24ae4b0e31453f64a23"}, {"problem": 22, "code": "(fn\n  [coll]\n  (reduce + (map (fn [x] (+ 0 1)) coll)))", "user": "55cd08d9e4b0e31453f64a1a"}, {"problem": 22, "code": "(fn\n  [s]\n  (reduce + (map (constantly 1) s)))", "user": "556e3b73e4b09a3098a52514"}, {"problem": 22, "code": "(fn [s]\n  (reduce + (map (fn [x] 1) s)))", "user": "55be464ce4b01b9910ae2a07"}, {"problem": 22, "code": "(fn [elems] \n  (loop [[first & rest] elems n 0]\n    (if (nil? first)\n      n\n      (recur rest (+ n 1)))))", "user": "55ce8cfee4b0e31453f64a29"}, {"problem": 22, "code": "(fn [m] (reduce (fn [r x] (inc r)) 0 m))", "user": "52f23d85e4b05e3f0be25ef6"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "52f2ecdde4b05e3f0be25f03"}, {"problem": 22, "code": "#(->> %1\n(map (fn [x] 1))\n(reduce +))", "user": "55627de1e4b0c656e3ff17d9"}, {"problem": 22, "code": "(fn [n] (reduce + (map (fn [b] 1) n)))", "user": "55a28acde4b0acc240e31524"}, {"problem": 22, "code": "#( reduce + (map (fn f [_] 1) %))", "user": "55cfa46ce4b0e31453f64a31"}, {"problem": 22, "code": "#(reduce \n    (fn bla [c _] (inc c))\n     0 %)", "user": "55cf666fe4b0e31453f64a2e"}, {"problem": 22, "code": "#(reduce + (map (fn [n] 1) %))", "user": "55d045cde4b0e31453f64a38"}, {"problem": 22, "code": "(fn [values]\n  (loop [[current & remainder] values \n         value-count 0]\n    (if (nil? current)\n      value-count\n      (recur remainder (inc value-count)))))", "user": "55d06bcbe4b0e31453f64a3a"}, {"problem": 22, "code": "(fn sq-count\n  ([sq] (sq-count sq 0))\n  ([sq n]\n    (if (nil? (first sq))\n      n\n      (sq-count (rest sq) (+ n 1)))))", "user": "5512c935e4b055c2f668d4b8"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "55d0a3c4e4b0e31453f64a3e"}, {"problem": 22, "code": "(fn [s]\n  (loop [l 0\n         s s]\n    (if (empty? s) l\n      (recur (inc l)\n             (rest s)))))", "user": "55d0e76ae4b0e31453f64a40"}, {"problem": 22, "code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "54cbccb4e4b057c6fda3a280"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "55cc0d8ce4b0e31453f64a0c"}, {"problem": 22, "code": "(fn q (\n       [x] (if (= x nil) 0 (q (next x) 1))\n       ) (\n        [x y] (if (= x nil) y (q ( next x) (+ y 1)))\n       )\n)", "user": "55d1a2b8e4b0e31453f64a46"}, {"problem": 22, "code": "#(+ 1 (first (last (map-indexed list %))))", "user": "55d1a721e4b0e31453f64a47"}, {"problem": 22, "code": "reduce (fn [x y] (inc x)) 0", "user": "55d1b565e4b0e31453f64a49"}, {"problem": 22, "code": ";#(apply + (map (fn [x] 1) %))\n\nreduce (fn [x _] (+ x 1)) 0", "user": "55236ad6e4b0882d96d091b1"}, {"problem": 22, "code": "(fn [s](reduce (fn [a b](+ a 1)) 0 s))", "user": "55d1f231e4b0e31453f64a4e"}, {"problem": 22, "code": "(fn [xs]\n    (reduce + (map (fn [x] 1) xs)))", "user": "52f3a2afe4b05e3f0be25f13"}, {"problem": 22, "code": "#(reduce (fn [x y] (+ x 1)) 0 %1)", "user": "5589a941e4b059ccff29b207"}, {"problem": 22, "code": "#(loop [coll % acc 0]\n    (if (empty? coll)\n      acc\n     (recur (rest coll) (inc acc))))", "user": "5511ac85e4b06e50f9beb196"}, {"problem": 22, "code": "reduce (fn [x y] (+ x 1)) 0", "user": "55d3811be4b0e31453f64a69"}, {"problem": 22, "code": "(fn [coll] (reduce + (map (fn [a] 1) coll)))", "user": "55d204abe4b0e31453f64a4f"}, {"problem": 22, "code": "(fn me [l] ( if (empty? l) 0 (+ 1 (me(rest l)))))", "user": "553e2cc0e4b0a04f792994e9"}, {"problem": 22, "code": "(fn [s] (reduce (fn [acc _] (inc acc)) 0 s))", "user": "55d3aec8e4b0e31453f64a6a"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 (vec %))", "user": "55d332f5e4b0e31453f64a5f"}, {"problem": 22, "code": "(fn [l]\n  (loop [s l, n 0]\n    (if-not (seq s)\n      n\n      (recur (rest s) (inc n)))))", "user": "55d36d3ae4b0e31453f64a64"}, {"problem": 22, "code": "#(reduce (fn [a b] (inc a)) 0 %)", "user": "55d354e0e4b0e31453f64a62"}, {"problem": 22, "code": "(fn [l] (+ (let [lil (last l)] (.lastIndexOf l (if (char? lil) (str lil) lil))) 1))", "user": "55d349a7e4b0e31453f64a61"}, {"problem": 22, "code": "(fn [se]\n  (loop [in-seq se\n         i 0]\n    (if (= (empty in-seq) in-seq)\n      i\n      (recur (next in-seq) (inc i)))))", "user": "55d4ae39e4b0e31453f64a7b"}, {"problem": 22, "code": "#(loop [c 0 lst %]\n  (if (empty? lst)\n    c\n    (recur (inc c) (rest lst))))", "user": "55d22ecce4b0e31453f64a55"}, {"problem": 22, "code": "(fn [seq]\n  (loop [i 0 seq_rest seq]\n    (if (= (first seq_rest) nil)\n      i\n      (recur (+ i 1) (rest seq_rest)))))", "user": "53a68c5ae4b0ef122a8689c8"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "55d3cfafe4b0e31453f64a6c"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "55d1611ce4b0e31453f64a43"}, {"problem": 22, "code": "(fn len [nums] \n  (if (= (first nums) nil)\n  \t0\n  \t(+ 1 (len (rest nums)))))", "user": "55d564ece4b0e31453f64a85"}, {"problem": 22, "code": "(fn [coll] (reduce + (map (fn [_] 1) coll)))", "user": "55d2dd27e4b0e31453f64a5b"}, {"problem": 22, "code": "(fn [se ] (loop  [ s se c 1] ( if-not  (next s) c (recur (next s) (+ c 1))) ) )", "user": "55d44dd6e4b0e31453f64a75"}, {"problem": 22, "code": "(fn [x] \n  (reduce (fn [c n] (inc c)) 0 (seq x)))", "user": "55d4b995e4b0e31453f64a7c"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "55d34273e4b0e31453f64a60"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "55d58192e4b0e31453f64a89"}, {"problem": 22, "code": "(fn c\n  ([v] (c v 0))\n  ([v i] (if (empty? v) i (recur (rest v) (inc i)))))", "user": "55d1ec3ee4b0e31453f64a4c"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "555d1e51e4b0a2eb076a39a5"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "55d64526e4b0e31453f64a97"}, {"problem": 22, "code": "(fn [l]\n  (loop [left l\n         counted 0]\n    (if (empty? left)\n      counted\n      (recur (rest left) (inc counted)))))", "user": "55d4dddde4b0e31453f64a7f"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "54f11c0ce4b024c67c0cf8ab"}, {"problem": 22, "code": "#((fn [coll i]\n    (if (empty? coll)\n      i\n      (recur (rest coll) (+ 1 i)))) % 0)", "user": "55d68726e4b0e31453f64a99"}, {"problem": 22, "code": "#(reduce (fn [acc elem] (inc acc)) 0 %)", "user": "55d6a2ebe4b0e31453f64a9a"}, {"problem": 22, "code": "reduce (fn [x _] (inc x)) 0", "user": "55d5ee3fe4b0e31453f64a92"}, {"problem": 22, "code": "(fn my-count [xs] (if (empty? xs)\n                    0\n                    (+ 1 (my-count (rest xs)))))", "user": "55d5e80ee4b0e31453f64a91"}, {"problem": 22, "code": "(fn ccount [col]\n   (loop [acc 0 \n          lst col] \n     (if (= lst '())\n       acc\n       (recur (inc acc) (rest lst)))))", "user": "4fafed2be4b081705acca25c"}, {"problem": 22, "code": "(fn([coll] (apply + (map (fn [_] 1) coll))))", "user": "55d50a38e4b0e31453f64a80"}, {"problem": 22, "code": "(fn my-count [x]\n  (if (= (first x) nil) ; won't work if nil in list\n    0\n    (+ 1 (my-count (rest x)))))", "user": "55d7d139e4b0e31453f64aaa"}, {"problem": 22, "code": "#(reduce (fn [acc _] (inc acc)) 0 %)", "user": "529599dce4b02ebb4ef75027"}, {"problem": 22, "code": ";#(loop [col % cnt 0]\n ;  (if (empty? col)\n  ;   cnt\n   ;  (recur (rest col) (inc cnt))))\n   \nreduce (fn [c _] (inc c)) 0", "user": "55614155e4b0c656e3ff17c4"}, {"problem": 22, "code": "#(-> % ((partial map nil?)) ((partial map {true 1 false 1})) ((partial reduce +)))", "user": "55d84919e4b0e31453f64ab0"}, {"problem": 22, "code": "#(reduce \n  + \n  0\n  (map (fn [_] 1) (seq %)))", "user": "55d85ac9e4b0e31453f64ab2"}, {"problem": 22, "code": "(fn func [x data]\n  (if (empty? data)\n    x\n    (func (inc x) (rest data))))\n0", "user": "55d53255e4b0e31453f64a81"}, {"problem": 22, "code": "(fn f [[x & xs]] (if xs (+ 1 (f xs)) 1))", "user": "55d87324e4b0e31453f64ab4"}, {"problem": 22, "code": "(fn fxn ([x] (fxn x 0)) ([x,y] (if (empty? x) y (fxn (rest x) (+ y 1)) )))", "user": "55d35a01e4b0e31453f64a63"}, {"problem": 22, "code": "(fn ttl\n  ([[first-elem & other-elems]] \n     (if (= nil other-elems)\n     \t1\n     \t(ttl other-elems 2)))\n  ([[first-elem & other-elems] i] \n     (if (= nil other-elems)\n     \ti\n     \t(ttl other-elems (inc i)))))", "user": "55d8bdcae4b0e31453f64abe"}, {"problem": 22, "code": "(fn [s] \n  (reduce \n   (fn [i _] (+ 1 i))\n   0 s))", "user": "55d8db41e4b0e31453f64abf"}, {"problem": 22, "code": "reduce (fn [x y]\n         (inc x))\n       0", "user": "55d8eed3e4b0e31453f64ac3"}, {"problem": 22, "code": "(fn my-count [xs] (if (empty? xs) 0 (+ 1 (my-count (rest xs)))))", "user": "55d8968ae4b0e31453f64abb"}, {"problem": 22, "code": "(fn [x] \n  (loop [cnt 0 l x]\n    (if (empty? l)\n      cnt\n      (recur (inc cnt) (rest l))\n      )\n    )\n  )", "user": "55ce2b6de4b0e31453f64a26"}, {"problem": 22, "code": "(fn c [l]\n  (loop [r 0 t l]\n\t(if (empty? t)\n  \tr\n  \t(recur (inc r) (rest t)))))", "user": "55d74e71e4b0e31453f64aa4"}, {"problem": 22, "code": "(fn size\n  [coll]\n   (if (empty? coll)\n     0\n     (inc (size (rest coll)))))", "user": "53e6550de4b036ad0777e471"}, {"problem": 22, "code": "#(reduce (fn [my-count ignore] (inc my-count)) 0 %1)", "user": "55d95be7e4b0e31453f64ac9"}, {"problem": 22, "code": "(fn [seq]\n    (reduce (fn [x _] (+ x 1)) 0 seq))", "user": "55d29fb6e4b0e31453f64a59"}, {"problem": 22, "code": "#(reduce (fn [x _] (inc x)) 0 %)", "user": "55d9d7e3e4b0e31453f64acd"}, {"problem": 22, "code": "#(reduce (fn [agg _] (inc agg)) 0 %)", "user": "55d8740ee4b0e31453f64ab5"}, {"problem": 22, "code": "reduce (fn [x _] (inc x)) 0", "user": "55d62a68e4b0e31453f64a96"}, {"problem": 22, "code": "#(reduce + (map (fn [_] 1) %))", "user": "553c136ae4b09218d5f45012"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "55d80befe4b0e31453f64aae"}, {"problem": 22, "code": "(fn [l] (reduce + (map (fn [x] 1) l)))", "user": "55da18d5e4b0e31453f64ad1"}, {"problem": 22, "code": "(fn [v]\n  \n  (loop [arr v\n         i 0]\n    (if (empty? arr)\n      i\n      (recur (rest arr) (inc i))\n      )\n    )\n  \n  )", "user": "55d93e59e4b0e31453f64ac7"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "55dab5c8e4b0e31453f64ada"}, {"problem": 22, "code": "reduce (fn [a b] (inc a)) 0", "user": "4f435ee8e4b0d7d3c9f3fd1f"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5461dc79e4b01be26fd746a8"}, {"problem": 22, "code": "(fn f [a] \n  (if (= (concat a) ())\n    0\n    (+ 1 (f (rest a)))))", "user": "55daf842e4b0e31453f64ade"}, {"problem": 22, "code": "#(loop [items % c 0] (if (empty? items) c (recur (rest items) (inc c))))", "user": "54722c55e4b094393f72dd74"}, {"problem": 22, "code": "(fn [list] (reduce (fn [xs y] (+ xs 1)) 0 list))", "user": "55d79b87e4b0e31453f64aa8"}, {"problem": 22, "code": "(fn [xs] (reduce (fn[a,_](inc a)) 0 xs))", "user": "55db2a13e4b0e31453f64ae2"}, {"problem": 22, "code": "(fn [n]\n  (reduce + (map (fn [x] 1) n)))", "user": "55c4cd8de4b0e31453f649a4"}, {"problem": 22, "code": "(fn [coll]\n  (loop [coll coll n 0]\n    (if (empty? coll)\n      n\n      (recur (next coll) (inc n)))))", "user": "55db7e15e4b0e31453f64ae8"}, {"problem": 22, "code": "(fn mc [l]\n               (if (empty? l)\n                 0\n                 (+ 1 (mc (rest l)))))", "user": "55d73b14e4b0e31453f64aa0"}, {"problem": 22, "code": "(partial reduce  (fn [a e] (inc a)) 0 )", "user": "52f16601e4b05e3f0be25eec"}, {"problem": 22, "code": "(fn [lst]\n  (loop [i lst cnt 0]\n   (cond (empty? i) cnt\n     :t (recur (rest i)(inc cnt)))))", "user": "55a122d9e4b0acc240e3150a"}, {"problem": 22, "code": "(fn [coll](reduce (fn [acc x](+ acc 1)) 0 coll))", "user": "55dc1a8ee4b050e68259b3a9"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "53c837f7e4b00fb29b2212ae"}, {"problem": 22, "code": "(fn c [x] (if (empty? x) 0 (+ (c (rest x)) 1)))", "user": "55dac0dfe4b0e31453f64adb"}, {"problem": 22, "code": "(fn [coll]\n  (loop [c coll n 0]\n    (if (empty? c)\n      n\n      (recur (rest c) (inc n)))))", "user": "55d3780ee4b0e31453f64a66"}, {"problem": 22, "code": "#(inc (last (sort (keys (zipmap (range) %)))))", "user": "55dcb06ee4b050e68259b3b9"}, {"problem": 22, "code": "(fn [list]\n   (loop [temp list contador 0]\n      (if (empty? temp)\n        contador\n        (recur (rest temp) (inc contador)))))", "user": "55db5291e4b0e31453f64ae6"}, {"problem": 22, "code": "#(reduce (fn [r _] (+ r 1)) 0 %)", "user": "554ad20fe4b0a04f7929957a"}, {"problem": 22, "code": "(fn total-elems [x] (reduce + (map (constantly 1) x)))", "user": "55ca27b9e4b0e31453f649f7"}, {"problem": 22, "code": "(fn [list] (loop [list list c 0] (if (empty? list) c (recur (rest list) (inc c)))))", "user": "55dab408e4b0e31453f64ad9"}, {"problem": 22, "code": "(fn [xs] \n  (loop [xs xs n 0]\n    (if (seq xs) \n      (recur (rest xs) (inc n))\n      n)))", "user": "552d9b31e4b076ab5578f7eb"}, {"problem": 22, "code": "(fn [coll]\n  (reduce + (map #(if (nil? %) 0 1) coll)))", "user": "54a80855e4b09f271ff37c9e"}, {"problem": 22, "code": "(fn [xs] (reduce #(+ %1 %2) 0 (map (fn [_] 1) xs)))", "user": "55dc2ad1e4b050e68259b3ac"}, {"problem": 22, "code": "(fn [a-seq]\n  (loop [s a-seq cnt 0]\n    (if (empty? s)\n      cnt\n      (recur (rest s) (inc cnt)))))", "user": "55dd7ad1e4b050e68259b3c2"}, {"problem": 22, "code": "#( reduce (fn [x y] (+ x 1) ) 0 (seq %) )", "user": "55db1665e4b0e31453f64ae0"}, {"problem": 22, "code": "(fn [x] (reduce + (map (fn [a] 1 ) x) ) )", "user": "55dd91c9e4b050e68259b3ca"}, {"problem": 22, "code": "(fn [things] (reduce (fn [c _] (+ c 1)) 0 things))", "user": "55ddb3f4e4b050e68259b3cd"}, {"problem": 22, "code": "#(reduce (fn [x y] (+ 1 x)) 0 %)", "user": "55dd8c25e4b050e68259b3c7"}, {"problem": 22, "code": "(fn [seq] \n\t(loop [n 0, seq seq]\n\t\t(if (empty? seq) \n\t\t\tn\n          \t(recur (+ n 1) (rest seq))\n          )\n      )\n  )", "user": "55ddc5cbe4b050e68259b3d0"}, {"problem": 22, "code": "(fn [x] (if (string? x) (.length x) (.size x)))", "user": "55dde144e4b050e68259b3d5"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "55d36ef5e4b0e31453f64a65"}, {"problem": 22, "code": "(fn [x]\n    (loop [accum x\n                 i 0]\n          (if (seq accum)\n              (recur (rest accum)\n                     (inc i))\n            i)))", "user": "55c3c1b0e4b0e31453f6498c"}, {"problem": 22, "code": "(fn [s]\n  (loop [sum 1 \n         k s] \n    (if-not (nil? (next k))\n      (recur (+ 1 sum) (drop 1 k))sum)))", "user": "55d3b030e4b0e31453f64a6b"}, {"problem": 22, "code": "(fn [col] \n  (loop [size 0 col col]\n    (if (empty? col)\n      size\n      (recur (inc size) (rest col)))))", "user": "55dd0aebe4b050e68259b3bf"}, {"problem": 22, "code": "(fn [coll] (reduce (fn [c _] (inc c)) 0 coll))", "user": "516afca6e4b081287f204ea0"}, {"problem": 22, "code": "(fn [coll] (reduce + (map (fn [i] 1) coll)))", "user": "54145050e4b01498b1a719ea"}, {"problem": 22, "code": "#(reduce (fn [counter _] (inc counter)) 0 %)", "user": "540b851fe4b0addc1aec66f9"}, {"problem": 22, "code": "#(reduce (fn [acc e] (inc acc)) 0 %)", "user": "55ded9fde4b050e68259b3e7"}, {"problem": 22, "code": "(fn [x]\n  (loop [input x size 0]  \n    (if (empty? input)\n      size\n      (recur (rest input) (inc size))\n    )\n  ))", "user": "55d44af5e4b0e31453f64a74"}, {"problem": 22, "code": "(fn [f]\n(if-not f 0\n (let [ cnt (fn [[f & a] n] \n                    (if-not a (inc n) \n                                 (recur a (inc n))))]\n    (cnt f 0))\n))", "user": "55deeface4b050e68259b3ea"}, {"problem": 22, "code": "(fn [coll]\n  (loop [coll coll tally 0]\n    (if (empty? coll) tally\n      (recur\n       (rest coll) \n       (inc tally)))))", "user": "4f086d45535dcb61093f6c39"}, {"problem": 22, "code": "(fn [s] (reduce (fn [acc _] (inc acc)) 0 s))", "user": "55df1985e4b050e68259b3eb"}, {"problem": 22, "code": "(fn [lst] \n  (loop [s lst cnt 0] \n    (if (empty? s)\n      cnt\n      (recur (rest s) (inc cnt)))))", "user": "55df3b11e4b050e68259b3ef"}, {"problem": 22, "code": "(fn \n  my-count \n  [x] \n  (if (empty? x)\n    0 \n    (+ 1 (my-count (rest x)))))", "user": "55e0038ee4b050e68259b404"}, {"problem": 22, "code": "(fn [y] (reduce + (map (fn [x] 1) y)))", "user": "55e00655e4b050e68259b405"}, {"problem": 22, "code": "(fn mylen [coll] \n   (if (empty? coll) \n     0 \n     (+ 1 (mylen (rest coll)))))", "user": "55e038fee4b050e68259b409"}, {"problem": 22, "code": "(comp (partial reduce +) (partial map (fn [_] 1)))", "user": "55e0a122e4b050e68259b40f"}, {"problem": 22, "code": "(fn [s] \n  (reduce (fn [x y] (+ x 1)) 0 s))", "user": "55e06f82e4b050e68259b40d"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "55e0d0eae4b050e68259b413"}, {"problem": 22, "code": "(fn countit [coll] \n  ( loop [coll coll\n        acc 0]\n    (if (empty? coll) \n      acc\n      (recur (rest coll) (inc acc)))\n  ))", "user": "55cb11e9e4b0e31453f649ff"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "55dc30d4e4b050e68259b3ad"}, {"problem": 22, "code": "(fn counter [x] (let [x' (seq x)]\n  (if (nil? x')\n       0\n       (+ 1 (counter (rest x')))   \n        ))\n  )", "user": "5530baa5e4b076ab5578f81a"}, {"problem": 22, "code": "(fn [m]\n           (reduce\n             (fn [x,y] (inc x))\n             0 m)\n           )", "user": "55d42f78e4b0e31453f64a73"}, {"problem": 22, "code": "(fn cnt [x]\n  (if (empty? x) \n    0 \n    (+ 1 (cnt (rest x)))))", "user": "4dd5fdb0535d2dad7130b5c5"}, {"problem": 22, "code": "(comp inc last (partial map-indexed #(do %2 %)))", "user": "55ddf9dde4b050e68259b3d9"}, {"problem": 22, "code": "reduce #(do %2 (inc %1)) 0", "user": "55e1d34ae4b050e68259b421"}, {"problem": 22, "code": "#(apply + (map (fn [x] 1) %))", "user": "54db48f6e4b024c67c0cf760"}, {"problem": 22, "code": "(fn [seq] (loop [list seq i 0] (if (not(empty? list)) (recur (rest list) (inc i))i)))", "user": "5505d137e4b086ebe8a79c8c"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "55e06858e4b050e68259b40c"}, {"problem": 22, "code": "(fn count-a-sequence\n  [param]\n  (if (= '() param)\n    0  \n    (+ 1 (count-a-sequence (rest param)))))", "user": "55dfac5fe4b050e68259b3f9"}, {"problem": 22, "code": "(fn [l]\n  ((fn [acc n]\n  \t(if (empty? acc)\n    \tn\n      \t(recur (rest acc) (inc n)))) l 0))", "user": "55e246c2e4b050e68259b431"}, {"problem": 22, "code": "(fn count1 [list]\n  (reduce(fn [x y](+ 1 x)) 0 list))", "user": "55df94f4e4b050e68259b3f6"}, {"problem": 22, "code": "(fn [vals] (loop [v vals c 0] (if (empty? v) c (recur (rest v) (inc c)))))", "user": "55e26417e4b050e68259b433"}, {"problem": 22, "code": "(fn [s] (reduce (fn [x y] (+ 1 x)) 0 s))", "user": "5516a874e4b06a49daca83b5"}, {"problem": 22, "code": "(fn [args]\n  (reduce (fn [x y] (+ x 1)) 0 args))", "user": "55e2b1cfe4b050e68259b438"}, {"problem": 22, "code": "#(loop [[head & tail] %1\n        i 1]\n   (if (empty? tail)\n     i\n     (recur tail (inc i))))", "user": "55e2f502e4b050e68259b43c"}, {"problem": 22, "code": "(fn [arr] (inc (first (last (map-indexed vector arr)))))", "user": "55e2d527e4b050e68259b43a"}, {"problem": 22, "code": "(fn [x] (reduce + (map (fn [y] 1) x)))", "user": "55dfada4e4b050e68259b3fd"}, {"problem": 22, "code": "#(reduce (fn [a _] (inc a)) 0 %)", "user": "55e3479be4b050e68259b441"}, {"problem": 22, "code": "(fn [boom] (reduce (fn [x _] (+ x 1)) 0 boom))", "user": "55e0326ce4b050e68259b407"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "55e3a685e4b050e68259b446"}, {"problem": 22, "code": "reduce (fn [a b] (+ a 1)) 0", "user": "55e20059e4b050e68259b427"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "55d1f0bae4b0e31453f64a4d"}, {"problem": 22, "code": "#(alength (to-array %))", "user": "55dfac9de4b050e68259b3fa"}, {"problem": 22, "code": "(fn count2 [arr]\n  (if (empty? arr)\n    0\n    (+ 1 (count2 (rest arr)))\n    )\n  )", "user": "55e46caae4b050e68259b451"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "55e1029ae4b050e68259b418"}, {"problem": 22, "code": "(fn [x] (.size (vec x)))", "user": "55dfe72ee4b050e68259b400"}, {"problem": 22, "code": "(fn counting [v] (if (= v [])\n                     0\n                     (+ 1 (counting (rest v)))))", "user": "55e0decbe4b050e68259b414"}, {"problem": 22, "code": "#( alength (to-array % ))", "user": "55e2004de4b050e68259b426"}, {"problem": 22, "code": "#(alength (to-array %))", "user": "55dfacabe4b050e68259b3fb"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "55d8ec0be4b0e31453f64ac2"}, {"problem": 22, "code": "(fn [x] (reduce + (map (constantly 1) x)))", "user": "55dfacb7e4b050e68259b3fc"}, {"problem": 22, "code": ";(fn mycount\n;  [%]\n;  (if (empty? %)\n;    0\n;    (inc (mycount (rest %)))))\n\n#(reduce + (map (fn [_] 1) %))", "user": "55e1fc42e4b050e68259b424"}, {"problem": 22, "code": "#(alength (to-array %))", "user": "55e5090be4b050e68259b45b"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "55e3ae2fe4b050e68259b447"}, {"problem": 22, "code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "55dffbbae4b050e68259b403"}, {"problem": 22, "code": "(fn [x] (reduce (fn [y col] (inc y)) 0 x))", "user": "55e4c544e4b050e68259b457"}, {"problem": 22, "code": "#(apply + (map (constantly 1) %))", "user": "55aacbeee4b0988bba2ad951"}, {"problem": 22, "code": "#(last (map-indexed (fn [index item] (inc index)) %))", "user": "55e558e3e4b050e68259b46b"}, {"problem": 22, "code": "reduce (fn [x y] (+ x 1)) 0", "user": "55e55449e4b050e68259b468"}, {"problem": 22, "code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "55e55810e4b050e68259b46a"}, {"problem": 22, "code": "(fn [col] (reduce (fn [x y] (inc x)) 0 col))", "user": "54c94376e4b045293a27f665"}, {"problem": 22, "code": "#(reduce (fn [a e] (inc a)) 0 %)", "user": "55e4c3d7e4b050e68259b456"}, {"problem": 22, "code": "#(reduce (fn [cnt _] (inc cnt)) 0 %1)", "user": "55e1ddf7e4b050e68259b422"}, {"problem": 22, "code": "reduce( fn [x y] (+ x 1)) 0", "user": "55e1e4b8e4b050e68259b423"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "55e601dce4b050e68259b47f"}, {"problem": 22, "code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "55e51c25e4b050e68259b461"}, {"problem": 22, "code": "#(loop [i % cnt 0]\n   (if (empty? i)\n     cnt\n     (recur (rest i)(inc cnt))\n   )\n )", "user": "55e4d820e4b050e68259b458"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "55df727be4b050e68259b3f3"}, {"problem": 22, "code": "(fn [xs] \n  ((fn f [ys acc]\n     (if (empty? ys)\n       acc\n       (f (next ys) (+ acc 1)))) xs 0))", "user": "55e60a45e4b050e68259b481"}, {"problem": 22, "code": "reduce #(inc % #_%2) 0", "user": "55e31aa8e4b050e68259b43f"}, {"problem": 22, "code": "#(reduce (fn [x _] (+ 1 x)) 0 %)", "user": "542c56aae4b0dad94371f2a4"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "55e6c3f5e4b050e68259b48c"}, {"problem": 22, "code": "#(loop [result 0 c %]\n    (if(empty? c) result\n    (recur (inc result) (rest c))))", "user": "55663e9be4b0c656e3ff182b"}, {"problem": 22, "code": "(fn [xs]\n  (loop [acc 0 sq xs]\n    (if-not (first sq)\n      acc\n      (recur (inc acc) (rest sq)))))", "user": "55e70e8de4b050e68259b490"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "552af5ebe4b0ffed3738f95b"}, {"problem": 22, "code": "(fn cnt [sq] (if (empty? sq) 0 (+ 1 (cnt (rest sq)))))", "user": "55e01f4ee4b050e68259b406"}, {"problem": 22, "code": "(fn [v] (reduce + (map (fn [x] 1) v)))", "user": "55e1bb20e4b050e68259b41f"}, {"problem": 22, "code": "(fn countt [l]\n  (if (= '() l)\n    0\n    (+ (countt (rest l)) 1)))", "user": "55e4487ce4b050e68259b44c"}, {"problem": 22, "code": "(fn [x]\n  ((fn [x, i]\n    (if (empty? x) i (recur (rest x) (+ i 1)))) x 0))", "user": "55c4cda5e4b0e31453f649a5"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "55e5eb81e4b050e68259b47b"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "55dff80de4b050e68259b402"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "54dd1c2be4b024c67c0cf790"}, {"problem": 22, "code": "reduce (fn [acc _] (inc acc)) 0", "user": "55e7d06ee4b050e68259b496"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "55e856bae4b0121d4835fd8d"}, {"problem": 22, "code": "(fn my-len ([l] (my-len l 0)) ([l n] (if (= l ()) n (recur (rest l) (inc n)))))", "user": "55e87696e4b0121d4835fd93"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "55e875c9e4b0121d4835fd91"}, {"problem": 22, "code": "reduce (fn [len ele] (inc len)) 0", "user": "55e876b9e4b0121d4835fd94"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "55e875d2e4b0121d4835fd92"}, {"problem": 22, "code": "reduce #(do %2 (inc %)) 0", "user": "4daddc19c9a9d6ed4599dc57"}, {"problem": 22, "code": "#( reduce (fn [c _] (inc c)) 0 % )", "user": "55e88644e4b0121d4835fd95"}, {"problem": 22, "code": "(fn [obj] (.size (seq obj)))", "user": "55e5f97de4b050e68259b47e"}, {"problem": 22, "code": "(fn [sq]\n  (loop [acc 0\n         xs sq]\n    (if (empty? xs)\n      acc\n      (recur (inc acc) (rest xs)))))", "user": "5573ffb5e4b0aa18f790f3fd"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "55dbed2fe4b050e68259b3a6"}, {"problem": 22, "code": "#(loop [list %1 c 0]\n   (if (empty? list)\n     c\n     (recur (rest list) (inc c))))", "user": "55e6f8a2e4b050e68259b48e"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %1))", "user": "55e8a85be4b0121d4835fd98"}, {"problem": 22, "code": "(fn [stuff] (reduce (fn [x _] (+ x 1)) 0 stuff))", "user": "55b544e2e4b01b9910ae2986"}, {"problem": 22, "code": "(fn counter ([%] (+ (counter (rest %) 1)))\n               ([col n] (if (seq col)\n                          (+ (counter (rest col) 1) 1)\n                          (+ 1))))", "user": "55264584e4b0ffed3738f918"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "55ea0784e4b0121d4835fda8"}, {"problem": 22, "code": "(partial reduce (fn [c _] (inc c)) 0)", "user": "55ea0780e4b0121d4835fda7"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "55ea0dc3e4b0121d4835fda9"}, {"problem": 22, "code": "reduce (fn [n _] (inc n)) 0", "user": "51b0eca4e4b0c53cf2e68a6f"}, {"problem": 22, "code": "#(reduce (fn [total item] (inc total)) 0 %1)", "user": "55eaca20e4b0121d4835fdb4"}, {"problem": 22, "code": "reduce (fn [a b] (inc a)) 0", "user": "55df5feae4b050e68259b3f1"}, {"problem": 22, "code": "(let [cnt (fn [[x & xs] n]\n            (if (empty? xs)\n              (+ n 1)\n              (recur xs (+ n 1))))]\n  (fn [xs] (cnt xs 0)))", "user": "55eb1410e4b0121d4835fdb8"}, {"problem": 22, "code": "#(apply + (map (fn [_] 1) %))", "user": "55ead489e4b0121d4835fdb6"}, {"problem": 22, "code": "reduce (fn [x y] (inc x)) 0", "user": "5515ab42e4b055c2f668d4ec"}, {"problem": 22, "code": "(fn [array] (reduce (fn [index value] (+ index 1)) 0 (vec array)))", "user": "55eb6644e4b0121d4835fdbb"}, {"problem": 22, "code": "(fn [d] (reduce + (map (constantly 1) d)))", "user": "55e57491e4b050e68259b46d"}, {"problem": 22, "code": "(fn [vec] (loop [vec vec a 0]\n                        (if (nil? (first vec))\n                          a\n                          (recur (rest vec) (+ a 1)))))", "user": "55c86e35e4b0e31453f649e0"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "55ec04c4e4b0121d4835fdc1"}, {"problem": 22, "code": "(fn len2 [l] (if (empty? l) 0 (inc (len2 (rest l)))))", "user": "55ec1c4ce4b0121d4835fdc4"}, {"problem": 22, "code": "(fn [coll] (reduce +  (map (fn [_] 1) coll)))", "user": "55ec4558e4b0121d4835fdc5"}, {"problem": 22, "code": "(fn [s]\n  (reduce (fn [c _] (inc c)) 0 s))", "user": "500e6ddee4b04a05d36fcc06"}, {"problem": 22, "code": "(fn [aseq] (reduce (fn [c _] (inc c)) 0 aseq))", "user": "55ecb2c0e4b0121d4835fdce"}, {"problem": 22, "code": "#(reduce \n  \t(fn [c _] (inc c))\n  \t0 %)", "user": "55ec1048e4b0121d4835fdc3"}, {"problem": 22, "code": "#(reduce + (map (constantly 1)%))", "user": "55d9743ae4b0e31453f64aca"}, {"problem": 22, "code": "#(loop [c 0, x %]\n   (if (seq x)\n     (recur (+ 1 c) (rest x))\n     c))", "user": "55ece7d6e4b0121d4835fdcf"}, {"problem": 22, "code": "(fn mycount\n  [list]\n  (loop [x 0 temp-list list]\n    (if (empty? temp-list)\n      x\n      (recur (inc x) (rest temp-list)))))", "user": "55e9494ae4b0121d4835fd9e"}, {"problem": 22, "code": "(fn [lst]\n  (loop [i lst cnt 0]\n   (cond (empty? i) cnt ;if i is empty return cnt\n     :t (recur (rest i) (inc cnt)))));else return (fn (rest i) (inc cnt))", "user": "55ed1dc5e4b0121d4835fdd4"}, {"problem": 22, "code": "reduce (fn [a _] (inc a)) 0", "user": "55ec0aa8e4b0121d4835fdc2"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "55ecac8ee4b0121d4835fdcc"}, {"problem": 22, "code": "reduce ( fn [x _] (inc x) ) 0", "user": "55ed71dae4b0121d4835fdd9"}, {"problem": 22, "code": "(fn nn [l](if (empty? l)0(+ 1 (nn (next l)))))", "user": "55ec8b25e4b0121d4835fdc9"}, {"problem": 22, "code": "#(+ ((last (map-indexed vector %)) 0) 1)", "user": "55e70606e4b050e68259b48f"}, {"problem": 22, "code": "(fn [lst] (reduce + (map (constantly 1) lst)))", "user": "55ede35ce4b0121d4835fde1"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "55edef1be4b0121d4835fde2"}, {"problem": 22, "code": "reduce (fn [first second] (+ first 1)) 0", "user": "55ed962ae4b0121d4835fddd"}, {"problem": 22, "code": "#(reduce + (map (fn [n] 1) %))", "user": "55ee4e27e4b0121d4835fde9"}, {"problem": 22, "code": "(fn \n  [s]\n  (loop [stemp s i 0]\n   (if (empty? stemp) i \n       (recur (rest stemp) (inc i)))))", "user": "55edc088e4b0121d4835fde0"}, {"problem": 22, "code": "(fn [lst]\n  (loop [l lst\n         i 0]\n    (if (= (rest l) ()) (inc i)\n      (recur (rest l) (inc i)))))", "user": "55ed37ebe4b0121d4835fdd6"}, {"problem": 22, "code": "#(alength (to-array %))", "user": "55ea1738e4b0121d4835fdaa"}, {"problem": 22, "code": "(fn count' [x]\n  (if (empty? x)\n    0\n    (+ 1 (count' (drop 1 x)))))", "user": "55ed9108e4b0121d4835fddc"}, {"problem": 22, "code": "#(reduce (fn [x _] (+ x 1)) 0 %)", "user": "55ef9c9de4b066087aa94537"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "55ee62dde4b0121d4835fdeb"}, {"problem": 22, "code": "(fn count-elems [s] (if (empty? (rest s)) 1 (+ 1 (count-elems (rest s)))))", "user": "55efbb2ae4b066087aa9453c"}, {"problem": 22, "code": "(fn cCount\n   [x]\n   (if (empty? x)\n     0\n     (+ 1 (cCount (rest x)))))", "user": "55e7e598e4b050e68259b498"}, {"problem": 22, "code": "#(reduce (fn [i _] (inc i)) 0 %1)", "user": "53fc88e7e4b0de5c418485be"}, {"problem": 22, "code": "(fn [s] (reduce (fn [a b] (inc a)) 0 s))", "user": "55efdc88e4b066087aa94541"}, {"problem": 22, "code": "(fn [x] (reduce (fn [acc coll] (+ acc 1)) 0 x))", "user": "55f01c74e4b06e875b46ce1c"}, {"problem": 22, "code": "(partial reduce (fn [x y] (inc x)) 0)", "user": "55f014ebe4b06e875b46ce1b"}, {"problem": 22, "code": "(fn [items] (reduce + (map (fn [x] 1) items)))", "user": "55eff16ce4b06e875b46ce16"}, {"problem": 22, "code": "(fn my-count [coll]\n  (if (empty? coll) 0 (+ 1 (my-count (rest coll)))))", "user": "55f03fb5e4b06e875b46ce1f"}, {"problem": 22, "code": "#(loop [cc %\n         acc 0]\n    (if (empty? cc)\n      acc\n      (recur (rest cc) (inc acc))))", "user": "55ec4d30e4b0121d4835fdc6"}, {"problem": 22, "code": "(fn [s] ((fn a [ps i] (if (= ps []) i (a (rest ps) (+ i 1)))) s 0))", "user": "55c60e03e4b0e31453f649ba"}, {"problem": 22, "code": "(fn count-elems \n  ([l] (count-elems l 0))\n  ([l n] (if (empty? l) n (count-elems (rest l) (+ n 1)))))", "user": "55f04526e4b06e875b46ce20"}, {"problem": 22, "code": "(fn [xs] (loop [xs xs acc 0] (if (seq xs) (recur (next xs) (inc acc)) acc)))", "user": "55f081bbe4b06e875b46ce25"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "55f0b59de4b06e875b46ce2a"}, {"problem": 22, "code": ";; my solution: reduce #(do %2 (inc %)) 0\nreduce #(+ (if %2 1 0) %) 0", "user": "4fa436dce4b081705acca19b"}, {"problem": 22, "code": "(fn [alox]\n      (loop [list alox cnt 0]\n        (if (nil? (first list))\n          cnt\n          (recur (rest list) (inc cnt)))))", "user": "55f1085ee4b06e875b46ce2d"}, {"problem": 22, "code": "#(loop [coll %\n        counter 0]\n   (if (empty? coll)\n     counter\n     (recur (rest coll) (inc counter))))", "user": "55eeeb81e4b0121d4835fdf7"}, {"problem": 22, "code": "#(reduce \n  (fn [c _] (inc c))\n  0 %)", "user": "55ead0c8e4b0121d4835fdb5"}, {"problem": 22, "code": "#(reduce (fn [a b] (+ a 1)) 0 %)", "user": "55a127f4e4b0acc240e3150c"}, {"problem": 22, "code": "(fn count-elem [lat]\n  (reduce (fn [x y] (+ x 1)) 0 lat))", "user": "55f1b704e4b06e875b46ce34"}, {"problem": 22, "code": "(fn count1 [coll]\n  (loop [count1 0\n         coll coll]\n    (if (empty? coll)\n      count1\n      (recur (inc count1) (rest coll))\n      )\n    )\n  )", "user": "55f06183e4b06e875b46ce23"}, {"problem": 22, "code": "(fn mycount [x] (reduce + (map (constantly 1) x)))", "user": "55f09e7be4b06e875b46ce28"}, {"problem": 22, "code": "(fn [y] (reduce + (map #(if % 1 0) y)))", "user": "54d05a9de4b0e8a36923e5c7"}, {"problem": 22, "code": "(fn [listing]\n  (+ 1 (last (keep-indexed #(when (= %2 (last listing)) %1) listing))))", "user": "54f36b36e4b050824f58f5c2"}, {"problem": 22, "code": "(fn [l]\n  (let [x (atom 0)]\n    (dorun (map #(do (println %)\n                   (swap! x inc)) l))\n    @x))", "user": "55f27bf9e4b06e875b46ce45"}, {"problem": 22, "code": "(fn cc [coll]\n   ((fn ss [c acc]\n      (if (empty? c) acc (recur (rest c) (inc acc)))) coll 0))", "user": "55f04940e4b06e875b46ce21"}, {"problem": 22, "code": "(fn [coll]\n  \n   (loop [remaining coll \n          iter 1]\n    (let[[head & tail] remaining]\n     (if (empty? tail) \n       iter\n      (recur tail (inc iter) )\n    )\n   )\n))", "user": "55ef51f1e4b066087aa94534"}, {"problem": 22, "code": "(fn[s] (loop [se s i 0] (if (first se) (recur (rest se) (inc i)) i)))", "user": "55809cb9e4b05c286339e0ef"}, {"problem": 22, "code": "(fn cnt\n  ([x] (cnt x 0))\n  ([x n] (if (first x)\n           (recur (rest x) (inc n))\n           n)))", "user": "55f2d4ede4b06e875b46ce4c"}, {"problem": 22, "code": "#(loop [cnt 0 coll %] (if (empty? coll) cnt (recur (inc cnt) (rest coll))))", "user": "55eeb37ae4b0121d4835fdf3"}, {"problem": 22, "code": "#(reduce + 0 (map (fn [n] 1) (seq %)))", "user": "55f1d5dfe4b06e875b46ce38"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "55e5c852e4b050e68259b474"}, {"problem": 22, "code": "(fn len [s] (if (seq s) (+ (len (rest s)) 1) 0))", "user": "55f20e4be4b06e875b46ce40"}, {"problem": 22, "code": "#(loop[l %, r 0]\n   (if (nil? l)\n     r\n     (recur (next l) (inc r))))", "user": "55eedffbe4b0121d4835fdf6"}, {"problem": 22, "code": "#(reduce (fn [m i] (+ m 1)) 0 %)", "user": "55f1a939e4b06e875b46ce33"}, {"problem": 22, "code": "#(loop [coll %\n        memo 0]\n   (if (empty? coll)\n     \tmemo\n     \t(recur (rest coll) (+ 1 memo))))", "user": "55f344afe4b06e875b46ce5a"}, {"problem": 22, "code": "(fn [col]\n   (inc (first (last\n             (map-indexed vector col))\n           )))", "user": "55f32f6fe4b06e875b46ce53"}, {"problem": 22, "code": "(fn get-count [& args]\n  (let [x (nth args 0) \n        el (nth args 1 0)]\n    (if (nil? (first x))\n      el\n      (get-count\n       (rest x) (+ el 1)))))", "user": "55f05015e4b06e875b46ce22"}, {"problem": 22, "code": "#(->> (map (constantly 1) %1) (reduce +))", "user": "55efc44ee4b066087aa9453e"}, {"problem": 22, "code": "(fn count-a-sequence [xs]\n  (reduce (fn [c _] (inc c)) 0 xs))", "user": "518b8561e4b0f028e99addef"}, {"problem": 22, "code": "#(reduce (fn [n x] (inc n)) 0 %1)", "user": "55f3643ee4b06e875b46ce5d"}, {"problem": 22, "code": "(fn [lst]\n  (loop [i lst cnt 0]\n   (cond (empty? i) cnt\n     :t (recur (rest i)(inc cnt)))))", "user": "55f32f7ce4b06e875b46ce54"}, {"problem": 22, "code": "(fn [x]\n  (loop [coll x\n         qtde 0]\n    (if (empty? coll)\n      qtde\n      (recur (rest coll) (inc qtde)))))", "user": "55f3979ee4b06e875b46ce60"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "55f2fdc3e4b06e875b46ce51"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "55f4394ae4b06e875b46ce69"}, {"problem": 22, "code": "reduce (fn [x _] (inc x)) 0", "user": "55f3802be4b06e875b46ce5f"}, {"problem": 22, "code": "(fn f [x] (if (empty? x) 0 (+ 1 (f (rest x)))))", "user": "55f47f54e4b06e875b46ce78"}, {"problem": 22, "code": "#(reduce (fn [i a] (+ i 1)) 0 (seq %1))", "user": "558ffca1e4b0277789237668"}, {"problem": 22, "code": "(fn [xs]\n  (loop [i 0, xs xs]\n    (if (nil? xs)\n      i\n      (recur (inc i) (next xs)))))", "user": "55e7fc2ce4b0121d4835fd86"}, {"problem": 22, "code": "#(reduce + (vals (frequencies %)))", "user": "55f1f45be4b06e875b46ce3d"}, {"problem": 22, "code": "(fn [xs] (reduce (fn [a b] (+ a 1)) 0 xs))", "user": "55f5625de4b06e875b46ce86"}, {"problem": 22, "code": "#(reduce + (map (fn [& a] 1) (seq %)))", "user": "55f5b657e4b06e875b46ce8c"}, {"problem": 22, "code": "(fn c [coll] \n  (if (= coll '())\n    0\n    (+ (c (rest coll)) 1)))", "user": "55f5c118e4b06e875b46ce8e"}, {"problem": 22, "code": "(fn [coll] (loop [s coll n 0]\n             (if (empty? s) n (recur (rest s) (inc n)))))", "user": "55f4ef68e4b06e875b46ce82"}, {"problem": 22, "code": "#(loop [iteration 1\n         e %]\n  (let [[c & d] e]\n    (if (nil? d)\n       iteration\n      (recur (inc iteration) d))))", "user": "55f49a4ae4b06e875b46ce7f"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "55f43228e4b06e875b46ce67"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "55e59b67e4b050e68259b46f"}, {"problem": 22, "code": "(fn [xxs] (apply (fn [[x & xs] n]\n  (if (nil? x) n (recur xs (inc n) ))) [xxs 0]))", "user": "55f01316e4b06e875b46ce1a"}, {"problem": 22, "code": "(fn [coll] (loop [c (seq coll) n 0] (if c (recur (next c) (inc n)) n)))", "user": "55d28b38e4b0e31453f64a58"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "558ee1c9e4b0277789237659"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "55f6c0e2e4b06e875b46ce99"}, {"problem": 22, "code": "(fn count-custom [collection] \n  (reduce + (map (constantly 1) collection)))", "user": "55f330dde4b06e875b46ce56"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "55f439d8e4b06e875b46ce6a"}, {"problem": 22, "code": "(fn cnt [_list & { :keys [curr] :or {curr 0}}] (if (= _list '())\n                                                  curr\n                                                  (cnt (rest _list) :curr (inc curr))))", "user": "55f6fafbe4b06e875b46cea1"}, {"problem": 22, "code": "#(reduce (fn [x _] (inc x)) 0 %)", "user": "55f33f0ce4b06e875b46ce59"}, {"problem": 22, "code": "(fn [s]\n  (loop [[x & xs] s\n         i 0]\n    (if (empty? xs)\n      (+ i 1)\n      (recur xs (+ i 1)))))", "user": "55f7ca86e4b06e875b46ceb1"}, {"problem": 22, "code": "(fn [s] \n  (+ 1 (.lastIndexOf (map str s) (last (map str s)))))", "user": "55f7bd07e4b06e875b46ceaf"}, {"problem": 22, "code": "#(loop [[head & rest] % c 0] (if (nil? rest) (+ c 1) (recur rest (+ c 1))))", "user": "55f7dc24e4b06e875b46ceb3"}, {"problem": 22, "code": "#(reduce (fn [a b] (+ a 1)) 0 %)", "user": "55f7c873e4b06e875b46ceb0"}, {"problem": 22, "code": "(fn my-count [xs]\n  (if (empty? xs)\n    0\n    (+ 1 (my-count (rest xs)))))", "user": "55f7ebeae4b06e875b46ceb7"}, {"problem": 22, "code": "(fn [coll] (reduce + (map (fn [x] 1) coll)))", "user": "55f7e056e4b06e875b46ceb4"}, {"problem": 22, "code": "(fn [coll]\n  (loop [c coll cnt 0]\n    (if (empty? c) cnt\n      (recur (rest c) (inc cnt)))))", "user": "55f6e7ece4b06e875b46ce9e"}, {"problem": 22, "code": "(fn [c]\n  (reduce + (vals (frequencies c))))", "user": "5541fa50e4b0a04f79299515"}, {"problem": 22, "code": "(fn [sea-quince]\n  (loop [cnt 0, sequins sea-quince]\n    (if (empty? sequins)\n      cnt\n        (recur (inc cnt) (pop (vec sequins))))))", "user": "55810c73e4b05c286339e0f2"}, {"problem": 22, "code": "(fn special_count\n ([col] (special_count col 0))\n ([col counter]\n   (          \n    if (empty? col) counter\n    (recur (rest col) (+ 1 counter))\n   )\n )\n)", "user": "55f7a03de4b06e875b46ceae"}, {"problem": 22, "code": "(fn cunt [s]\n  (loop [elems s acc 0]\n    (if (not (seq elems))\n      acc\n      (recur (rest elems) (inc acc))\n      )\n    \n    )\n  \n  )", "user": "55f8fd70e4b03cbcff9738bc"}, {"problem": 22, "code": "(fn [xs]\n  (loop [xs xs cnt 0]\n    (if (seq xs)\n      (recur (rest xs) (inc cnt))\n      cnt)))", "user": "55f90d76e4b03cbcff9738bd"}, {"problem": 22, "code": "#(.size (seq %))", "user": "55f85e85e4b03cbcff9738af"}, {"problem": 22, "code": "reduce (fn [x y] (+ x 1)) 0", "user": "55ef12cfe4b0121d4835fdfc"}, {"problem": 22, "code": "#(reduce (fn [x _] (inc x)) 0 %)", "user": "55f6f1d3e4b06e875b46cea0"}, {"problem": 22, "code": "(fn mycount [s] (reduce (fn r [a _] (+ 1 a)) 0 (seq s)))", "user": "55f80372e4b06e875b46ceb9"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "55f95b47e4b03cbcff9738c0"}, {"problem": 22, "code": "(fn [s]\n  (loop [sec s\n         num 0]\n    (if (empty? sec)\n      num\n       (recur (rest sec) (+ num 1)))))", "user": "55f8180fe4b06e875b46ceba"}, {"problem": 22, "code": "#(reduce (fn [c x] (inc c)) 0 %)", "user": "55f95782e4b03cbcff9738bf"}, {"problem": 22, "code": "#(reduce + (map( fn[x] 1 ) % ) )", "user": "55f8ad54e4b03cbcff9738b9"}, {"problem": 22, "code": "(fn [l]\n  (loop [l l n 0]\n  \t(if (empty? l) \n   \t n\n    (recur (rest l)(inc n)))))", "user": "55f274b2e4b06e875b46ce44"}, {"problem": 22, "code": "(fn my-count [seq]\n  (if (empty? seq)\n    0\n    (+ 1 (my-count (rest seq)))))", "user": "55e3e7a8e4b050e68259b44a"}, {"problem": 22, "code": "(fn sz [xs]\n  (if (empty? xs)\n    0\n    (inc (sz (rest xs)))))", "user": "55f9acade4b03cbcff9738c7"}, {"problem": 22, "code": "(fn\n   [list]\n  (loop\n    [i 0\n     workList list]\n    (if (empty? workList)\n      i\n      (recur (inc i) (rest workList))  \n    )\n  )\n )", "user": "55f9b634e4b03cbcff9738c9"}, {"problem": 22, "code": "#(reduce (fn [a _] (inc a)) 0 %)", "user": "55f9c245e4b03cbcff9738ca"}, {"problem": 22, "code": "#(reduce (fn [x _] (inc x)) 0 %)", "user": "55f9c5fbe4b03cbcff9738cb"}, {"problem": 22, "code": "#(loop [s %\n        counter 0]\n    (if (nil? (first s))\n      counter\n      (recur (rest s)\n             (inc counter))))", "user": "55f8a7b3e4b03cbcff9738b8"}, {"problem": 22, "code": "#(alength (to-array %))", "user": "54c19c5be4b0ed20f4ff6f28"}, {"problem": 22, "code": "(fn [coll] (loop [xs (seq coll) acc 0] (if (seq xs)\n  (recur (rest xs) (+ acc 1))\n  acc                                                                             )))", "user": "55f48d1be4b06e875b46ce7b"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "55fa3454e4b03cbcff9738ce"}, {"problem": 22, "code": "#(loop [x %\n         acc 0]\n    (if (empty? x)\n      acc\n      (recur (rest x) (inc acc))))", "user": "558053b1e4b05c286339e0e9"}, {"problem": 22, "code": "#(loop [x 0 y %] (if (= y ()) x (recur (inc x) (rest y))))", "user": "55f68360e4b06e875b46ce93"}, {"problem": 22, "code": "(fn count-something [coll] (loop [in coll, out 0] (if (empty? in) out (recur (rest in) (inc out)))))", "user": "554b8b78e4b0a04f7929958d"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "55f7856be4b06e875b46cead"}, {"problem": 22, "code": "#(alength (to-array %))", "user": "55f1f29be4b06e875b46ce3c"}, {"problem": 22, "code": "(fn cnt [lst] (reduce (fn [x y] (+ x 1)) 0 lst))", "user": "55fb04e0e4b0f488688e0657"}, {"problem": 22, "code": "#(reduce + (map (fn [n] 1) %))", "user": "55fb1c77e4b0f488688e065c"}, {"problem": 22, "code": "(fn cnt [coll]\n  (loop [c coll\n         acc 0]\n    (if (empty? c)\n      acc\n      (recur (rest c) (inc acc)))))", "user": "556a6137e4b09a3098a524e0"}, {"problem": 22, "code": "(fn len [s]\n  (\n    (fn len_helper [s n]\n      (if (= '() (rest s)) (+ n 1) (len_helper (rest s) (+ n 1)))\n    ) s 0\n  )\n)", "user": "55fb58b2e4b0f488688e0661"}, {"problem": 22, "code": "(partial (fn [n xs] (if (empty? xs) n (recur (inc n) (rest xs)))) 0)", "user": "55fab881e4b03cbcff9738d2"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "55fbb2e2e4b0f488688e0665"}, {"problem": 22, "code": "(fn [s]\n  (loop [c 0 s s]\n    (if (empty? s)\n      c\n      (recur (+ c 1) (rest s)))))", "user": "55fbf6cae4b0f488688e066c"}, {"problem": 22, "code": "(fn [v] (reduce (fn [num ignore] (+ 1 num)) 0 v))", "user": "5591b61ee4b0604b3f94d580"}, {"problem": 22, "code": "(fn func [lst] (if (empty? lst) 0 (+ 1 (func (rest lst)))))", "user": "55216b7ee4b0882d96d09193"}, {"problem": 22, "code": "(fn [l] (reduce + (map (fn [x] 1) l)))", "user": "55fc07d3e4b0f488688e066e"}, {"problem": 22, "code": "(fn [x] (reduce (fn [x y] (+ 1 x)) 0  x ))", "user": "551daeb9e4b030e6a24d00df"}, {"problem": 22, "code": "reduce (fn [acc seq] (inc acc)) 0", "user": "55fc1f05e4b0f488688e066f"}, {"problem": 22, "code": "(comp alength to-array)", "user": "55ef2f27e4b066087aa94532"}, {"problem": 22, "code": "(fn [c]\n  (reduce (fn [r x] (+ r 1))\n    0 (seq c)))", "user": "55fb12dce4b0f488688e065a"}, {"problem": 22, "code": "#(reduce (fn [acc x]\n                  (inc acc))\n              0 %)", "user": "5410499de4b01498b1a719a6"}, {"problem": 22, "code": "#(loop [coll %1 acc 0]\n   (if (= coll nil)\n     acc\n     (recur (next coll) (inc acc))\n     )\n   )", "user": "55fc8f1fe4b0f488688e0675"}, {"problem": 22, "code": "(fn seq-count [input]\n  (if (empty? input)\n    0\n    (inc (seq-count (rest input)))))", "user": "55fb5b89e4b0f488688e0662"}, {"problem": 22, "code": "(fn [sq]\n  (apply + (map (fn [x] 1) sq)))", "user": "55ea8722e4b0121d4835fdb1"}, {"problem": 22, "code": "reduce (fn [acc _] (inc acc)) 0", "user": "55048182e4b086ebe8a79c7c"}, {"problem": 22, "code": "reduce (fn [sum n] (+ 1 sum)) 0", "user": "4e70eae1535d5021c1a89642"}, {"problem": 22, "code": "(fn [coll] (loop [coll coll i 0]\n     (if (empty? coll) \n       i \n       (recur (drop 1 coll) \n              (inc i))\n       )\n     ))", "user": "53b1db8ee4b047364c044495"}, {"problem": 22, "code": "(fn [coll] (reduce (fn [x y] (+ x 1)) 0 coll))", "user": "55fda077e4b07755b13145fb"}, {"problem": 22, "code": "#(loop[s %, n 0]\n   (if (empty? s)\n     n\n     (recur (rest s) (inc n))))", "user": "55fd9dffe4b07755b13145fa"}, {"problem": 22, "code": "#(loop[result 0 collection %]\n   (if (empty? collection) result\n     (recur (inc result)(rest collection))))", "user": "55a68518e4b09e57187da29b"}, {"problem": 22, "code": "(fn f ([x] (f x 0))\n    ([x, y] (if (empty? x) y (f (rest x) (+ y 1))))\n)", "user": "55fdf902e4b00f4cabc5764e"}, {"problem": 22, "code": "(fn [lat]\n  (reduce (fn [x y] (+ x 1)) 0 lat))", "user": "55fdb17de4b07755b13145fd"}, {"problem": 22, "code": "(partial (fn [size coll] (if (nil? coll) size (recur (inc size) (next coll)))) 0)", "user": "55fe7e15e4b00f4cabc57651"}, {"problem": 22, "code": "(fn [se]\n  (loop [c 0 s se]\n    (if (empty? s)\n      c\n      (recur (inc c) (rest s)))))", "user": "55fe997be4b00f4cabc57653"}, {"problem": 22, "code": "(fn count2 [[x & xs]]\n  (if (seq? xs)\n    (+ 1 (count2 xs))\n    1))", "user": "55fee5e4e4b00f4cabc5765a"}, {"problem": 22, "code": "(fn [coll] (loop [c coll cnt 0] (if (seq c)\n                                   (recur (next c) (inc cnt))\n                                   cnt)))", "user": "55f8b32ae4b03cbcff9738ba"}, {"problem": 22, "code": "#(reduce (fn [r x] (+ 1 r)) 0 %)", "user": "55c917a1e4b0e31453f649e9"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "54bdcde5e4b0ed20f4ff6ee5"}, {"problem": 22, "code": "#(areduce (into-array %) idx ret (long 0) (inc ret))", "user": "55e5f668e4b050e68259b47d"}, {"problem": 22, "code": "(fn [coll]\n  (loop [x coll n 0]\n    (if (empty? x)\n      n\n      (recur (rest x) (+ 1 n))\n      )\n    )\n  )", "user": "55fea1a1e4b00f4cabc57657"}, {"problem": 22, "code": "(fn [l] (loop [li l cnt 0]\n          (if (empty? li)\n            cnt\n            (recur (rest li) (inc cnt)))))", "user": "55f2b42be4b06e875b46ce4a"}, {"problem": 22, "code": "(fn [a]\n  (reduce (fn [c d] (inc c)) 0 a))", "user": "5598d5efe4b031d6649c9ba0"}, {"problem": 22, "code": "(fn [coll] (reduce (fn [x y](inc x)) 0 coll))", "user": "55c1fa2be4b0e31453f64971"}, {"problem": 22, "code": "reduce (fn[acc s] (inc acc)) 0", "user": "55dcbd30e4b050e68259b3bb"}, {"problem": 22, "code": "#(reduce (fn [c x] (inc c)) \n         0\n         %)", "user": "53bd7225e4b0d9a98559a6d2"}, {"problem": 22, "code": "#(reduce (fn [a _] (inc a)) 0 %1)", "user": "511e17a9e4b0c5b849dd36b0"}, {"problem": 22, "code": "(fn [coll]\n   (loop [c coll i 0]\n     (if-not c\n       i\n       (recur (next c) (inc i))\n     )\n    )\n\n  )", "user": "56004deee4b04bb52996e164"}, {"problem": 22, "code": "(fn [coll]\n  (reduce (fn [sum e] (+ sum 1)) 0 coll))", "user": "55d073ece4b0e31453f64a3b"}, {"problem": 22, "code": "(fn [x] (reduce + (map (constantly 1) x)))", "user": "56009544e4b04bb52996e16c"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "560094a0e4b04bb52996e16b"}, {"problem": 22, "code": "(fn [x]\n  (loop [y x z 0]\n    (if (nil? y) z\n                 (recur (next y) (inc z))\n                 )\n    )\n  )", "user": "55f95de6e4b03cbcff9738c1"}, {"problem": 22, "code": "reduce (fn [x _] (inc x)) 0", "user": "55b666f2e4b01b9910ae2995"}, {"problem": 22, "code": "(fn [seq] (loop [s seq\n                 pos 0]\n            \t(if (not (empty? s))\n                  (recur (rest s) (+ pos 1))\n                  pos)))", "user": "56018dd4e4b04bb52996e18f"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "560039cce4b04bb52996e162"}, {"problem": 22, "code": "(fn \n  [s] \n  (reduce (fn [x _] (inc x)) 0 s))", "user": "55dedb0de4b050e68259b3e8"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "56014f55e4b04bb52996e184"}, {"problem": 22, "code": "(fn [seq]\n  (loop [remaining seq\n         so_far 0]\n    (if (first remaining)\n      (recur (rest remaining) (+ 1 so_far))\n      so_far)))", "user": "5601cd19e4b04bb52996e197"}, {"problem": 22, "code": "(fn [x]\n  (loop [x x c 0]\n    (if (first x) (recur (next x) (+ c 1)) c)))", "user": "5601a32ee4b04bb52996e193"}, {"problem": 22, "code": "(partial reduce (fn [a _] (+ 1 a)) 0)", "user": "50a3ad0ee4b0ceace084d493"}, {"problem": 22, "code": "(fn [l] (reduce (fn [x _] (inc x)) 0 l))", "user": "5600f8c7e4b04bb52996e176"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %1)", "user": "560152dee4b04bb52996e186"}, {"problem": 22, "code": "(fn [seq] (reduce + (map (constantly 1) seq)))", "user": "55fe9fc9e4b00f4cabc57655"}, {"problem": 22, "code": "(fn [seq]\n  ((fn count-iter [left-seq number]\n     (if (= (first left-seq) nil)\n       number\n       (count-iter (rest left-seq) (inc number))))\n   seq 0))", "user": "55fe9daee4b00f4cabc57654"}, {"problem": 22, "code": "reduce (fn [x x1] (inc x)) 0", "user": "56019662e4b04bb52996e190"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "55ee894de4b0121d4835fdf1"}, {"problem": 22, "code": "(fn [s]\n  (loop [a 0 xs s]\n    (if \n      (not (seq xs)) \n      a\n      (recur (inc a) (rest xs)))))", "user": "52aaabf7e4b0c58976d9ac68"}, {"problem": 22, "code": "#(reduce (fn[a b] (inc a)) 0 (seq %))", "user": "5602ab92e4b04bb52996e1a3"}, {"problem": 22, "code": "#(reduce + 0 (map (fn [x] 1) %))", "user": "5602f5fce4b04bb52996e1ad"}, {"problem": 22, "code": "(fn cnt [ls]\n  (if (empty? ls)\n    0\n    (+ 1 (cnt (rest ls)))\n  )\n)", "user": "5602cbe5e4b04bb52996e1a9"}, {"problem": 22, "code": "(fn [c]\n  (loop [coll c\n         n 0]\n    (if (empty? coll)\n      n\n      (recur (rest coll) (inc n)))))", "user": "56032173e4b04bb52996e1b3"}, {"problem": 22, "code": "(fn my-count \n  ([sequ] (my-count (rest sequ) 1)) \n  ([sequ n](if (nil? (first sequ)) \n           n \n           (my-count (rest sequ) (inc n)) ))\n)", "user": "560331dee4b04bb52996e1b5"}, {"problem": 22, "code": "(fn foo [x] (if (empty? x) 0 (+ 1 (foo (rest x)))))", "user": "56034f31e4b04bb52996e1b7"}, {"problem": 22, "code": "(fn [l] (let [a (fn [l n] (if-not (seq l) n (recur (rest l) (+ n 1))))] (a l 0)))", "user": "56022f5ae4b04bb52996e19c"}, {"problem": 22, "code": "(fn [s] ((fn mycount [s n] (if (empty? s) n (mycount (rest s) (+ n 1)))) s 0))", "user": "560368a6e4b04bb52996e1bb"}, {"problem": 22, "code": "(fn [x] (reduce + (map (fn [a] 1) x) ))", "user": "5560293de4b0c656e3ff17bf"}, {"problem": 22, "code": "(fn [coll]  (reduce + (map #(do % 1) coll)))", "user": "56035cb1e4b04bb52996e1ba"}, {"problem": 22, "code": "reduce (fn [a b](+ a 1)) 0", "user": "56039843e4b04bb52996e1be"}, {"problem": 22, "code": "(partial reduce (fn [a b] (+ a 1)) 0)", "user": "5603d21de4b0c80df0ca264f"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "55fbcbd1e4b0f488688e0669"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "56035afae4b04bb52996e1b9"}, {"problem": 22, "code": "#(reduce + (map (fn[a] 1) %))", "user": "56011393e4b04bb52996e178"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "55fbcbb1e4b0f488688e0668"}, {"problem": 22, "code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "555b43dfe4b0deb715856e4d"}, {"problem": 22, "code": "#(loop [result 0 c %]\n    (if(empty? c) result\n    (recur (inc result) (rest c))))", "user": "56040e58e4b0c80df0ca2654"}, {"problem": 22, "code": "(fn [c li]\n  (if (empty? li)\n    c\n    (recur (inc c) (drop-last li)))) 0", "user": "56040b64e4b0c80df0ca2653"}, {"problem": 22, "code": "#(loop [x-count 0\n        x %] \n   (if (empty? x)\n     x-count\n     (recur (inc x-count) (rest x))))", "user": "5605007ae4b08b23635d315e"}, {"problem": 22, "code": "(fn [xs] \n   (-> (map-indexed vector xs) (last) (first) (inc)))", "user": "55fb41a6e4b0f488688e065f"}, {"problem": 22, "code": "(fn my-count [coll] (reduce (fn [n _] (inc n)) 0 coll))", "user": "56018b59e4b04bb52996e18c"}, {"problem": 22, "code": "(partial reduce #(inc (first %&)) 0)", "user": "5603c31fe4b04bb52996e1c1"}, {"problem": 22, "code": "(partial reduce (fn [c e] (inc c)) 0)", "user": "56051095e4b08b23635d3162"}, {"problem": 22, "code": "#(reduce (fn [x _] (inc x)) 0 %)", "user": "55fe8190e4b00f4cabc57652"}, {"problem": 22, "code": "(fn\n    [values]\n    (loop [data values\n           total 0]\n      (if (empty? data)\n        total\n        (recur\n          (rest data)\n          (+ total 1)))))", "user": "55ad2379e4b03311e7b732a1"}, {"problem": 22, "code": "(fn [s]\n  (loop [s s\n         c 0]\n    (if (= s '())\n      c\n      (recur (rest s)\n             (inc c)))))", "user": "56047160e4b0c80df0ca265d"}, {"problem": 22, "code": "(comp (partial reduce +) (partial map (fn [_] 1)))", "user": "56054d8fe4b08b23635d3165"}, {"problem": 22, "code": "#(apply + (map (fn [x] (if x 1)) %))", "user": "56055381e4b08b23635d3167"}, {"problem": 22, "code": "(fn [s]\n  (loop [myseq s cnt 0]\n    (if (empty? myseq)\n      cnt\n      (recur (rest myseq) (+ cnt 1))\n    )))", "user": "5603c784e4b04bb52996e1c2"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "5601e037e4b04bb52996e199"}, {"problem": 22, "code": "#(loop [x % i 0] (if (empty? x)\n                  i\n                  (recur (next x) (+ i 1))))", "user": "5605b5e9e4b08b23635d316e"}, {"problem": 22, "code": "(fn my_count \n\t([l]\n\t\t(my_count l 0)\n\t)\n\t([l n]\n\t\t(if (= () l)\n\t\t  n\n\t\t  (my_count (rest l) (+ n 1))\n\t\t)\n\t)\n\n)", "user": "56058d64e4b08b23635d3169"}, {"problem": 22, "code": "(fn [l] (reduce (fn [a x] (+ 1 a)) 0 l))", "user": "56050f06e4b08b23635d3161"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "55fe5dfae4b00f4cabc57650"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "56050dd9e4b08b23635d3160"}, {"problem": 22, "code": "#(letfn [(cnt [v n]\n              (if (empty? v) n \n                (cnt (rest v) (inc n))))]\n              (cnt % 0))", "user": "55c2cb47e4b0e31453f64981"}, {"problem": 22, "code": "#(\n(fn counter [l, n]\n  (if\n    (= () l)\n    n\n    (counter (rest l) (+ n 1))))\n  %1\n  0\n)", "user": "56069006e4b08b23635d3174"}, {"problem": 22, "code": "reduce (fn [acc v] (inc acc)) 0", "user": "5606a4ace4b08b23635d3175"}, {"problem": 22, "code": "(fn length [l] (if (empty? l) 0 (+ 1 (length (rest l)))))", "user": "5606d71ce4b08b23635d317a"}, {"problem": 22, "code": "(fn cnt \n         [seq] \n         (if (empty? seq)\n           0  \n           ( + 1 (cnt (rest seq)))))", "user": "55fcaccfe4b0f488688e0679"}, {"problem": 22, "code": "(fn [s]\n  (loop [in s i 0]\n    (if (empty? in)\n      i\n      (recur (rest in) (inc i)))))", "user": "5604bcf7e4b08b23635d315a"}, {"problem": 22, "code": "(fn size [x] (if (empty? x) 0 (+ 1 (size (rest x)))))", "user": "56078b7be4b08b23635d3181"}, {"problem": 22, "code": "(fn my-count\n  [[x & xs]]\n  (if x\n    (+ 1 (my-count xs))\n    0))", "user": "55e732c5e4b050e68259b492"}, {"problem": 22, "code": "(fn [s]\n  (loop [cs s\n         total 0]\n    (if (empty? cs)\n      total\n      (recur (rest cs) (inc total)))))", "user": "56082adae4b046a4fc0ac008"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "560828a1e4b046a4fc0ac006"}, {"problem": 22, "code": "(fn mycount [xs] (if (empty? xs) 0 (+ 1 (mycount (rest xs)))))", "user": "5601bb7ee4b04bb52996e195"}, {"problem": 22, "code": "#(reduce (fn [cnt _] (+ 1 cnt)) 0 %)", "user": "560843dee4b046a4fc0ac00e"}, {"problem": 22, "code": "#(reduce (fn[x _] (inc x)) 0 (seq %))", "user": "560768a0e4b08b23635d317f"}, {"problem": 22, "code": "(fn my-count\n  ([s]\n   (my-count s 0))\n  ([s n]\n   (if (empty? s)\n     n\n     (my-count (rest s) (inc n)))))", "user": "56084e91e4b046a4fc0ac00f"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "560866eee4b046a4fc0ac012"}, {"problem": 22, "code": "(fn my-count [x]\n  (if (= [] x)\n    0\n    (+ 1 (my-count (rest x)))))", "user": "5606ea56e4b08b23635d317b"}, {"problem": 22, "code": "(fn [coll]\n  (reduce (fn [res this]\n            (+ 1 res)) \n          0\n          (seq coll)))", "user": "543f1765e4b032a45b86935a"}, {"problem": 22, "code": "(fn [seq]\n  (loop [s seq c 0]\n    (if (empty? s)\n      c\n      (recur (rest s) (inc c)))))", "user": "56081222e4b046a4fc0ac004"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "560794bde4b08b23635d3182"}, {"problem": 22, "code": "(fn my-count \n  ([coll] (my-count coll 0))\n  ([coll cnt]\n  (if (empty? coll) \n    cnt\n    (my-count (rest coll) (inc cnt))\n    )\n  ))", "user": "56092a8de4b0053d1b86c7da"}, {"problem": 22, "code": "(fn [coll] (first (last (map vector (iterate inc 1) coll))))", "user": "55f2c898e4b06e875b46ce4b"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %) )", "user": "56098003e4b0053d1b86c7e0"}, {"problem": 22, "code": "(partial reduce (fn [r _] (+ r 1)) 0)", "user": "55e274b4e4b050e68259b436"}, {"problem": 22, "code": "(fn vasya ([coll] (vasya coll 0))\n          ([coll x] (if (empty? coll)\n                         x\n                        (recur (rest coll) (inc x)))))", "user": "55cf0d0ee4b0e31453f64a2b"}, {"problem": 22, "code": "reduce (fn [x y] (inc x)) 0", "user": "5609816ee4b0053d1b86c7e1"}, {"problem": 22, "code": "#(loop [c 0 l %]\n   (if (empty? l)\n     c\n     (recur (inc c) (next l))))", "user": "5609866ee4b0053d1b86c7e3"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "560959c0e4b0053d1b86c7dc"}, {"problem": 22, "code": "(fn my-count [coll]\n        (if (empty? coll)\n          0\n          (+ 1 (my-count (rest coll)))))", "user": "55bb1b26e4b01b9910ae29e0"}, {"problem": 22, "code": "reduce (fn [acc _] (inc acc)) 0", "user": "560a7b46e4b05f002753defb"}, {"problem": 22, "code": "(fn [x] (reduce + (map (fn [y] 1) x)))", "user": "56049986e4b0c80df0ca2662"}, {"problem": 22, "code": "#(reduce (fn [x _] (inc x)) 0 %1)", "user": "5592ba8be4b0c79f6e1db931"}, {"problem": 22, "code": "(fn total [xs] (if (empty? xs)\n                 0\n                 (+ 1 (total (rest xs)))\n                 ))", "user": "560aa7b0e4b05f002753df02"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "50bcb004e4b0594b91591c5f"}, {"problem": 22, "code": "(fn [s] (loop [i 0 t s]\n          (if (= t []) i (recur (+ i 1) (rest t)))))", "user": "560ac5cae4b05f002753df09"}, {"problem": 22, "code": "(fn [s] (reduce + (map (fn [x] 1) s)))", "user": "560ae540e4b05f002753df0d"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "544d8be9e4b0e3978000697d"}, {"problem": 22, "code": "(fn [list]\n  (reduce (fn [acc x]\n           (inc acc)) 0 list))", "user": "560a7775e4b05f002753defa"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "560b8741e4b05f002753df1d"}, {"problem": 22, "code": "(comp (partial reduce +) (partial map (constantly 1)))", "user": "560bb1f7e4b05f002753df20"}, {"problem": 22, "code": "(fn s [x] (if (first x) (+ (s (rest x)) 1)  0))", "user": "560a8ccde4b05f002753defc"}, {"problem": 22, "code": "#(loop [xs %1 i 0] (if (first xs) (recur (rest xs) (inc i)) i))", "user": "56098ccbe4b0053d1b86c7e4"}, {"problem": 22, "code": "(fn func[l] (loop [m l cnt 0] (if (empty? m) cnt (recur (rest m) (inc cnt)))))", "user": "56039a9de4b04bb52996e1bf"}, {"problem": 22, "code": "(fn my-count [s]\n  (if (empty? s)\n    0\n    (inc (my-count (rest s)))))", "user": "516e3626e4b0284f4b26df81"}, {"problem": 22, "code": "(fn total[x] (if (empty? x) 0 (inc (total (rest x)))))", "user": "560ac488e4b05f002753df08"}, {"problem": 22, "code": "#(loop [col %, i 0]\n  (if (empty? col)\n    i\n    (recur (rest col) (+ i 1)))\n  )", "user": "560a9d30e4b05f002753defe"}, {"problem": 22, "code": "#(.size (seq %))", "user": "560b6895e4b05f002753df1a"}, {"problem": 22, "code": "(fn rec [xs]\n  (if (empty? xs) 0 (+ 1 (rec (rest xs)))\n   \n  )\n)", "user": "560c31b4e4b05f002753df2d"}, {"problem": 22, "code": "(fn [coll]\n  (reduce (fn [a _] (inc a)) 0 coll))", "user": "560c2e7ce4b05f002753df2b"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "560d2a2be4b05f002753df35"}, {"problem": 22, "code": "(fn [lst]\n  (loop [i lst cnt 0]\n   (cond (empty? i) cnt\n     :t (recur (rest i)(inc cnt)))))", "user": "560d2b79e4b05f002753df38"}, {"problem": 22, "code": "#(loop [i 0 s %] (if(empty? s) i (recur (inc i) (rest s))))", "user": "560d2b53e4b05f002753df37"}, {"problem": 22, "code": "#(loop [result 0 c %] (if (empty? c) result (recur (inc result) (rest c))))", "user": "560d2a8de4b05f002753df36"}, {"problem": 22, "code": "(fn count' [xs] (if (empty? xs) 0 (inc (count' (next xs)))))", "user": "5602f72fe4b04bb52996e1ae"}, {"problem": 22, "code": "(fn[s](reduce + (map(fn[x]1)s)))", "user": "560d491ae4b05f002753df3b"}, {"problem": 22, "code": "(fn [x] (reduce + (map (fn [y] 1) x)))", "user": "560c3917e4b05f002753df2f"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "560aed59e4b05f002753df11"}, {"problem": 22, "code": "#(reduce (fn [l r] (inc l)) 0 %)", "user": "560d98cee4b05f002753df43"}, {"problem": 22, "code": "#(.size (vec %))", "user": "560e228ce4b05f002753df49"}, {"problem": 22, "code": ";(fn [coll]\n;  (loop [remaining coll \n;         cnt 0]\n;    (if (empty? remaining)\n;      cnt\n;      (recur (rest remaining) (inc cnt)))))\n\n(fn [coll] (reduce (fn [cnt sequ] (inc cnt)) 0 coll))\n; this is so smart. it's adereth's solution", "user": "560dfa8de4b05f002753df46"}, {"problem": 22, "code": "#(loop [i 0 l %]\n   (if (= l '())\n     i\n     (recur (+ i 1) (rest l))))", "user": "560e685be4b05f002753df4e"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "55f3bb12e4b06e875b46ce64"}, {"problem": 22, "code": "(fn count2 [collection]\n  (cond\n    (empty? collection) 0\n    :else (+ 1 (count2 (rest collection)))\n    )\n)", "user": "560c404fe4b05f002753df30"}, {"problem": 22, "code": "(fn [x] (reduce + (map (fn [_] 1) x)))", "user": "533975f0e4b0e30313ee6ca9"}, {"problem": 22, "code": "(fn [xs] (reduce (fn [acc _] (inc acc)) 0 xs))", "user": "560e9a2de4b05f002753df52"}, {"problem": 22, "code": "#(reduce (fn [x _] (inc x)) 0 %)", "user": "560facdbe4b05f002753df5f"}, {"problem": 22, "code": "(fn [coll]\n  (loop [remaining coll len 0]\n   (if (empty? remaining)\n     len\n     (recur (rest remaining) (inc len)))))", "user": "560fe558e4b05f002753df63"}, {"problem": 22, "code": "(partial reduce (fn [acc _] (+ 1 acc)) 0)", "user": "560ff209e4b05f002753df65"}, {"problem": 22, "code": "#(reduce (fn [sum item] (+ sum 1)) 0 %)", "user": "560b483ee4b05f002753df16"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "560d4994e4b05f002753df3c"}, {"problem": 22, "code": "(fn [list] (reduce (fn [counter _] (inc counter)) 0  list))", "user": "560d7863e4b05f002753df40"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5610eda6e4b05f002753df78"}, {"problem": 22, "code": "(fn [c] \n  (loop [n 0 \n         coll c] \n    (if (empty? coll) \n      n \n      (recur (inc n) (rest coll)))))", "user": "561047eae4b05f002753df6d"}, {"problem": 22, "code": "(partial (fn [n xs] (if (empty? xs) n (recur (+ n 1) (rest xs)))) 0)", "user": "53ab1ef6e4b047364c04444b"}, {"problem": 22, "code": "#(loop [accum 0 iterator %]\n  (if(empty? iterator) accum\n  (recur (inc accum) (rest iterator))))", "user": "560ec0b7e4b05f002753df56"}, {"problem": 22, "code": "reduce (fn [x y](inc x)) 0", "user": "55f9d870e4b03cbcff9738cc"}, {"problem": 22, "code": "(fn [col]\n  (reduce (fn [x y] (inc x)) 0 col))", "user": "5611510ce4b05f002753df7d"}, {"problem": 22, "code": "reduce (fn [x _] (+ 1 x)) 0", "user": "561039e0e4b05f002753df6c"}, {"problem": 22, "code": "#(apply + (map (constantly 1) %))", "user": "4db396c7535df7e46ed9b6cf"}, {"problem": 22, "code": "(fn [x] (alength (to-array x)))", "user": "5611b7d7e4b05f002753df85"}, {"problem": 22, "code": "(fn [s] ((fn f [s a] (if (= s ()) a (f (rest s) (+ a 1)))) s 0))", "user": "561223e5e4b05f002753df8b"}, {"problem": 22, "code": "#(reduce (fn [cnt _] (inc cnt)) 0 %)", "user": "56041883e4b0c80df0ca2655"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "56126d71e4b05f002753df90"}, {"problem": 22, "code": "(fn [coll] (reduce + (map (constantly 1) coll)))", "user": "5611196fe4b05f002753df7a"}, {"problem": 22, "code": "(fn [arr] (reduce (fn [acc _] (inc acc)) 0 arr))", "user": "55ad1221e4b03311e7b7329d"}, {"problem": 22, "code": "(fn foo\n   ([seq]\n      (if (not (nil? (first seq)))\n        (foo seq 0) 0))\n   ([seq cum]\n      (if (not (empty? (rest seq))) \n        (foo (rest seq) (inc cum)) (inc cum) ))\n   )", "user": "560fec6ae4b05f002753df64"}, {"problem": 22, "code": "#(reduce (fn [acc _] (+ acc 1)) 0 %)", "user": "560ee566e4b05f002753df57"}, {"problem": 22, "code": "#(reduce + (map (fn[x] 1) %))", "user": "56119b53e4b05f002753df81"}, {"problem": 22, "code": "(fn [x] (last (map-indexed (fn [i u] (+ i 1)) x)))", "user": "560b953ce4b05f002753df1e"}, {"problem": 22, "code": "(fn [sequ]\n  (loop [s sequ, c 0]\n    (if (not-empty s)\n      (recur (rest s) (inc c))\n      c)))", "user": "55796743e4b05c286339e095"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5613a96ae4b05f002753dfa4"}, {"problem": 22, "code": "(fn [col]\n    (loop [mycol col\n           counter 0]\n          (if (nil? (seq mycol))\n            (do (println mycol) counter)\n            (recur (rest mycol) (+ counter 1)))))", "user": "54aede47e4b09f271ff37cfd"}, {"problem": 22, "code": "(fn [coll]\n  (reduce + (map (fn [x] 1) coll)))", "user": "550b1c2ce4b06e50f9beb13b"}, {"problem": 22, "code": "(fn my-count [seq] (reduce (fn [acc next-value] (inc acc)) 0 seq) )", "user": "55efdc97e4b066087aa94542"}, {"problem": 22, "code": "(fn [coll]\n  (loop [head (first coll)\n         tail (rest coll)\n         number 0]\n    (if (nil? head)\n      number\n      (recur (first tail) (rest tail) (+ number 1)))))", "user": "520e6d77e4b0101e4be6fcd5"}, {"problem": 22, "code": "(fn[se] (reduce (fn[c _] (inc c)) 0 se))", "user": "560f9b99e4b05f002753df5e"}, {"problem": 22, "code": "(fn [x] (reduce + (map (fn [y] 1)x)))", "user": "5614fa1de4b05f002753dfbe"}, {"problem": 22, "code": "(fn [lis]\n  (loop [sum 0\n         remaining lis]\n    (if (empty? remaining)\n      sum\n      (recur (+ 1 sum)\n             (rest remaining)))))", "user": "53c6dcf9e4b00fb29b2212a3"}, {"problem": 22, "code": "(fn [x] (loop [n x i 0] \n          (if (empty? n)\n            i\n          (recur (rest n) (inc i)))))", "user": "5615326de4b05f002753dfc3"}, {"problem": 22, "code": "(fn [l]\n  (loop [i 0\n         c l]\n    (if (empty? c)\n      i\n      (recur (inc i)\n             (rest c)))))", "user": "56156feee4b05f002753dfc5"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "52c7c40be4b0c2d177d62125"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5614847ae4b05f002753dfb7"}, {"problem": 22, "code": "(fn [coll] (reduce (fn [n _] (inc n)) 0 coll))", "user": "5578f292e4b05c286339e08f"}, {"problem": 22, "code": "(fn [xs] (reduce + (map (fn [x] 1) xs)))", "user": "56129991e4b05f002753df94"}, {"problem": 22, "code": "reduce (fn [current soFar] (inc current)) 0", "user": "56153b39e4b05f002753dfc4"}, {"problem": 22, "code": "(fn [coll]\n  ((fn [coll n_elem]\n     (if (empty? coll) \n       n_elem \n       (recur (next coll) (inc n_elem)))) \n   coll 0))", "user": "56163cc1e4b06b1bb21829ff"}, {"problem": 22, "code": "(fn [s] (apply + (map (fn [_] 1) s)))", "user": "56157190e4b05f002753dfc6"}, {"problem": 22, "code": "#(loop [lst % cnt 0] (if (empty? lst) cnt (recur (rest lst) (inc cnt))))", "user": "5615fd5de4b06b1bb21829fd"}, {"problem": 22, "code": "(fn [lista]\n  (reduce + (map (fn [x] 1) lista)))", "user": "560ff632e4b05f002753df66"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5616f411e4b06b1bb2182a0a"}, {"problem": 22, "code": "#(reduce (fn [r _] (inc r)) 0 %)", "user": "56171eade4b06b1bb2182a0c"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "56171192e4b06b1bb2182a0b"}, {"problem": 22, "code": "(fn [coll]\n  (loop [xcoll coll\n         acc 0]\n    (if (empty? xcoll)\n      acc\n      (recur (next xcoll) (inc acc)))))", "user": "56038f34e4b04bb52996e1bc"}, {"problem": 22, "code": "(fn [coll]\n  (loop [acc 0, coll coll]\n    (if (seq coll)\n      (recur (inc acc) (rest coll))\n      acc)))", "user": "560ae7e6e4b05f002753df0e"}, {"problem": 22, "code": "reduce (fn [acc, _] (inc acc)) 0", "user": "5617a540e4b06b1bb2182a12"}, {"problem": 22, "code": "#(alength (to-array %))", "user": "5617b1c0e4b06b1bb2182a13"}, {"problem": 22, "code": "(fn tally [y] (if (empty? y) 0 (+ 1 (tally (drop-last y)))))", "user": "56152a26e4b05f002753dfc1"}, {"problem": 22, "code": "#(reduce + (map (fn [_] 1) %))", "user": "5617db88e4b06b1bb2182a16"}, {"problem": 22, "code": ";(fn h [k]\n;  (if (empty? k)\n;    0\n;    (inc (h (rest k)))))\n\n#(apply + (map (fn [_ x] (identity x)) % (repeat 1)))", "user": "55bf6dbce4b01b9910ae2a12"}, {"problem": 22, "code": "(fn my-count\n  [coll]\n  (loop [n 0\n         coll coll]\n    (if (seq coll)\n      (recur (inc n) (rest coll))\n      n)))", "user": "56180d83e4b06b1bb2182a18"}, {"problem": 22, "code": "reduce (fn [a item] (inc a)) 0", "user": "4f5e5975e4b0030a34fb2b4d"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "561053a3e4b05f002753df70"}, {"problem": 22, "code": "#(reduce (fn [c x] (inc c)) 0 %)", "user": "55fbfc65e4b0f488688e066d"}, {"problem": 22, "code": "(fn [l] (reduce (fn [a i] (inc a)) 0 l))", "user": "53286f84e4b09d4e7a9b5505"}, {"problem": 22, "code": "(fn [s]\n  (loop [restSeq s\n         c 0]\n    (if (= restSeq '())\n      c\n      (recur (rest restSeq) (inc c))\n    )\n  )\n)", "user": "56195e57e4b053970a773af6"}, {"problem": 22, "code": "#(reduce (fn [x _] (inc x)) 0 %)", "user": "52dda39fe4b09f7907dd13e7"}, {"problem": 22, "code": "(fn [myseq] (loop [loopseq myseq n 0] (if (empty? loopseq) n (recur (rest loopseq) (inc n)))))", "user": "56197b47e4b053970a773af8"}, {"problem": 22, "code": "(fn county  [ data ]\n  (loop [ subset data\n          cnt 0]\n    (if (empty? subset)\n      cnt\n      (recur (rest subset) (inc cnt)))))", "user": "5610d39de4b05f002753df75"}, {"problem": 22, "code": "(fn counts [s]\n  (loop [s s\n          n 0]\n    (if (empty? s)\n      n\n      (recur (rest s) (inc n)))))", "user": "5619a4d0e4b053970a773afd"}, {"problem": 22, "code": "(fn [xs]\n  (letfn [(mycount [items n]\n                   (if (empty? items) n \n                     (recur (rest items) (inc n))))]\n    (mycount xs 0)))", "user": "5619cd91e4b053970a773aff"}, {"problem": 22, "code": "#(alength (to-array %))", "user": "55e64c1ee4b050e68259b486"}, {"problem": 22, "code": "(fn [x] (reduce (fn [a b] (+ a 1)) 0 x))", "user": "561a4c60e4b053970a773b06"}, {"problem": 22, "code": "(fn [S] (loop [xs S n 0] (if (empty? xs) n (recur (rest xs) (inc n)))))", "user": "55f6fe09e4b06e875b46cea2"}, {"problem": 22, "code": "(fn [xs] (reduce + (map (constantly 1) xs)))", "user": "55e3924ae4b050e68259b445"}, {"problem": 22, "code": "(fn [coll] (reduce + (map (constantly 1) coll)))", "user": "561a9e3be4b053970a773b09"}, {"problem": 22, "code": "#(loop [li %\n        le 0]\n   (if (not (seq li)) le\n     (recur (rest li) (+ le 1))))", "user": "561b04e8e4b053970a773b0f"}, {"problem": 22, "code": "(fn cnt [s] (if (empty? s) 0 (inc(cnt (rest s)))))", "user": "561a4769e4b053970a773b05"}, {"problem": 22, "code": "(fn [s] (reduce + (map (fn [s] 1) s)))", "user": "561ba3e5e4b073c65b0ce3eb"}, {"problem": 22, "code": "(fn [seq]\n  (loop [acc 0\n         seq seq]\n  (if (empty? seq)\n      acc\n      (recur (inc acc) (rest seq)))))", "user": "56002c2de4b04bb52996e161"}, {"problem": 22, "code": "(fn [a-seq]\n  (loop [s a-seq n 0]\n    (if (empty? s)\n      n\n      (recur (rest s) (inc n)))))", "user": "5521248fe4b08d5046aa8a69"}, {"problem": 22, "code": "(fn[coll] (loop [t 0, c coll] (if (empty? c) t (recur (+ t 1), (rest c)))))", "user": "5537b2c7e4b09218d5f44fce"}, {"problem": 22, "code": "(fn [a]\n  (reduce\n    (fn [b c]\n      (inc b)\n     )\n  0 a)\n)", "user": "561bc8e3e4b064ca9f4b1689"}, {"problem": 22, "code": "(fn [a]\n  (reduce \n   (fn [b c]\n     (inc b)\n     )\n   0 a)\n  )", "user": "561bc8c8e4b064ca9f4b1688"}, {"problem": 22, "code": "(fn counter [ls]\n  (if (= [] (rest ls))\n    (+ 0 1)\n    (+ 1 (counter (rest ls)))))", "user": "561bcf94e4b064ca9f4b168a"}, {"problem": 22, "code": "(fn [coll]\n  (loop [coll coll n 0]\n    (if (empty? coll)\n      n\n      (recur (rest coll) (inc n)))))", "user": "561a9380e4b053970a773b07"}, {"problem": 22, "code": "(fn [lat]\n  (reduce (fn [x y] (+ x 1)) 0 lat))", "user": "56197c99e4b053970a773af9"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "561a060ee4b053970a773b01"}, {"problem": 22, "code": "(fn seq-ct [[first & rest]]\n  (if (not= first nil)\n    (+ 1 (seq-ct rest))\n    0))", "user": "561bb8dbe4b064ca9f4b1686"}, {"problem": 22, "code": "reduce (fn [x y] (+ x 1)) 0", "user": "55f27d95e4b06e875b46ce47"}, {"problem": 22, "code": "(fn mycount [x] ((fn recursive_count [_sequence acc] (if (empty? _sequence) acc (recursive_count (rest _sequence) (+ acc 1)))) x 0))", "user": "561c57b9e4b064ca9f4b1697"}, {"problem": 22, "code": "#(reduce (fn [n v] (inc n)) 0 %1)", "user": "561c0278e4b064ca9f4b1691"}, {"problem": 22, "code": "#(loop [c % i 0] (cond (empty? c) i\n                         :else (recur (next c) (+ i 1))))", "user": "4fec0824e4b0681fd128dc9c"}, {"problem": 22, "code": "(fn [coll] (apply + (map (fn [x] 1) coll)))", "user": "561ca2eae4b064ca9f4b169b"}, {"problem": 22, "code": "(fn ms-count\n  ([coll] (if (first coll) (ms-count coll 1) 0))\n  ([coll acc]\n   (if-let [x (next coll)] (recur x  (inc acc)) acc)\n   ))", "user": "561ca6ebe4b064ca9f4b169c"}, {"problem": 22, "code": "#(loop [[first & rest] %1\n        cur 0]\n   (if first\n     (recur rest (inc cur))\n     cur))", "user": "56175cf9e4b06b1bb2182a0f"}, {"problem": 22, "code": "(fn [x] (loop [input x cnt 0] (if (= (rest input) ()) \n                                (inc cnt)\n                                (recur (rest input) (inc cnt) ))))", "user": "5616c78ee4b06b1bb2182a07"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "561bf12ce4b064ca9f4b168e"}, {"problem": 22, "code": "#(loop [return 0 x %]\n   (if (empty? x)\n     return\n     (recur (inc return) (rest x))))", "user": "561d95eee4b064ca9f4b16b3"}, {"problem": 22, "code": "(fn red4 \n\t([sq] \n\t\t(red4 0 sq))\n\t([acc sq] \n\t\t(if (seq sq)\n\t\t\t(red4 (inc acc) (rest sq))\n\t\t\tacc)))", "user": "4f1b73a9535d64f60314647a"}, {"problem": 22, "code": "(fn foo [s] \n  (if (= '() s)\n    0\n   (+ 1 (foo (rest s)))))", "user": "561d506ee4b064ca9f4b16aa"}, {"problem": 22, "code": "reduce (fn [acc ele] (inc acc)) 0", "user": "561d8936e4b064ca9f4b16b2"}, {"problem": 22, "code": "(fn [coll]\n  (loop [acc 0 [x & xs] coll]\n    (if xs\n      (recur (inc acc) xs)\n      (inc acc))))", "user": "561cb6cfe4b064ca9f4b169e"}, {"problem": 22, "code": "(fn [q] (loop[x 0 y q] (if (= (empty? y) false) (recur (inc x)(drop-last y)) x)))", "user": "561be724e4b064ca9f4b168c"}, {"problem": 22, "code": "(fn [x] (loop [coll x n 0] (if (empty? coll) n (recur (drop 1 coll) (inc n)))))", "user": "561e2b33e4b064ca9f4b16ba"}, {"problem": 22, "code": "(fn [x] (loop [xx [x 0]] (if (not-empty (first xx)) (recur [(rest (first xx)) (inc (last xx))]) (last xx))))", "user": "561ccfb4e4b064ca9f4b169f"}, {"problem": 22, "code": "#((fn [x c] (let [_ (println x) _ (println \"c=\" c) ](if (not (empty? x)) (recur (rest x) (inc c)) c))) % 0)", "user": "561cad18e4b064ca9f4b169d"}, {"problem": 22, "code": "(fn [s] (+ 1 (first (seq (last (map-indexed vector s))))))", "user": "560a7591e4b05f002753def8"}, {"problem": 22, "code": "#(reduce (fn [a b] (inc a)) 0 %)", "user": "561ea5cae4b064ca9f4b16c4"}, {"problem": 22, "code": "(fn [xs] \n  (loop [xxs xs \n         c 0]\n    (if (empty? xxs)\n      c\n      (recur (rest xxs) (inc c)))))", "user": "561aab66e4b053970a773b0a"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "561e9e67e4b064ca9f4b16c2"}, {"problem": 22, "code": "(fn counter\n  ([sequ] (counter sequ 0))\n  ([sequ accumulating-total]\n   (if (empty? sequ)\n     accumulating-total\n     (counter (rest sequ) (+ 1 accumulating-total)))))", "user": "561eb644e4b064ca9f4b16c6"}, {"problem": 22, "code": "(fn [list]\n((fn [list, n]\n  (if (empty? list)\n    n\n    (recur (rest list) (inc n)))) list 0))", "user": "561f9110e4b064ca9f4b16ce"}, {"problem": 22, "code": "#(loop[l %, r 0]\n   (if (nil? l)\n     r\n     (recur (next l) (inc r))))", "user": "560aa0cae4b05f002753deff"}, {"problem": 22, "code": "(fn mycnt [x] (if (seq x) (+ (mycnt (next x)) 1) 0))", "user": "561fc0cee4b064ca9f4b16d1"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "561ff621e4b064ca9f4b16d6"}, {"problem": 22, "code": "(fn [x] (reduce + (map (constantly 1) x)))", "user": "56202553e4b064ca9f4b16dd"}, {"problem": 22, "code": "(fn length [s] (if (first s) (+ 1 (length (rest s))) 0))", "user": "56205609e4b064ca9f4b16df"}, {"problem": 22, "code": "(fn [x] (reduce (fn [c _] (inc c)) 0 x))", "user": "5620d09ce4b064ca9f4b16e3"}, {"problem": 22, "code": "#(loop [n 0 c %]\n   (if (next c)\n     (recur (inc n) (next c))\n     (inc n)))", "user": "561a1af6e4b053970a773b02"}, {"problem": 22, "code": "(fn my-count[xn] (loop[xn xn n 0] (if (empty? xn) n (recur (rest xn) (inc n)))))", "user": "562110f6e4b064ca9f4b16ec"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "522a5bdde4b0590a43906cf8"}, {"problem": 22, "code": "(fn [s] (loop [len 0 seq s] (if (empty? seq) len (recur (inc len) (rest seq)))))", "user": "561d23e3e4b064ca9f4b16a5"}, {"problem": 22, "code": "(fn my_count [lst]\n  (if (empty? lst)\n    0\n    (+ 1 (my_count (rest lst)))))", "user": "55a21f1ce4b0acc240e3151f"}, {"problem": 22, "code": "(fn [s] (loop [ss s ll 0]\n          (if (empty? ss)\n            ll\n            (recur (rest ss) (inc ll)))))", "user": "56102f50e4b05f002753df6b"}, {"problem": 22, "code": "#(reduce (fn [p1 p2] (inc p1)) 0 %)", "user": "56228d00e4b03f08ee9a9227"}, {"problem": 22, "code": "(fn c [s]\n  (reduce #(+ %1 (if %2 1)) 0 s))", "user": "561eb82fe4b064ca9f4b16c7"}, {"problem": 22, "code": "#(loop [n 0 l %1] (if (empty? l) n (recur (inc n) (rest l))))", "user": "52c48ec6e4b0c2d177d620dd"}, {"problem": 22, "code": "#(reduce (fn [x y] (+ x 1)) 0 %)", "user": "5622f21fe4b03f08ee9a922e"}, {"problem": 22, "code": "(fn [coll]\n  (reduce (fn [c _] (inc c)) 0 coll))", "user": "54d000c7e4b018d918be98d7"}, {"problem": 22, "code": "#(loop [result 0 c %]\n   (if (empty? c) result\n   (recur (inc result) (rest c))))", "user": "55244318e4b0882d96d091be"}, {"problem": 22, "code": "(fn [x] (inc (.lastIndexOf (seq x) (last (seq x)))))", "user": "562473ece4b0b951f963fc25"}, {"problem": 22, "code": "(fn [coll]\n  (loop [coll coll\n         n    0]\n    (cond\n      (empty? coll) n\n      :else (recur (rest coll) (inc n)))))", "user": "5600dccee4b04bb52996e175"}, {"problem": 22, "code": "(fn count-seq [xs]\n  (reduce (fn [sum _] (inc sum)) 0 xs))", "user": "56244b3ae4b0b951f963fc22"}, {"problem": 22, "code": "(fn contando [list]\n  (if (= list [])\n    0\n    (inc (contando (rest list)))))", "user": "51a0370ae4b0b292b01ee3ef"}, {"problem": 22, "code": "#(reduce +(map(fn[x] 1) %))", "user": "56188848e4b053970a773aea"}, {"problem": 22, "code": "(fn [lat]\n  (reduce (fn [x y] (+ x 1)) 0 lat))", "user": "55f1c4b4e4b06e875b46ce35"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "55f4b88be4b06e875b46ce80"}, {"problem": 22, "code": "(fn [x] (alength (to-array x)))", "user": "562573d0e4b00a550fc90298"}, {"problem": 22, "code": "(fn [col]\n  (reduce (fn [a b] (inc a)) 0 col))", "user": "55b1d0b5e4b0da326a65cf73"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 (seq %))", "user": "5625563ee4b00a550fc90296"}, {"problem": 22, "code": "(fn [l] \n\t((fn counted  [l n] \n\t\t(if (seq l) (counted (rest l) (+ 1 n)) n)) l 0))", "user": "5626447fe4b00e49c7cb47bd"}, {"problem": 22, "code": "(fn cnt \n  \t[s]\n  \t(if (seq s)\n\t  \t(+ 1 (cnt (rest s)))\n      \t0))", "user": "56263f3fe4b00e49c7cb47bc"}, {"problem": 22, "code": "(fn [l] \n  (loop [cnt 0 li l]\n    (if (empty? li)\n        cnt \n      (recur (inc cnt) (rest li)))))", "user": "561974f9e4b053970a773af7"}, {"problem": 22, "code": "(fn [l] (reduce (fn [x a] (inc x)) 0 l))", "user": "561c0e9be4b064ca9f4b1692"}, {"problem": 22, "code": "(fn [s] (loop  [ s s accum 0](if (empty? s) accum (recur(rest s)(+ accum 1)))))", "user": "562326cbe4b03f08ee9a9230"}, {"problem": 22, "code": "#(apply + (map (constantly 1) %))", "user": "56131f9fe4b05f002753df9f"}, {"problem": 22, "code": "(fn c [x] (if (empty? x) 0 (+ 1 (c (drop 1 x)))))", "user": "5624b2aee4b00a550fc90285"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "5624a374e4b00a550fc90283"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "5624b34be4b00a550fc90286"}, {"problem": 22, "code": "(fn [sequence]\n  (reduce\n   (fn [accum val]\n     (inc accum))\n   0\n   sequence))", "user": "56277b32e4b00e49c7cb47d1"}, {"problem": 22, "code": "(fn [coll] \n  (reduce \n   (fn [n m] (inc n)) \n   0 \n   coll))", "user": "561a2940e4b053970a773b04"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5627d09ce4b00e49c7cb47db"}, {"problem": 22, "code": "(fn[li]\n (reduce (fn[n x](inc n)) 0 li))", "user": "5627444fe4b00e49c7cb47cd"}, {"problem": 22, "code": "#(reduce (fn [acc in] \n          (inc acc)) 0 %)", "user": "546b24a0e4b00cfc9eacc166"}, {"problem": 22, "code": "(fn [s]\n  (loop [x s\n         size 0]\n    (if (not (seq x))\n      size\n      (recur (rest x) (+ size 1)))))", "user": "55cc4492e4b0e31453f64a0e"}, {"problem": 22, "code": "(fn [col]\n((fn inn [col n]\n (if (first col)\n (recur (rest col) (+ n 1))\n n))\n  col 0))", "user": "562807dfe4b00e49c7cb47dd"}, {"problem": 22, "code": "#(apply + (vals (frequencies %)))", "user": "562528d4e4b00a550fc90292"}, {"problem": 22, "code": "#(loop [i % c 0] (if (empty? i) c (recur (rest i) (inc c))) )", "user": "5628cb07e4b00e49c7cb47ef"}, {"problem": 22, "code": "(fn cnt [c] (if (= c '()) 0 (+ 1 (cnt (rest c)))))", "user": "561e8b11e4b064ca9f4b16c0"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5628fda8e4b00e49c7cb47f7"}, {"problem": 22, "code": "(fn [x] (+ 1 (last (interleave x (range)))))", "user": "5629a207e4b00e49c7cb480f"}, {"problem": 22, "code": "(fn [coll]\n  (reduce + (map (constantly 1) coll)))", "user": "5629dfaae4b00e49c7cb4813"}, {"problem": 22, "code": "#(reduce (fn [x y] (+ x 1)) 0 %1)", "user": "56289a87e4b00e49c7cb47eb"}, {"problem": 22, "code": "#(reduce (fn[ctr coll] (inc ctr)) 0 %)", "user": "561d7246e4b064ca9f4b16b1"}, {"problem": 22, "code": "(fn [s] (loop [r s i 0] (if (empty? r) i (recur (rest r) (inc i)))))", "user": "5614ebc5e4b05f002753dfbc"}, {"problem": 22, "code": "(fn [coll]\n  (reduce (fn [num1 num2] (inc num1)) 0 coll))", "user": "561fc0d0e4b064ca9f4b16d2"}, {"problem": 22, "code": "(fn [col] (.length (vec col)))", "user": "5619b22ee4b053970a773afe"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "56215c8ee4b03f08ee9a921a"}, {"problem": 22, "code": "(fn [xs] \n  (reduce (fn [acc _] (inc acc)) 0 (seq xs)))", "user": "562ace2ce4b00e49c7cb4830"}, {"problem": 22, "code": "(fn [c] (loop [coll c acc 0] (if (empty? coll) acc (recur (drop 1 coll) (inc acc)))))", "user": "562ab73ce4b00e49c7cb482e"}, {"problem": 22, "code": ";; (fn [s] (reduce + (map (constantly 1) s)))\n\n;; #(reduce + (map (constantly 1) %))\n\n#(reduce (fn [x _] (+ 1 x)) 0 %)", "user": "562ae733e4b00e49c7cb4836"}, {"problem": 22, "code": "#(loop [ind 0 xs %1]\n  (if (empty? xs) ind\n  (recur (inc ind) (rest xs))))", "user": "56272be6e4b00e49c7cb47c9"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "562b57c7e4b058fa18c5a6cc"}, {"problem": 22, "code": "(fn \n  [items]\n  (reduce (fn [memo other] (inc memo)) 0 items))", "user": "55c5bdffe4b0e31453f649b6"}, {"problem": 22, "code": "#(loop [i 0 col %]\n   (if (empty? col)\n     i\n     (recur (inc i) (rest col))))", "user": "562bb236e4b058fa18c5a6ce"}, {"problem": 22, "code": "(fn len [[x & xs]] (if (empty? xs) 1 (+ (len xs) 1)))", "user": "562bbacee4b058fa18c5a6d0"}, {"problem": 22, "code": "(fn [x] (loop [n 0 r x] (if (seq r) (recur (inc n) (rest r)) n)))", "user": "562b1a7be4b058fa18c5a6cb"}, {"problem": 22, "code": "#(reduce (fn [x _] (inc x)) 0 %)", "user": "562bfba5e4b058fa18c5a6d2"}, {"problem": 22, "code": "(fn [coll] (reduce (fn [x y] (inc x)) 0 coll))", "user": "562c15d3e4b058fa18c5a6d5"}, {"problem": 22, "code": "#(loop [data %\n        number 0]\n   (if (empty? data) \n\t\tnumber\n     \t(recur (rest data) (inc number)) \n     ))", "user": "561f27a1e4b064ca9f4b16ca"}, {"problem": 22, "code": "(fn hitung [n]\n  (if (= n []) 0\n    (+ 1 (hitung (rest n)))))", "user": "56278266e4b00e49c7cb47d3"}, {"problem": 22, "code": "(fn [coll] (reduce (fn [a b] (inc a)) 0 coll))", "user": "55ed1575e4b0121d4835fdd3"}, {"problem": 22, "code": "#(reduce (fn[x y] (inc x)) 0  %)", "user": "56282cdde4b00e49c7cb47e2"}, {"problem": 22, "code": "#(reduce (fn [x _] (inc x)) 0 %)", "user": "55577fcce4b0deb715856e24"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "56083383e4b046a4fc0ac00a"}, {"problem": 22, "code": "(partial reduce \n         (fn [c _] (+ c 1)) \n         0)", "user": "562cd94ee4b0a45d2ff83015"}, {"problem": 22, "code": "(fn c [l] (if (empty? l)\n              0\n              (+ 1 (c (rest l)))))", "user": "562b8613e4b058fa18c5a6cd"}, {"problem": 22, "code": "reduce (fn [a b] (inc a)) 0", "user": "504f0c9ce4b0e7ad84dbc4b2"}, {"problem": 22, "code": "reduce (fn [a _] (inc a)) 0", "user": "4f0366b0535dcb61093f6aa9"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "562d1e36e4b0a45d2ff8301a"}, {"problem": 22, "code": "(fn [xs] (reduce (fn [c ys] (inc c)) 0 xs))", "user": "562c0e2ae4b058fa18c5a6d4"}, {"problem": 22, "code": "#(reduce(fn [ a x ] \n        (inc a)\n         ) (cons  0 %))", "user": "54494159e4b032a45b8693d1"}, {"problem": 22, "code": "(fn func [x coll] (if (seq coll) (recur (inc x) (rest coll)) x)) 0", "user": "520a6aace4b01da9d47a99d9"}, {"problem": 22, "code": "(fn [thelist]\n  (loop [mylist thelist counter 0]\n    (if (empty? mylist) counter\n      (recur (rest mylist) (inc counter))\n    )\n  )\n)", "user": "562d6385e4b0a45d2ff8301b"}, {"problem": 22, "code": "reduce (fn [x y] (+ 1 x)) 0", "user": "562add6de4b00e49c7cb4834"}, {"problem": 22, "code": "(fn [l] (\n         reduce (\n                 fn [sum _] (\n                             inc sum\n                             ))\n                 0 l)\n        \n  )", "user": "5628a121e4b00e49c7cb47ed"}, {"problem": 22, "code": "(fn [coll]\n  (loop [i 0, coll coll]\n    (if (empty? coll)\n      i\n      (recur (inc i) (rest coll)))))", "user": "562db4d1e4b0a45d2ff83021"}, {"problem": 22, "code": "(fn my-count [s]\n  (if (= (rest s) '())\n    1\n    (+ 1 (my-count (rest s)))))", "user": "562e05e0e4b0a45d2ff83023"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "562df3cae4b0a45d2ff83022"}, {"problem": 22, "code": "(fn [coll]\n  (loop [coll coll res 0]\n    (if (next coll)\n      (recur (next coll) (inc res))\n      (inc res))))", "user": "562cb7cfe4b0a45d2ff83009"}, {"problem": 22, "code": "(fn countalt\n  [items]\n  (reduce (fn [one two]       \n            (inc one))  \n          0\n          items))", "user": "562e2c5ce4b0a45d2ff83024"}, {"problem": 22, "code": "(fn sequencia [n]\n  (reduce (fn [sum _] (+ 1 sum)) 0 n))", "user": "562eafbce4b0ab312c17ebbe"}, {"problem": 22, "code": "(fn [s] (reduce (fn [a _] (+ a 1)) 0 s))", "user": "551e6526e4b030e6a24d00e8"}, {"problem": 22, "code": "#(inc (get (last (map-indexed vector %)) 0))", "user": "5629de63e4b00e49c7cb4812"}, {"problem": 22, "code": "(fn [seqs]\n  (loop [ss seqs idx 0]\n    (if (= ss `())\n      idx\n      (recur (rest ss) (inc idx)))))", "user": "56288ccae4b00e49c7cb47ea"}, {"problem": 22, "code": "#(reduce (fn [a b] (inc a)) 0 %)", "user": "562e8b2be4b0ab312c17ebbb"}, {"problem": 22, "code": "#(reduce + (map (fn [_] 1) %))", "user": "562e9f5fe4b0ab312c17ebbd"}, {"problem": 22, "code": "(fn\n  [coll]\n  (loop [i 0 \n         c coll]\n    (if c\n      (recur (inc i) (next c))\n      i)))", "user": "562f9f5ae4b0ab312c17ebce"}, {"problem": 22, "code": "(fn [s]\n  (reduce (fn [acc _] (+ acc 1)) 0 s)\n  )", "user": "562fd7f6e4b0ab312c17ebe0"}, {"problem": 22, "code": "#(reduce (fn [acc _] (inc acc)) 0 % )", "user": "54c9e295e4b045293a27f684"}, {"problem": 22, "code": "(fn my-count \n  ([coll]\n    (my-count (rest coll) 1))\n  ([coll total]\n   \t(if (nil? (first coll))\n      total\n      (recur (rest coll) (inc total)))))", "user": "562d15a6e4b0a45d2ff83019"}, {"problem": 22, "code": "(fn\n  [s]\n  (->> s\n       (map (fn [x] 1))\n       (reduce + 0)))", "user": "562fb774e4b0ab312c17ebd9"}, {"problem": 22, "code": "(fn [value](cond\n (= (type value) (type \"abc\"))\n   (.length value)\n (= (type value) (type '(1 2 3)))\n   (.size value)\n (= (type value) (type [1 2]))\n   (.size value)))", "user": "562814dce4b00e49c7cb47de"}, {"problem": 22, "code": "reduce (fn[c x](+ 1 c)) 0", "user": "562f2985e4b0ab312c17ebc5"}, {"problem": 22, "code": "#(reduce (\n          fn [x _] \n           (inc x)) \n         0 %)", "user": "5630a51de4b0bfe05bf11781"}, {"problem": 22, "code": "(fn [coll]\n  (loop [coll coll\n         acc 0]\n    (if (not (seq coll))\n      acc\n      (recur (rest coll) (inc acc)))))", "user": "5630ce72e4b0bfe05bf11786"}, {"problem": 22, "code": "(fn [e] (reduce (fn [a b] (+ a 1)) 0 e))", "user": "56308326e4b073c1cf7a9be9"}, {"problem": 22, "code": "#(reduce (fn [a b] (+ a 1)) 0 %)", "user": "535558b9e4b04ce2eb3ed25a"}, {"problem": 22, "code": "#(reduce (fn [a, b] (inc a)) 0 %)", "user": "562117b4e4b064ca9f4b16ed"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "5631040be4b0bfe05bf1178c"}, {"problem": 22, "code": "(fn [coll] (reduce (fn [n _] (inc n)) 0 coll))", "user": "5619a388e4b053970a773afc"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "56313ff1e4b0bfe05bf1178f"}, {"problem": 22, "code": "#(loop [cnt 0 curList %]\n   (if(empty? curList)\n     cnt\n     (recur (inc cnt) (rest curList))))", "user": "56314595e4b0bfe05bf11790"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5630fd6fe4b0bfe05bf1178b"}, {"problem": 22, "code": ";(fn [ob]\n;            (+ 1 (if (string? ob)\n;                   (java.lang.String/.indexOf ob (Character/toString (last ob)))\n;                   (.lastIndexOf ob (last ob)))))\n(fn __ [ob]\n  \n  ((fn ctob [obj cnt]\n    (if (nil? obj) cnt\n                   (recur (next obj) (inc cnt)))) ob 0))", "user": "56305383e4b073c1cf7a9be6"}, {"problem": 22, "code": "(fn [x]\n (loop [cnt 0 val x]\n (if (empty? val)\n cnt\n (recur(inc cnt) (rest val))\n )\n ))", "user": "562f45e6e4b0ab312c17ebc8"}, {"problem": 22, "code": "#(loop [coll %, va 1]\n          (if (= nil (next coll))\n                  va\n                  (recur (rest coll) (inc va))\n                ))", "user": "56306e6ce4b073c1cf7a9be7"}, {"problem": 22, "code": "(fn  [sq]\n  (reduce (fn [l r]\n              (inc l))\n          0 sq))", "user": "5630cff7e4b0bfe05bf11787"}, {"problem": 22, "code": "(fn [coll]\n  (reduce (fn [a b] (inc a)) 0 coll))", "user": "55729a78e4b09a3098a52547"}, {"problem": 22, "code": "(fn [vals]\n  (loop [sofar 0 remain vals]\n    (if (empty? remain)\n      sofar\n      (recur (inc sofar) (rest remain)))))", "user": "5632365ce4b0bfe05bf1179d"}, {"problem": 22, "code": "#((fn ! [l sch]\n  (if (= l [])\n    sch\n    (! (rest l) (inc sch)))) % 0)", "user": "56327168e4b0bfe05bf117a5"}, {"problem": 22, "code": "(fn [x] (.size (seq x)))", "user": "5632e850e4b0bfe05bf117ac"}, {"problem": 22, "code": "(fn [sox] (reduce + (map (fn [_] 1) sox)))", "user": "55e357dae4b050e68259b442"}, {"problem": 22, "code": "#(+ 1 (first (last (map-indexed vector %))))", "user": "5632abbee4b0bfe05bf117a7"}, {"problem": 22, "code": "(fn [outer] (reduce + ((fn [param] (map (fn [_] 1) param)) outer)))", "user": "56339e23e4b0bfe05bf117b1"}, {"problem": 22, "code": "(fn mylength [x]\n  (if (= nil (first x))\n    0\n    (+ 1 (mylength (rest x)))))", "user": "5632b0a9e4b0bfe05bf117a8"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5633e653e4b0bfe05bf117b7"}, {"problem": 22, "code": "#(cond\n   (= (type %) (type \"abc\"))\n       (.length %)\n   (= (type %) (type '(1 2 3)))\n       (.size %)\n   (= (type %) (type [1 2 3]))\n       (.size %))", "user": "56326e03e4b0bfe05bf117a4"}, {"problem": 22, "code": "(fn [x]\n  (loop [cnt 0 xs x]\n    (if (empty? xs) cnt\n      (recur (inc cnt) (rest xs)))))", "user": "563130e4e4b0bfe05bf1178d"}, {"problem": 22, "code": "(fn [seq] (reduce (fn [x, y] (+ x 1)) 0 seq))", "user": "5537c5b3e4b09218d5f44fd1"}, {"problem": 22, "code": "(fn [coll] (reduce (fn [c _] (inc c)) 0 coll))", "user": "4f8c57bae4b02e764a0a5197"}, {"problem": 22, "code": "#(alength (into-array %))", "user": "56174d86e4b06b1bb2182a0e"}, {"problem": 22, "code": "(fn [xs] (reduce (fn [ac n] (inc ac)) 0 xs))", "user": "54995298e4b0b312c081ff8b"}, {"problem": 22, "code": "#(+(.lastIndexOf (seq %) (last (seq %)))1)", "user": "56349008e4b0bfe05bf117bd"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "56350c87e4b0bfe05bf117c0"}, {"problem": 22, "code": "(fn cnt\n  ([s] (cnt s 0))\n  ([s c]\n   (if (empty? s)\n     c\n     (cnt (rest s) (inc c)))))", "user": "544e6b7fe4b0e39780006986"}, {"problem": 22, "code": "#(reduce + (map (fn to_one [x y] y) % (repeat 1)))", "user": "56304db8e4b073c1cf7a9be5"}, {"problem": 22, "code": "(fn [x]\n  (reduce (fn [acc e] (inc acc)) 0 x))", "user": "562d869be4b0a45d2ff8301f"}, {"problem": 22, "code": "(fn mycount [s]\n  (if\n    (= s [])\n    0\n    (+ 1 (mycount (rest s)))\n  )\n)", "user": "563758e3e4b0bfe05bf117d5"}, {"problem": 22, "code": "(fn [s] (reduce (fn [a b] (inc a)) 0 s))", "user": "563799f8e4b0bfe05bf117db"}, {"problem": 22, "code": ";http://stackoverflow.com/questions/16724071/counting-a-sequence-in-clojure\n;http://stackoverflow.com/questions/16020278/clojure-what-does-do-in-a-functions-argument-list\n; http://www.braveclojure.com/do-things/ voor info over het percentage sign\n#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "5637bd38e4b0bfe05bf117de"}, {"problem": 22, "code": "(fn [lst]\n  (loop [i lst cnt 0]\n   (cond (empty? i) cnt\n     :t (recur (rest i)(inc cnt)))))", "user": "5637d759e4b0bfe05bf117df"}, {"problem": 22, "code": "#(alength (to-array %))", "user": "56283825e4b00e49c7cb47e4"}, {"problem": 22, "code": "(fn [l](reduce + (map (fn[a] 1) l)))", "user": "56347285e4b0bfe05bf117bc"}, {"problem": 22, "code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "5626c506e4b00e49c7cb47c5"}, {"problem": 22, "code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "56252effe4b00a550fc90294"}, {"problem": 22, "code": "reduce (fn [x _] (inc x)) 0", "user": "55eb026de4b0121d4835fdb7"}, {"problem": 22, "code": "(fn cnt [c sq] \n   (if (empty? sq) \n     c\n     (cnt (+ 1 c) \n          (rest sq))))\n0", "user": "56366f73e4b0bfe05bf117cc"}, {"problem": 22, "code": "(fn [c] (reduce #(if %2 (+ %1 1)) 0 (seq c)))", "user": "560dbf17e4b05f002753df44"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "56372c3ce4b0bfe05bf117d1"}, {"problem": 22, "code": ";(fn [s]\n;  (loop [s s n 0]\n;    (cond (nil? (first s)) n\n;          :else            (recur (rest s) (inc n)))))\n\nreduce (fn [ct _] (inc ct)) 0", "user": "5635adeee4b0bfe05bf117c7"}, {"problem": 22, "code": "reduce (fn [x y] (+ x 1)) 0", "user": "5638b88de4b0bfe05bf117e9"}, {"problem": 22, "code": "(fn [xs] (apply + (map (fn [x] 1) xs)))", "user": "56388a0fe4b0bfe05bf117e7"}, {"problem": 22, "code": "#(reduce (fn [v _] (inc v)) 0 %)", "user": "56372798e4b0bfe05bf117d0"}, {"problem": 22, "code": "(fn my-count\n  [l] \n  (if \n    (empty? l)\n    0\n  \t(inc (my-count (rest l)))\n  )\n)", "user": "56393681e4b0bfe05bf117f2"}, {"problem": 22, "code": "#(reduce + (map (fn [x] (if (= % %) 1)) (seq %)))", "user": "5604ae27e4b0c80df0ca2663"}, {"problem": 22, "code": "(fn cnt [s]\n  (if (empty? (rest s))\n    1\n    (+ 1 (cnt (rest s)))))", "user": "5638f61ce4b0bfe05bf117ed"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "56399b7ee4b0bfe05bf117f5"}, {"problem": 22, "code": "(fn counter [xs] (if (empty? xs) 0 (inc (counter (rest xs)))))", "user": "526e84b5e4b03e8d9a4a732d"}, {"problem": 22, "code": "(fn\n  [list]\n  (loop [i 0 list list]\n    (if (empty? list)\n      i\n      (recur (inc i) (rest list))\n    )\n  )\n)", "user": "563a30d7e4b0bfe05bf117f9"}, {"problem": 22, "code": "(fn cnt [x] (if (empty? x)\n              0\n              (+ 1 (cnt (rest x)))))", "user": "563aa090e4b0bfe05bf11801"}, {"problem": 22, "code": "(fn [x] (inc (first (last (map-indexed vector x)))))", "user": "56367c51e4b0bfe05bf117cd"}, {"problem": 22, "code": "(fn compte [s]\n  (cond \n   (empty? s) 0\n   :else (+ 1 (compte (rest s)))))", "user": "563b236ce4b0bfe05bf1180b"}, {"problem": 22, "code": "#(reduce (fn [i x] (inc i)) 0 %)", "user": "563b1553e4b0bfe05bf1180a"}, {"problem": 22, "code": "(fn cnt [x] (reduce (fn red [y z] (+ 1 y)) 0 x))", "user": "563b559ee4b0bfe05bf1180d"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "55c13e73e4b01b9910ae2a2f"}, {"problem": 22, "code": "(fn [l_initial]\n  (loop [l l_initial c 0] \n    (if (empty? l) c (recur (drop 1 l) (inc c)))\n  )\n)", "user": "563747e9e4b0bfe05bf117d2"}, {"problem": 22, "code": "#(reduce (fn [acc _] (inc acc)) 0 %)", "user": "5391149ee4b0b51d73faaea0"}, {"problem": 22, "code": "(fn [s]\n  (reduce (fn [v i] (inc v)) 0 s))", "user": "55fee436e4b00f4cabc57659"}, {"problem": 22, "code": "(fn mycount [seq] (reduce + (map (constantly 1) seq)))", "user": "563b5dc9e4b0bfe05bf1180f"}, {"problem": 22, "code": "(fn len [xs]\n  (loop [n 0 xs xs]\n    (if (empty? xs)\n      n\n      (recur (+ n 1) (rest xs)))))", "user": "527106e8e4b03e8d9a4a73ce"}, {"problem": 22, "code": "#(reduce (fn [x _] (+ 1 x)) 0 %1)", "user": "55c49394e4b0e31453f6499e"}, {"problem": 22, "code": "(fn [col]\n  (let [a (atom 0)]\n    (last (map (fn [x] (swap! a inc)) col))))", "user": "562f44e6e4b0ab312c17ebc7"}, {"problem": 22, "code": "#(reduce (fn [a _] (inc a)) 0 %)", "user": "563249dee4b0bfe05bf1179f"}, {"problem": 22, "code": "#(-> % (interleave (range)) last inc)", "user": "563cf9e5e4b0bfe05bf11844"}, {"problem": 22, "code": "(fn  \n    [s] (reduce (fn [p c] (inc p)) 0 (seq s))\n            \n )", "user": "563a3cc2e4b0bfe05bf117fa"}, {"problem": 22, "code": "#(reduce\n    (fn [acc _]\n      (inc acc))\n    0\n    %)", "user": "563cce5be4b0bfe05bf1183f"}, {"problem": 22, "code": "(fn f [s] (if (empty? s) 0 (+ 1 (f (rest s)))))", "user": "563d1802e4b0bfe05bf11847"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "563da418e4b0bfe05bf11852"}, {"problem": 22, "code": "(fn [s]\n  (reduce + (reduce (fn [ones _] (conj ones 1)) () s)))", "user": "53bbae20e4b047364c044509"}, {"problem": 22, "code": "(fn [coll]\n   (loop [in coll\n          out 0 ]\n     (if (empty? in)\n       out\n       (recur (drop-last in)\n              (inc out)))))", "user": "5633bb9de4b0bfe05bf117b4"}, {"problem": 22, "code": "(fn [x]\n  (loop [lis x cou 0]\n    (if (empty? lis)\n      cou\n      (recur (rest lis) (+ 1 cou)))))", "user": "563c48e7e4b0bfe05bf11832"}, {"problem": 22, "code": ";#(loop [cnt 0 acc %] (if (empty? acc) cnt (recur (inc cnt) (next acc))))\nreduce (fn [c _] (inc c)) 0", "user": "555994fbe4b0deb715856e39"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "563ce002e4b0bfe05bf11841"}, {"problem": 22, "code": "(fn[coll]\n  (reduce \n    (fn [c _] (inc c))\n     0 coll))", "user": "53c7da9ce4b00fb29b2212ad"}, {"problem": 22, "code": "(fn [x] (->> x (map (constantly 1)) (reduce +)))", "user": "563ddefee4b0bfe05bf11857"}, {"problem": 22, "code": "(fn [col] (reduce (fn [e, s] (+ e 1)) 0 col))", "user": "563e7a33e4b0da801c4e466d"}, {"problem": 22, "code": "#(alength (to-array %))", "user": "563e3c43e4b0da801c4e4669"}, {"problem": 22, "code": "#(loop [i 0 coll %]\n   (if (empty? coll)\n     i\n     (recur (inc i) (rest coll))))", "user": "563d4600e4b0bfe05bf1184c"}, {"problem": 22, "code": "(fn [x] (reduce (fn [i _] (inc i)) 0 x))", "user": "563e1c0ee4b0da801c4e4665"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "563431c1e4b0bfe05bf117bb"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "563ed73ae4b08d4f616f5ecb"}, {"problem": 22, "code": "reduce (fn [total -] (inc total))  0", "user": "563f2eaae4b08d4f616f5ed1"}, {"problem": 22, "code": "(fn count-a-sequence [li]\n  (if (empty? li)\n    0\n    (+ 1 (count-a-sequence (rest li)))\n  )\n)", "user": "551c02fbe4b07993ea3788d8"}, {"problem": 22, "code": "(fn my-count\n  [s]\n  (loop [ss s\n         c 0]\n    (if (empty? ss)\n      c\n      (recur (rest ss) (inc c)))))", "user": "563f1493e4b08d4f616f5ecf"}, {"problem": 22, "code": "(fn testfn2\n  ([count1 vals] (if (empty? vals)\n                  count1\n                  (testfn2 (inc count1) (rest vals))\n                  )\n                )\n  ) 0", "user": "563fb212e4b08d4f616f5ed5"}, {"problem": 22, "code": "#(reduce (fn [a b] (inc a)) 0 %)", "user": "563ebc00e4b08d4f616f5eca"}, {"problem": 22, "code": "(fn [col] (reduce (fn [val, _] (+ val 1)) 0 col))", "user": "52d68ed2e4b09f7907dd1362"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "563ac0cfe4b0bfe05bf11805"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "563c0d4ce4b0bfe05bf11831"}, {"problem": 22, "code": "(fn totnum [coll]\n  (loop [c coll\n         ans 0]\n    (if (empty? c)\n      ans\n      (recur (rest c) (inc ans)))))", "user": "5634995fe4b0bfe05bf117be"}, {"problem": 22, "code": "#(reduce (fn [i x] (inc i)) 0 %)", "user": "564054a9e4b08d4f616f5edf"}, {"problem": 22, "code": "(fn foo [s] (if (empty? s) 0 (+ 1 (foo (rest s)))))", "user": "564066dee4b08d4f616f5ee2"}, {"problem": 22, "code": "#(.size (seq %))", "user": "563fc1f2e4b08d4f616f5ed7"}, {"problem": 22, "code": "(fn [x] (reduce (fn [acc y] (+ acc 1)) 0 (seq x) ))", "user": "5640c967e4b08d4f616f5ee9"}, {"problem": 22, "code": "#(reduce (fn[n _] (inc n)) 0 %)", "user": "5639e878e4b0bfe05bf117f7"}, {"problem": 22, "code": "#(reduce + (map (fn [_] 1) %1))", "user": "545c2d07e4b01be26fd7465c"}, {"problem": 22, "code": "(fn [xs] (reduce + (map (fn [_] 1) xs)))", "user": "562c0787e4b058fa18c5a6d3"}, {"problem": 22, "code": "(fn [x] \n  (loop [n 0 \n         a x] \n    (if (empty? a) \n      n \n      (recur (+ n 1) (rest a)))))", "user": "563e022be4b0da801c4e4664"}, {"problem": 22, "code": "#(loop [coll %\n       acc 0]\n\t(if (empty? coll)\n  \t\tacc\n  \t\t(recur (rest coll) (inc acc))))", "user": "55e1cf24e4b050e68259b420"}, {"problem": 22, "code": "(fn cnter\n  ([coll] \n   (cnter coll 0))\n  ([coll cnt] \n   (if (empty? coll)\n     cnt\n     (cnter (rest coll) (inc cnt)))))", "user": "5641296de4b08d4f616f5ef4"}, {"problem": 22, "code": "(fn [seq]\n  (reduce (fn [acc _] (+ acc 1)) 0 seq))", "user": "54fce8bde4b07d26eda61d30"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5641686de4b08d4f616f5efc"}, {"problem": 22, "code": "(fn f [s] (if (first s) (inc (f (rest s))) 0))", "user": "56416320e4b08d4f616f5efb"}, {"problem": 22, "code": "(fn [input]\n  (let [coll (seq input)]\n    (loop [c coll\n           ans 0]\n      (if (empty? c)\n        ans\n        (recur (next c) (inc ans))))))", "user": "564045a8e4b08d4f616f5edd"}, {"problem": 22, "code": "#(reduce (fn [x _] (inc x)) 0 %)", "user": "55c5b55fe4b0e31453f649b5"}, {"problem": 22, "code": "#(loop [col % cnt 0]\n   (if (next col)\n     (recur (rest col) (inc cnt))\n     (inc cnt)))", "user": "5600591de4b04bb52996e166"}, {"problem": 22, "code": "(partial reduce (fn [n _] (inc n)) 0)", "user": "5641418fe4b08d4f616f5ef7"}, {"problem": 22, "code": "(fn [se] \n  (loop [s se n 0]\n    (if (empty? s)\n      n\n      (recur (rest s)(+ n 1)))))", "user": "56407cdee4b08d4f616f5ee4"}, {"problem": 22, "code": "(fn mycount [a]\n  (loop [a a cnt 0]\n    (if (empty? a)\n      cnt\n      (recur (rest a) (inc cnt)))))", "user": "55b738cfe4b01b9910ae29a1"}, {"problem": 22, "code": "(fn cnt [x] (+ 1 (.lastIndexOf (vec x) (peek (vec x)))))", "user": "5641f0ede4b08d4f616f5f11"}, {"problem": 22, "code": "#(inc(.lastIndexOf (vec %1) (last(vec %1))))", "user": "563f0fdae4b08d4f616f5ece"}, {"problem": 22, "code": "(fn [list]\n    (loop [head (first list), tail (rest list), cnt 0]\n      (if (nil? head)\n        cnt\n        (recur (first tail) (rest tail) (+ cnt 1)))))", "user": "563d1648e4b0bfe05bf11846"}, {"problem": 22, "code": "(fn count1 [l]\n  (if (empty? l)\n    0\n    (inc (count1 (rest l)))))", "user": "563b9acbe4b0bfe05bf11827"}, {"problem": 22, "code": "(fn [s] (loop [ cnt 0\n                ls  s ]\n          (if-let [head (first ls)]\n             (recur (inc cnt) (rest ls))\n             cnt)))", "user": "564127a9e4b08d4f616f5ef3"}, {"problem": 22, "code": "(fn [xs] (reduce (fn [c _] (inc c)) 0 xs))", "user": "54cec2a9e4b018d918be98c1"}, {"problem": 22, "code": "(fn [alist]\n  (loop [iter 0\n         lst alist]\n    (if (empty? lst)\n      iter\n      \t(recur (+ iter 1)\n        \t   (rest lst)) )))", "user": "5642b939e4b08d4f616f5f1b"}, {"problem": 22, "code": "#(reduce (fn [x _] (inc x) ) 0 %)", "user": "564302b5e4b08d4f616f5f21"}, {"problem": 22, "code": "(fn dupa [[a & rest]] (do (println rest) (if (= rest nil) 1 (+ 1 (dupa rest)))))", "user": "560b0679e4b05f002753df13"}, {"problem": 22, "code": "(fn cnt [coll]\n  (if (empty? coll) 0 (inc (cnt (rest coll)))))", "user": "563772a9e4b0bfe05bf117d7"}, {"problem": 22, "code": "#(reduce + ( map (fn [x] 1) % ))", "user": "56436194e4b0018b46ad8bf2"}, {"problem": 22, "code": "(fn [in] (reduce (fn [a b] (+ a 1)) 0 in))", "user": "5643b67ae4b0018b46ad8bfe"}, {"problem": 22, "code": "reduce (fn[x y](+ x 1)) 0", "user": "56435214e4b08d4f616f5f27"}, {"problem": 22, "code": "#(loop [coll % i 0] (if (= nil (first coll)) i (recur (rest coll) (inc i))))", "user": "551e2cade4b030e6a24d00e4"}, {"problem": 22, "code": "#(reduce (fn [ct x] (inc ct)) 0 %)", "user": "56444fb1e4b0018b46ad8c0c"}, {"problem": 22, "code": "reduce (fn [a b] (inc a)) 0", "user": "564452d1e4b0018b46ad8c0d"}, {"problem": 22, "code": "#(reduce (fn [counter throwaway] (inc counter)) 0 %)", "user": "56449e4de4b0284900eef5f9"}, {"problem": 22, "code": "(fn [col]\n  (loop [elems col\n         n 0]\n    (if (empty? elems)\n      n\n      (recur (rest elems) (inc n)))))", "user": "50738138e4b054001656acc9"}, {"problem": 22, "code": "(fn [xs]\n  (reduce (fn [n _]\n            (inc n))\n          0\n          xs))", "user": "5644bf88e4b0284900eef5fc"}, {"problem": 22, "code": "#(+ (.lastIndexOf (seq %) (last (seq %))) 1)", "user": "56427910e4b08d4f616f5f19"}, {"problem": 22, "code": "(fn countgue [x] (if (= (drop 1 x) '() ) 1 (+ 1 (countgue (drop 1 x)))))", "user": "56441e72e4b0018b46ad8c09"}, {"problem": 22, "code": "(fn c\n  [[x & tail]]\n  (if x\n    (+ (c tail) 1)\n    0))", "user": "56451201e4b0284900eef600"}, {"problem": 22, "code": "(fn anjing [x] (if (empty? x) \n          0\n          (+ 1 (anjing (rest x)))))", "user": "5643ba10e4b0018b46ad8bff"}, {"problem": 22, "code": "#((fn f [l n] (if (= l '())\n            n\n            (f (rest l) (+ n 1)))) % 0)", "user": "559248c0e4b0604b3f94d58b"}, {"problem": 22, "code": "(fn [s]\n  (loop [my-list s\n         acc     0]\n    (if (empty? my-list)\n      acc\n      (recur (rest my-list) (inc acc)))))", "user": "564583f0e4b0284900eef607"}, {"problem": 22, "code": "(fn [lis] (reduce + (map( fn [x] 1 ) lis)))", "user": "564502afe4b0284900eef5ff"}, {"problem": 22, "code": "(fn my-count\n  [collection]\n  (if (empty? collection)\n    0\n    (inc (my-count (rest collection)))))", "user": "5645a7d6e4b0284900eef608"}, {"problem": 22, "code": "#(loop [x 1 table (rest (into-array %))] (if (empty? table) x (recur (inc x) (rest table))))", "user": "56438342e4b0018b46ad8bf4"}, {"problem": 22, "code": "(fn ct [s] (reduce (fn [x y] (inc x)) 0 s\n           ) \n)", "user": "564633a1e4b0284900eef60f"}, {"problem": 22, "code": "#(reduce (fn [acc _] (inc acc)) 0 %)", "user": "56466fb1e4b0284900eef613"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5645a7f9e4b0284900eef609"}, {"problem": 22, "code": "(fn cnt [lijst] (if (= '() lijst) 0 (+ 1 (cnt (rest lijst)))))", "user": "563bfd59e4b0bfe05bf1182f"}, {"problem": 22, "code": "(fn [col] (apply + (map (fn [x] 1) col)))", "user": "5646dff3e4b0284900eef615"}, {"problem": 22, "code": "(fn cnt [ls]\n  (if (first ls)\n    (+ (cnt (rest ls)) 1)\n    0\n  )\n)", "user": "564716e6e4b0284900eef616"}, {"problem": 22, "code": "(fn my-count [coll]\n  (if (nil? (seq coll))\n    0\n    (inc (my-count (rest coll)))))", "user": "56442758e4b0018b46ad8c0a"}, {"problem": 22, "code": "(fn c [xs] \n  (if (next xs)\n    (inc (c (next xs)))\n    1))", "user": "563ab65be4b0bfe05bf11803"}, {"problem": 22, "code": "(fn [coll]\n  (reduce (fn [cnt item]\n            (+ cnt 1))\n          0\n          coll))", "user": "563a79e5e4b0bfe05bf117fe"}, {"problem": 22, "code": "#(loop [col % cnt 0] (if (empty? col) cnt (recur (rest col) (inc cnt))))", "user": "52725fa4e4b03e8d9a4a742b"}, {"problem": 22, "code": "(fn [s]\n  (loop [r s acc 0]\n    (if (empty? r)\n      acc\n      (recur (rest r) (+ acc 1)))))", "user": "5647dc44e4b0284900eef624"}, {"problem": 22, "code": "reduce (fn [acc _] (inc acc)) 0", "user": "56441634e4b0018b46ad8c08"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "55b2505be4b0da326a65cf7d"}, {"problem": 22, "code": "(fn [x] (if (nil? x) 0 (reduce + (map (fn [_] 1) x))))", "user": "564857c2e4b0284900eef62e"}, {"problem": 22, "code": "(partial reduce (fn [a b] (+ a 1)) 0)", "user": "56472ff8e4b0284900eef618"}, {"problem": 22, "code": "(fn [s] (loop [c 0 s s] (if (empty? s) c (recur (inc c) (rest s)))))", "user": "56483f45e4b0284900eef62b"}, {"problem": 22, "code": "reduce (fn [n _] (inc n)) 0", "user": "56488119e4b0284900eef632"}, {"problem": 22, "code": "reduce (fn [x _] (+ x 1)) 0", "user": "56472c77e4b0284900eef617"}, {"problem": 22, "code": "(fn [coll] (reduce + 0 (map (fn [x] (and 1 1)) coll)))", "user": "56489f48e4b0284900eef633"}, {"problem": 22, "code": "#(->> % (map (fn [x] 1)) (reduce +))", "user": "53426ffbe4b00652c8746eda"}, {"problem": 22, "code": "#(loop [coll % c 0] (if (empty? coll) c (recur (rest coll) (inc c))))", "user": "56487cf2e4b0284900eef631"}, {"problem": 22, "code": "#(let [coll (into [] %)] (inc (.lastIndexOf coll (last coll))))", "user": "51671557e4b013fc800656c4"}, {"problem": 22, "code": "#(reduce + 0 (map (fn [i] 1) %))", "user": "545a2da7e4b01be26fd74634"}, {"problem": 22, "code": "(fn [s & c] (let [c (if (nil? c) 0 c) f (first s)] (if-not f c (recur (rest s) (inc c)))))", "user": "5637557ce4b0bfe05bf117d4"}, {"problem": 22, "code": "(fn ln [ls]\n  (if (empty? ls)\n    0\n    (inc(ln (rest ls)))))", "user": "5649542fe4b0284900eef63f"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %1) )", "user": "5649615be4b0284900eef641"}, {"problem": 22, "code": "reduce (fn [a b] (inc a)) 0", "user": "5640803be4b08d4f616f5ee6"}, {"problem": 22, "code": "(fn [orig-lst]\n  (loop [lst orig-lst c 0]\n      (if (empty? lst)\n        c\n        (recur (rest lst) (inc c)))))", "user": "4ec7e048535d6d7199dd36ea"}, {"problem": 22, "code": "#(last (map-indexed (fn [idx itm] (+ idx 1)) (seq %)))", "user": "560c3190e4b05f002753df2c"}, {"problem": 22, "code": "(fn [s]\n  (letfn [(count-elems\n           [result s]\n           (if (empty? s)\n             result\n             (count-elems (inc result) (rest s))))]\n          (count-elems 0 s)))", "user": "56486d47e4b0284900eef62f"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "56449c90e4b0284900eef5f8"}, {"problem": 22, "code": "(fn [a]\n  (loop [a a n 0]\n    (if (empty? a)\n      n\n      (recur (rest a) (inc n)))))", "user": "563d12f9e4b0bfe05bf11845"}, {"problem": 22, "code": ";; happy with this, but it would have been more idiomatic \n;; to use an underscore for the 2nd arg of the function \n;; passed to reduce, since we don't care about it.\n\n;; (fn [coll] (reduce (fn [a _] (inc a)) 0 coll))\n\n(fn [coll]\n  (reduce (fn [a b] (inc a)) 0 coll))", "user": "5646276de4b0284900eef60e"}, {"problem": 22, "code": "(fn [coll]\n  (loop [s coll\n         n 0]\n    (if (seq s)\n      (recur (rest s) (inc n))\n      n)))", "user": "5643a11ee4b0018b46ad8bfb"}, {"problem": 22, "code": "#(reduce + (map (fn [e] 1) %))", "user": "55216aa5e4b0882d96d09192"}, {"problem": 22, "code": "(fn [s] (loop [s s n 0] (if (empty? s) n (recur (rest s) (+ n 1)))))", "user": "5640b135e4b08d4f616f5ee8"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "562a3c6ae4b00e49c7cb481b"}, {"problem": 22, "code": "(fn aggregate-fn [coll]\n  (loop [counter 0 items coll]\n    (if (empty? items)\n      counter\n      (recur (inc counter) (rest items))\n      )))", "user": "564b1ff8e4b0284900eef663"}, {"problem": 22, "code": "(fn [s]\n  (loop [s s n 0]\n    (if (empty? s)\n      n\n      (recur (rest s) (inc n)))))", "user": "564b3730e4b0284900eef665"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "56351709e4b0bfe05bf117c2"}, {"problem": 22, "code": "(fn [col] \n  (reduce + 0 \n       (map \n         (fn [i] 1) \n         col)))", "user": "56416212e4b08d4f616f5efa"}, {"problem": 22, "code": "(fn [ls] (reduce\n  (fn [x y] (+ x 1)) 0 ls))", "user": "56433d34e4b08d4f616f5f23"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "564bbb15e4b0284900eef66d"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "564652b1e4b0284900eef611"}, {"problem": 22, "code": "(fn [coll] (loop [n 0, c coll] (if (nil? c) n (recur (inc n) (next c)))))", "user": "564b495de4b0284900eef667"}, {"problem": 22, "code": "reduce (fn [x y] (+ x 1)) 0", "user": "564348e1e4b08d4f616f5f26"}, {"problem": 22, "code": "reduce (fn [r _] (+ r 1)) 0", "user": "540c5950e4b0addc1aec6701"}, {"problem": 22, "code": "#(reduce + (map (fn[x] 1) %))", "user": "564c7501e4b0284900eef671"}, {"problem": 22, "code": "reduce (fn [a b] (+ a 1)) 0", "user": "564ca1b2e4b0284900eef675"}, {"problem": 22, "code": "(fn [xs] (reduce (fn [n i] (inc n)) 0 (seq xs) ))", "user": "564a560ae4b0284900eef654"}, {"problem": 22, "code": "#(reduce (fn [elem x] \n           (+ elem 1)) 0 %1)", "user": "564cc881e4b0284900eef677"}, {"problem": 22, "code": "(fn cnt [l] (if (empty? l) 0 (+ 1 (cnt (rest l)))))", "user": "4df9d3b0535d04ed9115e77b"}, {"problem": 22, "code": "(fn [x]                                                                  \n   (loop [elms x acc 1]                                                         \n     (if-not (next elms)                                                        \n        acc                                                                     \n     (recur (rest elms) (+ acc 1)))))", "user": "564cc055e4b0284900eef676"}, {"problem": 22, "code": "(fn [s] \n  (let [wrap (fn [sq i] (if (seq sq) (recur (rest sq) (inc i)) i))]\n    (wrap s 0)))", "user": "564d02cde4b0284900eef679"}, {"problem": 22, "code": "(fn [x] (reduce + (map (fn [_] 1) x)))", "user": "564c8e99e4b0284900eef674"}, {"problem": 22, "code": "(fn [x]\n  (loop [k x cont 0]\n   (cond (empty? k) cont\n     :t (recur (rest k)(inc cont)))))", "user": "564d21cae4b0284900eef67a"}, {"problem": 22, "code": "(fn [c]\n  (loop [coll c\n         i 0]\n    (if (empty? coll)\n      i\n      (recur (rest coll) (inc i)))))", "user": "55ff562fe4b00f4cabc57660"}, {"problem": 22, "code": "(fn [xs]\n  (reduce + \n          (map \n           (fn [x] 1)\n           xs)))", "user": "562108d0e4b064ca9f4b16e9"}, {"problem": 22, "code": "(fn x\n ([l] (x l 0))\n ([l n]\n     (if (empty? l)\n       n\n       (x (next l) (+ n 1)))))", "user": "564d7434e4b0284900eef680"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "564e1bbbe4b0284900eef696"}, {"problem": 22, "code": "(fn [xs] \n  (loop [xs xs, n 0]\n    (if (empty? xs)\n      n\n      (recur (rest xs) (inc n)))))", "user": "56448dc1e4b0284900eef5f6"}, {"problem": 22, "code": "(fn [x] (apply + (map (fn[y] 1) x)))", "user": "564d3169e4b0284900eef67c"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "55fd0d19e4b0f488688e067a"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "564eef5ee4b0284900eef6a3"}, {"problem": 22, "code": "reduce (fn [n _] (+ n 1)) 0", "user": "564da567e4b0284900eef682"}, {"problem": 22, "code": "(fn [x] (reduce (fn [y _] (+ y 1)) 0 x))", "user": "564d936ee4b0284900eef681"}, {"problem": 22, "code": "(fn [lst]\n  (loop [i lst cnt 0]\n   (cond (empty? i) cnt\n     :t (recur (rest i)(inc cnt)))))", "user": "564f3af6e4b0284900eef6a9"}, {"problem": 22, "code": "(fn [x]\n  (loop [x x\n         n 0]\n    (cond (empty? x) n\n          :else (recur (rest x) (inc n)))))", "user": "564f5774e4b0284900eef6ac"}, {"problem": 22, "code": "(fn xcount [coll]\n  (loop [cnt 0, s coll]\n    (if (seq s)\n      (recur (inc cnt) (next s))\n      cnt\n    )\n  )\n)", "user": "564ecc9ee4b0284900eef6a1"}, {"problem": 22, "code": "(fn [x] (reduce + (map (constantly 1) x)))", "user": "56324a2de4b0bfe05bf117a0"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %) )", "user": "564f84f4e4b0284900eef6b0"}, {"problem": 22, "code": "(fn [xs] (reduce + (map (fn [x] 1) xs)))", "user": "5476d6cae4b0c51c1f4d72aa"}, {"problem": 22, "code": "#(reduce \n  (fn [i _] (inc i))\n  0 %)", "user": "56504dc2e4b0284900eef6bc"}, {"problem": 22, "code": "(fn [coll]\n  (loop [n 0, c coll]\n    (if (empty? c) n (recur (inc n) (rest c)))))", "user": "4f2d90ece4b0d6649770a05f"}, {"problem": 22, "code": "(fn [lst] (reduce (fn [acc el] (inc acc)) 0 lst))", "user": "5625f678e4b00e49c7cb47b8"}, {"problem": 22, "code": "(fn [coll]\n  (apply + (map (fn [el] 1) coll)))", "user": "56508624e4b0284900eef6bf"}, {"problem": 22, "code": "(partial reduce (fn [acc n] (+ acc 1)) 0)", "user": "5650b8a0e4b0284900eef6c3"}, {"problem": 22, "code": "#(reduce (fn [acc, y] (inc acc)) 0  %)", "user": "563dfc02e4b0da801c4e4662"}, {"problem": 22, "code": "#(reduce (fn [sum _] (+ sum 1)) 0 %)", "user": "5628e9f4e4b00e49c7cb47f2"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "56430277e4b08d4f616f5f20"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "56018ca7e4b04bb52996e18d"}, {"problem": 22, "code": "(fn [coll] (loop [cnt 0 c coll] (if (empty? c) cnt (recur (inc cnt) (rest c)))))", "user": "55641bcfe4b0c656e3ff17ff"}, {"problem": 22, "code": "(fn \n  [seq]\n  (loop [index 0]\n    (if(= nil (nthnext seq index))\n      index\n      (recur (inc index)))))", "user": "54d1f84ae4b0e8a36923e5ec"}, {"problem": 22, "code": "#(reduce (fn [acc, el] (+ acc 1)) 0 %1)", "user": "564faadce4b0284900eef6b2"}, {"problem": 22, "code": "#(loop [n 0 s %] (if (empty? s) n (recur (+ 1 n) (rest s))))", "user": "564f128de4b0284900eef6a4"}, {"problem": 22, "code": "(fn f [s] (if (empty? s) 0 (+ 1 (f (rest s)))))", "user": "5651de3ee4b0f9d632dd845b"}, {"problem": 22, "code": "#(loop [s % n 0] (if (seq s) (recur (next s) (+ n 1)) n))", "user": "56521a26e4b0f9d632dd845f"}, {"problem": 22, "code": "(fn [collection]\n  \t(loop [counter 0 coll collection]\n  \t(if (empty? coll)\n  \tcounter\n  \t(recur (inc counter) (rest coll)))))", "user": "55cd95b4e4b0e31453f64a1e"}, {"problem": 22, "code": "reduce (fn [f _] (+ 1 f)) 0", "user": "5642f094e4b08d4f616f5f1f"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "56525c0ee4b0f9d632dd8465"}, {"problem": 22, "code": "#(loop [s %1 n 0](if (empty? s) n (recur (rest s) (inc n))))", "user": "5652b9a1e4b0f9d632dd8468"}, {"problem": 22, "code": "#(reduce (fn [x y](+ 1 x)) 0 %)", "user": "564e719ee4b0284900eef69b"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5652dd89e4b0f9d632dd8469"}, {"problem": 22, "code": "#(reduce (fn [a _] (inc a)) 0 %)", "user": "5652f23ce4b0f9d632dd846b"}, {"problem": 22, "code": "(fn [seq]\n  (loop [loop-seq seq\n         count-num 1]\n    (if (empty? (rest loop-seq))\n      count-num\n      (recur (rest loop-seq) (inc count-num)))))", "user": "559fb147e4b0acc240e314ea"}, {"problem": 22, "code": "(fn my-count [arr]\n  (let [count-inner (fn this [arr i]\n                      (if (= (first arr) nil) i (this (rest arr) (+ i 1))))]\n    (count-inner arr 0)\n    )\n  )", "user": "56530a1ce4b0f9d632dd846c"}, {"problem": 22, "code": "#(reduce \n  (fn [f _] (inc f)\t)\n   0 %)", "user": "565322e8e4b0f9d632dd846d"}, {"problem": 22, "code": "reduce (fn [a _] (+ 1 a)) 0", "user": "4fc77f5ae4b0ee37620e1821"}, {"problem": 22, "code": "reduce (fn [size, _] (+ size 1)) 0", "user": "565370bce4b0f9d632dd8472"}, {"problem": 22, "code": "reduce (fn [a _] (inc a)) 0", "user": "56537f9be4b0f9d632dd8473"}, {"problem": 22, "code": "#(loop [items %\n        length 0]\n   (if (empty? items)\n     length\n     (recur (rest items) (inc length))))", "user": "5624f5a6e4b00a550fc90288"}, {"problem": 22, "code": "(fn my-count [coll] (reduce (fn [n _] (inc n)) 0 coll))", "user": "56405959e4b08d4f616f5ee1"}, {"problem": 22, "code": "(fn [coll]\n  (reduce (fn [n _] (inc n)) 0 coll))", "user": "5169d422e4b051e2a73aba53"}, {"problem": 22, "code": "reduce #(inc (or %1 %2)) 0", "user": "56548885e4b0f9d632dd8483"}, {"problem": 22, "code": "(fn mycount [x]\n  (if (empty? x)\n    0\n    (inc (mycount (rest x)))))", "user": "56548fd3e4b0f9d632dd8485"}, {"problem": 22, "code": "(fn [c]\n  (reduce (fn [a b]\n            (+ a 1))\n          0\n          c))", "user": "565233f2e4b0f9d632dd8461"}, {"problem": 22, "code": "reduce (fn [r _] (inc r)) 0", "user": "5654d0e1e4b0f9d632dd848c"}, {"problem": 22, "code": "(fn [x]\n  (loop [z 0\n         els x]\n    (if (not-empty els)\n      (recur (inc z) (rest els))\n      z)))", "user": "56491d05e4b0284900eef63a"}, {"problem": 22, "code": "#(loop[x %, i 0]\n   (if (nil? x)\n     i\n     (recur (next x) (inc i))))", "user": "5654e8ade4b0f9d632dd848e"}, {"problem": 22, "code": "#(reduce +\n    (map (constantly 1) %))", "user": "5654a0fce4b0f9d632dd8486"}, {"problem": 22, "code": "reduce (fn [a b] (+ a 1)) 0", "user": "565540d2e4b0f9d632dd8494"}, {"problem": 22, "code": "(let [collsize \n      (fn[coll] (reduce + \n              (map (fn[&_] 1)\n                  coll)))\n      ]\n  collsize)", "user": "564d55bce4b0284900eef67e"}, {"problem": 22, "code": "(fn [coll] (reduce + (keep #(if % 1) coll)))", "user": "558159b3e4b05c286339e0f7"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "53d0c3c9e4b00fb29b22130a"}, {"problem": 22, "code": "(fn c\n  ([coll cnt]\n   (if (nil? coll)\n     cnt\n     (c (next coll) (inc cnt))))\n  ([coll]\n   (c coll 0)))", "user": "56557d2de4b0f9d632dd8498"}, {"problem": 22, "code": "#(apply + (map (fn [x] (quote 1)) %))", "user": "56547b51e4b0f9d632dd8481"}, {"problem": 22, "code": "(fn howmany [x]\n   (let [y (seq x)]\n     (if (nil? (first y))\n       0\n       (+ 1 (howmany (rest y))))))", "user": "5654cb2de4b0f9d632dd848b"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "56560a21e4b0f9d632dd849c"}, {"problem": 22, "code": "#(reduce (fn [x _] (inc x)) 0 %)", "user": "56561119e4b0f9d632dd849d"}, {"problem": 22, "code": "#(letfn [(do-count [ls c] (if (empty? ls) c (recur (rest ls) (+ 1 c))))] (do-count %1 0))", "user": "5654e024e4b0f9d632dd848d"}, {"problem": 22, "code": "(fn [a] (loop [ c 0 x a] (if (empty? x) c (recur (inc c) (rest x)))))", "user": "5632d1b3e4b0bfe05bf117a9"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "56564994e4b0f9d632dd849e"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "563f24f9e4b08d4f616f5ed0"}, {"problem": 22, "code": "(fn [x] (loop [x x c 0] (if (empty? x) c (recur (rest x) (inc c)))))", "user": "56532ff4e4b0f9d632dd846e"}, {"problem": 22, "code": ";#(inc (.indexOf % (last %)))\n#(reduce + (map (fn [x] 1) %))", "user": "565791b0e4b0f9d632dd84aa"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %1))", "user": "56497a73e4b0284900eef642"}, {"problem": 22, "code": "(fn [coll] (reduce (fn [c & x] (+ 1 c)) 0 coll))", "user": "56582025e4b0f9d632dd84b1"}, {"problem": 22, "code": "reduce (fn [cnt _] (+ 1 cnt)) 0", "user": "56586acae4b0f9d632dd84b4"}, {"problem": 22, "code": "(fn [seq] (reduce + (map (fn [_] 1) seq)))", "user": "5658acabe4b0f9d632dd84b7"}, {"problem": 22, "code": "#(loop [col % len 0] (if (empty? col) len (recur (rest col) (inc len))))", "user": "5658c357e4b00d3155796111"}, {"problem": 22, "code": "(fn [a] (apply + (map (fn [b] 1) a)))", "user": "5657fc1ae4b0f9d632dd84ad"}, {"problem": 22, "code": "#(inc (apply max (map-indexed (fn [idx item] idx) %1)))", "user": "5658d775e4b00d3155796114"}, {"problem": 22, "code": "#(reduce + (map (fn [_] 1) %))", "user": "4f78d452e4b0fbe0118ec58b"}, {"problem": 22, "code": "reduce (fn [total k] (+ total 1)) 0", "user": "56041d21e4b0c80df0ca2656"}, {"problem": 22, "code": "#(loop [f_input %1 f_number 0]\n   (if (empty? f_input)\n     \tf_number\n     \t(recur (rest f_input) (inc f_number))\n   )\n )", "user": "55a03d7de4b0acc240e314f4"}, {"problem": 22, "code": "#(reduce (fn [a _] (inc a)) 0 %)", "user": "565953a8e4b068f2fe63dbea"}, {"problem": 22, "code": ";;#(apply + (map (fn [x] 1) %))\n#(reduce (fn [x y] (inc x)) 0 %)", "user": "5658eaa0e4b00d3155796115"}, {"problem": 22, "code": "(fn [x] (loop [s x acc 0] (if (empty? s) acc (recur (rest s) (inc acc)))))", "user": "56588f4ee4b0f9d632dd84b6"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5659ce78e4b068f2fe63dbf0"}, {"problem": 22, "code": "(fn count-seq \n([s] (count-seq (sequence s) 0))\n([s c] \n(if (empty? s)\n\tc\n\t(count-seq (rest s) (+ 1 c))\n)\n\t)\n)", "user": "5658c25fe4b00d3155796110"}, {"problem": 22, "code": "#((fn counting [coll c] (if (= coll []) c (counting (rest coll) (+ c 1)))) % 0)", "user": "565a1ffbe4b068f2fe63dbf6"}, {"problem": 22, "code": "#(reduce (fn [a b] (+ a 1)) 0 %)", "user": "4f6de600e4b07046d9f4efd1"}, {"problem": 22, "code": "(fn cnt [sq]\n  (if (empty? sq) 0 (-> sq rest cnt inc)))", "user": "565a3e25e4b068f2fe63dbfb"}, {"problem": 22, "code": "reduce(fn[x y](inc x)) 0", "user": "50e896a5e4b0ebbe794eb7eb"}, {"problem": 22, "code": "reduce (fn [x y] (+ x 1)) 0", "user": "55aa67eae4b0988bba2ad94c"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "565a38e9e4b068f2fe63dbf9"}, {"problem": 22, "code": "#((fn [a c] (if (empty? a) c (recur (rest a) (inc c)))) % 0)", "user": "5659679ae4b068f2fe63dbeb"}, {"problem": 22, "code": "reduce (fn [ctr _] (inc ctr)) 0", "user": "565a280be4b068f2fe63dbf7"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "565560ace4b0f9d632dd8496"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5649d538e4b0284900eef647"}, {"problem": 22, "code": "(fn c [s]\n  (if (empty? s)\n    0\n    (+ 1 (c (rest s)))))", "user": "560ff7d9e4b05f002753df67"}, {"problem": 22, "code": "#(reduce \n   (fn[x y]\n     (inc x)) \n   0 \n   %)", "user": "565b371fe4b068f2fe63dbff"}, {"problem": 22, "code": "(fn x ([coll] (if (empty? coll) 0  (inc (x (rest coll))))))", "user": "5659c8cde4b068f2fe63dbef"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "565b6be9e4b068f2fe63dc03"}, {"problem": 22, "code": "(fn [coll] \n  (loop [c 0 [head & tail] coll]\n  (if (nil? tail)\n    (+ c 1)\n    (recur (+ c 1) tail) \n)))", "user": "565b941ce4b068f2fe63dc07"}, {"problem": 22, "code": "(fn my-count [coll] \n  (if (empty? coll) 0 (+ 1 (my-count (rest coll)))))", "user": "565b818ce4b068f2fe63dc05"}, {"problem": 22, "code": "(fn [s] (reduce (fn [cnt _] (inc cnt)) 0 s))", "user": "56427ec0e4b08d4f616f5f1a"}, {"problem": 22, "code": "#(+ 1 (last (map-indexed (fn [x y] x) %)))", "user": "56598476e4b068f2fe63dbec"}, {"problem": 22, "code": "(fn [s] (reduce + (map (fn [x] 1) s)))", "user": "513e39f9e4b02b2a3d8235bd"}, {"problem": 22, "code": "#(alength(to-array %))", "user": "5655d264e4b0f9d632dd8499"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "565b2fa5e4b068f2fe63dbfe"}, {"problem": 22, "code": "(partial reduce (fn [x _] (+ x 1)) 0)", "user": "55dd7f72e4b050e68259b3c4"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "565c89b1e4b068f2fe63dc15"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "565418ede4b0f9d632dd847d"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "55344b75e4b09218d5f44f99"}, {"problem": 22, "code": "(fn my-count [[x & xs]]\n  (if x\n    (inc (my-count xs))\n    0))", "user": "5393185ae4b0b51d73faaeb7"}, {"problem": 22, "code": "#(reduce (fn [i _] (inc i)) 0 %)", "user": "56508fe0e4b0284900eef6c1"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "565c8052e4b068f2fe63dc14"}, {"problem": 22, "code": "#(apply + (map (fn [x] 1) %))", "user": "565d57d7e4b068f2fe63dc22"}, {"problem": 22, "code": "(fn [s] (loop [a s i 0] (if (empty? a) i (recur (rest a) (inc i)))))", "user": "565dcec9e4b068f2fe63dc29"}, {"problem": 22, "code": "(fn [coll]\n  (loop [stack coll\n         num-elems 0]\n    (if (empty? stack)\n      num-elems\n      (recur (rest stack) (+ 1 num-elems)))))", "user": "562c2fc2e4b058fa18c5a6d7"}, {"problem": 22, "code": "#(reduce +(map(constantly 1)%))", "user": "565dddfae4b068f2fe63dc2b"}, {"problem": 22, "code": "(fn\n  [coll]\n  (reduce (fn [value coll]\n            (+ value 1))\n          0\n          coll))", "user": "565d8dcfe4b068f2fe63dc26"}, {"problem": 22, "code": "#(-> (map-indexed (fn [x y] x) %) (last) (inc))", "user": "565e0934e4b068f2fe63dc30"}, {"problem": 22, "code": "(fn [list]\n  ((fn [restlist n]\n    (if (= restlist '())\n      n\n      (recur (rest restlist) (inc n)))) list 0))", "user": "565eb771e4b068f2fe63dc36"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %1)", "user": "52a04fbfe4b04e0c58e87bc3"}, {"problem": 22, "code": "(fn mycount [xs]\n   (if (next xs)\n     (+ 1 (mycount (rest xs)))\n     1))", "user": "565ee190e4b068f2fe63dc38"}, {"problem": 22, "code": "#(reduce (fn[counter x]\n         (inc counter))\n         0 %)", "user": "565b4d7fe4b068f2fe63dc01"}, {"problem": 22, "code": "(fn[x] (reduce +(map(constantly 1)x)))", "user": "56452e17e4b0284900eef602"}, {"problem": 22, "code": "#(loop [counter 1, x %]\n    (if (next x)\n      (recur ( + 1 counter ) ( next x ))\n      counter ))", "user": "565c3f15e4b068f2fe63dc0c"}, {"problem": 22, "code": "(fn [x] (apply + (map #(let [a %] 1) x)))", "user": "565f525ce4b068f2fe63dc3e"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "565f5225e4b068f2fe63dc3d"}, {"problem": 22, "code": "(fn [arg] (reduce (fn [x y] (inc x)) 0 arg))", "user": "565f8fd2e4b068f2fe63dc41"}, {"problem": 22, "code": "(fn [s] \n  (#(if-let [r (next %)]\n     (recur r (+ 1 %2))\n     (+ 1 %2)) s 0))", "user": "565f9aece4b068f2fe63dc42"}, {"problem": 22, "code": "#(reduce (fn [x _] (inc x)) 0 %)", "user": "55024f3ae4b07d26eda61d87"}, {"problem": 22, "code": "#(.length (vec %))", "user": "565fad48e4b068f2fe63dc43"}, {"problem": 22, "code": "reduce (fn [acc e] (inc acc)) 0", "user": "564dc044e4b0284900eef685"}, {"problem": 22, "code": "#(loop [cnt 0 coll %]\n  (if (seq coll)\n    (recur (inc cnt) (rest coll))\n    cnt))", "user": "564dc062e4b0284900eef68c"}, {"problem": 22, "code": "reduce (fn [acc e] (inc acc)) 0", "user": "564dc08ae4b0284900eef68f"}, {"problem": 22, "code": "(fn count-seq [s]\r\n  (if (empty? s)\r\n    0\r\n    (inc (count-seq (rest s)))))", "user": "56602649e4b068f2fe63dc47"}, {"problem": 22, "code": "(fn [arg1]\n(cond\n(and (= arg1 (quote (1 2 3 3 1)))) 5\n(and (= arg1 \"Hello World\")) 11\n(and (= arg1 [[1 2] [3 4] [5 6]])) 3\n(and (= arg1 (quote (13)))) 1\n(and (= arg1 (quote (:a :b :c)))) 3\n))", "user": "565f2461e4b068f2fe63dc3b"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "56603e5fe4b068f2fe63dc4a"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "56605ddbe4b068f2fe63dc4c"}, {"problem": 22, "code": "(fn my-count\n  ([ls accum]\n  (if (empty? ls)\n    accum\n    (my-count (rest ls) (inc accum))))\n  ([ls]\n    (my-count ls 0)))", "user": "56607bbfe4b068f2fe63dc58"}, {"problem": 22, "code": "(fn [sq]\n  (loop [sqloc sq,  acc 0]\n    (if (empty? sqloc)\n      acc\n      (recur (rest sqloc) (+ acc 1)))))", "user": "566096bee4b068f2fe63dc59"}, {"problem": 22, "code": "(fn [coll]\n  (loop [c coll, acc 0]\n    (if (empty? c)\n      acc\n      (recur (rest c) (inc acc)))))", "user": "5660fe2ce4b068f2fe63dc5e"}, {"problem": 22, "code": "(fn [x]\n   (reduce + (map (fn [_] 1) x)))", "user": "5661292fe4b068f2fe63dc63"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5660a0c1e4b068f2fe63dc5b"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "565faf46e4b068f2fe63dc44"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %1))", "user": "530e9bd6e4b08068f379ecbe"}, {"problem": 22, "code": "#(reduce + (map (fn [x] '1) %))", "user": "56618ddfe4b068f2fe63dc6a"}, {"problem": 22, "code": "#(reduce (fn [acc e] (inc acc)) 0 %)", "user": "5661e09ae4b068f2fe63dc70"}, {"problem": 22, "code": "(fn cnt\n  ([stuff] (cnt stuff 0))\n  ([stuff n] (if (= (first stuff) nil) n (cnt (rest stuff) (+ n 1)))))", "user": "56620138e4b068f2fe63dc71"}, {"problem": 22, "code": "reduce (fn [acc seq] (+ acc 1)) 0", "user": "559ff9eee4b0acc240e314ee"}, {"problem": 22, "code": "(fn [list]\n  (loop [remain list num 0]\n    (if (or (= remain '()) (= remain \"\") (= remain []))\n      num\n      (recur (rest remain) (inc num)))))", "user": "5662a5eee4b0e91d5f5c564b"}, {"problem": 22, "code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "5662d47fe4b0e91d5f5c564d"}, {"problem": 22, "code": "(fn [x] (reduce (fn [acc, x] (+ acc 1)) 0 x))", "user": "56627acde4b0e91d5f5c5648"}, {"problem": 22, "code": "#(alength (to-array %))", "user": "5662ca50e4b0e91d5f5c564c"}, {"problem": 22, "code": "(fn foo [x]\n  (letfn [(bar [x y] (if (empty? x) y (bar (rest x) (+ y 1))))]\n  (bar x 0)\n  )\n)", "user": "54a708e9e4b09f271ff37c92"}, {"problem": 22, "code": "#(alength (to-array %))", "user": "565fe434e4b068f2fe63dc45"}, {"problem": 22, "code": "reduce (fn[c _] (inc c)) 0", "user": "5650082fe4b0284900eef6b7"}, {"problem": 22, "code": "#(alength (to-array %))", "user": "566470b9e4b0e91d5f5c5658"}, {"problem": 22, "code": "(fn [sek] (reduce (fn [new ignr] (inc new)) 0 sek))", "user": "565d6d34e4b068f2fe63dc23"}, {"problem": 22, "code": "(fn [x]\n  (loop \n    [x x\n     y 0]\n    (if (empty? x)\n      y\n    (recur (rest x) (inc y)))\n    )\n )", "user": "5650ac8be4b0284900eef6c2"}, {"problem": 22, "code": "(fn ct [l] (if (empty? l) 0 (+ 1  (ct (rest l)))))", "user": "5664b81de4b0e91d5f5c5659"}, {"problem": 22, "code": "#(loop [lst %1 n 0]\n   (if (empty? lst)\n     n\n     (recur (rest lst) (inc n))))", "user": "563afd5ae4b0bfe05bf11809"}, {"problem": 22, "code": "(fn [x] (reduce + (map (fn [y] 1) x)))", "user": "5656e039e4b0f9d632dd84a3"}, {"problem": 22, "code": "#(reduce + (map (fn [avs] 1) %))", "user": "5646bb8fe4b0284900eef614"}, {"problem": 22, "code": "(fn [coll]\n  (reduce (fn [x y] (inc x)) 0 coll))", "user": "5665cdb4e4b0e91d5f5c5663"}, {"problem": 22, "code": "(fn foo [lizt] (if (empty? lizt) 0 (+ 1 (foo (rest lizt)))))", "user": "5665f435e4b0e91d5f5c5665"}, {"problem": 22, "code": "reduce (fn [x _] (inc x)) 0", "user": "5666500ee4b0e91d5f5c566d"}, {"problem": 22, "code": "(fn [arg1]\n(cond\n(and (= arg1 (quote (1 2 3 3 1)))) 5\n(and (= arg1 \"Hello World\")) 11\n(and (= arg1 [[1 2] [3 4] [5 6]])) 3\n(and (= arg1 (quote (13)))) 1\n(and (= arg1 (quote (:a :b :c)))) 3\n))", "user": "5666bf34e4b04acd4f672dc2"}, {"problem": 22, "code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "54c6ad6ae4b045293a27f62f"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "566713e0e4b04acd4f672dc7"}, {"problem": 22, "code": "#(reduce (fn [x y] (+ x 1)) 0 %)", "user": "56671a4de4b04acd4f672dca"}, {"problem": 22, "code": "(fn\n  [collection]\n  (loop [coll collection\n        size 0]\n    (if (= (first coll) nil)\n      size\n      (recur (rest coll)(+ size 1)))))", "user": "56618424e4b068f2fe63dc67"}, {"problem": 22, "code": "(fn [s] ((fn f [[i & r] c] (if (nil? i) c (f r (+ c 1)))) s 0))", "user": "56662275e4b0e91d5f5c566a"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "566733d6e4b04acd4f672dcb"}, {"problem": 22, "code": "#(reduce (fn [a b] (inc a)) 0 %)\n\n;#(loop [thing % c 0]\n;   (if (= (first thing) nil)\n;     c\n;     (recur (rest thing) (inc c))))", "user": "56677192e4b04acd4f672dd5"}, {"problem": 22, "code": "(fn cnt [xs] (if (empty? xs) 0 (inc (cnt (rest xs)))))", "user": "5665fce9e4b0e91d5f5c5668"}, {"problem": 22, "code": "reduce (fn [x y] (inc x)) 0", "user": "56671996e4b04acd4f672dc9"}, {"problem": 22, "code": "(fn [x] (alength (to-array x)))", "user": "5666c2dbe4b04acd4f672dc3"}, {"problem": 22, "code": "(fn [xs] (last (last (map vector xs (iterate inc 1)))))", "user": "5667d635e4b04acd4f672ddb"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5667fb28e4b04acd4f672dde"}, {"problem": 22, "code": "#(loop [coll %\n        iter 0]\n   (if (empty? coll)\n     iter\n     (recur (rest coll) (inc iter))))", "user": "56685a73e4b04acd4f672de5"}, {"problem": 22, "code": "#(alength (to-array %))", "user": "566734c4e4b04acd4f672dcc"}, {"problem": 22, "code": "(fn cnt [xs]\n  (if (first xs)\n    (+ 1 (cnt (rest xs)))\n    0\n    )\n  )", "user": "56686edce4b04acd4f672dea"}, {"problem": 22, "code": "(fn [coll] (reduce (fn [sum _] (inc sum)) 0 coll))", "user": "56689103e4b04acd4f672df0"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "566888e4e4b04acd4f672ded"}, {"problem": 22, "code": "#(loop [array % index 0]\n   (if (empty? array)\n   \tindex\n   (recur (rest array) (inc index))))", "user": "566899f4e4b04acd4f672df4"}, {"problem": 22, "code": "#(reduce +\n         (map (fn [g] 1)\n              %))", "user": "56688cd5e4b04acd4f672def"}, {"problem": 22, "code": "(fn [xs] (reduce + (map (fn [_] 1) xs)))", "user": "5668dcc6e4b04acd4f672df8"}, {"problem": 22, "code": "#(reduce (fn [counter _] (inc counter)) 0 %)", "user": "56481722e4b0284900eef628"}, {"problem": 22, "code": "reduce (fn [size _] (inc size)) 0", "user": "566639f4e4b0e91d5f5c566b"}, {"problem": 22, "code": "(fn [xs] (reduce (fn [x y] (inc x)) 0 xs))", "user": "53f52215e4b0db01ade6f9cc"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "55ddcc52e4b050e68259b3d2"}, {"problem": 22, "code": "(fn [s] \n  (loop [c 0\n         s s]\n    (if (empty? s) \n      c\n      (recur (inc c) \n             (drop 1 s)))))", "user": "55a9fe1ce4b0988bba2ad947"}, {"problem": 22, "code": "(fn [x] (reduce + (map (fn [a] 1) x )))", "user": "4f71ac00e4b07046d9f4f010"}, {"problem": 22, "code": "(fn count-a-sequence [lat] \n  (reduce (fn [x y] (+ x 1)) 0 lat))", "user": "56688983e4b04acd4f672dee"}, {"problem": 22, "code": "(fn [s] (reduce + (map (fn [s] 1) s)))", "user": "5669dcd9e4b04acd4f672e01"}, {"problem": 22, "code": "(fn [n]\n  (loop [coll n sum 0]\n    (if (empty? coll)\n      sum\n      (recur (drop 1 coll) (+ sum 1)))))", "user": "5668aad0e4b04acd4f672df5"}, {"problem": 22, "code": "(fn [xs] (reduce + (map (fn [_] 1) xs)))", "user": "566a3a26e4b0a866af689699"}, {"problem": 22, "code": "(fn testing [coll] \n  (loop [c coll n 0]\n        (if (empty? c)\n            n\n            (recur (rest c) (inc n))\n        )\n  ))", "user": "56603c7fe4b068f2fe63dc49"}, {"problem": 22, "code": "(fn [s]\n  (loop [s s cnt 0]\n    (if (nil? s)\n      cnt\n      (recur (next s) (inc cnt)))))", "user": "566a6e38e4b0a866af68969b"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %1)", "user": "5661b0a9e4b068f2fe63dc6f"}, {"problem": 22, "code": "(fn [s] \n  (reduce (fn [c _] (inc c)) 0 s)\n)", "user": "566ab1a5e4b0a866af6896a1"}, {"problem": 22, "code": "(fn [s]\n  (loop [remaining s, i 0]\n    (if (empty? remaining)\n      i\n      (recur (next remaining) (inc i))\n      )\n    )\n  )", "user": "549ffeade4b0f3d1d8e70fb2"}, {"problem": 22, "code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "566b2cb1e4b0a866af6896aa"}, {"problem": 22, "code": "(fn [input] (reduce + 0 (map #(if (= % %) 1 0) input)))", "user": "5669eb9ae4b04acd4f672e02"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "566b7a77e4b0a866af6896af"}, {"problem": 22, "code": "(fn [coll] (reduce + (map #(if (nil? %) 1 1) coll)))", "user": "5669facde4b04acd4f672e04"}, {"problem": 22, "code": "(fn ([c]\n  (.length (vec c))) )", "user": "56689295e4b04acd4f672df1"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "56658570e4b0e91d5f5c565f"}, {"problem": 22, "code": "(fn [x] (loop [l x res 0]\n  (if (seq l)\n    (recur (rest l) (+ res 1))\n    res))\n)", "user": "566bd453e4b0a866af6896b7"}, {"problem": 22, "code": "#(reduce (fn [n a] (+ n 1)) 0 %)", "user": "566b5c14e4b0a866af6896ae"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5259451ce4b0cb4875a45cd7"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "566c728be4b0a866af6896bc"}, {"problem": 22, "code": "#(reduce (fn [length _] (+ length 1)) 0 %)", "user": "566cf904e4b0a866af6896c5"}, {"problem": 22, "code": "#(loop [n 0, arr %]\n   (if (= (rest arr) ())\n      (+ n 1)\n      (recur (+ n 1) (rest arr))))", "user": "566cd399e4b0a866af6896c3"}, {"problem": 22, "code": "(fn f [[e & es]]\n  (if (nil? es)\n    1\n    (+ 1 (f es))))", "user": "56483562e4b0284900eef629"}, {"problem": 22, "code": "(fn my-count [coll]\n  (loop [total 0 coll coll]\n    (if (nil? (first coll)) total\n      (recur\n        (inc total) (rest coll)))))", "user": "566e5e8de4b0a866af6896d9"}, {"problem": 22, "code": "(fn [col] (reduce  (fn [pre nex] (inc pre)) 0 col) )", "user": "55f68468e4b06e875b46ce94"}, {"problem": 22, "code": "(fn [xs] (reduce (fn [s e] (+ s 1)) 0 xs))", "user": "566669d8e4b0e91d5f5c566f"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "566064cae4b068f2fe63dc50"}, {"problem": 22, "code": "#(reduce (fn[x y] (inc x)) 0 %)", "user": "566fa059e4b0a866af6896ea"}, {"problem": 22, "code": "#(inc (apply max (map-indexed (fn [i x] i) %1)))", "user": "56540485e4b0f9d632dd847a"}, {"problem": 22, "code": "(fn my-count [x]\n  (if (not x)\n    0\n    (+ 1 (my-count (next x)))))", "user": "566e3af2e4b0a866af6896d5"}, {"problem": 22, "code": "#(inc (second (last (map list % (range)))))", "user": "566caad9e4b0a866af6896c0"}, {"problem": 22, "code": "(fn [lst]\n  (loop [i lst cnt 0]\n   (cond (empty? i) cnt\n     :t (recur (rest i)(inc cnt)))))", "user": "56703845e4b0a866af6896ee"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "55cbd29be4b0e31453f64a0a"}, {"problem": 22, "code": "(fn [coll]\n  (loop [cnt 0\n         coll coll]\n    (if-not (first coll)\n      cnt\n      (recur (inc cnt) (rest coll)))))", "user": "51441ce7e4b0b4fb4ace5f41"}, {"problem": 22, "code": "(fn [x] (+ 1 (first (last (map-indexed vector x)))))", "user": "566e55fce4b0a866af6896d7"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "567072fbe4b0a866af6896f3"}, {"problem": 22, "code": "(fn [coll] (loop [n 0 coll coll] (if (empty? coll) n (recur (+ n 1) (rest coll)))))", "user": "56708d8ce4b0a866af6896f6"}, {"problem": 22, "code": "(fn mc [x]\n  (if (empty? x)\n    0\n    (let [x-r (rest x)]\n      (loop [x-r x-r i 1]\n        (if (empty? x-r)\n          i\n          (recur (rest x-r) (+ i 1)))))))", "user": "56714922e4b05957ce8c6107"}, {"problem": 22, "code": "(fn [arr] \n  (reduce + (map \n             (fn [_] 1) \n             arr)))", "user": "5671ccb5e4b05957ce8c610d"}, {"problem": 22, "code": "(fn [x]\n     (loop [cnt 0, list x]\n       (if (empty? list)\n         cnt\n         (recur (inc cnt) (next list)))))", "user": "56669819e4b0e91d5f5c5674"}, {"problem": 22, "code": "(fn [list]\n  (last (map #(inc %2) list (range))))", "user": "5640eb50e4b08d4f616f5eec"}, {"problem": 22, "code": "(fn seq-count [l]\n   (letfn [(sqc [ls cnt]\n             (if (nil? (next ls))\n               (+ 1 cnt) \n               (sqc (rest ls) (inc cnt))))]\n     (sqc l 0)))", "user": "5670ef43e4b0a866af6896fc"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "54ee34c2e4b024c67c0cf870"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5672f58fe4b05957ce8c611a"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5673c886e4b05957ce8c6123"}, {"problem": 22, "code": "(fn [s]\n  (loop [r s \n         cnt 0]\n    (if (empty? r) cnt\n    \t(recur (rest r) (inc cnt)))))", "user": "56742817e4b05957ce8c612d"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5674477ce4b05957ce8c6134"}, {"problem": 22, "code": "(fn [x]\n  (loop [s x n 0]\n    (if (empty? s) n (recur (rest s) (inc n)))))", "user": "564a5a09e4b0284900eef656"}, {"problem": 22, "code": "(fn cnt [xs] (if (empty? xs) 0 (+ 1 (cnt (rest xs)))))", "user": "5672a711e4b05957ce8c6117"}, {"problem": 22, "code": "(fn [coll] (reduce (fn [c _] (inc c)) 0 coll))", "user": "566b57e9e4b0a866af6896ad"}, {"problem": 22, "code": "(fn total [coll]\n  (reduce (fn [x _] (inc x)) 0 coll))", "user": "567478fbe4b05957ce8c613a"}, {"problem": 22, "code": "#(reduce + (map (fn [zief] 1) %))", "user": "56748b2ce4b05957ce8c613d"}, {"problem": 22, "code": "#(reduce (fn [x y] (+ 1 x)) 0 %)", "user": "5674a100e4b05957ce8c6142"}, {"problem": 22, "code": "#(loop [s % i 0] (if (empty? s) i (recur (rest s) (inc i))))", "user": "567447a2e4b05957ce8c6135"}, {"problem": 22, "code": "reduce (fn [a _] (inc a)) 0", "user": "5674f874e4b05957ce8c6144"}, {"problem": 22, "code": "reduce (fn [xs item] (inc xs)) 0", "user": "56754c4be4b05957ce8c6149"}, {"problem": 22, "code": "(fn [seq] (reduce (fn [a b] (inc a)) 0 seq))", "user": "567476bde4b05957ce8c6139"}, {"problem": 22, "code": "#(reduce (fn [a _] (inc a)) 0 %)", "user": "5675a817e4b05957ce8c614a"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "55e8a2b4e4b0121d4835fd97"}, {"problem": 22, "code": "(fn [seq] (reduce + 0 (map (fn [x] 1) seq)))", "user": "565da79be4b068f2fe63dc28"}, {"problem": 22, "code": "(fn [lst] (loop [n 0 l lst]\n            (cond \n               (empty? l) n\n               :else (recur (inc n) (rest l)))))", "user": "55efb51ee4b066087aa9453b"}, {"problem": 22, "code": "(fn cnt [s] (if (empty? s) 0 (inc (cnt (rest s)))))", "user": "5675f2f4e4b05957ce8c6153"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "55e81430e4b0121d4835fd88"}, {"problem": 22, "code": "reduce (fn [acc _] (inc acc)) 0", "user": "56761ab1e4b05957ce8c6154"}, {"problem": 22, "code": "#(loop [i (first %) remainder (rest %) _count 0]                                                                                                                                                                                                          \n                (if (nil? i)                                                                                                                                                                                                                                         \n                    _count                                                                                                                                                                                                                                            \n                    (recur (first remainder) (rest remainder) (inc _count))                                                                                                                                                                                           \n                )                                                                                                                                                                                                                                                    \n            )", "user": "56667178e4b0e91d5f5c5671"}, {"problem": 22, "code": "#(alength (to-array %))", "user": "56765beae4b05957ce8c6156"}, {"problem": 22, "code": "(fn [coll]\n  (loop [xs coll\n         res 1]\n    (let [item (first xs)\n          tail (rest xs)] \n      (if (seq tail)\n        (recur tail (inc res))\n        res))))", "user": "5675cdf1e4b05957ce8c614d"}, {"problem": 22, "code": "(fn [col]\n  (loop [col col,\n         counter 0]\n    (if (nil? col)\n      counter\n      (recur (next col) (inc counter)))))", "user": "56732c84e4b05957ce8c611c"}, {"problem": 22, "code": "(fn [xs] ((fn [xs n] (if (nil? (first xs)) n (recur (rest xs) (+ n 1)))) xs 0))", "user": "5673998ce4b05957ce8c6121"}, {"problem": 22, "code": "(fn [col]\n  (apply + (map (fn [x] 1) col)))", "user": "5676cdf9e4b05957ce8c615b"}, {"problem": 22, "code": "#(loop [in % out 0] (if (empty? in) out (recur (rest in) (+ out 1))))", "user": "565dd7d7e4b068f2fe63dc2a"}, {"problem": 22, "code": "(fn [lst]\n  (->> lst (map (constantly 1)) (reduce +)))", "user": "567695c2e4b05957ce8c6157"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "56771b31e4b05957ce8c6163"}, {"problem": 22, "code": "reduce (fn [n x] (inc n)) 0", "user": "56706f01e4b0a866af6896f2"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "567798afe4b05957ce8c6169"}, {"problem": 22, "code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "5676de0fe4b05957ce8c615d"}, {"problem": 22, "code": "reduce #(and %2 (inc %1)) 0", "user": "566812f0e4b04acd4f672de1"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "55b66ebce4b01b9910ae2996"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5676af21e4b05957ce8c6158"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5677f5dee4b05957ce8c616e"}, {"problem": 22, "code": "(fn [coll] (reduce + (map (constantly 1) coll)))", "user": "566f7749e4b0a866af6896e9"}, {"problem": 22, "code": "(fn my-count [coll]\n  (if (empty? coll)\n    0\n    (+ 1 (my-count (rest coll)))))", "user": "52860baae4b0239c8a67ae09"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "54aa2462e4b09f271ff37cb4"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "56781ab6e4b05957ce8c6171"}, {"problem": 22, "code": "(fn [s](reduce + (map (fn[_] 1) s)))", "user": "5677f9ffe4b05957ce8c616f"}, {"problem": 22, "code": "(fn [x] (reduce (fn[x y] (+ x 1)) 0 x))", "user": "567952b3e4b05957ce8c6185"}, {"problem": 22, "code": "(fn [coll] (reduce (fn [accum x] (inc accum)) 0 coll))", "user": "567874f3e4b05957ce8c617c"}, {"problem": 22, "code": "#(loop [col % nbr 1]\n   (if (empty? (rest col))\n     nbr\n     (recur (rest col) (inc nbr))))", "user": "56795deae4b05957ce8c6187"}, {"problem": 22, "code": "reduce (fn [sum val] (inc sum)) 0", "user": "5679a02ee4b05957ce8c618c"}, {"problem": 22, "code": "#(reduce (fn [x,y] (inc x)) 0 %)", "user": "56798d83e4b05957ce8c618b"}, {"problem": 22, "code": "(fn cnt [s]\n  ((fn tcnt [s l]\n     (if (seq s)\n       (recur (next s) (inc l))\n       l))\n   s 0))", "user": "5649b1b0e4b0284900eef646"}, {"problem": 22, "code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "56781f16e4b05957ce8c6173"}, {"problem": 22, "code": "#(reduce (fn [acc n] (inc acc)) 0 %)", "user": "567af6e2e4b05957ce8c61a0"}, {"problem": 22, "code": "(fn my_count\n  ([l] (my_count l 0))\n  ([l n] (if l (my_count (next l) (inc n)) n)))", "user": "567b39b6e4b05957ce8c61a3"}, {"problem": 22, "code": "#(reduce\n\t(fn [current-count elem] (+ current-count 1))\n\t0\n  \t%)", "user": "567b4641e4b05957ce8c61a5"}, {"problem": 22, "code": "(fn [collection]\n  (reduce (fn [x y] (+ x 1)) 0 collection)\n  )", "user": "567b62fce4b05957ce8c61a6"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5427b477e4b01498b1a71b27"}, {"problem": 22, "code": "#(. (vec %) size)", "user": "567b903be4b05957ce8c61a8"}, {"problem": 22, "code": "(fn [ss] (loop [s ss c 0] (if (seq s) (recur (rest s) (inc c)) c)))", "user": "5679a4d0e4b05957ce8c618d"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "567c63f6e4b05957ce8c61bb"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "567c7fefe4b05957ce8c61bc"}, {"problem": 22, "code": "(fn [coll] (reduce (fn [x _] (inc x)) 0 coll))", "user": "567c2322e4b05957ce8c61af"}, {"problem": 22, "code": "(fn numel[x] (if (empty? x) 0 (inc (numel (rest x)))))", "user": "55293c48e4b0ffed3738f946"}, {"problem": 22, "code": "#(loop [col %\n        i 0]\n   (if (empty? col)\n     i\n     (recur (rest col) (inc i))))", "user": "567cef8ce4b05957ce8c61c1"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "52ff7424e4b0d8b024fd3708"}, {"problem": 22, "code": "reduce (fn [cc _] (inc cc)) 0", "user": "567d132ee4b05957ce8c61c3"}, {"problem": 22, "code": "#(\n  reduce + (map (fn [x]\n        1)\n  %)\n  )", "user": "566648e6e4b0e91d5f5c566c"}, {"problem": 22, "code": "(fn [coll] (reduce (fn [n _] (inc n)) 0 coll))", "user": "567dbfe0e4b05957ce8c61cc"}, {"problem": 22, "code": "#(reduce (fn [x y] (+ x 1)) 0 %)", "user": "567931e9e4b05957ce8c6184"}, {"problem": 22, "code": "(fn conta [s]\n  (if (empty? s)\n    0\n    (+ 1 (conta (rest s)))\n  )\n)", "user": "567debb5e4b05957ce8c61ce"}, {"problem": 22, "code": "(fn [coll] (alength (to-array coll)))", "user": "567d18c9e4b05957ce8c61c4"}, {"problem": 22, "code": "(fn cnt [l]\n  (loop [_list l _count 0]\n    (if (empty? _list)\n      _count\n      (recur (rest _list) (inc _count))\n      )\n    )\n  )", "user": "567e418fe4b0feffd0d18eb1"}, {"problem": 22, "code": "reduce (fn [a b] (+ a 1)) 0", "user": "567b9ff7e4b05957ce8c61a9"}, {"problem": 22, "code": "(fn foo [plist]\n  (if (empty? plist)\n    0\n    (+ 1 (foo (rest plist)))))", "user": "566df171e4b0a866af6896d2"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "567ea95de4b0feffd0d18eb6"}, {"problem": 22, "code": "(fn [s] \n  (loop [s s c 0]\n    (if (first s)\n      (recur (rest s) (+ 1 c))\n      c\n      )))", "user": "5647ffdae4b0284900eef626"}, {"problem": 22, "code": "(fn cnt [collection] (if (empty? collection) 0 (+ 1 (cnt (rest collection)))))", "user": "56791447e4b05957ce8c6183"}, {"problem": 22, "code": "(fn [seq']\n  (loop [[x & xs] seq'\n         result 0]\n    (if (empty? xs) \n      (inc result)\n      (recur xs (inc result)))))", "user": "567bf820e4b05957ce8c61ad"}, {"problem": 22, "code": "(fn [coll]\n  (loop [coll coll n 0]\n    (if (= (seq coll) nil)\n      n\n      (recur (rest coll) (inc n)))))", "user": "567ea403e4b0feffd0d18eb5"}, {"problem": 22, "code": "(fn [x] (loop [j x\n               i 0]\n          (if-not (first j)\n            i\n            (recur (rest j) (inc i)))))", "user": "567f034be4b0feffd0d18eba"}, {"problem": 22, "code": "#(reduce (fn [acc _] (inc acc)) 0 %)", "user": "4f4fc570e4b03ad3f0c10cea"}, {"problem": 22, "code": "(fn [s] (reduce (fn [acc n] (inc acc)) 0 s))", "user": "5151a2c4e4b03e678e393ad1"}, {"problem": 22, "code": "(fn [a-seq]\n  (loop [counter 0 \n         the-seq a-seq]\n    (if (empty? the-seq)\n      \tcounter\n      \t(recur (inc counter) (rest the-seq))\n      )\n    )\n)", "user": "56747b46e4b05957ce8c613b"}, {"problem": 22, "code": "(fn [lst]\n  (loop [n 0\n         rem lst]\n    (if (empty? rem)\n      n\n      (recur (inc n) (rest rem))\n     )\n    )\n  )", "user": "56804d03e4b0966858e4d8ec"}, {"problem": 22, "code": "(fn [y] (reduce + (map (fn [x] 1) y)))", "user": "567d70b6e4b05957ce8c61c8"}, {"problem": 22, "code": "#(loop [c % i 0]\n   (if (empty? c)\n     i\n     (recur (rest c) (inc i))))", "user": "565fe49ee4b068f2fe63dc46"}, {"problem": 22, "code": "#((fn f [n x xs] (if (.isEmpty xs) n (f (+ n 1) (first xs) (rest xs)))) 1 (first %1) (rest %1))", "user": "567ffd69e4b0966858e4d8e7"}, {"problem": 22, "code": "(fn l [c] (if (empty? c) 0 (+ (l (rest c)) 1)))", "user": "56800ba1e4b0966858e4d8e8"}, {"problem": 22, "code": "(fn f [x] (if (empty? x) 0 (+ 1 (f (rest x)))))", "user": "5680fff3e4b0966858e4d8f6"}, {"problem": 22, "code": "#(reduce (fn [acc _] (+ acc 1)) 0 %)", "user": "5675eaaee4b05957ce8c6150"}, {"problem": 22, "code": "(fn [a-seq]\n  (loop [n 0 a-seq a-seq]\n    (if (first a-seq)\n      (recur (inc n) (rest a-seq))\n      n)))", "user": "5680104ae4b0966858e4d8ea"}, {"problem": 22, "code": "(fn mycount [seq] (if (empty? seq) 0 (+ 1 (mycount (rest seq)))))", "user": "5681afaae4b0945ebc182a87"}, {"problem": 22, "code": "reduce (fn [n _] (inc n)) 0", "user": "55cfd041e4b0e31453f64a33"}, {"problem": 22, "code": "(fn [x]\n  (loop [tally 0\n         myseq x]\n    (println tally)\n    (if (empty? myseq)\n      tally\n      (recur (inc tally) (rest myseq)))))", "user": "56646a7fe4b0e91d5f5c5657"}, {"problem": 22, "code": "#(loop [result 0 c %]\n    (if(empty? c) result\n    (recur (inc result) (rest c))))", "user": "5681009ae4b0966858e4d8f7"}, {"problem": 22, "code": "#(loop [ar % cnt 0]\n   (if (empty? ar)\n     cnt\n     (recur (next ar) (inc cnt))\n   )\n)", "user": "56814cbce4b0945ebc182a81"}, {"problem": 22, "code": "reduce (fn [a b] (+ 1 a)) 0", "user": "5665fca4e4b0e91d5f5c5667"}, {"problem": 22, "code": "(fn mycount \n  ([elements total]\n   (if (empty? elements)\n     total\n   \t(mycount (rest elements) (+ total 1))))\n  ([elements]\n  \t(mycount elements 0)))", "user": "56822f37e4b0945ebc182a8d"}, {"problem": 22, "code": "reduce #(inc % #_%&) 0", "user": "555c38d9e4b0b056612e2249"}, {"problem": 22, "code": "#(reduce (fn [a b] (inc a)) 0 %)", "user": "568227fee4b0945ebc182a8a"}, {"problem": 22, "code": "#(reduce (fn [x y] (+ x 1)) 0 %)", "user": "52658b29e4b03e8d9a4a710c"}, {"problem": 22, "code": "(fn [col]\n  (reduce (fn [acc-res elem]\n            (inc acc-res))\n          0\n          col))", "user": "567abc97e4b05957ce8c619d"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "566efb2be4b0a866af6896e2"}, {"problem": 22, "code": "(fn [xs]\n  (loop [s xs, acc 1]\n    (if (not(next s))\n      acc\n      (recur (next s) (inc acc))\n    )\n  )\n)", "user": "5682d5b4e4b0945ebc182a95"}, {"problem": 22, "code": "(fn [xs]\n  (reduce + (map (fn [x] 1) xs)))", "user": "5681fe64e4b0945ebc182a88"}, {"problem": 22, "code": "#(loop [x % c 0]\n   (if (empty? x) \n     c\n     (recur (rest x) (inc c))\n   )   \n)", "user": "56815e2fe4b0945ebc182a84"}, {"problem": 22, "code": "#(reduce (fn [counter next] (+ 1 counter)) 0 %)", "user": "567f988be4b0feffd0d18ebe"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "56810479e4b0966858e4d8f8"}, {"problem": 22, "code": "#(loop [e %\n        i 0]\n   (if (= e '())\n     i\n     (recur (rest e) (inc i))))", "user": "5683f51de4b0945ebc182aa6"}, {"problem": 22, "code": "#(reduce (fn [x y] (+ x 1)) 0 %)", "user": "5683fc85e4b0945ebc182aa7"}, {"problem": 22, "code": "(fn count-elements [seqn]\n  (reduce (fn [n m] (+ n 1)) 0 seqn))", "user": "5683e0c6e4b0945ebc182aa3"}, {"problem": 22, "code": "(fn [coll]\n    ((fn [rcoll cnt]\n      (if  (empty? rcoll) cnt (recur (rest rcoll) (+ cnt 1)) )) coll 0))", "user": "567f2bc6e4b0feffd0d18ebb"}, {"problem": 22, "code": "(fn\n  [x]\n  (reduce (fn [c _] (inc c)) 0 x))", "user": "56844e4be4b062072dfb8acb"}, {"problem": 22, "code": "#(reduce (fn [x y] (+ x 1)) 0 %)", "user": "55664bb5e4b0c656e3ff1833"}, {"problem": 22, "code": "#(reduce (fn [n _] (inc n)) 0 %)", "user": "568242bfe4b0945ebc182a8f"}, {"problem": 22, "code": "(fn [s] (loop [coll s acc 0] (if (empty? coll) acc (recur (rest coll) (inc acc)))))", "user": "5684e200e4b04eec3ec5cfc4"}, {"problem": 22, "code": "(fn f [l] \n  (if (= (first l) nil)\n    0\n    (+ 1 (f (rest l)))\n    )\n  )", "user": "568513c4e4b04eec3ec5cfc5"}, {"problem": 22, "code": "(fn count'\n  [[x & xs]]\n  (if x\n    (+ 1 (count' xs)) 0))", "user": "56784adbe4b05957ce8c6176"}, {"problem": 22, "code": "#(apply + (map (fn [c] 1) %))", "user": "54d03a17e4b018d918be98e0"}, {"problem": 22, "code": "reduce (fn [a _] (inc a)) 0", "user": "56629e86e4b0e91d5f5c564a"}, {"problem": 22, "code": "(fn [sq]  (reduce + (map (fn [x] 1) sq)))", "user": "5663cccee4b0e91d5f5c5655"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c))0 %)", "user": "5686640ae4b0dcc4269f4050"}, {"problem": 22, "code": "(fn [arg] (reduce + (map (fn [x] 1) arg))),", "user": "568571e7e4b04eec3ec5cfca"}, {"problem": 22, "code": "(fn f [[a & b]] (if b (+ 1 (f b)) 1))", "user": "5683d2a9e4b0945ebc182aa0"}, {"problem": 22, "code": "reduce (fn [a _] (inc a)) 0", "user": "5686b7c7e4b0dcc4269f4057"}, {"problem": 22, "code": "(fn mylast [a] \n   (loop[y 1, t (rest a)]\n     (if(empty? t)\n       \ty\n       \t(recur (inc y) (rest t))\n       )))", "user": "56874171e4b0dcc4269f405c"}, {"problem": 22, "code": "(fn [coll]\n  (loop [col coll counter 0]\n    (if (= nil (first col))\n      counter\n      (recur (rest col) (inc counter)))))", "user": "56877fcbe4b0dcc4269f405e"}, {"problem": 22, "code": "reduce (fn [sum _] (+ sum 1)) 0", "user": "545bc5a8e4b01be26fd74658"}, {"problem": 22, "code": "(fn [a-seq]\n  (loop [sx  a-seq\n         cnt 0]\n    (if (empty? sx)\n      cnt\n      (recur (rest sx) (inc cnt)))))", "user": "56795625e4b05957ce8c6186"}, {"problem": 22, "code": "(fn [lst] (apply + (map (fn [x] 1) lst)))", "user": "5686e652e4b0dcc4269f4059"}, {"problem": 22, "code": "(fn countSeq [s] (if (empty? s) 0 (+ (countSeq (rest s)) 1)))", "user": "568820e8e4b0dcc4269f4067"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5687e398e4b0dcc4269f4062"}, {"problem": 22, "code": "#(loop [myseq (seq %)\n        mycount 0]\n   (if (empty? myseq)\n     mycount\n     (recur (rest myseq)\n            (inc mycount))))", "user": "5688a147e4b0dcc4269f406e"}, {"problem": 22, "code": "(fn my-count [x]\n  (letfn ([do-count [y n]\n           (if-let [r (next y)]\n             (recur r (+ 1 n))\n             n)])\n    (if (empty? x)\n      0\n      (do-count x 1))))", "user": "5688a01be4b0dcc4269f406d"}, {"problem": 22, "code": "(fn my-count [seq]\n  (let [my-count-inner (fn [seq this-count] (if (empty? seq) this-count (recur (rest seq) (inc this-count))))]\n    (my-count-inner seq 0)))", "user": "56889672e4b0dcc4269f406c"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "536d24ece4b0fc7073fd6e54"}, {"problem": 22, "code": "reduce (fn [i _] (inc i)) 0", "user": "5687fe58e4b0dcc4269f4065"}, {"problem": 22, "code": "(fn [coll]\n    (reduce + (map (fn [x] (if nil? x) 0 1) coll)))", "user": "5683eaa0e4b0945ebc182aa4"}, {"problem": 22, "code": "(fn [coll] (loop [coll coll n 0]\n             (if (empty? coll) n\n               (recur (rest coll) (inc n)))))", "user": "56885c32e4b0dcc4269f4068"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "55ee7977e4b0121d4835fdee"}, {"problem": 22, "code": "#(apply + (map (fn [x] 1) %1))", "user": "56066e82e4b08b23635d3173"}, {"problem": 22, "code": "reduce (fn [x y] (inc x)) 0", "user": "56897739e4b0dcc4269f407d"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5689911be4b0dcc4269f407f"}, {"problem": 22, "code": "(fn [lst]\n  (loop [to-count lst total 0]\n    (if (empty? to-count)\n      total\n      (recur (rest to-count) (inc total)))))", "user": "5689c269e4b0dcc4269f4083"}, {"problem": 22, "code": "#(loop [lst % acc 0]\n   (if (empty? lst)\n     acc\n     (recur (rest lst) (inc acc))))", "user": "5688d6a8e4b0dcc4269f4071"}, {"problem": 22, "code": "(fn count-seq [xs]\n  (loop [xs xs n 0]\n    (if (empty? xs)\n      n\n      (recur (rest xs) (inc n)))))", "user": "5689fd03e4b0dcc4269f4088"}, {"problem": 22, "code": "reduce (fn [i _] (inc i)) 0", "user": "4f9123e1e4b0dcca54ed6c97"}, {"problem": 22, "code": "(fn me [x]\n     (let [y (into () x)]\n          ((fn temp [z]\n              (if (= z ())\n                  0\n                  (+ 1 (temp (rest z))))) y)))", "user": "568a743ee4b0dcc4269f408e"}, {"problem": 22, "code": "(fn c [l] (cond (empty? l) 0 :otherwise (+ 1 (c (rest l)))))", "user": "568b0142e4b0dcc4269f40a0"}, {"problem": 22, "code": "(fn [s]\n  (loop [in s c 0]\n    (if (empty? in)\n      c\n      (recur (rest in) (+ c 1))\n    )))", "user": "567257d7e4b05957ce8c6110"}, {"problem": 22, "code": "(fn [li]\n  ((fn [li1 n]\n     (if\n      (empty? li1)\n      n\n      (recur\n       (rest li1)\n       (+ n 1))))\n       li 0))", "user": "568b781be4b0dcc4269f40a5"}, {"problem": 22, "code": "#( reduce +(map (constantly 1) %))", "user": "567c48e6e4b05957ce8c61b8"}, {"problem": 22, "code": "(fn [x](loop [[part & remaining] x\n\t   counter 1]\n\t\t(if (= remaining nil)\n\t\t\tcounter\n        \t(recur remaining (inc counter)))))", "user": "56879ea4e4b0dcc4269f405f"}, {"problem": 22, "code": "(fn compte [col]\n  (loop [curr-col col compteur 0]\n    (if (empty? curr-col)\n      compteur\n      (recur (rest curr-col) (inc compteur))\n      )\n    )\n  )", "user": "5640fb97e4b08d4f616f5eef"}, {"problem": 22, "code": "(fn [xs]\n  (loop [reduced-list xs\n         c 0]\n    (if (empty? reduced-list)\n      c\n      (recur (rest reduced-list) (inc c)))))", "user": "55dbc7cde4b050e68259b3a4"}, {"problem": 22, "code": "(fn [xs]\n  (reduce\n   (fn [length _]\n     (+ 1 length))\n   0\n   xs))", "user": "568c4bc8e4b0dcc4269f40b2"}, {"problem": 22, "code": "(fn my-count [s]\n  (reduce (fn [c v] (+ c 1)) 0 s))", "user": "568c74d8e4b0dcc4269f40b5"}, {"problem": 22, "code": "(fn [s] (last (last (map #(vector %1 %2) s (iterate inc 1)))))", "user": "568a62b6e4b0dcc4269f408c"}, {"problem": 22, "code": "#(let [a (atom %1) \n      idx (atom 1)] \n  (while (not= (rest @a) []) \n    (swap! a rest)\n    (swap! idx inc)\n    ) @idx)", "user": "4ddf597a535d08e6dec9fddf"}, {"problem": 22, "code": "reduce (fn [x y] (inc x)) 0", "user": "568cdedce4b0dcc4269f40bb"}, {"problem": 22, "code": "(fn [s] (+ 1 (first (last (map-indexed vector s)))))", "user": "55c2367ee4b0e31453f64978"}, {"problem": 22, "code": "#(reduce (fn [acc e] (inc acc)) 0 %)", "user": "568ab45ae4b0dcc4269f4095"}, {"problem": 22, "code": "(partial\n(fn [n coll]\n  (if (empty? coll)\n    n\n    (recur (inc n) (rest coll)))) 0)", "user": "568d2ca5e4b0dcc4269f40c0"}, {"problem": 22, "code": "(fn [xs] \n  (loop [x 0 ys xs]\n    (if (empty? ys)\n      x\n      (recur (+ x 1) (rest ys)))))", "user": "568c2d96e4b0dcc4269f40af"}, {"problem": 22, "code": "(fn [s]  \n  (let [n 0\n        f (fn count-elems [s n] (if (first s) (count-elems (rest s) (inc n))  n))]\n    (f s n)))", "user": "568d4742e4b0dcc4269f40c2"}, {"problem": 22, "code": "(fn [v] \n  (loop [c v cnt 0] \n    (if (empty? c) \n      cnt \n    (recur (rest c) (inc cnt)))))", "user": "51be00cae4b0ff155d51d2b8"}, {"problem": 22, "code": "(fn [sqnc]\n  (reduce +\n          (map (fn [x] 1) sqnc)))", "user": "566f3e18e4b0a866af6896e7"}, {"problem": 22, "code": "#(reduce (fn [sum element] (inc sum)) 0 %)", "user": "568d99e3e4b0dcc4269f40c8"}, {"problem": 22, "code": "(fn [s] (reduce (fn [acc n] (+ acc 1)) 0 s))", "user": "5673881fe4b05957ce8c6120"}, {"problem": 22, "code": "#(reduce (fn [acc n] (inc acc)) 0 %)", "user": "568c92c6e4b0dcc4269f40b8"}, {"problem": 22, "code": "reduce (fn [base diff] (inc base)) 0", "user": "52e5f810e4b09f7907dd1468"}, {"problem": 22, "code": "(fn [y] (reduce + (map (fn [x] 1) y)))", "user": "566b5150e4b0a866af6896ac"}, {"problem": 22, "code": "#(reduce (fn [ret, x]\n          (inc ret))\n        0\n        %)", "user": "55f85b93e4b03cbcff9738ae"}, {"problem": 22, "code": "#(reduce (fn[v coll](inc v)) 0 %)", "user": "568e450fe4b0dcc4269f40d0"}, {"problem": 22, "code": "#(reduce (fn [v _] (inc v)) 0 %)", "user": "56743413e4b05957ce8c612e"}, {"problem": 22, "code": "#(loop [col %1, n 0]\n   (if-not (first col)\n     n\n     (recur (next col) (inc n)))\n  )", "user": "5552780ce4b0deb715856df4"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "568eae43e4b0dcc4269f40d9"}, {"problem": 22, "code": "(fn _count [v] (if (empty? v) 0 (+ 1 (_count (rest v)) ) ))", "user": "568d8f3ce4b0dcc4269f40c7"}, {"problem": 22, "code": "(fn my-count [lstr] (if (empty? lstr)\n                        0\n                        (inc (my-count (rest lstr)))))", "user": "568e1871e4b0dcc4269f40cc"}, {"problem": 22, "code": "(fn my-count [x]\n  (if (empty? x)\n    0\n    (inc (my-count (next x)))))", "user": "568f0db0e4b0dcc4269f40dd"}, {"problem": 22, "code": "(fn my-count\n  [collection]\n  \n  (loop [in collection out 0]\n    \n    (if (empty? in)\n      out\n      (recur (rest in)\n             (inc out)))))", "user": "568aa458e4b0dcc4269f4092"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "562fbf87e4b0ab312c17ebdb"}, {"problem": 22, "code": "#(reduce (fn [one two] (+ one (if (nil? two) 0 1))) 0 %)", "user": "56901211e4b0dcc4269f40e7"}, {"problem": 22, "code": "(partial reduce (fn [x & _] (+ x 1)) 0)", "user": "56902dfae4b0dcc4269f40ea"}, {"problem": 22, "code": "#(inc (first (last (map-indexed vector %))))", "user": "566b8946e4b0a866af6896b0"}, {"problem": 22, "code": "#(apply + (map (constantly 1) %))", "user": "5651654be4b0f9d632dd845a"}, {"problem": 22, "code": "(fn [n] (loop [n n acc 0] (if (= n '()) acc (recur (rest n) (inc acc)))))", "user": "568bb02de4b0dcc4269f40a8"}, {"problem": 22, "code": "reduce (fn [a b] (inc a)) 0", "user": "56912f93e4b0dcc4269f40ef"}, {"problem": 22, "code": "(fn [s] (reduce (fn [n _] (+ n 1)) 0 s))", "user": "566835fde4b04acd4f672de3"}, {"problem": 22, "code": "reduce (fn [a _] (inc a)) 0", "user": "4ff8487be4b0678c553fc397"}, {"problem": 22, "code": "(fn recur-count ([arg]\n                 (recur-count arg 0))\n                 ([arg start]\n                  (if (empty? arg)\n                    start\n                    (recur-count (rest arg) (inc start)))))", "user": "5691ef12e4b0dcc4269f40f8"}, {"problem": 22, "code": "#(loop [s %, i 0]\n\t(if (empty? s)\n\ti\n\t(recur (rest s) (inc i))))", "user": "568cea39e4b0dcc4269f40bc"}, {"problem": 22, "code": "(fn [coll] (loop [coll coll acc 0] (if (empty? coll) acc (recur (rest coll) (inc acc)))))", "user": "4e268c6e535deb9a81d77ef4"}, {"problem": 22, "code": "(fn\n  [lst]\n  (loop [i 0\n         [el & remaining] lst]\n    (if (nil? el)\n      i\n      (recur (inc i) remaining))))", "user": "5693383fe4b0dcc4269f4100"}, {"problem": 22, "code": "(fn [coll] (reduce (fn [x y] (+ x 1)) 0 coll))", "user": "566a8600e4b0a866af68969d"}, {"problem": 22, "code": "(fn [x] (- (reduce (fn [x y] (+ x 1)) 1 x) 1))", "user": "569381a5e4b0dcc4269f4104"}, {"problem": 22, "code": "#(.size (vec %))", "user": "52e1c276e4b09f7907dd142b"}, {"problem": 22, "code": "#(apply + (map (fn [x] 1) %))", "user": "568d381ee4b0dcc4269f40c1"}, {"problem": 22, "code": "(fn len [xs]\n  (if (last xs)\n    (inc (len (rest xs)))\n    0\n    ))", "user": "5693a53ee4b0dcc4269f4106"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5694a50fe4b0dcc4269f4121"}, {"problem": 22, "code": "#(reduce (fn [x _] (inc x)) 0 %)", "user": "5673f804e4b05957ce8c6126"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5694eeb1e4b0dcc4269f4124"}, {"problem": 22, "code": "#(reduce (fn [a b] (inc a)) 0 %)", "user": "5695b589e4b0dcc4269f412a"}, {"problem": 22, "code": "#(reduce +(map (fn [x] 1) %))", "user": "558826fee4b059ccff29b1ef"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "56949fc5e4b0dcc4269f4120"}, {"problem": 22, "code": "(fn [xs] (reduce (fn [acc _] (inc acc)) 0 xs))", "user": "56946d43e4b0dcc4269f411e"}, {"problem": 22, "code": "#(reduce + (map(fn [x] 1)%))", "user": "5569ca7ce4b09a3098a524db"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "56962e91e4b0dcc4269f412f"}, {"problem": 22, "code": "(fn [xs] (reduce + 0 (map (fn [x] 1) xs)))", "user": "56967bc0e4b0dcc4269f4131"}, {"problem": 22, "code": "(fn [lst] (reduce (fn [total, nextVal] (+ total 1)) 0 lst))", "user": "5694290fe4b0dcc4269f4110"}, {"problem": 22, "code": "#(reduce + (map (fn [_] 1) %))", "user": "5696ed98e4b0dcc4269f4137"}, {"problem": 22, "code": "(fn count_ [colls]\n  (loop [colls_ (seq colls) n_ 0]\n    (if (seq? colls_)\n      (recur (seq (drop 1 colls_)) (inc n_))\n      n_)))", "user": "5657fed1e4b0f9d632dd84ae"}, {"problem": 22, "code": "(fn [l]\n  (loop [items l c 0]\n    (if (empty? items)\n      c\n      (recur (rest items) (inc c)))))", "user": "56972819e4b0e0b3d3318caa"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "568bde71e4b0dcc4269f40ab"}, {"problem": 22, "code": "(fn lud-count\n  ([coll] (lud-count 0 coll))\n  ([n coll]\n   (if (not (empty? coll))\n     (recur (inc n) (rest coll))\n     n)))", "user": "55e206f3e4b050e68259b429"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "569783bde4b0e0b3d3318cab"}, {"problem": 22, "code": "reduce (fn [x _] (inc x)) 0", "user": "560d7336e4b05f002753df3f"}, {"problem": 22, "code": "(fn [x] (reduce + (map (constantly 1) x)) )", "user": "56979bb7e4b0e0b3d3318cac"}, {"problem": 22, "code": "#(reduce (fn [itung x]\n                  (inc itung))\n              0 %)", "user": "56193c6ee4b053970a773af2"}, {"problem": 22, "code": "(partial reduce (fn [c _] (inc c)) 0)", "user": "5591cc56e4b0604b3f94d582"}, {"problem": 22, "code": "reduce (fn [x y] (+ 1 x)) 0", "user": "569951e4e4b0542e1f8d143e"}, {"problem": 22, "code": "(fn a [x] (if (empty? x) 0 (+ 1 (a (rest x)))))", "user": "56992162e4b0542e1f8d143c"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "569a29e1e4b0542e1f8d1444"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "55bf785ee4b01b9910ae2a14"}, {"problem": 22, "code": "(fn [l] (reduce (fn [v _] (inc v)) 0 l))", "user": "569a60c7e4b0542e1f8d1445"}, {"problem": 22, "code": "(fn [x]\n  (reduce + (map #(if (nil? %) 0 1) x))\n)", "user": "5699fa5ce4b0542e1f8d1443"}, {"problem": 22, "code": "( fn [arg]\n   (loop [c 0 a (seq arg)]\n     (if (empty? a)\n       (int c)\n       (recur (inc c) (rest a))))\n   )", "user": "5683b67ce4b0945ebc182a9f"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "569ac9a7e4b0542e1f8d144c"}, {"problem": 22, "code": "(fn [l] (loop [r (rest l) c 0]\n            (if (empty? r)\n              (+ c 1)\n              (recur (rest r) (+ c 1)))))", "user": "569aca1ee4b0542e1f8d144d"}, {"problem": 22, "code": "(fn [arg](reduce (fn [x, y] (+ x 1)) 0 arg))", "user": "569ad037e4b0542e1f8d144f"}, {"problem": 22, "code": "(fn [z] (reduce + (map (fn [x] 1) z)))", "user": "51baaa33e4b0fe3ecfb4643b"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "569b86b3e4b0542e1f8d1454"}, {"problem": 22, "code": "#(reduce (fn [t x] (+ t 1)) 0 %1)", "user": "54f14381e4b024c67c0cf8ad"}, {"problem": 22, "code": "#(loop [l % cnt 0]\n   (if (empty? l)\n     cnt\n     (recur (rest l) (inc cnt))))", "user": "569b84f8e4b0542e1f8d1453"}, {"problem": 22, "code": "(fn [x] (loop [s x i 0] (if (empty? s) i (recur (rest s) (inc i)))))", "user": "569adec2e4b0542e1f8d1450"}, {"problem": 22, "code": "#((fn f [L n] (if (empty? L) n (f (rest L) (inc n)))) % 0)", "user": "569c07b9e4b0542e1f8d145d"}, {"problem": 22, "code": "(fn [col]\n  (reduce + (map (fn [_] 1) col)))", "user": "569c40cee4b0542e1f8d1462"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "56990b68e4b0542e1f8d143a"}, {"problem": 22, "code": "#(reduce\n   (fn [x y]\n     (inc x)) 0 %)", "user": "54ec58f6e4b024c67c0cf852"}, {"problem": 22, "code": "(fn [s]\n  (loop [s s\n         c 0]\n    (if (empty? s)\n      c\n      (recur (rest s) (inc c)))))", "user": "569b885de4b0542e1f8d1455"}, {"problem": 22, "code": "reduce (fn [c _](inc c)) 0", "user": "56899934e4b0dcc4269f4080"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "569b4ff7e4b0542e1f8d1451"}, {"problem": 22, "code": "(fn counter [x] (if (empty? x) 0 (+ 1 (counter (rest x)))))", "user": "569da949e4b0542e1f8d147e"}, {"problem": 22, "code": "(fn [coll]\n   (loop [[head & tail] coll\n         result 1]\n     (if (empty? tail)\n       result\n       (recur tail (inc result)))\n     ))", "user": "55a31e3fe4b0acc240e31531"}, {"problem": 22, "code": "reduce (fn [x _] (inc x)) 0", "user": "5692e1dfe4b0dcc4269f40ff"}, {"problem": 22, "code": "(fn myCount [c] \n  (reduce (fn [acc e] (inc acc)) 0 c))", "user": "56936547e4b0dcc4269f4101"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "569d2985e4b0542e1f8d1475"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "546a892ae4b00cfc9eacc15c"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 (vec %))", "user": "569ed6a8e4b0542e1f8d1489"}, {"problem": 22, "code": "reduce (fn [n _] (inc n)) 0", "user": "569ed695e4b0542e1f8d1488"}, {"problem": 22, "code": "#(reduce (fn [a b] (inc a)) 0 %)", "user": "569f4dabe4b0542e1f8d1491"}, {"problem": 22, "code": "#(reduce (fn [acc a] (inc acc)) 0 %1)", "user": "56824e1be4b0945ebc182a91"}, {"problem": 22, "code": "(fn toll [l]\n  (if\n    (empty? l)\n    0\n    (inc (toll (rest l)))\n   )\n  )", "user": "569f8736e4b0542e1f8d1495"}, {"problem": 22, "code": "(fn inner [col] \n\t\t(if (empty? col)\n\t\t\t0\n\t\t\t(inc (inner (rest col)))))", "user": "568fecc6e4b0dcc4269f40e6"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5697d946e4b0542e1f8d142a"}, {"problem": 22, "code": "(fn recursivecount [sqn] ( if (= sqn '()) 0 (+ 1 (recursivecount (rest sqn)))))", "user": "569f99cce4b0542e1f8d1497"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5696a99ae4b0dcc4269f4133"}, {"problem": 22, "code": "reduce (fn [i _] (inc i)) 0", "user": "569f33c7e4b0542e1f8d148f"}, {"problem": 22, "code": "reduce (fn [a b] (+ a 1)) 0", "user": "569fe597e4b0542e1f8d149b"}, {"problem": 22, "code": "(fn [lst]\n  (reduce (fn [a b] (inc a)) 0 lst))", "user": "50c385a8e4b00e537d00254d"}, {"problem": 22, "code": "(partial reduce (fn [n _] (inc n)) 0)", "user": "56a0a85fe4b0542e1f8d14a5"}, {"problem": 22, "code": "#(loop [items % cnt 0] (if (empty? items) cnt (recur (rest items) (inc cnt))))", "user": "569ef93de4b0542e1f8d148b"}, {"problem": 22, "code": "#(loop [c 0 v %]\n  (if (empty? v)\n    c\n    (recur (inc c) (rest v))))", "user": "569ff6dbe4b0542e1f8d149c"}, {"problem": 22, "code": "reduce (fn [x y] (inc x)) 0", "user": "55e20451e4b050e68259b428"}, {"problem": 22, "code": "(fn rec [l]\n  (if (empty? l)\n    0\n    (inc (rec (rest l)))))", "user": "56a1227fe4b0542e1f8d14ac"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "569bda8ee4b0542e1f8d145a"}, {"problem": 22, "code": "#(reduce (fn [x y]\n          (inc x)) 0 %)", "user": "5695e96ae4b0dcc4269f412c"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "56a0ac99e4b0542e1f8d14a6"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "56a1b854e4b0542e1f8d14b2"}, {"problem": 22, "code": "(fn [%]\n (loop [cnt 0 lst %]\n    (if (empty? lst) cnt \n    (recur (inc cnt) (rest lst)))))", "user": "569ce6fee4b0542e1f8d146c"}, {"problem": 22, "code": "#(reduce (fn [n _] (inc n)) 0 %)", "user": "559e38b2e4b08a52bd4f97d2"}, {"problem": 22, "code": "#(reduce + (map (fn [x] (quote 1)) %))", "user": "56a28726e4b0542e1f8d14c2"}, {"problem": 22, "code": "(fn [col] (reduce (fn [n x] (inc n)) 0 col))", "user": "5167e8ace4b0c5a4140a309a"}, {"problem": 22, "code": "#(loop [s %\n        c 0]\n   (if (empty? s)\n     c\n     (recur (rest s) (inc c))))", "user": "56903cb9e4b0dcc4269f40eb"}, {"problem": 22, "code": "(fn [xs] (reduce + (map (fn [_] 1) xs)))", "user": "569f491de4b0542e1f8d1490"}, {"problem": 22, "code": "(fn mcount [sq]\n  (if (empty? sq)\n    0\n    (inc (mcount (rest sq)))\n  )\n)", "user": "56a2777be4b0542e1f8d14bf"}, {"problem": 22, "code": "(fn [a] (loop [cnt 0 e a] (if (empty? e) cnt (recur (inc cnt) (rest e)))))", "user": "567c994fe4b05957ce8c61be"}, {"problem": 22, "code": "(fn r-count [x]\n  (loop [x x n 0]\n    (if (empty? x) n (recur (rest x) (inc n)))))", "user": "5689bd04e4b0dcc4269f4082"}, {"problem": 22, "code": "reduce (fn [n _] (inc n)) 0", "user": "56869344e4b0dcc4269f4053"}, {"problem": 22, "code": "#(reduce (fn [accum, x] (inc accum)) 0 %)", "user": "56a38a4ce4b0542e1f8d14cc"}, {"problem": 22, "code": "(fn [items]\n  (loop [slength 0\n         my-keys items\n         ]\n    (if (seq my-keys)\n      (recur (+ slength 1) (rest my-keys)\n             )\n      slength)\n    )\n  )", "user": "56826c2fe4b0945ebc182a92"}, {"problem": 22, "code": "#(inc (first(last(map-indexed vector %))))", "user": "56165702e4b06b1bb2182a02"}, {"problem": 22, "code": "(fn [ x ]\n  \n(reduce (fn [sum x] (inc sum) ) ;f-tion\n        0 ; initial value \n        x; array\n        ) \n  \n  );END: fn", "user": "56a358d0e4b0542e1f8d14c9"}, {"problem": 22, "code": "(fn [e] (reduce + (map-indexed (fn [i v] (/ (inc i) (inc i))) e)))", "user": "5686e811e4b0dcc4269f405a"}, {"problem": 22, "code": "(fn length [x]\n  (cond\n   (empty? x) 0\n   :else (+ 1 (length (rest x)))))", "user": "569db01de4b0542e1f8d147f"}, {"problem": 22, "code": "(fn [x] ((fn [x i] (if x (recur (next x) (inc i)) i)) x 0))", "user": "56a01895e4b0542e1f8d149f"}, {"problem": 22, "code": "#(loop [s %1 cnt 0]\n   (if (empty? s)\n     cnt\n     (recur (rest s) (inc cnt))))", "user": "56012cd7e4b04bb52996e17d"}, {"problem": 22, "code": "(fn [coll] (reduce (fn [acc a] (+ acc 1)) 0 (seq coll)))", "user": "51a7bf26e4b0da5f497bde8c"}, {"problem": 22, "code": "(fn [seq] \n  (reduce (fn [acc n] (+ acc 1)) 0 seq))", "user": "56a51f26e4b0542e1f8d14e0"}, {"problem": 22, "code": "(fn [coll]\n  (reduce (fn [acc x] (+ acc 1)) 0 coll))", "user": "56a45fcee4b0542e1f8d14dc"}, {"problem": 22, "code": "#(loop [x % n 0] (if (empty? x) n (recur (rest x) (inc n))))", "user": "56887bcbe4b0dcc4269f406a"}, {"problem": 22, "code": "(fn [x] \n  (loop [l x,c 0]\n    (if (empty? l) \n      c\n      (recur (rest l) (inc c)))))", "user": "56a6051fe4b0542e1f8d14e5"}, {"problem": 22, "code": "reduce (fn [x, y] (+ x 1)) 0", "user": "56a4ec0ee4b0542e1f8d14dd"}, {"problem": 22, "code": "(fn [col] (apply + (map (constantly 1) col)))", "user": "56a69451e4b0542e1f8d14ec"}, {"problem": 22, "code": "#(reduce (fn [c _] (+ 1 c)) 0 %)", "user": "55fc838be4b0f488688e0674"}, {"problem": 22, "code": "reduce (fn [ x _] (+ 1 x)) 0", "user": "55f9b2b6e4b03cbcff9738c8"}, {"problem": 22, "code": "#(reduce (fn [a _] (inc a)) 0 %)", "user": "56a72c0de4b0542e1f8d14f7"}, {"problem": 22, "code": "(fn [coll]\n  (reduce (fn [cnt _] (inc cnt))\n          0\n          coll))", "user": "56a79eb0e4b07966d5a8a05d"}, {"problem": 22, "code": "(fn [l] (reduce #(+ %1 (first '(1 %2))) 0 l))", "user": "56a75810e4b0542e1f8d14fc"}, {"problem": 22, "code": "reduce (fn[memo _](inc memo))0", "user": "56a7d7afe4b07966d5a8a065"}, {"problem": 22, "code": "#(reduce (fn [a  b] (+ a 1)) 0 %)", "user": "4f19621a535d64f603146466"}, {"problem": 22, "code": "(fn [coll]\n  (loop [coll coll ct 0]\n    (if-let [h (first coll)]\n      (recur (rest coll) (inc ct))\n      ct)))", "user": "56a76f36e4b07966d5a8a05b"}, {"problem": 22, "code": "(fn [x]\n  (loop [a x d 0]\n    (if (empty? a)\n      d\n      (recur (rest a) (inc d))\n      )\n    )\n  )", "user": "56a7ef10e4b07966d5a8a067"}, {"problem": 22, "code": "(fn\n  [coll]\n  (reduce (fn [store cur] (+ store 1))\n          0\n          coll))", "user": "56a79421e4b07966d5a8a05c"}, {"problem": 22, "code": "(fn [L]\n    (#(if (empty? %1) %2 (recur (rest %1) (inc %2)))\n      L 0))", "user": "56503470e4b0284900eef6ba"}, {"problem": 22, "code": "(partial (fn [ acc coll] (if (empty? coll) acc (recur (+ 1 acc) (rest coll)))) 0)", "user": "5243233fe4b076204b44faac"}, {"problem": 22, "code": "(fn myFn [x] (if (seq x)(+ 1 (myFn (rest x))) 0))", "user": "56a908aee4b07966d5a8a06e"}, {"problem": 22, "code": "(fn [coll]\n  (loop [n 0\n         c coll]\n    (if (empty? c) n (recur (inc n) (rest c))))\n  )", "user": "56a94562e4b07966d5a8a074"}, {"problem": 22, "code": "(fn [l] (reduce (fn [p n] (inc p)) 0 l))", "user": "56a946bbe4b07966d5a8a075"}, {"problem": 22, "code": "(fn[w](reduce + (map #(if-not % 0 1) w)))", "user": "5638d2d1e4b0bfe05bf117eb"}, {"problem": 22, "code": "(fn \n          [xs]\n          (reduce #(+ %1 %2) 0 (map (fn [x] 1) (seq xs))))", "user": "5697fda8e4b0542e1f8d142c"}, {"problem": 22, "code": "#(inc (last (map-indexed (fn [i x] i) %)))", "user": "56070aebe4b08b23635d317c"}, {"problem": 22, "code": "(let [cnt\n\t(fn cnt [s c]\n  \t\t(if (empty? s)\n      \tc\n      \t(cnt (rest s) (+ 1 c))))]\n  \t(fn [s]\n    \t(cnt s 0)))", "user": "56aa448ce4b07966d5a8a083"}, {"problem": 22, "code": "(fn my-count [c]\n  (loop [c c n 0]\n    (if (seq c) (recur (rest c) (inc n)) n)))", "user": "569ab3e2e4b0542e1f8d144a"}, {"problem": 22, "code": "(partial reduce (fn[x _] (inc x)) 0)", "user": "56aad332e4b03c432f187337"}, {"problem": 22, "code": "#(reduce (fn [acc x] (+ acc 1)) 0 %)", "user": "563cdfdfe4b0bfe05bf11840"}, {"problem": 22, "code": "#(inc (last (map-indexed (fn [idx elt] idx) %)))", "user": "5688e403e4b0dcc4269f4072"}, {"problem": 22, "code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "56ac81ace4b03c432f187347"}, {"problem": 22, "code": "(fn c [l]\n  (if (empty? l)\n    0\n    (+ 1 (c (rest l)))))", "user": "56acca9ae4b03c432f18734c"}, {"problem": 22, "code": "(fn len [l]\n  (if (empty? l)\n    0\n    (+ 1 (len (rest l)))\n  )\n)", "user": "56acc4b9e4b03c432f18734b"}, {"problem": 22, "code": "reduce (fn [a _] (inc a)) 0", "user": "56aca340e4b03c432f187349"}, {"problem": 22, "code": "(fn [list]\n  (letfn [(size [xs n] (if (empty? xs) n (size (rest xs) (+ n 1))))]\n    (size list 0)\n    )\n  )", "user": "5612d91ee4b05f002753df97"}, {"problem": 22, "code": "(fn [v]\n  (loop [v v\n         n 0]\n    (if (empty? v)\n      n\n      (recur (rest v) (+ n 1)))))", "user": "55fbc657e4b0f488688e0666"}, {"problem": 22, "code": "(fn [lat] (reduce (fn [x _] (+ x 1)) 0 lat))", "user": "56ad9cfae4b03c432f187354"}, {"problem": 22, "code": "#(reduce (fn [x y] (+ x 1)) 0 %)", "user": "56adfd0de4b03c432f187358"}, {"problem": 22, "code": "(fn count-seq\n  ([xs]\n  \t(count-seq xs 0))\n  ([xs acc]\n  \t(if (empty? xs)\n      acc\n      (count-seq (rest xs) (inc acc)))))", "user": "56ae6776e4b03c432f18735e"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %1)", "user": "56aee4abe4b03c432f187364"}, {"problem": 22, "code": "#(loop [s % c 0]\n   (if (nil? (first s))\n     c\n     (let [cnt (+ 1 c)]\n       (recur (rest s) cnt))))", "user": "56add892e4b03c432f187355"}, {"problem": 22, "code": "(fn [xs] ((fn [xs n] (if (= xs ()) n (recur (rest xs) (+ n 1)))) xs 0))", "user": "56abaf0be4b03c432f187341"}, {"problem": 22, "code": "reduce (fn [x y] (inc x)) 0", "user": "56ae4c21e4b03c432f18735c"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "56a9f5c4e4b07966d5a8a07d"}, {"problem": 22, "code": "(fn [a] ((fn r [x y] (if (empty? x) y (r (drop 1 x) (inc y)))) a 0))", "user": "56aed78fe4b03c432f187363"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "569637d8e4b0dcc4269f4130"}, {"problem": 22, "code": "(fn jb-count [s]\n  (loop [i 0]\n    (if (get (vec s) i)\n      (recur (inc i))\n      i\n    )\n  )\n)", "user": "56a70f28e4b0542e1f8d14f4"}, {"problem": 22, "code": "#(alength (into-array %))", "user": "56afb527e4b061e3ca319ad7"}, {"problem": 22, "code": "#(loop [s % c 0]\n   (if (empty? s) c\n     (recur (rest s) (inc c))))", "user": "56ae7589e4b03c432f187360"}, {"problem": 22, "code": "(fn count2 [[h & t]] (if (nil? t) 1 (+ 1 (count2 t))))", "user": "5609d328e4b05f002753deee"}, {"problem": 22, "code": "(fn [xs] (apply + (map (fn [x] 1) xs)))", "user": "569dd6e8e4b0542e1f8d1480"}, {"problem": 22, "code": "#(loop [c %1\n        n 0]\n   (if (empty? c)\n     n\n     (recur (rest c) (inc n))))", "user": "56ae214ce4b03c432f18735a"}, {"problem": 22, "code": "(fn [l]\n  (loop\n    [x 0\n     l l]\n    (if (empty? l)\n      x\n      (recur (inc x) (rest l)))))", "user": "56b09f9ce4b0982f16b37ddc"}, {"problem": 22, "code": "(fn my-count\n  [xs]\n    (reduce (fn [c _] (inc c)) 0 xs))", "user": "56af5f74e4b061e3ca319acf"}, {"problem": 22, "code": "reduce (fn[x, y] (+ x 1)) 0", "user": "554ccc3ae4b0a04f792995af"}, {"problem": 22, "code": "#(loop [i 0 data %1] (if (empty? data) i (recur (+ i 1) (rest data))))", "user": "56af842de4b061e3ca319ad2"}, {"problem": 22, "code": "(partial reduce (fn [cnt _] (inc cnt)) 0)", "user": "56b1ab17e4b0982f16b37df1"}, {"problem": 22, "code": "#(reduce (fn[acc, _] (inc acc)) 0 %1)", "user": "56b12c53e4b0982f16b37de6"}, {"problem": 22, "code": "#(reduce (fn [x _] (inc x)) 0 %)", "user": "56b19566e4b0982f16b37df0"}, {"problem": 22, "code": "(fn [x]\n    (loop [n 0 xx x]\n          (if (empty? xx)\n            n\n            (recur (+ n 1) (rest xx)))))", "user": "56a1fce9e4b0542e1f8d14b7"}, {"problem": 22, "code": "(fn cnt\n  ( [coll] (cnt coll 0) )\n  ( [coll c] (if (empty? coll)\n               c\n               (recur (rest coll) (inc c))\n              )\n   )\n)", "user": "56b280e3e4b0982f16b37e06"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "56b2b26ce4b0982f16b37e09"}, {"problem": 22, "code": "reduce (fn [a b](+ a 1)) 0", "user": "5693cc39e4b0dcc4269f4108"}, {"problem": 22, "code": "(fn [coll]\n  (reduce #(do %& (inc %1)) 0 coll))", "user": "55ed5a2de4b0121d4835fdd8"}, {"problem": 22, "code": "(fn \n  [coll]\n  (letfn [(size \n            [coll]\n            (if (empty? coll)\n              0\n              (inc (size (rest coll)))))]\n    (size coll)))", "user": "56a36f76e4b0542e1f8d14ca"}, {"problem": 22, "code": "#(reduce (fn [x, coll] (inc x)) 0 %)", "user": "56b3146ae4b0982f16b37e0f"}, {"problem": 22, "code": "#(reduce (fn [x _] (inc x)) 0 %)", "user": "56b18445e4b0982f16b37dee"}, {"problem": 22, "code": "#(reduce (fn [cout _]\n           (inc cout))\n         0\n         %)", "user": "55af3e6be4b03311e7b732c7"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "56b35565e4b0982f16b37e16"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5673db87e4b05957ce8c6125"}, {"problem": 22, "code": "(fn cnt [seq] (if (empty? seq) 0 (+ 1 (cnt (rest seq)))))", "user": "56b36283e4b0982f16b37e18"}, {"problem": 22, "code": "#(loop [l (vec %) c 0] \n  (if (empty? l) \n    c\n    (recur (pop l) (inc c)))\n  )", "user": "56b41972e4b0982f16b37e1f"}, {"problem": 22, "code": "(fn haha [s] (loop [se s l 0] (if (empty? se) l (recur (rest se) (inc l)))))", "user": "56b49f72e4b0982f16b37e23"}, {"problem": 22, "code": "#(letfn [(count2 [xs i]\n                 (if\n                   (empty? xs) i\n                   (count2 (rest xs) (inc i))))]\n   (count2 % 0))", "user": "56b295f7e4b0982f16b37e08"}, {"problem": 22, "code": "(fn [a]\n  (loop [my-seq a\n         acc 0]\n    (if (empty? my-seq)\n      acc\n      (recur (rest my-seq) (inc acc)))))", "user": "5655e056e4b0f9d632dd849b"}, {"problem": 22, "code": "#((fn n [x y] (if (empty? x) y (n (rest x) (+ y 1)))) % 0)", "user": "56b53fbce4b0982f16b37e30"}, {"problem": 22, "code": "(fn [o-s]\n  (loop [s o-s\n         c 0]\n    (if (empty? s)\n      c\n      (recur (next s) (+ c 1)))))", "user": "55c4b23de4b0e31453f649a3"}, {"problem": 22, "code": "#(alength (to-array %))", "user": "56b5019ce4b0982f16b37e2c"}, {"problem": 22, "code": "(fn my-count [xs]\n  (loop [xs2 xs\n         n 0]\n    (if (= xs2 '())\n      n\n      (recur (rest xs2) (+ n 1)))))", "user": "56b619e7e4b0982f16b37e39"}, {"problem": 22, "code": "reduce (fn [x y] (inc x)) 0", "user": "56b66eb7e4b0982f16b37e3b"}, {"problem": 22, "code": "(fn func [x]\n  (if (first x)\n    (+ 1 (func (rest x)))\n    0)\n   )", "user": "56b00ebfe4b061e3ca319adf"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "56a9ea17e4b07966d5a8a07c"}, {"problem": 22, "code": "(fn [lis] (reduce + (map (fn [el] 1) lis)))", "user": "56b6e354e4b0982f16b37e41"}, {"problem": 22, "code": "#(reduce + (map (fn [n] 1) %))", "user": "555d4421e4b0a2eb076a39a8"}, {"problem": 22, "code": "(fn [arg]\n\n    (loop [input arg\n           counta 0]\n      (if (empty? input)\n        counta\n        (let [[first & remain] input]\n        \n          (recur remain\n                 (inc counta)))\n        )\n      ))", "user": "56b7c32ee4b0982f16b37e48"}, {"problem": 22, "code": "#(reduce (fn [ c _ ] (inc c)) 0 %)", "user": "567d75ebe4b05957ce8c61c9"}, {"problem": 22, "code": "(fn my-count [xs]\n  (if (not (empty? xs))\n    (+ 1 (my-count (rest xs)))\n    0))", "user": "569ce7e6e4b0542e1f8d146d"}, {"problem": 22, "code": "#(reduce (fn [acc n] (inc acc)) 0 %)", "user": "56826ebce4b0945ebc182a93"}, {"problem": 22, "code": "(fn [x]\n  ((fn [x acc] \n    (if (nil? x) acc\n    (recur (next x) (inc acc)))) x 0))", "user": "56b86e64e4b0f26550335924"}, {"problem": 22, "code": "(fn [ls]\n  (loop [counter 0 ls-rest ls]\n    (if (empty? ls-rest)\n      counter\n      (recur (inc counter) (rest ls-rest)))))", "user": "56452f52e4b0284900eef603"}, {"problem": 22, "code": "(fn [col] (apply + (map (fn [_] 1) col)))", "user": "56b965d9e4b0f26550335931"}, {"problem": 22, "code": "(partial reduce (fn [n _] (+ n 1)) 0)", "user": "56b97792e4b0f26550335932"}, {"problem": 22, "code": "#(loop [coll % asize 0]\n  \t(if (empty? coll)\n    \tasize\n    \t(recur (rest coll) (inc asize))))", "user": "56b9d20ee4b0f2655033593b"}, {"problem": 22, "code": "#(loop [l 0, s %]\n   (if-not s \n     l\n     (recur (inc l) (next s))\n   )\n)", "user": "53bd476ae4b0d9a98559a6ca"}, {"problem": 22, "code": "(fn [lst]\n  (loop [i lst cnt 0]\n   (cond (empty? i) cnt\n     :t (recur (rest i)(inc cnt)))))", "user": "56b94357e4b0f2655033592e"}, {"problem": 22, "code": "#(+ 1 (apply max (map key (apply hash-map (interleave  (range 14) %1)))))", "user": "56b80ad1e4b0f26550335921"}, {"problem": 22, "code": "(fn outer [m]\n((fn myCount [l n] \n\t(if (= l '())\n\t\tn\n\t\t(myCount (rest l) (+ n 1))\n\t\t)\n\t) m 0))", "user": "56ba5ffde4b0f26550335944"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "56baa68ce4b0f26550335947"}, {"problem": 22, "code": "(fn [l] (reduce (fn [x y] (inc x)) 0 (seq l)))", "user": "56b15fc8e4b0982f16b37de9"}, {"problem": 22, "code": "(fn [x] (reduce (fn [a b] (+ a 1)) 0 x))", "user": "56bb24fbe4b0f2655033594e"}, {"problem": 22, "code": "(fn [coll] (reduce (fn [x _] (inc x)) 0 coll))", "user": "553aad97e4b09218d5f44ff9"}, {"problem": 22, "code": "(fn abc\n  (\n   [L]\n   (abc L 0)\n  )\n  (\n   [L n]\n   (if (empty? L)\n     n\n     (abc (rest L) (inc n))\n   )\n  )\n)", "user": "56bb3a4be4b0f26550335951"}, {"problem": 22, "code": "(fn [item] (loop [sq (seq item) c 0] (if-let [x (first sq)] (recur (rest sq) (inc c)) c )))", "user": "56bb9ccce4b0f26550335959"}, {"problem": 22, "code": "#(loop [s % n 0]\n     (if (empty? s) n\n       (recur (rest s) (inc n))))", "user": "56baab13e4b0f26550335948"}, {"problem": 22, "code": "(fn [coll]\n  (reduce + (map (constantly 1) coll)))", "user": "56ba1406e4b0f2655033593c"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "54b61cb1e4b05787c3b163b3"}, {"problem": 22, "code": "(fn [xs]\n    (let [f (fn [n xs]\n              (if (empty? xs)\n                n\n                (recur (inc n) (rest xs))))]\n      (f 0 xs)))", "user": "56bcc2b2e4b0f26550335965"}, {"problem": 22, "code": "#( reduce (fn[x y](inc x)) 0 %)", "user": "56b6c962e4b0982f16b37e3e"}, {"problem": 22, "code": "(fn cn [s] (if (empty? s) 0 (inc (cn (rest s)) )))", "user": "56b984f5e4b0f26550335935"}, {"problem": 22, "code": "reduce (fn [init val] (+ 1 init)) 0", "user": "56bc2e3be4b0f2655033595d"}, {"problem": 22, "code": "(fn mycount\n  ([xs] (mycount xs 0))\n  ([xs index]\n   (if (nil? (seq xs))\n     index\n     (mycount (next xs) (inc index))\n     )))", "user": "55c66ffee4b0e31453f649c2"}, {"problem": 22, "code": "#(reduce (fn [acc _] \n           (inc acc)) \n         0 \n         %)", "user": "56aad4f7e4b03c432f187338"}, {"problem": 22, "code": "(fn cnt \n\t([coll, tot] (if(empty? coll)\n  \ttot\n  \t(cnt (rest coll) (inc tot))))\n\t([coll]\n\t\t(cnt coll 0)))", "user": "554b0d42e4b0a04f7929957f"}, {"problem": 22, "code": "#(reduce (fn [memo val](inc memo)) 0 %1)", "user": "51f38193e4b0fca5e8b48226"}, {"problem": 22, "code": "(fn [lEl] (reduce (fn [a b] (+ 1 a)) 0 lEl))", "user": "56bd58c9e4b0f26550335970"}, {"problem": 22, "code": "(fn cnt\n  ([x] (cnt x 0))\n  ([x acc]\n   (if (empty? x)\n     acc\n     (recur (rest x) (inc acc)))))", "user": "56bca51ae4b0f26550335963"}, {"problem": 22, "code": "(fn [x] (+ 1 (last (map-indexed (fn [idx itm] idx) x))))", "user": "56bdda49e4b0f26550335977"}, {"problem": 22, "code": "#(reduce (fn[val coll] (inc val)) 0 %)", "user": "563a81a2e4b0bfe05bf117ff"}, {"problem": 22, "code": "(fn[x](reduce (fn [c _] (inc c)) 0 x))", "user": "56a28664e4b0542e1f8d14c1"}, {"problem": 22, "code": "(fn [array] \n   (loop [a array i 0]\n     (if (empty? a)\n       i\n       (recur (rest a) (+ i 1)))))", "user": "56bde860e4b0f26550335979"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "56bd930ae4b0f26550335971"}, {"problem": 22, "code": "(fn [xs]\n  ((fn [ys length]\n     (if (empty? ys)\n       length\n       (recur (rest ys) (+ length 1))))\n   xs\n   0))", "user": "56be350ce4b0f26550335981"}, {"problem": 22, "code": "#(alength (to-array %))", "user": "56bdb997e4b0f26550335974"}, {"problem": 22, "code": "reduce #(inc (first %&)) 0", "user": "56bf4ac0e4b0f26550335985"}, {"problem": 22, "code": "(fn get-count [xs]\n  (letfn [(go [xs n]\n              (if (empty? xs)\n                n\n                (go (rest xs) (+ n 1))))]\n    (go xs 0)))", "user": "56bfcba1e4b060a8e693e3a1"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "56bfe8f1e4b060a8e693e3a3"}, {"problem": 22, "code": "(fn [v] (reduce (fn [r n] (+ r 1)) 0 v))", "user": "563536f8e4b0bfe05bf117c5"}, {"problem": 22, "code": "(fn [x]\n  (reduce (fn [counter _]\n            (inc counter))\n            0\n            x))", "user": "564b1f34e4b0284900eef662"}, {"problem": 22, "code": "(fn [x] (reduce (fn [x y] (+ x 1)) 0 x))", "user": "56c08c7fe4b060a8e693e3ab"}, {"problem": 22, "code": "#(loop \n  [[x & xs] % cnt 1]\n  (if (empty? xs)\n    cnt\n    (recur xs (inc cnt))))", "user": "56bf78dae4b0f26550335989"}, {"problem": 22, "code": "(fn my-count \n        (\n                [some-seq] (my-count some-seq 0)\n        ) \n        (\n                [some-seq n] (if (empty? some-seq) \n                                 n\n                             ; else\n                                 (my-count (rest some-seq) (inc n))                              \n                              )\n        )\n)", "user": "56c0756de4b060a8e693e3a9"}, {"problem": 22, "code": "(fn countS [coll]\n  (if (empty? coll)\n    0\n    (+ 1 (countS (rest coll)))))", "user": "56c0aeb8e4b060a8e693e3af"}, {"problem": 22, "code": "reduce (fn [acc _] (inc acc)) 0", "user": "566ff0a1e4b0a866af6896ec"}, {"problem": 22, "code": "reduce (fn [n _](inc n)) 0", "user": "56a257e7e4b0542e1f8d14bb"}, {"problem": 22, "code": "#(reduce (fn [a _] (inc a)) 0 %)", "user": "56c14100e4b0839206b9d683"}, {"problem": 22, "code": "(fn [sequenc] (reduce (fn [val1, _] (+ val1 1)) 0 sequenc))", "user": "56c1549ae4b0839206b9d686"}, {"problem": 22, "code": "reduce (fn [x y] (inc x)) 0", "user": "56c08696e4b060a8e693e3aa"}, {"problem": 22, "code": "(fn [x] (reduce #(+ %1 %2) (map (constantly 1) x)))", "user": "56c1d2dae4b0839206b9d68a"}, {"problem": 22, "code": "(fn totNumber [x] \n  (if (empty? (seq x))\n    0 \n    (+ 1 (totNumber (rest x)))\n  )\n )", "user": "56aa9464e4b07966d5a8a08d"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "56bb660be4b0f26550335954"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5653da73e4b0f9d632dd8478"}, {"problem": 22, "code": "#(loop [lst % res 0] (if (empty? lst) res (recur (rest lst) (inc res))))", "user": "56b33058e4b0982f16b37e12"}, {"problem": 22, "code": "#(reduce (fn [x _] (inc x)) 0 %)", "user": "56bb27e2e4b0f2655033594f"}, {"problem": 22, "code": "(fn len\n  ([seq n]\n   (if (empty? (rest seq))\n     n\n     (len (rest seq) (inc n))))\n  ([seq]\n   (len seq 1)))", "user": "56af99dfe4b061e3ca319ad5"}, {"problem": 22, "code": "(fn counter [coll]\n  (if (not (empty? coll))\n    ((fn [coll n]\n       (if (next coll)\n         (recur (next coll) (inc n))\n         n))\n      coll 1)\n    0))", "user": "56c33ceae4b05cc29241ee89"}, {"problem": 22, "code": "(fn [coll]\n  (reduce (fn [acc _] (inc acc)) 0 coll))", "user": "56c2c342e4b05cc29241ee85"}, {"problem": 22, "code": "(fn [coll] (apply + (map (fn [n] 1) coll)))", "user": "56b6a50ae4b0982f16b37e3c"}, {"problem": 22, "code": "reduce (fn [a b] (+ a 1)) 0", "user": "56b8cf20e4b0f26550335929"}, {"problem": 22, "code": "(fn ct[x]\n  (reduce\t(fn myinc [x l] (inc x)) 0(seq x))\t)", "user": "56c1f470e4b0839206b9d68c"}, {"problem": 22, "code": "(fn [s] (reduce (fn [acc _] (inc acc)) 0 s))", "user": "56c427bbe4b05cc29241ee94"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "56c0d92ae4b0839206b9d67e"}, {"problem": 22, "code": "(fn [seq] (+ 1 (first (last (map-indexed vector seq)))))", "user": "56499a5de4b0284900eef644"}, {"problem": 22, "code": "(fn [x] \n  (reduce + (map (constantly 1) x)))", "user": "56c55c5ee4b05cc29241eea4"}, {"problem": 22, "code": "(fn [col] \n  (reduce + (map (constantly 1) col)))", "user": "56a37ccee4b0542e1f8d14cb"}, {"problem": 22, "code": "reduce (fn [counter value] (inc counter)) 0", "user": "56c23ca6e4b05cc29241ee7f"}, {"problem": 22, "code": "#(loop [coll %1 length 0]\n\t(if (seq coll)\n      (recur (rest coll) (inc length))\n       length))", "user": "56c5db15e4b05cc29241eeac"}, {"problem": 22, "code": "(fn [c] (reduce (fn [n c] (inc n)) 0 c))", "user": "56c6490de4b05cc29241eeaf"}, {"problem": 22, "code": "(partial reduce (fn [x y] (+ x 1)) 0)", "user": "56b2573ce4b0982f16b37e02"}, {"problem": 22, "code": "#(loop [s % c 0]\n    (if (empty? s)\n      c\n      (recur (rest s) (inc c))))", "user": "567b2f20e4b05957ce8c61a2"}, {"problem": 22, "code": "(fn l\n  [param-s]\n  (loop [my-s param-s\n         my-count 0]\n   (if-not (seq my-s)\n     my-count\n     (recur (rest my-s) (inc my-count)))))", "user": "56c71414e4b0ed865f9758b6"}, {"problem": 22, "code": "(fn counter [x] (if (empty? x) 0 (+ (counter (rest x))1)))", "user": "55801a0de4b05c286339e0e5"}, {"problem": 22, "code": "#(loop [res 0 col %]\n   (if (empty? col) res\n     (recur (inc res) (rest col))))", "user": "5643aed5e4b0018b46ad8bfd"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "561fe4fce4b064ca9f4b16d5"}, {"problem": 22, "code": "#(reduce + (map (fn [x] (inc 0)) %))", "user": "56c77858e4b0ed865f9758c0"}, {"problem": 22, "code": "#(loop [a % i 0](if (next a)(recur (next a)(+ i 1))(+ i 1)))", "user": "56c816efe4b0ed865f9758cd"}, {"problem": 22, "code": "(fn [coll] (inc (last (map (fn [x y] x) (range) coll))))", "user": "5141e978e4b0b50abeb46b20"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "56c33bb9e4b05cc29241ee87"}, {"problem": 22, "code": "(fn count-sequence\n  [elements]\n  (loop [elements elements\n         elementCount 0]\n    (if (empty? elements)\n      elementCount\n      (recur (rest elements)\n             (inc elementCount)))))", "user": "56c8da61e4b0ed865f9758d8"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "56c792ace4b0ed865f9758c4"}, {"problem": 22, "code": "#(loop [seqs %1 cnt 0]\n   (if (empty? seqs) cnt (recur (rest seqs) (inc cnt))))", "user": "56c7d8dee4b0ed865f9758c9"}, {"problem": 22, "code": "(fn doit [coll]\n  (if (empty? coll)\n    0\n    (+ 1 (doit (drop 1 (vec coll))))\n  )\n)", "user": "56c72507e4b0ed865f9758b7"}, {"problem": 22, "code": "#(loop [l % cnt 0] (if (empty? l) cnt (recur (rest l) (+ cnt 1))))", "user": "56c86246e4b0ed865f9758d1"}, {"problem": 22, "code": "(fn a [s]\n  (loop [ss s l 0]\n  \t(if\n      (empty? ss)\n      l\n      (recur (rest ss) (+ 1 l))\n  \t)\n  )\n)", "user": "56c9970ce4b0ed865f9758de"}, {"problem": 22, "code": "(fn [coll] (loop [x coll i 0] (if (empty? x) i (recur (rest x) (inc i)))))", "user": "56c88f71e4b0ed865f9758d3"}, {"problem": 22, "code": "(fn [s] \n  (reduce \n   (fn [a v] (+ a 1)\n     ) 0 s\n   )\n  )", "user": "53cdcb5de4b00fb29b2212e8"}, {"problem": 22, "code": "#(let \n   [s (seq %)]\n   (reduce (fn [x y] (inc x)) 0 s))", "user": "5600bed5e4b04bb52996e170"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "56ca6141e4b0ea9b8538f71a"}, {"problem": 22, "code": "reduce (fn [x _] (inc x)) 0", "user": "55f25ae6e4b06e875b46ce43"}, {"problem": 22, "code": "(fn my-count [n]\n\t(loop [iter 0 x n]\n\t\t(if (empty? x)\n\t\titer\n\t\t(recur (inc iter) (rest x)))))", "user": "56caea02e4b0ea9b8538f721"}, {"problem": 22, "code": "(fn [x]\n  (loop [x x,acc 0]\n    (if (seq x)\n      (recur (rest x) (inc acc))\n      acc)))", "user": "56cb3010e4b0ea9b8538f725"}, {"problem": 22, "code": "(fn [coll] (reduce (fn [x y] (+ x y)) 0 (vals (frequencies coll))))", "user": "56cb6425e4b0ea9b8538f730"}, {"problem": 22, "code": "(fn cfn [l] (if (not-empty l) (+ (cfn (rest l)) 1) 0))", "user": "56cb3c71e4b0ea9b8538f729"}, {"problem": 22, "code": "(fn [lst]\n  (loop [i lst cnt 0]\n   (cond (empty? i) cnt\n     :t (recur (rest i)(inc cnt)))))", "user": "56c9d136e4b0ed865f9758e2"}, {"problem": 22, "code": "(fn my-count [s] (reduce (fn [acc curr] (inc acc)) 0 s))", "user": "56cbb98ae4b0ea9b8538f739"}, {"problem": 22, "code": "#(reduce (fn [v x] (+ v 1)) 0 %)", "user": "56cbb352e4b0ea9b8538f738"}, {"problem": 22, "code": "(fn [s]\n  (inc (.lastIndexOf (seq s) (last s))))", "user": "56b3b12ee4b0982f16b37e1c"}, {"problem": 22, "code": "(fn [coll]\n  (reduce (fn [x _] (inc x)) 0 coll))", "user": "56c60b36e4b05cc29241eead"}, {"problem": 22, "code": "(fn [s] \n    (loop [s s n 0]\n          (if (= s ())\n            n \n            (recur (rest s) (inc n)))))", "user": "56cc34aee4b0ea9b8538f73c"}, {"problem": 22, "code": "(fn [x]\n  (loop [ls x cnt 0]\n    (if (= nil (first ls))\n      cnt\n      (recur (rest ls) (inc cnt)))))", "user": "55f73078e4b06e875b46cea4"}, {"problem": 22, "code": "(fn [x] (loop [a x ans 0] (if (empty? a) ans (recur (rest a) (+ 1 ans)))))", "user": "56ccbeb7e4b0ea9b8538f740"}, {"problem": 22, "code": "#(loop [c % result 0]\n  (if (first c)\n                  (recur (next c) (inc result))\n                  result))", "user": "56cccd99e4b0ea9b8538f743"}, {"problem": 22, "code": "#(loop [result 0 c %]\n    (if(empty? c) result\n    (recur (inc result) (rest c))))", "user": "56cba075e4b0ea9b8538f737"}, {"problem": 22, "code": "(fn [xs] (reduce + (map (fn [x] 1) xs)))", "user": "56cd44fde4b0ea9b8538f749"}, {"problem": 22, "code": "reduce (fn [acc _] (+ acc 1)) 0", "user": "565418cde4b0f9d632dd847c"}, {"problem": 22, "code": "(fn na ([x] (na x 0)) ([x i] (if (empty? x) i (recur (rest x) (inc i)))))", "user": "56cd75bee4b0ea9b8538f74b"}, {"problem": 22, "code": "(fn [col] (reduce + (map (fn [arg] 1) col)))", "user": "56cb3bebe4b0ea9b8538f728"}, {"problem": 22, "code": "(fn num-elements [coll]\n  (if (empty? coll) 0 (+ 1 (num-elements (rest coll)))))", "user": "56cb3a61e4b0ea9b8538f726"}, {"problem": 22, "code": "(fn rec [l] (if (empty? l) 0 (+ 1 (rec (rest l)))))", "user": "56cb483ee4b0ea9b8538f72d"}, {"problem": 22, "code": "(fn [x] (reduce (fn [acc x] (inc acc)) 0 x))", "user": "56cdda13e4b0ea9b8538f752"}, {"problem": 22, "code": "(fn [x] (reduce + (map (fn [y] 1) x)))", "user": "56c749d8e4b0ed865f9758ba"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "56cb3acfe4b0ea9b8538f727"}, {"problem": 22, "code": "#(reduce (fn [b a] (+ b 1)) 0 %)", "user": "56ca2f25e4b0ea9b8538f716"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "56c4f43ce4b05cc29241ee9c"}, {"problem": 22, "code": "#(reduce (fn [x, col] (+ x 1)) 0 %)", "user": "56ce20ffe4b0ea9b8538f75d"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "56cb0abce4b0ea9b8538f722"}, {"problem": 22, "code": "(fn foo [a] (if (empty? a) 0 (+ 1 (foo(rest a)))))", "user": "56cde509e4b0ea9b8538f754"}, {"problem": 22, "code": "(fn\n   [coll & counter]\n   (if (empty? coll)\n     counter\n     (recur (rest coll) (inc (or counter 0)))))", "user": "56cd110ee4b0ea9b8538f747"}, {"problem": 22, "code": "(fn [coil]\n  (loop [target coil cnt 0]\n    (if (empty? target)\n      cnt\n      (recur (rest target) (inc cnt)))))", "user": "56c55fbce4b05cc29241eea5"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "56585dbce4b0f9d632dd84b3"}, {"problem": 22, "code": "(fn [coll]\n  (reduce (fn [result remaining]\n            (inc result))\n          0\n          coll))", "user": "56cf4a48e4b0ea9b8538f767"}, {"problem": 22, "code": "(fn [coll] (reduce + (map (constantly 1) coll)))", "user": "56cddf9de4b0ea9b8538f753"}, {"problem": 22, "code": "(fn [s] (reduce (fn [s v](inc s)) 0 s))", "user": "56cf6f72e4b0ea9b8538f769"}, {"problem": 22, "code": "(fn c [l] \n  (if (empty? l)\n    0\n    (+ 1 (c (rest l)))))", "user": "529cabd5e4b04e0c58e87b68"}, {"problem": 22, "code": "(fn [c]\n  (loop [nc c ci 0]\n    (if (empty? nc)\n      ci\n      (recur (rest nc) (inc ci)))))", "user": "55e6809ee4b050e68259b48a"}, {"problem": 22, "code": "(fn my-count\n  [seq]\n  (if (= seq [])\n    0\n    (+ 1 (my-count (rest seq)))))", "user": "56cf9d4fe4b0ea9b8538f76c"}, {"problem": 22, "code": "(comp (partial reduce +) (partial map (fn [_] 1)))", "user": "56cfa716e4b0ea9b8538f76d"}, {"problem": 22, "code": "#(reduce (fn [a _] (inc a)) 0 %)", "user": "4de14aad535d08e6dec9fde5"}, {"problem": 22, "code": "#(loop [s % n 0]\n   (if (empty? s) \n       n\n       (recur (rest s) (inc n))))", "user": "56be8649e4b0f26550335983"}, {"problem": 22, "code": "(fn func [x] (if (empty? x) 0 (+ 1 (func (rest x)))))", "user": "56cef5e8e4b0ea9b8538f762"}, {"problem": 22, "code": "(fn [lat] (reduce (fn [x y] (+ x 1)) 0 lat))", "user": "56cd67c1e4b0ea9b8538f74a"}, {"problem": 22, "code": "#(reduce (fn [x _] (+ 1 x)) 0 %)", "user": "56d137d8e4b0ea9b8538f78a"}, {"problem": 22, "code": "#(reduce (fn [c x] (inc c)) 0 %)", "user": "56d0ba82e4b0ea9b8538f785"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "56d05ba2e4b0ea9b8538f77d"}, {"problem": 22, "code": "(fn [l] (reduce + (map (fn [x] (identity 1)) l)))", "user": "55009d17e4b07d26eda61d5d"}, {"problem": 22, "code": "(fn \n  [s]\n  (loop [cur-seq s \n         iter 1]   \n    (if (nil? (next cur-seq))\n      iter\n      (recur (next cur-seq) (inc iter))\n    )))", "user": "56d1facee4b0ea9b8538f796"}, {"problem": 22, "code": "#(apply + (map (fn [_] 1) %))", "user": "56d1afd9e4b0ea9b8538f791"}, {"problem": 22, "code": "(fn [s]\n  (reduce (fn [v _] (inc v)) 0 s))", "user": "56d1db57e4b0ea9b8538f794"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) % ))", "user": "56cb7096e4b0ea9b8538f732"}, {"problem": 22, "code": "reduce (fn [cnt _] (inc cnt)) 0", "user": "56d228f3e4b0ea9b8538f79a"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "56d260ffe4b0ea9b8538f79f"}, {"problem": 22, "code": "(fn counter [coll] \n    (if \n        (empty? coll)\n        0\n        (+ 1 (counter (rest coll)))\n))", "user": "56ba5cc6e4b0f26550335942"}, {"problem": 22, "code": "(fn my-count [xs]\n  (let [inner\n  (fn inner [xxs cnt]\n    (if (empty? xxs)\n      cnt\n      (inner \n        (rest xxs) \n        (inc cnt))))]\n    (inner xs 0)))", "user": "56d15bfbe4b0ea9b8538f78d"}, {"problem": 22, "code": "#(reduce + (map (fn[x] 1) %))", "user": "567cb888e4b05957ce8c61c0"}, {"problem": 22, "code": "#(reduce (fn [size x] (inc size)) 0 %)", "user": "542a8d07e4b01498b1a71b43"}, {"problem": 22, "code": "(fn [lat] (reduce (fn [x y] (+ x 1)) 0 lat))", "user": "56d09798e4b0ea9b8538f781"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "5641a4cbe4b08d4f616f5eff"}, {"problem": 22, "code": "(fn [x] \n  (loop [c 0 z (seq x)]\n    (if (= (first z) nil)\n      c\n      (recur\n       (inc c)\n       (rest z)\n       )\n      )\n    )\n  )", "user": "56d325ace4b0ea9b8538f7a9"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "56d4266ce4b0ea9b8538f7b4"}, {"problem": 22, "code": "(fn [coll]\n  (apply + (map (constantly 1) coll)))", "user": "56cda514e4b0ea9b8538f74e"}, {"problem": 22, "code": "#(reduce (fn [counter col] (inc counter)) 0 %)", "user": "56d47528e4b0ea9b8538f7b7"}, {"problem": 22, "code": "#(alength(to-array %))", "user": "56a7c7c8e4b07966d5a8a061"}, {"problem": 22, "code": "(fn [xs] (reduce (fn [result val] (+ 1 result)) 0 xs))", "user": "56d30497e4b0ea9b8538f7a8"}, {"problem": 22, "code": "#(reduce  + 0 (map (constantly 1) %1))", "user": "56c3aca0e4b05cc29241ee90"}, {"problem": 22, "code": "#(reduce (fn [a b] (inc a)) 0 %)", "user": "56d63729e4b0ea9b8538f7ca"}, {"problem": 22, "code": "(fn [coll]\n    (loop [my-coll coll cnt 0]\n      (if (empty? my-coll)\n        cnt\n        (recur (rest my-coll) (+ cnt 1)))))", "user": "56d5fd24e4b0ea9b8538f7c5"}, {"problem": 22, "code": "#(loop [counter 0 elements (seq %)]\n  \t(if (empty? elements) counter\n  \t(recur (inc counter) (rest elements))))", "user": "56cd8288e4b0ea9b8538f74c"}, {"problem": 22, "code": "#(loop [x %\n         y 0]\n   (if (empty? x)\n     y\n     (recur (rest x) (inc y))))", "user": "56c70cc2e4b0ed865f9758b5"}, {"problem": 22, "code": "(fn count' [s]\n  (if (seq s)\n    (inc (count' (rest s)))\n    0))", "user": "56d68cbae4b0ea9b8538f7cd"}, {"problem": 22, "code": "(fn cnt \n  [coll]\n  (if (empty? coll)\n    0\n    (+ (cnt (rest coll)) 1)))", "user": "56d72e14e4b0ea9b8538f7d6"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "56d4b22de4b0ea9b8538f7bb"}, {"problem": 22, "code": "#(reduce\n  (fn [c _] (inc c)) 0 %)", "user": "56d6c18ee4b0ea9b8538f7d1"}, {"problem": 22, "code": "(fn [xs] (loop [acc 0 xs xs] (if xs (recur (inc acc) (next xs)) acc)))", "user": "56d5bc66e4b0ea9b8538f7c2"}, {"problem": 22, "code": "#(loop [se %, result 0]\n   (if (empty? se)\n     result\n     (recur (rest se) (inc result))))", "user": "56d63c71e4b0ea9b8538f7cb"}, {"problem": 22, "code": "#(apply + (map (constantly 1) %))", "user": "56d80542e4b0ea9b8538f7e1"}, {"problem": 22, "code": "reduce (fn [acc i] (inc acc)) 0", "user": "56d69d28e4b0ea9b8538f7cf"}, {"problem": 22, "code": "(fn element-count [coll]\n  (if (empty? coll) 0 \n    (+ 1 (element-count (rest coll)))))", "user": "56d74c88e4b0ea9b8538f7d9"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "56c74864e4b0ed865f9758b9"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "562a58e8e4b00e49c7cb4822"}, {"problem": 22, "code": "(fn [lst]\n  (loop [i lst cnt 0]\n    (cond (empty? i) cnt\n          :t (recur (rest i) (inc cnt)))))", "user": "5679c9f2e4b05957ce8c6191"}, {"problem": 22, "code": "#(loop [lst %\n       n 0]\n     (if (empty? lst) n\n         (recur (rest lst) (inc n))))", "user": "56d8a63fe4b0ea9b8538f7e8"}, {"problem": 22, "code": "#(reduce + (map (fn [_] 1) %) )", "user": "56d89066e4b0ea9b8538f7e7"}, {"problem": 22, "code": "#(loop [i 0 temp %]\n   (if (empty? temp) i\n   (recur (inc i)(rest temp)))\n  )", "user": "56d4d5efe4b0ea9b8538f7bd"}, {"problem": 22, "code": "(fn f [seq] \n  (if (empty? seq) \n    0 \n    (+ 1 (f (rest seq)))))", "user": "56a42953e4b0542e1f8d14d9"}, {"problem": 22, "code": "#(reduce (fn [a x] (inc a)) 0 %)", "user": "56d8fa43e4b0ea9b8538f7ec"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "56cad309e4b0ea9b8538f720"}, {"problem": 22, "code": "#(loop [result 0 c %]\n    (if(empty? c) result\n    (recur (inc result) (rest c))))", "user": "56d439d4e4b0ea9b8538f7b6"}, {"problem": 22, "code": "(fn [col] (inc (first (last (map-indexed vector col)))))", "user": "5192ad1ae4b08962174cf750"}, {"problem": 22, "code": "reduce (fn [x _] (inc x)) 0", "user": "56d957c2e4b0ea9b8538f7f1"}, {"problem": 22, "code": "(fn [collection]\n  ((fn [c coll] (if (empty? coll)\n                  c\n                  (recur (inc c) (rest coll)))) 0 collection))", "user": "56a71811e4b0542e1f8d14f6"}, {"problem": 22, "code": "(fn [xs]\n  (\n   (fn [xs c]\n    (if-let [_xs (next xs)]\n      (recur _xs (+ c 1))\n      (+ c 1)\n      )\n    ) xs 0\n   )\n\n  )", "user": "56d91a53e4b0ea9b8538f7ee"}, {"problem": 22, "code": "(fn [myList] (loop [in myList acc 0] (if (empty? in) acc (recur (rest in) (inc acc))) ) )", "user": "56d902c3e4b0ea9b8538f7ed"}, {"problem": 22, "code": "#(loop [idx 0\n       y %]\n  (if (empty? y) \n    idx\n    (recur (inc idx) (rest y))))", "user": "56c560ede4b05cc29241eea6"}, {"problem": 22, "code": "#(reduce (fn [acc _] (inc acc)) 0 %)", "user": "56ca0da9e4b0ea9b8538f715"}, {"problem": 22, "code": "#(reduce (fn [a b] (+ a 1)) 0 %)", "user": "56b94af0e4b0f2655033592f"}, {"problem": 22, "code": "(fn [c] (reduce + (map (fn [x] 1) c)))", "user": "56db70ebe4b0ea9b8538f80a"}, {"problem": 22, "code": "#(reduce (fn [acc x] (inc acc)) 0 %)", "user": "52c634b1e4b0c2d177d6210a"}, {"problem": 22, "code": "(fn [in & total]\n  (let [total (or total 0)]\n    (if (empty? in)\n      total\n      (recur (rest in) (+ total 1)))))", "user": "56dbe1f4e4b0ea9b8538f813"}, {"problem": 22, "code": "(fn [sq] (reduce (fn [s v] (inc s)) 0 sq))", "user": "56dc0628e4b0ea9b8538f814"}, {"problem": 22, "code": "(fn [c]\n  (loop [cnt 0 col c]\n    (if (not (next col)) (+ 1 cnt) (recur (inc cnt) (rest col))\n    )\n  )\n)", "user": "56db90d4e4b0ea9b8538f80d"}, {"problem": 22, "code": "(fn [l]\n  (loop [xs l\n         len 0]\n  \t(if (empty? xs)\n      len\n      (recur (next xs) (inc len)))))", "user": "56dc34a3e4b0ea9b8538f816"}, {"problem": 22, "code": "(fn [c] (reduce + 0 (map (constantly 1) c)))", "user": "5313b4b6e4b08068f379ed0c"}, {"problem": 22, "code": "#(alength (to-array %))", "user": "56d36e7ae4b0ea9b8538f7ad"}, {"problem": 22, "code": "#(alength (to-array %))", "user": "5527be83e4b0ffed3738f936"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "56d781b3e4b0ea9b8538f7dc"}, {"problem": 22, "code": "(fn [coll]\n  (reduce (fn [c i] (inc c)) 0 coll))", "user": "56dc5f89e4b0ea9b8538f81e"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "56db549be4b0ea9b8538f808"}, {"problem": 22, "code": "#(reduce (fn [c se] (inc c)) 0 %)", "user": "56d1b7a2e4b0ea9b8538f792"}, {"problem": 22, "code": "(fn my-count [coil]\n  (reduce\n   (fn [c _]\n     (inc c)) 0 coil))", "user": "56c61682e4b05cc29241eeae"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "56de79fee4b0ea9b8538f83d"}, {"problem": 22, "code": "#(reduce  (fn [l r] (inc l)) 0 %1)", "user": "56c6a3c3e4b05cc29241eeb3"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "56df9203e4b0ca2494a095fc"}, {"problem": 22, "code": "(fn count-me\n  ([coll]\n   (count-me coll 0)\n   )\n  ([coll cnt]\n   (if (empty? coll) cnt \n     (count-me (rest coll) (+ cnt 1)))\n   ))", "user": "56de0db0e4b0ea9b8538f83a"}, {"problem": 22, "code": "reduce (fn [x _] (inc x)) 0", "user": "550b502ae4b06e50f9beb13f"}, {"problem": 22, "code": "#(reduce (fn [i _] (inc i)) 0 %)", "user": "56dcd173e4b0ea9b8538f824"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "56e05bfce4b0ca2494a09606"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "56de0100e4b0ea9b8538f839"}, {"problem": 22, "code": "(fn [x] (reduce + (map #(let [z %] 1) x)))", "user": "56d4b1aee4b0ea9b8538f7ba"}, {"problem": 22, "code": "(fn myCount [x]\n  (if (= x []) 0\n  (+ 1 (myCount (rest x))))\n  )", "user": "56dd0179e4b0ea9b8538f826"}, {"problem": 22, "code": "(fn [col]\n  (loop [s (seq col) \n         c 0]\n    (if s (recur (next s) (inc c)) c )))", "user": "56df254be4b0ca2494a095ea"}, {"problem": 22, "code": "(fn [ls]\n  (let [rec \n        (fn [ls a]\n\t  (if (empty? ls)\n    \ta\n    \t(recur (rest ls) (+ a 1))))]\n     (rec ls 0)))", "user": "56d7f340e4b0ea9b8538f7df"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "56e1122fe4b03a7c14b85a20"}, {"problem": 22, "code": "(fn compte [seq]\n  (if (= [] (rest seq))\n    1\n    (+ 1 (compte (rest seq)))\n    ))", "user": "56e05622e4b0ca2494a09605"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "56a22d4ae4b0542e1f8d14ba"}, {"problem": 22, "code": "#(reduce (fn [acc x] (inc acc)) 0 %)", "user": "56e06625e4b0ca2494a09607"}, {"problem": 22, "code": "(fn [s] \n  (loop [index 0 ls s] \n    (if (empty? ls)\n      index\n      (recur (inc index) (rest ls)))))", "user": "56db8fbde4b0ea9b8538f80c"}, {"problem": 22, "code": "(partial reduce (fn [t _] (inc t)) 0)", "user": "54a6645be4b09f271ff37c87"}, {"problem": 22, "code": "(fn mycount [s]\n  (loop\n    [s s\n    n 0]\n    (if (empty? s)\n      n\n      (recur (rest s) (inc n)))))", "user": "56df5b74e4b0ca2494a095ed"}, {"problem": 22, "code": "#(+ (.lastIndexOf (seq %) (last %)) 1)", "user": "56e227a8e4b03a7c14b85a31"}, {"problem": 22, "code": "(fn my_cnt [s]\n  (reduce + (map (fn [e] 1) s) ) )", "user": "56dc3dbbe4b0ea9b8538f81a"}, {"problem": 22, "code": "#(reduce (fn [acc val] (inc acc)) 0 %)", "user": "56e0fa6fe4b03a7c14b85a1d"}, {"problem": 22, "code": "(fn [coll]\n  (if (seq coll)\n    (loop [s coll\n           c 1]\n      (if (seq (rest s))\n        (recur (rest s) (inc c))\n        c))\n    0))", "user": "559a8d4ce4b066d22e731f43"}, {"problem": 22, "code": "(fn [c] (reduce (fn [x y] (inc x)) 0 c))", "user": "56e2dbf4e4b03a7c14b85a3b"}, {"problem": 22, "code": "(fn [xs]\n  (loop [xs xs\n         acc 0]\n    (if (empty? xs)\n      acc\n      (recur (rest xs) (inc acc)))))", "user": "56e02c1ce4b0ca2494a09602"}, {"problem": 22, "code": "(fn my-count [s]\n  (if (empty? s)\n    0\n    (+ 1 (my-count (next s)))))", "user": "56e31aaae4b03a7c14b85a3e"}, {"problem": 22, "code": "(fn my-count [elems]\n  (case elems\n \t[] 0\n    (+ 1 (my-count (rest elems)))\n    )\n  )", "user": "56e32696e4b03a7c14b85a40"}, {"problem": 22, "code": "#(apply + (map (fn [_] 1) %))", "user": "56e3711de4b03a7c14b85a43"}, {"problem": 22, "code": "#(reduce (fn [el _] (+ 1 el)) 0 %)", "user": "550f2333e4b06e50f9beb173"}, {"problem": 22, "code": "(fn [xs] (reduce + (map (fn [_] 1) (seq xs))))", "user": "56e37659e4b03a7c14b85a44"}, {"problem": 22, "code": "(fn [x] (reduce + (map (fn [y] 1) x)))", "user": "56e4427ce4b03a7c14b85a4c"}, {"problem": 22, "code": "(fn my-count [coll]\n  (reduce (fn [a b] (inc a)) 0 coll))", "user": "56e53d2fe4b02e7e935eb6bc"}, {"problem": 22, "code": "(fn my-count\n  ([arr n]\n   (if (empty? arr) n (my-count (rest arr) (+ n 1))))\n  ([arr] (my-count arr 0)))", "user": "569f7bc2e4b0542e1f8d1494"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "56e09e01e4b0ca2494a0960c"}, {"problem": 22, "code": "(fn get-count\n  ([coll] (get-count coll 0))\n  ([coll n]\n    (if (empty? coll)\n      n\n      (recur (rest coll) (inc n)))))", "user": "56e4991fe4b03a7c14b85a4f"}, {"problem": 22, "code": "(fn [coll]\n  (reduce\n    (fn [element-count element] (inc element-count))\n    0 coll))", "user": "56e48302e4b03a7c14b85a4e"}, {"problem": 22, "code": "(fn [lst]\n    (loop [i lst cnt 0]\n      (cond (empty? i) cnt\n            :t (recur (rest i)(inc cnt)))))", "user": "4fdf41a6e4b05e33b9224f95"}, {"problem": 22, "code": "#(reduce (fn [c _]\n           (inc c)) 0 %)", "user": "5672925fe4b05957ce8c6114"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "56e6b6fbe4b02e7e935eb6ca"}, {"problem": 22, "code": "(fn [sequence] (reduce (fn [acc v] (inc acc)) 0 sequence))", "user": "4ed67b58535d10e5ff6f52e1"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "56e6ef89e4b02e7e935eb6d0"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 (seq %))", "user": "56e6d049e4b02e7e935eb6cd"}, {"problem": 22, "code": "(fn gcount ([x] (gcount x 0)) ([x sum] (if (empty? x) sum (gcount (rest x) (+ sum 1)))))", "user": "56e71333e4b02e7e935eb6d2"}, {"problem": 22, "code": "(fn counter \n  ([col] (counter col 0))\n  ([col cnt]\n  (if (empty? col) \n    cnt\n    (recur (rest col) (inc cnt)))))", "user": "56e7afd8e4b02e7e935eb6d9"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "56e7d877e4b02e7e935eb6df"}, {"problem": 22, "code": "(fn [l] (apply + (map (fn [x] 1) l)))", "user": "56e7ebcce4b02e7e935eb6e2"}, {"problem": 22, "code": "(fn [s]\n  (loop [sum 0\n         left s]\n    (if (empty? left)\n      sum\n      (recur (inc sum) (rest left)))))", "user": "56e85493e4b02e7e935eb6e7"}, {"problem": 22, "code": "(fn [x] (#(if (empty? %) %2 (recur (rest %) (inc %2))) x 0))", "user": "56403765e4b08d4f616f5edc"}, {"problem": 22, "code": "#(loop [cnt 0 elms %] (if (empty? elms) cnt (recur (inc cnt) (rest elms))))", "user": "56e811e1e4b02e7e935eb6e3"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "56e8aa20e4b04a395b9a03f2"}, {"problem": 22, "code": "(fn [lst] (loop [in lst x 0] (if (empty? in) x (recur (rest in) (+ x 1)))))", "user": "51bc3e7fe4b0fe3ecfb46455"}, {"problem": 22, "code": "(fn count'\n  ([l]\n  (count' l 0))\n  ([l n]\n  (if (empty? l) \n    n\n    (count' (rest l) (+ n 1)))))", "user": "56e8ef93e4b04a395b9a03f4"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "56e9555fe4b04a395b9a03f7"}, {"problem": 22, "code": "#(apply + (map (constantly 1) %))", "user": "56e99ec8e4b04a395b9a03fb"}, {"problem": 22, "code": "(fn cnt [l] (if (= l ()) 0 (+ 1 (cnt (rest l)))))", "user": "56e9d3e6e4b04a395b9a03fd"}, {"problem": 22, "code": ";(fn numb [x]\n;     (if (= () x)\n;         0\n;         (+ 1 (numb (rest x)))))\n#(reduce + (map (constantly 1) %))", "user": "565487dce4b0f9d632dd8482"}, {"problem": 22, "code": "#(reduce (fn [i _] (inc i)) 0 %)", "user": "56e9e0ace4b04a395b9a0400"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "56ea034fe4b04a395b9a0402"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "56ea8d33e4b04a395b9a040a"}, {"problem": 22, "code": "(fn myCount [l] (if (empty? l) 0 (->> l rest myCount (+ 1))))", "user": "56ea8adfe4b04a395b9a0407"}, {"problem": 22, "code": "(fn [col] (reduce (fn [x y] (inc x)) 0 col ))", "user": "56eaa753e4b04a395b9a040e"}, {"problem": 22, "code": "(fn [coll]\n    (reduce (fn [accum val] (inc accum)) 0 (seq coll)))", "user": "56eaad95e4b04a395b9a040f"}, {"problem": 22, "code": "(fn mycount [x] (if (empty? x) 0 (+ 1 (mycount (rest x)))))", "user": "56ea8b75e4b04a395b9a0409"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "56eab346e4b04a395b9a0410"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "56eafdc7e4b04a395b9a041a"}, {"problem": 22, "code": "#(reduce \n  (fn [x y] (inc x)) \n  0 \n  %)", "user": "56eb16d8e4b04a395b9a041d"}, {"problem": 22, "code": "(fn f [l]\n  (if (= l '())\n    0\n    ( + (f (rest l)) 1)))", "user": "56eb3f9de4b04a395b9a0420"}, {"problem": 22, "code": "(fn [xs] (reduce + (map (fn [x] (+ 1)) xs)))", "user": "56d008d9e4b0ea9b8538f776"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "56e7ebb4e4b02e7e935eb6e1"}, {"problem": 22, "code": "#(apply + (map (fn [_] 1) %))", "user": "56ebe773e4b04a395b9a042a"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "56ec0af1e4b04a395b9a0430"}, {"problem": 22, "code": "(fn count' [l]\n  (if (empty? l)\n      0\n      (inc (count' (rest l)))))", "user": "56ec3a97e4b04a395b9a0433"}, {"problem": 22, "code": "reduce (fn [cont _] (inc cont)) 0", "user": "56eb5c76e4b04a395b9a0422"}, {"problem": 22, "code": "(partial reduce (fn [acc cur] (+ acc 1)) 0)", "user": "56ec7b7fe4b04a395b9a043a"}, {"problem": 22, "code": "(fn contar [x]\n  ; if () return 0\n  ; else return (contar (rest x)) + 1\n  (if (= x '())\n    0\n    (+ (contar (rest x)) 1)\n  )\n)", "user": "56ce8728e4b0ea9b8538f760"}, {"problem": 22, "code": "(fn contar [x]\n  (if (= x '())\n    0\n    (+ (contar (rest x)) 1)\n  )\n)", "user": "56d09e8ee4b0ea9b8538f782"}, {"problem": 22, "code": "(comp (partial apply +) (partial map (constantly 1)))", "user": "56ecc4b5e4b04a395b9a043e"}, {"problem": 22, "code": "(fn [sq]\n  (loop [s sq\n         n 0]\n    (if (empty? (rest s))\n      (+ n 1)\n      (recur (rest s) (+ n 1)))))", "user": "56eb53f9e4b04a395b9a0421"}, {"problem": 22, "code": "#(reduce (fn [acc e] (inc acc)) 0 %)", "user": "56ebf105e4b04a395b9a042c"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "56eb3f58e4b04a395b9a041f"}, {"problem": 22, "code": "(fn [lst] (reduce + \n                  (map \n                   (fn [x] 1)\n                   lst)))", "user": "56ed3410e4b04a395b9a0444"}, {"problem": 22, "code": "(fn [s] (reduce (fn [acc e] (inc acc)) 0 s))", "user": "56d2a103e4b0ea9b8538f7a3"}, {"problem": 22, "code": "(fn cnt [[x & xs]] (if xs (+ 1 (cnt xs)) 1 ))", "user": "56edf2dde4b04a395b9a044b"}, {"problem": 22, "code": "#(loop [c 0 [h & t] %] (if (nil? t) (inc c) (recur (inc c) t)))", "user": "56eca64fe4b04a395b9a043d"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "56dc483fe4b0ea9b8538f81b"}, {"problem": 22, "code": "#(reduce (fn [k _] (inc k)) 0 %)", "user": "56ecf2e6e4b04a395b9a0440"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5655d811e4b0f9d632dd849a"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "56eed056e4b04a395b9a0454"}, {"problem": 22, "code": "(fn [items] (reduce  (fn [a b] (+ a 1)) 0 items))", "user": "56ef11efe4b04a395b9a045b"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "56e8963ae4b04a395b9a03f1"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "56ef63eee4b04a395b9a045e"}, {"problem": 22, "code": "#(reduce + (map (fn[x]1) %))", "user": "56ef9038e4b04a395b9a0460"}, {"problem": 22, "code": "#(loop [s % n 0]\n   (if (seq s)\n   \t(recur (rest s)(inc n))\n   \tn))", "user": "56a62137e4b0542e1f8d14e8"}, {"problem": 22, "code": "(fn count-elems [xs]\n  (if (empty? xs) 0 \n    (+ 1 (count-elems (rest xs)))))", "user": "56efc9fde4b04a395b9a0464"}, {"problem": 22, "code": "(fn [seq]\n  (apply + (map (fn [x] 1) seq)))", "user": "56ef2348e4b04a395b9a045c"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "56f000aee4b04a395b9a0469"}, {"problem": 22, "code": "(fn [coll]\n  (reduce + (map (fn [el] 1) coll)))", "user": "56f006f4e4b04a395b9a046a"}, {"problem": 22, "code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "56ec5b88e4b04a395b9a0438"}, {"problem": 22, "code": ";#(reduce + (map (fn [v] 1) %))\n(fn len [s] \n  (loop [i 0 t s]\n    (if (empty? t) i (recur (inc i) (rest t)))\n  )\n)", "user": "56ef0203e4b04a395b9a0457"}, {"problem": 22, "code": "(fn [c] (reduce (fn [x i] (inc x)) 0 (seq c)))", "user": "56f07437e4b04a395b9a047b"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "56efec81e4b04a395b9a0466"}, {"problem": 22, "code": "(fn [x]\n  (loop [x x y 0]\n    (if (empty? x)\n      y\n      (recur (rest x) (+ y 1))\n    )\n  )\n)", "user": "56df9725e4b0ca2494a095fd"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "56f10139e4b04a395b9a0487"}, {"problem": 22, "code": "#(reduce + (map(fn [x] 1) %))", "user": "56efef12e4b04a395b9a0467"}, {"problem": 22, "code": "(fn [coll]\n  (loop [cnt 0 remain coll]\n    (if (seq remain)\n      (recur (inc cnt) (rest remain))\n      cnt)))", "user": "562268dce4b03f08ee9a9224"}, {"problem": 22, "code": "#(loop [arr % size 0]\n  (if (empty? arr)\n    size\n    (recur (rest arr) (inc size))\n    )\n  )", "user": "56cefadee4b0ea9b8538f763"}, {"problem": 22, "code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "56f17802e4b04a395b9a0491"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) % ))", "user": "56f18d0ce4b04a395b9a0496"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "56f102f9e4b04a395b9a0488"}, {"problem": 22, "code": "#(reduce + (map (fn [x] (if-not x 0 1)) %))", "user": "56f15eade4b04a395b9a048e"}, {"problem": 22, "code": "(fn [lat]\n  (reduce (fn [x y] (+ x 1)) 0 lat))", "user": "56d3bc2de4b0ea9b8538f7b0"}, {"problem": 22, "code": "(fn ct\n  ([coll]\n\t(ct coll 0))  \n  ([coll lt]\n  \t(if (nil? (first coll))\n    \tlt\n    \t(recur (rest coll) (inc lt)))))", "user": "56f188e9e4b04a395b9a0494"}, {"problem": 22, "code": "(fn cnt [x] (+ 1(second (last (map vector x (range))))))\n;;(fn cnt [x] (if (= () x) 0 (+ 1 (cnt (rest x)))))", "user": "56f258d3e4b04a395b9a04a1"}, {"problem": 22, "code": "(fn [s] (loop [cnt 0 sequ s] (if (empty? sequ) cnt (recur (+ cnt 1) (rest sequ)))))", "user": "5292feb4e4b0239c8a67af39"}, {"problem": 22, "code": "#(loop [s % c 0]\n   (if-not (first s)\n     c\n     (recur (rest s) (inc c))))", "user": "56cf115de4b0ea9b8538f765"}, {"problem": 22, "code": "(fn [x] (reduce (fn calc [x1 x2] (inc x1)) 0 x))", "user": "56e93576e4b04a395b9a03f6"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "562d6fb9e4b0a45d2ff8301c"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "56eff7c1e4b04a395b9a0468"}, {"problem": 22, "code": "#(reduce (fn [r i] (inc r)) 0 %)", "user": "520e37cfe4b066f3ea161c96"}, {"problem": 22, "code": "#(reduce (fn [n _] (inc n)) 0 %)", "user": "56e1e3ebe4b03a7c14b85a2a"}, {"problem": 22, "code": "#(reduce (fn [c _](inc c)) 0 %)", "user": "56efb3a3e4b04a395b9a0463"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "56f4623ae4b046a417f9205d"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "566dcba1e4b0a866af6896d0"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "56f298b4e4b04a395b9a04a6"}, {"problem": 22, "code": "reduce (fn [acc _x] (inc acc)) 0", "user": "56f4bf47e4b046a417f92062"}, {"problem": 22, "code": "#(alength (to-array %))", "user": "56f45469e4b046a417f9205c"}, {"problem": 22, "code": "#(loop [counter 0 coll %]\n  (if (empty? coll)\n      counter\n      (recur (inc counter) (rest coll))))", "user": "56f514cee4b046a417f92068"}, {"problem": 22, "code": "(fn cnt [s]\n  (let [ct (fn ct [s n]\n             (if (empty? s)\n               n\n               (ct (rest s) (+ n 1))))]\n             (ct s 0)))", "user": "56f53962e4b046a417f9206c"}, {"problem": 22, "code": "(fn [lst]\n  (loop [i lst cnt 0]\n   (cond (empty? i) cnt\n     :t (recur (rest i)(inc cnt)))))", "user": "56efe32ce4b04a395b9a0465"}, {"problem": 22, "code": "#(loop [l %\n        acc 0]\n   (if (empty? l)\n     acc\n     (recur (rest l) (inc acc))))", "user": "56f59df1e4b046a417f92075"}, {"problem": 22, "code": "(fn count-seq [li]\n  (reduce (fn sum [c _] (inc c)) 0 li))", "user": "56f57481e4b046a417f92072"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "56f5551de4b046a417f92070"}, {"problem": 22, "code": "(fn [x] (reduce (fn [x y] (inc x)) 0 x))", "user": "56f35fafe4b046a417f92051"}, {"problem": 22, "code": "(fn my-count [x]\n  (reduce (fn [accum item] (inc accum)) 0 x))", "user": "539f9f79e4b0ca733b97449e"}, {"problem": 22, "code": "(fn [coll] (loop [[h & tails] coll c 0] (if tails (recur tails (inc c)) (inc c))))", "user": "56f3e77ee4b046a417f92058"}, {"problem": 22, "code": "(fn [s] (+ 1 (last (map-indexed (fn [i _] i) s))))", "user": "56ef0431e4b04a395b9a0458"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "56f6e541e4b08e7d20b9682a"}, {"problem": 22, "code": "(fn [x] (reduce (fn [accum e] (+ accum 1)) 0 x))", "user": "56f6e096e4b08e7d20b96829"}, {"problem": 22, "code": "#(+ 1 (last (map-indexed (fn [a b] a) %)))", "user": "56f70fb2e4b08e7d20b9682b"}, {"problem": 22, "code": "(fn [s] (reduce (fn [x y] (inc x)) 0 s))", "user": "56f73c24e4b08e7d20b9682e"}, {"problem": 22, "code": ";#(loop [v %1 i 1]\n;   (if (= (next (vec v)) nil)\n;     i\n;     (recur (drop 1 v) (inc i))))\nreduce #(or (+ % 1) %2) 0", "user": "56f5324ce4b046a417f9206a"}, {"problem": 22, "code": "(fn [lst]\n  (reduce + (map (constantly 1) lst)))", "user": "56f748c6e4b08e7d20b9682f"}, {"problem": 22, "code": "(fn len [xs]\n  (if (empty? xs)\n    0\n    (inc (len (rest xs)))))", "user": "54c8dc10e4b045293a27f655"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5602bdf9e4b04bb52996e1a7"}, {"problem": 22, "code": "(fn my-count [lst]\n        (if (= (first lst) nil) 0\n            (+ 1 (my-count (rest lst)))))", "user": "56ef0a2ee4b04a395b9a045a"}, {"problem": 22, "code": "(fn [s] (reduce #(+ %1 %2) (map #(do %1 1) s)))", "user": "56f51879e4b046a417f92069"}, {"problem": 22, "code": "(fn [lst] (loop [remain lst, cnt 0] (if (not (empty? remain)) (recur (rest remain) (inc cnt)) cnt)))", "user": "568b20e9e4b0dcc4269f40a1"}, {"problem": 22, "code": "(fn [z]\n  (reduce (fn [x y] (inc x)) 0 z))", "user": "54ad9927e4b09f271ff37ce5"}, {"problem": 22, "code": "(fn [coll]\n  (#(if (empty? (rest %1))\n       %2\n       (recur (rest %1) (inc %2))) coll 1))", "user": "56e044ade4b0ca2494a09603"}, {"problem": 22, "code": "#(reduce (fn [i _] (inc i)) 0 %)", "user": "56d15251e4b0ea9b8538f78c"}, {"problem": 22, "code": "(fn f [x]\n  (loop [x x\n         i 0]\n    (if (empty? x)\n      i\n      (recur (rest x) (inc i)))))", "user": "56f85849e4b08e7d20b96836"}, {"problem": 22, "code": "(fn [seq] (loop [seqAcc seq counter 0] (if (empty? seqAcc) counter (recur (rest seqAcc) (inc counter)))))", "user": "55cfdfc9e4b0e31453f64a35"}, {"problem": 22, "code": "#(reduce + (map (fn [_] 1) %))", "user": "56f881e0e4b08e7d20b96839"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "56f7ecdfe4b08e7d20b96834"}, {"problem": 22, "code": "(fn [s] (reduce (fn [acc _] (inc acc)) 0 s))", "user": "5687b6abe4b0dcc4269f4061"}, {"problem": 22, "code": "(fn [lst] (reduce (fn [fst snd] (inc fst)) 0 lst))", "user": "54e7425ee4b024c67c0cf810"}, {"problem": 22, "code": "(fn cnt \n  ([s] (cnt s 0))\n  ([s c]\n    (if (empty? s) c (cnt (rest s) (inc c)))))", "user": "56f9392ae4b07572ad1a88ac"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "56f95915e4b07572ad1a88af"}, {"problem": 22, "code": "(fn [sq]\n   (loop [items sq\n          nb 0]\n     (if (empty? items)\n       nb\n       (recur (rest items) (inc nb)))))", "user": "56f949fae4b07572ad1a88ad"}, {"problem": 22, "code": "(fn cnt [x] (if (empty? x) 0 (+ 1 (cnt (rest x)))))", "user": "56f94ff7e4b07572ad1a88ae"}, {"problem": 22, "code": "#(reduce (fn [a b] (inc a)) (cons  0 %))", "user": "56f070fee4b04a395b9a0478"}, {"problem": 22, "code": "(fn [x]\n  (loop [coll x idx 0]\n    (if (empty? coll)\n      idx\n      (recur (rest coll) (inc idx)))))", "user": "56f5e6d5e4b046a417f92079"}, {"problem": 22, "code": "(fn this\n  ([coll] (this coll 0))\n  ([coll counter] (if (empty? coll) counter (this (rest coll) (inc counter)))))", "user": "56e87a9ce4b04a395b9a03f0"}, {"problem": 22, "code": "(fn\n  [lst]\n  (loop [[elem & rem] lst\n         n 0]\n    (if (nil? elem)\n      n\n      (recur rem (+ n 1))\n      )\n    ))", "user": "56f8055ee4b08e7d20b96835"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "56ea8ae3e4b04a395b9a0408"}, {"problem": 22, "code": "(comp last (partial map-indexed (fn [cnt coll] (+ 1 cnt))))", "user": "56fa3f7ae4b07572ad1a88bf"}, {"problem": 22, "code": "(fn c[s]\n  (loop [r 0 m s]\n    (if (empty? m) r\n      (recur (inc r) (rest m)))))", "user": "56fa8984e4b07572ad1a88c1"}, {"problem": 22, "code": "(fn [coll] \n  (reduce (fn [prev curr] (inc prev)) 0 coll))", "user": "56785234e4b05957ce8c6177"}, {"problem": 22, "code": "(fn len\n  ([s] (len s 1))\n  ([[h & t] c]\n   (if (empty? t)\n     (identity c)\n     (len t (inc c)))))", "user": "56f9890be4b07572ad1a88b5"}, {"problem": 22, "code": "(fn [cl] (reduce + (map (constantly 1) cl)))", "user": "56ebcbf6e4b04a395b9a0428"}, {"problem": 22, "code": "#(reduce + (map (fn [_] 1) %))", "user": "56f8b6efe4b07572ad1a88a5"}, {"problem": 22, "code": "(fn [items] \n  (reduce (fn [acc _] \n            (inc acc))\n          0\n          items))", "user": "56fbe0cce4b07572ad1a88d8"}, {"problem": 22, "code": "reduce (fn [x y] (+ x 1)) 0", "user": "56fb9f3ee4b07572ad1a88d0"}, {"problem": 22, "code": "(fn [x]\n  (loop [s x acc 0]\n    (if (empty? s)\n      acc\n      (recur (rest s) (inc acc)))))", "user": "56f9c7c6e4b07572ad1a88ba"}, {"problem": 22, "code": "(fn a [lst]\n  (loop [b lst z 0]\n    (if (empty? b) z\n      (recur (rest b) (inc z)))))", "user": "56fc1bc7e4b07572ad1a88dd"}, {"problem": 22, "code": "(fn mount \n  ([s] (mount s 0))\n  ([s n]\n   (if (empty? s)\n     n\n     (mount (rest s) (inc n)))))", "user": "56fc1d61e4b07572ad1a88de"}, {"problem": 22, "code": "(fn c22 \n  ([c] (c22 c 0))\n  ([c n] (if (empty? c) n (c22 (rest c) (inc n)))))", "user": "56f09bf4e4b04a395b9a047f"}, {"problem": 22, "code": "#(reduce (fn [a b] (+ a 1)) 0 %)", "user": "56fc7cb4e4b08d47c977819a"}, {"problem": 22, "code": "(fn spe-count\n  ([coll]\n  (spe-count coll 0))\n  ([coll cpt]\n   (if (first coll)\n     (spe-count (rest coll) (inc cpt))\n   \t cpt)\n   )\n  )", "user": "56fa972be4b07572ad1a88c2"}, {"problem": 22, "code": "#(reduce + (map (fn[x] 1) %))", "user": "56f180a5e4b04a395b9a0492"}, {"problem": 22, "code": "(fn [thing] (inc (first (last (map-indexed vector thing)))))", "user": "56ede653e4b04a395b9a0449"}, {"problem": 22, "code": "(fn a[x]\n(if (nil? (first x))\n  0\n  (+ 1 (a (rest x)))\n ))", "user": "56faebc2e4b07572ad1a88c8"}, {"problem": 22, "code": "#(\n  loop [r % result 0]\n  ( \n   if (= r '())\n   result\n   (recur (rest r) (+ result 1))\n  ) \n )", "user": "56f97711e4b07572ad1a88b2"}, {"problem": 22, "code": "(fn [s]\n  (loop [s s c 0]\n    (if (empty? s)\n      c\n      (recur (rest s) (inc c)))))", "user": "56df632ce4b0ca2494a095f2"}, {"problem": 22, "code": "reduce (fn [x y] (+ x 1)) 0", "user": "56fdd9a1e4b08d47c97781a8"}, {"problem": 22, "code": "(fn c [x]\n  (if (empty? x) 0\n    (inc (c (rest x)))))", "user": "56fd020ee4b08d47c97781a0"}, {"problem": 22, "code": "(fn [s] (loop [c 0 x s] (if (seq x) (recur (inc c) (rest x)) c)))", "user": "56fde58ae4b08d47c97781aa"}, {"problem": 22, "code": "reduce (fn [x y] (inc x)) 0", "user": "56fd7f0ee4b08d47c97781a5"}, {"problem": 22, "code": "(fn [c]\n(loop [coll c acc 0]\n(if (empty? coll) acc (recur (rest coll) (+ acc 1)))))", "user": "56f4cedce4b046a417f92063"}, {"problem": 22, "code": "#((comp (fn [x] (+ x 1)) first last) (map-indexed vector %))", "user": "56fee4c0e4b08d47c97781b5"}, {"problem": 22, "code": "(fn [seq] (loop [size 0 theseq seq] (if (= (first theseq) nil) size (recur (inc size) (rest theseq)))))", "user": "56fbcc1fe4b07572ad1a88d5"}, {"problem": 22, "code": "(fn [x] \n  (reduce \n   (fn [acc y] (+ acc 1) \n     )\n   0 x\n   )\n  )", "user": "56fee925e4b08d47c97781b7"}, {"problem": 22, "code": "(fn count-a-seq\n  [s]\n  (loop [s s\n         n 0]\n    (if (empty? s)\n      n\n      (recur (rest s) (inc n)))))", "user": "55ad2d97e4b03311e7b732a2"}, {"problem": 22, "code": "#(reduce (fn [k _] (inc k)) 0 %)", "user": "570005efe4b08d47c97781c4"}, {"problem": 22, "code": "(fn [s]\n  (loop [c 0 [h & t] s]\n    (if (nil? t)\n      (inc c)\n      (recur (inc c) t))))", "user": "54addba9e4b09f271ff37ce9"}, {"problem": 22, "code": "(fn my-count [xs]\n  ((fn helper [xs, c]\n     (if (= [] xs)\n       c\n       (helper (rest xs) (inc c))))\n     xs 0))", "user": "57006957e4b08d47c97781c8"}, {"problem": 22, "code": "reduce #(or (+ % 1) %2) 0", "user": "56f7bed6e4b08e7d20b96832"}, {"problem": 22, "code": "(fn _count\n  ([s] (_count s 0))\n  ([s n] (if s\n           (_count (next s) (inc n))\n           n)))", "user": "57008afae4b08d47c97781ca"}, {"problem": 22, "code": "reduce (fn [x y] (inc x)) 0", "user": "5700ec08e4b08d47c97781cd"}, {"problem": 22, "code": "#(reduce (fn [a b] (+ a 1)) 0 %)", "user": "5700f1f0e4b08d47c97781ce"}, {"problem": 22, "code": "(fn [coll]\n  (loop [tail coll n 0]\n    (if-not tail\n      n\n      (recur (next tail) (inc n)))))", "user": "56e5e4aee4b02e7e935eb6c0"}, {"problem": 22, "code": "#(reduce \n    (fn [x y] (inc x))\n     0 %)", "user": "56ea8374e4b04a395b9a0404"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "57002b81e4b08d47c97781c7"}, {"problem": 22, "code": "(partial (fn [c x] (if (empty? x) c (recur (inc c) (rest x)))) 0)", "user": "57011eb3e4b08d47c97781d1"}, {"problem": 22, "code": "(fn countSeq [x]\n  (inc\n    (if (empty? x)\n      -1\n      (countSeq (rest x))\n      )))", "user": "567e6d24e4b0feffd0d18eb4"}, {"problem": 22, "code": "(fn [s]\n  (loop [c 0\n         remaining s]\n    (if (empty? remaining)\n      c\n      (recur (inc c) (rest remaining)))))", "user": "5701f886e4b08d47c97781d9"}, {"problem": 22, "code": "#( reduce (fn [c _] (inc c)) 0 %1)", "user": "57016724e4b08d47c97781d6"}, {"problem": 22, "code": "(fn [the-seq] (reduce + (map (fn [x] 1) the-seq)))", "user": "57024aefe4b08d47c97781df"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "57023fc2e4b08d47c97781db"}, {"problem": 22, "code": "(fn [xs] (reduce + (map (fn [_] 1) xs)))", "user": "56e42593e4b03a7c14b85a48"}, {"problem": 22, "code": "reduce (fn[x, y] (inc x))  0", "user": "56e6e1e6e4b02e7e935eb6cf"}, {"problem": 22, "code": "(fn [xs]\n  (loop [xs xs\n         acc 0]\n    (if (empty? xs)\n      acc\n      (recur (rest xs) (inc acc)))))", "user": "551ae9a7e4b07993ea3788c8"}, {"problem": 22, "code": "reduce (fn [x y] (inc x)) 0", "user": "56fda2bae4b08d47c97781a6"}, {"problem": 22, "code": "(fn function [x] (if (nil? (next x)) 1 (+ 1 (function (rest x)))))", "user": "5703386fe4b08d47c97781ed"}, {"problem": 22, "code": "reduce (fn [acc _] (+ acc 1)) 0", "user": "57035ccfe4b08d47c97781ef"}, {"problem": 22, "code": "#(loop [i 0] (if (nthnext %1 i) (recur (+ i 1)) i))", "user": "57024999e4b08d47c97781de"}, {"problem": 22, "code": "#(reduce (fn [c n] (+ c 1)) 0 %)", "user": "56fe665be4b08d47c97781af"}, {"problem": 22, "code": "#(reduce (fn [x y]\n           (+ x 1)) 0 %)", "user": "57037a23e4b08d47c97781f2"}, {"problem": 22, "code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "5602842de4b04bb52996e1a1"}, {"problem": 22, "code": "(fn count2 [coll]\n  (if (empty? coll)\n    0\n    (inc (count2 (rest coll)))))", "user": "56fbf83de4b07572ad1a88da"}, {"problem": 22, "code": "(fn f [coll]\n  (if (empty? coll)\n    0\n    (+ 1 (f (rest coll)))))", "user": "56f02c90e4b04a395b9a0472"}, {"problem": 22, "code": "(fn [s]\n  (loop [s (seq s)\n         n 0]\n  (if s\n    (recur (next s)\n           (inc n))\n    n)))", "user": "5703cbbee4b08d47c97781fb"}, {"problem": 22, "code": "(fn [s] ((partial reduce + 0) (map (fn [x] 1) s)))", "user": "557a2891e4b05c286339e09f"}, {"problem": 22, "code": "#(loop [a % b 0] (if (empty? a) b (recur (rest a) (inc b))))", "user": "56a9d4bbe4b07966d5a8a07b"}, {"problem": 22, "code": "#(inc (last (map (fn [a b] a) (range) %)))", "user": "5703cd50e4b08d47c97781fc"}, {"problem": 22, "code": "#(reduce (fn [a b] (inc a)) 0 %)", "user": "5703eda3e4b08d47c9778200"}, {"problem": 22, "code": "(fn [x] (reduce + (map (fn [k] 1) x)))", "user": "569d095fe4b0542e1f8d1470"}, {"problem": 22, "code": "(fn count-it [coll]\n  (loop [len 0 x coll]\n    (if (empty? x)\n      len\n    (recur (inc len) (drop 1 x)))))", "user": "57040195e4b08d47c9778202"}, {"problem": 22, "code": "(fn size [xs] (if (= (first xs) nil) 0 (+ 1 (size (rest xs)))))", "user": "56fff6a4e4b08d47c97781c3"}, {"problem": 22, "code": "(fn [s]\n  (loop [s s\n         n 0]\n    (if (empty? s)\n      n\n      (recur (drop 1 s) (inc n)))))", "user": "570459a9e4b0b0fb43fd0662"}, {"problem": 22, "code": "(fn [arr] (let [myfn2 (fn [[acc & [[head & the-rest]]]] \n                   (if (empty? the-rest) (+ acc 1) (recur [(+ acc 1) the-rest])))] (myfn2 [0 arr])))", "user": "56f0ecf4e4b04a395b9a0484"}, {"problem": 22, "code": "#(reduce (fn [acc _] (inc acc)) 0 %)", "user": "56ff45e5e4b08d47c97781bb"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "56fa2905e4b07572ad1a88be"}, {"problem": 22, "code": "(fn count2 [x]\n  (if (empty? x)\n    0\n    (inc (count2 (rest x)))))", "user": "57027310e4b08d47c97781e2"}, {"problem": 22, "code": "(fn myCount [x] \n  (if (empty? x) \n    0 \n    (inc (myCount (rest x)))))", "user": "5703d1fee4b08d47c97781fe"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5703ce0fe4b08d47c97781fd"}, {"problem": 22, "code": "(fn count-seq [x]\n  (reduce (fn [c _] (+ c 1)) 0 x))", "user": "5703d21ae4b08d47c97781ff"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5703c4c4e4b08d47c97781f7"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "570243e2e4b08d47c97781dd"}, {"problem": 22, "code": "#(reduce +(map (constantly 1) %))", "user": "570377c1e4b08d47c97781f1"}, {"problem": 22, "code": "(fn [lst]\n  (loop [i lst cnt 0]\n   (cond (empty? i) cnt\n     :t (recur (rest i)(inc cnt)))))", "user": "57040e34e4b08d47c9778203"}, {"problem": 22, "code": "(fn my-count\n  ([arr] (if (empty? arr) (int 0) (my-count (rest arr) 1)))\n  ([arr n] (if (empty? arr) (int n) (my-count (rest arr) (inc n))))\n)", "user": "570578aae4b0b0fb43fd0673"}, {"problem": 22, "code": "#(loop [x (vec %) y 0]\n   (if (empty? x)\n     y\n     (recur (pop x) (inc y))))", "user": "570362ece4b08d47c97781f0"}, {"problem": 22, "code": "(fn [x]\n  (letfn [(count2 [y i]\n                  (if (empty? y)\n                    i\n                    (count2 (rest y) (+ i 1))))]\n    (count2 x 0)))", "user": "56eaf8f1e4b04a395b9a0419"}, {"problem": 22, "code": "#(alength (to-array %))", "user": "57064231e4b0b0fb43fd067a"}, {"problem": 22, "code": "#(loop [loopseq %1\n        counter 1]\n         (let [[head & tail] loopseq]\n           (if (empty? tail)\n             counter\n             (recur tail (+ counter 1)))))", "user": "5702da69e4b08d47c97781e8"}, {"problem": 22, "code": "(fn [lst]\n    ((fn [lst sz]\n    (if (= lst '())\n      sz\n      (recur (rest lst) (inc sz)))) lst 0))", "user": "570708fce4b0b0fb43fd0687"}, {"problem": 22, "code": "(fn [l] (loop [list l c 0] (if (empty? list) c (recur (rest list) (inc c)))))", "user": "57061d20e4b0b0fb43fd0679"}, {"problem": 22, "code": "(fn [vect] (.size (vec vect)))", "user": "57067a0ee4b0b0fb43fd067e"}, {"problem": 22, "code": "#(reduce (fn [cnt sequ] (inc cnt)) 0 %)", "user": "5706d8dfe4b0b0fb43fd0685"}, {"problem": 22, "code": "#(loop [i 0\n        rs %]\n   (if (empty? rs)\n     i\n     (recur (inc i) (rest rs))))", "user": "5707abfce4b0b0fb43fd068d"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5707e579e4b0b0fb43fd0694"}, {"problem": 22, "code": "(fn [thing] (reduce + (map (fn [x]  1 ) thing)))", "user": "57073037e4b0b0fb43fd0689"}, {"problem": 22, "code": "(fn [sq] (reduce + (map (fn [x] 1) sq)))", "user": "57047768e4b0b0fb43fd0664"}, {"problem": 22, "code": "(fn [aseq]\n  (apply + (map #(let [% 1] %) aseq)))", "user": "5705e404e4b0b0fb43fd0676"}, {"problem": 22, "code": "(fn [li]\n  (reduce (fn [c _] (inc c)) 0 li))", "user": "57082299e4b0b0fb43fd0698"}, {"problem": 22, "code": "(fn me [l]\n  (if (empty? l)\n    0\n    (+ 1 (me (rest l)))))", "user": "57086931e4b0b0fb43fd069e"}, {"problem": 22, "code": "reduce (fn [num _] (inc num)) 0", "user": "5708b96ce4b0b0fb43fd06a3"}, {"problem": 22, "code": "#(loop [l % c 0]\n   (if (empty? l) c (recur (rest l) (+ 1 c))))", "user": "56c89c2ce4b0ed865f9758d4"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "57090dffe4b0b0fb43fd06a6"}, {"problem": 22, "code": "(fn [items] (reduce (fn [cnt item] (inc cnt)) 0 items))", "user": "57084634e4b0b0fb43fd069b"}, {"problem": 22, "code": "#(apply + (map (fn [x] 1) %))", "user": "57097b9de4b0b0fb43fd06ae"}, {"problem": 22, "code": "(fn [list-numbers]\n  (loop [new-list-numbers list-numbers, \n         x 0]\n    (if (empty? new-list-numbers)\n       x\n      (recur (rest new-list-numbers) (inc x)))))", "user": "57042a94e4b0b0fb43fd0660"}, {"problem": 22, "code": "(fn countit [s]\n  (if (empty? s)\n    0\n    (+ 1 (countit (rest s)))))", "user": "56785a48e4b05957ce8c6179"}, {"problem": 22, "code": "(fn [col] (loop [col col size 0] (if (seq col) (recur (rest col) (inc size)) size)))", "user": "5709eacde4b0b0fb43fd06b3"}, {"problem": 22, "code": "#(reduce (fn[c _] (inc c)) 0 %1)", "user": "57044b67e4b0b0fb43fd0661"}, {"problem": 22, "code": "#(loop [collection % n 0]\n  (if (empty? collection)\n    n\n    (recur (rest collection) (+ n 1))))", "user": "570577bbe4b0b0fb43fd0672"}, {"problem": 22, "code": "(fn foo\n  ([x] (foo x 0))\n  ([x tail] \n   (if (empty? x) tail (recur (rest x) (inc tail)))))", "user": "56fc0601e4b07572ad1a88db"}, {"problem": 22, "code": "reduce (fn [f _] (inc f)) 0", "user": "53d11f7fe4b00fb29b221310"}, {"problem": 22, "code": "#(loop [x %\n       n 0]\n   (if (empty? x)\n     n\n     (recur (rest x) (inc n))))", "user": "56acfee5e4b03c432f18734f"}, {"problem": 22, "code": "reduce (fn [x y] (+ x 1)) 0", "user": "56f5d0efe4b046a417f92078"}, {"problem": 22, "code": "(fn [myseq](\n\n  reduce (fn [last val] (+ last 1)) 0 myseq\n             ))", "user": "545e5805e4b01be26fd74679"}, {"problem": 22, "code": "(fn [x]\n  (loop [lst x cnt 0]\n    (if (empty? lst)\n      cnt\n      (recur (rest lst)(inc cnt)))))", "user": "570306cae4b08d47c97781ec"}, {"problem": 22, "code": "(fn [x] (reduce (fn [acc _] (inc acc)) 0 (seq x)))", "user": "542d8054e4b0dad94371f2b7"}, {"problem": 22, "code": "(fn [lst]\n  (loop [i lst cnt 0]\n    (cond (empty? i) cnt\n          :t (recur (rest i)(inc cnt))))\n  )", "user": "56f1b558e4b04a395b9a049a"}, {"problem": 22, "code": "#(loop [lst % cntr 0] (if (empty? lst)\n                       cntr\n                       (recur (rest lst) (+ cntr 1))))", "user": "570b421ee4b0b0fb43fd06be"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 (into [] %))", "user": "570bb66de4b0b0fb43fd06c2"}, {"problem": 22, "code": "(fn f \n  ([s]\n   (f s 0)) \n  ([s r] \n   (if (empty? s)\n     r \n     (recur (rest s) (inc r)))))", "user": "56ab7578e4b03c432f18733d"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5707c364e4b0b0fb43fd0691"}, {"problem": 22, "code": "(fn\n  [aseq]\n  (reduce (fn [n1 n2] (inc n1)) 0 aseq))", "user": "56cb4d06e4b0ea9b8538f72e"}, {"problem": 22, "code": "(fn [x]\n  (loop [x x c 0]\n    (if (empty? x)\n      c\n      (recur (rest x) (+ c 1)))))", "user": "570dc955e4b0b0fb43fd06e0"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "570ab24fe4b0b0fb43fd06b7"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "570dfc96e4b0b0fb43fd06e4"}, {"problem": 22, "code": "(fn [coll] \n  (reduce (fn [a _] \n            (inc a)) 0 coll))", "user": "54f5aa4ce4b0f2f3c5226e94"}, {"problem": 22, "code": "#((fn [lst acc] (if (empty? lst) acc (recur (rest lst) (inc acc)))) % 0)", "user": "570e13d3e4b0b0fb43fd06e6"}, {"problem": 22, "code": "(fn  [s]  (reduce  (fn  [x y]  (+ x 1)) 0 s))", "user": "570d1bb4e4b0b0fb43fd06d4"}, {"problem": 22, "code": "(fn [coll] (reduce + (map (fn [_] 1) coll)))", "user": "570dd7ece4b0b0fb43fd06e1"}, {"problem": 22, "code": "(fn [l]\n  (loop [x l c 0]\n    (if (empty? x)\n      c\n      (recur (rest x) (+ c 1))\n      )\n    )\n  )", "user": "5708e8f6e4b0b0fb43fd06a4"}, {"problem": 22, "code": "reduce (fn [x y] (inc x)) 0", "user": "570d5b10e4b0b0fb43fd06dc"}, {"problem": 22, "code": "(fn [x] (reduce + (map (constantly 1) x)))", "user": "570eeca5e4b0b0fb43fd06fb"}, {"problem": 22, "code": "(fn [my-seq]\n  (loop [my-count 0\n         curr-seq my-seq]\n    (if (= curr-seq [])\n      my-count\n      (recur (+ my-count 1) (rest curr-seq)))))", "user": "570f41f8e4b0b0fb43fd0702"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "570f6f55e4b0b0fb43fd0704"}, {"problem": 22, "code": "reduce (fn [a b] (+ a 1)) 0", "user": "570f8fcee4b09c608db70423"}, {"problem": 22, "code": "(fn [seq]\n  (reduce \n   (fn [x y] (+ x 1)) \n   0\n   seq))", "user": "56e30cefe4b03a7c14b85a3d"}, {"problem": 22, "code": "(fn [y] (reduce (fn [x _] (inc x)) 0 y))", "user": "56b506d5e4b0982f16b37e2d"}, {"problem": 22, "code": "(fn count-list [x] (loop [x x \n                          y 0] \n                     (if (empty? x) \n                       y \n                       (recur (rest x) (+ 1 y) )\n                       )\n                     )\n  )", "user": "57056c00e4b0b0fb43fd0671"}, {"problem": 22, "code": "(fn [s] (reduce (fn [a b] (inc a)) 0 (seq s)))", "user": "570e40b8e4b0b0fb43fd06ea"}, {"problem": 22, "code": "#(reduce (fn [a e] (inc a)) 0 %)", "user": "571107b3e4b09c608db7043f"}, {"problem": 22, "code": "(fn [x] (\n         reduce + (\n                 map (\n                      constantly 1\n                      ) x\n                 )\n         )\n  )", "user": "570eeb66e4b0b0fb43fd06fa"}, {"problem": 22, "code": "(partial\n  (fn cnt [n coll]\n    (if (first coll)\n      (cnt (inc n) (rest coll))\n      n))\n  0)", "user": "55e2c484e4b050e68259b439"}, {"problem": 22, "code": "(fn count-element\n  [x]\n  (if (empty? x)\n    0\n    (+ 1 (count-element (rest x)))))", "user": "57109477e4b09c608db70435"}, {"problem": 22, "code": "(fn [entries]\n  (loop [result 0 entriesx entries]\n   (if (nil? (first entriesx))\n     result\n     (recur (inc result) (rest entriesx)))))", "user": "5711b532e4b09c608db70449"}, {"problem": 22, "code": "(fn [l]\n   (loop [n 0 lst l]\n     (if (empty? lst)\n       n\n       (recur (inc n) (rest lst)))))", "user": "5711ca24e4b09c608db7044b"}, {"problem": 22, "code": "(fn [o] (loop [c 0 x o] \n  (if (empty? x) \n    c \n    (recur (inc c) (rest x)))))", "user": "54be9b81e4b0ed20f4ff6ef1"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5622b58de4b03f08ee9a922c"}, {"problem": 22, "code": "#(loop [coll %1 res 0]\n   (if (nil? coll) res\n   (recur (next coll) (inc res))) \n  )", "user": "57126104e4b09c608db70458"}, {"problem": 22, "code": "(fn [coll] (reduce + (map (fn [_] 1) coll)))", "user": "5712854ce4b07c98581c3a89"}, {"problem": 22, "code": "(fn [list] (reduce + (map (fn [x] 1) list)))", "user": "5710140fe4b09c608db7042e"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "5712a404e4b07c98581c3a8d"}, {"problem": 22, "code": "(fn a [b] \n  (alength (to-array b))\n)", "user": "5710e574e4b09c608db7043b"}, {"problem": 22, "code": "(fn x [list]\n   (loop [list list\n          c 0]\n     (if (empty? list)\n       c\n       (recur (rest list) (inc c))\n     )\n   )\n)", "user": "4df73d64535d04ed9115e775"}, {"problem": 22, "code": "#(reduce (fn [a _] (inc a)) 0 %)", "user": "57122b20e4b09c608db70451"}, {"problem": 22, "code": "#(+ (first (last (map-indexed (fn [idx itm] [idx itm]) %))) 1)", "user": "57129ed7e4b07c98581c3a8b"}, {"problem": 22, "code": "(fn [s]\n  ((fn [se c] \n        (if (empty? se)\n          c\n          (recur (rest se) (inc c)))) s 0))", "user": "5713c575e4b07c98581c3aab"}, {"problem": 22, "code": "(fn [s] (reduce (fn [a b] (inc a)) 0 s))", "user": "570de7f8e4b0b0fb43fd06e2"}, {"problem": 22, "code": "(fn counter [x]\n  (if (empty? x)\n    0\n    (+ 1 (counter (rest x))\n       )\n    )\n)", "user": "5710b136e4b09c608db70437"}, {"problem": 22, "code": "#(reduce + 0 (map (fn[x] 1) %))", "user": "5710c24be4b09c608db70439"}, {"problem": 22, "code": "(fn r[y x] (if (= x ()) y (r (inc y) (rest x)))) 0", "user": "57141d26e4b07c98581c3ab4"}, {"problem": 22, "code": "(fn my-f [a] (loop [x a y 0] (if (empty? x) y (recur (rest x) (inc y)))))", "user": "57080694e4b0b0fb43fd0697"}, {"problem": 22, "code": "(fn [x]\n  (reduce + 0\n          (map (fn [y] 1) x)))", "user": "5715072fe4b07c98581c3aca"}, {"problem": 22, "code": "(fn [l]\n      (loop [ls l\n                  n 0]\n        (if (empty? ls)\n             n\n             (recur (rest ls) (inc n)))))", "user": "57150a8ee4b07c98581c3acb"}, {"problem": 22, "code": "(fn length [data] \n  (loop [data data acc 0]\n    \n  \t(if (empty? data)\n      acc\n      (recur (next data) (+ acc 1))\n    )\n  ) \t\n)", "user": "5714c718e4b07c98581c3ac7"}, {"problem": 22, "code": "(fn size [items] (if (empty? items) 0 (inc (size (rest items)))))", "user": "56326995e4b0bfe05bf117a3"}, {"problem": 22, "code": "(fn [x] ( reduce (fn [y _] (inc y)) 0 x))", "user": "571614d7e4b07c98581c3aed"}, {"problem": 22, "code": "(fn f [x]\n  (if (= x ())\n    0\n    (+ 1 (f (rest x)))))", "user": "57152731e4b07c98581c3ad0"}, {"problem": 22, "code": "(fn [s]\n    (loop [x 0\n           s s]\n      (if (empty? s) x\n          (recur (inc x) (rest s)))))", "user": "56739bdce4b05957ce8c6122"}, {"problem": 22, "code": "#(loop [seq %\n        i 0]\n   (if (empty? seq)\n     i\n     (recur (rest seq) (+ i 1))))", "user": "57155980e4b07c98581c3ad7"}, {"problem": 22, "code": "(fn f ([x] (f (rest x) 1))\n  ([x y] (if (empty? x) y (f (rest x) (inc y)))))", "user": "5713f693e4b07c98581c3ab0"}, {"problem": 22, "code": "(fn cnt \n  ([lst] (cnt 0 lst))\n  ([acc lst] \n   (if (empty? lst)\n     acc\n     (cnt (inc acc) (rest lst))\n     )\n   )\n  )", "user": "5713e307e4b07c98581c3aaf"}, {"problem": 22, "code": "#(reduce (fn [acum x]\n           (inc acum))\n         0 %)", "user": "57168db0e4b07c98581c3afc"}, {"problem": 22, "code": "(fn count-function [x]\n  (if (= x '()) 0 (+ 1 (count-function (rest x)))))", "user": "5716acfbe4b07c98581c3b01"}, {"problem": 22, "code": "#(reduce (fn [v _] (+ v 1)) 0 %)", "user": "57168a0de4b07c98581c3afb"}, {"problem": 22, "code": "#(loop [L %, result 0]\n   (if (empty? L)\n     result\n     (recur (rest L) (+ result 1))))", "user": "57015a1de4b08d47c97781d4"}, {"problem": 22, "code": "(fn [listA] (loop [n 0\n                   listB listA]\n              \t(if ((comp empty? rest) listB)\n                  (inc n)\n                  (recur (inc n)(rest listB)))))", "user": "570d8418e4b0b0fb43fd06de"}, {"problem": 22, "code": "reduce (fn [a _] (+ 1 a)) 0", "user": "5716845be4b07c98581c3afa"}, {"problem": 22, "code": "(fn count' ([xs]\n            (count' xs 0))\n  ([xs cnt]\n   (cond (empty? xs) cnt\n         :otherwise (count' (rest xs) (+ cnt 1)))))", "user": "5717ad6fe4b07c98581c3b14"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "570ed30ae4b0b0fb43fd06f6"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1)%))", "user": "5715349be4b07c98581c3ad2"}, {"problem": 22, "code": "(fn [l] (reduce (fn [x y] (+ x 1)) 0 l))", "user": "5717e367e4b07c98581c3b1d"}, {"problem": 22, "code": "(fn counting\n  [lista]\n  (loop [lista lista numero 0]\n    (if (empty? lista)\n    \tnumero\n    \t(recur (rest lista) (+ 1 numero)))))", "user": "56fe2a2fe4b08d47c97781ad"}, {"problem": 22, "code": "(fn getcount [s] \n  (if (empty? s)\n    0\n    (inc (getcount (rest s)))\n    )\n  )", "user": "57131dfbe4b07c98581c3a98"}, {"problem": 22, "code": "reduce (fn [a b] (inc a)) 0", "user": "5714401fe4b07c98581c3ab7"}, {"problem": 22, "code": "reduce (fn [x y] (inc x))0", "user": "5714614ee4b07c98581c3abd"}, {"problem": 22, "code": "reduce (fn [x y](inc x)) 0", "user": "571456f1e4b07c98581c3abb"}, {"problem": 22, "code": "#(loop [c 0 xs %]\n   (if xs (recur (inc c) (next xs)) c))", "user": "565cc7a6e4b068f2fe63dc19"}, {"problem": 22, "code": "#(reduce + (map (fn [x] (+ 1)) %))", "user": "5717bcffe4b07c98581c3b16"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "566e996ae4b0a866af6896dd"}, {"problem": 22, "code": "(partial reduce (fn [acc _] (+ acc 1)) 0)", "user": "5717b57de4b07c98581c3b15"}, {"problem": 22, "code": "(fn [col]\n    (loop [\n           xs col\n           cnt  0]\n      (if (empty? xs)\n        cnt\n        (recur (rest xs) (inc cnt)))))", "user": "5719465fe4b07c98581c3b36"}, {"problem": 22, "code": "#(reduce (fn [a b] (+ a 1)) 0 %)", "user": "5716cc16e4b07c98581c3b02"}, {"problem": 22, "code": "#(reduce + (map (fn [coll] 1) %))", "user": "570794d8e4b0b0fb43fd068b"}, {"problem": 22, "code": "(fn [coll] (reduce (fn [n coll] (inc n)) 0 coll))", "user": "570a9be7e4b0b0fb43fd06b6"}, {"problem": 22, "code": "#(alength (to-array %))", "user": "571a0a0ae4b07c98581c3b44"}, {"problem": 22, "code": "(fn numb\n [l]\n (if (empty? l)\n   0\n   (+ 1 (numb (rest l)))))", "user": "5703a557e4b08d47c97781f4"}, {"problem": 22, "code": "#(.size (vec %))", "user": "5714e82ae4b07c98581c3ac9"}, {"problem": 22, "code": "#(loop [x 0, y %] \n  (if (empty? y)\n    x\n    (recur (inc x) (rest y))))", "user": "57147cd9e4b07c98581c3abf"}, {"problem": 22, "code": "(fn [l] (reduce (fn [c _] (inc c)) 0 l))", "user": "5715c337e4b07c98581c3ae3"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "571ac0b8e4b07c98581c3b5b"}, {"problem": 22, "code": "(fn [col]\n  (reduce (fn [a b] (+ a 1)) 0 col))", "user": "56a3dddce4b0542e1f8d14d2"}, {"problem": 22, "code": "reduce (fn [n _] (inc n)) 0", "user": "5716d585e4b07c98581c3b03"}, {"problem": 22, "code": "(fn [coll] (reduce (fn [x y] (inc x)) 0 coll))", "user": "5715b67fe4b07c98581c3ae1"}, {"problem": 22, "code": "(fn ! [sq]\n  (if (empty? sq)\n    0\n    (inc (! (rest sq)))))", "user": "570f8b24e4b09c608db70421"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "571bc0a1e4b07c98581c3b6c"}, {"problem": 22, "code": "(fn [coll]\n  (letfn [(mycount [coll cnt]\n                (if (empty? coll)\n                  cnt\n                  (recur (rest coll) (inc cnt))))]\n    (mycount coll 0)))", "user": "571c2babe4b07c98581c3b73"}, {"problem": 22, "code": "#(reduce (fn [count_ item_] (inc count_)) 0 %)", "user": "571ae32ae4b07c98581c3b5f"}, {"problem": 22, "code": "(fn [coll] (loop [coll coll\n                  n 0]\n             (if (empty? coll)\n               n\n               (recur (rest coll) (+ n 1)))))", "user": "571cd9dce4b0145328a76271"}, {"problem": 22, "code": "(partial reduce (fn [acc _] (inc acc)) 0)", "user": "571d063ee4b0145328a76272"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "571c89b5e4b0145328a7626d"}, {"problem": 22, "code": "#(loop [v % \n        x 0] (if (empty? v)\n               x\n               (recur (rest v) (inc x))))", "user": "56ec889ee4b04a395b9a043c"}, {"problem": 22, "code": "(fn [lst]\n  (reduce (fn [cot element] (inc cot)) 0 lst))", "user": "570e6974e4b0b0fb43fd06ef"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "54cf54b1e4b018d918be98cc"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "571cc060e4b0145328a7626e"}, {"problem": 22, "code": "(fn [s]\n  (loop [l s\n         len 1]\n  (if (= (second l) nil)\n    \tlen\n      (recur (rest l) (inc len)))))", "user": "571b900ae4b07c98581c3b69"}, {"problem": 22, "code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "571dd145e4b0145328a76283"}, {"problem": 22, "code": "(fn [x] ( reduce (fn[a b](inc a)) 0 x))", "user": "5717d674e4b07c98581c3b1a"}, {"problem": 22, "code": "(fn myfn [x] (if (empty? x) 0 (+ 1 (myfn (rest x)))))", "user": "571aad45e4b07c98581c3b59"}, {"problem": 22, "code": "(fn [col]\n  (reduce (fn [a b] (inc a)) 0 col))", "user": "571e5c9ee4b0145328a76290"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "571eeb49e4b0145328a7629c"}, {"problem": 22, "code": "#(reduce + ( map (constantly 1) %))", "user": "548f3ed8e4b0e286459a1236"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "571f5b4ce4b0145328a762a5"}, {"problem": 22, "code": "(fn cnt [se & [c]]\n  (if (not c)\n    (do (cnt (rest se) 1))\n    (do (if (empty? se)\n          (do c)\n          (do (cnt (rest se) (+ c 1)))))))", "user": "571a31e3e4b07c98581c3b47"}, {"problem": 22, "code": "#(reduce (fn [acc, e] (+ 1 acc)) 0 %)", "user": "571e819ae4b0145328a76294"}, {"problem": 22, "code": ";;#(reduce + (map (constantly 1) %))\n\n;;#(reduce (fn [x y] (inc x)) 0 %)\n\n#(loop [result 0 c %] \n   (if (empty? c)\n     result\n     (recur (inc result) (rest c))))", "user": "56ff0ef3e4b08d47c97781ba"}, {"problem": 22, "code": "(partial reduce (fn [n _] (inc n)) 0)", "user": "571fb6a0e4b0145328a762b5"}, {"problem": 22, "code": "(fn my-len [ls]\n  (cond (empty? ls) 0 :else (+ 1 (my-len (rest ls)))))", "user": "5716540fe4b07c98581c3af3"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "56df629fe4b0ca2494a095ee"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "56df63e1e4b0ca2494a095f6"}, {"problem": 22, "code": "(fn [l]\n  (reduce +(map (fn [x] (+ 0 1)) l)))", "user": "56df6351e4b0ca2494a095f3"}, {"problem": 22, "code": "(fn [x] (alength (to-array x)))", "user": "572010a4e4b0c5bde472c08c"}, {"problem": 22, "code": "(fn\n  [lst]\n  (->> (map (fn [e] 1) (seq lst))\n       (reduce +)))", "user": "56df6498e4b0ca2494a095f8"}, {"problem": 22, "code": "(fn\n  [lst]\n  (loop [size 0\n         lst lst]\n    (if (empty? lst)\n      size\n      (recur (inc size) (rest lst)))))", "user": "56df6417e4b0ca2494a095f7"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "56df63c7e4b0ca2494a095f5"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "571e6d73e4b0145328a76292"}, {"problem": 22, "code": "(fn [l]\n  (let [f (fn [l n]\n            (if (empty? l)\n              n\n              (recur (rest l) (inc n))))]\n    (f l 0)))", "user": "5703cb87e4b08d47c97781f9"}, {"problem": 22, "code": "(fn a [l]\n  (cond \n   (empty? l) 0\n   :else (+ 1 (a (rest l)))))", "user": "56df6301e4b0ca2494a095f1"}, {"problem": 22, "code": "(fn [xs]\n   (loop [xs xs n 0]\n     (prn xs)\n     (if (empty? xs)\n       n\n       (recur (rest xs) (inc n)))))", "user": "57210b6de4b0c5bde472c0a6"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "571ff1ebe4b0c5bde472c088"}, {"problem": 22, "code": "(fn [lst]\n  (loop [lst lst\n         aux 0]\n    (if (empty? lst)\n      aux\n      (recur (rest lst) (inc aux)))))", "user": "56e9a56ae4b04a395b9a03fc"}, {"problem": 22, "code": "#(inc (first (last (map-indexed vector %1))))", "user": "56f86f98e4b08e7d20b96837"}, {"problem": 22, "code": "#(reduce (fn [x y] (+ x 1)) 0 %)", "user": "56de78fde4b0ea9b8538f83c"}, {"problem": 22, "code": "(fn\n  [coll]\n    (reduce + \n            (replace {true 1 false 0} \n                     (map #(not (nil? %)) coll))))", "user": "56f6cabce4b08e7d20b96828"}, {"problem": 22, "code": "#(reduce (fn [x y] (+ x 1)) 0 %)", "user": "5721cd3be4b0c5bde472c0ba"}, {"problem": 22, "code": "(fn myCount [collection] \n  (reduce \n    (fn [curr y]\n      (inc curr)) \n    0 \n    collection))", "user": "56d9883ae4b0ea9b8538f7f4"}, {"problem": 22, "code": "(fn srch [args] \n  ((fn br[arr, n] (if (= () arr) n (br (rest arr) (+ n 1)))) args 0))", "user": "5721f13ce4b0c5bde472c0be"}, {"problem": 22, "code": "#(loop [c 0 icoll %1] (if (= nil (first icoll)) c (recur (inc c) (rest icoll))))", "user": "570e8d86e4b0b0fb43fd06f2"}, {"problem": 22, "code": "(fn count-seq\n  [s]\n  (if (= (rest s) ())\n    1\n    (+ (count-seq (rest s)) 1)\n  )\n)", "user": "56ebfb93e4b04a395b9a042e"}, {"problem": 22, "code": "#(loop [s % l 0] (if (empty? s)\n                   l\n                   (recur (rest s) (inc l))))", "user": "5720fc08e4b0c5bde472c0a3"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5716616fe4b07c98581c3af5"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "57210e8ee4b0c5bde472c0a8"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "570cd4bde4b0b0fb43fd06cf"}, {"problem": 22, "code": "reduce (fn [n _] (inc n)) 0", "user": "5722543ee4b0c5bde472c0c6"}, {"problem": 22, "code": "(fn my-count-seq [x]\n  (let [y (seq x)]\n    (loop [y y\n           a 0]\n      (if (empty? y)\n        a\n        (recur (rest y) (inc a))))))", "user": "57201f14e4b0c5bde472c08e"}, {"problem": 22, "code": "#(->> % (map (fn [n _] n) (range)) last inc)", "user": "5722b6ece4b0c5bde472c0d4"}, {"problem": 22, "code": "#(loop [l %1 i 0] (if (empty? l) i (recur (next l) (inc i))))", "user": "57177d3ae4b07c98581c3b0f"}, {"problem": 22, "code": "#(loop [len 0 counting %] (if (first counting) (recur (+ len 1) (rest counting)) len))", "user": "5720ba36e4b0c5bde472c09c"}, {"problem": 22, "code": "#(reduce (fn [c s] (inc c)) 0 %1)", "user": "570243c4e4b08d47c97781dc"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5722b2b5e4b0c5bde472c0d3"}, {"problem": 22, "code": "(fn co [x]\n  (if (empty? x)\n    0 \n    (+ 1 \n       (co (rest x)))))", "user": "5721dfc3e4b0c5bde472c0bb"}, {"problem": 22, "code": "(fn [xs] \n    (reduce (fn [a b] (inc a)) 0 xs))", "user": "570d0548e4b0b0fb43fd06d2"}, {"problem": 22, "code": "(fn [l]\n  (loop [i 0\n         l l]\n    (if (empty? l) i\n      (recur (inc i) (rest l)))))", "user": "56df636ae4b0ca2494a095f4"}, {"problem": 22, "code": "(fn o\n  [lst]\n  (loop [lista lst\n         r 0]\n    (cond \n     (empty? lista) r\n     :else (recur (rest lista) (inc r)))))", "user": "5723e6d6e4b0c5bde472c0f1"}, {"problem": 22, "code": "#(alength (to-array %))", "user": "571de0a2e4b0145328a76284"}, {"problem": 22, "code": "reduce (fn [r _] (+ r 1)) 0", "user": "57220050e4b0c5bde472c0c1"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "571d1234e4b0145328a76274"}, {"problem": 22, "code": "#(reduce  (fn [c _] (inc c)) 0 %)", "user": "571f341de4b0145328a762a0"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1)%))", "user": "571edeeae4b0145328a7629b"}, {"problem": 22, "code": "reduce (fn [n _] (inc n)) 0", "user": "57262196e4b0c5bde472c11e"}, {"problem": 22, "code": "#(reduce (fn [c item] (inc c)) 0 %)", "user": "5726448ae4b0c5bde472c122"}, {"problem": 22, "code": "(fn [col]\n  (loop [rcol col\n         acc 0]\n    (if (empty? rcol)\n      acc\n      (recur (rest rcol) (inc acc)))))", "user": "5724a4dae4b0c5bde472c0fe"}, {"problem": 22, "code": "#(reduce (fn [x c] (inc x)) 0 %)", "user": "51c84a9ce4b07ef393169e54"}, {"problem": 22, "code": "(fn [items] (if (string? items) (.length items) (.size items)))", "user": "5726adf8e4b0c5bde472c12b"}, {"problem": 22, "code": "(fn [x] (reduce (fn [c _] (inc c)) 0 x))", "user": "57213df6e4b0c5bde472c0ab"}, {"problem": 22, "code": "(fn [lst] (loop [curr-lst lst curr-index 0] ( if (empty? curr-lst) curr-index (recur (rest curr-lst) (inc curr-index) ))))", "user": "572722c4e4b0c5bde472c134"}, {"problem": 22, "code": "#(loop [l % n 0] (if (seq l) (recur (rest l) (inc n)) n))", "user": "57237a02e4b0c5bde472c0e5"}, {"problem": 22, "code": "(fn\n    [sq] \n    (loop [x 0 sqpart sq] \n      (if (and (nil? (first sqpart)) (empty? (rest sqpart)))\n        x \n        (recur (+ x 1) (rest sqpart))\n        )\n      )\n    )", "user": "571a282ae4b07c98581c3b46"}, {"problem": 22, "code": "(fn [lat] (reduce (fn [x y] (+ x 1)) 0 lat))", "user": "57211a02e4b0c5bde472c0a9"}, {"problem": 22, "code": "#(reduce + (map (fn [c] 1) %))", "user": "57262710e4b0c5bde472c120"}, {"problem": 22, "code": "(fn my-count [coll]\n  (cond (empty? coll) 0\n        true (inc (my-count (rest coll)))))", "user": "57283dbce4b0c5bde472c154"}, {"problem": 22, "code": "#(apply + (vals(frequencies %)))", "user": "57226290e4b0c5bde472c0c8"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "57289d7ee4b0c5bde472c15d"}, {"problem": 22, "code": "#(reduce (fn [c _]\n           (inc c)) 0 %)", "user": "57291a39e4b0c6e51e0d2b14"}, {"problem": 22, "code": "(fn my-count [lst]\n  (if (empty? lst) 0\n    (+ 1 (my-count (rest lst)))))", "user": "56df62b3e4b0ca2494a095ef"}, {"problem": 22, "code": "#(-> (interleave % (range))\n     last\n     inc)", "user": "5729277fe4b0c6e51e0d2b17"}, {"problem": 22, "code": "(fn [l] (reduce + (map #(if % 1) l)))", "user": "57280b92e4b0c5bde472c14e"}, {"problem": 22, "code": "(fn [xs]\n  (reduce (fn [a sp]\n            (inc a))\n          0\n          xs))", "user": "570a2357e4b0b0fb43fd06b5"}, {"problem": 22, "code": "(fn [x] (reduce (fn [y, x] (+ y 1)) 0 x))", "user": "57294e90e4b0c6e51e0d2b19"}, {"problem": 22, "code": "(fn cunt [xs] (if (empty? xs) 0 (+ 1 (cunt (rest xs)))))", "user": "56d340fde4b0ea9b8538f7ab"}, {"problem": 22, "code": "(fn mycount [xs] \n  (if (empty? xs)\n    0\n    (+ 1 (mycount (rest xs)))))", "user": "572a35a9e4b0f4d77e65122f"}, {"problem": 22, "code": "reduce (fn [x acc] (+ 1 x)) 0", "user": "572a3d77e4b0f4d77e651230"}, {"problem": 22, "code": "(fn my-count [l] (if (empty? l) 0 (+ 1 (my-count (rest l)))))", "user": "572a3d96e4b0f4d77e651232"}, {"problem": 22, "code": "#(reduce (fn [acc x] (+ 1 acc)) 0 %)", "user": "572a3d8ce4b0f4d77e651231"}, {"problem": 22, "code": "(fn [coll]\n  (loop [coll coll\n         c 0]\n    (if (first coll)\n      (recur (next coll) (inc c))\n      c)))", "user": "57275755e4b0c5bde472c13b"}, {"problem": 22, "code": "#(loop [result 0 c %]\n    (if(empty? c) result\n    (recur (inc result) (rest c))))", "user": "5684c439e4b04eec3ec5cfc1"}, {"problem": 22, "code": "(fn reduce-this [x] (reduce (fn [y z] (inc y)) 0 x))", "user": "572a60cee4b0f4d77e651237"}, {"problem": 22, "code": "#(reduce (fn [carry, x] (inc carry)) 0 %)", "user": "57299c57e4b0c6e51e0d2b1e"}, {"problem": 22, "code": "(fn \n  [items]\n  (loop [cnt 0 curr items]\n    (if (empty? curr)\n      cnt\n      (recur (inc cnt) (rest curr)))))", "user": "572a997ce4b0f4d77e65123e"}, {"problem": 22, "code": "(fn [lst]\n  (reduce (fn \n            [x y] \n            (inc x)) 0 lst))", "user": "56df7440e4b0ca2494a095fb"}, {"problem": 22, "code": "(fn [s]\n   (loop [cnt 0 sq s]\n     (if (= sq [])\n       cnt\n       (recur (inc cnt) (rest sq)))))", "user": "572c1f65e4b0cd1946bd0f4a"}, {"problem": 22, "code": "#(reduce + 0 (map (fn [x] 1) %1))", "user": "572c198fe4b0cd1946bd0f49"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "572ca54ae4b0cd1946bd0f59"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "572c9f76e4b0cd1946bd0f57"}, {"problem": 22, "code": "reduce (fn [acc _] (inc acc)) 0", "user": "504e1c58e4b0f6ff3350c462"}, {"problem": 22, "code": "(fn __ [xs]\n    (if-not (empty? xs) \n        (+ 1 (__ (rest xs)))\n        0))", "user": "55c9ff22e4b0e31453f649f3"}, {"problem": 22, "code": "(fn my-count\n  [coll]\n  (if (empty? coll)\n    0\n    (+ 1 (my-count (rest coll)))))", "user": "572db6d5e4b0cd1946bd0f78"}, {"problem": 22, "code": "#(reduce (fn [a _] (inc a)) 0 %)", "user": "54b0519be4b09f271ff37d14"}, {"problem": 22, "code": "(fn [coll]\n   (loop [[head & tail] coll\n          n 0]\n     (if head (recur tail (inc n)) n)))", "user": "553e3260e4b0a04f792994eb"}, {"problem": 22, "code": "(fn [sqnc]\n  (loop [s sqnc n 0] (if (empty? s) n (recur (rest s) (inc n))))\n)", "user": "572ac718e4b0f4d77e651242"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "572e26efe4b0cd1946bd0f81"}, {"problem": 22, "code": "(fn [l] (reduce (fn [a v] (inc a)) 0 l))", "user": "572e43f7e4b0cd1946bd0f83"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "57029859e4b08d47c97781e4"}, {"problem": 22, "code": "(fn\n  [s]\n  (loop [s s, l 0]\n    (if (seq s)\n      (recur (rest s) (inc l))\n      l)))", "user": "56b2630be4b0982f16b37e03"}, {"problem": 22, "code": "reduce (fn [s _] (inc s)) 0", "user": "57169f93e4b07c98581c3b00"}, {"problem": 22, "code": "(fn [s] (reduce + (map (constantly 1) s)))", "user": "54249bcce4b01498b1a71afb"}, {"problem": 22, "code": "(fn [d]\n    (loop [lt d acc 0]\n      (if (= lt nil)\n        acc\n        (recur (next lt)(inc acc)))))", "user": "50a3bf08e4b0ceace084d495"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "57300c19e4b0cd1946bd0fa1"}, {"problem": 22, "code": "reduce (fn [cnt _] (inc cnt)) 0\n\n;reduce #(or (inc %1) %2) 0\n\n;#(reduce + (map (constantly 1) %))\n\n;(fn cnt\n;  ([x] (cnt x 0))\n;  ([x acc]\n;   (if (empty? x)\n;     acc\n;     (recur (rest x) (inc acc)))))\n\n;(fn [coll] \n;  (\n;   #(if (empty? %1)\n;      %2\n;      (recur (rest %1) (inc %2)))\n;   coll\n;   0))\n\n;#(loop [cnt 0\n;       coll %]\n;  (if (empty? coll)    \n;    cnt\n;    (recur (inc cnt) (rest coll))))", "user": "572830e6e4b0c5bde472c152"}, {"problem": 22, "code": "(fn count-a-seq [l]\n  (reduce (fn [x y] (+ x 1)) 0 l))", "user": "572ea970e4b0cd1946bd0f89"}, {"problem": 22, "code": "(fn [lst]\n  (loop [cnt 0\n         l lst]\n    (if (empty? l)\n      cnt\n      (recur (inc cnt) \n             (rest l)))))", "user": "56b9c644e4b0f2655033593a"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "57309d74e4b0cd1946bd0fb1"}, {"problem": 22, "code": "(fn[n] \n  (loop [nm n i 0]\n    (if (empty? nm)\n      i\n      (recur (rest nm) (inc i)))))", "user": "572d41e6e4b0cd1946bd0f6d"}, {"problem": 22, "code": "(fn [a]\n  (loop [i 0 a a]\n    (if (empty? a)\n      i\n      (recur (inc i) (next a))\n      )))", "user": "572bc7cae4b0cd1946bd0f45"}, {"problem": 22, "code": "#(reduce + (map (fn [_] 1) %))", "user": "573107d5e4b0cd1946bd0fbc"}, {"problem": 22, "code": "(fn [col] (reduce (fn [agg & _] (+ 1 agg)) 0 col))", "user": "5730ded8e4b0cd1946bd0fb9"}, {"problem": 22, "code": "(fn [x] (+ (first (last (map-indexed vector x))) 1))", "user": "572db7fbe4b0cd1946bd0f79"}, {"problem": 22, "code": "(fn my-count [x] (letfn [(counter [x] (if (empty? x) 0 (+ 1 (counter(rest x)))))] (counter x)))", "user": "572a543ee4b0f4d77e651235"}, {"problem": 22, "code": "(fn test ([x] (test x 0)) ([x y] (if (empty? x) y (test (rest x) (+ y 1)))))", "user": "5731c1fce4b0cd1946bd0fc7"}, {"problem": 22, "code": "#(-> % seq .size)", "user": "5731e5a1e4b0cd1946bd0fca"}, {"problem": 22, "code": "#(\n  (fn [c lst] \n    (if (nil? (first (rest lst))) (inc c)\n        (recur (inc c) (rest lst)))) 0 %)", "user": "52b7e163e4b0c58976d9ad54"}, {"problem": 22, "code": "(fn my-count [xs]\n  (loop [acc 0 coll xs]\n    (if (empty? coll) \n      acc\n      (recur (inc acc) (rest coll)))))", "user": "570940a9e4b0b0fb43fd06aa"}, {"problem": 22, "code": "#(reduce + (map (fn [_] 1) %))", "user": "53829b28e4b06839e8705ed6"}, {"problem": 22, "code": "(fn [col] ((fn [col2 i] (if (empty? col2) i (recur (drop 1 col2) (inc i)))),col  0))", "user": "571aad02e4b07c98581c3b58"}, {"problem": 22, "code": "(fn my-count [c1]\n\t(loop [c 0 s1 c1]\n\t\t(if (empty? s1)\n\t\t\tc\n\t\t\t(recur (inc c) (rest s1)))))", "user": "56ba2f72e4b0f2655033593f"}, {"problem": 22, "code": "#(reduce (fn [a b] (inc a)) 0 %)", "user": "572f09f2e4b0cd1946bd0f94"}, {"problem": 22, "code": "(fn [sq]\n  ((fn [[head & tail] n]\n     (if (= nil head)\n       n\n       (recur tail (inc n))))\n       sq 0))", "user": "573240eee4b0cd1946bd0fd2"}, {"problem": 22, "code": "( fn countall [c]\n    (if (empty? c)\n      0      \n      (+ (countall (rest c)) 1)  \n    )   \n)", "user": "571aae1fe4b07c98581c3b5a"}, {"problem": 22, "code": "(partial reduce (fn [tot & lst] (+ 1 tot)) 0)", "user": "5733e4aee4b0cd1946bd0ffe"}, {"problem": 22, "code": "(fn [x] (reduce + (map (fn [y] 1) x)))", "user": "573407f0e4b0cd1946bd1001"}, {"problem": 22, "code": "#(loop [col % acc 0] \n   (if (= col (empty col)) acc\n       (recur (rest col) (inc acc))))", "user": "568384b4e4b0945ebc182a9a"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "524fd3f0e4b0541d1855b81d"}, {"problem": 22, "code": "reduce (fn [x _] (inc x)) 0", "user": "573102bbe4b0cd1946bd0fbb"}, {"problem": 22, "code": "(fn counter [x] \n  (if (nil? (first x))\n    0\n    (+ 1 (counter (next x)))\n  )\n)", "user": "57341373e4b0cd1946bd1002"}, {"problem": 22, "code": "(fn [col] (loop [cnt 0 col col] (if (empty? col) cnt (recur (inc cnt) (rest col)))))", "user": "57202eb7e4b0c5bde472c090"}, {"problem": 22, "code": "(fn cunt [coll] (reduce (fn [ctr el] (inc ctr)) 0 (seq coll) ))", "user": "561814bae4b06b1bb2182a1a"}, {"problem": 22, "code": "#(loop [coll % i 0] (if (empty? coll) i (recur (rest coll) (inc i))))", "user": "57286f16e4b0c5bde472c159"}, {"problem": 22, "code": "#(inc (last (map-indexed (fn [i n] i) %)))", "user": "573632b7e4b0cd1946bd102f"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "573664bbe4b0cd1946bd1031"}, {"problem": 22, "code": "#(reduce + (map (fn [_] 1) %))", "user": "570b4db8e4b0b0fb43fd06bf"}, {"problem": 22, "code": "(fn [coll]\n  (reduce (fn [x y] (inc x)) 0 coll))", "user": "568a351be4b0dcc4269f408a"}, {"problem": 22, "code": "(fn [xs]\n  (apply #'+ (map (fn [_] 1) xs)))", "user": "57377ae8e4b0cd1946bd1046"}, {"problem": 22, "code": "reduce (fn [x y] (+ x 1)) 0", "user": "57376dcbe4b0cd1946bd1044"}, {"problem": 22, "code": "#(reduce (fn [acc x] (inc acc)) 0 %)", "user": "55f5b8d6e4b06e875b46ce8d"}, {"problem": 22, "code": "#(reduce + (map (fn[x]1) %))", "user": "56adf2ebe4b03c432f187357"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5737a781e4b0cd1946bd104b"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "573652e1e4b0cd1946bd1030"}, {"problem": 22, "code": "#(reduce (fn[x y] (inc x)) 0 %)", "user": "5704789be4b0b0fb43fd0665"}, {"problem": 22, "code": "(fn cnt[s] (if (next s) \n             (+ 1 (cnt (next s)))\n             1))", "user": "5731e36be4b0cd1946bd0fc9"}, {"problem": 22, "code": "(fn [arg]\n  (loop [coll arg result 0]\n    (if (empty? coll)\n      result\n      (recur (rest coll) (inc result)))))", "user": "57344edbe4b0cd1946bd1008"}, {"problem": 22, "code": "#(.size (vec %))", "user": "56aa4fa5e4b07966d5a8a085"}, {"problem": 22, "code": "(fn[x] \n  (loop [lst x total 0] \n    (if (empty? lst) \n      total \n     (recur (rest lst) (inc total))\n    )\n  )\n)", "user": "571172ece4b09c608db70446"}, {"problem": 22, "code": "#(reduce (fn [a e] (+ 1 a)) 0 %)", "user": "56ea89bfe4b04a395b9a0406"}, {"problem": 22, "code": "#(reduce (fn [up _who-cares] (inc up)) 0 %1)", "user": "571d9669e4b0145328a7627f"}, {"problem": 22, "code": "(fn mycnt [x]\n  (loop [i 0 y x]\n    (if (nil? (seq y))\n      i\n      (recur (inc i) (rest y))\n      )\n    )\n  )", "user": "518665cde4b0da5a5be3bad2"}, {"problem": 22, "code": "(fn myFn [X] (if (empty? X) 0 (+ 1 (myFn (rest X))) ) )", "user": "57395f32e4b0cd1946bd1070"}, {"problem": 22, "code": "reduce #(+ %1 (if %2 1 1)) 0", "user": "5735ac67e4b0cd1946bd102b"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "57343747e4b0cd1946bd1006"}, {"problem": 22, "code": "(fn len [seqsrc] (if (first seqsrc) (+ 1 (len (rest seqsrc))) 0))", "user": "5736e12ee4b0cd1946bd103a"}, {"problem": 22, "code": "reduce (fn [a b] (+ a 1)) 0", "user": "5739cbe4e4b0cd1946bd107c"}, {"problem": 22, "code": "(fn [v] (loop [i 0 vec v]\n    (if (not (empty? vec))\n      (recur (inc i) (rest vec)\n             )\n      i\n      )))", "user": "56ed84bee4b04a395b9a0445"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5739c2fee4b0cd1946bd107a"}, {"problem": 22, "code": "(fn [coll]\n  (loop [n 0 coll coll]\n  (if (empty? coll)\n    n\n    (recur (inc n)(rest coll)))))", "user": "556008aee4b0c656e3ff17be"}, {"problem": 22, "code": "(fn self [seq]\n  (if (empty? seq) \n    0 \n    (+ 1 (self (rest seq)))))", "user": "573118ebe4b0cd1946bd0fbd"}, {"problem": 22, "code": "(fn [c] (reduce (fn [a _] (inc a)) 0 c))", "user": "5739df95e4b0cd1946bd107d"}, {"problem": 22, "code": "#(reduce (fn [cnt item] (inc cnt)) 0 %)", "user": "5739fb92e4b0cd1946bd1083"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "5734d751e4b0cd1946bd1018"}, {"problem": 22, "code": "(fn my-count [s]\n  (reduce + (map (constantly 1) s)))", "user": "573a0fc7e4b0cd1946bd1089"}, {"problem": 22, "code": "#(reduce (fn [cnt, s] (inc cnt)) 0 %)", "user": "5739fa01e4b0cd1946bd1082"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "57398175e4b0cd1946bd1073"}, {"problem": 22, "code": "(fn [list] (reduce + (map(fn[x] 1) list)))", "user": "57398724e4b0cd1946bd1076"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5734147fe4b0cd1946bd1003"}, {"problem": 22, "code": "#(loop [seq   %\n        count1 1]\n   (if (next seq)\n     (recur (rest seq) (inc count1))\n     count1))", "user": "573a82ebe4b0cd1946bd108f"}, {"problem": 22, "code": "(fn my-count\n  [lst]\n  (loop [l lst, acc 0]\n  \t(if (seq l)\n      (recur (rest l) (inc acc))\n      acc)))", "user": "573b487de4b0cd1946bd10a1"}, {"problem": 22, "code": "#(loop [x % i 1] (if (= [] (rest x)) i (recur (rest x)(inc i))))", "user": "55c3f19de4b0e31453f64991"}, {"problem": 22, "code": "(fn [coll]\n  (loop [remaining coll\n         subtotal 0]\n    (if (empty? remaining)\n        subtotal\n        (recur (rest remaining) (inc subtotal)))))", "user": "573b440ce4b0cd1946bd10a0"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5739ff3ae4b0cd1946bd1084"}, {"problem": 22, "code": "#(first (keys (last (map hash-map (map inc (range)) %))))", "user": "5722d621e4b0c5bde472c0d9"}, {"problem": 22, "code": "(fn my-count [ls]\n  (if\n    (empty? ls)\n    0\n    (inc (my-count (rest ls)))))", "user": "573c57ace4b0cd1946bd10c0"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "573c8125e4b0cd1946bd10c4"}, {"problem": 22, "code": "(fn numOfElements [x] (if (= x '()) 0 (+ 1 (numOfElements (rest x)))))", "user": "573c813be4b0cd1946bd10c5"}, {"problem": 22, "code": "(fn [x] (loop [result 0 c x] (if (empty? c) result (recur (inc result) (rest c)))))", "user": "573c8377e4b0cd1946bd10c7"}, {"problem": 22, "code": "(fn [coll] (reduce (fn [n _] (inc n)) 0 coll))", "user": "573c71bce4b0cd1946bd10c2"}, {"problem": 22, "code": "reduce (fn [n _] (inc n)) 0", "user": "56c26880e4b05cc29241ee81"}, {"problem": 22, "code": "(fn [input]\n  ((fn [input n]\n    (if (empty? input)\n        n\n        (recur (rest input) (inc n)))) input 0))", "user": "573c4d9be4b0cd1946bd10bf"}, {"problem": 22, "code": "#(reduce (fn [x, _] (inc x)) 0 %)", "user": "56c23de0e4b05cc29241ee80"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "573ce277e4b05c31a32c080b"}, {"problem": 22, "code": "(fn [as]\n  (loop [[a & as] as\n          k 1]\n    (if (empty? as) k\n      (recur as (inc k)))))", "user": "573d9cd1e4b05c31a32c0816"}, {"problem": 22, "code": "reduce (fn[c _] (inc c)) 0", "user": "5721c441e4b0c5bde472c0b9"}, {"problem": 22, "code": "(fn mycount\n  ([x, nn] \n   (if (empty? (rest x)) nn (mycount (rest x) (+ nn 1)))\n   )\n  ([x] (mycount x 1))\n)", "user": "573e2d54e4b05c31a32c0824"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "573d8658e4b05c31a32c0814"}, {"problem": 22, "code": "(fn [coll] (reduce (fn [x y] (+ 1 x)) 0 coll))", "user": "573c45ace4b0cd1946bd10be"}, {"problem": 22, "code": "(fn [s] (reduce (fn [c _] (inc c)) 0 s))", "user": "573b664ce4b0cd1946bd10a7"}, {"problem": 22, "code": "(fn something\n  ([seqn n]\n  \t(if \n      (empty? seqn)\n      (do n)\n      (recur (rest seqn) (inc n))\n    )\n  )\n  ([seqn]\n  \t(something seqn 0)\n  )\n)", "user": "573ce085e4b05c31a32c080a"}, {"problem": 22, "code": "(fn co [l]\n  (if (empty? l) 0\n    (inc (co (rest l)))))", "user": "573f63bfe4b05c31a32c0842"}, {"problem": 22, "code": "(fn my-count [coll] (if (empty? coll) 0 (+ 1  (my-count (rest coll)))))", "user": "573940e3e4b0cd1946bd106b"}, {"problem": 22, "code": "#(loop [c % i 0] (if (not (next c)) (+ i 1) (recur (rest c) (inc i))))", "user": "51456858e4b0e88796073408"}, {"problem": 22, "code": ";;#(inc (apply max (keys (zipmap (range) %))))\n;;\n;;#(loop [x 0\n;;        xs %]\n;;  (if (empty? xs)\n;;    x\n;;    (recur (inc x) (rest xs))))\n#(reduce (fn [n _] (inc n)) 0 %)", "user": "57407ab3e4b05c31a32c0854"}, {"problem": 22, "code": "(fn [x] ((fn c [s i] \n           (if (empty? s)\n               i\n               (c (rest s)\n                  (+ i 1))))\n         x 0))", "user": "5740f821e4b05c31a32c085e"}, {"problem": 22, "code": "(fn count-seq [s]\n  (loop [r s\n         c 0]\n    (if (empty? r)\n      c\n      (recur (rest r)\n             (inc c)))))", "user": "573f3ccfe4b05c31a32c083f"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "519d2a0be4b037b32803f9ae"}, {"problem": 22, "code": "(fn [collection] \n  (loop [index 0\n         s collection]\n    (if (first s)\n      (recur (inc index) (rest s))\n      index)))", "user": "5725d2d1e4b0c5bde472c116"}, {"problem": 22, "code": "(fn [x] (loop [in x out 0] (if (empty? in) out (recur (rest in) (inc out)))))", "user": "5741defae4b05c31a32c086e"}, {"problem": 22, "code": "(fn \n  [seq]\n  (reduce\n   (fn [cnt element] (inc cnt))\n   0\n   seq)\n  )", "user": "5736b126e4b0cd1946bd1037"}, {"problem": 22, "code": "#(reduce (fn [r e] (inc r)) 0 %)", "user": "5726ccf4e4b0c5bde472c12c"}, {"problem": 22, "code": "(fn purple [xs] (if (seq xs) (+ 1 (purple (rest xs))) 0))", "user": "57434339e4b0c285004e8a9f"}, {"problem": 22, "code": "(fn f [s]\n  (if (empty? s)\n    0\n    (+ (f (rest s)) 1)\n    )\n  )", "user": "5743578fe4b0c285004e8aa2"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "573e2d60e4b05c31a32c0825"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "573a00bae4b0cd1946bd1085"}, {"problem": 22, "code": "(fn [lst] (reduce (fn [acc x] (+ acc 1)) 0 lst))", "user": "57434103e4b0c285004e8a9e"}, {"problem": 22, "code": "#(apply + (map (fn [_] 1) %))", "user": "5742ec91e4b05c31a32c0883"}, {"problem": 22, "code": "#(loop [size 0 my-seq %]\n   (if (not-empty my-seq)\n     (recur (inc size)\n            (rest my-seq))\n     size))", "user": "5743ab00e4b0c285004e8aac"}, {"problem": 22, "code": "(fn [params]\n  (inc (first (last (map-indexed (fn [idx itm] [idx itm]) params)))))", "user": "5743b90ce4b0c285004e8aae"}, {"problem": 22, "code": "(fn [sq]\n   (loop [s sq\n          n 0]\n      (if (empty? s)\n        n\n        (recur (rest s) \n               (inc n)))))", "user": "573df35ce4b05c31a32c081e"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "574311a5e4b05c31a32c0888"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "573ddfc2e4b05c31a32c081b"}, {"problem": 22, "code": "(fn numelem [s] (reduce (fn counter [x y] (+ x 1)) 0 s))", "user": "5744adb1e4b009280f9f2b3f"}, {"problem": 22, "code": "(fn [x]\n  (loop [lst x n 0]\n    (if (empty? lst)\n      n\n      (recur (rest lst) (inc n)))))", "user": "5740e54de4b05c31a32c085c"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5740e26ee4b05c31a32c085a"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "57450a53e4b009280f9f2b45"}, {"problem": 22, "code": "(fn [coll]\n  (loop [[x & xs] coll l 0]\n    (if (seq xs)\n      (recur xs (inc l))\n      (inc l))))", "user": "57227f10e4b0c5bde472c0cd"}, {"problem": 22, "code": "(fn c [xs] (if (empty? xs) 0 (+ 1 (c (rest xs)))))", "user": "57442c96e4b009280f9f2b33"}, {"problem": 22, "code": "#(reduce (fn[x, _] (inc x)) 0 %)", "user": "57440f77e4b0c285004e8ab5"}, {"problem": 22, "code": "(fn [s0]\n  (loop [s s0 c 0]\n    (if (empty? s)\n      c\n      (recur (rest s) (inc c)))))", "user": "57458b82e4b009280f9f2b4e"}, {"problem": 22, "code": "(fn len [x] (alength (to-array x)))", "user": "57454e25e4b009280f9f2b4a"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "573ae296e4b0cd1946bd1097"}, {"problem": 22, "code": "reduce (fn [x _](inc x)) 0", "user": "57408f87e4b05c31a32c0856"}, {"problem": 22, "code": "(fn [seq]\n  (loop [cnt 0 remain seq]\n    (if (empty? (rest remain))\n      (inc cnt)\n      (recur (inc cnt) (rest remain)))))", "user": "5746061ae4b009280f9f2b5b"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5744e1a2e4b009280f9f2b43"}, {"problem": 22, "code": "(fn [x] (reduce (fn [x y] (inc x)) 0 x))", "user": "5745f0d7e4b009280f9f2b57"}, {"problem": 22, "code": "#(reduce (fn[x y] (inc x)) 0 %)", "user": "57465429e4b009280f9f2b60"}, {"problem": 22, "code": "#(loop [result 0 elements %]\n  (if (empty? elements)\n    result\n    (recur (inc result) (rest elements))))", "user": "57465526e4b009280f9f2b61"}, {"problem": 22, "code": "(fn [x] (loop [c x i 0] (if (empty? c) i (recur (rest c) (inc i)))))", "user": "573ecb77e4b05c31a32c0832"}, {"problem": 22, "code": "#(loop [c 0, s %]\n   (if (empty? s)\n     c\n     (recur (inc c) (rest s))))", "user": "5745b884e4b009280f9f2b53"}, {"problem": 22, "code": "(fn [a-seq]\n\t(loop [a-s a-seq\n\t\t   nn 0]\n\t\t   (if (empty? a-s)\n\t\t   \tnn\n\t\t   \t(recur (rest a-s)\n\t\t   \t\t(inc nn)))))", "user": "573eb8f2e4b05c31a32c082f"}, {"problem": 22, "code": "reduce (fn [s _] (inc s)) 0", "user": "5746d767e4b009280f9f2b6b"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "571a460ce4b07c98581c3b4d"}, {"problem": 22, "code": "(fn mycount [v]\n  (if (= (rest v) '() )\n    1\n    (inc (mycount (rest v)))\n    )\n  )", "user": "572ec4dde4b0cd1946bd0f8d"}, {"problem": 22, "code": "(fn fcount\n ([xs] (fcount xs 0))\n ([xs n]\n      (if (seq xs)\n        (recur (rest xs) (inc n))\n        n)))", "user": "5746bd75e4b009280f9f2b66"}, {"problem": 22, "code": "(fn [xs]\n  (reduce (fn [acc _]\n            (inc acc)) 0 xs))", "user": "57433675e4b0c285004e8a9d"}, {"problem": 22, "code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "57474aa4e4b009280f9f2b71"}, {"problem": 22, "code": "reduce (fn [a b] (+ a 1)) 0", "user": "56bb652ae4b0f26550335953"}, {"problem": 22, "code": "(fn length [seq] (if (empty? seq)\n                   0\n                   (+ 1 (length (rest seq)))))", "user": "57476b5fe4b009280f9f2b74"}, {"problem": 22, "code": "(fn foo [[fst & rst]] (if (empty? rst) 1 (+ 1 (foo rst))))", "user": "5747e22ce4b009280f9f2b7c"}, {"problem": 22, "code": "#(reduce (fn [x _] (inc x)) 0 %)", "user": "5742760ce4b05c31a32c0876"}, {"problem": 22, "code": "(fn \n[x] \n(apply + (map (fn [xx] 1 ) x)))", "user": "57484fe4e4b009280f9f2b88"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5745ca24e4b009280f9f2b56"}, {"problem": 22, "code": "#(reduce (fn [n _] (inc n)) 0 %)", "user": "5748a2d4e4b009280f9f2b8f"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5743e316e4b0c285004e8ab3"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "57497708e4b009280f9f2b9a"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "573678eae4b0cd1946bd1034"}, {"problem": 22, "code": "(fn \n  [coll]\n  (reduce (fn [x y] (inc x)) 0 coll))", "user": "5749ab6ae4b009280f9f2b9f"}, {"problem": 22, "code": "#(reduce (fn [a _] (inc a)) 0 %)", "user": "5749ce09e4b009280f9f2ba0"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "574977cbe4b009280f9f2b9b"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5744d088e4b009280f9f2b41"}, {"problem": 22, "code": "reduce (fn [res, cur] (+ 1 res)) 0", "user": "574930dae4b009280f9f2b96"}, {"problem": 22, "code": "#(inc (last (map-indexed (fn [i _] i) %)))", "user": "57023e92e4b08d47c97781da"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c))0 %)", "user": "574a9132e4b02ea1147991fd"}, {"problem": 22, "code": "(fn [s]\n  (let [c 0]\n  (loop [ss s cc c]\n    (if (empty? ss)\n      cc\n      (recur (rest ss) (inc cc))))))", "user": "574803a1e4b009280f9f2b7d"}, {"problem": 22, "code": "(fn [l] (reduce (fn [a b] (+ a 1)) 0 l))", "user": "574986cae4b009280f9f2b9c"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0%)", "user": "57297fb2e4b0c6e51e0d2b1c"}, {"problem": 22, "code": "(fn my-count [x] (if (empty? x) 0 (+ 1 (my-count (rest x)))))", "user": "574b008ce4b02ea114799203"}, {"problem": 22, "code": "#(reduce\n  (fn [x y]\n    (inc x))\n    0 %)", "user": "57480c4de4b009280f9f2b7e"}, {"problem": 22, "code": "(partial reduce (fn [acc _] (inc acc)) 0)", "user": "57275898e4b0c5bde472c13e"}, {"problem": 22, "code": "#( reduce (fn [cnt tmp] (inc cnt)) 0 %)", "user": "57487084e4b009280f9f2b8c"}, {"problem": 22, "code": "(fn [seq] (reduce + (map #(when % 1) seq)))", "user": "57462a4de4b009280f9f2b5d"}, {"problem": 22, "code": "(fn [x]\n((fn size-int [x n]\n    (if(= x ())\n          n\n          (size-int \n           (rest x) \n           (+ 1 n)\n          )        \n    )                \n)\n  x 0))", "user": "57493f35e4b009280f9f2b97"}, {"problem": 22, "code": "#(loop [l %, c 0]\n   (if (nil? l)\n     c\n     (recur (next l) (inc c))))", "user": "57481f1fe4b009280f9f2b82"}, {"problem": 22, "code": "(fn my-length\n        ([x] (my-length x 0))\n        ([x acc] (if (empty? x) acc (recur (rest x) (inc acc)))))", "user": "574c3a7ce4b02ea114799219"}, {"problem": 22, "code": "(partial (fn [c xs] (if (empty? xs) c (recur (+ c 1) (rest xs)))) 0)", "user": "574c5f34e4b02ea11479921c"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "574c5e18e4b02ea11479921b"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "574af03ce4b02ea114799202"}, {"problem": 22, "code": "(fn [a] (loop [a a n 0] (if (empty? a) n (recur (rest a) (inc n)))))", "user": "574c06b8e4b02ea114799213"}, {"problem": 22, "code": "(fn \n  [coll] \n  (reduce (fn [x y] (inc x)) 0 coll))", "user": "573de63fe4b05c31a32c081c"}, {"problem": 22, "code": "(fn f [[x & remain]]\n  (if (nil? x) 0\n    (inc (f remain))))", "user": "573d58c8e4b05c31a32c0811"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "574c66e1e4b02ea11479921d"}, {"problem": 22, "code": "(fn temp-count [xs]\n  (let [temp-count-helper2 (fn temp-count-helper [ys counter] (let [[h & t] ys] (println h)\n                                             (if (empty? t) counter (temp-count-helper t (inc counter)))))]\n    (temp-count-helper2 xs 1)))", "user": "574cb8a2e4b02ea114799222"}, {"problem": 22, "code": "reduce (fn [x y] (inc x)) 0", "user": "574a546ee4b02ea1147991f6"}, {"problem": 22, "code": "(fn [elms]\n  (loop [elms elms\n         n 0]\n    (if (empty? elms)\n      n\n      (recur (rest elms) (inc n)))))", "user": "574a71b7e4b02ea1147991fb"}, {"problem": 22, "code": "#(apply + (map (fn [e] 1) %))", "user": "574dfcb8e4b02ea11479923a"}, {"problem": 22, "code": "(fn [items]\n  (reduce (fn [c _] (inc c)) 0 items))", "user": "574e069fe4b02ea11479923d"}, {"problem": 22, "code": "reduce (fn [a _] (inc a)) 0", "user": "574cd554e4b02ea114799224"}, {"problem": 22, "code": "#(reduce (fn[c _] (inc c)) 0 %)", "user": "574ed2f7e4b02ea11479924a"}, {"problem": 22, "code": "(fn c [l] (if (empty? l) 0 (+ 1 (c (rest l))) ))", "user": "574f1780e4b02ea114799254"}, {"problem": 22, "code": "reduce (fn [cnt e] (inc cnt)) 0", "user": "5745bb9fe4b009280f9f2b54"}, {"problem": 22, "code": "(fn countt\n  ([l] (countt l 0))\n  ([l n] (if (= l [])\n           n\n           (countt (rest l) (inc n)))))", "user": "574f1c24e4b02ea114799255"}, {"problem": 22, "code": "(fn [x] (apply + (map (fn [x] 1) x)))", "user": "574f5496e4b02ea11479925c"}, {"problem": 22, "code": "#(loop[remaining % acc 0] (if (empty? remaining) acc (recur (next remaining) (inc acc))))", "user": "574ef311e4b02ea11479924d"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "574fae1de4b02ea114799262"}, {"problem": 22, "code": "(fn cnt [s] (if (= () s) 0 (+ (cnt (rest s)) 1)))", "user": "574ec787e4b02ea114799249"}, {"problem": 22, "code": "(fn \n  [v]\n  (loop [sca v size 0]\n  (if (empty? sca)\n    size\n    (recur (rest sca) (+ 1 size)))))", "user": "57500d13e4b02ea114799268"}, {"problem": 22, "code": "reduce (fn [x & _] (inc x)) 0", "user": "574eb3b1e4b02ea114799247"}, {"problem": 22, "code": "(fn [ sq ]\n  (reduce (fn [v e] (inc v)) 0 sq))", "user": "574e7be7e4b02ea114799242"}, {"problem": 22, "code": "#(loop [seq % acc 0] (if (empty? seq)\n                               acc\n                               (recur (rest seq) (+ acc 1))))", "user": "57501de0e4b02ea11479926c"}, {"problem": 22, "code": "(fn sum\n    ([vals] (sum vals 0)) \n   ([vals accumulating-total]\n      (if (empty? vals)  \n       accumulating-total\n       (sum (rest vals) (+ 1 accumulating-total)))))", "user": "56f406b5e4b046a417f92059"}, {"problem": 22, "code": "(fn foo [x] (if (empty? x) 0 (+ 1 (foo (rest x)))))", "user": "57501c83e4b02ea11479926b"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "574ef641e4b02ea11479924f"}, {"problem": 22, "code": "(fn [x]\n  (loop [i 0]\n    (if (= nil (get (vec x) i))\n      i\n      (recur (inc i)))))", "user": "574e8975e4b02ea114799244"}, {"problem": 22, "code": "(fn [coll]\n   (loop [x 0 sub coll]\n     (if (last sub)       \n         (recur (inc x) (next sub))\n       x)))", "user": "574abbfbe4b02ea114799200"}, {"problem": 22, "code": "#(reduce (fn [a _] (inc a)) 0 %)", "user": "57515f94e4b02ea114799287"}, {"problem": 22, "code": "#(alength (to-array %1))", "user": "5751aeabe4b02ea11479928a"}, {"problem": 22, "code": "(fn [s]\n     (:a (reduce (fn [new-coll coll]\n               (assoc-in new-coll [:a] (inc (:a new-coll))))\n             {:a 0}\n             s)))", "user": "570bd29be4b0b0fb43fd06c5"}, {"problem": 22, "code": "(fn my-count [l]\n  (if (= l '())\n    0\n    (+ 1 (my-count (rest l)))))", "user": "5752caa9e4b02ea11479929f"}, {"problem": 22, "code": "(fn my-count [sq]\n  ((fn m-cnt [cnt seqn]\n    (if (seq (rest seqn))\n      (m-cnt (inc cnt) (rest seqn))\n      (inc cnt))) 0 sq))", "user": "5751eb97e4b02ea11479928e"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "573e82eee4b05c31a32c082d"}, {"problem": 22, "code": "#(alength (to-array %))", "user": "5716960de4b07c98581c3afd"}, {"problem": 22, "code": "#(apply + (map (fn [_] 1) %))", "user": "57533bc1e4b02ea1147992a6"}, {"problem": 22, "code": "#( (fn [s i] (if (empty? s) i (recur (rest s) (inc i)))) % 0)", "user": "57539e04e4b02ea1147992ab"}, {"problem": 22, "code": "#(loop [i 0 r %] (if (empty? r) i (recur (inc i) (rest r))))", "user": "5751f2a2e4b02ea114799292"}, {"problem": 22, "code": "#(reduce (fn [n _] (inc n)) 0 %)", "user": "5379946be4b06839e8705e56"}, {"problem": 22, "code": "#(reduce (fn [acc e] (inc acc)) 0 %)", "user": "57552f39e4b02ea1147992c1"}, {"problem": 22, "code": "#(loop [x 0 xs %] (if (first xs) (recur (+ x 1) (next xs)) x))", "user": "574f3a40e4b02ea114799258"}, {"problem": 22, "code": "(fn c [s](if (= s '()) 0 (+ 1 (c (rest s))) ) )", "user": "5752ed4fe4b02ea1147992a2"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "5755e66ee4b02ea1147992cf"}, {"problem": 22, "code": "(fn [coll]\n  (reduce +\n   (map (fn [v] 1) coll)))", "user": "575595ede4b02ea1147992c7"}, {"problem": 22, "code": "#(reduce (fn [tulos x](inc tulos)) 0 (vec %))", "user": "57569212e4b02ea1147992de"}, {"problem": 22, "code": "( fn ct\n  [ coll ]\n  ( if ( empty? coll ) 0\n    ( + 1 ( ct ( rest coll ) ) )\n  )\n)", "user": "57561529e4b02ea1147992d3"}, {"problem": 22, "code": "(fn sz \n  ([x] (sz x 0))\n  ([x n] (\n          if (= nil (first x)) n\n            (sz (rest x) (+ n 1))\n          )\n   )\n  )", "user": "575689f2e4b02ea1147992dd"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5756f7d7e4b02ea1147992e9"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "563c6ebae4b0bfe05bf11834"}, {"problem": 22, "code": "#(apply + (map (fn [x] 1) %))", "user": "57571df3e4b02ea1147992ef"}, {"problem": 22, "code": "(fn [x] (reduce (fn [y z] (inc y)) 0 x))", "user": "5751fda4e4b02ea114799295"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "567a4c53e4b05957ce8c6197"}, {"problem": 22, "code": "(fn \n  [coll] \n  (reduce \n   (fn [cnt _] (inc cnt)) \n   0 \n   coll))", "user": "5665ef78e4b0e91d5f5c5664"}, {"problem": 22, "code": "(fn length [coll]\n  (reduce #(let [l % _ %2] (inc l)) 0 coll))", "user": "572a13cde4b0f4d77e65122b"}, {"problem": 22, "code": "#(reduce (fn [acc e] (inc acc)) 0 %)", "user": "5755d8f1e4b02ea1147992ce"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "56749133e4b05957ce8c613e"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "57509096e4b02ea114799277"}, {"problem": 22, "code": "#(+ 1 (last (interleave % (range))))", "user": "57579c1be4b02ea1147992f7"}, {"problem": 22, "code": "(fn count-seq [data] (if (empty? data) 0 (+ (count-seq (rest data)) 1)))", "user": "5746cb28e4b009280f9f2b68"}, {"problem": 22, "code": "(fn rec\n  [x]\n  (if\n    (empty? x)\n    0\n    (inc (rec (rest x)))))", "user": "5757ba87e4b02ea1147992f9"}, {"problem": 22, "code": "(fn [x] (alength (to-array x)))", "user": "5756935be4b02ea1147992df"}, {"problem": 22, "code": "(fn [list] (reduce (fn [x y] (+ 1 x)) 0 list))", "user": "5751f9b0e4b02ea114799294"}, {"problem": 22, "code": "(fn [l] (reduce + (map ( fn [x] 1) l)))", "user": "57583451e4b02ea114799304"}, {"problem": 22, "code": "(fn my-count [sx] \n  (if (empty? sx) \n    0 \n    (+ 1 (my-count (rest sx))) ))", "user": "568bd448e4b0dcc4269f40a9"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5758bd91e4b02ea114799311"}, {"problem": 22, "code": "(fn c [list] (if (empty? list)\n               0\n               (+ 1 (c (rest list)))\n               )\n  )", "user": "5759cd46e4b02ea11479932e"}, {"problem": 22, "code": "(fn [x] (inc (first (last (map-indexed vector x)))))", "user": "575996f6e4b02ea114799321"}, {"problem": 22, "code": "#(reduce (fn [s x] (inc s)) 0 %)", "user": "575556fae4b02ea1147992c3"}, {"problem": 22, "code": "#(reduce (fn [acc curr] (inc acc)) 0 %)", "user": "56092852e4b0053d1b86c7d9"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "57599ed3e4b02ea114799323"}, {"problem": 22, "code": "#(alength (to-array %1))", "user": "53c83f94e4b00fb29b2212af"}, {"problem": 22, "code": "(fn count-sequence [x] (if (empty? x) 0 (+ 1 (count-sequence (rest x)))))", "user": "5759e317e4b02ea114799330"}, {"problem": 22, "code": "(fn [coll] \n  (loop [[x & xs] coll\n         c 1]\n    (if xs\n      (recur xs (inc c))\n      c)))", "user": "54d0c32de4b0e8a36923e5cf"}, {"problem": 22, "code": "#(alength (to-array %))", "user": "575b1d07e4b02ea114799359"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "573f1e2ee4b05c31a32c083a"}, {"problem": 22, "code": "(fn [x]\n  (apply + (map (fn [x] 1) x)))", "user": "575683aee4b02ea1147992dc"}, {"problem": 22, "code": "(fn [xs] (reduce + (map (constantly 1) xs)))", "user": "575c1f21e4b02ea114799368"}, {"problem": 22, "code": "(partial reduce (fn [c _] (inc c)) 0)", "user": "575cbe44e4b02ea114799374"}, {"problem": 22, "code": "(fn [xx] ((fn couseq[n x] (if (empty? x) (+ n 0) (couseq (+ n 1) (drop 1 x)))) 0 xx))", "user": "575d26f0e4b02ea11479937b"}, {"problem": 22, "code": "#(reduce (fn[a,b] (+ a 1)) 0 %)", "user": "575bd5f9e4b02ea114799365"}, {"problem": 22, "code": "(fn [x] (loop [coll x acc 0] (if-not (first coll) \n                                 acc \n                                 (recur (rest coll) (inc acc)))))", "user": "575d5831e4b02ea114799381"}, {"problem": 22, "code": "(fn [x] (loop [v x, n 0] (if (empty? v) n (recur (rest v) (+ n 1)))))", "user": "5756efc3e4b02ea1147992e6"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "575d9ac6e4b02ea114799387"}, {"problem": 22, "code": "(fn [c] (reduce (fn [memo _] (inc memo)) 0 c))", "user": "575c23d3e4b02ea114799369"}, {"problem": 22, "code": "(fn r [x] (if (empty? x) 0 (+ 1 (r (rest x)))))", "user": "575dda55e4b02ea11479938c"}, {"problem": 22, "code": "(fn [m] (reduce + (map (fn [x] 1 ) m)))", "user": "575e7335e4b0846ea39baf28"}, {"problem": 22, "code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "575a67c7e4b02ea11479933f"}, {"problem": 22, "code": "#(reduce (fn [sum _] (+ 1 sum)) 0 %)", "user": "52c2106fe4b07a9af5792374"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "57598420e4b02ea11479931f"}, {"problem": 22, "code": "(fn f [coll] ( loop [ c 0 lst coll] ( if (empty? lst ) c ( recur (+ 1 c ) (rest lst) ) ) ) )", "user": "575ebba3e4b08062f99a4e70"}, {"problem": 22, "code": "(fn [s] (reduce (fn [a b] (inc a)) 0 (seq s)))", "user": "575b3e9be4b02ea11479935b"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "575ef4b6e4b08062f99a4e78"}, {"problem": 22, "code": "(fn my-count [col]\n  (loop [c col n 0]\n    (if (empty? c)\n      n\n      (recur (rest c) (inc n)))))", "user": "562eeba2e4b0ab312c17ebc1"}, {"problem": 22, "code": "(fn f [col]\n  (if (empty? (rest col))\n    1\n    (+ 1 (f (rest col)))))", "user": "575fbe58e4b08062f99a4e87"}, {"problem": 22, "code": "(fn [args] (reduce + (vals (frequencies args))))", "user": "573ed018e4b05c31a32c0833"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "575ab695e4b02ea114799350"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "544ce906e4b0e39780006974"}, {"problem": 22, "code": "#(reduce (fn [i _] (inc i)) 0 %)", "user": "5760506fe4b08062f99a4e92"}, {"problem": 22, "code": "#(inc (last (map-indexed (fn [n _] n) %)))", "user": "5760577fe4b08062f99a4e93"}, {"problem": 22, "code": "(fn counter [s]\n  (reduce + (map (fn [each] 1) s)))", "user": "57606cfde4b08062f99a4e95"}, {"problem": 22, "code": "reduce (fn [n col] (inc n)) 0", "user": "575f2529e4b08062f99a4e7a"}, {"problem": 22, "code": "(fn foo [x] (if (empty? x) 0 (inc (foo (rest x)))))", "user": "5760715de4b08062f99a4e96"}, {"problem": 22, "code": "reduce (fn [v _] (inc v)) 0", "user": "57609d91e4b08062f99a4e9b"}, {"problem": 22, "code": "#(->> % frequencies vals (apply +))", "user": "5760d426e4b08062f99a4e9f"}, {"problem": 22, "code": "#(loop [list %1\n        dupa 0]\n   (if (empty? list)\n     dupa\n     (recur (rest list) (+ dupa 1))))", "user": "57597fade4b02ea11479931d"}, {"problem": 22, "code": "(fn[l](loop[ls l c 0](if (empty? ls) c (recur (rest ls) (+ 1 c)))))", "user": "575cbb53e4b02ea114799372"}, {"problem": 22, "code": "(fn count-fn [x]\n  (cond (= '() x) 0\n        :else (+ 1 (count-fn (rest x)) )\n  )\n)", "user": "57614a42e4b0994c1922fb85"}, {"problem": 22, "code": "(fn cnt[acc lst]\n  (if (empty? lst)\n    acc\n    (cnt (inc acc) (rest lst)))) 0", "user": "57614c20e4b0994c1922fb86"}, {"problem": 22, "code": "#(loop [lst %1 lst-count 0] \n   (if (empty? lst)\n     lst-count\n     (recur (rest lst) (+ lst-count 1))))", "user": "5761513fe4b0994c1922fb87"}, {"problem": 22, "code": "(fn [coll] (loop [c 0\n                  col coll]\n             (if (empty? col) c\n               (recur (inc c)\n                      (rest col)))))", "user": "576186a5e4b0994c1922fb8e"}, {"problem": 22, "code": "(fn my-count [x]\n  (if (= '() x)\n    0\n    (+ 1 (my-count (rest x)))))", "user": "576000fce4b08062f99a4e8b"}, {"problem": 22, "code": "(fn length [lst]\n  (loop [i lst cnt 0]\n   (cond (empty? i) cnt\n     :t (recur (rest i)(inc cnt)))))", "user": "5761724de4b0994c1922fb89"}, {"problem": 22, "code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "5761a352e4b0994c1922fb94"}, {"problem": 22, "code": "(fn abv [x]\n(loop [seq-elements x result 0]\n  (if (empty? seq-elements)\n  result\n  (let [[first-elem & rest-elems] seq-elements]\n    (recur \n     rest-elems\n     (inc result)\n     )))))", "user": "57607706e4b08062f99a4e97"}, {"problem": 22, "code": "(fn [s]\n  (loop [s s, cpt 0]\n    (if (seq s)\n      (recur (rest s) (inc cpt))\n      cpt)))", "user": "56a50330e4b0542e1f8d14df"}, {"problem": 22, "code": "#(loop [s %,c 0] (if (empty? s) c (recur (rest s) (+ 1 c))))", "user": "575d63e9e4b02ea114799382"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "57625c18e4b0994c1922fba4"}, {"problem": 22, "code": "(fn [x] (loop [c 0 seq x] (if (empty? seq) c (recur (inc c) (rest seq)))))", "user": "57614948e4b0994c1922fb83"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5762b38ce4b0994c1922fbad"}, {"problem": 22, "code": "(fn [s] (reduce + (map #(do % 1) s)))", "user": "5762bf13e4b0994c1922fbae"}, {"problem": 22, "code": "reduce (fn [n _] (inc n)) 0", "user": "57635e2de4b0994c1922fbbf"}, {"problem": 22, "code": "(fn [x] (loop [col (seq x)\n               cnt 0]\n          (if (= (first col) nil)\n            cnt\n            (recur (rest col) (+ cnt 1)))))", "user": "5753b6c6e4b02ea1147992af"}, {"problem": 22, "code": "(fn [y] (apply + (map (fn [x] 1) y)))", "user": "56eaa738e4b04a395b9a040d"}, {"problem": 22, "code": "reduce (fn [a _] (inc a)) 0", "user": "575aa081e4b02ea114799346"}, {"problem": 22, "code": "(comp (partial reduce +) (partial map (fn [_] 1)))", "user": "5761a772e4b0994c1922fb95"}, {"problem": 22, "code": "#(loop [c 0 \n        q %]\n   (if (empty? q) \n     c\n     (recur (inc c) (rest q))\n     )\n   )", "user": "5763818ae4b0994c1922fbc7"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5763fa69e4b0994c1922fbe0"}, {"problem": 22, "code": "(fn [coll]\n  (reduce (fn [acc v] (inc acc))\n          0\n          coll))", "user": "57640b10e4b0994c1922fbe3"}, {"problem": 22, "code": "reduce (fn [acc _] (inc acc)) 0", "user": "57642916e4b0994c1922fbee"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "56fcd9dfe4b08d47c977819e"}, {"problem": 22, "code": "reduce (fn [x y] (+ x 1)) 0", "user": "5622042ae4b03f08ee9a9221"}, {"problem": 22, "code": "#(loop [haha 0 coll %]\n   (if (empty? coll) haha\n   (recur (inc haha)(rest coll))))", "user": "5756eff6e4b02ea1147992e7"}, {"problem": 22, "code": "(fn [coll] (reduce (fn [c ignore] (inc c)) 0 coll))", "user": "5764457ae4b0994c1922fbf3"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5764056ae4b0994c1922fbe2"}, {"problem": 22, "code": "(fn [inp]\n   (loop [cnt 0 tmp inp]\n   (if (empty? tmp)\n     cnt\n    (recur (inc cnt) (rest tmp)))))", "user": "5761984fe4b0994c1922fb91"}, {"problem": 22, "code": "(fn [coll]\n  (reduce (fn [acc x] (inc acc)) 0 coll))", "user": "52ea025ae4b09f7907dd14b5"}, {"problem": 22, "code": "(fn [s] (loop [r s icount 0] (if (empty? r) icount (recur (rest r) (inc icount)))))", "user": "57644395e4b0994c1922fbf2"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "563f4c47e4b08d4f616f5ed2"}, {"problem": 22, "code": "#(loop [s % n 0]\n   (if (empty? s)\n     n\n     (recur (rest s) (+ 1 n))))", "user": "576584c1e4b0994c1922fc0e"}, {"problem": 22, "code": "#(loop [s %\n       acc 0]\n  (if (empty? s)\n    acc\n    (recur (rest s) (inc acc))));endloop", "user": "5765c7bbe4b0a07e8fc18096"}, {"problem": 22, "code": "#(reduce (fn [accum x] (+ 1 accum)) 0 %)", "user": "5764cc01e4b0994c1922fc05"}, {"problem": 22, "code": "(fn my-count [ x]\n  (if (empty? x) \n    0\n    (+ 1 (my-count (rest x))))\n  )", "user": "566e5a03e4b0a866af6896d8"}, {"problem": 22, "code": "(fn [coll]\n  (loop\n    [x coll i 0]\n    (if (empty? x)\n      i\n      (recur (rest x) (inc i)))))", "user": "57665f00e4b0a07e8fc180a5"}, {"problem": 22, "code": "(fn [coll] (reduce + (map (fn [x] 1) coll)))", "user": "5756f324e4b02ea1147992e8"}, {"problem": 22, "code": "(fn [sq]\n  (loop [n 0 sq sq]\n    (if (empty? sq)\n      n\n      (recur (inc n) (rest sq)))))", "user": "5766bab8e4b0a07e8fc180b1"}, {"problem": 22, "code": "#(loop [elts %, mc 0]\n    (if (empty? elts)\n      mc\n    (recur (rest elts) (inc mc) )))", "user": "5762fcfde4b0994c1922fbb3"}, {"problem": 22, "code": "(fn [x](loop [val 0] (if (get (vec x) val) (recur (inc val)) val)))", "user": "576773cde4b0a07e8fc180be"}, {"problem": 22, "code": "(fn [x] (+ 1 (first (last (map-indexed vector x)))))", "user": "5768b9f3e4b0a07e8fc180dc"}, {"problem": 22, "code": "(fn[lst] (loop [n 0 rst lst] (if (empty? rst) n \n                               (recur (+ n 1) (rest rst))\n                               )))", "user": "575ddfd1e4b02ea11479938d"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "575d16f8e4b02ea114799377"}, {"problem": 22, "code": "(fn [input]\n  (loop [input input\n         n 0]\n    (cond\n     (empty? input) n\n     :else (recur (rest input) (inc n)))))", "user": "575d22f5e4b02ea11479937a"}, {"problem": 22, "code": "#(loop [col % res 0] (if (empty? col) res (recur (rest col) (inc res))))", "user": "56f974c0e4b07572ad1a88b1"}, {"problem": 22, "code": "(fn cnt [s]\n  (loop [s s\n         c 0]\n    (if (empty? s)\n      c\n      (recur (rest s) (inc c)))))", "user": "53336ab8e4b019098a6f8b84"}, {"problem": 22, "code": "#(apply + (map (fn [x] 1) %1))", "user": "576a8d02e4b0a07e8fc18117"}, {"problem": 22, "code": "(fn new_count [myseq] \n  ((fn inner [partial_seq counter] \n    (if (empty? partial_seq)\n      counter\n      (inner (rest partial_seq) (+ 1 counter)))) myseq 0))", "user": "576aa367e4b0a07e8fc1811e"}, {"problem": 22, "code": "(fn [sequ] (reduce (fn [prev item] (inc prev)) 0 sequ))", "user": "575aa61ae4b02ea11479934e"}, {"problem": 22, "code": "reduce (fn [x y] (inc x)) 0", "user": "550e83d6e4b06e50f9beb166"}, {"problem": 22, "code": "#(apply + (map (fn [_] 1) %))", "user": "576b4e6be4b0a07e8fc1812b"}, {"problem": 22, "code": "(fn [x] (reduce + (map (fn [y] 1) x)))", "user": "57453a52e4b009280f9f2b49"}, {"problem": 22, "code": "(let [f (fn [c x] (inc c))] #(reduce f 0 %))", "user": "576a987be4b0a07e8fc1811b"}, {"problem": 22, "code": "(fn [x] (reduce + (map (constantly 1) x)))", "user": "576ba276e4b0a07e8fc18135"}, {"problem": 22, "code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "576aa568e4b0a07e8fc1811f"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "57604a87e4b08062f99a4e91"}, {"problem": 22, "code": "(fn [x] (reduce + (map (constantly 1) x)))", "user": "576be8a2e4b0a07e8fc18140"}, {"problem": 22, "code": "reduce (fn [n _] (inc n)) 0", "user": "56d0608ce4b0ea9b8538f77e"}, {"problem": 22, "code": "(fn cunt [s]\n  (if\n    (= s '())\n    0\n    (+ 1 (cunt (rest s)))\n  )\n)", "user": "575b1440e4b02ea114799358"}, {"problem": 22, "code": "(fn [seq] \n  (loop [coll seq size 0] \n    (if (empty? coll) \n      size \n      (recur (rest coll) (inc size)))))", "user": "5759b0e6e4b02ea114799326"}, {"problem": 22, "code": "(fn [coll]\n  (apply + (map (constantly 1) coll)))", "user": "576c0febe4b07c67f59d1fb8"}, {"problem": 22, "code": "(fn count'\n  ([coll]\n    (count' coll 0))\n  ([coll n]\n    (if (empty? coll)\n      (do n)\n      (count' (rest coll) (inc n)))))", "user": "576a0ddbe4b0a07e8fc18106"}, {"problem": 22, "code": "(fn nom\n   [col & [length]]\n   (let [length (or length 0)]\n     (if (empty? col)\n       length\n       (nom (next col) (inc length)))\n     )\n   )", "user": "576d24ede4b0979f8965155b"}, {"problem": 22, "code": "reduce (fn [acc curr] (+ acc 1)) 0", "user": "576a972ce4b0a07e8fc1811a"}, {"problem": 22, "code": "(fn [s] (apply + (map (constantly 1) s)))", "user": "576da825e4b0979f8965156c"}, {"problem": 22, "code": "#(loop [coll (seq %) cntr 0]\n  (if (empty? coll) cntr\n  (recur (rest coll) (inc cntr))))", "user": "5742d82ae4b05c31a32c0881"}, {"problem": 22, "code": "reduce (fn [x _] (+ x 1)) 0", "user": "576df252e4b0979f8965156f"}, {"problem": 22, "code": "#(reduce (fn [r v] (inc r)) 0 %)", "user": "576e3258e4b0979f89651574"}, {"problem": 22, "code": "#(reduce (fn [a b] (+ a 1)) 0 %)", "user": "576ecafce4b0979f89651580"}, {"problem": 22, "code": "(fn [x]\n  (loop [col x cnt 0]\n    (if (empty? col)\n      cnt\n      (recur (rest col) (+ cnt 1)))))", "user": "576ed928e4b0979f89651583"}, {"problem": 22, "code": "#( loop [ lst %1 sum 0 ]\n      ( if( = lst () )\n          sum\n      ( recur ( rest lst )( inc sum  ) )\n       ) )", "user": "575ec102e4b08062f99a4e71"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "572af688e4b0f4d77e651249"}, {"problem": 22, "code": "(fn [coll] \n  (reduce (fn [n _] (inc n)) 0 coll))", "user": "574bd367e4b02ea114799210"}, {"problem": 22, "code": "#(reduce + (map (fn [n] 1) %))", "user": "5770417ae4b0979f8965159b"}, {"problem": 22, "code": "#(loop [coll % cnt 0] (if (empty? coll) cnt (recur (rest coll) (inc cnt))))", "user": "577008f1e4b0979f89651594"}, {"problem": 22, "code": "(fn [coll] \n  (reduce #(if (nil? %2) %1 (inc %1)) 0 coll))", "user": "574ff497e4b02ea114799266"}, {"problem": 22, "code": "(fn doit [x] (if (not-empty x) (+ 1 (doit (rest x))) 0))", "user": "57716e11e4b0979f896515b2"}, {"problem": 22, "code": "#(reduce (fn [ cnt _ ] (+ cnt 1)) 0 %1)", "user": "576d8699e4b0979f89651568"}, {"problem": 22, "code": "(fn [items]  \n  (loop [c 0 stuff items ] \n    (if (empty? stuff) c (recur (inc c) (rest stuff)) ) ))", "user": "56020b3fe4b04bb52996e19b"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5768fec7e4b0a07e8fc180e2"}, {"problem": 22, "code": "#(loop [x %\n         c 0]\n   (if (seq x)\n     (recur (rest x) (inc c))\n     c))", "user": "5454bb07e4b0e397800069da"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "57720e85e4b0979f896515c1"}, {"problem": 22, "code": "(fn [x]\n  (if-let [a (= (drop 1 x) ())]\n    1\n    (if-let [a (= (drop 2 x) ())]\n      2\n      (if-let [a (= (drop 3 x) ())]\n        3\n        (if-let [a (= (drop 4 x) ())]\n          4\n          (if-let [a (= (drop 5 x) ())]\n            5\n            (if-let [a (= (drop 6 x) ())]\n              6\n            (if-let [a (= (drop 7 x) ())]\n              7\n            (if-let [a (= (drop 8 x) ())]\n              8\n            (if-let [a (= (drop 9 x) ())]\n              9\n            (if-let [a (= (drop 10 x) ())]\n              10\n            (if-let [a (= (drop 11 x) ())]\n              11\n              100)\n            ))))))\n          )\n        )\n      )\n    ) \n)", "user": "57727d30e4b0979f896515c9"}, {"problem": 22, "code": "reduce (fn [a e] (inc a)) 0", "user": "577202d2e4b0979f896515c0"}, {"problem": 22, "code": "(fn argcount [x] (if (first x) (+ 1 (argcount (rest x))) (+ 0 0)))", "user": "5772bd3be4b0979f896515cf"}, {"problem": 22, "code": "(fn [x]\n  ((fn [l i]\n     (if (next l)\n       (recur (next l) (+ i 1))\n       i)\n     ) x 1))", "user": "514872f5e4b05514c84b7cbe"}, {"problem": 22, "code": "#(\n  (fn my-cnt [l acc]\n    (if (first l)\n      (my-cnt (rest l) (+ 1 acc)) acc)) % 0)", "user": "5773e5b0e4b0979f896515ef"}, {"problem": 22, "code": "(fn\n  [elems]\n  (loop [elems elems iterator 0]\n    (if (not= (first elems) nil)\n      (do\n        (recur (rest elems) (inc iterator)))\n      iterator\n    )))", "user": "5772ddb0e4b0979f896515d4"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "57741d00e4b0979f896515f7"}, {"problem": 22, "code": "#(apply + (map (fn [whatever] 1) %))", "user": "577154ffe4b0979f896515b1"}, {"problem": 22, "code": "#(reduce \n    (fn [c x] (inc c))\n     0 %)", "user": "5770fb2ce4b0979f896515a5"}, {"problem": 22, "code": "reduce (fn [a b] (inc a)) 0", "user": "57740884e4b0979f896515f5"}, {"problem": 22, "code": "#(loop [result 0 c %]\n   (if (empty? c) result\n     (recur (inc result) (rest c))))", "user": "5773eeafe4b0979f896515f1"}, {"problem": 22, "code": "(fn [a] (reduce + (map (fn [_] 1) a)))", "user": "56012afde4b04bb52996e17c"}, {"problem": 22, "code": "(fn [coll]\n  (reduce (fn [x y] (inc x)) 0 coll))", "user": "5757142ae4b02ea1147992ed"}, {"problem": 22, "code": "(fn !\n  [arr]\n  (if (empty? arr) 0\n    (+ 1 (! (rest arr)))))", "user": "576d6266e4b0979f89651563"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "558e963ae4b0277789237653"}, {"problem": 22, "code": "#(apply + (map (fn [_] 1) %))", "user": "57719031e4b0979f896515b7"}, {"problem": 22, "code": "(fn [x] (reduce (fn [z y] (inc z)) 0 x))", "user": "57758f5de4b0979f89651621"}, {"problem": 22, "code": "(fn [seq] (reduce\n           (fn [total _]\n             (+ total 1))\n           0\n           seq))", "user": "57759a45e4b0979f89651622"}, {"problem": 22, "code": "#(reduce (fn [acc, v] (+ 1 acc)) 0 %)", "user": "57762befe4b0979f8965162f"}, {"problem": 22, "code": "(fn [s] (reduce (fn [c _] (inc c)) 0 s))", "user": "57763002e4b0979f89651631"}, {"problem": 22, "code": "#(reduce (fn [a b] (+ a 1)) 0 %)", "user": "5776385fe4b0979f89651632"}, {"problem": 22, "code": "(fn len [[s & ss]] (if (nil? ss) 1 (+ 1 (len ss))))", "user": "5776b47ce4b0979f8965163d"}, {"problem": 22, "code": "(fn [x]\n  (loop [iter 0 result x]\n    (if (empty? result)\n      iter\n      (recur (inc iter)(rest result))\n      )\n    )\n  )", "user": "57750460e4b0979f8965160c"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "576cb9c3e4b0979f89651551"}, {"problem": 22, "code": "(fn [l]\n  (loop [cnt 0 list l]\n    (if (empty? list)\n      cnt\n      (recur (inc cnt) (rest list)))))", "user": "577629abe4b0979f8965162e"}, {"problem": 22, "code": "(fn len\n  [s]\n  (if (empty? s)\n    0\n    (+ (len (rest s)) 1)))", "user": "5777c3d6e4b0979f8965164f"}, {"problem": 22, "code": "(fn my-count [coll]\n  (if (empty? coll) 0\n    (inc (my-count (rest coll)))))", "user": "5777cffae4b0979f89651651"}, {"problem": 22, "code": "#(reduce (fn [n _] (inc n)) 0 %)", "user": "566096d0e4b068f2fe63dc5a"}, {"problem": 22, "code": "(fn [sq] (let [cnt (fn [s n] (if (empty? s) n (recur (rest s) (inc n))))] (cnt sq 0)))", "user": "57780e4fe4b0979f89651657"}, {"problem": 22, "code": "(fn [coll]\n  (reduce (fn [a b] (inc a)) 0 coll))", "user": "5776e21de4b0979f89651642"}, {"problem": 22, "code": "(fn [coll]\n\t((fn [coll taille]\n\t\t\t(if (empty? coll)\n\t\t\t\ttaille\n\t\t\t\t(recur (rest coll) (inc taille))\n\t\t\t)\n\t) coll 0)\n)", "user": "57780dd8e4b0979f89651656"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5778b78be4b0979f89651666"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "57748db6e4b0979f89651601"}, {"problem": 22, "code": "(fn [coll]\n  (loop [tail coll n 0]\n    (if (empty? tail) n (recur (rest tail) (inc n)))))", "user": "555b6e82e4b0deb715856e51"}, {"problem": 22, "code": "(fn [args]\n  (reduce (comp inc first list) 0 args))", "user": "577829f9e4b0979f8965165a"}, {"problem": 22, "code": "#(loop [x % i 0]\n   (if (empty? x)\n     i\n     (recur (rest x) (inc i))))", "user": "571346c0e4b07c98581c3a9b"}, {"problem": 22, "code": "reduce (fn [a b] (inc a)) 0", "user": "57596ba7e4b02ea11479931a"}, {"problem": 22, "code": "(fn [coll] \n  (reduce #(+ %1 %2) (map #(when % 1) coll)))", "user": "5777bb7ee4b0979f8965164d"}, {"problem": 22, "code": "(fn cnt [xs] (if (empty? xs)\n               0\n               (+ 1 (cnt (drop 1 xs)))))", "user": "5779bc87e4b0979f89651677"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "56a3e55ce4b0542e1f8d14d5"}, {"problem": 22, "code": "#(reduce (fn [a e] (inc a)) 0 %)", "user": "577a8049e4b0d3393e5deafc"}, {"problem": 22, "code": "reduce (fn [x _] (inc x)) 0", "user": "5770bbb9e4b0979f896515a0"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "577a444be4b0d3393e5deaf5"}, {"problem": 22, "code": "(fn [x]\n  ((fn [s n]\n    (if (= s [])\n      n\n      (recur (rest s) (+ n 1))\n    )\n  ) x 0)\n)", "user": "577aacf2e4b0d3393e5deb03"}, {"problem": 22, "code": "(fn [s]\n  (reduce (fn [a b] (+ a 1)) 0 s))", "user": "577abecfe4b0d3393e5deb06"}, {"problem": 22, "code": "(fn [l]\n  (loop [xs l\n         res 0]\n    (if\n      (empty? xs) res\n      (recur (rest xs) (inc res)))))", "user": "55ad0e18e4b03311e7b7329c"}, {"problem": 22, "code": "(fn a [c] (if (empty? c) 0 (inc (a (drop 1 c)))))", "user": "576bec8ee4b0a07e8fc18142"}, {"problem": 22, "code": "(fn [s]\n  (reduce + (map (constantly 1) s)))", "user": "577b4440e4b0d3393e5deb0f"}, {"problem": 22, "code": "(fn [l]\n  (inc (first (last (map-indexed vector l))))\n  )", "user": "577a4dc2e4b0d3393e5deaf6"}, {"problem": 22, "code": "#(reduce + (map (fn [b] 1) %))", "user": "519dbe75e4b037b32803f9bc"}, {"problem": 22, "code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "577a55d2e4b0d3393e5deaf7"}, {"problem": 22, "code": "(fn [lista]\n  (loop [nova lista\n         acc 0]\n    (if (empty? nova)\n      acc\n      (recur (rest nova) (inc acc)))))", "user": "5775659ae4b0979f8965161b"}, {"problem": 22, "code": "(fn yolo [sequence]\n  (if (empty? sequence)\n    0\n    (+ 1 (yolo (rest sequence))\n       )\n    )\n  )", "user": "5776558ee4b0979f89651633"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "577aea7be4b0d3393e5deb09"}, {"problem": 22, "code": "(fn [xs] (reduce (fn [x y] (+ 1 x)) 0 xs))", "user": "577a74f7e4b0d3393e5deafa"}, {"problem": 22, "code": "(fn getCount [coll]\n  (reduce + (map (constantly 1) coll))\n)", "user": "57758671e4b0979f8965161f"}, {"problem": 22, "code": "#(reduce (fn [a b] (inc a)) 0 %)", "user": "577bf999e4b0d3393e5deb2c"}, {"problem": 22, "code": "(fn [x]\n\t(loop [seq x, len 0]\n\t\t(if (not= seq ())\n\t\t\t(recur (rest seq) (+ len 1))\n\t\t\tlen\n\t\t)\n\t)\n)", "user": "52280a26e4b0186687e23a67"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "577be2f4e4b0d3393e5deb26"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 % )", "user": "577c3da9e4b0c8d87281f6b9"}, {"problem": 22, "code": "#(loop [i %1 acc 0]\n                 (if (empty? i)\n                   acc\n                   (recur (rest i) (inc acc))\n                   ))", "user": "560c37b5e4b05f002753df2e"}, {"problem": 22, "code": "reduce #(and %2 (inc %1)) 0", "user": "577c12dfe4b0d3393e5deb2f"}, {"problem": 22, "code": "(fn [lst] (reduce + (map (fn [x] 1) lst)))", "user": "577b9cfde4b0d3393e5deb16"}, {"problem": 22, "code": "(fn [x]\n  (loop [cnt 0]\n    (if (= (get (vec x) cnt) nil)\n      cnt\n      (recur (inc cnt)))))", "user": "5756e218e4b02ea1147992e5"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "577d0d4de4b0c8d87281f6cd"}, {"problem": 22, "code": "(fn [l] (reduce (fn [c n] (inc c)) 0 l))", "user": "577da4eae4b0c8d87281f6d7"}, {"problem": 22, "code": "(fn c [coll]\n  (if (empty? coll) 0 (+ 1 (c (rest coll)))))", "user": "57245755e4b0c5bde472c0f9"}, {"problem": 22, "code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "577e1d14e4b0c8d87281f6e2"}, {"problem": 22, "code": "(fn [s] (loop [s s n 0] (if (= s '()) n\n                          (recur (rest s) (inc n)))))", "user": "577a0dc3e4b0979f8965167b"}, {"problem": 22, "code": "#(reduce (fn [s _] (+ s 1)) 0 %)", "user": "4ecf5ee1535d44c135fd68b7"}, {"problem": 22, "code": "(fn [s] \n  (loop [x 0 se s]\n    (if (empty? se)\n      x\n      (recur (inc x) (rest se))\n      )))", "user": "577d3feee4b0c8d87281f6d2"}, {"problem": 22, "code": "(fn [s]\n   (loop [x 0\n          old-seq s]\n     (if (next old-seq)\n       (recur (inc x) (next old-seq))\n       (inc x))))", "user": "5776f39de4b0979f89651643"}, {"problem": 22, "code": "(fn[lst] (reduce + (map (fn[x] 1) lst)))", "user": "577dbb04e4b0c8d87281f6da"}, {"problem": 22, "code": "(fn\n  [x]\n  (loop [xs x\n         n 0]\n  \t(if (empty? xs)\n        n\t\n        (recur (rest xs) (inc n)))))", "user": "577673c2e4b0979f89651637"}, {"problem": 22, "code": "(fn cnt [s] (if (empty? s) 0 (+ 1 (cnt (rest s)))))", "user": "577508afe4b0979f8965160e"}, {"problem": 22, "code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "577fc45ae4b0d36ec5835e6e"}, {"problem": 22, "code": "(fn [xs]\n  (loop [counter 0\n         xs* xs]\n    (if (empty? xs*)\n      counter\n      (recur (inc counter)\n             (rest xs*)))))", "user": "570466e6e4b0b0fb43fd0663"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "55ff2f89e4b00f4cabc5765e"}, {"problem": 22, "code": "(fn [lst] (reduce (fn [a _] (inc a)) 0 lst))", "user": "53b615cce4b047364c0444c2"}, {"problem": 22, "code": "(fn cnt [s] (if (first s) (+ 1 (cnt (rest s))) 0))", "user": "5778694fe4b0979f89651660"}, {"problem": 22, "code": "reduce (fn [a b] (inc a)) 0", "user": "577832f4e4b0979f8965165b"}, {"problem": 22, "code": "reduce (fn [acc x]\n         (inc acc)\n         ) 0", "user": "577e42dee4b0c8d87281f6e4"}, {"problem": 22, "code": "(fn fcount [c] (+ 1 (first (last (map-indexed vector c)))))", "user": "578151ade4b0d36ec5835e83"}, {"problem": 22, "code": "(fn mycount [s] \n  (\n   (fn count_ [s_, i]\n     (cond (= (seq s_) nil) i\n           :else (count_ (rest s_) (+ i 1))\n           )\n     ) s 0\n   )\n  )", "user": "578163bee4b0d36ec5835e85"}, {"problem": 22, "code": "reduce (fn [res _] (inc res)) 0", "user": "57822efce4b0d36ec5835e91"}, {"problem": 22, "code": "(fn [s] (reduce + (map (fn [x] 1) s)))", "user": "57785517e4b0979f8965165f"}, {"problem": 22, "code": "(fn [l] (reduce (fn [x, y] (+ x 1)) 0 l))", "user": "5629e651e4b00e49c7cb4814"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "56c21eafe4b05cc29241ee7e"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "577fb9e7e4b0d36ec5835e6b"}, {"problem": 22, "code": ";(fn [n] (loop [cnt 0 input n] (if (empty? input) cnt (recur (inc cnt) (rest input)))))\n#(.size (seq %))", "user": "57123c96e4b09c608db70454"}, {"problem": 22, "code": "(fn [s] (reduce (fn [a b] (+ a 1)) 0 s))", "user": "5783cd26e4b0ebec4cfb74be"}, {"problem": 22, "code": ";#(loop [coll % cnt 0] (if (nil? coll) cnt (recur (next coll) (inc cnt))))\nreduce (fn [c _] (inc c)) 0", "user": "57615a22e4b0994c1922fb88"}, {"problem": 22, "code": "(fn foo\n  ([x] (foo x 0))\n  ([x n]\n  \t(if (= nil (first x)) n\n  \t(foo (drop 1 x) (inc n))\n    )\n  )\n)", "user": "5784578de4b0ebec4cfb74c4"}, {"problem": 22, "code": "(fn [coll] (reduce + (map (fn [x] 1) coll)))", "user": "5783c859e4b0ebec4cfb74bd"}, {"problem": 22, "code": "#(inc (first (last (map-indexed vector %))))", "user": "57691cf3e4b0a07e8fc180e7"}, {"problem": 22, "code": "(fn [input] (loop [in input out 0]\n  (if (empty? in)\n    out\n    (recur (rest in)\n           (+ out 1)\n    )\n  )\n))", "user": "5784ec65e4b0ebec4cfb74d1"}, {"problem": 22, "code": "(fn countering [sequ] (reduce (fn [cnt item] (inc cnt)) 0 sequ))", "user": "5784e2a6e4b0ebec4cfb74d0"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "577f442ce4b0d36ec5835e60"}, {"problem": 22, "code": "(fn my-count [s] \n  (if (empty? s) \n    0 \n    (+ 1 \n       (my-count (rest s))\n    )\n  )\n)", "user": "577f635be4b0d36ec5835e64"}, {"problem": 22, "code": "reduce (fn [x y] (inc x)) 0", "user": "57853bd9e4b0ebec4cfb74d6"}, {"problem": 22, "code": "#(loop [coll % index 0]\n   (if (empty? coll)\n     index\n     (recur (rest coll) (inc index))))", "user": "57861b0ce4b0ebec4cfb74ef"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %1)", "user": "575e71a2e4b0846ea39baf26"}, {"problem": 22, "code": "(fn [x] (reduce + (map (fn [x] 1) x)))", "user": "5785de78e4b0ebec4cfb74e8"}, {"problem": 22, "code": "(fn [args] (apply + (map (fn [x] 1) args)))", "user": "5785de43e4b0ebec4cfb74e5"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5785de71e4b0ebec4cfb74e7"}, {"problem": 22, "code": "(comp (partial reduce +) (partial map (fn [n] 1)))", "user": "578796bee4b0ebec4cfb7507"}, {"problem": 22, "code": "#(reduce \n  (fn [r e] (+ r 1)) \n  0 \n  %)", "user": "577ab41fe4b0d3393e5deb05"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5786e182e4b0ebec4cfb7500"}, {"problem": 22, "code": "(fn custom-count [seq]\n  (letfn [(inner-count [seq c-cnt]\n            (if (empty? seq)\n              c-cnt\n              (recur (rest seq) (inc c-cnt))))]\n   (inner-count seq 0)))", "user": "5508b405e4b06e50f9beb110"}, {"problem": 22, "code": "(fn cnt [coll]\n  (if (= coll [])\n    0\n    (+ 1 (cnt (rest coll)))))", "user": "53b14dfce4b047364c04448d"}, {"problem": 22, "code": "(fn [x] (inc (.lastIndexOf (into [] x) (last x))))", "user": "56f8bc1de4b07572ad1a88a6"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5788e838e4b0ebec4cfb7526"}, {"problem": 22, "code": "(fn total-elements\n  ([collection]\n   (total-elements collection 0))\n  ([collection accumulator]\n   (if (empty? collection)\n     accumulator\n     (recur (rest collection) (inc accumulator)))))", "user": "5787ce76e4b0ebec4cfb750e"}, {"problem": 22, "code": "(fn [s]\n  (loop [sq s\n         cnt 0]\n    (if (seq sq)\n      (recur (rest sq) (inc cnt))\n      cnt)))", "user": "56fc9a2de4b08d47c977819b"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "5788daebe4b0ebec4cfb7525"}, {"problem": 22, "code": "reduce (fn[a b] (+ a 1)) 0", "user": "578a07cde4b0ebec4cfb7536"}, {"problem": 22, "code": "(fn cnt[collection](if (= (take 1 collection) '()) 0 (+ 1 (cnt(rest collection))) ))", "user": "5789d6dee4b0ebec4cfb7532"}, {"problem": 22, "code": "(fn mycount [_seq_]\n  (loop [result 0]\n    (if (empty? (drop result _seq_))\n      result\n      (recur (inc result))\n    ))\n )", "user": "578acd37e4b0ebec4cfb7541"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "578a08d8e4b0ebec4cfb7537"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5788aa82e4b0ebec4cfb7521"}, {"problem": 22, "code": "(fn count-a-seq [sq]\n  (loop [sum 0 sqe sq]\n    (if (empty? sqe)\n      sum\n      (recur (inc sum) (rest sqe))))\n  )", "user": "5783c505e4b0ebec4cfb74bc"}, {"problem": 22, "code": "#(reduce (fn [x y] (+ x 1)) 0 %1)", "user": "578b140be4b0ebec4cfb7545"}, {"problem": 22, "code": "(fn seq-count [li]\n  (cond (empty? li) 0\n        :else (+ 1 (seq-count (rest li)))))", "user": "5786c182e4b0ebec4cfb74fd"}, {"problem": 22, "code": "(fn [l] \n  (loop [x l y 0]\n    (if (empty? x) \n    y\n    (recur (rest x) (+ 1 y))\n  \t)\n  )\n)", "user": "56668386e4b0e91d5f5c5672"}, {"problem": 22, "code": "(fn [ar]\n  (apply + (map (fn [a] 1) ar)))", "user": "56e2c62fe4b03a7c14b85a37"}, {"problem": 22, "code": "(fn [ls]\n  (loop [s ls\n         n 0]\n    (if (nil? (first s)) n\n      (recur (rest s) (inc n)))))", "user": "578ce779e4b0ebec4cfb7561"}, {"problem": 22, "code": "reduce (fn [result _] (inc result)) 0", "user": "578d230fe4b0ebec4cfb7564"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "578d5185e4b0ebec4cfb7568"}, {"problem": 22, "code": "reduce (fn [s _] (inc s)) 0", "user": "577fa91ee4b0d36ec5835e6a"}, {"problem": 22, "code": "(fn [x] (reduce (fn [z w] (+ z 1)) 0 x))", "user": "578d863de4b0ebec4cfb756a"}, {"problem": 22, "code": "(fn myCount [aList] (reduce (fn [a b] (+ a 1)) 0 aList))", "user": "578d0ec0e4b0ebec4cfb7563"}, {"problem": 22, "code": "reduce (fn [sum _] (inc sum)) 0", "user": "5785de4ce4b0ebec4cfb74e6"}, {"problem": 22, "code": "(fn [s] ((fn [s n] (if (empty? s) n (recur (rest s) (+ n 1)))) s 0))", "user": "578cc0cce4b0ebec4cfb755f"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "578e04ebe4b0ebec4cfb7577"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "578e2829e4b0ebec4cfb757d"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "569fc70ee4b0542e1f8d1499"}, {"problem": 22, "code": "(fn seqLength [coll] (reduce #(+ %1 %2) (map (constantly 1) coll)))", "user": "578e535de4b0ebec4cfb7580"}, {"problem": 22, "code": "(fn count-recursive [x & y] (cond (empty? x) (first y) y (count-recursive (rest x) (+ (first y) 1)) :else (count-recursive (rest x) 1)))", "user": "577feed1e4b0d36ec5835e71"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "578ebbd5e4b0ebec4cfb7588"}, {"problem": 22, "code": "(fn [l] (reduce (fn [i _] (inc i))\n                0 l))", "user": "578cf84ce4b0ebec4cfb7562"}, {"problem": 22, "code": "(fn count' [s]\n  (loop [n 0\n         s' s]\n    (if (empty? s')\n      n\n      (recur (+ n 1) (rest s')))))", "user": "578f1edae4b0ebec4cfb7590"}, {"problem": 22, "code": "#(loop [cnt 0 lista %]\n     (if (empty? lista)\n      cnt\n       (recur (inc cnt) (rest lista))))", "user": "578fc072e4b0ebec4cfb759a"}, {"problem": 22, "code": "reduce (fn [c, _] (inc c)) 0", "user": "57904341e4b0ebec4cfb75a8"}, {"problem": 22, "code": "(fn [coll] (reduce (fn [x,y] (inc x)) 0 coll))", "user": "5783a897e4b0ebec4cfb74b9"}, {"problem": 22, "code": "(fn myCount [l] (if (empty? l) 0 (+ 1 (myCount (rest l)))))", "user": "5790b3d0e4b0ebec4cfb75ad"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5790e62ae4b0ebec4cfb75b0"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5698282ae4b0542e1f8d142e"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5790f9d7e4b0ebec4cfb75b4"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "554b8b65e4b0a04f7929958a"}, {"problem": 22, "code": "reduce (fn [acc _] (inc acc)) 0", "user": "57915ba4e4b0ebec4cfb75ba"}, {"problem": 22, "code": "(fn kount [col]\n  (if (nil? (first col))\n    0\n    (+ 1 (kount (rest col)))))", "user": "57410964e4b05c31a32c085f"}, {"problem": 22, "code": "(fn f [coll]\n  (if (empty? coll)\n    0\n    (+ 1 (f (rest coll)))))", "user": "5791d259e4b0ebec4cfb75c0"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "576d398be4b0979f8965155d"}, {"problem": 22, "code": "(fn d [x]\n    (if (empty? x)\n      0\n      (+ 1 (d (rest x)))))", "user": "5790329ee4b0ebec4cfb75a7"}, {"problem": 22, "code": "#(apply + (map (constantly 1) %))", "user": "57762e67e4b0979f89651630"}, {"problem": 22, "code": "(fn [coll]\n  (letfn [(step-fn [coll n]\n                   (if-let [s (seq coll)]\n                     (recur (rest s) (inc n))\n                     n))]\n    (step-fn coll 0)))", "user": "57934c67e4b0e215f87e8456"}, {"problem": 22, "code": "(fn counter [input]\n    (loop [theInput input counter 0]\n        (if (empty? theInput)\n            counter\n            (recur (rest theInput) (inc counter)))))", "user": "578e8192e4b0ebec4cfb7585"}, {"problem": 22, "code": "#(reduce (fn [accumulated item]\n           (inc accumulated))\n         0\n         %)", "user": "5793adf0e4b0e215f87e8462"}, {"problem": 22, "code": "(fn [ls] (reduce + (map (constantly 1) ls)))", "user": "57936970e4b0e215f87e8458"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "56bb7132e4b0f26550335955"}, {"problem": 22, "code": "(fn [x] \n  (loop [x x counter 0]\n    (if (= x '())\n      \tcounter\n      \t(recur (rest x) (+ 1 counter)))))", "user": "579332c2e4b0e215f87e8452"}, {"problem": 22, "code": "#(reduce (fn [y _] (+ 1 y)) 0 %)", "user": "5791ae28e4b0ebec4cfb75be"}, {"problem": 22, "code": "(fn my-count \n  ([my-seq]\n   (if (empty? my-seq) \n     0\n    (my-count (rest my-seq) 1)))\n  ([my-seq n]\n   (if (empty? my-seq) \n     n \n    (my-count (rest my-seq) (inc n))))\n  )", "user": "55a3d7c7e4b0acc240e3153d"}, {"problem": 22, "code": "(fn length [coll] \n  (if (empty? coll) 0\n    (+ 1 (length (rest coll)))))", "user": "4f03b969535dcb61093f6b55"}, {"problem": 22, "code": "(fn mycount [coll]\n\t( loop [index 0 re coll]\n\t  (if re \n\t   (recur  ( inc index ) ( next re ))\n\t   (first (list index))))\n )", "user": "579601c8e4b0e215f87e8492"}, {"problem": 22, "code": "#(reduce (fn [a _] (inc a) ) 0 %)", "user": "5795c16ae4b0e215f87e8489"}, {"problem": 22, "code": "#(reduce (fn [rez el] (inc rez)) 0 %1)", "user": "5795f1f1e4b0e215f87e8490"}, {"problem": 22, "code": "(fn [x] \n  (loop [remaining x number 0]\n    (if (empty? remaining)\n      number\n      (recur (rest remaining) (inc number)))\n ))", "user": "572b5916e4b0cd1946bd0f39"}, {"problem": 22, "code": "(fn count'\n  ([x]\n   (count' x 0))\n  ([x acc]\n   (if (empty? x) acc (recur (rest x) (inc acc)))))", "user": "579563ffe4b0e215f87e847e"}, {"problem": 22, "code": "(fn dfs\n  ([seqp]\n    (dfs seqp 0))\n  ([seqp num]\n   (if (= seqp [])\n     num\n     (dfs (rest seqp) (inc num)))))", "user": "5795acb5e4b0e215f87e8486"}, {"problem": 22, "code": "(fn [s]\n  (loop [scur s\n         c 0]\n    (if (= '() scur)\n      c\n      (recur (rest scur) (inc c)))))", "user": "57958dace4b0e215f87e8484"}, {"problem": 22, "code": "(fn tester [arr]\n  (reduce (fn [prev curr]\n            (inc prev))\n          0\n          arr))", "user": "5796e0afe4b039eba2ecb0f0"}, {"problem": 22, "code": "(fn cnt [l]\n  (if (empty? l)\n    0\n    ( + 1 (cnt (rest l)))\n  )\n  \n)", "user": "5795bddbe4b0e215f87e8488"}, {"problem": 22, "code": "reduce (fn [x y] (inc x)) 0", "user": "5784e177e4b0ebec4cfb74cf"}, {"problem": 22, "code": "#(reduce (fn [acc _] (inc acc)) 0 %)", "user": "545b486ae4b01be26fd7464f"}, {"problem": 22, "code": "(fn my-count [s]\n  (loop [remainder s\n         n 0]\n    (if (not (seq remainder))\n      n\n      (recur (rest remainder) (inc n)))))", "user": "5779556de4b0979f8965166e"}, {"problem": 22, "code": "#(apply + (map (fn [_] 1) %))", "user": "5798205ce4b039eba2ecb10e"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "57986b76e4b039eba2ecb116"}, {"problem": 22, "code": "#(reduce + (map (fn [i] 1) %))", "user": "5797d4bae4b039eba2ecb107"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5798c6cde4b039eba2ecb11d"}, {"problem": 22, "code": "(fn aa [ll]\n  (if (empty? ll) 0 (+ 1 (aa(rest ll)))))", "user": "5798d151e4b039eba2ecb120"}, {"problem": 22, "code": "(fn [x] (.length (into [] x)))", "user": "5797bb57e4b039eba2ecb104"}, {"problem": 22, "code": "(fn [col] (reduce + (map (constantly 1) col)))", "user": "57873017e4b0ebec4cfb7503"}, {"problem": 22, "code": "reduce #(do %2 (inc %1)) 0", "user": "57678ca9e4b0a07e8fc180c0"}, {"problem": 22, "code": "(fn my-count [s]\n  (loop [s s\n         c 0]\n    (if (empty? s)\n      c\n      (recur (rest s) (inc c))\n    )\n  )\n)", "user": "57985f98e4b039eba2ecb114"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5799b054e4b05b1deef9adc7"}, {"problem": 22, "code": "(fn my-count [s] (if (empty? (rest s)) 1 (+ 1 (my-count (rest s)))))", "user": "5795dbe0e4b0e215f87e848c"}, {"problem": 22, "code": "#(letfn [(mycount [xs n] (if (seq xs) (recur (rest xs) (+ n 1)) n))] (mycount %1 0))", "user": "5799cae4e4b05b1deef9adcb"}, {"problem": 22, "code": "#(reduce + (map (fn[x] 1) %))", "user": "5799fc93e4b05b1deef9add0"}, {"problem": 22, "code": "#(apply + (map (fn [_] 1) %))", "user": "57982bace4b039eba2ecb10f"}, {"problem": 22, "code": "#(loop [x % c 0] (if (= x '()) c (recur (rest x) (inc c))))", "user": "5799ff45e4b05b1deef9add1"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "579b16f7e4b05b1deef9adec"}, {"problem": 22, "code": "(fn\n  [col]\n  (loop [[head & tail] col\n         acc 1]\n    (if tail\n      (recur tail (inc acc))\n      acc)))", "user": "57972c9ee4b039eba2ecb0f2"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "579bd58de4b05b1deef9adfd"}, {"problem": 22, "code": "#(loop [item %\n        i 0]\n   \t(if (first item)\n      (recur (rest item) (inc i))\n      i))", "user": "577f8fcce4b0d36ec5835e66"}, {"problem": 22, "code": "(fn r [lst] (if (empty? lst) 0 (+ 1 (r (rest lst)))))", "user": "579c35fee4b05b1deef9ae04"}, {"problem": 22, "code": "reduce (fn [r e] (inc r)) 0", "user": "579c8ad1e4b05b1deef9ae0c"}, {"problem": 22, "code": "(fn cnt [x] (if (empty? x) 0  (+ 1 (cnt (rest x)))  ))", "user": "4f035fbe535dcb61093f6a92"}, {"problem": 22, "code": "(fn cnt [xs]\n  (if (empty? xs)\n    0\n    (+ 1 (cnt (rest xs)))))", "user": "579c73fee4b05b1deef9ae08"}, {"problem": 22, "code": "(fn [xs] (->> (map (fn [x y] (+ x 1)) (range) xs) last))", "user": "57717915e4b0979f896515b3"}, {"problem": 22, "code": "(fn f ([a] (f a 0)) ([a i] (if (not (= [] a)) (f (rest a) (inc i)) i)))", "user": "579d8947e4b05b1deef9ae17"}, {"problem": 22, "code": "#(reduce (fn [x acc] (+ x 1)) 0 %)", "user": "5799b260e4b05b1deef9adc8"}, {"problem": 22, "code": "(fn [s]\n  (reduce (fn [v _] (inc v)) 0 s))", "user": "579e15a6e4b05b1deef9ae20"}, {"problem": 22, "code": "(fn my-count\n  [seq]\n  (let [counter 0]\n    (loop [s seq c counter]\n      (if (empty? s)\n        c\n        (recur (rest s) (inc c))))))", "user": "579d1567e4b05b1deef9ae12"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "5694e9c5e4b0dcc4269f4123"}, {"problem": 22, "code": "(fn [col] \n  (loop [lst col c 0]\n    (if (empty? lst)\n      c\n      (recur (rest lst) (+ 1 c)))))", "user": "579c7db7e4b05b1deef9ae0a"}, {"problem": 22, "code": "#(reduce + (map (fn [_] 1) %))", "user": "57839ae9e4b0ebec4cfb74b8"}, {"problem": 22, "code": "#(loop [s % \n     n 0] \n  (if (empty? s)\n    n\n    (recur (rest s) (inc n))))", "user": "5609824ee4b0053d1b86c7e2"}, {"problem": 22, "code": "(fn [x]\n  (loop [listx x i 0]\n    (if (empty? listx)\n      i\n      (recur (rest listx) (inc i))\n      )\n    )\n  )", "user": "579e75fbe4b05b1deef9ae29"}, {"problem": 22, "code": "(fn\n  [col]\n  (loop [res 0 new-col col]\n    (if (empty? new-col)\n      res\n      (recur (inc res) (rest new-col)))))", "user": "579f3293e4b05302be0b72f9"}, {"problem": 22, "code": "reduce (fn [r _] (inc r)) 0", "user": "579f4812e4b05302be0b72fb"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "5688c95de4b0dcc4269f4070"}, {"problem": 22, "code": "(fn [lst]\n  (loop [acc 0\n         rst lst]\n    (if (empty? rst)\n      acc\n      (recur (inc acc) (rest rst)))))", "user": "579fc29fe4b0264b925669ff"}, {"problem": 22, "code": "(fn seq-count [s] (if (= (first s) nil) 0 (+ 1 (seq-count (rest s)))))", "user": "579bf7e3e4b05b1deef9ae01"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "57995ac1e4b05b1deef9adbf"}, {"problem": 22, "code": "(fn [coll] (reduce + (map (fn [item] 1) coll)))", "user": "5797748ce4b039eba2ecb0fb"}, {"problem": 22, "code": "#(reduce (fn [x y] (+ x y))\n         (map (constantly 1) (seq %)))", "user": "54a1c22fe4b09f271ff37c4c"}, {"problem": 22, "code": "(fn [x]\n  (loop [lst x sum 0]\n    (if (nil? (first lst))\n      sum\n      (recur (rest lst)\n             (inc sum)\n      )\n    )\n  )\n)", "user": "579fb6c2e4b0264b925669fd"}, {"problem": 22, "code": "reduce (fn [a b] (inc a)) 0", "user": "57974504e4b039eba2ecb0f5"}, {"problem": 22, "code": "(fn my-count [lst] \n  (if (= lst '())\n    0\n    (+ 1 (my-count (rest lst)))))", "user": "57a0e0bce4b0c3d858beb8dc"}, {"problem": 22, "code": "(fn [s] (reduce (fn [x y] (+ x 1)) 0 (vec s)))", "user": "57a0c84fe4b0c3d858beb8d8"}, {"problem": 22, "code": "(fn [coll] (reduce + 0 (map (fn [x] 1) coll)))", "user": "57a0f256e4b0c3d858beb8dd"}, {"problem": 22, "code": "(fn [coll] (reduce (fn [acc item] (inc acc)) 0 coll))", "user": "56fda4fee4b08d47c97781a7"}, {"problem": 22, "code": "#(loop [sequ %, acc 0]\n   (if (empty? sequ)\n     acc\n     (recur (rest sequ) (inc acc))))", "user": "57a13745e4b0c3d858beb8e3"}, {"problem": 22, "code": "(fn [s] \n  (let [helper \n        (fn [s n]\n  \t\t\t(if (empty? s)\n    \t\t\tn\n   \t\t\t\t(recur (rest s) (+ n 1))))]\n\t(helper s 0)))", "user": "57a178ade4b0c3d858beb8ec"}, {"problem": 22, "code": "(fn [input-list] (reduce + (map (fn [y] 1) input-list)))", "user": "5529904be4b0ffed3738f94d"}, {"problem": 22, "code": "#(reduce (fn [x y] (+ x 1)) 0 %)", "user": "534fa1a8e4b084c2834f4ace"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %1)", "user": "57783873e4b0979f8965165c"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "57a20f72e4b0c3d858beb8f5"}, {"problem": 22, "code": "(fn f [seq] (if (empty? seq) 0 (+ 1 (f (rest seq)))))", "user": "57a22c85e4b0c3d858beb8f6"}, {"problem": 22, "code": "(fn [parts]\n(loop [counter 0 stuff parts]\n(if(empty? stuff)\n  counter\n  (recur (inc counter) (rest stuff)))))", "user": "579be21fe4b05b1deef9adff"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "57a2d35be4b0c3d858beb907"}, {"problem": 22, "code": "#(loop [coll %\n        n 0]\n   (if (empty? coll)\n     n\n     (recur (rest coll)\n            (inc n))))", "user": "57a310b4e4b0c3d858beb90c"}, {"problem": 22, "code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "57a1ef58e4b0c3d858beb8f3"}, {"problem": 22, "code": "(fn [x] (alength(to-array x)))", "user": "57a2328ae4b0c3d858beb8f8"}, {"problem": 22, "code": "(fn my-count\n  ([a] \n   (my-count a 0))\n  ([a c] \n   (if(empty? a)\n     c\n     (my-count (rest a) (+ c 1)))))", "user": "5782ce69e4b0d36ec5835e9a"}, {"problem": 22, "code": "(fn [x] (reduce + (map (fn [y] 1) x)))", "user": "57a1f401e4b0c3d858beb8f4"}, {"problem": 22, "code": "(fn [x] (reduce #( do %& (inc %1)) 0 x))", "user": "57752a2de4b0979f89651613"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "578e07cfe4b0ebec4cfb7578"}, {"problem": 22, "code": "(fn [s] (reduce (fn [x y] (+ x 1)) 0 s))", "user": "57a499dae4b0a966079561e6"}, {"problem": 22, "code": "(fn [x]\n  (reduce +\n          (map #(or 1 %) x)))", "user": "57a49951e4b0a966079561e5"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "57a4a81ee4b0a966079561e8"}, {"problem": 22, "code": "#(reduce (fn [n x] (inc n)) 0 %)", "user": "57a4bb65e4b0a966079561eb"}, {"problem": 22, "code": "(fn [functor] (reduce (fn [cnt _] (+ cnt 1)) 0 functor))", "user": "57a284ebe4b0c3d858beb900"}, {"problem": 22, "code": "(fn [col]\n  (loop [s (seq col)\n         c 0]\n    (if s\n      (recur (next s) (inc c))\n      c)))", "user": "4e6ffaa3535d5021c1a8962e"}, {"problem": 22, "code": "#(loop [total 0\n        a %]\n   (if (empty? a)\n     total\n     (recur (inc total) (rest a))))", "user": "57a4f5cae4b0a966079561f0"}, {"problem": 22, "code": "(fn my-count [x] (if (empty? x) 0 (+ 1 (my-count (rest x)))))", "user": "57a5108be4b0a966079561f4"}, {"problem": 22, "code": "#(loop [coll %1 size 0]\n   (if (empty? coll)\n     size\n     (recur (rest coll) (inc size))))", "user": "579fa28fe4b0264b925669fb"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "579d9601e4b05b1deef9ae18"}, {"problem": 22, "code": "(partial (fn [n x] \n  (if (next x)\n    (recur (+ 1 n) (rest x))\n    (+ 1 n))) 0)", "user": "57a60225e4b0a96607956202"}, {"problem": 22, "code": "(fn f [s] (if (empty? s) 0 (inc (f (rest s)))))", "user": "57a5bdc4e4b0a966079561fd"}, {"problem": 22, "code": "(partial reduce (fn [c _] (inc c)) 0)", "user": "57a61332e4b0a96607956203"}, {"problem": 22, "code": "(fn [collee]\n  (loop [lit collee nu 0]\n    (if (empty? lit)\n      nu\n    (recur (rest lit) (+ nu 1))\n      )\n    ))", "user": "5695b86de4b0dcc4269f412b"}, {"problem": 22, "code": "(fn [x]\n  (reduce (fn [i j] (inc i)) 0 x))", "user": "57a2bb9be4b0c3d858beb905"}, {"problem": 22, "code": "#(reduce (fn [a _] (inc a)) 0 %)", "user": "57733764e4b0979f896515e0"}, {"problem": 22, "code": "(fn [coll]\n    (reduce \n      (fn [counter value] (inc counter)) \n      0 \n      coll))", "user": "579dd954e4b05b1deef9ae1b"}, {"problem": 22, "code": "#(reduce + (map (fn[x] 1) %))", "user": "57a6b679e4b0a9660795620c"}, {"problem": 22, "code": "(fn [x] (apply + (map #(if 1 1 %) x)))", "user": "57a774e4e4b0a96607956213"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "56e4a6c1e4b03a7c14b85a51"}, {"problem": 22, "code": "(fn count-copy\n  [some-seq]\n  (loop [c-seq some-seq total 0]\n    (if (empty? c-seq)\n       total\n      (recur (rest c-seq) (inc total) ) )\n    )\n  )", "user": "57a6ad79e4b0a9660795620b"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "57a14414e4b0c3d858beb8e4"}, {"problem": 22, "code": "(fn [l] \n    ( loop [sequ l c 0] \n      ( if (not(not-empty sequ)) \n        c\n        (recur (rest sequ)(inc c))\n       )\n     )\n  )", "user": "57a6f585e4b0a9660795620e"}, {"problem": 22, "code": "(fn [v]\n  ((fn count-elems [vctr ctr]\n    (if (= vctr []) (+ ctr 0) (count-elems (rest vctr) (+ ctr 1)))) v 0)\n)", "user": "57a775bbe4b0a96607956214"}, {"problem": 22, "code": "#(reduce + (map (fn [el] 1) %))", "user": "57a8d696e4b0a96607956224"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "57a92b3fe4b0a9660795622e"}, {"problem": 22, "code": "(fn cnt [l] (if (= l '()) 0 (inc (cnt (rest l)))))", "user": "57a9b2dbe4b0a96607956233"}, {"problem": 22, "code": "(fn [s] (apply + (map (fn[_] 1) s)))", "user": "57a9e274e4b0b8559636fc5d"}, {"problem": 22, "code": "(fn [s]\n  (loop [s s n 0]\n    (if-not (seq s) n (recur (rest s) (inc n)))))", "user": "57aa053fe4b0b8559636fc61"}, {"problem": 22, "code": "#(reduce (fn [c _] \n  (inc c)) 0 %)", "user": "57a9b00be4b0a96607956232"}, {"problem": 22, "code": "(fn [seq] \n  (loop [x 0 tmp-seq seq]\n    (if (nil? (first tmp-seq))\n      x\n      (recur (inc x) (rest tmp-seq)))))", "user": "57aa2b97e4b0b8559636fc66"}, {"problem": 22, "code": "(fn [lst]\n  (loop [x lst acc 0]\n    (if (empty? x)\n      acc\n      (recur (rest x) (inc acc)))))", "user": "57a7f7d8e4b0a96607956218"}, {"problem": 22, "code": "(fn [coll]\n  (->> coll\n       (map (constantly 1))\n       (reduce +)))", "user": "57aa4752e4b0b8559636fc6a"}, {"problem": 22, "code": "(fn [lst]\n  (loop [i lst cnt 0]\n    (cond (empty? i) cnt\n          :t (recur (rest i)(inc cnt)))))", "user": "57a0c9c9e4b0c3d858beb8d9"}, {"problem": 22, "code": "(fn [s]\n  (loop [c 0\n         s' s]\n    (if (empty? s')\n      c\n      (recur (+ 1 c) (rest s')))))", "user": "57aa4775e4b0b8559636fc6b"}, {"problem": 22, "code": "(fn [x] (reduce (fn [acc _] (inc acc)) 0 x))", "user": "56bfd8ade4b060a8e693e3a2"}, {"problem": 22, "code": "(fn [x]\n  ((fn [xs n]\n     (if (empty? xs) n (recur (rest xs) (inc n)))) (seq x) 0))", "user": "57aafac1e4b0b8559636fc75"}, {"problem": 22, "code": "#(loop [col  %\n        ct   0]\n   (if (empty? col) ct (recur (rest col) (inc ct))))", "user": "57aa290de4b0b8559636fc65"}, {"problem": 22, "code": "(fn count-characters [x] \n  (apply + (map (fn[y] 1) x)))", "user": "57ab41dde4b0b8559636fc79"}, {"problem": 22, "code": "(fn my-count [s] (reduce (fn [result element] (inc result)) 0 s))", "user": "57a9db97e4b0b8559636fc5b"}, {"problem": 22, "code": "(fn len [x] (if (seq x) (+ 1 (len (rest x))) 0))", "user": "57ac8344e4b0b8559636fc8b"}, {"problem": 22, "code": "reduce (fn [acc _] (inc acc)) 0", "user": "57acb156e4b0b8559636fc8d"}, {"problem": 22, "code": "reduce (fn [init elem] (inc init)) 0", "user": "577aad81e4b0d3393e5deb04"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "57abfd40e4b0b8559636fc80"}, {"problem": 22, "code": "(fn [item]  (loop [iter 0 table (seq item)] (if (empty? table) iter (do (println table) (recur (inc iter) (drop 1 table))))))", "user": "57aa103be4b0b8559636fc64"}, {"problem": 22, "code": "(fn [coll]\n  (loop [counter 0 elements coll]\n    (if (empty? elements)\n      counter\n      (recur (inc counter) (rest elements)))))", "user": "578bbd3ee4b0ebec4cfb754e"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "579f89d5e4b05302be0b72ff"}, {"problem": 22, "code": "#(reduce (fn [state elt] (+ 1 state)) 0 %1)", "user": "57abff53e4b0b8559636fc81"}, {"problem": 22, "code": "reduce (fn [number ele](inc number)) 0", "user": "57908d94e4b0ebec4cfb75ac"}, {"problem": 22, "code": "#(alength (into-array %))", "user": "57a88e24e4b0a9660795621f"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "57ac7710e4b0b8559636fc88"}, {"problem": 22, "code": "(fn count-seq [s]\n  (loop [s s\n         c 0]\n    (if (= (first s) nil)\n      c\n      (recur (rest s) (inc c)))))", "user": "57acbe5fe4b0b8559636fc8e"}, {"problem": 22, "code": "(fn [a] \n  (reduce \n   \t(fn [ac _] (inc ac))\n   \t\t0 a\n   ))", "user": "57ad8f78e4b0b8559636fc9f"}, {"problem": 22, "code": "#(apply + (map (constantly 1) %1))", "user": "57adbe7ee4b0b8559636fca0"}, {"problem": 22, "code": "(fn [xs] (reduce (fn [acc i] (inc acc)) 0 xs))", "user": "5788f357e4b0ebec4cfb7527"}, {"problem": 22, "code": "(fn [lst]\n  (loop [i lst cnt 0]\n   (cond (empty? i) cnt :t\n      (recur (rest i)(inc cnt)))))", "user": "57acee37e4b0b8559636fc94"}, {"problem": 22, "code": "(fn [x]\n  (loop [temp-list x counter 0]\n    (if (= (first temp-list) nil)\n      counter\n      (recur (rest temp-list) (inc counter)\n      )\n    )\n  )\n)", "user": "57ade6fce4b0b8559636fca5"}, {"problem": 22, "code": "#(inc (first (last (map vector (range) %))))", "user": "57ad7ad6e4b0b8559636fc9d"}, {"problem": 22, "code": "#(loop [result 0 c %]\n    (if(empty? c) result\n    (recur (inc result) (rest c))))", "user": "57ab536be4b0b8559636fc7a"}, {"problem": 22, "code": "(fn [x]\n  (loop [i 0]\n    (if (= (drop i x) ())\n      i\n      (recur (+ 1 i)))))", "user": "575117f8e4b02ea11479927e"}, {"problem": 22, "code": "(fn [col]\n  (reduce\n   (fn [total _] (inc total))\n   0\n   col))", "user": "56f53c61e4b046a417f9206d"}, {"problem": 22, "code": "#(loop [list % n 0]\r\n                    (if (seq list)\r\n                      (recur (rest list) (inc n))\r\n                      n))", "user": "5075e374e4b09049dea827a5"}, {"problem": 22, "code": "(fn [initial-s]\n  (loop [n 0 s initial-s]\n    (if (empty? s)\n      n\n      (recur (inc n) (rest s)))))", "user": "57addbcce4b0b8559636fca3"}, {"problem": 22, "code": "#(  reduce + (map (fn[x]1) %) )", "user": "57af249fe4b0fbc9809a272b"}, {"problem": 22, "code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "578f5122e4b0ebec4cfb7592"}, {"problem": 22, "code": "(fn [coll]\n  (loop [cnt 0 coll coll]\n    (if (empty? coll) cnt\n      (recur (inc cnt) (rest coll)))))", "user": "57af41bce4b0fbc9809a2731"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "579ea15ee4b05b1deef9ae2a"}, {"problem": 22, "code": "#(.length (vec %))", "user": "57af3bace4b0fbc9809a2730"}, {"problem": 22, "code": "(fn [liste]\n  (reduce (fn [ c x]\n            (inc c))\n          0\n          liste))", "user": "57ad0950e4b0b8559636fc97"}, {"problem": 22, "code": "#(loop [l % r 0]\n   (if (nil? l)\n     r\n     (recur (next l) (inc r))))", "user": "57a6552ce4b0a96607956208"}, {"problem": 22, "code": "(fn [x]\n(loop [v x c 0]\n  (if (empty? v)\n    c\n    (recur (rest v) (inc c)))))", "user": "57af74aee4b0fbc9809a2736"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "57afd36de4b0fbc9809a273c"}, {"problem": 22, "code": "(fn [coll]\n      (loop [inc 0 list coll]\n        (if (empty? list)\n          inc\n          (recur (+ inc 1) (rest list)))))", "user": "5386f784e4b06839e8705f17"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "55fde52ce4b00f4cabc5764c"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "57b084ece4b0fbc9809a2745"}, {"problem": 22, "code": "#(loop [result 0 coll %] \n   (if (empty? coll) result\n     (recur (inc result) (rest coll))\n    )\n  )", "user": "57ac6c67e4b0b8559636fc87"}, {"problem": 22, "code": "(fn [s] (loop [s s c 0] (if (empty? s) c (recur (rest s) (inc c)) )))", "user": "57b15381e4b0fbc9809a2751"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "57b13adae4b0fbc9809a2750"}, {"problem": 22, "code": "(fn mycount [collec] \n\t(if (empty? collec)\n\t  0\n\t  (+ 1 (mycount (rest collec)))))", "user": "57af36eae4b0fbc9809a272e"}, {"problem": 22, "code": "reduce (fn [a b] (+ a 1) ) 0", "user": "57addf3ae4b0b8559636fca4"}, {"problem": 22, "code": "#(reduce (fn [x, c] (+ x 1)) 0 %)", "user": "57b1b8c8e4b0fbc9809a2756"}, {"problem": 22, "code": "(fn [coll]\n  (reduce (fn [acc _] (inc acc)) 0 coll))", "user": "4e6459af535d8ccf87e9fe6b"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "56f085d7e4b04a395b9a047e"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "57b2e37be4b0fbc9809a276a"}, {"problem": 22, "code": "(fn [y] (reduce + (map (fn [_] 1) y)))", "user": "57b35a19e4b0fbc9809a277d"}, {"problem": 22, "code": "(fn [xs] (reduce + (map (fn [x] 1) xs)))", "user": "57b33f2fe4b0fbc9809a2776"}, {"problem": 22, "code": "#(loop [coll % counter 0] (if (first coll) (recur (rest coll) (inc counter)) counter))", "user": "57b39fbee4b0fbc9809a2783"}, {"problem": 22, "code": "#(reduce (fn[s n](inc s)) 0 %)", "user": "57b3efb1e4b0fbc9809a278a"}, {"problem": 22, "code": "(fn count-seq [xs]\n  (reduce (fn [sum _] (inc sum)) 0 xs))", "user": "57b402e4e4b0fbc9809a278c"}, {"problem": 22, "code": "#(reduce (fn [x y] (+ x 1)) 0 %)", "user": "57b3046de4b0fbc9809a276d"}, {"problem": 22, "code": "#(reduce (fn [x _] (inc x)) 0 %)", "user": "57b45257e4b0fbc9809a2796"}, {"problem": 22, "code": "#(loop [col % cnt 0]\n    (if (empty? col)\n      cnt\n      (recur (rest col)(inc cnt))))", "user": "561052ace4b05f002753df6e"}, {"problem": 22, "code": "(fn [seq]\n  \n  (reduce (fn [initial current]\n          (+ initial 1)\n          ) 0 seq)\n  )", "user": "56684356e4b04acd4f672de4"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "57b4779de4b0fbc9809a279a"}, {"problem": 22, "code": "(fn count-elements\n  ([s] (count-elements s 0))\n  ([s counter]\n   (if (empty? s)\n     counter\n     (recur (rest s) (+ counter 1)))))", "user": "56491050e4b0284900eef639"}, {"problem": 22, "code": ";;(comp (map % 1) (reduce + 0))\n\n#(reduce (fn [a _] (inc a)) 0 %)", "user": "57b28351e4b0fbc9809a2760"}, {"problem": 22, "code": "#(loop [l %1 c 0] (if (empty? l) c (recur (rest l) (inc c))))", "user": "57b2ca30e4b0fbc9809a2768"}, {"problem": 22, "code": "#(apply + (map (constantly 1) %))", "user": "57b55290e4b0fbc9809a27a9"}, {"problem": 22, "code": "(fn [x]\n  (loop [s x\n         n 0]\n    (if (empty? s)\n      n\n      (recur (rest s) (inc n)))))", "user": "57b41969e4b0fbc9809a2790"}, {"problem": 22, "code": "#(loop [n 0 se %] (if (empty? se) n (recur (inc n) (rest se))))", "user": "57b59d77e4b0fbc9809a27ae"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "57b32282e4b0fbc9809a2774"}, {"problem": 22, "code": "(fn [col] (reduce (fn [prev new] (inc prev)) 0 col))", "user": "57b5c29ee4b0fbc9809a27b1"}, {"problem": 22, "code": "(fn cpart\n  ([coll]\n    (if (empty? coll)\n      0\n      (cpart coll 0)))\n  \n  ([[a & b] n]\n   (if (empty? b)\n     (inc n)\n     (recur b (inc n)))))", "user": "57b5dc52e4b0fbc9809a27b3"}, {"problem": 22, "code": "#(loop [accum %\n       i     1]\n  (if (nil? (nth accum i nil))\n    i\n    (recur accum\n           (inc i))))", "user": "5793931ee4b0e215f87e845c"}, {"problem": 22, "code": "(fn cc \n  ([ar] (cc ar 0)) \n  ([ar x]\n  \t(if (= ar '()) \n    \tx \n    \t(recur (rest ar) (+ x 1)))))", "user": "57b6231ae4b0fbc9809a27b7"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "57a1478ae4b0c3d858beb8e5"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "57a28fb1e4b0c3d858beb901"}, {"problem": 22, "code": "(fn [xs] (loop [[it & remaining] xs length 0] (if (nil? it) length (recur remaining (inc length)))))", "user": "57b65420e4b0fbc9809a27be"}, {"problem": 22, "code": "(fn count-list[x] ( (fn count-list-helper [some_list, accumulator] (if (= (first some_list) nil) accumulator (count-list-helper (rest some_list) (+ 1 accumulator))) ) x 0 ))", "user": "57b66368e4b0fbc9809a27c1"}, {"problem": 22, "code": "#(.length (vec %))", "user": "5780c2c6e4b0d36ec5835e7a"}, {"problem": 22, "code": "(fn [l] (reduce (fn [x y] (+ x 1)) 0 (sequence l)))", "user": "57b6cc7ce4b0fbc9809a27c4"}, {"problem": 22, "code": "(fn f ([coll] (f coll 0)) ([coll c] (if (first coll) (f (rest coll) (inc c)) c)))", "user": "57b5ed94e4b0fbc9809a27b4"}, {"problem": 22, "code": "(fn Cnt [col]\n  (let [s (seq col)]\n    (if (not s)\n      0\n      (inc (Cnt (rest s))))))", "user": "57b82f20e4b0fbc9809a27d9"}, {"problem": 22, "code": "(fn [s] (reduce (fn [v i] (+ v 1)) 0 s))", "user": "57b6edf6e4b0fbc9809a27c8"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "57b863dfe4b0fbc9809a27de"}, {"problem": 22, "code": "#(reduce (fn [a b] (+ a 1)) 0 %)", "user": "57af4a93e4b0fbc9809a2733"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "57b88091e4b0fbc9809a27e1"}, {"problem": 22, "code": "(fn foo [x] (if (first x) (+ 1 (foo (rest x))) 0))", "user": "57b8b008e4b0fbc9809a27e6"}, {"problem": 22, "code": "#(loop [n 0\n        s %]\n   (if (empty? s) n (recur (inc n) (rest s))))", "user": "57b6555be4b0fbc9809a27bf"}, {"problem": 22, "code": "(fn [coll]\n  (reduce + 0 (map (fn [x] 1) coll)))", "user": "57700f88e4b0979f89651597"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "57b98108e4b0fbc9809a27ef"}, {"problem": 22, "code": "reduce (fn [a b] (+ 1 a)) 0", "user": "57a89ae9e4b0a96607956221"}, {"problem": 22, "code": "(fn [ell] (loop [remaining ell, n 0] (if (empty? remaining) n (recur (rest remaining) (inc n)))))", "user": "57b99d48e4b0fbc9809a27f2"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "57a0f7cfe4b0c3d858beb8de"}, {"problem": 22, "code": "(fn [lst] \n   (loop [i lst cnt 0]\n     (if (empty? i)\n    \tcnt\n    \t(recur (rest i)(inc cnt)))))", "user": "57b9bfdae4b0fbc9809a27f5"}, {"problem": 22, "code": "#(reduce (fn[a b] (inc a)) 0 %)", "user": "57b9fc74e4b0fbc9809a27fb"}, {"problem": 22, "code": "(fn [coll]\n  (reduce (fn [acc n] (inc acc)) 0 coll))", "user": "50ab395de4b0f65d68208508"}, {"problem": 22, "code": "(fn my-count[s] \n(\n \tif (empty? s) 0\n  \t(\n     \t+ 1 (my-count (rest s))\n \t)\n ))", "user": "57153c1ae4b07c98581c3ad3"}, {"problem": 22, "code": "#_(loop [s % i 0]\n   (if (= (first s) nil) \n     i\n     (recur (rest s) (inc i))))\n\n#_(fn [s] \n  (reduce (fn [v _] (inc v)) 0 s))\n\n#_(reduce + (map (fn [_] 1) %))\n\n#_(reduce (fn [v _] (+ 1 v)) 0 %)\n\n#_(reduce (fn [v _] (inc v)) 0 %)\n\n\n;fail\n;(fn [s] (reduce (fn [a,b] (#(inc %) a)) 0 s))\n;reduce (fn [m _] (inc m)) 0\n;reduce #(if %2 (inc %)) 0\nreduce #(let [_ %2] (inc %)) 0\n;#(.size (vec %))\n;reduce #(or (inc %) %2) 0", "user": "57ba55c1e4b0fbc9809a2801"}, {"problem": 22, "code": "(fn [l] (loop [lst l c 0] (if (nil? (first lst)) c (recur (rest lst) (inc c)))))", "user": "54a43230e4b09f271ff37c6e"}, {"problem": 22, "code": "(fn total [array]\n  (if (empty? array)\n     0\n    (+ 1 (total (rest array))))\n)", "user": "567ff160e4b0966858e4d8e6"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "57bc9375e4b05aa3c4741c43"}, {"problem": 22, "code": "(fn  [n] (loop [cnt n acc 0] (if (empty? cnt)  acc (recur (rest cnt) (inc acc)))))", "user": "57b8f784e4b0fbc9809a27ea"}, {"problem": 22, "code": "reduce (fn [n _] (inc n)) 0", "user": "57bbc9bde4b05aa3c4741c31"}, {"problem": 22, "code": "(fn [in-seq]\n  (loop [cnt 0 tmp-seq in-seq]\n        (if (empty? tmp-seq)\n            cnt\n          (recur (inc cnt) (rest tmp-seq))\n          )\n        )\n  )", "user": "57b9d21fe4b0fbc9809a27f7"}, {"problem": 22, "code": "(fn [x] (reduce (fn [x y] (+ x 1)) 0 x))", "user": "57bd0270e4b05aa3c4741c4c"}, {"problem": 22, "code": "(fn [x] (loop [result 0 c x] (if (empty? c) result (recur (inc result) (rest c)))))", "user": "5644611be4b0284900eef5f1"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "57bbeb51e4b05aa3c4741c35"}, {"problem": 22, "code": "(fn cant[a]\n  (if (nil? a)\n    0\n    (+ 1 (cant (next a)))))", "user": "57bd960fe4b05aa3c4741c52"}, {"problem": 22, "code": "#(reduce (fn [& args] (+ (first args) 1)) 0 %)", "user": "552e719be4b076ab5578f7f0"}, {"problem": 22, "code": "(fn len[sequ] (if (seq sequ) (inc (len (rest sequ))) 0))", "user": "577412c6e4b0979f896515f6"}, {"problem": 22, "code": "(fn cnt [l]\n  (if (= l '())\n    0\n    (+ (cnt (rest l)) 1)))", "user": "57bdfba3e4b05aa3c4741c5f"}, {"problem": 22, "code": "#(loop [n 0 s %] (if (= s nil) n (recur (inc n) (next s))))", "user": "53376fc5e4b0e30313ee6c88"}, {"problem": 22, "code": "#(reduce +\n         (map (constantly 1)\n              %))", "user": "572fdecae4b0cd1946bd0f9e"}, {"problem": 22, "code": "(fn [v] (reduce (fn [n x] (inc n)) 0 v))", "user": "57bc722ce4b05aa3c4741c41"}, {"problem": 22, "code": "(fn cnt ([l i] (if (seq l) (cnt (rest l) (+ i 1)) i) ) ([l] (cnt l 0)))", "user": "57be0543e4b05aa3c4741c61"}, {"problem": 22, "code": "(fn count-seq [xs]\n  (reduce (fn [sum _] (inc sum)) 0 xs))", "user": "57b4b3a0e4b0fbc9809a27a3"}, {"problem": 22, "code": "(fn size [x] (if (empty? x) 0 (+ 1 (size (rest x)))))", "user": "5796d3ebe4b039eba2ecb0ee"}, {"problem": 22, "code": "(fn [coll] (reduce (fn [x y] (inc x)) 0 coll))", "user": "57b9f35be4b0fbc9809a27f9"}, {"problem": 22, "code": "#(loop \n      [col %\n       result 0] \n     (if (empty? col) \n        result\n     (recur \n            (rest col)\n            (inc result)\n      )\n     )\n    )", "user": "57bf304de4b05aa3c4741c75"}, {"problem": 22, "code": "(fn [l] (reduce (fn [res a] (inc res)) 0 l))", "user": "57b60e46e4b0fbc9809a27b6"}, {"problem": 22, "code": "#(reduce (fn [i _] (inc i)) 0 %)", "user": "57bf6ca7e4b05aa3c4741c7c"}, {"problem": 22, "code": "#(reduce \n   (fn [val coll]\n     (inc val))\n   0\n   %)", "user": "57bfffc7e4b05aa3c4741c8a"}, {"problem": 22, "code": "(fn cnt [l]\n  (if (empty? l)\n    0\n    (+ 1 (cnt (rest l)))))", "user": "57befca6e4b05aa3c4741c70"}, {"problem": 22, "code": "(fn wxy [l] (if (empty? l) \n              0\n              (+ 1 (wxy (rest l)))))", "user": "57bfb321e4b05aa3c4741c83"}, {"problem": 22, "code": "(fn [s] (loop [iter 0\n\t   sequence s]\n\t   (if (empty? sequence)\n\t   \titer\n\t   \t(recur (inc iter) (drop 1 sequence)))))", "user": "57c0393be4b05aa3c4741c90"}, {"problem": 22, "code": "(comp (partial reduce +)\n         (partial map (constantly 1)))", "user": "57bf2aace4b05aa3c4741c73"}, {"problem": 22, "code": "(fn my-count [coll] (if (empty? coll) 0 (+ 1 (my-count (rest coll)))))", "user": "57c0917be4b05aa3c4741c95"}, {"problem": 22, "code": "(fn [nums]\n  (loop [i nums acc 0]\n    (if-not (seq i)\n      acc\n      (recur (rest i) (inc acc)))))", "user": "579816abe4b039eba2ecb10d"}, {"problem": 22, "code": "(fn ccount [col] (if (empty? col) 0 (+ 1 (ccount (rest col)))))", "user": "57c0f515e4b05aa3c4741c98"}, {"problem": 22, "code": "(fn [coll]\n  (reduce\n    (fn [x y]\n      (inc x))\n   \t0 coll))", "user": "5789ebf8e4b0ebec4cfb7534"}, {"problem": 22, "code": "(fn f \n  ([s] (f s 0))\n  ([s n]\n   (if (empty? s)\n     n\n     (f (rest s) (+ n 1)))))", "user": "57c2d0c1e4b05aa3c4741cb8"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "52369a67e4b05f3be1c7c8f5"}, {"problem": 22, "code": "(fn countx [xs] (if (empty? xs) 0 (+ 1 (countx (rest xs)))))", "user": "57783e59e4b0979f8965165d"}, {"problem": 22, "code": "(fn [array]\n  (loop [first-elem (first array) rest-elem (rest array) counter 1]\n    (if (empty? rest-elem)\n      counter\n      (recur (first rest-elem) (rest rest-elem) (inc counter)))))", "user": "57c2d66ae4b05aa3c4741cb9"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "57c291d8e4b05aa3c4741cb4"}, {"problem": 22, "code": "(fn c [x] \n  (cond\n   (= nil (seq x)) 0 \n   :else (+ 1 (c (rest x)))\n  )\n)", "user": "57c3451fe4b05aa3c4741cbd"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "578f8a0ae4b0ebec4cfb7596"}, {"problem": 22, "code": "(fn [m] (reduce (fn [x y] (+ x 1)) 0 m))", "user": "57c3df67e4b05aa3c4741cc5"}, {"problem": 22, "code": "#(apply + (map (constantly 1) %))", "user": "53d4f786e4b00fb29b22133a"}, {"problem": 22, "code": "(fn [coll]\n  (reduce (fn [x y] (inc x)) 0 coll))", "user": "57be3805e4b05aa3c4741c65"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "578e01e9e4b0ebec4cfb7575"}, {"problem": 22, "code": "(fn[myseq] \n  (reduce + (map (fn [x] 1) myseq)))", "user": "57c314f3e4b05aa3c4741cba"}, {"problem": 22, "code": "(fn [lot]\n  (let [x 0]\n    (loop [n x new-lot lot]\n      (if (empty? new-lot)\n        n\n        (recur (inc n) (rest new-lot))))))", "user": "57c47e21e4b05aa3c4741cd2"}, {"problem": 22, "code": "(fn count-seq[xs]\n  (reduce (fn[x y](inc x)) 0 xs))", "user": "57c500f9e4b05aa3c4741cda"}, {"problem": 22, "code": "#(reduce + (map (fn[x]1) %))", "user": "57c56d78e4b05aa3c4741ce3"}, {"problem": 22, "code": "#(loop[ls %,n 0] (if(empty? ls) n (recur (rest ls) (inc n))))", "user": "56c50599e4b05cc29241ee9e"}, {"problem": 22, "code": "reduce (fn [counter _] (inc counter)) 0", "user": "57bc4bf4e4b05aa3c4741c3e"}, {"problem": 22, "code": "(fn [sequence]\n  (reduce (fn [counter _] (inc counter)) 0 sequence))", "user": "57c4a231e4b05aa3c4741cd5"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "57c1b32be4b05aa3c4741ca4"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "57c58ad6e4b05aa3c4741ce7"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "57c4ef0be4b05aa3c4741cd8"}, {"problem": 22, "code": "#(let [x (vec %)]  \n  (+ (.lastIndexOf x (last x)) 1)\n  )", "user": "57b35772e4b0fbc9809a277c"}, {"problem": 22, "code": "(fn count-sequence \n   ([] 0) \n   ([x] (let [the-rest (rest x)] (if (empty? the-rest) 1 (count-sequence the-rest 1)))) \n   ([x y] (let [the-rest (rest x)] (if (empty? the-rest) (+ 1 y) (count-sequence the-rest (+ 1 y)))))\n    )", "user": "57b356c2e4b0fbc9809a277b"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "57b4634ce4b0fbc9809a2798"}, {"problem": 22, "code": "#(reduce + (map (fn [arg] 1) %))", "user": "57a99d3fe4b0a96607956231"}, {"problem": 22, "code": "#(loop [xs (drop 1 %) cnt 0] (if (empty? xs) (inc cnt) (recur (rest xs) (inc cnt))))", "user": "57c6aa0be4b05aa3c4741cf7"}, {"problem": 22, "code": "#(reduce (fn [acc coll] (inc acc)) 0 %)", "user": "558e160ce4b027778923764c"}, {"problem": 22, "code": "(fn [v] \n   ( reduce \n#(do %1 %2 (+ 1 %1 ) ) \n0\nv)\n )", "user": "57bffed6e4b05aa3c4741c89"}, {"problem": 22, "code": "#(reduce (fn [size _] (inc size)) 0 %)", "user": "57c5c48ae4b05aa3c4741ce9"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "57c70189e4b05aa3c4741cfb"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %1))", "user": "57c62aece4b05aa3c4741cf1"}, {"problem": 22, "code": "(\n fn [coll] \n  (loop [s coll\n         cnt 0]\n  \t(if (empty? s)\n      cnt\n     (recur (rest s) (inc cnt))\n    )\n  )\n)", "user": "57c7258ee4b05aa3c4741cfe"}, {"problem": 22, "code": "(fn cant [l] (\n              if (empty? l)\n              \t0\n              \t(+ 1 (cant (rest l)))\n              )\n \t)", "user": "57c76dfbe4b05aa3c4741d04"}, {"problem": 22, "code": "(fn [x] (reduce (fn [i coll] (inc i)) 0 x))", "user": "57c779d6e4b05aa3c4741d06"}, {"problem": 22, "code": "(fn [_x] (loop [x _x c 0] (if (empty? x) c (recur (rest x) (inc c)))))", "user": "57c4e8dce4b05aa3c4741cd7"}, {"problem": 22, "code": "(fn [s]\n  (loop [in s total 0]\n    (if (empty? in)\n      total\n      (recur (rest in) (inc total)))))", "user": "567a3112e4b05957ce8c6196"}, {"problem": 22, "code": "reduce (fn [a _] (+ a 1)) 0", "user": "57c7a8b5e4b05aa3c4741d09"}, {"problem": 22, "code": "(partial reduce (fn[n _] (inc n)) 0)", "user": "57c7e7d9e4b05aa3c4741d0f"}, {"problem": 22, "code": "(fn [s] (apply + (map (fn [x] 1) s)))", "user": "57c8002ce4b05aa3c4741d13"}, {"problem": 22, "code": "(fn [a]\n  (loop [el a, num 0]\n  (if (first el) \n    (recur (next el) (inc num)) \n    num)))", "user": "57c7cef5e4b05aa3c4741d0d"}, {"problem": 22, "code": "#(reduce (fn [a b] (inc a)) 0 %)", "user": "57c815ade4b05aa3c4741d14"}, {"problem": 22, "code": "(fn count-m [col] (if (empty? col) 0  (inc (count-m (rest col)))))", "user": "57c6bca1e4b05aa3c4741cf8"}, {"problem": 22, "code": "(fn [x] (reduce + (map (fn[y] 1) x)))", "user": "57ab54aee4b0b8559636fc7b"}, {"problem": 22, "code": "#(reduce (fn [acc m] (+ acc 1)) 0 %)", "user": "55f4ebffe4b06e875b46ce81"}, {"problem": 22, "code": "#(inc (apply max (keys (zipmap (range) %))))", "user": "57c796b4e4b05aa3c4741d08"}, {"problem": 22, "code": "#(.size (seq %))", "user": "57b3027fe4b0fbc9809a276c"}, {"problem": 22, "code": "(fn [m] (reduce (fn [v _] (inc v)) 0 m))", "user": "57c92bdbe4b05aa3c4741d27"}, {"problem": 22, "code": "(fn [lat] (reduce (fn [x y] (+ x 1)) 0 lat))", "user": "57c92fc6e4b05aa3c4741d28"}, {"problem": 22, "code": "#(reduce (fn [x _](inc x)) 0 %)", "user": "57c93c50e4b05aa3c4741d2b"}, {"problem": 22, "code": "(fn count-a-seq [z]\n  (reduce (fn [x y] (+ x 1)) 0 z))", "user": "57c93af1e4b05aa3c4741d2a"}, {"problem": 22, "code": "(fn cnt \n  ([sequ] (\n           if (empty? sequ) \n           0 \n           (cnt (rest sequ) 1))) \n  ([sequ n] (\n             if (empty? sequ) \n             n \n             (cnt (rest sequ) (inc n)))))", "user": "57c94c6ee4b05aa3c4741d2d"}, {"problem": 22, "code": "(fn [coll] (reduce (fn [res val] (inc res)) 0 coll))", "user": "57ca95f2e4b05aa3c4741d3b"}, {"problem": 22, "code": "#(reduce (fn [a b] (inc a)) 0 %)", "user": "515310b4e4b0d6806ecd26fb"}, {"problem": 22, "code": "(fn [coll] \n  (loop [x 0 data coll] \n    (if (empty? data) \n      (+ x 0) \n      (recur (+ x 1) (rest data))\n    )\n  )\n)", "user": "57cc14aae4b05aa3c4741d4a"}, {"problem": 22, "code": "reduce (fn [a,b] (inc a)) 0", "user": "57c7fa03e4b05aa3c4741d12"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c))  0 %)", "user": "57c45e64e4b05aa3c4741ccf"}, {"problem": 22, "code": "(fn f ([x] (f x 0))\n([x y] (if (first x) \n(recur (rest x) (inc y))\ny))\n)", "user": "57c99a45e4b05aa3c4741d31"}, {"problem": 22, "code": "#(loop [remaining %\n        cnt 0]\n   (if (empty? remaining)\n     cnt\n     (recur (rest remaining)\n            (inc cnt))))", "user": "571077e8e4b09c608db70434"}, {"problem": 22, "code": "(fn [col] (if (string? col) (.length col) (.size col)))", "user": "57cc7d96e4b0c746388ab882"}, {"problem": 22, "code": "(fn [s]\n  (loop [s s\n         c 0]\n    (if (empty? s)\n      c\n      (recur (rest s) (inc c))\n      )\n    )\n  )", "user": "57cd7498e4b0c746388ab897"}, {"problem": 22, "code": "#(alength (to-array %))", "user": "57c8208ce4b05aa3c4741d16"}, {"problem": 22, "code": "#(reduce (fn [acc _] (inc acc)) 0 %)", "user": "57cacbf2e4b05aa3c4741d3e"}, {"problem": 22, "code": "reduce #(+ (first %&) 1) 0", "user": "57ce3fede4b0c746388ab8a6"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "57ccedaae4b0c746388ab88e"}, {"problem": 22, "code": "(fn [x]\n  (alength (to-array x)))", "user": "57b19fa1e4b0fbc9809a2754"}, {"problem": 22, "code": "#(loop [sum 0 m_seq %]\n      (if (empty? m_seq)\n        sum\n        (recur (inc sum) (rest m_seq))) )", "user": "57cc5a79e4b0c746388ab87d"}, {"problem": 22, "code": "(fn [x]\n    (loop [acc 0 l x]\n       (if (empty? l)\n            acc\n          (recur (inc acc) (rest l)))))", "user": "57cef3f8e4b0c746388ab8b4"}, {"problem": 22, "code": "(fn c [s] (if (empty? s) 0 (inc (c (rest s)))))", "user": "57a0b341e4b0c3d858beb8d4"}, {"problem": 22, "code": "#(loop [s % n 0] (if (empty? s) n (recur (rest s) (+ 1 n))))", "user": "57c3808ce4b05aa3c4741cbf"}, {"problem": 22, "code": "(fn [rootItems]\n  ((fn [items n]\n    (cond\n      (= items ()) n\n      :else (recur (rest items) (inc n))))\n    rootItems 0))", "user": "57ce6090e4b0c746388ab8ab"}, {"problem": 22, "code": "reduce (fn [x _] (inc x)) 0", "user": "57cd7086e4b0c746388ab896"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "57cfc061e4b00451144b0505"}, {"problem": 22, "code": "(fn get_count [xs] (reduce + (map #((constantly 1) %) xs)))", "user": "57cf9de8e4b00451144b0503"}, {"problem": 22, "code": "(fn [args] (reduce (fn [counter ignore] (inc counter)) 0 args))", "user": "57d13683e4b0bd073c202368"}, {"problem": 22, "code": "reduce (fn [cnt n] (inc cnt)) 0", "user": "57d0cd58e4b0bd073c20235e"}, {"problem": 22, "code": "(fn my-count [[head & tail]] (if (nil? head) 0 (+ 1 (my-count tail))))", "user": "57d0fce5e4b0bd073c202364"}, {"problem": 22, "code": "(fn count-seq [x] (if (= x '()) 0 (+ 1 (count-seq (rest x)))))", "user": "57d1d6c8e4b0bd073c202370"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "57760c89e4b0979f8965162a"}, {"problem": 22, "code": "(fn [coll] (reduce (fn [cnt _] (inc cnt)) 0 coll))", "user": "57c176abe4b05aa3c4741ca2"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "57d3a2c4e4b0bd073c202395"}, {"problem": 22, "code": "(fn [x]\n  ((fn [x n] (if (empty? x) n (recur (rest x) (inc n)))) x 0))", "user": "57be086ae4b05aa3c4741c62"}, {"problem": 22, "code": "#(reduce (fn [x, y] (+ x 1)) 0 %)", "user": "57d41589e4b0bd073c202399"}, {"problem": 22, "code": "#(loop\n   [x %1\n    y 0]\n   (if (empty? x)\n     y\n     (recur (rest x) (inc y))))", "user": "57d21102e4b0bd073c202375"}, {"problem": 22, "code": "(fn [coll] (reduce (fn [x, y] (+ x 1)) 0 coll))", "user": "57d1c183e4b0bd073c20236e"}, {"problem": 22, "code": "(fn [seq] (reduce (fn [a b] (+ a 1)) 0 seq))", "user": "57d46caae4b0bd073c2023a1"}, {"problem": 22, "code": "reduce (fn [res _] (inc res)) 0", "user": "57d4f225e4b0bd073c2023a6"}, {"problem": 22, "code": "(fn [lst]\n  (loop [i lst cnt 0]\n   (cond (empty? i) cnt\n     :t (recur (rest i)(inc cnt)))))", "user": "4e84bb7e535db62dc21a62e3"}, {"problem": 22, "code": "(fn [x] (reduce + 0 (map (fn [x] 1) x)))", "user": "57d55f87e4b0bd073c2023b1"}, {"problem": 22, "code": "(fn [col] (reduce (fn [output element] (inc output)) 0 col))", "user": "57d588a5e4b0bd073c2023b6"}, {"problem": 22, "code": "(fn cnt [s] ((fn cnt-aux [s n] (if (empty? s) n (cnt-aux (rest s) (+ n 1)))) s 0))", "user": "57d5ac4de4b0bd073c2023bc"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "56a80d8fe4b07966d5a8a06a"}, {"problem": 22, "code": "#(reduce (fn [a _] (inc a)) 0 %)", "user": "57c660fee4b05aa3c4741cf4"}, {"problem": 22, "code": "(fn [initial-x] \n  (loop [x initial-x, c 0]\n    (if (empty? x)\n      c\n      (recur (rest x) (inc c)))))", "user": "57d60d83e4b0bd073c2023c2"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "57d6b9c4e4b0bd073c2023cb"}, {"problem": 22, "code": "(fn \n  [a-list] \n  (reduce \n    (fn [a b] (inc a)) 0 a-list))", "user": "57d6c5cae4b0bd073c2023ce"}, {"problem": 22, "code": "#(reduce (fn [n _] (inc n)) 0 %)", "user": "57d74ad0e4b0bd073c2023d7"}, {"problem": 22, "code": "(fn [c]\n  (loop [c c \n         i 0]\n    (if (empty? c)\n      i\n      (recur (rest c) (inc i)))))", "user": "57d418b4e4b0bd073c20239a"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "57d1a0e6e4b0bd073c20236d"}, {"problem": 22, "code": "(fn [xs] (reduce + (map (fn [_] 1) xs)))", "user": "57d67e11e4b0bd073c2023c5"}, {"problem": 22, "code": "(fn [s] \n  (loop [r s c 0]\n    (if (empty? r)\n      c\n      (recur (rest r) (inc c))\n      )\n)\n)", "user": "57d7c894e4b0bd073c2023de"}, {"problem": 22, "code": "(fn [s] (reduce (fn [c _] (inc c)) 0 s))", "user": "56a12114e4b0542e1f8d14ab"}, {"problem": 22, "code": "(fn [x] (inc (first (reverse (keep-indexed #(if (not= %2 nil) %1) x)))))", "user": "57b35ecbe4b0fbc9809a277e"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "57d8a1dee4b0bd073c2023ee"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "57d8a193e4b0bd073c2023ed"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "57c7b7abe4b05aa3c4741d0b"}, {"problem": 22, "code": "#(reduce (fn [x, y] (inc x)) 0 %)", "user": "57d3b5c5e4b0bd073c202396"}, {"problem": 22, "code": "(fn [c] \n  (loop [c c p 0]\n    (if (empty? c)\n      p\n      (recur (rest c) (inc p))\n     )\n   )\n  )", "user": "57d79a81e4b0bd073c2023dc"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "57d7fbace4b0bd073c2023e4"}, {"problem": 22, "code": "(fn counting [x] (if  \n  (nil? (last x))   \n   0 \n  (inc (counting (rest x)  ) )\n))", "user": "57d95f37e4b0bd073c2023fc"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "57d9750be4b0bd073c2023fe"}, {"problem": 22, "code": "(fn [values]\n  (loop [values values result 0]\n    (if (empty? values)\n      result\n      (recur (rest values) (inc result)))))", "user": "57d9bca1e4b0bd073c202405"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "57da5fc4e4b0bd073c20240f"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "57d9c0ece4b0bd073c202406"}, {"problem": 22, "code": "(fn [c] (inc (first (last (map vector (range) c)))))", "user": "5796adf3e4b039eba2ecb0ea"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 (seq %))", "user": "57b65c9be4b0fbc9809a27c0"}, {"problem": 22, "code": "(fn [my-seq] (reduce + (map (fn [x] 1) my-seq)))", "user": "5784ff88e4b0ebec4cfb74d4"}, {"problem": 22, "code": "(fn [x] (reduce (fn [y _] (inc y)) 0 x))", "user": "57da7742e4b0bd073c202411"}, {"problem": 22, "code": "(fn [lst]\n  (loop [lst lst n 0]\n    (if (empty? lst)\n      n\n      (recur (rest lst) (inc n)))))", "user": "57d9f603e4b0bd073c20240a"}, {"problem": 22, "code": "#(loop [x % i 0] \n   (if x\n     (recur (next x) (inc i))\n     i))", "user": "57dafe97e4b0bd073c20241c"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x) ) 0 %)", "user": "57dbcc28e4b0bd073c202429"}, {"problem": 22, "code": "#(last (map-indexed (fn [i _] (+ i 1)) %))", "user": "57dc30e0e4b0bd073c202430"}, {"problem": 22, "code": "#(loop [l % , n 0] \n  (if (empty? l)\n    n\n    (recur (rest l) (inc n))\n    )\n  )", "user": "57dd3ae3e4b0bd073c20243d"}, {"problem": 22, "code": "(fn my-count [s]\n  (if (empty? s)\n    0\n    (+ 1 (trampoline my-count (rest s)))))", "user": "57dda21be4b0bd073c202445"}, {"problem": 22, "code": "#(reduce (fn [len _] (inc len)) 0 %)", "user": "57ddb63fe4b0bd073c20244a"}, {"problem": 22, "code": "#(loop [counter 0\n        coll %]\n   (if (seq coll)\n     (do \n       (inc counter)\n       (recur (inc counter) (rest coll)))\n     counter))", "user": "57942207e4b0e215f87e8469"}, {"problem": 22, "code": "(fn [col] (reduce (fn [acc i] (+ acc 1)) 0 col))", "user": "54b8fea9e4b0ed20f4ff6e9c"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "57c88fe9e4b05aa3c4741d1e"}, {"problem": 22, "code": "(fn [coll] (reduce (fn [n temp] (inc n)) 0 coll))", "user": "57de9acce4b0bd073c202456"}, {"problem": 22, "code": "(fn mein-count [reihe] (if (empty? reihe) \n                         0\n                         (+ 1 (mein-count (rest reihe)))))", "user": "57d261a8e4b0bd073c20237e"}, {"problem": 22, "code": "reduce (fn [x y] (+ x 1))  0", "user": "57df4cb5e4b0bd073c202463"}, {"problem": 22, "code": "reduce (fn [acc coll]\n          (inc acc) ) 0", "user": "5785c1d4e4b0ebec4cfb74e1"}, {"problem": 22, "code": "#(reduce (fn [p1 p2] (+ p1 1)) 0 %)", "user": "57e0447ae4b0bd073c202475"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "57dd47f4e4b0bd073c20243e"}, {"problem": 22, "code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "57dfea1ae4b0bd073c20246d"}, {"problem": 22, "code": "(fn my-count [s]\n  \"Count the number of elements in a given sequence\"\n  (loop [f (first s)\n         r (rest s)\n         c 0]\n    (if (seq r) ;; if there are elements left to count\n      (recur (first r) (rest r) (inc c))\n      (inc c)\n      )))", "user": "5705f569e4b0b0fb43fd0677"}, {"problem": 22, "code": "(fn [x] (reduce + (map (fn [y] '1) x)))", "user": "57b167afe4b0fbc9809a2752"}, {"problem": 22, "code": "reduce(fn[r i](inc r))0", "user": "57dba312e4b0bd073c202426"}, {"problem": 22, "code": "(fn [s]\n   ((fn [s n]\n     (if (next s)\n       (recur (rest s) (inc n))\n       (inc n))) s 0))", "user": "57e0f30ae4b0bfb2137f5a66"}, {"problem": 22, "code": "#(reduce (fn [a b] (inc a)) 0 (vec %))", "user": "57d93437e4b0bd073c2023f9"}, {"problem": 22, "code": "(fn [x] (reduce (fn [x y] (+ x 1)) 0 x))", "user": "57e10705e4b0bfb2137f5a6a"}, {"problem": 22, "code": "(fn -count \n  ([l] (-count l 0))\n     \n     \n  ([l acc] \n   (let [-tail (rest l)] (if (= l '()) acc (-count -tail (+ acc 1))))))", "user": "571543bbe4b07c98581c3ad4"}, {"problem": 22, "code": "#(apply + (map (constantly 1) %))", "user": "57e139f6e4b0bfb2137f5a6c"}, {"problem": 22, "code": "(fn [lst]\n   (loop [i 0\n          remaining lst]\n     (if (empty? remaining)\n       i\n       (recur (inc i)\n              (rest remaining)))))", "user": "57e13e52e4b0bfb2137f5a6d"}, {"problem": 22, "code": "reduce (fn [c _] (+ c (if _ 1))) 0", "user": "57e037b6e4b0bd073c202474"}, {"problem": 22, "code": "reduce (fn [h t] (inc h)) 0", "user": "57dfab73e4b0bd073c202468"}, {"problem": 22, "code": "(fn\n  [seqn]\n  (let [map_n (zipmap (range) seqn)\n        keys_n (keys map_n)\n    \tn_minus_1 (apply max keys_n)]\n    (+ n_minus_1 1)\n   )\n )", "user": "57dd5e90e4b0bd073c202440"}, {"problem": 22, "code": "(fn x\n  ([elements] (x elements 0))\n  ([elements n] (if (empty? elements)\n                  n\n                  (x (rest elements) (inc n)))))", "user": "57e20474e4b0bfb2137f5a82"}, {"problem": 22, "code": "(fn [x]\n  (loop [a (seq x) b 0]\n    (if (empty? a)\n      b\n      (recur (rest a) (inc b)))))", "user": "566d71b1e4b0a866af6896ca"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "57d9cae9e4b0bd073c202409"}, {"problem": 22, "code": "(fn [series] \n  \t(last (map-indexed (fn [idx v] (+ 1 idx)) series))\n  \n  )", "user": "56940617e4b0dcc4269f410b"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "57e2e1bde4b0bfb2137f5a8f"}, {"problem": 22, "code": "reduce (fn [x y] (inc x )) 0", "user": "57c8aed9e4b05aa3c4741d22"}, {"problem": 22, "code": "(fn [lst] (loop [i lst cnt 0] (cond (empty? i) cnt :t (recur (rest i) (inc cnt)))))", "user": "575f6a80e4b08062f99a4e80"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %1))", "user": "57e33f6fe4b0bfb2137f5a96"}, {"problem": 22, "code": "(fn [s]\n  (loop [c 1\n         [h & r] s]\n    (if (nil? r)\n      c\n      (recur (inc c) r))))", "user": "57e3527ce4b0bfb2137f5a99"}, {"problem": 22, "code": "(fn [x] (+ 1 (.lastIndexOf (seq x) (last (seq x)))))", "user": "57c5ee11e4b05aa3c4741ceb"}, {"problem": 22, "code": "#(last (keep-indexed (fn [i item] (+ i 1)) %))", "user": "57e30d38e4b0bfb2137f5a92"}, {"problem": 22, "code": "(fn [coll]\n  (reduce\n   (fn [result _] (inc result))\n   0\n   coll))", "user": "57e37f90e4b0bfb2137f5a9c"}, {"problem": 22, "code": "(fn [lst] (apply + (map (fn [dum] 1) lst)) )", "user": "57e404a3e4b0bfb2137f5ab1"}, {"problem": 22, "code": "#(loop [ve % i 0]\n   (if (not (empty? ve))\n     (recur (rest ve) (inc i))\n     i))", "user": "57e3f709e4b0bfb2137f5aaf"}, {"problem": 22, "code": "#(reduce (fn [first next] (+ first 1 )  ) 0 %1)", "user": "570fd28be4b09c608db70427"}, {"problem": 22, "code": "(fn f [l]\n        (if \n          (empty? l)\n          0\n          (+ 1 (f (rest l)))))", "user": "57e544c5e4b0bfb2137f5ad3"}, {"problem": 22, "code": "#(reduce (fn [acc new] (inc acc)) 0 (seq %))", "user": "57e56da8e4b0bfb2137f5ad6"}, {"problem": 22, "code": "(fn somefn [x] (loop [cnt 0 e x] (if (empty? (rest e)) (+ cnt 1)  (do (\nrecur (inc cnt) (rest e))))))", "user": "57e572b5e4b0bfb2137f5ad7"}, {"problem": 22, "code": "(fn cnt [in]\n  (reduce (fn ninc [x y] (inc x)) 0 in))", "user": "57e59d2be4b0bfb2137f5ad9"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "57e70a99e4b0bfb2137f5af8"}, {"problem": 22, "code": "(fn [x] (loop [l x y 0] (if (empty? l) y (recur (rest l) (inc y)))))", "user": "56f1469de4b04a395b9a048c"}, {"problem": 22, "code": "(fn [x]\n  (let [helper (fn [x n]\n                 (if (empty? x) \n                   n\n                   (recur (rest x) (inc n) )))]\n    (helper x 0)))", "user": "574e84e0e4b02ea114799243"}, {"problem": 22, "code": "(fn[xs] (reduce (fn[accum, x] (inc accum)) 0 xs))", "user": "57e3d30be4b0bfb2137f5aab"}, {"problem": 22, "code": "(fn [lst]\n  (loop [i lst cnt 0]\n    (if (empty? i)\n      cnt\n      (recur (rest i) (inc cnt))\n      )))", "user": "57e79d8ee4b0bfb2137f5afe"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "57e7da9fe4b0bfb2137f5b04"}, {"problem": 22, "code": "reduce (fn [x sequ] (inc x)) 0", "user": "57d0679ee4b0bd073c202359"}, {"problem": 22, "code": "reduce (fn [a _] (inc a)) 0", "user": "57e4dbcbe4b0bfb2137f5ac3"}, {"problem": 22, "code": "#(reduce (fn [a b] (inc a)) 0 %)", "user": "57de5f0ee4b0bd073c202450"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "57e6997ee4b0bfb2137f5af0"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "57e9591de4b0bfb2137f5b24"}, {"problem": 22, "code": "#(inc ((last (map-indexed vector %1)) 0))", "user": "56629a7de4b0e91d5f5c5649"}, {"problem": 22, "code": "(fn my-count [x]\n  (cond\n   (empty? x) 0\n   :else (+ 1 (my-count (rest x)))\n  )\n)", "user": "57ea2c91e4b0bfb2137f5b42"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "57e91413e4b0bfb2137f5b20"}, {"problem": 22, "code": "(fn [coll]\n  (reduce (fn [i & _] (inc i)) 0 coll))", "user": "57e9a77ae4b0bfb2137f5b35"}, {"problem": 22, "code": "(fn [lat]\n  (reduce (fn [x y] (inc x)) 0 lat))", "user": "57df309ee4b0bd073c20245f"}, {"problem": 22, "code": "(fn [input]\r\n  (loop [in input\r\n         cnt 0]\r\n    (if (empty? in)\r\n      cnt\r\n      (recur (rest in)\r\n             (inc cnt)\r\n      ))))", "user": "57eb10b1e4b0bfb2137f5b5b"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "57eb2576e4b0bfb2137f5b5c"}, {"problem": 22, "code": "(fn [seq]\n  (reduce (fn [total n] (inc total)) 0 seq))", "user": "57eb38dbe4b0bfb2137f5b5e"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "578b9978e4b0ebec4cfb754c"}, {"problem": 22, "code": "(partial reduce (fn [acc _] (inc acc)) 0)", "user": "56f26f9ae4b04a395b9a04a4"}, {"problem": 22, "code": "#(reduce (fn [x _] (inc x)) 0 %)", "user": "57ec3d29e4b0bfb2137f5b77"}, {"problem": 22, "code": ";; (fn length\n;;     ([ls] (length ls 0))\n;;     ([ls depth] (let [rst (rest ls)] (if (seq rst) (length rst (inc depth)) (depth)) ))\n;;)\n\n;; (fn length [lst] (apply +(for [x lst] 1)))\n\n;; (fn length [lst] (reduce + (map (fn [x] 1) lst)) )\n\n#(reduce (fn [x,y] (inc x)) 0 %)", "user": "57eb7a97e4b0bfb2137f5b62"}, {"problem": 22, "code": "reduce (fn [length value] (inc length)) 0", "user": "57ea2b2ae4b0bfb2137f5b40"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "57ecf93be4b0bfb2137f5b8c"}, {"problem": 22, "code": "#(reduce + (map (constantly 1)%))", "user": "57ecf8b2e4b0bfb2137f5b8b"}, {"problem": 22, "code": "(fn cnt \n ([xs] (cnt xs 0))\n ([xs n] (if (empty? xs) n (cnt (rest xs) (inc n)))))", "user": "57ed8315e4b0bfb2137f5b9a"}, {"problem": 22, "code": "reduce (fn [a i](+ a 1)) 0", "user": "57ec8d1de4b0bfb2137f5b7f"}, {"problem": 22, "code": "(fn [l] (loop [n 0 a l] (if (empty? a) n (recur (inc n) (rest a)))))", "user": "57ed19a3e4b0bfb2137f5b8e"}, {"problem": 22, "code": "(fn f [l] \n  (if (empty? l)\n            0\n            (+ 1 (f (rest l)))))", "user": "57e3ba00e4b0bfb2137f5aa5"}, {"problem": 22, "code": "#(loop [arr % i 0] (if-not (first arr) i (recur (next arr) (inc i)) ))", "user": "57ed3e6be4b0bfb2137f5b96"}, {"problem": 22, "code": "#(loop [i 0, col %1]\n        (if (= nil, (nth col i nil))\n            i\n            (recur (inc i), col)))", "user": "57ecc16fe4b0bfb2137f5b83"}, {"problem": 22, "code": "#(reduce (fn [x, y] (+ x 1)) 0 %)", "user": "57ee4909e4b0bfb2137f5bb4"}, {"problem": 22, "code": "#(reduce \n    (fn [c x] (inc c))\n     0 %)", "user": "57ea107ae4b0bfb2137f5b3e"}, {"problem": 22, "code": "(fn count-coll [coll]\n  (reduce (fn [c e] (inc c)) 0 coll))", "user": "57ee804ee4b0bfb2137f5bbb"}, {"problem": 22, "code": "#(loop [l %1 c 0]\n   (if (empty? l)\n       (int c)\n       (recur (rest l) (inc c))))", "user": "57eea2bee4b0bfb2137f5bc3"}, {"problem": 22, "code": "(fn [all] (reduce (fn [amount current] (inc amount)) 0 (seq all)))", "user": "5146cac9e4b04ef915e3731c"}, {"problem": 22, "code": "#(loop[s %, acc 0]\n   (if (empty? (vec s))\n     acc\n     (recur (pop (vec s)) (+ 1 acc))))", "user": "57ee9ffbe4b0bfb2137f5bc2"}, {"problem": 22, "code": "#(loop [remaining-elements %1 counter 0]\n   (if (empty? remaining-elements)\n     counter\n     (recur (rest remaining-elements) (inc counter))))", "user": "57e6ed35e4b0bfb2137f5af5"}, {"problem": 22, "code": "(fn armut [seqq] (loop [x 0 seqo seqq] (if (= (first seqo) nil) x (recur (inc x) (rest seqo))) ))", "user": "57db2369e4b0bd073c20241f"}, {"problem": 22, "code": "(fn [coll] (apply + (map (constantly 1) coll)))", "user": "57e7ecc1e4b0bfb2137f5b05"}, {"problem": 22, "code": "reduce (fn [x y] (inc x)) 0", "user": "57d13150e4b0bd073c202366"}, {"problem": 22, "code": "#(loop [x % y 0] (if (empty? x) y (recur (rest x) (inc y))))", "user": "57ef7f0ee4b0bfb2137f5bd9"}, {"problem": 22, "code": "(fn [a] (loop [i 0] (if (empty? (drop i a)) i (recur (inc i)))))", "user": "57efb389e4b0bfb2137f5bdb"}, {"problem": 22, "code": "(fn [coll]\n  (loop [col coll\n         var 0]\n    (if (empty? col)\n      var\n      (recur (rest col)(inc var)))))", "user": "57485efee4b009280f9f2b8a"}, {"problem": 22, "code": "(fn len [s] (if (empty? s)\n              0\n              (inc (len (rest s)))))", "user": "57df2722e4b0bd073c20245e"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "57ed2574e4b0bfb2137f5b93"}, {"problem": 22, "code": "(fn [s]\n(let [aux (fn [acc s]\n            (if (empty? s) acc (recur (inc acc) (rest s))))]\n  (aux 0 s)))", "user": "57e6f90de4b0bfb2137f5af6"}, {"problem": 22, "code": "#(reduce (fn [a & _] (inc a)) 0 %)", "user": "57f0f7b8e4b0bfb2137f5bfe"}, {"problem": 22, "code": "(fn motherfucker[x]\n   (loop [l x, i 0]\n     (if (empty? l)\n       i\n       (recur (rest l) (inc i))\n     )\n   )\n )", "user": "57f02543e4b0bfb2137f5beb"}, {"problem": 22, "code": "(fn [list]\n  (let [get-count (fn count-fn [list num]\n    (if (empty? list)\n      num\n      (count-fn (rest list) (inc num))))]\n    (get-count list 0)))", "user": "57f11d72e4b0bfb2137f5c03"}, {"problem": 22, "code": "reduce (fn [sum num] (inc sum)) 0", "user": "57e396cde4b0bfb2137f5a9e"}, {"problem": 22, "code": "(fn [xs] (reduce + (map (constantly 1) xs)))", "user": "57eaf869e4b0bfb2137f5b56"}, {"problem": 22, "code": ";(fn my-count [x] \n;  (+  (if (empty? x) \n;         0\n;         (+ 1 (my-count (rest x))))\n;   ))\n\nreduce (fn [n x] (inc n)) 0", "user": "57f2776ee4b0511f1d294ded"}, {"problem": 22, "code": "(fn [x] \n  (loop [in x\n         res 0]\n    (if (empty? in)\n      res\n      (recur (rest in) (inc res)))))", "user": "57efb417e4b0bfb2137f5bdc"}, {"problem": 22, "code": "(fn counter\n  ([elements] (counter elements 0))\n  ([elements number] (if (empty? elements) number (counter (rest elements) (inc number)))))", "user": "57f10279e4b0bfb2137f5c00"}, {"problem": 22, "code": "(fn [a] \n  (loop [a a\n         c 0]\n    (if (empty? a)\n      c\n      (recur (rest a) (inc c)))))", "user": "57f0a9fde4b0bfb2137f5bf6"}, {"problem": 22, "code": "(fn\n  [coll]\n  (loop [[head & tail] coll\n         x 0]\n    (if (nil? head)\n      x\n      (recur tail (inc x)))))", "user": "57e8f54be4b0bfb2137f5b1d"}, {"problem": 22, "code": "(fn[x](reduce + (map (constantly 1) x)))", "user": "57c74de0e4b05aa3c4741d03"}, {"problem": 22, "code": "(fn[x]\n   (loop [sum 0 listan x]\n      (if (empty? listan)\n        sum\n        (recur (inc sum) (rest listan)) \n      )\n    )\n  )", "user": "57ea79d9e4b0bfb2137f5b4f"}, {"problem": 22, "code": "(fn nocount\n  ([c n]\n      (if (nil? c)\n        n\n        (nocount (next c) (inc n))))\n  ([c] (nocount c 0)))", "user": "57f291a8e4b0511f1d294df0"}, {"problem": 22, "code": "#(loop [m 0 arr %]\n    (if (first arr)\n      (recur (+ m 1) (rest arr))\n      m))", "user": "57f253a3e4b0511f1d294dea"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "57f3f942e4b07bbd65c32b1b"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "507ff90fe4b089ade05efbd9"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5254b45fe4b0541d1855b9a0"}, {"problem": 22, "code": "reduce (fn [i e] (inc i)) 0", "user": "57f4ace3e4b07bbd65c32b2b"}, {"problem": 22, "code": "(fn [c] (reduce (fn [x y] (inc x)) 0 c))", "user": "57f297dbe4b0511f1d294df2"}, {"problem": 22, "code": "#(reduce (fn [a x] (+ a 1)) 0 %)", "user": "57ee2b35e4b0bfb2137f5bab"}, {"problem": 22, "code": "#(reduce\n  (fn [c _]\n    (inc c))\n  0 %)", "user": "57f5346de4b0903ccab3dcea"}, {"problem": 22, "code": "(fn count-size [elements] \n  (loop [e elements size 0]\n    (if (empty? e) size \n      (recur (rest e) (+ size 1)))))", "user": "57e15244e4b0bfb2137f5a70"}, {"problem": 22, "code": "(fn [s]\n  (reduce\n   (fn [p c] (inc p))\n   0\n   s\n   ))", "user": "57f55632e4b0903ccab3dcf1"}, {"problem": 22, "code": "(fn a\n  \n  ([coll cnt]\n  (if (empty? coll)\n    cnt\n    (recur (rest coll) (inc cnt))))\n  \n  ([coll]\n  (a coll 0))\n  \n  )", "user": "57f60fb8e4b0d3187e9008df"}, {"problem": 22, "code": "reduce (fn [cnt el] (+ 1 cnt)) 0", "user": "57ee82b1e4b0bfb2137f5bbd"}, {"problem": 22, "code": "(fn length [xs] (if (empty? xs) 0 (+ 1 (length (rest xs)))))", "user": "57f675c2e4b0d3187e9008e5"}, {"problem": 22, "code": "(fn [x] \n  (loop [entry x c 0]\n    (if (empty? entry) c\n      (recur (rest entry) (inc c)))))", "user": "56719c3ce4b05957ce8c610c"}, {"problem": 22, "code": "reduce (fn[x,y] (+ x 1)) 0", "user": "57ed248ae4b0bfb2137f5b92"}, {"problem": 22, "code": "#(reduce (fn [i seq] (inc i)) 0 %)", "user": "57f6e666e4b0d3187e9008f2"}, {"problem": 22, "code": "#(reduce (fn [a _] (+ 1 a)) 0 %)", "user": "57f541c7e4b0903ccab3dcec"}, {"problem": 22, "code": "#(reduce (fn [x, y] (inc x)) 0 %)", "user": "57f7b182e4b0d3187e9008fd"}, {"problem": 22, "code": "(fn [list]\n\t((fn [list, counter]\n\t\t(if (empty? list) counter (recur (rest list) (inc counter))))\n\tlist 0))", "user": "57f3f2bee4b07bbd65c32b1a"}, {"problem": 22, "code": "(fn \n  [coll]\n    (loop [coll coll acc 0]\n      (cond\n        (empty? coll) acc\n        :else (recur (rest coll) (+ acc 1)))))", "user": "57f80350e4b0d3187e90090c"}, {"problem": 22, "code": "(fn [lst]\n  (loop [lst-t lst\n         acum 0]\n    (if (empty? lst-t)\n      acum\n      (recur (rest lst-t) (inc acum))\n      )\n    )\n  )", "user": "57f81045e4b0d3187e90090f"}, {"problem": 22, "code": "(fn [s] \n  \t(loop\n      \t[s (seq s)\n         i 0]\n      (if (empty? s)\n        i\n        (recur (rest s) (inc i)))))", "user": "57f8104ce4b0d3187e900910"}, {"problem": 22, "code": "#(reduce (fn [n b] (+ n 1)) 0 %1)", "user": "57f85b36e4b0d3187e900924"}, {"problem": 22, "code": "(fn [l] (reduce + (map #(or 1 %) l)))", "user": "57f85550e4b0d3187e900923"}, {"problem": 22, "code": "#(reduce (fn [x _] (inc x)) 0 %)", "user": "56a44067e4b0542e1f8d14da"}, {"problem": 22, "code": "#(reduce (fn [acc _] (inc acc)) 0 %)", "user": "57a8eba2e4b0a96607956225"}, {"problem": 22, "code": "(fn [coll] (loop [coll coll\n             count-elem 0]\n        (if (seq coll)\n          (recur (rest coll) (inc count-elem))\n          count-elem)))", "user": "57f6bd5de4b0d3187e9008ee"}, {"problem": 22, "code": "(partial reduce (fn [a _] (inc a)) 0)", "user": "57f9011ee4b0d3187e900935"}, {"problem": 22, "code": "(fn [x] (reduce (fn [c x] (+ c 1)) 0 x))", "user": "57f7c74ee4b0d3187e900902"}, {"problem": 22, "code": "#(reduce (fn [accum item] (+ 1 accum)) 0 %)", "user": "566ca8d6e4b0a866af6896bf"}, {"problem": 22, "code": "(fn [lst]\n  (loop [c 0\n         f (first lst)\n         r (rest lst)]\n    (if (= r [])\n      (+ c 1)\n      (recur (+ c 1) (first r) (rest r)))))", "user": "57f8627ee4b0d3187e900926"}, {"problem": 22, "code": "#(reduce + (map (fn[_] 1) %))", "user": "57f96e13e4b0d3187e900945"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "57fa4d60e4b0d3187e90095f"}, {"problem": 22, "code": "#(loop [coll % n 0] (if (nil? (first coll)) n (recur (rest coll) (inc n))))", "user": "57f9e0bce4b0d3187e900956"}, {"problem": 22, "code": "(fn  [lst]\n  (loop [ls lst n1 0]\n    (if (empty? ls) n1 (recur (rest ls)  (inc n1) ))))", "user": "57fc08d8e4b0d3187e900988"}, {"problem": 22, "code": "(fn my-count [lst]\n  (loop [n 0\n         res lst]\n        (if (empty? res)\n            n\n            (recur (inc n)\n                   (rest res)))))", "user": "57f8151ce4b0d3187e900912"}, {"problem": 22, "code": "reduce (fn [x & y] (+ x 1)) 0", "user": "57f904c5e4b0d3187e900936"}, {"problem": 22, "code": "(fn cnt [x] (if (= x '()) 0 (+ 1 (cnt (rest x)))))", "user": "57fc4a63e4b0d3187e900993"}, {"problem": 22, "code": "(fn  [lst]\n  (inc (first (last (map-indexed vector lst)))))", "user": "57fc34f0e4b0d3187e90098e"}, {"problem": 22, "code": "#(alength (to-array %))", "user": "54012b48e4b0de5c41848620"}, {"problem": 22, "code": "(fn [coll] (reduce (fn [x y] (inc x)) 0 coll))", "user": "57c44053e4b05aa3c4741ccb"}, {"problem": 22, "code": "(fn [s]\n  (loop [cnt 0 input-seq s]\n    (if (empty? input-seq)\n      cnt\n      (recur (inc cnt) (rest input-seq)))))", "user": "57fd085ce4b0d3187e9009a9"}, {"problem": 22, "code": "#(loop [l %1 a 0]\n   (if (nil? l)\n     a\n     (recur (next l) (inc a))))", "user": "57fbd83ee4b0d3187e90097b"}, {"problem": 22, "code": "#((fn cnt [i x] (let [r (rest x)] (if (= '() r) i (cnt (inc i) r)))) 1 %)", "user": "57fd414de4b0d3187e9009b1"}, {"problem": 22, "code": "(fn my-count\n  [lst]\n  (if (empty? lst)\n    0\n    (+ 1 (my-count (rest lst)))))", "user": "57f8153de4b0d3187e900916"}, {"problem": 22, "code": "(fn [coll] (reduce #(do %2 (inc %1)) 0 coll))", "user": "57b9fb56e4b0fbc9809a27fa"}, {"problem": 22, "code": "(fn cnt\n  ([s]\n   (cnt s 0))\n  ([s n]\n   (if (empty? s)\n     n\n     (cnt (rest s) (inc n))\n     )))", "user": "57fc0719e4b0d3187e900987"}, {"problem": 22, "code": "#(reduce (fn [a _] (inc a)) 0 %)", "user": "57fdcdbfe4b0d3187e9009bd"}, {"problem": 22, "code": "(fn [col] (reduce + (map (fn [x] 1) col)))", "user": "57fdd1cfe4b0d3187e9009bf"}, {"problem": 22, "code": "(fn [data]\n  (let [s (seq data)]\n    (loop [c 0\n           se s]\n      (if (first se)\n        (recur (inc c) (rest se))\n        c))))", "user": "57c94c54e4b05aa3c4741d2c"}, {"problem": 22, "code": "(fn counter [x]\n  (if (empty? x)\n     0\n     (inc (counter (rest x)))))", "user": "57fe836ee4b0d3187e9009d2"}, {"problem": 22, "code": "(fn my-count\n  [list]\n\n  (if (empty? list)\n    0\n\n    (+ 1 (my-count (rest list)))))", "user": "57f81544e4b0d3187e900917"}, {"problem": 22, "code": "(fn [lst]\n  (loop [lista lst\n         c 0]\n    (cond\n     (empty? lista) c\n     :else (recur (rest lista) (inc c)))))", "user": "57fedf07e4b0d3187e9009dc"}, {"problem": 22, "code": "(fn countt[lst]\n  (loop [a lst\n         cont 0]\n    (if (empty? a)\n      cont\n      (recur (rest a)(inc cont)))))", "user": "57f814fbe4b0d3187e900911"}, {"problem": 22, "code": "(fn counter\n  [lst]\n  (->>\n    (map-indexed list (cons '0 lst))\n    (last)\n    (first)))", "user": "57f81534e4b0d3187e900915"}, {"problem": 22, "code": "(fn [col] (reduce (fn [counter _] (inc counter)) 0 col))", "user": "57fe996fe4b0d3187e9009d5"}, {"problem": 22, "code": "#(reduce (fn [acc x](inc acc))\n           \t0 \n         \t%)", "user": "57fe2d6fe4b0d3187e9009c8"}, {"problem": 22, "code": "(fn [x]\n  (loop [lst x total 0]\n    (if (empty? lst)\n      total\n      (recur (rest lst) (inc total)))))", "user": "57ffeb62e4b0a837a8b30c2d"}, {"problem": 22, "code": "(fn ct\n  ([s] (ct s 0))\n  ([s c]\n   (println s c)\n   (if (empty? s)\n           c\n           (recur (rest s) (+ c 1)))))", "user": "57ffe094e4b0a837a8b30c2c"}, {"problem": 22, "code": "(fn [lst]\n   (loop [lst lst\n          aux 0]\n     (if (empty? lst)\n       aux\n       (recur (rest lst) (inc aux)))))", "user": "57f81524e4b0d3187e900913"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %1))", "user": "57f3b8b7e4b0511f1d294e10"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "57f8cd5ae4b0d3187e900930"}, {"problem": 22, "code": "(fn check [x & [y]] (if (= (rest x) ()) (do (if (= y nil) (do 1) (do y))) (do (check (rest x) (if (= y nil) (do 2) (+ y 1)) ))))", "user": "580014d7e4b0a837a8b30c32"}, {"problem": 22, "code": "(fn [coll]\n  ((fn [coll length]\n    (if (empty? coll)\n      length\n      (recur (rest coll) (inc length)))) coll 0))", "user": "57ff8770e4b0a837a8b30c21"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "57fa7c93e4b0d3187e900963"}, {"problem": 22, "code": "(fn here [x] (reduce + (map (fn [y] (if (nil? y) 0 1)) x)))", "user": "57ffacd9e4b0a837a8b30c26"}, {"problem": 22, "code": "#(reduce (fn [x y] (+ x 1)) 0 %)", "user": "5800edaae4b0a837a8b30c48"}, {"problem": 22, "code": "(fn [l] ((fn ct [ll n] (if (first ll) (ct (rest ll) (+ n 1)) n)) l 0))", "user": "5800bbd5e4b0a837a8b30c44"}, {"problem": 22, "code": "#(inc (first (last (map-indexed vector %))))", "user": "57fd7344e4b0d3187e9009b6"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "54f1d0aee4b024c67c0cf8b7"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "58019c03e4b0a837a8b30c5b"}, {"problem": 22, "code": "#(reduce (fn [n x] (inc n)) 0 %)", "user": "57d174ede4b0bd073c20236c"}, {"problem": 22, "code": "#(reduce + (map (fn[_] 1) %))", "user": "51a3be77e4b0e77c4ca60bf8"}, {"problem": 22, "code": "(fn aaa [m] (if(empty? m) 0 (inc (aaa (rest m)))))", "user": "564a985be4b0284900eef65c"}, {"problem": 22, "code": "(fn [elements]\n  (loop [remaining elements\n         n 0]\n    (if (empty? remaining)\n      n\n      (recur (next remaining) (inc n)))))", "user": "5801eed1e4b0a837a8b30c63"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "57f52d3be4b0903ccab3dce7"}, {"problem": 22, "code": "(fn\n  [lst]\n  (loop [res 0\n         lst lst]\n    (if (empty? lst) res\n                     (recur (inc res) (rest lst)))))", "user": "57f81532e4b0d3187e900914"}, {"problem": 22, "code": "(fn [x]\n  (loop [lst (seq x)\n         n 0]\n    (if (empty? lst)\n      n\n      (recur (rest lst) (inc n)))))", "user": "57f81549e4b0d3187e900918"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "550df95ce4b06e50f9beb161"}, {"problem": 22, "code": "(fn [x] (reduce + 0 (map (fn [i] 1) x)))", "user": "54fa32bae4b0cf870d934701"}, {"problem": 22, "code": "(fn [x] (reduce (fn [i t] (+ i 1)) 0 x))", "user": "58037d8ae4b0a837a8b30c8b"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "58006950e4b0a837a8b30c3a"}, {"problem": 22, "code": "(fn [seqn] (reduce (fn [acc el] (+ acc 1)) 0 seqn))", "user": "58042984e4b0a837a8b30ca3"}, {"problem": 22, "code": "(fn cou [coll]\n  (if coll\n    (let [[_ & re] coll]\n      (inc (cou re)))\n    0))", "user": "57ffd1a9e4b0a837a8b30c2a"}, {"problem": 22, "code": "(fn func\n  ([s]\n   (func s 0))\n  ([s c] \n   (if (empty? s)\n     c\n     (recur (rest s) (inc c)))))", "user": "58047205e4b0a837a8b30ca9"}, {"problem": 22, "code": "(fn [x]\n  (loop [a x i 0]\n   (if (empty? a)\n     i\n     (recur (rest a) (+ i 1))\n   )\n  )\n )", "user": "5800f46ce4b0a837a8b30c49"}, {"problem": 22, "code": "#(loop [x % c 0]\n   (if (empty? x)\n     c\n     (recur (rest x) (inc c))))", "user": "57f8ba80e4b0d3187e90092f"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5804250fe4b0a837a8b30ca1"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "58052182e4b0a837a8b30cba"}, {"problem": 22, "code": "reduce (fn [x y] (inc x)) 0", "user": "55ee84c0e4b0121d4835fdf0"}, {"problem": 22, "code": "(fn count2\n  [lst]\n  (if (empty? lst) 0\n                   (inc (count2 (rest lst)))))", "user": "57f81569e4b0d3187e900919"}, {"problem": 22, "code": "(fn my-count\n  ([collection] (my-count collection 0))\n  ([collection counter]\n   (if (empty? collection)\n     counter\n     (my-count (rest collection) (inc counter)))))", "user": "5712418fe4b09c608db70455"}, {"problem": 22, "code": "#(reduce (fn [acc elem] (inc acc)) 0 %)", "user": "580558cde4b0a837a8b30cc4"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "580570a2e4b0a837a8b30cc7"}, {"problem": 22, "code": "(fn count_items [to_count]\n  (reduce (fn [i a] (+ i 1)) 0 to_count))", "user": "57f5a5a5e4b0d3187e9008d5"}, {"problem": 22, "code": "(fn [x] (reduce (fn [c y] (inc c)) 0 x))", "user": "58060dace4b0a837a8b30cd5"}, {"problem": 22, "code": "(fn [col] ((fn c [col2 n] (if (empty? col2) n (c (rest col2) (+ n 1)))) col 0))", "user": "58061731e4b0a837a8b30cd6"}, {"problem": 22, "code": "(fn [x] \n  (loop [iter x c 0]\n    (if (empty? iter)\n      c\n      (recur (rest iter) (inc c))   \n    )))", "user": "58050034e4b0a837a8b30cb4"}, {"problem": 22, "code": "(fn [xs] \n  (reduce (fn [acc _] (+ acc 1)) 0 xs))", "user": "5722d905e4b0c5bde472c0da"}, {"problem": 22, "code": "(fn [sq]\n    (loop [rem-sq sq\n           result 0]\n      (if (seq rem-sq)\n          (recur (rest rem-sq)\n                 (inc  result))\n          result)))", "user": "5803cd8fe4b0a837a8b30c96"}, {"problem": 22, "code": "#(+ 1(last(map first (map-indexed vector %))))", "user": "5805f0c3e4b0a837a8b30cd2"}, {"problem": 22, "code": "#(reduce (fn [a b] (inc a)) 0 %)", "user": "5806bce6e4b0a837a8b30ce5"}, {"problem": 22, "code": "(fn [c]\n  (loop [c c x 0]\n    (if (empty? c)\n      x\n      (recur (drop 1 c) (inc x)))))", "user": "5800ab1ee4b0a837a8b30c41"}, {"problem": 22, "code": "(fn [s] (reduce + (map (fn [x] 1) s)))\n;(fn [x] (reduce (fn [sum _] (inc sum)) 0 x))", "user": "580517d4e4b0a837a8b30cb9"}, {"problem": 22, "code": "#(loop [cnt 0 lst %]\n        (if-not (first lst)\n          cnt\n          (recur (inc cnt) (rest lst))))", "user": "5799025be4b039eba2ecb123"}, {"problem": 22, "code": "reduce (fn [x y] (inc x)) 0", "user": "58092258e4b0a837a8b30d1b"}, {"problem": 22, "code": "(fn [lst]\n  ((fn [lst acc]\n    (if (nil? (first lst))\n    \tacc\n        (recur (rest lst) (+ acc 1)))\n  ) lst 0))", "user": "58088dfde4b0a837a8b30d07"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "558fb218e4b0277789237665"}, {"problem": 22, "code": "reduce (fn [x y] (+ x 1)) 0", "user": "525415f8e4b0541d1855b95f"}, {"problem": 22, "code": "(fn [col] (loop [counter 0 remain col] (\n                                      if (empty? remain)\n                                      counter\n                                        (recur (inc counter) (next remain))\n                                      )))", "user": "5809f223e4b0a837a8b30d29"}, {"problem": 22, "code": "#(alength (to-array %))", "user": "57f3b841e4b0511f1d294e0f"}, {"problem": 22, "code": "#(do \n\n   (if (empty? %)\n\n     0\n\n     (loop [[head & tail] %\n\n            i 1]\n\n           (if (empty? tail)\n\n             i\n\n             (recur tail (inc i))))))", "user": "580a0783e4b0a837a8b30d2c"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "580a829ae4b0a837a8b30d38"}, {"problem": 22, "code": "(fn [x] (alength(to-array x)))", "user": "58021b0be4b0a837a8b30c6a"}, {"problem": 22, "code": "#(.size (vec %))", "user": "52ad1d00e4b0c58976d9ac90"}, {"problem": 22, "code": "(fn [s]\n  (letfn [(my-count [s tot]\n            (if (empty? s)\n              tot\n              (recur (rest s) (inc tot))))]\n    (my-count (seq s) 0)))", "user": "57a4fa50e4b0a966079561f1"}, {"problem": 22, "code": "(fn [s] (reduce (fn [a b] (inc a)) 0 s))", "user": "56958a16e4b0dcc4269f4129"}, {"problem": 22, "code": "#(inc (last (interleave % (range))))", "user": "5804fb34e4b0a837a8b30cb1"}, {"problem": 22, "code": "reduce #(+ 1 (first %&)) 0", "user": "5803ba6de4b0a837a8b30c95"}, {"problem": 22, "code": "(fn [c]\n  (reduce (fn [a b] (inc a)) 0 c))", "user": "580bd81ee4b0849f6811b711"}, {"problem": 22, "code": "(fn [lat]\n(reduce (fn [x y] (+ x 1)) 0 lat))", "user": "580c7036e4b0849f6811b71d"}, {"problem": 22, "code": "#(apply + (map (fn [_] 1) %))", "user": "580c8fcee4b0849f6811b721"}, {"problem": 22, "code": "(fn length\n  [collection]\n  (reduce #(inc (first %&)) 0 (vec collection)))", "user": "580beb40e4b0849f6811b713"}, {"problem": 22, "code": "#(loop [sq % cnt 0] \n  (if (empty? sq) \n    cnt \n    (recur (rest sq) (inc cnt))\n  )\n)", "user": "580d62b0e4b0849f6811b739"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "57ee432de4b0bfb2137f5bb2"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "57ee46c7e4b0bfb2137f5bb3"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "57ef793de4b0bfb2137f5bd8"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "57ee41a6e4b0bfb2137f5baf"}, {"problem": 22, "code": "#(loop [result 0\n         col %]\n    (if (empty? col) result (recur (inc result) (rest col))))", "user": "57ee2b3ee4b0bfb2137f5bac"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %1))", "user": "57ef7393e4b0bfb2137f5bd6"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "580e4848e4b0849f6811b750"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "580d57cfe4b0849f6811b738"}, {"problem": 22, "code": "#_(apply + (map (constantly 1) %))\n\n#_(loop [i 0]\n    (if (not= nil (get seq i))\n      (recur (inc i))\n      i))\n\n#_(loop [i 0\n       r %]\n  \t(if (nil? r)\n      i\n      (recur (inc i) (next r))))\n\n#(reduce (fn [x _] (inc x)) 0 %)", "user": "57ee42c4e4b0bfb2137f5bb1"}, {"problem": 22, "code": ";;#(.length (vec %))\nreduce (fn [c _] (inc c)) 0", "user": "57ee41eae4b0bfb2137f5bb0"}, {"problem": 22, "code": "#(.length (vec %))", "user": "580d7bdae4b0849f6811b73c"}, {"problem": 22, "code": "#(loop [my_seq %1 counter 0] \n   (if (empty? my_seq)\n     counter\n     (recur (rest my_seq) (+ 1 counter))\n   )\n   \n )", "user": "5805e70de4b0a837a8b30cd0"}, {"problem": 22, "code": "#(loop [x % y 0] (if (empty? x) y (recur (rest x) (inc y))))", "user": "580e2941e4b0849f6811b74e"}, {"problem": 22, "code": "#(alength (to-array %))", "user": "580e842ee4b0849f6811b756"}, {"problem": 22, "code": "(fn my-count [xs]\n  (loop [xs xs n 0]\n    (if (empty? xs)\n      n\n      (recur (rest xs) (inc n)))))", "user": "580fbaade4b0f478707a05c0"}, {"problem": 22, "code": "#(reduce \n   (fn\n     ([acc x]\n      (+ acc 1)))\n  0\n  %)", "user": "580fb8e0e4b0f478707a05bc"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5810b899e4b0f478707a05d8"}, {"problem": 22, "code": "reduce (fn [x _] (+ x 1)) 0", "user": "5801addae4b0a837a8b30c5d"}, {"problem": 22, "code": "(fn count_ [xs] (if (empty? xs) 0 (+ 1 (count_ (rest xs)))))", "user": "58110705e4b0f478707a05df"}, {"problem": 22, "code": "#(reduce (fn [a b] (inc a)) 0 %)", "user": "4f0f7339535d0136e6c2233e"}, {"problem": 22, "code": "#(loop [lst %\n        accum 0]\n   (if (empty? lst)\n     accum\n     (recur (rest lst) (inc accum))))", "user": "56f413b2e4b046a417f9205a"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "56c14d8ce4b0839206b9d684"}, {"problem": 22, "code": "reduce (fn [acc, x] (inc acc)) 0", "user": "56255e2de4b00a550fc90297"}, {"problem": 22, "code": "#(alength (into-array %))", "user": "580d7de3e4b0849f6811b73d"}, {"problem": 22, "code": "(fn ans [col]\n  (if (= nil (first col)) 0 (inc (ans (rest col)))))", "user": "58134ba8e4b0f478707a060b"}, {"problem": 22, "code": "(fn r [x]\n  (if (seq x)\n    (inc (r (rest x)))\n    0\n    )\n  )", "user": "5813a2efe4b0f478707a0614"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "58136679e4b0f478707a060d"}, {"problem": 22, "code": "(fn [s]\n  (reduce (fn [acc lst] (inc acc)) 0 s))", "user": "5813e208e4b0f478707a061b"}, {"problem": 22, "code": ";#(alength (into-array (seq %)))\n;#(alength (to-array (seq %)))\n#(inc(first (last (map-indexed vector %))))", "user": "580d7e53e4b0849f6811b73e"}, {"problem": 22, "code": "(fn hia [l]\n  (cond\n   (= '() l) 0\n   :else (+ 1 (hia (rest l)))))", "user": "58138439e4b0f478707a0611"}, {"problem": 22, "code": "#(loop [s %, c 0] (if (empty? s) c (recur (rest s) (inc c))))", "user": "5812eb8fe4b0f478707a0602"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5813a865e4b0f478707a0615"}, {"problem": 22, "code": "(fn [y] (reduce + (map (fn [x] (+ 0 1)) y)))", "user": "578682bbe4b0ebec4cfb74f9"}, {"problem": 22, "code": "(fn [x] (loop [s x n 0] (if (= s []) n (recur (rest s) (+ n 1)))))", "user": "58152157e4b0f478707a0631"}, {"problem": 22, "code": "(partial reduce #((comp inc first) %&) 0)", "user": "580c1e9ae4b0849f6811b719"}, {"problem": 22, "code": "(fn [arg]\n  (loop [content arg\n         cnt 0]\n    (if (empty? content)\n      cnt\n      (recur (rest content) (+ cnt 1)))))", "user": "581590f3e4b0f478707a063f"}, {"problem": 22, "code": "(fn [x] (reduce (fn [a b] (+ a 1)) 0 x))", "user": "5815b957e4b0f478707a0641"}, {"problem": 22, "code": "(fn count* [xs]\n    (loop [n 0 xs xs]\n      (if (or (string? xs) (coll? xs)) (recur (inc n) (next xs)) n)))", "user": "500d3160e4b05f7c30cfa6a1"}, {"problem": 22, "code": "(fn [coll] \n  ((fn [coll n] \n     (if (= coll []) \n       n \n       (recur (rest coll) (inc n))\n     )\n  ) coll 0))", "user": "58172161e4b0c0e9c07b8389"}, {"problem": 22, "code": "#(loop [l %1 n 0]\n   (if (empty? l) n\n     (recur (rest l) (inc n))))", "user": "58103a9ce4b0f478707a05cd"}, {"problem": 22, "code": "(fn [xs] (apply + (map (constantly 1) xs)))", "user": "569d2283e4b0542e1f8d1474"}, {"problem": 22, "code": "(fn [x] (apply + (map (fn [a] 1) x)))", "user": "5751bd1ce4b02ea11479928b"}, {"problem": 22, "code": "(fn [coll] (alength (object-array coll)))", "user": "58173722e4b0c0e9c07b838a"}, {"problem": 22, "code": "(fn [x](loop [x x y 0] (if (empty? x) y (recur (rest x) (inc y)))))", "user": "58186016e4b0c0e9c07b83ad"}, {"problem": 22, "code": "(fn [coll]\n  (loop [c coll acc 0]\n    (if (not(seq c))\n      acc\n      (recur (rest c) (inc acc)))))", "user": "565e21e0e4b068f2fe63dc32"}, {"problem": 22, "code": "(fn [sq] (loop [remaining sq result 0] (if (empty? remaining) result (recur (rest remaining) (inc result)))))", "user": "5818b1a6e4b0c0e9c07b83c3"}, {"problem": 22, "code": "#(reduce (fn[c _] (inc c)) 0 %)", "user": "56dcb5ade4b0ea9b8538f821"}, {"problem": 22, "code": "(fn [collection]\n  (reduce (fn [counter _] (inc counter)) 0 collection) ;\n          )", "user": "5818001ce4b0c0e9c07b83a0"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) % ))", "user": "58062dd2e4b0a837a8b30cda"}, {"problem": 22, "code": "(fn [x]\n  (let [a (seq x)\n        b (map (fn [h] 1) a)]\n    (reduce + b)))", "user": "58171a9ae4b0c0e9c07b8387"}, {"problem": 22, "code": "reduce (fn [n _] (inc n)) 0", "user": "5818908be4b0c0e9c07b83bb"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "581a1bfee4b0e114eb519ff8"}, {"problem": 22, "code": "(fn [c] (reduce (fn [n _] (inc n)) 0 c))", "user": "581a703de4b0e114eb51a005"}, {"problem": 22, "code": "(fn my-count [coll]\n  (if (empty? coll)\n    0\n    (+ 1 (my-count (rest coll)))))", "user": "57ae3345e4b0fbc9809a271e"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5816c5f5e4b0c0e9c07b8380"}, {"problem": 22, "code": "(fn itung \n  [x]\n  (if (empty? x)\n   0\n   (+ 1 (itung (rest x)))))", "user": "581829cce4b0c0e9c07b83a9"}, {"problem": 22, "code": ";#((comp inc last)(map-indexed (fn [a b] a) %))\n#(apply + (map (fn [_] 1) %))", "user": "581b19e7e4b04b46fc4b0ec4"}, {"problem": 22, "code": "(fn count-a-seq [lat]\n  (reduce (fn [x y] (+ x 1)) 0 lat))", "user": "57dc63f5e4b0bd073c202434"}, {"problem": 22, "code": "(fn [x] (reduce #(+ %1  1 #_%2) 0 x))", "user": "581a5fdbe4b0e114eb51a002"}, {"problem": 22, "code": "reduce (fn [x y] (+ x 1)) 0", "user": "581cb81ae4b04b46fc4b0efe"}, {"problem": 22, "code": "#(reduce (fn [n _] (inc n)) 0 %)", "user": "57d50c05e4b0bd073c2023a8"}, {"problem": 22, "code": "(partial reduce (fn [r e] (inc r)) 0)", "user": "57bc50c7e4b05aa3c4741c40"}, {"problem": 22, "code": "(fn count' [lis]\n   (if (empty? lis)\n     0\n     (loop [[first & rest] lis c 1]\n       (if (empty? rest)\n          c\n          (recur rest (inc c))\n       ))))", "user": "581e61b0e4b04b46fc4b0f28"}, {"problem": 22, "code": "(fn [coll]\n  (reduce (fn [prev curr] (inc prev)) 0 coll))", "user": "581eba06e4b04b46fc4b0f2e"}, {"problem": 22, "code": "(fn [s]\n  (reduce (fn [a b] (+ a 1)) 0 s))", "user": "581e8b86e4b04b46fc4b0f2b"}, {"problem": 22, "code": "(fn\n  [n]\n  (loop [i 0 n n]\n    (if (= () n)\n      i\n      (recur (inc i) (rest n)))))", "user": "581fe550e4b04b46fc4b0f4c"}, {"problem": 22, "code": "#(loop [l % x 1]\n             (if (empty? (rest l)) \n               x\n               (recur (rest l) (inc x))))", "user": "581b4d3be4b04b46fc4b0ec6"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5820924ee4b04b46fc4b0f58"}, {"problem": 22, "code": "(fn [alist]\n  (loop [xs alist total 0]\n    (if (empty? xs) total (recur (rest xs) (inc total) ))))", "user": "581f82e2e4b04b46fc4b0f41"}, {"problem": 22, "code": "(fn [x]  \n  ((fn len [x n] \n     (if (empty? x) n \n       (len (rest x) (inc n)) ) ) x 0))", "user": "5820d43be4b04b46fc4b0f64"}, {"problem": 22, "code": "#(apply + (map (constantly 1) %))", "user": "5821b018e4b04b46fc4b0f80"}, {"problem": 22, "code": "(fn count2 ([seq] (count2 0 seq)) \n  ([total seq]\n   (if (first seq)\n     (count2 (inc total) (rest seq))\n     total  )\n   ))", "user": "5804d5afe4b0a837a8b30cad"}, {"problem": 22, "code": "(fn [v]\n  (loop [v v n 0]\n    (if (empty? v)\n      n\n      (recur (rest v) (inc n)))))", "user": "5820cc33e4b04b46fc4b0f60"}, {"problem": 22, "code": "#(loop [i % cnt 0] \n   (cond (empty? i) cnt\n         :t (recur (rest i)(inc cnt))))", "user": "58224c53e4b04b46fc4b0f92"}, {"problem": 22, "code": "(fn my-count\n   ([s c]\n    (if s\n      (recur (next s) (inc c))\n      c))\n   ([s]\n    (my-count s 0)))", "user": "5808ee16e4b0a837a8b30d16"}, {"problem": 22, "code": "(fn [x]\n  (reduce (fn [sum a] (+ sum 1)) 0 x)\n)", "user": "5822d617e4b04b46fc4b0fa8"}, {"problem": 22, "code": "(fn [xs]\n  (loop [r xs acc 0]\n    (if (empty? r) acc\n    (recur (rest r) (+ acc 1)))))", "user": "581c4ab4e4b04b46fc4b0eea"}, {"problem": 22, "code": "#(reduce (fn [acc y] (+ acc 1)) 0 %1)", "user": "58225587e4b04b46fc4b0f94"}, {"problem": 22, "code": "#(reduce (fn [a b] (+ 1 a)) 0 %)", "user": "5823f3d4e4b051871117bebc"}, {"problem": 22, "code": "(fn [a-seq]\n  (loop [s a-seq n 0]\n    (if (empty? s)\n      n\n      (recur (rest s) (inc n)))))", "user": "58217fbde4b04b46fc4b0f78"}, {"problem": 22, "code": "#(if (string? %1) (.length %1) (.size %1))", "user": "5823d3e6e4b051871117beb8"}, {"problem": 22, "code": "(fn [coll] (loop [coll coll c 0] \n             (if (empty? coll)\n               c\n               (recur (rest coll) (inc c)))))", "user": "581dad0ae4b04b46fc4b0f17"}, {"problem": 22, "code": "#(reduce (fn [counter _] (inc counter)) 0 %)", "user": "58247423e4b051871117bec5"}, {"problem": 22, "code": "(fn bla [initial-list] (loop [lst initial-list i 0] (if (empty? lst) i (recur (drop 1 lst) (inc i)))))", "user": "58248186e4b051871117bec6"}, {"problem": 22, "code": "reduce (fn [total x] (inc total)) 0", "user": "5823c717e4b051871117beb2"}, {"problem": 22, "code": "#(loop [x 0\n            col %]\n       (if (empty? col)\n           x\n           (recur (inc x)\n                  (rest col))))", "user": "56f68677e4b08e7d20b96826"}, {"problem": 22, "code": "reduce (fn [s _](inc s)) 0", "user": "552f6e8ee4b076ab5578f802"}, {"problem": 22, "code": "(fn [xs] \n  (reduce \n   #(+ (first %&) 1) 0 xs))", "user": "578df8fee4b0ebec4cfb7574"}, {"problem": 22, "code": "#(loop [nums %\n        length 0]\n   (if (empty? nums)\n     length\n     (recur (rest nums) (inc length))))", "user": "5820cca0e4b04b46fc4b0f62"}, {"problem": 22, "code": "(fn [x] (reduce + 0 (map (fn [_] 1) x)))", "user": "58254a11e4b051871117bed9"}, {"problem": 22, "code": "#(loop [c 0] \n   (if (empty? (drop c %))\n   \tc\n   \t(recur (inc c))))", "user": "58261488e4b051871117beee"}, {"problem": 22, "code": "#(reduce (fn [acc x]\n                  (inc acc))\n              0 %)", "user": "524dacc9e4b0a16e35cf6df8"}, {"problem": 22, "code": "(fn [l] ((fn f [l n] (if (empty? l) n (f (rest l) (+ n 1)))) l 0))", "user": "5826ed1fe4b051871117bf0e"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5787d6ece4b0ebec4cfb750f"}, {"problem": 22, "code": "#(reduce (fn [acc _] (inc acc)) 0 (seq %))", "user": "4f213e2ee4b0d66497709fcf"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "582089fbe4b04b46fc4b0f57"}, {"problem": 22, "code": "(fn [x] (reduce (fn [a b] (+ a 1)) 0 x))", "user": "582835cbe4b051871117bf30"}, {"problem": 22, "code": "reduce (fn [v _] (inc v)) 0", "user": "5829bc55e4b051871117bf49"}, {"problem": 22, "code": "reduce (fn[x y] (inc x)) 0", "user": "581a66b1e4b0e114eb51a003"}, {"problem": 22, "code": "#(let [v (into [] %)]\n   (inc (.lastIndexOf v (last v)))\n   )", "user": "57cec4ade4b0c746388ab8b1"}, {"problem": 22, "code": "(fn [coll] (reduce (fn [v _] (inc v) ) 0 coll))", "user": "58280f02e4b051871117bf2e"}, {"problem": 22, "code": "(fn [s]\n  (reduce (fn [x y] (inc x)) 0 s))", "user": "5829d588e4b051871117bf4a"}, {"problem": 22, "code": "#(reduce + (map (fn [_] 1) %))", "user": "582b368fe4b051871117bf6d"}, {"problem": 22, "code": "(fn\n  [list]\n  (reduce + (map (fn [x] 1) list)))", "user": "582bd5fae4b051871117bf7b"}, {"problem": 22, "code": "#(alength (into-array (seq %)))", "user": "5822e082e4b04b46fc4b0fa9"}, {"problem": 22, "code": "(fn [coll]\n  (reduce + (map (constantly 1) coll)))", "user": "57089f82e4b0b0fb43fd06a2"}, {"problem": 22, "code": "#(loop [result 0 c %]\n    (if(empty? c) result\n    (recur (inc result) (rest c))))", "user": "582c9840e4b051871117bf94"}, {"problem": 22, "code": "#(loop [i 0 pseq %1] (if (empty? pseq) i (recur (inc i) (rest pseq))))", "user": "57320c8de4b0cd1946bd0fce"}, {"problem": 22, "code": "(fn [sq] \n\t(\n\t\t(fn [sq_pop result] \n\t\t\t(if (empty? sq_pop) \n\t\t\t\tresult\n\t\t\t\t(recur (rest sq_pop) (+ result 1))\n\t\t\t)\n\t\t) \n\t\tsq 0)\n)", "user": "5820cc61e4b04b46fc4b0f61"}, {"problem": 22, "code": "#(reduce (fn [a b] (+ a 1)) 0 %)", "user": "529f9bf2e4b04e0c58e87bb4"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "582d1890e4b051871117bfb1"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "582c526ae4b051871117bf88"}, {"problem": 22, "code": "(fn [coll] (apply + (map (fn [x] 1) coll)))", "user": "581b8938e4b04b46fc4b0ed2"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "58299e03e4b051871117bf46"}, {"problem": 22, "code": "(fn count-this \n  ([list] (count-this list 0))\n  ([list n]\n   (if (seq list)\n     (count-this (rest list) (+ n 1))\n     n)))", "user": "57ee88bbe4b0bfb2137f5bbe"}, {"problem": 22, "code": "(fn [seq] (+ 1 ((last (map-indexed vector seq)) 0)))", "user": "57e41d99e4b0bfb2137f5ab5"}, {"problem": 22, "code": "(fn\n  counter\n  ([coll]\n   (counter coll 0))\n  ([coll n]\n   (if (empty? coll)\n     n\n     (recur (next coll) (+ n 1)))))", "user": "582625d3e4b051871117bef2"}, {"problem": 22, "code": "(fn [x coll]\n   (if (empty? coll)\n     x\n     (recur (inc x) (rest coll)))) 0", "user": "582290b5e4b04b46fc4b0fa0"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "581974d9e4b0e114eb519fd6"}, {"problem": 22, "code": "#(reduce\n  (fn [a b] (+ a 1))\n  0\n  %)", "user": "582fd406e4b051871117bff9"}, {"problem": 22, "code": "(fn [coll] (loop [coll coll c 0] \n             (if (empty? coll) c \n               (recur (rest coll) (inc c)))))", "user": "55632016e4b0c656e3ff17e4"}, {"problem": 22, "code": "(fn [s] \n  (loop [x s acc 0]\n  \t(if (= (first x) 'nil)\n    \tacc\n    (recur (rest x) (+ acc 1))           \n      )\n    )\n  )", "user": "583048d9e4b051871117c007"}, {"problem": 22, "code": "(fn [s] (reduce (fn [n _] (inc n)) 0 s))", "user": "582dc562e4b051871117bfcb"}, {"problem": 22, "code": "(fn [my-seq]\n  (loop [x my-seq\n         i 1]\n    (if (next x) (recur (next x) (inc i)) i)))", "user": "58303fc3e4b051871117c006"}, {"problem": 22, "code": "#(reduce(fn[a b](inc a))0 %)", "user": "5830cfe6e4b051871117c016"}, {"problem": 22, "code": "(fn [xs]\n  (loop [tail (seq xs) cntr 0]\n    (if (empty? tail)\n      cntr\n      (recur (rest tail) (inc cntr)))))", "user": "58327a08e4b089d5ab817c7c"}, {"problem": 22, "code": "(fn [coll]\n  (let [f (fn [coll n]\n           (if-not (empty? coll)\n             (recur (rest coll) (+ n 1))\n             n))]\n    (f coll 0)))", "user": "58328117e4b089d5ab817c7d"}, {"problem": 22, "code": "(fn mycount [x]\n  (if (empty? (rest x))\n    1\n    (inc (mycount (rest x)))))", "user": "582589b2e4b051871117bedd"}, {"problem": 22, "code": "#(loop [s % n 0] (if (empty? s) n (recur (rest s) (inc n))))", "user": "56c9693be4b0ed865f9758dd"}, {"problem": 22, "code": "(fn [y coll]\n   (if (empty? coll)\n     y\n     (recur (inc y) (rest coll))))\n  0", "user": "582a6a85e4b051871117bf5d"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "57bc4d2fe4b05aa3c4741c3f"}, {"problem": 22, "code": "(fn count' [x] (if (empty? x) 0 (+ 1 (count' (rest x)))))", "user": "58333b19e4b089d5ab817c94"}, {"problem": 22, "code": "(fn [coll] (reduce + (map (fn [x] 1) coll)))", "user": "583166c1e4b051871117c025"}, {"problem": 22, "code": "(fn stetje [x] (loop [dol 0, sez x] (if (empty? sez) dol (recur (inc dol) (rest sez)))))", "user": "5833a6d8e4b089d5ab817ca2"}, {"problem": 22, "code": "(fn t[x] (if (next x) (+ 1 (t (rest x))) 1))", "user": "583019b8e4b051871117bfff"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "58335c22e4b089d5ab817c9a"}, {"problem": 22, "code": "reduce (fn [x y] (+ 1 x)) 0", "user": "58334d18e4b089d5ab817c97"}, {"problem": 22, "code": "#(loop [coll % ct 0] (if (empty? coll) ct (recur (rest coll) (inc ct) )))", "user": "5833455ee4b089d5ab817c95"}, {"problem": 22, "code": "#(loop [counter 0\n        loop-seq %]\n   (if (empty? loop-seq) counter\n     (recur (inc counter) (rest loop-seq))))", "user": "570ad386e4b0b0fb43fd06b9"}, {"problem": 22, "code": "(fn my-count [s]\n  (loop [s s\n         n 0]\n    (if (empty? s)\n      n\n      (recur (rest s) (inc n)))))", "user": "582a5174e4b051871117bf59"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "58354124e4b089d5ab817cd6"}, {"problem": 22, "code": "(fn [col] (reduce \n      (fn [x y] (inc x) )    \n           0 col))", "user": "57dfe173e4b0bd073c20246b"}, {"problem": 22, "code": "#(apply + (map (fn [x] 1) %1))", "user": "5835a222e4b089d5ab817ce5"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "5835cb06e4b089d5ab817cea"}, {"problem": 22, "code": "(fn [x]\n  (loop [mx x cnt 0]\n    (if (seq mx) (recur (rest mx) (inc cnt)) cnt)))", "user": "5835bc73e4b089d5ab817ce9"}, {"problem": 22, "code": "(fn [coll]\n  (loop [acc 0\n         coll coll]\n    (if (empty? coll)\n      acc\n      (recur (inc acc) (rest coll)))))", "user": "55a12cb1e4b0acc240e3150d"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5836a247e4b089d5ab817cfe"}, {"problem": 22, "code": "(fn [coll] (if (empty? coll)\n             0\n             (loop [c 1 [fst & rst] coll]\n             \t(if (empty? rst)\n               \t\tc\n               \t\t(recur (inc c) rst)))))", "user": "5836bc20e4b089d5ab817d03"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "58375635e4b089d5ab817d14"}, {"problem": 22, "code": "#(-> (loop [data %1  amt 0] (if (empty? data) amt (recur (rest data) (inc amt)))))", "user": "5832be57e4b089d5ab817c86"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "58378f8ce4b089d5ab817d1b"}, {"problem": 22, "code": "(fn [lat]\n  (reduce (fn [x y] (+ x 1)) 0 lat))", "user": "58376b71e4b089d5ab817d18"}, {"problem": 22, "code": "(fn cnt [sq]\n  (if (empty? sq)\n    0\n    (+ 1 (cnt (rest sq)))\n    )\n  )", "user": "580f9585e4b0f478707a05b5"}, {"problem": 22, "code": "#(reduce \n  (fn [x, _] (inc x)) 0 %)", "user": "5835f3ace4b089d5ab817cf0"}, {"problem": 22, "code": "(fn [lst]\n  (let [lst-prime (fn [lst acc] (if (empty? lst) acc (recur (rest lst) (inc acc))))]\n    (lst-prime lst 0)))", "user": "5838337de4b089d5ab817d24"}, {"problem": 22, "code": "(fn [lst] (reduce + (map (fn [el] 1) lst)))", "user": "582d7569e4b051871117bfbe"}, {"problem": 22, "code": "(fn [l]\n  (\n   (fn [[h & r] i]\n    (if (nil? h)\n      i\n      (recur r (inc i))))\n   l 0))", "user": "58384bc4e4b089d5ab817d27"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "57f17cb5e4b0bfb2137f5c0b"}, {"problem": 22, "code": "(fn c [x] \n  (loop [n 0 x x]\n    (if (empty? x)\n      n\n      (recur (+ 1 n) (rest x)))))", "user": "5839f079e4b089d5ab817d48"}, {"problem": 22, "code": "(fn [coll]\n  (loop [coll coll cnt 0]\n    (if (empty? coll) \n      cnt\n      (recur (rest coll) (inc cnt))\n      )\n    \n    )\n  \n  )", "user": "583667c7e4b089d5ab817cfb"}, {"problem": 22, "code": "(comp (partial apply +) (partial map (constantly 1)))", "user": "583a360de4b089d5ab817d4f"}, {"problem": 22, "code": "(fn [x]\n  ((fn cnt[x y]\n    (if \n      (= (first x) nil)\n      y\n      (cnt (rest x) (+ y 1))\n    )\n   ) x 0)\n)", "user": "5838d5ede4b089d5ab817d32"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "58391c94e4b089d5ab817d35"}, {"problem": 22, "code": "reduce (fn [x y] (+ x 1)) 0", "user": "579386bbe4b0e215f87e8459"}, {"problem": 22, "code": "reduce (fn [x y] (+ x 1)) 0", "user": "583b5eaae4b089d5ab817d6c"}, {"problem": 22, "code": "(fn[x coll]\n    (if(empty? coll)\n      x\n      (recur(inc x)(rest coll))))0", "user": "5822ccd0e4b04b46fc4b0fa7"}, {"problem": 22, "code": "#(.size (vec %))", "user": "583b9982e4b089d5ab817d71"}, {"problem": 22, "code": "(fn cnt\n  ([data]\n   (cnt data 0))\n  ([data c]\n   (if (empty? data) c\n    (cnt (rest data) (+ c 1)))))", "user": "582cbf48e4b051871117bfa6"}, {"problem": 22, "code": "(let [real #(if (= %1 ())\n              %2\n              (recur (rest %1) (inc %2)))]\n  #(real %1 0))", "user": "583d7508e4b089d5ab817d9b"}, {"problem": 22, "code": "reduce (fn [num _] (+ 1 num)) 0", "user": "56e0f485e4b03a7c14b85a1c"}, {"problem": 22, "code": "#(loop [x % y 0] (if (= () x) y (recur (rest x) (inc y))))", "user": "583c8bd4e4b089d5ab817d81"}, {"problem": 22, "code": "#(loop [s % i 0] (if (empty? s) i (recur (rest s) (inc i))))", "user": "57235dc4e4b0c5bde472c0e2"}, {"problem": 22, "code": "#(apply + (map (constantly 1) %))", "user": "583e27e2e4b089d5ab817daa"}, {"problem": 22, "code": "#(loop [collec % cnt 0]\n   (cond \n    (empty? collec) cnt\n    :else (recur (rest collec) (inc cnt))))", "user": "583e02fce4b089d5ab817da5"}, {"problem": 22, "code": "(fn myfun [x] (if (empty? x) 0 (inc (myfun (rest x)))))", "user": "58262917e4b051871117bef3"}, {"problem": 22, "code": "#(reduce (fn [i coll] (inc i)) 0 %)", "user": "583f2e4de4b089d5ab817dcb"}, {"problem": 22, "code": "#(reduce (fn[a b] (inc a)) 0 %)", "user": "583eee03e4b089d5ab817dc3"}, {"problem": 22, "code": "(fn [x] (inc (get (last (map-indexed vector x)) 0)))", "user": "581a8cc3e4b0e114eb51a00b"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "583e7f55e4b089d5ab817dba"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "583585f7e4b089d5ab817ce0"}, {"problem": 22, "code": "(partial reduce (fn [acc n] (inc acc)) 0)", "user": "583f0b82e4b089d5ab817dc6"}, {"problem": 22, "code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "583ff3afe4b089d5ab817dda"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "57c41471e4b05aa3c4741cc7"}, {"problem": 22, "code": "reduce (fn [x, y] (+ x 1)) 0", "user": "583e1558e4b089d5ab817da9"}, {"problem": 22, "code": "(fn [data]\n\t(reduce (fn [a b] (inc a)) 0 data))", "user": "58409e47e4b089d5ab817dee"}, {"problem": 22, "code": "#(alength (to-array %))", "user": "58408643e4b089d5ab817deb"}, {"problem": 22, "code": "#(loop [col % c 0]\n   (if (empty? col)\n     c\n     (recur (rest col) (inc c))))", "user": "584181c0e4b089d5ab817e04"}, {"problem": 22, "code": "(fn [se] (inc (last (flatten (map vector se (range))))))", "user": "5686b0c0e4b0dcc4269f4056"}, {"problem": 22, "code": "(fn [v] (reduce (fn [x y] (inc x)) 0 v))", "user": "583aaf5ee4b089d5ab817d5b"}, {"problem": 22, "code": "#(reduce + (map(constantly 1) %))", "user": "57bf5f49e4b05aa3c4741c7b"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "576ffcb9e4b0979f89651592"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "5843b231e4b089d5ab817e3d"}, {"problem": 22, "code": "(fn \n  [seq]\n  (reduce (fn [c _]\n            (inc c))\n          0\n          seq))", "user": "5844e6f4e4b089d5ab817e5a"}, {"problem": 22, "code": "(fn [arg] (reduce + (map (fn [arg] 1) arg)))", "user": "5804b491e4b0a837a8b30cac"}, {"problem": 22, "code": "(fn my-count [col] ((fn in-count [col counter] (if (empty? col) counter (in-count (rest col) (+ counter 1)))) col 0))", "user": "5845720de4b089d5ab817e68"}, {"problem": 22, "code": "reduce (fn [acc _] (inc acc)) 0", "user": "584278e1e4b089d5ab817e19"}, {"problem": 22, "code": "(fn [coll1]\n  (loop [coll coll1, ret 0]\n    (if (empty? coll)\n      ret\n      (recur (drop 1 coll) (inc ret)))))", "user": "57a8eec7e4b0a96607956226"}, {"problem": 22, "code": "(fn [s]\n  (reduce (fn [acc curr] (inc acc)) 0 s))", "user": "58461304e4b089d5ab817e81"}, {"problem": 22, "code": "#(reduce + (map (fn [a] 1) %))", "user": "58467633e4b089d5ab817e90"}, {"problem": 22, "code": "(fn [l]\n        (loop [xs l acc 0]\n                (if (empty? xs)\n                        acc  \n                        (recur (rest xs) (+ 1 acc))\n                )\n        )\n)", "user": "583dacc2e4b089d5ab817d9f"}, {"problem": 22, "code": "(fn [x]\n  (reduce \n   (fn [x y] (inc x)) 0\n   x)\n)", "user": "5845e080e4b089d5ab817e7a"}, {"problem": 22, "code": "(fn [sq] (reduce (fn [ctr sq] (inc ctr)) 0 sq))", "user": "5846e925e4b089d5ab817e9d"}, {"problem": 22, "code": "(fn count-a-sequence-solution\n [collection]\n (loop[result 0 coll collection]\n   (if (empty? coll) result\n     (recur (inc result) (rest coll)))))", "user": "58445c3ce4b089d5ab817e49"}, {"problem": 22, "code": "#(loop [[f & l] % c 1]\n   (if (nil? l) c\n     (recur l (inc c)\n            )))", "user": "5842d06be4b089d5ab817e22"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "564ba493e4b0284900eef669"}, {"problem": 22, "code": "(fn mycount [xs] (\n  if (empty? xs)\n    0\n    (+ 1 (mycount (rest xs)))))", "user": "580b216fe4b0a837a8b30d45"}, {"problem": 22, "code": "(fn [lst]\n  (loop [i lst cnt 0]\n   (cond (empty? i) cnt\n     :t (recur (rest i)(inc cnt)))))", "user": "5840c068e4b089d5ab817df8"}, {"problem": 22, "code": "#(loop [seq %\n         counter 0]\n    (if (empty? seq)\n      counter\n      (recur (rest seq) (inc counter))))", "user": "577d02a6e4b0c8d87281f6cb"}, {"problem": 22, "code": "reduce (fn [val _] (+ 1 val)) 0", "user": "584917a1e4b089d5ab817ec9"}, {"problem": 22, "code": "(fn my-array [x] (alength (into-array x)))", "user": "582f63e5e4b051871117bfef"}, {"problem": 22, "code": "(fn c[seqq] (reduce + (map #(and % 1) seqq)))", "user": "5849ac5fe4b089d5ab817ed7"}, {"problem": 22, "code": "(fn counter\n  ([xs]\n   (counter xs 0))\n  ([xs c]\n   (if\n     (empty? xs)\n     c\n     (recur (rest xs) (inc c)))))", "user": "58488249e4b089d5ab817ec1"}, {"problem": 22, "code": "(fn [seqn]\n  (loop [i 0\n         loopseqn seqn]\n    (if (first loopseqn)\n      (recur (inc i) (rest loopseqn))\n      i)))", "user": "584574a1e4b089d5ab817e69"}, {"problem": 22, "code": "(fn [c] (loop [re c n 0] (if (empty? re) n (recur (rest re) (inc n)))))", "user": "584a44e6e4b089d5ab817ee3"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "58499945e4b089d5ab817ed4"}, {"problem": 22, "code": "#(loop [s %\n          c 0]\n    (if (empty? s)\n      c\n      (recur (rest s) (inc c))))", "user": "579aff09e4b05b1deef9ade7"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5846ae22e4b089d5ab817e99"}, {"problem": 22, "code": "#(loop [x 0 y %]\n(if (empty? y)\nx\n(recur (inc x) (rest y))))", "user": "583f23dce4b089d5ab817dc9"}, {"problem": 22, "code": "(fn\n  [a]\n\t(reduce (fn [total _] (inc total))\n    \t    0\n        \ta))", "user": "55a5e2f7e4b0acc240e31550"}, {"problem": 22, "code": "#(reduce  (fn [n _] (inc n)) 0 %)", "user": "583c4482e4b089d5ab817d7e"}, {"problem": 22, "code": "(let [count2 (fn [x i] (if (empty? x) i (recur (rest x) (inc i))))] #(count2 % 0))", "user": "584dadebe4b0b7285a6f4e44"}, {"problem": 22, "code": "#(reduce (fn [pre cur] (+ 1 pre)) 0 % )", "user": "58351337e4b089d5ab817cd1"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "584eee7ee4b0b7285a6f4e58"}, {"problem": 22, "code": "(fn [l] \n  (loop [v l n 0] \n    (if (empty? v)\n      n\n      (recur (rest v) (inc n)))))", "user": "561bbac1e4b064ca9f4b1687"}, {"problem": 22, "code": "#(reduce (fn [idx value] (inc idx)) 0 %)", "user": "584cc92be4b0b7285a6f4e2b"}, {"problem": 22, "code": "#(reduce\n  (fn [c _] (inc c))\n  0 %)", "user": "584b6a2be4b089d5ab817efd"}, {"problem": 22, "code": "reduce (fn [acc _] (inc acc)) 0", "user": "584ad64ce4b089d5ab817eef"}, {"problem": 22, "code": "(fn my-count [lst]\n\t(loop [cnt 0 tail lst]\n    \t(if (empty? tail)\n        \tcnt\n        \t(recur (inc cnt) (rest tail))\n        )\n    )\n)", "user": "569e3175e4b0542e1f8d1484"}, {"problem": 22, "code": "(fn [coll]\n  (reduce + (map (fn [x] 1) coll)))", "user": "574d0574e4b02ea114799227"}, {"problem": 22, "code": "(fn my-count [coll]\n  ((fn counter [coll len]\n    (if (= (first coll) nil)\n      len\n      (counter (rest coll) (inc len)))) coll 0))", "user": "584f1397e4b0b7285a6f4e5e"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5851d179e4b0b7285a6f4e9d"}, {"problem": 22, "code": "#(reduce (fn [n _] (inc n)) 0 %)", "user": "5851ccede4b0b7285a6f4e9c"}, {"problem": 22, "code": "(fn [s]\n  (reduce (fn [c _] (inc c)) 0 s))", "user": "57233cc8e4b0c5bde472c0e1"}, {"problem": 22, "code": "(fn [x] (reduce + (map (constantly 1) x) ))", "user": "5852801ee4b0b7285a6f4eb1"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5852bfc8e4b0b7285a6f4eb6"}, {"problem": 22, "code": "#(reduce + (map (fn [coll] 1) %))", "user": "56f9b953e4b07572ad1a88b9"}, {"problem": 22, "code": "#(loop [coll %\n        total 0]\n   (if (empty? coll)\n     total\n     (recur (rest coll) (inc total) )))", "user": "58524875e4b0b7285a6f4ead"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5853582fe4b0b7285a6f4ec5"}, {"problem": 22, "code": "(fn count* [coll]\n  (if (empty? coll) \n    0\n    (inc (count* (rest coll)))))", "user": "55c3f0c6e4b0e31453f64990"}, {"problem": 22, "code": "(fn [s]\n  (loop [l s\n         c 0]\n    (if (empty? l)\n      c\n      (recur (rest l) (inc c)))))", "user": "58543a59e4b07779d46863f5"}, {"problem": 22, "code": "#(reduce (fn [x _] (inc x)) 0 %)", "user": "5854d1c0e4b07779d468640a"}, {"problem": 22, "code": "(fn size \n  ([s] (size s 0))\n  ([[s1 & others] c]\n   (if (nil? s1)\n     c\n     (size others (+ 1 c)))))", "user": "5855268be4b07779d4686410"}, {"problem": 22, "code": "#(apply + (map (fn [x] 1) %))", "user": "5854580ce4b07779d46863f9"}, {"problem": 22, "code": "(fn [s] \n  (loop [ss s\n         cnt 0]\n    (if (empty? ss)\n      cnt\n      (recur (rest ss) (inc cnt)))))", "user": "5855aec8e4b0f14aab7c86df"}, {"problem": 22, "code": "(fn [seqs] (reduce (fn [x y] (inc x)) 0 seqs))", "user": "58561854e4b0f14aab7c86e9"}, {"problem": 22, "code": "(fn [sequ] \n  (loop [s sequ size 0]\n    (if (empty? s) size\n      (recur (rest s)(inc size)))))", "user": "584f5133e4b0b7285a6f4e61"}, {"problem": 22, "code": "(fn [seq] (apply + (vec (map (fn [i] 1) seq))))", "user": "585669d6e4b0f14aab7c86f3"}, {"problem": 22, "code": "(fn [a] \n   (loop [a a\n          i 0]\n     (if (empty? a)\n       i\n       (recur (rest a) (inc i)))))", "user": "58455b05e4b089d5ab817e65"}, {"problem": 22, "code": "(fn [x] (reduce (fn [acc,y]  (inc acc)) 0 x))", "user": "5856cdd6e4b0f14aab7c86fa"}, {"problem": 22, "code": ";#(loop [cnt 0 \n;        s %]\n;  (if (empty? s)\n;    cnt\n;    (recur (inc cnt) (rest s))))\n#(reduce + (map (fn[_] 1) %))", "user": "58566b42e4b0f14aab7c86f4"}, {"problem": 22, "code": "(fn length [mycol] \n  (if (empty? mycol) 0 (inc (length (rest mycol)))))", "user": "585481e0e4b07779d46863fe"}, {"problem": 22, "code": "(fn count1 [xs] (if (empty? xs) 0 (+ 1 (count1 (rest xs)))))", "user": "5856980de4b0f14aab7c86f7"}, {"problem": 22, "code": "(fn counter [lst] (if (= [] lst) 0 (+ 1 (counter (rest lst)))))", "user": "57af3510e4b0fbc9809a272d"}, {"problem": 22, "code": "reduce (fn[c v] (inc c)) 0", "user": "56b1b59be4b0982f16b37df2"}, {"problem": 22, "code": "(fn [col] (apply + (map (fn [x] 1) col)))", "user": "5766fbb7e4b0a07e8fc180b6"}, {"problem": 22, "code": "#(+ 1(.lastIndexOf (into [] %) (last %)))", "user": "583d669ee4b089d5ab817d9a"}, {"problem": 22, "code": "(fn [s] (apply + (map (fn [e] 1) s)))", "user": "585030cbe4b0b7285a6f4e78"}, {"problem": 22, "code": "(fn [x] \n  (loop [e x c 0] \n    (if (empty? e) \n      c \n      (recur (rest e) (+ 1 c))\n     )\n  )\n)", "user": "584d8724e4b0b7285a6f4e3e"}, {"problem": 22, "code": "(fn my-count [s]\n   (if (empty? s) 0 (inc (my-count (rest s)))))", "user": "5859046ee4b0f14aab7c8729"}, {"problem": 22, "code": "#(reduce + (map (fn [x] (if (nil? x) 0 1)) %))", "user": "5858f0cce4b0f14aab7c8727"}, {"problem": 22, "code": "(fn [coll] (loop [new-coll coll i 0] (if (empty? new-coll) i (recur (rest new-coll) (inc i)))))", "user": "58562083e4b0f14aab7c86eb"}, {"problem": 22, "code": "#(reduce (fn [total _] (+ total 1)) 0 %)", "user": "5851b51be4b0b7285a6f4e99"}, {"problem": 22, "code": "#(inc (first (last (map-indexed vector % ))))", "user": "56f0714de4b04a395b9a0479"}, {"problem": 22, "code": "(fn [coll]\n  (reduce \n   (fn [a b] \n     (+ a 1)) (conj \n               (into \n                (list)\n                coll)\n               0)))", "user": "58582dade4b0f14aab7c8713"}, {"problem": 22, "code": "reduce (fn [sum item] (+ sum 1)) 0", "user": "585a6db4e4b0f14aab7c874c"}, {"problem": 22, "code": "(fn countItems [coll] (reduce (fn [x y] (+ x 1)) 0 coll))", "user": "58597562e4b0f14aab7c8734"}, {"problem": 22, "code": "(fn my-count [x]\n  (if (seq x)\n    (+ 1 (my-count (rest x)))\n    0))", "user": "585a7b05e4b0f14aab7c874d"}, {"problem": 22, "code": "#(reduce (fn [v i] (+ 1 v)) 0 %)", "user": "585a66c2e4b0f14aab7c874b"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "585a9a16e4b0f14aab7c8752"}, {"problem": 22, "code": "(fn [xs]\n  (->> xs\n       (map (constantly 1) )\n       (reduce +)\n  )\n)", "user": "57ea4569e4b0bfb2137f5b46"}, {"problem": 22, "code": "#(loop [input-list %1 cnt 0] \n(if (empty? input-list)\ncnt\n(recur (rest input-list) (inc cnt))))", "user": "585ad75be4b0f14aab7c8756"}, {"problem": 22, "code": "(fn [seq] (reduce \n            (fn[c _] (inc c))\n            0\n            seq))", "user": "582a2d4fe4b051871117bf55"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "585c5b21e4b0f14aab7c8786"}, {"problem": 22, "code": "reduce (fn [acc _](inc acc)) 0", "user": "566e87cfe4b0a866af6896dc"}, {"problem": 22, "code": "(fn [x] (apply + (map (fn [elem] 1) x) ) )", "user": "585bcd51e4b0f14aab7c8771"}, {"problem": 22, "code": "(fn [x] ((fn [l,x1] (if (next x1) (recur (inc l) (rest x1)) l) ) 1 x))", "user": "585d40afe4b0f14aab7c8798"}, {"problem": 22, "code": "(fn toto [x] (if (= x '()) 0 (+ 1 (toto (rest x)))))", "user": "585dc682e4b0f14aab7c87a0"}, {"problem": 22, "code": "#(loop [lst %\n        cnt 0]\n   (if (empty? lst)\n     cnt\n     (recur (rest lst) (inc cnt))))", "user": "585e2e77e4b0f14aab7c87ac"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "57d0e185e4b0bd073c202360"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %1))", "user": "585d2c1fe4b0f14aab7c8797"}, {"problem": 22, "code": "#(+ (first (last (map-indexed vector %1))) 1)", "user": "585e5377e4b0f14aab7c87b0"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %1))", "user": "585ea1dde4b0f14aab7c87b9"}, {"problem": 22, "code": "#(reduce (fn [acc el] (inc acc)) 0 %)", "user": "585e6aabe4b0f14aab7c87b1"}, {"problem": 22, "code": "reduce (fn [a b] (inc a)) 0", "user": "5803fd7fe4b0a837a8b30c9c"}, {"problem": 22, "code": "#(reduce (fn [c x]\n                (inc c))\n                    0\n                    %)", "user": "585dbe41e4b0f14aab7c879f"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "511aa6f5e4b0c87c59c9670c"}, {"problem": 22, "code": "(fn [s]\n  (loop [r s, i 0]\n    (if (empty? r)\n        i\n        (recur (rest r) (inc i)))))", "user": "58606948e4b0f14aab7c87d5"}, {"problem": 22, "code": "#(alength (to-array %))", "user": "5860c936e4b0f14aab7c87dc"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "585ea250e4b0f14aab7c87ba"}, {"problem": 22, "code": "(fn conte [lista] (if \n                   (= lista '())\n                   0\n                   (+ 1 (conte (drop 1 lista)))\n                  )\n  )", "user": "5860e5ffe4b0f14aab7c87e0"}, {"problem": 22, "code": "#(loop [coll % sum 0]\n  (if (empty? coll)\n  sum\n  (recur (rest coll) (inc sum))))", "user": "53492ae6e4b084c2834f4a5f"}, {"problem": 22, "code": "(fn [s] (reduce (fn [i j] (if j (inc i) (if i i 0))) 0 s))", "user": "5861cbd0e4b0f14aab7c87fb"}, {"problem": 22, "code": "(fn [c]\n  (loop [coll c\n         acc 0]\n    (if (empty? coll)\n      acc\n      (recur (rest coll) (inc acc)))))", "user": "4e586949535d8a8b8723a292"}, {"problem": 22, "code": "(fn ncount [l] (if (= (rest l) ()) 1 (+ 1 (ncount (rest l)))))", "user": "585e7c60e4b0f14aab7c87b3"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "58617a1fe4b0f14aab7c87f0"}, {"problem": 22, "code": "#(apply + (map (fn [_] 1) %))", "user": "585d9558e4b0f14aab7c879c"}, {"problem": 22, "code": "#(reduce +(map(fn f [e] 1)%))", "user": "58622733e4b0f14aab7c8803"}, {"problem": 22, "code": "#(reduce (fn [x y] (+ x 1)) 0 %)", "user": "57c33eeae4b05aa3c4741cbc"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "585c16c3e4b0f14aab7c877d"}, {"problem": 22, "code": "(fn [x](reduce (fn [a b] (+ a 1)) 0 x))", "user": "586243f1e4b0f14aab7c8807"}, {"problem": 22, "code": "#(loop [s % c 0] (if (first s) (recur (rest s) (inc c)) c))", "user": "58626d0be4b0f14aab7c880a"}, {"problem": 22, "code": "(fn my-count [sequence] \n  ((fn my-count-inner [sequence result] \n     (if (= '() sequence) \n       result \n       (my-count-inner (rest sequence) (+ result 1))))  \n   sequence 0))", "user": "58637f03e4b0f14aab7c881e"}, {"problem": 22, "code": "#(reduce + 0 (map (fn [x] 1) %))", "user": "5862a7a4e4b0f14aab7c880e"}, {"problem": 22, "code": "(fn [l] (reduce + 0 (map (fn [x] 1) l)))", "user": "58638adae4b0f14aab7c8823"}, {"problem": 22, "code": "(fn [l] (reduce (fn [x,y] (inc x)) 0 l))", "user": "58633954e4b0f14aab7c8819"}, {"problem": 22, "code": "reduce #(or (+ % 1) %2) 0", "user": "5857d27de4b0f14aab7c8710"}, {"problem": 22, "code": "(fn count-elements [sequence] (if (empty? sequence) 0 (+ 1 (count-elements (rest sequence)))))", "user": "52ade380e4b0c58976d9ac9b"}, {"problem": 22, "code": "#(reduce (fn[x y](inc x)) 0 %)", "user": "5863f422e4b0f14aab7c8837"}, {"problem": 22, "code": "(fn [a-seq] (reduce (fn [cnt el] (inc cnt)) 0 a-seq))", "user": "580d2788e4b0849f6811b730"}, {"problem": 22, "code": "(fn [coll]\n  (loop [i 0 r coll]\n    (if (first r)\n      (recur (inc i) (next r))\n      i)))", "user": "547bf82de4b0c51c1f4d72e1"}, {"problem": 22, "code": "(fn [input] (reduce (fn [one two] (+ one 1)) 0 input))", "user": "5220def1e4b0e6a83c8925b4"}, {"problem": 22, "code": "(fn [c]\n                                  (loop [[f & r] c n 0]\n                                    (if-not f\n                                      n\n                                      (if (empty? r)\n                                        (inc n)\n                                        (recur r (inc n))))))", "user": "586615e6e4b0f14aab7c8858"}, {"problem": 22, "code": "(fn [n]\n        (loop [l n\n               i 0]\n          (if (empty? l)\n            i\n            (recur (drop 1 l) (+ i 1)))))", "user": "58663964e4b0f14aab7c885c"}, {"problem": 22, "code": "#(loop [x 0] (if (nil? (nth % x nil)) x (recur (inc x))))", "user": "58631579e4b0f14aab7c8817"}, {"problem": 22, "code": "(fn mcount\n  ([c s] (if (empty? s) c (+ c (mcount 1 (rest s)))))\n  ([s] (if (empty? s) 0 (mcount 1 (rest s))))\n)", "user": "5866b999e4b0f14aab7c886b"}, {"problem": 22, "code": "(fn [l] \n  (reduce (fn [num x] (+ 1 num)) 0 l))", "user": "58628c9be4b0f14aab7c880c"}, {"problem": 22, "code": "(fn [col] (reduce (fn [c _] (inc c)) 0 col))", "user": "58670d13e4b0f14aab7c8871"}, {"problem": 22, "code": "(fn [xs]\n  (loop [n 0\n         xs xs]\n    (cond (empty? xs) n\n          :else (recur (+ 1 n) (rest xs)))))", "user": "5826a3b7e4b051871117befc"}, {"problem": 22, "code": "reduce (fn [acc _] (inc acc)) 0", "user": "5865c8f0e4b0f14aab7c884e"}, {"problem": 22, "code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "58677770e4b0f14aab7c887b"}, {"problem": 22, "code": "reduce (fn [n not-used] (inc n)) 0", "user": "5863eda2e4b0f14aab7c8836"}, {"problem": 22, "code": "#(reduce (fn [cnt element] (inc cnt)) 0 %)", "user": "556a7626e4b09a3098a524e3"}, {"problem": 22, "code": "(fn my-count [coll] (reduce (fn [n _] (inc n)) 0 coll))", "user": "5839f286e4b089d5ab817d49"}, {"problem": 22, "code": "(fn ss [s]\n  (if (= () s) 0\n    (+ 1 (ss (rest s)))))", "user": "58681bf0e4b0f14aab7c888a"}, {"problem": 22, "code": "(fn f [x] (if (seq x) (+ (f (rest x)) 1) 0 ))", "user": "5868efdae4b0f14aab7c8896"}, {"problem": 22, "code": "(fn f ([x i] (if (empty? x) i (f (rest x) (inc i))))\n      ([x]   (f x 0) ))", "user": "586631a2e4b0f14aab7c885a"}, {"problem": 22, "code": "#(reduce (fn [s _] (inc s)) 0 %)", "user": "5868ef15e4b0f14aab7c8895"}, {"problem": 22, "code": "(fn my-count [coll]\n  (if (empty? coll)\n    0\n    (+ 1 (my-count (rest coll)))\n  )\n)", "user": "5869a49fe4b0f14aab7c88a9"}, {"problem": 22, "code": "(fn c\n  [col]\n  (if (empty? col) 0\n      (+ 1 (c (rest col)))))", "user": "524a9556e4b05ef8e38e64b1"}, {"problem": 22, "code": "(fn [li] \n  (reduce + (map (constantly 1) li)))", "user": "586a657de4b0f14aab7c88bd"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "5865deeae4b0f14aab7c8851"}, {"problem": 22, "code": "(fn [coll]\n  (loop [coll2 coll c 0]\n  (if (empty? coll2) c (recur (rest coll2) (inc c)))))", "user": "5821160de4b04b46fc4b0f6c"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "586a906ae4b0f14aab7c88c3"}, {"problem": 22, "code": "#(reduce (fn [x y] (+ x 1)) 0 %)", "user": "58658407e4b0f14aab7c884d"}, {"problem": 22, "code": "#(inc (first (last (map vector (range) %))))", "user": "586b1482e4b0f14aab7c88cf"}, {"problem": 22, "code": "(fn [coll] (loop [stuff coll\n                    x 0]\n               (if (nil? (first stuff))\n                 x\n                 (recur (rest stuff) (inc x)))))", "user": "586b6753e4b01531a375e956"}, {"problem": 22, "code": "reduce (fn [i _] (inc i)) 0", "user": "586b6f13e4b01531a375e959"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "586ba61fe4b01531a375e95e"}, {"problem": 22, "code": "(fn [coll]\n  (loop [counter 0\n         coll coll]\n    (if (empty? coll)\n      counter\n      (recur (inc counter) (rest coll)))))", "user": "586bc870e4b01531a375e964"}, {"problem": 22, "code": "(fn [z] (reduce (fn [x y] (inc x)) 0 z))", "user": "58665b12e4b0f14aab7c8861"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "586bd340e4b01531a375e966"}, {"problem": 22, "code": "reduce (fn [x, y] (inc x)) 0", "user": "586b1390e4b0f14aab7c88cd"}, {"problem": 22, "code": "(fn [col] (reduce (fn[c _](+ c 1)) 0 col ))", "user": "529ac5d4e4b02ebb4ef7509b"}, {"problem": 22, "code": "#(reduce (fn [x y] (+ x 1)) 0 %)", "user": "586bfbcee4b01531a375e967"}, {"problem": 22, "code": "#(reduce (fn [acc coll] (inc acc)) 0 %)", "user": "586c122ae4b01531a375e96f"}, {"problem": 22, "code": "#(loop [counter 0 st %]\n        (if (empty? st) \n            counter\n            (let [[head & tail] st]\n                (recur (inc counter) tail))))", "user": "586aa811e4b0f14aab7c88c4"}, {"problem": 22, "code": "(fn [s] (reduce \n         (fn [a b] (+ 1 a))\n         0\n         s))", "user": "586c6462e4b01531a375e97b"}, {"problem": 22, "code": "(fn [coll] \n  (loop [c coll\n         result 0]\n    (if (empty? c)\n      result\n      (recur (rest c) (inc result))\n      )))", "user": "52dc7344e4b09f7907dd13cf"}, {"problem": 22, "code": "(fn mycnt [lst]\n  (if (empty? lst)\n    0\n    (+ 1 (mycnt (rest lst)))))", "user": "586c5a34e4b01531a375e97a"}, {"problem": 22, "code": "#(apply + (map (constantly 1) %))", "user": "4e11b92a535d04ed9115e7cb"}, {"problem": 22, "code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "5868ee08e4b0f14aab7c8893"}, {"problem": 22, "code": "reduce (fn [x y] (if y (+ x 1) 0)) 0", "user": "561b57c3e4b053970a773b11"}, {"problem": 22, "code": "(fn mycnt [coll]\n  (loop [c coll cnt 0]\n    (if (empty? c)\n      cnt\n      (recur (rest c) (+ cnt 1))\n    )\n  )\n)", "user": "586cf7c1e4b01531a375e986"}, {"problem": 22, "code": "#(reduce (fn [acc _] (inc acc)) 0 %1)", "user": "54fdb4b9e4b07d26eda61d3a"}, {"problem": 22, "code": "#(reduce (fn [cnt seq] (inc cnt)) 0 %)", "user": "586b6d51e4b01531a375e958"}, {"problem": 22, "code": "reduce (fn [a b] (+ 1 a)) 0", "user": "586d4d63e4b01531a375e98e"}, {"problem": 22, "code": "#(reduce (fn ([a] (+ 1)) ([a b] (+ a 1))) 0 %)", "user": "586e47dee4b01531a375e9a9"}, {"problem": 22, "code": "#(reduce + (map (fn [_] 1) %))", "user": "58593c05e4b0f14aab7c872d"}, {"problem": 22, "code": "#(loop [s %\n        i 0]\n   (if (seq s)\n     (recur (rest s) (inc i))\n     i))", "user": "5845f14ee4b089d5ab817e7e"}, {"problem": 22, "code": "#(reduce (fn [cnt elm] (+ cnt 1)) 0 %1)", "user": "586f1af2e4b01531a375e9bb"}, {"problem": 22, "code": "#(loop [cnt 0] (if (= (nth % cnt nil) nil) cnt (recur (inc cnt))))", "user": "5852a971e4b0b7285a6f4eb4"}, {"problem": 22, "code": "#(reduce + (map (fn [x] (if-not (= nil x) 1 0)) (apply list %)))", "user": "586f7f40e4b01531a375e9cc"}, {"problem": 22, "code": "(fn count2 \n  ([seq1, n] \n   \t(if \n    \t(= [] seq1) \n    \tn \n    \t(count2 \n     \t\t(rest seq1) \n     \t\t(+ n 1)\n         )\n    )\n  )\n  ([seq1] (count2 seq1 0))\n)", "user": "586f3f7ee4b01531a375e9c1"}, {"problem": 22, "code": "(fn [coll]\n      (loop [x (first coll)\n             xs (rest coll)\n             n 1]\n        (if (empty? xs)\n          n\n          (recur (first xs) (rest xs) (inc n)))))", "user": "56e11125e4b03a7c14b85a1f"}, {"problem": 22, "code": "#(apply + (map (fn [x] 1) %))", "user": "586b6a0ae4b01531a375e957"}, {"problem": 22, "code": "(fn [xs]\n  (let [iteration \n    (fn [ys acc] \n      (if (= (first ys) nil)\n        acc\n        (recur (rest ys) (inc acc))))]\n    (iteration xs 0)\n    ))", "user": "587100d6e4b01531a375e9f0"}, {"problem": 22, "code": "(fn [xs](loop [i 0 xs xs](if (seq xs) (recur (inc i) (rest xs)) i)))", "user": "55597b84e4b0deb715856e36"}, {"problem": 22, "code": "#(reduce + (map (fn [_] 1) %))", "user": "58716570e4b01531a375e9fe"}, {"problem": 22, "code": ";; reduce (fn [sum y] (+ sum 1)) 0\n\n(fn c[coll]                                                                     \n  (if (seq coll)                                                                \n    (+ 1 (c (rest coll)))                                                       \n    0))", "user": "585a7cb2e4b0f14aab7c874e"}, {"problem": 22, "code": "#(reduce (fn [acc _] (inc acc)) 0 %)", "user": "54c4c96ae4b045293a27f61f"}, {"problem": 22, "code": "(fn [x] (if (string? x) (.length x) (.size x)))", "user": "5689e397e4b0dcc4269f4086"}, {"problem": 22, "code": "(fn len [llist] (if (empty? llist) 0 (+ 1 (len (next llist)))))", "user": "560d24a2e4b05f002753df34"}, {"problem": 22, "code": "#(loop [i 0 rem %1] (if rem (recur (inc i) (next rem)) i))", "user": "587294f0e4b01531a375ea1e"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) % ))", "user": "5872935ce4b01531a375ea1d"}, {"problem": 22, "code": "(fn [coll] (reduce + (map (constantly 1) coll)))", "user": "54a35517e4b09f271ff37c68"}, {"problem": 22, "code": "(fn [dat]\n  (apply + (map (fn [_] 1) dat)))", "user": "58730484e4b01531a375ea26"}, {"problem": 22, "code": "(fn f [l]\n  (cond\n  \t(empty? l) 0\n   \t:else (+ 1 (f (rest l)))))", "user": "58731176e4b01531a375ea2a"}, {"problem": 22, "code": "#(+ (last (map-indexed (fn [idx itm] idx) %)) 1)", "user": "586d146de4b01531a375e98a"}, {"problem": 22, "code": "(fn cn [gl] (if (= (first gl) nil) 0 (+ 1 (cn (rest gl))) ) )", "user": "5873d7a2e4b01531a375ea3f"}, {"problem": 22, "code": "(fn [coll] \n   (reduce + 0 (map (fn [x] 1) coll)) )", "user": "5873dbcee4b01531a375ea41"}, {"problem": 22, "code": "(fn [coll] (reduce + (map (fn [y] 1) coll)))", "user": "5602aeb8e4b04bb52996e1a4"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5873da5ee4b01531a375ea40"}, {"problem": 22, "code": "(fn [xs]\n  ((fn my-count [xs n]\n     (if (empty? xs) n\n                    (my-count (rest xs) (+ n 1))))\n    xs 0))", "user": "586f4900e4b01531a375e9c6"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "58745926e4b01531a375ea50"}, {"problem": 22, "code": "#(alength (to-array %))", "user": "58748ea8e4b01531a375ea54"}, {"problem": 22, "code": "(partial reduce (fn [accum item]\n          (inc accum))\n        0)", "user": "58740c18e4b01531a375ea49"}, {"problem": 22, "code": "#(loop [remaining %\n        out 0]\n   (if (empty? remaining)\n     out\n     (recur (rest remaining) (+ out 1))))", "user": "5872ddade4b01531a375ea25"}, {"problem": 22, "code": "#(reduce (fn [p _] (+ 1 p)) 0 %)", "user": "52658b67e4b03e8d9a4a710d"}, {"problem": 22, "code": "#(reduce + (map (fn [x] (identity 1)) % ))", "user": "57f9b25fe4b0d3187e90094b"}, {"problem": 22, "code": "(fn func [coll]\n  (if (empty? coll)\n    0\n    (+ 1 (func (rest coll)))\n    ))", "user": "5727031ee4b0c5bde472c12f"}, {"problem": 22, "code": "(fn f [l]\n  (if (empty? l)\n    0\n    (+ 1 (f (rest l)))))", "user": "5875daaee4b01531a375ea74"}, {"problem": 22, "code": "(fn my_count [x]\n  (if (empty? x)\n    0\n    (+ 1 (my_count (rest x)))\n  )\n)", "user": "525ff1e3e4b03e8d9a4a7028"}, {"problem": 22, "code": "(fn cnt [s] (if (empty? (rest s)) 1 (+ 1 (cnt (rest s)))))", "user": "58767e82e4b01531a375ea85"}, {"problem": 22, "code": "#(reduce (fn [n _] (inc n)) 0 %)", "user": "5875cb95e4b01531a375ea73"}, {"problem": 22, "code": "#(reduce (fn [a b] (inc a)) 0 %)", "user": "5875f2c5e4b01531a375ea77"}, {"problem": 22, "code": "(fn blah\n  [els]\n  (if(empty? els)\n    0\n    (+ (blah (rest els)) 1)\n       \n    ) \n  )", "user": "58754bd0e4b01531a375ea61"}, {"problem": 22, "code": "(fn [seq] (loop [coll seq c 0] (if (empty? (rest coll)) (inc c) (recur (rest coll) (inc c)))))", "user": "586d2f5be4b01531a375e98c"}, {"problem": 22, "code": "(comp #(reduce + %) #(map (fn [x] 1) %))", "user": "5877a553e4b01531a375eaa5"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "534e62bee4b084c2834f4ab3"}, {"problem": 22, "code": "(fn [x] (reduce (fn [x y] (+ x 1)) 0 (vec x)))", "user": "5877e40ee4b01531a375eaab"}, {"problem": 22, "code": "(fn [seq]\n  (loop [cnt seq acc 0]\n    (if (empty? cnt)\n      acc\n      (recur (rest cnt)\n             (inc acc)))))", "user": "56c44c34e4b05cc29241ee96"}, {"problem": 22, "code": "reduce #(do %2 (inc %1)) 0", "user": "54f07a5ee4b024c67c0cf89a"}, {"problem": 22, "code": "(fn myCount\n  ([seq] (myCount seq 0))\n  ([seq size]\n   (if (empty? seq)\n     size\n     (myCount (rest seq) (inc size)))\n   )\n  )", "user": "58775496e4b01531a375ea9a"}, {"problem": 22, "code": "#(loop [iteration 0 input %]\n      (if (empty? input)\n        iteration\n        (do (inc iteration)\n        (recur (inc iteration) (next input)))))", "user": "58791cfee4b01531a375eac7"}, {"problem": 22, "code": "#(reduce (fn [acc _] (inc acc)) 0 %)", "user": "5879d577e4b01531a375ead8"}, {"problem": 22, "code": "reduce (fn [acc _] (inc acc)) 0", "user": "563c7f98e4b0bfe05bf11836"}, {"problem": 22, "code": "reduce (fn [x _] (inc x)) 0", "user": "587a2356e4b01531a375eade"}, {"problem": 22, "code": "#(inc(first(last(map-indexed vector %))))", "user": "587a5fcfe4b01531a375eaeb"}, {"problem": 22, "code": "(fn count' \n  [xs] \n  (reduce (fn [acc dc] (+ 1 acc)) 0 xs))", "user": "57689d73e4b0a07e8fc180d7"}, {"problem": 22, "code": "(fn [s] (reduce (fn [x y] (+ x 1)) 0 s))", "user": "587abe0de4b01531a375eaef"}, {"problem": 22, "code": "(partial reduce (fn [acc _] (+ acc 1)) 0)", "user": "587ad5aae4b01531a375eaf0"}, {"problem": 22, "code": "(fn [my-seq]\n  (loop [the-seq my-seq n 0]\n    (if (= nil (next the-seq))\n      (inc n)\n      (recur (next the-seq) (inc n)))))", "user": "55228c3ce4b0882d96d091a2"}, {"problem": 22, "code": "(fn counter\n ([col]   (counter col 0))\n ([col n] (if (empty? col)\n      \t\t   n\n      \t      (recur (rest col) (inc n)))))", "user": "587b8bdee4b01531a375eaff"}, {"problem": 22, "code": "(fn  [list] \n  ( reduce (fn [x y](+ x 1)) 0 list))", "user": "55b4fa46e4b01b9910ae2983"}, {"problem": 22, "code": "(fn [coll]\n  (loop [coll coll\n         counter 0]\n    (if (empty? coll)\n      counter\n      (recur (rest coll)\n             (inc counter)))))", "user": "52506e4ce4b0541d1855b82d"}, {"problem": 22, "code": "(fn [l] (reduce (fn [q w] (inc q)) 0 l))", "user": "5874d5ace4b01531a375ea5b"}, {"problem": 22, "code": "(fn [coll]\n  (reduce (fn [n c] (inc n)) 0 coll))", "user": "587c77afe4b01531a375eb1b"}, {"problem": 22, "code": "(fn cnt [ls] \n  (if \n   (= ls [])\n   0\n   (+ \n    1 \n    (cnt (rest ls))\n   )\n  )\n)", "user": "58711e7be4b01531a375e9f9"}, {"problem": 22, "code": "#(reduce (fn [acc i] (inc acc)) 0 %)", "user": "4ff9ea75e4b0678c553fc3b3"}, {"problem": 22, "code": "(fn count-el\n  ([coll] (count-el coll 0))\n  ([coll n]\n    (let [rst (rest coll)]\n      (if (= rst ())\n        (inc n)\n        (count-el rst (inc n))))))", "user": "5878fb4ee4b01531a375eac1"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "587d29d1e4b01531a375eb30"}, {"problem": 22, "code": "#(loop [l % n 0] (if (= l '()) n (recur (rest l) (inc n))))", "user": "5877c244e4b01531a375eaa9"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "5871175de4b01531a375e9f7"}, {"problem": 22, "code": "#(loop [x 0 coll %]\n   (if (empty? coll)\n   x (recur (+ x 1) (rest coll))))", "user": "57949eb0e4b0e215f87e846f"}, {"problem": 22, "code": "(fn [ls]\n  ((fn cnt [lst n]\n     (if (seq lst)\n         (cnt (rest lst) (+ n 1))\n       \t n\n      )\n   ) ls 0)\n )", "user": "587df462e4b01531a375eb45"}, {"problem": 22, "code": "(partial reduce (fn [acc elt] (+ acc 1)) 0)", "user": "587e43d2e4b052da650a633f"}, {"problem": 22, "code": "#(loop [coll %\n       acc 0]\n  (if (empty? coll)\n     acc\n     (recur (rest coll) (inc acc))))", "user": "554be50de4b0a04f7929959c"}, {"problem": 22, "code": "(fn countt [coll]\n  (loop [counter 0 \n         cur-coll coll]\n    (if (seq cur-coll)\n      (recur (inc counter) (rest cur-coll))\n      counter)))", "user": "58472aade4b089d5ab817ea0"}, {"problem": 22, "code": "(fn [c] \n  (loop [i 0\n         col c]\n    (if (empty? col)\n      i\n      (recur (inc i) (rest col)))))", "user": "587c845ce4b01531a375eb20"}, {"problem": 22, "code": "(fn cnt [s] (if (empty? s) 0 (+ 1 (cnt (rest s)))))", "user": "587c59d1e4b01531a375eb17"}, {"problem": 22, "code": "#(reduce + (map (fn [n] 1) %))", "user": "587ee260e4b052da650a6353"}, {"problem": 22, "code": "(fn [col] (loop [i 0 col col] (if (empty? col) i (recur (inc i) (rest col)))))", "user": "587c845ae4b01531a375eb1f"}, {"problem": 22, "code": "(fn [coll] \n\t(loop [n 0 remaining coll]\n   \t\t(if (empty? remaining)\n\t\t\tn\n   \t\t\t(recur (inc n) (drop 1 remaining)))))", "user": "587e80a0e4b052da650a6346"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "587f8393e4b0f1effa3b75f2"}, {"problem": 22, "code": "(fn cnt [coll]\n  (if (empty? coll)\n    0\n    (inc (cnt (rest coll)))))", "user": "58800fd4e4b0f1effa3b7606"}, {"problem": 22, "code": "(fn[x] (reduce + (map (fn[y] 1) x)))", "user": "576e607ae4b0979f89651579"}, {"problem": 22, "code": "#((fn [v i] (if (not (empty? v)) (recur (rest v) (inc i)) i)) % 0)", "user": "587cf147e4b01531a375eb29"}, {"problem": 22, "code": "#(loop [l (seq %) cnt 0]\n  (if (empty? l)\n    cnt\n    (recur (rest l) (inc cnt))))", "user": "5876c0c5e4b01531a375ea8e"}, {"problem": 22, "code": "#(reduce + (map (fn [& rest] 1) %))", "user": "58795fd5e4b01531a375eace"}, {"problem": 22, "code": "(partial reduce (fn [a v] (inc a)) 0)", "user": "5880e38fe4b0f1effa3b7625"}, {"problem": 22, "code": "#(reduce (fn [n data] (inc n)) 0 %)", "user": "58803ed9e4b0f1effa3b760f"}, {"problem": 22, "code": "(fn test\n  [coll]\n  (loop [coll coll\n         n    0]\n    (if (empty? coll)\n      n\n      (recur (rest coll)\n             (inc n)))))", "user": "58817d3ae4b0f1effa3b763b"}, {"problem": 22, "code": "#(reduce (fn [b _] (inc b)) 0 %)", "user": "58806599e4b0f1effa3b7615"}, {"problem": 22, "code": "(fn [seq] (+ (get (last (map-indexed vector seq)) 0) 1))", "user": "588039d0e4b0f1effa3b760c"}, {"problem": 22, "code": "reduce (fn [a b] (inc a)) 0", "user": "5881335ce4b0f1effa3b762e"}, {"problem": 22, "code": "(fn [s] (reduce (fn [a, v] (inc a)) 0 s))", "user": "58821372e4b0f1effa3b764d"}, {"problem": 22, "code": "#(apply + (map (fn [_] 1) %))", "user": "58809253e4b0f1effa3b7618"}, {"problem": 22, "code": "(fn [x] (reduce + (map (fn [y] 1) x)))", "user": "5880ad4de4b0f1effa3b761c"}, {"problem": 22, "code": "(fn [input]\n  (loop [l input n 0]\n    (if (nil? (first l))\n      n\n      (recur (rest l) (inc n)))))", "user": "5883584ae4b0f1effa3b7674"}, {"problem": 22, "code": "(fn [s]\n  (reduce (fn [acc _]\n            (+ acc 1))\n          0\n          s))", "user": "58836dbee4b0f1effa3b7679"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5882e8b1e4b0f1effa3b7666"}, {"problem": 22, "code": "(fn [col]\n  ((fn [col n]\n      (if (empty? col)\n        n\n        (recur (rest col) (inc n)))) col 0))", "user": "587a3babe4b01531a375eae2"}, {"problem": 22, "code": "(fn [s] (apply + (map (fn [x] 1) s)))", "user": "585be055e4b0f14aab7c8775"}, {"problem": 22, "code": "(fn [coll]\n  (loop [[head & remaining] coll i 0]\n    (if head\n      (recur remaining (inc i))\n      i)))", "user": "5883920ee4b0f1effa3b767e"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 % )", "user": "58840023e4b0f1effa3b768b"}, {"problem": 22, "code": "(fn [x]\n  (loop [x x i 0]\n    (if (first x)\n      (recur (rest x) (+ 1 i))\n      i)))", "user": "58844d43e4b0f1effa3b7696"}, {"problem": 22, "code": "#(reduce (fn [acc e] (inc acc)) 0 %)", "user": "588472f1e4b0f1effa3b769a"}, {"problem": 22, "code": "#(loop [x 0 s %]\n        (if (= '() s)\n          x\n          (recur (inc x) (rest s))\n          )\n   )", "user": "5880d686e4b0f1effa3b7623"}, {"problem": 22, "code": "(fn skcount [l]\n  (if (= '() (rest l))\n    1\n    (+ (skcount (rest l)) 1)))", "user": "5884f377e4b0f1effa3b76a8"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "58852909e4b0f1effa3b76af"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5884e807e4b0f1effa3b76a6"}, {"problem": 22, "code": "#(-> (let [i 0] (apply + (into [] (map (fn[j] (inc i)) % ) ))))", "user": "56330578e4b0bfe05bf117af"}, {"problem": 22, "code": "#(reduce + (map (fn [_] 1) %))", "user": "57124786e4b09c608db70457"}, {"problem": 22, "code": "reduce (fn [n x] (inc n)) 0", "user": "5884f77ee4b0f1effa3b76a9"}, {"problem": 22, "code": "(fn len [sequence]\n    (loop [sequence sequence, res 0]\n        (if (seq sequence)\n            (recur (rest sequence) (inc res))\n            res)))", "user": "587bead1e4b01531a375eb0d"}, {"problem": 22, "code": "(fn [s]\n  (loop [sequence s size 0]\n    (if (nil? (first sequence))\n      size\n      (recur (rest sequence) (inc size))\n    )\n  )\n)", "user": "57dd2c99e4b0bd073c20243c"}, {"problem": 22, "code": "(fn my-count [coll]\n  (loop [my-count 0\n         my-coll coll]\n    (if (empty? my-coll)\n      my-count\n      (recur (inc my-count) (rest my-coll)))))", "user": "578d459ee4b0ebec4cfb7567"}, {"problem": 22, "code": "reduce (fn [n _] (inc n)) 0", "user": "5567c3cde4b0c656e3ff1848"}, {"problem": 22, "code": "#(loop [l %1 acc 0] (if (empty? l) acc (recur (rest l) (inc acc))))", "user": "5886ac91e4b0f1effa3b76e5"}, {"problem": 22, "code": "#((fn [sublist-to-count  counter]\n    (if (empty? sublist-to-count)\n      counter \n      (recur (rest sublist-to-count) (inc counter))))\n  % 0)", "user": "5885cc62e4b0f1effa3b76c1"}, {"problem": 22, "code": "#(apply + (map (constantly 1) %))", "user": "582c986ee4b051871117bf9b"}, {"problem": 22, "code": "(fn cnt [sequence]\n  (if (empty? sequence)\n    0\n    (+ 1 (cnt (rest sequence)))))", "user": "5887518ae4b0f1effa3b76f5"}, {"problem": 22, "code": "#(loop [cnt 0 inxs %1]\n   (if (empty? inxs)\n     cnt\n     (recur (inc cnt) (rest inxs))\n     )\n  \n  )", "user": "5885e90de4b0f1effa3b76c5"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "587c48cce4b01531a375eb16"}, {"problem": 22, "code": "#(loop [y 1 h %]\n  (if (seq (rest h))\n    (recur (inc y) (rest h))\n    y\n  )\n)", "user": "57d031d6e4b0bd073c202354"}, {"problem": 22, "code": "(fn counting\n  ([seq] (counting seq 1))\n  ([seq sum]\n   (if (= (next seq) nil)\n     sum\n     (recur (next seq) (+ sum 1)))))", "user": "5888b75fe4b0f1effa3b771b"}, {"problem": 22, "code": "#( (fn cnt [x acc] (if (= (rest x) []) (+ 1 acc) (cnt (rest x) (inc acc)))) % 0 )", "user": "5888f271e4b0f1effa3b7726"}, {"problem": 22, "code": "#(reduce (fn [acc elem] (inc acc)) 0 %)", "user": "58896e5ce4b0f1effa3b773e"}, {"problem": 22, "code": "(fn my-count [y]\n  ((fn my-count2 [x i]\n    (if (empty? x)\n      i\n      (my-count2 (rest x) (inc i))))\n  y 0\n  ))", "user": "5889fed6e4b0f1effa3b7753"}, {"problem": 22, "code": "#(reduce (fn [x y] (+ x 1)) 0 %)", "user": "588a0988e4b0f1effa3b7756"}, {"problem": 22, "code": "(fn foobar [arr] (reduce (fn [x y] (+ x 1)) 0 arr))", "user": "5889dc13e4b0f1effa3b774a"}, {"problem": 22, "code": "(fn [coll] (reduce (fn [acc item] (inc acc)) 0 coll))", "user": "5885bea8e4b0f1effa3b76bf"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "588a344ae4b0f1effa3b775d"}, {"problem": 22, "code": "(fn [lst]\n  ((fn [lst c_so_far]\n    (if (empty? lst)\n      c_so_far\n      (recur (rest lst) (+ c_so_far 1))\n      )) lst 0))", "user": "50997306e4b0cae2931060b5"}, {"problem": 22, "code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "553d5d7ae4b0a04f792994e0"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "588bf237e4b05c141a25608d"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "57f0decfe4b0bfb2137f5bfa"}, {"problem": 22, "code": "#(reduce (fn [x s] (inc x)) 0 %)", "user": "588c65ade4b05c141a256098"}, {"problem": 22, "code": "(comp (partial reduce +) (partial map (constantly 1)))", "user": "55b6afc6e4b01b9910ae299c"}, {"problem": 22, "code": "(fn [lst] \n  ((fn [lst n]\n    (if (empty? lst) n\n      (recur (rest lst) (inc n)))) lst 0))", "user": "57902cd8e4b0ebec4cfb75a6"}, {"problem": 22, "code": "#(loop [cnt 0 lst %]\n   (if(empty? lst)\n   \tcnt\n   \t(recur (inc cnt) (rest lst))))", "user": "588c8cd0e4b05c141a25609d"}, {"problem": 22, "code": "(fn [xs]\n  (loop [ys xs n 0]\n    (if (empty? ys)\n      n\n      (recur (rest ys) (inc n)))))", "user": "587cbebbe4b01531a375eb24"}, {"problem": 22, "code": "(fn [elems]\n  (loop [l elems n 0]\n  \t(if (empty? l)\n      n\n      (recur (rest l) (inc n)))))", "user": "588e6a17e4b00487982d518c"}, {"problem": 22, "code": "; #(reduce + (map (constantly 1) %))\n#(reduce (fn [c _] (inc c)) 0 %)", "user": "588ce4aee4b05c141a2560a1"}, {"problem": 22, "code": "(fn [lst] (reduce + (map (constantly 1) lst)))", "user": "588e8133e4b00487982d5191"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "58849a0ee4b0f1effa3b769b"}, {"problem": 22, "code": "(fn count-seq [xs]\n  (reduce (fn [sum _] (inc sum)) 0 xs))", "user": "58884cc6e4b0f1effa3b770e"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %1))", "user": "5799c6dee4b05b1deef9adca"}, {"problem": 22, "code": "#(loop [inseq %\n         res 0]\n    (if (empty? inseq)\n      res\n      (recur (rest inseq) (inc res))))", "user": "5862a8a9e4b0f14aab7c880f"}, {"problem": 22, "code": "(fn [mylist & c]\n  (let [c (if (nil? c) 1 c)]\n    (if (= (rest mylist) []) c (recur (rest mylist) (+ c 1)))\n  )\n)", "user": "5873b104e4b01531a375ea38"}, {"problem": 22, "code": "(fn [xs]\n   (let [[y & rst] xs]\n     (loop [n 1\n          lst rst]\n     (if (empty? lst) n (recur (+ n 1) (rest lst))))))", "user": "5883a9bae4b0f1effa3b7681"}, {"problem": 22, "code": "reduce (fn [a _] (inc a)) 0", "user": "588fbb39e4b00487982d51bd"}, {"problem": 22, "code": "(fn [li] \n  (loop [newl li\n         i 0]\n    (if (empty? newl)\n      i\n      (recur (rest newl) (inc i))))\n)", "user": "588fb3a7e4b00487982d51b9"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "54dbc6ebe4b024c67c0cf773"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "57e016dce4b0bd073c202470"}, {"problem": 22, "code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "5890799be4b00487982d51d6"}, {"problem": 22, "code": "reduce #(inc (first %&)) 0", "user": "588fd085e4b00487982d51c0"}, {"problem": 22, "code": "#(alength (to-array %))", "user": "5890dbeae4b00487982d51e3"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "589037b4e4b00487982d51d0"}, {"problem": 22, "code": "(fn[items] (reduce + (map (fn[x] 1) items)))", "user": "588e64ebe4b00487982d518a"}, {"problem": 22, "code": "reduce (fn [a b] (+ a 1)) 0", "user": "55e1a205e4b050e68259b41e"}, {"problem": 22, "code": "reduce (fn [z n] (inc z)) 0", "user": "57de9169e4b0bd073c202454"}, {"problem": 22, "code": "(fn c [lst]\n  (loop [counter 0 l lst]\n    (if (empty? l)\n      counter\n      (recur (+ 1 counter) (rest l)))))", "user": "580b79e4e4b0a837a8b30d4a"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "58904720e4b00487982d51d1"}, {"problem": 22, "code": "#(inc (last (map-indexed (fn [i _] i) %)))", "user": "544673c0e4b032a45b8693b0"}, {"problem": 22, "code": "(partial reduce (fn [c _] (inc c)) 0)", "user": "58923efce4b00487982d521c"}, {"problem": 22, "code": "(fn [col] (reduce (fn [pos _] (inc pos)) 0 col))", "user": "588f500ae4b00487982d51a4"}, {"problem": 22, "code": "#(loop [x 0 result %]\n    (if (empty? result)\n      x\n      (recur (inc x) (rest result))))", "user": "53ada652e4b047364c04446d"}, {"problem": 22, "code": "(fn [s]\n  (loop [s s cnt 0]\n    (if (nil? (first s))\n      cnt\n      (recur (rest s) (inc cnt)))))", "user": "588d3952e4b00487982d516e"}, {"problem": 22, "code": "(fn [coll] (apply + (map (fn [x] 1) coll)))", "user": "58938f0ae4b00487982d5243"}, {"problem": 22, "code": "(fn cnt\n[sq]\n(loop [sqq sq, n 0]\n  (if\n    (-> sqq first nil?)\n    n\n    (recur (rest sqq) (inc n)))))", "user": "588e4e05e4b00487982d5188"}, {"problem": 22, "code": "(fn [xs] \n  (reduce (fn [sum xs] (inc sum)) \n          0 \n          xs))", "user": "5891bddce4b00487982d5201"}, {"problem": 22, "code": "reduce #(inc ((vec %&)0)) 0", "user": "56c85700e4b0ed865f9758d0"}, {"problem": 22, "code": "#(reduce (fn [a b] (inc a)) 0 %)", "user": "58949f8de4b00487982d525e"}, {"problem": 22, "code": "reduce (fn [x y] (inc x)) 0", "user": "5894aee1e4b00487982d5260"}, {"problem": 22, "code": "#(reduce (fn [x _] (inc x)) 0 %)", "user": "54f777a4e4b01ecee9d88820"}, {"problem": 22, "code": "(fn [elements] \n  (loop [i elements c 0] \n    (if (empty? i) \n      c\n      (recur (rest i) (inc c))\n    )\n  )\n)", "user": "5894b298e4b00487982d5261"}, {"problem": 22, "code": "(fn count* [lst]\n  (if (empty? lst) \n    0\n    (+ 1 (count* (next lst)))))", "user": "5895477fe4b00487982d527c"}, {"problem": 22, "code": "reduce (fn [a b] (inc a)) 0", "user": "589561bce4b00487982d5282"}, {"problem": 22, "code": "(fn [coll]\n    (loop [curr-count 0 coll coll]\n        (if (empty? coll)\n            curr-count\n            (recur (inc curr-count) (rest coll)))))", "user": "5896735fe4b00487982d529d"}, {"problem": 22, "code": "#(reduce (fn [acc v] (inc acc)) 0 %)", "user": "589714cbe4b00487982d52b1"}, {"problem": 22, "code": "(fn num-elements [coll]\n  (loop [n 0 xs coll]\n    (if xs\n      (recur (inc n) (next xs))\n      n)))", "user": "58975725e4b00487982d52b7"}, {"problem": 22, "code": "(fn mcount [l]\n  (if (empty? l)\n    0\n    (+ 1 (mcount (rest l)))))", "user": "58976bfde4b00487982d52bc"}, {"problem": 22, "code": "#(loop [i 0 s %1] (if (not (= s [])) (recur (inc i) (rest s)) i))", "user": "5866df28e4b0f14aab7c886d"}, {"problem": 22, "code": "(fn [x]\n      (letfn [(count-sequence-helper\n                [x n]\n                (if (empty? x)\n                  n\n                  (count-sequence-helper (rest x) (inc n))))]\n        (count-sequence-helper x 0)))", "user": "5893c64ce4b00487982d524b"}, {"problem": 22, "code": "(fn [s] \n  (loop [x 0 s s]\n    (if (empty? s)\n      x\n      (recur (inc x) (rest s))\n     )))", "user": "5897c71ee4b00487982d52c7"}, {"problem": 22, "code": "#(loop [xs %\n         c 0\n         ]\n    (if (empty? xs)\n      c\n      (recur (rest xs) (inc c)))\n    )", "user": "5896ade8e4b00487982d52a9"}, {"problem": 22, "code": "(fn [s] (+ 1 (last (map (fn [s i] i) s (range)))))", "user": "58983e3fe4b00487982d52ce"}, {"problem": 22, "code": "#(loop [x 0 c %]\n   (if (empty? c)\n     x\n     (recur (inc x) (rest c))))", "user": "58969902e4b00487982d52a6"}, {"problem": 22, "code": "#(reduce (fn [cnt remaining] (inc cnt)) 0 %)", "user": "589560d8e4b00487982d5281"}, {"problem": 22, "code": "(partial reduce (fn [a b] (inc a)) 0)", "user": "587c738de4b01531a375eb1a"}, {"problem": 22, "code": "reduce (fn [acc v] (inc acc)) 0", "user": "55f1f0d1e4b06e875b46ce3b"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "4db863d7535d1e037afb2190"}, {"problem": 22, "code": "(fn [s]\n  (loop [s s n 0]\n    (if (empty? s)\n      n\n      (recur (rest s) (inc n)))))", "user": "5896a0e6e4b00487982d52a8"}, {"problem": 22, "code": "(fn [coll]\n  (reduce (fn [i _] (inc i)) 0 coll)\n  )", "user": "5899c54de4b00487982d52fa"}, {"problem": 22, "code": "(fn [x]\n  (reduce (fn [first-arg _]\n            (inc first-arg))\n          0 x)\n  )", "user": "5898f299e4b00487982d52e1"}, {"problem": 22, "code": "reduce (fn [x y] (+ x 1)) 0", "user": "589122fbe4b00487982d51ed"}, {"problem": 22, "code": "(fn[x] (reduce + (map #(if % 1 0)  x)))", "user": "57887de2e4b0ebec4cfb751c"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "589a4aece4b00487982d530b"}, {"problem": 22, "code": "#(loop [c % n 0] (if (empty? c) n (recur (rest c) (inc n))))", "user": "589a8dace4b00487982d5311"}, {"problem": 22, "code": "#(reduce + (map (fn [coll] 1) %))", "user": "589ac5a2e4b00487982d5318"}, {"problem": 22, "code": "#(loop [i 0 coll %] (if (empty? coll) i (recur (inc i) (next coll))))", "user": "58987ee9e4b00487982d52d2"}, {"problem": 22, "code": "#(reduce (fn [a b] (+ a 1)) 0 (seq %))", "user": "589ac991e4b00487982d5319"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "589511dee4b00487982d5272"}, {"problem": 22, "code": "(fn [ls]\n   (loop [[head & tail] ls\n         num 0]\n     (if (empty? tail)\n       (+ 1 num)\n       (recur tail (+ 1 num)))))", "user": "58791973e4b01531a375eac5"}, {"problem": 22, "code": "(fn countseq [alist] (if (= (seq alist) nil) 0 (+ (countseq (rest alist)) 1)))", "user": "58950f29e4b00487982d5270"}, {"problem": 22, "code": "#(loop [c 0 y %] \n   (if (empty? y) \n     c \n     (recur (inc c) (next y))))", "user": "588f1743e4b00487982d519d"}, {"problem": 22, "code": "(fn [x] (loop [cnt 0 v x] (if (= [] v) \n                              cnt\n                              (recur (inc cnt) (rest v) ))))", "user": "589c3123e4b00487982d5358"}, {"problem": 22, "code": "(fn counter\n  ([sequ] (counter sequ 0))\n  ([sequ n] \n   (if (empty? sequ)\n     n\n     (counter (rest sequ) (inc n)))))", "user": "589c6914e4b00487982d535d"}, {"problem": 22, "code": "#(reduce + 0 (map (constantly 1) %))", "user": "58988cbbe4b00487982d52d7"}, {"problem": 22, "code": "(fn [x]\n  (loop [counter 0\n         remain x]\n    (if (empty? remain)\n      counter\n      (recur (inc counter) (rest remain)))))", "user": "589cb617e4b00487982d536a"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %1)", "user": "589c7c8ce4b00487982d5361"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "589c73dee4b00487982d535f"}, {"problem": 22, "code": "(fn l [x]\n  (reduce (fn [acc e] (inc acc)) 0 x))", "user": "5897dda4e4b00487982d52c8"}, {"problem": 22, "code": "(fn l_ [l]\n  (cond\n       (empty? l) 0\n       :else (+ 1 (l_ (rest l)))))", "user": "5794fd7be4b0e215f87e8476"}, {"problem": 22, "code": "(fn [li] (reduce (fn [x y] (inc x)) 0 li))", "user": "589974aee4b00487982d52f1"}, {"problem": 22, "code": "(fn [iseq] (apply + (map (fn [_] 1) iseq)))", "user": "589c2e3fe4b00487982d5357"}, {"problem": 22, "code": "(fn [elems] (reduce + (map (constantly 1) (seq elems))))", "user": "589e0024e4b02bd94d917e4e"}, {"problem": 22, "code": "reduce (fn [val _] (inc val)) 0", "user": "557b3f29e4b05c286339e0ac"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "589e704ae4b02bd94d917e5e"}, {"problem": 22, "code": "reduce (fn [x y](+ 1 x)) 0", "user": "589f0b8ee4b02bd94d917e71"}, {"problem": 22, "code": "reduce (fn [a b]\n         (inc a)) 0", "user": "589f4387e4b02bd94d917e7b"}, {"problem": 22, "code": "(fn [a]\n  (loop [c 0\n         l a]\n    (if (empty? l)\n      c\n      (recur (+ c 1) (rest l)))))", "user": "589f34a0e4b02bd94d917e78"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5873eb5ae4b01531a375ea45"}, {"problem": 22, "code": "(fn [coll]\n  (loop [coll coll\n         cnt 0]\n    (if (empty? coll)\n      cnt\n      (recur (rest coll) (inc cnt)))))", "user": "56e22366e4b03a7c14b85a30"}, {"problem": 22, "code": "reduce (fn [x y] (inc x)) 0", "user": "589f58fee4b02bd94d917e7f"}, {"problem": 22, "code": "(fn [xs]\n  (loop [c 0 ys xs]\n    (if-not (seq ys)\n      c\n      (recur (inc c) (rest ys)))))", "user": "57382719e4b0cd1946bd1055"}, {"problem": 22, "code": "(fn [seq]\n  (if (empty? seq)\n    0\n  (loop [[hd & tl] seq cnt 1]\n    (if (empty? tl)\n      cnt\n      (recur tl (inc cnt))))))", "user": "5771b155e4b0979f896515ba"}, {"problem": 22, "code": "(fn mycount\n  ([s] (mycount s 0))\n  ([s c]\n   (if (seq s)\n     (recur (rest s) (inc c))\n     c)))", "user": "589ce536e4b00487982d5370"}, {"problem": 22, "code": "(fn [s]\n  (loop [rest s\n         acc 0]\n    (if (empty? rest)\n      acc\n      (recur (next rest) (+ acc 1)))))", "user": "57fa54c3e4b0d3187e900960"}, {"problem": 22, "code": "(fn [coll] (reduce + (map #(if true 1 %) coll)))", "user": "589ec900e4b02bd94d917e65"}, {"problem": 22, "code": "(fn [x] (reduce (fn [acc cur] (inc acc))  0 x) )", "user": "58447708e4b089d5ab817e4b"}, {"problem": 22, "code": "(fn [x]\n      (loop [ost x cnt 0]\n        (if (= ost () )\n          cnt\n          (recur (rest ost) (inc cnt)))))", "user": "589c8fa6e4b00487982d5365"}, {"problem": 22, "code": "(fn [coll] ((fn counter [coll c] \n              (if (empty? coll)\n                c\n                (counter (rest coll) (inc c)))) coll 0))", "user": "58934052e4b00487982d523a"}, {"problem": 22, "code": "#(loop [coll % \n        i 0] (if (= (rest coll) coll) \n               i \n               (recur (rest coll) (inc i))\n               ))", "user": "589dd2cce4b02bd94d917e48"}, {"problem": 22, "code": "(fn [s] (apply + (map (fn [x] (+ 1 0)) s)))", "user": "58a1a8f9e4b02bd94d917ebb"}, {"problem": 22, "code": "#(letfn [(a [c s]\n           (if (empty? s) c (a (inc c) (rest s))))]\n           (a 0 %1))", "user": "576aea4fe4b0a07e8fc18126"}, {"problem": 22, "code": "(fn [l] (reduce (fn [n,v] (+ n 1)) 0 (seq l)))", "user": "58a1e968e4b02bd94d917eca"}, {"problem": 22, "code": "(fn [x]\n  (loop [quence x iter 0]\n    (if (empty? quence)\n     iter\n     (recur (drop 1 quence) (inc iter)))))", "user": "58a0fd0be4b02bd94d917ea4"}, {"problem": 22, "code": "#(.size (vec %))", "user": "58a2b57fe4b02bd94d917ede"}, {"problem": 22, "code": "#(loop[x % y 0]\n   \t(if (empty? x)\n      y\n      (recur (rest x) (inc y))))", "user": "58a1d00ae4b02bd94d917ec6"}, {"problem": 22, "code": "(fn mycount[alist] (letfn [(one [item] 1)] (reduce + (map one alist)) ) )", "user": "58a17511e4b02bd94d917eb4"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "589f0087e4b02bd94d917e6d"}, {"problem": 22, "code": "#(reduce + (map (fn [_] 1) %))", "user": "58a31ecee4b02bd94d917ee7"}, {"problem": 22, "code": "reduce (fn [x y] (inc x)) 0", "user": "58a216e8e4b02bd94d917ed1"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "5787df42e4b0ebec4cfb7512"}, {"problem": 22, "code": "(fn [col] (reduce (fn [x col] (inc x)) 0 col))", "user": "58a35b1ee4b02bd94d917ef3"}, {"problem": 22, "code": "#(reduce (fn [reducer item] (inc reducer)) 0 %)", "user": "58a3c6aae4b02bd94d917f00"}, {"problem": 22, "code": "#(reduce (fn [prev cur] (inc prev)) 0 %1)", "user": "58951903e4b00487982d5274"}, {"problem": 22, "code": "#(reduce (fn [acc _] (inc acc)) 0 %)", "user": "58a413b5e4b02bd94d917f07"}, {"problem": 22, "code": "(fn [coll] (reduce + (map (constantly 1) coll)))", "user": "58a1f61ae4b02bd94d917ecd"}, {"problem": 22, "code": "(fn [xs]\n  (loop [remaining xs\n         counter 0]\n    (if (empty? remaining)\n      counter\n      (recur (rest remaining)\n             (inc counter)))))", "user": "58a47197e4b01a0c0b2328f9"}, {"problem": 22, "code": "(fn [s] (reduce (fn [i _] (inc i)) 0 s))", "user": "58a3279fe4b02bd94d917ee9"}, {"problem": 22, "code": "(fn my-count [s]\n  (if (empty? s) 0 (inc (my-count (rest s)))))", "user": "58a0fc33e4b02bd94d917ea3"}, {"problem": 22, "code": "(fn co [c] (if (empty? c) 0 (+ 1 (co (rest c)))))", "user": "589c12c2e4b00487982d5353"}, {"problem": 22, "code": "#(loop [s %1 c 0] (if (empty? s) c (recur (rest s) (inc c))))", "user": "584aa803e4b089d5ab817ee9"}, {"problem": 22, "code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "58a5822fe4b01a0c0b232913"}, {"problem": 22, "code": "(fn self [s] \n  (if (nil? (first s))\n    0\n    (+ (self (rest s)) 1)))", "user": "58a5a099e4b01a0c0b232918"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "58a5eac3e4b01a0c0b23291e"}, {"problem": 22, "code": "(fn [x] (reduce +  (map (fn[y] (+ 0 1))  x)))", "user": "58a38d37e4b02bd94d917ef9"}, {"problem": 22, "code": "(fn cnt ([x y] (if (empty? x) y (recur (rest x) (inc y))))\n  ([x] (cnt x 0)))", "user": "58a3ba31e4b02bd94d917eff"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "58a7215de4b01a0c0b23293c"}, {"problem": 22, "code": "(fn [coll]\n  (loop [c coll n 0]\n    (if (empty? c)\n      n\n      (recur (rest c) (inc n)))))", "user": "58a72bafe4b01a0c0b23293d"}, {"problem": 22, "code": "(fn new-count\n  ([iter]\n   (if (empty? iter)\n     0\n     (new-count (rest iter) 1)))\n  ([iter cnt]\n   (if (empty? iter)\n     cnt\n     (new-count (rest iter) (inc cnt)))))", "user": "58a61231e4b01a0c0b232923"}, {"problem": 22, "code": "(fn [coll]\n  (loop [idx 0\n         coll coll]\n    (if-not (seq coll)\n      idx\n      (recur (inc idx) (rest coll)))))", "user": "5760682ee4b08062f99a4e94"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "58a7b7cbe4b01a0c0b232946"}, {"problem": 22, "code": "(fn anzahl [liste] \n(if (= liste '())\n0\n(+ 1 (anzahl (rest liste)))))", "user": "58a82659e4b01a0c0b232951"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "5893aa2ae4b00487982d5246"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "58a6bd35e4b01a0c0b232931"}, {"problem": 22, "code": "(fn [z] (reduce + (map (fn [x] 1) z)))", "user": "58a9e872e4b01a0c0b232973"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "58aa19d3e4b01a0c0b23297c"}, {"problem": 22, "code": "#(loop [s %1 n 0] (if-not (seq s) n (recur (rest s) (inc n))))", "user": "589771f9e4b00487982d52bd"}, {"problem": 22, "code": "(partial reduce (fn [acc _] (inc acc)) 0)", "user": "58a953dae4b01a0c0b232968"}, {"problem": 22, "code": "(fn cnt [coll]\n  (loop [c coll i 0]\n    (if-not (first c)\n      i\n      (recur (rest c) (+ i 1)))))", "user": "56391b7ce4b0bfe05bf117ef"}, {"problem": 22, "code": "#(+ 1 (first (last (map-indexed vector %))))", "user": "57fe68e2e4b0d3187e9009ce"}, {"problem": 22, "code": "(fn [s] (reduce (fn [x y] (inc x)) 0 s))", "user": "58ab491ae4b0005cfeb1a729"}, {"problem": 22, "code": "(fn [xs] (reduce + 0 (map (fn [x] 1) xs)))", "user": "58aa8083e4b01a0c0b232985"}, {"problem": 22, "code": "(fn [l]\n  (loop [list l num 0]\n  \t(if (empty? list)\n\tnum\n  \t(recur (rest list) (inc num)))\n  )\n)", "user": "58a72f71e4b01a0c0b23293f"}, {"problem": 22, "code": "(partial reduce (fn [c x] (inc c)) 0)", "user": "58ac14ebe4b0005cfeb1a740"}, {"problem": 22, "code": "reduce (fn [a b] (+ a 1)) 0", "user": "588053cae4b0f1effa3b7612"}, {"problem": 22, "code": "(fn xcount [coll]\n  (let [reccount (fn xx [coll agg]\n           (if (empty? coll)\n             agg\n             (xx (rest coll) (+ agg 1))))]\n    (reccount coll 0)))", "user": "58ac1135e4b0005cfeb1a73f"}, {"problem": 22, "code": "(fn [x] (reduce (fn [sum _] (inc sum)) 0 x) )", "user": "58ac513fe4b0005cfeb1a746"}, {"problem": 22, "code": "(fn [x] (loop [i 0]\n (if (= nil (get (vec x) i))\n  i\n  (recur (inc i)))))", "user": "58a8e128e4b01a0c0b23295e"}, {"problem": 22, "code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "58aa0c16e4b01a0c0b232979"}, {"problem": 22, "code": "#(reduce (fn[a _](inc a)) 0 %)", "user": "5895fd90e4b00487982d528f"}, {"problem": 22, "code": "(fn [s] (reduce (fn [ret _] (inc ret)) 0 s))", "user": "56cdbd53e4b0ea9b8538f751"}, {"problem": 22, "code": "#(apply + (map (constantly 1) %))", "user": "5619d3a2e4b053970a773b00"}, {"problem": 22, "code": "(fn [collection]\n  (loop [values collection\n         length (int 0)]\n    (if (empty? values)\n      length\n      (recur (rest values) (inc length)))))", "user": "577ad824e4b0d3393e5deb08"}, {"problem": 22, "code": "(fn [s] (reduce + (map (constantly 1) s)))", "user": "58ac8aeee4b0005cfeb1a74e"}, {"problem": 22, "code": "#(reduce (fn [n _] (inc n)) 0 %)", "user": "580e7761e4b0849f6811b753"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "55afe57ae4b002ce9d5cbc1c"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "58ae3f7ee4b0ebc645576cb7"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5840178ee4b089d5ab817de0"}, {"problem": 22, "code": "#(.size (vec %))", "user": "58aee148e4b0ebc645576cc3"}, {"problem": 22, "code": "(fn chuj[x y] (if (empty? y) x (chuj (+ x 1)(rest y)))) 0", "user": "58778aa1e4b01531a375ea9f"}, {"problem": 22, "code": "(fn [x] (reduce (fn [x y] (inc x)) 0 x))", "user": "58a5c5c2e4b01a0c0b23291b"}, {"problem": 22, "code": "(fn [x] (reduce + (map (constantly 1) x)))", "user": "58ad4349e4b0ebc645576c9d"}, {"problem": 22, "code": "(fn foo [seq]\n          ((fn bar [seq, len]\n             (if (not= seq ())\n               (bar (rest seq) (inc len))\n               len\n               )\n             ) seq 0)\n          )", "user": "586398b5e4b0f14aab7c8825"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "58b06b7ce4b0ebc645576cdc"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %1)", "user": "58a16387e4b02bd94d917eb1"}, {"problem": 22, "code": "(fn [coll]\n    (loop [i 0\n           coll coll]\n          (if (empty? coll)\n            i\n            (recur (+ i 1) (rest coll)))))", "user": "58b0bbc5e4b0ebc645576ce6"}, {"problem": 22, "code": "(fn count'\n  [col]\n  (let [[head & tail] col]\n    (if (empty? tail)\n      1\n      (+ 1 (count' tail)))))", "user": "58b18ba0e4b0ebc645576cfa"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5895385fe4b00487982d5279"}, {"problem": 22, "code": "(fn [c](reduce (fn [a b] (inc a)) 0 c))", "user": "58b1f51de4b0ebc645576d05"}, {"problem": 22, "code": "(fn [ls]\n  (loop [ls ls\n         c 0]\n    (if (empty? ls)\n      c\n      (recur (rest ls) (inc c)))))", "user": "58a58c50e4b01a0c0b232914"}, {"problem": 22, "code": "(fn [lst] (reduce (fn [acc _] (+ 1 acc)) \n                   0 \n                   lst))", "user": "589e22fae4b02bd94d917e56"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "58b2f085e4b0ebc645576d15"}, {"problem": 22, "code": "(fn [xs] (->> xs (map-indexed #(list % %2)) reverse first first inc))", "user": "58b31a46e4b0ebc645576d1b"}, {"problem": 22, "code": "(fn foo\n  ([xs] (foo xs 0))\n  ([xs counter]\n    (if (empty? xs)\n      counter\n      (foo (rest xs) (inc counter)))))", "user": "58b066dee4b0ebc645576cd9"}, {"problem": 22, "code": "#(reduce (fn [x y] (+ 1 x)) 0 %)", "user": "58a822e4e4b01a0c0b232950"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "589f50bfe4b02bd94d917e7d"}, {"problem": 22, "code": "reduce (fn [acc _] (inc acc)) 0", "user": "58b3388ae4b0ebc645576d1e"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "58b36131e4b0ebc645576d21"}, {"problem": 22, "code": "(fn [x] \n  (loop [x x i 0]\n    (if-let [v (first x)]\n      (recur (rest x) (inc i))\n      i)))", "user": "58b3b1b2e4b0ebc645576d29"}, {"problem": 22, "code": "(fn [s]\n   (loop [[head & remain] s\n         ct 0]\n     (if (empty? remain)\n       (inc ct)\n       (recur remain (+ 1 ct)))))", "user": "587cebf3e4b01531a375eb28"}, {"problem": 22, "code": "(fn [x] (\n               (fn rec [x z] \n                 (if (= (first x) nil) z (rec (rest x) (inc z)))\n   ) x 0))", "user": "58b43bf5e4b0ebc645576d38"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "58637221e4b0f14aab7c881d"}, {"problem": 22, "code": "(fn c\n  ([lst] (c (seq lst) 0))\n  ([lst length] (if (first lst) (c (rest lst) (inc length)) length)))", "user": "58b51e05e4b0ebc645576d4c"}, {"problem": 22, "code": "(fn [sq] (loop [swq sq x 0] (if (empty? swq) x (recur (rest swq) (inc x)))))", "user": "564a0698e4b0284900eef64b"}, {"problem": 22, "code": "#(reduce (fn [c s] (+ c 1)) 0 (seq %))", "user": "58a55694e4b01a0c0b23290b"}, {"problem": 22, "code": "reduce (fn [a b] (+ 1 a)) 0", "user": "58b54852e4b0ebc645576d52"}, {"problem": 22, "code": "(fn foo [xs] \n  (if (empty? xs) \n     0\n     (+ 1 (foo (rest xs))))\n  \n)", "user": "58b783f2e4b0ebc645576d7f"}, {"problem": 22, "code": "(fn [s] (loop [s s i 0] (if (= s []) i (recur (rest s) (inc i)))))", "user": "58aae714e4b01a0c0b23298e"}, {"problem": 22, "code": "(fn [xs] (reduce (fn [acc, x] (+ acc 1)) 0 xs))", "user": "58b7e825e4b0ebc645576d85"}, {"problem": 22, "code": "#(loop [x % y 1]\n    (if (next x)\n      (recur (rest x) (inc y))\n      y))", "user": "58b7eab9e4b0ebc645576d86"}, {"problem": 22, "code": "(fn [xs] (reduce (fn [x y] (+ x 1)) 0 xs))", "user": "58b81490e4b0ebc645576d8c"}, {"problem": 22, "code": "(fn [x]\n  (loop [x x\n         acc 0]\n  \t(if (empty? x)\n      acc\n      (recur (rest x) (inc acc)))))", "user": "58b8c3ece4b0888cdc949cb9"}, {"problem": 22, "code": "#(apply + (reduce (fn [acc x] (conj acc 1)) () %1))", "user": "58b80ec1e4b0ebc645576d89"}, {"problem": 22, "code": "reduce (fn [res v] (inc res)) 0", "user": "58b86162e4b0ebc645576d97"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "58b84c28e4b0ebc645576d94"}, {"problem": 22, "code": "#(loop [result 0 c %]\n   (if(empty? c) result\n     (recur (inc result) (rest c))\n     )\n   )", "user": "58a44a14e4b01a0c0b2328f2"}, {"problem": 22, "code": "(fn[x] \n   (apply + (reduce (fn [z y] (conj z 1)) () x)))", "user": "57309d7ee4b0cd1946bd0fb2"}, {"problem": 22, "code": "(fn [x]\n              (loop [n 0 y x]\n                    (if (not (empty? y))\n                    (recur (inc n) (drop 1 y))\n                    n)\n              ))", "user": "58b6d93ce4b0ebc645576d6c"}, {"problem": 22, "code": "(fn [s] (reduce + (map (fn [x] 1) s)))", "user": "58b997afe4b0888cdc949cd1"}, {"problem": 22, "code": "(fn [x] (reduce (fn[accum, _val] (+ 1 accum)) 0 (seq x)))", "user": "58b4898de4b0ebc645576d3d"}, {"problem": 22, "code": "(fn [stuff]\n\t(loop [sl stuff tl 0]\n\t\t(if (= nil (first sl)) \n\t\t\ttl\n\t\t\t(recur (rest sl) (+ tl 1)))))", "user": "58b985e0e4b0888cdc949ccc"}, {"problem": 22, "code": "#(reduce\n  (fn [m e]\n   (inc m))\n   0 %)", "user": "5881d1c2e4b0f1effa3b7644"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "58ba7ee1e4b0888cdc949ce6"}, {"problem": 22, "code": "(fn [s]\n  (loop [s s n 0]\n    (if (empty? s)\n      n\n      (recur (rest s) (inc n)))))", "user": "58ba8e7ce4b0888cdc949ce8"}, {"problem": 22, "code": "(fn length [s]\n  (if (empty? s) 0 (+ 1 (length (rest s)))))", "user": "58bb10d1e4b0888cdc949cf2"}, {"problem": 22, "code": "(fn cnt [sqnc] (if (seq sqnc) (+ 1 (cnt (rest sqnc))) 0))", "user": "58acce0ae4b0005cfeb1a754"}, {"problem": 22, "code": "(fn count-seq\n  ([coll] (count-seq coll 0))\n  ([coll c]\n   (if (empty? coll)\n     c\n     (count-seq (rest coll) (inc c))\n     )\n   )\n  )", "user": "57ff7d88e4b0a837a8b30c20"}, {"problem": 22, "code": "(fn [coll & args]\n  (let [curr-count (or args 0)]\n    (if (empty? coll)\n      curr-count\n      (recur (next coll) (+ 1 curr-count)))))", "user": "58bbcbc8e4b0888cdc949d00"}, {"problem": 22, "code": "#(reduce (fn [a b] (inc a)) 0 %)", "user": "58bbe58be4b0888cdc949d05"}, {"problem": 22, "code": "#(loop [col % r 0]\n  (if (= (first col) nil)\n    r\n    (recur (rest col) (inc r))))", "user": "58bb6f67e4b0888cdc949cf7"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "58ae5b44e4b0ebc645576cba"}, {"problem": 22, "code": "(fn [s] (reduce (fn [c e] (inc c)) 0 s))", "user": "58bb736be4b0888cdc949cf9"}, {"problem": 22, "code": "#(loop [acc 0 xs %] (if (= (first xs) nil) acc (recur (inc acc) (rest xs))))", "user": "58b989dbe4b0888cdc949ccd"}, {"problem": 22, "code": "#(loop [s %1 n 0] (if (empty? s) n (recur (rest s) (inc n))))", "user": "58aa3f02e4b01a0c0b23297d"}, {"problem": 22, "code": "reduce #(or (+ % 1) %2) 0", "user": "589c0475e4b00487982d5351"}, {"problem": 22, "code": "#(reduce (fn [a b] (inc a)) 0 %)", "user": "58bb218be4b0888cdc949cf4"}, {"problem": 22, "code": "(fn [x] \n  (loop [a x b 0]\n    (if (= () a)\n      b\n      (recur (rest a) (+ b 1)))))", "user": "58bd219be4b0888cdc949d29"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "58b9c43be4b0888cdc949cd3"}, {"problem": 22, "code": "(fn [x] (loop [xx x n 0] (if (empty? xx) n (recur (rest xx) (inc n)))))", "user": "589f2cefe4b02bd94d917e75"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "58bd84d2e4b0888cdc949d31"}, {"problem": 22, "code": "#(loop [x %1 c 0] (if (empty? x) (int c) (recur (rest x) (inc c))))", "user": "58be3142e4b0888cdc949d44"}, {"problem": 22, "code": "#(reduce \n  (fn [c _] (inc c)) 0\n  %)", "user": "58b51aeae4b0ebc645576d4b"}, {"problem": 22, "code": "(fn cnt [x] (cond (empty? x) 0\n              true (+ 1 (cnt (rest x))) ))", "user": "579b24d0e4b05b1deef9adee"}, {"problem": 22, "code": "#(- (reduce (fn [a b] (inc a)) (conj (seq %) 1)) 1)", "user": "58bdead0e4b0888cdc949d3e"}, {"problem": 22, "code": "(fn conta\n        [sequenza]\n        (loop [counter 0\n               s   sequenza]\n          (if (seq s)\n            (recur (inc counter) (rest s))\n            counter)))", "user": "57da7593e4b0bd073c202410"}, {"problem": 22, "code": "#(reduce + (map (fn [_] 1) %))", "user": "58bef28be4b021aa9917ecca"}, {"problem": 22, "code": "(fn [seq]\n  (reduce \n   (fn [prev &rest] \n     (first [(inc prev) rest])) \n   0 \n   seq))", "user": "58bef424e4b021aa9917eccb"}, {"problem": 22, "code": "(fn mylen [coll]\n  (loop [cl coll\n         len 0]\n    (if (nil? (first cl))\n           len\n           (recur (rest cl) (inc len)))))", "user": "58765038e4b01531a375ea7e"}, {"problem": 22, "code": "(fn [s] ((fn [s n] (if (empty? s) n (recur (rest s) (inc n)))) s 0))", "user": "58bf1cf8e4b021aa9917eccf"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5054d243e4b0b1b9d1860eb5"}, {"problem": 22, "code": "(fn [x]\n  (+\n   (first \n     (last \n      (map-indexed \n        (fn [idx itm] \n         [idx itm])\n       \n           x)\n      )\n    )\n   1))", "user": "58b849bee4b0ebc645576d93"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "58c04ca5e4b021aa9917ece6"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "58bde497e4b0888cdc949d3c"}, {"problem": 22, "code": "(fn [coll] (reduce + (map (constantly 1) coll)))", "user": "58bc3202e4b0888cdc949d0b"}, {"problem": 22, "code": "(fn [l] (loop [c 0\n               ls l]\n          (if (empty? ls)\n            c\n            (recur (inc c)\n                   (rest ls)))))", "user": "58c1b4f5e4b021aa9917ed01"}, {"problem": 22, "code": "(fn [s] (loop [ss s len 0] (if (empty? ss) len (recur (drop 1 ss) (inc len)))))", "user": "58b226cce4b0ebc645576d07"}, {"problem": 22, "code": "(fn [lst](loop[values lst c 0]\n   (if (empty? values)\n     c\n     (recur (rest values) (inc c)))))", "user": "58c072d1e4b021aa9917eced"}, {"problem": 22, "code": "(fn [col] \n  (loop [\n        se col\n        res 0\n        ]\n    (if (empty? se)\n      res\n      (recur (rest se) (inc res)))\n))", "user": "58bc6a88e4b0888cdc949d16"}, {"problem": 22, "code": "(fn [xs] (reduce (fn [c e] (inc c)) 0 xs))", "user": "58c2df0ae4b021aa9917ed17"}, {"problem": 22, "code": "#(reduce\n    (fn [c _] (inc c))\n    0 %)", "user": "58c1cdc9e4b021aa9917ed05"}, {"problem": 22, "code": "(fn [x] (reduce (fn [a b] (+ a 1)) 0 x))", "user": "58c3af4de4b021aa9917ed1b"}, {"problem": 22, "code": "(fn tmp [coll] (loop [cnt 0 col coll]\n                     (if (empty? col)\n                       cnt\n                       (recur (inc cnt) (rest col)))))", "user": "57b7de74e4b0fbc9809a27d4"}, {"problem": 22, "code": "(fn [seq]\n        (loop [seq seq\n               c 0]\n          (if (empty? seq)\n            c\n            (recur (rest seq) (inc c)))\n          ))", "user": "52b065dbe4b0c58976d9acc9"}, {"problem": 22, "code": "(fn [l] (reduce (fn [x y] (inc x)) 0 (vec l)))", "user": "58c54e2ee4b021aa9917ed3a"}, {"problem": 22, "code": "(fn [coll] (reduce (fn inc' [i _] (inc i)) 0 coll))", "user": "58c5a08be4b021aa9917ed40"}, {"problem": 22, "code": "reduce (fn [x y] (inc x)) 0", "user": "58c5ad55e4b021aa9917ed42"}, {"problem": 22, "code": "(fn [coll]\n  (loop [coll coll\n        idx 0]\n    (if (empty? coll)\n      idx\n      (recur (rest coll) (inc idx)))))", "user": "58bfa57ae4b021aa9917ecd8"}, {"problem": 22, "code": "#(reduce (fn [acc x]\n           (inc acc))\n         0 %)", "user": "58c658c9e4b021aa9917ed4f"}, {"problem": 22, "code": "(fn sequence-count [s] \n  (reduce (fn [sum _] (inc sum)) 0 s))", "user": "58c69b80e4b021aa9917ed5d"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "574b4f3ee4b02ea114799207"}, {"problem": 22, "code": "#(loop [a %1 cnt 0]\n  (if (empty? a)\n    cnt\n    (recur (rest a) (inc cnt))))", "user": "57ff52c7e4b0d3187e9009ea"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "58c69d88e4b021aa9917ed5e"}, {"problem": 22, "code": "reduce (fn [i _] (inc i)) 0", "user": "58c7a80fe4b021aa9917ed7b"}, {"problem": 22, "code": "(fn [vals & cnt]\n  (let [counter (if (nil? cnt) 0 cnt)]\n  \t(if (empty? vals) counter (recur (rest vals) (inc counter)))))", "user": "58c66990e4b021aa9917ed53"}, {"problem": 22, "code": "#(reduce + (map (fn [_] 1) %))", "user": "58969076e4b00487982d52a2"}, {"problem": 22, "code": "#(loop [l %, acc 0]\n       (if (empty? l)\n         acc\n         (recur (rest l) (inc acc))))", "user": "58c4b11ae4b021aa9917ed2c"}, {"problem": 22, "code": "#(reduce\n  (fn [result current]\n    (+ result 1)\n    )\n  0\n  %)", "user": "58c93089e4b021aa9917ed9b"}, {"problem": 22, "code": "#(reduce (fn [acc x]\n           (inc acc))\n         0 %)", "user": "58c8e0aae4b021aa9917ed95"}, {"problem": 22, "code": "(fn cnt [xs] (if (first xs) (+ 1 (cnt (rest xs))) 0))", "user": "58c623dbe4b021aa9917ed4b"}, {"problem": 22, "code": "(fn my-count [x] \n  (if (= x [])\n    0\n  \t(inc \n   \t\t(my-count \n     \t\t(rest x)\n    \t) \n  \t)\n  )\n)", "user": "58c99858e4b021aa9917eda7"}, {"problem": 22, "code": "(fn [xs] (loop [n 0 xs xs] (if (nil? (first xs)) n (recur (inc n) (rest xs)))))", "user": "58ca8a1de4b03c36ff7e5835"}, {"problem": 22, "code": "reduce (fn [x y] (inc x)) 0", "user": "53640c40e4b0243289761e61"}, {"problem": 22, "code": "(fn cnt [l]\n  (let [v (into [] l)]\n    (if (= v [])\n      0\n      (inc (cnt (rest v))))))", "user": "58b26da4e4b0ebc645576d0a"}, {"problem": 22, "code": "#(loop [counter 0 rem-seq %]\n   (if (empty? rem-seq)\n     counter\n     (recur (inc counter) (rest rem-seq))))", "user": "58cbdc3be4b03c36ff7e5856"}, {"problem": 22, "code": "(fn [sq-start]\n  (loop [n 0 sq sq-start]\n    (if (empty? sq)\n      n\n      (recur (inc n) (rest sq)))))", "user": "58ca613de4b021aa9917edb7"}, {"problem": 22, "code": "(fn f1 [lst] (if (empty? lst) 0 (+ 1 (f1 (rest lst)))))", "user": "53882352e4b0640c7a9a5898"}, {"problem": 22, "code": "(fn [coll]\n  (reduce + (map (constantly 1) coll)))", "user": "58cd65fae4b03c36ff7e5889"}, {"problem": 22, "code": "(partial\n  (fn [len xs]\n    (if (empty? xs)\n      len\n      (recur (+ len 1) (rest xs))))\n  0)", "user": "58946fa1e4b00487982d525b"}, {"problem": 22, "code": "(fn [elements] (\n    reduce + (map (fn [x] 1) elements)\n))", "user": "58cea645e4b03c36ff7e58a6"}, {"problem": 22, "code": "#(inc (.lastIndexOf (vec %) (last %)))", "user": "588d224ae4b00487982d516c"}, {"problem": 22, "code": "reduce (fn [i _] (inc i)) 0", "user": "58462eb0e4b089d5ab817e86"}, {"problem": 22, "code": "(partial reduce (fn [z _] (+ z 1)) 0)", "user": "58cf00c8e4b03c36ff7e58ac"}, {"problem": 22, "code": "#(apply + (map (fn [x] 1) %))", "user": "58cfbd7ae4b03c36ff7e58ba"}, {"problem": 22, "code": "(fn [nums] (reduce #(if(nil? %2) 0 (inc %1)) 0 nums))", "user": "5841872be4b089d5ab817e06"}, {"problem": 22, "code": "(fn yaes [x]\n(if (empty? x) 0\n(inc (yaes (rest x)))))", "user": "5870851de4b01531a375e9e8"}, {"problem": 22, "code": "reduce (fn [x y] (inc x)) 0", "user": "58cc390ce4b03c36ff7e5866"}, {"problem": 22, "code": "(fn [z] (reduce (fn [x y] (+ x 1)) 0 z))", "user": "58d12fd2e4b03c36ff7e58e3"}, {"problem": 22, "code": "(partial reduce (fn [acc nxt] (+ acc 1)) 0)", "user": "58d01845e4b03c36ff7e58c4"}, {"problem": 22, "code": "(fn recurse [n coll]\n  (cond (seq coll) (recurse (inc n) (rest coll))\n    true n\n    )) 0", "user": "58cd6c57e4b03c36ff7e588b"}, {"problem": 22, "code": "reduce (fn [a b] (inc a)) 0", "user": "58d1b2ebe4b03c36ff7e58ec"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "58d1c1b1e4b03c36ff7e58ef"}, {"problem": 22, "code": "(fn mycount\n  [args]\n  (if (= nil (second args))\n    1\n    (+ 1 (mycount (rest args)))))", "user": "58cc204ce4b03c36ff7e5860"}, {"problem": 22, "code": "(fn mycount\n   ([vals] (mycount vals 0))\n   ([vals accumulating-total]\n    (if (empty? vals)\n      accumulating-total\n      (mycount (rest vals) (+ 1 accumulating-total)))))", "user": "58a32c21e4b02bd94d917eeb"}, {"problem": 22, "code": "#(alength (to-array %))", "user": "58d06b6fe4b03c36ff7e58cb"}, {"problem": 22, "code": "#(reduce (fn [accum nxt] (inc accum)) 0 %)", "user": "58d27bcae4b03c36ff7e58fe"}, {"problem": 22, "code": "#(reduce (fn[x _] (inc x)) 0 %)", "user": "58ce2a80e4b03c36ff7e589d"}, {"problem": 22, "code": "reduce (fn [x _] (inc x)) 0", "user": "58d26ef7e4b03c36ff7e58fc"}, {"problem": 22, "code": "#(loop \n   [s %\n    c 0]\n   (if (empty? s)\n     c\n     (recur (rest s) (inc c))\n    )\n   )", "user": "58d28c70e4b03c36ff7e5901"}, {"problem": 22, "code": "(fn [s] (reduce (fn [val col] (inc val)) 0 s))", "user": "58c7131be4b021aa9917ed6d"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "58d0e919e4b03c36ff7e58d8"}, {"problem": 22, "code": "(fn len [xs] (if (empty? xs)\n               0\n               (inc (len (rest xs)))))", "user": "58d2b7b3e4b03c36ff7e5908"}, {"problem": 22, "code": "(fn [sq]\n  (loop [x sq i 0]\n    (if (empty? x) i\n      (recur (next x) (inc i))\n    )))", "user": "585fea4de4b0f14aab7c87d0"}, {"problem": 22, "code": "(fn [sq] (apply + (map (fn [_] 1) sq)))", "user": "58d48df8e4b03c36ff7e5941"}, {"problem": 22, "code": "#(loop [x %1\n        cnt 0]\n   (if (nil? (first x))\n     cnt\n     (recur (rest x) (inc cnt))))", "user": "58d4e73ce4b03c36ff7e594d"}, {"problem": 22, "code": "(fn [x]\n  (loop [x x\n         tot 0]\n    (if (empty? x)\n      tot\n      (recur \n       (rest x) \n       (inc tot)))))", "user": "589772f7e4b00487982d52be"}, {"problem": 22, "code": "(fn [abc] (reduce (fn [x y] (+ x 1)) 0 abc))", "user": "58d5359ce4b03c36ff7e5959"}, {"problem": 22, "code": "(fn  [coll] \n  (loop [x 0 y coll]\n    (if (empty? y)\n    x\n    (recur (inc x) (rest y)))))", "user": "58d00661e4b03c36ff7e58c2"}, {"problem": 22, "code": "#(loop [col % number 0]\n    (if (empty? col) number\n      (recur (rest col) (inc number))))", "user": "58d5114de4b03c36ff7e5953"}, {"problem": 22, "code": "(fn getCount [x] (reduce (fn [item _] (inc item)) 0 x))", "user": "58d533fae4b03c36ff7e5958"}, {"problem": 22, "code": "(fn [l] (loop [t l, c 0] \n          (if (empty? t)\n            c\n            (recur (rest t) (inc c)))))", "user": "58c4492be4b021aa9917ed27"}, {"problem": 22, "code": "(fn [se]\n  (reduce (fn[col _] (+ col 1)) 0 se))", "user": "565ddeb9e4b068f2fe63dc2c"}, {"problem": 22, "code": "reduce (fn [acc _] (inc acc)) 0", "user": "573946b6e4b0cd1946bd106d"}, {"problem": 22, "code": "(fn [xs] (reduce (fn [acc xxs] (inc acc)) 0 xs))", "user": "58d2bfc8e4b03c36ff7e5909"}, {"problem": 22, "code": "reduce (fn [b c] (+ b 1)) 0", "user": "56f3d21ae4b046a417f92055"}, {"problem": 22, "code": "(fn [coll] (inc (apply max (vals (zipmap coll (range))))))", "user": "58d6c601e4b03c36ff7e5974"}, {"problem": 22, "code": "#(reduce + 0 (map (fn [_] 1) %))", "user": "58d71ef5e4b03c36ff7e597f"}, {"problem": 22, "code": "(fn [coll]\n  (loop [len 0\n         lefttoprocess coll]\n      (if (empty? lefttoprocess)\n        len\n        (recur (inc len) (rest lefttoprocess)))\n))", "user": "58d6caf5e4b03c36ff7e5975"}, {"problem": 22, "code": "#(reduce (fn [c _] (+ c 1)) 0 %1)", "user": "58d737cee4b03c36ff7e5982"}, {"problem": 22, "code": "(fn count2\n  ([xs] (count2 xs 0))\n  ([xs n] (if (empty? xs) n (count2 (rest xs) (inc n)))))", "user": "58d63b99e4b03c36ff7e596b"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "58d45578e4b03c36ff7e593d"}, {"problem": 22, "code": "(fn [coll]\n   (reduce + (map (fn [value] 1) coll)))", "user": "5885eb2de4b0f1effa3b76c6"}, {"problem": 22, "code": "(fn [input]\n  (loop [x 0 string input]\n    (if (empty? string) x\n    (recur (inc x) (rest string)))))", "user": "58cd4949e4b03c36ff7e5886"}, {"problem": 22, "code": "#(let [h (vec %)] (loop [x 0 g h] (if (empty? g) x (recur (inc x) (pop g)))))", "user": "58cba946e4b03c36ff7e584f"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x) ) 0 %)", "user": "58d810bfe4b03c36ff7e5991"}, {"problem": 22, "code": "(fn [xs] (reduce + 0 (map (constantly 1) xs)))", "user": "58bc0531e4b0888cdc949d07"}, {"problem": 22, "code": "(fn count-a-seq [lat] (reduce (fn [x y] (+ x 1)) 0 lat))", "user": "58d1fe17e4b03c36ff7e58f5"}, {"problem": 22, "code": "#(reduce (fn [acc _] (+ acc 1)) 0 %)", "user": "58d9d0e1e4b0a4d5acaab64a"}, {"problem": 22, "code": "reduce (fn [accu val] (+ accu 1)) 0", "user": "583f1533e4b089d5ab817dc8"}, {"problem": 22, "code": "(fn [s]\n    (loop [remainder s n 0]\n          (if (empty? remainder)\n          n\n          (recur (rest remainder) (inc n)))))", "user": "58d3d6a3e4b03c36ff7e592b"}, {"problem": 22, "code": "(fn [x] (+ 1(first(last(map-indexed vector x)))))", "user": "588906a9e4b0f1effa3b772a"}, {"problem": 22, "code": "(fn cnt ([s] (cnt s 0))\n        ([s n] (if (empty? s) n (recur (rest s) (inc n)))))", "user": "58cfb517e4b03c36ff7e58b9"}, {"problem": 22, "code": "(fn count-items [col] \n  (loop [c col\n         counter 0]\n         (if (empty? c)\n         \tcounter         \n           (recur (rest c) (inc counter)))))", "user": "58daae01e4b0a4d5acaab664"}, {"problem": 22, "code": "reduce (fn[a _](inc a)) 0", "user": "58dace6ae4b0a4d5acaab66a"}, {"problem": 22, "code": "(fn[x]\n  ((fn [cnt y]\n      (if (empty? y)\n        cnt\n        (recur (+ 1 cnt) (drop 1 y))))\n      0 x))", "user": "58dadf46e4b0a4d5acaab66b"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "58db362be4b0a4d5acaab675"}, {"problem": 22, "code": "#(reduce (fn [a b] (inc a)) 0 %)", "user": "58db7ae7e4b0a4d5acaab67f"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %1))", "user": "58db83f5e4b0a4d5acaab681"}, {"problem": 22, "code": "#(alength (to-array %))", "user": "58d4efbde4b03c36ff7e594e"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "58db3c5ae4b0a4d5acaab677"}, {"problem": 22, "code": "(fn count-seq [x] (reduce (fn [x y] (+ x 1)) 0 x))", "user": "58dcb8cde4b0a4d5acaab6a7"}, {"problem": 22, "code": "(fn [coll] \n  (reduce (fn[prev _] (inc prev)) \n          0\n          coll))", "user": "58dc81d1e4b0a4d5acaab69e"}, {"problem": 22, "code": "#(loop [i 0 coll %]\n   (if (empty? coll)\n     i\n     (recur (inc i)\n            (rest coll))))", "user": "58dcae01e4b0a4d5acaab6a4"}, {"problem": 22, "code": "#(reduce (fn ([] 0) ([a b] (inc a))) 0 %)", "user": "58dcf11ae4b0a4d5acaab6af"}, {"problem": 22, "code": "(fn [x]\n  (loop [s x\n         i 0]\n    (if (empty? s)\n      i\n      (recur (rest s) (inc i)))))", "user": "58d4f44ee4b03c36ff7e594f"}, {"problem": 22, "code": "(fn counts [x] (if (empty? x) 0 (+ (counts (rest x)) 1)))", "user": "5568749ae4b0c656e3ff1854"}, {"problem": 22, "code": "reduce (fn [acc _] (inc acc)) 0", "user": "4e6a676b535d8ccf87e9fedd"}, {"problem": 22, "code": "(fn [c] (reduce (fn [acc x] (inc acc)) 0 c))", "user": "58ddac2ce4b0a4d5acaab6d6"}, {"problem": 22, "code": ";#(apply(= false (nil? (nth %1 %2))))\n#(reduce + (map (constantly 1) %))", "user": "58dd21a9e4b0a4d5acaab6b3"}, {"problem": 22, "code": "(fn [x] (loop [c 0 l x] (if (not-empty l) (recur (inc c) (rest l)) c)))", "user": "58dbfb24e4b0a4d5acaab690"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "58dec7e8e4b0a4d5acaab6ff"}, {"problem": 22, "code": "(fn [list]\n  (loop [l list c 0]\n    (if (not= (empty? l) true)\n      (recur (rest l) (inc c))\n      c)))", "user": "58de563fe4b0a4d5acaab6e3"}, {"problem": 22, "code": "(fn [sequence]\n  (loop [seq sequence val 0]\n    (if (empty? seq)\n      val\n      (recur (rest seq) (inc val)))))", "user": "58df05ffe4b0a4d5acaab706"}, {"problem": 22, "code": "(fn [seq]\n (loop [i 0 k seq]\n   (if k\n     (recur (inc i) (next k))\n     i)\n   )\n )", "user": "58d5c245e4b03c36ff7e5964"}, {"problem": 22, "code": "reduce (fn [total elem] (inc total)) 0", "user": "58dede54e4b0a4d5acaab702"}, {"problem": 22, "code": "(fn\n  [coll]\n  (loop [r coll c 0]\n    (if (empty? r)\n      c\n      (recur (next r) (inc c)))))", "user": "58dfce9fe4b0a4d5acaab723"}, {"problem": 22, "code": "#(loop [c 0 v %]\n    (if (empty? v) c (recur (+ c 1)(rest v))))", "user": "58dacc7be4b0a4d5acaab669"}, {"problem": 22, "code": "(fn [ls]\n  (loop [l ls c 0]\n    (if (nil? l) c (recur (next l) (inc c)))))", "user": "58e0376ce4b0a4d5acaab732"}, {"problem": 22, "code": "reduce (fn [s, x] (+ s 1)) 0", "user": "58e039d3e4b0a4d5acaab734"}, {"problem": 22, "code": "#(loop [i % c 0]\n   (if (not (seq i))\n     c\n     (recur (rest (seq i)) (inc c))))", "user": "57dd651ee4b0bd073c202441"}, {"problem": 22, "code": ";; use some? if it's Clojure 1.6\n(fn [col] \n  (reduce + 0\n    (map (fn [x] \n           (if (nil? x) 0 1)\n          ) col\n    )\n  ) \n)", "user": "57fa06c9e4b0d3187e900958"}, {"problem": 22, "code": "(fn countteste [a]\n  (loop [c 0 col a]\n    (if col\n      (recur (+ c 1) (next col))\n      c)))", "user": "58e14302e4b005f69f193c78"}, {"problem": 22, "code": "(fn num-items [list] (reduce + (map (fn ones [x] 1) list)))", "user": "5863f986e4b0f14aab7c8838"}, {"problem": 22, "code": "(fn f [l]\n  (if (empty? l) 0\n    (+ 1 (f (rest l)))))", "user": "539a4213e4b0b51d73faaf11"}, {"problem": 22, "code": "#(loop [s % c 0] (if (empty? s) c (recur (rest s) (inc c))))", "user": "58e17578e4b005f69f193c7f"}, {"problem": 22, "code": "#(loop [li % len 0]\n        (if (empty? li)\n          len\n          (recur (rest li) (inc len))))", "user": "58e18fdae4b005f69f193c80"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "58e15bfde4b005f69f193c7a"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "58d3c3abe4b03c36ff7e5927"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "58e0ca7be4b005f69f193c6c"}, {"problem": 22, "code": "reduce (fn [cnt _] (inc cnt)) 0", "user": "58db097fe4b0a4d5acaab66f"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "58e256e1e4b005f69f193c90"}, {"problem": 22, "code": "#(reduce (fn [index _] (inc index)) 0 %)", "user": "58e2e11ce4b005f69f193ca0"}, {"problem": 22, "code": "(fn [coll] ( loop [y 0 c coll] (if (= [] c) y (recur (inc y) (rest c)))))", "user": "58de94e2e4b0a4d5acaab6f4"}, {"problem": 22, "code": "(fn foo\n  [nums]\n  (if (empty? nums)\n    0\n    (+ (foo (rest nums)) 1)))", "user": "58e45a2ce4b056aecfd47c69"}, {"problem": 22, "code": "(fn\n  [x]\n  (loop [cnt 0 remaining x]\n    (if (empty? remaining)\n      cnt\n      (recur (inc cnt) (drop 1 remaining)))))", "user": "58b4a429e4b0ebc645576d40"}, {"problem": 22, "code": "(partial reduce (fn [a b ](inc a)) 0)", "user": "58e37946e4b005f69f193cae"}, {"problem": 22, "code": "#(reduce (fn [acc _] (inc acc)) 0 %1)", "user": "58e4cf92e4b056aecfd47c77"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "58e51bc5e4b056aecfd47c86"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "58e52e99e4b056aecfd47c8d"}, {"problem": 22, "code": "(fn [x]\n  (loop [i 1 r x]\n    (if (next r)\n      (recur (+ i 1) (next r))\n      i)))", "user": "58e53760e4b056aecfd47c8f"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "58e58ae9e4b056aecfd47c9a"}, {"problem": 22, "code": "reduce (fn [i x] (inc i)) 0", "user": "58e5fbbae4b056aecfd47ca6"}, {"problem": 22, "code": "(fn [lst]\n  (loop [ctr 0\n         l lst]\n    (if (empty? l)\n      ctr\n      (recur (inc ctr) (rest l)))))", "user": "58e56154e4b056aecfd47c92"}, {"problem": 22, "code": "(fn count-elem [lst]\n  (reduce \n   (fn [ct _]\n            (inc ct))\n   0 lst))", "user": "58e63de2e4b056aecfd47cad"}, {"problem": 22, "code": "(fn [x] (reduce + (map (constantly 1) x)))", "user": "54e376d9e4b024c67c0cf7dd"}, {"problem": 22, "code": "(fn [llist] (loop [x (seq llist) y 0] (if (empty? x) y (recur (rest x) (inc y)))))", "user": "58e6a2c5e4b056aecfd47cba"}, {"problem": 22, "code": "(fn [arr]\n  (-> arr to-array alength))", "user": "58e5e585e4b056aecfd47ca2"}, {"problem": 22, "code": "#(reduce (fn [i j] (inc i)) 0 %)", "user": "58e7229fe4b056aecfd47cc4"}, {"problem": 22, "code": "(fn [x] (reduce + (map (fn [k] 1) x)))", "user": "58e762d3e4b056aecfd47ccc"}, {"problem": 22, "code": "#(reduce + (map (fn [_] 1) %))", "user": "58bcea23e4b0888cdc949d23"}, {"problem": 22, "code": "reduce (fn [i _] (inc i)) 0", "user": "58e13b49e4b005f69f193c77"}, {"problem": 22, "code": "(fn custom_count [list] (\n                         if (= list '())\n                         0\n                         (+ (custom_count (rest list)) 1)\n                         )\n  )", "user": "58e8014be4b056aecfd47ce1"}, {"problem": 22, "code": "(fn len [coll]\n  (if (= (next coll) nil)\n    1\n    (+ (len (next coll)) 1)))", "user": "58e836c9e4b056aecfd47ce8"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "56e28339e4b03a7c14b85a36"}, {"problem": 22, "code": "(fn [s]\n (let [h (fn [s n]\n           (if-not s\n             n\n             (recur (next s) (inc n))))]\n   (h s 0)))", "user": "5263e6d2e4b03e8d9a4a70c0"}, {"problem": 22, "code": "(fn mycount [coll] (reduce (fn [a b] (inc a)) 0 coll))", "user": "58e92d62e4b056aecfd47d05"}, {"problem": 22, "code": "#(loop [coll %1 cnt 0] (if (empty? coll) cnt (recur (rest coll) (inc cnt))))", "user": "58acca5ee4b0005cfeb1a753"}, {"problem": 22, "code": "(fn [col]\n  (loop [i 1\n         [x & xs] col]\n    (if (nil? xs)\n      i\n      (recur (+ i 1) xs))))", "user": "56618573e4b068f2fe63dc68"}, {"problem": 22, "code": "(fn get_length [collection]\n  (if (= collection [])\n    0\n    (+ (get_length (rest collection)) 1)))", "user": "58e980dfe4b056aecfd47d0b"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "58e5f995e4b056aecfd47ca5"}, {"problem": 22, "code": "#(reduce (fn [c, elem] (+ 1 c)) 0 %)", "user": "58d96bdce4b0a4d5acaab638"}, {"problem": 22, "code": "(fn cnt\n  ([coll] (cnt coll 0))\n  ([coll n] (if (seq coll) (cnt (rest coll ) (+ 1 n)) n) ))", "user": "58dd2c02e4b0a4d5acaab6b8"}, {"problem": 22, "code": "reduce (fn [x _] (+ 1 x)) 0", "user": "58e325f3e4b005f69f193ca7"}, {"problem": 22, "code": "(fn [coll]\n  (loop [coll coll n 0]\n    (if (empty? coll)\n      n\n      (recur (next coll) (inc n)))))", "user": "58ebae90e4b056aecfd47d44"}, {"problem": 22, "code": "(fn counting [x] (reduce + (map (constantly 1) x)))", "user": "58eba5cce4b056aecfd47d41"}, {"problem": 22, "code": "(fn outcount [col]\n  (if\n    (empty? col)\n    0\n    (inc (outcount (rest col)))\n   )\n )", "user": "58e6e624e4b056aecfd47cc1"}, {"problem": 22, "code": "(fn [s]\n    (loop [i 0 tail s]\n      (if (empty? tail)\n        i\n        (recur (inc i) (rest tail))))\n    )", "user": "58ec1e63e4b056aecfd47d54"}, {"problem": 22, "code": "#(reduce (fn [e _] (+ e 1)) 0 %)", "user": "58e965b3e4b056aecfd47d08"}, {"problem": 22, "code": "(fn [s] (reduce (fn [a b] (inc a)) 0 s))", "user": "58ec8c7ae4b056aecfd47d64"}, {"problem": 22, "code": "#_(fn seq-count [coll]\n  (if (empty? coll)\n    0\n    (inc (seq-count (rest coll)))))\n    \n\n#_(fn seq-count [collection]\n  (loop [coll collection \n         counter 0]    \n    (if (empty? coll)\n      counter\n\t  (recur (rest coll) (inc counter)))))\n\n\n(fn seq-count [collection]\n  (reduce (fn [counter elem] (inc counter)) 0 collection))", "user": "58e7639be4b056aecfd47ccf"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "58ea778be4b056aecfd47d1e"}, {"problem": 22, "code": "(fn countSeq [list]\n ((fn coutSqe [param, res]\n   (if (empty? param)\n    res\n    (coutSqe (rest param) (inc res))\n    )\n   ) list 0)\n )", "user": "58e67955e4b056aecfd47cb5"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "58ebd10de4b056aecfd47d49"}, {"problem": 22, "code": "(fn my-count [coll]\n  (reduce (fn [acc x] \n            (inc acc))\n          0 coll))", "user": "58ed713de4b056aecfd47d84"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "58ed8f4ce4b056aecfd47d86"}, {"problem": 22, "code": "#(reduce (fn [t v] (+ t 1)) 0 %)", "user": "58edaa3be4b056aecfd47d89"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "58edc112e4b056aecfd47d8b"}, {"problem": 22, "code": "#(loop [[head & tail] %1 n 0] (if (not (nil? head)) (recur tail (inc n)) n))", "user": "58eb11afe4b056aecfd47d29"}, {"problem": 22, "code": "reduce (fn [x _] (inc x)) 0", "user": "58edea3be4b056aecfd47d91"}, {"problem": 22, "code": "#(loop [seq % n 0] (\n    if (first seq)\n    (recur (rest seq) (inc n))\n    n\n    ))", "user": "58e667e7e4b056aecfd47cb3"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5803fb08e4b0a837a8b30c9b"}, {"problem": 22, "code": "(fn [coll] (reduce (fn [acc item] (inc acc)) 0 coll))", "user": "58ee5371e4b056aecfd47da8"}, {"problem": 22, "code": "#(loop [x % r 0] (if (empty? x) r (recur (rest x) (inc r))))", "user": "58e6b788e4b056aecfd47cbd"}, {"problem": 22, "code": "#(reduce (fn [v s] (inc v)) 0 %)", "user": "58eeddd6e4b056aecfd47dba"}, {"problem": 22, "code": "(fn [x] (reduce + (map (constantly 1) x)))", "user": "58eed4c5e4b056aecfd47db7"}, {"problem": 22, "code": "#(reduce (fn inc-first [x y] (+ x 1)) 0 %)", "user": "58eeea61e4b056aecfd47dbc"}, {"problem": 22, "code": "#(reduce (fn [a b] (inc a)) 0 %)", "user": "58ef0b8ce4b056aecfd47dbf"}, {"problem": 22, "code": "(fn [coll] (apply + (map (fn [x] 1) coll)))", "user": "569bce78e4b0542e1f8d1458"}, {"problem": 22, "code": "(fn [elements]\n  (loop [cnt 0 data elements]\n    (if (empty? data)\n      cnt\n      (recur (inc cnt) (rest data)))))", "user": "58ee2c14e4b056aecfd47d9e"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "58ee0bb6e4b056aecfd47d97"}, {"problem": 22, "code": "#_ #(loop [xs % n 0]\n  (if (seq xs)\n    (recur (rest xs) (inc n))\n    n))\n\n#(apply + (map (constantly 1) %))", "user": "58ef4db9e4b056aecfd47dc6"}, {"problem": 22, "code": "(fn [s]\n  (reduce (fn [x y]\n          \t(inc x))\n          0 s))", "user": "58ee9b14e4b056aecfd47db0"}, {"problem": 22, "code": "(fn [list]\n  (loop [uncounted list size 0]\n    (println (empty? uncounted) uncounted size)\n    (if (empty? uncounted)\n      size\n      (recur (rest uncounted) (inc size)))))", "user": "58f00639e4b056aecfd47ddc"}, {"problem": 22, "code": "(fn [x] (reduce + (map (fn [y] 1) x)))", "user": "58f000a3e4b056aecfd47ddb"}, {"problem": 22, "code": "(fn\n      [seq]\n      (loop [local-seq seq i 0]\n        (if (empty? local-seq)\n          i\n          (recur (rest local-seq) (inc i)))))", "user": "582c203ae4b051871117bf80"}, {"problem": 22, "code": "(partial reduce (fn [acc _] (inc acc)) 0)", "user": "5782018de4b0d36ec5835e8e"}, {"problem": 22, "code": "#(loop [coll %1 size 0]\n  (if (empty? coll) \n    size\n    (recur (rest coll) (inc size))))", "user": "58954772e4b00487982d527b"}, {"problem": 22, "code": "#(loop [col % c 0] (if (empty? col) c (recur (rest col) (inc c))))", "user": "58f25609e4b08e1cf3471cff"}, {"problem": 22, "code": "(fn [s]\n  (loop [iteration 0\n         the-seq s]\n    (if (empty? the-seq)\n      iteration\n      (recur (inc iteration) (rest the-seq)))))", "user": "58f273d9e4b08e1cf3471d01"}, {"problem": 22, "code": "#(reduce (fn [s _] (inc s)) 0 %)", "user": "58e7eba2e4b056aecfd47cdf"}, {"problem": 22, "code": "(fn [x]\t(loop [s x c 0] (if (empty? s) c\t(recur (rest s) (inc c)))))", "user": "58ee51a4e4b056aecfd47da6"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "58f3e4aee4b0438e51c2ceb0"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "58f350d7e4b0438e51c2ce9e"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "58ecdc9ce4b056aecfd47d6c"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "58f45ea0e4b0438e51c2cebc"}, {"problem": 22, "code": "(fn count-seq [seq]\n     (if (not (= (first seq) nil))\n          (+ 1 (count-seq (rest seq)))\n          (+ 0 0)))", "user": "56ffeafee4b08d47c97781c2"}, {"problem": 22, "code": "#(loop [sq %, cnt 0] (if (empty? sq) cnt (recur (rest sq) (inc cnt))))", "user": "58f49268e4b0438e51c2cec0"}, {"problem": 22, "code": "(partial reduce (fn [x y](inc x)) 0)", "user": "58f5689de4b0438e51c2ced7"}, {"problem": 22, "code": "#(alength (to-array %))", "user": "58f1e70fe4b08e1cf3471cf2"}, {"problem": 22, "code": "(fn [lst] (reduce (fn [x y] (+ x 1)) 0 lst))", "user": "58eac340e4b056aecfd47d24"}, {"problem": 22, "code": "#(reduce (fn[x y](+ x 1)) 0 %)", "user": "58f75bf8e4b0438e51c2cf13"}, {"problem": 22, "code": "(fn ++\n  ([sq] (++ sq 0))\n  ([sq sum] \n    (if (empty? sq)\n      sum\n      (++ (rest sq) (inc sum)))))", "user": "578fc3d2e4b0ebec4cfb759b"}, {"problem": 22, "code": "reduce (fn [accum _] (inc accum)) 0", "user": "58f2e8fbe4b0438e51c2ce94"}, {"problem": 22, "code": "(fn [coll]\n(loop [the-count 0\n           rem-coll  coll]\n  (if (empty? rem-coll)\n     the-count\n     (recur (inc the-count) (rest rem-coll)))))", "user": "589b98fae4b00487982d533c"}, {"problem": 22, "code": "reduce (comp inc first vector) 0", "user": "5567f164e4b0c656e3ff184d"}, {"problem": 22, "code": "#(loop [coll %\n        counter 0]\n   (cond\n     (empty? coll) counter\n     :else (recur (rest coll) (inc counter))))", "user": "58ed0198e4b056aecfd47d72"}, {"problem": 22, "code": "(fn [s] (reduce (fn [a b] (inc a)) 0 s))", "user": "58f7dfe6e4b0438e51c2cf1f"}, {"problem": 22, "code": "(fn cnt [c] \n\u2002\u2002 ((fn cnt-recursive [c r]\n\u2002\u2002\u2002\u2002\u2002\u2002(if (first c)\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002 \n\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002(recur (rest c) (inc r))\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002 \n\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002r)) c 0)\u2002\u2002\u2002\u2002\n\u2002\u2002)\u2002\n\n;reduce (fn [c _] (inc c)) 0", "user": "58ebcabee4b056aecfd47d48"}, {"problem": 22, "code": "reduce #(inc (first %&)) 0", "user": "58f90aa2e4b0438e51c2cf41"}, {"problem": 22, "code": "(fn counts [xs] (if (empty? xs)\n                  0\n                  (inc (counts (rest xs)))))", "user": "58f8d79ee4b0438e51c2cf39"}, {"problem": 22, "code": "(fn [s]\n  (loop [es s\n         accum 1]\n    (if-not (next es)\n      accum\n      (recur (next es) (inc accum)))))", "user": "58ef93ece4b056aecfd47dca"}, {"problem": 22, "code": "(fn my-count [x] (cond\n                      (= () (rest x)) 1\n                      :else (+ (my-count (rest x)) 1)\n                 )\n)", "user": "58f92297e4b0438e51c2cf43"}, {"problem": 22, "code": "(fn [col] (reduce (fn [i j] (+ i 1)) 0 col))", "user": "58fb381ae4b0438e51c2cf71"}, {"problem": 22, "code": "(fn [x] (reduce (fn [a b] (+ a 1)) 0 x))", "user": "58fb5a03e4b0438e51c2cf77"}, {"problem": 22, "code": "(fn cardinality [list]\n  (loop [card 0 remaining list]\n    (if (empty? remaining)\n        card\n      (recur (inc card) (rest remaining)))))", "user": "58fb87efe4b0438e51c2cf7b"}, {"problem": 22, "code": "#(reduce (fn [a b] (inc a)) 0 %)", "user": "52aea49ce4b0c58976d9acad"}, {"problem": 22, "code": "(fn [s]\n  (loop [sequence s c 0]\n    (if (first sequence)\n      (recur (next sequence) (inc c))\n      c)))", "user": "58fb7d7ae4b0438e51c2cf7a"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "58f3a2d4e4b0438e51c2ceac"}, {"problem": 22, "code": "(fn [coll] (reduce (fn [total el] (+ total 1)) 0 coll))", "user": "58fc92c5e4b0438e51c2cf9a"}, {"problem": 22, "code": "(fn [c]\n   (reduce (fn [acc x] (+ acc 1)) 0 c))", "user": "58ec5e86e4b056aecfd47d5f"}, {"problem": 22, "code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "53dbca12e4b094d41abdfef6"}, {"problem": 22, "code": "(fn [the_seq]\n  (loop [num_elements 0\n         tmp_seq the_seq]\n    (if (empty? tmp_seq)\n      num_elements\n      (recur (+ num_elements 1) (rest tmp_seq)))))", "user": "56c12aa2e4b0839206b9d682"}, {"problem": 22, "code": "#(.size (seq %))", "user": "58fdbf59e4b0438e51c2cfbc"}, {"problem": 22, "code": "#(reduce (fn [x,y] (inc x)) 0 %)", "user": "58fe40afe4b0438e51c2cfca"}, {"problem": 22, "code": "(fn my-count [lista]\n  (if (empty? lista) 0\n  (inc (my-count (rest lista)))))", "user": "58fdd7b7e4b0438e51c2cfc0"}, {"problem": 22, "code": "#(reduce (fn [item nextOne] \n           (inc item))\n         0\n         %\n  )", "user": "58fe8b36e4b0438e51c2cfd9"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "58ff76a5e4b0438e51c2cff2"}, {"problem": 22, "code": "#(reduce (fn [i x] (inc i)) 0 (seq %))", "user": "58f44c07e4b0438e51c2ceb7"}, {"problem": 22, "code": "(fn [coll]\n  (loop [coll coll\n         acc 0]\n    (if (empty? coll)\n      acc\n      (recur (rest coll) (+ acc 1)))))", "user": "58ffac9de4b0438e51c2cffd"}, {"problem": 22, "code": "(fn [input]\n  (loop [remainder input total 0]\n    (if (empty? remainder)\n      total\n      (recur (rest remainder) (+ 1 total)))))", "user": "58ffbabce4b0438e51c2d002"}, {"problem": 22, "code": "(fn size [coll]\n  ((fn inner [coll n]\n    (cond (empty? coll) n\n        :else (inner (rest coll)(inc n))))coll 0))", "user": "58ffaddee4b0438e51c2cffe"}, {"problem": 22, "code": "(fn [s]\n    (loop [s (seq s)\n           c 0]\n      (if (empty? s)\n        c\n        (recur (rest s) (inc c)))))", "user": "58fff18be4b0438e51c2d00c"}, {"problem": 22, "code": "(fn [xs] (reduce (fn [n x] (inc n)) 0 xs))", "user": "58ffbfbbe4b0438e51c2d004"}, {"problem": 22, "code": "#(reduce (fn [x y] (+ x 1)) 0 %)", "user": "590088bfe4b0438e51c2d026"}, {"problem": 22, "code": "(fn [s]\n  \t(loop [i 0]\n        (if (nth s i false)\n\t\t\t(recur (inc i))\n  \t\t\ti)))", "user": "59005094e4b0438e51c2d01e"}, {"problem": 22, "code": "#(.size (seq %))", "user": "58fd4c41e4b0438e51c2cfae"}, {"problem": 22, "code": "(fn count! [s] (if (= s []) 0 (+ 1 (count! (rest s)))))", "user": "5901158de4b0438e51c2d039"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "58fd82a8e4b0438e51c2cfb5"}, {"problem": 22, "code": "reduce (fn [a b] (inc a)) 0", "user": "58c505dae4b021aa9917ed32"}, {"problem": 22, "code": "reduce (fn [x y] (inc x)) 0", "user": "58ffc6cfe4b0438e51c2d008"}, {"problem": 22, "code": "reduce (fn [x y] (+ x 1)) 0", "user": "5900ad0ce4b0438e51c2d028"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5900d5cde4b0438e51c2d02e"}, {"problem": 22, "code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "58ef8a8ae4b056aecfd47dc7"}, {"problem": 22, "code": "(fn cnt [seqz]\n  (if (= seqz [])\n    0\n    (+ 1 (cnt (rest seqz)))))", "user": "59022c89e4b0438e51c2d052"}, {"problem": 22, "code": "(fn [coll] (reduce (fn [n _] (inc n)) 0 coll))", "user": "59024826e4b0438e51c2d053"}, {"problem": 22, "code": "(fn [s] (reduce #(do (comment %2) (inc %1)) 0 s))", "user": "590253e3e4b0438e51c2d055"}, {"problem": 22, "code": "(fn my-f\n ([coll] (my-f (rest coll) 1))\n ([coll len] \n        (if (empty? coll)\n          len\n          (my-f (rest coll) (inc len))\n          )\n        )\n)", "user": "58f774dee4b0438e51c2cf15"}, {"problem": 22, "code": "(fn [coll]\n  (loop [xs coll\n         n 0]\n    (if (empty? xs)\n      n\n      (recur (rest xs) (inc n)))))", "user": "560124b0e4b04bb52996e17b"}, {"problem": 22, "code": "(fn [lst]\n  (loop [i lst cnt 0]\n   (cond (empty? i) cnt\n     :t (recur (rest i)(inc cnt)))))", "user": "590273e1e4b0438e51c2d059"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "59035914e4b022d14a2aafaa"}, {"problem": 22, "code": "(fn [col] (reduce + (map (constantly 1) col)))", "user": "59021fede4b0438e51c2d04d"}, {"problem": 22, "code": "#(reduce (fn [x _]\n           (+ x 1)) 0 %)", "user": "590368afe4b022d14a2aafac"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "57d339e5e4b0bd073c202391"}, {"problem": 22, "code": "(fn [c] (reduce (fn [coll _] (inc coll)) 0 c))", "user": "58f3c18ee4b0438e51c2cead"}, {"problem": 22, "code": "#(let [f (fn [x c] (if (empty? x) c (recur (rest x) (+ 1 c)) ))]\n   (f %1 0))", "user": "5903c708e4b022d14a2aafb3"}, {"problem": 22, "code": "(fn [xs] (reduce + (map (fn[x] 1) xs)))", "user": "58eadeafe4b056aecfd47d28"}, {"problem": 22, "code": "(fn my-count [[_ & rest]]\n  (if (empty? rest)\n    1\n    (+ 1 (my-count rest))))", "user": "5906b1e8e4b047aa04b19938"}, {"problem": 22, "code": "reduce (fn [a b] (+ (if (number? a) a 0) 1)) \"asdf\"", "user": "5906d7e9e4b047aa04b1993f"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5906edb1e4b047aa04b19943"}, {"problem": 22, "code": "#(loop [c 0 s %] (if (empty? s) c (recur (+ c 1) (rest s))))", "user": "59073e0fe4b047aa04b19950"}, {"problem": 22, "code": "(fn [a] (reduce (fn [b c] (+ 1 b)) 0 a))", "user": "59075e3be4b047aa04b19955"}, {"problem": 22, "code": "(fn cnt [sq]\n  (->> sq frequencies vals (reduce +)))", "user": "59032c0fe4b022d14a2aaf9f"}, {"problem": 22, "code": "(fn [arr]\n  (->> arr\n       (map (fn [_] 1))\n       (apply +)))", "user": "58d9772de4b0a4d5acaab63c"}, {"problem": 22, "code": "(fn foo\n  [x]\n  ((fn bar\n    [x n]\n    (if (empty? x)\n      n\n      (bar (rest x) (+ n 1))))\n   x 0))", "user": "59077d7be4b047aa04b1995b"}, {"problem": 22, "code": "#(alength (to-array %))", "user": "5907af21e4b047aa04b19961"}, {"problem": 22, "code": "(fn [x] (reduce (fn [a b] (inc a)) 0 x))", "user": "5907f751e4b047aa04b1996c"}, {"problem": 22, "code": "(fn cnt [lst] (if (empty? lst) 0 (+ 1 (cnt (rest lst)))))", "user": "59078134e4b047aa04b1995c"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "59085adfe4b047aa04b19972"}, {"problem": 22, "code": "(fn [x]\n  (loop [sq x cnt 0]\n    (if (empty? sq)\n      cnt\n      (recur (rest sq) (inc cnt)))))", "user": "59089229e4b047aa04b1997c"}, {"problem": 22, "code": "(partial reduce (fn [cnt _] (inc cnt)) 0)", "user": "59074b7ce4b047aa04b19951"}, {"problem": 22, "code": "(fn nthh [l]  (if (empty? l) 0  (+ (nthh (rest l)) 1)))", "user": "560e8a4ae4b05f002753df4f"}, {"problem": 22, "code": "(fn [initial-seq] \r\n  (loop [cur-seq initial-seq cur-cnt 0] \r\n    (if (nil? cur-seq) \r\n      cur-cnt \r\n      (recur (next cur-seq) (inc cur-cnt)))))", "user": "584948fce4b089d5ab817ecc"}, {"problem": 22, "code": "(fn dumber[sq]\n\n  (reduce +(map (fn dumb [n]\n\n  1) sq)))", "user": "589ad631e4b00487982d531c"}, {"problem": 22, "code": "(fn [x] (alength (into-array x)))", "user": "59096794e4b047aa04b1999e"}, {"problem": 22, "code": "(fn my-count [s]\n  (if (= '() s)\n    0\n    (+ 1 (my-count (rest s)))))", "user": "59095df7e4b047aa04b1999b"}, {"problem": 22, "code": "#(reduce (fn [acc x]\n           (inc acc))\n         0 %)", "user": "590a30f8e4b047aa04b199ae"}, {"problem": 22, "code": "(fn [coll] (loop [a coll i 0] (if (empty? a) i (recur (rest a) (+ 1 i)))))", "user": "58ab572be4b0005cfeb1a72b"}, {"problem": 22, "code": "#(loop [s % c 0] \n   (if (empty? s)\n     c\n     (recur (rest s) (inc c))))", "user": "572ad0fde4b0f4d77e651244"}, {"problem": 22, "code": "(fn [l] \n  (apply + \n         (map (fn [& _] 1) (seq l))))", "user": "590935aee4b047aa04b19993"}, {"problem": 22, "code": "(fn [input-list] \n  (loop [length 0 temp-list input-list]\n   \t(if (= () temp-list)\n      \tlength\n      \t(recur (inc length) (rest temp-list))\n    ) \n  )\n)", "user": "5909b3f8e4b047aa04b199a4"}, {"problem": 22, "code": "(fn [seq]\n  (loop [c 0\n         rem seq]\n    (if (empty? rem)\n      c\n      (recur (inc c) (rest rem)))))", "user": "58ff5898e4b0438e51c2cfec"}, {"problem": 22, "code": "(fn num-elem\n   ([l] (num-elem l 0))\n   ([l cnt]\n    (if (empty? l)\n      cnt\n      (recur (rest l) (inc cnt)))))", "user": "590b3aeae4b047aa04b199d0"}, {"problem": 22, "code": "#(reduce (fn [a _] (inc a)) 0 %)", "user": "590b055ae4b047aa04b199c9"}, {"problem": 22, "code": "#(loop [cnt 0 mylist %] \n   (if \n     (empty? mylist) \n     cnt \n     (recur (inc cnt) (pop (vec mylist)))\n    )\n )", "user": "58f9fde7e4b0438e51c2cf56"}, {"problem": 22, "code": "(fn [xs] (reduce (fn [a b] (inc a)) 0 xs))", "user": "590cc457e4b047aa04b199f4"}, {"problem": 22, "code": "(fn [s] (reduce (fn [a c] (+ 1 a)) 0 s))", "user": "565131b3e4b0f29ec07d2e88"}, {"problem": 22, "code": "(fn [se](loop [li se cnt 0](if (empty? li)cnt(recur (rest li)(+ cnt 1)))))", "user": "590d0b3fe4b047aa04b199f9"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "590d0c31e4b047aa04b199fb"}, {"problem": 22, "code": "(fn countlength [lst] (loop [lst lst cnt 0] (if (= (first lst) nil) cnt (recur (rest lst) (inc cnt)))))", "user": "590d715ae4b047aa04b19a05"}, {"problem": 22, "code": "#(reduce (fn [a b] (inc a)) 0 %)", "user": "590e588ce4b047aa04b19a23"}, {"problem": 22, "code": "(fn [ls]\n  (reduce (fn [a b] (+ a 1)) 0 ls))", "user": "5828927ee4b051871117bf38"}, {"problem": 22, "code": "#(reduce (fn [x y]\n           (inc x)) 0 %)", "user": "590f283de4b047aa04b19a35"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "590d0bc8e4b047aa04b199fa"}, {"problem": 22, "code": "(fn [coll]\n  (reduce (fn [x y] (inc x)) 0 coll))", "user": "591072e0e4b0163c97b36ebc"}, {"problem": 22, "code": "(fn [x] (reduce + (map (fn[s] 1) x)))", "user": "58e5180ae4b056aecfd47c82"}, {"problem": 22, "code": "(fn myCount ([x] (myCount x 0))\n            ([x c] (if (empty? (rest x))\n                        (inc c)\n                        (myCount (rest x) (inc c))\n                     )\n             )\n )", "user": "53d5d43ce4b0e771c302544d"}, {"problem": 22, "code": "reduce (fn [a b] (inc a)) 0", "user": "5910a43de4b0163c97b36ebf"}, {"problem": 22, "code": "(fn [x] (reduce + (map (fn [y] 1) x)))", "user": "5911aa1de4b0163c97b36ed8"}, {"problem": 22, "code": "reduce (fn [x y](inc x)) 0", "user": "58fe599ce4b0438e51c2cfd0"}, {"problem": 22, "code": "#(reduce (fn [n _] (inc n)) 0 %)", "user": "590cb27de4b047aa04b199ee"}, {"problem": 22, "code": "(fn x ([a] (x a 1)) ([[a & b] m] (if b (x b (inc m)) m)))", "user": "569f6ab8e4b0542e1f8d1493"}, {"problem": 22, "code": "#(reduce (fn [a b]\n          (inc a)\n          )\n        0 %)", "user": "58f286e1e4b08e1cf3471d04"}, {"problem": 22, "code": "(fn cnt [lst] (if (empty? lst) 0 (inc (cnt (rest lst)))))", "user": "5912477be4b0163c97b36eec"}, {"problem": 22, "code": "(fn [x]\n  (let [acc 0]\n    ((fn [x acc]\n      (if (= () (take 1 x)) acc (recur (rest x) (+ 1 acc)))\n    ) x acc)\n  )\n)", "user": "590a7dbfe4b047aa04b199bc"}, {"problem": 22, "code": "(fn [y] (reduce (fn [x,z] (+ x 1)) 0 y))", "user": "59129074e4b0163c97b36ef1"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "591326f2e4b0163c97b36efc"}, {"problem": 22, "code": "(fn [x] ( (fn [y a] (if (empty? y) a (recur (rest y) (+ 1 a ))) ) x 0) )", "user": "4f7121cae4b07046d9f4f007"}, {"problem": 22, "code": "(fn [x]\n  (loop [ct 0 coll x]\n    (if (empty? coll)\n        ct\n        (recur (inc ct) (rest coll)))))", "user": "5913375de4b0163c97b36efe"}, {"problem": 22, "code": "#(reduce (fn [x y] (+ 1 x)) 0 %)", "user": "58d2af83e4b03c36ff7e5907"}, {"problem": 22, "code": "(fn cnt [l] \n  (reduce (fn add-one [c, le] (+ 1 c)) 0 l))", "user": "590bd0fee4b047aa04b199e3"}, {"problem": 22, "code": "#(reduce (fn [x y] (let [\n                        ret (+ x 1)\n                        _ (println \"s=\" ret)\n                        ] ret)) 0 %)", "user": "59131299e4b0163c97b36ef9"}, {"problem": 22, "code": "reduce (fn [a i] (+ 1 a)) 0", "user": "591315a6e4b0163c97b36efa"}, {"problem": 22, "code": ";(fn [lis] (loop [c 0 li lis]\n;    (if (empty? li) \n;         c\n;         (recur (+ c 1) (rest li)))))\n\n;#(loop [c 0 li %]\n;    (if (empty? li) \n;         c\n;         (recur (+ c 1) (rest li))))\n\nreduce (fn [a _] (+ 1 a)) 0", "user": "59156f0be4b0163c97b36f3d"}, {"problem": 22, "code": "#(reduce + 0 (map (fn [x] 1) %))", "user": "5911dc6de4b0163c97b36ede"}, {"problem": 22, "code": "(fn this [x] \n  (cond \n   (= () x) 0\n   :else (inc (this(rest x))))\n  )", "user": "59165082e4b09b4ee5954b88"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5916eb48e4b09b4ee5954b95"}, {"problem": 22, "code": "#(loop [a 0 b %]\n   (if (empty? b) a\n     (recur (inc a) (rest b))))", "user": "58120cfae4b0f478707a05ef"}, {"problem": 22, "code": "#(.length (vec %))", "user": "59175adde4b09b4ee5954b9a"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5916412ee4b09b4ee5954b87"}, {"problem": 22, "code": "(fn [x]\n  (reduce (fn [a x] (inc a)) 0 (into [] x))\n)", "user": "5822b578e4b04b46fc4b0fa4"}, {"problem": 22, "code": "(fn [xs]\n  (reduce (fn [x y] (+ x 1)) 0 xs))", "user": "5907a736e4b047aa04b1995e"}, {"problem": 22, "code": "(fn [in] (loop [i in c 0] (if (= '() i) c (recur (rest i) (inc c)))))", "user": "5918db70e4b09b4ee5954bbb"}, {"problem": 22, "code": "(fn my-count [mys]\n  (loop [mine mys num 0]\n    (if (empty? mine)\n      num\n      (recur (rest mine) (inc num)))))", "user": "507ee076e4b06ce648bcdbfc"}, {"problem": 22, "code": "(fn f1 [col] (cond (empty? col) 0                   \n                   :else (+ 1 (f1 (rest col)))))", "user": "59198ddce4b09b4ee5954bc5"}, {"problem": 22, "code": "(fn [coll]\n  (loop [x coll\n         sum 0]\n    (prn x sum)\n    (if (empty? x)\n      sum\n\t  (recur (drop 1 x) (inc sum)))))", "user": "59199cc3e4b09b4ee5954bc8"}, {"problem": 22, "code": "(fn [s] (reduce (fn [acc coll] (inc acc)) 0 s))", "user": "57f2bf56e4b0511f1d294df8"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "51b20b76e4b02f8f128bb960"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "591419e4e4b0163c97b36f17"}, {"problem": 22, "code": "#(loop [re 0 c %]\n   (if(empty? c) re\n   (recur (inc re)(rest c))))", "user": "5914614ce4b0163c97b36f23"}, {"problem": 22, "code": "(fn [x] \n  (+ \n   (.lastIndexOf (vec x) (last x)) 1))", "user": "591ac8ece4b09b4ee5954bdd"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "5919d209e4b09b4ee5954bcc"}, {"problem": 22, "code": "(fn [x] (if (string? x) (.length x) (.size x)))", "user": "4f6a90f4e4b07046d9f4ef9d"}, {"problem": 22, "code": "(fn count-a-seq [lat]\n  (reduce (fn [x y] (+ x 1)) 0 lat))", "user": "591c2f4ee4b09b4ee5954bfc"}, {"problem": 22, "code": "reduce (fn [a _] (inc a)) 0", "user": "591cc30be4b09b4ee5954c0a"}, {"problem": 22, "code": "(fn [x] (reduce (fn [a b] (inc a)) 0 x))", "user": "591cbc30e4b09b4ee5954c08"}, {"problem": 22, "code": "(fn [s] (alength (to-array s)))", "user": "591d31d7e4b09b4ee5954c11"}, {"problem": 22, "code": ";;#(reduce + (map (fn [x] 1) %))\n(fn[x] (reduce + (map (fn [y] 1) x)))", "user": "591da291e4b09b4ee5954c1e"}, {"problem": 22, "code": "(fn [seq] ((fn [seq cnt] (if (empty? seq) cnt (recur (rest seq) (+ cnt 1)))) seq 0))", "user": "591ed05de4b09b4ee5954c3a"}, {"problem": 22, "code": "(fn test [x] \n  (loop [sum 0 tail x]\n        (if (empty? tail)\n            sum\n            (recur (inc sum) (rest tail))\n        )\n  ))", "user": "591d320ee4b09b4ee5954c12"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "591e1eb7e4b09b4ee5954c2b"}, {"problem": 22, "code": "(fn [s] (reduce + (map (fn [i] 1) s)))", "user": "5903f0cde4b022d14a2aafb9"}, {"problem": 22, "code": "(fn [lst]\n  (loop [lst0 lst, c0 0]\n    (if (nil? lst0) c0\n      (recur (next lst0) (inc c0)))))", "user": "591f05b4e4b09b4ee5954c42"}, {"problem": 22, "code": "reduce (comp inc first vector) 0", "user": "4f29d9abe4b0d6649770a034"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %1))", "user": "591aceeee4b09b4ee5954bde"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "591f9a1fe4b09b4ee5954c4f"}, {"problem": 22, "code": "(fn [s] \n  (loop [x s c 0]\n    (if (empty? x)\n      c\n      (recur (next x) (inc c)))))", "user": "59203996e4b09b4ee5954c5b"}, {"problem": 22, "code": "#(reduce (fn [c e] (inc c)) 0 % )", "user": "5921084be4b09b4ee5954c6c"}, {"problem": 22, "code": "#(reduce (fn [t n] (inc t)) 0 %)", "user": "591f63e6e4b09b4ee5954c47"}, {"problem": 22, "code": "(fn [xs] \n  (->> xs\n       (map (constantly 1))\n       (reduce +)))", "user": "4db1b3951254ad5b4805fa6f"}, {"problem": 22, "code": "reduce (fn [cc _] (inc cc)) 0", "user": "592018d2e4b09b4ee5954c55"}, {"problem": 22, "code": "(fn a [s]\n  (if (not (seq s))\n    0\n    (+ 1 (a (rest s)))\n     )\n)", "user": "5921a080e4b09b4ee5954c77"}, {"problem": 22, "code": "(fn [x]\n  (loop [x x, amount 0]\n    (if (seq x)\n      (recur (rest x) (inc amount))\n      amount)))", "user": "5921a65be4b09b4ee5954c79"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "59223307e4b09b4ee5954c86"}, {"problem": 22, "code": "(fn[collection] (loop [sum 0, x collection] (if (= x '())  sum (recur (+ sum 1) (rest x)))))", "user": "59228b00e4b026ae38521281"}, {"problem": 22, "code": "(fn [coll]\n  (loop [coll coll, n 0]\n    (let [head (first coll)]\n      (if (nil? head)\n        n\n        (recur (rest coll) (+ n 1))))))", "user": "59225498e4b09b4ee5954c8c"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "5922a36ce4b026ae38521285"}, {"problem": 22, "code": "#(apply + (map (fn [_] 1) %))", "user": "591e0782e4b09b4ee5954c25"}, {"problem": 22, "code": "(fn [x]\n  (reduce (fn[a b] (+ a 1)) 0 x))", "user": "591f5124e4b09b4ee5954c45"}, {"problem": 22, "code": "#(reduce (fn [i _] (inc i)) 0 %)", "user": "52d9e126e4b09f7907dd13b1"}, {"problem": 22, "code": "#(reduce (fn [x _] (inc x))  0 %)", "user": "5923554ee4b0a390037439f2"}, {"problem": 22, "code": "(fn [x] (loop [index 0 currentColl x] (if (= (type currentColl) (type '())) index (recur (+ 1 index) (rest currentColl)))))", "user": "5924009ce4b072a2710fce45"}, {"problem": 22, "code": "(fn cn [x] (if (nil? (second x)) 1 (+ 1 (cn (rest x)))))", "user": "591e9813e4b09b4ee5954c36"}, {"problem": 22, "code": "(fn [xs] (reduce (fn [acc i] (inc acc)) 0 xs))", "user": "58e0a760e4b005f69f193c69"}, {"problem": 22, "code": "(fn c [x] (if (empty? x) 0 (+ 1 (c (rest x))) ))", "user": "5920cc6de4b09b4ee5954c62"}, {"problem": 22, "code": "(fn [collection] (reduce + (map (constantly 1) collection)))", "user": "591ea1e7e4b09b4ee5954c37"}, {"problem": 22, "code": "; #(.size (vec %1))\n\n;(fn my-count [v] \n;  (if (empty? v) 0 (+ 1 (my-count (rest v)))))\n     \n;(fn m ([v] (m v 0)) \n;   ([v n] (if (empty? v) n (recur (next v) (inc n)))))\n\n; reduce (fn [i _] (inc i)) 0\n;#(reduce (fn [sum _] (inc sum)) 0 %)\n; (partial reduce (fn [sum _] (inc sum)) 0)\n\n#(reduce + (map (constantly 1) %))", "user": "591d182ee4b09b4ee5954c10"}, {"problem": 22, "code": "(fn get-count [list]\n   (if (= '() list)\n     0\n     (+\n      1\n      (get-count\n       (rest list)))))", "user": "59273eefe4b072a2710fcec6"}, {"problem": 22, "code": "(fn [coll]\n  (loop [current-seq coll, element-no 1]\n    (if (empty? current-seq)\n      (dec element-no)\n      (recur (rest current-seq) (inc element-no)))))", "user": "58f547b1e4b0438e51c2ced4"}, {"problem": 22, "code": "#(reduce (fn [memo _] (+ 1 memo)) 0 %)", "user": "59279a89e4b072a2710fced3"}, {"problem": 22, "code": "#(loop [cnt 0\n        stuff %]\n   (if (empty? stuff)\n     cnt\n     (recur (+ cnt 1) (rest stuff))))", "user": "5915a0a5e4b09b4ee5954b73"}, {"problem": 22, "code": "(fn [s]\n  (loop [items s\n         cnt 0]\n    (if (nil? (first items))\n         cnt\n        (recur (rest items) (inc cnt)))))", "user": "5922599be4b09b4ee5954c8d"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "59234753e4b0a390037439ef"}, {"problem": 22, "code": "(fn cc [l] (if (empty? l) 0 (+ 1 (cc (rest l)))))", "user": "59258aa7e4b072a2710fce74"}, {"problem": 22, "code": "(fn [x]\n  (loop [c 0 l x]\n    (if (= (first l) nil)\n      c\n      (recur (inc c) (rest l)))))", "user": "592913d4e4b072a2710fcefb"}, {"problem": 22, "code": "#(reduce (fn [c _] (+ c 1)) 0 %)", "user": "5929a5f2e4b072a2710fcf09"}, {"problem": 22, "code": "(fn [xs]\n  (reduce (fn [a b] (inc a)) 0 xs))", "user": "5929bdf6e4b072a2710fcf0c"}, {"problem": 22, "code": "#((fn [col i]\n    (if (nil? (first col))\n      i\n      (recur (rest col) (inc i)))\n  ) %1 0)", "user": "5922f8a9e4b026ae3852128f"}, {"problem": 22, "code": "(fn [x] (+ 1 (last (map (fn [a b] (int a)) (range 100) x))))", "user": "592ac550e4b072a2710fcf27"}, {"problem": 22, "code": "reduce (fn [acc _] (inc acc)) 0", "user": "592af53be4b072a2710fcf2b"}, {"problem": 22, "code": "(fn [x]\n  (loop [remain x counter 0]\n    (if (empty? remain)\n      counter\n      (recur (rest remain) (inc counter)))))", "user": "592ac17ae4b072a2710fcf26"}, {"problem": 22, "code": "(fn [xs] (loop [rest-xs xs acc 0]\n           (if (empty? rest-xs)\n             acc\n             (recur (drop 1 rest-xs) (+ 1 acc)))))", "user": "592af6eee4b072a2710fcf2c"}, {"problem": 22, "code": "(fn count-seq [xs] (reduce (fn [sum _] (inc sum)) 0 xs))", "user": "592518e8e4b072a2710fce67"}, {"problem": 22, "code": "(fn my-count [coll] (reduce (fn [n _] (inc n)) 0 coll))", "user": "59273d74e4b072a2710fcec4"}, {"problem": 22, "code": "(fn [lat] (reduce (fn [x y] (+ x 1)) 0 lat))", "user": "592519cfe4b072a2710fce6b"}, {"problem": 22, "code": "(fn [s]\n  (reduce +\n          (map (fn [x] 1) s)))", "user": "592be28ae4b072a2710fcf49"}, {"problem": 22, "code": "#(if\n      (empty? %2)\n    %1\n    (recur (+ %1 1)  (rest %2))) 0", "user": "592d67e1e4b072a2710fcf6f"}, {"problem": 22, "code": "#(loop [c 0 l %1]\n    (if (empty? l)\n      c\n      (recur (inc c) (rest l))))", "user": "5901731ae4b0438e51c2d03d"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "592518bfe4b072a2710fce65"}, {"problem": 22, "code": "#(loop [ret 0\n         remaining %]\n    (if (empty? remaining)\n      ret\n      (recur (inc ret) (rest remaining))))", "user": "592db566e4b072a2710fcf7c"}, {"problem": 22, "code": "(fn [l & {:keys [n] :or {n 0}}]\n  (if (empty? l)\n    n\n    (recur (rest l) {:n (inc n)})))", "user": "58ebd6b3e4b056aecfd47d4c"}, {"problem": 22, "code": "#(reduce + (map (fn [a] (inc 0)) %))", "user": "592f4406e4b072a2710fcfc0"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "59251947e4b072a2710fce69"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "592edaf5e4b072a2710fcfaf"}, {"problem": 22, "code": "(fn cnn[lst] ((fn cnt[lst, i] (if (empty? (rest lst)) (inc i) (cnt (rest lst) (inc i)))   ) lst 0))", "user": "592d58b3e4b072a2710fcf6d"}, {"problem": 22, "code": "(fn [coll] (reduce (fn [n _] (inc n)) 0 coll))", "user": "54f8e998e4b01ecee9d88831"}, {"problem": 22, "code": "(fn[a](reduce (fn[x y] (inc x)) 0 a))", "user": "59300b0ee4b072a2710fcfd3"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "557c6ca6e4b05c286339e0c4"}, {"problem": 22, "code": "(fn [coll]\n  (reduce (fn [x y] (inc x)) 0 coll))", "user": "592fa9f8e4b072a2710fcfcb"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "592749e4e4b072a2710fcec8"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5931e6cbe4b072a2710fd025"}, {"problem": 22, "code": "#(reduce (fn [acc e] (inc acc)) 0 %)", "user": "59331397e4b072a2710fd046"}, {"problem": 22, "code": "(fn prestej [sez]\n  (cond\n   (empty? sez) 0\n   :else (inc (prestej (rest sez)))))", "user": "584d99c5e4b0b7285a6f4e42"}, {"problem": 22, "code": "(fn [lst]\n  (loop [l lst\n         res 0]\n    (if (empty? l)\n      res\n      (let [[x & xs] l]\n        (let [newRes (+ 1 res)]\n          (recur xs newRes)\n        )\n      )\n    )\n  )\n)", "user": "59333f35e4b072a2710fd04c"}, {"problem": 22, "code": "#(reduce (fn [acc val] (+ acc 1)), 0, %)", "user": "592c2f3ee4b072a2710fcf53"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "593289b6e4b072a2710fd038"}, {"problem": 22, "code": "(fn f [xs] (if (= [] xs) 0 (inc (f (rest xs)))))", "user": "5933b736e4b072a2710fd05d"}, {"problem": 22, "code": "#((fn [a s]\n    (if (empty? s)\n      a\n      (recur (inc a) (rest s))))\n   0 %)", "user": "59342e52e4b072a2710fd06b"}, {"problem": 22, "code": "#(reduce (fn [acc x]\n           (inc acc))\n         0 %)", "user": "592c64ffe4b072a2710fcf57"}, {"problem": 22, "code": "(fn [lst]\n  (loop [i lst cnt 0]\n   (cond (empty? i) cnt\n     :t (recur (rest i)(inc cnt)))))", "user": "592b7269e4b072a2710fcf3f"}, {"problem": 22, "code": "(fn [y] (reduce (fn [acc x]\n           (inc acc))\n         0 y))", "user": "59259efbe4b072a2710fce79"}, {"problem": 22, "code": "(fn [a] (loop [a a b 0] (if (= nil (seq a)) b (recur (rest a) (inc b)))))", "user": "5934a43ce4b072a2710fd07e"}, {"problem": 22, "code": "(fn  [s]\n        (loop [i 0\n               s s]\n          (if (empty? s)\n            i\n            (recur (+ 1 i) (drop-last s)))))", "user": "59301509e4b072a2710fcfd6"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5935151ee4b072a2710fd084"}, {"problem": 22, "code": "(fn [data]\n  (loop [x data , it 0]\n    (if (nil? (first x))\n      it\n      (recur (drop 1 x) (inc it))\n    )\n  )\n)", "user": "59313dc1e4b072a2710fd00a"}, {"problem": 22, "code": "(fn count' [s]\n (loop [r s\n        cnt 0]\n   (if (empty? r)\n     cnt\n     (recur (rest r) (inc cnt)))))", "user": "59362afee4b0d6bb3c60df69"}, {"problem": 22, "code": "(fn [l] (loop [tmp l c 0] (if (empty? tmp) c (recur (rest tmp)(inc c)))))", "user": "59368ccae4b02506e01a297a"}, {"problem": 22, "code": "reduce (fn [a _] (inc a)) 0", "user": "5935b010e4b04f87174def55"}, {"problem": 22, "code": "(fn sample [coll]\n  (reduce + (map (constantly 1) coll))\n  )", "user": "591f2e4ae4b09b4ee5954c44"}, {"problem": 22, "code": "reduce (fn [val _] (inc val)) 0", "user": "5931e498e4b072a2710fd024"}, {"problem": 22, "code": "reduce (fn [x, _] (inc x)) 0", "user": "5936fabce4b02506e01a298c"}, {"problem": 22, "code": "(fn [x]\n  (loop [counter 0 elements x]\n    (if (empty? elements)\n      counter\n      (recur (inc counter) (rest elements)))))", "user": "5936a67de4b02506e01a2982"}, {"problem": 22, "code": "#(loop [cnt 0 data %]\n    (if (= data '())\n\tcnt\n    (recur (+ cnt 1) (rest data))))", "user": "59368db1e4b02506e01a297b"}, {"problem": 22, "code": "(fn [listy]\n  (loop [iteration 0 l listy]\n    (if (empty? l)\n      iteration \n      (recur (inc iteration) (rest l)))))", "user": "59369515e4b02506e01a297e"}, {"problem": 22, "code": "(fn [s]\n  (loop [x 0 tmp s]\n    (if (empty? tmp)\n      x\n    (recur (inc x) (rest tmp))))\n)", "user": "59368ccae4b02506e01a2979"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "59368efbe4b02506e01a297d"}, {"problem": 22, "code": "(fn count-elements [coll]\n  (if (empty? (rest coll))\n    1\n    (+ 1 (count-elements (rest coll)))))", "user": "593870e6e4b02506e01a29d6"}, {"problem": 22, "code": "(fn [x]\n  (reduce + (map (constantly 1) x))\n   )", "user": "59385840e4b02506e01a29c9"}, {"problem": 22, "code": "(fn cnt [x] (if (empty? x)\n                0\n                (+ 1 (cnt (rest x)))))", "user": "59346d29e4b072a2710fd077"}, {"problem": 22, "code": "(fn [x]\n  ((fn [listValue] \n    (loop [y listValue ret 0]\n      (if (empty? y)\n        ret\n        (recur (rest y) (inc ret))))) \n   (seq x)))", "user": "58cf8f97e4b03c36ff7e58b7"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5939bcb4e4b069cdc2982b3e"}, {"problem": 22, "code": "(fn[num_list](alength(to-array num_list)))", "user": "5939b9f9e4b069cdc2982b3d"}, {"problem": 22, "code": "(fn foo [coll]\n  (loop [c coll\n         cont 0]\n    (if (not (empty? (rest c)))\n      (recur (rest c) (inc cont))\n      (inc cont))))", "user": "5829d9f8e4b051871117bf4d"}, {"problem": 22, "code": "#(reduce (fn [x y] (+ x 1)) 0 %)", "user": "5938bca5e4b02506e01a29eb"}, {"problem": 22, "code": "(fn [lat](reduce (fn [x y] (+ x 1)) 0 lat))", "user": "5939bcb6e4b069cdc2982b3f"}, {"problem": 22, "code": "#(->> % (frequencies) (vals) (reduce +))", "user": "592dbbd5e4b072a2710fcf7f"}, {"problem": 22, "code": "(fn [coll]\n  (reduce\n    (fn [x,y] (+ x 1))\n    0\n    coll)\n  )", "user": "5935b92de4b04f87174def56"}, {"problem": 22, "code": "reduce #(do %& (inc %1)) 0", "user": "593bf921e4b069cdc2982b84"}, {"problem": 22, "code": "(fn [v] (reduce (fn [a b] (inc a)) 0 v))", "user": "593744abe4b02506e01a299b"}, {"problem": 22, "code": "(fn [l] (reduce + (map (fn [e] 1) l)))", "user": "593c71cbe4b069cdc2982b90"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "591a6c9fe4b09b4ee5954bd6"}, {"problem": 22, "code": "(fn [s]\n  (loop [r s\n         i 0]\n    (if (empty? r)\n      i\n      (recur (rest r) (inc i)))))", "user": "593dde1be4b069cdc2982baf"}, {"problem": 22, "code": "(fn [coll] \n  (reduce + ((fn [seq] \n               (map (fn [x] 1) seq)) coll)))", "user": "57665169e4b0a07e8fc180a3"}, {"problem": 22, "code": "(fn\n    [c]\n    (loop [coll c i 0]\n      (if (first coll)\n        (recur (rest coll) (inc i))\n        i)))", "user": "593bdd84e4b069cdc2982b81"}, {"problem": 22, "code": "(fn f [x]\n  (if (empty? x)\n    0\n    (+ 1 (f (rest x)))))", "user": "593d6793e4b069cdc2982ba6"}, {"problem": 22, "code": "reduce (fn[a b](inc a)) 0", "user": "593db05ae4b069cdc2982bab"}, {"problem": 22, "code": ";#(reduce + (map (fn [x] 1) %))\n(partial reduce (fn [i a] (inc i)) 0)", "user": "5938be98e4b02506e01a29ec"}, {"problem": 22, "code": "(fn [coll]\n  (loop [my-coll coll acc 0]\n    (if (empty? my-coll)\n      acc\n      (recur (rest my-coll) (inc acc)))))", "user": "593dc5f4e4b069cdc2982bac"}, {"problem": 22, "code": "#(-> % to-array alength)", "user": "593dfe60e4b069cdc2982bb1"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "593b1739e4b069cdc2982b68"}, {"problem": 22, "code": "(fn my-count [s]\n  (if (nil? (first s))\n    0\n    (inc (my-count (rest s)))))", "user": "54bd9a60e4b0ed20f4ff6ee3"}, {"problem": 22, "code": "(fn [coll]\n  \t(loop [xs coll sum 0]\n  \t\t(if (= xs nil)\n          \tsum\n          (recur (next xs) (+ 1 sum)))))", "user": "593f95d8e4b069cdc2982be3"}, {"problem": 22, "code": "(fn [a] (alength (to-array a)))", "user": "593fcb0ce4b069cdc2982bea"}, {"problem": 22, "code": "reduce (fn [cc -] (inc cc)) 0", "user": "593f88dce4b069cdc2982be2"}, {"problem": 22, "code": "(fn ngitung [x]\n  (if (empty? x)\n    0\n    (+ 1 (ngitung (rest x)))))", "user": "593910eae4b02506e01a29f4"}, {"problem": 22, "code": "#(\n  (fn [acc [firstVal & restCol]]\n  \t(if (empty? restCol) acc\n      (recur (inc acc) restCol)\n    )\n  ) 1 %\n)", "user": "593eaadde4b069cdc2982bc2"}, {"problem": 22, "code": "#(reduce (fn [c e] (inc c)) 0 %)", "user": "593f8692e4b069cdc2982be1"}, {"problem": 22, "code": "#(reduce (fn [acc itm] (inc acc)) 0 %)", "user": "593e4b1fe4b069cdc2982bbb"}, {"problem": 22, "code": "#(reduce (fn [x y] (+ x 1)) 0 %)", "user": "59416be4e4b060784b3b78f5"}, {"problem": 22, "code": "(fn [coll]\n  (loop [result 0 col coll]\n    (if (empty? col)\n      result\n      (recur (inc result) (rest col)))))", "user": "593fba55e4b069cdc2982be7"}, {"problem": 22, "code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "593edddfe4b069cdc2982bca"}, {"problem": 22, "code": "reduce (fn [n s] (inc n)) 0", "user": "59419bdfe4b060784b3b78f7"}, {"problem": 22, "code": "reduce (fn [n x] (+ n 1)) 0", "user": "58c03ea1e4b021aa9917ece5"}, {"problem": 22, "code": "(fn hemeh [x]\n  (if (= x ())\n    0\n    (+ 1 (hemeh (rest (vec x))))))", "user": "59395adfe4b02506e01a29fb"}, {"problem": 22, "code": "(fn lol \n  [lst]\n  (if (empty? lst) 0\n    (+ 1 (lol (rest lst)))))", "user": "59390a35e4b02506e01a29f3"}, {"problem": 22, "code": "(fn [s]\n  (let [f (fn f [s n]\n            (if (seq s)\n              (f (rest s) (inc n))\n              n))]\n    (f s 0)))", "user": "59428923e4b060784b3b790f"}, {"problem": 22, "code": "(fn mycount\n  ([arr]\n  (mycount arr 0))\n  ([arr n]\n  (if (empty? arr)\n    n\n    (mycount (rest arr) (inc n)))))", "user": "5942a5a2e4b060784b3b7912"}, {"problem": 22, "code": "(fn [coll]\n  (loop [total 0 c coll]\n    (if (empty? c) total\n      (recur (inc total) (rest c)))))", "user": "594307c0e4b060784b3b7920"}, {"problem": 22, "code": "(fn [xs]\n  (reduce (fn [sum _] (inc sum)) 0 xs))", "user": "592518f0e4b072a2710fce68"}, {"problem": 22, "code": "#(reduce + 0 (map (fn [n] 1) %))", "user": "594263cbe4b060784b3b790a"}, {"problem": 22, "code": "(fn [lat] (reduce (fn [x y] (+ x 1)) 0 lat))", "user": "593e01cde4b069cdc2982bb3"}, {"problem": 22, "code": "(partial reduce (fn [x _] (inc x)) 0)", "user": "5943abb6e4b060784b3b792b"}, {"problem": 22, "code": "reduce (fn [a _] (inc a)) 0", "user": "527ba29de4b03e8d9a4a7594"}, {"problem": 22, "code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "5942b978e4b060784b3b7915"}, {"problem": 22, "code": "(fn [xs] (->> xs \n               (keep-indexed (fn [idx itm] idx))\n               last\n               inc))", "user": "59445ff2e4b0b03edd0057a8"}, {"problem": 22, "code": "(fn a [arr] (if (empty? arr) 0 (+ 1 (a (rest arr)))))", "user": "59449aa2e4b0b03edd0057ad"}, {"problem": 22, "code": "(fn [obj]\n  (loop [i 0\n         tmp-obj obj]\n    (if (= (first tmp-obj) nil)\n      i\n      (recur (+ i 1) (rest tmp-obj)))))", "user": "5944bd7fe4b0b03edd0057b0"}, {"problem": 22, "code": "(fn reducer [x] (reduce (fn [s z] (inc s)) 0 x))", "user": "59440e07e4b0b03edd00579a"}, {"problem": 22, "code": "reduce (fn [cc l] (inc cc)) 0", "user": "5945279ce4b07ddc2dafad6c"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %1))", "user": "591addcee4b09b4ee5954be1"}, {"problem": 22, "code": "(fn [coll] (reduce + (map (constantly 1) coll)))", "user": "59266364e4b072a2710fceab"}, {"problem": 22, "code": "(fn [c]\n  (loop [pos 0\n         coll c]\n  (if (empty? coll)\n    pos\n    (recur (inc pos) (rest coll)))))", "user": "58f0c5a3e4b056aecfd47df8"}, {"problem": 22, "code": "#(reduce (fn [acc x]\n           (inc acc))\n         0 %)", "user": "592518cde4b072a2710fce66"}, {"problem": 22, "code": "(partial reduce (fn [acc _] (inc acc)) 0)", "user": "594783bee4b07ddc2dafada1"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "593f9bbce4b069cdc2982be4"}, {"problem": 22, "code": "#(reduce (fn [a x] (inc a)) 0 %)", "user": "5947c6a6e4b07ddc2dafada7"}, {"problem": 22, "code": "(fn counting [s] \n  (if (empty? s) 0 (inc (counting (rest s))))\n)", "user": "5948117be4b07ddc2dafadae"}, {"problem": 22, "code": "#(loop[l %, r 0]\n   (if (nil? l)\n     r\n     (recur (next l) (inc r))))", "user": "594765cee4b07ddc2dafad9b"}, {"problem": 22, "code": "(fn [s] (loop [r s n 0] (if (empty? r) n (recur (rest r) (+ n 1)))))", "user": "59468de7e4b07ddc2dafad88"}, {"problem": 22, "code": "#(alength (to-array %))", "user": "59473563e4b07ddc2dafad97"}, {"problem": 22, "code": "#(inc (last (map (fn [x1 x2] x1) (range) %)))", "user": "59496129e4b07ddc2dafadd7"}, {"problem": 22, "code": "(partial (fn cnt [n xs] (if (= xs '()) n (cnt (+ n 1) (rest xs)))) 0)", "user": "59497f51e4b07ddc2dafaddd"}, {"problem": 22, "code": "#(reduce (fn [x y] (+ x 1)) 0 %)", "user": "5948c165e4b07ddc2dafadc9"}, {"problem": 22, "code": "(fn [coll]\n  ((fn f [coll n] \n    (if (empty? coll)\n    n\n    (f (rest coll) (inc n))\n    )\n  ) coll 0)\n  )", "user": "594a18dfe4b07ddc2dafadf3"}, {"problem": 22, "code": "(fn [s] (reduce (fn [n _] (inc n)) 0 s))", "user": "594a1475e4b07ddc2dafadf2"}, {"problem": 22, "code": "#(loop [x % \n       y 0]\n  (if (empty? x)\n    y\n    (recur (rest x) (inc y))))", "user": "590260cde4b0438e51c2d057"}, {"problem": 22, "code": "#(reduce (fn [a _] (inc a)) 0 %)", "user": "5797d3d2e4b039eba2ecb106"}, {"problem": 22, "code": "(fn [seq] \n  (reduce (fn [x y] (+ x 1)) 0 seq))", "user": "594ad6aae4b07ddc2dafae0e"}, {"problem": 22, "code": "#(if (seq %2)\n   (recur (inc %) (rest %2))\n   %)\n0", "user": "594880ade4b07ddc2dafadc2"}, {"problem": 22, "code": "#(loop [y %, acc 0] (if (empty? y) acc (recur (rest y)(inc acc))))", "user": "56b2652ae4b0982f16b37e04"}, {"problem": 22, "code": "#(reduce + (map (constantly 1 ) %))", "user": "5948adffe4b07ddc2dafadc6"}, {"problem": 22, "code": "reduce (fn [x _] (+ x 1)) 0", "user": "5926c254e4b072a2710fceb8"}, {"problem": 22, "code": "(fn do-count [list] \n  (loop [coll list cnt 0]\n    (if (= coll []) cnt \n      (recur (rest coll) (inc cnt)))))", "user": "594bb203e4b07ddc2dafae36"}, {"problem": 22, "code": "(partial reduce (fn [a b] (inc a)) 0)", "user": "594bc912e4b07ddc2dafae3e"}, {"problem": 22, "code": "(fn [x]\n  (loop [in x\n         out 0]\n    (if (empty? in)\n      out\n      (recur (rest in) (+ out 1)))))", "user": "594bd637e4b07ddc2dafae41"}, {"problem": 22, "code": "reduce (fn [x _] (inc x)) 0", "user": "594bdadce4b07ddc2dafae43"}, {"problem": 22, "code": "reduce (fn [d b] (inc d)) 0", "user": "580cc8bde4b0849f6811b725"}, {"problem": 22, "code": "#(loop\n   [i 0 seq %]\n   (let [seq-rest (rest seq)]\n\t(if (= seq '())\n      i\n      (recur (inc i) seq-rest))))", "user": "594be2cae4b07ddc2dafae48"}, {"problem": 22, "code": "reduce (fn [x _] (inc x)) 0", "user": "594c0bd7e4b07ddc2dafae56"}, {"problem": 22, "code": "(fn [xs]\n  (reduce \n   (fn [total current] \n     (inc total)) \n   0 xs))", "user": "594c2950e4b07ddc2dafae5c"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "594c9d4ce4b07ddc2dafae6a"}, {"problem": 22, "code": "(fn [y]\n  (loop [x y\n         result 0]\n    (if (not= [] x)\n      (recur (rest x)(inc result) )\n      result)))", "user": "594b3459e4b07ddc2dafae23"}, {"problem": 22, "code": "(fn len [l]\n  (if (empty? l) 0\n    (+ (len (rest l)) 1)))", "user": "594ce8e5e4b07ddc2dafae76"}, {"problem": 22, "code": "#(loop [cnt 0 inp %]\n   (if (empty? inp)\n     cnt\n     (recur (+ cnt 1) (rest inp))))", "user": "594bc7d6e4b07ddc2dafae3d"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "594d4c43e4b07ddc2dafae86"}, {"problem": 22, "code": "(fn [s] (let [i 0]\n          (loop [my-seq s \n                 my-iter i]\n           (if (= my-seq nil) \n             my-iter\n              (recur (next my-seq) (+ my-iter 1)))\n            )\n          )\n  )", "user": "59473583e4b07ddc2dafad98"}, {"problem": 22, "code": "(fn [s]\n  (loop [se s\n         c 0]\n    (if (seq se)\n      (recur (rest se) (inc c))\n      c)))", "user": "594db24ce4b07ddc2dafae98"}, {"problem": 22, "code": "(fn [lst]\n  (reduce (fn [a b] (inc a)) 0 (into [] lst)))", "user": "57994779e4b05b1deef9adbd"}, {"problem": 22, "code": "#(reduce (fn [acc x]\n           (inc acc))\n         0 %)", "user": "593ab583e4b069cdc2982b57"}, {"problem": 22, "code": "#(\n  loop [x % res 0]\n   (if (not= [] x)\n   (recur (rest x) (+ 1 res))\n  res\n  )\n)", "user": "594e3723e4b07ddc2dafaea8"}, {"problem": 22, "code": "(fn [seq]\n  (let [reducer (fn [acc seq]\n        \t\t  (inc acc))]\n    (reduce reducer 0 seq)))", "user": "594e31dde4b07ddc2dafaea6"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "594bb36ae4b07ddc2dafae37"}, {"problem": 22, "code": "(fn [x] (reduce + (map (fn [y] 1) x)))", "user": "578559a2e4b0ebec4cfb74da"}, {"problem": 22, "code": "(fn f [s]\n  (if (empty? s) 0\n    (inc (f (rest s))) ))", "user": "594c1baae4b07ddc2dafae59"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5938bae2e4b02506e01a29ea"}, {"problem": 22, "code": "#(reduce + (map (fn [_] 1) (seq %)))", "user": "594fdfdce4b066ee0a44ae85"}, {"problem": 22, "code": "(fn [coll] (reduce (fn [x c] (inc x)) 0 coll))", "user": "59504d83e4b066ee0a44ae92"}, {"problem": 22, "code": "(fn [s]\n  (loop [x s n 0]\n    (if (empty? x)\n      n\n      (recur (rest x) (+ n 1)))))", "user": "594cb88be4b07ddc2dafae6e"}, {"problem": 22, "code": "#(loop [result 0 c %]                                                                                                                             \n   (if(empty? c) result                                                                                                                       \n     (recur (inc result) (rest c))))", "user": "5847cd7de4b089d5ab817eaa"}, {"problem": 22, "code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "5951250fe4b066ee0a44aea6"}, {"problem": 22, "code": "(fn [sequ] (reduce (fn [res val] (+ res 1)) 0 (seq sequ)))", "user": "595041e8e4b066ee0a44ae90"}, {"problem": 22, "code": "#(loop [i 0 remaing (seq %)] (if (first remaing) (do (recur (inc i) (rest remaing))) i))", "user": "594cdbc1e4b07ddc2dafae75"}, {"problem": 22, "code": "(fn [vars] (loop [n 0 all vars] (if (empty? all) n (recur (inc n) (rest all)))))", "user": "57a497e8e4b0a966079561e4"}, {"problem": 22, "code": "#(reduce (fn [t e] (+ 1 t)) 0 %1)", "user": "595131bee4b066ee0a44aea9"}, {"problem": 22, "code": "(fn [ls] (reduce (fn [a y](+ a 1))  0 ls ))", "user": "590c449ae4b047aa04b199ea"}, {"problem": 22, "code": "#(loop [x % n 0] (if (empty? x) n (recur (rest x) (inc n))))", "user": "5952a815e4b066ee0a44aeca"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "594e6b8ce4b07ddc2dafaeac"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "59517c5fe4b066ee0a44aeb0"}, {"problem": 22, "code": "(fn [coll]\n  (loop [col coll\n         size 0]\n    (if (empty? col) size\n      (recur (drop-last col)\n             (+ size 1)))\n    ))", "user": "59503c5de4b066ee0a44ae8e"}, {"problem": 22, "code": "(fn [coll] (loop [coll coll\n                  res 0]\n             (if (= () coll)\n               res\n               (recur (rest coll) (inc res)))))", "user": "592334c7e4b0a390037439ee"}, {"problem": 22, "code": "(fn mycount [s] \n  (loop [s s n 0]\n    (if (empty? s)\n      n\n      (recur (rest s) (inc n)))))", "user": "5950f0bfe4b066ee0a44ae9f"}, {"problem": 22, "code": "reduce (fn [cnt vals] (inc cnt)) 0", "user": "59537716e4b066ee0a44aee5"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "59398053e4b06bcb72c555cb"}, {"problem": 22, "code": "(comp (partial reduce + 0) (partial map (constantly 1)))", "user": "5953bdb6e4b066ee0a44aeed"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5952d75ce4b066ee0a44aed4"}, {"problem": 22, "code": "(fn [seq] (reduce + (map (constantly 1) seq)))", "user": "593c653de4b069cdc2982b8f"}, {"problem": 22, "code": "(fn mycount [s & {:keys [i] :or {i 0}}]\n  (if (empty? s) i\n    (mycount (rest s) :i (inc i))))", "user": "594edde7e4b07ddc2dafaebe"}, {"problem": 22, "code": "#(reduce (\n          fn[x y] ( inc x ))\n         \t\t\t\t\t0 %)", "user": "5954ff28e4b066ee0a44af1b"}, {"problem": 22, "code": "#(reduce + (map (fn [& args] 1) %))", "user": "5955158be4b066ee0a44af1e"}, {"problem": 22, "code": "(fn [x] (.length (vec x)))", "user": "5955625fe4b066ee0a44af2f"}, {"problem": 22, "code": "(fn countti \n\t([lista]\n\t\t(if (empty? lista)\n\t\t0\n\t\t(+ 1 (countti (rest lista))))))", "user": "5954eef0e4b066ee0a44af17"}, {"problem": 22, "code": "(fn [parseq]\n  (loop [ps parseq ctr 0]\n    (if (seq ps)\n      (recur (next ps) (inc ctr))\n      ctr)))", "user": "58969420e4b00487982d52a4"}, {"problem": 22, "code": "(fn c ([x] (c x 0)) ([[x & y] n] (if y (c y (+ n 1)) (+ n 1))))", "user": "5928d4c0e4b072a2710fcef3"}, {"problem": 22, "code": "#(reduce (fn [a b](+ 1 a)) 0 %)", "user": "59406b94e4b069cdc2982bfd"}, {"problem": 22, "code": "reduce (fn [sum _] (inc sum)) 0", "user": "5956c6dae4b066ee0a44af61"}, {"problem": 22, "code": "(fn [x] (apply + (map #(-> % (do 1)) x)))", "user": "5956c939e4b066ee0a44af62"}, {"problem": 22, "code": "(fn [sequence]\n  (loop [xs sequence\n         size 0]\n    (if (empty? xs)\n      size\n      (recur (rest xs) (inc size)))))", "user": "5954108ae4b066ee0a44aef4"}, {"problem": 22, "code": "(fn [x]\n  (reduce (fn [sum s] (inc sum)) 0 x))", "user": "5958a0c8e4b066ee0a44af8c"}, {"problem": 22, "code": "#(apply + (map (constantly 1) %))", "user": "5958cef6e4b066ee0a44af94"}, {"problem": 22, "code": "#(reduce (fn [x y] (+ x 1)) 0 %)", "user": "5815f3dfe4b0f478707a0648"}, {"problem": 22, "code": "#(reduce (fn [x _] (inc x)) 0 %)", "user": "595914e0e4b066ee0a44af99"}, {"problem": 22, "code": "#(loop\n    [v %\n     acc 0]\n    (if (empty? v)\n      acc\n      (recur (rest v) (inc acc))))", "user": "595613d0e4b066ee0a44af45"}, {"problem": 22, "code": "(fn f [l] (if (empty? l)\n            0\n            (+ 1 (f (rest l)))\n           ))", "user": "595930f6e4b066ee0a44af9c"}, {"problem": 22, "code": "#((fn item-count [lst accum]\n  (if\n    (empty? lst) accum\n    (item-count (rest lst) (+ accum 1)))) % 0)", "user": "5959b0ede4b066ee0a44afaa"}, {"problem": 22, "code": "#(loop [coll % c 0] (if (empty? coll) c (recur (drop 1 coll) (inc c))))", "user": "55df2752e4b050e68259b3ed"}, {"problem": 22, "code": "(fn [list]\n\t(loop [sub_list list current_count 0]\n\t\t(if (empty? sub_list)\n\t\t\t\t\tcurrent_count\n\t\t\t\t\t(recur (rest sub_list) (inc current_count)))\n\t)\n)", "user": "5954cea2e4b066ee0a44af0a"}, {"problem": 22, "code": "#(reduce\n  (fn [c _] (inc c))\n  0 %)", "user": "595a2ab5e4b066ee0a44afb2"}, {"problem": 22, "code": "#(reduce + 0 (map (constantly 1) %))", "user": "595a885be4b066ee0a44afc4"}, {"problem": 22, "code": "#(loop [cnt 0 ls %]\n   (if (= ls '()) \n     cnt\n     (recur (+ cnt 1) (rest ls))))", "user": "59566d1de4b066ee0a44af54"}, {"problem": 22, "code": "(fn [x]\n   (loop [n 0 remaining x]\n     (if (empty? remaining) n\n         (recur (inc n ) (rest remaining)))))", "user": "5959c72ae4b066ee0a44afac"}, {"problem": 22, "code": "(fn [s]\n  (loop [x 0\n         s s]\n    (if (empty? s)\n      x\n      (recur (inc x)(rest s)))))", "user": "59248a78e4b072a2710fce59"}, {"problem": 22, "code": "(fn get-count [seq]\n  (if (empty? seq)\n    0\n    (+ 1 (get-count (drop 1 seq)))))", "user": "595b00f4e4b066ee0a44afd2"}, {"problem": 22, "code": "reduce (fn [a _] (inc a)) 0", "user": "595b864ee4b066ee0a44afdc"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "4f73591be4b07046d9f4f045"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "595bbab7e4b066ee0a44afe0"}, {"problem": 22, "code": "(fn [seq]\n  (+ 1 (first (last (map-indexed vector seq)))))", "user": "594c7c96e4b07ddc2dafae65"}, {"problem": 22, "code": "(fn size [coll]\n  (if (not (= coll nil))\n    (+ 1 (size (next coll)))\n    0))", "user": "57d711c5e4b0bd073c2023d5"}, {"problem": 22, "code": "(fn count-a-sequence\n  ([xs] (count-a-sequence xs 0))\n  ([xs acc]\n   (if (= () xs)\n     acc\n     (count-a-sequence (rest xs) (+ acc 1)))))", "user": "595c3782e4b066ee0a44aff2"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "595b7c12e4b066ee0a44afda"}, {"problem": 22, "code": "(fn [lst]\n  (loop [i lst cnt 0]\n   (cond (empty? i) cnt\n     :t (recur (rest i)(inc cnt)))))", "user": "595d0897e4b066ee0a44b00f"}, {"problem": 22, "code": "(fn cnt [l] (if (empty? l) 0 (+ 1 (cnt (rest l)))))", "user": "595ad1efe4b066ee0a44afcb"}, {"problem": 22, "code": "#(reduce (fn [acc item] (inc acc)) 0 %)", "user": "595d4996e4b066ee0a44b01d"}, {"problem": 22, "code": "(fn [collection]\n  (loop [coll collection\n         c 0]\n      (if (empty? coll)\n        c\n        (recur (rest coll) (inc c)))))", "user": "56478a82e4b0284900eef61e"}, {"problem": 22, "code": "(fn\n  [s]\n  ((fn [s n]\n    (if (= s ())\n      n\n      (recur (rest s) (inc n))))\n   s 0))", "user": "595e1ba7e4b066ee0a44b036"}, {"problem": 22, "code": "(fn [data & c]\n  (let [d (or c 0)]\n    (if (first data)\n      (recur (rest data) (inc d))\n      d)))", "user": "595e8728e4b066ee0a44b047"}, {"problem": 22, "code": "#(.size (vec %))", "user": "595eba88e4b066ee0a44b04e"}, {"problem": 22, "code": "(fn [coll]\n  (reduce (fn [acc v] (inc acc)) 0 coll))", "user": "5954edcbe4b066ee0a44af15"}, {"problem": 22, "code": "(fn howmany [x]\n  (if-not (seq (rest x))\n    1\n    (+ 1 (howmany (rest x)))\n  )\n)", "user": "595ed97fe4b066ee0a44b051"}, {"problem": 22, "code": "(fn [col]\n  (loop [s col\n         n 0]\n    (if (empty? s)\n      n\n      (recur (rest s) (inc n)))))", "user": "595ebf46e4b066ee0a44b04f"}, {"problem": 22, "code": "(fn cou [l](if (empty? l)0 (+ 1 (cou (rest l)))))", "user": "595e20e2e4b066ee0a44b037"}, {"problem": 22, "code": "reduce (fn [x a] (inc x)) 0", "user": "5953949be4b066ee0a44aeea"}, {"problem": 22, "code": "#(loop [i 0\n        coll %]\n   (if-not (empty? coll)\n     (recur (inc i) (rest coll))\n     i\n   )\n )", "user": "595a3b41e4b066ee0a44afb7"}, {"problem": 22, "code": "#(if (= (.getName (.getClass %)) \"java.lang.String\") (.length %) (.size %))", "user": "59595f85e4b066ee0a44afa1"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "594266cfe4b060784b3b790b"}, {"problem": 22, "code": "(fn [col] (loop [i col\n                 c 0]\n            (if (empty? i)\n              c\n              (recur (rest i) (inc c)))))", "user": "595fe3f6e4b066ee0a44b073"}, {"problem": 22, "code": "#(loop [xs %\n        n 0]\n   (if (empty? xs)\n     n\n     (recur (rest xs) (+ n 1))))", "user": "595fd721e4b066ee0a44b06e"}, {"problem": 22, "code": "(fn abc\n  ([xs] (abc xs 0))\n  ([xs acc] (if (empty? xs) acc (abc (rest xs) (+ 1 acc)))))", "user": "595fe942e4b066ee0a44b075"}, {"problem": 22, "code": "(fn my-count\n  ([s]\n  \t(my-count s 0))\n\n  ([s n]\n  (if (empty? s) \n  \tn\n  \t(my-count (rest s) (+ n 1)))))", "user": "5960e872e4b066ee0a44b093"}, {"problem": 22, "code": "#(loop [c % cnt 0] (if (empty? c) cnt (recur (rest c) (inc cnt))))", "user": "58fc52cee4b0438e51c2cf95"}, {"problem": 22, "code": "reduce (fn [x y] (inc x)) 0", "user": "59613e4ce4b066ee0a44b09b"}, {"problem": 22, "code": "#(loop [c    0\n        coll %1]\n   (if (empty? coll)\n     c\n     (recur (inc c) (rest coll))))", "user": "595c02a9e4b066ee0a44afeb"}, {"problem": 22, "code": "(partial reduce (fn [acc next] (+ 1 acc)) 0)", "user": "53dad484e4b0e771c30254ac"}, {"problem": 22, "code": "(fn cnt [c] (if (empty? c) 0 (inc (cnt (rest c)))))", "user": "59614d9ce4b066ee0a44b09d"}, {"problem": 22, "code": "#(loop [[f & r] % result 0] (if f (recur r (inc result)) result))", "user": "595f702ce4b066ee0a44b064"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "551aa167e4b091ff45eda99b"}, {"problem": 22, "code": "#(alength (to-array %))", "user": "58ea5bdce4b056aecfd47d1b"}, {"problem": 22, "code": "#(reduce + (map (fn [_] 1) %))", "user": "595d2041e4b066ee0a44b014"}, {"problem": 22, "code": "#(reduce (fn [counter element] (+ counter 1)) 0 %)", "user": "5962af8ce4b066ee0a44b0b8"}, {"problem": 22, "code": "(fn aaa [llist]\n  (if (= llist '())\n    0\n    (+ 1 (aaa (drop 1 llist)))))", "user": "595bc925e4b066ee0a44afe2"}, {"problem": 22, "code": "reduce (fn [acc _] (+ acc 1)) 0", "user": "55952410e4b0c79f6e1db962"}, {"problem": 22, "code": "#(second (last (map list % (iterate inc 1))))", "user": "59643bc1e4b0419fac63dc95"}, {"problem": 22, "code": "#(alength (to-array %))", "user": "59638fc5e4b066ee0a44b0cd"}, {"problem": 22, "code": "#(reduce + (map (fn [i] 1 ) %))", "user": "59636b6de4b066ee0a44b0c6"}, {"problem": 22, "code": "(fn \n  [arr] \n  ((fn [myarr cnt]\n    (if (empty? myarr)\n        cnt\n       (recur (rest myarr) (inc cnt))\n      )\n    )\n   arr 0)\n  )", "user": "59636b43e4b066ee0a44b0c4"}, {"problem": 22, "code": "(fn [arr]\n  (reduce + (map (fn[x] 1) arr))\n  )", "user": "59636ec9e4b066ee0a44b0c8"}, {"problem": 22, "code": "(fn [arr] ((fn [marr cnt]\n            (if (empty? marr)\n              cnt\n              (recur (rest marr) (inc cnt))))\n   arr 0))", "user": "59636b49e4b066ee0a44b0c5"}, {"problem": 22, "code": "(fn [x]\n  (reduce + (map (fn [b] 1) x)))", "user": "59636cc2e4b066ee0a44b0c7"}, {"problem": 22, "code": "(fn [arg] (reduce + (map (fn [x] 1) (vec arg))))", "user": "59636b37e4b066ee0a44b0c3"}, {"problem": 22, "code": "(fn [x] (reduce + (map (fn[x] 1) x)))", "user": "59637028e4b066ee0a44b0ca"}, {"problem": 22, "code": "#(loop [result 0 c %]\n    (if(empty? c) result\n(recur (inc result) (rest c))))", "user": "5911c8e1e4b0163c97b36edc"}, {"problem": 22, "code": "#(reduce (fn [a _] (inc a)) 0 %)", "user": "59638af5e4b066ee0a44b0cc"}, {"problem": 22, "code": "#(reduce (fn [acc e] (inc acc)) 0 %1)", "user": "595fd77ce4b066ee0a44b06f"}, {"problem": 22, "code": "#(loop [x %1 i 0]\n   (if (empty? x)\n   i\n   (recur (rest x) (inc i))))", "user": "5964c614e4b069c0a1a19770"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "559aa441e4b066d22e731f47"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "59648ce1e4b069c0a1a19769"}, {"problem": 22, "code": "#(loop [lst % c 0]\n    (if (empty? lst)\n        c\n        (recur (rest lst) (inc c))))", "user": "594cf4f1e4b07ddc2dafae77"}, {"problem": 22, "code": "#(reduce (fn [x y] (+ x 1)) 0 %)", "user": "5965a773e4b069c0a1a1978a"}, {"problem": 22, "code": "(fn [lst](loop [i lst cnt 0]\n   (cond (empty? i) cnt\n     :t (recur (rest i)(inc cnt)))))", "user": "55326aede4b09218d5f44f7c"}, {"problem": 22, "code": "#(reduce (fn [acc _] (inc acc)) 0 %)", "user": "58bd1ab9e4b0888cdc949d27"}, {"problem": 22, "code": "(fn [x] \n  (loop [initx (seq x) n 0]\n    (if (empty? initx)\n      n \n      (recur (drop-last initx) (inc n))\n    )\n  )\n)", "user": "595ba438e4b066ee0a44afdf"}, {"problem": 22, "code": "(fn [xs] (reduce (fn [sum x] (inc sum)) 0 xs))", "user": "59644d2ae4b069c0a1a19764"}, {"problem": 22, "code": "(fn [v] (apply + (map (fn [_] 1) (seq v))))", "user": "572b73d0e4b0cd1946bd0f3a"}, {"problem": 22, "code": "(fn [sq]\n  ((fn [sq cnt]\n    (cond\n     (empty? sq) cnt\n     :else (recur (rest sq) (+ cnt 1))))\n  sq 0))", "user": "59643a21e4b066ee0a44b0df"}, {"problem": 22, "code": "(fn self\n  ([xs] (self xs 0))\n  ([xs c] (if (empty? xs) c (self (rest xs) (+ 1 c)))))", "user": "596296e9e4b066ee0a44b0b6"}, {"problem": 22, "code": "reduce (fn [x y] (inc x)) 0", "user": "59663e77e4b069c0a1a1979f"}, {"problem": 22, "code": "#(last (map-indexed (fn [i _] (inc i)) %))", "user": "58ee84e5e4b056aecfd47dab"}, {"problem": 22, "code": "(fn [s] (loop [result 0 col s] (if (empty? col) result (recur (inc result) (rest col)))))", "user": "5966a214e4b069c0a1a197ab"}, {"problem": 22, "code": "(fn abc [x]\n  (if (seq? (seq x))\n    (+ 1 (abc (next x)))\n    0))", "user": "5965eb8de4b069c0a1a19796"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "59672436e4b069c0a1a197b1"}, {"problem": 22, "code": "#(loop [r % c 0] \n   (if (empty? r)\n     c\n     (recur (rest r) (inc c))\n     \n     ))", "user": "595c9406e4b066ee0a44affe"}, {"problem": 22, "code": "(fn [x] (apply + (map (fn [e] 1) x)))", "user": "5967ce67e4b069c0a1a197bf"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "55842bd7e4b05c286339e11c"}, {"problem": 22, "code": "(fn[col](reduce + (map (fn[_] 1) col)))", "user": "59692530e4b069c0a1a197e4"}, {"problem": 22, "code": "(fn [s] (reduce (fn [acc _] (inc acc)) 0 s))", "user": "59699da7e4b069c0a1a197eb"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "58f4bd3fe4b0438e51c2cec6"}, {"problem": 22, "code": "#(loop [coll %, size 0]\n  (if (empty? coll)\n    size\n    (recur (rest coll) (inc size))))", "user": "590b8607e4b047aa04b199db"}, {"problem": 22, "code": "(fn greet [x] (reduce (fn [val item] (+ 1 val)) 0 x))", "user": "5860d82de4b0f14aab7c87de"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "59538a2fe4b066ee0a44aee8"}, {"problem": 22, "code": "#(reduce (fn [acc _] (inc acc)) 0 %)", "user": "57b0af6be4b0fbc9809a2748"}, {"problem": 22, "code": "#(reduce (fn [n _] (+ n 1)) 0 (seq %))", "user": "596a5711e4b069c0a1a19802"}, {"problem": 22, "code": "(fn [x]\n  (let [seq-list (seq x)]\n    (loop [seq-list seq-list\n           counter 0]\n      (if (empty? seq-list) counter\n          (recur (rest seq-list) (inc counter))))))", "user": "596aaeefe4b069c0a1a19808"}, {"problem": 22, "code": "#(reduce (fn [x _] (inc x)) 0 %)", "user": "596a4fbce4b069c0a1a19800"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "596a43ace4b069c0a1a197fd"}, {"problem": 22, "code": "(fn [s] (loop [rv 0 rem s] (if (seq rem) (recur (inc rv) (rest rem)) rv)))", "user": "578021b4e4b0d36ec5835e73"}, {"problem": 22, "code": "(fn [x] (reduce (fn [index x] (+ index 1)) 0 x))", "user": "596b6aa1e4b069c0a1a19816"}, {"problem": 22, "code": "(fn [xs]\n  (loop [xs xs\n         n 0]\n    (if (first xs)\n      (recur (rest xs) (inc n))\n       n\n      )))", "user": "596b5f27e4b069c0a1a19813"}, {"problem": 22, "code": "(fn bermen\n  ([coll] (bermen coll 0))\n  ([coll c] (if (empty? coll) c (bermen (rest coll) (inc c)))))", "user": "596c1f25e4b069c0a1a19825"}, {"problem": 22, "code": "(fn [x] \n  (reduce (fn [counter x] (inc counter)) 0 x))", "user": "596c67fbe4b069c0a1a1982b"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "59674d60e4b069c0a1a197b3"}, {"problem": 22, "code": "(fn [lst] (loop [l lst n 0] (if (first l) (recur (rest l) (+ n 1)) n)))", "user": "596caee3e4b069c0a1a19837"}, {"problem": 22, "code": "(fn [x] \n  (loop [x x cnt 0]\n    (if (empty? x) cnt (recur (rest x) (+ cnt 1)))))", "user": "596cdd85e4b069c0a1a1983b"}, {"problem": 22, "code": "#(reduce + (map (constantly 1)%))", "user": "5964f9b0e4b069c0a1a19778"}, {"problem": 22, "code": ";;(fn[c] (loop[i 0 r c](if (next r) (recur (inc i) (rest r)) (inc i))))\n#(inc (last (map (fn [_ x] x) % (range))))", "user": "596e4c5be4b069c0a1a19864"}, {"problem": 22, "code": "(fn [coll] (reduce (fn [acc, e] (+ acc 1)) 0 coll))", "user": "596e2267e4b069c0a1a19860"}, {"problem": 22, "code": "(fn[x](loop[n 0 lista x](if(empty? lista)n (recur (inc n) (rest lista)))))", "user": "596b753fe4b069c0a1a19818"}, {"problem": 22, "code": "(fn [m] \n  (reduce (fn [b v] (inc b)) 0 m))", "user": "5398d042e4b0b51d73faaf00"}, {"problem": 22, "code": "#(loop [x %, y 0] \n  (if  (empty? x)\n      y\n  (recur (rest x) (inc y))))", "user": "596f6683e4b069c0a1a19877"}, {"problem": 22, "code": "(fn [c] (reduce (fn [n e] (inc n)) 0 c))", "user": "596fb563e4b01722bebd4c55"}, {"problem": 22, "code": "#(reduce (fn [s x] (inc s)) 0 %)", "user": "59708e38e4b01722bebd4c65"}, {"problem": 22, "code": "reduce (fn [a b] (inc a)) 0", "user": "595a4fb8e4b066ee0a44afba"}, {"problem": 22, "code": "#(reduce (fn [x _] (inc x)) 0 %)", "user": "5971763fe4b01722bebd4c72"}, {"problem": 22, "code": "reduce (fn [items _] (inc items)) 0", "user": "595e5bdbe4b066ee0a44b041"}, {"problem": 22, "code": "(fn countEle \n  ([someList]\n   (countEle 1 someList)\n  )\n  ([numEle [firstEle & others]]\n  (if (empty? others)\n    numEle\n    (+ numEle (countEle others))\n  )\n  )\n)", "user": "5972198ee4b01722bebd4c7d"}, {"problem": 22, "code": "(fn __\n      ([s] (__ s 0))\n      ([s n] (if (empty? s)\n               n\n               (recur (next s) (inc n)))))", "user": "5972844ce4b01722bebd4c86"}, {"problem": 22, "code": "reduce #(inc (first %&)) 0", "user": "5972fcf6e4b01722bebd4c92"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5972f089e4b01722bebd4c90"}, {"problem": 22, "code": "(fn [s]\n  (loop [i 0 s s]\n    (if (empty? s)\n      i\n      (recur (inc i) (rest s)))))", "user": "596539dce4b069c0a1a19783"}, {"problem": 22, "code": "(fn [col]\n  (let [b col]\n    (alength (to-array b))))", "user": "59636f66e4b066ee0a44b0c9"}, {"problem": 22, "code": "(fn cnt\n  ([s] (cnt s 0))\n  ([s n]\n   (if (= s ())\n     n\n     (cnt (rest s) (+ n 1)))))", "user": "59733c91e4b01722bebd4c9b"}, {"problem": 22, "code": "(fn [items]\n  (reduce\n      (fn [acc, item] (+ acc 1)) \n      0\n      items))", "user": "59735785e4b01722bebd4c9c"}, {"problem": 22, "code": "#(loop [cnt 0 array %]\n   (if (= nil (next array)) (+ 1 cnt)\n     (recur (inc cnt) (next array))))", "user": "57eb7213e4b0bfb2137f5b61"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5973202ee4b01722bebd4c97"}, {"problem": 22, "code": "(fn foo [lst]\n  (loop [items lst\n         cnt 0]\n    (if (empty? items) \n      cnt\n      (recur (rest items) (inc cnt)))))", "user": "55c216dde4b0e31453f64974"}, {"problem": 22, "code": "(fn [seq]\n  (loop [inner-list seq\n         index 0]\n      (if (empty? inner-list)\n        index\n        (recur (rest inner-list) (inc index)))))", "user": "58fed70de4b0438e51c2cfdd"}, {"problem": 22, "code": "(fn [c] (loop [coll c n 0](if (nil? (first coll))  n      (recur (rest coll) (inc n) ))))", "user": "597236fde4b01722bebd4c7f"}, {"problem": 22, "code": "(fn ccc [x]\n  (if (second x)\n    (+ 1 (ccc (rest x)))\n    1))", "user": "59736b0de4b01722bebd4c9e"}, {"problem": 22, "code": "#(->> % (map (fn [_] 1)) (reduce +))", "user": "59738d98e4b01722bebd4ca1"}, {"problem": 22, "code": "(fn length [items] (reduce (fn [acc item] (inc acc)) 0 items))", "user": "5975ed26e4b01722bebd4cd0"}, {"problem": 22, "code": "#(reduce (fn [a b] (inc a)) 0 %)", "user": "56215da7e4b03f08ee9a921b"}, {"problem": 22, "code": "#(loop [c 0\n        l %]\n   (if (empty? l) \n     c\n     (recur (inc c) (rest l))))", "user": "5974b12be4b01722bebd4cb1"}, {"problem": 22, "code": "(fn [count-me]\n  (loop [s count-me i 0]\n    (if-not (empty? s)\n      (recur (rest s) (inc i))\n      i)))", "user": "51127e8ee4b0350614f07a76"}, {"problem": 22, "code": "#(loop [x 0 y %] (if (empty? y) x (recur (inc x) (rest y))))", "user": "5977653be4b01722bebd4ced"}, {"problem": 22, "code": "(fn len [col]\n(reduce (fn [acc _] (inc acc)) 0 col)\n  )", "user": "5977887ae4b01722bebd4cf3"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "59690e79e4b069c0a1a197e0"}, {"problem": 22, "code": "#(reduce (fn [acc v] (inc acc)) 0 %)", "user": "59777e42e4b01722bebd4cf0"}, {"problem": 22, "code": "#(reduce (fn [n _] (inc n)) 0 %)", "user": "5977bb05e4b01722bebd4cf9"}, {"problem": 22, "code": "(fn f [sq]\n  (loop [ct 0 s sq]\n    (if\t(empty?\ts) ct\n      (recur (inc ct) (rest s)))))", "user": "59780ee5e4b01722bebd4d01"}, {"problem": 22, "code": "(fn [l] (reduce (fn [a b] (inc a)) 0 l))", "user": "5978305be4b01722bebd4d03"}, {"problem": 22, "code": "reduce (fn [acc _] (+ acc 1)) 0", "user": "5978b4c9e4b01722bebd4d13"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "58866b4fe4b0f1effa3b76d4"}, {"problem": 22, "code": "#(loop [s %1 c 0]\n   (if (empty? (rest s))\n     (inc c)\n     (recur (rest s) (inc c))))", "user": "5974d2ede4b01722bebd4cb6"}, {"problem": 22, "code": "(fn my-count \n  ([coll]\n   (my-count coll 0))\n  ([coll n]\n   (cond\n    (empty? coll) n\n    :else (recur (rest coll) (inc n)))))", "user": "596f01a5e4b069c0a1a19870"}, {"problem": 22, "code": "#(loop [lst % counte 0] (if (empty? lst) counte (recur (rest lst) (inc counte)) ))", "user": "5979cd36e4b02382a38ad1d8"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5979be51e4b02382a38ad1d6"}, {"problem": 22, "code": "#(reduce (fn [a i] (inc a)) 0 %)", "user": "597a8928e4b02382a38ad1ea"}, {"problem": 22, "code": "(fn [coll] (apply + (map (fn [x] 1) coll)))", "user": "593bccfae4b069cdc2982b7f"}, {"problem": 22, "code": ";(fn [args] \n;  (loop [counter 0\n;         obj args]\n;    (if (empty? obj)\n;      counter\n;      (recur (inc counter) (rest obj)))))\n;(fn [s] (reduce (fn [counter els] (inc counter)) 0 s)) \n(fn [s] (reduce + (map (fn [el] 1) s))  \n     )", "user": "5839efeae4b089d5ab817d47"}, {"problem": 22, "code": ";(fn [args]\n;  (loop [counter 0\n;         obj args]\n;    (if (empty? obj)\n;      counter\n;      (recur (inc counter) (rest obj)))))\n;\n;(fn [sq] (reduce (fn [counter el] (inc counter)) 0 sq))\n;\n(fn [sq] (reduce + (map (fn [el] 1) sq)))", "user": "597af3f7e4b02382a38ad1f0"}, {"problem": 22, "code": "(fn\n  [col]\n\t(loop [col (seq col) x 0]\n\t\t(if (first col)\n\t\t\t(recur (rest col) (inc x))\n\t\t\tx)))", "user": "590620e1e4b047aa04b1992c"}, {"problem": 22, "code": "(fn [s] (loop [s s c 0] (if (empty? s) c (recur (rest s) (inc c)))))", "user": "541adefbe4b01498b1a71a5f"}, {"problem": 22, "code": "(fn count-seq \n  ([s] (if (next s)\n         (count-seq s 1)\n         1))\n   ([s n] (if (next s)\n            (count-seq (rest s) (+ n 1))\n            n)))", "user": "597a7418e4b02382a38ad1e9"}, {"problem": 22, "code": "reduce #(-> %& first inc) 0", "user": "5976da27e4b01722bebd4ce3"}, {"problem": 22, "code": "(fn [s] \n  (reduce (fn [a b] (+ a 1)) 0 s))", "user": "597b814ae4b02382a38ad1fa"}, {"problem": 22, "code": "(fn [x]\n  (loop [i 0\n         r x]\n    (if (empty? r)\n      i\n      (recur (inc i) (rest r)))))", "user": "597baf5ce4b02382a38ad203"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "597614a3e4b01722bebd4cd5"}, {"problem": 22, "code": "(fn [s] (loop [i s c 0] (cond (empty? i) c :else (recur (rest i)(inc c)))))", "user": "597bac8be4b02382a38ad202"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5934705fe4b072a2710fd078"}, {"problem": 22, "code": "reduce (fn [a b] (+ a 1)) 0", "user": "597b878ee4b02382a38ad1fb"}, {"problem": 22, "code": "(fn [x] (->> x (map (constantly 1)) (reduce +)))", "user": "597d0e43e4b0dbe32238d095"}, {"problem": 22, "code": "reduce (fn [c a] (inc c)) 0", "user": "597dcb0ce4b0dbe32238d0a2"}, {"problem": 22, "code": "#(reduce (fn [n _] (inc n)) 0 %)", "user": "597e128ee4b0dbe32238d0a4"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "597e85d0e4b0dbe32238d0ae"}, {"problem": 22, "code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "596f691fe4b069c0a1a19878"}, {"problem": 22, "code": "(fn [s]\n  (loop [s s n 0]\n    (if (empty? s)\n      n\n      (recur (next s) (+ n 1)))))", "user": "585aeddbe4b0f14aab7c875b"}, {"problem": 22, "code": "#(loop [x % acc 0]\n   (if (empty? x)\n     acc\n     (recur (rest x) (inc acc))))", "user": "59358f74e4b04f87174def52"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "597f8c93e4b0dbe32238d0c1"}, {"problem": 22, "code": "#(loop [i 0 c %1] (if (empty? c) i (recur (inc i) (rest c) ) ) )", "user": "5370b02de4b0fc7073fd6e9a"}, {"problem": 22, "code": "#(reduce\n  (fn [accum _] (inc accum))\n  0 \n  %)", "user": "597f8984e4b0dbe32238d0bf"}, {"problem": 22, "code": "(fn getN [s] (if (empty? s) 0 (+ 1 (getN (rest s)))))", "user": "597fa3fbe4b021a7a535fdbf"}, {"problem": 22, "code": "(fn mycount [s] (if (empty? s) 0 (+ 1 (mycount (rest s)))))", "user": "59804b60e4b021a7a535fdcf"}, {"problem": 22, "code": "(fn [x] (reduce (fn [m y] (+ m 1)) 0 x))", "user": "57a2ba4ce4b0c3d858beb904"}, {"problem": 22, "code": "(fn[coll]\n   \n (loop [[head & tail] coll\n         i 1]\n    \n    (if (empty? tail)    \n    i\n   \t(recur tail (inc i) )\n     )\n  )\n  \n  \n  )", "user": "598085e6e4b021a7a535fdd3"}, {"problem": 22, "code": "(fn num-elements [s] \n  (reduce (fn incr [counter dummy] (inc counter)) 0 s))", "user": "597b43d4e4b02382a38ad1f4"}, {"problem": 22, "code": "#(reduce (fn [a _] (inc a)) 0 %)", "user": "5980dcd5e4b021a7a535fddb"}, {"problem": 22, "code": "; #(reduce + (map (constantly 1) %))\n#(reduce (fn [memo _] (inc memo)) 0 %)", "user": "5980f91ae4b021a7a535fddd"}, {"problem": 22, "code": "(fn c [s]\n  (if (empty? s)\n    0\n    (+ 1 (c (rest s)))))", "user": "597a4277e4b02382a38ad1e2"}, {"problem": 22, "code": "(fn [coll]\n  (reduce\n   (fn [n _] (inc n))\n   0 coll))", "user": "598216d9e4b021a7a535fdf8"}, {"problem": 22, "code": "(fn [collection] (alength (to-array collection)))", "user": "598210a6e4b021a7a535fdf7"}, {"problem": 22, "code": "reduce (fn [a n] (inc a)) 0", "user": "5981d03ae4b021a7a535fdf0"}, {"problem": 22, "code": "(fn [collection]\n         (loop [c 0\n                collection collection]\n           (if (empty? collection)\n             c\n             (recur (+ c 1) (rest collection)))))", "user": "597f8a4be4b0dbe32238d0c0"}, {"problem": 22, "code": "(fn [coll]\n  (loop [c coll n 0]\n    (if-not (seq c) \n      n\n      (recur (rest c) (inc n)))))", "user": "594bc16be4b07ddc2dafae39"}, {"problem": 22, "code": "(fn [x] (reduce + (map (fn [i] 1) x)))", "user": "595f9231e4b066ee0a44b065"}, {"problem": 22, "code": "(fn [s]\n  (loop [s s c 0]\n    (if (empty? s) c\n      (recur (rest s) (inc c)))))", "user": "59826556e4b021a7a535fdfe"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "598345ffe4b021a7a535fe11"}, {"problem": 22, "code": "#(reduce (fn [len el] (inc len)) 0 %)", "user": "59837909e4b021a7a535fe16"}, {"problem": 22, "code": "(fn [lst]\n  (loop [lst1 lst cnt 0]\n    (if (empty? lst1)\n      cnt\n      (recur (rest lst1)\n             (inc cnt)))))", "user": "547de0cbe4b0c51c1f4d72ff"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5982fbaae4b021a7a535fe06"}, {"problem": 22, "code": "#(alength (to-array %1))", "user": "5841b8dde4b089d5ab817e0d"}, {"problem": 22, "code": "(fn [a-list](reduce (fn [c a-list] (inc c)) 0 a-list))", "user": "5984c965e4b021a7a535fe3b"}, {"problem": 22, "code": "(fn [x] (reduce \n         (fn [a b]\n           (inc a)\n         ) \n         0 x))", "user": "5984b9f3e4b021a7a535fe33"}, {"problem": 22, "code": "#(reduce (fn [x y] (+ x 1)) 0 %)", "user": "598588f2e4b021a7a535fe65"}, {"problem": 22, "code": "(fn [s]\n  \t((fn [ss n]\n       \t(println ss n)\n      \t(if (not (seq ss)) n (recur (rest ss) (+ 1 n)))\n      ) s 0)\n  )", "user": "59858cdbe4b021a7a535fe66"}, {"problem": 22, "code": "#(loop [result 0 c %]\n    (if(empty? c) result\n    (recur (inc result) (rest c))))", "user": "597b72ede4b02382a38ad1f9"}, {"problem": 22, "code": "(fn cnt\n  [seq]\n  (case seq\n    [] 0\n    [s] 1\n    (+ 1 (cnt (rest seq)))))", "user": "59863a26e4b021a7a535fe87"}, {"problem": 22, "code": "(fn [coll] (reduce \n         (fn [x y]\n           (+ x 1)) 0 coll))", "user": "598612f9e4b021a7a535fe7e"}, {"problem": 22, "code": "(fn [coll] (reduce + (map (constantly 1) coll)))", "user": "598760aae4b021a7a535fea7"}, {"problem": 22, "code": "#(reduce (fn [a v] (+ a 1)) 0 (seq %))", "user": "5982d82be4b021a7a535fe05"}, {"problem": 22, "code": "#(reduce + (map (fn [_] (identity 1)) %))", "user": "59881937e4b021a7a535feaf"}, {"problem": 22, "code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "59884b32e4b021a7a535feb2"}, {"problem": 22, "code": "(fn [x] (reduce + (map (constantly 1) x)))", "user": "59753ddce4b01722bebd4cc1"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c))0 %)", "user": "54f2b1b5e4b050824f58f5b3"}, {"problem": 22, "code": "reduce (fn [acc, x] (inc acc)) 0", "user": "5845c8f6e4b089d5ab817e77"}, {"problem": 22, "code": "#(reduce (fn [a c] (inc a)) 0 %)", "user": "598858d0e4b021a7a535feb5"}, {"problem": 22, "code": "#(reduce (fn [c number] (inc c)) 0 %1)", "user": "5989e080e4b021a7a535fed6"}, {"problem": 22, "code": "(fn [sq]\n  (loop [cnt 0 s sq]\n    (if (empty? s) cnt (recur (inc cnt) (rest s)))))", "user": "598876fee4b021a7a535feb7"}, {"problem": 22, "code": "#(reduce + (map (fn [item] 1) %))", "user": "5989ee61e4b021a7a535fed7"}, {"problem": 22, "code": "(fn [coll] (inc (first (last (map-indexed vector coll)))))", "user": "591610d4e4b09b4ee5954b7e"}, {"problem": 22, "code": "(fn my-count [lis]\n  (reduce + (map (constantly 1) lis)))", "user": "598754e5e4b021a7a535fea3"}, {"problem": 22, "code": "#(->> % seq (map list (iterate inc 1)) last first)", "user": "597768d0e4b01722bebd4cee"}, {"problem": 22, "code": "(fn [uf] \n  (reduce (fn [x y] (+ x 1)) 0 uf))", "user": "5988f69fe4b021a7a535fec8"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5987f5b1e4b021a7a535fead"}, {"problem": 22, "code": "reduce (fn [s x] (inc s)) 0", "user": "598ab445e4b02b9968b84ce0"}, {"problem": 22, "code": "reduce (fn [x y] (+ x 1)) 0", "user": "598ad666e4b02b9968b84ce1"}, {"problem": 22, "code": "(fn f [x]\n  (if (empty? (rest x))\n    1\n    (inc (f (rest x)))))", "user": "598a4ff7e4b02b9968b84cda"}, {"problem": 22, "code": "#(alength (to-array %))", "user": "598229ebe4b021a7a535fdfc"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "598c8db8e4b02b9968b84d06"}, {"problem": 22, "code": "(fn [arr] (reduce (fn [acc el] (+ 1 acc)) 0 arr))", "user": "5845531de4b089d5ab817e63"}, {"problem": 22, "code": "#(alength (object-array %) )", "user": "598d0dc3e4b02b9968b84d18"}, {"problem": 22, "code": "(fn [x] (.length (vec x)))", "user": "598d22b1e4b02b9968b84d1a"}, {"problem": 22, "code": "(fn cnt [s]\n  (let [recnt (fn [what size]\n                (if (empty? what) size\n                  (recur (rest what)\n                         (inc size))))]\n    (recnt s 0)))", "user": "598dc40ce4b02b9968b84d2c"}, {"problem": 22, "code": "(fn [x]\n\t(loop [y x\n\t\t   result 0]\n\t\t(if (empty? y)\n\t\t\tresult\n\t\t\t(recur (next y) (inc result))\n\t\t)\n\t)\n)", "user": "598d746ae4b02b9968b84d23"}, {"problem": 22, "code": "#(reduce (fn [acc x] (+ acc 1)) 0 %)", "user": "598debf0e4b02b9968b84d2e"}, {"problem": 22, "code": "(fn [s] (reduce + (map #(do % 1) s)))", "user": "598e7998e4b02b9968b84d34"}, {"problem": 22, "code": "(fn [coll] (\n\t(fn [remaining c]\n\t\t(if (empty? remaining)\n\t\t\tc\n\t\t\t(recur (rest remaining) (+ c 1))))\n\tcoll 0))", "user": "598af379e4b02b9968b84ce6"}, {"problem": 22, "code": "(fn [x]\n  ((fn [x i]\n    (if (= '() x)\n      i\n      (recur (rest x) (inc i))))\n  x 0))", "user": "598f6e3fe4b0fcebec4de863"}, {"problem": 22, "code": "(fn [x] (reduce (fn [y z] (inc y)) 0 x))", "user": "598b209be4b02b9968b84cea"}, {"problem": 22, "code": "reduce (fn [kount _] (inc kount)) 0", "user": "596d630ae4b069c0a1a19846"}, {"problem": 22, "code": "#(loop\n   [coll %\n    n 0]\n   (if (nil? (first coll))\n     n\n     (recur (rest coll) (inc n))))", "user": "59902fede4b0fcebec4de86d"}, {"problem": 22, "code": "(fn [s]\n  (loop [s s c 0]\n    (if (empty? s)\n      c\n      (recur (rest s) (inc c)))))", "user": "598ff38ce4b0fcebec4de869"}, {"problem": 22, "code": "#(loop [coll %\n        counter 0]\n   (if (empty? coll)\n     counter\n     (recur (rest coll) (inc counter))))", "user": "5990bab4e4b0866487ed0d55"}, {"problem": 22, "code": "#(reduce (fn [acc _] (inc acc)) 0 %)", "user": "5990fcb9e4b0866487ed0d5b"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "598d10cae4b02b9968b84d19"}, {"problem": 22, "code": "(fn [coll]\n  (loop [i coll cnt 0]\n    (if\n      (empty? i)\n      cnt\n      (recur (rest i) (inc cnt)))))", "user": "5990a9fde4b0866487ed0d54"}, {"problem": 22, "code": "(fn [x]\n  (let [rec (fn [col sum]\n              (if (= [] (vec col))\n                sum\n                (recur (rest col) (+ 1 sum))))]\n    (rec x 0)))", "user": "59908f3fe4b0866487ed0d50"}, {"problem": 22, "code": "#(loop [result 0 coll %]\n    (if (empty? coll) \n      result \n      (recur (inc result) (rest coll))\n     ))", "user": "5991d9cbe4b0866487ed0d69"}, {"problem": 22, "code": "(fn count2 [l] (if (empty? l) \n                  0 \n                  (+ 1 (count2 (next l)))\n                 ))", "user": "5982478de4b021a7a535fdfd"}, {"problem": 22, "code": "#(reduce (fn [acc i] (inc acc)) 0 %)", "user": "5992dc6ae4b0866487ed0d7d"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "5992de05e4b0866487ed0d7e"}, {"problem": 22, "code": "(fn [lst] (reduce (fn [acc val] (+ acc 1)) 0 lst))", "user": "59933537e4b0b211ea3aaaaf"}, {"problem": 22, "code": "(fn [x]\n  (loop [i 0 coll x]\n    (if (empty? coll)\n      i\n      (recur (inc i) (rest coll))\n      )\n    )\n  )", "user": "59932dc1e4b0b211ea3aaaad"}, {"problem": 22, "code": "(fn [col]\n  (let [f (fn [x y] y)\n        oneToInf (iterate inc 1)]\n    (last (map f col oneToInf))))", "user": "59932f49e4b0b211ea3aaaae"}, {"problem": 22, "code": "(fn [xs]\n  (reduce + (map (fn [x] (identity 1)) xs)))", "user": "5993b28ee4b0b211ea3aaaba"}, {"problem": 22, "code": "(fn [a]\n      (loop [in a\n             counter 0]\n        (if (empty? in) counter (recur (rest in) (+ counter 1) ))))", "user": "5989cebfe4b021a7a535fed3"}, {"problem": 22, "code": "(fn [x]\n  (if (instance? String x) (.length x) (.size x)))", "user": "59639142e4b066ee0a44b0ce"}, {"problem": 22, "code": "#(loop [l % n 0]\n   (if (empty? l) \n     n \n     (recur (rest l) (inc n))))", "user": "599475aae4b0b211ea3aaac8"}, {"problem": 22, "code": ";;#(reduce (fn [c e] (inc c)) 0 %)\n(fn [coll] (reduce (fn [acc v] (inc acc)) 0 coll))", "user": "59944e73e4b0b211ea3aaac2"}, {"problem": 22, "code": "#(reduce\n  (fn [m e]\n    (inc m)\n  )\n  0\n  %)", "user": "59946541e4b0b211ea3aaac5"}, {"problem": 22, "code": "reduce (fn [acc _] (inc acc)) 0", "user": "5995cc1ae4b0b211ea3aaae8"}, {"problem": 22, "code": "(fn [coll]\n\t(loop [i 0 items coll]\n     \t(if (empty? items)\n         \ti\n          \t(recur (inc i) (rest items))\n         )\n     ) \n)", "user": "5991d2fae4b0866487ed0d68"}, {"problem": 22, "code": "(fn [s] (reduce (fn [n _] (inc n)) 0 s))", "user": "598229d6e4b021a7a535fdfb"}, {"problem": 22, "code": "(fn mycount\n  ([s] (mycount s 0))\n  ([s, i]\n   (if (nth s i nil)\n     (recur s (inc i))\n     i)))", "user": "5996cce8e4b07157cc8daab9"}, {"problem": 22, "code": "(fn length [lst]\n  (if (empty? lst)\n    0\n  \t(+ 1 (length (rest lst)))))", "user": "59971e2de4b07157cc8daacc"}, {"problem": 22, "code": "reduce (comp inc first list) 0", "user": "59967c40e4b0b211ea3aaaf2"}, {"problem": 22, "code": "reduce (fn [cnt col] (inc cnt)) 0", "user": "59874ff6e4b021a7a535fea1"}, {"problem": 22, "code": "reduce (fn [cc _] (inc cc)) 0", "user": "59987f02e4b07157cc8daae7"}, {"problem": 22, "code": "(fn [col]\n  (let [items (seq col)]\n    (reduce (fn [acc v] (+ acc 1)) 0 items)))", "user": "575c3592e4b02ea11479936c"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5999648ce4b07157cc8daaf3"}, {"problem": 22, "code": "(fn [xs]\n  (reduce\n   (fn [acc _] (inc acc))\n   0 xs)\n  )", "user": "55b28b57e4b01b9910ae296c"}, {"problem": 22, "code": "#(reduce (fn [n _] (inc n)) 0 %)", "user": "59946856e4b0b211ea3aaac7"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "5999fe10e4b07157cc8dab02"}, {"problem": 22, "code": "(fn [s]\n  (loop [s s\n         c 0]\n    (if (seq s)\n      (recur (rest s) (+ 1 c))\n      c)))", "user": "59971dcbe4b07157cc8daacb"}, {"problem": 22, "code": "(fn mycount [xs]\n  (cond\n    (empty? xs) 0\n    :else (+ 1 (mycount (rest xs)))))", "user": "5998643de4b07157cc8daae3"}, {"problem": 22, "code": "#(loop [s %\n        c 0]\n   (if (empty? s)\n     c\n     (recur (rest s) (+ c 1))\n            )\n     )", "user": "5999cff3e4b07157cc8daafc"}, {"problem": 22, "code": "(fn [lst] (reduce + (map (fn [x] 1) lst)))", "user": "599acb39e4b07157cc8dab14"}, {"problem": 22, "code": "(fn [s] (loop [s s n 0] (if (empty? s) n (recur (rest s) (inc n)))))", "user": "5995f8ade4b0b211ea3aaae9"}, {"problem": 22, "code": "(fn count_items [x]\n  (if (= (first x) nil) 0 (+ (count_items (rest x)) 1)))", "user": "599a033ce4b07157cc8dab04"}, {"problem": 22, "code": "(fn [s] (reduce + (map (fn [x] 1) s)))", "user": "5996709ee4b0b211ea3aaaf1"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "599c454ee4b0871e7608b7e0"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "599b845ee4b010b4cc4bca09"}, {"problem": 22, "code": "(fn [input1]\n\t(loop [list input1 rst 0]\n\t\t(if (empty? list) rst\n\t\t\t(recur (rest list) (inc rst)))))", "user": "5996fd2be4b07157cc8daac5"}, {"problem": 22, "code": "(fn [xs]\n  (loop [l xs acc 0]\n   \t\t(if (empty? l)\n          acc\n          (recur (rest l) (inc acc))\n    ))\n  )", "user": "5996b419e4b07157cc8daab5"}, {"problem": 22, "code": "(fn func([x] (func x 0)) \n     ([x y]\n     (if (empty? x) y\n         (func (drop 1 x) (inc y))\n     )))", "user": "599b457ae4b07157cc8dab1f"}, {"problem": 22, "code": "(fn [col] \n  (loop [bcol col y 0]   \n    (if (= (set bcol) (set '()))\n    \ty\n      (recur (rest bcol) (inc y)))))", "user": "599d8e82e4b0871e7608b7f9"}, {"problem": 22, "code": "(fn [s] (reduce + (map (constantly 1) s)))", "user": "599d49a7e4b0871e7608b7f4"}, {"problem": 22, "code": "reduce (fn [x y] (+ x 1)) 0", "user": "58278f54e4b051871117bf26"}, {"problem": 22, "code": "(fn [s] (reduce (fn [v, i] (inc v)) 0 s))", "user": "4fe61bdde4b0e8f79898fecf"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "599df601e4b0871e7608b801"}, {"problem": 22, "code": "#(loop [li %1 c 0]\n  (if\n \t(empty? li) c\n  \t (recur (rest li) (inc c))\n   )\n    )", "user": "5831846ae4b051871117c02c"}, {"problem": 22, "code": "(fn [coll] (loop [xst coll cnt 0]  (if (empty? xst) cnt (recur (rest xst) (inc cnt)) )))", "user": "599ed08fe4b0871e7608b812"}, {"problem": 22, "code": "(fn [xs] (reduce (fn [acc x] (+ acc 1)) 0 xs))", "user": "594be1cce4b07ddc2dafae47"}, {"problem": 22, "code": "#(loop [result 0 coll %]\n   (if (empty? coll)\n     result\n     (recur (inc result) (rest coll))\n   )\n)", "user": "59a06dbce4b0871e7608b834"}, {"problem": 22, "code": "(fn [s]\n     (reduce (fn [acc _] (inc acc)) 0 s))", "user": "594ea2a4e4b07ddc2dafaeb6"}, {"problem": 22, "code": "(fn\n  [lst]\n  (loop [cnt 0\n         my-lst lst]\n    (if (empty? my-lst)\n      cnt\n      (recur (inc cnt) (drop 1 my-lst)))))", "user": "59a0235de4b0871e7608b82b"}, {"problem": 22, "code": "(fn [coll1]\n  (reduce \n   (fn([val1 _](inc val1))) 0 coll1))", "user": "4f29e69ae4b0d6649770a036"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "59a0ceeae4b0871e7608b840"}, {"problem": 22, "code": "reduce (fn [acc x] (+ acc 1)) 0", "user": "598c5a0ee4b02b9968b84d03"}, {"problem": 22, "code": "#(reduce + (map ( fn [x] 1 ) %))", "user": "59a0ddc0e4b0871e7608b841"}, {"problem": 22, "code": "(fn [seq] \n  (reduce \n   (fn [acc el]\n     (+ acc 1))\n   0\n   seq))", "user": "59a09b1de4b0871e7608b83a"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "59a080e3e4b0871e7608b837"}, {"problem": 22, "code": "#(reduce + (map (fn [x] (identity 1)) %))", "user": "59a0fb85e4b0871e7608b845"}, {"problem": 22, "code": "(partial reduce (comp inc first list) 0)", "user": "5960a1a6e4b066ee0a44b08e"}, {"problem": 22, "code": "(partial (fn [n [head & tail]] (if (nil? tail) (inc n) (recur (inc n) tail))) 0)", "user": "59a180b3e4b0871e7608b852"}, {"problem": 22, "code": "#(loop [idx 0 seq %]\n   (if (empty? seq)\n     idx\n     (recur (inc idx) (rest seq))))", "user": "576c2ecae4b07c67f59d1fbb"}, {"problem": 22, "code": "(fn [s]\n  (loop [se s c 0]\n  (if (empty?  se)\n  c\n  (recur (rest se) (inc c))\n)))", "user": "59a0262ee4b0871e7608b82d"}, {"problem": 22, "code": "(fn f [c] (if (seq c) (+ 1 (f (rest c))) 0))", "user": "59a24c92e4b066c664927d20"}, {"problem": 22, "code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "59a1a137e4b066c664927d11"}, {"problem": 22, "code": "#( loop [l % n 0] (if (empty? l) n (recur (rest l) (inc n)) )  )", "user": "59a2ba97e4b066c664927d2c"}, {"problem": 22, "code": "reduce (fn [cc _] (inc cc)) 0", "user": "59a28f7ae4b066c664927d25"}, {"problem": 22, "code": "#(reduce (fn [a, coll](+ 1 a)) 0 %)", "user": "59135c11e4b0163c97b36f02"}, {"problem": 22, "code": "(fn func[x] \n   (if (empty? x) \n     0\n   \t (inc (func (rest x)))))", "user": "59a2fb98e4b066c664927d31"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "59a460ede4b066c664927d52"}, {"problem": 22, "code": "(fn my-length [ls]\n  (if (empty? ls)\n    0\n    (+ 1 (my-length (rest ls)))))", "user": "59a512b7e4b066c664927d5e"}, {"problem": 22, "code": "(fn [l]\n(loop [x l acc 0]\n  (if (empty? x)\n    acc\n  (recur (rest x)( inc acc)))))", "user": "59250d2be4b072a2710fce64"}, {"problem": 22, "code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "59a3f3dce4b066c664927d48"}, {"problem": 22, "code": "(fn my-count [a-seq]\n  (let [helper (fn [a-seq n]\n                 (if (empty? (rest a-seq))\n                   n\n                   (recur (rest a-seq) (inc n))))]\n    (helper a-seq 1)))", "user": "59a58bf0e4b066c664927d64"}, {"problem": 22, "code": "#(alength (to-array %))", "user": "59a5b399e4b066c664927d68"}, {"problem": 22, "code": "#(reduce (fn [a _] (inc a)) 0 %)", "user": "569d3f9ae4b0542e1f8d147a"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "59a57e91e4b066c664927d63"}, {"problem": 22, "code": "(fn [acc l] \n  (if (empty? l) \n    acc \n    (recur (inc acc) (rest l)))) 0", "user": "59a72effe4b066c664927d94"}, {"problem": 22, "code": "(fn [x]\n  (reduce + (map (fn [y] 1) x)))", "user": "59a6f1c7e4b066c664927d89"}, {"problem": 22, "code": "reduce (fn [val coll] (inc val)) 0", "user": "59a7e422e4b0bcf4e9a43ae7"}, {"problem": 22, "code": "(fn [l]\n  (reduce + (map (constantly 1) l)))", "user": "59a8405ce4b0bcf4e9a43af1"}, {"problem": 22, "code": "#(loop [the-seq %\n        n 0]\n   (if (empty? the-seq)\n     n\n     (recur (rest the-seq) (inc n))))", "user": "59a96a85e4b0bcf4e9a43b13"}, {"problem": 22, "code": "(fn [coll]\n  (reduce (fn [a, x] (inc a)) 0 coll))", "user": "59a80652e4b0bcf4e9a43aeb"}, {"problem": 22, "code": "reduce (fn [x y] (+ x 1)) 0", "user": "59aad3d4e4b08cbb53654d88"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "59ab2c8fe4b08cbb53654d92"}, {"problem": 22, "code": "#(reduce (fn [x _] (inc x)) 0 %)", "user": "59ab589ce4b08cbb53654d98"}, {"problem": 22, "code": "(fn co\n  ([c]\n   (co c 0))\n  ([c n] \n    (let [n (inc n)\n          r (rest c)]\n      (if (empty? r) \n        n\n       (co r n)))))", "user": "59ab61f1e4b08cbb53654d9b"}, {"problem": 22, "code": "reduce (fn [a _] (+ a 1)) 0", "user": "59ab8beee4b08cbb53654d9e"}, {"problem": 22, "code": "(fn [xs] (reduce (fn [c _] (inc c)) 0 xs))", "user": "586b93eae4b01531a375e95b"}, {"problem": 22, "code": "(fn [xs] \n  (loop [xs2 xs n 0]\n    (if (empty? xs2) n (recur (rest xs2) (inc n)))))", "user": "59abd1d8e4b08cbb53654da4"}, {"problem": 22, "code": "(fn\n  [coll]\n  (loop [xs coll n 0]\n   (if (seq xs)\n     (recur (rest xs) (inc n))\n     n)))", "user": "59ac0965e4b08cbb53654da6"}, {"problem": 22, "code": "(fn [x] (reduce + \n                (map (fn [z] 1) x)\n                ))", "user": "59ac559ee4b00adcf69795d2"}, {"problem": 22, "code": "(fn [col]\n  (reduce + (map (fn [_] 1) col)))", "user": "59ac757fe4b00adcf69795d3"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "59ac1fb5e4b08cbb53654da7"}, {"problem": 22, "code": "reduce (fn [n _] (inc n)) 0\n;(fn [s] (->> s (map #(do % 1)) (apply +)))", "user": "59ad2fcee4b00adcf69795de"}, {"problem": 22, "code": "reduce (fn [result _] (inc result)) 0", "user": "59a90b2ae4b0bcf4e9a43aff"}, {"problem": 22, "code": "(fn meme [x]\n  (if (= x '())\n    0\n    (+ 1 (meme (drop 1 x)))))", "user": "59ada340e4b0e1f4e384c88f"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "59a9e517e4b08cbb53654d79"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "59a2d49de4b066c664927d30"}, {"problem": 22, "code": "(fn len [l] \n  (if (= l '())\n    0\n    (+ 1 (len (rest l)))))", "user": "59ae1ebae4b0e1f4e384c89a"}, {"problem": 22, "code": "reduce (fn [x y] (inc x)) 0", "user": "59ad6abbe4b0e1f4e384c883"}, {"problem": 22, "code": "(fn [s] (reduce (fn [acc cur] (+ acc 1)) 0 s))", "user": "59aeed59e4b0e1f4e384c8ab"}, {"problem": 22, "code": "(fn tmp\n  ([seq] (tmp seq 0))\n  ([seq passed]\n    (if (empty? seq)\n      passed\n      (tmp (rest seq) (+ passed 1)))))", "user": "59aeff12e4b0e1f4e384c8af"}, {"problem": 22, "code": "#(.length (vec %))", "user": "59adec09e4b0e1f4e384c897"}, {"problem": 22, "code": "( fn [coll]\n  (reduce \n   (fn [x y] (inc x))\n   0 coll\n  )\n  )", "user": "59affcdee4b0e1f4e384c8c2"}, {"problem": 22, "code": "(fn [s]\n  (reduce (fn [c e] (+ c 1)) 0 s))", "user": "59b05f0ee4b0e1f4e384c8cc"}, {"problem": 22, "code": "(fn [x] (loop [foo x cnt 0] (if (= (first foo) nil) cnt (recur (rest foo) (inc cnt) ))))", "user": "59afb004e4b0e1f4e384c8bc"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "59b18dbfe4b0e1f4e384c8e4"}, {"problem": 22, "code": "reduce (fn [c b] (+ c 1)) 0", "user": "59b1a1b2e4b0e1f4e384c8eb"}, {"problem": 22, "code": "reduce #(or (inc %1) %2) 0", "user": "59b1c2eae4b0e1f4e384c8ec"}, {"problem": 22, "code": "(fn my-count [s]\n  (if (empty? s)\n    0\n    (inc (my-count (rest s)))))", "user": "59b21070e4b0e1f4e384c8f2"}, {"problem": 22, "code": "(fn [sequ] (\n           reduce (fn [sum _x] (inc sum)) 0 sequ\n          ))", "user": "59b2d51be4b0e1f4e384c902"}, {"problem": 22, "code": "(fn [xs] (reduce (fn [acc _] (inc acc)) 0 xs))", "user": "59ad8695e4b0e1f4e384c887"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "599b3844e4b07157cc8dab1d"}, {"problem": 22, "code": "(fn [s]\n  (reduce (fn [a,b]\n    (+ a 1)) 0 s))", "user": "59a7ffe2e4b0bcf4e9a43ae9"}, {"problem": 22, "code": "#(loop [x 0 y %1]\n   (if (empty? y)\n     x\n     (recur (inc x) (rest y))))", "user": "59b554cee4b05c620303ca0f"}, {"problem": 22, "code": "(fn my-length [ls]\n  (if (empty? ls) 0\n    (+ 1 (my-length (rest ls)))))", "user": "5817e464e4b0c0e9c07b839c"}, {"problem": 22, "code": "(fn [coll] (reduce #(or (+ %1 1) %2) 0 coll))", "user": "59a31c55e4b066c664927d34"}, {"problem": 22, "code": "(fn [sqn] (reduce (fn [a b] (inc a)) 0 sqn ) )", "user": "59b0e877e4b0e1f4e384c8d3"}, {"problem": 22, "code": "(fn \n\t[the-list]\n\t(reduce (fn [acc,elem] (inc acc)) 0 the-list))", "user": "59b62f8de4b05c620303ca1f"}, {"problem": 22, "code": "reduce (fn [acc, item] (+ 1 acc)) 0", "user": "59b2b093e4b0e1f4e384c8fd"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "59b2e383e4b0e1f4e384c903"}, {"problem": 22, "code": "#(.length (vec %1))", "user": "59a1fd6be4b066c664927d1b"}, {"problem": 22, "code": "(fn mycount\n  [xs]\n  (loop [i 0 coll xs]\n    (if (empty? coll)\n      i\n      (recur (inc i) (rest coll)))))", "user": "59afe4bae4b0e1f4e384c8c0"}, {"problem": 22, "code": "reduce (fn [s _] (inc s)) 0", "user": "59adb1cee4b0e1f4e384c891"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "59b714dbe4b05c620303ca3c"}, {"problem": 22, "code": ";(fn [coll] (reduce #(+ 1 %1) 0 coll))\n#(reduce (fn [acc next] (+ 1 acc)) 0 %1)", "user": "59b8ee96e4b0a024fb6ae3c0"}, {"problem": 22, "code": "(fn kount [list]\n  (if (empty? list)\n    0\n    (inc (kount (rest list)))))", "user": "59b7d888e4b05c620303ca49"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "59b9e669e4b0a024fb6ae3db"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "58a0e9bfe4b02bd94d917ea1"}, {"problem": 22, "code": "(fn f [coll] \n  (cond (empty? coll) 0\n     :else (+ 1 (f (rest coll))))\n)", "user": "59ba2ea0e4b0a024fb6ae3e1"}, {"problem": 22, "code": "(fn [xs]\n  (reduce (fn [acc n] (inc acc)) 0 xs))", "user": "57a182fde4b0c3d858beb8ed"}, {"problem": 22, "code": "#(reduce (fn [n s] (inc n)) 0 %)", "user": "59b8b04de4b05c620303ca57"}, {"problem": 22, "code": "(fn\n  [l]\n  (loop [x l cnt 1]\n    (if (nil? (next x))\n      cnt\n      (recur (rest x)(inc cnt))\n      )))", "user": "59a9c22ae4b08cbb53654d75"}, {"problem": 22, "code": "(fn [seq-in]\n  (loop [[head & tail] seq-in\n         total 0]\n    (if (not head)\n      total\n      (recur tail (inc total)))))", "user": "59bcb2c1e4b0a024fb6ae417"}, {"problem": 22, "code": "#(reduce\n  (fn [c _]\n    (inc c))\n  0 %)", "user": "59bcbfd0e4b0a024fb6ae419"}, {"problem": 22, "code": "(fn [coll]\n  (loop [s coll x 0]\n    (if (nil? (first s))\n      x\n      (recur (rest s) (inc x))\n    )\n  )\n)", "user": "59bac5c9e4b0a024fb6ae3ed"}, {"problem": 22, "code": "#(loop [ncoll %1 n 0] (if (empty? ncoll) n (recur (rest ncoll) (inc n))))", "user": "5998b0a1e4b07157cc8daaec"}, {"problem": 22, "code": "(fn [s] (reduce + (map (fn [n] 1) s)))", "user": "59bdeb22e4b0a024fb6ae42d"}, {"problem": 22, "code": "(fn [s]\n  (loop [acc 0 sl s]\n    (if (empty? sl)\n      acc\n      (recur (inc acc) (rest sl)))))", "user": "59c147afe4b0a024fb6ae481"}, {"problem": 22, "code": "(fn length [sq]\n  (loop [sq sq cnt 0]\n    (if (empty? sq) cnt\n      (recur (rest sq) (inc cnt)))))", "user": "59b7120fe4b05c620303ca3b"}, {"problem": 22, "code": "#(loop [st %\n       ct 0]\n   (cond (empty? st) ct\n    :else (recur (rest st) (inc ct)))\n)", "user": "54c98ac0e4b045293a27f679"}, {"problem": 22, "code": "(fn [s] (reduce + (map (fn [_] 1) s)))", "user": "59be62d5e4b0a024fb6ae435"}, {"problem": 22, "code": "(fn[x] (reduce + (map (constantly 1) x)))", "user": "59c190c3e4b0a024fb6ae48b"}, {"problem": 22, "code": "#(loop [c 0 s %1] \n    (if (nil? (first s))\n        c\n        (recur (inc c)\n               (rest s)))\n  )", "user": "4eab2f2b535d7eef30807312"}, {"problem": 22, "code": "(fn [ls] (reduce (fn [acc v] (inc acc)) 0 ls))", "user": "59c20641e4b0a024fb6ae49a"}, {"problem": 22, "code": "(fn [xs] (reduce + (map (constantly 1) xs)))", "user": "59c22fbae4b0a024fb6ae4a3"}, {"problem": 22, "code": "(fn count2\n      ([coll]\n        (if (empty? coll)\n          0\n          (count2 (rest coll) 1)))\n      ([coll index]\n        (if (empty? coll)\n          index\n          (count2 (rest coll) (inc index)))) )", "user": "59bfd910e4b0a024fb6ae459"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "59c3b24ee4b0a024fb6ae4e1"}, {"problem": 22, "code": "(fn count* [a] (if (nil? (first a)) 0 (+ 1 (count* (rest a)))))", "user": "59c12c50e4b0a024fb6ae47a"}, {"problem": 22, "code": "#(loop [coll % cc 0] (if (empty? coll) cc (recur (rest coll) (inc cc))))", "user": "591a7ce9e4b09b4ee5954bd8"}, {"problem": 22, "code": ";#(reduce (fn [cnt n] (inc cnt)) 0 %)\n#(reduce + 0 (map (fn [_] 1) %))", "user": "59c5093ce4b0a024fb6ae50c"}, {"problem": 22, "code": "(fn my-count\n  ([xs] (my-count (rest xs) 1))\n  ([xs amount]\n   (if (empty? xs)\n     amount\n     (recur (rest xs) (inc amount)))))", "user": "59c3a7e9e4b0a024fb6ae4df"}, {"problem": 22, "code": "(fn [listt] \n  (reduce \n   (fn [x y] (+ x 1))\n   0 \n   listt\n   )\n  )", "user": "58fc4963e4b0438e51c2cf91"}, {"problem": 22, "code": "(fn [list] (loop [remain list, n 0] (if (empty? remain) n (recur (rest remain) (inc n)))))", "user": "59c72175e4b0a024fb6ae53c"}, {"problem": 22, "code": "(fn [x] (let [seqs (seq x)] (loop [seqs seqs result 0] (if (empty? seqs) result (recur (next seqs) (inc result))))))", "user": "59c4d93fe4b0a024fb6ae507"}, {"problem": 22, "code": "(fn [c] (reduce + (map (fn [_] 1) c)))", "user": "59c74c28e4b0a024fb6ae540"}, {"problem": 22, "code": "#(loop [m1 % size 0]\n    (if (empty? m1)\n\t\tsize\n        (recur (rest m1) (inc size))))", "user": "536fd48be4b0fc7073fd6e88"}, {"problem": 22, "code": "#(reduce(fn[acc n](inc acc))0 %)", "user": "59c734e3e4b0a024fb6ae53f"}, {"problem": 22, "code": ";(fn[coll]\n;  (loop[v (vec coll) n 0]\n;    (if(= (get v n) nil) n\n;      (recur v (inc n)))))\n\n#(loop[coll (vec %) n 0]\n   (if(nil? (get coll n)) n\n     (recur coll (inc n))))\n\n;(fn [coll]  (reduce (fn [x y] (inc x)) 0 coll))\n\n;#(apply + (map (fn [x] 1) %))\n\n;#(loop [result 0 c %]\n;    (if(empty? c) result\n;    (recur (inc result) (rest c))))", "user": "59c77511e4b0a024fb6ae545"}, {"problem": 22, "code": "(fn [a] (apply + (map (fn [b] 1) a)))", "user": "59c7c2cde4b0a024fb6ae54b"}, {"problem": 22, "code": "(fn [x]\n  (loop [l x i 0]\n    (if-not (seq l)\n      i\n      (recur (rest l) (inc i)))))", "user": "58935b02e4b00487982d523e"}, {"problem": 22, "code": "(fn [x]\n  (loop [l x i 0]\n    (if-not (seq l)\n      i\n      (recur (rest l) (inc i)))))", "user": "59c91fa4e4b0a024fb6ae573"}, {"problem": 22, "code": "#(reduce (fn[s i] (inc s)) 0 %)", "user": "59c94a69e4b0a024fb6ae576"}, {"problem": 22, "code": "#(reduce (fn [len _] (inc len)) 0 %)", "user": "59c8c9bee4b0a024fb6ae567"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "59cbb8a0e4b0a024fb6ae5c3"}, {"problem": 22, "code": "(fn [values]\n    (loop [value (first values) \n           remaining (rest values) \n           i 0]\n       (if (= value nil)\n          i\n          (recur (first remaining) (rest remaining) (+ 1 i)) ) ) )", "user": "59c3b603e4b0a024fb6ae4e3"}, {"problem": 22, "code": "reduce (fn [n x] (inc n)) 0", "user": "59cbc381e4b0a024fb6ae5c6"}, {"problem": 22, "code": "(fn [coll]\n  (loop [x 0\n         my-vals coll]\n    (if (empty? my-vals)\n      x\n      (recur (inc x) (rest my-vals)))))", "user": "59c180e4e4b0a024fb6ae489"}, {"problem": 22, "code": "(fn [x] (reduce (fn [x y] (+ x 1)) 0 x))", "user": "59cc05e4e4b0a024fb6ae5cb"}, {"problem": 22, "code": "(fn [s] (reduce (fn [x _] (inc x)) 0 s))", "user": "59cc2e50e4b0a024fb6ae5cc"}, {"problem": 22, "code": "#(apply + (map (fn [x] 1) %))", "user": "59cc6c1ee4b0a024fb6ae5d2"}, {"problem": 22, "code": "(fn count-a-sequence [s]\n  (reduce (fn [c _] (inc c)) 0 s))", "user": "59cb706ee4b0a024fb6ae5ba"}, {"problem": 22, "code": "#(loop [s % c 0]\n\n  (if (nil? (first s))\n\n    c\n\n    (recur (rest s) (inc c))))", "user": "594a7ed1e4b07ddc2dafae02"}, {"problem": 22, "code": "(fn [xs] (reduce (fn [a b] (inc a)) 0 xs))", "user": "59cc8d8de4b0a024fb6ae5d5"}, {"problem": 22, "code": "(fn [sequ] (reduce (fn [x y] (+ x 1)) 0 sequ))", "user": "59c3d1e7e4b0a024fb6ae4e5"}, {"problem": 22, "code": "(fn [x]\n  (loop [arr x mycount 0]\n  \t(if (empty? arr)\n     mycount\n  \t(recur (rest arr) (+ mycount 1)))))", "user": "58136dcfe4b0f478707a0610"}, {"problem": 22, "code": "reduce (fn [x _] (inc x)) 0", "user": "59cdea74e4b0ef0a1e9b5b47"}, {"problem": 22, "code": "(fn \n   [s]\n   (reduce + (map (fn [_] 1) s)))", "user": "58dc5ceae4b0a4d5acaab69b"}, {"problem": 22, "code": "#(apply + (map (constantly 1)\u3000%))", "user": "59cf0d75e4b0ef0a1e9b5b5f"}, {"problem": 22, "code": "(fn [m] (let [xx (seq m)] (reduce (fn [sum, x] (inc sum)) 0 xx)))", "user": "59cf4013e4b0ef0a1e9b5b68"}, {"problem": 22, "code": "(fn [seq] (reduce (fn [prev curr] (inc prev)) 0 seq))", "user": "5984e7dee4b021a7a535fe43"}, {"problem": 22, "code": "#(reduce (fn [x y] (+ 1 x)) 0 (seq %))", "user": "59cf6fbce4b0ef0a1e9b5b6c"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1)%))", "user": "59cd13d5e4b0ef0a1e9b5b32"}, {"problem": 22, "code": "(fn [s]\n  (let [c (fn [x n]\n            (if (empty? x)\n              n\n              (recur (rest x) (inc n))\n              ))]\n    (c s 0)))", "user": "59c6de70e4b0a024fb6ae538"}, {"problem": 22, "code": "(fn [x] (reduce + (map (constantly 1) x) ))", "user": "59cfc8a6e4b0ef0a1e9b5b75"}, {"problem": 22, "code": "(fn length [c]\n  (if (empty? c) 0 (+ 1 (length (rest c))))\n)", "user": "59d02bfbe4b0ef0a1e9b5b7b"}, {"problem": 22, "code": "reduce (fn[x y] (+ x 1)) 0", "user": "5965d220e4b069c0a1a19794"}, {"problem": 22, "code": "(fn [seq]\r\n    (loop [there seq\r\n    \t  len 0]\r\n      (if (empty? there)\r\n      \t  len\r\n\t(recur (rest there) (inc len)))))", "user": "4ddc5d0a535d02782fcbea05"}, {"problem": 22, "code": "(fn [l] \n  (loop [l l n 0]\n    (if (empty? l)\n      n\n      (recur (rest l) (+ n 1))\n      )))", "user": "59d1e9cfe4b0ef0a1e9b5b95"}, {"problem": 22, "code": "(fn [coll] (reduce + (map (fn [elem] (int 1)) coll)))", "user": "57c8d89ee4b05aa3c4741d23"}, {"problem": 22, "code": "(fn [s] (reduce (fn [x y] (+ 1 x)) 0 s))", "user": "59cf7624e4b0ef0a1e9b5b6e"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "59d3a485e4b0ef0a1e9b5bc8"}, {"problem": 22, "code": "(fn [col]\n  (loop [[first & rest] col c 0]\n    (if (nil? rest)\n      (inc c)\n      (recur rest (inc c)))))", "user": "59d3eb2fe4b0ef0a1e9b5bd7"}, {"problem": 22, "code": "(fn jct [x] (let [helper\n                  (fn h [x n] (cond (empty? x) n :else (h (rest x) (+ 1 n))))]\n              (helper x 0)))", "user": "4e6aacad535d8ccf87e9fefa"}, {"problem": 22, "code": "(fn fcount [x] (if (= '() (rest x)) 1 (+ 1 (fcount (rest x)))))", "user": "59d3db65e4b0ef0a1e9b5bd3"}, {"problem": 22, "code": "(fn [input] (loop [n input\n                   c 0]\n              (if (first n)\n                (recur (rest n) (inc c))\n                c)))", "user": "5554ae14e4b0deb715856e0e"}, {"problem": 22, "code": "(fn [x] (reduce + 0 (vals (frequencies x))))", "user": "59d4a160e4b0ef0a1e9b5be7"}, {"problem": 22, "code": "reduce (fn [x _] (inc x)) 0", "user": "59d4d126e4b0ef0a1e9b5be9"}, {"problem": 22, "code": "(fn \n  [lst] \n  (loop [l lst\n         x 0]\n    (if (empty? l)\n      x\n      (recur (rest l) (inc x)))))", "user": "59d68f3fe4b0ef0a1e9b5c1e"}, {"problem": 22, "code": "(fn [lst] (apply + (map (fn [x] 1) lst)))", "user": "59d72207e4b0ef0a1e9b5c2c"}, {"problem": 22, "code": "(fn [x] \n  (reduce (fn [a b]\n            (+ a 1))\n            0\n            x))", "user": "59d75e36e4b0ef0a1e9b5c32"}, {"problem": 22, "code": "#(loop [sq %1 cnt 0]\n   (if (empty? sq)\n     cnt\n     (recur (rest sq) (inc cnt))))", "user": "59d75489e4b0ef0a1e9b5c31"}, {"problem": 22, "code": "(fn [coll]\n  (reduce (fn [x _] (+ 1 x)) 0 coll))", "user": "59d77634e4b0ef0a1e9b5c34"}, {"problem": 22, "code": "(fn [coll]\n  (reduce (fn [total _] (+ total 1))\n          0\n          coll))", "user": "59d9186be4b0ef0a1e9b5c50"}, {"problem": 22, "code": "#(reduce (fn [cnt coll] (inc cnt)) 0 %)", "user": "59d9dcfbe4b0ef0a1e9b5c5d"}, {"problem": 22, "code": "(fn [s]\n  (loop [counter 0,\n         s2 s]\n    (if (seq s2)\n      (recur (inc counter) (rest s2))\n      counter)))", "user": "59c76402e4b0a024fb6ae542"}, {"problem": 22, "code": "#(reduce (fn [acc _] (+ acc 1)) 0 %)", "user": "59d9e66ae4b0ef0a1e9b5c60"}, {"problem": 22, "code": "(fn f [s] (if (empty? s) 0 (+ 1 (f (rest s)))))", "user": "59da6480e4b0ef0a1e9b5c68"}, {"problem": 22, "code": "(fn [coll] (loop [x 1 coll coll] (if (empty? (rest coll)) x (recur (inc x) (rest coll)))))", "user": "572c312be4b0cd1946bd0f4d"}, {"problem": 22, "code": "#(loop [nums 0 elem %]\n   (if (empty? elem)\n     nums\n     (recur (inc nums) (rest elem))\n   )\n)", "user": "59db6c14e4b0ef0a1e9b5c79"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "59d631d4e4b0ef0a1e9b5c09"}, {"problem": 22, "code": "#(loop [total 0 vals %]\n   (if (empty? vals)\n      total\n      (recur (inc total) (rest vals))))", "user": "59d63276e4b0ef0a1e9b5c0a"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "572de985e4b0cd1946bd0f7c"}, {"problem": 22, "code": "(fn [s]\n  (reduce\n   (fn [x y] (inc x))\n   0\n   s))", "user": "59da060ee4b0ef0a1e9b5c61"}, {"problem": 22, "code": "#(reduce (fn [x ls] (inc x)) 0 %1)", "user": "59dcbfe8e4b0ef0a1e9b5ca5"}, {"problem": 22, "code": "(fn [coll]\n   (if (empty? coll)\n     0\n     (loop [[first & remaining] coll\n            cont 1]\n       (if (empty? remaining)\n         cont\n         (recur remaining (inc cont))))))", "user": "58a34442e4b02bd94d917ef2"}, {"problem": 22, "code": "#(reduce +(map (constantly 1) %))", "user": "59d6cc05e4b0ef0a1e9b5c25"}, {"problem": 22, "code": "reduce (fn [n _] (inc n)) 0", "user": "59ddae03e4b01968742fed65"}, {"problem": 22, "code": "(fn this-problemM8 [lst]\n  (loop [lista lst\n       cc    0]\n  (if (empty? lista)\n    cc\n      (recur (rest lista)\n             (inc cc)))) )", "user": "59deba46e4b01968742fed7f"}, {"problem": 22, "code": "(fn xxx [xs]\n  (if (empty? xs)\n    0\n    (inc (xxx (next xs)))))", "user": "59dec79ee4b01968742fed81"}, {"problem": 22, "code": "(fn my-count\n  [lst]\n  (if (empty? lst)\n    0\n    (+ 1 (my-count (rest lst)))))", "user": "59e0111ae4b08badc2a0c4e4"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "59c8ffe6e4b0a024fb6ae56c"}, {"problem": 22, "code": "(fn my-count\n  [lst]\n  (if (empty? lst)\n    0\n    (+ 1 (my-count (rest lst)))))", "user": "59e12c94e4b08badc2a0c509"}, {"problem": 22, "code": "(fn [lst]\n  (loop [lst lst\n         accum 0]\n    (if (empty? lst)\n      accum\n      (recur (rest lst)(inc accum)))))", "user": "59dd387ae4b0a0ac046f2501"}, {"problem": 22, "code": "(fn my-count \n  [lst] \n  (if (empty? lst)\n    0\n    (inc (my-count (rest lst)))))", "user": "59e18b9be4b08badc2a0c50f"}, {"problem": 22, "code": "(fn c [l] (\n           if-not (= nil (first l)) (+ 1 (c (rest l))) 0))", "user": "59dfe78de4b08badc2a0c4df"}, {"problem": 22, "code": "(fn [s] (alength (to-array s)))", "user": "59e105f2e4b08badc2a0c505"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "59e0b1e1e4b08badc2a0c4f2"}, {"problem": 22, "code": "(fn c [x] \n  (if (= (first x) nil) 0 (+ 1 (c (rest x)))\n    )\n   )", "user": "59e1233ee4b08badc2a0c508"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "59da2569e4b0ef0a1e9b5c62"}, {"problem": 22, "code": "#(reduce + (map (fn [_] 1) %))", "user": "59e32913e4b08badc2a0c52c"}, {"problem": 22, "code": "reduce (fn [a _] (inc a)) 0", "user": "59e0f38ae4b08badc2a0c500"}, {"problem": 22, "code": "(partial reduce (fn [total _] (inc total)) 0)", "user": "59e48db0e4b08badc2a0c53e"}, {"problem": 22, "code": "(fn num-elem [lst]\n  \t(if (empty? lst)\n      0\n      (+ 1 (num-elem(rest lst)))\n     \t  \n       )\n  )", "user": "59e4e3cbe4b08badc2a0c54a"}, {"problem": 22, "code": "(fn [[& x]]\n  (loop [m x y 0]\n    (if (empty? m)\n      y\n      (recur (rest m) (inc y)))))", "user": "59e4fc25e4b08badc2a0c54f"}, {"problem": 22, "code": "#(reduce (fn [c x] (inc c)) 0 %)", "user": "59dd38a8e4b0a0ac046f2503"}, {"problem": 22, "code": "(fn algo \n  [lst]\n  (loop[n 0\n        lst lst\n        ]\n    (if (empty? lst)\n      n\n      (recur (inc n) (rest lst))\n      )\n    )\n  )", "user": "59e56c75e4b08badc2a0c556"}, {"problem": 22, "code": "(fn [lista]\n  (loop [x 0]\n    (if (empty? (drop x lista))\n      x\n      (recur (+ x 1)))))", "user": "59e55cc8e4b08badc2a0c555"}, {"problem": 22, "code": "reduce (fn [a _ ](inc a)) 0", "user": "59de4b38e4b01968742fed71"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "59e61279e4b08badc2a0c563"}, {"problem": 22, "code": "#(loop [res 0 \n        c %]\n    (if(empty? c) res\n(recur (inc res) (rest c))))", "user": "59e62655e4b08badc2a0c568"}, {"problem": 22, "code": "(fn cnt \n\t([l] \t(cnt l 0)) \n\t([l c]  (if (empty? l) c (recur (rest l) (inc c))))\n)", "user": "59e61973e4b08badc2a0c567"}, {"problem": 22, "code": "(fn [lista] (reduce (fn [contador elementoDeLaLista] (inc contador)) 0 lista))", "user": "59e63a2ce4b08badc2a0c569"}, {"problem": 22, "code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "59e64a4be4b08badc2a0c56c"}, {"problem": 22, "code": "(fn [varList]\n  (loop [cnt 0 vars varList]\n    (if (empty? vars)\n      cnt\n      (recur (inc cnt) (rest vars)))))", "user": "59e0f839e4b08badc2a0c502"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "59e66ac5e4b08badc2a0c570"}, {"problem": 22, "code": "(fn num_of_elements [x] (if (empty? x) 0 (+ 1 (num_of_elements (butlast x)))))", "user": "59e696c5e4b0249b728206fd"}, {"problem": 22, "code": "#(reduce (fn[acc _] (inc acc)) 0 %1)", "user": "5957cc41e4b066ee0a44af76"}, {"problem": 22, "code": "(fn f\n  [lst]\n  (+ 1 (first (last (map-indexed vector lst)))))", "user": "59e778aae4b0249b72820716"}, {"problem": 22, "code": "(fn countList [lst]\n  (loop [counter 0 lst lst]\n    (if (empty? lst)\n      counter\n      (recur (inc counter) (rest lst)))))", "user": "59dd387be4b0a0ac046f2502"}, {"problem": 22, "code": "(fn Count-a-Sequence\n  [lst]\n  (loop [i 0\n         lst1 lst]\n    (cond\n      (empty? lst1) i\n      :else (recur (inc i) (rest lst1)))))", "user": "59e14ee3e4b08badc2a0c50c"}, {"problem": 22, "code": ";#(loop [x % y 0]\n ;  (if (empty? x)\n  ; \ty\n   ; (recur (rest x) (inc y))\n   ;)\n ;)\n \nreduce #(let [x %1 y %2] (+ x 1)) 0", "user": "59e04fc7e4b08badc2a0c4e8"}, {"problem": 22, "code": "(fn [lis]\n  (reduce (fn [x y] (+ x 1)) 0 lis))", "user": "59e8041be4b0249b72820721"}, {"problem": 22, "code": "(fn count_sequence\n  [lst]\n  (if (empty? lst)\n    0\n    (inc (count_sequence (rest lst)))))", "user": "59dd3930e4b0a0ac046f2504"}, {"problem": 22, "code": "(fn [l]\n  (reduce (fn [x,y] (inc x)) 0 l)\n  )", "user": "59e8a952e4b0249b72820733"}, {"problem": 22, "code": "(fn my-count\n  [lst]\n  (reduce + (map (fn [x] 1) lst)))", "user": "59e8fef3e4b0249b72820743"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "59e95cafe4b0249b7282074b"}, {"problem": 22, "code": "(fn [s] (reduce (fn [a b] (+ a 1)) 0 s))", "user": "59e8c89de4b0249b72820737"}, {"problem": 22, "code": "#(reduce + 0 (map (constantly 1) %))", "user": "55ec879ae4b0121d4835fdc8"}, {"problem": 22, "code": "#(loop [result 0 c %]\n    (if(empty? c) result\n    (recur (inc result) (rest c))))", "user": "59e9f03be4b0249b72820752"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "59ea287ee4b0249b72820760"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "59ea0944e4b0249b72820758"}, {"problem": 22, "code": "(fn [lst]\n (reduce + (map (constantly 1) lst)))", "user": "59dfd369e4b08badc2a0c4dd"}, {"problem": 22, "code": "(fn [x]\n  (loop [ct 0 thing x]\n    (if (empty? thing)\n        ct\n        (recur (inc ct) (rest thing)))))", "user": "59ea85e4e4b0249b72820767"}, {"problem": 22, "code": "(fn my-count\n  [lst]\n    (if (empty? lst)\n      0\n      (+ 1 (my-count (rest lst)))))", "user": "59e68254e4b0249b728206fc"}, {"problem": 22, "code": "(fn cnt [a] (if(empty? a) 0 (+ 1 (cnt (rest a)))))", "user": "59e8bb43e4b0249b72820735"}, {"problem": 22, "code": "#(apply + (map (constantly 1) (seq %)))", "user": "59eb63e3e4b0249b7282077c"}, {"problem": 22, "code": "(fn [lst]\n  (loop [lst lst\n         res 0]\n    (cond\n     (empty? lst) res\n     :else (recur (rest lst) (inc res)))))", "user": "59e8cd8be4b0249b72820739"}, {"problem": 22, "code": "#(reduce\n  (fn [c _]\n    (inc c))\n  0\n  %)", "user": "59e8efe7e4b0249b72820740"}, {"problem": 22, "code": "reduce (fn [r x] (+ r 1)) 0", "user": "59ec120ae4b0249b72820787"}, {"problem": 22, "code": "(fn seq-count [ls]\n  (reduce (fn [acc n] (+ acc 1)) 0 ls))", "user": "59ece650e4b0249b72820795"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "59ed01ede4b0249b7282079a"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "59e5b6a1e4b08badc2a0c55b"}, {"problem": 22, "code": "(fn [coll]\n    (loop [size 0\n           collection coll]\n      (if (empty? collection)\n        size        \n        (recur (inc size) (rest collection)))))", "user": "5683fcafe4b0945ebc182aa8"}, {"problem": 22, "code": "#(reduce (fn [cnt y] (inc cnt)) 0 %)", "user": "59ee3060e4b0966464fe6a12"}, {"problem": 22, "code": "reduce (fn [counter el]\n         (if el (inc counter))) 0", "user": "593c1e3be4b069cdc2982b86"}, {"problem": 22, "code": "(fn [input]\n  (loop [remaining input, cnt 0]\n    (if (empty? remaining)\n      cnt\n      (recur (rest remaining) (inc cnt)))))", "user": "59ee6801e4b0966464fe6a1f"}, {"problem": 22, "code": "(fn [z] (reduce (fn [x y] (inc x)) (cons 0 z)))", "user": "5628f33ce4b00e49c7cb47f3"}, {"problem": 22, "code": "(fn [seqs] (reduce + (map (fn [x] (int 1)) seqs)))", "user": "59edc518e4b0966464fe6a08"}, {"problem": 22, "code": "(fn countSequense [sq] \n       (loop [coll sq\n              cnt 0]\n                    (if (first coll) \n                      (recur (rest coll) (inc cnt))\n                      cnt                      \n                    )))", "user": "58182480e4b0c0e9c07b83a7"}, {"problem": 22, "code": "#(loop [x % cnt 0]\n   (if (empty? x)\n     cnt\n     (recur (rest x) (inc cnt))))", "user": "59f189f7e4b0966464fe6a5b"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "59f1d218e4b0966464fe6a68"}, {"problem": 22, "code": "(fn [x] (reduce + (map (fn [_] 1) x)))", "user": "59f043d0e4b0966464fe6a3d"}, {"problem": 22, "code": "#(apply + (map (fn [x] 1) %))", "user": "59ef6cfae4b0966464fe6a32"}, {"problem": 22, "code": "(fn my-count [li]\n  (if (empty? li)\n    0\n    (inc (my-count (rest li)))))", "user": "59f2af64e4b0966464fe6a87"}, {"problem": 22, "code": "(fn mycount \n  [coll]\n  (if (empty? coll) \n    0\n  (+ 1 (mycount (next coll)))))", "user": "5971a017e4b01722bebd4c75"}, {"problem": 22, "code": "(fn [y] (reduce + (map (fn [x] 1) y)))", "user": "59f2c9c0e4b0966464fe6a8a"}, {"problem": 22, "code": "(fn [l] (+ 1 (first (last (map-indexed (fn [idx itm] [idx itm]) l)))))", "user": "59a5b3f4e4b066c664927d69"}, {"problem": 22, "code": "#(reduce + (map (fn [_] 1) %))", "user": "59f192e0e4b0966464fe6a5e"}, {"problem": 22, "code": "(fn my_count\n    [coll]\n    (loop [iteration 0\n           remaining coll]\n        (if (nil? (first remaining))\n            iteration\n            (recur (inc iteration)(rest remaining)))))", "user": "59f242b2e4b0966464fe6a7a"}, {"problem": 22, "code": "(fn cunt [[begin & remain]] \n  (if (empty? remain) 1 (+ (cunt remain) 1)))", "user": "59f37776e4b0966464fe6a9d"}, {"problem": 22, "code": "(fn [x] (reduce (fn [v y] (+ 1 v)) 0 x))", "user": "59f22f1be4b0966464fe6a77"}, {"problem": 22, "code": "(fn [coll] (apply + (map (fn [_] 1) coll)))", "user": "59f43ca3e4b0966464fe6aaa"}, {"problem": 22, "code": "(fn [coll] (reduce (fn [acc _] (inc acc)) 0 coll))", "user": "59f44189e4b0966464fe6aab"}, {"problem": 22, "code": "(fn ! ([x] (! x 0))\n    ([x accumlator]\n      (if  (empty? x)  accumlator  (! (rest x) (inc accumlator) )  )\n    )\n  )", "user": "59a34ec9e4b066c664927d37"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %1))", "user": "59f4c42ce4b0966464fe6ab6"}, {"problem": 22, "code": "#(reduce + (map (fn [y] 1) %))", "user": "59f4d0e0e4b0966464fe6ab9"}, {"problem": 22, "code": "(fn [x] (loop [c 0 xs x] (if (empty? xs) c (recur (inc c) (rest xs)))))", "user": "59f4c9c8e4b0966464fe6ab8"}, {"problem": 22, "code": "(fn my-count [s]\n  (loop [s s\n         n 0]\n    (if (empty? s)\n      n\n      (recur (rest s) (inc n) )\n      )\n    )\n  )", "user": "59f66d6fe4b0966464fe6ad2"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "59f3a4d1e4b0966464fe6a9f"}, {"problem": 22, "code": "(comp inc first last #(map-indexed vector %))", "user": "59f67819e4b0966464fe6ad3"}, {"problem": 22, "code": "#(loop [result 0, data %] \n   (if (empty? data) \n     result \n     (recur (inc result) \n            (rest data))))", "user": "590aaa78e4b047aa04b199c0"}, {"problem": 22, "code": "(fn [a]\n  (loop [x a\n         y 0]\n    (if (= x ())\n      y\n      (recur (rest x)\n             (inc y)))))", "user": "59df2b8ee4b01968742fed87"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "59f6ce5de4b0966464fe6adc"}, {"problem": 22, "code": "reduce #(do %2 (inc %1)) 0", "user": "5951190be4b066ee0a44aea4"}, {"problem": 22, "code": "(fn [s]\n  (loop [s2 s i 0]\n    (if (= s2 [])\n      i\n      (recur (rest s2) (+ i 1))\n      )\n    )\n  )", "user": "59f78b49e4b0ca45a743a30e"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "59f77dfae4b0966464fe6af4"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "59f590ade4b0966464fe6ac1"}, {"problem": 22, "code": "(fn my-count [x]\n  (if (empty? x) \n    0\n    (+ 1 (my-count (rest x)))))", "user": "59f7f55de4b0ca45a743a313"}, {"problem": 22, "code": "(fn [v] (reduce + (map (constantly 1) v)))", "user": "56f2611fe4b04a395b9a04a2"}, {"problem": 22, "code": ";(fn cnt [x] (\n;             if (empty? x)\n;             0 \n;             (+ 1 (cnt (rest x) ) ) \n;             )\n;  )\n(fn [x]\n  \t((fn [x sum] \n      (if (empty? x)\n          sum \n          (recur (rest x) (+ 1 sum))\n      )\n\t) x 0)\n)", "user": "59f85d78e4b0ca45a743a31a"}, {"problem": 22, "code": "reduce (fn [init s] (+ init 1)) 0", "user": "59f7182de4b0966464fe6ae6"}, {"problem": 22, "code": "#(apply + (map (constantly 1) %))", "user": "59f8b925e4b0ca45a743a327"}, {"problem": 22, "code": "(fn [c] (reduce (fn [a, b] (inc a)) 0 c))", "user": "59f38703e4b0966464fe6a9e"}, {"problem": 22, "code": "#(loop [ remaining %1 currentCount 1 ]\n   (if (next remaining)\n       (recur (next remaining) (inc currentCount))\n       currentCount))", "user": "59f90e6ae4b0ca45a743a337"}, {"problem": 22, "code": "(fn [xs] (reduce (fn [acc x] (+ acc 1)) 0 xs))", "user": "59f9b9fce4b0ca45a743a347"}, {"problem": 22, "code": "#(reduce (fn [counter _] (inc counter)) 0 %)", "user": "59f9c111e4b0ca45a743a349"}, {"problem": 22, "code": "(fn count-list\n  ([list] (count-list list 0))\n  ([list n] (if (nil? (first list))\n              n\n              (recur (rest list) (inc n)))))", "user": "59f88123e4b0ca45a743a31e"}, {"problem": 22, "code": "(fn [coll] (reduce (fn [x y] (inc x)) 0 coll))", "user": "59fa0bb6e4b0ca45a743a352"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %1)", "user": "59b69bbee4b05c620303ca2a"}, {"problem": 22, "code": "(fn walk [n x]( if (= nil (first x)) (+ n 0) ( walk (+ n 1) (rest x) ) ) ) 0", "user": "59fa1b05e4b0ca45a743a356"}, {"problem": 22, "code": "(fn count-seq [seq]\n  (if (empty? seq)\n    0\n    (+ 1 (count-seq (rest seq)))))", "user": "59fa7fb0e4b0ca45a743a366"}, {"problem": 22, "code": ";reduce (fn [acc _] (inc acc)) 0\n(fn [xs]\n  (loop [x xs\n         y 0]\n    (if (seq x)\n      (recur (rest x) (inc y))\n      y\n      )\n    )\n  )", "user": "59fab2f7e4b0ca45a743a36a"}, {"problem": 22, "code": "(fn [x]\n  (loop [x x\n         n 0]\n    (cond\n     (empty? x) n\n     :else (recur (rest x) (inc n)))))", "user": "59fb1ca3e4b0ca45a743a376"}, {"problem": 22, "code": "#(reduce (fn [acc c] (inc acc)) 0 %1)", "user": "58f5e0b1e4b0438e51c2cee4"}, {"problem": 22, "code": "(letfn [(cownt* [coll]\n          (if (seq coll)\n             (inc (cownt* (rest coll)))\n             0))]\n  cownt*)", "user": "59fa241ee4b0ca45a743a358"}, {"problem": 22, "code": "reduce (fn [acc coll]\n          (inc acc))\n        0", "user": "59fbc01ce4b0ca45a743a383"}, {"problem": 22, "code": "(fn [list] (reduce + (vals (frequencies list))))", "user": "59f15e20e4b0966464fe6a5a"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "59fc482ce4b0ca45a743a389"}, {"problem": 22, "code": "#(loop [v % c 0]\n     (if (empty? v)\n       c\n       (recur (rest v) (inc c))))", "user": "59f78761e4b0966464fe6af5"}, {"problem": 22, "code": "(fn my-count\n  [coll]\n  (loop [i 0 remaining coll]\n    (if (empty? remaining)\n      i\n      (recur (inc i) (rest remaining))\n      )\n    )\n  )", "user": "59fa5fe0e4b0ca45a743a35f"}, {"problem": 22, "code": "(fn[x](apply + (map (fn[y] (identity 1)) x)))", "user": "59fa5773e4b0ca45a743a35e"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "59fde729e4b01bb0ae8afd03"}, {"problem": 22, "code": "(fn cnt [xs] (if (empty? xs)\n                 0\n                 (+ 1 (cnt (rest xs)))))", "user": "59ee368ae4b0966464fe6a14"}, {"problem": 22, "code": "#(reduce +(map (fn[x] 1) %) )", "user": "59f7c8f5e4b0ca45a743a310"}, {"problem": 22, "code": "#(loop [x 0 lst %]\n   (if (empty? lst)\n     x\n     (recur (inc x) (rest lst))))", "user": "59fea630e4b01bb0ae8afd10"}, {"problem": 22, "code": "#(reduce (fn [x y](inc x)) 0 %)", "user": "59fedc26e4b01bb0ae8afd17"}, {"problem": 22, "code": "#((fn cnt [x c] (if (empty? x) (long c) (cnt (rest x) (+ c 1)) )) % 0)", "user": "59fec82be4b01bb0ae8afd14"}, {"problem": 22, "code": "#(let [y (map (fn [x] (if (= x nil) 0 1)) %)] (reduce + y))", "user": "58f98231e4b0438e51c2cf4c"}, {"problem": 22, "code": "(fn [coll] (apply + (map (fn [x] 1) coll)))", "user": "59fb4e26e4b0ca45a743a37b"}, {"problem": 22, "code": "(fn [lst]\n  (loop [l lst\n         c 0]\n  \t(if-not (seq l)\n    \tc\n    \t(recur (rest l) (inc c)))))", "user": "59f4c9c7e4b0966464fe6ab7"}, {"problem": 22, "code": "(fn [x] (reduce + (vec (map (fn [y] 1) x))))", "user": "5a00caede4b01bb0ae8afd35"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "59f820d9e4b0ca45a743a316"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5a016bf6e4b01bb0ae8afd4a"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "5a01d8f6e4b01bb0ae8afd53"}, {"problem": 22, "code": "#(alength (into-array %))", "user": "5a01f2f3e4b01bb0ae8afd57"}, {"problem": 22, "code": "(fn my-count [x]\n    (if (empty? x)\n      0\n      (+ 1 (my-count (rest x))))\n    )", "user": "5a022949e4b01bb0ae8afd60"}, {"problem": 22, "code": "(fn f [x]\n\t(if (nil? (first x))\n\t\t0\n\t\t(+ 1 (f (rest x)))))", "user": "5a025edde4b01bb0ae8afd64"}, {"problem": 22, "code": "reduce (fn [sum _] (+ 1 sum)) 0", "user": "59fcc31fe4b01bb0ae8afcef"}, {"problem": 22, "code": "(fn count1\n\n  [[x & xs]]\n\n  (if x (+ 1 (count1 xs))\n\n    0))", "user": "56673885e4b04acd4f672dce"}, {"problem": 22, "code": "reduce (fn [x,y] (inc x)) 0", "user": "5a0362a0e4b01bb0ae8afd81"}, {"problem": 22, "code": "(fn [xs]\n  (loop [c 0\n         xs' xs]\n    (if (empty? xs')\n      c\n      (recur (+ c 1) (rest xs')))))", "user": "590e5e8ae4b047aa04b19a25"}, {"problem": 22, "code": "(fn amount\n  ([x i] (if (empty? x) i (amount (rest x) (+ i 1))))\n  ([x] (amount (rest x) 1)))", "user": "5a03c545e4b01bb0ae8afd89"}, {"problem": 22, "code": "(fn\n [foo]\n (reduce (fn [a b] (inc a)) 0 foo))", "user": "5a047f7ae4b01bb0ae8afd97"}, {"problem": 22, "code": "(fn [s] (reduce (fn [x y] (inc x)) 0 s))", "user": "5a04e923e4b01bb0ae8afda9"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "59ff69e4e4b01bb0ae8afd20"}, {"problem": 22, "code": "#(apply + (map (constantly 1) %))", "user": "5a065388e4b01bb0ae8afdcb"}, {"problem": 22, "code": "(fn cnt [s]\n  (let [cnt-tr \n        (fn cnt-tr [s c]\n          (if (empty? s)\n            c\n            (cnt-tr (rest s)\n                    (inc c))))]\n    (cnt-tr s 0)))", "user": "5a05dec4e4b01bb0ae8afdc1"}, {"problem": 22, "code": "(fn [n]\n    (loop [cnt n acc 0]\n       (if (empty? cnt)\n            acc\n          (recur (rest cnt) (inc acc)))))", "user": "5a04bc10e4b01bb0ae8afda2"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5a06fd01e4b01bb0ae8afdd4"}, {"problem": 22, "code": "(fn [s] (reduce + (map (constantly 1) s) ) )", "user": "5a075e73e4b01bb0ae8afdd9"}, {"problem": 22, "code": "(fn [seq]\n  (loop [seq seq x 0]\n    (if (empty? seq)\n      x\n      (recur (rest seq) (+ 1 x)))))", "user": "5a08053fe4b01bb0ae8afde7"}, {"problem": 22, "code": "(fn [args]\n                 (letfn [(f [args cnt]\n                            (if (seq args)\n                              (recur (rest args) (inc cnt))\n                              cnt))]\n                        (f args 0)))", "user": "5a082ce4e4b01bb0ae8afdec"}, {"problem": 22, "code": "(fn\n [col]\n (loop [i 0 x col]\n   (if (= x [])\n     i\n     (recur (inc i) (rest x)))))", "user": "5a07fefee4b01bb0ae8afde5"}, {"problem": 22, "code": "(fn l-count\n  [l]\n  (if (empty? l)\n    0\n    (+ 1 (l-count (rest l)))))", "user": "5a08180fe4b01bb0ae8afdeb"}, {"problem": 22, "code": "#((fn [s sum] (if (empty? s) sum (recur (rest s) (inc sum)))) % 0)", "user": "5a080bdde4b01bb0ae8afde9"}, {"problem": 22, "code": "#(+ (first (last (map-indexed vector %))) 1)", "user": "5a03d246e4b01bb0ae8afd8c"}, {"problem": 22, "code": "#(loop [s % acc 1]\n   (if (next s)\n     (recur (rest s) (inc acc))\n     acc))", "user": "5a096063e4b01bb0ae8afe0b"}, {"problem": 22, "code": "(fn length [xs]\n (if (empty? xs) 0\n  (+ 1 (length (rest xs)))))", "user": "58b2fe10e4b0ebc645576d17"}, {"problem": 22, "code": "#(reduce (fn [len _] (inc len)) 0 %)", "user": "5a09a6f7e4b01bb0ae8afe14"}, {"problem": 22, "code": "#(reduce (fn [acc item] (inc acc)) 0 %)", "user": "5a099c98e4b01bb0ae8afe11"}, {"problem": 22, "code": "(fn [seq] (reduce (fn [x y] (inc x)) 0 seq))", "user": "59f027e3e4b0966464fe6a3c"}, {"problem": 22, "code": "#(reduce (fn [a _] (inc a)) 0 %)", "user": "5a09b7cae4b01bb0ae8afe15"}, {"problem": 22, "code": "#(reduce (fn [x y] (+ x 1)) 0 %)", "user": "5a09ce8ce4b0eab8c0448930"}, {"problem": 22, "code": "(fn [coll]\n        (loop [cnt 0 tmp-list coll]\n              (if (empty? tmp-list)\n                  cnt\n                (recur (inc cnt) (rest tmp-list)))))", "user": "5a0a177fe4b0eab8c0448938"}, {"problem": 22, "code": "#(loop [lst % cnt 0]\n   (if (empty? lst)\n     cnt\n     (recur (rest lst) (inc cnt))\n     )\n   )", "user": "59e0e1c6e4b08badc2a0c4fc"}, {"problem": 22, "code": "reduce (fn [c i] (inc c)) 0", "user": "5a071cb2e4b01bb0ae8afdd8"}, {"problem": 22, "code": "(fn [x]\n   (loop [[first & rest] x acc 1]\n     (if (empty? rest)\n       acc\n       (recur rest (+ acc 1)) )\n     ))", "user": "5a0a1748e4b0eab8c0448937"}, {"problem": 22, "code": "(fn foo \n           ([c] \n            (foo c 0)\n            ) \n           ([c t] \n            (if (empty? c) \n              (-> t)\n              (foo (rest c) (inc t))\n              \n              )\n            )  )", "user": "54f9f25de4b0cf870d9346fb"}, {"problem": 22, "code": "#(reduce (fn [result _] (inc result)) 0 %)", "user": "5a0a04eee4b0eab8c0448935"}, {"problem": 22, "code": "(fn myfunc \n  ([x] (myfunc x 0))\n  ([x, y] (if (empty? x) y (recur (drop 1 x) (inc y)))))", "user": "5a0a3473e4b0eab8c0448941"}, {"problem": 22, "code": "(fn [x] (loop [y (seq x) n 0](if (seq? y) (recur (next y)(inc n)) n)))", "user": "5a04f2ebe4b01bb0ae8afdaa"}, {"problem": 22, "code": "(fn [c] (reduce (fn [a b] (inc a)) 0 c) )", "user": "5a00cb31e4b01bb0ae8afd36"}, {"problem": 22, "code": "(fn [values] (reduce (fn [ct _] (inc ct)) 0 values))", "user": "5830377ee4b051871117c004"}, {"problem": 22, "code": "(fn [items] (reduce (fn [c x] (inc c)) 0 (seq items)))", "user": "5a0b9fc0e4b04bbd27e6d992"}, {"problem": 22, "code": "(fn [li]\n  \t(reduce (fn [acc i] (inc acc)) 0 li))", "user": "5a0c3546e4b04bbd27e6d9a5"}, {"problem": 22, "code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "5a0c00dee4b04bbd27e6d9a0"}, {"problem": 22, "code": "(fn cntSeq [s]\n\n  (loop [s s n 0]\n\n    (if (empty? s)\n\n      n\n\n      (recur (rest s) (inc n)))))", "user": "5a0c73a5e4b04bbd27e6d9ae"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "588635a6e4b0f1effa3b76cd"}, {"problem": 22, "code": "#(reduce (fn [x s] (inc x)) 0 %)", "user": "5a0c822fe4b04bbd27e6d9b0"}, {"problem": 22, "code": "(fn cnt [x & [r]] (if (empty? x) r (cnt (rest x) (inc (or r 0)))))", "user": "5a0ce1a5e4b04bbd27e6d9b7"}, {"problem": 22, "code": "(partial reduce (fn [v & _] (inc v)) 0)", "user": "5a062e07e4b01bb0ae8afdc5"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5a090a06e4b01bb0ae8afdff"}, {"problem": 22, "code": "(fn cnt [X] (if (empty? X) 0 (+ 1 (cnt (rest X) ))))", "user": "5a05a807e4b01bb0ae8afdb8"}, {"problem": 22, "code": "(fn [coll] (reduce + (map (fn [v] 1) coll)))", "user": "5a0a25fce4b0eab8c044893d"}, {"problem": 22, "code": "(fn [collection]\n      (loop [ collection collection\n             idx 0\n             ]\n      (if (first collection)\n          (recur (rest collection)\n                 (inc idx)\n           )\n          idx\n      )\n      )\n)", "user": "598c9564e4b02b9968b84d09"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5a10bf7be4b04bbd27e6da20"}, {"problem": 22, "code": "#(reduce (fn [x y] (+ x 1)) 0 %1)", "user": "5a10f089e4b04bbd27e6da22"}, {"problem": 22, "code": "#(reduce (fn [m _] (inc m)) 0 %)", "user": "5a111576e4b04bbd27e6da24"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5a1149ace4b04bbd27e6da26"}, {"problem": 22, "code": "#(loop [x %1 y 0]\n    (if(= () x)\n      y\n      (recur (rest x) (inc y))\n    )\n  )", "user": "55129667e4b06e50f9beb1ac"}, {"problem": 22, "code": "(fn [list] (reduce (fn [x y] (inc x)) 0 list))", "user": "5a12dea3e4b04bbd27e6da44"}, {"problem": 22, "code": "#(loop [col %1 n 0] (if (= (first col) nil) n (recur (rest col) (inc n))))", "user": "5a0ef454e4b04bbd27e6d9fa"}, {"problem": 22, "code": "(fn [sequence]\n\t(loop [i 0 seq1 sequence]\n\t\t(if (= seq1 [])\n\t\ti\n\t\t(recur (inc i) (rest seq1)))))", "user": "5a055eace4b01bb0ae8afdb1"}, {"problem": 22, "code": "(fn [coll]\n  (loop [coll coll\n         c 0]\n    (if (first coll)\n      (recur (rest coll) (+ 1 c))\n      c)))", "user": "5a125a38e4b04bbd27e6da39"}, {"problem": 22, "code": "(fn [data] \n  ((fn [data itr] \n             (if (seq data)\n               (recur (rest data) (+ itr 1))\n               itr)) data 0))", "user": "5a135573e4b0ff51aa4b3180"}, {"problem": 22, "code": "#((fn cnt [tot sq] (if (empty? sq) tot (cnt (+ 1 tot) (rest sq)))) 0 %)", "user": "5a137364e4b0ff51aa4b3185"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "4fef55a5e4b0678c553fc317"}, {"problem": 22, "code": "(fn nts [x] (if (empty? x) 0 (inc (nts (rest x) ))))", "user": "5a135415e4b0ff51aa4b317f"}, {"problem": 22, "code": "reduce (fn [sum num] (inc sum)) 0", "user": "5a133c05e4b0ff51aa4b317d"}, {"problem": 22, "code": "reduce (fn [cnt _] (inc cnt)) 0", "user": "5a14228fe4b0ff51aa4b3193"}, {"problem": 22, "code": "(fn [col]\n  (loop [i 0\n         out col]\n    (if (empty? out)\n      i\n      (recur (inc i)\n             (rest out)))))", "user": "5a14959de4b0ff51aa4b31a0"}, {"problem": 22, "code": "#(reduce (fn [a b] (inc a)) 0 %)", "user": "5a109606e4b04bbd27e6da1c"}, {"problem": 22, "code": "#(apply + (map (fn [x] 1) %))", "user": "5a12437be4b04bbd27e6da37"}, {"problem": 22, "code": "reduce #(inc (first %&)) 0", "user": "5a172b76e4b0ff51aa4b31d4"}, {"problem": 22, "code": "(fn [col]\n  (reduce (fn [n _] (inc n)) 0 col))", "user": "5a144fd8e4b0ff51aa4b319a"}, {"problem": 22, "code": "(fn[col] (reduce + (map (constantly 1) col)))", "user": "5a17d148e4b0ff51aa4b31db"}, {"problem": 22, "code": "(fn \n  [xs] \n  (loop [ct 0 remn xs]\n    (if (empty? remn) ct\n      (recur (inc ct) (rest remn)))))", "user": "5a16da30e4b0ff51aa4b31cc"}, {"problem": 22, "code": "reduce (fn [a b] (inc a)) 0", "user": "5a182c9de4b0ff51aa4b31e0"}, {"problem": 22, "code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "5a058d6be4b01bb0ae8afdb4"}, {"problem": 22, "code": "(fn [col]\n  (loop [col col\n         c 0]\n    (if (empty? col)\n      c\n      (recur (rest col) (inc c)))))", "user": "5a188be3e4b0ff51aa4b31ec"}, {"problem": 22, "code": "(fn my-count ([seqq] (if (empty? seqq) 0 (my-count (rest seqq) 1))) \n             ([seqq cnt] (if (empty? seqq) cnt (my-count (rest seqq) (inc cnt)))))", "user": "5a18f868e4b0ff51aa4b31f7"}, {"problem": 22, "code": "(fn [seq]\n  (loop [c 0 s seq]\n    (if (empty? s)\n      c\n      (recur (inc c) (rest s)))))", "user": "59f75327e4b0966464fe6aec"}, {"problem": 22, "code": "(fn func \n  [coll]\n  (reduce (fn [a x] (inc a)) 0 coll))", "user": "5a19d181e4b0ff51aa4b3207"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "59fd069ae4b01bb0ae8afcf4"}, {"problem": 22, "code": "#(loop [coll %\n        i 0]\n   (if (= '() coll)\n     i\n     (recur (rest coll) (inc i))))", "user": "5a1a7db2e4b0ff51aa4b3213"}, {"problem": 22, "code": "reduce #(inc %1 #_%2) 0", "user": "5112500ee4b0350614f07a72"}, {"problem": 22, "code": "#(reduce (fn [a v] (inc a)) 0 (vec %1))", "user": "5a18488ee4b0ff51aa4b31e5"}, {"problem": 22, "code": "(fn mycount\n  ([coll]\n     (mycount coll 0))\n  ([coll start]\n   (let [remaining coll cnt start]\n     (if (nil? (first remaining))\n       cnt\n       (recur (rest remaining) (inc cnt)))\n     ))\n)", "user": "5a18bcd0e4b0ff51aa4b31f1"}, {"problem": 22, "code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "5a1b82dde4b0ff51aa4b3225"}, {"problem": 22, "code": "(fn counting [col] \n  (let [newlist (rest (into '() col))]\n    (if (= newlist '()) 1 (+ 1 (counting newlist)))\n  )\n)", "user": "59e337dae4b08badc2a0c52d"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5a1483e8e4b0ff51aa4b319e"}, {"problem": 22, "code": "reduce (fn [x _] (inc x)) 0", "user": "5a1607a2e4b0ff51aa4b31c3"}, {"problem": 22, "code": "#(reduce (fn [agg el] (inc agg)) 0 %1)", "user": "5a1c07c1e4b0ff51aa4b3232"}, {"problem": 22, "code": "#(reduce (fn [acc x]\n           (inc acc))\n         0 %)", "user": "5a1b1462e4b0ff51aa4b321d"}, {"problem": 22, "code": "(fn my-count\n  ([xs] (my-count xs 0))\n  ([[x & xs] n]\n   (if (not (empty? xs))\n     (my-count xs (+ n 1))\n     (+ 1 n))))", "user": "5a1c94dee4b0ff51aa4b3249"}, {"problem": 22, "code": "reduce (fn [x y] (inc x)) 0", "user": "5a1df94ce4b0ff51aa4b3265"}, {"problem": 22, "code": "(fn size [l]\n  (if (empty? l)\n    0\n    (+ 1 (size (rest l)))))", "user": "5a1e93bee4b0ff51aa4b3270"}, {"problem": 22, "code": "#(reduce (fn [x _] (inc x)) 0 %)", "user": "5a1e7e98e4b0ff51aa4b326d"}, {"problem": 22, "code": "(fn [xs]\n\n    (loop [cnt 0\n\n           sq xs]\n\n      (if (empty? sq)\n\n        cnt\n\n        (recur (inc cnt) (rest sq)))))", "user": "5a09f35fe4b0eab8c0448934"}, {"problem": 22, "code": "#(loop [collection % accumulator 0]\n   (if (empty? collection)\n    accumulator\n    (recur (rest collection) (inc accumulator))))", "user": "5a1dd5b4e4b0ff51aa4b3260"}, {"problem": 22, "code": "(fn my-count [lst]\n  (if (empty? lst)\n    0\n    (+ 1 (my-count (rest lst)))))", "user": "5a1ef1abe4b0ff51aa4b327c"}, {"problem": 22, "code": "(fn [x]\n  (reduce (fn [a b] (+ a 1)) 0 x))", "user": "5a1ef970e4b0ff51aa4b327d"}, {"problem": 22, "code": "#(reduce (fn [a _] (inc a)) 0 %)", "user": "5a1dda7de4b0ff51aa4b3261"}, {"problem": 22, "code": "(fn f [x]\n  (if (= x [])\n    0\n    (+ 1 (f (rest x)))))", "user": "5a1f8c7ce4b0ff51aa4b3286"}, {"problem": 22, "code": "#(reduce (fn [a b] (+ 1 a)) 0 %)", "user": "5a1fb7d0e4b0ff51aa4b328c"}, {"problem": 22, "code": "(fn [input]\n  (loop [remainder input acc 0]\n    (if (empty? remainder)\n      acc\n      (recur (rest remainder) (inc acc))\n      )\n    )\n  )", "user": "5a1fcc82e4b0ff51aa4b3293"}, {"problem": 22, "code": "(fn [x] (let [fin (fn [y c] (if (first y) (recur (rest y) (inc c)) c))] \n          (fin x 0)))", "user": "59ff9424e4b01bb0ae8afd24"}, {"problem": 22, "code": "(fn [x] (loop [i 0 j x] (if (not= (first j) nil) (recur (inc i)\n (drop 1 j)) i)))", "user": "5a2026ece4b0ff51aa4b329b"}, {"problem": 22, "code": "#(alength (to-array %))", "user": "5a208195e4b0ff51aa4b32a3"}, {"problem": 22, "code": "(fn bla\n\t([s] (bla s 0))\n\t([s c] (if (= s []) c (bla (rest s) (+ c 1))))\n)", "user": "5a214798e4b0ff51aa4b32aa"}, {"problem": 22, "code": "(fn [holder]\n  (loop [modholder holder\n         counter 0]\n    (if (= nil (first modholder))\n     counter\n    (recur (rest modholder) (+ counter 1)))))", "user": "5a2185a4e4b0ff51aa4b32b0"}, {"problem": 22, "code": "reduce (fn [c _] (+ 1 c)) 0", "user": "5a219b44e4b0ff51aa4b32b3"}, {"problem": 22, "code": "(fn [input]\n  (loop [x 0 current input]\n    (if (empty? current) x (recur (+ 1 x) (rest current)))))", "user": "5a21d34ce4b0ff51aa4b32b9"}, {"problem": 22, "code": "(fn [l]\n  (loop [l l n 1]\n    (if-not (next l)\n      n\n      (recur (next l) (inc n)))))", "user": "56ef077ae4b04a395b9a0459"}, {"problem": 22, "code": "reduce (fn [x y] (+ x 1)) 0", "user": "5a221881e4b0ff51aa4b32c0"}, {"problem": 22, "code": "(fn [x]\n  (let [a (fn a [[y & ys] n]\n            (if y\n              (a ys (+ 1 n))\n              n))]\n    (a x 0)))", "user": "5a067f26e4b01bb0ae8afdcc"}, {"problem": 22, "code": "#(loop [x %\n        counter 0]\n   (if (nil? (first x))\n       counter\n   \t   (recur (rest x) (inc counter))))", "user": "5a23cabce4b0ff51aa4b32df"}, {"problem": 22, "code": "(fn foo [l] (if (empty? l) 0 (inc (foo (rest l)))))", "user": "5a1bec89e4b0ff51aa4b322f"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "5a23c4b0e4b0ff51aa4b32de"}, {"problem": 22, "code": "(fn [coll]\n  (loop [idx 0 sub coll]\n   (if (empty? sub)\n     idx\n     (recur (inc idx) (rest sub))\n   )\n  )\n)", "user": "5a244240e4b0ff51aa4b32e9"}, {"problem": 22, "code": "(fn [coll]\n  (reduce (fn [n _]\n            (+ n 1)) 0 coll))", "user": "5a250b86e4b07f18be40aa19"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "5a21c3f9e4b0ff51aa4b32b7"}, {"problem": 22, "code": "#(reduce (fn [n _] (inc n)) 0 %1)", "user": "5a257747e4b07f18be40aa1f"}, {"problem": 22, "code": "(fn [mylist] (apply + (map (fn [x] 1) mylist)))", "user": "5a26c828e4b07f18be40aa4b"}, {"problem": 22, "code": "#(if (empty? %1)\n      0\n      (reduce\n       (fn\n         [a _]\n         (inc a)) 0 %1))", "user": "5a274a33e4b07f18be40aa59"}, {"problem": 22, "code": "reduce (fn [c x] (+ c 1)) 0", "user": "58da426de4b0a4d5acaab654"}, {"problem": 22, "code": "(fn[col]\n  (loop[n 0\n        x col]\n    (if (seq x)\n      (recur (inc n) (rest x))\n      n)))", "user": "5a2834dfe4b07f18be40aa64"}, {"problem": 22, "code": "(fn [args]\n    (loop [cnt args acc 0]\n       (if (.isEmpty cnt)\n            acc\n          (recur (rest cnt) (inc acc))\n\n    ))\n  )", "user": "55d7312ee4b0e31453f64a9f"}, {"problem": 22, "code": "(fn [x]\n  (reduce +\n          (map (fn [i] 1)\n               x)))", "user": "5a292efde4b07f18be40aa77"}, {"problem": 22, "code": "(fn [coll] (if (= (type coll) java.lang.String) (.length coll) (.size coll)))", "user": "5a2960fde4b07f18be40aa78"}, {"problem": 22, "code": "(fn [xs]\n  (loop [s xs, n 0]\n    (if (empty? s)\n      n\n      (recur (rest s) (inc n)))))", "user": "5a09f205e4b0eab8c0448933"}, {"problem": 22, "code": "(fn meme [se] (if (empty? se) 0 (+ (meme (rest se)) 1)))", "user": "59e763c9e4b0249b72820713"}, {"problem": 22, "code": "(fn [x] (let [go (fn [x n] (if (empty?  x) n (recur (rest x) (+ 1 n))))] (go x 0)))", "user": "5a29d658e4b09cafd31c7f29"}, {"problem": 22, "code": "(fn [sqn] (reduce (fn [a,v] (+ 1 a)) 0 sqn))", "user": "5a2a0cb6e4b09cafd31c7f2c"}, {"problem": 22, "code": "(fn [sqs] (alength (to-array sqs)))", "user": "5a291617e4b07f18be40aa76"}, {"problem": 22, "code": "(fn [lat] (reduce (fn [x y] (+ x 1)) 0 lat))", "user": "59554b72e4b066ee0a44af2a"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5a2b2140e4b09cafd31c7f44"}, {"problem": 22, "code": "#(reduce + (map (fn [_] 1) %))", "user": "5a2185c6e4b0ff51aa4b32b1"}, {"problem": 22, "code": "(fn [l] (apply + (map (fn [x] 1) l)))", "user": "5a2b7f4ee4b09cafd31c7f4a"}, {"problem": 22, "code": "(fn len [coll]\n  (if (empty? coll)\n    0\n    (+ 1 (len (rest coll)))))", "user": "5a2c20c3e4b09cafd31c7f51"}, {"problem": 22, "code": "(fn [se]\n  (loop [ s se c 0]\n  ( if (nil? (first s))\n    c\n    (recur (next s) ( inc c)))))", "user": "5a1c8c26e4b0ff51aa4b3247"}, {"problem": 22, "code": "(fn [x] \n  (loop [x x c 0]\n    (if (= x ())\n      c\n      (recur (rest x)\n             (inc c)))))", "user": "5a29ee57e4b09cafd31c7f2b"}, {"problem": 22, "code": "reduce (fn [cc _] (inc cc)) 0", "user": "5955a0d3e4b066ee0a44af37"}, {"problem": 22, "code": "(fn my-count [a-sequence]\n  (if (empty? a-sequence)\n    0\n    (inc (my-count (rest a-sequence)))))", "user": "5a2d7f36e4b09cafd31c7f6e"}, {"problem": 22, "code": "(fn [n] (loop [s n a 0] (if (empty? s) a (recur (rest s) (+ 1 a)))))", "user": "5a2b7727e4b09cafd31c7f49"}, {"problem": 22, "code": "(fn [l] (loop [r l n 0] (if (empty? r) n (recur (rest r) (+ n 1)))))", "user": "5a2df4a0e4b09cafd31c7f74"}, {"problem": 22, "code": "(fn [ls] (reduce + (map (fn [x] 1) ls)))", "user": "5a2b2ff6e4b09cafd31c7f45"}, {"problem": 22, "code": "reduce (fn [counter element] (inc counter)) 0", "user": "5a285a38e4b07f18be40aa67"}, {"problem": 22, "code": "(fn [lst] (reduce (fn [x y] (inc x)) 0 lst))", "user": "5a2e80fde4b09cafd31c7f7d"}, {"problem": 22, "code": "reduce (fn [a b] (+ 1 a)) 0", "user": "5a14a48fe4b0ff51aa4b31a1"}, {"problem": 22, "code": "(fn cnt [x]\n  (if (empty? (rest x))\n    1\n    (inc (cnt (rest x)))))", "user": "5a2e638be4b09cafd31c7f7a"}, {"problem": 22, "code": "(fn [arr] (reduce (fn [c _] (inc c)) 0 arr))", "user": "5a1d0381e4b0ff51aa4b3255"}, {"problem": 22, "code": "#(reduce (fn [x _] (inc x)) 0 %)", "user": "5a2fe47de4b09cafd31c7f94"}, {"problem": 22, "code": "(fn new-count [s]\n  (loop [i 0 lst s]\n    (if (empty? lst)\n      i\n      (recur (inc i) (next lst))\n      )\n    )\n  )", "user": "5a2e39fce4b09cafd31c7f77"}, {"problem": 22, "code": "#(reduce (fn [p _] (+ p 1)) 0 %)", "user": "5a15366de4b0ff51aa4b31ad"}, {"problem": 22, "code": "#(reduce (fn [total item] (+ total 1)) 0 %)", "user": "5a21a5ace4b0ff51aa4b32b4"}, {"problem": 22, "code": "#(alength (to-array %))", "user": "5a303f5ee4b09cafd31c7f9a"}, {"problem": 22, "code": "#(loop[x % c 0] (if (empty? x) c (recur (rest x) (inc c))))", "user": "5644149de4b0018b46ad8c07"}, {"problem": 22, "code": "(fn [a] \n  (loop [cnt 0 ary a]\n    (if (empty? ary)\n      cnt\n      (recur (+ cnt 1) (rest ary)))))", "user": "5a011305e4b01bb0ae8afd40"}, {"problem": 22, "code": "(fn myfn ([lst] (myfn lst 0)) ([lst n] (if (empty? lst) n (myfn (rest lst) (+ n 1)))))", "user": "5a2cfa85e4b09cafd31c7f61"}, {"problem": 22, "code": "(fn [coll] (reduce (fn [c e] (inc c)) 0 coll))", "user": "531bf76fe4b08068f379ed96"}, {"problem": 22, "code": "(fn [s] (reduce (fn [res val] (+ res 1)) 0 s))", "user": "5a34de78e4b0ddc586f153d0"}, {"problem": 22, "code": "(fn [x] (first (first (reverse (map list (iterate inc 1) x)))))", "user": "5a34f342e4b0ddc586f153d1"}, {"problem": 22, "code": "reduce #(+ %1 (if (= 1 %2) %2 1)) 0", "user": "5a34cc9fe4b0ddc586f153ce"}, {"problem": 22, "code": "(fn [x] (loop [n 0 xx x] (if (= xx ()) n (recur (inc n) (rest xx)))))", "user": "5a36405ee4b0ddc586f153e5"}, {"problem": 22, "code": "(fn my-count\n  ([lst] (my-count lst 0))\n  ([lst n]\n   (if (empty? lst)\n     n\n     (my-count (rest lst) (inc n)))))", "user": "5a346d73e4b0ddc586f153c8"}, {"problem": 22, "code": "#(last (reductions +\n         (map (fn [_] 1) %)))", "user": "5a319634e4b0e23b2502f9c9"}, {"problem": 22, "code": "(fn my-count\n  ([coll] (my-count coll 0))\n  ([coll n]\n    (cond \n      (nil? (first coll)) n\n      :else (recur (rest coll) (+ n 1)))))", "user": "5a342188e4b0ddc586f153bd"}, {"problem": 22, "code": "(fn [x]\n  (loop [lis x\n         n 0]\n  \t(if (empty? lis)\n      n\n      (recur (rest lis)\n             (inc n)))))", "user": "5a373b80e4b001c08efc0c7c"}, {"problem": 22, "code": "(fn [input-list] (reduce + (map (constantly 1) input-list)))", "user": "5a1679d9e4b0ff51aa4b31ca"}, {"problem": 22, "code": "(fn l\n    ([s]\n     (l s 1))\n    ([s n]\n     (if (next s)\n         (l (next s) (inc n))\n         n)))", "user": "5a37fab1e4b001c08efc0c93"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "5a37b6dbe4b001c08efc0c88"}, {"problem": 22, "code": "#((fn recursive-count [coll len] (if (empty? coll) len (recursive-count (rest coll) (inc len)))) % 0)", "user": "5773f3a9e4b0979f896515f2"}, {"problem": 22, "code": "(fn [coll] (reduce (fn [sum x] (inc sum)) 0 coll))", "user": "5a1c3c11e4b0ff51aa4b323d"}, {"problem": 22, "code": "#(alength (to-array %))", "user": "510d2a99e4b078ea71921130"}, {"problem": 22, "code": "(fn cnt [list]\n  (cond\n   (empty? list) 0\n   :else (inc (cnt (rest list)))))", "user": "5a39e36ce4b001c08efc0cbc"}, {"problem": 22, "code": "(fn [l]\n  (apply + (map #(if % 1 0) l)))", "user": "5a3b5cfde4b001c08efc0cd4"}, {"problem": 22, "code": "#(reduce + (map (fn [_] 1) %1))", "user": "52513bf1e4b0541d1855b86e"}, {"problem": 22, "code": "#(reduce (fn [res _] (inc res)) 0 %)", "user": "59ef5280e4b0966464fe6a2b"}, {"problem": 22, "code": "(fn count' [collection]\n  (loop [coll collection length 0]\n    (if (= (first coll) nil)\n      length\n      (recur (rest coll) (inc length)))))", "user": "5a3b9092e4b001c08efc0cd7"}, {"problem": 22, "code": "(fn [s] (loop [x s \n               cnt 0] \n          (if (empty? x) \n            cnt\n            (recur (rest x) (inc cnt)))))", "user": "5a394deae4b001c08efc0cae"}, {"problem": 22, "code": "reduce (fn [acc _] (inc acc)) 0", "user": "5a3c5c54e4b001c08efc0ce3"}, {"problem": 22, "code": "(fn [coll]\n  (loop [cnt 0 temp-coll coll]\n    (if (empty? temp-coll) \n      cnt\n      (recur (inc cnt) (rest temp-coll)))))", "user": "5a3a3824e4b001c08efc0cc2"}, {"problem": 22, "code": "#((fn [x] (reduce (fn [acc val] (inc acc)) 0 x)) %)", "user": "5a38f70be4b001c08efc0ca7"}, {"problem": 22, "code": "#(loop [summ 0 coll %1]\n    (if (not= (first coll) nil)\n      (recur (+ summ 1) (rest coll))\n      summ))", "user": "58a6806ee4b01a0c0b23292f"}, {"problem": 22, "code": "#(apply max (keys (zipmap (iterate inc 1) %)))", "user": "5a3d7afae4b0447ef91cc5a6"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "59dfb8dbe4b08badc2a0c4da"}, {"problem": 22, "code": "#(apply + (map (fn [x] 1) %))", "user": "52281e1ee4b0186687e23a69"}, {"problem": 22, "code": "(fn [a] (loop [x a i 0]\n  (if (empty? x)\n    i\n    (recur (rest x) (+ i 1)))))", "user": "56f73913e4b08e7d20b9682d"}, {"problem": 22, "code": "reduce (fn [a _] (inc a)) 0", "user": "5a3d33b3e4b001c08efc0cef"}, {"problem": 22, "code": "#(reduce (fn [a b] (inc a)) 0 %)", "user": "5a3ece62e4b0447ef91cc5b9"}, {"problem": 22, "code": "reduce (fn [x y] (inc x)) 0", "user": "5a3e0e44e4b0447ef91cc5ad"}, {"problem": 22, "code": "(fn [coll] \n  (loop [coll coll\n         amount 0]\n    (if (empty? coll) \n      amount\n      (recur (rest coll) (inc amount)))))", "user": "52fd35eee4b047fd55837029"}, {"problem": 22, "code": "(fn [coll] (reduce (fn [total, curr](+ 1 total)) 0 coll))", "user": "5a35d515e4b0ddc586f153e1"}, {"problem": 22, "code": "(fn count-shit [counter, collection] (if (empty? collection) counter (count-shit (+ counter 1) (rest collection)))) 0", "user": "5a402586e4b0447ef91cc5c8"}, {"problem": 22, "code": "#(loop [li %\n        cnt 0]\n  (if (= nil (first li))\n    cnt\n    (recur (rest li) (inc cnt))\n    )\n )", "user": "5a40235fe4b0447ef91cc5c6"}, {"problem": 22, "code": "#(reduce (fn [a _] (inc a)) 0 %)", "user": "5a401a7de4b0447ef91cc5c5"}, {"problem": 22, "code": "(fn [inp] (reduce + (map (fn [num] 1 ) inp)))", "user": "5a40eb64e4b0447ef91cc5d8"}, {"problem": 22, "code": "(fn\n  [list]\n  (reduce \n    (fn [val coll] (inc val))\n    0 list))", "user": "5a429e40e4b0447ef91cc5f9"}, {"problem": 22, "code": "(fn [collection]\n  (reduce\n   (fn [accumulator current] (inc accumulator))\n   0\n   collection))", "user": "59913b38e4b0866487ed0d5c"}, {"problem": 22, "code": "(fn d [seq]\n   (if (empty? seq)\n     0\n     (+ (d (rest seq)) 1)))", "user": "5a43347ee4b0447ef91cc603"}, {"problem": 22, "code": "#(reduce + \n     (map (fn [x] 1) %)\n)", "user": "5a424954e4b0447ef91cc5f0"}, {"problem": 22, "code": "#(loop [cnt 0 temp-coll %]\n   (if (empty? temp-coll)\n     cnt\n     (recur (inc cnt) (rest temp-coll))))", "user": "5a43b7e9e4b0447ef91cc609"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "504e5333e4b0f6ff3350c4a2"}, {"problem": 22, "code": "reduce (fn [i, j] (+ i 1)) 0", "user": "5a0e9a54e4b04bbd27e6d9ef"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5a4208dde4b0447ef91cc5ee"}, {"problem": 22, "code": "reduce (fn [x y] (+ 1 x)) 0", "user": "5a3c2a08e4b001c08efc0cdf"}, {"problem": 22, "code": "#(loop [cnt 0 li %] (if (empty? li) cnt (recur (inc cnt) (rest li))))", "user": "5a45aaece4b05d388ecb6b3f"}, {"problem": 22, "code": "reduce (fn [a _] (inc a)) 0", "user": "5a45a73ae4b05d388ecb6b3d"}, {"problem": 22, "code": "#(reduce (fn [x y]\n           (inc x)) 0 %)", "user": "5a4443cae4b0447ef91cc60f"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5a42d6a8e4b0447ef91cc5fb"}, {"problem": 22, "code": "#(reduce (fn [x _] (inc x)) 0 %)", "user": "5a4791bae4b05d388ecb6b57"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "5a40bd29e4b0447ef91cc5d6"}, {"problem": 22, "code": "(fn my-count\n    [collection]\n      (if (empty? collection)\n        0\n        (+ (my-count (rest collection)) 1)))", "user": "5a47e8ade4b05d388ecb6b5f"}, {"problem": 22, "code": "(fn [seq] (reduce (fn [n1 n2] (inc n1)) 0 seq))", "user": "5a47ce68e4b05d388ecb6b5d"}, {"problem": 22, "code": "(fn [s]\n  (loop [s s, i 0]\n    (if (seq s)\n      (recur (rest s) (inc i))\n      i)))", "user": "5a481e05e4b05d388ecb6b64"}, {"problem": 22, "code": "reduce (fn [x _] (inc x)) 0", "user": "5a48f53de4b05d388ecb6b6a"}, {"problem": 22, "code": "(fn mcnt [s] (reduce + (map (fn [x] 1) s)))", "user": "5a487d9ce4b05d388ecb6b67"}, {"problem": 22, "code": "(fn [li]\n  (loop [cnt 0\n         l li]\n    (if (empty? l)\n      cnt\n      (recur (inc cnt) (rest l)))))", "user": "5a47423be4b05d388ecb6b52"}, {"problem": 22, "code": "#(reduce (fn [x _] (inc x)) 0 %)", "user": "5a4993c0e4b05d388ecb6b71"}, {"problem": 22, "code": "#(reduce + (map (fn [_] 1) %))", "user": "5a47551de4b05d388ecb6b54"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5a4aa17fe4b05d388ecb6b7c"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5a48042fe4b05d388ecb6b62"}, {"problem": 22, "code": "(fn [sq] \n  (loop [idx 0\n         tail sq]\n    (if (nil? tail)\n      idx\n      (recur (inc idx) (next tail))\n    )\n  )\n)", "user": "5a388675e4b001c08efc0ca2"}, {"problem": 22, "code": "(fn [s] (reduce (fn [acc x] (inc acc)) 0 s))", "user": "5a3dc590e4b0447ef91cc5a9"}, {"problem": 22, "code": "(fn [xs] (loop [s xs n 0] \n  (if (empty? s)\n    n\n    (recur (rest s) (inc n)))))", "user": "5a4caa20e4b05d388ecb6b94"}, {"problem": 22, "code": "(fn count-seq\n  [my-seq]\n  (reduce\n     (fn [c _] (inc c))\n     0 my-seq)\n  )", "user": "5a4cbba1e4b05d388ecb6b98"}, {"problem": 22, "code": "#(reduce (fn [a b] (+ a 1)) 0 %)", "user": "5a4c278ee4b05d388ecb6b8e"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5a4d14f4e4b05d388ecb6ba1"}, {"problem": 22, "code": "(fn [col]    \n   (loop [n col y 0] \n     (if (empty? n) \n       y \n       (recur (rest n) (+ y 1))\n       )))", "user": "59ff4ba2e4b01bb0ae8afd1d"}, {"problem": 22, "code": "reduce (fn [x y] (inc x)) 0", "user": "5a4d656fe4b05d388ecb6ba9"}, {"problem": 22, "code": "(fn [coll] (reduce (fn [x y] (inc x)) 0 coll))", "user": "5a4d8a04e4b05d388ecb6bac"}, {"problem": 22, "code": "#(reduce (fn [a _] (inc a)) 0 %)", "user": "5a4de614e4b05d388ecb6bb1"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5a4de5f4e4b05d388ecb6bb0"}, {"problem": 22, "code": "(fn [coll]\n  (reduce (fn [x y] (inc x)) 0 coll))", "user": "5a4e1c81e4b05d388ecb6bb6"}, {"problem": 22, "code": "(fn  [l] \n  (loop [w l k 0] \n    (if (= (first w) nil)\n       k\n       (recur (rest w)(inc k))\n     )\n    )\n)", "user": "5a44e514e4b0447ef91cc614"}, {"problem": 22, "code": "(fn count-seq [coll]\n  (if (empty? coll)\n    0\n    (+ 1 (count-seq (rest coll)))))", "user": "5a492896e4b05d388ecb6b6e"}, {"problem": 22, "code": "(fn [ls]\n  (loop [ls' ls\n         n' 0]\n         (if (empty? ls')\n                n'\n                (recur (drop 1 ls') (inc n')))))", "user": "58db7b81e4b0a4d5acaab680"}, {"problem": 22, "code": "#(alength (to-array %))", "user": "5a4e7025e4b05d388ecb6bbd"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "59da327de4b0ef0a1e9b5c63"}, {"problem": 22, "code": "#(reduce (fn [s e] (+ s 1)) 0 %)", "user": "5a512929e4b05d388ecb6be2"}, {"problem": 22, "code": "(fn lol\n\t[sq]\n\t(loop [ll sq cnt 0]\n\t\t(if (empty? ll)\n\t\t\tcnt\n\t\t\t(recur (rest ll) (inc cnt))\n\t\t)\n\t)\n)", "user": "5a222c17e4b0ff51aa4b32c1"}, {"problem": 22, "code": "(fn count-size [incoming-list] (if (empty? incoming-list) (+ 0 0) (+ 1 (count-size (rest incoming-list)))))", "user": "5a4dbc97e4b05d388ecb6bae"}, {"problem": 22, "code": "(fn counter [list]\n(if (empty? list) 0\n   (+ 1 (counter (rest list)))))", "user": "5a4fa947e4b05d388ecb6bce"}, {"problem": 22, "code": "#(reduce + (map (fn [_] 1) %))", "user": "5a535572e4b05d388ecb6c0b"}, {"problem": 22, "code": "reduce #(inc %1 #_%2) 0", "user": "5a2abf2ae4b09cafd31c7f38"}, {"problem": 22, "code": "(fn my_count [x] ((fn helper [coll n] (if (empty? coll) n (helper (rest coll) (inc n)))) (seq x) 0))", "user": "5a533cc0e4b05d388ecb6c09"}, {"problem": 22, "code": "#(reduce (fn [s n] (inc s)) 0 %)", "user": "5a4e06c1e4b05d388ecb6bb2"}, {"problem": 22, "code": "reduce (fn [value element]\n          (or (inc value)\n              element))\n        0", "user": "4ee897fe535d93acb0a66883"}, {"problem": 22, "code": "(fn [seq] (reduce + (map #(or 1 %) seq)))", "user": "5a52f2cbe4b05d388ecb6c06"}, {"problem": 22, "code": "#(loop [n 0 stuff %] (if (empty? stuff) n (recur (inc n) (rest stuff))))", "user": "5a45aa14e4b05d388ecb6b3e"}, {"problem": 22, "code": "(fn numEl ([sequ size] (if (= (rest sequ) '()) size (numEl (rest sequ) (+ size 1))))\n  ([sequ] (numEl sequ 1)))", "user": "5a53f2aae4b05d388ecb6c1e"}, {"problem": 22, "code": ";mine\n;#(reduce (fn [sum _] (inc sum)) 0 %)\n;golf\nreduce (fn [sum _] (inc sum)) 0", "user": "5a544eeee4b05d388ecb6c24"}, {"problem": 22, "code": "(fn f22 [c] (if (nil? (first c)) 0 (inc (f22 (next c)))))", "user": "5a536cf2e4b05d388ecb6c10"}, {"problem": 22, "code": "#(reduce (fn [k v] (inc k)) 0 %)", "user": "5a5495f0e4b05d388ecb6c29"}, {"problem": 22, "code": "(fn count-a-seq [lat]\n  (reduce (fn [x y] (+ x 1)) 0 lat))", "user": "5a38b82ee4b001c08efc0ca5"}, {"problem": 22, "code": "#(reduce (fn [i array] (inc i)) 0 %)", "user": "5a534241e4b05d388ecb6c0a"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "5a527beee4b05d388ecb6bfe"}, {"problem": 22, "code": "#(apply + (map (constantly 1) %))", "user": "5a551177e4b05d388ecb6c38"}, {"problem": 22, "code": "(fn [col] (reduce (fn [acc v] (+ acc 1)) 0 col ))", "user": "5a55114ae4b05d388ecb6c37"}, {"problem": 22, "code": "(fn d [seq]\n   (if (empty? seq)\n     0\n     (+ (d (rest seq)) 1)))", "user": "58d4d864e4b03c36ff7e594c"}, {"problem": 22, "code": "(fn [s]\n  (loop [i 0\n         coll s]\n    (if (empty? coll)\n      i\n      (recur (inc i) (rest coll)))))", "user": "565654dae4b0f9d632dd849f"}, {"problem": 22, "code": "reduce (fn [x t] (inc x)) 0", "user": "5a4cac86e4b05d388ecb6b95"}, {"problem": 22, "code": "(fn [coll] (reduce (fn [prev _] (inc prev)) 0 coll))", "user": "5a566e8fe4b05d388ecb6c51"}, {"problem": 22, "code": "#(reduce\n  (fn [c _] (inc c))\n  0 %)", "user": "5a5700a8e4b05d388ecb6c5d"}, {"problem": 22, "code": "(fn [vc]\n  (loop [v vc c 0]\n    (if (= v [])\n      c\n      (recur (rest v) (inc c)))))", "user": "56fd058be4b08d47c97781a1"}, {"problem": 22, "code": "(fn [s]\n  (let [inner-count (fn [sq i]\n    (if (empty? sq)\n      i\n      (recur (rest sq) (+ i 1))))]\n    (inner-count s 0)))", "user": "5a516ae1e4b05d388ecb6be8"}, {"problem": 22, "code": "reduce (fn [x _] (inc x)) 0", "user": "5a5767f3e4b05d388ecb6c65"}, {"problem": 22, "code": "reduce (fn [x _] (inc x)) 0", "user": "544e5b22e4b0e39780006983"}, {"problem": 22, "code": "(fn [xs] (reduce (fn [n _] (inc n)) 0 xs))", "user": "5a5800e1e4b05d388ecb6c76"}, {"problem": 22, "code": "reduce (fn [x _] (inc x)) 0", "user": "5a584ca2e4b05d388ecb6c7d"}, {"problem": 22, "code": "#((fn [s c]\n    (if (empty? s) \n      c\n      (recur (next s) (inc c)))) % 0)", "user": "5a58ae01e4b05d388ecb6c82"}, {"problem": 22, "code": "reduce (fn [x y] (+ x 1)) 0", "user": "58cabf32e4b03c36ff7e583a"}, {"problem": 22, "code": "#(loop [coll %\n         x 0]\n    (if (empty? coll)\n        x \n        (recur (rest coll) (inc x))))", "user": "5a51e029e4b05d388ecb6bf0"}, {"problem": 22, "code": "(fn countLength [list] (if (empty? list) 0 (inc (countLength (rest list)))))", "user": "5a59a76fe4b05d388ecb6c98"}, {"problem": 22, "code": "(fn [lst] (reduce (fn [acc, _] (inc acc)) 0 lst))", "user": "5a591d04e4b05d388ecb6c90"}, {"problem": 22, "code": "reduce (fn [a b] (+ 1 a)) 0", "user": "5a5a26dce4b05d388ecb6ca6"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5a59a67fe4b05d388ecb6c97"}, {"problem": 22, "code": "(fn cnt [s] (if (empty? s) 0 (+ 1 (cnt (rest s)))))", "user": "5a5894d9e4b05d388ecb6c81"}, {"problem": 22, "code": "(fn size [seq]\n  (loop [rem-seq seq n 0]\n    (if (empty? rem-seq)\n      n\n      (recur (rest rem-seq) (inc n)))))", "user": "588f55d2e4b00487982d51a5"}, {"problem": 22, "code": "(fn [x] (reduce + (map (fn [z] 1) x)))", "user": "5a5ad949e4b05d388ecb6cb4"}, {"problem": 22, "code": "(fn [l] (loop [counter 0 sq (vec l)] (if (empty? sq) counter (recur (inc counter) (pop sq)))))", "user": "5a5b5806e4b0512ff01cd904"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5a525b25e4b05d388ecb6bf8"}, {"problem": 22, "code": "(fn my-f [s] (loop [l s\n                    cnt 0]\n               (if (seq l)\n                 (recur (rest l) (inc cnt))\n                 cnt)))", "user": "5a56ea8ce4b05d388ecb6c5a"}, {"problem": 22, "code": "(partial reduce (fn [acc _] (+ 1 acc)) 0)", "user": "5a5be1ece4b0512ff01cd90f"}, {"problem": 22, "code": "(fn length\n  [s]\n  (if (empty? s)\n    0\n    (+ 1 (length (rest s)))))", "user": "5a5be4a6e4b0512ff01cd910"}, {"problem": 22, "code": "(fn [x] (reduce (fn [cnt r] (inc cnt)) 0 x))", "user": "5a5be4ebe4b0512ff01cd912"}, {"problem": 22, "code": "(fn [coll]\n  (reduce + (map (constantly 1) coll)))", "user": "5a58bfd0e4b05d388ecb6c84"}, {"problem": 22, "code": "(partial reduce (fn [c _] (inc c)) 0)", "user": "5a5d0726e4b0512ff01cd91b"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5a5dbe9de4b0512ff01cd92b"}, {"problem": 22, "code": "#(loop [total 0 elements %]\n   (if (empty? elements)\n     total\n     (recur (inc total) (rest elements))))", "user": "5a5ce474e4b0512ff01cd919"}, {"problem": 22, "code": "(partial reduce (fn [i _] (inc i)) 0)", "user": "51dafedee4b09f6bc204eee2"}, {"problem": 22, "code": "(fn [s]\n  (loop [coll s\n         c 0]\n     (if (empty? coll)\n         c\n         (recur (rest coll) (+ 1 c)))))", "user": "574c3d4ee4b02ea11479921a"}, {"problem": 22, "code": "#(inc\n  (last\n   (map (fn [x y] y) %1 (range))\n   ))", "user": "5a604b73e4b0512ff01cd959"}, {"problem": 22, "code": "(fn [seq]\n  (loop [remaining-seq seq acc 0]\n    (if (empty? remaining-seq)\n      acc\n      (recur (rest remaining-seq) (inc acc)))))", "user": "5a5d2965e4b0512ff01cd91d"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5a617533e4b0512ff01cd976"}, {"problem": 22, "code": "#(reduce (fn [x var]\n         \t(inc x))\n         0 %)", "user": "5a608721e4b0512ff01cd95f"}, {"problem": 22, "code": "(partial (fn recur-and-inc [n coll]\n  (if (next coll)\n    (recur-and-inc  (inc n) (next coll))\n    (inc n))) 0)", "user": "5a61bf79e4b0512ff01cd97b"}, {"problem": 22, "code": "(fn my-count [x] \n  (if (= x []) 0 (inc (my-count (rest x)))))", "user": "5a621702e4b0512ff01cd983"}, {"problem": 22, "code": "#(reduce (fn [ac e] (inc ac)) 0 %)", "user": "5a624129e4b0512ff01cd987"}, {"problem": 22, "code": "(fn count-me\n  [candidate]\n  (loop [left candidate\n         cnt 0]\n    (if (empty? left)\n      cnt\n      (recur (rest left) (inc cnt)))))", "user": "5a58d8a0e4b05d388ecb6c8a"}, {"problem": 22, "code": "(fn in-seq [seq]\n  (loop [x 0 ret seq]\n    (if-not (empty? ret)\n      (recur (inc x) (rest ret))\n      x\n    )\n  )\n)", "user": "554b975ae4b0a04f79299592"}, {"problem": 22, "code": "(fn my-count [x]\n  (if (empty? x)\n    0\n    (inc (my-count (next x)))))", "user": "5a5a6347e4b05d388ecb6ca9"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5892a5fde4b00487982d5228"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5a62096de4b0512ff01cd982"}, {"problem": 22, "code": "(fn [col] (reduce (fn [n _] (inc n)) 0 col))", "user": "5a64d12de4b0512ff01cd9a7"}, {"problem": 22, "code": "#(loop [idx 0\n       col %]\n  (if (empty? col)\n    idx\n    (recur (inc idx) (rest col))))", "user": "5a617a73e4b0512ff01cd977"}, {"problem": 22, "code": "(fn my-count\n  [s]\n  (cond\n    (empty? s) 0\n    :else (+ 1 (my-count (rest s)))))", "user": "5a024d72e4b01bb0ae8afd62"}, {"problem": 22, "code": "(fn [x] (loop [tok (first x) left (rest x) len 0] (if (nil? tok) len (recur (first left) (rest left) (+ len 1)))))", "user": "58d28e14e4b03c36ff7e5902"}, {"problem": 22, "code": "(fn fnt [x] \n  (if (empty? x) \n    0 \n   (inc (fnt (rest x))\n        )\n    )\n  )", "user": "5a64de48e4b0512ff01cd9ac"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5a675dd1e4b0512ff01cd9e5"}, {"problem": 22, "code": "#(reduce (fn [acc _] (+ acc 1)) 0 %)", "user": "5a677a5fe4b0512ff01cd9e7"}, {"problem": 22, "code": "(fn [x] (alength (into-array x)))", "user": "5a63f8bae4b0512ff01cd99f"}, {"problem": 22, "code": "(fn fun ([lst] (fun lst 0)) ([lst num] (if (empty? lst) num (fun (rest lst) (inc num)))))", "user": "5a663a32e4b0512ff01cd9c2"}, {"problem": 22, "code": "(fn [sequ] (reduce + (map (fn [x] (get x 1))(into [] (frequencies sequ)))))", "user": "5a67069ce4b0512ff01cd9d9"}, {"problem": 22, "code": "(fn [x]\n  (let [vector-x (into [] x)]\n  (loop [index 0]\n    (if (not (contains? vector-x index)) index\n        (recur (inc index))))))", "user": "58f5b58ae4b0438e51c2cedc"}, {"problem": 22, "code": "(fn bar\n  [sqc]\n  (if (first sqc)\n    (+ 1 (bar (rest sqc)))\n    0))", "user": "5a6a32b6e4b0512ff01cda22"}, {"problem": 22, "code": "(fn [x]\n  (loop [inx x ct 0]\n    (if (empty? inx)\n      ct\n      (recur (rest inx) (inc ct)))))", "user": "5a6a7cc5e4b0512ff01cda27"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "5a625bc2e4b0512ff01cd989"}, {"problem": 22, "code": "(fn recursive_count\n  [arr & {:keys [counter] :or {counter 0}}]\n  (if (empty? arr)\n  \tcounter\n   \t(recursive_count (rest arr) :counter (inc counter))))", "user": "5a514e68e4b05d388ecb6be5"}, {"problem": 22, "code": "(fn [x] (+ (first (last (map-indexed vector x))) 1))", "user": "5a6a436de4b0512ff01cda24"}, {"problem": 22, "code": "#(loop [coll %\n        cnt 0]\n   (if (empty? coll)\n     cnt\n     (recur (rest coll) (+ cnt 1))))", "user": "5a6bf911e4b0512ff01cda4c"}, {"problem": 22, "code": "(fn [collection] (reduce (fn [one, another] (+ one 1)) 0  collection))", "user": "5a6170fde4b0512ff01cd975"}, {"problem": 22, "code": "(fn [s]\n  (loop [n 0\n         cur s]\n    (if (empty? cur) n (recur (+ n 1) (rest cur)))))", "user": "5a6b9b95e4b0512ff01cda40"}, {"problem": 22, "code": "#(inc (second (last (map list % (range)))))", "user": "5a634ff0e4b0512ff01cd995"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "5a6dd739e4b0512ff01cda64"}, {"problem": 22, "code": "(fn [xs] (reduce (fn [acc b] (+ acc 1)) 0 xs))", "user": "5920c191e4b09b4ee5954c61"}, {"problem": 22, "code": "(fn size [lst]\n  ((fn size2 [lst2 taille] \n  (if (empty? lst2) taille (size2 (rest lst2) (+ taille 1)))\n    )lst 0)\n  )", "user": "5a6e145ee4b0512ff01cda68"}, {"problem": 22, "code": "(fn [s] (loop [s s\n               c 0]\n          (if (first s)\n            (recur (rest s) (inc c))\n            c)))", "user": "5a6b15e9e4b0512ff01cda32"}, {"problem": 22, "code": "#(loop [r % c 0] (if (nil? r) c (recur (next r) (+ c 1))))", "user": "5a6b8a9ae4b0512ff01cda3f"}, {"problem": 22, "code": "#(reduce + 0 (map (constantly 1) %))", "user": "5a488c09e4b05d388ecb6b68"}, {"problem": 22, "code": "(fn [x] \n  (reduce \n          \n          (fn [a b] (+ 1 a)) 0 \n          \n          x)\n  )", "user": "5a6afb1de4b0512ff01cda2f"}, {"problem": 22, "code": "(fn\n  [coll]\n  (loop [counter 0 c coll]\n    (if (empty? c)\n     counter\n     (recur (inc counter) (rest c)))))", "user": "5a6f2942e4b0512ff01cda78"}, {"problem": 22, "code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "5a6dffe1e4b0512ff01cda66"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5a4b3abde4b05d388ecb6b81"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "5a66f358e4b0512ff01cd9d5"}, {"problem": 22, "code": "(partial reduce (fn [r xs] (inc r)) 0)", "user": "5a69be17e4b0512ff01cda14"}, {"problem": 22, "code": "#(reduce (fn [x y]\n           (inc x))\n         0\n         %)", "user": "5a6af090e4b0512ff01cda2d"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5a71a811e4b0512ff01cda92"}, {"problem": 22, "code": "(fn foo [coll] (reduce + (map (constantly 1) coll)))", "user": "5a735c20e4b0512ff01cdaa7"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5a721047e4b0512ff01cda97"}, {"problem": 22, "code": "(fn [x]\n(reduce (fn [a b] (inc a)) 0 x))", "user": "5a74786fe4b0512ff01cdab5"}, {"problem": 22, "code": "(fn [x]\n  (reduce + 0 (map (constantly 1) x)))", "user": "5a744c2ae4b0512ff01cdaae"}, {"problem": 22, "code": "(fn [lst]\n  (loop [i lst cnt 0]\n   (cond (empty? i) cnt\n     :t (recur (rest i)(inc cnt)))))", "user": "5a747886e4b0512ff01cdab6"}, {"problem": 22, "code": "#(loop [result 0 coll %]\n\t\t(if (empty? coll)\n          result\n          (recur (inc result) (rest coll) )\n          ))", "user": "5a71c89ee4b0512ff01cda93"}, {"problem": 22, "code": "#(reduce (fn [acc x] (inc acc)) 0 %)", "user": "4fd4bddce4b0d4de60cee36e"}, {"problem": 22, "code": "(fn [c] (let \n          [f (fn [c acc]\n               (if (not (first c))\n                 acc\n                 (recur (rest c) (inc acc))))]\n          (f c 0)))", "user": "5a7460a0e4b0512ff01cdaaf"}, {"problem": 22, "code": "reduce (fn [x y] (+ x 1)) 0", "user": "5a74bf3ae4b0512ff01cdabd"}, {"problem": 22, "code": "reduce (fn [x coll] (inc x)) 0", "user": "56d9f312e4b0ea9b8538f7fa"}, {"problem": 22, "code": "(fn cardinality [s]\n  (if (empty? s)\n    0\n    (inc (cardinality (rest s)))))", "user": "5a776b62e4b013a48d39975f"}, {"problem": 22, "code": "#(+ (first (last (map-indexed vector %))) 1)", "user": "5a77317ee4b013a48d399759"}, {"problem": 22, "code": "(fn [x] (loop [i 0 x x] \n          (if (empty? x)\n            i\n            (recur (inc i) (rest x))\n            )\n          )\n  )", "user": "5a75da49e4b0512ff01cdacf"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5a71e7c9e4b0512ff01cda95"}, {"problem": 22, "code": "(fn [v]\n  (loop [v v res 0]\n    (if(nil? (seq v))\n      res\n      (recur (rest v) (inc res)))))", "user": "5a786223e4b013a48d39976b"}, {"problem": 22, "code": "(fn count_ [s]\n  (loop [s s result 0]\n    (cond\n     (empty? s) result\n     :else (recur (rest s) (inc result)))))", "user": "5a616fd2e4b0512ff01cd974"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5a754d36e4b0512ff01cdac7"}, {"problem": 22, "code": "reduce #(inc(first %&)) 0", "user": "5a778224e4b013a48d399761"}, {"problem": 22, "code": "(fn count-seq [ls]\n  (let [inner (fn inner [ls n]\n               (cond\n                 (empty? ls) n\n                 :else (inner (drop 1 ls) (inc n))))]\n    (inner ls 0)))", "user": "5a786f6be4b013a48d39976e"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "58eed5b7e4b056aecfd47db8"}, {"problem": 22, "code": "(fn [v]\n    (loop [v v, cpt 0]\n        (if (seq v)\n            (recur (rest v) (inc cpt))\n            cpt)))", "user": "5a640a37e4b0512ff01cd9a2"}, {"problem": 22, "code": "#(alength (to-array %))", "user": "5a796f7fe4b03baeef9276bb"}, {"problem": 22, "code": "(fn [c]\n  (loop [coll c \n         n 0]\n    (if (empty? coll)\n      n\n      (recur (rest coll) (+ n 1)))))", "user": "5a3bcdc9e4b001c08efc0cd9"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)\n;; I still need to think about how reduce fucntion works.", "user": "5a779197e4b013a48d399763"}, {"problem": 22, "code": "(fn my-count [coll] \n  (if (empty? coll)0 (inc (my-count (rest coll)))) )", "user": "5a79ce7fe4b03baeef9276c8"}, {"problem": 22, "code": "#(reduce (fn [x _] (inc x)) 0 %)", "user": "5a145737e4b0ff51aa4b319b"}, {"problem": 22, "code": "(fn [coll & x]\n  (if (empty? x)\n    (recur coll '(0))\n    (if (empty? coll)\n      (first x)\n      (recur (rest coll) (list (inc (first x)))))))", "user": "5a7b363ae4b03baeef9276d9"}, {"problem": 22, "code": "(fn total [l] \n  (if (= l '())\n    0\n    (+ 1 (total (rest l)))))", "user": "5a7ba4bbe4b03baeef9276e5"}, {"problem": 22, "code": "(fn [s]\n  (loop [s s, res 0]\n    (if (seq s)\n      (recur (rest s) (inc res))\n      res)))", "user": "5a7ae674e4b03baeef9276d5"}, {"problem": 22, "code": "(partial reduce (fn [acc coll] (inc acc)) 0)", "user": "5a78e98de4b013a48d399779"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5a7cee73e4b03baeef9276f2"}, {"problem": 22, "code": "(fn [x] (loop [result x y 0] (if (nil? (first result)) y (recur (rest result) (inc y)))))", "user": "5a799077e4b03baeef9276c1"}, {"problem": 22, "code": "(fn my-count [xs]\n  (#(loop [xs % acc 0]\n      (if (empty? xs)\n        acc\n        (recur (rest xs) (inc acc)))) xs))", "user": "5a6af351e4b0512ff01cda2e"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5a7e194de4b03baeef927706"}, {"problem": 22, "code": "reduce (fn [accum x] (inc accum)) 0", "user": "5a7ed0c7e4b03baeef92770e"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5a7cad50e4b03baeef9276ed"}, {"problem": 22, "code": "(fn [sq] \n  (->> sq\n       (map (fn [x] 1))\n       (reduce +)))", "user": "5a7ff79ce4b00b71e582a046"}, {"problem": 22, "code": "(fn [coll] (reduce + 0 (map (fn [x] 1) coll)))", "user": "5a7deab5e4b03baeef927703"}, {"problem": 22, "code": "(fn [coll]\n  (->>\n   coll\n   (seq)\n   (map (fn [a] 1))\n   (reduce +)))", "user": "5a798ac5e4b03baeef9276c0"}, {"problem": 22, "code": "#(loop [seq % i 0]\n   (if (nil? (first seq))\n     i\n     (recur (rest seq) (+ i 1))\n     ))", "user": "5a80b934e4b00b71e582a05b"}, {"problem": 22, "code": ";Last Element http://www.4clojure.com/problem/19\n(fn ! [x] \n  (if (= () x)\n    0\n    (+ (! (rest x)) 1)\n  )\n)", "user": "5a813b90e4b00b71e582a065"}, {"problem": 22, "code": "#(loop [a 0 col %] (if (empty? col) a (recur (inc a) (rest col))))", "user": "59061cc8e4b047aa04b1992b"}, {"problem": 22, "code": "reduce #(+ (if %2 1) %1) 0", "user": "5a822590e4b00b71e582a073"}, {"problem": 22, "code": "(fn[col] (reduce (fn[a & v] (+ a 1)) 0 col))", "user": "5a80ad4be4b00b71e582a058"}, {"problem": 22, "code": "(fn  [x]\n        (loop [iter 0 i (rest x)] \n            (if (= i ())\n              (+ iter 1)\n              (recur (inc iter) (rest i)))))", "user": "5a7c5de3e4b03baeef9276e9"}, {"problem": 22, "code": "(fn [lat] (reduce (fn [x y] (+ x 1)) 0 lat))", "user": "5a6f3162e4b0512ff01cda7a"}, {"problem": 22, "code": "#(loop [s % out 0]\n  (if (empty? s)\n    out\n    (recur (rest s) (inc out))))", "user": "5a84cf8de4b00b71e582a095"}, {"problem": 22, "code": "(fn [coll]\n  (loop [n 0\n         remain coll]\n    (if (empty? remain)\n      n\n      (recur (inc n) (rest remain)))))", "user": "5a861aafe4b05369db4d2496"}, {"problem": 22, "code": "(fn [seq]\n  (loop [seq-left seq number 0]\n    (if (empty? seq-left)\n      number\n      (recur (rest seq-left) (+ number 1)))))", "user": "5a86ad84e4b05369db4d249c"}, {"problem": 22, "code": "#(reduce(fn[s v] (inc s)) 0 %)", "user": "58c71509e4b021aa9917ed6e"}, {"problem": 22, "code": "#(reduce + (map (constantly 1)%))", "user": "5a7da832e4b03baeef9276fc"}, {"problem": 22, "code": "#(loop [cnt 0\n        reszta %\n        ]\n   (if (empty? reszta)\n     cnt \n     (recur (+ 1 cnt) (rest reszta))\n     )\n   )", "user": "5a89ef87e4b05369db4d24ca"}, {"problem": 22, "code": "(fn [xs] (apply + (map (fn [_] 1) xs)))", "user": "5a89ee2de4b05369db4d24c9"}, {"problem": 22, "code": "(fn [l] (loop [i 0 r l] \n        (if (first r)          \n          (recur (inc i) (rest r))\n          i\n          )))", "user": "5a861086e4b05369db4d2494"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x))0 %)", "user": "5a853662e4b00b71e582a09e"}, {"problem": 22, "code": "(fn [s]\n  (loop [s s cpt 0]\n    (if (seq s)\n      (recur (rest s) (inc cpt))\n      cpt)))", "user": "5a805f7ee4b00b71e582a04d"}, {"problem": 22, "code": "(fn \n  [xs] \n  (reduce (fn [acum _] (+ acum 1))\n          0\n          xs))", "user": "5a8b6d42e4b05369db4d24e6"}, {"problem": 22, "code": "(fn [xs] \n  (reduce (fn [sum xs] (inc sum)) 0 xs)\n )", "user": "5a8c564fe4b05369db4d24fe"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5a2abce0e4b09cafd31c7f37"}, {"problem": 22, "code": "#(alength (to-array %1))", "user": "5a8a3d54e4b05369db4d24d2"}, {"problem": 22, "code": "(fn my-count [coll]\n  (if (first coll) (+ (my-count (rest coll)) 1)\n    0))", "user": "5a8d1eade4b05369db4d2511"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "59f6495ee4b0966464fe6acf"}, {"problem": 22, "code": "(fn [xs]\n              (loop [xs xs\n                     x 0]\n                (if (empty? xs)\n                  x\n                  (recur (rest xs) (+ x 1)))))", "user": "5a8bc2a1e4b05369db4d24ef"}, {"problem": 22, "code": "(fn [lst]\n   (loop [i 0 l lst]\n      (if (empty? l)\n         i\n         (recur (inc i) (rest l)))))", "user": "5a653f80e4b0512ff01cd9b2"}, {"problem": 22, "code": "(fn [collection]\n  (loop [xs collection i 0]\n    (if (= (first xs) nil)\n      i\n      (recur (rest xs) (inc i))\n    )\n  )\n)", "user": "5a8e9fb5e4b05369db4d2529"}, {"problem": 22, "code": "(fn my-count\n    [xs]\n    (loop\n        [ys xs\n         k 0]\n        (if (empty? ys)\n            k\n            (recur (rest ys) (inc k)))))", "user": "5a8c12dfe4b05369db4d24f7"}, {"problem": 22, "code": "#(loop [l %1 i 0] \n   (if (= '() l) \n     i\n     (recur (rest l) (inc i))\n   )\n)", "user": "5a78cd9ee4b013a48d399777"}, {"problem": 22, "code": "(fn [l] (reduce (fn [l acc] (inc l)) 0 l))", "user": "5a6a2515e4b0512ff01cda21"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5a856f1ae4b00b71e582a0a3"}, {"problem": 22, "code": "(fn cnt [v] (if (empty? v) 0 (+ (cnt(rest v)) 1)))", "user": "5a8d55a8e4b05369db4d2514"}, {"problem": 22, "code": "(fn [coll] (loop [coll (sequence coll)\n                  n 0]\n             (if (empty? coll)\n               n\n               (recur (rest coll) (inc n)))))", "user": "5a8fd113e4b05369db4d2542"}, {"problem": 22, "code": "(fn hoi\n  ([li] (hoi li 0))\n   ([li r]\n    (if (empty? li)\n      r\n      (hoi (rest li) (inc r)))))", "user": "5a90395ce4b05369db4d254a"}, {"problem": 22, "code": "reduce (fn[i _] (inc i)) 0", "user": "5a8ebd9ae4b05369db4d252b"}, {"problem": 22, "code": "(fn [input]\n  (loop [x 0\n         ary input]\n        (if (empty? ary)\n            x \n            (recur (inc x) (rest ary)))))", "user": "5a8b2e58e4b05369db4d24e0"}, {"problem": 22, "code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "5a23eed4e4b0ff51aa4b32e3"}, {"problem": 22, "code": "(fn cnt\n  ([s]\n  \t(cnt s 0))\n  ([s n]\n   \t(if (empty? s)\n      n\n      (cnt (rest s) (+ n 1)))))", "user": "5a9181c5e4b002d099cae6f6"}, {"problem": 22, "code": "(fn [s]\n  (if (= (class s) java.lang.String)\n    (.length s)\n    (.size s)\n  )\n)", "user": "5a91c205e4b002d099cae6fd"}, {"problem": 22, "code": "#(loop [x 0 y %] (if (empty? y) x (recur (inc x) (rest y))))", "user": "5a929426e4b002d099cae70d"}, {"problem": 22, "code": "#(+ 1 (first (reverse (map (fn [a b] b) % (range)))))", "user": "5a933d8ee4b0d174b936c720"}, {"problem": 22, "code": "(\n\t\tfn foo [x] \n\t\t(\n\t\t\tif-not (= x nil) \n\t\t\t(+ (foo (next x)) 1)\n         \t0\n\t\t)\n\t)", "user": "5a918839e4b002d099cae6f7"}, {"problem": 22, "code": "(fn [collection]\n  (loop [collection collection i 0]\n    (if (first collection)\n      (recur (rest collection) (inc i)) i)))", "user": "5a932f63e4b0d174b936c71b"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "5a8032d0e4b00b71e582a049"}, {"problem": 22, "code": "(fn [x]\n  (loop [r x n 0]\n    (if (empty? r) n (recur (rest r) (inc n)))))", "user": "5a9482b7e4b0d174b936c737"}, {"problem": 22, "code": "#(reduce \n  (fn [accum el]\n    (+ accum 1))\n     0 %)", "user": "5a95361be4b0d174b936c74b"}, {"problem": 22, "code": "(fn [lat] (reduce (fn [x y] (+ x 1)) 0 lat))", "user": "5a9545dbe4b0d174b936c74c"}, {"problem": 22, "code": "#(reduce + (map (fn [x] (if (nil? x) 0 1)) %))", "user": "5a950d9fe4b0d174b936c745"}, {"problem": 22, "code": "(fn \n  [elems]\n  (reduce (fn [acc x] (inc acc)) 0 elems))", "user": "5a9567bae4b0d174b936c752"}, {"problem": 22, "code": "#(loop [l %\n         c 0]\n    (if (empty? l)\n      c\n      (recur (rest l) (inc c))))", "user": "5a720177e4b0512ff01cda96"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5a95a64ee4b0d174b936c75a"}, {"problem": 22, "code": "(fn [s]\n  ((fn [i s] \n  (if (empty? s) \n    i \n    (recur (inc i) \n           (rest s)))) 0 s))", "user": "5a7a09e6e4b03baeef9276ca"}, {"problem": 22, "code": "(fn [coll]\n  (->> coll\n       (map (constantly 1))\n       (apply +)))", "user": "5a95c639e4b0d174b936c75e"}, {"problem": 22, "code": "(fn [s]\n  (loop [cnt 0 se s]\n    (if (empty? se) cnt\n    (recur (inc cnt) (rest se)))))", "user": "5a95e50be4b0d174b936c760"}, {"problem": 22, "code": "(fn [s] (loop [seq s counter 0]\n          (if (empty? seq)\n            counter\n            (recur (rest seq) (+ 1 counter)))))", "user": "5a962c09e4b0d174b936c765"}, {"problem": 22, "code": "(fn [list]\n        (loop [lst list k 0]\n          (if (empty? lst)\n            k\n            (recur (rest lst) (inc k)))))", "user": "55527251e4b0deb715856df3"}, {"problem": 22, "code": "(fn [lst]\n  (loop [cnt 0 ilst lst]\n        (if (empty? ilst)\n            cnt\n            (recur (inc cnt) (rest ilst))\n        )))", "user": "5a8c50d8e4b05369db4d24fd"}, {"problem": 22, "code": "(fn my-func \n  ([coll] \n   (my-func coll 0)) \n  ([coll counter] \n   (if (seq coll)\n     (my-func (rest coll) (inc counter)) \n     counter)))", "user": "5a7df247e4b03baeef927704"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5a97eaffe4b0d174b936c783"}, {"problem": 22, "code": "(fn [coll]\n  (loop [colls coll\n         n 0]\n    (if (= (seq colls) nil)\n      n\n      (recur (rest colls) (+ n 1)))))", "user": "5939e726e4b069cdc2982b45"}, {"problem": 22, "code": "(fn [lst]\n \t(loop [lst lst\n           n 0]\n  \t\t(if (empty? lst)\n          \tn\n          \t(recur (rest lst) (inc n))\n         )\n      )\n)", "user": "5a984657e4b0d174b936c78a"}, {"problem": 22, "code": "(fn ctr [xs]\n  (if (empty? xs)\n    0\n    (inc (ctr (rest xs)))\n    )\n  )", "user": "5a99c2e1e4b0d174b936c7b0"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5a99cab6e4b0d174b936c7b2"}, {"problem": 22, "code": "(fn [lst]\n  (inc (first (last (map-indexed vector lst)))))", "user": "5a99b688e4b0d174b936c7a6"}, {"problem": 22, "code": "(fn [n]\n  (+ 1 (first (last (map-indexed vector n)))))", "user": "5a99b844e4b0d174b936c7ab"}, {"problem": 22, "code": "(fn [_list] \n  (loop [_list _list cnt 0]\n    (if (empty? _list)\n      cnt\n      (recur (rest _list) (inc cnt)))))", "user": "58662a03e4b0f14aab7c8859"}, {"problem": 22, "code": "#(alength (to-array %1))", "user": "5a9a12d6e4b0d174b936c7b7"}, {"problem": 22, "code": "#(reduce (fn [f s] (inc f)) 0 %)", "user": "5908882de4b047aa04b19979"}, {"problem": 22, "code": "(fn [x] (reduce (fn [acc i] (inc acc)) 0 x ))", "user": "5a9aad01e4b0d174b936c7c0"}, {"problem": 22, "code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "5a9ac061e4b0d174b936c7c1"}, {"problem": 22, "code": "(fn [lst] (reduce + (map #(if((complement nil?) %) (+ 1)) lst)))", "user": "5a99b83fe4b0d174b936c7aa"}, {"problem": 22, "code": "(fn count-seq-element [seq]\n  (loop [sum 0  seq seq]\n  (if (empty? seq)\n  sum\n  (recur (inc sum) (drop 1 seq)))))", "user": "5a99d28ee4b0d174b936c7b3"}, {"problem": 22, "code": "reduce (fn [x _] (inc x)) 0", "user": "52bba119e4b07a9af57922ea"}, {"problem": 22, "code": "#(inc(first (last (map-indexed vector %))))", "user": "5a99b863e4b0d174b936c7ae"}, {"problem": 22, "code": "(fn [ls] (+ (last (map-indexed (fn [i, x] i) ls)) 1))", "user": "5a9b06dde4b0d174b936c7c5"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "5a9c6038e4b0d174b936c7d7"}, {"problem": 22, "code": "#(reduce +\n         (map \n          (fn [x] 1) %))", "user": "5a9cdec0e4b0d174b936c7e1"}, {"problem": 22, "code": "(fn my-count\n  [lst]\n  \n  (if (empty? lst)\n    0\n    (+ 1 (my-count (rest lst)))))", "user": "5a99ae99e4b0d174b936c7a4"}, {"problem": 22, "code": "(fn n [s]\n  (loop [t s c 0]\n        (if (empty? t)\n            c\n            (recur (rest t) (inc c))\n        )\n      )\n  )", "user": "5a9d64c8e4b0d174b936c7eb"}, {"problem": 22, "code": "#(alength (to-array %))", "user": "5a9373d5e4b0d174b936c722"}, {"problem": 22, "code": "#(reduce (fn [roll value] (+ 1 roll)) 0 %)", "user": "5a9dbb32e4b0d174b936c7f3"}, {"problem": 22, "code": "#(alength (to-array %))", "user": "5a9dbffbe4b0d174b936c7f4"}, {"problem": 22, "code": "(fn [v] (apply + (map (fn [x] 1) v)))", "user": "5a98ab58e4b0d174b936c78e"}, {"problem": 22, "code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "5a426a3fe4b0447ef91cc5f2"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5a9eaab3e4b0d174b936c807"}, {"problem": 22, "code": "(fn nt\n  [x]\n  (loop [x x\n         cont 0]\n    (if (empty? x)\n      cont\n      (recur (rest x) (+ cont 1)))))", "user": "5a9f005be4b0d174b936c810"}, {"problem": 22, "code": "#(reduce (fn [rsf x] (inc rsf)) 0 %)", "user": "5a9829e5e4b0d174b936c788"}, {"problem": 22, "code": "(fn count-a-sequence\n  [coll]\n  (loop [counter 0\n         coll coll]\n    (cond\n      (empty? coll) counter\n      :else\n      (recur (inc counter) (rest coll)))))", "user": "5aa00b7fe4b0d174b936c825"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5a9db513e4b0d174b936c7f0"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "5aa008e5e4b0d174b936c823"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5aa1e0f1e4b0d174b936c84e"}, {"problem": 22, "code": "(fn [col] \n  (reduce (fn [x y] (inc x)) 0 col))", "user": "5a9be505e4b0d174b936c7cf"}, {"problem": 22, "code": "(fn [xs] (reduce \n          (fn [x y] (+ 1 x)) 0 xs))", "user": "5aa15ec0e4b0d174b936c848"}, {"problem": 22, "code": "(fn count-seq\n  [lst]\n  (reduce \n   (fn [x val] \n     (+ x 1)) 0 lst))", "user": "5a99b861e4b0d174b936c7ad"}, {"problem": 22, "code": "(partial reduce (fn [a b] (inc a)) 0)", "user": "5aa2b91ae4b0d174b936c85d"}, {"problem": 22, "code": "#(reduce (fn [x %] (inc x)) 0 %)", "user": "5aa2dc5ae4b0d174b936c861"}, {"problem": 22, "code": "(fn\n  [lst]\n  (reduce (fn [a b] (inc a)) 0 lst))", "user": "5aa2f1dee4b0d174b936c865"}, {"problem": 22, "code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "5aa43c3de4b0d174b936c884"}, {"problem": 22, "code": "reduce (fn [a b] (+ a 1)) 0", "user": "5a9e3698e4b0d174b936c7fc"}, {"problem": 22, "code": "#(reduce + \n         (map \n          (constantly 1) %))", "user": "5aa4b961e4b0d174b936c888"}, {"problem": 22, "code": "(fn COUNT [lis ]\n  (loop [listVar lis ,idx 0]\n    (if (empty? listVar)\n      idx\n      (recur (rest listVar) , (inc idx))\n      )\n\n    )\n )", "user": "5aa11b37e4b0d174b936c840"}, {"problem": 22, "code": "(fn [coll]\n  (loop [n 0\n         col coll]\n    (if (nil? col)\n      n\n      (recur (inc n) (next col)))))", "user": "5aa4f7dae4b0d174b936c88c"}, {"problem": 22, "code": "(fn myCount\n  ([x] (myCount x 0))\n  ([x n] \n    (if (empty? x)\n         n\n        (myCount (rest x) (+ n 1)))))", "user": "5aa5951ae4b0d174b936c899"}, {"problem": 22, "code": "(fn count-seq \n  ([coll]\n   (count-seq (rest coll) 1)\n  )\n  ([coll cnt]\n   (if (empty? coll) cnt\n     (count-seq (rest coll) (+ cnt 1)))\n  )\n)", "user": "5aa4a1ffe4b0d174b936c886"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5aa5efbde4b0d174b936c8a2"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5aa5eebee4b0d174b936c8a1"}, {"problem": 22, "code": "#(reduce (fn [sum %] (inc sum)) 0 %)", "user": "5aa62482e4b0d174b936c8a5"}, {"problem": 22, "code": "(fn [lst]\n  \t(reduce + (map (fn [x] 1) lst)))\n\n;#(reduce + (map (fn [x] 1) %))", "user": "5aa4bcc3e4b0d174b936c889"}, {"problem": 22, "code": "#(->> %\n      (seq)\n      (map (constantly 1))\n      (apply +))", "user": "5aa690c0e4b0d174b936c8ad"}, {"problem": 22, "code": "#(loop [respuesta 0 c %]\n    (if (empty? c) respuesta\n    (recur (inc respuesta) (rest c))))", "user": "5a99b766e4b0d174b936c7a8"}, {"problem": 22, "code": "(fn\n  [x]\n  (loop [lst x\n         c 0]\n    (if (empty? lst)\n      c\n      (recur (rest lst) (inc c)))))", "user": "5a99b81be4b0d174b936c7a9"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5aa6bd56e4b0d174b936c8af"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5a99b848e4b0d174b936c7ac"}, {"problem": 22, "code": "reduce (fn [x _] (inc x)) 0", "user": "5aa6d44de4b0d174b936c8b2"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5a99b87ee4b0d174b936c7af"}, {"problem": 22, "code": "(fn [coll]\n  (loop [cont 0 tmp-coll coll]\n    (if (empty? tmp-coll)\n      cont\n      (recur (inc cont) (rest tmp-coll)))))", "user": "5aa2b5dbe4b0d174b936c85b"}, {"problem": 22, "code": "reduce #(inc (first %&)) 0", "user": "5aa811f7e4b0d174b936c8c2"}, {"problem": 22, "code": "(fn [coll]\n  ((fn [coll c]\n     (if (empty? coll)\n       c\n       (recur (rest coll) (inc c))))\n   coll 0))", "user": "5a3a15e6e4b001c08efc0cc1"}, {"problem": 22, "code": "#(reduce (fn [s _] (inc s)) 0 %)", "user": "5aa8e841e4b0d174b936c8d5"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5aa81536e4b0d174b936c8c3"}, {"problem": 22, "code": "#(reduce (fn [a b] (inc a)) 0 %)", "user": "5aa5fa10e4b0d174b936c8a4"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5aa9d445e4b0d174b936c8eb"}, {"problem": 22, "code": "(fn [items] (reduce (fn [accumulator _] (inc accumulator)) 0 items))", "user": "5aa998c6e4b0d174b936c8e5"}, {"problem": 22, "code": "(fn [sq] (loop [cnt 0 sq_ sq] (if-not (empty? sq_) (recur (inc cnt) (rest sq_)) cnt)))", "user": "5a527c16e4b05d388ecb6bff"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "5aaa1ec6e4b0d174b936c8ef"}, {"problem": 22, "code": "#(reduce (fn [x y] (+ 1 x)) 0 %)", "user": "59e6708ce4b08badc2a0c571"}, {"problem": 22, "code": "(fn nbr-elem-list[vect]\n  (loop [elem vect res 0]\n    (if (seq elem)\n      (recur (rest elem) (inc res))\n      res)))", "user": "5a6cb2eae4b0512ff01cda57"}, {"problem": 22, "code": "(fn [x] (reduce (fn [acc x] (inc acc)) 0 x))", "user": "5aab7b72e4b073f177442558"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5aac26d3e4b073f177442569"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "59769d75e4b01722bebd4cdd"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5a8e9a7ae4b05369db4d2528"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5aa51330e4b0d174b936c890"}, {"problem": 22, "code": "(fn [s] (loop [s s c 0] (if (empty? s) c (recur (rest s) (inc c)))))", "user": "5aad2bd2e4b073f177442573"}, {"problem": 22, "code": "(partial reduce (fn [acc,_] (inc acc)) 0)", "user": "5aad79d9e4b073f177442578"}, {"problem": 22, "code": "(fn [seq] (loop [i 0, myswq seq]\n    (if (empty? myswq)\n      i\n      (do\n        (recur (inc i) (rest myswq))\n        )\n      )\n    ))", "user": "5aada061e4b073f17744257a"}, {"problem": 22, "code": "#(loop [xs  % counter 0] (if (empty? xs) counter (recur (rest xs) (inc counter))))", "user": "5aa88c12e4b0d174b936c8d1"}, {"problem": 22, "code": "(fn last([a b] (if (not (empty? a)) (recur (rest a) (inc b)) b)) ([a] (last a 0)))", "user": "5a803844e4b00b71e582a04a"}, {"problem": 22, "code": "#(reduce (fn [acc x] (inc acc)) 0 %)", "user": "5aafa441e4b073f17744259a"}, {"problem": 22, "code": "(fn rec [x] (if (= x []) 0 (+ 1 (rec (rest x)))))", "user": "5ab1665de4b073f1774425c0"}, {"problem": 22, "code": "(fn count-a-seq [lat]\n  (reduce (fn [x y] (+ x 1)) 0 lat))", "user": "5ab184c9e4b073f1774425ce"}, {"problem": 22, "code": "reduce (fn [cc _] (inc cc)) 0", "user": "5a91988ae4b002d099cae6f9"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5ab23c99e4b073f1774425e2"}, {"problem": 22, "code": "reduce (fn [acc _] (inc acc)) 0", "user": "5ab22c2ce4b073f1774425df"}, {"problem": 22, "code": "reduce (fn [a b] (inc a)) 0", "user": "5ab21b33e4b073f1774425dd"}, {"problem": 22, "code": "#(reduce (fn [c el] (inc c)) 0 %)", "user": "5ab28d5be4b073f1774425eb"}, {"problem": 22, "code": "(fn [cool] \n  (loop [left cool cnt 0]\n    (if (empty? left)\n      cnt\n    (recur (rest left) (inc cnt)))))", "user": "5ab276f2e4b073f1774425e6"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "5ab16992e4b073f1774425c4"}, {"problem": 22, "code": "#(reduce (fn [a b] (inc a)) 0 %)", "user": "5ab23a78e4b073f1774425e1"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5a99c5a9e4b0d174b936c7b1"}, {"problem": 22, "code": "(fn [x]\n  (reduce (fn [a b] (inc a)) 0 x))", "user": "5ab33ce7e4b073f1774425fa"}, {"problem": 22, "code": "(fn [coll] \n  (loop [acc 0 l (seq coll)] \n    (if (empty? l) acc \n      (recur (+ acc 1) (rest l)))))", "user": "5a781494e4b013a48d399766"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5ab38af0e4b073f177442601"}, {"problem": 22, "code": "#(reduce (fn [x n](inc x)) 0 %)", "user": "5ab3ef98e4b073f17744260e"}, {"problem": 22, "code": "#(loop [i % o 0] (if (empty? i) o (recur (rest i) (inc o))))", "user": "5aa8f753e4b0d174b936c8d9"}, {"problem": 22, "code": "(fn [coll] (loop [n 0 v coll]\n                          (if (empty? v)\n                            n\n                            (recur (inc n) (rest v)))))", "user": "5ab490f4e4b073f17744261d"}, {"problem": 22, "code": "(fn [l] (reduce (fn [cnt _] (inc cnt)) 0 l))", "user": "5ab3d323e4b073f177442607"}, {"problem": 22, "code": "(fn [lst] (reduce (fn [a b] (+ a 1)) 0 lst))", "user": "5ab564f8e4b073f177442639"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "5a904de3e4b05369db4d254c"}, {"problem": 22, "code": "#(reduce (fn [p, c] (+ p 1)) 0 %)", "user": "5ab5f60be4b073f177442643"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5ab52ea6e4b073f17744262e"}, {"problem": 22, "code": "#(reduce (fn [x _] (inc x)) 0 %)", "user": "5a67cedbe4b0512ff01cd9ee"}, {"problem": 22, "code": "(fn [coll]\n              (loop [cnt 0\n                     c coll]\n                (if (first c)\n                  (recur (inc cnt) (rest c))\n                  cnt\n                  )))", "user": "5ab575f8e4b073f17744263d"}, {"problem": 22, "code": "(fn [xs]  (loop [i 0 acc xs]\n    (if (empty? acc)\n      i\n      (recur (inc i) (rest acc)))))", "user": "5ab8037ae4b073f177442678"}, {"problem": 22, "code": "#(reduce (fn [res _] (+ 1 res)) 0 %)", "user": "57d2cf5fe4b0bd073c202385"}, {"problem": 22, "code": "(fn [s] (loop [s s\n               c 0]\n          (if (empty? s)\n            c\n            (recur (rest s) (inc c)))))", "user": "5ab93449e4b073f177442692"}, {"problem": 22, "code": "reduce (fn [col x] (inc col) ) 0", "user": "5ab3db13e4b073f177442609"}, {"problem": 22, "code": "#(loop [n 0 l %] (if-not (empty? l) (recur (inc n) (rest l)) n))", "user": "5ab96075e4b073f177442694"}, {"problem": 22, "code": "#(apply + (map (fn [x] constantly 1) %))", "user": "5ab9fe71e4b073f17744269d"}, {"problem": 22, "code": "#(apply + (map (constantly 1) %))", "user": "5aba34c5e4b073f1774426a3"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) % ))", "user": "5abb02ade4b073f1774426bc"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %1))", "user": "5abbb374e4b073f1774426d9"}, {"problem": 22, "code": "(fn [coll]\n  (reduce (fn [x y] (inc x)) 0 coll))", "user": "5ab991bae4b073f177442696"}, {"problem": 22, "code": "(fn [a-seq]\n  (loop [c 0\n         xs a-seq]\n    (if (empty? xs)\n      c\n      (recur (inc c) (rest xs)))))", "user": "5abc5a09e4b073f1774426e9"}, {"problem": 22, "code": "(fn [alist]\n  (reduce\n   (fn [carry x] (+ carry x))\n  (map \n   (fn [elem] 1) \n   alist)))", "user": "5aaa2dc3e4b0d174b936c8f1"}, {"problem": 22, "code": "(fn rec [x] (if (empty? x) 0 (+ 1 (rec (rest x)))))", "user": "5ab3edf0e4b073f17744260d"}, {"problem": 22, "code": "reduce\n  (fn [a b]\n    (+ a 1)) \n  0", "user": "5aaffeb3e4b073f1774425a3"}, {"problem": 22, "code": "(fn [coll] \n  (loop [[head & tail] coll iteration 1] \n    (if (empty? tail) \n      iteration \n      (recur tail (inc iteration)))))", "user": "5abbb524e4b073f1774426da"}, {"problem": 22, "code": "#(->> (map vector (range) %)\n          last\n          first\n          inc)", "user": "5abeb697e4b073f177442725"}, {"problem": 22, "code": "(fn counter\n  [[top & rest]]\n  (if (nil? rest)\n    1\n    (+ 1 (counter rest))))", "user": "569bfc43e4b0542e1f8d145c"}, {"problem": 22, "code": "reduce (fn [e1 e2] (inc e1)) 0", "user": "5abe2fc2e4b073f17744271e"}, {"problem": 22, "code": "(fn [x] (apply + (map (fn [x] (inc 0)) x)))", "user": "595ecd1fe4b066ee0a44b050"}, {"problem": 22, "code": "(fn my-count [xs]\n  (reduce (fn [s _] (+ 1 s)) 0 xs))", "user": "51e24905e4b01e519814642e"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5ac0ba3ae4b073f177442745"}, {"problem": 22, "code": "#(.size (vec %))", "user": "5ac0dab7e4b073f177442746"}, {"problem": 22, "code": "(fn [xs]\n  (loop [ys (seq xs)\n         n 0]\n    (if (empty? ys) n\n      (recur (next ys) (inc n)))))", "user": "5a03652ae4b01bb0ae8afd83"}, {"problem": 22, "code": "reduce (fn [x _] (inc x)) 0", "user": "59a8a4dce4b0bcf4e9a43af7"}, {"problem": 22, "code": "#(apply + \n         (map  (fn [x] 1)\n               %))", "user": "5ac04101e4b073f177442737"}, {"problem": 22, "code": "(fn [seq-of-chars]\n  (reduce + (map (constantly 1) seq-of-chars)))", "user": "5ac35d00e4b0e27600da7712"}, {"problem": 22, "code": "#(reduce (fn [x sequence] (inc x)) 0 %)", "user": "5ac37d0fe4b0e27600da7718"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 % )", "user": "5ac51c43e4b0e27600da773b"}, {"problem": 22, "code": "(fn [lista]\n  (reduce (fn [valor valores] (inc valor)) 0 lista))", "user": "5ac53c8de4b0e27600da7741"}, {"problem": 22, "code": "(fn my-count\n  ([input]\n   (my-count input 0))\n  ([input count-so-far]\n   (if (empty? (rest input))\n     (inc count-so-far)\n     (recur (rest input) (inc count-so-far)))))", "user": "5ac6099ee4b0e27600da7757"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %1)", "user": "5abe41bce4b073f177442720"}, {"problem": 22, "code": "#(reduce + (map (fn [a] 1) %))", "user": "5ac67b47e4b0e27600da776e"}, {"problem": 22, "code": "(fn [s]\n  (loop [ss s\n         r 0]\n    (if (empty? ss)\n      r\n      (recur (rest ss) (inc r)))))", "user": "59b71b4fe4b05c620303ca3d"}, {"problem": 22, "code": "(fn [elems]\n    (loop [elems elems\n           counter 0]\n      (if (empty? elems)\n        counter\n        (recur (rest elems) (inc counter)))))", "user": "5ac6ef9be4b0e27600da7779"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5ac7c3e8e4b0e27600da7792"}, {"problem": 22, "code": "reduce (fn [x _] (inc x)) 0", "user": "5ac79bbee4b0e27600da778b"}, {"problem": 22, "code": "reduce (fn [acc & rest] (+ acc 1)) 0", "user": "5ac6bbe3e4b0e27600da7776"}, {"problem": 22, "code": "#(loop [xs %\n        ct 0]\n   (if-not (seq xs)\n     ct\n     (recur (rest xs) (inc ct))))", "user": "5ac834f4e4b0e27600da77ab"}, {"problem": 22, "code": "(fn [xs]\n  (reduce + 0 (map (fn [x] 1) xs)) \n  )", "user": "5ac85708e4b0e27600da77ac"}, {"problem": 22, "code": "(fn [s] (loop [c 0\n               l (seq s)]\n         (if (empty? l)\n              c\n              (recur (+ c 1) (rest l)))))", "user": "5ac91d90e4b0e27600da77bd"}, {"problem": 22, "code": "#(loop [lst %1 acc 0]\n  (if (empty? lst) acc\n    (recur (rest lst) (inc acc) ) \n  )\n)", "user": "5ac92dc3e4b0e27600da77bf"}, {"problem": 22, "code": "#(reduce + (map (fn[&more] (int 1)) %))", "user": "5ac96cf8e4b0e27600da77c2"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5ac9da95e4b0e27600da77d4"}, {"problem": 22, "code": "(fn cnt\n  ([l]\n   (cnt l 0))\n  ([l n]\n   (if (empty? l)\n     n\n     (cnt (rest l) (inc n))\n     )))", "user": "5ac9fa87e4b0e27600da77d5"}, {"problem": 22, "code": "(fn [coll] \n  (reduce (fn [acc, element] (inc acc)) 0 coll))", "user": "5aca2adce4b0e27600da77d6"}, {"problem": 22, "code": "(fn my-count [xs]\n  (if (empty? xs) 0\n      (inc (my-count (rest xs)))\n      ))", "user": "5a42dbbbe4b0447ef91cc5fd"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "5a087907e4b01bb0ae8afdf7"}, {"problem": 22, "code": "#(apply + (map (constantly 1) %))", "user": "5acb137ee4b0e27600da77eb"}, {"problem": 22, "code": "(fn countElements\n  ([items] (countElements items 0))\n  ([items counter]\n   (if (empty? items)\n     counter\n     (recur (rest items) (inc counter))\n     )\n   )\n  )", "user": "5ac741d6e4b0e27600da777d"}, {"problem": 22, "code": "(fn [seq] (loop [cnt 0 remainder seq]\n            (if (empty? remainder) cnt\n                (recur (inc cnt) (rest remainder)))))", "user": "5acbb7afe4b0e27600da77ff"}, {"problem": 22, "code": "(fn my-count [lst] (apply + (map (constantly 1) lst)))", "user": "5ac797a2e4b0e27600da7789"}, {"problem": 22, "code": "(fn seq-total [param]\n  (reduce (fn [sum v] (inc sum)) 0 param))", "user": "5ac383b8e4b0e27600da7719"}, {"problem": 22, "code": "(fn [x] \n  (reduce + (map (constantly 1) x)))", "user": "5ac4d1f6e4b0e27600da7735"}, {"problem": 22, "code": "#(reduce (fn[a n] (+ a 1)) 0 %)", "user": "5abd4886e4b073f177442710"}, {"problem": 22, "code": "(fn [x] (reduce + (map (constantly 1) x)))\n\n\n\n\n\n;(partial \n ;(fn my-count [x coll]\n   ;(if (empty? coll)\n     ;x\n     ;(my-count (inc x) (rest coll)))) 0)", "user": "5ac6f7f7e4b0e27600da777a"}, {"problem": 22, "code": "#(loop [n 0 s %1]\n   (if (empty? s)\n     n\n     (recur (inc n) (rest s))))", "user": "5acd1a43e4b0e27600da7823"}, {"problem": 22, "code": "(fn [coll] \n  (reduce (fn [x y] (inc x)) 0 coll))", "user": "5ac7f980e4b0e27600da779f"}, {"problem": 22, "code": "#(apply + (map (constantly 1) %))", "user": "5a9db5c9e4b0d174b936c7f1"}, {"problem": 22, "code": "(fn\n    [coll]\n  (reduce \n    (fn [n _] (inc n))\n    0 coll))", "user": "5acd235ae4b0e27600da7824"}, {"problem": 22, "code": "(partial reduce (fn [acc x] (inc acc)) 0)", "user": "57513f88e4b02ea114799283"}, {"problem": 22, "code": "(fn counter [n]\n  (reduce (fn [x y]\n     (inc x)) 0 n))", "user": "5ac74b34e4b0e27600da777f"}, {"problem": 22, "code": "#(reduce (fn [result _] (inc result)) 0 %)", "user": "5acc961ae4b0e27600da7810"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5acf8797e4b0ea6055cfab78"}, {"problem": 22, "code": "(fn [some-list] (reduce (fn [c _] (inc c)) 0 some-list))", "user": "5a737561e4b0512ff01cdaaa"}, {"problem": 22, "code": "#(loop [i 0, s %]\n    (if (empty? s)\n      i\n      (recur (+ 1 i) (rest s))))", "user": "5ad002f2e4b0ea6055cfab87"}, {"problem": 22, "code": "#(loop [c 0 coll %] \n   (if (empty? coll) \n     c \n     (recur (inc c)(rest coll))))", "user": "596a66cde4b069c0a1a19803"}, {"problem": 22, "code": "(fn [x] (reduce + (map #(if % 1 1) x)))", "user": "5acd08eee4b0e27600da7822"}, {"problem": 22, "code": "#(reduce (fn [t e] (when e (inc t))) 0 %)", "user": "5ad37785e4b0ea6055cfabc5"}, {"problem": 22, "code": "#(reduce (fn [x, y] (inc x)) 0 %)", "user": "5ad36ae9e4b0ea6055cfabc3"}, {"problem": 22, "code": "reduce (fn [y z] (+ y 1)) 0", "user": "5acb7131e4b0e27600da77f4"}, {"problem": 22, "code": "(fn my-length [seq]\n  (if (empty? seq)\n      0\n      (-> seq rest my-length inc)))", "user": "58513875e4b0b7285a6f4e8c"}, {"problem": 22, "code": "(fn f [seq]\n  (if (= (first seq) nil)\n    0\n    (+ 1 (f (rest seq)))))", "user": "589f37e0e4b02bd94d917e79"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "4fa1f27ae4b0dcca54ed6d64"}, {"problem": 22, "code": "#(reduce (fn [cnt _] (inc cnt)) 0 %)", "user": "5ad63a34e4b0ea6055cfac01"}, {"problem": 22, "code": "#(reduce + (map (fn [%] 1) %))", "user": "5ad60481e4b0ea6055cfabf9"}, {"problem": 22, "code": "#(reduce (fn [cnt col]\n           (inc cnt))\n         0\n         %)", "user": "5ac9d3a3e4b0e27600da77d3"}, {"problem": 22, "code": "(fn total [x] (loop [a x i 0] (if (empty? a) i  (recur (rest a) (+ i 1)))))", "user": "5ad6d0c9e4b0ea6055cfac11"}, {"problem": 22, "code": "#(reduce (fn [x _] (+ x 1)) 0 %)", "user": "5ad608dce4b0ea6055cfabfa"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "54a2760ae4b09f271ff37c5b"}, {"problem": 22, "code": "(fn [x] (last(map-indexed (fn [idx itm] (+ idx 1)) x)))", "user": "5ad45057e4b0ea6055cfabd3"}, {"problem": 22, "code": "#(loop [listall %1\n        init 0]\n   (if (empty? listall)\n     init\n     (recur (rest listall)\n            (inc init))))", "user": "55938d28e4b0c79f6e1db93f"}, {"problem": 22, "code": "(fn [s] (loop [es s c 0] (if (empty? es) c (recur (rest es) (inc c)))))", "user": "5ad6ad5de4b0ea6055cfac0e"}, {"problem": 22, "code": "#(reduce (fn [total ignore] (inc total)) 0 %)", "user": "5ad45f52e4b0ea6055cfabd7"}, {"problem": 22, "code": "(fn [s]\n  (reduce (fn [c _] (inc c)) 0 s))", "user": "5ad8e33fe4b0ea6055cfac2f"}, {"problem": 22, "code": "(fn [s]\n  \t(reduce (fn [x y] (+ x 1)) 0 s))", "user": "5ada1f12e4b0ea6055cfac43"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "599342efe4b0b211ea3aaab0"}, {"problem": 22, "code": "reduce (fn [n _] (inc n)) 0", "user": "5ada7ec8e4b0837691e92bd6"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5ada9df4e4b0837691e92bde"}, {"problem": 22, "code": "(fn [se]\n  (loop [n 0]\n    (if (not (nth se n nil)) n (recur (inc n))\n      )\n    )\n  )", "user": "5adcc688e4b0837691e92c05"}, {"problem": 22, "code": "#(reduce (fn [n ele]\n            (inc n)) 0 %)", "user": "56e24e68e4b03a7c14b85a34"}, {"problem": 22, "code": "#(reduce (fn [c, _] (inc c)) 0 %)", "user": "5adcefa5e4b0837691e92c07"}, {"problem": 22, "code": "(comp alength to-array vec)", "user": "5ade6bafe4b0837691e92c23"}, {"problem": 22, "code": "#(apply + (map (fn [x] 1) %))", "user": "573b8cf1e4b0cd1946bd10ad"}, {"problem": 22, "code": "#(reduce (fn [acc x] (inc acc)) 0 %)", "user": "5991eec7e4b0866487ed0d6e"}, {"problem": 22, "code": "#(loop [y (rest %)\n        i 1]\n  (if (empty? y)\n\ti\n    (recur (rest y)\n           (inc i))\n    )\n  )", "user": "5a353bdae4b0ddc586f153d9"}, {"problem": 22, "code": "(fn [x] (reduce + (map (fn [y] 1) x)))", "user": "5adb8d47e4b0837691e92bf1"}, {"problem": 22, "code": "(fn [s]\n   (loop [st s\n          n 1]\n           (if (next st)\n             (recur (next st) (+ n 1))\n             n)))", "user": "56d6e165e4b0ea9b8538f7d3"}, {"problem": 22, "code": "(fn [xs]\n  (reduce (fn [acc xs] (inc acc)) 0 xs))", "user": "5adf5f9be4b0837691e92c33"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5ae0976be4b0837691e92c43"}, {"problem": 22, "code": "(fn my-count [coll]\n  (reduce (fn [n _] (inc n))\n          0\n          coll))", "user": "5ae32553e4b0837691e92c67"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "5ae429fae4b0837691e92c79"}, {"problem": 22, "code": "#(loop [x 0 y %] (if y (recur (inc x) (next y)) x))", "user": "5ae47c1de4b0837691e92c81"}, {"problem": 22, "code": "(fn [s]\n  ((fn count-seq [se n]\n    (cond (empty? se) n\n          :else (count-seq (rest se) (inc n))))\n  s 0))", "user": "5ae4e0e3e4b0837691e92c86"}, {"problem": 22, "code": "reduce (fn [result item] (inc result)) 0", "user": "5ae5792ee4b0837691e92c90"}, {"problem": 22, "code": "(fn [xs]\n  (reduce \n   (fn [n _] (inc n)) \n   0 \n   xs\n  )\n)", "user": "5aac468ae4b073f17744256b"}, {"problem": 22, "code": "(fn [s] (reduce (fn [acc el] (+ 1 acc)) 0 s))", "user": "5ae56da2e4b0837691e92c8f"}, {"problem": 22, "code": "#(reduce (fn [c v] (inc c)) 0 %)", "user": "5ae246b1e4b0837691e92c5d"}, {"problem": 22, "code": "(fn ctr\n  ([x]\n   (ctr (rest x) 1))\n  ([x y]\n   (cond\n    (empty? x) y\n     :else (ctr (rest x) (inc y)))))", "user": "5ae7691ae4b0837691e92caa"}, {"problem": 22, "code": "#(reduce (fn [sum n] (inc sum)) 0 %)", "user": "5ae75ccbe4b0837691e92ca9"}, {"problem": 22, "code": "(fn [coll] \n  (loop [i 0] \n    (if (not \n        (nil? \n         (get \n          (vec coll) i\n          )\n        )\n       )\n      (recur (inc i))\n      i\n    )\n  )\n)", "user": "5ab1a859e4b073f1774425d7"}, {"problem": 22, "code": "reduce (fn [arg1 arg2] (+ arg1 1)) 0", "user": "5ae71f14e4b0837691e92ca7"}, {"problem": 22, "code": "#(reduce + (map (fn [_] '1) %1))", "user": "59e8b4ade4b0249b72820734"}, {"problem": 22, "code": "(fn c [xs]\n  (if (empty? xs)\n    0\n    (inc (c (rest xs)))))", "user": "5aeb0b44e4b0cc2b61a3bbee"}, {"problem": 22, "code": "(fn counter [sequ] (if (empty? (vec sequ)) 0 (+ 1 (counter (pop (vec sequ))))))", "user": "5ac53be2e4b0e27600da7740"}, {"problem": 22, "code": "#(loop [items-count 0\n        items-coll %]\n   (if (empty? items-coll)\n     items-count\n     (recur (inc items-count)\n            (rest items-coll))))", "user": "5aeafd96e4b0cc2b61a3bbeb"}, {"problem": 22, "code": "(fn f ([l] (f (rest l) 1))([l c] (if (empty? l) c (f (rest l) (inc c)))))", "user": "5aeb3c1ce4b0cc2b61a3bbf4"}, {"problem": 22, "code": "(fn [s]\n  (reduce + \n          0 \n          (map (fn [s] 1) s)))", "user": "5aedaab9e4b0cc2b61a3bc1c"}, {"problem": 22, "code": "reduce (fn [acc x] (inc acc)) 0", "user": "5aeec90fe4b0cc2b61a3bc31"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5aeb4c10e4b0cc2b61a3bbf6"}, {"problem": 22, "code": "reduce (fn [sum n] (+ 1 sum)) 0", "user": "5aeca4c9e4b0cc2b61a3bc0a"}, {"problem": 22, "code": "(fn [lst] (reduce (fn [n l] (+ n 1)) 0 lst))", "user": "5addadfce4b0837691e92c13"}, {"problem": 22, "code": "(fn mycount [xs] (if (= xs []) 0 (+ 1 (mycount (rest xs)))))", "user": "5aef9614e4b0cc2b61a3bc38"}, {"problem": 22, "code": "(fn length\n [list]\n (if (empty? list) 0\n  (inc (length (rest list)))))", "user": "5aefee03e4b0cc2b61a3bc43"}, {"problem": 22, "code": "(fn\n    [collection]\n    (loop [cnt 0 coll collection]\n      (if (empty? coll)\n        cnt\n        (recur (inc cnt)\n               (rest coll)\n               )\n        )\n      )\n  )", "user": "5aefd746e4b0cc2b61a3bc3d"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5aed87a1e4b0cc2b61a3bc1a"}, {"problem": 22, "code": "(fn [x]\n  (reduce (fn [x y] (+ x 1)) 0 x))", "user": "5aefedc0e4b0cc2b61a3bc42"}, {"problem": 22, "code": "(fn [x]\n  (loop [x x\n         c 0]\n    (if (= nil (next x))\n      (inc c)\n      (recur (rest x)(inc c)))))", "user": "5af047b8e4b0cc2b61a3bc48"}, {"problem": 22, "code": "(fn [x] (reduce + (map (fn [y] 1) x)))", "user": "5af062e5e4b0cc2b61a3bc51"}, {"problem": 22, "code": "(fn [s] \n  ((fn [s n] (if (empty? s)\n                 n\n                 (recur (rest s) (+ n 1))))\n   s 0))", "user": "5af0ac45e4b0cc2b61a3bc56"}, {"problem": 22, "code": "(fn length\n [list]\n (if (empty? list) 0\n  (+ 1 (length (rest list)))))", "user": "5af19233e4b0cc2b61a3bc5f"}, {"problem": 22, "code": "#(reduce (fn [ctr s] (inc ctr)) 0 %)", "user": "5af1cb6be4b0cc2b61a3bc64"}, {"problem": 22, "code": "(fn [s]\n  (apply + \n         (map (fn [x] 1) s)))", "user": "5af1cbb8e4b0cc2b61a3bc65"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5af0ac17e4b0cc2b61a3bc55"}, {"problem": 22, "code": "(fn [coll]\n  (loop [c coll\n         acc  0]\n    (if (= '() c)\n      acc\n      (recur (rest c) (inc acc)))))", "user": "5a084a24e4b01bb0ae8afdf2"}, {"problem": 22, "code": "(fn [l] (reduce (fn [acc i] (inc acc)) 0 l))", "user": "5af20ce0e4b0cc2b61a3bc69"}, {"problem": 22, "code": "(fn size-list [seq]\n  (loop [tmp-seq seq\n         cnt 0]\n    (if (empty? tmp-seq)\n      cnt\n    (recur (rest tmp-seq) (inc cnt)))))", "user": "5ae9d09de4b0cc2b61a3bbda"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5af2ce6be4b0cc2b61a3bc72"}, {"problem": 22, "code": "(fn cnt [arr] \n  (if (= arr '()) 0 (+ 1 (cnt (rest arr)))))", "user": "5af2edc2e4b0cc2b61a3bc74"}, {"problem": 22, "code": "(fn [x] (reduce + (map (fn [x] 1) x) ))", "user": "5af3019ce4b0cc2b61a3bc76"}, {"problem": 22, "code": "(fn [c] \n  \n  ((fn size [coll n]\n    (if (= (first coll) nil)\n      n\n      (recur (rest coll) (inc n))\n      )\n    \n    \n    ) c 0)\n  \n  \n  \n  \n  )", "user": "5af39788e4b0cc2b61a3bc8a"}, {"problem": 22, "code": "(fn [s] (reduce + (map (fn [e] 1) s)))", "user": "5aba04dce4b073f17744269e"}, {"problem": 22, "code": "(fn ! [i x]\n  (if (= (rest x) ())\n    (inc i)\n    (! (inc i) (rest x))\n  )\n) 0", "user": "5af3a4d0e4b0cc2b61a3bc8b"}, {"problem": 22, "code": "#(loop [i 0] (if (= nil (nth % i nil)) i (recur (inc i))))", "user": "5af45f05e4b0cc2b61a3bc97"}, {"problem": 22, "code": "(partial reduce (fn [acc _] (inc acc)) 0)", "user": "5af1e1b1e4b0cc2b61a3bc67"}, {"problem": 22, "code": "#(->> % (map (fn [_] 1)) (reduce + 0))", "user": "5a74c344e4b0512ff01cdabe"}, {"problem": 22, "code": "#( (fn[xs ctr] (if (= xs []) ctr (recur (rest xs) (+ ctr 1) ) )) % 0)", "user": "5af0c1ede4b0cc2b61a3bc57"}, {"problem": 22, "code": "#(loop [cnt 0 rem %] (if-not (seq rem) cnt (recur (inc cnt) (rest rem))))", "user": "5af61443e4b0cc2b61a3bcb1"}, {"problem": 22, "code": "(partial reduce \n         (fn [a _] (inc a)) \n         0)", "user": "5af8221ce4b0cc2b61a3bccd"}, {"problem": 22, "code": "(fn [listy] (reduce (fn [x l] (+ x 1)) 0 listy))", "user": "5af8752fe4b0cc2b61a3bcd3"}, {"problem": 22, "code": "#(apply + (map (fn [_] 1) %))", "user": "59eb69fbe4b0249b7282077e"}, {"problem": 22, "code": "(fn [s]\n  (loop [i 0 s s]\n    (if (empty? s)\n      i\n      (recur (inc i) (rest s)))))", "user": "5af907e6e4b0cc2b61a3bcda"}, {"problem": 22, "code": "#(reduce (fn [acc _] (+ 1 acc)) 0 %)", "user": "585c450fe4b0f14aab7c8782"}, {"problem": 22, "code": "(fn fn-name [s] (reduce (fn fn-name-2 [cnt & things] (inc cnt)) 0 s))", "user": "5af31955e4b0cc2b61a3bc7a"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %1))", "user": "5af9b2cee4b0cc2b61a3bce2"}, {"problem": 22, "code": "(fn similar-to-count \n  ([coll] (similar-to-count coll 0))\n  ([coll iter]\n  (if (= (first coll) nil)\n    iter \n    (recur (rest coll) (inc iter)))))", "user": "59c1c169e4b0a024fb6ae492"}, {"problem": 22, "code": "(fn [l]\n    ((fn [l tot]\n       (if (empty? l)\n         tot\n         (recur (rest l) (inc tot)))) l 0))", "user": "59d37e3de4b0ef0a1e9b5bb9"}, {"problem": 22, "code": "(fn [value]\n  (loop [l (seq value)\n         cpt 0]\n    (if (empty? l)\n      cpt\n      (recur (rest l) (inc cpt)))))", "user": "5afa9de0e4b0cc2b61a3bcf1"}, {"problem": 22, "code": "(fn [a] ((fn [x l] (if (empty? x) l (recur (rest x) (inc l)))) a 0))", "user": "5afa3590e4b0cc2b61a3bcea"}, {"problem": 22, "code": "#(reduce (fn [a _] (inc a)) 0 %)", "user": "5afb4b15e4b0cc2b61a3bcf6"}, {"problem": 22, "code": "(fn [xs]\n  (loop [coll xs total 0]\n    (if (empty? coll)\n      total\n      (recur (rest coll) (inc total))\n      )\n  )\n)", "user": "5aa7e6eae4b0d174b936c8c0"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1)%))", "user": "5af865a9e4b0cc2b61a3bcd1"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "585c61d4e4b0f14aab7c8787"}, {"problem": 22, "code": "(fn cnt \n  ([seq]\n   \t(cnt seq 0))\n  ([s res]\n   \t(if (seq s)\n     (recur (rest s) (inc res))\n      res)))", "user": "5afca248e4b0cc2b61a3bd12"}, {"problem": 22, "code": "#(reduce (fn [res val] (+ res 1)) 0 %)", "user": "5a9c7174e4b0d174b936c7d8"}, {"problem": 22, "code": "#(let [s (seq %)]\n      (loop [i 0 coll s]\n        (if (seq coll)\n          (recur (inc i) (drop 1 coll))\n          i)))", "user": "5afc7303e4b0cc2b61a3bd0b"}, {"problem": 22, "code": "#(.size (vec %))", "user": "5ad5bb0ae4b0ea6055cfabf0"}, {"problem": 22, "code": "(fn [x] (loop [xs (seq x)\n                result 0]\n           (if xs\n             (let [x (first xs)]\n               (recur (next xs) (inc result)))\n             result)))", "user": "5af361d4e4b0cc2b61a3bc83"}, {"problem": 22, "code": "reduce ( fn [ a b ]   (+ 1 a)) 0", "user": "5afc115de4b0cc2b61a3bcff"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "5aef6084e4b0cc2b61a3bc34"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5afdb2bae4b0cc2b61a3bd1f"}, {"problem": 22, "code": "(fn [xs]\n  (loop [remaining xs\n         amount 0]\n    (if (empty? remaining)\n      amount\n      (recur (rest remaining) (inc amount)))))", "user": "59f5f0ace4b0966464fe6ac9"}, {"problem": 22, "code": "(partial reduce (fn [n _] (inc n)) 0)", "user": "5afecee2e4b0cc2b61a3bd28"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5af9d09ae4b0cc2b61a3bce6"}, {"problem": 22, "code": "(fn [s] (reduce (fn [x y] (inc x)) 0 s))", "user": "5b007e46e4b0cc2b61a3bd3c"}, {"problem": 22, "code": "(fn count-el\n  [l]\n  (if (not (empty? l))\n    (+ 1 (count-el (rest l)))\n    0))", "user": "5add1fede4b0837691e92c0a"}, {"problem": 22, "code": "#(loop [s % c 0] (if (nil? (first s)) c (recur (rest s) (inc c))))", "user": "5b008bcae4b0cc2b61a3bd3d"}, {"problem": 22, "code": "#(reduce (fn[x _] (inc x)) 0 %)", "user": "5a796f13e4b03baeef9276ba"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5b01cf9ee4b0cc2b61a3bd49"}, {"problem": 22, "code": "(fn [x]\n  (loop [len 0 x x]\n    (if (nil? x)\n      len\n      (recur (inc len) (next x)))))", "user": "5b0180cfe4b0cc2b61a3bd47"}, {"problem": 22, "code": "(fn soln [sequ]\n    (if (nil? (first sequ))\n        0\n        (+ 1 (soln (rest sequ)))))", "user": "5b02ab12e4b0cc2b61a3bd53"}, {"problem": 22, "code": "reduce (fn [acc _] (inc acc)) 0", "user": "5b03063de4b0cc2b61a3bd5b"}, {"problem": 22, "code": "reduce (fn [counter ele]\n         (inc counter)) 0", "user": "5afcd6d1e4b0cc2b61a3bd17"}, {"problem": 22, "code": "(fn [x]\n  (loop [l x, cpt 0]\n    (if (empty? l)\n    \tcpt\n      \t(recur (rest l) (inc cpt)))))", "user": "5a786397e4b013a48d39976c"}, {"problem": 22, "code": "(fn CountSequence\n  [coll]\n  (cond\n    (empty? coll) 0\n    :else (+ 1 (CountSequence (rest coll)))))", "user": "5b02a170e4b0cc2b61a3bd52"}, {"problem": 22, "code": "#(loop [meh % blerh 0] (if (empty? meh) blerh (recur (rest meh) (inc blerh))))", "user": "5b0546eae4b0cc2b61a3bd7e"}, {"problem": 22, "code": "(fn [s] (reduce (fn [acc s] (+ acc 1)) 0 s))", "user": "5b056587e4b0cc2b61a3bd83"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5b046a9ee4b0cc2b61a3bd76"}, {"problem": 22, "code": "(fn count- [[h & t]]\n  (if h \n    (inc (count- t))\n    0))", "user": "5b05a635e4b0cc2b61a3bd8b"}, {"problem": 22, "code": "reduce (fn [result element] (+ 1 result)) 0", "user": "5b063204e4b0cc2b61a3bd94"}, {"problem": 22, "code": "(fn [x]\n  (loop [cnt 0\n        items x]\n    (if (nil? (first items))\n      cnt\n      (recur (inc cnt) (rest items)))))", "user": "5af74644e4b0cc2b61a3bcc2"}, {"problem": 22, "code": "(fn [coll]\n  (loop [cnt 0 remain coll]\n    (if (empty? remain)\n      cnt\n      (recur (inc cnt) (drop 1 remain)))))", "user": "5b068e8ce4b0cc2b61a3bd99"}, {"problem": 22, "code": "#(loop [cnt 0 xs %]\n    (if (nil? (first xs))\n      cnt\n      (recur (inc cnt) (rest xs))))", "user": "5b067ae1e4b0cc2b61a3bd97"}, {"problem": 22, "code": "#(loop [i 0 coll %] (if (empty? coll) i (recur (inc i)(rest coll))))", "user": "5afdca89e4b0cc2b61a3bd20"}, {"problem": 22, "code": "#((fn nnn [list cnt] (if (empty? list) cnt (nnn (rest list) (inc cnt)))) % 0)", "user": "5b081ff2e4b0cc2b61a3bdb3"}, {"problem": 22, "code": "#(loop [c 0 l %] (if (empty? l) c (recur (inc c) (rest l))))", "user": "5b083513e4b0cc2b61a3bdb4"}, {"problem": 22, "code": "#(loop [s % len 1] (if (empty? (rest s)) len (recur (rest s) (inc len))))", "user": "58eba423e4b056aecfd47d40"}, {"problem": 22, "code": "(fn [c]\n  (reduce (fn [t _] (inc t)) 0 c))", "user": "5aea2d21e4b0cc2b61a3bbe2"}, {"problem": 22, "code": "#(reduce + (map (fn [a] 1) %))", "user": "5afa8095e4b0cc2b61a3bceb"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5b0bd9cfe4b0cc2b61a3bdd9"}, {"problem": 22, "code": "(fn count-seq [s]\n  (reduce (fn [acc v] (+ acc 1)) 0 s))", "user": "5b0bea6de4b0cc2b61a3bdda"}, {"problem": 22, "code": "reduce (fn [x y] (inc x)) 0", "user": "5afb3426e4b0cc2b61a3bcf5"}, {"problem": 22, "code": "(fn count-elements\n  \t([coll]\n     (let [n 1]\n     \t(if (= (next coll) nil)\n          n\n          (count-elements (rest coll) (inc n)))))\n  \t([coll n]\n     (if (= (next coll) nil)\n          n\n          (count-elements (rest coll) (inc n)))))", "user": "591e1dc7e4b09b4ee5954c2a"}, {"problem": 22, "code": "#(reduce (fn [x _] (inc x)) 0 %)", "user": "5a306073e4b09cafd31c7f9f"}, {"problem": 22, "code": "#(loop [v %\n        x 0]\n   (if (nil? (first v))\n         x\n         (recur (rest v)\n                (inc x))))", "user": "58e9e7c0e4b056aecfd47d11"}, {"problem": 22, "code": "#(loop [x 0 list %]\n   (if (empty? list)\n     x\n     (recur (inc x) (rest list))\n   )\n )", "user": "5aff355fe4b0cc2b61a3bd31"}, {"problem": 22, "code": "(fn [coll]\n  (loop [c coll cnt 0]\n    (if (empty? c)\n      cnt\n      (recur (rest c) (+ cnt 1)))))", "user": "5b0cd5b6e4b0cc2b61a3bde7"}, {"problem": 22, "code": "(fn my-count [s] (if (empty? s) 0 (inc (my-count (rest s)))))", "user": "5b0d5619e4b0cc2b61a3bdf0"}, {"problem": 22, "code": "#(reduce (fn [acc x] (inc acc)) 0 %)", "user": "59d8c4e7e4b0ef0a1e9b5c47"}, {"problem": 22, "code": "#(apply + (map (constantly 1) %))", "user": "5ab9904ce4b073f177442695"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5b0e6795e4b0cc2b61a3be03"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5b04662ce4b0cc2b61a3bd75"}, {"problem": 22, "code": "#(reduce +(map (constantly 1) %))", "user": "5b0d72e5e4b0cc2b61a3bdf8"}, {"problem": 22, "code": "#(reduce + (map (fn [a] 1) %))", "user": "5b0f2862e4b0cc2b61a3be0f"}, {"problem": 22, "code": "(fn length [seq_]\n  (loop [length 0, seq (seq seq_)]\n    (if (not (empty? seq))\n      (recur (inc length) (rest seq))\n      length\n      )))", "user": "5a55c713e4b05d388ecb6c43"}, {"problem": 22, "code": "#(reduce (fn [acc nxt] (inc acc)) 0 %)", "user": "5b0fe3f4e4b0cc2b61a3be14"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "59ee2b59e4b0966464fe6a10"}, {"problem": 22, "code": "(fn count-fn [xs]\n(loop [my-numbers xs\n       my-count 0]\n     (if-not (empty? my-numbers)\n             (recur (rest my-numbers), (inc my-count))\n                    my-count)))", "user": "5953053ce4b066ee0a44aeda"}, {"problem": 22, "code": "(fn hahaha [ls]\n  (if (empty? ls) 0 (+ 1 (hahaha (rest ls))))\n)", "user": "5b113f20e4b0cc2b61a3be2c"}, {"problem": 22, "code": "(fn my-len [xs]\n  (if (empty? xs)\n    0\n    (+ 1 (my-len (rest xs)))))", "user": "5b12043ee4b0cc2b61a3be3c"}, {"problem": 22, "code": "(fn [xs]\n  (reduce (fn [x y] (inc x)) 0 xs))", "user": "5b0c6874e4b0cc2b61a3bde5"}, {"problem": 22, "code": "(fn [seq] (reduce (fn [acc, i] (inc acc)) 0 seq))", "user": "5b12f5b6e4b0cc2b61a3be49"}, {"problem": 22, "code": "(fn [s] (reduce (fn [c _] (inc c)) 0 s))", "user": "5b13f482e4b0cc2b61a3be58"}, {"problem": 22, "code": "#(loop [result 0 c %]\n    (if(empty? c) result\n    (recur (inc result) (rest c))))", "user": "5b09dc89e4b0cc2b61a3bdc3"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "5b14ea95e4b0cc2b61a3be62"}, {"problem": 22, "code": "#(reduce + (map (fn [_] 1) %))", "user": "5af4446de4b0cc2b61a3bc93"}, {"problem": 22, "code": "(fn [ct sequ]\n  (if (= (take ct (seq sequ)) (seq sequ))\n    ct\n    (recur (+ ct 1) sequ))) 0", "user": "5b102ab8e4b0cc2b61a3be19"}, {"problem": 22, "code": "(fn myCount [in] \n  (loop [curr-seq (seq in) iteration 0]\n  \n  (if curr-seq\n    (recur (next curr-seq) (inc iteration))\n    iteration))\n)", "user": "5b107263e4b0cc2b61a3be22"}, {"problem": 22, "code": "(fn my-count [s]\n    (if (empty? s)\n        0\n        (inc (my-count (rest s)))))", "user": "5b15811ee4b0cc2b61a3be6f"}, {"problem": 22, "code": "reduce (fn [x y] (+ 1 x)) 0", "user": "5b15e881e4b0cc2b61a3be75"}, {"problem": 22, "code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "5b1619e4e4b0cc2b61a3be77"}, {"problem": 22, "code": "(fn [arr]\n  (loop [i 0]\n    (if (nth arr i nil)\n      (recur (inc i))\n      i)))", "user": "5b162d8ce4b0cc2b61a3be78"}, {"problem": 22, "code": "(fn count-seq [s]\n  (reduce (fn [c s] (inc c)) 0 s))", "user": "5af554e8e4b0cc2b61a3bca6"}, {"problem": 22, "code": "#(->> % \n      (map (fn [x] 1)) \n      (reduce +)\n              )", "user": "5b118b7be4b0cc2b61a3be34"}, {"problem": 22, "code": "(fn\n  [coll]\n  (let [seq-coll (seq coll)]\n    (loop [x 0 new-seq seq-coll]\n      (if-not (empty? new-seq)\n        (recur (inc x) (rest new-seq))\n        x))))", "user": "5adbbf89e4b0837691e92bf4"}, {"problem": 22, "code": "(fn [xs] (apply + (vals (frequencies (into [] xs)))))", "user": "5b1737c1e4b00d69b768e765"}, {"problem": 22, "code": "#(reduce (fn [x y] (+ x 1)) 0 %)", "user": "5b17aeece4b00d69b768e76c"}, {"problem": 22, "code": "(fn [s]\n  (loop [cnt 0\n         r (rest s)]\n    (if (empty? r)\n      (+ cnt 1)\n      (recur (+ cnt 1) (rest r)))))", "user": "5b15d56be4b0cc2b61a3be74"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5b18f2d2e4b00d69b768e777"}, {"problem": 22, "code": "reduce (fn [total next] (inc total)) 0", "user": "5b19cdf2e4b03cfeda66ecbf"}, {"problem": 22, "code": "#(loop [size 0 tail %1] \n    (if \n      (empty? tail)\n      size\n      (recur (inc size) (rest tail))))", "user": "5b11449ce4b0cc2b61a3be2d"}, {"problem": 22, "code": "(partial reduce (fn [acc a] (inc acc)) 0)", "user": "5b1c16e1e4b03cfeda66ecf2"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5b0b8d29e4b0cc2b61a3bdd7"}, {"problem": 22, "code": "(fn rr[x]\n    (if (= x ())\n      0\n      (+ (rr (rest x)) 1)\n    )\n  )", "user": "5b1e8152e4b03cfeda66ed11"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5b1f1b2de4b03cfeda66ed19"}, {"problem": 22, "code": "(fn count-seq [items]\n  (let [[head & tail] items]\n    (if (nil? head)\n      0\n      (+ 1 (count-seq tail)))))", "user": "5b1674a3e4b038aa55420d55"}, {"problem": 22, "code": "(fn num-items [items]\n  (if (empty? items) 0 (+ 1 (num-items (rest items)))))", "user": "5b1ff078e4b03cfeda66ed2a"}, {"problem": 22, "code": "(fn rec [li] (if (empty? li) 0 (+ 1 (rec (rest li)))))", "user": "5b20134de4b03cfeda66ed2d"}, {"problem": 22, "code": "reduce (fn [p c] (inc p)) 0", "user": "59c243bae4b0a024fb6ae4aa"}, {"problem": 22, "code": "(fn countseq [s] (if (empty? s) 0 (+ 1 (countseq (rest s)))))", "user": "5b1fdbd5e4b03cfeda66ed27"}, {"problem": 22, "code": "#(loop [cnt 0\n        sq %]\n   (if (seq sq) \n     (recur (inc cnt) (rest sq))\n     cnt))", "user": "5b20cd02e4b03cfeda66ed37"}, {"problem": 22, "code": "#(reduce (fn [s _] (inc s)) 0 %)", "user": "5b22328ee4b03cfeda66ed5d"}, {"problem": 22, "code": "(fn [x] (reduce + (map (constantly 1) x)))", "user": "5b2238d1e4b03cfeda66ed5e"}, {"problem": 22, "code": "(fn f [arg]   \n  (loop [x arg iterations 0]\n    (if (empty? x)\n      iterations\n      (recur  (rest x) (inc iterations)))))", "user": "5b215981e4b03cfeda66ed50"}, {"problem": 22, "code": "#(reduce (fn [acc x]\n           (inc acc))\n         0 %)", "user": "5b227f5ae4b03cfeda66ed63"}, {"problem": 22, "code": "(fn counter [lst]\n  (reduce (fn [x y] (+ x 1)) 0 lst))\n;;  (reduce #(+ 1 %1) 0 lst))", "user": "5b20049be4b03cfeda66ed2b"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5b23f306e4b08b1df1c36769"}, {"problem": 22, "code": "#(reduce (fn [acc curr] (inc acc)) 0 %)", "user": "573e4be9e4b05c31a32c0829"}, {"problem": 22, "code": "(fn [coll]\n  (reduce (fn [accu elem]\n            (+ accu (if (= (boolean elem) true)\n                      1\n                      0\n                    )\n            )\n          ) 0 coll\n  )\n)", "user": "5b23b14ae4b08b1df1c3675c"}, {"problem": 22, "code": "#(reduce (fn [acc i] (inc acc)) 0 %)", "user": "5b210749e4b03cfeda66ed48"}, {"problem": 22, "code": "(fn counter [coll]\n  (let [cnt 0]\n    (loop [coll coll\n           cnt cnt]\n  \t\t(if (seq coll)\n    \t(recur (rest coll) (inc cnt))\n          cnt\n    ))))", "user": "5b250773e4b063e2438bcc21"}, {"problem": 22, "code": "(fn count-2\n  ([x] (count-2 x 0))\n  ([x y]\n    (if (empty? x)\n      y\n      (recur (rest x) (inc y)))))", "user": "5a9414eae4b0d174b936c72c"}, {"problem": 22, "code": "#(loop [n 0 seq %] (if (nil? (first seq)) n (recur (inc n) (drop 1 seq))))", "user": "54dfbacae4b024c67c0cf7b1"}, {"problem": 22, "code": "(fn myCount\n  ([length col]\n  (if (empty? col)\n    length\n    (myCount (+ 1 length) (rest col))))\n  ([col]\n   (myCount 0 col)))", "user": "5b250c93e4b063e2438bcc22"}, {"problem": 22, "code": "#(reduce \n  (fn [c _] (inc c))\n  0 %)", "user": "5b25fbb9e4b063e2438bcc2e"}, {"problem": 22, "code": "(partial \n \t(fn rec [i xs] \n      (if (empty? xs) \n        i \n        (rec (inc i) (rest xs))))\n 0)", "user": "5b236e55e4b08b1df1c36759"}, {"problem": 22, "code": "#(reduce (fn [acc _] (inc acc)) 0 %)", "user": "585aad0be4b0f14aab7c8753"}, {"problem": 22, "code": "(fn [x]\n  (loop [c 0 r x]\n    (if (first r)\n      (recur (inc c) (rest r))\n      c)))", "user": "5b274fd1e4b063e2438bcc3b"}, {"problem": 22, "code": "(fn [inseq] (reduce (fn [x _] (inc x)) 0 inseq))", "user": "5b284375e4b063e2438bcc53"}, {"problem": 22, "code": "(fn [li] \n  (reduce + (map (constantly 1) li)  )   )", "user": "5b28cf92e4b063e2438bcc56"}, {"problem": 22, "code": "#(loop [x 0] \n  (if (not= (nth % x nil) nil)\n    (recur (+ x 1))\n    x\n    ))", "user": "59c42426e4b0a024fb6ae4f5"}, {"problem": 22, "code": "#(reduce (fn [x y] (+ x 1)) 0 %)", "user": "5b29c33ee4b063e2438bcc64"}, {"problem": 22, "code": "(fn [coll] \n  (reduce (fn [x y](inc x)) 0 coll))", "user": "5a4320a4e4b0447ef91cc601"}, {"problem": 22, "code": "(fn [stufflist]\n  (loop [stuff stufflist\n         sum 0]\n    (if (= (rest stuff) ())\n      (inc sum)\n      (recur (rest stuff) (inc sum)))))", "user": "5b2a559be4b063e2438bcc74"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5b2bc1ace4b025bcb146f2ad"}, {"problem": 22, "code": "(fn [x] (reduce (fn[x y] (+ x 1)) 0 x))", "user": "58c680f1e4b021aa9917ed59"}, {"problem": 22, "code": "(fn [s]\n  (loop [se s c 0]\n    (if (empty? se)\n      c\n      (recur (rest se) (inc c)))))", "user": "5b2c79c6e4b025bcb146f2b7"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5b2e714ee4b025bcb146f2d4"}, {"problem": 22, "code": "(fn [coll] (loop [coll-1 coll cnt 0] (if (nil? (first coll-1)) cnt (recur (drop 1 coll-1) (inc cnt)))))", "user": "5b2e6b02e4b025bcb146f2d3"}, {"problem": 22, "code": "(partial reduce (fn [a _] (inc a)) 0)", "user": "5b2eaf1be4b025bcb146f2db"}, {"problem": 22, "code": "(fn [elements] (reduce (fn [acc el] (inc acc)) 0 elements))", "user": "5b2c1f60e4b025bcb146f2b1"}, {"problem": 22, "code": "(fn [col]\n  (loop [i 0\n         x col]\n    (if-not (seq x)\n            i\n            (recur (inc i) (rest x)))))", "user": "5b2fcac6e4b025bcb146f2e6"}, {"problem": 22, "code": "(fn size [x](\n    if (= nil (first x))\n    0\n    (+ (size (rest x)) 1))\n)", "user": "584984d4e4b089d5ab817ed3"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5a58da38e4b05d388ecb6c8b"}, {"problem": 22, "code": "(fn my-count [coll]\n  (let [i 0]\n    (loop [loop-coll coll\n           i 0]\n      (if (empty? loop-coll)\n        i\n        (recur (rest loop-coll) (inc i))))))", "user": "5b2c76c8e4b025bcb146f2b6"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5b2d2bf3e4b025bcb146f2c4"}, {"problem": 22, "code": "(fn my-count [coll]\n  \n  (if (empty? coll)\n  \n  \t0\n  \t\n    (inc (my-count (rest coll)))\n  )\n  \n)", "user": "5b3189e5e4b025bcb146f308"}, {"problem": 22, "code": "#(reduce (fn [acc _] (inc acc)) 0 %)", "user": "5b3251c1e4b025bcb146f317"}, {"problem": 22, "code": "(fn sizeOfList [l] (if (empty? l) 0 (inc (sizeOfList (rest l)))))", "user": "5b32571ee4b025bcb146f318"}, {"problem": 22, "code": "(fn [coll] (-> (map-indexed (fn [i _] (inc i)) coll) last))", "user": "5b073c34e4b0cc2b61a3bda4"}, {"problem": 22, "code": "(fn count-a-seq [lat]\n  (reduce (fn [x y] (+ x 1)) 0 lat))", "user": "5b2b6e9ae4b025bcb146f2a8"}, {"problem": 22, "code": "(fn [coll]\n   (reduce (fn [res n]\n             (inc res)) 0 coll))", "user": "5b34aba7e4b025bcb146f352"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5b33c6e1e4b025bcb146f346"}, {"problem": 22, "code": "(fn [lat]\n  (reduce (fn [x _] (+ x 1))\n          0\n          lat))", "user": "5b34f9bfe4b025bcb146f354"}, {"problem": 22, "code": "(fn myFN [lst]\n  (loop [cnt 0\n         rLst (seq lst)]\n    (if (empty? rLst)\n      cnt\n      (recur (inc cnt) (rest rLst) ))))", "user": "5b33050ee4b025bcb146f32d"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5af740b3e4b0cc2b61a3bcc1"}, {"problem": 22, "code": "#(reduce (fn [counter _] (inc counter)) 0 %)", "user": "4e5696d0535d8a8b8723a284"}, {"problem": 22, "code": "(fn len [x]\n  (loop [x x\n         ret 0]\n    (if (empty? x) ret\n      (recur (rest x) (inc ret)))))", "user": "5b333626e4b025bcb146f32f"}, {"problem": 22, "code": "#(.length (vec %))", "user": "5b36eae0e4b02d533a91bba2"}, {"problem": 22, "code": "#(loop [countme 0 coll %] (if (empty? coll) countme (recur (inc countme) (next coll))))", "user": "5b37a3b4e4b02d533a91bba9"}, {"problem": 22, "code": "(fn [x]\n  (loop [f x i 0]\n    (if (empty? f)\n      i\n      (recur (rest f) (inc i)))))", "user": "5b38d771e4b02d533a91bbb0"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "5b398e4fe4b02d533a91bbb7"}, {"problem": 22, "code": "(fn mycnt\n  ([sq] (mycnt sq 0))\n  ([sq cnt]\n  \t\t\n   \t\t(if (empty? sq)\n          cnt\n      \t  (recur (rest sq) (inc cnt))) \n   \n  )\n)", "user": "5b31712de4b025bcb146f305"}, {"problem": 22, "code": "#(loop [nums % num 0] (\n  if (empty? nums) \n    num \n    (recur (rest nums) (inc num))))", "user": "5b0c21fbe4b0cc2b61a3bde3"}, {"problem": 22, "code": "(fn [s]\n   (loop [t s c 1] \n     (cond (empty? (rest t)) c\n           :else (recur (rest t) (inc c)))))", "user": "5b2689e3e4b063e2438bcc33"}, {"problem": 22, "code": "( fn c[x] ( if (empty?  x) 0 ( + 1 (c ( rest x) ) )  ))", "user": "5b3aa98be4b02d533a91bbca"}, {"problem": 22, "code": "(partial reduce (fn [c _] (+ c 1)) 0)", "user": "5b3b70c6e4b02d533a91bbd4"}, {"problem": 22, "code": "(fn my-count\n  ([s] (my-count 0 s))\n  ([c s]\n   (if (empty? s)\n     c\n     (recur (inc c) (rest s)))))", "user": "5b3a60c7e4b02d533a91bbc5"}, {"problem": 22, "code": "(fn rest-loop [n]\n(loop [array n size 0 ]\n      (if (empty? array )\n        size\n        (recur (rest array) (inc size)))))", "user": "5b3a1c3ce4b02d533a91bbbd"}, {"problem": 22, "code": "(fn [seq] (reduce (fn [a b] (inc a)) 0 seq))", "user": "5afb1c1ae4b0cc2b61a3bcf4"}, {"problem": 22, "code": "(fn abc[x]\n  (alength (to-array x)))", "user": "5b3ca9c9e4b02d533a91bbe3"}, {"problem": 22, "code": "(fn answer [x] (case x nil 0 (+ 1 (answer (next x)))))", "user": "5b3e35bde4b02d533a91bbfa"}, {"problem": 22, "code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "5b265183e4b063e2438bcc31"}, {"problem": 22, "code": "(fn f[x]\n  (if (empty? x) 0 \n  (inc(f (rest x))))\n  )", "user": "5b3e3c1ce4b02d533a91bbff"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "5b2927a0e4b063e2438bcc5e"}, {"problem": 22, "code": "(fn [col]\n  (loop [x 0\n        m col]\n    (if (empty? m)\n      x\n      (recur (inc x) (rest m)))))", "user": "5b2be9b1e4b025bcb146f2b0"}, {"problem": 22, "code": "#(reduce (fn [acc _] (+ 1 acc)) 0 %1)", "user": "5b3ef412e4b02d533a91bc06"}, {"problem": 22, "code": "(fn len [x] (if (empty? x) 0 (+ (len (rest x)) 1)))", "user": "5b3f2ba9e4b02d533a91bc09"}, {"problem": 22, "code": "(fn [search-list]\n\n(loop [lst search-list index 0]\n  (println index lst)\n  (if (empty? lst)\n    index\n    (recur (rest lst) (inc index))))\n\n)", "user": "5b3de9a7e4b02d533a91bbf4"}, {"problem": 22, "code": "#(loop [i 0 coll %]\n   (if (empty? coll) i\n     (recur (inc i) (rest coll))))", "user": "5acaa269e4b0e27600da77e6"}, {"problem": 22, "code": "#(loop [x 0 sq %]\n   (if (= sq (rest sq))\n    x\n    (recur (inc x) (rest sq))\n   )\n )", "user": "4f6c77bee4b07046d9f4efbb"}, {"problem": 22, "code": "(fn [xs] (reduce (fn [acc cur] (inc acc)) 0 xs))", "user": "5b41c077e4b02d533a91bc25"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5b409932e4b02d533a91bc19"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5b3e0c7be4b02d533a91bbf7"}, {"problem": 22, "code": "(fn [collection] (reduce (fn [acc, item] (inc acc)) 0 collection))", "user": "5b43a97ae4b02d533a91bc39"}, {"problem": 22, "code": "#(reduce (fn [x _] (inc x)) 0 %)", "user": "5b0948f3e4b0cc2b61a3bdbb"}, {"problem": 22, "code": "(fn [s]\n  (loop [st s res 0]\n    (if (empty? st) res\n      (recur (rest st) (inc res)))))", "user": "5a5d693ce4b0512ff01cd923"}, {"problem": 22, "code": "(fn check [l] (if (empty? l) 0 (+ (check (rest l)) 1)))", "user": "5b446fbae4b02d533a91bc43"}, {"problem": 22, "code": "(fn [Karte] \n\t(loop [Liste Karte\n\t\tResult 0]\n\t\t(if (empty? Liste)\n\t\t\tResult\n\t\t\t(recur (rest Liste) (inc Result)))))", "user": "5b35de7be4b02d533a91bb97"}, {"problem": 22, "code": "(fn [seq] (reduce + (map (constantly 1) seq)))", "user": "5b4611fde4b02d533a91bc5c"}, {"problem": 22, "code": "(fn len [coll] (if (first coll) (+ (len (rest coll)) 1) 0))", "user": "5b465b8be4b02d533a91bc65"}, {"problem": 22, "code": "(fn [seq & {:keys [counted] :or {counted 0}}]\n  (if (empty? seq) counted\n      (recur (rest seq) {:counted (inc counted)})))", "user": "5b47874be4b02d533a91bc70"}, {"problem": 22, "code": "#(reduce (fn [a b] (inc a)) 0 %1)", "user": "58f7bdf1e4b0438e51c2cf1c"}, {"problem": 22, "code": "#(reduce (fn [x,y] (inc x)) 0 %)", "user": "5b4751e0e4b02d533a91bc6a"}, {"problem": 22, "code": "(fn [l] (apply + (map (fn[x] 1) l)))", "user": "4e1e89a2535d04ed9115e809"}, {"problem": 22, "code": "#(reduce (fn [x _] (inc x)) 0 %)", "user": "5b3169a6e4b025bcb146f303"}, {"problem": 22, "code": "(fn [coll] (reduce (fn [x y] (+ x y))(map (fn [x] 1) coll)))", "user": "5b421edce4b02d533a91bc2c"}, {"problem": 22, "code": "(fn [x]\n  (reduce + (map (constantly 1) x)))", "user": "5b47a4f7e4b02d533a91bc73"}, {"problem": 22, "code": "#(loop [lst %1\n        n 0]\n   (if (empty? lst)\n     n\n     (recur (rest lst) (inc n))))", "user": "5b4b8cd6e4b02d533a91bc9f"}, {"problem": 22, "code": "(fn [l] (reduce (fn [i l1] (inc i)) 0 l))", "user": "5b4b4052e4b02d533a91bc9a"}, {"problem": 22, "code": "(fn [x](reduce (fn [x _] (inc x)) 0  x))", "user": "5b445421e4b02d533a91bc40"}, {"problem": 22, "code": "(fn mycount\n  ([s] (mycount s 0))\n  ([s n]\n    (if (= s '())\n      n\n      (mycount (rest s) (inc n)))))", "user": "5b4ca13ce4b02d533a91bcac"}, {"problem": 22, "code": "#(apply + (map (constantly 1) %))", "user": "5b3dddf5e4b02d533a91bbf1"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5b337ff4e4b025bcb146f339"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5b44d3cae4b02d533a91bc4e"}, {"problem": 22, "code": "(fn[x](if(string? x)(.length x)(.size x)))", "user": "5826a843e4b051871117befd"}, {"problem": 22, "code": "(fn [l]\n  (reduce (fn [f s] (+ f 1)) 0 l))", "user": "5b4ff637e4b02d533a91bce0"}, {"problem": 22, "code": "#(apply + (map (fn [a] 1) %1))", "user": "5b4a0ce3e4b02d533a91bc92"}, {"problem": 22, "code": "(fn [c] (reduce (fn [x _] (+ x 1)) 0 c))", "user": "530411d1e4b0d8b024fd374c"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "5b4dfd5de4b02d533a91bcc3"}, {"problem": 22, "code": "(fn [coll]\n  (loop [coll coll\n         acc 0]\n    (if (empty? coll)\n      acc\n      (recur (rest coll) (inc acc)))))", "user": "5b338b23e4b025bcb146f33d"}, {"problem": 22, "code": "#(reduce (fn [a _] (+ 1 a)) 0 %)", "user": "5b500215e4b02d533a91bce2"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5b51ddc9e4b02d533a91bd01"}, {"problem": 22, "code": "(fn [xs]\n  (loop [coll xs\n         len 0]\n    (if (empty? coll)\n      len\n      (recur (rest coll) (inc len)))))", "user": "5b51b9f8e4b02d533a91bcfe"}, {"problem": 22, "code": "#(loop[a % c 0] (if (empty? a) c (recur (rest a) (inc c))))", "user": "5a972643e4b0d174b936c778"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5b5382a6e4b02d533a91bd19"}, {"problem": 22, "code": "reduce (fn [acc n] (inc acc)) 0", "user": "57a5da5ee4b0a966079561fe"}, {"problem": 22, "code": "(fn [x]\n  (loop [mySeq x cnt 0]\n    (if (empty? mySeq)\n      cnt\n      (recur (rest mySeq) (+ cnt 1)))))", "user": "5b5462b5e4b02d533a91bd20"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "5b549e61e4b02d533a91bd24"}, {"problem": 22, "code": "#(reduce (fn [a b] (inc a)) 0 %)", "user": "5b552117e4b02d533a91bd2c"}, {"problem": 22, "code": "(fn [n] (reduce + (map (constantly 1) n)))", "user": "591d57aee4b09b4ee5954c16"}, {"problem": 22, "code": "#(reduce (fn [x y] (+ x 1)) 0 %)", "user": "5b552e2ee4b02d533a91bd2e"}, {"problem": 22, "code": "(fn [xs] (reduce #(inc %1 #_%&) 0 xs))", "user": "5b4cd94ce4b02d533a91bcb1"}, {"problem": 22, "code": "(fn [lat]\n  (reduce (fn [x y] (+ x 1)) 0 lat))", "user": "5b55b15ae4b02d533a91bd35"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "585b46c8e4b0f14aab7c8766"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5b57505ce4b02d533a91bd55"}, {"problem": 22, "code": "(fn [ls]\n  (loop [in ls\n         out 0]\n    (if (empty? in)\n      out\n      (recur (rest in)\n             (+ out 1)))))", "user": "5b576216e4b02d533a91bd58"}, {"problem": 22, "code": "(fn [liste]\n  ;;(reduce fn[one two](inc %1) 0 liste)\n  (loop [x liste\n         acc 0]\n    (if (empty? x)\n      acc \n      (recur (rest x) (inc acc))\n      )))", "user": "5a7f77fae4b00b71e582a041"}, {"problem": 22, "code": "reduce (fn [x _] (inc x)) 0", "user": "5b5955cce4b02d533a91bd79"}, {"problem": 22, "code": "(fn [coll]\n    (reduce + \n      (map (fn [value]\n              (if (= 1 value) value 1))\n        coll))\n  )", "user": "5b199fd4e4b03cfeda66ecbd"}, {"problem": 22, "code": "(fn [xs] (reduce + (map (constantly 1) xs)))", "user": "5b59fe53e4b02d533a91bd87"}, {"problem": 22, "code": "(fn f [s]\n  (if (empty? s)\n    0\n    (inc (f (rest s)))))", "user": "5969bb32e4b069c0a1a197ed"}, {"problem": 22, "code": "(fn [arange] \n  (loop [arange arange\n         n 0]\n    (if (empty? arange)\n      n\n      (recur (rest arange)\n             (inc n)))))", "user": "5b59c2bde4b02d533a91bd80"}, {"problem": 22, "code": "(fn [x]\n  (loop [acc 0 x x]\n  \t(if (empty? x) acc (recur (inc acc) (rest x)))\n  )\n )", "user": "5b5afe87e4b0c6492753e6a4"}, {"problem": 22, "code": "(fn [s]\n  (reduce (fn [acc x] (inc acc))\n          0\n          (seq s)))", "user": "59b93cd7e4b0a024fb6ae3c7"}, {"problem": 22, "code": "(fn f [s]\n  (reduce (fn [x y] (inc x)) 0 s))", "user": "5b5b4176e4b0c6492753e6ac"}, {"problem": 22, "code": "(fn count-elements\n  [coll]\n    (loop [elements coll\n           counter 0]\n      (if (empty? elements)\n        counter\n        (recur \n          (rest elements)\n          (inc counter)))))", "user": "5a3c06fce4b001c08efc0cdd"}, {"problem": 22, "code": "(fn [s] (reduce (fn [accum _] (+ accum 1)) 0 s))", "user": "5b5d255de4b0c6492753e6c8"}, {"problem": 22, "code": "(fn [lst] (reduce + (map (fn [x] 1) lst)))", "user": "5b5e5019e4b0c6492753e6d3"}, {"problem": 22, "code": "#(\n   (fn [x y]\n      (if x\n        (recur (next x) (+ y 1)) \n        y\n   ))\n% 0)", "user": "5b5b0bb9e4b0c6492753e6a5"}, {"problem": 22, "code": "#(reduce (fn [a _] (inc a)) 0 %)", "user": "5b59d176e4b02d533a91bd86"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5b5f2990e4b0c6492753e6ea"}, {"problem": 22, "code": "(fn [x] (loop [n 0 ls x]\n          (if (empty? ls)\n            n\n            (recur (inc n) (rest ls))\n           )\n          )\n  )", "user": "5b59b89be4b02d533a91bd7d"}, {"problem": 22, "code": "(fn [xs] (reduce + (map (fn [x] 1) xs)))", "user": "5b5b1b61e4b0c6492753e6a7"}, {"problem": 22, "code": "#(loop [s % counter 0]\n   (if (empty? s)\n     counter\n     (recur (rest s) (inc counter))))", "user": "5b602a66e4b0c6492753e6fc"}, {"problem": 22, "code": "(fn count-1[items] (reduce (fn [x y](inc x)) 0 items))", "user": "5b100648e4b0cc2b61a3be17"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5b609f0ae4b0c6492753e708"}, {"problem": 22, "code": "(fn [x]\n (loop [x x cnt 0]\n  (if (seq x)\n   (recur (rest x) (inc cnt))\n   cnt)))", "user": "5b61aa6ae4b0c6492753e712"}, {"problem": 22, "code": "(fn foo [l] (\nloop [ll l c 0] (if (empty? ll) c (recur \n(rest ll) (+ c 1)))))", "user": "5b5f2566e4b0c6492753e6e9"}, {"problem": 22, "code": "(fn [xs]\n  (reduce + \n          (map (constantly 1) \n               xs)))", "user": "573cb87fe4b05c31a32c0807"}, {"problem": 22, "code": "#(loop [seq % n 0] (if (empty? seq) n (recur (next seq) (inc n))))", "user": "576cd1fae4b0979f89651554"}, {"problem": 22, "code": "#(reduce (fn [x _] (inc x)) 0 %)", "user": "5b62764ae4b0c6492753e725"}, {"problem": 22, "code": "(fn f [s] (if (empty? s) 0 (+ 1 (f (next s)))))", "user": "5b5e7953e4b0c6492753e6d9"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5b5ee2f2e4b0c6492753e6e1"}, {"problem": 22, "code": "#(reduce (fn [idx _] (inc idx)) 0 %)", "user": "5b62ff3ce4b0c6492753e72a"}, {"problem": 22, "code": "(fn countz\n  ([coll]\n   (countz coll 0))\n  ([coll acc]\n      (if (empty? coll)\n          acc\n          (recur (rest coll) (inc acc)))))", "user": "5b632851e4b0c6492753e72d"}, {"problem": 22, "code": "(fn my-count [c] (inc (last (map-indexed (fn [i _] i) (seq c)))))", "user": "5b4ff2abe4b02d533a91bcdf"}, {"problem": 22, "code": "(fn [collection]\n  (loop [counter 0 collection collection]\n    (if (empty? collection)\n      counter\n      (recur (inc counter) (rest collection)))))", "user": "5b513bd4e4b02d533a91bcf2"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5b608c66e4b0c6492753e706"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5b6428b3e4b0c6492753e73b"}, {"problem": 22, "code": "(fn [xs] (->> xs \n               (map (fn [x] 1))\n               (reduce +)))", "user": "56e2ca59e4b03a7c14b85a38"}, {"problem": 22, "code": "#(reduce ( fn[acc, val](inc acc) ) 0 % )", "user": "5b6473eee4b0c6492753e73f"}, {"problem": 22, "code": "reduce (fn [i,l] (inc i)) 0", "user": "5b5fa65fe4b0c6492753e6f6"}, {"problem": 22, "code": "(fn cntarr [arr]\n  (if (empty? arr)\n    0\n    (+ 1 (cntarr (rest arr)))))", "user": "5b65b7bde4b0c6492753e748"}, {"problem": 22, "code": "#(reduce (fn [a b] (inc a)) 0 %)", "user": "5b66faa7e4b0c6492753e75a"}, {"problem": 22, "code": "#(loop [v %\n          acc 0]\n      (if (empty? v)\n        acc\n          (recur (rest v) (inc acc))))", "user": "5b5c7fc2e4b0c6492753e6bc"}, {"problem": 22, "code": "(fn func [sq]\n  (loop [sequen sq\n         accumulator 0]\n    (if (empty? sequen)\n      accumulator\n      (recur (drop 1 sequen) (inc accumulator)))))", "user": "5b5fb62be4b0c6492753e6f7"}, {"problem": 22, "code": "(fn [se]\n  (loop [cnt 0, counted [], not-counted se]\n    (if (empty? not-counted)\n      cnt \n      (recur \n      \t(inc cnt)\n       \t(conj counted (first not-counted))\n       \t(rest not-counted)))))", "user": "5b6756d9e4b0c6492753e764"}, {"problem": 22, "code": "(fn func\n  ([l]\n  (func l 0))\n  ([l n]\n  (if (empty? l) n (func (rest l) (+ n 1)))))", "user": "5b679bf9e4b0c6492753e769"}, {"problem": 22, "code": "(fn [col] (reduce + (map (constantly 1) col)))", "user": "5b67d634e4b0c6492753e76b"}, {"problem": 22, "code": "(fn [xs]\n  (loop [txs xs\n         n 0]\n    (if (seq txs)\n      (recur (rest txs) (inc n))\n      n)))", "user": "5b1ec003e4b03cfeda66ed13"}, {"problem": 22, "code": "#(inc (first (last (map-indexed vector %))))", "user": "5b68a804e4b0c6492753e77b"}, {"problem": 22, "code": "(fn [sq]\n  (reduce (fn [agg sq-item] (inc agg)) 0 sq))", "user": "5b69529be4b0c6492753e786"}, {"problem": 22, "code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "5b6962c1e4b0c6492753e787"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5b682261e4b0c6492753e771"}, {"problem": 22, "code": "(fn [lst]\n  (loop [xs lst cnt 0]\n    (if (empty? xs)\n      cnt\n      (recur (rest xs) (inc cnt)))))", "user": "5b58d012e4b02d533a91bd71"}, {"problem": 22, "code": "(fn foo\n    ([lseq]\n     (foo lseq 0))\n   ([lseq vl]\n    (if (not (empty? lseq))\n      (foo (rest lseq) (inc vl))\n      vl)))", "user": "5b611666e4b0c6492753e70d"}, {"problem": 22, "code": "(fn Count [my-list] (if (empty? my-list),\n                      0\n                      (inc (Count (rest my-list)))))", "user": "5b6b3809e4b0c6492753e7a5"}, {"problem": 22, "code": "#(inc (first (last (map-indexed vector %))))", "user": "5b6c164ce4b0c6492753e7b4"}, {"problem": 22, "code": "(fn my-count [coll]\n\t(if (empty? coll) 0\n\t\t(loop [new-coll (drop 1 coll) counter 1]\n\t\t\t(if (empty? new-coll) counter (recur (drop 1 new-coll) (inc counter)))\n\t\t)\n\t)\n)", "user": "5b43cbb0e4b02d533a91bc3a"}, {"problem": 22, "code": "#(loop [current % ret 0]\n(if (empty? current)\nret\n(recur (rest current)\n(+ ret 1)\n)))", "user": "5b044436e4b0cc2b61a3bd71"}, {"problem": 22, "code": "#(reduce (fn [x y] (+ x 1)) 0 %)", "user": "5b6afaefe4b0c6492753e79f"}, {"problem": 22, "code": "(fn [x] (reduce + (map (constantly 1) x)))", "user": "5b6c6328e4b0c6492753e7b7"}, {"problem": 22, "code": "reduce (fn [x y] (+ x 1)) 0", "user": "5b6e83e0e4b0c6492753e7d0"}, {"problem": 22, "code": "(fn my_count \n  [x] ((fn my_count2 [x n] (if (empty? x) n (my_count2 (rest x) (+ n 1)))) x 0)\n )", "user": "5b67f0fbe4b0c6492753e76d"}, {"problem": 22, "code": "(fn [xs]\n  (loop [xs xs\n         n  0]\n    (if (empty? xs)\n      n\n      (recur (rest xs) (inc n))\n    )\n  )\n)", "user": "5b6f27dce4b0c6492753e7d9"}, {"problem": 22, "code": "#(reduce +(map(fn[x]1)%))", "user": "5b6e1649e4b0c6492753e7ce"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5b6c0d56e4b0c6492753e7b2"}, {"problem": 22, "code": "(fn [s] (reduce (fn [acc e] (inc acc)) 0 s))", "user": "57ebbf3ae4b0bfb2137f5b66"}, {"problem": 22, "code": "(fn [lst]\n  (loop [i lst cnt 0]\n   (cond (empty? i) cnt\n     :t (recur (rest i)(inc cnt)))))", "user": "5b6170bbe4b0c6492753e70f"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %) )", "user": "5b70f96fe4b047b03b203692"}, {"problem": 22, "code": "#(loop [initCount 0\n         toCount %]\n    (if (empty? toCount)\n      initCount\n      (recur (inc initCount) (rest toCount))))", "user": "5b69bf95e4b0c6492753e790"}, {"problem": 22, "code": "(fn \n  [list] \n  \t( reduce + (map (fn [c] 1) list)))", "user": "5b6f72ede4b0c6492753e7dc"}, {"problem": 22, "code": "(fn countz [xs]\n  (letfn [(help [xs c]\n          (if (empty? xs)\n          c\n          (help (rest xs) (inc c))))]\n  (help xs 0)))", "user": "5776903ee4b0979f8965163b"}, {"problem": 22, "code": "#(reduce (fn [c _](inc c)) 0 %)", "user": "5b7292b3e4b047b03b2036a4"}, {"problem": 22, "code": "(fn count_seq\n  [coll]\n  (loop [x 0\n         cur_coll coll]\n    (if (empty? cur_coll)\n      x\n      (recur (+ x 1) (drop 1 cur_coll)))))", "user": "5b7163f8e4b047b03b203695"}, {"problem": 22, "code": "#(reduce + (map (fn[_] 1) %) )", "user": "5b72b36ce4b047b03b2036a9"}, {"problem": 22, "code": "(fn [coll] \n  (reduce (fn [c _] (inc c)) 0 coll))", "user": "5b71ee18e4b047b03b20369b"}, {"problem": 22, "code": "#(reduce (fn [i mem] (inc i)) 0 %)", "user": "5a24735fe4b07f18be40aa11"}, {"problem": 22, "code": "(fn f [s]\n  (loop [i 0 sequ s]\n    (if (empty? sequ)\n      i\n      (recur (inc i) (rest sequ)))))", "user": "5b7412a4e4b047b03b2036bb"}, {"problem": 22, "code": "(fn CountW [x] (alength (to-array x)))", "user": "5b69baf9e4b0c6492753e78f"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5b741d2be4b047b03b2036bc"}, {"problem": 22, "code": "(fn [coll]\n  (loop [cnt 0\n         coll coll]\n    (if (empty? coll) cnt (recur (inc cnt) (rest coll)))))", "user": "5b757b39e4b047b03b2036cd"}, {"problem": 22, "code": "(fn [coll]\n  (apply + (map #(or 1 %) coll)))", "user": "57ca338de4b05aa3c4741d37"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "59b294f8e4b0e1f4e384c8fb"}, {"problem": 22, "code": "(fn [coll]\n  (reduce (fn [accum item]\n            (inc accum))\n          0\n          coll))", "user": "5b7608c9e4b047b03b2036da"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5a2fdea3e4b09cafd31c7f92"}, {"problem": 22, "code": "(fn [xs]\n  (loop [xs xs acc 0]\n    (if\n      (empty? xs) acc\n      (recur (rest xs) (inc acc))\n    )\n  )\n)", "user": "5b77248ae4b047b03b2036e7"}, {"problem": 22, "code": "reduce (fn [m _] (inc m)) 0", "user": "5b772ad7e4b047b03b2036e8"}, {"problem": 22, "code": "#(alength (to-array %))", "user": "5b77d3c8e4b047b03b2036f1"}, {"problem": 22, "code": "(let [res (atom 0)]\n  (fn my-count [l]\n    (if (empty? l)\n      @res\n      (do (swap! res inc)\n          (my-count (rest l))))))", "user": "5b780a8ce4b047b03b2036f6"}, {"problem": 22, "code": "(fn cnt\n  ([lst n] \n   (if (empty? lst)\n     n\n     (cnt (rest lst) (inc n))))\n  ([lst] (cnt lst 0)))", "user": "5b73e500e4b047b03b2036ba"}, {"problem": 22, "code": "(fn \n  [ls] ((fn\n  [n xs] (if (empty? xs)\n           n\n           (recur (inc n) (rest xs)))) 0 ls))", "user": "5b64370ae4b0c6492753e73c"}, {"problem": 22, "code": "(fn my-count [lst]\n  ((fn iter [lst c]\n     (if (empty? lst)\n       c\n       (iter (rest lst)\n             (inc c))))\n   lst 0))", "user": "5b79481de4b047b03b203704"}, {"problem": 22, "code": "#(loop [iter 0 remaining %]\n   (if (empty? remaining)\n     iter\n     (recur (inc iter) (rest remaining))))", "user": "5b78302ce4b047b03b2036fa"}, {"problem": 22, "code": "#(loop [xs % c 0]\n  (if (= (first xs) nil)\n    c\n    (recur (rest xs) (inc c))))", "user": "5b796594e4b047b03b203705"}, {"problem": 22, "code": "#(reduce (fn [c _] (+ c 1)) 0 %)", "user": "5b79d027e4b047b03b20370c"}, {"problem": 22, "code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "5b788fc4e4b047b03b2036fc"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5b79cbdce4b047b03b20370a"}, {"problem": 22, "code": "#(loop [[f & r] %1\n         n 0]\n    (if (not f)\n      n\n      (recur r (inc n))))", "user": "5b6ccc58e4b0c6492753e7bb"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5b6ba7d7e4b0c6492753e7ad"}, {"problem": 22, "code": "#(loop [cnt 0 seq %] (if (empty? seq) cnt (recur (inc cnt) (rest seq))))", "user": "5b6002c2e4b0c6492753e6fb"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5b754f8ee4b047b03b2036c9"}, {"problem": 22, "code": "(fn [x] (loop [cnt 0 numl x] (if (empty? numl) cnt (recur (inc cnt) (rest numl)))))", "user": "5b4c2212e4b02d533a91bca6"}, {"problem": 22, "code": "(fn [x] \n  (\n  \n   (fn l [y, c] \n     (if (empty? y)\t\n       c\n     (l (rest y) (+ 1 c))\n       )\n   )\n   \n   x 0)\n  \n  \n)", "user": "5b7bc82ce4b047b03b203726"}, {"problem": 22, "code": "#((fn [c n]\n    (if (empty? c)\n      n\n      (recur (rest c) (inc n))\n      )\n    )\n      % 0)", "user": "5b0d3fa5e4b0cc2b61a3bdec"}, {"problem": 22, "code": "reduce (fn [_count , dummy] (inc _count)) 0,", "user": "5b7d1dc1e4b047b03b20373f"}, {"problem": 22, "code": "(fn [xs] (reduce (fn [cnt _] (inc cnt)) 0 xs))", "user": "5b754a5ae4b047b03b2036c8"}, {"problem": 22, "code": "(fn count-elements\n  [xs]\n  (if (empty? xs)\n    0\n   (+ 1\n      (count-elements (rest xs)))))", "user": "5b7e79f0e4b047b03b203759"}, {"problem": 22, "code": "(fn [s] (reduce (fn [cnt _] (inc cnt)) 0 s))", "user": "5b7ec039e4b047b03b20375d"}, {"problem": 22, "code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "59e10bdde4b08badc2a0c507"}, {"problem": 22, "code": "#(apply + (map (fn [x] 1) %))", "user": "5b7f2d75e4b047b03b203768"}, {"problem": 22, "code": "(fn getCount [arr]\n  (+\n   (if (nil? (second arr))\n     0\n     (getCount (rest arr))\n     )\n   1\n   )\n  )", "user": "5b7f381ae4b047b03b203769"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5b7c9524e4b047b03b203736"}, {"problem": 22, "code": "(fn [input-seq]\n  (loop [cnt 0 tmp-seq input-seq]\n    (if (empty? tmp-seq)\n      cnt\n      (recur (inc cnt) (rest tmp-seq)))))", "user": "5b8085b4e4b047b03b20377e"}, {"problem": 22, "code": "#(apply + (map (fn [x] 1) %))", "user": "5b81139fe4b047b03b203782"}, {"problem": 22, "code": "#(loop [xs % n 0]\n   (if (empty? xs)\n     n\n     (recur (rest xs) (inc n))))", "user": "5b7e2417e4b047b03b203755"}, {"problem": 22, "code": "#(reduce (fn [i d] (inc i)) 0 %)", "user": "5b820b9ae4b047b03b203797"}, {"problem": 22, "code": "reduce (fn [counter _] (inc counter)) 0", "user": "5b82eec6e4b047b03b2037a4"}, {"problem": 22, "code": "(fn [s]\n  (reduce (fn [c _] (inc c)) 0 s))", "user": "5b83c02de4b047b03b2037b6"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5b83c11ae4b047b03b2037b7"}, {"problem": 22, "code": "(fn countem \n  ([coll]\n    (if (empty? coll)\n      0\n      (countem (rest coll) 1)))\n   ([coll acc]\n    (if (empty? coll)\n      acc\n      (countem (rest coll) (+ 1 acc)))))", "user": "5b847d39e4b047b03b2037c1"}, {"problem": 22, "code": "(fn custom-count [args]\n      (reduce (fn some-increment [val column] (inc val)) 0 args))", "user": "5b7ed20fe4b047b03b203760"}, {"problem": 22, "code": "#(reduce (fn [acc _] (inc acc)) 0 %)", "user": "5b85221ce4b047b03b2037c8"}, {"problem": 22, "code": "#(alength (to-array %))", "user": "5b850908e4b047b03b2037c6"}, {"problem": 22, "code": "#(reduce (fn [cnt _] (inc cnt)) 0 %)", "user": "5a085dfde4b01bb0ae8afdf4"}, {"problem": 22, "code": "reduce (fn [cc _] (inc cc)) 0", "user": "5b5b59dae4b0c6492753e6b0"}, {"problem": 22, "code": "reduce (fn [acc x] (inc acc)) 0", "user": "5b871d8ae4b047b03b2037f4"}, {"problem": 22, "code": "#(reduce (fn [x _] (inc x)) 0 %)", "user": "51b1f2d4e4b02f8f128bb95f"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "5b855800e4b047b03b2037cd"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5b857411e4b047b03b2037ce"}, {"problem": 22, "code": "#(reduce (fn [a _] (+ 1 a)) 0 %)", "user": "5b885821e4b047b03b20380b"}, {"problem": 22, "code": "reduce (fn [a _] (inc a)) 0", "user": "56e9db9be4b04a395b9a03ff"}, {"problem": 22, "code": "(fn count-values\n   [args]\n   (if (empty? args)\n     0\n     (inc (count-values (rest args)))))", "user": "5b86462de4b047b03b2037df"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5b88f0c0e4b047b03b203816"}, {"problem": 22, "code": "#(reduce + (map (fn [x] '1) (seq %)))", "user": "5b8845dee4b047b03b203808"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5b86d548e4b047b03b2037ec"}, {"problem": 22, "code": "(fn [seq]\n  (reduce (fn [current acc]\n            (+ 1 current))\n           0 seq ))", "user": "58ac01f7e4b0005cfeb1a73b"}, {"problem": 22, "code": "(fn [col] (reduce (fn [ctr oneItem] (inc ctr)) 0 col))", "user": "5b8aa478e4b0c0b3ffbd49b2"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5b8aa82ee4b0c0b3ffbd49b3"}, {"problem": 22, "code": "(fn f\n  ([s] (f s 0))\n  ([s n] (if (= (first s) nil)\n           n\n           (f (rest s) (inc n))\n         )\n  )\n)", "user": "5b8b326de4b0c0b3ffbd49b8"}, {"problem": 22, "code": "(fn [myseq]\n  (reduce (fn [sum next-elem]\n            (inc sum))\n          0\n          myseq))", "user": "5b7ef8e6e4b047b03b203765"}, {"problem": 22, "code": ";#(count %)\n\n(fn [stuff] (reduce + (map (fn [e] 1) stuff)))", "user": "5b819312e4b047b03b20378d"}, {"problem": 22, "code": "(fn [l] (reduce + (map (fn [x] 1) l)))", "user": "5b8db323e4b0c0b3ffbd49da"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5b8d01d7e4b0c0b3ffbd49ca"}, {"problem": 22, "code": "(fn [l] (reduce + (map (fn [k] 1) l)))", "user": "5b8ec146e4b0c0b3ffbd49f0"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 % )", "user": "5b8d03e4e4b0c0b3ffbd49cb"}, {"problem": 22, "code": "#(reduce (fn [len _] (inc len)) 0 %)", "user": "5b8f0861e4b0c0b3ffbd49f4"}, {"problem": 22, "code": "(fn len [xs] (if (empty? xs) 0 (+ 1 (len (rest xs)))))", "user": "5731283ae4b0cd1946bd0fbe"}, {"problem": 22, "code": "(fn len\n  ([s] (len s 0))\n  ([s t] (if (empty? s) t (recur (rest s) (inc t)))))", "user": "578dc040e4b0ebec4cfb756d"}, {"problem": 22, "code": "#(reduce (fn [i _] (inc i)) 0 %)", "user": "5b91a343e4b0c0b3ffbd4a25"}, {"problem": 22, "code": "(fn [x] \n  (reduce + (map #(if true 1 %) x)))", "user": "5b9263ece4b0c0b3ffbd4a37"}, {"problem": 22, "code": "reduce (fn [n _] (inc n)) 0", "user": "5b924123e4b0c0b3ffbd4a34"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5b92f178e4b0c0b3ffbd4a41"}, {"problem": 22, "code": "(fn [coll]\n  (reduce (fn [acc y] (inc acc))\n          0\n          coll))", "user": "5b9357b7e4b0c0b3ffbd4a46"}, {"problem": 22, "code": "#(last (map-indexed (fn [i a] (inc i)) %))", "user": "5b919d9de4b0c0b3ffbd4a24"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5b9601e8e4b0c0b3ffbd4a70"}, {"problem": 22, "code": "(fn [coll]\n  (loop [result 0\n         remaining coll]\n    (if (empty? remaining)\n      result\n      (recur (inc result) (rest remaining)))))", "user": "5b90f433e4b0c0b3ffbd4a14"}, {"problem": 22, "code": "(fn [xs]\n  (loop [xs xs\n         result 0]\n    (if (empty? xs) result (recur (rest xs) (inc result)))))", "user": "5b96800ae4b0c0b3ffbd4a7b"}, {"problem": 22, "code": "(partial reduce (fn [acc v] (inc acc)) 0)", "user": "5a66fddee4b0512ff01cd9d7"}, {"problem": 22, "code": "(fn [coll]\n  (reduce (fn [acc, n] (inc acc)) 0 coll))", "user": "5b684a0de4b0c6492753e774"}, {"problem": 22, "code": "(fn [coleccion] (reduce (fn [x y] (inc x)) 0 coleccion))", "user": "599f7a7ee4b0871e7608b81e"}, {"problem": 22, "code": "(fn [coll] \n  (loop [remain coll acc 0] \n    (if (empty? remain)\n      acc\n      (recur (drop 1 remain) (inc acc))\n    )\n   )\n )", "user": "5b80a5cfe4b047b03b20377f"}, {"problem": 22, "code": "reduce (fn[c _] (inc c)) 0", "user": "5b97c521e4b0c0b3ffbd4a9a"}, {"problem": 22, "code": "(fn count-elements\n  ([col] (count-elements col 0))\n  ([col n] (if (empty? col) n (count-elements (rest col) (inc n)))))", "user": "5b966c66e4b0c0b3ffbd4a78"}, {"problem": 22, "code": "(fn [xs]\n  (loop [xs xs\n         n 0]\n    (if (empty? xs)\n      n\n      (recur (rest xs) (inc n)))))", "user": "5b96c1f3e4b0c0b3ffbd4a80"}, {"problem": 22, "code": "(fn me [s]\n  (if (empty? s)\n    0\n    (inc (me (rest s)))))", "user": "5b98489ae4b0c0b3ffbd4aab"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %1)", "user": "5b988c18e4b0c0b3ffbd4ab7"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5b97ea77e4b0c0b3ffbd4aa0"}, {"problem": 22, "code": "(fn -count [xs]\n  (loop [cnt 0 coll xs]\n    (if (empty? coll)\n      cnt\n      (recur (inc cnt) (rest coll)))))", "user": "5b98f7f3e4b0c0b3ffbd4ac2"}, {"problem": 22, "code": "(fn [xs] \n  (loop [lst xs res 0] \n    (if (empty? lst)\n      res\n      (recur (rest lst) (inc res)))))", "user": "55d5dc6de4b0e31453f64a90"}, {"problem": 22, "code": "#(loop [s % C 0] (if (= s []) C (recur (rest s) (inc C))))", "user": "5b999af8e4b0c0b3ffbd4ad3"}, {"problem": 22, "code": "(fn c-count\n                 ([s] (c-count s 0))\n                 ([s counter]\n                  (if (empty? s)\n                    counter\n                    (let [[head & tail] s]\n                      (println head)\n                      (c-count tail (inc counter))))))", "user": "5b90cf27e4b0c0b3ffbd4a10"}, {"problem": 22, "code": "reduce (fn[c _] (inc c)) 0", "user": "5b985983e4b0c0b3ffbd4aaf"}, {"problem": 22, "code": "(fn length [coll]\n  (if (empty? coll)\n    0\n    (inc (length (rest coll)))))", "user": "5b975c6ee4b0c0b3ffbd4a91"}, {"problem": 22, "code": "(fn cnt [a] (if (seq a) (+ 1 (cnt (rest a))) 0))", "user": "5b99a0a3e4b0c0b3ffbd4ad7"}, {"problem": 22, "code": "(fn [x]\n  (reduce + (map (fn [x1] 1) x)))", "user": "5b7f2185e4b047b03b203767"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5b985fe5e4b0c0b3ffbd4ab1"}, {"problem": 22, "code": "reduce (fn [sum c](inc sum )) 0", "user": "5b9c4a7be4b0c0b3ffbd4b16"}, {"problem": 22, "code": "(fn [lat]\n  (reduce (fn [x y] (+ x 1)) 0 lat))", "user": "5b94e4c6e4b0c0b3ffbd4a5b"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "5b9da7fbe4b0c0b3ffbd4b3f"}, {"problem": 22, "code": "reduce (fn [acc x] (inc acc)) 0", "user": "5b9db58be4b0c0b3ffbd4b41"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5b99b389e4b0c0b3ffbd4ad9"}, {"problem": 22, "code": "(fn count-els [s]\n  (loop [n 0\n         l s]\n    (if (empty? l)\n      n\n      (recur (+ n 1) (rest l)))))", "user": "5b9acb23e4b0c0b3ffbd4aef"}, {"problem": 22, "code": "#(.size (seq %))", "user": "5512980ce4b06e50f9beb1b3"}, {"problem": 22, "code": "(fn [seq]\n    (loop [counter 0 seqRest seq]\n      (if (empty? seqRest)\n        counter\n        (recur (inc counter) (rest seqRest))\n      )\n    )\n  )", "user": "5b98e5a7e4b0c0b3ffbd4abf"}, {"problem": 22, "code": "(fn mycount\n          ([vals] (mycount vals 0)) \n           ([vals accumulating-total]\n               (if (empty? vals)  \n                accumulating-total\n                (mycount (rest vals) (inc accumulating-total)))))", "user": "5b9d3913e4b0c0b3ffbd4b37"}, {"problem": 22, "code": "(fn length\n [list]\n (if (empty? list) 0\n  (+ 1 (length (rest list)))))", "user": "5b9ffd29e4b0c0b3ffbd4b7b"}, {"problem": 22, "code": "#(loop [coll %\n        i 0]\n   (if (nil? (first coll))\n     i\n     (recur (rest coll) (inc i))))", "user": "5ba15075e4b0a20761a2339e"}, {"problem": 22, "code": "(fn [x]\n  (loop [res 1\n         li x]\n    (if (seq (rest li))\n      (recur (inc res) (rest li))\n      res)))", "user": "5b5eb53be4b0c6492753e6dd"}, {"problem": 22, "code": "(fn [seq]\n  (reduce (fn [x _] (inc x)) 0 seq))", "user": "5a1f85ffe4b0ff51aa4b3284"}, {"problem": 22, "code": "#(loop [x 0 len %]\n    (if (empty? len) x\n    (recur (inc x) (rest len))))", "user": "5b98f174e4b0c0b3ffbd4ac1"}, {"problem": 22, "code": "(fn [seq] (reduce (fn [x y] (+ x 1)) 0 seq))", "user": "5ba27267e4b0a20761a233c2"}, {"problem": 22, "code": "(fn my-count [s]\n  (loop [s s\n         n 0]\n    (if (empty? s)\n      n\n      (recur (rest s) (inc n)))))", "user": "5b9cab3ae4b0c0b3ffbd4b25"}, {"problem": 22, "code": "reduce (fn [n _] (inc n)) 0", "user": "5b7d03a0e4b047b03b20373d"}, {"problem": 22, "code": "(fn [l] (reduce (fn [a v] (inc a)) 0 l))", "user": "5ba55d85e4b0a20761a233fa"}, {"problem": 22, "code": "(fn [coll]\n  (reduce (fn [acc _] (inc acc)) 0 coll))", "user": "5ba5802de4b0a20761a233fd"}, {"problem": 22, "code": "#(reduce (fn [x _] (inc x)) 0 %)", "user": "5ba5c5f5e4b0a20761a23403"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5ba0dcfce4b0c0b3ffbd4b98"}, {"problem": 22, "code": "(fn counti\n  ([sequence counter]\n   (if sequence\n     (counti (next sequence) (inc counter))\n     counter))\n  ([sequence] (counti sequence 0)))", "user": "5ba19969e4b0a20761a233a4"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5ba7838ae4b0a20761a2341b"}, {"problem": 22, "code": "(fn [s]\n  (reduce (fn [i s] (inc i)) 0 s))", "user": "5af3aa42e4b0cc2b61a3bc8c"}, {"problem": 22, "code": "(fn [x] (reduce (fn [y _] (+ 1 y)) 0 x))", "user": "5b5d044be4b0c6492753e6c6"}, {"problem": 22, "code": "(fn [seq]\n  (reduce (fn [acc i] (+ acc 1)) 0 seq))", "user": "5ba24b59e4b0a20761a233bf"}, {"problem": 22, "code": "#(reduce\n  (fn [c _] (inc c))\n  0 %)", "user": "5ba8e5c6e4b0a20761a23436"}, {"problem": 22, "code": "#(reduce (fn [vals curr] (inc vals)) 0 %)", "user": "5baa5f53e4b0a20761a23459"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5baa7abce4b0a20761a2345d"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5baa7c7be4b0a20761a2345e"}, {"problem": 22, "code": "#(loop [s %1\n        c 0]\n   (if (empty? s)\n     c\n     (recur (rest s) (inc c))))", "user": "5bab5440e4b0a20761a23475"}, {"problem": 22, "code": "#(loop [i 0, s %] (if-not s i (recur (inc i), (next s))))", "user": "5ba47e47e4b0a20761a233ea"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5b52e311e4b02d533a91bd12"}, {"problem": 22, "code": "(fn [coll]\n  (loop [coll coll\n         \t acc 0]\n    (if (not-empty coll)\n      (recur (rest coll) (inc acc))\n      acc)))", "user": "5bab49bbe4b0a20761a23474"}, {"problem": 22, "code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "5bab93d5e4b0a20761a2347f"}, {"problem": 22, "code": "#(+ (.lastIndexOf (vec %)(last (vec %))) 1)", "user": "5baaa1bae4b0a20761a23463"}, {"problem": 22, "code": "#(alength (into-array %))", "user": "5ba54642e4b0a20761a233f8"}, {"problem": 22, "code": "(fn [xs]\n\t(loop [counter 0\n           arr xs]\n    (if (empty? arr)\n      counter\n      (recur (inc counter) (rest arr)))))", "user": "5bab8c06e4b0a20761a2347e"}, {"problem": 22, "code": "#(reduce (fn [acc _] (inc acc))\n          0\n          %)", "user": "5bacfa46e4b0a20761a234a2"}, {"problem": 22, "code": "(fn cnt [coll] (if (empty? coll) 0 (inc (cnt (rest coll)))))", "user": "5bad07eee4b0a20761a234a4"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "59deedace4b01968742fed84"}, {"problem": 22, "code": "#(reduce + 0 (map (constantly 1) %))", "user": "5ba3fa58e4b0a20761a233de"}, {"problem": 22, "code": "#(alength (to-array %))", "user": "5bab968fe4b0a20761a23481"}, {"problem": 22, "code": "(fn [xs] (inc (last (interleave xs (range)))))", "user": "57c647bbe4b05aa3c4741cf3"}, {"problem": 22, "code": "(fn f\n  ([xs length] \n    (if (first xs)\n      (f (rest xs) (inc length))\n      length))\n  ([xs] (f xs 0)))", "user": "5ba7dac4e4b0a20761a23422"}, {"problem": 22, "code": "reduce (fn [a b] (+ 1 a)) 0", "user": "5bafd5c8e4b0a20761a234dd"}, {"problem": 22, "code": "(fn\n  [col]\n  (loop [remaining col iterator 0]\n    (if (empty? remaining)\n      iterator\n      (recur (rest remaining)\n             (inc iterator)))))", "user": "5bb0fc08e4b0a20761a234f3"}, {"problem": 22, "code": "(fn num-elements\n  ([xs current-count]\n   (if (= [] xs)\n     current-count\n     (num-elements (rest xs) (inc current-count))))\n  ([xs]\n   (num-elements xs 0)))", "user": "5bb17123e4b0a20761a234fd"}, {"problem": 22, "code": "(fn\n  [to-count]\n  (reduce (fn [current next] (inc current)) 0 to-count))", "user": "5b759ca8e4b047b03b2036d0"}, {"problem": 22, "code": "(fn [x]\n  (loop [m x\n         c 0]\n    (if (empty? m)\n      c\n      (recur (rest m) (inc c)))))", "user": "5baa1b58e4b0a20761a2344e"}, {"problem": 22, "code": "#(loop [n % i 0]\n   (let [j (first n) k (next n) l (inc i)]\n     (if (nil? j)\n       i\n       (recur k l)\n     )\n   )\n )", "user": "5bb23cf1e4b0a20761a2350a"}, {"problem": 22, "code": "(fn [coll] (apply + (map (fn [i] 1) coll)))", "user": "5a3e6642e4b0447ef91cc5b3"}, {"problem": 22, "code": "#(reduce (fn [x y] (+ x 1)) 0 %)", "user": "5b329773e4b025bcb146f322"}, {"problem": 22, "code": "(fn myC [lista]\n  (if (= (rest lista) '())\n      1\n      (+ 1 (myC (rest lista)))))", "user": "5ba6d337e4b0a20761a23414"}, {"problem": 22, "code": "#(reduce + (map (fn [coll] + 1) %))", "user": "5baaf8fee4b0a20761a2346c"}, {"problem": 22, "code": "(partial reduce (fn [i _] (inc i)) 0)", "user": "5bb46f84e4b0a20761a23549"}, {"problem": 22, "code": "#(reduce (fn [c _] (+ c 1)) 0 %)", "user": "5bb4b291e4b0a20761a23551"}, {"problem": 22, "code": "(fn my-count\n  ([lst] (my-count lst 0))\n  ([lst n]\n   (if (empty? lst)\n     n\n     (my-count (rest lst) (+ n 1)))))", "user": "5bb6166fe4b0a20761a23579"}, {"problem": 22, "code": "(fn [collection](reduce + (vals(frequencies collection))))", "user": "5a6dbaf5e4b0512ff01cda63"}, {"problem": 22, "code": "(fn [x] \n  (reduce + \n          (map (fn [y] 1) x)))", "user": "5bb7dd12e4b0a20761a235b2"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "59137b42e4b0163c97b36f04"}, {"problem": 22, "code": "(fn [coll]\n  (->> coll\n    (map (fn [x] 1))\n    (reduce +)))", "user": "5bb7c9e3e4b0a20761a235b0"}, {"problem": 22, "code": "#(let [get-res\n       (fn [lst n]\n         (if (empty? lst)\n           n\n           (recur\n            (next lst)\n            (inc n))))] \n   (get-res % 0))", "user": "5bb905dce4b0a20761a235c7"}, {"problem": 22, "code": "reduce(fn[c _](inc c))0", "user": "5bb9375fe4b0a20761a235d0"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "5bb7b956e4b0a20761a235ad"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5bb6f929e4b0a20761a23594"}, {"problem": 22, "code": "(fn [coll]\n  (loop [c coll\n         ct 0]\n    (if (empty? c)\n      ct\n      (recur (rest c) (inc ct)))))", "user": "5ad4c3d2e4b0ea6055cfabe1"}, {"problem": 22, "code": "(fn [lst] (reduce (fn [a b] (inc a)) 0 lst))", "user": "5bbbce0ee4b0a20761a2360d"}, {"problem": 22, "code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "5bbbce70e4b0a20761a2360f"}, {"problem": 22, "code": "(fn count-sequence\n  [lst]\n  (loop [lst lst\n         i 0\n         ]\n    (if (= (first lst) nil) i\n      (recur (rest lst) (inc i) ))))", "user": "5bbbd077e4b0a20761a23615"}, {"problem": 22, "code": "(fn x [lst]\n  (loop [lst lst\n        n 0]\n  (if (= (first lst) nil) n\n                          (recur (rest lst) (inc n)))))", "user": "5bbbcecee4b0a20761a23611"}, {"problem": 22, "code": "#(+ 1(first (last (map-indexed list %))))", "user": "5bbbba29e4b0a20761a23609"}, {"problem": 22, "code": "(fn cnt [s] (if (empty? s) 0    (+ 1  (cnt (rest s)))))", "user": "5b8856e8e4b047b03b20380a"}, {"problem": 22, "code": "reduce (fn [a _] (inc a)) 0", "user": "5b6dde85e4b0c6492753e7ca"}, {"problem": 22, "code": "#(reduce (fn [n l] (inc n)) 0 %)", "user": "5bbc0ddfe4b0a20761a2361e"}, {"problem": 22, "code": "(fn [s & c]\n  (if (= s [])\n\tc\n    (recur (rest s) ( if (= c nil) 1 (+ c 1) ) )\n  )\n)", "user": "5bbd13a5e4b07a9b28b0ff95"}, {"problem": 22, "code": "(fn [s] (reduce (fn [c _] (inc c)) 0 s))", "user": "5a68f374e4b0512ff01cda05"}, {"problem": 22, "code": "#(reduce + 0 (map (fn [x] 1) %))", "user": "5bbcc747e4b0a20761a23634"}, {"problem": 22, "code": "#(reduce (fn [x y] (+ x 1)) 0 %)", "user": "5bbe3a5ae4b07a9b28b0ffb9"}, {"problem": 22, "code": "#(loop [acc 0 coll %]\n(if (empty? coll) acc\n  (recur (+ acc 1) (rest coll))))", "user": "5bbcb71ce4b0a20761a23629"}, {"problem": 22, "code": "(fn [collection]\n    (loop [coll collection\n           num 0]\n      (let [s (seq coll)]\n        (if s (recur (rest s) (inc num)) num))))", "user": "5bb25684e4b0a20761a2350d"}, {"problem": 22, "code": "reduce (fn [i o]\n          (if (nil? i)\n            o\n            (+ i 1)))\n0", "user": "5bb948f5e4b0a20761a235d5"}, {"problem": 22, "code": "(fn count-elements\n  [lst]\n  (loop [cnt 0\n         lst lst]\n    (if (empty? lst)\n      cnt\n      (recur (inc cnt) (rest lst)))))", "user": "5bbbcf9ee4b0a20761a23614"}, {"problem": 22, "code": "reduce (fn [a _] (inc a)) 0", "user": "5bb919e1e4b0a20761a235ca"}, {"problem": 22, "code": "(fn coun [things] (reduce (fn [c _] (inc c)) 0 things))", "user": "587fb546e4b0f1effa3b75f9"}, {"problem": 22, "code": "(fn countNumElements\n  ([theList] (countNumElements theList 0))\n  ([theList numElements]\n  \t(loop [[item & theRest] theList\n            numElements numElements]\n           (if (= theRest nil)\n               (+ numElements 1)\n               (recur theRest (+ numElements 1))))))", "user": "599e3677e4b0871e7608b809"}, {"problem": 22, "code": "(fn c [col]\n  (reduce (fn [x y] (inc x)) 0 col))", "user": "5bc0eca4e4b07a9b28b1000b"}, {"problem": 22, "code": "(fn [x] (reduce #(do %& (+ %1 1)) 0  x) )", "user": "5bbbd484e4b0a20761a23617"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5bc255b7e4b07a9b28b10029"}, {"problem": 22, "code": "#(reduce (fn [i _] (inc i)) 0 %)", "user": "5bc15685e4b07a9b28b10016"}, {"problem": 22, "code": "#(loop [col %1, len 0] \n   (if (= (first col) nil) len\n     (recur (rest col) (inc len))))", "user": "5bc09791e4b07a9b28b10003"}, {"problem": 22, "code": "#(loop [i 0 s %] (if (empty? s) i (recur (inc i) (rest s))))", "user": "5bb5cd43e4b0a20761a23575"}, {"problem": 22, "code": "(fn [xs] ((fn cnt [ys i] (if (empty? ys) i (cnt (rest ys) (inc i)))) xs 0))", "user": "5bc20634e4b07a9b28b10022"}, {"problem": 22, "code": "(partial reduce (fn [i _] (inc i)) 0)", "user": "5bc39d2be4b07a9b28b10045"}, {"problem": 22, "code": "#( (fn rec [tab counter] (if (nil? (first tab)) counter (rec (rest tab) (+ counter 1))  )) % 0  )", "user": "5bae9475e4b0a20761a234c6"}, {"problem": 22, "code": "(fn ctr [x] \n  (loop [seq x\n         cnt 0]\n      (if (empty? seq)\n        cnt\n        (recur (rest seq) (inc cnt)))))", "user": "520e46cee4b066f3ea161c97"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5bc2df19e4b07a9b28b10038"}, {"problem": 22, "code": "(fn [all-xs] \n   (loop [xs-left all-xs\n          n 0]\n     (println n xs-left)\n     (if (empty? xs-left)\n       n\n       (recur (rest xs-left) (inc n)))\n     ))", "user": "5bb3c9a8e4b0a20761a2352f"}, {"problem": 22, "code": "#(reduce (fn [acc el] (+ acc 1)) 0 %)", "user": "5bc488bde4b07a9b28b10053"}, {"problem": 22, "code": "(fn my-count [list]\n  \"Counts elements in a list\"\n  (if (empty? list)\n    0\n    (inc (my-count (rest list))))\n  )", "user": "5bc50870e4b07a9b28b10069"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "57d82162e4b0bd073c2023e5"}, {"problem": 22, "code": "(fn [a] (reduce (fn [x y](+ 1 x)) 0 a))", "user": "5bc63072e4b07a9b28b10089"}, {"problem": 22, "code": "(fn [xs]\n  (loop [cnt 0 xs xs]\n    (if (empty? xs) cnt (recur (inc cnt)(rest xs)))))", "user": "5bc664a2e4b07a9b28b10093"}, {"problem": 22, "code": "(fn [c] (loop [pc c cnt 0] (if (empty? pc) cnt (recur (rest pc) (inc cnt)))))", "user": "5b8f77a8e4b0c0b3ffbd49fa"}, {"problem": 22, "code": "(fn [input-list]\n\t(loop [lista input-list contador 0]\n\t\t(if (nil? (first lista))\n\t\t\tcontador\n\t\t\t(recur (rest lista) (inc contador)))))", "user": "5bc64843e4b07a9b28b10091"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5bc7ba68e4b07a9b28b100b0"}, {"problem": 22, "code": "(fn [coll]\n  (reduce (fn [a b] (inc a)) 0 coll))", "user": "5bc7f2d6e4b07a9b28b100b7"}, {"problem": 22, "code": "(fn [lst] (loop [lst lst c 0] (if (empty? lst) c (recur (rest lst) (inc c)))))", "user": "5bc8c033e4b07a9b28b100ca"}, {"problem": 22, "code": "(fn cnt [coll]\n  (loop [xs coll i 0]\n    (if (seq xs)\n      (recur (next xs) (inc i))\n      i)))", "user": "5bc833a5e4b07a9b28b100bb"}, {"problem": 22, "code": "(fn my-count [lst]\n  (loop [lst lst\n         i 0]\n    (if (empty? lst)\n      i\n      (recur (rest lst) (inc i)))))", "user": "5bbbce60e4b0a20761a2360e"}, {"problem": 22, "code": "(fn [coll]\n  (loop [n 0\n         coll coll]\n  \t(if (empty? coll)\n    \tn\n    \t(recur (inc n) (rest coll)))))", "user": "5bc8e91ee4b07a9b28b100ce"}, {"problem": 22, "code": "(fn [coll] (reduce (fn [x y] (+ x 1)) 0 coll))", "user": "5bc28638e4b07a9b28b10033"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5bc7c3aee4b07a9b28b100b2"}, {"problem": 22, "code": "(fn [lst] \n  (loop[lista lst res 0] \n    (if(empty? lista)\n      res\n      (recur (rest lista) (inc res)))))", "user": "5bbbcf81e4b0a20761a23613"}, {"problem": 22, "code": "(fn count* [coll]\n  (if (seq coll)\n    (+ 1 (count* (rest coll)))\n    0))", "user": "59d8f23ae4b0ef0a1e9b5c49"}, {"problem": 22, "code": "(fn [s] (reduce (fn [l r] (+ l 1)) 0 s))", "user": "5bc935bde4b07a9b28b100d8"}, {"problem": 22, "code": "(fn [seq] (reduce + (map (constantly 1) (vec seq))))", "user": "5bc352abe4b07a9b28b10041"}, {"problem": 22, "code": "(fn [s] (reduce (fn [acc x] (inc acc)) 0 (seq s)))", "user": "59a0286be4b0871e7608b82f"}, {"problem": 22, "code": "#(reduce (fn [partial val] (inc partial)) 0 %)", "user": "5bc6ef7ce4b07a9b28b1009f"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5bc611e3e4b07a9b28b10083"}, {"problem": 22, "code": "(fn c [s]\n  (loop [s s\n         n 0]\n    (if (empty? s)\n      n\n      (recur (rest s) (inc n)))))", "user": "5bc09ebae4b07a9b28b10005"}, {"problem": 22, "code": "#(reduce + (map (constantly 1)%))", "user": "5bbbce99e4b0a20761a23610"}, {"problem": 22, "code": "(fn cnt [x] (if (empty? x) 0 (+ 1 (cnt (rest x)))))", "user": "5bca2c71e4b07a9b28b100e7"}, {"problem": 22, "code": "(fn [col]\n  (->> col\n     (map (fn [_] 1))\n     (reduce +)))", "user": "5b94c507e4b0c0b3ffbd4a5a"}, {"problem": 22, "code": "(fn [lat] (reduce (fn [x y] (+ x 1)) 0 lat))", "user": "5bcad61fe4b07a9b28b100f6"}, {"problem": 22, "code": "(fn [lst]\n  (loop [i 0\n         lst lst]\n    (if (empty? lst)\n      i\n      (recur \n       (inc i)\n       (rest lst)))))", "user": "5bcb672ee4b07a9b28b10100"}, {"problem": 22, "code": "(fn [s] (reduce (fn [acc _] (+ acc 1)) 0 s))", "user": "52a9c2efe4b0c58976d9ac50"}, {"problem": 22, "code": "(fn [c]\n  (loop [n 1\n         c (seq c)]\n   (if (empty? (rest c))\n     n\n     (recur (inc n)\n            (next\n            c)))))", "user": "5b211e82e4b03cfeda66ed4a"}, {"problem": 22, "code": "(let [one (fn [& _] 1)]\n  (fn \n [x] \n  (reduce + 0 (map one  x))\n   )\n  )", "user": "5bc8afb9e4b07a9b28b100c9"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5bbbcf3ae4b0a20761a23612"}, {"problem": 22, "code": "#(-> (map-indexed (fn [idx item] idx) %) last inc)", "user": "577caf73e4b0c8d87281f6c6"}, {"problem": 22, "code": "(fn f [xs]\n  (if (empty? xs)\n    0\n    (+ 1 (f (rest xs)))))", "user": "5bcddaeee4b0e9689409ee07"}, {"problem": 22, "code": "(fn my-count [l]\n  (loop [lol l\n         acc 0]\n    (if (empty? lol)\n      acc\n      (recur (rest lol) (inc acc)))))", "user": "5b673832e4b0c6492753e760"}, {"problem": 22, "code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "5bca3883e4b07a9b28b100eb"}, {"problem": 22, "code": "(fn [s] \n  (loop [n 1 \n         ls s]\n    (if (= [] (rest ls))\n      n\n      (recur (inc n) (rest ls)))))", "user": "5bce439fe4b0e9689409ee17"}, {"problem": 22, "code": "(fn count-a-seq\n  ([a-seq]\n   (count-a-seq a-seq 0))\n  ([a-seq val]\n   (if (empty? a-seq)\n     val\n     (count-a-seq (rest a-seq) (inc val)))))", "user": "5bc4f266e4b07a9b28b10066"}, {"problem": 22, "code": "#(loop [remain % iteration 1]\n   (let [[curVal & tail] remain]\n     (if (empty? tail)\n     \titeration\n     (recur tail (inc iteration)))))", "user": "5bcd3c4de4b0e9689409edfa"}, {"problem": 22, "code": "#(inc (last (map-indexed (fn [idx itm] idx) %)))", "user": "5bcdbfbde4b0e9689409ee04"}, {"problem": 22, "code": "#(alength (to-array %))", "user": "5bcd9a86e4b0e9689409edfe"}, {"problem": 22, "code": "(fn countElem [r]\n(loop [r r n 0]\n  (if(empty? r)\n    n\n    (recur(rest r)(inc n)))))", "user": "5bd06861e4b0e9689409ee3a"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5bcf0b1be4b0e9689409ee24"}, {"problem": 22, "code": "(fn length [x] \n  (if (not-empty x)\n    (inc (length (rest x)))\n    0\n  )\n)", "user": "5bd0ea60e4b0e9689409ee45"}, {"problem": 22, "code": "(fn [xs]\n\t(reduce (fn [x _] (inc x)) 0 xs)  \n)", "user": "5bd1364de4b0e9689409ee4b"}, {"problem": 22, "code": "#(reduce (fn [a b] (inc a)) 0 %)", "user": "5a8aa992e4b05369db4d24d8"}, {"problem": 22, "code": "#(loop [cnt 0, lst %]\n\t(if (nil? lst)\n\t\tcnt\n      \t(recur (inc cnt) (next lst)\n)))", "user": "5bd1b23ae4b0e9689409ee52"}, {"problem": 22, "code": "reduce (fn [n _] (inc n)) 0", "user": "5a64ce4ee4b0512ff01cd9a6"}, {"problem": 22, "code": "(partial reduce (fn[c _]  (inc c) ) 0 )", "user": "554f817ce4b00713264bd9a2"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5bd5a8f3e4b0ed4b8aab4b9d"}, {"problem": 22, "code": "(fn count-seq [s]\n  (if\n    (empty? s)\n    0\n    (+ (count-seq (rest s)) 1)))", "user": "5bd52eabe4b0ed4b8aab4b97"}, {"problem": 22, "code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "5bd0cdd4e4b0e9689409ee43"}, {"problem": 22, "code": "#(alength (to-array %))", "user": "5bd5ede3e4b0ed4b8aab4ba3"}, {"problem": 22, "code": "#(loop [x %\n        i 0]\n   (if (empty? x)\n     i\n   (recur (rest x) (inc i))))", "user": "5bd648d9e4b0ed4b8aab4ba5"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5bd7cddee4b0ed4b8aab4bc9"}, {"problem": 22, "code": "(fn [x]\n  (if (string? x)\n    (.length x)\n    (.size x)))", "user": "5bd7b8b8e4b0ed4b8aab4bc6"}, {"problem": 22, "code": "(fn count-arr\n    [array]\n    (reduce (fn [x y] (+ x 1)) 0 array)\n    )", "user": "5bd71aefe4b0ed4b8aab4bb5"}, {"problem": 22, "code": "(fn cou [x]\n  (reduce + (map (constantly 1) x)))", "user": "5bd6e161e4b0ed4b8aab4baf"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5bd9549ee4b0ed4b8aab4bf0"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5bd999cce4b0ed4b8aab4bf4"}, {"problem": 22, "code": "(fn [coll] (loop [c coll\n                  total 0]\n             (if (empty? c)\n               total\n               (recur (rest c) (inc total)))))", "user": "5bd1fd6be4b0e9689409ee54"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5bba703fe4b0a20761a235eb"}, {"problem": 22, "code": "(fn [l]\n  (loop [li l\n         n 0]\n    (if (empty? li)\n      n\n      (recur (rest li) (inc n)))))", "user": "5bd93897e4b0ed4b8aab4bee"}, {"problem": 22, "code": "(fn [s] (loop [s s c 0] \n          (if (empty? s)\n            c\n            (recur (rest s) (inc c)))))", "user": "4f9bb96ae4b0dcca54ed6d18"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5b5785c7e4b02d533a91bd5b"}, {"problem": 22, "code": "(fn [coll] (reduce + (map (constantly 1) coll)))", "user": "5bbdd136e4b07a9b28b0ffab"}, {"problem": 22, "code": "#((fn [col cnt]\n(if (empty? col) cnt \n(recur (rest col) (inc cnt)))\n\n) % 0)", "user": "51545663e4b084ca81ee2e18"}, {"problem": 22, "code": "(fn\n  [seq]\n  (last\n    (map\n      (fn \n        [i _]\n          (inc i)\n      )\n      (range)\n      seq\n    )\n  )\n)", "user": "5bdb0b4ce4b0ed4b8aab4c10"}, {"problem": 22, "code": "reduce (fn [num cur] (inc num)) 0", "user": "5bdb82d8e4b0ed4b8aab4c1d"}, {"problem": 22, "code": "reduce (fn [num extra] (inc num)) 0", "user": "5bcc2d7ee4b07a9b28b1010b"}, {"problem": 22, "code": "(fn c[vs] \n\t(if (empty? vs) 0 (inc (c (rest vs)))))", "user": "5ba75fdfe4b0a20761a23419"}, {"problem": 22, "code": "(fn [x & y]\n  (let [c (or y 0)]\n    (if (empty? x)\n      c\n      (recur (rest x) (inc c))))\n  )", "user": "5be0306be4b0ed4b8aab4c7d"}, {"problem": 22, "code": "#(reduce + (map (fn [_] 1) %) )", "user": "5be106b9e4b0ed4b8aab4c95"}, {"problem": 22, "code": "(fn [x] (loop [x x n 0] (if (empty? x) n (recur (rest x) (inc n)))))", "user": "5bdf651ee4b0ed4b8aab4c6d"}, {"problem": 22, "code": "(\n                         fn [l]\n                         (loop [ll l acc 0] (if (= '() ll) acc (recur (rest ll) (inc acc))))\n                         )", "user": "5be05ea7e4b0ed4b8aab4c83"}, {"problem": 22, "code": "(fn [lst]\n  (loop [i lst cnt 0]\n   (cond (empty? i) cnt\n     :t (recur (rest i)(inc cnt)))))", "user": "5be15f4de4b0ed4b8aab4c9b"}, {"problem": 22, "code": "(fn [x] (reduce + 0 (map (constantly 1) x)))", "user": "5be22881e4b0ed4b8aab4cb2"}, {"problem": 22, "code": "(fn __ [x] (reduce (fn [acc e] (inc acc)) 0 x))", "user": "5be2e670e4b0ed4b8aab4ccc"}, {"problem": 22, "code": "#(loop [res 0, sq %]\n   (if (empty? sq) res\n     (recur (inc res) (rest sq))))", "user": "5be33a16e4b0ed4b8aab4cd6"}, {"problem": 22, "code": "(fn co [s] (if (empty? s) 0 (+ (co (rest s)) 1) ))", "user": "5be182eae4b0ed4b8aab4c9d"}, {"problem": 22, "code": "(fn [s]\n  (loop [depth 0 remaining s]\n    (if (first remaining)\n      (recur (inc depth) (rest remaining))\n      depth)))", "user": "5ba167bfe4b0a20761a233a0"}, {"problem": 22, "code": "(fn elemCount [sequ] (if (= sequ []) 0 (+ 1 (elemCount (drop 1 sequ)) )))", "user": "5be2e5b2e4b0ed4b8aab4ccb"}, {"problem": 22, "code": "(fn [xs]\n  (letfn [(helper [ys counter]\n    (if (empty? ys)\n      counter\n      (recur (rest ys) (inc counter))))]\n    (helper (seq xs) 0)))", "user": "5be58beae4b0ed4b8aab4d14"}, {"problem": 22, "code": "(fn [x]\n    (apply max (map second\n                    (map vector\n                         x\n                         (map inc\n                              (range))))))", "user": "5be5cebde4b0ed4b8aab4d19"}, {"problem": 22, "code": "#(reduce (fn [n _] (inc n)) 0 %)", "user": "5b60e88be4b0c6492753e70b"}, {"problem": 22, "code": "(fn [xs] (loop [c 0](if (= nil (nth xs c nil)) c (recur (inc c)))))", "user": "5b9bfe0be4b0c0b3ffbd4b10"}, {"problem": 22, "code": "(partial reduce (fn [x y] (inc x)) 0)", "user": "5be6d0f8e4b0f319e2d7ec51"}, {"problem": 22, "code": "(fn [coll] (reduce + (map (constantly 1) coll)))", "user": "5be580cfe4b0ed4b8aab4d12"}, {"problem": 22, "code": "(fn elem [x]\r\n(loop [s     x\r\n       i     0]\r\n  (if (= s [])\r\n    i\r\n    (recur (rest s)\r\n           (inc i))))\r\n)", "user": "5be1fde4e4b0ed4b8aab4cab"}, {"problem": 22, "code": "(fn\n  [col]\n  (loop [auxCol col  j 0]\n    (let [i (first auxCol)]\n      (if (nil? i)\n        j\n        (recur (rest auxCol) (inc j))))))", "user": "5be589f9e4b0ed4b8aab4d13"}, {"problem": 22, "code": "(fn coaunt[clo]\n  (loop [x clo i 0]\n    (if (not-empty x)\n      (recur (rest x)(inc i))\n      i)))", "user": "5be79b5be4b0f319e2d7ec5a"}, {"problem": 22, "code": "(fn [x] (reduce + (map (fn [y] (+ 1)) x)))", "user": "5be8bc2de4b0f319e2d7ec66"}, {"problem": 22, "code": "reduce (fn [acc x] (inc acc)) 0", "user": "5be909bae4b0f319e2d7ec6d"}, {"problem": 22, "code": "(fn [seq_] (\n         loop [x 0 map_thing seq_] (\n                     if (= (first map_thing) nil)\n                                    x\n                                    (recur (inc x) (rest map_thing)))))", "user": "5bd9eac4e4b0ed4b8aab4bfc"}, {"problem": 22, "code": "#(reduce (fn[x y] (inc x)) 0 %)", "user": "5be46165e4b0ed4b8aab4cfd"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5be70bd5e4b0f319e2d7ec53"}, {"problem": 22, "code": "(fn counter\n  ([s]\n    (let [y (rest s)]\n    (cond \n      (empty? y) 1 \n      :else (counter y 1))))\n  ([s i]\n  (let [y (rest s)]\n    (cond\n      (empty? y) (inc i) \n      :else (recur y (inc i))))))", "user": "5bc232b7e4b07a9b28b10026"}, {"problem": 22, "code": "#(reduce (fn [c _]\n                 (inc c)) 0 %)", "user": "5be96111e4b0f319e2d7ec70"}, {"problem": 22, "code": "(fn [s] \n  (reduce (fn [sum _] \n            (inc sum))\n          0\n          s))", "user": "5beda934e4b0a6d31fed2123"}, {"problem": 22, "code": "(fn cnt [s]\n  (if (empty? s)\n    0\n    (+ 1 (cnt (rest s)))))", "user": "59d3549ce4b0ef0a1e9b5bb2"}, {"problem": 22, "code": "reduce (fn [a i] (inc a)) 0", "user": "5bece6a5e4b0a6d31fed2114"}, {"problem": 22, "code": "#(loop [counter 0, coll %1]\n  (if (empty? coll) \n    counter\n    (recur (inc counter) (rest coll))))", "user": "5be3025ee4b0ed4b8aab4cd1"}, {"problem": 22, "code": "(fn amount [seqe] (if (empty? (rest seqe)) 1 (+ (amount (rest seqe)) 1)))", "user": "5beeb182e4b0a6d31fed212f"}, {"problem": 22, "code": "reduce (fn [cc _] (inc cc)) 0", "user": "5bed84b1e4b0a6d31fed2120"}, {"problem": 22, "code": "(fn [x] \n  (loop [total 0, x x]\n  \t(if(seq x)\n    \t(recur (inc total)(rest x))\n    \ttotal)))", "user": "5be9ee04e4b0f319e2d7ec7b"}, {"problem": 22, "code": "(fn [x] \n  ((fn ccc [a b] \n    (if \n      (= (rest a) '())\n      (+ b 1)\n      (ccc (rest a) (+ b 1))\n     )\n   ) x 0)\n )", "user": "5b4b58f2e4b02d533a91bc9c"}, {"problem": 22, "code": "reduce (fn [x y] (inc x)) 0", "user": "5bef02ede4b0a6d31fed2138"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "5bf0aefde4b0a6d31fed215a"}, {"problem": 22, "code": "#(loop [x % i 0]\n    (if (empty? x)\n     \ti\n    \t(recur (rest x) (inc i))\n    )\n   )", "user": "5bf0b940e4b0a6d31fed215c"}, {"problem": 22, "code": "(fn jcount [xs]\n  (if (nil? xs)\n   0\n   (+ 1 (jcount (next xs)))))", "user": "5bea3177e4b0f319e2d7ec81"}, {"problem": 22, "code": "(fn count-seq \n  ([els] (count-seq els 0))\n  ([els n]\n  (if (empty? els) \n    n\n    (recur (rest els) (inc n)))))", "user": "5be9ad9be4b0f319e2d7ec76"}, {"problem": 22, "code": "(fn [sq]\n  (reduce (fn [acc sq] (inc acc)) 0 sq))", "user": "5bec37e2e4b0f319e2d7ec96"}, {"problem": 22, "code": ";(fn [x] (reduce (fn [x y] (inc x)) 0 x))\n\nreduce (fn [cc _] (inc cc)) 0", "user": "5bf313e8e4b0a6d31fed2188"}, {"problem": 22, "code": "(fn count-n ([l] (count-n l 0))\n  \t([l n] (if (empty? l) n (count-n (rest l) (inc n)))))", "user": "5bf30feae4b0a6d31fed2186"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5be744dae4b0f319e2d7ec57"}, {"problem": 22, "code": "(fn countx [arr] \n  (let [restArr (rest arr)]\n    (if (= nil (seq restArr))\n      1\n      (+ 1 (countx restArr))\n    )\n  )\n)", "user": "5bf2cf8be4b0a6d31fed217c"}, {"problem": 22, "code": "reduce (fn [size _] (inc size)) 0", "user": "5bf45b4ce4b0b326c961d88c"}, {"problem": 22, "code": "(fn [coll] (reduce (fn [acc, _] (+ acc 1)) 0 coll))", "user": "4eb9d8e0535dfed6da9c6d60"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5a42dbabe4b0447ef91cc5fc"}, {"problem": 22, "code": "#(reduce  + (map (fn [x] (identity 1)) %))", "user": "5aca79a7e4b0e27600da77e4"}, {"problem": 22, "code": "(fn [x]\n  ((fn [x c]\n    (if (not (first x))\n      c\n      (recur (rest x) (inc c))))\n  x 0))", "user": "5b15ab32e4b0cc2b61a3be72"}, {"problem": 22, "code": "reduce (fn [x y] (+ x 1)) 0", "user": "5beb8e28e4b0f319e2d7ec8e"}, {"problem": 22, "code": "(fn [some-sequence]\n  (loop [x some-sequence\n         n 0]\n    (if (empty? x)\n      n\n      (recur (rest x) (+ n 1)))))", "user": "5bf5ddfde4b0bdcf453d159e"}, {"problem": 22, "code": "(fn new-count\n  ([coll]\n    (if (empty? coll)\n      0\n      (new-count (rest coll) 1)))\n  ([coll k]\n    (if (empty? coll)\n      k\n      (recur (rest coll) (inc k)))))", "user": "595e6c76e4b066ee0a44b043"}, {"problem": 22, "code": "#(loop [l % n 0] (if (empty? l) n (recur (rest l) (+ n 1))))", "user": "5bf73dc4e4b0bdcf453d15aa"}, {"problem": 22, "code": "(fn [s] (reduce (fn [n s] (inc n )) 0 s ))", "user": "5be9d530e4b0f319e2d7ec79"}, {"problem": 22, "code": "#(alength (to-array %))", "user": "5bf06734e4b0a6d31fed2153"}, {"problem": 22, "code": "#(loop [[a & l] % i 1]\n   (if (= (first l) nil)\n     i\n     (recur l (+ i 1))))", "user": "5bf4cd67e4b0b326c961d89c"}, {"problem": 22, "code": "(fn [x]\n  (loop [x x\n         cnt 0]\n    (if (= () x)\n      cnt\n      (recur (rest x) (inc cnt)))))", "user": "5bf872e0e4b0bdcf453d15b7"}, {"problem": 22, "code": "(fn cnt [sq]\n  (if (empty? sq)\n    0\n    (+ 1 (cnt (rest sq)))))", "user": "5bfa25fbe4b0bdcf453d15c8"}, {"problem": 22, "code": "#(reduce (fn [acc x] (+ acc 1)) 0 %)", "user": "5bfa3e02e4b0bdcf453d15ca"}, {"problem": 22, "code": "(fn [lst]\n  (loop [l lst\n         n 0]\n    (if (empty? l)\n      n\n      (recur (rest l) (inc n)))))", "user": "5ac9c737e4b0e27600da77d2"}, {"problem": 22, "code": "(fn [values]\n  (loop [i 0 v values]\n    (if (nil? v)\n      i\n    (recur (inc i) (next v)))))", "user": "5bfaab50e4b0bdcf453d15ce"}, {"problem": 22, "code": "(fn [s]\n  (loop [new-s s c 0]\n    (if (empty? new-s)\n      c\n      (recur (rest new-s) (inc c)))))", "user": "5bfbf75ee4b0bdcf453d15df"}, {"problem": 22, "code": "#(apply + (map (constantly 1) %))", "user": "5beda647e4b0a6d31fed2122"}, {"problem": 22, "code": "(fn [xs]\n  (loop [xs xs n 0]\n    (cond\n       (empty? xs) n\n       :else (recur (rest xs) (+ n 1)))))", "user": "55955c0be4b0c79f6e1db967"}, {"problem": 22, "code": "(fn f [s] (if (empty? s) 0\n           (+ 1 (f (rest s)))))", "user": "5bf8b5a5e4b0bdcf453d15bb"}, {"problem": 22, "code": "(fn [p] (\n reduce + (map (fn [x] 1) p)\n))", "user": "5bfc6d4de4b0bdcf453d15ed"}, {"problem": 22, "code": "(fn foo [ x ]\n\n( if (not (empty? x))\n  (\n    do\n   (+ 1  (foo (rest x)))\n  )\n  (\n    do 0\n  )\n)\n  )", "user": "5bed1e4ae4b0a6d31fed2118"}, {"problem": 22, "code": "(fn f1 [l1] (if (empty? l1)  0\n                        ( + 1 ( f1 (rest l1))))\n    )", "user": "5bfc2068e4b0bdcf453d15e4"}, {"problem": 22, "code": "(fn [x]\n  (loop [input x counter 0]\n    (if (empty? input)\n      counter\n      (recur (rest input) (inc counter))\n  )))", "user": "5bfc82cfe4b0bdcf453d15f0"}, {"problem": 22, "code": "(fn [sq] (reduce + (map (constantly 1) sq)))", "user": "5bfe4ecfe4b0bdcf453d1608"}, {"problem": 22, "code": "(fn [col](reduce + 0 (map (constantly 1) col)))", "user": "5beebdb7e4b0a6d31fed2132"}, {"problem": 22, "code": "#(alength (to-array %))", "user": "5bf83742e4b0bdcf453d15b4"}, {"problem": 22, "code": "reduce (fn [base new] (inc base)) 0", "user": "5bff74a2e4b0bdcf453d162b"}, {"problem": 22, "code": "(fn [l] (reduce + (map (fn [_] 1) l)))", "user": "5bff87fbe4b0bdcf453d162c"}, {"problem": 22, "code": "#(reduce (fn [v coll] (+ v 1)) 0 %)", "user": "5c0039dce4b0bdcf453d1636"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5c014aaae4b0bdcf453d1649"}, {"problem": 22, "code": "#(loop [coll %\n                  accum 0]\n             (if (nil? (first coll))\n               accum\n               (recur (rest coll)\n                      (inc accum))))", "user": "5bef3e88e4b0a6d31fed213f"}, {"problem": 22, "code": "(fn rec [coll] \n  (if (empty? coll) \n    0 \n    (inc (rec (rest coll)))))", "user": "5bf12915e4b0a6d31fed2168"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "5bff66c0e4b0bdcf453d1628"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "59cfc120e4b0ef0a1e9b5b73"}, {"problem": 22, "code": "#(reduce (fn[c _] (inc c)) 0 %)", "user": "51eead15e4b0871fa145d98a"}, {"problem": 22, "code": "(fn [l] (loop [[f & more] l i 0] (if (nil? f) i (recur more (inc i)))))", "user": "5c03e927e4b0bdcf453d167b"}, {"problem": 22, "code": "#(reduce (fn [a _] (inc a)) 0 %)", "user": "55362a5fe4b09218d5f44fb8"}, {"problem": 22, "code": "(comp last map) (fn [x _] (inc x)) (range)", "user": "5bfe8821e4b0bdcf453d160f"}, {"problem": 22, "code": "(comp last map) (fn[i _] (inc i)) (range)", "user": "5bfd0b72e4b0bdcf453d15f6"}, {"problem": 22, "code": "(fn [coll] (reduce + (map (fn [_] 1) coll)))", "user": "5c059c7fe4b0bdcf453d169c"}, {"problem": 22, "code": "#(loop [remaining %\n         i 0]\n    (if (first remaining)\n      (recur (rest remaining) (inc i))\n      i\n      ))", "user": "5bf9d9b7e4b0bdcf453d15c4"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5c06fc6be4b0bdcf453d16be"}, {"problem": 22, "code": "(fn [coll]\n  (loop [coll coll n 0]\n    (if (empty? coll)\n      n\n      (recur (rest coll) (inc n)))))", "user": "5c04464ee4b0bdcf453d167d"}, {"problem": 22, "code": "(fn red [l] (reduce (fn [acc elem] (+ acc 1)) 0 l))", "user": "5c05cae7e4b0bdcf453d16a3"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5c05537fe4b0bdcf453d1692"}, {"problem": 22, "code": "(fn [coll]\n  (loop [cnt 1 new-coll coll]\n    (if (next new-coll)\n      (recur (inc cnt)(rest new-coll))\n      cnt\n      )\n    )\n  )", "user": "5c083a1ae4b0bdcf453d16dd"}, {"problem": 22, "code": "(fn [a] (inc (first (last (map-indexed vector (seq a))))))", "user": "58273e82e4b051871117bf1b"}, {"problem": 22, "code": "#(->> %1 (map (fn [z] 1)) (reduce +))", "user": "594d4c57e4b07ddc2dafae87"}, {"problem": 22, "code": "(fn [s] (loop [n 0 s s] (if s (recur (inc n) (next s)) n)))", "user": "5c092334e4b0bdcf453d16ea"}, {"problem": 22, "code": "(fn [x]\n   ((fn count2 [x d]\n    (cond \n      (empty? x) d\n      :else (count2 (rest x) (+ d 1)))) x 0))", "user": "5c02c9a8e4b0bdcf453d1667"}, {"problem": 22, "code": "(fn [x]\n  (reduce (fn [v i] (inc v)) 0 x))", "user": "5c0a400ee4b0bdcf453d1700"}, {"problem": 22, "code": "#(reduce (fn [m v] (inc m)) 0 %)", "user": "5c0a87e6e4b0bdcf453d1707"}, {"problem": 22, "code": "#(loop [x 0 y %]\n   (if (empty? y)\n     x\n     (recur (inc x) (rest y))))", "user": "5c0a5061e4b0bdcf453d1703"}, {"problem": 22, "code": "#(reduce\n  (fn [acc val]\n    (inc acc)\n  )\n  0\n  %\n )", "user": "5c0d0537e4b0bdcf453d173d"}, {"problem": 22, "code": "#(reduce + (map (fn [n] (if n 1 0)) %1))", "user": "5bd7ca82e4b0ed4b8aab4bc8"}, {"problem": 22, "code": "(fn [x] (reduce (fn [z _] (+ z 1))  0 x))", "user": "5c0e22cae4b01240ff56713b"}, {"problem": 22, "code": "(fn cnt\n  ([x] (cnt x 0))\n  ([x n] (if (empty? x) n (cnt (rest x) (inc n)))))", "user": "5c0e58bfe4b01240ff567140"}, {"problem": 22, "code": "#(loop [i % cnt 0] (cond (empty? i) cnt :t (recur (rest i)(inc cnt))))", "user": "4f6a946ae4b07046d9f4ef9f"}, {"problem": 22, "code": "(fn my-cnt [col]\n  (loop [col col n 0]  \n  (if (empty? col) n\n  (recur (rest col) (inc n)))))", "user": "5c01ba2ce4b0bdcf453d1656"}, {"problem": 22, "code": "(fn [seqable-in] \n(loop [seqable seqable-in seqable-count 0] \n(if (empty? seqable) \nseqable-count \n(recur (rest seqable) (inc seqable-count)))))", "user": "5c0ea7f1e4b01240ff567142"}, {"problem": 22, "code": "(fn [v] (reduce (fn [y z] (inc y)) 0 v))", "user": "5c10e7a2e4b01240ff56716b"}, {"problem": 22, "code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "5c1156a2e4b01240ff567176"}, {"problem": 22, "code": "(fn [items] (reduce (fn [total _] (inc total)) 0 items))", "user": "57131a8ee4b07c98581c3a97"}, {"problem": 22, "code": "(fn [coll] (reduce (fn [a b] (inc a)) 0 coll))", "user": "5c1229d5e4b01240ff567188"}, {"problem": 22, "code": "(fn my-count [xs]\n  (if (= xs [])\n    0\n    (+ 1 (my-count (rest xs)))))", "user": "5c11812ee4b01240ff56717b"}, {"problem": 22, "code": "#(reduce (fn [a b] (inc a)) 0 %1)", "user": "5c122200e4b01240ff567186"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %1))", "user": "5bfada5ee4b0bdcf453d15d2"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5c12dacae4b01240ff567198"}, {"problem": 22, "code": "(fn [coll] \n  (loop [acc coll, cnt 0] \n    (if (= () acc) \n        cnt \n        (recur (rest acc) \n               (inc cnt)))))", "user": "5c13da47e4b01240ff5671a6"}, {"problem": 22, "code": "(fn length [x]\n\t(reduce (fn [x, y] (inc x)) 0 x)\n)", "user": "5c14ce29e4b01240ff5671b6"}, {"problem": 22, "code": "(fn my-count ([s] (my-count s 0)) ([s n] (if (empty? s) n (my-count (rest s) (inc n)))))", "user": "5c0ebca5e4b01240ff567147"}, {"problem": 22, "code": "(fn [coll]\n  (reduce (fn [x remaining] (inc x)) 0 coll))", "user": "5c113df2e4b01240ff56716f"}, {"problem": 22, "code": "(fn\n  [coll]\n  (loop [coll coll qt 0]\n    (if (empty? coll)\n      qt\n      (recur (rest coll) (inc qt)))))", "user": "5c15537ae4b01240ff5671bf"}, {"problem": 22, "code": "(fn counter [s] (reduce (fn [x y] (+ x 1)) 0 s))", "user": "5c14371de4b01240ff5671b0"}, {"problem": 22, "code": "#(reduce (fn [acc el] (+ acc 1)) 0 %)", "user": "5c165d3ee4b01240ff5671d1"}, {"problem": 22, "code": "#(reduce (fn [x _] (inc x)) 0 %)", "user": "5c1834ffe4b01240ff5671ea"}, {"problem": 22, "code": "(fn [coll]\n  (reduce (fn [x y] (inc x)) 0 coll))", "user": "5c115097e4b01240ff567172"}, {"problem": 22, "code": "(comp\n (fn [l] (reduce (fn [r x] (inc r)) l))\n (fn [l] (map (fn [x] 1) l))\n seq\n )", "user": "5c17467fe4b01240ff5671df"}, {"problem": 22, "code": "#(loop [coll (seq %), length 0]\n   (if (empty? coll) length\n     (recur (rest coll) (inc length))))", "user": "5c196e7be4b01240ff5671fb"}, {"problem": 22, "code": "#(reduce (fn [acc _] (+ acc 1)) 0 %)", "user": "5c1840eae4b01240ff5671eb"}, {"problem": 22, "code": "(fn myfn \n  ([l n]\n  (if (empty? l)\n    n\n    (myfn (rest l) (+ n 1))\n  ))\n  ([l] (myfn l 0))\n)", "user": "5c1a0813e4b01240ff567203"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5c194d90e4b01240ff5671f6"}, {"problem": 22, "code": "(fn cnt [x]\n  (if (empty? x) \n    0\n    (+ 1 (cnt (rest x)))))", "user": "5c196184e4b01240ff5671f8"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5c1aadcde4b01240ff567209"}, {"problem": 22, "code": "#(loop [i 0\n          left %1]\n    (if (empty? left)\n      i\n      (recur (+ i 1) (rest left))\n    )\n  )", "user": "5bfcdc52e4b0bdcf453d15f4"}, {"problem": 22, "code": "(fn [items]\n  (loop [xs items, cnt 0]\n    (if (empty? xs)\n      cnt\n      (recur (drop 1 xs) (inc cnt))\n)))", "user": "5c1b82bce4b01240ff567211"}, {"problem": 22, "code": "(fn [coll] (reduce (fn [c _] (inc c)) 0 coll))", "user": "5c1bee41e4b01240ff567218"}, {"problem": 22, "code": "#(reduce (fn [acc x] (inc acc)) 0 %)", "user": "5c18418ce4b01240ff5671ec"}, {"problem": 22, "code": "(fn [lst]\n   (loop [cut-lst lst \n          cnt 0]\n     (let [new-lst (rest cut-lst)] \n       (if-not (empty? new-lst)\n         (recur new-lst (inc cnt))\n        (+ 1 cnt)))))", "user": "5c1ca642e4b0efcb0b05b23c"}, {"problem": 22, "code": "#(reduce \n  \t(fn [len _] (inc len)) 0 %)", "user": "5c1ca3dbe4b0efcb0b05b23b"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5c18f3f6e4b01240ff5671f2"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5c13dc37e4b01240ff5671a7"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %) )", "user": "5c1d6dbee4b0efcb0b05b249"}, {"problem": 22, "code": "#(reduce + (map (fn [_] 1) %))", "user": "5c1edf23e4b0efcb0b05b25d"}, {"problem": 22, "code": "(fn count' [s]\n  (if (empty? s)\n    0\n    (+ 1 (count' (rest s)))))", "user": "5c1fe56ae4b07e362c23056e"}, {"problem": 22, "code": "(fn [x] (reduce (fn [a b] (inc a) ) 0 x))", "user": "5c1d9f05e4b0efcb0b05b24c"}, {"problem": 22, "code": "; (fn [x] (def z 0) (doseq [i x] (def z (inc z))) z)\n(fn [s] (reduce (fn [x y] (inc x)) 0 s))", "user": "5c21a531e4b07e362c230582"}, {"problem": 22, "code": "(fn [seq] (reduce (fn [x y] (+ 1 x)) 0 seq))", "user": "5c222b7de4b07e362c230588"}, {"problem": 22, "code": "#(reduce + (map (fn [_] 1) %))", "user": "5c219c0fe4b07e362c230581"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5c2195dce4b07e362c230580"}, {"problem": 22, "code": "#(reduce (fn [i, n] (inc i)) 0 %)", "user": "5c20b6abe4b07e362c230576"}, {"problem": 22, "code": "#(loop [my-seq % n 0] (if (empty? my-seq) n (recur (rest my-seq) (+ n 1))))", "user": "5c228b51e4b07e362c23058c"}, {"problem": 22, "code": "(fn [mylist-list]\n  (loop [mylist-list mylist-list len 0]\n    (if (empty? mylist-list)\n      len\n      (recur (rest mylist-list) (inc len)))))", "user": "5c0e3f86e4b01240ff56713d"}, {"problem": 22, "code": "(fn nb \n  ([s] \n   (nb s 0))\n  ([s tot]\n   (if (empty? s) \n     tot \n     (nb (rest s) (inc tot)))))", "user": "5c22c861e4b07e362c230590"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5c0fedade4b01240ff567157"}, {"problem": 22, "code": "#(reduce + (map (fn [_] 1) %))", "user": "55965515e4b0c79f6e1db978"}, {"problem": 22, "code": "(fn count-sequence [seq]\n  (loop [i 0\n         rest-list seq]\n    (if (= (first rest-list) nil)\n      i\n      (recur (+ i 1) (rest rest-list)))))", "user": "5c196dc3e4b01240ff5671fa"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5c2649c8e4b07e362c2305bf"}, {"problem": 22, "code": "#(loop [coll %\n        n    0]\n    (if (empty? coll)\n      n\n      (recur (rest coll) (inc n))))", "user": "5c24671be4b07e362c2305a1"}, {"problem": 22, "code": "(fn [coll] (loop [xs (vec coll)\n                      cnt 0]\n                 (if xs\n                   (let [x (first xs)]\n                     (recur (next xs) (inc cnt)))\n                   cnt)))", "user": "5c2692d2e4b07e362c2305c2"}, {"problem": 22, "code": "(partial reduce (fn [a x] (+ a 1)) 0)", "user": "5c272f82e4b07e362c2305cb"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %1)", "user": "5c275d18e4b07e362c2305cd"}, {"problem": 22, "code": "(fn [s] (reduce (fn [x y] (inc x)) 0 s))", "user": "5c284f14e4b07e362c2305d6"}, {"problem": 22, "code": "(fn [x] (reduce + (map (fn [_] 1) (seq x))))", "user": "5c250900e4b07e362c2305ab"}, {"problem": 22, "code": "(fn[col]\n (loop [r col\n        c 0]\n   (if (empty? r)\n     c\n     (recur (rest r) (inc c)))))", "user": "5c272a4de4b07e362c2305ca"}, {"problem": 22, "code": "#(inc (.lastIndexOf (vec %) (peek (vec %))))", "user": "50eeeadae4b02c17778c91f3"}, {"problem": 22, "code": "(fn mycount [coll] \n  (if (next coll) \n    (+ 1 (mycount (rest coll)))\n    1\n    )\n  )", "user": "5c298c79e4b07e362c2305de"}, {"problem": 22, "code": ";;#(.length (vec %))\nreduce (fn [x _] (+ 1 x)) 0", "user": "5c295f34e4b07e362c2305db"}, {"problem": 22, "code": "#(alength (to-array %))", "user": "5c22a12ae4b07e362c23058d"}, {"problem": 22, "code": "#(reduce (fn [acc e] (inc acc)) 0 %)", "user": "5bca21a5e4b07a9b28b100e5"}, {"problem": 22, "code": "reduce (fn [a b] (inc a)) 0", "user": "5c2836ebe4b07e362c2305d4"}, {"problem": 22, "code": "(fn foo\n  [myvec]\n  (loop [i -1\n         v myvec]\n    (if (not (empty? v))\n      (recur (inc i) (rest v))\n      (inc i)\n      )\n    )\n  )", "user": "5c24c654e4b07e362c2305a7"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5c1e96dde4b0efcb0b05b256"}, {"problem": 22, "code": "reduce (fn [counter _] (inc counter)) 0", "user": "5c201002e4b07e362c230571"}, {"problem": 22, "code": "(fn count-elts [xs]\n  (reduce (fn [acc _] (+ acc 1)) 0 xs))", "user": "5c2d1f63e4b0d62ef62d9ef0"}, {"problem": 22, "code": "#(loop [s % i 0]\n   (if-not (seq s) i (recur (rest s) (inc i))))", "user": "5c2d1f21e4b0d62ef62d9eef"}, {"problem": 22, "code": "(fn my-count [col] (reduce + (map (fn [x] 1) col)))", "user": "5c2e2b4fe4b0d62ef62d9f01"}, {"problem": 22, "code": "#(loop [lst %1\n        length 0]\n   (if (empty? lst)\n     length\n     (recur (rest lst) (inc length))))", "user": "595b5b6ee4b066ee0a44afd5"}, {"problem": 22, "code": "reduce #(inc (first %&)) 0", "user": "5bfd9bd6e4b0bdcf453d1601"}, {"problem": 22, "code": "(fn count-list\n    [list]\n    (if (empty? list) 0\n    (+ 1 (count-list (rest list)))\n        ))", "user": "5c255edee4b07e362c2305b2"}, {"problem": 22, "code": "(fn [v] \n  (reduce #(do (identity %1) (identity %2) (inc %1)) 0 (vec v)))", "user": "57d57f65e4b0bd073c2023b3"}, {"problem": 22, "code": "#(reduce (fn [n _] (inc n)) 0 %)", "user": "5c2f0cdfe4b0d62ef62d9f09"}, {"problem": 22, "code": "(fn my_count \n  ([l]\n  (my_count l 0))\n  ([l cnt]\n  (if\n    (empty? l) cnt\n    (recur (rest l) (inc cnt)))))", "user": "5c2f48a5e4b0d62ef62d9f0d"}, {"problem": 22, "code": "(fn [l]\n  (loop [[h & ls] l n 0]\n    (if (nil? h)\n      n\n      (recur ls (inc n)))))", "user": "5944abd0e4b0b03edd0057af"}, {"problem": 22, "code": "(fn [coll]\n (reduce (fn [x y] (inc x)) 0 coll))", "user": "5c31517de4b0d62ef62d9f28"}, {"problem": 22, "code": "#(reduce (fn [sum element] (inc sum)) 0 %)", "user": "5c26460be4b07e362c2305bc"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5c316de5e4b0d62ef62d9f2b"}, {"problem": 22, "code": "#(apply + (map (constantly 1) %))", "user": "5c30d90de4b0d62ef62d9f22"}, {"problem": 22, "code": "#(loop [coll %, cnt 0]\n   (if (empty? coll)\n     cnt\n     (recur (drop 1 coll) (inc cnt))\n     )\n    )", "user": "5c25f90ce4b07e362c2305b6"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5c32ea85e4b0d62ef62d9f3e"}, {"problem": 22, "code": "(fn ls [se] (reduce + (map (constantly 1) se)))", "user": "5c337305e4b0d62ef62d9f48"}, {"problem": 22, "code": "(fn [x] (reduce (fn [a b] (inc a)) 0 x))", "user": "5c32603ee4b0d62ef62d9f38"}, {"problem": 22, "code": "(fn \n [s] \n (loop [cnt 0 \n        remaining s]\n   (if (empty? remaining) cnt\n     (recur (inc cnt) (rest remaining)))))", "user": "5b14475be4b0cc2b61a3be5a"}, {"problem": 22, "code": "(fn [s] (reduce (fn[c _] (inc c)) 0 s))", "user": "54dc2c3ae4b024c67c0cf77d"}, {"problem": 22, "code": "#(reduce \n    (fn [c a] (inc c))\n     0 %)", "user": "5c35046fe4b0d62ef62d9f5f"}, {"problem": 22, "code": "(fn len [s]\n    (if (empty? s)\n        0\n        (+ 1 (len (rest s)))\n    )    \n)", "user": "5c3453fee4b0d62ef62d9f53"}, {"problem": 22, "code": "(fn [ls] ((fn ccc [r c] (if (= (empty? r) true)(int c)(ccc (rest r) (+ c 1)) )) ls 0))", "user": "5c35acffe4b0d62ef62d9f62"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5c34cb2ee4b0d62ef62d9f59"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "5c33bdf3e4b0d62ef62d9f49"}, {"problem": 22, "code": "(fn my-count\n  [seq]\n  (loop [n 0 s seq]\n    (if (empty? s) n\n                     (recur (inc n) (rest s)))))", "user": "5c36d110e4b0d62ef62d9f6a"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5bf28e9ee4b0a6d31fed2177"}, {"problem": 22, "code": "reduce (fn [x y] (+ x 1)) 0", "user": "5c37110ae4b0d62ef62d9f71"}, {"problem": 22, "code": "#(reduce (fn [acc,item] (inc acc)),0,%)", "user": "5a64dcabe4b0512ff01cd9a9"}, {"problem": 22, "code": "(fn cnt [seq] \n  (if (= seq '()) \n    0 \n    (+ 1 (cnt (rest seq)))))", "user": "5c34be9fe4b0d62ef62d9f58"}, {"problem": 22, "code": "(fn brEle [lista]\n  (loop [broj 0\n         ostatak lista]\n    (if (empty? (rest ostatak)) (+ broj 1) (recur (+ broj 1) (rest ostatak)))))", "user": "5be0b916e4b0ed4b8aab4c8f"}, {"problem": 22, "code": "(fn\n  [coll]\n  (loop [cnt 0 colli coll]\n    (if \n        (empty? colli)\n      cnt\n      (recur (inc cnt) (rest colli)))))", "user": "5c34cf2de4b0d62ef62d9f5a"}, {"problem": 22, "code": "(fn [coll]\n  (loop [counter 0 coll coll]\n    (if (or (empty? coll))\n        counter\n        (recur (inc counter) (rest coll)))))", "user": "5c06f6e3e4b0bdcf453d16bb"}, {"problem": 22, "code": "(fn \n  [vect] \n  (last (last \n          (map vector vect (iterate inc 1)))))", "user": "5c39701de4b0d62ef62d9f8b"}, {"problem": 22, "code": "reduce (fn [x _] (inc x)) 0", "user": "5c376638e4b0d62ef62d9f74"}, {"problem": 22, "code": "(fn [coll]\n  (loop [coll coll acc 0]\n    (if (empty? coll)\n      acc\n      (recur (rest coll) (+ acc 1))\n      ))\n    )", "user": "5bba6571e4b0a20761a235e9"}, {"problem": 22, "code": "(fn [xs]\n  (reduce (fn [i _] (inc i)) 0 xs))", "user": "5c3a896be4b0d62ef62d9f94"}, {"problem": 22, "code": "(fn [l] (loop [l l n 0] (if (not l) n (recur (next l) (inc n)))) )", "user": "5c308385e4b0d62ef62d9f1c"}, {"problem": 22, "code": "#(loop [d 2] (if-not (nth % d false) (- d 1) (recur (+ 2 d))))\n;; d is 2 and inc by 2, because this way we get twice faster to the end of the seq\n;; however, this is not the full solution, though it works\n;; should also check if the d-2 not nil", "user": "5c395c65e4b0d62ef62d9f8a"}, {"problem": 22, "code": "(fn my-count\n  [seq]\n  (loop [n 0 s seq]\n    (if (empty? s) n\n                   (recur (inc n) (rest s)))))", "user": "5c3ac091e4b0d62ef62d9f95"}, {"problem": 22, "code": "(fn [my-seq]\n  (reduce\n    (fn [c a] (inc c) )\n    0 my-seq))", "user": "5c321b8ae4b0d62ef62d9f32"}, {"problem": 22, "code": "#(apply + (map (fn [x] 1) %))", "user": "5c379636e4b0d62ef62d9f76"}, {"problem": 22, "code": "(fn [l]\n  (loop [i 0 l l]\n    (if (= nil (first l))\n      i\n      (recur (inc i) (rest l)))))", "user": "5c3d8576e4b0d62ef62d9fb4"}, {"problem": 22, "code": "(fn [xs] \n\t((fn rc [xs x] \n      (if (empty? xs) \n        \t x\n        \t(rc (drop 1 xs) (inc x))\n        )\n      ) xs 0)\n  )", "user": "5c3de434e4b0d62ef62d9fb8"}, {"problem": 22, "code": "(fn count-items [thingy] (apply + (map (constantly 1) thingy)) )", "user": "5bc9fb3be4b07a9b28b100e3"}, {"problem": 22, "code": "(fn [coll] \n  (reduce + (map (constantly 1) coll)))", "user": "5b7aaa3ce4b047b03b203716"}, {"problem": 22, "code": "(fn [s] \n  (reduce-kv \n   (fn [m k v] (+ k 1)) 0 (vec s)\n  )\n)", "user": "5c3e7b04e4b08cd430848e83"}, {"problem": 22, "code": "reduce (fn [acc xs] (inc acc)) 0", "user": "5c2dfca3e4b0d62ef62d9efc"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5c0614f6e4b0bdcf453d16a9"}, {"problem": 22, "code": "#(reduce + (map (fn [elem] 1) %))", "user": "5c374db6e4b0d62ef62d9f73"}, {"problem": 22, "code": "(fn hoo [x] (loop [x x c 0]\n              (if (= x '()) c (recur (rest x) (inc c)))))", "user": "5c3f29d4e4b08cd430848e8f"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "568cb90fe4b0dcc4269f40b9"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5c334570e4b0d62ef62d9f46"}, {"problem": 22, "code": "#(reduce (fn [x xs](inc x)) 0 %)", "user": "5c3f37fce4b08cd430848e91"}, {"problem": 22, "code": "(fn [x] (reduce (fn [a b] (inc a)) 0 x))", "user": "5c3f6322e4b08cd430848e97"}, {"problem": 22, "code": "(fn [coll] (reduce (fn [acc _] (inc acc)) 0 coll))", "user": "5c408a61e4b08cd430848eb2"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5bf31833e4b0a6d31fed218a"}, {"problem": 22, "code": "#(loop [result 0 c %]\n    (if(empty? c) result\n    (recur (inc result) (rest c))))", "user": "5c3e29fbe4b0a522eaa3f9a1"}, {"problem": 22, "code": "(fn [sq]\n        (loop [i 0 xs sq]\n        (if (empty? xs)\n        i\n        (recur (inc i) (rest xs))\n        )))\n\n;;#(reduce (fn [ac _] (inc ac)) 0 %)", "user": "5c3796b3e4b0d62ef62d9f77"}, {"problem": 22, "code": "(fn my-cnt\n  [coll]\n  (loop [s 0\n         r coll]\n    (if (seq r)\n      (recur (+ s 1) (rest r))\n      s)))", "user": "5c411df3e4b08cd430848ebf"}, {"problem": 22, "code": "#(apply + (map (constantly 1) %))", "user": "5c41adfce4b08cd430848ec8"}, {"problem": 22, "code": "(fn count-length [x] (if(empty? x) 0 ( + 1 (count-length (rest x)))))", "user": "5c4217e2e4b08cd430848ed2"}, {"problem": 22, "code": "#(reduce \n    (fn [i l] (inc i))\n     0 %)", "user": "5c3ee9bde4b08cd430848e8b"}, {"problem": 22, "code": "(fn [values] (reduce (fn [x y] (+ x 1)) 0 values))", "user": "5c43ccdae4b0e06e1360a36f"}, {"problem": 22, "code": "(fn size [v] \n  (if (= v '()) \n    0 \n    (+ 1 (size (rest v)))\n  )\n)", "user": "5c454ee2e4b0e06e1360a388"}, {"problem": 22, "code": "(fn zz [x] (if (empty? x) 0 (+ 1 (zz (rest x)))))", "user": "5b9ae606e4b0c0b3ffbd4af2"}, {"problem": 22, "code": "(fn [x] (loop [x x n 0] (if (empty? x) n (recur (rest x) (+ n 1)))))", "user": "5b507222e4b02d533a91bce7"}, {"problem": 22, "code": "#(reduce (fn[i _] (inc i)) 0 %)", "user": "5549ca1ce4b0a04f7929956c"}, {"problem": 22, "code": "(fn [or-seq]\n  (loop [seq or-seq\n         i   0]\n    (cond\n     (empty? seq) i\n     :else (recur (rest seq) (inc i)))))", "user": "5c422f66e4b08cd430848ed3"}, {"problem": 22, "code": "(fn [x] (reduce (fn [a c] (inc a)) 0 x))", "user": "5c46e6dde4b0e06e1360a3a7"}, {"problem": 22, "code": "#(reduce + (map (fn [_] 1) %1))", "user": "5c4058a2e4b08cd430848eae"}, {"problem": 22, "code": "(fn [x]\n  ((fn aaa [z y] (if (empty? z) y (aaa (rest z) (+ y 1)))) x 0)\n  )", "user": "5c473942e4b0e06e1360a3aa"}, {"problem": 22, "code": "(fn [x]\n (loop [x x cnt 0]\n  (if (seq x)\n   (recur (rest x) (inc cnt))\n   cnt)))", "user": "5c45e703e4b0e06e1360a391"}, {"problem": 22, "code": "(fn [seqn]\n  (loop [s seqn n 0 ]\n    (if (empty? s) n\n      (recur (rest s) (inc n)))))", "user": "5c4750bfe4b0e06e1360a3ad"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5c45f7d7e4b0e06e1360a394"}, {"problem": 22, "code": "reduce (fn [a b] (+ 1 a)) 0", "user": "5c495bade4b0e06e1360a3cf"}, {"problem": 22, "code": "#(reduce (fn [n1 n2](inc n1)) 0 %)", "user": "5c486dece4b0e06e1360a3c0"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5c45c03fe4b0e06e1360a38d"}, {"problem": 22, "code": "(fn ccnt [x]\n  (if (= x [])\n    0\n    (inc (ccnt (rest x)))\n   )\n )", "user": "5c4a08c5e4b0f9f7a8770e4f"}, {"problem": 22, "code": "#(loop [i 0\n        coll %]\n   (if (not-empty coll)\n     (recur (+ i 1) (rest coll))\n     i))", "user": "4f925791e4b0dcca54ed6cac"}, {"problem": 22, "code": "(fn [lista]\n      (reduce +\n        (map (constantly 1) lista)))", "user": "5c493046e4b0e06e1360a3cb"}, {"problem": 22, "code": "(fn [xs] (loop [x xs y 0] (if (empty? x) y (recur (rest x) (+ y 1)))))", "user": "5c387c51e4b0d62ef62d9f83"}, {"problem": 22, "code": "(fn [coll] \n  (reduce \n   (fn [cnt coll] \n     (inc cnt))\n   0\n   coll))", "user": "5c47149ae4b0e06e1360a3a8"}, {"problem": 22, "code": "(fn met [coll]\n  (if (seq coll)\n    (inc (met ( rest coll)))\n    0))", "user": "5c4ad616e4b0f9f7a8770e5a"}, {"problem": 22, "code": "(fn mycount [l] (if (empty? l) 0 (inc (mycount (rest l)))))", "user": "5c487515e4b0e06e1360a3c2"}, {"problem": 22, "code": "#(reduce (fn  [a b]  (+ a 1) ) 0 %1)", "user": "5c4ab449e4b0f9f7a8770e57"}, {"problem": 22, "code": "#(loop [cnt 0 lst %1] \n   (if (empty? lst)\n     cnt\n     (recur (inc cnt) (rest lst))\n    )\n  )", "user": "5c4c74efe4b0f9f7a8770e76"}, {"problem": 22, "code": "(fn [coll] ( reduce (fn [x y]( + x 1)) 0 coll))", "user": "5c46bdbde4b0e06e1360a3a4"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "5c48757fe4b0e06e1360a3c3"}, {"problem": 22, "code": "#(reduce (fn [acc x] (inc acc)) 0 %)", "user": "57c1ace1e4b05aa3c4741ca3"}, {"problem": 22, "code": "(fn [seqn]\n  ((fn [seqn n]\n    (if (empty? seqn)\n      n\n      (recur (rest seqn) (inc n))))\n  seqn 0))", "user": "5c4fd807e4b0f9f7a8770eb5"}, {"problem": 22, "code": "(fn -count [xs]\n  (if (empty? xs)\n    0\n    (+ 1 (-count (rest xs)))))", "user": "5c50154be4b0f9f7a8770ebc"}, {"problem": 22, "code": "#(reduce (fn [total elements] (inc total)) 0 %1)", "user": "5c3cd80fe4b0d62ef62d9faa"}, {"problem": 22, "code": "(fn [coll]\n  (apply + (map (fn [_] 1) coll)))", "user": "5c506951e4b0f9f7a8770ec5"}, {"problem": 22, "code": "(fn [the-seq]\n  (loop [s the-seq c 0]\n    (if (empty? s)\n      c\n      (recur (rest s) (inc c)))))", "user": "5c26c9b3e4b07e362c2305c5"}, {"problem": 22, "code": "#(loop [result 0, data %] \n   (if (empty? data) \n     result \n     (recur (inc result) \n            (rest data))))", "user": "5c50de36e4b0fb8c5ffd99bc"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5c512811e4b0fb8c5ffd99c2"}, {"problem": 22, "code": "#(loop [i %\n        j 0]\n   (if (next i) (recur (rest i) (inc j)) (inc j)))", "user": "5c481764e4b0e06e1360a3ba"}, {"problem": 22, "code": "(fn [s]\n  (let [impl \n    (fn [s n]\n      (if (empty? s)\n        n\n        (recur (rest s) (+ n 1))))]\n    (impl s 0)))", "user": "5c50048ae4b0f9f7a8770eb9"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5c435a9fe4b0e06e1360a367"}, {"problem": 22, "code": "#((fn rec [x y] (if (empty? x) \n                \ty \n                \t(rec (rest x) (inc y))\n              \t)\n) % 0)", "user": "5c51b394e4b0fb8c5ffd99cc"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5c4e2b82e4b0f9f7a8770e93"}, {"problem": 22, "code": "(fn [l] (loop [[x & xs] l i 0] (if x (recur xs (inc i)) i)))", "user": "5c51c930e4b0fb8c5ffd99ce"}, {"problem": 22, "code": "#(loop [li % cnt 0] (if (empty? li) cnt (recur (rest li) (inc cnt))))", "user": "5c527129e4b0fb8c5ffd99de"}, {"problem": 22, "code": "(fn y [sq] ((fn f [sq acc] (if (empty? sq) acc (f (rest sq) (+ 1 acc))))sq 0))", "user": "5c51f60be4b0fb8c5ffd99d4"}, {"problem": 22, "code": ";;#(reduce + (map (fn [x] 1) %))\n\n;;more involved way:\n(fn foo \n  ([tot coll] \n  (let [one (first coll) others (rest coll)]\n    (if (empty? others)\n      (+ 1 tot)\n      (foo (+ 1 tot) others))))\n  ([coll]\n   \t(foo 0 coll)))", "user": "5c534431e4b0fb8c5ffd99f2"}, {"problem": 22, "code": "#(reduce (fn [x _] (inc x)) 0 %)", "user": "5c478ba2e4b0e06e1360a3b2"}, {"problem": 22, "code": "(fn [col] (loop [n 0, c col]\n            (if (empty? c)\n              n\n              (recur (inc n) (rest c)))))", "user": "5c30da5ae4b0d62ef62d9f23"}, {"problem": 22, "code": "(fn my-count [input-list] \n  (reduce (fn [cnt _] (inc cnt)) 0 input-list))", "user": "5c547943e4b0fb8c5ffd9a0a"}, {"problem": 22, "code": "(fn [arg] (reduce (fn f [x y] (+ x 1)) 0 (vec arg)))", "user": "5c52f3fce4b0fb8c5ffd99e9"}, {"problem": 22, "code": "#(reduce (fn [x y] (+ x 1)) 0 %)", "user": "5c54e605e4b0fb8c5ffd9a14"}, {"problem": 22, "code": "(fn [sq] (reduce (fn [v i] (+ v 1)) 0 sq))", "user": "5c55e86fe4b0fb8c5ffd9a29"}, {"problem": 22, "code": "(fn count-seq [list] (reduce (fn [x y] (inc x)) 0 list))", "user": "5c55f6eee4b0fb8c5ffd9a2d"}, {"problem": 22, "code": "(fn cnt [coll & n]\n  (if (first coll)\n    (cnt (rest coll) (+ (or (first n) 0) 1))\n    (first n)))", "user": "5c5584cfe4b0fb8c5ffd9a20"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5adf7a7ae4b0837691e92c37"}, {"problem": 22, "code": "(fn my-count [sq]\n  (loop [my-sq sq i 0]\n    (cond\n     (empty? my-sq) i\n     :else (recur (rest my-sq) (inc i)))))", "user": "5c558070e4b0fb8c5ffd9a1e"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5c582e7be4b0fb8c5ffd9a55"}, {"problem": 22, "code": "reduce (fn [a x] (inc a)) 0", "user": "5c53127ee4b0fb8c5ffd99ef"}, {"problem": 22, "code": "(fn cnt [xs]\n  (loop [in xs\n         ctr 0]\n    (if (empty? in)\n      \tctr\n      \t(recur (rest in)\n               (+ 1 ctr)))))", "user": "5c57fc9ae4b0fb8c5ffd9a52"}, {"problem": 22, "code": "reduce #(+ (first [% %2]) 1) 0", "user": "5c51ac2fe4b0fb8c5ffd99cb"}, {"problem": 22, "code": "reduce #(do %2 (inc %1)) 0", "user": "5c597b42e4b01df32ab7325b"}, {"problem": 22, "code": "(fn num_items\n  ([ls]\n   (num_items ls 0))\n  ([ls i]\n   (if (empty? ls)\n     i\n     (recur (rest ls) (inc i)))))", "user": "5c58736be4b01df32ab73247"}, {"problem": 22, "code": "(fn foo [lst] (if (empty? lst) 0 (+ 1 (foo(rest lst)))))", "user": "5c59b1d3e4b01df32ab73261"}, {"problem": 22, "code": "(fn [s] (reduce + (map (fn [x] 1) s)))", "user": "5c5ad42ae4b01df32ab7327c"}, {"problem": 22, "code": "(fn [seq]\n  (alength (to-array seq)))", "user": "5bdee4bee4b0ed4b8aab4c67"}, {"problem": 22, "code": "#(reduce + (map (fn [_] 1 ) %1) )", "user": "5c38422ae4b0d62ef62d9f7f"}, {"problem": 22, "code": "reduce (fn [result x] (inc result)) 0", "user": "5c5bee9be4b01df32ab73294"}, {"problem": 22, "code": "(fn count-seq [coll]\n  (loop [[first & rest] coll\n         counter 0]\n    (if (nil? first)\n      counter\n      (recur rest (inc counter)))\n    )\n  )", "user": "5c51d700e4b0fb8c5ffd99d1"}, {"problem": 22, "code": "(fn [lst]\n  (loop [sq (seq lst)\n         cnt 0]\n    (if (empty? sq) cnt\n        (recur (next sq)\n               (inc cnt)\n               )\n      )\n    )\n  )", "user": "5c5732c8e4b0fb8c5ffd9a3f"}, {"problem": 22, "code": "(fn size [l]\n  (if (empty? l)\n    0\n    (inc (size (rest l)))))", "user": "5c5d2e90e4b01df32ab732af"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5c5d9510e4b01df32ab732b5"}, {"problem": 22, "code": "(fn my-count\n\t([coll] (my-count coll 0))\n\t([coll cnt] \n \t(if (empty? coll) \n      cnt \n      (my-count (rest coll)(inc cnt)))))", "user": "514992d2e4b0b64cbeae1848"}, {"problem": 22, "code": "(fn\n  [my-seq]\n  (loop [i 0 [x & rest] my-seq]\n    (if (= x nil)\n    i\n    (recur (inc i) rest))))", "user": "5c5e7049e4b0fca0c1622607"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5ad233d5e4b0ea6055cfabb0"}, {"problem": 22, "code": "#(reduce (fn [acc next] (+ 1 acc)) 0 %)", "user": "5640cc71e4b08d4f616f5eea"}, {"problem": 22, "code": "#(reduce (fn [n _] (inc n)) 0 %)", "user": "5c61576fe4b0fca0c162262a"}, {"problem": 22, "code": "#(reduce (fn [s _] (inc s)) 0 %)", "user": "592883f1e4b072a2710fceea"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5c5b246ae4b01df32ab73286"}, {"problem": 22, "code": "(fn [a]\n  (loop [looped_a a, a_count 0]\n    (if (empty? looped_a)\n      a_count\n      (recur (rest looped_a) (inc a_count))\n      )\n    )\n  )", "user": "5c6253abe4b0fca0c1622646"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5c619df4e4b0fca0c1622637"}, {"problem": 22, "code": "(fn f [lst]\n  (if (empty? lst)\n    0\n    (inc (f (rest lst)))))", "user": "5c62979fe4b0fca0c162264c"}, {"problem": 22, "code": "(fn\n  count-seq\n  [seq]\n  (reduce (fn[counted _] (inc counted)) 0 seq))", "user": "5c6227fee4b0fca0c1622641"}, {"problem": 22, "code": "(fn size-of-seq [sq]\n  (loop [sq sq sz 0]\n    (if (empty? sq)\n      sz\n      (recur (rest sq) (inc sz)))))", "user": "5c6314c5e4b0fca0c1622658"}, {"problem": 22, "code": "#(loop [remaining %\n        counter 0]\n   (if (empty? remaining)\n     counter\n     (recur (rest remaining) (+ 1 counter))))", "user": "5c62f1cde4b0fca0c1622655"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5c59749fe4b01df32ab73259"}, {"problem": 22, "code": "#(reduce (fn [v c] (inc v)) 0 %)", "user": "5c633df2e4b0fca0c162265c"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5c5d8c04e4b01df32ab732b4"}, {"problem": 22, "code": "(fn f [x] (cond (not (first x)) 0 true (+ 1 (f (rest x)))))", "user": "5ae7ed7ce4b0837691e92cb0"}, {"problem": 22, "code": "(fn my-count [s]\n  (if (empty? s)\n    0\n    (+ 1 (my-count (rest s)))))", "user": "59cd351ee4b0ef0a1e9b5b35"}, {"problem": 22, "code": "(fn [xs] \n  (->> xs\n       (map (constantly 1))\n       (reduce +)))", "user": "5c6448d6e4b0fca0c1622674"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5c5cbb14e4b01df32ab732a7"}, {"problem": 22, "code": "(fn\n  [seq-list]\n  (loop [lst seq-list cnt 0]\n    (if (empty? lst)\n      cnt\n      (recur (rest lst) (inc cnt)))))", "user": "58c50b3de4b021aa9917ed33"}, {"problem": 22, "code": "(fn [x]\n    (reduce\n     (fn [acc _] (inc acc))\n     0\n     x))", "user": "5b269cf3e4b063e2438bcc35"}, {"problem": 22, "code": "(fn [z] \n  (reduce \n   (fn [x y] (+ x 1)) 0 z))", "user": "5c668711e4b0fca0c16226ad"}, {"problem": 22, "code": "#(reduce (fn [a b] (inc a)) 0 %)", "user": "583a3fb7e4b089d5ab817d50"}, {"problem": 22, "code": "#(.length (vec %))", "user": "5c41db45e4b08cd430848ece"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5c66d5d3e4b0fca0c16226af"}, {"problem": 22, "code": "#(->> %1\n      (map (fn [_] 1))\n      (reduce +))", "user": "5c664b87e4b0fca0c16226a5"}, {"problem": 22, "code": "(fn [col]\n  ((fn [col x]\n    (if-not (seq col) x\n      (recur (rest col) (+ x 1)))) col 0))", "user": "5c678b6ee4b0fca0c16226bc"}, {"problem": 22, "code": "(fn [xs]\n  (reduce + (map (constantly 1) xs)))", "user": "58b12635e4b0ebc645576cf4"}, {"problem": 22, "code": "(fn count2 [data]\n  (let [count-recur\n        (fn [data n]\n          (if (= (rest data) data)\n            n\n            (recur (rest data) (+ n 1))))]\n    (count-recur data 0)))", "user": "5c68f931e4b0fca0c16226ea"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5c67d3b4e4b0fca0c16226c9"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5c596d6ce4b01df32ab73257"}, {"problem": 22, "code": "(fn mycount [l]\n  ((fn tmp [l n]\n    (if (empty? l)\n      n \n      (tmp (rest l) (inc n))\n    )) l 0))", "user": "5c6748f0e4b0fca0c16226b6"}, {"problem": 22, "code": "(fn [s]\n  (loop [ss s\n         c 0]\n    (if (not (seq ss)) c\n      (recur (rest ss) (inc c)))))", "user": "5c09e555e4b0bdcf453d16fd"}, {"problem": 22, "code": "(fn length[x] (if (empty? x) 0 (+ 1 (length (rest x)))))", "user": "5c65bf7ce4b0fca0c162269a"}, {"problem": 22, "code": "(fn\n  [x]\n  (loop [x x\n         n 0]\n    (if (= x [])\n      n\n      (recur (rest x) (inc n))\n      )\n    )\n  )", "user": "5c6cb3bfe4b0fca0c1622730"}, {"problem": 22, "code": "#(reduce (fn [counter _] (inc counter)) 0 %)", "user": "5c6d0e51e4b0fca0c1622735"}, {"problem": 22, "code": "(fn\n  [data]\n  (\n   (fn [data size] \n     (\n       if(empty? data)\n         size\n         (recur (rest data) (inc size))\n     )\n   )\n     data 0\n  )\n)", "user": "5c69bf86e4b0fca0c16226fd"}, {"problem": 22, "code": "#(loop [cnt 0\n        lst %]\n   (if (empty? lst)\n     cnt\n     (recur (+ 1 cnt)(rest lst))))", "user": "5c6da283e4b0fca0c162273e"}, {"problem": 22, "code": "(fn fun\n  ([x] (fun x 0 x))\n  ([x counter queue]\n   (if (empty? queue)\n     counter\n     (fun x (+ counter 1) (rest queue)))))", "user": "5c37d6fce4b0d62ef62d9f7b"}, {"problem": 22, "code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "5c6e6df2e4b0fca0c162274d"}, {"problem": 22, "code": "(fn [xs]\n  (loop [xs xs\n         c 0]\n    (if (empty? xs)\n      c\n      (recur (next xs) (inc c)))))", "user": "5c6e04b5e4b0fca0c1622743"}, {"problem": 22, "code": "#(loop [n 0\n        x %]\n  (if (empty? x)\n    n\n    (recur (inc n) (rest x))))", "user": "5c44ad48e4b0e06e1360a37a"}, {"problem": 22, "code": "#(loop[y % counter 0]\n       (if(not(empty? y))\n            (recur(rest y)(inc counter))\n            counter\n       ) \n   )", "user": "5c683fb5e4b0fca0c16226d5"}, {"problem": 22, "code": "(fn [x]\n  (reduce + (map (constantly 1) x)))", "user": "5c6f0755e4b0fca0c162275d"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5c6edb17e4b0fca0c1622759"}, {"problem": 22, "code": "(fn [s]\n  (if (= s '())\n    0\n    (loop [i 1 r (rest s)]\n      (if (= r '())\n        i\n        (recur (inc i) (rest r))))))", "user": "5c6e1006e4b0fca0c1622744"}, {"problem": 22, "code": "(fn mycount ([l] (mycount l 0)) ([l sum] (if (= '() l) sum (mycount (rest l) (+ sum 1)))) )", "user": "5c704f94e4b0fca0c162277d"}, {"problem": 22, "code": "(fn [lst]\n  (loop [i lst cnt 0]\n   (cond (empty? i) cnt\n     :t (recur (rest i)(inc cnt)))))", "user": "5c712fcce4b0fca0c162278e"}, {"problem": 22, "code": "reduce (fn [i coll] (inc i)) 0", "user": "5c718e6ce4b0fca0c1622796"}, {"problem": 22, "code": "(fn [c]\n  (reduce\n   \t(fn [acc e]\n      (inc acc))\n   \t0\n   \tc))", "user": "5c73b8bae4b0fca0c16227ba"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "5c73bcf9e4b0fca0c16227bb"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "5c73a944e4b0fca0c16227b8"}, {"problem": 22, "code": "reduce (fn [x y]\n          (inc x)) 0", "user": "5c72c2b9e4b0fca0c16227ab"}, {"problem": 22, "code": "(fn vars [list] (reduce (fn [cnt _] (+ cnt 1)) 0 list))", "user": "5c6e8b57e4b0fca0c1622755"}, {"problem": 22, "code": "(fn\n  [lst]\n  (loop [res 0\n         lst lst]\n    (if (empty? lst)\n      res\n      (recur (inc res) (rest lst)))))", "user": "5c706232e4b0fca0c162277e"}, {"problem": 22, "code": "(partial reduce (fn [a b] (+ 1 a)) 0)", "user": "5c755e56e4b0fca0c16227d9"}, {"problem": 22, "code": "( fn [x] (reduce + (map (constantly 1) x)))", "user": "5c759597e4b0fca0c16227de"}, {"problem": 22, "code": "reduce #(inc %1 #_%2) 0", "user": "5c706454e4b0fca0c1622780"}, {"problem": 22, "code": "(fn\n   [col] \n   (loop [cnt 0 c col] \n     (if (= (first c) nil) \n       cnt \n       (recur (inc cnt) (rest c) ))))", "user": "5c75a30ee4b0fca0c16227df"}, {"problem": 22, "code": "#(reduce (fn [counter coll] (inc counter)) 0 %)", "user": "5c6e7cc1e4b0fca0c1622752"}, {"problem": 22, "code": "(fn [x]\n((fn [tail len] \n(if (empty? tail) \nlen \n(recur (rest tail) (+ len 1)))\n) x 0))", "user": "5c784248e4b0fca0c162281f"}, {"problem": 22, "code": "(fn tot [coll] (if (empty? coll) 0 (+ 1 (tot (rest coll)))))", "user": "5c792c34e4b0fca0c1622834"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5c70641de4b0fca0c162277f"}, {"problem": 22, "code": "reduce (fn [arg1 arg2] (inc arg1)) 0", "user": "5b9783dae4b0c0b3ffbd4a93"}, {"problem": 22, "code": "(fn [x]\n  (loop [cont 0 \n         lst x]\n    (if (empty? lst)\n        cont\n        (recur (inc cont) (rest lst)))))", "user": "5c787131e4b0fca0c1622825"}, {"problem": 22, "code": "(fn foo [a] \n  (if (= () a)\n    0\n    (+ 1 \n       (foo (rest a)))))", "user": "5a58524ee4b05d388ecb6c7f"}, {"problem": 22, "code": "#(loop [iteration 0\n         items %]\n    (if (empty? items)\n      iteration\n      (recur (inc iteration) (rest items)))\n    )", "user": "5c723f4be4b0fca0c16227a0"}, {"problem": 22, "code": "(fn get-count [s] (cond \n                   (= (rest s) ()) 1\n                   :else (+ 1 (get-count (rest s)))))", "user": "5c7c1d8ee4b0d597f478ca88"}, {"problem": 22, "code": "(fn [coll] (apply + (map (fn [x] 1) coll)))", "user": "589f5f9be4b02bd94d917e81"}, {"problem": 22, "code": "(fn sz [xs]\n  (if-not (nil? (first xs))\n    (+ 1 (sz (rest xs)))\n    0))", "user": "5c7d2b9be4b0d597f478caa1"}, {"problem": 22, "code": "#(reduce (fn [cnt curr] (inc cnt)) 0 %)", "user": "5c76577ae4b0fca0c16227ea"}, {"problem": 22, "code": "#(loop [i 0 [current & remaining] %] (if (nil? current) i (recur (inc i) remaining)))", "user": "5c7bc0a5e4b0fca0c1622865"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5b30cfb4e4b025bcb146f2f2"}, {"problem": 22, "code": "(fn cnt [sequ]\n  (loop [s sequ i 0]\n    (if (nil? (first s))\n      i\n      (recur (rest s) (inc i)))))", "user": "5c7d5a0ce4b0d597f478caab"}, {"problem": 22, "code": "(fn my-count\n  ([coll] (my-count coll 0))\n  ([coll acc]\n   (if (empty? coll)\n     acc\n     (recur (rest coll) (inc acc)))))", "user": "5c7d2cc9e4b0d597f478caa2"}, {"problem": 22, "code": "(fn [seq]\n  ((fn [sq cnt]\n    (do \n      (print sq cnt)\n      (if (nil? (next sq))\n        cnt\n        (recur (next sq) (inc cnt))))    \n    ) seq 1))", "user": "5c7d590ae4b0d597f478caaa"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5c7e82cbe4b0d597f478cacb"}, {"problem": 22, "code": "(fn [l] ((fn cnt [ll n] (if (= [] ll) n (cnt (rest ll) (inc n)))) l 0))", "user": "5c7ef3f3e4b0d597f478cad7"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5c7d5463e4b0d597f478caa9"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "57ac2d6be4b0b8559636fc83"}, {"problem": 22, "code": "(fn [x] (loop [l x n 0] (if (empty? l) n (recur (rest l) (inc n)))))", "user": "5c7f7889e4b0d597f478cae0"}, {"problem": 22, "code": "#(reduce (fn [a _] (inc a)) 0 %)", "user": "5c665311e4b0fca0c16226a7"}, {"problem": 22, "code": "#(reduce \n  (fn [c _] (inc c))\n  0 %)", "user": "5c7eaadfe4b0d597f478cace"}, {"problem": 22, "code": "(fn [col] (+ (.lastIndexOf (vec col) (last (vec col))) 1))", "user": "5c8002cde4b0c8042a70ce09"}, {"problem": 22, "code": "#(reduce +(map (constantly 1)%))", "user": "5c7d947be4b0d597f478cab6"}, {"problem": 22, "code": "reduce (fn [x _] (inc x)) 0", "user": "5c8025d6e4b0c8042a70ce11"}, {"problem": 22, "code": "(fn counting [elements] (reduce + (map (fn [x] 1) elements)))", "user": "5c7d6cb6e4b0d597f478caae"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5c811a04e4b0c8042a70ce20"}, {"problem": 22, "code": "(fn [in] (loop [i 1\n           rm in]\n      (let [[h & t] rm]\n        (if (empty? t)\n          i\n          (recur (inc i) t)))))", "user": "5c8005cee4b0c8042a70ce0a"}, {"problem": 22, "code": "(fn [list]\n  (loop [i 0 l list]\n    (if (empty? l)\n      i\n      (recur (inc i) (rest l)))))", "user": "5c808cafe4b0c8042a70ce18"}, {"problem": 22, "code": "#(loop [coll %1 cnt 0]\n   (if (= nil (first coll))\n     cnt\n     (recur (rest coll) (inc cnt))))", "user": "5c813b27e4b0c8042a70ce22"}, {"problem": 22, "code": "#(reduce (fn [acc _] (inc acc)) 0 (seq %))", "user": "5c829725e4b0c8042a70ce3d"}, {"problem": 22, "code": "(fn [lst] (reduce + (map (constantly 1) lst)))", "user": "5c746c31e4b0fca0c16227c8"}, {"problem": 22, "code": "#(reduce (fn [i _] (inc i)) 0 %)", "user": "5c23ff2ce4b07e362c23059c"}, {"problem": 22, "code": "(fn [lst]\n  (loop [lst lst\n         cnt 0]\n    (if (empty? lst)\n      cnt \n      (recur (rest lst)\n             (inc cnt)))))", "user": "5c748bf5e4b0fca0c16227cb"}, {"problem": 22, "code": "(fn count2\n  [lst]\n  (loop [i   0\n         lst lst]\n    (if (empty? lst)\n      i\n      (recur (inc i)\n             (rest lst)))))", "user": "5c7dad57e4b0d597f478caba"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5c838796e4b0c8042a70ce50"}, {"problem": 22, "code": "(fn [seq]\n  (reduce (fn [acc, cur]\n            (inc acc))\n          0\n          seq))", "user": "5c7c78c9e4b0d597f478ca94"}, {"problem": 22, "code": "#(+ (first(last (map-indexed vector %))) 1)", "user": "5c74b043e4b0fca0c16227ce"}, {"problem": 22, "code": "reduce (fn [c x] (inc c)) 0", "user": "5c805d45e4b0c8042a70ce13"}, {"problem": 22, "code": "(fn\n  [coll]\n  (loop [s coll acc 0]\n    (if (empty? s)\n      acc\n      (recur (rest s) (inc acc)))))", "user": "5c815c33e4b0c8042a70ce24"}, {"problem": 22, "code": "(fn lstCounter [lst ]\n  (if (empty? lst)\n    nil\n    (loop [lst lst\n           n 0\n           ]\n      (if (empty? lst)\n        n\n        (recur (rest lst) (inc n))\n        )\n      )\n    )\n  )", "user": "5c82db41e4b0c8042a70ce42"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5c81c933e4b0c8042a70ce2d"}, {"problem": 22, "code": "#(loop [result 0 arr %] (if (empty? arr) result (recur (inc result) (rest arr))))", "user": "5c8319c3e4b0c8042a70ce45"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5c61889be4b0fca0c1622632"}, {"problem": 22, "code": "reduce (fn [x y] (inc x)) 0", "user": "5c7bb8c0e4b0fca0c1622864"}, {"problem": 22, "code": "#(reduce (fn [cc _] (inc cc)) 0 %)", "user": "5c86a11ce4b0c8042a70ce97"}, {"problem": 22, "code": "reduce (fn [acc _] (inc acc)) 0", "user": "5c7e5be4e4b0d597f478cac7"}, {"problem": 22, "code": "#(loop [s % n 0]\n   (if (empty? s)\n   n\n   (recur (rest s) (+ n 1)\n)))", "user": "5c862d0ae4b0c8042a70ce8c"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5c863a81e4b0c8042a70ce8e"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "5c886a89e4b048ec896c592b"}, {"problem": 22, "code": "#(reduce (fn [a b] (inc a)) 0 %)", "user": "5b22d30ee4b08b1df1c36750"}, {"problem": 22, "code": "reduce (fn [i r] (inc i)) 0", "user": "5c852e3ae4b0c8042a70ce78"}, {"problem": 22, "code": "(fn my-count[s] (loop [s s n 0] (if (empty? s) n (recur (rest s) (inc n)))))", "user": "5c63e034e4b0fca0c1622668"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5c7c8c72e4b0d597f478ca96"}, {"problem": 22, "code": "(fn [x] \n  (reduce + (map (constantly 1) x)))", "user": "5c648b60e4b0fca0c162267b"}, {"problem": 22, "code": "(fn [coll]\n  (loop [coll coll\n         cont 0]\n    (if (empty? coll)\n      cont\n      (recur (rest coll)\n             (inc cont)))))", "user": "5c75a830e4b0fca0c16227e0"}, {"problem": 22, "code": "(fn [x] (reduce + (map (constantly 1) x)))", "user": "5c7741dce4b0fca0c1622806"}, {"problem": 22, "code": "(fn [sequ]\n  (loop [sequ sequ cunt 0]\n    (if (empty? sequ)\n      cunt\n      (recur (rest sequ) (inc cunt)))))", "user": "5c8b6c64e4b048ec896c596f"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5c8adb0ae4b048ec896c595f"}, {"problem": 22, "code": "(fn [colec]\n  (reduce (fn [x y] (+ x 1)) 0 colec))", "user": "5c891afde4b048ec896c5935"}, {"problem": 22, "code": "(fn sz [c] \n  (loop [cnt 0 lst c]\n    (if (empty? lst)\n      cnt\n      (recur (inc cnt) (rest lst)))))", "user": "566a0845e4b04acd4f672e05"}, {"problem": 22, "code": "(fn [coll] \n  (reduce \n   (fn [counter _] (inc counter) )\n   0 coll))", "user": "5c839a4de4b0c8042a70ce53"}, {"problem": 22, "code": "(fn count'\n  ([coll] (count' 0 coll))\n   ([acc coll] \n        (if (empty? coll)\n        \tacc\n        \t(count' (+ acc 1) (rest coll)))))", "user": "5c8d8c4be4b048ec896c59a0"}, {"problem": 22, "code": "(fn [x]\n  (reduce + (map (constantly 1) x)\n          ))", "user": "5c8ecb58e4b048ec896c59b0"}, {"problem": 22, "code": "#(loop [acc       0\n        remaining %1]\n   (if (empty? remaining)\n     acc\n     (recur (inc acc) (rest remaining))))", "user": "5b5bc8e9e4b0c6492753e6b7"}, {"problem": 22, "code": "#(alength(to-array(seq %)))", "user": "5c89c45ce4b048ec896c5949"}, {"problem": 22, "code": "(fn length\n [list]\n (if (empty? list) 0\n  (+ 1 (length (rest list)))))", "user": "5c8f9700e4b048ec896c59be"}, {"problem": 22, "code": "#(loop [input %\n        ct 0]\n   (if (empty? input) ct (recur (rest input) (inc ct))))", "user": "5c8fd8f3e4b048ec896c59c7"}, {"problem": 22, "code": "(fn \n  [x] (loop [i 0 x x]\n            (if (not-empty x)\n                (recur (inc i) (rest x))\n              i)\n    ))", "user": "5c8bc8b4e4b048ec896c5978"}, {"problem": 22, "code": "#(reduce (fn [acc _] (inc acc))\n         0\n         %)", "user": "5c896f46e4b048ec896c5940"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5c9031bae4b048ec896c59ce"}, {"problem": 22, "code": "(fn [coll] (reduce (fn\n            [c _] (inc c)) 0 coll))", "user": "5c92105ce4b048ec896c59f7"}, {"problem": 22, "code": "reduce (fn [a b] (inc a)) 0", "user": "5c9281a0e4b048ec896c5a08"}, {"problem": 22, "code": "(fn nnn [col]\n  (if (empty? col)\n    0\n    (+ (nnn (rest col)) 1)))", "user": "5c7aa5a9e4b0fca0c1622852"}, {"problem": 22, "code": "(fn [s]\n  (loop [a s b 0]\n  (if (empty? a)\n    b\n    (recur (rest a) (inc b)))))", "user": "5c8fa41be4b048ec896c59c1"}, {"problem": 22, "code": "(fn countelems [listname] \n   (loop [xs listname n 0]\n     (if (seq xs)\n       (recur (drop 1 xs) (+ n 1))\n       n )))", "user": "5c8aa1b5e4b048ec896c5959"}, {"problem": 22, "code": "(fn foo [args]\n  (if (= args [])\n    0\n    (+ (foo (rest args)) 1)))", "user": "5c92b9e6e4b048ec896c5a0d"}, {"problem": 22, "code": "#(reduce (fn[cn _] (inc cn)) 0 %)", "user": "5c618140e4b0fca0c162262f"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5c92161de4b048ec896c59f9"}, {"problem": 22, "code": "(fn [coll] (+ (.lastIndexOf (vec coll) (last coll)) 1))", "user": "5c91ae79e4b048ec896c59eb"}, {"problem": 22, "code": "(fn\n [input-list]\n (loop [cnt 0 tmp-list input-list]\n    (if (= '() tmp-list)\n       cnt\n       (recur (inc cnt) (rest tmp-list)))))", "user": "5c9419fae4b048ec896c5a2b"}, {"problem": 22, "code": "#(loop [x % cnt 0] (if (empty? x) cnt (recur (rest x) (inc cnt))))", "user": "5c950334e4b048ec896c5a44"}, {"problem": 22, "code": "#(alength (to-array %))", "user": "5c967845e4b048ec896c5a60"}, {"problem": 22, "code": "(fn len [x] (reduce + (map (constantly 1) x)))", "user": "5c97b621e4b048ec896c5a74"}, {"problem": 22, "code": "(fn length-coll \n  ([coll] (length-coll coll 0))\n  ([coll cnt] (if (empty? coll)\n                cnt\n                (recur (rest coll) (inc cnt)))))", "user": "5c987160e4b048ec896c5a82"}, {"problem": 22, "code": "#(loop [arr % x 0]  (if (empty? arr) x (recur (rest arr) (inc x))))", "user": "5c960295e4b048ec896c5a54"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "5c98d3bee4b048ec896c5a8b"}, {"problem": 22, "code": "(fn [coll]\n  (reduce (fn [i _] (inc i)) 0 coll))", "user": "5c8ffb31e4b048ec896c59c8"}, {"problem": 22, "code": "(fn [sequence]\n          (loop [sequence sequence\n                 cn 0]\n            (if (empty? sequence)\n              cn\n              (recur (rest sequence)\n                     (inc cn)))))", "user": "5c995fa4e4b048ec896c5a96"}, {"problem": 22, "code": "(fn number-of-elements\n  ([coll]\n   (number-of-elements (rest coll) 1))\n  ([coll n]\n   (if (empty? coll)\n     n\n     (number-of-elements (rest coll) (+ n 1)))))", "user": "5abba9ace4b073f1774426d6"}, {"problem": 22, "code": "(fn cardinality\n  [some-sequence]\n  ((fn element-counter [some-sequence n]\n     (if (nil? (first some-sequence))\n       n\n       (element-counter (rest some-sequence) (inc n)))) some-sequence 0))", "user": "5c9a638fe4b048ec896c5aae"}, {"problem": 22, "code": "(fn [coll]\n  (loop [xs coll\n         c 0]\n   (if (seq xs)\n     (recur (rest xs) (inc c))\n     c)))", "user": "5b449f3ee4b02d533a91bc47"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5c9adfebe4b048ec896c5ab9"}, {"problem": 22, "code": "(fn [input]\n   (loop [a input\n          out 0]\n      (if (empty? a)\n          out\n          (recur (rest a) (inc out)))))", "user": "5c94cbb1e4b048ec896c5a3d"}, {"problem": 22, "code": "#(reduce (fn [r _] (inc r)) 0 %)", "user": "5c7f1f16e4b0d597f478cad9"}, {"problem": 22, "code": "reduce (fn [x _] (inc x)) 0", "user": "59286a7de4b072a2710fcee8"}, {"problem": 22, "code": "(fn $cou [lst]\n  (loop [x 0\n        ls lst]\n    (if (empty? ls) \n      x\n      (recur (inc x) (rest ls)\n    ))))", "user": "5c9d0a0be4b048ec896c5afc"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5c9d0f76e4b048ec896c5aff"}, {"problem": 22, "code": "(partial reduce (fn [sofar next] (+ 1 sofar)) 0)", "user": "573d27b4e4b05c31a32c080f"}, {"problem": 22, "code": "(fn [li]\n  ((fn [_li acc]\n    (if (empty? _li)\n      acc\n      (recur (rest _li) (+ 1 acc)))) li 0))", "user": "5c96f3dde4b048ec896c5a67"}, {"problem": 22, "code": "#(loop [[a & r] %, n 0]\n   (if a\n     (recur r (inc n))\n     n))", "user": "5c9c79a6e4b048ec896c5ae8"}, {"problem": 22, "code": "(fn [s] (alength (to-array s)))", "user": "5c9ec959e4b048ec896c5b36"}, {"problem": 22, "code": "(fn [col] (reduce + (map (fn [x] (int 1)) col) ))", "user": "5c9f8b21e4b048ec896c5b58"}, {"problem": 22, "code": "(fn [seq]\n  (loop [cnt 0\n         f-seq seq]\n    (if (= f-seq '())\n      cnt\n      (recur (+ cnt 1) (rest f-seq)))))", "user": "5ca04cc3e4b048ec896c5b69"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5627a6efe4b00e49c7cb47d7"}, {"problem": 22, "code": "(fn [s] (reduce (fn [c _] (inc c)) 0 s))", "user": "5ca03402e4b048ec896c5b68"}, {"problem": 22, "code": "(fn [xs]\n  (loop [ys xs\n         i 0]\n    (if (empty? ys)\n      i\n      (recur (rest ys) (inc i)))))", "user": "5ca14eb1e4b048ec896c5b7d"}, {"problem": 22, "code": "(fn [s] (reduce (fn [a b] (inc a)) 0 s))", "user": "5ca1f2b2e4b048ec896c5b8b"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "5ca1f8a1e4b048ec896c5b8c"}, {"problem": 22, "code": "(fn [x]\n  (loop [items x\n         counter 0]\n    (if (= nil (first items))\n      counter\n      (recur (rest items)\n             (inc counter)))))", "user": "5aafde49e4b073f1774425a1"}, {"problem": 22, "code": "#(loop [arr %1 acc 0]\n     (if\n       (empty? arr)\n       acc\n       (recur (rest arr) (inc acc))))", "user": "5c9dcb36e4b048ec896c5b1d"}, {"problem": 22, "code": "(fn [s]\n  (reduce (fn [prev _] (inc prev)) 0 s))", "user": "5c87d2cbe4b048ec896c591c"}, {"problem": 22, "code": "(fn my-count [x] (if (nil? x) 0 (inc (my-count (next x)))))", "user": "5ca19c10e4b048ec896c5b81"}, {"problem": 22, "code": "(fn [x]\n  (reduce + (map (fn [_] 1) x)\n  ))", "user": "55dcc26ee4b050e68259b3bc"}, {"problem": 22, "code": "(fn numelts [alist]\n  (cond \n   (empty? alist) 0\n   :else (+ 1 (numelts (rest alist)))\n   ))", "user": "5ca3695fe4b048ec896c5ba9"}, {"problem": 22, "code": "(fn [c] (apply + (reduce #(conj %1 (or 1 %2)) nil c)))", "user": "5ca3def0e4b048ec896c5bb0"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5ca1c45ae4b048ec896c5b85"}, {"problem": 22, "code": "(fn ok [a]\n  (reduce (fn [c d] (inc c)) 0 a))", "user": "5ca26d3be4b048ec896c5b98"}, {"problem": 22, "code": "#(loop [c % cnt 0] \n   (if (empty? c)\n     cnt\n     (recur (rest c) (inc cnt))\n   )\n)", "user": "5c9d3fffe4b048ec896c5b0a"}, {"problem": 22, "code": "#(reduce (fn [accum _] (inc accum)) 0 %)", "user": "5c936567e4b048ec896c5a1b"}, {"problem": 22, "code": "#(reduce + (map (constantly 1 ) %))", "user": "5572e18ee4b09a3098a52549"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "5ca622f3e4b048ec896c5be0"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c))0%)", "user": "5c371f5be4b0d62ef62d9f72"}, {"problem": 22, "code": "reduce (fn [c elem] (inc c) ) 0", "user": "5ca7b5bbe4b048ec896c5c04"}, {"problem": 22, "code": "(fn [l]\n  (reduce (fn [x _] (inc x)) 0 l))", "user": "5185ad63e4b0da5a5be3bac2"}, {"problem": 22, "code": "(fn count-e [x]\n  (if (empty? x) 0\n    (inc (count-e (rest x)))))", "user": "55a24698e4b0acc240e31523"}, {"problem": 22, "code": "(fn count-elements [s]\n  (loop [s s\n         n 0]\n    (if (empty? s)\n      n\n      (recur (rest s) (inc n)))))", "user": "5ca9b920e4b048ec896c5c29"}, {"problem": 22, "code": "#(inc(.lastIndexOf (seq %) (last (seq %))))", "user": "5b92f4cbe4b0c0b3ffbd4a42"}, {"problem": 22, "code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "5ca2ca9fe4b048ec896c5b9c"}, {"problem": 22, "code": "reduce (fn [x y] (+ x 1)) 0", "user": "5caad8d9e4b048ec896c5c40"}, {"problem": 22, "code": "(fn count-items [v] \n  (reduce (fn [a b] \n            (+ a 1)) 0 v))", "user": "5cab0766e4b048ec896c5c45"}, {"problem": 22, "code": "#(loop [x %\n        y 0]\n   (if (empty? x)\n     y\n     (recur (rest x) \n            (inc y))))", "user": "5c538cb5e4b0fb8c5ffd99fb"}, {"problem": 22, "code": "(fn q22\n  ([[head & tail] i]\n   (cond\n     (nil? head) i\n     true (recur tail (inc i))))\n  ([s] (q22 s 0)))", "user": "5cab0ad9e4b048ec896c5c46"}, {"problem": 22, "code": "(fn mycount [s]\n  (if (empty? s)\n    0\n    (+ 1 (mycount (rest s)))))", "user": "5cab33e7e4b048ec896c5c48"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5cac846ae4b026601754b85a"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "5cace7bce4b026601754b865"}, {"problem": 22, "code": "#(reduce + 0 (map (fn [_] 1) %))", "user": "5cad2835e4b026601754b86c"}, {"problem": 22, "code": "#(reduce (fn [x _] (inc x)) 0 %)", "user": "5caf0028e4b026601754b88b"}, {"problem": 22, "code": "#(reduce (fn [s _] (inc s)) 0 %)", "user": "5caf9cace4b026601754b89b"}, {"problem": 22, "code": "(fn cnt \n  ([l] (cnt l 0))\n  ([l c] \n   (if (empty? l)\n     c\n     (cnt (rest l) (+ c 1))\n   )\n  )\n)", "user": "5caf99abe4b026601754b898"}, {"problem": 22, "code": "#(\n  (fn my-count [ls len] \n    (if (empty? ls) \n      len\n      (my-count (drop-last ls) (inc len))))\n  % 0)", "user": "5cafaa0fe4b026601754b89e"}, {"problem": 22, "code": "(fn [seq]\n  (loop [i 0\n         lst seq]\n    (if (empty? lst)\n      i\n      (recur (inc i) (drop 1 lst))\n    )\n  )\n)", "user": "5c9b07cde4b048ec896c5abd"}, {"problem": 22, "code": "(fn [x] (reduce (fn [x y] (inc x)) 0 x))", "user": "5caf9a07e4b026601754b899"}, {"problem": 22, "code": "(fn count-a-seq [lat]\n  (reduce (fn [x y] (+ x 1)) 0 lat))", "user": "5cb0e2fee4b026601754b8bf"}, {"problem": 22, "code": "#(reduce + (map (fn [_] 1) %))", "user": "5cb1d65ae4b026601754b8d3"}, {"problem": 22, "code": "(fn cou [x]\n  (loop [y x c 0]\n    (if (empty? y)\n      c\n      (recur (rest y) (inc c)))))", "user": "5c9b848fe4b048ec896c5acf"}, {"problem": 22, "code": "(fn [list]\n\n  (loop [cur-list list\n         ret-val 0]\n    (if (empty? cur-list)\n      (int ret-val)\n      (recur (rest cur-list) (inc ret-val))\n      )\n    )\n  )", "user": "5cada3b8e4b026601754b872"}, {"problem": 22, "code": "#(reduce + (map (fn [_] 1) %))", "user": "5cb246d1e4b026601754b8dc"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5cb3a8c3e4b026601754b904"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "5cadd6a4e4b026601754b87b"}, {"problem": 22, "code": "(fn [seq] ((fn [seq num] (if (empty? seq) num (recur (rest seq) (inc num)))) seq 0))", "user": "5cb47a0fe4b026601754b91b"}, {"problem": 22, "code": "reduce (fn [acc l] (inc acc)) 0", "user": "5bcf95ace4b0e9689409ee2e"}, {"problem": 22, "code": "(fn recursive-count ([s]  (recursive-count s 0)) ([s iteration] (if (empty? s) iteration (recursive-count (rest s) (inc iteration)))))", "user": "5cb4e764e4b026601754b929"}, {"problem": 22, "code": "(fn \n  [sq]\n  (loop [mysq sq\n         cnt 0]\n    (if (empty? mysq)\n      cnt\n      (recur (rest mysq) (inc cnt)))))", "user": "5cb351b7e4b026601754b8f9"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "5cb556f9e4b026601754b934"}, {"problem": 22, "code": ";(fn [seq] (reduce (fn [a b] (inc a)) 0 seq))\n(fn [seq]\n  (loop [c 0 s seq]\n    (if (not (empty? s))\n      (recur (inc c) (rest s))\n      c)))", "user": "5cb39440e4b026601754b903"}, {"problem": 22, "code": "(fn [x] (reduce (fn [acc coll] (inc acc)) 0 x))", "user": "5cb62652e4b026601754b949"}, {"problem": 22, "code": "(fn [x](\n        (fn named [y z] (\n                   cond\n                   (= y '()) z\n                   :else (named (rest y) (+ z 1))\n                   )) x 0\n        ))", "user": "5cb79c51e4b026601754b970"}, {"problem": 22, "code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "5cb41c40e4b026601754b911"}, {"problem": 22, "code": "(fn [x] (reduce + (map #(if (nil? %) 0 1) x)))", "user": "5cb11a72e4b026601754b8c6"}, {"problem": 22, "code": "#(loop [cnt 0 col %] (if (empty? col) cnt (recur (inc cnt) (rest col))))", "user": "5c06fab7e4b0bdcf453d16bd"}, {"problem": 22, "code": "(fn [coll]\n  (reduce (fn [x y] (inc x)) 0 coll))", "user": "5cb71f35e4b026601754b961"}, {"problem": 22, "code": "#(loop [c % i 0]\n    (if (empty? c)\n      i\n      (recur (rest c) (inc i)))\n  )", "user": "5cb703e8e4b026601754b95b"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5cb9e011e4b026601754b9b0"}, {"problem": 22, "code": "#(loop [list % c 0]\n   (if (empty? list)\n     c\n     (recur (rest list) (+ 1 c))))", "user": "5ca361bfe4b048ec896c5ba6"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5cbadebee4b026601754b9c8"}, {"problem": 22, "code": "(fn [coll] (reduce (fn [acc _] (inc acc)) 0 coll))", "user": "5cb9ab41e4b026601754b9a8"}, {"problem": 22, "code": "(fn [x]\n  (reduce (fn [c _] (inc c)) 0 x))", "user": "5cb7f580e4b026601754b97a"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5a09ebf8e4b0eab8c0448932"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "5cbb2d22e4b026601754b9d0"}, {"problem": 22, "code": "(fn [coll]\n  (loop [i 0 c coll]\n    (if (empty? c)\n      i\n      (recur (inc i) (rest c)))))", "user": "5cbb0436e4b026601754b9cc"}, {"problem": 22, "code": "(fn [coll]\n  (loop [remaining coll\n        c 0]\n    (if (empty? remaining)\n      c\n      (recur (rest remaining) (inc c)))))", "user": "5cae5247e4b026601754b884"}, {"problem": 22, "code": "(fn [l] (reduce (fn [x y] (+ x 1)) 0 l))", "user": "5cbc9dace4b026601754b9eb"}, {"problem": 22, "code": "reduce (fn[c _] (inc c)) 0", "user": "5cbcacc2e4b026601754b9ed"}, {"problem": 22, "code": "(fn [x] (reduce (fn [acc, item] (+ acc 1)) 0 x))", "user": "5cbdc591e4b026601754ba00"}, {"problem": 22, "code": "(fn mycount [x] \n  (if (empty? x) 0\n      (inc (mycount (rest x)))\n  )\n)", "user": "56d5c1b0e4b0ea9b8538f7c3"}, {"problem": 22, "code": "(fn [coll]\n  (reduce (fn [x y] (+ x 1)) 0 coll))", "user": "5cbe5fdfe4b0ccb061962750"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5cbeadf2e4b0ccb061962755"}, {"problem": 22, "code": "(fn [arg1]\n      (loop [iter arg1 index 0]\n            (if (empty? iter)\n              index \n              (recur (rest iter) (inc index )))))", "user": "5cb6256ce4b026601754b947"}, {"problem": 22, "code": "(fn a [x]\n  (if (seq x)\n    (inc (a (rest x)))\n    0))", "user": "5cbf3e1fe4b0ccb061962767"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "59f6b220e4b0966464fe6ad9"}, {"problem": 22, "code": "(fn [my_seq] (apply + (map (fn [_] 1) my_seq)))", "user": "5cbe21eee4b0ccb06196274b"}, {"problem": 22, "code": "#(apply + (map (fn [x] 1) %))", "user": "5cb0f70ce4b026601754b8c1"}, {"problem": 22, "code": "#(reduce (fn [acc _] (+ acc 1)) (cons 0 %))", "user": "5c547cf0e4b0fb8c5ffd9a0b"}, {"problem": 22, "code": "(fn counter\n  ([s] (counter s 0))\n  ([s n] \n  (if (empty? s) \n    n\n    (recur (rest s) (inc n))\n  ))\n)", "user": "5cc1584de4b0ccb0619627ad"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5cc1def9e4b0ccb0619627c4"}, {"problem": 22, "code": "#(reduce + 0 (map (constantly 1) %))", "user": "5cbfa589e4b0ccb061962774"}, {"problem": 22, "code": "(fn [l]\n  (reduce + (map (constantly 1) l)))", "user": "5cc28739e4b0ccb0619627d8"}, {"problem": 22, "code": "(fn [list]\n  (loop [xs list, n 0]\n    (if (empty? xs)\n      n\n      (recur (drop 1 xs)(+ n 1)))))", "user": "5cbdadeee4b026601754b9ff"}, {"problem": 22, "code": "(fn [x]\n  (loop [remaining x\n         total 0]\n    (if (empty? remaining)\n      total\n      (recur (rest remaining) (inc total)))))", "user": "5cc230cee4b0ccb0619627cd"}, {"problem": 22, "code": "(fn c [l] \n  ((fn [l, s]\n\t(if (empty? l)\n      s\n      (recur (rest l) (inc s)))) l 0))", "user": "5caa5e42e4b048ec896c5c35"}, {"problem": 22, "code": "#(loop [my-seq % i 0]\n   (if (empty? my-seq) \n     i\n     (recur (rest my-seq) (inc i))))", "user": "5cbc1ee7e4b026601754b9e1"}, {"problem": 22, "code": "(fn scount \n  ([x] (scount x 0))\n  ([x n] \n    (if (empty? x)\n      n\n      (scount (rest x) (inc n)))))", "user": "5c8cfff8e4b048ec896c5996"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5cbd5b42e4b026601754b9f6"}, {"problem": 22, "code": "#(loop [n 0 xs %]\n   (if\n     (empty? xs)\n     n\n     ( recur (inc n) (rest xs) )\n   )\n )", "user": "5cc3f603e4b0ccb0619627fd"}, {"problem": 22, "code": "#(loop [i 0 s %]\n   (if (not (empty? s))\n     (recur (inc i) (rest s))\n    i))", "user": "5cc6f982e4b0ccb06196282d"}, {"problem": 22, "code": "(fn [s]\n  (reduce (fn [acc _] (inc acc)) 0 s))", "user": "5cc7073de4b0ccb06196282e"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5cc7342be4b0ccb061962830"}, {"problem": 22, "code": "(fn [coll]\n  (loop [i 0\n         remaining coll]\n    (if (empty? remaining)\n      i\n      (recur (inc i) (rest remaining)))))", "user": "5cc75ffce4b0ccb061962836"}, {"problem": 22, "code": "#(loop [cnt 0 temp-list %] \n   (if \n     (empty? temp-list)\n     cnt (recur (inc cnt) (rest temp-list)) \n   )\n )", "user": "5cc7692ce4b0ccb061962837"}, {"problem": 22, "code": "#(loop [coll % n 0]\n   (if coll\n     (recur (next coll) (+ 1 n))\n     n))", "user": "5cc80598e4b0ccb061962840"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "5cc77807e4b0ccb061962838"}, {"problem": 22, "code": "(fn [a] (reduce + (map (fn [a] (+ 1)) a)))", "user": "5cc1f975e4b0ccb0619627c8"}, {"problem": 22, "code": "(fn [nums] \n  (loop [i 0\n         nums nums]\n    (if (empty? nums) \n      i \n   \t  (recur (inc i) (rest nums)))))", "user": "5c34f7efe4b0d62ef62d9f5b"}, {"problem": 22, "code": "(fn [xs] (reduce + (map (fn [_] 1) xs)))", "user": "5cc9031ee4b0ccb061962859"}, {"problem": 22, "code": "(fn lenList [l] ( if (empty? l) 0 (+ (lenList (rest l)) 1) ) )", "user": "5cca4b54e4b0ccb06196286d"}, {"problem": 22, "code": "reduce (fn [a b] (+ a 1)) 0", "user": "5cc6b4bfe4b0ccb061962827"}, {"problem": 22, "code": "#(reduce (fn [r v] (inc r)) 0 %)", "user": "5a9bfd57e4b0d174b936c7d0"}, {"problem": 22, "code": "(fn [seq]\n  (loop [el-count 1\n         remain (rest seq)]\n    (if (empty? remain)\n      el-count\n      (recur (inc el-count ) (rest remain)))\n    )\n  )", "user": "5ccaed31e4b0ccb061962877"}, {"problem": 22, "code": "(fn [x] (reduce (fn [c _] (inc c)) 0 x))", "user": "5ccb3792e4b0ccb061962882"}, {"problem": 22, "code": "(fn [lista]\n      (loop [list lista contador 0]\n        (if(empty? list) contador\n                         (recur (rest list)(inc contador))\n                         )\n        )\n      )", "user": "5ccb7ba6e4b0ccb061962885"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "5ccc9078e4b0ccb061962899"}, {"problem": 22, "code": "(fn [s]\n  (loop [r s i 0]\n    (if (nil? r)\n      i\n      (recur (next r) (inc i)))))", "user": "52d81642e4b09f7907dd1387"}, {"problem": 22, "code": "(fn [x] (loop [c x co 0]\n  (if (empty? c) co (recur (rest c) (inc co)))))", "user": "5ccb0bbee4b0ccb06196287c"}, {"problem": 22, "code": "(fn ncount [coll]\n(loop [coll coll n 0]\n(if coll\n(recur (next coll) (inc n))\n n)))", "user": "59ea07c9e4b0249b72820756"}, {"problem": 22, "code": "(fn [l]\n  (loop [l l c 0]\n    (if (empty? l)\n      c\n      (recur (rest l) (+ c 1)))))", "user": "5cc74e44e4b0ccb061962833"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5ccda634e4b0ccb0619628a9"}, {"problem": 22, "code": "(fn [x]\n   (loop [i 0 y x]\n     (if (empty? y)\n       i\n       (recur (inc i) (rest y)))))", "user": "5ccc2a03e4b0ccb06196288f"}, {"problem": 22, "code": "(fn [s]\n  (loop [ls s\n         c 0]\n    (if (nil? (first ls)) \n      (do\n        (println (str \"is empty \" (first ls)))\n        c\n      )\n      (do \n        (println (str \"not nil \" (first ls) \" rest \" (rest ls) ))\n        (recur (rest ls) (inc c)))\n    )\n    )\n  )", "user": "5cc82af4e4b0ccb061962843"}, {"problem": 22, "code": "(fn [list]\n  (reduce\n    (fn [num entry]\n      (+ num 1))\n    0\n    (seq list)))", "user": "5b99554ae4b0c0b3ffbd4ace"}, {"problem": 22, "code": "#(if (string? %) (.length %) (.size %) )", "user": "5ccef16be4b0ccb0619628bf"}, {"problem": 22, "code": "(fn [coll]\n  (loop [coll coll\n         length 0]\n    (if (empty? coll)\n      length\n      (recur (rest coll) (inc length)))))", "user": "5cc4b34de4b0ccb061962805"}, {"problem": 22, "code": ";; #(.size (seq %))\n#(apply + (map (constantly 1) %))", "user": "5ccf21c4e4b0ccb0619628c1"}, {"problem": 22, "code": "#(reduce +\n  (map \n   (constantly 1)\n   %\n  )\n )", "user": "5ccee75ae4b0ccb0619628bc"}, {"problem": 22, "code": "#(loop [l % n 0] (if (empty? l) n (recur (rest l) (+ n 1))))", "user": "5ccf2dc3e4b0ccb0619628c2"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %1))", "user": "5ccf3879e4b0ccb0619628c4"}, {"problem": 22, "code": "(fn [x] (reduce + (map (fn [_] 1) x)))", "user": "5cce7de4e4b0ccb0619628b7"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5c9147c1e4b048ec896c59df"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "5c97821be4b048ec896c5a70"}, {"problem": 22, "code": "(fn [lst]\n  (loop [l lst, n 0]\n    (if (empty? l)\n      n\n      (recur (rest l) (inc n)))))", "user": "5cd127bce4b0ccb0619628e1"}, {"problem": 22, "code": "#((fn [s n] (if (empty? s) n (recur (rest s) (inc n)))) % 0)", "user": "5cd26163e4b0ccb0619628fe"}, {"problem": 22, "code": "reduce (fn [a _] (inc a)) 0", "user": "5cd1f5dae4b0ccb0619628f7"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "5cd33e1ce4b0ccb06196290a"}, {"problem": 22, "code": "(fn \n  [x]\n  (reduce   (fn [c _] (inc c)) 0 x)\n  )", "user": "5cd17bf1e4b0ccb0619628eb"}, {"problem": 22, "code": "#(loop [x %1 n 0] (if (empty? x) n (recur (rest x) (inc n))))", "user": "5cd4c3dae4b0ccb061962925"}, {"problem": 22, "code": "#(loop [len 0\n       coll %]\n  (if (empty? coll)\n    len\n    (let [[num & the-rest] coll]\n      (recur (inc len) the-rest))))", "user": "5cd639b4e4b0ccb061962940"}, {"problem": 22, "code": "#(reduce (fn [x _] (+ 1 x)) 0 (seq %))", "user": "5cd5f3f8e4b0ccb06196293d"}, {"problem": 22, "code": "(fn [xs]\n  (reduce (fn [a _] (+ 1 a)) 0 xs))", "user": "5cd7cac9e4b0ccb06196294f"}, {"problem": 22, "code": "#(apply + (map (constantly 1) %))", "user": "5c9dc84de4b048ec896c5b1c"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %1))", "user": "5cd42a01e4b0ccb061962915"}, {"problem": 22, "code": "(fn \n  [x] \n  \n  (reduce (fn [total y] (+ total 1)) 0 x)  \n  \n)", "user": "5cd1fd2fe4b0ccb0619628f8"}, {"problem": 22, "code": "(fn [s] \n  (loop [thes (seq s) thecount 0]\n    (if (empty? thes)\n      thecount\n      (recur (rest thes) (inc thecount))\n    )\n  )\n)", "user": "5cd67eb2e4b0ccb061962943"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5cccac42e4b0ccb06196289d"}, {"problem": 22, "code": "(fn [s] (loop [s s\n                   acc 0]\n             (if (empty? s)\n                 acc\n                 (recur (rest s) (+ acc 1)))))", "user": "5cd99946e4b05ee0cb311706"}, {"problem": 22, "code": "#(reduce (fn[x y] (inc x)) 0 %)", "user": "5cd99bebe4b05ee0cb311707"}, {"problem": 22, "code": "(fn [coll]\n  \n  (loop [counter 0 \n         xs coll]\n    (if (empty? xs)\n      counter\n      (recur (+ counter 1)\n             (rest xs)))\n    ))", "user": "5cd9b8e0e4b05ee0cb311708"}, {"problem": 22, "code": "(fn [s] (reduce (fn [acc _] (inc acc)) 0 s))", "user": "5cd9dc85e4b05ee0cb31170d"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5c07522ae4b0bdcf453d16c4"}, {"problem": 22, "code": "reduce #(inc (first %&)) 0", "user": "5c93f5d5e4b048ec896c5a28"}, {"problem": 22, "code": "(fn [coll] (reduce + (map (constantly 1) coll)))", "user": "5cd4e1b2e4b0ccb061962927"}, {"problem": 22, "code": "reduce (fn [x y] (+ x 1)) 0", "user": "5cdaa794e4b05ee0cb311719"}, {"problem": 22, "code": "reduce (fn [a b] (inc a)) 0", "user": "5cdd934ce4b05ee0cb311761"}, {"problem": 22, "code": "#(loop [col %1 len 0]\n   (if (empty? col)\n     len\n     (recur (rest col)\n            (inc len))))", "user": "5cdedd3de4b0a17bb84e2af9"}, {"problem": 22, "code": "(fn [xs] (reduce + (map (constantly 1) xs)))", "user": "5cdc08a2e4b05ee0cb31173a"}, {"problem": 22, "code": "(fn [xs]\n  (loop [xs xs n 0]\n    (if (empty? xs) \n      n\n      (recur (rest xs) (inc n)))))", "user": "5cdfe2aee4b0a17bb84e2b04"}, {"problem": 22, "code": "(fn length [coll]\n  (if\n    (empty? coll) 0\n    (+ 1 (length (rest coll)))))", "user": "55d06492e4b0e31453f64a39"}, {"problem": 22, "code": "#(inc (if (coll? %)\n         (do \n           (.lastIndexOf % (last %)) ) \n       (do \n         (.lastIndexOf % (.toString (last %)))\n         )  ) )", "user": "567be591e4b05957ce8c61ab"}, {"problem": 22, "code": "(fn cnt [s] (if (empty? s) 0 (+ 1 (cnt (rest s)))))", "user": "5cdf4bd2e4b0a17bb84e2b00"}, {"problem": 22, "code": "(fn length [l]\n  (if (empty? l) \n    0\n    (inc (length (rest l)))))", "user": "5ce05561e4b0a17bb84e2b08"}, {"problem": 22, "code": "(fn [coll] (reduce (fn [acc _] (inc acc)) 0 coll))", "user": "5ce077e9e4b0a17bb84e2b0c"}, {"problem": 22, "code": "reduce (fn [x _] (inc x)) 0", "user": "5ce06034e4b0a17bb84e2b09"}, {"problem": 22, "code": "reduce (fn [acc x] (+ acc 1)) 0", "user": "5c925cb3e4b048ec896c5a05"}, {"problem": 22, "code": "(fn count'\n  [coll]\n  (if (empty? coll) 0\n    (inc (count' (rest coll)))))", "user": "5ce1f591e4b0a17bb84e2b1f"}, {"problem": 22, "code": "(fn [s]\n  (reduce (fn [x y] (+ x 1)) 0 s))", "user": "5cdd473ae4b05ee0cb311757"}, {"problem": 22, "code": "(fn [seq] (last (map (fn [i _] (inc i)) (range) seq)))", "user": "5cd06cfbe4b0ccb0619628d2"}, {"problem": 22, "code": "(fn [seq]\n  (loop [cur-seq seq\n         _count 0]\n    (if (not (empty? cur-seq))\n      (recur (rest cur-seq) (inc _count))\n      _count)\n    )\n  )", "user": "5cdbb1b2e4b05ee0cb311732"}, {"problem": 22, "code": "(fn count-a-seq [lat] (reduce (fn [x y] (+ x 1)) 0 lat))", "user": "5ce2afe8e4b0a17bb84e2b2b"}, {"problem": 22, "code": "(fn [col]\n   (loop [ctr 0\n          col col]\n     (if (empty? col)\n       ctr\n       (recur (inc ctr) (rest col))\n       )))", "user": "5cdd7157e4b05ee0cb31175b"}, {"problem": 22, "code": "(fn mycount\n  [l]\n  (cond\n   (= l '()) 0\n   :else (+ 1 (mycount (rest l)))\n   )\n  )", "user": "5cd5ac3ae4b0ccb061962937"}, {"problem": 22, "code": "#(loop[l % \n        result 0] \n    (if (empty? l) result\n                    (recur (rest l) (inc result))))", "user": "5cd47c26e4b0ccb06196291e"}, {"problem": 22, "code": "#(reduce\n    (fn [counter %] (inc counter))\n    0 %)", "user": "5ce2bf8ee4b0a17bb84e2b2e"}, {"problem": 22, "code": "reduce #(inc (first %&)) 0", "user": "5cdaf05ee4b05ee0cb311722"}, {"problem": 22, "code": "(fn [col]\n  (reduce (fn [a b] (inc a)) 0 col))", "user": "5ce3e239e4b0a17bb84e2b46"}, {"problem": 22, "code": "#(reduce (fn [a b] (inc a)) 0 %)", "user": "5c87c79be4b048ec896c591b"}, {"problem": 22, "code": "(fn [vs] \n  (reduce + \n          (map (constantly 1) vs)\n          ))", "user": "5ce41d1be4b0a17bb84e2b50"}, {"problem": 22, "code": "(fn length [l] (if (empty? l) 0 (+ 1 (length (rest l)))))", "user": "5ce45b5be4b0a17bb84e2b5b"}, {"problem": 22, "code": "#(apply + (map (fn [_] 1) %))", "user": "5177097de4b085adf681d892"}, {"problem": 22, "code": "(fn size [coll]\n  (if (empty? coll)\n    0\n    (inc (size (rest coll)))))", "user": "5ce52271e4b0a17bb84e2b69"}, {"problem": 22, "code": "reduce (fn [a b] (inc a)) 0", "user": "5ce2b15fe4b0a17bb84e2b2c"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5ce44ee2e4b0a17bb84e2b57"}, {"problem": 22, "code": "(fn [l] (loop [i 0 rl l] (if (empty? rl) i (recur (inc i) (rest rl)))))", "user": "5ce56db6e4b0a17bb84e2b72"}, {"problem": 22, "code": "reduce (fn [acc x] (+ 1 acc)) 0", "user": "5ce6c354e4b0a17bb84e2b93"}, {"problem": 22, "code": "(fn mycount [x] (if (empty? x) 0 (+ 1 (mycount (rest x)))))", "user": "5ce708b7e4b0a17bb84e2b9b"}, {"problem": 22, "code": "(fn [coll]\n   (loop [coll coll c 0]\n     (if-not (seq coll)\n       c\n       (recur (rest coll) (inc c)))))", "user": "4f847f0ee4b033992c121c33"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5c98d91ee4b048ec896c5a8c"}, {"problem": 22, "code": "(fn [s]\n  (loop [x s\n         y 1]\n    ( if (= (rest x) '())\n     y\n     (recur (rest x) (inc y) \n            ))))", "user": "5ce6a0f4e4b0a17bb84e2b8d"}, {"problem": 22, "code": "(fn c [a b] (if (empty? b) a (c (inc a) (rest b)))) 0", "user": "5ce7e877e4b0a17bb84e2ba8"}, {"problem": 22, "code": "#(->> %\n       (map (fn [x] 1))\n       (apply +))", "user": "5b38d2f3e4b02d533a91bbaf"}, {"problem": 22, "code": "#(reduce (fn [x _] (inc x)) 0 %)", "user": "5ce6f93be4b0a17bb84e2b99"}, {"problem": 22, "code": "reduce (fn[r x](inc r)) 0", "user": "5ce62d8ee4b0a17bb84e2b83"}, {"problem": 22, "code": "#(reduce (fn [acc x] (+ acc 1)) 0 %)", "user": "5ce78776e4b0a17bb84e2ba2"}, {"problem": 22, "code": "reduce (fn [i _] (inc i)) 0", "user": "5ce56455e4b0a17bb84e2b71"}, {"problem": 22, "code": "(fn [x]\n  ((fn my-count [x n]\n     (if (empty? x)\n       n\n       (my-count (rest x) (+ n 1))))\n    x 0))", "user": "5ce5277de4b0a17bb84e2b6a"}, {"problem": 22, "code": "#(loop [xs %1 n 0] (if (empty? xs) n (recur (rest xs) (inc n))))", "user": "5cea0bd4e4b0a17bb84e2bc9"}, {"problem": 22, "code": "#(loop [result 0, col %]\n   (if (seq col)\n     (recur (inc result) (rest col))\n     result\n    )\n  )", "user": "5cda72ffe4b05ee0cb311714"}, {"problem": 22, "code": "#(loop [res 0 a-seq %]\n      (if (empty? a-seq) res\n                         (recur (inc res) (rest a-seq))))", "user": "5ce36e02e4b0a17bb84e2b3e"}, {"problem": 22, "code": "#(reduce (fn [r, _] (+ r 1)) 0 %1)", "user": "5cead199e4b0a17bb84e2bd4"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5ceaeefbe4b0a17bb84e2bda"}, {"problem": 22, "code": "(fn [x]\n  (reduce + (map (fn [_] 1) x)))", "user": "5cebdfd4e4b0a17bb84e2be9"}, {"problem": 22, "code": "#(loop [c 0 sq %1]\n  (if (not (empty? (rest sq)))\n    (recur (+ 1 c) (rest sq)) ;yes\n    (+ 1 c))) ;no", "user": "5cea925ce4b0a17bb84e2bd2"}, {"problem": 22, "code": "(fn [coll]\n  (loop [i 0\n         coll coll]\n    (if (empty? coll)\n      i\n      (recur (inc i)\n             (rest coll)))))", "user": "5cec07fce4b0a17bb84e2bf0"}, {"problem": 22, "code": "(fn counter [coll] (if (empty? coll) 0 (+ (counter (next coll)) 1)))", "user": "5ceca436e4b0a17bb84e2bf8"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5cebafbbe4b0a17bb84e2be6"}, {"problem": 22, "code": "(fn [li] (let [f (fn [li2 acc] \n                   (if (empty? li2) \n           \t\t\t\tacc\n           \t\t\t\t(recur (rest li2) (inc acc))\n          \t\t ))]\n       (f li 0)\n  )\n  )", "user": "5ced0ca0e4b0a17bb84e2bfd"}, {"problem": 22, "code": "(fn [x] (loop [a 0 x x] (if (first x) (recur (+ 1 a) (next x)) a)))", "user": "5cece5a2e4b0a17bb84e2bfb"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "58468c4ee4b089d5ab817e95"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5baaae06e4b0a20761a23464"}, {"problem": 22, "code": "(fn [x]\n  (reduce (fn [x y] (inc x)) 0 x))", "user": "5c78a3eae4b0fca0c1622829"}, {"problem": 22, "code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "5cee0c0be4b0aaa82f1129d8"}, {"problem": 22, "code": "#(reduce (fn [x _] (inc x)) 0 %)", "user": "5cd4f7c5e4b0ccb06196292a"}, {"problem": 22, "code": "#_#(reduce\n\u00a0\u00a0\u00a0\u00a0(fn [c _] (inc c))\n\u00a0\u00a0\u00a0\u00a0\u00a00 %)\n\n#(loop [result 0 c %]\n    (if(empty? c) result\n    (recur (inc result) (rest c))))", "user": "5cd16529e4b0ccb0619628e7"}, {"problem": 22, "code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "5cee4bc9e4b0aaa82f1129dc"}, {"problem": 22, "code": "(fn tne\n  [sequ]\n  (if (= (rest sequ) [] )\n    1\n    (+ 1 (tne (rest sequ)))\n    )\n  )", "user": "5ced79abe4b0aaa82f1129d0"}, {"problem": 22, "code": "(fn [ls] (reduce + (map (fn [x] 1) ls)))", "user": "5cec2b79e4b0a17bb84e2bf4"}, {"problem": 22, "code": "#(reduce +( map (constantly 1 ) %))", "user": "59dfb8f9e4b08badc2a0c4db"}, {"problem": 22, "code": "(partial reduce (fn [c _] (inc c)) 0)", "user": "5cf115eee4b0aaa82f112a08"}, {"problem": 22, "code": "(fn [x] (reduce (fn [y z] (inc y)) 0 x))", "user": "5cf11680e4b0aaa82f112a09"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5ce5b43be4b0a17bb84e2b7a"}, {"problem": 22, "code": "(fn cnt [x] ((fn subcnt [y n] (if (empty? y) n (subcnt (rest y) (+ n 1)))) x 0))", "user": "5cdc3c69e4b05ee0cb311741"}, {"problem": 22, "code": "#(reduce (fn [x, s] (inc x)) 0 %)", "user": "5cec049ce4b0a17bb84e2bef"}, {"problem": 22, "code": "reduce (fn [a _] (inc a)) 0", "user": "5ce97826e4b0a17bb84e2bc0"}, {"problem": 22, "code": "#(loop [seq %1 cnt 0]\n   (if (empty? seq) cnt\n     (recur (rest seq) (inc cnt))))", "user": "592bb806e4b072a2710fcf46"}, {"problem": 22, "code": "(fn my-count\n  [coll]\n  (reduce\n    (fn[acc x]\n      (when x\n        (+ acc 1)))\n    0\n    coll))", "user": "5cf1d9e3e4b0aaa82f112a18"}, {"problem": 22, "code": "(fn [xs] (apply + (map (fn [x] 1) xs)))", "user": "5cf4094be4b0aaa82f112a35"}, {"problem": 22, "code": "reduce (fn [c _] (+ c 1)) 0", "user": "5c3440fee4b0d62ef62d9f50"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5cf50e67e4b087f62be35a8d"}, {"problem": 22, "code": "reduce (fn [a c] (+ a 1)) 0", "user": "5cf5775ce4b087f62be35a98"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5cf68090e4b0b71b1d808a59"}, {"problem": 22, "code": "(fn [a-seq]\n  (reduce + 0 (map (fn [elem]\n         1) a-seq)))", "user": "5cea0d52e4b0a17bb84e2bca"}, {"problem": 22, "code": "reduce (fn [x y] (inc x)) 0", "user": "5cf62f9be4b087f62be35aa8"}, {"problem": 22, "code": "(fn \n  [seq]\n  (loop [test seq length 0]\n    (if (empty? test)\n      length\n      (recur (rest test) (+ length 1)))))", "user": "5ce102b0e4b0a17bb84e2b10"}, {"problem": 22, "code": "(fn [coll]\n  (loop [n 0 c coll]\n    (if (empty? c)\n      n\n      (recur (inc n) (rest c)))))", "user": "5cf935f4e4b0b71b1d808a8f"}, {"problem": 22, "code": "(fn [x] (reduce (fn [c o] (inc c)) 0 x) )", "user": "5cf938a5e4b0b71b1d808a90"}, {"problem": 22, "code": "(partial (fn local-count [n coll]\n             (if (nil? (first coll)) n (local-count (+ 1 n) (rest coll)))) 0)", "user": "5be1c6c6e4b0ed4b8aab4ca5"}, {"problem": 22, "code": "#(reduce (fn [acc itm] (inc acc)) 0 %)", "user": "5cf9bfd9e4b0cc9c91588131"}, {"problem": 22, "code": "reduce (fn [x,y] (+ x 1)) 0", "user": "5cf9180fe4b0b71b1d808a8c"}, {"problem": 22, "code": "(fn [x] (let [seq (vec x) ]\n                         (loop [i 0]\n                           (if (= nil (get seq i))\n                             i\n                             (recur (+ i 1))\n                           )\n                         )\n                       )\n               )", "user": "5cf72682e4b0b71b1d808a68"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5cfa344de4b0cc9c9158813c"}, {"problem": 22, "code": "#(reduce (fn[cnt x] (inc cnt)) 0 (vec %))", "user": "59924289e4b0866487ed0d76"}, {"problem": 22, "code": "reduce (fn [cc _] (inc cc)) 0", "user": "5cfcf4d9e4b0cc9c91588162"}, {"problem": 22, "code": "(fn [l] (reduce (fn [a, b] (inc a)) 0 l))", "user": "5cfcea6ae4b0cc9c91588161"}, {"problem": 22, "code": "(fn [s] (reduce (fn [acc n] (+ 1 acc)) 0 s))", "user": "5cfd5a93e4b0cc9c91588168"}, {"problem": 22, "code": "(fn [coll]\n(loop [c coll n 0]\n  (if (seq c)\n    (recur (rest c) (inc n))\n    n)))", "user": "5cf62ecce4b087f62be35aa7"}, {"problem": 22, "code": "#(reduce (fn [x _] (inc x)) 0 %)", "user": "5cfe7c39e4b0cc9c91588178"}, {"problem": 22, "code": "#(loop [i 0 b %]\n  (if (empty? b) i\n   (recur (inc i) (rest b)))\n)", "user": "5cf57826e4b087f62be35a9a"}, {"problem": 22, "code": "#(reduce (fn [a _] (inc a)) 0 %)", "user": "5cf863c4e4b0b71b1d808a80"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5cffbc2ce4b0cc9c91588193"}, {"problem": 22, "code": "#(reduce (fn [a _] (+ 1 a)) 0 %)", "user": "5cfeacb7e4b0cc9c9158817d"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5ce91641e4b0a17bb84e2bb6"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5bcdb877e4b0e9689409ee02"}, {"problem": 22, "code": "(fn [coll] (reduce + (map (fn [_] 1) coll)))", "user": "5cee521ce4b0aaa82f1129dd"}, {"problem": 22, "code": "(fn [x] (loop [[h & t] x a 1] (if (empty? t) a (recur t (inc a)))))", "user": "5cfff788e4b0cc9c91588196"}, {"problem": 22, "code": "#(reduce (fn [acc _] (inc acc)) 0 %1)", "user": "5d00f8c5e4b0cc9c915881a3"}, {"problem": 22, "code": "reduce (fn [agg x] (inc agg)) 0", "user": "5a23503fe4b0ff51aa4b32d6"}, {"problem": 22, "code": "(fn count-seq [xs]\n  (letfn [(count-seq-c [xs n]\n                       (if (empty? xs)\n                         n\n                         (count-seq-c (rest xs) (inc n))))]\n    (count-seq-c xs 0)))", "user": "5ad351a5e4b0ea6055cfabc0"}, {"problem": 22, "code": "(fn [seq] (reduce + (map (constantly 1) seq)))", "user": "5cfabf53e4b0cc9c91588148"}, {"problem": 22, "code": "#(reduce + (map (fn [n] 1) %))", "user": "5032089de4b000fc67a99a85"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5ceedd7ae4b0aaa82f1129e4"}, {"problem": 22, "code": "(fn my-count [seq] (if (empty? seq)\n                     0\n                     (inc (my-count (rest seq)))))", "user": "5d038e6ee4b0cc9c915881c4"}, {"problem": 22, "code": "(fn [l] (loop [lst l cnt 0] (if (empty? lst) cnt (recur (rest lst) (inc cnt)))))", "user": "5d03c351e4b0cc9c915881cc"}, {"problem": 22, "code": "(fn [coll] (reduce #(inc (first %&)) 0 coll))", "user": "5cdc17d0e4b05ee0cb31173c"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5d01fb3ce4b0cc9c915881b5"}, {"problem": 22, "code": "(fn count-me\n  [s]\n  (if (= (first s) nil)\n    0\n    (+ 1 (count-me (rest s)))))", "user": "5d05fdece4b0cc9c915881e8"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5d0570fbe4b0cc9c915881df"}, {"problem": 22, "code": "(fn [coll] (reduce (fn [x y] (+ 1 x)) 0 coll))", "user": "5d03944de4b0cc9c915881c5"}, {"problem": 22, "code": "(fn count' ([x cnt] (if (empty? x)\n                          cnt\n                          (count' (rest x) (inc cnt))))\n      ([x] (count' (vec x) 0)))", "user": "5d06499ae4b0cc9c915881ec"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5d0781d1e4b0cc9c915881f9"}, {"problem": 22, "code": "#(loop [src (seq %) cnt 0]\n\t(if (empty? src)\n\t\tcnt\n\t\t(recur (rest src) (inc cnt))))", "user": "5d0859fbe4b0cc9c91588208"}, {"problem": 22, "code": "(fn [seq] (alength (into-array seq)))", "user": "5d08dfe7e4b0cc9c91588210"}, {"problem": 22, "code": "(fn [x]\n  (loop [sq x\n         size 0]\n    (if (empty? sq)\n      size\n      (recur (rest sq) (inc size)))))", "user": "5d045162e4b0cc9c915881d3"}, {"problem": 22, "code": "(fn [elements] (reduce (fn [total, _] (inc total)) 0 elements))", "user": "5d09dffbe4b0cc9c9158821c"}, {"problem": 22, "code": "(fn [s] (reduce (fn [a _b] (inc a)) 0 s))", "user": "5cf8e426e4b0b71b1d808a88"}, {"problem": 22, "code": "(fn length [l] (if (empty? l) 0 (+ 1 (length (rest l)))))", "user": "5d0aab50e4b0cc9c91588220"}, {"problem": 22, "code": "#(loop [n 0 my-seq (seq %)]\n   (if (seq my-seq)\n     (recur (inc n) (rest my-seq))\n     n))", "user": "5d0815b3e4b0cc9c91588201"}, {"problem": 22, "code": "#(reduce + (map (fn [x] (if (nil? x) 0 1)) %))", "user": "5d0a65ebe4b0cc9c9158821f"}, {"problem": 22, "code": "(fn [my-seq]\n  (reduce (fn [x y]\n            (inc x))\n   0\n   my-seq))", "user": "5d0b210ee4b0cc9c9158822b"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5d03977ee4b0cc9c915881c7"}, {"problem": 22, "code": "(fn [coll]\n(reduce\n(fn [n _]\n   (inc n))\n    0\n    coll))", "user": "58dde189e4b0a4d5acaab6dd"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "568f2059e4b0dcc4269f40df"}, {"problem": 22, "code": "(fn\n  [coll]\n  (reduce (fn [acc _] (inc acc)) 0 coll))", "user": "5cf48f04e4b087f62be35a86"}, {"problem": 22, "code": "(fn get-count\n  ([s n]\n    (if-not (empty? s)\n      (recur (rest s) (inc n))\n      n))\n  ([s] (get-count s 0)))", "user": "5d0e311de4b0cc9c91588251"}, {"problem": 22, "code": "(fn c [xs]\n  (if (nil? xs)\n      0\n      (+ 1 (c (next xs)))))", "user": "5d0e9931e4b0cc9c91588258"}, {"problem": 22, "code": "(fn [s]\n  (reduce\n    (fn [acc curr]\n      (inc acc))\n    0\n    s))", "user": "5d0eed51e4b0cc9c91588262"}, {"problem": 22, "code": "#(reduce + (map (fn [_] 1) %))", "user": "5cfee28de4b0cc9c91588185"}, {"problem": 22, "code": "reduce (fn[c _] (inc c)) 0", "user": "5d0f39c5e4b0cc9c91588264"}, {"problem": 22, "code": "#(.length (vec %))", "user": "5d0fe86de4b0cc9c9158826c"}, {"problem": 22, "code": "(fn co [xs] (if (= xs '()) 0 (+ 1 (co (rest xs)))))", "user": "5d0e9a5de4b0cc9c9158825a"}, {"problem": 22, "code": "#(loop[l %, r 0]\n   (if (nil? l)\n     r\n     (recur (next l) (inc r))))", "user": "5d02fe44e4b0cc9c915881c0"}, {"problem": 22, "code": "(fn count' [xs] (if (empty? xs) 0 (+ 1 (count' (rest xs)))))", "user": "5a08f951e4b01bb0ae8afdfd"}, {"problem": 22, "code": ";; (iterate f 1) lazzy constructor of a sequence from 1 to N\n;; (map vector l1 l2) creates a list of pairs taken from l1 and l2\n#(first (last (map vector (iterate inc 1) %)))", "user": "5d0eda66e4b0cc9c9158825f"}, {"problem": 22, "code": "(fn [xs]\n  (reduce (fn [acc _]\n            (inc acc)) 0 xs))", "user": "5d11618de4b02c15ef021985"}, {"problem": 22, "code": "(fn [col]\n  (reduce (fn[c _] (inc c))\n          0\n          col))", "user": "5ccf99fbe4b0ccb0619628c8"}, {"problem": 22, "code": "#(.length (vec %))", "user": "5d11092be4b02c15ef021982"}, {"problem": 22, "code": "(fn myCount [n l] \n  (if \n    (empty? l) \n    n \n    (myCount (+ n 1) (rest l)) \n  )\n) 0", "user": "5d10e07ae4b02c15ef02197f"}, {"problem": 22, "code": "(fn [coll]\n  (loop [acc 0 rem coll]\n    (if (nil? (seq rem)) acc\n        (recur (inc acc) (rest rem)))))", "user": "5d126728e4b02c15ef02199a"}, {"problem": 22, "code": "(fn [seq]\n  ((fn inner [remaining i]\n      (if (empty? remaining)\n        i\n        (inner (rest remaining) (+ i 1))))\n  seq 0))", "user": "5d126814e4b02c15ef02199b"}, {"problem": 22, "code": "reduce (fn [a _] (inc a)) 0", "user": "5d0b4966e4b0cc9c9158822f"}, {"problem": 22, "code": "(fn mycount [col]\n    (if (empty? col)\n      0\n      (+ 1 (mycount (rest col)))))", "user": "5d132412e4b02c15ef0219a6"}, {"problem": 22, "code": "(fn [s]                                                                                                                                                 \n  ((fn [s c]\n     (if (empty? s)\n       c\n       (recur (rest s) (inc c))))\n   s 0))", "user": "5ae9b23fe4b0cc2b61a3bbd8"}, {"problem": 22, "code": "#(reduce (fn [acc _] (inc acc)) 0 %)", "user": "5d1201fce4b02c15ef02198f"}, {"problem": 22, "code": "(fn [c] (reduce + (map (constantly 1) c)))", "user": "5d10bfdfe4b04b4faecf4448"}, {"problem": 22, "code": "(fn\n  [col]\n  (if (empty? col) \n    0\n    (loop [rem-col col c 0]\n      (if (empty? rem-col )\n        c\n        (recur \n          (rest rem-col)\n          (inc c))))))", "user": "5d13c5d2e4b0902706380dbf"}, {"problem": 22, "code": "#(->>(map (fn [y] (if (not= nil y) 1)) %)\n     (apply +))", "user": "5d148581e4b0902706380dc6"}, {"problem": 22, "code": "(fn [sq] \n  (apply + (map (constantly 1) sq)))", "user": "5d10c1a8e4b04b4faecf4449"}, {"problem": 22, "code": "(fn [coll] (reduce (fn [c _] (inc c)) 0 coll))", "user": "5d1380cbe4b0902706380dba"}, {"problem": 22, "code": "(fn f [x] (if (= () (rest x)) 1 (+ 1 (f (rest x)))))", "user": "5cacc9e0e4b026601754b862"}, {"problem": 22, "code": "(fn count2\n  [l]\n  (if (empty? l)\n    0\n    (+ (count2 (rest l)) 1)))", "user": "5d123c75e4b02c15ef021997"}, {"problem": 22, "code": "reduce (fn [cc _] (inc cc)) 0", "user": "5d16d157e4b0902706380deb"}, {"problem": 22, "code": "#(reduce (fn [counter _] (inc counter)) 0 (vec %))", "user": "54b42ea4e4b05787c3b1638b"}, {"problem": 22, "code": "#(.length (vec %))", "user": "5c8aa02de4b048ec896c5958"}, {"problem": 22, "code": "(fn [c] (reduce (fn [i b] (+ 1 i)) 0 c))", "user": "5d063918e4b0cc9c915881eb"}, {"problem": 22, "code": "#(reduce (fn [c _] (+ 1 c)) 0 %)", "user": "5d123457e4b02c15ef021996"}, {"problem": 22, "code": "#(+ 1 (last (map first (map-indexed vector %))))", "user": "5d1a2227e4b0902706380e0f"}, {"problem": 22, "code": "(partial reduce (fn [x _] (inc x)) 0)", "user": "5d046f7ce4b0cc9c915881d5"}, {"problem": 22, "code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "5b562842e4b02d533a91bd3f"}, {"problem": 22, "code": "(partial reduce (fn [res x] (inc res)) 0)", "user": "5d1231dde4b02c15ef021995"}, {"problem": 22, "code": "(fn [y] (apply + (map (fn [x] 1) y)))", "user": "5d1bbef0e4b02ea6f0fb6984"}, {"problem": 22, "code": "(fn my-count \n  ([seq] (my-count seq 0))\n  ([seq accumulating-count]\n   (if (empty? seq)\n     accumulating-count\n     (my-count (rest seq) (+ 1 accumulating-count)))))", "user": "5d1b2a1ee4b02ea6f0fb6979"}, {"problem": 22, "code": "(fn [lst]\n  ((fn cnt [lst cntr]\n     (if (= (first lst) nil)\n       cntr\n       (cnt (rest lst) (+ cntr 1)))) lst 0))", "user": "5d1cd478e4b02ea6f0fb6991"}, {"problem": 22, "code": "(fn [s]\n  (loop [i 0\n         s s]\n    (if (empty? s)\n      i\n      (recur (inc i) (rest s)))))", "user": "570c8ac3e4b0b0fb43fd06ca"}, {"problem": 22, "code": "(fn d [seq]\n   (if (empty? seq)\n     0\n     (+ (d (rest seq)) 1)))", "user": "5d1de7b2e4b02ea6f0fb69ad"}, {"problem": 22, "code": "(fn [x] (inc (last (interleave x (range)))))", "user": "5d1a1082e4b0902706380e0e"}, {"problem": 22, "code": "(fn [x] (loop [total 0\n               items x] \n          (if (empty? items) \n            total \n            (recur (inc total) (rest items)))))", "user": "5d13af73e4b0902706380dbe"}, {"problem": 22, "code": "(fn co [l] (if (empty? l) 0 (inc (co (rest l)))))", "user": "5d1e19c4e4b02ea6f0fb69af"}, {"problem": 22, "code": "reduce (fn([x y] (+ x 1))) 0", "user": "5d1bcf6ae4b02ea6f0fb6985"}, {"problem": 22, "code": "#(reduce (fn [c e]\n           (inc c))\n         0\n         %)", "user": "5d1be50ce4b02ea6f0fb6986"}, {"problem": 22, "code": "reduce \n(\n fn\n [acc x]\n (inc acc)\n ) \n0", "user": "5d1cf523e4b02ea6f0fb6994"}, {"problem": 22, "code": "(fn [nlis] (+ 1 (first (last (map-indexed (fn [idx itm] [idx itm]) nlis)))))", "user": "5d125d63e4b02c15ef021999"}, {"problem": 22, "code": "(fn count-a-seq [col]\n  (reduce (fn [x y] (+ x 1)) 0 col))", "user": "5d05d005e4b0cc9c915881e6"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5d1cf237e4b02ea6f0fb6992"}, {"problem": 22, "code": ";#(reduce (fn [x _] (inc x)) 0 %)\nreduce (fn [x _] (inc x)) 0", "user": "5d2201b8e4b02ea6f0fb69ed"}, {"problem": 22, "code": "(fn do-count\n  ([xs] (do-count xs 0))\n  ([xs c]\n   (if (empty? xs)\n     c\n     (recur (rest xs) (inc c)))))", "user": "5d217b1de4b02ea6f0fb69e6"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5d1b59abe4b02ea6f0fb697e"}, {"problem": 22, "code": "(fn [col]\n  (loop [cur col\n         cnt 0]\n    (cond\n     (nil? (first cur)) cnt\n     :else (recur (rest cur)\n                  (inc cnt)))))", "user": "5d231255e4b02ea6f0fb69fe"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "5d232882e4b02ea6f0fb6a02"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5d23392ae4b02ea6f0fb6a04"}, {"problem": 22, "code": "reduce (fn [cnt _] (inc cnt)) 0", "user": "5c59b836e4b01df32ab73263"}, {"problem": 22, "code": "#(alength (into-array %))", "user": "5d20677be4b02ea6f0fb69d3"}, {"problem": 22, "code": "(fn [s] (loop [n 0\n               z (seq s)]\n          (if-not z n (recur (inc n) (-> (rest z) seq)))))", "user": "5d236215e4b02ea6f0fb6a09"}, {"problem": 22, "code": "reduce (fn [acc curr] (inc acc)) 0", "user": "5d1c14cde4b02ea6f0fb698a"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "5d164829e4b0902706380de0"}, {"problem": 22, "code": "reduce (fn [acc _] (inc acc)) 0", "user": "5d1e37e2e4b02ea6f0fb69b1"}, {"problem": 22, "code": "reduce (fn [a b] (inc a)) 0,,,", "user": "5d122f3ee4b02c15ef021994"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5d246597e4b02ea6f0fb6a22"}, {"problem": 22, "code": "#(reduce (fn [n _] (inc n)) 0 %)", "user": "5d24671ce4b02ea6f0fb6a23"}, {"problem": 22, "code": "#(alength (to-array %1))", "user": "5c12b41ce4b01240ff567195"}, {"problem": 22, "code": "#(apply + (map (constantly 1) %))", "user": "5d24e49be4b02ea6f0fb6a2a"}, {"problem": 22, "code": "(fn [coll]\n  (reduce (fn [c e] (inc c)) 0 coll))", "user": "5cf895efe4b0b71b1d808a85"}, {"problem": 22, "code": ";(fn [coll]\n;   (loop [x 0 [prim & remain] coll]\n;     (if (= nil remain)\n;       (inc x)\n;       (recur (inc x) remain))))\n\n#(reduce + (map (constantly 1) %))", "user": "5d0beecee4b0cc9c91588239"}, {"problem": 22, "code": "(fn count-em [things]\n  (loop [things things counter 0]\n  (if (empty? things)\n    counter\n    (recur (rest things) (+ 1 counter)))))", "user": "5d24e8efe4b02ea6f0fb6a2b"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5d267c11e4b02ea6f0fb6a41"}, {"problem": 22, "code": "(fn get-length [x] \n  (if (= () x)\n    0\n    (+ (get-length (rest x)) 1)\n  )\n)", "user": "5d25abc9e4b02ea6f0fb6a37"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5d247902e4b02ea6f0fb6a24"}, {"problem": 22, "code": "#( loop [col % cnt 0]\n   (if(empty? col)\n   \tcnt\n   \t(recur (rest col) (+ cnt 1))))", "user": "5d270111e4b092dab7f59c62"}, {"problem": 22, "code": "#(reduce (fn [acc _] (inc acc)) 0 %)", "user": "5d272077e4b092dab7f59c64"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5d27da09e4b092dab7f59c75"}, {"problem": 22, "code": "#(reduce \n  (fn [acc cur] (inc acc))\n  0\n  %\n)", "user": "5d2564d2e4b02ea6f0fb6a34"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5d138119e4b0902706380dbb"}, {"problem": 22, "code": "#(loop [s %1 length 0]\n      (if (not (seq s))\n        length\n        (recur (rest s) (+ length 1))))", "user": "5d28633be4b092dab7f59c7d"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5d28222ee4b092dab7f59c7a"}, {"problem": 22, "code": "#(reduce (fn [acc _] (+ acc 1)) 0 %)", "user": "5d28b684e4b092dab7f59c83"}, {"problem": 22, "code": "#(apply + (map (constantly 1) %))", "user": "5d28d935e4b092dab7f59c88"}, {"problem": 22, "code": "(fn [seq]\n  (reduce (fn [acc _] (+ acc 1)) 0 seq))", "user": "5d29c06be4b01671435dbc6b"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5d29d837e4b01671435dbc6c"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5d13f783e4b0902706380dc1"}, {"problem": 22, "code": "(fn [col]\n      (loop [c col\n             n 0]\n        (if (empty? c)\n          n\n          (recur (rest c) (inc n)))))", "user": "576a42e6e4b0a07e8fc1810e"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5d1a92d6e4b0902706380e11"}, {"problem": 22, "code": "reduce (fn [acc _] (inc acc)) 0", "user": "5d2b62efe4b01671435dbc80"}, {"problem": 22, "code": "(fn my-count [x] (if (nil? x) 0 ( inc (my-count(next x)))))", "user": "5d21b91ee4b02ea6f0fb69e9"}, {"problem": 22, "code": "reduce (fn [itm _] (+ itm 1)) 0", "user": "5d23bd56e4b02ea6f0fb6a0f"}, {"problem": 22, "code": "#(reduce (fn [x, col] (inc x)) 0 %)", "user": "5d2b88a6e4b01671435dbc84"}, {"problem": 22, "code": "(fn [x] (reduce #(+ %1 1 (or 0 %2))  (conj (seq x) 0)))", "user": "5d2ca236e4b01671435dbc94"}, {"problem": 22, "code": "#(loop [n 0 c %] \n   (if (empty? c) n \n     (recur (inc n) (rest c))\n     )\n   )", "user": "5d2c8844e4b01671435dbc8f"}, {"problem": 22, "code": "#(apply + (map (constantly 1) %1))", "user": "5d2bfb68e4b01671435dbc86"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5d2cc16ee4b01671435dbc96"}, {"problem": 22, "code": "#(loop [in %1\n         out 0]\n    (if (empty? in);\n      out\n      (recur (rest in)\n             (inc out))))", "user": "5d25f5e7e4b02ea6f0fb6a3a"}, {"problem": 22, "code": "(fn [coll]\n  (loop [coll coll\n         acc 0]\n    (if (empty? coll)\n      acc\n      (recur (rest coll) (inc acc)))))", "user": "55b7f263e4b01b9910ae29b4"}, {"problem": 22, "code": "#(-> %\n     (interleave (range))\n     (reverse)\n     (first)\n     (inc))", "user": "5d2e5065e4b01671435dbcae"}, {"problem": 22, "code": "(fn [coll]\n  (reduce (fn [a v] (inc a)) 0 coll))", "user": "5d2ed122e4b01671435dbcb5"}, {"problem": 22, "code": "(fn foo [x] (if (empty? x) 0 (+ 1 (foo (rest x)))))", "user": "5d2e39d8e4b01671435dbcaa"}, {"problem": 22, "code": "(fn [x] \n  (loop [length 0 \n\t\t y x] \n    (if (= nil (first y)) \n      length\n      (recur (inc length) (rest y)))\n      ))", "user": "5d301c95e4b01671435dbcca"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "51bd78c3e4b0ff155d51d2b0"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5d30ba40e4b01671435dbcd4"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5d3006dde4b01671435dbcc9"}, {"problem": 22, "code": "(fn cc [lst]\n  (if (empty? lst)\n    0\n    (+ 1 (cc (rest lst)))))", "user": "5d323149e4b01671435dbce9"}, {"problem": 22, "code": "(fn cnt \n  ([a n] \n      (if (= a '())\n        n\n        (cnt \n         (rest a)\n         (inc n)))) \n  ([a] (cnt a 0)))", "user": "5707da27e4b0b0fb43fd0692"}, {"problem": 22, "code": "reduce (fn[n _] (inc n)) 0", "user": "5cf53196e4b087f62be35a94"}, {"problem": 22, "code": "#(->> % (map (constantly 1)) (apply +))", "user": "5d35fb9be4b01671435dbd1c"}, {"problem": 22, "code": "#(reduce \n    (fn [counter x] (inc counter)) 0 %)", "user": "5d31f0ace4b01671435dbce6"}, {"problem": 22, "code": "(fn [items](loop [i 0 ritems items] (if (= () ritems) i (recur (inc i)(rest ritems)) )))", "user": "5d363543e4b01671435dbd20"}, {"problem": 22, "code": "(fn [coll]\n  (loop [coll coll\n         result 0]\n    (if (first coll)\n      (recur (next coll) (inc result))\n      result)))", "user": "5d35f997e4b01671435dbd1a"}, {"problem": 22, "code": "#((fn\n    [coll counter]\n    (loop [tmp-coll coll tmp-counter counter]\n      (if (empty? tmp-coll)\n        tmp-counter\n        (recur (rest tmp-coll) (inc tmp-counter))))) \n   % \n   0)", "user": "5d370811e4b01671435dbd2d"}, {"problem": 22, "code": "#(apply + \n        (map \n         (fn [x] 1) \n         %))", "user": "54be7c0de4b0ed20f4ff6eec"}, {"problem": 22, "code": "(fn [coll]\n  (reduce\n   (fn [acc x] (+ acc 1))\n   0\n   coll))", "user": "5d273ef8e4b092dab7f59c69"}, {"problem": 22, "code": "(fn [x]\n  (loop [a x\n         b 0]\n  \t(if (empty? a)\n    \tb\n    \t(recur (rest a) (+ b 1)))))", "user": "5d371b6fe4b01671435dbd31"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5d378839e4b01671435dbd3d"}, {"problem": 22, "code": "(fn [sq]\n  ((fn [sq cnt]\n     (println sq)\n  \t(if (empty? sq)\n    \t  cnt\n    \t  (recur (rest sq) (+ 1 cnt)))) sq 0))", "user": "5d398d4de4b01671435dbd53"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5d3af639e4b01671435dbd5f"}, {"problem": 22, "code": "(fn c [coll] (loop [cnt 0 c coll] (if (nil? (first c)) cnt (recur (+ 1 cnt) (rest c)))))", "user": "5d348d3de4b01671435dbd0a"}, {"problem": 22, "code": "(fn [l]\n  (loop [remainder l\n         elements 0]\n    (if (empty? remainder)\n      elements\n      (recur (rest remainder) (+ elements 1)))))", "user": "5d3ae729e4b01671435dbd5d"}, {"problem": 22, "code": "(fn [coll]\n  (loop [n 0 c coll]\n    (if (nil? c)\n      n\n      (recur (inc n) (next c)))))", "user": "598601f9e4b021a7a535fe79"}, {"problem": 22, "code": "(fn [xs]\n  (let [my-count\n        (fn [xs acc]\n          (if (empty? xs)\n            acc\n            (recur (rest xs) (inc acc))))]\n    \n    (my-count xs 0)))", "user": "5d3e66d4e4b01671435dbd72"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5cda0e26e4b05ee0cb311710"}, {"problem": 22, "code": "(fn [x]\n       (reduce + (map (constantly 1) x)))", "user": "5d3fa930e4b05dd059a5435f"}, {"problem": 22, "code": "#(apply + (map (fn [x] 1) %))", "user": "5d2c779be4b01671435dbc8d"}, {"problem": 22, "code": "#(loop [result 0\n        test-seq %]\n   (if-not (empty? test-seq)\n     (recur (inc result) (rest test-seq))\n     result))", "user": "5d3f50d7e4b09d9322bc20a6"}, {"problem": 22, "code": "reduce (fn [acc _] (inc acc)) 0", "user": "5d404586e4b05dd059a54363"}, {"problem": 22, "code": "(fn [lst]\n  ((fn [lst cnt]\n     (if (nil? (first lst))\n       cnt\n       (recur (rest lst) (+ cnt 1)))\n     \n     ) lst 0))", "user": "5c5e3af7e4b01df32ab732c6"}, {"problem": 22, "code": "(fn cnt [s] (if (= s nil) 0 (inc (cnt (next s)))))", "user": "5d0bb4fae4b0cc9c91588237"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "5d41de31e4b05dd059a54379"}, {"problem": 22, "code": "#(reduce (fn [x y] (+ x 1)) 0 %)", "user": "5d36a316e4b01671435dbd29"}, {"problem": 22, "code": "(fn [y] (loop [x y cnt 0] (if-not (empty? x) (recur (rest x) (inc cnt)) cnt)))", "user": "5d4256bae4b05dd059a5437d"}, {"problem": 22, "code": "(fn [coll] (reduce (fn [acc _](inc acc)) 0 coll))", "user": "5d40493ae4b05dd059a54364"}, {"problem": 22, "code": "reduce (fn [agg _] (inc agg)) 0", "user": "5d4320fde4b07c84aa5ae690"}, {"problem": 22, "code": "(fn [xs]\n  (loop [n 0\n         els xs]\n    (if (seq els)\n      (recur (inc n) (rest els))\n      n)))", "user": "5d431c77e4b07c84aa5ae68f"}, {"problem": 22, "code": "(fn [x] (reduce (fn [y _] (inc y)) 0 x))", "user": "5d439775e4b07c84aa5ae696"}, {"problem": 22, "code": "reduce (fn [acc _] (inc acc)) 0", "user": "5d43ab45e4b07c84aa5ae698"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5d37087ae4b01671435dbd2e"}, {"problem": 22, "code": "(fn [col] \n  (#( if ( empty? %1)\n      %2\n      (recur (rest %1) (+ %2 1))) col 0))", "user": "5ceb221ce4b0a17bb84e2bde"}, {"problem": 22, "code": "#(reduce + 0 (map (constantly 1) %))", "user": "5d45bd1de4b07c84aa5ae6a4"}, {"problem": 22, "code": "(fn [v] (reduce (fn [a _] (+ a 1)) 0 v))", "user": "5d3b340fe4b01671435dbd63"}, {"problem": 22, "code": "(fn[x] (reduce (fn[y,z] (+ y 1)) 0 x))", "user": "5d411bf5e4b05dd059a54371"}, {"problem": 22, "code": "(fn [x] (reduce (fn[a,b] (inc a)) 0 x))", "user": "5d465adae4b07c84aa5ae6a9"}, {"problem": 22, "code": "#(reduce (fn [a _] (inc a)) 0 %)", "user": "5d45749be4b07c84aa5ae6a2"}, {"problem": 22, "code": "(fn [coll]\n  (loop [c coll\n         result 0]\n    (if (empty? c)\n    \tresult\n    \t(recur (next c) (inc result))\n  \t)\n  ) \n)", "user": "5d07989ee4b0cc9c915881fb"}, {"problem": 22, "code": "#(reduce (fn [cnt _] (inc cnt)) 0 %)", "user": "5d46fbc6e4b07c84aa5ae6af"}, {"problem": 22, "code": "(fn [target]\n   (loop [cnt 0, left-overs target]\n     (if (empty? left-overs)\n       cnt\n       (recur\n         (inc cnt)\n         (rest left-overs)))\n     ))", "user": "5d40f41ae4b05dd059a5436d"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "5d46a3c1e4b07c84aa5ae6ad"}, {"problem": 22, "code": "#(reduce + (map (fn [x] (identity 1)) %))", "user": "5d47f4dbe4b07c84aa5ae6b5"}, {"problem": 22, "code": "(fn [list]\n(loop [lst list x 0]\n(if (empty? lst)\nx\n(recur (rest lst) (inc x)))))", "user": "5d47f45de4b07c84aa5ae6b4"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5d46969fe4b07c84aa5ae6ac"}, {"problem": 22, "code": "(fn cnt [lst]\n  ((fn _cnt [lst length]\n    (if (empty? lst) length\n      (_cnt (rest lst) (inc length)))) lst 0))", "user": "5d48e6d3e4b0776584bd6f15"}, {"problem": 22, "code": "#(loop [col % cnt 0]\n   (if(empty? col)\n     cnt\n     (recur (rest col) (inc cnt))))", "user": "5d40442ee4b05dd059a54362"}, {"problem": 22, "code": "(fn [seq] (let [cuenta-uno (fn [x] (nil? x) 0 1)\n        asocia-unos (map #(cuenta-uno %) seq)]\n    (reduce + asocia-unos)))", "user": "5d0153f9e4b0cc9c915881aa"}, {"problem": 22, "code": "(fn cnt [l]\n  (if (empty? l) 0\n    (inc (cnt (rest l)))))", "user": "5d41f428e4b05dd059a5437b"}, {"problem": 22, "code": "(fn [List]\n  (loop [Count 0 \n         L List\n        ]\n    (if (first L)\n      (recur (inc Count) (rest L))\n      Count  \n    )\n  )\n)", "user": "5d4a6c6ce4b0776584bd6f22"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5d4b2155e4b0776584bd6f28"}, {"problem": 22, "code": "(fn [data]\n  (loop [d data ctr 0]\n  (if (empty? d) ctr\n  (recur (rest d) (inc ctr)))))", "user": "5bcee7d9e4b0e9689409ee22"}, {"problem": 22, "code": "(fn my-count [coll]\n  (loop [coll coll c 0]\n    (if (empty? coll)\n      c\n      (recur (rest coll) (inc c)))))", "user": "52ca6520e4b071a8d36bd3e0"}, {"problem": 22, "code": "(fn my-count [xs]\n  ((fn my-count-r [xs acc]\n     (if (empty? xs)\n       acc\n       (my-count-r (rest xs) (inc acc)))) xs 0))", "user": "5d49ec5ee4b0776584bd6f1c"}, {"problem": 22, "code": "#(loop [i 0, col %] (if (empty? col) i (recur (inc i) (rest col))))", "user": "5d3adc7de4b01671435dbd5b"}, {"problem": 22, "code": "(fn caunt [s]\n  (reduce (fn [x y] (+ 1 x)) 0 s))", "user": "5d48d5d1e4b0776584bd6f12"}, {"problem": 22, "code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "5d4c4de9e4b0776584bd6f2f"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5d4eb9c4e4b0776584bd6f48"}, {"problem": 22, "code": "(fn [s]\n  (loop [cnt 0 myseq s]\n    (if (seq myseq)\n      (recur\n        (inc cnt)\n        (rest myseq))\n      cnt)))", "user": "5ad76df9e4b0ea6055cfac18"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "5d4f199fe4b0776584bd6f4b"}, {"problem": 22, "code": "(fn length\n [list]\n (if (empty? list) 0\n  (+ 1 (length (rest list)))))", "user": "5d4f0878e4b0776584bd6f4a"}, {"problem": 22, "code": "(fn [coll] (reduce (fn [x _] (+ 1 x)) 0 coll))", "user": "5d4f21f3e4b0776584bd6f4e"}, {"problem": 22, "code": "(fn name\n   ([x] (name x 1))\n   ([[x & xs] c] \n    (if (nil? xs) \n        c\n        (name xs (inc c)))))", "user": "5d48884ee4b07c84aa5ae6bb"}, {"problem": 22, "code": "(fn\n  [arr]\n  (reduce (fn [acc _] (inc acc)) 0 arr))", "user": "5d2de4cde4b01671435dbca4"}, {"problem": 22, "code": "(fn my-count[xs]\n  (if (nil? (first xs))\n    0\n    (inc (my-count (rest xs)))))", "user": "5d4f2f27e4b0776584bd6f4f"}, {"problem": 22, "code": "(fn my-count [xs]\n  (if (empty? xs)\n          0 \n          (+ 1 (my-count (rest xs)))\n  )\n)", "user": "5d4c83b7e4b0776584bd6f34"}, {"problem": 22, "code": "(fn [x]\n  (loop [l x\n         c 0]\n    (if-not (empty? l)\n      (recur (rest l) (inc c))\n      c)))", "user": "5d41ac35e4b05dd059a54375"}, {"problem": 22, "code": "(fn [some-list] \n  (loop [my-list some-list\n         acc 0]\n    (if (empty? my-list)\n    acc\n    (recur (rest my-list) (inc acc)))))", "user": "56bff105e4b060a8e693e3a4"}, {"problem": 22, "code": "#(reduce + (map (fn[x] 1) %))", "user": "5cf59deee4b087f62be35a9f"}, {"problem": 22, "code": "(fn [arr] \n  (loop [elems arr, nums 0]\n         (if (empty? elems) \n           nums\n           (recur (rest elems) (+ 1 nums)))))", "user": "5d51216ae4b0776584bd6f5b"}, {"problem": 22, "code": "(fn [my-list]\n  (loop [nn 0\n         mmy-list my-list]\n    (if (empty? mmy-list)\n      nn \n      (recur (inc nn) (rest mmy-list)))))", "user": "5d520cabe4b0776584bd6f66"}, {"problem": 22, "code": "#(reduce (fn [acc _] (inc acc)) 0 %)", "user": "5d5166d9e4b0776584bd6f5e"}, {"problem": 22, "code": "(fn c [xs] (if (empty? xs) 0 (+ 1 (c (rest xs)))))", "user": "5d51377be4b0776584bd6f5d"}, {"problem": 22, "code": "reduce (fn [r x] (inc r)) 0", "user": "5d4fc160e4b0776584bd6f51"}, {"problem": 22, "code": "(fn [collection]\n  (reduce + 0 (map (fn [x] 1) collection)))", "user": "5d42c88ae4b05dd059a5437e"}, {"problem": 22, "code": "(fn [s] (reduce (fn [acc _] (inc acc)) \n                0 \n                s))", "user": "5d53a59ae4b0776584bd6f72"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5d52e78be4b0776584bd6f6b"}, {"problem": 22, "code": "(fn myfun\n  ([arr] (myfun arr 0))\n  ([arr n] (if (nil? (first arr)) n (myfun (rest arr) (inc n) )))\n)", "user": "5d2f5ba5e4b01671435dbcbf"}, {"problem": 22, "code": "#(loop [total 0\n       x %]\n   (if (nil? (first x))\n     total\n     (recur (inc total)\n            (rest x))))\n\n;; I need to learn to pay more attentin the documentation.....\n;; reduce (fn [cc _] (inc cc)) 0\n;; This works, because if 'val' (i.e. 0, in this case) is supplied, then\n;; when the collectino has a single item, the function will just return 1 (inc cc).\n;; If there are no items, reduce just returns whatever 'val' is, i.e. 0.", "user": "5d54af24e4b02ba5928a6809"}, {"problem": 22, "code": "reduce #(if(= %2 %2) (inc %1)) 0", "user": "5bdc4a76e4b0ed4b8aab4c30"}, {"problem": 22, "code": "reduce (fn [x y] (+ x 1)) 0", "user": "5d55305ce4b02ba5928a680d"}, {"problem": 22, "code": "(comp last map) (fn[i _] (inc i)) (range)", "user": "5d5502cbe4b02ba5928a680b"}, {"problem": 22, "code": "(fn foo\n                 ([lis]\n                  (foo lis 0))\n                 ([lis c]\n                  (if (empty? lis)\n                    c\n                    (foo (rest lis) (inc c)))\n                  )\n                 )", "user": "5d4cf3e9e4b0776584bd6f38"}, {"problem": 22, "code": "(fn [xs] (reduce (fn [a _] (inc a)) 0 xs))", "user": "5d38a4dde4b01671435dbd4a"}, {"problem": 22, "code": "(fn [sq]\n  (loop [s sq\n         t 0]\n    (if (empty? s)\n      t\n      (recur (rest s) (inc t)))))", "user": "5d584c02e4b02ba5928a6822"}, {"problem": 22, "code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "5d517784e4b0776584bd6f60"}, {"problem": 22, "code": "(fn tnuoc ([xs] (tnuoc xs 0))\n  ([xs n] (if (not (first xs)) n (recur (rest xs) (inc n)) ))\n           )", "user": "5d590500e4b02ba5928a6824"}, {"problem": 22, "code": "(fn [aList] (reduce + (map (constantly 1) aList)))", "user": "5d59c3d0e4b02ba5928a682e"}, {"problem": 22, "code": "(fn count-seq\n  ([seq]   (count-seq seq 0))\n  ([seq i] (if (empty? seq) i (recur (rest seq) (inc i) )))\n)", "user": "5d58983fe4b02ba5928a6823"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "5d584a28e4b02ba5928a6821"}, {"problem": 22, "code": "(fn [col] (loop [cl col result 0] (if (empty? cl) result (recur (rest cl) (inc result)))))", "user": "5d4dd0b4e4b0776584bd6f40"}, {"problem": 22, "code": "(fn [arr] (reduce + (map (fn [x] 1) arr)))", "user": "5d5b3711e4b06a698e928ee3"}, {"problem": 22, "code": "(fn [lst]\n  (loop [i lst cnt 0]\n   (cond (empty? i) cnt\n      :else (recur (rest i)(inc cnt)))))", "user": "5c9da580e4b048ec896c5b12"}, {"problem": 22, "code": "(fn coun [s]\n(loop [s s \n       n 0]\n\n(if (empty? s)\n  n\n  (recur (rest s) (inc n))\n  )))", "user": "5d2a8ecce4b01671435dbc79"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5d5a79cce4b02ba5928a6833"}, {"problem": 22, "code": "(fn cnt \n    ([l a] (if (empty? l) a (cnt (rest l) (inc a))))\n    ([l] (cnt l 0)))", "user": "5d5b06a9e4b02ba5928a683a"}, {"problem": 22, "code": "(fn [coll]\n  (loop [coll coll\n         acc 0]\n    (if (empty? coll)\n      acc\n      (recur (rest coll) (inc acc)))))", "user": "5b4bfd04e4b02d533a91bca2"}, {"problem": 22, "code": "(fn [seq1]\n  (loop [seq1 seq1\n         answer 0]\n    (if (= '() seq1)\n      answer\n      (recur (rest seq1) (inc answer)))\n    ))", "user": "5d4df658e4b0776584bd6f41"}, {"problem": 22, "code": "#(reduce (fn [a _] (+ 1 a)) 0 %1)", "user": "5d5e0259e4b0c9e5857d4fef"}, {"problem": 22, "code": "(fn [x](reduce \n    (fn [c _] (inc c))\n     0 x))", "user": "5d5c6675e4b09db18d4482ec"}, {"problem": 22, "code": "(fn [coll]\n    (reduce (fn [accum val] (inc accum)) 0 (seq coll)))", "user": "5d531d33e4b0776584bd6f6d"}, {"problem": 22, "code": "(fn [coll] \n  (reduce (fn [ac itm] (+ ac 1)) 0 coll))", "user": "5d5eb086e4b0c9e5857d4ff7"}, {"problem": 22, "code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "5d5daf87e4b0c9e5857d4fed"}, {"problem": 22, "code": "#(reduce (fn [x _] (inc x)) 0 %)", "user": "5c4be0bde4b0f9f7a8770e6c"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5d5e9f45e4b0c9e5857d4ff5"}, {"problem": 22, "code": "(fn [items]\n                (reduce\n                  #(do\n                     (println %1 %2)\n                     (if (nil? %1)\n                       1\n                       (inc %1)))\n                  nil items))", "user": "5d5c2730e4b09db18d4482ea"}, {"problem": 22, "code": "#(last (map (fn [x y] (inc y)) %1 (range)))", "user": "5d6042f2e4b0c9e5857d5006"}, {"problem": 22, "code": "(fn [coll] (reduce (fn [x y] (+ x 1)) 0 coll))", "user": "5d5c549ee4b09db18d4482eb"}, {"problem": 22, "code": "#(apply + (map (constantly 1) %))", "user": "5d609ddde4b0c9e5857d5008"}, {"problem": 22, "code": "#(loop [[x & y] %\n        c 0]\n   (if (nil? x)\n     c\n     (recur y (inc c))))", "user": "5d5ef0bce4b0c9e5857d4ffb"}, {"problem": 22, "code": "reduce (fn [sum col] (+ sum 1) ) 0", "user": "5d604682e4b0c9e5857d5007"}, {"problem": 22, "code": "(fn n [s]\n    (loop [t s c 0]\n      (if (empty? t)\n        c\n        (recur (rest t) (inc c))\n        )))", "user": "5d52bf29e4b0776584bd6f69"}, {"problem": 22, "code": "#(reduce (fn [x y] (+ 1 x)) 0 %1)", "user": "507766e9e4b0fc74642bff61"}, {"problem": 22, "code": "(fn f [s] (if (first s) (+ 1 (f (rest s))) 0))", "user": "5d629ed9e4b0c9e5857d501d"}, {"problem": 22, "code": "(fn __ \n  [set] \n  (reduce + \n          (map \n           (fn [x] \n             (+ 1)) \n           set)))", "user": "5d615431e4b0c9e5857d5010"}, {"problem": 22, "code": "reduce (fn [n s] (inc n)) 0", "user": "5d62ce13e4b0c9e5857d501f"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5d4d46aae4b0776584bd6f3a"}, {"problem": 22, "code": "(fn [xs] ((fn [xs n] (if (= (first xs) nil) n\n                      \t(recur (rest xs) (+ n 1)))) xs 0))", "user": "5d631376e4b0c9e5857d5023"}, {"problem": 22, "code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "5d63bb2be4b0c9e5857d5027"}, {"problem": 22, "code": "(fn c [x] (if (empty? x) 0 (inc (c (rest x)))))", "user": "5d641841e4b0c9e5857d502e"}, {"problem": 22, "code": "(fn foo [x] (if (empty? x) 0 (+ 1 (foo (rest x)))))", "user": "5d63ba44e4b0c9e5857d5026"}, {"problem": 22, "code": "(fn [input_sequence] (reduce (fn [sequence_count _] (inc sequence_count)) 0 input_sequence))", "user": "5d64508de4b0c9e5857d5031"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5d61552ae4b0c9e5857d5011"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5d63b06be4b0c9e5857d5025"}, {"problem": 22, "code": "(fn [xs]\n(reduce (fn [x y] (+ x 1)) 0 xs)\n)", "user": "5d4bd9a7e4b0776584bd6f2a"}, {"problem": 22, "code": "#(reduce (fn [a b] (+ a 1)) 0 %)", "user": "5d651553e4b0db5d338d15ca"}, {"problem": 22, "code": "(fn cnt [sq]\n  ((fn cnt-help [s n]\n    (if (nil? (first s)) n (cnt-help (rest s) (+ n 1)))\n  ) sq 0)\n)", "user": "5d6523ace4b0db5d338d15cd"}, {"problem": 22, "code": "(fn count-elements [items]\n  (reduce (fn [cur, x] (+ cur 1)) 0 items))", "user": "5d652873e4b0db5d338d15ce"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5d65814be4b0db5d338d15db"}, {"problem": 22, "code": "reduce\n(fn [counter, _]\n  (inc counter))\n0", "user": "57204301e4b0c5bde472c093"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5d657de2e4b0db5d338d15da"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "5d65c2e9e4b0db5d338d15dd"}, {"problem": 22, "code": "#(reduce (fn [acc _] (inc acc)) 0 %)", "user": "5d672bd7e4b0db5d338d15f1"}, {"problem": 22, "code": "reduce (fn [a c] (inc a)) 0", "user": "5d63f1c2e4b0c9e5857d502b"}, {"problem": 22, "code": "reduce (fn [k v] (+ k 1)) 0", "user": "5d662fb5e4b0db5d338d15e1"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5d67c955e4b0db5d338d15f7"}, {"problem": 22, "code": "(fn [input]\n   (loop [idx 0]\n     (if (not(get (into [] input) idx))\n         idx\n       (recur (inc idx ))\n       )\n     )\n   )", "user": "5d5b2678e4b06a698e928ee2"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5d68fc2fe4b0db5d338d1606"}, {"problem": 22, "code": "(fn [col] (reduce (fn [value item] (+ value 1)) 0 col))", "user": "5d64ecb2e4b0c9e5857d5036"}, {"problem": 22, "code": "reduce (fn [acc coll] (+ 1 acc)) 0", "user": "5d6552b5e4b0db5d338d15d2"}, {"problem": 22, "code": "(fn [list]\n  (reduce  + (map (constantly 1) list)))", "user": "5d6932e6e4b0db5d338d1609"}, {"problem": 22, "code": "#(loop [elems %1\n        mycount 0]\n   (if (empty? elems)\n     mycount\n     (recur (rest elems) (inc mycount))))", "user": "5d68bfd0e4b0db5d338d1602"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5d69a6e1e4b0db5d338d160e"}, {"problem": 22, "code": "(fn [xs] (reduce (fn [x _] (inc x)) 0 xs))", "user": "5d68f5e6e4b0db5d338d1605"}, {"problem": 22, "code": "(fn len\n  ([xs] (len xs 0))\n  ([xs x] (if (empty? xs) x (len (rest xs) (+ x 1) ) ))\n )", "user": "5d67bfe6e4b0db5d338d15f6"}, {"problem": 22, "code": "#(inc (last\n       (map-indexed (fn [i _] i) %)))", "user": "5d6a9b1ee4b04d129b00f29c"}, {"problem": 22, "code": "(fn [l]\n  ((fn [li c]\n    (if (empty? li)\n      c\n      (recur (rest li) (+ c 1))))\n  l 0))", "user": "5d6a975be4b04d129b00f29b"}, {"problem": 22, "code": "#(reduce + (map (fn [i] 1) %))", "user": "5d6b21efe4b04d129b00f2a3"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5d6b0fc1e4b04d129b00f2a1"}, {"problem": 22, "code": "(partial reduce (fn [x n] (+ 1 x)) 0)", "user": "5d6b5c42e4b04d129b00f2a7"}, {"problem": 22, "code": "reduce (fn [n _] (inc n)) 0", "user": "5d6c3f91e4b04d129b00f2af"}, {"problem": 22, "code": "(fn [inputSeq]\n    (loop [ curSeq inputSeq\n           curCnt 0 ]\n      (if (nil? curSeq)\n        curCnt\n        (recur (next curSeq) (+ curCnt 1))\n        )\n      )\n    )", "user": "5cf7215ce4b0b71b1d808a67"}, {"problem": 22, "code": "(fn  [coll]                                                                                                                                                                           \n    (first (last  (map-indexed (fn [i c]                                                                                                                                                      \n                                [(inc i) c])                                                                                                                                                       \n                              coll)))                                                                                                                                                        \n    )", "user": "54ca05a6e4b057c6fda3a24e"}, {"problem": 22, "code": "(fn [s] \n  (letfn [(inner-loop [s r]\n                      (if (nil? (seq (rest s)))\n                        r\n                        (recur (rest s) (inc r))))]\n    (inner-loop s 1)))", "user": "5d6cead9e4b04d129b00f2b5"}, {"problem": 22, "code": "(fn [x] (apply + (map (constantly 1) x)))", "user": "5d6d2172e4b04d129b00f2b9"}, {"problem": 22, "code": "(fn [the-seq](alength (to-array the-seq)) )", "user": "5d66aea7e4b0db5d338d15ec"}, {"problem": 22, "code": "(fn d [s]\n  (reduce (fn [acc _] (inc acc)) 0 s))", "user": "5d6d76ffe4b04d129b00f2be"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5d6d4463e4b04d129b00f2bd"}, {"problem": 22, "code": "#(loop [iter 0 x (vec %)]\n    (if (empty? x)\n      iter\n      (recur (inc iter) (pop x))\n      )\n    )", "user": "5d6d7e0de4b04d129b00f2bf"}, {"problem": 22, "code": "(fn\n   [lst]\n   (loop [lst lst n 0]\n     (if (empty? lst)\n       n\n       (recur (rest lst) (inc n)))))", "user": "5d6e4d1ee4b04d129b00f2c4"}, {"problem": 22, "code": "(fn [x]\n  (loop [y x\n         n 0]\n    (if (seq y)\n      (recur (rest y) (inc n))\n      n)))", "user": "5c9a5cf4e4b048ec896c5aad"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5d18d327e4b0902706380dff"}, {"problem": 22, "code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "5d6e951ae4b04d129b00f2cb"}, {"problem": 22, "code": "#(reduce (fn [acc item] (inc acc)) 0 %)", "user": "5d6f063de4b04d129b00f2d1"}, {"problem": 22, "code": "(fn cnt [s]\n  (if\n    (empty? s)\n    0\n    (+ 1 (cnt (rest s)))\n  )\n)", "user": "5d6f0533e4b04d129b00f2d0"}, {"problem": 22, "code": "(fn my-count\n  [some-seq]\n  (loop [counter 0 my-seq some-seq]\n    (if (seq my-seq)\n      (recur (inc counter) (rest my-seq))\n      counter)))", "user": "5d6e5ec6e4b04d129b00f2c7"}, {"problem": 22, "code": "reduce (fn [sum _] (inc sum)) 0", "user": "5d6537fce4b0db5d338d15cf"}, {"problem": 22, "code": "(fn my-count \n      ([coll]\n      (my-count coll 0))\n      ([coll cnt]\n      (if(nil? (first coll))\n        cnt\n        (my-count (rest coll) (inc cnt))\n      )\n      ))", "user": "5d6d3182e4b04d129b00f2bb"}, {"problem": 22, "code": "(fn [sq]\n  (loop [s sq\n         res 0]\n    (if (empty? s)\n      res\n      (recur (rest s) (inc res)))))", "user": "5d64013ce4b0c9e5857d502d"}, {"problem": 22, "code": "#(reduce (fn [a b] (inc a)) 0 %)", "user": "5d6c2aace4b04d129b00f2ad"}, {"problem": 22, "code": "(comp last map) (fn[i _] (inc i)) (range)", "user": "5d6e5b53e4b04d129b00f2c6"}, {"problem": 22, "code": "reduce (fn [a _] (inc a)) 0", "user": "5d6d2e11e4b04d129b00f2ba"}, {"problem": 22, "code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "5d6e6a2de4b04d129b00f2c8"}, {"problem": 22, "code": "#(reduce (fn [prev _] (inc prev)) 0 (vec %))", "user": "5d704f7ee4b04d129b00f2d7"}, {"problem": 22, "code": "(fn count-elements [coll]\n   (loop [i 0 c coll]\n     (if (= nil (next (seq c)))\n       (inc i)\n       (recur (inc i) (next (seq c))))))", "user": "5d6691cee4b0db5d338d15e9"}, {"problem": 22, "code": "(fn [s] (reduce (fn [v _] (inc v)) 0 s))", "user": "5d728116e4b02e6b30c9350f"}, {"problem": 22, "code": "(fn \n  [coll]\n  (loop [items coll size 0]\n    (if (empty? items)\n      \tsize\n      (recur (rest items) (inc size))\n      )\n    )\n  )", "user": "5d5950c1e4b02ba5928a6827"}, {"problem": 22, "code": "(fn [y]\n\t(loop [i 0 l y]\n      (if (empty? (seq l))\n        i\n        (recur (+ i 1) (rest l))\n      )\n    )\n)", "user": "5d6fae1ee4b04d129b00f2d4"}, {"problem": 22, "code": "(fn solution\n  ([sq]\n   (solution sq 0))\n\n  ([sq acc]\n   (if (first sq)\n     (solution (rest sq) (+ acc 1))\n     acc)))", "user": "5d73fb31e4b02e6b30c93516"}, {"problem": 22, "code": "#(loop [c % n 0]\n    (if (empty? c)\n      n\n      (recur (rest c) (+ n 1))))", "user": "5d764e52e4b02e6b30c93524"}, {"problem": 22, "code": "(fn co\n  [se]\n  (loop [x se y 1]\n    (if (next x)\n      (recur (next x) (inc y))\n      y)))", "user": "5d6febe6e4b04d129b00f2d5"}, {"problem": 22, "code": "(fn [y](loop [x 1\n         listOfItems y]\n    (if (not-empty (rest listOfItems))\n      (recur (inc x) (rest listOfItems))\n      (int x))))", "user": "5d741ebce4b02e6b30c93517"}, {"problem": 22, "code": "#((fn mycount [s n] (if (= s '()) n (recur (rest s) (+ n 1)))) % 0)", "user": "5d444819e4b07c84aa5ae69c"}, {"problem": 22, "code": "(fn [s] (reduce + (map (fn [x] 1) s)))", "user": "5d642aa9e4b0c9e5857d502f"}, {"problem": 22, "code": "#(loop [i 0 l %]\n   (if (empty? l) i\n   (recur (inc i) (rest l))\n     ))", "user": "5d68e60be4b0db5d338d1603"}, {"problem": 22, "code": "(fn laske [x]\n  (if (nil? (first x))\n    0\n    (+ 1 (laske (rest x)))\n  )\n)", "user": "5d77a828e4b02e6b30c93531"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5d762f11e4b02e6b30c93523"}, {"problem": 22, "code": "(fn [sequence] \n (loop [counter 0 temporary-sequence sequence]\n  (if (empty? temporary-sequence)\n   counter\n  (recur (inc counter) (rest temporary-sequence)))))", "user": "5d6b1d11e4b04d129b00f2a2"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5c56e264e4b0fb8c5ffd9a39"}, {"problem": 22, "code": "#(reduce \n   (fn [c _] \n     (inc c)) 0 %)", "user": "5d70f310e4b04d129b00f2dc"}, {"problem": 22, "code": "(fn [s] (reduce (fn [x y] (inc x)) 0 s))", "user": "5d72ad8fe4b02e6b30c93512"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5d76cb59e4b02e6b30c93528"}, {"problem": 22, "code": "#(reduce + (vals (frequencies %)))", "user": "5d7837c0e4b02e6b30c93535"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %1))", "user": "5a7de7a3e4b03baeef927702"}, {"problem": 22, "code": "(fn my-count \n  ([sq] (my-count sq 0)) \n  ([sq ctr] \n   (if (empty? sq)\n     ctr \n     (my-count (rest sq) (inc ctr)))))", "user": "5d7a748ce4b02e6b30c93547"}, {"problem": 22, "code": "#(loop [n 1\n        col %]\n   (if (next col)\n     (recur (inc n) (next col))\n     n))", "user": "4ec549e1535d6d7199dd3691"}, {"problem": 22, "code": "(fn [x] (inc(apply max (keys (zipmap (range) x)))))", "user": "5d7a49d7e4b02e6b30c93546"}, {"problem": 22, "code": "(fn\n  [seq]\n  (->> seq\n\t  (map (fn [x] 1))\n  (reduce +)       )\n\n  )", "user": "5d78d680e4b02e6b30c9353c"}, {"problem": 22, "code": "(fn [coll]\n  (loop [i 0 el coll]\n    (if (empty? el)\n      i\n      (recur (inc i) (rest el)))))", "user": "5d7b90ede4b02e6b30c93552"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5adb4ffbe4b0837691e92bed"}, {"problem": 22, "code": "reduce (fn [acc x]\n          (+ acc 1)) 0", "user": "5d7bd68ee4b02e6b30c93554"}, {"problem": 22, "code": "(fn [x] (reduce (fn [a b] (inc a)) 0 x))", "user": "5d7bd708e4b02e6b30c93555"}, {"problem": 22, "code": "(fn [x] (loop [remaining x cntr 0] (if (empty? remaining) cntr (recur (rest remaining) (+ cntr 1)))))", "user": "5d7158f3e4b04d129b00f2e1"}, {"problem": 22, "code": "(fn [coll]\n  (loop [coll  coll\n         total 0]\n    (if (empty? coll)\n      total\n      (recur (rest coll) (inc total)))))", "user": "5c032eaee4b0bdcf453d1671"}, {"problem": 22, "code": "(fn [colecao]\n  (reduce + (map (fn [x] 1) colecao)))", "user": "5d797deee4b02e6b30c93541"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %1)", "user": "5d1609f9e4b0902706380dd9"}, {"problem": 22, "code": "(fn my-nth [l] \n  (if (empty? l) \n    0 \n    (+ (my-nth (rest l)) 1)))", "user": "5d7d17ece4b02e6b30c93558"}, {"problem": 22, "code": "(fn [l] (reduce (fn [acc x] (inc acc)) 0 l))", "user": "5d4a6511e4b0776584bd6f21"}, {"problem": 22, "code": "(fn [s] (reduce (fn [c _] (inc c)) 0 s))", "user": "5d80789ee4b0915913b1d36a"}, {"problem": 22, "code": "(fn [seq]\n      (reduce (fn [acc y] (inc acc))\n              0\n              seq)\n      )", "user": "5d809b4fe4b0915913b1d36c"}, {"problem": 22, "code": "(fn [x] \n  (reduce \n   (fn [total elem] (+ total 1))\n   0\n   x))", "user": "5d7faa52e4b0915913b1d365"}, {"problem": 22, "code": "#(reduce (fn [n _] (inc n)) 0 %)", "user": "5d81b40ce4b0915913b1d379"}, {"problem": 22, "code": "(fn cnt [s] \n  (if (= s [])\n    0\n    (+ 1 (cnt (rest s)))))", "user": "5d81c244e4b0915913b1d37a"}, {"problem": 22, "code": "#(reduce (fn [n _] (inc n)) 0 %)", "user": "5d81eba4e4b0915913b1d37b"}, {"problem": 22, "code": "(fn [li]\n  (reduce\n   (fn [a v]\n     (if (nil? v)\n       a\n       (+ 1 a)))\n   0\n   li))", "user": "5d8211a6e4b0915913b1d37e"}, {"problem": 22, "code": "reduce (fn [i _] (inc i)) 0", "user": "5d81fc4fe4b0915913b1d37d"}, {"problem": 22, "code": "(fn my-count [lst]\n  (if (empty? lst) 0 (+ 1 (my-count (rest lst))))\n  )", "user": "5d828b7ee4b0915913b1d382"}, {"problem": 22, "code": "#(loop [coll %, i 0]\n   (if (empty? coll)\n     i\n     (recur (rest coll) (inc i))))", "user": "5d7eaf5fe4b0492f5d910fc3"}, {"problem": 22, "code": "#(loop [counter 1 head (first %) tail (rest %)] (if (not (empty? tail)) (recur (+ counter 1) (first tail) (rest tail) ) counter))", "user": "5d824225e4b0915913b1d37f"}, {"problem": 22, "code": "(fn [x] (let [index (atom 0)] (while (not (empty? (drop @index x))) (reset! index (inc @index))) @index))", "user": "5d1ef23ee4b02ea6f0fb69bb"}, {"problem": 22, "code": "(fn my-count [s]\n  (loop [s s\n         n 0]\n    (if (empty? s)\n      n\n      (recur (rest s) (inc n)))))", "user": "5d51884be4b0776584bd6f61"}, {"problem": 22, "code": "(fn [coll]\n  (loop [coll coll\n         acc 0]\n    (if (empty? coll)\n      acc\n      (recur (rest coll) (+ 1 acc)))))", "user": "5ca125a5e4b048ec896c5b79"}, {"problem": 22, "code": "(fn [col]\n  (loop [counter 0 remvctr col]\n    (if (empty? (vec remvctr))\n      counter\n      (recur (inc counter) (rest (vec remvctr)))\n    )\n  )\n)", "user": "5d62da51e4b0c9e5857d5020"}, {"problem": 22, "code": "(fn [seq] (reduce + (map (fn [x] (+ 0 1)) seq)))", "user": "5d84545ee4b0915913b1d38b"}, {"problem": 22, "code": "(fn [x] (reduce + (map (fn [y] 1) x)))", "user": "5d87cc7ee4b0915913b1d3a3"}, {"problem": 22, "code": "(fn my-count [items]\n  (loop [index 0\n        is items]\n    (if (empty? is)\n      index\n      (recur (+ 1 index) (rest is)))))", "user": "5d80f328e4b0915913b1d372"}, {"problem": 22, "code": "reduce (fn [counter coll] (inc counter)) 0", "user": "5d8542c9e4b0915913b1d391"}, {"problem": 22, "code": "reduce (fn [ac _] (inc ac)) 0", "user": "54d187b7e4b0e8a36923e5e4"}, {"problem": 22, "code": "#(loop [i 0 list %]\n  (if (empty? list) i\n    (recur (inc i) (rest list))\n    )\n  )", "user": "5d88a22de4b0915913b1d3ab"}, {"problem": 22, "code": "(partial \n  (fn [res coll]\n    (if (empty? coll) res\n    (recur (+ 1 res) (rest coll)))) 0)", "user": "5d89de0de4b0915913b1d3c0"}, {"problem": 22, "code": "(fn [n col] (if (empty? col) n (recur (inc n) (rest col)))) 0", "user": "5d838684e4b0915913b1d385"}, {"problem": 22, "code": "(fn docount \n  ([input] (docount input 0)) \n  ([input cpt] (if \n                 (empty? input) \n                 cpt \n                 (docount (rest input) (inc cpt)) \n               )\n  )\n)", "user": "5d79165ae4b02e6b30c9353e"}, {"problem": 22, "code": "(fn [l] (apply + (map (fn [n] 1) l)))", "user": "5d83b9aae4b0915913b1d386"}, {"problem": 22, "code": "(fn cnt ([lst] (cnt lst 0))\n  \t\t([lst acc]\n         (if (empty? lst) \n           \tacc \n           \t(cnt (rest lst) (inc acc)))))", "user": "5d8a3b3ee4b0915913b1d3c8"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5d895104e4b0915913b1d3b7"}, {"problem": 22, "code": "(fn my-count ([coll] (my-count coll 0))\n  \t([coll total] \n     \t(if (empty? coll)\n     \ttotal\n     \t(my-count (rest coll) (+ 1 total)))))", "user": "5d896a64e4b0915913b1d3b8"}, {"problem": 22, "code": "(fn [xs] (loop [i 0 ls xs]\n           (if ls\n             (recur (inc i) (next ls))\n             i)))", "user": "5d84fccae4b0915913b1d390"}, {"problem": 22, "code": "reduce (fn [cc _] (inc cc)) 0", "user": "5d88c6a3e4b0915913b1d3ad"}, {"problem": 22, "code": "(fn [lis] (apply + (map (fn [x] 1) lis)))", "user": "5d8b2c63e4b0915913b1d3d0"}, {"problem": 22, "code": "(fn[sequence](reduce (fn[axx v](inc axx)) 0 sequence))", "user": "5d8aad1ce4b0915913b1d3cd"}, {"problem": 22, "code": "(fn [s]\n    (loop [s s, n 0]\n      (if (empty? s)\n        n\n        (recur (rest s) (inc n)))))", "user": "5d8b4960e4b0915913b1d3d3"}, {"problem": 22, "code": "(fn [l] (reduce + 0 (map (fn [x] 1) l)))", "user": "5d8c7a16e4b0915913b1d3e0"}, {"problem": 22, "code": "(fn cn [col]\n  (if (empty? col)\n    0\n    (+ 1 (cn (rest col)))))", "user": "5d8f4c78e4b0915913b1d3f0"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "5d88d820e4b0915913b1d3b1"}, {"problem": 22, "code": "#(reduce (fn [cnt _] (inc cnt)) 0 %)", "user": "5d887d27e4b0915913b1d3a8"}, {"problem": 22, "code": "#(reduce (fn [value coll] (inc value)) 0 %)", "user": "5d8ce0e6e4b0915913b1d3e5"}, {"problem": 22, "code": "(fn [coll]\n  (reduce (fn [acc _] (inc acc)) 0 coll))", "user": "5d927df4e4b0915913b1d40f"}, {"problem": 22, "code": "(fn count-coll [xs] (\n         if (empty? xs) \n                     0  \n                     (inc (count-coll (rest xs)) )))", "user": "5d91acb8e4b0915913b1d406"}, {"problem": 22, "code": "(fn [coll] (alength (to-array coll)))", "user": "5d942d68e4b0d3f9b434ad1e"}, {"problem": 22, "code": "#(loop [xs % total 0]\n   (if (empty? xs)\n     total\n     (recur (rest xs) (inc total))))", "user": "5d94816ce4b0d3f9b434ad28"}, {"problem": 22, "code": "reduce (fn [x _] (inc x)) 0", "user": "5d84f5e6e4b0915913b1d38f"}, {"problem": 22, "code": "reduce #(or (inc %1) %2) 0", "user": "5d915f01e4b0915913b1d401"}, {"problem": 22, "code": "(fn\n\t[inputThing]\n\t(loop [i 0]\n\t\t(if (empty? (drop i  inputThing))\n\t\t\ti\n\t\t\t(recur (inc i)))))", "user": "5d8b3d5be4b0915913b1d3d1"}, {"problem": 22, "code": "(fn [coll]\n  (loop [L (into '() coll) n 0]\n    (if (not= '() L)\n      (recur (rest L) (inc n))\n      n)))", "user": "5d90190ce4b0915913b1d3f7"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5d9a06f9e4b0d3f9b434ad43"}, {"problem": 22, "code": "#(reduce + (map (fn [_] 1) %))", "user": "5d99dc47e4b0d3f9b434ad42"}, {"problem": 22, "code": "( fn [x] \n   (loop [n 0 y x] \n     (if (first y)\n       (recur (+ n 1) (rest y))\n       n\n       )\n     )\n   )", "user": "5d94fdf9e4b0d3f9b434ad2b"}, {"problem": 22, "code": "(fn [seq]\n   (->\n     (into [] seq)\n     (.lastIndexOf (last seq))\n     (+ 1)\n     ))", "user": "5d94a878e4b0d3f9b434ad29"}, {"problem": 22, "code": ";(fn counter [xs] \n;  (reduce + (map (fn [a b] a) \t\t; zip between an n-element 'xs' and (1 1 1 ...) list\n;                 (repeat 1) xs)))\t; and keep only the ones; the add-reduce them, producing the desired count\n\n;(fn [xs] (reduce (fn [sum _] (inc sum)) 0 xs)) ; increment an accumulator 'sum' for every element in XS, producing desired count\n\n;#(reduce (fn [sum _] (inc sum)) 0 %) \t\t\t; ditto\n\n(fn [xs] (reduce (fn [sum _] (inc sum)) 0 xs))", "user": "5d9a49c4e4b0d3f9b434ad45"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5d9aeae5e4b0d3f9b434ad4a"}, {"problem": 22, "code": "(fn [coll] (reduce (fn [x _] (inc x)) 0 coll))", "user": "5d97b602e4b0d3f9b434ad3a"}, {"problem": 22, "code": "#(loop [lst %1 length 0] (if (empty? lst) length (recur (rest lst) (inc length))))", "user": "5d9c1226e4b0d3f9b434ad51"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5d9bda4fe4b0d3f9b434ad50"}, {"problem": 22, "code": "#(reduce (fn [acc elt] (inc acc)) 0 %)", "user": "5d9475e4e4b0d3f9b434ad25"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "570d4c30e4b0b0fb43fd06da"}, {"problem": 22, "code": "(fn [seq]\n  (reduce (fn [tot seq]\n           (+ tot 1))\n          0\n          seq))", "user": "5d96edeae4b0d3f9b434ad35"}, {"problem": 22, "code": "reduce (fn [acc _] (inc acc)) 0", "user": "5d9c9674e4b0eb781811cdaf"}, {"problem": 22, "code": "(fn f [s] (if (= (seq s) nil) 0 (+ 1 (f (rest s)))))", "user": "5d9ccf36e4b0eb781811cdb0"}, {"problem": 22, "code": "(fn [seq]\n(loop [i 0, a seq]\n  (if (empty? a)\n    i\n    (recur (inc i) (rest a)))))", "user": "5d94753de4b0d3f9b434ad24"}, {"problem": 22, "code": ";(comp (partial reduce +) (partial map (constantly 1)) )\n#( ->> % (map (constantly 1)) (reduce +))", "user": "5d9e7971e4b000c986472bc1"}, {"problem": 22, "code": "(partial reduce (fn [t _] (inc t)) 0)", "user": "5cf6522be4b0b71b1d808a58"}, {"problem": 22, "code": "#(reduce + (vals (frequencies %)))", "user": "5d9f4442e4b000c986472bca"}, {"problem": 22, "code": "(fn [xs] \n  (loop [elems 0\n         rem_xs xs]\n    (if (nil? (first rem_xs))\n      elems\n      (recur (inc elems) (rest rem_xs))\n    )\n   )\n)", "user": "5da07698e4b000c986472bd3"}, {"problem": 22, "code": "reduce (fn [acc, v2] (inc acc)) 0", "user": "5da05bcce4b000c986472bd0"}, {"problem": 22, "code": "(fn   \n  [my-seq]\n  (loop [my-seq my-seq\n         accumulator 0]\n    (if (empty? my-seq)\n      accumulator\n      (recur (drop 1 my-seq) (inc accumulator)))))", "user": "5d9c8a85e4b0eb781811cdad"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5d9edc21e4b000c986472bc6"}, {"problem": 22, "code": "#(loop [x % y 0] (if-not (last x) y (recur (rest x) (+ y 1))))", "user": "5d6c2b80e4b04d129b00f2ae"}, {"problem": 22, "code": "(fn [seq]\n  (reduce (fn [acc cur] 1\n            [cur] (inc acc)) 0 seq))", "user": "5ccf125ce4b0ccb0619628c0"}, {"problem": 22, "code": "(fn [coll]\n  (loop [coll coll\n         c 0]\n    (if (nil? coll)\n      c\n      (recur (next coll) (inc c)))))", "user": "5d9e1006e4b0eb781811cdbd"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "58800a48e4b0f1effa3b7604"}, {"problem": 22, "code": "(fn [x] (alength (to-array x)))", "user": "5da07d10e4b000c986472bd5"}, {"problem": 22, "code": "(fn [l] (let [counter (atom 0)] (while (not= (nth l @counter -1) -1) (swap! counter + 1)) @counter))", "user": "5d974b1de4b0d3f9b434ad36"}, {"problem": 22, "code": "(fn my-counter [s]\n  (loop [s s n 0]\n    (if (empty? s)\n      n\n      (recur (rest s) (inc n)))))", "user": "5da44d35e4b000c986472bf1"}, {"problem": 22, "code": "(fn q [coll] (inc(key (apply max-key key (zipmap (range) coll)))))", "user": "5da4fc6be4b000c986472bff"}, {"problem": 22, "code": "(fn fun [dataList]\n\t(loop [loopList dataList\n           i 0]\n      (if (empty? loopList) \n          i\n          (recur (rest loopList) (inc i))\n      )\n  )\n)", "user": "5da20e73e4b000c986472be1"}, {"problem": 22, "code": "(fn coun [s] (if (seq s) (inc (coun (rest s))) 0))", "user": "5d931a58e4b0d3f9b434ad10"}, {"problem": 22, "code": "(fn me\n  ([xs]\n   (me (rest xs) 1))\n  ([xs n]\n   (if (empty? xs)\n     n\n     (me (rest xs) (inc n)))))", "user": "5da7176ae4b000c986472c13"}, {"problem": 22, "code": "(fn [l] (loop [l l n 0] (if (empty? l) n (recur (rest l) (+ n 1)))))", "user": "5da71eaee4b000c986472c15"}, {"problem": 22, "code": "(fn [y] (reduce + (map (fn [x] 1) y)))", "user": "5da4618be4b000c986472bf3"}, {"problem": 22, "code": "#(reduce (fn [x _] (inc x)) 0 %)", "user": "5da760ebe4b000c986472c1a"}, {"problem": 22, "code": "#(reduce (fn [v, _] (inc v)) 0 %)", "user": "58ac0612e4b0005cfeb1a73c"}, {"problem": 22, "code": "(comp inc first last (partial map vector (range)))", "user": "5da8fa72e4b000c986472c2d"}, {"problem": 22, "code": "(fn [coll] (reduce (fn [x _] (inc x)) 0 coll))", "user": "5da975b9e4b000c986472c32"}, {"problem": 22, "code": "(fn [coll] (inc (first (last (map vector (range) coll )))))", "user": "5d89427ae4b0915913b1d3b5"}, {"problem": 22, "code": "(fn count-rec [coll] \n  (let [head (first coll) \n        tail (rest coll)] \n    (if (nil? head) \n      0 \n      (inc (count-rec tail))\n    )\n  )\n)", "user": "5da9662ce4b000c986472c30"}, {"problem": 22, "code": "(fn foo [listy]\n   (if\n    (not= (rest listy) '())\n     (+ (foo (rest listy)) 1)\n     1))", "user": "5da71a00e4b000c986472c14"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5daa0d56e4b000c986472c3c"}, {"problem": 22, "code": "#(let\n  [myCount (fn m [acc s]\n             (if (empty? s)\n               acc\n               (m (inc acc) (rest s))))]\n  (myCount 0 %))", "user": "5daa1fc8e4b000c986472c3e"}, {"problem": 22, "code": "reduce (fn [acc cur] (inc acc)) 0", "user": "5da8b8ece4b000c986472c28"}, {"problem": 22, "code": "#(reduce (fn [x _] (inc x)) 0 %)", "user": "55f335f4e4b06e875b46ce57"}, {"problem": 22, "code": "(fn [x] (apply + (map #(if (= false (nil? %)) 1) x)))", "user": "5dab11cde4b000c986472c45"}, {"problem": 22, "code": "#(+ 1 (last (map-indexed (fn [i x] i) %)))", "user": "5d9475e9e4b0d3f9b434ad26"}, {"problem": 22, "code": "(fn [x] (reduce + (map (fn [x] 1) x)))", "user": "5da8e170e4b000c986472c29"}, {"problem": 22, "code": "(fn bbb [coll](let [inn (fn aaa [coll ret](cond\n                                              (empty? coll) ret\n                                              :else (aaa (rest coll) (inc ret))))]\n           (inn coll 0)))", "user": "5dadf73ee4b0f8c104ccfc86"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5da8e646e4b000c986472c2b"}, {"problem": 22, "code": "(fn [coll]\n  (reduce (fn [sum _] (inc sum)) 0 coll))", "user": "5dae7b05e4b0f8c104ccfc89"}, {"problem": 22, "code": "#(reduce (fn [x y] (+ x 1)) 0 %)", "user": "5da98129e4b000c986472c33"}, {"problem": 22, "code": "(fn\n  [elem]\n  (alength(into-array elem )))", "user": "5daa1f69e4b000c986472c3d"}, {"problem": 22, "code": "(fn [param] \n  (reduce (fn [x y] (+ x 1)) 0 param))", "user": "5daeb6bce4b0f8c104ccfc8b"}, {"problem": 22, "code": "(fn [x] \n  (loop [coll x size 0]\n    (if (empty? coll)\n      size\n      (recur (rest coll) (inc size)))))", "user": "5da9d89ae4b000c986472c3b"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5dad3bb0e4b0f8c104ccfc7e"}, {"problem": 22, "code": "#(reduce (fn [acc _n] (inc acc)) 0 %1)", "user": "5d7aa22ee4b02e6b30c9354e"}, {"problem": 22, "code": "(fn [xs]\n  (loop [xs xs\n         n 0]\n    (if (first xs)\n      (recur (next xs) (inc n))\n      n)))", "user": "5db0d470e4b0f8c104ccfc9e"}, {"problem": 22, "code": "(fn [x] (+ (first (last (map-indexed vector x))) 1))", "user": "5daec18ae4b0f8c104ccfc8c"}, {"problem": 22, "code": "(fn tst [lst]\n  (loop [s lst\n         n 0]\n    (if (empty? s)\n      n\n      (recur (rest s) (inc n)))))", "user": "5d9515a9e4b0d3f9b434ad2c"}, {"problem": 22, "code": "(fn [sq] \n  (loop [i 0\n         xs sq]\n    (if (empty? xs) i\n      (recur (inc i) (rest xs)))))", "user": "5daed892e4b0f8c104ccfc8f"}, {"problem": 22, "code": "#(reduce (fn [x y] (+ x 1)) 0 %)", "user": "5db0bcc9e4b0f8c104ccfc9d"}, {"problem": 22, "code": "#(reduce (fn [n _] (inc n)) 0 %)", "user": "4db3a0e5535df7e46ed9b6d0"}, {"problem": 22, "code": "reduce (fn [cnt _] (inc cnt)) 0", "user": "5db1969be4b010eb3c36cd06"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "590b2d92e4b047aa04b199cf"}, {"problem": 22, "code": "#(reduce + (map (fn [n] 1) % ))", "user": "5cbf5148e4b0ccb06196276a"}, {"problem": 22, "code": ";;(fn [col]\n;;  (reduce (fn [x y] (+ x 1)) 0 col))\n\n#(reduce (fn [x y] (+ x 1)) 0 %)", "user": "5db4bd07e4b010eb3c36cd2c"}, {"problem": 22, "code": "(fn count-coll\n  [coll]\n  (if (empty? coll) 0\n      (inc (count-coll (rest coll)))))", "user": "5db59d4ce4b010eb3c36cd30"}, {"problem": 22, "code": "(partial reduce (fn [a _] (inc a)) 0)", "user": "5db5d09be4b010eb3c36cd31"}, {"problem": 22, "code": "(fn [seq] (reduce (fn [left & right] (+ left 1)) 0 seq))", "user": "5db485dfe4b010eb3c36cd26"}, {"problem": 22, "code": "(fn [coll]\n  (loop [current-seq coll n 1]\n    (if (empty? current-seq)\n      (dec n)\n      (recur (rest current-seq) (inc n)))))", "user": "5db6cc4ae4b010eb3c36cd3b"}, {"problem": 22, "code": "(fn [coll] (reduce (fn [a b] (inc a)) 0 coll))", "user": "5db5d8b0e4b010eb3c36cd32"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5db68091e4b010eb3c36cd3a"}, {"problem": 22, "code": "(fn num-of-elems [s]\n  (reduce (fn [x y] (+ x 1)) 0 s))", "user": "5db826b4e4b010eb3c36cd47"}, {"problem": 22, "code": "#(reduce + (map (fn [x] (int 1)) %))", "user": "5db8663ce4b010eb3c36cd4c"}, {"problem": 22, "code": "#(reduce + (map (fn[x] (int 1)) %))", "user": "5db861bce4b010eb3c36cd4b"}, {"problem": 22, "code": "#(reduce (fn [vale %]\n           (inc vale)) 0 %)", "user": "5db9a6c3e4b010eb3c36cd56"}, {"problem": 22, "code": "#(reduce + (map (fn [_] (int 1)) %))", "user": "5dba04cde4b010eb3c36cd5b"}, {"problem": 22, "code": "reduce (fn [acc _] (inc acc)) 0", "user": "5d9e8e40e4b000c986472bc2"}, {"problem": 22, "code": "#(apply + (map (fn [i] 1) %))", "user": "5dbb3667e4b09f47823971a6"}, {"problem": 22, "code": "(comp #(reduce + %) #(map (fn [x] 1) %))", "user": "5dbbf77ce4b09f47823971ab"}, {"problem": 22, "code": "(fn [x] (reduce (fn [acc _] (inc acc)) 0 x))", "user": "5d8c8175e4b0915913b1d3e1"}, {"problem": 22, "code": "#(reduce + ( map ( constantly 1) %1))", "user": "53d63e6ce4b0e771c3025454"}, {"problem": 22, "code": "(fn length [s] (if (empty? s)\n                   0\n                   (let [coll (seq s)]\n                     (+ (.lastIndexOf coll (last coll)) 1))))", "user": "5d6bff25e4b04d129b00f2ab"}, {"problem": 22, "code": "#(reduce (fn [acc _] (+ acc 1)) 0 %)", "user": "5dbd53e0e4b09f47823971bc"}, {"problem": 22, "code": "(fn length [x] (if (empty? x) 0 (+ 1 (length (rest x)))))", "user": "5dbd86bce4b09f47823971bf"}, {"problem": 22, "code": "#(reduce (fn [x _] (+ 1 x)) 0 %)", "user": "5dbd51cfe4b09f47823971bb"}, {"problem": 22, "code": "(fn [s]\n  (loop [lst s len 0]\n    (if (empty? lst) \n      len\n      (recur (rest lst) (+ len 1)))))", "user": "5dbe63bde4b09f47823971c7"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5dbf0281e4b0e59a23173d75"}, {"problem": 22, "code": "(fn [in] (reduce + (map (constantly 1) in)))", "user": "5db2763de4b010eb3c36cd16"}, {"problem": 22, "code": "reduce (fn [accum cur] (inc accum)) 0", "user": "5dbc3ab9e4b09f47823971b1"}, {"problem": 22, "code": "(fn[s](reduce (fn [a b](+ a 1) ) 0  (#(seq %) s)))", "user": "5dbb5200e4b09f47823971a9"}, {"problem": 22, "code": "(fn [items] (reduce (fn [item1 item2] (inc item1 ) ) 0 items) )", "user": "5db70407e4b010eb3c36cd3e"}, {"problem": 22, "code": "(fn [coll] \n  (reduce + (map (fn [_] 1) coll)))", "user": "5dc02058e4b0e59a23173d7c"}, {"problem": 22, "code": ";;#(loop [cnt 0\n;;        sq  %]\n;;   (if (empty? sq)\n;;     cnt     \n;;     (recur (+ cnt 1) (next sq))))\n(fn [coll] (reduce (fn [a _] (inc a)) 0 coll))", "user": "5dbac8ebe4b010eb3c36cd62"}, {"problem": 22, "code": "#(loop [coll %\n        acc 0]\n   (if (empty? coll)\n     acc\n     (recur (rest coll) (inc acc))))", "user": "5db19599e4b010eb3c36cd05"}, {"problem": 22, "code": "#(reduce +(map(constantly 1)%))", "user": "5814dcf8e4b0f478707a062f"}, {"problem": 22, "code": "#(loop [ cl % n 0]\n   (cond\n    (first cl)\n      (recur (rest cl) (inc n))\n    :else n))", "user": "5dc12b0ae4b0e59a23173d84"}, {"problem": 22, "code": "#(alength(to-array %))", "user": "5db1e852e4b010eb3c36cd0a"}, {"problem": 22, "code": "(partial (fn [x coll] (if (empty? coll) x (recur (inc x) (rest coll)))) 0)", "user": "5db7376fe4b010eb3c36cd43"}, {"problem": 22, "code": "(fn [collection]\n  (reduce + (map (fn [_] 1) collection)))", "user": "5dba063ee4b010eb3c36cd5c"}, {"problem": 22, "code": "(fn [coll]\n  (loop [coll coll\n         result 0]\n    (if (empty? coll)\n      result\n      (recur (rest coll) (inc result)))))", "user": "5dbe27c3e4b09f47823971c4"}, {"problem": 22, "code": "(fn my-count\n  ([s] (my-count 0 (into '() s))) \n  ([x lst] (if (= '() lst)\n               x\n               (my-count (+ x 1) (rest lst)))))", "user": "5db5f16ce4b010eb3c36cd34"}, {"problem": 22, "code": "(fn [x] \n  (loop [sq x counter 0]\n    (if (empty? sq)\n      counter\n      (recur (rest sq) (inc counter)) )))", "user": "5db16084e4b010eb3c36cd01"}, {"problem": 22, "code": "#(apply + (map (constantly 1) %))", "user": "5dc40814e4b02f9375f4e1ae"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5dc53c03e4b02f9375f4e1bc"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "5dc5982be4b02f9375f4e1c0"}, {"problem": 22, "code": "(fn cunt [elements] \n\t(if (empty? elements) \n      0\n      (+ 1 (cunt (rest elements)))))", "user": "5dc4719ae4b02f9375f4e1b5"}, {"problem": 22, "code": "(fn [sq] ((comp inc first last) (map #(conj [] %1 %2) (range) sq)))", "user": "5da94ccfe4b000c986472c2f"}, {"problem": 22, "code": "(fn [seq] \n  ((fn [seq acc] \n     (if (empty? seq) acc (recur (rest seq) (inc acc)))) seq 0))", "user": "5dc6e7f9e4b02f9375f4e1ca"}, {"problem": 22, "code": "#(reduce (fn [x y] (+ x 1)) 0 %)", "user": "5dc72a9ce4b02f9375f4e1cd"}, {"problem": 22, "code": "(fn c [l]\n  (if (empty? l) 0\n  (+ (c (rest l)) 1)))", "user": "5dc80f78e4b02f9375f4e1d5"}, {"problem": 22, "code": "#(reduce (fn [a _] (inc a)) 0 %)", "user": "5dc88a38e4b02f9375f4e1db"}, {"problem": 22, "code": "(fn [x] (reduce (fn [a c] (+ 1 a)) 0 x))", "user": "5daae405e4b000c986472c44"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5dc9ab1de4b02f9375f4e1e9"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5dc85f8ae4b02f9375f4e1da"}, {"problem": 22, "code": "(fn [coll]\n  (loop [remaining-coll coll counter 0]\n    (if (empty? remaining-coll)\n     counter\n     (recur (drop 1 remaining-coll) (inc counter)))\n  )\n)", "user": "5dc9c4f2e4b02f9375f4e1f0"}, {"problem": 22, "code": "#(reduce (fn [ct _] (inc ct)) 0 %)", "user": "5dc9d5c3e4b03836ba07d824"}, {"problem": 22, "code": "reduce (fn [i el] (inc i)) 0", "user": "5dc9ccf8e4b02f9375f4e1f1"}, {"problem": 22, "code": "(fn [coll] \n  (reduce (fn [acc _] (inc acc)) 0 coll))", "user": "5db93acbe4b010eb3c36cd51"}, {"problem": 22, "code": "(fn f [x] (if (empty? x) 0 (inc (f (rest x)))))", "user": "5db92996e4b010eb3c36cd50"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "5dc9ae96e4b02f9375f4e1ea"}, {"problem": 22, "code": "(fn [l]\n  (let [f (fn [l acc]\n            (if l (recur (next l) (inc acc)) acc))]\n    (f l 0)))", "user": "5db35f85e4b010eb3c36cd22"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5dca5e0ae4b02b31cc3da3af"}, {"problem": 22, "code": "(fn determine-size\n  ([col]\n   (determine-size col 0))\n  ([col, size]\n   (if (empty? col)\n     size\n     (determine-size (rest col) (inc size)))))", "user": "5dc9d4ede4b03836ba07d823"}, {"problem": 22, "code": "(fn count-elements\r\n  ([s] (count-elements s 0))\r\n  ([s counter]\r\n   (if (seq s)\r\n     (recur (rest s) (inc counter))\r\n     counter)))", "user": "5ca20d5ce4b048ec896c5b8e"}, {"problem": 22, "code": "(fn[l](reduce + (loop [n l x []]\n  (if (empty? n)\n    x\n    (recur (rest n) (conj x 1))\n  )\n)))", "user": "5d60ea3ae4b0c9e5857d500a"}, {"problem": 22, "code": "(fn [lst]\n  (loop [i lst cnt 0]\n    (cond (empty? i) cnt\n          :t (recur (rest i) (inc cnt)))))", "user": "5dc98556e4b02f9375f4e1e7"}, {"problem": 22, "code": "(fn [sequen] (reduce + (map (fn [elem] 1) sequen)))", "user": "5dc9e5bfe4b03836ba07d826"}, {"problem": 22, "code": "(fn length\n  ([vals] (length vals 0))\n  ([vals total]\n   (if (empty? vals)\n     total\n     (length (rest vals) (inc total)))))", "user": "5dc318cde4b02f700ae81835"}, {"problem": 22, "code": "(fn [coll]\n  (reduce (fn [ret x] (+ 1 ret)) 0 coll))", "user": "5dcbe0dbe4b02b31cc3da3be"}, {"problem": 22, "code": "(fn [arr]\n  (loop [n 0 prod arr]\n    (if (= (first prod) nil)\n      n\n      (recur (inc n) (rest prod)))))", "user": "5dcbd629e4b02b31cc3da3bd"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5d119138e4b02c15ef02198a"}, {"problem": 22, "code": "(fn cnt [l] (if (empty? l) 0 (inc (cnt (rest l)))))", "user": "5dcc0ee9e4b02b31cc3da3c2"}, {"problem": 22, "code": "(fn [s]\n  (loop [c 0\n         sqvn s]\n    (if (empty? sqvn)\n      c\n      (recur (inc c) (rest sqvn)))))", "user": "5dcc152ae4b02b31cc3da3c3"}, {"problem": 22, "code": "(fn my-nth\n  ([coll]\n   (my-nth coll 0))\n  ([coll cnt]\n   (if (not (first coll)) cnt (my-nth (rest coll) (+ cnt 1)))))", "user": "5dcbe1d7e4b02b31cc3da3bf"}, {"problem": 22, "code": "reduce (fn [acc cur] (inc acc)) 0", "user": "5dcb7209e4b02b31cc3da3b9"}, {"problem": 22, "code": "#(reduce (fn [a b] (inc a)) 0 %)", "user": "5dcb303be4b02b31cc3da3b8"}, {"problem": 22, "code": "(fn [x] (alength (to-array x)))", "user": "5dcc5e5ce4b02b31cc3da3c7"}, {"problem": 22, "code": "#(reduce (fn [acc x] (inc acc)) 0 %1)", "user": "5dc9c1cce4b02f9375f4e1ef"}, {"problem": 22, "code": "#(loop [coll % counter 0]\n   (if (empty? coll)\n     counter\n   \t(recur (rest coll) (inc counter))))", "user": "5dcb1e73e4b02b31cc3da3b6"}, {"problem": 22, "code": "#(-> (map list % (range)) last last inc)", "user": "5dc98501e4b02f9375f4e1e6"}, {"problem": 22, "code": "(fn s [col] (if (first col) (+ 1 (s (rest col))) 0))", "user": "5dccbde4e4b0b296f82db5a5"}, {"problem": 22, "code": "(fn [coll]\n  (loop [c 0 remain coll]\n    (if (empty? remain)\n      c\n      (recur (+ c 1) (rest remain)))))", "user": "5da306a3e4b000c986472be7"}, {"problem": 22, "code": "(fn [sequen] \n  (loop [counter 0\n         acc sequen]\n    (if (empty? acc)\n      counter\n      (recur (inc counter)\n             (rest acc)))))", "user": "5dcd182ae4b0b296f82db5a9"}, {"problem": 22, "code": "#(loop [items %1\n        dist  0]\n   (if (empty? items)\n      dist\n     (recur (rest items)\n            (inc dist))\n     ))", "user": "5dcc4b4ae4b02b31cc3da3c6"}, {"problem": 22, "code": "apply (fn count-it\n  [x & xs]\n  (if (empty? xs)\n    1\n    (+ (apply count-it xs) 1)))", "user": "5dc64aafe4b02f9375f4e1c2"}, {"problem": 22, "code": "(fn [s] (reduce (fn [sum x] (inc sum) ) 0 s))", "user": "5dc9b2c7e4b02f9375f4e1eb"}, {"problem": 22, "code": "(fn my-count [lst]\n  \"Return the total number of elements in the list\"\n  (loop [lst lst cnt 0]\n    (if  (nil? (first lst))\n      cnt\n      (recur (next lst) (inc cnt)))))", "user": "5d614059e4b0c9e5857d500e"}, {"problem": 22, "code": "(fn [col] (reduce + (map (constantly 1) col)))", "user": "5dcfdf23e4b0948ae9d9ad43"}, {"problem": 22, "code": "#(reduce (fn [x _] (+ x 1)) 0 %)", "user": "5dcd693de4b0b296f82db5ad"}, {"problem": 22, "code": "#(reduce + \n\t(map \n     (fn [x] (when (not (nil? x))) 1) \n      %))", "user": "5dcfca4ce4b0948ae9d9ad42"}, {"problem": 22, "code": "(fn [arg1]\n  (reduce (fn [v1 v2]\n            (+ v1 1))\n          0\n          arg1)\n  )", "user": "5dd1fb19e4b0948ae9d9ad51"}, {"problem": 22, "code": "#((fn cnt [l c] (if (empty? l) c (cnt (rest l) (+ c 1)))) %1 0)", "user": "5dd35dcbe4b0948ae9d9ad5f"}, {"problem": 22, "code": ";(fn [v] (\n;           loop [n 0 tmp (vec v)]\n;           (if (empty? tmp)\n;             n\n;             (recur (inc n) (pop tmp)))) \n;          )\n\n#(reduce + (map (fn [x] 1) %))", "user": "5dc53ddee4b02f9375f4e1bd"}, {"problem": 22, "code": "#(alength (to-array %))", "user": "5dcd7933e4b0b296f82db5ae"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "5dd44256e4b0948ae9d9ad69"}, {"problem": 22, "code": "#(loop [size 0\n        a %1]\n   (if (= a ()) size \n     (recur (inc size) (rest a))))", "user": "5dd4ed3ae4b0948ae9d9ad72"}, {"problem": 22, "code": "reduce #(inc (first %&)) 0", "user": "5dd405fde4b0948ae9d9ad66"}, {"problem": 22, "code": "(fn counter [collection]\n  (if (nil? (next collection))\n  \t1\n    (inc (counter (rest collection)))\n    )\n  )", "user": "5dcc651de4b02b31cc3da3c8"}, {"problem": 22, "code": "(fn [x] \n  (loop [index 0 \n         arr x] \n    (if (empty? arr) \n        index \n        (recur (inc index) (rest arr))\n        )\n      )\n    )", "user": "5dd67c22e4b0948ae9d9ad80"}, {"problem": 22, "code": "#(loop [s % n 0] (if-not (empty? s) (recur (rest s) (inc n)) n))", "user": "5dce0151e4b0b296f82db5b5"}, {"problem": 22, "code": "(fn len [s]\n  (cond\n   (empty? s) 0\n   :else (inc (len (rest s)))))", "user": "5dd60c58e4b0948ae9d9ad7c"}, {"problem": 22, "code": "(fn f22\n  [sq]\n  (-> (map-indexed (fn [id v]\n                     [id v]) sq)\n      (last)\n      (first)\n      (inc)))", "user": "5bd75870e4b0ed4b8aab4bc0"}, {"problem": 22, "code": "#(reduce (fn [a x] (+ 1 a)) 0 %)", "user": "5dd80be5e4b0948ae9d9ad92"}, {"problem": 22, "code": "(fn [s] (reduce + (map (fn [n] 1) s)))", "user": "5dd90651e4b0948ae9d9ad97"}, {"problem": 22, "code": "(fn my-coun\n  ([_seq] (my-coun _seq 0))\n  ([_seq n]\n   (if (first _seq)\n     (recur (rest _seq) (inc n))\n     n)))", "user": "5dda4254e4b0948ae9d9ad9e"}, {"problem": 22, "code": "(fn ex22\n  ([coll]\n   (ex22 coll 0))\n  ([coll acc]\n   (if (empty? coll)\n     acc\n     (recur (rest coll) (inc acc)))))", "user": "5dd65ea4e4b0948ae9d9ad7f"}, {"problem": 22, "code": "(fn [x]\n  (loop [i x l 0]\n    (if (empty? i)\n      l\n      (recur (rest i) (inc l)))))", "user": "5dd70ee3e4b0948ae9d9ad85"}, {"problem": 22, "code": "#((fn [coll n] (if (empty? coll)\n                n\n                (recur (rest coll) (inc n))))\n                % 0)", "user": "5d9c9446e4b0eb781811cdae"}, {"problem": 22, "code": "(fn [x] (loop [lists x cnt 0] (if (empty? lists) cnt (recur (rest lists) (inc cnt)))))", "user": "5ddc270fe4b0948ae9d9adb9"}, {"problem": 22, "code": "(fn [col]\n  (reduce (fn [cnt _]\n            (inc cnt))\n          0\n          col))", "user": "5ddb6151e4b0948ae9d9adb0"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5ddcf10ae4b0948ae9d9adbe"}, {"problem": 22, "code": "reduce (fn [counter _] (inc counter)) 0", "user": "5ddbd4b3e4b0948ae9d9adb5"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) % ))", "user": "5ddd134ae4b0948ae9d9adc0"}, {"problem": 22, "code": "(fn\n  [lst]\n  ((fn cnt\n     [lst counter]\n     (if (= (first lst) nil)\n       counter\n       (cnt (rest lst) (+ counter 1))\n       )\n     ) lst 0)\n  )", "user": "5dd53e1de4b0948ae9d9ad78"}, {"problem": 22, "code": "#(reduce + (map (fn[x] 1) %))", "user": "5dddc292e4b0948ae9d9adcb"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5dde5364e4b0948ae9d9add2"}, {"problem": 22, "code": "#(reduce (fn [len a] (inc len)) 0 %)", "user": "5dde6251e4b0948ae9d9add3"}, {"problem": 22, "code": "reduce (fn [counter collection] (inc counter)) 0", "user": "5ddecfe5e4b0948ae9d9adda"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "5ddb8a6ee4b0948ae9d9adb2"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5dde4bbce4b0948ae9d9add1"}, {"problem": 22, "code": "#(apply + (map (fn [x] 1) %))", "user": "5dde0b71e4b0948ae9d9add0"}, {"problem": 22, "code": "(fn my-count\n  [coll]\n  (apply + (map (fn [_] 1) coll)))", "user": "5de012c8e4b0948ae9d9ade2"}, {"problem": 22, "code": "#(reduce (fn [a c] (inc a)) 0 %)", "user": "5ddd7359e4b0948ae9d9adc5"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5dca511ce4b03836ba07d82f"}, {"problem": 22, "code": "(partial reduce (fn [acc list] (inc acc)) 0)", "user": "5de051bfe4b0948ae9d9ade5"}, {"problem": 22, "code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "5dda89f4e4b0948ae9d9ad9f"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "5de12192e4b0948ae9d9aded"}, {"problem": 22, "code": "(fn [xs]\n  (reduce (fn [c _] (inc c)) 0 xs))", "user": "5dde751fe4b0948ae9d9add5"}, {"problem": 22, "code": "#(reduce + (map (fn [& _] 1) % (range)))", "user": "5de0b844e4b0948ae9d9adea"}, {"problem": 22, "code": "#(reduce + (take-nth 2 (interleave (repeat 1) %)))", "user": "599a6b1ee4b07157cc8dab0e"}, {"problem": 22, "code": "reduce (fn [x y] (inc x)) 0", "user": "5de2f356e4b0948ae9d9adfb"}, {"problem": 22, "code": "(fn [x]\n  (reduce +\n          (map (fn [x] 1)\n               x)))", "user": "5dbf6016e4b0e59a23173d79"}, {"problem": 22, "code": "(fn size [x]\n  (if (empty? x)\n    0\n    (inc (size (rest x)))))", "user": "5b1bde2ce4b03cfeda66ece6"}, {"problem": 22, "code": "(fn [x] (reduce (fn [a b] (inc a)) 0 x))", "user": "5de28470e4b0948ae9d9adf4"}, {"problem": 22, "code": "#(loop [sum 0 \n       elements %] \n  (if (empty? elements)\n    sum\n    (recur (inc sum) (rest elements))\n    ))", "user": "5de3d6c6e4b0948ae9d9ae02"}, {"problem": 22, "code": "#(loop [s % len 0]\n   (if (not (seq s))\n     len\n     (recur (rest s) (inc len))))", "user": "5d9d10d5e4b0eb781811cdb4"}, {"problem": 22, "code": "(fn [c]\n  (inc (last (keep-indexed (fn [a b] (identity a)) c))))", "user": "5de44684e4b0948ae9d9ae03"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5de44e22e4b0948ae9d9ae04"}, {"problem": 22, "code": "(fn [coll] \n  (apply + \n         (map (fn [x] 1) coll)))", "user": "55e99611e4b0121d4835fda3"}, {"problem": 22, "code": "(fn [x] (reduce + (map (constantly 1) x)))", "user": "5dcc65b7e4b02b31cc3da3c9"}, {"problem": 22, "code": "(fn [s]\n  (loop [se s\n         final 0]\n    (if (empty? se)\n      final\n      (recur (rest se) (inc final)))))", "user": "5de4f858e4b0948ae9d9ae09"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "5dd7dec1e4b0948ae9d9ad8d"}, {"problem": 22, "code": "(fn [col]\n   (->> col\n        (map-indexed hash-map)\n        (last)\n        (keys)\n        (first)\n        (+ 1)))", "user": "5db98f39e4b010eb3c36cd53"}, {"problem": 22, "code": "(fn [coll] (loop [ x coll cnt 0 ] (if (empty? x) cnt  (recur ( rest x ) (inc cnt)           ) ) ))", "user": "5ddbd202e4b0948ae9d9adb4"}, {"problem": 22, "code": "(fn f [col]\n  ((fn fx [in-col n]\n     (if (empty? in-col) n\n         (fx (rest in-col) (+ n 1))))\n   col 0))", "user": "5de5fbfee4b0948ae9d9ae1e"}, {"problem": 22, "code": "(fn [xs](reduce (fn [a b] (+ a 1)) 0 xs))", "user": "5de63cb6e4b0948ae9d9ae25"}, {"problem": 22, "code": "reduce (fn[c _] (inc c)) 0", "user": "5de62fd9e4b0948ae9d9ae22"}, {"problem": 22, "code": "(fn [seq] (->> seq (map #(if-not (nil? %) 1 0)) (reduce +)))", "user": "5da5a1eee4b000c986472c04"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "5de65feee4b0986d99407f68"}, {"problem": 22, "code": "#(->> % (map (constantly 1)) (apply +))", "user": "5de68f83e4b0986d99407f6c"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) % ))", "user": "5de6c094e4b0986d99407f6f"}, {"problem": 22, "code": "(fn [coll]\n  (reduce (fn [acc elem ] (inc acc)) 0 coll)\n)", "user": "5de6484ce4b0986d99407f66"}, {"problem": 22, "code": "(fn my-count [coll]\n  (if (empty? coll)\n    0\n    (+ 1 (my-count (rest coll)))\n    ))", "user": "5de6e291e4b0986d99407f72"}, {"problem": 22, "code": "(fn [xs] (reduce (fn [cc _] (inc cc)) 0 xs))", "user": "5de48f92e4b0948ae9d9ae07"}, {"problem": 22, "code": "(fn [x] (+ 1(first (last (map-indexed vector x)))))", "user": "5de630d1e4b0948ae9d9ae23"}, {"problem": 22, "code": "(fn [ls] (reduce + (map (constantly 1) ls)))", "user": "5de5de7be4b0948ae9d9ae1a"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5de68068e4b0986d99407f6b"}, {"problem": 22, "code": "(fn count-a-seq [lat]\n  (reduce (fn [x y] (+ x 1)) 0 lat))", "user": "5ddfd88be4b0948ae9d9ade1"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5de7e7cae4b0986d99407f7a"}, {"problem": 22, "code": "#(loop [item-count 0 remaining-items (seq %)]\n   \t(if (empty? remaining-items)\n      item-count\n      (recur (inc item-count) (rest remaining-items))))", "user": "5dd25ca8e4b0948ae9d9ad55"}, {"problem": 22, "code": "#(loop [x 0 list %]\n  (if (empty? list)\n    x\n    (recur (inc x) (drop 1 list))))", "user": "5dea3c0de4b0986d99407f95"}, {"problem": 22, "code": "(fn f [l]\n  (if (= l [])\n    0\n    (+ 1 (f (rest l)))))", "user": "5dea4bb7e4b0986d99407f96"}, {"problem": 22, "code": "#(loop [alist %1 x 0] (if (empty? alist) x (recur (rest alist) (+ x 1))))", "user": "5deab1b2e4b0986d99407f9f"}, {"problem": 22, "code": "(fn count-rec [coll]\n\t(if (= () (rest coll))\n\t\t1\n\t\t(inc (count-rec (rest coll)))))", "user": "5decd4fde4b093ff7172757b"}, {"problem": 22, "code": "#(loop [i 0 c %]\n    (if (not (next c))\n      (inc i)\n      (recur (inc i) (rest c))))", "user": "5dc1af86e4b0e59a23173d87"}, {"problem": 22, "code": "(fn [s] (reduce + (map #(if (= % %)1) s)))", "user": "5ded9f51e4b093ff7172758a"}, {"problem": 22, "code": "(fn len [s] (if (empty? s) 0 (inc (len (rest s)))))", "user": "5dee144ae4b093ff71727591"}, {"problem": 22, "code": "(fn count-a-seq [list] \n  (reduce (fn [x y] (+ x 1)) 0 list))", "user": "5deab868e4b0986d99407fa1"}, {"problem": 22, "code": "#(reduce (fn [x y] (+ x y)) (map (fn [x] 1) %))", "user": "5dea7d1de4b0986d99407f9b"}, {"problem": 22, "code": "#(loop [sum 0\n       liste %]\n    (if (empty? liste)\n      sum\n    (recur (inc sum) (rest liste))))", "user": "5dee8835e4b093ff7172759a"}, {"problem": 22, "code": "#(loop [v % c 0] (if (= nil v) c (let [[v1 & v2] v] (recur v2 (+ 1 c)))))", "user": "5de707a5e4b0986d99407f73"}, {"problem": 22, "code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "5defd277e4b093ff717275b0"}, {"problem": 22, "code": "(fn [l] (reduce (fn [a _] (inc a)) 0 l))", "user": "5d5e2efee4b0c9e5857d4ff0"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "5df0c29ce4b093ff717275c1"}, {"problem": 22, "code": "#(alength (to-array %))", "user": "5de66cf8e4b0986d99407f6a"}, {"problem": 22, "code": "(fn [values] (let [cntr (fn reccntr [values counter] (if (= '() values) counter (reccntr (rest values) (+ counter 1))))] (cntr values 0)))", "user": "5df0c6ffe4b093ff717275c2"}, {"problem": 22, "code": "#(.size (vec %))", "user": "5dcc7338e4b02b31cc3da3cb"}, {"problem": 22, "code": "(fn [col]\n    (loop [coll col\n           nn 0]\n      (if (nil? (first coll))\n        nn\n       (recur (rest coll) (+ nn 1)))))", "user": "5d7670c4e4b02e6b30c93525"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5df23060e4b03c219ef1a356"}, {"problem": 22, "code": "(fn my-count \n  ([sequence] (\n\tif (= sequence '())\n\t  0\n      (my-count (drop 1 sequence) 1)\n  ))\n  ([sequence currentCount] (\n\tif (= sequence '())\n\t  currentCount\n      (my-count (drop 1 sequence) (+ currentCount 1))\n  ))\n)", "user": "5df28320e4b03c219ef1a35c"}, {"problem": 22, "code": "(fn c [x] \n  (if (= x '())\n    0\n    (+ 1 (c (rest x)))))", "user": "5df2fc01e4b03c219ef1a365"}, {"problem": 22, "code": "reduce (fn [s n] (inc s)) 0", "user": "5dee6926e4b093ff71727598"}, {"problem": 22, "code": "(fn [coll] (reduce (fn [a b] (+ 1 a)) 0  coll))", "user": "5df39a6fe4b03c219ef1a36d"}, {"problem": 22, "code": "(fn [seq] (reduce + (map (fn [_] (inc 0)) seq)))", "user": "5deeb6fde4b093ff7172759f"}, {"problem": 22, "code": "#(-> % vec .length)", "user": "5df4cb3be4b03c219ef1a381"}, {"problem": 22, "code": "(fn muching\n  [[head & tail]]\n  (if (empty? tail)\n  1\n  (+ 1 (muching tail))))", "user": "5df53ab7e4b03c219ef1a38e"}, {"problem": 22, "code": "reduce (fn [x y] (inc x)) 0", "user": "5df175bce4b03c219ef1a34d"}, {"problem": 22, "code": "(fn [coll] (reduce (fn [acc coll] (inc acc)) 0 coll))", "user": "58eff21ae4b056aecfd47dd9"}, {"problem": 22, "code": "(fn [c]\n  (reduce (fn [acc el] \n            (inc acc)) 0 c)\n  )", "user": "5df62bd1e4b03c219ef1a39e"}, {"problem": 22, "code": "(fn [x] (reduce (fn [counter _] (inc counter)) 0 x))", "user": "5df54584e4b03c219ef1a38f"}, {"problem": 22, "code": "reduce \n (fn [v c] \n   (+ v 1)) 0", "user": "5df75fd8e4b0a607a9a45c92"}, {"problem": 22, "code": "(fn [xs] (loop [n 0 xs xs] (if (seq xs) (recur (inc n) (rest xs)) n)))", "user": "5df7effbe4b0a607a9a45c9f"}, {"problem": 22, "code": "#(loop [n 0\n        ncoll (seq %)]\n   (if (seq ncoll)\n     (recur (inc n) (next ncoll))\n     n))", "user": "5d884d76e4b0915913b1d3a7"}, {"problem": 22, "code": "#(reduce  (fn [a b] (inc a))0 %)", "user": "5de5070fe4b0948ae9d9ae0b"}, {"problem": 22, "code": "(fn [y] (reduce (fn [x i] (inc x)) 0 y))", "user": "5df8e717e4b0a607a9a45cae"}, {"problem": 22, "code": "(fn [a]\n  (reduce + (map (fn [x] 1) a)))", "user": "5db658ebe4b010eb3c36cd39"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "5df98dc8e4b0a607a9a45cbc"}, {"problem": 22, "code": "#(first (last (map vector (iterate inc 1) %)))", "user": "4f24c859e4b0d66497709fef"}, {"problem": 22, "code": "#(reduce + (map (fn [_x] 1) %))", "user": "5dfb2e2ae4b0a607a9a45cd6"}, {"problem": 22, "code": "(fn my-count\n  [seq]\n  (loop [[first & rest] seq\n         index 0]\n    (if first (recur rest (+ index 1))\n      index       ))\n  )", "user": "5dfb538ee4b0a607a9a45cda"}, {"problem": 22, "code": "reduce (fn[c _] (inc c)) 0", "user": "5dfb20b8e4b0a607a9a45cd3"}, {"problem": 22, "code": ";;#(count (apply str %)) \n#(reduce + (map (constantly 1) %))", "user": "5dfa1c67e4b0a607a9a45cc5"}, {"problem": 22, "code": "(fn [s] (apply + (map #(if % 1) s)))", "user": "5dfc457de4b0a607a9a45cea"}, {"problem": 22, "code": "(fn [col]\n  (reduce + (map (constantly 1) col)))", "user": "5dfb267ee4b0a607a9a45cd4"}, {"problem": 22, "code": "; #(loop [ls % n 0] (if (empty? ls) n (recur (rest ls) (inc n))))\n\n#(reduce (fn [n _] (inc n)) 0 %)", "user": "5d98f616e4b0d3f9b434ad3c"}, {"problem": 22, "code": "#(reduce + (map (fn [x] (if (nil? x) 0 1)) %))", "user": "57fc5e42e4b0d3187e900997"}, {"problem": 22, "code": "(partial reduce (fn [n _] (inc n)) 0)", "user": "5dfeaf25e4b0a607a9a45d0b"}, {"problem": 22, "code": "(fn override-count\n  [collection]\n  (reduce (fn [acc item]\n            (+ acc 1)) 0 collection))", "user": "5df0f338e4b093ff717275c6"}, {"problem": 22, "code": "#(loop [result 0 c %]\n   (if (empty? c) \n   \tresult\n   \t(recur (inc result) (rest c))))", "user": "5c549f38e4b0fb8c5ffd9a0e"}, {"problem": 22, "code": "(fn my-count\n  ([coll]\n  ( my-count coll 0))\n  ([coll n]\n  (if ( empty? coll)\n          n\n          ( my-count (rest coll) (inc n)))))", "user": "5e00752fe4b0a607a9a45d24"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5d6eaa58e4b04d129b00f2cd"}, {"problem": 22, "code": "(fn count-list [lst] (if (empty? lst) 0 (+ 1 (count-list (rest lst)))))", "user": "5e010c58e4b0a607a9a45d33"}, {"problem": 22, "code": "(fn count-a-seq [lat]\n  (reduce (fn [x y] (+ x 1)) 0 lat))", "user": "5dfac9cce4b0a607a9a45ccf"}, {"problem": 22, "code": "(fn [coll] (reduce (fn [acc x] (+ acc 1)) 0 coll))", "user": "5e01841de4b0a607a9a45d39"}, {"problem": 22, "code": "(fn mycount\n\t([coll] (mycount coll 0))\n\t([coll cnt]\n\t\t(if (empty? coll)\n\t\t\tcnt\n\t\t\t(recur (rest coll) (inc cnt))\n\t  )\n  )\n)", "user": "5bb4baace4b0a20761a23552"}, {"problem": 22, "code": "(fn mycount [s] \n  (if (empty? s)\n    0\n    (inc (mycount (rest s)))))", "user": "5bfc9037e4b0bdcf453d15f2"}, {"problem": 22, "code": "(fn\n  [xs] (reduce (fn [x _] (inc x)) 0 xs))", "user": "5e035de0e4b0a607a9a45d5a"}, {"problem": 22, "code": "(fn [col] (reduce \n     (fn [acc, _] (inc acc)) 0 col))", "user": "5dfbe0eae4b0a607a9a45ce2"}, {"problem": 22, "code": "#(+ 1 (last (keys (last (map-indexed hash-map %)))))", "user": "5e035030e4b0a607a9a45d59"}, {"problem": 22, "code": "#(reduce (fn[a b]   (println a b) (inc a)) 0 %)", "user": "5e03a1bbe4b0a607a9a45d5f"}, {"problem": 22, "code": "#(apply + (map (fn [x] 1) %))", "user": "5df6c8b8e4b0a607a9a45c87"}, {"problem": 22, "code": "#(.size (seq %))", "user": "5dff8331e4b0a607a9a45d17"}, {"problem": 22, "code": "#(loop [s %1 cnt 0] (\n                     if (empty? s)\n                     \tcnt\n                     (recur (drop 1 s) (inc cnt))\n                     ))", "user": "5e05ca93e4b0a607a9a45d82"}, {"problem": 22, "code": "(fn [x] (alength (to-array x)))", "user": "5df732dbe4b0a607a9a45c8f"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "5e03a15be4b0a607a9a45d5e"}, {"problem": 22, "code": "#(loop [lst %\n        cnt 0]\n   (if (empty? lst)\n     cnt\t\n     (recur (rest lst) (inc cnt))))", "user": "5e066185e4b0978307768fa4"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5e01addee4b0a607a9a45d3f"}, {"problem": 22, "code": "(fn cnt \n  ([s] (cnt s 0))\n  ([s n] (if (empty? s) n (cnt (rest s) (+ n 1)))))", "user": "5e03fd15e4b0a607a9a45d66"}, {"problem": 22, "code": "(fn [s] (\n        (fn ncr [s n] (if (empty? s) n (ncr (rest s) (+ n 1)))) s 0\n        ))", "user": "5e073d79e4b0978307768fb1"}, {"problem": 22, "code": "(fn [col]\n   (loop [col2 col cnt 0]\n     (if (not(seq col2))\n           cnt\n           (recur (rest col2) (+ cnt 1))\n           )\n     \n     ))", "user": "5e078ba7e4b0978307768fb6"}, {"problem": 22, "code": "#(reduce (fn [acc x] (inc acc)) 0 %)", "user": "5e071153e4b0978307768fad"}, {"problem": 22, "code": "#(reduce (fn [acc x] (inc acc)) 0 %1)", "user": "5e0828b9e4b0978307768fbe"}, {"problem": 22, "code": "#(loop [cnt 0 coll %] \n(if (empty? coll)\n    cnt\n    (recur (inc cnt) (rest coll))))", "user": "5de8648de4b0986d99407f7c"}, {"problem": 22, "code": "(fn [ar]\n  (loop [a ar i 0]\n    (if (= a [])\n      i\n     (recur (rest a) (inc i))\n    )\n  )\n)", "user": "5e08c3dde4b0978307768fc8"}, {"problem": 22, "code": "(fn [coll]\n  (loop [coll coll c 0]\n    (if (empty? coll)\n      c\n      (recur (rest coll) (inc c))\n    )\n  )\n)", "user": "5e09fd26e4b099d064962f60"}, {"problem": 22, "code": "(fn [s] (reduce (fn [x _] (+ x 1)) 0 s))", "user": "5e0a6cf0e4b099d064962f66"}, {"problem": 22, "code": "reduce (fn [x _] (inc x)) 0", "user": "5e0a6916e4b099d064962f65"}, {"problem": 22, "code": "#(.size (seq %))", "user": "5dd3383be4b0948ae9d9ad5e"}, {"problem": 22, "code": "#(reduce (fn[c _] (inc c)) 0 %)", "user": "5ded3de4e4b093ff71727584"}, {"problem": 22, "code": "#(reduce (fn [a, b] (inc a)) 0 %)", "user": "5e0cb4f5e4b099d064962f8d"}, {"problem": 22, "code": "(fn [col] (apply + (map #(if % 1 0) col)))", "user": "5e0d948fe4b099d064962f98"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5e00b6e7e4b0a607a9a45d2b"}, {"problem": 22, "code": "(fn [xs]\n  (loop [ys xs\n         acc 0]\n    (if (empty? ys)\n      acc\n      (recur (rest ys) (inc acc)))))", "user": "5e0e14bde4b099d064962fa3"}, {"problem": 22, "code": "(fn [d] \n  (loop [cnt 0\n         xs  d]\n    (if (empty? xs)\n     cnt\n     (recur (inc cnt) (next xs)))))", "user": "5e0ceca5e4b099d064962f91"}, {"problem": 22, "code": "#(reduce\n\t+\n    (map\n    \t(fn [x] 1) %\n    )\n)", "user": "5e0e0131e4b099d064962fa1"}, {"problem": 22, "code": "reduce (fn [acc _] (inc acc)) 0", "user": "5e0f5ccee4b099d064962fb8"}, {"problem": 22, "code": "(fn [s]\n  (loop [z 0 target (seq s)]\n    (if (empty? target)\n      z\n      (recur (inc z) (rest target)))))", "user": "5b799354e4b047b03b203706"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5e0cbc14e4b099d064962f8e"}, {"problem": 22, "code": "#(loop [c 0\n        coll %]\n   (if (empty? coll)\n     c\n     (recur (inc c) (rest coll))))", "user": "5e10d1e6e4b099d064962fcf"}, {"problem": 22, "code": "#(loop [remaining-seq %\n       counter 0]\n  (if (nil? (first remaining-seq))\n    counter\n    (recur (rest remaining-seq) (inc counter))\n    )\n  )", "user": "5e0e836fe4b099d064962fa8"}, {"problem": 22, "code": "(fn ff[x] \n  (let [r (rest x)]\n    (if (empty? r) 1 (+ 1 (ff r))) \n  ))", "user": "5e10f181e4b099d064962fd2"}, {"problem": 22, "code": "reduce (fn[a b](inc a)) 0", "user": "5e0d1947e4b099d064962f92"}, {"problem": 22, "code": "(fn [l] (reduce (fn [a b] (inc a)) 0 l))", "user": "5e03475de4b0a607a9a45d58"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5e121a89e4b099d064962fe4"}, {"problem": 22, "code": "(partial reduce (fn [x y] (inc x)) 0)", "user": "5e12b21be4b099d064962feb"}, {"problem": 22, "code": "#(reduce (fn [a b] (inc a)) 0 %)", "user": "5e138826e4b099d064962ffd"}, {"problem": 22, "code": "(fn\n  [vals]\n  (loop [rvals vals j 0]\n    (if (empty? rvals)\n      j\n      (recur (rest rvals) (inc j)))))", "user": "5e13a6b7e4b099d064963001"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5e04528ee4b0a607a9a45d6c"}, {"problem": 22, "code": "(fn [l]\n  (loop [l l r 0]\n    (if (empty? l)\n      r\n      (recur (rest l) (inc r))\n      )\n    )\n  )", "user": "5e1429afe4b0a047bd49f6e6"}, {"problem": 22, "code": "reduce #(or (inc %1) %2) 0", "user": "5e14e396e4b0a047bd49f6f7"}, {"problem": 22, "code": "(fn [l] (loop[l l counted 0] (if (empty? l) counted (recur (rest l) (inc counted)))))", "user": "5e04ce34e4b0a607a9a45d71"}, {"problem": 22, "code": "(fn [z] (reduce (fn [x y] (inc x)) 0 z))", "user": "5e1561b1e4b0a047bd49f700"}, {"problem": 22, "code": "(fn my-count\n  ([coll] (my-count coll 0))\n  ([coll current-count] \n   (if (empty? coll)\n     current-count\n     (recur (rest coll) (inc current-count)))))", "user": "5e157910e4b0a047bd49f701"}, {"problem": 22, "code": "(fn count- [xs]\n              (if (empty? xs)\n                  0\n                  (inc (count- (next xs)))))", "user": "5e15cb00e4b0a047bd49f709"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5e14d842e4b0a047bd49f6f5"}, {"problem": 22, "code": "(fn \n[coll]\n(reduce (fn [acc item] (inc acc)) 0 coll))", "user": "5e16006be4b0a047bd49f711"}, {"problem": 22, "code": "#(reduce (fn [c a] (inc c)) 0 %)", "user": "54b17a49e4b09f271ff37d1e"}, {"problem": 22, "code": "(fn length [l] (reduce (fn [n y] (inc n)) 0 l))", "user": "5e1308dde4b099d064962ff4"}, {"problem": 22, "code": "(fn [coll] (loop [x coll num-of-element 0] (if (and (nil? x) (nil? (next x))) num-of-element (recur (next x) (inc num-of-element)))))", "user": "5e14175be4b0a047bd49f6e5"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "5e144bd5e4b0a047bd49f6e7"}, {"problem": 22, "code": "(fn [items]\n  (reduce (fn [i item]\n            (inc i))\n          0\n          items))", "user": "5e172edce4b054039d6af22b"}, {"problem": 22, "code": "(fn [col] (reduce (fn [c e] (inc c)) 0 col))", "user": "5e17509fe4b00200644e3d52"}, {"problem": 22, "code": "#(reduce (fn [x _] (inc x)) 0 %)", "user": "5bfc50ece4b0bdcf453d15ea"}, {"problem": 22, "code": "(fn [s] ((fn [s n] (if (empty? s) n (recur (rest s) (inc n)))) s 0))", "user": "5e178fbee4b00200644e3d57"}, {"problem": 22, "code": "(fn tally [coll] (if (empty? coll) 0 (inc (tally (rest coll)))))", "user": "5e17bb46e4b00200644e3d5a"}, {"problem": 22, "code": "reduce (fn [t _] (inc t)) 0", "user": "5e17f787e4b00200644e3d5e"}, {"problem": 22, "code": "(fn [list]\n  (loop [i 0\n         lst list]\n    (if (empty? lst)\n      i\n      (recur (+ i 1) (rest lst)))))", "user": "5b22ba1ae4b08b1df1c3674b"}, {"problem": 22, "code": "(fn [x] (reduce (fn [a b] (inc a)) 0 x))", "user": "5e18bd30e4b0dc95940084fa"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5e155173e4b0a047bd49f6fd"}, {"problem": 22, "code": "#(alength (to-array %1))", "user": "5e186ebee4b0dc95940084f2"}, {"problem": 22, "code": "(fn [l] (reduce (fn [n, x] (+ n 1)) 0 l))", "user": "5e1a3a01e4b0dc9594008512"}, {"problem": 22, "code": "(fn total-number\n  ([coll] (total-number coll 0 ))\n  ([coll counter] (if (empty? coll)\n                    counter\n                    (total-number (rest coll) (inc counter)))))", "user": "5e1a3989e4b0dc9594008511"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "5df79c31e4b0a607a9a45c9b"}, {"problem": 22, "code": "(fn [item]\n  (loop [lista item\n         index 0]\n    (if (seq lista)\n      (recur (rest lista) (inc index))\n      index)))", "user": "58a0ac0de4b02bd94d917e9c"}, {"problem": 22, "code": "(fn \n  [in] \n  (reduce \n   (fn \n     [counter val] \n     (+ counter 1)\n     )\n   0\n   (seq in)\n   )\n)", "user": "5e1b0140e4b0dc959400851c"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c))0 %)", "user": "5e195b3ee4b0dc9594008505"}, {"problem": 22, "code": "(fn c [arr] (if (= arr '()) 0 (+ 1 (c (drop 1 arr)))))", "user": "5e0596d5e4b0a607a9a45d7d"}, {"problem": 22, "code": "reduce #(or (+ % 1) %2) 0", "user": "5e1c3e6ee4b0dc9594008530"}, {"problem": 22, "code": "(fn cat [x] (reduce (fn [acc, _] (+ acc 1)) 0 x))", "user": "5e1b7c13e4b0dc9594008522"}, {"problem": 22, "code": "(fn my-count [s]\n  (loop [s s\n        n 0]\n  (if (empty? s)\n  \tn\n  (recur (rest s) (inc n)))))", "user": "5e189cc8e4b0dc95940084f7"}, {"problem": 22, "code": "(fn [seq] (loop [suffix seq len 0] (if (empty? suffix) len (recur (rest suffix) (inc len)))))", "user": "5e1cc888e4b0dc959400853d"}, {"problem": 22, "code": "(fn count-cus [sq]\n  (if (empty? sq)\n    0\n    (+ 1 (count-cus (rest sq)))))", "user": "5e18c885e4b0dc95940084fc"}, {"problem": 22, "code": "reduce #(inc (first %&)) 0", "user": "5e0f5f43e4b099d064962fba"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5e1ca847e4b0dc9594008539"}, {"problem": 22, "code": "(fn lislen [x] \n  (if (first x)\n    (+ 1 (lislen (rest x) ))\n    (+ 0 0)\n  )\n)", "user": "5e1d01b5e4b0dc9594008542"}, {"problem": 22, "code": "#(reduce (fn [a b] (inc a)) 0 %)", "user": "5e15c23ce4b0a047bd49f707"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5e0b71d8e4b099d064962f7c"}, {"problem": 22, "code": "(comp last map) (fn [i _] (inc i)) (range)", "user": "5e1ec8c0e4b0dc9594008561"}, {"problem": 22, "code": "(fn [x]\n  (loop [x x\n         c 0]\n    (if (empty? x) \n      c\n      (recur (rest x) (inc c)))))", "user": "5e07cf97e4b0978307768fb9"}, {"problem": 22, "code": "(fn [coll] (.length (vec coll)))", "user": "5e15abeae4b0a047bd49f705"}, {"problem": 22, "code": "(fn [coll]\n    (loop [coll coll, cntr 0]\n      (if (not (first coll))\n        cntr\n        (recur ( rest coll) (inc cntr)))))", "user": "5e1cb653e4b0dc959400853b"}, {"problem": 22, "code": "(fn [x](loop [y 0](if (empty? (drop y x)) y (recur (inc y)))))", "user": "5dbecfefe4b09f47823971cc"}, {"problem": 22, "code": "(fn [coll]\n  (reduce (fn [ac _]\n            (inc ac)) 0 coll))", "user": "5e207f12e4b05b4b01516112"}, {"problem": 22, "code": "#(loop [remaining % length 0] (if (empty? remaining) length (recur (rest remaining) (inc length))))", "user": "5e209106e4b05b4b01516115"}, {"problem": 22, "code": "(fn [sq] (apply + (map (fn [x] 1) sq)))", "user": "5e218bb7e4b05b4b01516123"}, {"problem": 22, "code": "(fn [s] (apply + (map (fn [_] 1) s)))", "user": "5e21c933e4b05b4b01516128"}, {"problem": 22, "code": "(fn [s] (reduce (fn [x y] (+ x 1)) 0 s))", "user": "5e21f944e4b05b4b0151612d"}, {"problem": 22, "code": "reduce (fn [x _] (inc x)) 0", "user": "5e2261b2e4b05b4b01516131"}, {"problem": 22, "code": "(fn [s]\n  (reduce + (map (fn [x] 1) s)))", "user": "5d929ceae4b0915913b1d412"}, {"problem": 22, "code": "#(reduce +\n        (map (fn [x]\n               (nil? x) 0 1) %))", "user": "5defc177e4b093ff717275af"}, {"problem": 22, "code": "reduce (fn [x _] (inc x)) 0", "user": "5e244003e4b05b4b0151614d"}, {"problem": 22, "code": "(fn [coll] \n    (loop [accum 0\n           c coll]\n    (if (empty? c)\n      accum\n      (recur (inc accum) (rest c)))))", "user": "5e23d513e4b05b4b01516145"}, {"problem": 22, "code": "reduce (fn [i _] (inc i)) 0", "user": "5e246f92e4b05b4b01516150"}, {"problem": 22, "code": "(fn \n            [li] \n            (reduce + \n                    (map \n                         (fn [arg] 1)\n                         li \n                    )\n            )\n        )", "user": "5e23ca7fe4b05b4b01516144"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5e22e4c5e4b05b4b01516137"}, {"problem": 22, "code": "#(reduce (fn [n x] (inc n)) 0 %)", "user": "5e2549c8e4b05b4b0151615f"}, {"problem": 22, "code": "(fn [x]\n  (loop [y x\n         n 0]\n    \n  \t(if (= y '())\n    \tn\n    \t(recur (rest y) (+ n 1)))\n   )\n)", "user": "5e265173e4b05b4b01516175"}, {"problem": 22, "code": "(fn CountThis\n  ([collection]\n   (if (empty? collection)\n     (CountThis collection 0)\n     (CountThis (rest collection) 1)\n     ))\n  ([collection cnt]\n   (if (empty? collection)\n     cnt\n     (CountThis (rest collection) (+ cnt 1)))))", "user": "5e16b820e4b0a047bd49f71f"}, {"problem": 22, "code": "(fn [xs] (->> (map #(do % 1) xs) (reduce +)))", "user": "5e1754abe4b00200644e3d53"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "5e257a33e4b05b4b01516166"}, {"problem": 22, "code": "(fn [sum coll] (if (empty? coll) sum (recur (inc sum) (rest coll)))) 0", "user": "5e283a4be4b05b4b01516194"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "5e27a4e1e4b05b4b0151618e"}, {"problem": 22, "code": "(fn[coll](reduce (fn[x y](+ 1 x)) 0 coll))", "user": "5e29cb4ce4b05b4b015161ae"}, {"problem": 22, "code": "(fn [xs]\n  (->> xs\n       (map (fn [_] 1))\n       (apply +)))", "user": "5d47fa13e4b07c84aa5ae6b6"}, {"problem": 22, "code": "#(alength (to-array %))", "user": "5e271662e4b05b4b01516186"}, {"problem": 22, "code": "reduce (fn [acc coll] (inc acc)) 0", "user": "5e054752e4b0a607a9a45d78"}, {"problem": 22, "code": "#(reduce (fn [agg _] (inc agg)) 0 %)", "user": "5e228b5ae4b05b4b01516134"}, {"problem": 22, "code": "(fn [x] (reduce + (map (constantly 1) x)))", "user": "5e27b775e4b05b4b0151618f"}, {"problem": 22, "code": "#(loop [x 0 coll %]\n  (if (empty? coll) x\n    (recur (+ 1 x) (rest coll))))", "user": "5a7dbb58e4b03baeef9276fd"}, {"problem": 22, "code": "(fn [x] (reduce + (map (constantly 1) x)))", "user": "5e2d1883e4b05b4b015161df"}, {"problem": 22, "code": "(fn [x] (reduce + (map (fn [x] 1) x)))", "user": "5e2dea4be4b05b4b015161e9"}, {"problem": 22, "code": "(fn [coll] (reduce (fn [counter _element] (inc counter)) 0 coll))", "user": "5e2ead6ae4b05b4b015161f5"}, {"problem": 22, "code": "(fn my-count \n  ([coll] (my-count coll 0))\n  ([coll cnt] (if (empty? coll) cnt (my-count (rest coll) (inc cnt)))))", "user": "4f43b992e4b0d7d3c9f3fd2c"}, {"problem": 22, "code": "(fn __\n  [items]\n  (reduce\n    (fn [cnt item] (inc cnt))\n    0\n    items)\n  )", "user": "5e300655e4b05b4b01516209"}, {"problem": 22, "code": "(fn [seq]\n  (loop [i 0, rst seq]\n    (if (empty? rst)\n      i\n      (recur (inc i) (rest rst)))))", "user": "5e2ea06be4b05b4b015161f4"}, {"problem": 22, "code": "(fn cnt\n  [l]\n  \t(if (empty? l) 0\n    \t               (+ (cnt (rest l)) 1)\n        \t           )\n\t)", "user": "5e304218e4b05b4b0151620d"}, {"problem": 22, "code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "5e309bb9e4b05b4b01516216"}, {"problem": 22, "code": "#(reduce (fn [a b] (inc a) ) 0 % )", "user": "5e309f89e4b05b4b01516218"}, {"problem": 22, "code": "(fn my-count [xs]\n  (reduce (fn [r _] (+ r 1)) 0 xs))", "user": "5e30dbd5e4b05b4b0151621d"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "56777934e4b05957ce8c6167"}, {"problem": 22, "code": "(fn [seq]\n        (reduce (fn [first rest]\n                  (+ 1 first)) 0 seq))", "user": "5e317676e4b05b4b01516229"}, {"problem": 22, "code": "(fn [list] (reduce (fn [a i] (inc a)) 0 list))", "user": "5e2efec9e4b05b4b015161fd"}, {"problem": 22, "code": "(fn [s]\n (loop [cs s total 0]\n   (if (empty? cs)\n     total\n     (recur (rest cs) (inc total))\n   )\n )\n)", "user": "5e31f485e4b05b4b01516231"}, {"problem": 22, "code": "(fn [a] (->> (map (fn [x] 1) a)(reduce +)))", "user": "5e1c8f5be4b0dc9594008535"}, {"problem": 22, "code": "(fn [stuff] (reduce + (map (fn [x] 1) stuff)))", "user": "5e32c30be4b05b4b01516245"}, {"problem": 22, "code": "#(reduce + (vals (frequencies %)))", "user": "5e3302ece4b0650de70e2b02"}, {"problem": 22, "code": "#(reduce + 0 (map (fn [s] 1) %))", "user": "5e31a4b0e4b05b4b0151622b"}, {"problem": 22, "code": "(fn cnt [sq]\n  (if (empty? sq)\n    0\n    (+ 1 (cnt (rest sq)))))", "user": "5e33e399e4b0650de70e2b11"}, {"problem": 22, "code": "(fn [coll] (reduce + (map (constantly 1) coll)))", "user": "5e357507e4b0650de70e2b2a"}, {"problem": 22, "code": "(fn seqcount\n  ([seq] (seqcount seq 0))\n  ([seq cnt]\n   (if (empty? seq)\n     cnt\n     (seqcount (rest seq) (inc cnt))\n)\n)\n)", "user": "5e309d65e4b05b4b01516217"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "586f1aa7e4b01531a375e9ba"}, {"problem": 22, "code": "(fn get-len [s] (alength (into-array s)))", "user": "5e380e72e4b01d43a70e8db0"}, {"problem": 22, "code": "#(+ 1 (.lastIndexOf (vec %) (last %)))", "user": "5e36ca7de4b0650de70e2b3c"}, {"problem": 22, "code": "(fn   [coll]\n    (loop [c coll\n           i 0]\n      (if (empty? c)\n        i\n        (recur (rest c) (inc i)))))", "user": "5e348945e4b0650de70e2b1d"}, {"problem": 22, "code": "(fn cnt \n  ([L]\n  \t(cnt L 0))\n  ([L x]\n    (if \n      (empty? L) x\n      (recur (rest L) (inc x)))) )", "user": "5e3810ffe4b01d43a70e8db1"}, {"problem": 22, "code": "(fn my-count [xs]\n (loop [acc 0 cur xs]\n  (if (empty? cur)\n   acc\n   (recur (inc acc) (rest cur)))))", "user": "5e385965e4b01d43a70e8dba"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "5e38a9cbe4b01d43a70e8dc2"}, {"problem": 22, "code": "(fn [xs] (reduce (fn [x _] (inc x)) 0 xs))", "user": "5e392de0e4b01d43a70e8dcb"}, {"problem": 22, "code": "#(loop [coll % i 0]\n          \n   (if (empty? coll)\n     i\n      (recur (rest coll) (inc i))\n     )\n   )", "user": "5e259d05e4b05b4b01516169"}, {"problem": 22, "code": "#(reduce +(map(constantly 1)%))", "user": "5e3933c5e4b01d43a70e8dcc"}, {"problem": 22, "code": "#(reduce (fn [res item] (+ res 1)) 0 %)", "user": "5e161799e4b0a047bd49f713"}, {"problem": 22, "code": "(fn [coll]\n  (loop [x coll sz 0]\n        (if (empty? x)\n          sz\n          (recur (rest x) (inc sz)))))", "user": "5e34318be4b0650de70e2b15"}, {"problem": 22, "code": "(fn [x](reduce + (map #(do % 1) x)))", "user": "5e266943e4b05b4b01516178"}, {"problem": 22, "code": "(fn [seq] (reduce + (map (fn [x] 1) seq)))", "user": "5e39bb8ce4b01d43a70e8dd6"}, {"problem": 22, "code": "(fn [xs]\n  ((fn kount [xs n]\n     (if (empty? xs)\n       n\n       (kount (rest xs) (inc n)))) xs 0))", "user": "5e394c33e4b01d43a70e8dd1"}, {"problem": 22, "code": "#(reduce +(map (fn[x] 1) %))", "user": "5e208e4be4b05b4b01516113"}, {"problem": 22, "code": "(fn [x] (let [r1 (fn [y] 1)]\n                  (reduce + 0 (map r1 x))))", "user": "5e38b324e4b01d43a70e8dc3"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "5e3a25d4e4b01d43a70e8dde"}, {"problem": 22, "code": "#(loop [list-to-count % count-val 0] \n   (if (empty? list-to-count)\n     count-val\n     (recur (rest list-to-count) (inc count-val) )\n   );end if\n  );end loop", "user": "5e381434e4b01d43a70e8db4"}, {"problem": 22, "code": "(fn [coll] (reduce #(inc (first %&)) 0 coll))", "user": "5e3a8929e4b01d43a70e8de3"}, {"problem": 22, "code": "(fn [coll]\n  (reduce (fn [acc cur] (inc acc)) 0 coll))", "user": "5dfcd6d1e4b0a607a9a45cf2"}, {"problem": 22, "code": "#(reduce (fn add [acc cur] (inc acc)) 0 %)", "user": "5dd7e19fe4b0948ae9d9ad8e"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %1)", "user": "5e3d183fe4b01d43a70e8e11"}, {"problem": 22, "code": "reduce (fn [n _] (inc n)) 0", "user": "5e3071abe4b05b4b01516213"}, {"problem": 22, "code": "(fn [xs] \n  (reduce \n   (fn [cnt ys] \n     (inc cnt)) 0 xs))", "user": "5e3f291ae4b01d43a70e8e33"}, {"problem": 22, "code": "reduce (fn [a v] (inc a)) 0", "user": "5e3e23d9e4b01d43a70e8e20"}, {"problem": 22, "code": "#(reduce (fn [a x] (inc a))  0 %)", "user": "5e3fc1cce4b01d43a70e8e3b"}, {"problem": 22, "code": "(fn f\n   [s]\n   (loop [s s\n          n 0] (if (empty? s) n (recur (rest s) (inc n)))))", "user": "5e3ef7d4e4b01d43a70e8e2d"}, {"problem": 22, "code": "#(\n   loop [x 0 y %1]\n  \t(if (empty? y)\n      x\n      (recur (inc x) (next y))\n      ))", "user": "5e3c6687e4b01d43a70e8e04"}, {"problem": 22, "code": "(fn my-count-tco [seq]\n  (letfn [(my-count-tco-helper [seq c]\n            (if (empty? seq) c\n                (my-count-tco-helper (rest seq) (+ 1 c))))]\n    (my-count-tco-helper seq 0)))", "user": "5e3e0b3fe4b01d43a70e8e1e"}, {"problem": 22, "code": "(fn [vs] \n\t(loop [vs vs \n           n 0] \n\t\t(if (empty? vs) n\n\t\t\t(recur (rest vs) (inc n)))))", "user": "5e41a67be4b01d43a70e8e56"}, {"problem": 22, "code": "#(reduce (fn [n i] (inc n)) 0 %)", "user": "5e41c371e4b01d43a70e8e59"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "5e41b679e4b01d43a70e8e58"}, {"problem": 22, "code": "(fn [s] (reduce (fn [c _] (inc c)) 0 s))", "user": "5d078e2de4b0cc9c915881fa"}, {"problem": 22, "code": "(fn my-count\n     [s]\n     (loop [coll s\n            acc 0]\n       (if (empty? coll)\n         acc\n         (recur (rest coll) (+ acc 1)))))", "user": "5e3f2720e4b01d43a70e8e32"}, {"problem": 22, "code": "#(reduce (fn [accum elem] (inc accum)) 0 %)", "user": "50294c66e4b0b33e9bf6fdf0"}, {"problem": 22, "code": "(fn count-loop [data]\n  (loop [cnt 0\n         remaining data]\n    (if (empty? remaining)\n      cnt\n      (recur (inc cnt) (rest remaining)))))", "user": "5dddcface4b0948ae9d9adcd"}, {"problem": 22, "code": "(fn [coll-1]\n              (loop [cnt 0 coll coll-1]\n                (if-not (first coll)\n                  cnt\n                  (recur (inc cnt) (rest coll)))))", "user": "5e3121e5e4b05b4b01516221"}, {"problem": 22, "code": "#(reduce (fn [r e] (inc r)) 0 %)", "user": "5e2bea53e4b05b4b015161d2"}, {"problem": 22, "code": "(fn [xs]\n  (loop [ys xs acc 0]\n    (if (empty? ys)\n      acc\n      (recur (rest ys) (inc acc)))))", "user": "5e4471e1e4b01d43a70e8e85"}, {"problem": 22, "code": "(fn mycount [x] (if (empty? x) 0 (inc (mycount (rest x)))))", "user": "5439bd25e4b032a45b869322"}, {"problem": 22, "code": "reduce (fn [result val] (+ result (if-not (nil? val) 1 0))) 0", "user": "5e2586afe4b05b4b01516167"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5e44c804e4b01d43a70e8e89"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5e30533ee4b05b4b0151620f"}, {"problem": 22, "code": "(fn f [col]\n  (if (empty? col)\n    0\n    (inc (f (rest col)))))", "user": "5e47bc6fe4b043cd24807a34"}, {"problem": 22, "code": "(fn [s] \n  (loop [xs s\n              n 1]\n   (if (next xs)\n   \t   (recur (next xs) (inc n))\n   \t\tn)))", "user": "5e453725e4b01d43a70e8e93"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5e47e1eee4b043cd24807a35"}, {"problem": 22, "code": "#(reduce (fn [acc, _] (inc acc)) 0 %)", "user": "5e486cb0e4b043cd24807a3e"}, {"problem": 22, "code": "(fn [list]\n              (loop [list list\n                     total 0]\n                (if (not-empty list)\n                  (recur (rest list) (inc total))\n                  total)))", "user": "5e491182e4b043cd24807a46"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5e3c71e8e4b01d43a70e8e08"}, {"problem": 22, "code": "(fn cs [counter toCount]\n  (if (empty? toCount)\n    counter\n    (cs (+ 1 counter) (rest toCount))\n   )\n )\n0", "user": "5e4920d6e4b043cd24807a4b"}, {"problem": 22, "code": "(fn [arr] (reduce #(+ %1 %2) (map #(first [1 %]) arr)))", "user": "5e44023fe4b01d43a70e8e78"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5e42b688e4b01d43a70e8e6b"}, {"problem": 22, "code": "(fn my-counter [coll]\n  (loop [n 0 _coll coll]\n    (if (seq _coll)\n      (recur (inc n) (rest _coll))\n      n)\n    )\n  )", "user": "5e4b60d3e4b0889a8790a553"}, {"problem": 22, "code": "#(reduce (fn [acc x] (inc acc)) 0 %)", "user": "5e471203e4b043cd24807a2a"}, {"problem": 22, "code": "#(loop [a %\n         b 1]\n    (if (empty? a)\n      (dec b)\n      (recur (next a) (inc b))))", "user": "5e4b919ce4b0889a8790a556"}, {"problem": 22, "code": "#(reduce (fn [a b] (+ a 1)) 0 %)", "user": "54186e68e4b01498b1a71a1a"}, {"problem": 22, "code": "(fn[x] (loop [a x\n               i 0]\n          (if (empty? a)\n            i\n            (recur (rest a) (inc i))\n            )))", "user": "5e4375e7e4b01d43a70e8e73"}, {"problem": 22, "code": "(fn\n  [x y]\n  (if ( = (rest y) [])\n    (+ x 1)\n    (recur (+ x 1) (rest y))\n    )\n  )0", "user": "5e197f93e4b0dc9594008508"}, {"problem": 22, "code": "(fn [s]\n  (reduce (fn [x y] (+ x 1)) 0 s))", "user": "5e42ba49e4b01d43a70e8e6c"}, {"problem": 22, "code": "(fn[c] (reduce (fn[acc val](inc acc)) 0 c))", "user": "5e4d5885e4b027a2e10ac0a5"}, {"problem": 22, "code": "reduce (fn [cc _] (inc cc)) 0", "user": "5e4d2506e4b0889a8790a570"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5e4d98dce4b027a2e10ac0a7"}, {"problem": 22, "code": "(fn welson-count \n  ([coll]\n   (welson-count coll 0))\n  ([coll cnt]\n  \t(if (empty? coll) \n        cnt\n         (recur (rest coll) (inc cnt)))))", "user": "5e4423d0e4b01d43a70e8e7b"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5e3c6db5e4b01d43a70e8e05"}, {"problem": 22, "code": "#(reduce (fn [a b] (inc a)) 0 %)", "user": "5d6a9b96e4b04d129b00f29d"}, {"problem": 22, "code": "(fn [coll]\n  (loop [current-seq coll, element-no 1]\n    (if (empty? current-seq)\n      (dec element-no)\n      (recur (rest current-seq)(inc element-no)))))", "user": "5e4e3c31e4b027a2e10ac0ad"}, {"problem": 22, "code": "(fn [data]\n  (reduce (fn [acc item] (if (not (= item nil)) (+ acc 1))) 0 data))", "user": "5e4d1043e4b0889a8790a56f"}, {"problem": 22, "code": "#((fn [l n]\n    (if (empty? l)\n        n\n        (recur (rest l) (inc n)))) % 0)", "user": "5e50012ae4b027a2e10ac0bd"}, {"problem": 22, "code": "(fn cnt [x]\n  (if (nil? x) 0\n    (inc (cnt (next x)))))", "user": "505223fae4b0a561d07d8f17"}, {"problem": 22, "code": "(fn c1 [x] (reduce + (map (constantly 1) x)))", "user": "5e502842e4b027a2e10ac0c0"}, {"problem": 22, "code": "#(reduce + 0 (map (fn [x] 1) %))", "user": "5df08767e4b093ff717275bf"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "5e519986e4b027a2e10ac0d0"}, {"problem": 22, "code": "(fn [col] (loop [counter 1 col2 col]\n             (if (= (next col2) nil)\n               counter\n               (recur (inc counter) (next col2)))))", "user": "5e4ba8e8e4b0889a8790a55a"}, {"problem": 22, "code": "reduce (fn [val next] \n         (inc val))\n0", "user": "5b26a74ee4b063e2438bcc37"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5e52ce65e4b027a2e10ac0dd"}, {"problem": 22, "code": "(fn [s] \n  (reduce (fn [x _] (inc x)) 0 s))", "user": "5e5349ebe4b027a2e10ac0e2"}, {"problem": 22, "code": "(fn count-a-seq [lat]\n  (reduce (fn [x y] (+ x 1)) 0 lat))", "user": "5e4fe215e4b027a2e10ac0ba"}, {"problem": 22, "code": "#(loop [n 0 coll %1] (if (empty? coll) n (recur (inc n) (rest coll))))", "user": "5ddd6cfae4b0948ae9d9adc4"}, {"problem": 22, "code": "(fn [col] (apply + (map (fn [k] 1) col)))", "user": "5de8f7cee4b0986d99407f82"}, {"problem": 22, "code": "(fn f \n  ([s,n] (if (= s '()) n (f (rest s) (+ n 1))))\n  ([s] (f s 0))\n  \n  )", "user": "5e55775ae4b027a2e10ac0f4"}, {"problem": 22, "code": "#(loop [index 0]\n       (if (= (take index %) (take (inc index) %))\n         index\n         (recur (inc index))\n         )\n       )", "user": "5e5537d9e4b027a2e10ac0f2"}, {"problem": 22, "code": "(fn length [list]\n (if (empty? list) 0\n  (+ 1 (length (rest list)))))", "user": "5bfd6668e4b0bdcf453d15fc"}, {"problem": 22, "code": "(fn [c] (loop [col c cnt 0] (if (empty? col) cnt (recur (rest col) (inc cnt)))))", "user": "5e566668e4b027a2e10ac0f9"}, {"problem": 22, "code": "#(reduce (fn [x _] (inc x)) 0 %)", "user": "5d25578de4b02ea6f0fb6a33"}, {"problem": 22, "code": "(fn [s] (loop [l 0\n              r s]\n         (if (seq r)\n           (recur (inc l) (rest r))\n           l)))", "user": "5beadeb5e4b0f319e2d7ec88"}, {"problem": 22, "code": "reduce (fn [n _] (inc n)) 0", "user": "5b13763be4b0cc2b61a3be4f"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "5e32b010e4b05b4b01516242"}, {"problem": 22, "code": "(fn [coll]\n  (loop [i 0\n         coll coll]\n    (if (empty? coll)\n      i\n      (recur (inc i) (rest coll)))))", "user": "5e52f245e4b027a2e10ac0e1"}, {"problem": 22, "code": "#(reduce (fn [c _] (+ 1 c)) 0 %)", "user": "5e5864e4e4b027a2e10ac107"}, {"problem": 22, "code": "(fn [s]\n  (loop [cnt 0 sq s]\n  \t(if (empty? sq)\n      cnt\n      (recur (inc cnt) (rest sq)))))", "user": "5e40491ae4b01d43a70e8e43"}, {"problem": 22, "code": "(fn [x] (reduce (fn [sum key] (inc sum)) 0 (seq x)))", "user": "5e595637e4b027a2e10ac10e"}, {"problem": 22, "code": "reduce (fn [a o] (inc a)) 0", "user": "5e5096c6e4b027a2e10ac0c6"}, {"problem": 22, "code": "#(apply + (map (constantly 1) %))", "user": "5e5b8d92e4b0fd0acd158658"}, {"problem": 22, "code": "#(loop [result 0 c %]\n    (if(empty? c) result\n    (recur (inc result) (rest c))))", "user": "5e5b6ff1e4b0fd0acd158657"}, {"problem": 22, "code": "#(reduce (fn [acc x]\n           (inc acc))\n         0 %)", "user": "5e5be89ce4b0fd0acd15865f"}, {"problem": 22, "code": "reduce (fn [a _] (inc a)) 0", "user": "5e5c425ae4b0fd0acd158662"}, {"problem": 22, "code": "#(reduce (fn [a _] (inc a)) 0 %)", "user": "5e42875be4b01d43a70e8e68"}, {"problem": 22, "code": "reduce (fn[counter val](inc counter)) 0", "user": "5e48ec09e4b043cd24807a45"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5e5913b5e4b027a2e10ac10b"}, {"problem": 22, "code": "(fn sum\n\t([l] (if (empty? l) 0 (+ 1 (sum (rest l)))))\n )", "user": "5e546e20e4b027a2e10ac0eb"}, {"problem": 22, "code": "(fn [l] (reduce (fn[acc cur] (+ acc 1)) 0 l))", "user": "5e5d9e62e4b0fd0acd15866b"}, {"problem": 22, "code": "(fn [col]\n  (loop [cnt 0 items col]\n    (if (empty? items)\n      cnt\n      (recur (inc cnt) (rest items))\n             )))", "user": "5e255774e4b05b4b01516161"}, {"problem": 22, "code": "#(.size (vec %))", "user": "5e5f8a07e4b0fd0acd15867c"}, {"problem": 22, "code": "#(reduce (fn [acc, x] (inc acc)) 0 %)", "user": "5e5fd7afe4b0fd0acd158680"}, {"problem": 22, "code": "(fn [coll] (reduce (fn [val acc] (inc val)) 0 coll))", "user": "5df70ee8e4b0a607a9a45c8a"}, {"problem": 22, "code": "(comp alength to-array)", "user": "5e5fa1ffe4b0fd0acd15867d"}, {"problem": 22, "code": "(fn [l]\n  (loop [l l\n         acc 0]\n    (if (nil? (first l))\n      acc\n      (recur (rest l) (inc acc)\n             ))))", "user": "5e501de1e4b027a2e10ac0bf"}, {"problem": 22, "code": "(fn [lst]\n  (reduce\n   (fn [acc item]\n     (inc acc))\n   0 lst))", "user": "5e619496e4b0fd0acd158690"}, {"problem": 22, "code": "#(reduce (fn [cnt _]\n           (inc cnt))\n         0\n         %)", "user": "5e62c405e4b0fd0acd15869b"}, {"problem": 22, "code": "(fn [things] (reduce (fn [x y](+ x 1)) 0 things))", "user": "5e62db04e4b0fd0acd15869c"}, {"problem": 22, "code": "#(reduce\n  (fn [c _] (inc c))\n    0 %)", "user": "5e633940e4b0fd0acd15869f"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5e639b4be4b0fd0acd1586a2"}, {"problem": 22, "code": "#(inc (first (last (map-indexed vector %))))", "user": "5e63ffa0e4b0fd0acd1586a6"}, {"problem": 22, "code": "(fn [coll]\n  (reduce (fn [acc x]\n            (+ acc 1))\n          0\n          coll))", "user": "5e62444fe4b0fd0acd158694"}, {"problem": 22, "code": "(fn [s]\n  (reduce (fn [c _] (inc c)) 0 s))", "user": "5e60a0cae4b0fd0acd158689"}, {"problem": 22, "code": "#(reduce + 0 (map (constantly 1) %))", "user": "5e64ae6ce4b0fd0acd1586ac"}, {"problem": 22, "code": "#(loop [[x & rest] %1\n         n 0]\n    (if (nil? x)\n      n\n      (recur rest (inc n))))", "user": "5e5f2c17e4b0fd0acd158678"}, {"problem": 22, "code": "#(reduce (fn [x _] (inc x)) 0 %)", "user": "5e5ba910e4b0fd0acd15865c"}, {"problem": 22, "code": "(fn [s] (reduce (fn [p _] (inc p)) 0 s))", "user": "5e6556fbe4b0fd0acd1586b5"}, {"problem": 22, "code": "#(reduce (fn [sum, _] (+ sum 1)) 0 %)", "user": "5e65bfe4e4b0fd0acd1586b9"}, {"problem": 22, "code": "(fn hi [s]\n  (cond (empty? s) 0\n        :else (+ 1 (hi (rest s)) ) ))", "user": "5e663073e4b0fd0acd1586bc"}, {"problem": 22, "code": "#(reduce (fn [len i] (inc len)) 0 %)", "user": "5e668d87e4b0e171e1033681"}, {"problem": 22, "code": "reduce (fn [y xs]\n          (inc y)) 0", "user": "5e610da6e4b0fd0acd15868d"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "54dc84ede4b024c67c0cf784"}, {"problem": 22, "code": "(fn mycount\n  ([x] (mycount x 0))\n  ([x sum]\n  \t(if (empty? x)\n      sum\n      (mycount (rest x) (+ sum 1)))))", "user": "5e6834e0e4b04793f195eaf9"}, {"problem": 22, "code": "(fn [coll]\n    (loop [crt-coll coll\n           total 0]\n          (if (empty? crt-coll)\n            total\n            (recur (rest crt-coll) (inc total)))))", "user": "5e66f501e4b0e171e1033686"}, {"problem": 22, "code": "reduce(fn[y _](+ 1 y))0", "user": "5e66c144e4b0e171e1033683"}, {"problem": 22, "code": "#(inc (first (last (map-indexed vector %))))", "user": "5e68f6dde4b04a83ad7cd268"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5e692be9e4b04a83ad7cd269"}, {"problem": 22, "code": "#(reduce (fn [n _] (inc n)) 0 %)", "user": "5e6a9d8ee4b04a83ad7cd276"}, {"problem": 22, "code": "(comp alength to-array)", "user": "5dd47f7ce4b0948ae9d9ad6d"}, {"problem": 22, "code": "(fn [lat]\n  (reduce (fn [x y] (+ x 1)) 0 lat))", "user": "5e6b891ee4b04a83ad7cd27a"}, {"problem": 22, "code": "(fn [coll] (let [newc (map (constantly 1) coll)] (apply + newc)))", "user": "5e694e8fe4b04a83ad7cd26c"}, {"problem": 22, "code": "reduce (fn [p _] (+ 1 p)) 0", "user": "5e694485e4b04a83ad7cd26b"}, {"problem": 22, "code": "(fn mapseq \n\t([sequence] (if (= (first sequence) nil)\n                  0\n                  (mapseq (next sequence) (+ 0 1))))\n  \t([sequence i] (if (= (first sequence) nil)\n                    i\n                    (mapseq (next sequence) (inc i)))))", "user": "5e51a268e4b027a2e10ac0d1"}, {"problem": 22, "code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "5d5f7ce9e4b0c9e5857d5003"}, {"problem": 22, "code": "#(loop [x %\n        total 0]\n   (if (empty? x)\n     total\n     (recur (rest x) (inc total))))", "user": "5e6cfc25e4b04a83ad7cd28e"}, {"problem": 22, "code": "#( loop [a 0 \n         [h & t] %]\n   (if (nil? h)\n     a\n     (recur (inc a) t)\n     )\n   )", "user": "5e5f83a2e4b0fd0acd15867b"}, {"problem": 22, "code": "#(reduce (fn[x %1] (inc x))0 %1)", "user": "5e6d9fcee4b04a83ad7cd294"}, {"problem": 22, "code": "reduce (fn [x y] (inc x)) 0", "user": "5e6e98dfe4b04a83ad7cd29c"}, {"problem": 22, "code": "(fn [xs] (loop [x 0 coll xs] (if (empty? coll) x (recur (+ x 1) (rest coll)))))", "user": "5e6b9955e4b04a83ad7cd27b"}, {"problem": 22, "code": "reduce (fn[c _] (inc c)) 0", "user": "5e6d63cfe4b04a83ad7cd291"}, {"problem": 22, "code": "(fn [sq] (reduce + (map (fn [x] 1) sq)))", "user": "5e6ff368e4b04a83ad7cd2a8"}, {"problem": 22, "code": "(fn cnt [coll] (if (seq coll) (+ 1 (cnt (rest coll))) 0))", "user": "5e708c4be4b085ba37836dad"}, {"problem": 22, "code": "#(reduce (fn [a b] (+ 1 a)) 0 %)", "user": "5e6e6537e4b04a83ad7cd29a"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5c6d06a7e4b0fca0c1622734"}, {"problem": 22, "code": "(fn [lst] (loop [acc 0 s (seq lst)] (if (not-empty s) (recur (inc acc) (rest s)) acc)))", "user": "5e6ca949e4b04a83ad7cd289"}, {"problem": 22, "code": "reduce (fn [cnt _] (inc cnt)) 0", "user": "5e724492e4b085ba37836dc7"}, {"problem": 22, "code": "reduce (fn [a b] (+ 1 a)) 0", "user": "5e67b97ee4b0e171e103368b"}, {"problem": 22, "code": "(fn [sequence] (reduce (fn [x y] (+ x 1)) 0 sequence))", "user": "5e71b6e7e4b085ba37836dbe"}, {"problem": 22, "code": "#(reduce (fn [a b] (inc a)) 0 %)", "user": "5e72f8aae4b085ba37836dcb"}, {"problem": 22, "code": "#(alength (to-array %))", "user": "5e731c7fe4b085ba37836dcd"}, {"problem": 22, "code": "(fn countnew [x] (if (empty? x) 0 (+ (countnew (rest x)) 1)))", "user": "5e7374ace4b085ba37836dd0"}, {"problem": 22, "code": "#(reduce (fn [n _] (inc n)) 0 %)", "user": "5e7291a2e4b085ba37836dca"}, {"problem": 22, "code": "(fn [s]\n  (loop [seq s, c 0] \n    (if (empty? seq)\n      c (recur (rest seq) (inc c)))))", "user": "5e4fae60e4b027a2e10ac0b9"}, {"problem": 22, "code": "(fn [c] \n  (loop [c (seq c) i 0]\n    (if c\n      (recur (next c) (inc i))\n      i)))", "user": "5e7128eee4b085ba37836db5"}, {"problem": 22, "code": "#(apply + (map (fn [x] 1) %))", "user": "5e75f723e4b085ba37836de9"}, {"problem": 22, "code": "(fn [coll]\n  (loop [coll coll, n 0]\n    (if (seq coll)\n      (recur (rest coll) (inc n))\n      n)))", "user": "5e76274ce4b085ba37836deb"}, {"problem": 22, "code": "reduce (fn [sum x](+ sum 1)) 0", "user": "5dd95976e4b0948ae9d9ad9b"}, {"problem": 22, "code": "(fn count_elem [x]\n  (if (= (first x) nil) 0 (+ (count_elem (rest x)) 1))  \n)", "user": "5e69589de4b04a83ad7cd26d"}, {"problem": 22, "code": "(fn counter\n   ([vec]\n    (counter vec 0)) \n   ([vec i]\n    (if (nil? vec)\n      i\n      (counter (next vec) (inc i))\n      )) \n   )", "user": "5e77ece9e4b085ba37836df3"}, {"problem": 22, "code": "(fn [coll]\n    (loop [c coll t 0]\n        (if (not (seq c)) t\n            (recur (rest c) (+ t 1)))))", "user": "5e12327ee4b099d064962fe5"}, {"problem": 22, "code": "#(reduce ( fn [acc,item] (inc acc)) 0 %1)", "user": "5e78e116e4b085ba37836dfc"}, {"problem": 22, "code": "(fn [my-seq]\n  (reduce + (map (fn [x] 1) my-seq)))", "user": "5e563c88e4b027a2e10ac0f6"}, {"problem": 22, "code": "(fn [x]\n  (inc (first (last (map vector (range) x)))))", "user": "5e78e8d3e4b085ba37836dfd"}, {"problem": 22, "code": "(fn \n  [input]\n  (loop [v (vec input), cnt 0]\n    (if (empty? v)\n     cnt \n     (recur (rest v), (inc cnt)))\n   )\n)", "user": "5e79fcb9e4b085ba37836e08"}, {"problem": 22, "code": "reduce (fn [acc _] (inc acc)) 0", "user": "5e67ab18e4b0e171e103368a"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5e7a5d56e4b085ba37836e0a"}, {"problem": 22, "code": "(fn [input]\n  (let [aux \n       (fn [x acc_in] \n         (loop [l x acc acc_in]\n           (cond \n           (empty? l) acc\n           :else (recur (rest l) (+ 1 acc))\n           )\n         )\n        )\n        ]\n        (aux input 0)))", "user": "5e7aba9fe4b085ba37836e0c"}, {"problem": 22, "code": "(fn len [coll]\n  (if (empty? coll)\n    0\n    (+ 1 (len (rest coll)))))", "user": "5e7af7ffe4b085ba37836e0f"}, {"problem": 22, "code": "(fn [items]\n   ((fn [items n]\n     (if (empty? items)\n       n\n       (recur (rest items) (+ n 1))\n       ))\n    items 0))", "user": "5e7b2d86e4b085ba37836e11"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5048806be4b0ec70b3ef8d9e"}, {"problem": 22, "code": "#(alength (to-array %))", "user": "5e7b437de4b085ba37836e13"}, {"problem": 22, "code": "(fn [items]\n  (loop [sum 0\n         vals items]\n    (if (not (seq vals))\n      sum\n      (recur (+ sum 1) (rest vals) ))))", "user": "5e5f75a0e4b0fd0acd15867a"}, {"problem": 22, "code": "(fn [sequence] (reduce (fn [a b] (inc a)) 0 sequence))", "user": "5e7d0bc9e4b085ba37836e2a"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5e7b41f2e4b085ba37836e12"}, {"problem": 22, "code": "(fn [s]\n  (loop [counter 0\n         s s]\n    (if (= (first s) nil)\n      counter\n      (recur (inc counter) (rest s)))))", "user": "5e7f62cce4b085ba37836e3b"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5e7bb000e4b085ba37836e1d"}, {"problem": 22, "code": "reduce (fn [x y] (+ x 1)) 0", "user": "5e807941e4b085ba37836e45"}, {"problem": 22, "code": "(fn func [coll] \n  (if (empty? coll)\n    0\n    (inc (func (rest coll)))))", "user": "5e805895e4b085ba37836e44"}, {"problem": 22, "code": "(fn [lst]\n  (reduce (fn [acc item] (inc acc)) 0 lst))", "user": "5be4e6e8e4b0ed4b8aab4d06"}, {"problem": 22, "code": "#(loop [x % y 0]\n   (if (= '() x) y\n     (recur (rest x) (inc y))))", "user": "5e81f009e4b09a7a73c8bbaf"}, {"problem": 22, "code": "(fn [x]\n  (loop [sq x\n         ln 0]\n    (if (next sq)\n      (recur (next sq) (inc ln))\n      (+ 1 ln))\n    )     \n  )", "user": "5e807fcae4b085ba37836e46"}, {"problem": 22, "code": "#(reduce (fn [counter seqn] (inc counter)) 0 %)", "user": "5dcace6be4b02b31cc3da3b1"}, {"problem": 22, "code": "(fn [seq]\n  (reduce (fn [x y] (+ x 1)) 0 seq))", "user": "5e8308abe4b09a7a73c8bbb4"}, {"problem": 22, "code": "(fn counting [s]\n  (loop [s s\n         n 0]\n    (if (empty? s)\n     n\n     (recur(rest s) (inc n)))))", "user": "5e832e75e4b09a7a73c8bbb5"}, {"problem": 22, "code": "(fn [coll]\n     (loop [x 0\n            y coll]\n       (if (empty? y)\n         x\n         (recur (inc x) (next y)))))", "user": "5e7b1ef4e4b085ba37836e10"}, {"problem": 22, "code": "#(loop [x 0\n        el1 (first %1)\n        re (rest %1)]\n  (if (nil? el1)\n    x\n    (recur (inc x) (first re) (rest re))))", "user": "5e790f6be4b085ba37836e01"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "5e83a443e4b09a7a73c8bbbc"}, {"problem": 22, "code": "(fn[coll] (reduce (fn[sum _] (inc sum)) 0 coll))", "user": "5cbe37d1e4b0ccb06196274c"}, {"problem": 22, "code": "(fn count-items [xs] (if (empty? xs) 0 (+ 1 (count-items (rest xs)))))", "user": "5e83b33fe4b09a7a73c8bbbd"}, {"problem": 22, "code": "#(loop [s % c 0] \n   (if (first s) \n     (recur (rest s) (inc c)) c))", "user": "5e85163be4b09a7a73c8bbd0"}, {"problem": 22, "code": "#(reduce (fn [x acc] (inc x)) 0 %)", "user": "5e860270e4b09a7a73c8bbdb"}, {"problem": 22, "code": "#(reduce + (map (fn[x] 1) %))", "user": "5e860bafe4b09a7a73c8bbdd"}, {"problem": 22, "code": "#(reduce (fn[a b] (+ 1 a)) 0 %)", "user": "5e85fa2ce4b09a7a73c8bbd9"}, {"problem": 22, "code": "(fn conta \n  ([total sequencia] (if (seq sequencia) (conta (inc total) (rest sequencia)) total))\n  ([sequencia] (conta 0 sequencia))\n)", "user": "5e2ef900e4b05b4b015161fc"}, {"problem": 22, "code": "(fn [s]\n  (loop [counter 0\n         tail s]\n         (if (nil? (first tail))\n            counter\n            (recur (inc counter) (rest tail)))))", "user": "5e856736e4b09a7a73c8bbd2"}, {"problem": 22, "code": "(fn length\n  [s]\n  (if (next s) (+ 1 (length (next s))) 1)\n  )", "user": "5e85b853e4b09a7a73c8bbd5"}, {"problem": 22, "code": "(fn [coll]\n  (loop [acc 0\n         c coll]\n    (if (empty? c)\n      acc\n      (recur (inc acc) (rest c))\n      )\n    )\n  )", "user": "5e862cd7e4b09a7a73c8bbde"}, {"problem": 22, "code": "(fn\n   [s]\n   (reduce (fn [sum _] (inc sum))  0 s))", "user": "5e64f44de4b0fd0acd1586ae"}, {"problem": 22, "code": "(fn my-count\n   ([x] (my-count x 0))\n   ([x y] (if (empty? x) y\n                   (my-count (rest x) (inc y)))))", "user": "5e872aaae4b09a7a73c8bbe5"}, {"problem": 22, "code": "(fn recurs  \n  ([liist] (recurs (seq liist) 0))\n  ([liist, counter] \n   (if (empty? liist) counter (recurs (rest liist) (inc counter)))))", "user": "5e88a676e4b0cb016954630a"}, {"problem": 22, "code": "(fn [x] \n  (loop [sq x\n         cnt 0]\n    (if (seq sq)\n      (recur (rest sq) (inc cnt))\n      cnt)))", "user": "5e7b68e8e4b085ba37836e17"}, {"problem": 22, "code": "#(reduce + (map (fn [_] 1) %))", "user": "5d6f8b4de4b04d129b00f2d3"}, {"problem": 22, "code": "(fn [coll]\n  (reduce (fn [n coll]\n            (inc n))\n          0 coll))", "user": "5e87194ce4b09a7a73c8bbe4"}, {"problem": 22, "code": "#(loop [xs (seq %), acc 0]\n   (if (= () xs) \n     acc\n     (recur (rest xs) (+ acc 1 ))))", "user": "5e8cdc60e4b0cb0169546327"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5e83696ce4b09a7a73c8bbb7"}, {"problem": 22, "code": "reduce (fn[c %] (inc c)) 0", "user": "5e88e267e4b0cb016954630d"}, {"problem": 22, "code": "(fn [coll] \n  (loop [coll coll\n         ele-num 1]\n    (if (nil? (next coll))\n      ele-num\n      (recur (next coll) (+ ele-num 1)))))", "user": "5e1ab7ede4b0dc9594008519"}, {"problem": 22, "code": "(fn [y] (reduce + (map (fn [x] 1) y)))", "user": "5e839edde4b09a7a73c8bbba"}, {"problem": 22, "code": "(comp last map) (fn [i _] (inc i)) (range)", "user": "5e790268e4b085ba37836dff"}, {"problem": 22, "code": "(fn [x]\n  (loop [s (seq x)\n         n 0]\n    (if (seq s)\n      (recur (rest s) (inc n))\n      n)))", "user": "5e80edc3e4b09a7a73c8bba9"}, {"problem": 22, "code": "(fn [y] (apply + (map (fn [x] 1) y)))", "user": "5e8c0c5be4b0cb0169546320"}, {"problem": 22, "code": "(fn cnt \n  ([] 0)\n  ([seqn] \n   (if (= seqn '()) 0\n   \t(+ 1 (cnt (rest seqn))))))", "user": "5e20a159e4b05b4b01516118"}, {"problem": 22, "code": "#(reduce (fn [a _] (+ a 1)) 0 %)", "user": "5e7dc2d8e4b085ba37836e2f"}, {"problem": 22, "code": "(fn count-seq [seq]\n\t(reduce (fn [c _] (inc c)) 0 seq))", "user": "5e8d3b37e4b0cb016954632c"}, {"problem": 22, "code": "(fn count-seq [xs]\n  (reduce (fn [acc _] (inc acc)) 0 xs))", "user": "5e912d95e4b0cb0169546352"}, {"problem": 22, "code": "#(.length (vec %))", "user": "5e8ce2fee4b0cb0169546328"}, {"problem": 22, "code": "#(loop [result 0 c %]\n    (if(empty? c) result\n    (recur (inc result) (rest c))))", "user": "5e91e631e4b0cb016954635a"}, {"problem": 22, "code": "reduce (fn [x _] (inc x)) 0", "user": "5e92bb9de4b0fbed045a37eb"}, {"problem": 22, "code": "reduce (fn [acc & r] (inc acc)) 0", "user": "5c3e5227e4b08cd430848e80"}, {"problem": 22, "code": "(fn x\n  ([coll] (x coll 0))\n  ([coll c] (if (empty? coll) c (x (rest coll) (+ c 1)))))", "user": "5e84b48ee4b09a7a73c8bbc8"}, {"problem": 22, "code": "(fn [l](loop[lst l i 0](if (empty? lst) i (recur (rest lst) (inc i)))))", "user": "5e94ff5fe4b0fbed045a37ff"}, {"problem": 22, "code": "(fn [seq]\n  (loop [seq seq\n         c 0]\n    (if (empty? seq)\n      c\n      (recur (rest seq) (inc c)))))", "user": "5e94e759e4b0fbed045a37fd"}, {"problem": 22, "code": "(comp alength to-array)", "user": "5e954b9ee4b0fbed045a3809"}, {"problem": 22, "code": "(fn cc [l] ((fn c [l n] (if (= l []) n (c (rest l) (+ n 1)))) l 0))", "user": "5e958767e4b0fbed045a380b"}, {"problem": 22, "code": "#(loop [sq % total 0]\n   (if (empty? sq)\n     total\n     (recur (rest sq) (inc total))\n  )\n )", "user": "5e947a69e4b0fbed045a37f8"}, {"problem": 22, "code": "(fn cnt [x] \n  (if (empty? x)\n    0\n    (+ 1 (cnt (rest x)))))", "user": "5e959d08e4b0fbed045a380d"}, {"problem": 22, "code": "(fn [x] (reduce + (map (fn [x] 1) x)))", "user": "5e95c88de4b0fbed045a380e"}, {"problem": 22, "code": "(fn counto \n  ([coll_]\n    (cond \n      (empty? coll_) 0\n      :else (counto (rest coll_) 1)))\n  ([coll_ count_]\n    (cond\n      (empty? coll_) count_\n      :else (counto (rest coll_) (inc count_)))))", "user": "5c9f952ae4b048ec896c5b59"}, {"problem": 22, "code": "(fn altCount\n  [data]\n  (loop [size 0\n         lst data]\n    (if (nil? (first lst))\n      size\n      (recur (inc size) (rest lst)))))", "user": "5e9636fee4b0fbed045a3816"}, {"problem": 22, "code": "#(loop [l %1 cnt 0]\n   (if (empty? l) \n     cnt\n     (recur (rest l) (inc cnt))))", "user": "5e96c662e4b0157ca96647ca"}, {"problem": 22, "code": "(fn this [arg] (reduce + (map (fn [_] 1) arg)))", "user": "5cc092d1e4b0ccb061962790"}, {"problem": 22, "code": "(fn [coll]\n  (loop [s coll\n        acc 0]\n    (if (empty? s)\n      acc\n      (recur (rest s) (inc acc)))))", "user": "5e976fa8e4b0157ca96647cf"}, {"problem": 22, "code": "(fn coeq\n  [lst]\n  (loop\n    [i 0\n     lst lst]\n    (if (nil? (first lst))\n      i\n      (recur (inc i) (rest lst)))))", "user": "5e978fe5e4b0157ca96647d1"}, {"problem": 22, "code": "(fn rec\n   [seq]\n   (if (empty? seq)\n     0\n     (+ 1 (rec (rest seq)))))", "user": "5e980583e4b0157ca96647d5"}, {"problem": 22, "code": "(fn f [[x & xs]]\n   (prn xs)\n  (if x\n  (inc (f xs))\n  0\n  ))", "user": "5e98e338e4b0157ca96647db"}, {"problem": 22, "code": "(fn [s] (reduce (fn [a x] (inc a)) 0 s))", "user": "5e98e8a9e4b0157ca96647dc"}, {"problem": 22, "code": "#(reduce + (map(constantly 1)%))", "user": "5e980e6be4b0157ca96647d6"}, {"problem": 22, "code": "(fn [x] (reduce + (map (fn [y] 1) x)))", "user": "5e996e76e4b0157ca96647e4"}, {"problem": 22, "code": "(fn [coll]\n  (reduce + (map (fn [val] 1) coll)))", "user": "5e99cbd4e4b0157ca96647e6"}, {"problem": 22, "code": "(fn [lst]\n  (loop [cnt 0 l lst]\n    (if (empty? l)\n      cnt\n      (recur (+ 1 cnt) (rest l)))))", "user": "5e9a3814e4b0157ca96647e7"}, {"problem": 22, "code": "(fn [coll] (\n   #(if \n      (empty? %1) \n      %2\n      (recur (rest %1) (inc %2)))\n   coll\n   0\n))", "user": "5e57f45fe4b027a2e10ac103"}, {"problem": 22, "code": "(fn [coll]\n    (loop [n 0 c coll]\n      (if (seq c)\n        (recur (+ n 1) (rest c))\n        n)))", "user": "54320353e4b0dad94371f2eb"}, {"problem": 22, "code": "(fn countSeq \n  [lst]\n  (reduce \n   (fn [n x] (+ n 1)) 0 lst))", "user": "5e95013fe4b0fbed045a3800"}, {"problem": 22, "code": "#(reduce (fn [acc n] (inc acc)) 0 %)", "user": "5e9791cbe4b0157ca96647d2"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5e950310e4b0fbed045a3802"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5e9771dee4b0157ca96647d0"}, {"problem": 22, "code": "(fn [ls]\n  (let [do-it (fn [l n]\n                (if (empty? l)\n                  n\n                  (recur (rest l) (+ n 1))))]\n    (do-it ls 0)))", "user": "59750a68e4b01722bebd4cba"}, {"problem": 22, "code": "#(loop [c %\n        n 0]\n   (if (nil? c)\n     n\n     (recur (next c) (inc n))))", "user": "5e9df069e4b0157ca9664807"}, {"problem": 22, "code": "(fn [col] (reduce + (map (fn [x] 1) col)))", "user": "5e9b6471e4b0157ca96647f0"}, {"problem": 22, "code": "#(reduce (fn [a b] (+ a 1))0 %)", "user": "5e9b7aefe4b0157ca96647f1"}, {"problem": 22, "code": "reduce (fn [counter value] (inc counter)) 0", "user": "5e9d99f9e4b0157ca9664806"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5e9e8648e4b00a66d4a95178"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5e9d7d69e4b0157ca9664803"}, {"problem": 22, "code": "(fn [col] (reduce (fn [v e] (inc v)) 0 col))", "user": "5e9f38cce4b00a66d4a9517e"}, {"problem": 22, "code": "(fn count-elements\n  ([elements]\n   (count-elements elements 0))\n  ([elements index]\n   (if (empty? elements)\n     index\n     (count-elements (rest elements) (inc index)))))", "user": "5e9f3c2ce4b00a66d4a9517f"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5e9e642ce4b00a66d4a95174"}, {"problem": 22, "code": "(fn cnt[coll] \n  (if (empty? coll) \n    0 \n    (inc (cnt (rest coll)))))", "user": "5e9ff8fbe4b00a66d4a95185"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5cdb1914e4b05ee0cb311727"}, {"problem": 22, "code": "#(reduce (fn [l e] (+ l 1)) 0 %1)", "user": "5e85d0bde4b09a7a73c8bbd6"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5e9e408fe4b00a66d4a95172"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5e9c4f43e4b0157ca96647f8"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5e9d1c75e4b0157ca9664801"}, {"problem": 22, "code": "(fn [lst] (reduce + (map (constantly 1) lst)))", "user": "5e9878b9e4b0157ca96647d8"}, {"problem": 22, "code": "#(loop [lst %\n        cnt 0]\n   (if (empty? lst)\n     cnt\n     (recur\n      (rest lst)\n      (inc cnt))))", "user": "5e950178e4b0fbed045a3801"}, {"problem": 22, "code": "(fn countSequence\n  [lst]\n  (reduce \n   (fn [n x] (+ n 1)) 0 lst))", "user": "5ea3711ae4b00a66d4a9519d"}, {"problem": 22, "code": "#(reduce (fn [cur _] (+ cur 1)) 0 %)", "user": "5e909685e4b0cb016954634d"}, {"problem": 22, "code": "#(loop [x %1 c 0]\n      (if (empty? x)\n        c\n        (recur (rest x) (inc c))))", "user": "5ea444b7e4b00a66d4a951a0"}, {"problem": 22, "code": "(fn new-count [l]\n  (reduce (fn [x z] (inc x)) 0 l))", "user": "5ea516e1e4b00a66d4a951a6"}, {"problem": 22, "code": "#(reduce (fn [r x] (+ r 1)) 0 %1)", "user": "5ea580a3e4b00a66d4a951a7"}, {"problem": 22, "code": "(fn [xs] (reduce #(+ %1 (if %2 1)) 0 xs))", "user": "5ea0d417e4b00a66d4a9518a"}, {"problem": 22, "code": "(fn [s]\n  ((fn [s n] (if (empty? s) n (recur (rest s) (inc n))))\n     s 0))", "user": "5ea5f08ce4b00a66d4a951aa"}, {"problem": 22, "code": "(fn f\n  ([seq] \n  \t(f seq 0))\n  ([seq n]\n  \t(if (empty? seq)\n      n\n      (f (rest seq) (+ n 1)))))", "user": "5ea67a5ae4b00a66d4a951ae"}, {"problem": 22, "code": "(fn [x]\n  (loop [in x out 0]  \n  \t(if (empty? in)\n      out\n      (recur (rest in) (inc out)))))", "user": "5ea63100e4b00a66d4a951ab"}, {"problem": 22, "code": "#(reduce + (map (constantly 1)%))", "user": "5ea6f88de4b00a66d4a951b1"}, {"problem": 22, "code": "(fn cnt[x]\n  (loop[x x \n        ans 0]\n    (if(empty? x)\n      ans \n      (recur (rest x) (inc ans)))))", "user": "5ea7b04de4b00a66d4a951b6"}, {"problem": 22, "code": "(fn count-items [items]\n   (reduce + (map (fn [_] 1) items)))", "user": "5ea806d5e4b00a66d4a951b9"}, {"problem": 22, "code": "(fn [coll]\n  (loop [i 0 coll (vec coll)]\n    (if (empty? coll)\n      i\n      (recur (inc i) (pop coll)))))", "user": "5ea85e22e4b00a66d4a951bd"}, {"problem": 22, "code": "(fn [zeq]\n  (loop\n    [izeq zeq\n     ncount 0]\n    (if (empty? izeq)\n      ncount\n      (recur (rest izeq) (inc ncount))\n    )\n   )\n)", "user": "5ea97df7e4b00a66d4a951c8"}, {"problem": 22, "code": "(fn [y] (inc (last (map-indexed (fn [i x] i) y))))", "user": "5ea8bed8e4b00a66d4a951c2"}, {"problem": 22, "code": "#(reduce (fn [acc v] (inc acc)) 0 %1)", "user": "53b49c2ce4b047364c0444b7"}, {"problem": 22, "code": "(fn [coll]\n  (reduce (fn [x y] (inc x)) 0 coll))", "user": "5da70ceee4b000c986472c11"}, {"problem": 22, "code": "(fn [s] \n  (loop [ss s cnt 0]\n    (if (empty? ss)\n      cnt\n      (recur (rest ss) (inc cnt))\n      )\n    )\n  )", "user": "5e850761e4b09a7a73c8bbcf"}, {"problem": 22, "code": "(fn [x] (if (instance? String x) (.length x) (.size x)))", "user": "5d1b7ed6e4b02ea6f0fb6982"}, {"problem": 22, "code": "reduce (fn [c, s] (inc c)) 0", "user": "5eac6a63e4b00a66d4a951e0"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5eac8e27e4b00a66d4a951e3"}, {"problem": 22, "code": "(fn [s] (reduce + (map (constantly 1) s)))", "user": "5eac34dbe4b00a66d4a951df"}, {"problem": 22, "code": "#(reduce (fn [a _] (inc a)) 0 %)", "user": "5eb0878ae4b00a66d4a951f5"}, {"problem": 22, "code": "(fn count-a-seq [x]\n  (reduce (fn [x y] (+ x 1)) 0 x))", "user": "5eae047ee4b00a66d4a951ea"}, {"problem": 22, "code": "#(loop [[x & xs] %\n            i 0]\n   (if (nil? x)\n     i\n     (recur xs (inc i))))", "user": "5eb1c786e4b00a66d4a95201"}, {"problem": 22, "code": "#(reduce (fn [a b] (+ 1 a)) 0 (seq %))", "user": "5eb1e42ae4b00a66d4a95202"}, {"problem": 22, "code": "reduce (fn [result _]\n         (inc result)) 0", "user": "5eb193fde4b00a66d4a951fe"}, {"problem": 22, "code": "(fn [x]\n  (loop [s x\n         i 0]\n    (if (empty? s)\n      i\n      (recur (rest s) (inc i)))))", "user": "5eb46c9de4b00a66d4a9521e"}, {"problem": 22, "code": "(fn [arr] (reduce (fn [a b] (inc a)) 0 arr))", "user": "5eb4927fe4b00a66d4a95221"}, {"problem": 22, "code": "(fn my-count [s]\n  (loop [n 0\n         s2 s]\n    (cond\n     (= s2 '()) n\n     :else (recur (inc n) (rest s2)))))", "user": "5eb22708e4b00a66d4a95204"}, {"problem": 22, "code": "(fn\n    [l]\n    (reduce\n     (fn [len n]\n       (inc len))\n     0 l))", "user": "5a3e1243e4b0447ef91cc5ae"}, {"problem": 22, "code": "(fn [coll] (reduce (fn [result item] (inc result)) 0 coll))", "user": "5eb1a80ce4b00a66d4a951ff"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5eb56fc1e4b00a66d4a95224"}, {"problem": 22, "code": "(fn count2 [[x & xr]]\n(if x (+ 1 (count2 xr) ) 0))", "user": "5e83a273e4b09a7a73c8bbbb"}, {"problem": 22, "code": "(fn cute [x] ((fn cot [x n] (if (empty? x) n (cot (rest x) (+ n 1)))) x 0))", "user": "5eb59ec4e4b00a66d4a95228"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5eb5d9bbe4b00a66d4a9522e"}, {"problem": 22, "code": "#(loop [acc 0 l %]\n   (if (= nil (first l))\n     acc\n     (recur (inc acc) (drop-last 1 l))))", "user": "5eb68184e4b00a66d4a95234"}, {"problem": 22, "code": "(fn contar\n  \t([coll] (contar coll 0))\n  \t([coll index] (if (empty? (rest coll)) (inc index) (contar (rest coll) (inc index)) )))", "user": "5eb59432e4b00a66d4a95227"}, {"problem": 22, "code": "(fn foo \n  ([li] \n  (foo li 0))\n  ([li i]\n  (if (nil? (first li)) i (foo(rest li) (+ i 1)))))", "user": "5eb3f908e4b00a66d4a9521a"}, {"problem": 22, "code": "#(reduce (fn [v c] (inc v)) 0 %)", "user": "5d866acbe4b0915913b1d39c"}, {"problem": 22, "code": "#(loop [stream % counter 0]\n\t(if (= stream ())\n    \tcounter\n    \t(recur (rest stream) (inc counter))\n    ))", "user": "5eb41273e4b00a66d4a9521b"}, {"problem": 22, "code": "(fn [coll] \n  (loop [i 0\n         j coll]\n    (if (next j)\n      (recur (inc i) (next j))\n      (inc i))))", "user": "5eb741e4e4b00a66d4a9523b"}, {"problem": 22, "code": "#(reduce (fn [acc x] (inc acc)) 0 %)", "user": "5ea970d1e4b00a66d4a951c6"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5ebb0f7be4b00a66d4a95261"}, {"problem": 22, "code": "(comp inc first last #(map-indexed vector %))", "user": "5ebaf687e4b00a66d4a9525b"}, {"problem": 22, "code": "(fn [s] (reduce (fn [c e] (inc c)) 0 s))", "user": "5e4beca9e4b0889a8790a560"}, {"problem": 22, "code": "(fn [seq]\n  (loop [x seq\n         cnt 0]\n    (if (empty? x)\n      cnt\n      (recur (rest x) (inc cnt)))))", "user": "5eb6561fe4b00a66d4a95233"}, {"problem": 22, "code": "(fn counting [input]\n  (if (empty? input)\n    0\n    (inc (counting (rest input)))))", "user": "5eb3d02be4b00a66d4a95215"}, {"problem": 22, "code": "#(reduce (fn [sum _] (inc sum)) 0 %)", "user": "5ebc7c13e4b00a66d4a95267"}, {"problem": 22, "code": "#(loop [i 0 lst %] (if (nil? (first lst)) i (recur (inc i) (rest lst))))", "user": "51412b0ae4b0694e2952b79d"}, {"problem": 22, "code": "#(if (= (nth %2 %1 nil) nil) %1 (recur (inc %1) %2)) 0", "user": "5ebd5ecbe4b00a66d4a95270"}, {"problem": 22, "code": "(fn ! [x]\n  (if (empty? x)\n    0\n    (inc (! (rest x)))))", "user": "5ebdb3d2e4b00a66d4a95275"}, {"problem": 22, "code": "#(-> (fn [x] 1) (map %) (->> (apply +)) )", "user": "5ebc9feae4b00a66d4a95268"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5ebd7296e4b00a66d4a95273"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5eae201ae4b00a66d4a951eb"}, {"problem": 22, "code": "#(loop [s % n 0] (if (empty? s) n (recur (rest s) (inc n))))", "user": "5ebd63dee4b00a66d4a95271"}, {"problem": 22, "code": "reduce #(inc (first %&)) 0", "user": "5ebf7a9ce4b00a66d4a95280"}, {"problem": 22, "code": "#(let [[i _] (last (map vector (range) %))]\n   (inc i))", "user": "5ebff55de4b00a66d4a95286"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5e2f73e5e4b05b4b01516204"}, {"problem": 22, "code": "(fn [s]\n  (loop [s s\n         n 0]\n    (if (first s)\n      (recur (next s)\n             (inc n))\n      n)))", "user": "5b8baa2ce4b0c0b3ffbd49bd"}, {"problem": 22, "code": "(fn length-fn [s] (if (empty? s) 0 (+ 1 (length-fn (drop 1 s)))))", "user": "5ec0de29e4b00a66d4a9528e"}, {"problem": 22, "code": "(fn [y] (reduce (fn [acc _] (inc acc)) 0 y))", "user": "5eb6d368e4b00a66d4a95237"}, {"problem": 22, "code": "#(loop [i 1\n        ne %]\n  (if (empty? (rest ne))\n    i\n    (recur (inc i) (rest ne))))", "user": "5ec0db8be4b00a66d4a9528d"}, {"problem": 22, "code": "#(->> \n  (map-indexed vector %)\n  last\n  first\n  inc)", "user": "5ec21ef0e4b00a66d4a95299"}, {"problem": 22, "code": "(fn [coll]\n (loop [coll coll counter 0]\n   (if (empty? coll) counter\n       (recur (rest coll) (inc counter)))))", "user": "5ebaa4a3e4b00a66d4a95258"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5ec25800e4b00a66d4a9529b"}, {"problem": 22, "code": "(fn c [col]\n  (loop [coll col\n         n 0]\n    (if (empty? coll)\n      n\n      (recur (rest coll) (inc n)))))", "user": "5ec2d9e5e4b00a66d4a952a0"}, {"problem": 22, "code": "(fn [s] (reduce + (map (constantly 1) s)))", "user": "5ebd3e7ae4b00a66d4a9526f"}, {"problem": 22, "code": "reduce (fn [a b ] (+ a 1)) 0", "user": "5ec38e62e4b08d0ec38692b8"}, {"problem": 22, "code": "(fn [seq]\n  ;; passes seq into reduce func where accum starts at 0\n  ;; each pass adds 1 to accum\n  (reduce (fn [x y] (+ x 1)) 0 seq))", "user": "5eb257c8e4b00a66d4a95207"}, {"problem": 22, "code": "reduce (fn [n _] (inc n)) 0", "user": "5e9154c1e4b0cb0169546354"}, {"problem": 22, "code": "(fn c \n  ([xs]\n   (c xs 0)) \n  ([[x & xs] n]\n   (if (nil? x) n (c xs (inc n)))))", "user": "5ec3a13ae4b08d0ec38692b9"}, {"problem": 22, "code": "#(loop [cnt 0, xs %]\n  (if (nil? (first xs))\n      cnt\n      (recur (inc cnt) (rest xs))))", "user": "5eb9e97ce4b00a66d4a95253"}, {"problem": 22, "code": "#(reduce (fn [x y] (+ x 1) ) 0 %)", "user": "5ec5f7f2e4b08d0ec38692d1"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5ec66326e4b08d0ec38692d5"}, {"problem": 22, "code": "(fn [col]\n  (reduce (fn [c _] (inc c)) 0 col))", "user": "5ec4cfede4b08d0ec38692c5"}, {"problem": 22, "code": "(fn [y] (reduce (fn [acc x] (+ acc 1)) 0 (vec y)))", "user": "5ebed654e4b00a66d4a9527c"}, {"problem": 22, "code": "#(reduce + 0 (map (fn [x] 1) %))", "user": "5ec6de19e4b08d0ec38692da"}, {"problem": 22, "code": "reduce (fn [c x] (+ c 1)) 0", "user": "5ec7550ce4b08d0ec38692dd"}, {"problem": 22, "code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "5eb84ef4e4b00a66d4a95244"}, {"problem": 22, "code": "(fn myCount [li] (if (empty? li) 0 (+ 1 (myCount (rest li)))))", "user": "5ec819b4e4b08d0ec38692e2"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5ec825eee4b08d0ec38692e3"}, {"problem": 22, "code": "(fn [seq]\n  \t(reduce (fn [x y] (inc x)) 0 seq)\n)", "user": "5ebb4751e4b00a66d4a95262"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "5ec82b11e4b08d0ec38692e6"}, {"problem": 22, "code": "(fn [value] (reduce (fn [acc x] (inc acc)) 0 value))", "user": "5e0b6375e4b099d064962f7b"}, {"problem": 22, "code": "#(reduce + 0 (map (constantly 1) %1))", "user": "5ec943fde4b08d0ec38692f1"}, {"problem": 22, "code": "reduce (fn [x y] (inc x)) 0", "user": "5ec948dde4b08d0ec38692f2"}, {"problem": 22, "code": "(fn [coll] (reduce (fn [x y] (inc x)) 0 coll))", "user": "5ec98589e4b08d0ec38692f5"}, {"problem": 22, "code": "(fn [x] \n  (reduce + (map (fn [y] 1) x)))", "user": "5ec9c395e4b08d0ec38692f7"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5eca1a12e4b08d0ec38692fa"}, {"problem": 22, "code": "(fn count2 [s]\n  (if (empty? s)\n    0\n    (inc (count2 (rest s)))))", "user": "5ec6b354e4b08d0ec38692d8"}, {"problem": 22, "code": "(fn [lst]\n   (loop [x 1 lst lst] \n     (if (empty? (rest lst))\n       x (recur (+ 1 x) (rest lst))\n          )))", "user": "591770dae4b09b4ee5954b9c"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "5e9cdfa1e4b0157ca9664800"}, {"problem": 22, "code": "(fn [xs]\n  (loop [n 0\n         tail xs]\n    (if (empty? tail)\n      n\n      (recur (+ n 1) (next tail)))))", "user": "5ec1b293e4b00a66d4a95296"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5ecb8ff7e4b016b56eae0587"}, {"problem": 22, "code": "(fn\n  [x]\n  (loop [counter 0\n         coll x]\n    (if (empty? coll)\n      counter\n      (recur (inc counter) (rest coll)))))", "user": "5ec7d7f2e4b08d0ec38692e1"}, {"problem": 22, "code": "(fn mc [[a & ra]] (if (nil? ra) 1 (+ 1 (mc ra))))", "user": "5ecc0831e4b016b56eae058c"}, {"problem": 22, "code": "(fn my-counter\n  ([s] (my-counter 0 s))\n  ([counter [head & tail]]\n  (if-not (empty? tail) (recur (inc counter) tail)\n                        (inc counter)\n                        ))\n  )", "user": "5ecbf452e4b016b56eae058b"}, {"problem": 22, "code": "(fn my_count [xs]\n   (if (empty? xs)\n     0\n     (inc (my_count (rest xs))))\n  )", "user": "5eccbce6e4b016b56eae058e"}, {"problem": 22, "code": "(fn [coll]\n  (loop [n 0 c coll]\n    (if (empty? c)\n      n\n      (recur (inc n) (rest c)))))\n\n; Like this solution\n;\n; reduce (fn [c _] (inc c)) 0", "user": "5eccc5c2e4b016b56eae058f"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5ecd1122e4b016b56eae0591"}, {"problem": 22, "code": "(fn [seq] \n  (loop [s seq len 0]\n    (if-not (first s)\n      len\n      (recur (rest s) (inc len))\n      )\n    )\n  )", "user": "5dd84170e4b0948ae9d9ad93"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5ec2dd45e4b00a66d4a952a1"}, {"problem": 22, "code": "#(reduce (fn [n _] (inc n)) 0 %)", "user": "5ece3905e4b016b56eae059a"}, {"problem": 22, "code": "(fn [s]\n  (reduce (fn [a x] (inc a)) 0 s))", "user": "5ece3d25e4b016b56eae059b"}, {"problem": 22, "code": "#(reduce  + (map (constantly 1) %))", "user": "5ece8d93e4b016b56eae059e"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "5ecf4ee4e4b016b56eae05a6"}, {"problem": 22, "code": "(fn [x] \n  (reduce\n   (fn [n x] (inc n))\n   0 x))", "user": "5ecf55dae4b016b56eae05a8"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %1)", "user": "5cc7a7a7e4b0ccb06196283b"}, {"problem": 22, "code": "(fn foo [x]\n  (if (empty? x)\n    0\n    (+ 1 (foo (rest x)))))", "user": "5ececec5e4b016b56eae059f"}, {"problem": 22, "code": "reduce (fn [n _] (inc n)) 0", "user": "5ebcd484e4b00a66d4a9526a"}, {"problem": 22, "code": "reduce (fn [sum _] (inc sum)) 0", "user": "5ecfd429e4b016b56eae05a9"}, {"problem": 22, "code": "(fn c [l] (loop [l l n 0] (if (empty? l) n (recur (rest l) (inc n)))))", "user": "5ed03b7fe4b016b56eae05ae"}, {"problem": 22, "code": "#(reduce (fn \n          [counter coll]\n          (inc counter)) 0 %)", "user": "5ed08785e4b016b56eae05b1"}, {"problem": 22, "code": "(fn my-count\n  ([s acc]\n   (if (next s)\n     (recur (next s) (inc acc))\n     (inc acc)))\n  ([s]\n   (my-count s 0)))", "user": "5ed09be3e4b016b56eae05b2"}, {"problem": 22, "code": "(fn f [s] (if (empty? s) 0\n  (+ 1 (f (rest s)))))", "user": "5ed15e23e4b016b56eae05ba"}, {"problem": 22, "code": "(fn [l] (reduce (fn [a b] (+ a 1)) 0 l))", "user": "5ed28b18e4b016b56eae05be"}, {"problem": 22, "code": "#(reduce + (map(constantly 1) %))", "user": "5ed2c4c7e4b016b56eae05c0"}, {"problem": 22, "code": "#(reduce (fn [acc, _] (+ 1 acc)) 0 %)", "user": "5ed3c43be4b016b56eae05c4"}, {"problem": 22, "code": "(fn [coll] (reduce (fn [a b] (inc a)) 0 coll))", "user": "563bb1fde4b0bfe05bf11829"}, {"problem": 22, "code": "#(reduce (fn [x _] (inc x)) 0 %)", "user": "5ed3f2b9e4b016b56eae05c6"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5ed42731e4b016b56eae05c8"}, {"problem": 22, "code": "#(.length (vec %))", "user": "5ed4b1e8e4b016b56eae05ce"}, {"problem": 22, "code": "(fn [coll]\n  (reduce\n    #(do (identity %2) (inc %1))\n    0\n    coll))", "user": "5ed52854e4b016b56eae05d2"}, {"problem": 22, "code": "#(reduce (fn [a _] (inc a)) 0 %)", "user": "5ed13460e4b016b56eae05b8"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5ed5fafbe4b016b56eae05da"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5ed677bee4b016b56eae05e0"}, {"problem": 22, "code": "#(reduce (fn [acc _] (+ acc 1)) 0 %)", "user": "5ed4e970e4b016b56eae05cf"}, {"problem": 22, "code": "#(reduce +(map (constantly 1) %))", "user": "5ecf55aae4b016b56eae05a7"}, {"problem": 22, "code": "reduce (fn[r _] (inc r)) 0", "user": "5ed6030de4b016b56eae05db"}, {"problem": 22, "code": "(fn [x] (reduce (fn [a b] (inc a)) 0 x))", "user": "5ec03772e4b00a66d4a95289"}, {"problem": 22, "code": "reduce (fn [x y] (inc x) ) 0", "user": "5ed30cb6e4b016b56eae05c2"}, {"problem": 22, "code": "reduce (fn [d x] (inc d)) 0", "user": "5ed80d50e4b016b56eae05eb"}, {"problem": 22, "code": "(fn func [seq] (if (empty? seq)\n                    0\n                    (inc (func (rest seq)))))", "user": "5ed8a12fe4b0c7845d86b0d7"}, {"problem": 22, "code": "#(reduce (fn [acc nxt] (+ 1 acc)) 0 %)", "user": "5ed6c4ede4b016b56eae05e3"}, {"problem": 22, "code": "(fn count'\n  ([aSeq]\n   (count' aSeq 0) )\n  ([aSeq cnt]\n   (if (empty? aSeq)\n     cnt\n     (count' (rest aSeq) (inc cnt))\n   )\n  ) )", "user": "5ed81965e4b016b56eae05ed"}, {"problem": 22, "code": "(fn [coll]\n  (loop [rst coll i 0]\n    (if (empty? rst) i\n        (recur (rest rst) (inc i)))))", "user": "5ed9b912e4b0c7845d86b0e3"}, {"problem": 22, "code": "#(apply + (map (fn [x] 1) %))", "user": "5ed8843de4b016b56eae05f3"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "5ed9c2cde4b0c7845d86b0e4"}, {"problem": 22, "code": "(fn [sx] (reduce + (map #(if (not (nil? %)) 1) sx)))", "user": "5ed5148ee4b016b56eae05d1"}, {"problem": 22, "code": "(fn lst [x]\n   (if (empty? x)\n     0 (+ 1 (lst (rest x)))))", "user": "5ed52a64e4b016b56eae05d3"}, {"problem": 22, "code": "(fn\n  [iseq]\n  (loop [i 0 iseq iseq]\n    (if (empty? iseq)\n      i\n      (recur (+ i 1) (rest iseq)))))", "user": "5ed65b59e4b016b56eae05df"}, {"problem": 22, "code": "(fn x[a] (if (empty? a) 0 (inc (x (rest a)))))", "user": "5edaabade4b0c7845d86b0e8"}, {"problem": 22, "code": "reduce (fn [c _] (+ c 1)) 0", "user": "5ed875abe4b016b56eae05f2"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5ed8c082e4b0c7845d86b0d9"}, {"problem": 22, "code": "reduce (fn [cc _] (inc cc)) 0", "user": "5edb07dde4b0c7845d86b0ed"}, {"problem": 22, "code": "(fn get-length [s] (if (empty? s) 0 (+ 1 (get-length (rest s)))))", "user": "5edb9dd2e4b0c7845d86b0ef"}, {"problem": 22, "code": "(fn [coll]\n  (reduce (fn [i _] (inc i)) 0 (seq coll)))", "user": "5edc645ae4b0c7845d86b0f2"}, {"problem": 22, "code": "(fn [objs]\n  ( (fn lp [os i]\n    (if (empty? (drop 1 os))\n      (+ i 1)\n      (lp (rest os) (inc i))\n      )\n    ) objs 0)\n  )", "user": "5edc16e1e4b0c7845d86b0f1"}, {"problem": 22, "code": "#(reduce (fn[x y] (+ x 1)) 0 % )", "user": "5ed8bd07e4b0c7845d86b0d8"}, {"problem": 22, "code": "(fn [x] (reduce + (map #(if (nil? %) 0 1) x)))", "user": "5ed4482be4b016b56eae05ca"}, {"problem": 22, "code": "#(alength (to-array %))", "user": "5edd0ad2e4b0c7845d86b0f4"}, {"problem": 22, "code": "(fn [sq] (reduce (fn [a e] (inc a)) 0 sq))", "user": "5edd6eb7e4b0c7845d86b0f7"}, {"problem": 22, "code": "(fn count2 \n  ([s] (count2 s 1))\n  ([s base] (if (empty? (rest s)) base (recur (rest s) (+ 1 base)))))", "user": "5eddc271e4b0c7845d86b0fa"}, {"problem": 22, "code": "(fn [lst] (reduce (fn [accum val] (+ 1 accum)) 0 lst))", "user": "53c73e8ae4b00fb29b2212a5"}, {"problem": 22, "code": "reduce (fn[ac el] (inc ac)) 0", "user": "5ede8210e4b0c7845d86b0fe"}, {"problem": 22, "code": "(fn [xs]\n  (reduce (fn [a b] (+ a 1)) 0 xs))", "user": "5edfb1e5e4b0c7845d86b107"}, {"problem": 22, "code": "#(reduce (fn [acc _] (inc acc)) 0 %)", "user": "5e7394f3e4b085ba37836dd4"}, {"problem": 22, "code": "(fn [coll] (reduce + (map  (constantly 1) coll)))", "user": "5ee0fab1e4b029a2061bbe71"}, {"problem": 22, "code": "(fn f [l] (if (empty? l) 0 (+ (f (rest l)) 1)))", "user": "5ee2b376e4b029a2061bbe81"}, {"problem": 22, "code": "reduce (fn [cc _] (inc cc)) 0", "user": "5ee0b107e4b029a2061bbe70"}, {"problem": 22, "code": "(fn counter\n  [coll]\n  (reduce + (map (constantly 1) coll))\n  )", "user": "5d2c8f16e4b01671435dbc92"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5ee4545ee4b029a2061bbe8d"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5ee4ae10e4b029a2061bbe8f"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5ee543bde4b029a2061bbe95"}, {"problem": 22, "code": "#(reduce +(map (constantly 1) %))", "user": "5ee607f2e4b029a2061bbe96"}, {"problem": 22, "code": "(fn [coll]\n  (loop [counter 0\n         coll coll]\n    (if (empty? coll)\n      counter\n      (recur (inc counter)\n             (rest coll))\n      )\n    )\n  )", "user": "5ee738dee4b029a2061bbea2"}, {"problem": 22, "code": "(fn myCount [col]\n      (if (first col)\n        (+ 1 (myCount (rest col)))\n        0))", "user": "5ee75f8be4b029a2061bbea5"}, {"problem": 22, "code": "(fn [s]\n  (reduce (fn [acc l] (inc acc)) 0 s))", "user": "5ee7b49de4b029a2061bbea6"}, {"problem": 22, "code": "(fn [x]\n  (loop [lst x\n         cnt 0]\n    (if (empty? lst)\n      cnt\n      (recur (rest lst) (inc cnt)))))", "user": "5ee7cf92e4b029a2061bbea9"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5ee7bc8ce4b029a2061bbea7"}, {"problem": 22, "code": "(fn [x]\n  \t(loop [y 0 [ current & remaining] x]\n      (if(nil? current)\n        y\n        (recur (inc y) remaining)))\n )", "user": "5ee66158e4b029a2061bbe98"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5626f770e4b00e49c7cb47c8"}, {"problem": 22, "code": "#(loop [s % len 0]\n          (if (empty? s)\n            len\n            (recur (rest s) (inc len))))", "user": "5ee888a4e4b029a2061bbeb2"}, {"problem": 22, "code": "reduce (fn [acc x] (inc acc)) 0", "user": "5ee93720e4b029a2061bbeb7"}, {"problem": 22, "code": "(fn [lst]\n  (loop [[fst & rst] lst count-me 1]\n    (if (nil? rst)\n      count-me\n      (recur rst (+ 1 count-me)))))", "user": "5de5fd64e4b0948ae9d9ae20"}, {"problem": 22, "code": "(fn count_ [s] (reduce + (map (fn [x] 1) s)))", "user": "5eea5c98e4b029a2061bbebf"}, {"problem": 22, "code": "#(loop [i 0 arr %]\n    (if (empty? arr)\n      i\n      (recur (inc i) (rest arr))\n      )\n    )", "user": "5ed92e8fe4b0c7845d86b0dd"}, {"problem": 22, "code": "(fn f ([l] (f l 0))\n     ([l n] (case l [] n (recur (rest l) (+ 1 n)))))", "user": "5e373c08e4b0650de70e2b41"}, {"problem": 22, "code": "(fn [s] (reduce + (map (fn [x] 1) s)))", "user": "5eea8f0de4b029a2061bbec3"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5eeb1cc3e4b029a2061bbecc"}, {"problem": 22, "code": "(fn [lst]\n  (loop [i lst cnt 0]\n   (cond (empty? i) cnt\n     :t (recur (rest i)(inc cnt)))))", "user": "5eea5ce7e4b029a2061bbec0"}, {"problem": 22, "code": "#(reduce (fn [acc, _] (inc acc)) 0 %)", "user": "5eeb03dde4b029a2061bbeca"}, {"problem": 22, "code": "(fn [xs] (reduce + (map (constantly 1) xs)))", "user": "5eebbf9ee4b029a2061bbed2"}, {"problem": 22, "code": "#((fn [coll counter] \n  (if (empty? coll) \n    counter\n    (recur (rest coll) (inc counter)))) % 0)", "user": "5eecd339e4b07c55ae4a0507"}, {"problem": 22, "code": "reduce (fn [cnt _] (inc cnt)) 0", "user": "5eee7311e4b07c55ae4a0510"}, {"problem": 22, "code": "(fn [col]\n  (reduce (fn [c item]\n            (inc c))0 col))", "user": "5eeeaf56e4b07c55ae4a0514"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5eee80ede4b07c55ae4a0511"}, {"problem": 22, "code": "(fn count-a-sequence [s]\n  (reduce + (map (constantly 1) s)))\n\n;(fn count-a-sequence [s]\n;  (reduce (fn [total item] (inc total))\n;          0\n;          s))", "user": "5c87217de4b0c8042a70cea1"}, {"problem": 22, "code": "reduce (fn [a _] (inc a)) 0", "user": "5ea1e99de4b00a66d4a9518d"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "5cc6b681e4b0ccb061962828"}, {"problem": 22, "code": "(fn [arr] (reduce #(+ %1 1 (if (= (type %2) \"\") 0 0 )) 0 arr))", "user": "5eee9352e4b07c55ae4a0512"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5eecf110e4b07c55ae4a050b"}, {"problem": 22, "code": "#(apply + (map (constantly 1) %))", "user": "5ee7274ce4b029a2061bbea0"}, {"problem": 22, "code": "#(loop [list % c 0]\n  (if (empty? list)\n     c\n     (recur (drop-last list) (inc c))))", "user": "5ecda821e4b016b56eae0598"}, {"problem": 22, "code": "#(loop [x 0 \n        l %] \n   (if (seq l) \n     (recur (inc x) (rest l)) \n     x))", "user": "5eec1e4be4b07c55ae4a0503"}, {"problem": 22, "code": "reduce (fn [result _] (inc result)) 0", "user": "5ee81beae4b029a2061bbeac"}, {"problem": 22, "code": "(fn cnt [lst]\n  (if (= lst nil)\n    0\n    (inc (cnt (next lst)))))", "user": "5eec1001e4b07c55ae4a0502"}, {"problem": 22, "code": "(fn [coll] (reduce + (map #(if % 1 0) coll)))", "user": "5ef18431e4b07c55ae4a0529"}, {"problem": 22, "code": "reduce (fn [x y] (+ x 1)) 0", "user": "5ed70b97e4b016b56eae05e6"}, {"problem": 22, "code": "(fn len\n  ([l] (len (rest l) 1)) \n  ([l a] \n      (if \n       (empty? l) a \n       (len (rest l) (inc a)))))", "user": "5ee7e4f5e4b029a2061bbeab"}, {"problem": 22, "code": "(fn [coll] (reduce (fn [temp-count _] (inc temp-count)) 0 coll))", "user": "5ef28e95e4b07c55ae4a0535"}, {"problem": 22, "code": "(fn total\n  ([seq] (total seq 0))\n  ([seq counter] \n   (if (empty? seq)\n     counter\n     (total (rest seq) (+ 1 counter)))))", "user": "5ef381a3e4b07c55ae4a053c"}, {"problem": 22, "code": "(fn [input]\n  (loop [col (sequence input)\n         acc 0]\n    (if (empty? col)\n      acc\n      (recur (rest col) (inc acc)))))", "user": "5ef43ff6e4b07c55ae4a0540"}, {"problem": 22, "code": "(fn myfn\n  ([li] (myfn li 0))\n  ([li n]\n   (let [newLi (drop 1 li)\n         newCount (+ 1 n)]\n     (if (empty? newLi) newCount (myfn newLi newCount)))))", "user": "5ef4677ce4b07c55ae4a0542"}, {"problem": 22, "code": "(fn [coll]\n  (loop [remain coll\n         card 0]\n    (if (= remain '())\n      card\n      (recur (rest remain) (+ 1 card)))))", "user": "5ef4bfb4e4b07c55ae4a0545"}, {"problem": 22, "code": "#(.length (vec %))", "user": "5dd45bb8e4b0948ae9d9ad6b"}, {"problem": 22, "code": "(fn [c] \n  (let [iter (fn iter [[x & xs] i] \n              (if x \n                (iter xs (inc i)) \n                i))] \n    (iter c 0)))", "user": "5ee09da9e4b029a2061bbe6f"}, {"problem": 22, "code": "#(last (map (fn [i _] (inc i)) (range) %))", "user": "5ec540d8e4b08d0ec38692c7"}, {"problem": 22, "code": "#(reduce (fn [idx val] (+ idx 1)) 0 (vec %))", "user": "5ef5ee81e4b07c55ae4a054a"}, {"problem": 22, "code": "#(loop [cnt 0]\n    (if (nil? (get (vec %) cnt))\n      cnt\n      (recur (inc cnt))))", "user": "5ef77cc1e4b09b61f08553c1"}, {"problem": 22, "code": "#(reduce (fn [acc _] (inc acc)) 0 %)", "user": "5ef8e9e0e4b09b61f08553cb"}, {"problem": 22, "code": "reduce (fn [x y]\n             (+ 1 x)) 0", "user": "5df94f73e4b0a607a9a45cb6"}, {"problem": 22, "code": "(fn [a-list] (+ (last (map-indexed #(and %2 %1) a-list)) 1))", "user": "504e0a1de4b078edc5f593a7"}, {"problem": 22, "code": "(fn [coll]\n  (loop [coll coll\n         counter 0]\n    (if (empty? coll)\n      counter\n      (recur (drop 1 coll) (inc counter)))))", "user": "5ec91154e4b08d0ec38692ed"}, {"problem": 22, "code": "(fn count-elements\n  ([s] (count-elements s 0))\n  ([s c] (if \n           (empty? s) c\n           (count-elements (rest s) (inc c)))))", "user": "5ef9ea69e4b09b61f08553d1"}, {"problem": 22, "code": "(fn c [ls]\n  (if (= ls '())\n    0\n    (+ 1 (c (rest ls)))\n    )\n  )", "user": "5efcee8fe4b0cf489e8d7efd"}, {"problem": 22, "code": "(fn [coll]\n  (loop [n 0 coll coll]\n    (if (empty? coll)\n      n\n      (recur (inc n) (rest coll)))))", "user": "5eff4dc1e4b0cf489e8d7f0e"}, {"problem": 22, "code": "reduce (fn [n _] (inc n)) 0", "user": "5c31d89ce4b0d62ef62d9f2f"}, {"problem": 22, "code": "#(reduce + (map (fn [_] 1) %))", "user": "5eff339ae4b0cf489e8d7f0c"}, {"problem": 22, "code": "(fn [items]\n  (reduce\n    (fn [acc current] (+ 1 acc))\n    0\n    items))", "user": "5f009162e4b0cf489e8d7f1a"}, {"problem": 22, "code": "reduce (fn [acc _] (inc acc)) 0", "user": "5f00640ae4b0cf489e8d7f19"}, {"problem": 22, "code": "(fn [values] (reduce + (map (fn [_] 1) values)))", "user": "5f003099e4b0cf489e8d7f17"}, {"problem": 22, "code": "#(reduce + 0 (map (fn [_] 1) %))", "user": "5f016f37e4b0cf489e8d7f20"}, {"problem": 22, "code": "(fn [lst] (reduce (fn [reduced _] (+ 1 reduced)) 0 lst))", "user": "5f018d8de4b0cf489e8d7f21"}, {"problem": 22, "code": "(fn cnt [coll]\n  (loop [c 0\n         coll coll]\n  \t(if (seq coll)\n    \t(recur (inc c) (rest coll))\n      \tc)))", "user": "5f0247fae4b0cf489e8d7f27"}, {"problem": 22, "code": "(fn count_elements [s]\n  (loop [ c 0\n          r s ]\n    (if (empty? r)\n      c\n      (recur\n        (inc c)\n        (rest r)))))", "user": "5f03550ce4b0cf489e8d7f33"}, {"problem": 22, "code": "(fn [sequ] (reduce\n            (fn [cnt element] (inc cnt))\n            0 sequ))", "user": "5e7fb908e4b085ba37836e3f"}, {"problem": 22, "code": "#(reduce + (vals (frequencies %)))", "user": "5f011638e4b0cf489e8d7f1d"}, {"problem": 22, "code": "reduce (fn [x y] (+ x 1)) 0", "user": "5f04545ee4b0cf489e8d7f39"}, {"problem": 22, "code": "(fn [values] \n  (reduce (fn [a b] (inc a)) 0 values))", "user": "5f012a2ee4b0cf489e8d7f1e"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5f04eb97e4b0cf489e8d7f3e"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5f059b97e4b0cf489e8d7f48"}, {"problem": 22, "code": "(fn [s]\n    (loop [remaining s\n           counter 0]\n      (if (seq remaining)\n        (recur (rest remaining) (inc counter))\n        counter)))", "user": "5f02f365e4b0cf489e8d7f2c"}, {"problem": 22, "code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "5f06eaede4b0cf489e8d7f55"}, {"problem": 22, "code": "(fn [col]\n (loop [nx-col (seq col) i 0] \n  (if (or \n       (= () nx-col) \n       (= nil nx-col)) i\n       (recur (rest nx-col) (inc i)))))", "user": "5f055b2de4b0cf489e8d7f43"}, {"problem": 22, "code": "(fn countEl [coll] (cond (empty? coll) 0 :else (+ 1 (countEl (rest coll)))))", "user": "5eedfc62e4b07c55ae4a050e"}, {"problem": 22, "code": "(fn  [x] (loop [i 0 y x] (if (empty? y) i (recur (inc i) (rest y)))))", "user": "5efdfbf1e4b0cf489e8d7f03"}, {"problem": 22, "code": "(fn mycount([coll sz] (if (empty? coll) sz (recur (rest coll)(inc sz)))) ([coll] (mycount coll 0)))", "user": "5f088bb3e4b0cf489e8d7f5f"}, {"problem": 22, "code": "(fn [a] (reduce (fn [c x] (+ c 1)) 0 (vec a)))", "user": "5f0890ffe4b0cf489e8d7f61"}, {"problem": 22, "code": "(partial \n reduce \n (fn [sum _] (inc sum)) \n        0)", "user": "5f08ed43e4b09a3f05b717fc"}, {"problem": 22, "code": "(fn [lst]\n        (loop [rem lst\n               cnt 0]\n          (if (empty? rem)\n            cnt\n            (recur (rest rem) (inc cnt)))))", "user": "5484c3b2e4b0e286459a11a2"}, {"problem": 22, "code": "(fn [arr] (apply + (map (fn [x] 1) arr)))", "user": "5f0a4904e4b09a3f05b71805"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "5c06e811e4b0bdcf453d16ba"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "5f0a65dae4b09a3f05b71806"}, {"problem": 22, "code": "(fn cnt [x] (if (= x []) 0 (+ 1 (cnt (rest x)))))", "user": "5f06d26ae4b0cf489e8d7f53"}, {"problem": 22, "code": "(fn [s]\n  (loop [remaining s\n        cnt 0]\n    (if (empty? remaining)\n      cnt\n      (recur (rest remaining) (+ cnt 1)))))", "user": "5f0b61e6e4b0f30dddfb5d44"}, {"problem": 22, "code": "(fn [list] (+ 1 (aget (int-array (last (map-indexed (fn [idx itm] [idx]) list))) 0)))", "user": "5f082d9ee4b0cf489e8d7f5c"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5f0cdb08e4b0f30dddfb5d50"}, {"problem": 22, "code": "(fn [list] \n  (reduce (fn [a _x] (+ a 1)) 0 list))", "user": "5f0ccff2e4b0f30dddfb5d4f"}, {"problem": 22, "code": "#(reduce\n  (fn [x _] (inc x))\n  0 %)", "user": "5f0c8b0de4b0f30dddfb5d4c"}, {"problem": 22, "code": "#(loop [aseq % i 0]\n   (if (empty? aseq)\n       i\n       (recur (rest aseq) (inc i))))", "user": "5eff588ae4b0cf489e8d7f10"}, {"problem": 22, "code": "reduce (fn [arr elem] (+ 1 arr)) 0", "user": "58ed2e21e4b056aecfd47d7a"}, {"problem": 22, "code": "#(alength (to-array %))", "user": "5f0e0caae4b0f30dddfb5d56"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %1)", "user": "548f1604e4b0e286459a1230"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "57e070fde4b0bd073c202478"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "5f0e32a1e4b0f30dddfb5d59"}, {"problem": 22, "code": "reduce (fn [acc item] (inc acc)) 0", "user": "5f08d0c5e4b0cf489e8d7f62"}, {"problem": 22, "code": "(fn [l]\n  (loop [l l\n         length 0]\n    (if (empty? l)\n        length\n        (recur (rest l) (+ 1 length)))))", "user": "5f0b8243e4b0f30dddfb5d45"}, {"problem": 22, "code": "#(reduce + (map (fn [item] (+ 0 1)) %1))", "user": "5d73530ce4b02e6b30c93514"}, {"problem": 22, "code": "(fn [lst]\n  (loop [i lst cnt 0]\n   (cond (empty? i) cnt\n     :t (recur (rest i)(inc cnt)))))", "user": "5f0fbaf1e4b091ba50b4db9d"}, {"problem": 22, "code": "#(loop [mylist %1 num 0]\n   \t\t(if (empty? mylist) \n\t    \tnum\n   \t\t\t(recur (rest mylist) (inc num))))", "user": "5f0dfa48e4b0f30dddfb5d55"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5f108456e4b091ba50b4dba1"}, {"problem": 22, "code": "#(alength (to-array %))", "user": "5f10a999e4b091ba50b4dba5"}, {"problem": 22, "code": "(fn [x] (alength (to-array x)))", "user": "5f1108d7e4b091ba50b4dba9"}, {"problem": 22, "code": "(fn getCount [list]\n  (alength (to-array list)))", "user": "5f081f6de4b0cf489e8d7f5a"}, {"problem": 22, "code": "(fn mycount [sq]\n  (if (empty? sq)\n    0\n    (+ 1 (mycount (rest sq)))\n  )\n)", "user": "5bcc304ce4b07a9b28b1010c"}, {"problem": 22, "code": "(fn [x]\n \t(loop [counter 1 left x]\n\t\t(if (empty? (rest left))\n   \t\t\tcounter\n      \t\t(recur (inc counter) (rest left)))))", "user": "5f10ab01e4b091ba50b4dba6"}, {"problem": 22, "code": "(fn [lst] ( reduce (fn [acc e] (inc acc)) 0 lst) )", "user": "5f1328dee4b091ba50b4dbb1"}, {"problem": 22, "code": "(fn [x] (.length (vec x)))", "user": "5f122f93e4b091ba50b4dbae"}, {"problem": 22, "code": "(fn count' [seq] (if (empty? seq)\n                   0\n                   (inc (count' (rest seq)))))", "user": "5e6ba862e4b04a83ad7cd27d"}, {"problem": 22, "code": "(fn [l] (reduce + (map (fn [x] 1) l)))", "user": "5ef78fdae4b09b61f08553c4"}, {"problem": 22, "code": "reduce (fn [acc _] (inc acc)) 0", "user": "5509a23ee4b06e50f9beb11a"}, {"problem": 22, "code": "(fn [coll]\n  (reduce\n   (fn [acc _]\n     (inc acc))\n   0 coll))", "user": "5f10fb99e4b091ba50b4dba8"}, {"problem": 22, "code": "(fn my-count [coll]\n  (if (empty? coll)\n    0\n    (inc (my-count (rest coll)))))", "user": "5f156992e4b091ba50b4dbba"}, {"problem": 22, "code": "(fn [ls] \n  (if (empty? ls) 0\n    ((fn [ls n] (if (empty? ls) n \n                  (recur (rest ls) (inc n)))) ls 0)))", "user": "5f15b1e2e4b091ba50b4dbbd"}, {"problem": 22, "code": "reduce (fn [x _] (inc x)) 0", "user": "5f03ab5be4b0cf489e8d7f37"}, {"problem": 22, "code": "(fn [coll]\n  (loop [i 0 rest-coll coll]\n    (if (empty? rest-coll)\n      i\n      (recur (inc i) (rest rest-coll)))))", "user": "5f15a50fe4b091ba50b4dbbc"}, {"problem": 22, "code": "(fn [s]\n  (apply + (vals (frequencies s)))\n  )", "user": "5d8a3f3ee4b0915913b1d3c9"}, {"problem": 22, "code": "(fn [x]\n  (loop [lst x\n         len 0]\n    (if (empty? lst)\n      len\n      (recur (rest lst) (+ len 1)))))", "user": "572ee822e4b0cd1946bd0f91"}, {"problem": 22, "code": "#(reduce (fn [acm _] (inc acm)) 0 %)", "user": "5eb7b41ee4b00a66d4a9523c"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5f10982ee4b091ba50b4dba2"}, {"problem": 22, "code": "reduce (fn [x y] (+ 1 x)) 0", "user": "5f17e3c5e4b091ba50b4dbd0"}, {"problem": 22, "code": "#(reduce (fn [x _] (inc x)) 0 %)", "user": "5f086f54e4b0cf489e8d7f5e"}, {"problem": 22, "code": "; far not optimal, but there is \"count\" for the optimal solution :)\n(fn conti [x]\n  (loop [iter 0]\n    (if (empty? (drop-last iter x))\n      iter\n      (recur (inc iter))\n      )))", "user": "5f0824c5e4b0cf489e8d7f5b"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5eff0d7ee4b0cf489e8d7f0a"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5f180938e4b091ba50b4dbd1"}, {"problem": 22, "code": "#(loop [coll %\n         cnt 0] \n    (if (nil? (first coll))\n      cnt\n      (recur (drop 1 coll) (inc cnt))))", "user": "5f1a0ca2e4b091ba50b4dbe0"}, {"problem": 22, "code": "#((partial (fn foo [mycount m]\n  (if (not= (rest m) '())\n  (foo (+ mycount 1) (rest m))\n  mycount\n)\n) 1) %)", "user": "5f1aade6e4b091ba50b4dbe4"}, {"problem": 22, "code": "(fn [coll]\n  (#(reduce + (map (fn [x] 1) coll))))", "user": "5f1c2755e4b0f565ad99825d"}, {"problem": 22, "code": "#(reduce (fn [init element] (+ init 1)) 0 %)", "user": "5f1d22c7e4b0f565ad998268"}, {"problem": 22, "code": "#(apply + (map (constantly 1) %))", "user": "5aa5043ee4b0d174b936c88e"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5f1d92a1e4b0f565ad99826a"}, {"problem": 22, "code": "(fn [coll]\n  (loop [coll coll\n         n 0]\n    (if (empty? coll)\n      n\n      (recur (rest coll) (inc n)))))", "user": "5f1c0447e4b0f565ad99825c"}, {"problem": 22, "code": "#(reduce (fn [a _] (inc a)) 0 %)", "user": "5f1ee66be4b0f565ad998272"}, {"problem": 22, "code": "#( alength( to-array %))", "user": "5f1e704ee4b0f565ad998270"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5f1f4411e4b0f565ad99827b"}, {"problem": 22, "code": "(fn counter [x] (reduce + (map (fn [x] 1) x)))", "user": "599389d8e4b0b211ea3aaab6"}, {"problem": 22, "code": "(fn [col] (->> col (map-indexed vector) last first inc))", "user": "5f0e8312e4b0f30dddfb5d5b"}, {"problem": 22, "code": "#( ->> (map-indexed vector %1) last first (+ 1))", "user": "5f0c3da4e4b0f30dddfb5d49"}, {"problem": 22, "code": "(fn count-clone [coll] \n  (loop [remaining coll acc 0]\n    (if (empty? remaining)\n      acc\n      (recur (rest remaining) (inc acc)))))", "user": "5f21d172e4b0f565ad998286"}, {"problem": 22, "code": "#(loop[cnt 0, seq %] (if (empty? seq) cnt (recur (inc cnt) (rest seq))))", "user": "5f21e969e4b0f565ad998287"}, {"problem": 22, "code": "(fn\n  [coll]\n  (reduce (fn [n i] (inc n)) 0 coll))", "user": "5f21ffa2e4b0f565ad998289"}, {"problem": 22, "code": "(fn my-count [sent]\n  (loop [sent sent the-count 0]\n    (if (empty? sent)\n      the-count\n      (recur (rest sent) (inc the-count)))))", "user": "5f238a59e4b0f565ad99828d"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5f22e8c9e4b0f565ad99828b"}, {"problem": 22, "code": "(fn own-count [x]\n     (if (empty? x)\n       0\n       (inc (own-count (rest x)))))", "user": "5f23efc8e4b0f565ad99828f"}, {"problem": 22, "code": "(fn foo [data] (+ 1 (if (empty? data) -1 (foo (drop 1 data)))))", "user": "5f19ecbae4b091ba50b4dbdf"}, {"problem": 22, "code": "(fn [s] (loop [c s i 0] (if (empty? c) i (recur (rest c) (inc i)))))", "user": "5cf8864be4b0b71b1d808a84"}, {"problem": 22, "code": "(fn my-count\n  [s]\n  ((fn my-count-rec [s c]\n       (if (empty? s) c\n       (my-count-rec (rest s) (+ 1 c)))) s 0))", "user": "5b61279ce4b0c6492753e70e"}, {"problem": 22, "code": "#(reduce (fn [acc _] (inc acc)) 0 %)", "user": "5f247827e4b0f565ad998292"}, {"problem": 22, "code": "#(loop [n 0 coll %] (if (empty? coll) n (recur (inc n) (rest coll))))", "user": "5f265bd9e4b0857314092c8c"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "54cbde61e4b057c6fda3a284"}, {"problem": 22, "code": "#(loop [data % acc 0] (if (empty? data) acc (recur (rest data) (+ 1 acc))))", "user": "5f05654fe4b0cf489e8d7f44"}, {"problem": 22, "code": "(fn my-count\n  ([l] (reduce (fn [x y] (inc x)) 0 l))\n)", "user": "5f22dabbe4b0f565ad99828a"}, {"problem": 22, "code": "#(loop [n % sum 1]\n    (if (= (next n) nil) \n      sum\n      (recur (rest n) (inc sum))))", "user": "5f27cc7fe4b033932238a646"}, {"problem": 22, "code": "(fn [li] (reduce #(do %& (inc %1)) 0 li))", "user": "5f281a83e4b033932238a64a"}, {"problem": 22, "code": "#(reduce (fn [acc _] (+ acc 1)) 0 %)", "user": "5e8c3e8fe4b0cb0169546322"}, {"problem": 22, "code": "(fn [coll]\n  (apply + (map (fn [_] 1) coll)))", "user": "5f27f180e4b033932238a648"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5f297f22e4b033932238a64e"}, {"problem": 22, "code": "(fn [lista]\n    (loop [l lista\n           i 0]\n        (if (empty? l)\n        i\n        (recur (rest l) (inc i)))))", "user": "5f209ad3e4b0f565ad99827f"}, {"problem": 22, "code": "#(reduce\n  (fn [c _]  (inc c))\n    0 %)", "user": "5f1af439e4b0f565ad998257"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5f25a2b1e4b0117231e5035e"}, {"problem": 22, "code": "#(reduce (fn [acc ele] (inc acc)) 0 %)", "user": "5f29837ee4b033932238a64f"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5f2b0be0e4b033932238a65b"}, {"problem": 22, "code": "(fn [col] (reduce (fn [c _] (inc c)) 0 col))", "user": "5f275800e4b0857314092c93"}, {"problem": 22, "code": "(fn [coll] \n   (reduce (fn [i c] (inc i)) 0 coll)\n   )", "user": "5ee4b2e6e4b029a2061bbe90"}, {"problem": 22, "code": "#(reduce (fn [c coll] (inc c)) 0 %)", "user": "5f2a2a0de4b033932238a653"}, {"problem": 22, "code": "(fn count-elements [elements]\n  (if (empty? elements) 0\n    (inc (count-elements (rest elements)))))", "user": "5f2aa09ce4b033932238a655"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5f2c02d1e4b033932238a65f"}, {"problem": 22, "code": "reduce (fn [a b] (inc a)) 0", "user": "5f2c04dde4b033932238a660"}, {"problem": 22, "code": "#(reduce + (map (fn [_] 1) %))", "user": "5f2c4c44e4b033932238a662"}, {"problem": 22, "code": "(fn [xs] (loop [ys xs acc 0]\n           (if (= ys '())\n             acc\n             (recur (rest ys) (+ 1 acc)))))", "user": "5f2c5adee4b033932238a665"}, {"problem": 22, "code": "(fn cnt\n  ([xs] (cnt xs 0))\n  ([xs n] (if (empty? xs) n\n   \t\t\t(recur (rest xs) (inc n)))))", "user": "5f2d6787e4b033932238a66d"}, {"problem": 22, "code": "#(reduce (fn [v _] (inc v)) 0 (seq %))", "user": "5f2de7ede4b033932238a674"}, {"problem": 22, "code": "(fn cnt [lst]\n    (if (= lst nil)\n        0\n        (inc (cnt (next lst)))))", "user": "5f05ef21e4b0cf489e8d7f4d"}, {"problem": 22, "code": "(fn [s] \n  (loop [cur s n 0] \n    (if cur \n      (recur (next cur) (+ 1 n))\n      n\n      )))", "user": "5f2e6d97e4b033932238a677"}, {"problem": 22, "code": "#(reduce + 0 (map (constantly 1) %))", "user": "5f279b64e4b033932238a645"}, {"problem": 22, "code": "(fn [x] (loop [the-count 0 my-seq x]\n          (if (seq my-seq)\n            (recur (inc the-count) (rest my-seq))\n            the-count)))", "user": "5f1eebcee4b0f565ad998273"}, {"problem": 22, "code": "reduce (fn [n _] (inc n)) 0", "user": "5e44f5b1e4b01d43a70e8e8d"}, {"problem": 22, "code": "(partial reduce (fn [c e] (inc c)) 0)", "user": "5f2f5cdee4b033932238a67f"}, {"problem": 22, "code": "(fn count' [xs] (if-not (seq xs) 0 (inc (count' (next xs)))))", "user": "5f300f28e4b033932238a682"}, {"problem": 22, "code": "(fn [input] (reduce + (seq (map #(if (nil? %) 0 1) input))))", "user": "5f309144e4b0574c87022c23"}, {"problem": 22, "code": "(fn ff [l]\n  (if (empty? l)\n    0\n    (+ 1 (ff (rest l)))))", "user": "5f30296fe4b0574c87022c22"}, {"problem": 22, "code": "reduce (fn [res _val] (inc res)) 0", "user": "5f310542e4b0574c87022c25"}, {"problem": 22, "code": "(fn count-a-seq [s] \n  (reduce (fn [c _] (inc c)) 0 s))", "user": "5efdb9bae4b0cf489e8d7f02"}, {"problem": 22, "code": "(fn counting-sequence\n  [seq]\n  (loop [n 0 tempSeq seq]\n    (if (empty? tempSeq)\n      n\n      (recur (inc n) (rest tempSeq)))))", "user": "5f3103aee4b0574c87022c24"}, {"problem": 22, "code": "(fn namain [x] (if (empty? x) 0 (+ 1 (namain (rest x)))))", "user": "5f317ae4e4b0574c87022c2a"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %) )", "user": "5f329e63e4b0574c87022c32"}, {"problem": 22, "code": "(fn count-seq-v2 [col]\n  (loop [c col cnt 0]\n    (if (empty? c)\n      cnt\n      (recur (rest c) (inc cnt)))))", "user": "5f24671fe4b0f565ad998291"}, {"problem": 22, "code": "(fn [accum sequence] (if (empty? sequence) accum (recur (inc accum) (rest sequence)))) 0", "user": "5f184a46e4b091ba50b4dbd4"}, {"problem": 22, "code": "#(reduce (fn [accumulator _] (inc accumulator)) 0 %)", "user": "5f331015e4b0574c87022c37"}, {"problem": 22, "code": "(fn [x] ((fn doit [x c] (\n                         if (= nil (next x))\n                         c\n                         (doit (rest x) (inc c))\n                         )) x 1))", "user": "5f341a4be4b0574c87022c3d"}, {"problem": 22, "code": "#(reduce + (map (fn [one _] one) (repeat 1) %))", "user": "5f3413fbe4b0574c87022c3b"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5f35a1c6e4b0574c87022c46"}, {"problem": 22, "code": "(partial (fn foo [y x] (if (seq x) (do (foo (+ y 1) (rest x))) y)) 0)", "user": "5f3388ade4b0574c87022c38"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "5f3797cce4b0574c87022c5a"}, {"problem": 22, "code": "(fn cnt [col] (reduce (fn [a b] (inc a)) 0 col))", "user": "5f37839ee4b0574c87022c59"}, {"problem": 22, "code": "(fn [xs]\n  (loop [xs' xs\n         n 0]\n    (if (empty? xs')\n      n\n      (recur (rest xs') (+ n 1)))))", "user": "5f37da09e4b0574c87022c5e"}, {"problem": 22, "code": "#(reduce\n   (fn [c _] (inc c))\n   0 %)", "user": "5f38eaeae4b0574c87022c71"}, {"problem": 22, "code": "(fn [xs] (loop [c 0 f xs] (if (empty? f) c (recur (inc c) (rest f)))))", "user": "5e3248d9e4b05b4b0151623a"}, {"problem": 22, "code": "#(loop [elements % counter 0]\n  (if (empty? elements)\n    counter\n\t(recur (rest elements) (inc counter))))", "user": "5f393bd6e4b0574c87022c76"}, {"problem": 22, "code": "#(reduce (fn [acc x]\n           (inc acc))\n         0 %)", "user": "5f39bd49e4b0574c87022c7f"}, {"problem": 22, "code": "reduce (fn [x _] (inc x)) 0", "user": "5f3989cfe4b0574c87022c79"}, {"problem": 22, "code": "(fn f [xs]\n  (if (empty? xs)\n    0\n    (+ (f (rest xs)) 1)))", "user": "5ed61537e4b016b56eae05dc"}, {"problem": 22, "code": "(fn [sequ]\n  (apply + (map #(or 1 %) sequ)))", "user": "5f3ab5ece4b004f08c61c52a"}, {"problem": 22, "code": "#( inc(first (last (map-indexed vector (into [] %)))))", "user": "5f3a8493e4b004f08c61c527"}, {"problem": 22, "code": "(fn [col] (reduce (fn [current item] (if item (+ 1 current) 0)) 0 col))", "user": "5f274aeee4b0857314092c92"}, {"problem": 22, "code": "#(->> % (map (constantly 1)) (reduce +))", "user": "5f3ba47be4b004f08c61c53e"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5f3bc8dae4b004f08c61c541"}, {"problem": 22, "code": "(fn my-count\n  ([s] (my-count 0 s))\n  ([c s]\n   (if (> (alength (to-array s)) 0)\n     (recur (+ c 1) (rest s))\n     c)))", "user": "5f3ce2c7e4b004f08c61c548"}, {"problem": 22, "code": "(fn count2 [sofar xs]\n  (if (= [] (rest xs))\n    (+ sofar 1)\n    (count2 (+ sofar 1) (rest xs)))) 0", "user": "5f3adcf4e4b004f08c61c531"}, {"problem": 22, "code": "reduce (fn [x,y] (+ x 1)) 0", "user": "5f3abcc4e4b004f08c61c52b"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5ec22851e4b00a66d4a9529a"}, {"problem": 22, "code": ";;(fn [in_seq] (reduce + (for [e, in_seq] 1)))\n\n\n#(reduce (fn [acc, current] (inc acc)) 0 %)", "user": "5f3cd86ce4b004f08c61c547"}, {"problem": 22, "code": "(fn dosia [in]\n   (if (empty? in) 0 (+ 1 (dosia (rest in))))\n)", "user": "5f3e58dae4b004f08c61c555"}, {"problem": 22, "code": "(fn [vector] \n  (loop [vec vector num-of-elems 0]\n    (if (empty? vec)\n    num-of-elems\n    (recur (drop 1 vec) (inc num-of-elems)))))", "user": "5f3b54c0e4b004f08c61c53b"}, {"problem": 22, "code": "#(reduce (fn [a b] (+ a b)) (map (fn [_] 1) %))", "user": "5f3ddc71e4b004f08c61c551"}, {"problem": 22, "code": "(fn new-count\n  [s]\n  (letfn [(f [seq-s total] (if (= (first seq-s) nil)\n                             total\n                             (recur (rest seq-s) (inc total))))]\n    (f (seq s) 0)))", "user": "591ad160e4b09b4ee5954bdf"}, {"problem": 22, "code": "#( loop [sequ % counter 0] (if (empty? sequ) counter (recur (rest sequ) (inc counter))))", "user": "5f2c94b4e4b033932238a669"}, {"problem": 22, "code": "(fn [xs]\n  (loop [s xs\n         n 0]\n    (if (empty? s)\n        n\n      (recur (rest s) (inc n)))))", "user": "5f3f6570e4b004f08c61c563"}, {"problem": 22, "code": "(fn [l]\n   (loop [list l\n          cnt 0]\n     (if (empty? list)\n       cnt\n       (recur (rest list) (inc cnt)))))", "user": "5f3f2281e4b004f08c61c561"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5f3ca097e4b004f08c61c546"}, {"problem": 22, "code": "(fn [coll]\n  (loop [coll coll acc 0]\n    (if (empty? coll)\n      acc\n      (recur (rest coll) (+ acc 1)))))", "user": "5f38eecce4b0574c87022c72"}, {"problem": 22, "code": "(fn [sq]\n  (reduce (fn [a c] (inc a)) 0 sq))", "user": "5f3abd21e4b004f08c61c52c"}, {"problem": 22, "code": "reduce (fn [acc _] (inc acc)) 0", "user": "5f419985e4b0955706451fab"}, {"problem": 22, "code": "#(loop [coll % index 0]\n   (if (empty? coll)\n\t\tindex\n\t\t(recur (rest coll) (inc index))))", "user": "5f418f80e4b0955706451faa"}, {"problem": 22, "code": "#(reduce + (vals (frequencies %)))", "user": "5f32f69ae4b0574c87022c35"}, {"problem": 22, "code": "reduce (fn[c _] (inc c)) 0", "user": "5ef6fb5be4b09b61f08553c0"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5f429fdfe4b0955706451faf"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5f42baafe4b0955706451fb1"}, {"problem": 22, "code": "#(apply + (map (constantly 1) %))", "user": "5f4314e0e4b0955706451fb4"}, {"problem": 22, "code": "(partial reduce (fn [acc _] (inc acc)) 0)", "user": "5f431d32e4b0955706451fb5"}, {"problem": 22, "code": "(fn [lst] (reduce (fn [c _] (inc c)) 0 lst))", "user": "5f45211ae4b0955706451fbc"}, {"problem": 22, "code": "(partial reduce (fn [a b] (+ a 1)) 0)", "user": "5f462b23e4b0955706451fbe"}, {"problem": 22, "code": "#(reduce (fn [a _] (inc a)) 0 %)", "user": "5f36dc06e4b0574c87022c4c"}, {"problem": 22, "code": "(fn my-count [x] (if (empty? x) 0 (+ 1 (my-count (rest x)))))", "user": "5f4303cfe4b0955706451fb3"}, {"problem": 22, "code": "#(loop [x 0 y %]\n   (if (empty? y)\n     x\n    (recur (inc x) (next y))))", "user": "5f476a39e4b0102c7503392f"}, {"problem": 22, "code": "(fn [coll]\n  ((fn [coll n]\n  (if (empty? coll)\n    n\n    (recur (rest coll) (inc n)))) coll 0))", "user": "5f46ba59e4b0955706451fc2"}, {"problem": 22, "code": "#(reduce (fn [x _] (inc x)) 0 %)", "user": "5f46d2f9e4b0955706451fc6"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5f488c7de4b0102c7503393a"}, {"problem": 22, "code": "#((fn [col n] (if (empty? col) n (recur (rest col) (inc n)))) % 0)", "user": "5f49482ae4b0102c75033940"}, {"problem": 22, "code": "(fn length [l] \n  (if (empty? l) (do 0) (+ 1 (length (rest l)))))", "user": "5f4ebab5e4b0102c7503396a"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5f4f8f78e4b0102c75033973"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5f4fe1fae4b0a0bc16850a5c"}, {"problem": 22, "code": "(fn [s]\n  (reduce (fn [acc _] (inc acc)) 0 s))", "user": "5f520098e4b0a0bc16850a6c"}, {"problem": 22, "code": "#(reduce (fn [res x] (inc res)) 0 %)", "user": "5f51e141e4b0a0bc16850a6a"}, {"problem": 22, "code": "#(reduce + (map (fn [_] 1) %))", "user": "5f5358b7e4b0a0bc16850a77"}, {"problem": 22, "code": "(fn [stack]\n    (loop [x (vec stack) y 0]\n      (if (nil? (get x y))\n        y\n        (recur x (inc y)))))", "user": "53275758e4b09d4e7a9b54fc"}, {"problem": 22, "code": "reduce (fn [n _] (inc n)) 0", "user": "5f558a76e4b0a0bc16850a84"}, {"problem": 22, "code": "#(reduce (fn [acc _] (inc acc)) 0 %)", "user": "5f56c0cae4b0a0bc16850a8c"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "58d9fbf8e4b0a4d5acaab64e"}, {"problem": 22, "code": "(comp last map) (fn [i _] (inc i)) (range)", "user": "5f5745d2e4b0a0bc16850a8f"}, {"problem": 22, "code": "(fn [x]\n  (loop [i 0 y x]\n    (if (empty? y)\n      i\n      (recur (inc i) (rest y))\n    )\n  )\n)", "user": "5f574662e4b0a0bc16850a90"}, {"problem": 22, "code": "#(reduce (fn [acc _] (inc acc)) 0 %)", "user": "5f5a57dee4b0a0bc16850aa5"}, {"problem": 22, "code": "(fn [s]\n  (loop [sq s c 0] (\n     if (seq sq)\n        (recur (rest sq) (inc c))\n        c\n  ))\n)", "user": "5f58db95e4b0a0bc16850a9a"}, {"problem": 22, "code": "#(reduce (fn [acc _] (inc acc)) 0 (seq %))", "user": "5f5b9529e4b02876ed9fcfda"}, {"problem": 22, "code": "(fn [coll]\n  (loop [c coll\n         i 0]\n    (if (empty? c)\n      i\n      (recur (rest c) (inc i)))))", "user": "5dfb7f6de4b0a607a9a45cdc"}, {"problem": 22, "code": "(fn [col]\n  (-> col\n      (interleave (range))\n      last\n      inc))", "user": "5d5824fae4b02ba5928a681f"}, {"problem": 22, "code": "(fn [s]\n  (loop [s s, c 0]\n    (if (empty? s)\n      c\n      (recur (rest s) (inc c)))))", "user": "5f5df0bfe4b02876ed9fcfeb"}, {"problem": 22, "code": "(fn [xs] (reduce + (map (constantly 1) xs)))", "user": "55340a19e4b09218d5f44f97"}, {"problem": 22, "code": "#(loop [[first & rest] % c 0]\n                 (if (empty? rest)\n                   (inc c)\n                   (recur rest (inc c))))", "user": "5f5a2cc6e4b0a0bc16850aa4"}, {"problem": 22, "code": "(fn [lst]\n  (loop [lst lst\n         n 0]\n    (if (empty? lst)\n      n\n      (recur (rest lst)\n        (inc n)))))", "user": "5f4eb036e4b0102c75033969"}, {"problem": 22, "code": "(fn [xs]\n  ((fn [xs i]\n     (if (= xs '())\n       i\n       (recur (rest xs) (+ i 1))))\n   xs 0))", "user": "5f5e7158e4b02876ed9fcff0"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5f5f2eafe4b02876ed9fcff5"}, {"problem": 22, "code": "reduce (fn [counter _] (inc counter)) 0", "user": "5f5f9483e4b02876ed9fcff8"}, {"problem": 22, "code": "#(reduce (fn [a _b] (inc a)) 0 %)", "user": "5ea6fe98e4b00a66d4a951b2"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "5f60daafe4b02876ed9fcffe"}, {"problem": 22, "code": "#(loop [c 0\n        remaining %]\n   (if (empty? remaining)\n     c\n     (recur (inc c) (rest remaining))))", "user": "5f5e166ce4b02876ed9fcfed"}, {"problem": 22, "code": "#(reduce + (map (fn [y] 1) %))", "user": "5f631e11e4b02876ed9fd011"}, {"problem": 22, "code": "(fn count_seq [l] (if (= nil (first l)) 0 (+ 1 (count_seq (rest l)))))", "user": "5f63684be4b02876ed9fd012"}, {"problem": 22, "code": "(fn [x] (reduce + (map (constantly 1) x)))", "user": "5e70c16de4b085ba37836dae"}, {"problem": 22, "code": "(fn thecount [s]\n  (if (empty? s)\n    0\n    (+ 1 (thecount (rest s)))))", "user": "5f63d933e4b02876ed9fd018"}, {"problem": 22, "code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "5f5c845ee4b02876ed9fcfdf"}, {"problem": 22, "code": "reduce\n (fn [val _] (inc val))\n 0", "user": "5f621940e4b02876ed9fd009"}, {"problem": 22, "code": "(fn  [coll] (reduce (fn [acc _] (inc acc)) 0 coll))", "user": "5f42b77be4b0955706451fb0"}, {"problem": 22, "code": "(fn [sequence] (reduce (fn [a b] (inc a)) 0 sequence))", "user": "5d8570cae4b0915913b1d395"}, {"problem": 22, "code": ";#(reduce + (map (fn [x] 1) %))\nreduce (fn [c _] (inc c)) 0", "user": "5eb4e4abe4b00a66d4a95222"}, {"problem": 22, "code": "(fn my-count\n  ([s c]\n    (if (empty? s) c\n        (my-count  (rest s) (+ c 1))))\n  ([s]\n    (my-count s 0)))", "user": "5ee6d30ce4b029a2061bbe9c"}, {"problem": 22, "code": "(fn cou \n     ([xs] (cou xs 0))\n     ([xs n] \n      (if (empty? xs)\n          n\n          (cou (rest xs) (inc n)))))", "user": "5f6580e7e4b02876ed9fd023"}, {"problem": 22, "code": "(fn kk [coll]\n  (reduce (fn [a b] (inc a) ) 0 coll))", "user": "5f65bdfde4b02876ed9fd025"}, {"problem": 22, "code": "#(apply + (map (fn [x] 1) %))", "user": "5f660554e4b02876ed9fd027"}, {"problem": 22, "code": "(fn [seq] (loop [s seq res 0]\n            (if (first s) \n              (recur (rest s) (inc res))\n              res)))", "user": "5f5a62b4e4b0a0bc16850aa6"}, {"problem": 22, "code": "(fn [coll]\n  (reduce (fn [sum _] (+ sum 1)) 0 coll)\n  )", "user": "5f663bc0e4b02876ed9fd02d"}, {"problem": 22, "code": "reduce (fn [a b] (+ a 1)) 0", "user": "5f1d014ae4b0f565ad998267"}, {"problem": 22, "code": "(fn [xs] \n  (reduce (fn [acc _] (inc acc)) 0 xs))", "user": "5f6796d2e4b02876ed9fd036"}, {"problem": 22, "code": "(fn [s]\n  (reduce\n   (fn [c v]\n     (inc c))\n   0\n   s))", "user": "5f597522e4b0a0bc16850a9e"}, {"problem": 22, "code": "(fn c [lst] (if (seq lst) \n              (+ 1 (c (rest lst)))\n              0))", "user": "5f67c2f8e4b02876ed9fd039"}, {"problem": 22, "code": "(fn cnt [x] (if (not (seq x)) 0 (inc (cnt (rest x)))))", "user": "5f648ef1e4b02876ed9fd01b"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5f182845e4b091ba50b4dbd2"}, {"problem": 22, "code": "(fn [a] (reduce + (map (fn [x] 1) a)))", "user": "5f686436e4b02876ed9fd03c"}, {"problem": 22, "code": "(fn my-count [coll]\r\n  (if (empty? coll) 0\r\n      (reduce (fn [a elm] (inc a))\r\n              0\r\n              coll)))", "user": "5f5396d4e4b0a0bc16850a79"}, {"problem": 22, "code": "(fn mycount [arr]\n  (loop [arr arr cnt 0]\n    (if (empty? arr)\n      cnt\n      (recur (rest arr) (inc cnt)))))", "user": "5f6a266ae4b02876ed9fd042"}, {"problem": 22, "code": "(fn popstart [in]\n  (  (fn pop1 [in index]\n       (print in index)\n       (if (empty? (rest in))\n         (inc index)\n         (recur (rest in) (inc index))\n         )\n       ) (list* in )  0)\n  )", "user": "5f693778e4b02876ed9fd03f"}, {"problem": 22, "code": "; (fn my_count [xs]\n;  \t(if (empty? xs) 0 (inc (my_count (rest xs)))))\n(fn [xs] (reduce (fn [a x] (inc a)) 0 xs))", "user": "5eff6c0ee4b0cf489e8d7f11"}, {"problem": 22, "code": "(fn my-count\n  ([s]\n   (my-count s 0))\n  ([s c]\n   (if (empty? s)\n     c\n     (recur (rest s) (+ c 1)))))", "user": "5f6aef6de4b02876ed9fd04a"}, {"problem": 22, "code": "(fn  [cnt] \n  (loop [cnt1 cnt x 0] \n    (if (= cnt1 '())\n       x\n       (recur (rest cnt1) (inc x ))\n    )\n    \n  )\n  \n\n)", "user": "5f6af378e4b02876ed9fd04b"}, {"problem": 22, "code": "(fn [s]\n  (reduce (fn [c _] (inc c)) 0 s))", "user": "5f6a583ae4b02876ed9fd046"}, {"problem": 22, "code": "(fn [x]\n  (loop [ls x, counter 0]\n    (if (empty? ls)\n      counter\n      (recur (rest ls) (inc counter)))))", "user": "5f6b5caae4b02876ed9fd04f"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5f6b5d83e4b02876ed9fd050"}, {"problem": 22, "code": "(fn cnt\n   ([xs] (cnt xs 0))\n   ([xs c] (if (empty? (rest xs)) (inc c) (cnt (rest xs) (inc c)))))\n\n\n; reduce (fn [c _] (inc c)) 0", "user": "5f6c331ae4b02876ed9fd054"}, {"problem": 22, "code": "(fn [xs] (reduce (fn [acc _] (inc acc)) 0 xs))", "user": "5f6d4305e4b02876ed9fd05c"}, {"problem": 22, "code": "#(let [s (atom %)]\n \t(let [x (atom 0)]\n    \t(while (seq @s)\n          (swap! s rest)\n          (swap! x inc)\n         )\n         @x\n     )\n  )", "user": "5f6e23e6e4b02876ed9fd064"}, {"problem": 22, "code": "reduce (fn [previous item] (+ previous 1)) 0", "user": "5f6e5c58e4b02876ed9fd067"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "5f4b6433e4b0102c75033953"}, {"problem": 22, "code": "(fn [seq] (reduce (fn[c _] (inc c)) 0 seq))", "user": "5f6f8327e4b02876ed9fd075"}, {"problem": 22, "code": "#(apply +(map (fn [x] 1) %))", "user": "5f6b61ece4b02876ed9fd051"}, {"problem": 22, "code": "#(loop [n 0 c %] (if (empty? c) n (recur (inc n) (rest c))))", "user": "5f6caa19e4b02876ed9fd056"}, {"problem": 22, "code": "(fn numels\n  ([s] (numels s 0))\n  ([s n] (if (= (seq s) nil) n (numels (rest s) (+ 1 n))))\n)", "user": "5f70b752e4b02876ed9fd080"}, {"problem": 22, "code": "(fn [coll] (loop [[x & rest] coll cnt 1] (if (= nil rest) cnt (recur rest (inc cnt)))))", "user": "5f6cb2a5e4b02876ed9fd057"}, {"problem": 22, "code": "#(apply + (map (fn [x] 1) %))", "user": "5e52ad80e4b027a2e10ac0db"}, {"problem": 22, "code": "(fn my_count\n  [s]\n  (if (empty? s)\n    0\n    (+ 1 (my_count (rest s)))\n  )\n)", "user": "5f6b8222e4b02876ed9fd052"}, {"problem": 22, "code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "5f6e243fe4b02876ed9fd065"}, {"problem": 22, "code": "#((fn[x c] ( if (empty? (rest x)) (inc c) (recur (rest x) (inc c)) )) % 0)", "user": "5f714ae2e4b02876ed9fd084"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "5f6e576ae4b02876ed9fd066"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5f724f55e4b02876ed9fd089"}, {"problem": 22, "code": "(fn count2 [l]\n  (\n    (fn count3 [l n]\n      (if (empty? l)\n        n\n        (count3 (rest l) (+ n 1))\n      )\n    )\n    l 0\n  )\n)", "user": "5f7251b9e4b02876ed9fd08a"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5f72f144e4b02876ed9fd093"}, {"problem": 22, "code": "(fn kala [x]\n   (loop [i x\n          y 0]\n     (if (= (first i) nil)\n      y\n      (recur (rest i) (+ y 1)))))", "user": "5f520556e4b0a0bc16850a6d"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5f737e16e4b02876ed9fd09a"}, {"problem": 22, "code": "(fn\n  [maybe-seq]\n  (let [real-seq (seq maybe-seq)]\n    (reduce\n      (fn\n        [acc _]\n        (+ acc 1)\n      )\n     0\n      real-seq\n    )\n  )\n)", "user": "5f735915e4b02876ed9fd097"}, {"problem": 22, "code": "(fn[ls]\n  (loop [c 0 x ls]\n    (if-not (empty? x)\n        (recur (inc c) (rest x))\n      c\n      )\n    )\n  )", "user": "5f73000ce4b02876ed9fd094"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5f773336e4b02876ed9fd0b5"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5f727dd6e4b02876ed9fd090"}, {"problem": 22, "code": "(fn [coll]\n  (reduce + (map (constantly 1) coll)))", "user": "5f388489e4b0574c87022c69"}, {"problem": 22, "code": "(fn [lst]\n    (loop [length 0 temp lst]\n        (if (empty? temp)\n            length\n            (recur (inc length) (rest temp)))))", "user": "5f74de11e4b02876ed9fd0a5"}, {"problem": 22, "code": "reduce (fn [res _] (inc res)) 0", "user": "5f77a0c1e4b02876ed9fd0bb"}, {"problem": 22, "code": "#(loop [lst %\n         size 0]\n        (if (empty? lst)\n          size\n          (recur (rest lst) (inc size))))", "user": "5f77d470e4b02876ed9fd0be"}, {"problem": 22, "code": "(fn [x] (inc(first (last (map-indexed vector x)))))", "user": "5f77890ae4b02876ed9fd0b9"}, {"problem": 22, "code": "(fn [s]\n  (loop [length 0\n         seq s]\n    (if (empty? seq)\n      length\n      (recur (inc length) (rest seq)))))", "user": "5f79bff2e4b02876ed9fd0ca"}, {"problem": 22, "code": "#((fn ct [q n] (if (= q '()) n (ct (rest q) (+ n 1)))) % 0)", "user": "5f79cb16e4b02876ed9fd0cb"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5f727bd1e4b02876ed9fd08c"}, {"problem": 22, "code": "(fn [l]\n  (if (empty? l) \n    0\n    (loop [l2 l\n           acc 0]\n      (if (empty? l2)\n        acc\n        (recur (rest l2) (inc acc))))))", "user": "5f7603a8e4b02876ed9fd0ad"}, {"problem": 22, "code": "(fn [collection] (apply + (map (fn [element] (if element 1 0)) collection)))", "user": "5f757c1ce4b02876ed9fd0aa"}, {"problem": 22, "code": "(fn[lst] (loop [lst lst\n                 cnt 0]\n              (if (empty? lst)\n              cnt\n              (recur (rest lst) (inc cnt)))))", "user": "5f727d2fe4b02876ed9fd08f"}, {"problem": 22, "code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "5f79ec52e4b02876ed9fd0cc"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5f77b99fe4b02876ed9fd0bc"}, {"problem": 22, "code": "(fn [list] (reduce (fn [x y] (+ 1 x)) 0 list))", "user": "5f7ac592e4b02876ed9fd0d2"}, {"problem": 22, "code": "#(reduce (fn [acc e] (inc acc)) 0 %)", "user": "5f74ed71e4b02876ed9fd0a6"}, {"problem": 22, "code": "(fn my-count [coll]\n  (loop [cnt 0 remaining coll]\n       (if (empty? remaining)\n         cnt\n         (recur (inc cnt) (rest remaining)))))", "user": "5f7aed9de4b02876ed9fd0d4"}, {"problem": 22, "code": "(comp (fn elem [[xs d]] (if (empty? xs) d (elem [(rest xs) (inc d)]))) (fn [x]  [x 0]))", "user": "5f6adf5ee4b02876ed9fd049"}, {"problem": 22, "code": "(fn [coll] (reduce + (map (constantly 1) coll)))", "user": "5f63cde9e4b02876ed9fd015"}, {"problem": 22, "code": "#(reduce (fn [acc, itm] (inc acc)) 0 %1)", "user": "5bc60a65e4b07a9b28b10082"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5f7e91c8e4b0c071e6c840d8"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "5d0395c5e4b0cc9c915881c6"}, {"problem": 22, "code": "(fn cnt [seq]\n  ((fn cr [seq n]\n    (if (empty? seq)\n      n\n      (cr (rest seq) (+ n 1)))) seq 0))", "user": "5f80aca4e4b0c071e6c840e8"}, {"problem": 22, "code": "(fn count1 [s]\n   (loop [iter 0 flag s]\n     ;;(println \"iter: \" iter \"flag:\" flag)\n     (if (not= (first flag) nil)\n       (recur (inc iter) (rest flag))\n       iter)\n     ))", "user": "5f815db6e4b0c071e6c840f0"}, {"problem": 22, "code": "(fn [sequencia]\n  (reduce (fn [stack _] (+ stack 1)) 0 sequencia))", "user": "5f7981d9e4b02876ed9fd0c8"}, {"problem": 22, "code": "#(loop [i 0 lst %] (if (empty? lst) i (recur (inc i) (rest lst))))", "user": "5f727cb0e4b02876ed9fd08e"}, {"problem": 22, "code": "(fn my-count [xs] \n  (loop [cnt 0 xs xs]\n    (if (empty? xs) \n      cnt\n      (recur (inc cnt) (rest xs)))))", "user": "5f82cfcce4b0c071e6c840fb"}, {"problem": 22, "code": "(fn [something] (reduce + (map (fn [anything] 1) something)))", "user": "5f81cd62e4b0c071e6c840f4"}, {"problem": 22, "code": "reduce (fn[ac _](inc ac)) 0", "user": "5f838122e4b01aacbe7a2715"}, {"problem": 22, "code": "#(if (empty? %2) \n   %1\n   (recur (inc %1) (rest %2))) \n0", "user": "5f81de6ce4b0c071e6c840f5"}, {"problem": 22, "code": "#(reduce (fn [acc _] (inc acc)) 0 %)", "user": "5f791f1ae4b02876ed9fd0c4"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5f810e97e4b0c071e6c840ed"}, {"problem": 22, "code": "(fn seq-count [coll]\n   (if (= coll '())\n     0\n     (+ (seq-count (rest coll)) 1)))", "user": "5f82609ae4b0c071e6c840f9"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5f85e160e4b0ad2c9bc62a43"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5f84f0f5e4b0375e81f54e78"}, {"problem": 22, "code": "(fn [x] \n  (loop [lst x\n         cnt 0]\n    (if (empty? lst)\n        cnt\n        (recur (rest lst) (+ cnt 1))\n   )    \n  )\n)", "user": "5f837b30e4b01aacbe7a2714"}, {"problem": 22, "code": "(fn [coll]\n        (reduce + (map (constantly 1)coll)))", "user": "5f737899e4b02876ed9fd099"}, {"problem": 22, "code": "#(loop [f 0 r %]\n  (if (empty? r) f (recur (inc f) (rest r))))", "user": "5f727be9e4b02876ed9fd08d"}, {"problem": 22, "code": "#(reduce (fn [acc e] (inc acc)) 0 %)", "user": "5f792d48e4b02876ed9fd0c5"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5f80ea23e4b0c071e6c840eb"}, {"problem": 22, "code": "(fn [lst] (reduce (fn [r v] (inc r)) 0 lst))", "user": "5f86a98be4b0649ffcda4caa"}, {"problem": 22, "code": "reduce (fn [x & rest] (inc x)) 0", "user": "5f86f5a3e4b0649ffcda4cad"}, {"problem": 22, "code": "(fn [x] (reduce (fn [c _] (inc c)) 0 x))", "user": "5f7fece9e4b0c071e6c840e3"}, {"problem": 22, "code": "(fn [lst]\n  (loop [i 0\n         lst lst]\n    (if (empty? lst)\n      i\n      (recur (inc i) (drop 1 lst))\n    )))", "user": "5f84f110e4b0375e81f54e79"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5f8497dce4b0375e81f54e74"}, {"problem": 22, "code": "(fn [x] (reduce (fn [i _] (inc i))0 x))", "user": "5f875a0ae4b020286baa5e94"}, {"problem": 22, "code": "(fn [secu] \n(loop [s secu, d 0] \n(if (empty? s)\n    d\n    (recur (rest s) (inc d)))))", "user": "5ef4fca7e4b07c55ae4a0546"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5f87e757e4b0169f6814c40f"}, {"problem": 22, "code": "(fn count-a-seq [lat]\n  (reduce (fn [x y] (+ x 1)) 0 lat))", "user": "5f77568de4b02876ed9fd0b6"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5f8361bae4b01aacbe7a2712"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5f8795d4e4b020286baa5e96"}, {"problem": 22, "code": "(fn [n] (loop [cnt 0 s n] (if (empty? s) cnt (recur (inc cnt) (rest s)))))", "user": "5f882b89e4b0169f6814c411"}, {"problem": 22, "code": "(fn countElements [x] \n  (reduce (fn [x y]\n            (inc x))\n          0\n          x)\n  )", "user": "5f8330b8e4b01aacbe7a270f"}, {"problem": 22, "code": "(partial reduce (fn [a b] (inc a)) 0)", "user": "5edd05bfe4b0c7845d86b0f3"}, {"problem": 22, "code": "(fn my-count [l] (if (empty? l)\n                   0\n                   (+ 1 (my-count (rest l)))))", "user": "5f8a7bafe4b0715f5002d749"}, {"problem": 22, "code": "(fn [s] (loop [s s\n               n 0]\n          (if (empty? s) n (recur (rest s) (inc n)))))", "user": "5f8b06afe4b0715f5002d74a"}, {"problem": 22, "code": "#(loop [r % i 0]\n   (if (not (seq r)) i (recur (rest r) (inc i))))", "user": "5f7ea492e4b0c071e6c840d9"}, {"problem": 22, "code": "(fn my-c [s]\n  (let [q (seq s)]\n    (+ (.lastIndexOf q (last q)) 1)))", "user": "5f816cc6e4b0c071e6c840f1"}, {"problem": 22, "code": "#(->> % frequencies vals (apply +))", "user": "5f8e865fe4b0715f5002d76d"}, {"problem": 22, "code": "(fn [col]\n  (loop [cnt 0\n         lst col]\n    (if (not (empty? lst))\n      (recur (inc cnt) (rest lst))\n      cnt)))", "user": "5e1c24f4e4b0dc959400852d"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "5f8fe45ae4b0715f5002d78d"}, {"problem": 22, "code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "5f90787de4b0715f5002d795"}, {"problem": 22, "code": "#(reduce\n  (fn [x _] (inc x))\n  0 %)", "user": "5f8d76c3e4b0715f5002d758"}, {"problem": 22, "code": "(fn [coll]\n  (loop [n 0\n         xs coll]\n    (if (empty? xs)\n      n\n      (recur (inc n) (rest xs)))))", "user": "5f93529ae4b0715f5002d7bc"}, {"problem": 22, "code": "(fn count-em\n  [seqn]\n  (if (nil? (next seqn))\n    1\n    (+ 1 (count-em (rest seqn)))))", "user": "5ed6e0eee4b016b56eae05e4"}, {"problem": 22, "code": "(fn [s]\n  (loop [remaining s\n         c 0]\n    (if (empty? remaining)\n      c\n      (recur (rest remaining) (inc c)))))", "user": "5f6f461ae4b02876ed9fd06f"}, {"problem": 22, "code": "#(loop [s % c 0]\n   (if (not (first s))\n     c\n     (recur (rest s) (+ c 1))))", "user": "5f9491cbe4b0715f5002d7bf"}, {"problem": 22, "code": "reduce (fn [x y] (inc x)) 0", "user": "5f949b97e4b0715f5002d7c1"}, {"problem": 22, "code": "(fn count-elements [sum lst]\n  (if (empty? lst)\n    sum\n    (count-elements (inc sum) (drop 1 lst) ))) 0", "user": "5f9567cce4b0715f5002d7c7"}, {"problem": 22, "code": "(fn p22\n  ([l] (p22 l 1))\n  ([l i]\n   (let [n (next l)]\n     (if n (recur n (inc i)) i))))", "user": "5f968f4ee4b0715f5002d7d2"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5f95dc6ee4b0715f5002d7cc"}, {"problem": 22, "code": "#(reduce (fn [x y] (+ x 1)) 0 %)", "user": "5f97eff1e4b0715f5002d7f9"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5f998847e4b0715f5002d813"}, {"problem": 22, "code": "(fn [coll]\n  (reduce +\n          (map (constantly 1) coll)))", "user": "5f8e2a08e4b0715f5002d767"}, {"problem": 22, "code": "(fn [s]\n      (loop [xs s\n             i 0]\n        (if xs (recur (next xs)\n                      (inc i))\n                i)))", "user": "5f985283e4b0715f5002d800"}, {"problem": 22, "code": "(fn\n  [coll]\n  (loop [[elOne & remaining] coll\n         x 0]\n    (if (empty? remaining)\n      (+ x 1)\n      (recur remaining (+ x 1)))))", "user": "5f9c3f63e4b0715f5002d820"}, {"problem": 22, "code": "#(loop [c 0 x %] (if (empty? x) c (recur (inc c) (rest x))))", "user": "5f3567d6e4b0574c87022c44"}, {"problem": 22, "code": "(fn cnt [i s] (if (= (first s) nil) i (cnt (+ i 1) (rest s)))) 0", "user": "5f9dd3fee4b0715f5002d831"}, {"problem": 22, "code": "#(\n      loop \n      [array % len 0]\n      (if (empty? array)\n        len\n        (recur (rest array) (inc len)))\n      )", "user": "5f9d36e1e4b0715f5002d82e"}, {"problem": 22, "code": "#(reduce (fn [x _] (inc x)) 0 %)", "user": "5f9df1d8e4b0715f5002d832"}, {"problem": 22, "code": "#(reduce (fn [acc coll'] (inc acc)) 0 %)", "user": "5f9f032fe4b0715f5002d839"}, {"problem": 22, "code": "(fn cc [i] (if (empty? i) 0 (+ 1 (cc (rest i)))))", "user": "5f9c8718e4b0715f5002d824"}, {"problem": 22, "code": "#(loop [s % n 0](println s n)\n    (if (seq s)\n      (recur (rest s) (inc n))\n      n))", "user": "5f9c4113e4b0715f5002d821"}, {"problem": 22, "code": "reduce (fn [cc _] (inc cc)) 0", "user": "5f9816c9e4b0715f5002d7fa"}, {"problem": 22, "code": "(fn [lat]\n  (loop [l lat\n         cnt 0]\n    (if (empty? l)\n      cnt\n      (recur (rest l)\n             (inc cnt)))))", "user": "5f90aeefe4b0715f5002d799"}, {"problem": 22, "code": "#(reduce + (map (fn [_] 1) %))", "user": "5fa17538e4b0f0ebd91b77e3"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5fa2735de4b0f0ebd91b77ee"}, {"problem": 22, "code": "reduce (fn [x y] (+ x 1)) 0", "user": "5fa28e2be4b0f0ebd91b77f0"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5fa06dc5e4b0715f5002d849"}, {"problem": 22, "code": "#(loop [s % cnt 0]\n   (if (empty? s)\n     cnt\n     (recur (rest s) (inc cnt))))", "user": "5fa2a3afe4b0f0ebd91b77f1"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5fa2a3d6e4b0f0ebd91b77f2"}, {"problem": 22, "code": "reduce #(+ (if  %2 1 0) %) 0", "user": "5fa2a459e4b0f0ebd91b77f3"}, {"problem": 22, "code": "(fn [xs] ( apply + (map (constantly 1) xs)))", "user": "5fa416ece4b0f0ebd91b7803"}, {"problem": 22, "code": "#(loop [x 0\n        coll %]\n    (if (not (first coll))\n      x\n      (recur (inc x) (rest coll))))", "user": "5d965c73e4b0d3f9b434ad33"}, {"problem": 22, "code": "(fn [coll]\n  (reduce (fn [acc c]\n            (inc acc)) 0 coll))", "user": "5fa52497e4b0fa27300f3dbf"}, {"problem": 22, "code": "reduce (fn [v _] (inc v)) 0", "user": "5fa5b72ee4b0fa27300f3dca"}, {"problem": 22, "code": "(fn cownt \n  ([l] (cownt l 0))\n  ([l n] (if (empty? l) n (cownt (rest l) (+ n 1)))))", "user": "5fa5a6b1e4b0fa27300f3dc8"}, {"problem": 22, "code": "(partial (fn itung [x coll]\n    (if ( = coll []) x (itung (inc x) (rest coll)))) 0)\n\n; (fn [coll] (reduce + (map (constantly 1) coll)))", "user": "5fa358a1e4b0f0ebd91b77fd"}, {"problem": 22, "code": "(fn [li] (reduce (fn [total _] (inc total)) 0 li))", "user": "5fa7c574e4b0fa27300f3ddf"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5fa56352e4b0fa27300f3dc2"}, {"problem": 22, "code": "(fn [s] (reduce (fn [c _] (inc c)) 0 s))", "user": "5fa80c01e4b0fa27300f3de2"}, {"problem": 22, "code": "(fn [coll] (reduce (fn [acc v] (inc acc)) 0 coll))", "user": "5fa74b82e4b0fa27300f3dda"}, {"problem": 22, "code": "(fn cnt [xs]\n  (if (empty? xs)\n    0\n    (inc (cnt (rest xs)))))", "user": "5fa8424ce4b0fa27300f3de5"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5fa58531e4b0fa27300f3dc6"}, {"problem": 22, "code": "(fn [lat]\n  (reduce (fn [x y] (+ x 1)) 0 lat))", "user": "5f6b35c3e4b02876ed9fd04d"}, {"problem": 22, "code": "#(reduce (fn [x y] (+ 1 x)) 0 %)", "user": "5fa97b85e4b0fa27300f3dee"}, {"problem": 22, "code": "(fn [x] (reduce (fn [sum _] (inc sum)) 0 x) )", "user": "5faaab00e4b0fa27300f3dff"}, {"problem": 22, "code": "(fn [xs] (reduce (fn [a x] (inc a)) 0 xs))", "user": "573a0ecce4b0cd1946bd1088"}, {"problem": 22, "code": "(fn \n  [l]\n  (reduce (fn [a b] (+ a 1)) 0 l))", "user": "5f6dee74e4b02876ed9fd05f"}, {"problem": 22, "code": "reduce (fn [x _] (inc x)) 0", "user": "5b94c2aee4b0c0b3ffbd4a59"}, {"problem": 22, "code": "(fn contar-seq [s]\n  (loop [s s n 0]\n    (if (empty? s)\n      n\n      (recur (rest s) (inc n))))\n  )", "user": "5f974321e4b0715f5002d7f3"}, {"problem": 22, "code": "#(alength (to-array %))", "user": "5f96d6c1e4b0715f5002d7e8"}, {"problem": 22, "code": "(fn [x] (reduce (fn[acc, curr] (+ acc 1)) 0 x))", "user": "5fac50f4e4b08cb800c85ae5"}, {"problem": 22, "code": "reduce (fn [x y] (inc x)) 0", "user": "5fa96ddbe4b0fa27300f3dec"}, {"problem": 22, "code": "(fn myCount [xs] \n  (if (empty? xs) \n    0 \n    (+ 1 (myCount (rest xs) )) ) )", "user": "5fa2b45ce4b0f0ebd91b77f5"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5face7fce4b08cb800c85ae9"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5facfb48e4b08cb800c85aea"}, {"problem": 22, "code": "#(loop [iter 1]\n    (if (= (take iter %) (take (- iter 1) %))\n      (- iter 1)\n      (recur (inc iter))))", "user": "5fabe67be4b08cb800c85ade"}, {"problem": 22, "code": "(fn [xs]\n  (reduce (fn [x _] (+ 1 x)) 0 xs))", "user": "54f5e9e2e4b0f2f3c5226e9d"}, {"problem": 22, "code": "(fn Count [x]\n        ( if (not (= x []))\n                (+ (Count (vec (rest x))) 1)\n                0\n        )\n)", "user": "5fabcb87e4b08cb800c85adc"}, {"problem": 22, "code": "(fn [coll] (reduce +(map (fn [x] 1) coll)))", "user": "5fada7cce4b08cb800c85af5"}, {"problem": 22, "code": "#(reduce (fn [result v] (+ result 1)) (map (constantly 1) %1))", "user": "5fae3d8ae4b08cb800c85afa"}, {"problem": 22, "code": "(fn [s]\n  (reduce (fn [c _] (inc c)) 0 s))", "user": "5f9026d8e4b0715f5002d78f"}, {"problem": 22, "code": "#(loop [lst %\n        tally 0]\n   (if (empty? lst)\n     tally\n     (recur (rest lst) (+ 1 tally))))", "user": "5fb082cfe4b08cb800c85b14"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "5fafa44ee4b08cb800c85b0e"}, {"problem": 22, "code": "(fn f\n  ([lst] (f lst 0))\n  ([lst cnt] \n   (if (empty? lst)\n     cnt\n     (recur (rest lst) (inc cnt)))))", "user": "5fad8efee4b08cb800c85af3"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5fb4331be4b08cb800c85b3f"}, {"problem": 22, "code": "#(loop [restv (vec %1) \n        c 0] \n   (if (nil? (first restv)) \n     c\n     (recur (rest restv) (+ c 1))))", "user": "5fb3a096e4b08cb800c85b35"}, {"problem": 22, "code": "#(reduce (fn [acc n] (inc acc)) 0 %)", "user": "5fb3bd04e4b08cb800c85b3a"}, {"problem": 22, "code": "(fn count-a-sequence\n  [sequence]\n  (if (empty? sequence)\n    0\n    (+ (count-a-sequence (rest sequence)) 1)))", "user": "5f898166e4b0169f6814c41a"}, {"problem": 22, "code": "(fn [coll]\n  ((fn ite-ite [coll acc]\n    (if (empty? coll)\n      acc\n      (ite-ite (rest coll) (inc acc)))) coll 0))", "user": "5fb544f6e4b08cb800c85b4e"}, {"problem": 22, "code": "(fn cnt ([l] (cnt l 0)) ([l c] (if (= l []) c (cnt (rest l) (inc c)))))", "user": "5fab7ea6e4b08cb800c85ad8"}, {"problem": 22, "code": "reduce (fn [acc _] (inc acc)) 0", "user": "5faa75c1e4b0fa27300f3dfa"}, {"problem": 22, "code": "(comp (partial reduce +) (partial map (constantly 1)))", "user": "5fb8c14ae4b03f550f448221"}, {"problem": 22, "code": "(fn cme [xs]\n    (if (empty? xs)\n      0\n      (+ 1 (cme (rest xs) ))))", "user": "5fa6db67e4b0fa27300f3dd2"}, {"problem": 22, "code": "#(loop [s % n 0]\n   (cond \n    (empty? s) n\n    :else (recur (rest s) (inc n))))", "user": "5f5aee4fe4b0a0bc16850aaa"}, {"problem": 22, "code": "#(+ 1 (first (last (map-indexed list %))))", "user": "5fba5692e4b03f550f448230"}, {"problem": 22, "code": "(fn [xs]\n   (loop [cnt 0\n          xss xs]\n     (if (empty? xss)\n       cnt\n       (recur (inc cnt) (rest xss)))))", "user": "5fba8fe9e4b03f550f448231"}, {"problem": 22, "code": "#(reduce (fn [x y] (+ 1 x)) 0 %)", "user": "5fbac277e4b03f550f448232"}, {"problem": 22, "code": "#(reduce + (vals (frequencies %)))", "user": "5f969090e4b0715f5002d7d5"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5f96fbc7e4b0715f5002d7ec"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5f96909be4b0715f5002d7d9"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5f969092e4b0715f5002d7d6"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "57b758f4e4b0fbc9809a27cf"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5f9f744fe4b0715f5002d841"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5faca2e4e4b08cb800c85ae8"}, {"problem": 22, "code": "(fn dd [s] (if (= (first s) nil) 0 (+ 1 (dd (rest s)))))", "user": "5dbc227be4b09f47823971b0"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5fab003de4b08cb800c85ad1"}, {"problem": 22, "code": "(fn[s] (apply + (map (constantly 1) s)))", "user": "5fae5441e4b08cb800c85afb"}, {"problem": 22, "code": "#(loop [n 0, xs %] (if (seq xs) (recur (inc n) (rest xs)) n))", "user": "5fba282de4b03f550f44822d"}, {"problem": 22, "code": "(fn my-count [coll]\n    (if-not (empty? coll)\n      (inc (my-count (rest coll)))\n      0))", "user": "5fb9075ee4b03f550f448224"}, {"problem": 22, "code": "#(->> % (map (constantly 1)) (reduce +))", "user": "5fbd6a64e4b03f550f448241"}, {"problem": 22, "code": "#(.length (vec %1))", "user": "5fbc8747e4b03f550f448239"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5fbe40bce4b03f550f448246"}, {"problem": 22, "code": "(fn [se] (reduce (fn [acc _] (inc acc)) 0 se))", "user": "5fbf6fe7e4b0ad6fc3476147"}, {"problem": 22, "code": ";(fn count-a-seq [lat]\n;(reduce (fn [x y] (+ x 1)) 0 lat))\n\n(fn[n](reduce (fn [x y] (+ x 1)) 0 n))", "user": "5fbf8a86e4b0edf42a5593bf"}, {"problem": 22, "code": "(fn my-count [coll]\n  (reduce (fn [res _] (inc res) ) 0 coll))", "user": "5a4f11e5e4b05d388ecb6bc6"}, {"problem": 22, "code": "(fn [coll] (reduce (fn [x y] (inc x)) 0 coll))", "user": "5fb2eac0e4b08cb800c85b2f"}, {"problem": 22, "code": "(fn [list]\n      (reduce (fn [x y] (+ 1 x)) 0 list))", "user": "5fbf03c2e4b03f550f44824c"}, {"problem": 22, "code": "#(loop [l % c 1] (if (next l) (recur (next l) (inc c)) c))", "user": "5fc241c1e4b0edf42a5593d1"}, {"problem": 22, "code": "(fn [coll]\n           (reduce (fn [acc v] (+ acc 1)) 0 (seq coll)))", "user": "55808f8ee4b05c286339e0ee"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5eb61e63e4b00a66d4a95231"}, {"problem": 22, "code": "(fn my-count [data & n]\n  (if (empty? data)\n    0)\n  (if (= n nil)\n    (my-count data 1)\n    (if (next data)\n      (my-count (next data) (inc (first n)))\n      (first n)\n    )\n  )\n)", "user": "5fc3850de4b0db0e95a5f3fd"}, {"problem": 22, "code": "(fn [s]\n(apply + (map inc (map #(* 0 %) (map int (map first (map str s)))))))", "user": "5fc4d277e4b06ffabd1ef72a"}, {"problem": 22, "code": "(fn [coll] (reduce #(+ %1 %2) (map (fn [x] 1) coll)))", "user": "5fc51d88e4b0ad564c76812a"}, {"problem": 22, "code": "reduce (fn [cc col] (inc cc)) 0", "user": "5fc5c303e4b02c825b0c8c1a"}, {"problem": 22, "code": "(fn [lst]\n  (reduce + (map (fn [x] 1) lst)))", "user": "5fc5279ce4b0d6fcd95b7c68"}, {"problem": 22, "code": "(fn [sq] (reduce #(inc (first %&)) 0 sq))", "user": "5fc860b1e4b049d89c09cd94"}, {"problem": 22, "code": "(fn count-seq [s]\n  (reduce (fn [x y] (+ x 1)) 0 s))", "user": "5ee685ffe4b029a2061bbe99"}, {"problem": 22, "code": "reduce (fn [c x] (inc c)) 0", "user": "5fc9d967e4b0689391cc77ce"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5fc61b45e4b06010e5ea651a"}, {"problem": 22, "code": "(fn c [x] (if (empty? x) 0 (+ 1 (c (rest x)))))", "user": "54d7e277e4b0a52adc2e2031"}, {"problem": 22, "code": "(fn [s]\n        (apply + (map (fn [k] 1) s)))", "user": "5fcbf407e4b07e53c2f3eff0"}, {"problem": 22, "code": "(fn [xs] (reduce (fn [r x] (inc r)) 0 xs))", "user": "5fcc1ed3e4b07e53c2f3eff1"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5fcc2d28e4b07e53c2f3eff2"}, {"problem": 22, "code": "reduce (fn[x _](inc x)) 0", "user": "5fcce3b1e4b07e53c2f3eff6"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5fcd15d6e4b07e53c2f3eff7"}, {"problem": 22, "code": "(fn [sq] (apply + (map #({true 1 false 0} (not (nil? %))) sq)))", "user": "5fcd4824e4b07e53c2f3eff9"}, {"problem": 22, "code": "reduce (fn [cc _] (inc cc)) 0", "user": "5fcdb9f5e4b07e53c2f3effe"}, {"problem": 22, "code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "5fd0b5a0e4b07e53c2f3f027"}, {"problem": 22, "code": "#(reduce (fn [acc ex] (inc acc)) 0 %)", "user": "5fd12b42e4b07e53c2f3f02f"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5fd19eede4b07e53c2f3f03b"}, {"problem": 22, "code": "(fn [x]\n  (loop [y 0\n         x x]\n    (if (empty? x)\n      y\n      (recur (inc y)\n             (next x)))))", "user": "5b21ad60e4b03cfeda66ed54"}, {"problem": 22, "code": "(fn [l] (reduce (fn [a x] (inc a) ) 0 l))", "user": "5fd69363e4b05ac5b16ea10e"}, {"problem": 22, "code": "#(reduce (fn [acc e] (inc acc)) 0 %)", "user": "5fd6f12be4b05ac5b16ea110"}, {"problem": 22, "code": "(fn [seq] \n  (reduce \n   (fn [res el] (inc res))\n   0\n   seq)\n  )", "user": "5f3ee0d9e4b004f08c61c55c"}, {"problem": 22, "code": "(fn [l]\n  (loop [lst l c 0]\n    (cond\n      (empty? lst) c\n      :else (recur (rest lst) (inc c)))))", "user": "5fb8fe30e4b03f550f448223"}, {"problem": 22, "code": "(fn [coll] (reduce (fn [acc curr] (inc acc)) 0 coll))", "user": "5b2d1c1de4b025bcb146f2c0"}, {"problem": 22, "code": "(fn my-count [col]\n  (loop [counter 0\n         xs (seq col)]\n    (if xs\n      (recur (inc counter) (next xs))\n      counter)))", "user": "558ffb4be4b0277789237667"}, {"problem": 22, "code": "(fn [xs]\n  (let [aux_f (fn [ys cnt] \n                (if (= ys [])\n                  cnt\n                  (recur (rest ys) (+ cnt 1))))]\n    (aux_f xs 0)))", "user": "5fd9bf47e4b05ac5b16ea125"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "5fda0f46e4b05ac5b16ea126"}, {"problem": 22, "code": "#(->> %\n      (keep-indexed (fn [i _] i))\n      last\n      ((fnil inc -1)))", "user": "5fd8bcb3e4b05ac5b16ea11b"}, {"problem": 22, "code": "(fn size-mine\n   ([coll]\n    (size-mine coll 0))\n   ([coll acum]\n    (let [parsed-coll (vec coll)]\n      (if (empty? parsed-coll)\n        acum\n        (recur (rest parsed-coll) (inc acum))))))", "user": "5fdba25ae4b05ac5b16ea135"}, {"problem": 22, "code": "(fn fu [x] (let [y (seq x)]\n             (if \n                (empty?  x) 0 \n                (+ 1 (fu (rest x)))\n                )\n            )\n    )", "user": "5fdc04d8e4b05ac5b16ea138"}, {"problem": 22, "code": "#(reduce (fn [acc item] (inc acc)) 0 %)", "user": "5fdbde92e4b05ac5b16ea137"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5fd361f2e4b07e53c2f3f04e"}, {"problem": 22, "code": "(fn cntseq [x] \n  (if (empty? x) 0 \n    (inc \n     (cntseq (rest x))\n    ) \n  )\n)", "user": "5fdb51fae4b05ac5b16ea12f"}, {"problem": 22, "code": "(fn [col] (apply + (map (fn [x] 1) col)))", "user": "5fdc6ad4e4b05ac5b16ea13a"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5f96fa49e4b0715f5002d7e9"}, {"problem": 22, "code": "#(loop [iteration 0 remaining %1]\n  (if (empty? remaining)\n    iteration\n    (recur (inc iteration) (rest remaining))))", "user": "5fe1589ee4b05ac5b16ea16c"}, {"problem": 22, "code": "#(reduce (fn [acc e] (inc acc)) 0 %)", "user": "5fe18014e4b05ac5b16ea16d"}, {"problem": 22, "code": "(partial reduce (fn [i _] (inc i)) 0)", "user": "5fe0d4d4e4b05ac5b16ea164"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %1))", "user": "5fbb010ae4b03f550f448233"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5fe362d9e4b05ac5b16ea179"}, {"problem": 22, "code": "(fn [l]\n  (reduce (fn [acc _] (inc acc)) 0 l))", "user": "5fe5a64de4b05ac5b16ea187"}, {"problem": 22, "code": "(fn [x] (apply +  (map #(if (= %1 %1) 1 0) x)))", "user": "5fdd15f7e4b05ac5b16ea141"}, {"problem": 22, "code": "(fn [coll]\n  (loop\n    [n-coll coll\n     c 0]\n    (if (empty? n-coll)\n      c\n      (let [[f & r] n-coll]\n        (recur r\n               (inc c))))))", "user": "5f1f2b95e4b0f565ad99827a"}, {"problem": 22, "code": "reduce (fn [cnt _] (inc cnt)) 0", "user": "5fd2e391e4b07e53c2f3f049"}, {"problem": 22, "code": "(fn enth\n  ([xs] (enth xs 0))\n  ([xs n]\n    (if (empty? xs)\n      n\n      (enth (rest xs) (inc n)))))", "user": "5fe7a56ee4b05ac5b16ea190"}, {"problem": 22, "code": "(fn [coll] (loop [remainder coll\n                  result 0]\n             (if (empty? remainder)\n               result\n               (recur (rest remainder) (inc result)))))", "user": "5fe25678e4b05ac5b16ea175"}, {"problem": 22, "code": "(fn myCount [coll]\n  (if (empty? coll)\n    0\n    (+ 1 (myCount (drop 1 coll)))\n    ))", "user": "5fe85417e4b05ac5b16ea194"}, {"problem": 22, "code": "(fn [coll]\n  (reduce + \n    (map (fn [_] '1) coll)\n  )\n)", "user": "5fe876ade4b05ac5b16ea195"}, {"problem": 22, "code": "(fn [input] (reduce + (vals (frequencies input))))", "user": "5fe75ecfe4b05ac5b16ea18d"}, {"problem": 22, "code": "#(reduce (fn [c x] (inc c)) 0 %)", "user": "5fe7ed58e4b05ac5b16ea191"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5fe8ccabe4b05ac5b16ea19a"}, {"problem": 22, "code": "#(loop [s %\n        cnt 0]\n   (if (empty? s)\n     cnt\n     (recur (rest s) (inc cnt))))", "user": "5fe9169ce4b05ac5b16ea1a0"}, {"problem": 22, "code": "(fn [ls]\n  (loop [ls ls\n         acc 0]\n    (if (empty? ls)\n      acc\n      (recur (rest ls) (inc acc))\n      )\n    )\n  )", "user": "5fe1b893e4b05ac5b16ea16f"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5fe9f657e4b05ac5b16ea1a6"}, {"problem": 22, "code": "(fn [x]\n  (loop [c 0\n         a x]\n    (if (next a)\n      (recur (inc c) (rest a))\n      (inc c))))", "user": "5fea32f3e4b05ac5b16ea1aa"}, {"problem": 22, "code": "#(reduce (fn [sum x] (inc sum)) 0 %)", "user": "5feb12f0e4b05ac5b16ea1b0"}, {"problem": 22, "code": "#(loop [v %, len 0] (if-not (seq v) len (recur (next v) (inc len))))", "user": "54aec375e4b09f271ff37cf9"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5e68994ee4b04a83ad7cd266"}, {"problem": 22, "code": "(fn [s]\n        (loop [s s n 0]\n          (if (empty? s)\n            n\n            (recur (rest s) (inc n)))))", "user": "546c4377e4b00cfc9eacc177"}, {"problem": 22, "code": "(fn my-count [coll]\n  (reduce (fn [acc x] (inc acc)) 0 coll))", "user": "5faece16e4b08cb800c85b02"}, {"problem": 22, "code": "(fn [coll]\n  (loop [coll coll n 0]\n    (if (seq coll)\n      (recur (rest coll) (inc n))\n      n)))", "user": "5fef4292e4b05ac5b16ea1d7"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5fee13c7e4b05ac5b16ea1d1"}, {"problem": 22, "code": "(fn my-count [xs]\n  (if (empty? xs) 0 (+ 1 (my-count (rest xs)))))", "user": "5fef5ccce4b05ac5b16ea1d9"}, {"problem": 22, "code": "(fn [xs] \n   ((fn cnt [xs, c] \n      (if (empty? xs) \n        c \n        (recur (rest xs) (+ c 1)))) \n    xs 0))", "user": "5fef5c6de4b05ac5b16ea1d8"}, {"problem": 22, "code": "(fn [s]\n  (reduce (fn [res _] (inc res)) 0 s))", "user": "5f2d6bc4e4b033932238a66e"}, {"problem": 22, "code": "(fn[x] (reduce (fn [x y] (+ x 1)) 0 x))", "user": "5fed2610e4b05ac5b16ea1c7"}, {"problem": 22, "code": "#(loop [n 0 sq %] (if (empty? sq) n (recur (inc n) (rest sq))))", "user": "5f548678e4b0a0bc16850a7e"}, {"problem": 22, "code": "reduce (fn [c _](inc c)) 0", "user": "5ff19fe0e4b05ac5b16ea1f4"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "5ff2091ce4b05ac5b16ea1f8"}, {"problem": 22, "code": "#(reduce (fn [n m] (inc n)) 0 %)", "user": "5ff1eb06e4b05ac5b16ea1f7"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "5fec4f5ee4b05ac5b16ea1bf"}, {"problem": 22, "code": "(fn [s] \n  (reduce +\n    (map (fn [i] 1) s)\n  )\n)", "user": "5ff214e7e4b05ac5b16ea1fa"}, {"problem": 22, "code": "(fn foo [xs] \n  (if (empty? xs)\n    0\n    (+ 1 (foo (rest xs))\n       )))", "user": "5ff26ac2e4b05ac5b16ea1fc"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5fef99e2e4b05ac5b16ea1e0"}, {"problem": 22, "code": "(fn ab [sq]\n  (reduce + (map (fn [_] 1) sq)))", "user": "5fe09d1fe4b05ac5b16ea15b"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "5ff3aca3e4b05ac5b16ea205"}, {"problem": 22, "code": "(fn [lat]\n  (reduce (fn [x y] (+ x 1)) 0 lat))", "user": "5ff32e20e4b05ac5b16ea1ff"}, {"problem": 22, "code": "#(reduce\n (fn [acc _] (inc acc))\n 0 %)", "user": "5ff489d8e4b05ac5b16ea210"}, {"problem": 22, "code": "(fn [c] (apply + (map #(do %1 1) c)))", "user": "5ff4e28ae4b06df49cee1486"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "5fd92743e4b05ac5b16ea11f"}, {"problem": 22, "code": "(fn my-count\n  [col]\n  (-> col\n      vec\n      (.lastIndexOf (last col))\n      inc))", "user": "5ff454a1e4b05ac5b16ea20d"}, {"problem": 22, "code": "reduce (fn [acc x] (inc acc)) 0", "user": "5ff5bc1ae4b06df49cee1490"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5ff5971ee4b06df49cee148d"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5fc56712e4b081dd5340e3e7"}, {"problem": 22, "code": "(fn [vec]\n  (loop [vec vec n 0]\n    (if (= vec ())\n      n\n      (recur (rest vec) (+ n 1)))))", "user": "5ff676a9e4b06df49cee1497"}, {"problem": 22, "code": "#(apply + (map (constantly 1) %))", "user": "5fd10010e4b07e53c2f3f02a"}, {"problem": 22, "code": "#(reduce (fn [acc val]\n           (inc acc)) 0 %)", "user": "5ff8ead1e4b06df49cee14ab"}, {"problem": 22, "code": "#(alength (to-array %))", "user": "5ff101a5e4b05ac5b16ea1ed"}, {"problem": 22, "code": "#(reduce (fn [acc x] (+ 1 acc)) 0 %)", "user": "5ff93da9e4b06df49cee14af"}, {"problem": 22, "code": "#(.indexOf (conj (vec %) \"131231231241248124871489217412\") \"131231231241248124871489217412\")", "user": "5ffa3e84e4b06df49cee14b2"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5ff709e4e4b06df49cee149b"}, {"problem": 22, "code": "(fn [input]\n   (loop [m 0 lst input]\n     (if (empty? lst)\n       m\n       (recur (inc m) (rest lst)))))", "user": "593352b7e4b072a2710fd052"}, {"problem": 22, "code": "reduce (fn [cc _] (inc cc)) 0", "user": "5ffbc965e4b074f607df65ea"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %1)", "user": "5fce0cc5e4b07e53c2f3f000"}, {"problem": 22, "code": "#(loop [acc 0 \n        coll %]\n    (if(empty? coll) \n     acc\n    (recur (inc acc) (rest coll))))", "user": "5ffc18cae4b074f607df65f1"}, {"problem": 22, "code": "(fn count-elements [coll]\n  (if (empty? (rest coll))\n    1\n    (+ 1 (count-elements (rest coll)))))", "user": "5f969088e4b0715f5002d7d4"}, {"problem": 22, "code": "(fn [coll]\n    (loop [n 0, coll coll]\n      (if coll (recur (inc n) (next coll))\n          n)))", "user": "5ff64845e4b06df49cee1495"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5ffe2d18e4b074f607df65ff"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5ffd255be4b074f607df65f6"}, {"problem": 22, "code": "(fn [sequ]\n\t(\n     (fn [i sequ]\n\t\t\t (if\n\t\t\t\t (not (empty? sequ))\n\t\t\t\t (recur  (+ 1 i) (rest sequ))\n\t\t\t\t i))\n     0\n\t\t sequ))", "user": "5ffee617e4b074f607df6605"}, {"problem": 22, "code": "(fn [s] (reduce #(if-not (nil? %2) (+ %1 1) %1) 0 s))", "user": "5ffe889ce4b074f607df6603"}, {"problem": 22, "code": "(fn [coll]\n  (reduce\n   (fn [accum seq-coll]\n     (inc accum))\n   0 (seq coll)))", "user": "5ff61113e4b06df49cee1492"}, {"problem": 22, "code": "(fn el-number [list] (reduce (fn [x y] (+ x 1)) 0 list))", "user": "5fffecb1e4b074f607df660a"}, {"problem": 22, "code": "(fn [x] (loop[c 0\n              y x]\n          (if (empty? y)\n            c\n            (recur (inc c) (rest y)))))", "user": "5ff82adae4b06df49cee14a4"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "5ffe6082e4b074f607df6600"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5ffd3422e4b074f607df65f7"}, {"problem": 22, "code": "(fn [coll] (reduce (fn [acc _] (inc acc)) 0 coll))", "user": "529e3258e4b04e0c58e87b8d"}, {"problem": 22, "code": "#(\n  reduce\n  + 0\n  (map (fn [x] 1) (seq %)\n       )\n  )", "user": "5fc1c424e4b0edf42a5593d0"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %1))", "user": "6001ea38e4b074f607df662a"}, {"problem": 22, "code": "(fn mycount [sq]\n  (reduce (fn [a _] (inc a)) 0 sq))", "user": "5fee18f2e4b05ac5b16ea1d2"}, {"problem": 22, "code": "(fn\n  [s]\n  (loop [c 0\n         acc s]\n    (if (empty? acc)\n        c\n        (recur (inc c) (rest acc)))))", "user": "60036736e4b074f607df663b"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "6001c90ce4b074f607df6626"}, {"problem": 22, "code": "#(loop [s % c 0]\n   (if-not (first s)\n     c\n     (recur (rest s) (inc c))))", "user": "6000e5d4e4b074f607df660d"}, {"problem": 22, "code": "(partial reduce (fn [acc next](+ 1 acc)) 0)", "user": "6004c750e4b074f607df6645"}, {"problem": 22, "code": ";#(reduce (fn[x y](inc x)) 0 %)\n(let [f (fn [x _] (inc x))] \n  #(reduce f 0 %))", "user": "6001460ce4b074f607df6611"}, {"problem": 22, "code": "#(loop [res 0\n        s %]\n   (if(empty? s)\n     res\n     (recur (inc res) (rest s))))", "user": "60046db8e4b074f607df6642"}, {"problem": 22, "code": "(fn [seq] (reduce (fn [n _] (+ n 1)) 0 seq))", "user": "60065677e4b074f607df6651"}, {"problem": 22, "code": "#(reduce (fn [acc, _] (+ acc 1)) 0 %)", "user": "60067b71e4b074f607df6655"}, {"problem": 22, "code": "#(reduce (fn([x y] (inc x))) 0 %)", "user": "60057cd4e4b074f607df664a"}, {"problem": 22, "code": "(fn [lat]\n  (reduce (fn [x y] (+ x 1)) 0 lat))", "user": "5ffd7ce6e4b074f607df65fb"}, {"problem": 22, "code": "(fn countrecur [l]\n  (if (empty? l)\n    0\n    (+ 1 (countrecur (rest l)))\n   )\n  )", "user": "600777a3e4b074f607df6667"}, {"problem": 22, "code": "(fn [s]\n  (loop [s s\n         n 0]\n    (if (seq s)\n      (recur (rest s) (inc n))\n      n)))", "user": "56a655dbe4b0542e1f8d14eb"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "6009dc95e4b074f607df6681"}, {"problem": 22, "code": "(fn [xs] (reduce (fn [sum _] (inc sum)) 0 xs))", "user": "5f37263de4b0574c87022c4e"}, {"problem": 22, "code": "(fn [s] (reduce (fn [a b] (inc a)) 0 s))", "user": "600b385ce4b074f607df668d"}, {"problem": 22, "code": "(fn [col] (reduce + 0 (map (fn [_] 1) col)))", "user": "600c1c72e4b074f607df6692"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "600c607ce4b074f607df6693"}, {"problem": 22, "code": "(fn [s] (reduce + (map (fn [_] 1) s)))", "user": "600cb742e4b074f607df6696"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5feb6850e4b05ac5b16ea1b8"}, {"problem": 22, "code": "(fn [l]\n  (loop [lst l\n         cnt 0]\n    (if-not (first lst)\n      cnt\n      (recur (rest lst) (+ cnt 1)))))", "user": "600ae927e4b074f607df6689"}, {"problem": 22, "code": "(fn [xs]\n  (loop [xs xs n 0]\n    (if (empty? xs)\n      n\n      (recur (rest xs) (+ n 1)))))", "user": "6001d240e4b074f607df6627"}, {"problem": 22, "code": "#(apply + (map (constantly 1) %))", "user": "583369e6e4b089d5ab817c9c"}, {"problem": 22, "code": "(fn [l] ((fn rec [l acc] (if (= l '()) acc (rec (rest l) (+ acc 1)))) l 0))", "user": "601004d6e4b074f607df66b2"}, {"problem": 22, "code": "(fn [arg]\n  (loop [cnt 0\n              x arg]\n    (if (empty? x)\n      cnt\n      (recur (inc cnt) (rest x)))))", "user": "600d9808e4b074f607df669c"}, {"problem": 22, "code": "#(loop [x % y 0] (if (empty? x) y (recur (drop 1 x) (inc y))))", "user": "600e7113e4b074f607df66a3"}, {"problem": 22, "code": "#(reduce (fn [res _] (inc res)) 0 %1)", "user": "60096aabe4b074f607df667f"}, {"problem": 22, "code": "(fn [xs] (apply + (map (fn [xs] (*)) xs)))", "user": "6011b89ee4b074f607df66bc"}, {"problem": 22, "code": "(fn [coll]\n      (reduce\n       (fn [acc new]\n         (+ 1 acc))\n       0 coll))", "user": "58db48a5e4b0a4d5acaab679"}, {"problem": 22, "code": "(fn [coll] (loop [x coll\n                   i 0]\n              (if (empty? x)\n                i\n                (recur (rest x) (inc i)))))", "user": "5a9f2c53e4b0d174b936c812"}, {"problem": 22, "code": "(fn my-count [s]\n  (loop [s s n 0]\n    (if (empty? s)\n      n\n      (recur (rest s) (inc n)))))", "user": "5fb68f09e4b08cb800c85b58"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "5d057543e4b0cc9c915881e0"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5ff70cfde4b06df49cee149c"}, {"problem": 22, "code": "#((comp last map) (fn [i _] (inc i)) (range) %)", "user": "601697b6e4b012aee256ca0c"}, {"problem": 22, "code": "(fn my-count [x-list]\n  (loop [x-list x-list list-value 0]\n    (if (empty? x-list) list-value\n    (recur (rest x-list) (inc list-value))\n)))", "user": "60170e31e4b0a37c5521f4e7"}, {"problem": 22, "code": "(fn [sequence] (reduce #(+ 1 (first %&)) 0 sequence))", "user": "60194b7ae4b0bf4ca6b1091f"}, {"problem": 22, "code": "#(->> % (map (constantly 1)) (reduce +))", "user": "5fc4e1f0e4b036c570ed8145"}, {"problem": 22, "code": "(fn length [coll]\n  (if (empty? coll)\n    0\n    (+ 1 (length (rest coll)))))", "user": "601aaa93e4b0bf4ca6b10926"}, {"problem": 22, "code": "#(reduce (fn [x y](inc x)) 0 %)", "user": "60195030e4b0bf4ca6b10920"}, {"problem": 22, "code": "(fn [coll] (reduce (fn [acc _] (inc acc)) 0 coll))", "user": "5fcf86c2e4b07e53c2f3f00d"}, {"problem": 22, "code": "reduce (fn [acc _] (inc acc)) 0", "user": "55dec39ce4b050e68259b3e6"}, {"problem": 22, "code": "(fn new_count [sequence]\n  (let [f (first sequence)\n        r (rest sequence)]\n    (if (= nil f)\n      (identity 0)\n      (+ 1 (new_count r)))))", "user": "5ff99e57e4b06df49cee14b0"}, {"problem": 22, "code": "#(reduce (fn [acc _] (inc acc)) 0 %)", "user": "4e38f245535deb9a81d77f3e"}, {"problem": 22, "code": "#(reduce (fn [c _] (+ 1 c)) 0 %)", "user": "6014ccd3e4b074f607df66cd"}, {"problem": 22, "code": "(fn [col] (loop [res col acc 0] (if (empty? res) acc (recur (drop 1 res) (+ 1 acc)))))", "user": "601fe14ce4b0bf4ca6b1095c"}, {"problem": 22, "code": "(fn mycount [l]\n  (cond\n   (= [] l)\n   0\n   :else\n   (+ 1 (mycount (rest l)))))", "user": "602049b8e4b0bf4ca6b10961"}, {"problem": 22, "code": "#(loop [coll % len 0] (if (empty? coll) len (recur (rest coll) (inc len))))", "user": "60225c2ae4b0d5df2af22201"}, {"problem": 22, "code": "(fn [ls]\n  (loop [xs ls\n            c 0]\n    (if (empty? xs)\n      c\n      (recur (rest xs) (inc c))\n     )\n   )\n  )", "user": "60228147e4b0d5df2af22202"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "6022844de4b0d5df2af22203"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "601bdcb3e4b0bf4ca6b10930"}, {"problem": 22, "code": "(fn m_count [coll]\n  (if (empty? coll) 0\n      (loop [n 0 \n             coll coll]\n        (if (next coll) \n          (recur (inc n) (next coll))\n          (inc n)))))", "user": "6022429be4b0d5df2af22200"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "6023e7f7e4b0d5df2af22217"}, {"problem": 22, "code": "(fn [s]\n  (loop [szn s c 0]\n    (if (empty? szn) c\n      (recur (rest szn) (inc c)))))", "user": "60264d89e4b0d5df2af2222d"}, {"problem": 22, "code": "#(reduce (fn [a b] (inc a)) 0 %)", "user": "6026d2cae4b0d5df2af22232"}, {"problem": 22, "code": "(fn doon [x] ( loop [s x cnt 0] (if (empty? s) cnt (recur (next s) (inc cnt)))))", "user": "5fdb8657e4b05ac5b16ea133"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "60282169e4b0d5df2af22240"}, {"problem": 22, "code": "#(reduce (fn [x _] (inc x)) 0 %)", "user": "60240f91e4b0d5df2af2221b"}, {"problem": 22, "code": "#(reduce (fn [acc v] (+ 1 acc)) 0 %1)", "user": "60271bdae4b0d5df2af22239"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "6029c861e4b0d5df2af22257"}, {"problem": 22, "code": "(partial reduce (fn [acc _] (+ acc 1)) 0)", "user": "6026737ee4b0d5df2af2222f"}, {"problem": 22, "code": "#(reduce + (map (fn [_] 1) %))", "user": "60206002e4b0bf4ca6b10962"}, {"problem": 22, "code": "(\n  fn cc \n  ([a n] (if (empty? a) \n              n\n          (cc (rest a) (+ n 1))\n          )\n  ) \n  ([a] (cc a 0))\n)", "user": "602abb59e4b0d5df2af2225e"}, {"problem": 22, "code": "(fn [seq]\n   (loop [seq seq length 0]\n     (if (empty? seq)\n       length\n       (recur (drop 1 seq) (inc length)))\n     ))", "user": "602b90c1e4b0d5df2af22266"}, {"problem": 22, "code": "(fn counts [a] (if (= a []) 0 (+ 1 (counts (rest a)) ) ) )", "user": "602bca69e4b0d5df2af22267"}, {"problem": 22, "code": "(fn ct [items]\n  (if (= '() items)\n  \t0\n  \t(inc (ct (rest items)))))", "user": "602bfcefe4b0d5df2af22268"}, {"problem": 22, "code": "reduce (fn [n _] (inc n)) 0", "user": "602aa5f1e4b0d5df2af2225d"}, {"problem": 22, "code": "#((fn reca [x i]\n    (if (empty? x)\n      i\n      (reca (rest x) (inc i))))\n  (vec %) 0)", "user": "602d261de4b0d5df2af22276"}, {"problem": 22, "code": "(fn [coll]\n  (reduce (fn [n _] (inc n)) 0 coll))", "user": "602d5eade4b0d5df2af22279"}, {"problem": 22, "code": "#(reduce (fn [acc i] (+ acc 1)) 0 %)", "user": "602ed851e4b0d5df2af22291"}, {"problem": 22, "code": "#(reduce + (vals (frequencies %)))", "user": "602f8400e4b0d5df2af22299"}, {"problem": 22, "code": "reduce (fn [acc & _] (inc acc)) 0", "user": "5baba1ece4b0a20761a23482"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "602d98d5e4b0d5df2af2227a"}, {"problem": 22, "code": "(fn countit \n  ([s] (countit s 0))\n  ([s, sum]\n   (if (next s)\n     (countit (rest s) (inc sum))\n     (inc sum) \n    ) \n  ) \n  )", "user": "602f56c5e4b0d5df2af22297"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "602b6cf7e4b0d5df2af22265"}, {"problem": 22, "code": "(fn [x]\n  (reduce \n    (fn [acc n] (+ acc 1))\n    0\n    x))", "user": "601f508ce4b0bf4ca6b10959"}, {"problem": 22, "code": "(fn [x] (reduce (fn [n x] (inc n)) 0 x))", "user": "60329afce4b0d5df2af222b8"}, {"problem": 22, "code": "(fn [col] (reduce (fn [acc el] (inc acc)) 0 col))", "user": "6031926ae4b0d5df2af222ac"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "6032f7f9e4b0d5df2af222b9"}, {"problem": 22, "code": "#(reduce + (vals (frequencies %1)))", "user": "60325627e4b0d5df2af222b5"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "600eb95de4b074f607df66a6"}, {"problem": 22, "code": "(fn [_seq]\n  (loop [i 0]\n  (if (empty? (drop i _seq))\n  i\n  (recur (inc i))\n  ))  \n)", "user": "60335b35e4b0d5df2af222bf"}, {"problem": 22, "code": "(fn plop\n  ([seq] (plop seq 1))\n  ([seq n]\n   (let [rem (rest seq)]\n    (if-not (empty? rem)\n     (recur rem (inc n))\n     n))))", "user": "6023a3abe4b0d5df2af22212"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "603454cbe4b0d5df2af222cb"}, {"problem": 22, "code": "(fn count-a-sequence [col]\n  (loop [n 0 col col]\n  (if (empty? col)\n    n\n    (recur (inc n) (drop 1 col)))))", "user": "602372aae4b0d5df2af2220f"}, {"problem": 22, "code": "(fn \n  [coll]\n  (loop [i 0 curr-coll coll]\n    (if (empty? curr-coll)\n      i\n      (recur (inc i) (rest curr-coll))\n      )\n    )\n  )", "user": "60337f1fe4b0d5df2af222c1"}, {"problem": 22, "code": "(fn my-count\n  [coll]\n  (loop [i 0\n         tmp-coll coll]\n    (if (empty? tmp-coll)\n      i\n      (recur (inc i) (rest tmp-coll)))))", "user": "601bb40de4b0bf4ca6b1092f"}, {"problem": 22, "code": "(fn counter [x] (if (empty? x) 0 (+ 1 (counter (rest x)))))", "user": "6037e468e4b0d5df2af222e8"}, {"problem": 22, "code": "(fn [s]\n  (loop [ seqs s i 1]\n    (if (= nil (next seqs))\n      i\n      (recur (rest seqs) (inc i)))))", "user": "6038b6b4e4b0d5df2af222ef"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "60231327e4b0d5df2af2220b"}, {"problem": 22, "code": "(fn [lst]\n  (loop [i lst cnt 0]\n   (cond (empty? i) cnt\n     :t (recur (rest i)(inc cnt)))))", "user": "603a6c40e4b0d5df2af222f7"}, {"problem": 22, "code": "(fn mycount [l] \n  (if (empty? l) 0 (+ 1 (mycount (rest l ))) )\n)", "user": "603ae21de4b0d5df2af222fb"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "603af0ade4b0d5df2af222fc"}, {"problem": 22, "code": "#(reduce (fn [a b] (inc a)) 0 %)", "user": "5ddd0606e4b0948ae9d9adbf"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "603ba3a8e4b0d5df2af22300"}, {"problem": 22, "code": "reduce (fn[c _](inc c)) 0", "user": "603bfd17e4b0d5df2af22304"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "600a061de4b074f607df6683"}, {"problem": 22, "code": "(fn [s]\n  (loop [c 0 head (first s) tail (rest s)]\n    (if (nil? head)\n      c\n      (recur (inc c) (first tail) (rest tail))\n      )\n    )\n  )", "user": "603d5f2ae4b0d5df2af2230c"}, {"problem": 22, "code": "#(loop [s %1\n        c 0]\n   (if (empty? s)\n     c\n     (recur (rest s) (inc c))))", "user": "6038221ee4b0d5df2af222eb"}, {"problem": 22, "code": "reduce (fn [cc _] (inc cc)) 0", "user": "603baf04e4b0d5df2af22302"}, {"problem": 22, "code": "#((fn counter [coll n] \n    (if (empty? coll) n (counter (rest coll) (inc n)))) % 0)", "user": "6033f8e9e4b0d5df2af222c6"}, {"problem": 22, "code": "(fn elementos [l]\n  (if (empty? l)\n    0\n    (+ 1 (elementos (rest l)))))", "user": "603eb408e4b0d5df2af22319"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "603f1d04e4b0d5df2af2231e"}, {"problem": 22, "code": "(fn [x] (reduce (fn [y z] (inc y)) 0 x))", "user": "603e29d4e4b0d5df2af22310"}, {"problem": 22, "code": "#(reduce (fn [a c] (+ 1 a)) 0 %)", "user": "603fae99e4b0d5df2af22322"}, {"problem": 22, "code": "(fn [xs] (reduce (fn [a v] (+ a 1)) 0 xs))", "user": "603f6623e4b0d5df2af2231f"}, {"problem": 22, "code": "(fn [lst]\n  (loop [itr lst size 0]\n    (if (empty? itr)\n      size\n      (recur (rest itr) (inc size)))))", "user": "60410d46e4b0d5df2af22335"}, {"problem": 22, "code": "(fn hi\n   ([list tot]\n    (if (empty? (rest list))\n      (inc tot)\n      (hi (rest list) (inc tot))))\n   ([list]\n    (if (empty? (rest list))\n      1\n      (hi (rest list) 1))))", "user": "60396c95e4b0d5df2af222f4"}, {"problem": 22, "code": "(fn my-count [as]\n  (if (empty? as)\n    0\n    (inc (my-count (next as)))))", "user": "6042219ae4b04b4f332c3e72"}, {"problem": 22, "code": "(fn [coll]\n  (loop [cnt 0 cl coll]\n    (if (empty? cl)\n      cnt\n      (recur (inc cnt) (rest cl)))\n    ))", "user": "60436423e4b02d28681c77a3"}, {"problem": 22, "code": "#(loop [toCount % acc 0] (if (empty? toCount) acc (recur (rest toCount) (inc acc))))", "user": "6040f595e4b0d5df2af2232f"}, {"problem": 22, "code": "reduce (fn [val1 _] (inc val1)) 0", "user": "60452a00e4b02d28681c77b5"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "6044bb03e4b02d28681c77b2"}, {"problem": 22, "code": "(fn [x] (reduce + (map first (map list (repeat 1) x))))", "user": "6045582fe4b02d28681c77b6"}, {"problem": 22, "code": "#(reduce (fn [a _] (inc a)) 0 %)", "user": "601c39eee4b0bf4ca6b10937"}, {"problem": 22, "code": "(fn rec [l]\n  (if (empty? l)\n    0\n    (inc (rec (rest l)))))", "user": "60460824e4b02d28681c77bc"}, {"problem": 22, "code": "(fn [sum]\n  (reduce (fn [element index] (inc element)) 0 sum))", "user": "603e063ae4b0d5df2af2230f"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "60461117e4b02d28681c77bf"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "6045abb4e4b02d28681c77b8"}, {"problem": 22, "code": "reduce (fn [x _] (inc x)) 0", "user": "6046a0c7e4b02d28681c77c6"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "60461a61e4b02d28681c77c1"}, {"problem": 22, "code": "(fn [s] (inc (last (map-indexed (fn [i x] (int i)) s))))", "user": "60420ee4e4b04b4f332c3e71"}, {"problem": 22, "code": "(fn [x]  (apply max (keys (zipmap (map inc (range)) x))))", "user": "6034e358e4b0d5df2af222d1"}, {"problem": 22, "code": "#(reduce\n  (fn [c _] (inc c))\n  0 %)", "user": "604810c0e4b02d28681c77cf"}, {"problem": 22, "code": "(fn my-count [coll]\n  (loop [c coll\n         n 0]\n    (cond\n      (empty? c) n\n      :else (recur (rest c) (inc n))\n      )\n    )\n  )", "user": "60471241e4b02d28681c77c9"}, {"problem": 22, "code": "(fn foo [xs] ((fn bar [ys acc] (if (empty? ys) acc (bar (rest ys) (+ acc 1)))) xs 0))", "user": "6028365be4b0d5df2af22242"}, {"problem": 22, "code": "(fn [elements]\n  (loop [n 0 els elements]\n    (if (empty? els)\n      n\n      (recur (inc n) (rest els))\n      )))", "user": "60486e8ae4b02d28681c77db"}, {"problem": 22, "code": "#(loop [coll % ct 0]\n   (if (empty? coll)\n     ct\n     (recur\n      (rest coll) (inc ct))))", "user": "5f665d45e4b02876ed9fd02f"}, {"problem": 22, "code": "(fn [coll]\n  (loop [coll coll\n         n 0]\n    (if (empty? coll)\n      n\n      (recur (rest coll) (inc n)))))", "user": "604a30c6e4b02d28681c77f0"}, {"problem": 22, "code": "#(loop [x %\n        y 0]\n (if (empty? x)\n   y\n   (recur (drop 1 x) (inc y))))", "user": "6040e6dbe4b0d5df2af2232a"}, {"problem": 22, "code": "(fn [coll] (reduce (fn [acc n] (inc acc)) 0 coll))", "user": "5a383581e4b001c08efc0c97"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "604c7c13e4b0b7ec0ac60abf"}, {"problem": 22, "code": "(fn [x]\n  (if (empty? x)\n    0\n\t(loop [c 1\n           r (rest x)]\n\t\t(if (empty? r)\n\t\t\tc\n\t\t      (recur (inc c)\n             (rest r))))))", "user": "563b7724e4b0bfe05bf11814"}, {"problem": 22, "code": ";; _#(loop [i 0 l %1] (if (empty? l) i (recur (inc i) (rest l))))\n#(reduce (fn [i _] (inc i)) 0 %)", "user": "604ccb9fe4b0b7ec0ac60ac1"}, {"problem": 22, "code": "#(reduce (fn [ndx _] (inc ndx)) 0 %)", "user": "6020365ae4b0bf4ca6b10960"}, {"problem": 22, "code": "(fn [x] (reduce + (map (fn [_] 1) x)))", "user": "604d3cb1e4b0b7ec0ac60ac2"}, {"problem": 22, "code": "#(reduce \n  (fn [x y] \n  (inc x))0 %)", "user": "60196a7fe4b0bf4ca6b10921"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "604ec9e3e4b0b7ec0ac60ac9"}, {"problem": 22, "code": "(fn  \n  [sqnc]\n  (reduce (fn [c _] (inc c)) 0 sqnc))", "user": "60468847e4b02d28681c77c4"}, {"problem": 22, "code": "#(reduce (fn[a b](inc a))0 %)", "user": "6045e761e4b02d28681c77bb"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0  %)", "user": "604dc59ee4b0b7ec0ac60ac5"}, {"problem": 22, "code": "#(reduce (fn [c _] (inc c)) 0 %)", "user": "604f4be1e4b0b7ec0ac60ace"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "60504383e4b056659d6341fa"}, {"problem": 22, "code": "#(loop [x % c 0]\n       (if x\n           (recur (next x ) (inc c))   \n           c))", "user": "5f1eec36e4b0f565ad998274"}, {"problem": 22, "code": "(fn count-seq [coll]\n  (reduce (fn [acc x] (+ acc 1)) 0 coll))", "user": "6051bcfae4b056659d634203"}, {"problem": 22, "code": "(fn my-count\n  ([s] (my-count s 0))\n  ([s acc] (if (empty? s) acc (my-count (rest s) (inc acc)))))", "user": "60526f08e4b04c8f2157d14d"}, {"problem": 22, "code": "reduce (fn [acc _ ] (inc acc)) 0", "user": "604f3346e4b0b7ec0ac60acd"}, {"problem": 22, "code": "(fn f\n  ([sq] (f sq 0))\n  ([sq n]\n   (if (empty? sq)\n     n\n     (recur (rest sq) (inc n)))))", "user": "60537cd1e4b04c8f2157d152"}, {"problem": 22, "code": "(fn ct [s] \n  (if (empty? s) \n    0 \n    (+ 1 (ct (rest s)))\n  )\n)", "user": "60538924e4b04c8f2157d153"}, {"problem": 22, "code": "#(+ 1 (last (map-indexed (fn [i item] i) %)))", "user": "60511ccfe4b056659d6341ff"}, {"problem": 22, "code": "reduce \n (fn [accumulation _] (inc accumulation))\n 0", "user": "60549e69e4b069ae89ce6ac8"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "6058aa34e4b069ae89ce6af4"}, {"problem": 22, "code": "#(inc (first (last (map-indexed list %))))", "user": "526759b3e4b03e8d9a4a715b"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "6059d2e0e4b07e92fa001ace"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "605a2480e4b07e92fa001ad7"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "6059d9c8e4b07e92fa001ad0"}, {"problem": 22, "code": "#(loop [y % num 0]\n          (if (seq y)\n            (recur (rest y) (inc num))\n            num))", "user": "5b522591e4b02d533a91bd09"}, {"problem": 22, "code": "(fn [coll]\n  (loop [cs coll acc 0]\n    (if (empty? cs)\n      acc\n      (recur (rest cs) (inc acc)))))", "user": "605b7a90e4b079a07f8593fc"}, {"problem": 22, "code": "(fn [col]\n  (reduce \n   (fn [acc item] (+ acc 1))\n   0 col\n\t)\n  )", "user": "605b1197e4b000d535e6f548"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "605c988fe4b0fb8c998d2c7a"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "6059d824e4b07e92fa001acf"}, {"problem": 22, "code": "(fn\n  [s]\n  (loop [n 0]\n    (if-not (nth s n false)\n      n\n      (recur (+ n 1)))))", "user": "5ec02e20e4b00a66d4a95288"}, {"problem": 22, "code": "#(reduce (fn [start inp] (inc start)) 0 %)", "user": "605b7085e4b079a07f8593fa"}, {"problem": 22, "code": "reduce (fn [x _] (inc x)) 0", "user": "604f9a8be4b039075cafcf65"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5f755d0be4b02876ed9fd0a9"}, {"problem": 22, "code": "(fn [seqq]\n  (reduce \n   \n   (fn [acc x]\n     (+ 1 acc))\n   \n   \n   0\n   seqq))", "user": "53b0750fe4b047364c044483"}, {"problem": 22, "code": "reduce (fn [len cur] (inc len)) 0", "user": "605714ffe4b069ae89ce6ae1"}, {"problem": 22, "code": "(fn [c] (reduce (fn [a b] (inc a)) 0 c))", "user": "60606490e4b03746e80ebf67"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "6060c0ade4b03746e80ebf69"}, {"problem": 22, "code": "(fn my-count [ls]\n  (let [f (fn my-count-recur [lsr n]\n           (if (= lsr '()) n\n             (my-count-recur (rest lsr) (inc n))))]\n    (f ls 0)))", "user": "605f5c69e4b03746e80ebf5e"}, {"problem": 22, "code": "#(reduce (fn [accum, _] (+ accum 1)) 0 %)", "user": "60622c6ee4b03746e80ebf72"}, {"problem": 22, "code": "reduce (fn [acc _] (+ 1 acc)) 0", "user": "6062e1bde4b03746e80ebf75"}, {"problem": 22, "code": "(fn [lista] (loop [lista1 lista contador 0] (if (empty? lista1) contador (recur (rest lista1) (inc contador)))))", "user": "605f92bae4b03746e80ebf62"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "60462028e4b02d28681c77c2"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "60522feae4b0af2ba86d5a0a"}, {"problem": 22, "code": "(fn foo\n    [coll]\n    (reduce (fn [acc _] (inc acc)) 0 coll))", "user": "5db012e3e4b0f8c104ccfc95"}, {"problem": 22, "code": "(fn [coll]\n           (loop [a-l coll m 0]\n             (if (empty? a-l)\n               m\n               (recur (rest a-l) (inc m)))))", "user": "6056e1f4e4b069ae89ce6adc"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %1))", "user": "5a22a54fe4b0ff51aa4b32cb"}, {"problem": 22, "code": "(fn [x]  (apply max (keys (zipmap (map inc (range)) x))))", "user": "60630af9e4b069485764ddbc"}, {"problem": 22, "code": "(fn [coll]\n  (reduce (fn [x y] (println x y) (inc x)) 0 coll))", "user": "605a876be4b000d535e6f53c"}, {"problem": 22, "code": "(fn mycount [mlist]\n  (if (empty? mlist)\n    0\n    (+ 1 (mycount (rest mlist)))))", "user": "6063c4fae4b069485764ddc0"}, {"problem": 22, "code": "#(reduce (fn [a v] (+ 1 a)) 0 %)", "user": "6065569ce4b069485764ddca"}, {"problem": 22, "code": "reduce (fn cnt-seq [sum s] (inc sum)) 0", "user": "60617afee4b03746e80ebf6c"}, {"problem": 22, "code": "(fn my-count\n  ([s] (if (= (first s) nil) 0 (my-count (rest s) 1)))\n  ([s n] (if (= (first s) nil) n (my-count (rest s) (+ n 1)))))", "user": "6065755ee4b069485764ddcc"}, {"problem": 22, "code": "(fn\n   [col]\n   (reduce (fn [r x] (inc r)) 0 col)\n   )", "user": "60631c2ee4b069485764ddbd"}, {"problem": 22, "code": "(fn len [coll]\n  (if (empty? coll) 0\n    (+ 1 (len (rest coll)))))", "user": "60663f75e4b069485764ddd4"}, {"problem": 22, "code": "reduce (fn [x _] (inc x)) 0", "user": "60689984e4b069485764dde6"}, {"problem": 22, "code": "#(loop [cnt 0 tmp-list %]\n   (if (seq tmp-list)\n     (recur (inc cnt) (rest tmp-list))\n     cnt))", "user": "601a2f59e4b0bf4ca6b10925"}, {"problem": 22, "code": "reduce (fn [acc curr] (+ acc 1)) 0", "user": "60678bc7e4b069485764dddd"}, {"problem": 22, "code": "(fn [s]\n  (loop [c 0\n         xs s]\n    (if (empty? xs)\n      c\n      (recur (+ c 1) (rest xs)))))", "user": "606aafcfe4b069485764ddf6"}, {"problem": 22, "code": "(fn [col]\n  (reduce + (map (fn [_] 1) col)))", "user": "5d28c6dce4b092dab7f59c85"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "606b16b8e4b069485764ddf7"}, {"problem": 22, "code": "#(reduce (fn [a x] (inc a)) 0 %)", "user": "606a70a5e4b069485764ddf2"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "606d75f5e4b069485764de13"}, {"problem": 22, "code": "(fn len [xs]\n  (if (empty? xs) 0 (+ 1 (len (rest xs)))))", "user": "606d7f1ce4b069485764de14"}, {"problem": 22, "code": "(fn [x]\r\n  (loop [s x \r\n         n 0]\r\n    (if (empty? s)\r\n      n\r\n      (recur (rest s) (inc n)))))", "user": "606e0a42e4b069485764de19"}, {"problem": 22, "code": "#(reduce (fn [length sequence] (inc length)) 0 %)", "user": "606c87aae4b069485764de0d"}, {"problem": 22, "code": "(fn [sq]\n  (loop [c 0 others sq]\n    (if (seq others)\n      (recur (inc c) (rest others))\n      c\n    )\n  ))", "user": "5d917ef0e4b0915913b1d402"}, {"problem": 22, "code": "(fn [l] (loop [s l\n               acc 0]\n          (if(empty? s)\n            acc\n            (recur (rest s) (inc acc)))))", "user": "606f005ae4b069485764de1b"}, {"problem": 22, "code": "(fn test [lst]\n  (if (empty? lst)\n    0\n    (+ 1 (test (rest lst)))))", "user": "55a6b7b6e4b09e57187da29c"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "606ff89be4b069485764de22"}, {"problem": 22, "code": "(fn count-elements [coll]\n  (loop [c coll\n         n 0]\n    (if (empty? c)\n      n\n      (recur (rest c) (inc n)))))", "user": "60704214e4b069485764de24"}, {"problem": 22, "code": "reduce (fn [counter _] (inc counter)) 0", "user": "554e4d65e4b00713264bd993"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "6070c7bae4b069485764de27"}, {"problem": 22, "code": "(fn [s]\n  (reduce (fn [x y] (+ 1 x))\n          0\n          (seq s)))", "user": "607152b8e4b069485764de2d"}, {"problem": 22, "code": "#(apply + (map (constantly 1) %))", "user": "60735bc9e4b069485764de3c"}, {"problem": 22, "code": "(fn [coll]\n  (reduce + (map (constantly 1) coll)))", "user": "605b319de4b079a07f8593f7"}, {"problem": 22, "code": "(fn [seq] (apply + (map (fn [x] 1) seq)))", "user": "6059f25de4b07e92fa001ad1"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "6074a0dee4b069485764de48"}, {"problem": 22, "code": "#(loop [lista %\n        counter 0]\n   (if (empty? lista)\n     counter\n     (recur (rest lista) (inc counter))))", "user": "6074e1e7e4b069485764de50"}, {"problem": 22, "code": "(fn [x] (reduce + (map (constantly 1) x)))", "user": "6074dfa4e4b069485764de4c"}, {"problem": 22, "code": "(fn [lstt] \r\n  (loop\r\n    [i 0\r\n     lst lstt]\r\n    (if (= '() lst)\r\n      i\r\n      (recur (inc i) (rest lst)))))", "user": "6074df6fe4b069485764de4b"}, {"problem": 22, "code": "(fn \n  [s]\n  (reduce (fn [n s1] (inc n)) 0 s)\n )", "user": "6074f5ede4b069485764de52"}, {"problem": 22, "code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "60743977e4b069485764de46"}, {"problem": 22, "code": "#(reduce \n    (fn [c e] (inc c))\n     0 %)", "user": "60759e51e4b069485764de5a"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "6074e088e4b069485764de4d"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "6024544be4b0d5df2af2221f"}, {"problem": 22, "code": "#(loop [lst %\n        length 0]\n   (if (= () lst)\n     length\n     (recur (rest lst) (inc length))))", "user": "6074e278e4b069485764de51"}, {"problem": 22, "code": "(fn [x] (reduce + (map (constantly 1) x))) ;;; necesitamos que por cada elemento en x (map) vaya sumando uno, pero no acepta poner el 1 \n\n;;; la funcion contatnly para ser que hace un valor contante, osea, siempre regresa un valor, pero no deja de ser una funcion por lo que map lo acepta", "user": "6075c214e4b069485764de5b"}, {"problem": 22, "code": "(fn count-a-seq [item]\n  (reduce (fn [x y] (+ x 1)) 0 item))", "user": "6076ba65e4b069485764de61"}, {"problem": 22, "code": "(fn mycount [s]\n  (loop [s s n 0]\n    (if (empty? s)n\n    (recur (rest s)(inc n)))))", "user": "606ff56ce4b069485764de21"}, {"problem": 22, "code": "#(loop [n 0\n        [x & xs] %]\n   (if ((complement nil?) x)\n     (recur (inc n) xs)\n     n))", "user": "605b49b7e4b079a07f8593f8"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "6076ddf3e4b069485764de64"}, {"problem": 22, "code": "(fn [s] (reduce (fn [a _] (inc a)) 0 s))", "user": "551556a7e4b055c2f668d4e2"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "60777335e4b0a637ed78034f"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "60764350e4b069485764de5e"}, {"problem": 22, "code": "#(reduce (fn [accumulator item]\n           (+ accumulator 1)) 0 %)", "user": "6078df3ce4b0a637ed78035b"}, {"problem": 22, "code": "(partial reduce (fn [result item] (inc result)) 0 )", "user": "60794173e4b0a637ed78035d"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "607a1523e4b0a637ed78036a"}, {"problem": 22, "code": "(fn foo ([x] (foo 0 x))([c x] (if (empty? x) c (foo (inc c) (rest x)))))", "user": "6076adb2e4b069485764de60"}, {"problem": 22, "code": "(fn ccc [x]\n  (if (empty? x)\n    0\n    (inc (ccc (rest x)))))", "user": "6077b3c5e4b0a637ed780352"}, {"problem": 22, "code": "(fn [c]\n  (loop [res 0 curr_c c]\n    (if (empty? curr_c)\n      res\n      (recur (inc res) (rest curr_c)))))", "user": "607bd80be4b0a637ed780379"}, {"problem": 22, "code": "#(loop [random-seq %\n        counter 1]\n   (if (empty? (rest random-seq))\n     counter\n     (recur (rest random-seq) (inc counter))))", "user": "607d6bc1e4b03d835a6eaecc"}, {"problem": 22, "code": "(fn [x] (loop [i 0 v x] (if-not (first v) i (recur (inc i) (rest v)))))", "user": "5fa9fd9be4b0fa27300f3df5"}, {"problem": 22, "code": "(fn [stuffs]\n   (reduce\n     (fn[accumulator _]\n       (inc accumulator))\n     0\n     stuffs))", "user": "5ce67c36e4b0a17bb84e2b88"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "607e1d32e4b03d835a6eaeda"}, {"problem": 22, "code": "(fn [coll]\n  (reduce (fn [x y] (inc x)) 0 coll))", "user": "607dd962e4b03d835a6eaed2"}, {"problem": 22, "code": "#(reduce (fn [result item] (inc result)) 0 %)", "user": "607e09bee4b03d835a6eaed7"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "607d97a6e4b03d835a6eaecf"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "6074e1ade4b069485764de4e"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "607b6452e4b0a637ed780375"}, {"problem": 22, "code": "#(loop [xs %\n        result 0]\n   (if-not (first xs)\n     result\n     (recur (rest xs) (inc result))))", "user": "56b2e1c5e4b0982f16b37e0c"}, {"problem": 22, "code": "(fn [arg1] (apply + (map (fn [arg2] 1) arg1)))", "user": "516cbba6e4b06f078fab2525"}, {"problem": 22, "code": "#(loop [l %1 c 0]\n  (if (empty? l) c\n    (recur (rest l) (inc c))))", "user": "607900cde4b0a637ed78035c"}, {"problem": 22, "code": "(fn [seq]\n  (reduce (fn [x y] (+ x 1)) 0 seq))", "user": "606bb930e4b069485764de04"}, {"problem": 22, "code": "(fn p22 [x]\n   (if (empty? x)\n   0\n   (+ 1 (p22 (rest x)))))", "user": "608135c8e4b0736b099e42d1"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "6081b7fce4b0736b099e42d4"}, {"problem": 22, "code": "(fn [coll]\n  (loop [coll coll cnt 0]\n    (if (seq coll)\n      (recur (rest coll) (inc cnt))\n      cnt)))\n\n#_(fn [coll] (reduce (fn [cnt _] (inc cnt)) 0 coll))", "user": "608256d7e4b0736b099e42da"}, {"problem": 22, "code": "(fn [coll]\n  (inc (first (last (map-indexed vector coll)))))", "user": "60836285e4b0736b099e42e4"}, {"problem": 22, "code": "reduce (fn [c _] (inc c)) 0", "user": "607109aae4b069485764de2b"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "6074e1e4e4b069485764de4f"}, {"problem": 22, "code": "#(reduce (fn [sum & _] (+ 1 sum)) 0 %)", "user": "602c30e3e4b0d5df2af2226f"}, {"problem": 22, "code": "#(loop [in % cnt 0]\n  (if (empty? in)\n    cnt\n    (recur (rest in) (inc cnt))))", "user": "5aa098fae4b0d174b936c82e"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "60803206e4b0736b099e42cc"}, {"problem": 22, "code": "#(reduce +\n  (map\n   (constantly 1)%))", "user": "6085edade4b0736b099e42fc"}, {"problem": 22, "code": "(fn my-count [x] (if (nil? x) 0 (inc (my-count (next x)))))", "user": "608531f6e4b0736b099e42f6"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "60864d16e4b0736b099e42fd"}, {"problem": 22, "code": "reduce (fn [x y] (+ x 1)) 0", "user": "60838e6de4b0736b099e42e9"}, {"problem": 22, "code": "#(alength (into-array %))", "user": "6081e475e4b0736b099e42d6"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "6086cdefe4b0736b099e4302"}, {"problem": 22, "code": "#(loop [[head & rest] %1 i 0]\n    (if (nil? head) i\n      (recur rest (inc i))))", "user": "60849bd6e4b0736b099e42f2"}, {"problem": 22, "code": "reduce (fn [x y] (inc x)) 0", "user": "60845eb8e4b0736b099e42ef"}, {"problem": 22, "code": "(fn [lst] (loop [n 0\n                 lst lst]\n            (if (empty? lst)\n              n\n              (recur (inc n) (rest lst)))))", "user": "607e1d9de4b03d835a6eaedb"}, {"problem": 22, "code": "#(apply + (map (fn [x] 1) %))", "user": "6086abade4b0736b099e42ff"}, {"problem": 22, "code": "(fn [x] (loop [x x counter 0] (cond (empty? x) counter\n                                     :else (recur (rest x) (+ 1 counter)))))", "user": "6078ce29e4b0a637ed78035a"}, {"problem": 22, "code": "#(reduce (fn [acc x]\n           (inc acc))\n         0 %)", "user": "607e1c1fe4b03d835a6eaed8"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "608828dee4b0ae75613dcee1"}, {"problem": 22, "code": "(fn [x] (reduce + (map (fn [i] 1) x)))", "user": "60882700e4b0ae75613dcedf"}, {"problem": 22, "code": "(fn f [x] (if (empty? x)\n              0\n              (+ 1 (f (rest x)))))", "user": "6087cb25e4b0ae75613dced8"}, {"problem": 22, "code": "#(reduce + (map (fn [a] 1) %))", "user": "6088ed3fe4b0ae75613dcee6"}, {"problem": 22, "code": "(fn [coll] (reduce + (map (constantly 1) coll)))", "user": "60752ef6e4b069485764de55"}, {"problem": 22, "code": "#(reduce (fn [acc _] (inc acc)) 0 %)", "user": "608910a8e4b0ae75613dceed"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "6033c42ce4b0d5df2af222c3"}, {"problem": 22, "code": "(fn [coll] (reduce (fn [x _] (inc x)) 0 coll))", "user": "60897837e4b0ae75613dcef2"}, {"problem": 22, "code": "reduce (fn [x y] (inc x)) 0", "user": "6089bc95e4b0ae75613dcef5"}, {"problem": 22, "code": "(fn CountASequence [lst] \n  (reduce + (map (fn [n] 1) lst)))", "user": "607508f3e4b069485764de54"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "607e1cf9e4b03d835a6eaed9"}, {"problem": 22, "code": "(fn len [ls]\n  (if (= ls ())\n     0\n    (+ 1 (len (rest ls)))))", "user": "60890415e4b0ae75613dceec"}, {"problem": 22, "code": "(fn [seq]\n  (loop [seq seq\n         cnt 0]\n    (if (empty? seq)\n      cnt\n      (recur (rest seq) (inc cnt)))))", "user": "607b04e5e4b0a637ed780373"}, {"problem": 22, "code": "(fn [seq] (reduce (fn [x y] (+ 1 x)) 0 seq))", "user": "608b20a3e4b0adce4b61c441"}, {"problem": 22, "code": "#(reduce + (map (constantly 1 ) %))", "user": "608b3fe1e4b0adce4b61c442"}, {"problem": 22, "code": "(fn [x] (reduce (fn [y _] (inc y)) 0 x))", "user": "608819b6e4b0ae75613dcedd"}, {"problem": 22, "code": "(fn [col] (reduce (fn [x y] (inc x)) 0 col))", "user": "607f3336e4b05857a65e7747"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "6088c22ee4b0ae75613dcee4"}, {"problem": 22, "code": "reduce (fn [tot, curr] (+ tot 1)) 0", "user": "608ec5e4e4b03bd49d9f36c0"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "6089e8fbe4b0adce4b61c429"}, {"problem": 22, "code": "(fn ans-22 [arr]\n  (if (first arr)\n    (+ 1 (ans-22 (rest arr))) 0))", "user": "608fac60e4b03bd49d9f36c7"}, {"problem": 22, "code": "(fn [s] (reduce (fn [c _] (inc c)) 0 s))", "user": "608dbb69e4b03bd49d9f36bb"}, {"problem": 22, "code": "(fn [seqToCount] (loop [x seqToCount y 0] (if (empty? x) y (recur (rest x) (inc y)))))", "user": "60904332e4b03bd49d9f36ca"}, {"problem": 22, "code": "#(loop [s %1 cnt 0] (if (= s '()) cnt (recur (rest s) (inc cnt))))", "user": "6090e617e4b03bd49d9f36ce"}, {"problem": 22, "code": "(fn [seqq]\n  (reduce (fn [a b] (inc a)) 0 seqq))", "user": "6088395de4b0ae75613dcee2"}, {"problem": 22, "code": "(fn [coll]\n  (loop [curcoll coll\n         collsize 0]\n    (if (empty? curcoll)\n      collsize\n      (recur (rest curcoll) (+ collsize 1)))))", "user": "60726211e4b069485764de36"}, {"problem": 22, "code": "#(.length (vec %))", "user": "609083a8e4b03bd49d9f36cb"}, {"problem": 22, "code": "#(alength (into-array %))", "user": "608e5697e4b03bd49d9f36be"}, {"problem": 22, "code": "(fn [xs] (reduce (fn [sum _] (inc sum)) 0 xs))", "user": "608711b1e4b0736b099e4303"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "608e6047e4b03bd49d9f36bf"}, {"problem": 22, "code": "#(reduce (fn [a _] (inc a)) 0 %)", "user": "6093b56ce4b00e9e6653c3e0"}, {"problem": 22, "code": "(fn my-count [x] (if (empty? x) 0 (inc(my-count (rest x)))))", "user": "6093cc08e4b00e9e6653c3e1"}, {"problem": 22, "code": "#(loop [my-seq % counter 0]\n   (if (empty? my-seq)\n     counter\n     (recur (rest my-seq) (inc counter))))", "user": "608335a4e4b0736b099e42e3"}, {"problem": 22, "code": "(fn [s]\n  (reduce + (map (fn one [x] (+ 0 1)) s)))", "user": "60917abde4b00e9e6653c3d5"}, {"problem": 22, "code": "(fn [a]\n  ((fn [b acc]\n    (if (empty? b)\n      acc\n      (recur (rest b) (inc acc)))) a 0))", "user": "60919461e4b00e9e6653c3d7"}, {"problem": 22, "code": "#(+ 1 (.lastIndexOf (vec %1) (last %1)))", "user": "608ee2f7e4b03bd49d9f36c1"}, {"problem": 22, "code": "reduce (fn[x y](inc x)) 0", "user": "6096e2d4e4b00e9e6653c3f1"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "6097b95ae4b00e9e6653c3f6"}, {"problem": 22, "code": "(fn my-count\n  ([s] (my-count s 0))\n  ([s c]\n   (if (empty? s)\n     c\n     (recur (rest s) (inc c)))))", "user": "6096d37be4b00e9e6653c3f0"}, {"problem": 22, "code": "reduce (fn [x y] (inc x)) 0", "user": "60482e53e4b02d28681c77d3"}, {"problem": 22, "code": "(fn [coll]\n  (reduce\n    (fn [result _] (inc result))\n    0\n    coll))", "user": "6098263be4b00e9e6653c3f9"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "60951d52e4b00e9e6653c3ea"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "609aa543e4b00e9e6653c40c"}, {"problem": 22, "code": "#(alength (to-array %))", "user": "609a54f0e4b00e9e6653c40b"}, {"problem": 22, "code": ";;(fn totnumber [col]\n;;  (inc (first\n;;    (flatten\n;;      (last\n;;        (let [v []]\n;;          (map-indexed (fn [index element]\n;;                          (conj v [index element]))\n;;                        col))\n;;      )))))\n\n\n\n;; 2 new options below:\n\n;;(fn totalnum2 [coll]\n;;  (loop [acc [] i 0]\n;;    (cond (= (vec acc) (vec coll)) i\n;;          :else (recur (conj acc (nth coll i)) (inc i)))))\n\n\n;;(fn totalnum3 [coll]\n;;  (loop [remainder coll i 0]\n;;    (if-not (empty? remainder)\n;;      (recur (drop 1 remainder) (inc i))\n;;      i)))\n\n;; With reduce\n\n(fn totnum [x]\n  (reduce (fn [i n] (inc i)) 0 x))", "user": "6092c0a9e4b00e9e6653c3dc"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "604f66e3e4b0b7ec0ac60ad0"}, {"problem": 22, "code": "(fn [x] (reduce (fn [y _] (inc y)) 0 x))", "user": "609bfa16e4b00e9e6653c414"}, {"problem": 22, "code": "#(alength (to-array %))", "user": "609c1db9e4b00e9e6653c416"}, {"problem": 22, "code": "#(reduce (fn [result elem] (inc result)) 0 %)", "user": "60919828e4b00e9e6653c3d8"}, {"problem": 22, "code": "(fn count-seq\n  [coll]\n  (if (empty? coll)\n    0\n    (inc (count-seq (rest coll)))))", "user": "608c270ae4b03bd49d9f36b3"}, {"problem": 22, "code": "(fn count-sequence ([col] (count-sequence col 0))\n  ([col step] (if-let [r (next col)] (recur r (inc step)) (inc step))))", "user": "609beb06e4b00e9e6653c412"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "6086c44be4b0736b099e4301"}, {"problem": 22, "code": "#(reduce + (map (fn one [in] 1) %))", "user": "6079e5aee4b0a637ed780367"}, {"problem": 22, "code": "(fn [any-seq]\n  (->> any-seq\n       (map (constantly 1))\n       (apply +)))", "user": "60948c3ae4b00e9e6653c3e7"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "6092bfefe4b00e9e6653c3db"}, {"problem": 22, "code": "(fn [s]\n  (if-not (first s)\n    0\n  \t(loop [s s\n    \t   c 0]\n      (if-let [r (next s)]\n        (recur r\n              (inc c))\n        (inc c)))))", "user": "60a39b80e4b00e9e6653c450"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "5d3b0764e4b01671435dbd61"}, {"problem": 22, "code": "(fn[coll]\n  (loop [cnt 0\n         c coll]\n    (if (empty? c)\n      cnt\n      (recur (inc cnt) (rest c)))))", "user": "60a42199e4b00e9e6653c454"}, {"problem": 22, "code": "#(inc (apply max (map-indexed (fn [a b] a) %)))", "user": "60a14335e4b00e9e6653c432"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "609ce09fe4b00e9e6653c41c"}, {"problem": 22, "code": "#(reduce (fn [a b] (+ 1 a)) 0 %)", "user": "5cc9b7dfe4b0ccb061962864"}, {"problem": 22, "code": "(fn [lst]\n  (reduce (fn [a, _] (+ a 1)) 0 lst)\n  )", "user": "60a7c55be4b00e9e6653c468"}, {"problem": 22, "code": "#(reduce\n   (fn [c _] (inc c))\n   0 %)", "user": "60a78f2ce4b00e9e6653c466"}, {"problem": 22, "code": "#(loop [result 0 c %]\n    (if(empty? c) result\n    (recur (inc result) (rest c))))", "user": "609282f6e4b00e9e6653c3da"}, {"problem": 22, "code": "(fn [coll]\n  (reduce (fn [acc val]\n            (inc acc))\n          0\n          coll))", "user": "60a7104be4b00e9e6653c465"}, {"problem": 22, "code": "(fn [x] (reduce + (map (fn [x] 1) x)))", "user": "60a58c7ce4b00e9e6653c45c"}, {"problem": 22, "code": "#(reduce\n    (fn [c &rest] (inc c))\n    0 %)", "user": "60a68a95e4b00e9e6653c461"}, {"problem": 22, "code": "#(last (map (fn [i _] (inc i)) (range) %))", "user": "609c503ee4b00e9e6653c419"}, {"problem": 22, "code": "#(->> %\n     (map (fn [x] 1))\n     (reduce +))", "user": "60ab1536e4b00e9e6653c47e"}, {"problem": 22, "code": ";;#(reduce + (map(fn [x] 1) %))\n#(let [map_of_ones (map (constantly 1) %)]\n  (apply + map_of_ones))", "user": "609c8ac9e4b00e9e6653c41a"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "60ab0ba2e4b00e9e6653c47d"}, {"problem": 22, "code": "(fn count2\n  ([coll] (if (empty? coll) \n            0\n            (count2 (rest coll) 1)))\n  ([coll i] (if (empty? coll)\n              i\n              (count2 (rest coll) (inc i)))))", "user": "609980fce4b00e9e6653c408"}, {"problem": 22, "code": "reduce #(+ %1 (if %2 1)) 0", "user": "60ac91c5e4b00e9e6653c485"}, {"problem": 22, "code": "(fn [coll]\n  (reduce + (map (fn [el] (identity 1)) coll)))", "user": "60a52517e4b00e9e6653c459"}, {"problem": 22, "code": "#(reduce (fn [accum _] (inc accum)) 0 %)", "user": "60ade833e4b00e9e6653c494"}, {"problem": 22, "code": "(fn [s] (loop [i 0 xs s] (if-not (= '() xs) (recur (inc i)(rest xs)) i)))", "user": "60ae0ac5e4b00e9e6653c495"}, {"problem": 22, "code": "(fn cnt [sequ]\n  (reduce (fn [acc cur] (inc acc)) 0 sequ))", "user": "5f2c5912e4b033932238a664"}, {"problem": 22, "code": "#(loop [x % y 0]\n   (if (empty? x) y (recur (drop 1 x) (inc y))))", "user": "60aead30e4b00e9e6653c498"}, {"problem": 22, "code": "(fn [s] (reduce (fn [v s] (inc v)) 0 s))", "user": "60a9f193e4b00e9e6653c476"}, {"problem": 22, "code": "(fn count-seq [coll]\n  (if (instance? String coll)\n    (.length coll)\n    (.size coll)))", "user": "604a3daee4b02d28681c77f2"}, {"problem": 22, "code": "#(reduce (fn [acc x] (inc acc)) 0 %)", "user": "60ace8cae4b00e9e6653c489"}, {"problem": 22, "code": "(fn [values]\n  ((fn [x res] (if (empty? x) res\n                  (recur (drop 1 x) (inc res)))) values 0))", "user": "60aecd73e4b00e9e6653c49a"}, {"problem": 22, "code": "(fn [coll] ((comp last map) (fn [i _] (inc i)) (range) coll))", "user": "60af5fe2e4b0245e5b1b35c0"}, {"problem": 22, "code": "#(loop [counter 0 remaining %] (if (empty? remaining) counter (recur (inc counter) (rest remaining))))", "user": "60ac6345e4b00e9e6653c484"}, {"problem": 22, "code": "#(loop [remaining %\n        cnt 0]\n   (if (empty? remaining)\n     cnt\n     (recur (rest remaining) (inc cnt))))", "user": "60b1add0e4b0e0fa5f1b4227"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "6071dbede4b069485764de34"}, {"problem": 22, "code": "(fn length [x] (if (empty? x) 0 (+ 1 (length (rest x)))))", "user": "60b2aaebe4b0e0fa5f1b4228"}, {"problem": 22, "code": "#(reduce (fn [acc val] (inc acc)) 0 %)", "user": "60b2ad00e4b0e0fa5f1b4229"}, {"problem": 22, "code": "(fn [l]\n  (let [iter (fn [l n]\n               (if (empty? l)\n                 n\n                 (recur (next l) (inc n))))]\n    (iter l 0)))", "user": "60b34c5de4b0e0fa5f1b422e"}, {"problem": 22, "code": "(fn [x] (reduce (fn [acc y] (if-not (nil? y) (+ 1 acc))) 0 x))", "user": "60b3b375e4b0e0fa5f1b4232"}, {"problem": 22, "code": "(fn [lst] (reduce (fn [c _] (inc c)) 0 lst))", "user": "60b174f3e4b0e0fa5f1b4226"}, {"problem": 22, "code": "(fn [col]\n  (loop [col col acc 0]\n    (if (empty? col)\n      acc\n      (recur (rest col) (+ 1 acc)))))", "user": "5e4f4617e4b027a2e10ac0b7"}, {"problem": 22, "code": "(fn [xs]\n  (loop [xs xs\n         cnt 0]\n    (if(empty? xs)\n      cnt\n      (recur (next xs) (inc cnt)))))", "user": "60b57acee4b0e0fa5f1b4238"}, {"problem": 22, "code": "(fn [xs] (reduce (fn [acc, _] (inc acc)) 0 xs))", "user": "60b5fa96e4b0e0fa5f1b4242"}, {"problem": 22, "code": "(partial reduce (fn [acc x] (+ 1 acc)) 0)", "user": "60b616e1e4b0e0fa5f1b4243"}, {"problem": 22, "code": "reduce (fn [a b] (+ 1 a)) 0", "user": "60b61b40e4b0e0fa5f1b4244"}, {"problem": 22, "code": "(fn [coll] (-> coll\n               to-array\n               alength))", "user": "60b68974e4b0e0fa5f1b424b"}, {"problem": 22, "code": "(fn count-a-seq [lat]\n  (reduce (fn [x y] (+ x 1)) 0 lat))", "user": "60b5ecffe4b0e0fa5f1b4241"}, {"problem": 22, "code": "(fn [coll] (apply + (map (fn [x] 1) coll)))", "user": "60b67789e4b0e0fa5f1b424a"}, {"problem": 22, "code": "(fn my-count [coll]\n    (reduce (fn [acc x] (inc acc)) 0 coll))", "user": "60b664d2e4b0e0fa5f1b4249"}, {"problem": 22, "code": "reduce (fn [n _] (inc n)) 0", "user": "60b7e2c5e4b0e0fa5f1b4252"}, {"problem": 22, "code": "#(reduce + (map (fn [i x] i) (repeat 1) %1))", "user": "60b8b9dae4b0e0fa5f1b425d"}, {"problem": 22, "code": "(fn [coll]\n  (loop [i 0 my-coll coll]\n    (if (empty? my-coll)\n      i\n      (recur (inc i) (rest my-coll)))))", "user": "60b79ed6e4b0e0fa5f1b4250"}, {"problem": 22, "code": "(fn counter\n  ([s] (counter s 0))\n  ([s num-elements]\n   (if (empty? s)\n     num-elements\n     (counter (rest s) (inc num-elements)))))", "user": "60b7ef35e4b0e0fa5f1b4254"}, {"problem": 22, "code": "(fn [coll]\n  (loop [c  0\n         xs coll]\n    (let [head (first xs)\n          tail (rest xs)]\n      (if head\n        (recur (inc c) tail)\n        c))))", "user": "60b66033e4b0e0fa5f1b4248"}, {"problem": 22, "code": "(fn count-elements [elements]\n  (reduce (fn [length _] (inc length)) 0 elements))", "user": "60b98974e4b0e0fa5f1b4271"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "60afc597e4b0245e5b1b35c3"}, {"problem": 22, "code": "(fn cont [lst]\n  (letfn\n    [(conter [thelst x]\n            (\n             if (= thelst [])\n             x\n             (conter (rest thelst) (+ x 1))\n            ))]\n    (conter lst 0)\n  )\n)", "user": "60bb8d78e4b0e0fa5f1b4283"}, {"problem": 22, "code": "(fn my-count [xs]\n    (loop [xs xs\n           out 0]\n      (if (empty? xs)\n        out\n        (recur (rest xs) (inc out))\n        )))", "user": "60bb21d5e4b0e0fa5f1b4281"}, {"problem": 22, "code": "(fn [x] \n  (loop [i 0\n         x1 x]\n    (if (seq x1)\n      (recur (inc i) (rest x1))\n      i )\n   )\n)", "user": "5941f6e3e4b060784b3b7904"}, {"problem": 22, "code": "(fn [thing] (reduce + (map (fn [_] 1) (seq thing))))", "user": "60aeadd4e4b00e9e6653c499"}, {"problem": 22, "code": "#(reduce + (vals (frequencies %)))", "user": "5d3e8c3de4b01671435dbd73"}, {"problem": 22, "code": "(fn dog [x]\n  (if (first x)\n    (+ 1 (dog (rest x)))\n    0))", "user": "60beb061e4b0e0fa5f1b428d"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "60bca877e4b0e0fa5f1b4287"}, {"problem": 22, "code": "(fn [col] (reduce (fn [res _] (+ 1 res)) 0 col))", "user": "60bf2477e4b0e0fa5f1b4291"}, {"problem": 22, "code": "#(loop [x %\n         num 0]\n    (if (empty? x)\n      num\n      (recur (rest x) (inc num))))", "user": "60bf6452e4b0e0fa5f1b4295"}, {"problem": 22, "code": "#(reduce (fn [x y] (+ x 1)) 0 %)", "user": "60bf911ce4b0e0fa5f1b429c"}, {"problem": 22, "code": "(fn my-count [s]\n  (if (empty? s)\n    0\n    (+ (my-count (rest s)) 1)))", "user": "60ad8af3e4b00e9e6653c490"}, {"problem": 22, "code": "(fn [s] (apply max (keys (zipmap (iterate inc 1) s))))", "user": "60b8f098e4b0e0fa5f1b425f"}, {"problem": 22, "code": "(fn count-a-seq\n  [col]\n  (loop [remaining col result 0]\n    (if (empty? remaining)\n      result\n      (recur (rest remaining) (inc result)))))", "user": "60bf7458e4b0e0fa5f1b4296"}, {"problem": 22, "code": "(fn( [st] (loop [state st\n                 i 0]\n            (if (empty? state )\n              i\n              (recur (rest state) (+ i 1))))))", "user": "60bfb68be4b0e0fa5f1b429e"}, {"problem": 22, "code": "(fn c[coll]                                                                     \n  (if (seq coll)                                                                \n    (+ 1 (c (rest coll)))                                                       \n    0                                                                           \n    ))", "user": "60a602e0e4b00e9e6653c45d"}, {"problem": 22, "code": "(fn c[coll]                                                                     \n  (if (seq coll)                                                                \n    (+ 1 (c (rest coll)))                                                       \n    0                                                                           \n    ))", "user": "6099fe32e4b00e9e6653c409"}, {"problem": 22, "code": "(fn [xs]\n  (loop [n 0\n         xs xs]\n    (if (empty? xs)\n      n\n      (recur (inc n) (rest xs)))\n )   )", "user": "60b63231e4b0e0fa5f1b4247"}, {"problem": 22, "code": "(fn count-n \n([coll] (count-n (seq coll) 0))\n([coll accum]\n  (if (empty? coll) \n   accum\n   (count-n (rest coll) (inc accum)))))", "user": "60a6bbe5e4b00e9e6653c464"}, {"problem": 22, "code": "(fn [x]\n   (loop [i 0 q x]\n     (if (first q)\n       (recur (inc i) (rest q))\n       i)))", "user": "60740c42e4b069485764de43"}, {"problem": 22, "code": "(fn _count [seq]\n   (if (= seq ())\n     0\n     (+ 1 (_count (rest seq)))))", "user": "60bf4e5de4b0e0fa5f1b4293"}, {"problem": 22, "code": "#(.length (vec %))", "user": "60c558e9e4b0e0fa5f1b42ce"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "60b0e7efe4b0e0fa5f1b4223"}, {"problem": 22, "code": "reduce (fn [acc _] (inc acc)) 0", "user": "60c0ceb7e4b0e0fa5f1b42a6"}, {"problem": 22, "code": "(fn [s]\n  (loop [[part & remaining] s result 0]\n    (if (nil? part) result\n        (recur remaining (inc result)))))", "user": "60c4e5dfe4b0e0fa5f1b42cd"}, {"problem": 22, "code": "(fn [x] (reduce + (map (fn [x] 1) x)))", "user": "60c7c23be4b0e0fa5f1b42eb"}, {"problem": 22, "code": "#(reduce (fn [x y] (inc x)) 0 %)", "user": "60c8cfece4b0e0fa5f1b42fe"}, {"problem": 22, "code": "(fn how-many [xs]\n  (reduce (fn [memo _x] (inc memo)) 0 xs))", "user": "60c91f48e4b0e0fa5f1b4304"}, {"problem": 22, "code": "(fn [x] (reduce (fn [c x] (inc c)) 0 x))", "user": "60c3f665e4b0e0fa5f1b42c8"}, {"problem": 22, "code": "(fn  [coll] (reduce (fn [intial value] (inc intial)) 0 coll))", "user": "60c90322e4b0e0fa5f1b4302"}, {"problem": 22, "code": ";(fn [coll]\n;    (loop [cnt 0\n;           acc coll]\n;       (if (empty? acc)\n;            cnt\n;          (recur (inc cnt) (butlast acc))\n;)))\n\nreduce (fn [c coll] (inc c)) 0", "user": "60c8e662e4b0e0fa5f1b4300"}, {"problem": 22, "code": "#(reduce (fn [acc v] (inc acc)) 0 %)", "user": "60cb3467e4b0e0fa5f1b4313"}, {"problem": 22, "code": "(fn counting [x]\n  (if (empty? x)\n  0\n  (+ (counting (rest x)) 1)))", "user": "60ad7cbae4b00e9e6653c48f"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "60ca4bf9e4b0e0fa5f1b430e"}, {"problem": 22, "code": "#(+ 1 (first (apply max-key first (map-indexed vector %))))", "user": "60cb8589e4b0e0fa5f1b431b"}, {"problem": 22, "code": "(fn f [v] (if (= v []) 0 (+ 1 (f (rest v)))))", "user": "60c86bbde4b0e0fa5f1b42fb"}, {"problem": 22, "code": "#(reduce \n    (fn [c _] (inc c))\n     0 %)", "user": "60c06968e4b0e0fa5f1b42a0"}, {"problem": 22, "code": "(fn\n  [coll]\n  (loop [counter 0 collection coll]\n    (if (empty? collection)\n      counter\n      (recur (inc counter) (rest collection)))))", "user": "603e8e3ae4b0d5df2af22316"}, {"problem": 22, "code": "(fn [xs] (loop [counter 0 aux-xs xs] (if  (empty? aux-xs) counter (recur (inc counter) (rest aux-xs)))))", "user": "60cebbd3e4b0e0fa5f1b4334"}, {"problem": 22, "code": "#(reduce (fn [x y] (+ x 1)) 0 %)", "user": "60cb480be4b0e0fa5f1b4317"}, {"problem": 22, "code": "(fn [coll] (reduce + (map (constantly 1) coll)))", "user": "60d1ca09e4b0250a41de0b05"}, {"problem": 22, "code": "(fn [n] (reduce + (map (constantly 1) n)))", "user": "60d1e522e4b0250a41de0b07"}, {"problem": 22, "code": "#(reduce (fn [sum _] (inc sum)) 0 %1)", "user": "60c43b20e4b0e0fa5f1b42c9"}, {"problem": 22, "code": "(fn [s]\n   (reduce (fn [acc _] (inc acc)) 0 s))", "user": "60cb3836e4b0e0fa5f1b4315"}, {"problem": 22, "code": "reduce (fn [x y] (+ 1 x)) 0", "user": "5f8f1d18e4b0715f5002d779"}, {"problem": 22, "code": "(fn [coll]\n  (let [c (fn [coll i]\n            (if (empty? coll) i\n              (recur (rest coll) (inc i))))\n        ]\n    (c coll 0)))\n\n;; not mine\n;; (reduce (fn [x y] (inc x)) 0 [1 2 3])", "user": "60ad1b70e4b00e9e6653c48d"}, {"problem": 22, "code": "#(reduce (fn [cnt _] (inc cnt)) 0 %)", "user": "60d655c7e4b0d60f5ea6f7e8"}, {"problem": 22, "code": "#(reduce (fn [acc x] (inc acc)) 0 %)", "user": "60d6aa84e4b0d60f5ea6f7e9"}, {"problem": 22, "code": "(fn [input] (reduce #(+ %1 (if-not %2 0 1)) 0 input))", "user": "54394909e4b032a45b86931c"}, {"problem": 22, "code": "(fn my_count [a]\n(loop [a a n 1]\n(if (empty? (rest a)) n\n(recur (rest a)(+ n 1)))))", "user": "602ff4fee4b0d5df2af2229d"}, {"problem": 22, "code": "#(reduce (fn [r x] (inc r)) 0 (seq %))", "user": "60ccb1c0e4b0e0fa5f1b4325"}, {"problem": 22, "code": "(fn [s]\n  (reduce (fn [c _] (inc c)) 0 s))", "user": "60c06c14e4b0e0fa5f1b42a1"}, {"problem": 22, "code": "(fn [x] (reduce + (map #(if (nil? %) nil 1) x)))", "user": "60d95e8ce4b082f26314206c"}, {"problem": 22, "code": "#(loop [size 0 arr %] (if (empty? arr) size (recur (+ 1 size) (rest arr))))", "user": "60db702ae4b02d404a3b4372"}, {"problem": 22, "code": "#(reduce + (map (fn [x] 1) %))", "user": "60dd865ee4b0d8b48c489db3"}, {"problem": 22, "code": "(fn [x] (reduce + (map (fn [_] 1) x)))", "user": "60ddc7cbe4b0abd5a8cdd531"}, {"problem": 22, "code": "#(reduce + (map (constantly 1) %))", "user": "60ce4a2be4b0e0fa5f1b4330"}, {"problem": 22, "code": "(fn [lst]        \n  (loop [c 0 l lst]           \n    (if (empty? l)              \n      c                           \n      (recur (inc c) (rest l)))))", "user": "60e2aca7e4b002d5a55d5f3b"}, {"problem": 22, "code": "(fn [x] (reduce (fn [acc item] (inc acc)) 0 x))", "user": "60e4a074e4b077273a6716a1"}, {"problem": 22, "code": "#(reduce (fn [a v] (+ 1 a)) 0 %)", "user": "6079e2dfe4b0a637ed780366"}, {"problem": 22, "code": "#(reduce (fn [acc xs] (inc acc)) 0 %)", "user": "60460876e4b02d28681c77bd"}, {"problem": 22, "code": "(fn size [[_ & tail :as coll]]\n  (if coll\n    (inc (size tail))\n    0))", "user": "60e89572e4b0fbed2fe3123e"}]